WEBVTT

1
00:00:00.570 --> 00:00:03.270
&gt;&gt; Speaker 1: Just a question
about defining components,

2
00:00:03.270 --> 00:00:07.181
when to use functional components
versus EXS class components.

3
00:00:08.280 --> 00:00:11.835
&gt;&gt; Brian Holt: One Airbnb's linting
rules are gonna yell at you so

4
00:00:11.835 --> 00:00:14.323
that's a pretty good indication.

5
00:00:14.323 --> 00:00:19.049
But the principal underneath
that is if you have no state,

6
00:00:19.049 --> 00:00:23.005
if you have no life cycles or
anything like that,

7
00:00:23.005 --> 00:00:27.650
it's a good idea to use
functional components.

8
00:00:27.650 --> 00:00:32.326
The reason why is that they're more
simple and I am a big believer in the,

9
00:00:32.326 --> 00:00:37.157
what is it, the,
&gt;&gt; Brian Holt: The rule of

10
00:00:37.157 --> 00:00:42.230
the least powerful abstraction, right?

11
00:00:42.230 --> 00:00:45.160
So you want something that's the least
powerful possible that fulfills what

12
00:00:45.160 --> 00:00:49.620
you're doing and that kind of
reduces your area for bugs right?

13
00:00:49.620 --> 00:00:52.190
So there's not really a whole lot that
can go long with the function for

14
00:00:52.190 --> 00:00:53.200
example, right?

15
00:00:53.200 --> 00:00:57.160
As soon as you start introduces classes
as CF more to like mentally parse

16
00:00:57.160 --> 00:01:00.201
to get through it and
then you have more power, right?

17
00:01:00.201 --> 00:01:03.280
You can have life cycle methods,
you can have state,

18
00:01:03.280 --> 00:01:07.729
you can have all these different things,
whereas a function is more simple,

19
00:01:07.729 --> 00:01:11.130
it's just it's easier to not have bugs.

20
00:01:11.130 --> 00:01:15.900
So that's my general principle of
no lifecycle methods and no state,

21
00:01:15.900 --> 00:01:20.920
then use a stateless functional component,
otherwise use and EXS class.

22
00:01:24.480 --> 00:01:26.473
&gt;&gt; Speaker 1: Have you
ever had to use context?

23
00:01:28.821 --> 00:01:30.805
&gt;&gt; Brian Holt: I have.

24
00:01:30.805 --> 00:01:34.540
In fact in version two of this,
we do talk about how to use context

25
00:01:35.620 --> 00:01:38.440
just because it was necessary with
previous versions of React router.

26
00:01:40.040 --> 00:01:43.470
So, I showed you how to use props,
and I showed you how to use state.

27
00:01:43.470 --> 00:01:46.790
But there is a lurking
third type of way to store

28
00:01:46.790 --> 00:01:49.890
your state which is called context.

29
00:01:49.890 --> 00:01:51.880
So instead of saying this
dot props dot whatever,

30
00:01:51.880 --> 00:01:55.620
you are going to say this dot
context dot something, right?

31
00:01:55.620 --> 00:01:57.950
The difference between context and

32
00:01:57.950 --> 00:02:03.080
props is that you're app has one context,
so as soon

33
00:02:03.080 --> 00:02:08.640
as I said context in one component it's
available everywhere in your entire app.

34
00:02:08.640 --> 00:02:09.520
Right?

35
00:02:09.520 --> 00:02:12.530
It doesn't sound scary to you,
that's because it's scary.

36
00:02:12.530 --> 00:02:13.900
That's a bad idea, right?

37
00:02:14.910 --> 00:02:19.440
In fact, inside of the React
document it says this is

38
00:02:19.440 --> 00:02:25.430
an experimental API, and you should
use caution when building upon this.

39
00:02:25.430 --> 00:02:28.260
It's been around for
a year-and-a-half, right?

40
00:02:28.260 --> 00:02:33.750
So it's not super experimental anymore and
there are people in the react community,

41
00:02:33.750 --> 00:02:36.840
that are big advocates for
using context in places.

42
00:02:37.920 --> 00:02:40.550
I have literally never set
anything in context before.

43
00:02:41.560 --> 00:02:43.590
Like in all of my react
apps that I've ever built,

44
00:02:43.590 --> 00:02:48.540
I have never had to write to context.

45
00:02:48.540 --> 00:02:50.940
The part where context is
actually useful is for

46
00:02:50.940 --> 00:02:53.730
things like, React-router-dom, right?

47
00:02:53.730 --> 00:03:01.650
So when it instantiates itself,
like here on app.jsx.

48
00:03:01.650 --> 00:03:03.210
What this component is going to do here,

49
00:03:03.210 --> 00:03:06.740
it's actually gonna set
the router on context, right?

50
00:03:06.740 --> 00:03:10.390
And then when I go down into like,
ShowCard.

51
00:03:10.390 --> 00:03:12.440
And I have a link right here, right?

52
00:03:12.440 --> 00:03:18.040
A link, this link is actually reads
the router from contacts, right.

53
00:03:18.040 --> 00:03:19.050
So it's a great way for

54
00:03:19.050 --> 00:03:23.520
libraries to be able to connect out with
the components that they render out.

55
00:03:23.520 --> 00:03:25.670
So for
that particular use case I'm all for it.

56
00:03:25.670 --> 00:03:28.871
But if you're writing a library that
uses this higher order components,

57
00:03:28.871 --> 00:03:30.450
makes a ton of sense.

58
00:03:30.450 --> 00:03:33.600
If you're writing stuff yourself,
it's a really bad idea.

59
00:03:33.600 --> 00:03:35.170
If you're trying to set
something on context,

60
00:03:35.170 --> 00:03:37.840
you really need to ask two
questions of what am I doing and

61
00:03:37.840 --> 00:03:39.310
why is this a good idea?

62
00:03:39.310 --> 00:03:41.550
And can I do this differently?

63
00:03:41.550 --> 00:03:43.287
Can I achieve this with state?

64
00:03:43.287 --> 00:03:44.950
Can I achieve this with props?

65
00:03:44.950 --> 00:03:46.540
Can I avoid setting context?

66
00:03:48.700 --> 00:03:51.240
When you start using context in
a lot of places, this is where you

67
00:03:51.240 --> 00:03:56.070
need to start saying to yourself, I
probably need something like Redux, right?

68
00:03:56.070 --> 00:04:00.160
So, once you get to that point, you either
go down the round of using context or

69
00:04:00.160 --> 00:04:02.030
you go down the route of using Redux.

70
00:04:02.030 --> 00:04:02.850
Usually, you don't do both.

71
00:04:05.750 --> 00:04:10.900
So, that's my spiel on context is,
I don't use it.

72
00:04:10.900 --> 00:04:13.210
Once I get to the point where
I want to use it, I use Redux.

73
00:04:13.210 --> 00:04:14.434
But there are people
that disagree with me.

74
00:04:19.021 --> 00:04:21.925
&gt;&gt; Speaker 3: More interested in Fiber,
but as you mentioned,

75
00:04:21.925 --> 00:04:26.072
you're not going to cover it and
it's suppose to keep the API the same so

76
00:04:26.072 --> 00:04:28.400
nothing in this workshop will change.

77
00:04:28.400 --> 00:04:30.100
&gt;&gt; Brian Holt: Yeah.
Nothing in this workshop will change

78
00:04:30.100 --> 00:04:32.240
except you won't be
able to use perf tools.

79
00:04:32.240 --> 00:04:37.590
And the one thing that will change with
Fiber that I don't really care about,

80
00:04:37.590 --> 00:04:38.900
but I will show you nonetheless.

81
00:04:41.100 --> 00:04:44.384
So you'll be able to have
multiple top level returns.

82
00:04:48.759 --> 00:04:50.750
&gt;&gt; Brian Holt: This does not work today.

83
00:04:50.750 --> 00:04:51.795
This will work with Fiber.

84
00:04:56.222 --> 00:04:57.682
&gt;&gt; Brian Holt: But
I think that that's really it.

85
00:05:00.141 --> 00:05:02.721
&gt;&gt; Brian Holt: They're gonna do
some other interesting things,

86
00:05:02.721 --> 00:05:06.684
something that they're talking about
doing, which will not ship with 16.

87
00:05:07.760 --> 00:05:12.750
So if I have something like,
let's see, like search.

88
00:05:15.960 --> 00:05:18.390
Well let's do the details.

89
00:05:18.390 --> 00:05:24.445
So here I have componentDidMount and
I'm doing axios here.

90
00:05:24.445 --> 00:05:27.564
And I'm using a promise here.

91
00:05:27.564 --> 00:05:30.720
Eventually, when they want to get
to the point where all of these

92
00:05:30.720 --> 00:05:35.560
life cycle methods are async methods,
so that you can do async await.

93
00:05:37.250 --> 00:05:43.336
So I can do async componentDidMount,
so instead of doing, I can say,

94
00:05:43.336 --> 00:05:49.315
const response = await.

95
00:05:49.315 --> 00:05:54.742
Await.axios.get and
then rather than doing all this

96
00:05:54.742 --> 00:06:00.240
dot hen business down here
it will do async away.

97
00:06:00.240 --> 00:06:02.310
If that doesn't look familiar with
you then I invite you to go check

98
00:06:02.310 --> 00:06:06.720
out what async away does but
that's kind of one of their goals and

99
00:06:06.720 --> 00:06:08.930
they're getting there but
that's down the road.

100
00:06:11.390 --> 00:06:13.890
&gt;&gt; Speaker 4: Follow up would
be can you do that now?

101
00:06:13.890 --> 00:06:18.348
With a single wait and, like,

102
00:06:18.348 --> 00:06:24.180
a bad Poly field with the ES-2017.

103
00:06:24.180 --> 00:06:27.087
&gt;&gt; Brian Holt: Not with
the life cycle methods.

104
00:06:27.087 --> 00:06:33.076
No, because it has to be invoked
like a new sync-method, right.

105
00:06:33.076 --> 00:06:35.810
And that doesn't work within
the stock architecture.

106
00:06:35.810 --> 00:06:36.906
&gt;&gt; Speaker 4: Thanks.

107
00:06:36.906 --> 00:06:37.406
&gt;&gt; Brian Holt: Yep.

