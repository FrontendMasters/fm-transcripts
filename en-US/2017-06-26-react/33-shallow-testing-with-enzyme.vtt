WEBVTT

1
00:00:00.000 --> 00:00:03.249
&gt;&gt; Brian Holt: I wanna to show you
a problem with what we have right now.

2
00:00:03.249 --> 00:00:08.167
So if I come in here to ShowCard.jsx and
I change this to be, I don't know,

3
00:00:08.167 --> 00:00:17.619
I'll put another thing in here,
&gt;&gt; Brian Holt: Something different.

4
00:00:17.619 --> 00:00:23.982
So I have changed ShowCard, and
I have not changed search.jsx, right?

5
00:00:23.982 --> 00:00:27.194
If I run test again, what's gonna happen?

6
00:00:29.437 --> 00:00:31.835
&gt;&gt; Brian Holt: Let's do it, yarn test.

7
00:00:34.606 --> 00:00:36.673
&gt;&gt; Brian Holt: I failed my test.

8
00:00:36.673 --> 00:00:42.735
So something going wrong in ShowCard
is failing my search component test.

9
00:00:42.735 --> 00:00:45.198
Now some people say that's fine.

10
00:00:45.198 --> 00:00:48.586
I don't care, I just want something to
fail, and that can be your opinion.

11
00:00:48.586 --> 00:00:51.413
It's wrong, but that can be your opinion.

12
00:00:51.413 --> 00:00:52.964
Just kidding, I mean maybe.

13
00:00:52.964 --> 00:00:57.810
I think it's wrong, but
my problem with this is that if there's

14
00:00:57.810 --> 00:01:02.043
nothing wrong with Search I
don't want Search to fail.

15
00:01:02.043 --> 00:01:03.270
I want ShowCard to fail.

16
00:01:03.270 --> 00:01:08.258
I want the test for ShowCard to fail so
that I immediately have to go and

17
00:01:08.258 --> 00:01:09.812
check out ShowCard.

18
00:01:09.812 --> 00:01:13.552
So let's bring in a library that's
actually going to allow us to do that.

19
00:01:19.152 --> 00:01:21.567
&gt;&gt; Brian Holt: In fact
I'm gonna leave this for

20
00:01:21.567 --> 00:01:24.704
now an we'll fix it here in just a second.

21
00:01:24.704 --> 00:01:25.233
[COUGH] So

22
00:01:25.233 --> 00:01:30.649
I'll come back to search.spec.jsx,
&gt;&gt; Brian Holt: And

23
00:01:30.649 --> 00:01:33.617
we are going to import
a library called enzyme.

24
00:01:33.617 --> 00:01:39.386
So import, shallow,

25
00:01:39.386 --> 00:01:43.034
from enzyme.

26
00:01:47.133 --> 00:01:48.847
&gt;&gt; Brian Holt: And
we're gonna modify this a little bit and

27
00:01:48.847 --> 00:01:50.292
we're also going to drop renderer.

28
00:01:54.667 --> 00:01:57.371
&gt;&gt; Brian Holt: Cuz enzyme is actually
going to use renderer underneath the hood

29
00:01:57.371 --> 00:01:59.475
so we don't actually have
to import it directly,

30
00:01:59.475 --> 00:02:01.139
in fact you can't import it directly.

31
00:02:01.139 --> 00:02:06.836
You can't have renderer and
enzyme in the same import.

32
00:02:06.836 --> 00:02:09.684
So what we're gonna do
here is we're going to,

33
00:02:09.684 --> 00:02:13.545
instead of doing renderer.create,
we're gonna do shallow.

34
00:02:17.484 --> 00:02:19.864
&gt;&gt; Brian Holt: And then we can
actually just do this directly.

35
00:02:19.864 --> 00:02:24.287
So expect component to match snapshot.

36
00:02:27.975 --> 00:02:33.240
&gt;&gt; Brian Holt: So what enzyme is
the wrapper on top of React Test Renderer?

37
00:02:33.240 --> 00:02:34.834
But it's gonna do certain things for us.

38
00:02:34.834 --> 00:02:37.127
One of the things that it's going
to address the problem that I

39
00:02:37.127 --> 00:02:37.796
just showed you.

40
00:02:37.796 --> 00:02:42.124
It's actually going to stub out all
of the children components, right?

41
00:02:42.124 --> 00:02:44.542
So, for example, we have ShowCard, right?

42
00:02:44.542 --> 00:02:47.387
It's going to not actually go down and
render everything in ShowCard.

43
00:02:47.387 --> 00:02:52.366
It's just going to say a show card was
rendered here with these props, and

44
00:02:52.366 --> 00:02:56.722
then it doesn't actually dive
down into that child component.

45
00:02:56.722 --> 00:03:02.316
So, what's awesome about that is it stops
caring what's happening in ShowCard, and

46
00:03:02.316 --> 00:03:07.388
it will only fail things in Search when
something in Search is actually wrong.

47
00:03:07.388 --> 00:03:11.073
This is still not gonna work yet,
we have to do one more thing.

48
00:03:11.073 --> 00:03:16.640
Save that, go to package.json,
and we need to tell,

49
00:03:16.640 --> 00:03:20.643
you can put this anywhere, wherever.

50
00:03:20.643 --> 00:03:24.012
We have to give this
a jest top level property,

51
00:03:26.433 --> 00:03:29.355
&gt;&gt; Brian Holt: We have to tell jest how to

52
00:03:29.355 --> 00:03:32.980
snapshot enzyme components.

53
00:03:32.980 --> 00:03:38.270
So what we're gonna do
here is we're gonna say

54
00:03:38.270 --> 00:03:45.668
snapshotSerializers,
&gt;&gt; Brian Holt: Which

55
00:03:45.668 --> 00:03:48.968
is gonna be an array because you could
have multiple kinds of serializers, but

56
00:03:48.968 --> 00:03:49.925
we'll just have one.

57
00:03:49.925 --> 00:03:54.658
It's gonna be jest-serializer-enzyme.

58
00:04:01.105 --> 00:04:04.666
&gt;&gt; Brian Holt: So again, what this
is doing, this is telling jest hey,

59
00:04:04.666 --> 00:04:09.431
whenever you encounter an enzyme
component, this is how you serialize it.

60
00:04:09.431 --> 00:04:13.393
It's giving it code to know how to
serialize that into a snapshot.

61
00:04:13.393 --> 00:04:14.381
Does that make sense?

62
00:04:18.004 --> 00:04:20.276
&gt;&gt; Brian Holt: Okay, cool.

63
00:04:20.276 --> 00:04:26.116
So, go back to your search.spec.jsx,
and now save it.

64
00:04:28.443 --> 00:04:30.961
&gt;&gt; Brian Holt: And come back and
run yarn test again.

65
00:04:34.692 --> 00:04:39.504
&gt;&gt; Brian Holt: And now it's gonna fail
again because now it has the enzyme output

66
00:04:39.504 --> 00:04:41.703
and not the previous output.

67
00:04:41.703 --> 00:04:44.438
But this is what the enzyme
output looks like.

68
00:04:44.438 --> 00:04:48.166
Notice that it was actually going down
like rendering The Game Of Thrones,

69
00:04:48.166 --> 00:04:50.067
all of the markup inside of ShowCard.

70
00:04:50.067 --> 00:04:53.605
Now it just says I'm getting a ShowCard,
here's the props passed in.

71
00:04:53.605 --> 00:04:55.317
I don't know anything else about it,
right?

72
00:04:59.952 --> 00:05:01.319
&gt;&gt; Brian Holt: Does that make sense?

73
00:05:01.319 --> 00:05:04.413
So let's go ahead and
run yarn test:update, so

74
00:05:04.413 --> 00:05:08.420
then we can actually just go in and
look at the snapshot, okay?

75
00:05:08.420 --> 00:05:15.372
So we updated that, and
let's go look at the snap, .snap.

76
00:05:15.372 --> 00:05:18.300
So again, look in here.

77
00:05:18.300 --> 00:05:21.260
Rather than actually outputting
the markup for ShowCard,

78
00:05:21.260 --> 00:05:24.351
it's just actually giving you
a React-looking component.

79
00:05:29.085 --> 00:05:29.947
&gt;&gt; Brian Holt: Make sense?

80
00:05:32.612 --> 00:05:34.459
&gt;&gt; Brian Holt: Pretty cool,
I think, right?

81
00:05:34.459 --> 00:05:38.340
So now, even though that we're
messing around with ShowCard in here,

82
00:05:38.340 --> 00:05:40.097
so I can go back and delete this.

83
00:05:40.097 --> 00:05:45.233
Save it, and try running this again and
update, just test.

84
00:05:48.738 --> 00:05:53.165
&gt;&gt; Brian Holt: It'll still passes by the
fact that I'm changing things in ShowCard.

85
00:05:53.165 --> 00:05:55.031
You have a question?

86
00:05:55.031 --> 00:05:59.409
&gt;&gt; Speaker 2: Yeah, Doug's asking,
with the test and test update scripts,

87
00:05:59.409 --> 00:06:02.908
does that automatically
set the environment in v?

88
00:06:05.257 --> 00:06:06.155
&gt;&gt; Brian Holt: It must be.

89
00:06:08.732 --> 00:06:09.938
&gt;&gt; Brian Holt: I had not thought of that.

90
00:06:13.361 --> 00:06:16.187
&gt;&gt; Brian Holt: Yeah, I wonder if jest,
let's actually look.

91
00:06:16.187 --> 00:06:17.581
I have no idea.

92
00:06:17.581 --> 00:06:22.445
So if you look at my notes, I actually
have in there setting the node end.

93
00:06:22.445 --> 00:06:24.435
But if we go to spec.jsx,

94
00:06:30.612 --> 00:06:37.207
&gt;&gt; Brian Holt: process.env.NODE_ENV.

95
00:06:37.207 --> 00:06:39.011
So let's try running that.

96
00:06:44.366 --> 00:06:47.953
&gt;&gt; Brian Holt: Yeah, check that out,
it actually sets the NODE_EMV for you.

97
00:06:47.953 --> 00:06:48.740
Who knew?

98
00:06:48.740 --> 00:06:50.664
I did not know that, today I learned.

99
00:06:53.030 --> 00:06:55.867
&gt;&gt; Brian Holt: That is pure,
fortunate happenstance.

100
00:06:55.867 --> 00:07:04.793
[LAUGH]
&gt;&gt; Brian Holt: So

101
00:07:04.793 --> 00:07:07.545
the way that you would handle that in

102
00:07:07.545 --> 00:07:10.662
here,
&gt;&gt; Brian Holt: So

103
00:07:10.662 --> 00:07:14.023
you could say node env equals test jest,
right?

104
00:07:14.023 --> 00:07:17.153
And you can change this to be whatever
you want, it's like production for

105
00:07:17.153 --> 00:07:18.275
your server or whatever.

106
00:07:21.693 --> 00:07:23.852
&gt;&gt; Brian Holt: This is okay if you're
using it just for yourself and

107
00:07:23.852 --> 00:07:25.731
you're sure that everyone
using it is bash.

108
00:07:25.731 --> 00:07:28.354
This is not going to work across shells,
right?

109
00:07:28.354 --> 00:07:33.388
So there's a tool called crossenv
which I don't remember the API for it.

110
00:07:33.388 --> 00:07:34.399
It looks like this.

111
00:07:37.033 --> 00:07:38.669
&gt;&gt; Brian Holt: And
then you provide it like,

112
00:07:38.669 --> 00:07:40.768
I think it looks something like that.

113
00:07:40.768 --> 00:07:43.437
It's another node package
that you would install

114
00:07:43.437 --> 00:07:47.070
that will take care of all those
various different shells to cover.

115
00:07:47.070 --> 00:07:51.078
So if you need to be setting
your environment across shells,

116
00:07:51.078 --> 00:07:52.500
this is how you do it.

117
00:07:52.500 --> 00:07:56.733
Enzymes are super cool too, tool.

118
00:07:56.733 --> 00:07:59.717
There's an interesting
thread on the GitHub for

119
00:07:59.717 --> 00:08:04.312
React that they considered making it
the official testing speed of React.

120
00:08:04.312 --> 00:08:08.506
And they ended up not doing it but
they said like internal ad Facebook they

121
00:08:08.506 --> 00:08:11.206
actually do use enzyme for
all their testing.

122
00:08:11.206 --> 00:08:14.912
The only reason they don't make it
official is they thought it might stunt

123
00:08:14.912 --> 00:08:18.041
like the innovation happening
around testing in React, so.

124
00:08:18.041 --> 00:08:22.569
Nonetheless pretty much any company that's
testing React is probably using enzyme.

125
00:08:27.679 --> 00:08:33.795
&gt;&gt; Brian Holt: Okay, so
let's go back and look at spec.jsx here.

126
00:08:33.795 --> 00:08:37.472
Enzyme has several layers of rendering.

127
00:08:37.472 --> 00:08:40.494
The one that you want to be using
as much as possible is shallow.

128
00:08:40.494 --> 00:08:42.980
You can see that our test is pretty zippy,
right?

129
00:08:42.980 --> 00:08:47.051
It's not doing anything particularly crazy
cuz it's not actually creating some sort

130
00:08:47.051 --> 00:08:48.678
of fake DOM or anything like that.

131
00:08:48.678 --> 00:08:51.611
It's just rendering up the component and

132
00:08:51.611 --> 00:08:55.813
testing against the markup
that's being rendered there.

133
00:08:55.813 --> 00:08:59.322
If you need to go deeper,
there's another one called render, and

134
00:08:59.322 --> 00:09:02.532
if you wanna go deeper than
that there's one called static.

135
00:09:02.532 --> 00:09:05.639
You don't have to bring those in, I'm
just showing you that they're available.

136
00:09:05.639 --> 00:09:09.218
Render is actually going to emulate a DOM.

137
00:09:09.218 --> 00:09:11.215
With like JS DOM, right?

138
00:09:11.215 --> 00:09:14.443
But if you've ever tested with
JS DOM before, it's real slow.

139
00:09:14.443 --> 00:09:17.351
It's gonna greatly slow down your tests,
right?

140
00:09:17.351 --> 00:09:21.028
And a fast test speed is a happy
test speed in my opinion.

141
00:09:21.028 --> 00:09:24.872
Static is actually going to bring in
cheerio, if you're familiar with cheerio.

142
00:09:24.872 --> 00:09:30.538
It's an awesome library for like doing DOM
exploring in any node-like environment, so

143
00:09:30.538 --> 00:09:35.537
you can actually fetch a page using Ajax
in your server and pull stuff off of it.

144
00:09:35.537 --> 00:09:38.991
So if you wanna do web scraping,
cheerio is a really great way to do it.

145
00:09:38.991 --> 00:09:43.052
So that's what static does is it uses
cheerio to explore your React component,

146
00:09:43.052 --> 00:09:44.944
and those are also available to you.

147
00:09:48.094 --> 00:09:52.406
&gt;&gt; Brian Holt: But again, both static and
render are much slower than shallow.

148
00:09:52.406 --> 00:09:55.720
Shallow is pretty fast, so
stick to shallow where possible.

