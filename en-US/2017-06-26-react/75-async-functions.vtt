WEBVTT

1
00:00:00.470 --> 00:00:02.970
&gt;&gt; Brian Holt: Now, go to Action Creators.

2
00:00:04.140 --> 00:00:10.971
The first thing that I wanna do
here is import ADD_API_DATA.

3
00:00:10.971 --> 00:00:15.052
I'm gonna export another function called

4
00:00:15.052 --> 00:00:20.920
addAPIdata,
&gt;&gt; Brian Holt: It's

5
00:00:20.920 --> 00:00:26.062
going to take an apiData,
which is going to be of type Show, right?

6
00:00:31.310 --> 00:00:36.188
&gt;&gt; Brian Holt: And then in here we
are going to return a well formed

7
00:00:36.188 --> 00:00:40.601
action object,
which is going to be of type,

8
00:00:40.601 --> 00:00:44.682
ADD_API_DATA and payload: apiData.

9
00:00:51.618 --> 00:00:54.871
&gt;&gt; Brian Holt: So in particular here,
we're actually not gonna be calling

10
00:00:54.871 --> 00:00:58.330
ADD_ API_DATA outside of this
particular function, right?

11
00:00:58.330 --> 00:01:01.680
We're actually gonna handle this
inside of action creators, but

12
00:01:01.680 --> 00:01:03.880
it's a good idea to export it anyway.

13
00:01:03.880 --> 00:01:09.070
Say, for example, you got API data,
maybe from local storage, right?

14
00:01:09.070 --> 00:01:13.820
For example,
you could use this add API data

15
00:01:13.820 --> 00:01:16.740
action to kind of load it from
different sources, right?

16
00:01:16.740 --> 00:01:19.910
This is going to be useful other places
other than just stuff coming back

17
00:01:19.910 --> 00:01:20.580
from the API.

18
00:01:21.860 --> 00:01:23.350
That's why it's good to do that.

19
00:01:23.350 --> 00:01:25.760
This is also good because
now this is testable, right?

20
00:01:25.760 --> 00:01:29.550
So now I can import it into my
test suite and test it, and

21
00:01:29.550 --> 00:01:32.550
it's a good idea to test action creators.

22
00:01:32.550 --> 00:01:34.140
In fact, we're going to do it.

23
00:01:34.140 --> 00:01:38.220
So, cool, okay.

24
00:01:38.220 --> 00:01:42.310
So now, Everything's all ready for
us to start adding action, or

25
00:01:42.310 --> 00:01:45.810
API datas into our readout store.

26
00:01:45.810 --> 00:01:48.570
Now we wanna tackle the problem of

27
00:01:48.570 --> 00:01:51.880
making that asynchronous
request inside of a thunk.

28
00:01:53.020 --> 00:01:57.443
So what we're gonna do now is we're
going to export another function

29
00:01:57.443 --> 00:01:59.054
called get API details.

30
00:02:02.897 --> 00:02:05.803
&gt;&gt; Brian Holt: Okay,
this is going to take in an imdbID,

31
00:02:05.803 --> 00:02:11.359
which is going to be a string,
&gt;&gt; Brian Holt: Okay?

32
00:02:11.359 --> 00:02:16.140
Now these action creators
always return objects, right?

33
00:02:16.140 --> 00:02:18.306
That's kind of the contract there.

34
00:02:18.306 --> 00:02:20.705
However, this is going to return a thunk,
right?

35
00:02:20.705 --> 00:02:22.529
And so what is a thunk?

36
00:02:22.529 --> 00:02:27.125
A thunk is a function.

37
00:02:27.125 --> 00:02:31.786
It kind of throws people off, but remember
that we are dispatching this function into

38
00:02:31.786 --> 00:02:34.583
the Redac store and
then redac is going to say cool.

39
00:02:34.583 --> 00:02:37.530
This is a deferred action so
something is going to come from this.

40
00:02:37.530 --> 00:02:41.390
I'm going to call this function and
wait for it to dispatch, okay?

41
00:02:41.390 --> 00:02:47.890
So that's why here you're
gonna say return function.

42
00:02:47.890 --> 00:02:53.671
So it's gonna be a function that
has dispatch injected into it,

43
00:02:53.671 --> 00:02:56.353
which is gonna be a function.

44
00:03:00.994 --> 00:03:03.335
&gt;&gt; Brian Holt: So that's why
we're returning a function here.

45
00:03:07.713 --> 00:03:12.618
&gt;&gt; Brian Holt: And then in here we're just
gonna do pretty much what we were doing

46
00:03:12.618 --> 00:03:14.140
inside of details.

47
00:03:14.140 --> 00:03:15.970
We're just gonna make
our axios request here.

48
00:03:15.970 --> 00:03:19.020
In fact you need to go
import axios at the top.

49
00:03:19.020 --> 00:03:21.655
Import axios from axios.

50
00:03:26.817 --> 00:03:31.300
&gt;&gt; Brian Holt: Okay, and
then we're gonna say axios.get.

51
00:03:31.300 --> 00:03:36.260
And this is gonna go

52
00:03:36.260 --> 00:03:42.370
to http://localhost:3000/,

53
00:03:42.370 --> 00:03:45.750
and we're just gonna put that
imdb id right there, okay.

54
00:03:45.750 --> 00:03:50.354
And then we're gonna say .then,

55
00:03:50.354 --> 00:03:54.331
thine, .then, response.

56
00:03:58.642 --> 00:04:04.480
&gt;&gt; Brian Holt: And the response is gonna
be something that the API gave back to us.

57
00:04:04.480 --> 00:04:08.760
All we're gonna do at this point is now
we're gonna use this dispatch function,

58
00:04:08.760 --> 00:04:12.510
which Redux gives you to
dispatch an action, right?

59
00:04:12.510 --> 00:04:16.090
So this where the thunk is resolving and
finally giving out an action.

60
00:04:16.090 --> 00:04:18.948
So it's gonna say

61
00:04:18.948 --> 00:04:26.767
dispatch(addAPIData(response.dat)).

62
00:04:30.804 --> 00:04:33.832
&gt;&gt; Brian Holt: Then, as always is the case
with an API, it's usually a good idea

63
00:04:33.832 --> 00:04:38.010
to have the catch statement at the end
just in case something goes wrong.

64
00:04:38.010 --> 00:04:42.900
It's gonna be an error, and here,
I just say console.error so

65
00:04:42.900 --> 00:04:44.428
that it doesn't get dropped on the floor.

66
00:04:44.428 --> 00:04:51.140
axios error, error.

67
00:04:51.140 --> 00:04:53.820
It's gonna warn here, it's gonna say,
hey I don't like console.log,

68
00:04:53.820 --> 00:04:58.070
it's going down to production, but for me,
this is useful to have as a developer.

69
00:04:58.070 --> 00:05:01.287
So I'm just gonna say, hey ESLint,
go ahead and shut up about it.

70
00:05:13.564 --> 00:05:16.781
&gt;&gt; Brian Holt: So we're just saying, hey,
disable the console warning just for

71
00:05:16.781 --> 00:05:17.938
this particular line.

72
00:05:24.933 --> 00:05:29.480
&gt;&gt; Brian Holt: So to recap again,
this is a thunk, this particular piece,

73
00:05:29.480 --> 00:05:33.420
this function, that gets returned here?

74
00:05:33.420 --> 00:05:35.310
That's the thunk right?

75
00:05:35.310 --> 00:05:38.900
The thunk function is going
to be invoked by redux right?

76
00:05:38.900 --> 00:05:42.400
The redux thunk thing that middle
ware that we put in there,

77
00:05:42.400 --> 00:05:46.330
it's going to inject this
dispatch function to say cool.

78
00:05:46.330 --> 00:05:47.650
Go do whatever you need to do and

79
00:05:47.650 --> 00:05:51.190
call me back whenever you have
the action that you want to do, right?

80
00:05:51.190 --> 00:05:55.340
So what we do is we go to our API via
axios and once it resolves it then says

81
00:05:55.340 --> 00:05:58.570
cool, now I have the action
data that I want to dispatch.

82
00:05:58.570 --> 00:06:02.350
So I call them dispatch,
with add API data which gives me back

83
00:06:02.350 --> 00:06:06.730
a real action object which
then gets passed into Redux.

84
00:06:08.210 --> 00:06:10.930
So this is how you do
asynchronous code with Redux.

85
00:06:12.760 --> 00:06:14.900
So I would say thunks are the easiest way.

86
00:06:14.900 --> 00:06:18.280
I don't wanna say easiest, maybe simplest,
there's just not a lot to it,

87
00:06:18.280 --> 00:06:20.320
it's just a call back, right?

88
00:06:20.320 --> 00:06:21.420
But there are other ways to do this.

89
00:06:21.420 --> 00:06:23.660
You can dispatch promises,
with Redux promises.

90
00:06:23.660 --> 00:06:25.690
Observables with Redux observables.

91
00:06:25.690 --> 00:06:29.140
And generators with Redux saga, and I
would say those are the most common ones.

92
00:06:30.340 --> 00:06:32.670
&gt;&gt; Speaker 2: There´s a bunch
of debating going on about-

93
00:06:32.670 --> 00:06:34.270
&gt;&gt; Brian Holt: Which one is the best-

94
00:06:34.270 --> 00:06:35.230
&gt;&gt; Speaker 2: Redux.

95
00:06:35.230 --> 00:06:40.510
The whole fact that you have tons
of actions and how the scales.

96
00:06:40.510 --> 00:06:44.860
Whether or
not someone like Facebook is using Redux

97
00:06:44.860 --> 00:06:47.940
across-
&gt;&gt; Brian Holt: I assert

98
00:06:47.940 --> 00:06:51.310
pretty unequivocally that this does scale,
right?

99
00:06:51.310 --> 00:06:53.470
So right now if you go
to our redux´s file,

100
00:06:53.470 --> 00:06:59.010
we have all of our reducers living in one
file, typically in a large application.

101
00:06:59.010 --> 00:07:02.690
You´re gonna separate reducers into
separate files, but when you´re using

102
00:07:02.690 --> 00:07:08.480
combined reducers, like this,
this one reducer owns API data, right?

103
00:07:08.480 --> 00:07:11.510
It owns that one particular
piece of the state tree, and

104
00:07:11.510 --> 00:07:15.130
it has no concept of search team for
example, right?

105
00:07:15.130 --> 00:07:19.160
So the fact that these are siloed from
each other is why this scales, right?

106
00:07:19.160 --> 00:07:21.280
If you were worrying about
every single object and

107
00:07:21.280 --> 00:07:23.370
every single reducer, that gets unruly.

108
00:07:23.370 --> 00:07:25.930
Especially when you start getting
50 things in your reduct store,

109
00:07:25.930 --> 00:07:27.445
but the fact that these are so

110
00:07:27.445 --> 00:07:31.010
siloed from each other, I can keep them
in separate parts of my application.

111
00:07:31.010 --> 00:07:34.960
And they can be tested individually,
that's why this scales, for sure.

112
00:07:34.960 --> 00:07:37.710
I confidently assert that this scales.

113
00:07:39.330 --> 00:07:43.880
&gt;&gt; Speaker 2: And then,
what about adding typings to, say,

114
00:07:43.880 --> 00:07:48.180
some of the things you're returning and
whatnot, to make the actions?

115
00:07:48.180 --> 00:07:49.360
&gt;&gt; Brian Holt: Like this stuff right here?

116
00:07:49.360 --> 00:07:54.293
[SOUND] This, the response in
the error typings are coming

117
00:07:54.293 --> 00:07:57.805
from the axios typings from flow typed.

118
00:07:57.805 --> 00:07:59.288
So that's why we don't have to type this.

119
00:07:59.288 --> 00:08:01.070
It knows that there's
a response to that data.

120
00:08:02.430 --> 00:08:05.594
You can do it explicitly if you needed
to but I don't think you need to.

121
00:08:10.273 --> 00:08:14.164
&gt;&gt; Brian Holt: Yeah, there's nothing that
you need to do with this in particular

122
00:08:14.164 --> 00:08:14.864
right now.

123
00:08:17.535 --> 00:08:22.354
&gt;&gt; Brian Holt: And addAPIData, we already
told APIData's gonna be a show, and

124
00:08:22.354 --> 00:08:23.500
that's fine.

125
00:08:24.730 --> 00:08:28.270
&gt;&gt; Speaker 2: Does something
like immutable.js help

126
00:08:28.270 --> 00:08:30.300
with the mutability of state?

127
00:08:30.300 --> 00:08:33.580
&gt;&gt; Brian Holt: For sure, immutable.js and

128
00:08:33.580 --> 00:08:37.060
there's also the other one that I
can't think of off the top of my head.

129
00:08:37.060 --> 00:08:40.180
There's a couple of libraries that
handle immutability with JavaScript.

130
00:08:40.180 --> 00:08:43.000
Immutability just makes things
a little bit safer, right?

131
00:08:43.000 --> 00:08:45.740
That you can't directly modify things,
and it also allows for

132
00:08:45.740 --> 00:08:49.550
really fast checking for things like,
is this the same object as thing?

133
00:08:49.550 --> 00:08:51.500
No, cool, they're not equal anymore.

134
00:08:51.500 --> 00:08:55.410
And there's no sort of deep nesting that
you need to check, that definitely helps.

135
00:08:55.410 --> 00:08:58.170
My problem with immutable.js and
why I don't use it and

136
00:08:58.170 --> 00:09:04.410
why I don't teach it is it's a pretty
large library, and yeah, so I don't.

137
00:09:05.930 --> 00:09:09.220
The value that it gives my
developer experience does not

138
00:09:09.220 --> 00:09:10.970
match how big the library is.

139
00:09:10.970 --> 00:09:14.920
The last that I checked, I think it
was like 50 kilobytes, which is for

140
00:09:14.920 --> 00:09:16.280
me kind of a non-starter.

141
00:09:16.280 --> 00:09:19.382
I think it's bigger than react,
which is a problem.

142
00:09:19.382 --> 00:09:22.520
[LAUGH] So it is cool,
there are reasons to use it.

143
00:09:22.520 --> 00:09:26.210
I've just not so far chosen to use it.

144
00:09:26.210 --> 00:09:31.930
To be honest with you, a lot of that same
similar type of benefits that a mutable

145
00:09:31.930 --> 00:09:36.020
is gonna gain you, you're gonna get from
having typings with your language, right?

146
00:09:36.020 --> 00:09:38.230
Cuz it's gonna catch
some similar problems,

147
00:09:38.230 --> 00:09:41.710
like hey you're modifying this and
probably should be modifying that.

148
00:09:41.710 --> 00:09:46.374
So, a type system can help catch
similar bugs, not totally the same.

149
00:09:46.374 --> 00:09:52.950
And immutable particular cases
we'll have some speed benefits,

150
00:09:52.950 --> 00:09:57.070
just by checking high level, shallow
checking is the same object as this.

151
00:09:59.210 --> 00:10:01.975
But so far I just haven't felt
the need to use, personally.

152
00:10:04.013 --> 00:10:07.709
&gt;&gt; Speaker 3: And a few people
are commenting that they use react

153
00:10:07.709 --> 00:10:12.440
set state for UI state, and
then redux for application state.

154
00:10:12.440 --> 00:10:14.461
&gt;&gt; Brian Holt: Yeah, totally,
we talked about that yesterday too.

155
00:10:17.664 --> 00:10:19.510
&gt;&gt; Brian Holt: But I agree,
that's a good thing to do.

