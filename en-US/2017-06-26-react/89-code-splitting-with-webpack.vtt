WEBVTT

1
00:00:00.000 --> 00:00:03.530
&gt;&gt; Brian Holt: So I just reverted all
my code back to using the death server.

2
00:00:03.530 --> 00:00:08.294
The one thing I wanted to go with capture
in my package.json is the ability to run

3
00:00:08.294 --> 00:00:09.158
that server.

4
00:00:09.158 --> 00:00:11.456
So I'm gonna call this start.

5
00:00:14.834 --> 00:00:19.413
&gt;&gt; Brian Holt: And then I'm gonna say,

6
00:00:19.413 --> 00:00:26.619
NODE_ENV=server node server.js.

7
00:00:26.619 --> 00:00:33.082
So now that if I say yarn start it'll
start my production server, right.

8
00:00:36.694 --> 00:00:40.097
&gt;&gt; Brian Holt: So
again I can just come in here and

9
00:00:40.097 --> 00:00:44.850
say, yarn start, and
it should be good to go.

10
00:00:49.576 --> 00:00:53.012
&gt;&gt; Brian Holt: So yeah, you just have
to make sure to not include hot module

11
00:00:53.012 --> 00:00:55.431
refresh, or it's gonna have a bad time.

12
00:00:57.929 --> 00:01:01.849
&gt;&gt; Brian Holt: So I'm gonna change
this back from watch to dev, so

13
00:01:01.849 --> 00:01:04.957
I can go back to the development server.

14
00:01:08.347 --> 00:01:12.804
&gt;&gt; Brian Holt: So we're gonna talk about
another thing here called code splitting,

15
00:01:12.804 --> 00:01:15.078
or chunking as it used to be called.

16
00:01:18.755 --> 00:01:23.501
&gt;&gt; Brian Holt: There's a kind
of a weird problem in particular

17
00:01:23.501 --> 00:01:26.824
doing server-side rendering,

18
00:01:26.824 --> 00:01:32.412
hot module replacement and
code splitting all at once.

19
00:01:32.412 --> 00:01:36.871
It's a pick two scenario that
the three cannot coexist all

20
00:01:36.871 --> 00:01:40.693
together given these state
of how webpack works.

21
00:01:40.693 --> 00:01:42.344
And the real problem is this,

22
00:01:42.344 --> 00:01:45.922
we're gonna configure our routes
to be asynchronous, right.

23
00:01:45.922 --> 00:01:48.512
So that when I go from landing to search,

24
00:01:48.512 --> 00:01:52.332
it's actually going to pull
in the JavaScript for search.

25
00:01:52.332 --> 00:01:56.096
And then when I go from search to details,
it will pull on the JavaScript just for

26
00:01:56.096 --> 00:01:56.611
details.

27
00:01:56.611 --> 00:02:00.882
The reason why it's nice is that means
when I load landing for the first time,

28
00:02:00.882 --> 00:02:03.642
it's only going to load the code for
landing, and

29
00:02:03.642 --> 00:02:06.025
it's not gonna load anything for search.

30
00:02:06.025 --> 00:02:11.167
And it's not gonna load up anything for
details, right.

31
00:02:11.167 --> 00:02:13.855
In other words we get to cut
down on our bundle size, and

32
00:02:13.855 --> 00:02:17.779
we get to load only the JavaScript that's
necessary for that particular page.

33
00:02:17.779 --> 00:02:21.239
Which is gonna be again another
performance win for us.

34
00:02:21.239 --> 00:02:23.611
This is again something that
you're wanna to do in production.

35
00:02:23.611 --> 00:02:27.218
Maybe not in development because there's
no real reason that you need to be doing

36
00:02:27.218 --> 00:02:28.235
that in development.

