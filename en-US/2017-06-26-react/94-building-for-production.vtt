WEBVTT

1
00:00:00.000 --> 00:00:02.660
&gt;&gt; Brian Holt: I'm going to show you
how to build for production now.

2
00:00:02.660 --> 00:00:07.118
Cuz everything we've done so far, most
of it's been about developer experience,

3
00:00:07.118 --> 00:00:11.540
and I want to actually show you how to get
down and actually serve it for production.

4
00:00:11.540 --> 00:00:15.618
So the first thing is we're going to do is
we're going to go into our webpack config.

5
00:00:15.618 --> 00:00:20.256
So as you can see right now,
our bundle is like five goddamn megabytes,

6
00:00:20.256 --> 00:00:22.901
which is purely unacceptable, right?

7
00:00:22.901 --> 00:00:24.604
It's to the point of ridiculousness.

8
00:00:24.604 --> 00:00:27.303
But it's development,
so it doesn't matter.

9
00:00:27.303 --> 00:00:29.241
Cuz I'm just pulling from local hosts.

10
00:00:29.241 --> 00:00:31.610
I'm literally just pulling for myself, so.

11
00:00:33.973 --> 00:00:39.248
&gt;&gt; Brian Holt: Let's go ahead and
make this a little bit nicer to deal with.

12
00:00:39.248 --> 00:00:44.978
So what I'm gonna do here is I'm
gonna say const config= this and

13
00:00:44.978 --> 00:00:52.593
then module.exports = config; and then
I'm gonna do some manipulation down here.

14
00:00:52.593 --> 00:00:56.553
So what I'm gonna do is
I'll leave this just for

15
00:00:56.553 --> 00:01:00.513
development as is, and
then if production, so

16
00:01:00.513 --> 00:01:06.553
I'm gonna say if (process.env.NODE_ENV
=== 'production')

17
00:01:06.553 --> 00:01:13.199
then we're gonna make some differences
to how we're gonna build for webpack.

18
00:01:13.199 --> 00:01:17.242
The first thing that we're gonna
do is we're going to get rid of,

19
00:01:17.242 --> 00:01:19.606
our entry is going to be this, right?

20
00:01:21.439 --> 00:01:25.167
&gt;&gt; Brian Holt: Then you're gonna say,

21
00:01:25.167 --> 00:01:31.694
config.entry = blah,
&gt;&gt; Brian Holt: Cuz

22
00:01:31.694 --> 00:01:35.425
we don't want all the hot module reload
stuff, we can just leave all that out.

23
00:01:35.425 --> 00:01:40.637
We're gonna say devtool = false,

24
00:01:40.637 --> 00:01:44.813
config.devtool = false.

25
00:01:44.813 --> 00:01:49.584
That's just gonna say, get me no
source maps which is what you want.

26
00:01:52.905 --> 00:01:56.355
&gt;&gt; Brian Holt: DevServer doesn't really
matter because we're not gonna be running

27
00:01:56.355 --> 00:01:59.172
the devServer in production so
you can I need that there.

28
00:01:59.172 --> 00:02:04.750
Resolve is fine, stats is fine,
plug in is just gonna be an empty array.

29
00:02:04.750 --> 00:02:10.064
I don't think that's actually necessary
but it's good just to be explicit.

30
00:02:10.064 --> 00:02:14.142
The reason why I don't think this is
necessary is because webpack is smart

31
00:02:14.142 --> 00:02:18.243
enough to say, hey, we don't need
a HotModule reload in production.

32
00:02:18.243 --> 00:02:23.171
I'm just not gonna these but that's fine,
and then you can meet the rules,

33
00:02:23.171 --> 00:02:24.641
that's fine as well.

34
00:02:24.641 --> 00:02:29.649
Let's go to our server real quick.

35
00:02:29.649 --> 00:02:31.796
And we're gonna bring in another module.

36
00:02:31.796 --> 00:02:39.397
We're gonna say const compression
= require compression.

37
00:02:39.397 --> 00:02:43.284
Typically you're not going to
do gzip on your note server.

38
00:02:43.284 --> 00:02:48.099
You'll be doing it further out,
something at the Nginx level or

39
00:02:48.099 --> 00:02:53.825
the Apache level or whatever you're
using for your reverse proxy, right?

40
00:02:53.825 --> 00:02:57.917
We're not going to be using one today so
I wanted to show you what the gzip bodies

41
00:02:57.917 --> 00:03:01.284
looked like, so we're going to
do it here at the express level.

42
00:03:01.284 --> 00:03:05.309
Just so you can see what that looks like.

43
00:03:05.309 --> 00:03:08.798
So we gonna say a server.use compression,

44
00:03:08.798 --> 00:03:14.466
this is gonna do all of our gzipping and
that being that fun stuff for us.

45
00:03:14.466 --> 00:03:19.773
Okay, now what I want you to do is that
I want you to come, you can stop your

46
00:03:19.773 --> 00:03:25.167
server Now I want you to say, yarn
build and then we're gonna do -- -p so

47
00:03:25.167 --> 00:03:30.151
that -p is letting web pack know
I'm building for production now.

48
00:03:30.151 --> 00:03:33.603
So give it everything you can to
make this as small as possible.

49
00:03:46.165 --> 00:03:51.278
&gt;&gt; Brian Holt: It's gonna take a second,
&gt;&gt; Brian Holt: So

50
00:03:51.278 --> 00:03:54.754
That's still really big.

51
00:03:54.754 --> 00:03:57.350
Why is that so big?

52
00:03:57.350 --> 00:04:01.728
It should be a lot smaller.

53
00:04:01.728 --> 00:04:09.043
Sourcemaps is usually the thing
that's super unruly about this.

54
00:04:09.043 --> 00:04:10.735
Yeah.

55
00:04:16.874 --> 00:04:21.545
&gt;&gt; Brian Holt: Well that is
definitely Hot Module reload stuff.

56
00:04:33.811 --> 00:04:35.516
&gt;&gt; Brian Holt: Let's figure this out.

57
00:04:35.516 --> 00:04:39.325
So obviously it's not running
with the production note and

58
00:04:39.325 --> 00:04:42.382
stuff cuz we're not
picking up those changes.

59
00:04:42.382 --> 00:04:44.476
So open Webpack again

60
00:04:53.071 --> 00:04:59.677
&gt;&gt; Brian Holt: What is going on here?

61
00:04:59.677 --> 00:05:04.528
Okay, console.log, process sub

62
00:05:04.528 --> 00:05:13.429
env
&gt;&gt; Brian Holt: And

63
00:05:13.429 --> 00:05:15.279
let's just start that and

64
00:05:15.279 --> 00:05:20.756
see what happens,
&gt;&gt; Brian Holt: What

65
00:05:20.756 --> 00:05:24.592
i'm interested in is the NODE ENV.

66
00:05:24.592 --> 00:05:26.875
There's a lot of stuff in my process.env.

67
00:05:26.875 --> 00:05:31.990
Let's do that, process dot NODE_ENV.

68
00:05:36.574 --> 00:05:38.946
&gt;&gt; Brian Holt: Undefined,
okay, that's a problem.

69
00:05:38.946 --> 00:05:44.212
So let's go ahead and go back and

70
00:05:44.212 --> 00:05:52.414
say NODE_ENV=production yarn build -- -p.

71
00:05:52.414 --> 00:05:53.641
Let's try that.

72
00:05:53.641 --> 00:05:55.013
Now we see production.

73
00:05:55.013 --> 00:05:57.522
So now hopefully we'll get
much smaller bundle sizes.

74
00:06:07.554 --> 00:06:09.510
&gt;&gt; Brian Holt: This should take a second.

75
00:06:09.510 --> 00:06:14.282
Got a bunch of stuff here,
we're seeing no Hot Module reload stuff.

76
00:06:14.282 --> 00:06:17.708
So 266 better, right?

77
00:06:17.708 --> 00:06:20.933
36 here, 37, and 38 here.

78
00:06:20.933 --> 00:06:23.351
But keep in mind here
that this is minified.

79
00:06:23.351 --> 00:06:27.135
This is uglified,
this is not gzipped yet, right?

80
00:06:27.135 --> 00:06:30.540
So we actually need to go to our browser
to figure out what this is gonna

81
00:06:30.540 --> 00:06:31.844
look when it's gzipped.

82
00:06:31.844 --> 00:06:36.757
So if I refresh again,
I need my server running so

83
00:06:36.757 --> 00:06:44.830
I'm gonna say yarn start
&gt;&gt; Brian Holt: And I refresh again.

84
00:06:47.320 --> 00:06:48.469
&gt;&gt; Brian Holt: Why did that get bigger?

85
00:06:48.469 --> 00:06:49.627
That's bizarre.

86
00:06:52.890 --> 00:06:56.469
&gt;&gt; Brian Holt: No, that's right,
cuz it was 220 gzipped, or

87
00:06:56.469 --> 00:07:00.647
sorry, it was 220 minified and
now it's 76 gzipped.

88
00:07:00.647 --> 00:07:05.696
So we got down to 76 kilobytes,
and then 11 for the first bundle.

89
00:07:05.696 --> 00:07:10.028
Browse here 12 for that one,
and 12 for that one.

90
00:07:10.028 --> 00:07:12.166
Much better, right?

91
00:07:12.166 --> 00:07:17.182
So the thing to keep in mind with React is

92
00:07:17.182 --> 00:07:22.815
it's about 45 kbs gzipped and mimefied.

93
00:07:22.815 --> 00:07:24.766
And that's the production build, right?

94
00:07:24.766 --> 00:07:29.478
They give you a separate build for debug
that has more useful error messaging and

95
00:07:29.478 --> 00:07:30.612
things like that.

96
00:07:30.612 --> 00:07:34.717
So, out of the door we already lost 45.

97
00:07:34.717 --> 00:07:39.840
So our entire app that we
built took about 35 kilobytes.

98
00:07:39.840 --> 00:07:44.400
With everything else that includes Redux,
reduxthunk,

99
00:07:44.400 --> 00:07:48.681
all those things.They're
pretty small libraries,

100
00:07:48.681 --> 00:07:51.843
really the only heavy lifter is react and

101
00:07:51.843 --> 00:07:55.952
probably the second one is
going to be axios I think.

102
00:07:55.952 --> 00:08:00.062
The one kind of crappy
thing about moving to redux

103
00:08:00.062 --> 00:08:04.083
is previously only details
cared about Axios.

104
00:08:04.083 --> 00:08:07.118
And actually we could probably
be clever about this.

105
00:08:09.964 --> 00:08:11.340
&gt;&gt; Brian Holt: Yeah.

106
00:08:11.340 --> 00:08:14.159
Yeah, we got a little bit of time.

107
00:08:14.159 --> 00:08:14.952
Let's try it.

108
00:08:14.952 --> 00:08:20.516
Okay, so what I'm gonna do here is
I'm gonna create a new file and

109
00:08:20.516 --> 00:08:23.260
say this is like when go into JS.

110
00:08:23.260 --> 00:08:30.451
And we're going to say this
is a sync actions.js and

111
00:08:30.451 --> 00:08:36.997
I'm going to go in and
go to my action creators.

112
00:08:36.997 --> 00:08:44.104
And I'm going to pull out,
get API details.

113
00:08:44.104 --> 00:08:48.332
And I'm gonna move this into its own file,
cuz right now,

114
00:08:48.332 --> 00:08:51.363
web pack can't separate files, right?

115
00:08:51.363 --> 00:08:55.891
It can't separate files from each other
and this is getting the setSearchTerm and

116
00:08:55.891 --> 00:08:58.726
addAPIData are needed in
other places in the site.

117
00:08:58.726 --> 00:09:03.551
But this is only needed for details.

118
00:09:03.551 --> 00:09:05.844
If you go to async actions I just created.

119
00:09:05.844 --> 00:09:07.171
I'm going to paste that.

120
00:09:07.171 --> 00:09:13.332
Then I'm also going to
import axios from axios.

121
00:09:13.332 --> 00:09:18.351
I'm going to add api data

122
00:09:18.351 --> 00:09:24.095
from ./action creators.

123
00:09:26.845 --> 00:09:30.220
&gt;&gt; Brian Holt: I'm gonna go
back to actionCreators, and

124
00:09:30.220 --> 00:09:33.417
I'm going to remove axios here, okay?

125
00:09:33.417 --> 00:09:35.170
So now these are in separate files.

126
00:09:35.170 --> 00:09:38.564
So now I can only include this file in
details which just means I'm going to

127
00:09:38.564 --> 00:09:40.535
inflate the size of my details bundle, but

128
00:09:40.535 --> 00:09:42.811
I'm going to deflate
the size of my main bundle.

129
00:09:42.811 --> 00:09:45.511
A big goal here is you want
to deflate your main bundle,

130
00:09:45.511 --> 00:09:48.107
cause that one is going to
get loaded on every route.

131
00:09:48.107 --> 00:09:50.904
On landing and on search,

132
00:09:50.904 --> 00:09:55.872
we want that bundle to
be as small as possible.

133
00:09:55.872 --> 00:10:00.448
Now we need to go into details.jsx and

134
00:10:00.448 --> 00:10:06.740
we're going to get API
details from a sync actions.

135
00:10:06.740 --> 00:10:09.917
We also broke our test, but
no one cares about tests.

136
00:10:09.917 --> 00:10:13.413
That's what I call async actions.

137
00:10:13.413 --> 00:10:19.695
So, let's clean this out, and
we're gonna run our build again.

138
00:10:19.695 --> 00:10:23.697
And hopefully what we should see is
the size of the details bundle go up and

139
00:10:23.697 --> 00:10:25.015
the other ones go down.

140
00:10:32.523 --> 00:10:36.681
&gt;&gt; Brian Holt: Fingers crossed,
otherwise this is gonna be really dumb.

141
00:10:36.681 --> 00:10:41.199
Okay, I broke stuff,
whatever, that's fine.

142
00:10:41.199 --> 00:10:44.113
Yeah, I should have Flow.

143
00:10:44.113 --> 00:10:48.870
But,
&gt;&gt; Brian Holt: What you can see here now

144
00:10:48.870 --> 00:10:52.977
is we have the size of
this bundle right here,

145
00:10:52.977 --> 00:10:57.358
a little bit higher, and
now these ones are tiny, tiny,

146
00:10:57.358 --> 00:11:02.664
tiny bundles right
&gt;&gt; Brian Holt: So

147
00:11:02.664 --> 00:11:04.904
now if we can do Yarn start again,

148
00:11:04.904 --> 00:11:10.035
let's see what these actually translate
to when we start building our app.

149
00:11:10.035 --> 00:11:11.958
So if I refresh here and

150
00:11:11.958 --> 00:11:18.507
look at my network,
&gt;&gt; Brian Holt: These are bytes.

151
00:11:18.507 --> 00:11:19.971
No actually that's reading from cache.

152
00:11:19.971 --> 00:11:21.951
But this is 1.7 kilobytes now, right.

153
00:11:21.951 --> 00:11:23.383
Before it was 11.

154
00:11:23.383 --> 00:11:27.928
Now if you go into details,
it's 12 still, it's a little bit bigger.

155
00:11:27.928 --> 00:11:30.210
So I'm not making a ton
of difference here,

156
00:11:30.210 --> 00:11:33.182
the difference between 1 kilobyte and
12 is not huge.

157
00:11:33.182 --> 00:11:37.287
But what I'm trying to demonstrate to you
the principal of is if I can make that

158
00:11:37.287 --> 00:11:41.096
dependency graph lean into particular
routes that only need it there.

159
00:11:41.096 --> 00:11:45.579
So now axios is only included on details,
right?

160
00:11:45.579 --> 00:11:48.111
And if I load landing.

161
00:11:48.111 --> 00:11:53.305
So if it only load landing,
I'm not getting axils which is super cool.

162
00:11:53.305 --> 00:11:55.974
So I'm trying to demonstrate
to you just like,

163
00:11:55.974 --> 00:11:59.655
mental model of thinking of how
to manage your dependency graph.

164
00:11:59.655 --> 00:12:05.046
Let's go ahead and
put this in package.json of how to build.

165
00:12:05.046 --> 00:12:09.678
So we have build, and I'm going to put
those to be -p whenever I call build, and

166
00:12:09.678 --> 00:12:13.274
then I'm going to say build:dev,
if you ever wanna build for

167
00:12:13.274 --> 00:12:16.524
dev and not necessarily do watch or
anything like that,

168
00:12:16.524 --> 00:12:18.896
it's always good to have that ability.

169
00:12:18.896 --> 00:12:23.424
We're going to have webpack dash d,
which is how you build for dev.

170
00:12:23.424 --> 00:12:29.068
And just to make this
explicit I'm gonna say,

171
00:12:29.068 --> 00:12:36.026
NODE_ENV=production and
NODE_ENV=development.

172
00:12:44.799 --> 00:12:47.381
&gt;&gt; Brian Holt: Okay, so
let's push a branch real quick.

173
00:12:51.594 --> 00:12:55.259
&gt;&gt; Brian Holt: Before I push a branch,
let's actually go ahead and

174
00:12:55.259 --> 00:12:59.359
fix our Lint error since I'm
not gonna modify this again.

175
00:12:59.359 --> 00:13:03.090
So I'm gonna export default actually here.

176
00:13:03.090 --> 00:13:05.528
That's gonna make this stop doing that.

177
00:13:05.528 --> 00:13:07.924
Why are you upset?

178
00:13:07.924 --> 00:13:12.936
And we need this to be a flow file.

179
00:13:12.936 --> 00:13:22.102
Okay, then we're going to go modify
&gt;&gt; Brian Holt: Details.

180
00:13:22.102 --> 00:13:27.000
So this is just gonna be getAPIDetails
cuz now it's the default export

181
00:13:27.000 --> 00:13:30.664
from asyncActions': and
we also broke out tests.

182
00:13:30.664 --> 00:13:36.748
So let's go fix the test real quick,
which is gonna be action creators,

183
00:13:36.748 --> 00:13:41.251
action Isn't that actionCreators.spec,
right?

184
00:13:41.251 --> 00:13:44.919
Up here we're gonna get
this from asyncAction.

185
00:13:44.919 --> 00:13:49.029
So import law from

186
00:13:49.029 --> 00:13:54.509
../asyncActions.

187
00:13:54.509 --> 00:13:56.512
And now everything should be fixed.

188
00:14:00.445 --> 00:14:02.128
&gt;&gt; Brian Holt: Actions.

189
00:14:04.204 --> 00:14:11.723
&gt;&gt; Brian Holt: Okay so,
let me push a branch, this will be 30.

