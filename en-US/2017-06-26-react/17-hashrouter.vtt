WEBVTT

1
00:00:00.540 --> 00:00:03.095
&gt;&gt; Brian Holt: So okay.
So now let's talk about HashRouter.

2
00:00:03.095 --> 00:00:07.620
HashRouter is what we're gonna call a
higher order component in that it doesn't

3
00:00:07.620 --> 00:00:10.291
actually render anything itself out,
right?

4
00:00:10.291 --> 00:00:14.390
You don't expect your router to
render markup itself, right?

5
00:00:14.390 --> 00:00:19.069
What it does is it does routing and
then you tell what markup to render.

6
00:00:19.069 --> 00:00:23.985
So it's higher order in the sense
that it introduces behavior, right?

7
00:00:23.985 --> 00:00:25.571
It's taking care of routing for you, but

8
00:00:25.571 --> 00:00:27.801
it's not actually rendering
any sort of markup out of it.

9
00:00:27.801 --> 00:00:29.634
That's what we call
a higher order component.

10
00:00:29.634 --> 00:00:33.097
Now we're gonna use this one and
we're gonna use more of them but

11
00:00:33.097 --> 00:00:36.254
there's nothing to stop us
ourselves from writing them.

12
00:00:36.254 --> 00:00:38.494
In fact, later on we'll actually
be writing a couple higher order

13
00:00:38.494 --> 00:00:39.339
components ourselves.

14
00:00:39.339 --> 00:00:42.292
So this is actually a kind
of an advanced use case for

15
00:00:42.292 --> 00:00:46.644
React,
&gt;&gt; Brian Holt: But

16
00:00:46.644 --> 00:00:47.944
I think it's one worth knowing.

17
00:00:47.944 --> 00:00:50.033
It's one of the more powerful
parts about using React.

18
00:00:50.033 --> 00:00:51.682
Any questions about high order components?

19
00:00:54.922 --> 00:00:56.364
&gt;&gt; Brian Holt: So
they encapsulate behavior but

20
00:00:56.364 --> 00:00:58.587
they do not necessarily
encapsulate silo markup.

21
00:01:02.209 --> 00:01:06.785
&gt;&gt; Brian Holt: So right now we have a
really lame router system because we only

22
00:01:06.785 --> 00:01:12.065
have one route, but let's go ahead and
make sure that it works anyway.

23
00:01:12.065 --> 00:01:18.234
So make sure you're,
&gt;&gt; Brian Holt: Did I put dev in there?

24
00:01:18.234 --> 00:01:18.815
I did not.

25
00:01:18.815 --> 00:01:24.749
So let's go ahead and
go back to our package.json.

26
00:01:24.749 --> 00:01:29.467
We're gonna put another thing in here, and

27
00:01:29.467 --> 00:01:32.400
it's just going to be dev,

28
00:01:32.400 --> 00:01:37.256
which is going to be webpack-dev-server,

29
00:01:43.310 --> 00:01:44.347
&gt;&gt; Brian Holt: Just that line right there,

30
00:01:44.347 --> 00:01:47.115
we don't have to pass it anything because
it's already gonna read that from

31
00:01:47.115 --> 00:01:47.908
the webpack config.

32
00:01:54.282 --> 00:02:01.543
&gt;&gt; Brian Holt: Okay, and now if we go run
yarn dev, it'll run our server for us.

33
00:02:01.543 --> 00:02:04.376
&gt;&gt; Speaker 2: So
that's equivalent to npm start, right?

34
00:02:07.255 --> 00:02:09.101
&gt;&gt; Brian Holt: I mean, yeah, sort of.

35
00:02:09.101 --> 00:02:11.840
So npm start would typically be just,

36
00:02:11.840 --> 00:02:17.157
the answer to your question is it can
be whatever you want it to be, right?

37
00:02:17.157 --> 00:02:22.403
npm start, to me, semantically means
how you'd start your production server,

38
00:02:22.403 --> 00:02:26.814
whereas npm run dev is how I'd run
my own developer environment, but

39
00:02:26.814 --> 00:02:29.191
I guess that's just a choice I made.

40
00:02:29.191 --> 00:02:32.291
I don't even know if that's
necessarily best practices, but.

41
00:02:32.291 --> 00:02:35.322
Did I sufficiently vaguely
answer your question?

42
00:02:35.322 --> 00:02:36.276
Okay, cool.

43
00:02:41.290 --> 00:02:45.844
&gt;&gt; Brian Holt: Okay, so I want you to
take note of one thing really quick.

44
00:02:45.844 --> 00:02:50.290
Notice this weird hash is
suddenly showing up in our URL.

45
00:02:50.290 --> 00:02:52.788
How many of you have seen that before,
right?

46
00:02:52.788 --> 00:02:57.130
Really common way of being lazy about
doing single page applications.

47
00:02:57.130 --> 00:03:00.740
The reason why is that your server
doesn't have to care about any of

48
00:03:00.740 --> 00:03:01.904
the routes, right?

49
00:03:01.904 --> 00:03:06.499
Basically what you say on your server
is go to this page if you see any

50
00:03:06.499 --> 00:03:09.207
URL that looks remotely like this, and

51
00:03:09.207 --> 00:03:14.076
then the client side code is gonna
take care of all the routing for you.

52
00:03:14.076 --> 00:03:16.376
So it's super lazy and don't do it, right?

53
00:03:16.376 --> 00:03:19.928
[LAUGH] Like take the time to actually
go and set up your server correctly.

54
00:03:19.928 --> 00:03:26.395
But what is actually
doing that is HashRouter.

55
00:03:26.395 --> 00:03:30.169
So if we're gonna migrate momentarily
here to BrowserRouter, but

56
00:03:30.169 --> 00:03:33.691
I'm gonna show you,
we're gonna build one more route first.

57
00:03:37.908 --> 00:03:41.671
&gt;&gt; Brian Holt: So make a new file,
call it search.jsx, and

58
00:03:41.671 --> 00:03:46.731
we're just gonna make the most
bare bones things possible.

59
00:03:46.731 --> 00:03:49.204
So import React from 'react.

60
00:03:54.869 --> 00:03:59.732
&gt;&gt; Brian Holt: So in Search,
&gt;&gt; Brian Holt: What I

61
00:03:59.732 --> 00:04:03.289
want you to do really quick is just make
like the most bare bones thing possible.

62
00:04:16.095 --> 00:04:23.039
&gt;&gt; Brian Holt: I'm highly paid for
my abilities to create fine UIs.

63
00:04:23.039 --> 00:04:24.873
Export default Search.

64
00:04:30.945 --> 00:04:32.895
&gt;&gt; Brian Holt: Okay,
so just something dumb,

65
00:04:32.895 --> 00:04:36.668
cuz we just wanna test real quick
that we can route correctly.

66
00:04:39.862 --> 00:04:42.265
&gt;&gt; Brian Holt: And
go back to client app,jsx.

67
00:04:46.201 --> 00:04:53.392
&gt;&gt; Brian Holt: And
import Search from './Search.

68
00:04:53.392 --> 00:04:57.962
And we're gonna create another Route,
&gt;&gt; Brian Holt: And

69
00:04:57.962 --> 00:05:01.227
this is not going to be exact,
doesn't need to be.

70
00:05:01.227 --> 00:05:04.670
/search, so anytime they go to /search,

71
00:05:04.670 --> 00:05:09.702
the component is going to be,
as you may have guessed, Search.

72
00:05:23.460 --> 00:05:27.721
&gt;&gt; Brian Holt: Okay, so
now we have two routes.

73
00:05:27.721 --> 00:05:31.289
Now if you refresh so landing still works,

74
00:05:31.289 --> 00:05:37.245
now I'm just gonna URL hack up here and
type in Search at the end of that.

75
00:05:37.245 --> 00:05:44.054
Of you refresh, sorry, hit Enter on that,
you should see your second route.

76
00:05:44.054 --> 00:05:46.153
And now we can go back and forth.

77
00:05:46.153 --> 00:05:47.861
&gt;&gt; Speaker 3: Can you go back to Search?

78
00:05:47.861 --> 00:05:52.844
&gt;&gt; Brian Holt: Now it's just
as bare bone as possible.

79
00:05:52.844 --> 00:05:56.547
So this is using a library
called History underneath it.

80
00:05:56.547 --> 00:06:01.158
What's really nice about History is
it's directly interacting with the dom's

81
00:06:01.158 --> 00:06:01.979
history API.

82
00:06:01.979 --> 00:06:07.114
Which means if you're just building with
React router you get all, like the back

83
00:06:07.114 --> 00:06:12.115
button, forward button, opening links
with Cmd+click and all that stuff.

84
00:06:12.115 --> 00:06:14.811
That all just works for
free, which is really good.

85
00:06:14.811 --> 00:06:18.995
So again, if I hit Forward on
here you can see I get forward,

86
00:06:18.995 --> 00:06:22.949
backwards, all that stuff
just works automatically.

87
00:06:26.967 --> 00:06:28.801
&gt;&gt; Speaker 3: I'm getting
the router's not defined.

88
00:06:31.728 --> 00:06:32.516
&gt;&gt; Brian Holt: In client app?

89
00:06:39.170 --> 00:06:41.040
&gt;&gt; Brian Holt: I would
imagine that's problematic.

90
00:06:43.850 --> 00:06:47.166
&gt;&gt; Brian Holt: In landing, it'd be
better if we didn't necessarily have

91
00:06:47.166 --> 00:06:51.028
the Browse All button, actually
took us to the Search page, right?

92
00:06:51.028 --> 00:06:54.127
So luckily, if we go to

93
00:06:54.127 --> 00:07:00.182
landing,
&gt;&gt; Brian Holt: What we can

94
00:07:00.182 --> 00:07:07.759
do here is we can import a link
component from 'react-router-dom.

95
00:07:07.759 --> 00:07:15.266
And we can just replace this Browse All,
&gt;&gt; Brian Holt: Replace

96
00:07:15.266 --> 00:07:20.217
that Link with a link and
that goes to /search.

97
00:07:28.263 --> 00:07:31.789
&gt;&gt; Brian Holt: And what Link is going
to do, is all it's gonna do it's gonna

98
00:07:31.789 --> 00:07:35.403
generate an anchor tag,
an A tag with the correct URL to go to.

99
00:07:39.781 --> 00:07:42.253
&gt;&gt; Brian Holt: So if we Refresh,
notice that the UI hasn't changed,

100
00:07:42.253 --> 00:07:45.585
it looks exactly like it did because it
just went from being an anchor tag to

101
00:07:45.585 --> 00:07:46.584
being an anchor tag.

102
00:07:46.584 --> 00:07:51.239
However, if I click on it,
it will take me to Search.

103
00:07:57.835 --> 00:08:01.289
&gt;&gt; Brian Holt: And again, because it's
an anchor tag I can Cmd+Click, and

104
00:08:01.289 --> 00:08:04.289
notice that it opened a new tab and
it works just fine.

105
00:08:04.289 --> 00:08:09.522
So as long as you don't mess up
the browser, don't use event click

106
00:08:09.522 --> 00:08:15.330
listeners that do window.location to
forward you on to somewhere else.

107
00:08:15.330 --> 00:08:18.538
As long as you don't do any of that
shenanigans you just get all the browser

108
00:08:18.538 --> 00:08:19.951
functionality built for free.

109
00:08:19.951 --> 00:08:23.272
And your site's a ton more accessible,
so all good things.

