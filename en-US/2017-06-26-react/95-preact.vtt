WEBVTT

1
00:00:00.270 --> 00:00:02.850
&gt;&gt; Brian Holt: One more thing,
76 kilobytes for

2
00:00:02.850 --> 00:00:06.730
a pretty simple app like this
still kind of sucks, right?

3
00:00:06.730 --> 00:00:08.910
We didn't build a giant, sprawling app and

4
00:00:08.910 --> 00:00:13.020
it's kind of unfortunate that we still
are loading upwards of 70 kilobytes.

5
00:00:13.020 --> 00:00:15.394
So how can we push on
this a little bit harder?

6
00:00:17.670 --> 00:00:19.770
Well, really it's library
code at this point.

7
00:00:19.770 --> 00:00:22.330
We're doing the best we
can with what we have.

8
00:00:22.330 --> 00:00:26.505
So, wouldn't it be smaller if instead of
being 45 kilobytes if React was only 3

9
00:00:26.505 --> 00:00:27.176
kilobytes.

10
00:00:29.788 --> 00:00:34.079
&gt;&gt; Brian Holt: 3, yeah, that would be
really nice, righ So, what you can do is

11
00:00:34.079 --> 00:00:38.780
instead of importing react,
you can import something called preact.

12
00:00:39.900 --> 00:00:44.613
So Preact is a React compatible library
that does everything that React

13
00:00:44.613 --> 00:00:49.244
does in the sense that it uses the same
API to achieve the same results,

14
00:00:49.244 --> 00:00:52.720
except it does it with 3
kilobytes instead of 45.

15
00:00:54.055 --> 00:00:57.190
&gt;&gt; Brian Holt: Now you might ask yourself,
that doesn't really seem to make sense.

16
00:00:58.450 --> 00:01:02.810
One, the guy that writes it, Jason Miller
is actually a wizard, so I'm told.

17
00:01:02.810 --> 00:01:07.830
And secondly, it actually tends to
be a little bit faster, because he's

18
00:01:07.830 --> 00:01:13.600
not doing the kind of debugging
checks that React is doing for you.

19
00:01:13.600 --> 00:01:15.550
Some of that stuff is not present.

20
00:01:15.550 --> 00:01:17.180
It doesn't have a synthetic event system.

21
00:01:17.180 --> 00:01:20.190
It just uses the dom event system,
which most of the time is usually enough.

22
00:01:21.420 --> 00:01:26.256
So there's trade offs to be made here of
whether or not you wanna include Preact.

23
00:01:26.256 --> 00:01:28.592
It's really cool,
it's something you should consider.

24
00:01:28.592 --> 00:01:32.410
It's something you should try, but
I'm not saying that it's a must.

25
00:01:32.410 --> 00:01:34.270
But let's go see how it works.

26
00:01:34.270 --> 00:01:37.730
We're going to not change any of
our code and it's just gonna work,

27
00:01:37.730 --> 00:01:39.100
it's just magical.

28
00:01:40.150 --> 00:01:45.826
Okay, so inside of Resolve
&gt;&gt; Brian Holt: We're

29
00:01:45.826 --> 00:01:47.940
gonna do something here called alias.

30
00:01:49.780 --> 00:01:54.960
And what we're gonna do is we're going to,
any time that we call for react,

31
00:01:54.960 --> 00:01:59.320
we're gonna call for
a library called preact-compat.

32
00:01:59.320 --> 00:02:02.440
Same thing with react-dom.

33
00:02:02.440 --> 00:02:06.810
Any time that it calls for react-dom,
we're gonna give it preact-compat.

34
00:02:09.435 --> 00:02:13.120
&gt;&gt; Brian Holt: What this is doing is that,
anywhere I say import react from React,

35
00:02:13.120 --> 00:02:15.850
it's actually secretly
going to give it preact.

36
00:02:17.220 --> 00:02:20.930
And preact-compat has a couple
more things built into it

37
00:02:20.930 --> 00:02:23.370
to make it totally React-compatible.

38
00:02:23.370 --> 00:02:26.966
So, this is actually gonna be about
8 kilobytes cuz it has 5 kilobytes of

39
00:02:26.966 --> 00:02:29.230
compatibility stuff that we're gonna need.

40
00:02:31.280 --> 00:02:33.620
We might be able to do it without compat,
we'll try it here in just a second.

41
00:02:33.620 --> 00:02:36.370
But let's try it with compat for
just a moment.

42
00:02:36.370 --> 00:02:39.020
And same thing with react-dom.

43
00:02:39.020 --> 00:02:40.716
Every time that we ask for react dom,

44
00:02:40.716 --> 00:02:44.232
it's gonna give it this preact library
which is able to do all of this stuff.

45
00:02:46.700 --> 00:02:47.251
&gt;&gt; Brian Holt: Okay, and

46
00:02:47.251 --> 00:02:50.750
then last thing is some of it
needs to be run through Babel.

47
00:02:50.750 --> 00:02:54.078
So inside of the Babel library,
we're gonna have to give it an include.

48
00:02:57.819 --> 00:03:02.806
&gt;&gt; Brian Holt: So include this stuff and

49
00:03:02.806 --> 00:03:11.844
we're gonna do path.resolve('js').

50
00:03:11.844 --> 00:03:17.681
But the other thing we're
gonna have to run through

51
00:03:17.681 --> 00:03:23.670
it is 'node_modules/preact.cpmpat/src'.

52
00:03:23.670 --> 00:03:28.070
Typically you don't wanna run
your node modules through Babel.

53
00:03:28.070 --> 00:03:32.250
But for whatever reason,
preact needs it, so, that's why.

54
00:03:40.934 --> 00:03:44.720
Sorry, and this doesn't go inside
of ESLint, this goes inside Babel.

55
00:03:51.519 --> 00:03:56.790
&gt;&gt; Brian Holt: Okay, so
let's go and run our build again.

56
00:03:58.840 --> 00:04:04.330
So keep in mind,
it was 76 kilobytes before, right?

57
00:04:04.330 --> 00:04:06.615
So now we're gonna do yarn build.

58
00:04:06.615 --> 00:04:11.195
See what happens.

59
00:04:19.394 --> 00:04:21.706
&gt;&gt; Brian Holt: Sorry, we were 226, right?

60
00:04:21.706 --> 00:04:24.830
226, the un-gzipped version.

61
00:04:24.830 --> 00:04:27.718
Now we're down to 131.

62
00:04:27.718 --> 00:04:31.374
The routes should be about the same, they
shouldn't change at all because preact has

63
00:04:31.374 --> 00:04:32.970
been included with the main bundle.

64
00:04:34.900 --> 00:04:38.690
We broke server side rendering just,
well, actually we didn't.

65
00:04:38.690 --> 00:04:41.749
So our server side rendering
is gonna do react and

66
00:04:41.749 --> 00:04:44.963
our client side is gonna do preact,
kind of weird.

67
00:04:44.963 --> 00:04:47.210
You wouldn't typically do that, but
I'm not gonna fix it right now.

68
00:04:47.210 --> 00:04:49.674
So, yarn start.

69
00:04:52.570 --> 00:04:54.160
&gt;&gt; Brian Holt: We'll see
if this actually works.

70
00:04:57.390 --> 00:05:04.609
So, we went from 76, right,
which was the gzip-size, down to 39.

71
00:05:06.025 --> 00:05:10.530
&gt;&gt; Brian Holt: So we're able to save about
30 kilobytes, just by switching to Preact.

72
00:05:10.530 --> 00:05:12.140
And guess what?
Everything still works,

73
00:05:13.570 --> 00:05:15.840
still pretty zippy, right?

74
00:05:15.840 --> 00:05:17.270
No real problems?

75
00:05:17.270 --> 00:05:20.130
For this application, we absolutely
should be using Preact, right?

76
00:05:22.430 --> 00:05:26.510
There's another library called
Inferno that achieves the same thing.

77
00:05:26.510 --> 00:05:30.290
It's a little bit bigger, but it has
some different performance strategies.

78
00:05:30.290 --> 00:05:34.570
So the answer to which one to use Preact
or Inferno, I would say try both and

79
00:05:34.570 --> 00:05:35.640
do the one that feels faster.

80
00:05:37.840 --> 00:05:38.820
They are both amazing.

81
00:05:38.820 --> 00:05:42.590
In fact Facebook actually hired
the guy that does Inferno and

82
00:05:42.590 --> 00:05:44.740
now he's working on performance on React.

83
00:05:44.740 --> 00:05:47.400
That guy is amazing, yeah?

84
00:05:47.400 --> 00:05:50.270
&gt;&gt; Speaker 2: If Axios was
used in two separate routes,

85
00:05:50.270 --> 00:05:52.140
what would be the inclusion strategy?

86
00:05:52.140 --> 00:05:58.570
Would you include it in the main bundle,
or both the routes that include it?

87
00:05:58.570 --> 00:06:01.680
&gt;&gt; Brian Holt: The answer to that question
is, you're never going to choose.

88
00:06:01.680 --> 00:06:05.410
You can kind of structure
your code in such a way,

89
00:06:05.410 --> 00:06:08.880
but it's actually Webpack that's
gonna have the final say.

90
00:06:10.650 --> 00:06:13.810
Now the question might be,
which one is it going to be included in?

91
00:06:13.810 --> 00:06:14.590
I'm not actually sure.

92
00:06:14.590 --> 00:06:16.790
And I think we can kind
of test really quick.

93
00:06:16.790 --> 00:06:21.280
So if I go into let's
say landing real quick.

94
00:06:21.280 --> 00:06:24.940
And I say import axios up here.

95
00:06:27.046 --> 00:06:28.639
&gt;&gt; Brian Holt: I don't
even have to use it, but

96
00:06:28.639 --> 00:06:31.427
it should still be,
&gt;&gt; Brian Holt: Or

97
00:06:31.427 --> 00:06:34.821
maybe I'll just do
a console.log(axios) here.

98
00:06:37.135 --> 00:06:39.580
&gt;&gt; Brian Holt: So now it's required
in landing as well, right?

99
00:06:41.060 --> 00:06:48.485
So if I go in here and say,
&gt;&gt; Brian Holt: Yeah I'm

100
00:06:48.485 --> 00:06:51.437
having a bunch of promised stuff but
that's fine.

101
00:06:53.285 --> 00:06:55.675
&gt;&gt; Brian Holt: All right
I need to do build again.

102
00:06:58.526 --> 00:07:00.566
&gt;&gt; Brian Holt: Yarn build.

103
00:07:07.146 --> 00:07:09.114
&gt;&gt; Brian Holt: See what it comes out with.

104
00:07:09.114 --> 00:07:12.090
So my guess is it's might.

105
00:07:13.130 --> 00:07:15.384
No, what it did here.

106
00:07:20.559 --> 00:07:27.300
&gt;&gt; Brian Holt: All right so
I think I know what happened here.

107
00:07:27.300 --> 00:07:29.713
So yarn start,

108
00:07:40.147 --> 00:07:42.107
&gt;&gt; Brian Holt: Network All right so

109
00:07:42.107 --> 00:07:44.417
I put it on landing now.

110
00:07:47.459 --> 00:07:52.280
&gt;&gt; Brian Holt: Yeah, now we get
an 11 kilobyte library there, so

111
00:07:52.280 --> 00:07:54.045
that's that one.

112
00:07:54.045 --> 00:07:59.060
So that's 1.bundle.js right, okay.

113
00:07:59.060 --> 00:08:02.565
Now if I go to here and I need it here.

114
00:08:05.677 --> 00:08:07.450
&gt;&gt; Brian Holt: How big was that one?

115
00:08:07.450 --> 00:08:11.757
0 was also 11 kilobytes.

116
00:08:15.893 --> 00:08:19.060
&gt;&gt; Brian Holt: Interesting, okay, yeah.

117
00:08:19.060 --> 00:08:22.060
So it just included Axios in both bundles,
and so

118
00:08:22.060 --> 00:08:25.270
now it still leaves
the second bundle alone.

119
00:08:25.270 --> 00:08:26.800
So that's the answer to that question.

