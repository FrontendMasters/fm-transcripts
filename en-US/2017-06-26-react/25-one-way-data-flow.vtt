WEBVTT

1
00:00:00.333 --> 00:00:02.356
&gt;&gt; Brian Holt: So let's talk about state.

2
00:00:02.356 --> 00:00:06.532
So what we've talked about
before has been about props,

3
00:00:06.532 --> 00:00:11.146
right, child passing down data
from the parents to the child.

4
00:00:11.146 --> 00:00:16.092
And something interesting and
useful to talk about that, is the parents

5
00:00:16.092 --> 00:00:20.888
can pass down data to the child, but
vice versa does not work, right?

6
00:00:20.888 --> 00:00:25.774
So the child, has no concept of
who its parents are, which is sad,

7
00:00:25.774 --> 00:00:31.026
I suppose.
&gt;&gt; Brian Holt: But

8
00:00:31.026 --> 00:00:34.688
it can't interact with its parent,
it can't do anything.

9
00:00:34.688 --> 00:00:38.090
The only thing it can do is
accept data from its parents, and

10
00:00:38.090 --> 00:00:40.075
then do something with that data.

11
00:00:40.075 --> 00:00:41.802
This is called one-way data flow.

12
00:00:41.802 --> 00:00:45.458
That's one of the things that,
I'm not gonna say React pioneered it, but

13
00:00:45.458 --> 00:00:48.548
it definitely made that popular
in the front-end landscape.

14
00:00:48.548 --> 00:00:52.670
And now, definitely, Angular and Ember
have adopted that into their frameworks.

15
00:00:52.670 --> 00:00:55.112
And it's been good for
everyone all around.

16
00:00:55.112 --> 00:00:57.854
The reason why this is a really,
really, really good thing,

17
00:00:57.854 --> 00:01:00.449
it kinda feels like it's tying
one hand behind your back.

18
00:01:00.449 --> 00:01:04.765
So does it, but
ends up being a huge net positive.

19
00:01:04.765 --> 00:01:07.685
If the most parent is
having issues you can limit

20
00:01:07.685 --> 00:01:10.757
the children that's causing the issue,
right?

21
00:01:10.757 --> 00:01:13.596
Because the children have no way to
interact with the parents, right?

22
00:01:13.596 --> 00:01:19.880
So the problem has to live within the
parent, that's what I wanted to assert.

23
00:01:19.880 --> 00:01:21.885
So in our particular case, right?

24
00:01:21.885 --> 00:01:28.082
If I have search and
maybe search is having an issue here.

25
00:01:28.082 --> 00:01:32.936
I can already rest assured that ShowCard
isn't causing any issues because ShowCard

26
00:01:32.936 --> 00:01:35.341
has no way to meddle with search, right?

27
00:01:35.341 --> 00:01:40.252
That's the power of one way data flow.
&gt;&gt; Brian Holt: So this is a powerful

28
00:01:40.252 --> 00:01:44.830
thing that I think, Facebook does really
well in particular with React and

29
00:01:44.830 --> 00:01:49.554
some of their other libraries, is they
really optimize for debugability and

30
00:01:49.554 --> 00:01:54.205
maintainability.
&gt;&gt; Brian Holt: And so this idea that you

31
00:01:54.205 --> 00:01:59.378
can see a problem and
eliminate entire swaths of your code

32
00:01:59.378 --> 00:02:04.142
where that problem could
not be is really powerful.

33
00:02:04.142 --> 00:02:08.037
Cuz you can start having an issue and you
just get to eliminate two thirds of your

34
00:02:08.037 --> 00:02:12.183
app and you're just gonna instantly start
looking within that one third, right?

35
00:02:12.183 --> 00:02:16.709
It's really, really powerful.
&gt;&gt; Brian Holt: So

36
00:02:16.709 --> 00:02:19.635
that's props, that's when my data flow.

37
00:02:19.635 --> 00:02:21.940
It's definitely a core tenet of react.

