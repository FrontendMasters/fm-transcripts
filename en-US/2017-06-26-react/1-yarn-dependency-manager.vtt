WEBVTT

1
00:00:00.000 --> 00:00:03.954
&gt;&gt; Brian Holt: Now it says you
have the start branch, hopefully.

2
00:00:03.954 --> 00:00:09.747
Hopefully you have Node 6+,
7ish installed.

3
00:00:09.747 --> 00:00:14.508
I installed mine using nvm,
it's totally up to you how to do that,

4
00:00:14.508 --> 00:00:16.813
but I find nvm very convenient.

5
00:00:18.859 --> 00:00:22.371
&gt;&gt; Brian Holt: Next thing we're
gonna talk about is Yarn.

6
00:00:22.371 --> 00:00:27.856
So many of you are probably accustomed
to seeing npm lot's of places.

7
00:00:27.856 --> 00:00:30.779
Npm doesn't stand for
Node Package Manager, but

8
00:00:30.779 --> 00:00:32.872
that's what I think of it as [LAUGH].

9
00:00:32.872 --> 00:00:38.353
It's basically a way to install
dependencies for JavaScript type projects.

10
00:00:38.353 --> 00:00:42.859
And they ship a client called npm.

11
00:00:42.859 --> 00:00:48.632
And it's been really great for a long
time, however if you're doing deployments

12
00:00:48.632 --> 00:00:55.000
it's really tough because npm is
non-deterministic as of npm 3, 4-ish.

13
00:00:55.000 --> 00:00:59.381
This is gonna change with npm 5,
npm 5 will become deterministic and

14
00:00:59.381 --> 00:01:01.843
it's also going to do locking as well.

15
00:01:01.843 --> 00:01:05.500
But that is still not released,
its actually coming out with Node 8 today.

16
00:01:05.500 --> 00:01:10.419
So that's why we are not teaching it
today, we are going to stick with Yarn.

17
00:01:10.419 --> 00:01:15.301
The fine people over at Facebook were
frustrated with their deployments,

18
00:01:15.301 --> 00:01:18.254
so they came up with
a npm client called Yarn.

19
00:01:18.254 --> 00:01:22.008
And what Yarn does is it creates these
lock files, which we were just looking at,

20
00:01:22.008 --> 00:01:24.014
that locks down all of your dependencies.

21
00:01:24.014 --> 00:01:26.134
What's really cool about
that is it's deterministic.

22
00:01:26.134 --> 00:01:29.925
When I say the term deterministic, it
means I can run it 10 billion times, and

23
00:01:29.925 --> 00:01:33.223
on the 10 billion and first time
it's gonna run the exact same way.

24
00:01:33.223 --> 00:01:36.615
And you do not have that
guarantee with npm 3.

25
00:01:36.615 --> 00:01:42.482
Which is the one that the previous
versions of Node shipped with.

26
00:01:42.482 --> 00:01:47.192
So what's frustrating about that is when
you're doing deployments you don't know

27
00:01:47.192 --> 00:01:50.587
what state your node module's
directory is gonna end up in.

28
00:01:50.587 --> 00:01:54.111
Which is a problem as you may imagine,
right?

29
00:01:54.111 --> 00:01:58.925
Like you can do 10,000 deploys and
50 of them failed for unknown reasons,

30
00:01:58.925 --> 00:02:01.448
and you can't reproduce why they failed.

31
00:02:01.448 --> 00:02:03.183
It's a serious problem, right?

32
00:02:03.183 --> 00:02:06.173
So they came up with this
yarn dependency manager.

33
00:02:06.173 --> 00:02:09.194
It's faster than npm 3 and
it's deterministic.

34
00:02:09.194 --> 00:02:11.604
And it also has a flat structure,

35
00:02:11.604 --> 00:02:15.490
which are all very positive things for
deployments.

36
00:02:17.140 --> 00:02:18.740
So today we're gonna be using Yarn.

37
00:02:19.810 --> 00:02:22.326
So if you don't already have it installed,

38
00:02:22.326 --> 00:02:24.842
I'll show you how to
install it real quick.

39
00:02:24.842 --> 00:02:31.690
You do npm install --global yarn,
like that.

40
00:02:33.471 --> 00:02:35.570
&gt;&gt; Brian Holt: I already have it,
so I'm going to run that, but

41
00:02:35.570 --> 00:02:37.650
that's how you would do it.

42
00:02:37.650 --> 00:02:43.480
And then at that point,
you should be able to say yarn -v.

43
00:02:43.480 --> 00:02:44.940
I guess it's going to the installations.

44
00:02:44.940 --> 00:02:46.850
I guess -v does not do version.

45
00:02:46.850 --> 00:02:49.140
In any case, let's stop that for a second.

46
00:02:51.790 --> 00:02:54.782
So I have Yarn already installed, and

47
00:02:54.782 --> 00:02:59.564
now I am inside the start branch,
and I'm going to run yarn.

48
00:02:59.564 --> 00:03:01.909
What this is gonna do,
this is like the npm install.

49
00:03:01.909 --> 00:03:05.241
It's gonna go through and install all
my dependencies based on what I have in

50
00:03:05.241 --> 00:03:06.970
package.json and the yarn lock file.

51
00:03:06.970 --> 00:03:11.977
So I'm gonna say yarn, and
then it's just gonna do this magic,

52
00:03:11.977 --> 00:03:16.447
and it's going to install all
of my dependencies for me.

53
00:03:18.281 --> 00:03:23.276
&gt;&gt; Brian Holt: Now to be fair, you could
totally run npm install, and not use Yarn,

54
00:03:23.276 --> 00:03:26.133
and I'm 99% sure it's gonna work.

55
00:03:26.133 --> 00:03:28.491
But it's non-deterministic,
so you can't truly be sure.

56
00:03:28.491 --> 00:03:31.370
No, I'm just kidding,
you can be pretty sure.

57
00:03:31.370 --> 00:03:35.480
So now, if we look in our node modules,
mine was pretty fast.

58
00:03:35.480 --> 00:03:40.530
Mine only too 13 seconds because most
of that was already cached for me.

59
00:03:40.530 --> 00:03:42.430
If you're doing this cold for
the first time, and

60
00:03:42.430 --> 00:03:47.160
are not on gigabit,
it might take a little bit longer.

61
00:03:47.160 --> 00:03:51.620
So if I go into node modules and look, I
have a ton of dependencies installed now.

62
00:03:55.192 --> 00:03:58.335
&gt;&gt; Brian Holt: So this is something that
people that like to complain about node

63
00:03:58.335 --> 00:04:03.220
like to complain about, is that there
are just a crazy amount of dependencies.

64
00:04:03.220 --> 00:04:06.405
Not gonna deny that,
there's a crazy amount of dependencies.

65
00:04:06.405 --> 00:04:10.926
However, you have to keep in mind that
Yarn installs all these node modules

66
00:04:10.926 --> 00:04:11.870
totally flat.

67
00:04:11.870 --> 00:04:16.844
So everything that gets included that
includes something else that includes

68
00:04:16.844 --> 00:04:22.070
something else, it's all installed flat,
which is not how npm installs them.

69
00:04:22.070 --> 00:04:26.177
Yarn actually goes through and
sim links them all into their respective

70
00:04:26.177 --> 00:04:29.132
node modules directories,
which is pretty cool.

71
00:04:33.700 --> 00:04:35.359
&gt;&gt; Brian Holt: Cool.

72
00:04:38.200 --> 00:04:40.836
&gt;&gt; Brian Holt: So
now that we've done Yarn installs.

73
00:04:43.776 --> 00:04:46.106
&gt;&gt; Brian Holt: We're gonna go ahead and
skip the global installs for

74
00:04:46.106 --> 00:04:49.976
now
&gt;&gt; Brian Holt: But just so you know you

75
00:04:49.976 --> 00:04:55.835
can also do global yarn installs,
you can do yarn global add blank.

76
00:04:55.835 --> 00:04:59.413
So if I was gonna do nodemon or something
like that, that's how you do that and

77
00:04:59.413 --> 00:05:01.299
that would be a global install for Yarn.

78
00:05:03.414 --> 00:05:07.242
&gt;&gt; Brian Holt: And if you wanna
add new dependencies to a repo,

79
00:05:07.242 --> 00:05:10.509
you say yarn add and then react, right?

80
00:05:10.509 --> 00:05:11.428
Something like that.

81
00:05:13.842 --> 00:05:17.542
&gt;&gt; Brian Holt: Instead of yarn
install it's yarn add, and

82
00:05:17.542 --> 00:05:20.750
then by the same token, yarn remove.

83
00:05:20.750 --> 00:05:24.080
The nice thing about yarn is
that it saves by default,

84
00:05:24.080 --> 00:05:27.860
you don't have to do npminstall--save,
right?

85
00:05:27.860 --> 00:05:31.093
Also true of npm 5,
they're dropping the --save,

86
00:05:31.093 --> 00:05:34.621
it's gonna just save by default,
which is gonna be great.

87
00:05:34.621 --> 00:05:37.434
And if you wanted to save it to dev,

88
00:05:37.434 --> 00:05:43.069
you're gonna say yard --dev eslint or
something like that right?

89
00:05:43.069 --> 00:05:46.635
And that is the full tour,
that is how you use Yarn.

90
00:05:46.635 --> 00:05:47.487
A question from online?

91
00:05:47.487 --> 00:05:52.842
&gt;&gt; Speaker 2: It's asking if Yarn
adds updates that package JSON?

92
00:05:52.842 --> 00:05:55.369
&gt;&gt; Brian Holt: It does, yeah,
it'll update the package.json and

93
00:05:55.369 --> 00:05:57.850
it'll update the lockfile for
you automatically.

94
00:06:03.056 --> 00:06:04.839
&gt;&gt; Brian Holt: Same thing with npm 5,

95
00:06:04.839 --> 00:06:09.240
it's gonna ship a new file
called package-lock.json.

96
00:06:09.240 --> 00:06:12.490
And when you install it will
also update that as well.

97
00:06:13.960 --> 00:06:17.616
So npm 3 has something called
shrinkwrap which will be,

98
00:06:17.616 --> 00:06:21.363
I think, slowly be phased out
in favor of package-lock.

99
00:06:23.357 --> 00:06:25.680
&gt;&gt; Brian Holt: And if you don't
know where it is, that's okay.

100
00:06:25.680 --> 00:06:29.192
Let's just go forward with Yarn and
package lock.

101
00:06:29.192 --> 00:06:34.740
&gt;&gt; Speaker 3: And are these npm updates
supposed to just kind of displace Yarn,

102
00:06:34.740 --> 00:06:38.070
like is that what they're trying to do?

103
00:06:38.070 --> 00:06:39.998
&gt;&gt; Brian Holt: That's a good question.

104
00:06:39.998 --> 00:06:44.794
&gt;&gt; Speaker 2: They said they were just
working on it, actually beforehand,

105
00:06:44.794 --> 00:06:47.149
and then Yarn kind of came out.

106
00:06:47.149 --> 00:06:47.758
&gt;&gt; Brian Holt: Yeah.

107
00:06:47.758 --> 00:06:50.906
&gt;&gt; Speaker 2: And then it looked like
they were kind of backpedaling and

108
00:06:50.906 --> 00:06:53.100
filling in gaps, but I don't know.

109
00:06:53.100 --> 00:06:54.310
It's hard to say.
&gt;&gt; Brian Holt: It's kind of

110
00:06:54.310 --> 00:06:55.472
a weird situation.

111
00:06:57.843 --> 00:07:01.075
&gt;&gt; Brian Holt: Not to plug myself too much
here, but the last episode of the podcast

112
00:07:01.075 --> 00:07:03.698
we launched,
it actually had Laurie Voss from npm on.

113
00:07:03.698 --> 00:07:06.844
And he talks a lot about
that whole situation, so.

114
00:07:06.844 --> 00:07:08.694
There's good history there
if you want to talk.

115
00:07:08.694 --> 00:07:11.200
They're super chill with each other
is the sum of the story, right?

116
00:07:11.200 --> 00:07:13.404
They're both gonna coexist and

117
00:07:13.404 --> 00:07:15.837
push each other forward I think
it the sum of the story for now.

