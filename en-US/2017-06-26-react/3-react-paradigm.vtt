WEBVTT

1
00:00:00.645 --> 00:00:03.296
&gt;&gt; Brian Holt: Hopefully now you're seeing
more things kind of come together, right?

2
00:00:03.296 --> 00:00:07.941
The fact that you can make components
up of other components means

3
00:00:07.941 --> 00:00:11.921
we have some pretty powerful
patterns at our disposal.

4
00:00:11.921 --> 00:00:16.898
We can create reusable components
like a datepicker, right?

5
00:00:16.898 --> 00:00:20.689
And then we can reuse that datepicker
throughout our entire website.

6
00:00:20.689 --> 00:00:23.117
I'm sure you could see many
instances where this can be useful.

7
00:00:26.626 --> 00:00:31.346
&gt;&gt; Brian Holt: So yeah, we can use these
components to encapsulate logic, markup,

8
00:00:31.346 --> 00:00:32.147
and style.

9
00:00:32.147 --> 00:00:37.141
Kind of compress those all together and
then ship them out in individual pieces.

10
00:00:37.141 --> 00:00:42.130
And we're kinda getting at what
the core of what React is all about.

11
00:00:42.130 --> 00:00:45.623
So at least for me,
I used to write Backbone, and

12
00:00:45.623 --> 00:00:49.970
I used to write a decent
amount of Angular pre-1, 0.8,

13
00:00:49.970 --> 00:00:54.854
I think is what it was when I was
writing Angular, maybe Angular 1.

14
00:00:54.854 --> 00:00:57.271
And they were kind of
all-inclusive frameworks, right?

15
00:00:57.271 --> 00:01:02.666
They kind of emulated MVC on the server.

16
00:01:02.666 --> 00:01:05.527
It felt a lot like writing something like
Django or Rails or something like that,

17
00:01:05.527 --> 00:01:08.787
where you'd have the model, you'd have the
view and you'd have the controller, right?

18
00:01:08.787 --> 00:01:12.079
And you'd have the model set in one end,
you'd have the view set in the other, and

19
00:01:12.079 --> 00:01:14.250
then the controller is kind
of routing to each other.

20
00:01:14.250 --> 00:01:17.207
This is an amazing paradigm on the server,

21
00:01:17.207 --> 00:01:21.077
really there's not many
better ways to write servers.

22
00:01:21.077 --> 00:01:23.653
And we kind of thought, well, this is
a really great way to write servers.

23
00:01:23.653 --> 00:01:28.249
Why shouldn't we try this with the client,
right, and it worked okay, right?

24
00:01:28.249 --> 00:01:31.853
It was better than writing the jQuery
spaghetti code that at least I used

25
00:01:31.853 --> 00:01:32.401
to write.

26
00:01:32.401 --> 00:01:37.155
But over time we kind of see kind of
the cracks show when you have a large app,

27
00:01:37.155 --> 00:01:37.695
right?

28
00:01:37.695 --> 00:01:40.515
The real problem is that
you'd have these models,

29
00:01:40.515 --> 00:01:43.740
one model'd be using a bunch
of different views, right?

30
00:01:43.740 --> 00:01:47.628
And then you have this controllers doing
all sorts of crazy routing from one model

31
00:01:47.628 --> 00:01:50.728
to many controllers and
many controllers to one model, right?

32
00:01:50.728 --> 00:01:53.688
It was just many to many mess, right?

33
00:01:53.688 --> 00:01:56.336
That's kind of what ended up happening.

34
00:01:56.336 --> 00:02:01.093
So some really smart people at Facebook
decided that this was not necessarily

35
00:02:01.093 --> 00:02:03.004
a very good way to write a code.

36
00:02:03.004 --> 00:02:07.534
And they kinda yearned for the days where
we could just write some markup on a page,

37
00:02:07.534 --> 00:02:09.120
and it just worked, right?

38
00:02:09.120 --> 00:02:12.808
So they kind of went forward with that
idea, that well, why don't we embrace

39
00:02:12.808 --> 00:02:16.013
the paradigm of what's on the web,
which is components, right?

40
00:02:16.013 --> 00:02:21.475
We would have these bits of markup, which
had CSS that would get applied to them.

41
00:02:21.475 --> 00:02:25.108
And then we could reuse these different
pieces of markup all over the site.

42
00:02:25.108 --> 00:02:29.456
So they kind of embraced and
leaned into this pattern and said, well,

43
00:02:29.456 --> 00:02:34.112
why can't we create these component
that then we can render out to the DOM?

44
00:02:34.112 --> 00:02:37.765
And so that's kind of what
they started leaning into, and

45
00:02:37.765 --> 00:02:40.014
we ended up with React components.

46
00:02:40.014 --> 00:02:44.696
And a React component is just
an encapsulated piece of a component,

47
00:02:44.696 --> 00:02:49.390
right, behavior, style and
markup, HTML, CSS and JavaScript.

48
00:02:51.590 --> 00:02:52.998
&gt;&gt; Brian Holt: Now this
ends up being really,

49
00:02:52.998 --> 00:02:56.479
really powerful because it's a natural
way to think about the web, right?

50
00:02:56.479 --> 00:03:00.299
It's a natural way of creating interfaces.

51
00:03:00.299 --> 00:03:04.898
So rather than having models, views and
controllers all separated, that

52
00:03:04.898 --> 00:03:09.865
separation of concern doesn't necessarily
make a ton of sense for interfaces.

53
00:03:09.865 --> 00:03:12.667
So what they did was they took
models used as controllers,

54
00:03:12.667 --> 00:03:16.225
they shoved them all together for
very, very small components, right?

55
00:03:16.225 --> 00:03:21.962
So everything for a component lives
inside of one file basically, right?

56
00:03:21.962 --> 00:03:25.254
Now this is really, really awesome,
because if something breaks,

57
00:03:25.254 --> 00:03:26.795
it's all right there, right?

58
00:03:26.795 --> 00:03:29.198
You don't have to go through
multiple files, right?

59
00:03:29.198 --> 00:03:32.582
How many of you have ever
debugged an Angular 1 app, and

60
00:03:32.582 --> 00:03:35.614
you look at some component
that broke on the page.

61
00:03:35.614 --> 00:03:37.800
And you have no idea how it broke, right?

62
00:03:37.800 --> 00:03:40.202
It could be in the directive,
it could be in the controller.

63
00:03:40.202 --> 00:03:44.958
It could be in the template,
it could be in the service, I can go on,

64
00:03:44.958 --> 00:03:49.555
and on, and on of where all
the different places this could live.

65
00:03:49.555 --> 00:03:53.304
The cool thing about a React component
is due to the encapsulation of

66
00:03:53.304 --> 00:03:57.381
how these components work, if you see
something that breaks on the page,

67
00:03:57.381 --> 00:04:00.768
you have a pretty damned good
idea of what happened, right?

68
00:04:00.768 --> 00:04:04.500
Because it all lives right
there in that one file.

69
00:04:04.500 --> 00:04:11.308
Now I'm kind of exaggerating a little bit,
right, because modules can break and etc.

70
00:04:11.308 --> 00:04:14.371
But you always have a good starting point.

71
00:04:14.371 --> 00:04:16.588
So this is all getting
to why I love React.

72
00:04:16.588 --> 00:04:20.155
React is going to be more verbose for
sure than Angular, right?

73
00:04:20.155 --> 00:04:24.502
You can write amazing interfaces with
Angular with very, very little code.

74
00:04:24.502 --> 00:04:27.939
However, when you go back to maintain
some of these very clever Angular apps,

75
00:04:27.939 --> 00:04:29.725
I'm speaking on my own behalf, right?

76
00:04:29.725 --> 00:04:32.462
I wrote crappy Angular, I own that.

77
00:04:32.462 --> 00:04:37.349
[LAUGH] But
maintaining some of these clever Angular

78
00:04:37.349 --> 00:04:42.130
apps is atrocious,
it's nightmarish, right?

79
00:04:42.130 --> 00:04:46.324
With React it forces you into such
a paradigm that it's much easier to debug,

80
00:04:46.324 --> 00:04:48.078
it's much easier to maintain.

81
00:04:48.078 --> 00:04:51.820
It's much easier for someone to come back
later, yourself or someone else and read

82
00:04:51.820 --> 00:04:55.362
through the code and kind of understand
because it's a very, very explicit.

83
00:04:55.362 --> 00:04:57.302
But this comes at the cost
is that you write more code.

84
00:04:57.302 --> 00:04:59.588
It's physically more
keystrokes to get it out.

85
00:04:59.588 --> 00:05:05.486
So that's kind of the paradigm of
why React is the way that it is.

86
00:05:05.486 --> 00:05:09.316
This affords some other really interesting
patterns which we're gonna be getting to

87
00:05:09.316 --> 00:05:12.519
throughout the next couple days but
that´s where we´re gonna start.

88
00:05:12.519 --> 00:05:13.262
Yeah?

89
00:05:13.262 --> 00:05:15.975
&gt;&gt; Speaker 2: It´s just
a couple of clarifications or

90
00:05:15.975 --> 00:05:19.738
questions on the chat about
why we need null parameter.

91
00:05:19.738 --> 00:05:20.334
&gt;&gt; Brian Holt: Yep.
&gt;&gt; Speaker 2: And

92
00:05:20.334 --> 00:05:23.941
people are just saying the second
parameters is the set of properties,

93
00:05:23.941 --> 00:05:25.815
attributes, that can be passed in.

94
00:05:25.815 --> 00:05:27.150
&gt;&gt; Brian Holt: Yeah.
&gt;&gt; Speaker 2: First is the tag,

95
00:05:27.150 --> 00:05:29.736
the second is properties-
&gt;&gt; Brian Holt: I'll talk about it here

96
00:05:29.736 --> 00:05:30.257
in just a sec.

97
00:05:30.257 --> 00:05:34.757
&gt;&gt; Speaker 2: The third is
the child element and then yeah,

98
00:05:34.757 --> 00:05:40.445
why do we need to do two
React.createElement together,

99
00:05:40.445 --> 00:05:44.011
and you're just showing nesting.

100
00:05:44.011 --> 00:05:48.211
&gt;&gt; Brian Holt: Yep, yep, so
to talk about this null right here,

101
00:05:48.211 --> 00:05:51.321
you could also pass an empty object.

102
00:05:51.321 --> 00:05:53.937
That's fine too.

103
00:05:53.937 --> 00:05:56.396
So what this is,
this is all the attributes or

104
00:05:56.396 --> 00:06:00.108
properties that's going to be
passed to that particular element.

105
00:06:00.108 --> 00:06:04.680
So for example for a div,
let's say you wanted to give it this

106
00:06:04.680 --> 00:06:08.455
particular div an ID of,
let's do this one here.

107
00:06:08.455 --> 00:06:15.132
An ID of my first component,
you'd say id: 'my-first-component'.

108
00:06:18.310 --> 00:06:22.173
&gt;&gt; Brian Holt: So now if I refresh this
and I look here inside of my element,

109
00:06:22.173 --> 00:06:26.056
notice I got the ID right there
of my first component right?

110
00:06:26.056 --> 00:06:29.669
So this is how you pass attributes
to these particular things.

111
00:06:29.669 --> 00:06:33.730
Now we're gonna get into, we can also
pass attributes to my title as well,

112
00:06:33.730 --> 00:06:35.411
which we'll do momentarily.

113
00:06:35.411 --> 00:06:38.230
&gt;&gt; Speaker 2: And then one more
clarification is you're talking about

114
00:06:38.230 --> 00:06:41.118
Angular 1, right,
with everything being split apart?

115
00:06:41.118 --> 00:06:43.055
&gt;&gt; Brian Holt: Yes.
&gt;&gt; Speaker 2: Is Angular 2 and 4,

116
00:06:43.055 --> 00:06:44.018
whatever.

117
00:06:44.018 --> 00:06:45.897
&gt;&gt; Brian Holt: I don't know
anything about Angular 2 so.

118
00:06:45.897 --> 00:06:47.373
&gt;&gt; Speaker 2: Okay, you're saying that-
&gt;&gt; Brian Holt: So

119
00:06:47.373 --> 00:06:52.314
all of my ragging on Angular from
here forth will be on Angular 1.

120
00:06:52.314 --> 00:06:53.713
Thank you for that clarification.

121
00:06:53.713 --> 00:06:54.896
[LAUGH]
&gt;&gt; Speaker 2: Yeah,

122
00:06:54.896 --> 00:06:59.959
a lot of the frameworks are coming in to
this new paradigm of putting your mark up,

123
00:06:59.959 --> 00:07:03.762
your CSS, your component and
everything into one file now.

124
00:07:03.762 --> 00:07:05.966
&gt;&gt; Brian Holt: Definitely,
no, it would be fun and

125
00:07:05.966 --> 00:07:10.606
useful to compare this particular
course with Lucas' course on Angular 2.

126
00:07:14.106 --> 00:07:14.606
&gt;&gt; Brian Holt: Cool.

127
00:07:16.431 --> 00:07:17.068
&gt;&gt; Brian Holt: So yeah,

128
00:07:17.068 --> 00:07:22.015
someone asked about why we're doing
multiple createElements, right?

129
00:07:22.015 --> 00:07:24.900
This is how you create, for
example, a div, right, and

130
00:07:24.900 --> 00:07:26.704
then inside of that div, right, so

131
00:07:26.704 --> 00:07:30.757
notice that we're still inside of this
particular parenthesis from this one.

132
00:07:30.757 --> 00:07:34.723
We're doing nesting right, and
here instead of putting text,

133
00:07:34.723 --> 00:07:37.888
we can actually put more createElements,
right?

134
00:07:37.888 --> 00:07:40.499
It's like HTML,
there's infinite nesting that you can do.

135
00:07:40.499 --> 00:07:43.422
So that's what's going on there.

