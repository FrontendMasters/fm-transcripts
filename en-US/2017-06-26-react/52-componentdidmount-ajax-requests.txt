[00:00:00]
>> Brian Holt: So for us, we're gonna do something with componentDidMount, except we're gonna do this,
>> Brian Holt: Not on Search, so get rid of that. We're gonna do it on Details.
>> Brian Holt: So the first thing that we're gonna have to do here is, unfortunately, this is a function component, right?

[00:00:25]
That it's just a function that returns markup. We're gonna have to convert this to an ES6 class, which is something that you'll find yourself kind of going back and forth with sometimes. But that's normal and healthy.
>> Brian Holt: So we're wanna say class Details extends Component. And bring in component up here.

[00:00:54]

>> Brian Holt: Okay.
>> Brian Holt: Then we're gonna turn this into a render method right here.
>> Brian Holt: Then down here,
>> Brian Holt: And then we need to turn to props up here. In fact, let me just get rid of that and say props. Show is going to be a Show.
>> Brian Holt: And everywhere that we say props.show, which I think is just that one place, right?

[00:01:49]
We're just gonna say this.props.show, because now it's gonna be on the context and not being passed in from the props.
>> Brian Holt: So you're gonna notice up here that class is complaining is like hey, this should be a stateless functional component, that's what the AirBnB config does for you, but it's normal, okay?

[00:02:19]

>> Brian Holt: So what we're gonna do is we're gonna have this kind of request, something from our fake API. This use to use the Open Movie Database which unfortunately went closed, so it's no longer so open. [LAUGH] Understandably so, so I mocked out a fake API for you. So if you go over to your terminal really quick, open a new window.

[00:02:48]

>> Brian Holt: I'm gonna go into talks/fem/complete-intro-to-react/. So I'm not gonna close my dev server, I'm gonna leave that open. But this one I'm gonna run yarn api, which I already included for you. And you're gonna get something that looks like this, starting server on port 3000. And what this is going to do is it's going to make a fake API for you, that's gonna give you back ratings for your TV shows.

[00:03:15]
It's random, I did not rate these myself. It's just randomly generated every single time.
>> Brian Holt: Cool?
>> Brian Holt: So now that this is an ES6 component, let's go ahead and,
>> Brian Holt: Yeah, start requesting data.
>> Brian Holt: So by virtue of the fact we only make the API request after the item has amounted to the DOM, we have this interim state that we're going to be loading, right?

[00:03:56]
Because it's going to load the first time without that rating. So that means that we need to load with a loading state and then eventually render something out. That make sense, right? This is good, this is why you don't make API requests in component will mount because you don't wanna wait for your API request to finish before you render something.

[00:04:14]
You wanna render first and then request something and then render again once the data is back. That's why you do all this in component and mount. So, let's create a new class and the new page called spinner.ajax, and this will be a reusable component that we can use anytime we're loading.

[00:04:37]
So let's opt into flow, we're going to import React from React,
>> Brian Holt: And we're going to import styled, and keyframes from styled components.
>> Brian Holt: So I'm gonna show you another fun capability with styled components. You can still do keyframe animations with them. So what we're gonna do is we're gonna make a spin keyframe animation and it's gonna be equal to keyframes, which is another tagged template literal, and we're gonna go from,

[00:05:23]

>> Brian Holt: Transform,
>> Brian Holt: Rotate,
>> Brian Holt: Zero degrees,
>> Brian Holt: to { transform: rotate(360degrees). Actually I'm pretty sure now that I've written this out, I'm pretty sure you just need to, right? And then it infers the from. Whatever the case, we're just gonna leave it cuz that's what it is on my notes.

[00:05:56]

>> Brian Holt: Okay, then we're gonna do const Image = styled.img.
>> Brian Holt: And we're gonna say animation,
>> Brian Holt: And then we'll gonna put in spin 4s infinite linear, and background-image; url(/public/image/loading.png.
>> Brian Holt: And then const spinner equals an anonymous function that returns image sort,
>> Brian Holt: I guess you don't need that styled, you don't need that background image.

[00:06:57]
Okay, get rid of that.
>> Brian Holt: /public/image/loading.png. And alt = "loading indicator", and then export default Spinner;.
>> Brian Holt: Okay, so we created a new keyframe up here. And what's going to be starred in this keyframe is actually going to be the generated name of that keyframe. And then we're going to be outputting that here in the animation in the CSS for this image tag, right?

[00:07:47]

>> Brian Holt: So now we have this dumb component, this presentational component that we can just render anywhere, that we want a nice little spinning pin wheel. Really nice for loading. Now, we have the spinner component that we can use anywhere that we're loading anything, so I actually end up using in a couple of places, hence why we made its own component.

[00:08:06]
But this is kinda the gist of how you do keyframe animations with styles components, which is I think pretty sleek in my opinion, okay? So now we're going to use this inside of Details. So we're going to import Spinner from './spinner'.
>> Brian Holt: Okay?
>> Brian Holt: And the other thing we're gonna import up there at the top is the library called axios, import axios from 'axios'.

[00:08:42]
This is just an Ajax client, it doesn't bother me if you don't like this one or wanna use a different sort of Ajax client, or if you just wanna write using the fetch API, that all works for me. I'm just gonna use Axios because it's really easy and it's one that I've used for a long time, it's super reliable.

[00:09:00]
It's also very easy to test with, which I will show you later how to test these Ajax requests. So, suffice to say, that where we gonna use Axios for now. Okay, down here in Details,
>> Brian Holt: Add a prop type inside a shell. Yeah, okay so go back to your types.js real quick.

[00:09:27]
And I already have it so you don't need to do that. No problem, we're gonna go to details. Cool. And then we're gonna have some state up here at the top, so state = apidata, is that what I stored in? Yep, apidata.
>> Brian Holt: And its initial state is going to be an imdbRating.

[00:09:57]

>> Brian Holt: Right?
>> Brian Holt: So we're gonna request all this information back from the API. And one of the requests, or one of the answers that it's going to give back to us is this rating that we're going to display.
>> Brian Holt: Okay, and then we're going to make a componentDidMount.

[00:10:14]
I think it goes between these two, componentDidMount. And what we're gonna do is we're gonna do axios.get
>> Brian Holt: 'http://localhost:3000/$ {this.props.show.imdbID}',
>> Brian Holt: Okay. This is gonna get us the data from the API. It's gonna give us back a promise so we gonna say .then,
>> Brian Holt: And we're going to a response back from the API, so the response is going to look like,

[00:11:11]

>> Brian Holt: data,
>> Brian Holt: rating,
>> Brian Holt: string,
>> Brian Holt: So this is just typing for the data we know we're gonna get back from the API.
>> Brian Holt: And coming here then we're gonna say this.setState(), and that's gonna be APIData: Response.data.
>> Brian Holt: And I called this IMDB, so let's just call this rating up here.

[00:12:21]

>> Brian Holt: Okay, so just to recap here,
>> Brian Holt: So the first thing let's do is we'll do a .get at local host 3000, providing your API server is running, so make sure your API server is running. And it's going to go out and get from the imdbID, based on the imdbID, then it's going to give you back this response object, which is gonna give you back data, which is something that axios does.

[00:12:53]
Then it's gonna do rating, and that's gonna be a string and we're gonna use that to setState so that apiData is gonna be replaced by whatever comes back from the API.
>> Speaker 2: There's just a comment in chat about, why would you use Axios versus Fetch? The fact is that you don't have to call .json and all that stuff, it just sends the data as you would expect.

[00:13:14]
And then also error handling, you don't have to check if its response code is 200. You can just do a .catch and grab any errors.
>> Brian Holt: It's a little bit more baked than, it does a lot more for you than fetch does. In particular, for this workshop, the reason why I chose is that Axios is very easy to test.

[00:13:35]
And so we're gonna be using that capability later. Whereas with fetch you need to do a little bit mocking on your part. So that's why I chose Axios. And again, I've been using Axios for years at this point.
>> Brian Holt: Cool.
>> Brian Holt: So now we have that coming back from the API.

[00:14:02]

>> Brian Holt: So what I'm gonna do here is, underneath here we're gonna say, let ratingComponent, and then we're gonna say, if this.state.apiData.rating. So if we have gotten this back from the API, then ratingComponent is going to be equal to an h3 with that rating, so it's gonna be this.state.apiData.rating.

[00:14:37]
Else,
>> Brian Holt: Rating component is going to be equal to our Spinner.
>> Brian Holt: So again coming back, you wanna think about your components in snapshots. So given the snapshot that the API data has come back, it's gonna be equal to this h3 right here. Given the snapshot that it has not come back from the API, it's gonna be this loading state, right?

[00:15:12]

>> Brian Holt: Okay, and then what we're gonna do is we're going to put that between year and poster. So right here, and we're gonna say ratingComponent.
>> Brian Holt: Cool.
>> Brian Holt: So if we come back here,
>> Brian Holt: And we go to one of our Details page. Notice we get this nice little Spinner right there, and then eventually resolves and gives us back a rating.

[00:15:45]

>> Brian Holt: So again, what that looks like,
>> Brian Holt: I haven’t introduced an artificial delay cuz it was coming back too fast, so it's gonna come back between like zero and five seconds. So that’s why it seems slow.
>> Brian Holt: In fact, if you look at that code ratings API,
>> Brian Holt: You see it's just generating a random timeout right there for five seconds.

[00:16:11]
So that's why it seems slow, it's because it's intentionally slow.
>> Brian Holt: Any questions? Yeah?
>> Speaker 2: Yeah, just a general question about components. So, in that it fells, I just wanna make sure I understand. So, we could capitalize the rating component and then call it as a, like in the [INAUDIBLE].

[00:16:35]

>> Brian Holt: So, if you wanted to do that what you'll have to do is ratingComponent like this right, then you would have to make it a function.
>> Speaker 2: Okay.
>> Brian Holt: And then here you would say rating component like that right? The same thing for the one up there, that's a bad idea, don't do that.

[00:16:54]
The reason why is you'd be creating components, you'll be creating functions rather on every render which is slow, right? That's why we didn't do dot buying, too before inside of the render body. You don't want me generating and destroying things on every render cuz that's a lot of garbage clash that you don't wanna go through.

[00:17:11]
Does that make sense? Cool. It's a good question. So I don't know. I think this is pretty amazing. It just makes doing things like,
>> Brian Holt: Requesting stuff from APIs and asynchronous data. Like thinking about things in terms of snapshots it just really makes sense for me, right? Given this data it looks like this, right?

[00:17:33]
Before it gets stuff from the API it looks like this. After it gets stuff from the API it looks like this. There's no imperative like grab this thing and change its inner HTML and then make sure later that it has changed. I don't know, it's crazy,like having the components just keep track of their state and then just referencing the state makes a lot of sense to me personally.

