WEBVTT

1
00:00:00.080 --> 00:00:02.494
&gt;&gt; Brian Holt: We still haven't
closed the loop here so

2
00:00:02.494 --> 00:00:06.757
we actually need to go make details
actually do all of this stuff for us.

3
00:00:06.757 --> 00:00:09.311
So go to details.JSX.

4
00:00:14.211 --> 00:00:16.755
&gt;&gt; Brian Holt: So the first thing we're
gonna need to up here is we're going to

5
00:00:16.755 --> 00:00:22.241
import,
&gt;&gt; Brian Holt: You're gonna get rid

6
00:00:22.241 --> 00:00:28.261
of Axios up here and we're gonna import,

7
00:00:28.261 --> 00:00:32.226
connect from react redux.

8
00:00:33.921 --> 00:00:35.861
&gt;&gt; Brian Holt: And
we're going to import action creator.

9
00:00:35.861 --> 00:00:41.385
My notes are wrong here so
sorry, I'll fix that.

10
00:00:41.385 --> 00:00:47.017
Get API data from ./actionCreators.

11
00:00:54.585 --> 00:00:57.182
&gt;&gt; Brian Holt: Okay?
We're gonna get rid of the state

12
00:00:57.182 --> 00:01:01.514
here
&gt;&gt; Brian Holt: And

13
00:01:01.514 --> 00:01:06.696
instead of doing all this axios stuff and
component did mount,

14
00:01:06.696 --> 00:01:12.366
what we're gonna instead do is say
if I'm not getting ratings back,

15
00:01:12.366 --> 00:01:17.329
so if this.props.rating
&gt;&gt; Brian Holt: Then I

16
00:01:17.329 --> 00:01:22.179
needed to go request it so
you're gonna say this.props.getAPIData.

17
00:01:27.694 --> 00:01:29.704
&gt;&gt; Brian Holt: Cuz you have
to think of the case of,

18
00:01:29.704 --> 00:01:34.395
what happens if I click into Orange is the
New Black, go back to the search page, and

19
00:01:34.395 --> 00:01:36.760
then go back into Orange is the New Black?

20
00:01:36.760 --> 00:01:39.105
You don't need to request
the data a second time, right.

21
00:01:39.105 --> 00:01:41.672
So that's [INAUDIBLE]
component [INAUDIBLE] check.

22
00:01:41.672 --> 00:01:43.170
Do I already have data for this?

23
00:01:43.170 --> 00:01:44.562
If not, go request it.

24
00:01:44.562 --> 00:01:47.291
That's why we're doing this check up here.

25
00:01:53.910 --> 00:01:55.929
&gt;&gt; Brian Holt: Props for this,
we're going to get rating.

26
00:01:59.344 --> 00:02:03.794
&gt;&gt; Brian Holt: Which is going to be
a string, and we're also going to get

27
00:02:03.794 --> 00:02:08.456
a function called GetAPIData
which is going to be a function

28
00:02:16.063 --> 00:02:16.745
&gt;&gt; Brian Holt: Okay?

29
00:02:19.857 --> 00:02:22.412
&gt;&gt; Brian Holt: So everywhere that says,
this.state.apiData,

30
00:02:22.412 --> 00:02:24.152
we just need to modify it so it says,

31
00:02:24.152 --> 00:02:27.879
this.props cuz it's gonna be coming
from props, not from state anymore.

32
00:02:31.450 --> 00:02:32.894
&gt;&gt; Brian Holt: And I modified that.

33
00:02:32.894 --> 00:02:36.970
So yeah, not API data,
just this.props.rating.

34
00:02:40.039 --> 00:02:44.566
&gt;&gt; Brian Holt: Right, so if
this.props.rating, then put it out there,

35
00:02:44.566 --> 00:02:47.780
otherwise, put out the loading spinner.

36
00:02:52.656 --> 00:02:59.840
&gt;&gt; Brian Holt: Okay, then at the bottom
we're gonna make our map state to props,

37
00:02:59.840 --> 00:03:04.845
so const mapStateToProps equals (state),

38
00:03:04.845 --> 00:03:08.711
which is going to return an object.

39
00:03:08.711 --> 00:03:10.510
Yeah, let's actually make
that a full function.

40
00:03:10.510 --> 00:03:12.426
I think this is more clear
if we do it this way.

41
00:03:12.426 --> 00:03:21.025
I'm going to say const
apiData = state.apiData.

42
00:03:23.797 --> 00:03:27.246
&gt;&gt; Brian Holt: We have to get
ownProps as well don't we?

43
00:03:27.246 --> 00:03:31.943
So secretly mapStateToProps,
there's a second parameter in here called

44
00:03:31.943 --> 00:03:36.576
ownProps which is gonna be the props
passed down from the parent, right?

45
00:03:36.576 --> 00:03:40.429
And we need this because that's how we're
going to determine which API data we're

46
00:03:40.429 --> 00:03:43.690
going to pull out of our redux store
right so that's what ownProps is.

47
00:03:43.690 --> 00:03:47.940
So if you look up here ownProps we're
going to be getting the show from

48
00:03:47.940 --> 00:03:49.274
the parent, right?

49
00:03:49.274 --> 00:03:52.691
So we're going to use the show coming from
the parent to determine which API data

50
00:03:52.691 --> 00:03:54.484
we're gonna pull out of our redux store.

51
00:03:59.081 --> 00:04:06.976
&gt;&gt; Brian Holt: Okay, so we're gonna do
here is [ownProps.show.imdbID], right.

52
00:04:06.976 --> 00:04:10.552
That's where that show is coming from.

53
00:04:10.552 --> 00:04:15.846
So if that exist then return that, right?

54
00:04:20.339 --> 00:04:23.185
&gt;&gt; Brian Holt: If you're not familiar
with this, this question mark,

55
00:04:23.185 --> 00:04:26.348
we're doing what's called
a ternary operator here, right?

56
00:04:28.837 --> 00:04:33.102
&gt;&gt; Brian Holt: So if this is true
do this first thing otherwise,

57
00:04:33.102 --> 00:04:37.589
after the colon here,
do the other thing, right?

58
00:04:37.589 --> 00:04:42.158
So if this, if I have API data for
this particular show,

59
00:04:42.158 --> 00:04:46.935
return that API data,
otherwise, return empty object.

60
00:04:46.935 --> 00:04:49.909
You could totally write
this out as a IF statement.

61
00:04:49.909 --> 00:04:51.776
I am 100% okay with that.

62
00:04:56.800 --> 00:05:01.734
&gt;&gt; Brian Holt: And then were going to
return down here an object with rating

63
00:05:01.734 --> 00:05:04.011
colon API data dot rating.

64
00:05:09.654 --> 00:05:11.447
&gt;&gt; Brian Holt: Oops,
I don't need that semicolon.

65
00:05:11.447 --> 00:05:13.831
So if it's this empty object,

66
00:05:13.831 --> 00:05:18.518
then the rating is going to be undefined,
and that's fine.

67
00:05:21.943 --> 00:05:23.849
&gt;&gt; Brian Holt: If you want
it to be empty string,

68
00:05:23.849 --> 00:05:26.854
you could totally just do this as well,
either way.

69
00:05:36.759 --> 00:05:41.504
&gt;&gt; Brian Holt: Okay,
now we need a map dispatched to props, so

70
00:05:41.504 --> 00:05:46.616
we're going to say,
const mapDispatchToProps.

71
00:05:46.616 --> 00:05:50.508
It's going to take in dispatch,

72
00:05:50.508 --> 00:05:54.267
which is going to be a function.

73
00:05:54.267 --> 00:05:57.565
And it's also going to take
in the ownProps as well.

74
00:05:57.565 --> 00:06:04.681
And it's going to return this object
with the function on it, get API data.

75
00:06:04.681 --> 00:06:11.498
Which takes in nothing, that's fine.

76
00:06:11.498 --> 00:06:15.377
And you're going to

77
00:06:15.377 --> 00:06:20.399
dispatch getAPIData with

78
00:06:20.399 --> 00:06:25.882
ownProps.show.imbdID.

79
00:06:25.882 --> 00:06:32.064
So if you call this function,
it's gonna say, Okay, what show are you?.

80
00:06:32.064 --> 00:06:36.892
And it's gonna grab that show, it's gonna
take that imdbID and throw that out to

81
00:06:36.892 --> 00:06:41.659
the thunk which is gonna take care of all
the data requesting behind the scenes.

82
00:06:41.659 --> 00:06:44.872
Then down here at the bottom,
we're gonna say connect.

83
00:06:49.028 --> 00:06:53.521
&gt;&gt; Brian Holt: Map dispatch or map state
to props, and then map dispatch to props.

84
00:06:57.237 --> 00:06:59.836
&gt;&gt; Brian Holt: But
now we should be able to save this,

85
00:06:59.836 --> 00:07:05.967
go over to application
&gt;&gt; Brian Holt: And

86
00:07:05.967 --> 00:07:09.450
oops that is large,
let's go back to normal.

87
00:07:09.450 --> 00:07:13.825
So I'll refresh the page,
let's open our redux tools so

88
00:07:13.825 --> 00:07:16.568
we can see what's happening here.

89
00:07:16.568 --> 00:07:18.626
So if I click into billions

90
00:07:25.257 --> 00:07:27.613
&gt;&gt; Brian Holt: Am I getting an error here?

91
00:07:27.613 --> 00:07:30.552
&gt;&gt; Speaker 2: It's supposed
to be add api data.

92
00:07:30.552 --> 00:07:35.740
&gt;&gt; Brian Holt: Add api, no, you wanna
get api details, that's what it is.

93
00:07:35.740 --> 00:07:41.580
So details getAPIDetails.

94
00:07:44.843 --> 00:07:47.919
&gt;&gt; Brian Holt: And then down here,
we're going to call this getAPIDetails.

95
00:07:51.356 --> 00:07:52.795
&gt;&gt; Brian Holt: Yep, okay.

96
00:07:56.118 --> 00:08:00.158
&gt;&gt; Brian Holt: So, just to recap we
changed this to getAPIDetails cuz that's

97
00:08:00.158 --> 00:08:01.997
what I called the function.

98
00:08:01.997 --> 00:08:04.798
Inside of action creators.

99
00:08:04.798 --> 00:08:07.850
And then down here, I just change
that as well, to be getAPIDetails.

100
00:08:10.357 --> 00:08:11.774
&gt;&gt; Brian Holt: Okay,
now if we go back over here.

101
00:08:15.721 --> 00:08:16.627
&gt;&gt; Brian Holt: Let's go into Redux.

102
00:08:18.589 --> 00:08:21.248
&gt;&gt; Brian Holt: We can see
what has happened here.

103
00:08:21.248 --> 00:08:24.758
We can see that
an ADD_API_DATA Action was called and

104
00:08:24.758 --> 00:08:28.503
we were able to get this payload
which was billions right.

105
00:08:28.503 --> 00:08:31.320
Well now what's really
cool if I go back and

106
00:08:31.320 --> 00:08:36.485
then I click on billions again notice that
I will not get the loading spinner and

107
00:08:36.485 --> 00:08:39.553
it's just gonna instantly
load that rating.

108
00:08:39.553 --> 00:08:41.526
Cuz it already has it in the store

109
00:08:52.149 --> 00:08:53.567
&gt;&gt; Brian Holt: So same thing.

110
00:08:53.567 --> 00:08:58.420
If you're go into Atlanta,
&gt;&gt; Brian Holt: First time I made

111
00:08:58.420 --> 00:09:01.430
the request, you can see the request
down here in our explorer.

112
00:09:03.662 --> 00:09:07.232
&gt;&gt; Brian Holt: So,
&gt;&gt; Brian Holt: That one,

113
00:09:07.232 --> 00:09:11.740
and [COUGH] now if we go back, click
into Atlanta, it's still gonna be there.

114
00:09:11.740 --> 00:09:14.712
And the same thing if we go back
to Billions, still there, right?

115
00:09:14.712 --> 00:09:20.308
But if I refresh, notice on the first
time, it's gonna make that request, so.

