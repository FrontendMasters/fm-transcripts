WEBVTT

1
00:00:00.280 --> 00:00:03.860
&gt;&gt; Brian Holt: Now, we wanna go make
search use this as well, right?

2
00:00:03.860 --> 00:00:10.115
So go back to search.jsx,
and we have this input here.

3
00:00:10.115 --> 00:00:16.117
And first thing I'm gonna do is I'm
just gonna pull this input out,

4
00:00:16.117 --> 00:00:19.000
and go back to header.

5
00:00:19.000 --> 00:00:23.701
So if utilSpace does wanna use the input
then it's gonna look like the one that we

6
00:00:23.701 --> 00:00:24.412
had there.

7
00:00:29.327 --> 00:00:32.397
&gt;&gt; Brian Holt: So
it's gonna be a bit of a problem for

8
00:00:32.397 --> 00:00:39.097
us because,
&gt;&gt; Brian Holt: HandleSearchTerm

9
00:00:39.097 --> 00:00:40.407
doesn't happen in header.

10
00:00:40.407 --> 00:00:43.730
In fact, header has no concept of
what handling of search term is.

11
00:00:43.730 --> 00:00:46.451
It doesn't keep track of it and
that's not important in header, right?

12
00:00:49.497 --> 00:00:53.920
&gt;&gt; Brian Holt: So we need,
&gt;&gt; Brian Holt: Let's go ahead and

13
00:00:53.920 --> 00:00:57.182
just pull that out and say,
Header right, import Header up here.

14
00:00:57.182 --> 00:01:05.629
Import Header from ./Header.

15
00:01:05.629 --> 00:01:09.350
And the first thing I wanna say is
showSearchTerm or showSearch, right?

16
00:01:12.700 --> 00:01:16.216
But the problem is the input that modifies

17
00:01:16.216 --> 00:01:21.048
this search term right here
lives in Header now, right?

18
00:01:21.048 --> 00:01:25.108
So we kinda have this problem because it's
not like Header can reach up to the parent

19
00:01:25.108 --> 00:01:26.222
and modify its state.

20
00:01:26.222 --> 00:01:31.413
We talked about that right only
a component can modify its own state.

21
00:01:31.413 --> 00:01:33.438
This is kind of a problem, right?

22
00:01:33.438 --> 00:01:35.327
Because we have this
encapsulation of state and

23
00:01:35.327 --> 00:01:37.380
encapsulation is a good thing, right?

24
00:01:37.380 --> 00:01:40.770
Knowing where state gets modified
is a big part of debugging.

25
00:01:40.770 --> 00:01:44.810
But sometimes other things need
to modify each other, right?

26
00:01:44.810 --> 00:01:47.300
Well, there's kind of this
escape hatch that you

27
00:01:47.300 --> 00:01:49.270
have this handleSearchTermChange, right?

28
00:01:49.270 --> 00:01:51.470
This already exists.

29
00:01:51.470 --> 00:01:54.170
Why can't we just pass
that down to the child?

30
00:01:54.170 --> 00:02:01.124
So we can just say handleSearchTermChange
= this.handleSearchTermChange.

31
00:02:08.975 --> 00:02:12.328
&gt;&gt; Brian Holt: So now we're passing
this function down into the child, and

32
00:02:12.328 --> 00:02:16.933
now the child has a function called
this.props.handleSearchTermChange that it

33
00:02:16.933 --> 00:02:19.513
can call with whatever is happening,
right?

34
00:02:24.734 --> 00:02:27.667
&gt;&gt; Brian Holt: The other thing that
it's gonna need as well because

35
00:02:27.667 --> 00:02:32.066
it needs to display the search terms it's
gonna also have to have searchTerm =

36
00:02:32.066 --> 00:02:33.746
this.state.searchTerm.

37
00:02:38.178 --> 00:02:40.308
&gt;&gt; Brian Holt: So
can I make this multiple lines?

38
00:02:40.308 --> 00:02:42.183
Because it's getting hard to read.

39
00:02:47.040 --> 00:02:48.917
&gt;&gt; Brian Holt: Nope,
won't let me, thanks prettier.

40
00:02:53.429 --> 00:02:56.525
&gt;&gt; Brian Holt: Right, so we're gonna be
passing these things down into header so

41
00:02:56.525 --> 00:02:58.692
then headers gonna know
what to do with these.

42
00:02:59.959 --> 00:03:01.170
&gt;&gt; Brian Holt: So,
come back down to header.

43
00:03:02.170 --> 00:03:06.810
And now we have a couple more props coming
in which are gonna be all maybe types.

44
00:03:06.810 --> 00:03:08.910
So handleSearchTermChange?

45
00:03:08.910 --> 00:03:12.820
Is going to be a capital F Function.

46
00:03:14.400 --> 00:03:18.864
The reason it's not lower case f function
is because that's a key word, right?

47
00:03:20.060 --> 00:03:22.920
So they use capital F to get around that.

48
00:03:22.920 --> 00:03:26.000
And then searchTerm?

49
00:03:26.000 --> 00:03:27.412
Is going to be a string.

50
00:03:30.843 --> 00:03:34.786
&gt;&gt; Brian Holt: I'm gonna come down
here to the default props and

51
00:03:34.786 --> 00:03:39.499
handle SearchTermChange is just
gonna be by default a noop

52
00:03:39.499 --> 00:03:45.176
function
&gt;&gt; Brian Holt: And

53
00:03:45.176 --> 00:03:48.870
search term, if nothing is provided,
is going to be an empty string.

54
00:03:48.870 --> 00:03:51.274
These are actually not
really super important,

55
00:03:51.274 --> 00:03:54.330
because we're not going to be
careful to not read from these.

56
00:03:54.330 --> 00:03:57.615
But this is just further guarding
yourself against runtime errors.

57
00:04:00.711 --> 00:04:02.182
&gt;&gt; Brian Holt: It's also
required by the linters, so

58
00:04:02.182 --> 00:04:03.883
that's we're placating the linting gods.

59
00:04:07.573 --> 00:04:08.502
&gt;&gt; Brian Holt: Okay, so

60
00:04:08.502 --> 00:04:15.306
now this input
onChange={this.props.handleSearchTermChan-

61
00:04:15.306 --> 00:04:15.834
ge}.

62
00:04:15.834 --> 00:04:21.653
And values is not going to be this.state,
it's going to be this.props.searchTerm.

63
00:04:37.725 --> 00:04:39.476
&gt;&gt; Brian Holt: I think those are right,

64
00:04:39.476 --> 00:04:44.767
let's just run our yarn flow make
sure that's correct, no it's not.

65
00:04:44.767 --> 00:04:47.845
Right, the reason why it's
not this anymore right?

66
00:04:47.845 --> 00:04:52.685
Because header is a functional component
it's not this.props, it's just props.

67
00:05:02.883 --> 00:05:05.470
&gt;&gt; Brian Holt: Okay,
now all of the linting gods are happy.

68
00:05:08.078 --> 00:05:11.663
&gt;&gt; Brian Holt: And so
now if we go back to here, and

69
00:05:11.663 --> 00:05:15.880
go back just a hard refresh to make sure.

70
00:05:15.880 --> 00:05:19.020
If I type black in here it's
still doing our searching, right?

71
00:05:19.020 --> 00:05:23.510
So this is the way that you have child and
parent components interact with each

72
00:05:23.510 --> 00:05:28.520
other is you pass functions up and
down, well just down really, right?

73
00:05:28.520 --> 00:05:34.260
So the child has to let the parent
know hey, parent, I had an event.

74
00:05:34.260 --> 00:05:38.120
This happened but the cool thing
is if you go up to here to search,

75
00:05:38.120 --> 00:05:40.340
search is still in charge
of it's own destiny, right?

76
00:05:40.340 --> 00:05:43.160
There's nothing from stopping me
from saying like, you know what?

77
00:05:43.160 --> 00:05:44.760
I'm not gonna handle that event, right?

78
00:05:44.760 --> 00:05:47.970
So the parent is still responsible for
modifying it's own state.

79
00:05:47.970 --> 00:05:51.570
It's just the child is reaching up and
saying this happened.

80
00:05:51.570 --> 00:05:52.533
Now it's your problem right?

81
00:05:56.631 --> 00:05:57.961
&gt;&gt; Brian Holt: Any questions about that?

82
00:05:57.961 --> 00:05:58.981
&gt;&gt; Speaker 2: Can you click on the Header?

83
00:05:58.981 --> 00:06:03.394
&gt;&gt; Brian Holt: Yeah, sure, I'll push
a branch right here momentarily as well.

84
00:06:07.805 --> 00:06:09.191
&gt;&gt; Brian Holt: It's worth
talking about this as well,

85
00:06:09.191 --> 00:06:10.560
this if statement right here.

86
00:06:10.560 --> 00:06:13.462
This is kind of the way
that you do conditionals.

87
00:06:13.462 --> 00:06:15.460
Conditionally showing and hiding things.

88
00:06:15.460 --> 00:06:18.600
You just create a variable,
in this case I called it utilSpace, right?

89
00:06:19.670 --> 00:06:24.590
If I'm gonna show search then put this
input there, if not show the back button.

90
00:06:25.750 --> 00:06:29.230
You can get clever with turn areas, I do
not like getting clever with turn areas.

91
00:06:29.230 --> 00:06:30.900
So that's why I do not do it, right?

92
00:06:30.900 --> 00:06:37.800
I could do something
like props.showSearch,

93
00:06:37.800 --> 00:06:43.664
and then, if than then h1 showSearch,

94
00:06:43.664 --> 00:06:49.191
else h2 don't show search, right?

95
00:06:53.213 --> 00:06:56.154
&gt;&gt; Brian Holt: This would work as well,
right?

96
00:06:56.154 --> 00:06:59.009
Some people like it,
it's just I don't like it at all.

97
00:07:06.807 --> 00:07:07.761
&gt;&gt; Brian Holt: There's an upcoming

98
00:07:07.761 --> 00:07:13.825
JavaScript
&gt;&gt; Brian Holt: Feature

99
00:07:13.825 --> 00:07:15.393
called do expressions,

100
00:07:15.393 --> 00:07:20.810
which we're not gonna go over since it's
like stage one or something like that.

101
00:07:20.810 --> 00:07:22.870
But this would solve a lot
of this stuff as well.

102
00:07:22.870 --> 00:07:28.904
Basically, the idea is you could say
inside of here, do, something like that.

103
00:07:28.904 --> 00:07:33.028
And then you can actually
write a block of code in here.

104
00:07:33.028 --> 00:07:37.751
And you can do the conditionals
in line that way.

105
00:07:37.751 --> 00:07:41.372
Again, I think it will
look something like this,

106
00:07:41.372 --> 00:07:48.560
if (props.showSearch),
&gt;&gt; Brian Holt: Then

107
00:07:48.560 --> 00:07:53.430
h1 here,
&gt;&gt; Brian Holt: Else,

108
00:07:55.967 --> 00:07:59.969
&gt;&gt; Brian Holt: H2 show this, right?

109
00:07:59.969 --> 00:08:01.780
This is what it would look
like with the do expression.

110
00:08:02.900 --> 00:08:06.408
It looks weird right, but
anyway, that's the way it works.

111
00:08:11.394 --> 00:08:13.260
&gt;&gt; Brian Holt: You can ask
yourself if you like that better.

112
00:08:13.260 --> 00:08:13.950
I'm not sure I do.

113
00:08:17.250 --> 00:08:19.900
I like this as well because it's
explicit at the top you can say,

114
00:08:19.900 --> 00:08:21.380
I have this utilSpace.

115
00:08:21.380 --> 00:08:25.040
And when I'm reading this down here
it's like okay, either this or

116
00:08:25.040 --> 00:08:26.727
this is gonna show up down there.

117
00:08:26.727 --> 00:08:28.280
So up to you.

