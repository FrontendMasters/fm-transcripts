WEBVTT

1
00:00:00.027 --> 00:00:04.625
&gt;&gt; Brian Holt: The next thing I'm gonna
need you to do is open .babel.rc.

2
00:00:07.720 --> 00:00:10.720
&gt;&gt; Brian Holt: If you remember,
we're using import everywhere,

3
00:00:10.720 --> 00:00:12.571
the ES6 module system in Node.

4
00:00:12.571 --> 00:00:16.748
We're gonna have to translate that so Node
knows how to understand it because Node

5
00:00:16.748 --> 00:00:19.361
still does not know how to do ES6 modules,
right.

6
00:00:19.361 --> 00:00:22.595
So we´re gonna have to give
it another env here and

7
00:00:22.595 --> 00:00:25.292
it´s gonna actually be the same as test.

8
00:00:25.292 --> 00:00:27.236
That´s not always gonna be the case,

9
00:00:27.236 --> 00:00:31.369
it´s probably often gonna be the case,
but we´re gonna make another one called

10
00:00:31.369 --> 00:00:36.683
server,
&gt;&gt; Brian Holt: That's

11
00:00:36.683 --> 00:00:41.403
gonna have plugins,
&gt;&gt; Brian Holt: And

12
00:00:41.403 --> 00:00:46.829
it's gonna have the same
transform-es2015-modules-commonjs.

13
00:00:49.264 --> 00:00:51.244
&gt;&gt; Brian Holt: Again,
you could make these the same env.

14
00:00:52.906 --> 00:00:54.819
&gt;&gt; Brian Holt: They're different concerns,
right?

15
00:00:54.819 --> 00:00:57.908
What goes into test is not necessarily
gonna be what goes into the server

16
00:00:57.908 --> 00:01:02.186
but,
&gt;&gt; Brian Holt: So I recommend against

17
00:01:02.186 --> 00:01:07.132
doing that, despite the fact
that it'd be impossible, okay?

18
00:01:07.132 --> 00:01:11.127
So,
&gt;&gt; Brian Holt: From here I want you to

19
00:01:11.127 --> 00:01:14.509
create a new file,
it's going to be called server.js.

20
00:01:14.509 --> 00:01:18.425
It's going to be outside of the JS
directory cuz everything in the JS

21
00:01:18.425 --> 00:01:20.083
directory is our React app.

22
00:01:20.083 --> 00:01:23.320
This is going to be in the top level,
this is going to be our node server.

23
00:01:26.411 --> 00:01:31.045
&gt;&gt; Brian Holt: And this is just gonna be
a lot of code all at once because you need

24
00:01:31.045 --> 00:01:34.375
all of it for it to work,
so just bear with me.

25
00:01:34.375 --> 00:01:38.677
First thing I'm gonna do
is I'm gonna use some

26
00:01:38.677 --> 00:01:42.661
console logging in here and that's okay.

27
00:01:42.661 --> 00:01:47.853
So no-console: 0, this is turning
off the no console warning for

28
00:01:47.853 --> 00:01:49.684
this particular file.

29
00:01:49.684 --> 00:01:53.939
First thing we're gonna do up
here is require babel-register.

30
00:01:56.018 --> 00:01:58.207
&gt;&gt; Brian Holt: There's
a couple ways you can do this.

31
00:01:58.207 --> 00:02:03.404
I'm using babel-register, which means
everything in this file itself will not be

32
00:02:03.404 --> 00:02:08.465
transpiled, so I can't use JSX or anything
that Node doesn't understand here.

33
00:02:08.465 --> 00:02:11.721
But everything that it requires
will be run through Babel.

34
00:02:11.721 --> 00:02:17.617
So when I require my app, it can use jsx,
it can use es, like future es stuff.

35
00:02:17.617 --> 00:02:20.427
All that's fine and
that's what babel-register does for you.

36
00:02:20.427 --> 00:02:23.797
It's kind of hooking into that require and
running in all through Babel.

37
00:02:23.797 --> 00:02:27.628
There's another thing called
babel-node that will actually compile

38
00:02:27.628 --> 00:02:31.211
the file that's being run as well and
you're welcome to use that.

39
00:02:31.211 --> 00:02:32.195
It's kind of up to you.

40
00:02:34.840 --> 00:02:38.932
&gt;&gt; Brian Holt: So
let's just require a bunch of stuff now.

41
00:02:38.932 --> 00:02:44.018
So const express = require('express').

42
00:02:49.340 --> 00:02:51.985
&gt;&gt; Brian Holt: const React
= require ('react').

43
00:02:54.145 --> 00:03:01.620
&gt;&gt; Brian Holt: const ReactDOMServer,
&gt;&gt; Brian Holt: = require

44
00:03:01.620 --> 00:03:06.821
('react-dom/server').

45
00:03:06.821 --> 00:03:11.772
const ReactRouter = require

46
00:03:11.772 --> 00:03:16.925
(react-router-dom').

47
00:03:16.925 --> 00:03:23.484
const _ = require ('lodash').

48
00:03:23.484 --> 00:03:28.457
Const fs = require ('fs').

49
00:03:28.457 --> 00:03:33.351
And const App = require

50
00:03:33.351 --> 00:03:38.494
('./js/app').

51
00:03:38.494 --> 00:03:40.446
And something you're
going to have to do here.

52
00:03:40.446 --> 00:03:45.502
If you recall we're using ES6 modules,
so when that get's translated to

53
00:03:45.502 --> 00:03:50.488
being a required common js module,
remember we export default, right?

54
00:03:50.488 --> 00:03:54.658
So you're going to have to say .default,
that's just what you have to do there.

55
00:03:56.855 --> 00:04:00.444
&gt;&gt; Brian Holt: Cuz this is going to return
to an object with one key in it and

56
00:04:00.444 --> 00:04:02.878
the one key in it is going to be default.

57
00:04:02.878 --> 00:04:06.542
And hence you have pull
the default part off of it.

58
00:04:06.542 --> 00:04:11.799
Okay, from here we're gonna pull out

59
00:04:11.799 --> 00:04:19.367
const StaticRouter =
ReactRouter.StaticRouter.

60
00:04:23.814 --> 00:04:26.950
&gt;&gt; Brian Holt: This StaticRouter is going
to be what we're going to use to replace

61
00:04:26.950 --> 00:04:27.791
BrowserRouter.

62
00:04:27.791 --> 00:04:32.192
This works in Node.

63
00:04:32.192 --> 00:04:36.312
Okay, const port, you can put
this in whatever port suits you.

64
00:04:36.312 --> 00:04:37.701
I'm gonna put it on 8080.

65
00:04:42.127 --> 00:04:46.332
&gt;&gt; Brian Holt: const baseTemplate,
this is going to be our index.html file.

66
00:04:46.332 --> 00:04:53.276
It is going to be equal
to fs.readFileSync('

67
00:04:53.276 --> 00:04:56.929
./index.html').

68
00:05:01.556 --> 00:05:06.664
&gt;&gt; Brian Holt: So just so you're aware,
this is definitely not a Node course,

69
00:05:06.664 --> 00:05:11.880
but readFileSync is going to read
this file from the file system.

70
00:05:11.880 --> 00:05:14.386
And it's going to pause until
it is finished reading.

71
00:05:14.386 --> 00:05:19.118
This is typically a horrible idea,
however, on startup it's okay, right,

72
00:05:19.118 --> 00:05:21.140
cuz this is going to be read once.

73
00:05:21.140 --> 00:05:25.442
If you're doing readFileSync at every
request you're gonna have a bad time for

74
00:05:25.442 --> 00:05:26.801
sure, so just be aware.

75
00:05:26.801 --> 00:05:30.331
Typically you would do here is readFile,
right, and

76
00:05:30.331 --> 00:05:34.888
then you would provide it a callback
once it was finished reading it.

77
00:05:34.888 --> 00:05:38.282
But here we can do sync, since this
is gonna be done once on startup, and

78
00:05:38.282 --> 00:05:39.427
that's totally fine.

79
00:05:44.143 --> 00:05:50.973
&gt;&gt; Brian Holt: const template
= _.template(baseTemplate).

80
00:05:50.973 --> 00:05:56.047
What template is going to be now is
a function that when we invoke it, we

81
00:05:56.047 --> 00:06:02.082
pass in body and we're going to get back
our markup inside of the index.html file.

82
00:06:02.082 --> 00:06:03.178
So this is a function.

83
00:06:06.922 --> 00:06:09.964
&gt;&gt; Brian Holt: Okay, that should be
enough kind of set up for ourselves.

84
00:06:09.964 --> 00:06:17.610
And now we're gonna say
const server = express().

85
00:06:17.610 --> 00:06:23.663
Again, you can do this with
any different Node server.

86
00:06:23.663 --> 00:06:27.902
We could use Restify,
we could use Happy, we could use Kula.

87
00:06:27.902 --> 00:06:34.713
I am just using Express because it's very
simple and it suits our needs for today.

88
00:06:34.713 --> 00:06:39.622
And the first thing we´re gonna do here

89
00:06:39.622 --> 00:06:44.382
is say server.use('/public',

90
00:06:44.382 --> 00:06:49.896
express.static ('./public')).

91
00:06:49.896 --> 00:06:54.295
This is just saying statically serve
everything that's in the public directory.

92
00:06:54.295 --> 00:06:57.870
So that's all our CSS,
that'll be our bundle.js,

93
00:06:57.870 --> 00:07:00.899
that will be all that stuff,
all the images.

94
00:07:00.899 --> 00:07:05.364
It'll also put all the correct mime
types and all that kind of stuff for

95
00:07:05.364 --> 00:07:08.929
us because that's really
annoying to write yourself.

96
00:07:08.929 --> 00:07:14.848
Okay and then after that we're
gonna say server.use((rec, res) ).

97
00:07:14.848 --> 00:07:20.493
This is where we're going to be doing our
templating and all that kind of stuff.

98
00:07:22.946 --> 00:07:26.973
&gt;&gt; Brian Holt: So
I'll pull this up so you can see it.

99
00:07:26.973 --> 00:07:30.996
So the first thing we're gonna wanna
do is create a context object.

100
00:07:33.138 --> 00:07:35.421
&gt;&gt; Brian Holt: This is something that's
going to be passed to ReactRouter.

101
00:07:37.942 --> 00:07:42.058
&gt;&gt; Brian Holt: Gonna say const body =

102
00:07:42.058 --> 00:07:48.998
ReactDOMServer.renderToString.

103
00:07:48.998 --> 00:07:50.846
So you know how we use ReactDOM.render and

104
00:07:50.846 --> 00:07:52.963
then we tell it where to
put it in the DOM, right?

105
00:07:52.963 --> 00:07:56.447
This is replacing that,
instead of rendering out to as a DOM or

106
00:07:56.447 --> 00:08:01.142
something like that, it's just going to
give you back a string of the html, okay.

107
00:08:03.375 --> 00:08:07.277
&gt;&gt; Brian Holt: Then here,
remember that we're not in jsx land, so

108
00:08:07.277 --> 00:08:09.055
we can't use jsx here.

109
00:08:09.055 --> 00:08:13.308
So we're going to fall back to that
first set of skills that I taught you,

110
00:08:13.308 --> 00:08:16.466
very first thing,
of using React.createElement.

111
00:08:18.967 --> 00:08:20.644
&gt;&gt; Brian Holt: So
this should all look familiar to you.

112
00:08:20.644 --> 00:08:26.450
So React.createElement,
&gt;&gt; Brian Holt: And

113
00:08:26.450 --> 00:08:31.750
the first most outermost layer
is going to be the StaticRouter.

114
00:08:31.750 --> 00:08:35.423
And we're going to pass to
the StaticRouter the location,

115
00:08:35.423 --> 00:08:37.856
which is going to be rec.url, right?

116
00:08:37.856 --> 00:08:41.351
That's what the user
requested from the website.

117
00:08:41.351 --> 00:08:45.412
And we're going to pass to
it the context object, but

118
00:08:45.412 --> 00:08:51.382
if you remember context: context,
we can shorten that down to just context.

119
00:08:51.382 --> 00:08:55.243
But that's what that is, context: context.

120
00:08:55.243 --> 00:08:57.936
And then inside of that,

121
00:08:57.936 --> 00:09:03.595
we're gonna have React.createElement(App).

122
00:09:03.595 --> 00:09:06.513
And we don't need to give anything to App,
that's just fine, right?

123
00:09:06.513 --> 00:09:10.868
So it's gonna be a StaticRouter on
the outside, and App on the inside, and

124
00:09:10.868 --> 00:09:12.680
that's all that's gonna be.

125
00:09:12.680 --> 00:09:17.380
Okay, so now we're gonna get the string
which is gonna be here on body, right?

126
00:09:21.006 --> 00:09:25.682
&gt;&gt; Brian Holt: So the reason why we passed
in this context objects to ReactRouter

127
00:09:25.682 --> 00:09:29.519
is sometimes you're gonna get redirected,
right?

128
00:09:29.519 --> 00:09:32.673
Our app will never redirect, because
we never wrote any redirects, right?

129
00:09:32.673 --> 00:09:37.133
But if that happens, I wanted to show
you how that you would handle that.

130
00:09:37.133 --> 00:09:37.700
Oops.

131
00:09:39.546 --> 00:09:44.671
&gt;&gt; Brian Holt: So you're gonna say
if(context.url), so this is gonna say,

132
00:09:44.671 --> 00:09:50.463
ReactRouter is going to modify this
context object that you pass into it.

133
00:09:50.463 --> 00:09:54.808
If there's a redirect in here you can say,
res.redirect.

134
00:09:57.521 --> 00:10:01.873
&gt;&gt; Brian Holt: And you can put the status
on here if you want to, like 301 or

135
00:10:01.873 --> 00:10:04.816
302 depending on what you're doing.

136
00:10:04.816 --> 00:10:05.936
I'm just gonna leave it off for now.

137
00:10:05.936 --> 00:10:11.962
(context.url), I think it defaults
to 301 if I remember correctly.

138
00:10:11.962 --> 00:10:13.604
So that's how you do that.

139
00:10:13.604 --> 00:10:17.977
If there is a redirect, this will send
them off to wherever they need to go.

140
00:10:17.977 --> 00:10:23.570
Otherwise res.write(template({body:
body}),

141
00:10:23.570 --> 00:10:26.998
but again we can just put {body}.

142
00:10:29.681 --> 00:10:32.094
&gt;&gt; Brian Holt: And
then you're gonna say res.end.

143
00:10:40.173 --> 00:10:45.648
&gt;&gt; Brian Holt: So this is server-side
rendering with ReactRouter.

144
00:10:45.648 --> 00:10:49.904
What's amazing about this is we don't have
to duplicate our logic anymore, right?

145
00:10:49.904 --> 00:10:53.304
We get to write one set of route
definitions in the client and

146
00:10:53.304 --> 00:10:55.753
it's automatically sent to Node as well.

147
00:10:55.753 --> 00:10:58.176
So you have one source of truth.

148
00:11:01.616 --> 00:11:06.719
&gt;&gt; Brian Holt: Okay,
down here at the bottom we're gonna

149
00:11:06.719 --> 00:11:12.960
say console.log('listening on ${port}')

150
00:11:12.960 --> 00:11:19.493
to let it see into the console
that we're up and going.

151
00:11:19.493 --> 00:11:23.163
And then we're gonna say
server.listen(port).

152
00:11:25.827 --> 00:11:30.138
&gt;&gt; Brian Holt: If you want to,
you can say up here, console.log.

153
00:11:30.138 --> 00:11:33.946
Something I like to do is (req.url) so

154
00:11:33.946 --> 00:11:39.101
I can see requests coming in and
where they're going.

155
00:11:39.101 --> 00:11:42.505
And typically, you would have some sort of
like server logging framework like Morgan

156
00:11:42.505 --> 00:11:43.506
or something like that.

157
00:11:45.765 --> 00:11:48.473
&gt;&gt; Brian Holt: There's plenty of
great Node stuff on Frontend Masters.

158
00:11:48.473 --> 00:11:51.480
So if that's interesting to you,
go down that path.

