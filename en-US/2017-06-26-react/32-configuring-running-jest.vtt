WEBVTT

1
00:00:00.213 --> 00:00:02.328
&gt;&gt; Brian Holt: Now we have this test,
so how do we run it?

2
00:00:02.328 --> 00:00:06.143
Let's go back to your
command line really quick.

3
00:00:06.143 --> 00:00:09.041
I have webpack running, but
you don't have to have it running,

4
00:00:09.041 --> 00:00:10.824
I'm just gonna leave it cuz I'm lazy.

5
00:00:10.824 --> 00:00:14.063
Okay, and then what we're gonna do,

6
00:00:14.063 --> 00:00:19.442
we're gonna say ./node_modules/.bin/jest,
right?

7
00:00:19.442 --> 00:00:23.874
Or if you have Jest globally
installed you can do that too.

8
00:00:23.874 --> 00:00:30.977
So if I run that, it's automatically
going to find search.spec.jsx,

9
00:00:30.977 --> 00:00:36.945
and then it's going to fail
because it doesn't know import.

10
00:00:36.945 --> 00:00:38.018
That's right.

11
00:00:38.018 --> 00:00:42.590
And so let's go fix that too.

12
00:00:42.590 --> 00:00:48.390
So the problem is, if we go back here,
this is trying to be run in Node and

13
00:00:48.390 --> 00:00:52.090
Node doesn't know how to do import, right?

14
00:00:52.090 --> 00:00:55.657
We have kind of talked about that a little
bit yesterday that Node does not yet

15
00:00:55.657 --> 00:00:57.007
understand import syntax.

16
00:00:57.007 --> 00:00:59.100
And also, even if it did,
it would get here and

17
00:00:59.100 --> 00:01:01.591
it would throw up because
it doesn't understand JSX.

18
00:01:01.591 --> 00:01:06.349
So, now what we're gonna have to do,

19
00:01:06.349 --> 00:01:11.870
we're going to have to go to our babel.rc.

20
00:01:11.870 --> 00:01:14.402
So we're back here.

21
00:01:14.402 --> 00:01:18.855
We're going to have to add another
top level thing that's going to say,

22
00:01:18.855 --> 00:01:23.469
hey, when in the testing environment
you need to also transform modules.

23
00:01:23.469 --> 00:01:26.141
You're going to put an env up here,

24
00:01:26.141 --> 00:01:29.984
which by the way is different
from this env, okay.

25
00:01:29.984 --> 00:01:33.965
This is the babel preset env and
this is environmental,

26
00:01:33.965 --> 00:01:39.060
doing different transformations
based on environmental variables.

27
00:01:39.060 --> 00:01:40.808
That's what this env refers to.

28
00:01:43.854 --> 00:01:48.475
&gt;&gt; Brian Holt: Okay, and
we're saying when node env equals test,

29
00:01:48.475 --> 00:01:52.624
then, run this plugin,
that's what we're gonna do.

30
00:01:52.624 --> 00:01:54.159
So plugins.

31
00:01:56.823 --> 00:02:02.267
&gt;&gt; Brian Holt: And all we're gonna do,
the only additional

32
00:02:02.267 --> 00:02:07.282
plugin that we're gonna run is transform

33
00:02:07.282 --> 00:02:11.734
es2015-modules-commonjs.

34
00:02:18.038 --> 00:02:22.810
&gt;&gt; Brian Holt: Yeah I guess, anyway, it's
actually, technically this will work and

35
00:02:22.810 --> 00:02:26.969
you can also do babel-plugin if
you wanna be totally verbose.

36
00:02:26.969 --> 00:02:30.199
Like up here we did
transform class properties.

37
00:02:30.199 --> 00:02:34.535
If you omit the babel-plugin part,
so if we just did that,

38
00:02:34.535 --> 00:02:36.635
that will insert it for you.

39
00:02:36.635 --> 00:02:37.806
It's up to you.

40
00:02:37.806 --> 00:02:40.789
My notes here have both versions of it, so

41
00:02:40.789 --> 00:02:44.218
either way,
you don't have to be consistent.

42
00:02:44.218 --> 00:02:50.464
So we need to go add this
transform-es2015-modules-commonjs for

43
00:02:50.464 --> 00:02:53.190
the test environment, right?

44
00:02:53.190 --> 00:02:58.160
The reason we have to do this is that when
you're in the Node environment you have to

45
00:02:58.160 --> 00:03:03.654
transform-es2015-modules to commonjs or
Node's not gonna understand it right.

46
00:03:03.654 --> 00:03:08.967
So we're saying when node env equals test
we're gonna run this plugin right here.

47
00:03:08.967 --> 00:03:11.518
Keep in mind that's also going
to run everything up here.

48
00:03:11.518 --> 00:03:15.463
All of these ones up at the top,
it's always going to run 100% of the time.

49
00:03:15.463 --> 00:03:17.424
And it's also going to run this one.

50
00:03:17.424 --> 00:03:23.295
Oops, it's also going to run,
&gt;&gt; Brian Holt: This one.

51
00:03:23.295 --> 00:03:29.046
This babel-plugin
transform-es2015-modules-commonjs.

52
00:03:29.046 --> 00:03:37.038
It's also going to run this one
only in the test environment, okay?

53
00:03:37.038 --> 00:03:40.123
So save that.

54
00:03:40.123 --> 00:03:44.134
And now we're going to go
back to our command line.

55
00:03:44.134 --> 00:03:50.201
And we're gonna say, NODE_ENV=test.

56
00:03:50.201 --> 00:03:53.855
By the way this works for bash, so
if you're in something like fish,

57
00:03:53.855 --> 00:03:55.811
you have to do something different.

58
00:03:55.811 --> 00:03:58.840
I can show you for fish, I don't know how
to do it for zxs or any of the other ones.

59
00:03:58.840 --> 00:04:02.440
So anyway, we're gonna do

60
00:04:02.440 --> 00:04:09.020
./node_modules/.bin/jest, like that.

61
00:04:09.020 --> 00:04:14.102
So again this is for bash but
I'm assuming if you're using

62
00:04:14.102 --> 00:04:21.788
another shell that you're smart enough to
translate that into something else, okay?

63
00:04:21.788 --> 00:04:28.105
Now it's able to understand
what's going on.

64
00:04:28.105 --> 00:04:33.217
So let's talk about snapshots and
what we actually tested there, right?

65
00:04:33.217 --> 00:04:35.808
It's cuz what we did was pretty terse.

66
00:04:35.808 --> 00:04:41.577
So if we come back to our spec.jsx,
the search one,

67
00:04:41.577 --> 00:04:45.524
what we did is we brought in search.

68
00:04:45.524 --> 00:04:50.319
So this search component right here,
right, the one we wrote yesterday.

69
00:04:53.319 --> 00:04:57.646
&gt;&gt; Brian Holt: We then rendered it
out with no additional parameters,

70
00:04:57.646 --> 00:05:02.443
we then took that component and
we made it to a JSON structure.

71
00:05:02.443 --> 00:05:07.952
And then just as this fantastic ability
to do what's called snapshot testing.

72
00:05:07.952 --> 00:05:10.915
The first time you're on
jest snapshot testing,

73
00:05:10.915 --> 00:05:15.780
it's just going accept the first time that
you have run it as the correct version,

74
00:05:15.780 --> 00:05:20.245
then in the future, it's going to
test to see if that's changed, right?

75
00:05:20.245 --> 00:05:23.687
So, if you actually look inside
of your test directory now,

76
00:05:23.687 --> 00:05:26.058
there's actually this __snapshots.

77
00:05:26.058 --> 00:05:28.249
Take a look there and open it and

78
00:05:28.249 --> 00:05:32.729
you can see that there is
a search.spec.jsx.snap, right?

79
00:05:32.729 --> 00:05:37.001
And what you can see here is you can
see what it's actually rendering out.

80
00:05:39.698 --> 00:05:43.506
&gt;&gt; Brian Holt: So
you can it has a div up here, a header,

81
00:05:43.506 --> 00:05:47.320
an h1 input, all of this stuff up here.

82
00:05:47.320 --> 00:05:50.015
Which is really cool, right?

83
00:05:50.015 --> 00:05:55.782
Now if I go to back to search.spec.jsx,
sorry.

84
00:05:55.782 --> 00:05:58.953
What I meant is back to search.jsx.

85
00:05:58.953 --> 00:06:05.882
And I change this to be, I don't know,
something like, well here in the header.

86
00:06:05.882 --> 00:06:11.197
If I change this to be something else
in the h1 and I come back here and

87
00:06:11.197 --> 00:06:17.364
run this again, it's gonna fail my
test because something changed, right?

88
00:06:17.364 --> 00:06:22.460
It's gonna say, hey, this used to have
svideo and now you have something else.

89
00:06:22.460 --> 00:06:25.752
Your test now is failing
because something's changed.

90
00:06:25.752 --> 00:06:30.109
Now you might be telling yourself, well,
sometimes my markup changes, right,

91
00:06:30.109 --> 00:06:31.445
like I want it to change.

92
00:06:31.445 --> 00:06:36.127
The cool thing about this is it's
actually quite easy to update.

93
00:06:36.127 --> 00:06:41.339
So once I've seen it's like no I actually
do wanted to say something else,

94
00:06:41.339 --> 00:06:46.736
I just run jest again with -u, and
now it's going to go rewrite my snapshot.

95
00:06:46.736 --> 00:06:50.090
And so now when I run it again it's
going to pass right now because now I've

96
00:06:50.090 --> 00:06:51.398
accepted that as the truth.

97
00:06:51.398 --> 00:06:57.514
So again if you go back to your snap,
now it says something else in here.

98
00:06:57.514 --> 00:07:01.532
&gt;&gt; Speaker 2: I know a couple of us
are getting an unexpected token import

99
00:07:01.532 --> 00:07:05.395
after that update,
I'm sure other people are as well.

100
00:07:05.395 --> 00:07:10.683
&gt;&gt; Brian Holt: Sure, so
let's go look at our babel.rc again.

101
00:07:13.076 --> 00:07:18.243
&gt;&gt; Brian Holt: So you need this env thing
right here, right, down at the bottom,

102
00:07:18.243 --> 00:07:22.857
so that in the test environment
it's running this plugin,

103
00:07:22.857 --> 00:07:26.752
transform-es2015-modules-commonjs.

104
00:07:26.752 --> 00:07:29.830
What's cool about this is
this is not just for React.

105
00:07:29.830 --> 00:07:32.944
Well, obviously this is very
well-fitted for React, right,

106
00:07:32.944 --> 00:07:35.779
but you could totally do this
with API responses, right?

107
00:07:35.779 --> 00:07:39.465
If you're testing an API and
you're expecting it to

108
00:07:39.465 --> 00:07:44.157
return a certain JSON structure,
you can use snapshot testing for

109
00:07:44.157 --> 00:07:48.511
that as well to be assured that,
the structure of your JSON for

110
00:07:48.511 --> 00:07:53.488
your API is not changing over time
unless you anticipate it to do that.

111
00:07:53.488 --> 00:07:57.678
&gt;&gt; Speaker 3: So could you kinda do a test
driven design where you'd actually lay out

112
00:07:57.678 --> 00:07:59.465
your snapshot ahead of time?

113
00:07:59.465 --> 00:08:02.075
And then say okay,
I expect my component to match that?

114
00:08:02.075 --> 00:08:04.153
&gt;&gt; Brian Holt: I would not do that.

115
00:08:04.153 --> 00:08:08.018
Snapshot.spec.jsx, in fact,
I think it says it in there.

116
00:08:08.018 --> 00:08:12.782
I'm not telling you what you can and
can't do, by all means,

117
00:08:12.782 --> 00:08:16.456
but you were not supposed
to edit these by hand.

118
00:08:16.456 --> 00:08:18.164
The other thing that people,

119
00:08:18.164 --> 00:08:23.031
which may not be intuitive is that you are
supposed to check these in the Git, right?

120
00:08:23.031 --> 00:08:26.647
So that if you ship this to someone
else they're supposed to get the same

121
00:08:26.647 --> 00:08:27.562
snapshot as you.

122
00:08:27.562 --> 00:08:31.870
A lot of times people feel a kind of icky
about checking in things that are machine

123
00:08:31.870 --> 00:08:32.591
generated.

124
00:08:32.591 --> 00:08:37.017
But, in this particular case
you want to check these in,

125
00:08:37.017 --> 00:08:40.537
because they are part
of your testing suite.

126
00:08:40.537 --> 00:08:47.078
&gt;&gt; Speaker 3: And the __tests that you
created, that's a predefined path, right?

127
00:08:47.078 --> 00:08:49.139
Cuz I didn't see where we
defined that anywhere.

128
00:08:49.139 --> 00:08:54.662
&gt;&gt; Brian Holt: No, I think so
jest is a really smart testing suite.

129
00:08:54.662 --> 00:08:58.317
That it's just going to scour
your entire code base for

130
00:08:58.317 --> 00:09:00.867
things that say .spec, .js, jsx.

131
00:09:00.867 --> 00:09:03.851
So we could really put it in
that top level directory.

132
00:09:03.851 --> 00:09:11.436
But Airbnb's eslint config is forcing us
to put it inside of the test directory.

133
00:09:11.436 --> 00:09:12.593
For me personally,

134
00:09:12.593 --> 00:09:16.748
I want my tests to live as close to
the components of the test as possible.

135
00:09:16.748 --> 00:09:20.053
So that if I go into a directory and
I see that test directory and

136
00:09:20.053 --> 00:09:23.943
I can just open it and I can see all
the tests that pertain to those things.

137
00:09:23.943 --> 00:09:26.103
I want them to live as close as possible.

138
00:09:26.103 --> 00:09:28.976
Not everyone shares that
particular desire, right?

139
00:09:28.976 --> 00:09:32.212
Sometimes they wanna have their test
totally separate in another directory

140
00:09:32.212 --> 00:09:33.941
that's totally aside from their code.

141
00:09:33.941 --> 00:09:35.702
And it's all your decision to make.

142
00:09:37.752 --> 00:09:42.101
&gt;&gt; Brian Holt: But I'm right,
that's what I'm getting at.

143
00:09:42.101 --> 00:09:44.879
Cool, any questions
about snapshot testing?

144
00:09:44.879 --> 00:09:46.334
It's pretty magical, right?

145
00:09:46.334 --> 00:09:50.062
Pretty magical, yeah, magical, yeah?

146
00:09:50.062 --> 00:09:53.096
&gt;&gt; Speaker 4: How is jest invoking babel?

147
00:09:53.096 --> 00:09:55.189
&gt;&gt; Brian Holt: It just
does it automatically.

148
00:09:55.189 --> 00:09:55.734
&gt;&gt; Speaker 4: Okay.

149
00:09:55.734 --> 00:09:58.269
&gt;&gt; Brian Holt: [LAUGH] It does
is the answer to that question.

150
00:09:58.269 --> 00:09:59.325
&gt;&gt; Speaker 4: Okay.

151
00:09:59.325 --> 00:10:05.022
And I don't see any transpiled
js file sitting anywhere,

152
00:10:05.022 --> 00:10:08.865
so is it just a in memory pipeline that?

153
00:10:08.865 --> 00:10:12.314
&gt;&gt; Brian Holt: Yeah, I think so,
is the answer to that question.

154
00:10:12.314 --> 00:10:15.313
I'm not exactly sure
where it's storing that.

155
00:10:15.313 --> 00:10:18.952
I mean there is babel cache and things
like that, but my guess is it might be

156
00:10:18.952 --> 00:10:22.077
writing out to like the temp directory or
something like that.

157
00:10:22.077 --> 00:10:25.633
But that's conjecture,
I'm not actually sure.

158
00:10:25.633 --> 00:10:27.730
&gt;&gt; Speaker 5: Who made jest,
is that Facebook?

159
00:10:27.730 --> 00:10:29.310
&gt;&gt; Brian Holt: Facebook.

160
00:10:29.310 --> 00:10:30.925
&gt;&gt; Speaker 5: And
you said it's Jasmine underneath?

161
00:10:30.925 --> 00:10:32.367
&gt;&gt; Brian Holt: Yep, Jasmine 2.

162
00:10:32.367 --> 00:10:36.147
&gt;&gt; Speaker 5: Jasmine 2,
so, what's the difference?

163
00:10:36.147 --> 00:10:38.400
&gt;&gt; Brian Holt: Snapshots
are specific to Jest,

164
00:10:38.400 --> 00:10:43.878
the smart finding of files is specific
to Jest, the automatic running of Babel.

165
00:10:43.878 --> 00:10:48.734
It just has a bunch of these convenience
features built on top of Jest.

166
00:10:48.734 --> 00:10:52.853
Another really cool thing is with Jest,
if you have a bunch of tests that you're

167
00:10:52.853 --> 00:10:57.109
running, like whole suites, it will run
them in parallel, so it will go faster.

168
00:10:57.109 --> 00:11:00.617
It will run the test that last failed
first, so that you can hopefully fail

169
00:11:00.617 --> 00:11:04.080
faster, rather than having to wait
to go through the entire test suite.

170
00:11:04.080 --> 00:11:10.922
There's just a whole boatload of really
useful things that they're doing for you.

171
00:11:10.922 --> 00:11:14.083
Yeah, cool indeed, I think so.

172
00:11:14.083 --> 00:11:18.938
&gt;&gt; Speaker 2: Maybe a specific question,
but if you only want to update one or two

173
00:11:18.938 --> 00:11:25.116
files and not run the whole -u, I imagine
that -u is globally updating your tests?

174
00:11:25.116 --> 00:11:26.004
&gt;&gt; Brian Holt: I don't know.

175
00:11:26.004 --> 00:11:28.437
&gt;&gt; Speaker 2: You don't run
into that often though?

176
00:11:28.437 --> 00:11:32.223
&gt;&gt; Brian Holt: Yeah,
I haven't run that into often enough.

177
00:11:32.223 --> 00:11:34.350
Let's see if we can figure it out, right?

178
00:11:34.350 --> 00:11:36.312
Is there a main jest?

179
00:11:36.312 --> 00:11:39.724
Anyway, I think you can pass
in specific files to run.

180
00:11:39.724 --> 00:11:42.155
I don't know if you could do
it at per test level, but

181
00:11:42.155 --> 00:11:44.108
you probably can do it
at a per file level.

182
00:11:44.108 --> 00:11:46.684
But I don't know if I've
answered that question.

183
00:11:46.684 --> 00:11:48.336
&gt;&gt; Speaker 2: I was mostly just
curious if you run into that.

184
00:11:48.336 --> 00:11:48.980
&gt;&gt; Brian Holt: Uh-uh.

185
00:11:48.980 --> 00:11:52.110
&gt;&gt; Speaker 2: Cool.

186
00:11:52.110 --> 00:11:55.139
&gt;&gt; Brian Holt: So I'm getting sick
of running this super long command.

187
00:11:55.139 --> 00:12:00.492
So let's actually just go and
put that into our package.json.

188
00:12:00.492 --> 00:12:02.557
So we're gonna put in
two commands real quick.

189
00:12:02.557 --> 00:12:10.956
The first one as you might
imagine test jest, pretty easy.

190
00:12:10.956 --> 00:12:15.148
The other thing that jest has is
it has a lot of mocking abilities

191
00:12:15.148 --> 00:12:18.721
like kind of stuff that comes
with sign on, built in.

192
00:12:18.721 --> 00:12:21.987
I don't really know too much about them
because they are kind of a pain to use,

193
00:12:21.987 --> 00:12:24.462
and I think mocking a lot of
times does more harm than good.

194
00:12:24.462 --> 00:12:27.551
But that's all there.

195
00:12:27.551 --> 00:12:31.046
So, as you remember even though I
don't have jest globally installed,

196
00:12:31.046 --> 00:12:33.356
you can pull it straight
from the Node modules.

197
00:12:33.356 --> 00:12:37.392
And then I'm gonna create another one, and

198
00:12:37.392 --> 00:12:42.860
it's gonna be test:update and
that's gonna be jest -u.

