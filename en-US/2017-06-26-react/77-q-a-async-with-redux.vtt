WEBVTT

1
00:00:00.000 --> 00:00:05.777
&gt;&gt; Brian Holt: So we concluded making
all of our Async with redux work.

2
00:00:05.777 --> 00:00:10.189
And now we have this really cool ability
to come navigate under our site and

3
00:00:10.189 --> 00:00:13.889
make API request, cache them and
then not re-request them,

4
00:00:13.889 --> 00:00:16.109
which I think is pretty compelling.

5
00:00:16.109 --> 00:00:20.764
So again, you just see that it just pops
up right away, which I think is great.

6
00:00:23.585 --> 00:00:27.776
&gt;&gt; Brian Holt: So
this is the kind of the most simple way

7
00:00:27.776 --> 00:00:32.478
of doing asynchronous actions with Redux.

8
00:00:32.478 --> 00:00:35.052
Again you can get into libraries,

9
00:00:35.052 --> 00:00:40.732
like Redux promise is another one that
I find very intuitive to use that you,

10
00:00:40.732 --> 00:00:45.817
instead of dispatching functions
you dispatch promises, right?

11
00:00:45.817 --> 00:00:49.473
Same thing with redux observable, you
just dispatch an observable with RXJS or

12
00:00:49.473 --> 00:00:50.520
something like that.

13
00:00:50.520 --> 00:00:53.647
And then sagas is kinda the heavy lifter.

14
00:00:53.647 --> 00:00:58.195
It's really cool, but I would assert
that it's much more complicated and

15
00:00:58.195 --> 00:01:01.020
most difficult to kinda
get your mind around.

16
00:01:01.020 --> 00:01:07.114
So if you're familiar,
ES6 has another feature called generators.

17
00:01:07.114 --> 00:01:10.680
Which are really cool,
they're really powerful, but they can be

18
00:01:10.680 --> 00:01:14.959
a bit unwieldy and kind of difficult to
understand what's going on sometimes.

19
00:01:14.959 --> 00:01:19.647
With sagas you can just dispatch
generators and take care of things and

20
00:01:19.647 --> 00:01:23.712
kind of complex orchestrations
using various generators.

21
00:01:23.712 --> 00:01:25.136
So it's cool, but

22
00:01:25.136 --> 00:01:30.388
make sure you want to undertake that
complexity if you gonna use them.

23
00:01:30.388 --> 00:01:35.173
But suffice to say, thunks usually
handle most of your use cases,

24
00:01:35.173 --> 00:01:37.912
that's why I tend to stick with them.

25
00:01:37.912 --> 00:01:41.503
So does anyone have any questions
about Redux in general?

26
00:01:44.982 --> 00:01:49.084
&gt;&gt; Speaker 2: I was curious,
the persistent data that you get between

27
00:01:49.084 --> 00:01:54.156
pages, can you do that with React still,
or is that Redux specific?

28
00:01:54.156 --> 00:01:57.369
&gt;&gt; Brian Holt: The answer is you
can absolutely do it with React.

29
00:01:57.369 --> 00:02:02.082
But you're gonna have to have basically
something on the side holding onto that

30
00:02:02.082 --> 00:02:03.007
data, right?

31
00:02:03.007 --> 00:02:05.325
If you unmount data, right?

32
00:02:05.325 --> 00:02:08.157
It's going to, or
if you unmount the reactive component,

33
00:02:08.157 --> 00:02:10.037
it's going to lose all of it's state.

34
00:02:10.037 --> 00:02:15.286
So, it can't live in that state, however,
if it's living up at the app level, right?

35
00:02:15.286 --> 00:02:19.093
App is still technically being rendered,
so if you push that up into app, right?

36
00:02:19.093 --> 00:02:21.515
It's going to persist
across different views,

37
00:02:21.515 --> 00:02:24.420
because it's still alive,
it's still being rendered.

38
00:02:24.420 --> 00:02:26.215
So that's how you would achieve that.

39
00:02:26.215 --> 00:02:30.588
The good news here is we
are done with application code,

40
00:02:30.588 --> 00:02:36.172
everything else I'm gonna show you
from here on out is just more tools,

41
00:02:36.172 --> 00:02:38.331
more techniques, right?

42
00:02:38.331 --> 00:02:43.928
Tests, all that kind of stuff but
now you pretty much have, I would deem,

43
00:02:43.928 --> 00:02:49.075
a full grasp on how to write React,
and how to write at least the basic

44
00:02:49.075 --> 00:02:53.802
levels of Redux, not getting
into the crazy stuff like that.

45
00:02:53.802 --> 00:02:57.084
There are still more facts of it
that we heven't really explored.

46
00:02:57.084 --> 00:02:59.549
But sufficed to say that I have shown you,

47
00:02:59.549 --> 00:03:02.799
I would say 90% of use cases
on both React and Redux.

48
00:03:02.799 --> 00:03:08.771
So I would say armed with the knowledge
that I've shown you over the past two and

49
00:03:08.771 --> 00:03:13.224
a half days you can write large
scale React applications.

50
00:03:13.224 --> 00:03:17.494
And I think that's pretty awesome
that React is small enough and

51
00:03:17.494 --> 00:03:22.002
intuitive enough, at least I deem
intuitive enough that you really

52
00:03:22.002 --> 00:03:24.311
can learn it in two and a half days.

