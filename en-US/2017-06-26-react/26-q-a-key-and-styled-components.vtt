WEBVTT

1
00:00:00.000 --> 00:00:04.744
&gt;&gt; Speaker 1: And there's a few questions
going back around the use of the key.

2
00:00:04.744 --> 00:00:09.714
I guess there's some confusion around
if you don't use the index how does

3
00:00:09.714 --> 00:00:14.682
that,
&gt;&gt; Speaker 1: The index of

4
00:00:14.682 --> 00:00:17.511
an array versus an ID?

5
00:00:17.511 --> 00:00:18.749
I know you kinda covered it.

6
00:00:18.749 --> 00:00:21.562
&gt;&gt; Brian Holt: Sure, no,
I can kind of diagram it out.

7
00:00:21.562 --> 00:00:24.398
So if I have,

8
00:00:31.782 --> 00:00:37.097
&gt;&gt; Brian Holt: id 0 and name

9
00:00:37.097 --> 00:00:44.552
Brian,
&gt;&gt; Brian Holt: Let's do one more.

10
00:00:44.552 --> 00:00:50.595
So I have, one, two, and three.

11
00:00:50.595 --> 00:00:56.909
And we have Marc and
we have Tanner and we have Jon.

12
00:01:00.107 --> 00:01:05.651
&gt;&gt; Brian Holt: Okay, so
Sam rendering these out

13
00:01:05.651 --> 00:01:10.998
to a map and I have names.map and

14
00:01:10.998 --> 00:01:14.965
its objects and index.

15
00:01:19.401 --> 00:01:24.402
&gt;&gt; Brian Holt: And then that returns to

16
00:01:24.402 --> 00:01:29.904
an h3 with key=index and

17
00:01:29.904 --> 00:01:33.413
object.name.

18
00:01:36.751 --> 00:01:40.741
&gt;&gt; Brian Holt: Okay, so picture for
a moment this is names, right?

19
00:01:40.741 --> 00:01:42.046
Names equals, oops.

20
00:01:42.046 --> 00:01:43.147
Don't do that.

21
00:01:48.806 --> 00:01:50.948
&gt;&gt; Brian Holt: So
right now I'm sorting based on id, right?

22
00:01:50.948 --> 00:01:53.778
That's what the array is sorted by.

23
00:01:53.778 --> 00:01:59.544
Let's say I allowed the user to sort by
name eventually, so if I haven't sort by

24
00:01:59.544 --> 00:02:05.414
name, then really the only thing that
happens is John gets to go up here, right?

25
00:02:05.414 --> 00:02:09.601
So now the ids are out of order.

26
00:02:09.601 --> 00:02:15.692
So I guess right now this
is going to be output to

27
00:02:18.845 --> 00:02:22.277
&gt;&gt; Brian Holt: Brian, Marc, Tanner, Jon,

28
00:02:22.277 --> 00:02:26.502
so by id, it looks like that, right?

29
00:02:26.502 --> 00:02:30.360
So this is going to be the first element,
the second element, the third element, and

30
00:02:30.360 --> 00:02:31.336
the fourth element.

31
00:02:31.336 --> 00:02:35.009
If then I sort by name,
it's going to be Brian,

32
00:02:38.015 --> 00:02:42.920
&gt;&gt; Brian Holt: Jon, Marc, Tanner, right?

33
00:02:42.920 --> 00:02:45.650
So that's what it's gonna look like.

34
00:02:45.650 --> 00:02:48.260
So if my key is indexed, right?

35
00:02:48.260 --> 00:02:53.191
It's going to be comparing the previous
zeroth element to the next zeroeth

36
00:02:53.191 --> 00:02:53.903
element.

37
00:02:53.903 --> 00:02:57.444
So this one's not gonna change,
so it's gonna leave Brian alone.

38
00:02:57.444 --> 00:03:05.586
But Marc and
Jon are both the first index, right?

39
00:03:05.586 --> 00:03:10.206
So it's going to assume that those
things stayed the same because it's

40
00:03:10.206 --> 00:03:12.760
gonna say index1=index1, right?

41
00:03:12.760 --> 00:03:15.464
And it's not true, right?

42
00:03:15.464 --> 00:03:16.856
They changed, right?

43
00:03:16.856 --> 00:03:21.259
So the index is not an accurate indicator
of what has changed and what's not.

44
00:03:21.259 --> 00:03:25.415
So the key here is that it needs
to be tied to the object, right?

45
00:03:25.415 --> 00:03:29.052
The index is not tied to the object, cuz
the object can move anywhere throughout

46
00:03:29.052 --> 00:03:31.235
that array depending on how we sort it,
right?

47
00:03:31.235 --> 00:03:33.046
But if we're tying it to the id,

48
00:03:33.046 --> 00:03:36.078
the id travels with that
particular object, right?

49
00:03:36.078 --> 00:03:40.708
So if Brian's here or if Jon's here or
if Jon's here, right?

50
00:03:40.708 --> 00:03:43.390
His id is always going to be the same,
right?

51
00:03:43.390 --> 00:03:46.276
So then when React compares
those against each other,

52
00:03:46.276 --> 00:03:48.918
it's gonna say this
object moved over here.

53
00:03:48.918 --> 00:03:53.120
I'm gonna take this entire DOM tree and
move it over here, right?

54
00:03:53.120 --> 00:03:57.352
So that's how I was able to
carry these throughout, right?

55
00:03:57.352 --> 00:04:03.447
&gt;&gt; Speaker 1: Is there any reason
to use key within the component?

56
00:04:03.447 --> 00:04:05.280
&gt;&gt; Brian Holt: You actually can't, right?

57
00:04:05.280 --> 00:04:07.121
So React is actually going
to hide key from you.

58
00:04:07.121 --> 00:04:10.181
So in this particular case with ShowCard.

59
00:04:10.181 --> 00:04:13.153
If we went and looked at the props,
key is not passed through.

60
00:04:13.153 --> 00:04:14.736
Key is just through React.

61
00:04:14.736 --> 00:04:16.770
And that's the only special property.

62
00:04:20.588 --> 00:04:23.979
&gt;&gt; Brian Holt: So no, please don't.

63
00:04:23.979 --> 00:04:28.420
&gt;&gt; Speaker 1: Some questions
with the style components.

64
00:04:28.420 --> 00:04:30.065
&gt;&gt; Brian Holt: Sure.

65
00:04:30.065 --> 00:04:34.861
&gt;&gt; Speaker 1: And I'm not sure if you
answered these but how does it work for

66
00:04:34.861 --> 00:04:40.052
output devices in responsive design,
like immediate queries?

67
00:04:40.052 --> 00:04:44.903
&gt;&gt; Brian Holt: So
you can do all sorts of fancy stuff

68
00:04:44.903 --> 00:04:49.122
within the, so like I can say,

69
00:04:56.221 --> 00:04:57.757
&gt;&gt; Brian Holt: This stuff that works

70
00:04:57.757 --> 00:05:02.885
within LESS and SASS, this all works
within style components as well.

71
00:05:02.885 --> 00:05:06.870
So add media

72
00:05:06.870 --> 00:05:12.452
myBreakPoint,

73
00:05:18.290 --> 00:05:19.391
&gt;&gt; Brian Holt: All that stuff works so,

74
00:05:19.391 --> 00:05:22.118
stuff that you would typically
expect within SASS and LESS for

75
00:05:22.118 --> 00:05:25.360
the most part just kind of
work within styles components.

76
00:05:25.360 --> 00:05:28.478
And you can use the end selector as well,
which is really nice.

77
00:05:32.007 --> 00:05:36.350
&gt;&gt; Speaker 1: What if multiple components
use the same css with slight variation.

78
00:05:37.370 --> 00:05:40.320
Is the css repeated several times.

79
00:05:40.320 --> 00:05:44.980
&gt;&gt; Brian Holt: That's kind of up to you,
sometimes it is good idea to repeat it.

80
00:05:44.980 --> 00:05:48.180
There is a way to share that css.

81
00:05:50.120 --> 00:05:54.990
I want to say there's like
a style that extends.

82
00:05:54.990 --> 00:05:57.210
You'd have to look at the documentation.

83
00:05:57.210 --> 00:06:02.070
But to suffice to say,
there is a way to mix it in more CSS.

84
00:06:02.070 --> 00:06:04.790
If you have a standard
button that you want to use.

85
00:06:04.790 --> 00:06:06.740
One you can just make
a button in another file and

86
00:06:06.740 --> 00:06:09.740
export it and
then extend it inside of the file.

87
00:06:09.740 --> 00:06:13.710
There are a couple ways to solve that
issue that style components takes care of.

88
00:06:13.710 --> 00:06:17.480
I don't remember off the top of my head or
else I'd show you.

89
00:06:17.480 --> 00:06:23.530
&gt;&gt; Speaker 1: Have you or do you recommend
using style components in production?

90
00:06:23.530 --> 00:06:26.650
&gt;&gt; Brian Holt: The answer to that question
is it depends on what you're doing.

91
00:06:26.650 --> 00:06:29.200
If you are in a highly
performance sensitive area

92
00:06:30.300 --> 00:06:34.800
That the actual milliseconds makes a
difference, something you wanna consider.

93
00:06:34.800 --> 00:06:38.450
&gt;&gt; Speaker 1: You're just saying that the
job descriptor has the props the styles.

94
00:06:38.450 --> 00:06:42.849
&gt;&gt; Brian Holt: It's got a props,
it's got to be so with CSS right,

95
00:06:42.849 --> 00:06:47.995
you typically ship all the CSS in
the head, and then you pass the body, and

96
00:06:47.995 --> 00:06:53.753
then you pass the JS, right
&gt;&gt; Brian Holt: If

97
00:06:53.753 --> 00:06:57.066
you're not gonna do server-side rendering,
you have to wait for

98
00:06:57.066 --> 00:07:00.390
the body to be loaded, then you have
to wait for the JS to be parsed.

99
00:07:00.390 --> 00:07:03.510
Then you have to wait for
the CSS to be put onto the page,

100
00:07:03.510 --> 00:07:04.740
before a style search showing up.

101
00:07:04.740 --> 00:07:08.379
So you have a big chance for
flashes of un-styled content, and

102
00:07:08.379 --> 00:07:10.930
There's all sorts of problematic things.

103
00:07:10.930 --> 00:07:13.820
There's also a runtime penalty for
styles components, right?

104
00:07:13.820 --> 00:07:15.630
It's not free, right?

105
00:07:15.630 --> 00:07:18.920
There's a styles component library
working in the background.

106
00:07:18.920 --> 00:07:19.780
&gt;&gt; Speaker 1: But as we said,

107
00:07:19.780 --> 00:07:23.980
webpack will eventually be able
to pre-compile this stuff.

108
00:07:23.980 --> 00:07:25.320
&gt;&gt; Brian Holt: Hopefully,
hopefully eventually, right?

109
00:07:25.320 --> 00:07:26.633
&gt;&gt; Speaker 1: It's better
than the stylesheet.

110
00:07:26.633 --> 00:07:31.230
I mean ideally And especially if this
is the way of the future kind of thing.

111
00:07:31.230 --> 00:07:35.730
&gt;&gt; Brian Holt: For sure, and with server
side rendering, which I'll show you

112
00:07:36.770 --> 00:07:42.580
probably on the third day,
it'll pre render out that style tag for

113
00:07:42.580 --> 00:07:46.020
you, right, because it's gonna server
side render all that stuff for you.

114
00:07:46.020 --> 00:07:50.700
And so that style tag will be
sent down with all the CSS.

115
00:07:50.700 --> 00:07:53.300
So you'll get all that stuff for free.

116
00:07:53.300 --> 00:07:55.790
So it's still pretty fast.

117
00:07:57.610 --> 00:08:00.130
Max, the guy that wrote it,

118
00:08:00.130 --> 00:08:02.740
he has a couple big websites in
production that are using it.

119
00:08:04.430 --> 00:08:07.570
&gt;&gt; Speaker 1: Can style components
be used to target semantic

120
00:08:07.570 --> 00:08:10.280
elements instead of a div?

121
00:08:10.280 --> 00:08:10.790
&gt;&gt; Brian Holt: Yeah, sure.

122
00:08:10.790 --> 00:08:12.760
I mean this could be an article, right?

123
00:08:14.320 --> 00:08:15.020
Or a section.

124
00:08:16.100 --> 00:08:18.701
&gt;&gt; Speaker 1: If each
page had an h1 style,

125
00:08:18.701 --> 00:08:23.530
would you repeating
the lining in every page?

126
00:08:23.530 --> 00:08:26.110
&gt;&gt; Brian Holt: No, no it's smart enough
to pull that out into a single class.

127
00:08:29.200 --> 00:08:33.100
&gt;&gt; Speaker 1: Are the class names
generated always random Characters?

128
00:08:34.360 --> 00:08:37.330
&gt;&gt; Brian Holt: The answer to that
question is it's a hash, I'm pretty sure.

129
00:08:39.070 --> 00:08:43.820
So given these set of CSS properties,
this hashes to this class name, and

130
00:08:43.820 --> 00:08:45.230
that's how they generate the class name.

131
00:08:46.340 --> 00:08:48.070
That was my understanding anyway.

132
00:08:50.000 --> 00:08:53.380
&gt;&gt; Speaker 1: Which has precendence,
the class on the styled component, or

133
00:08:53.380 --> 00:08:56.460
the component Define styles.

134
00:08:56.460 --> 00:09:00.840
&gt;&gt; Brian Holt: It's just the normal
CSS cascade, whatever that amounts to.

135
00:09:00.840 --> 00:09:04.950
I guess the sum of my story here was
styles components, it's worth exploring,

136
00:09:04.950 --> 00:09:08.480
it's worth for you to try and
understand what's going on.

137
00:09:08.480 --> 00:09:12.340
There is still pretty we are still kind
of like messing around with these ideas.

138
00:09:12.340 --> 00:09:15.110
And some people are less
thrilled than others about it.

139
00:09:15.110 --> 00:09:17.570
I totally accept that opinion
if you're not into it, but

140
00:09:17.570 --> 00:09:19.910
I think it's innovation worth exploring.

141
00:09:19.910 --> 00:09:24.500
&gt;&gt; Speaker 3: So, one of the ways that
we've used TSS within the react contacts

142
00:09:24.500 --> 00:09:29.680
is, like you've shown you have
the TSS file within the components,

143
00:09:29.680 --> 00:09:31.919
and then you port it, is that?

144
00:09:33.510 --> 00:09:34.330
Reasonable?

145
00:09:34.330 --> 00:09:35.488
&gt;&gt; Brian Holt: Yeah.
&gt;&gt; Speaker 3: Still good.

146
00:09:35.488 --> 00:09:37.850
&gt;&gt; Brian Holt: Yeah, [COUGH],
I would say that one's,

147
00:09:37.850 --> 00:09:40.840
I don't think anyone's questioned
the safety of doing that.

148
00:09:40.840 --> 00:09:42.710
That's totally
a production-ready strategy.

149
00:09:44.910 --> 00:09:48.090
I'm really hesitant to say, yes, go
forward with styles-components right now,

150
00:09:48.090 --> 00:09:49.860
as much as I think the library's amazing.

151
00:09:52.130 --> 00:09:55.670
I say, judge for yourself, that's what
I wanna say about styles-components.

152
00:09:55.670 --> 00:09:57.530
There's Tradeoffs to be made there.

153
00:09:57.530 --> 00:10:00.480
And there are reasons to, right?

154
00:10:00.480 --> 00:10:06.010
I think this is a big productivity win to
have it all there in one place for you.

155
00:10:06.010 --> 00:10:11.270
So you need to balance developer
experience versus runtime complexity.

