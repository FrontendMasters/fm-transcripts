WEBVTT

1
00:00:00.476 --> 00:00:01.660
&gt;&gt; Brian Holt: Let's go ahead and

2
00:00:01.660 --> 00:00:05.735
just kinda jump in so we can start
seeing how this is gonna help us.

3
00:00:05.735 --> 00:00:10.077
First thing we're gonna do here,
is we're gonna say yarn flow.

4
00:00:10.077 --> 00:00:15.986
So we don't have flow in our scripts, but
flow is actually being included already.

5
00:00:15.986 --> 00:00:21.759
In fact, if you go ./node modules .bin.

6
00:00:21.759 --> 00:00:23.137
There's a flow in there,

7
00:00:23.137 --> 00:00:26.340
which I had forgotten about this
trick until just right now.

8
00:00:26.340 --> 00:00:28.385
You can actually just say yarn flow, and

9
00:00:28.385 --> 00:00:31.587
it's gonna go find that in your
node modules and run it for you.

10
00:00:31.587 --> 00:00:38.552
So we're going to yarn flow -- --init.

11
00:00:38.552 --> 00:00:39.780
Is it just init?

12
00:00:39.780 --> 00:00:41.339
Okay, I don't think you need to dashes.

13
00:00:43.780 --> 00:00:45.000
There we go, okay?

14
00:00:45.000 --> 00:00:47.120
So yarn, flow, dash, dash, init.

15
00:00:49.040 --> 00:00:54.010
Okay now if you look in
your directory it created

16
00:00:54.010 --> 00:00:58.246
this file here called, .flow config.

17
00:00:58.246 --> 00:01:02.116
But this is kinda, a lot of the times
you don't need anything other than

18
00:01:02.116 --> 00:01:05.228
just having a flow config,
even if it's totally empty.

19
00:01:05.228 --> 00:01:10.007
It's just that you're acknowledging at
that point this is now a flow project.

20
00:01:10.007 --> 00:01:14.715
Now the reason why I learned flow
in the first place and like flow,

21
00:01:14.715 --> 00:01:20.039
it's very easy to introduce flow
slowly into a mature code base, right?

22
00:01:20.039 --> 00:01:23.093
Cuz flow is opt in, so you have to
go in and opt in to every file.

23
00:01:23.093 --> 00:01:28.227
So you just kind of slowly start going and
opting in files, and

24
00:01:28.227 --> 00:01:33.283
eventually your entire project
will become typed, right?

25
00:01:33.283 --> 00:01:36.284
I think typed can do
something similar to that,

26
00:01:36.284 --> 00:01:41.085
I just, again, I don't have the experience
to speak to that, but I know for

27
00:01:41.085 --> 00:01:44.477
a fact that that was a strength for
flow in my opinion.

28
00:01:49.897 --> 00:01:54.188
&gt;&gt; Brian Holt: Something
else we're gonna do now is,

29
00:01:54.188 --> 00:02:00.959
I want you to add a global called
yarn global add flow-typed.

30
00:02:00.959 --> 00:02:04.039
You can also do npm
install dash dash global.

31
00:02:04.039 --> 00:02:09.137
I just need you to get this CLI
called flow typed, yeah go ahead.

32
00:02:09.137 --> 00:02:12.100
&gt;&gt; Speaker 2: What was the previous
command for flow init?

33
00:02:12.100 --> 00:02:16.829
&gt;&gt; Brian Holt: Yarn flow
dash dash space init.

34
00:02:19.988 --> 00:02:21.510
&gt;&gt; Brian Holt: So add the flow type.

35
00:02:25.439 --> 00:02:29.868
&gt;&gt; Brian Holt: So now you should
have a CLI thing called flow-typed.

36
00:02:29.868 --> 00:02:33.348
What this is going to do is this
is gonna go out to their repo and

37
00:02:33.348 --> 00:02:36.440
bring in types that your
project is currently using.

38
00:02:36.440 --> 00:02:41.559
So, for example, we're using,
React is a bad example.

39
00:02:41.559 --> 00:02:42.591
Let's say.

40
00:02:52.694 --> 00:02:55.209
&gt;&gt; Brian Holt: Well,
something like enzyme, for example.

41
00:02:55.209 --> 00:02:57.592
Enzyme has a specific API.

42
00:02:57.592 --> 00:03:01.932
And someone went through and actually
wrote the types for Enzyme, so if you try

43
00:03:01.932 --> 00:03:06.225
and call like enzyme.method that does
not exist, and you try and call that.

44
00:03:06.225 --> 00:03:10.826
It's gonna say hey you're trying to
call a method that doesn't exist right?

45
00:03:10.826 --> 00:03:13.330
So that's what Flow Type is gonna do,
it's gonna go out and

46
00:03:13.330 --> 00:03:17.270
grab those type definitions for
you and bring them into your project.

47
00:03:17.270 --> 00:03:20.250
In an automated fashion which
is my favorite way of doing it.

48
00:03:20.250 --> 00:03:22.963
So we're gonna say flow-typed install.

49
00:03:27.036 --> 00:03:28.827
&gt;&gt; Brian Holt: And it's just gonna
go out and grab all the types for

50
00:03:28.827 --> 00:03:30.130
the things that you've installed.

51
00:03:30.130 --> 00:03:33.530
There's gonna be a bunch of red output,
this is just saying hey,

52
00:03:33.530 --> 00:03:36.720
you have babel-core, and I don't
know what that is, and that's okay.

53
00:03:38.280 --> 00:03:41.450
But if you scroll up above all that,
you're gonna see it brought in express,

54
00:03:41.450 --> 00:03:46.134
redux, flow, lodash, jest,
enzyme, react-router-dom,

55
00:03:46.134 --> 00:03:50.560
axios, prop-types,
react-addons-perf, and react-redux.

56
00:03:50.560 --> 00:03:54.607
So we got all those typings for
free, which is a-okay by me.

57
00:03:59.172 --> 00:04:02.928
&gt;&gt; Brian Holt: Also just so you know, you
can look here inside of your flow typed

58
00:04:02.928 --> 00:04:05.170
directory that it just added for you.

59
00:04:05.170 --> 00:04:09.600
And you can actually go look at these
type definitions which is super useful.

60
00:04:10.610 --> 00:04:14.620
So for example,
I don't know how Jest is working, so

61
00:04:14.620 --> 00:04:19.630
I can click into this I can actually
go through all of these types.

62
00:04:21.770 --> 00:04:24.200
In fact,
it's like if you're on a plane and

63
00:04:24.200 --> 00:04:27.060
don't have access to the documentation,
it's a pretty good way of looking at it.

64
00:04:28.360 --> 00:04:29.550
Right?
You can see that jest

65
00:04:29.550 --> 00:04:30.780
actually does a ton of stuff.

66
00:04:32.340 --> 00:04:36.831
So this is pretty recent, and
to me this is a huge addition to flow,

67
00:04:36.831 --> 00:04:40.538
so I'm very grateful to the community for
doing that.

68
00:04:43.784 --> 00:04:46.904
&gt;&gt; Brian Holt: Okay, any questions so far?

69
00:04:49.698 --> 00:04:53.478
&gt;&gt; Brian Holt: So right now if we go and
say yarn flow I think it's just gonna,

70
00:04:53.478 --> 00:04:55.086
not really do a whole lot.

71
00:04:58.711 --> 00:05:01.590
&gt;&gt; Brian Holt: Because we don't have
any files that are being opted in for

72
00:05:01.590 --> 00:05:04.250
it to being stat, look,
it is doing some stuff.

73
00:05:06.220 --> 00:05:09.950
So God bless style components.

74
00:05:09.950 --> 00:05:11.200
I love them.

75
00:05:11.200 --> 00:05:15.390
But for whatever reason they have interior
errors for flow, and so you have to go in

76
00:05:15.390 --> 00:05:20.660
and tell it specifically do not type check
inside of the styles components directory.

77
00:05:22.240 --> 00:05:25.060
That was super weird so
let's go ahead and do that.

78
00:05:25.060 --> 00:05:25.952
Do I have that in here?

79
00:05:29.159 --> 00:05:29.900
&gt;&gt; Brian Holt: Yeah I do.

80
00:05:30.980 --> 00:05:36.313
So go into your flow config
file that it generated for you.

81
00:05:36.313 --> 00:05:42.969
And the very first thing that you're gonna
want to do is ignore styled components.

82
00:05:42.969 --> 00:05:47.542
So you're gonna say

83
00:05:47.542 --> 00:05:57.227
PROJECT_ROOT/node_modules/styled

84
00:05:57.227 --> 00:06:02.080
components/ star.

85
00:06:02.080 --> 00:06:06.460
So it's just saying anything coming out
of styled components I do not care.

86
00:06:06.460 --> 00:06:08.440
You don't want to ignore
all of node modules.

87
00:06:08.440 --> 00:06:11.707
Because you actually do care about
the types that are coming out, right?

88
00:06:11.707 --> 00:06:13.753
The outputted types.

89
00:06:13.753 --> 00:06:16.970
Anyone, flow will be able to
follow those where it can.

90
00:06:16.970 --> 00:06:20.100
So, you want it, for the most part,
leave node modules in.

91
00:06:20.100 --> 00:06:21.640
Here's type checking.

92
00:06:23.040 --> 00:06:28.621
Just, for whatever reason,
as of the today, it doesn't work.

93
00:06:36.801 --> 00:06:37.961
&gt;&gt; Brian Holt: Something to note,

94
00:06:37.961 --> 00:06:40.970
that Flow already understands
React out of the box.

95
00:06:40.970 --> 00:06:44.010
It doesn't need any Flow typings for that.

96
00:06:44.010 --> 00:06:47.880
The reason being was that Flow was written
for the React team at Facebook, so

97
00:06:47.880 --> 00:06:48.990
they just kind of built it in.

98
00:06:48.990 --> 00:06:50.989
So you get all that stuff just for free.

99
00:06:53.280 --> 00:06:56.200
Okay, so now if we try and
do this again and say yarn flow.

100
00:06:59.832 --> 00:07:03.300
&gt;&gt; Brian Holt: It's gonna go do that again
and no errors as far as it knows but

101
00:07:03.300 --> 00:07:06.360
nothing is actually being
opted into being checked.

102
00:07:06.360 --> 00:07:09.866
But it's good to know that we're
starting from no errors upfront.

103
00:07:14.063 --> 00:07:15.470
&gt;&gt; Brian Holt: The flow
is written in Ocaml.

104
00:07:18.280 --> 00:07:22.260
So it is relying on that
particular typing system.

105
00:07:22.260 --> 00:07:26.580
Basically as far as I understand it's
converting your JavaScript types into

106
00:07:26.580 --> 00:07:28.500
an analogous Ocaml type.

107
00:07:28.500 --> 00:07:32.370
Doing all this type checking with
the really robust OCaml typing system,

108
00:07:32.370 --> 00:07:35.810
and then spitting out those errors
back to JavaScript for you.

109
00:07:35.810 --> 00:07:37.800
But that's why it's really fast, right?

110
00:07:37.800 --> 00:07:40.280
If we were trying to write
a typing system in JavaScript,

111
00:07:40.280 --> 00:07:44.660
one that seems like an ill-advised idea,
it would go a lot slower.

112
00:07:44.660 --> 00:07:47.780
So, that's when you see the flow is
still initializing and all this stuff.

113
00:07:47.780 --> 00:07:50.978
It's actually running a background process
in Ocaml, feeding stuff into it and

114
00:07:50.978 --> 00:07:52.258
waiting for it to come back out.

115
00:07:55.274 --> 00:07:57.819
&gt;&gt; Brian Holt: And the same thing
if you look in your processes and

116
00:07:57.819 --> 00:08:01.280
you see some random Ocaml process
called flow, that's what it is.

