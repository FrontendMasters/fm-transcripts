WEBVTT

1
00:00:00.164 --> 00:00:05.303
&gt;&gt; Brian Holt: Let's go inside here and
search and

2
00:00:05.303 --> 00:00:09.242
I want you to put a header and

3
00:00:09.242 --> 00:00:14.209
an h1 with the name of whatever you

4
00:00:14.209 --> 00:00:19.692
decided to call your video service and

5
00:00:19.692 --> 00:00:23.631
then input type= 'text'

6
00:00:23.631 --> 00:00:28.967
placeholder='Search', cool.

7
00:00:28.967 --> 00:00:33.758
Save that check it out got a nice
little header up here at the top now,

8
00:00:33.758 --> 00:00:38.802
wouldn't it be nice if like all of
your stuff just style itself like this

9
00:00:38.802 --> 00:00:43.758
right.
&gt;&gt; Brian Holt: That will be fun.

10
00:00:43.758 --> 00:00:50.092
You should be seeing this nice
little fixed header at the top.

11
00:00:50.092 --> 00:00:56.009
So now we have this input right here.

12
00:00:56.009 --> 00:00:58.141
It doesn't really do anything
particularly interesting.

13
00:00:58.141 --> 00:01:01.198
It just outputs and
inputs to the header but,

14
00:01:01.198 --> 00:01:04.906
we have no access to this
input anywhere in the header.

15
00:01:04.906 --> 00:01:09.686
So what we need now is we need React to
keep track of whatever is in that input.

16
00:01:09.686 --> 00:01:13.748
Right now, we would refer to
this as an untracked input.

17
00:01:16.105 --> 00:01:17.326
&gt;&gt; Brian Holt: Okay?

18
00:01:17.326 --> 00:01:23.700
So React has this other ability that we
have not yet used called state, right.

19
00:01:23.700 --> 00:01:30.987
So, I guess something that we didn't
mention is if we go down here to ShowCard.

20
00:01:30.987 --> 00:01:35.537
We have this props.title,
props.year, props.description.

21
00:01:35.537 --> 00:01:38.939
This data, this props object,
is immutable.

22
00:01:38.939 --> 00:01:41.386
You cannot change it.

23
00:01:41.386 --> 00:01:43.795
If I say props to that poster
equals something else,

24
00:01:43.795 --> 00:01:45.889
it's not gonna actually change it, right.

25
00:01:45.889 --> 00:01:48.072
In fact I think React
will give you an error.

26
00:01:48.072 --> 00:01:50.153
Or in other words, don't change it.

27
00:01:50.153 --> 00:01:54.285
[LAUGH] So things that pass down
from the parent to the child

28
00:01:54.285 --> 00:01:57.567
cannot be changed in any way,
shape or form.

29
00:01:57.567 --> 00:02:01.093
It's totally up to the parent
what to pass down, and

30
00:02:01.093 --> 00:02:04.229
the child just gets whatever it gets,
right?

31
00:02:04.229 --> 00:02:06.985
[COUGH] So, that's useful.

32
00:02:06.985 --> 00:02:09.812
However, sometimes, like we need state.

33
00:02:09.812 --> 00:02:12.345
Like we need things that are stateful.

34
00:02:12.345 --> 00:02:17.005
So React has this other concept
besides props called state.

35
00:02:17.005 --> 00:02:21.577
So the peculiar thing about state is
a component can have its own state, right?

36
00:02:21.577 --> 00:02:25.789
Like if we have some sort of like,
you know, if I click on Svideo and

37
00:02:25.789 --> 00:02:30.100
it goes bold or unbold, right,
depending on if I click on it or not.

38
00:02:30.100 --> 00:02:33.883
This particular component can
keep track with its own state,

39
00:02:33.883 --> 00:02:36.728
but only a component can
modify its own state.

40
00:02:36.728 --> 00:02:41.034
So for example if search has,
or ShowCard has state,

41
00:02:41.034 --> 00:02:45.738
the search can't modify
a ShowCard state and vice versa.

42
00:02:45.738 --> 00:02:49.109
ShowCard can't modify search's state,
right.

43
00:02:49.109 --> 00:02:53.239
They can only each modify their own state.

44
00:02:53.239 --> 00:02:57.892
So again if one of them has
a problem you know that the problem

45
00:02:57.892 --> 00:03:00.512
lies right there with the state.

46
00:03:00.512 --> 00:03:05.124
Furthermore, let's say I
gave ShowCard state, right?

47
00:03:05.124 --> 00:03:07.511
And if I have a problem
with Atlanta state here,

48
00:03:07.511 --> 00:03:10.387
I can be assured that billions
didn't cause it, right?

49
00:03:10.387 --> 00:03:15.546
It must live within Atlanta, so it can
only out modify its own instance, right?

50
00:03:15.546 --> 00:03:20.915
So let's take a look what that actually
looks like if you go here to search,

51
00:03:20.915 --> 00:03:25.019
I mean you wanna make search
be able to have its own state.

52
00:03:25.019 --> 00:03:29.414
So far what we've been using what are
called functional components it's often

53
00:03:29.414 --> 00:03:34.204
called stateless functional components,
they are stateless functional components

54
00:03:34.204 --> 00:03:37.827
because as you see here,
there's no mechanism to get the state.

55
00:03:37.827 --> 00:03:42.631
So we need to convert this to a different
kind of component which is called

56
00:03:42.631 --> 00:03:44.377
an ES6 class component.

57
00:03:44.377 --> 00:03:49.525
So what we're gonna do here is we're
just gonna do a little bit of changes.

58
00:03:49.525 --> 00:03:57.291
We're gonna say class Search extends.
&gt;&gt; Brian Holt: Component,

59
00:03:57.291 --> 00:04:01.390
and we're gonna import component up here.

60
00:04:07.525 --> 00:04:08.077
&gt;&gt; Brian Holt: And,

61
00:04:08.077 --> 00:04:10.620
we're gonna remove that.

62
00:04:19.843 --> 00:04:20.898
&gt;&gt; Brian Holt: Okay, and

63
00:04:20.898 --> 00:04:23.945
then this is going to be a render

64
00:04:23.945 --> 00:04:30.998
method.
&gt;&gt; Brian Holt: It's

65
00:04:30.998 --> 00:04:35.701
kind of awkward to get this going but
nice thing again is that I don't

66
00:04:35.701 --> 00:04:40.333
have to format this,
prettier's gonna do it for me momentarily.

67
00:04:40.333 --> 00:04:44.811
And behold, looks like this, okay, so

68
00:04:44.811 --> 00:04:50.779
I have class Search extends Component.
&gt;&gt; Brian Holt: I

69
00:04:50.779 --> 00:04:52.489
imported Component up here.

70
00:04:52.489 --> 00:04:56.459
You are equally welcome to
say React.Component, and

71
00:04:56.459 --> 00:04:58.106
not import it up here.

72
00:04:58.106 --> 00:05:03.474
This is just how I prefer to do it.
&gt;&gt; Brian Holt: Okay,

73
00:05:03.474 --> 00:05:07.047
it's gonna give you a lint error for
now, we're gonna fix that.

74
00:05:07.047 --> 00:05:10.429
Basically, what it's saying right now is,
hey, you don't have any state, this should

75
00:05:10.429 --> 00:05:14.656
be a stateless functional component.
&gt;&gt; Brian Holt: But we're gonna give it

76
00:05:14.656 --> 00:05:19.688
state here in just a second.
&gt;&gt; Brian Holt: So

77
00:05:19.688 --> 00:05:23.614
ES6 classes.

78
00:05:23.614 --> 00:05:26.369
Classes came with ES6.

79
00:05:26.369 --> 00:05:30.361
Much to the joy of Java
developers everywhere [LAUGH].

80
00:05:30.361 --> 00:05:31.374
Just kidding.

81
00:05:31.374 --> 00:05:34.825
I like to prod Java developers.

82
00:05:34.825 --> 00:05:36.022
Keep in mind that these,

83
00:05:36.022 --> 00:05:40.141
they're pseudo classes in the sense that
these are not true classical inheritance.

84
00:05:40.141 --> 00:05:42.573
So don't treat them like Java classes.

85
00:05:42.573 --> 00:05:47.191
These are still prototype or inheritance
just like it's always been in JavaScript.

86
00:05:47.191 --> 00:05:49.889
This is just a different way to
write prototype or inheritance.

87
00:05:49.889 --> 00:05:53.328
So definitely keep that in mind.

88
00:05:53.328 --> 00:05:54.279
Okay?

89
00:05:54.279 --> 00:06:01.305
One thing about React component classes
is that they must have a render method.

90
00:06:01.305 --> 00:06:04.559
A 100% of the time without exception
must have a render method.

91
00:06:04.559 --> 00:06:05.473
Okay?

92
00:06:05.473 --> 00:06:11.653
So just keep that in mind, and
the render method must return markup.

93
00:06:11.653 --> 00:06:16.263
That's really the only hard
requirements of React components,

94
00:06:16.263 --> 00:06:19.602
everything else is kind of optional, okay?
&gt;&gt; Speaker 2: And

95
00:06:19.602 --> 00:06:21.998
the render method has to return markup?
&gt;&gt; Brian Holt: Uh-hm.

96
00:06:26.020 --> 00:06:27.679
&gt;&gt; Brian Holt: Yep, yep, yep.

97
00:06:27.679 --> 00:06:30.437
Just like those stateless
functional components,

98
00:06:30.437 --> 00:06:32.512
they also must return markup, right.

99
00:06:32.512 --> 00:06:33.550
It's the same kind of way.

100
00:06:33.550 --> 00:06:37.556
So you can think of those
function bodies of the stateless

101
00:06:37.556 --> 00:06:41.239
functional components as
being the same as render.

102
00:06:45.503 --> 00:06:48.223
&gt;&gt; Brian Holt: Okay, so now we have that.

103
00:06:48.223 --> 00:06:56.938
We've converted this to an ES6 class.
&gt;&gt; Brian Holt: So

104
00:06:56.938 --> 00:06:59.026
yeah, ES6 lint is yelling at us,

105
00:06:59.026 --> 00:07:03.855
we're gonna fix that momentarily.
&gt;&gt; Brian Holt: So

106
00:07:03.855 --> 00:07:09.838
what we're gonna do here is
we're gonna make a constructor.

107
00:07:09.838 --> 00:07:13.167
And a constructor takes in props, and

108
00:07:13.167 --> 00:07:18.319
then it passes props up.
&gt;&gt; Brian Holt: This

109
00:07:18.319 --> 00:07:21.619
is kind of annoying about ES6 classes.

110
00:07:21.619 --> 00:07:24.857
You just have to do this.

111
00:07:24.857 --> 00:07:27.419
This is just boilerplate that
you have to do it this way.

112
00:07:27.419 --> 00:07:31.451
It takes in props and
you have to pass it up.

113
00:07:31.451 --> 00:07:34.899
Then here we're going to say this.state.

114
00:07:34.899 --> 00:07:38.875
We're initializing our state
here in the constructor.

115
00:07:38.875 --> 00:07:42.365
And we're going to keep
track of the search term,

116
00:07:42.365 --> 00:07:45.605
which is going to be,
this is some sort of debug

117
00:07:45.605 --> 00:07:52.286
statement.
&gt;&gt; Brian Holt: Eventually

118
00:07:52.286 --> 00:07:57.215
we're gonna make this just an empty string
to be initialized with but, I want to

119
00:07:57.215 --> 00:08:01.868
put this debug statement there so,
you can kind of see how we're using it.

120
00:08:01.868 --> 00:08:02.694
Okay?

121
00:08:02.694 --> 00:08:10.055
So, now we have some state for search.
&gt;&gt; Brian Holt: So

122
00:08:10.055 --> 00:08:16.149
what I want you to do is I
want you to come in here and

123
00:08:16.149 --> 00:08:23.150
on the input say value
={this.state.searchTerm}

124
00:08:29.556 --> 00:08:30.404
&gt;&gt; Brian Holt: Okay, so

125
00:08:30.404 --> 00:08:36.552
you should be able to save that, and
come back over to your browser and

126
00:08:36.552 --> 00:08:40.898
you should see here the value
of this is now tied to

127
00:08:40.898 --> 00:08:45.353
whatever the initial value of state was,
right?

128
00:08:45.353 --> 00:08:53.849
Now I want you to try and type in there.
&gt;&gt; Brian Holt: I'm typing, I promise.

129
00:08:53.849 --> 00:08:55.613
I'm not just making noises.

130
00:08:55.613 --> 00:08:56.618
We broke it, right?

131
00:08:56.618 --> 00:08:59.245
It doesn't work.
&gt;&gt; Speaker 2: Locked me out.

132
00:08:59.245 --> 00:09:03.232
&gt;&gt; Brian Holt: [LAUGH] So, what happened?

133
00:09:03.232 --> 00:09:05.959
We broke the browser.

134
00:09:05.959 --> 00:09:07.952
It's actually pretty hard to do, right?

135
00:09:07.952 --> 00:09:11.466
Typically breaking an input
like this takes work.

136
00:09:11.466 --> 00:09:13.283
[LAUGH].

137
00:09:13.283 --> 00:09:16.886
So let's evaluate what's
actually happening here.

138
00:09:16.886 --> 00:09:20.542
So I press a key, right?

139
00:09:20.542 --> 00:09:22.411
That fires off an event.

140
00:09:22.411 --> 00:09:24.602
That event is caught by React.

141
00:09:24.602 --> 00:09:27.475
And then Reacts says,
an event happened, right?

142
00:09:27.475 --> 00:09:29.373
I'm gonna kick off a re-render.

143
00:09:29.373 --> 00:09:33.901
So it re-renders everything and then finds
the diff of between what was there and

144
00:09:33.901 --> 00:09:36.509
what you're trying to put there now,
right?

145
00:09:36.509 --> 00:09:42.131
So in this particular case, if I type
a letter, and then it re-renders and

146
00:09:42.131 --> 00:09:48.667
it goes back to re-render this value right
here, what is this.state.searchTerm?

147
00:09:48.667 --> 00:09:51.968
But still this is some sort
of debug statement right and

148
00:09:51.968 --> 00:09:55.575
as soon as I press that key
nothing is modifying that right?

149
00:09:55.575 --> 00:09:59.596
So every time I kick off an event you
still end up with that same string,

150
00:09:59.596 --> 00:10:00.221
alright?

151
00:10:00.221 --> 00:10:03.232
Hence, that's why it never changes, right?

152
00:10:03.232 --> 00:10:08.290
Because whenever we kick-off those events,
nothing goes back and modifies its estate.

153
00:10:08.290 --> 00:10:11.633
So it's always gonna
re-render what it has.

154
00:10:11.633 --> 00:10:13.056
Does it make sense?

155
00:10:13.056 --> 00:10:15.897
So now we need to de-break that.

156
00:10:15.897 --> 00:10:20.028
So we need to get an onChange handler.

157
00:10:20.028 --> 00:10:23.561
So onChange equals

158
00:10:23.561 --> 00:10:30.192
this.handleSearchTermChange.

159
00:10:30.192 --> 00:10:35.166
And we'll create a method
called handleSearchTermChange.

160
00:10:35.166 --> 00:10:42.615
The text in an event
calls this.setState and

161
00:10:42.615 --> 00:10:47.319
searchTerm which is going to

162
00:10:47.319 --> 00:10:52.030
be event.target.value.

163
00:10:52.030 --> 00:10:54.959
So, now we have this method here.

164
00:10:54.959 --> 00:10:59.743
HandleSearchTermChange which is
going to be called every time

165
00:10:59.743 --> 00:11:03.273
a change event happens on this input,
right?

166
00:11:03.273 --> 00:11:09.720
And in turn it's gonna call this.setState,
which is a way that you change state.

167
00:11:09.720 --> 00:11:16.170
So again, it's do not do
this.state.searchTerm = 'blah' right?

168
00:11:16.170 --> 00:11:17.504
Don't do that.

169
00:11:17.504 --> 00:11:21.938
The reason being is, this will work,
this actually will modify the state.

170
00:11:21.938 --> 00:11:24.619
React doesn't put any
safeguards in front of you.

171
00:11:24.619 --> 00:11:28.787
The problem is, if you do that,
React doesn't know something changed.

172
00:11:28.787 --> 00:11:31.862
It's not observing for
those sorts of changes.

173
00:11:31.862 --> 00:11:36.739
You need to let React know, hey React I
called set state, now you need to

174
00:11:36.739 --> 00:11:41.475
kick off another re-render, right,
so that's how that happens.

175
00:11:41.475 --> 00:11:43.671
So that's why we call this.set state,

176
00:11:43.671 --> 00:11:47.221
this is just a way that we let React know,
hey I'm updating this,

177
00:11:47.221 --> 00:11:52.093
you need to kick off a re-render.
&gt;&gt; Brian Holt: It's actually,

178
00:11:52.093 --> 00:11:53.637
I'm simplifying there.

179
00:11:53.637 --> 00:11:56.728
To be honest with you, it is actually
batching your changes, so you can

180
00:11:56.728 --> 00:12:00.142
call setState a bunch of times in a row
and it'll only kick off one re-render.

181
00:12:00.142 --> 00:12:04.281
So you're kind of like opting into that
optimization path by using setState.

182
00:12:04.281 --> 00:12:08.878
Or in other words,
do not modify state directly,

183
00:12:08.878 --> 00:12:12.932
that's the take a way here, use setState.

184
00:12:12.932 --> 00:12:17.063
So if I save this,
still not quite there right?

185
00:12:17.063 --> 00:12:18.871
This still doesn't actually work.

186
00:12:18.871 --> 00:12:23.039
If you go back here and
refresh and I type in here,

187
00:12:23.039 --> 00:12:27.120
you're gonna get all
sorts of error messages.

188
00:12:27.120 --> 00:12:29.966
It says you can't read
setState of undefined.

189
00:12:29.966 --> 00:12:31.560
This is new as well.

190
00:12:31.560 --> 00:12:36.577
This finally got long enough that
preview said, I'm gonna wrap this.

191
00:12:36.577 --> 00:12:39.444
So while this looks weird for
HTML to be written this way,

192
00:12:39.444 --> 00:12:41.969
this is very normal to see
React written this way.

193
00:12:41.969 --> 00:12:44.289
Once you start getting these
really long HTML elements,

194
00:12:44.289 --> 00:12:46.183
it's just easier to see
it on multiple lines.

195
00:12:46.183 --> 00:12:48.181
So that's how that happened.

196
00:12:48.181 --> 00:12:50.086
Okay.

197
00:12:50.086 --> 00:12:53.344
So here, handleSearchTerm.

198
00:12:53.344 --> 00:12:55.569
This get's called on every event, right.

199
00:12:55.569 --> 00:12:57.877
Where is this event handler called?

200
00:12:57.877 --> 00:13:03.787
The answer is I don't know, but
the answer is not here, right.

201
00:13:03.787 --> 00:13:06.337
It's not getting called
within this context.

202
00:13:06.337 --> 00:13:11.573
So what is this,
wherever handleSearchTerm is being called,

203
00:13:11.573 --> 00:13:17.917
again, I don't know but it's not search
and it needs to be search, right?

204
00:13:17.917 --> 00:13:22.549
But because we're calling this
stat set state on search we wanna

205
00:13:22.549 --> 00:13:24.964
modify that instance of search.

206
00:13:24.964 --> 00:13:29.518
So in order words we need to bind
the context to be the correct context.

207
00:13:29.518 --> 00:13:33.826
There's several ways to do this, I will
show you the bad way, which inevitably

208
00:13:33.826 --> 00:13:38.160
you'll see somebody write it this way
because it's the lazy way of writing it.

209
00:13:38.160 --> 00:13:42.574
I could totally put .bind(this)}.

210
00:13:42.574 --> 00:13:46.797
I'll save this,
I'm sure lint is going to yell at me.

211
00:13:46.797 --> 00:13:51.007
JS prompt should not use .bind, good job.

212
00:13:51.007 --> 00:13:53.656
But it will work right.

213
00:13:53.656 --> 00:13:58.782
Now this works and
the stays being set correctly.

214
00:13:58.782 --> 00:14:02.346
Why is this bad, this is bad because
if you remember I was telling

215
00:14:02.346 --> 00:14:06.900
you rendering is called a lot right, its
get called every single time that an event

216
00:14:06.900 --> 00:14:09.540
gets kicked off to make
sure something change or

217
00:14:09.540 --> 00:14:13.991
something didn't changed,
&gt;&gt; Brian Holt: What

218
00:14:13.991 --> 00:14:16.302
happens when I call .bind?

219
00:14:16.302 --> 00:14:20.746
It's creating a new function every
single time render gets called.

220
00:14:20.746 --> 00:14:25.982
Which, functions are cheap but
they certainly are not free, right?

221
00:14:25.982 --> 00:14:29.258
And particularly binds,
bind is a pretty expensive one.

222
00:14:29.258 --> 00:14:32.924
Recent versions of Chrome are a lot
better, but if you're more than two or

223
00:14:32.924 --> 00:14:36.177
three versions old of Chrome, or
pretty much any other browser,

224
00:14:36.177 --> 00:14:37.498
it's really expensive.

225
00:14:37.498 --> 00:14:40.294
So in other words,
this is bad, do not do it.

226
00:14:40.294 --> 00:14:43.832
And if you see your colleagues do it,
just throw something at them, right.

227
00:14:43.832 --> 00:14:49.399
So, that one is out.
&gt;&gt; Brian Holt: So, our answer is here.

228
00:14:49.399 --> 00:14:53.553
We're gonna say
this.handleSearchTermChange =

229
00:14:53.553 --> 00:15:01.317
this.handleSearchTermChange.bind(this).
&gt;&gt; Brian Holt: This

230
00:15:01.317 --> 00:15:07.248
will happen once in the constructor and
then it's forever working.

231
00:15:07.248 --> 00:15:10.533
So this looks super awkward, right?

232
00:15:10.533 --> 00:15:15.457
But now any time handle search
term change gets called,

233
00:15:15.457 --> 00:15:20.506
we are guaranteed it's going
to be in the right context.

234
00:15:20.506 --> 00:15:23.948
So again, if we come in here,
now this works again, and

235
00:15:23.948 --> 00:15:25.943
we're not getting any errors.

236
00:15:32.190 --> 00:15:35.151
&gt;&gt; Brian Holt: So you'll see this a lot.

237
00:15:35.151 --> 00:15:38.272
This is valid ES6 today, everything works.

238
00:15:38.272 --> 00:15:44.222
This is the way, for example,
for a long time at Netflix,

239
00:15:44.222 --> 00:15:48.951
I was writing it this way.
&gt;&gt; Speaker 3: Supposed an arrow function

240
00:15:48.951 --> 00:15:55.105
is just as expensive as using bind?
&gt;&gt; Brian Holt: Yeah.

241
00:15:55.105 --> 00:16:00.361
If you're creating an arrow function
inside of here, yeah it is.

