WEBVTT

1
00:00:00.390 --> 00:00:04.010
&gt;&gt; Brian Holt: So let's move beyond what
happens after we get done with the UI.

2
00:00:04.010 --> 00:00:06.973
So a handleSearchTermChange gets
called cuz an event happened, right?

3
00:00:06.973 --> 00:00:08.892
I typed black in here, right?

4
00:00:11.176 --> 00:00:14.126
&gt;&gt; Brian Holt: So
I get events.target.value this is gonna

5
00:00:14.126 --> 00:00:15.240
be black.

6
00:00:15.240 --> 00:00:17.831
I'm going to create a new action
based on what happened in the action

7
00:00:17.831 --> 00:00:18.566
creator, right?

8
00:00:18.566 --> 00:00:21.836
So it's going to be action type,
set search term,

9
00:00:21.836 --> 00:00:24.888
action.payload is going to be black,
right?

10
00:00:24.888 --> 00:00:28.690
And this is going to be
dispatched to Redux.

11
00:00:28.690 --> 00:00:34.394
So let's go to reducers.js, okay?

12
00:00:34.394 --> 00:00:40.020
The root reducer is now going to be
called with the existing state, right?

13
00:00:41.120 --> 00:00:44.290
So the default state is gonna
be something here, right?

14
00:00:45.620 --> 00:00:49.300
And the action which,
the one that we just created, right?

15
00:00:49.300 --> 00:00:56.310
It's gonna be action_type, setSearchTerm,
and action_payload black, okay?

16
00:00:56.310 --> 00:00:59.475
It's gonna say, okay,
I'm gonna go into this switch statement,

17
00:00:59.475 --> 00:01:03.094
based on the action_type, and it's
gonna say what is the action type here?

18
00:01:03.094 --> 00:01:04.472
Is it setSearchTerm?

19
00:01:04.472 --> 00:01:10.190
Yes it is setSearchTerm so
it's going to return the result of

20
00:01:10.190 --> 00:01:15.900
setSearchTerm the reducer with state and
action right?

21
00:01:15.900 --> 00:01:17.930
So state here is still the same state,

22
00:01:17.930 --> 00:01:21.810
it's the initial state of
the redux store and action

23
00:01:21.810 --> 00:01:24.970
is going to be that same action that we
created in the action creator, right?

24
00:01:24.970 --> 00:01:30.000
Type setSearchTerm, and
payload black, right?

25
00:01:30.000 --> 00:01:36.176
It's then going to call object.assign,
with a new object, the old state.

26
00:01:36.176 --> 00:01:41.526
So if there was, for
example other stuff here, right?

27
00:01:43.892 --> 00:01:45.824
&gt;&gt; Brian Holt: It's not
gonna overwrite that,

28
00:01:45.824 --> 00:01:49.340
it's only going to overwrite search term,
right?

29
00:01:49.340 --> 00:01:53.130
That's why you have to be careful not
to blow away the rest of your state.

30
00:01:53.130 --> 00:01:56.115
And then it's going to overwrite
only search term with whatever is in

31
00:01:56.115 --> 00:01:57.170
action.payload, so

32
00:01:57.170 --> 00:01:59.919
in this particular case it's gonna be
black cuz that's what these are typed.

33
00:02:00.980 --> 00:02:03.950
So something is going to become black,
right?

34
00:02:05.740 --> 00:02:06.950
We're going to return this,

35
00:02:06.950 --> 00:02:10.920
which then gets returned here,
which then gets returned back to redux.

36
00:02:10.920 --> 00:02:15.110
And whatever the result of this set
search term here is going to be

37
00:02:15.110 --> 00:02:18.670
the new state of redux, right?

38
00:02:18.670 --> 00:02:22.890
That's going to inform react is like her,
I had a change, right?

39
00:02:22.890 --> 00:02:26.159
And then React is gonna say
cool I'm gonna re-render and

40
00:02:26.159 --> 00:02:29.510
then that's how we end up back
at a [INAUDIBLE] state right?

41
00:02:29.510 --> 00:02:31.218
Like now Redux has a new state,

42
00:02:31.218 --> 00:02:34.977
and then the UI is going to re-render
based on the site of the Redux.

43
00:02:38.425 --> 00:02:41.700
&gt;&gt; Brian Holt: That's it [LAUGH].

44
00:02:41.700 --> 00:02:45.043
So like I told you,
we used to have a pretty tight loop, and

45
00:02:45.043 --> 00:02:48.953
we extended this loop quite a bit
to get redux into the application.

46
00:02:52.650 --> 00:02:56.873
&gt;&gt; Brian Holt: So let's see that in
action, it's not gonna be super-exciting

47
00:02:56.873 --> 00:03:00.422
upfront and
then I'll push a branch right after this.

48
00:03:00.422 --> 00:03:05.065
So, there was nothing in here right now,
but now I can type into it.

49
00:03:05.065 --> 00:03:06.940
Hopefully, we're not seeing any errors.

50
00:03:09.080 --> 00:03:09.580
&gt;&gt; Brian Holt: Yep.

51
00:03:12.054 --> 00:03:16.118
&gt;&gt; Brian Holt: So
let's just prove it to you really quick.

52
00:03:16.118 --> 00:03:22.472
Let's go into landing.jsx,
instead of saying this,

53
00:03:22.472 --> 00:03:27.214
we're gonna say, props.searchTerm.

54
00:03:27.214 --> 00:03:29.498
So now if you refresh,
nothing should be there up front.

55
00:03:29.498 --> 00:03:33.695
But as soon I start typing into it, it's
gonna be reading that props from redux.

56
00:03:37.571 --> 00:03:39.053
&gt;&gt; Brian Holt: All right,
what questions do you have here?

57
00:03:39.053 --> 00:03:41.293
I mean,
the question you might ask is, why?

58
00:03:41.293 --> 00:03:43.713
[LAUGH] Why would you do this to yourself?

59
00:03:43.713 --> 00:03:48.349
That's a very good question,
of why would you do this to yourself?

60
00:03:48.349 --> 00:03:50.851
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Brian Holt: As you can see here,

61
00:03:50.851 --> 00:03:52.175
this adds a lot of complexity and

62
00:03:52.175 --> 00:03:54.538
there is multiple more steps
that we need to get through.

63
00:03:54.538 --> 00:03:58.359
We used to be able to see everything in
one file, like the whole loop used to be

64
00:03:58.359 --> 00:04:01.856
tightly wound into one file and
now we spread across like five files.

65
00:04:01.856 --> 00:04:04.321
It's still very predictable, right?

66
00:04:04.321 --> 00:04:10.010
What I showed you this long loop that
we through, it's the same every time.

67
00:04:10.010 --> 00:04:13.270
And being able to predict how your
state is gonna influence your app

68
00:04:13.270 --> 00:04:15.080
is very valuable.

69
00:04:15.080 --> 00:04:18.140
So it´s not horrible, it´s just longer.

70
00:04:18.140 --> 00:04:21.465
And when you´re dealing with states spread
across multiple different parts, right?

71
00:04:21.465 --> 00:04:24.561
The only thing you have to do,
as you see here with landing.

72
00:04:27.797 --> 00:04:31.600
&gt;&gt; Brian Holt: See I just
subscribe to the state right here.

73
00:04:31.600 --> 00:04:34.970
So if I have the another part of the
application who cares about search term

74
00:04:34.970 --> 00:04:38.350
just as much as signing does,
it just has to subscribe to the store and

75
00:04:38.350 --> 00:04:40.440
it's magically available.

76
00:04:40.440 --> 00:04:45.126
So that's powerful, that's really cool and
that's really the big payoff here is that

77
00:04:45.126 --> 00:04:49.116
only the components that care about
the piece of state have to subscribe and

78
00:04:49.116 --> 00:04:51.354
none of the parents have to care about it.

79
00:04:51.354 --> 00:04:53.854
That's what's powerful about Redux.

80
00:04:57.531 --> 00:04:59.692
&gt;&gt; Brian Holt: So any questions,
or should we keep going?

81
00:05:02.840 --> 00:05:06.380
&gt;&gt; Brian Holt: Usually people are like,
no, I hate you, Redux, I don't care,

82
00:05:06.380 --> 00:05:08.760
I'm never gonna use you.

83
00:05:08.760 --> 00:05:12.230
And I really try not to sell it short, but

84
00:05:12.230 --> 00:05:14.620
I also want you to be aware of
what you're getting yourself into.

85
00:05:14.620 --> 00:05:16.990
Because a lot of people just are like
well if I'm gonna use React,

86
00:05:16.990 --> 00:05:18.180
I guess I have to use Redux.

87
00:05:18.180 --> 00:05:20.850
That is not true, definitely not true.

