WEBVTT

1
00:00:00.280 --> 00:00:02.290
&gt;&gt; Brian Holt: Now if we come back here,
everything should be working, but

2
00:00:02.290 --> 00:00:06.170
we're getting this error down here
in the console which is each item,

3
00:00:06.170 --> 00:00:09.380
each child in an array should
have a unique key property.

4
00:00:10.630 --> 00:00:14.265
So you should be seeing that right
now cuz we have not fixed it.

5
00:00:14.265 --> 00:00:15.007
Let's talk about that.

6
00:00:17.667 --> 00:00:21.811
&gt;&gt; Brian Holt: So imagine we had a sort
ability on here that we could sort shows

7
00:00:21.811 --> 00:00:24.203
by title ascending, descending,

8
00:00:24.203 --> 00:00:28.761
by when it was released sort by
all these different things, right?

9
00:00:28.761 --> 00:00:32.066
Well, what would be happening is we'd
have this array of components and

10
00:00:32.066 --> 00:00:34.950
we'd be like changing the order of them,
right?

11
00:00:34.950 --> 00:00:39.530
And each one of these components has
a somewhat nested style of components,

12
00:00:39.530 --> 00:00:42.080
there's components, within components,
within components, right?

13
00:00:43.800 --> 00:00:48.230
Well right now the way it works
is React is going to check

14
00:00:50.210 --> 00:00:53.090
is this array as the same
as the one that was there.

15
00:00:53.090 --> 00:00:56.950
And it's gonna say no, and
then it's gonna blow everything away and

16
00:00:56.950 --> 00:00:58.280
totally rerender everything.

17
00:00:59.610 --> 00:01:03.623
Now that should like set off some warning
bells in your head because that's really

18
00:01:03.623 --> 00:01:04.796
inefficient, right?

19
00:01:04.796 --> 00:01:07.618
What it could be doing is
just reorganizing them right?

20
00:01:07.618 --> 00:01:11.478
Because that's all we're doing so it could
keep all of that dom structure all those

21
00:01:11.478 --> 00:01:13.199
dom nodes and just move them around.

22
00:01:14.320 --> 00:01:18.020
And these aren't particularly
complicated components, right?

23
00:01:18.020 --> 00:01:21.870
But imagine if they were deeply nested
components that had like, D3 charts, and

24
00:01:21.870 --> 00:01:24.350
SVGs, and
all that kind of crazy stuff on there.

25
00:01:24.350 --> 00:01:26.360
That could get really expensive,
really fast,

26
00:01:26.360 --> 00:01:27.629
especially if you have like 100 nodes.

27
00:01:29.370 --> 00:01:32.320
So now I'm painting like
worst case scenario for

28
00:01:32.320 --> 00:01:36.010
you but, hopefully I'm demonstrating you
to the problem that could exist here.

29
00:01:37.290 --> 00:01:42.256
So the way that you can sidestep this,
if we go back to search.jsx, we can give

30
00:01:42.256 --> 00:01:47.169
basically reacts like hey, here's
a handle that you can hold onto, right?

31
00:01:47.169 --> 00:01:51.795
Something really fast that you can
compare to see if something changed, and

32
00:01:51.795 --> 00:01:54.265
if the order of things changed, right?

33
00:01:54.265 --> 00:01:58.991
So I can say, key and
I can say key equal show dot,

34
00:01:58.991 --> 00:02:02.462
something that is unique about it.

35
00:02:02.462 --> 00:02:06.821
That's several pieces of information
that are unique about it, but

36
00:02:06.821 --> 00:02:09.613
the most obvious one is the imdbID, right?

37
00:02:09.613 --> 00:02:14.504
Typically itÂ´s gonna be some sort of
identifier like that, but I mean it like,

38
00:02:14.504 --> 00:02:19.320
maybe it's like your users table and
you can use the email as the key, right?

39
00:02:19.320 --> 00:02:22.590
The only thing that's required here is
unique for that particular objects.

40
00:02:24.280 --> 00:02:25.350
And a big no,

41
00:02:25.350 --> 00:02:31.060
no which a lot of people are tempted to
do is just say index right here, right?

42
00:02:31.060 --> 00:02:35.020
And then use index here,
but what did that bias?

43
00:02:35.020 --> 00:02:36.240
Literally nothing, right?

44
00:02:36.240 --> 00:02:39.677
Because if anything get sorted out of
order then the index is gonna change and

45
00:02:39.677 --> 00:02:41.569
it's gonna re-render anyway, right?

46
00:02:41.569 --> 00:02:47.182
So don't use index that way, unless that's
literally the only thing that changes.

47
00:02:49.805 --> 00:02:52.345
&gt;&gt; Brian Holt: So in this case,
we're gonna use imdbID.

48
00:02:52.345 --> 00:02:56.981
That way, let's say if I move Atlanta
from the first one to the last one,

49
00:02:56.981 --> 00:03:00.230
it can just say, okay,
this imdbID is the same.

50
00:03:00.230 --> 00:03:02.169
I'm just gonna take this one and
plop it down here.

51
00:03:02.169 --> 00:03:03.991
Make sense?

52
00:03:06.464 --> 00:03:07.242
&gt;&gt; Brian Holt: Cool.

53
00:03:10.074 --> 00:03:14.936
&gt;&gt; Brian Holt: So, now we should
be able to go back over here and

54
00:03:14.936 --> 00:03:17.500
everything is all good.

