WEBVTT

1
00:00:00.000 --> 00:00:03.669
&gt;&gt; Brian Holt: And now we're gonna get
into testing Redux which is way more fun.

2
00:00:03.669 --> 00:00:04.700
Why is it fun?

3
00:00:04.700 --> 00:00:06.867
Because you don't have to
actually write the test,

4
00:00:06.867 --> 00:00:08.500
the dev tools will write tests for you.

5
00:00:10.371 --> 00:00:14.507
&gt;&gt; Brian Holt: So let me show you what
I mean unless there's any questions.

6
00:00:18.045 --> 00:00:20.102
&gt;&gt; Brian Holt: All right,
let's keep going then.

7
00:00:20.102 --> 00:00:24.320
So,
&gt;&gt; Brian Holt: Refreshing the page,

8
00:00:24.320 --> 00:00:26.775
we're still on the search page.

9
00:00:26.775 --> 00:00:34.547
And I wanna test right now
the ability to do search, right?

10
00:00:34.547 --> 00:00:39.305
So what I'm going to do is copy the word

11
00:00:39.305 --> 00:00:44.435
black,
&gt;&gt; Brian Holt: And I'm going to paste

12
00:00:44.435 --> 00:00:48.142
it in here so I have one atomic action
if I'm going from empty string to black.

13
00:00:48.142 --> 00:00:51.240
So I'm gonna paste that, okay?

14
00:00:51.240 --> 00:00:54.444
That dispatched one action
to the Redux store, right?

15
00:00:54.444 --> 00:00:57.429
So my state went from
empty string to black.

16
00:00:57.429 --> 00:01:01.158
So now if I go in here to Redux,
the tools,

17
00:01:01.158 --> 00:01:06.391
down at the bottom,
I'm gonna go into Inspector, okay?

18
00:01:06.391 --> 00:01:08.436
I'm gonna click on this SEARCH_TERM one,
right?

19
00:01:08.436 --> 00:01:11.523
That's the action that I
care about at this moment.

20
00:01:11.523 --> 00:01:14.856
And you can see here I went
from empty string to black,

21
00:01:14.856 --> 00:01:16.940
exactly like I expected, okay?

22
00:01:16.940 --> 00:01:19.796
Notice that this test thing over here?

23
00:01:19.796 --> 00:01:24.437
I'm going to click on that,
and if you look at this.

24
00:01:24.437 --> 00:01:31.392
This is a test case written just for
you without doing anything.

25
00:01:31.392 --> 00:01:37.492
I can literally just copy that,
go over here, create a new file.

26
00:01:37.492 --> 00:01:43.054
This is still going into
the test directory inside of JS.

27
00:01:43.054 --> 00:01:48.164
I'm gonna call it Reducers.spec.js.

28
00:01:48.164 --> 00:01:51.889
Going to paste that in there.

29
00:01:51.889 --> 00:01:55.322
It did get the path wrong, so
you're gonna have to fix the path, but

30
00:01:55.322 --> 00:01:57.384
it's a small price to pay in my opinion.

31
00:02:00.709 --> 00:02:08.016
&gt;&gt; Brian Holt: And I'm going to save it
&gt;&gt; Brian Holt: You're

32
00:02:08.016 --> 00:02:12.694
gonna have to fix some Lint errors there,
but again, it's not too bad.

33
00:02:15.251 --> 00:02:17.700
&gt;&gt; Brian Holt: And
now I have a free test case.

34
00:02:17.700 --> 00:02:21.243
It's not really doing anything too crazy,

35
00:02:21.243 --> 00:02:25.457
it's pulling in the route reducer,
it's saying,

36
00:02:25.457 --> 00:02:30.819
given this initial state,
which is the initial state of your app,

37
00:02:30.819 --> 00:02:34.573
given this action I expect
that to equal this.

38
00:02:38.624 --> 00:02:42.058
&gt;&gt; Brian Holt: So now,
if I go in here and say yarn test,

39
00:02:42.058 --> 00:02:44.584
I should have a passing test.

40
00:02:46.661 --> 00:02:48.196
&gt;&gt; Brian Holt: Which I do.

41
00:02:51.370 --> 00:02:54.610
&gt;&gt; Brian Holt: I get super excited about
this because this is just free, right?

42
00:02:54.610 --> 00:02:57.887
It's like I don't have to do anything,
I just have to copy and paste,

43
00:02:57.887 --> 00:02:59.848
fix my lint errors, and it's just done.

44
00:02:59.848 --> 00:03:03.059
So I'm gonna make this
a little bit more succinct.

45
00:03:03.059 --> 00:03:06.582
What we're actually testing
here is SET_SEARCH_TERM.

46
00:03:06.582 --> 00:03:08.008
I think that's helpful, so

47
00:03:08.008 --> 00:03:11.286
that people can know that that's
exactly what you're testing.

48
00:03:11.286 --> 00:03:16.804
If you wanted to you could go in here and
create several test cases of like,

49
00:03:16.804 --> 00:03:20.377
going from black to two or
something like that.

50
00:03:20.377 --> 00:03:24.329
But for now I'm plenty pleased with this.

51
00:03:24.329 --> 00:03:30.815
So let's go in and
do the same thing for our API test case.

52
00:03:30.815 --> 00:03:36.205
So let's do west and go into Westworld.

53
00:03:36.205 --> 00:03:41.042
So I'm going to open Westworld but
I'm actually going to refresh the page

54
00:03:41.042 --> 00:03:45.032
cuz I'm interested in going from
no state to having a state.

55
00:03:45.032 --> 00:03:50.962
So if we look down here,
I need the API server to be up as well.

56
00:03:50.962 --> 00:03:54.850
So I'm gonna go into talks fem, so

57
00:03:54.850 --> 00:04:00.759
I'm back in my directory,
I'm gonna say Yarn api.

58
00:04:04.977 --> 00:04:05.539
&gt;&gt; Brian Holt: And now,

59
00:04:05.539 --> 00:04:11.523
I'm gonna refresh the page
&gt;&gt; Brian Holt: And

60
00:04:11.523 --> 00:04:14.017
now I get this test case back.

61
00:04:14.017 --> 00:04:17.703
So I'm gonna click on, the ADD API one.

62
00:04:20.234 --> 00:04:23.583
&gt;&gt; Brian Holt: I need Inspector,
so this one right here,

63
00:04:23.583 --> 00:04:26.012
click on that, click on Test.

64
00:04:26.012 --> 00:04:31.180
Something worth noting is there
are multiple templates here.

65
00:04:31.180 --> 00:04:35.127
So if you wanna do a Mocha test or a Tape
test or an Ava test, it's not tied to

66
00:04:35.127 --> 00:04:39.603
Jest, you don't have to use Jest, that's
just the one that we're using, okay?

67
00:04:39.603 --> 00:04:42.884
I'm gonna copy my test here, come in here,

68
00:04:42.884 --> 00:04:47.237
it's grabbing all of the API data,
which is fine with me.

69
00:04:49.627 --> 00:04:53.756
&gt;&gt; Brian Holt: This is
gonna be ADD_API_DATA.

70
00:04:53.756 --> 00:05:01.313
Then I'm gonna say const state = blah and
lo and behold, we have another test case.

71
00:05:01.313 --> 00:05:04.286
And it's gonna do all
sorts of nice formatting.

72
00:05:04.286 --> 00:05:05.959
Think you're prettier and

73
00:05:05.959 --> 00:05:10.258
let's go run our test to make sure
it's working where we anticipate.

74
00:05:10.258 --> 00:05:16.007
Yarn test, all passing.

75
00:05:16.007 --> 00:05:17.672
So, cool?

76
00:05:17.672 --> 00:05:18.831
Two free test cases.

77
00:05:26.347 --> 00:05:29.019
&gt;&gt; Brian Holt: Any questions about that so
far?

78
00:05:29.019 --> 00:05:31.932
&gt;&gt; Speaker 2: If you were to
restart you API server though,

79
00:05:31.932 --> 00:05:36.391
it would be in a different rating so
this test case could sort of fail.

80
00:05:36.391 --> 00:05:40.118
&gt;&gt; Brian Holt: This isn't actually
hitting the API though, right?

81
00:05:40.118 --> 00:05:45.106
It's calling reducer with this
search term, or this initial stage.

82
00:05:45.106 --> 00:05:45.747
&gt;&gt; Speaker 2: Okay.

83
00:05:45.747 --> 00:05:48.936
&gt;&gt; Brian Holt: And this action.

84
00:05:48.936 --> 00:05:52.824
It came from the API once, right?

85
00:05:52.824 --> 00:05:57.081
But it's the same store,
given this action it looks like this.

86
00:05:57.081 --> 00:05:58.364
That's gonna be true always.

87
00:05:58.364 --> 00:05:59.445
&gt;&gt; Speaker 2: Got you.

88
00:05:59.445 --> 00:06:03.224
&gt;&gt; Brian Holt: I think you're hitting
something on an important concept here,

89
00:06:03.224 --> 00:06:05.504
is that this is why Redux is so awesome.

90
00:06:05.504 --> 00:06:09.412
This is why I absolutely adore it,
is that given a action and

91
00:06:09.412 --> 00:06:12.238
an initial state, it returns a new state.

92
00:06:12.238 --> 00:06:14.968
And that's really easy to test right?

93
00:06:14.968 --> 00:06:20.939
Input in, output out, nothing in
between right like that's really it.

94
00:06:20.939 --> 00:06:25.060
So given this state,
given this action it looks like this.

95
00:06:25.060 --> 00:06:27.761
And if you want to test something
more complicated, right?

96
00:06:27.761 --> 00:06:32.223
If I come in here and say,
&gt;&gt; Brian Holt: For example,

97
00:06:32.223 --> 00:06:35.405
let's say I had a bug that if
I won't go into Westworld,

98
00:06:35.405 --> 00:06:39.768
then go back out, and immediately go
into Game of Thrones, I have some bug.

99
00:06:39.768 --> 00:06:43.495
Let's say I fixed it, and I wanna
make sure that doesn't happen again.

100
00:06:43.495 --> 00:06:48.115
I can come back in here on the second one,
and I go in here and say test, right?

101
00:06:48.115 --> 00:06:53.619
Actually it's giving me the test case
of going from having just Westworld,

102
00:06:53.619 --> 00:06:57.061
having west world and
Game of Thrones, right?

103
00:06:57.061 --> 00:06:58.983
So feel free again to come in here.

104
00:06:58.983 --> 00:07:01.138
This is gonna be a longer test case,
right?

105
00:07:01.138 --> 00:07:08.267
But if I come in here and
say that, just say Const state.

106
00:07:10.456 --> 00:07:15.961
&gt;&gt; Brian Holt: And this is
ADD_API_DATA with two shows, right?

107
00:07:15.961 --> 00:07:20.028
Now I have another test case
that tests that, as well.

108
00:07:20.028 --> 00:07:22.113
Again, you can run here in test.

109
00:07:25.730 --> 00:07:26.871
&gt;&gt; Brian Holt: And I have one failing.

110
00:07:26.871 --> 00:07:30.625
Yeah, cuz I didn't delete
the import reducers up here.

111
00:07:34.355 --> 00:07:35.433
&gt;&gt; Brian Holt: So that's up to you.

112
00:07:35.433 --> 00:07:37.645
It depends on how crazy you wanna get,
right?

113
00:07:39.384 --> 00:07:42.556
&gt;&gt; Brian Holt: For me, one of the things
that really drives what test case

114
00:07:42.556 --> 00:07:45.156
I write is I wait for
something to fail, right?

115
00:07:45.156 --> 00:07:48.314
I fix it and then I write another test
case so I don't regress that way again.

116
00:07:48.314 --> 00:07:51.890
That's been a pretty
successful strategy for me.

117
00:07:51.890 --> 00:07:56.722
Typically test the happy path like
making sure that the things work

118
00:07:56.722 --> 00:07:58.713
the way that I anticipate.

119
00:07:58.713 --> 00:08:02.752
I will test error cases that anticipated
might hit and then from there,

120
00:08:02.752 --> 00:08:04.985
I just kinda wait for errors to come in.

121
00:08:04.985 --> 00:08:10.092
Once I fix an error, I try and write a
test so I don't regress back to into that.

122
00:08:11.474 --> 00:08:14.401
&gt;&gt; Brian Holt: Cool, any other questions?

123
00:08:18.526 --> 00:08:20.080
&gt;&gt; Brian Holt: Cool.

124
00:08:21.356 --> 00:08:25.372
&gt;&gt; Brian Holt: So
&gt;&gt; Brian Holt: That's how your gonna test

125
00:08:25.372 --> 00:08:28.586
the reducers,
that's the really easy way of doing it.

126
00:08:28.586 --> 00:08:31.487
There's nothing to say you can't
go write these tests yourself, but

127
00:08:31.487 --> 00:08:32.579
why not get them for free?

