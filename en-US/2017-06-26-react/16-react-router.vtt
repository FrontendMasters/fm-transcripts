WEBVTT

1
00:00:00.620 --> 00:00:03.800
&gt;&gt; Brian Holt: Let's talk about Router.

2
00:00:03.800 --> 00:00:08.310
So something like Ember,
something like Angular,

3
00:00:08.310 --> 00:00:13.350
these libraries/ frameworks ship
with routers built into them, so

4
00:00:13.350 --> 00:00:17.870
you can build robust,
single-page applications, right?

5
00:00:17.870 --> 00:00:22.750
Particularly, Ember is really
oriented to getting you to build

6
00:00:22.750 --> 00:00:24.080
a single page application.

7
00:00:24.080 --> 00:00:27.057
Don´t get me wrong, you can build things
with Ember without it, it´s just,

8
00:00:27.057 --> 00:00:28.150
it´s a part of the library.

9
00:00:29.260 --> 00:00:31.740
React has no opinion on the matter.

10
00:00:31.740 --> 00:00:33.970
In other words,
React does not include a router with it.

11
00:00:33.970 --> 00:00:36.580
So if you wanna build
a single page application,

12
00:00:36.580 --> 00:00:39.160
it´s up to you what tools you wanna use.

13
00:00:39.160 --> 00:00:41.210
For example,
you can use something like Director,

14
00:00:41.210 --> 00:00:44.170
which is totally agnostic to
frameworks underneath it.

15
00:00:44.170 --> 00:00:46.720
You can use any framework with Director.

16
00:00:48.190 --> 00:00:53.610
However, there is one in particular
router that's built specifically with

17
00:00:53.610 --> 00:00:57.280
React in mind, and you may have
guessed it's called React Router.

18
00:00:57.280 --> 00:00:59.525
It's a very clever naming
scheme that we have

19
00:00:59.525 --> 00:01:04.777
here.
&gt;&gt; Brian Holt: React router is a really

20
00:01:04.777 --> 00:01:09.870
awesome piece of technology, particularly
the latest version which is version four.

21
00:01:09.870 --> 00:01:13.900
Really well thought out and
pretty easy to work with.

22
00:01:15.210 --> 00:01:18.599
It feels pretty intuitive to
working with React in general.

23
00:01:20.790 --> 00:01:24.610
People's complaint about it, and actually
the reason why I've come back here now

24
00:01:24.610 --> 00:01:28.270
three times is that the API thrashes
is a lot, it has thrashed a lot.

25
00:01:29.560 --> 00:01:35.040
So, I mean it had pretty huge rewrites
where people had to almost rewrite

26
00:01:35.040 --> 00:01:38.310
all of their routing code to
deal with their huge rewrites.

27
00:01:38.310 --> 00:01:41.319
From v3 to v4 in particular
was a really large rewrite.

28
00:01:42.620 --> 00:01:45.430
Understandably so, a lot of people
are really frustrated that they

29
00:01:45.430 --> 00:01:47.190
build their apps on top
of these libraries and

30
00:01:47.190 --> 00:01:50.970
then they just totally lose
all support underneath them.

31
00:01:50.970 --> 00:01:53.690
So that's the word of caution
I wanna give you is that

32
00:01:53.690 --> 00:01:56.160
this library has thrashed majorly twice.

33
00:01:56.160 --> 00:01:59.120
But then again,
Real's thrashed majorly once as well,

34
00:01:59.120 --> 00:02:03.090
and we all survived,
as far as I know, no one died.

35
00:02:03.090 --> 00:02:07.810
So, there are alternatives,
there are other great libraries out there.

36
00:02:07.810 --> 00:02:13.780
There is one called,
I believe it's React On Route,

37
00:02:13.780 --> 00:02:17.970
which is written by the same
guy that wrote Express and

38
00:02:17.970 --> 00:02:20.480
Koa and
half the other things that you use.

39
00:02:20.480 --> 00:02:22.519
And Stylus and Mocha and all those.

40
00:02:23.640 --> 00:02:24.810
And that one's pretty great.

41
00:02:24.810 --> 00:02:27.690
It's much more stripped down and bare.

42
00:02:27.690 --> 00:02:31.100
React router does a lot of really cool and
interesting things for you.

43
00:02:31.100 --> 00:02:35.290
So that's one we're gonna use
today cuz I would say that one has

44
00:02:35.290 --> 00:02:36.130
the greatest mind share.

45
00:02:36.130 --> 00:02:38.700
But I just wanted to let you know
that there are alternatives out there

46
00:02:40.000 --> 00:02:41.390
that are also valid choices.

47
00:02:44.000 --> 00:02:47.820
Okay, so we're gonna use,
the first thing we're gonna

48
00:02:47.820 --> 00:02:52.100
do is we're gonna split some of this
code out into its own component.

49
00:02:52.100 --> 00:02:55.372
So I want you to create a new file called

50
00:02:55.372 --> 00:03:00.939
landing.jsx.
&gt;&gt; Brian Holt: And

51
00:03:00.939 --> 00:03:05.882
what I want you to make live
in landing is pretty much all

52
00:03:05.882 --> 00:03:11.050
this code here in the middle,
so I'm gonna cut that out.

53
00:03:13.160 --> 00:03:20.062
Go to landing and I'm gonna say
import React from react const

54
00:03:20.062 --> 00:03:26.938
landing equals.
&gt;&gt; Brian Holt: This is one of my favorite

55
00:03:26.938 --> 00:03:33.020
parts about Prettier in general, I'm just
gonna paste that grossness in there right?

56
00:03:33.020 --> 00:03:36.460
I would never let this live as is right,
but guess what?

57
00:03:36.460 --> 00:03:37.930
Prettier is just gonna fix it for me.

58
00:03:37.930 --> 00:03:40.330
So I don't have to worry about
formatting it correctly.

59
00:03:40.330 --> 00:03:46.670
And then down at the bottom then I'm just
gonna say export default landing, right.

60
00:03:46.670 --> 00:03:50.900
And I'll just say that lo and
behold, everything is fixed.

61
00:03:50.900 --> 00:03:52.340
I just love that.

62
00:03:52.340 --> 00:03:57.304
It just brings joy to my soul.
&gt;&gt; Brian Holt: How much time have you

63
00:03:57.304 --> 00:03:59.102
spent formatting things, right?

64
00:03:59.102 --> 00:04:05.329
Just let the computer do it.
&gt;&gt; Brian Holt: Makes

65
00:04:05.329 --> 00:04:07.390
programming by stack overflow so
much easier.

66
00:04:11.560 --> 00:04:12.930
You laugh, its all of your jobs.

67
00:04:16.000 --> 00:04:17.030
Okay.

68
00:04:17.030 --> 00:04:21.998
So that's what landing looks like.
&gt;&gt; Brian Holt: Let's go

69
00:04:21.998 --> 00:04:23.130
back over to client app.

70
00:04:24.140 --> 00:04:28.034
What we're gonna do here,
import React from React,

71
00:04:28.034 --> 00:04:33.139
we're gonna import render from react-dom,
and then we're going to

72
00:04:33.139 --> 00:04:39.326
import HashRouter.
&gt;&gt; Brian Holt: And

73
00:04:39.326 --> 00:04:48.216
Route From 'react-router-dom'.
&gt;&gt; Brian Holt: Much like React,

74
00:04:48.216 --> 00:04:51.180
react-router works in multiple places.

75
00:04:51.180 --> 00:04:55.870
So there is a react-router-native,
I believe.

76
00:04:55.870 --> 00:04:57.860
And there's potential for other ones, and

77
00:04:57.860 --> 00:05:01.370
there's also just kind of agnostic ones,
like the memory router.

78
00:05:01.370 --> 00:05:05.278
So now we're gonna use HashRouter.
&gt;&gt; Brian Holt: And

79
00:05:05.278 --> 00:05:07.470
then I'll show you later how
to work with BrowseRouter.

80
00:05:08.760 --> 00:05:16.609
Okay, and then underneath that we're gonna
say import Landing from './Landing'.

81
00:05:18.060 --> 00:05:23.152
Okay,
&gt;&gt; Brian Holt: So

82
00:05:23.152 --> 00:05:28.357
the top level item inside of app is going

83
00:05:28.357 --> 00:05:35.019
to be HashRouter.
&gt;&gt; Brian Holt: And

84
00:05:35.019 --> 00:05:37.009
then inside of that we're
going to have one route.

85
00:05:39.100 --> 00:05:46.366
Which is going to be exact path='/'.

86
00:05:46.366 --> 00:05:50.548
And the component={Landing}.

87
00:05:57.079 --> 00:06:01.220
&gt;&gt; Brian Holt: So there's a bit going on
here, so let's unpack what's going on.

88
00:06:01.220 --> 00:06:05.260
Let's start with the route I think that's
kinda the easiest thing to reason about.

89
00:06:06.280 --> 00:06:08.470
This is one route of our application.

90
00:06:09.660 --> 00:06:14.178
It's saying that the path to get there
is slash, right, so it's the home page,

91
00:06:14.178 --> 00:06:19.720
and the exact means it must
exactly match that path.

92
00:06:19.720 --> 00:06:26.910
So if I did not have exact in there,
and I had slash foo or whatever right?

93
00:06:26.910 --> 00:06:28.880
Slash would still match that right?

94
00:06:30.850 --> 00:06:33.510
Let me rephrase that,
that's not what I wanted to say.

95
00:06:35.370 --> 00:06:44.600
What I meant to say was that if I went
to slash foo In the browser, right?

96
00:06:44.600 --> 00:06:46.820
This would still match slash foo, right?

97
00:06:48.490 --> 00:06:53.380
Because it works with, I forgot
the name of the path to something or

98
00:06:53.380 --> 00:06:56.309
other, I can't remember the name of
what the path matching library is.

99
00:06:57.920 --> 00:07:02.650
But just like if this was /foo,
and I want to /foo/bar, right?

100
00:07:02.650 --> 00:07:03.520
This would also match this.

101
00:07:03.520 --> 00:07:07.020
So if the left side of it matches
the route, it's gonna match on it.

102
00:07:07.020 --> 00:07:08.670
So that's why you need to do it exact.

103
00:07:08.670 --> 00:07:11.659
That's what you're anticipating,
you're saying it only match this, so

104
00:07:11.659 --> 00:07:12.826
it has to match exactly that or

105
00:07:12.826 --> 00:07:21.170
it doesn't match at all.
&gt;&gt; Brian Holt: Okay.

106
00:07:24.800 --> 00:07:25.710
So that's the route.

107
00:07:27.240 --> 00:07:28.865
Let's talk about hash router,

108
00:07:28.865 --> 00:07:34.640
cuz hash router is kind of a,
introduces us to an interesting concept.

109
00:07:34.640 --> 00:07:39.140
The component is like, render this out
if this path is matched here, right?

110
00:07:39.140 --> 00:07:43.120
So what it's gonna do is,
inside of this div right here,

111
00:07:43.120 --> 00:07:45.090
it'll render out whatever is in Landing.

112
00:07:45.090 --> 00:07:50.145
Does that make sense?
&gt;&gt; Brian Holt: So

113
00:07:50.145 --> 00:07:55.480
basically, you're saying, hey route,
if this path is matched, render Landing.

114
00:07:55.480 --> 00:07:59.659
If path is not matched, don't render
anything, that's how router works.

