WEBVTT

1
00:00:00.000 --> 00:00:04.776
&gt;&gt; Brian Holt: So what we're gonna be
doing now is doing some testing with

2
00:00:04.776 --> 00:00:05.465
React.

3
00:00:05.465 --> 00:00:10.339
React is actually not too bad to test,
providing you're not using a bunch of

4
00:00:10.339 --> 00:00:14.546
crazy libraries, cuz crazy
libraries get pretty tough to test.

5
00:00:14.546 --> 00:00:19.017
Right now we're not doing anything
too nuts, so it's not to bad.

6
00:00:19.017 --> 00:00:22.193
We are going to be doing
Jest testing today.

7
00:00:22.193 --> 00:00:27.207
I personally really enjoy Jest,
it's my testing framework of choice,

8
00:00:27.207 --> 00:00:31.808
but there's perfectly valid reasons
to choose Mocha, or AVA, or

9
00:00:31.808 --> 00:00:36.349
any of those other ones, so
feel free to switch to your favorite.

10
00:00:39.220 --> 00:00:41.695
&gt;&gt; Brian Holt: Jest, in particular,
is well-suited to test React,

11
00:00:41.695 --> 00:00:44.014
because it has something
called snapshot testing,

12
00:00:44.014 --> 00:00:46.452
which we're gonna take a bunch
of advantage of today.

13
00:00:46.452 --> 00:00:51.203
So something I didn't wanna tell you
is that, if you wanna learn about

14
00:00:51.203 --> 00:00:56.852
specifically Mocha testing with React,
you can watch version one of this course.

15
00:00:56.852 --> 00:01:02.189
You don't have to watch the whole course,
you can watch just the section on testing.

16
00:01:02.189 --> 00:01:04.543
And that's available to you as well.

17
00:01:04.543 --> 00:01:10.244
Okay, so what I want you to do now,
is in your JS directory,

18
00:01:10.244 --> 00:01:17.327
inside of it, I want you to create
a new directory called __tests__.

19
00:01:17.327 --> 00:01:22.025
This is just a convention for creating
tests, specifically to, I think AirBnB

20
00:01:22.025 --> 00:01:26.670
actually enforces it this way, that you
have to kind of structure it this way.

21
00:01:31.439 --> 00:01:33.468
&gt;&gt; Brian Holt: So, whatever,
I just roll with it.

22
00:01:33.468 --> 00:01:38.836
[LAUGH] I've seen lots of people do it
this way, so we'll do it too, okay.

23
00:01:38.836 --> 00:01:44.956
And now, inside of this test directory
I want you to create a new file and

24
00:01:44.956 --> 00:01:50.158
call it Search.spec.jsx,
you can call it search.spec or

25
00:01:50.158 --> 00:01:54.648
search.test, I don't care
which one you call it.

26
00:01:54.648 --> 00:01:58.060
Both of those will automatically
get picked up by Jest.

27
00:01:58.060 --> 00:01:59.300
I always, I just do spec, and

28
00:01:59.300 --> 00:02:02.140
I think the reason why I do that is
that I've always done it that way.

29
00:02:03.318 --> 00:02:07.488
But if .test sounds better to you,
then by all means go for it.

30
00:02:07.488 --> 00:02:12.742
So Search.spec.jsx, and
what we're gonna do inside

31
00:02:12.742 --> 00:02:17.558
of here is we're going to
import React from React.

32
00:02:17.558 --> 00:02:20.694
I guess it kind of bears mentioning

33
00:02:20.694 --> 00:02:26.118
that,
&gt;&gt; Brian Holt: There's

34
00:02:26.118 --> 00:02:27.580
lots of testing strategies.

35
00:02:27.580 --> 00:02:31.417
I'm just gonna show you probably the most
simple testing strategy like how to

36
00:02:31.417 --> 00:02:34.560
structure your test,
what to call your test.

37
00:02:34.560 --> 00:02:37.040
What I like to do is,
if I have a search component,

38
00:02:37.040 --> 00:02:39.900
I like to have another file
called search.spec.jsx, right?

39
00:02:39.900 --> 00:02:41.910
So that there's one to one mapping, right?

40
00:02:41.910 --> 00:02:46.080
So again, optimizing for
deletability if I delete search.jsx,

41
00:02:46.080 --> 00:02:49.260
I know I can just delete this
test along with it, right?

42
00:02:49.260 --> 00:02:55.138
It's an easy way of being able
to tell what's tied to what.

43
00:02:55.138 --> 00:03:00.598
Okay, import renderer from

44
00:03:00.598 --> 00:03:06.969
'react-test-renderer' and

45
00:03:06.969 --> 00:03:16.540
import Search from ' '../Search', okay?

46
00:03:16.540 --> 00:03:19.825
So react test surrender is gonna
allow us to do some testing.

47
00:03:19.825 --> 00:03:24.567
Like, we're gonna be able to render out
the search component and test it right,

48
00:03:24.567 --> 00:03:29.120
without actually having a dom underneath
it, which is gonna be pretty cool.

49
00:03:32.194 --> 00:03:35.276
&gt;&gt; Brian Holt: Okay, so one thing to
know about Jest is underneath the hood,

50
00:03:35.276 --> 00:03:36.940
it's actually just Jasmine.

51
00:03:36.940 --> 00:03:41.579
Right, so if you've ever done Jasmine
testing before, it's the same syntax.

52
00:03:41.579 --> 00:03:46.215
I've been told by the Facebook team that
they reserve the right to change that,

53
00:03:46.215 --> 00:03:48.570
so just be aware of that.

54
00:03:48.570 --> 00:03:52.230
So some of you have seen, and actually in
the last couple courses I did it this way,

55
00:03:52.230 --> 00:03:57.870
you can do describe blot, and then inside
of it you do, it should do this test.

56
00:03:57.870 --> 00:04:00.149
I decided to simplify this and
just do test.

57
00:04:01.630 --> 00:04:05.410
So again, there's several ways
you can describe functions and

58
00:04:05.410 --> 00:04:07.980
have it assertions inside of it.

59
00:04:07.980 --> 00:04:10.930
I'm just gonna have
a bunch of test functions.

60
00:04:10.930 --> 00:04:15.075
So this is all preference,
this is all correct, right?

61
00:04:15.075 --> 00:04:17.345
I'm just going with the simplest
one to teach, really.

62
00:04:17.345 --> 00:04:20.785
That's what I'm optimizing for, okay?

63
00:04:20.785 --> 00:04:23.645
And test is just a global
function that Jest

64
00:04:23.645 --> 00:04:25.675
is going to inject into this function.

65
00:04:25.675 --> 00:04:27.165
So it's gonna be globally available.

66
00:04:27.165 --> 00:04:28.544
So you don't have to
import it from anywhere.

67
00:04:31.165 --> 00:04:33.945
&gt;&gt; Brian Holt: Okay, so
Search renders correctly.

68
00:04:37.550 --> 00:04:41.350
&gt;&gt; Brian Holt: Okay, and
that's gonna be a callback function here.

69
00:04:41.350 --> 00:04:46.285
And what we're gonna do is we're

70
00:04:46.285 --> 00:04:50.515
gonna say const component =

71
00:04:50.515 --> 00:04:56.520
renderer.create(&lt;Search /&gt;).

72
00:05:01.181 --> 00:05:07.771
&gt;&gt; Brian Holt: Let tree,
or actually const tree,

73
00:05:07.771 --> 00:05:15.246
const tree = component.toJSON().

74
00:05:15.246 --> 00:05:21.904
And then expect(tree) toMatchSnapshot().

75
00:05:32.299 --> 00:05:34.971
&gt;&gt; Brian Holt: So let's say that if you're
gonna have your linter yelling at you

76
00:05:34.971 --> 00:05:37.447
right now, because it's like,
I don't know what test is,

77
00:05:37.447 --> 00:05:40.770
and I don't know what expect is, and
I'm pretty sure you're just making it up.

78
00:05:40.770 --> 00:05:42.220
That's what ESLint is
telling you right now.

79
00:05:43.470 --> 00:05:47.610
So let's go prove to ESLint
that we're not making it up.

80
00:05:47.610 --> 00:05:54.286
Go to your ESLint.json, and
inside of here we're gonna

81
00:05:54.286 --> 00:05:59.301
add one more end, and it's gonna be jest.

82
00:06:02.228 --> 00:06:04.164
&gt;&gt; Brian Holt: This is telling ESLint hey,

83
00:06:04.164 --> 00:06:08.050
ignore all the global
things it jest injects.

84
00:06:08.050 --> 00:06:11.590
The kind of trade-off here is that
is if you put inspect inside of your

85
00:06:11.590 --> 00:06:15.960
normal code, where it won't be available,
it's gonna not flag that.

86
00:06:15.960 --> 00:06:20.140
So it's a trade-off, but it's not
really bitten me in the butt yet, so

87
00:06:20.140 --> 00:06:22.470
I I feel pretty good about doing it still.

88
00:06:22.470 --> 00:06:25.590
But just so you know that's the tradeoff
that right now I'm making for you.

89
00:06:27.470 --> 00:06:29.770
Okay, go back to your spec.jsx.

90
00:06:32.230 --> 00:06:35.466
And sometimes my linter is a little bit
slow to catch up that there goes, okay.

