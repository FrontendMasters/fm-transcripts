WEBVTT

1
00:00:00.000 --> 00:00:06.600
&gt;&gt; Brian Holt: So what I'm gonna do now
is I'm going to enable Sublime Linter for

2
00:00:06.600 --> 00:00:10.805
Sublime, which I already have enabled.

3
00:00:10.805 --> 00:00:15.633
But this is basically a tool that's
going to continuously run ESLint against

4
00:00:15.633 --> 00:00:20.173
my code, and it's going to highlight
it if something's wrong with it.

5
00:00:20.173 --> 00:00:26.302
So if I say const or let x =5,

6
00:00:31.471 --> 00:00:33.387
&gt;&gt; Brian Holt: So now if you look in here,

7
00:00:33.387 --> 00:00:37.842
it might be kind of hard to see but
I promise that it's there.

8
00:00:37.842 --> 00:00:42.097
There's a faint red
outline around the x and

9
00:00:42.097 --> 00:00:46.591
you can see little red
dot there in the gutter.

10
00:00:46.591 --> 00:00:51.121
So if I click on it, and this is almost
too small for me to read, but at the very,

11
00:00:51.121 --> 00:00:56.225
very, bottom, that really infinitesimally
small text that tells me what my error is.

12
00:00:56.225 --> 00:00:59.430
So it says x is assigned a value,
but never used.

13
00:01:01.090 --> 00:01:03.580
So this should be a const, instead.

14
00:01:03.580 --> 00:01:06.360
So one of the things that ESLint
is gonna enforce on me is if you

15
00:01:06.360 --> 00:01:10.220
never reassign something,
it's gonna force you to make it a const.

16
00:01:10.220 --> 00:01:14.615
So now if I change this to const x = 5
it's still going to be an error because I

17
00:01:14.615 --> 00:01:16.003
never used it, right?

18
00:01:16.003 --> 00:01:21.182
So now let's say I say, console.log x.

19
00:01:21.182 --> 00:01:25.564
And then now,
the red has gone away, right?

20
00:01:25.564 --> 00:01:26.710
Cuz now I'm actually using it.

21
00:01:28.800 --> 00:01:35.800
You have the red here that's outlined
React because this is undefined, right?

22
00:01:35.800 --> 00:01:39.990
It doesn't see anywhere
where React is defined.

23
00:01:39.990 --> 00:01:44.677
And then this console.log is
outlined because that's a warning so

24
00:01:44.677 --> 00:01:46.575
you'd use console.log.

25
00:01:46.575 --> 00:01:49.867
Typically, you don't wanna ship that to
production, that's why it's a warning.

26
00:01:49.867 --> 00:01:55.119
And then this function here is
a warning because it wants a name.

27
00:01:57.594 --> 00:02:02.027
&gt;&gt; Brian Holt: Right, the reason why
it forces you to put a name is it makes

28
00:02:02.027 --> 00:02:05.934
stack traces much more useful
if it has a name on it.

29
00:02:08.808 --> 00:02:10.610
&gt;&gt; Speaker 2: What was
the Sublime example again?

30
00:02:10.610 --> 00:02:13.456
&gt;&gt; Brian Holt: It's called Sublime Linter.

31
00:02:13.456 --> 00:02:17.831
So you have to install two things for
Sublime specifically.

32
00:02:17.831 --> 00:02:22.956
You have to install a package
called Sublime Linter.

33
00:02:22.956 --> 00:02:28.897
And then you have to install another one
called sublimelinter-contrib-eslint.

34
00:02:30.840 --> 00:02:35.041
&gt;&gt; Brian Holt: So
I guess I can do, list packages.

35
00:02:35.041 --> 00:02:37.045
So the first one is sublimelinter, and

36
00:02:37.045 --> 00:02:39.848
the second one is
sublimelinter-contrib-eslint.

37
00:02:44.103 --> 00:02:45.990
&gt;&gt; Speaker 2: I'm using Atom so.

38
00:02:47.870 --> 00:02:49.760
&gt;&gt; Speaker 2: Skip that part.

39
00:02:49.760 --> 00:02:53.410
&gt;&gt; Brian Holt: There's atom-lint, I think
is what it's called, Atom dash lint.

40
00:02:53.410 --> 00:02:54.090
&gt;&gt; Speaker 2: Atom lenter?

41
00:02:54.090 --> 00:02:56.320
&gt;&gt; Brian Holt: I think
it's just Atom-lint.

