WEBVTT

1
00:00:00.546 --> 00:00:02.132
&gt;&gt; Brian Holt: I could show you how
to do this with the command line.

2
00:00:02.132 --> 00:00:04.771
So you can actually start
like configuring Webpack

3
00:00:04.771 --> 00:00:06.680
through the command line to do this.

4
00:00:06.680 --> 00:00:10.272
Let's just build a config file so
that we don't have to do that any more.

5
00:00:10.272 --> 00:00:14.177
So go ahead and make a new file and

6
00:00:14.177 --> 00:00:19.681
put it in the root
directory of your project.

7
00:00:19.681 --> 00:00:22.434
Called webpack.config.js.

8
00:00:31.408 --> 00:00:35.869
&gt;&gt; Brian Holt: What we're gonna do here is
we're gonna say const path = require path

9
00:00:38.300 --> 00:00:40.324
&gt;&gt; Brian Holt: Now this is meant for node,

10
00:00:40.324 --> 00:00:40.944
right?

11
00:00:40.944 --> 00:00:42.362
This is not going to be transpiled.

12
00:00:42.362 --> 00:00:46.237
So we're not gonna use the ES6
modules because node does not yet

13
00:00:46.237 --> 00:00:47.896
understand ES6 modules.

14
00:00:47.896 --> 00:00:49.464
So we have to use CommonJS.

15
00:00:52.974 --> 00:00:54.125
&gt;&gt; Brian Holt: Okay.

16
00:00:54.125 --> 00:01:02.570
Then we're gonna say Module.exports
&gt;&gt; Brian Holt: And

17
00:01:02.570 --> 00:01:04.256
we're just gonna put up
bunch of stuff in here.

18
00:01:04.256 --> 00:01:08.326
Context;__dirname.

19
00:01:08.326 --> 00:01:12.197
What is this saying is that we're running
this from our route directory, always.

20
00:01:12.197 --> 00:01:16.564
So you can run this from this-you can run
Webpack from anywhere in your project and

21
00:01:16.564 --> 00:01:19.234
it's always gonna run
from that root directory.

22
00:01:19.234 --> 00:01:24.376
That's what the context dirname
translates to, dirname is just a node

23
00:01:24.376 --> 00:01:29.363
global variable that refers to that
root directory of your project.

24
00:01:32.706 --> 00:01:37.909
&gt;&gt; Brian Holt: Entry So for
now, we'll just gonna have

25
00:01:37.909 --> 00:01:44.961
one entry which is going
to be .js/ClientApp.jsx.

26
00:01:44.961 --> 00:01:47.461
This is the front door of your project,
right?

27
00:01:47.461 --> 00:01:54.689
Everything is gonna be
included out from here.

28
00:01:54.689 --> 00:01:59.760
Devtool, we're gonna do
cheap-eval-source-map,

29
00:01:59.760 --> 00:02:06.317
I think that's what it is, I'll have
to make sure that that's the case.

30
00:02:06.317 --> 00:02:09.113
There's several different
types of devtools,

31
00:02:09.113 --> 00:02:12.528
like you can do false source maps and
everything like that.

32
00:02:12.528 --> 00:02:15.947
This is the one that plays the nicest
with all the tools that we're gonna use,

33
00:02:15.947 --> 00:02:17.749
that's why we're gonna stick with it.

34
00:02:17.749 --> 00:02:22.742
This is just saying inline all of my
source maps into my bundled code.

35
00:02:22.742 --> 00:02:25.829
It's gonna make your bundled
code bigger in development but

36
00:02:25.829 --> 00:02:27.772
it won't be included in production.

37
00:02:27.772 --> 00:02:31.765
And source maps, for those of you
that aren't familiar with them,

38
00:02:31.765 --> 00:02:34.988
if I transpile from my source
code to evaluative code,

39
00:02:34.988 --> 00:02:39.331
if I don't have source maps, when I
click on the errors it's going to show

40
00:02:39.331 --> 00:02:44.058
me directly in the bundled code which
is worthless, it's impossible to read.

41
00:02:44.058 --> 00:02:47.669
If I have, source-maps is actually
going to show me like my code,

42
00:02:47.669 --> 00:02:52.056
it's gonna show me the pre-transpiled
code, that's why we do source-maps.

43
00:02:55.640 --> 00:03:03.775
&gt;&gt; Brian Holt: Output,
&gt;&gt; Brian Holt: Path and

44
00:03:03.775 --> 00:03:10.670
that's gonna be path.join(_dirname.

45
00:03:10.670 --> 00:03:13.622
'public').

46
00:03:13.622 --> 00:03:18.498
So path is a node module that
just resolves Unix style relative

47
00:03:18.498 --> 00:03:19.730
paths for you.

48
00:03:19.730 --> 00:03:23.873
So if we do this dirname public we can be
assured that it's always going to land

49
00:03:23.873 --> 00:03:26.700
on the public directory
that we're talking about.

50
00:03:26.700 --> 00:03:29.812
No matter where we call
it from our project.

51
00:03:29.812 --> 00:03:33.952
That's why we're using it

52
00:03:33.952 --> 00:03:38.816
[BLANK AUDIO] And file name.

53
00:03:38.816 --> 00:03:40.088
I call it bundle.js.

54
00:03:40.088 --> 00:03:42.011
That's a common thing to call it.

55
00:03:42.011 --> 00:03:43.847
But you could call it
whatever you want to.

56
00:03:43.847 --> 00:03:50.262
[BLANK AUDIO] Okay.

57
00:03:50.262 --> 00:03:50.854
Resolve.

58
00:03:55.985 --> 00:03:57.418
&gt;&gt; Brian Holt: Extensions.

59
00:04:01.068 --> 00:04:04.839
&gt;&gt; Brian Holt: So if I say just you don't
have to commit a copy on this line.

60
00:04:04.839 --> 00:04:10.153
But if I say const App
= require./app right?

61
00:04:12.372 --> 00:04:15.997
&gt;&gt; Brian Holt: This is the order that it's
going to try a file extensions before it

62
00:04:15.997 --> 00:04:17.754
finds the correct one, right.

63
00:04:17.754 --> 00:04:23.203
So, I'm gonna say, .js,

64
00:04:23.203 --> 00:04:28.206
.jsx, and then .json.

65
00:04:28.206 --> 00:04:31.174
So, the first thing it's going to do is,
it's going to try and

66
00:04:31.174 --> 00:04:34.100
see if I find a file called app
like App with no file extension.

67
00:04:34.100 --> 00:04:36.136
That's the first thing it'll check.

68
00:04:36.136 --> 00:04:39.220
Then it's going say does .js exist?

69
00:04:39.220 --> 00:04:42.917
If that doesn't exist then it's
going to say does .jsx, and if that

70
00:04:42.917 --> 00:04:47.347
doesn't exist it's going to try .json and
if that doesn't exist than it fails.

71
00:04:47.347 --> 00:04:50.028
It's the order of resolution
of those extensions.

72
00:04:54.880 --> 00:04:57.119
&gt;&gt; Brian Holt: Stats.

73
00:04:57.119 --> 00:05:00.787
This is just the various things that you
wanna report it back to you when you're

74
00:05:00.787 --> 00:05:01.350
building.

75
00:05:01.350 --> 00:05:05.463
So we're gonna say colors true,
because I like colors.

76
00:05:05.463 --> 00:05:06.365
Reasons.

77
00:05:06.365 --> 00:05:08.727
This is gonna give you
more useful error output.

78
00:05:08.727 --> 00:05:10.629
So definitely put that.

79
00:05:10.629 --> 00:05:13.592
And, chunks I don't think this
one is useful anymore but,

80
00:05:13.592 --> 00:05:17.382
we're gonna put it in there anyway,
this is just saying if your code is being

81
00:05:17.382 --> 00:05:20.835
broken up into multiple different
chunks please tell me about that.

82
00:05:24.270 --> 00:05:29.181
&gt;&gt; Brian Holt: And, then the last thing
we're gonna do here is we're going

83
00:05:29.181 --> 00:05:31.121
to start using babble.

84
00:05:31.121 --> 00:05:33.944
So, modules, sorry not modules,

85
00:05:33.944 --> 00:05:39.595
module singular than rules inside of
that which is actually not under,

86
00:05:39.595 --> 00:05:41.398
it's gonna be an array

87
00:05:50.622 --> 00:05:54.354
&gt;&gt; Brian Holt: Okay,
&gt;&gt; Brian Holt: So

88
00:05:54.354 --> 00:05:59.226
this is going to be an array
of rules that Webpack is

89
00:05:59.226 --> 00:06:04.453
going to use to apply different
loaders to your code.

90
00:06:04.453 --> 00:06:05.582
Now what is a loader?

91
00:06:05.582 --> 00:06:08.731
A loader is just a plugin,
it's actually not a plugin.

92
00:06:08.731 --> 00:06:10.537
Let's not conflate words.

93
00:06:10.537 --> 00:06:14.930
[LAUGH] It is a,
A tool that Webpack is going

94
00:06:14.930 --> 00:06:19.586
to use on your code in some fashion,
right.

95
00:06:19.586 --> 00:06:23.318
So, the first tool that we're going
to be using is Babble, right.

96
00:06:23.318 --> 00:06:27.228
So, we're gonna give it the Babble loader,
so that webpack will use Babel for

97
00:06:27.228 --> 00:06:27.891
us, right.

98
00:06:27.891 --> 00:06:29.805
That make sense?

99
00:06:29.805 --> 00:06:33.507
So, I'm gonna give it an object.

100
00:06:33.507 --> 00:06:36.296
The first thing we're going to do
is give it a test of some sort.

101
00:06:36.296 --> 00:06:38.664
This can be a function,
this can be a RegeX,

102
00:06:38.664 --> 00:06:40.777
this can be several different things.

103
00:06:40.777 --> 00:06:42.093
We're just going to use a RegeX.

104
00:06:46.918 --> 00:06:51.069
&gt;&gt; Brian Holt: You're going to do / \.

105
00:06:51.069 --> 00:06:51.725
JSX?$/,

106
00:07:01.732 --> 00:07:06.877
&gt;&gt; Brian Holt: And then we're
gonna say loader: 'babel-loader'.

107
00:07:09.564 --> 00:07:13.040
&gt;&gt; Brian Holt: I am,
by no means, a RegeX expert.

108
00:07:13.040 --> 00:07:17.860
But what this means is
the file extension for

109
00:07:17.860 --> 00:07:22.947
the file must be dot JS and
possibly X, right.

110
00:07:22.947 --> 00:07:26.224
So that's a good question mark
that X might be there and

111
00:07:26.224 --> 00:07:30.158
then the dollar sign means this must
be at the end of the file name.

112
00:07:30.158 --> 00:07:34.674
So anything that ends in .js or
.jsx run through Babel.

113
00:07:34.674 --> 00:07:37.292
That's what that means, cool?

114
00:07:37.292 --> 00:07:37.792
Okay.

115
00:07:39.746 --> 00:07:42.438
&gt;&gt; Brian Holt: Loader, you're just telling
it here this is the name of the loader

116
00:07:42.438 --> 00:07:43.798
that I want you to run it through.

117
00:07:43.798 --> 00:07:45.137
So it's gonna call Babel.

118
00:07:45.137 --> 00:07:47.626
And it says here, Babel,
here's your thing.

119
00:07:47.626 --> 00:07:50.958
It's gonna call it with all
the output from the file and

120
00:07:50.958 --> 00:07:55.957
then babbles gonna do something and than
hand back to Webpack that's the contract

121
00:07:55.957 --> 00:07:59.795
that's going on here and just so
you know you can say loaders and

122
00:07:59.795 --> 00:08:03.514
then give it an array of different
loaders to run it through.

123
00:08:03.514 --> 00:08:07.784
Right now we just have one, we just
wanted to run through babel loaders so

124
00:08:07.784 --> 00:08:16.772
we are gonna leave it at that,
&gt;&gt; Brian Holt: Any questions?

125
00:08:19.582 --> 00:08:21.834
&gt;&gt; Brian Holt: Make sense, okay?

126
00:08:25.123 --> 00:08:26.475
&gt;&gt; Brian Holt: Save it.

127
00:08:26.475 --> 00:08:32.567
Thanks to Prettier it's gonna
be all nicely formatted.

128
00:08:32.567 --> 00:08:41.199
Okay, so now I can go to my command line.

129
00:08:41.199 --> 00:08:46.415
And notice before I was giving
you the entry and exit.

130
00:08:46.415 --> 00:08:48.511
I don't have to do that anymore.

131
00:08:48.511 --> 00:08:50.031
I can just say webpack.

132
00:08:50.031 --> 00:08:52.998
It's automatically gonna pick up the
config and it's just gonna do it for me.

133
00:08:59.688 --> 00:09:03.981
&gt;&gt; Brian Holt: Now you're gonna notice
that's gonna take significantly longer

134
00:09:03.981 --> 00:09:05.672
than it was before, why?

135
00:09:05.672 --> 00:09:10.186
Because everything is being run through
babel and it's a pretty intense process.

136
00:09:10.186 --> 00:09:13.273
So again, we're introducing tools for
the sake of ease but

137
00:09:13.273 --> 00:09:18.426
it comes of the cause of complexity
&gt;&gt; Brian Holt: And

138
00:09:18.426 --> 00:09:23.087
now, we went from having 700 kilobytes
which was ridiculous to having

139
00:09:23.087 --> 00:09:26.109
2 megabytes which is
add further ridiculous.

140
00:09:26.109 --> 00:09:32.695
But again you have to remember now,
that was including all the too, right.

141
00:09:32.695 --> 00:09:38.690
So, babel it's actually gonna add quite
a bit of weight to our bundles as well.

142
00:09:38.690 --> 00:09:41.331
But when we go actually to minify Jsif and

143
00:09:41.331 --> 00:09:44.683
go to production it can
be significantly smaller.

144
00:09:44.683 --> 00:09:47.729
In fact i can show you what it looks like.

145
00:09:47.729 --> 00:09:54.059
So if you put -p, this is saying
hey i'm building for production,

146
00:09:54.059 --> 00:09:59.847
this is going to do a whole
different set of transformations.

147
00:09:59.847 --> 00:10:03.202
And we save 0.15.

148
00:10:03.202 --> 00:10:05.070
Because we have all
the source maps in there.

149
00:10:05.070 --> 00:10:06.688
Source maps are huge.

150
00:10:06.688 --> 00:10:09.724
They're gonna over double
the size of your code.

151
00:10:09.724 --> 00:10:13.836
So, we'd have to drop the source maps too.

152
00:10:13.836 --> 00:10:21.329
We'll talk about performance and
for production on the third day.

153
00:10:21.329 --> 00:10:24.145
So yeah, let's build and
let's go see if everything works.

154
00:10:28.806 --> 00:10:29.856
&gt;&gt; Brian Holt: Everything
is still working.

155
00:10:32.525 --> 00:10:33.988
&gt;&gt; Brian Holt: And looking good.

156
00:10:38.196 --> 00:10:39.890
&gt;&gt; Speaker 2: Do you
go back to your index?

157
00:10:39.890 --> 00:10:44.034
[INAUDIBLE]
&gt;&gt; Brian Holt: Yes,

158
00:10:44.034 --> 00:10:48.762
you'll just need to
include public/bundle.js

