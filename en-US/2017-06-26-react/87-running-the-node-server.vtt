WEBVTT

1
00:00:00.070 --> 00:00:01.140
&gt;&gt; Speaker 1: What I want you to do here,

2
00:00:01.140 --> 00:00:03.310
you're gonna leave your
API server running.

3
00:00:03.310 --> 00:00:05.480
And for now I'm gonna shut off Webpack.

4
00:00:05.480 --> 00:00:09.140
And I'm gonna change that
to be yarn watch because

5
00:00:09.140 --> 00:00:12.280
we still need to compile our Webpack code.

6
00:00:12.280 --> 00:00:15.980
But we're not going to be reading
from the dev server anymore.

7
00:00:15.980 --> 00:00:22.140
We're going got be requesting it from
our Expressor that we just wrote.

8
00:00:23.630 --> 00:00:30.643
And now, we're going to do NODE_ENV=server

9
00:00:30.643 --> 00:00:36.164
node server.js.
&gt;&gt; Speaker 1: So

10
00:00:36.164 --> 00:00:38.957
now it says, listening on 8080.

11
00:00:38.957 --> 00:00:42.561
So if I come onto here and

12
00:00:42.561 --> 00:00:46.718
refresh 8080 on here.

13
00:00:46.718 --> 00:00:50.330
Notice we're still getting our website and
everything is kind of fine.

14
00:00:50.330 --> 00:00:52.821
I don't think we're gonna
get any console errors.

15
00:00:55.450 --> 00:00:58.210
&gt;&gt; Speaker 1: We screwed up hot reload.

16
00:00:58.210 --> 00:01:00.730
I will show you how to
fix hot reload with this.

17
00:01:00.730 --> 00:01:04.004
But that's why it's saying,
hey I'm trying to find hot reload,

18
00:01:04.004 --> 00:01:07.105
that's because we're not talking
to the dev server anymore,

19
00:01:07.105 --> 00:01:09.930
we're talking to the node
server that we wrote, right?

20
00:01:11.790 --> 00:01:16.250
But now what's more interesting about
this, this is what it was before, right?

21
00:01:16.250 --> 00:01:20.816
Totally empty, if I refresh, look at how
much stuff now is coming down, right?

22
00:01:20.816 --> 00:01:27.990
This is a fully rendered experience.
&gt;&gt; Speaker 1: Which is pretty cool right?

23
00:01:29.770 --> 00:01:34.010
Now something I wanna show you that's
perhaps even more impressive about this.

24
00:01:34.010 --> 00:01:38.025
Oops, so I'm gonna come in here, and

25
00:01:38.025 --> 00:01:43.604
I'm gonna click right there.
&gt;&gt; Speaker 1: I

26
00:01:43.604 --> 00:01:47.803
forgot how to do this
with Chrome dev tools.

27
00:01:47.803 --> 00:01:52.646
Settings.
&gt;&gt; Speaker 1: I am going to

28
00:01:52.646 --> 00:01:55.867
disable JavaScript.

29
00:01:55.867 --> 00:01:59.120
Wherever disable JavaScript is.
&gt;&gt; Speaker 2: You passed it,

30
00:01:59.120 --> 00:02:04.039
it was on the right under [INAUDIBLE].
&gt;&gt; Speaker 1: Disable JavaScript, right?

31
00:02:05.550 --> 00:02:09.833
So now as long as the dev tools are open,
JavaScript is gonna be disabled.

32
00:02:09.833 --> 00:02:15.519
So now if I refresh the page.
&gt;&gt; Speaker 1: [LAUGH]

33
00:02:15.519 --> 00:02:17.400
you know what's going on here?

34
00:02:17.400 --> 00:02:20.550
It's styles components doesn't
work without JavaScript.

35
00:02:21.740 --> 00:02:22.410
That's a problem.

36
00:02:23.580 --> 00:02:27.980
So, that's something you accept
when you take on styles components.

37
00:02:27.980 --> 00:02:30.630
But notice that everything is still
actually being rendered out okay.

38
00:02:30.630 --> 00:02:35.500
I can actually click on to Game of Thrones
and it's gonna take me into the page.

39
00:02:35.500 --> 00:02:36.970
I can go back.

40
00:02:36.970 --> 00:02:38.370
I can click S video.

41
00:02:38.370 --> 00:02:39.620
So I'm actually able to,

42
00:02:39.620 --> 00:02:43.670
besides the styles component stuff,
I'm able to still navigate my site, right?

43
00:02:43.670 --> 00:02:44.960
Because what's happening,

44
00:02:44.960 --> 00:02:49.480
if you look at my server here,
it's just routing to each one of these.

45
00:02:49.480 --> 00:02:51.456
It's making a full server request, right?

46
00:02:51.456 --> 00:02:53.550
The server side rendering that code, and

47
00:02:53.550 --> 00:02:56.020
then just sending it back down to you,
right?

48
00:02:56.020 --> 00:03:00.560
So we made our page work
without JavaScript.

49
00:03:00.560 --> 00:03:02.460
Really, anymore,
that's not really much of a problem.

50
00:03:02.460 --> 00:03:05.833
Almost every client that's going to
be accessing your page is gonna have

51
00:03:05.833 --> 00:03:06.893
JavaScript enabled.

52
00:03:06.893 --> 00:03:09.393
But let's say you have a JavaScript error,
right?

53
00:03:09.393 --> 00:03:13.470
You're still going to be able to work,
right?

54
00:03:13.470 --> 00:03:17.433
It's kind of this progressive enhancement
idea that's typically a pretty good idea,

55
00:03:17.433 --> 00:03:21.129
I would say, right?
&gt;&gt; Speaker 1: So,

56
00:03:21.129 --> 00:03:24.990
I think that's really cool,
that's because it is really cool.

57
00:03:27.480 --> 00:03:29.858
If you weren't using styled components,

58
00:03:29.858 --> 00:03:33.170
that would be a little bit more
impressive, but I digress.

59
00:03:34.850 --> 00:03:38.350
Any questions about service side

60
00:03:38.350 --> 00:03:40.046
rendering?
&gt;&gt; Speaker 2: So,

61
00:03:40.046 --> 00:03:45.228
the idea is just that the first page that
the client loads is pre-rendered and

62
00:03:45.228 --> 00:03:50.330
once React takes over, it goes back to
it's old single page application and

63
00:03:50.330 --> 00:03:52.000
behavior?
&gt;&gt; Speaker 1: Exactly.

64
00:03:52.000 --> 00:03:53.460
So, what this is gonna buy for you.

65
00:03:53.460 --> 00:03:55.935
One it's gonna buy you a lot with Google,
right?

66
00:03:55.935 --> 00:03:59.330
Because you're gonna send that markup
faster which Google is then going to rank

67
00:03:59.330 --> 00:04:04.480
higher and it's going to be more
controllable in a sense that, yes

68
00:04:04.480 --> 00:04:09.900
the Google crawler does run JavaScript,
but it's imperfect for sure If you send

69
00:04:09.900 --> 00:04:14.320
a predetermined markup, you get to control
what Google's scrolling over, right?

70
00:04:14.320 --> 00:04:17.210
So it's a big SCO in for sure.

71
00:04:17.210 --> 00:04:20.206
It's a big win for
perceived web performance, right?

72
00:04:20.206 --> 00:04:25.400
If you're on 2G connection in the middle
of nowhere, or just maybe you're stuck

73
00:04:25.400 --> 00:04:29.100
on crappy wi-fi or something like that,
this is gonna load a whole lot faster.

74
00:04:30.530 --> 00:04:34.000
And there's just tons and tons and
tons of data out there that says,

75
00:04:34.000 --> 00:04:37.660
if you load faster,
users will give you more money, right?

76
00:04:37.660 --> 00:04:39.120
In some capacity.

77
00:04:39.120 --> 00:04:41.460
Whether that's more page clicks,
to get more ad revenue,

78
00:04:41.460 --> 00:04:46.320
or your funnel's faster on your
e-commerce website, all of that, right?

79
00:04:46.320 --> 00:04:47.790
So this is a win.

80
00:04:47.790 --> 00:04:49.518
If you can service side render,

81
00:04:49.518 --> 00:04:53.757
I recommend it.
&gt;&gt; Speaker 1: Any other

82
00:04:53.757 --> 00:04:56.314
questions?
&gt;&gt; Speaker 3: And this is to get you ready

83
00:04:56.314 --> 00:04:59.929
to put your site on to production?
&gt;&gt; Speaker 1: Mm-hm.

84
00:04:59.929 --> 00:05:03.830
So you are typically are gonna do
the service side rendering I would say,

85
00:05:03.830 --> 00:05:07.730
it doesn't always have to be just for
a production, but yeah.

86
00:05:07.730 --> 00:05:10.750
But yeah, you definitely want
to be doing a production.

87
00:05:10.750 --> 00:05:13.908
What I would do in this particular case,
my God, look at that.

88
00:05:13.908 --> 00:05:20.230
[LAUGH] That's the hot module
reload just losing its mind.

89
00:05:20.230 --> 00:05:25.620
I would do the webpack dev server for
local development, because that's a really

90
00:05:25.620 --> 00:05:29.070
nice developer experience, and you don't
care if it's server-side rendering or not.

91
00:05:29.070 --> 00:05:32.009
And then when I send it off to production,
I'll let server-side rendering happen just

92
00:05:32.009 --> 00:05:37.610
in production.
&gt;&gt; Speaker 2: And

93
00:05:37.610 --> 00:05:42.870
you said hopefully when you click
on the button, React is loaded.

94
00:05:42.870 --> 00:05:48.573
What happens if React hasn't loaded yet?
&gt;&gt; Speaker 1: What I just showed you here,

95
00:05:48.573 --> 00:05:51.174
our site works without JavaScript, right?

96
00:05:51.174 --> 00:05:54.133
Because that's actually a real link,
it's an A tag that goes to that, so

97
00:05:54.133 --> 00:05:57.069
it's gonna hit your server again,
make a full request, and come back.

98
00:05:57.069 --> 00:05:59.974
So, in that particular case,
everything's gonna work.

99
00:05:59.974 --> 00:06:03.647
However if it's something
that pops up a modal or

100
00:06:03.647 --> 00:06:08.050
something like that,
it's just not gonna work, right?

101
00:06:08.050 --> 00:06:09.520
Nothing's gonna happen.

102
00:06:09.520 --> 00:06:14.227
However.
&gt;&gt; Speaker 2: What about our dispatch?

103
00:06:14.227 --> 00:06:15.885
&gt;&gt; Speaker 1: For sure.

104
00:06:15.885 --> 00:06:16.870
&gt;&gt; Speaker 2: Events.

105
00:06:18.070 --> 00:06:19.120
&gt;&gt; Speaker 1: Yeah, so

106
00:06:19.120 --> 00:06:23.520
what'll happen then if I'm able
to type in there before React and

107
00:06:23.520 --> 00:06:24.770
Redux have bootstrapped?

108
00:06:24.770 --> 00:06:26.225
It's gonna blow it away, right?

109
00:06:26.225 --> 00:06:29.380
Because it's gonna bootstrap and
say my state is actually empty string.

110
00:06:31.010 --> 00:06:34.590
However, that's usually not a problem.

111
00:06:34.590 --> 00:06:38.200
We're talking like,
you're gonna load that first pay load, and

112
00:06:38.200 --> 00:06:43.130
then within a 100 milliseconds you're
gonna get the JS and once the js is down,

113
00:06:43.130 --> 00:06:49.870
that parsing and bootstrapping is
gonna be 5 to 15 milliseconds at most.

114
00:06:49.870 --> 00:06:52.800
Users don't make decisions that fast,
right?

115
00:06:52.800 --> 00:06:56.170
You would have to be like prepared
with your fast twitch muscles,

116
00:06:56.170 --> 00:06:58.200
okay now click it, right?

117
00:06:58.200 --> 00:07:00.930
Even on a slow connection ,right?

118
00:07:00.930 --> 00:07:05.166
In other words it's not something I
find myself concerned a lot with.

119
00:07:05.166 --> 00:07:11.875
I mean definitely instruments if that
is something you're worried about.

120
00:07:11.875 --> 00:07:17.077
But it has yet to be a problem for me.
&gt;&gt; Speaker 2: It is good to keep in mind,

121
00:07:17.077 --> 00:07:22.018
especially on a set like this where
downloading the JavaScript will

122
00:07:22.018 --> 00:07:25.180
contend with all the posters, right?

123
00:07:25.180 --> 00:07:26.908
If you have large images or something.

124
00:07:26.908 --> 00:07:31.653
And you can only download so
many of those in parallel, and, yeah.

125
00:07:31.653 --> 00:07:32.934
&gt;&gt; Speaker 1: Most definitely,

126
00:07:32.934 --> 00:07:36.410
I mean this is loading large posters,
right?

127
00:07:36.410 --> 00:07:39.180
Because I'm super lazy and
I didn't wanna downscale them.

128
00:07:39.180 --> 00:07:42.875
[LAUGH] But, you definitely should worry
about things like that like compressing

129
00:07:42.875 --> 00:07:46.187
your images, making sure that right,
like you have like thumbnails for

130
00:07:46.187 --> 00:07:48.544
the right pages and
full-size for the other ones.

131
00:07:48.544 --> 00:07:56.580
For sure.
&gt;&gt; Speaker 1: Yeah,

132
00:07:56.580 --> 00:08:00.483
Mark.
&gt;&gt; Speaker 4: If you make the API calls to

133
00:08:00.483 --> 00:08:03.544
node, how do you make sense or

134
00:08:03.544 --> 00:08:05.805
is that rendering?
&gt;&gt; Speaker 1: So

135
00:08:05.805 --> 00:08:11.750
this is you are getting into the questions
about hydration and things like that.

136
00:08:11.750 --> 00:08:14.519
So for example,
if I click on here, ideally,

137
00:08:14.519 --> 00:08:19.560
when I was service side rendering, I would
not come down and make a request, right?

138
00:08:22.560 --> 00:08:31.679
Node.
&gt;&gt; Speaker 1: Ideally,

139
00:08:31.679 --> 00:08:35.600
I would come to here and
I wouldn't be making this request, right?

140
00:08:35.600 --> 00:08:38.700
I would already have that loaded because
I loaded it from the server, right?

141
00:08:39.880 --> 00:08:42.870
This is a really touchy situation
to get this correct, right?

142
00:08:42.870 --> 00:08:46.620
So a big key about server-side rendering
which I actually should address,

143
00:08:46.620 --> 00:08:51.010
is if you come in here, and we're gonna
zoom in, and we're going to look for

144
00:08:51.010 --> 00:08:53.395
this thing right here.

145
00:08:53.395 --> 00:08:56.430
Data-react-checksum.

146
00:08:56.430 --> 00:08:57.680
So this is basically,

147
00:08:57.680 --> 00:09:00.910
your app gets run through this hashing
algorithm they generate a hash.

148
00:09:00.910 --> 00:09:04.610
Then when you get down to the client,
it's going to render for the first time,

149
00:09:04.610 --> 00:09:08.160
run the hashing algorithm again, and
make sure that those hashes match.

150
00:09:08.160 --> 00:09:11.850
So that you're generating the same markup
on the server as you are on the client.

151
00:09:11.850 --> 00:09:15.250
If those mismatch,
in fact I'll show you how you can,

152
00:09:15.250 --> 00:09:16.880
we'll just make a mismatch really quick.

153
00:09:16.880 --> 00:09:23.143
If I put, I don't know, like here,
I'm just gonna put an h1

154
00:09:23.143 --> 00:09:29.459
that's going to render out math.random.
&gt;&gt; Speaker 1: So

155
00:09:29.459 --> 00:09:31.450
this will be different on the client,
right?

156
00:09:31.450 --> 00:09:34.420
Because every time you're on math.random,
it's gonna give you a different output, so

157
00:09:34.420 --> 00:09:37.250
it'll be different on the client
than it is on the server.

158
00:09:39.230 --> 00:09:43.990
So if I load this again, it's gonna say,
what the hell are you doing?

159
00:09:49.231 --> 00:09:50.672
&gt;&gt; Speaker 1: So.

160
00:09:52.497 --> 00:09:53.101
&gt;&gt; Speaker 1: Right there,

161
00:09:53.101 --> 00:09:56.674
that's what I'm talking about it says, hey
React tried to reuse the markup that you

162
00:09:56.674 --> 00:09:58.751
sent down there but,
hey you messed up, right?

163
00:09:58.751 --> 00:10:01.910
What I got on the client is different
than what I got on the server,

164
00:10:01.910 --> 00:10:03.582
I'm gonna blow everything away.

165
00:10:03.582 --> 00:10:07.030
So all of those performance benefits
are actually now worse right?

166
00:10:07.030 --> 00:10:09.800
Because you had to pay all the extra costs
to get all that server side rendering

167
00:10:09.800 --> 00:10:13.010
done, it's gonna say, you messed up.

168
00:10:13.010 --> 00:10:14.764
I'm just gonna blow it away and
then restart.

169
00:10:16.030 --> 00:10:18.870
So, that's something you definitely
have to be careful about.

170
00:10:18.870 --> 00:10:23.376
So, getting into the hydration
side of things, getting it to have

171
00:10:23.376 --> 00:10:28.456
the ability to have API requests
before they're made, is tough, right?

172
00:10:28.456 --> 00:10:30.331
Because when you first create your app,

173
00:10:30.331 --> 00:10:34.830
you're doing with the thought in mind that
it's going to request it from the API.

174
00:10:34.830 --> 00:10:37.290
So with Redux, it's actually not too bad,

175
00:10:37.290 --> 00:10:39.560
you just have to make sure that you're
providing the same initial state.

176
00:10:39.560 --> 00:10:42.090
So you have to have a kind
of variable initial state,

177
00:10:42.090 --> 00:10:45.610
based on if the context's available or
not.

178
00:10:45.610 --> 00:10:47.000
But the problem with that is,

179
00:10:47.000 --> 00:10:51.230
you have to make sure the context is both
available on the server and on the client.

180
00:10:51.230 --> 00:10:55.880
Plus it can still do it if you
navigate to that page without

181
00:10:55.880 --> 00:10:58.250
that being hydrated, right?

182
00:10:58.250 --> 00:11:00.670
So, what I'm trying to
paint a picture of here is,

183
00:11:00.670 --> 00:11:05.130
it's a bit of a complicated mess to
kind of preempt those API requests, and

184
00:11:05.130 --> 00:11:09.280
you have to weigh your answers of,
is this worth it to me to try and do?

185
00:11:09.280 --> 00:11:10.659
It's possible for sure.

186
00:11:12.200 --> 00:11:12.750
But it's tough.

187
00:11:14.980 --> 00:11:18.180
And we're actually gonna deal with this
problem with even more in depths here in

188
00:11:18.180 --> 00:11:21.680
just a second because we're gonna do code
splitting, which compounds this problem.

