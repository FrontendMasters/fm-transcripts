WEBVTT

1
00:00:00.470 --> 00:00:04.470
&gt;&gt; Brian Holt: However, along that route
we can actually do one better than this.

2
00:00:04.470 --> 00:00:08.000
Which is, I would say, the most recent
way, and my preferred way of writing this.

3
00:00:09.190 --> 00:00:13.136
However, it's depending on
the stage two proposal., right?

4
00:00:15.227 --> 00:00:20.058
&gt;&gt; Brian Holt: So for those of you that
are not familiar with how JavaScript

5
00:00:20.058 --> 00:00:23.730
is standardized, things can be stages.

6
00:00:23.730 --> 00:00:27.490
When we add a new feature to JavaScript,
it can be stage zero, one, two, three,

7
00:00:27.490 --> 00:00:28.030
or four.

8
00:00:29.550 --> 00:00:32.186
If something is stage zero,
it's like a strawman proposal.

9
00:00:32.186 --> 00:00:36.730
There's a very low chance that actually
that's gonna make it in the language.

10
00:00:36.730 --> 00:00:38.660
Stage one, you're getting a better chance.

11
00:00:38.660 --> 00:00:41.610
Once you're stage two,
you're probably gonna make it.

12
00:00:41.610 --> 00:00:45.840
Stage three is almost certainly gonna make
it, and stage four has made it, right?

13
00:00:45.840 --> 00:00:48.620
Once things are in stage four,
they're ready to go into the language.

14
00:00:50.440 --> 00:00:54.650
So I'm gonna show you right
now a stage two proposal,

15
00:00:54.650 --> 00:00:57.610
that as far as anyone I've
ever talked to on TC39,

16
00:00:57.610 --> 00:01:02.530
the body that standardizes JavaScript
is definitely going to make it.

17
00:01:02.530 --> 00:01:07.480
In other words, I feel comfortable writing
this, and if this doesn't make it,

18
00:01:07.480 --> 00:01:11.140
I guarantee you not only are you
going to be screwed, but

19
00:01:11.140 --> 00:01:12.940
we're all going to be screwed, right?

20
00:01:12.940 --> 00:01:15.080
In other words,
there's going to be a way forward for us.

21
00:01:16.930 --> 00:01:20.691
So, again,
there's some level of danger to this,

22
00:01:20.691 --> 00:01:24.716
I'm just gonna throw that out there,
be aware of that.

23
00:01:24.716 --> 00:01:30.960
But we're going to make this
a tiny bit easier for ourselves.

24
00:01:32.000 --> 00:01:37.959
So the first thing that we gotta do is,
I want you to go to your Babel RC,

25
00:01:37.959 --> 00:01:41.807
cuz we need to add
an additional plugin here.

26
00:01:46.574 --> 00:01:48.640
&gt;&gt; Brian Holt: So there we go.

27
00:01:49.790 --> 00:01:56.470
Go and add another,
&gt;&gt; Brian Holt: Thing called plugins.

28
00:01:56.470 --> 00:01:59.260
So we're gonna include just
one additional plugin here.

29
00:02:00.760 --> 00:02:04.784
And this plugin is going to be

30
00:02:04.784 --> 00:02:12.340
babel-plugin-transform-class-properties.

31
00:02:16.932 --> 00:02:20.502
&gt;&gt; Brian Holt: So
this is going to add just one ability for

32
00:02:20.502 --> 00:02:24.582
us to add class properties
unto our ES6 classes

33
00:02:29.698 --> 00:02:31.071
&gt;&gt; Brian Holt: Okay, so

34
00:02:31.071 --> 00:02:36.403
now I'll come back to search.jsx.

35
00:02:36.403 --> 00:02:42.022
Instead of having
handleSearchTermChange like this,

36
00:02:42.022 --> 00:02:50.280
what we're gonna do is we're gonna say
handleSearchTermChange =&gt; like that.

37
00:02:54.547 --> 00:02:55.256
&gt;&gt; Brian Holt: Right?

38
00:03:02.528 --> 00:03:05.633
&gt;&gt; Brian Holt: My length is yelling, but
I don't think that's actually correct,

39
00:03:05.633 --> 00:03:06.713
I think it should work.

40
00:03:10.167 --> 00:03:17.480
&gt;&gt; Brian Holt: So let's just press
forward and so come back here to search.

41
00:03:17.480 --> 00:03:20.802
There's actually something else we
can do here to also simplify this.

42
00:03:20.802 --> 00:03:26.967
We actually get rid of
the constructor all together and

43
00:03:26.967 --> 00:03:32.469
we can say state =
searchTerm: '' like that.

44
00:03:32.469 --> 00:03:36.479
And then we can just drop
the whole constructor.

45
00:03:36.479 --> 00:03:40.880
And, again, you can come back here and
everything works just like you expect.

46
00:03:42.170 --> 00:03:46.780
So this right here,
this is the unexplored,

47
00:03:46.780 --> 00:03:50.100
or not the unexplored,
but the dangerous part.

48
00:03:51.280 --> 00:03:55.842
So the ability to add properties
like this onto your ES6

49
00:03:55.842 --> 00:03:59.737
classes is not standard yet,
but it is coming.

50
00:04:01.921 --> 00:04:05.506
&gt;&gt; Brian Holt: And so what our friend
over here was talking about why

51
00:04:05.506 --> 00:04:08.849
this actually works
whereas it didn't before,

52
00:04:08.849 --> 00:04:15.270
is that arrow functions do not create
new context when they're created, right?

53
00:04:15.270 --> 00:04:20.830
So if I create an arrow function,
it does not create a new context.

54
00:04:20.830 --> 00:04:24.858
So why that's important is
if I call render, right,

55
00:04:24.858 --> 00:04:30.770
render whenever it's called creates
a new context wherever it is.

56
00:04:30.770 --> 00:04:34.616
So in this particular case
it's called within search, so

57
00:04:34.616 --> 00:04:36.736
this refers to search, right?

58
00:04:36.736 --> 00:04:39.453
But if I pull render out of it and
call it in a different context,

59
00:04:39.453 --> 00:04:41.630
it'll create a new context there.

60
00:04:41.630 --> 00:04:44.680
The difference with arrow functions is
this will never create a new context so

61
00:04:44.680 --> 00:04:46.670
it's always just going to refer to search.

62
00:04:48.960 --> 00:04:52.440
So semantically,
it's similar to binding the function.

63
00:04:53.590 --> 00:04:57.580
So if I call .bind this, right, and
whatever context I want it to be bound,

64
00:04:57.580 --> 00:04:59.620
it's semantically similar to it.

65
00:04:59.620 --> 00:05:02.225
The only difference is is that
when you bind the context,

66
00:05:02.225 --> 00:05:05.480
you're actually melding
the context together, right?

67
00:05:05.480 --> 00:05:08.092
Whereas with an arrow function,
you just never create a new context.

68
00:05:12.313 --> 00:05:13.208
&gt;&gt; Brian Holt: And then state here,

69
00:05:13.208 --> 00:05:16.200
we're just setting the default state,
which is gonna be search term.

70
00:05:17.450 --> 00:05:22.460
Something that people often ask me is
why do we not have prop types for state?

71
00:05:23.700 --> 00:05:25.650
Well, we don't need one, right,

72
00:05:25.650 --> 00:05:28.968
because search term is always
just gonna be string, right?

73
00:05:28.968 --> 00:05:33.228
So it's implicitly typed here.

74
00:05:33.228 --> 00:05:38.189
&gt;&gt; Speaker 2: Does the state
variable have to be named state?

75
00:05:38.189 --> 00:05:39.988
&gt;&gt; Brian Holt: Yeah.

76
00:05:39.988 --> 00:05:41.254
Good question.

77
00:05:41.254 --> 00:05:43.484
That has to be named state.

78
00:05:43.484 --> 00:05:47.746
People are saying that
it failed to compile,

79
00:05:47.746 --> 00:05:51.120
that's not entirely true, oops.

80
00:05:52.530 --> 00:05:57.040
So whenever webpack has a problem

81
00:05:57.040 --> 00:06:01.360
with any of its loaders, right?

82
00:06:01.360 --> 00:06:04.184
So in this particular case
we have the eslint loader,

83
00:06:04.184 --> 00:06:07.843
it says that it's a fail to compile,
it's not actually super true.

84
00:06:07.843 --> 00:06:11.380
It actually will still compile,
even if eslint fails, right?

85
00:06:11.380 --> 00:06:14.240
So that's why we're still able to see our
changes despite the fact that it says

86
00:06:14.240 --> 00:06:15.030
failed to compile.

87
00:06:16.140 --> 00:06:17.780
It's still compiled, I promise, right?

88
00:06:19.340 --> 00:06:25.293
Now, if Babel fails, then it actually will
fail to compile and nothing will change.

89
00:06:25.293 --> 00:06:30.217
But the thing is here, it won't
auto-reload when it fails to compile, so

90
00:06:30.217 --> 00:06:32.577
that's something to keep in mind.

91
00:06:32.577 --> 00:06:36.193
And I'll just have to figure out here
in a second why eslint decided that

92
00:06:36.193 --> 00:06:37.710
it doesn't like me anymore.

93
00:06:40.700 --> 00:06:42.500
Parser, that's it.

94
00:06:42.500 --> 00:06:43.000
Found it.

95
00:06:44.710 --> 00:06:50.886
Okay, everyone go to your eslints.json and

96
00:06:50.886 --> 00:06:55.768
just put parser: babel-eslint.

97
00:06:55.768 --> 00:06:59.148
So this means it'll use
the parser from Babel so

98
00:06:59.148 --> 00:07:03.641
that it can understand everything
that Babel can understand.

99
00:07:06.347 --> 00:07:09.073
&gt;&gt; Brian Holt: So line 10 there,
that's what I'm pointing at.

100
00:07:15.370 --> 00:07:20.454
&gt;&gt; Brian Holt: Okay, so now, hopefully,
if we come back here and start and

101
00:07:20.454 --> 00:07:25.057
stop our dev server again,
it'll stop yelling at us.

102
00:07:25.057 --> 00:07:29.430
Please, yes, nailed it.

103
00:07:29.430 --> 00:07:31.116
&gt;&gt; Speaker 3: So it's babel-eslint?

104
00:07:31.116 --> 00:07:33.966
&gt;&gt; Brian Holt: Yeah,
let me pull it up here.

105
00:07:33.966 --> 00:07:36.014
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Brian Holt: You just gotta tell it

106
00:07:36.014 --> 00:07:42.174
which parser to use, cuz otherwise
it won't run it through Babel.

107
00:07:42.174 --> 00:07:45.349
Something else I wanted to
talk about with search.jsx.

108
00:07:46.690 --> 00:07:49.050
Someone asked in chat that I saw.

109
00:07:49.050 --> 00:07:51.785
What happens to the parentheses here?

110
00:07:51.785 --> 00:07:54.701
I just mentioned it earlier but
I'll mention it again.

111
00:07:54.701 --> 00:07:57.280
As soon as I save it,
those parentheses are gonna go away.

112
00:07:57.280 --> 00:08:01.223
If you have exactly one parameter it
is optional to have parentheses, and

113
00:08:01.223 --> 00:08:03.470
Prettier will drop them.

114
00:08:03.470 --> 00:08:06.813
So I typically would put them on.

115
00:08:06.813 --> 00:08:11.213
That's what the standard required, and
I was used to writing standard, but

116
00:08:11.213 --> 00:08:12.504
Prettier drops them.

117
00:08:15.522 --> 00:08:18.717
&gt;&gt; Brian Holt: So that's fine, and
let's talk about event right here, and

118
00:08:18.717 --> 00:08:19.520
what is event.

119
00:08:20.770 --> 00:08:25.909
So I'm sure most of you are used to
seeing event.target.value, right?

120
00:08:27.050 --> 00:08:30.230
That's a very common way of interacting
with the dom and with dom events.

121
00:08:30.230 --> 00:08:34.110
You can also put current target there,
right?

122
00:08:34.110 --> 00:08:37.430
Either one of those works.

123
00:08:37.430 --> 00:08:40.330
It's safe enough to say target.value
with the way that React works.

124
00:08:42.980 --> 00:08:46.379
So this is semantically totally
similar to a dom event, right?

125
00:08:46.379 --> 00:08:50.106
You can actually never know that
this is not really a dom event.

126
00:08:50.106 --> 00:08:53.151
It's technically
a synthetic reaction event.

127
00:08:53.151 --> 00:08:56.434
And the only reason that it's
really done this way is it's

128
00:08:56.434 --> 00:09:00.923
a little bit more performant and React can
get a little bit more speed off of doing

129
00:09:00.923 --> 00:09:04.221
its own events system,
rather than letting the dom do it.

130
00:09:04.221 --> 00:09:08.497
So the only reason I mentioned that
is if you ever call [INAUDIBLE] or

131
00:09:08.497 --> 00:09:11.082
anything like that it might scare you.

132
00:09:11.082 --> 00:09:14.495
But it's totally similar,
you can use the MDM docs.

133
00:09:14.495 --> 00:09:18.912
The API for this event is exactly
the same as the one that MDM has.

134
00:09:18.912 --> 00:09:22.321
So it's a totally normal event other
than the fact that it's not event.

135
00:09:22.321 --> 00:09:25.668
[LAUGH] So this is the way that
we'll be doing both state and

136
00:09:25.668 --> 00:09:28.640
handleSearchTermChange from now on.

137
00:09:28.640 --> 00:09:31.080
I don’t think we’ll ever
use the constructor again,

138
00:09:31.080 --> 00:09:34.730
just cuz it’s kind of burdensome and
I think this is little bit more succinct.

139
00:09:34.730 --> 00:09:36.730
So I would invite you to do it this way.

140
00:09:36.730 --> 00:09:39.320
This is a very common
way of writing react,

141
00:09:39.320 --> 00:09:43.430
but again it’s always up to you
to make your own trade offs.

