WEBVTT

1
00:00:00.100 --> 00:00:03.577
&gt;&gt; Brian Holt: So
now we have show cart being typed.

2
00:00:03.577 --> 00:00:09.800
So let's go do client
apt at the top do @flow.

3
00:00:09.800 --> 00:00:14.479
The first thing it's gonna say is I don't
know what module is, like many of you did.

4
00:00:14.479 --> 00:00:18.399
[LAUGH] And that's because it
has no definition for that.

5
00:00:18.399 --> 00:00:21.448
So I'm gonna go show you
how to create your own

6
00:00:21.448 --> 00:00:26.486
definitions.
&gt;&gt; Brian Holt: So

7
00:00:26.486 --> 00:00:31.592
inside of the flow-type directory,
I create a new file

8
00:00:31.592 --> 00:00:36.689
called types.js.
&gt;&gt; Brian Holt: This is gonna be

9
00:00:36.689 --> 00:00:42.198
a place where you create types that
the rest of your project can use.

10
00:00:42.198 --> 00:00:46.838
So if you wanted to use module multiple
places this is where you would do it.

11
00:00:46.838 --> 00:00:50.700
So we're gonna do @flow up here.

12
00:00:50.700 --> 00:00:55.326
And there's a couple ways of doing
this but we're just gonna say for

13
00:00:55.326 --> 00:01:01.237
now declare var module.
&gt;&gt; Brian Holt: Hot and

14
00:01:01.237 --> 00:01:07.681
it's gonna be accept (path: string,

15
00:01:07.681 --> 00:01:14.694
callback: which is going
to return void and

16
00:01:14.694 --> 00:01:22.615
if itself returns void.
&gt;&gt; Brian Holt: So

17
00:01:22.615 --> 00:01:26.844
what we did here is we declared a new
type, so this is basically acknowledging

18
00:01:26.844 --> 00:01:31.218
this is going to be a global variable,
this is how you interact with it, right?

19
00:01:31.218 --> 00:01:38.089
So it's going to be an object,
it's gonna have an object called hot.

20
00:01:38.089 --> 00:01:41.328
And the only method that we
acknowledge on it is called accept.

21
00:01:41.328 --> 00:01:45.795
And it's going to take a path,
which is a string, and it's gonna take

22
00:01:45.795 --> 00:01:50.897
a function that returns void, which
means it's not going to return anything.

23
00:01:50.897 --> 00:01:54.876
And then it accepts the function itself,

24
00:01:54.876 --> 00:01:59.903
returns void.
&gt;&gt; Brian Holt: Any questions about

25
00:01:59.903 --> 00:02:06.549
that?
&gt;&gt; Brian Holt: So

26
00:02:06.549 --> 00:02:11.173
now, we can use module.hot.accept
anywhere in the code, and

27
00:02:11.173 --> 00:02:15.290
flow is gonna know about the types
that go in and out of it.

28
00:02:15.290 --> 00:02:17.789
There's more two module,
I don't remember what's in it, but

29
00:02:17.789 --> 00:02:19.964
if you needed to use more things
you would just come in and

30
00:02:19.964 --> 00:02:24.190
annotate this a little bit more.
&gt;&gt; Brian Holt: So,

31
00:02:24.190 --> 00:02:28.608
now if we go back to clients app.jsx,

32
00:02:28.608 --> 00:02:33.506
hopefully.
&gt;&gt; Brian Holt: Let's see if flow has

33
00:02:33.506 --> 00:02:38.571
figured it out.
&gt;&gt; Brian Holt: Yeah,

34
00:02:38.571 --> 00:02:45.179
it has.
&gt;&gt; Brian Holt: Settle in there.

35
00:02:45.179 --> 00:02:49.387
Sometimes, it's tough tell the difference.

36
00:02:49.387 --> 00:02:56.043
No, it's cool with it.
&gt;&gt; Brian Holt: Yep, okay, it's fine.

37
00:02:56.043 --> 00:03:02.926
Again, sometimes flow type can be
a little bit slow to update with sublime.

38
00:03:02.926 --> 00:03:05.074
Any questions about type definitions?

39
00:03:05.074 --> 00:03:08.445
A lot of times I just put
all the types in one file,

40
00:03:08.445 --> 00:03:13.719
cuz I usually don't have enough types
to make a separate file for each type.

41
00:03:13.719 --> 00:03:15.438
But that kind of falls to your discretion.

42
00:03:15.438 --> 00:03:22.162
I usually only end up typing five
to ten objects, and that's fine.

43
00:03:22.162 --> 00:03:26.442
Let's go to Landing And

44
00:03:26.442 --> 00:03:33.508
we're gonna do @flow and guess what?

45
00:03:33.508 --> 00:03:34.319
No changes.

46
00:03:34.319 --> 00:03:39.056
It just hopped it into the type
checker and it's already good to go.

47
00:03:39.056 --> 00:03:44.406
So landing's all checked and good to go.

48
00:03:44.406 --> 00:03:45.522
And what else do we need to do,

49
00:03:45.522 --> 00:03:51.006
adjust here.
&gt;&gt; Brian Holt: We did Search.

50
00:03:51.006 --> 00:03:52.818
We did Landing, clientApp.

51
00:03:52.818 --> 00:03:55.686
App, App needs to be typed as well.

52
00:03:55.686 --> 00:03:59.446
So we're gonna do // @flow up here.

53
00:03:59.446 --> 00:04:07.278
And that should be good as well.
&gt;&gt; Brian Holt: So

54
00:04:07.278 --> 00:04:08.703
something that's gonna be really cool.

55
00:04:08.703 --> 00:04:13.994
That flow just gets you out of the box.
&gt;&gt; Brian Holt: If I

56
00:04:13.994 --> 00:04:16.885
start saying something like
yeah here like in props I could

57
00:04:16.885 --> 00:04:19.568
say props.thing.
&gt;&gt; Brian Holt: And

58
00:04:19.568 --> 00:04:25.045
it's gonna give me some tags like
hey you don't have any props for

59
00:04:25.045 --> 00:04:28.939
this so
I'm not gonna let you do this, right?

60
00:04:28.939 --> 00:04:32.446
So it's gonna be constantly
checking your React,

61
00:04:32.446 --> 00:04:37.254
and your props, and your State,
a good way of also visualizing this,

62
00:04:37.254 --> 00:04:40.527
something that would not
otherwise be caught.

63
00:04:40.527 --> 00:04:45.423
So if I go to search.jsx,
I have searchTerm right here.

64
00:04:45.423 --> 00:04:47.478
But if I try and

65
00:04:47.478 --> 00:04:52.279
say this.state.searchTerm.

66
00:04:55.735 --> 00:04:56.943
&gt;&gt; Brian Holt: Put something
that's not on the stream part.

67
00:04:56.943 --> 00:04:59.824
Well let's say this is 5 right for
just a second say that was a number.

68
00:04:59.824 --> 00:05:03.004
Then try and say .toUpperCase.

69
00:05:03.004 --> 00:05:11.467
It's gonna say hey you said
you're calling two uppercase.

70
00:05:11.467 --> 00:05:14.681
That's a string thing not a number
thing so that's gonna fail.

71
00:05:14.681 --> 00:05:16.913
And so
your flow typing is gonna start failing.

72
00:05:16.913 --> 00:05:20.793
The other thing is notice right here where
it says this.setState is trying to set

73
00:05:20.793 --> 00:05:22.058
that state to be a string.

74
00:05:22.058 --> 00:05:27.278
It's gonna say you're calling setState
with a string here, this is a number.

75
00:05:27.278 --> 00:05:31.362
You're gonna mess things up
if you give this a string.

76
00:05:31.362 --> 00:05:34.194
How does it know that?
Well by doing state like this its gonna

77
00:05:34.194 --> 00:05:38.525
type here state implicitly based
on the initial strings that are or

78
00:05:38.525 --> 00:05:41.481
the initial things are given there, right?

79
00:05:41.481 --> 00:05:45.956
So I didn't tell it that
search term was a number,

80
00:05:45.956 --> 00:05:49.591
it just knows that which is pretty cool.

81
00:05:49.591 --> 00:05:51.801
So now I change this back to a string and

82
00:05:51.801 --> 00:05:55.059
everything is fine because
all that works with string.

83
00:05:55.059 --> 00:05:56.567
Make sense?

84
00:05:56.567 --> 00:05:59.571
So this is gonna catch issues
that you wouldn't otherwise

85
00:05:59.571 --> 00:06:04.502
see.
&gt;&gt; Brian Holt: So

86
00:06:04.502 --> 00:06:09.460
again this is why I say it is work to get
flow and TypeScript up and working, but

87
00:06:09.460 --> 00:06:12.224
I guarantee you it's gonna save you bugs.

88
00:06:12.224 --> 00:06:14.938
This just eliminates
an entire class of bugs.

89
00:06:14.938 --> 00:06:22.281
Like even if I said like
this.state.searchterm.toUppercase and

90
00:06:22.281 --> 00:06:28.493
I did it lower case like that
this would totally fly right?

91
00:06:28.493 --> 00:06:31.170
In the sense of this is
gonna make it past Lint,

92
00:06:31.170 --> 00:06:34.340
this is gonna make it past
a bunch of different things.

93
00:06:34.340 --> 00:06:39.688
But it's gonna get caught a lot sooner
by @flow type it's like, hey this isn't

94
00:06:39.688 --> 00:06:44.643
a real function so these kind of fat
finger or not remembering the k the c here

95
00:06:44.643 --> 00:06:50.174
is capitalized all that class of problems
gets eliminated by using a type checker.

96
00:06:50.174 --> 00:06:56.950
So it's pretty awesome, I'm a fan.
&gt;&gt; Brian Holt: Yeah?

97
00:06:56.950 --> 00:06:57.860
&gt;&gt; Speaker 2: Have you used it in

98
00:06:57.860 --> 00:07:00.603
production?
&gt;&gt; Brian Holt: Yeah Netflix uses flow.

99
00:07:00.603 --> 00:07:04.428
I would say well and
they use typescript as well.

100
00:07:04.428 --> 00:07:07.118
It depends on which team you're on but

101
00:07:07.118 --> 00:07:11.404
I know Facebook as like over
50% coverage on their flow for

102
00:07:11.404 --> 00:07:17.290
their entire code base which is crazy.
&gt;&gt; Brian Holt: I

103
00:07:17.290 --> 00:07:20.475
would say Netflix's co-coverage
was lower than that, but.

104
00:07:20.475 --> 00:07:25.213
Where we found great success is that when
we would export components to other teams,

105
00:07:25.213 --> 00:07:28.224
we would just ship along
with them some flow typings.

106
00:07:28.224 --> 00:07:30.459
And so when they were using and
consuming those,

107
00:07:30.459 --> 00:07:33.634
they were going to be assured that
this is how it's supposed to work.

108
00:07:33.634 --> 00:07:36.236
Yeah.
&gt;&gt; Speaker 2: I was asking if all the code

109
00:07:36.236 --> 00:07:40.173
from flow typed types.js
should be checked in?

110
00:07:40.173 --> 00:07:43.236
&gt;&gt; Brian Holt: Yes, yep it should

111
00:07:43.236 --> 00:07:48.017
be.
&gt;&gt; Brian Holt: I

112
00:07:48.017 --> 00:07:50.912
think that's the recommendation
off the repo, but

113
00:07:50.912 --> 00:07:53.736
I mean you can use flow type
to install it as well, so

114
00:07:53.736 --> 00:07:59.399
you can probably ignore it as well.
&gt;&gt; Speaker 2: And

115
00:07:59.399 --> 00:08:01.312
the NPM folder too.
&gt;&gt; Brian Holt: I think so

116
00:08:01.312 --> 00:08:06.019
I think that's what they
recommend because like as

117
00:08:06.019 --> 00:08:10.616
those files get updated
even if your code is basing

118
00:08:10.616 --> 00:08:15.760
itself on broken types or
not broken types just maybe out

119
00:08:15.760 --> 00:08:20.834
date types You wanna be explicit that
you want to opt into those upgrades.

120
00:08:20.834 --> 00:08:23.513
It's not like NPM where you're
assured that if you pull in

121
00:08:23.513 --> 00:08:26.531
this version you're getting
this version 100% of the time.

122
00:08:26.531 --> 00:08:30.933
It's not so robust cuz really
it's just a repository full of

123
00:08:30.933 --> 00:08:34.190
types.
&gt;&gt; Brian Holt: So

124
00:08:34.190 --> 00:08:37.941
I believe the recommendation from the flow
team is to check in your types, and

125
00:08:37.941 --> 00:08:39.336
then update them yourself.

