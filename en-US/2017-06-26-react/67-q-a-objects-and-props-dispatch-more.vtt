WEBVTT

1
00:00:00.380 --> 00:00:01.421
&gt;&gt; Brian Holt: Go ahead.
&gt;&gt; Speaker 2: Quick question.

2
00:00:01.421 --> 00:00:08.109
What are the inputs and the outputs of
mapStateToProps and mapDispatchToProps?

3
00:00:08.109 --> 00:00:13.087
What's sort of the overall
purpose of them?

4
00:00:13.087 --> 00:00:17.685
I mean, what are they doing sort of the?
&gt;&gt; Brian Holt: They're returning objects,

5
00:00:17.685 --> 00:00:18.209
right?

6
00:00:18.209 --> 00:00:20.845
Right, this is an object.
&gt;&gt; Speaker 2: Okay.

7
00:00:20.845 --> 00:00:22.875
&gt;&gt; Brian Holt: So if you want to make this

8
00:00:22.875 --> 00:00:27.425
a little bit more verbose,
it's gonna look like this.

9
00:00:27.425 --> 00:00:29.874
&gt;&gt; Speaker 2: And.

10
00:00:35.296 --> 00:00:35.836
&gt;&gt; Brian Holt: Right, but

11
00:00:35.836 --> 00:00:39.162
this is what it actually looks like.
&gt;&gt; [SOUND]

12
00:00:39.162 --> 00:00:41.197
&gt;&gt; Speaker 2: And who eventually uses that

13
00:00:41.197 --> 00:00:43.628
object?
&gt;&gt; Brian Holt: So this is the object and

14
00:00:43.628 --> 00:00:48.442
you remember how we did something
like this right here ...show

15
00:00:48.442 --> 00:00:53.450
well it's taking this object and
spreading it over the component.

16
00:00:53.450 --> 00:00:56.120
That's precisely what's
happening here to search.

17
00:00:56.120 --> 00:01:01.916
It's taking this object and
spreading this object over search, right?

18
00:01:01.916 --> 00:01:05.750
So everything that I put in here is
going to be passed as a prop to search.

19
00:01:07.800 --> 00:01:10.800
So search term is now
a prop of search because of

20
00:01:10.800 --> 00:01:12.320
this.
&gt;&gt; Speaker 2: Okay.

21
00:01:13.730 --> 00:01:15.862
&gt;&gt; Brian Holt: So if I put, blah: 5,

22
00:01:15.862 --> 00:01:16.616
right.

23
00:01:16.616 --> 00:01:20.849
Now it have inside of props I
could reference props.blah and

24
00:01:20.849 --> 00:01:22.514
I would get 5, right.

25
00:01:22.514 --> 00:01:26.903
It's just passing props into search.
&gt;&gt; Speaker 2: Okay, great.

26
00:01:26.903 --> 00:01:31.706
And then the dispatch is?
&gt;&gt; Brian Holt: It's a function

27
00:01:31.706 --> 00:01:35.786
that Redux gives you to pass actions into

28
00:01:35.786 --> 00:01:41.044
the reducers.
&gt;&gt; Speaker 2: Okay.

29
00:01:41.044 --> 00:01:42.878
&gt;&gt; Brian Holt: Does that make sense?

30
00:01:42.878 --> 00:01:45.177
&gt;&gt; Speaker 3: Is that have use beyond

31
00:01:45.177 --> 00:01:51.284
wiring up event handlers usually?
&gt;&gt; Brian Holt: What is it?

32
00:01:51.284 --> 00:01:54.674
&gt;&gt; Speaker 3: MapDispatchToProps.

33
00:01:54.674 --> 00:01:58.053
Does it have use beyond?

34
00:01:58.053 --> 00:02:02.523
Wearing of event handlers, no.
&gt;&gt; Brian Holt: Well, mapDispatchToProps.

35
00:02:02.523 --> 00:02:04.495
Does it have more uses than that?

36
00:02:04.495 --> 00:02:10.610
I mean, you can kick off a synchronous
actions and we'll talk about

37
00:02:10.610 --> 00:02:15.906
that tomorrow, async actions.
&gt;&gt; Brian Holt: But

38
00:02:15.906 --> 00:02:21.880
it's gonna be kicking off action,
that's the point of map dispatch profits.

39
00:02:21.880 --> 00:02:26.170
Translating events in the UI to
actions into the Redux store,

40
00:02:26.170 --> 00:02:30.938
that's the whole purpose.
&gt;&gt; Speaker 4: Does the Redux state object

41
00:02:30.938 --> 00:02:35.496
get too complicated over time?
&gt;&gt; Brian Holt: I'm going to show you how

42
00:02:35.496 --> 00:02:37.409
to silo it tomorrow.

43
00:02:37.409 --> 00:02:41.682
So that despite the fact that that tree
can become quite large you're only gonna

44
00:02:41.682 --> 00:02:45.660
be working on very small slices at
a time so it keeps it pretty manageable.

45
00:02:46.820 --> 00:02:50.905
It can get complicated but
with discipline and

46
00:02:50.905 --> 00:02:57.833
kind of enforcing some rules on yourself
it can be fine even with giant stores.

