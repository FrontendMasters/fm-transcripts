WEBVTT

1
00:00:00.000 --> 00:00:02.856
&gt;&gt; Brian Holt: We're gonna go ahead and
start with webpack.

2
00:00:02.856 --> 00:00:07.808
So let's go ahead and first make it
necessary for us to have webpack.

3
00:00:07.808 --> 00:00:15.573
So here in klineapp.jsx rather then
having React look like this up here,

4
00:00:15.573 --> 00:00:20.846
we're gonna say,
import React from 'react'.

5
00:00:20.846 --> 00:00:27.021
And we're gonna say import
render from 'react-dom'.

6
00:00:34.318 --> 00:00:38.695
&gt;&gt; Brian Holt: Okay, so these are ES6
modules, this is what they look like now.

7
00:00:38.695 --> 00:00:45.801
For those of who that are coming from a
node background or a common JS background,

8
00:00:45.801 --> 00:00:50.936
this is the same as const
React = require('react').

9
00:00:56.310 --> 00:00:57.253
&gt;&gt; Brian Holt: But,
we are not doing this anymore.

10
00:00:57.253 --> 00:00:58.488
This is the old way of doing it.

11
00:00:58.488 --> 00:01:01.653
Import React from 'react',
this is the new way of doing it.

12
00:01:01.653 --> 00:01:05.174
You might ask yourself,
why are we doing it this way?

13
00:01:05.174 --> 00:01:06.585
Why didn't we just stick to Require?

14
00:01:06.585 --> 00:01:08.993
Because, everything
already supported Require.

15
00:01:08.993 --> 00:01:14.728
Well if you look at what just was there,
this is dynamic, right?

16
00:01:14.728 --> 00:01:18.385
We're feeding React into a function
that's gonna bring it in,

17
00:01:18.385 --> 00:01:20.833
therefore we could say require x, right?

18
00:01:20.833 --> 00:01:25.959
And x = 'react', so this can be dynamic.

19
00:01:25.959 --> 00:01:28.064
Which is cool.

20
00:01:28.064 --> 00:01:29.243
But to be honest with you,

21
00:01:29.243 --> 00:01:32.626
most of us were not using the dynamic
functionality of importing modules.

22
00:01:32.626 --> 00:01:33.428
Some of us were.

23
00:01:33.428 --> 00:01:35.635
Someone's gonna point that out to me.

24
00:01:35.635 --> 00:01:38.701
But most of us were just
using it statically, right?

25
00:01:38.701 --> 00:01:40.147
Which is exactly like this.

26
00:01:40.147 --> 00:01:43.970
You can't say import React from x,
that's invalid, right?

27
00:01:43.970 --> 00:01:46.194
It's always going to be from that.

28
00:01:46.194 --> 00:01:51.939
So in light of this, if we do static
modules as suppose to dynamic modules,

29
00:01:51.939 --> 00:01:54.872
this forges some really cool things.

30
00:01:54.872 --> 00:01:59.393
That for example, we can have webpack
go through all of our code and

31
00:01:59.393 --> 00:02:03.457
only include the things that
are actually being included.

32
00:02:05.725 --> 00:02:08.363
&gt;&gt; Brian Holt: So
an example of that would be,

33
00:02:08.363 --> 00:02:14.052
let's say I had a module that
explore default or I'll say export,

34
00:02:18.013 --> 00:02:19.976
&gt;&gt; Brian Holt: const x = 5 and

35
00:02:19.976 --> 00:02:27.080
I have another that says
report const y = 10, right?

36
00:02:27.080 --> 00:02:29.391
So let's say I had a file that did this,

37
00:02:29.391 --> 00:02:32.767
that I exported these two
different constants, right?

38
00:02:32.767 --> 00:02:39.439
And in another file,
I would say import, so different file.

39
00:02:43.704 --> 00:02:49.263
&gt;&gt; Brian Holt: Import x from like
I'm in clined app right now but

40
00:02:49.263 --> 00:02:53.337
it could be from MyModule, right?

41
00:02:55.449 --> 00:02:56.254
&gt;&gt; Brian Holt: This is my module.

42
00:03:00.071 --> 00:03:03.239
&gt;&gt; Brian Holt: What's cool about
this is I'm only including x, right,

43
00:03:03.239 --> 00:03:04.670
and I'm not including y.

44
00:03:04.670 --> 00:03:09.573
Webpack is smart enough to say,
now because of static modules why is it

45
00:03:09.573 --> 00:03:12.913
never imported,
I'm not going to include it.

46
00:03:12.913 --> 00:03:17.499
Now this is often referred
to as tree shaking, right?

47
00:03:17.499 --> 00:03:22.210
That's the common terminology for
this which is a total misnomer, right?

48
00:03:22.210 --> 00:03:23.762
Cuz tree-shaking has the idea like,

49
00:03:23.762 --> 00:03:26.199
you're gonna go through and
shake all the dead things off.

50
00:03:26.199 --> 00:03:30.204
It sounds like dead code elimination,
which is not actually quite true.

51
00:03:30.204 --> 00:03:33.291
It's actually live code inclusion.

52
00:03:33.291 --> 00:03:33.892
[LAUGH].

53
00:03:33.892 --> 00:03:38.212
So it's actually going to only include
things that could possibly be reached.

54
00:03:38.212 --> 00:03:41.505
As opposed to dead code elimination,
it's going to go through your code and

55
00:03:41.505 --> 00:03:43.107
remove things that could not be run.

56
00:03:43.107 --> 00:03:46.382
Largely you're gonna end
up at similar situations.

57
00:03:46.382 --> 00:03:48.798
But let's be accurate here, right?

58
00:03:48.798 --> 00:03:52.528
So that's why we went with
this new module system,

59
00:03:52.528 --> 00:03:55.926
is it can be statically
analyzed by our tools.

60
00:03:55.926 --> 00:03:59.406
And we can start pruning things off that
don't need to go down the wire, right?

61
00:03:59.406 --> 00:04:03.100
That's really important to us cuz we're
trying to constantly get things done in

62
00:04:03.100 --> 00:04:04.037
terms of file size.

63
00:04:04.037 --> 00:04:11.948
So notice that I'm saying includ
only render from react-dom.

64
00:04:11.948 --> 00:04:15.920
Now I have no idea how react-dom
is actually structured.

65
00:04:15.920 --> 00:04:19.392
But ideally, if render is not
importing other things, and

66
00:04:19.392 --> 00:04:22.727
react-dom was built with this
static analysis in mind,

67
00:04:22.727 --> 00:04:27.736
we could only include the render function
and we could leave everything else behind.

68
00:04:27.736 --> 00:04:29.609
I don't know if that actually happens or
not,

69
00:04:29.609 --> 00:04:32.309
but it's just a good idea to only
include the things that you need.

70
00:04:32.309 --> 00:04:36.491
So just in case they built in such a way
or maybe in the future it gets built

71
00:04:36.491 --> 00:04:40.830
in such a way that you're only including
code that could possibly be run.

72
00:04:40.830 --> 00:04:43.035
So that's what these curly braces mean,

73
00:04:43.035 --> 00:04:45.876
it means I'm only including
this particular piece.

74
00:04:45.876 --> 00:04:50.514
So down here instead of saying
ReactDOM.render I'm actually just gonna

75
00:04:50.514 --> 00:04:51.867
say render, right?

76
00:04:51.867 --> 00:04:55.250
Cuz these two reference to each other,
render and render.

77
00:04:55.250 --> 00:04:57.255
That makes sense?

78
00:04:57.255 --> 00:05:02.054
Now, notice I don't have
curly braces around React.

79
00:05:02.054 --> 00:05:05.729
I'm including the entire package here.

80
00:05:05.729 --> 00:05:11.821
So if you remember here,
I had export, cont x = 5, right?

81
00:05:16.507 --> 00:05:18.801
&gt;&gt; Brian Holt: So
if I say export default 5, right?

82
00:05:18.801 --> 00:05:19.930
That's what you're getting here.

83
00:05:19.930 --> 00:05:22.100
That's the default export.

84
00:05:26.443 --> 00:05:29.407
&gt;&gt; Speaker 2: If you mixed in a require
in there, if you did have a dynamic

85
00:05:29.407 --> 00:05:32.930
module that was being loaded,
would webpack just skip over it then?

86
00:05:32.930 --> 00:05:36.355
&gt;&gt; Brian Holt: I think the answer to that
question is it would just compile to

87
00:05:36.355 --> 00:05:37.438
be the same thing.

88
00:05:37.438 --> 00:05:38.521
I think it actually would work.

89
00:05:38.521 --> 00:05:39.692
It's not valid, right?

90
00:05:39.692 --> 00:05:42.569
But I think it would
still work with webpack.

91
00:05:46.541 --> 00:05:50.126
&gt;&gt; Brian Holt: The real answer to that
question is you still can do dynamic

92
00:05:50.126 --> 00:05:50.792
imports.

93
00:05:50.792 --> 00:05:52.261
It's just done differently now.

94
00:05:55.354 --> 00:05:59.372
&gt;&gt; Brian Holt: We're gonna talk about
it at the end of the third day, but

95
00:05:59.372 --> 00:06:03.402
there's a thing called,
import as a function, right?

96
00:06:03.402 --> 00:06:09.167
And this is going to be how we
do dynamic imports now, right?

97
00:06:09.167 --> 00:06:14.225
And then you can say promise,
.then(React) right and

98
00:06:14.225 --> 00:06:20.137
then you can start working with
React inside of that promise body.

99
00:06:20.137 --> 00:06:23.635
So that's also asynchronous.

100
00:06:30.515 --> 00:06:32.457
&gt;&gt; Brian Holt: So
semantically it's a bit different but

101
00:06:32.457 --> 00:06:34.462
this is ultimately gonna be better for us.

102
00:06:34.462 --> 00:06:35.471
It's gonna be better for the web.

103
00:06:35.471 --> 00:06:38.980
Okay, so, now this doesn't work.

104
00:06:38.980 --> 00:06:40.716
[LAUGH] We broke it.

105
00:06:40.716 --> 00:06:43.827
Because this has to be compiled now.

106
00:06:43.827 --> 00:06:48.628
Because right now, well, actually,
Chrome does support a little bit of ES6

107
00:06:48.628 --> 00:06:53.300
modules native to the browser, but
we're not going to be doing that today.

108
00:06:53.300 --> 00:06:57.423
So we need to run this through webpack
now, so that webpack can go out and

109
00:06:57.423 --> 00:07:01.686
grab React, it can go out and
grab react-dom, compile them together and

110
00:07:01.686 --> 00:07:02.879
send down one file.

111
00:07:05.825 --> 00:07:12.360
&gt;&gt; Brian Holt: So,
&gt;&gt; Brian Holt: What

112
00:07:12.360 --> 00:07:17.469
we're gonna do here
&gt;&gt; Brian Holt: Is, there it is.

113
00:07:20.482 --> 00:07:21.350
&gt;&gt; Brian Holt: We're gonna
go to the command line.

114
00:07:21.350 --> 00:07:29.331
And we're gonna say,
&gt;&gt; Brian Holt: First of all,

115
00:07:29.331 --> 00:07:33.213
you're gonna have to do either a yarn
global add or an npm install--global.

116
00:07:35.705 --> 00:07:37.826
&gt;&gt; Brian Holt: If you're
getting sick of this,

117
00:07:37.826 --> 00:07:41.471
there's also kind of a little
cheat that you can do here.

118
00:07:41.471 --> 00:07:44.737
You can also say
./node_modules/.bin/webpack,

119
00:07:44.737 --> 00:07:48.347
it should work for all of you if
you've done the yarn installs.

120
00:07:48.347 --> 00:07:49.579
So, inside of bin,

121
00:07:49.579 --> 00:07:54.591
it's gonna be all the different things
that are being included into our project.

122
00:07:54.591 --> 00:07:57.051
So we could call eslint from there.

123
00:07:57.051 --> 00:08:00.763
We could call flow from there,
prettier, all these different things.

124
00:08:00.763 --> 00:08:06.034
So if you want to, you can do that as
well, or you can just install it globally.

125
00:08:06.034 --> 00:08:06.786
That's kind of up to you.

126
00:08:06.786 --> 00:08:10.717
I have installed globally, so
I'm just going to do it that way.

127
00:08:10.717 --> 00:08:12.455
Maybe I don't.

128
00:08:12.455 --> 00:08:13.901
So I'm gonna do it that way.

129
00:08:13.901 --> 00:08:17.031
Node modules.bin/webpack.

130
00:08:17.031 --> 00:08:21.719
Then the entry file is going to be client,
or

131
00:08:21.719 --> 00:08:25.913
it's gonna be jsx, ClientApp.jsx.

132
00:08:25.913 --> 00:08:33.328
And then I'm gonna have it
output to public/bundle.js.

133
00:08:33.328 --> 00:08:38.502
So, you can see now, it took in

134
00:08:38.502 --> 00:08:43.875
this file, Clientapp dot jsx,

135
00:08:43.875 --> 00:08:48.453
and it output bundle.js.

136
00:08:48.453 --> 00:08:53.716
So now, if you go into pubic you should

137
00:08:53.716 --> 00:09:02.038
see a file called bundle.js,
&gt;&gt; Brian Holt: And

138
00:09:02.038 --> 00:09:03.785
you can see that it has all
of this stuff in there.

139
00:09:07.467 --> 00:09:08.088
&gt;&gt; Brian Holt: Did I not save this?

140
00:09:08.088 --> 00:09:09.850
I did not save it, okay.

141
00:09:09.850 --> 00:09:15.989
This should be a lot bigger now, because
it's going to include, run it again.

142
00:09:24.298 --> 00:09:25.049
&gt;&gt; Brian Holt: There you go, okay.

143
00:09:25.049 --> 00:09:26.904
Yours should look something like that,
right?

144
00:09:26.904 --> 00:09:31.790
Basically it's saying I needed to
include all of this stuff, right?

145
00:09:31.790 --> 00:09:33.387
Cuz this is all the stuff
coming from React.

146
00:09:33.387 --> 00:09:39.191
And I outputted a bundle
that is 739 kilobytes.

147
00:09:39.191 --> 00:09:41.363
Seems reasonable, doesn't it?

148
00:09:41.363 --> 00:09:44.117
It's not, it's not reasonable at all.

149
00:09:44.117 --> 00:09:48.188
But you have to keep in mind, this is
un-minified, this is un-g zipped, and

150
00:09:48.188 --> 00:09:50.298
this is the development build, right?

151
00:09:50.298 --> 00:09:53.463
So we're building specifically now for
our purposes.

152
00:09:53.463 --> 00:09:55.086
This is gonna be cone
that's easier to read, so

153
00:09:55.086 --> 00:09:56.721
you can actually open up the bundle and
read it.

154
00:09:56.721 --> 00:10:00.648
And it's going to be the version of React
that has all the developer warnings and

155
00:10:00.648 --> 00:10:02.354
all that kind of stuff available.

156
00:10:04.668 --> 00:10:06.300
&gt;&gt; Brian Holt: So
when we build this for production,

157
00:10:06.300 --> 00:10:08.035
it's going to be much smaller, right?

158
00:10:08.035 --> 00:10:09.788
Because it's gonna minified.

159
00:10:09.788 --> 00:10:10.704
It's gonna be gzipped.

160
00:10:10.704 --> 00:10:11.773
It's gonna be tree shook.

161
00:10:11.773 --> 00:10:13.782
It's gonna be all those different things.

162
00:10:17.280 --> 00:10:21.112
&gt;&gt; Brian Holt: Okay, so
now if we go to index.html and

163
00:10:21.112 --> 00:10:24.142
we have the script right here.

164
00:10:24.142 --> 00:10:29.793
We're gonna say source equals

165
00:10:29.793 --> 00:10:35.666
public/bundle.js, right?

166
00:10:35.666 --> 00:10:39.634
And now, we don't have to include these
two script tags up here either, right?

167
00:10:39.634 --> 00:10:43.055
Cuz they already been
included with our bundle.

168
00:10:43.055 --> 00:10:47.442
So this is one of the nice
parts about webpack.

169
00:10:47.442 --> 00:10:51.353
Cuz every time I include a module, I don't
have to go and add another script tag.

170
00:10:51.353 --> 00:10:54.313
It's just going to be always
included in there in that bundle.

171
00:10:58.713 --> 00:11:04.141
&gt;&gt; Brian Holt: So
I should be able now to go to this.

172
00:11:04.141 --> 00:11:07.059
And I can refresh, and
it still works, right?

173
00:11:07.059 --> 00:11:08.818
Everything's still being included.

174
00:11:11.351 --> 00:11:13.622
&gt;&gt; Brian Holt: And you can see
there it's only including bundle.

175
00:11:13.622 --> 00:11:18.632
Which if you look at how big it is,
it's quite large

176
00:11:25.618 --> 00:11:26.729
&gt;&gt; Brian Holt: You can see it's huge.

177
00:11:31.205 --> 00:11:32.981
&gt;&gt; Brian Holt: I mean look at that,
look on the side there.

178
00:11:32.981 --> 00:11:35.424
It's just astronomically huge.

179
00:11:35.424 --> 00:11:38.222
But this is literally
the entire library for

180
00:11:38.222 --> 00:11:41.780
React unminified with all
of the development helpers.

181
00:11:44.696 --> 00:11:45.614
&gt;&gt; Brian Holt: Any
questions about webpack?

182
00:11:45.614 --> 00:11:50.491
&gt;&gt; Speaker 3: Could you go
back to the client again?

183
00:11:50.491 --> 00:11:51.076
&gt;&gt; Brian Holt: Yeah.

184
00:11:57.891 --> 00:12:02.931
&gt;&gt; Speaker 3: How does it know how to do
that without any webpack config file?

185
00:12:02.931 --> 00:12:05.051
&gt;&gt; Brian Holt: Well we're just
using all the default setttings.

186
00:12:05.051 --> 00:12:08.012
&gt;&gt; Speaker 3: And
wetpack already has that out of the box?

187
00:12:08.012 --> 00:12:09.992
&gt;&gt; Brian Holt: Yeah, it's actually,

188
00:12:09.992 --> 00:12:15.570
people like to think that wetpack is
a big complicated beast for sure.

189
00:12:15.570 --> 00:12:18.198
It doesn't have to be
a big complicated beast.

190
00:12:18.198 --> 00:12:22.556
The only thing that bare minimum that it
requires, it requires an entry point,

191
00:12:22.556 --> 00:12:25.825
which we gave it, Clientapp,
and requires an exit point.

192
00:12:25.825 --> 00:12:29.994
Which is bundle.js.

193
00:12:29.994 --> 00:12:33.859
Everything else, we can just
rely on webpack to take care of.

194
00:12:33.859 --> 00:12:39.294
Now don't get me wrong, we're about
to make a big ass config file, right?

195
00:12:39.294 --> 00:12:45.159
Because we don't want the default build,
but by in itself this works as is.

196
00:12:45.159 --> 00:12:47.718
Webpack can be configured through the CLI.

197
00:12:47.718 --> 00:12:52.317
I guess that's what I'm
trying to get at here.

