WEBVTT

1
00:00:00.000 --> 00:00:02.828
&gt;&gt; Brian Holt: Let's go to landing now.

2
00:00:02.828 --> 00:00:04.231
Yep, we're gonna go landing.

3
00:00:08.914 --> 00:00:13.956
&gt;&gt; Brian Holt: What we're gonna
do here is we're going to

4
00:00:13.956 --> 00:00:20.129
import a function called
connect from react-redux

5
00:00:26.114 --> 00:00:29.128
&gt;&gt; Brian Holt: Now what we're gonna do is

6
00:00:29.128 --> 00:00:34.060
we're going to write this function called

7
00:00:34.060 --> 00:00:38.724
mapStateToProps, mapStateToProps.

8
00:00:38.724 --> 00:00:42.172
It's gonna take in state.

9
00:00:42.172 --> 00:00:45.723
And it's going to return an object.

10
00:00:45.723 --> 00:00:50.861
Now something that people get kind
of confused with here is if you have

11
00:00:50.861 --> 00:00:55.911
a one minor object that you wanna
return like, let's say it was just

12
00:00:55.911 --> 00:01:04.695
searchTerm: state.searchTerm
&gt;&gt; Brian Holt: This

13
00:01:04.695 --> 00:01:08.372
is technically not valid JavaScript
despite the fact that it really,

14
00:01:08.372 --> 00:01:11.003
really looks like it should
be valid JavaScript.

15
00:01:11.003 --> 00:01:14.291
Well, what do curly braces
mean in this particular case?

16
00:01:14.291 --> 00:01:16.696
It means the beginning of a function body,
right?

17
00:01:16.696 --> 00:01:18.550
It doesn't mean an object.

18
00:01:18.550 --> 00:01:22.870
So it's expecting me to put stuff
in here like console out log,

19
00:01:22.870 --> 00:01:26.144
whatever, or I don't know,
stuff like that.

20
00:01:26.144 --> 00:01:31.255
Really common mistake to make
with es6 error functions, and

21
00:01:31.255 --> 00:01:36.772
it's just because curly braces
mean more than one thing, right?

22
00:01:36.772 --> 00:01:39.432
And then in this particular
case they mean function bodies.

23
00:01:39.432 --> 00:01:44.686
So, if we wrap this in parentheses, with
the letter I, just kiddin, that's a joke.

24
00:01:44.686 --> 00:01:48.673
[LAUGH] [COUGH] If you wrap it with
parentheses, then you're letting it know,

25
00:01:48.673 --> 00:01:51.991
no, I actually mean to return
an object literal here, right?

26
00:02:02.172 --> 00:02:04.046
&gt;&gt; Brian Holt: Does that make sense
why I put parentheses around it and

27
00:02:04.046 --> 00:02:04.790
why they're there?

28
00:02:06.530 --> 00:02:11.500
What this function does is it takes the
whole state of redux, right, that's what

29
00:02:11.500 --> 00:02:15.990
this state is, and it pulls out just
the thing that this component cares about.

30
00:02:15.990 --> 00:02:18.520
You don´t wanna be passing around
the state of redux willy nilly,

31
00:02:18.520 --> 00:02:20.430
that´s a bad idea, promise.

32
00:02:22.450 --> 00:02:25.060
This is gonna pull out just
the things that you need, and

33
00:02:25.060 --> 00:02:30.300
it´s going to inject them as
a prop into your component.

34
00:02:30.300 --> 00:02:33.555
The way that it does that connecting
is with, as you may have guessed,

35
00:02:33.555 --> 00:02:34.669
the connect function.

36
00:02:35.810 --> 00:02:43.083
So I wanna say connect
(mapStateToProps)(Landing) like that.

37
00:02:46.192 --> 00:02:48.170
&gt;&gt; Brian Holt: It's kind
of a weird notation but

38
00:02:48.170 --> 00:02:51.640
I will show you why it's in
that notation in just a second.

39
00:02:53.100 --> 00:02:55.520
But basically you call
connect with mapStateToProps,

40
00:02:55.520 --> 00:02:57.760
which returns a function, right?

41
00:02:57.760 --> 00:02:59.764
Just this bit right here is a function,

42
00:02:59.764 --> 00:03:03.489
that when called the something else
is going to connect that component.

43
00:03:03.489 --> 00:03:07.876
So we could potentially re-use
it multiple times, you won't,

44
00:03:07.876 --> 00:03:10.670
[LAUGH] but you could, right?

45
00:03:10.670 --> 00:03:12.320
So, that's why there's
two function calls here.

46
00:03:14.140 --> 00:03:18.490
The first bit is going to be, what
you're gonna use to pull out state and

47
00:03:18.490 --> 00:03:20.100
the second bit is that
gonna be the component.

48
00:03:21.200 --> 00:03:21.700
That make sense?

49
00:03:23.923 --> 00:03:26.064
&gt;&gt; Brian Holt: So let me show you
why that is actually the way it is.

50
00:03:29.268 --> 00:03:31.125
&gt;&gt; Brian Holt: How many of
you have heard of decorators?

51
00:03:33.696 --> 00:03:34.270
&gt;&gt; Brian Holt: Super cool,

52
00:03:34.270 --> 00:03:38.290
they're one of my things I'm most
excited about upcoming in JavaScript.

53
00:03:38.290 --> 00:03:42.595
If you write a lot of Python inevitably
you end up writing a lot of decorators,

54
00:03:42.595 --> 00:03:43.200
right?

55
00:03:43.200 --> 00:03:45.420
There´s a lot of other
languages that have these

56
00:03:46.840 --> 00:03:48.960
really cool language
features called decorators.

57
00:03:50.200 --> 00:03:54.637
So what we could do here
if we could use decorators,

58
00:03:54.637 --> 00:04:00.329
which we can´t, but what you would
do is it would look like this.

59
00:04:03.653 --> 00:04:06.766
&gt;&gt; Brian Holt: You would
say up here above Landing,

60
00:04:06.766 --> 00:04:11.587
we'd have to convert this to a class,
so pretend just for

61
00:04:11.587 --> 00:04:15.403
a second that I had
converted this to a class,

62
00:04:15.403 --> 00:04:20.124
I would say class Landing
extends React.Components or

63
00:04:20.124 --> 00:04:24.946
Component, whatever,
I don't care, Component, and

64
00:04:24.946 --> 00:04:29.230
there is a bunch of useful stuff in here,
right?

65
00:04:29.230 --> 00:04:31.797
Okay, can we all pretend momentarily,

66
00:04:31.797 --> 00:04:35.126
cuz I don't wanna have to
rewrite it just to go back?

67
00:04:35.126 --> 00:04:41.063
So if this was an es6 class, we could put
@connect (mapStateToProps) like that,

68
00:04:41.063 --> 00:04:46.918
and then suddenly, rather then doing this
kind of awkward looking thing down here,

69
00:04:46.918 --> 00:04:51.050
this landing would just
automatically be connected to it.

70
00:04:51.050 --> 00:04:56.310
So basically,
this is going to get passed in, which is

71
00:04:56.310 --> 00:05:01.099
going to return a function which is going
to run on the result of the landing class.

72
00:05:02.650 --> 00:05:04.639
This is called a decorator, right?

73
00:05:04.639 --> 00:05:11.240
This is gonna be stage two or
stage three proposal for JavaScript.

74
00:05:11.240 --> 00:05:15.335
So it's most likely gonna make it cuz
everyone is pretty excited about it,

75
00:05:15.335 --> 00:05:16.120
me included.

76
00:05:16.120 --> 00:05:18.820
I'm really excited for
the day I can use this.

77
00:05:18.820 --> 00:05:21.660
You can actually do this
right now with the transform,

78
00:05:21.660 --> 00:05:25.710
the issue is that Flow doesn´t
understand decorators yet.

79
00:05:25.710 --> 00:05:27.710
So we´re not gonna do it today, but

80
00:05:27.710 --> 00:05:30.640
you´ll see lots of people out
there using decorators this way.

81
00:05:30.640 --> 00:05:32.410
So I wanted to make you aware
that you may see it and

82
00:05:32.410 --> 00:05:36.630
it´s also something to be excited about,
in my opinion, but for

83
00:05:36.630 --> 00:05:39.060
today we're just gonna stick with
the normal way of calling connect.

84
00:05:39.060 --> 00:05:44.590
So that's why I wanted to say that
connect has this weird way of looking,

85
00:05:44.590 --> 00:05:49.771
right, where it looks like this,
connect (mapStateToProps ).

86
00:05:53.718 --> 00:05:57.790
&gt;&gt; Brian Holt: Because they did it like
this, that's how a decorator works anyway.

87
00:05:58.880 --> 00:06:00.835
So they didn't have to make two functions,
right?

88
00:06:00.835 --> 00:06:03.992
They didn't have to make a connect
decorator and a connect function,

89
00:06:03.992 --> 00:06:05.928
they were able to just
reuse both of those.

90
00:06:09.140 --> 00:06:10.400
&gt;&gt; Brian Holt: Any questions about that?

91
00:06:10.400 --> 00:06:12.393
This is kind of an aside, but
it's something I'm excited about so

92
00:06:12.393 --> 00:06:12.973
I wanted to share.

93
00:06:15.409 --> 00:06:17.589
&gt;&gt; Speaker 2: Just whatever
function follows, or

94
00:06:17.589 --> 00:06:19.936
whatever constructor class follows?

95
00:06:19.936 --> 00:06:23.050
&gt;&gt; Brian Holt: So the @connect is going
to return a function that's going to be

96
00:06:23.050 --> 00:06:24.920
called on the class.

97
00:06:26.000 --> 00:06:28.696
&gt;&gt; Speaker 2: Whatever is next, cuz you
didn't explicitly say like [CROSSTALK]

98
00:06:28.696 --> 00:06:29.508
&gt;&gt; Brian Holt: Right, you don't

99
00:06:29.508 --> 00:06:31.641
explicitly, it's called
on your behalf right,

100
00:06:31.641 --> 00:06:34.199
the connect function is going
to be called by the language.

101
00:06:38.627 --> 00:06:42.113
Right, I had @connect
mapStateToProps right, but

102
00:06:42.113 --> 00:06:46.500
they're gonna be decorators like @auth,
right?

103
00:06:46.500 --> 00:06:47.610
That's just gonna look like that, and

104
00:06:47.610 --> 00:06:51.410
it doesn't necessarily have to return a
function, well wait, let me rephrase that.

105
00:06:51.410 --> 00:06:53.858
It doesn't have to be a function that
you call that returns a function, right?

106
00:06:53.858 --> 00:06:56.010
It could just be a function.

107
00:06:56.010 --> 00:06:58.410
&gt;&gt; Speaker 2: So is that [COUGH]
almost like constructors and

108
00:06:58.410 --> 00:07:03.980
destructors in C++ or something like that,
where you've got a class object and

109
00:07:03.980 --> 00:07:09.090
there's something that's called either
during instantiation or when it exits?

110
00:07:10.360 --> 00:07:11.703
&gt;&gt; Brian Holt: Okay, so yeah,
I kinda see what you're saying.

111
00:07:16.762 --> 00:07:19.828
&gt;&gt; Brian Holt: I´m gonna say no comment
on it, cuz I don´t actually know enough

112
00:07:19.828 --> 00:07:23.060
exactly what connection
you´re gonna make with that.

113
00:07:23.060 --> 00:07:27.700
But I will say that, it´s just providing

114
00:07:27.700 --> 00:07:30.130
additional functionality in
a declarative fashion, right.

115
00:07:30.130 --> 00:07:34.590
So if I had something like this where it
was calling @auth, it would basically mean

116
00:07:34.590 --> 00:07:38.390
something like you can't construct
this unless it's authorized, right?

117
00:07:38.390 --> 00:07:41.081
So you're just kind of declaring
like this must be auth, right?

118
00:07:41.081 --> 00:07:44.025
And then you can just kinda go about
your way of doing that, right?

119
00:07:44.025 --> 00:07:48.928
[COUGH] And this is gonna work both on
whole classes like I showed you here and

120
00:07:48.928 --> 00:07:50.919
also on individual methods.

121
00:07:50.919 --> 00:07:54.547
So that's probably where you can
have a route on your router and

122
00:07:54.547 --> 00:07:58.723
then you just say @auth and
it's like the user can't call this method,

123
00:07:58.723 --> 00:08:01.000
unless they're authorized, right?

124
00:08:02.250 --> 00:08:05.616
So it's kind of declaring in that
particular sense, does that make sense?

125
00:08:05.616 --> 00:08:06.402
Cool.

126
00:08:10.951 --> 00:08:13.990
&gt;&gt; Brian Holt: Okay, so
that's enough about decorators.

127
00:08:13.990 --> 00:08:17.150
They're super exciting but
not yet, they're not yet exciting.

