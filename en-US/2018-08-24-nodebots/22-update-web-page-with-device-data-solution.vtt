WEBVTT

1
00:00:00.089 --> 00:00:03.412
&gt;&gt; Steve Kinney: So
our mission was to kind of marry two of

2
00:00:03.412 --> 00:00:05.538
our previous attempts.

3
00:00:05.538 --> 00:00:08.716
So earlier, we set up an express server.

4
00:00:08.716 --> 00:00:11.599
And we were able to kind of
communicate over web sockets.

5
00:00:11.599 --> 00:00:12.817
Then just now,

6
00:00:12.817 --> 00:00:18.642
we just were doing the command line
interface with the temperature data.

7
00:00:18.642 --> 00:00:20.926
So we wanna kinda bring
those two things together.

8
00:00:20.926 --> 00:00:23.773
We'll be working with
two major files today,

9
00:00:23.773 --> 00:00:28.532
playground.js which is just like
a pretty empty file, and the server.js.

10
00:00:28.532 --> 00:00:32.199
And the only reason I really had two
files is cuz I didn't wanna write

11
00:00:32.199 --> 00:00:33.881
that express code over again.

12
00:00:33.881 --> 00:00:35.938
So I do need to make the choice of,

13
00:00:35.938 --> 00:00:39.393
do I bring all that express
code to the playground.js or

14
00:00:39.393 --> 00:00:43.380
do I bring all the weather station
code I wrote into server.js.

15
00:00:43.380 --> 00:00:48.391
I am going to go with the path of least
resistance which is to take the very

16
00:00:48.391 --> 00:00:53.165
little code from the weather and
bring it over into the server.js.

17
00:00:53.165 --> 00:00:56.230
So what I'll do is I'll simply
kinda take this code right now,

18
00:00:57.963 --> 00:00:59.504
&gt;&gt; Steve Kinney: And copy it.

19
00:01:01.168 --> 00:01:06.300
&gt;&gt; Steve Kinney: Cool, and
bring it over to server.js.

20
00:01:08.517 --> 00:01:09.398
&gt;&gt; Steve Kinney: Paste it in there.

21
00:01:09.398 --> 00:01:12.361
Now, I don't have these graphs anymore.

22
00:01:12.361 --> 00:01:14.699
Let's get rid of those.

23
00:01:14.699 --> 00:01:18.772
And it seems to be all,
I need to get rid of that LED.

24
00:01:18.772 --> 00:01:20.455
There's only two things
I need to get rid of.

25
00:01:20.455 --> 00:01:23.857
So when the board's ready,
we'll fire up our web server.

26
00:01:23.857 --> 00:01:28.271
It's got socket.io installed.

27
00:01:28.271 --> 00:01:30.778
We'll get all the server up and running,

28
00:01:30.778 --> 00:01:34.436
and then we'll get our weather
monitor with handle change.

29
00:01:34.436 --> 00:01:41.756
We'll do all of our readings every
470 milliseconds and we'll call that.

30
00:01:41.756 --> 00:01:46.943
So with the socket io,
I can say io.sockets.emit,

31
00:01:46.943 --> 00:01:53.293
and this will take all connected
clients and send them a message.

32
00:01:53.293 --> 00:01:57.596
And we'll say that
the weather has been updated.

33
00:02:00.618 --> 00:02:04.883
&gt;&gt; Steve Kinney: Cool,
and go ahead and do that.

34
00:02:04.883 --> 00:02:07.217
And the payload is gonna
be the temperature.

35
00:02:10.026 --> 00:02:14.451
&gt;&gt; Steve Kinney: The pressure, and
the relative humidity that I read.

36
00:02:14.451 --> 00:02:19.736
So now every time the weather changes,
this server running on the Tessel

37
00:02:19.736 --> 00:02:24.250
is gonna go in and emit this data
to all the connected clients.

38
00:02:24.250 --> 00:02:28.450
And it is one of those things where if
a server sends out a web socket and

39
00:02:28.450 --> 00:02:31.509
no one's listening,
did it ever really happen?

40
00:02:31.509 --> 00:02:32.662
Yes, technically,

41
00:02:32.662 --> 00:02:36.894
I mean that's hard, that's a really
deep philosophical question, right?

42
00:02:36.894 --> 00:02:38.116
Did anything go over web socket?

43
00:02:38.116 --> 00:02:40.875
No, there's no connections, it's hard.

44
00:02:40.875 --> 00:02:45.502
[LAUGH] We can talk about that later,
I was like, obviously, it happened,

45
00:02:45.502 --> 00:02:46.682
maybe it hasn't.

46
00:02:46.682 --> 00:02:51.348
Cool, and earlier I showed you that
index.html held the weather data.

47
00:02:51.348 --> 00:02:55.758
We'll go into the weather station,
socket weather, and

48
00:02:55.758 --> 00:02:59.817
grab that, and
put in the index.html for my public.

49
00:03:02.385 --> 00:03:06.643
&gt;&gt; Steve Kinney: And now what we need
to do is write the client side code.

50
00:03:06.643 --> 00:03:11.465
So in this case, we'll do,
&gt;&gt; Steve Kinney: const socket =

51
00:03:11.465 --> 00:03:16.611
io,
&gt;&gt; Steve Kinney: And we'll say

52
00:03:16.611 --> 00:03:23.155
socket.on('weather updated').

53
00:03:23.155 --> 00:03:27.772
I'm not gonna make the same mistake twice,
and

54
00:03:27.772 --> 00:03:31.475
I am definitely going to verify that.

55
00:03:31.475 --> 00:03:33.989
So it was weather updated, cool.

56
00:03:38.244 --> 00:03:42.359
&gt;&gt; Steve Kinney: And I'm just gonna start
by console logging to do a sanity check

57
00:03:42.359 --> 00:03:44.776
before I get too far ahead of myself.

58
00:03:50.309 --> 00:03:51.820
&gt;&gt; Steve Kinney: So it is a whole object.

59
00:03:51.820 --> 00:03:53.488
We were setting a plain
old JavaScript object.

60
00:03:53.488 --> 00:03:56.164
I can destructure it
here if I really want to.

61
00:03:56.164 --> 00:03:59.540
Either way is fine,
we'll just console log it for now.

62
00:04:01.684 --> 00:04:04.457
&gt;&gt; Steve Kinney: And
I'll go ahead and deploy that.

63
00:04:07.429 --> 00:04:10.789
&gt;&gt; Steve Kinney: t2 run, in this case,
I moved it to server, so

64
00:04:10.789 --> 00:04:12.981
it's gonna be t2 run server.

65
00:04:12.981 --> 00:04:18.883
Give it a second to load and
deploy and we'll see what we have.

66
00:04:18.883 --> 00:04:22.923
So I had a quick issue that I needed to
resolve, which is when I did that copy and

67
00:04:22.923 --> 00:04:25.738
paste job,
I did not bring over load ashes throttle.

68
00:04:25.738 --> 00:04:27.466
So I do need to rectify that real quick.

69
00:04:36.424 --> 00:04:38.241
&gt;&gt; Steve Kinney: Throttle = require.

70
00:04:48.457 --> 00:04:50.330
&gt;&gt; Steve Kinney: And we will go ahead and

71
00:04:50.330 --> 00:04:55.071
we will endure the wait as we
push out to the device again.

72
00:04:55.071 --> 00:04:57.114
Wait for the server to start up.

73
00:04:59.750 --> 00:05:01.190
&gt;&gt; Steve Kinney: Go directly to that.

74
00:05:04.348 --> 00:05:06.677
&gt;&gt; Steve Kinney: So
we can see about every half second or so,

75
00:05:06.677 --> 00:05:10.691
just slightly under a half a second,
we're getting those temperature,

76
00:05:10.691 --> 00:05:13.103
pressure and relative humidity readings.

77
00:05:13.103 --> 00:05:16.573
So we know that we figured
out the web socket part.

78
00:05:16.573 --> 00:05:21.316
Really all that's left for us is a little
bit of down manipulation, right?

79
00:05:21.316 --> 00:05:24.502
So let's go ahead and
look at that index.html.

80
00:05:26.317 --> 00:05:31.508
&gt;&gt; Steve Kinney: We can see I've
got some very, very well-named

81
00:05:31.508 --> 00:05:37.723
paragraph tags that I can go ahead and
grab, or actually,

82
00:05:43.058 --> 00:05:45.795
&gt;&gt; Steve Kinney: Grab the three of those.

83
00:05:45.795 --> 00:05:49.279
Go back over into my script and I'll say.

84
00:06:06.210 --> 00:06:11.283
&gt;&gt; Steve Kinney: Cool, so I've got
a paragraph text for each of those.

85
00:06:11.283 --> 00:06:17.243
And so what we'll do next is we'll simply
say, we'll grab these, actually, again.

86
00:06:38.385 --> 00:06:44.155
&gt;&gt; Steve Kinney: .textContent = data.,
whatever that was.

87
00:06:44.155 --> 00:06:45.722
All right, let's go ahead and
redeploy this.

88
00:06:50.336 --> 00:06:51.948
&gt;&gt; Steve Kinney: So
the only bad part we do here,

89
00:06:51.948 --> 00:06:56.367
we gotta have the speed of local host if
you're making those client-side changes.

90
00:06:56.367 --> 00:06:59.036
You do have to send everything
back over to the device.

91
00:07:03.429 --> 00:07:06.366
&gt;&gt; Steve Kinney: But honestly,
for everything that we gain,

92
00:07:06.366 --> 00:07:08.771
I'm willing to [LAUGH] pay that cost.

93
00:07:12.923 --> 00:07:17.615
&gt;&gt; Steve Kinney: Now we can see that
we're updating a web page with this data,

94
00:07:17.615 --> 00:07:18.910
which is great.

95
00:07:18.910 --> 00:07:23.679
We figured out earlier how to send web
socket requests where we did the RGB LED,

96
00:07:23.679 --> 00:07:28.087
we could send web socket requests from
the browser to the Tessel board and

97
00:07:28.087 --> 00:07:29.113
change the LED.

98
00:07:29.113 --> 00:07:33.612
And now we have the opposite, we have
the ability to get data from the sensors

99
00:07:33.612 --> 00:07:36.582
hooked up to our Tessel and
send in to the browser.

100
00:07:36.582 --> 00:07:41.129
So now we can build UIs with node and
client side JavaScript for

101
00:07:41.129 --> 00:07:43.765
all of our hardware really easily.

