WEBVTT

1
00:00:00.024 --> 00:00:05.900
Now, one thing that we've kind
of been doing is we've all been,

2
00:00:05.900 --> 00:00:09.080
this is like a teasel on my local network.

3
00:00:09.080 --> 00:00:13.631
But I could be out about
as I'm known to do and

4
00:00:13.631 --> 00:00:18.864
want to know what the weather
in my basement is.

5
00:00:18.864 --> 00:00:20.900
Who amongst us has not had this situation?

6
00:00:20.900 --> 00:00:22.285
Is it just me?

7
00:00:22.285 --> 00:00:23.587
It's just me, okay.

8
00:00:23.587 --> 00:00:27.900
[LAUGH] Cool, so I could do some
fancy routing to a device, and

9
00:00:27.900 --> 00:00:33.501
try to figure out how to make this device
publicly available over the network.

10
00:00:33.501 --> 00:00:37.198
But again, we could also have a web server

11
00:00:37.198 --> 00:00:41.330
sitting somewhere in the cloud,
if you will.

12
00:00:41.330 --> 00:00:44.777
And we could have this teasel send,
right now we've been sending HT like

13
00:00:44.777 --> 00:00:48.440
sending issues for your request of
the test like, give me a web page.

14
00:00:48.440 --> 00:00:50.310
But in the same way with WebSockets,

15
00:00:50.310 --> 00:00:52.878
we can also make POST request
to a web server somewhere.

16
00:00:52.878 --> 00:00:55.750
Whether it's like in AWS or
somewhere along those lines,

17
00:00:55.750 --> 00:00:59.300
we can have a web server, we can have this
device, not necessarily running its own

18
00:00:59.300 --> 00:01:03.890
express server, but instead,
simply getting the readings and

19
00:01:03.890 --> 00:01:07.780
making POST requests to a server that's,
maybe, storing it in the database.

20
00:01:07.780 --> 00:01:11.360
Or maybe, just kind of keeping it in
memory and allowing us to see it.

21
00:01:11.360 --> 00:01:15.840
So what we're gonna do is, I have a little
web server ready to rock and roll.

22
00:01:15.840 --> 00:01:20.133
And we're just going to instead of
sending WebSockets or console logging,

23
00:01:20.133 --> 00:01:24.168
what we'll do instead is have it send
POST requests to that web server.

24
00:01:24.168 --> 00:01:26.546
And if you want this web server,
you can have it as well.

25
00:01:26.546 --> 00:01:28.562
Has anyone ever played
around with Glitch before?

26
00:01:30.548 --> 00:01:33.700
Glitch is one of my favorite projects.

27
00:01:33.700 --> 00:01:38.500
Glitch is a web UI and it allows you, if
you hit like new project, it will give you

28
00:01:38.500 --> 00:01:42.872
a node server running in a container
that you can effectively go ahead and

29
00:01:42.872 --> 00:01:44.720
edit in the browser.

30
00:01:44.720 --> 00:01:46.580
And every time you save or
every time you make a change,

31
00:01:46.580 --> 00:01:48.310
it just redeploys your application.

32
00:01:48.310 --> 00:01:51.330
So you can just basically rapidly
prototype the node server and

33
00:01:51.330 --> 00:01:52.150
you're good to go.

34
00:01:52.150 --> 00:01:55.180
The other really cool thing
about Glitch is if somebody

35
00:01:55.180 --> 00:01:59.650
made an application that you need,
so here's a with edit.

36
00:02:00.700 --> 00:02:01.390
You can go ahead.

37
00:02:01.390 --> 00:02:04.318
This one's called available-airbus.

38
00:02:04.318 --> 00:02:11.250
It's in the notes for this project,
right, that generates a name for you.

39
00:02:11.250 --> 00:02:12.460
And normally I change it, but

40
00:02:12.460 --> 00:02:15.521
I actually really like this one I
couldn't bring myself to do it.

41
00:02:15.521 --> 00:02:19.209
But you can see and go ahead,
and change whatever you want and

42
00:02:19.209 --> 00:02:21.390
just like literally edit the code.

43
00:02:21.390 --> 00:02:24.310
And every time you make a change,
it redeploys your web server.

44
00:02:24.310 --> 00:02:29.100
So this is available at
available-airbus dot glitch dot me.

45
00:02:29.100 --> 00:02:33.640
And you, if you want it, you can actually
just hit this Remix This button and

46
00:02:33.640 --> 00:02:35.540
you'll get a copy of
this it's like forking.

47
00:02:35.540 --> 00:02:36.940
And all you need to do
is login with GitHub so

48
00:02:36.940 --> 00:02:38.370
you don't even need to make an account.

49
00:02:38.370 --> 00:02:40.214
You go in, you sign in with GitHub,

50
00:02:40.214 --> 00:02:42.869
you hit Remix This,
you have a copy of this server.

51
00:02:42.869 --> 00:02:46.971
To preview it, this is it right now.

52
00:02:46.971 --> 00:02:51.309
It's basically just storing
the temperature, relative humidity,

53
00:02:51.309 --> 00:02:52.952
and pressure in memory.

54
00:02:52.952 --> 00:02:57.210
So like a Heroku app that they get shut
down every once in a while if they're not

55
00:02:57.210 --> 00:03:00.060
using it, not being used, so
you see they're currently blank.

56
00:03:00.060 --> 00:03:04.677
But I can simply send a POST request to
the server and I will kind of see this.

57
00:03:04.677 --> 00:03:09.128
All right, this is available at
available-airbus dot glitch dot me, so

58
00:03:09.128 --> 00:03:10.016
I can be out and

59
00:03:10.016 --> 00:03:14.406
about and I can get the temperature
of my refrigerator or whatever.

60
00:03:14.406 --> 00:03:16.373
You gotta make sure the ice
cream is not melting.

61
00:03:16.373 --> 00:03:19.222
You're out, it's a warm day out,
you need some ice cream.

62
00:03:19.222 --> 00:03:21.110
You wanna make sure it's
the proper temperature,

63
00:03:21.110 --> 00:03:23.520
so now you can check it on your phone,
cool.

64
00:03:24.550 --> 00:03:27.040
And we're not gonna play with
the sort of moisture sensors there,

65
00:03:27.040 --> 00:03:28.530
but you can hook up all these things.

66
00:03:28.530 --> 00:03:31.990
You basically have all sorts of
information about your house

67
00:03:31.990 --> 00:03:35.900
being sent out, stuff like that,
which is really cool.

68
00:03:35.900 --> 00:03:36.820
So we'll go ahead.

69
00:03:36.820 --> 00:03:39.030
I'm just gonna play with
this in the playground,

70
00:03:39.030 --> 00:03:41.160
because that's mostly
set up without a server.

71
00:03:41.160 --> 00:03:44.100
I don't need a server at this point,
I just need to run the code, right?

72
00:03:44.100 --> 00:03:50.104
So before we were updating those graphs,
how about instead,

73
00:03:50.104 --> 00:03:54.846
we just have it send a request every time,
cool?

74
00:03:54.846 --> 00:03:58.030
So what I'll do is,
another library that happen

75
00:03:58.030 --> 00:04:03.013
to have the packet JSON is a super agent
which allows me to send HTTP request.

76
00:04:03.013 --> 00:04:07.070
Another library you could use is request,
actually those,

77
00:04:07.070 --> 00:04:09.861
whatever your favorite HTTP library is.

78
00:04:09.861 --> 00:04:13.510
If you just wanna use the built-in
node HTTP, that all works.

79
00:04:13.510 --> 00:04:14.530
I just happened to pick this one.

80
00:04:14.530 --> 00:04:16.872
There's not reason that you have
to use this one in particular.

81
00:04:16.872 --> 00:04:21.156
So let's say const request equal

82
00:04:21.156 --> 00:04:26.210
require {"superagent"), cool.

83
00:04:26.210 --> 00:04:29.994
Now, I keep those graphs going, it's fine.

84
00:04:29.994 --> 00:04:34.999
We'll I actually say, request and
we'll send a POST request.

85
00:04:37.150 --> 00:04:42.409
And OST request, a POST request to,

86
00:04:42.409 --> 00:04:45.631
if I go back to Glitch,

87
00:04:45.631 --> 00:04:50.566
I can look inside of the server JS.

88
00:04:50.566 --> 00:04:54.367
And you can see,
I made a current weather endpoint.

89
00:04:54.367 --> 00:04:58.169
Cool, so we'll go ahead and say,

90
00:04:58.169 --> 00:05:03.688
let me just be really lazy and
copy and paste that.

91
00:05:03.688 --> 00:05:06.997
Post that current weather.

92
00:05:09.926 --> 00:05:11.536
All right, neat.

93
00:05:11.536 --> 00:05:18.888
We'll, Send the temperature,

94
00:05:18.888 --> 00:05:22.937
pressure and relative humidity.

95
00:05:26.603 --> 00:05:29.423
And we'll accept JSON.

96
00:05:29.423 --> 00:05:31.030
I don't think my server sends anything.

97
00:05:31.030 --> 00:05:36.960
I think it might send something back,
but in the header, cool.

98
00:05:39.000 --> 00:05:41.806
Now, in the request,

99
00:05:41.806 --> 00:05:47.872
notice we'll either get an error or
a response.

100
00:05:51.620 --> 00:05:58.898
And we'll say, if error
&gt;&gt; Steve Kinney: Return

101
00:05:58.898 --> 00:06:03.066
console.error(error).

102
00:06:03.066 --> 00:06:05.102
So if there's an error,
show me in the console.

103
00:06:05.102 --> 00:06:10.111
Otherwise, tell me everything went good.

104
00:06:19.620 --> 00:06:20.337
Show the data.

105
00:06:21.964 --> 00:06:23.470
All right, here's hoping.

106
00:06:26.072 --> 00:06:27.409
&gt;&gt; Speaker 2: Error and
error have to be the same?

107
00:06:27.409 --> 00:06:28.610
&gt;&gt; Steve Kinney: Yep.

108
00:06:32.340 --> 00:06:33.580
Thank you.

109
00:06:33.580 --> 00:06:38.498
[LAUGH] You saved us all
at least 60 seconds.

110
00:06:38.498 --> 00:06:46.071
[LAUGH]
&gt;&gt; Steve Kinney: And

111
00:06:46.071 --> 00:06:49.010
the major point here is that,
again, like you start thinking

112
00:06:49.010 --> 00:06:52.399
about all the things that you can do
with just JavaScript as a whole and

113
00:06:52.399 --> 00:06:55.330
then you start bringing in
this hardware stuff, right?

114
00:06:55.330 --> 00:06:59.026
It's not just about,
again, I am never going to

115
00:06:59.026 --> 00:07:03.818
speak ill of the glory that is
turning on an LED into it, right?

116
00:07:03.818 --> 00:07:07.557
But the idea is, as you start to
string together third-party API's,

117
00:07:07.557 --> 00:07:11.810
one of the things we talked about a little
bit during the break was, in my home,

118
00:07:11.810 --> 00:07:12.791
I have hue bulbs.

119
00:07:12.791 --> 00:07:15.366
There's a node library for
controlling hue bulbs and

120
00:07:15.366 --> 00:07:17.298
you can change the color with an API call.

121
00:07:17.298 --> 00:07:21.548
Now, you could literally have hardware
that you could have a photo resistor which

122
00:07:21.548 --> 00:07:24.751
senses light, and have it very
gradually adjust to your light

123
00:07:24.751 --> 00:07:26.800
based on the light in the room, right?

124
00:07:26.800 --> 00:07:30.349
You start to pull in some of these
hardware and some of these sensors and

125
00:07:30.349 --> 00:07:33.658
then do stuff that you could do
with code and kind of that overlap,

126
00:07:33.658 --> 00:07:35.300
becomes incredibly powerful.

127
00:07:36.570 --> 00:07:41.916
All right, the REPL is initialized and
hopefully my handle change is happening.

128
00:07:41.916 --> 00:07:44.046
I ran the wrong one, I'm sorry.

129
00:07:44.046 --> 00:07:44.762
This isn't playground now.

130
00:07:51.093 --> 00:07:54.520
So there's like two vectors where you
can start to come up with new projects.

131
00:07:54.520 --> 00:07:57.686
There is a kind of overlap of
the different web technologies like third

132
00:07:57.686 --> 00:07:59.618
party APIs, running your own web server,

133
00:07:59.618 --> 00:08:02.690
sending POST request to another
web server, WebSockets, right?

134
00:08:02.690 --> 00:08:06.110
And then, there is the kind of combining
some of the different hardware

135
00:08:06.110 --> 00:08:07.604
components, right?

136
00:08:07.604 --> 00:08:09.730
So there's the ability to kind of like,
okay,

137
00:08:09.730 --> 00:08:13.700
what happens if I do the photo
resistor plus a weather sensor?

138
00:08:13.700 --> 00:08:14.514
No.

139
00:08:21.035 --> 00:08:23.042
As they say, the third time is a charm.

140
00:08:26.728 --> 00:08:28.840
&gt;&gt; Speaker 2: I was surprised I
caught the error, but not that one.

141
00:08:28.840 --> 00:08:31.640
&gt;&gt; Steve Kinney: Yeah.
[LAUGH]

142
00:08:31.640 --> 00:08:32.462
&gt;&gt; Speaker 3: What's your

143
00:08:32.462 --> 00:08:36.948
most favorite thing that you've
made combining all this together?

144
00:08:36.948 --> 00:08:39.597
&gt;&gt; Steve Kinney: So one of my favorites
is, as I was saying before like,

145
00:08:39.597 --> 00:08:43.090
taking a bunch of buttons and knobs and
playing with the web audio APIs.

146
00:08:43.090 --> 00:08:46.940
So the way it worked is, when you press
a button or turned a knob, you could turn

147
00:08:46.940 --> 00:08:49.660
the knob for the different node that you
wanted and have a bunch of buttons and

148
00:08:49.660 --> 00:08:54.150
it would actually send WebSocket request
that would trigger the web audio API.

149
00:08:54.150 --> 00:09:00.050
My plan for
the next version of that is to create,

150
00:09:00.050 --> 00:09:03.700
just get a glove and put the button
switches sewn into the glove.

151
00:09:03.700 --> 00:09:07.538
So I figured out, if you could press your
fingers together in different orders until

152
00:09:07.538 --> 00:09:10.143
like make different nodes,
I think would be really fun.

153
00:09:10.143 --> 00:09:14.330
So there's my giant response object,
which shows that it is likely working.

154
00:09:15.440 --> 00:09:21.151
So I can go here, and
now this is a real live web server.

155
00:09:21.151 --> 00:09:25.813
For those of you in the room, you could
effectively go to available-airbus dot

156
00:09:25.813 --> 00:09:30.598
glitch dot me and you could, rather than
the temperature sensor right in front of

157
00:09:30.598 --> 00:09:34.802
you, you could get the reading for
the temperature sensor over here.

158
00:09:34.802 --> 00:09:37.030
[LAUGH] That's a thing that you could do.

159
00:09:37.030 --> 00:09:40.952
Those of you watching the live stream,
I guess you can figure out exactly,

160
00:09:40.952 --> 00:09:44.251
if you haven't actually been
watching the data on the screen,

161
00:09:44.251 --> 00:09:48.127
you could also get a real-time view
into what the weather is in this room.

162
00:09:48.127 --> 00:09:52.031
I'll give you a hint, as I put my finger
on the sensor, it's about to change.

163
00:09:55.639 --> 00:09:58.676
I'm not using WebSockets, in this case,
I'm sending POST requests, so

164
00:09:58.676 --> 00:10:02.249
this is my other hand right now is
hitting Command + R repeatedly.

165
00:10:02.249 --> 00:10:04.909
[LAUGH] But yeah, so now I'm
sending a POST request to a server.

166
00:10:04.909 --> 00:10:09.409
This is a regular, old web server that
happens to have a very physical presence

167
00:10:09.409 --> 00:10:12.579
as well, which I think is pretty cool.

