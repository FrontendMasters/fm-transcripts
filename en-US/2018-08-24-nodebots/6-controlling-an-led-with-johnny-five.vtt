WEBVTT

1
00:00:00.720 --> 00:00:04.531
&gt;&gt; Steve Kinney: Just to reiterate, one of
the questions that we received as we were

2
00:00:04.531 --> 00:00:06.992
transitioning was we are skipping a haul.

3
00:00:06.992 --> 00:00:08.620
That is absolutely correct.

4
00:00:08.620 --> 00:00:10.620
We have the ground as
the very first port but

5
00:00:10.620 --> 00:00:16.050
our first GPIO port is the third port,
right?

6
00:00:16.050 --> 00:00:18.506
So we don't want to plug
it into that second one.

7
00:00:18.506 --> 00:00:21.333
We wanna skip one to the first and
the third ports.

8
00:00:25.310 --> 00:00:28.956
&gt;&gt; Steve Kinney: So we're gonna move on
from direct Tessel code to make LEDs blink

9
00:00:28.956 --> 00:00:33.496
to actually writing some Johnny-Five
code over in this one blinking LED file.

10
00:00:33.496 --> 00:00:38.170
So with Johnny-Five, it is an npm library.

11
00:00:38.170 --> 00:00:43.030
If you have not run npm install in this
directory, take a moment and do so.

12
00:00:43.030 --> 00:00:47.311
You can run that and then we'll write
the code as that's installing, and

13
00:00:47.311 --> 00:00:48.702
we should be good to go.

14
00:00:48.702 --> 00:00:50.140
So I'll just give you one second for that.

15
00:00:51.710 --> 00:00:52.490
Cool.

16
00:00:52.490 --> 00:00:56.620
So that's installing,
let's write some code together.

17
00:00:56.620 --> 00:01:00.559
The first thing we're gonna do is, we're
gonna require the Johnny-Five library,

18
00:01:00.559 --> 00:01:04.677
which is, we'll just call it five because
writing Johnny-Five repeatedly is not fun.

19
00:01:07.576 --> 00:01:10.765
&gt;&gt; Steve Kinney: And
we'll require johnny-five.

20
00:01:10.765 --> 00:01:12.547
The other thing we need to do is,

21
00:01:12.547 --> 00:01:17.167
we're actually gonna pull in a slightly
different version of the Tessel library.

22
00:01:17.167 --> 00:01:23.606
As I said before, the Johnny-Five is
an abstraction over a number of boards but

23
00:01:23.606 --> 00:01:30.470
it's not a psychic, you do need to tell
it what board you'd like to use it with.

24
00:01:30.470 --> 00:01:33.903
So we'll pull in
the Johnny-Five library and

25
00:01:33.903 --> 00:01:37.254
we will pull in the this
Tessel-io library.

26
00:01:37.254 --> 00:01:40.577
And then, the next thing to
do is to bring them together.

27
00:01:40.577 --> 00:01:46.717
So we'll say,
const board = new five.Board,

28
00:01:46.717 --> 00:01:53.020
and that the io will be
going through a new Tessel.

29
00:01:54.820 --> 00:01:57.850
This is going to be at the top

30
00:01:57.850 --> 00:02:00.910
of effectively every single
file that we write today.

31
00:02:00.910 --> 00:02:02.880
Later on,
I have included it in the files for

32
00:02:02.880 --> 00:02:07.610
you, but this is effectively,
we are pulling in Johnny-Five and

33
00:02:07.610 --> 00:02:10.710
we were telling it about
the board that we are using.

34
00:02:10.710 --> 00:02:12.170
That semicolon is not gonna work.

35
00:02:14.160 --> 00:02:15.300
Cool.

36
00:02:15.300 --> 00:02:19.785
So this will pull in Johnny-Five,
tell it they work on a Tessel,

37
00:02:19.785 --> 00:02:22.400
get it all wired up and ready to go.

38
00:02:22.400 --> 00:02:28.290
So as you saw before, the board takes
a little bit of time to start up, and

39
00:02:28.290 --> 00:02:34.090
so it fires an event, and
it fires an event when it's ready to go.

40
00:02:34.090 --> 00:02:38.250
That event is conveniently named Ready.

41
00:02:39.476 --> 00:02:42.296
So we'll say board.on('ready' and again,

42
00:02:42.296 --> 00:02:47.058
this will be kind of something that we use
in every single example that we do today.

43
00:02:47.058 --> 00:02:47.775
And then,

44
00:02:47.775 --> 00:02:52.890
we'll give it a function of what we want
to do when the board itself is ready.

45
00:02:54.050 --> 00:02:58.536
So what we'll say is const led.

46
00:02:59.973 --> 00:03:05.740
&gt;&gt; Steve Kinney: Say, new five.Led and
we plugged it into the a0 port.

47
00:03:07.050 --> 00:03:11.424
If you like capital letters,
you are welcome to capitalize that a,

48
00:03:11.424 --> 00:03:12.355
it will work.

49
00:03:12.355 --> 00:03:14.271
It's not case sensitive.

50
00:03:14.271 --> 00:03:19.230
So this is saying like hey,
I have an LED plugged into the a0 port.

51
00:03:19.230 --> 00:03:21.557
And Johnny-Five is very cool.

52
00:03:21.557 --> 00:03:24.030
It's not gonna do anything just yet.

53
00:03:24.030 --> 00:03:28.630
But we do have now a JavaScript
object that we can use and control.

54
00:03:30.460 --> 00:03:35.302
And the next line of code is led.blink.

55
00:03:37.865 --> 00:03:38.871
&gt;&gt; Steve Kinney: Right?

56
00:03:38.871 --> 00:03:44.110
And the .blink takes an argument,
it takes a series of arguments.

57
00:03:44.110 --> 00:03:47.500
I think, it all takes a callback and
something along those lines.

58
00:03:47.500 --> 00:03:51.580
But .blink basically takes some
number of milliseconds, right?

59
00:03:51.580 --> 00:03:55.938
That number of milliseconds is,
as you could probably guess,

60
00:03:55.938 --> 00:04:00.310
how often it should turn on and
off, how often it should blink.

61
00:04:00.310 --> 00:04:04.281
Does anyone have a favorite
number that they wanna go with?

62
00:04:04.281 --> 00:04:05.342
&gt;&gt; Speaker 2: 47.

63
00:04:05.342 --> 00:04:09.909
&gt;&gt; Steve Kinney: 47, 47 milliseconds
is going to, it'll work but

64
00:04:09.909 --> 00:04:13.160
it will be slightly problematic.

65
00:04:13.160 --> 00:04:15.430
How do you feel about 470 seconds?

66
00:04:17.210 --> 00:04:18.310
Sweet.

67
00:04:18.310 --> 00:04:19.496
I'll even make it better for you.

68
00:04:19.496 --> 00:04:25.300
I do 47 times 10, cuz it's JavaScript so
I can do stuff like that.

69
00:04:25.300 --> 00:04:31.327
Technically, I could do true
plus true times 200 as well.

70
00:04:31.327 --> 00:04:32.150
That would work.

71
00:04:34.400 --> 00:04:35.701
Cool.
So I'll say,

72
00:04:35.701 --> 00:04:39.480
const led = new five.Led('a0') port.

73
00:04:39.480 --> 00:04:44.380
And then, we'll say,
blink every 470 milliseconds.

74
00:04:45.960 --> 00:04:50.862
So with this done,
we can go ahead and run t2 run and

75
00:04:50.862 --> 00:04:56.342
01 and hit tab, and
we'll get this blinking LED.js.

76
00:04:56.342 --> 00:05:00.129
That's gonna go and load on toward Tessel.

77
00:05:00.129 --> 00:05:06.180
And with that, we have a blinking
LED that is turning on and

78
00:05:06.180 --> 00:05:10.885
off every 470 milliseconds, on and off.

79
00:05:10.885 --> 00:05:16.045
So the blinking LED is
effectively like the hello world

80
00:05:16.045 --> 00:05:18.515
of working with hardware, right?

81
00:05:18.515 --> 00:05:21.960
First, we made the LEDs
on the device blink, and

82
00:05:21.960 --> 00:05:26.833
then we just took some LED that you could,
rest in peace RadioShack,

83
00:05:26.833 --> 00:05:32.910
picked up from RadioShack, plugged it in
and we are controlling it with JavaScript.

84
00:05:32.910 --> 00:05:37.235
I understand that a blinking
LED is very simple, but

85
00:05:37.235 --> 00:05:44.130
it fills my JavaScript heart with joy,
my cold, black JavaScript heart with joy.

