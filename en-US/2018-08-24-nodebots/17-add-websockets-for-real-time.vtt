WEBVTT

1
00:00:00.160 --> 00:00:04.520
&gt;&gt; Steve Kinney: Great, so we're able
to submit post requests to a regular

2
00:00:04.520 --> 00:00:07.590
HTML form and change the color of an LED.

3
00:00:07.590 --> 00:00:11.570
One of the things I don't love about
this is that we submit it, we look over,

4
00:00:11.570 --> 00:00:13.150
we reload a page.

5
00:00:13.150 --> 00:00:15.520
It's not a really great experience.

6
00:00:15.520 --> 00:00:20.409
It's not the experience I come to
expect from the ten minutes that I have

7
00:00:20.409 --> 00:00:25.560
been running a web server on a small
little commodity hobby board, right?

8
00:00:26.640 --> 00:00:29.838
The thing that I keep kinda
harping on over and over again is,

9
00:00:29.838 --> 00:00:34.358
the cool thing about programming hardware
with JavaScript is obviously programming

10
00:00:34.358 --> 00:00:36.314
hardware in our favorite language.

11
00:00:36.314 --> 00:00:39.632
But then also also being able to
still do all the things that we can

12
00:00:39.632 --> 00:00:42.459
do in JavaScript,
which is being able to run servers,

13
00:00:42.459 --> 00:00:44.872
being able to write client code and
build UIs.

14
00:00:44.872 --> 00:00:47.496
All of the web APIs are available to us.

15
00:00:47.496 --> 00:00:51.620
One project that I did at one point was
just basically just using the web audio

16
00:00:51.620 --> 00:00:55.100
API and as I turn knobs and
press buttons on the hardware device,

17
00:00:55.100 --> 00:00:57.800
I was able to make
the browser make sounds.

18
00:00:57.800 --> 00:01:01.060
And I did a little bit with a thing called
web sockets which is every time the button

19
00:01:01.060 --> 00:01:05.270
got pressed, we know that buttons have
an event and so then I submitted an event

20
00:01:05.270 --> 00:01:09.140
over the web socket to the browser, which
then made sounds using the web audio API.

21
00:01:09.140 --> 00:01:13.050
So you can effectively build your own
network connected musical devices,

22
00:01:13.050 --> 00:01:13.820
all right?

23
00:01:13.820 --> 00:01:17.350
So then once you start to wrap your head
around the fact that you have browser

24
00:01:17.350 --> 00:01:21.130
technologies, server technologies,
and hardware, right?

25
00:01:21.130 --> 00:01:24.355
There's this whole new spectrum
of things that you can do.

26
00:01:24.355 --> 00:01:27.804
It's one of those things you start making
the LED blink, and that's very gratifying.

27
00:01:27.804 --> 00:01:29.966
And then I guarantee you,
three weeks from now,

28
00:01:29.966 --> 00:01:33.630
you'll be walking down the street like,
I could do this thing, right.

29
00:01:33.630 --> 00:01:36.873
That wouldn't have been possible
with this kinda overlap of

30
00:01:36.873 --> 00:01:38.930
these three different realms.

31
00:01:38.930 --> 00:01:42.652
So one of the things that I did
early on was I set up socket.IO, and

32
00:01:42.652 --> 00:01:46.110
socket.IO is a web socket library for
node servers.

33
00:01:46.110 --> 00:01:49.620
And this is all that it took to
implement web sockets on the server.

34
00:01:49.620 --> 00:01:53.996
Is I required socket.io and
I passed it my HTTP server.

35
00:01:53.996 --> 00:01:59.482
And socket.io is one of those libraries
that has a server side component and

36
00:01:59.482 --> 00:02:01.376
a client side component.

37
00:02:01.376 --> 00:02:05.001
Cuz that's the two things you need between
for web sockets between the client and

38
00:02:05.001 --> 00:02:05.594
the server.

39
00:02:05.594 --> 00:02:09.479
One of the great things about JavaScript,
you can write on the server,

40
00:02:09.479 --> 00:02:11.051
you can write on the client.

41
00:02:11.051 --> 00:02:14.654
But the kind of tricky part with that
is sometimes you forget whether or

42
00:02:14.654 --> 00:02:17.170
not you're writing on the client or
the server.

43
00:02:17.170 --> 00:02:19.700
And sometimes some of the APIs
are slightly different.

44
00:02:19.700 --> 00:02:22.825
So one day I put in the readme
was Just Enough Express,

45
00:02:22.825 --> 00:02:27.640
in case you wanted to get an express
server running with your hardware.

46
00:02:27.640 --> 00:02:29.560
And then Just Enough Socket.io,

47
00:02:29.560 --> 00:02:32.690
which is the kind of methods
that we're going to use.

48
00:02:32.690 --> 00:02:37.520
So in the server, when a new browser
connects, it'll be io.on('connection'.

49
00:02:37.520 --> 00:02:40.680
And we'll get the connection
between that browser,

50
00:02:40.680 --> 00:02:43.480
cuz there could be many people
connecting to my webserver.

51
00:02:43.480 --> 00:02:47.420
This is a connection between one
browser and the single server.

52
00:02:47.420 --> 00:02:50.810
So it's a socket right there and
say whenever some event.

53
00:02:50.810 --> 00:02:51.730
And this is a string.

54
00:02:51.730 --> 00:02:56.670
This could be client event,
it could be color changed hypothetically.

55
00:02:56.670 --> 00:02:58.830
It could be sandwich.

56
00:02:58.830 --> 00:03:02.690
It's just a string to identify what kind
of message we're sending over the web

57
00:03:02.690 --> 00:03:08.100
socket, and then we'll get the actual
data that we can do stuff with.

58
00:03:08.100 --> 00:03:09.988
So this is the payload.

59
00:03:09.988 --> 00:03:15.457
So we can say color change, we should
probably tell the server what color.

60
00:03:15.457 --> 00:03:18.825
That seems like relevant
data that we might want.

61
00:03:18.825 --> 00:03:24.042
And then on the client, one of the things
when we patched it into the HTTP server,

62
00:03:24.042 --> 00:03:28.340
is it made a client side
JavaScript library available.

63
00:03:28.340 --> 00:03:30.776
All right so we have that as well.

64
00:03:30.776 --> 00:03:34.127
And then we'll go ahead and
we will pull in,

65
00:03:34.127 --> 00:03:40.480
this is what it basically looks like
to send something back to the server.

66
00:03:40.480 --> 00:03:45.268
Cool, and if you want to send events
from the server out to all the connected

67
00:03:45.268 --> 00:03:49.904
clients, you can do io.sockets,
which will be all of the browsers that

68
00:03:49.904 --> 00:03:53.410
are currently connected send
a message to all of them.

69
00:03:53.410 --> 00:03:55.717
Earlier you saw that you
have a single socket, so

70
00:03:55.717 --> 00:03:59.664
you can basically talk to one browser,
you can talk to all the browsers.

71
00:03:59.664 --> 00:04:00.920
We're gonna keep it simple and

72
00:04:00.920 --> 00:04:03.540
basically talk to all the connected
browsers at this point.

73
00:04:03.540 --> 00:04:07.188
You can get really fancy and
tricky with this hardware if you want,

74
00:04:07.188 --> 00:04:08.370
we're not going to.

75
00:04:08.370 --> 00:04:08.870
Yeah?

76
00:04:09.980 --> 00:04:12.070
&gt;&gt; Speaker 2: Do you have to
set up multiple sockets for

77
00:04:12.070 --> 00:04:13.960
multiple events or is it?

78
00:04:13.960 --> 00:04:17.830
&gt;&gt; Steve Kinney: Yeah,
the socket connection is a given user

79
00:04:17.830 --> 00:04:19.250
and your server.

80
00:04:19.250 --> 00:04:24.610
With us, it's usually if we
aren't the user doing it.

81
00:04:24.610 --> 00:04:27.515
It's got a lot of methods, so
if you need to do super granular stuff,

82
00:04:27.515 --> 00:04:29.682
I would definitely recommend
the documentation.

83
00:04:29.682 --> 00:04:32.511
But you can basically
either talk to a connection

84
00:04:32.511 --> 00:04:36.520
with one browser that's connected to you,
so one user, all users.

85
00:04:36.520 --> 00:04:38.610
You can actually do things where
you can put people in rooms and

86
00:04:38.610 --> 00:04:39.659
a lot of crazy stuff.

87
00:04:41.470 --> 00:04:45.423
But we're gonna assume that everyone,
cuz it's one of those things, for

88
00:04:45.423 --> 00:04:49.248
the example of the music that I said
earlier, if I hit the button I want all

89
00:04:49.248 --> 00:04:52.973
the browsers to play the sound,
right, not just a given one, right.

90
00:04:52.973 --> 00:04:56.705
But if you did want to talk
a particular browser you could do that.

91
00:04:56.705 --> 00:05:00.470
But we're gonna assume that we'll server
to everyone, everyone to the server.

92
00:05:00.470 --> 00:05:02.711
We're gonna keep it simple for
our purposes.

93
00:05:02.711 --> 00:05:03.991
All right, cool.

94
00:05:03.991 --> 00:05:08.670
So we haven't set up on
the server automatically.

95
00:05:08.670 --> 00:05:13.440
On the client, if you go into the example
code, I have under Rainbow LED,

96
00:05:13.440 --> 00:05:16.400
I have one called socket-colors.

97
00:05:16.400 --> 00:05:20.920
The one thing that I wanna look for in
there is, cuz I don't have it memorized,

98
00:05:20.920 --> 00:05:25.252
is this is where it basically patches
the server with the client side code.

99
00:05:25.252 --> 00:05:27.220
So I'm gonna take this script tag.

100
00:05:27.220 --> 00:05:29.390
This is also in
the socket.io documentation,

101
00:05:29.390 --> 00:05:31.750
it's just one of those
things in all of the years,

102
00:05:31.750 --> 00:05:35.860
this relatively simple URL is not
something that I can clearly remember.

103
00:05:35.860 --> 00:05:38.760
So I'll move that into
the public index.html

104
00:05:38.760 --> 00:05:40.460
that we've been working
with with the form.

105
00:05:40.460 --> 00:05:46.600
I'll just add that before the script tag,
cuz it's gonna make a global io variable.

106
00:05:46.600 --> 00:05:49.640
So we'll just put that
before the script tag.

107
00:05:49.640 --> 00:05:51.216
All right, cool.

108
00:05:51.216 --> 00:05:55.595
And now we're gonna kind of
write some Bespoke code in here.

109
00:05:55.595 --> 00:05:59.608
So I showed you in the documentation where
we could see how a client can talk to

110
00:05:59.608 --> 00:06:02.319
the server, so
let's go take a look at that again.

111
00:06:04.950 --> 00:06:08.240
So we get socket admit and some data.

112
00:06:09.520 --> 00:06:12.300
So the data will be what color we want.

113
00:06:13.940 --> 00:06:18.040
So first thing we do is go ahead and
see if I've got things right.

114
00:06:18.040 --> 00:06:20.536
So what I want to do is I wanna listen for

115
00:06:20.536 --> 00:06:23.972
change event on that color
input that I made before.

116
00:06:23.972 --> 00:06:26.043
So let's go ahead and look.

117
00:06:26.043 --> 00:06:29.660
We know that it's gonna ID a color picker.

118
00:06:30.940 --> 00:06:37.264
It's gonna write some Vanilla JavaScript,
const colorPicker,

119
00:06:39.488 --> 00:06:45.193
&gt;&gt; Steve Kinney: = document.getElementById

120
00:06:45.193 --> 00:06:50.242
('color-picker').

121
00:06:50.242 --> 00:06:55.613
Cool, then we'll say
colorPicker.addEventListerner('change',

122
00:07:05.059 --> 00:07:06.987
&gt;&gt; Steve Kinney: And the other thing we

123
00:07:06.987 --> 00:07:12.305
need is the,
&gt;&gt; Steve Kinney: So

124
00:07:12.305 --> 00:07:14.788
our socket connection to the server.

125
00:07:18.457 --> 00:07:22.100
&gt;&gt; Steve Kinney: socket.emit, we'll
call the, again, this can be anything.

126
00:07:22.100 --> 00:07:24.633
It could be sandwich if you wanted to.

127
00:07:24.633 --> 00:07:25.617
color changed.

128
00:07:28.381 --> 00:07:34.188
&gt;&gt; Steve Kinney: And
we'll say that the color is,

129
00:07:40.270 --> 00:07:44.196
&gt;&gt; Steve Kinney: colorPicker.value.

130
00:07:46.642 --> 00:07:48.219
&gt;&gt; Steve Kinney: All right, cool.

131
00:07:48.219 --> 00:07:50.386
So there it will just
basically tell the server.

132
00:07:50.386 --> 00:07:55.395
Whenever a user changes the color,
we'll send that immediately to the server.

133
00:07:55.395 --> 00:08:00.436
Just in case I've made a boo-boo and
I need to debug,

134
00:08:00.436 --> 00:08:07.383
we know that it does take 30,
40 seconds to deploy code to our tessel,

135
00:08:07.383 --> 00:08:14.802
so I'm going to be a little defensive and
just say log it to the console as well.

136
00:08:17.120 --> 00:08:19.286
&gt;&gt; Steve Kinney: So
that if I have made some terrible mistake,

137
00:08:19.286 --> 00:08:23.055
or if I'm getting a different value than
I think, or if I have the wrong thing.

138
00:08:23.055 --> 00:08:26.188
I at least have some information
as I'm debugging rather than, no,

139
00:08:26.188 --> 00:08:27.034
it doesn't work.

140
00:08:27.034 --> 00:08:28.010
Why doesn't it work?

141
00:08:28.010 --> 00:08:29.886
Let me then put the console log into play.

142
00:08:29.886 --> 00:08:33.498
And I'm just going to- You
can call me pessimistic,

143
00:08:33.498 --> 00:08:38.840
but,
&gt;&gt; Steve Kinney: Just being real.

144
00:08:40.720 --> 00:08:43.900
So now we just need to
establish that connection.

145
00:08:43.900 --> 00:08:46.790
So when the browser fires up and
does the client side code,

146
00:08:46.790 --> 00:08:50.580
it's gonna say hey server, I'm gonna
make a socket connection with you.

147
00:08:50.580 --> 00:08:52.145
And so the server needs to
know how to deal with that.

148
00:08:52.145 --> 00:08:57.440
So when somebody,
cuz it's an onconnection,

149
00:09:04.224 --> 00:09:05.370
&gt;&gt; Steve Kinney: Socket.

150
00:09:08.515 --> 00:09:12.560
&gt;&gt; Steve Kinney: We'll say, when
the socket sends us a color change event,

151
00:09:18.139 --> 00:09:19.158
&gt;&gt; Steve Kinney: Take that data.

152
00:09:22.665 --> 00:09:25.441
&gt;&gt; Steve Kinney: We will console.log the
data, in case things don't go as planned.

153
00:09:30.206 --> 00:09:35.465
&gt;&gt; Steve Kinney: And
we'll say led.color and

154
00:09:35.465 --> 00:09:40.095
we'll say data.color.

155
00:09:40.095 --> 00:09:43.390
So now, every time that
color input changes, right,

156
00:09:43.390 --> 00:09:47.558
we'll send a socket event to the server
and tell it to change the LED.

157
00:09:47.558 --> 00:09:50.208
So no more of that post response back and
forth.

158
00:09:50.208 --> 00:09:53.640
We'll actually be able to keep moving and
changing the LED.

159
00:09:53.640 --> 00:09:54.520
And we'll see it work.

160
00:09:54.520 --> 00:09:57.917
So I'm just gonna go ahead and
deploy that code.

161
00:10:02.421 --> 00:10:05.190
&gt;&gt; Steve Kinney: I'll still be able to
hit submit too as well cuz I didn't take

162
00:10:05.190 --> 00:10:07.058
that functionality out but it's fine.

163
00:10:07.058 --> 00:10:10.210
So I'm gonna deploy this code.

164
00:10:10.210 --> 00:10:12.320
So, I will show,

165
00:10:12.320 --> 00:10:16.590
right before we kind of cut,
I had an issue where it wasn't working.

166
00:10:16.590 --> 00:10:20.600
I will show you that at this point it
is changing colors as I move across

167
00:10:20.600 --> 00:10:21.330
the color wheel.

168
00:10:21.330 --> 00:10:24.900
The issue, and
I'll show you in the code in one second,

169
00:10:24.900 --> 00:10:29.730
was basically on one end
I call the event color

170
00:10:29.730 --> 00:10:34.042
changed like past tense and the other one
I called it color change present tense.

171
00:10:34.042 --> 00:10:37.980
So that handshake between the client and
the server was wrong so

172
00:10:37.980 --> 00:10:40.770
that was the issue for those things.

173
00:10:40.770 --> 00:10:44.840
But first, here with me as I move
the cursor around the color wheel

174
00:10:44.840 --> 00:10:46.980
which I will show you on the client.

175
00:10:46.980 --> 00:10:50.360
So bascially while you saw
the color change on the LED,

176
00:10:50.360 --> 00:10:52.630
this is what I was doing on the client.

177
00:10:52.630 --> 00:10:54.460
Which was just grabbing
this moving it along.

178
00:10:54.460 --> 00:10:59.355
Each one of those sends a socket
event to the server, which has

179
00:10:59.355 --> 00:11:03.700
access to the LED and is instantaneously
changing the color of the LED.

180
00:11:04.930 --> 00:11:10.580
This, not unlike the button from
earlier is also incredibly gratifying.

181
00:11:12.080 --> 00:11:15.160
But again, it's that overlap,
the client side code that we wrote,

182
00:11:15.160 --> 00:11:17.740
server side code that we wrote, and
then hardware code that we wrote.

183
00:11:17.740 --> 00:11:20.380
We can kind of control all
three of these things.

