WEBVTT

1
00:00:00.000 --> 00:00:01.730
&gt;&gt; Shirley Wu: All right,
let's do this together.

2
00:00:01.730 --> 00:00:06.664
Let's draw a curve for each of the movies.

3
00:00:06.664 --> 00:00:12.078
And to do this I want to go to one

4
00:00:12.078 --> 00:00:18.808
of my favorite functions, D3arc.

5
00:00:18.808 --> 00:00:25.530
So,
&gt;&gt; Shirley Wu: d3, it's under d3 shape.

6
00:00:26.920 --> 00:00:33.286
And so we can look at the documentation,
and it's D3 Area.

7
00:00:33.286 --> 00:00:39.259
So, we want to draw one
of these area charts,

8
00:00:39.259 --> 00:00:44.614
and what it needs is an array of objects.

9
00:00:44.614 --> 00:00:48.107
And then we need to tell
it where the x-position is.

10
00:00:48.107 --> 00:00:53.469
We want to tell it what
the upper y-position is and

11
00:00:53.469 --> 00:01:00.746
the lower y-position, and so
let's talk about what that means for

12
00:01:00.746 --> 00:01:06.203
us.
&gt;&gt; Shirley Wu: So

13
00:01:06.203 --> 00:01:10.967
what we need is, for each of the movies,

14
00:01:10.967 --> 00:01:15.181
we want to draw this sort of a curve.

15
00:01:15.181 --> 00:01:22.176
So this is a movie, and so
we want this to be the date.

16
00:01:22.176 --> 00:01:29.349
So the x-position is the date
that the movie was released,

17
00:01:29.349 --> 00:01:35.529
and then the y-position
is the box office figure.

18
00:01:35.529 --> 00:01:41.284
But actually, it is the box office

19
00:01:41.284 --> 00:01:48.429
figure subtracted by the mean box office,

20
00:01:48.429 --> 00:01:53.201
and that is my y-position.

21
00:01:53.201 --> 00:01:57.297
And so but that is only this point, and

22
00:01:57.297 --> 00:02:04.520
to be able to draw a curve with
the area chart, we need this point.

23
00:02:04.520 --> 00:02:07.285
And we need this point,
and we need this point.

24
00:02:09.910 --> 00:02:13.079
&gt;&gt; Shirley Wu: So the way that I am going

25
00:02:13.079 --> 00:02:18.151
to do that is basically I want to create

26
00:02:18.151 --> 00:02:24.030
quote unquote fake data
to make this curve.

27
00:02:24.030 --> 00:02:29.288
So we have this dataset for
each movie that gives

28
00:02:29.288 --> 00:02:34.158
me the (x,y) position of this top point.

29
00:02:34.158 --> 00:02:38.674
But for this one, let's make that

30
00:02:38.674 --> 00:02:43.820
the date plus, let's say two months.

31
00:02:46.090 --> 00:02:49.480
So that's the x for
that particular point, and

32
00:02:49.480 --> 00:02:54.670
the y is the mean box office.

33
00:02:57.700 --> 00:03:04.880
And for this one, let's make that
the date of that movie minus two months.

34
00:03:07.790 --> 00:03:13.568
And the y is also the mean box office.
&gt;&gt; Shirley Wu: And

35
00:03:13.568 --> 00:03:22.106
if we have that, then we have enough
data to pass into the area generator.

36
00:03:22.106 --> 00:03:28.010
And so instead of having a array
of all these data points,

37
00:03:28.010 --> 00:03:32.069
what we're going to have is actually,

38
00:03:32.069 --> 00:03:36.623
we're going to have
an array of the movies.

39
00:03:36.623 --> 00:03:42.780
And for each movie,
we're going to use the area generator.

40
00:03:42.780 --> 00:03:44.859
And so for each movie,

41
00:03:44.859 --> 00:03:50.332
we're actually going to be
passing in an array of objects,

42
00:03:50.332 --> 00:03:55.266
where the first object is
this date minus two months.

43
00:03:55.266 --> 00:04:02.393
The second object is this kind of the date
and the box office number itself.

44
00:04:02.393 --> 00:04:07.611
And then the last one,
the last object in the array is

45
00:04:07.611 --> 00:04:13.195
this date plus two months and
the mean box office again.

46
00:04:13.195 --> 00:04:18.535
So, let's talk about that, and so

47
00:04:18.535 --> 00:04:23.519
to do that, we need to do some data

48
00:04:23.519 --> 00:04:30.105
preparation again to
get it into the state.

49
00:04:30.105 --> 00:04:35.432
So let's go to our code.

50
00:04:35.432 --> 00:04:42.841
Okay, so here is,
&gt;&gt; Shirley Wu: A co-sandbox

51
00:04:42.841 --> 00:04:46.825
that I've set up for us.

52
00:04:46.825 --> 00:04:49.452
No, spoiler alert,
that's what it looks like in

53
00:04:49.452 --> 00:04:54.874
the end.
&gt;&gt; Shirley Wu: Okay,

54
00:04:54.874 --> 00:05:00.609
so,
&gt;&gt; Shirley Wu: Yes, hopefully if you open

55
00:05:00.609 --> 00:05:06.759
it up, it should take you to starter.js.
&gt;&gt; Shirley Wu: And

56
00:05:06.759 --> 00:05:13.390
I have some things that
I've defined up here.

57
00:05:13.390 --> 00:05:18.700
I've just imported d3 and to low dash.

58
00:05:18.700 --> 00:05:24.890
I have US inflation to help me
kind of adjust for inflation for

59
00:05:24.890 --> 00:05:28.490
the box office numbers since that's
going to be really important for us.

60
00:05:28.490 --> 00:05:32.030
And I have some other things loaded in for
later.

61
00:05:32.030 --> 00:05:36.710
I also I decided to only look
at the last ten years instead of

62
00:05:36.710 --> 00:05:42.240
the last 20 years just because we're
doing something pretty simple.

63
00:05:42.240 --> 00:05:47.460
All we want to do is put
a date on the x-axis,

64
00:05:47.460 --> 00:05:49.810
so then 20 years is a little to long.

65
00:05:49.810 --> 00:05:54.390
It's a little to much data, so,
for this particular exercise,

66
00:05:54.390 --> 00:05:57.050
I decided to do just the 10 years.

67
00:05:57.050 --> 00:06:00.690
I also have for
us a few of the colors we might use for

68
00:06:00.690 --> 00:06:04.790
the genres and
a few of the colors for the holidays.

69
00:06:04.790 --> 00:06:07.060
I've loaded in the data here.

70
00:06:07.060 --> 00:06:12.844
I've set up our SVG with a width
of 1200 and a height of 300 and

71
00:06:12.844 --> 00:06:17.732
given myself some margin to
pad the visualization with.

72
00:06:17.732 --> 00:06:22.862
And then I'm creating my SVG element,

73
00:06:22.862 --> 00:06:27.524
and I did a little bit of work in terms

74
00:06:27.524 --> 00:06:32.704
of,
&gt;&gt; Shirley Wu: Processing the data.

75
00:06:32.704 --> 00:06:37.621
In particular, I kind of just took
only the data attributes I need,

76
00:06:37.621 --> 00:06:40.575
and so in this case I just have the title.

77
00:06:40.575 --> 00:06:43.090
I have the date that's been used.

78
00:06:43.090 --> 00:06:47.929
I've wrapped the release date
into a JavaScript date object.

79
00:06:47.929 --> 00:06:52.264
I have the box office adjusted for
inflation, and for

80
00:06:52.264 --> 00:06:55.551
simplicity and I don't like to do this.

81
00:06:55.551 --> 00:07:00.906
And if it was a full visualization
that I'm trying to do,

82
00:07:00.906 --> 00:07:05.603
I would try to do something
with all of the genres.

83
00:07:05.603 --> 00:07:09.780
But to make this exercise
relatively simple,

84
00:07:09.780 --> 00:07:14.610
we're going to take only
the first genre that we see.

85
00:07:14.610 --> 00:07:19.806
But if this was a full on data
visualization, I might go and

86
00:07:19.806 --> 00:07:26.384
find a different source that doesn't
sort the genres by alphabetical and

87
00:07:26.384 --> 00:07:31.049
then that sorts it by maybe
the most relevant genre,

88
00:07:31.049 --> 00:07:34.678
etc.
&gt;&gt; Shirley Wu: Yeah, and

89
00:07:34.678 --> 00:07:39.808
then I filtered it by all of
the box office with the year

90
00:07:39.808 --> 00:07:46.134
after the 2008 start year I have.
&gt;&gt; Shirley Wu: Okay, so that's our data.

91
00:07:46.134 --> 00:07:50.038
So to get our data ready for this,

92
00:07:50.038 --> 00:07:56.732
what I want to do is figure out
the mean box office figure,

93
00:07:56.732 --> 00:08:02.213
as well as the top three genres.
&gt;&gt; Shirley Wu: And

94
00:08:02.213 --> 00:08:07.687
then after that,
I think I want to make a scale for

95
00:08:07.687 --> 00:08:12.376
the x-axis, the y-axis, and colors.

96
00:08:16.024 --> 00:08:18.670
&gt;&gt; Shirley Wu: So let's do that together.

97
00:08:18.670 --> 00:08:24.377
So const, and to get the mean box office,

98
00:08:24.377 --> 00:08:30.085
I believe all I have to do is do d3.mean,

99
00:08:30.085 --> 00:08:34.504
and then pass in the data I have.

100
00:08:34.504 --> 00:08:38.481
So I call my data movies, and I just do,

101
00:08:38.481 --> 00:08:43.060
I tell it that I want D3
to take a look at the box

102
00:08:43.060 --> 00:08:48.145
office figures and
give me back the mean for that.

103
00:08:48.145 --> 00:08:52.650
Let me console.log to make sure
I did the right thing, and then,

104
00:09:08.302 --> 00:09:09.839
&gt;&gt; Shirley Wu: So right here,

105
00:09:09.839 --> 00:09:12.677
a little bit hard to see, but

106
00:09:12.677 --> 00:09:17.880
this is the mean box office,
which, I don't know,

107
00:09:17.880 --> 00:09:24.174
does it blow your mind that
it's $330 million is the mean?

108
00:09:24.174 --> 00:09:28.977
I mean, it's skewed because we're only
looking at the top ten blockbusters,

109
00:09:28.977 --> 00:09:32.360
but that still blows my
mind that it's 330 million.

110
00:09:32.360 --> 00:09:40.001
I don't think I think
in that realm of money.

111
00:09:40.001 --> 00:09:42.240
[LAUGH] When I was doing this,
I was like, holy.

112
00:09:42.240 --> 00:09:44.832
So now we have the mean box office, and

113
00:09:44.832 --> 00:09:48.610
then I just want to get
the top three genres.

114
00:09:48.610 --> 00:09:54.038
So I tend to use Lodash for
this because I like

115
00:09:54.038 --> 00:09:59.817
being able to chain my,
&gt;&gt; Shirley Wu: My

116
00:09:59.817 --> 00:10:04.921
functions together, but I haven't
quite figured out the best way and

117
00:10:04.921 --> 00:10:09.523
a better alternative to figure
out the top three of something.

118
00:10:09.523 --> 00:10:12.540
But stick with me as I do this.

119
00:10:12.540 --> 00:10:16.050
I'm going to chain and
pass in the movie's dataset.

120
00:10:16.050 --> 00:10:24.240
The very first thing I want to do is I
want to just grab the genres out of there.

121
00:10:24.240 --> 00:10:31.922
So this is going to give me back
a flat array of all of the genres.

122
00:10:31.922 --> 00:10:36.831
And then what we're going to do is
sort those by, actually, I'm sorry,

123
00:10:36.831 --> 00:10:38.840
I don't need to do it this way.

124
00:10:40.230 --> 00:10:45.544
I just want to be able to countBy
the genres in each movie,

125
00:10:45.544 --> 00:10:50.528
and let's console.log what
that looks like too, so

126
00:10:50.528 --> 00:10:53.660
let's console.log in genres.

127
00:10:53.660 --> 00:10:59.390
In this, so in Lodash, if I use countBy,
it would give me this object,

128
00:10:59.390 --> 00:11:04.310
with key being what I asked for it to be
counted by, in this case, it's genres, and

129
00:11:04.310 --> 00:11:08.890
the value being the number
of movies with that genre.

130
00:11:10.370 --> 00:11:18.784
And then what I want to do from there is I
want to grab only the top three of these,

131
00:11:18.784 --> 00:11:23.646
so what I'm going to do
is sort by the values.

132
00:11:25.250 --> 00:11:28.915
So to do that, I'm first going to
use this thing called .toPairs.

133
00:11:28.915 --> 00:11:34.253
That changes it into an array,
basically an array of arrays,

134
00:11:34.253 --> 00:11:37.023
where the first one is a genre and

135
00:11:37.023 --> 00:11:42.170
the second one is a number
of movies under that genre.

136
00:11:42.170 --> 00:11:48.391
I'm then going to sort by,
&gt;&gt; Shirley Wu: That,

137
00:11:48.391 --> 00:11:51.620
I'm going to sort by that second.

138
00:11:53.520 --> 00:11:56.612
So I'm going to sort by the second value,
that's the numbers.

139
00:11:56.612 --> 00:12:01.089
And then finally,
I'm going to take the first three

140
00:12:01.089 --> 00:12:05.899
of that result.
&gt;&gt; Shirley Wu: And

141
00:12:05.899 --> 00:12:09.456
now we have just the top three genres.

142
00:12:09.456 --> 00:12:15.003
And then you'll notice
that it's still an array,

143
00:12:15.003 --> 00:12:18.099
so I'm just going to get back

144
00:12:18.099 --> 00:12:22.805
the,
&gt;&gt; Shirley Wu: The first

145
00:12:22.805 --> 00:12:27.522
element of each array, and
get back an array of the top three genres.

146
00:12:27.522 --> 00:12:31.641
And please tell me if there
is a better way to do this.

147
00:12:31.641 --> 00:12:37.702
[LAUGH] I just end up doing this this
way every time and it's really ugly.

148
00:12:37.702 --> 00:12:41.134
I'm pretty sure there's probably
better way to do this out there, so

149
00:12:41.134 --> 00:12:43.765
please let me know if there's
a better way to do this.

150
00:12:43.765 --> 00:12:44.928
And I would love to know.

151
00:12:44.928 --> 00:12:49.705
But at least we have genres now, and

152
00:12:49.705 --> 00:12:56.084
that way we can go and
make the scales together.

153
00:12:56.084 --> 00:13:01.634
So in this case, the very first one is
an x-scale, and that should be timescale.

154
00:13:01.634 --> 00:13:07.202
And so for x-scale lets create scale time,

155
00:13:07.202 --> 00:13:12.017
and we're going to use, my bad,

156
00:13:12.017 --> 00:13:17.447
before we can do scales, we need domains.

157
00:13:17.447 --> 00:13:22.478
So let's calculate the domains first,
and so

158
00:13:22.478 --> 00:13:27.641
for that, I want the minimum and
maximum date.

159
00:13:27.641 --> 00:13:31.101
I'm going to put that in.

160
00:13:31.101 --> 00:13:39.065
So I'm going to ask D3 to figure out
the min date and max date of my dataset.

161
00:13:39.065 --> 00:13:43.518
And I'm going to tell it that to do
that it needs to look at the date

162
00:13:43.518 --> 00:13:45.834
attribute of each of the movies.

163
00:13:45.834 --> 00:13:49.979
And now I should be able to give a domain.

164
00:13:49.979 --> 00:13:55.011
But here's the thing,
I kind of want my values to be nice,

165
00:13:55.011 --> 00:13:58.914
so maybe here the minimum
date is going to be,

166
00:13:58.914 --> 00:14:02.949
I don't know, January 25th or something.

167
00:14:02.949 --> 00:14:06.784
And maybe the maximum date is
like December 20th, 2017, or

168
00:14:06.784 --> 00:14:08.093
something like that.

169
00:14:08.093 --> 00:14:13.085
And I want that to be nicely rounded to
January 1st, all the way to December 31st.

170
00:14:13.085 --> 00:14:16.416
And D3 has this really nice thing
called d3-time that will help me,

171
00:14:16.416 --> 00:14:19.249
this is one of my favorite modules in D3,
this d3-time.

172
00:14:19.249 --> 00:14:24.492
And I think it does
similar things as moments,

173
00:14:24.492 --> 00:14:29.735
I think,
I haven't double checked this, but

174
00:14:29.735 --> 00:14:34.990
I think it's probably
smaller than moments.

175
00:14:36.800 --> 00:14:38.077
But in particular,

176
00:14:38.077 --> 00:14:42.972
what I'm going to do is I'm going to
choose a time interval and floor by that.

177
00:14:42.972 --> 00:14:51.300
In this case, I'm going to say, give me,
&gt;&gt; Shirley Wu: The floor by the year.

178
00:14:51.300 --> 00:14:54.330
So let me show you that.

179
00:14:54.330 --> 00:14:59.194
So what I'm gonna do is say,
d3-timeYear.floor,

180
00:14:59.194 --> 00:15:01.424
and pass in the minDate.

181
00:15:01.424 --> 00:15:05.648
So whatever that min date was,
it's going to be,

182
00:15:05.648 --> 00:15:10.477
let's say that minDate was January 25th,
2008,

183
00:15:10.477 --> 00:15:15.316
it's going to floor it
down to January 1st, 2008.

184
00:15:16.680 --> 00:15:22.331
And then let's do the max date,
but this time instead of flooring

185
00:15:22.331 --> 00:15:27.776
let's make it go to the ceiling,
so that would be .ceiling and

186
00:15:27.776 --> 00:15:33.747
then maxDate.
&gt;&gt; Shirley Wu: And

187
00:15:33.747 --> 00:15:38.671
then the range I want
It to map to is I want

188
00:15:38.671 --> 00:15:43.745
the minimum date to go
to the most left var

189
00:15:43.745 --> 00:15:48.688
count from margin, so margin.left.

190
00:15:48.688 --> 00:15:52.974
And then I want the maximum date
to go all the way to the right,

191
00:15:52.974 --> 00:15:55.004
so width- margin.right.

192
00:15:56.520 --> 00:15:58.970
And let's make sure that
we did this correctly.

193
00:16:00.272 --> 00:16:06.350
So I'm going to take a look at, this is
how you can check if you have any bugs.

194
00:16:06.350 --> 00:16:11.151
This is how you can check that
what you pass into the domain and

195
00:16:11.151 --> 00:16:16.895
range of the scale is computing correctly,
by saying xScale.domain,

196
00:16:16.895 --> 00:16:22.470
and not passing anything in, or
.range and not passing anything in.

197
00:16:22.470 --> 00:16:27.210
And you can see that it
seems like we did it right.

198
00:16:27.210 --> 00:16:32.792
Where, as expected,
we have January 1, 2008.

199
00:16:32.792 --> 00:16:39.640
And then my data set ends,
I think, in December of 2017.

200
00:16:39.640 --> 00:16:46.380
So this goes to January 1, 2018, to kind
of give me that nice start and beginning.

201
00:16:47.400 --> 00:16:52.660
And as we expected,
there is the range looks good too.

202
00:16:53.820 --> 00:16:59.330
So let's go and figure out the yScale.

203
00:16:59.330 --> 00:17:01.480
So this is d3.scale.

204
00:17:01.480 --> 00:17:06.220
The y is going to be the box office, so

205
00:17:06.220 --> 00:17:10.910
what it's going to be is d3.scaleLinear.

206
00:17:10.910 --> 00:17:18.070
But we first have to figure
out the box office extent.

207
00:17:20.020 --> 00:17:24.889
So min and max of the box office,
d3.extent,

208
00:17:24.889 --> 00:17:28.800
movies, get the box office, sorry.

209
00:17:28.800 --> 00:17:34.195
I'm sorry, it's the difference
between the box office and

210
00:17:34.195 --> 00:17:38.020
our mean, so I'm gonna actually go back.

211
00:17:38.020 --> 00:17:41.580
Let me think about this.

212
00:17:41.580 --> 00:17:43.130
Actually, let's do it this way.

213
00:17:43.130 --> 00:17:49.151
Let's just do d dot,
our boxOffice number minus the meanBox,

214
00:17:49.151 --> 00:17:53.364
the mean bugs, that we calculated before.

215
00:17:53.364 --> 00:18:00.431
[LAUGH] And then pass that into
the domain(boxExtent), and then pass that.

216
00:18:00.431 --> 00:18:04.065
And then let's give it a range from,

217
00:18:04.065 --> 00:18:08.880
I want the minimum box
office to be at the bottom.

218
00:18:08.880 --> 00:18:11.733
So that would be, height- margin.bottom.

219
00:18:11.733 --> 00:18:18.376
And I want the highest to
go all the way to the top,

220
00:18:18.376 --> 00:18:22.923
so I'll make that margin.top.

221
00:18:22.923 --> 00:18:25.954
Let me double check that
that's done correctly.

222
00:18:25.954 --> 00:18:28.204
I wonder if I can disable this,

223
00:18:28.204 --> 00:18:33.150
cuz this is probably really
distracting for when you're writing.

224
00:18:33.150 --> 00:18:38.066
But console.log, yeah, let's go ahead.

225
00:18:38.066 --> 00:18:40.422
Let's keep going ahead with it.

226
00:18:40.422 --> 00:18:44.986
Let's take a look to make sure that
we calculated the domain correctly.

227
00:18:44.986 --> 00:18:48.380
And indeed we have.

228
00:18:48.380 --> 00:18:55.576
So the minimum is, there is a movie
that did 150 million less than the mean.

229
00:18:55.576 --> 00:19:01.594
And there is also a movie that
did 600 million above the mean,

230
00:19:01.594 --> 00:19:06.735
which should be about $950
million in box office.

231
00:19:06.735 --> 00:19:10.469
I actually didn't confirm
if box office was for

232
00:19:10.469 --> 00:19:14.960
opening weekend or
the whole time, but 900 million.

233
00:19:16.890 --> 00:19:18.350
So yeah, so we have the scales.

234
00:19:18.350 --> 00:19:23.170
And then the last one we
wanna do is the colors.

235
00:19:23.170 --> 00:19:30.622
So, const colorScale = d3.scaleOrdinal.

236
00:19:30.622 --> 00:19:34.187
And the domain is the genres
that we calculated earlier,

237
00:19:34.187 --> 00:19:36.320
the array of three genres.

238
00:19:36.320 --> 00:19:42.590
And the range is the genreColors
that I defined up top.

239
00:19:42.590 --> 00:19:44.680
And that's an array of
three different colors.

240
00:19:46.510 --> 00:19:47.700
Okay, we're done with the scales.

241
00:19:49.150 --> 00:19:53.283
Okay, now let's go back.

242
00:19:53.283 --> 00:20:00.414
Now what we need to do,
now we need to create the area generator.

243
00:20:00.414 --> 00:20:04.402
So let's do that together,

244
00:20:04.402 --> 00:20:08.564
const areaGen = d3.area.

245
00:20:08.564 --> 00:20:16.705
I don't think there's any other kind
of settings that we need to pass in for

246
00:20:16.705 --> 00:20:20.981
it, so I think this is all we need to do.

247
00:20:20.981 --> 00:20:25.910
And now, let's draw some curves.

248
00:20:25.910 --> 00:20:34.565
So what we need to do here is
some basic D3 enter append.

249
00:20:34.565 --> 00:20:39.560
And so what we want to do is,
I'm just gonna call these

250
00:20:39.560 --> 00:20:43.561
curves is equal to, let's grab that SVG.

251
00:20:43.561 --> 00:20:48.491
And for the SVG,
let's select all of the path elements on

252
00:20:48.491 --> 00:20:51.980
the screen that don't yet exist.

253
00:20:51.980 --> 00:20:57.370
And bind the data that we calculated,
the movies data that we calculated,

254
00:20:57.370 --> 00:21:02.430
and then enter append a new path for
each one them.

255
00:21:02.430 --> 00:21:06.540
And actually,
I'm going to selectAll(".curve").

256
00:21:06.540 --> 00:21:13.750
I'm going to select all of the paths
that have the class curve,

257
00:21:14.840 --> 00:21:19.910
just to make sure that D3 doesn't go and
select all of the paths in the SVG.

258
00:21:19.910 --> 00:21:23.850
Which is going to be problematic
once we are creating axes and

259
00:21:23.850 --> 00:21:27.130
stuff that also create paths.

260
00:21:27.130 --> 00:21:33.042
So let's make sure to specify that I only
want the paths with the class curve.

261
00:21:33.042 --> 00:21:36.242
And of course if I do that,

262
00:21:36.242 --> 00:21:41.333
I need to make sure
that I give that class,

263
00:21:41.333 --> 00:21:45.701
.classed("curve") is true.

264
00:21:45.701 --> 00:21:51.932
And if we’ve done this correctly,
then we should hopefully

265
00:21:51.932 --> 00:21:57.200
see maybe 100 or so
path elements on the screen.

266
00:21:57.200 --> 00:21:59.680
So let me open this up, and there we go.

267
00:21:59.680 --> 00:22:01.657
So we've done that correctly.

268
00:22:01.657 --> 00:22:07.725
And let's make sure also
that the data is bound.

269
00:22:07.725 --> 00:22:13.250
So if I choose each one of them, let's
make sure that we can look up properties.

270
00:22:13.250 --> 00:22:16.040
We can open up the property for
each of the path.

271
00:22:16.040 --> 00:22:23.527
Scroll all the way down, __data, and
this is where D3 does the data binding.

272
00:22:23.527 --> 00:22:26.780
And you can see this is our data.

273
00:22:26.780 --> 00:22:29.000
So this is our boxOffice figure.

274
00:22:29.000 --> 00:22:35.772
This is the date that movie was released,
the genre, the title, the year.

275
00:22:35.772 --> 00:22:42.825
So now we can go about
drawing each of the curves.

276
00:22:42.825 --> 00:22:47.805
And I just realized that there are some
settings that we need to be passing in.

277
00:22:47.805 --> 00:22:52.825
And in particular, we want to be telling
the area generator how to access

278
00:22:52.825 --> 00:22:57.705
the x-coordinate of each of the movies,
as well as

279
00:22:57.705 --> 00:23:03.100
the top y-coordinate
of each of the curves,

280
00:23:03.100 --> 00:23:08.820
and the bottom y-coordinate
of each of the curves.

281
00:23:08.820 --> 00:23:10.310
So let's do that right now.

282
00:23:10.310 --> 00:23:14.950
For each of the movies,
I want the x point to be xScale,

283
00:23:14.950 --> 00:23:19.840
and pass in the date to translate
from date to the x-axis.

284
00:23:19.840 --> 00:23:23.274
I want the, sorry,

285
00:23:23.274 --> 00:23:28.123
top of the area to be yScale,

286
00:23:28.123 --> 00:23:33.175
d., the difference between

287
00:23:33.175 --> 00:23:40.259
the boxOffice minus the meanBox office.

288
00:23:42.800 --> 00:23:48.770
And then I want the bottom

289
00:23:48.770 --> 00:23:54.291
part of the curve to be yScale and

290
00:23:54.291 --> 00:23:58.374
0, as in there is no difference,
this is the meanBox.

291
00:24:00.060 --> 00:24:06.750
So just that flat I want
the bottom of the area to be

292
00:24:06.750 --> 00:24:13.740
this flat line that represents no
difference from the main box office.

293
00:24:13.740 --> 00:24:16.250
So that's why I Y scale,
and I'm pass in the zero.

294
00:24:17.560 --> 00:24:25.210
And so, for each of the curves,
let's then pass in the d attribute.

295
00:24:25.210 --> 00:24:30.216
And for the d attribute,
what I want it to do,

296
00:24:30.216 --> 00:24:35.960
I want it to calculate a curve,
and so I am going to use areaGen.

297
00:24:35.960 --> 00:24:39.710
And I am going to pass in an array,
and this is where

298
00:24:42.420 --> 00:24:45.830
the array of the three points comes in.

299
00:24:45.830 --> 00:24:50.055
So what I'm gonna do is do an object for

300
00:24:50.055 --> 00:24:54.940
the first one, and
this one is I said I wanted

301
00:24:54.940 --> 00:24:59.100
to be the date.
&gt;&gt; Shirley Wu: Actually,

302
00:24:59.100 --> 00:25:02.435
you know what, here,
I've defined this incorrectly.

303
00:25:02.435 --> 00:25:08.375
So I'm going to create data right now for

304
00:25:08.375 --> 00:25:15.538
each of these points, and
I'm just gonna call it

305
00:25:15.538 --> 00:25:20.791
one is the date and one is the value.

306
00:25:20.791 --> 00:25:25.223
For the very first one, the date is the
date of the movie and subtract two months.

307
00:25:25.223 --> 00:25:28.888
So again we're going to use D3 time, and

308
00:25:28.888 --> 00:25:32.988
now we're going to be using d3.timeMonth.

309
00:25:32.988 --> 00:25:36.241
And we're going to use
this thing called offset,

310
00:25:36.241 --> 00:25:39.963
which is this other really
cool function that helps you.

311
00:25:39.963 --> 00:25:45.599
If you give it a certain date and if you
give it a plus one, in this case, if we

312
00:25:45.599 --> 00:25:51.830
give it the date and plus one, it would
give you back the date plus one month.

313
00:25:51.830 --> 00:25:55.580
If you say minus one, it would give
you back that date minus a month.

314
00:25:55.580 --> 00:25:58.025
A really cool function, so

315
00:25:58.025 --> 00:26:02.950
we're gonna do that d.date and
then pass a -2 to tell it that I want

316
00:26:05.740 --> 00:26:10.130
back the date, that's the date
I have subtract two months.

317
00:26:12.170 --> 00:26:17.432
Then, I want the value to just be 0
because I want it to be that flat part

318
00:26:17.432 --> 00:26:22.444
right here.
&gt;&gt; Shirley Wu: Next one,

319
00:26:22.444 --> 00:26:27.473
date is our actual date
right here in the middle,

320
00:26:27.473 --> 00:26:33.370
and the value is the box office
minus the mean box office.

321
00:26:33.370 --> 00:26:38.410
And finally, for that last point,
I want the date to be,

322
00:26:42.484 --> 00:26:46.384
&gt;&gt; Shirley Wu: The date of our movie, but

323
00:26:46.384 --> 00:26:50.670
plus two months, value 0.

324
00:26:50.670 --> 00:26:56.400
And if we did this correctly,
it should draw a bunch of black curves.

325
00:26:56.400 --> 00:26:58.282
Did it draw a bunch of black curves?

326
00:26:58.282 --> 00:26:59.480
Yes.
&gt;&gt; Speaker 2: [INAUDIBLE]

327
00:26:59.480 --> 00:26:59.980
&gt;&gt; Shirley Wu: Yes.

328
00:26:59.980 --> 00:27:01.237
[LAUGH].

329
00:27:01.237 --> 00:27:02.374
Yes!

330
00:27:02.374 --> 00:27:03.387
Look at that.

331
00:27:05.373 --> 00:27:06.720
&gt;&gt; Shirley Wu: Yeah, so we're there.

332
00:27:06.720 --> 00:27:07.560
We're getting there.

333
00:27:07.560 --> 00:27:08.760
And you know what?

334
00:27:08.760 --> 00:27:12.150
If spikes are your thing,
we don't need to adjust it more.

