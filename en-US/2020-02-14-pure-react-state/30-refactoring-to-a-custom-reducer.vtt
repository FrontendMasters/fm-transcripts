WEBVTT

1
00:00:00.110 --> 00:00:03.510
So what we're gonna do is we're gonna
create a reducer for ourselves.

2
00:00:03.510 --> 00:00:05.492
We'll say fetchReducer.

3
00:00:05.492 --> 00:00:08.898
And we know that that takes state and
an action.

4
00:00:10.980 --> 00:00:13.101
And one thing I will
probably give myself for

5
00:00:13.101 --> 00:00:15.865
when we use the useReducer is
some kind of initial state.

6
00:00:17.035 --> 00:00:18.645
I could do it in line.

7
00:00:18.645 --> 00:00:19.715
I'm gonna make it explicit.

8
00:00:19.715 --> 00:00:21.291
I'm thinking you could probably
break this out into other files.

9
00:00:21.291 --> 00:00:25.323
But one thing I've noticed from doing this
with groups is me switching files a lot,

10
00:00:25.323 --> 00:00:27.015
makes no one happy.

11
00:00:27.015 --> 00:00:29.865
So I'm gonna keep it all in here,
but if there's a part of you going,

12
00:00:29.865 --> 00:00:32.437
that should be its own file,
listen to that part of yourself.

13
00:00:32.437 --> 00:00:35.315
It's right, just not for teaching.

14
00:00:35.315 --> 00:00:41.805
So we'll say that result, the same
stuff we had here, result is null.

15
00:00:43.728 --> 00:00:48.197
Loading is true, and error is null.

16
00:00:48.197 --> 00:00:53.184
Right, so this is the kind of various
states that things can be in.

17
00:00:53.184 --> 00:00:57.900
And I wanna make sure that if no
action hits that we just don't

18
00:00:57.900 --> 00:01:00.308
change the state of the world.

19
00:01:00.308 --> 00:01:03.460
That means we won't return undefined.

20
00:01:03.460 --> 00:01:06.515
Some people will say, okay,
if we get here, throw an error.

21
00:01:06.515 --> 00:01:09.185
That's reasonable, too.

22
00:01:09.185 --> 00:01:14.540
All right, so if the action type is,

23
00:01:17.099 --> 00:01:23.012
FETCHING, well,
then let's call it LOADING.

24
00:01:23.012 --> 00:01:24.242
I don't like FETCHING.

25
00:01:27.577 --> 00:01:32.440
We'll say that the result,
it's really this initial state, right?

26
00:01:32.440 --> 00:01:33.280
So I'll just copy that.

27
00:01:33.280 --> 00:01:42.683
I could even reference it,
but, If the action type,

28
00:01:48.521 --> 00:01:53.783
Is RESPONSE_COMPLETE, Well,

29
00:01:53.783 --> 00:01:59.574
then that is going to be,
That loading is no longer true.

30
00:02:01.821 --> 00:02:08.555
And that the result is
the action.payload.response.

31
00:02:11.258 --> 00:02:14.971
And finally, if there was an error, And

32
00:02:14.971 --> 00:02:18.526
what I like about this is you could see if
there were more states in your useFetch,

33
00:02:18.526 --> 00:02:21.216
you'd have to start adding
more useStates for everything.

34
00:02:21.216 --> 00:02:23.850
So this is kind of like
we're talking about Ajax.

35
00:02:23.850 --> 00:02:28.244
But we're also talking about
situations where you're

36
00:02:28.244 --> 00:02:31.150
changing multiple pieces of state.

37
00:02:31.150 --> 00:02:35.568
Hypothetically, imagine a form that,
email and password, cool.

38
00:02:35.568 --> 00:02:36.885
There's only two pieces of state.

39
00:02:36.885 --> 00:02:42.120
First name, last name, address line one,
city, country, zip, so on and so forth.

40
00:02:42.120 --> 00:02:43.120
It becomes a lot of state.

41
00:02:43.120 --> 00:02:45.390
And anytime you get to that
more complicated stuff,

42
00:02:45.390 --> 00:02:47.230
it might make sense to use a reducer.

43
00:02:47.230 --> 00:02:50.310
So the action type is ERROR.

44
00:02:50.310 --> 00:02:54.334
Then return that,
we are no longer loading.

45
00:02:56.819 --> 00:03:01.333
I'll say it's action.payload.error, right?

46
00:03:01.333 --> 00:03:06.540
So now we have basically the three states,
either we're fetching,

47
00:03:06.540 --> 00:03:10.235
things went well,
things went poorly, right?

48
00:03:10.235 --> 00:03:13.130
And we have the rules that
should happen in each case.

49
00:03:13.130 --> 00:03:14.830
So this changes a little bit now.

50
00:03:14.830 --> 00:03:17.853
We don't need to manage all of these
little pieces of state at once cuz we have

51
00:03:17.853 --> 00:03:21.010
one kinda state management paradigm
that deals with all of that.

52
00:03:21.010 --> 00:03:27.718
So we'll say state and
dispatch = React.useReducer,

53
00:03:27.718 --> 00:03:31.359
and that's gonna be reducer.

54
00:03:33.473 --> 00:03:37.150
Nope, yep, fetchReducer is right,
and initialState.

55
00:03:39.320 --> 00:03:43.580
So now we just basically announced what's
going on at any given moment, right?

56
00:03:43.580 --> 00:03:48.401
So we'll say dispatch of the type,

57
00:03:50.404 --> 00:03:54.547
LOADING, and you noticed before we had a
function called addGrudge that dispatched

58
00:03:54.547 --> 00:03:55.664
all the information.

59
00:03:55.664 --> 00:03:58.506
I could break this out
into functions as well.

60
00:03:58.506 --> 00:04:00.339
But I can just do it like this.

61
00:04:00.339 --> 00:04:06.665
I'm mostly doing it like this now to
show you that, yes, we can do that.

62
00:04:06.665 --> 00:04:11.747
We're gonna say dispatch of the type,
where we call it RESPONSE_COMPLETE.

63
00:04:11.747 --> 00:04:15.304
The nice part if you make those constants
I made in the previous example,

64
00:04:15.304 --> 00:04:16.774
you get autocomplete, too.

65
00:04:19.656 --> 00:04:24.735
I'll say that the payload
is the response object.

66
00:04:24.735 --> 00:04:26.710
And if things go poorly,

67
00:04:28.880 --> 00:04:33.754
We will dispatch of the type ERROR,

68
00:04:33.754 --> 00:04:38.631
and the payload will be that error.

69
00:04:38.631 --> 00:04:42.739
Now the nice part is since the reducer
is handling turning off loading and

70
00:04:42.739 --> 00:04:45.311
not loading,
we can get rid of that finally.

71
00:04:45.311 --> 00:04:49.140
And if we went back to that promise API
from before, it's the same basic idea.

72
00:04:49.140 --> 00:04:53.409
We're just saying, we are either loading,
we've gotten a response, or

73
00:04:53.409 --> 00:04:54.375
we had an error.

74
00:04:54.375 --> 00:04:57.329
And if we got a response or an error,
here's the information about that, right?

75
00:04:57.329 --> 00:05:01.162
Let the reducer handle it in this case.

76
00:05:03.142 --> 00:05:05.522
I call response data.

77
00:05:07.705 --> 00:05:08.703
All right.

78
00:05:11.281 --> 00:05:17.672
And now, We'll send state.response, and

79
00:05:17.672 --> 00:05:23.121
we'll just state.loading, state.error,

80
00:05:23.121 --> 00:05:27.225
I could just structure them off
an object as well, that'll work.

81
00:05:27.225 --> 00:05:29.266
All right, so
we're still sending the response.

82
00:05:29.266 --> 00:05:30.318
We're sending the loading.

83
00:05:30.318 --> 00:05:31.554
We're sending the error.

84
00:05:31.554 --> 00:05:33.160
And now we have this better way.

85
00:05:33.160 --> 00:05:37.267
So whenever your state management gets
complicated, useReducer is there for you.

86
00:05:37.267 --> 00:05:40.369
This is a case with Ajax, but anything
where there's multiple moving parts,

87
00:05:40.369 --> 00:05:43.106
you just wanna announce that things
happened and separate that out.

88
00:05:43.106 --> 00:05:47.578
And again, this has a fetch in it, so
it'll be a little bit harder to test.

89
00:05:47.578 --> 00:05:51.131
But the actual reducer itself
is just a JavaScript function,

90
00:05:51.131 --> 00:05:54.970
passing all the different events,
right, with all the data.

91
00:05:54.970 --> 00:05:59.760
Super easy to test because you
don't have to mock out Ajax and

92
00:05:59.760 --> 00:06:02.000
you don't have to mount a component.

93
00:06:02.000 --> 00:06:06.088
You simply say you call the function
with the state and the action,

94
00:06:06.088 --> 00:06:08.574
you expect that the result is what it is.

95
00:06:13.791 --> 00:06:15.127
So let's see.

96
00:06:17.611 --> 00:06:22.133
All right, it is not loading, so
let's find out where my issue is.

97
00:06:27.242 --> 00:06:28.958
So first thing we'll see, all right,

98
00:06:28.958 --> 00:06:34.836
is my, And
what are the actions coming through?

99
00:06:34.836 --> 00:06:38.848
So we can see a LOADING and
a RESPONSE_COMPLETE came through,

100
00:06:38.848 --> 00:06:39.842
that's good.

101
00:06:42.114 --> 00:06:43.868
We got the action.payload.response.

102
00:06:43.868 --> 00:06:45.898
All right, here's the issue.

103
00:06:45.898 --> 00:06:53.386
Here I'm calling it result,
and here I called it response.

104
00:06:57.199 --> 00:06:59.615
And now it loads, right?

105
00:06:59.615 --> 00:07:03.611
So use state, refer to it immediately.

106
00:07:03.611 --> 00:07:06.533
If things get complicated,
don't hesitate to use reducer, right?

107
00:07:06.533 --> 00:07:13.070
I would argue for more complicated
state management, it is there for you.

