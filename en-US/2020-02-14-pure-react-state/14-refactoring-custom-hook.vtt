WEBVTT

1
00:00:00.530 --> 00:00:02.310
I've got that in place.

2
00:00:02.310 --> 00:00:06.240
I can pull this out into useLocalStorage,
right?

3
00:00:06.240 --> 00:00:11.560
There's a hook that I'm making up out of
nowhere, what should useLocalStorage do?

4
00:00:11.560 --> 00:00:15.382
Well, it should do what the useState
does to manage the state.

5
00:00:15.382 --> 00:00:18.270
And when that state changes,
it's just stored in localStorage, right?

6
00:00:18.270 --> 00:00:22.553
So it's basically taking these two pieces,
this right here and

7
00:00:22.553 --> 00:00:26.460
this part up here, and
we're just rolling it into one.

8
00:00:26.460 --> 00:00:30.340
So now, if you need to do this
other places in your application,

9
00:00:30.340 --> 00:00:33.680
you now use this obstruction that
you've created for yourself.

10
00:00:33.680 --> 00:00:34.300
So let's try it out.

11
00:00:34.300 --> 00:00:38.105
We'll make a function
called useLocalStorage.

12
00:00:39.800 --> 00:00:43.680
And we know that useState
takes a default value, rright?

13
00:00:43.680 --> 00:00:46.114
So I could say, initialValue,

14
00:00:46.114 --> 00:00:50.991
which is what I believe it's
called in useState under the hood.

15
00:00:50.991 --> 00:00:55.797
Let's see, initialState.

16
00:00:55.797 --> 00:01:00.038
But that's problematic, because we know
that we're using a key in here for

17
00:01:00.038 --> 00:01:03.830
where we want to store it in localStorage,
and we do not want every.

18
00:01:03.830 --> 00:01:05.870
If we're gonna make a reusable hook,

19
00:01:05.870 --> 00:01:09.710
them all overriding each
other probably not great.

20
00:01:11.130 --> 00:01:13.040
Right, this is a personal opinion.

21
00:01:13.040 --> 00:01:14.260
So we'll take an initial state.

22
00:01:14.260 --> 00:01:17.700
I'm actually gonna make the key the first.

23
00:01:17.700 --> 00:01:19.310
I'll make it the second,
just keep it as a similar API.

24
00:01:19.310 --> 00:01:22.266
So we'll say, key, in this case, and

25
00:01:22.266 --> 00:01:26.486
this will be where do we wanna
store it in localStorage.

26
00:01:26.486 --> 00:01:31.403
All right, so now what we can do
is we pull this in there as well.

27
00:01:36.188 --> 00:01:40.495
We'll give ourselves, this is so
I could have it in its own file.

28
00:01:40.495 --> 00:01:41.291
Could I keep it in, say?

29
00:01:41.291 --> 00:01:44.580
That would totally work,
we can leave that there too.

30
00:01:45.690 --> 00:01:49.705
So we'll say, getItem with the key.

31
00:02:01.280 --> 00:02:03.996
We will go and get that key again here.

32
00:02:05.725 --> 00:02:12.560
All right, so go ahead and
pull it out in both times.

33
00:02:12.560 --> 00:02:18.444
Actually, let's put that
back in a function.

34
00:02:18.444 --> 00:02:23.142
That will return initialState, right?

35
00:02:23.142 --> 00:02:28.860
So go ahead, look for it in localStorage.

36
00:02:28.860 --> 00:02:33.170
If you get, it return that, otherwise
whatever they said the initial value was

37
00:02:33.170 --> 00:02:36.700
works for us.

38
00:02:36.700 --> 00:02:38.000
Cool.

39
00:02:38.000 --> 00:02:40.660
And then what we'll do is, we'll say.

40
00:02:42.420 --> 00:02:45.145
Now, I'm just gonna name these value and

41
00:02:45.145 --> 00:02:49.230
setValue because I don't know what they
are before we knew it was account.

42
00:02:49.230 --> 00:02:51.996
Now we don't necessarily know its account,
and

43
00:02:51.996 --> 00:02:54.297
this is why useState puts it in an array.

44
00:02:54.297 --> 00:02:58.310
With an object, you can do structure but
it has to be the name of the keys, right?

45
00:02:58.310 --> 00:03:01.403
The reason it gives us, JavaScript
functions can return two values, right?

46
00:03:01.403 --> 00:03:05.290
So they can return an array where we can
name the first thing in the array value

47
00:03:05.290 --> 00:03:06.089
and setValue.

48
00:03:06.089 --> 00:03:10.895
Counter and setCount, user and setUser,
grudge and setGrudge, right, so on and so

49
00:03:10.895 --> 00:03:11.843
forth, right?

50
00:03:11.843 --> 00:03:14.740
It gives us a flexibility in naming here.

51
00:03:16.510 --> 00:03:18.380
So we can go ahead and
we can try that out.

52
00:03:18.380 --> 00:03:24.615
So we'll say the initial
value here is useState.

53
00:03:26.470 --> 00:03:28.872
I'll just use that get
shorthand that we had before.

54
00:03:28.872 --> 00:03:30.685
All right, so we'll get that, and

55
00:03:30.685 --> 00:03:34.257
then we'll also just register
the effect of the same time, useEffect

56
00:03:38.942 --> 00:03:42.939
And that useEffect is going to be

57
00:03:42.939 --> 00:03:47.830
that localStorage setItem at the key.

58
00:03:47.830 --> 00:03:56.430
And then we will, I just need to change
one thing, as I was talking and coding.

59
00:03:56.430 --> 00:04:00.714
Cuz we're gonna take whatever the name
of the value is, we'll use that.

60
00:04:03.280 --> 00:04:07.160
So this is in case it's called counter,
whatever, they'll get stored in there.

61
00:04:08.880 --> 00:04:14.140
Cool, and so now we have the ability
to get something at localStorage.

62
00:04:14.140 --> 00:04:18.290
We have that storage and
localStorage put in place here.

63
00:04:18.290 --> 00:04:20.060
We're setting some state.

64
00:04:20.060 --> 00:04:23.617
The last thing we need to do is kind of
just match an API that matches useState.

65
00:04:23.617 --> 00:04:25.560
Cuz there's basically setting the state,
and

66
00:04:25.560 --> 00:04:28.295
it's also registering that whole ability
to read and write from localStorage is

67
00:04:28.295 --> 00:04:30.920
simply an abstraction over the two
things that we had before.

68
00:04:30.920 --> 00:04:34.689
We return value and set value.

69
00:04:34.689 --> 00:04:38.320
So, as far as the user knows, it's got
the exact same API as react.useState.

70
00:04:38.320 --> 00:04:41.275
Under the hood,
it is using react.useState, but

71
00:04:41.275 --> 00:04:45.340
it's also taking care of all this
localStorage reading and writing.

72
00:04:45.340 --> 00:04:46.780
It's effectively the code we had before,

73
00:04:46.780 --> 00:04:50.380
just a little more dynamic before
we had hard coded in some strings.

74
00:04:50.380 --> 00:04:52.450
And we knew that was a count.

75
00:04:52.450 --> 00:04:53.810
We knew that we were
putting a count state,

76
00:04:53.810 --> 00:04:55.200
because it's a little bit more reusable.

77
00:04:55.200 --> 00:04:58.190
We had to put in some variables that
made it a little bit more squirrely.

78
00:04:58.190 --> 00:05:01.644
But, generally speaking,
it is simply we useState and

79
00:05:01.644 --> 00:05:05.919
useEffect with this localStorage
logic all kind of rolled into one.

80
00:05:05.919 --> 00:05:08.333
All right, with the decent
amount of coding and talking,

81
00:05:08.333 --> 00:05:09.670
let's see how that went for us.

82
00:05:09.670 --> 00:05:13.940
So now I can say, useLocalStorage, and

83
00:05:13.940 --> 00:05:17.570
the initial state is going to be,
let's say 0.

84
00:05:17.570 --> 00:05:20.450
I'm gonna give it a new key in this case,
just so

85
00:05:20.450 --> 00:05:25.155
we can separate it from other
localStorage that we had before.

86
00:05:25.155 --> 00:05:26.816
We'll call it just count in this case.

87
00:05:28.730 --> 00:05:30.075
All right, so it is 0.

88
00:05:30.075 --> 00:05:31.657
It is 5.

89
00:05:31.657 --> 00:05:37.295
It's assigned not used,
let's see what we've got in here.

90
00:05:45.803 --> 00:05:49.589
&gt;&gt; Are you trying to use value here for
values even set?

91
00:05:52.170 --> 00:05:54.180
That was tripping me
up a little bit there.

92
00:05:55.220 --> 00:05:57.710
&gt;&gt; Let me actually see what, cuz I was
talking and typing and refactoring.

93
00:05:57.710 --> 00:06:00.042
I wanna see what the localStorage, and

94
00:06:00.042 --> 00:06:02.807
I will tell you what I
intended on doing [LAUGH].

95
00:06:13.590 --> 00:06:17.891
We've got account in there, it's getting
stored as an empty object, cool.

96
00:06:17.891 --> 00:06:23.493
So then we set, we'll set the key,
we've got account.

97
00:06:25.923 --> 00:06:29.850
Probably if I'm gonna care about
the value, I should listen to that, right?

98
00:06:31.830 --> 00:06:32.814
Let's see how that goes from here.

99
00:06:34.597 --> 00:06:35.648
That's fun.

100
00:06:46.980 --> 00:06:52.635
All right, so for the user, right, I got

101
00:06:53.766 --> 00:07:00.560
of not difficult in my own dependencies,
right?

102
00:07:00.560 --> 00:07:06.010
So on the initial one is immediately,
cuz this is a function we're getting and

103
00:07:06.010 --> 00:07:08.550
it was getting set to a non value.

104
00:07:09.640 --> 00:07:14.140
So this is all, a lot of times what do we
have to do is squirrely stuff in code.

105
00:07:14.140 --> 00:07:15.780
Do I love the localStorage API?

106
00:07:15.780 --> 00:07:20.792
I do not, I don't, and the squirrely parts
of this are dealing with localStorage.

107
00:07:20.792 --> 00:07:23.364
And in a more robust situation,
we would try and

108
00:07:23.364 --> 00:07:28.320
catch, cuz json.parse loves to throw
errors like it's nobody's business, right?

109
00:07:28.320 --> 00:07:30.080
That becomes complicated code.

110
00:07:30.080 --> 00:07:33.110
If we needed to do that more than once in
managing the state in our application,

111
00:07:33.110 --> 00:07:34.252
I don't wanna write that more than once.

112
00:07:34.252 --> 00:07:35.315
It's cuz every time you write it,

113
00:07:35.315 --> 00:07:37.150
it's a chance that someone's
gonna make mistake, right?

114
00:07:37.150 --> 00:07:38.460
I made a mistake.

115
00:07:38.460 --> 00:07:42.740
The idea here is we have it bundled up
in an abstraction of useLocalStorage

116
00:07:42.740 --> 00:07:45.720
as far as anyone else using this now,
right?

117
00:07:45.720 --> 00:07:48.412
Once we've got it down,
they use uselocalStorage, and

118
00:07:48.412 --> 00:07:53.870
it's the same API as useState,
other than having a key, right?

119
00:07:53.870 --> 00:07:58.433
They're not thinking
about the other parts.

120
00:07:58.433 --> 00:08:01.454
And it just is automatically gonna
store stuff in state for us, right?

121
00:08:01.454 --> 00:08:05.031
And now we've bundled that up by kind
of combining two hooks into our own

122
00:08:05.031 --> 00:08:06.232
abstraction, right?

123
00:08:06.232 --> 00:08:07.498
And that's kind of one of the powers.

124
00:08:07.498 --> 00:08:11.621
Cuz now we can put this in an own file,
call it useLocalStorage.js.

125
00:08:11.621 --> 00:08:15.220
Any other component can import
it instead of using useState.

126
00:08:15.220 --> 00:08:18.766
You're going to get useLocalStorage is
gonna be useState with the ability to

127
00:08:18.766 --> 00:08:20.812
store it based on that key automatically.

128
00:08:20.812 --> 00:08:25.190
And sart to build up your own
toolbox of different abilities and

129
00:08:25.190 --> 00:08:26.562
be able to iterate it from there.

130
00:08:26.562 --> 00:08:29.145
So useState does

131
00:08:29.145 --> 00:08:34.223
work a little bit differently than
the component ones as well, right?

132
00:08:34.223 --> 00:08:34.975
I'm sorry, useEffect

133
00:08:34.975 --> 00:08:37.655
works a little bit differently
than the component ones as well.

134
00:08:37.655 --> 00:08:39.645
And it's also little subtle things.

135
00:08:39.645 --> 00:08:42.715
And really, the big difference is not
necessarily that the API is implemented

136
00:08:42.715 --> 00:08:43.425
differently.

137
00:08:43.425 --> 00:08:48.430
There are just slightly
different implications based on

138
00:08:48.430 --> 00:08:50.830
how JavaScript works, right?

139
00:08:50.830 --> 00:08:55.280
And what I'll point out here is that
in a class-based component, right?

140
00:08:57.670 --> 00:09:00.700
Class at the end of the day spits
out an object that has methods and

141
00:09:00.700 --> 00:09:03.010
stuff like that,
our state is stored in an object.

142
00:09:03.010 --> 00:09:08.120
In JavaScript,
we pass objects by reference, right,

143
00:09:08.120 --> 00:09:09.510
and we passed primitives by value.

144
00:09:09.510 --> 00:09:13.030
Even if we were to pass an object to
setCounter or something like that,

145
00:09:13.030 --> 00:09:16.680
we are wholesale replacing
the object with a new one.

146
00:09:16.680 --> 00:09:20.808
So this works a little bit differently
than maybe componentDidMount or

147
00:09:20.808 --> 00:09:22.820
componentDidUpdateMine.

148
00:09:22.820 --> 00:09:27.457
So, I'm gonan commit this real

149
00:09:27.457 --> 00:09:31.869
quick And
I'm just going to make a new ranch,

150
00:09:35.773 --> 00:09:40.397
We'll call example-use-local-storage,

151
00:09:47.034 --> 00:09:48.583
Cool.

152
00:09:52.635 --> 00:09:55.905
I am using that so I can switch,
there is one that you should have

153
00:09:55.905 --> 00:10:00.506
called component-state-completed which is
kind of before we refactored the hooks.

154
00:10:00.506 --> 00:10:03.205
And this is just so I can show
you something very quickly here.

