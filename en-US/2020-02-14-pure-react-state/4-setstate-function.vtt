WEBVTT

1
00:00:00.030 --> 00:00:03.095
There's also a little bit
more to this.setState.

2
00:00:04.500 --> 00:00:08.200
So traditionally we saw we were
passing an object in, turns out,

3
00:00:08.200 --> 00:00:10.380
you can pass other stuff in.

4
00:00:10.380 --> 00:00:12.440
In this case,
you can pass a function in there as well.

5
00:00:13.690 --> 00:00:15.440
So this is an interesting one.

6
00:00:15.440 --> 00:00:17.930
This looks very similar to
the example we had before.

7
00:00:17.930 --> 00:00:21.050
But now you can see,
I can pass in a function.

8
00:00:21.050 --> 00:00:26.390
And that function gets some arguments,
the first of which being state.

9
00:00:26.390 --> 00:00:31.360
And that gets passed into the function and
then we can do stuff with it.

10
00:00:31.360 --> 00:00:33.990
So this looks similar to the one before.

11
00:00:33.990 --> 00:00:35.389
But if we use this syntax,

12
00:00:35.389 --> 00:00:39.531
anyone want to take a lucky guess what
the counter is gonna be incremented to?

13
00:00:42.144 --> 00:00:43.710
Three, right?

14
00:00:43.710 --> 00:00:46.830
Cuz in this case,
it is not necessarily batching them,

15
00:00:46.830 --> 00:00:49.470
cuz before we could merge objects, right?

16
00:00:49.470 --> 00:00:52.680
Sometimes the like squirreliest
parts of managing state in React,

17
00:00:52.680 --> 00:00:56.360
have nothing to do with React and
everything to do with JavaScript, right?

18
00:00:56.360 --> 00:00:58.530
You can merge objects,
you can't merge functions.

19
00:00:58.530 --> 00:00:59.890
That's not a thing, right?

20
00:00:59.890 --> 00:01:02.690
You can compose them,
let's not get into it, there's, yeah.

21
00:01:02.690 --> 00:01:06.350
But you can go ahead and you can,

22
00:01:06.350 --> 00:01:09.050
it'll play through each one of
those functions one by one.

23
00:01:09.050 --> 00:01:10.240
So place the first one.

24
00:01:10.240 --> 00:01:13.470
Okay that went from zero to one,
it played to the second one that went

25
00:01:13.470 --> 00:01:16.205
from one to two, play to the third
one that went from two to three,

26
00:01:16.205 --> 00:01:17.770
we'll go three times to that point.

27
00:01:17.770 --> 00:01:22.180
So, using a slightly different syntax
gives you some wildly different effects,

28
00:01:22.180 --> 00:01:26.390
wild for a counter but you can
imagine that in a lecture situation,

29
00:01:26.390 --> 00:01:28.740
it could be where it's like,
I like this new syntax.

30
00:01:28.740 --> 00:01:32.710
I'm just gonna, some of the worst bugs
that I've ever introduced a new code base,

31
00:01:32.710 --> 00:01:35.130
which is I'm influencing
some other feature.

32
00:01:35.130 --> 00:01:37.800
I'm just gonna refactor this
while I'm in here, all right?

33
00:01:37.800 --> 00:01:39.120
That always goes real well.

34
00:01:41.040 --> 00:01:46.330
Cool, so we can implement it
like this we can do state.count,

35
00:01:46.330 --> 00:01:49.580
if you really want you could
destructure it and make it count + 1,

36
00:01:49.580 --> 00:01:53.660
it doesn't really matter, these are two
different ways of saying the same thing.

37
00:01:54.860 --> 00:02:00.430
Either way we go whichever syntax you
like more, go for it, it doesn't matter.

38
00:02:00.430 --> 00:02:02.600
So yeah, like I said,
it plays through each of them.

39
00:02:02.600 --> 00:02:05.860
And this allows you to do some
interesting things as well.

40
00:02:05.860 --> 00:02:11.050
Because it's a function, not just an
object, we can write some rules as well.

41
00:02:11.050 --> 00:02:17.290
We can go ahead and we can say like,
all right only increment up to five, you

42
00:02:17.290 --> 00:02:21.010
know if it's already greater than equal
to five return otherwise do this, right?

43
00:02:21.010 --> 00:02:24.290
So this will give us a counter that
only goes up to five in this case.

44
00:02:24.290 --> 00:02:26.670
And you can have all sorts of
different kind of like logic.

45
00:02:26.670 --> 00:02:29.920
This becomes a little bit more interesting
when you want to pass stuff in, right,

46
00:02:29.920 --> 00:02:32.940
if you're hard coded and you could have
just done it in the render function, so

47
00:02:32.940 --> 00:02:37.380
on and so forth, but
we can go ahead and be able to pass in.

48
00:02:37.380 --> 00:02:40.280
So let's actually play with this counter
a little bit now that we have it.

49
00:02:41.450 --> 00:02:43.559
So, we'll go into the code, and

50
00:02:43.559 --> 00:02:48.230
let's just try out what we kinda
saw on the screen a second ago.

51
00:02:48.230 --> 00:02:51.440
We'll say this.setState.

52
00:02:51.440 --> 00:02:52.580
Let's give it a function this time.

53
00:02:54.150 --> 00:02:59.195
We'll say state, and
in this case we'll do if

54
00:02:59.195 --> 00:03:05.870
state.count is greater than or
equal to 5 we'll just return.

55
00:03:05.870 --> 00:03:09.982
And I'll pause for a moment,
you'll notice that I could go ahead and

56
00:03:09.982 --> 00:03:13.637
I could say like count is state.count,

57
00:03:13.637 --> 00:03:18.940
I could say update the state to what it
already was But I can also if I return

58
00:03:18.940 --> 00:03:23.520
undefined from this function effectively,
it will just not update the state.

59
00:03:23.520 --> 00:03:26.210
One of the reasons that I'm
calling that to your attention

60
00:03:26.210 --> 00:03:28.340
is because like that won't work later,
right?

61
00:03:28.340 --> 00:03:32.750
So this is kind of what you know, in
storytelling is like if there's like a gun

62
00:03:32.750 --> 00:03:36.270
used in chapter 14, it better be
on the mantelpiece in chapter one.

63
00:03:36.270 --> 00:03:38.050
And if there's a gun on
the mantelpiece in chapter one,

64
00:03:38.050 --> 00:03:39.920
it better be used in chapter 14, right?

65
00:03:39.920 --> 00:03:43.510
So I'm pointing this out now because
like we will talk about it again

66
00:03:43.510 --> 00:03:44.860
in a little bit.

67
00:03:44.860 --> 00:03:49.911
So we'll say if state.count is
greater than 5, just return otherwise,

68
00:03:55.868 --> 00:03:58.410
All right, so
we'll try the simplest version of this.

69
00:03:58.410 --> 00:04:02.260
We'll go ahead and check it out in the
application increment increment increment.

70
00:04:04.300 --> 00:04:06.819
And you can see I can still hit
the button but we're not going past five.

71
00:04:08.420 --> 00:04:10.370
All right, this is cool.

72
00:04:10.370 --> 00:04:13.240
Now this becomes a little bit more
interesting if we wanna pass in

73
00:04:13.240 --> 00:04:14.700
some kind of prop.

74
00:04:14.700 --> 00:04:19.160
So for instance, we could go over into
application and we could say, all right,

75
00:04:19.160 --> 00:04:23.610
counter, we'll say that
you have a max of 5.

76
00:04:24.630 --> 00:04:25.360
We'll say 15.

77
00:04:25.360 --> 00:04:31.750
And we'll say a step of 5, right?

78
00:04:31.750 --> 00:04:33.050
So we can pass in additional data.

79
00:04:33.050 --> 00:04:39.720
All right, so we've passed in
a max of 15 and a step of 5.

80
00:04:39.720 --> 00:04:46.542
And the most obvious thing to do in
this case, would do something like,

81
00:04:50.742 --> 00:04:57.380
Max and step = this.props.

82
00:04:57.380 --> 00:05:01.050
And we could say, all right,
if it's less than or

83
00:05:01.050 --> 00:05:06.090
equal to the max, or if it is, and
then we'll increment by the step.

84
00:05:07.200 --> 00:05:10.135
Let's take that for a spin and
make sure to make any fatal mistakes.

85
00:05:12.333 --> 00:05:14.210
5, 10, 15 no more, right?

86
00:05:14.210 --> 00:05:21.905
Now, one of the things Is that if this
got a little bit more complicated,

87
00:05:21.905 --> 00:05:26.775
right, this function that was doing all
this logic, really, even one standard

88
00:05:26.775 --> 00:05:31.115
deviation more complicated, there might be
a world that we wanted to test in, right?

89
00:05:31.115 --> 00:05:32.660
I know, wild.

90
00:05:32.660 --> 00:05:34.350
We might want to run a unit test.

91
00:05:34.350 --> 00:05:38.970
Now, with all this.props and this.state,
that becomes a little bit tricky

92
00:05:38.970 --> 00:05:43.350
because then we gotta pull out either
enzyme or React testing library.

93
00:05:43.350 --> 00:05:46.520
We've got a mountain component,
and we've got to pass in props.

94
00:05:46.520 --> 00:05:48.530
And then we've got all that stuff.

95
00:05:48.530 --> 00:05:49.980
Right when we're just trying to test like,

96
00:05:49.980 --> 00:05:52.740
does this function work the way
that we think it should?

97
00:05:52.740 --> 00:05:53.250
Right?

98
00:05:53.250 --> 00:05:57.426
So it turns out that on top of
just getting state, it also gets.

99
00:05:59.331 --> 00:06:05.136
Props, and so we could actually
do that all within the function.

100
00:06:07.995 --> 00:06:11.110
Since that this.props is
going to be the props.

101
00:06:11.110 --> 00:06:16.075
Now, a careful eye will note that
this is really just a function,

102
00:06:16.075 --> 00:06:20.425
like a regular function we
can do anything with, right?

103
00:06:20.425 --> 00:06:23.410
So I could, theoretically, pull this out.

104
00:06:24.800 --> 00:06:27.960
We could have it somewhere else where
it's a regular old JavaScript function.

105
00:06:30.485 --> 00:06:34.140
You could theoretically some state and
some props, right,

106
00:06:34.140 --> 00:06:37.090
and then look at the return
value that comes out.

107
00:06:37.090 --> 00:06:40.190
And just write a very, very,
very simple unit task,

108
00:06:40.190 --> 00:06:44.030
cuz it's just a JavaScript function,
and then we could pass it in here.

109
00:06:44.030 --> 00:06:48.060
This is also useful if you find yourself
in an application that's growing,

110
00:06:48.060 --> 00:06:50.835
and you're like, okay,
I have some of this complicated logic and

111
00:06:50.835 --> 00:06:53.140
then we're using in multiple places,
right?

112
00:06:53.140 --> 00:06:57.420
Which leaves you to two choices right at
multiple places, which is a violation of

113
00:06:57.420 --> 00:07:00.170
any kind of like principle that
you've ever heard of, right?

114
00:07:00.170 --> 00:07:03.490
Because then you also have to remember
to change it multiple places.

115
00:07:03.490 --> 00:07:05.330
Or you can just kind of break it out and

116
00:07:05.330 --> 00:07:07.720
then have one thing that you
could use multiple places.

117
00:07:07.720 --> 00:07:09.960
Like for our editors,
we have like, you know,

118
00:07:09.960 --> 00:07:12.540
everyone thinks that there's like
a code editor and design editor.

119
00:07:12.540 --> 00:07:16.930
There's really 12 editors for all the
different places that you might use them.

120
00:07:16.930 --> 00:07:19.310
And they're kind of composed
of all these different pieces.

121
00:07:19.310 --> 00:07:22.300
And so we can just change one place and
get it across all the things.

122
00:07:22.300 --> 00:07:25.180
It's, you know, building out these small
building blocks rather than having a bunch

123
00:07:25.180 --> 00:07:26.600
of conditionals and a large editor.

124
00:07:29.460 --> 00:07:31.660
Right, so
everything works just as it did before.

125
00:07:31.660 --> 00:07:33.500
But here we've pulled everything out.

126
00:07:33.500 --> 00:07:37.440
And that's one of the kind of big
advantages to being able to use a function

127
00:07:37.440 --> 00:07:39.030
in this.state, right?

128
00:07:39.030 --> 00:07:40.630
We can have it.

129
00:07:40.630 --> 00:07:45.230
We can test it super easily without having
to mount the entire component, so on and

130
00:07:45.230 --> 00:07:45.789
so forth.

131
00:07:46.880 --> 00:07:48.490
Right, and we saw if we do it three times,

132
00:07:48.490 --> 00:07:52.200
it will stack up and so
it behaves a little bit differently.

133
00:07:52.200 --> 00:07:56.184
So when you go into like, I like this
pattern, I'm going to refactor, right,

134
00:07:56.184 --> 00:07:59.228
like that can get a little bit
problematic because if we did,

135
00:08:05.538 --> 00:08:07.565
It will run through it all three times.

136
00:08:07.565 --> 00:08:15.340
&gt;&gt; The arrow function would replace
the need for this.increment.bind, right?

137
00:08:15.340 --> 00:08:18.050
&gt;&gt; So we've got one called increment
that's just kind of its own separate one

138
00:08:18.050 --> 00:08:19.523
that's separate outside of the class.

139
00:08:19.523 --> 00:08:20.696
&gt;&gt; Okay.

140
00:08:20.696 --> 00:08:24.680
&gt;&gt; There is a syntax that you
can use when you do this.

141
00:08:24.680 --> 00:08:26.490
&gt;&gt; That's it, yeah.

142
00:08:26.490 --> 00:08:33.400
&gt;&gt; This, depending on the day is not
natively supported in browsers, right?

143
00:08:33.400 --> 00:08:38.410
So what this does it's an arrow function
that's effectively doing the same as this.

144
00:08:38.410 --> 00:08:41.880
It requires a bubble plug in which you
may or may not have in your application.

145
00:08:41.880 --> 00:08:45.320
And if you just yeah, pasted,
it is not natively supported.

146
00:08:45.320 --> 00:08:49.310
And there is an argument that this
will define a new function in every

147
00:08:49.310 --> 00:08:52.530
class instance versus the other
one was shared on the superclass.

148
00:08:52.530 --> 00:08:54.600
I don't necessarily care about that,
cuz when we get the hook, so

149
00:08:54.600 --> 00:08:57.650
we're gonna be redefining
functions all over the place.

150
00:08:57.650 --> 00:09:02.510
It's more the issue of one, you might not
have that in your application, right,

151
00:09:02.510 --> 00:09:04.520
because it's not natively supported.

152
00:09:05.560 --> 00:09:08.890
That said, one of the first things we do
when we're setting up a project to Twilio

153
00:09:08.890 --> 00:09:11.210
is we install that plugin,
that's what we do.

154
00:09:11.210 --> 00:09:13.882
Or we did, now we just use hooks.

155
00:09:13.882 --> 00:09:16.450
But yeah, so that'll work, too.

156
00:09:16.450 --> 00:09:17.020
Great question.

157
00:09:17.020 --> 00:09:17.730
&gt;&gt; Thanks for the refresh.

158
00:09:17.730 --> 00:09:18.400
&gt;&gt; Yeah, no problem.

