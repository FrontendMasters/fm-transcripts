WEBVTT

1
00:00:00.330 --> 00:00:02.520
I checked out a branch
called asynchronous actions.

2
00:00:02.520 --> 00:00:06.900
And that was mostly to get us back
to a firm starting ground again.

3
00:00:08.660 --> 00:00:12.415
And there's just some subtle differences.

4
00:00:12.415 --> 00:00:16.800
Cuz what happened before is we had to do
that line where we looked at the response

5
00:00:16.800 --> 00:00:21.230
we saw, all right, if there's a response,
and that response has characters, so

6
00:00:21.230 --> 00:00:24.435
on and so forth, right because we
wanted to make it generalizable,

7
00:00:24.435 --> 00:00:27.240
we use fetch functionality, right?

8
00:00:27.240 --> 00:00:30.530
Which meant that there was a certain
amount of leakiness to that abstraction.

9
00:00:30.530 --> 00:00:32.910
We talked about the fact that
we could pass in a function.

10
00:00:32.910 --> 00:00:34.120
We talked about a lot of things.

11
00:00:34.120 --> 00:00:35.810
We had big hopes and aspirations.

12
00:00:35.810 --> 00:00:38.070
We're gonna try a little bit
of a different approach,

13
00:00:38.070 --> 00:00:40.790
kind of based on that thunk stuff
that we were talking about before.

14
00:00:40.790 --> 00:00:44.000
What if we could dispatch an action and
say go fetch stuff?

15
00:00:45.070 --> 00:00:47.610
This is what you need to do, and

16
00:00:47.610 --> 00:00:53.550
then let the reducer handle all of that
setting the loading, so on and so forth.

17
00:00:53.550 --> 00:00:57.060
So this is kind of checking out that

18
00:00:57.060 --> 00:01:02.440
branch gives us another firm
starting place to start with.

19
00:01:02.440 --> 00:01:04.080
And so we got the action type loading.

20
00:01:04.080 --> 00:01:07.650
At this point, I am going back to just,
this is going to be a reducer for

21
00:01:07.650 --> 00:01:09.210
managing characters, right?

22
00:01:09.210 --> 00:01:12.760
We're gonna separate the asynchronous
parts of our application

23
00:01:12.760 --> 00:01:14.900
from the synchronous state
management pieces, right?

24
00:01:14.900 --> 00:01:18.310
We're just gonna separate them, that way,
they don't have to know about each other

25
00:01:18.310 --> 00:01:20.870
which, in my argument,
will make more modular code.

26
00:01:20.870 --> 00:01:23.570
But if you like the other approach,
you can use that one as well.

27
00:01:23.570 --> 00:01:26.410
And there can be argument
why both can exist.

28
00:01:26.410 --> 00:01:30.240
So we've got loading,
and we've got response,

29
00:01:30.240 --> 00:01:34.190
complete an error, nothing dissimilar,
and I'm returning the entire state.

30
00:01:34.190 --> 00:01:37.470
And what you'll see here is I'm
using use reducer right now, and

31
00:01:37.470 --> 00:01:40.960
then we can pull just
the characters off of that state.

32
00:01:40.960 --> 00:01:45.460
Now, what I would love to do is,
the fetch stuff isn't here yet.

33
00:01:45.460 --> 00:01:49.900
What I would love to do is dispatch
an action that is a function

34
00:01:51.340 --> 00:01:53.224
right, that can undo all
of the asynchronous and

35
00:01:53.224 --> 00:01:55.375
synchronous, then just
patch the real action.

36
00:01:55.375 --> 00:01:57.115
This is very similar to
how Reducer stan works,

37
00:01:57.115 --> 00:01:59.745
instead we are going
to write it ourselves.

38
00:01:59.745 --> 00:02:02.615
And what I would love you to
pay attention to is this,

39
00:02:02.615 --> 00:02:07.750
we are gonna solve an asynchronous
problem, if you wanted one that did login,

40
00:02:07.750 --> 00:02:11.080
okay, ke the same approach works.

41
00:02:11.080 --> 00:02:15.780
This is simply to wrap this idea of
reducer with additional functionality

42
00:02:15.780 --> 00:02:17.370
as we need it.

43
00:02:17.370 --> 00:02:25.730
So we'll make a hook and we'll call it
const lets call it useThunkReducer.

44
00:02:25.730 --> 00:02:29.370
And I alluded to before, there are ways
that you can make&lt; there are hooks for

45
00:02:29.370 --> 00:02:30.720
that that will load additional middleware.

46
00:02:30.720 --> 00:02:33.470
We're just gonna do the simple possible
one, cuz it'll get really into the weeds,

47
00:02:33.470 --> 00:02:34.520
otherwise.

48
00:02:34.520 --> 00:02:38.350
And it'll have the exact
same API as useReducer,

49
00:02:38.350 --> 00:02:40.120
cuz it's just gonna be
an abstraction on top of it.

50
00:02:40.120 --> 00:02:41.323
It's gonna be a superset of features.

51
00:02:41.323 --> 00:02:45.709
So I'll do reducer, and
I'll take an initialState,

52
00:02:50.869 --> 00:02:57.542
And at the end of the day is going to,
like I said, it's an abstraction.

53
00:02:57.542 --> 00:03:05.889
So go get state and
dispatch equals useReducer.

54
00:03:05.889 --> 00:03:12.450
From whatever reducer they passed in, and

55
00:03:12.450 --> 00:03:18.540
whatever initial state they passed in,
and that was the bottom of the file.

56
00:03:19.850 --> 00:03:24.550
And then we'll return that state and
dispatch.

57
00:03:26.230 --> 00:03:29.430
So all it does right now
is this know It basically

58
00:03:29.430 --> 00:03:31.500
takes what we got from useReducer and
passes it through.

59
00:03:31.500 --> 00:03:33.940
Remember when we wrote that first reducer
and all it did was take the state and

60
00:03:33.940 --> 00:03:35.020
return the state?

61
00:03:35.020 --> 00:03:37.600
That is effectively what we've done here.

62
00:03:37.600 --> 00:03:42.440
What we wanna do is create
something over the dispatch

63
00:03:42.440 --> 00:03:47.570
function that says, hey, if this is
a normal action, just like we had before,

64
00:03:47.570 --> 00:03:50.050
yeah, yeah pass dispatch to do the thing.

65
00:03:50.050 --> 00:03:54.920
If this is a function,
call the function, right?

66
00:03:54.920 --> 00:03:59.380
Give it a copy of dispatch and say,
hey you take care of dispatch,

67
00:03:59.380 --> 00:04:02.200
and whenever you are done
doing whatever you are doing,

68
00:04:02.200 --> 00:04:06.700
you can go ahead and
dispatch actions yourself.

69
00:04:06.700 --> 00:04:07.970
Right?
And so this is the whole

70
00:04:07.970 --> 00:04:09.660
thunk thing that we're
talking about before.

71
00:04:10.760 --> 00:04:13.670
Like I said, trying to explain a thunk
probably takes longer than actually

72
00:04:13.670 --> 00:04:15.250
writing the code.

73
00:04:15.250 --> 00:04:16.920
I aspire to prove that to you.

74
00:04:18.060 --> 00:04:25.200
So what we'll do is, we will make a const
called, let's call it enhancedDispatch,

75
00:04:25.200 --> 00:04:27.750
we could call a thunkDispatch,
you can call it whatever you want.

76
00:04:27.750 --> 00:04:31.360
I'm gonna call it enhanceDispatch and
we'll take an action,

77
00:04:33.350 --> 00:04:37.290
and again if we still
wanna take this no-op,

78
00:04:37.290 --> 00:04:41.020
it would take the action and
it would dispatch the action, all right.

79
00:04:41.020 --> 00:04:44.694
So so far we've given ourselves some
hooks in here where we can step in and

80
00:04:44.694 --> 00:04:48.506
do some conditional logic above where
my cursor is highlighted right now.

81
00:04:48.506 --> 00:04:52.742
But right now, its just taking
the action and dispatching it and

82
00:04:52.742 --> 00:04:58.233
what our new asynchronous is gonna do is
that its going to, yeah, set up a reducer,

83
00:04:58.233 --> 00:05:03.770
wrapDispatch and its enhanced version
where you can add an additional logic.

84
00:05:03.770 --> 00:05:06.670
And them it will give them
state in this enhancedDispatch,

85
00:05:06.670 --> 00:05:10.500
which in a normal streaming things
will just do the normal thing.

86
00:05:10.500 --> 00:05:13.950
I could swap this out right now and
it would work.

87
00:05:13.950 --> 00:05:17.261
But in here is where we can
start doing additional things.

88
00:05:17.261 --> 00:05:22.768
Now if I wanted to log,
if I put a log in here, let's just do it.

89
00:05:26.904 --> 00:05:31.394
Now, this works like useReducer
except it logs every

90
00:05:31.394 --> 00:05:34.700
action that flows through it, right?

91
00:05:34.700 --> 00:05:39.380
So you could do something like if
node environment is development,

92
00:05:39.380 --> 00:05:40.200
log the action.

93
00:05:40.200 --> 00:05:44.777
All right, that would do the trick right
there and it would log every single one.

94
00:05:44.777 --> 00:05:47.570
Probably, you don't want that,
I mean, you might want that.

95
00:05:47.570 --> 00:05:50.000
Or it might be some other flag or
something along those lines.

96
00:05:50.000 --> 00:05:55.310
But we have an abstraction over
useReducer to do more complicated things.

97
00:05:55.310 --> 00:06:00.151
What we're gonna do is say, hey,
if this action is actually a function,

98
00:06:00.151 --> 00:06:02.821
pass it a copy of dispatch, and call it.

99
00:06:02.821 --> 00:06:07.823
So we'll say,
I'm gonna pull in is function,

100
00:06:07.823 --> 00:06:14.087
you could do type of equals
equals equals function as well.

101
00:06:21.996 --> 00:06:22.717
And so we'll say if

102
00:06:31.586 --> 00:06:34.680
IsFunction cuz give me call
the action regardless.

103
00:06:34.680 --> 00:06:37.940
But if this action was actually a function
instead of an object, then what

104
00:06:37.940 --> 00:06:41.750
we gonna do is we gonna call it like a
function and past the copy of a dispatch.

105
00:06:44.210 --> 00:06:46.119
Otherwise, just do the normal thing.

106
00:06:51.750 --> 00:06:57.729
And so now we actually have full
func support in our reducer, right?

107
00:06:57.729 --> 00:07:02.508
A normal action is an object,
do the thing if we dispatched a function,

108
00:07:02.508 --> 00:07:06.670
call the function with a copy dispatch and
let it do the thing.

109
00:07:06.670 --> 00:07:08.560
So it's again a function
that returns a function.

