WEBVTT

1
00:00:00.040 --> 00:00:02.130
We talked about this useState hook.

2
00:00:02.130 --> 00:00:08.151
One of the things that we get
in Redux is middleware, right?

3
00:00:08.151 --> 00:00:12.689
Cuz reducers, and it's true of
Redux as it is true of useReducer,

4
00:00:12.689 --> 00:00:15.374
again, doesn't really have an idea.

5
00:00:15.374 --> 00:00:22.292
The reducer itself does not have
an idea of asynchrony, right?

6
00:00:22.292 --> 00:00:27.335
The useFetch is the one doing all fetch
and dispatch in a number of actions.

7
00:00:27.335 --> 00:00:30.840
And so in Redux, we have a way to
solve this using some middleware.

8
00:00:30.840 --> 00:00:34.774
And one of the really common ways to do
that is this piece of middleware called

9
00:00:34.774 --> 00:00:35.640
redux-thunk.

10
00:00:35.640 --> 00:00:37.564
In the Redux MRX course,

11
00:00:37.564 --> 00:00:43.624
there's other more powerful tools
like redux-saga, redux-observable.

12
00:00:43.624 --> 00:00:47.205
And I think I alluded to before,
redux-observable lets you cancel, and

13
00:00:47.205 --> 00:00:50.920
do bounce, and do all sorts of crazy
stuff with asynchrony, totally cool.

14
00:00:52.040 --> 00:00:56.280
That is a workshop in and of itself
to wrap your head around all that.

15
00:00:56.280 --> 00:00:57.298
We're gonna look at redux-thunk.

16
00:00:57.298 --> 00:00:58.411
And what is a thunk?

17
00:00:58.411 --> 00:01:02.180
It's a very complicated way of
saying a very simple thing.

18
00:01:02.180 --> 00:01:06.490
In normal reducers, we dispatch actions,
redux-thunk, or in our case,

19
00:01:06.490 --> 00:01:08.740
our own custom thunk
that we're gonna write.

20
00:01:08.740 --> 00:01:14.330
And it's gonna take longer to explain
what a thunk is than it is going to take

21
00:01:14.330 --> 00:01:20.400
to actually write the code to implement
this, so bear with me for a moment.

22
00:01:20.400 --> 00:01:24.530
A thunk is a function returned
from another function.

23
00:01:26.060 --> 00:01:27.790
I don't have a lot of regrets in life.

24
00:01:27.790 --> 00:01:30.900
One regret in life I have right now
is not having an exhibit meme here,

25
00:01:30.900 --> 00:01:34.335
which is I heard you like function,
so I put functions in your functions.

26
00:01:34.335 --> 00:01:36.680
So that's a missed opportunity.

27
00:01:36.680 --> 00:01:39.743
Maybe we can edit it and then post.

28
00:01:39.743 --> 00:01:44.113
And so, for instance, the outer function
here, which is just a function,

29
00:01:44.113 --> 00:01:46.020
it's not a thunk.

30
00:01:46.020 --> 00:01:49.648
The function that is returned
from that function is a thunk.

31
00:01:51.659 --> 00:01:52.625
How's that one feel?

32
00:01:52.625 --> 00:01:56.000
[LAUGH] Why is this useful, right?

33
00:01:56.000 --> 00:02:00.452
Well, it means that in those action
creators, instead of dispatching an action

34
00:02:00.452 --> 00:02:04.836
cuz we don't have the result from the API
yet, we can say, here's a function,

35
00:02:04.836 --> 00:02:08.318
it will dispatch an action when
we've heard back from the API.

36
00:02:08.318 --> 00:02:12.460
And that's the basic,
we're basically saying, just wait.

37
00:02:12.460 --> 00:02:14.520
We had to tell the reducer something.

38
00:02:14.520 --> 00:02:16.960
Here's the thing for you to do, and then
you'll hear the action for the second.

39
00:02:16.960 --> 00:02:19.800
So the major idea is the thunk
is code to be executed later.

40
00:02:20.860 --> 00:02:24.960
Here's the thing, when we hear back,
it will dispatch something.

41
00:02:24.960 --> 00:02:27.680
So it allows us to think
about this asynchronous code.

42
00:02:27.680 --> 00:02:30.280
Now, as I kind of alluded to earlier,

43
00:02:30.280 --> 00:02:34.710
useReducer doesn't have
an idea of middleware, right?

44
00:02:34.710 --> 00:02:38.508
However, we could theoretically handle
this the way that we've been handling

45
00:02:38.508 --> 00:02:41.464
other stuff, which is we can
just make our own hooks, right?

46
00:02:41.464 --> 00:02:44.630
And there is, I would spoil it, and
I'll show this to you at the end.

47
00:02:44.630 --> 00:02:50.962
There is a library out there called
useMiddleware, which is an abstraction

48
00:02:50.962 --> 00:02:56.702
over useReducer that supports all existing
Redux middleware in your useReducer hook.

49
00:02:56.702 --> 00:03:01.500
It's actually five lines of code or
ten lines of code.

50
00:03:01.500 --> 00:03:03.200
And it just loads it, right?

51
00:03:03.200 --> 00:03:07.789
But we're gonna kind of just
look at it from a higher level.

52
00:03:07.789 --> 00:03:13.114
All right, so what we'd love to do
is simply dispatch actions that

53
00:03:13.114 --> 00:03:19.310
will allow us to say, okay, we're gonna
say, hey, we want to hit this API.

54
00:03:20.590 --> 00:03:21.710
Then it will go do it.

55
00:03:21.710 --> 00:03:25.710
And we're gonna get rid of this useFetch
hook, right, because there's a lot

56
00:03:25.710 --> 00:03:29.370
of little problems in here,
like formatting the data we'd love to do.

57
00:03:29.370 --> 00:03:34.100
What happens with dynamic segments and
query params, right?

58
00:03:34.100 --> 00:03:38.600
I'd love to say, hey, we're gonna give
somebody else the control, right?

59
00:03:38.600 --> 00:03:40.000
And which one is the right choice?

60
00:03:40.000 --> 00:03:42.962
Really does, unfortunately, depend.

