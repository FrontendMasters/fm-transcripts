WEBVTT

1
00:00:00.030 --> 00:00:01.800
So the other thing we saw
before was that callback.

2
00:00:01.800 --> 00:00:05.530
We don't have a callback
either to the set count.

3
00:00:05.530 --> 00:00:10.140
We do have another way of doing this.

4
00:00:10.140 --> 00:00:15.530
And so we don't have a callback, but we do
have the sort of thing called used effect.

5
00:00:15.530 --> 00:00:18.122
Use effect and
the word effect means something and

6
00:00:18.122 --> 00:00:19.920
we think about it as side effects.

7
00:00:19.920 --> 00:00:24.211
And a functional component is pretty
much other than this state hook,

8
00:00:24.211 --> 00:00:26.830
functional components before you state,

9
00:00:26.830 --> 00:00:31.400
kind of like pure functions,
parse one in, component came out.

10
00:00:31.400 --> 00:00:34.590
If the same props went in,
the same component came out.

11
00:00:34.590 --> 00:00:37.770
Now, there is this aspect of state,
they're no longer pure, right?

12
00:00:37.770 --> 00:00:41.870
But if you want something else to
happen in this function, then,

13
00:00:41.870 --> 00:00:44.830
other than props going in,
the state is in effect, technically,

14
00:00:44.830 --> 00:00:47.330
under the hood, and
a component coming out,

15
00:00:47.330 --> 00:00:51.700
you need to use effect because it says,
okay here's a side effect.

16
00:00:51.700 --> 00:00:54.780
Now anything that is not the return
value is technically a side effect.

17
00:00:54.780 --> 00:00:57.540
We think about side effects
in terms of Ajax requests.

18
00:00:57.540 --> 00:01:00.170
That's a side effect,
yeah, return a component.

19
00:01:00.170 --> 00:01:01.910
Also goes on that request.

20
00:01:01.910 --> 00:01:03.280
That's the side effect.

21
00:01:03.280 --> 00:01:06.940
Console logs are side effects,
is return this value but

22
00:01:06.940 --> 00:01:11.730
also logs itself to the console and so
we need to use use effect in that case.

23
00:01:11.730 --> 00:01:15.368
The other thing that you will see
constantly is that I don't wanna type

24
00:01:15.368 --> 00:01:18.820
reactor use state all the time so
what I am gonna do here is instead of

25
00:01:18.820 --> 00:01:21.988
bringing in component,
I will say use state and use effect.

26
00:01:21.988 --> 00:01:24.279
Great.

27
00:01:24.279 --> 00:01:30.290
And now,
what I can do is I can register in effect.

28
00:01:30.290 --> 00:01:32.430
Now we'll talk about
the pieces as I write it.

29
00:01:32.430 --> 00:01:38.610
So I'm gonna say use effect and
use effect takes a callback.

30
00:01:38.610 --> 00:01:43.170
And this dependencies is depth
question mark, which is an array.

31
00:01:43.170 --> 00:01:46.460
So it is the callback is simply
a function like we saw before.

32
00:01:46.460 --> 00:01:52.416
In this case, I will say document.title

33
00:01:53.575 --> 00:01:59.918
Is the Counter,

34
00:01:59.918 --> 00:02:03.093
count.

35
00:02:05.000 --> 00:02:05.620
All right.

36
00:02:05.620 --> 00:02:09.000
So let's talk about those dependencies and
we'll kind of, we'll touch on it now.

37
00:02:09.000 --> 00:02:11.640
And then we'll like revisit it several
times in different contexts, but

38
00:02:11.640 --> 00:02:13.370
I want kind of introduce the concept now.

39
00:02:13.370 --> 00:02:17.030
If it doesn't pass, if it doesn't hit you
on the first pass we'll see more practical

40
00:02:17.030 --> 00:02:19.330
examples later on as well.

41
00:02:19.330 --> 00:02:26.180
If you do not give it any dependencies,
this is almost never what you want.

42
00:02:26.180 --> 00:02:31.090
If you don't give

43
00:02:31.090 --> 00:02:35.140
it any dependencies,
it will run on every single render.

44
00:02:36.450 --> 00:02:40.880
You're cool, sounds great unless
it sets any amount of state,

45
00:02:42.120 --> 00:02:44.090
which point that will trigger render.

46
00:02:44.090 --> 00:02:47.100
Which will trigger the function
which will trigger a render,

47
00:02:47.100 --> 00:02:49.200
which will trigger the function, right.

48
00:02:49.200 --> 00:02:53.260
And then all of a sudden you will learn
very quickly how to force quit Chrome.

49
00:02:53.260 --> 00:02:58.440
Trust me or you'll actually DDoS your
own server like I did last night.

50
00:02:58.440 --> 00:03:00.880
All sorts of fun things.

51
00:03:00.880 --> 00:03:02.500
So that is almost never what you want.

52
00:03:04.130 --> 00:03:06.410
The other option is to
give it an empty array.

53
00:03:06.410 --> 00:03:09.690
Cuz I told you this is a this
is an array of dependencies.

54
00:03:09.690 --> 00:03:13.440
And what this means is, hey,

55
00:03:13.440 --> 00:03:17.810
only run this effect when
something I care about changes.

56
00:03:17.810 --> 00:03:22.716
Right and if you're saying I don't
care about anything when the very

57
00:03:22.716 --> 00:03:26.959
not list of you, but
to it'll only run the very first time.

58
00:03:26.959 --> 00:03:31.943
And this seems like what you want but it's
also again usually not, right, is very

59
00:03:31.943 --> 00:03:36.712
similar to component didmount in this
case but usually an we'll see an example

60
00:03:36.712 --> 00:03:41.610
later with this kind of blows up in our
face like towards the very N one where.

61
00:03:41.610 --> 00:03:44.498
Using react router, and when making
network requests where the same

62
00:03:44.498 --> 00:03:47.237
component is getting different
props is not mounting again, but

63
00:03:47.237 --> 00:03:48.853
it's maybe fetching a different ID.

64
00:03:48.853 --> 00:03:51.953
It won't trigger again cuz
you said only when it mounts,

65
00:03:51.953 --> 00:03:53.900
right which is not what you wanted.

66
00:03:54.940 --> 00:03:59.510
So generally speaking, you probably
always want to have something here

67
00:03:59.510 --> 00:04:01.470
like there's there are cases
like we said before,

68
00:04:01.470 --> 00:04:05.140
there are cases where you truly
only want it when amounts.

69
00:04:05.140 --> 00:04:07.140
But for the most part, right,

70
00:04:07.140 --> 00:04:11.350
like, you probably want anything that
you're using in the list of dependencies.

71
00:04:11.350 --> 00:04:13.050
If you're using create react app,

72
00:04:13.050 --> 00:04:16.930
they install this eastland
plugin called exhaustive depths.

73
00:04:16.930 --> 00:04:19.000
Right?
Which will basically scan your code and

74
00:04:19.000 --> 00:04:21.700
it sees, right here, that I'm using count.

75
00:04:21.700 --> 00:04:24.900
It's like, hey, you're using count in
this effect, so you should listen for

76
00:04:24.900 --> 00:04:26.090
when count changes.

77
00:04:26.090 --> 00:04:32.940
Cuz if I don't, you'll see it's counter 0,
and it's never changing.

78
00:04:34.330 --> 00:04:38.250
Right, because what we want this effect to
do is we want it to run whenever account

79
00:04:38.250 --> 00:04:39.170
changes.

80
00:04:39.170 --> 00:04:46.910
So if we add count in
here 510 15 The other

81
00:04:46.910 --> 00:04:52.810
thing I wanna point out is that it
also works for decrement and reset.

82
00:04:52.810 --> 00:04:56.540
Right before with those class methods
we're putting on each one of those methods

83
00:04:56.540 --> 00:05:02.020
and could we have done a lifecycle
hook for you know, props changing.

84
00:05:02.020 --> 00:05:02.740
Yeah.

85
00:05:02.740 --> 00:05:08.370
But the fact of the matter is we're
saying if count changes run this effect.

86
00:05:08.370 --> 00:05:10.219
Right, there's no extra
life cycle methods,

87
00:05:10.219 --> 00:05:11.860
there's nothing along those lines.

88
00:05:11.860 --> 00:05:15.047
Should this value change,
this is what I want you to do.

89
00:05:15.047 --> 00:05:19.120
Right, which is definitely a kind of
much cleaner way of going about this.

