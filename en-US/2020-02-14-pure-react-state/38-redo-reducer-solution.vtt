WEBVTT

1
00:00:00.110 --> 00:00:01.850
All right, so this time,
we're gonna start from the other angle.

2
00:00:01.850 --> 00:00:06.010
We'll actually write
the reducer logic first.

3
00:00:06.010 --> 00:00:09.025
We'll say, action.type.

4
00:00:10.907 --> 00:00:12.190
Is REDO.

5
00:00:12.190 --> 00:00:16.474
And in this case, we'll say that
the nearPresent is the first thing on

6
00:00:16.474 --> 00:00:21.065
the future, and then we'll call
everything else in there the newFuture.

7
00:00:23.055 --> 00:00:25.088
So state.future.

8
00:00:27.279 --> 00:00:28.180
Cool.

9
00:00:28.180 --> 00:00:32.655
And then we'll say return,
and we'll say the past,

10
00:00:32.655 --> 00:00:37.047
we'll take the current present and
put it on there,

11
00:00:39.060 --> 00:00:44.466
As well as everything that
was in the past previously.

12
00:00:45.629 --> 00:00:52.595
The present is the newPresent and
not a dot, just a comma.

13
00:00:52.595 --> 00:00:59.107
And then the future is everything
that was left in the future.

14
00:01:03.664 --> 00:01:05.120
That's the logic.

15
00:01:05.120 --> 00:01:08.940
And again, it seems how it was basically
shifting stuff between arrays.

16
00:01:08.940 --> 00:01:11.970
It's like what are we putting the present,
we're just moving stuff around.

17
00:01:11.970 --> 00:01:15.350
And so we've got that in place.

18
00:01:15.350 --> 00:01:18.924
Now, we want to probably have another
action creator just like undo.

19
00:01:22.560 --> 00:01:25.840
We'll call this one,
do you wanna take a lucky guess?

20
00:01:25.840 --> 00:01:30.240
Cuz I guess we're going forward from
a past reality, that we have not changed.

21
00:01:30.240 --> 00:01:32.880
So if you change reality,
that is a newFuture.

22
00:01:32.880 --> 00:01:33.450
And we do that,

23
00:01:33.450 --> 00:01:37.920
you'll notice that we're always replacing
the future with an empty array.

24
00:01:37.920 --> 00:01:40.260
So if in any past time and
you make a change,

25
00:01:40.260 --> 00:01:44.330
you lose access to all the futures again,
it splits off to its own timeline.

26
00:01:44.330 --> 00:01:45.390
Again, there's a movie on this.

27
00:01:45.390 --> 00:01:49.600
It's a documentary about a purple guy
who has not thought out how ecological

28
00:01:49.600 --> 00:01:50.466
systems work.

29
00:01:53.080 --> 00:01:54.040
Sweet.

30
00:01:55.420 --> 00:01:56.015
Yeah.

31
00:01:59.604 --> 00:02:02.940
So we'll pass in redo as well.

32
00:02:02.940 --> 00:02:04.440
One change that I've made, and

33
00:02:04.440 --> 00:02:06.760
if you're watching this,
I've already re-based the branch.

34
00:02:06.760 --> 00:02:08.890
But for everyone else,
is I changed the CSS a little bit.

35
00:02:08.890 --> 00:02:13.631
So if it's disabled, it is white and big.

36
00:02:13.631 --> 00:02:15.851
So we'll go into Application.

37
00:02:15.851 --> 00:02:20.540
And now for this other button, it's got
a full width as well, we'll say disabled.

38
00:02:22.260 --> 00:02:23.472
We need to pull in the redo.

39
00:02:26.638 --> 00:02:31.100
And the isFuture as well.

40
00:02:31.100 --> 00:02:35.547
So we'll say disabled
if there is no future.

41
00:02:37.523 --> 00:02:39.719
And we'll say onClick.

42
00:02:45.255 --> 00:02:46.470
Trigger our redo function.

43
00:02:47.890 --> 00:02:50.320
So right now,
we're just in the initial state.

44
00:02:50.320 --> 00:02:52.524
There's nothing to undo,
there's nothing to redo.

45
00:02:56.301 --> 00:03:01.429
For reasons, I'll say second.

46
00:03:03.792 --> 00:03:05.759
More reasons.

47
00:03:05.759 --> 00:03:10.840
So now I can undo, undo, redo, redo.

48
00:03:10.840 --> 00:03:14.780
So I can kind of like shift
those different patterns around.

49
00:03:14.780 --> 00:03:15.541
Which again,

50
00:03:15.541 --> 00:03:20.320
gives us the ability to now do much more
kind of complicated things with our state.

51
00:03:20.320 --> 00:03:22.970
I mean it's all just data
structures at the end of the day.

52
00:03:22.970 --> 00:03:25.488
It's like kind of open this workshop with,

53
00:03:25.488 --> 00:03:29.590
like we ask java to take all these
regular java script data structures.

54
00:03:29.590 --> 00:03:32.326
And figure out what to show into the UI,
and

55
00:03:32.326 --> 00:03:34.992
we're kinda seeing the promise of that.

56
00:03:34.992 --> 00:03:37.866
And I would argue that having
the reducers in there, and

57
00:03:37.866 --> 00:03:41.537
that kinda totally separate state
management from even the use state or

58
00:03:41.537 --> 00:03:45.830
the component set state, makes it a lot
easier to do more complicated things.

59
00:03:45.830 --> 00:03:49.278
For now, whatever you can logically
think about in a structure,

60
00:03:49.278 --> 00:03:52.610
because it's a lot easier
to implement using React.

61
00:03:52.610 --> 00:03:56.180
So you might be like,
I want to do this everywhere.

62
00:03:56.180 --> 00:03:58.820
And we've already talked about the fact
that writing the same code over and

63
00:03:58.820 --> 00:04:03.500
over again is silly, and
you shouldn't do it.

64
00:04:03.500 --> 00:04:07.820
And so
it will be great if we had some kind of,

65
00:04:07.820 --> 00:04:11.079
reusable, reducer pattern for this.

66
00:04:12.120 --> 00:04:14.080
And we've kind of seen this before.

67
00:04:14.080 --> 00:04:15.629
We did this a little bit
with the thump reducer.

68
00:04:15.629 --> 00:04:17.630
We said, cool, useReducer is great,

69
00:04:17.630 --> 00:04:20.310
I have opinions on what
should happen along the way.

70
00:04:20.310 --> 00:04:24.798
And what we did was, we used useReducer,
and we had that advanced dispatch.

71
00:04:24.798 --> 00:04:29.635
And we enhance the dispatch to say always
is a function, call the function and

72
00:04:29.635 --> 00:04:32.175
let it actually dispatch more things.

73
00:04:32.175 --> 00:04:38.995
So could we theoretically create
something like const useundoReducer.

74
00:04:38.995 --> 00:04:45.236
That would take a normal reducer
that just does the normal stuff.

75
00:04:45.236 --> 00:04:49.569
And given all that time travel ability.

76
00:04:49.569 --> 00:04:54.365
So now, you can take any reducer in your
application instead of using useReducer

77
00:04:54.365 --> 00:04:59.720
we'll use undoReducer, and it will handle
all of the kind of back and forth as well.

78
00:04:59.720 --> 00:05:05.380
So in order to do that, we know that it
should have the same API as useReducer.

79
00:05:05.380 --> 00:05:08.913
So I will have reducer and initial state.

80
00:05:12.062 --> 00:05:18.023
And we know that it's going to eventually
gonna wanna return something very similar,

81
00:05:18.023 --> 00:05:21.970
so we'll actually start out with return,
useReducer.

82
00:05:21.970 --> 00:05:23.880
Again this is at noop,
we're gonna have to fix this.

83
00:05:25.670 --> 00:05:27.876
Nope, I want useReducer,
listen to me, I know what I'm doing.

84
00:05:30.666 --> 00:05:32.111
All right, well we'll do the reducer.

85
00:05:35.910 --> 00:05:37.180
State.

86
00:05:37.180 --> 00:05:40.300
All right, we're not actually
gonna return these two values.

87
00:05:40.300 --> 00:05:42.280
What we're going to do is,

88
00:05:43.370 --> 00:05:45.830
we're gonna return a reducer
that's gonna get all of these.

89
00:05:47.040 --> 00:05:49.162
We're gonna put it in our
own special reducers,

90
00:05:49.162 --> 00:05:50.828
it's gonna catch the actions first.

91
00:05:50.828 --> 00:05:55.684
It's gonna do all the moving of
the present, and the past, and the future.

92
00:05:55.684 --> 00:05:59.230
And then they can pass on a function for
what the actual logic.

93
00:05:59.230 --> 00:06:00.550
Like, how do you add a grudge?

94
00:06:00.550 --> 00:06:01.840
How do you toggle forgiveness?

95
00:06:01.840 --> 00:06:05.141
So we'll separate the aspect
of the time travel part,

96
00:06:05.141 --> 00:06:08.100
from the actual changing
of the business logic.

97
00:06:08.100 --> 00:06:10.688
And you'll be able to
use this useundoReducer,

98
00:06:10.688 --> 00:06:16.170
wherever you wanna have the ability
to undo and redo in this case.

99
00:06:18.240 --> 00:06:24.500
So, they're gonna pass in initialState,
cuz whoever

100
00:06:24.500 --> 00:06:27.950
uses this does not need to know anything
about anything we just talked about.

101
00:06:27.950 --> 00:06:31.720
That is a secret for all of us,
everyone in the live stream and

102
00:06:31.720 --> 00:06:33.640
anyone who watches this course.

103
00:06:33.640 --> 00:06:34.330
Right?

104
00:06:34.330 --> 00:06:35.310
It is our secret.

105
00:06:35.310 --> 00:06:36.530
We don't have to tell anyone about it.

106
00:06:36.530 --> 00:06:39.250
It will just give them useundoReducer.

107
00:06:39.250 --> 00:06:42.396
So, what do you need our own
special version of state,

108
00:06:42.396 --> 00:06:46.480
we'll call it undoState which
is going to be the past.

109
00:06:47.690 --> 00:06:50.580
The present will be whatever
initial state they gave us.

110
00:06:52.530 --> 00:06:56.370
And the future will be an array.

111
00:06:56.370 --> 00:06:59.168
Very similar to what we had before.

112
00:06:59.168 --> 00:07:00.612
All right,
now we'll make a special reducer.

113
00:07:06.724 --> 00:07:09.205
So we are underReducer which
will be state and an action.

114
00:07:14.145 --> 00:07:15.965
And this is where
the secret sauce happens.

115
00:07:15.965 --> 00:07:20.785
To find out what the new present is
going to be, we'll call their reducer.

116
00:07:20.785 --> 00:07:25.970
Cuz whoever he is this reducers in charge
of the business logic, this abstractions,

117
00:07:25.970 --> 00:07:29.540
only java is to shuffle between the past,
present and future.

118
00:07:29.540 --> 00:07:32.930
So we'll say, const newPresent.

119
00:07:35.630 --> 00:07:40.150
Is whatever reducer they gave us,
with the same state and the same action.

120
00:07:40.150 --> 00:07:43.160
Cuz they're gonna handle all of
the forgiveness adding, whatever.

121
00:07:43.160 --> 00:07:45.360
So we'll get that newPresent
out of their reducer.

122
00:07:46.600 --> 00:07:50.920
And we only care about
these kind of special ones.

123
00:07:50.920 --> 00:07:54.620
So we'll say, if the action type is UNDO,

124
00:07:54.620 --> 00:07:56.990
and this is very similar
from what we had before.

125
00:07:56.990 --> 00:08:00.636
We will say, in fact,
I wonder if I can just copy and paste it.

126
00:08:00.636 --> 00:08:01.136
We'll see.

127
00:08:04.585 --> 00:08:05.300
I bet not.

128
00:08:05.300 --> 00:08:06.854
I'm writing this in application, so

129
00:08:06.854 --> 00:08:08.900
I am gonna need to move
this function at one point.

130
00:08:08.900 --> 00:08:09.420
Let's do that now.

131
00:08:11.240 --> 00:08:12.160
Let's do it.
Like honestly,

132
00:08:12.160 --> 00:08:13.640
this should be its own file,

133
00:08:13.640 --> 00:08:18.080
we're going to do in grudge context, just
because that's where everything else is.

134
00:08:18.080 --> 00:08:19.810
So we kinda do it up top here.

135
00:08:22.050 --> 00:08:26.045
If the action is UNDO, and honestly
we can take our UNDO or REDO logic,

136
00:08:26.045 --> 00:08:28.230
cuz all it is doing is that shuffling.

137
00:08:28.230 --> 00:08:30.781
So we could just take this wholesale.

138
00:08:30.781 --> 00:08:34.861
And we could rip that right out.

139
00:08:34.861 --> 00:08:37.757
And we can move it out
into our undoReducer.

140
00:08:40.355 --> 00:08:42.579
Great.

141
00:08:42.579 --> 00:08:45.680
And so if UNDO or REDO.

142
00:08:45.680 --> 00:08:49.610
Otherwise, if it wasn't an UNDO action and
it wasn't a REDO action,

143
00:08:50.950 --> 00:08:55.470
then we already have the new present
cuz we called their producer.

144
00:08:55.470 --> 00:09:00.640
So we say that the past is state.present,
state.past.

145
00:09:03.220 --> 00:09:07.950
The present is the newPresent
we got from their's.

146
00:09:10.190 --> 00:09:11.508
And the future is unwritten.

147
00:09:15.310 --> 00:09:19.336
So now, what we're gonna do is we're
just going to turn this back in,

148
00:09:19.336 --> 00:09:22.195
basically gonna undo
everything that we did.

149
00:09:22.195 --> 00:09:24.310
Cuz now we just want a regular reducer,

150
00:09:24.310 --> 00:09:28.860
we wanna hide all of this
from the person using it.

151
00:09:28.860 --> 00:09:29.360
So.

152
00:09:31.415 --> 00:09:32.830
If it's a grudge add.

153
00:09:32.830 --> 00:09:34.487
In fact, we could just cheat.

154
00:09:37.700 --> 00:09:38.824
That feels wrong.

155
00:09:38.824 --> 00:09:42.743
Let's actually put everything
back the way it was.

156
00:09:42.743 --> 00:09:47.220
Somebody's job is to make sure I don't
forget to remove a present at some point.

157
00:09:47.220 --> 00:09:48.198
I'll show you what I mean in a second.

158
00:09:48.198 --> 00:09:51.880
See that state.present?

159
00:09:51.880 --> 00:09:55.390
It's just, this reducer is
exactly what we had before.

160
00:09:55.390 --> 00:09:57.570
undoReducer will handle
all of the shuffling,

161
00:09:57.570 --> 00:09:59.640
we're just putting stuff
back the way we found it.

162
00:10:01.690 --> 00:10:03.421
And so newPresent will simply be this.

163
00:10:07.470 --> 00:10:08.359
And we'll just.

164
00:10:16.476 --> 00:10:22.413
The other thing we need to do is,
I wanna return my special undoReducer.

165
00:10:24.753 --> 00:10:26.448
And my special undoState.

166
00:10:29.718 --> 00:10:32.540
So their reducer just handles the present.

167
00:10:32.540 --> 00:10:38.900
It only does how to change the present,
but before that, we intercept it,

168
00:10:38.900 --> 00:10:45.520
we get their newPresent, we populate the
past, the present and the future for them.

169
00:10:45.520 --> 00:10:49.150
So barring some kind of mistake,

170
00:10:49.150 --> 00:10:52.710
which could happen cuz I did
a lot of refactoring there.

171
00:10:53.720 --> 00:10:54.317
See, I forgot one.

172
00:10:59.174 --> 00:11:02.415
We should be able to go ahead,
and we'll do this.

173
00:11:06.965 --> 00:11:08.713
Use.

174
00:11:12.934 --> 00:11:15.850
That should all theoretically work.

175
00:11:17.765 --> 00:11:20.120
UseReducer is not defined in application.

176
00:11:20.120 --> 00:11:24.929
That was that code that
I had to get rid of.

177
00:11:24.929 --> 00:11:25.752
Save that file.

178
00:11:25.752 --> 00:11:30.643
grudges.map is not a function.

179
00:11:34.030 --> 00:11:39.240
Let's go in Grudges.js, there's
probably something slightly off there.

180
00:11:39.240 --> 00:11:41.080
Let's just see what it is real quick.

181
00:11:41.080 --> 00:11:43.820
I'm passing it this broken default so
when I give initial state,

182
00:11:43.820 --> 00:11:45.710
again is what I think it probably is.

183
00:11:47.190 --> 00:11:48.510
Yup.

184
00:11:48.510 --> 00:11:50.430
And so when we made that past,
present, future like.

185
00:11:51.590 --> 00:11:56.380
Our reducer, we put it back to
exactly the way things were before.

186
00:11:56.380 --> 00:11:57.990
It knows nothing about UNDO and REDO.

187
00:12:00.012 --> 00:12:02.613
The useundoReducer knows nothing
about how to change the present.

188
00:12:02.613 --> 00:12:06.297
It only knows how to shuffle those states.

189
00:12:06.297 --> 00:12:08.950
So now now it has this like again,
that same kind of theme,

190
00:12:08.950 --> 00:12:12.578
which is how do we take things that are
coupled together and decouple them, so we

191
00:12:12.578 --> 00:12:16.573
can kinda use them interchangeably, which
allows you to ship code a lot faster.

192
00:12:16.573 --> 00:12:17.073
Whoop.

193
00:12:20.006 --> 00:12:21.975
I don't actually need to
follow state anymore.

194
00:12:21.975 --> 00:12:24.160
Yup, so just gotta clean some stuff up.

195
00:12:24.160 --> 00:12:25.367
This is now back to initialState.

196
00:12:30.857 --> 00:12:31.946
Great, so we'll hit Forgiven.

197
00:12:35.231 --> 00:12:41.780
So state.map is not a function.

198
00:12:42.850 --> 00:12:47.127
Let's go

199
00:12:47.127 --> 00:12:53.007
find out what

200
00:12:53.007 --> 00:13:00.494
state.map is.

201
00:13:03.688 --> 00:13:05.995
So we've got the past,
present and the future.

202
00:13:05.995 --> 00:13:10.415
I think what I need to do is, the issue
here is when I say the new president

203
00:13:10.415 --> 00:13:13.745
giving them all the state, I only want
to give them access to the present.

204
00:13:13.745 --> 00:13:18.085
Cuz all their producer knows
about is the present, ours like,

205
00:13:18.085 --> 00:13:19.695
we're trying to hide that from them.

206
00:13:19.695 --> 00:13:26.240
If we don't, things will Forgiven,
undo, redo, right?

207
00:13:26.240 --> 00:13:31.760
So now, anyone can write a regular
old reducer if they use undo reducer

208
00:13:31.760 --> 00:13:36.990
instead of use reducer, they get undo
redo functionality for free, right?

209
00:13:36.990 --> 00:13:41.067
They don't have to think about it, we can
now use it anywhere in our application,

210
00:13:41.067 --> 00:13:42.733
we will wanna have undo and redo.

211
00:13:42.733 --> 00:13:45.780
Which is super cool to think
about these abstractions.

212
00:13:45.780 --> 00:13:51.646
Like, my boss has a wonderful
sticker in his office, and it said.

213
00:13:53.125 --> 00:13:57.164
A week of coding saved
us an hour of planning.

214
00:13:57.164 --> 00:14:01.897
&gt;&gt; [LAUGH]
&gt;&gt; And so I think that that applies,

215
00:14:01.897 --> 00:14:05.898
thinking how do we break that apart?

216
00:14:05.898 --> 00:14:10.672
How do we take something that is two or
three features all together and

217
00:14:10.672 --> 00:14:11.918
reusable parts.

218
00:14:11.918 --> 00:14:14.540
So we were able to ship
features really fast,

219
00:14:14.540 --> 00:14:17.510
again by thinking about the state and
how it works.

