WEBVTT

1
00:00:00.320 --> 00:00:04.380
So the context API, this is from the docs,

2
00:00:04.380 --> 00:00:07.330
it's a way to pass data through
the component tree without having to pass

3
00:00:07.330 --> 00:00:09.730
the props down manually
through every level.

4
00:00:09.730 --> 00:00:12.400
That is solving that
problem we talked about

5
00:00:12.400 --> 00:00:15.700
with the very simple example in
the grudges and the much more complicated

6
00:00:15.700 --> 00:00:19.010
example I showed on the screen
mostly to just stress you out.

7
00:00:19.010 --> 00:00:21.219
In fact,
that wasn't even all the components.

8
00:00:21.219 --> 00:00:25.090
There were more drop downs and stuff but
my PowerPoint slide was only so big.

9
00:00:25.090 --> 00:00:27.810
So I could have made it all smaller
to make it more stressful, but

10
00:00:27.810 --> 00:00:28.880
I think I got the point across.

11
00:00:30.290 --> 00:00:33.210
So the context API just basically
gives you this kind of thread

12
00:00:33.210 --> 00:00:34.440
that anything can tap into.

13
00:00:34.440 --> 00:00:37.768
Now, you're going to have these
self-contained components that can be

14
00:00:37.768 --> 00:00:39.325
rearranged and moved anywhere and

15
00:00:39.325 --> 00:00:43.208
will automatically hook into our state
management, which is incredibly powerful.

16
00:00:43.208 --> 00:00:46.398
And we will get some
tradeoffs along the way.

17
00:00:46.398 --> 00:00:50.579
So just like we had use reducer and
all those things, and memo, and

18
00:00:50.579 --> 00:00:53.727
use callback,
they're all on the react object.

19
00:00:53.727 --> 00:01:00.390
The ability to create a context
is in react.createContext.

20
00:01:00.390 --> 00:01:03.420
Now, there will be a little tricky
part that we have to talk about,

21
00:01:03.420 --> 00:01:08.700
which is when you call that,
you get two components, right?

22
00:01:08.700 --> 00:01:12.310
You get a provider component and
you get a consumer component.

23
00:01:12.310 --> 00:01:15.339
And this will get a little worse because
we also use a pattern where we call

24
00:01:15.339 --> 00:01:16.639
another component provider.

25
00:01:16.639 --> 00:01:19.610
I will try to walk us through
it as best as possible.

26
00:01:19.610 --> 00:01:20.960
But that is the general convention.

27
00:01:20.960 --> 00:01:23.164
I could like lie to you and
make it seem different,

28
00:01:23.164 --> 00:01:27.222
but I'm .we're gonna talk about how you
normally will see it in the real world.

29
00:01:27.222 --> 00:01:30.892
So when you call, that you'll get out
two components, provider and consumer.

30
00:01:30.892 --> 00:01:32.312
If you are using hooks,

31
00:01:32.312 --> 00:01:35.112
you can probably get away with
never even touching the consumer.

32
00:01:35.112 --> 00:01:38.891
I'll show you an example pre hooks
where you would use the consumer using

33
00:01:38.891 --> 00:01:40.511
the render pattern.

34
00:01:40.511 --> 00:01:42.441
But here's an example more in code,

35
00:01:42.441 --> 00:01:45.651
which is we can bring in react
we can call react.createContext.

36
00:01:45.651 --> 00:01:48.421
And you can say they
are properties of the context.

37
00:01:48.421 --> 00:01:51.216
They're components in their own right.

38
00:01:51.216 --> 00:01:56.878
And how this works is you've gotta provide
a component that gets a value as a prompt,

39
00:01:56.878 --> 00:01:57.449
right?

40
00:01:57.449 --> 00:02:00.850
And this is pre hooks, we'll actually
it see with hooks in a second.

41
00:02:00.850 --> 00:02:05.320
And then any child component
anywhere in that component tree,

42
00:02:05.320 --> 00:02:10.260
they can call the consumer component,
and they'll have access to that value.

43
00:02:10.260 --> 00:02:13.640
You'll see as this render prop pattern,
which if you've never seen before,

44
00:02:13.640 --> 00:02:16.310
it's basically the idea is
the child is a function

45
00:02:16.310 --> 00:02:18.980
that gets the data that
you can then use it.

46
00:02:18.980 --> 00:02:20.978
We won't actually see this
cuz we're gonna use hooks.

47
00:02:20.978 --> 00:02:25.010
And there's a use context hook that
basically hides this all from you.

48
00:02:25.010 --> 00:02:29.386
But generally speaking, you will get
anything that you pass as the value,

49
00:02:29.386 --> 00:02:33.013
as a prop, will be available
anywhere in the component tree.

50
00:02:33.013 --> 00:02:34.776
This can get a little tricky though.

51
00:02:34.776 --> 00:02:37.320
Because you'll notice that
that is simply a prop.

52
00:02:37.320 --> 00:02:40.230
It has no state management of itself,
right?

53
00:02:40.230 --> 00:02:43.400
And so the way that we're gonna handle
this is we're gonna take that provider and

54
00:02:43.400 --> 00:02:46.490
we're going to hug it with
some state management, right?

55
00:02:46.490 --> 00:02:50.000
And that state management the value, if
it was account, it would be the count or

56
00:02:50.000 --> 00:02:53.660
the list of grudges, or all those things
will get passed in as the value so

57
00:02:53.660 --> 00:02:58.140
they'll kind of be another component
sitting above this that hugs the provider.

58
00:02:58.140 --> 00:03:00.941
Does all this state management and
then passes the result into the provider,

59
00:03:00.941 --> 00:03:02.591
which then can give it
to the rest of the tree.

60
00:03:04.892 --> 00:03:07.260
So this is what it might
look like with a counter.

61
00:03:07.260 --> 00:03:10.680
And this is that hugging provider
pattern that I talked about before.

62
00:03:10.680 --> 00:03:14.410
And what I don't love, but
I don't make the rules,

63
00:03:14.410 --> 00:03:16.990
my job is just to tell you about them,
is that typically,

64
00:03:16.990 --> 00:03:21.430
you'll notice that the state
management is called CountProvider.

65
00:03:21.430 --> 00:03:25.610
And it calls the CountContext
provider below, right?

66
00:03:25.610 --> 00:03:27.710
It is basically all the state management.

67
00:03:27.710 --> 00:03:31.140
And then whatever happens then
gets passed in as a value.

68
00:03:31.140 --> 00:03:32.880
If this stresses you out right now,
it is okay.

69
00:03:32.880 --> 00:03:35.160
When we actually implement it, right?

70
00:03:35.160 --> 00:03:36.000
It'll be a little clearer.

71
00:03:36.000 --> 00:03:38.730
What I wanna do is kind of
set the mental context now.

72
00:03:38.730 --> 00:03:42.690
And then we'll get a little bit
deeper into it as as we implement.

73
00:03:42.690 --> 00:03:45.190
Because the value prop is simply a prop.

74
00:03:45.190 --> 00:03:47.030
So we just have a component above it.

75
00:03:47.030 --> 00:03:50.880
They'll handle all of the adding,
removing of grudges, the forgiving,

76
00:03:50.880 --> 00:03:54.195
the not forgiving, and
then passing those in through the tree.

77
00:03:54.195 --> 00:03:58.348
All right, so what we're going to do
is we're going to take our current

78
00:03:58.348 --> 00:04:01.412
implementation, and
we're going to refactor it.

79
00:04:01.412 --> 00:04:05.901
And the end goal that we're trying to get
to is to make it so that this grudges does

80
00:04:05.901 --> 00:04:10.500
not have to take it from the application
and pass it to the individual grudge.

81
00:04:10.500 --> 00:04:13.250
Because if we're using
the context API correctly,

82
00:04:13.250 --> 00:04:17.610
any given component can get
access to either all the grudges,

83
00:04:17.610 --> 00:04:21.660
the ability to add a grudge, or the
ability to forgive a given grudge, right?

84
00:04:21.660 --> 00:04:24.080
And so if we wanted to add like
the ability to add another grad from

85
00:04:24.080 --> 00:04:27.170
an individual grudge, like, hey, all that
functionality is available everywhere.

86
00:04:27.170 --> 00:04:28.840
We don't need to thread it
through the proper tree.

87
00:04:28.840 --> 00:04:31.580
And again, we have a very simple example.

88
00:04:31.580 --> 00:04:34.062
But most examples will have many children.

89
00:04:34.062 --> 00:04:41.210
And you think about current user,
Ends up being needed everywhere, right?

90
00:04:41.210 --> 00:04:43.070
Should you show them a delete
button on the tweet?

91
00:04:43.070 --> 00:04:44.464
Is it their tweet, right?

92
00:04:44.464 --> 00:04:47.314
You kind of need stuff like that
everywhere and those become the most

93
00:04:47.314 --> 00:04:50.368
pervasive ones that end up needing to
be thread through the entire tree.

94
00:04:50.368 --> 00:04:53.107
In those cases, we'd make a user contacts.

95
00:04:53.107 --> 00:04:55.934
And we'd have any component that
needs to know about the current

96
00:04:55.934 --> 00:04:58.094
user be able to hook into that context and
get it.

97
00:04:58.094 --> 00:05:00.781
And the ones that don't do not
have start passing stuff along.

98
00:05:00.781 --> 00:05:04.254
Right?
So this is kind of a microcosm that lets

99
00:05:04.254 --> 00:05:06.066
us think about that.

100
00:05:06.066 --> 00:05:09.750
All right, so
our goal is to get this out of Grudges.

101
00:05:09.750 --> 00:05:14.530
Now, this will start out with a certain
amount of moving code around,

102
00:05:14.530 --> 00:05:16.080
which is pretty great.

103
00:05:16.080 --> 00:05:20.217
So we're gonna make a new file,

104
00:05:20.217 --> 00:05:24.363
we'll call it grudge context.

105
00:05:27.675 --> 00:05:30.915
And we're gonna take all
of our state management and

106
00:05:30.915 --> 00:05:33.910
move it out into this context, right?

107
00:05:33.910 --> 00:05:35.986
So that'll start out
with pulling in react.

108
00:05:44.980 --> 00:05:49.043
UseReducer cuz we're gonna take our
current implementation of state and

109
00:05:49.043 --> 00:05:50.120
just use it.

110
00:05:50.120 --> 00:05:55.580
So we'll pull on useReducer then
createContext and use callback.

111
00:05:55.580 --> 00:06:00.104
Use callback is going to end up
being pointless, spoiler alert, but

112
00:06:00.104 --> 00:06:03.388
I just wanna be able to copy and
paste code for now.

113
00:06:03.388 --> 00:06:09.179
But I want to leave it in there so
you can see it not do its thing.

114
00:06:09.179 --> 00:06:12.140
Cool, so let's actually do a little
bit of copy paste action here.

115
00:06:12.140 --> 00:06:15.700
We can grab initial state in the ID.

116
00:06:17.480 --> 00:06:21.030
Cuz application's no
longer gonna even think,

117
00:06:21.030 --> 00:06:22.800
none of this is gonna
live in here anymore.

118
00:06:22.800 --> 00:06:25.700
So we'll grab these two dependencies.

119
00:06:25.700 --> 00:06:28.876
We'll grab our action types,
we'll grab our reducer, and

120
00:06:28.876 --> 00:06:31.623
we're gonna take all of that out and
pull it with us.

121
00:06:36.333 --> 00:06:41.237
We'll see how the actual componentry
is gonna end up being a lot cleaner

122
00:06:41.237 --> 00:06:42.062
at the end.

123
00:06:42.062 --> 00:06:46.048
And this is ultimately a maintainability
play that we're doing here.

124
00:06:46.048 --> 00:06:48.002
So paste this all in, right?

125
00:06:48.002 --> 00:06:51.602
And in a more complicated application,
would you maybe break the reducer out,

126
00:06:51.602 --> 00:06:55.540
if it was very complicated, into its own
Reducer.js, you'd break the actions out?

127
00:06:55.540 --> 00:06:58.870
Yeah, probably.

128
00:06:58.870 --> 00:07:00.500
So we'll do this as well.

129
00:07:00.500 --> 00:07:06.812
And then we're also going to grab
an application, all of these methods here.

130
00:07:12.268 --> 00:07:16.277
Now, the application is not gonna run for
a little bit as we conduct our open

131
00:07:16.277 --> 00:07:19.280
heart surgery on this application,
but that's okay.

132
00:07:19.280 --> 00:07:22.010
So the application is
already shrunk down a lot.

133
00:07:22.010 --> 00:07:25.990
It's actually going to get
even lighter momentarily.

134
00:07:25.990 --> 00:07:30.071
Actually, hold on,
I need that, Top line, as well.

135
00:07:33.420 --> 00:07:34.781
So we'll grab all that.

136
00:07:34.781 --> 00:07:37.355
Because we're going to pull
this out of application and

137
00:07:37.355 --> 00:07:41.330
put it in that kind of hugging provider
component that we talked about before.

138
00:07:41.330 --> 00:07:42.760
And then any component that needs this,

139
00:07:42.760 --> 00:07:46.780
because application itself
doesn't need any of this state.

140
00:07:46.780 --> 00:07:49.460
Application doesn't need
to know about the grudges.

141
00:07:49.460 --> 00:07:51.117
It doesn't need to know about add grudge,

142
00:07:51.117 --> 00:07:53.107
it doesn't need to know
about forgiving a grudge.

143
00:07:53.107 --> 00:07:56.100
It was only there cuz it was
the topmost part of the pyramid.

144
00:07:56.100 --> 00:07:58.068
So it had to do with the coordination,
right?

145
00:07:58.068 --> 00:08:01.381
By pulling it out into the context where
any of the components that need this stuff

146
00:08:01.381 --> 00:08:04.028
can use it, we don't need to keep
it in an application, right?

147
00:08:04.028 --> 00:08:05.651
So application is going to get very tiny.

148
00:08:05.651 --> 00:08:08.937
And we begin to think about our
UI as the individual pieces and

149
00:08:08.937 --> 00:08:10.750
how we want to arrange them.

150
00:08:10.750 --> 00:08:13.375
Less about, okay,
where do I have to put all the state and

151
00:08:13.375 --> 00:08:14.647
kind of thread it through?

152
00:08:14.647 --> 00:08:19.185
This idea of separating out our state
management from our react application,

153
00:08:19.185 --> 00:08:22.700
I think is really, really key for
a maintainable code base.

154
00:08:22.700 --> 00:08:24.240
So we'll start by ripping that out.

155
00:08:25.400 --> 00:08:26.908
And we gonna move that in here as well.

156
00:08:26.908 --> 00:08:32.523
And what I'm gonna do is I'm gonna
say export const GrudgeProvider.

157
00:08:34.702 --> 00:08:36.185
This is just a component.

158
00:08:40.289 --> 00:08:42.723
We'll start just by
pasting all of that in.

159
00:08:42.723 --> 00:08:44.906
Right, so it's got the reducer.

160
00:08:44.906 --> 00:08:48.937
It's got these action dispatchers.

161
00:08:48.937 --> 00:08:51.714
These are just functions that
format the dispatch, right?

162
00:08:51.714 --> 00:08:55.561
Could you theoretically just call
dispatch and dispatch these obects?

163
00:08:55.561 --> 00:09:00.917
Totally, but if you flub any of this,
it'll just not do things.

164
00:09:00.917 --> 00:09:03.981
And so we make a function
that generates the objects so

165
00:09:03.981 --> 00:09:06.580
that we are less likely
to mess them up later.

166
00:09:06.580 --> 00:09:09.470
This is mostly us protecting
us from ourselves.

167
00:09:09.470 --> 00:09:12.706
You could theoretically just call dispatch
anywhere in the application as well.

168
00:09:12.706 --> 00:09:15.680
And later we'll kinda see
something like that as well.

169
00:09:15.680 --> 00:09:20.300
But we only make these functions to make
it a little bit easier for ourselves.

170
00:09:20.300 --> 00:09:22.678
Great, so we've got that in place.

171
00:09:27.020 --> 00:09:30.482
So now what we wanna do is right now,
there's only the functions and

172
00:09:30.482 --> 00:09:32.200
the using of the reducer in here.

173
00:09:33.400 --> 00:09:35.040
So we've got all of that in place.

174
00:09:35.040 --> 00:09:43.458
What we need to do now is,
We'll return that provider.

175
00:09:43.458 --> 00:09:46.388
We actually haven't made the context yet,
so let's go back up and do that.

176
00:09:46.388 --> 00:09:50.517
So we'll just say const

177
00:09:50.517 --> 00:09:57.128
GrudgeContext with createContext.

178
00:09:57.128 --> 00:09:57.696
Nope.

179
00:10:02.605 --> 00:10:05.435
And so again, that gave us,
actually, I think if I type it here,

180
00:10:05.435 --> 00:10:07.447
you'll see VS Code auto-complete it for
me.

181
00:10:10.245 --> 00:10:13.480
All right, you can see,
I have the consumer and the provider.

182
00:10:13.480 --> 00:10:16.510
Consumer, because we're gonna use a hook,
again, is gonna be hidden from us.

183
00:10:16.510 --> 00:10:18.770
Provider is gonna be the one
that we end up using.

184
00:10:19.820 --> 00:10:25.715
So here we're just going to
return Grudgecontext.Provider.

185
00:10:28.270 --> 00:10:32.470
And we want to then render any of
the children handed to us, right?

186
00:10:32.470 --> 00:10:35.830
So the child components that come in
are available as a prop called children.

187
00:10:36.940 --> 00:10:37.879
So we'll grab those.

188
00:10:40.770 --> 00:10:43.730
And again, all we're doing right
now is taking the state management

189
00:10:43.730 --> 00:10:46.990
that was an application that didn't
actually need to own any of it because it

190
00:10:46.990 --> 00:10:47.810
doesn't care about any of it.

191
00:10:47.810 --> 00:10:52.280
And we pointed out to this separate
component totally separate from our UI.

192
00:10:54.140 --> 00:10:57.880
So we're gonna say, hey, we now have
this grudge provider component.

193
00:10:57.880 --> 00:11:01.992
And all it's gonna do is take
our state management pieces,

194
00:11:01.992 --> 00:11:07.102
the ability to shoot it down the component
tree to anything that needs it.

195
00:11:07.102 --> 00:11:08.320
And then render whatever.

196
00:11:10.500 --> 00:11:14.190
So all of our state management
now is completely separated out.

197
00:11:14.190 --> 00:11:16.144
Now, we need to give it that value, and

198
00:11:16.144 --> 00:11:19.958
so I'm gonna give it an object because
we can only pass in one value, right?

199
00:11:19.958 --> 00:11:24.680
In that example I showed you on the slide,
it was zero, or one, or two, or whatever.

200
00:11:24.680 --> 00:11:27.790
The value I'm gonna give it is here's
an object, it's got the grudges,

201
00:11:27.790 --> 00:11:30.330
the ability to add a grudge and
the ability to toggle forgiveness.

202
00:11:30.330 --> 00:11:33.570
Anyone in the component tree that
needs any of those things, go grab it.

203
00:11:33.570 --> 00:11:35.690
We're gonna make it
available to all of you.

204
00:11:35.690 --> 00:11:38.150
So we'll just say,
I'll call it my const value.

205
00:11:39.480 --> 00:11:42.095
I could do it inline too.

206
00:11:42.095 --> 00:11:44.820
I'll actually show you the difference.

207
00:11:44.820 --> 00:11:48.990
So I'll just say, okay,
we've got the grudges.

208
00:11:48.990 --> 00:11:51.498
We've got addGrudge and,

209
00:11:57.166 --> 00:12:03.651
And we pass it in here,
this value equals that value.

210
00:12:03.651 --> 00:12:10.572
Could you theoretically just do it inline,
Like that?

211
00:12:10.572 --> 00:12:11.751
Yes, you could.

212
00:12:11.751 --> 00:12:14.447
The big question is, one,
how many things are you passing in?

213
00:12:14.447 --> 00:12:17.843
And two, one time, I forgot that I
needed two sets of curly braces,

214
00:12:17.843 --> 00:12:20.118
one to use JavaScript and
one for the object.

215
00:12:20.118 --> 00:12:24.174
And I lost 20 minutes of my life,
and I have the scar tissue there,

216
00:12:24.174 --> 00:12:26.080
I'll never do it again.

217
00:12:26.080 --> 00:12:28.430
So some of that is the fact
that I am broken as a person.

218
00:12:28.430 --> 00:12:30.950
It's up to you,
if you would rather just pass it in line,

219
00:12:30.950 --> 00:12:31.930
there's nothing stopping you.

220
00:12:31.930 --> 00:12:33.600
It's not the Steve said you had
to do it like that, he didn't.

221
00:12:33.600 --> 00:12:35.133
He did not say that.

222
00:12:35.133 --> 00:12:37.551
Don't put words in my mouth.

223
00:12:37.551 --> 00:12:38.213
So there it is.

224
00:12:38.213 --> 00:12:39.331
So now we have this ability.

225
00:12:39.331 --> 00:12:43.843
Anything that is a child of GrudgePeovider
can use the use context hook and

226
00:12:43.843 --> 00:12:46.119
hook into any of these three things.

227
00:12:46.119 --> 00:12:49.207
We have an obvious problem right now,
which is nothing is a child and

228
00:12:49.207 --> 00:12:50.085
GrudgeProvider.

229
00:12:50.085 --> 00:12:53.513
Cut it's just a component we wrote
on a file we didn't use, right?

230
00:12:53.513 --> 00:12:55.841
This is an easily solvable problem, but

231
00:12:55.841 --> 00:12:58.721
it is still a problem that
we need to easily solve.

232
00:12:58.721 --> 00:13:02.467
So one way that we can handle
this is we can go to index and

233
00:13:02.467 --> 00:13:04.672
just wrap application in this.

234
00:13:10.309 --> 00:13:18.264
Right, and so now, We'll go ahead and

235
00:13:18.264 --> 00:13:23.895
we'll just wrap the entire application,
In GrudgeProvider.

236
00:13:28.734 --> 00:13:32.000
So now anything in the application
can hook into that context and

237
00:13:32.000 --> 00:13:32.907
get it anywhere,

238
00:13:32.907 --> 00:13:36.730
which means application does not need
to hold on to any of this stuff for us.

239
00:13:36.730 --> 00:13:39.864
It's available anywhere from
the components that need it.

