WEBVTT

1
00:00:00.130 --> 00:00:05.700
I kind of alluded in the last section
that useState is great and it works.

2
00:00:05.700 --> 00:00:08.822
But it's also relatively simple,

3
00:00:08.822 --> 00:00:14.439
where you get a brand new value,
and also a brand new function for

4
00:00:14.439 --> 00:00:20.077
setting that value to its next
one to trigger out the rerenders.

5
00:00:20.077 --> 00:00:23.210
It's one of those things where most
of the time, that's all you need.

6
00:00:23.210 --> 00:00:25.350
Some of the time, though,
it's not what you need.

7
00:00:25.350 --> 00:00:29.093
Sometimes you need to do something a
little bit more complicated, which again,

8
00:00:29.093 --> 00:00:30.700
we'll see as this course goes on.

9
00:00:30.700 --> 00:00:34.101
But also this idea that we
get a brand new function for

10
00:00:34.101 --> 00:00:38.055
setting it every time is going
to trigger a lot of rerenders.

11
00:00:38.055 --> 00:00:41.233
Because it's a brand new function which
means we can necessarily mentalize it or

12
00:00:41.233 --> 00:00:42.410
anything along those lines.

13
00:00:42.410 --> 00:00:45.126
We're getting new stuff every single time.

14
00:00:45.126 --> 00:00:49.600
And so we have seen prior to hooks
existing at all that there have

15
00:00:49.600 --> 00:00:52.880
been other ways of managing state
other than just setting it, right?

16
00:00:52.880 --> 00:00:57.363
So Redux, for instance,
gave us this idea of having a reducer that

17
00:00:57.363 --> 00:01:01.057
everything goes into and
new stuff comes out, right?

18
00:01:01.057 --> 00:01:05.006
And that was kind of based on flux, which
is another way to say things happened and

19
00:01:05.006 --> 00:01:07.480
you would modify some states.

20
00:01:07.480 --> 00:01:11.541
React these days has useReducer on
top of useState, on top of useEffect,

21
00:01:11.541 --> 00:01:15.610
there is useReducer, which basically
allows you to take a simplified version,

22
00:01:15.610 --> 00:01:21.550
what you might find in Redux and
just have it available to you in React.

23
00:01:21.550 --> 00:01:24.630
Now, emphasis on the word simplified,
right?

24
00:01:24.630 --> 00:01:26.504
Again, it's one of those 80/20 things,
right?

25
00:01:26.504 --> 00:01:29.669
It does 80% of what Redux does.

26
00:01:29.669 --> 00:01:33.474
The other 20% can be a little
bit difficult to implement, and

27
00:01:33.474 --> 00:01:35.809
we'll implement some of that as well.

28
00:01:35.809 --> 00:01:40.020
So there's a certain point of, does this
mean I never have to use Redux again?

29
00:01:41.210 --> 00:01:43.613
I don't know, right, maybe, right?

30
00:01:43.613 --> 00:01:47.097
We still use Redux on
purpose of tutorial for

31
00:01:47.097 --> 00:01:52.070
reasons that I will kind of
talk about as we go through.

32
00:01:52.070 --> 00:01:56.430
But for simple cases, I don't know if
I'd immediately pull in Redux as fast.

33
00:01:56.430 --> 00:01:59.490
So like most things, it depends.

34
00:01:59.490 --> 00:02:01.170
All right, so
we're gonna look at the next app,

35
00:02:01.170 --> 00:02:06.570
which is this idea of grudge list, which
is definitely not a to-do list at all.

36
00:02:06.570 --> 00:02:08.810
Cuz to-do lists are boring.

37
00:02:10.790 --> 00:02:16.203
This is just a list for keeping
track of people who have wronged me.

38
00:02:16.203 --> 00:02:21.570
[COUGH] And you can see that there's no
ability to remove anyone from the list.

39
00:02:21.570 --> 00:02:24.840
They can be forgiven, but
they cannot be forgotten, right?

40
00:02:24.840 --> 00:02:27.200
So they stay on the list no matter what.

41
00:02:27.200 --> 00:02:29.450
You'll notice that this one does
not persist to local storage.

42
00:02:29.450 --> 00:02:32.319
I'll leave that as an exercise for
the reader.

43
00:02:32.319 --> 00:02:36.908
But they stay on the list and
I can theoretically add a new grudge,

44
00:02:36.908 --> 00:02:40.300
I can forgive somebody,
so on and so forth.

45
00:02:40.300 --> 00:02:43.179
And right now,
let's take a quick tour of the code base.

46
00:02:44.780 --> 00:02:46.357
So we've got a few components.

47
00:02:46.357 --> 00:02:50.368
We've got index we just
call as application.

48
00:02:50.368 --> 00:02:54.990
And we're using this useState in here.

49
00:02:54.990 --> 00:03:00.390
And we can see that we've got grudges and
setGrudges.

50
00:03:00.390 --> 00:03:02.690
It's an array, arrays are tricky.

51
00:03:02.690 --> 00:03:05.720
React state needs immutable
objects every time, right?

52
00:03:05.720 --> 00:03:12.840
When you set state, what React does is,
is this different from last time, right?

53
00:03:12.840 --> 00:03:14.890
And if you're giving a primitive,
like a number, it's like, well,

54
00:03:14.890 --> 00:03:18.070
yeah, one is different than two,
no big deal, right?

55
00:03:18.070 --> 00:03:23.130
If you mutate an object, an array,
they are the same reference in memory.

56
00:03:23.130 --> 00:03:26.010
So even though it has different keys or
different values in it,

57
00:03:26.010 --> 00:03:30.205
React can't tell that it is
a different set of values.

58
00:03:30.205 --> 00:03:32.485
It's like, yeah,
that array is the same as last year I saw.

59
00:03:32.485 --> 00:03:34.329
I don't need to render, right?

60
00:03:34.329 --> 00:03:39.859
And so sometimes a lot of to do around
arrays is based not necessarily on React,

61
00:03:39.859 --> 00:03:41.700
but on JavaScript, right?

62
00:03:41.700 --> 00:03:46.275
We need a way to say, all right,
this is a brand new array, rerender it.

63
00:03:46.275 --> 00:03:48.705
So a lot of times, we can't just
push something onto an array.

64
00:03:48.705 --> 00:03:51.825
We can't just add a key to an object or
change a key on an object.

65
00:03:51.825 --> 00:03:53.214
We have to return a new object.

66
00:03:53.214 --> 00:03:56.375
We have to return a new array every time.

67
00:03:56.375 --> 00:04:00.310
So in the case of adding a grudge,
we use a spread operator to say, hey,

68
00:04:00.310 --> 00:04:03.079
take everything that was
in the grudge's array.

69
00:04:04.130 --> 00:04:06.370
Also add that new grudge
onto the front of the array.

70
00:04:06.370 --> 00:04:07.730
But you can see we're using brackets.

71
00:04:07.730 --> 00:04:11.640
It's a brand new array that contains all
of the contents of the old one, right?

72
00:04:11.640 --> 00:04:12.412
And those are copies.

73
00:04:12.412 --> 00:04:15.840
I mean, they are still the same ones
in reference, so that's important.

74
00:04:15.840 --> 00:04:17.470
Sometimes we want the same
objects in reference.

75
00:04:17.470 --> 00:04:21.825
If it didn't change, we don't wanna
tell React something to change, right,

76
00:04:21.825 --> 00:04:22.736
cuz it didn't.

77
00:04:22.736 --> 00:04:26.410
Don't rerender cuz it is the same, and
we put that new one on the beginning.

78
00:04:28.055 --> 00:04:30.060
Toggling forgiveness is
a little bit trickier.

79
00:04:30.060 --> 00:04:35.010
We basically do this weird hack,
where we will map through all of them.

80
00:04:35.010 --> 00:04:39.540
If it is not the one we're looking for,
return the same object in memory.

81
00:04:39.540 --> 00:04:41.870
If it is, return a new one, right?

82
00:04:41.870 --> 00:04:44.240
Cuz this will tell that
one that has to rerender.

83
00:04:44.240 --> 00:04:45.350
There are ways to get around this.

84
00:04:45.350 --> 00:04:48.240
There are libraries like Immer and
Immutable.JS.

85
00:04:48.240 --> 00:04:51.497
The problems with those are,
let's say the good things first.

86
00:04:51.497 --> 00:04:54.152
The good things about those is that
you don't have to do all this kind of

87
00:04:54.152 --> 00:04:54.830
squarely stuff.

88
00:04:54.830 --> 00:04:58.054
You get to do stuff, the regular like,
I wanna push something on,

89
00:04:58.054 --> 00:04:59.445
it will give you a new array.

90
00:04:59.445 --> 00:05:02.357
It does the right thing all
the time with a simpler API.

91
00:05:02.357 --> 00:05:06.413
The bad part is they're not necessarily
the same as native JavaScript

92
00:05:06.413 --> 00:05:07.520
objects, right?

93
00:05:07.520 --> 00:05:09.490
So you've added a layer of complexity.

94
00:05:09.490 --> 00:05:12.792
Now, sometimes it's the right choice and
sometimes it's not, right?

95
00:05:12.792 --> 00:05:16.122
Well, a lot of the stuff depends
on team size and stuff like that,

96
00:05:16.122 --> 00:05:19.163
what is the education piece going to be,
so on and so forth.

97
00:05:19.163 --> 00:05:22.100
That'll depend on the size of your team.

98
00:05:22.100 --> 00:05:26.540
When I worked on a team of five people,
yeah, totally.

99
00:05:26.540 --> 00:05:31.760
Now, in our code base, there are,
I think, 27 front end engineers.

100
00:05:31.760 --> 00:05:32.980
That might be a slight hyperbole.

101
00:05:32.980 --> 00:05:36.033
I've lost count, but a lot, right?

102
00:05:36.033 --> 00:05:38.780
And so then the education piece and
the onboarding piece becomes trickier.

103
00:05:38.780 --> 00:05:42.320
So those decisions sometimes are not
necessarily technical, but they are also

104
00:05:43.880 --> 00:05:48.580
just related to the dynamics of your team.

105
00:05:48.580 --> 00:05:52.070
So yeah, here we're mapping and
we're doing something like that as well.

106
00:05:52.070 --> 00:05:54.220
We're passing in addGrudge.

107
00:05:54.220 --> 00:05:55.299
We're passing the grudges.

108
00:05:55.299 --> 00:05:58.300
And we have to do this little thing that
we'll talk about in a second called prop

109
00:05:58.300 --> 00:06:00.850
drilling, which is we've got grudges,
plural.

110
00:06:00.850 --> 00:06:04.030
Grudges plural goes ahead and

111
00:06:04.030 --> 00:06:07.810
then renders individual grudges based on
that array, a little bit of a heading.

112
00:06:07.810 --> 00:06:08.480
As you can see,

113
00:06:08.480 --> 00:06:13.530
it needs to get onForgive, because it
needs to pass it to the individual grudge.

114
00:06:13.530 --> 00:06:15.743
It doesn't do anything with itself.

115
00:06:15.743 --> 00:06:18.945
It simply takes it from the parent and
hands it to the grandchild.

116
00:06:20.485 --> 00:06:24.475
This is fine in a small application,
right?

117
00:06:24.475 --> 00:06:27.449
But in the Redux cuz we have
one with a big combo on board,

118
00:06:27.449 --> 00:06:29.993
I'll show you a chart of it in a second,
right?

119
00:06:29.993 --> 00:06:33.926
It gets really complicated cuz
you have deeply nested trees.

120
00:06:33.926 --> 00:06:36.620
The highest common ancestor
might be very far up there,

121
00:06:36.620 --> 00:06:38.430
and refactoring becomes hard.

122
00:06:38.430 --> 00:06:42.030
So we're gonna deal with some
different things at the same time.

123
00:06:43.200 --> 00:06:46.700
We're using this application cuz it's
somewhat simple, but it does begin to show

124
00:06:46.700 --> 00:06:49.204
us how we can implement a very
simple useReduce or pattern.

125
00:06:49.204 --> 00:06:51.370
And we'll talk about how it
can get more complicated.

126
00:06:51.370 --> 00:06:54.550
The other thing is things
are gonna rerender because,

127
00:06:54.550 --> 00:06:59.030
as I mentioned earlier,
we're making brand new functions and

128
00:06:59.030 --> 00:07:02.950
arrays every time, which is React
is learning, everything changed.

129
00:07:02.950 --> 00:07:04.900
So we've got grudges plural.

130
00:07:04.900 --> 00:07:09.515
We've got the grudge singular, right,
which is just taking that kind of generic

131
00:07:09.515 --> 00:07:14.590
onForgive and calling it with the right
ID, so we know which one to map over.

132
00:07:14.590 --> 00:07:18.910
We've also got NewGrudge,
which has its own state, right?

133
00:07:18.910 --> 00:07:21.210
It's keeping track of those input fields.

134
00:07:21.210 --> 00:07:26.650
Now, if I move that up to application and
pass it in with the handlers,

135
00:07:26.650 --> 00:07:29.920
that would work, but it would actually
trigger application to rerender

136
00:07:29.920 --> 00:07:34.340
every time, which would trigger all the
grudges plural and the grudge singular.

137
00:07:34.340 --> 00:07:37.620
So by putting it in the lowest
component on the tree that needs it,

138
00:07:37.620 --> 00:07:38.760
my life is a little bit easier.

139
00:07:38.760 --> 00:07:40.560
We'll talk about that again in a second.

140
00:07:40.560 --> 00:07:44.210
And then it has this handleChange event,
which is when they submit, okay,

141
00:07:44.210 --> 00:07:46.730
now, that's when we wanna
call the addGrudge.

142
00:07:46.730 --> 00:07:48.310
So we can see an application,

143
00:07:48.310 --> 00:07:53.380
we pass it, addGrudge, and
it can call that and add it to the array.

144
00:07:53.380 --> 00:07:58.168
So one of the things that you'll notice,
so by going to NewGrudge,

145
00:07:58.168 --> 00:08:00.859
we'll just do this in console.log.

146
00:08:04.752 --> 00:08:09.460
We'll say, rendering new grudge, and
let's do that also in grudge singular.

147
00:08:22.008 --> 00:08:23.301
Cool.

