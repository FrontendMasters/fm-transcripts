WEBVTT

1
00:00:00.000 --> 00:00:03.271
Let's talk a little bit about React Hooks.

2
00:00:03.271 --> 00:00:07.940
So React Hooks gives us a different way
to think about management of state.

3
00:00:07.940 --> 00:00:12.706
So this .state is a property on the class,
and this .substate is a method.

4
00:00:12.706 --> 00:00:15.994
We never define those ourselves,
but when we said,

5
00:00:15.994 --> 00:00:20.340
class counter extends component,
React.component in this case.

6
00:00:20.340 --> 00:00:22.326
We are inheriting those methods.

7
00:00:22.326 --> 00:00:27.761
And that allow us to update the value and
trigger the render, so on and so forth.

8
00:00:27.761 --> 00:00:32.642
Few years ago, React implemented
another way to create components which

9
00:00:32.642 --> 00:00:35.190
is just to have a function.

10
00:00:35.190 --> 00:00:38.990
And that function took in props and
it did stuff.

11
00:00:38.990 --> 00:00:42.190
And whatever came out the other
side was rendered to the page.

12
00:00:42.190 --> 00:00:45.450
Now, you'll notice that I didn't say
the word state in that explanation.

13
00:00:45.450 --> 00:00:47.060
Cuz there was no concept of state.

14
00:00:47.060 --> 00:00:50.880
It was basically you have some components
that do need to manage the state but

15
00:00:50.880 --> 00:00:54.054
a parent component state is
the children components' props.

16
00:00:54.054 --> 00:00:58.420
So maybe a list of users has some state
as you add users or remove users, but

17
00:00:58.420 --> 00:01:02.860
each individual user just gets that
state from the higher component.

18
00:01:02.860 --> 00:01:06.672
So it was useful in the cases where
you didn't need to manage any state.

19
00:01:06.672 --> 00:01:09.900
It was nice and clean because you
didn't have to do all this binding.

20
00:01:09.900 --> 00:01:11.810
And you didn't have to
extend from component.

21
00:01:11.810 --> 00:01:14.480
And you didn't need a constructor,
yada, yada, yada, yada.

22
00:01:17.120 --> 00:01:22.853
And when they first came out, I used them
all the time because they were cool.

23
00:01:22.853 --> 00:01:26.358
And then as I got older and saltier,
I use them almost never because what

24
00:01:26.358 --> 00:01:29.995
would happen is eventually that
component would need some kind of state.

25
00:01:29.995 --> 00:01:32.225
And you'd have to change it
into a class based component.

26
00:01:33.465 --> 00:01:36.586
And so I got very ordinary and
just started to make very simple class

27
00:01:36.586 --> 00:01:38.872
based components that only
had a render method so

28
00:01:38.872 --> 00:01:41.510
that when I needed state,
I didn't have to rewrite it.

29
00:01:41.510 --> 00:01:44.986
And sure, you could say,
couldn't you write a JS code shift or

30
00:01:44.986 --> 00:01:49.331
code mod to do it and isn't there
a VS Code plugin I'm sure there is.

31
00:01:49.331 --> 00:01:55.384
But it was still tricky enough that
I just decided it wasn't worth it.

32
00:01:55.384 --> 00:02:00.570
Hooks came out and gave us a way to
manipulate state in functional components.

33
00:02:00.570 --> 00:02:03.153
And functional components are cleaner and

34
00:02:03.153 --> 00:02:05.806
easier as we begin to
refactor our counter,

35
00:02:05.806 --> 00:02:10.557
we'll actually see that it becomes a much
simpler component as we go through.

36
00:02:10.557 --> 00:02:16.618
And then we'll kind of look at some of the
things that we saw with this as a state,

37
00:02:16.618 --> 00:02:21.603
like how does that actually translate
into the kind of hook land?

38
00:02:23.514 --> 00:02:28.041
So let's begin to refactor
this component a little bit.

39
00:02:29.523 --> 00:02:32.454
This is gonna involve one of my
favorite things in the world,

40
00:02:32.454 --> 00:02:33.670
which is deleting code.

41
00:02:34.850 --> 00:02:36.990
All lines of code or liability.

42
00:02:36.990 --> 00:02:41.650
The only way to have less bugs in your
code is to have less code, or more tests,

43
00:02:41.650 --> 00:02:42.540
but all tests are code.

44
00:02:42.540 --> 00:02:46.920
So, we can just go ahead and
get rid of this entire constructor.

45
00:02:48.290 --> 00:02:49.279
That'll be fun.

46
00:02:49.279 --> 00:02:53.711
We're gonna do the simplest version of
this first, so let's actually go ahead and

47
00:02:53.711 --> 00:02:54.989
get rid of that as well.

48
00:02:57.302 --> 00:03:01.440
We'll have to change a lot of this,
we'll rewrite it, reset.

49
00:03:01.440 --> 00:03:04.251
So effectively, if you think about
a functional components, it's really just

50
00:03:04.251 --> 00:03:06.959
a component that only had a render method,
which I kind of alluded to before.

51
00:03:06.959 --> 00:03:10.779
So now we say constant counter and
that's just going to be

52
00:03:10.779 --> 00:03:15.943
a function, That will take some props out.

53
00:03:15.943 --> 00:03:19.290
We know this one got Max and
step passed in.

54
00:03:19.290 --> 00:03:20.670
So I'll hold onto those for a second.

55
00:03:20.670 --> 00:03:22.092
I'm not using them immediately.

56
00:03:24.699 --> 00:03:27.242
And so we know that in this case.

57
00:03:35.896 --> 00:03:39.369
Now this'll blow up right now cuz I
don't have a count or this .increment or

58
00:03:39.369 --> 00:03:40.310
this.decrement.

59
00:03:40.310 --> 00:03:44.254
But that is where we start to
see the hook kind of come in.

60
00:03:44.254 --> 00:03:49.056
So I could say, const count and
I'll talk about this syntax in one second,

61
00:03:49.056 --> 00:03:51.770
let me just get it in place.

62
00:03:51.770 --> 00:03:53.690
React.useState.

63
00:03:53.690 --> 00:03:57.724
So instead of function component which
should have no concept of state or

64
00:03:57.724 --> 00:04:00.434
didn't 13 months ago and
magically does now,

65
00:04:00.434 --> 00:04:03.673
we'll give it a default value
is the kind of first thing and

66
00:04:03.673 --> 00:04:07.600
you can kinda see the hint from
VS Code saying it's the initial state.

67
00:04:07.600 --> 00:04:13.283
So, I get back this array and
the first item in the array is the value.

68
00:04:13.283 --> 00:04:17.138
And the second one is a function
that allows you to set the value.

69
00:04:20.404 --> 00:04:28.709
So I could say something like
increment is, Set count.

70
00:04:32.345 --> 00:04:33.634
Count plus one.

71
00:04:42.042 --> 00:04:46.812
Decrement is count minus one,
and then reset,

72
00:04:50.836 --> 00:04:52.796
SetCount to zero.

73
00:04:52.796 --> 00:04:53.943
Now I don't need this here.

74
00:04:53.943 --> 00:04:55.758
So we can get rid of those.

75
00:04:57.328 --> 00:05:00.839
And so all of that component,
we have a for, with the methods, and

76
00:05:00.839 --> 00:05:03.725
the binding of the methods,
and the constructor, and

77
00:05:03.725 --> 00:05:07.070
pulling stuff out of the state object,
it's all gone.

78
00:05:07.070 --> 00:05:10.235
Let's just flip over to make sure
I didn't make any silly mistakes.

79
00:05:13.761 --> 00:05:18.525
It increments, it decrements,
it increments, it resets.

80
00:05:18.525 --> 00:05:21.515
So it's a much simpler, cleaner syntax.

81
00:05:21.515 --> 00:05:24.135
And we're not worrying
about event binding,

82
00:05:24.135 --> 00:05:26.698
we're not cuz I've been
to that one before.

83
00:05:26.698 --> 00:05:29.320
It's kind of just pure in that sense.

84
00:05:29.320 --> 00:05:32.330
Now, let's actually begin to
play with this a little bit.

85
00:05:33.380 --> 00:05:38.241
Let's see what happens, let's try some
of the experiments that we tried before.

86
00:05:38.241 --> 00:05:42.204
So we'll go in here, and
let's call it three times.

87
00:05:42.204 --> 00:05:47.099
And we'll do a console log here.

88
00:05:51.348 --> 00:05:54.016
The kind of first two experiments
in our pop quiz that we did before.

89
00:05:54.016 --> 00:05:55.874
Let's see how it behaves this time.

90
00:05:59.313 --> 00:06:00.865
Does the same thing each time.

91
00:06:00.865 --> 00:06:05.535
So we know that is not dissimilar
from the one that is asynchronous and

92
00:06:05.535 --> 00:06:08.845
two that is queuing things up.

93
00:06:08.845 --> 00:06:10.611
Again, there's no binding.

94
00:06:10.611 --> 00:06:13.516
We don't even reference this,
there's no constructor.

95
00:06:13.516 --> 00:06:19.228
Great, the other thing is,
similar to this .setState,

96
00:06:19.228 --> 00:06:22.150
it will also take a function.

97
00:06:24.748 --> 00:06:26.266
There is a difference, though,

98
00:06:26.266 --> 00:06:29.900
if you just wanted to do a clean refactor
here that we'll talk about in a second,

99
00:06:29.900 --> 00:06:32.524
but let's just verify that this works so
you believe me.

100
00:06:32.524 --> 00:06:36.292
All I wanna do right
now is earn your trust.

101
00:06:36.292 --> 00:06:41.520
The subtle difference is while the last
one took theoretically the state object

102
00:06:41.520 --> 00:06:46.370
in its whole and all of the props,
this just takes that one piece of value.

103
00:06:46.370 --> 00:06:48.340
It's not a full object,
it is simply a number.

104
00:06:49.380 --> 00:06:52.610
And it does not get the props
as a second argument.

105
00:06:52.610 --> 00:06:56.690
So you can't do the stuff
that we did with Max and

106
00:06:56.690 --> 00:06:59.861
step inside of the function itself.

107
00:06:59.861 --> 00:07:03.531
So for this, if I just want an increment,
I could do what I did before.

108
00:07:04.703 --> 00:07:08.053
I'll just call Inc since I have
now a function called increment.

109
00:07:11.822 --> 00:07:14.400
I can pull that out as I did previously.

110
00:07:15.400 --> 00:07:20.790
But since I don't have access to
the props that are getting passed in,

111
00:07:20.790 --> 00:07:23.455
I couldn't do Max and step in here.

112
00:07:23.455 --> 00:07:27.450
Because it's outside of that function,
so I cannot do that.

113
00:07:27.450 --> 00:07:31.805
So it's a little bit more limited in that
sense, which is kind of a bummer but

114
00:07:31.805 --> 00:07:33.130
that's life.

115
00:07:33.130 --> 00:07:36.596
So we could write some of the functional
code in there that we had before.

116
00:07:36.596 --> 00:07:41.180
But let's also just verify
our other hypothesis.

117
00:07:41.180 --> 00:07:43.906
All right, we saw if we just
said the value three times,

118
00:07:43.906 --> 00:07:45.311
it only incremented by one.

119
00:07:45.311 --> 00:07:47.606
What happens in this case
if we use a function?

120
00:07:51.740 --> 00:07:52.910
It goes up to three.

121
00:07:52.910 --> 00:07:56.060
So, some of the behaviors are different,
some of them the same.

122
00:07:56.060 --> 00:08:00.467
This is important when you
are choosing to refactor it.

123
00:08:00.467 --> 00:08:05.720
Now, remember before I said like, hey,
I'm gonna see if it's hit the max.

124
00:08:05.720 --> 00:08:07.652
If not, I'm just gonna return.

125
00:08:07.652 --> 00:08:10.583
And I put a hint in there like
we're gonna see this again later.

126
00:08:10.583 --> 00:08:13.456
Let's see it again later.

127
00:08:14.818 --> 00:08:17.045
So the setCount or c.

128
00:08:18.866 --> 00:08:26.038
And we'll say if,
C is greater than or equal to max.

129
00:08:26.038 --> 00:08:28.632
I don't have to do this .props or

130
00:08:28.632 --> 00:08:34.378
props on max cuz this is just simply
passed in like that, we'll return and

131
00:08:34.378 --> 00:08:41.204
if not, Cool.

132
00:08:41.204 --> 00:08:43.767
So it should go 5, 10, 15.

133
00:08:43.767 --> 00:08:49.021
Cuz remember, it was 5 and
15 before, 15, explosion.

134
00:08:49.021 --> 00:08:52.486
Before, with this .setState,
it was collecting those objects,

135
00:08:52.486 --> 00:08:54.430
it was merging them all together, and

136
00:08:54.430 --> 00:08:58.570
it was figuring out what changes it
needed to make that large state object.

137
00:08:58.570 --> 00:09:00.260
Here, it's just a primitive value.

138
00:09:00.260 --> 00:09:02.900
So if you just take that code wholesale,
and

139
00:09:02.900 --> 00:09:06.410
move it over, you'll notice I
didn't even get an explosion error.

140
00:09:06.410 --> 00:09:10.459
I just got a subtle thing and then a
counter that puts a big number on a page.

141
00:09:10.459 --> 00:09:12.278
We saw it, but for the more subtle and

142
00:09:12.278 --> 00:09:17.300
tricky parts of your state,
There goes your afternoon.

143
00:09:17.300 --> 00:09:21.959
Hopefully just your afternoon, that comes
to the point we get really embarrassed

144
00:09:21.959 --> 00:09:26.224
showing up to stand up every day going
like, still working on that ticket?

145
00:09:26.224 --> 00:09:31.475
I was just gonna do a refactor and then I
didn't store it in Git, and so here I am.

146
00:09:31.475 --> 00:09:36.733
[LAUGH] That subtle difference, so
here we do need to return the value.

147
00:09:36.733 --> 00:09:39.960
So now,
it actually does the thing that we want.

148
00:09:39.960 --> 00:09:45.030
And so that, my kind of warning is if
you don't fully know how these work,

149
00:09:45.030 --> 00:09:48.170
most of the time, you're fine, as long
as you 80% understand, you're cool.

150
00:09:48.170 --> 00:09:51.480
But as you start to do some of the
trickier things and you start to refactor,

151
00:09:51.480 --> 00:09:55.770
the subtle differences in
between the two might getcha.

