WEBVTT

1
00:00:00.280 --> 00:00:04.550
Now, this is all a giant trick to kinda
set us up with a little laboratory

2
00:00:04.550 --> 00:00:09.330
to start diving in a little bit deeper
into how some of this stuff works.

3
00:00:09.330 --> 00:00:14.663
So let's do a little bit of a pop quiz.

4
00:00:14.663 --> 00:00:16.391
You're like, great.

5
00:00:16.391 --> 00:00:17.399
All right, so

6
00:00:17.399 --> 00:00:22.612
this is the kinda simple version of
the counter that we just implemented.

7
00:00:22.612 --> 00:00:26.924
I almost said incremented
because counters.

8
00:00:26.924 --> 00:00:32.900
So we've got this counter
with an initial state of 0.

9
00:00:32.900 --> 00:00:37.060
And let's say, in that increment method,
we're like, cool.

10
00:00:37.060 --> 00:00:42.170
We're gonna call this.setState three
times, each incrementing by 1.

11
00:00:42.170 --> 00:00:44.150
And then in that same method,
in the increment method,

12
00:00:44.150 --> 00:00:45.570
we're gonna immediately console log it.

13
00:00:47.280 --> 00:00:50.660
What am I gonna get console
logged at that point?

14
00:00:50.660 --> 00:00:52.050
&gt;&gt; 0.
&gt;&gt; 0, right,

15
00:00:52.050 --> 00:00:56.543
we'll not get it three times just
cuz we called it three times.

16
00:00:56.543 --> 00:00:58.830
In fact, we won't even get one, right?

17
00:00:58.830 --> 00:01:01.370
Because it's asynchronous, right?

18
00:01:01.370 --> 00:01:03.610
We don't wanna do on every line,
they changed the state,

19
00:01:03.610 --> 00:01:06.070
let me stop the world,
re-render the entire DOM.

20
00:01:06.070 --> 00:01:07.750
Let's let the function run to completion.

21
00:01:07.750 --> 00:01:09.670
Let's queue up everything
they wanted to do.

22
00:01:09.670 --> 00:01:13.050
Let's figure out all of
the changes that happened, right?

23
00:01:13.050 --> 00:01:15.420
And then React will be able to go in and

24
00:01:15.420 --> 00:01:20.280
figure out what changes it needs to make
to the DOM in order to do its job, right?

25
00:01:20.280 --> 00:01:25.910
React is basically trying to
avoid unnecessary re-renders.

26
00:01:25.910 --> 00:01:30.200
Okay, great, so we know that that
will go ahead and do the trick.

27
00:01:30.200 --> 00:01:33.980
Now, assume we have the whole
increment method in there, right?

28
00:01:33.980 --> 00:01:37.080
And we called it three times,
same as before.

29
00:01:37.080 --> 00:01:38.900
Now we don't care about the console log.

30
00:01:38.900 --> 00:01:41.430
We wanna know what's gonna
show up on the screen, right?

31
00:01:41.430 --> 00:01:42.730
Cuz we knew it's asynchronous.

32
00:01:42.730 --> 00:01:45.616
We knew nothing was gonna happen
until after that happened, and

33
00:01:45.616 --> 00:01:47.443
then it can go through reconciliation.

34
00:01:47.443 --> 00:01:50.050
It can go check all the DOM nodes and
the tree.

35
00:01:50.050 --> 00:01:51.990
But we're gonna say,
we called it three times.

36
00:01:53.010 --> 00:01:57.110
Now we wanna know, after all the
reconciliation is done, what is going to

37
00:01:57.110 --> 00:02:05.690
be on the screen as the count after all of
reconciliation, the DOM is updated, ready?

38
00:02:05.690 --> 00:02:07.623
I see some people holding up fingers.

39
00:02:07.623 --> 00:02:09.698
1, right, the reason for

40
00:02:09.698 --> 00:02:15.260
this is that we're effectively
queuing upstate changes, right?

41
00:02:15.260 --> 00:02:20.023
And so we're basically, kind of the way
to think about it is we told React, okay,

42
00:02:20.023 --> 00:02:24.461
I would love you to set the state to
the current state, which is 0, plus 1.

43
00:02:24.461 --> 00:02:26.839
And we basically said that three times,
right?

44
00:02:26.839 --> 00:02:31.090
Set it to 0 plus 1, set it to 0 plus 1,
set it to 0 plus 1.

45
00:02:31.090 --> 00:02:33.510
And so it's like, okay, I got it, neat.

46
00:02:33.510 --> 00:02:34.260
Thank you for that.

47
00:02:35.510 --> 00:02:38.969
And then it set it to 0
plus 1 the third time.

48
00:02:38.969 --> 00:02:42.560
It effectively goes out and tries to
collect all of the things in that object.

49
00:02:42.560 --> 00:02:44.870
Now this is gonna be different when
we get to hooks a little bit, right?

50
00:02:44.870 --> 00:02:47.725
Cuz when we get to hooks,
there are no objects per se, but

51
00:02:47.725 --> 00:02:49.762
it's effectively taking all of those.

52
00:02:49.762 --> 00:02:51.980
When we say this.setState,
we give it an object.

53
00:02:51.980 --> 00:02:56.870
In this case, it had the key of count and
the value of what the new count should be.

54
00:02:56.870 --> 00:02:58.670
And it merges all those objects together.

55
00:02:58.670 --> 00:03:03.010
So if we had all sort of other things and
we had multiple this.setStates,

56
00:03:03.010 --> 00:03:06.650
it would find all of the keys,
and basically it merges them and

57
00:03:06.650 --> 00:03:09.870
there's duplicate keys,
the last one wins, right?

58
00:03:09.870 --> 00:03:14.175
So if we went in there and we said
count is this.state.count + 1, + 1, and

59
00:03:14.175 --> 00:03:17.721
then the third one instead + 2,
well, that one's gonna win.

60
00:03:17.721 --> 00:03:19.140
It's actually gonna increment by 2.

61
00:03:19.140 --> 00:03:21.420
It's like whatever happens last wins.

62
00:03:21.420 --> 00:03:22.920
So if you're calling in multiple cases,

63
00:03:22.920 --> 00:03:25.095
and in a very simple example,
why would I do that?

64
00:03:25.095 --> 00:03:28.830
Well, we all know we all have at least one

65
00:03:28.830 --> 00:03:32.820
part of our application that has one
of those hundred line methods in there.

66
00:03:32.820 --> 00:03:36.681
It doesn't happen in a five line method,
it happens in the hundred line method.

67
00:03:36.681 --> 00:03:39.134
And when you're sitting there, cuz you're
not gonna get an error message right.

68
00:03:39.134 --> 00:03:40.840
Nothing went wrong.

69
00:03:40.840 --> 00:03:45.868
It was just following the rules in a way
that you weren't totally expecting yet.

70
00:03:45.868 --> 00:03:48.470
So understanding that,
cuz when you get an error message,

71
00:03:48.470 --> 00:03:51.850
it might feel like your heart is broken
when you see all that red on the screen,

72
00:03:51.850 --> 00:03:53.850
but at least there's some line numbers.

73
00:03:53.850 --> 00:03:56.900
The worst things are when nothing happens,

74
00:03:56.900 --> 00:04:00.570
it just doesn't do the thing
that you expected, right?

75
00:04:00.570 --> 00:04:04.060
And so understanding how some of the inner
workings goes a really long way.

76
00:04:04.060 --> 00:04:05.740
So you can use Object.assign.

77
00:04:05.740 --> 00:04:09.609
It's effectively this if you like
the hipster spread notation, I do,

78
00:04:09.609 --> 00:04:11.812
says the guy wearing plaid and a beanie.

