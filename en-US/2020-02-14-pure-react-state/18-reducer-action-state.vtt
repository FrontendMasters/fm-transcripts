WEBVTT

1
00:00:00.040 --> 00:00:04.770
You can see that when the page first
announces the generating the fake name

2
00:00:04.770 --> 00:00:08.170
library, that is a third party dependency
also likes to log to the console.

3
00:00:08.170 --> 00:00:10.007
So that's fun.

4
00:00:10.007 --> 00:00:12.471
But you can see that we render
the new grudge component,

5
00:00:12.471 --> 00:00:15.417
we're rendering the individual grudges,
that all makes sense.

6
00:00:15.417 --> 00:00:17.767
The page is mounting for the first time.

7
00:00:17.767 --> 00:00:19.820
What happens if I just forgive one grudge?

8
00:00:21.160 --> 00:00:23.150
Well, we end up
Rendering New Grudge again, and

9
00:00:23.150 --> 00:00:25.940
all of the grudges in there as well,
right?

10
00:00:25.940 --> 00:00:28.320
And that's not great.

11
00:00:28.320 --> 00:00:32.570
So we will deal with that using
a pattern that we're gonna use

12
00:00:32.570 --> 00:00:34.470
multiple times in multiple different ways.

13
00:00:34.470 --> 00:00:37.432
So the rest of this workshop
is this reducer pattern.

14
00:00:37.432 --> 00:00:39.872
And we'll see why we can
solve this initial issue,

15
00:00:39.872 --> 00:00:43.350
we'll also solve the prop join pattern and
put this initial issue back.

16
00:00:43.350 --> 00:00:44.988
And we'll talk about the tradeoffs there.

17
00:00:44.988 --> 00:00:49.820
But the use reducer pattern allows us to
do some very complicated state management

18
00:00:49.820 --> 00:00:54.301
in a much easier way than if we tried to
wire it all together using use state and

19
00:00:54.301 --> 00:00:56.069
a bunch of like custom hooks.

20
00:00:56.069 --> 00:00:57.928
So let's go ahead and

21
00:00:57.928 --> 00:01:03.622
just very quickly do the kind of
first introduction to a reducer.

22
00:01:03.622 --> 00:01:07.751
A lot of times, reducers scare people,
because I think I have this hobby horse,

23
00:01:07.751 --> 00:01:11.576
which is a lot of times the first time
you come across reducer is a lot of times

24
00:01:11.576 --> 00:01:13.908
when you're using React, Redux, rather.

25
00:01:13.908 --> 00:01:17.883
And I think there's a problem the way we
teach Redux, which is we try to teach

26
00:01:17.883 --> 00:01:21.750
Redux along with React, and the React
Redux library all at the same time.

27
00:01:21.750 --> 00:01:23.790
So you're learning like four things
at once and you want to cry.

28
00:01:25.240 --> 00:01:29.920
The actual concept of a reducer
is super easy, it is a function.

29
00:01:29.920 --> 00:01:32.369
And it is a function
that takes two arguments.

30
00:01:32.369 --> 00:01:34.854
It takes the current state of the world,
right,

31
00:01:34.854 --> 00:01:38.744
which should just be a JavaScript object
or an array, hopefully an object.

32
00:01:38.744 --> 00:01:41.920
Takes the current state of the world, and

33
00:01:41.920 --> 00:01:46.286
it takes a second object,
it takes a second object here.

34
00:01:46.286 --> 00:01:48.730
I mean, you can put the state in and
the state comes out, right?

35
00:01:48.730 --> 00:01:52.260
The second object that goes
in is the action, right?

36
00:01:52.260 --> 00:01:54.740
So here's the current state of the world.

37
00:01:54.740 --> 00:01:56.857
Here's a thing that happened.

38
00:01:56.857 --> 00:01:58.736
It takes these two pieces of data and

39
00:01:58.736 --> 00:02:01.817
figures out what the new state
of the world is, all right?

40
00:02:01.817 --> 00:02:04.985
And that is all it is,
this is a simple JavaScript function.

41
00:02:04.985 --> 00:02:09.051
You could write a reducer
function yourself, we will.

42
00:02:09.051 --> 00:02:12.258
And as long as it takes
the current state of the world and

43
00:02:12.258 --> 00:02:16.930
an object that represents some thing that
happens in the world, in both go, and

44
00:02:16.930 --> 00:02:21.690
only one thing comes out, which is the new
kind of resolved state of the world.

45
00:02:21.690 --> 00:02:28.300
Now we tend to hook that up to our views,
right?

46
00:02:28.300 --> 00:02:31.730
Okay, new state of the world, we're
gonna give that two components, right?

47
00:02:31.730 --> 00:02:34.310
Here's what you need to render,
here are the grudges, so on and so forth.

48
00:02:34.310 --> 00:02:37.720
Now, you notice that the grudges
have a forgiven check box.

49
00:02:37.720 --> 00:02:40.680
Well, that's a thing that
happened in the world, right?

50
00:02:40.680 --> 00:02:44.169
So when someone hits the forgiven
checkbox, we dispatch an action like, hey,

51
00:02:44.169 --> 00:02:46.380
this grudge has been forgiven.

52
00:02:46.380 --> 00:02:47.960
Those two things go into the reducer.

53
00:02:47.960 --> 00:02:50.190
The state of the world,
the action that happened.

54
00:02:51.670 --> 00:02:54.293
And new state of the world comes out
with our grudge forgiven, right.

55
00:02:54.293 --> 00:02:59.161
And that's effectively what it is,
in this case.

56
00:02:59.161 --> 00:03:01.491
Cool, so let's go ahead and

57
00:03:01.491 --> 00:03:07.327
let's see if we can refactor this
application a little bit to use that.

58
00:03:07.327 --> 00:03:08.960
So we'll do this in application.

59
00:03:08.960 --> 00:03:13.030
Now, I told you, writing our reducer
function, pretty straightforward, right?

60
00:03:13.030 --> 00:03:13.530
You're ready?

61
00:03:14.930 --> 00:03:17.490
We'll say const reducer.

62
00:03:17.490 --> 00:03:23.656
I'll write the world's simplest reducer
function, we'll say state, action.

63
00:03:32.528 --> 00:03:33.254
There it is.

64
00:03:33.254 --> 00:03:36.312
Now, this one is very much
like a teenager and so

65
00:03:36.312 --> 00:03:40.516
that it takes the state of the world,
and anything that happens,

66
00:03:40.516 --> 00:03:44.500
it ignores it and just keep on
doing what it was doing, right?

67
00:03:44.500 --> 00:03:48.606
But this is the very beginning
of a reducer, right?

68
00:03:48.606 --> 00:03:49.534
And so that is it.

69
00:03:49.534 --> 00:03:50.856
It is simply a JavaScript function.

70
00:03:50.856 --> 00:03:52.690
There is no black magic here.

71
00:03:52.690 --> 00:03:56.690
It is simply a JavaScript function.

72
00:03:56.690 --> 00:04:03.950
Now, we can switch out this useState for
a useReducer.

73
00:04:03.950 --> 00:04:06.135
Let me just add that,
switch this out real quick.

74
00:04:11.587 --> 00:04:13.780
UseReducer, now useReducer
takes two arguments.

75
00:04:13.780 --> 00:04:19.240
It takes a reducer, well that seems good,
right, and an initial state.

76
00:04:20.420 --> 00:04:22.370
Now, that could be an array,
it could be an object.

77
00:04:22.370 --> 00:04:25.305
I have that fake list of grudges
with the autogenerated names.

78
00:04:25.305 --> 00:04:28.115
So I didn't accidentally,
imagine if I wrote the list myself and

79
00:04:28.115 --> 00:04:29.349
it was somebody in the room.

80
00:04:29.349 --> 00:04:31.714
That would be very,
those names are autogenerated.

81
00:04:31.714 --> 00:04:36.342
So if you see your name, don't take
any offense unless you did that thing,

82
00:04:36.342 --> 00:04:37.380
and then own it.

83
00:04:37.380 --> 00:04:41.340
And instead of taking grudges,
it takes this function called dispatch.

84
00:04:41.340 --> 00:04:43.760
We've got this ability to
dispatch actions, right?

85
00:04:43.760 --> 00:04:46.620
We had to take out the setGrudges,
because right now,

86
00:04:46.620 --> 00:04:48.150
we've removed that function, right?

87
00:04:48.150 --> 00:04:50.430
The app blows up because
that's not a thing.

88
00:04:50.430 --> 00:04:55.050
But what we'll wanna do
is dispatch actions and

89
00:04:55.050 --> 00:04:57.750
say, all right,
when that actually happens,

90
00:04:57.750 --> 00:05:00.970
effectively doing the same thing
that we're doing in each of these.

91
00:05:00.970 --> 00:05:06.210
But what this allows us to do is
divorce the management of our state

92
00:05:06.210 --> 00:05:09.820
with the actual components that
are rendering the state, all right.

93
00:05:09.820 --> 00:05:14.591
As it stands right now, with the use
state, that is all happening inside of

94
00:05:14.591 --> 00:05:18.178
the component that is also
showing the markup, right?

95
00:05:18.178 --> 00:05:20.419
And it works, and it's not bad, but

96
00:05:20.419 --> 00:05:24.629
it does kinda get a little murky
with those separations of concerns.

97
00:05:24.629 --> 00:05:27.706
Here, we're gonna say, all right, we're
gonna give you the state of the world that

98
00:05:27.706 --> 00:05:29.825
we're managing over in
this reducer over here.

99
00:05:29.825 --> 00:05:32.545
We're gonna give you this dispatch
function to say stuff happened.

100
00:05:32.545 --> 00:05:37.275
But all of the state management is going
to get pulled out of our application.

101
00:05:37.275 --> 00:05:39.855
Now, there's a bunch of really
great things that happen here.

102
00:05:39.855 --> 00:05:45.180
As we mentioned before,
this is just a JavaScript function, right?

103
00:05:45.180 --> 00:05:50.450
As this grows and gets more complicated,
it becomes super easy to unit test, right?

104
00:05:50.450 --> 00:05:51.496
You want to see what's going to happen?

105
00:05:51.496 --> 00:05:55.252
You pass a JavaScript object which is the
state of the world that you're assuming,

106
00:05:55.252 --> 00:05:57.881
you pass in an object which is
the thing that happened, and

107
00:05:57.881 --> 00:06:01.602
you make sure what spits out at the end of
the function is what you thought, right.

108
00:06:01.602 --> 00:06:05.771
You don't necessarily need to mount all
the components and do all that kind of

109
00:06:05.771 --> 00:06:10.069
stuff, because a lot of times the more
complicated logic is happening in this,

110
00:06:10.069 --> 00:06:11.561
even this isn't that bad.

111
00:06:11.561 --> 00:06:14.923
But honestly,
I'd love to unit test that, right?

112
00:06:14.923 --> 00:06:16.834
And I don't want to mount
an entire component to do that.

113
00:06:16.834 --> 00:06:20.701
So by divorcing the state
management from the components,

114
00:06:20.701 --> 00:06:22.722
things become easier to test.

115
00:06:22.722 --> 00:06:24.057
Usually unit testing is not hard.

116
00:06:24.057 --> 00:06:26.902
It's usually we write code that
is hard to unit test, right.

117
00:06:26.902 --> 00:06:31.454
And it's usually, because that's
the big argument for test first, right?

118
00:06:31.454 --> 00:06:34.500
So yeah, we're pulling it out and
we're being able to use it like that.

