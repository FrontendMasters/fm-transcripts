WEBVTT

1
00:00:00.120 --> 00:00:02.755
All right, so
let's take a look at this now.

2
00:00:02.755 --> 00:00:07.330
So we can say for useState, we want to
get that initial value out of there.

3
00:00:07.330 --> 00:00:09.222
So we'll go ahead and we'll say,

4
00:00:09.222 --> 00:00:12.920
getStateFromLocalStorage will
be our initial value.

5
00:00:12.920 --> 00:00:14.055
Verify that that works.

6
00:00:18.547 --> 00:00:22.401
Right, because I decrement, I refresh,
was just putting back to 15 because that's

7
00:00:22.401 --> 00:00:25.750
from our previous example what I
happen to have in local storage.

8
00:00:25.750 --> 00:00:29.580
So we can verify that we are in
fact reading it from local storage.

9
00:00:29.580 --> 00:00:34.820
Now to register an effect, we can
actually just put a second one here.

10
00:00:34.820 --> 00:00:35.911
We can say useEffect.

11
00:00:39.826 --> 00:00:44.247
And we'll say, storeStateInLocalStorage.

12
00:00:44.247 --> 00:00:45.891
We'll give it that count.

13
00:00:45.891 --> 00:00:47.689
Again, because it's using count,

14
00:00:47.689 --> 00:00:50.610
it needs to have the count
in there as its dependency.

15
00:00:50.610 --> 00:00:53.778
So now whenever the count changes, we'll
automatically store it in local storage

16
00:00:53.778 --> 00:00:55.511
and we don't have to
think about it anymore.

17
00:00:58.816 --> 00:01:01.293
We'll decrement, I'll refresh.

18
00:01:01.293 --> 00:01:03.911
It is saved in local storage.

19
00:01:03.911 --> 00:01:06.840
So you're like, this is great.

20
00:01:06.840 --> 00:01:08.300
I want to do this all the time.

21
00:01:09.730 --> 00:01:10.676
I'm into it, right?

22
00:01:10.676 --> 00:01:13.960
But you can see that as you add this stuff
in here, it could get a little tricky.

23
00:01:13.960 --> 00:01:17.716
And one of the things that I kind of want
to point out is these hooks are just

24
00:01:17.716 --> 00:01:18.835
functions, right?

25
00:01:18.835 --> 00:01:21.341
And so we've combined two already.

26
00:01:21.341 --> 00:01:23.673
This idea of setting and using state and

27
00:01:23.673 --> 00:01:28.980
this idea of using effects to update the
document title, to update local storage.

28
00:01:28.980 --> 00:01:30.510
&gt;&gt; Quick with the useEffect.

29
00:01:30.510 --> 00:01:32.610
We're doing that twice
with same dependency,

30
00:01:32.610 --> 00:01:33.500
is that-
&gt;&gt; I mean, I could-

31
00:01:33.500 --> 00:01:35.040
&gt;&gt; Just as an example would, you-

32
00:01:35.040 --> 00:01:35.980
&gt;&gt; I could put two of them in

33
00:01:35.980 --> 00:01:36.640
here as well.

34
00:01:36.640 --> 00:01:37.520
&gt;&gt; So you'd normally split it

35
00:01:37.520 --> 00:01:40.850
out based maybe on what
the dependencies are for each effect?

36
00:01:40.850 --> 00:01:41.730
&gt;&gt; Maybe.

37
00:01:41.730 --> 00:01:44.380
Right, in this case it was to
kind of keep them separate.

38
00:01:44.380 --> 00:01:47.820
I'm about to refactor out,
use local storage as its own.

39
00:01:47.820 --> 00:01:49.980
&gt;&gt; Gotcha.
&gt;&gt; Right, so in that case,

40
00:01:49.980 --> 00:01:51.550
I need them separate.

41
00:01:51.550 --> 00:01:52.800
Cuz I know that I'm gonna refactor it.

42
00:01:52.800 --> 00:01:54.500
But could you theoretically
do this as well?

43
00:01:56.040 --> 00:01:59.396
&gt;&gt; Since they're just JavaScript
functions, there's no big impact to having

44
00:01:59.396 --> 00:02:02.296
multiple useEffect statements
versus putting it all [INAUDIBLE].

45
00:02:02.296 --> 00:02:04.317
&gt;&gt; Right, I would imagine if
you got really carried away,

46
00:02:04.317 --> 00:02:07.125
you could take it to its natural
conclusion, create a performance problem.

47
00:02:07.125 --> 00:02:09.566
But I challenge you to
measure that one and

48
00:02:09.566 --> 00:02:13.700
find it before we actually call it
out as never do those kind of things.

49
00:02:13.700 --> 00:02:14.747
&gt;&gt; Sure.

50
00:02:14.747 --> 00:02:17.265
&gt;&gt; You trade off the creation and

51
00:02:17.265 --> 00:02:22.812
invocation of an additional
function over modularity, right?

52
00:02:22.812 --> 00:02:25.263
And so it's like, do you want
an architecture that you can sustain?

53
00:02:25.263 --> 00:02:26.995
Or do you want
the nanoseconds performance?

54
00:02:26.995 --> 00:02:30.527
And I'm not saying that that
was a softball question.

55
00:02:30.527 --> 00:02:33.450
Sometimes you need those
nanoseconds of performance.

56
00:02:33.450 --> 00:02:36.230
And sometimes you need
the architectural tradeoffs.

57
00:02:36.230 --> 00:02:38.990
We'll actually see that in the next app.

58
00:02:38.990 --> 00:02:40.200
We'll do something.

59
00:02:40.200 --> 00:02:41.530
We'll optimize for performance.

60
00:02:41.530 --> 00:02:44.830
Then we'll optimize for our sanity and
undo our performance optimizations.

61
00:02:44.830 --> 00:02:48.510
So that is a real question, and
the answer is always, it depends.

62
00:02:49.740 --> 00:02:51.800
Which is really unsatisfying.

63
00:02:51.800 --> 00:02:53.333
But again, here we are.

