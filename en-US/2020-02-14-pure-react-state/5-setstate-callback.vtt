WEBVTT

1
00:00:00.590 --> 00:00:02.781
All right, so
there's a little bit more as well.

2
00:00:02.781 --> 00:00:07.042
We'll go ahead and just for clarity, so
we're not jumping up and down the page,

3
00:00:07.042 --> 00:00:09.873
I'm gonna put that back now
that I've made my point.

4
00:00:12.584 --> 00:00:13.950
So we can see everything in one place.

5
00:00:15.250 --> 00:00:22.813
Also turns out, that this dot
state takes two arguments, right?

6
00:00:22.813 --> 00:00:27.210
One, is either the object or
the function as we saw before, great.

7
00:00:27.210 --> 00:00:29.020
The second one is,

8
00:00:29.020 --> 00:00:33.620
some function that we will call after
it has updated the state, right.

9
00:00:33.620 --> 00:00:37.530
So before when I made you look at that
console log and it was still zero, right?

10
00:00:37.530 --> 00:00:40.220
That was setting us up for the fact that

11
00:00:40.220 --> 00:00:42.990
we might want to do something
after that value has been updated.

12
00:00:42.990 --> 00:00:45.395
We can not go ahead and do it here.

13
00:00:50.321 --> 00:00:52.770
Cuz that will be the old value, right.

14
00:00:52.770 --> 00:00:55.390
So if we want to do something afterwards,
I mean we can get fancy with like

15
00:00:55.390 --> 00:00:58.260
component and update and
a bunch of stuff like that.

16
00:00:58.260 --> 00:01:02.370
But that seems like a lot a ceremony
just to get the new value.

17
00:01:02.370 --> 00:01:05.558
Turns out the second argument is what
we might call a callback function.

18
00:01:09.987 --> 00:01:13.682
And this function's called after
the state has been updated.

19
00:01:13.682 --> 00:01:18.571
[SOUND] All right, so it'll go ahead.

20
00:01:18.571 --> 00:01:21.010
It'll run this function
to update the state.

21
00:01:21.010 --> 00:01:24.290
It will call this function after
the state has been updated.

22
00:01:24.290 --> 00:01:26.530
Let's go ahead and try that out.

23
00:01:26.530 --> 00:01:32.997
I'm gonna put a second note there as well,
So you can see after.

24
00:01:32.997 --> 00:01:37.470
If you threw one in here just to prove to
you that I wasn't lying to you before.

25
00:01:39.510 --> 00:01:45.100
We'll see that even though this one comes
after it in terms of lines of code,

26
00:01:45.100 --> 00:01:48.339
it is executed before because JavaScript
is asynchronous, and everything is hard.

27
00:01:49.420 --> 00:01:53.590
So you can see the before fires, after.

28
00:01:54.920 --> 00:01:56.680
Before fires,
obviously before the change, but

29
00:01:56.680 --> 00:01:58.850
even though it was written
afterwards cuz this is asynchronous.

30
00:01:58.850 --> 00:02:00.570
So if you need that new value,

31
00:02:00.570 --> 00:02:06.730
then you end up in the situation
where you have to use this callback.

32
00:02:06.730 --> 00:02:09.710
So there's a bunch of reasons why
you might want to do this, right?

33
00:02:09.710 --> 00:02:14.290
I'm going to implement one and then you're
going to implement another one, right?

34
00:02:14.290 --> 00:02:17.980
And so I'm going to say, hey, I would
love for this counter for some reason.

35
00:02:17.980 --> 00:02:23.890
I'm trying to count how many times
someone didn't wash their plate.

36
00:02:25.040 --> 00:02:29.080
And I was just keeping track of it,
right, because I'm a small person.

37
00:02:29.080 --> 00:02:32.080
And I wanna store that in local storage
because the problem with this counter is

38
00:02:32.080 --> 00:02:35.460
every time I refresh the page,
we go back down to zero.

39
00:02:35.460 --> 00:02:38.280
That doesn't help if I'm like holding
a grudge against somebody, and

40
00:02:38.280 --> 00:02:42.790
I'm trying to like keep copious notes
on all the ways that they've upset me.

41
00:02:42.790 --> 00:02:45.530
So what we wanna do is,
we're gonna store it in local storage.

42
00:02:45.530 --> 00:02:47.090
I'm gonna write one that
stores in local storage,

43
00:02:47.090 --> 00:02:50.400
and then you're going to
do something very similar,

44
00:02:50.400 --> 00:02:53.150
but we're gonna change the document
title to show us the same count.

45
00:02:53.150 --> 00:02:55.151
Both of these are when the state changes,

46
00:02:55.151 --> 00:02:57.733
we want to show something
somewhere else on the page.

47
00:02:57.733 --> 00:03:00.703
Like places where we didn't think about
it either in the local storage, or

48
00:03:00.703 --> 00:03:01.420
in the title bar.

49
00:03:01.420 --> 00:03:04.660
Like other places later on in this
workshop will actually store in a query

50
00:03:04.660 --> 00:03:08.020
parameter in the URL, right, so
that we can actually persist it and

51
00:03:08.020 --> 00:03:09.710
load the counter up and like, share.

52
00:03:09.710 --> 00:03:11.166
I want to say like, listen,

53
00:03:11.166 --> 00:03:14.510
this is how many times Cody
didn't put his plate in the sink.

54
00:03:14.510 --> 00:03:16.120
Right, and
I can share that link and slack.

55
00:03:16.120 --> 00:03:17.330
We can all commiserate on it.

56
00:03:17.330 --> 00:03:17.830
It'll be great.

