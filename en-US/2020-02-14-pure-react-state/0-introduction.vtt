WEBVTT

1
00:00:00.000 --> 00:00:03.286
We're gonna talk about some
State Management in React.

2
00:00:03.286 --> 00:00:07.485
We'll kind of get into the weeds on some
ways that we have done State Management in

3
00:00:07.485 --> 00:00:08.059
the past.

4
00:00:08.059 --> 00:00:12.495
Some ways that we might consider doing
in the future and some patterns for

5
00:00:12.495 --> 00:00:17.640
handling some of the trickier parts
of managing State and an application.

6
00:00:17.640 --> 00:00:23.135
My name is Steve Kinney and
I am a Senior Principal Engineer and

7
00:00:23.135 --> 00:00:25.510
frontend architect at Twilio.

8
00:00:25.510 --> 00:00:29.350
So if you've ever gotten like a
programmatic text message when you're like

9
00:00:29.350 --> 00:00:31.750
lift is coming or
something along those lines.

10
00:00:31.750 --> 00:00:35.486
Somebody else who works in my company
made it possible for you to send that.

11
00:00:35.486 --> 00:00:39.259
Or if you get an email when you lose an
eBay auction that you shouldn't have been

12
00:00:39.259 --> 00:00:40.180
on anyway.

13
00:00:40.180 --> 00:00:44.854
That email comes on this single
side where I used to work before we

14
00:00:44.854 --> 00:00:47.029
become one big happy family.

15
00:00:47.029 --> 00:00:51.261
We're used to work on a large email, like
marketing campaign email editor built in

16
00:00:51.261 --> 00:00:55.018
React, which is really cool cuz you
get to use like modern technologies.

17
00:00:55.018 --> 00:00:58.325
And then to build HTML emails
which use like tables and

18
00:00:58.325 --> 00:01:03.850
have to render in Outlook 2003, which uses
Microsoft words HTML rendering engine.

19
00:01:03.850 --> 00:01:04.897
So it's a lot of fun.

20
00:01:04.897 --> 00:01:08.069
And so a lot of this comes
from the experience of kinda

21
00:01:08.069 --> 00:01:11.977
building some of the more
complicated applications at Twilio.

22
00:01:11.977 --> 00:01:13.901
That kind of inspire
some of the thoughts and

23
00:01:13.901 --> 00:01:16.930
patterns around what we're
gonna talk about today.

24
00:01:16.930 --> 00:01:22.140
So this is a course for talking about
how to keep your state actually

25
00:01:22.140 --> 00:01:27.590
manageable when your application is no
longer a like little toy application.

26
00:01:27.590 --> 00:01:29.549
Now, the irony is not
lost on me that in so

27
00:01:29.549 --> 00:01:32.904
far that it takes a lot of time to
wrap your head around a big code base.

28
00:01:32.904 --> 00:01:36.435
We will be using relatively small toy
applications to highlight the problems

29
00:01:36.435 --> 00:01:38.400
that you'll see in a bigger application.

30
00:01:38.400 --> 00:01:41.320
But I like to think of the more
as like the vignettes, right?

31
00:01:42.570 --> 00:01:44.473
We'll kind of isolate
some of the problems,

32
00:01:44.473 --> 00:01:46.740
solve them,
think about how we could refactor them.

33
00:01:46.740 --> 00:01:50.285
Think about some of the tradeoffs that we
make as we go about doing some of these

34
00:01:50.285 --> 00:01:51.439
different approaches.

35
00:01:51.439 --> 00:01:54.069
Sometimes we'll solve a problem and
introduce a new problem.

36
00:01:54.069 --> 00:01:57.907
And it will go solve that problem and
then reinvent the old problem, right?

37
00:01:57.907 --> 00:02:01.345
At least, step one is understanding the
trade offs you're making rather than half

38
00:02:01.345 --> 00:02:04.504
writing blog posts and just throwing
stuff in there and hoping for the best.

39
00:02:04.504 --> 00:02:08.425
Not that I have ever done that.

40
00:02:08.425 --> 00:02:08.981
It's happened.

41
00:02:08.981 --> 00:02:11.679
In this course we're just
gonna be talking about React.

42
00:02:11.679 --> 00:02:16.260
There are other frontend masters
courses on Redux and MobX.

43
00:02:16.260 --> 00:02:19.115
I heard they're wonderful.
And I heard the instructor is hilarious.

44
00:02:19.115 --> 00:02:22.460
You should totally watch them.

45
00:02:22.460 --> 00:02:24.495
But that's not what we're
gonna talk about today.

46
00:02:24.495 --> 00:02:26.760
What are we gonna talk about today?

47
00:02:26.760 --> 00:02:30.073
Well, we're gonna talk about what
a state actually mean, right?

48
00:02:30.073 --> 00:02:32.916
That seems important if we're gonna spend
this time together talking about how to

49
00:02:32.916 --> 00:02:34.326
implement it and some of the trade offs.

50
00:02:34.326 --> 00:02:38.291
We'll learn a little bit about
the inner workings of this.setState and

51
00:02:38.291 --> 00:02:40.650
kind of based component state.

52
00:02:40.650 --> 00:02:45.610
Then we'll look at class-based
components and the new React Hook API.

53
00:02:45.610 --> 00:02:47.300
Hooks came out about a year ago.

54
00:02:47.300 --> 00:02:49.740
So they're here to stay at this point.

55
00:02:49.740 --> 00:02:50.575
They're not going anywhere.

56
00:02:50.575 --> 00:02:56.060
Which gives us an interesting
position that we're in, right?

57
00:02:56.060 --> 00:03:00.430
Like most of future code,
would probably written using Hooks.

58
00:03:00.430 --> 00:03:04.448
But we can safely assume that all code
written prior to one year ago was

59
00:03:04.448 --> 00:03:07.091
not using Hooks because they didn't exist.

60
00:03:07.091 --> 00:03:08.658
And that is how time works.

61
00:03:08.658 --> 00:03:13.475
So we'll talk a little bit about
the subtle differences and how things that

62
00:03:13.475 --> 00:03:18.075
look like they behave the same do
not actually behave the same, right?

63
00:03:18.075 --> 00:03:21.141
Cuz as you begin to refactor some of the
code, if you're not aware of those things.

64
00:03:21.141 --> 00:03:24.584
It's like those little tiny bugs
that make you lose a morning and

65
00:03:24.584 --> 00:03:28.284
consider not doing this awful
engineering thing anymore at all, and

66
00:03:28.284 --> 00:03:31.370
maybe just starting a vegan
food truck instead.

67
00:03:31.370 --> 00:03:35.100
So well, we'll kinda talk about
some of the reasons we refactor

68
00:03:35.100 --> 00:03:37.310
some things that will
influence some of them.

69
00:03:37.310 --> 00:03:38.398
Most of the course will be using Hooks.

70
00:03:38.398 --> 00:03:43.418
But we will kind of make certain nods to
the differences between how things have

71
00:03:43.418 --> 00:03:48.224
been from about 2013 to 2018 and
how things will be going forward.

72
00:03:48.224 --> 00:03:52.895
We'll explore some of the APIs for
navigating around prop-drilling.

73
00:03:52.895 --> 00:03:54.056
We'll also talk about
what prop-drilling is.

74
00:03:54.056 --> 00:03:57.556
We'll look at reducers for
advanced state management.

75
00:03:57.556 --> 00:03:59.681
We'll writing some of
our own custom hooks and

76
00:03:59.681 --> 00:04:02.198
we'll do fun stuff like store
stuff in local storage.

77
00:04:02.198 --> 00:04:04.806
We'll store some state
in the URL parameters.

78
00:04:04.806 --> 00:04:08.861
Maybe we'll even get state from
a server using an API call,

79
00:04:08.861 --> 00:04:14.122
cuz I've been told that's a thing
that people do in their applications.

80
00:04:14.122 --> 00:04:18.042
So it seems important
that we should cover it.

81
00:04:18.042 --> 00:04:21.200
But first, before we get into all of that,

82
00:04:21.200 --> 00:04:25.800
let's talk a little bit about
understanding what State actually is.

83
00:04:25.800 --> 00:04:30.684
So from a very high level,
the job of React is to take basically,

84
00:04:30.684 --> 00:04:36.392
the state of your application,
the business logic, some amount of data.

85
00:04:36.392 --> 00:04:43.062
And figure a bunch of rules to turn it
into some DOM nodes on the page, right?

86
00:04:43.062 --> 00:04:46.560
And this is a little bit different
from how we did it ten years ago,

87
00:04:46.560 --> 00:04:48.990
even where you might have had a page,
right?

88
00:04:48.990 --> 00:04:50.947
And the markup might have included
all of the data on the page.

89
00:04:50.947 --> 00:04:56.756
Or it might have included all of
the catalog items for the catalog.

90
00:04:56.756 --> 00:05:00.484
And then if something user clicked on,
so you might have like read the DOM you

91
00:05:00.484 --> 00:05:04.854
might have gone like .parent() .parent()
.parent() title to get the title, so

92
00:05:04.854 --> 00:05:05.683
on and so forth.

93
00:05:05.683 --> 00:05:09.532
And the actual UI held the state of our
application, we read it from there and

94
00:05:09.532 --> 00:05:11.229
then manipulated based on that.

95
00:05:11.229 --> 00:05:16.031
And that becomes really hard to maintain
as we all found out together as one

96
00:05:16.031 --> 00:05:20.795
big industry as we just accrued so
much tech debt that it was crushing us.

97
00:05:20.795 --> 00:05:24.581
So one of the things React brings to
the table is we can keep everything in

98
00:05:24.581 --> 00:05:28.636
an object or an array or some set of
regular old JavaScript data structures.

99
00:05:28.636 --> 00:05:31.113
Hand it to a bunch of rules about
how components should look and

100
00:05:31.113 --> 00:05:33.557
what should happen when a user
interacts with them, right?

101
00:05:33.557 --> 00:05:37.356
And as that state data changes,
our application should change.

102
00:05:37.356 --> 00:05:38.818
And there's a bunch of fancy stuff,

103
00:05:38.818 --> 00:05:41.090
this is obviously a giant
oversimplification, right?

104
00:05:41.090 --> 00:05:45.535
There's stuff like the virtual DOM which
figures, okay, things have changed.

105
00:05:45.535 --> 00:05:47.765
What is the least terrible to do that,

106
00:05:47.765 --> 00:05:50.983
to update the DOM in the most
performant way possible?

107
00:05:50.983 --> 00:05:55.945
There's a whole bunch of other
obvious cool stuff going on in React.

108
00:05:55.945 --> 00:06:03.270
But the oversimplification is data,
rules, what shows under the page, right?

109
00:06:03.270 --> 00:06:04.610
Events and stuff like that, right?

110
00:06:04.610 --> 00:06:06.680
And so this kind of how we think about and

111
00:06:06.680 --> 00:06:08.900
work with our data is
critically important, right?

112
00:06:08.900 --> 00:06:11.650
Because a lot of times we
can start to do all these

113
00:06:11.650 --> 00:06:14.180
fun performance optimizations and
stuff like that.

114
00:06:14.180 --> 00:06:17.610
But a lot of this comes down to the basic
data structures in our application,

115
00:06:17.610 --> 00:06:19.410
how we think about it,
how we work about it?

116
00:06:19.410 --> 00:06:23.869
I would argue that when client side
applications become unmanageable,

117
00:06:23.869 --> 00:06:28.400
is usually cuz managing the state has
become just incredibly difficult,

118
00:06:28.400 --> 00:06:29.727
right, and tricky.

119
00:06:29.727 --> 00:06:32.759
So by kind of thinking more in
advanced about these things.

120
00:06:32.759 --> 00:06:36.141
And one of the things we do at Twilio is a
lot of times we have a blueprint process,

121
00:06:36.141 --> 00:06:39.324
which is we write out how this system
is supposed to work before we implement

122
00:06:39.324 --> 00:06:40.120
it, right?

123
00:06:40.120 --> 00:06:43.300
So we can think through these kind
of externalities as we go forward.

