WEBVTT

1
00:00:00.000 --> 00:00:04.959
But now anyone can use use fetch in the
application and I don't think about it.

2
00:00:04.959 --> 00:00:07.380
Now, is there probably a use fetch on MPM?

3
00:00:07.380 --> 00:00:08.235
I bet there is.

4
00:00:08.235 --> 00:00:10.129
All right, there's probably
ones that hook into Axios.

5
00:00:10.129 --> 00:00:13.787
It's MPM,
there's probably 42 of them, right,

6
00:00:13.787 --> 00:00:18.196
with varying degrees of maintainability or
being maintained.

7
00:00:18.196 --> 00:00:20.514
But what I would challenge
you is four things,

8
00:00:20.514 --> 00:00:23.428
even interacting with your own API,
there's probably,

9
00:00:23.428 --> 00:00:27.184
okay we always get from this API and
then we always have to format this data.

10
00:00:27.184 --> 00:00:28.320
Don't do that in the components.

11
00:00:28.320 --> 00:00:31.709
Where can you take the extractions in
your application and make a hook so

12
00:00:31.709 --> 00:00:34.095
that you don't have to
ever think about it again.

13
00:00:34.095 --> 00:00:34.866
Right?

14
00:00:34.866 --> 00:00:39.738
It could be just a load stat young,
use stats, which hits the API,

15
00:00:39.738 --> 00:00:41.397
does the formatting.

16
00:00:41.397 --> 00:00:45.301
A lot of times I don't know about the rest
of y'all, but I work in an API company and

17
00:00:45.301 --> 00:00:47.013
they're very wonderful, right?

18
00:00:47.013 --> 00:00:51.406
But we use our public API's and our
public API's a lot of times are built for

19
00:00:51.406 --> 00:00:55.403
developers writing integrations
with either Twilio or SendGrid.

20
00:00:55.403 --> 00:00:59.948
They're not always written for
building user interfaces on top of that.

21
00:00:59.948 --> 00:01:02.569
So sometimes,
I see some nods in the room, right?

22
00:01:02.569 --> 00:01:05.870
Sometimes I gotta do a little
bit of stitching, right?

23
00:01:05.870 --> 00:01:09.322
Yeah, in a perfect world with infinite
time, the engineers that I work with would

24
00:01:09.322 --> 00:01:11.535
be totally happy to make any
damn points that I want.

25
00:01:11.535 --> 00:01:13.562
But sometimes we're rushing
to get a feature done.

26
00:01:13.562 --> 00:01:15.965
We got to do some stuff, but
we're stitching together multiple API's.

27
00:01:15.965 --> 00:01:19.082
And so what I do in those cases is I try
to extract that I do not want to keep that

28
00:01:19.082 --> 00:01:19.639
component.

29
00:01:19.639 --> 00:01:23.529
I don't wanna keep that in my logic
anywhere in my component tree.

30
00:01:23.529 --> 00:01:24.439
I don't wanna write it twice.

31
00:01:24.439 --> 00:01:27.366
I wanna put it one place in one hook or
higher order component or

32
00:01:27.366 --> 00:01:28.840
something along those lines.

33
00:01:28.840 --> 00:01:32.416
And then when we get around to fixing it,
after we've shipped, and

34
00:01:32.416 --> 00:01:36.774
we do the maintenance retractions that we
wanna do, I change it in that one place.

35
00:01:36.774 --> 00:01:40.565
Any time you have to do
something squirrely,

36
00:01:40.565 --> 00:01:43.173
put it in a box with a nice name.

37
00:01:43.173 --> 00:01:47.422
And hide all of your demons
deep in your code base right?

38
00:01:47.422 --> 00:01:49.485
Do not leave them out everywhere,

39
00:01:49.485 --> 00:01:53.265
hide them with well named functions
cuz then it's like great.

40
00:01:53.265 --> 00:01:58.824
[LAUGH] Leaving it exposed is bad
hiding it is good hide your problems.

41
00:01:58.824 --> 00:02:02.125
That's existential advice as well.

42
00:02:02.125 --> 00:02:02.932
All right,

43
00:02:02.932 --> 00:02:08.517
let's talk a little bit about you might
notice that I'm using promise chaining.

44
00:02:08.517 --> 00:02:14.415
Right, and to be clear,
I like promise chaining.

45
00:02:14.415 --> 00:02:17.271
I actually liked that API I know
that you know, with async await and

46
00:02:17.271 --> 00:02:20.436
I love async await but for actually
making a sync request, I prefer this.

47
00:02:20.436 --> 00:02:23.762
And we'll kind of see why I
prefer it in general, but

48
00:02:23.762 --> 00:02:25.886
I also prefer it with use effect.

49
00:02:25.886 --> 00:02:29.422
And one of the reasons is,
is that you cannot pass

50
00:02:29.422 --> 00:02:34.350
an async function directly to use
effect cuz they return promises.

51
00:02:34.350 --> 00:02:35.776
It's tricky.

52
00:02:35.776 --> 00:02:40.800
And so you still need to have
an overall function in there, right and

53
00:02:40.800 --> 00:02:45.220
then you can have a child async
a function that you kick off.

54
00:02:45.220 --> 00:02:50.157
So if I did wanna refactor this
a little bit to use an async

55
00:02:50.157 --> 00:02:55.725
function I could do that,
you will see why I typically don't,

56
00:02:55.725 --> 00:02:59.105
but we'll see why you could, right?

57
00:02:59.105 --> 00:03:02.994
But I also just like the syntax better
in general, so those are my biases,

58
00:03:02.994 --> 00:03:05.530
which I might as well just
put out there for you.

59
00:03:05.530 --> 00:03:11.138
So again, this cannot be an async
function right there, we cannot do this,

60
00:03:11.138 --> 00:03:16.504
but we can have a regular function that
then has a regular function in it.

61
00:03:16.504 --> 00:03:24.118
All right, so I could say something like,
Or fetchUrl, whatever we wanna call it.

62
00:03:24.118 --> 00:03:25.738
Call it fetchUrl, that seems fine.

63
00:03:30.321 --> 00:03:35.270
And that'll be an async function,
where I can do the whole try.

64
00:03:35.270 --> 00:03:40.943
And this point we'll say, Const

65
00:03:40.943 --> 00:03:48.612
response = await fetch(url).

66
00:03:48.612 --> 00:03:53.051
And then from there we'll say, I've got
to name it something else, we called it

67
00:03:53.051 --> 00:03:57.515
response last time before, we'll say
away and we'll call it response.Json.

68
00:04:00.810 --> 00:04:06.631
Cool and
then we'll do self response, Data.

69
00:04:06.631 --> 00:04:10.667
If anything blows up, catch the air.

70
00:04:10.667 --> 00:04:12.820
I will say set.

71
00:04:12.820 --> 00:04:16.224
There is one nice thing I may be able
to do here in the try catch block.

72
00:04:16.224 --> 00:04:21.105
Which is as before I haven't jacking
around with the loading stuff yet and

73
00:04:21.105 --> 00:04:24.503
each case cuz with try catch
blocks I have finally.

74
00:04:29.419 --> 00:04:31.384
Whether it went well,
whether it went poorly.

75
00:04:31.384 --> 00:04:33.570
It went, right.

76
00:04:33.570 --> 00:04:34.918
And we're no longer loading.

77
00:04:34.918 --> 00:04:38.388
Now my understanding, this is, somebody
should validate this before I actually say

78
00:04:38.388 --> 00:04:39.894
it out loud, but we're recording.

79
00:04:39.894 --> 00:04:44.553
So let's go for it, is that there
is finally a method being added to

80
00:04:44.553 --> 00:04:49.314
the Promise API in standard
JavaScript I don't know when it lands.

81
00:04:49.314 --> 00:04:54.960
But so the nice part is we get
all of this finally stuff.

82
00:04:54.960 --> 00:04:56.997
The other thing is we do
need to kick off this.

83
00:04:56.997 --> 00:05:01.661
So we'd have to say fetch URL because just
defining a thing function isn't gonna

84
00:05:01.661 --> 00:05:02.697
fetch anything.

85
00:05:02.697 --> 00:05:05.524
So let me just comment this one out.

86
00:05:08.623 --> 00:05:11.745
So we kinda define an async function,
and then we can kick it off and call it.

87
00:05:11.745 --> 00:05:16.976
I don't like it, but if you have a bunch
of async a way code that you're moving,

88
00:05:16.976 --> 00:05:21.662
or if there's another context where
you need to use an async function,

89
00:05:21.662 --> 00:05:23.090
this is how you do it.

90
00:05:23.090 --> 00:05:24.786
I choose not to.

91
00:05:24.786 --> 00:05:28.867
[LAUGH] Right, but this will do
the trick as you can see and so

92
00:05:28.867 --> 00:05:31.711
far that everything loaded once again.

93
00:05:31.711 --> 00:05:33.087
So it's up to you,

94
00:05:33.087 --> 00:05:39.121
again could you probably do something
fancy with an immediately evoked function?

95
00:05:39.121 --> 00:05:40.804
I'm sure that you could but

96
00:05:40.804 --> 00:05:44.912
as you can tell that is just not my
favorite thing to do in the world.

97
00:05:44.912 --> 00:05:49.730
All right, as we mentioned before,
we could also

98
00:05:49.730 --> 00:05:54.677
kind of use a reducer
pattern here as well, right?

99
00:05:54.677 --> 00:05:58.463
And we could just say, instead of
setting all this stuff on and off,

100
00:05:58.463 --> 00:06:01.265
we could have a reducer as basically,
all right.

101
00:06:01.265 --> 00:06:03.415
Are we fetching, did we get a response,
did we get an error?

102
00:06:03.415 --> 00:06:06.900
And that can then trigger all
the flags the way that it needs to be.

