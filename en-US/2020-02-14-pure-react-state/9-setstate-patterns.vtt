WEBVTT

1
00:00:00.159 --> 00:00:04.632
So this is kind of a lot to
think about this a little bit as

2
00:00:04.632 --> 00:00:09.694
a public service announcement
around things you should do and

3
00:00:09.694 --> 00:00:14.193
not do, predominantly not
do with state management.

4
00:00:14.193 --> 00:00:18.577
I regret to inform you that
I have seen all of these.

5
00:00:18.577 --> 00:00:23.478
So this is like they go and usually like
most things like this don't happen from

6
00:00:23.478 --> 00:00:28.304
someone right here, they come from like
a series of refactorings over time,

7
00:00:28.304 --> 00:00:33.147
where you end up in a given situation
through many small well meaning things.

8
00:00:33.147 --> 00:00:37.961
And so just to kind of call them out
when you see them cuz they could have

9
00:00:37.961 --> 00:00:39.796
some some implications.

10
00:00:39.796 --> 00:00:43.260
So one of the things, we do need to
remember is let's say that we don't

11
00:00:43.260 --> 00:00:45.843
say of any kind of,
with props, we have PropTypes,

12
00:00:45.843 --> 00:00:49.280
so we can say, there should be a string or
there should be a number.

13
00:00:49.280 --> 00:00:51.298
You can get a little squarely with state.

14
00:00:51.298 --> 00:00:53.407
Now if you something like
typescript a flow, some issue,

15
00:00:53.407 --> 00:00:55.828
there should always be a number,
there should always be a string.

16
00:00:55.828 --> 00:00:59.390
But it is important to
realize that with state,

17
00:00:59.390 --> 00:01:05.015
you don't necessarily have the same
safeguards that you have with props.

18
00:01:05.015 --> 00:01:07.366
And so a lot of times I like
this damn even off tweet,

19
00:01:07.366 --> 00:01:11.089
which you have to use in any talking about
react you have to like reference at least

20
00:01:11.089 --> 00:01:14.079
one damage even off tweet in order for
you to be taken seriously.

21
00:01:14.079 --> 00:01:17.187
So this is my foray into
that which is all right,

22
00:01:17.187 --> 00:01:22.724
should we keep something in actual react
state, can we calculate it from the props?

23
00:01:22.724 --> 00:01:24.025
I'll go into what that means.

24
00:01:24.025 --> 00:01:26.568
If you can calculate it from
props that were passed in,

25
00:01:26.568 --> 00:01:28.131
you should not store it in state.

26
00:01:28.131 --> 00:01:30.944
And we'll see a quick
example of that in a second.

27
00:01:30.944 --> 00:01:34.954
If you're not using it in the render
method, you should not store Oregon State.

28
00:01:34.954 --> 00:01:37.956
The reason we have to use this
as a state or the hook for

29
00:01:37.956 --> 00:01:41.927
your state is because we want to be like,
I want to update this value.

30
00:01:41.927 --> 00:01:48.101
And I also want to tell react to go ahead
and rerender to figure out what changed.

31
00:01:48.101 --> 00:01:52.556
If you're not rendering it you don't need
to store it in state because you don't

32
00:01:52.556 --> 00:01:53.743
want react to run it.

33
00:01:53.743 --> 00:01:56.319
You can just use regular old JavaScript.

34
00:01:56.319 --> 00:01:58.389
You can store it as a class property.

35
00:01:58.389 --> 00:02:00.130
You can store it in a variable.

36
00:02:00.130 --> 00:02:01.368
You can do anything along those lines.

37
00:02:01.368 --> 00:02:02.299
You can put it on a method.

38
00:02:02.299 --> 00:02:07.035
You only want to do stuff that when it
changes, I want to trigger that rerender.

39
00:02:07.035 --> 00:02:09.172
If those two things aren't true,
then maybe yeah,

40
00:02:09.172 --> 00:02:10.734
you should be using back state for it.

41
00:02:10.734 --> 00:02:14.110
So what does it mean by
derivations of props?

42
00:02:14.110 --> 00:02:18.198
A really great example that I've seen from
time to time is when you take two other

43
00:02:18.198 --> 00:02:22.471
things, and the easiest example here is,
all right, this component got in a first

44
00:02:22.471 --> 00:02:26.710
name and a last name property, for showing
a user profile or something like that.

45
00:02:26.710 --> 00:02:30.082
Cool, let's put a space in between and
store that in state.

46
00:02:30.082 --> 00:02:31.575
The problem is, is, and

47
00:02:31.575 --> 00:02:36.345
we'll see this in a much later example
when we're actually using routing, but

48
00:02:36.345 --> 00:02:40.350
the same component can be reused
on the page with different props.

49
00:02:40.350 --> 00:02:44.138
And since this only happens in
the constructor, what happens there is,

50
00:02:44.138 --> 00:02:46.384
this won't get re-calculated, right?

51
00:02:46.384 --> 00:02:48.258
You'll still have the old,
full name, right,

52
00:02:48.258 --> 00:02:49.685
which is probably not what you want.

53
00:02:49.685 --> 00:02:54.409
And again, that is not necessarily
an error, per se, it is how react behaves.

54
00:02:54.409 --> 00:02:55.637
So you're not gonna get an error message.

55
00:02:55.637 --> 00:02:59.260
It's just gonna be one of those things
where, suddenly, it's not doing the thing

56
00:02:59.260 --> 00:03:02.381
you think it's supposed to do, and
you don't know how to handle that.

57
00:03:02.381 --> 00:03:03.863
So what should you do?

58
00:03:03.863 --> 00:03:07.726
Well, you can just put the props
together as you need them.

59
00:03:07.726 --> 00:03:09.582
So you could do it in
the render method like this.

60
00:03:09.582 --> 00:03:12.763
Now, if the props change that
will trigger the render method,

61
00:03:12.763 --> 00:03:14.575
everything will work as expected.

62
00:03:14.575 --> 00:03:17.962
If you don't like that, and
using a class component,

63
00:03:17.962 --> 00:03:20.919
you could theoretically
make your own method.

64
00:03:20.919 --> 00:03:22.685
You'll notice the get key word here.

65
00:03:22.685 --> 00:03:23.482
All get does,

66
00:03:23.482 --> 00:03:27.742
is it lets you call it like a property
without having to use the parenthesis.

67
00:03:27.742 --> 00:03:31.214
So that gives you effectively
the same effect, but

68
00:03:31.214 --> 00:03:34.532
in a way it will actually
respond to the process.

69
00:03:34.532 --> 00:03:37.562
We're not actually kinda
accidentally caching stuff and

70
00:03:37.562 --> 00:03:39.055
state that you shouldn't.

71
00:03:39.055 --> 00:03:43.143
And if you don't wanna shove everything
to the render method like I saw before,

72
00:03:43.143 --> 00:03:44.434
you can break stuff out.

73
00:03:44.434 --> 00:03:47.714
So, for instance,
if you wanted to pull out,

74
00:03:47.714 --> 00:03:52.103
render in this user profile component,
you can break it out.

75
00:03:52.103 --> 00:03:55.587
This pattern works all over the place and
if it doesn't use this anywhere,

76
00:03:55.587 --> 00:03:58.573
you could actually just pull it
out into a regular old function,

77
00:03:58.573 --> 00:04:00.582
this would actually be more performance.

78
00:04:00.582 --> 00:04:02.902
Because instead of getting
called every time,

79
00:04:02.902 --> 00:04:05.978
it's just one place that's hoisted
up there and to find once.

80
00:04:05.978 --> 00:04:09.473
There's actually battle plug-ins that
will try to go through your code and

81
00:04:09.473 --> 00:04:10.574
do this for you as well.

82
00:04:10.574 --> 00:04:15.386
All right, don't use state for
things you're not going to render.

83
00:04:15.386 --> 00:04:21.185
So this is a really, again,
[LAUGH] inspired by a true story.

84
00:04:21.185 --> 00:04:26.522
Which is like, cool, we wanted to hold
on to this web socket connection or

85
00:04:26.522 --> 00:04:30.930
in this case, like this is a set interval,
the key polling.

86
00:04:30.930 --> 00:04:34.320
But we wanted to hold on to this thing and
continue polling, right and

87
00:04:34.320 --> 00:04:38.246
we'll hold on to state so that we can
access it when the component will unmount.

88
00:04:38.246 --> 00:04:40.585
Like, you don't need to do that.

89
00:04:40.585 --> 00:04:43.289
You can do it with other
life cycle methods, right?

90
00:04:43.289 --> 00:04:46.503
But a lot of times if you don't know
that happens when you think that like,

91
00:04:46.503 --> 00:04:48.565
I need to store this but
you're not rendering it.

92
00:04:48.565 --> 00:04:53.651
&gt;&gt; About the last example that you had
up there with the alternative approach

93
00:04:53.651 --> 00:04:59.391
is that the reason why I guess I'm looking
what about get derived state from props,

94
00:04:59.391 --> 00:05:04.416
the life cycle method there the static
method that's available there?

95
00:05:04.416 --> 00:05:07.333
&gt;&gt; Yeah,
&gt;&gt; You see a lot of people saying like,

96
00:05:07.333 --> 00:05:11.368
yes this is okay or no,
don't do this because it's bad.

97
00:05:11.368 --> 00:05:14.088
&gt;&gt; Is I have never been convinced
that you need to do it.

98
00:05:14.088 --> 00:05:14.830
&gt;&gt; Okay.
&gt;&gt; Right,

99
00:05:14.830 --> 00:05:18.904
I have never seen a situation where
something similar didn't work out right.

100
00:05:18.904 --> 00:05:23.830
A lot of times a non zero part of my
job is to ask why seven times in a row.

101
00:05:23.830 --> 00:05:25.161
We have to use it.

102
00:05:25.161 --> 00:05:25.775
Why?

103
00:05:25.775 --> 00:05:26.493
Why that?

104
00:05:26.493 --> 00:05:27.130
Why that?

105
00:05:27.130 --> 00:05:29.216
And then eventually is that we don't
actually have to do that, right?

106
00:05:29.216 --> 00:05:33.312
And it's hard in the in the esoteric but
generally speaking,

107
00:05:33.312 --> 00:05:37.584
I haven't found that we always,
rarely do we actually need it.

108
00:05:37.584 --> 00:05:39.772
Does it probably exist in
the codebase that I work on?

109
00:05:39.772 --> 00:05:41.524
It's probably in there somewhere, right?

110
00:05:41.524 --> 00:05:44.959
But generally speaking in a code review,
it usually doesn't pass the kind

111
00:05:44.959 --> 00:05:47.479
of scrutiny of like,
is there kind of a simpler thing?

112
00:05:47.479 --> 00:05:51.917
Because it's really when you're
doing very tricky stuff like that,

113
00:05:51.917 --> 00:05:56.062
to well six months from the you
understand why you did it, right?

114
00:05:56.062 --> 00:05:58.835
And we all thing that we're like
poets when we write comments, and

115
00:05:58.835 --> 00:06:01.521
that we'll always understand what it is,
that never happens.

116
00:06:01.521 --> 00:06:04.503
&gt;&gt; So even before, you did say too,
there's no silver bullet to anything.

117
00:06:04.503 --> 00:06:05.244
&gt;&gt; Mm-hm, yep.

118
00:06:05.244 --> 00:06:09.899
&gt;&gt; But the ideas is that even if you have
to compose multiple pieces of properties

119
00:06:09.899 --> 00:06:15.072
together, of plops together, you don't
necessarily want to store those in state.

120
00:06:15.072 --> 00:06:15.773
&gt;&gt; Yep.

121
00:06:15.773 --> 00:06:20.299
&gt;&gt; Only when have you ever run into
example when you do actually you want to

122
00:06:20.299 --> 00:06:21.916
store them in the state.

123
00:06:21.916 --> 00:06:22.778
&gt;&gt; No,
&gt;&gt; Okay.

124
00:06:22.778 --> 00:06:27.039
&gt;&gt; [LAUGH] That's also just trying to dig
through my memory banks real quick like

125
00:06:27.039 --> 00:06:30.582
I'm sure someone I work with
could get blamed me on something.

126
00:06:30.582 --> 00:06:33.031
And unclear if I was right.

127
00:06:33.031 --> 00:06:39.520
But I'm gonna go with a no as my kind of
like gut check on that one All right.

128
00:06:39.520 --> 00:06:41.451
And then finally,
you can use sensible defaults.

129
00:06:41.451 --> 00:06:44.851
If you are gonna set something with
a component mounts, just make sure that,

130
00:06:44.851 --> 00:06:47.798
cuz if it's gonna be an array,
just start out with an empty array.

131
00:06:47.798 --> 00:06:50.382
That way you don't have to do
conditional logic in the render.

132
00:06:50.382 --> 00:06:53.670
Cuz if you're gonna map over undefined,
that's gonna go poorly for you.

