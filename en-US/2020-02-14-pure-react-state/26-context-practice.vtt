WEBVTT

1
00:00:00.180 --> 00:00:02.900
Our mission was to no
longer need the props and

2
00:00:02.900 --> 00:00:06.240
to be able to hook into the contexts
to get the ability to add a new grudge.

3
00:00:06.240 --> 00:00:09.700
So we can start by burning the boats and
just get rid of that.

4
00:00:09.700 --> 00:00:12.560
Now keep in mind, this react memo is
probably causing more harm than good.

5
00:00:12.560 --> 00:00:13.750
We're not gonna do anything about it.

6
00:00:13.750 --> 00:00:16.420
But we're just going to call it out, the
fact of the matter is like this is going

7
00:00:16.420 --> 00:00:19.940
to rerender because it's hooking into
every time that context object changes.

8
00:00:19.940 --> 00:00:23.880
And there's crazy stuff you could do, like
you could separate out dispatch to one

9
00:00:23.880 --> 00:00:28.160
context and the state and another,
and only hook, it's not worth it.

10
00:00:28.160 --> 00:00:31.715
Again, like wait until you actually have a
real performance problem before you start

11
00:00:31.715 --> 00:00:32.290
overengineering.

12
00:00:32.290 --> 00:00:35.600
The whole idea is to
make things less complex.

13
00:00:35.600 --> 00:00:37.520
So we removed that.

14
00:00:38.760 --> 00:00:40.830
And now we just need to
get access to addGrudge.

15
00:00:40.830 --> 00:00:49.376
So we'll say const addGrudge
= React.useContext,

16
00:00:54.562 --> 00:00:56.365
And now we swap this out over here.

17
00:01:00.201 --> 00:01:03.415
And that should do the trick,
let's find out together.

18
00:01:07.822 --> 00:01:09.609
And it's added to the page.

19
00:01:09.609 --> 00:01:12.552
All right, so let's just take a look at
that application component one more time.

20
00:01:12.552 --> 00:01:14.890
And I showed it to you, but
I just wanna point it out.

21
00:01:14.890 --> 00:01:18.310
From all of the complication that we had
when we started with the use state and

22
00:01:18.310 --> 00:01:21.190
the beginning state of this application
where it was managing all of it,

23
00:01:21.190 --> 00:01:24.630
now it is simply, okay,
what does it mean to be this application?

24
00:01:24.630 --> 00:01:25.510
What are those pieces?

25
00:01:25.510 --> 00:01:27.840
And those pieces can hook
into what they need to.

26
00:01:27.840 --> 00:01:29.280
Now we can begin to move stuff around.

27
00:01:29.280 --> 00:01:32.860
And this is really great when you're
prototyping too, because you can basically

28
00:01:32.860 --> 00:01:37.130
do large-scale refactors of
the layout of the application and

29
00:01:37.130 --> 00:01:39.820
not necessarily worry about all these
props getting passed through, right?

30
00:01:39.820 --> 00:01:44.480
If we wanted the new grudge
form to be at the bottom or

31
00:01:44.480 --> 00:01:46.840
to be inside of grudges,
I just move it there.

32
00:01:46.840 --> 00:01:48.645
And it takes all of the state
management with it.

33
00:01:48.645 --> 00:01:52.988
But like I said, we noticed that
there were some trade offs.

34
00:01:52.988 --> 00:01:55.800
So let's just talk about it real quick and
understand what we gained and

35
00:01:55.800 --> 00:01:57.050
what we lost.

36
00:01:57.050 --> 00:02:00.190
We did lose those performance
optimizations that we got with

37
00:02:00.190 --> 00:02:04.410
using useCallback on the dispatch.

38
00:02:06.690 --> 00:02:07.840
Was it the right choice?

39
00:02:07.840 --> 00:02:08.400
It's a tradeoff.

40
00:02:08.400 --> 00:02:14.180
I argue that unless you are actually
solving a performance problem that exists,

41
00:02:14.180 --> 00:02:17.090
maintainability and
the ability to actually add features and

42
00:02:17.090 --> 00:02:20.800
be able to do refactoring
is way more important.

43
00:02:20.800 --> 00:02:23.817
And I would say that, yeah,
this is a very small example, but

44
00:02:23.817 --> 00:02:27.547
there might be even a tiny microcosm
in your application where you use this.

45
00:02:27.547 --> 00:02:30.520
Do you need to always wrap
the entire application component?

46
00:02:30.520 --> 00:02:31.570
No, right?

47
00:02:31.570 --> 00:02:33.600
But if you had a bunch of components
where it's getting a little squirrely,

48
00:02:33.600 --> 00:02:37.640
you might go around the kind
of highest level of that,

49
00:02:37.640 --> 00:02:40.060
move that into a context,
and have the ability

50
00:02:40.060 --> 00:02:43.340
to kind of move stuff around even in
that smaller part of your application.

51
00:02:43.340 --> 00:02:44.527
Right?
Like Joe asked me,

52
00:02:44.527 --> 00:02:46.203
does this replace it for Redux?

53
00:02:46.203 --> 00:02:48.274
You might use Redux for
all the state management, but

54
00:02:48.274 --> 00:02:51.358
if there is some filtering that you wanna
show in two different places, right,

55
00:02:51.358 --> 00:02:52.890
that might still go to the context API.

56
00:02:52.890 --> 00:02:57.040
You can use the Context API for some
of that ephemeral state as well, right?

57
00:02:57.040 --> 00:02:59.810
Ascending, descending, that might
matter in different places, right?

58
00:02:59.810 --> 00:03:02.912
And so if you need it in two
different parts of the tree,

59
00:03:02.912 --> 00:03:05.279
it feels weird put that in Redux, right?

60
00:03:05.279 --> 00:03:09.454
But it might make total sense too, because
even with Redux, like we end up with a lot

61
00:03:09.454 --> 00:03:12.573
of that boilerplate around like
connect and stuff like that.

62
00:03:12.573 --> 00:03:18.031
It might make sense to use them
kind of interchangeably as well.

63
00:03:18.031 --> 00:03:19.913
And like I said,
this will work really well for

64
00:03:19.913 --> 00:03:21.660
even that larger tree that we saw, right?

65
00:03:21.660 --> 00:03:24.880
And so the idea that anything could
hook in to stuff at the top level

66
00:03:24.880 --> 00:03:26.730
cleans up our code a lot.

67
00:03:26.730 --> 00:03:28.920
So it's worth thinking
about the trade-offs.

68
00:03:28.920 --> 00:03:31.733
Depending on the situation,
if the performance is meaningful, then no,

69
00:03:31.733 --> 00:03:33.083
it's not the right choice for you.

70
00:03:33.083 --> 00:03:36.860
But if it is not,
if you're measuring, right?

71
00:03:36.860 --> 00:03:40.435
And you can see that it's not
really affecting performance,

72
00:03:40.435 --> 00:03:43.403
then having maintainability
is totally worth it.

