WEBVTT

1
00:00:00.170 --> 00:00:03.530
We're not replacing the grudges
that weren't forgiven.

2
00:00:03.530 --> 00:00:07.715
So those are the same ones as well, right?

3
00:00:07.715 --> 00:00:12.896
So what it would be really great to do is
to say to a function, if all of your props

4
00:00:12.896 --> 00:00:17.699
are the same as they were last time,
maybe you don't rerender, right?

5
00:00:17.699 --> 00:00:18.372
You have nothing new.

6
00:00:18.372 --> 00:00:20.073
There's nothing for you to do here.

7
00:00:20.073 --> 00:00:21.720
Take a load off, right?

8
00:00:21.720 --> 00:00:23.650
And so
React gives us a bunch of ways to do that.

9
00:00:23.650 --> 00:00:26.530
And we'll talk about why it would
have been slightly problematic

10
00:00:26.530 --> 00:00:29.570
before we did this refactor in a second.

11
00:00:29.570 --> 00:00:32.100
So React has a few different
ways of doing this.

12
00:00:32.100 --> 00:00:37.303
It has react.memo.

13
00:00:37.303 --> 00:00:40.305
Because they're just, these cases,
they're just functions, right?

14
00:00:40.305 --> 00:00:45.350
react.memo takes some function component
and returns you one that says,

15
00:00:45.350 --> 00:00:49.330
if it receives the same props,
just don't render it.

16
00:00:49.330 --> 00:00:51.010
So we can wrap functions in that one.

17
00:00:51.010 --> 00:00:53.060
We also have two hooks,
only one of which we're gonna use,

18
00:00:53.060 --> 00:00:54.465
the two of them kind of do the same thing.

19
00:00:54.465 --> 00:00:56.046
There's useCallback.

20
00:00:56.046 --> 00:00:58.370
And there is useMemo.

21
00:00:58.370 --> 00:01:02.745
These have, they're very similar
with one slight difference.

22
00:01:02.745 --> 00:01:08.266
useMemo will call the function,
it will call the functions as dependencies

23
00:01:08.266 --> 00:01:13.022
haven't changed, right,
it will not call the function again.

24
00:01:13.022 --> 00:01:16.130
useCallback will give you a new
function that you can call.

25
00:01:16.130 --> 00:01:18.020
Right, so it gives you the function
rather than the result.

26
00:01:19.360 --> 00:01:23.598
So we'll go, let's go ahead and
do this really quick refactoring.

27
00:01:23.598 --> 00:01:27.818
I'll tell you why switching to this
reducer pattern gave us the ability to

28
00:01:27.818 --> 00:01:28.800
do this.

29
00:01:28.800 --> 00:01:32.866
So real quickly, we'll go in and

30
00:01:32.866 --> 00:01:37.811
we will wrap NewGrudge in react.memo.

31
00:01:37.811 --> 00:01:42.024
And what I would love to caution
you against is just throwing

32
00:01:42.024 --> 00:01:45.040
everything in react.memo, right?

33
00:01:45.040 --> 00:01:50.470
Because the act of checking to see
if the props have changed is work.

34
00:01:50.470 --> 00:01:54.050
My golden rule for performance is that not
doing stuff is faster than doing stuff.

35
00:01:54.050 --> 00:01:56.838
If you throw a react.memo
around everything,

36
00:01:56.838 --> 00:02:01.158
even if the prompts are changing all
the time, you are asking it to check,

37
00:02:01.158 --> 00:02:05.639
which means you've slowed down
performance by trying to be fancy, right?

38
00:02:05.639 --> 00:02:08.772
On the other hand, if you do get to
skip out on a lot of renders, well,

39
00:02:08.772 --> 00:02:12.683
then react.memo has saved you work because
not rendering is faster than rendering.

40
00:02:12.683 --> 00:02:19.188
So we know that this onSubmit in
this case is add grudge, right?

41
00:02:19.188 --> 00:02:21.259
If we're gonna get the same
function every time,

42
00:02:21.259 --> 00:02:24.713
we're not currently, you're gonna see
this doesn't work originally, right,

43
00:02:24.713 --> 00:02:27.102
then we don't need to
necessarily rerender it, right?

44
00:02:27.102 --> 00:02:29.391
If the grudges change,
this doesn't need to know.

45
00:02:29.391 --> 00:02:34.739
And then the individual grudge, yeah,
if that grudge has changed, sure.

46
00:02:34.739 --> 00:02:38.463
But if it's one of the unforgiven ones,
it's the same one.

47
00:02:38.463 --> 00:02:44.983
Now, if we do this,
We're gonna notice that it doesn't work.

48
00:02:44.983 --> 00:02:47.653
That'd be great, thanks.

49
00:02:47.653 --> 00:02:51.078
So if we go ahead and I click,
you can see them all rerender again,

50
00:02:51.078 --> 00:02:52.895
including Rendering New Grudge.

51
00:02:52.895 --> 00:02:54.702
Right, cuz there's another part here.

52
00:02:54.702 --> 00:02:58.110
If we look very closely,
the culprit, once again,

53
00:02:58.110 --> 00:03:01.120
is our good friend JavaScript, right?

54
00:03:01.120 --> 00:03:05.210
We are defining a new function for

55
00:03:05.210 --> 00:03:09.240
addGrudge, and for toggleForgiveness,
every single time.

56
00:03:09.240 --> 00:03:10.733
So it is a different addGrudge,

57
00:03:10.733 --> 00:03:14.068
getting past the new grudge on every
single render of the application.

58
00:03:14.068 --> 00:03:18.194
It is a different
toggleForgiveness getting passed to

59
00:03:18.194 --> 00:03:20.892
the individual grudge every time.

60
00:03:20.892 --> 00:03:23.706
So react.memo's like, yeah, yeah,
yeah, this is a different function.

61
00:03:23.706 --> 00:03:25.731
Well, it does the same thing, right?

62
00:03:25.731 --> 00:03:29.150
But we have to tell JavaScript that,
otherwise it doesn't do anything.

63
00:03:29.150 --> 00:03:33.350
So in this case, much like useAFact,
we say useCallback, which,

64
00:03:33.350 --> 00:03:37.180
if it gets the same dependencies,
will return the same function reference.

65
00:03:38.230 --> 00:03:43.371
In this point, the only thing that this
uses from the outside world is dispatch.

66
00:03:47.242 --> 00:03:50.101
Right, and here we do the same thing.

67
00:04:02.004 --> 00:04:06.036
Cool, and now we should see is that
we haven't included useCallback.

68
00:04:12.611 --> 00:04:17.133
So now if I forgive one, you can see here,
let me actually clear so

69
00:04:17.133 --> 00:04:19.282
we can see a little bit better.

70
00:04:19.282 --> 00:04:21.944
Only the forgiven grudge
has been rerendered.

71
00:04:21.944 --> 00:04:26.287
NewGrudge didn't rerender,
none of the other grudges rerendered,

72
00:04:26.287 --> 00:04:29.940
only the one that we cared
about rerendered, right?

73
00:04:29.940 --> 00:04:33.800
Because dispatch didn't change,
which means addGrudge and

74
00:04:33.800 --> 00:04:35.900
toggleForgiveness didn't change.

75
00:04:35.900 --> 00:04:39.993
So you might be asking,
why couldn't we do this previously?

76
00:04:42.511 --> 00:04:48.649
Well, if you look at addGrudge and
toggleForgiveness with useState,

77
00:04:48.649 --> 00:04:54.598
they both rely on the current grudges,
right, which are changing.

78
00:04:54.598 --> 00:04:58.105
There's a new array in the case of
toggleForgiveness and addGrudge,

79
00:04:58.105 --> 00:05:01.375
which would have invalidated
the dependencies in useCallback,

80
00:05:01.375 --> 00:05:05.371
cuz it would have required, it would have
depended on grudges and set grudges.

81
00:05:05.371 --> 00:05:09.285
Any changes to that array, cuz we are
replacing it to make React do its thing,

82
00:05:09.285 --> 00:05:13.336
would have invalidated the useCallback and
given us a new function every time.

83
00:05:13.336 --> 00:05:16.893
Which means we could have react.memo'd
up and down the entire component tree,

84
00:05:16.893 --> 00:05:18.640
it wouldn't have done anything.

85
00:05:18.640 --> 00:05:21.763
We could've wrapped everything in there
because it would have generated cuz of

86
00:05:21.763 --> 00:05:22.800
dependency change.

87
00:05:22.800 --> 00:05:27.500
The idea that we separated all of our
state from the actual components and

88
00:05:27.500 --> 00:05:29.180
that all we needed was dispatch.

89
00:05:29.180 --> 00:05:30.840
We didn't need to know
about the current projects,

90
00:05:30.840 --> 00:05:33.180
that was handled in the reducer, right?

91
00:05:33.180 --> 00:05:34.990
We just needed to announce
that something happened.

92
00:05:34.990 --> 00:05:38.670
And the function for announcing that
something had happened could actually be

93
00:05:38.670 --> 00:05:44.240
the same function memory, which allowed
us to optimize performance really

94
00:05:44.240 --> 00:05:48.690
easily because we separated our state
management from our component hierarchy,

95
00:05:48.690 --> 00:05:51.730
and made things arguably
in code more complex, but

96
00:05:51.730 --> 00:05:53.630
arguably a little more
elegant at the same time.

