WEBVTT

1
00:00:00.070 --> 00:00:03.610
All right, so I'm gonna make a little bit
of a helper function real quick here.

2
00:00:04.700 --> 00:00:09.090
And this is not one that you should use in
production because it's got a lot of edge

3
00:00:09.090 --> 00:00:11.290
cases, but it'll do the trick.

4
00:00:11.290 --> 00:00:16.655
All right, so
we've got getStateFromLocalStorage and

5
00:00:16.655 --> 00:00:22.245
we'll just say const storage
= localStorage.getItem,

6
00:00:22.245 --> 00:00:25.161
we'll call it counterState.

7
00:00:28.153 --> 00:00:33.115
And then, so the way local storage works
is it's effectively you can store at

8
00:00:33.115 --> 00:00:35.861
a given key, you can store a string, now,

9
00:00:35.861 --> 00:00:39.930
we wanna store an object,
I could just store the string value.

10
00:00:39.930 --> 00:00:41.520
We're gonna store an object,

11
00:00:41.520 --> 00:00:45.350
which means that we will need to
JSON parse it when it comes out.

12
00:00:46.750 --> 00:00:50.819
JSON parse gets real angry if you
pass it undefined or null, so

13
00:00:50.819 --> 00:00:53.025
we'll check to see if it exists.

14
00:01:01.427 --> 00:01:05.288
For our storage, and
if nothing came out of there, if we didn't

15
00:01:05.288 --> 00:01:09.737
hit that conditional, then give me
that default count of 0, all right?

16
00:01:09.737 --> 00:01:11.990
So if there's nothing in local storage,
give me 0.

17
00:01:11.990 --> 00:01:14.470
If there is, go ahead and parse it, and

18
00:01:14.470 --> 00:01:17.100
will eventually store that into the state,
right?

19
00:01:17.100 --> 00:01:22.340
And so in this state will
do places with get state

20
00:01:23.500 --> 00:01:28.868
from local storage actually call
the function, it's JavaScript.

21
00:01:28.868 --> 00:01:33.990
And now, what we want to say is after,
actually,

22
00:01:33.990 --> 00:01:36.160
just make a helper function here as well.

23
00:01:36.160 --> 00:01:39.973
We'll do it in line first actually,

24
00:01:39.973 --> 00:01:45.754
I've decided will say,
local storage, dot set item,

25
00:01:45.754 --> 00:01:52.026
counter storage JSON stringify.

26
00:01:52.026 --> 00:01:54.460
This.state.

27
00:01:58.129 --> 00:02:02.360
All right, so that should do the trick.

28
00:02:05.060 --> 00:02:05.898
Go ahead and increment.

29
00:02:05.898 --> 00:02:06.545
No.

30
00:02:06.545 --> 00:02:11.029
Counter storage,

31
00:02:12.830 --> 00:02:16.380
That's just gonna be a function that will

32
00:02:22.700 --> 00:02:30.640
take some props now we know this
one got Max and step passed in.

33
00:02:30.640 --> 00:02:32.570
So I'll hold on to those for a second.

34
00:02:32.570 --> 00:02:33.870
I use them immediately.

35
00:02:33.870 --> 00:02:37.180
But and so we know that in this case Cool,

36
00:02:37.180 --> 00:02:40.910
the setter function gets a copy of
the state and the props, right.

37
00:02:40.910 --> 00:02:43.950
And we saw that we can pull it out into
increment, and that was super cool.

38
00:02:45.190 --> 00:02:49.970
This one doesn't actually
get any arguments, right.

39
00:02:49.970 --> 00:02:53.420
So trying to say, all right,
I'm gonna do this, and

40
00:02:53.420 --> 00:02:58.000
then instead of doing this.state, so
you could pull it out, will not work.

41
00:02:58.000 --> 00:03:00.860
You do have a few options for
how you wanna handle this.

42
00:03:00.860 --> 00:03:02.003
You could For instance,

43
00:03:02.003 --> 00:03:05.543
if you wanted to make it a function that
was totally separate, not using arrow

44
00:03:05.543 --> 00:03:08.831
functions in this case will do the trick
so you could do something like,

45
00:03:18.504 --> 00:03:20.177
store state and local storage.

46
00:03:35.276 --> 00:03:38.210
Actually, I could bind it up
there like we saw before.

47
00:03:38.210 --> 00:03:41.189
I'm pretty sure I can also just keep
it inside of an arrow function,

48
00:03:41.189 --> 00:03:42.826
we're all gonna find out together.

49
00:03:49.084 --> 00:03:52.350
No, so
you just store state in local storage,

50
00:04:01.599 --> 00:04:03.131
That should do the trick.

51
00:04:05.973 --> 00:04:07.550
All right, so that'll work.

52
00:04:07.550 --> 00:04:09.000
That doesn't feel great.

53
00:04:09.000 --> 00:04:12.510
The other option is to just make
it a method on the class and

54
00:04:12.510 --> 00:04:15.470
do exactly what we did up
here with .bind(this).

55
00:04:15.470 --> 00:04:20.460
The point is if you get confused on, yeah,
I know in the I gotta copy the state and

56
00:04:20.460 --> 00:04:22.280
the props, and
then I go in there to do it.

57
00:04:22.280 --> 00:04:23.980
This has definitely bit me before, and

58
00:04:23.980 --> 00:04:25.630
it's like you don't get
those arguments in there.

59
00:04:25.630 --> 00:04:28.090
So you can Put it on the class and
bind it.

60
00:04:28.090 --> 00:04:32.440
You can bind it on the fly here as well.

61
00:04:32.440 --> 00:04:33.230
It's really up to you.

62
00:04:33.230 --> 00:04:34.970
Or you might just
consider putting in line.

63
00:04:34.970 --> 00:04:38.700
But there is a subtle difference in
the way that the center function works and

64
00:04:38.700 --> 00:04:41.570
the way that the callback function works.

65
00:04:41.570 --> 00:04:47.930
It is not my favorite API choice, but
it is one that exists in this case.

66
00:04:47.930 --> 00:04:51.180
The other option of course
is you could theoretically,

67
00:04:51.180 --> 00:04:56.310
if we wanted to make this an r function,
if we really felt strongly,

68
00:04:56.310 --> 00:04:59.100
and we don't wanna have to remember to
bind it cuz that is a little tricky,

69
00:04:59.100 --> 00:05:02.440
we could make a function where
the person passes it in.

70
00:05:02.440 --> 00:05:08.680
And now we could say, pass in.

71
00:05:11.820 --> 00:05:13.240
Alright, so
there's a little gotcha in there.

72
00:05:13.240 --> 00:05:19.104
Let's just verify that that works
decrement still goes down by one and

73
00:05:19.104 --> 00:05:20.840
doesn't save anything.

74
00:05:20.840 --> 00:05:23.250
So because we only wrote
in the increment function.

75
00:05:23.250 --> 00:05:28.110
Alright, so We now know we can have
call backs, we've know that it behaves

76
00:05:28.110 --> 00:05:32.190
a little bit differently than the setter,
which is unfortunate and will bite you at

77
00:05:32.190 --> 00:05:35.170
least once, nine months from now,
when you forgot that I said that.

78
00:05:35.170 --> 00:05:37.830
And then you remember that I said it,
you'd be like, he's very smart.

79
00:05:37.830 --> 00:05:42.720
It's only that I was
very stupid before hand.

80
00:05:42.720 --> 00:05:45.370
And so that's how that's how
knowledge transfer works.

81
00:05:45.370 --> 00:05:45.950
I'm told.

