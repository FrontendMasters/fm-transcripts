WEBVTT

1
00:00:01.220 --> 00:00:01.940
So what do we need to do?

2
00:00:01.940 --> 00:00:04.840
We need to figure out like, all right,
we need to dispatch and undo.

3
00:00:04.840 --> 00:00:07.890
And we need to figure out
if there is a past, right?

4
00:00:07.890 --> 00:00:09.840
So we can get that from the API.

5
00:00:09.840 --> 00:00:12.440
And we can make this as own
smaller component as well.

6
00:00:12.440 --> 00:00:13.440
Like we could do lots of things.

7
00:00:13.440 --> 00:00:16.680
Let's just do the simplest thing
from the API, from the context.

8
00:00:16.680 --> 00:00:19.824
So pull an undo and his past.

9
00:00:29.950 --> 00:00:35.470
And so here we'll say disabled will

10
00:00:35.470 --> 00:00:43.410
be there's not a past article,
click B undo.

11
00:00:43.410 --> 00:00:46.600
And this is again one of
the reasons I really like kind of

12
00:00:46.600 --> 00:00:49.600
breaking this out into the context and

13
00:00:49.600 --> 00:00:53.540
having the reducer pattern which is it's
not like a whole bunch of squarely state.

14
00:00:53.540 --> 00:00:56.243
I'm just saying, is there a past and
here's how you undo and

15
00:00:56.243 --> 00:00:59.477
that's defined its own kind of super
testable state management piece.

16
00:01:02.014 --> 00:01:04.878
UseContext is not defined,
let's pull that in.

17
00:01:10.043 --> 00:01:15.543
All right, so let's see,
let's just log in to the page real quick,

18
00:01:18.772 --> 00:01:25.501
undo and isPassed Cool,

19
00:01:25.501 --> 00:01:31.810
undo the function is passed is false,
this should be disabled, maybe it is.

20
00:01:33.440 --> 00:01:37.260
Yeah, it's just my assistance wall,
wonky and so we'll say undo so

21
00:01:37.260 --> 00:01:40.430
let's add a thing.

22
00:01:40.430 --> 00:01:42.868
All right, doesn't work let's
see what we got in here.

23
00:01:45.665 --> 00:01:54.645
You know why doesn't work?

24
00:01:54.645 --> 00:01:56.115
&gt;&gt; Didn't add an implementation-
&gt;&gt; We haven't done

25
00:01:56.115 --> 00:01:56.715
a dispatch-
&gt;&gt; [LAUGH]

26
00:01:56.715 --> 00:01:58.035
&gt;&gt; You just wanted to show us that-

27
00:01:58.035 --> 00:01:58.875
&gt;&gt; I just wanted to show you that we

28
00:01:58.875 --> 00:01:59.445
could wire it up.

29
00:01:59.445 --> 00:02:04.275
I got really excited to show, watch it
undo, but we didn't write the undo logic.

30
00:02:04.275 --> 00:02:06.805
So I'll just add a quick console.logic
here, just to make sure,

31
00:02:06.805 --> 00:02:08.755
we'll do it in the reducer.

32
00:02:08.755 --> 00:02:10.230
So, yeah.

33
00:02:12.740 --> 00:02:15.130
If you fire actions and
there's nothing listening for

34
00:02:15.130 --> 00:02:17.530
it in the reducer, nothing happens, right?

35
00:02:17.530 --> 00:02:23.767
And then I proceeded to do that,
which was really A+ work, right?

36
00:02:23.767 --> 00:02:27.060
Action_type is 'UNDO'.

37
00:02:27.060 --> 00:02:29.165
Let's start by console logging.

38
00:02:35.015 --> 00:02:39.540
Cool, it looks like I was
starting to type down there.

39
00:02:39.540 --> 00:02:42.355
Let's go ahead and just undo that, Undo.

40
00:02:48.277 --> 00:02:50.810
Now we need a past state.

41
00:02:50.810 --> 00:02:52.380
All right, we're gonna undo.

42
00:02:52.380 --> 00:02:57.560
All right, so
what does it mean to undo,right?

43
00:02:57.560 --> 00:03:06.380
Really all that it means is to take the
most recent past and make it the present.

44
00:03:06.380 --> 00:03:10.460
And to take the present and
make it the future, right?

45
00:03:12.330 --> 00:03:14.610
So we can do that fairly easily.

46
00:03:15.680 --> 00:03:16.430
Famous last words.

47
00:03:18.420 --> 00:03:23.150
So the new present in this case is going
to be the very first thing on the array of

48
00:03:23.150 --> 00:03:23.960
past states.

49
00:03:25.080 --> 00:03:28.191
And we use the spread operator
to capture everything.

50
00:03:36.518 --> 00:03:38.020
We'll grab those from the past.

51
00:03:40.970 --> 00:03:48.200
And then we can return, so
we got the new present.

52
00:03:48.200 --> 00:03:50.450
And I'm sorry, this is the past.

53
00:03:50.450 --> 00:03:51.240
I got carried away.

54
00:03:54.140 --> 00:03:58.590
And then we'll simply return,
the past is now everything but

55
00:03:58.590 --> 00:03:59.628
the first thing in that array, right?

56
00:04:01.730 --> 00:04:07.017
Just the new past, and we'll say that
the present, it's the new present.

57
00:04:10.599 --> 00:04:16.165
And the future, Is whatever

58
00:04:16.165 --> 00:04:21.272
the current present is and
then all future states.

59
00:04:26.667 --> 00:04:29.121
Cool.

60
00:04:29.121 --> 00:04:29.927
What's up?

61
00:04:29.927 --> 00:04:37.046
&gt;&gt; Do we spread state.present?

62
00:04:37.046 --> 00:04:37.736
&gt;&gt; Nope.

63
00:04:40.353 --> 00:04:42.410
Talking and typing is fun.

64
00:04:42.410 --> 00:04:45.020
So we hit forgiven,
we hit undo, it's unforgiven.

65
00:04:45.020 --> 00:04:49.810
All right, if we say hello world,

66
00:04:49.810 --> 00:04:54.890
we submit it, we undo,
it's un-submitted, right?

67
00:04:54.890 --> 00:04:55.770
And so

68
00:04:55.770 --> 00:05:01.560
we can now implement undo pretty easily by
simply shuffling the states around, right?

69
00:05:01.560 --> 00:05:04.600
And ideally this pattern works everywhere.

70
00:05:04.600 --> 00:05:05.260
It's really hard.

71
00:05:05.260 --> 00:05:06.170
Is it doable with your state?

72
00:05:06.170 --> 00:05:08.950
I'm sure if you put your mind
to it you could do it, right?

73
00:05:08.950 --> 00:05:11.730
But the interesting part here
is it's not an extra React API.

74
00:05:11.730 --> 00:05:14.750
This is simply a JavaScript
data structure.

75
00:05:14.750 --> 00:05:19.150
Right, and it's simply you have
an object with two arrays and

76
00:05:19.150 --> 00:05:21.110
a target state,
could you do it with indices?

77
00:05:21.110 --> 00:05:22.820
You probably could do that as well, right?

78
00:05:22.820 --> 00:05:24.280
It's all however you wanna do it.

79
00:05:24.280 --> 00:05:26.690
Maybe the nature of your problem is
gonna be slightly different, but

80
00:05:26.690 --> 00:05:30.815
it is all just simply a JavaScript data
structure that we have full control of in

81
00:05:30.815 --> 00:05:36.870
user which lets us do something
a little bit more complicated.

82
00:05:36.870 --> 00:05:41.374
Okay, I'm gonna push up this branch and
you are gonna implement redo.

