WEBVTT

1
00:00:00.000 --> 00:00:04.610
We are going to talk a little
bit about fetching data,

2
00:00:04.610 --> 00:00:12.210
we have been suspiciously quiet about like
any real like dealing with a synchrony.

3
00:00:12.210 --> 00:00:15.436
Like we've talked a little bit about
like we lose the binding of this cuz of

4
00:00:15.436 --> 00:00:21.820
the event loop, we haven't talked a lot
about fetching stuff from servers.

5
00:00:21.820 --> 00:00:25.260
And that's the kind of next
beast that we need to slay.

6
00:00:25.260 --> 00:00:26.790
Turns out we hinted at this.

7
00:00:26.790 --> 00:00:27.720
We danced around it.

8
00:00:27.720 --> 00:00:30.150
We alluded to how we might handle this,
right?

9
00:00:30.150 --> 00:00:32.880
We talked a little bit about useEffect,
right?

10
00:00:32.880 --> 00:00:37.090
And in the very simplest
version of even a traditional

11
00:00:37.090 --> 00:00:42.620
react state the easiest thing you
can do is uncomponent did mount.

12
00:00:42.620 --> 00:00:44.540
Right, go ahead and fetch it and

13
00:00:44.540 --> 00:00:49.178
set state right that is still true as
the simplest possible way of doing this.

14
00:00:49.178 --> 00:00:52.557
And like I said, a lot of the kind of
stuff we get for free and the newest

15
00:00:52.557 --> 00:00:56.500
versions of react, make it so we can get
like most of the simple educate is done.

16
00:00:56.500 --> 00:00:59.970
If you're getting to the point
where you want REDOX observable so

17
00:00:59.970 --> 00:01:05.610
you can use like RXJS, so you can cancel,
request and debounce, right yeah, at that

18
00:01:05.610 --> 00:01:11.209
point it's time to look into those kind of
heavy weight tools, but then there's also

19
00:01:11.209 --> 00:01:15.070
[INAUDIBLE] you need to bring all that
stuff in all the time in your application.

20
00:01:15.070 --> 00:01:18.280
Unfortunately, there's always
the issue of it depends.

21
00:01:18.280 --> 00:01:19.980
So we're gonna switch to a different app,

22
00:01:19.980 --> 00:01:21.870
we're gonna switch to
the Star Wars characters app.

23
00:01:22.930 --> 00:01:28.150
And it's pretty straightforward, all it
does is it kind of loads from a fake API,

24
00:01:28.150 --> 00:01:31.980
it's a real, that's not fair,
that was mean.

25
00:01:31.980 --> 00:01:34.508
It's a real API that
just fetches a bunch of

26
00:01:34.508 --> 00:01:38.597
characters from the Star Wars universe
that we can shove onto a page.

27
00:01:46.271 --> 00:01:47.522
So the npm start.

28
00:01:54.181 --> 00:01:55.521
And also open that up.

29
00:01:55.521 --> 00:01:59.840
Right now,
you can see that it's got some dummy data.

30
00:01:59.840 --> 00:02:02.800
Right?
This is hard coded in data.

31
00:02:02.800 --> 00:02:03.380
We'll take a look.

32
00:02:03.380 --> 00:02:05.920
We'll take a tour of
the application in one moment, but

33
00:02:05.920 --> 00:02:06.940
this is really it right now.

34
00:02:06.940 --> 00:02:11.280
It should hit the API,
get a list of all the characters and

35
00:02:11.280 --> 00:02:13.430
display it on the page, right.

36
00:02:13.430 --> 00:02:16.200
Now we talked a little
bit about that kind of

37
00:02:16.200 --> 00:02:18.990
time based state right there is
a part where it is loading, or

38
00:02:18.990 --> 00:02:21.400
there could be an error, like those
are different things that can happen.

39
00:02:21.400 --> 00:02:24.010
So we're gonna talk a little
bit about that in this one.

40
00:02:24.010 --> 00:02:26.980
Eventually, we'll also take a look at

41
00:02:26.980 --> 00:02:29.820
the kind of master detail view that
you've seen a lot of applications.

42
00:02:29.820 --> 00:02:34.230
If you think about the Apple Mail app,
you'll see the mail messages on the side.

43
00:02:34.230 --> 00:02:37.770
And then the detailed view in the middle
right,there's a kind of common pattern for

44
00:02:37.770 --> 00:02:39.715
applications and

45
00:02:39.715 --> 00:02:43.755
Which one we're on a lot of times should
be determined by the route, right?

46
00:02:43.755 --> 00:02:47.325
Yes, we could just keep it in state
of which index they're currently on.

47
00:02:47.325 --> 00:02:50.135
But it would be great if
they're looking at a given

48
00:02:50.135 --> 00:02:52.415
Star Wars character if
we store it on the URL.

49
00:02:52.415 --> 00:02:57.175
And that'll create some challenges for
us as well.

50
00:02:57.175 --> 00:03:02.670
So we'll go over and we will take
a quick tour of the application here,

51
00:03:02.670 --> 00:03:08.430
we've got the index.js and right now
that is loading this dummy data, right?

52
00:03:08.430 --> 00:03:14.430
The dummy data is just some
hard coded in data that

53
00:03:14.430 --> 00:03:20.090
we would expect to get back from the API,
we'll actually hit the API in a second.

54
00:03:20.090 --> 00:03:24.170
This endpoint is just simply
a hard coded end string,

55
00:03:24.170 --> 00:03:26.300
it's just I don't want to type that.

56
00:03:27.980 --> 00:03:32.600
We've got this index which right now is
loading the dummy data and passing it to

57
00:03:32.600 --> 00:03:36.130
the characters list, very similar to what
we had in the last application right, and

58
00:03:36.130 --> 00:03:40.220
that gets past the individual characters,
so on and so forth.

59
00:03:40.220 --> 00:03:43.720
The only issue is we do have react
router in here that we'll be using

60
00:03:43.720 --> 00:03:44.760
a little bit later.

61
00:03:44.760 --> 00:03:48.152
So like you can technically
click on any of them,

62
00:03:48.152 --> 00:03:52.972
and they will show the URL but
that's not our major concern just yet.

63
00:03:57.175 --> 00:04:03.410
All right, so what we want to do is we'd
love to just actually like hit the API.

64
00:04:03.410 --> 00:04:08.860
And we know that we can call
a side effect to go and do that.

65
00:04:08.860 --> 00:04:11.910
So what is the simplest like
possible version of this?

66
00:04:11.910 --> 00:04:16.920
We talked in the very beginning about
using some kind l of sensible default

67
00:04:16.920 --> 00:04:21.960
right, in this case, I happen to know
that the part of the response we're gonna

68
00:04:21.960 --> 00:04:27.290
want is simply an array,
right, in this case.

69
00:04:27.290 --> 00:04:29.310
And so starting out with an empty array so

70
00:04:29.310 --> 00:04:32.730
that mapping over it works
makes total sense for us.

71
00:04:32.730 --> 00:04:35.710
We'll get better at this
progressively as we do it.

72
00:04:35.710 --> 00:04:37.804
So we can say something
like React.useEffect.

73
00:04:39.250 --> 00:04:42.890
And this is a hey, when you mount,

74
00:04:42.890 --> 00:04:48.480
what I want you to do is go ahead and
we're gonna say, all right, fetch.

75
00:04:48.480 --> 00:04:49.340
We've got that endpoint.

76
00:04:51.800 --> 00:04:54.520
And I, again,
I'm doing some of this from memory.

77
00:04:55.590 --> 00:05:02.118
If you want, you can actually we hit up
the endpoint you just go to the base URL.

78
00:05:06.974 --> 00:05:10.322
You can see what I would generously
call the API docs that'll load in about

79
00:05:10.322 --> 00:05:10.920
one second.

80
00:05:10.920 --> 00:05:14.857
I'll show you we've got characters,
the ability to get one character and

81
00:05:14.857 --> 00:05:18.607
the ability to search and query for
a partial match on a character name,

82
00:05:18.607 --> 00:05:22.068
right so you can see,
I'm fighting actually really initially.

83
00:05:26.911 --> 00:05:27.600
Cool.

84
00:05:27.600 --> 00:05:29.475
So we've got that in place, so

85
00:05:29.475 --> 00:05:33.310
I happen to know that I want slash
characters to get all of them.

86
00:05:34.940 --> 00:05:36.160
And so we'll go ahead and

87
00:05:36.160 --> 00:05:40.092
we'll go back into this index
we'll say slash characters.

88
00:05:41.200 --> 00:05:43.130
So with fetch, we need to do then.

89
00:05:44.950 --> 00:05:46.305
And we'll say then.

90
00:05:46.305 --> 00:05:53.780
[SOUND] Response and it's JSON.

91
00:05:53.780 --> 00:06:00.820
If you don't like the fetch API and
you like Axios, you can use axios.

92
00:06:00.820 --> 00:06:04.440
I'm writing fetch cuz it is
the default built-in one.

93
00:06:04.440 --> 00:06:07.910
You can use whatever, you can use
dollar AJAX if you want, right?

94
00:06:07.910 --> 00:06:10.530
If you like your API library,
you can keep your API library.

95
00:06:10.530 --> 00:06:12.700
I am just using the kind of built-in one

96
00:06:13.940 --> 00:06:15.770
because it's the lowest
common denominator.

97
00:06:16.820 --> 00:06:21.740
So in response will is JSON and then,
now we've got the actual JSON response.

98
00:06:21.740 --> 00:06:26.318
And here we'll just say,
okay, say characters and

99
00:06:26.318 --> 00:06:30.386
this is gonna be in this case,
it's gonna be,

100
00:06:36.249 --> 00:06:37.969
Response.characters, right?

101
00:06:37.969 --> 00:06:44.240
If I go and look at the API results,
it's characters and it's an array.

102
00:06:44.240 --> 00:06:47.380
I know that looks scary but
it's just an array of data.

103
00:06:47.380 --> 00:06:49.190
Very similar to the dummy
data that we had before.

104
00:06:50.370 --> 00:06:51.780
So we've got all of that in place.

105
00:06:51.780 --> 00:06:53.380
And then if something goes terribly wrong.

106
00:06:56.910 --> 00:07:00.120
Now, do not save if you're following along
and you have that important in there.

107
00:07:00.120 --> 00:07:03.210
Let's not save the file.

108
00:07:03.210 --> 00:07:03.710
Why?

109
00:07:04.765 --> 00:07:06.730
Cuz I think I've warned
you about this previously.

110
00:07:07.820 --> 00:07:09.820
We've got this set characters in here.

111
00:07:11.230 --> 00:07:17.750
And it's going to change the state,
the state is gonna trigger rerender.

112
00:07:17.750 --> 00:07:21.930
There are no dependencies on here,
which means that is going to then fire

113
00:07:21.930 --> 00:07:24.680
the AJAX request,
which is going to set the characters

114
00:07:24.680 --> 00:07:27.590
which is gonna trigger rerender,
which is gonna fire an AJAX request,

115
00:07:27.590 --> 00:07:32.010
which is gonna set the characters there's
gonna trigger rerender and If I do it and

116
00:07:32.010 --> 00:07:35.150
I catch it fast enough, it'll just be bad.

117
00:07:35.150 --> 00:07:37.870
If we all do it,
we'll probably DDoS the server,

118
00:07:37.870 --> 00:07:41.530
which will make the next little
bit of our life pretty difficult.

119
00:07:41.530 --> 00:07:45.440
So what we'll do is we wanna make
sure that we at least just do it when

120
00:07:45.440 --> 00:07:48.890
the component mounts, and we'll see a case
where we wanna actually have an actual

121
00:07:48.890 --> 00:07:51.510
dependency in there, but in this case,
that'll get us most of the way there.

122
00:07:51.510 --> 00:07:54.558
Joe?
&gt;&gt; Is there ever a reason when you Is

123
00:07:54.558 --> 00:08:00.214
there ever a reason to not use
effect without that second argument?

124
00:08:00.214 --> 00:08:01.203
&gt;&gt; I wanna say no.

125
00:08:01.203 --> 00:08:02.112
[CROSSTALK]
&gt;&gt; Have it call all the time?

126
00:08:02.112 --> 00:08:06.985
&gt;&gt; Right, is there maybe some,
no asterisks.

127
00:08:06.985 --> 00:08:09.380
&gt;&gt; Okay.
&gt;&gt; Right, if two years from now,

128
00:08:09.380 --> 00:08:13.090
someone has come up with
a really great pattern around it.

129
00:08:13.090 --> 00:08:17.140
I will like, you know,
I've given myself an escape hatch, but

130
00:08:17.140 --> 00:08:19.820
I will basically say that no, right?

131
00:08:19.820 --> 00:08:23.220
The idea, like why would you want to
immediately re-fire it again, right?

132
00:08:23.220 --> 00:08:26.840
That is, I think it'll usually like
even React will catch you, and

133
00:08:26.840 --> 00:08:30.728
development mode would be like yeah,
you've done this too many times.

134
00:08:30.728 --> 00:08:33.586
And again, that's why that [INAUDIBLE]
that will actually catch you is

135
00:08:33.586 --> 00:08:34.320
really good too.

136
00:08:35.430 --> 00:08:38.683
So at this point,
we will actually stop it.

