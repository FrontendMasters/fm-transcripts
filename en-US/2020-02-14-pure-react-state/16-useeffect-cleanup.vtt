WEBVTT

1
00:00:00.000 --> 00:00:03.750
There's one more thing with user
fact that we need to consider,

2
00:00:03.750 --> 00:00:07.300
which is with our life-cycle hooks,

3
00:00:07.300 --> 00:00:12.030
we have component did mount we also
have component will unmount, right?

4
00:00:12.030 --> 00:00:14.770
And that is good for anytime we're
setting up something that recurs,

5
00:00:14.770 --> 00:00:17.700
like I said interval or
a web socket connection.

6
00:00:17.700 --> 00:00:22.880
Anytime you set up something that
persists, you need to clean it up as well.

7
00:00:22.880 --> 00:00:25.940
So here's a fact gives us an API for
doing that, right?

8
00:00:25.940 --> 00:00:30.180
And what it does is we have
like what the function is.

9
00:00:30.180 --> 00:00:32.720
And then if it does return a value, right,

10
00:00:32.720 --> 00:00:37.630
that return value will be
called afterwards, right?

11
00:00:37.630 --> 00:00:41.250
And we'll start out with
a super trivial example.

12
00:00:41.250 --> 00:00:45.650
And later on,
we'll actually see a different one.

13
00:00:45.650 --> 00:00:50.410
So, let's go ahead and
we've got all of this.

14
00:00:52.540 --> 00:00:57.310
We go ahead and give ourselves a way to
add additional counters and remove them.

15
00:00:57.310 --> 00:00:59.080
That way we can mount stuff
to the page and unmount it,

16
00:00:59.080 --> 00:01:03.720
right, so we'll start out in
here we'll say set interval.

17
00:01:04.940 --> 00:01:07.028
And this actually works pretty well.

18
00:01:07.028 --> 00:01:11.108
We'll say, what amounts to the page,
start doing that and

19
00:01:11.108 --> 00:01:13.320
let's do every three seconds.

20
00:01:13.320 --> 00:01:13.829
That seems good.

21
00:01:18.161 --> 00:01:21.428
So effect there, cool.

22
00:01:24.530 --> 00:01:28.725
Those three seconds were just
longer than I had patience for.

23
00:01:28.725 --> 00:01:31.833
&gt;&gt; [LAUGH]
&gt;&gt; And you can see if we increment it.

24
00:01:38.942 --> 00:01:43.660
Now, you'll notice that we're
getting 1 and 0, right?

25
00:01:43.660 --> 00:01:47.987
Cuz as the count changes,
it registered another interval, right?

26
00:01:47.987 --> 00:01:50.705
So we're getting 1, 0, 1, 0, 1, 0.

27
00:01:50.705 --> 00:01:53.135
If we added multiple counters
on every state change,

28
00:01:53.135 --> 00:01:55.190
it would register another interval.

29
00:01:55.190 --> 00:01:57.170
It's never actually cleaning up on itself.

30
00:01:57.170 --> 00:01:59.500
So we actually don't need to even
add multiple counters in this case.

31
00:01:59.500 --> 00:02:03.190
We'll see it,
if we increment a bunch more times.

32
00:02:03.190 --> 00:02:03.980
Do it like this.

33
00:02:03.980 --> 00:02:04.730
Let's just do a whole bunch.

34
00:02:05.780 --> 00:02:06.820
What could possibly go wrong?

35
00:02:09.200 --> 00:02:12.810
Every single iteration and render of
that registered its own set interval and

36
00:02:12.810 --> 00:02:14.150
never cleaned up.

37
00:02:14.150 --> 00:02:17.150
Right because it each slice and time
thing that we're talking about before.

38
00:02:17.150 --> 00:02:19.710
So it's one of those things where
it works as far as we know.

39
00:02:19.710 --> 00:02:20.720
And this is a console log.

40
00:02:20.720 --> 00:02:23.666
Now imagine it was actually like
sending a network request instead, or

41
00:02:23.666 --> 00:02:25.638
registering a web socket connection,
right?

42
00:02:25.638 --> 00:02:29.200
Those more like subtle things
that come to bite you.

43
00:02:29.200 --> 00:02:30.300
So all we have to do is clean this up.

44
00:02:31.880 --> 00:02:34.460
We do this real quick
will actually give it

45
00:02:34.460 --> 00:02:37.530
a set interval returns a number
which is the idea of that interval.

46
00:02:40.080 --> 00:02:45.963
And then we can return a function
that is clear interval without ID.

47
00:02:52.819 --> 00:02:53.924
Now you can hit a bunch of times.

48
00:02:56.562 --> 00:02:58.300
Now we'll just get the most recent one.

49
00:02:58.300 --> 00:02:59.720
Now we're cleaning up after ourselves.

50
00:02:59.720 --> 00:03:01.730
So as well those subtle things
like missing a dependency,

51
00:03:01.730 --> 00:03:03.520
we can accidentally DDoS your server.

52
00:03:03.520 --> 00:03:06.600
It's also a way that you can
accidentally make a mistake.

53
00:03:06.600 --> 00:03:07.960
We didn't get an error message.

54
00:03:07.960 --> 00:03:09.220
Nothing yelled at us.

55
00:03:09.220 --> 00:03:11.270
Right, but
it wasn't the effect that we wanted.

56
00:03:11.270 --> 00:03:14.000
So use effect gives us the ability
to define dependencies.

57
00:03:15.230 --> 00:03:16.940
That way it will and will not run.

58
00:03:16.940 --> 00:03:20.200
It also gives us the ability to
clean up after itself, right?

59
00:03:20.200 --> 00:03:23.262
In this case and so
we were able to do that well.

60
00:03:23.262 --> 00:03:24.820
All right, so we've really at this point,

61
00:03:24.820 --> 00:03:28.640
we've gotten to all the API differences
between this SS state and U state.

62
00:03:28.640 --> 00:03:32.330
We've gotten the API differences
in between component did mount and

63
00:03:32.330 --> 00:03:35.520
will mount the lifecycle hooks and
use effect.

64
00:03:35.520 --> 00:03:39.140
We're gonna kind of switch gears and
I'll talk a little bit about like a,

65
00:03:39.140 --> 00:03:42.950
application that has multiple components,
and how we end up passing stuff down and

66
00:03:42.950 --> 00:03:45.650
through, and
some ways that we can solve that.

67
00:03:45.650 --> 00:03:51.020
We're also gonna talk about the fact that
having a function for basically having to

68
00:03:51.020 --> 00:03:57.340
set every single state property, using its
own function can get a little bit tedious.

69
00:03:57.340 --> 00:03:58.420
We're gonna see that multiple times.

70
00:03:58.420 --> 00:04:02.330
We're gonna see that when we want to set
the loading, or the error state of an AJAX

71
00:04:02.330 --> 00:04:06.510
request, or when we want to have
a form with multiple values, right?

72
00:04:06.510 --> 00:04:09.030
Having a stack of those,
setCount, not bad.

73
00:04:09.030 --> 00:04:11.340
Having a stack of them
is slightly problematic.

74
00:04:11.340 --> 00:04:15.500
So we'll look at some now more
advanced ways of doing that.

75
00:04:15.500 --> 00:04:20.400
Use state will work for
very simple values, but as

76
00:04:20.400 --> 00:04:24.260
things get a little bit more complicated,
you might wanna use other patterns.

