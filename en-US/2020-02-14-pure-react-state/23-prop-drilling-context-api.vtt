WEBVTT

1
00:00:00.140 --> 00:00:03.810
So, before we started with Celeste
refactoring, we're looking at gradually

2
00:00:03.810 --> 00:00:08.380
in the beginning, I said there was like,
two kind of issues like one that we could

3
00:00:08.380 --> 00:00:13.050
theoretically implement a reducer to
kind of solve some performance issues.

4
00:00:13.050 --> 00:00:17.430
Also just it's a nice simple way to
see a reducer kind of in isolation.

5
00:00:17.430 --> 00:00:20.070
We'll see some more complicated
examples in a little bit.

6
00:00:20.070 --> 00:00:24.690
The other part was that we had a past that
toggle forgiveness all the way through

7
00:00:24.690 --> 00:00:28.590
the grudges plural component, right and
even though it wasn't using it,

8
00:00:28.590 --> 00:00:32.510
now in this example it's not that bad,
right?

9
00:00:32.510 --> 00:00:35.770
And arguably, I would say,
if the example was the size and

10
00:00:35.770 --> 00:00:36.910
one thing I want to point out is like,

11
00:00:36.910 --> 00:00:40.790
while this application seems small, right
in the way that like React works like

12
00:00:40.790 --> 00:00:44.150
there's a version of this inside even
a bigger application, right like there

13
00:00:44.150 --> 00:00:49.290
are usually like small versions of these
like vignettes in a larger application.

14
00:00:49.290 --> 00:00:53.980
But as an application grows and
the dependencies kind

15
00:00:53.980 --> 00:00:59.010
of are meaningful across the application,
it becomes a little bit trickier.

16
00:00:59.010 --> 00:01:03.865
So this is kind of the problem
that we're trying to solve.

17
00:01:03.865 --> 00:01:07.626
And so prop drilling is this idea that
we have to go from parent to a child,

18
00:01:07.626 --> 00:01:11.448
to its child to its child to the component
that actually needs a function or

19
00:01:11.448 --> 00:01:13.085
a piece of data.

20
00:01:13.085 --> 00:01:16.925
And when you have deep component trees,
this becomes an issue, right?

21
00:01:16.925 --> 00:01:19.379
This is the component tree
of our previous application.

22
00:01:19.379 --> 00:01:21.319
It's not that bad.

23
00:01:21.319 --> 00:01:25.120
The idea that we have to go through
grudges plural is not terrible.

24
00:01:25.120 --> 00:01:29.250
But if we had a application that maybe
was like a common board where, all right,

25
00:01:29.250 --> 00:01:34.140
we've got boards and
those boards have lists, and

26
00:01:34.140 --> 00:01:37.330
those lists have cards,
and so on and so forth.

27
00:01:37.330 --> 00:01:39.151
And there's users, and so a drop down for

28
00:01:39.151 --> 00:01:41.610
assigning one needs to know
about the user sidebar.

29
00:01:41.610 --> 00:01:45.900
Right, it can get, even in this example,
already increasingly complicated.

30
00:01:45.900 --> 00:01:49.150
And now if we want to move something
from the sidebar to the main page,

31
00:01:49.150 --> 00:01:51.870
we've got to rethread those
props all the way through.

32
00:01:51.870 --> 00:01:55.730
It becomes somewhat problematic just for
maintainability.

33
00:01:55.730 --> 00:01:57.340
Right, as the application goes.

34
00:01:57.340 --> 00:02:00.484
Yeah, this, no need to commit this
to memory if it stresses you out,

35
00:02:00.484 --> 00:02:02.245
its sole purpose is to stress you out.

36
00:02:02.245 --> 00:02:04.860
&gt;&gt; [LAUGH]
&gt;&gt; It's mostly to look like a lot of

37
00:02:04.860 --> 00:02:06.440
things on this screen, right?

38
00:02:06.440 --> 00:02:10.100
And what we wanna do is to be
able to skip a lot of that, and

39
00:02:10.100 --> 00:02:14.840
like say hey, I want to have
the availability of any of the state or

40
00:02:14.840 --> 00:02:18.318
data anywhere in this tree and
they can hook into it.

41
00:02:18.318 --> 00:02:22.630
Now, prior to

42
00:02:22.630 --> 00:02:27.920
the Context API getting released
about a year and a half ago or so.

43
00:02:29.050 --> 00:02:33.402
There was a legacy Context API and
if you went to the documentation,

44
00:02:33.402 --> 00:02:36.420
it was like, hey, don't use this, right?

45
00:02:36.420 --> 00:02:39.270
And the reason it was don't use
this cuz the API was not stable.

46
00:02:39.270 --> 00:02:40.040
Right there.

47
00:02:40.040 --> 00:02:42.030
We don't know how this is gonna change,
and

48
00:02:42.030 --> 00:02:47.200
if you rely on it then bad things
could happen if we break it.

49
00:02:47.200 --> 00:02:51.830
And there were libraries that used it,
like React Redux used it, right.

50
00:02:51.830 --> 00:02:55.440
And the argument there, which is well
if you relied on that library and

51
00:02:55.440 --> 00:02:58.220
React made the change, the library could
make a change and you would be okay.

52
00:02:58.220 --> 00:03:02.850
But if you did it bespoke in your own
application it was a little trickier.

53
00:03:02.850 --> 00:03:04.480
Right?
You were kind of on your own if

54
00:03:04.480 --> 00:03:05.240
the API changed.

55
00:03:06.310 --> 00:03:09.180
So if you wanted to skip
this prop drilling problem,

56
00:03:09.180 --> 00:03:13.280
what you had to do is effectively look at
a library like MobX+React or React Redux.

57
00:03:13.280 --> 00:03:17.218
And basically opt into this whole other
paradigm of matching state, right?

58
00:03:17.218 --> 00:03:20.600
And there was all sorts of really
tricky things you could do with

59
00:03:20.600 --> 00:03:24.530
hierarchy components and render props, to
try to make it work and like in a previous

60
00:03:24.530 --> 00:03:28.210
version of the course, that's what
we did cuz none of this existed yet.

61
00:03:29.550 --> 00:03:34.140
But recently there is now a kind of public
context API that you can just use that

62
00:03:34.140 --> 00:03:39.850
allows you in the same way Hoax gave us
reducer patterns out of the box, right?

63
00:03:39.850 --> 00:03:42.860
We get a lot of this kind of for
free built into the library.

64
00:03:42.860 --> 00:03:46.780
And so the context API allows you to
solve the prop drilling without having to

65
00:03:46.780 --> 00:03:52.180
immediately reach for a tool like Redux or
Mob x or something along those lines.

66
00:03:52.180 --> 00:03:55.880
There's still a bunch of really valid
reasons why you might want to, but

67
00:03:55.880 --> 00:03:58.560
the fact that you do not need to and it's
a choice that you don't immediately have

68
00:03:58.560 --> 00:04:01.370
to make that jump,
I think is really important.

69
00:04:03.260 --> 00:04:05.250
Yeah.
&gt;&gt; So my question had to do

70
00:04:05.250 --> 00:04:06.180
with what you just said.

71
00:04:07.370 --> 00:04:10.200
When would be a point,
like in your experience,

72
00:04:10.200 --> 00:04:15.100
if you'd like about large scale enterprise
applications that you would actually

73
00:04:15.100 --> 00:04:20.010
feel the pain think now I have to
move to a mob back solution or Redux.

74
00:04:20.010 --> 00:04:20.750
&gt;&gt; Yeah.
So like,

75
00:04:20.750 --> 00:04:22.730
I think I said this a little
bit before with the reducers.

76
00:04:22.730 --> 00:04:26.440
It's like to say that's like 80% or
whatever,

77
00:04:26.440 --> 00:04:30.460
some percentage of what you get
from Redux is probably true, right.

78
00:04:31.600 --> 00:04:37.020
And so, for instance, like Redux out
of the box supports middleware, right.

79
00:04:37.020 --> 00:04:39.620
You just plug in multiple middleware,
no big deal.

80
00:04:39.620 --> 00:04:42.510
Use reducer does not right.

81
00:04:42.510 --> 00:04:44.890
Like Redux also gives
you combine reducers and

82
00:04:44.890 --> 00:04:46.406
a whole bunch of other helper functions.

83
00:04:46.406 --> 00:04:50.550
Use reducer does not right now if you
don't need those it's a wash, right, like,

84
00:04:50.550 --> 00:04:51.980
why would you pull in a library?

85
00:04:51.980 --> 00:04:55.320
At Twilio we have a product called flex,
which is this idea that

86
00:04:55.320 --> 00:04:59.410
we give you the framework to build your
own call center application, right?

87
00:04:59.410 --> 00:05:01.600
Now, if you have your
own version of Redux,

88
00:05:01.600 --> 00:05:05.410
now we've got to manage two versions
of Redux state we might consider,

89
00:05:05.410 --> 00:05:09.290
we use Redux now, but we might consider
switching to the Context API, because it's

90
00:05:09.290 --> 00:05:13.420
just one less dependency that we have to
manage for something we distribute, right?

91
00:05:13.420 --> 00:05:18.370
But there's a lot of things that come for
free in Redux that you would have to

92
00:05:18.370 --> 00:05:21.830
implement yourself like we will implement
a very naive version of middleware in

93
00:05:21.830 --> 00:05:24.820
a little bit, but like you just
get apply middleware from Redux.

94
00:05:27.080 --> 00:05:32.750
React Redux does a lot of performance
optimizations that you could do.

95
00:05:32.750 --> 00:05:34.540
Right, using the Context API.

96
00:05:34.540 --> 00:05:39.660
But are kind of the ones that come in
React Redux are obviously battle tested

97
00:05:39.660 --> 00:05:40.750
and stuff along those lines.

98
00:05:40.750 --> 00:05:45.740
So there is usually a super set of
features beyond what you get out of React.

99
00:05:45.740 --> 00:05:49.940
But if you don't need them,
right before the bar before you need it,

100
00:05:49.940 --> 00:05:52.620
like basically if you needed any of it,
you needed all of it.

101
00:05:52.620 --> 00:05:56.583
Now there's a lot more you can do in
React before you need any of it right.

102
00:05:56.583 --> 00:05:58.548
And some cases like you might have,

103
00:05:58.548 --> 00:06:02.937
we'll see cases where we use a reducer
pattern for very simple things that might

104
00:06:02.937 --> 00:06:05.838
will definitely not have
justified Redux overall.

105
00:06:05.838 --> 00:06:09.023
And you might still use those kind of in
that unique component state where you

106
00:06:09.023 --> 00:06:10.970
might use Redux for
an overall application.

107
00:06:10.970 --> 00:06:12.680
So it's more of a yes end thing.

108
00:06:12.680 --> 00:06:16.800
For most of the simple cases,
you now have it built into the framework.

109
00:06:16.800 --> 00:06:19.650
You don't need to necessarily
deal with that extra dependency.

110
00:06:19.650 --> 00:06:21.900
But if you need all of
the extra functionality and

111
00:06:21.900 --> 00:06:25.970
features of these more robust solutions,
they are still available for you.

112
00:06:25.970 --> 00:06:30.900
So I don't think that either one
obviates the need for the other.

113
00:06:32.020 --> 00:06:33.320
&gt;&gt; Can you have both though?

114
00:06:33.320 --> 00:06:34.570
Can you use both?

115
00:06:34.570 --> 00:06:36.360
&gt;&gt; We use both, we use both.

116
00:06:36.360 --> 00:06:40.330
We'll use both Redux and the Context API
in different places, right?

117
00:06:40.330 --> 00:06:41.030
There are things like

118
00:06:41.030 --> 00:06:43.600
ephemeral state that I need to
share across multiple components.

119
00:06:43.600 --> 00:06:45.700
I don't wanna put it in the Redux store.

120
00:06:45.700 --> 00:06:48.040
Because we use that for our model data,

121
00:06:48.040 --> 00:06:50.700
but a bunch of components need
the same ephemeral state,

122
00:06:50.700 --> 00:06:54.230
we might spin up a context for
that small part of the tree that needs it.

123
00:06:54.230 --> 00:06:58.272
While the overall data's being managed by
Redux like smaller kind of pieces might

124
00:06:58.272 --> 00:07:00.540
use a reducer, or might use a context API.

125
00:07:00.540 --> 00:07:01.690
So we absolutely use both.

