WEBVTT

1
00:00:00.160 --> 00:00:03.050
So, let's talk a little bit
about managing state in forms.

2
00:00:03.050 --> 00:00:07.070
And so, we've got this form right here,
it doesn't have that many fields.

3
00:00:07.070 --> 00:00:10.270
It has a username, an email address,
a password, a confirm password.

4
00:00:10.270 --> 00:00:12.704
And do you wanna help us out
with an angel investment,

5
00:00:12.704 --> 00:00:15.857
because this is a startup that
doesn't actually have a product yet.

6
00:00:15.857 --> 00:00:18.530
And they're just trying to collect your
data, so they can hopefully sell it.

7
00:00:18.530 --> 00:00:20.180
But you might wanna sign up so

8
00:00:20.180 --> 00:00:24.410
you can squat on your username,
just in case it is the next big thing.

9
00:00:24.410 --> 00:00:30.580
And what I wanna point out is
one of the tricky parts of

10
00:00:30.580 --> 00:00:35.920
this whole hook thing, which is, there are
not that many fields on this form, right?

11
00:00:35.920 --> 00:00:38.851
We could have taken it to its
natural conclusion, right?

12
00:00:38.851 --> 00:00:43.395
And we could have had first name,
middle initial, last name,

13
00:00:43.395 --> 00:00:46.790
address one, address two, state, ZIP.

14
00:00:46.790 --> 00:00:49.259
The four numbers after the ZIP
code that nobody actually knows,

15
00:00:49.259 --> 00:00:52.030
even though they could definitely
calculate that with the address.

16
00:00:52.030 --> 00:00:55.120
I don't even know why I
need to put in a city and

17
00:00:55.120 --> 00:00:57.020
a state when I give them a ZIP,
it doesn't matter.

18
00:00:57.020 --> 00:01:01.330
And we can see that even this
is getting slightly tedious.

19
00:01:01.330 --> 00:01:06.670
Clearing it is involved with
doing all of this as we go along.

20
00:01:06.670 --> 00:01:11.238
We need a custom onChange event for
every single one.

21
00:01:11.238 --> 00:01:16.221
And this is an area where I would
argue that hooks are a little bit more

22
00:01:16.221 --> 00:01:18.328
cumbersome than setState.

23
00:01:18.328 --> 00:01:22.692
Cuz setState, you can give it an object
with all of the different parameters and

24
00:01:22.692 --> 00:01:24.789
you wouldn't have to worry about it.

25
00:01:24.789 --> 00:01:26.737
You just give an object with the keys and
the values.

26
00:01:26.737 --> 00:01:28.620
And you set multiple things at once.

27
00:01:28.620 --> 00:01:30.531
Handles are changing.

28
00:01:30.531 --> 00:01:33.236
You could have a handle change,
which could look something like this.

29
00:01:33.236 --> 00:01:34.876
This won't work yet.

30
00:01:37.467 --> 00:01:42.715
Because each one of these input fields
has a name that maps to the state key and

31
00:01:42.715 --> 00:01:43.900
has a value.

32
00:01:43.900 --> 00:01:47.710
So, if you were using this.setState,
you could have done something like this.

33
00:01:47.710 --> 00:01:55.159
You could have said this.setState and
the key on the object is whatever the,

34
00:01:58.374 --> 00:02:01.945
The event.target.name is.

35
00:02:01.945 --> 00:02:06.967
And the value, it's gotta be an object,
we'll fix that in a second,

36
00:02:06.967 --> 00:02:12.177
event.target.value, and you can put
that in a little object in here.

37
00:02:14.468 --> 00:02:17.940
And you could have given this handleChange
to every single one of those form fields.

38
00:02:17.940 --> 00:02:20.680
Because they know it
triggers on the input field.

39
00:02:20.680 --> 00:02:26.080
So, it would have been name, username,
value is whatever they changed it to.

40
00:02:26.080 --> 00:02:29.080
Instead, we need these
custom functions every time.

41
00:02:29.080 --> 00:02:32.520
Clearing it is calling each one and
reset it.

42
00:02:32.520 --> 00:02:34.950
Could we do something with useReducer?

43
00:02:34.950 --> 00:02:38.057
Totally, and in a way, we will.

44
00:02:38.057 --> 00:02:44.620
But what would be cool is could we
implement something suspiciously close to

45
00:02:44.620 --> 00:02:49.888
this.setState using the primitives
that we have in hooks?

46
00:02:49.888 --> 00:02:52.366
And spoiler alert,
I didn't do all that set up and

47
00:02:52.366 --> 00:02:55.580
make us switch to this repo
to have the answer be no.

48
00:02:55.580 --> 00:02:56.930
That would have been rude.

49
00:02:56.930 --> 00:02:57.990
And I'm not rude.

50
00:02:57.990 --> 00:03:00.450
I'm many things, but not rude.

51
00:03:00.450 --> 00:03:02.856
And so, what we'll do is
we'll make a brand new one.

52
00:03:02.856 --> 00:03:05.650
And this is how you can
simulate some of the behavior.

53
00:03:05.650 --> 00:03:07.750
Obviously, we're not gonna get to
the point where it takes functions and

54
00:03:07.750 --> 00:03:08.550
all that kind of stuff.

55
00:03:08.550 --> 00:03:12.570
We'll do the basic part of an object,
we can replace multiple values.

56
00:03:12.570 --> 00:03:14.355
And so, we'll call it useSetState.

57
00:03:15.600 --> 00:03:18.780
Cuz that's not gonna be confusing.

58
00:03:18.780 --> 00:03:21.684
And here we'll import useReducer.

59
00:03:25.395 --> 00:03:26.582
From React.

60
00:03:26.582 --> 00:03:30.791
And our reducer is simply going to
take the previous state of the world,

61
00:03:30.791 --> 00:03:35.369
and this object that represents all
the new state, and merge them together.

62
00:03:35.369 --> 00:03:37.786
Just like we talked about
earlier in this course, right?

63
00:03:37.786 --> 00:03:41.385
this.setState takes all the objects and
merges them all together.

64
00:03:41.385 --> 00:03:43.255
That is exactly what we're going to do.

65
00:03:43.255 --> 00:03:44.502
Except we're gonna take two objects,

66
00:03:44.502 --> 00:03:46.239
we're gonna take the previous
state of the world, and

67
00:03:46.239 --> 00:03:48.100
all the new things that they set.

68
00:03:48.100 --> 00:03:48.950
And we'll just merge them,

69
00:03:48.950 --> 00:03:53.560
exactly the way that a very overly
naive way of this.setState would work.

70
00:03:53.560 --> 00:03:57.022
So, we'll say reducer, and
we'll say the previousState.

71
00:03:59.826 --> 00:04:03.096
And this would be what we would
normally call state, is an object.

72
00:04:03.096 --> 00:04:07.209
And what would normally be an action
we'll just call it updatedState.

73
00:04:07.209 --> 00:04:09.114
Right, so
all the things that they're changing.

74
00:04:11.195 --> 00:04:13.642
We'll make that an arrow function.

75
00:04:13.642 --> 00:04:21.273
And what we'll do is simply return,
All of the previous state.

76
00:04:21.273 --> 00:04:24.596
And this is why I showed you that
slide in the very beginning, right,

77
00:04:24.596 --> 00:04:28.340
that if you show something,
you should have to do it later.

78
00:04:28.340 --> 00:04:30.120
Just merge those two objects together.

79
00:04:30.120 --> 00:04:33.888
Previous state of the world, the new
state of the world, merge them together,

80
00:04:33.888 --> 00:04:37.590
that will combine them the same
way this.setState does.

81
00:04:37.590 --> 00:04:40.063
And then let's make this useSetState hook.

82
00:04:40.063 --> 00:04:42.927
We'll say const useSetState.

83
00:04:46.368 --> 00:04:48.915
Give the initial state, it's just some
object, if they didn't give us one.

84
00:04:52.463 --> 00:04:55.021
And that'll be an arrow function.

85
00:04:55.021 --> 00:04:58.431
And then we just say the state and

86
00:04:58.431 --> 00:05:02.736
the dispatch is going to be useReducer.

87
00:05:06.086 --> 00:05:07.860
With the reducer we just wrote up there.

88
00:05:09.200 --> 00:05:11.190
And the initial state
that they're passing in,

89
00:05:11.190 --> 00:05:14.040
which will either be what they passed in,
or an empty object.

90
00:05:14.040 --> 00:05:15.770
That's how we defined it.

91
00:05:15.770 --> 00:05:19.954
And we'll make this setState method, which
is going to be take their updated state,

92
00:05:19.954 --> 00:05:22.620
because we have the previous
state of the world.

93
00:05:22.620 --> 00:05:24.459
This is simply a function,
it's going to take the updated state.

94
00:05:27.135 --> 00:05:28.539
And it's gonna dispatch.

95
00:05:33.145 --> 00:05:36.586
So, now we return the current
state of the world and

96
00:05:36.586 --> 00:05:41.160
this method that will combine a new
object and merge them together.

97
00:05:44.822 --> 00:05:47.970
We'll say export default useSetState.

98
00:05:50.050 --> 00:05:50.842
All right, so

99
00:05:50.842 --> 00:05:55.266
now we have this abstraction that gives
us something very close to a very naive.

100
00:05:55.266 --> 00:05:58.935
As an exercise to the reader, you could
take this to its natural conclusion and

101
00:05:58.935 --> 00:06:01.948
implement, okay, well,
if it's a function do this, right?

102
00:06:01.948 --> 00:06:03.930
You absolutely could,
if you wanted to go that far.

103
00:06:03.930 --> 00:06:07.823
But I would argue, what is it
actually serving you at that point?

104
00:06:07.823 --> 00:06:12.013
And we can use this quick abstraction
to clean up a little bit.

105
00:06:12.013 --> 00:06:15.567
And there's also an argument that you can
use a useFormState here, where you could

106
00:06:15.567 --> 00:06:19.040
take that new state of the world and
run a bunch of validations on it, right?

107
00:06:19.040 --> 00:06:22.553
Okay, does the password field
have an emoji in it, right?

108
00:06:22.553 --> 00:06:23.318
So on and so forth.

109
00:06:23.318 --> 00:06:29.340
You can begin to take complicated things
and use these patterns to solve for them.

110
00:06:29.340 --> 00:06:33.850
And so, all right, with userSignup now, we
can begin to slim this down a little bit.

111
00:06:33.850 --> 00:06:37.878
So we might have an initial state,
which I could do inline, but

112
00:06:37.878 --> 00:06:40.016
I'm just gonna call it out here.

113
00:06:40.016 --> 00:06:42.222
The initialState of this form,
which we'll need for

114
00:06:42.222 --> 00:06:43.700
setting up our state to begin with.

115
00:06:43.700 --> 00:06:46.300
And also when they hit reset, we want
to put it back to its initial state.

116
00:06:46.300 --> 00:06:49.269
That's the only reason I'm making
it a variable in this case.

117
00:06:49.269 --> 00:06:50.694
And that is gonna be what?

118
00:06:50.694 --> 00:06:55.693
userName is empty string, and

119
00:06:55.693 --> 00:06:59.928
email is an empty string.

120
00:06:59.928 --> 00:07:05.901
And, whoops, Password, empty string.

121
00:07:09.824 --> 00:07:11.532
We'll just do those for now.

122
00:07:11.532 --> 00:07:13.540
We're gonna leave the checkbox checked,

123
00:07:13.540 --> 00:07:15.760
if they wanna angel invest with us,
it'll be great.

124
00:07:15.760 --> 00:07:17.720
So, we've got that initial state.

125
00:07:17.720 --> 00:07:20.490
And now what we can do is we can begin

126
00:07:20.490 --> 00:07:23.650
to do effectively what I
was hinting at before.

127
00:07:23.650 --> 00:07:27.490
And so
we've got this initial state of the world.

128
00:07:27.490 --> 00:07:28.970
So now we could do something like this.

129
00:07:28.970 --> 00:07:38.568
We could do,
useSetState with this initial state.

130
00:07:41.693 --> 00:07:44.891
Clear can go ahead and
do something like this,

131
00:07:44.891 --> 00:07:48.500
where it's going to be
setState back to the, nope.

132
00:07:50.160 --> 00:07:54.550
So, it's gotta be state and setState.

133
00:07:56.640 --> 00:08:00.658
So now clear is simply set
the state back to the initialState.

134
00:08:05.288 --> 00:08:06.766
Right?

135
00:08:06.766 --> 00:08:11.270
And then we can make that handle change
that I was telling you about before.

136
00:08:11.270 --> 00:08:12.390
So, handleChange,

137
00:08:12.390 --> 00:08:15.560
I should have just left it there since
I can use it now, but here we are.

138
00:08:17.710 --> 00:08:18.901
Will be setState.

139
00:08:22.839 --> 00:08:30.778
And it's going to be, event.target.name,

140
00:08:30.778 --> 00:08:34.140
event.target.value.

141
00:08:35.770 --> 00:08:40.530
And so we got rid of all of those one
by one state hooks in there, right?

142
00:08:40.530 --> 00:08:43.093
All we need to do next is just for
these values, and

143
00:08:43.093 --> 00:08:46.160
we can cheat a little bit here,
I'm gonna grab all of them.

144
00:08:50.799 --> 00:08:54.614
We'll have the state.username,
and then the onChange for

145
00:08:54.614 --> 00:08:58.969
each one of these is going to be
the same handle change event, right?

146
00:08:58.969 --> 00:09:02.459
And this is what we would have
done with the setState, but

147
00:09:02.459 --> 00:09:05.820
it was harder with all
those individual hooks.

148
00:09:05.820 --> 00:09:08.578
Could you also write a reducer that
knew about all the details of this form?

149
00:09:08.578 --> 00:09:10.936
You absolutely could.

150
00:09:10.936 --> 00:09:14.242
I'm just saying that anything you can do
with setState you could theoretically

151
00:09:14.242 --> 00:09:16.082
implement yourself as well with the hooks.

152
00:09:16.082 --> 00:09:18.726
So we need to change these all to
the same handle change function.

153
00:09:24.417 --> 00:09:29.406
That'll be state.investmentInterest, this
one is gonna be a little bit different

154
00:09:29.406 --> 00:09:33.506
cuz check boxes, we're not actually
setting the value there, but.

155
00:09:37.201 --> 00:09:38.470
We'll do, what was it, investmentInterest.

156
00:09:47.461 --> 00:09:49.754
So, we'll have state.investmentInterest

157
00:09:53.260 --> 00:09:57.165
In this case we'll just say setState,
it's the opposite

158
00:10:00.983 --> 00:10:05.310
That one's a little bit different than
the generic handle change, but all right.

159
00:10:05.310 --> 00:10:09.114
So now what we're able to do is clear
away all of those individual sets.

160
00:10:09.114 --> 00:10:13.074
We can use basically the same function for
every text field, password field,

161
00:10:13.074 --> 00:10:15.183
email field, so on and so forth, right?

162
00:10:15.183 --> 00:10:19.505
Again, that reducer pattern helps with
a lot of things that you find yourself.

163
00:10:19.505 --> 00:10:23.738
What I would love for you to do is train
this little piece of you that if you find

164
00:10:23.738 --> 00:10:27.246
yourself going like,
this is getting tedious with useState,

165
00:10:27.246 --> 00:10:30.905
pulling out some kind of reducer
is probably the the way forward.

166
00:10:32.460 --> 00:10:33.690
useSetState.

167
00:10:33.690 --> 00:10:34.980
Let's see what the issue is.

168
00:10:34.980 --> 00:10:37.045
It's in this file over here.

169
00:10:37.045 --> 00:10:38.519
React is lowercase.

170
00:10:38.519 --> 00:10:41.622
&gt;&gt; [LAUGH]
&gt;&gt; You'll notice that it was not the first

171
00:10:41.622 --> 00:10:42.820
time I made that issue.

172
00:10:42.820 --> 00:10:46.240
[LAUGH] So,
now we can change everything in the field.

173
00:10:46.240 --> 00:10:49.055
Everything works the same way
with just a simpler abstraction.

