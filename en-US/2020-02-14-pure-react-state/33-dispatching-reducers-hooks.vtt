WEBVTT

1
00:00:00.030 --> 00:00:05.024
So now we could say something along
the lines of, we'll change this

2
00:00:05.024 --> 00:00:10.193
to use thunk reducer and we'll say
use effect, just like before, and

3
00:00:10.193 --> 00:00:15.635
there's nothing stopping you from
combining these approaches as well.

4
00:00:19.108 --> 00:00:21.283
Will say go ahead and fetch.

5
00:00:21.283 --> 00:00:25.327
Remember, before we had a whole bunch
of that extra like loading state and

6
00:00:25.327 --> 00:00:27.427
stuff along those lines, we can say.

7
00:00:37.098 --> 00:00:37.783
Hold on one second.

8
00:00:42.932 --> 00:00:47.425
We'll use effect and
we'll dispatch a function.

9
00:00:53.428 --> 00:00:54.920
Might actually even pull
this out a little bit.

10
00:00:54.920 --> 00:01:00.980
We could actually give ourselves
like a fetch character,

11
00:01:00.980 --> 00:01:02.460
so let's actually pull that out.

12
00:01:02.460 --> 00:01:06.520
We'll say const, fetch characters,

13
00:01:06.520 --> 00:01:08.680
just cuz it's gonna get a little
confusing in that use effect.

14
00:01:11.590 --> 00:01:14.520
Again, this is simply
a JavaScript function,

15
00:01:14.520 --> 00:01:16.980
it will use fetch it will
have a side effect, right?

16
00:01:16.980 --> 00:01:22.491
Which makes it a little trickier task but
we say fetch, and we'll say end point.

17
00:01:28.346 --> 00:01:32.134
Was characters, this we've seen this

18
00:01:32.134 --> 00:01:36.966
before right then response,
response to Jason.

19
00:01:36.966 --> 00:01:42.807
Then we'll take that response and
we'll dispatch.

20
00:01:48.121 --> 00:01:48.716
Type.

21
00:01:52.328 --> 00:01:53.440
Why are we doing this, right?

22
00:01:53.440 --> 00:01:54.860
We're writing this file, but now,

23
00:01:54.860 --> 00:01:58.050
we're taking the idea of sending an AJAX
request and dispatching stuff, and

24
00:01:58.050 --> 00:02:02.000
we're removing it completely from
our React application, right?

25
00:02:02.000 --> 00:02:04.750
It's simply announcing that stuff
happened as it goes through.

26
00:02:04.750 --> 00:02:06.903
It can be in another file,
it can be literally anywhere,

27
00:02:06.903 --> 00:02:09.760
we can reuse this all over
our code bases is simply

28
00:02:09.760 --> 00:02:13.280
an action creator like that ad garage and
toggle forgiveness that we saw earlier.

29
00:02:13.280 --> 00:02:15.390
It is separate from any other concept.

30
00:02:15.390 --> 00:02:19.000
It will get a thing called dispatch which
should be a function, it will call it.

31
00:02:19.000 --> 00:02:19.870
Right, but

32
00:02:19.870 --> 00:02:25.613
that's all it really needs to know about
anything else will give the payload.

33
00:02:25.613 --> 00:02:31.702
And this case is gonna do
because this is built for

34
00:02:31.702 --> 00:02:37.049
the characters one because it's why it's

35
00:02:37.049 --> 00:02:43.881
called fetch characters,
we'll say the payload is,

36
00:02:43.881 --> 00:02:49.840
so you say characters
is response.characters

37
00:02:52.637 --> 00:02:56.688
So it's got a type, it's got a payload,
if things go poorly,

38
00:03:02.206 --> 00:03:10.340
we got the error, Nope.

39
00:03:17.749 --> 00:03:18.419
The error.

40
00:03:26.181 --> 00:03:27.660
This could be anywhere in my code base.

41
00:03:29.230 --> 00:03:32.610
The idea is it is totally separate,
it's simply a JavaScript function.

42
00:03:32.610 --> 00:03:34.110
It's going to take this dispatch thing.

43
00:03:34.110 --> 00:03:39.960
It's gonna call the same dispatches,
and do all of the right things.

44
00:03:39.960 --> 00:03:43.100
And then hopefully whatever wants to
manage it, whether it's show a load or

45
00:03:43.100 --> 00:03:45.870
showed an error, like whatever,
we're separating that like what

46
00:03:45.870 --> 00:03:49.130
the component does from the actual
separating of the state,

47
00:03:49.130 --> 00:03:52.430
the more you don't have things combined,
the easier it is to change your mind.

48
00:03:52.430 --> 00:03:54.130
Right?
You can reconfigure all the pieces,

49
00:03:54.130 --> 00:03:56.260
when everything's tied
together is problematic.

50
00:03:57.950 --> 00:04:02.998
So now, in here when they click
that button, we're just gonna say,

51
00:04:07.612 --> 00:04:12.590
dispatch, fetchCharacters.

52
00:04:12.590 --> 00:04:17.690
So this is the dispatch here that
comes from our useThunkReducer, right?

53
00:04:20.190 --> 00:04:22.990
It will go ahead and
dispatch this function,

54
00:04:22.990 --> 00:04:26.380
which will get a copy of dispatch,
which will then handle everything else.

55
00:04:26.380 --> 00:04:30.320
So we've separated what
the component knows about.

56
00:04:30.320 --> 00:04:32.890
It's like, hey,
I'm gonna dispatch this function.

57
00:04:32.890 --> 00:04:35.000
It knows about how to go get characters,
and

58
00:04:35.000 --> 00:04:37.730
it's completely separate from our UI,
right?

59
00:04:37.730 --> 00:04:41.600
And then it will tell
the Reducer that does no stuff

60
00:04:41.600 --> 00:04:42.940
all the things that happened.

61
00:04:42.940 --> 00:04:46.020
So we're beginning to separate out,
we've separated state management for

62
00:04:46.020 --> 00:04:46.960
the component.

63
00:04:46.960 --> 00:04:50.020
We've brought in the ability
to pass any function we want,

64
00:04:50.020 --> 00:04:51.270
to kind of customize this.

65
00:04:51.270 --> 00:04:54.690
We want the body to do something else,
we just dispatch another thunk, right?

66
00:04:54.690 --> 00:04:58.190
So we're going to get the same
effect that we had previously but

67
00:04:58.190 --> 00:04:59.710
we can pull more stuff out.

68
00:04:59.710 --> 00:05:01.690
Now, let's say you don't
want to have thunks, but

69
00:05:01.690 --> 00:05:02.940
you wanted to have logging, right?

70
00:05:02.940 --> 00:05:06.310
Whatever you want to do, you can create
like these kind of customized versions of

71
00:05:06.310 --> 00:05:09.390
dispatch, in order to do that for you.

72
00:05:09.390 --> 00:05:10.600
Let's verify that it works.

73
00:05:10.600 --> 00:05:13.959
We'll see if I got any fun new errors,
useEffect is not defined,

74
00:05:13.959 --> 00:05:15.067
that's a great one.

75
00:05:21.808 --> 00:05:25.504
So fetch and you see that
the load based on that button, so

76
00:05:25.504 --> 00:05:28.122
before we were doing it when it mounted,

77
00:05:28.122 --> 00:05:33.890
here we now have it as a function that
will go ahead and trigger it on an event.

78
00:05:33.890 --> 00:05:34.800
Right?

79
00:05:34.800 --> 00:05:36.980
Instead of loading with announcement,
you just a regular useEffect,

80
00:05:36.980 --> 00:05:40.590
we're saying hey they've dispatched this
fetchCharacters I have those separate,

81
00:05:40.590 --> 00:05:41.370
you know how to do that?

82
00:05:41.370 --> 00:05:45.330
When they hit the button will dispatch go
fetch the characters which can then go

83
00:05:45.330 --> 00:05:46.780
ahead it will dispatch a loading.

84
00:05:46.780 --> 00:05:48.590
It will go dispatch a response completed.

85
00:05:48.590 --> 00:05:50.050
It will go dispatch an error.

86
00:05:50.050 --> 00:05:52.840
Right, we kinda separate out
all of these pieces, and

87
00:05:52.840 --> 00:05:57.690
that's basically a way to add extra
functionality to the dispatch

88
00:05:57.690 --> 00:06:02.850
if the very simple use reducer that React
gives you doesn't give you what you want.

89
00:06:02.850 --> 00:06:06.710
Should you find yourself adding lots and
lots of different types of middle ware.

90
00:06:06.710 --> 00:06:08.380
Could you add them more and more?

91
00:06:08.380 --> 00:06:09.580
You could.

92
00:06:09.580 --> 00:06:13.150
It's probably a sign that Redux
might be a choice for you.

93
00:06:13.150 --> 00:06:16.950
You know, ask your team about Redux and

94
00:06:16.950 --> 00:06:19.580
decide if that's what
you want going forward.

95
00:06:19.580 --> 00:06:23.860
Like there was a lot of things when
we lost some of that performance

96
00:06:23.860 --> 00:06:26.870
stuff with the context API.

97
00:06:26.870 --> 00:06:31.880
React Redux, which we'll see later, which
we'll talk about a little bit more later,

98
00:06:31.880 --> 00:06:34.760
does a lot more of those performance
optimizations for you, right?

99
00:06:34.760 --> 00:06:35.980
And could you implement them yourself?

100
00:06:35.980 --> 00:06:36.990
You totally could.

101
00:06:36.990 --> 00:06:37.900
Should you?
Probably not.

102
00:06:39.120 --> 00:06:42.730
&gt;&gt; I keep seeing that you're missing,
well, not you, we would be, too,

103
00:06:42.730 --> 00:06:44.280
missing a dependency.

104
00:06:44.280 --> 00:06:44.780
&gt;&gt; Yep.

105
00:06:46.190 --> 00:06:48.090
&gt;&gt; That doesn't seem to
be affecting anything.

106
00:06:49.201 --> 00:06:51.965
&gt;&gt; This one, it's not, but
we should put it right.

107
00:06:51.965 --> 00:06:54.013
Where's that use effect?

108
00:06:58.764 --> 00:07:03.150
It's not affecting anything cuz this
component doesn't reload, right?

109
00:07:03.150 --> 00:07:07.000
We have that empty array in here, so
it's not like, slamming on the API.

110
00:07:07.000 --> 00:07:10.600
But that so
this whole load when it first mounts, but

111
00:07:10.600 --> 00:07:14.860
this will say if dispatch changes which
it really won't with the use reducer.

112
00:07:14.860 --> 00:07:21.760
Actually we might have to wrap
this in a use call back, right?

113
00:07:21.760 --> 00:07:25.973
But [SOUND] yeah, let's actually fix it.

114
00:07:25.973 --> 00:07:27.821
I'm pretty sure that when
I put this dispatch in

115
00:07:27.821 --> 00:07:30.000
here things are gonna go poorly.

116
00:07:30.000 --> 00:07:31.590
Right?
It works right now,

117
00:07:31.590 --> 00:07:33.500
because it does it only on Mount.

118
00:07:33.500 --> 00:07:37.741
If I put dispatch in here, JavaScript is
gonna make my life a real hard, right?

119
00:07:37.741 --> 00:07:46.120
Cuz what happens here is we're returning
a new enhanced dispatch every time, right?

120
00:07:46.120 --> 00:07:48.960
Which is going to come out
of this function every time,

121
00:07:48.960 --> 00:07:52.740
which is going to trigger,
you know, bad stuff every time.

122
00:07:52.740 --> 00:07:58.115
So what we'll probably do here is we'll
say React.useCallback is a great noticing.

123
00:07:58.115 --> 00:08:04.590
React.useCallback and as long as
the dispatch from useReducer is the same,

124
00:08:04.590 --> 00:08:09.110
we can assume that this shouldn't change
either, and we know because I told you and

125
00:08:09.110 --> 00:08:13.820
you believed me that we saw it with
our performance optimization before,

126
00:08:13.820 --> 00:08:18.390
that the dispatch every time
will be the same referentially.

127
00:08:18.390 --> 00:08:19.880
So let's make sure I
didn't blow anything up.

128
00:08:21.950 --> 00:08:26.560
Cool, yeah, so we're just saying,
hey, if dispatch hasn't changed,

129
00:08:26.560 --> 00:08:30.690
don't give me a new enhanced dispatch
every time render is called,

130
00:08:30.690 --> 00:08:34.410
just give me back the same one cuz it's
just calling the same dispatch, right?

131
00:08:34.410 --> 00:08:37.402
And these are the little tricks you have
to be worried about with the useEffect

132
00:08:37.402 --> 00:08:40.890
because otherwise, yeah,
I probably would've locked up the browser.

133
00:08:40.890 --> 00:08:43.100
Right, just from talking and
typing at the same time.

134
00:08:43.100 --> 00:08:45.115
But that's why you live-code
with 15 of your friends.

135
00:08:45.115 --> 00:08:49.060
&gt;&gt; [LAUGH]
&gt;&gt; What we're gonna talk about a little

136
00:08:49.060 --> 00:08:56.410
bit next is thinking about some routing,
in this case.

