WEBVTT

1
00:00:00.046 --> 00:00:02.922
So this is all of them,
they're all loaded at this point,

2
00:00:02.922 --> 00:00:04.990
we made the network request and we set it.

3
00:00:04.990 --> 00:00:06.598
So you can see, starts out with nothing.

4
00:00:06.598 --> 00:00:10.749
It's a pretty fast API
mostly cuz it's just reading

5
00:00:10.749 --> 00:00:15.380
from a single table in SQLite and
sending it along the way.

6
00:00:15.380 --> 00:00:19.862
So that's cool, but we talked
about that ephemeral state around

7
00:00:19.862 --> 00:00:24.844
getting our data is are we loading
the data, was there an error, right?

8
00:00:24.844 --> 00:00:28.594
Cuz right now if we go ahead,
we go to Network,

9
00:00:28.594 --> 00:00:33.323
and we're like, hi,
I'm offline now, and we refresh.

10
00:00:33.323 --> 00:00:37.404
Well, hold on, I'm simulating an error,
I could also break the API or

11
00:00:37.404 --> 00:00:39.657
something like that, that'd be fun.

12
00:00:40.830 --> 00:00:46.774
Yeah, I mean, I can't come up with
a way that I can both turn the Internet

13
00:00:46.774 --> 00:00:52.530
off to create a failure, but
it will just constantly error right now.

14
00:00:52.530 --> 00:00:56.624
We're not gonna do anything, we're not
gonna display anything under the page.

15
00:00:56.624 --> 00:00:59.094
So yeah, and
we don't have a loading state,

16
00:00:59.094 --> 00:01:03.514
there are definitely things that take
a little bit longer to load an API, right?

17
00:01:03.514 --> 00:01:07.186
So we wanna might have those
other pieces in there as well, so

18
00:01:07.186 --> 00:01:08.853
what would that look like?

19
00:01:10.694 --> 00:01:13.597
I mean,
we could just set a lot more state, right?

20
00:01:13.597 --> 00:01:18.341
We could set loading and error and
begin to manage all of those,

21
00:01:18.341 --> 00:01:22.383
and that's not an abysmal
thing to try to do, right?

22
00:01:22.383 --> 00:01:24.733
So we could do something like, all right,

23
00:01:24.733 --> 00:01:29.452
we can assume that it's loading by default
when the component first mounts, right?

24
00:01:29.452 --> 00:01:34.919
So we'll do loading, and setLoading,
and that'll be useState will be true.

25
00:01:34.919 --> 00:01:40.486
And we'll say error and
setError = useState and

26
00:01:40.486 --> 00:01:43.878
we'll give it a null for now,

27
00:01:43.878 --> 00:01:48.783
and probably you could use undefined too.

28
00:01:48.783 --> 00:01:52.945
So now we have all these pieces, so
now we could say, all right, well, and

29
00:01:52.945 --> 00:01:56.332
let's assume that this is
something they could retrigger.

30
00:01:56.332 --> 00:01:58.982
We could have a button to refetch or
something like that, so

31
00:01:58.982 --> 00:02:01.846
let's at least make this generic
enough that we could reuse it.

32
00:02:01.846 --> 00:02:03.880
So then we would say, what is it,

33
00:02:03.880 --> 00:02:07.748
setLoading any time this call
starts out we'll set it to true.

34
00:02:07.748 --> 00:02:09.123
We'll clear out the previous data.

35
00:02:09.123 --> 00:02:12.361
Now, that might change,
you might want to do a dynamic reload.

36
00:02:12.361 --> 00:02:13.400
If they come back to a page,

37
00:02:13.400 --> 00:02:15.987
it might be we're show them a spinner,
we keep the old data around.

38
00:02:15.987 --> 00:02:20.281
This is, again, depends a lot on
the unique pieces of your application and

39
00:02:20.281 --> 00:02:24.869
if we're fetching, if there was previously
an error, we'll make it go away.

40
00:02:24.869 --> 00:02:28.759
Now, again,
you'd might choose to persist there,

41
00:02:28.759 --> 00:02:33.781
this is all up to you, I'm just
taking a by base level approach here.

42
00:02:33.781 --> 00:02:38.565
All right, well then,
if we did get a response,

43
00:02:38.565 --> 00:02:44.189
then we have to setLoading as false and
we'll setError.

44
00:02:44.189 --> 00:02:45.537
Well, we don't have
an error at this point.

45
00:02:45.537 --> 00:02:47.493
If we catch,

46
00:02:50.465 --> 00:02:55.189
Then we'll setloading to false and

47
00:02:55.189 --> 00:02:59.288
we'll set error to the error.

48
00:03:03.538 --> 00:03:05.195
I don't love this,

49
00:03:05.195 --> 00:03:10.853
it feels like I am dong a lot manual
turning things on and off, right?

50
00:03:12.598 --> 00:03:18.019
If only there was a way to just
announce that things happened and

51
00:03:18.019 --> 00:03:23.348
set up a bunch of rules for
what the resulting state should be.

52
00:03:23.348 --> 00:03:25.196
Anyone have any suggestions
cuz I'm at a loss.

53
00:03:25.196 --> 00:03:27.030
&gt;&gt; Is there a hook for that?

54
00:03:27.030 --> 00:03:28.480
&gt;&gt; We could make a hook.

55
00:03:28.480 --> 00:03:30.388
I mean,
we can build stuff out of it, right?

56
00:03:30.388 --> 00:03:33.474
I mean, there's probably
a third party hook as well.

57
00:03:33.474 --> 00:03:36.414
How do we announce that things
happened and figure out the state?

58
00:03:36.414 --> 00:03:37.274
&gt;&gt; Dispatch.

59
00:03:37.274 --> 00:03:39.905
&gt;&gt; You dispatch, yeah, you use a producer-
&gt;&gt; Producer.

60
00:03:39.905 --> 00:03:42.057
&gt;&gt; Right, and so now we can say
the different parts like, all right,

61
00:03:42.057 --> 00:03:43.029
we're gonna start loading.

62
00:03:43.029 --> 00:03:45.631
We've gotten the response or
there is an error, and

63
00:03:45.631 --> 00:03:48.423
that can then trigger all of
these flags for us, right?

64
00:03:48.423 --> 00:03:51.955
And to that point, that becomes
a much more reusable pattern, right?

65
00:03:51.955 --> 00:03:55.995
Now we can say that we wanna do all
of these things, so on and so forth.

66
00:03:55.995 --> 00:03:59.344
So, we've got it here, now let's
just actually add our loading and

67
00:03:59.344 --> 00:04:01.388
error and then we'll round back to that.

68
00:04:01.388 --> 00:04:05.234
And again, probably we would do something
a little bit more complicated, but

69
00:04:05.234 --> 00:04:09.269
let's keep it simple for the sake of the
parts that actually matter for learning.

70
00:04:09.269 --> 00:04:15.231
And we'll [INAUDIBLE] say, all right,
if they are loading, go ahead and

71
00:04:15.231 --> 00:04:21.733
just show a paragraph tag the says
loading, that's fine, right?

72
00:04:21.733 --> 00:04:26.549
Otherwise, we'll show the set characters,
so either show loading or

73
00:04:26.549 --> 00:04:30.895
the characters that way we're
not showing nothing on the page.

74
00:04:30.895 --> 00:04:36.452
And then if there is an error for
some reason, we'll say error.

75
00:04:40.629 --> 00:04:42.610
This happens to be a class
name that I know exists.

76
00:04:44.741 --> 00:04:46.369
It say error.message.

77
00:04:50.010 --> 00:04:52.896
And so you gotta look for it real fast,
we can see that loading, so

78
00:04:52.896 --> 00:04:55.433
now we've got that ephemeral
state of our application.

79
00:04:55.433 --> 00:04:59.858
We could choose to show a spinner or
something else that goes along the way,

80
00:04:59.858 --> 00:05:03.524
we can not show large portions
of the UI or only navigate them.

81
00:05:03.524 --> 00:05:06.878
But now we have this idea of are we
currently fetching the data,

82
00:05:06.878 --> 00:05:09.108
do we have it already, is there an error?

83
00:05:09.108 --> 00:05:13.173
We have all of these kind of things
both represented in our state and

84
00:05:13.173 --> 00:05:14.631
represented in our UI.

85
00:05:14.631 --> 00:05:17.656
Now, if we wanted to, we could pull
this out into a custom hook and

86
00:05:17.656 --> 00:05:19.864
we'll see some of
the trade-offs in a second.

87
00:05:19.864 --> 00:05:22.448
So we'll start with pulling it
out into a custom hook, and

88
00:05:22.448 --> 00:05:24.522
then we'll look at
another approach as well.

89
00:05:24.522 --> 00:05:28.228
And I am not gonna say one is right and
one is wrong.

90
00:05:28.228 --> 00:05:32.976
I have preferences, but there's not
a universal this is the yes and

91
00:05:32.976 --> 00:05:34.317
this is the no way.

92
00:05:34.317 --> 00:05:36.489
I think some people can
argue against me as well.

93
00:05:36.489 --> 00:05:43.170
So, yeah, there is a chance that we want
to fetch many things from the API, right?

94
00:05:43.170 --> 00:05:46.421
And we do not want to write
this every time, so, yeah,

95
00:05:46.421 --> 00:05:48.343
could we pull it out into a hook?

96
00:05:48.343 --> 00:05:49.232
We could, right?

97
00:05:49.232 --> 00:05:54.147
Again, making it a little bit
more reuseable can be tricky, so

98
00:05:54.147 --> 00:05:58.893
we'll say usefetch, and
that might be the URL that we want.

99
00:06:02.379 --> 00:06:08.998
All right, and we'll just say, I'll make

100
00:06:08.998 --> 00:06:14.140
one new piece of state cuz the only part
that's not super generalizable in here is

101
00:06:14.140 --> 00:06:19.451
the fact that we're actually pulling out
the characters and setting characters.

102
00:06:19.451 --> 00:06:23.384
So I don't necessarily wanna take that
piece cuz it's not pulling the characters

103
00:06:23.384 --> 00:06:27.435
property of the JSON object all the time,
it's not, quote, unquote, reusable.

104
00:06:27.435 --> 00:06:31.585
So we might offload that either to let
them pass in a call back function for

105
00:06:31.585 --> 00:06:35.463
how to format the data or let them
do it in the component themselves,

106
00:06:35.463 --> 00:06:37.180
whatever makes you happier.

107
00:06:37.180 --> 00:06:39.957
But we'll pull in pretty
much the rest of this,

108
00:06:45.154 --> 00:06:50.370
And we'll say const,
we'll just call response,

109
00:06:52.247 --> 00:06:58.870
And setResponse, And

110
00:06:58.870 --> 00:07:05.089
that will be useState,
I'll paste the rest of that in there.

111
00:07:05.089 --> 00:07:11.605
So now we've got just, instead of set
characters, it will be setResponse.

112
00:07:13.720 --> 00:07:14.510
Same thing here.

113
00:07:21.321 --> 00:07:25.048
So now we have this, if we give it a URL,
it will figure out how to save some state

114
00:07:25.048 --> 00:07:27.944
on the response, the loading,
the error, all that stuff.

115
00:07:27.944 --> 00:07:31.026
Abstract it out of the actual component
cuz the component shouldn't care about

116
00:07:31.026 --> 00:07:31.858
this stuff, right?

117
00:07:31.858 --> 00:07:34.282
It just wants to know
the state of the world so

118
00:07:34.282 --> 00:07:36.651
it can figure out what
to show in this case.

119
00:07:39.037 --> 00:07:42.426
Cool, so we could do something like,
and now instead of using state,

120
00:07:42.426 --> 00:07:48.842
we'll just use, All right,

121
00:07:48.842 --> 00:07:51.714
this doesn't return anything yet,
so we've gotta do that as well.

122
00:07:51.714 --> 00:07:57.861
So we'll have it return the response,
the loading state, and an error state.

123
00:07:57.861 --> 00:08:01.460
All right, and these are set in
the state that it's maintaining and

124
00:08:01.460 --> 00:08:03.117
it exposes only those things.

125
00:08:03.117 --> 00:08:06.211
It hides all this fetching,
flipping bits on and off,

126
00:08:06.211 --> 00:08:08.778
it doesn't worry about
any of that anymore.

127
00:08:08.778 --> 00:08:13.662
That is maintained solely by this hook,
the actual component using

128
00:08:13.662 --> 00:08:18.643
it is just like, yeah, yeah, yeah,
I need to fetch from endpoint.

129
00:08:22.868 --> 00:08:26.913
And it just tells it what
it wants to fetch from, and

130
00:08:26.913 --> 00:08:30.029
we don't think about the rest, okay?

131
00:08:30.029 --> 00:08:31.420
&gt;&gt; Do you want a d in endpoint?

132
00:08:31.420 --> 00:08:34.051
&gt;&gt; I think I do, feels right.

133
00:08:34.051 --> 00:08:37.007
Feels like spelling our variables
right is probably the right choice.

134
00:08:37.007 --> 00:08:39.442
This is why you live code with 15 friends.

135
00:08:39.442 --> 00:08:43.768
So here we'll get the response,

136
00:08:43.768 --> 00:08:47.638
the loading, and the error.

137
00:08:47.638 --> 00:08:51.948
Now, response is gonna have that character
stuff, which is a little bit tricky,

138
00:08:51.948 --> 00:08:54.697
so we'll probably need to
format that a little bit,

139
00:08:54.697 --> 00:08:56.838
but we'll deal with that momentarily.

140
00:08:56.838 --> 00:09:01.862
So response is either going to be null or
it's gonna be that object with characters.

141
00:09:01.862 --> 00:09:05.733
So I need to just basically check,
like, hey, do I have a response?

142
00:09:05.733 --> 00:09:11.332
If not, I wanna use that default, and
if so, we'll get what we need off of it.

143
00:09:11.332 --> 00:09:17.088
So I'll just say, Characters

144
00:09:17.088 --> 00:09:23.050
is simply going to be, hey,
do you have a response?

145
00:09:23.050 --> 00:09:26.426
And does that have a characters object?

146
00:09:26.426 --> 00:09:28.410
If not, give me an empty array.

147
00:09:30.746 --> 00:09:35.458
So if if response is not null, and
that object has a characters property,

148
00:09:35.458 --> 00:09:38.576
give me that,
otherwise give me an empty array.

149
00:09:38.576 --> 00:09:41.985
Which is very similar to what we have with
the empty array and then we set it, and,

150
00:09:41.985 --> 00:09:43.755
again, it's just JavaScript for that.

151
00:09:43.755 --> 00:09:47.589
So I wrote a lot of code
without checking to see page,

152
00:09:47.589 --> 00:09:50.213
which fills me with absolute fear.

153
00:09:50.213 --> 00:09:51.967
So let's go ahead and see what we got.

154
00:09:51.967 --> 00:09:54.002
Lord, it works.

155
00:09:54.002 --> 00:09:55.115
I'm gonna refresh that,
I don't believe it.

156
00:09:55.115 --> 00:10:01.107
All right, so, yes, I would pull this
out into another file, this usefetch.

157
00:10:01.107 --> 00:10:05.705
And now elsewhere in my application,
I'm in charge of formatting the data and,

158
00:10:05.705 --> 00:10:08.286
to be clear, I'm only passing at endpoint.

159
00:10:08.286 --> 00:10:11.471
If I wanted to pass in a second function,
which is how to format that response,

160
00:10:11.471 --> 00:10:12.840
I could totally do that, right?

161
00:10:12.840 --> 00:10:16.470
And then I don't even have to do this
inside of the actual component, right?

