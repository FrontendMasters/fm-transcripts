WEBVTT

1
00:00:00.100 --> 00:00:03.390
Does it always have to go
around application know

2
00:00:03.390 --> 00:00:06.110
if it is only a part of your
app that needs this right?

3
00:00:06.110 --> 00:00:09.080
Like our application we've got
the one I used to work on for

4
00:00:09.080 --> 00:00:12.670
a number of years had like contacts,
but they also had an editor, but

5
00:00:12.670 --> 00:00:16.050
those might, I don't necessarily
need to read the entire thing and

6
00:00:16.050 --> 00:00:19.180
that I can kinda go to
the smaller part that needs it.

7
00:00:19.180 --> 00:00:21.860
Cuz we in case we're gonna
move that stuff around.

8
00:00:21.860 --> 00:00:24.210
But in this case is a relatively
simple application.

9
00:00:24.210 --> 00:00:26.980
Maybe this is for
a lot of cases is the answer, right?

10
00:00:26.980 --> 00:00:28.850
If you've used Redux before,

11
00:00:28.850 --> 00:00:31.660
it's usually wrapped around
the overall root component as well.

12
00:00:31.660 --> 00:00:33.440
Same thing as like react router.

13
00:00:33.440 --> 00:00:35.580
Typically you will see it here.

14
00:00:35.580 --> 00:00:38.380
What happens if you end up
needing multiple providers?

15
00:00:38.380 --> 00:00:40.850
Or you're just gonna end up stacking them.

16
00:00:40.850 --> 00:00:43.660
It's not it feels wrong, but
it's okay could you could

17
00:00:43.660 --> 00:00:46.530
probably do some crazy stuff with
functional programming and composing and

18
00:00:46.530 --> 00:00:50.280
piping stuff, but probably not worth it.

19
00:00:50.280 --> 00:00:52.240
So now anything can hook into the context,

20
00:00:52.240 --> 00:00:56.210
which means we can do a little
bit of refactoring now And

21
00:00:56.210 --> 00:01:00.170
there is nothing scarier than doing a
major refactor live coding, but we'll try

22
00:01:00.170 --> 00:01:04.010
it out and we'll hope for the best and
we'll deal with whatever errors come up.

23
00:01:04.010 --> 00:01:07.080
So everything is now
a child of GrudgeProvider,

24
00:01:07.080 --> 00:01:11.410
which has the actual context provider,
which has that state management.

25
00:01:11.410 --> 00:01:14.300
So anything can hook into it, which means

26
00:01:14.300 --> 00:01:18.218
application doesn't actually have access
to add grudge or grudges anymore.

27
00:01:18.218 --> 00:01:20.599
Right, so

28
00:01:26.756 --> 00:01:30.247
and we will likely come back and
admire this in a second but

29
00:01:30.247 --> 00:01:33.665
really just wanna talk about
what we got out of this now,

30
00:01:33.665 --> 00:01:37.480
To how to justify the next few moments,
what we're gonna do.

31
00:01:37.480 --> 00:01:42.180
NewGrudge is now this atomic piece that
I can move anywhere in the application.

32
00:01:42.180 --> 00:01:45.180
It doesn't necessarily need everything
to pass down from application.

33
00:01:45.180 --> 00:01:47.650
So I wanna make a sidebar and
move it over there Cool,

34
00:01:47.650 --> 00:01:50.890
it knows about how to add a garage or
will know about when we're done.

35
00:01:50.890 --> 00:01:52.820
Right?
The individual garages I need to move them

36
00:01:52.820 --> 00:01:56.450
someplace I can just basically
say here is the hierarchy.

37
00:01:56.450 --> 00:02:00.200
Here's exactly what my
application the layout should be.

38
00:02:00.200 --> 00:02:02.860
And I'm not necessarily worried about
like threading everything through and

39
00:02:02.860 --> 00:02:03.410
thinking about it.

40
00:02:03.410 --> 00:02:05.830
I'm just basically arranging
the application And

41
00:02:05.830 --> 00:02:09.960
I can move stuff around and everything
will just work it's kind of like atomic

42
00:02:09.960 --> 00:02:12.440
and composed with a state
management that it needs.

43
00:02:12.440 --> 00:02:14.390
So let's go ahead and we'll implement it.

44
00:02:14.390 --> 00:02:17.590
So I'm gonna save this file whatever you
do don't look in your browser cuz we've

45
00:02:17.590 --> 00:02:22.540
broken everything, but it's fine,
cool so we've got that in place,

46
00:02:22.540 --> 00:02:24.430
so what we'll do here is for

47
00:02:24.430 --> 00:02:29.210
the grudges themselves, now grudges
plural doesn't get Unforgive anymore.

48
00:02:30.510 --> 00:02:33.400
Because it doesn't need to do that
passing along so we can get rid of that.

49
00:02:33.400 --> 00:02:38.290
It will get all the, you know, it actually
won't even receive the grudges anymore.

50
00:02:39.860 --> 00:02:43.350
Because application doesn't have them,
applications not passing them in.

51
00:02:43.350 --> 00:02:45.950
Right.
what it needs to do is it needs to reach

52
00:02:45.950 --> 00:02:48.410
into the context and grab them.

53
00:02:48.410 --> 00:02:50.400
This is where we'll get to
use the use context hook.

54
00:02:52.680 --> 00:02:55.879
So all I'll do is say const, grudges

55
00:03:04.250 --> 00:03:07.741
Let's go back into grudge context,

56
00:03:07.741 --> 00:03:12.592
I just need to export it,
the actual context itself

57
00:03:21.895 --> 00:03:24.793
Right, so now grudges, plural,
can basically say, okay,

58
00:03:24.793 --> 00:03:27.880
hook into the GrudgeContent, and
get the grudges out of there.

59
00:03:27.880 --> 00:03:29.450
It doesn't need anything passed in.

60
00:03:29.450 --> 00:03:30.430
It can be moved anywhere.

61
00:03:30.430 --> 00:03:33.670
We don't have to worry about this passing
stuff through the component hierarchy.

62
00:03:35.470 --> 00:03:36.500
It does make sense.

63
00:03:36.500 --> 00:03:41.900
You'll see some patterns where you might
have for the list of things just an array

64
00:03:41.900 --> 00:03:47.040
of IDs, and then each singular grudge
might be in charge of like going and

65
00:03:47.040 --> 00:03:50.040
finding that one and it might also
have to hook into the context.

66
00:03:50.040 --> 00:03:52.130
We're not gonna go that far right now.

67
00:03:52.130 --> 00:03:57.460
But we can see that Grudges plural
doesn't get anything past and

68
00:03:57.460 --> 00:03:58.920
it can just hook into the context.

69
00:03:59.920 --> 00:04:02.500
Same is true of grudge singular, right?

70
00:04:02.500 --> 00:04:05.170
It will get the grudge past and
from above which makes sense.

71
00:04:05.170 --> 00:04:08.725
Again, we could- We still need
to know which grudge this is,

72
00:04:08.725 --> 00:04:09.515
we need to pass something.

73
00:04:09.515 --> 00:04:12.665
Whether it's the idea of which one
to go get from the context API, or

74
00:04:12.665 --> 00:04:14.025
the whole grudge object.

75
00:04:14.025 --> 00:04:15.935
Really, it's about how
your data's structured.

76
00:04:15.935 --> 00:04:19.255
In this case, we have the full object,
we have to pass either an ID or

77
00:04:19.255 --> 00:04:20.355
the full object in.

78
00:04:20.355 --> 00:04:23.935
So let's just pass in the full object.

79
00:04:23.935 --> 00:04:27.820
But we didn't wanna thread
through that on forgive.

80
00:04:27.820 --> 00:04:32.292
Right, and so if we want to get
access to toggleForgiveness,

81
00:04:32.292 --> 00:04:34.186
it is the same basic idea.

82
00:04:46.308 --> 00:04:49.990
UseContext, I'll grab that from
the GrudgeContext as well.

83
00:04:49.990 --> 00:04:53.840
So it just reaches up into that context
that we made and so instead of being

84
00:04:53.840 --> 00:04:57.810
called, 'toggleunforgiveness',
it's called, 'toggleforgiveness'.

85
00:04:57.810 --> 00:04:59.770
So again, we say all right,
the Grudges be like,

86
00:04:59.770 --> 00:05:03.420
"Hey, I need all the Grudges." The
individual Grudge can be like,

87
00:05:03.420 --> 00:05:07.670
"All right, I need the ability
to forgive a Grudge." Right and

88
00:05:07.670 --> 00:05:12.400
have access to that as well and
they don't necessarily have a path,

89
00:05:12.400 --> 00:05:17.290
each one can reach in and
grab exactly what it needs in this case.

90
00:05:17.290 --> 00:05:23.130
Alright, cool, so we've got all that in
there The other thing we wanna do is,

91
00:05:23.130 --> 00:05:26.730
we're gonna want implement the ability to
add a new grudge, but first what we gonna

92
00:05:26.730 --> 00:05:31.440
do is we're just going to comment that out
for a second to verify that we've works,

93
00:05:31.440 --> 00:05:37.530
cuz new grudge is still broken,
cuz it's basked in property you passed in.

94
00:05:37.530 --> 00:05:39.400
Might actually work,
unless we actually try to call it.

95
00:05:39.400 --> 00:05:40.580
Let's see.

96
00:05:40.580 --> 00:05:41.298
Yeah it's there.

97
00:05:41.298 --> 00:05:45.082
Alright, cool.

98
00:05:50.614 --> 00:05:52.620
So we got so refreshed.

99
00:05:52.620 --> 00:05:55.020
I don't have anything yet.

100
00:05:55.020 --> 00:05:55.807
So let's see what we got.

101
00:05:59.640 --> 00:06:01.370
We've got the context provider.

102
00:06:02.450 --> 00:06:09.680
Scott this value array of garages if
you don't save files, nothing happens.

103
00:06:09.680 --> 00:06:11.056
There they are.

104
00:06:11.056 --> 00:06:18.050
So we had an empty array as the graduates
prop and so I didn't save the file.

105
00:06:18.050 --> 00:06:20.343
So you can see that there.

106
00:06:20.343 --> 00:06:21.159
They are.

107
00:06:22.160 --> 00:06:25.750
You will notice that I am rendering
all of them on every forgiven again.

108
00:06:25.750 --> 00:06:29.660
All my performance optimizations
didn't carry through.

109
00:06:29.660 --> 00:06:32.670
The reason for this is there's
no real way to know anymore.

110
00:06:32.670 --> 00:06:36.120
That react memo was looking at the props
last time and the props this time.

111
00:06:37.630 --> 00:06:40.410
But now it's reaching into context, and
it doesn't really know what changed.

112
00:06:41.460 --> 00:06:42.420
Right.
And so

113
00:06:42.420 --> 00:06:47.750
what we are getting is the ability to
get a nice clean kinda set up like this.

114
00:06:47.750 --> 00:06:54.880
What we are losing is some of that
light performance optimization.

115
00:06:54.880 --> 00:06:56.040
Now.

116
00:06:56.040 --> 00:06:57.300
Yeah?

117
00:06:57.300 --> 00:07:00.070
&gt;&gt; I was gonna say is another thing
that we're losing too is the ability

118
00:07:00.070 --> 00:07:00.810
to kind of.

119
00:07:00.810 --> 00:07:03.638
You have these components
now that you can't test.

120
00:07:03.638 --> 00:07:04.330
&gt;&gt; Yes.

121
00:07:04.330 --> 00:07:08.990
[LAUGH]
Yes, so that is true too.

122
00:07:08.990 --> 00:07:12.620
And we'll round back
into that one as well.

123
00:07:12.620 --> 00:07:16.740
Before because they were receiving
everything I could pass things in.

124
00:07:16.740 --> 00:07:20.570
And I could theoretically test them now
that they're hooked into this magical

125
00:07:20.570 --> 00:07:22.070
context API.

126
00:07:22.070 --> 00:07:24.270
They come with a bunch of extra stuff.

127
00:07:24.270 --> 00:07:26.340
Now, there's some ways to handle this one.

128
00:07:26.340 --> 00:07:30.950
One thing that we do is we basically
have a like a test context

129
00:07:30.950 --> 00:07:32.480
that we wrap it in for testing, right?

130
00:07:32.480 --> 00:07:34.170
That is the easiest way.

131
00:07:34.170 --> 00:07:36.810
There are also patterns,
like the container pattern or

132
00:07:36.810 --> 00:07:38.340
the higher order component pattern.

133
00:07:38.340 --> 00:07:41.220
Where then you hug
the presentational component

134
00:07:41.220 --> 00:07:45.200
that doesn't have any access to
the context with one that only,

135
00:07:45.200 --> 00:07:48.860
this is very similar to what our provider
did to the application, which is it did

136
00:07:48.860 --> 00:07:51.670
all the state management in the past
into a dumb application component.

137
00:07:52.720 --> 00:07:53.560
We can do the same thing.

138
00:07:53.560 --> 00:07:55.490
We have a presentational component, and

139
00:07:55.490 --> 00:07:58.280
a container component that does all
the state management and pass it in.

140
00:07:58.280 --> 00:08:01.820
This is very common in Redux as
well as to separate those two.

141
00:08:01.820 --> 00:08:02.580
So you have two options.

142
00:08:02.580 --> 00:08:05.940
Which is one, make a text context,
which we do in a lot of cases.

143
00:08:05.940 --> 00:08:07.770
Or two, just separate those two out so

144
00:08:07.770 --> 00:08:12.270
you can test the presentational piece
separate from the actual state management.

145
00:08:12.270 --> 00:08:14.480
So, yeah, that's a great point.

146
00:08:14.480 --> 00:08:19.205
We also lost some of the Performance
optimizations but I would incur you as to

147
00:08:19.205 --> 00:08:21.355
like make sure you have a performance
problem before you worry about that.

148
00:08:21.355 --> 00:08:27.675
It is very easy to say in a code reveal
I heard that's not as performance but

149
00:08:27.675 --> 00:08:34.385
react is fast and if it's not perceptible,
it's that trade off of maintainability

150
00:08:34.385 --> 00:08:38.330
versus performance and I would argue
You know, in a lot of cases like

151
00:08:38.330 --> 00:08:42.440
if you can't ship a feature cuz everything
is hard, We're all writing softwares for

152
00:08:42.440 --> 00:08:46.500
our customers, some times it's a trade-off
between what is the right choice for

153
00:08:46.500 --> 00:08:51.890
our customers, the ability to ship
features or our performance optimization.

154
00:08:51.890 --> 00:08:54.450
And like some times performance is
important I do not want to make it sound

155
00:08:54.450 --> 00:08:58.450
like performance is not important but
if it's not actually not performant

156
00:08:58.450 --> 00:09:02.090
Choosing the unmaintainable thing to
fix a non existent performance problem.

157
00:09:02.090 --> 00:09:06.150
Like if you're not code splitting, I don't
wanna hear about like the context API and

158
00:09:06.150 --> 00:09:07.270
like react memo, right?

159
00:09:07.270 --> 00:09:10.830
If you're not optimizing fonts and images,
this is like a high class problem.

160
00:09:10.830 --> 00:09:12.410
There are some lower hanging fruits.

161
00:09:12.410 --> 00:09:16.860
So it's a decision you need to make So
we've got it in there,

162
00:09:16.860 --> 00:09:18.150
we've got it with the Grudges.

163
00:09:18.150 --> 00:09:20.790
Now, NewGrudge, so
what would NewGrudge need?

164
00:09:20.790 --> 00:09:26.150
Really, if you look at it now, it's
getting in this onSubmit, and onSubmit was

165
00:09:26.150 --> 00:09:29.840
really just addGrudge was being passed in,
if you remember from the previous version.

166
00:09:29.840 --> 00:09:31.890
Well, it doesn't need addGrudge passed in.

167
00:09:32.970 --> 00:09:35.369
It can just reach into the context and
grab it itself.

168
00:09:36.570 --> 00:09:41.350
Do you know what you are going to
do?You're going to reach into the context

169
00:09:41.350 --> 00:09:47.330
API, and you're going to grab out at
drudge and get rid of this prop right up

170
00:09:47.330 --> 00:09:52.110
here and replace this with the actual edge
that you pull in from the garage context.

