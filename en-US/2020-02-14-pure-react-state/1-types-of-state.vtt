WEBVTT

1
00:00:00.000 --> 00:00:03.008
There's a lot of different kinds of state.

2
00:00:03.008 --> 00:00:06.032
The kind of one that we talked about
originally was what I call model

3
00:00:06.032 --> 00:00:07.010
data, right?

4
00:00:07.010 --> 00:00:10.670
Which is the kind of nouns in our
application, the things, right?

5
00:00:10.670 --> 00:00:15.140
If it is a catalog of products,
it is the list of products,

6
00:00:15.140 --> 00:00:18.880
each individual product,
the price or description, or

7
00:00:18.880 --> 00:00:23.130
something along those lines, that's
probably stored on the server, right?

8
00:00:23.130 --> 00:00:24.760
So on and so forth, it's a given order.

9
00:00:24.760 --> 00:00:26.870
It's a to-do on a to-do list.

10
00:00:26.870 --> 00:00:32.370
It is a email campaign in marketing
campaign's product, right?

11
00:00:32.370 --> 00:00:35.016
It doesn't, yeah, it is the actual
thing that we're kinda persisting,

12
00:00:35.016 --> 00:00:36.664
that we're working with
in the application.

13
00:00:36.664 --> 00:00:38.490
But there's other kinds of state as well.

14
00:00:38.490 --> 00:00:41.690
There is this kinda view level UI state,
right?

15
00:00:41.690 --> 00:00:46.240
Which is, we have the list of
all of your reports, right?

16
00:00:46.240 --> 00:00:49.382
Now, is that list sorted in ascending or
descending order?

17
00:00:49.382 --> 00:00:51.329
Are they currently filtering it, right?

18
00:00:51.329 --> 00:00:54.072
There's all these different kinda things
based on we have the nouns in our

19
00:00:54.072 --> 00:00:56.830
application, but there's some extra
information about how we view it.

20
00:00:56.830 --> 00:00:59.480
And we don't normally store that it in the
database, or anything along those lines.

21
00:00:59.480 --> 00:01:01.342
But we do need to keep track
of it in our application.

22
00:01:01.342 --> 00:01:02.931
We have the session states.

23
00:01:02.931 --> 00:01:04.037
Is the user logged in?

24
00:01:04.037 --> 00:01:04.943
Which user are they?

25
00:01:04.943 --> 00:01:08.560
Can they see this, so
on and so forth, right?

26
00:01:08.560 --> 00:01:11.190
That is another state of the application,
logged in,

27
00:01:11.190 --> 00:01:16.610
logged out, able to access
the given resource, so on so forth.

28
00:01:16.610 --> 00:01:18.400
Communication, right?

29
00:01:18.400 --> 00:01:22.960
As we go and get that model data from
the API, what is the state of that?

30
00:01:22.960 --> 00:01:24.640
Are we currently loading it?

31
00:01:24.640 --> 00:01:25.910
Has it loaded?

32
00:01:25.910 --> 00:01:28.030
Are we updating it?

33
00:01:28.030 --> 00:01:29.150
Was there an error?

34
00:01:29.150 --> 00:01:34.040
There's some state, and even the kind of
time based metric of how we go to get

35
00:01:34.040 --> 00:01:38.280
other pieces of state, right,
if we're doing something.

36
00:01:38.280 --> 00:01:40.354
And finally, location.

37
00:01:40.354 --> 00:01:44.240
Where are we in the application, right?

38
00:01:44.240 --> 00:01:45.840
The traditional model of the web,

39
00:01:45.840 --> 00:01:49.400
which is you had a URL that
loaded an HTML page, right?

40
00:01:49.400 --> 00:01:52.120
And it's like, okay,
where on the server was that page?

41
00:01:52.120 --> 00:01:55.080
Now, we know that for
a lot of robust client-side applications,

42
00:01:55.080 --> 00:01:59.340
the URL is, a lot of times,
there's one index.html page.

43
00:01:59.340 --> 00:02:02.460
We do a bunch of tomfoolery
with client-side routing,

44
00:02:02.460 --> 00:02:06.820
to kind of load different controllers in
the application, and so on and so forth.

45
00:02:06.820 --> 00:02:07.776
So where are we?

46
00:02:07.776 --> 00:02:10.700
Are we looking at a given
product in the catalog?

47
00:02:10.700 --> 00:02:11.613
Are we in the shopping cart?

48
00:02:11.613 --> 00:02:14.240
Well, that's a different
state of the application.

49
00:02:14.240 --> 00:02:17.979
In a perfect world, yeah,
I'm not gonna shame any applications.

50
00:02:17.979 --> 00:02:21.830
But we all have known the ones where we're
like, we find one with some dank meme, and

51
00:02:21.830 --> 00:02:23.310
we wanna send it to our friends.

52
00:02:23.310 --> 00:02:26.390
We drop it into the mess, and
they get the homepage, right?

53
00:02:26.390 --> 00:02:29.160
And that's kind of base
level table stakes for

54
00:02:29.160 --> 00:02:31.050
a client side application these days,
right?

55
00:02:31.050 --> 00:02:32.860
But it could go a little bit further,
right?

56
00:02:32.860 --> 00:02:37.970
What if they navigate away from
the descendant lease ascending the sorted

57
00:02:37.970 --> 00:02:42.030
list of products, go to a product
description, and come back, right?

58
00:02:42.030 --> 00:02:44.070
We could choose to store that in the URL.

59
00:02:44.070 --> 00:02:47.190
Or they could say, okay, I wanna send
you the list of all these reports

60
00:02:47.190 --> 00:02:51.240
that have been filtered by this client,
sorted by this date.

61
00:02:51.240 --> 00:02:54.170
As long as the user is logged in,
they should see that exact same one.

62
00:02:54.170 --> 00:02:56.200
If we store that in the URL,

63
00:02:56.200 --> 00:02:59.970
then we have the ability to kind of
persist that without storing the database,

64
00:02:59.970 --> 00:03:02.440
and not losing it when
the page is refreshed, right?

65
00:03:02.440 --> 00:03:06.050
So it's another form of state
that we might need to deal with.

66
00:03:06.050 --> 00:03:09.910
Now, it's really hard to talk about
five or more pieces of state.

67
00:03:09.910 --> 00:03:14.411
So generally speaking, when I reference
the kind of different ways we might deal

68
00:03:14.411 --> 00:03:17.919
with state, I'm probably just
going to boil it down into two,

69
00:03:17.919 --> 00:03:21.041
effectively model state and
everything else, right?

70
00:03:21.041 --> 00:03:24.179
This more ephemeral state that
we're not keeping anywhere, or

71
00:03:24.179 --> 00:03:25.375
do anything like that.

72
00:03:25.375 --> 00:03:28.420
And we're gonna look at a bunch
of different approaches.

73
00:03:28.420 --> 00:03:31.060
And like I said before,
sometimes we're gonna solve a problem, and

74
00:03:31.060 --> 00:03:32.790
then we're gonna recreate a problem.

75
00:03:32.790 --> 00:03:37.156
At the end of the day,
there is not necessarily a silver bullet.

76
00:03:37.156 --> 00:03:39.947
One of the things that I like to say,
right,

77
00:03:39.947 --> 00:03:42.739
my own fortune cookie
piece of wisdom here,

78
00:03:42.739 --> 00:03:47.658
is that anything that has clear rules,
we can abstract out to the framework.

79
00:03:47.658 --> 00:03:50.540
We can abstract out to the compiler,
or something along those lines.

80
00:03:50.540 --> 00:03:54.340
We're left with the tough choices,
so that's why they pay us.

81
00:03:54.340 --> 00:03:57.230
So for a lot of these things is
to understand the trade-offs, and

82
00:03:57.230 --> 00:04:01.630
then apply them to the very specific and
unique problems in your application.

83
00:04:01.630 --> 00:04:03.893
So we're just gonna talk about some
of the kind of general approaches.

84
00:04:03.893 --> 00:04:08.160
But there isn't always do this,
or never do that, right?

85
00:04:08.160 --> 00:04:11.090
Cuz we actually already baked those in.

86
00:04:11.090 --> 00:04:14.457
We're only left with the tough choices,
and the kind of tricky trade-offs.

