WEBVTT

1
00:00:02.626 --> 00:00:05.317
So this is components that completed,

2
00:00:05.317 --> 00:00:09.076
this is very similar to what we had,
originally I did.

3
00:00:09.076 --> 00:00:10.999
We had a spoiler alert with a question,

4
00:00:10.999 --> 00:00:14.625
but I did show the syntax where you can
skip the constructors in this case.

5
00:00:14.625 --> 00:00:17.095
So it doesn't always
be as much binding but

6
00:00:17.095 --> 00:00:20.025
we talked about the fact that this
isn't supported out of the box.

7
00:00:20.025 --> 00:00:23.605
You do need a battle plugin which happens
to be installed in create react app but

8
00:00:23.605 --> 00:00:27.125
not not necessarily out of
the box in a custom setup.

9
00:00:28.595 --> 00:00:30.975
We set component DidUpdate.

10
00:00:32.538 --> 00:00:35.860
And we're gonna give ourselves a little
bit of a timer here we'll say set timeout.

11
00:00:35.860 --> 00:00:37.320
This is the simulate.

12
00:00:37.320 --> 00:00:41.060
So we can tell from the click to what
the actual component did update happen.

13
00:00:41.060 --> 00:00:46.506
So we'll say set timeout
will go to function and

14
00:00:46.506 --> 00:00:49.374
we'll say console log.

15
00:00:53.139 --> 00:01:01.538
And we'll say count Is this.state.count.

16
00:01:01.538 --> 00:01:05.166
And we'll just have it wait three seconds,
that's enough for

17
00:01:05.166 --> 00:01:08.394
me to slam on the increment button and
see what happens.

18
00:01:08.394 --> 00:01:09.259
All right.

19
00:01:11.081 --> 00:01:13.279
Cool, so
I'll hit increment a bunch of times.

20
00:01:16.874 --> 00:01:24.430
You can see that 7 times we logged
to the console the number 7, right?

21
00:01:24.430 --> 00:01:27.530
Which meant we are,
mutating is not the right word, but

22
00:01:27.530 --> 00:01:31.060
we're still referencing
the same this.state.value.

23
00:01:31.060 --> 00:01:35.400
Right, like we call this .state,
which is still stored on that object.

24
00:01:35.400 --> 00:01:38.190
So when all of those three second
delays caught up,it's like, all right,

25
00:01:38.190 --> 00:01:39.760
what is this .state?

26
00:01:39.760 --> 00:01:42.095
What seven, right?

27
00:01:42.095 --> 00:01:44.050
Which makes a certain amount of sense,

28
00:01:44.050 --> 00:01:45.760
mostly because because we
just saw it happen, right.

29
00:01:45.760 --> 00:01:48.800
Like, I think we did a guessing game,
we probably would've said either one, two,

30
00:01:48.800 --> 00:01:51.650
three, four, five, six, seven or
seven, we might've been 50/50.

31
00:01:51.650 --> 00:01:55.375
But here we can see, we're staring
with the evidence in our face.

32
00:01:55.375 --> 00:02:00.475
That when all those sub timeouts caught
up, they tried to read this .state,

33
00:02:00.475 --> 00:02:03.382
well we hit it seven times,
it is now seven.

34
00:02:03.382 --> 00:02:05.502
So what I'm gonna do,
is I'm gonna switch back.

35
00:02:09.082 --> 00:02:10.743
So we can see the difference.

36
00:02:17.264 --> 00:02:18.415
Local storage.

37
00:02:21.290 --> 00:02:23.480
That's fun.

38
00:02:23.480 --> 00:02:24.510
Switching branches is fun.

39
00:02:27.010 --> 00:02:28.870
Let's go ahead and
just turn this into a useState for now

40
00:02:35.459 --> 00:02:38.915
And I remove these other effects.

41
00:02:38.915 --> 00:02:41.296
All right, so what happens if
we do the same thing here now?

42
00:02:45.713 --> 00:02:46.722
We'll give it a set timeout.

43
00:02:51.043 --> 00:02:52.756
3,000 and we'll say console log.

44
00:02:59.902 --> 00:03:00.910
Cool.

45
00:03:00.910 --> 00:03:03.336
Effectively the same code
instead of component did update,

46
00:03:03.336 --> 00:03:06.850
we now have and
this is all up on the account prop.

47
00:03:06.850 --> 00:03:08.470
Component update was
gonna run all the time.

48
00:03:08.470 --> 00:03:12.010
We might wanna add conditionals if we have
had multiple props, so on and so forth.

49
00:03:12.010 --> 00:03:16.200
This is only listening for
the variable count property rather state.

50
00:03:17.610 --> 00:03:19.365
And we'll go ahead and we'll slam on it.

51
00:03:24.774 --> 00:03:29.080
Right, in this case we're not getting
them all referencing the last value.

52
00:03:29.080 --> 00:03:32.400
This is not fundamental to
a different way the two APIs work

53
00:03:32.400 --> 00:03:35.170
this is a fundamental difference
to the way JavaScripts work.

54
00:03:35.170 --> 00:03:38.130
Before it was a class object
that was one class that

55
00:03:38.130 --> 00:03:40.822
was sitting there that
had a state property.

56
00:03:40.822 --> 00:03:44.976
So when all of those new timers caught up
they were like shat is this state was this

57
00:03:44.976 --> 00:03:47.110
the state was this state, right?

58
00:03:47.110 --> 00:03:49.630
In the case of the function components,

59
00:03:49.630 --> 00:03:53.660
it is a unique call of
the function every single time.

60
00:03:53.660 --> 00:03:57.560
So the first time count was zero and this
was the one that's incrementing by five,

61
00:03:57.560 --> 00:03:59.880
but if I did decrement,
a bunch of times, you'll see it by one.

62
00:04:01.760 --> 00:04:04.670
So it is a unique call to every function,
right?

63
00:04:04.670 --> 00:04:07.350
Which means you're getting
a copy of the state and

64
00:04:07.350 --> 00:04:12.560
the props every single time, you're not
referencing a class property on an object.

65
00:04:12.560 --> 00:04:15.050
And so this is again,
one of those subtle differences.

66
00:04:15.050 --> 00:04:17.750
You're like, I'm gonna refactor
all the things to hooks and

67
00:04:17.750 --> 00:04:20.310
then all of a sudden like it
starts going very poorly for you.

68
00:04:20.310 --> 00:04:24.310
Right as these kind of very subtle
differences in between the two and

69
00:04:24.310 --> 00:04:26.920
like how they work,
which is interesting, right?

70
00:04:28.090 --> 00:04:31.270
Well, what would we do in the event

71
00:04:31.270 --> 00:04:34.840
that we actually wanted to
persist some amount of state?

72
00:04:34.840 --> 00:04:35.420
Right?

73
00:04:35.420 --> 00:04:39.240
We wanted to know, like, we had a bunch of
ways before of telling what the state was,

74
00:04:39.240 --> 00:04:43.490
what will be next time the class based
components because it's unique every time.

75
00:04:43.490 --> 00:04:45.670
We don't have a great way.

76
00:04:45.670 --> 00:04:48.540
I mean, we do but
like in our current conversation,

77
00:04:48.540 --> 00:04:52.960
we don't have a really great way of
persisting any data between renders.

78
00:04:52.960 --> 00:04:56.130
All right, I want to know what it was last
time or something along those lines where

79
00:04:56.130 --> 00:05:00.075
I want to store a value in between
each invocation of this function.

80
00:05:00.075 --> 00:05:01.605
We need a way of doing that.

81
00:05:01.605 --> 00:05:03.625
Like there are subtle use cases, right?

82
00:05:03.625 --> 00:05:07.125
Do you wanna go back to the previous
state like a very simple undo?

83
00:05:07.125 --> 00:05:12.925
Do you wanna find out if the number is
now higher or lower than it was before?

84
00:05:12.925 --> 00:05:16.275
Right, well, in order to tell the number
was higher, lower than was before,

85
00:05:16.275 --> 00:05:21.550
you're gonna need to know what it
was before and what it is now.

86
00:05:21.550 --> 00:05:22.160
Right?

87
00:05:22.160 --> 00:05:25.490
And could you start storing
multiple things in stage and

88
00:05:25.490 --> 00:05:27.190
trying to shuffle them around?

89
00:05:27.190 --> 00:05:27.860
Sure.

90
00:05:27.860 --> 00:05:30.880
And in a simple counter application
that might even work, right, but

91
00:05:30.880 --> 00:05:33.060
you can see a world where
that doesn't work super well.

92
00:05:34.210 --> 00:05:35.840
There is a way to do it.

93
00:05:35.840 --> 00:05:39.130
And it's actually using
a another hook that's used for

94
00:05:39.130 --> 00:05:41.240
a second thing that we'll
talk about in a second.

95
00:05:41.240 --> 00:05:44.090
You might have seen before,
like, Rex has this idea of refs.

96
00:05:44.090 --> 00:05:47.790
Right?
And a ref is usually we give it to a DOM

97
00:05:47.790 --> 00:05:51.140
node that we want to be able to target and
focus.

98
00:05:51.140 --> 00:05:52.820
Well, that's going to
theoretically persist.

99
00:05:52.820 --> 00:05:53.930
You might want that.

100
00:05:53.930 --> 00:05:58.320
But, it also gives it is an object
that kind of stays there.

101
00:05:58.320 --> 00:06:00.350
And, you can actually reference it and

102
00:06:00.350 --> 00:06:03.290
will stay it'll be
the same object over time.

103
00:06:03.290 --> 00:06:05.200
So for instance, if I did this.

104
00:06:05.200 --> 00:06:08.011
I'm gonna just clean up
just a little bit here,

105
00:06:08.011 --> 00:06:10.201
let's make this back to a set count of,

106
00:06:17.080 --> 00:06:21.978
C + 1, I wanna get rid of some of
these other ones up here for a second,

107
00:06:21.978 --> 00:06:26.520
it's what I use when I'm tired
of the ES on console logs.

108
00:06:26.520 --> 00:06:30.750
All right, now we're incrementing
by one the same way we were before.

109
00:06:30.750 --> 00:06:33.328
Now, we could theoretically go ahead and
get a,

110
00:06:41.551 --> 00:06:44.640
It's gonna be this React.useRef, right?

111
00:06:44.640 --> 00:06:49.459
Now Ref, it's gonna give an object
which effectively looks like this.

112
00:06:53.454 --> 00:06:55.670
It has this current property on it, right?

113
00:06:55.670 --> 00:06:59.310
And the reason for that is that way I can
persist the object cuz we said before

114
00:06:59.310 --> 00:07:01.380
primitives are passed by value.

115
00:07:01.380 --> 00:07:02.500
Objects are passed by reference.

116
00:07:02.500 --> 00:07:05.340
So this way we can still keep
referencing the same object.

117
00:07:05.340 --> 00:07:08.760
So we can set this, and if we can set just
once it will be the same every time it

118
00:07:08.760 --> 00:07:12.390
will be persisted right, it'll be the same
dominoed will be the same value, so on and

119
00:07:12.390 --> 00:07:12.930
so forth.

120
00:07:14.660 --> 00:07:19.410
So what we could do is we could say
something along the lines of we

121
00:07:19.410 --> 00:07:20.766
wanna update it.

122
00:07:25.840 --> 00:07:27.970
We will update it to the current count.

123
00:07:27.970 --> 00:07:31.100
Now this is silly,
this isn't gonna do anything for

124
00:07:31.100 --> 00:07:32.960
us yet, because we're gonna say all right,

125
00:07:32.960 --> 00:07:35.820
we got a new count I'm gonna say
that the thing that persist is that.

126
00:07:35.820 --> 00:07:38.410
But it means it in this space here.

127
00:07:38.410 --> 00:07:42.680
Before I use that ref,
it is the previous value.

128
00:07:42.680 --> 00:07:44.410
Right, because we're
setting it every time.

129
00:07:44.410 --> 00:07:47.600
But until we set it,
we have access to what it was.

130
00:07:47.600 --> 00:07:49.594
So I could say something
along the lines of.

131
00:07:53.171 --> 00:07:58.806
If count ref current is less than count,
we'll make a message.

132
00:08:05.969 --> 00:08:07.830
The message is that it
was previously higher.

133
00:08:11.110 --> 00:08:15.860
Otherwise, it's created in the account
we'll say is previously lower.

134
00:08:18.060 --> 00:08:19.300
Right?
Cuz this will now persist

135
00:08:19.300 --> 00:08:20.070
between every render.

136
00:08:20.070 --> 00:08:23.830
We're reassigning it otherwise it would
just be null the first time, so on and

137
00:08:23.830 --> 00:08:25.110
so forth.

138
00:08:25.110 --> 00:08:29.942
And so what we'll just do quickly
here as we say we'll put it,

139
00:08:35.409 --> 00:08:41.700
Right It's now higher, it's now higher,
it's now lower, it's now lower.

140
00:08:41.700 --> 00:08:46.300
We can compare the previous value
with the current one, right?

141
00:08:46.300 --> 00:08:50.280
This gives us a kind of an escape patch
of getting a unique copy every time and

142
00:08:50.280 --> 00:08:53.250
only adding a slice in time.

143
00:08:53.250 --> 00:08:57.360
So yeah, the current will actually persist
across renders until you update it.

144
00:08:57.360 --> 00:09:00.240
It is only getting updated
when we choose to update it.

145
00:09:00.240 --> 00:09:04.580
If for instance,
I took out this line right here,

146
00:09:04.580 --> 00:09:08.070
it would just stay the same
value across every render.

147
00:09:08.070 --> 00:09:10.880
It is only happening
because I am assigning it.

148
00:09:10.880 --> 00:09:12.840
Right?
So it gives you the ability to get some of

149
00:09:12.840 --> 00:09:17.370
that same ability to like reference,
like a persistent value that

150
00:09:17.370 --> 00:09:21.150
you had from a component class you
now get with a function as well.

