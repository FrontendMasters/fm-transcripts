WEBVTT

1
00:00:00.000 --> 00:00:04.540
Again, I just want to emphasize that that
ID that I put in a bracket is simply

2
00:00:04.540 --> 00:00:06.110
the same name as the file, right?

3
00:00:06.110 --> 00:00:09.990
So it's query, which is an object,
and it has tons of properties on it.

4
00:00:09.990 --> 00:00:12.130
That will match the file name.

5
00:00:12.130 --> 00:00:15.080
And I say tons because
you can actually have

6
00:00:15.080 --> 00:00:18.300
more than one parameter
in there in one file.

7
00:00:18.300 --> 00:00:20.510
And that might not make sense
because you might be thinking like,

8
00:00:20.510 --> 00:00:24.200
whoa, I can't have two
parameters in one path.

9
00:00:24.200 --> 00:00:30.050
I can't have something like, something
like this where you had a route that was

10
00:00:30.050 --> 00:00:35.540
like slash, user slash and then you had
like some parameter here called ID.

11
00:00:35.540 --> 00:00:37.130
But then you had another parameter here.

12
00:00:37.130 --> 00:00:38.890
That was like, thing.

13
00:00:38.890 --> 00:00:39.680
Yeah, you can't do that.

14
00:00:39.680 --> 00:00:41.670
There's not gonna be two
parameters in there.

15
00:00:41.670 --> 00:00:44.451
So when would you ever
have two parameters?

16
00:00:44.451 --> 00:00:47.521
Inside of a query object for
one page, yeah, I mean,

17
00:00:47.521 --> 00:00:49.647
technically that's not possible.

18
00:00:49.647 --> 00:00:52.719
But next js gives you something
called catch all routes,

19
00:00:52.719 --> 00:00:56.820
which kind of make that virtually
possible, which is really interesting.

20
00:00:56.820 --> 00:00:59.450
And I think it's a very nifty feature

21
00:00:59.450 --> 00:01:02.200
that I take advantage of all
the time whenever I can.

22
00:01:02.200 --> 00:01:05.600
But basically catch our routes
are exactly what they sound like.

23
00:01:05.600 --> 00:01:07.740
They basically are like
a glob pattern you can say,

24
00:01:09.100 --> 00:01:10.880
versus if you're writing a git ignore and
you're like,

25
00:01:10.880 --> 00:01:14.120
I just want a git ignore everything after
this folder and you put two stars, right?

26
00:01:14.120 --> 00:01:16.770
So it'll capture everything
after that path.

27
00:01:16.770 --> 00:01:20.660
You do the same thing with the router,
you can say I want to go to this path.

28
00:01:20.660 --> 00:01:23.640
And I want to capture
everything after here.

29
00:01:23.640 --> 00:01:25.590
And it's really amazing.

30
00:01:25.590 --> 00:01:29.230
And in my opinion,
it's kind of lazy because yeah,

31
00:01:29.230 --> 00:01:32.800
you can just make a page for every
single possible parameter that you'll

32
00:01:32.800 --> 00:01:35.220
ever have inside your pages directory.

33
00:01:35.220 --> 00:01:37.970
But why would you do that,
you should just be lazy because

34
00:01:37.970 --> 00:01:42.190
lazy developers are good developers,
remember that?

35
00:01:42.190 --> 00:01:44.250
So, that's basically what we're gonna do.

36
00:01:44.250 --> 00:01:46.300
So what is the syntax look like for

37
00:01:46.300 --> 00:01:48.760
a catch all route,
it kind of looks like this.

38
00:01:48.760 --> 00:01:53.040
So you just make a file with the same
brackets, except for you put this ellipses

39
00:01:53.040 --> 00:01:58.020
in front of a parameter, that ellipses
has got itself next js that you want to

40
00:01:58.020 --> 00:02:03.230
catch everything after docs,
it's gonna capture everything there.

41
00:02:03.230 --> 00:02:07.400
And then we're able to use
it inside of our params.

42
00:02:07.400 --> 00:02:10.590
So let's go back, and let's just make
a new page just for the fun of it.

43
00:02:10.590 --> 00:02:12.530
I'm gonna make a new one here.

44
00:02:12.530 --> 00:02:18.730
Or maybe not in those, I'll just refactor
the id one to do it, just for fun.

45
00:02:18.730 --> 00:02:21.556
So I'm gonna make this one but
dot, dot, dot.

46
00:02:21.556 --> 00:02:24.322
And again,
you don't have to put params here.

47
00:02:24.322 --> 00:02:25.200
Input whatever you want.

48
00:02:25.200 --> 00:02:27.950
It doesn't matter, but
I think params makes sense.

49
00:02:27.950 --> 00:02:28.970
And you'll see why in a minute.

50
00:02:28.970 --> 00:02:30.050
So I'm gonna put params here.

51
00:02:31.230 --> 00:02:34.940
This ID is no longer gonna be
ID because I don't have ID here.

52
00:02:34.940 --> 00:02:36.000
It's now params.

53
00:02:36.000 --> 00:02:37.480
So that's not gonna work.

54
00:02:37.480 --> 00:02:38.460
So I need to change this too.

55
00:02:39.890 --> 00:02:41.030
You guessed it param.

56
00:02:41.030 --> 00:02:43.690
Not that params.

57
00:02:43.690 --> 00:02:44.970
So this matches with this.

58
00:02:44.970 --> 00:02:48.010
So the only difference is
whereas before Id was,

59
00:02:48.010 --> 00:02:52.660
the value of that Id,
params is gonna be an array.

60
00:02:52.660 --> 00:02:57.518
It's gonna be an array of all
the matching params that match

61
00:02:57.518 --> 00:02:59.959
in order that you route it to.

62
00:02:59.959 --> 00:03:04.829
So for instance, if I had a route
that looked like this, in this case,

63
00:03:04.829 --> 00:03:09.056
it was /notes/1/2/3/4,
oops, that's a comma.

64
00:03:09.056 --> 00:03:15.352
/2/3/4, params is gonna be an array of 1,
2, 3, 4, right?

65
00:03:15.352 --> 00:03:17.190
In that order,
that's what params is gonna be.

66
00:03:17.190 --> 00:03:21.950
So, let's actually just log this out so
you can see what I'm talking about

67
00:03:21.950 --> 00:03:26.280
params and we can even just,
yeah, I'll just do that.

68
00:03:27.430 --> 00:03:33.010
Do that and then we'll log those
params and then we will route to it.

69
00:03:33.010 --> 00:03:37.873
So right now, this still renders right,
everything still works.

70
00:03:37.873 --> 00:03:40.912
Obviously this isn't gonna show
because I got rid of it, but

71
00:03:40.912 --> 00:03:43.306
if we open up the DOM and
we look at this all here.

72
00:03:43.306 --> 00:03:46.240
You can see, I have one thing inside
of it and that's the first ID.

73
00:03:46.240 --> 00:03:48.320
So let's do something
a little more human readable.

74
00:03:48.320 --> 00:03:50.100
So I'll put one here.

75
00:03:50.100 --> 00:03:53.790
Boom, and then I'll put slash and
I'll put two, boom,

76
00:03:53.790 --> 00:03:57.440
there's two that I'll put three, right?

77
00:03:57.440 --> 00:03:58.830
And it just goes on forever.

78
00:03:58.830 --> 00:04:00.890
We can capture all those parameters.

79
00:04:00.890 --> 00:04:04.600
In an array,
which is extremely useful, and

80
00:04:04.600 --> 00:04:08.360
it's not something we'd normally
done in most applications,

81
00:04:08.360 --> 00:04:11.850
in fact, you might be thinking like,
well, when the hell would I ever use this?

82
00:04:11.850 --> 00:04:16.070
Like, when would I ever
use a scenario where I

83
00:04:16.070 --> 00:04:19.730
want to use the same component for
many different pages, right?

84
00:04:19.730 --> 00:04:22.620
So you might not even be thinking about
a use case where it was actually never,

85
00:04:22.620 --> 00:04:26.490
at least in my opinion, I've never seen or
had the need to do something like that.

86
00:04:26.490 --> 00:04:29.020
And it wasn't until I saw this feature
that I realized that like, wow,

87
00:04:29.020 --> 00:04:31.880
it actually can be applied to a lot of
things that I've done in the past that

88
00:04:31.880 --> 00:04:33.070
would have made it a lot easier.

89
00:04:33.070 --> 00:04:35.400
And we'll talk about some of those things.

90
00:04:35.400 --> 00:04:37.060
It's really cool to do
the catch-all routes.

91
00:04:37.060 --> 00:04:38.050
They're really impressive,

92
00:04:39.310 --> 00:04:44.600
one extra feature on top of that is what
they call the optional catch all routes.

93
00:04:44.600 --> 00:04:47.570
And basically what that does
is when an optional catch or

94
00:04:47.570 --> 00:04:51.290
in a catch all is that the optional
catch was also like inclusive.

95
00:04:51.290 --> 00:04:57.310
So it will also include
the parent path inside of it.

96
00:04:57.310 --> 00:05:00.060
And the way you do that is
you just add another bracket

97
00:05:00.060 --> 00:05:01.260
around your brackets there.

98
00:05:01.260 --> 00:05:04.090
So not only will this match all
the frames that we did above, but

99
00:05:04.090 --> 00:05:05.350
it will also match ducks.

100
00:05:07.010 --> 00:05:10.530
Basically that's what you get and
the value

101
00:05:10.530 --> 00:05:14.420
of that parent paths will just be an empty
object because it doesn't have any params.

102
00:05:14.420 --> 00:05:15.320
There's nothing there.

103
00:05:15.320 --> 00:05:17.440
So just be an empty object in place.

104
00:05:17.440 --> 00:05:19.300
For that path there.

105
00:05:19.300 --> 00:05:21.500
So again, just extremely powerful.

106
00:05:22.660 --> 00:05:24.130
The other syntax looks kind of weird.

107
00:05:24.130 --> 00:05:26.100
If someone came and
looked at your file system, they're like,

108
00:05:26.100 --> 00:05:28.240
why are you naming your files that way?

109
00:05:28.240 --> 00:05:33.530
Yeah, they might think you were weird,
but this works very well.

110
00:05:33.530 --> 00:05:35.084
I haven't used the catch-all.

111
00:05:36.500 --> 00:05:39.260
I'm sorry, the optional catch
all in production yet, but

112
00:05:39.260 --> 00:05:43.200
I use the catch all one all the time,
consistently all the time.

113
00:05:43.200 --> 00:05:47.990
And specifically for some of the things
that I use it for is basically useful for

114
00:05:47.990 --> 00:05:51.320
whenever you have a bunch of pages

115
00:05:51.320 --> 00:05:56.580
that have pretty much the exact same
layout or very close to the same layout.

116
00:05:56.580 --> 00:05:58.360
But they need their own URL.

117
00:05:58.360 --> 00:05:59.760
So if you think about it in that case,

118
00:05:59.760 --> 00:06:02.060
what is something that pretty
much has the exact same layout?

119
00:06:03.260 --> 00:06:05.590
They have, but they have different URLs,
documentation.

120
00:06:05.590 --> 00:06:06.800
Documentation is a big one.

121
00:06:06.800 --> 00:06:09.730
Like if you go to any documentation
website, the layouts always the same.

122
00:06:09.730 --> 00:06:11.920
I don't care, I don't care what
thing you click on the left,

123
00:06:11.920 --> 00:06:13.030
but the layouts always the same.

124
00:06:13.030 --> 00:06:14.470
The styling is always the same.

125
00:06:14.470 --> 00:06:15.670
Is only the content is different.

126
00:06:15.670 --> 00:06:19.310
And they all have their own URL,
for SEO searchable reasons.

127
00:06:19.310 --> 00:06:20.910
So documentation is perfect for this.

128
00:06:20.910 --> 00:06:26.320
So instead of generating a page for every
single documentation page that you want,

129
00:06:26.320 --> 00:06:30.040
you can make one route that does
a catch all and says, yeah,

130
00:06:30.040 --> 00:06:32.410
I want to catch all these
documentation stuff.

131
00:06:32.410 --> 00:06:34.260
And yeah, that's basically and

132
00:06:34.260 --> 00:06:37.550
then you can do whatever you want with
those perhaps which is really impressive.

133
00:06:37.550 --> 00:06:42.880
So you get to save some time versus
a smart developer would know,

134
00:06:42.880 --> 00:06:45.870
generate all those pages, but then they
will go make like a template, or layout,

135
00:06:45.870 --> 00:06:48.540
they will reuse that layout on
every single page, and that way,

136
00:06:48.540 --> 00:06:50.450
they're not writing the same thing over,
and over again.

137
00:06:50.450 --> 00:06:53.070
This is taken to the next level,
you don't even need the layout,

138
00:06:53.070 --> 00:06:55.070
you don't even need a template,
you make a one page,

139
00:06:55.070 --> 00:06:57.990
and you don't have to generate the rest,
which can also save you time.

140
00:06:59.310 --> 00:07:02.400
When you generate these pages, when we get
the static generation and stuff like that,

141
00:07:02.400 --> 00:07:05.320
so really, really good ability,
really good feature here.

142
00:07:07.020 --> 00:07:07.820
Cool, so

143
00:07:07.820 --> 00:07:11.190
the last thing I want to talk about
is like, okay, we talked about pages.

144
00:07:11.190 --> 00:07:14.050
That's cool, but
what about like non pages?

145
00:07:14.050 --> 00:07:16.650
I mean,
this is a component based framework.

146
00:07:16.650 --> 00:07:19.270
So how do I create components
that aren't pages.

147
00:07:19.270 --> 00:07:23.500
Because what if I was gonna put a button
but if I put a button inside of pages,

148
00:07:23.500 --> 00:07:26.440
it's gonna make a route called button and
I don't want to do that.

149
00:07:26.440 --> 00:07:27.890
Okay, yeah, good point.

150
00:07:27.890 --> 00:07:34.030
So, what there's no convention inside
of next js, that tells you how to

151
00:07:34.030 --> 00:07:38.840
create your pawns aware, but the community
mostly just creates a source folder.

152
00:07:38.840 --> 00:07:39.970
Not in there though.

153
00:07:39.970 --> 00:07:41.250
Creates a source folder on the root.

154
00:07:43.620 --> 00:07:45.950
And normally we just create
a folder called components,

155
00:07:45.950 --> 00:07:48.540
just like you would do
in any old react app.

156
00:07:48.540 --> 00:07:50.250
And that's where we put our components.

157
00:07:50.250 --> 00:07:51.890
You just put your components in there,
right?

158
00:07:51.890 --> 00:07:55.160
The other thing to note is that if for

159
00:07:55.160 --> 00:07:59.920
some reason, this bothers you
about having the pages directory.

160
00:07:59.920 --> 00:08:01.830
On the root, which I can see why it would,

161
00:08:01.830 --> 00:08:03.640
especially now that we
have a source folder.

162
00:08:03.640 --> 00:08:06.530
Okay, I want everything in
source if that's the source.

163
00:08:06.530 --> 00:08:08.580
I don't want pages on the root,
if we have a source.

164
00:08:08.580 --> 00:08:09.710
That's kinda gross.

165
00:08:09.710 --> 00:08:14.050
You can move the pages into the source,
and that will work as well.

166
00:08:14.050 --> 00:08:17.520
But if you have both,
next js will the pages on the root.

167
00:08:17.520 --> 00:08:18.940
That will take precedence.

168
00:08:18.940 --> 00:08:22.440
So if it's really bothering you,
you can move the pages into the source and

169
00:08:22.440 --> 00:08:24.630
it works just fine, just don't put both.

170
00:08:24.630 --> 00:08:27.474
So just remember that.

171
00:08:27.474 --> 00:08:32.250
And again, if you didn't feel like
following along, if I was moving too fast,

172
00:08:32.250 --> 00:08:35.420
you can check out on
the repo to this branch.

173
00:08:35.420 --> 00:08:40.110
We just copy and paste that and you should
check out to exactly where we just ended.

174
00:08:40.110 --> 00:08:44.820
Now the code that you'll check out to
exactly be all this code that's in here.

175
00:08:44.820 --> 00:08:46.330
So all this code is copy and paste tables,

176
00:08:46.330 --> 00:08:49.020
everything you see here comes
directly from the repo.

177
00:08:49.020 --> 00:08:51.500
So it'll be the same
thing that you see here.

178
00:08:51.500 --> 00:08:54.660
And it'll probably be slightly different
than what I just live coded right here.

179
00:08:54.660 --> 00:08:56.120
So, this is the source of truth.

