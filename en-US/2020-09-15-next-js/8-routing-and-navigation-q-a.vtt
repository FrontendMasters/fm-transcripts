WEBVTT

1
00:00:00.840 --> 00:00:07.720
The reason why you need that as in
this case, or can you leave that out?

2
00:00:07.720 --> 00:00:13.336
&gt;&gt; The reason you need the as
in this case is because,

3
00:00:13.336 --> 00:00:20.975
without this, how would Next.js
know what the value of this id is?

4
00:00:20.975 --> 00:00:24.195
Without you telling Next.js that, hey,

5
00:00:24.195 --> 00:00:28.758
the actual value of this id
parameter is actually node.id,

6
00:00:28.758 --> 00:00:33.110
it would not know, so
you do have to put the as there.

7
00:00:33.110 --> 00:00:35.970
And, as is only gonna be for
dynamic routes.

8
00:00:35.970 --> 00:00:37.780
If you don't have a dynamic route,

9
00:00:37.780 --> 00:00:42.750
like you're just navigating to a route
that's hard coded, like /settings,

10
00:00:42.750 --> 00:00:46.450
you don't need as, because you know
the path of it, you can just say go here.

11
00:00:46.450 --> 00:00:52.040
But, if your name of your
route has a parameter in it,

12
00:00:52.040 --> 00:00:57.400
then you need to let Next.js know how
to resolve that parameter and do this.

13
00:00:57.400 --> 00:01:01.603
So, but this just tells Next.js, okay,
what component, what page are we loading,

14
00:01:01.603 --> 00:01:04.907
cuz it's doing some prefetching stuff,
that's the other thing.

15
00:01:04.907 --> 00:01:08.922
Next.js is doing a lot of prefetching
stuff in the background that you get for

16
00:01:08.922 --> 00:01:10.419
free with a link component.

17
00:01:10.419 --> 00:01:13.731
And then the as one is mostly for the
browser like, okay, here's where I work,

18
00:01:13.731 --> 00:01:16.993
here's where I want you to go, and
here's where I kinda want you to prefetch,

19
00:01:16.993 --> 00:01:17.850
that type of thing.

20
00:01:17.850 --> 00:01:22.249
So, yes, you do need to ask for
parameters in the URL.

21
00:01:22.249 --> 00:01:26.330
&gt;&gt; Do all routes have to be declared
from the root of the Pages folder?

22
00:01:30.110 --> 00:01:32.136
&gt;&gt; So, all-
&gt;&gt; Like when you were doing a link there?

23
00:01:32.136 --> 00:01:35.289
&gt;&gt; So when you're doing link, I see what
you're saying, like this relativity here?

24
00:01:36.400 --> 00:01:40.880
&gt;&gt; Yeah, does it always have to be
relative to the root of the Pages folder?

25
00:01:40.880 --> 00:01:45.070
Or, if I don't do the /folder,
derive it from my current folder?

26
00:01:45.070 --> 00:01:49.791
&gt;&gt; I don't think it's relative, I think
it's relative to the Pages folder, yes.

27
00:01:49.791 --> 00:01:50.301
&gt;&gt; Okay.

28
00:01:50.301 --> 00:01:53.398
&gt;&gt; Yeah.
&gt;&gt; Are there any SEO considerations when

29
00:01:53.398 --> 00:01:54.433
using link?

30
00:01:54.433 --> 00:01:56.330
&gt;&gt; Are there any SEO considerations?

31
00:01:56.330 --> 00:02:01.380
No, I mean, no more considerations
than you would have if you were using

32
00:02:01.380 --> 00:02:04.185
any other client-side router.

33
00:02:04.185 --> 00:02:10.708
Cuz, like I said before, it only
proxies the HTML5 pushState experience,

34
00:02:10.708 --> 00:02:16.760
which depending on where you're trying to
get this site indexed, if you're getting

35
00:02:16.760 --> 00:02:21.410
indexed by Google, Google does index
JavaScript now, it does crawl JavaScript.

36
00:02:21.410 --> 00:02:24.890
So, you shouldn't have a problem
there if you didn't have them before.

37
00:02:24.890 --> 00:02:29.160
But, things like Twitter and Facebook,
I don't think they crawl JavaScript yet,

38
00:02:29.160 --> 00:02:31.330
so yeah, you might have issues there.

39
00:02:31.330 --> 00:02:34.560
And again, this is for
client-side routing.

40
00:02:34.560 --> 00:02:38.701
But, also remember that,
by default Next.js is

41
00:02:38.701 --> 00:02:43.400
going to pre-render every
single page by default.

42
00:02:43.400 --> 00:02:45.750
So, when it comes to being index and

43
00:02:45.750 --> 00:02:50.620
crawl, all of this is from the crawlers
experience, this is gonna be HTML anyway.

44
00:02:50.620 --> 00:02:53.270
This is for after rehydration happens.

45
00:02:53.270 --> 00:02:56.638
So, your page gets turned into
a stream on the server and

46
00:02:56.638 --> 00:02:59.340
gets sent back to the browser's HTML.

47
00:02:59.340 --> 00:03:03.760
It gets sent to a crawler's HTML, and
then it rehydrates on the front end,

48
00:03:03.760 --> 00:03:08.720
which is basically, you can think of
it as like, this JavaScript comes down,

49
00:03:08.720 --> 00:03:12.166
it looks at the DOM to figure
out where it needs to mount.

50
00:03:12.166 --> 00:03:17.500
It matches, its DOM with what the server
sent down to see if they're the same,

51
00:03:17.500 --> 00:03:20.392
and then it does some stuff with
JavaScript to inject some props.

52
00:03:20.392 --> 00:03:22.660
That's rehydration, all that's happening.

53
00:03:22.660 --> 00:03:25.323
But that's for your users,
that's for the browser.

54
00:03:25.323 --> 00:03:30.380
As far as the crawler, they're gonna see
the HTML, unless you opt out of that.

55
00:03:30.380 --> 00:03:35.700
&gt;&gt; It seems that they're saying that if
you take that as a block, and just put it

56
00:03:35.700 --> 00:03:42.430
into a trap and remove as it still works,
is there any problem of doing it that way?

57
00:03:42.430 --> 00:03:45.240
&gt;&gt; No, I don't think there's any
problem with doing it that way.

58
00:03:46.430 --> 00:03:50.436
I'm not aware of any side
effects there might be.

59
00:03:50.436 --> 00:03:52.760
The only guy I could think of,
and I can't confirm this,

60
00:03:52.760 --> 00:03:54.413
because I just haven't looked into it.

61
00:03:54.413 --> 00:03:59.002
Is that you might be opting out of
prefetching if you do that with the link

62
00:03:59.002 --> 00:03:59.852
component.

63
00:03:59.852 --> 00:04:03.324
I can look into that later if someone
else wants to look into it, but

64
00:04:03.324 --> 00:04:07.416
that might be the case, cuz I think they
need to notice in order to do some type of

65
00:04:07.416 --> 00:04:10.725
optimized prefetching, but
again, I could be wrong.

66
00:04:10.725 --> 00:04:14.499
But this is the recommended approach,
so I'm guessing they recommend it for

67
00:04:14.499 --> 00:04:15.027
a reason.

68
00:04:15.027 --> 00:04:17.605
And I'm pretty sure it's for prefetching.

69
00:04:18.665 --> 00:04:21.175
&gt;&gt; The routing happens
on the client-side but,

70
00:04:21.175 --> 00:04:24.465
all of the routes have already
been pre-rendered, right?

71
00:04:24.465 --> 00:04:26.992
Because of the server-side render.

72
00:04:26.992 --> 00:04:31.294
&gt;&gt; Yeah, the navigating using the link
component happens on the client-side,

73
00:04:31.294 --> 00:04:34.043
but the actual routes were
defined at build time.

