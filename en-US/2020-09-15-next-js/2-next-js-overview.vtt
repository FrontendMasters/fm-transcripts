WEBVTT

1
00:00:00.000 --> 00:00:01.420
What is Next.js?

2
00:00:01.420 --> 00:00:02.981
Well, I think in order
to understand Next.js,

3
00:00:02.981 --> 00:00:05.880
you really gotta to understand
some of its bigger dependencies.

4
00:00:05.880 --> 00:00:10.033
And the biggest one I would have to
say is obviously gonna be React.

5
00:00:10.033 --> 00:00:14.627
So all of you might know React, but if you
don't, I like to think of React as not

6
00:00:14.627 --> 00:00:17.930
a framework,
it's actually more of a view library.

7
00:00:17.930 --> 00:00:21.730
If you think of React by itself,
if you just npm install react,

8
00:00:21.730 --> 00:00:27.318
you can't really build a full,
feature rich application with just React.

9
00:00:27.318 --> 00:00:31.230
You're gonna have to install
a few more things, a router,

10
00:00:31.230 --> 00:00:33.830
you gotta figure out how to do styling.

11
00:00:33.830 --> 00:00:37.669
And we all know there's 1,000
ways to do CSS in React.

12
00:00:37.669 --> 00:00:40.786
You're gonna have to build a build system,
unless you get a CLI or

13
00:00:40.786 --> 00:00:42.953
something like that, or some boilerplate.

14
00:00:42.953 --> 00:00:46.319
There's just a lot that you have to do,
whether it's easy for

15
00:00:46.319 --> 00:00:48.647
you to do with the CLI,
or you do manually,

16
00:00:48.647 --> 00:00:51.930
you still have to decide on
what approach you're gonna do.

17
00:00:51.930 --> 00:00:55.160
So you still have to make a lot of
decisions regardless of how easy

18
00:00:55.160 --> 00:00:57.300
those decisions are to implement.

19
00:00:57.300 --> 00:00:58.652
And that's kinda how React is.

20
00:00:58.652 --> 00:01:06.422
So Next.js is what I call a framework
framework, or a app ready framework.

21
00:01:06.422 --> 00:01:08.800
Next.js is a full stack framework.

22
00:01:08.800 --> 00:01:13.490
As in, it not only lets you build
front end applications, but

23
00:01:13.490 --> 00:01:17.290
it also helps you build out APIs,
which is really interesting.

24
00:01:17.290 --> 00:01:19.988
And it uses React as its view library.

25
00:01:19.988 --> 00:01:24.540
So when you start actually putting stuff
on the page, you'll be using React.

26
00:01:24.540 --> 00:01:27.010
And that's how Next basically uses React.

27
00:01:27.010 --> 00:01:28.190
So it's built on top of that.

28
00:01:28.190 --> 00:01:32.180
You'll see other frameworks use other
libraries like Vue, there's some that use

29
00:01:32.180 --> 00:01:35.887
Angular and even Gatsby's another
framework that's built on top of React.

30
00:01:35.887 --> 00:01:38.923
They all decided to do that because
React is a really good framework.

31
00:01:38.923 --> 00:01:40.810
So it seems like a really good idea.

32
00:01:41.810 --> 00:01:44.510
But yeah, they're very similar.

33
00:01:44.510 --> 00:01:48.296
So that means all the stuff you know about
React and all the knowledge that you've

34
00:01:48.296 --> 00:01:50.925
gained there,
it's gonna transfer over to Next.js.

35
00:01:50.925 --> 00:01:55.220
So it's not like something completely
new and you got to reset how you think.

36
00:01:55.220 --> 00:01:58.570
Nope, it's gonna be everything
gonna be carried over.

37
00:01:58.570 --> 00:02:01.490
You're just gonna learn some new
conventions and new opinions and

38
00:02:01.490 --> 00:02:02.950
stuff like that.

39
00:02:02.950 --> 00:02:06.528
So talking about those opinions, and
that's basically what Next.js is.

40
00:02:06.528 --> 00:02:09.167
It's a whole bunch of opinions and

41
00:02:09.167 --> 00:02:12.997
conventions built on top
of the React framework.

42
00:02:12.997 --> 00:02:19.720
And this team has a history of
building tons of quality applications.

43
00:02:19.720 --> 00:02:24.310
The team at Vercel are the creators of
Next.js, it used to be called Zeit.

44
00:02:24.310 --> 00:02:25.846
They're Vercel now.

45
00:02:25.846 --> 00:02:30.276
And they created this framework, and they
basically just taken all their opinions,

46
00:02:30.276 --> 00:02:33.105
all the stuff the community's
been doing for years and

47
00:02:33.105 --> 00:02:37.378
just decided that here's the way that we
feel that everyone is gonna do it anyway.

48
00:02:37.378 --> 00:02:40.630
So we're gonna bake it into this thing,
call it a framework, and

49
00:02:40.630 --> 00:02:41.530
just give it to you.

50
00:02:41.530 --> 00:02:45.640
And it actually just makes sense,
because who wants to go set up server-side

51
00:02:45.640 --> 00:02:49.690
rendering and CSS modules every
single time they make a React app?

52
00:02:49.690 --> 00:02:51.912
You probably don't, which is why you
reach for some type of boilerplate or

53
00:02:51.912 --> 00:02:53.723
something like that,
because you just don't want to do it.

54
00:02:53.723 --> 00:02:55.316
Well, this is the next level of that.

55
00:02:55.316 --> 00:02:59.298
You can think of this as boilerplate,
automated or computed, so you can actually

56
00:02:59.298 --> 00:03:03.280
work with it and not boilerplate as in
like, it's just React, but it's just

57
00:03:03.280 --> 00:03:07.930
a starter reference, but it's really
nothing else other than just a starter.

58
00:03:07.930 --> 00:03:10.718
So pretty dope framework.

59
00:03:10.718 --> 00:03:13.440
So, here are some of the highlights
that you get for free with Next.js.

60
00:03:13.440 --> 00:03:17.281
You get a developer build system,
which I don't know,

61
00:03:17.281 --> 00:03:21.627
these days if people make build
systems from scratch anymore.

62
00:03:21.627 --> 00:03:23.702
But, when I was learning to write code,

63
00:03:23.702 --> 00:03:26.337
I had to make a Webpack
configs from scratch [LAUGH].

64
00:03:26.337 --> 00:03:28.477
It was crazy saying it,
because I don't think anyone does that.

65
00:03:28.477 --> 00:03:32.206
They just don't make dev builds anymore,
it's just free now.

66
00:03:32.206 --> 00:03:36.626
But yeah, they give you one that's very
good and you almost never have to touch.

67
00:03:36.626 --> 00:03:38.910
You also get a production one,
which is the same.

68
00:03:38.910 --> 00:03:40.060
You get pre rendering.

69
00:03:40.060 --> 00:03:44.540
So things like server side rendering,
build time.

70
00:03:44.540 --> 00:03:46.098
And then also like static.

71
00:03:46.098 --> 00:03:49.570
And we'll talk a lot about those things
if you don't know what I'm talking about

72
00:03:49.570 --> 00:03:51.530
there, we're definitely gonna get there.

73
00:03:51.530 --> 00:03:54.370
You get routing for free, so
you don't have to figure out what router

74
00:03:54.370 --> 00:03:57.320
to install and how to use it and
how to set it up.

75
00:03:57.320 --> 00:04:02.145
Because we all know the router ecosystem
in React is all over the place right now.

76
00:04:02.145 --> 00:04:05.010
So you know what I'm talking about?

77
00:04:05.010 --> 00:04:05.975
And then API routes.

78
00:04:05.975 --> 00:04:08.942
Yeah, like I said,
this is a full stack framework, so

79
00:04:08.942 --> 00:04:11.663
you can actually develop
APIs in this framework.

80
00:04:11.663 --> 00:04:15.676
Which is very reminiscent of back in
the day when Node first came out and

81
00:04:15.676 --> 00:04:19.076
everyone made single page apps
with their Express app, and

82
00:04:19.076 --> 00:04:23.430
they did express.static, and
they would just serve the index.html, and

83
00:04:23.430 --> 00:04:26.890
they would have their Angular app,
the MEAN stack.

84
00:04:26.890 --> 00:04:31.980
And then we realized that that was
a bad idea because we need CDNs.

85
00:04:31.980 --> 00:04:35.640
So it's like that, but
they don't live together and

86
00:04:35.640 --> 00:04:37.950
you still have CDN and
all this flexibility.

87
00:04:37.950 --> 00:04:42.930
So you get that same experience of having
it colocated, but you get the really good

88
00:04:42.930 --> 00:04:45.900
experience of having everything
performant, which we didn't have before.

89
00:04:45.900 --> 00:04:49.140
Unless you threw like Nginx in front
of it and all this crazy stuff.

90
00:04:49.140 --> 00:04:51.360
But now, nope,
we get all this stuff for free now.

91
00:04:51.360 --> 00:04:54.318
So really dope.

92
00:04:54.318 --> 00:04:57.374
Always hear, well,
what about create-react-app?

93
00:04:57.374 --> 00:05:01.182
Doesn't create-react-app
do a lot of this stuff?

94
00:05:01.182 --> 00:05:04.426
Absolutely, create-react-app
does do a lot of this stuff and

95
00:05:04.426 --> 00:05:06.599
it also has a lot of
opinions baked into it.

96
00:05:06.599 --> 00:05:10.190
But create-react-app is
basically boilerplate, right?

97
00:05:10.190 --> 00:05:13.570
It doesn't add any new
functionality to React.

98
00:05:13.570 --> 00:05:18.328
It basically just takes a build system,
basically, the build system,

99
00:05:18.328 --> 00:05:21.690
it takes a build system and
it says, here, you go.

100
00:05:21.690 --> 00:05:24.670
We gave you a really nice build system,
which is actually really good.

101
00:05:24.670 --> 00:05:25.970
And we'll manage it for you.

102
00:05:25.970 --> 00:05:27.600
And then you can go ahead and
build your app.

103
00:05:27.600 --> 00:05:28.510
And that's what you get for free.

104
00:05:28.510 --> 00:05:30.740
And then when you start making your app,
it's just React.

105
00:05:30.740 --> 00:05:34.860
There are no conventions or anything
that's baked into create-react-app

106
00:05:34.860 --> 00:05:37.830
when it comes to actually
writing your application.

107
00:05:37.830 --> 00:05:39.890
So cuz it's just regular
React at that point,

108
00:05:39.890 --> 00:05:42.580
you still have to figure out things
like a router and stuff like that.

109
00:05:42.580 --> 00:05:44.630
There's still some
decisions you have to make.

110
00:05:44.630 --> 00:05:47.797
So I would say it's probably
the best boilerplate you can do.

111
00:05:47.797 --> 00:05:49.555
And even now sometimes, in some cases,

112
00:05:49.555 --> 00:05:52.254
I would recommend using
create-react-app over Next.js.

113
00:05:52.254 --> 00:05:55.076
And you'll see in a minute
where I think that's true.

114
00:05:55.076 --> 00:05:59.441
But no, it's not like Next.js,
you don't get server side rendering and

115
00:05:59.441 --> 00:06:01.391
API routes and things like that.

116
00:06:01.391 --> 00:06:05.402
So it's not a complete framework,
it's just really good conventions and

117
00:06:05.402 --> 00:06:08.904
opinions baked into a build system
that you can actually eject and

118
00:06:08.904 --> 00:06:10.980
customize if you want to as well.

119
00:06:10.980 --> 00:06:14.360
And then you're not even inside
create-react-app anymore at that point,

120
00:06:14.360 --> 00:06:16.370
you're just a React app.

121
00:06:16.370 --> 00:06:18.010
And then what about Gatsby?

122
00:06:18.010 --> 00:06:22.127
So I would say Gatsby is definitely more
similar to Nest.js than create-react-app.

123
00:06:22.127 --> 00:06:26.730
They're very, Gatsby and
Next.js app are actually very similar.

124
00:06:26.730 --> 00:06:30.773
I would say Gatsby has conventions
built into it as well and

125
00:06:30.773 --> 00:06:36.648
even stronger conventions, specifically
around how it wants to do data fetching.

126
00:06:36.648 --> 00:06:41.606
It has this thing called a content mesh,
where you can pull in data from tons

127
00:06:41.606 --> 00:06:46.563
of sources and aggregate them to a single
GraphQL schema, and then that way

128
00:06:46.563 --> 00:06:51.385
it's just unified and type checked and
ready to go in your application.

129
00:06:51.385 --> 00:06:53.170
And that experience is really nice.

130
00:06:53.170 --> 00:06:56.860
But there's a lot of overhead there,
you have to know GraphQL in

131
00:06:56.860 --> 00:06:59.520
order to use Gatsby or
at least to get the best from it.

132
00:06:59.520 --> 00:07:02.672
You don't have to use GraphQL,
you can definitely not use it.

133
00:07:02.672 --> 00:07:05.875
But then I think you kind of defeat
the point of it using Gatsby in

134
00:07:05.875 --> 00:07:07.090
the first place.

135
00:07:07.090 --> 00:07:08.530
So there's a lot of stuff there.

136
00:07:08.530 --> 00:07:13.340
Also, Gatsby doesn't have the ability to
create API routes and stuff like that.

137
00:07:13.340 --> 00:07:17.076
It's not a full stack framework, but
it does offer a lot of the same stuff as

138
00:07:17.076 --> 00:07:22.470
Next.js, like client-side routing,
static generation, things like that.

139
00:07:22.470 --> 00:07:24.020
And the tooling is really good too.

140
00:07:24.020 --> 00:07:25.990
So they're both very similar.

141
00:07:25.990 --> 00:07:28.830
And I would also say that Gatsby
has better support when it

142
00:07:28.830 --> 00:07:31.849
comes to doing things statically,
like sourcing content,

143
00:07:31.849 --> 00:07:34.690
like building documentation,
stuff like that.

144
00:07:34.690 --> 00:07:40.300
But that also depends on how comfortable
you are with GraphQL and things like that.

145
00:07:40.300 --> 00:07:43.840
But that's not to say that Next.js doesn't
support that stuff, because it does.

146
00:07:43.840 --> 00:07:46.300
And their support is getting better.

147
00:07:46.300 --> 00:07:48.670
So it really just depends,
and we'll talk about that.

148
00:07:51.080 --> 00:07:52.860
So yeah, when to use Next.js?

149
00:07:52.860 --> 00:07:57.170
So my general guide to when to use
Next.js when making a React app.

150
00:07:57.170 --> 00:08:02.112
I'd like to just go through this little
list of different things like that.

151
00:08:02.112 --> 00:08:06.820
One tip here though, is just never
start a React app from scratch.

152
00:08:06.820 --> 00:08:09.430
There's just so much out there these days,

153
00:08:09.430 --> 00:08:14.450
I just don't understand why anyone would
ever just make a React app from scratch.

154
00:08:14.450 --> 00:08:18.111
If you think your case is that specific
and it's that unique that there's nothing

155
00:08:18.111 --> 00:08:21.081
out there that's gonna help you and
you have to do it from scratch,

156
00:08:21.081 --> 00:08:23.812
you're lying to yourself,
because that's just not true.

157
00:08:23.812 --> 00:08:25.441
Eventually you're just gonna converge,

158
00:08:25.441 --> 00:08:28.651
you're eventually just gonna go look at
the source code for create-react-app and

159
00:08:28.651 --> 00:08:31.020
look at their Webpack config and
you're gonna copy it.

160
00:08:31.020 --> 00:08:32.292
That's what you're gonna do,

161
00:08:32.292 --> 00:08:34.750
because [LAUGH] that's eventually
where you're leading to.

162
00:08:34.750 --> 00:08:37.582
So learn from the people before you and
use these conventions,

163
00:08:37.582 --> 00:08:39.690
just don't create from scratch.

164
00:08:39.690 --> 00:08:44.620
Okay, so do you only need a single
page app, then use create-react-app.

165
00:08:44.620 --> 00:08:47.060
Single page app, as in,
I'm only doing client side routing.

166
00:08:47.060 --> 00:08:49.000
I don't care about server side rendering.

167
00:08:49.000 --> 00:08:50.160
I don't care about API routes.

168
00:08:50.160 --> 00:08:53.384
This is a single page app,
it's hidden behind a paywall, that's it,

169
00:08:53.384 --> 00:08:56.571
I would say yeah, you probably
should just use create-react-app.

170
00:08:56.571 --> 00:09:00.976
Although Next.js and
Gatsby will work for that as well.

171
00:09:00.976 --> 00:09:02.017
They're not built for that.

172
00:09:02.017 --> 00:09:05.549
And you have to turn off and opt out of a
lot of things to be able to, for it to be

173
00:09:05.549 --> 00:09:08.716
a single page app, create-react-app
is just a single page app.

174
00:09:08.716 --> 00:09:10.738
So just use that.

175
00:09:10.738 --> 00:09:14.527
Do you need a static site like a blog
that's also a single page application?

176
00:09:14.527 --> 00:09:16.175
Use Next.js or Gatsby.

177
00:09:16.175 --> 00:09:20.686
And this is gonna come down to preference,
how comfortable are you with GraphQL?

178
00:09:20.686 --> 00:09:24.024
Is there a specific plugin that one of
these things has that you really have to

179
00:09:24.024 --> 00:09:24.922
take advantage of?

180
00:09:24.922 --> 00:09:26.813
You know,
are you sourcing from a CMS or not?

181
00:09:26.813 --> 00:09:29.810
Does that CMS have support for
this framework?

182
00:09:29.810 --> 00:09:30.791
Different things like that.

183
00:09:30.791 --> 00:09:35.028
I think that's what it's gonna come down
to both of these work pretty well there.

184
00:09:35.028 --> 00:09:38.106
Do you need server side rendering and
API and all the, above then yeah,

185
00:09:38.106 --> 00:09:39.404
you're gonna use Next.js.

186
00:09:39.404 --> 00:09:41.720
Because it's the only one that does that.

187
00:09:41.720 --> 00:09:45.260
So, yeah, those are my opinions
on when to use this framework.

188
00:09:45.260 --> 00:09:51.542
And pretty much these days, I use Next.js
for all my React stuff, except for

189
00:09:51.542 --> 00:09:58.037
when it comes to really heavy static
sites, for now, I've been using Gatsby.

190
00:09:58.037 --> 00:10:01.473
But even Next.js is figuring
out ways to improve, and

191
00:10:01.473 --> 00:10:03.720
they have a lot of stuff coming out.

192
00:10:03.720 --> 00:10:05.631
But I almost never use create-react-app,

193
00:10:05.631 --> 00:10:08.580
because I just don't build
single page apps anymore.

194
00:10:08.580 --> 00:10:12.260
And, or I guess if I'm building a library,
I'll just use a library starter.

195
00:10:12.260 --> 00:10:14.333
But that's not an app, so yeah.

196
00:10:14.333 --> 00:10:17.049
&gt;&gt; Databases with Next.js?

197
00:10:17.049 --> 00:10:19.677
&gt;&gt; All right, somebody asking
that question knows Next.js.

198
00:10:19.677 --> 00:10:22.679
So yeah,
we're gonna [LAUGH] get to that, and

199
00:10:22.679 --> 00:10:28.460
yes you can use databases with Next.js,
because Next.js is a full stack framework.

200
00:10:28.460 --> 00:10:33.390
So, anything you can do server side,
you can pretty much do with Next.js.

201
00:10:33.390 --> 00:10:36.500
&gt;&gt; There's questions about
the microservice versus monolith.

202
00:10:37.880 --> 00:10:40.410
Did you mention anything with that?

203
00:10:40.410 --> 00:10:43.600
&gt;&gt; I didn't mention anything about
microservices and monoliths, and

204
00:10:43.600 --> 00:10:47.850
I'm not sure if the question is geared
towards like back end microservices and

205
00:10:47.850 --> 00:10:50.108
monoliths, or are we talking?

206
00:10:50.108 --> 00:10:53.760
I know what they're talking about,
they're talking about, hey, normally,

207
00:10:53.760 --> 00:10:57.590
the convention has been, we'll have our
repo over here for our single page app.

208
00:10:57.590 --> 00:11:00.130
We'll have our repo over here for our API.

209
00:11:00.130 --> 00:11:00.968
And that's kind of how we do it.

210
00:11:00.968 --> 00:11:04.215
But now it seems like Next.js
is this huge monolith.

211
00:11:04.215 --> 00:11:06.378
In fact, kind of what we avoided.

212
00:11:06.378 --> 00:11:07.858
And that's kind of what I was hinting at.

213
00:11:07.858 --> 00:11:12.310
Actually it's not, right,
the code lives together, absolutely.

214
00:11:12.310 --> 00:11:16.680
But depending on where you deploy this and
how you deploy it,

215
00:11:16.680 --> 00:11:23.380
they are completely separated and
handled very nicely through React.

216
00:11:23.380 --> 00:11:26.960
And that has a lot to do with the
server-side rendering and how that works.

217
00:11:26.960 --> 00:11:30.590
And it also has to do with just
how they built the framework and

218
00:11:30.590 --> 00:11:32.830
how it handles the APIs and
stuff like that.

219
00:11:32.830 --> 00:11:38.585
So, basically, if you had
a traditional monolith with Express,

220
00:11:38.585 --> 00:11:40.920
that's not a bad thing.

221
00:11:40.920 --> 00:11:44.940
The only problem with that is when you
don't put a CDN in front of it and

222
00:11:44.940 --> 00:11:49.560
cache those static assets and be smart
about it, Next.js does that for you.

223
00:11:49.560 --> 00:11:53.580
So things are always cached, things are
always fast, things are always available.

224
00:11:53.580 --> 00:11:55.220
Things are always pre rendered.

225
00:11:55.220 --> 00:11:59.360
So you get the benefit of having that
really nice static experience that

226
00:11:59.360 --> 00:12:00.950
you've been doing for years.

227
00:12:00.950 --> 00:12:03.498
But you also get that really good
development experience of just having

228
00:12:03.498 --> 00:12:04.394
everything colocated.

229
00:12:04.394 --> 00:12:07.597
So you don't really give up anything
by using something like Next.js.

230
00:12:07.597 --> 00:12:11.071
So it's a little different than what you
would traditionally think of a monolith.

231
00:12:11.071 --> 00:12:14.042
&gt;&gt; Authentication,
are you gonna get into that?

232
00:12:14.042 --> 00:12:19.191
&gt;&gt; I am not gonna get into authentication,
because it's not specific to Next.js.

233
00:12:19.191 --> 00:12:23.282
The way you would handle authentication in
Next.js is the same way you would handle

234
00:12:23.282 --> 00:12:25.686
it pretty much in any React or
Node application.

235
00:12:25.686 --> 00:12:29.368
I could talk about where you might do it,
but it doesn't change anything for

236
00:12:29.368 --> 00:12:32.480
this framework, it's not specific to it.

237
00:12:32.480 --> 00:12:35.038
&gt;&gt; You're supposed to
pitch your other course.

238
00:12:35.038 --> 00:12:38.614
&gt;&gt; Yeah, so there's another [LAUGH]
there's an advanced Next.js

239
00:12:38.614 --> 00:12:42.930
course where I'll dive a little
deeper into some of those tactics.

240
00:12:42.930 --> 00:12:46.750
&gt;&gt; Or your API design in Node kind
of covers authentication as well.

241
00:12:46.750 --> 00:12:49.670
&gt;&gt; Yeah, API design in Node
does cover authentication.

242
00:12:49.670 --> 00:12:52.170
Yeah, I think I linked to that course
somewhere in here, but not for

243
00:12:52.170 --> 00:12:52.710
authentication.

244
00:12:52.710 --> 00:12:56.528
But yeah, you can look at that
course to figure out how you can do

245
00:12:56.528 --> 00:13:01.088
authentication in Node, and
that carries over pretty well for Next.js.

