WEBVTT

1
00:00:00.180 --> 00:00:03.490
All right, now let's get into actually
making some of these things do some stuff.

2
00:00:03.490 --> 00:00:05.630
So, yeah, here's a big tip.

3
00:00:07.485 --> 00:00:10.620
Next.js API routes are not the same

4
00:00:10.620 --> 00:00:16.110
as Vercel's Serverless API functions,
although the setup is very similar.

5
00:00:16.110 --> 00:00:18.988
So they use Vercel,
who are the creators of Next.js, and

6
00:00:18.988 --> 00:00:22.420
you want to use their Serverless
functions, which are really good.

7
00:00:24.100 --> 00:00:26.920
The way that you make those
Serverless functions look

8
00:00:26.920 --> 00:00:28.670
almost similar to what you're doing here.

9
00:00:28.670 --> 00:00:31.873
The biggest difference is,
for the Serverless functions,

10
00:00:31.873 --> 00:00:34.650
by default the API folder is
on the roots of your app.

11
00:00:36.120 --> 00:00:39.870
And you have to add a configuration file
that tells Serverless functions how to map

12
00:00:39.870 --> 00:00:44.270
your functions to different events
in the Serverless environment.

13
00:00:44.270 --> 00:00:47.980
So don't confuse these API routes
with the API Serverless functions,

14
00:00:47.980 --> 00:00:49.490
because these API routes
are not Serverless.

15
00:00:49.490 --> 00:00:52.650
These are not Serverless functions, these
are absolutely not Serverless functions.

16
00:00:52.650 --> 00:00:55.584
If you want Serverless functions,
you can do that with Vercel, but

17
00:00:55.584 --> 00:00:57.137
it has nothing to do with Next.js.

18
00:00:57.137 --> 00:01:00.944
You can add them to your Next.js app, but
they're completely independent of Next.js,

19
00:01:00.944 --> 00:01:02.250
they just look the same.

20
00:01:02.250 --> 00:01:05.916
And I remember when I was first using
this a long time ago, I got confused, so

21
00:01:05.916 --> 00:01:07.534
that's why I put that tip there.

22
00:01:07.534 --> 00:01:10.950
I was like, wait, are these Serverless or,
how does this work?

23
00:01:10.950 --> 00:01:13.657
They're not, they're not the same,
so don't confuse the two.

24
00:01:13.657 --> 00:01:17.270
This has nothing to do with Serverless,
or Vercel.

25
00:01:17.270 --> 00:01:21.148
Whereas Serverless routes down here
that you might make are completely

26
00:01:21.148 --> 00:01:25.780
dealing with Vercel and Serverless
functions, and nothing to do with Next.js.

27
00:01:25.780 --> 00:01:29.044
I think they just thought that it was
a good convention to make an API folder,

28
00:01:29.044 --> 00:01:30.574
since it works so well in Next.js,

29
00:01:30.574 --> 00:01:32.926
hey, why not use it for
Serverless functions as well?

30
00:01:32.926 --> 00:01:35.920
And I don't blame them, it's a really
good convention, so, really cool.

31
00:01:37.750 --> 00:01:40.400
All right, so, let's talk about handlers.

32
00:01:40.400 --> 00:01:45.095
So if you've never built an express app
with Node, no worries, you can take this

33
00:01:45.095 --> 00:01:49.445
course here for Express and APIs with
Node right here in Frontend Masters,

34
00:01:49.445 --> 00:01:53.749
that basically walks you through how
to create APIs with Express in Node.

35
00:01:53.749 --> 00:01:56.626
If you haven't, not a big deal,
it's actually really intuitive,

36
00:01:56.626 --> 00:01:58.470
at least for what we're gonna cover today.

37
00:01:58.470 --> 00:02:02.834
But, at the end of the day, that's
kind of what Next.js does, it creates.

38
00:02:02.834 --> 00:02:06.774
It basically gives you the Connect,
which is this framework that Express made

39
00:02:06.774 --> 00:02:10.415
popular, if you've ever used Express,
and you have the middleware and

40
00:02:10.415 --> 00:02:13.664
all that stuff,
there's actually something called Connect.

41
00:02:13.664 --> 00:02:17.598
Express just used to rely on it as a
dependency, and then, I think, maybe 4.0,

42
00:02:17.598 --> 00:02:21.080
3.0, somewhere in Express, they decided
to get rid of it as a dependency, but

43
00:02:21.080 --> 00:02:22.800
they still kept the same syntax.

44
00:02:22.800 --> 00:02:25.614
But everything was from
Connect back in the day,

45
00:02:25.614 --> 00:02:28.230
like eight years ago or
something like that.

46
00:02:28.230 --> 00:02:32.035
And, most Node servers you see
are kinda based off that, and

47
00:02:32.035 --> 00:02:33.760
Next.js is no different.

48
00:02:33.760 --> 00:02:35.980
So all you have to do in a file is,
is do something like this.

49
00:02:35.980 --> 00:02:39.138
By doing this, we literally get an API.

50
00:02:39.138 --> 00:02:42.145
So for instance, I'm just gonna copy this.

51
00:02:42.145 --> 00:02:46.000
And, I'm going to add it to,
almost deleted this user thing.

52
00:02:46.000 --> 00:02:47.380
I'm gonna add it to our API here.

53
00:02:48.650 --> 00:02:52.863
And that's it.
I have an API now, 2/API.

54
00:02:52.863 --> 00:02:55.887
You notice there are no methods here,
so if I'm doing a GET, PUT,

55
00:02:55.887 --> 00:02:58.749
PATCH, DELETE,
I don't know what I'm doing, cuz I'm not,

56
00:02:58.749 --> 00:03:02.003
I'm not doing either those things,
I'm gonna do all of those things.

57
00:03:02.003 --> 00:03:05.960
So we can test this out, so
I'm just gonna restart very quick.

58
00:03:05.960 --> 00:03:08.527
Actually, let me get rid of this log for
the theme,

59
00:03:08.527 --> 00:03:10.938
that's kind of making
our output super noisy.

60
00:03:10.938 --> 00:03:14.603
I always like to log my theme sometimes,
cuz if I'll do presets,

61
00:03:14.603 --> 00:03:19.500
and I don't know what the colors are or
what they're called, so I'll log it out.

62
00:03:19.500 --> 00:03:22.010
So I can see the colors, and the sizes,
and the fonts and everything, so

63
00:03:22.010 --> 00:03:23.370
I can use them.

64
00:03:23.370 --> 00:03:25.180
So, I usually keep that off for
development.

65
00:03:26.280 --> 00:03:28.800
All right, so let's hit the API.

66
00:03:28.800 --> 00:03:30.177
I'm actually [SOUND].

67
00:03:30.177 --> 00:03:33.360
I'm just gonna do a GET request,
I'll just do a GET request here.

68
00:03:33.360 --> 00:03:37.346
And it's gonna be to our app,
which, for me, is localhost 3000,

69
00:03:37.346 --> 00:03:40.214
if you didn't change your ports,
the same thing.

70
00:03:40.214 --> 00:03:47.230
/API, I was gonna hit Enter, and
then boom, I get back message, hello.

71
00:03:47.230 --> 00:03:50.372
It might look different than yours
just because I have some json Chrome

72
00:03:50.372 --> 00:03:52.300
extension that makes this look like this.

73
00:03:52.300 --> 00:03:53.720
If you don't have
the Chrome extension here,

74
00:03:53.720 --> 00:03:58.980
is gonna get back some black text on
a white screen, but it's still json.

75
00:03:58.980 --> 00:04:00.810
So, yeah, pretty simple.

76
00:04:00.810 --> 00:04:03.781
We [LAUGH],
we got a nice full API, I mean.

77
00:04:03.781 --> 00:04:08.658
Can someone, again, show me a framework
that makes it easier to do this?

78
00:04:08.658 --> 00:04:13.425
This is the simplest API I've
ever seen done ever.

79
00:04:13.425 --> 00:04:16.440
You didn't have to do anything,
and it just worked.

80
00:04:16.440 --> 00:04:17.800
All you have to do is make a file,

81
00:04:17.800 --> 00:04:19.660
I didn't have to make a route,
it just worked.

82
00:04:19.660 --> 00:04:22.585
And that, to me,
is just really impressive, so.

83
00:04:22.585 --> 00:04:25.000
I really like what they're
doing here with this.

84
00:04:25.000 --> 00:04:26.570
So, let's keep moving.

85
00:04:27.990 --> 00:04:32.221
And, so now, yeah, that's really cool and
all, but I mean, who wants to do

86
00:04:32.221 --> 00:04:36.278
all this stuff for all the complicated
server logic they're gonna have?

87
00:04:36.278 --> 00:04:37.760
We need a little more than this.

88
00:04:37.760 --> 00:04:40.053
It may sound a little closer to Express.

89
00:04:40.053 --> 00:04:43.952
And out of the box Next.js doesn't
give you that experience, but

90
00:04:43.952 --> 00:04:47.916
I think that's a good thing,
because it is just based off Connect,

91
00:04:47.916 --> 00:04:50.920
you can literally use whatever you want.

92
00:04:50.920 --> 00:04:53.784
And, there's a lot of packages out
there to kinda make this easier.

93
00:04:53.784 --> 00:04:56.690
But I've landed on one, and
we'll kinda talk about that.

94
00:04:56.690 --> 00:05:00.038
But basically, some of the things
that we wanna be able to do is,

95
00:05:00.038 --> 00:05:02.642
we want to be able to respond
to a URL like this, but

96
00:05:02.642 --> 00:05:06.427
be able to split off the methods,
whether it's a GET, a PUT, A DELETE.

97
00:05:06.427 --> 00:05:10.956
Because right now, I can make any requests
I want to this, with any method and

98
00:05:10.956 --> 00:05:12.920
is always gonna return the same.

99
00:05:12.920 --> 00:05:15.420
It doesn't matter,
I can test this out right now.

100
00:05:15.420 --> 00:05:19.460
So, now I'm gonna use HTTPie,
which is like cURL for humans,

101
00:05:19.460 --> 00:05:24.203
to test the non GET request, cuz
the browser can only test a GET requests.

102
00:05:24.203 --> 00:05:29.063
So if I wanna test the post, I can say
HTTP, which is the command line for

103
00:05:29.063 --> 00:05:31.348
HTTPie, that's so hard to say.

104
00:05:31.348 --> 00:05:36.130
Then I could say, PUT, and I'm just
gonna say, 3000, this is a shortcut for

105
00:05:36.130 --> 00:05:42.280
localhost 3000, and then /API,
which is where our API is.

106
00:05:42.280 --> 00:05:42.909
And then I can do that.

107
00:05:42.909 --> 00:05:45.659
And you can see,
I still get back message hello,

108
00:05:45.659 --> 00:05:47.820
I could do the same thing with posts.

109
00:05:47.820 --> 00:05:49.780
I get back message, hello.

110
00:05:49.780 --> 00:05:51.430
I mean, I can go on and on.

111
00:05:51.430 --> 00:05:53.988
DELETE, doesn't matter.

112
00:05:53.988 --> 00:05:55.140
It's always gonna send it back, and

113
00:05:55.140 --> 00:05:59.300
that's because I'm not doing
anything with the methods here.

114
00:05:59.300 --> 00:06:04.080
So, yeah, you could just split on
the methods by using request.method =

115
00:06:04.080 --> 00:06:07.260
GET do this,
request.method = DELETE do this.

116
00:06:07.260 --> 00:06:10.812
But that's really gross, and
Express already solved this, so

117
00:06:10.812 --> 00:06:12.401
why can't we use that here?

118
00:06:12.401 --> 00:06:13.900
So let's do that.

119
00:06:13.900 --> 00:06:18.130
So here's a plugin that I like to use,
or a module, it's called next-connect.

120
00:06:18.130 --> 00:06:19.640
It basically allows you to do it.

121
00:06:19.640 --> 00:06:24.540
So, you can turn any handler into
an Express-like router that has its

122
00:06:24.540 --> 00:06:29.150
own methods on it, and also be able
to use any Connect-based middleware.

123
00:06:29.150 --> 00:06:33.080
So for this case,
I'm using cors, so, that works.

124
00:06:33.080 --> 00:06:34.940
And then you just export your handler.

125
00:06:34.940 --> 00:06:37.937
So I'm just gonna install
next-connect here.

126
00:06:40.790 --> 00:06:41.733
Like that.

127
00:06:43.790 --> 00:06:46.960
And then what we can do is,
we can import this up top.

128
00:06:46.960 --> 00:06:53.097
So import,
I was gonna call it nc from next-connect.

129
00:06:53.097 --> 00:06:57.312
And then what I can do is,
I can make a handler, like this,

130
00:06:57.312 --> 00:07:00.600
which is nc, and then it's just chainable.

131
00:07:00.600 --> 00:07:05.960
So now I can say, I wanna be able to get,
and then I can say req, res.

132
00:07:05.960 --> 00:07:12.420
So, if you've never used Express, req and
res are short for request and response.

133
00:07:12.420 --> 00:07:16.500
So here's the incoming request,
and here's how you respond to it.

134
00:07:16.500 --> 00:07:18.470
So, that's what that means.

135
00:07:18.470 --> 00:07:23.970
I can also do something like,
post((req, res,)).

136
00:07:23.970 --> 00:07:26.630
And the other thing to
note about this is that,

137
00:07:26.630 --> 00:07:28.961
you can do async functions in here, so.

138
00:07:28.961 --> 00:07:32.390
But this stuff needs to be async as
you're doing some database stuff.

139
00:07:32.390 --> 00:07:33.544
No problem, they can be async.

140
00:07:33.544 --> 00:07:37.320
You can do all this stuff in here,
they can do promises, it's all good.

141
00:07:37.320 --> 00:07:42.607
So we have this GET request here,
so now I'll just say like,

142
00:07:42.607 --> 00:07:47.687
req.json, and
I'll send back a message that says, ok,

143
00:07:47.687 --> 00:07:54.238
and I'll do the same thing for post,
that just says posted it, like that.

144
00:07:54.238 --> 00:07:55.898
So then I'll.

145
00:07:55.898 --> 00:07:58.747
I think I don't have to restart it,
I think that was good to go.

146
00:07:58.747 --> 00:07:59.580
So now let's test.

147
00:07:59.580 --> 00:08:03.781
See what happens when
I try to do a DELETE.

148
00:08:03.781 --> 00:08:05.980
Not found.

149
00:08:05.980 --> 00:08:09.617
Can't do DELETE anymore,
cuz we didn't create a method for

150
00:08:09.617 --> 00:08:12.912
that inside of that nc handler,
so now it's a 404.

151
00:08:12.912 --> 00:08:15.730
But if I go back and I try to do a,
what did I do, post?

152
00:08:15.730 --> 00:08:16.827
Yeah.

153
00:08:16.827 --> 00:08:18.318
Post here.

154
00:08:18.318 --> 00:08:20.031
Res.json.

155
00:08:20.031 --> 00:08:26.475
I put req, sorry, res.json and, res.json.

156
00:08:26.475 --> 00:08:31.141
I do a post here, boom, I get the posted
message, and then obviously if I go back

157
00:08:31.141 --> 00:08:34.500
to the browser and I do that,
I get the GET message for ok.

158
00:08:34.500 --> 00:08:41.130
All right, so, that to me is,
I mean, extremely powerful.

159
00:08:41.130 --> 00:08:42.657
It kinda reminds me of
a Serverless function,

160
00:08:42.657 --> 00:08:45.212
if you've ever used Serverless functions
before, it kinda feels that way.

161
00:08:45.212 --> 00:08:48.888
Except for it's not a Serverless function,
it's just not a Serverless functions,

162
00:08:48.888 --> 00:08:49.712
it's on Express.

163
00:08:49.712 --> 00:08:51.839
So, this was pretty legit, I mean,

164
00:08:51.839 --> 00:08:56.106
you could really get the app moving
really quick, really fast with this.

165
00:08:56.106 --> 00:08:58.311
And again, this code is not living.

166
00:08:58.311 --> 00:09:02.091
It's right next to your pages, which
are client-side react components, but this

167
00:09:02.091 --> 00:09:05.603
code never gets shipped to the browser,
this is never gonna be in the browser,

168
00:09:05.603 --> 00:09:09.090
this is only server-side,
it's a completely different bundle.

169
00:09:09.090 --> 00:09:11.290
So even though it lives there,
it's separate.

170
00:09:11.290 --> 00:09:16.106
And to me, logically working on it as
a developer, it just makes more sense

171
00:09:16.106 --> 00:09:20.934
than what I currently have set up in
different places of our organization.

172
00:09:20.934 --> 00:09:24.303
Whereas it's like, you got this API
over here, it's in this repo, and

173
00:09:24.303 --> 00:09:27.079
this thing, and
maybe you're using Docker, it's a lot.

174
00:09:27.079 --> 00:09:31.050
This kind of just simplifies it a lot,
in my opinion.

175
00:09:31.050 --> 00:09:34.350
So, monorepos were always legit.

176
00:09:34.350 --> 00:09:37.260
Microservices just changed it all, but

177
00:09:37.260 --> 00:09:42.061
you can still have a monorepo with
microservices, you just have.

178
00:09:42.061 --> 00:09:43.464
What is it?

179
00:09:43.464 --> 00:09:47.057
Like Yarn, Yarn Workspaces, or
using Learner, or something like that, so

180
00:09:47.057 --> 00:09:48.600
you coul still do that.

181
00:09:48.600 --> 00:09:50.290
Especially they're all Node.

182
00:09:50.290 --> 00:09:52.850
So, this having the code next to each
other just works better, in my opinion.

