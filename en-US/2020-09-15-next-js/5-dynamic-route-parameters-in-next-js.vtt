WEBVTT

1
00:00:00.000 --> 00:00:02.231
Let's head back here.

2
00:00:02.231 --> 00:00:05.182
Super awesome, the routing there.

3
00:00:05.182 --> 00:00:10.493
If anyone knows a better routing
setup in React, let me know.

4
00:00:10.493 --> 00:00:12.832
Because, that was pretty easy.

5
00:00:12.832 --> 00:00:15.701
Gatsby does something
very similar as well.

6
00:00:15.701 --> 00:00:17.610
They use the file system.

7
00:00:17.610 --> 00:00:19.862
They have a plugin that
reads the file system,

8
00:00:19.862 --> 00:00:22.067
that plugin is built
into Gatsby by default.

9
00:00:22.067 --> 00:00:23.741
And their syntax is just
a little different.

10
00:00:23.741 --> 00:00:27.565
I think they use underscores for
parameters and not the array brackets, but

11
00:00:27.565 --> 00:00:29.490
you get pretty much the same results.

12
00:00:29.490 --> 00:00:31.047
So I'm a big fan of
Gatsby's routing as well.

13
00:00:33.059 --> 00:00:37.769
Cool, we talked about
the index stuff there.

14
00:00:37.769 --> 00:00:41.993
Let's talk about how do
we access the dynamic,

15
00:00:41.993 --> 00:00:45.483
the parameters of that route, right?

16
00:00:45.483 --> 00:00:51.527
So for instance,
we have this id here inside this route.

17
00:00:51.527 --> 00:00:53.941
This isn't really useful for
us, unless we're,

18
00:00:53.941 --> 00:00:57.212
I mean why would we make this if
we're not going to use the id, right?

19
00:00:57.212 --> 00:00:59.319
Like we need this id to do something.

20
00:00:59.319 --> 00:01:06.287
So this is, how we interact with that is
going to depend on how we render the page.

21
00:01:06.287 --> 00:01:08.582
But for right now until we get
to different rendering modes,

22
00:01:08.582 --> 00:01:10.967
we're only really just talking
about client side rendering.

23
00:01:10.967 --> 00:01:13.596
So everything here is just
regular React for now.

24
00:01:13.596 --> 00:01:16.332
I'll let you know when we're not doing
regular React stuff, but for now,

25
00:01:16.332 --> 00:01:17.693
everything's just regular React.

26
00:01:17.693 --> 00:01:22.804
So in that case, we can actually
use the router lib from Next.js,

27
00:01:22.804 --> 00:01:26.745
which I believe is called
next/router like that.

28
00:01:26.745 --> 00:01:28.088
So we can import this.

29
00:01:28.088 --> 00:01:31.106
The eslint can't stand double quotes.

30
00:01:31.106 --> 00:01:36.659
And I think the one that we want is
gonna be called what is it, useRouter?

31
00:01:36.659 --> 00:01:37.490
There we go.

32
00:01:37.490 --> 00:01:38.508
So useRouter.

33
00:01:38.508 --> 00:01:42.300
If you've never used React hooks before,
this is a React hook.

34
00:01:42.300 --> 00:01:44.757
Most React hooks start with the use word.

35
00:01:44.757 --> 00:01:46.158
We're not gonna get into React hooks.

36
00:01:46.158 --> 00:01:50.420
There's a really good course at
Frontend Masters that I wanna say,

37
00:01:50.420 --> 00:01:53.350
I think the V5 course
actually covers hooks.

38
00:01:53.350 --> 00:01:56.252
So, you should check that
one out from Brian Holt,

39
00:01:56.252 --> 00:01:58.558
that one covers hooks into more detail.

40
00:01:58.558 --> 00:02:01.556
I could talk a little bit about
if it's confusing to someone, but

41
00:02:01.556 --> 00:02:03.475
I'm actually just going to keep moving.

42
00:02:03.475 --> 00:02:06.212
But basically,
we can use this useRouter hook,

43
00:02:06.212 --> 00:02:08.695
which is going to give
us the actual router.

44
00:02:08.695 --> 00:02:11.977
And then we can inspect that router and
get the parameters or

45
00:02:11.977 --> 00:02:14.807
parameter in this case
associated with this page.

46
00:02:14.807 --> 00:02:18.473
So what I can do is I can say,
gimme the router,

47
00:02:18.473 --> 00:02:21.586
which is gonna be useRouter like that.

48
00:02:21.586 --> 00:02:26.873
And it's also note that if you aren't
using functional components, if you don't

49
00:02:26.873 --> 00:02:32.026
know the difference between this in React
and something like a class component.

50
00:02:32.026 --> 00:02:33.838
The difference is, this component is,

51
00:02:33.838 --> 00:02:36.625
you can think of it as the whole
function is a render function.

52
00:02:36.625 --> 00:02:38.022
This is the render function.

53
00:02:38.022 --> 00:02:41.827
Where as class component, you manually
have to create a render function and

54
00:02:41.827 --> 00:02:44.512
everything else is not
the render function, right?

55
00:02:44.512 --> 00:02:47.642
In the functional component,
this whole thing is the render function.

56
00:02:47.642 --> 00:02:48.739
And that's why hooks are here.

57
00:02:48.739 --> 00:02:52.592
Hooks allows us to opt into what we
would traditionally have methods,

58
00:02:52.592 --> 00:02:55.009
whereas a class component
is the other way,

59
00:02:55.009 --> 00:02:57.900
you opt into the render
function by writing render.

60
00:02:57.900 --> 00:03:00.110
So just remember that, so
that's kind of where hooks are.

61
00:03:00.110 --> 00:03:03.740
But the reason I'm saying that is
because if you use class components,

62
00:03:03.740 --> 00:03:07.372
there's a withRouter higher order
component that will wrap your class

63
00:03:07.372 --> 00:03:10.414
component that gives you access
to the same router object.

64
00:03:10.414 --> 00:03:11.489
So they're both the same.

65
00:03:11.489 --> 00:03:12.710
This is for class components.

66
00:03:12.710 --> 00:03:14.484
This is for functional components.

67
00:03:14.484 --> 00:03:18.594
So, we're gonna use the functional
component, and we're gonna get the router.

68
00:03:18.594 --> 00:03:21.165
And then what we wanna do
is we wanna grab the id, so

69
00:03:21.165 --> 00:03:25.419
we can say id like this is actually gonna
be an object, so I'm gonna do structure.

70
00:03:25.419 --> 00:03:29.846
And that's gonna be from router.query.

71
00:03:29.846 --> 00:03:35.577
So router.query is gonna be an object
with any associated params on there,

72
00:03:35.577 --> 00:03:37.376
and I want the id param.

73
00:03:37.376 --> 00:03:40.839
And the reason I know it's id is because
that's what I put in the file name.

74
00:03:40.839 --> 00:03:42.207
It's whatever I put in the file name.

75
00:03:42.207 --> 00:03:45.684
If I put, blah, blah, blah,
that's what this will be.

76
00:03:45.684 --> 00:03:47.150
It'll be blah, blah, blah, right?

77
00:03:47.150 --> 00:03:50.623
So I put id, so
I'm gonna get back an id here.

78
00:03:50.623 --> 00:03:55.348
So what I'm gonna do is I'm gonna
return a component like this.

79
00:03:55.348 --> 00:04:02.246
And I'm gonna say,
notes (Id) like that, right.

80
00:04:02.246 --> 00:04:09.311
So now, we should be able to
see this id inside of our JSX.

81
00:04:09.311 --> 00:04:12.390
So let's save that,
let's go back to our app.

82
00:04:12.390 --> 00:04:16.973
And you can see that is the id
that I put here in the URL, right?

83
00:04:16.973 --> 00:04:20.673
If I put one, then I'll get one, right.

84
00:04:20.673 --> 00:04:26.546
So, pretty useful,
pretty easy to get those query params.

