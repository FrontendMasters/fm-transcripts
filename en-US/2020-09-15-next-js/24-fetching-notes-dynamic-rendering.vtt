WEBVTT

1
00:00:00.000 --> 00:00:04.502
The next thing we'll do is we'll fetch
one note, so we will look at that and

2
00:00:04.502 --> 00:00:08.441
we can see, we're also gonna use
getServerSideProps for this.

3
00:00:08.441 --> 00:00:13.270
This one is gonna be a little different,
we want a little different experience

4
00:00:13.270 --> 00:00:16.270
here, so
we're gonna attempt to fetch a note but

5
00:00:16.270 --> 00:00:20.168
if the note is not there then
we're gonna redirect to /notes.

6
00:00:20.168 --> 00:00:22.032
Now, that's powerful, right?

7
00:00:22.032 --> 00:00:24.585
We're literally fetching data service I.

8
00:00:24.585 --> 00:00:28.669
We're gonna try attempt to get the data,
if it comes back not okay,

9
00:00:28.669 --> 00:00:32.192
where's it gonna redirect back to /notes,
that's it.

10
00:00:32.192 --> 00:00:35.578
And we won't even finish
rendering this page.

11
00:00:35.578 --> 00:00:38.750
I believe that's like
a superpower that you can do.

12
00:00:38.750 --> 00:00:41.504
So we'll just do that and
we're gonna copy that thing.

13
00:00:41.504 --> 00:00:45.453
So what we'll do is we'll
go to the id page here.

14
00:00:45.453 --> 00:00:51.277
And we'll say exports async function

15
00:00:51.277 --> 00:00:56.380
getServerSideProps like that.

16
00:00:56.380 --> 00:01:01.101
I'm gonna need the params here,
I'm also gonna need the request objects or

17
00:01:01.101 --> 00:01:04.067
the response objects,
one of those which one.

18
00:01:06.040 --> 00:01:08.225
We're gonna need both.

19
00:01:08.225 --> 00:01:12.150
Obviously, the response, they're also
gonna respond to, I'll get both.

20
00:01:12.150 --> 00:01:17.984
So we'll do that, and
I'm gonna paste in this HTTP call.

21
00:01:17.984 --> 00:01:21.536
So one thing to note is I'm getting the
params here and this is, this is the thing

22
00:01:21.536 --> 00:01:23.990
about getServiceSideProps
is running at build time.

23
00:01:23.990 --> 00:01:28.390
So I do have the parameters in the URL,
so I can refer to them here.

24
00:01:28.390 --> 00:01:31.803
Whereas if I tried to
use getStaticProps here,

25
00:01:31.803 --> 00:01:35.055
there's no way I would
have the parameters.

26
00:01:35.055 --> 00:01:37.667
So then I would have to use
getStaticPass to get the parameters.

27
00:01:37.667 --> 00:01:41.517
And then I would have a naked API
call to the database to get every

28
00:01:41.517 --> 00:01:44.423
single note ahead of time,
get all their IDs and

29
00:01:44.423 --> 00:01:47.638
they'll render a static page for
every single one.

30
00:01:47.638 --> 00:01:52.126
Which is I think you should be doing for
most of the things that you're doing but

31
00:01:52.126 --> 00:01:55.400
in this case my note is dynamic,
it's always changing.

32
00:01:55.400 --> 00:01:58.998
I don't wanna statically render my note,
I want it to always be dynamic, so

33
00:01:58.998 --> 00:02:00.137
I'm not gonna do that.

34
00:02:00.137 --> 00:02:00.979
But this is a blog,

35
00:02:00.979 --> 00:02:04.618
this is anything static, or something that
maybe I can do hybrid on the front end,

36
00:02:04.618 --> 00:02:08.178
which I probably can with this note,
then I wouldn't do getServerSideProps.

37
00:02:08.178 --> 00:02:11.230
In fact, I probably would, I would
just stretch the note on the client,

38
00:02:11.230 --> 00:02:12.843
to be honest, I would just do it here.

39
00:02:12.843 --> 00:02:15.612
Because I don't need this
page to be indexed by Google.

40
00:02:15.612 --> 00:02:20.196
So I wouldn't even do ServerSideProps,
I was expected on the client most likely.

41
00:02:20.196 --> 00:02:22.504
But for the sake of example,
we're gonna do get ServerSideProps.

42
00:02:22.504 --> 00:02:28.487
All right, so we get the response and
then we can say if not response.ok,,

43
00:02:28.487 --> 00:02:33.630
which is something that fetch
will tell you if it's a non 200,

44
00:02:33.630 --> 00:02:35.612
and then it's not okay.

45
00:02:35.612 --> 00:02:40.444
Then I'm just going to say res.writeHead
I believe, and I would put a 302 and

46
00:02:40.444 --> 00:02:43.941
then I'm going to put a,
I wanna say that like a location.

47
00:02:43.941 --> 00:02:52.406
Let me see.

48
00:02:53.903 --> 00:02:55.258
Yeah, I was right, so
I'll follow my instincts.

49
00:02:55.258 --> 00:02:57.918
So location and then I could put
a relative path in here for notes.

50
00:03:00.313 --> 00:03:05.153
And then I'll just say res.in,
this request, they'll end it.

51
00:03:05.153 --> 00:03:08.136
And just to comply with
the API of getServerSideProps,

52
00:03:08.136 --> 00:03:10.743
I'll just return a props
with an empty objects.

53
00:03:13.505 --> 00:03:16.699
And then if we do get something back,
then I do wanna get this data.

54
00:03:16.699 --> 00:03:22.274
So then I'll say data = await

55
00:03:22.274 --> 00:03:27.856
response.json, not jone.

56
00:03:29.969 --> 00:03:34.456
And then I'm just gonna return
props here with the actual notes,

57
00:03:34.456 --> 00:03:36.100
which will be the data.

58
00:03:40.158 --> 00:03:43.484
All right, so we got that and
then up here, I just need to use that.

59
00:03:43.484 --> 00:03:49.150
So then I'll have my note And I have,

60
00:03:52.440 --> 00:03:56.647
So now that this node is injected I don't
really need to get the query anymore,

61
00:03:56.647 --> 00:04:00.664
I'm not doing anything client sides,
so I don't really need the router or

62
00:04:00.664 --> 00:04:01.577
the query here.

63
00:04:01.577 --> 00:04:07.208
I can just say notes.title, like that.

64
00:04:11.915 --> 00:04:14.309
All right, so let's try that and
see what happens.

65
00:04:14.309 --> 00:04:17.237
I might have to rebuild,
so let's check it out.

66
00:04:19.857 --> 00:04:22.361
Okay, that was a prefetch,
and then boom, there we go.

67
00:04:22.361 --> 00:04:25.749
So then we got note 2,
if I go back we got note 1, note 4,

68
00:04:25.749 --> 00:04:30.597
I don't even notice that the first time I
clicked on it, like took a minute wait it,

69
00:04:30.597 --> 00:04:32.639
it was pre-rendering that page.

70
00:04:32.639 --> 00:04:35.130
That was the first time that
that page ever got ran.

71
00:04:35.130 --> 00:04:42.463
So I had to pre-render it and then every
single call after that is instant, right?

72
00:04:42.463 --> 00:04:43.240
Pretty instant.

73
00:04:43.240 --> 00:04:44.990
So I just pre-rendered it, which,

74
00:04:44.990 --> 00:04:47.644
like I said,
you still get that with ServerSideProps,

75
00:04:47.644 --> 00:04:51.551
you still get that pre-rendering,
which is really awesome, and that caching.

76
00:04:51.551 --> 00:04:52.573
Okay, cool,

77
00:04:52.573 --> 00:04:58.125
the last one we're gonna do is we're
gonna get StaticProps on the homepage.

78
00:04:58.125 --> 00:05:01.621
So let's head over to the homepage here,
and

79
00:05:01.621 --> 00:05:06.589
what we're gonna do is,
we're going to say exports function,

80
00:05:06.589 --> 00:05:12.201
we won't do anything async here,
export function, get static props.

81
00:05:12.201 --> 00:05:19.444
And we're gonna simulate
getting data from a CMS.

82
00:05:19.444 --> 00:05:24.032
So if you had a CMS here, you'll get
data from a CMS like that, and instead,

83
00:05:24.032 --> 00:05:27.789
we'll just act like we have it already and
return some props.

84
00:05:27.789 --> 00:05:30.035
And then maybe I'll say some content.

85
00:05:30.035 --> 00:05:33.671
And then I'll say a title,

86
00:05:33.671 --> 00:05:40.002
which is this is my really nice app,
like that.

87
00:05:44.752 --> 00:05:46.497
Come on, come on, there we go.

88
00:05:49.593 --> 00:05:52.341
All right, so
I'm returning a prop called content,

89
00:05:52.341 --> 00:05:54.181
that's an object that has a title.

90
00:05:54.181 --> 00:05:58.416
So now I can come up here and
say, give me the content, And

91
00:05:58.416 --> 00:06:04.187
then I can replace this with,
Content.title.

92
00:06:08.352 --> 00:06:12.764
Boom, so now,
if I go back to my homepage, there we go.

93
00:06:12.764 --> 00:06:16.372
This is my really nice app, there's my
content, this got statically rendered it

94
00:06:16.372 --> 00:06:19.845
literally render instantly, I didn't
have to do a rebuild, it was too fast.

95
00:06:19.845 --> 00:06:24.370
And we're gonna get a little bit
into more about what these things

96
00:06:24.370 --> 00:06:27.094
actually do other than fetching data.

97
00:06:27.094 --> 00:06:32.050
And yeah, it's gonna be a little crazier,
but yeah, it's pretty much there.

98
00:06:32.050 --> 00:06:34.600
Okay, cool, so
if you didn't feel like keeping up,

99
00:06:34.600 --> 00:06:38.133
you can check out this data fetching
branch and everything will be there.

100
00:06:38.133 --> 00:06:39.543
So check it out if you want to.

101
00:06:39.543 --> 00:06:41.452
&gt;&gt; Hey, Scott
&gt;&gt; Yes?

102
00:06:41.452 --> 00:06:45.867
&gt;&gt; Is data fetching and
components very much different?

103
00:06:45.867 --> 00:06:51.001
&gt;&gt; Good question, so
data fetching and components.

104
00:06:51.001 --> 00:06:54.254
So if you wanted to fetch some data and
components,

105
00:06:54.254 --> 00:06:57.292
the way you would do that
is purely client side.

106
00:06:57.292 --> 00:06:59.842
You have to do a client just
the same way you do in a React now,

107
00:06:59.842 --> 00:07:01.280
it's literally the same thing.

108
00:07:01.280 --> 00:07:05.183
Because next is.js splitting
based off routes and pages.

109
00:07:05.183 --> 00:07:07.528
So those are the things that
get server side render.

110
00:07:07.528 --> 00:07:09.416
And then if those pages import components,

111
00:07:09.416 --> 00:07:11.773
then those components get
rendered on the server too.

112
00:07:11.773 --> 00:07:15.643
But it all starts off with
the entry to the page.

113
00:07:15.643 --> 00:07:19.548
So the page has to get rendered,
and then the components follow.

114
00:07:19.548 --> 00:07:23.724
So because of that, you're not going
to be exporting things like I know and

115
00:07:23.724 --> 00:07:28.051
gas where you can export queries inside
of components, and stuff like that.

116
00:07:28.051 --> 00:07:31.782
No, you won't be doing that here, you'll
just be fetching data on the client side.

117
00:07:31.782 --> 00:07:38.495
If you do need some data that server side
render, that's like fetch that build time,

118
00:07:38.495 --> 00:07:43.359
or server time inside of a component,
I highly recommend it.

119
00:07:43.359 --> 00:07:46.634
It's got to be really the only way you
can do is you got to pass it down, right?

120
00:07:46.634 --> 00:07:50.155
So either can use context using react
context, use some type of state management

121
00:07:50.155 --> 00:07:52.559
library that you want, or
just passing down as props.

122
00:07:52.559 --> 00:07:54.868
So I think that's the way to go and

123
00:07:54.868 --> 00:07:58.673
that's actually kinda like
how I've done it anyway.

124
00:07:58.673 --> 00:08:01.152
I don't really write react apps where I
do data fetching inside of a component.

125
00:08:01.152 --> 00:08:05.391
It's rare that I would do it, it would
have to be like I'm integrating with this

126
00:08:05.391 --> 00:08:08.430
third party API that requires
me to like printer stripe,

127
00:08:08.430 --> 00:08:11.530
sometimes I have to do it or
like Google Maps or something,

128
00:08:11.530 --> 00:08:14.606
where I gotta like, integrate and
pull something down.

129
00:08:14.606 --> 00:08:16.983
Most of the time I do all my data
fetching inside of pages anyway.

130
00:08:16.983 --> 00:08:21.037
And then I use whatever mechanism I want,
whether it's a state management library,

131
00:08:21.037 --> 00:08:24.975
whether it's like I said, context, or
just passing them down to the components,

132
00:08:24.975 --> 00:08:26.237
that's kinda how I do it.

133
00:08:26.237 --> 00:08:29.908
That way I can organize my loading and
my UI strategy from one source,

134
00:08:29.908 --> 00:08:33.833
when you start pulling in data in many
different components is like okay,

135
00:08:33.833 --> 00:08:36.073
well how do you handle the loading state?

136
00:08:36.073 --> 00:08:37.160
How do you handle the error state?

137
00:08:37.160 --> 00:08:41.457
And how do you handle all these other
states and it gets all over the place?

138
00:08:41.457 --> 00:08:43.698
It's a lot easier just to do in one place,
in my opinion,

139
00:08:43.698 --> 00:08:44.840
so that's kinda how I do it.

140
00:08:44.840 --> 00:08:49.617
And it's really also makes your components
a lot more flexible and presentational.

141
00:08:49.617 --> 00:08:53.694
So you can just use those components
in any single app because all they take

142
00:08:53.694 --> 00:08:56.209
are props, they don't do any actual logic.

143
00:08:56.209 --> 00:08:57.812
So that's just something
that I've been doing.

