WEBVTT

1
00:00:00.430 --> 00:00:01.420
Cool, rendering modes.

2
00:00:01.420 --> 00:00:04.905
So we're gonna talk a little bit,
now do you know what those functions are.

3
00:00:04.905 --> 00:00:07.530
We're gonna talk a little bit
about what they actually do.

4
00:00:07.530 --> 00:00:14.409
So, next day as actually looks at the data
fetching and your page components.

5
00:00:14.409 --> 00:00:17.070
Yeah, it's not just looking because
it's gonna call those functions.

6
00:00:17.070 --> 00:00:21.680
It's actually doing that to determine
how it's gonna prepare your page.

7
00:00:21.680 --> 00:00:24.500
So, and because it has
different rendering modes, or

8
00:00:24.500 --> 00:00:26.600
I should say different prerendering modes.

9
00:00:26.600 --> 00:00:28.115
So what is prerendering?

10
00:00:28.115 --> 00:00:31.980
Prerendering is like
an umbrella term meant to say,

11
00:00:31.980 --> 00:00:35.040
we're gonna take this JavaScript,
this react app, and

12
00:00:35.040 --> 00:00:38.120
we're going to render it
before it goes to the browser.

13
00:00:38.120 --> 00:00:39.472
So what does that actually mean?

14
00:00:39.472 --> 00:00:42.840
We're gonna turn it into an HTML
string before it goes to the browser.

15
00:00:42.840 --> 00:00:44.876
That's basically what it means,
it's gonna do that,

16
00:00:44.876 --> 00:00:47.056
it's gonna return into an HTML
string before the browser.

17
00:00:47.056 --> 00:00:50.790
It's not going to execute
any interaction on it.

18
00:00:50.790 --> 00:00:54.484
Like if you got handlers and things like
that, those won't happen, those won't get

19
00:00:54.484 --> 00:00:57.835
affected, you can still do window stuff
inside of those handlers and logic.

20
00:00:57.835 --> 00:01:02.548
But the actual presentation of is going
to be rendered on the server is gonna be

21
00:01:02.548 --> 00:01:05.150
turned into HTML, the CSS HTML.

22
00:01:05.150 --> 00:01:06.735
That's what's gonna be
sent down to the browser.

23
00:01:06.735 --> 00:01:11.290
And that's why server side rendering and
static rendering is so great because that

24
00:01:11.290 --> 00:01:14.520
it's instant, especially you put
that on the CDN and you cache it.

25
00:01:14.520 --> 00:01:16.850
People get to see your page immediately.

26
00:01:16.850 --> 00:01:19.630
But in the past,
that's how we always build websites, but

27
00:01:19.630 --> 00:01:22.230
in the past, okay, cool.

28
00:01:22.230 --> 00:01:25.447
Your website got here fast and
it's great, but now it's not interactive.

29
00:01:25.447 --> 00:01:28.090
So then now you do something
called rehydration.

30
00:01:28.090 --> 00:01:31.260
Which is now you take the client
side version of the app,

31
00:01:31.260 --> 00:01:35.230
which is pretty much an exact copy of
the server side one just not rendered yet.

32
00:01:35.230 --> 00:01:36.860
And with all the other logic.

33
00:01:36.860 --> 00:01:40.900
And you basically, you take over
where the service I left off.

34
00:01:40.900 --> 00:01:42.920
So it's like, yeah, cool,
here's where you left off.

35
00:01:42.920 --> 00:01:44.540
Now I'm gonna go find the root component.

36
00:01:44.540 --> 00:01:47.960
Let's say it's the app root,
the root div and the HTML document.

37
00:01:47.960 --> 00:01:50.568
And I'm gonna bootstrap
this react app here.

38
00:01:50.568 --> 00:01:53.758
And I'm gonna take all these JSON
files that have all the data that was

39
00:01:53.758 --> 00:01:54.816
called on the server.

40
00:01:54.816 --> 00:01:57.640
And I'm gonna pass them into
all the pages that need them.

41
00:01:57.640 --> 00:02:00.010
And boom, now I'm in a client side app.

42
00:02:00.010 --> 00:02:03.060
So you the best of both worlds, you get
that fast rendering from the server.

43
00:02:03.060 --> 00:02:06.090
But then you get that fast routing
from client side routing and

44
00:02:06.090 --> 00:02:09.150
interactivity that you really get
from single page applications.

45
00:02:09.150 --> 00:02:11.077
So it was like the best of both worlds.

46
00:02:11.077 --> 00:02:13.736
So that's kind of the philosophy
of prerendering and

47
00:02:13.736 --> 00:02:15.102
where all that comes from.

48
00:02:15.102 --> 00:02:18.630
So different prerendering modes,
you have static generation.

49
00:02:18.630 --> 00:02:22.850
Static generation is basically,
I'm literally turning these pages.

50
00:02:22.850 --> 00:02:27.190
Everything that they need, the data,
you could take this page as HTML string,

51
00:02:27.190 --> 00:02:29.710
you could throw it on the browser,
and it will work and

52
00:02:29.710 --> 00:02:31.150
look exactly the way that I want it to.

53
00:02:32.160 --> 00:02:33.620
That's static generation.

54
00:02:33.620 --> 00:02:38.207
So again, great for things like docs,
static pages, landing pages,

55
00:02:38.207 --> 00:02:41.883
blogs, anything where
the content is not that dynamic.

56
00:02:41.883 --> 00:02:46.151
It's basically, if you have content
that's not being changed by a user,

57
00:02:46.151 --> 00:02:47.925
you should static generated.

58
00:02:47.925 --> 00:02:51.270
If it's content being changed by a user,
maybe rethink it.

59
00:02:51.270 --> 00:02:55.660
So any non user generated content should
be static generated, in my opinion.

60
00:02:55.660 --> 00:02:58.297
So anything made by you and
your team, static generate it.

61
00:02:59.420 --> 00:03:02.700
And basically the benefits of
that is that it's CDN cacheable.

62
00:03:02.700 --> 00:03:04.852
It's just a string, so
you can throw it in front of a CDN.

63
00:03:04.852 --> 00:03:08.842
It works, it doesn't need a server, it
doesn't need node, it's just a file that

64
00:03:08.842 --> 00:03:12.910
serve from the CDN and it's instant,
so that's static generation.

65
00:03:12.910 --> 00:03:16.480
Then you have server side
rendering which is basically,

66
00:03:16.480 --> 00:03:21.150
it will turn your react component
into a string just not at build time.

67
00:03:21.150 --> 00:03:23.953
It'll do it at runtime when
you request that page.

68
00:03:23.953 --> 00:03:28.292
So if I do a get request to slash notes,
that's gonna go to the node server.

69
00:03:28.292 --> 00:03:31.500
It's gonna render that component
on the server first get the HTML,

70
00:03:31.500 --> 00:03:34.700
send it back to the browser,
and then boom, it's there.

71
00:03:34.700 --> 00:03:36.746
Any subsequent request is gonna be cached.

72
00:03:36.746 --> 00:03:39.620
It's gonna cache it, in this case,
next day as does cache it.

73
00:03:39.620 --> 00:03:43.740
But it still gonna come from the server
versus it being there ahead of time.

74
00:03:43.740 --> 00:03:45.080
So you can't cache these.

75
00:03:45.080 --> 00:03:48.540
This has to be computed at runtime,
this computation here.

76
00:03:48.540 --> 00:03:50.890
There is no caching there.

77
00:03:50.890 --> 00:03:52.425
So the build times are faster.

78
00:03:52.425 --> 00:03:57.210
Absolutely, cuz you're not prerendered
during build, but the runtime costs

79
00:03:57.210 --> 00:04:01.420
might be bigger depending on how long
your computation is to render this page.

80
00:04:01.420 --> 00:04:05.440
If you're doing like a huge database
query, you're doing a MapReduce,

81
00:04:05.440 --> 00:04:09.920
you're doing all this crazy stuff inside
of a server side props, function.

82
00:04:09.920 --> 00:04:12.240
Yeah, it's gonna be crazy.

83
00:04:12.240 --> 00:04:14.134
So you got to think about that.

84
00:04:14.134 --> 00:04:18.083
And then you got client side rendering,
which is what you're normally used to.

85
00:04:18.083 --> 00:04:22.753
You just send back a index, that HTML that
has nothing in it but some script tags,

86
00:04:22.753 --> 00:04:26.336
maybe a link tag, and like a div
with the id on it that says app.

87
00:04:26.336 --> 00:04:29.013
And then JavaScript comes in and
bootstraps that,

88
00:04:29.013 --> 00:04:31.200
that's client side rendering, right.

89
00:04:31.200 --> 00:04:32.700
And then,
the fourth one which is not here,

90
00:04:32.700 --> 00:04:35.510
it's like a combination of
all of these things, right?

91
00:04:35.510 --> 00:04:38.700
So you can pick and
choose how you want all these to work.

92
00:04:38.700 --> 00:04:41.720
And you can really build
a truly hybrid application

93
00:04:41.720 --> 00:04:44.690
using xjs because you can opt in, opt out.

94
00:04:44.690 --> 00:04:46.290
So those are all the different modes.

95
00:04:46.290 --> 00:04:49.710
So by default,
all the pages are prerendered,

96
00:04:49.710 --> 00:04:53.590
every page you make in the pages
folder is prerendered by default.

97
00:04:53.590 --> 00:04:54.776
And that's what that little battery means.

98
00:04:54.776 --> 00:04:58.123
Is like, yeah, we prerender this thing,
it's good to go, and ask whether or

99
00:04:58.123 --> 00:04:59.550
not you asked for a data or not.

100
00:04:59.550 --> 00:05:01.227
It's gonna be prerendered.

101
00:05:01.227 --> 00:05:03.591
So you get all that stuff for free.

102
00:05:03.591 --> 00:05:08.690
And now if you choose get static props,
that's gonna do static generation.

103
00:05:08.690 --> 00:05:10.970
It's in the word, getStaticprops.

104
00:05:10.970 --> 00:05:14.970
It's gonna statically render
this page ahead of time.

105
00:05:14.970 --> 00:05:17.150
So it's cacheable, it can be on the CDN.

106
00:05:17.150 --> 00:05:20.680
If you do get server side props,
it's gonna server side render,

107
00:05:20.680 --> 00:05:23.430
it too is also in the name,
server side props.

108
00:05:23.430 --> 00:05:25.410
So it's gonna render
that stuff on the server.

109
00:05:25.410 --> 00:05:29.290
And then for client side rendering,
you can do server side rendering and

110
00:05:29.290 --> 00:05:32.880
static generation, and
then still also do client side rendering.

111
00:05:32.880 --> 00:05:35.930
Because next doesn't touch the logic
inside your react component.

112
00:05:35.930 --> 00:05:40.287
That's reacting LAN, you're inside of
react, and actually it doesn't care.

113
00:05:40.287 --> 00:05:41.611
It doesn't touch that stuff, so

114
00:05:41.611 --> 00:05:43.884
you can still make a query
inside your react component and

115
00:05:43.884 --> 00:05:47.080
then render some components based off
the results of that query is still works.

116
00:05:47.080 --> 00:05:51.240
So that's how you can like hook
into this page is server rendered.

117
00:05:51.240 --> 00:05:53.090
This page is statically generated.

118
00:05:53.090 --> 00:05:55.270
This page is purely client site.

119
00:05:55.270 --> 00:05:57.713
This page is a combination of static and
client.

120
00:05:57.713 --> 00:06:02.083
This page is a combination of server and
client, like it gets really crazy.

121
00:06:02.083 --> 00:06:06.143
And the way that you do it is depending on
what function you export to fetch data,

122
00:06:06.143 --> 00:06:10.310
that's it, you export a certain function,
you opt into that method.

123
00:06:10.310 --> 00:06:15.903
This is my favorite part of xjs because as
a developer who has having built so many

124
00:06:15.903 --> 00:06:21.760
server side apps and so many different
languages, so many different frameworks.

125
00:06:21.760 --> 00:06:23.357
It's a pain doing it from scratch.

126
00:06:23.357 --> 00:06:25.320
So I really like the fact
that they do this.

127
00:06:25.320 --> 00:06:29.822
And as a developer who has created
server side rendering technologies,

128
00:06:29.822 --> 00:06:34.397
I can appreciate the thought that they
put into making this effortless and

129
00:06:34.397 --> 00:06:37.973
easy to think about,
in my opinion, it's very simple.

130
00:06:37.973 --> 00:06:39.260
So very well done.

