WEBVTT

1
00:00:00.030 --> 00:00:03.280
So we head back over to the stuff here.

2
00:00:03.280 --> 00:00:05.150
So here are the routes
that we have to make.

3
00:00:05.150 --> 00:00:07.800
So basically, is this basic crud, right?

4
00:00:07.800 --> 00:00:08.970
We need to be able to create a note.

5
00:00:08.970 --> 00:00:11.310
So it'll be a post to /api/note.

6
00:00:11.310 --> 00:00:12.792
We need to be able to update a note.

7
00:00:12.792 --> 00:00:18.764
So it'll be a patch to api/note/:id.

8
00:00:18.764 --> 00:00:20.720
We need to be able to delete.

9
00:00:20.720 --> 00:00:24.820
So it'll be the same thing, looks like
I've left delete on all of these.

10
00:00:24.820 --> 00:00:27.292
So we need a delete here
which will delete the note.

11
00:00:27.292 --> 00:00:29.696
Need to be able to get one note,
that'll be a get request.

12
00:00:29.696 --> 00:00:33.650
Need to be able to get all notes, which
will be a get request without the ID.

13
00:00:33.650 --> 00:00:35.590
So we'll make all of these.

14
00:00:35.590 --> 00:00:38.940
And if you take a look,
we really only have two URLs.

15
00:00:38.940 --> 00:00:40.638
We have this URL which is api/note.

16
00:00:40.638 --> 00:00:44.730
Then we have this URL,
which is api/note/:id.

17
00:00:44.730 --> 00:00:47.580
That's it.
They're all just different methods with

18
00:00:47.580 --> 00:00:48.540
the same URL.

19
00:00:48.540 --> 00:00:50.304
So we'll only need to make two files.

20
00:00:50.304 --> 00:00:51.693
We need to make one file for api/note.

21
00:00:51.693 --> 00:00:55.260
And then one file for api/note/:id.

22
00:00:55.260 --> 00:00:57.960
That's it.
Just two files, different methods.

23
00:00:57.960 --> 00:01:02.493
And we know that we have the next
connect that allows us to do different

24
00:01:02.493 --> 00:01:04.220
methods in the same file.

25
00:01:04.220 --> 00:01:06.490
So that's what we'll do.

26
00:01:06.490 --> 00:01:08.580
So we go to API.

27
00:01:08.580 --> 00:01:14.520
I'm going to create a new folder here for
notes.

28
00:01:14.520 --> 00:01:16.153
And then I'm going to make
an index here for that file.

29
00:01:16.153 --> 00:01:23.540
And then I'm gonna make one for
the ID of note which'll be id.js.

30
00:01:23.540 --> 00:01:26.660
And boom,
we've got our two files for that.

31
00:01:26.660 --> 00:01:31.070
And then if you want, you can follow
along and you can copy this up.

32
00:01:31.070 --> 00:01:33.400
I probably just write this up all by hand.

33
00:01:33.400 --> 00:01:35.600
Some helper functions here on my copy.

34
00:01:35.600 --> 00:01:38.380
But the one thing is we're not going
to get into databases and stuff for

35
00:01:38.380 --> 00:01:38.890
this course.

36
00:01:38.890 --> 00:01:41.710
I think it would just be a distraction.

37
00:01:41.710 --> 00:01:43.290
So we're going to do some
stuff in memory right now.

38
00:01:43.290 --> 00:01:45.180
So at least we get some real data.

39
00:01:45.180 --> 00:01:49.300
So what you can do is you can
just copy this file right here.

40
00:01:49.300 --> 00:01:55.460
And you can add it to a file
called source/data/data.js.

41
00:01:55.460 --> 00:01:56.659
I'm going to do that.

42
00:01:56.659 --> 00:01:59.280
So source, make a new folder,
call it data.

43
00:02:00.490 --> 00:02:07.720
And inside of there is add data.js,
Like that, I'm just gonna paste that in.

44
00:02:07.720 --> 00:02:12.810
Literally, just in memory array of notes,
nothing flashy here.

45
00:02:12.810 --> 00:02:15.270
It is important though,
you've gotta do a module.exports.

46
00:02:15.270 --> 00:02:19.290
Don't do the ES6 export,
otherwise it won't persist.

47
00:02:19.290 --> 00:02:20.820
It won't be like a live object.

48
00:02:20.820 --> 00:02:22.330
So do the module that exports.

49
00:02:24.470 --> 00:02:28.670
Cool, so then now let's go ahead and
build up these handlers here.

50
00:02:28.670 --> 00:02:34.510
So I'll import nc from next-connect.

51
00:02:35.580 --> 00:02:36.360
And then I'll make a handler.

52
00:02:40.610 --> 00:02:45.710
And I'll just export,
Default, the handler.

53
00:02:45.710 --> 00:02:48.390
And then I know I'm gonna
need the notes in here.

54
00:02:48.390 --> 00:02:55.040
So I'll just import the notes from,
where's it at?

55
00:02:58.225 --> 00:03:00.740
Source, there we go.

56
00:03:00.740 --> 00:03:04.280
So src/data/data like that.

57
00:03:04.280 --> 00:03:05.190
So I got my notes.

58
00:03:05.190 --> 00:03:08.110
Okay, cool.
So if we're in the index file, we go back.

59
00:03:08.110 --> 00:03:13.390
We know we need to do a POST
to create a new note.

60
00:03:13.390 --> 00:03:15.810
And then we need to,
it says DELETE but it should be GET.

61
00:03:15.810 --> 00:03:17.500
We need to do a GET to get all notes.

62
00:03:17.500 --> 00:03:18.790
So we'll just do that.

63
00:03:18.790 --> 00:03:20.330
So we'll say this'll be the post.

64
00:03:21.560 --> 00:03:26.270
This will be to create the notes,
so request response here.

65
00:03:27.440 --> 00:03:34.000
And then we need a get to,
Get all the notes.

66
00:03:34.000 --> 00:03:35.392
So if we wanted to create a note,

67
00:03:35.392 --> 00:03:38.520
we'll just assume whatever is on
the body is what's going to be a note.

68
00:03:38.520 --> 00:03:39.990
We're not going to be too strict.

69
00:03:39.990 --> 00:03:47.610
So I'll just say,
notes is whatever is on request.body.

70
00:03:47.610 --> 00:03:50.770
If you've never used Express before,
in this case,

71
00:03:50.770 --> 00:03:52.900
because there's some
middleware that's being used.

72
00:03:52.900 --> 00:03:57.370
Whatever's on the incoming request.body
is whatever they post it to the server,

73
00:03:57.370 --> 00:03:59.920
in the body field or the data field.

74
00:03:59.920 --> 00:04:01.885
Or whatever libraries are gonna front end.

75
00:04:01.885 --> 00:04:03.990
So we direct our body and
then I just need to add ID.

76
00:04:04.990 --> 00:04:06.980
Let's use the date,
Date.now is good for ID.

77
00:04:06.980 --> 00:04:13.360
And then I'll just say notes.push
into our database of notes like that.

78
00:04:14.840 --> 00:04:21.590
And then I'll just say res.json data note.

79
00:04:21.590 --> 00:04:22.950
So I'll send back that note.

80
00:04:22.950 --> 00:04:24.440
And then boom, we just created a note.

81
00:04:25.700 --> 00:04:26.950
Very simple there.

82
00:04:26.950 --> 00:04:29.060
And the next thing is I
want to get all the notes.

83
00:04:29.060 --> 00:04:30.200
So this one's very simple.

84
00:04:30.200 --> 00:04:35.910
I'm going to say res.json data and
just put notes.

85
00:04:37.500 --> 00:04:39.360
There we got all the notes, okay?

86
00:04:41.380 --> 00:04:43.530
So we can go try this out and
see what happens.

87
00:04:43.530 --> 00:04:48.400
So if I go back here to http py,
I could say HTTP.

88
00:04:48.400 --> 00:04:50.290
I could say post.

89
00:04:50.290 --> 00:04:54.198
And then I could say,
actually what's the best way?

90
00:04:54.198 --> 00:04:58.780
Actually the best way,
there's so many ways in JSON.

91
00:04:58.780 --> 00:05:01.810
I think we can do,
I think this one's better for me.

92
00:05:01.810 --> 00:05:06.620
So I'll just say echo,
Like this and I can add some JSON.

93
00:05:06.620 --> 00:05:11.743
So I'll say echo and
then I'll put some, Let's see.

94
00:05:11.743 --> 00:05:18.460
I'll put a name on the to do or
maybe or the note maybe a title.

95
00:05:18.460 --> 00:05:23.070
So the title, I'll say, this is the title.

96
00:05:23.070 --> 00:05:27.850
And then I can pipe
this to http like this.

97
00:05:27.850 --> 00:05:33.364
If you have any other API client
like insomnia, or is it insomnia,

98
00:05:33.364 --> 00:05:39.210
insomnia, postman, they all work,
I just like to do it from the CLI.

99
00:05:39.210 --> 00:05:40.400
You can even use curl.

100
00:05:40.400 --> 00:05:41.842
I just don't know how to use curl.

101
00:05:41.842 --> 00:05:48.930
So I'm using HTTPy, so
I'll post to 3000/api/note.

102
00:05:50.300 --> 00:05:52.850
And boom,
we get back the note that we created.

103
00:05:52.850 --> 00:05:55.780
Just like that, it works very well.

104
00:05:55.780 --> 00:05:59.620
And then I should be able
to get all notes, right?

105
00:05:59.620 --> 00:06:03.880
So I should be able to say,
cool then just give me all the notes.

106
00:06:03.880 --> 00:06:06.890
And then boom, we get back an array of
all the notes which is just one that I

107
00:06:06.890 --> 00:06:07.570
created, right?

108
00:06:07.570 --> 00:06:13.490
So if I create some more,
Then I go back and get them all.

109
00:06:13.490 --> 00:06:14.020
They'll all be there.

110
00:06:14.020 --> 00:06:18.970
All right, very simple, super simple API.

111
00:06:18.970 --> 00:06:20.770
Works like magic.

112
00:06:20.770 --> 00:06:24.600
Pretty amazing, I love it.

113
00:06:24.600 --> 00:06:28.698
The next ones we want to do is we will be
able to do the update, the delete, and

114
00:06:28.698 --> 00:06:29.670
then the get one.

115
00:06:29.670 --> 00:06:32.530
And that's all going to be in ID
because we need an ID to update.

116
00:06:32.530 --> 00:06:35.830
We need an ID to delete and
we need ID to get one.

117
00:06:35.830 --> 00:06:36.850
So, let's do the same thing.

118
00:06:36.850 --> 00:06:40.504
I'm gonna copy most of this,
bring it over here, and

119
00:06:40.504 --> 00:06:44.620
then we're gonna have
a patch instead of a post.

120
00:06:44.620 --> 00:06:46.580
And that's going to get one but

121
00:06:46.580 --> 00:06:49.270
I'm actually just going to go ahead and
copy some of this code out here.

122
00:06:49.270 --> 00:06:53.293
Because I have yeah,
actually I'm just gonna copy all this,

123
00:06:53.293 --> 00:07:00.660
cuz I forgot I got some stuff in here that
handles the nuances of checking those IDs.

124
00:07:00.660 --> 00:07:03.440
Wow, this file is big.

125
00:07:03.440 --> 00:07:04.840
Let me zoom out.

126
00:07:04.840 --> 00:07:06.400
This one's pretty much the same.

127
00:07:06.400 --> 00:07:10.420
The reason I copied this cuz there's
like some logic in there with the dates.

128
00:07:10.420 --> 00:07:14.830
When they get sent up in the string in
the URL parameter actually strings.

129
00:07:14.830 --> 00:07:17.860
Whereas they're saved in
the database as numbers so

130
00:07:17.860 --> 00:07:20.020
the quality check doesn't
work until you pass in.

131
00:07:20.020 --> 00:07:23.040
So that's what that is, but
as you can see for to get one.

132
00:07:24.780 --> 00:07:26.870
Here's what I really wanted to show you.

133
00:07:26.870 --> 00:07:27.710
Does this look familiar?

134
00:07:27.710 --> 00:07:34.398
request.query.id, let's take a look
at this page for id in a JSX file.

135
00:07:34.398 --> 00:07:39.250
Look at that, there's a query property
here where we also got the ID.

136
00:07:39.250 --> 00:07:40.040
It's the same thing.

137
00:07:41.700 --> 00:07:43.020
It's the exact same thing.

138
00:07:43.020 --> 00:07:44.960
So if you go here,
you also get this query.

139
00:07:44.960 --> 00:07:47.700
And the reason I'm saying that
is because if you used Express,

140
00:07:47.700 --> 00:07:52.630
typically, you would get
the ID from rec.params.

141
00:07:52.630 --> 00:07:55.920
Because it's a parameter in the URL and
not a query string.

142
00:07:55.920 --> 00:07:57.129
And that's where you would get it from.

143
00:07:57.129 --> 00:07:59.970
But in this case,
it's going to be on the query objects.

144
00:07:59.970 --> 00:08:02.650
There's not actually going to be
a params object inside of here.

145
00:08:02.650 --> 00:08:04.490
So that's a big difference.

146
00:08:04.490 --> 00:08:08.250
If you tried to do params, it would
just be like, bleah, it's undefined.

147
00:08:08.250 --> 00:08:09.590
So it's actually on the query, and

148
00:08:09.590 --> 00:08:13.200
that's the exact same thing on
the front end, which is also the query.

149
00:08:14.390 --> 00:08:15.730
And the parameters will be in there and

150
00:08:15.730 --> 00:08:18.530
there'll be the exact same format
as they are on the front end.

151
00:08:18.530 --> 00:08:21.570
So if you had a catch all this
will be an array of parameters.

152
00:08:21.570 --> 00:08:22.690
That'll be the same thing.

153
00:08:22.690 --> 00:08:27.390
So I think that uniformity and
that convention is just nailing it all.

154
00:08:27.390 --> 00:08:28.480
That's pretty dope.

155
00:08:28.480 --> 00:08:30.410
So anyway, I get the note.

156
00:08:30.410 --> 00:08:34.080
On the get request, if it's not a note
I'll 404, if it is I send it back.

157
00:08:34.080 --> 00:08:38.210
For patch I do the same thing,
I just merge whatever you sent up,

158
00:08:38.210 --> 00:08:39.750
and then I send it back.

159
00:08:39.750 --> 00:08:42.842
And then for delete,
I literally just splice it out of memory.

160
00:08:42.842 --> 00:08:45.350
That's it, nothing crazy here.

161
00:08:45.350 --> 00:08:48.105
So now we're able to do
some crud stuff on here.

162
00:08:48.105 --> 00:08:56.600
So if I take this ID here like this,
I should be able to say give me that.

163
00:08:56.600 --> 00:09:03.040
And looks like that broke because
resolver is not a function.

164
00:09:08.329 --> 00:09:10.330
What?

165
00:09:10.330 --> 00:09:12.770
I don't have a resolver in here.

166
00:09:12.770 --> 00:09:13.270
Let's see.

167
00:09:21.375 --> 00:09:27.590
Looks like some internal thing that
broke because of something I did.

168
00:09:27.590 --> 00:09:30.200
Let's just restart it and
see what happens.

169
00:09:31.494 --> 00:09:34.730
All right, so
now let's try to run this again.

170
00:09:34.730 --> 00:09:38.470
So if I do a get requests to this.

171
00:09:38.470 --> 00:09:39.838
Okay, I get the same.

172
00:09:39.838 --> 00:09:42.090
Wait, no, I get a not found this time.

173
00:09:42.090 --> 00:09:46.380
Okay, so obviously this is not gonna be
found because I just restarted the server.

174
00:09:46.380 --> 00:09:51.440
And I deleted every note in memory so
there's not gonna be any here, right?

175
00:09:51.440 --> 00:09:53.890
So I would have to create
some more like that.

176
00:09:55.070 --> 00:09:57.790
And like that,
maybe grab that ID like that.

177
00:09:57.790 --> 00:10:03.100
And then now I should be able to
do this and boom, there we go.

178
00:10:03.100 --> 00:10:05.530
So I was able to get that one to do.

179
00:10:05.530 --> 00:10:09.075
If I wanted to delete it, I could do this.

180
00:10:09.075 --> 00:10:16.130
I could say delete that single note,
and you can see it deleted it.

181
00:10:16.130 --> 00:10:21.470
And then the last one is an update,
which kinda looks like this.

182
00:10:21.470 --> 00:10:22.950
So I can take this ID here.

183
00:10:22.950 --> 00:10:26.480
And then I can do this,
change this to a patch.

184
00:10:28.910 --> 00:10:31.435
Put this ID here, and
then just offer an update like,

185
00:10:36.571 --> 00:10:40.030
New title.

186
00:10:40.030 --> 00:10:43.380
And then boom, new title, right?

187
00:10:43.380 --> 00:10:46.720
So super easy crud rest
app out of the gate.

188
00:10:46.720 --> 00:10:49.270
Didn't have to do anything but
make some files.

189
00:10:49.270 --> 00:10:52.860
Very simple, very easy,
works very well, deploys very easily.

190
00:10:54.200 --> 00:10:56.570
Now, any questions on that?

191
00:11:00.840 --> 00:11:03.568
Is anyone not impressed with Next.js yet?

192
00:11:03.568 --> 00:11:11.690
[LAUGH] Like this thing is I dunno,
it's crazy.

193
00:11:11.690 --> 00:11:14.560
I'm just thinking about when
they sat down and made this.

194
00:11:14.560 --> 00:11:18.316
Is this what they thought it was
gonna be or did it just turn into it?

195
00:11:18.316 --> 00:11:21.530
Because when I make open source, I'll have
an idea about something and I'll make it.

196
00:11:21.530 --> 00:11:24.744
And halfway through I'm like, wait, no,
wait, no, it's gonna do a lot more.

197
00:11:24.744 --> 00:11:28.710
And then like, it'll just like go into
something else and then I never finish it.

198
00:11:28.710 --> 00:11:30.180
But, [LAUGH] I don't know,

199
00:11:30.180 --> 00:11:33.160
I'm always just curious like how
people come up with this stuff.

200
00:11:34.180 --> 00:11:36.720
Usually if it's something good,
that person or

201
00:11:36.720 --> 00:11:39.680
that team experienced a lot
of pain before they did it.

202
00:11:39.680 --> 00:11:41.230
It's so much pain that they spent so

203
00:11:41.230 --> 00:11:44.070
much time making this because
that's how much pain they felt.

204
00:11:44.070 --> 00:11:47.200
So I'm always like, what did they have to
go through to make something like this?

205
00:11:47.200 --> 00:11:49.800
I feel bad for them, but
thankfully they did it for us.

206
00:11:49.800 --> 00:11:50.960
So awesome.

207
00:11:52.490 --> 00:11:55.010
All right, here's my favorite part.

208
00:11:55.010 --> 00:11:56.320
&gt;&gt; There's a question.

209
00:11:56.320 --> 00:11:57.110
&gt;&gt; Yes.

210
00:11:57.110 --> 00:12:00.100
&gt;&gt; Maybe you're gonna get to it but
interacting with your API or

211
00:12:00.100 --> 00:12:01.800
consuming your API and pages.

212
00:12:04.390 --> 00:12:06.370
&gt;&gt; Yeah, yeah, we're gonna get to that.

213
00:12:06.370 --> 00:12:09.440
I mean, technically right now,
you already know how to do that, right?

214
00:12:10.560 --> 00:12:14.060
If you know how to fetch content,
inside of a react.

215
00:12:14.060 --> 00:12:18.221
If you know how to hit an API inside
of a react component, then yeah,

216
00:12:18.221 --> 00:12:19.460
just hit your API.

217
00:12:19.460 --> 00:12:21.710
In this case, it's localhost:3000/api.

218
00:12:21.710 --> 00:12:24.762
You can do that anywhere in your
react components right now, and

219
00:12:24.762 --> 00:12:27.060
that'll be happening on the client.

220
00:12:27.060 --> 00:12:29.760
So I won't be covering that too
much because I think we all

221
00:12:29.760 --> 00:12:30.330
know how to do that.

222
00:12:30.330 --> 00:12:34.520
But what I will cover in this next section
is how to fetch data with Next.js'

223
00:12:34.520 --> 00:12:37.670
specific ways of fetching data,
and what they actually mean.

224
00:12:37.670 --> 00:12:41.235
I actually believe this next session
is what defines the Next.js.

225
00:12:41.235 --> 00:12:43.650
I think, you know, you have the pages.

226
00:12:43.650 --> 00:12:46.320
And I think that gives Next.js
some identity for sure.

227
00:12:46.320 --> 00:12:48.320
But other frameworks
are kinda doing that too.

228
00:12:48.320 --> 00:12:50.745
But this next section is literally,
I think,

229
00:12:50.745 --> 00:12:52.930
what defines the Next.js in my opinion.

230
00:12:52.930 --> 00:12:56.852
And I think it's one of the things they
spent most of the time on getting right,

231
00:12:56.852 --> 00:12:58.580
and I think they nailed it.

232
00:12:58.580 --> 00:13:00.440
So you're gonna see.

233
00:13:00.440 --> 00:13:02.535
But yeah, you could totally fetch
those in your components right now.

