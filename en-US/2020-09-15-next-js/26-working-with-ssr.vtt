WEBVTT

1
00:00:00.000 --> 00:00:03.393
So now we're just going to finish
up with this last section and

2
00:00:03.393 --> 00:00:06.470
get into some really important
topics about Next.js.

3
00:00:06.470 --> 00:00:10.796
And you'll be a certified Next.js
developer, if that's a thing.

4
00:00:10.796 --> 00:00:12.709
If it was, you would be one.

5
00:00:12.709 --> 00:00:17.099
So let's go in and talk about
working with server side rendering

6
00:00:17.099 --> 00:00:19.713
cuz I think this is always a big topic.

7
00:00:19.713 --> 00:00:22.825
And I think a lot of people
who aren't used to working

8
00:00:22.825 --> 00:00:27.510
with server side rendering in general
always have some of the same questions.

9
00:00:27.510 --> 00:00:32.821
Specifically, one of the biggest gotchas,
obviously people run into

10
00:00:32.821 --> 00:00:38.221
with server side rendering is that
either they created some component or

11
00:00:38.221 --> 00:00:44.443
they installed some component that's
using browser specific things, DOM APIs.

12
00:00:44.443 --> 00:00:47.542
And when they try to render it on
the server, they get an error, right?

13
00:00:47.542 --> 00:00:49.015
Because it's like document not defined,
window not defined,

14
00:00:49.015 --> 00:00:50.436
like all this stuff and it always just
seems to come back and bite them.

15
00:00:50.436 --> 00:00:55.459
And I was guilty,
I fall into that trap a lot when I

16
00:00:55.459 --> 00:01:00.743
was doing server side
rendering in the early days.

17
00:01:00.743 --> 00:01:05.128
So I just kind want to talk about that and
how Next.js gives you some tools to help

18
00:01:05.128 --> 00:01:07.889
you with that so
you don't have to do it yourself.

19
00:01:07.889 --> 00:01:10.402
Okay, so
we're doing server side rendering.

20
00:01:10.402 --> 00:01:15.192
Like I said, sometimes you just really
need to skip rendering some components

21
00:01:15.192 --> 00:01:17.670
sometimes for many different reasons.

22
00:01:17.670 --> 00:01:18.422
Here are a few.

23
00:01:18.422 --> 00:01:23.233
One, does that component have some
DOM API, window, navigator, GPS,

24
00:01:23.233 --> 00:01:27.359
I don't know, is using literally
the DOM API to do something?

25
00:01:27.359 --> 00:01:30.500
The data that it needs only
comes from the client side,

26
00:01:30.500 --> 00:01:34.409
like it comes from some client side
API call or something like that.

27
00:01:34.409 --> 00:01:38.092
And you're not handling the errors,
you don't have any default so

28
00:01:38.092 --> 00:01:40.165
either the data is there or it's not.

29
00:01:40.165 --> 00:01:42.732
So it'll just break on the server
side if there's no data.

30
00:01:42.732 --> 00:01:45.237
And then for something else.

31
00:01:45.237 --> 00:01:47.852
I don't know, maybe you literally just
don't want to render this thing on

32
00:01:47.852 --> 00:01:49.777
a server for whatever reason,
you have your reasons.

33
00:01:49.777 --> 00:01:51.618
So if that's the case,

34
00:01:51.618 --> 00:01:56.970
Next.js gives us something that
actually works very well for this.

35
00:01:56.970 --> 00:02:00.956
And it's not something that they created,
they just supported and extended it.

36
00:02:00.956 --> 00:02:02.851
And that's gonna be called
the dynamic imports.

37
00:02:02.851 --> 00:02:06.901
So if you've never seen or
heard of dynamic imports,

38
00:02:06.901 --> 00:02:09.430
it's something new to the spec.

39
00:02:09.430 --> 00:02:12.072
You can get this in Webpack.

40
00:02:12.072 --> 00:02:16.752
You can get this with combination of
Webpack, Babel, things like that, and

41
00:02:16.752 --> 00:02:20.353
I'm pretty sure it's coming
to the browsers eventually.

42
00:02:20.353 --> 00:02:24.208
If it's not there already, I'm not keeping
up with a browser spec so I don't know.

43
00:02:24.208 --> 00:02:28.478
But basically it allows you to do
a dynamic import of a component.

44
00:02:28.478 --> 00:02:35.192
In this case, they're importing, or I,
I'm importing an add component here.

45
00:02:35.192 --> 00:02:38.942
So the way that it works is you
can pass an import statement,

46
00:02:38.942 --> 00:02:42.018
but this time it actually
looks like a function.

47
00:02:42.018 --> 00:02:44.184
So you import a function and
then you put a path.

48
00:02:44.184 --> 00:02:47.025
Now whatever the default is for

49
00:02:47.025 --> 00:02:52.603
this module is going to be
returned when this gets resolved.

50
00:02:52.603 --> 00:02:55.502
And then as an extension,
you can do ssr false,

51
00:02:55.502 --> 00:02:58.339
which means don't server
render this thing.

52
00:02:58.339 --> 00:03:02.116
So dynamic components basically
just don't get rendered,

53
00:03:02.116 --> 00:03:06.791
they don't get built, they don't
get bundled until they're accessed.

54
00:03:06.791 --> 00:03:11.346
So if you had this sponsored ad and
you put it here like I did,

55
00:03:11.346 --> 00:03:15.008
this won't get injected and
bundled, right?

56
00:03:15.008 --> 00:03:18.323
Basically this component is going to be
built by its own, it's gonna have its own

57
00:03:18.323 --> 00:03:20.973
file instead of being bundled in
with all the other components.

58
00:03:20.973 --> 00:03:26.556
It's gonna be treated like its own file,
kinda like a route would, a page.

59
00:03:26.556 --> 00:03:29.972
A page has its own file and
that's kinda how they're their own apps.

60
00:03:29.972 --> 00:03:34.234
By doing this dynamic import, you're
basically making this component its own

61
00:03:34.234 --> 00:03:37.616
file, and you're dynamically
importing it when you need it.

62
00:03:37.616 --> 00:03:42.361
And if you know how JSX works, whenever
you render a JSX component like this,

63
00:03:42.361 --> 00:03:46.019
what this boils down to is you
actually calling a function.

64
00:03:46.019 --> 00:03:48.508
You're actually invoking this function and

65
00:03:48.508 --> 00:03:52.580
any prop that you pass on to it are going
to be parameters to that function.

66
00:03:52.580 --> 00:03:57.055
So if this compiled down to JavaScript,
you're actually calling one, two, three,

67
00:03:57.055 --> 00:03:59.465
four, you're calling four functions here.

68
00:03:59.465 --> 00:04:02.663
So when this function gets called,
then it renders that component.

69
00:04:02.663 --> 00:04:05.207
It's very dynamic in that case, and
then that's where it gets fetched.

70
00:04:05.207 --> 00:04:07.167
So if you go open the network tab,

71
00:04:07.167 --> 00:04:11.656
you might actually see this component
being fetched when it gets rendered.

72
00:04:11.656 --> 00:04:14.548
Because that's when it was used and
that's when it was called.

73
00:04:14.548 --> 00:04:15.870
So that's a dynamic import.

74
00:04:15.870 --> 00:04:17.478
And by putting ssr false,

75
00:04:17.478 --> 00:04:21.512
we can skip out on having something
being rendered on the server.

76
00:04:21.512 --> 00:04:26.021
So for instance, if we have a component
like, let's just make something right

77
00:04:26.021 --> 00:04:29.673
quick inside of the index, or
actually I'll go to components.

78
00:04:29.673 --> 00:04:34.599
And I'll make a new file here and

79
00:04:34.599 --> 00:04:39.344
I'll call it, I don't know,

80
00:04:39.344 --> 00:04:46.473
browser.tsx so we'll have something here.

81
00:04:46.473 --> 00:04:53.693
We'll import React from react, like that.

82
00:04:53.693 --> 00:05:00.615
And we'll say exports default and
we'll put a component in here,

83
00:05:03.755 --> 00:05:07.886
And actually,
I'll just put something simple,

84
00:05:12.309 --> 00:05:14.446
Browser component like that, right?

85
00:05:14.446 --> 00:05:19.784
So we got a browser component but
then maybe let's

86
00:05:19.784 --> 00:05:24.878
say we did some window.Thing up here,
right?

87
00:05:24.878 --> 00:05:25.563
We did some window stuff on here so

88
00:05:25.563 --> 00:05:26.698
what's something that I can
do on window right quick?

89
00:05:26.698 --> 00:05:31.046
Actually, I'll just log the window,

90
00:05:31.046 --> 00:05:34.999
just console.log or even better,

91
00:05:34.999 --> 00:05:40.813
document.query or
document.body, there we go.

92
00:05:40.813 --> 00:05:42.915
That's a good one, so we can do that.

93
00:05:44.091 --> 00:05:48.964
The document.body and if I were to

94
00:05:48.964 --> 00:05:54.676
import this into a page which is rendered

95
00:05:54.676 --> 00:05:59.557
on a server, so let me go to a page.

96
00:05:59.557 --> 00:06:06.323
Let's go to the index page here and
I just say import the Browser component,

97
00:06:06.323 --> 00:06:10.882
src/components/browser, like that, right?

98
00:06:10.882 --> 00:06:15.460
And I'm just going to import that file and
if Next.js doesn't polyfill document,

99
00:06:15.460 --> 00:06:19.458
which they probably do, they might just
pollyfill it and just null that so

100
00:06:19.458 --> 00:06:20.634
it might still work.

101
00:06:20.634 --> 00:06:24.103
But if they don't, this would break, so.

102
00:06:28.460 --> 00:06:30.936
Yeah, it looks like they
might polyfill it, let's see.

103
00:06:30.936 --> 00:06:33.966
Yeah, so I think we're good there.

104
00:06:33.966 --> 00:06:37.727
But if I did something super
browser related in here,

105
00:06:37.727 --> 00:06:43.591
I can't think of a good example right now
without making a complicated component.

106
00:06:43.591 --> 00:06:47.571
But anyway, if I wanted to skip this
from being rendered on the server for

107
00:06:47.571 --> 00:06:51.303
whatever reason, then what I can do
is just go into that index page.

108
00:06:51.303 --> 00:06:58.510
And instead of importing
the browser like that,

109
00:06:58.510 --> 00:07:05.727
I can say,
import dynamic from next/dynamic.

110
00:07:05.727 --> 00:07:09.918
And then what I can do is say,

111
00:07:09.918 --> 00:07:16.391
BrowserComponent = dynamic, like that.

112
00:07:16.391 --> 00:07:19.679
And then that takes a function
which returns a promise, and

113
00:07:19.679 --> 00:07:22.193
the imports function
does return a promise.

114
00:07:22.193 --> 00:07:27.596
So I can say src/components,

115
00:07:27.596 --> 00:07:33.008
brower, [LAUGH] should be browser.

116
00:07:33.008 --> 00:07:34.745
Okay, so I'll do that.

117
00:07:34.745 --> 00:07:38.041
And then I could render that component,
right?

118
00:07:38.041 --> 00:07:42.187
So I could say, wait,

119
00:07:42.187 --> 00:07:45.944
let me add a ssr false.

120
00:07:45.944 --> 00:07:52.739
There we go, and then I can add
the browser component BrowerComponent.

121
00:07:55.287 --> 00:07:57.087
And boom, it shows up here.

122
00:07:57.087 --> 00:08:01.930
Everything's good to go but

123
00:08:01.930 --> 00:08:07.588
it didn't render on the server.

124
00:08:07.588 --> 00:08:13.838
And the way that you could check that out
is if you were to inspect the output,

125
00:08:13.838 --> 00:08:17.658
right, the actual HTML,
so oops, so if I go,

126
00:08:20.127 --> 00:08:24.886
Here, and it's probably gonna look like
mush, I don't know why I'm looking at it.

127
00:08:24.886 --> 00:08:29.567
But if I go to Doc, or actually,
I think you could just

128
00:08:29.567 --> 00:08:33.945
look at the source, yeah,
that might be better.

129
00:08:37.277 --> 00:08:41.345
Okay, yeah, it was not showing up there,
but if I look for

130
00:08:41.345 --> 00:08:45.761
This is my really nice app,
I'm pretty sure that will show up.

131
00:08:50.096 --> 00:08:54.191
There we go, so
this is my really nice app but

132
00:08:54.191 --> 00:08:58.189
what you won't see is BrowserComponent.

133
00:09:02.466 --> 00:09:07.736
Right, that's not there, cuz that
didn't get rendered on the server so

134
00:09:07.736 --> 00:09:11.566
it's not there,
it's injected at execution time.

135
00:09:11.566 --> 00:09:16.241
So that's how you can skip server side
rendering, which is a really good thing,

136
00:09:16.241 --> 00:09:20.991
specifically working with third party
libraries that use browser specific stuff

137
00:09:20.991 --> 00:09:23.149
inside of something like Next.js.

138
00:09:23.149 --> 00:09:24.712
&gt;&gt; Can you put a fallback UI
like React.lazy works for

139
00:09:24.712 --> 00:09:26.360
while the dynamic component
is loading client side.

140
00:09:26.360 --> 00:09:33.200
&gt;&gt; Yeah,
you can put a fallback UI inside of here.

141
00:09:33.200 --> 00:09:36.436
I want to say that it takes
a fallback prop here.

142
00:09:36.436 --> 00:09:42.815
Actually, I've never used it so I guess
we can find out together right now.

143
00:09:42.815 --> 00:09:46.657
I'll give you the wrong information so
let's see, next.js/dynamic.

144
00:09:52.494 --> 00:09:54.029
Component, if I can spell.

145
00:10:01.142 --> 00:10:04.752
Or loading, there we go,
custom loading, yeah, so it's loading.

146
00:10:04.752 --> 00:10:06.613
You put loading and
you can put a component.

147
00:10:06.613 --> 00:10:07.520
&gt;&gt; Awesome, thank you
&gt;&gt; Yeah.

