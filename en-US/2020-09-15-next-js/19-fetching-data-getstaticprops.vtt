WEBVTT

1
00:00:00.140 --> 00:00:04.744
All right, this part is going to be,
a lot coming at you.

2
00:00:04.744 --> 00:00:07.058
There's a lot to understand here,
but when you do,

3
00:00:07.058 --> 00:00:10.016
I think you'll really start to
understand the power of Next.js.

4
00:00:10.016 --> 00:00:13.263
So, let's talk about
fetching data with Next.js.

5
00:00:13.263 --> 00:00:15.937
So there are many ways to fetch data, but

6
00:00:15.937 --> 00:00:21.443
it's really gonna depend on when the data
is available, when do you need the data,

7
00:00:21.443 --> 00:00:26.418
and what you're gonna do with it is
gonna determine how you fetch the data.

8
00:00:26.418 --> 00:00:28.857
Cuz you're gonna have
a lot of options here.

9
00:00:28.857 --> 00:00:33.687
So if we just start with what you already
know, which is what I was saying earlier,

10
00:00:33.687 --> 00:00:37.047
is that, you can fetch data
on the client side right now,

11
00:00:37.047 --> 00:00:39.865
using any mechanism you
already using Reacts.

12
00:00:39.865 --> 00:00:43.929
I mean if you've built a client side React
app, before, how do you fetch data there,

13
00:00:43.929 --> 00:00:45.183
you can do the same thing.

14
00:00:45.183 --> 00:00:48.138
Because once you're inside of react,
you're inside of React,

15
00:00:48.138 --> 00:00:51.628
you have nothing to do with Next.js,
once the browser is running your code,

16
00:00:51.628 --> 00:00:52.882
it's the output of React.

17
00:00:52.882 --> 00:00:56.918
So you can do whatever you want there
Next.js doesn't change the behavior,

18
00:00:56.918 --> 00:01:01.141
of how your components execute doesn't
change that, so that's just React, so

19
00:01:01.141 --> 00:01:02.406
that doesn't change.

20
00:01:02.406 --> 00:01:04.710
So hooks, things like that still work.

21
00:01:04.710 --> 00:01:09.240
Speaking of that, I do recommend
checking out something called SWR,

22
00:01:09.240 --> 00:01:12.562
which is also made by Vercel and
the Next.js team.

23
00:01:12.562 --> 00:01:16.457
It's a hook that does a lot of stuff for
you when it comes to fetching data client

24
00:01:16.457 --> 00:01:19.112
side and React query pretty
much does the same thing,

25
00:01:19.112 --> 00:01:22.913
they just do it slightly different,
they're both really good libraries.

26
00:01:22.913 --> 00:01:26.499
Highly recommend checking them out for
your client side data fetching needs,

27
00:01:26.499 --> 00:01:28.633
I don't use anything but
either one of these.

28
00:01:28.633 --> 00:01:33.536
I don't know how I use anything before,
because it just changes everything, so

29
00:01:33.536 --> 00:01:34.412
check it out.

30
00:01:34.412 --> 00:01:39.634
And the other thing is that's really
beautiful that Next.js gives us is

31
00:01:39.634 --> 00:01:45.370
automatically injects the fetch function
into your environment server side,

32
00:01:45.370 --> 00:01:46.754
and on the client.

33
00:01:46.754 --> 00:01:50.416
So you don't have to worry
about installing Axios or

34
00:01:50.416 --> 00:01:55.172
affects polyfill or isomorphic fetch,
you don't have to do that.

35
00:01:55.172 --> 00:01:59.372
It injects it globally on the client and
the browser, I'm sorry, on the client and

36
00:01:59.372 --> 00:02:02.675
the server and if the browser
doesn't have it, it polyfills it.

37
00:02:02.675 --> 00:02:07.431
So, yeah, that's free, that's a global for
you, you're good to go,

38
00:02:07.431 --> 00:02:12.497
you can fetch data immediately just use
fetch in any environment in Next.js,

39
00:02:12.497 --> 00:02:15.130
it just works, so that's really good.

40
00:02:15.130 --> 00:02:19.528
Cool so now, for fetching data
ahead of time because we talked

41
00:02:19.528 --> 00:02:23.008
about fetching data on the client side,
right?

42
00:02:23.008 --> 00:02:26.225
That's fetching data at
runtime in the client.

43
00:02:26.225 --> 00:02:29.391
Now, if you wanna fetch
data ahead of time,

44
00:02:29.391 --> 00:02:32.993
basically you got three
different methods here.

45
00:02:32.993 --> 00:02:36.778
And we're gonna talk about all these in
as much detail as I can before we start

46
00:02:36.778 --> 00:02:39.512
getting to writing the code and
we will write the code.

47
00:02:39.512 --> 00:02:43.629
But we're just gonna talk about it before
we start doing it because I really want

48
00:02:43.629 --> 00:02:44.807
you to understand it.

49
00:02:44.807 --> 00:02:49.253
So static data,
all of these methods above here, so

50
00:02:49.253 --> 00:02:54.815
getStaticProps, getStaticPaths,
and getServerSideProps,

51
00:02:54.815 --> 00:02:58.769
all of these are for
prerendering pages only.

52
00:02:58.769 --> 00:03:02.344
Right, so you're never gonna use these
methods when you get to them inside of

53
00:03:02.344 --> 00:03:04.498
a component, they're only meant for pages.

54
00:03:04.498 --> 00:03:08.188
So pages were not only there to help
you create routes in the browser, but

55
00:03:08.188 --> 00:03:10.864
they actually have some
significance to Next.js.

56
00:03:10.864 --> 00:03:14.597
I kind of hinted at earlier, when I said,
you can think of a page as its own app,

57
00:03:14.597 --> 00:03:18.411
and that's because it is, because its
code split, it's its own entry point.

58
00:03:18.411 --> 00:03:22.521
It's actually its own standalone app,
it doesn't really rely

59
00:03:22.521 --> 00:03:27.315
on any of the other pages, to survive,
I mean, technically it could run,

60
00:03:27.315 --> 00:03:31.899
but yeah, it might rely on some
routing conditionals and stuff there.

61
00:03:31.899 --> 00:03:33.969
But yeah, it's its own app.

62
00:03:33.969 --> 00:03:39.113
So these methods here, are meant for
pre-rendering pages only.

63
00:03:39.113 --> 00:03:43.086
And like I said, by default Next.js
pre-renders every single page, every page

64
00:03:43.086 --> 00:03:47.232
gets pre-rendered, no matter how you build
it by default, no matter if you want data

65
00:03:47.232 --> 00:03:51.400
or not, it's gonna pre-render it to HTML,
which is a really, really big benefit.

66
00:03:51.400 --> 00:03:57.193
And that's why you see that little
battery icon in the bottom right of your

67
00:03:57.193 --> 00:04:03.370
Next.js app when you go to it like that
pre-render page so it takes you there.

68
00:04:03.370 --> 00:04:05.971
So that happens for you automatically.

69
00:04:05.971 --> 00:04:10.180
Now, if you wanna fetch data during that
pre-render, this is where it kinda gets,

70
00:04:10.180 --> 00:04:11.496
you gotta really decide.

71
00:04:11.496 --> 00:04:15.260
So the first one we're gonna talk
about is get static props on a page.

72
00:04:15.260 --> 00:04:19.950
So, get static props basically looks like
this, in any single page, so in this case,

73
00:04:19.950 --> 00:04:23.826
in this index page here, I have a page,
it's got some JSX or whatever.

74
00:04:23.826 --> 00:04:27.421
And I'm exporting a function
called getStaticProps.

75
00:04:27.421 --> 00:04:30.938
And basically the way it
getStaticProps works is,

76
00:04:30.938 --> 00:04:35.843
you return an object with a props
function or I'm sorry a props method or

77
00:04:35.843 --> 00:04:39.522
props property, and
whatever you put in that props,

78
00:04:39.522 --> 00:04:44.967
that's what's gonna get injected into
your page on the client side, right?

79
00:04:44.967 --> 00:04:46.719
So that's what's going to be here.

80
00:04:46.719 --> 00:04:51.269
So basically, you can do whatever you want
here it is an async function, it's only

81
00:04:51.269 --> 00:04:55.961
gonna be executed in a node environment,
it's never gonna be executed in a browser.

82
00:04:55.961 --> 00:05:00.442
In fact, this function doesn't even
get bundled with this code, so

83
00:05:00.442 --> 00:05:02.760
even though it's in the same file,

84
00:05:02.760 --> 00:05:07.264
it actually gets stripped out before
the browser bundle gets built.

85
00:05:07.264 --> 00:05:10.150
So it doesn't even get shipped with
the browser code even though it's in

86
00:05:10.150 --> 00:05:10.774
the same file.

87
00:05:10.774 --> 00:05:14.606
So Next.js is doing some really heavy
lifting here to optimize this experience,

88
00:05:14.606 --> 00:05:16.001
which I think is really cool.

89
00:05:16.001 --> 00:05:19.221
So yeah, this will need to get shipped,
which I think is really dope.

90
00:05:19.221 --> 00:05:23.807
So basically, you can do whatever you want
here, you can do all different types of

91
00:05:23.807 --> 00:05:28.076
things, pretty much whatever you want
here to get whatever props you need.

92
00:05:28.076 --> 00:05:32.373
So in this case, maybe you wanted to,
I don't know, this was a CMS, and

93
00:05:32.373 --> 00:05:35.823
you wanted to get some content
from a CMS to get the title and

94
00:05:35.823 --> 00:05:39.577
the hero, and the CTA text and
button colors, all that stuff.

95
00:05:39.577 --> 00:05:43.104
You can make a call to your CMS and
inject the results into your props.

96
00:05:43.104 --> 00:05:47.340
This is very similar to
Gatsby's data sourcing, right?

97
00:05:47.340 --> 00:05:50.358
So if you do Gatsby you install
like a source plug in and

98
00:05:50.358 --> 00:05:54.044
then that adds it to your content
mesh graph, and then you can make

99
00:05:54.044 --> 00:05:57.619
a static query in the Gatsby page and
you can do stuff like that.

100
00:05:57.619 --> 00:06:02.203
It's the same way, but this is where
I would say it's a lot easier with

101
00:06:02.203 --> 00:06:04.935
Next.js because there's no overhead.

102
00:06:04.935 --> 00:06:08.253
There's no GraphQL,
there's no source plugin,

103
00:06:08.253 --> 00:06:12.583
it's just write a function that
returns some props, that's it.

104
00:06:12.583 --> 00:06:15.594
You can do whatever you want here,
we don't care, and it executes on Node.

105
00:06:15.594 --> 00:06:17.865
So in my opinion,
it's a lot easier to understand,

106
00:06:17.865 --> 00:06:20.512
but yeah you do give up some
things that Gatsby does give you.

107
00:06:20.512 --> 00:06:25.118
So yeah, pretty easy here.

108
00:06:25.118 --> 00:06:27.826
Basically, here's a deep dive on it,

109
00:06:27.826 --> 00:06:32.430
the results of this function
are basically saved into a JSON file.

110
00:06:32.430 --> 00:06:37.270
And then at runtime when you
navigate to this page, in this case,

111
00:06:37.270 --> 00:06:41.582
the index page of your app,
that JSON file the results that

112
00:06:41.582 --> 00:06:45.552
are gonna be injected after
props into here, right?

113
00:06:45.552 --> 00:06:48.737
That's the hydration phase,
that's what rehydration means.

114
00:06:48.737 --> 00:06:50.667
So I think that's really exciting, and

115
00:06:50.667 --> 00:06:53.899
you can look at that if you go look
at the output of your Next.js app,

116
00:06:53.899 --> 00:06:56.929
you'll see like a whole bunch of
JSON files in there with data.

117
00:06:56.929 --> 00:06:59.845
It's this, it's this data that
you're fetching server side,

118
00:06:59.845 --> 00:07:02.708
it gets saved as a JSON file,
then it gets injected at runtime and

119
00:07:02.708 --> 00:07:04.208
then cached and stuff like that.

120
00:07:04.208 --> 00:07:07.970
So that's how it goes from server side,
to the client side.

121
00:07:07.970 --> 00:07:11.126
And I think that's a really
good technique because,

122
00:07:11.126 --> 00:07:15.756
I've actually created server side
frameworks before I helped create Angular

123
00:07:15.756 --> 00:07:18.788
universal, and
the way that we did it was not that.

124
00:07:18.788 --> 00:07:23.537
So I think this is a much
better way than what we did,

125
00:07:23.537 --> 00:07:26.304
so I give them props for that.

126
00:07:26.304 --> 00:07:30.995
This function and all other data functions
that we're gonna talk about, like I said,

127
00:07:30.995 --> 00:07:34.850
will only ever run on the server, so
if you're not thinking there yet,

128
00:07:34.850 --> 00:07:39.311
that literally means you can do whatever
you would normally do on a server in here.

129
00:07:39.311 --> 00:07:42.183
So, file system work,
you wanna read the file system?

130
00:07:42.183 --> 00:07:45.615
Cool, you can access process.current
working directory inside of here,

131
00:07:45.615 --> 00:07:49.055
you can access the file system, you can
do whatever you want inside of here.

132
00:07:49.055 --> 00:07:53.903
Connect to the DB, crawl a website
literally anything you wanna do in

133
00:07:53.903 --> 00:07:59.599
the server you can do in this function
that's in the same file as your component.

134
00:07:59.599 --> 00:08:04.126
So that's to me is really powerful because
you have all the mechanism all the logic

135
00:08:04.126 --> 00:08:08.140
that this page depends on, for
whatever data is living right next to it.

136
00:08:08.140 --> 00:08:12.742
So super powerful and only ever runs
on the server, so I really like that.

137
00:08:12.742 --> 00:08:17.356
The other thing is that that function
is gonna receive a context object, so

138
00:08:17.356 --> 00:08:19.786
let me just go through that real quick.

139
00:08:19.786 --> 00:08:22.810
So we'll just do some stuff, let me open,

140
00:08:22.810 --> 00:08:27.515
I'll go inside this index file right here,
and I'll say export,

141
00:08:30.796 --> 00:08:39.196
Function getStaticProps like that.

142
00:08:39.196 --> 00:08:43.110
And then you're gonna get this
context object, like this.

143
00:08:43.110 --> 00:08:48.093
And I'll just console log this, so
you can see what I'm talking about, And

144
00:08:48.093 --> 00:08:53.795
I just need to satisfy oops, There we go.

145
00:08:53.795 --> 00:08:57.701
I just need to satisfy the return
constraint series, I'll put props, and

146
00:08:57.701 --> 00:08:59.317
I'm not gonna pass any props.

147
00:08:59.317 --> 00:09:03.880
So just by doing that, I automatically
get some extra functionality, so

148
00:09:03.880 --> 00:09:05.729
I'm just gonna run dev that.

149
00:09:08.751 --> 00:09:14.709
And then now you can see, nothing really
logged here, so I'm gonna go here,

150
00:09:14.709 --> 00:09:21.416
refresh this, and when I actually went to
the page, that's when it actually logged.

151
00:09:21.416 --> 00:09:23.176
So let's talk about that for a little bit.

152
00:09:23.176 --> 00:09:26.956
The reason it didn't log when I built it,
is because we're in dev mode, and

153
00:09:26.956 --> 00:09:29.566
it's using server side
rendering during dev mode.

154
00:09:29.566 --> 00:09:33.471
Server side rendering was we'll
really talk about detail soon,

155
00:09:33.471 --> 00:09:38.235
renders when you hit the request, when
you go to that route, then it computes.

156
00:09:38.235 --> 00:09:40.772
It only computes when you
do a request to the route,

157
00:09:40.772 --> 00:09:42.551
it doesn't compute ahead of time.

158
00:09:42.551 --> 00:09:46.205
So it's a little different than like
static rendering, which renders at build

159
00:09:46.205 --> 00:09:49.548
time, so that's why that didn't log
until we actually went to the URL.

160
00:09:49.548 --> 00:09:52.931
And you can see right here, the context
object is actually just an empty object,

161
00:09:52.931 --> 00:09:54.444
there's literally nothing here.

162
00:09:54.444 --> 00:09:58.321
And the reason that log sizes,
is I hit like a refresh, and

163
00:09:58.321 --> 00:10:01.501
that's because there's
nothing to put here.

164
00:10:01.501 --> 00:10:05.067
The content objects in the case of
getStaticProps only really contains one

165
00:10:05.067 --> 00:10:08.973
important thing, the other things are new
features with Next.js that I probably

166
00:10:08.973 --> 00:10:12.046
won't be talking about,
which is like their preview feature.

167
00:10:12.046 --> 00:10:15.378
But the one that's really
important is gonna be the.params.

168
00:10:15.378 --> 00:10:20.067
But, I don't have any params,
in this file, it's just an index

169
00:10:20.067 --> 00:10:24.775
file there are no params in this URL,
so there are no params here.

170
00:10:24.775 --> 00:10:27.540
So there's no way I can
get them at the same time,

171
00:10:27.540 --> 00:10:32.195
because this is executed on the server,
and it will be executed at build time, you

172
00:10:32.195 --> 00:10:36.850
won't actually have access to the params
because the params didn't happen yet,

173
00:10:36.850 --> 00:10:39.027
you weren't even in the browser yet.

174
00:10:39.027 --> 00:10:43.113
Like if you're running this and
you're building for production, and

175
00:10:43.113 --> 00:10:47.950
this thing is being statically built,
because Next.js we'll run this function at

176
00:10:47.950 --> 00:10:52.335
build time when you go to production,
you haven't even gotten params yet.

177
00:10:52.335 --> 00:10:54.779
This hasn't even been in the browser
just on your machine, so

178
00:10:54.779 --> 00:10:56.057
where did the params come from?

179
00:10:56.057 --> 00:10:57.418
How do they get here?

180
00:10:57.418 --> 00:11:02.295
Well that leads us to the next function
in side of fetching data with Next.js.

