WEBVTT

1
00:00:00.060 --> 00:00:04.426
So I have this thing down here that kind
of walks through, when to use which mode.

2
00:00:04.426 --> 00:00:06.080
So I'm gonna walk through this real quick.

3
00:00:06.080 --> 00:00:11.190
So when to use what do you need data
at runtime but you don't need SSR?

4
00:00:11.190 --> 00:00:13.350
Then use client-side data fetching.

5
00:00:13.350 --> 00:00:15.270
So pretty simple there.

6
00:00:15.270 --> 00:00:19.620
Do you need data at runtime but
you do need SSR?

7
00:00:19.620 --> 00:00:21.110
Then use getServerSideProps.

8
00:00:22.750 --> 00:00:27.970
Do you have pages that rely on data that
is cachable and accessible at build time?

9
00:00:27.970 --> 00:00:29.150
Like from a CMS?

10
00:00:29.150 --> 00:00:32.420
Then getStaticProps.

11
00:00:32.420 --> 00:00:38.080
Do you have the same as above but
all the pages have dynamic URL parameters?

12
00:00:38.080 --> 00:00:39.580
Like slash ID?

13
00:00:39.580 --> 00:00:43.730
Then you need to do getStaticProps and
getStaticPaths at the same time.

14
00:00:44.940 --> 00:00:49.360
And that's pretty much it when
you wanna do those things.

15
00:00:49.360 --> 00:00:51.100
Any questions on that?

16
00:00:51.100 --> 00:00:56.570
&gt;&gt; Are there any issues with using
getServerSideProps and getStaticProps?

17
00:00:57.640 --> 00:01:01.072
Yeah, I know I've talked
about that somewhere.

18
00:01:01.072 --> 00:01:02.330
Yeah, literally I talked
about it over here.

19
00:01:02.330 --> 00:01:03.636
Okay.

20
00:01:03.636 --> 00:01:05.370
[LAUGH] Good.

21
00:01:05.370 --> 00:01:07.140
Yeah, I guess I can mention it right now.

22
00:01:07.140 --> 00:01:10.480
It's not recommended to use
getServerSideProps unless you

23
00:01:10.480 --> 00:01:12.240
absolutely need it.

24
00:01:12.240 --> 00:01:16.750
Like if you just absolutely need
server-side rendering then use it.

25
00:01:16.750 --> 00:01:20.650
But if you don't, don't do it,
just do client side data or

26
00:01:20.650 --> 00:01:23.780
find a way to getStaticProps
because even we getStaticProps

27
00:01:23.780 --> 00:01:26.400
you can still have a hybrid page
which you'll see in a minute.

28
00:01:26.400 --> 00:01:28.710
You can still render some
stuff on the server, and

29
00:01:28.710 --> 00:01:30.390
then do the rest on the client.

30
00:01:30.390 --> 00:01:32.190
You can opt in or
opt out whenever you want.

31
00:01:32.190 --> 00:01:36.430
There's no either or,
the only either or situation would be

32
00:01:36.430 --> 00:01:40.620
either you'd use getStaticProps or
you use getServerSideProps.

33
00:01:40.620 --> 00:01:43.640
You can't use them both,
we use either or one of these, and

34
00:01:43.640 --> 00:01:46.320
then static paths goes with static props.

35
00:01:46.320 --> 00:01:47.220
So yeah,

36
00:01:47.220 --> 00:01:50.910
I don't recommend using getServerSideProps
unless you absolutely have to.

37
00:01:50.910 --> 00:01:54.620
So in a condition where you
would have to it would be like

38
00:01:54.620 --> 00:01:55.900
I have these dynamic pages.

39
00:01:58.200 --> 00:02:00.270
It's like data it's always been updated.

40
00:02:00.270 --> 00:02:03.080
So I can't get it at build time,
because maybe it's like a Twitter feed or

41
00:02:03.080 --> 00:02:04.350
something like that.

42
00:02:04.350 --> 00:02:06.960
But I need it to be indexed as well.

43
00:02:06.960 --> 00:02:10.330
So it's dynamic data that always changes
but I also need it to be indexed and

44
00:02:10.330 --> 00:02:12.590
is like, okay,
maybe you need server-side rendered.

45
00:02:12.590 --> 00:02:13.730
You probably need server-side rendering.

46
00:02:13.730 --> 00:02:17.330
But I would say most of the time you
don't need server side rendering.

47
00:02:17.330 --> 00:02:20.250
If most of the time of your data
is really that dynamic, then

48
00:02:20.250 --> 00:02:24.540
you would just do client-side fetching and
hope that the crawler kind of catches it.

49
00:02:24.540 --> 00:02:30.160
But I would get some scenarios would be
like, let's say I'm a car review website.

50
00:02:30.160 --> 00:02:33.840
And we have tons of car reviews and
we have ads and stuff everywhere.

51
00:02:33.840 --> 00:02:36.370
Well, yeah, we might need
server-side rendering for that.

52
00:02:36.370 --> 00:02:39.380
Because maybe building all those pages
are really expensive and takes too long.

53
00:02:39.380 --> 00:02:41.120
So server-side rendering is better.

54
00:02:41.120 --> 00:02:42.160
You want it to be indexed,

55
00:02:42.160 --> 00:02:45.520
you want it to show up on social media,
you want those ads to populate.

56
00:02:45.520 --> 00:02:49.550
But at the same time all that
logic is computed at runtime, so

57
00:02:49.550 --> 00:02:51.540
maybe server-side rendering is good for
that.

58
00:02:51.540 --> 00:02:53.930
But yeah most of the time,
no, probably not.

59
00:02:53.930 --> 00:02:56.280
&gt;&gt; How would you think
about authentication?

60
00:02:56.280 --> 00:02:58.850
Where would you put it?

61
00:02:58.850 --> 00:03:01.872
So there's two types of authentication,
right?

62
00:03:01.872 --> 00:03:04.130
We're talking authenticating API's and

63
00:03:04.130 --> 00:03:07.830
then we're talking about
authenticating front end routes.

64
00:03:07.830 --> 00:03:14.950
Authenticating front end routes is
a very similar to what you would do now.

65
00:03:14.950 --> 00:03:19.521
In fact, I don't think I do anything
different with next.js when authenticating

66
00:03:19.521 --> 00:03:22.408
a front end route than what
I do currently right now.

67
00:03:22.408 --> 00:03:27.280
Right now what I do is I use a hook to
check to see if someone's authenticated.

68
00:03:27.280 --> 00:03:29.190
And any page that I want
to be authenticated,

69
00:03:29.190 --> 00:03:32.108
the first thing I do is I use the hook
to see they're authenticated and

70
00:03:32.108 --> 00:03:34.185
they're not I redirect
them to the sign in page.

71
00:03:34.185 --> 00:03:36.282
So you still can do that on the front end.

72
00:03:36.282 --> 00:03:39.591
If you've ever done,
I think a lot of people have used routers,

73
00:03:39.591 --> 00:03:43.640
features on react to use front end
authentication, and that's why they might

74
00:03:43.640 --> 00:03:47.410
be asking the question because
there's no router configuration here.

75
00:03:47.410 --> 00:03:48.960
So where do I do that?

76
00:03:48.960 --> 00:03:50.710
I use a hook.

77
00:03:50.710 --> 00:03:52.932
And I've always used the hook,
I even did about create react app.

78
00:03:52.932 --> 00:03:56.620
Once I put a hook in there that
checks wherever your JWT is,

79
00:03:56.620 --> 00:03:58.480
wherever your cookies,
whatever your authentication logic is,

80
00:03:58.480 --> 00:04:00.520
even if you got to hit
the server every time.

81
00:04:00.520 --> 00:04:02.960
I checked there to see if
you're authenticated and

82
00:04:02.960 --> 00:04:05.400
redirected to a 404 and
that's it for client side.

83
00:04:05.400 --> 00:04:07.450
And that's not specific to Next.js.

84
00:04:07.450 --> 00:04:11.627
For server side,
if you're talking about authenticating one

85
00:04:11.627 --> 00:04:16.432
of these API routes that we have,
then if you're using next-connect,

86
00:04:16.432 --> 00:04:20.481
it's very similar to what you
would normally do on express.

87
00:04:20.481 --> 00:04:22.598
So you would say app.u or .use and

88
00:04:22.598 --> 00:04:27.270
then you would just do your check
off middleware here, right?

89
00:04:27.270 --> 00:04:30.940
So if you have a check off middleware
that looks something like this.

90
00:04:32.770 --> 00:04:36.643
Const checkAuth takes a request
takes a response, right?

91
00:04:36.643 --> 00:04:37.738
Takes next.

92
00:04:37.738 --> 00:04:44.565
And then you would just say,
if req.headers.authorization, right?

93
00:04:44.565 --> 00:04:45.735
You would check here and

94
00:04:45.735 --> 00:04:49.361
then if they are you call it next if
they're not you respond with a 401 or

95
00:04:49.361 --> 00:04:52.890
whatever you wanna respond with and
that's how you lock down your API.

96
00:04:52.890 --> 00:04:55.037
So that's authentication as well.

97
00:04:55.037 --> 00:05:00.390
And then authentication inside
of one of these functions.

98
00:05:00.390 --> 00:05:04.230
Well these functions don't create
resources so there's no routes or

99
00:05:04.230 --> 00:05:05.520
anything in these functions.

100
00:05:05.520 --> 00:05:10.805
These functions car resources so
there really is no authentication here.

101
00:05:10.805 --> 00:05:15.805
But as far as getServerSideProps, you do
get access to the request object which

102
00:05:15.805 --> 00:05:18.560
does have access to the HTTP headers.

103
00:05:18.560 --> 00:05:22.260
So you could check the headers
of this request from the browser

104
00:05:22.260 --> 00:05:23.510
on getServerSideProps.

105
00:05:23.510 --> 00:05:26.000
So if you wanna target
authentication there,

106
00:05:26.000 --> 00:05:28.600
you can also do that there and
getServiceProps.

107
00:05:28.600 --> 00:05:31.260
You can't do that and
getStaticProps because it's not a server.

108
00:05:31.260 --> 00:05:33.460
It's running at build time,
it's not even in the browser yet.

109
00:05:33.460 --> 00:05:37.284
There's no concept of HTTP headers yet,
so you won't even need it there.

