WEBVTT

1
00:00:00.860 --> 00:00:05.941
So routing with pages in Next.js.

2
00:00:05.941 --> 00:00:10.857
When you're creating a vanilla React app,
you have to decide which routing library,

3
00:00:10.857 --> 00:00:12.550
which version you wanna use.

4
00:00:12.550 --> 00:00:15.419
And they're all really good and
there's new ones popping up every day.

5
00:00:15.419 --> 00:00:19.197
And you might argue that they are standard
ones out there everyone uses, but

6
00:00:19.197 --> 00:00:22.680
you still have to make that decision and
you still have to install it and

7
00:00:22.680 --> 00:00:24.059
you still have to set it up.

8
00:00:24.059 --> 00:00:25.428
And then there's many ways to set it up.

9
00:00:25.428 --> 00:00:28.537
And you gotta hope that everyone
on your team knows those ways and

10
00:00:28.537 --> 00:00:30.450
they researched it just as much as you.

11
00:00:30.450 --> 00:00:33.691
It's just a lot of overhead for
something so necessary.

12
00:00:33.691 --> 00:00:37.310
With Next.js,
you don't have to worry about that.

13
00:00:37.310 --> 00:00:39.354
They created the conventions, right?

14
00:00:39.354 --> 00:00:41.702
So this is convention over configuration.

15
00:00:41.702 --> 00:00:43.551
So if you follow their conventions,

16
00:00:43.551 --> 00:00:47.141
then everyone can actually benefit
from something like a nice router.

17
00:00:47.141 --> 00:00:50.227
And their convention is
actually just create a file.

18
00:00:50.227 --> 00:00:53.427
So to get started with the routing and
pages with Next.js,

19
00:00:53.427 --> 00:00:55.540
let's just head over to the code here.

20
00:00:55.540 --> 00:00:58.513
We're gonna open up, I'm gonna make a new
folder called Pages right on the root.

21
00:00:58.513 --> 00:01:03.526
And you'll notice that
you get this nice little

22
00:01:03.526 --> 00:01:07.925
thing here on VS Code, this little icon.

23
00:01:07.925 --> 00:01:09.875
And then inside here,
we're just gonna make a new file.

24
00:01:09.875 --> 00:01:11.739
I'm gonna call it index.jsx.

25
00:01:11.739 --> 00:01:14.210
You can put .js if you want.

26
00:01:14.210 --> 00:01:18.482
If you like TypeScript, we'll talk about
TypeScript later and how you do that

27
00:01:18.482 --> 00:01:22.895
with Next.js, but if you like, js,
you could put js, I'm just gonna put JSX.

28
00:01:22.895 --> 00:01:25.043
And then all I'm gonna do is import.

29
00:01:25.043 --> 00:01:26.996
I'm just gonna make
a vanilla React component.

30
00:01:26.996 --> 00:01:30.080
So nothing special here,
nothing specific to Next.js.

31
00:01:30.080 --> 00:01:32.062
I'm just gonna import React from react.

32
00:01:32.062 --> 00:01:36.348
I'm gonna make a Page component like this.

33
00:01:36.348 --> 00:01:40.048
And I'm just gonna have it return
a div that says Index Page like that.

34
00:01:40.048 --> 00:01:46.392
And the most important part is it needs
a default export that Page like that.

35
00:01:46.392 --> 00:01:48.066
So nothing special here.

36
00:01:48.066 --> 00:01:51.924
Once you do that,
if you're following along,

37
00:01:51.924 --> 00:01:56.657
you should now be able to use
this dev command that we have.

38
00:01:56.657 --> 00:01:58.833
So I'm just gonna go
back to my terminal here.

39
00:01:58.833 --> 00:02:00.231
And I'm gonna run yarn dev like that.

40
00:02:04.570 --> 00:02:10.481
And you can see it says compiled
successfully, which is a good sign.

41
00:02:10.481 --> 00:02:13.130
And right now it's on localhost 3000.

42
00:02:13.130 --> 00:02:15.521
So I'm just gonna open that up,
go to localhost 3000.

43
00:02:15.521 --> 00:02:18.510
You can see I have my Index page here,
right.

44
00:02:18.510 --> 00:02:20.204
And we got that for free.

45
00:02:20.204 --> 00:02:23.955
You notice, like I said, we didn't have
to set up a route or anything like that.

46
00:02:23.955 --> 00:02:28.696
All I did was put a index.jsx file in
the pages directory on the root of this

47
00:02:28.696 --> 00:02:32.461
application, and
I was able to get an index page for free.

48
00:02:32.461 --> 00:02:37.167
Very simple,
it doesn't get easier than that.

49
00:02:37.167 --> 00:02:38.575
Let's head back over to this.

50
00:02:38.575 --> 00:02:41.882
So like I said,
you should be able to navigate there.

51
00:02:41.882 --> 00:02:45.628
So now if we wanna do something
a little more complicated I guess,

52
00:02:45.628 --> 00:02:47.407
which are like nested routes.

53
00:02:47.407 --> 00:02:51.667
So if you want a path that looks something
like this, so we did the index, but

54
00:02:51.667 --> 00:02:54.731
what if we have something
like project/settings, or

55
00:02:54.731 --> 00:02:59.952
even something that's dynamic where it's
like, /user/ID, where ID is the parameter.

56
00:02:59.952 --> 00:03:03.662
Don't even worry,
we can do that too with Next.js.

57
00:03:03.662 --> 00:03:05.339
So this this part is gonna
be a little different.

58
00:03:05.339 --> 00:03:08.932
And this is very specific to Next.js,
I don't think I've seen any

59
00:03:08.932 --> 00:03:12.916
other framework take this exact
convention about how they do parameters.

60
00:03:12.916 --> 00:03:16.814
So Next.js is very unique in this case,
but it's actually pretty simple.

61
00:03:16.814 --> 00:03:21.308
And the way we can do that is
actually just create some folders.

62
00:03:21.308 --> 00:03:24.874
So for instance, let's say we
wanted to create some folders,

63
00:03:24.874 --> 00:03:28.124
or I'm sorry,
we wanted to create a route for our notes.

64
00:03:28.124 --> 00:03:29.878
So in this case, for our note taking app,

65
00:03:29.878 --> 00:03:33.102
we're gonna need the /notes route where
all of our notes are gonna load up.

66
00:03:33.102 --> 00:03:39.947
And then we're gonna need the /notes/ID,
where we load one note, right?

67
00:03:39.947 --> 00:03:41.589
So we're gonna need both of those routes.

68
00:03:41.589 --> 00:03:42.621
We already have the index.

69
00:03:42.621 --> 00:03:43.833
So we need to make both of these.

70
00:03:43.833 --> 00:03:48.651
So in order to do that, what we can do
is we can just head over to our pages.

71
00:03:48.651 --> 00:03:52.963
And then because both of these routes are
gonna be underneath the Notes app, because

72
00:03:52.963 --> 00:03:57.046
this is actually if you think of it,
it's actually like the index of the notes.

73
00:03:57.046 --> 00:03:58.860
So there's a file in
here that we have to use.

74
00:03:58.860 --> 00:04:00.818
And then in here, there's an ID property.

75
00:04:00.818 --> 00:04:04.079
So both of these are actually
underneath the notes path.

76
00:04:04.079 --> 00:04:08.689
So we need to create a folder
here called Notes like that.

77
00:04:08.689 --> 00:04:12.306
This is gonna tell the pages directory
that hey, this is a sub path,

78
00:04:12.306 --> 00:04:13.457
it's a nested path.

79
00:04:13.457 --> 00:04:16.867
And then to create the index for
that, I just put index.js, right.

80
00:04:16.867 --> 00:04:21.706
So whenever you create an index file
in a folder in the pages directory,

81
00:04:21.706 --> 00:04:26.400
it's gonna create the route for
that index of that sub path, right?

82
00:04:26.400 --> 00:04:29.820
And then what we can do is we
can just do the same thing.

83
00:04:29.820 --> 00:04:32.347
I'm gonna copy this,
I'm gonna paste it here.

84
00:04:32.347 --> 00:04:39.742
I'm just gonna call this the Notes
index path like that, okay?

85
00:04:39.742 --> 00:04:44.385
And then when it comes to creating
something dynamic, as in,

86
00:04:44.385 --> 00:04:47.703
we need a parameter or
something like that.

87
00:04:47.703 --> 00:04:50.682
Not query strings, because you don't
have to make routes for query strings,

88
00:04:50.682 --> 00:04:52.774
you can just use query strings
just like any other app.

89
00:04:52.774 --> 00:04:56.109
But for parameters, the way we can do that
with Next.js is we can use this syntax.

90
00:04:56.109 --> 00:04:58.195
So we can use these
brackets like an array.

91
00:04:58.195 --> 00:05:01.154
And then you can put
the name of the parameter.

92
00:05:01.154 --> 00:05:02.461
You can name the parameter
whatever you want.

93
00:05:02.461 --> 00:05:03.985
In this case, I'm going to call it ID,
and I'm gonna day .jsx.

94
00:05:03.985 --> 00:05:08.633
So what this is telling Next.js is that,
hey,

95
00:05:08.633 --> 00:05:14.923
this route is actually going to
have a parameter in it called ID.

96
00:05:14.923 --> 00:05:19.765
So if we follow the folders,
it's actually going be,

97
00:05:19.765 --> 00:05:23.145
the path to this will be /notes/ID.

98
00:05:23.145 --> 00:05:25.775
And that's what's gonna get loaded here.

99
00:05:25.775 --> 00:05:29.152
So I can just go ahead and
paste that in here.

100
00:05:29.152 --> 00:05:30.853
And I can say, Note page.

101
00:05:32.940 --> 00:05:34.161
Like that, right?

102
00:05:34.161 --> 00:05:36.935
So everybody following me so far?

103
00:05:36.935 --> 00:05:38.589
Any questions?

104
00:05:38.589 --> 00:05:39.461
Okay, cool.

105
00:05:39.461 --> 00:05:41.060
So, now if I have that, I can go here.

106
00:05:41.060 --> 00:05:43.545
And if I redirect to notes,

107
00:05:43.545 --> 00:05:48.632
you can see I'm in the note
index path like that, okay.

108
00:05:48.632 --> 00:05:53.024
And then if I go to notes/ some random ID,

109
00:05:53.024 --> 00:05:57.803
you can see I'm on the note page,
all right.

110
00:05:57.803 --> 00:05:59.345
Pretty straightforward.

111
00:05:59.345 --> 00:06:01.365
What happens if I try to
go to something else?

112
00:06:01.365 --> 00:06:03.156
We get a 404.

113
00:06:03.156 --> 00:06:06.356
So we get that for
free with Next.js as well.

114
00:06:06.356 --> 00:06:10.759
We get a nice, arguably a very
beautiful 404 page, in my opinion.

115
00:06:10.759 --> 00:06:13.725
I mean, just some simple stuff
like this is, I'm a big fan of.

116
00:06:13.725 --> 00:06:15.192
That's a nice 404 page.

117
00:06:15.192 --> 00:06:17.265
So we get that for free.

118
00:06:17.265 --> 00:06:19.801
So yeah, pretty cool there.

119
00:06:19.801 --> 00:06:24.732
Looking at this, you might have noticed
this battery pack looking icon here.

120
00:06:24.732 --> 00:06:26.546
I didn't put this here.

121
00:06:26.546 --> 00:06:29.495
And if you hover over it, it says
something about a pre rendered page.

122
00:06:29.495 --> 00:06:32.103
You can click it, it'll take you to some

123
00:06:32.103 --> 00:06:37.040
place that tells you about all types
of optimizations that they're doing.

124
00:06:37.040 --> 00:06:38.920
And we'll get to a lot
of this stuff later.

125
00:06:38.920 --> 00:06:43.688
But basically what this is doing,
it's letting you know that this page was

126
00:06:43.688 --> 00:06:47.708
optimized by Next.js, and
it was pre rendered ahead of time.

127
00:06:47.708 --> 00:06:51.465
The HTML was created before
it was sent to the server.

128
00:06:51.465 --> 00:06:53.362
So this didn't load on the client,

129
00:06:53.362 --> 00:06:57.613
your React component was actually rendered
on the server and sent down as HTML.

130
00:06:57.613 --> 00:06:59.007
And that's what this is telling you.

131
00:06:59.007 --> 00:07:00.547
Like, hey, this page was pre rendered.

132
00:07:00.547 --> 00:07:02.203
It's letting you know that this was it.

133
00:07:02.203 --> 00:07:04.979
And it's actually very
helpful to let you know,

134
00:07:04.979 --> 00:07:08.836
because as you will find out later
on in the course, you can opt in and

135
00:07:08.836 --> 00:07:13.255
opt out out of different pre rendering
modes depending on how you fetch data.

136
00:07:13.255 --> 00:07:16.612
It's very helpful to know at what
time a page is pre rendered or

137
00:07:16.612 --> 00:07:18.046
not during development.

138
00:07:18.046 --> 00:07:20.621
So it can be very helpful.

139
00:07:20.621 --> 00:07:22.306
Right now, it's just like,
yeah, we're not doing anything.

140
00:07:22.306 --> 00:07:25.991
But trust me, this gets helpful in
the future, and I'm a big fan of it.

