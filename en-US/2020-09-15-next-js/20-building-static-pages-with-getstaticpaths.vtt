WEBVTT

1
00:00:00.124 --> 00:00:02.852
Now, if we do have a dynamic URL.

2
00:00:02.852 --> 00:00:06.034
And which we do need
the value of the params,

3
00:00:06.034 --> 00:00:11.540
in order to fetch the content for
a page inside of get static props.

4
00:00:11.540 --> 00:00:15.082
Then we're gonna use another
function called get static paths.

5
00:00:15.082 --> 00:00:20.479
Get static paths is very
much like a static props,

6
00:00:20.479 --> 00:00:24.849
but it's responsibility is to fetch all

7
00:00:24.849 --> 00:00:29.873
the generated paths for
all your unique URLs.

8
00:00:29.873 --> 00:00:33.978
For instance, let's say we had a blog or
a documentation website,

9
00:00:33.978 --> 00:00:35.352
which is really good.

10
00:00:35.352 --> 00:00:37.343
So we have a documentation website.

11
00:00:37.343 --> 00:00:41.224
And but we have a, I don't know,
a catch all URL in here, right?

12
00:00:41.224 --> 00:00:48.354
So let's say we had a, you did something
like this, where it was like docks.

13
00:00:48.354 --> 00:00:50.132
And inside the docks.

14
00:00:50.132 --> 00:00:54.288
It was like, some catch all

15
00:00:54.288 --> 00:00:58.996
you're like params, right?

16
00:00:58.996 --> 00:01:03.442
And we need to get, we need a way to tell.

17
00:01:03.442 --> 00:01:07.135
We want to generate all
the documentation pages ahead of time,

18
00:01:07.135 --> 00:01:08.884
we wanted to be a static site.

19
00:01:08.884 --> 00:01:11.100
So that means,
we need to generate them at build time.

20
00:01:11.100 --> 00:01:13.282
So how do we know where they are?

21
00:01:13.282 --> 00:01:16.325
So eventually, we got to pull this
information down from somewhere,

22
00:01:16.325 --> 00:01:17.364
where there's an API.

23
00:01:17.364 --> 00:01:19.539
Where is a JSON file you
got saved somewhere,

24
00:01:19.539 --> 00:01:22.123
whether it's a directory
inside your app that says.

25
00:01:22.123 --> 00:01:25.223
Here's all my markdown files and
everything's markdown, right?

26
00:01:25.223 --> 00:01:28.316
No matter where it is,
you need to figure out where it is.

27
00:01:28.316 --> 00:01:30.094
You need to create some paths.

28
00:01:30.094 --> 00:01:31.942
And that's what gets static passes.

29
00:01:31.942 --> 00:01:35.893
It's an ability to get the paths for
static pages, that need to be generated.

30
00:01:35.893 --> 00:01:37.913
That's why it's called get static path.

31
00:01:37.913 --> 00:01:41.692
What are all the paths that you need for
this dynamic URL,

32
00:01:41.692 --> 00:01:43.672
to be statically generated?

33
00:01:43.672 --> 00:01:44.572
And it's really cool.

34
00:01:44.572 --> 00:01:47.891
So basically, the way it works
is just like get static props.

35
00:01:47.891 --> 00:01:49.213
It's an in sync function.

36
00:01:49.213 --> 00:01:52.762
You can do literally,
whatever you want in here.

37
00:01:52.762 --> 00:01:56.965
But end of the day, you need to return
an object with paths on it, okay?

38
00:01:56.965 --> 00:02:00.955
And that object is gonna look like this,
I'm sorry, in an object with paths on it,

39
00:02:00.955 --> 00:02:02.611
and the paths is gonna be an array.

40
00:02:02.611 --> 00:02:04.682
And the race is gonna have for

41
00:02:04.682 --> 00:02:09.703
every single page that you wanna render,
just send back the params.

42
00:02:09.703 --> 00:02:14.498
So in this case,
I have a URL called slug, right?

43
00:02:14.498 --> 00:02:16.898
So I'm trying to go to
slug here like that.

44
00:02:16.898 --> 00:02:19.456
So this will be my parameter.

45
00:02:19.456 --> 00:02:23.550
Then I need to send back params,
with this login the value on it like that.

46
00:02:23.550 --> 00:02:29.164
And this is going to tell next js,
hey, you wanna create two pages,

47
00:02:29.164 --> 00:02:32.524
one with this slug, one with this look.

48
00:02:32.524 --> 00:02:34.770
And they both resolve to this URL.

49
00:02:36.200 --> 00:02:38.792
That's what an index is we'll
create those two pages.

50
00:02:38.792 --> 00:02:41.850
So you can think of it as like in Gatsby,

51
00:02:41.850 --> 00:02:46.222
where you would source markdown
files to create pages.

52
00:02:46.222 --> 00:02:50.213
Or in Gatsby, they also source
the pages directory to create pages.

53
00:02:50.213 --> 00:02:55.227
It's pretty much the same thing, except
for you're hinting at a tool that says,

54
00:02:55.227 --> 00:02:58.654
hey, here are the pages that
you won't be able to read.

55
00:02:58.654 --> 00:03:02.473
Because, they're not associated
with pages, they're somewhere else.

56
00:03:02.473 --> 00:03:06.364
They're on my database, there and this
other folder, they're in this JSON file.

57
00:03:06.364 --> 00:03:09.694
So here they are, and
here's how you associate them.

58
00:03:09.694 --> 00:03:10.413
So that's what this does.

59
00:03:10.413 --> 00:03:12.844
So this will create those pages.

60
00:03:12.844 --> 00:03:17.108
And then now,
that once you have the props here,

61
00:03:17.108 --> 00:03:21.893
what you can do,
is you can now use that params object.

62
00:03:21.893 --> 00:03:23.865
You can use that params object now,

63
00:03:23.865 --> 00:03:28.148
which is gonna allow you to get the slug
in this case, and boom, there you go.

64
00:03:28.148 --> 00:03:29.697
You can fetch your data or your slug.

65
00:03:31.900 --> 00:03:34.320
Don't worry,
we're gonna be doing all of this,

66
00:03:34.320 --> 00:03:36.174
as you might walk you guys through it.

67
00:03:36.174 --> 00:03:39.770
But yeah, that's how good static
passwords would get set of props.

68
00:03:39.770 --> 00:03:43.666
In fact, if you use get static paths,
you have these static props.

69
00:03:43.666 --> 00:03:45.612
Why else we use a static path?

70
00:03:45.612 --> 00:03:47.872
So you have to use them both together.

71
00:03:47.872 --> 00:03:50.223
But you only have these static props.

72
00:03:50.223 --> 00:03:53.031
If it's not a dynamic URL,
if it's not a dynamic URL,

73
00:03:53.031 --> 00:03:54.872
you don't need good static paths.

74
00:03:54.872 --> 00:03:57.094
If it is a dynamic URL, then yeah,

75
00:03:57.094 --> 00:04:00.400
you should get static pass
to get the actual pages.

76
00:04:00.400 --> 00:04:02.561
You need to read it for this.

77
00:04:02.561 --> 00:04:06.074
Now, not every dynamic URL is gonna
be able to be rendered ahead of time.

78
00:04:06.074 --> 00:04:11.462
Like for instance,
if I'm like this is slash user ID.

79
00:04:11.462 --> 00:04:16.174
I'm not gonna go render a page for all of
my users ahead of time, that's ridiculous.

80
00:04:16.174 --> 00:04:18.844
I mean, I guess you could,
I don't know why you would, and

81
00:04:18.844 --> 00:04:20.621
especially about our data is dynamic.

82
00:04:20.621 --> 00:04:22.244
So you wouldn't do that here.

83
00:04:22.244 --> 00:04:25.223
We'll talk about what you would do
instead, so this is not the case.

84
00:04:25.223 --> 00:04:29.931
So this is for static pages,
pages that are static, not dynamic pages.

85
00:04:29.931 --> 00:04:33.932
Dynamic pages, you can continue to do
client side, like you've been doing.

86
00:04:33.932 --> 00:04:35.660
Or you can do this next thing,
which I'm about to show you.

87
00:04:35.660 --> 00:04:37.693
And I'll talk a little bit
more about static paths.

88
00:04:37.693 --> 00:04:41.522
One big tip here that they added recently,
was the ability to use fallback truth.

89
00:04:41.522 --> 00:04:42.694
Which I think is really cool.

90
00:04:42.694 --> 00:04:47.824
So if you add fallback true to this
object's, Inside to get static paths.

91
00:04:47.824 --> 00:04:52.145
This is really cool actually, what it
does is it basically allows you to.

92
00:04:52.145 --> 00:04:56.277
let's say you have a, I don't know, you're
trying to render a blog that has 20,000

93
00:04:56.277 --> 00:04:59.030
blog pages statically, but
it just takes too long to build.

94
00:04:59.030 --> 00:05:03.033
So you're only gonna render 100,
the hundred most recent ones.

95
00:05:03.033 --> 00:05:05.883
And then for the rest,
you can put fall back true and

96
00:05:05.883 --> 00:05:09.414
then what it'll do is at runtime
when someone navigates to it.

97
00:05:09.414 --> 00:05:11.759
Then it'll render it and
pre-render it there.

98
00:05:11.759 --> 00:05:15.734
So it'll keep her rendering pages
as people navigate to them,

99
00:05:15.734 --> 00:05:18.062
instead of doing them ahead of time.

100
00:05:18.062 --> 00:05:19.804
Which I think is really, really cool.

101
00:05:19.804 --> 00:05:26.290
And then, you can tie it into the fallback
logic, inside your page component.

102
00:05:26.290 --> 00:05:28.531
There's like a prop that gets
passed in that says, hey,

103
00:05:28.531 --> 00:05:30.173
am I currently on the fallback right now?

104
00:05:30.173 --> 00:05:33.570
Yeah, you just show like a loading screen
or something like that, while it renders.

105
00:05:33.570 --> 00:05:36.464
So it's really cool, but really advanced,
which is why I'm not gonna talk about it.

106
00:05:36.464 --> 00:05:38.902
But yeah, if you need something like that,
look into that.

107
00:05:38.902 --> 00:05:43.694
But yeah, you literally only need this
if you're building a lot of pages,

108
00:05:43.694 --> 00:05:46.751
which most people aren't right now,
so yeah.

