WEBVTT

1
00:00:00.570 --> 00:00:04.120
So let's talk about one of my
favorite parts, which is styling.

2
00:00:05.440 --> 00:00:08.524
I'm a really big, like,
when it comes to writing code,

3
00:00:08.524 --> 00:00:12.979
I'm just all about experience, experience
experience and making really good.

4
00:00:12.979 --> 00:00:15.945
I don't know feeling really good
feeling experiences for users.

5
00:00:15.945 --> 00:00:17.490
And, a lot of it has to do with design.

6
00:00:17.490 --> 00:00:20.725
And so
I know a lot of developers is like, CSS.

7
00:00:20.725 --> 00:00:24.610
Stuff like that for good reason, but
me actually one of those weird people

8
00:00:24.610 --> 00:00:28.410
that like CSS and obsess about
making things look, picture perfect.

9
00:00:28.410 --> 00:00:30.370
Like if when I was working at companies,

10
00:00:30.370 --> 00:00:33.810
I would spend half my time sitting next
to the designers working with them

11
00:00:33.810 --> 00:00:36.920
to design the app, because that's
just like what I like doing.

12
00:00:36.920 --> 00:00:38.990
But I'm by no means a designer.

13
00:00:38.990 --> 00:00:40.350
Don't ask me to design anything.

14
00:00:40.350 --> 00:00:41.410
I couldn't do it.

15
00:00:41.410 --> 00:00:43.110
But I can recognize good design.

16
00:00:43.110 --> 00:00:45.790
And I think that's kind
of what our value is.

17
00:00:45.790 --> 00:00:47.536
So styling.

18
00:00:47.536 --> 00:00:50.835
If you use react which
i'm hoping all you have,

19
00:00:50.835 --> 00:00:56.050
you could probably think of at least
five ways to do styling in react right.

20
00:00:56.050 --> 00:01:00.630
And that's going to depend on how
you build it right you got so

21
00:01:00.630 --> 00:01:02.980
many different flavors of CSS and JS.

22
00:01:02.980 --> 00:01:06.865
You have different ways of making
CSS files and then Webpack and

23
00:01:06.865 --> 00:01:08.999
import them different ways like.

24
00:01:08.999 --> 00:01:12.010
Well, do you want a global do you
want me to put them together?

25
00:01:12.010 --> 00:01:16.082
Do you want me to maybe add modules to
them like, what do you want me to do?

26
00:01:16.082 --> 00:01:19.921
Is just so
many ways to do styling and react.

27
00:01:19.921 --> 00:01:22.472
And I think the Next.js team was aware
of that, right, so they're just like,

28
00:01:22.472 --> 00:01:23.380
you know what?

29
00:01:23.380 --> 00:01:25.892
We're gonna pick something
that covers some use cases,

30
00:01:25.892 --> 00:01:28.314
and it works very well, and
we're just gonna do that.

31
00:01:28.314 --> 00:01:32.877
And I think they did a really good job
with the styling when it comes to Next.js.

32
00:01:32.877 --> 00:01:34.480
So let's talk about that.

33
00:01:34.480 --> 00:01:36.540
So like I said,
they do have some conventions baked in,

34
00:01:36.540 --> 00:01:39.550
and they're pretty good by default.

35
00:01:39.550 --> 00:01:41.560
And they basically look like this.

36
00:01:41.560 --> 00:01:44.460
So yeah, let's talk about two different
types of stylings first, right?

37
00:01:44.460 --> 00:01:46.530
So you have global styles, right?

38
00:01:46.530 --> 00:01:52.000
You have I need this CSS to be globally,
inside of my application,

39
00:01:52.000 --> 00:01:53.850
it will have collisions.

40
00:01:53.850 --> 00:01:55.000
I don't really care.

41
00:01:55.000 --> 00:01:56.953
And that's because a good example of that.

42
00:01:56.953 --> 00:01:59.072
And maybe you're not writing that.

43
00:01:59.072 --> 00:02:03.270
But let's you download and
you npm install a calendar component,

44
00:02:03.270 --> 00:02:06.240
and that calendar opponent says
you got to import this CSS.

45
00:02:07.350 --> 00:02:09.160
That's a global styling, right?

46
00:02:09.160 --> 00:02:10.980
Hopefully no one's writing
libraries like that anymore.

47
00:02:10.980 --> 00:02:12.570
If you aren't writing libraries like that,

48
00:02:12.570 --> 00:02:15.080
please don't write libraries
where someone has to import CSS.

49
00:02:15.080 --> 00:02:19.110
It's just so many better ways and it
really conflicts with their bill system.

50
00:02:19.110 --> 00:02:23.450
So don't do that, but, there's still so
many libraries out there that do do that.

51
00:02:23.450 --> 00:02:28.500
So how do you get that into
your app with Next.js.

52
00:02:28.500 --> 00:02:31.160
So Next.js is very specific about that.

53
00:02:31.160 --> 00:02:37.360
So the only way to include global
CSS inside of your application,

54
00:02:37.360 --> 00:02:42.860
your Next.js application is inside of
a special page called underscore app.

55
00:02:42.860 --> 00:02:44.530
Right, so I'm gonna show you what that is.

56
00:02:44.530 --> 00:02:48.138
So if I go to my pages, I can make
a new file here called underscore app.

57
00:02:51.423 --> 00:02:51.980
Right.

58
00:02:51.980 --> 00:02:54.800
So before we get in here, I think
this introduces another conversation.

59
00:02:54.800 --> 00:02:59.945
So this means that okay, there's
a special page in this pages directory so

60
00:02:59.945 --> 00:03:02.732
that you know that would mean that like.

61
00:03:02.732 --> 00:03:05.442
Okay, you probably can't pick
whatever name you want for

62
00:03:05.442 --> 00:03:09.370
your pages because Next.js is using
specific names for specific pages.

63
00:03:09.370 --> 00:03:14.210
So if we were gonna make a route called
underscore app here, this would like,

64
00:03:14.210 --> 00:03:15.400
it wouldn't pick it up, right?

65
00:03:15.400 --> 00:03:17.510
So you can't use whatever names you want,
and

66
00:03:17.510 --> 00:03:21.270
there's other ones in here too, as well,
but most of them start with underscore.

67
00:03:21.270 --> 00:03:24.900
So it's usually safe,
hopefully you're not making.

68
00:03:24.900 --> 00:03:27.640
A route with an underscore in it for
some reason, I don't know.

69
00:03:27.640 --> 00:03:30.436
If you are just pick something else,
I don't know.

70
00:03:30.436 --> 00:03:35.453
But, yeah, underscore app is basically,
allows us to hijack the route,

71
00:03:35.453 --> 00:03:38.572
the entry point to our
Next.js application.

72
00:03:38.572 --> 00:03:40.830
This gets created for
us for free by default.

73
00:03:40.830 --> 00:03:45.190
We never have to touch it unless we
gotta make some global styling, right?

74
00:03:45.190 --> 00:03:47.133
So the way that works
is you could look here.

75
00:03:47.133 --> 00:03:51.176
At the end of the day,
you just gotta export a function here,

76
00:03:51.176 --> 00:03:55.550
you're gonna get this component here,
which is gonna be a page.

77
00:03:55.550 --> 00:03:57.250
So here's a page at any given time,

78
00:03:57.250 --> 00:03:59.060
this is a page and
then it prompts to that page.

79
00:03:59.060 --> 00:04:03.295
So you just return it, this is basically
what Next.js is doing under the hood.

80
00:04:03.295 --> 00:04:05.415
They're doing this for you automatically.

81
00:04:05.415 --> 00:04:09.205
So, you don't have to do it yourself
right so you could copy this.

82
00:04:09.205 --> 00:04:13.528
You could paste this and
obviously you need to import react.

83
00:04:17.564 --> 00:04:18.072
Right?

84
00:04:18.072 --> 00:04:20.172
And this is what happens for
you automatically.

85
00:04:20.172 --> 00:04:22.443
So just by adding this I
actually don't get any benefit.

86
00:04:22.443 --> 00:04:27.165
But the reason I have to add this file
is because I can't actually add any

87
00:04:27.165 --> 00:04:30.629
global CSS in any other
file inside of Next.js, for

88
00:04:30.629 --> 00:04:33.403
better or for worse other than this file.

89
00:04:33.403 --> 00:04:37.386
So if I had that button or that
calendar and I needed some CSS for it,

90
00:04:37.386 --> 00:04:38.964
I would have to do it here.

91
00:04:38.964 --> 00:04:42.831
It would have to be calendar,
whatever that thing is for

92
00:04:42.831 --> 00:04:45.560
that calendar it would have to be here.

93
00:04:46.600 --> 00:04:51.073
You can't do it anywhere else if you
try to import this CSS in a component.

94
00:04:51.073 --> 00:04:54.667
Or anything that's not, or even in a page,
anything, that's not this underscore app,

95
00:04:54.667 --> 00:04:57.764
you're gonna get an error from
Next.js that says, you can't do that.

96
00:04:57.764 --> 00:04:58.660
And we can test that.

97
00:04:58.660 --> 00:05:01.765
Right.
So I can go and I'm gonna go to source and

98
00:05:01.765 --> 00:05:03.784
I'm gonna make a new file.

99
00:05:03.784 --> 00:05:09.545
I'm just gonna call it styles dot CSS,
and I'll add some styles here.

100
00:05:13.121 --> 00:05:14.600
Like that right?

101
00:05:14.600 --> 00:05:18.426
And then what I'm gonna do is I'm just
gonna import that in my index page and

102
00:05:18.426 --> 00:05:19.780
let's see what happens.

103
00:05:19.780 --> 00:05:29.270
So I'm gonna say imports,
Source slash style dot CSS.

104
00:05:29.270 --> 00:05:34.760
All right, so let's see what
happens if we try to do that, boom,

105
00:05:34.760 --> 00:05:37.730
like I said,
you get this really nice, huge error.

106
00:05:37.730 --> 00:05:40.030
It immediately threw up.

107
00:05:40.030 --> 00:05:42.190
It was like, nope, not happening.

108
00:05:42.190 --> 00:05:46.190
Global CSS cannot be imported from
files other than your custom app.

109
00:05:46.190 --> 00:05:50.330
Please move all global CSS imports to
that, or convert it to CSS models,

110
00:05:50.330 --> 00:05:52.130
which is what we will
be talking about next.

111
00:05:53.280 --> 00:05:58.830
So the reason they do that it has a lot
to do with the bundling of the styles and

112
00:05:58.830 --> 00:06:03.440
how they treat the global styles to
make sure they are loaded in properly.

113
00:06:03.440 --> 00:06:07.080
So it makes sense, but
that can also be a headache.

114
00:06:07.080 --> 00:06:10.870
But I also realize that headache is mostly
due because people are still making

115
00:06:10.870 --> 00:06:11.950
libraries.

116
00:06:11.950 --> 00:06:15.220
With global CSS exports,
I don't know why they still do that.

117
00:06:15.220 --> 00:06:15.733
Don't do that.

118
00:06:15.733 --> 00:06:17.990
It's not a good experience.

119
00:06:17.990 --> 00:06:19.715
And you will almost never make global CSS.

120
00:06:19.715 --> 00:06:23.710
If you're the author of this application,
you will most likely never do that.

121
00:06:23.710 --> 00:06:27.230
So it usually is always some NPM
module that requires you to do that.

122
00:06:27.230 --> 00:06:28.960
So, yeah, that sucks.

123
00:06:28.960 --> 00:06:32.401
I'm at the point now where if I come
across one of those models and I need it,

124
00:06:32.401 --> 00:06:33.835
I will literally just fork it.

125
00:06:33.835 --> 00:06:38.390
And make the CSS not to import and
publish and NPM myself and use that one.

126
00:06:38.390 --> 00:06:41.510
That's how bad of a problem it is for
me now, I like, fork mods up for

127
00:06:41.510 --> 00:06:42.520
like 10 modules a week.

128
00:06:42.520 --> 00:06:44.200
Now just doing stuff like that.

129
00:06:44.200 --> 00:06:46.020
So yeah, it's that big of a problem.

130
00:06:47.080 --> 00:06:47.720
All right.

131
00:06:47.720 --> 00:06:50.850
But if we do add that, oops, not this.

132
00:06:51.990 --> 00:06:57.470
But if we do add that CSS here to
our custom app, so if I say source

133
00:06:58.660 --> 00:07:03.660
styles dot CSS here, hey, it works.

134
00:07:03.660 --> 00:07:05.070
It loaded up just fine, right?

135
00:07:05.070 --> 00:07:10.290
So yeah, global CSS and
put it in your app component.

136
00:07:10.290 --> 00:07:11.320
Have a happy day.

137
00:07:11.320 --> 00:07:12.460
Hopefully you never have to do it.

138
00:07:13.490 --> 00:07:17.661
Now the part that you're
actually going to be using

139
00:07:17.661 --> 00:07:21.063
is is a Next.js support for CSS modules.

140
00:07:21.063 --> 00:07:25.819
So if you've never heard of CSS modules,
basically what they do is,

141
00:07:25.819 --> 00:07:30.083
they allow you to write your CSS
the way you normally write it.

142
00:07:30.083 --> 00:07:35.790
But the way that it works during build
time, every time you import that CSS file.

143
00:07:35.790 --> 00:07:41.129
Into a file,
every single import is gonna dynamically

144
00:07:41.129 --> 00:07:46.068
create a class,
a dynamic class just for that import.

145
00:07:46.068 --> 00:07:48.813
And it's gonna apply it for
all the styles on that import.

146
00:07:48.813 --> 00:07:51.027
So even though you have
the same CSS classes, and

147
00:07:51.027 --> 00:07:53.670
you might import the same
file in many components.

148
00:07:53.670 --> 00:07:56.590
They're all gonna have their own
scoped class in front of them,

149
00:07:56.590 --> 00:07:59.190
because it's unique to that import.

150
00:07:59.190 --> 00:08:00.200
That happens at build time.

151
00:08:00.200 --> 00:08:02.340
So that's how the scoping
works with CSS modules.

152
00:08:02.340 --> 00:08:09.130
They just basically get a dynamic unique
class associated with them per import.

153
00:08:09.130 --> 00:08:11.160
And Next.js gives us that for free.

154
00:08:11.160 --> 00:08:13.660
Because I remember when CSS
modules first came out,

155
00:08:13.660 --> 00:08:17.050
like, five years ago or
something like that.

156
00:08:17.050 --> 00:08:18.880
It was so hard to set up.

157
00:08:18.880 --> 00:08:22.141
It was ridiculous, setting it up
with Webpack and all that stuff,

158
00:08:22.141 --> 00:08:23.491
and now you get it for free.

159
00:08:23.491 --> 00:08:25.090
We kind of take it for granted.

160
00:08:25.090 --> 00:08:28.540
So, how would you do CSS modules and
where would you use them?

161
00:08:28.540 --> 00:08:30.870
So you can pretty much
use CSS modules anywhere.

162
00:08:30.870 --> 00:08:35.910
Even the App.js, any page, any component,
doesn't matter, it'll just work.

163
00:08:35.910 --> 00:08:41.135
So, the way a CSS models works is all
you have to do is rename the file,

164
00:08:41.135 --> 00:08:46.018
so in this case, style dot CSS I
will say styles.module.CSS.

165
00:08:46.018 --> 00:08:46.708
That's it.

166
00:08:46.708 --> 00:08:48.640
All I have to do is put
the word module in.

167
00:08:50.130 --> 00:08:52.940
And this is gonna tell a Next.js,
this is a CSS module.

168
00:08:52.940 --> 00:08:54.190
Cool.
Got you.

169
00:08:54.190 --> 00:08:58.180
And this is now gonna allow
you to import it in any file.

170
00:08:58.180 --> 00:09:00.730
And that CSS is gonna be scoped.

171
00:09:00.730 --> 00:09:05.630
To that file, so even if I import
in many places, it won't collide,

172
00:09:05.630 --> 00:09:09.060
right and it won't collide
with any of the global stuff.

173
00:09:09.060 --> 00:09:11.830
So now that I have this,
I can go back to my page here.

174
00:09:12.950 --> 00:09:14.070
I could put that in there.

175
00:09:14.070 --> 00:09:20.000
And then I could say that
module.CSS like that.

176
00:09:21.100 --> 00:09:21.600
Right.

177
00:09:22.980 --> 00:09:27.020
Yeah, and now it's just freaking
out because I'm trying to

178
00:09:27.020 --> 00:09:30.650
do a body CSS modules doesn't allow you to
do like pure selectors like that, right?

179
00:09:30.650 --> 00:09:35.800
So I need to just dot body,
something like that.

180
00:09:35.800 --> 00:09:36.730
There we go.

181
00:09:36.730 --> 00:09:41.400
The reason i freaked out is because
CSS modules needs a class name.

182
00:09:41.400 --> 00:09:44.400
In order to like put a dynamic class
in front of, you can't do this.

183
00:09:44.400 --> 00:09:47.450
Cuz if you attach the body that's global,
right?

184
00:09:47.450 --> 00:09:50.670
You're global now that's defeating
the purpose of CSS module.

185
00:09:50.670 --> 00:09:54.520
So it's like, hey, you wanted modules but
you're not doing modules.

186
00:09:54.520 --> 00:09:55.420
What are you doing?

187
00:09:55.420 --> 00:09:57.125
Go make some global CSS.

188
00:09:57.125 --> 00:09:59.185
And so that's why we got that
error which is very helpful.

