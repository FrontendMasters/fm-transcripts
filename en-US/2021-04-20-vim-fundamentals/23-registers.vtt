WEBVTT

1
00:00:00.240 --> 00:00:03.500
Lua is the plugin and
customizing Lang or Neo vim.

2
00:00:03.500 --> 00:00:08.330
Lua is a language I think invented
20 years ago, 30 years ago.

3
00:00:08.330 --> 00:00:13.328
It's an exceptionally simple,
highly embeddable language that has all

4
00:00:13.328 --> 00:00:16.800
c like interfaces effectively,
and with Neo vim.

5
00:00:16.800 --> 00:00:19.140
They have it as just
a first class citizen.

6
00:00:19.140 --> 00:00:24.070
All the vim API's are exposed into Lua and
so you can write your plugins in vinil.

7
00:00:24.070 --> 00:00:27.180
Which vim or you can write in Lua?

8
00:00:27.180 --> 00:00:30.518
I at least feel like Lua
has multiple purposes,

9
00:00:30.518 --> 00:00:34.100
meaning that I am able to
both use Lua in the oven.

10
00:00:34.100 --> 00:00:37.389
But I could also have a chance to
use Lua at some other point right?

11
00:00:37.389 --> 00:00:41.428
Like even at Netflix we experimented for a
moment using Lua inside of our television

12
00:00:41.428 --> 00:00:45.790
app to be able to have like an easy to
use really lightweight, dynamic language.

13
00:00:45.790 --> 00:00:49.548
And so Lua does have a lot of uses it's
used a lot in the game industry for

14
00:00:49.548 --> 00:00:50.520
you eyes.

15
00:00:50.520 --> 00:00:54.747
It so it's a pretty cool little language
at least have some familiarity with it and

16
00:00:54.747 --> 00:00:58.913
because it's so tiny, you literally could
learn the entire language if you're

17
00:00:58.913 --> 00:01:01.999
already familiar with the basic
concepts of programming.

18
00:01:01.999 --> 00:01:04.410
Probably a day, there's nothing to it.

19
00:01:04.410 --> 00:01:08.360
Honestly, there is nothing to it,
it's an exceptionally tiny language.

20
00:01:08.360 --> 00:01:11.133
You can do basically o o or
functional style stuff, so

21
00:01:11.133 --> 00:01:12.930
it's pretty straightforward.

22
00:01:12.930 --> 00:01:15.060
Alright, so
I think we're gonna start back up.

23
00:01:15.060 --> 00:01:16.450
So I did leave it here
on the cliff hanger.

24
00:01:16.450 --> 00:01:21.742
Look at that, we have this highlighted
text from r macro very exciting,

25
00:01:21.742 --> 00:01:26.380
but we're gonna leave we're gonna quit,
quit bang.

26
00:01:26.380 --> 00:01:29.160
And now, let's go on.

27
00:01:29.160 --> 00:01:31.960
Let's go on to the next
thing which is registers.

28
00:01:31.960 --> 00:01:34.631
So I have mentioned this thing over and
over again.

29
00:01:34.631 --> 00:01:38.806
I've said the word registers that honestly
when I first heard the term registers I

30
00:01:38.806 --> 00:01:42.681
definitely thought that they're
definitely hard to imagine them not being

31
00:01:42.681 --> 00:01:43.650
hard, right?

32
00:01:43.650 --> 00:01:44.910
They just feel hard.

33
00:01:44.910 --> 00:01:47.830
This idea of registers they're
always flipping and flopping and

34
00:01:47.830 --> 00:01:48.846
why what are they for.

35
00:01:48.846 --> 00:01:51.110
Apparently they store macros in them.

36
00:01:51.110 --> 00:01:52.850
What the heck is a register?

37
00:01:52.850 --> 00:01:58.990
A register is as simple as a key value
store a single character to a string.

38
00:01:58.990 --> 00:02:00.980
That is all it is.

39
00:02:00.980 --> 00:02:03.637
Some registers are dynamically filled for
you,

40
00:02:03.637 --> 00:02:07.525
such as the yanking register along
with your delete history register,

41
00:02:07.525 --> 00:02:10.900
the implicit registers
automatically filled for you.

42
00:02:10.900 --> 00:02:13.910
Your alternate file, your current
file is automatically filled for you.

43
00:02:13.910 --> 00:02:18.738
There's a couple other, but then there's
just a whole bunch of open empty registers

44
00:02:18.738 --> 00:02:23.480
that you can put anything into them and
then you can do stuff with them.

45
00:02:23.480 --> 00:02:24.980
So let's jump over here.

46
00:02:24.980 --> 00:02:28.070
Let's download this I honestly
have no idea what's in this file.

47
00:02:28.070 --> 00:02:31.150
So this is exceptionally
exciting at this point.

48
00:02:31.150 --> 00:02:32.790
So let's curl this down.

49
00:02:32.790 --> 00:02:34.510
And let's see what happens.

50
00:02:34.510 --> 00:02:36.470
So we've already talked a lot about this.

51
00:02:36.470 --> 00:02:40.728
We've already done a lot with
this foo thing, pasting all that.

52
00:02:40.728 --> 00:02:43.854
I actually explained this way earlier,
right?

53
00:02:43.854 --> 00:02:47.580
So let's go right into how
to interact with registers.

54
00:02:47.580 --> 00:02:50.702
So you'll notice something,
whenever you do register,

55
00:02:50.702 --> 00:02:53.710
you'll notice that they all
start with a double quote.

56
00:02:54.810 --> 00:03:00.220
The nice part about that is it's
actually a really big hint to you if you

57
00:03:00.220 --> 00:03:05.996
press double quotes, then a register,
you now have selected a register,

58
00:03:05.996 --> 00:03:10.235
which means then you can do
a motion with that, right?

59
00:03:10.235 --> 00:03:11.700
So, let's see here.

60
00:03:11.700 --> 00:03:15.000
So if I were to go like this,
let's highlight this line.

61
00:03:15.000 --> 00:03:20.833
Now I'm gonna press quotes b yank right?

62
00:03:20.833 --> 00:03:24.638
So now theoretically,
if I've done this correctly,

63
00:03:24.638 --> 00:03:28.700
I just yanked into the b
register what I was highlighting.

64
00:03:28.700 --> 00:03:30.750
So let's go read again.

65
00:03:30.750 --> 00:03:34.991
You'll notice a the implicit register
shows it right here what you also see is

66
00:03:34.991 --> 00:03:39.970
that the zeroeth register the gang
history register, doesn't have that yank.

67
00:03:39.970 --> 00:03:44.867
Instead, what you'll see is right here,
inside the b register,

68
00:03:44.867 --> 00:03:49.610
it's actually right there,
I'm able to yank into a register.

69
00:03:49.610 --> 00:03:54.876
Now hopefully, you're sitting
there thinking well wait a second,

70
00:03:54.876 --> 00:04:02.000
if macros record to a register, and I can
yank to a register, can I edit my macro?

71
00:04:02.000 --> 00:04:03.490
Right?
Why not?

72
00:04:03.490 --> 00:04:04.799
Why couldn't you?

73
00:04:04.799 --> 00:04:06.186
Of course you can.

74
00:04:06.186 --> 00:04:07.110
Silly pants.

75
00:04:07.110 --> 00:04:07.920
Let's do that.

76
00:04:07.920 --> 00:04:09.140
So let's go like this.

77
00:04:09.140 --> 00:04:11.120
Let's go quotes ap.

78
00:04:11.120 --> 00:04:15.340
I just pasted that macro
that we executed earlier.

79
00:04:16.450 --> 00:04:19.540
Now I can start doing
something with it right?

80
00:04:19.540 --> 00:04:24.060
I could go into insert mode and
say hello world.

81
00:04:24.060 --> 00:04:28.481
I can then take this escape key
right here, highlight it, yank it,

82
00:04:28.481 --> 00:04:30.170
paste it right here.

83
00:04:30.170 --> 00:04:32.700
Take this highlight the whole thing,
right?

84
00:04:32.700 --> 00:04:35.940
Or actually, you can highlight with
using v dollar all the way to the end.

85
00:04:35.940 --> 00:04:38.350
Go back so that way,
don't get that bonus new line.

86
00:04:38.350 --> 00:04:39.910
Then I can go double quotes.

87
00:04:39.910 --> 00:04:44.650
Let's put it into C just so
we don't clobber our original one c yank.

88
00:04:46.580 --> 00:04:47.160
Awesome.

89
00:04:47.160 --> 00:04:50.470
So now if we look at our registers again,
what do we see?

90
00:04:50.470 --> 00:04:53.720
We see our original macro that we had,
right?

91
00:04:53.720 --> 00:04:55.540
And we also see this Hello World one.

92
00:04:55.540 --> 00:04:57.150
There's a Hello World one now.

93
00:04:57.150 --> 00:04:59.980
We just edited our macro live on the spot.

94
00:04:59.980 --> 00:05:04.624
So if you get macro pressure and you miss
one small thing you can just hand edit it,

95
00:05:04.624 --> 00:05:09.269
as opposed to having to rego through the
whole process, and execute it, and then

96
00:05:09.269 --> 00:05:14.890
go, okay I messed these ones but, I messed
these ones.but you can start single out.

97
00:05:14.890 --> 00:05:18.773
I can just put underscore here
to go back to the beginning,

98
00:05:18.773 --> 00:05:20.841
I can do this to edit it this way.

99
00:05:20.841 --> 00:05:24.862
It also makes it really easy to
work with any of these macros.

100
00:05:24.862 --> 00:05:27.940
So let's actually go
back to the macro run.

101
00:05:27.940 --> 00:05:30.461
Let's go five down and I'm gonna go @c.

102
00:05:30.461 --> 00:05:32.596
Look at that, case hello world,

103
00:05:32.596 --> 00:05:36.210
right it just did the same
thing that we did before.

104
00:05:36.210 --> 00:05:40.950
But we added that little extra hello
world went back into normal mode.

105
00:05:40.950 --> 00:05:45.302
Did all the text editing and did all
the case statements and everything.

106
00:05:45.302 --> 00:05:50.240
So to act just like how we expected to and
notice that the capital I that we used for

107
00:05:50.240 --> 00:05:52.800
the case statement, reg.

108
00:05:52.800 --> 00:05:57.273
Notice that right here that capital I
allowed us to actually go before the hello

109
00:05:57.273 --> 00:05:59.460
world and type in the case statement.

110
00:05:59.460 --> 00:06:03.271
And so it's still acted really like
the way we expected it to act,

111
00:06:03.271 --> 00:06:06.875
which is actually pretty cool
that this all just simply worked

112
00:06:06.875 --> 00:06:10.780
out we added we edited and
we're able to replay them again.

113
00:06:10.780 --> 00:06:14.822
So this is one thing that will help
make macro pressure go away by the way,

114
00:06:14.822 --> 00:06:18.552
is the fact that you know if you
don't get it right on the first try.

115
00:06:18.552 --> 00:06:21.130
You can just edit it,
I forgot to press d d here.

116
00:06:21.130 --> 00:06:25.540
Okay, just do that boom, got it,
threw them in there, we're good to go.

117
00:06:25.540 --> 00:06:28.650
The only thing that's hard about them
is getting the correct Escape key.

118
00:06:28.650 --> 00:06:31.929
So I always use Ctrl C, and I copy and
paste that Ctrl C character and

119
00:06:31.929 --> 00:06:33.640
put it where it's supposed to be.

120
00:06:33.640 --> 00:06:37.920
I always I haven't really found a great
way to get around that alright.

121
00:06:37.920 --> 00:06:38.670
Awesome.

122
00:06:38.670 --> 00:06:42.240
So I mean, that's really all
the stuff that has to do.

123
00:06:42.240 --> 00:06:46.270
I already showed you this one
with the register one, right?

124
00:06:46.270 --> 00:06:48.092
There's like this already exists,

125
00:06:48.092 --> 00:06:51.450
like I showed you kinda everything
there is really with registers.

126
00:06:51.450 --> 00:06:53.890
There's some ones that are auto generated.

127
00:06:53.890 --> 00:06:56.381
You can edit them,
you can add them, you can yank them,

128
00:06:56.381 --> 00:07:00.006
you can paste back into them, you can
change them and that's just how they work.

129
00:07:00.006 --> 00:07:01.690
They're actually really simple.

130
00:07:01.690 --> 00:07:04.499
So the slogan of definitely
hard to imagine them not being

131
00:07:04.499 --> 00:07:05.970
hard is actually incorrect.

132
00:07:05.970 --> 00:07:08.117
They're exceptionally simple,

133
00:07:08.117 --> 00:07:13.610
they're just simply single character to
string value, and that is all they are.

134
00:07:13.610 --> 00:07:16.391
And then you can replay them
either as key strokes or

135
00:07:16.391 --> 00:07:19.020
paste them places replace them with yank.

136
00:07:19.020 --> 00:07:19.870
You got it.

137
00:07:19.870 --> 00:07:20.630
Awesome.

138
00:07:20.630 --> 00:07:24.234
So I feel like we've gone somewhere we've
kind of we've done this we're able to

139
00:07:24.234 --> 00:07:25.320
see registers.

140
00:07:25.320 --> 00:07:29.814
And now we've had a pretty good like
survey of a lot of features and

141
00:07:29.814 --> 00:07:32.358
Vim that make Vim pretty excellent.

142
00:07:32.358 --> 00:07:36.080
And we barely customized
anything using plugins, right?

143
00:07:36.080 --> 00:07:37.260
We only have a couple plugins.

144
00:07:37.260 --> 00:07:39.748
We have a color scheme and fozy finder.

145
00:07:39.748 --> 00:07:43.520
At this point vim is actually
a fairly usable system.

146
00:07:43.520 --> 00:07:47.230
Sure we don't have autocomplete,
very easy to get autocomplete.

147
00:07:47.230 --> 00:07:50.600
Sure, we don't have a range of
color schemes or sweet things.

148
00:07:50.600 --> 00:07:52.840
We can get that sure our
file tree is not that great.

149
00:07:52.840 --> 00:07:53.650
Well, guess what?

150
00:07:53.650 --> 00:07:55.620
There's dervish, there's Ranger.

151
00:07:55.620 --> 00:07:58.681
There's all these other file
plugins that you can use for

152
00:07:58.681 --> 00:08:02.630
other quick ideas into using vim or
using cooler operating systems.

153
00:08:02.630 --> 00:08:05.160
We even have RG already
integrated into vim.

154
00:08:05.160 --> 00:08:06.130
It was that simple.

155
00:08:07.870 --> 00:08:09.340
So yeah, I really liked it.

156
00:08:09.340 --> 00:08:11.640
I hope that you guys like all this.

157
00:08:11.640 --> 00:08:13.671
We are gonna be moving
forward a little bit and

158
00:08:13.671 --> 00:08:15.390
kinda doing a little step to the side.

159
00:08:15.390 --> 00:08:20.510
So this whole time we've been
doing just then stuff, right?

160
00:08:20.510 --> 00:08:23.890
We haven't talked about any
new motions in a while, right?

161
00:08:23.890 --> 00:08:26.810
We've been using only the ones
we've already learned.

162
00:08:26.810 --> 00:08:29.527
We have learned how to kind
of add them together and

163
00:08:29.527 --> 00:08:33.680
make them into composed commands such
as like pen j, moves down 10 times.

