WEBVTT

1
00:00:00.460 --> 00:00:03.941
Let's see, plugin, plugin, plugin,
plugin, while pontificating,

2
00:00:03.941 --> 00:00:06.828
I actually have a plugin that I
was going to pontificate upon.

3
00:00:06.828 --> 00:00:09.340
While plugins while giving errors on
how the best way to approach them.

4
00:00:11.110 --> 00:00:15.000
Interesting, so I don't do a lot of demo,
so I can help with some,

5
00:00:15.000 --> 00:00:17.750
I'm gonna do a just
a very small demo plugin.

6
00:00:17.750 --> 00:00:22.811
I may even screw it up, honestly, I don't
do a lot of VimL, I use Lua primarily,

7
00:00:22.811 --> 00:00:26.940
but you don't have to use Lua,
you don't have to use Neovim.

8
00:00:26.940 --> 00:00:33.840
Some of the best plugins I've ever
used in my life are done with VimL.

9
00:00:33.840 --> 00:00:35.560
So we'll get to those.

10
00:00:35.560 --> 00:00:38.870
So let's just first do
a little small plugin, okay?

11
00:00:38.870 --> 00:00:40.170
So let's create a new file.

12
00:00:40.170 --> 00:00:43.794
So I'm gonna open up this little
quick fix, or the vex window, right?

13
00:00:43.794 --> 00:00:48.194
And if you just type in %,
it'll say, hey, enter new file name.

14
00:00:48.194 --> 00:00:50.449
So I'll go,
I don't know what to name is thing,

15
00:00:50.449 --> 00:00:53.070
we'll just call it plugin.vim, why not?

16
00:00:53.070 --> 00:00:54.960
And once I save it, it is now in there.

17
00:00:54.960 --> 00:00:57.682
If I do pv again,
you'll see plugin is now right there.

18
00:00:57.682 --> 00:01:01.055
I can delete it with capital D,
if you want to, you can rename it and

19
00:01:01.055 --> 00:01:03.490
move it around with capital R.

20
00:01:03.490 --> 00:01:07.119
It's an okay interface, honestly, there's
better ones, I think Dirvish has one of

21
00:01:07.119 --> 00:01:09.830
the better ones,
NERDTree is really fantastic as well.

22
00:01:09.830 --> 00:01:13.560
So we have this plugin, and
let's just start writing something.

23
00:01:13.560 --> 00:01:16.490
So here's something that does
happen from time to time.

24
00:01:16.490 --> 00:01:19.927
I want to be able to
create a scratch buffer.

25
00:01:19.927 --> 00:01:23.965
This is actually based off of a,
let's see, let's do this,

26
00:01:23.965 --> 00:01:29.740
was actually based off of a article that I
found not too long ago, it's right here.

27
00:01:29.740 --> 00:01:32.973
He goes through this really extensive
scratch buffering that he makes.

28
00:01:32.973 --> 00:01:37.540
But let's just do a really simple one to
show you kinda some of the powers of Vim.

29
00:01:37.540 --> 00:01:38.048
Right, so

30
00:01:38.048 --> 00:01:42.123
I'm just gonna close down that with my
favourite command Ctrl+W,O, love it.

31
00:01:42.123 --> 00:01:43.880
What we're gonna do is we're
gonna create a function.

32
00:01:43.880 --> 00:01:47.572
Now in Vim functions you can do fun!,
effectively, this just ensures that

33
00:01:47.572 --> 00:01:51.890
the function will always replace itself
with the latest, whatever you source.

34
00:01:51.890 --> 00:01:57.580
And let's call it something fantastic,
let's call it scratch, why not?

35
00:01:57.580 --> 00:02:01.040
There we go, and
then let's also pass in a command.

36
00:02:01.040 --> 00:02:03.519
So what we're gonna do is we're just
creating a function that passes

37
00:02:03.519 --> 00:02:04.290
in a command.

38
00:02:04.290 --> 00:02:06.700
Now here's the thing, when you write
a function, you got to end the fun.

39
00:02:06.700 --> 00:02:09.710
Don't forget that it,
will get you every single time.

40
00:02:09.710 --> 00:02:12.530
It gets me every single time.

41
00:02:12.530 --> 00:02:14.190
So what is the command gonna do?

42
00:02:14.190 --> 00:02:16.540
Well for us,
let's just do something pretty simple.

43
00:02:16.540 --> 00:02:18.486
Let's create a scratch buffer, and

44
00:02:18.486 --> 00:02:21.860
then just execute that
command as a system command.

45
00:02:21.860 --> 00:02:26.340
All right, so what we're gonna do,
is we're gonna first create a new buffer.

46
00:02:26.340 --> 00:02:28.450
There you go, new,
that's all we have to do.

47
00:02:28.450 --> 00:02:32.410
It's the same thing as doing new
right here inside of your command.

48
00:02:32.410 --> 00:02:34.460
Notice I just created
a new list right there.

49
00:02:34.460 --> 00:02:35.810
I can rotate it if I want.

50
00:02:35.810 --> 00:02:38.550
There's all sorts of things you
can do with it if you want to.

51
00:02:38.550 --> 00:02:40.373
We're not gonna really do that right now.

52
00:02:40.373 --> 00:02:44.310
So we're gonna just do new, I can do vnew
for vertical split, we can do all of that.

53
00:02:44.310 --> 00:02:47.310
But we're gonna create a new one and
then we need to set some options on it.

54
00:02:47.310 --> 00:02:50.919
Now, the moment you create it, when it's
created, your cursor will be moved there.

55
00:02:50.919 --> 00:02:54.427
And now we're executing this line of code,
which means I can do something like this.

56
00:02:54.427 --> 00:02:58.574
set local, which will actually set
things about this buffer only,

57
00:02:58.574 --> 00:03:04.050
it's not a set that's for the whole Vim
experience, it's for this specific buffer.

58
00:03:04.050 --> 00:03:08.140
nobufflisted, all right, so
nobufflisted, so what is nobufflisted?

59
00:03:08.140 --> 00:03:11.078
Well, if you type in the word buffers,

60
00:03:11.078 --> 00:03:15.630
what you'll see is every file
that I have opened up, right?

61
00:03:15.630 --> 00:03:20.340
So during this Vim experience,
we keep the files underneath the hood.

62
00:03:20.340 --> 00:03:23.070
They remain in memory
despite not being in view.

63
00:03:23.070 --> 00:03:25.852
So I can actually have those and
they'll load them up super fast.

64
00:03:25.852 --> 00:03:28.867
Because if you have a really large file,
you don't want to have to read the whole

65
00:03:28.867 --> 00:03:31.870
thing from your operating system again
just to get it back into memory.

66
00:03:31.870 --> 00:03:33.740
So they remain in memory.

67
00:03:33.740 --> 00:03:36.544
You can actually set certain
commands to make that easier,

68
00:03:36.544 --> 00:03:39.348
such as set hidden,
which means that you don't even have to

69
00:03:39.348 --> 00:03:42.621
save the buffer to put it into
the background, it will remain there.

70
00:03:42.621 --> 00:03:46.005
When you try to quit Vim,
it will say, hey, by the way,

71
00:03:46.005 --> 00:03:47.820
have you forgot to save this?

72
00:03:47.820 --> 00:03:49.420
Do you want to save this file or not?

73
00:03:49.420 --> 00:03:52.250
Right, so there's actually some
pretty nice ways you can use this.

74
00:03:52.250 --> 00:03:56.185
So set buff no listed means that when
we create the scratch buffer, it won't

75
00:03:56.185 --> 00:04:00.502
appear in this list, which is good, cuz
we don't wanna bunch of no names, right?

76
00:04:00.502 --> 00:04:06.210
We can also do a bufftype=nofile,
meaning it's just not a file type, right?

77
00:04:06.210 --> 00:04:09.719
It's just whatever, we won't receive
any specific highlighting or

78
00:04:09.719 --> 00:04:11.380
file operations upon it.

79
00:04:11.380 --> 00:04:16.171
And also, I believe it's like,
buffhidden=delete, meaning that when we

80
00:04:16.171 --> 00:04:21.108
leave it from our viewport, when we remove
it from the window, instead of being

81
00:04:21.108 --> 00:04:26.440
in the background, it will automatically
delete itself, fantastic, right?

82
00:04:26.440 --> 00:04:31.290
So now we can create a quick variable,
let's just call this output, why not?

83
00:04:31.290 --> 00:04:35.807
And this equals a system call, systemlist,
I believe it's called systemlist,

84
00:04:35.807 --> 00:04:37.316
I'm always so bad at this.

85
00:04:37.316 --> 00:04:40.698
And now here's where
VimL gets really [SOUND].

86
00:04:40.698 --> 00:04:43.810
You have to do A for
argument, command, right?

87
00:04:43.810 --> 00:04:48.940
So I'm passing in the argument
command into the systemlist.

88
00:04:48.940 --> 00:04:51.712
And now I have all this in systemlist,
what it does,

89
00:04:51.712 --> 00:04:55.920
is it executes a system command and
then creates it into a nice array.

90
00:04:55.920 --> 00:05:00.558
Since I am using a Neovim,
I could use some Neovim specific API's, or

91
00:05:00.558 --> 00:05:02.720
I can just use a easy Vim one.

92
00:05:02.720 --> 00:05:05.550
So I can just append the current buffer.

93
00:05:05.550 --> 00:05:09.729
So buffnr will get the current buffer,
I think it might be called bufnr,

94
00:05:09.729 --> 00:05:11.794
I can never remember these things.

95
00:05:11.794 --> 00:05:15.730
call buffnr, and then on top of that,
I can just pipe in the output.

96
00:05:15.730 --> 00:05:19.510
So we have a local argument, output,
let's shout out percent sign,

97
00:05:19.510 --> 00:05:24.020
we're still doing this, we're must be
calling something a little bit off.

98
00:05:24.020 --> 00:05:27.320
Let's call append, there we go,
we got it, we got it right.

99
00:05:27.320 --> 00:05:32.270
So now if I do the call scratch out, there
we go, we got it, look at that first try.

100
00:05:32.270 --> 00:05:35.657
We did our very, very, very first try
right here, we were actually able to take

101
00:05:35.657 --> 00:05:39.350
all these things and create something
that will actually open up our own stuff.

102
00:05:39.350 --> 00:05:41.692
Now I come in here and
I can edit these things do what I want.

103
00:05:41.692 --> 00:05:45.585
Effectively, the tutorial
that they do online,

104
00:05:45.585 --> 00:05:48.920
he wants to be able to edit SQL queries.

105
00:05:48.920 --> 00:05:51.961
So he has a way to be able to communicate,
get these things so he can bring

106
00:05:51.961 --> 00:05:54.798
it into Vim, do a light amount of editing,
and then put it back in,

107
00:05:54.798 --> 00:05:58.430
put it on a system clipboard, send it
back wherever he wants to send it back.

108
00:05:58.430 --> 00:06:00.770
And it's really, really nice to work with.

109
00:06:00.770 --> 00:06:01.915
And so scratch buffers are pretty cool.

110
00:06:01.915 --> 00:06:03.610
And this was really simple to write.

111
00:06:03.610 --> 00:06:08.164
I mean, despite the fact that I failed
like zero times as I did the first try,

112
00:06:08.164 --> 00:06:09.720
it's pretty trivial.

113
00:06:09.720 --> 00:06:12.570
It's four lines of code, and
it's actually can be pretty powerful.

114
00:06:12.570 --> 00:06:14.385
You could imagine what
we're piping into there.

115
00:06:14.385 --> 00:06:16.385
So there you go,
there's like a little simple plugin, and

116
00:06:16.385 --> 00:06:18.028
I do wanna do some a little
bit of pontificating.

117
00:06:18.028 --> 00:06:23.072
To me this is really kinda like
the important part, which is,

118
00:06:23.072 --> 00:06:29.086
what do I think is an ideal Vim command,
or setup, or an ideal vim plugin?

119
00:06:29.086 --> 00:06:34.186
What makes Vim one of the more ideal
ways to edit text, is once you learn

120
00:06:34.186 --> 00:06:40.220
everything, it becomes about thinking
about the thing you want to do.

121
00:06:40.220 --> 00:06:41.412
And your muscle memory,

122
00:06:41.412 --> 00:06:44.930
everything else can actually fill
in all the commands to do that.

123
00:06:44.930 --> 00:06:47.470
You want to replace all
the text in the function.

124
00:06:47.470 --> 00:06:50.614
You don't think about, okay,
do I need to jump down by four lines,

125
00:06:50.614 --> 00:06:51.449
what do I do here?

126
00:06:51.449 --> 00:06:55.930
No, you're just di squirly, you get them
all out, right, you just know right away.

127
00:06:55.930 --> 00:06:57.840
It becomes more and more simple.

128
00:06:57.840 --> 00:07:02.470
And so I feel like that's kind of really
where Vim shines is plugins that also do

129
00:07:02.470 --> 00:07:04.040
the same thing.

130
00:07:04.040 --> 00:07:08.568
So this is where I'll probably, and
no knocks on anyone that uses Lazygit, but

131
00:07:08.568 --> 00:07:11.406
I don't like it because
you have to do scrolling,

132
00:07:11.406 --> 00:07:15.660
you have to do a lot of Easter egging
to get to where you want to be.

133
00:07:15.660 --> 00:07:17.966
Let me show you something that's
a little bit different, and

134
00:07:17.966 --> 00:07:19.040
I'll show you how it works.

135
00:07:19.040 --> 00:07:20.740
I'm gonna do this all at the same time.

136
00:07:20.740 --> 00:07:22.335
I'm actually gonna edit a plugin and

137
00:07:22.335 --> 00:07:25.430
actually make a commit right now to
one of the plugins I've been using.

