WEBVTT

1
00:00:00.270 --> 00:00:02.780
So let's go to Files and Navigation.

2
00:00:02.780 --> 00:00:07.204
So now we're gonna really start getting
into a bit more Vim, all right?

3
00:00:07.204 --> 00:00:10.804
So now I'm going to assume that you
kinda feel fairly comfortable with at

4
00:00:10.804 --> 00:00:12.230
least J and K.

5
00:00:12.230 --> 00:00:15.702
Try to get comfortable with those,
don't use the arrow keys,

6
00:00:15.702 --> 00:00:18.926
avoid it where you can,
just get comfortable with J and K.

7
00:00:18.926 --> 00:00:22.266
I think this is where it is on Qwerty
keyboards, I use Dvorak, by the way.

8
00:00:22.266 --> 00:00:26.520
And I forget where all the keys
are on your hands, either way.

9
00:00:26.520 --> 00:00:31.260
So here is the repo that everyone should
clone down, hopefully everyone has it.

10
00:00:31.260 --> 00:00:33.380
We're gonna move forward now.

11
00:00:33.380 --> 00:00:37.210
I also have the HTTPS version,
you can get it from the website.

12
00:00:37.210 --> 00:00:40.250
So let's navigate to the playground.

13
00:00:40.250 --> 00:00:45.060
And instead of opening up Vim,
either to a specific file or

14
00:00:45.060 --> 00:00:49.983
just typing in vim,
this time we're gonna type in vim dot.

15
00:00:49.983 --> 00:00:53.191
Hopefully at this point, you have enough
knowledge about an operating system or

16
00:00:53.191 --> 00:00:54.570
at least a Unix operating system.

17
00:00:54.570 --> 00:00:58.670
I don't know if this is true on Windows,
but dot simply refers to itself.

18
00:00:58.670 --> 00:01:02.348
It's actually an inode that refers to
itself, if I'm not mistaken, and that,

19
00:01:02.348 --> 00:01:03.930
it's just a circular reference.

20
00:01:03.930 --> 00:01:09.640
So when you open this up, you are opening
up a directory at your current location.

21
00:01:09.640 --> 00:01:11.430
So let's do that now.

22
00:01:11.430 --> 00:01:15.950
This is what it looks like for me,
it probably looks very similar for you.

23
00:01:15.950 --> 00:01:20.252
And just maybe there's part of
you that feels a little bit more

24
00:01:20.252 --> 00:01:22.910
comforted cuz now you see a file tree.

25
00:01:22.910 --> 00:01:24.620
You're like, okay, okay.

26
00:01:24.620 --> 00:01:29.175
This feels more normal editor-esque,
at least there's a file tree.

27
00:01:29.175 --> 00:01:31.627
There's a whole bunch of stuff up here,
I'm not even gonna read it,

28
00:01:31.627 --> 00:01:32.990
it looks like a bunch of words.

29
00:01:32.990 --> 00:01:35.870
But in the end,
it looks like I could do something here.

30
00:01:35.870 --> 00:01:37.760
This is okay, okay, things are better.

31
00:01:38.970 --> 00:01:41.905
So we can definitely move around and
use this.

32
00:01:41.905 --> 00:01:43.550
And I'm gonna show you
how to use this now.

33
00:01:43.550 --> 00:01:49.640
So the thing about NetRW is that
it's a default plugin in Vim.

34
00:01:49.640 --> 00:01:52.890
It's also in Neovim, Space Vim,
I'm sure it's in all of them.

35
00:01:52.890 --> 00:01:54.910
All it is is just a file tree plugin.

36
00:01:54.910 --> 00:01:56.030
Is it the best?

37
00:01:56.030 --> 00:01:58.208
Absolutely not, but at the same time,

38
00:01:58.208 --> 00:02:02.350
I'm not convinced file trees
are fantastic to be relying on.

39
00:02:02.350 --> 00:02:06.809
The only time I ever use a file tree is
whenever I'm trying to create or delete or

40
00:02:06.809 --> 00:02:11.292
find a file in which I know its folder,
but I can't remember its name, right?

41
00:02:11.292 --> 00:02:14.358
And then often every now and
then if I'm in a JavaScript project,

42
00:02:14.358 --> 00:02:15.880
people love to use index.

43
00:02:15.880 --> 00:02:18.610
And so you have 400 index files.

44
00:02:18.610 --> 00:02:20.919
And so fuzzy finders are effectively
just destroyed, right?

45
00:02:20.919 --> 00:02:24.178
You press Ctrl+P in VS Code,
you can't find your index file, so

46
00:02:24.178 --> 00:02:27.390
you end up having to kind of
click around to get there.

47
00:02:27.390 --> 00:02:32.060
So that's usually my only use cases for
a file tree, and Vim has one.

48
00:02:32.060 --> 00:02:35.940
So let's try to open up a file via this.

49
00:02:35.940 --> 00:02:39.540
So how do you think we
move around inside NetRW?

50
00:02:40.720 --> 00:02:44.875
Hopefully, if you've been
remotely paying attention and

51
00:02:44.875 --> 00:02:49.790
my numerous amounts of clues,
J moves you up, K moves you down.

52
00:02:49.790 --> 00:02:53.170
You can move around just like you'd
move around any other piece of code.

53
00:02:53.170 --> 00:02:56.691
Because in reality,
this what you're seeing is just a buffer,

54
00:02:56.691 --> 00:02:59.420
just like the file you
were in was just a buffer.

55
00:02:59.420 --> 00:03:02.068
It is simply a representation
of something underneath.

56
00:03:02.068 --> 00:03:05.690
And you can interact with this buffer and
it will do things.

57
00:03:05.690 --> 00:03:08.783
So when I hover over source,
I can press Enter.

58
00:03:08.783 --> 00:03:12.030
Everyone go to source,
press Enter, get to it.

59
00:03:12.030 --> 00:03:16.090
Let's go all the way down to twitch.c,
this is a fake file.

60
00:03:16.090 --> 00:03:20.210
And as you can see, it's been highlighted,
it looks like this.

61
00:03:20.210 --> 00:03:24.040
This is obviously a fake include path,
that's not real, you can't do that.

62
00:03:25.220 --> 00:03:28.306
You see how this works,
is now we're starting to see, all right,

63
00:03:28.306 --> 00:03:31.660
we were able to take our file tree and
navigate there, awesome.

64
00:03:31.660 --> 00:03:34.140
But how do we get our file tree back,
right?

65
00:03:34.140 --> 00:03:36.600
We just got done opening it up,
it's gone now.

66
00:03:36.600 --> 00:03:38.592
I guess we're gonna have to quit Vim,
reopen it up and

67
00:03:38.592 --> 00:03:39.950
navigate to the next file.

68
00:03:39.950 --> 00:03:42.010
Honestly, I did that for a little bit.

69
00:03:42.010 --> 00:03:44.264
I didn't know how to do it, that's
how I just thought you had to do it,

70
00:03:44.264 --> 00:03:45.110
I didn't know.

71
00:03:45.110 --> 00:03:48.440
So instead what you can do is
you can type in another command.

72
00:03:48.440 --> 00:03:51.360
You can type in Ex, explore.

73
00:03:51.360 --> 00:03:56.020
And when you do that, it will replace
your current buffer with an explore view.

74
00:03:56.020 --> 00:04:00.100
The explore view will open
up at the file you're in.

75
00:04:00.100 --> 00:04:02.501
So notice that I was on twitch.c and

76
00:04:02.501 --> 00:04:05.980
it navigated to the same folder as that,
awesome.

77
00:04:05.980 --> 00:04:07.590
So I can reopen this back up.

78
00:04:07.590 --> 00:04:10.390
But let's say I wanna open it up, but
I don't want it to replace my buffer.

79
00:04:10.390 --> 00:04:13.520
I want it to have it to the side,
feel a little bit more comfortable.

80
00:04:13.520 --> 00:04:16.742
You can do vertical explore, right?

81
00:04:16.742 --> 00:04:18.330
My goodness, look at that.

82
00:04:18.330 --> 00:04:19.330
And then you can close it.

83
00:04:19.330 --> 00:04:22.748
If you like it horizontal, this is
the only one that doesn't really follow

84
00:04:22.748 --> 00:04:25.680
the expected conventions unless
if you know some Vim-isms.

85
00:04:25.680 --> 00:04:31.220
It's actually just Sex, and the reason
why is that it's called a split, right?

86
00:04:31.220 --> 00:04:35.820
And so it's a split explore, and
somehow that's just how it ended up being.

87
00:04:35.820 --> 00:04:39.850
And so you have vertical split explore,
split explore, and explore.

88
00:04:39.850 --> 00:04:42.740
And so now you kind of know
how to open these things up.

89
00:04:42.740 --> 00:04:44.170
And it also matches a bunch of commands.

90
00:04:44.170 --> 00:04:48.910
So later on, if we get into it,
you can open up windows by using s, right?

91
00:04:48.910 --> 00:04:53.413
So by using s, I've opened up a second
split of the same item right here.

92
00:04:53.413 --> 00:04:56.680
And it's a horizontal split, or
I can do it vertically, right?

93
00:04:56.680 --> 00:04:58.778
So it kinda feels that way
throughout the program.

94
00:04:58.778 --> 00:05:00.895
So it's gonna use a lot
of the same key commands.

95
00:05:00.895 --> 00:05:05.596
And hopefully you're starting to see
that Vim always redoes itself over and

96
00:05:05.596 --> 00:05:06.410
over again.

97
00:05:06.410 --> 00:05:10.600
Whatever one convention uses,
it's fairly consistent to use throughout.

98
00:05:10.600 --> 00:05:11.400
All right, quick question?

99
00:05:11.400 --> 00:05:14.401
So the question was, how do you navigate
between those tabs or between the splits?

100
00:05:14.401 --> 00:05:17.720
I was actually gonna go over
this in the quick fix section.

101
00:05:17.720 --> 00:05:21.540
But just to satiate that desire,
I'll tell you how to do it now.

102
00:05:21.540 --> 00:05:24.560
So I'm gonna give you a little
quick tip or a quick hint.

103
00:05:24.560 --> 00:05:30.520
If I press Ctrl+W,
it goes into window mode, right?

104
00:05:30.520 --> 00:05:33.560
You have a set of commands
based off Ctrl+W.

105
00:05:33.560 --> 00:05:37.190
I bet you can guess,
how do you move this way?

106
00:05:37.190 --> 00:05:39.005
Anyone wanna guess?

107
00:05:39.005 --> 00:05:43.180
L, the same way you would move
if you're moving on a line.

108
00:05:43.180 --> 00:05:47.410
If you did Ctrl+W and you went H,
you would hop back that way.

109
00:05:47.410 --> 00:05:54.380
If I were to split it, I could do Ctrl+W J
to jump down, Ctrl+W K to jump up.

110
00:05:54.380 --> 00:06:00.610
As you can see, Vim is constantly reacting
like itself in various situations.

111
00:06:00.610 --> 00:06:05.123
This is why I was hard so
much learning how to do these movements,

112
00:06:05.123 --> 00:06:09.040
cuz they constantly keep
repeating themselves.

113
00:06:09.040 --> 00:06:12.290
Making it easier and
easier as you get more and more advanced.

114
00:06:13.430 --> 00:06:16.670
And if you're wondering how I opened and
did all the splitting,

115
00:06:16.670 --> 00:06:19.139
I just did Ctrl+W, and
then either S or V right?

116
00:06:19.139 --> 00:06:22.660
S to do horizontal,
Ctrl+W V to do vertical.

117
00:06:22.660 --> 00:06:26.638
Remember, vertical and horizontal is
based on the direction of the split,

118
00:06:26.638 --> 00:06:29.070
not how they're oriented.

119
00:06:29.070 --> 00:06:30.050
And then one last fun one.

120
00:06:30.050 --> 00:06:32.950
Since we're already here, I'm gonna show
you my favorite command of all time.

121
00:06:32.950 --> 00:06:36.150
I know we're derailing and
it's gonna ruin my presentation later.

122
00:06:36.150 --> 00:06:41.080
If you have a bunch of splits open,
do Ctrl and then O.

123
00:06:41.080 --> 00:06:45.770
My goodness is what that stands for, it
closes everything but your current buffer.

124
00:06:45.770 --> 00:06:50.152
It's my favorite thing in the universe,
cuz often I'll have open one of these.

125
00:06:50.152 --> 00:06:52.705
Perhaps I'll open one of these, and
I just want everything else gone.

126
00:06:52.705 --> 00:06:53.893
So I can just go bam, bam.

127
00:06:53.893 --> 00:06:57.950
You can do Ctrl+W O, Ctrl+W Ctrl+O, right?

128
00:06:57.950 --> 00:07:01.278
You can do all these different
Ctrl+W Ctrl+O, Ctrl+W Ctrl+Shift+O,

129
00:07:01.278 --> 00:07:02.526
it doesn't really matter.

130
00:07:02.526 --> 00:07:06.400
As long as you hit Ctrl+W and O,
it will work, it's beautiful.

131
00:07:06.400 --> 00:07:09.680
I love it,
makes me feel super happy on the inside.

132
00:07:09.680 --> 00:07:12.844
So hopefully everyone feels
the exact same way, cuz [SOUND].

133
00:07:12.844 --> 00:07:16.870
Just okay, maybe I'm the only one that
gets that excited about a command, but

134
00:07:16.870 --> 00:07:18.640
it just is an incredible feeling.

