WEBVTT

1
00:00:00.240 --> 00:00:03.880
I can't kind of came up with one idea,
and I can show everyone this one.

2
00:00:03.880 --> 00:00:07.458
I have been working on this one for
a while just kind of trying to figure out

3
00:00:07.458 --> 00:00:10.500
how to formalize what it is and
it's called harpoon.

4
00:00:10.500 --> 00:00:13.280
And the general idea is that
there's two things you want.

5
00:00:13.280 --> 00:00:17.050
A harpoon is a very specific and
very precise instrument right?

6
00:00:17.050 --> 00:00:20.830
You get one chance, you load it up, you
shoot it, if you miss, it's completely,

7
00:00:20.830 --> 00:00:22.560
it's like it's worthless, right?

8
00:00:22.560 --> 00:00:24.430
You have to reel it back
in to get the weapon.

9
00:00:24.430 --> 00:00:27.354
So harpoon has this notion of being very,
like precise and

10
00:00:27.354 --> 00:00:29.751
that's kind of how I kinda
came up with this is.

11
00:00:29.751 --> 00:00:32.894
All right,
I want to be able to go to a terminal and

12
00:00:32.894 --> 00:00:37.726
I want that terminal to remain in memory
and I wanna be able to go to it over and

13
00:00:37.726 --> 00:00:39.980
over again or send commands to it.

14
00:00:39.980 --> 00:00:42.476
And I wanna be able to
pre specify per project,

15
00:00:42.476 --> 00:00:46.980
the commands I want to be able to send
to a terminal to go and execute, right?

16
00:00:46.980 --> 00:00:50.281
Because if you're in the terminal,
you can use that output and

17
00:00:50.281 --> 00:00:53.690
bring it back into them if
it's a terminal within them.

18
00:00:53.690 --> 00:00:55.315
And so when I press leader tu,

19
00:00:55.315 --> 00:00:59.153
it will actually take me to a new
terminal if I don't have one created,

20
00:00:59.153 --> 00:01:03.055
if I already have one created, and
say I leave and go back goes phase tu,

21
00:01:03.055 --> 00:01:07.330
it will go back to that created
terminal so I can keep things running.

22
00:01:07.330 --> 00:01:10.500
If I have commands being sent,
I can use things like that.

23
00:01:10.500 --> 00:01:12.240
I don't have any commands right now,
right?

24
00:01:12.240 --> 00:01:14.070
And look, there's kind of like
a little bit of a bug, right?

25
00:01:14.070 --> 00:01:16.853
I can send a list of commands
off to this terminal and

26
00:01:16.853 --> 00:01:19.150
it will do it right in front of me.

27
00:01:19.150 --> 00:01:22.680
And that's because it's
just linked into this.

28
00:01:22.680 --> 00:01:25.418
So every one of my projects,
I tend to have a build command.

29
00:01:25.418 --> 00:01:27.170
So I just do space cu to build it.

30
00:01:27.170 --> 00:01:29.460
I don't have to think about it,
I already know what's gonna happen.

31
00:01:29.460 --> 00:01:31.810
I already know what's gonna
happen correctly in the terminal.

32
00:01:31.810 --> 00:01:34.710
The terminal is not created,
the terminal will be created and

33
00:01:34.710 --> 00:01:37.560
hydrated with all the correct
environment and done for me.

34
00:01:37.560 --> 00:01:39.240
I just don't have to think about it.

35
00:01:39.240 --> 00:01:43.690
I think that that's what makes ideal
vim plugins are ideal vim usage.

36
00:01:43.690 --> 00:01:47.470
Is just stop with all
this overhead processing.

37
00:01:47.470 --> 00:01:52.435
So then another part about harpoon is, and
I know I'm specifically talking about this

38
00:01:52.435 --> 00:01:55.632
one plugin, but
there's a lot of plugins that do this,

39
00:01:55.632 --> 00:02:00.380
is that you're able to also navigate
to files that you've previously marked.

40
00:02:00.380 --> 00:02:03.430
So I have this notion of marks,
but they're living marks.

41
00:02:03.430 --> 00:02:07.415
They live across sessions, and
they don't actually mark a specific place,

42
00:02:07.415 --> 00:02:11.310
they're wherever you were at when
you were last in the buffer.

43
00:02:11.310 --> 00:02:13.600
And so if I wanna go to
there's a terminal bug, right?

44
00:02:13.600 --> 00:02:16.301
So I'm right here, I'm in this terminal,
if I do buffer delete,

45
00:02:16.301 --> 00:02:18.350
it'll actually delete that terminal.

46
00:02:18.350 --> 00:02:21.709
And if I try to go back to that terminal,
it goes, hey, I tried to navigate there,

47
00:02:21.709 --> 00:02:23.420
but it's actually been deleted.

48
00:02:23.420 --> 00:02:26.512
So here's a bug in my program,
and I want to fix it.

49
00:02:26.512 --> 00:02:30.170
With harpoon, I already know that if
I do Ctrl first finger power finger,

50
00:02:30.170 --> 00:02:33.769
right I'll go to my first marked file,
which is the marks actual program

51
00:02:33.769 --> 00:02:36.545
that I've made to do all the marking and
moving.

52
00:02:36.545 --> 00:02:38.835
If I do the second one,
I'll go to the terminal file.

53
00:02:38.835 --> 00:02:40.965
So I already knew before
I was ever even in here,

54
00:02:40.965 --> 00:02:44.790
if I jumped in here oopsies that's
what I typed in the previous terminal.

55
00:02:44.790 --> 00:02:46.630
That's vim c then dot, there we go.

56
00:02:46.630 --> 00:02:50.030
If I just did Ctrl+t,
I'd go right to the terminal file.

57
00:02:50.030 --> 00:02:50.830
I'm already there.

58
00:02:50.830 --> 00:02:52.960
I am now on my way to fixing the bug,
right?

59
00:02:52.960 --> 00:02:57.005
It's just this thing where I can have
a set of marks that are the files that I'm

60
00:02:57.005 --> 00:02:57.990
working on.

61
00:02:57.990 --> 00:03:00.432
When I quit, and I go out and
I go into work and

62
00:03:00.432 --> 00:03:04.659
I go into say the television device for
Netflix, I can do any of these files,

63
00:03:04.659 --> 00:03:07.360
which I've just
unfortunately redid on this.

64
00:03:07.360 --> 00:03:09.784
Dang it, I just redid all my,
redid this whole thing so

65
00:03:09.784 --> 00:03:11.320
now they don't work anymore.

66
00:03:11.320 --> 00:03:14.331
But I had all the text-to-speech things
all right on my fingertips because

67
00:03:14.331 --> 00:03:17.400
that's been what I've been working on for
the last couple of weeks.

68
00:03:17.400 --> 00:03:20.438
So now whenever I go in there and
I had to go in there many times,

69
00:03:20.438 --> 00:03:23.126
I was able to just jump to
the files I really needed, and

70
00:03:23.126 --> 00:03:26.925
the rest I just use the language server
protocol cuz most of the things you do in

71
00:03:26.925 --> 00:03:29.520
vim you're using jump to definition,
right?

72
00:03:29.520 --> 00:03:34.852
So if you're in a large JavaScript
project, here's one right here, and

73
00:03:34.852 --> 00:03:41.390
I'm looking at http2, I'm not gonna try to
go and search the project for the string.

74
00:03:41.390 --> 00:03:45.695
Instead, I'm gonna use a language server
to tell me where everything's at, right?

75
00:03:45.695 --> 00:03:49.445
And now I can use my quick fix navigation
to walk through all the occurrences.

76
00:03:49.445 --> 00:03:53.549
Notice that I'm not thinking about doing
the thing, I'm doing the thing, right?

77
00:03:53.549 --> 00:03:58.580
That's because I've made everything
be what I consider the vim way.

78
00:03:58.580 --> 00:04:02.780
Everything I want to do is one to
two keystrokes, exactly what I want.

79
00:04:02.780 --> 00:04:06.590
Sometimes there are three keystrokes and
I don't like that but it happens, right?

80
00:04:06.590 --> 00:04:08.140
I can jump to definition.

81
00:04:08.140 --> 00:04:11.643
I can see where it's being used at,
I can actually search the project for

82
00:04:11.643 --> 00:04:14.450
that string specifically
by doing a project word.

83
00:04:14.450 --> 00:04:17.768
I can jump out of here and
do a project search for whatever I want,

84
00:04:17.768 --> 00:04:20.130
it will come back with the list itself.

85
00:04:20.130 --> 00:04:23.195
And so everything is like really
tightly woven together to be able to

86
00:04:23.195 --> 00:04:23.960
navigate fast.

87
00:04:23.960 --> 00:04:28.020
But there's a few files that I'm
specifically working on I can just jump to

88
00:04:28.020 --> 00:04:28.604
it right?

89
00:04:28.604 --> 00:04:31.212
I jumped right away to
my frame parsing test

90
00:04:31.212 --> 00:04:35.060
cuz that's what I'm working on
right now for HTTP2, right?

91
00:04:35.060 --> 00:04:35.874
I'm gonna go in here and

92
00:04:35.874 --> 00:04:38.520
I'm gonna make sure that the frames
all being parsed correctly.

93
00:04:38.520 --> 00:04:40.990
And this will always be on there,
I can always jump to it.

94
00:04:40.990 --> 00:04:42.740
So when I go hey, what is this thing?

95
00:04:42.740 --> 00:04:46.082
I'm gonna jump to the definition, I'll
just jump back to my work file, right?

96
00:04:46.082 --> 00:04:50.658
And so that's what I kind of think
is the ideal way of just working in

97
00:04:50.658 --> 00:04:51.979
general with vim.

98
00:04:51.979 --> 00:04:56.141
Is trying to get to that point
where everything's one click away.

99
00:04:56.141 --> 00:04:59.841
Even the files you're working on,
are one click away, and so

100
00:04:59.841 --> 00:05:01.490
let's just do a quick one.

101
00:05:01.490 --> 00:05:03.530
I'm gonna walk through a couple things
that are pretty cool about that.

102
00:05:03.530 --> 00:05:06.020
I'm gonna jump in here and
jump to the file I want it to be.

103
00:05:06.020 --> 00:05:08.400
I know for
a fact it's during the creation.

104
00:05:08.400 --> 00:05:12.000
And I can see right here that I grabbed
the term handle, and I go, hey,

105
00:05:12.000 --> 00:05:15.724
if there's no term handle at this
location, meaning when I try to open up

106
00:05:15.724 --> 00:05:19.020
a terminal at this index, yeah,
then I create a terminal.

107
00:05:19.020 --> 00:05:21.760
What happened if that
terminal has gone bad?

108
00:05:21.760 --> 00:05:26.583
Well, I should probably be doing
some sort of something like or

109
00:05:26.583 --> 00:05:30.230
vim.api.nvim_buff_is_valid, right?

110
00:05:30.230 --> 00:05:31.550
It's still exists.

111
00:05:31.550 --> 00:05:34.028
I should be checking that too
cuz if I'm not doing that,

112
00:05:34.028 --> 00:05:36.760
then of course I ran into
that bug I just showed you.

113
00:05:36.760 --> 00:05:38.490
Buff id there we go.

114
00:05:38.490 --> 00:05:42.450
And if we do this,
this technically should fix the problem.

115
00:05:42.450 --> 00:05:44.830
But I also can send commands right?

116
00:05:44.830 --> 00:05:47.480
Look, I do pretty much the exact
same thing right here.

117
00:05:47.480 --> 00:05:51.005
If I'm sending commands I shouldn't
probably make sure that we're doing that.

118
00:05:51.005 --> 00:05:55.043
I should do some sort of like or
do this but that feels a little bit bad.

119
00:05:55.043 --> 00:06:00.551
So what happen if I just delete this,
right, go back up here, let's delete this

120
00:06:00.551 --> 00:06:06.238
thing and let's create a function, let's
paste that stuff in so I don't lose it.

121
00:06:06.238 --> 00:06:10.867
function_find_terminal, right
we can do by index,

122
00:06:10.867 --> 00:06:15.500
index there we go, and
11 down to that and boom.

123
00:06:15.500 --> 00:06:21.840
And now I can do find terminal and
I've just done it for both locations.

124
00:06:21.840 --> 00:06:27.940
Do that that Yep, place that go here For
up, paste that in, there we go.

125
00:06:27.940 --> 00:06:29.670
We got everything we effectively needed.

126
00:06:29.670 --> 00:06:35.200
We have at all I'm now doing it right here
five down, return term, handle awesome.

127
00:06:35.200 --> 00:06:38.281
And then if I look at my registry
history if I'm not mistaken,

128
00:06:38.281 --> 00:06:41.670
notice that I did have that at
one point it's in register one.

129
00:06:41.670 --> 00:06:43.300
So I actually need to go back up here.

130
00:06:43.300 --> 00:06:45.830
Go here go quotes one paste.

131
00:06:45.830 --> 00:06:47.400
I now have that original line.

132
00:06:47.400 --> 00:06:48.140
Awesome, right?

133
00:06:48.140 --> 00:06:49.560
Like I got everything I need in here.

134
00:06:49.560 --> 00:06:51.330
I believe I just live fix this.

135
00:06:51.330 --> 00:06:54.366
So I can just take this stage it, cc it,

136
00:06:54.366 --> 00:06:58.890
not even looking feature,
first try right, there we go.

137
00:06:58.890 --> 00:07:00.390
I'm using vim fugitive,

138
00:07:00.390 --> 00:07:05.224
which is another one of these one press,
like it just does what I want it to do.

139
00:07:05.224 --> 00:07:06.056
No, look at this,

140
00:07:06.056 --> 00:07:09.420
I just realized that I don't have
these things hooked up correctly.

141
00:07:09.420 --> 00:07:13.087
So I'm gonna quickly go in here,
I'm gonna go up to term bug,

142
00:07:13.087 --> 00:07:15.080
I'm gonna rebase off that.

143
00:07:15.080 --> 00:07:17.630
Dang it,
I have a conflict what happened in here?

144
00:07:17.630 --> 00:07:21.510
All right, so
let's reopen up my status window.

145
00:07:21.510 --> 00:07:25.060
So I have a conflict,
I could choose mine or choose theirs or

146
00:07:25.060 --> 00:07:27.570
I could just let's look at the split.

147
00:07:27.570 --> 00:07:28.910
What went wrong here, right?

148
00:07:28.910 --> 00:07:32.900
Obviously this is very zoomed in, so it's
probably pretty hard for you to be able to

149
00:07:32.900 --> 00:07:36.620
see these things but in the end,
I can go all right, which one do I want?

150
00:07:36.620 --> 00:07:40.927
Well, I probably want the one
that's on on my side right on,

151
00:07:40.927 --> 00:07:43.470
right there, the one right there.

152
00:07:43.470 --> 00:07:47.284
So I already have a keyboard shortcut to
go pick that side, and it will go and

153
00:07:47.284 --> 00:07:48.810
it will pick that side for me.

154
00:07:48.810 --> 00:07:51.360
I'm like, yes,
that's the side I want to do.

155
00:07:51.360 --> 00:07:54.972
And now it looks like, all my conflicts
are done, I don't need to do that anymore.

156
00:07:54.972 --> 00:07:58.168
I can go there, we can go back to here,
close it all down, commit it,

157
00:07:58.168 --> 00:08:00.310
you'll see that it's no longer there.

158
00:08:00.310 --> 00:08:04.025
Everything was kinda done in these one
little click processes where I'm able to

159
00:08:04.025 --> 00:08:06.630
go through one step at a time,
click a couple buttons and

160
00:08:06.630 --> 00:08:09.160
do large amounts of
actions really quickly.

161
00:08:09.160 --> 00:08:13.800
And then in the end cc feature, not this
we don't wanna do that forgot about that.

162
00:08:13.800 --> 00:08:15.910
We wanna go Git_rebase continue.

163
00:08:15.910 --> 00:08:20.012
I don't have that one yet,
cuz I don't do a lot of rebase is that and

164
00:08:20.012 --> 00:08:25.240
then conflicts and then Git_push origin
since we're doing a force, let's do it.

165
00:08:25.240 --> 00:08:27.390
Let's just force it right here.

166
00:08:27.390 --> 00:08:29.430
Boom, we have it up there,
I can go make a PR.

167
00:08:29.430 --> 00:08:30.970
We're done, fantastic.

168
00:08:30.970 --> 00:08:33.070
And so I just wanted to show
you some of that workflow.

169
00:08:33.070 --> 00:08:35.030
This is how I do a lot of my workflow.

170
00:08:35.030 --> 00:08:37.814
And notice I dint even have
a language server set up for Lua and

171
00:08:37.814 --> 00:08:39.515
I was able to do a huge amount of work.

172
00:08:39.515 --> 00:08:41.624
I was able to go to exactly
where I wanted to go,

173
00:08:41.624 --> 00:08:43.310
I was able to get all the things done.

174
00:08:43.310 --> 00:08:47.425
And so when I'm working with things
that have really nice language servers,

175
00:08:47.425 --> 00:08:51.033
such as C++ or TypeScript or Go,
it becomes incredibly simple cuz

176
00:08:51.033 --> 00:08:54.729
I have a couple files that I've
marked that I always wanna return to.

177
00:08:54.729 --> 00:08:58.950
Plus the what 50 files I'm gonna go jump
around in trying to find what I want.

