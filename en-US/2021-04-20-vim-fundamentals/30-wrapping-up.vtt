WEBVTT

1
00:00:00.193 --> 00:00:03.780
Hopefully, this feels aspiring,
this feels like wow,

2
00:00:03.780 --> 00:00:06.103
that workflow looked and felt fast.

3
00:00:06.103 --> 00:00:10.280
And hopefully I gave you that same feeling
there for just a moment of what a fast

4
00:00:10.280 --> 00:00:14.342
editing experience looks like,
because I just did a whole bunch of stuff.

5
00:00:14.342 --> 00:00:17.740
And I technically didn't practice that and
so except for the merge conflict,

6
00:00:17.740 --> 00:00:19.091
that's the only thing I knew.

7
00:00:19.091 --> 00:00:20.110
And so it all worked out.

8
00:00:20.110 --> 00:00:21.047
Hey, it all worked out.

9
00:00:21.047 --> 00:00:22.352
This probably even works.

10
00:00:22.352 --> 00:00:26.053
I'm sure if I just resourced it,
everything will just work first try, but

11
00:00:26.053 --> 00:00:27.183
we won't do that now.

12
00:00:27.183 --> 00:00:29.751
All right, I think that's about it.

13
00:00:29.751 --> 00:00:33.139
I think that's the end
of the Vim fundamentals.

14
00:00:33.139 --> 00:00:37.324
Plug clean, yeah, plug clean,
just simply, you want me to explain?

15
00:00:37.324 --> 00:00:40.131
Let's see is there are any
other commands for a plug?

16
00:00:40.131 --> 00:00:41.999
There are commands for the plug but

17
00:00:41.999 --> 00:00:44.840
even some plugins have
their own defined commands.

18
00:00:44.840 --> 00:00:48.480
If you look up conqueror of completion,
it actually has a bunch of stuff that it

19
00:00:48.480 --> 00:00:51.952
does, but if you're talking about plug
the vim plug, plug in, it has a few

20
00:00:51.952 --> 00:00:55.286
other ones, but I honestly only ever
used plug install and plug clean.

21
00:00:55.286 --> 00:01:00.355
How plug clean works, is you remember,
inside, here let me close, pen control.

22
00:01:00.355 --> 00:01:04.747
If you remember inside of here, all of
these plugins, whatever is inside of here,

23
00:01:04.747 --> 00:01:08.322
by the way, I mean you might have
noticed right away look, Python,

24
00:01:08.322 --> 00:01:10.360
auto formatting for Python, right?

25
00:01:10.360 --> 00:01:11.774
Everything's already available.

26
00:01:11.774 --> 00:01:15.597
So anything that appears between
here if I delete any of them, and

27
00:01:15.597 --> 00:01:19.646
then this is what happens between
these two, what's gonna happen?

28
00:01:19.646 --> 00:01:22.508
It's gonna go hey,
this is missing from your plugin list,

29
00:01:22.508 --> 00:01:23.942
do you wanna delete it, right?

30
00:01:23.942 --> 00:01:25.765
And so that's what plug clean does.

31
00:01:25.765 --> 00:01:28.926
Plug install just simply after
this thing has been executed,

32
00:01:28.926 --> 00:01:33.198
it will attempt to see which one of your
directories don't match the plug install.

33
00:01:33.198 --> 00:01:34.483
And that's all it does.

34
00:01:34.483 --> 00:01:35.623
It's actually pretty straightforward.

35
00:01:35.623 --> 00:01:36.584
That's fine hey, thank you.

36
00:01:36.584 --> 00:01:39.588
Hopefully got it,
hopefully let's see quite late here, but

37
00:01:39.588 --> 00:01:40.932
thanks yeah, no problem.

38
00:01:40.932 --> 00:01:42.341
Hopefully it was, if you're late,

39
00:01:42.341 --> 00:01:45.031
that's probably good because a lot
of the beginning stuff, I think.

40
00:01:45.031 --> 00:01:47.912
If you're from the stream,
which it sounds like,

41
00:01:47.912 --> 00:01:51.137
then you probably at least
have some vague familiarity.

42
00:01:51.137 --> 00:01:52.179
&gt;&gt; So two questions.

43
00:01:52.179 --> 00:01:53.000
&gt;&gt; Yeah.

44
00:01:53.000 --> 00:01:57.431
&gt;&gt; One is that, when you use an LSP, you
add extra dependencies outside of them.

45
00:01:57.431 --> 00:02:01.526
I know you just bootstrapped your laptop
with getting it back up to speed and

46
00:02:01.526 --> 00:02:02.310
everything.

47
00:02:02.310 --> 00:02:06.946
What are some patterns that you found for
success of getting your editor up and

48
00:02:06.946 --> 00:02:08.314
going on a new system?

49
00:02:08.314 --> 00:02:12.680
&gt;&gt; Well, I have, so
there's a couple of things there.

50
00:02:12.680 --> 00:02:14.044
First, there's like the new system itself.

51
00:02:14.044 --> 00:02:19.061
I'm gonna explore doing Git bare repos and
the .config folder, right?

52
00:02:19.061 --> 00:02:22.684
So that way my XDG config home or
whatever it is, I can actually like,

53
00:02:22.684 --> 00:02:23.942
just clone right into.

54
00:02:27.436 --> 00:02:30.018
And not even symlink you can
clone I believe Git bare repos.

55
00:02:30.018 --> 00:02:32.850
I have to go file there's an Atlassian,
I know I hate Atlassian,

56
00:02:32.850 --> 00:02:35.127
everyone hates Atlassian because of JIRA,
right?

57
00:02:35.127 --> 00:02:37.747
We all unfortunately use
a company that created JIRA.

58
00:02:37.747 --> 00:02:41.234
But they have a walkthrough on
how to do these bare repos for

59
00:02:41.234 --> 00:02:43.880
being able to do better .file management.

60
00:02:43.880 --> 00:02:45.844
And so I'm still working on that.

61
00:02:45.844 --> 00:02:49.880
So that's like the bootstrapping
of a computer, but the Vim stuff,

62
00:02:49.880 --> 00:02:52.602
I have all of my Vim stuff,
all nicely placed.

63
00:02:52.602 --> 00:02:55.610
So if you'll notice that I actually
have it quite a bit different,

64
00:02:55.610 --> 00:02:59.336
I have a bunch of these extra files,
here's all my mappings for harpoon, right?

65
00:02:59.336 --> 00:03:01.134
I have them all kind of by filed.

66
00:03:01.134 --> 00:03:04.097
And what that effectively does,
it allows it and

67
00:03:04.097 --> 00:03:07.362
I take advantage of what is
called Vims runtime path.

68
00:03:07.362 --> 00:03:08.156
I didn't go over that, but

69
00:03:08.156 --> 00:03:10.312
Vim has a runtime path just like your
computer has a runtime path, right?

70
00:03:10.312 --> 00:03:13.407
So if you try to execute say, nil, then it
looks on your computer's path to find it,

71
00:03:13.407 --> 00:03:15.079
it goes in order until
it finds the first one.

72
00:03:15.079 --> 00:03:20.168
Vim does effectively the same thing.

73
00:03:20.168 --> 00:03:23.107
At the boot it has a series of
runtime paths it looks forward till it

74
00:03:23.107 --> 00:03:23.755
finds its RC.

75
00:03:23.755 --> 00:03:28.268
Once it finds its RC, you can add in more
runtime paths or you can have specific

76
00:03:28.268 --> 00:03:32.575
folders In specific locations that
will get automatically sourced, and

77
00:03:32.575 --> 00:03:33.701
that's what I do.

78
00:03:33.701 --> 00:03:35.326
So I take every one of these and

79
00:03:35.326 --> 00:03:38.514
put them into my right now I'm
simlinking into my config.

80
00:03:38.514 --> 00:03:40.481
So I have this plugin folder.

81
00:03:40.481 --> 00:03:44.665
So inside of config and Vim, a init.vim.

82
00:03:44.665 --> 00:03:48.150
If you have in the same folder,
a plugin folder,

83
00:03:48.150 --> 00:03:53.090
it will automatically source every
one of those Vim scripts for you.

84
00:03:53.090 --> 00:03:55.451
Lua does not get automatically sourced.

85
00:03:55.451 --> 00:04:00.477
But if you have a Lua folder, it will put
that into the runtime lookup for Lua.

86
00:04:00.477 --> 00:04:02.968
So I have notes that I do
require the primeagen,

87
00:04:02.968 --> 00:04:06.893
it will actually look in all Lua folders
for a folder called the primeagen or

88
00:04:06.893 --> 00:04:10.756
a script called the primeagen.lua,
and then if there's an init.lua,

89
00:04:10.756 --> 00:04:12.776
it'll automatically execute that.

90
00:04:12.776 --> 00:04:16.586
So I have everything commented out right
now, but I can actually set up all of my

91
00:04:16.586 --> 00:04:20.308
harpoon to be able to be all Lua driven,
because it's a Lua plugin, right?

92
00:04:20.308 --> 00:04:23.266
So this is gonna be me slowly
moving my setup into Lua.

93
00:04:23.266 --> 00:04:27.896
And that's kinda how I do it, I have my
own repo, clone it down symlink it in

94
00:04:27.896 --> 00:04:32.541
right now into the my .config, and
then when I open up vim, it just works.

95
00:04:32.541 --> 00:04:34.169
I currently make Neovim,

96
00:04:34.169 --> 00:04:38.688
so we do this Neovim bragging to see
who has the latest version of Neovim.

97
00:04:38.688 --> 00:04:43.295
It's gonna be pretty embarrassing
if I do this but Neovim,

98
00:04:43.295 --> 00:04:48.445
my goodness, git pull origin master
git checked git fetch, right?

99
00:04:48.445 --> 00:04:54.385
Git fetch gosh this gonna be so
embarrassing git checkout master no.

100
00:04:54.385 --> 00:05:00.718
No, I'm 51 commits behind this is
just a travesty on the Internet.

101
00:05:00.718 --> 00:05:04.899
I'm 51 commits behind the git
checkout origin master and

102
00:05:04.899 --> 00:05:09.759
then I just literally I just make and
then sudo make install, right?

103
00:05:09.759 --> 00:05:12.787
And I just use vim the most
bleeding edge of Neovim just

104
00:05:12.787 --> 00:05:15.088
because it has all the sweet functions.

105
00:05:15.088 --> 00:05:19.788
I can't do sudo make install because
you're gonna see all my sweet pass

106
00:05:19.788 --> 00:05:20.896
codes but yeah.

107
00:05:20.896 --> 00:05:22.145
And so
it's just fun to be on the latest for

108
00:05:22.145 --> 00:05:23.593
me because it has all
those really nice API's.

109
00:05:23.593 --> 00:05:28.229
Like nvim buff is valid is in the 5x
branch with the bleeding edge branch you

110
00:05:28.229 --> 00:05:30.593
can't get it by doing a brew install.

111
00:05:30.593 --> 00:05:33.494
And so I'm always living on the edge.

112
00:05:33.494 --> 00:05:35.171
It's been really, really good.

113
00:05:35.171 --> 00:05:37.544
I've actually really enjoyed
using the latest and

114
00:05:37.544 --> 00:05:41.132
that's effectively my workflow setup,
is something super simple as that,

115
00:05:41.132 --> 00:05:44.573
just symlinking and going though I
am considering something different.

116
00:05:44.573 --> 00:05:48.320
So what's the benefit to Vim over Emacs?

117
00:05:48.320 --> 00:05:49.713
Is it purely preference?

118
00:05:49.713 --> 00:05:53.813
Effectively, I'd say more and
more at this point it becomes more and

119
00:05:53.813 --> 00:05:55.375
more purely preference.

120
00:05:55.375 --> 00:06:00.201
Just because Vim or
Emacs has an Evil mode, which is Vim mode.

121
00:06:00.201 --> 00:06:03.695
If I don't know how one to one it is
because I haven't used Emacs in depth

122
00:06:03.695 --> 00:06:05.748
enough to know if it is
one to one with Vim.

123
00:06:05.748 --> 00:06:09.636
But vim has its own eccentric ways of
doing things such as quick fix list and

124
00:06:09.636 --> 00:06:13.837
if you use Emacs with the default key
bindings you're gonna get carpal tunnel in

125
00:06:13.837 --> 00:06:14.792
like five years.

126
00:06:14.792 --> 00:06:18.645
Those things are terrifying but
nonetheless, besides for that,

127
00:06:18.645 --> 00:06:23.478
if you all only use Vim, really, you just
have a different set of plugins, right?

128
00:06:23.478 --> 00:06:27.116
They even now have apparently a magit for
Vim, so

129
00:06:27.116 --> 00:06:30.593
you can get the Emacs,
Git library now on Vim.

130
00:06:30.593 --> 00:06:31.976
So, we'll see.

131
00:06:31.976 --> 00:06:35.401
&gt;&gt; [APPLAUSE]
&gt;&gt; Bye.

132
00:06:35.401 --> 00:06:37.704
&gt;&gt; [APPLAUSE]
&gt;&gt; Appreciate it.

