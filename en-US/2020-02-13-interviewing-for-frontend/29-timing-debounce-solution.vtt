WEBVTT

1
00:00:00.420 --> 00:00:02.020
Debounce.

2
00:00:02.020 --> 00:00:06.525
If you've never thought about how
it works or an autocomplete, or

3
00:00:06.525 --> 00:00:11.203
I don't know any type of head solution,
we're gonna learn how now.

4
00:00:11.203 --> 00:00:15.914
If you have this probably, it's
a little trickier because it's hard to

5
00:00:15.914 --> 00:00:19.945
mentally picture if you've
never given any consideration.

6
00:00:19.945 --> 00:00:21.091
Let's go and solve this one.

7
00:00:21.091 --> 00:00:23.574
This one, I know I keep saying
they're all little tricky,

8
00:00:23.574 --> 00:00:25.321
cuz I consider these all a little tricky.

9
00:00:25.321 --> 00:00:27.779
I'll never say this one's an easy one.

10
00:00:27.779 --> 00:00:31.340
Maybe reversing a string was not too,
that's a good warm up question.

11
00:00:31.340 --> 00:00:35.067
But this one is a little tricky
if you've never considered it.

12
00:00:35.067 --> 00:00:36.896
Let's go and type it out.

13
00:00:36.896 --> 00:00:42.203
So debounce, what we're gonna do is
the signature would look something

14
00:00:42.203 --> 00:00:48.039
like debounce, thank you autocomplete,
and it would take a function in time.

15
00:00:48.039 --> 00:00:53.290
That means every time I wanna invoke this
function later, say some other function.

16
00:00:53.290 --> 00:00:59.307
Function 1, if I wanna invoke it later,
it'll fire here.

17
00:00:59.307 --> 00:01:04.082
But it won't actually execute what I
wanted to do until the time has passed

18
00:01:04.082 --> 00:01:05.169
sufficiently.

19
00:01:05.169 --> 00:01:10.574
So again in the type of head,
let's say mdn,

20
00:01:10.574 --> 00:01:14.997
we're looking at flat map earlier.

21
00:01:14.997 --> 00:01:19.440
If we're doing something like say fetching
results, we wouldn't want as I type along,

22
00:01:19.440 --> 00:01:20.993
a million requests going out.

23
00:01:20.993 --> 00:01:24.754
We'd only wanna do it
when I've stopped typing.

24
00:01:24.754 --> 00:01:28.029
And then the function actually executes.

25
00:01:28.029 --> 00:01:31.534
And once we're done with this I'll
show you how to implement throttle,

26
00:01:31.534 --> 00:01:32.978
which is a little different.

27
00:01:32.978 --> 00:01:33.803
Which means,

28
00:01:33.803 --> 00:01:38.282
as we type, it'll fire the first one but
it won't fire the subsequent ones.

29
00:01:38.282 --> 00:01:40.608
And then it'll wait and
then it'll fire the first one and

30
00:01:40.608 --> 00:01:41.735
fire the subsequent ones.

31
00:01:41.735 --> 00:01:45.811
Versus debounce, which hopefully
if I've explained it correctly,

32
00:01:45.811 --> 00:01:48.585
it will fire once you're
done doing the thing.

33
00:01:48.585 --> 00:01:53.492
So every time a new action comes in, say
that event list fires again, it's gonna

34
00:01:53.492 --> 00:01:58.390
stop the previous executions before
they were able to execute and then wait.

35
00:01:58.390 --> 00:01:58.955
It's gonna wait until it's done.

36
00:01:58.955 --> 00:02:03.595
All right, I know I talked a lot,
so let's implement debounce.

37
00:02:03.595 --> 00:02:06.552
So again, it's a function.

38
00:02:06.552 --> 00:02:08.965
I think everything today
has been a function.

39
00:02:08.965 --> 00:02:13.835
And it's gonna take some
other function and time.

40
00:02:13.835 --> 00:02:17.990
And that earlier example,
we want debounced function.

41
00:02:22.807 --> 00:02:24.045
And we're gonna wanna execute that.

42
00:02:24.045 --> 00:02:26.365
So, say this is in an event listener or
something like that.

43
00:02:26.365 --> 00:02:28.835
So, what's the trick?

44
00:02:28.835 --> 00:02:31.631
If it's a function that
you're gonna execute later,

45
00:02:31.631 --> 00:02:34.679
you're going to at some point
wanna return that function.

46
00:02:37.402 --> 00:02:42.513
Okay, What else do we wanna do?

47
00:02:42.513 --> 00:02:44.178
We know this is involving timing.

48
00:02:44.178 --> 00:02:47.905
So if I wanna say I only want this
executed every ten seconds or

49
00:02:47.905 --> 00:02:49.304
something like that.

50
00:02:49.304 --> 00:02:53.201
So set interval is something I'm gonna use
because there's two ways to do timing,

51
00:02:53.201 --> 00:02:54.601
set interval or set time out.

52
00:02:54.601 --> 00:02:58.053
Actually I don't want set interval,
I want set time outs.

53
00:02:58.053 --> 00:03:03.748
And set time outs gonna take some
function, not this function.

54
00:03:07.023 --> 00:03:10.555
Close it off, it's going to take the time.

55
00:03:10.555 --> 00:03:15.062
So I'm gonna pass in this time
argument that I got from up here.

56
00:03:15.062 --> 00:03:18.167
And then once the time has
expired as in the 10 seconds or

57
00:03:18.167 --> 00:03:21.216
500 milliseconds or
whatever you want has run down.

58
00:03:21.216 --> 00:03:25.584
I wanna invoke the function that
I was originally trying to call.

59
00:03:25.584 --> 00:03:26.859
So how do we evoke a function?

60
00:03:26.859 --> 00:03:28.525
We learned that in the previous exercise.

61
00:03:28.525 --> 00:03:32.170
Call or apply, right?

62
00:03:32.170 --> 00:03:33.196
So when this is done,

63
00:03:33.196 --> 00:03:36.517
when the timer has run out I wanna
actually call the function itself.

64
00:03:36.517 --> 00:03:42.457
So we'll say fn.apply, and
we'll give it the context of this,

65
00:03:42.457 --> 00:03:47.646
and we'll pass in the arguments,
which is pretty good.

66
00:03:47.646 --> 00:03:51.673
I could actually just leave that off.

67
00:03:51.673 --> 00:03:54.255
But if I'm trying to be
specific I could say arguments.

68
00:03:58.605 --> 00:04:03.863
Hm, okay, that's that's something,

69
00:04:03.863 --> 00:04:11.389
but what will happen if we
execute this debounce function?

70
00:04:11.389 --> 00:04:16.421
What will happen now, anybody, nobody?

71
00:04:16.421 --> 00:04:20.189
It's okay, I know we've been
solving problems for a while now,

72
00:04:20.189 --> 00:04:22.049
like a real tactile interview.

73
00:04:22.049 --> 00:04:22.744
Yes, Ratel.

74
00:04:22.744 --> 00:04:23.726
&gt;&gt; I didn't solve the problem.

75
00:04:23.726 --> 00:04:24.746
&gt;&gt; That's okay.

76
00:04:24.746 --> 00:04:27.128
&gt;&gt; [LAUGH] That's gonna fire five events,
right?

77
00:04:27.128 --> 00:04:34.627
&gt;&gt; Yeah, it will, it'll set up five,
or, one, two, three, four, five.

78
00:04:34.627 --> 00:04:37.870
Yes, that's five,
it will set up five set timeouts,

79
00:04:37.870 --> 00:04:41.481
which will at the end of the time
that we pass in will all fire.

80
00:04:41.481 --> 00:04:43.200
That's not what we want at all.

81
00:04:43.200 --> 00:04:45.190
At this point, we're just
delaying execution that function.

82
00:04:45.190 --> 00:04:49.496
What we want is if there's already
a function being executed, so

83
00:04:49.496 --> 00:04:51.939
think of the autocomplete example.

84
00:04:51.939 --> 00:04:56.039
If they're still typing, we don't
wanna fire this function apply until

85
00:04:56.039 --> 00:04:58.828
they're finished doing
the action that we want.

86
00:04:58.828 --> 00:05:03.466
And then we have the complete data that
we wanna execute on, then we fire that.

87
00:05:03.466 --> 00:05:09.830
So a way of doing that is remembering that
set timeout set interval return and ID.

88
00:05:09.830 --> 00:05:11.307
So we'll say setTimeoutId.

89
00:05:15.355 --> 00:05:19.106
And in this scope,
I'm gonna say setTimeoutId.

90
00:05:19.106 --> 00:05:23.121
We're gonna set it to null for now.

91
00:05:23.121 --> 00:05:26.012
All right, so
now we have at least a reference,

92
00:05:26.012 --> 00:05:28.557
if there's something already running.

93
00:05:28.557 --> 00:05:32.611
And if there's something running, we wanna
cancel it because the person still typing

94
00:05:32.611 --> 00:05:34.509
in this example, we wanna cancel that.

95
00:05:34.509 --> 00:05:38.443
So how do I check if something
exists in JavaScript?

96
00:05:38.443 --> 00:05:42.547
I say If, so if the setTimeoutId,
if it exists,

97
00:05:42.547 --> 00:05:46.765
we wanna cancel whatever
else was coming before.

98
00:05:46.765 --> 00:05:50.700
So instead of setting five set timeouts,
we only wanna set one.

99
00:05:50.700 --> 00:05:53.110
That means we cancel anything
else that was before it.

100
00:05:53.110 --> 00:05:54.196
So we're gonna clear interval.

101
00:05:57.121 --> 00:05:58.118
Or was it interval?

102
00:05:58.118 --> 00:06:00.205
No, sorry, clear timeout.

103
00:06:00.205 --> 00:06:02.089
I wouldn't penalize you
if you got it wrong.

104
00:06:02.089 --> 00:06:03.224
Set TimeoutId.

105
00:06:08.928 --> 00:06:14.975
Okay, so now what happens
when we call this in a row?

106
00:06:14.975 --> 00:06:18.952
Which one of these is
going to get executed?

107
00:06:18.952 --> 00:06:19.773
&gt;&gt; The last one.

108
00:06:19.773 --> 00:06:23.274
&gt;&gt; Yes, the last one,
because we're coming through.

109
00:06:23.274 --> 00:06:26.994
This is we're sending a timeout,
so we have a TimeoutId.

110
00:06:26.994 --> 00:06:30.739
The next time we invoke this function
it's gonna say, there's a TimeoutId,

111
00:06:30.739 --> 00:06:32.998
I'm gonna cancel that last one so
it never fires.

112
00:06:32.998 --> 00:06:34.168
It's like it never existed.

113
00:06:34.168 --> 00:06:37.328
And that's going to keep doing that
until this function is called.

114
00:06:37.328 --> 00:06:40.239
But there's one missing
step we need to do,

115
00:06:40.239 --> 00:06:43.712
which is what happens when
this function is called?

116
00:06:46.858 --> 00:06:48.487
&gt;&gt; Get rid of the TimeoutId.

117
00:06:48.487 --> 00:06:50.386
&gt;&gt; Exactly,
we need to get rid of the TimeoutId.

118
00:06:50.386 --> 00:06:54.088
Because otherwise, we're gonna get here,
and it will just be stuck,

119
00:06:54.088 --> 00:06:55.825
it'll never execute anything.

120
00:06:55.825 --> 00:07:01.374
So we're just gonna say, setTimeoutId,
we'll say it's equal to null.

121
00:07:05.034 --> 00:07:08.488
And that's how to implement debounce.

122
00:07:08.488 --> 00:07:11.525
If you've never seen it before or
thought about how it's implemented,

123
00:07:11.525 --> 00:07:12.785
it's a little challenging.

124
00:07:12.785 --> 00:07:15.165
But once you see it,
you start to think okay,

125
00:07:15.165 --> 00:07:18.688
I need to return a function that's
gonna work at some other point.

126
00:07:18.688 --> 00:07:19.456
Now that's debounce.

127
00:07:19.456 --> 00:07:23.004
If we wanna implement throttle,
very similar concept.

128
00:07:23.004 --> 00:07:27.568
Except throttle just says,
I wanna execute this first one, and

129
00:07:27.568 --> 00:07:33.583
I don't wanna execute anything else that
comes after it until the time has expired.

130
00:07:33.583 --> 00:07:39.057
So instead of clearing the timeout, we say
if there's a timeout, I would just return.

131
00:07:41.929 --> 00:07:45.904
Cuz it's saying, there's already something
running and the time hasn't expired yet.

132
00:07:45.904 --> 00:07:47.042
All right cool, I'll just return.

133
00:07:47.042 --> 00:07:48.273
So none of these would fire.

134
00:07:48.273 --> 00:07:49.261
This one would fire.

135
00:07:49.261 --> 00:07:51.383
None of these would fire
until the time has elapsed.

136
00:07:51.383 --> 00:07:53.415
And that's how to implement throttle.

137
00:07:53.415 --> 00:07:57.904
And you see you can gradually build up
a really powerful way of timing things, or

138
00:07:57.904 --> 00:08:02.594
setting things at certain intervals, if
you can implement debounce or throttle or

139
00:08:02.594 --> 00:08:03.871
something like that.

140
00:08:05.626 --> 00:08:11.031
All right, I know that one was challenging
if you've never seen it before.

141
00:08:11.031 --> 00:08:13.689
But hopefully now we understand
set timeouts and intervals and

142
00:08:13.689 --> 00:08:14.600
all that good stuff.

