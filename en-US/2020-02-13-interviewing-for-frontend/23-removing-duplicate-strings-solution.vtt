WEBVTT

1
00:00:00.012 --> 00:00:01.970
Removing duplicate from a string

2
00:00:03.490 --> 00:00:06.720
is the functional equivalent of
moving duplicate from an array.

3
00:00:06.720 --> 00:00:09.230
Because we learned in
the previous example,

4
00:00:09.230 --> 00:00:10.800
how we can convert
anything into the array.

5
00:00:10.800 --> 00:00:16.310
So I'm gonna start with,
I need a function that takes a string so

6
00:00:16.310 --> 00:00:22.010
called removeDuplicates (str) and it take
string here and it takes a string, and

7
00:00:23.640 --> 00:00:29.663
it's going to return some new string.

8
00:00:29.663 --> 00:00:35.841
One approach this problem
would be to take the string,

9
00:00:35.841 --> 00:00:41.095
convert it into an array,
create a new array.

10
00:00:41.095 --> 00:00:44.616
And then every time you run into something
that you haven't run into before,

11
00:00:44.616 --> 00:00:46.730
you just push that new array.

12
00:00:46.730 --> 00:00:50.227
So if we're gonna walk through
this mentally, I mean this,

13
00:00:50.227 --> 00:00:53.740
I haven't seen this because my
array is empty at this point.

14
00:00:53.740 --> 00:00:58.511
I'm gonna push this to the new array and
I'm gonna say every

15
00:00:58.511 --> 00:01:03.667
single time on that loop,
I'm just iterating over this array,

16
00:01:03.667 --> 00:01:07.791
I can say does the new array.includes or
indexOf?

17
00:01:07.791 --> 00:01:11.830
I know, it's thinking like how
can I iterate over the array?

18
00:01:11.830 --> 00:01:17.020
If you did it kind of with a double
four loop as in keeping the array,

19
00:01:17.020 --> 00:01:18.590
that's fine, it's a solution.

20
00:01:18.590 --> 00:01:21.770
It's not optimal but it's a solution and

21
00:01:21.770 --> 00:01:24.860
when you think about array.includes is
technically sort of doing the same thing.

22
00:01:24.860 --> 00:01:28.130
It's just doing it behind the scenes but
it's much faster so

23
00:01:28.130 --> 00:01:30.280
that's one solution and that would work.

24
00:01:30.280 --> 00:01:34.030
The same thing would work for
number strings or anything, I'm gonna take

25
00:01:34.030 --> 00:01:38.580
advantage of modern JavaScripts and
use a different data structure.

26
00:01:38.580 --> 00:01:42.940
And this was kind of I won't say a trick
because any other solution will work

27
00:01:42.940 --> 00:01:46.030
iterating use the four loop,
this way is a little bit more efficient.

28
00:01:46.030 --> 00:01:50.280
So first thing I'm gonna do is I'm
gonna create an array for my string, so

29
00:01:50.280 --> 00:01:53.360
I'm gonna say, string.splits.

30
00:01:53.360 --> 00:01:57.740
So I'm going to get a new array
of every string, I'm gonna say,

31
00:01:57.740 --> 00:01:59.400
doing this long hand.

32
00:01:59.400 --> 00:02:06.580
I'm gonna use a set rule,
what does a set do in JavaScript?

33
00:02:06.580 --> 00:02:07.080
Yes.

34
00:02:09.040 --> 00:02:11.910
&gt;&gt; It's like an array but
cannot have duplicate.

35
00:02:11.910 --> 00:02:16.489
&gt;&gt; Yes, set is a data structure in
JavaScript that can not have duplicate

36
00:02:16.489 --> 00:02:23.120
items so I can say new set And
then, I'm gonna pass in my array.

37
00:02:23.120 --> 00:02:27.350
I think you could actually
pass in a string into a set,

38
00:02:27.350 --> 00:02:29.690
it might decide actually work,
I haven't tried that yet.

39
00:02:29.690 --> 00:02:33.040
But just to be safe,
we have a set and then,

40
00:02:33.040 --> 00:02:36.990
I'm gonna take the set, and
I'm gonna call create a new string.

41
00:02:36.990 --> 00:02:41.193
So I'm gonna say newString is,

42
00:02:41.193 --> 00:02:49.180
I need to convert my set
back into an array so

43
00:02:49.180 --> 00:02:53.608
I can use an array.from or I'm gonna use
a spread operator because it's fancier.

44
00:02:53.608 --> 00:02:56.480
So that's gonna take that set which
now has all duplicates removed,

45
00:02:56.480 --> 00:02:58.040
converted back to array.

46
00:02:58.040 --> 00:03:01.115
Now I need to convert it back into
a string so I'm gonna say string.join.

47
00:03:07.304 --> 00:03:09.190
Thank you VS code for helping me there.

48
00:03:11.190 --> 00:03:16.345
And there you have a function that takes
an array and removes all the duplicates.

49
00:03:18.148 --> 00:03:21.272
So if you use the four loop and
use the additional array, that's fine too,

50
00:03:21.272 --> 00:03:23.120
that is a perfectly good solution.

51
00:03:23.120 --> 00:03:27.190
The set is a little bit fancier, I could
actually probably do this all in one line

52
00:03:27.190 --> 00:03:32.300
if I really wanted to, but I I'm not doing
it for the sake of being too complicated.

53
00:03:33.590 --> 00:03:35.370
So that wasn't too bad and

54
00:03:35.370 --> 00:03:38.450
hopefully now we're building up to
I can convert anything into Ray and

55
00:03:38.450 --> 00:03:41.690
then do whatever I want once it's
converted to a different data structure.

56
00:03:41.690 --> 00:03:44.520
This is also good question for
if you know your data structures,

57
00:03:44.520 --> 00:03:48.110
it will help you don't have to, you don't
have to memorize what maps and sets and

58
00:03:48.110 --> 00:03:49.970
weak maps are and things like that.

59
00:03:49.970 --> 00:03:52.620
But it's helpful for questions like these.

60
00:03:52.620 --> 00:03:58.230
But a general gem tip, if there's
something saying unique values use a set,

61
00:03:58.230 --> 00:03:59.190
it does all the work for you.

