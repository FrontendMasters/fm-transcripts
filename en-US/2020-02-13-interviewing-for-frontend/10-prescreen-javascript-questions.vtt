WEBVTT

1
00:00:00.110 --> 00:00:05.580
After the initial call or even during
the initial call, towards the end,

2
00:00:05.580 --> 00:00:10.100
or maybe it might be a separate call, you
might get a series of prescreen questions.

3
00:00:10.100 --> 00:00:14.420
Usually these are the larger companies
that wanna kind of vet you out before you

4
00:00:14.420 --> 00:00:18.910
get started, because interviewing someone
takes resources, it takes manpower.

5
00:00:18.910 --> 00:00:22.290
It takes people that have to take time
out of their day to do these things.

6
00:00:22.290 --> 00:00:24.460
So they wanna give prescreen questions,
say,

7
00:00:24.460 --> 00:00:28.560
is this person at least a little bit
qualified to be a front-end engineer?

8
00:00:28.560 --> 00:00:31.727
So I consider these base line
questions for JavaScript knowledge.

9
00:00:31.727 --> 00:00:34.430
So let's fire them off.

10
00:00:35.440 --> 00:00:37.420
What is the difference between const,
let, and var?

11
00:00:38.780 --> 00:00:39.897
Anybody?

12
00:00:39.897 --> 00:00:40.784
&gt;&gt; Scope.

13
00:00:40.784 --> 00:00:41.869
&gt;&gt; More.

14
00:00:46.504 --> 00:00:47.656
&gt;&gt; More on that?
&gt;&gt; Yeah,

15
00:00:47.656 --> 00:00:51.370
yeah [LAUGH]
&gt;&gt; Var is global, generally.

16
00:00:52.550 --> 00:00:55.710
Let is a little bit more narrow,
and const is fixed.

17
00:00:55.710 --> 00:00:58.829
You'll get yelled at by some JS lent
rule if you try to change it later.

18
00:01:01.210 --> 00:01:02.307
&gt;&gt; Okay, that was okay.

19
00:01:02.307 --> 00:01:04.340
&gt;&gt; Okay
&gt;&gt; So have that each other.

20
00:01:04.340 --> 00:01:06.200
It was okay.

21
00:01:06.200 --> 00:01:07.620
Scope is a good way to finding it.

22
00:01:07.620 --> 00:01:11.324
Var, I wouldn't say is global,
its global to whatever scope it but

23
00:01:11.324 --> 00:01:12.797
it's not gonns leak outside.

24
00:01:12.797 --> 00:01:16.285
But yes, const, it's not immutable,
people say it's immutable, but

25
00:01:16.285 --> 00:01:19.320
we probably have different
definitions of immutable.

26
00:01:19.320 --> 00:01:22.750
You can't point a const
to a different pointer.

27
00:01:22.750 --> 00:01:24.810
But you can modify that,
you can add objects, or

28
00:01:24.810 --> 00:01:27.180
you can add properties to an object,
things from array.

29
00:01:27.180 --> 00:01:28.870
We can't change that pointer.

30
00:01:28.870 --> 00:01:30.550
Let, you can change the pointer, but

31
00:01:30.550 --> 00:01:33.660
it's only gonna be scoped
to whatever the closure is.

32
00:01:33.660 --> 00:01:36.706
And var is hoisted to the top.

33
00:01:36.706 --> 00:01:37.300
So const and let,

34
00:01:37.300 --> 00:01:39.716
if you try to access them before
they're gonna throw a reference there,

35
00:01:39.716 --> 00:01:40.800
var will just throw undefined.

36
00:01:40.800 --> 00:01:43.120
Pretty simple.

37
00:01:43.120 --> 00:01:44.350
These aren't trick questions.

38
00:01:44.350 --> 00:01:48.190
It's just how fast and how comfortably
do you answer these questions?

39
00:01:50.280 --> 00:01:52.780
Okay, there are wrong answers, but there
aren't as many wrong answers to this.

40
00:01:52.780 --> 00:01:55.780
It's just like, does this person feel
confident in their JavaScript knowledge?

41
00:01:55.780 --> 00:01:57.520
That's it, not a trick.

42
00:01:57.520 --> 00:01:58.970
And as the interviewer,
you're not trying to trick them.

43
00:01:58.970 --> 00:02:00.380
These aren't trick questions.

44
00:02:00.380 --> 00:02:02.340
These aren't like one of trivia questions.

45
00:02:02.340 --> 00:02:04.430
These are just like,
do you know what you're talking about?

46
00:02:05.750 --> 00:02:07.670
Someone explain prototypical
inheritance to me?

47
00:02:09.080 --> 00:02:10.636
Anybody, anybody at all.

48
00:02:10.636 --> 00:02:12.132
&gt;&gt; I just did.

49
00:02:12.132 --> 00:02:15.368
&gt;&gt; [LAUGH] All right, what's a prototype?

50
00:02:19.551 --> 00:02:21.883
Nobody, this is funny engineering.

51
00:02:21.883 --> 00:02:23.317
All right, nobody.

52
00:02:23.317 --> 00:02:24.253
Yeah, take a shot.

53
00:02:24.253 --> 00:02:26.601
&gt;&gt; I'll take a shot.

54
00:02:26.601 --> 00:02:30.434
So when an object inherits
from another object,

55
00:02:30.434 --> 00:02:35.014
if that object that it inherited
from has some functions or

56
00:02:35.014 --> 00:02:39.130
properties, this new object,
it will have those.

57
00:02:40.780 --> 00:02:42.440
&gt;&gt; Yeah, I'll take that.

58
00:02:42.440 --> 00:02:43.430
Again, not a trick,

59
00:02:43.430 --> 00:02:48.060
JavaScript has a prototype,
a baseline prototype of the object.

60
00:02:48.060 --> 00:02:51.210
Everything inherits from the object,
so you can do all sorts of things.

61
00:02:51.210 --> 00:02:52.740
Everything in JavaScript has a prototype,

62
00:02:52.740 --> 00:02:55.120
it has a baseline object
that it inherits from.

63
00:02:55.120 --> 00:02:57.350
And when you create a new object
based on the other object,

64
00:02:57.350 --> 00:03:00.380
you can either inherit all those
properties, which you will be default, or

65
00:03:00.380 --> 00:03:03.040
you can overwrite them with your own and
so on, and so forth.

66
00:03:03.040 --> 00:03:05.740
The analogy I usually use,
it's not the best one.

67
00:03:05.740 --> 00:03:08.590
It's pretty good,
is parents with children.

68
00:03:08.590 --> 00:03:11.770
Do you have one parent with brown eyes,
you have another parent with brown eyes.

69
00:03:11.770 --> 00:03:13.040
The child could have brown eyes, or

70
00:03:13.040 --> 00:03:16.310
it could over write it and
have blue eyes, something like that.

71
00:03:16.310 --> 00:03:18.690
Again, I'm not looking for
too much detail or depth,

72
00:03:18.690 --> 00:03:21.210
it's just, do you know what
prototype is in JavaScript?

73
00:03:21.210 --> 00:03:23.940
Because it's underneath everything we do,
and

74
00:03:23.940 --> 00:03:25.760
I expect you to have some
baseline knowledge about that.

75
00:03:25.760 --> 00:03:30.126
It doesn't have to be in depth,
but don't fumble on it [LAUGH].

76
00:03:30.126 --> 00:03:31.243
Don't guess.

77
00:03:31.243 --> 00:03:34.070
If you're guessing,
that's pretty easy to tell.

78
00:03:34.070 --> 00:03:37.738
And a lot of times with these questions,
if it's a recruiter or things like that,

79
00:03:37.738 --> 00:03:41.302
they're not necessarily super well
versed in UI engineering, they might be,

80
00:03:41.302 --> 00:03:42.068
you never know.

81
00:03:42.068 --> 00:03:45.566
But they're gonna have kind of a general
answer, and they're looking for

82
00:03:45.566 --> 00:03:47.780
something that falls in that range.

83
00:03:47.780 --> 00:03:51.122
Again, it's not a true or
false or right or wrong.

84
00:03:51.122 --> 00:03:55.750
It's just talking about what
does this mean in JavaScript?

85
00:03:58.620 --> 00:04:02.860
&gt;&gt; It's the current scope
you're in which can change and

86
00:04:02.860 --> 00:04:07.890
if there is no scope,
that is the global window, object usually?

87
00:04:07.890 --> 00:04:09.070
&gt;&gt; Perfect answer, exactly right.

88
00:04:10.590 --> 00:04:14.410
I considered the global context of
everything that is available to access.

89
00:04:14.410 --> 00:04:15.730
So all the objects and

90
00:04:15.730 --> 00:04:17.830
functions are available to you
that are not locally defined.

91
00:04:19.260 --> 00:04:23.510
Yeah, and
if you haven't thought about this kind of

92
00:04:23.510 --> 00:04:25.790
high level abstract questions,
yeah, that's okay.

93
00:04:25.790 --> 00:04:26.890
That's what this course is for.

94
00:04:29.219 --> 00:04:30.500
What's the data structure of the DOM?

95
00:04:32.540 --> 00:04:33.240
&gt;&gt; Tree.

96
00:04:33.240 --> 00:04:35.097
&gt;&gt; Yes, it's a tree, that's it.

97
00:04:35.097 --> 00:04:39.700
[LAUGH] Again, not a trick question,
just have you thought about this before?

98
00:04:40.950 --> 00:04:41.450
What is a stack?

99
00:04:46.906 --> 00:04:48.820
It's a data structure, right, yeah.

100
00:04:48.820 --> 00:04:50.330
&gt;&gt; LIFO, FIFO.

101
00:04:50.330 --> 00:04:55.550
Last in, first out versus first in,
first out.

102
00:04:55.550 --> 00:04:56.590
&gt;&gt; Which one is which?

103
00:04:56.590 --> 00:05:01.570
&gt;&gt; Stack is LIFO, cue is FIFO
&gt;&gt; Yes, LIFO, FIFO, Last in,

104
00:05:01.570 --> 00:05:04.365
First Out is the stack,
First in, First Out as a cue.

105
00:05:04.365 --> 00:05:06.510
Think about if you need a mental model.

106
00:05:06.510 --> 00:05:09.220
You're standing in line, that's a cue.

107
00:05:09.220 --> 00:05:13.130
The first person that gets there's first
one that leaves if it's a fair line

108
00:05:13.130 --> 00:05:14.950
Stack is, it's reversed.

109
00:05:14.950 --> 00:05:18.190
It's like you get line and then actually
it's people in the back that go first.

110
00:05:18.190 --> 00:05:20.380
You're like, what, scammed again?

111
00:05:21.550 --> 00:05:23.577
I hate going to [INAUDIBLE].

112
00:05:23.577 --> 00:05:29.182
How you create these
structures in JavaScript?

113
00:05:29.182 --> 00:05:33.350
&gt;&gt; Bulk and bush with work for Stack.

114
00:05:33.350 --> 00:05:35.110
&gt;&gt; Yeah, it is an array pop and
push shift.

115
00:05:35.110 --> 00:05:41.490
Yeah, how can you tell if an image
element is loaded on the page?

116
00:05:47.810 --> 00:05:50.330
This one is a little more nuanced but

117
00:05:50.330 --> 00:05:55.790
there's an onload element of Images You
can just say is it on, has it loaded?

118
00:05:55.790 --> 00:05:57.530
It'll fire that call back.

119
00:05:57.530 --> 00:05:59.471
All right, what are call() and apply()?

120
00:06:01.189 --> 00:06:03.499
&gt;&gt; It's a way to call another method, but

121
00:06:03.499 --> 00:06:07.550
usually use it if you have to change
the scope you're calling with.

122
00:06:07.550 --> 00:06:09.970
I can't remember which is
which [INAUDIBLE] I put.

123
00:06:09.970 --> 00:06:10.690
&gt;&gt; I never can either.

124
00:06:10.690 --> 00:06:11.380
That's okay.

125
00:06:11.380 --> 00:06:15.050
All I would wanna know on this question
is their ways of changing the scope

126
00:06:15.050 --> 00:06:16.930
of the calling function.

127
00:06:16.930 --> 00:06:21.800
Yeah, and call is a series of arguments
and applies an array of arguments.

128
00:06:23.150 --> 00:06:25.760
Nice, we don't necessarily
need to apply as much anymore,

129
00:06:25.760 --> 00:06:29.090
because we have props or
we have array spreading, things like that.

130
00:06:29.090 --> 00:06:30.110
But it'd be good to know.

131
00:06:31.300 --> 00:06:32.370
What is event validation?

132
00:06:33.910 --> 00:06:38.370
So traditionally,
if you have event handlers in HTML,

133
00:06:38.370 --> 00:06:42.096
you could apply an event handler to
every single element you wanna have.

134
00:06:42.096 --> 00:06:46.560
Or using event delegation, you could say
I wanna have one event listener, and

135
00:06:46.560 --> 00:06:47.700
that's at the top.

136
00:06:47.700 --> 00:06:48.990
And when you click on something,

137
00:06:48.990 --> 00:06:51.390
it just bubbles up to the parent
that handles the event.

138
00:06:51.390 --> 00:06:52.390
That's an event delegation.

139
00:06:53.600 --> 00:06:56.850
I would want someone to know this cuz
event listeners are really expensive on

140
00:06:56.850 --> 00:06:59.840
a page cuz every time it renders,
gotta be like did something happen?

141
00:06:59.840 --> 00:07:00.590
Did something happen?

142
00:07:00.590 --> 00:07:06.090
So it's better to have one event handler
versus 60 for performance reasons.

143
00:07:06.090 --> 00:07:06.660
Event delegation.

144
00:07:06.660 --> 00:07:10.210
If you said something about bubbling,
that's also good to use.

145
00:07:11.410 --> 00:07:11.910
What is a worker?

146
00:07:17.880 --> 00:07:22.317
A worker is something you would use in
a browser to offload computationally

147
00:07:22.317 --> 00:07:23.880
expensive work.

148
00:07:23.880 --> 00:07:26.650
Three different thread cuz JavaScript is
single threaded, if you have something

149
00:07:26.650 --> 00:07:30.030
that's like tactically prime to 10,000,
numbers, something you want to do that and

150
00:07:30.030 --> 00:07:33.970
workers you're not blocking the UI,
cuz there's only one thread in JavaScript.

151
00:07:33.970 --> 00:07:35.410
And that's when you use one as well.

152
00:07:37.370 --> 00:07:39.540
All right, those appreciate questions.

153
00:07:39.540 --> 00:07:42.670
These are questions that I've been asked,
that you may get asked and

154
00:07:42.670 --> 00:07:45.980
that I can consider good
baseline knowledge of JavaScript.

155
00:07:45.980 --> 00:07:49.230
I know the HTML ones are a little tougher
because we don't actually think in

156
00:07:49.230 --> 00:07:52.310
that way, so those can be a little dicey.

157
00:07:52.310 --> 00:07:55.070
But in general, I would expect everyone
to know these questions off the bat,

158
00:07:55.070 --> 00:07:56.920
just kind of pop them off.

159
00:07:56.920 --> 00:07:59.990
Again, not looking for
precise correct answers.

160
00:07:59.990 --> 00:08:03.100
I just want that they have some
knowledge of what they're talking about.

161
00:08:04.620 --> 00:08:08.240
But importantly, why I didn't ask
is I didn't ask trivia questions.

162
00:08:08.240 --> 00:08:12.310
I didn't ask what object
plus array equals,

163
00:08:12.310 --> 00:08:14.110
which I've been asked in an interview.

164
00:08:14.110 --> 00:08:15.270
I don't know why.

165
00:08:15.270 --> 00:08:16.410
That doesn't tell me anything.

166
00:08:16.410 --> 00:08:19.870
It tells me they have some
weird funny knowledge.

167
00:08:21.530 --> 00:08:23.800
But you know what's funny is,
you get trivia questions and

168
00:08:23.800 --> 00:08:26.310
someone be like,
I read this weird trick about JavaScript.

169
00:08:26.310 --> 00:08:26.920
We'll hack the news.

170
00:08:26.920 --> 00:08:28.750
I'm gonna ask that to somebody.

171
00:08:28.750 --> 00:08:30.370
Is that relevant to the job?

172
00:08:30.370 --> 00:08:33.390
If they know that,
does that inform you of anything that

173
00:08:33.390 --> 00:08:36.070
they can do other than they
know some trivia questions?

174
00:08:36.070 --> 00:08:37.910
So if you're the interviewer,
don't ask trivia questions.

175
00:08:37.910 --> 00:08:39.860
Ask questions that you know.

176
00:08:39.860 --> 00:08:45.316
I see what I'm gonna face, its's even
real close, real closer, closer.

177
00:08:45.316 --> 00:08:49.120
You're probably thinking
your interview is easy,

178
00:08:49.120 --> 00:08:54.190
but that's because you already know
the answers to them, that's it.

179
00:08:54.190 --> 00:08:55.340
That's my big rat.

180
00:08:55.340 --> 00:08:57.890
Everybody says my interview,
my questions are easy.

181
00:08:57.890 --> 00:09:00.460
My Christian questions are easy,
my interviews easy.

182
00:09:00.460 --> 00:09:02.180
That's cause you already know the answer.

183
00:09:02.180 --> 00:09:03.600
If you didn't know the answer,

184
00:09:03.600 --> 00:09:06.870
would you be able to solve
your own interview questions?

185
00:09:06.870 --> 00:09:10.510
Probably not, if we're being honest,
probably not.

186
00:09:10.510 --> 00:09:11.170
If I'm being honest,

187
00:09:11.170 --> 00:09:15.070
I've asked questions that I wouldn't even
know the answer to right off the bat.

188
00:09:15.070 --> 00:09:16.540
If so, is that a valid interview question?

189
00:09:18.900 --> 00:09:22.620
This is something I really want us
to take seriously as an industry.

190
00:09:22.620 --> 00:09:24.240
Don't ask trivia questions.

191
00:09:24.240 --> 00:09:27.490
Don't ask weird algorithm
questions that aren't relevant.

192
00:09:27.490 --> 00:09:29.940
Ask questions that you
would know the answer to or

193
00:09:29.940 --> 00:09:31.985
is necessary in your day to day working.

194
00:09:31.985 --> 00:09:33.560
That's not much to ask, right?

195
00:09:34.970 --> 00:09:36.500
That was the application,
the initial call.

196
00:09:36.500 --> 00:09:37.540
That was a lot.

197
00:09:37.540 --> 00:09:39.880
That was a lot of information already.

198
00:09:39.880 --> 00:09:45.850
CATSA process interviewing is a grind,
it's about stamina, it's about endurance.

199
00:09:45.850 --> 00:09:47.850
And as the interviewer,

200
00:09:47.850 --> 00:09:51.840
what I wanna do is I wanna make
that process as easy as possible.

201
00:09:51.840 --> 00:09:54.400
Interviews are not gonna be easy,
rhey're never gonna be easy.

202
00:09:54.400 --> 00:09:55.770
They shouldn't be easy.

203
00:09:55.770 --> 00:09:57.460
We get paid a lot of money for

204
00:09:57.460 --> 00:10:02.340
we do, but at the end of the day I'm
not like bruised or bloody and sweaty.

205
00:10:02.340 --> 00:10:06.030
Maybe my back hurts from eating too much
free food as I'm leaning over my computer.

206
00:10:06.030 --> 00:10:09.200
But at the end of the day we get paid
a lot of money to do what we do,

207
00:10:09.200 --> 00:10:12.540
interviews should not be easy,
they should be fulfilling.

208
00:10:13.670 --> 00:10:18.430
Interviews should be like a first date,
pretty awkward, a little challenging,

209
00:10:18.430 --> 00:10:20.260
you have to put your best face forward.

210
00:10:20.260 --> 00:10:24.840
At the end, do you think if it works out,
you're yeah, that was really satisfying.

211
00:10:24.840 --> 00:10:26.340
I think we got to know each other.

212
00:10:26.340 --> 00:10:28.700
I think I wanna continue on
this journey with this person.

213
00:10:28.700 --> 00:10:30.380
There you go on a second date.

214
00:10:30.380 --> 00:10:31.580
That to me is what a interview should be.

215
00:10:31.580 --> 00:10:35.130
It should be challenging and
rewarding at the same time, but

216
00:10:35.130 --> 00:10:36.370
it shouldn't be frustrating.

217
00:10:36.370 --> 00:10:37.390
Not too much to ask, right?

