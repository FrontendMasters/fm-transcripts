WEBVTT

1
00:00:00.000 --> 00:00:01.250
Lets talk about arrays.

2
00:00:02.370 --> 00:00:06.660
And I'm not talking about the thing you
want at your compensation review of

3
00:00:06.660 --> 00:00:12.010
the year possible after
nothing tough crowd.

4
00:00:12.010 --> 00:00:13.490
Maybe is a hard question.

5
00:00:13.490 --> 00:00:14.770
Arrays the data structure.

6
00:00:16.170 --> 00:00:21.030
There are many ways to convert an item
into array, so if I have an object I can

7
00:00:21.030 --> 00:00:25.640
call object.entries() that will
give me an array of arrays.

8
00:00:25.640 --> 00:00:28.960
Where the first object in the array is or

9
00:00:28.960 --> 00:00:32.970
the first entry at index zero is the key,
there was the value.

10
00:00:32.970 --> 00:00:34.920
Actually and this is should be
something I use all the time.

11
00:00:34.920 --> 00:00:37.700
If you wanna just get the keys out,
you say object.keys and

12
00:00:37.700 --> 00:00:39.076
use that to iterate over an object.

13
00:00:39.076 --> 00:00:41.670
You can say array.from.

14
00:00:41.670 --> 00:00:44.910
It will take an array-like object.

15
00:00:44.910 --> 00:00:48.340
So function arguments
are an array-like object.

16
00:00:48.340 --> 00:00:51.060
They're not an array but they look like
one, and if you convert into an array,

17
00:00:51.060 --> 00:00:54.120
you can use array methods on it.

18
00:00:54.120 --> 00:00:55.500
What's another one?

19
00:00:55.500 --> 00:01:00.050
HTML elements or children, things
like that, not necessarily arrays but

20
00:01:00.050 --> 00:01:02.200
you can manipulate one with array.from.

21
00:01:02.200 --> 00:01:05.560
You could also use spread or

22
00:01:05.560 --> 00:01:11.180
whatever iterable that you want so strings
are iterable, other arrays are iterable.

23
00:01:11.180 --> 00:01:13.750
This just spreads this
odd amount into an array.

24
00:01:13.750 --> 00:01:15.790
So these are ways to get to an array.

25
00:01:15.790 --> 00:01:17.010
Useful methods that I find.

26
00:01:17.010 --> 00:01:18.490
There's a lot.

27
00:01:18.490 --> 00:01:21.707
I could actually do the entire list
cuz they're all pretty useful.

28
00:01:21.707 --> 00:01:27.240
Array .isArray is useful because if
you've been doing JavaScript a while,

29
00:01:27.240 --> 00:01:29.500
finding out if something's an array
was actually a hard problem.

30
00:01:29.500 --> 00:01:31.615
You couldn't actually do just type
of array because array's not a type,

31
00:01:31.615 --> 00:01:33.570
array would come back just as objects.

32
00:01:33.570 --> 00:01:36.360
So array .isArray is extremely useful.

33
00:01:36.360 --> 00:01:42.430
Filter, reduce, concat, join, pop, push I
won't go too much into these and assuming

34
00:01:42.430 --> 00:01:46.590
if you know, a little bit JavaScript
you probably have seen these before.

35
00:01:46.590 --> 00:01:50.770
But what's important to know about
these is which of these methods

36
00:01:50.770 --> 00:01:53.900
return in your re which of them don't.

37
00:01:53.900 --> 00:01:56.750
So filter, just give me a yesterday
returns a new array are now.

38
00:01:58.120 --> 00:01:58.940
&gt;&gt; Yes.

39
00:01:58.940 --> 00:02:01.579
&gt;&gt; Yes, it does reduce.

40
00:02:01.579 --> 00:02:02.498
&gt;&gt; Yes.

41
00:02:02.498 --> 00:02:05.794
&gt;&gt; Reduces the tricky one, reduce will
return anything you want to return you

42
00:02:05.794 --> 00:02:09.088
want to return objects,it will return
an object you want to turn an array,

43
00:02:09.088 --> 00:02:10.810
it will return an array.

44
00:02:10.810 --> 00:02:12.780
It will return pretty much
anything you want whatsoever.

45
00:02:12.780 --> 00:02:15.420
This is one of my favorite
methods of all time.

46
00:02:15.420 --> 00:02:19.690
I can do almost anything you want to
do in JavaScript with a reducer and

47
00:02:19.690 --> 00:02:23.330
that's why the famous map reduce, there's
the map part at radial or something and

48
00:02:23.330 --> 00:02:25.440
then reducing it down to
the object you want to get.

49
00:02:25.440 --> 00:02:27.640
That's probably like 50%
of programming that we do,

50
00:02:27.640 --> 00:02:29.300
if you're like being really honest.

51
00:02:29.300 --> 00:02:31.726
The other 50% is just reading
something from a database.

52
00:02:31.726 --> 00:02:33.697
I'm totally serious.

53
00:02:33.697 --> 00:02:36.040
[LAUGH] Like think about what your job
is and that's probably what it is.

54
00:02:36.040 --> 00:02:39.290
It's reducing something and
reading something from a database.

55
00:02:39.290 --> 00:02:41.090
Concat returns a new array or no?

56
00:02:43.500 --> 00:02:44.620
Yes, it does.

57
00:02:44.620 --> 00:02:45.640
It will join two arrays.

58
00:02:45.640 --> 00:02:48.570
It will join, it will actually
if you concat a function and

59
00:02:48.570 --> 00:02:51.340
you can add a function onto an end
of the array if you wanted to.

60
00:02:51.340 --> 00:02:51.840
Pop?

61
00:02:54.340 --> 00:02:56.230
No pop returns that first
item from the array.

62
00:02:56.230 --> 00:02:57.070
It just returns an item.

63
00:02:57.070 --> 00:02:58.750
It doesn't return the array.

64
00:02:58.750 --> 00:03:01.460
Push.
It doesn't return anything.

65
00:03:01.460 --> 00:03:03.090
It's just a method.

66
00:03:03.090 --> 00:03:06.250
Map, it does return a new array.

67
00:03:07.730 --> 00:03:10.977
All right, so now you know these methods.

68
00:03:10.977 --> 00:03:12.560
You don't have to know them
like the back of your hand.

69
00:03:14.350 --> 00:03:18.600
Weird, but I do recommend
knowing at least some of these.

70
00:03:18.600 --> 00:03:22.650
Cuz again, almost anything you wanna
do you can do it with an array.

71
00:03:22.650 --> 00:03:24.860
As long as you know how to
convert something into an array.

72
00:03:24.860 --> 00:03:26.100
You can start manipulating with these.

