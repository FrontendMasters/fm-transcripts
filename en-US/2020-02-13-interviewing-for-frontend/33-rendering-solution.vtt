WEBVTT

1
00:00:00.060 --> 00:00:03.090
This one is challenging if you've
never seen a request animation frame.

2
00:00:03.090 --> 00:00:07.610
So, if nothing else, it's a good example
of how you'd move something smoothly

3
00:00:07.610 --> 00:00:10.930
into the dom which is something you would
probably have to do as a UI engineer.

4
00:00:10.930 --> 00:00:11.970
So let's start with this function.

5
00:00:15.630 --> 00:00:17.190
And we'll call it move elements.

6
00:00:18.800 --> 00:00:20.338
And it takes the duration.

7
00:00:22.712 --> 00:00:25.010
Takes the distance, and
it takes an element.

8
00:00:28.180 --> 00:00:31.370
Okay, in this one we're not returning

9
00:00:31.370 --> 00:00:34.980
anything necessarily because that's
not the point of this function.

10
00:00:34.980 --> 00:00:37.210
Everything we do is
going to update the dom.

11
00:00:37.210 --> 00:00:38.480
It's gonna update the element itself.

12
00:00:38.480 --> 00:00:40.640
So we don't actually
have to return anything.

13
00:00:40.640 --> 00:00:45.280
But in this case,
I wanna use request animation to call

14
00:00:46.520 --> 00:00:49.180
the element,
find out where that element is, and

15
00:00:49.180 --> 00:00:52.960
then move it incrementally based on
the duration that I wanna move over.

16
00:00:54.010 --> 00:00:56.429
So the first thing I'm gonna do is I'm
gonna call request animation frame.

17
00:00:59.280 --> 00:01:04.290
Which again, is a function that
is available on the window.

18
00:01:04.290 --> 00:01:06.670
So it's there, if you go in your console
and type request animation frame,

19
00:01:06.670 --> 00:01:07.300
it'll pop right up.

20
00:01:08.890 --> 00:01:11.490
And I wanna start off by moving.

21
00:01:12.570 --> 00:01:13.245
I wanna call this function.

22
00:01:13.245 --> 00:01:17.432
I'm gonna call this function in and
we'll call it, let's get creative here,

23
00:01:17.432 --> 00:01:18.566
we'll call it move.

24
00:01:23.603 --> 00:01:27.230
And this is my workhorse,
this is where all the logic is gonna be.

25
00:01:27.230 --> 00:01:31.570
requestAnimationFrame is just a callback,
if you will, or

26
00:01:31.570 --> 00:01:33.460
move is technically a callback.

27
00:01:33.460 --> 00:01:35.449
So requestAnimationFrame,
we're gonna call move on this.

28
00:01:37.876 --> 00:01:41.960
So this will invoke this
function the first time around.

29
00:01:41.960 --> 00:01:44.930
And what I wanna do is because I'm
moving something over a duration,

30
00:01:44.930 --> 00:01:47.340
we'll say const.

31
00:01:47.340 --> 00:01:50.950
We'll get the start time
equals performance.now.

32
00:01:50.950 --> 00:01:52.250
You can also do new date.

33
00:01:52.250 --> 00:01:53.392
It doesn't really matter.

34
00:01:53.392 --> 00:01:56.140
I like performance.now cuz
it's pretty short in syntax.

35
00:01:56.140 --> 00:02:01.240
That's gonna give me the time
that this animation started.

36
00:02:01.240 --> 00:02:02.990
When requestAnimationFrame
calls a function,

37
00:02:02.990 --> 00:02:06.650
it also passes in
a high-resolution DOM timestamp.

38
00:02:06.650 --> 00:02:08.470
That is the actual name of the thing,
wait.

39
00:02:08.470 --> 00:02:10.498
I can see people don't believe me.

40
00:02:10.498 --> 00:02:15.982
Let's see, high-resolution timestamp.

41
00:02:19.398 --> 00:02:21.530
See it's a real thing,
Dom High Res Time Stamp.

42
00:02:21.530 --> 00:02:24.810
I don't know,
there's some skeptics out there, I know.

43
00:02:24.810 --> 00:02:27.510
But, we know that it's
gonna be somewhere along

44
00:02:27.510 --> 00:02:31.482
the lines of performance unknown in terms
of accuracy and in terms of moving.

45
00:02:31.482 --> 00:02:35.110
Because requestAnimationFrame is almost
always used to animate something.

46
00:02:35.110 --> 00:02:40.396
So I'm gonna say Timestamp,
we'll call it current time.

47
00:02:44.710 --> 00:02:49.110
Okay, what's the next way
I think of this problem?

48
00:02:50.490 --> 00:02:53.327
Well, requestAnimationFrame
is gonna call move one time.

49
00:02:53.327 --> 00:02:55.640
And then that's it.

50
00:02:55.640 --> 00:02:59.560
So we need requestAnimationFrame
to call move again.

51
00:02:59.560 --> 00:03:02.670
So it's gonna keep referencing
itself until some condition is met.

52
00:03:03.910 --> 00:03:07.030
So I wanna wrap this in an if statement
because we don't want it to continually

53
00:03:07.030 --> 00:03:08.422
call over and over and over again.

54
00:03:08.422 --> 00:03:11.850
We'll say if something,
we'll come back to that.

55
00:03:11.850 --> 00:03:12.700
All right.

56
00:03:12.700 --> 00:03:15.230
So now we have an animation loop of sorts.

57
00:03:15.230 --> 00:03:17.900
It's not doing anything, but
it will call itself over and over and

58
00:03:17.900 --> 00:03:19.160
over again to move in elements.

59
00:03:20.330 --> 00:03:21.820
What do we want to do next?

60
00:03:25.720 --> 00:03:28.380
We want to actually
move the element right.

61
00:03:28.380 --> 00:03:30.100
And how would we do that in JavaScript?

62
00:03:30.100 --> 00:03:36.230
We can say elements.style.

63
00:03:36.230 --> 00:03:45.090
And we're gonna run a transform equals,
we're gonna wanna translate x.

64
00:03:47.270 --> 00:03:49.150
And we're gonna wanna
move it some distance.

65
00:03:49.150 --> 00:03:53.175
So, we don't actually know the distance
yet, so I'll leave that blank.

66
00:03:53.175 --> 00:03:55.844
And that's gonna be in pixels.

67
00:03:55.844 --> 00:03:59.086
This sounding familiar to anybody?

68
00:03:59.086 --> 00:04:02.630
You've done it,
you've probably done it in CSS.

69
00:04:02.630 --> 00:04:06.490
Doing it in JavaScript is very similar,
it's just different names of things.

70
00:04:07.490 --> 00:04:09.990
Now you're troopers,
you're all hanging in there.

71
00:04:09.990 --> 00:04:15.230
All right, this is where the math comes
in and it's not pleasant, I'm kidding.

72
00:04:15.230 --> 00:04:18.550
It's just a way of how you think about it.

73
00:04:18.550 --> 00:04:23.480
So given a duration, distance, and
time, how do we calculate out,

74
00:04:23.480 --> 00:04:28.676
what's the rough formula to figure
out how much we should move per loop?

75
00:04:28.676 --> 00:04:32.188
Well let's start with
let's start with elapsed.

76
00:04:32.188 --> 00:04:34.295
Let's figure out how
much time has passed and

77
00:04:34.295 --> 00:04:37.080
then we can use that to calculate
the distance that we need.

78
00:04:43.980 --> 00:04:44.480
Okay.

79
00:04:45.690 --> 00:04:49.670
Pretty follow so far to get the elapsed
time we take, what time is it now?

80
00:04:49.670 --> 00:04:51.310
What time did we start?

81
00:04:51.310 --> 00:04:55.640
We started at 4 o'clock and
it's now 4:05, five minutes have elapsed.

82
00:04:55.640 --> 00:04:57.710
That's what elapsed time is gonna give us,
okay.

83
00:04:58.830 --> 00:05:01.561
So to get the progress,
this is were the mathy part comes in.

84
00:05:06.988 --> 00:05:08.410
Hm.

85
00:05:09.700 --> 00:05:16.110
We can say how much time has
elapsed over the total duration.

86
00:05:17.960 --> 00:05:22.030
So what's the ratio of how much time
has been spent versus how much time we

87
00:05:22.030 --> 00:05:23.270
want to spend.

88
00:05:23.270 --> 00:05:25.200
That gives us the progress.

89
00:05:26.570 --> 00:05:27.760
Good so far?

90
00:05:27.760 --> 00:05:33.200
This is why, if you got to
figure out the animation loop,

91
00:05:33.200 --> 00:05:35.210
I'd say you're doing pretty well so far.

92
00:05:35.210 --> 00:05:37.420
The mathy part is where
it gets a little tricky.

93
00:05:37.420 --> 00:05:40.190
And honestly, this is where I got
flustered because I just got stuck and

94
00:05:40.190 --> 00:05:41.380
I couldn't figure out the math part.

95
00:05:41.380 --> 00:05:44.270
I just conceptually couldn't do it.

96
00:05:44.270 --> 00:05:46.300
That's okay.
It's going to happen.

97
00:05:46.300 --> 00:05:50.290
I think if you demonstrate a good effort,
most interviewers will be like okay.

98
00:05:50.290 --> 00:05:52.120
They didn't get quite the formula but

99
00:05:52.120 --> 00:05:54.550
if they had a real coding they
would probably figure this out.

100
00:05:54.550 --> 00:05:56.920
Like you can figure out the distance and
the stuff like that.

101
00:05:58.050 --> 00:06:01.910
So next thing we want to figure out is,
we want to figure out what goes in here.

102
00:06:01.910 --> 00:06:04.560
How much should we move
it on every single loop?

103
00:06:04.560 --> 00:06:07.716
So I'll call that amounts to move.

104
00:06:10.018 --> 00:06:15.640
And so for that we can say,
we'll figure out.

105
00:06:18.850 --> 00:06:23.320
We have now the progress is essentially
a ratio of how much has elapsed.

106
00:06:23.320 --> 00:06:28.299
So if we multiply that ratio times
the distance that we want to move.

107
00:06:29.880 --> 00:06:35.148
we can get, Yeah.

108
00:06:37.567 --> 00:06:39.670
The math is tricky conceptually.

109
00:06:39.670 --> 00:06:44.040
So it helps to say, all right,
we gotta last, five minutes have elapsed.

110
00:06:44.040 --> 00:06:45.710
I'm just using minutes cuz it's easier.

111
00:06:45.710 --> 00:06:47.600
Five seconds have elapsed.

112
00:06:47.600 --> 00:06:51.060
So we get the ratio of how much has
elapsed versus how much should elapse.

113
00:06:51.060 --> 00:06:57.877
So 5 seconds over, we'll say,
500 milliseconds, what is that?

114
00:06:57.877 --> 00:07:04.446
That's 1%, 10%, okay, wait,
is that 10%, yes, okay.

115
00:07:06.587 --> 00:07:07.221
Don't judge me.

116
00:07:07.221 --> 00:07:08.547
500 [LAUGH], 5 over 500.

117
00:07:08.547 --> 00:07:13.651
All right, so it's 1%.

118
00:07:13.651 --> 00:07:20.070
So at this point I want 1% of the distance
because that's how much should be moving.

119
00:07:20.070 --> 00:07:22.112
And then that's the amount
to move in pixels.

120
00:07:22.112 --> 00:07:28.741
Okay, so it's all about changing your
thinking in this particular scenario.

121
00:07:28.741 --> 00:07:32.170
I didn't, and
I got hung up on the math and it got me.

122
00:07:33.670 --> 00:07:36.540
So, we still need to exit at
some point because if we don't

123
00:07:36.540 --> 00:07:38.140
cross that many streams,
we can keep going over and

124
00:07:38.140 --> 00:07:40.540
over and over to the keep moving and
moving and moving.

125
00:07:40.540 --> 00:07:44.480
So I can say if the amount to move is

126
00:07:44.480 --> 00:07:48.940
less than the distance that we're actually
supposed to move, then call it again.

127
00:07:48.940 --> 00:07:52.040
And once that amountToMove has gone over,

128
00:07:52.040 --> 00:07:55.720
it's greater than the distance, then we
don't call it anymore, and we're done.

129
00:07:56.780 --> 00:07:58.770
And that's how to move an element
using requestAnimationFrame.

130
00:07:58.770 --> 00:08:01.056
And when you do it, it's gonna be very
smooth, it's gonna be like [SOUND] and

131
00:08:01.056 --> 00:08:01.787
then it's gonna stop.

132
00:08:01.787 --> 00:08:06.920
Now if you're thinking,
how do I get it to move quickly?

133
00:08:06.920 --> 00:08:10.123
And then I can move it quickly,
which would be like easing

134
00:08:10.123 --> 00:08:13.262
some sort of easing function
that gives move quickly and

135
00:08:13.262 --> 00:08:16.686
then slow down at the end or
start slow and move really quick.

136
00:08:16.686 --> 00:08:19.932
Which, I wouldn't necessarily ask
you to in a technical interview, but

137
00:08:19.932 --> 00:08:21.712
that's because it's more math heavy,

138
00:08:21.712 --> 00:08:24.768
we would change how we calculate
this formula for the amount to move.

139
00:08:24.768 --> 00:08:28.010
All right, all right.

140
00:08:29.270 --> 00:08:31.140
Home stretch, we're almost there.

141
00:08:31.140 --> 00:08:36.120
Nice job, if you solved this one,
really good, this one's a little tricky.

142
00:08:36.120 --> 00:08:39.200
But the main part I want you to take
away is requestAnimationFrame, for

143
00:08:39.200 --> 00:08:41.140
doing any sort of movement.

144
00:08:41.140 --> 00:08:42.670
Someone says, hey,
how do you animate this thing?

145
00:08:42.670 --> 00:08:44.530
Just say, requestAnimationFrame.

146
00:08:44.530 --> 00:08:47.300
Could you do this in a for-loop,
absolutely.

147
00:08:47.300 --> 00:08:49.430
Will it be smooth, no.

148
00:08:49.430 --> 00:08:51.340
That's always the trick,
movement, requestAnimationFrame.

