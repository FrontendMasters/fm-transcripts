WEBVTT

1
00:00:00.000 --> 00:00:02.667
All right, next problem.

2
00:00:02.667 --> 00:00:04.661
I've got this problem
with duplicate strings.

3
00:00:04.661 --> 00:00:05.797
I've got too many strings.

4
00:00:05.797 --> 00:00:10.591
So what I need you to do is create
a function that takes a string,

5
00:00:10.591 --> 00:00:14.129
returns a new string
with duplicates remove.

6
00:00:14.129 --> 00:00:20.386
So my test case for this is a test string.

7
00:00:20.386 --> 00:00:23.347
And I want you to create a function
that takes in a string and

8
00:00:23.347 --> 00:00:25.107
just removes all the duplicates.

9
00:00:25.107 --> 00:00:29.301
So it should return this is a test string,
or something along those lines.

10
00:00:29.301 --> 00:00:34.843
And this one is a little trickier,
so I'll say ten minutes on this one.

11
00:00:34.843 --> 00:00:38.316
And remember those methods we used
earlier, they'll be really helpful here.

12
00:00:38.316 --> 00:00:40.513
&gt;&gt; So questions, is this only for

13
00:00:40.513 --> 00:00:44.151
words that are the same that
are next to each other?

14
00:00:44.151 --> 00:00:47.824
Or if there was another
is in that sentence,

15
00:00:47.824 --> 00:00:51.810
it should remove two of them and
just leave one?

16
00:00:51.810 --> 00:00:52.529
&gt;&gt; Great question.

17
00:00:52.529 --> 00:00:55.113
Yes, that's a great
question you would ask.

18
00:00:55.113 --> 00:00:56.799
Yes, it doesn't matter
what the position is.

19
00:00:56.799 --> 00:00:58.993
It should only have one unique value.

20
00:00:58.993 --> 00:01:02.715
In fact I would call this unique values or
duplicate strings.

21
00:01:02.715 --> 00:01:07.467
So I could do the same thing with numbers
if I wanted to kind of give it a way too

22
00:01:07.467 --> 00:01:08.302
much, yes?

23
00:01:08.302 --> 00:01:11.833
&gt;&gt; Capitalization matters like
uppercase this and lowercase this,

24
00:01:11.833 --> 00:01:14.866
would they be the same string or
would they be too unique?

25
00:01:14.866 --> 00:01:17.730
&gt;&gt; Good question,
I'm gonna say they're unique but

26
00:01:17.730 --> 00:01:20.537
in terms of solving this
I wouldn't care as much.

27
00:01:20.537 --> 00:01:23.947
But I love that question that means
you're already thinking ahead, yes?

28
00:01:23.947 --> 00:01:26.874
&gt;&gt; Can you always remove the first
occurrence of the duplicate or

29
00:01:26.874 --> 00:01:30.094
do you leave the first occurrence and
remove the things after that?

30
00:01:30.094 --> 00:01:33.077
&gt;&gt; Great question, it doesn't matter.

31
00:01:33.077 --> 00:01:35.157
This one is more of an open ended-
&gt;&gt; This one it doesn't matter I guess.

32
00:01:35.157 --> 00:01:38.736
&gt;&gt; Yeah,
this is more of an open ended question.

33
00:01:38.736 --> 00:01:39.870
And I'll say this,

34
00:01:39.870 --> 00:01:43.618
in general the interviewer probably
is gonna give you test cases.

35
00:01:43.618 --> 00:01:46.116
They'll just say create
a function that takes string and

36
00:01:46.116 --> 00:01:48.206
returns a new string
with duplicates removed.

37
00:01:48.206 --> 00:01:50.224
I'm giving you test cases
because I'm a nice person, but

38
00:01:50.224 --> 00:01:52.790
if you're on a whiteboard, they're
probably not gonna do that for you.

