WEBVTT

1
00:00:00.940 --> 00:00:05.680
Promises, what do we know about promises?

2
00:00:05.680 --> 00:00:09.560
I actually have a good quote that I
stole from MDN, my favorite website.

3
00:00:11.090 --> 00:00:11.900
What is my quote?

4
00:00:11.900 --> 00:00:13.110
What do we know about promises?

5
00:00:13.110 --> 00:00:13.610
Someone tell me something.

6
00:00:18.656 --> 00:00:20.219
&gt;&gt; Someting that will
return with a future value.

7
00:00:20.219 --> 00:00:22.772
&gt;&gt; Yeah, I like that.

8
00:00:22.772 --> 00:00:27.340
I'll use the MDN definition because it's
much better than anything I can say.

9
00:00:27.340 --> 00:00:29.255
I can say a promise is a proxy for

10
00:00:29.255 --> 00:00:33.404
value that's not necessarily known
when the promise is created.

11
00:00:33.404 --> 00:00:36.134
Which a promise is, it's exactly that,

12
00:00:36.134 --> 00:00:39.930
it's a promise to return
something eventually.

13
00:00:39.930 --> 00:00:40.640
You don't know what.

14
00:00:40.640 --> 00:00:44.110
You don't know where or when, but
you know what happens eventually, so

15
00:00:44.110 --> 00:00:46.340
we program around that.

16
00:00:46.340 --> 00:00:50.870
The old style of handling values that
we don't know what it's gonna be, but

17
00:00:50.870 --> 00:00:53.900
we know we want it to return eventually
would be using old school callbacks.

18
00:00:55.020 --> 00:00:58.782
So in a callback you invoke a function,
it does some work and then whenever it's

19
00:00:58.782 --> 00:01:03.810
done, it calls back the function to pass
on that value or do whatever you wanna do.

20
00:01:03.810 --> 00:01:07.910
With the invention of promises,
we can now chain things together and

21
00:01:07.910 --> 00:01:10.520
I don't have to explicitly call
the callback every single time.

22
00:01:10.520 --> 00:01:12.390
We can just chain this together.

23
00:01:12.390 --> 00:01:15.684
Hopefully, not hopefully,
at this stage in JavaScript engineering or

24
00:01:15.684 --> 00:01:18.443
UI engineering you should
probably know what promises are.

25
00:01:18.443 --> 00:01:22.016
You know them in a much
cleaner way as async await.

26
00:01:24.099 --> 00:01:27.924
But you still need promises, you still
need to understand how they work because

27
00:01:27.924 --> 00:01:31.650
a lot of code, especially old node
libraries, they don't use async await.

28
00:01:31.650 --> 00:01:33.360
They use callbacks.

29
00:01:33.360 --> 00:01:37.430
So you need to know how promises work
to wrap a callback with a promise and

30
00:01:37.430 --> 00:01:38.510
then return that.

31
00:01:38.510 --> 00:01:39.540
Async await is pretty.

32
00:01:39.540 --> 00:01:41.140
It's a much prettier syntax.

33
00:01:41.140 --> 00:01:43.325
If you can't tell,
you can just await something and

34
00:01:43.325 --> 00:01:45.569
eventually it gives you
that value versus callback.

35
00:01:45.569 --> 00:01:48.688
And then you ever seen
the Flying V of doom?

36
00:01:48.688 --> 00:01:52.469
Where you have callbacks and callbacks and
callbacks because this will be a callback,

37
00:01:52.469 --> 00:01:55.028
and this will be a callback and
this will be your callback.

38
00:01:55.028 --> 00:01:56.351
Async await solves all of that.

39
00:01:56.351 --> 00:01:57.566
Much prettier.

40
00:01:57.566 --> 00:02:01.699
So I have two questions,
we have two questions left.

41
00:02:01.699 --> 00:02:04.260
And I won't give you a promise phi one.

42
00:02:04.260 --> 00:02:06.250
I'll leave that in the advanced section.

43
00:02:06.250 --> 00:02:10.442
So I have one question, which
the original, the harder question is,

44
00:02:10.442 --> 00:02:15.216
given a function that looks like this,
how would I convert that into a promise?

45
00:02:15.216 --> 00:02:17.806
I pass this and
then convert it to a promise,

46
00:02:17.806 --> 00:02:20.187
it's more challenging than you think.

47
00:02:20.187 --> 00:02:25.192
Give it a shot sometime, the answers
are of course in the answer section,

48
00:02:25.192 --> 00:02:28.355
but we'll do a shorter one,
sleep function.

49
00:02:28.355 --> 00:02:32.200
Now implicitly if I say sleep to
the JavaScript, what are you thinking?

50
00:02:33.950 --> 00:02:34.450
&gt;&gt; Thread sleep.

51
00:02:36.130 --> 00:02:39.160
&gt;&gt; Yeah, but can we do that in JavaScript?

52
00:02:39.160 --> 00:02:40.330
No, we can't.

53
00:02:40.330 --> 00:02:43.470
Exactly, you'd be like,
Gem, you handsome fool.

54
00:02:43.470 --> 00:02:46.500
You can't sleep in JavaScript, it'
single threaded, it just runs and runs,

55
00:02:46.500 --> 00:02:49.330
the best you can do to stop
a thread would be an infinite loop.

56
00:02:49.330 --> 00:02:51.440
And then it just locks
up the entire thing.

57
00:02:51.440 --> 00:02:54.872
So we can't necessarily sleep in the main
thread, but I can sleep in a function.

58
00:02:54.872 --> 00:03:00.250
As in using await or something along

59
00:03:00.250 --> 00:03:05.730
those lines I can make this function wait
here for a specified interval of time and

60
00:03:05.730 --> 00:03:08.170
adjust a function, I couldn't do this on
the global scope or anything like that.

61
00:03:09.210 --> 00:03:11.329
So using this, this is the last problem.

62
00:03:14.541 --> 00:03:18.154
Create a sleep function that takes
one parameter, which is time, and

63
00:03:18.154 --> 00:03:20.650
we'll wait time milliseconds.

64
00:03:20.650 --> 00:03:22.320
I even graciously gave you an example,

65
00:03:22.320 --> 00:03:23.755
which you would not get
in real life probably.

66
00:03:23.755 --> 00:03:27.390
So sleep, it's gonna wait 500 milliseconds
then it's gonna print hello and

67
00:03:27.390 --> 00:03:29.600
then it's gonna wait 500 milliseconds and
print hello.

68
00:03:30.950 --> 00:03:33.130
And I'll give you ten minutes on this one.

69
00:03:33.130 --> 00:03:36.360
This is the last problem for
the day then you've made it.

70
00:03:36.360 --> 00:03:40.499
And hopefully I've simulated real life
exhaustion that you'd get [LAUGH] in

71
00:03:40.499 --> 00:03:41.800
a tactical interview.

