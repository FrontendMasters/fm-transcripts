WEBVTT

1
00:00:00.560 --> 00:00:02.320
I think it's pertinent.

2
00:00:02.320 --> 00:00:06.900
Then if we're going to talk
about observable streams.

3
00:00:06.900 --> 00:00:12.134
The question is how do we
preserve state in a stream?

4
00:00:12.134 --> 00:00:19.535
And so one of the things that I ran into
is that in my code on this basic sequence,

5
00:00:19.535 --> 00:00:26.380
I'm clicking and well it was doing
something I probably broke it.

6
00:00:26.380 --> 00:00:31.600
See if I did or not,
I know why my shift key is not down,

7
00:00:31.600 --> 00:00:38.690
is that if I click, how do I keep track
of how many times I've clicked it?

8
00:00:39.890 --> 00:00:47.387
Well, that requires state,
how do I handle that in a stream?

9
00:00:47.387 --> 00:00:53.262
And so what we have here is a pretty
simple example is we have a button and

10
00:00:53.262 --> 00:00:53.970
a ball.

11
00:00:55.100 --> 00:01:02.650
And all we're doing is we're tracking
the x, y properties of a position object.

12
00:01:03.760 --> 00:01:09.136
So, we have a button, we have a ball,

13
00:01:09.136 --> 00:01:14.512
from here let's stop take a breath and

14
00:01:14.512 --> 00:01:21.739
let's work the system what
is the initial output?

15
00:01:21.739 --> 00:01:25.419
Well It's right here so

16
00:01:25.419 --> 00:01:32.043
what we're doing here
is we are looking for

17
00:01:32.043 --> 00:01:35.539
the right button, and

18
00:01:35.539 --> 00:01:42.720
then we are capturing
that in our final input.

19
00:01:43.800 --> 00:01:46.751
Is we're taking this position object,
whatever this is, and

20
00:01:46.751 --> 00:01:50.760
we're assigning it to the local
property that we're binding to.

21
00:01:50.760 --> 00:01:54.430
So what is happening in between?

22
00:01:54.430 --> 00:01:56.577
Well, a couple things,

23
00:01:56.577 --> 00:02:01.894
the first thing that we're doing
is we're taking the event,

24
00:02:01.894 --> 00:02:07.022
which is the mouse event,
and we're just returning 10.

25
00:02:07.022 --> 00:02:12.922
And then from there, we're saying
we're going to start the stream

26
00:02:12.922 --> 00:02:18.420
with an object of x&amp;y and so
it's going to be x100 y150.

27
00:02:18.420 --> 00:02:24.550
And so, up to this point, nothing fancy
and if I go over here maintaining state.

28
00:02:24.550 --> 00:02:28.590
We just have a ball that's at 100, one 50.

29
00:02:28.590 --> 00:02:34.705
Now what we're doing here is
we're using the scan operator,

30
00:02:34.705 --> 00:02:42.740
which is very much like the reduce
function on an array and that it takes.

31
00:02:42.740 --> 00:02:47.977
The current or accumulated value,
so think of this as state, for

32
00:02:47.977 --> 00:02:53.230
the stream, it takes the current
value that's being passed in.

33
00:02:53.230 --> 00:02:57.300
And then it's allowing you to
perform some operation and

34
00:02:57.300 --> 00:02:59.940
whatever you return that goes into.

35
00:03:01.440 --> 00:03:06.600
It gets saved as the accumulated value,
It gets passed in on the next time around.

36
00:03:06.600 --> 00:03:12.077
So what we're doing here is we're saying

37
00:03:12.077 --> 00:03:18.961
when we click this take start with 10o and
150,

38
00:03:18.961 --> 00:03:24.280
but take that current position have X and

39
00:03:24.280 --> 00:03:29.129
Y and we just want to add current which

40
00:03:29.129 --> 00:03:33.850
is 10 to the existing X property.

41
00:03:33.850 --> 00:03:38.668
So we're just saying, take this
number which in this case is 10 and

42
00:03:38.668 --> 00:03:41.090
add it to X and return a new object.

43
00:03:42.640 --> 00:03:47.319
And so, from here,
what this allows us to do is,

44
00:03:47.319 --> 00:03:52.011
wait for it,
everybody sit down it'll be okay.

45
00:03:54.551 --> 00:03:59.350
Wow Cool, right and if we go

46
00:03:59.350 --> 00:04:04.370
into just so we can see this.

47
00:04:08.636 --> 00:04:15.030
We had 10 but if I change it to 100,
that's what that current value is.

48
00:04:15.030 --> 00:04:16.690
So that's what's being
passed into the stream.

49
00:04:16.690 --> 00:04:23.069
So, if I go back to the browser now,
you can see that instead of passing 10,

50
00:04:23.069 --> 00:04:28.290
we're passing 100 which creates
a much larger increment.

51
00:04:29.300 --> 00:04:35.970
All right, now this segues
right into our next question.

52
00:04:35.970 --> 00:04:43.710
What happens if we have more than
one stream?How does that work?

53
00:04:43.710 --> 00:04:48.208
Well, if anybody's ever
been to a McDonald's, or

54
00:04:48.208 --> 00:04:53.014
any other,
typically any other fast food restaurant,

55
00:04:53.014 --> 00:04:58.125
and you get a soda, or a pop,
or soda pop, depending on what

56
00:04:58.125 --> 00:05:03.032
part of the country or
the world you're in, and you go and

57
00:05:03.032 --> 00:05:08.760
you put your cup under the fountain and
you're getting soda well,

58
00:05:08.760 --> 00:05:14.180
what you're really getting is
a stream of carbonated water and

59
00:05:14.180 --> 00:05:19.200
syrup that then comes together and
produces soda.

60
00:05:19.200 --> 00:05:23.075
And so this is how we can
handle more than one stream

61
00:05:23.075 --> 00:05:25.760
by simply merging them together.

62
00:05:25.760 --> 00:05:28.740
So I think of this mentally
as a soda fountain.

63
00:05:28.740 --> 00:05:33.732
So quick pro tip, you can actually
segment your streams into kind

64
00:05:33.732 --> 00:05:38.910
of standalone substreams so
that you can compose them together.

65
00:05:38.910 --> 00:05:46.180
So just throwing that out there I've
taken a left stream and a right stream.

66
00:05:46.180 --> 00:05:51.170
And what I'm doing so these are my initial
outputs plural is that I'm going for

67
00:05:51.170 --> 00:05:53.550
the left and right button.

68
00:05:53.550 --> 00:05:59.002
And when my left button is clicked,
I'm returning a negative 10,

69
00:05:59.002 --> 00:06:04.266
when my right button is clicked,
I'm returning a 10 and then all

70
00:06:04.266 --> 00:06:10.290
I'm doing is in this merge operator is
I'm saying take either one of these.

71
00:06:11.420 --> 00:06:15.840
And if anything, admits it, put it into
this merge stream and pass it down.

72
00:06:16.870 --> 00:06:21.183
And so, within this then it just
works just like the previous

73
00:06:21.183 --> 00:06:24.566
method over here that
were either adding 10 or

74
00:06:24.566 --> 00:06:29.820
adding negative 10,
which is the equivalent of subtracting.

75
00:06:29.820 --> 00:06:33.519
So we're able to now express
this by simply segmenting and

76
00:06:33.519 --> 00:06:38.550
capturing two initial outputs, and
then just merging them together.

77
00:06:38.550 --> 00:06:39.508
So what does this look like?

78
00:06:39.508 --> 00:06:44.514
Well, right, left, but what I think

79
00:06:44.514 --> 00:06:51.087
is interesting about this,
is that within this,

80
00:06:51.087 --> 00:06:56.095
the code that handles either stream is

81
00:06:56.095 --> 00:07:02.360
exactly the same we're not changing that.

82
00:07:02.360 --> 00:07:05.631
All we're doing is just passing
in a different stream or

83
00:07:05.631 --> 00:07:07.170
getting the same output.

84
00:07:07.170 --> 00:07:11.462
So notice we're now merging two streams
together to produce a single stream that

85
00:07:11.462 --> 00:07:12.350
we can act upon.

86
00:07:14.500 --> 00:07:19.187
Now this is a brain bender,
this is fun so,

87
00:07:19.187 --> 00:07:24.136
again, we are incrementally building, and

88
00:07:24.136 --> 00:07:32.230
I'm gonna just drop this little nugget
in here what can we put in a stream?

89
00:07:33.670 --> 00:07:40.026
Up to this point, we have been
dealing with permanent values so,

90
00:07:40.026 --> 00:07:47.900
we are using a stream to communicate
essentially primitive values and objects.

91
00:07:49.520 --> 00:07:54.647
Is it possible that we
could actually communicate

92
00:07:54.647 --> 00:08:00.380
future behavior to be
executed at some point in.

93
00:08:00.380 --> 00:08:04.630
The future down the road, and
the answer is absolutely.

94
00:08:04.630 --> 00:08:08.850
This was a big elaborate setup to get
you to this point right here today.

95
00:08:09.890 --> 00:08:14.445
So, what we have in this code
is we have some inputs or

96
00:08:14.445 --> 00:08:20.246
some outputs rather and let me go,
well, I'll leave this here for

97
00:08:20.246 --> 00:08:26.170
now and then we'll kind of look
at the code and poke around.

98
00:08:26.170 --> 00:08:33.750
That we have left arrow and
right arrow, and what is this doing?

99
00:08:34.760 --> 00:08:39.421
Well, our initial output is we're
listening for a keyboard event and

100
00:08:39.421 --> 00:08:44.400
we're filtering out Is this
a left arrow or the right arrow?

101
00:08:44.400 --> 00:08:49.292
And then from here,
we're calling map to and

102
00:08:49.292 --> 00:08:52.524
we are returning something.

103
00:08:56.244 --> 00:08:57.040
All right?

104
00:08:57.040 --> 00:09:02.258
So we are returning a result,

105
00:09:02.258 --> 00:09:07.686
and in this case we're calling

106
00:09:07.686 --> 00:09:12.906
decrement, or increment and

107
00:09:12.906 --> 00:09:17.081
we're passing in two of

108
00:09:17.081 --> 00:09:21.698
the three parameters that

109
00:09:22.952 --> 00:09:29.605
Exist on this parameter signature,
so now the question that I have for

110
00:09:29.605 --> 00:09:36.510
you is what are we passing in the stream?

111
00:09:36.510 --> 00:09:41.214
The answer is a partially
applied function,

112
00:09:41.214 --> 00:09:47.155
we are sending a function with
two of the three parameters

113
00:09:47.155 --> 00:09:52.353
satisfied so
that when you call that function, so

114
00:09:52.353 --> 00:09:57.430
it's returning essentially
a function that you

115
00:09:57.430 --> 00:10:03.523
can call which you can see
here is we're calling current.

116
00:10:03.523 --> 00:10:08.384
And we're parsing in the accumulated
value, so essentially we're parsing

117
00:10:08.384 --> 00:10:13.030
a function into the stream that we're
then calling in our scan operator.

118
00:10:15.380 --> 00:10:21.383
So, just to let that sit,
we have the ability in JavaScript

119
00:10:21.383 --> 00:10:26.428
to essentially define
functions that you can pass

120
00:10:26.428 --> 00:10:31.953
around that are partially
applied that when you supply

121
00:10:31.953 --> 00:10:37.115
that last parameter,
then you can then call it, so

122
00:10:37.115 --> 00:10:42.430
the result is actually
a function that you can call.

123
00:10:42.430 --> 00:10:48.470
So this is Similar to function curring,
but it's a little bit different.

124
00:10:48.470 --> 00:10:54.977
The point is that we are able to now
determine dynamically that when I call,

125
00:10:54.977 --> 00:11:01.379
left or right, up or down, I'm going
to return a function that I'm going

126
00:11:01.379 --> 00:11:06.542
to call in my scan operator,
which is an ultimately going to

127
00:11:06.542 --> 00:11:12.160
determine the result of the position
that gets put into the DOM.

