WEBVTT

1
00:00:00.630 --> 00:00:07.280
Does anybody have any questions
about these methods thus far?

2
00:00:07.280 --> 00:00:10.890
&gt;&gt; I have a question
about the object.assign.

3
00:00:10.890 --> 00:00:11.868
&gt;&gt; Mm-hm.

4
00:00:11.868 --> 00:00:17.820
&gt;&gt; Then, when we were doing this before,
you passed a tree arguments to it,

5
00:00:17.820 --> 00:00:24.040
I think it was like an empty thing
then we pass the client and a payload.

6
00:00:24.040 --> 00:00:28.470
And then, you just passed now the client,
and why did you do that?

7
00:00:28.470 --> 00:00:31.020
And why was it different before?

8
00:00:31.020 --> 00:00:38.450
&gt;&gt; So what you can do, so the question
is an object out of sign in one place.

9
00:00:38.450 --> 00:00:43.873
I passed in more than one object,
or more than one parameter

10
00:00:43.873 --> 00:00:50.880
to call I've set aside in one case it
was three parameters in another place.

11
00:00:50.880 --> 00:00:58.310
In this case, I was two and
the reason being is that you can pass in,

12
00:00:58.310 --> 00:01:02.558
I believe n, number of parameters and

13
00:01:02.558 --> 00:01:08.910
adjust starts to attach
those from right to left.

14
00:01:08.910 --> 00:01:12.380
And, so in some cases,

15
00:01:12.380 --> 00:01:18.461
I don't want to update an entire object.

16
00:01:18.461 --> 00:01:23.992
I just want to update
a property on an object.

17
00:01:23.992 --> 00:01:27.532
In this case, I just want to essentially
create a new object in just clone this one

18
00:01:27.532 --> 00:01:30.964
over but what I could have done is well is
I could have done this in this would have

19
00:01:30.964 --> 00:01:31.872
been totally fine.

20
00:01:31.872 --> 00:01:37.313
Is that you can pass in any number
of arguments where I've even had,

21
00:01:37.313 --> 00:01:42.530
so what could happen is you
could have your full object.

22
00:01:42.530 --> 00:01:46.530
And then, you could have a partial object
here and this is completely viable.

23
00:01:47.720 --> 00:01:51.460
You could even have more than one I
believe, but that's where that came from.

24
00:01:53.520 --> 00:01:54.290
Does that make sense?

25
00:01:54.290 --> 00:01:56.790
So in this case,
I just wanna update the little thing.

26
00:01:56.790 --> 00:01:59.460
So I'm just gonna say create new object,
move everything over.

27
00:01:59.460 --> 00:02:04.146
But if I wanted to,
if I just had a partial object,

28
00:02:04.146 --> 00:02:09.740
then I would basically merge
it all together right to left.

29
00:02:09.740 --> 00:02:11.440
I got a great question.

30
00:02:11.440 --> 00:02:17.644
Since I use these methods so
much do I ever extract them,

31
00:02:17.644 --> 00:02:21.550
and the answer is absolutely.

32
00:02:21.550 --> 00:02:25.857
In a lot of cases,
I will have just like a general

33
00:02:25.857 --> 00:02:30.400
utility class that will
take just like an entity.

34
00:02:31.940 --> 00:02:35.721
And I can just pass any collection
in any kind of entity in there,

35
00:02:35.721 --> 00:02:37.550
and it will just do this for me.

36
00:02:37.550 --> 00:02:41.549
And, so what you could do in theory,

37
00:02:41.549 --> 00:02:46.968
if you want it to do a higher
level of abstraction,

38
00:02:46.968 --> 00:02:52.129
is that you could do
something like add entity,

39
00:02:52.129 --> 00:02:58.856
which would take in,
I'm freestyling here, a collection.

40
00:03:03.881 --> 00:03:06.728
And an entity, and it would just return,

41
00:03:13.570 --> 00:03:15.032
Since I'm here,
I might as well finish this.

42
00:03:17.404 --> 00:03:19.985
UpdateEntity=.

43
00:03:24.267 --> 00:03:27.867
I'm gonna do delete first,
because it's easier for some reason,

44
00:03:27.867 --> 00:03:30.530
I just always want to come back and
do update last.

45
00:03:32.940 --> 00:03:37.854
So for this one, it's collection.filter.

46
00:03:43.951 --> 00:03:47.230
We're just presuming that,
we're comparing against ID.

47
00:03:47.230 --> 00:03:55.348
I might update this, Accordingly,
and so from here, collection.map.

48
00:04:02.788 --> 00:04:09.050
It's c.id equals entity.id.

49
00:04:09.050 --> 00:04:13.198
And I'm gonna break this onto a separate
line just because it's getting a little

50
00:04:13.198 --> 00:04:13.930
hard to read.

51
00:04:15.910 --> 00:04:20.108
And we're going to
return object data sign.

52
00:04:23.604 --> 00:04:28.243
Entity, Or

53
00:04:28.243 --> 00:04:33.397
the existing thing in the collection.

54
00:04:33.397 --> 00:04:36.808
I realized I probably should call this e,
e.

55
00:04:41.464 --> 00:04:44.502
E, e, and e.

56
00:04:52.129 --> 00:04:57.240
Actually, let me see if I can break
this in a way that ideally, there we go.

57
00:05:04.108 --> 00:05:04.786
All right?

58
00:05:04.786 --> 00:05:05.376
Here we go.

59
00:05:05.376 --> 00:05:07.653
This is,

60
00:05:12.426 --> 00:05:18.380
How I would obstruct this, and so I could
pass it in any collection, in an entity.

61
00:05:18.380 --> 00:05:22.767
And as long as I needed to compare
against the ID, this should work.

62
00:05:22.767 --> 00:05:24.627
&gt;&gt; When you do this abstraction,

63
00:05:24.627 --> 00:05:28.141
don't you think that you're
reducing the readability?

64
00:05:28.141 --> 00:05:32.230
&gt;&gt; Absolutely, because in order for

65
00:05:32.230 --> 00:05:37.024
this to work across multiple entities,

66
00:05:37.024 --> 00:05:44.780
I have to adopt a language that's
common for all of the entities.

67
00:05:44.780 --> 00:05:48.419
And, so this is where
depending on what I'm doing is

68
00:05:48.419 --> 00:05:52.880
that, I may or may not do this.

69
00:05:52.880 --> 00:05:59.358
So I have abstracted this out,
but like, create a client,

70
00:05:59.358 --> 00:06:05.330
is a lot more descriptive,
than what, add entity is.

71
00:06:07.110 --> 00:06:10.160
Because now we're talking
in very generic terms.

72
00:06:10.160 --> 00:06:14.760
And so, this is the trade-off.

73
00:06:14.760 --> 00:06:19.945
And, so when we talk about
complexity is do we optimize or

74
00:06:19.945 --> 00:06:24.250
continue to optimize, or where do we stop?

75
00:06:24.250 --> 00:06:29.762
And the answer is, as long as it
continues to provide clarity and

76
00:06:29.762 --> 00:06:33.756
value to your code then
continue to optimize.

77
00:06:33.756 --> 00:06:40.304
But if you are creating abstraction, that
find and identify the interested parties,

78
00:06:40.304 --> 00:06:45.789
and then put your abstraction at
the layer just above that, and no more.

79
00:06:45.789 --> 00:06:51.021
Because what I've seen is that we've
got this low level problem here,

80
00:06:51.021 --> 00:06:56.264
and you'll extract the solution
where it's three and four layers up.

81
00:06:56.264 --> 00:07:01.996
And then, that that cognitive kind of leap
that you have to make where if you've ever

82
00:07:01.996 --> 00:07:07.018
been in a project, and you're over
here working on this thing over here.

83
00:07:07.018 --> 00:07:12.034
And then, all sudden you need
something related, but then you have

84
00:07:12.034 --> 00:07:17.323
to jump all the way down here to some
other like live or whatever that is.

85
00:07:17.323 --> 00:07:22.797
You're having to jump back and forth,
mentally, that is creating complexity.

86
00:07:22.797 --> 00:07:28.107
And, so you can over abstract your code
in such a way where the mental burden

87
00:07:28.107 --> 00:07:33.416
of having to jump back and forth is far
more than the advantage you get from,

88
00:07:33.416 --> 00:07:35.627
having ultra fine grain code.

89
00:07:35.627 --> 00:07:39.762
And, so it's really identify
where that return of value is and

90
00:07:39.762 --> 00:07:42.348
then kind of where starts to diminish.

91
00:07:42.348 --> 00:07:47.208
Then, reasonably and
logically, stop right there.

92
00:07:47.208 --> 00:07:51.774
Ultimately is if you follow,
I think I said Kent Beck,

93
00:07:51.774 --> 00:07:56.740
the other day but surely Kent Bloch
who is this juggernaut of

94
00:07:56.740 --> 00:08:02.030
software engineering,
he made the statement, make it work.

95
00:08:03.300 --> 00:08:06.902
&lt;ake it right, make it fast, and
it's not the first time I've said this,

96
00:08:06.902 --> 00:08:07.876
I say it quite a bit.

97
00:08:07.876 --> 00:08:12.599
But ultimately,
we're pragmatist and somebody,

98
00:08:12.599 --> 00:08:17.013
a lot of times will ask me like,
should I do this?

99
00:08:17.013 --> 00:08:18.790
And my first question is, does it work?

100
00:08:18.790 --> 00:08:23.187
Because if it doesn't work,
then let's just stop right there.

101
00:08:23.187 --> 00:08:27.191
Like, let's get it working,
and then we can get it right.

102
00:08:27.191 --> 00:08:32.610
And then, as we start to go into
production, then we can get it fast.

103
00:08:32.610 --> 00:08:36.502
So that's a really,
really good observation and

104
00:08:36.502 --> 00:08:40.580
I think you're starting to
see that that tension and

105
00:08:40.580 --> 00:08:45.688
that balance of that of abstraction and
the cost of abstraction.

106
00:08:45.688 --> 00:08:50.196
And start to realize that
like some things we can move,

107
00:08:50.196 --> 00:08:54.610
other things is,
it's just not worth it initially.

108
00:08:54.610 --> 00:08:59.494
And as well as if you adopt a principle
of refactoring through promotion is that

109
00:08:59.494 --> 00:09:02.750
you can say,
I'm going to leave this here because,

110
00:09:02.750 --> 00:09:05.054
at this scale, it's not a problem.

111
00:09:05.054 --> 00:09:09.733
But as the application grows,
then I'm going to go ahead, and

112
00:09:09.733 --> 00:09:12.080
then I'm going to extract it.

113
00:09:12.080 --> 00:09:13.611
And that's the other thing is,

114
00:09:13.611 --> 00:09:16.600
the beautiful thing about
code is you can refactor it.

115
00:09:16.600 --> 00:09:20.840
And, so I think when you want to adopt
a policy that you can safely refactor your

116
00:09:20.840 --> 00:09:24.578
code, then you can say I don't have
a strong feeling about this now.

117
00:09:24.578 --> 00:09:27.368
Is I have more information,
then I may change it, and

118
00:09:27.368 --> 00:09:31.404
there's just things where it's like,
I don't have an opinion about this.

119
00:09:31.404 --> 00:09:35.590
It feels right, or it doesn't or does it
feel wrong, so I'm going to leave it.

