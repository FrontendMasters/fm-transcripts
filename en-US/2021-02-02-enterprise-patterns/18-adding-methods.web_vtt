WEBVTT

1
00:00:00.440 --> 00:00:05.256
Now what we can do, is let's modify this

2
00:00:05.256 --> 00:00:09.515
slightly to have a couple methods.

3
00:00:09.515 --> 00:00:13.812
One is we're gonna pass state in and

4
00:00:13.812 --> 00:00:21.130
then we're gonna have a method
called get state and select.

5
00:00:22.570 --> 00:00:28.345
And so what select is going to allow us
to do is put in a property that we want,

6
00:00:28.345 --> 00:00:30.560
and then return that value.

7
00:00:30.560 --> 00:00:36.230
So in JavaScript, when you want to
select something off of an object and

8
00:00:36.230 --> 00:00:42.280
you don't know what that property is,
it's going to change to be dynamic,

9
00:00:42.280 --> 00:00:47.840
then you can use what is called,
basically this array notation.

10
00:00:47.840 --> 00:00:52.093
And so we're able to say, select the value
of any of this dynamic property or

11
00:00:52.093 --> 00:00:55.350
this key that we send in,
give me the value.

12
00:00:55.350 --> 00:00:57.690
So I'm still gonna do client store.

13
00:00:57.690 --> 00:01:02.163
The difference is what have I described
here, clients and current client well,

14
00:01:02.163 --> 00:01:04.300
I'm talking about state.

15
00:01:04.300 --> 00:01:08.720
So here, I'm gonna go clients date.

16
00:01:08.720 --> 00:01:09.220
There we go.

17
00:01:10.350 --> 00:01:15.930
And in the constructor we are going to go.

18
00:01:15.930 --> 00:01:20.980
So a constructor is a method that gets
called anytime you construct a class.

19
00:01:22.010 --> 00:01:26.961
So we're gonna go state, quiet state.

20
00:01:26.961 --> 00:01:31.610
And then within this we're just
gonna go this.state equals state.

21
00:01:31.610 --> 00:01:40.206
And then from here we are going to have,

22
00:01:40.206 --> 00:01:44.130
was it get state.

23
00:01:44.130 --> 00:01:49.690
All this is going to do
is return this.state.

24
00:01:50.700 --> 00:01:57.678
And then we have one more method
which is going to be select, correct,

25
00:01:57.678 --> 00:02:03.380
which is going to take an ID,
which will be a string.

26
00:02:03.380 --> 00:02:07.550
And it's going to return this.state[ID].

27
00:02:07.550 --> 00:02:10.770
Or I think I called this key.

28
00:02:10.770 --> 00:02:17.340
Let me just change this to be a little
bit more semantically correct, all right?

29
00:02:17.340 --> 00:02:20.780
So now this is obviously breaking.

30
00:02:20.780 --> 00:02:26.135
Let me change this ever so

31
00:02:26.135 --> 00:02:31.235
slightly and instead of

32
00:02:31.235 --> 00:02:36.845
this let me go with initial

33
00:02:36.845 --> 00:02:42.456
client state and from here

34
00:02:45.592 --> 00:02:51.614
Let's do client, Client

35
00:02:51.614 --> 00:03:00.637
equals client store select,
Current client.

36
00:03:05.923 --> 00:03:06.830
We'll save this.

37
00:03:07.840 --> 00:03:12.200
And first let's just dump this out.

38
00:03:12.200 --> 00:03:14.030
There we go.

39
00:03:14.030 --> 00:03:21.390
All right, so now state that's clients.

40
00:03:21.390 --> 00:03:23.150
And current client.

41
00:03:23.150 --> 00:03:27.799
And then if we do current client,

42
00:03:27.799 --> 00:03:34.920
we'll save this, then that's the empty.

43
00:03:34.920 --> 00:03:37.379
But if I were to set
this to anything else, so

44
00:03:37.379 --> 00:03:41.735
if I would've had that select method
in there, then that would have worked.

45
00:03:41.735 --> 00:03:45.833
So, before we go into the challenge,

46
00:03:45.833 --> 00:03:54.300
I just wanna open up the floor to any
questions about what I've covered so far.

47
00:03:54.300 --> 00:03:58.960
&gt;&gt; Will you repeat how
the select with key works?

48
00:03:58.960 --> 00:04:04.680
&gt;&gt; What we're doing here is array
notation when you have an object.

49
00:04:06.850 --> 00:04:12.430
So in this case,
an object that has more than one property.

50
00:04:14.400 --> 00:04:17.260
So we have ID first name,
last name company.

51
00:04:17.260 --> 00:04:20.278
And so just imagine any object
that has a key and it has a value.

52
00:04:20.278 --> 00:04:26.950
Well, if you want to get a value off
of an object based on the key, and so

53
00:04:26.950 --> 00:04:33.350
in other words, give me the first name,
or give me the last name.

54
00:04:33.350 --> 00:04:36.160
So that last name is essentially
the key for the value.

55
00:04:37.990 --> 00:04:41.870
What you can do is instead of doing,
let me do it this way.

56
00:04:43.400 --> 00:04:47.380
Well instead of essentially doing like

57
00:04:47.380 --> 00:04:53.058
this.peter.firstname or
this.peter.lastname.

58
00:04:53.058 --> 00:05:00.040
I don't really need this because
it's not inside of a class.

59
00:05:01.710 --> 00:05:07.335
And I wanna say give me the first name or
the last name,

60
00:05:07.335 --> 00:05:13.850
what I can do is, I can go Peter and
then in essentially close.

61
00:05:13.850 --> 00:05:18.000
I can send in a strain that represents
the key, I could say first name.

62
00:05:19.920 --> 00:05:25.910
So what I can do here is just
say key equals first name.

63
00:05:25.910 --> 00:05:31.080
And so this is a way for
me to dynamically traverse this object and

64
00:05:31.080 --> 00:05:33.260
make that key dynamic.

65
00:05:33.260 --> 00:05:37.907
Or what I could do is instead I can just
pass this in if I want the first name.

66
00:05:37.907 --> 00:05:42.790
But if I want it to be last name, I just
do it here and then returns the last name.

67
00:05:42.790 --> 00:05:47.174
And so this is a way to access
really dynamically access

68
00:05:47.174 --> 00:05:51.000
a value on an object using
array notation here.

69
00:05:52.220 --> 00:05:52.890
That makes sense.

70
00:05:54.140 --> 00:05:59.190
&gt;&gt; Yeah, so in this case you're
passing the entire object as a key.

71
00:05:59.190 --> 00:06:00.690
So it was just a string.

72
00:06:00.690 --> 00:06:05.300
So keys are strings,
because properties are strings.

73
00:06:05.300 --> 00:06:07.030
So an object is just a key value pair.

74
00:06:07.030 --> 00:06:09.820
So, first name and last name.

75
00:06:09.820 --> 00:06:12.980
These are just represented as strings.

76
00:06:12.980 --> 00:06:15.664
And so I'm saying give me

77
00:06:19.261 --> 00:06:24.330
The value that's stored of this property
so in this case is gonna be porker.

78
00:06:24.330 --> 00:06:26.430
If I did first name, it's gonna be Peter.

79
00:06:27.630 --> 00:06:32.243
And so what it's doing is it's
looking up essentially the property or

80
00:06:32.243 --> 00:06:36.400
the key on that which is a string and
then returning that value.

81
00:06:38.330 --> 00:06:39.130
Does that make sense?

82
00:06:40.370 --> 00:06:41.388
&gt;&gt; Yeah, it makes sense.

83
00:06:41.388 --> 00:06:46.197
I was confused because I
felt that in the store,

84
00:06:46.197 --> 00:06:49.380
you were passing the entire object.

85
00:06:50.550 --> 00:06:56.700
&gt;&gt; So in the store, I'm passing in,
the state object in the constructor.

86
00:06:56.700 --> 00:07:02.900
But then I'm saying I want to be
able to select slices off of that.

87
00:07:05.010 --> 00:07:11.328
And so for here, we're passing
in the entire state object, and

88
00:07:11.328 --> 00:07:18.010
then I'm able to select a slice of
that state off and then return it.

89
00:07:18.010 --> 00:07:24.959
So what I could do here,
I could go current clients and

90
00:07:24.959 --> 00:07:30.055
I just need that slice off of the state,

91
00:07:30.055 --> 00:07:35.780
sorry, no clients store, select client.

92
00:07:39.580 --> 00:07:44.278
Now if I go here and I dump this out,

93
00:07:44.278 --> 00:07:52.719
what it's gonna return is that
whatever value is it that key.

94
00:07:52.719 --> 00:07:55.247
&gt;&gt; Okay so
you were selecting the slice, okay.

95
00:07:55.247 --> 00:07:59.006
When you are dealing with etc.

96
00:07:59.006 --> 00:08:02.515
When you have a selector guess what,

97
00:08:02.515 --> 00:08:08.072
this is pretty much all that's
happening under the hood.

98
00:08:08.072 --> 00:08:10.126
Your state is a single state object and
you are going through and

99
00:08:10.126 --> 00:08:11.400
you are saying give me a piece of this.

100
00:08:11.400 --> 00:08:14.746
And then you might even have that actually
to be a function to take the state and

101
00:08:14.746 --> 00:08:17.840
then do some manipulation and
then send it back.

102
00:08:17.840 --> 00:08:24.170
Should I put my base models and
my domain models together?

103
00:08:24.170 --> 00:08:28.600
Typically, I will put all of my
models because that represents

104
00:08:28.600 --> 00:08:31.618
the entire application in a single place.

105
00:08:31.618 --> 00:08:35.660
So this is a little bit
angular mono repo specific.

106
00:08:35.660 --> 00:08:40.410
Well, if you're in a mono repo, you can
really do a lot of different things.

107
00:08:40.410 --> 00:08:45.780
But I will typically put all
of my interfaces in a single

108
00:08:45.780 --> 00:08:51.034
interface file that lives in
a library that I can share

109
00:08:51.034 --> 00:08:56.570
with my angular apps,
my react apps and my node apps.

110
00:08:56.570 --> 00:09:02.823
And so this is what this would look like
in a real project is that I would go and

111
00:09:02.823 --> 00:09:07.510
I would build out projects interfaces and
everything.

112
00:09:07.510 --> 00:09:09.570
So I have a single file.

113
00:09:09.570 --> 00:09:11.120
That's the finding my domain model.

114
00:09:12.260 --> 00:09:14.523
And then from there I can share that and

115
00:09:14.523 --> 00:09:17.640
communicate that to the rest
of the application.

116
00:09:17.640 --> 00:09:19.190
So that's a very good question.

117
00:09:19.190 --> 00:09:22.919
I tend to try to put all of my
interfaces in a single place so

118
00:09:22.919 --> 00:09:27.530
that every other project application
library can benefit from that.

119
00:09:31.170 --> 00:09:32.111
All right, so

120
00:09:32.111 --> 00:09:36.828
another question is let's say we
have an interface describing a form.

121
00:09:38.262 --> 00:09:41.540
How does it help when a user is
interacting with it at runtime?

122
00:09:41.540 --> 00:09:44.919
So, when you think about a form,

123
00:09:44.919 --> 00:09:51.020
I would actually not have
an interface that defines a form.

124
00:09:51.020 --> 00:09:54.907
I wouldn't have an interface that
defines the data structure and

125
00:09:54.907 --> 00:09:58.950
then the form is merely
a representation of that interface.

126
00:09:58.950 --> 00:10:01.920
And so I would never define
an interface for a form.

127
00:10:01.920 --> 00:10:04.175
I would just define my interfaces and

128
00:10:04.175 --> 00:10:07.660
then the forms would
essentially conform to that.

129
00:10:07.660 --> 00:10:12.230
And so that's where you start at
the very base is your domain models.

130
00:10:12.230 --> 00:10:15.780
Everything else is
a representation of that.

