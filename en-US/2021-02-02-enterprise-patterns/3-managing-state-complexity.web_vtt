WEBVTT

1
00:00:00.130 --> 00:00:03.154
The most challenging thing
about programming, and

2
00:00:03.154 --> 00:00:07.380
it took me a long time to realize
this when it comes to programming.

3
00:00:07.380 --> 00:00:11.742
Our jobs are, I would say, our primary or

4
00:00:11.742 --> 00:00:16.729
least our predominant
function as a programmer

5
00:00:16.729 --> 00:00:21.964
is to manage complexity within our code,
and so,

6
00:00:21.964 --> 00:00:29.960
here's a quote from a paper called out
of the tar pit, and you can Google it.

7
00:00:29.960 --> 00:00:31.870
It's completely free.

8
00:00:31.870 --> 00:00:36.430
And for me,
this should be written in stone.

9
00:00:36.430 --> 00:00:41.301
When I read this I just realized
like this has crystallized my

10
00:00:41.301 --> 00:00:44.800
worldview about programming.

11
00:00:44.800 --> 00:00:51.366
The biggest problem in the development and
maintenance of large scale software

12
00:00:51.366 --> 00:00:56.464
systems is complexity large
systems are hard to understand.

13
00:00:56.464 --> 00:01:02.326
And you could say okay, I get it
complexity, but what is complexity and

14
00:01:02.326 --> 00:01:07.526
so when they clarified this it's
all the same to me it clicked.

15
00:01:07.526 --> 00:01:12.207
And I said this is
the foundational tension that is

16
00:01:12.207 --> 00:01:17.223
engineers that we are constantly
trying to manage and

17
00:01:17.223 --> 00:01:23.530
so the major contributor t o
complexity is handling of state.

18
00:01:23.530 --> 00:01:25.570
I could not agree more.

19
00:01:26.770 --> 00:01:30.137
That if you fail to handle state properly,

20
00:01:30.137 --> 00:01:35.189
it's going to mess up your ability
to move or communicate across

21
00:01:35.189 --> 00:01:40.760
your application which is flow
of control or flow control.

22
00:01:40.760 --> 00:01:44.098
And, if you fail to manage state properly,

23
00:01:44.098 --> 00:01:49.360
you're going to exponentially
increase your code volume.

24
00:01:49.360 --> 00:01:53.425
And so, just what I would say would be,

25
00:01:53.425 --> 00:01:59.216
the Iron triangle of programming
is handling of state,

26
00:01:59.216 --> 00:02:03.320
code volume and flow of control.

27
00:02:03.320 --> 00:02:08.076
And so as a programmer,
everything that I do is to this end,

28
00:02:08.076 --> 00:02:10.950
how do I effectively manage state?

29
00:02:10.950 --> 00:02:15.155
How do I manage communication,

30
00:02:15.155 --> 00:02:20.292
which is flow of control and
how do I do it

31
00:02:20.292 --> 00:02:25.292
In the least amount of code possible.

32
00:02:25.292 --> 00:02:28.333
And so Iron triangle and

33
00:02:28.333 --> 00:02:33.505
other state code volume flow control and

34
00:02:33.505 --> 00:02:38.828
the problem is that your current position

35
00:02:38.828 --> 00:02:47.170
In purgatory will depend on your
ability to manage complexity.

36
00:02:47.170 --> 00:02:50.646
And so just stop for a second and

37
00:02:50.646 --> 00:02:56.763
think about a time that
you've ever checked in code.

38
00:02:56.763 --> 00:03:01.912
And really we're not 100% sure

39
00:03:01.912 --> 00:03:07.922
that it wasn't going to break anything.

40
00:03:07.922 --> 00:03:12.014
So anybody on the Zoom or
whatever, just show of hands,

41
00:03:12.014 --> 00:03:17.498
have you ever just did that YOLO commit
because you were up against the gun or

42
00:03:17.498 --> 00:03:20.048
it was a timeline or you just like.

43
00:03:20.048 --> 00:03:25.294
I don't think anything could go wrong,
but I'm gonna do it YOLO and

44
00:03:25.294 --> 00:03:28.700
so, if you've ever done that YOLO commit,

45
00:03:28.700 --> 00:03:33.329
you realize that you're slowly
stepping in to purgatory.

46
00:03:33.329 --> 00:03:36.233
And then It just begins to get worse or

47
00:03:36.233 --> 00:03:41.013
if you've ever just airdropped
into a brownfield project,

48
00:03:41.013 --> 00:03:44.870
you inherited it,
somebody just gave it to you.

49
00:03:44.870 --> 00:03:48.786
And you're staring at this code and
you're like,

50
00:03:48.786 --> 00:03:52.709
I have no idea what is happening here,
I am in hell.

51
00:03:53.810 --> 00:03:56.748
I've done it, I think everybody
probably would say, we've been there.

52
00:03:56.748 --> 00:04:01.732
And so, complexity has
a direct relation to the level

53
00:04:01.732 --> 00:04:05.960
of purgatory that you
will find yourself in.

54
00:04:07.440 --> 00:04:12.269
And so
when we look at state management that We

55
00:04:12.269 --> 00:04:17.500
have some code here, and
it seems to be okay.

56
00:04:17.500 --> 00:04:23.140
But there's a way in which you could write
this, and we'll talk about this later.

57
00:04:23.140 --> 00:04:28.229
That if you change something outside

58
00:04:28.229 --> 00:04:33.400
of the method That you are calling.

59
00:04:33.400 --> 00:04:36.620
And so this is when we're gonna
talk about micro complexity.

60
00:04:36.620 --> 00:04:41.990
That it could change the result
that you get from calling a method.

61
00:04:41.990 --> 00:04:46.875
So when you call a method with
the same parameters every

62
00:04:46.875 --> 00:04:51.545
single time, and
you get a different result based on

63
00:04:51.545 --> 00:04:56.450
some external state How can
you possibly test that?.

64
00:04:58.290 --> 00:05:02.956
More importantly is how can you
possibly know what you're going to get

65
00:05:02.956 --> 00:05:05.090
at any given time?.

66
00:05:05.090 --> 00:05:11.136
And so, a real life example that I like to
use around this is that the reason why,

67
00:05:11.136 --> 00:05:16.283
This could be problematic and
we'll see exactly why in just a little

68
00:05:16.283 --> 00:05:21.880
bit is that the output of this method
is dependent on some external state,

69
00:05:21.880 --> 00:05:25.820
which then creates unpredictable results.

70
00:05:25.820 --> 00:05:31.289
And so, shared mutable state is
incredibly incredibly Dangerous in so

71
00:05:31.289 --> 00:05:36.122
much that a really simple example
is that occasionally I like to

72
00:05:36.122 --> 00:05:41.134
buy stuff on Amazon and my wife also
likes to buy stuff on Amazon and

73
00:05:41.134 --> 00:05:45.810
I can be on one computer and
I just need to buy a book.

74
00:05:45.810 --> 00:05:47.459
So I add the book to the cart.

75
00:05:48.610 --> 00:05:52.182
I go to the cart,
instead of the book being in the cart,

76
00:05:52.182 --> 00:05:54.990
it's the book plus like six other things.

77
00:05:56.010 --> 00:06:00.470
The reason being is that because
my wife is on my account, and

78
00:06:00.470 --> 00:06:05.368
there's a shared state across that
shopping cart, all of a sudden

79
00:06:05.368 --> 00:06:10.450
now there are What I'm seeing in
my shopping cart is unpredictable.

80
00:06:10.450 --> 00:06:14.632
It's not what I expected because
some third party, aka my wife,

81
00:06:14.632 --> 00:06:19.030
don't tell her I called her that,
but has added that to the cart.

82
00:06:19.030 --> 00:06:20.440
And now I need to figure
out what to do with it.

83
00:06:20.440 --> 00:06:24.740
What is the intention behind
this thing in the cart, and

84
00:06:24.740 --> 00:06:27.860
I have to figure out what that's doing.

85
00:06:27.860 --> 00:06:29.370
Now imagine in your code.

86
00:06:30.530 --> 00:06:35.170
If all sudden something shows up,
that you weren't expecting, and

87
00:06:35.170 --> 00:06:39.770
now you have to know like what
was the reasoning behind this?

88
00:06:39.770 --> 00:06:43.930
And so the ability to parse that
out becomes very, very difficult.

89
00:06:43.930 --> 00:06:47.580
Funny story,
I found a bunch of toys in the cart.

90
00:06:47.580 --> 00:06:52.020
I thought my wife had put them there and
it was for a very specific reason.

91
00:06:52.020 --> 00:06:53.957
And I just bought them all and

92
00:06:53.957 --> 00:06:58.250
come to find out it was my
nine year old window shopping.

93
00:06:58.250 --> 00:07:03.044
And he basically [LAUGH] Ended up
getting like six toys because I

94
00:07:03.044 --> 00:07:07.835
thought it was from my wife and
it was from my nine year old and so

95
00:07:07.835 --> 00:07:12.270
this creates an predictability,
control flow.

96
00:07:12.270 --> 00:07:18.346
How are we communicating state
in events in the context

97
00:07:18.346 --> 00:07:23.497
of our application from
the component level,

98
00:07:23.497 --> 00:07:28.384
how are components communicating with each

99
00:07:28.384 --> 00:07:32.760
other to a massive distributed level?

100
00:07:34.130 --> 00:07:36.640
Now imagine you're just zooming out.

101
00:07:36.640 --> 00:07:39.310
And now you have this large scale system.

102
00:07:40.830 --> 00:07:45.494
How do you communicate across
not only an application but

103
00:07:45.494 --> 00:07:51.715
a bunch of connected applications in
maintain consistency across those and

104
00:07:51.715 --> 00:07:56.790
so this is where control flow
becomes very, very important.

105
00:07:57.810 --> 00:08:03.920
And we have code volume that
in an attempt to manage state.

106
00:08:05.120 --> 00:08:09.928
Unfortunately, what you do if
you don't do this properly,

107
00:08:09.928 --> 00:08:16.290
is you start to write a bunch of code Over
and over and over that you don't need.

108
00:08:16.290 --> 00:08:20.973
So, for instance here within these blocks,

109
00:08:20.973 --> 00:08:26.026
what would happen if I
needed to delete an element

110
00:08:26.026 --> 00:08:30.230
from the courses array somewhere else?

111
00:08:31.740 --> 00:08:33.720
Well, I wouldn't be able to do that.

112
00:08:33.720 --> 00:08:35.620
Or more, so I wouldn't be able to do that.

113
00:08:35.620 --> 00:08:39.270
But I would have to duplicate
the code in the Delete block.

114
00:08:40.450 --> 00:08:45.801
And so when you fail to manage your
state in your control flow properly,

115
00:08:45.801 --> 00:08:50.975
you'll find that you have to not
only write additional code to manage

116
00:08:50.975 --> 00:08:56.060
your state, but your ability to
reuse code Is greatly diminished,

117
00:08:56.060 --> 00:09:00.750
which leads to code duplication,
or code volume.

118
00:09:00.750 --> 00:09:06.026
And one more note on shared mutable state,
this is a slightly

119
00:09:06.026 --> 00:09:12.100
contrived example but
I've done this, I'm guilty of it.

120
00:09:12.100 --> 00:09:17.980
That before I started using redux or
ngrx that it was very common for

121
00:09:17.980 --> 00:09:22.076
me to have a component
that shared a property or

122
00:09:22.076 --> 00:09:25.810
pulled data from a shared service.

123
00:09:25.810 --> 00:09:29.790
And now what you have is
an items component and

124
00:09:29.790 --> 00:09:36.480
a widgets component that has
the ability to modify the ledger total.

125
00:09:36.480 --> 00:09:41.116
So In here, you have this add method.

126
00:09:41.116 --> 00:09:48.590
And in each portion of this,
you're able to do something.

127
00:09:48.590 --> 00:09:53.146
So, fairly simple I just opponent can add
to the ledger widgets component can add to

128
00:09:53.146 --> 00:09:54.640
the ledger.

129
00:09:54.640 --> 00:09:56.260
Now the problem is.

130
00:09:56.260 --> 00:10:01.088
What happens when the items
component says, look,

131
00:10:01.088 --> 00:10:05.585
we can never ever have
the ledger go over ten, and

132
00:10:05.585 --> 00:10:12.497
then the widgets component is kind of
the crazy kooky cousin of the bunch and

133
00:10:12.497 --> 00:10:20.420
it's work tournament ramp up to 11 We're
going to set ledger all the way up to 11.

134
00:10:20.420 --> 00:10:26.918
And then it causes
itemsComponent to break.

135
00:10:26.918 --> 00:10:32.410
Well, a simple example but
this happens in a lot of different ways.

136
00:10:32.410 --> 00:10:34.106
So how would the widgetsComponent.

137
00:10:35.372 --> 00:10:40.721
Know that hey I'm not
allowed to se this to 11,

138
00:10:40.721 --> 00:10:48.944
well also now it has to know about
the requirements of the items component.

139
00:10:48.944 --> 00:10:54.058
And also because you have shared it
will stay all of a sudden now all of

140
00:10:54.058 --> 00:10:58.997
the business requirements,
the business logic in the context of

141
00:10:58.997 --> 00:11:04.140
every one of these components that
shares the state is now coupled.

142
00:11:06.310 --> 00:11:09.930
And this is where it's scale.

143
00:11:09.930 --> 00:11:14.156
So imagine just two components
if I change this over here,

144
00:11:14.156 --> 00:11:17.013
something bad could happen over here.

145
00:11:19.023 --> 00:11:22.090
That is two simple components.

146
00:11:22.090 --> 00:11:25.885
I look at this and I'm thinking this would
be really easy for this to go really,

147
00:11:25.885 --> 00:11:26.530
really bad.

148
00:11:27.920 --> 00:11:32.550
Now imagine an application with like 50 or
60 of these components.

149
00:11:33.590 --> 00:11:38.588
Mentally, we simply do not have
the mental faculties or the tools or

150
00:11:38.588 --> 00:11:43.414
the bandwidth being humans were
designed to thin slice that think

151
00:11:43.414 --> 00:11:46.510
about this complexity its scale.

152
00:11:46.510 --> 00:11:50.870
And so
this is where I want to set the stage.

153
00:11:52.340 --> 00:11:57.381
As we start to delve
into how to write good

154
00:11:57.381 --> 00:12:04.890
enterprise grade applications,
what are we doing?

155
00:12:04.890 --> 00:12:06.890
What are we trying to manage?

156
00:12:06.890 --> 00:12:11.012
And we're trying to manage complexity,

157
00:12:11.012 --> 00:12:16.950
which is State management,
flow control and code volume.

158
00:12:16.950 --> 00:12:22.332
And so with that, before we get into
writing some code, I want to stop and

159
00:12:22.332 --> 00:12:27.470
ask, are there any questions about
what I've said up to this point?

160
00:12:29.190 --> 00:12:31.490
&gt;&gt; What complexity do you see?

161
00:12:31.490 --> 00:12:33.146
Because, I mean,

162
00:12:33.146 --> 00:12:39.780
I have been using shared classes in
Angular environments since long.

163
00:12:39.780 --> 00:12:45.998
And I mean I know I mean certainly at many
times the Shared Services used to you It,

164
00:12:45.998 --> 00:12:50.937
I mean, it used to take a lot of
time to manage the Shared Services

165
00:12:50.937 --> 00:12:55.790
at many places and and
we used to get a lot of bugs in that.

166
00:12:55.790 --> 00:13:00.830
So what kind of actual complexity
we are talking about here.

167
00:13:00.830 --> 00:13:05.081
So I have, highlighted
the boxes like Ledger and then,

168
00:13:05.081 --> 00:13:09.900
in the items component and
into the widgets component.

169
00:13:09.900 --> 00:13:15.000
&gt;&gt; So the question is specifically,
what complexity am I talking about?

170
00:13:15.000 --> 00:13:19.940
And the answer is that I'm talking about,
I think, first of all,

171
00:13:19.940 --> 00:13:26.690
like mental complexity, your ability
to mentally parse what's happening.

172
00:13:26.690 --> 00:13:32.860
And then, from there, the underlying
pieces that make it hard to do so.

173
00:13:32.860 --> 00:13:33.685
At this point,

174
00:13:33.685 --> 00:13:37.120
I'm talking about complexity in
a very kind of abstract sense.

175
00:13:37.120 --> 00:13:41.688
In the sense that, we know that,
when we're programming,

176
00:13:41.688 --> 00:13:46.358
when you know what you're doing
it's not necessarily hard,

177
00:13:47.428 --> 00:13:52.180
But it's complex and it can be complex.

178
00:13:52.180 --> 00:13:57.347
And so especially for new programmers,
that the ability to make sense and

179
00:13:57.347 --> 00:14:02.070
navigate what's happening,
it's cuz of complexity.

180
00:14:02.070 --> 00:14:06.134
And so, in my opinion,
that complexity comes from again,

181
00:14:06.134 --> 00:14:11.190
our inability to manage state,
flow control and manage code volume.

182
00:14:11.190 --> 00:14:16.313
And so this is what we're gonna talk
about for really the entire day

183
00:14:16.313 --> 00:14:21.360
is how to do this at a micro level,
a mezzo level and a macro level.

