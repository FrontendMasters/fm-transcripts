WEBVTT

1
00:00:00.186 --> 00:00:04.516
Observables is really the combination
of two classic patterns so

2
00:00:04.516 --> 00:00:08.621
before we're talking about what
I call the reducer pattern.

3
00:00:08.621 --> 00:00:12.354
Now we're talking about observables,

4
00:00:12.354 --> 00:00:18.720
which is the combination of two
classic gang of four style patterns,

5
00:00:18.720 --> 00:00:23.898
which is the iterate pattern and
the observer pattern.

6
00:00:23.898 --> 00:00:29.802
And so, the observer pattern gives
you the ability to communicate

7
00:00:29.802 --> 00:00:34.976
that some event has happened
at some indeterminate time.

8
00:00:34.976 --> 00:00:39.922
And so this is a way for
like I'm going to observe this and

9
00:00:39.922 --> 00:00:42.666
you tell me when This is ready.

10
00:00:42.666 --> 00:00:46.766
So a lot of times I think of this as
if you've ever went out to dinner and

11
00:00:46.766 --> 00:00:50.181
you go in and say, I have a table,
I need a table for four.

12
00:00:50.181 --> 00:00:53.827
They're like, it's not ready,
but here is a beeper or

13
00:00:53.827 --> 00:00:57.253
a pager and they give it to you and
then you walk away.

14
00:00:57.253 --> 00:01:00.018
Well, that is kind of how that works and
so

15
00:01:00.018 --> 00:01:04.214
it works a little better when
you're talking about promises.

16
00:01:04.214 --> 00:01:08.669
But that is the idea is that something's
going to happen in the future you wanna

17
00:01:08.669 --> 00:01:11.247
know about it, and so you're observing it.

18
00:01:11.247 --> 00:01:16.325
Then the iterator pattern allows you

19
00:01:16.325 --> 00:01:23.866
to reliably access state or
data with in a collection.

20
00:01:23.866 --> 00:01:29.268
And so
when you combine these two together,

21
00:01:29.268 --> 00:01:35.400
it allows you to communicate
state over time Lo and

22
00:01:35.400 --> 00:01:40.072
behold flow control problem solved.

23
00:01:40.072 --> 00:01:43.973
And so how this works is that
you have the stream of time and

24
00:01:43.973 --> 00:01:46.590
you have these events that happened.

25
00:01:46.590 --> 00:01:48.768
And as these events happen,

26
00:01:48.768 --> 00:01:53.140
they're communicated through
the observable stream.

27
00:01:53.140 --> 00:01:58.468
And so
we are somewhat familiar with getting

28
00:01:58.468 --> 00:02:04.372
values over time and
the big one being promises so

29
00:02:04.372 --> 00:02:08.980
most developers have used a promise.

30
00:02:08.980 --> 00:02:12.369
And this is this is probably
a better analogy for

31
00:02:12.369 --> 00:02:15.854
a beber at a restaurant
that your table is ready.

32
00:02:15.854 --> 00:02:21.212
But it's an asynchronous
resolution of a value and

33
00:02:21.212 --> 00:02:27.074
the problem with that is is that,
well not the problem.

34
00:02:27.074 --> 00:02:31.914
But the limitations of that
is that it is a single

35
00:02:31.914 --> 00:02:36.754
resolution is once you
resolve a promise that is

36
00:02:36.754 --> 00:02:40.992
all it will ever be the difference is the,

37
00:02:43.335 --> 00:02:48.252
Observable or an observable will
emit multiple values over time

38
00:02:48.252 --> 00:02:52.995
as new data is available,
you will continue to receive that.

39
00:02:52.995 --> 00:02:56.873
So a really good example
of that is I think if you

40
00:02:56.873 --> 00:03:00.459
are watching like a real time score board.

41
00:03:00.459 --> 00:03:04.954
As the score is incremented,
you know about immediately.

42
00:03:04.954 --> 00:03:10.958
The difference is that functions
enumerable that they are synchronous.

43
00:03:10.958 --> 00:03:14.238
But what we really care
about is asynchronous so

44
00:03:14.238 --> 00:03:19.657
promises are single resolution observables
allow for multiple resolution.

45
00:03:19.657 --> 00:03:25.385
Now, one thing that's
interesting about this

46
00:03:25.385 --> 00:03:31.828
is think about how we consume
the values from a promise

47
00:03:31.828 --> 00:03:37.715
observable versus a function or
an enumerable.

48
00:03:37.715 --> 00:03:42.612
Well, when you consume
a value from a function,

49
00:03:42.612 --> 00:03:47.399
you're essentially
pulling that data to you.

50
00:03:47.399 --> 00:03:51.183
When you consume a promise or
an observable,

51
00:03:51.183 --> 00:03:54.868
when that promise or
observable resolves or

52
00:03:54.868 --> 00:04:00.161
has a like a next integration in
it is pushing that value to you.

53
00:04:00.161 --> 00:04:07.205
And so I really want us to stop and
think for just a second just mentally.

54
00:04:07.205 --> 00:04:13.353
Just make that note of like, when we
call functions are pulling data to us.

55
00:04:13.353 --> 00:04:17.898
But when we're dealing with
observables and by extension or

56
00:04:17.898 --> 00:04:24.149
we'll deal with promises and by extension
observables data is being pushed to us.

57
00:04:24.149 --> 00:04:29.045
And so I've set the stage but anytime I

58
00:04:29.045 --> 00:04:34.706
start talking about observables typically

59
00:04:34.706 --> 00:04:40.679
the response is usually
something like this.

60
00:04:45.370 --> 00:04:50.382
And I just coolly, calmly collectively
just take a drink of my water,

61
00:04:53.371 --> 00:05:00.187
And I say well, You're probably right,

62
00:05:00.187 --> 00:05:06.241
you are mostly right, but,
i would say observables are challenging.

63
00:05:06.241 --> 00:05:11.361
But, where I believe
people get into trouble or

64
00:05:11.361 --> 00:05:15.330
in the weeds, is that they confuse.

65
00:05:15.330 --> 00:05:19.858
Observables with in this case are xjs and

66
00:05:19.858 --> 00:05:25.861
that 250 operators that
that project ships with.

67
00:05:25.861 --> 00:05:30.488
And so just the sheer number
of operators that come with

68
00:05:30.488 --> 00:05:33.013
that is like what does zip do?

69
00:05:33.013 --> 00:05:36.871
Flat map like all these different I mean
they're even changing like I certainly

70
00:05:36.871 --> 00:05:39.763
don't know them all is that
observables are challenging.

71
00:05:39.763 --> 00:05:44.708
But when you separate
all of the operators and

72
00:05:44.708 --> 00:05:49.263
you focus on just the observable stream,

73
00:05:49.263 --> 00:05:55.398
suddenly this becomes a much
more viable proposition.

74
00:05:55.398 --> 00:05:58.165
And again, reducing complexity

75
00:05:58.165 --> 00:06:02.621
is that we're going to take
all the operators aside.

76
00:06:02.621 --> 00:06:07.452
And let's focus on the observable
stream because when we

77
00:06:07.452 --> 00:06:12.494
understand the observable stream,
then the stage is set.

78
00:06:12.494 --> 00:06:18.764
For us to put this back together in a way
that allows us to build fully reactive,

79
00:06:18.764 --> 00:06:22.672
asynchronous high
performance applications.

80
00:06:22.672 --> 00:06:27.924
But we can't do that until
we understand what and

81
00:06:27.924 --> 00:06:31.521
how an observable stream works.

82
00:06:31.521 --> 00:06:36.229
And so
I'm going to ask you to make a small

83
00:06:36.229 --> 00:06:40.532
paradigm shift this is all it takes.

84
00:06:40.532 --> 00:06:44.994
We are used to thinking and by default,

85
00:06:44.994 --> 00:06:50.402
we think of programming
in these terms input and

86
00:06:50.402 --> 00:06:55.557
output I mean,
I even own a few .io domains.

87
00:06:55.557 --> 00:06:58.797
It's just part of my brand
image at this point,

88
00:06:58.797 --> 00:07:04.403
like we think of it just in programming is
I give you some input, I get some output.

89
00:07:04.403 --> 00:07:06.651
But how does that work, well,

90
00:07:06.651 --> 00:07:10.465
it's a function call and
we're pulling data to us.

91
00:07:10.465 --> 00:07:15.827
This is how we think about programming
is that if I need something,

92
00:07:15.827 --> 00:07:17.659
I'm gonna ask for it.

93
00:07:17.659 --> 00:07:24.648
If I need something I'm gonna ask and
eventually you're going to give it to me.

94
00:07:24.648 --> 00:07:29.882
In order to make sense
of observable streams,

95
00:07:29.882 --> 00:07:35.397
I just need you to go from
this to this that's it.

96
00:07:35.397 --> 00:07:40.279
Just flip the paradigm from input to

97
00:07:40.279 --> 00:07:44.185
output to output to input and

98
00:07:44.185 --> 00:07:49.239
what I mean by that is with anything.

99
00:07:49.239 --> 00:07:54.107
You have this basic sequence
that looks like this.

100
00:07:54.107 --> 00:08:00.014
You have, an initial output and
a final input.

101
00:08:00.014 --> 00:08:04.004
So we've inverted this but
what that means is that

102
00:08:04.004 --> 00:08:08.382
you have an event that is
producing an initial output.

103
00:08:08.382 --> 00:08:14.275
It's happening and it's pushing it to you,
it's delivering it to you, it's streaming

104
00:08:14.275 --> 00:08:19.638
to you, everything is a stream, especially
if we're talking about DOM events.

105
00:08:19.638 --> 00:08:26.433
What we have to decide is where do
we wanna put it in our application,

106
00:08:26.433 --> 00:08:31.336
and what is the final form
that we need it to be in?

107
00:08:31.336 --> 00:08:35.957
So, we have initial output,
final input and

108
00:08:35.957 --> 00:08:41.441
then in the middle,
we've got this magic sandwich.

109
00:08:41.441 --> 00:08:47.071
So what this looks like
is you have an event,

110
00:08:47.071 --> 00:08:50.732
you have a subscribe block.

111
00:08:50.732 --> 00:08:54.242
So that's the event is we're
getting on this train,

112
00:08:54.242 --> 00:08:57.606
the subscribe block is
we're at our destination.

113
00:08:57.606 --> 00:09:05.125
And then the middle magic portion of
the sandwich are just the operators and

114
00:09:05.125 --> 00:09:09.911
so let's look at a very,
very basic sequence.

115
00:09:09.911 --> 00:09:15.704
And so this is in angular,
don't let that get in the way,

116
00:09:15.704 --> 00:09:19.099
we could easily do this without.

117
00:09:19.099 --> 00:09:21.214
But when you're dealing with DOM,

118
00:09:21.214 --> 00:09:24.681
it's nice to have some framework
to help smooth that out.

119
00:09:24.681 --> 00:09:30.036
But anytime that I'm dealing
with an observable stream,

120
00:09:30.036 --> 00:09:33.654
the exercise that I go through is this.

121
00:09:33.654 --> 00:09:37.701
Where is the initial output?

122
00:09:37.701 --> 00:09:40.737
Where is the final input?

123
00:09:40.737 --> 00:09:43.128
And what's happening in between?

124
00:09:43.128 --> 00:09:48.507
And that's how I process every
single observable stream.

125
00:09:48.507 --> 00:09:53.041
But the first thing that
I do every single time

126
00:09:53.041 --> 00:09:57.343
is I figure out what
the initial output is.

127
00:09:57.343 --> 00:10:03.832
And so in this case, if we look at this,

128
00:10:03.832 --> 00:10:08.560
this is the initial output.

129
00:10:08.560 --> 00:10:13.840
We're saying get this button,
and when it clicks,

130
00:10:13.840 --> 00:10:17.450
communicate that down the stream.

131
00:10:17.450 --> 00:10:23.995
Initial output and
then we have our final input.

132
00:10:23.995 --> 00:10:29.455
So the subscribe block, essentially
terminates or finalizes the stream,

133
00:10:29.455 --> 00:10:34.403
you cannot modify the data within
the stream at any point after that,

134
00:10:34.403 --> 00:10:36.720
because it's been delivered.

135
00:10:36.720 --> 00:10:42.552
And so now you're saying this is where
I want to input it into my application,

136
00:10:42.552 --> 00:10:45.260
and this is the shape that I want it.

137
00:10:45.260 --> 00:10:51.158
Then what you can do is assemble
yourself a nice Dagwood sandwich.

138
00:10:51.158 --> 00:10:56.618
And that you can say I want
to take this event and

139
00:10:56.618 --> 00:11:00.678
I want to map it to something else so

140
00:11:00.678 --> 00:11:07.398
when life gives you lemons,
you just map it to lemonade.

141
00:11:07.398 --> 00:11:11.831
So somebody could just make
an Inspirational poster out of that I

142
00:11:11.831 --> 00:11:12.906
approve of it.

143
00:11:12.906 --> 00:11:16.992
But all we're doing is saying I don't like
this I don't like your lemons I'm mapping

144
00:11:16.992 --> 00:11:17.794
it to lemonade.

145
00:11:17.794 --> 00:11:23.928
And then you can start to stack
them because your methods and

146
00:11:23.928 --> 00:11:30.933
your operators are pure immutable
functions with no side effects.

147
00:11:30.933 --> 00:11:35.583
Which means that you take a data
structure, you pass it in,

148
00:11:35.583 --> 00:11:37.912
you get a new data structure.

149
00:11:37.912 --> 00:11:41.722
It goes into the next thing,
into the next thing,

150
00:11:41.722 --> 00:11:45.721
into the next thing,
until it comes out the bottom.

151
00:11:45.721 --> 00:11:50.899
And so at a high level this is

152
00:11:50.899 --> 00:11:56.761
the basic observable string.

153
00:11:56.761 --> 00:12:03.245
You have your initial output,
your final input, and

154
00:12:03.245 --> 00:12:09.740
then any number of things
that can happen in between.

