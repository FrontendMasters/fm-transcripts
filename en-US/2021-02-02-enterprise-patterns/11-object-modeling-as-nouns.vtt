WEBVTT

1
00:00:00.500 --> 00:00:03.355
If you've never ever programmed before,
and

2
00:00:03.355 --> 00:00:06.721
you just randomly took a wrong
turn on the highway, and

3
00:00:06.721 --> 00:00:10.911
you got lost on the bad part of town and
you ended up in this workshop.

4
00:00:10.911 --> 00:00:15.931
It's cool because,
this would be the place to

5
00:00:15.931 --> 00:00:21.724
show up because we're going
to approach programming

6
00:00:21.724 --> 00:00:27.400
from the standpoint that
we were assuming nothing.

7
00:00:27.400 --> 00:00:32.000
And the one thing that I do
wanna call out is we're gonna

8
00:00:32.000 --> 00:00:34.705
do a little bit wax on, wax off.

9
00:00:34.705 --> 00:00:39.807
And if you seen the movie and somebody
else has it and I don't understand

10
00:00:39.807 --> 00:00:44.654
what he's talking about fill it in and
chats, but essentially Mr.

11
00:00:44.654 --> 00:00:50.375
Miyagi had Denilson do a bunch of really
tedious stuff that didn't make sense.

12
00:00:50.375 --> 00:00:55.272
And then, at some point, Daniel said,
I've had enough I'm not doing this.

13
00:00:55.272 --> 00:00:58.095
And speaking of wax in the car, Mr.
Miyagi is like, well,

14
00:00:58.095 --> 00:01:01.613
you've been actually learning karate
the entire time, try to punch me.

15
00:01:01.613 --> 00:01:05.147
Dennison tried to punch him and all of
a sudden, or actually Mr. Merrick said,

16
00:01:05.147 --> 00:01:08.604
I'm gonna punch you wax the car and
Dennison he basically blocked the punch.

17
00:01:08.604 --> 00:01:14.123
So what we're gonna do now is
we're going to wax the car and

18
00:01:14.123 --> 00:01:20.672
we are going to then realize that
we're actually blocking punches.

19
00:01:20.672 --> 00:01:23.528
So even as small children,

20
00:01:23.528 --> 00:01:28.868
we understand that our world
consists of things and

21
00:01:28.868 --> 00:01:35.590
that these things have characteristics
that make them unique.

22
00:01:37.230 --> 00:01:41.860
And so we understand that we have a car.

23
00:01:42.920 --> 00:01:49.170
That might be read,
it might be a Ford or Chevy or a Tesla.

24
00:01:49.170 --> 00:01:56.793
That you have a person that has a name,
first name and a last name.

25
00:01:56.793 --> 00:01:57.294
Hair color.

26
00:01:57.294 --> 00:02:05.581
We understand that there are things in
this world that have characteristics and

27
00:02:05.581 --> 00:02:10.775
our job is to articulate
those characteristics,

28
00:02:10.775 --> 00:02:17.472
and the relationships that those
objects have with each other.

29
00:02:17.472 --> 00:02:20.842
Now, I would imagine that at some point,
at some time,

30
00:02:20.842 --> 00:02:25.578
somebody is gonna see this and they're
gonna do this huge I roll like seriously

31
00:02:25.578 --> 00:02:29.260
we're talking about like
objects like primitive objects.

32
00:02:31.600 --> 00:02:35.504
The problem is that the majority or

33
00:02:35.504 --> 00:02:40.081
a major portion of complexity stems from

34
00:02:40.081 --> 00:02:45.196
the fact that someone has
not taken the time to

35
00:02:45.196 --> 00:02:50.192
properly model the domain
that they are in.

36
00:02:50.192 --> 00:02:55.294
And so, when you wanna talk about
application complexity, you have to

37
00:02:55.294 --> 00:03:00.921
start at the domain model, like this is
the most important thing in the world.

38
00:03:00.921 --> 00:03:06.432
When you're writing code is you have
to get your domain model correct.

39
00:03:06.432 --> 00:03:11.136
What that means is you have to create and
define the objects that

40
00:03:11.136 --> 00:03:16.015
are going to exist in your application
in a way that is accurate for

41
00:03:16.015 --> 00:03:19.762
the reality in which
you're trying to describe.

42
00:03:19.762 --> 00:03:21.860
Let me give you an example.

43
00:03:21.860 --> 00:03:26.860
I was working with someone the other
day and apprentice and their

44
00:03:26.860 --> 00:03:32.980
physical therapist and we were modelling
the domain of a physical therapist.

45
00:03:32.980 --> 00:03:37.760
And what we realized or
what he realized is that you would

46
00:03:37.760 --> 00:03:42.753
model a patient and
you would model a physical therapist.

47
00:03:42.753 --> 00:03:47.602
And naively, you would say
that a physical therapist has

48
00:03:47.602 --> 00:03:52.755
a relationship with a patient,
a direct relationship, but

49
00:03:52.755 --> 00:03:58.311
what we realized is that
the relationship between the patient and

50
00:03:58.311 --> 00:04:02.370
the therapist was only
through the treatment.

51
00:04:04.170 --> 00:04:08.821
And you realize that you actually have
a one or many to many relationship is

52
00:04:08.821 --> 00:04:12.721
that one patient can actually
have more than one therapist and

53
00:04:12.721 --> 00:04:16.460
one therapist can have
more than one patient.

54
00:04:16.460 --> 00:04:20.883
And all sudden now you realize that
the relationship between the therapist and

55
00:04:20.883 --> 00:04:24.042
the patient is that if you were
to model it is not direct.

56
00:04:24.042 --> 00:04:29.152
But there's actually a treatment or
a session that exists in between that and

57
00:04:29.152 --> 00:04:33.476
if he had gotten that wrong,
it would have completely impeded and

58
00:04:33.476 --> 00:04:37.427
impaired his ability to model
an application around that.

59
00:04:37.427 --> 00:04:42.463
And so
it's incredibly important to get data

60
00:04:42.463 --> 00:04:47.764
models correct which come down to yeah,
like,

61
00:04:47.764 --> 00:04:54.803
we are going to write very simple
objects to describe a domain.

62
00:04:54.803 --> 00:05:00.887
The one thing I will say is that when you
understand a domain, or a domain object,

63
00:05:00.887 --> 00:05:07.352
the domain model, there's a lot of things
that you can know about that application.

64
00:05:07.352 --> 00:05:11.222
So if I showed you this client object.

65
00:05:11.222 --> 00:05:15.102
And I asked you, what do you think an
input form, like a form would look like,

66
00:05:15.102 --> 00:05:16.320
to create a new client?

67
00:05:18.410 --> 00:05:22.020
Everybody is hopefully looking and
they're saying, well,

68
00:05:22.020 --> 00:05:25.700
that's a form with three fields
first name, last name, company.

69
00:05:27.630 --> 00:05:30.531
It's easy, like,
if I gave you a user object,

70
00:05:30.531 --> 00:05:32.717
you know what that form looks like.

71
00:05:32.717 --> 00:05:34.980
Not only that is you know what
the rest endpoints look like.

72
00:05:36.070 --> 00:05:38.002
You know what your Redux
is gonna look like,

73
00:05:38.002 --> 00:05:39.998
you know what your NTRs
is going to look like.

74
00:05:39.998 --> 00:05:43.650
There's so much that you can
know about an application.

75
00:05:44.960 --> 00:05:52.550
When you understand the domain model,
so back to our objects in JavaScript,

76
00:05:52.550 --> 00:05:57.660
you can define an object
is an object literal.

77
00:05:57.660 --> 00:06:01.585
Like this is I'm saying
with my curly braces.

78
00:06:01.585 --> 00:06:04.500
I have this thing And
I have these properties or

79
00:06:04.500 --> 00:06:07.208
characteristics that have these values.

80
00:06:07.208 --> 00:06:08.440
First name is John.

81
00:06:08.440 --> 00:06:12.935
Last name is Doe company is Acme, Inc.

82
00:06:12.935 --> 00:06:16.644
And you can have various
properties on this.

83
00:06:16.644 --> 00:06:21.713
So in this case, if I'm working with
a field I generally will have a blank or

84
00:06:21.713 --> 00:06:26.620
like a mock object where I can say
the ID is null, first name, last name,

85
00:06:26.620 --> 00:06:27.923
company is empty.

86
00:06:27.923 --> 00:06:31.700
And so you can have more than one
object with different properties.

87
00:06:32.960 --> 00:06:37.283
Not only that, but
you can have a collection of objects.

88
00:06:37.283 --> 00:06:39.665
And so you can have more than
one object in a collection.

89
00:06:39.665 --> 00:06:43.649
So We'll talk about objects which
are nothing more than nouns or

90
00:06:43.649 --> 00:06:44.841
data structures.

91
00:06:44.841 --> 00:06:47.468
And then you're going to have an array or

92
00:06:47.468 --> 00:06:50.570
a collection of more than
one of those objects.

93
00:06:52.460 --> 00:06:56.420
Now we have an object and

94
00:06:56.420 --> 00:07:00.781
then we have interfaces.

95
00:07:00.781 --> 00:07:04.809
In an interface is a way for

96
00:07:04.809 --> 00:07:10.130
us to describe what something is.

97
00:07:11.430 --> 00:07:17.662
And so in a way,
I think of an interface as a contract,

98
00:07:17.662 --> 00:07:23.480
that if I'm going to create,
a bunch of clients,

99
00:07:23.480 --> 00:07:31.671
and I'm going to ensure that these
are indeed clients as advertised.

100
00:07:31.671 --> 00:07:36.827
By defining an interface and
implementing that interface,

101
00:07:36.827 --> 00:07:41.779
I now have the ability to strongly
typed that object as well

102
00:07:41.779 --> 00:07:44.722
as strongly type the collection.

103
00:07:44.722 --> 00:07:51.905
And so a contract or an interface
is a way to communicate intent and

104
00:07:51.905 --> 00:07:57.270
to ensure compliance
across your application.

105
00:07:59.020 --> 00:08:02.707
Now, we have classes.

106
00:08:02.707 --> 00:08:08.183
So if an object is
an instance of something and

107
00:08:08.183 --> 00:08:13.804
an interface is a contract,
a class is nothing

108
00:08:13.804 --> 00:08:19.270
more than a blueprint to create objects.

109
00:08:19.270 --> 00:08:22.594
And so if you have, for
instance, a housing development,

110
00:08:22.594 --> 00:08:26.850
which we have a ton of these in Phoenix
that you might say we're building this

111
00:08:26.850 --> 00:08:29.660
housing development and
here's the blueprint.

112
00:08:29.660 --> 00:08:34.570
Or here's three blueprints for the three
possible houses that we can have.

113
00:08:35.670 --> 00:08:40.416
So the blueprints are not a house.

114
00:08:40.416 --> 00:08:45.160
A class is not an instance of an object.

115
00:08:46.270 --> 00:08:50.792
A blueprint only defines the behavior and
the parameters that are going to exist for

116
00:08:50.792 --> 00:08:53.160
that object when it's created.

117
00:08:53.160 --> 00:08:58.804
And then a, I think of interfaces is,
let's say like city regulations or

118
00:08:58.804 --> 00:09:03.082
zoning laws that if you're
going to build a house in this

119
00:09:03.082 --> 00:09:07.653
neighborhood then it can't be
more than two storeys high.

120
00:09:07.653 --> 00:09:12.272
Because imagine how funny that would look,
if you had a six storey house in

121
00:09:12.272 --> 00:09:17.578
a neighborhood of, a bunch of single story
ranch houses, that would be hilarious.

122
00:09:17.578 --> 00:09:24.233
And so
all a class does is it's a blueprint.

123
00:09:24.233 --> 00:09:29.570
For defining how an object
is going to be created and

124
00:09:29.570 --> 00:09:36.162
the properties and
the behavior that you're going to give it.

125
00:09:36.162 --> 00:09:41.639
And so now I've defined a VIP client and
I'm saying.

126
00:09:45.432 --> 00:09:49.659
Iron Man equals new VIP
client which then returns

127
00:09:49.659 --> 00:09:54.620
an instance of that object and
then we can trace this out.

