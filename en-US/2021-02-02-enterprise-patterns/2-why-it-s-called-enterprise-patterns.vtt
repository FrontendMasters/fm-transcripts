WEBVTT

1
00:00:00.160 --> 00:00:05.014
The talk is called enterprise patterns,
and

2
00:00:05.014 --> 00:00:09.800
where is the emphasis on enterprise?

3
00:00:09.800 --> 00:00:11.470
And I think that's a fair question.

4
00:00:12.500 --> 00:00:17.529
When we talk about enterprise patterns,
and so

5
00:00:17.529 --> 00:00:24.956
somebody chimed in and said capitalism,
which I think is hilarious.

6
00:00:24.956 --> 00:00:30.247
But when we talk about
enterprise software, and

7
00:00:30.247 --> 00:00:36.055
it's somebody who has been
on hundreds of enterprise

8
00:00:36.055 --> 00:00:42.637
engagements that the patterns
that we need to communicate or

9
00:00:42.637 --> 00:00:48.831
rather that I find that
individuals within an enterprise

10
00:00:48.831 --> 00:00:54.250
need to adopt to be effective
is not the by nature or

11
00:00:54.250 --> 00:00:59.154
not an escalation of complexity but
rather,

12
00:00:59.154 --> 00:01:04.188
they're oftentimes so
simplistic that in and

13
00:01:04.188 --> 00:01:10.410
of themselves,
they look like almost childish in a way.

14
00:01:11.410 --> 00:01:17.757
And so, for me kind of this big,
I think, philosophical and

15
00:01:17.757 --> 00:01:24.977
fundamental shift Is that when you
talk about enterprise patterns,

16
00:01:24.977 --> 00:01:30.827
that the best ones are going
to be very simplistic, in so

17
00:01:30.827 --> 00:01:38.970
much that you can apply them at scale
across your entire application.

18
00:01:38.970 --> 00:01:44.429
And so this is where,
when we talk about enterprise patterns,

19
00:01:44.429 --> 00:01:49.991
that I would be doing everybody
a disservice if I came through and

20
00:01:49.991 --> 00:01:55.450
I started talking about immediately,
right out of the gates,

21
00:01:55.450 --> 00:01:59.673
microservices, distributed architectures,

22
00:01:59.673 --> 00:02:04.617
high scalability,
infrastructure with orchestrators

23
00:02:04.617 --> 00:02:09.767
etc without addressing the core
problem that exists across

24
00:02:09.767 --> 00:02:14.505
all enterprise applications,
which is complexity,

25
00:02:14.505 --> 00:02:22.100
which can be solved through the diligent
application of first principles.

26
00:02:22.100 --> 00:02:28.032
So just a little bit of
commentary about this,

27
00:02:28.032 --> 00:02:32.745
is that when I run across a team that is

28
00:02:32.745 --> 00:02:38.070
struggling, implementing a solution,

29
00:02:38.070 --> 00:02:42.785
more often than not the temptation is

30
00:02:42.785 --> 00:02:47.499
to put the blame on the framework, or

31
00:02:47.499 --> 00:02:55.280
whatever technology that you
happen to be using at the time.

32
00:02:56.430 --> 00:03:01.453
And so a really good example of
this is that you'll show up and

33
00:03:01.453 --> 00:03:07.561
somebody or a team is having a problem
implementing an angular solution,

34
00:03:07.561 --> 00:03:13.373
and it's not because angular is bad
is because the implementation and

35
00:03:13.373 --> 00:03:20.830
the execution of that particular
initiative is not great, it's problematic.

36
00:03:20.830 --> 00:03:25.794
And the solution to this is
to simplify the architecture,

37
00:03:25.794 --> 00:03:31.167
simplify the implementation,
embrace first principles that

38
00:03:31.167 --> 00:03:36.333
even the first thing that I would do is,
I would go through and

39
00:03:36.333 --> 00:03:43.050
I would look for the axis of evil and I
would start to refactor those pieces out.

40
00:03:44.270 --> 00:03:49.203
Unfortunately, the default position,
or typically the most common

41
00:03:49.203 --> 00:03:53.966
reaction that I see is that because
a team's not identified the root

42
00:03:53.966 --> 00:03:59.600
cause of the problem, which is
complexity and their response to it.

43
00:03:59.600 --> 00:04:01.910
That they blame the framework, and

44
00:04:01.910 --> 00:04:06.992
then what happens is that they simply
just say, we need to switch frameworks,

45
00:04:06.992 --> 00:04:12.020
and we need to go to react or view or
from view to react or vice versa.

46
00:04:12.020 --> 00:04:16.758
And so I see this cycle of almost
every three years, teams that have not

47
00:04:16.758 --> 00:04:21.578
embraced first principles,
that they get themselves into problems,

48
00:04:21.578 --> 00:04:26.238
they blame the framework and
they simply hop to the next hottest thing

49
00:04:26.238 --> 00:04:31.120
without understanding why their
previous initiative failed.

50
00:04:31.120 --> 00:04:37.956
And so if you want to change the quality
of code that an engineer is writing,

51
00:04:37.956 --> 00:04:43.054
first of all,
you don't change the way that they code,

52
00:04:43.054 --> 00:04:48.477
you change the way that they think and
the way that they think

53
00:04:48.477 --> 00:04:53.580
about code, as a result,
their code will get better.

54
00:04:53.580 --> 00:04:57.110
And so
I think that's a fair question in that,

55
00:04:57.110 --> 00:05:02.660
when we talk about complexity,
the antidote is simplicity.

56
00:05:02.660 --> 00:05:04.967
And if you'll bear with me,

57
00:05:04.967 --> 00:05:09.681
that everything that I'm
teaching you in this workshop,

58
00:05:09.681 --> 00:05:15.064
it all stacks on top of each other,
in that all of these patterns and

59
00:05:15.064 --> 00:05:20.570
concepts that I am talking about,
they scale infinitely.

60
00:05:20.570 --> 00:05:23.760
And so
we'll see more of that as we go along.

