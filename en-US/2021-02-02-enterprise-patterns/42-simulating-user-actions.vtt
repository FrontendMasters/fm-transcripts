WEBVTT

1
00:00:00.260 --> 00:00:04.710
In our last and final module, we're going
to talk about distributed complexity.

2
00:00:04.710 --> 00:00:11.880
So the entire theme of this entire
workshop has been managing complexity.

3
00:00:11.880 --> 00:00:16.865
Because I think the great enemy
of good high quality software,

4
00:00:16.865 --> 00:00:20.780
enterprise applications is complexity.

5
00:00:20.780 --> 00:00:23.010
And so we've started at a micro level.

6
00:00:24.320 --> 00:00:26.580
And we've talked about the axis of evil.

7
00:00:26.580 --> 00:00:32.260
Then we moved on to what I would say a
mezzo level, which is feature complexity.

8
00:00:32.260 --> 00:00:35.830
And then we talked about it,
it kind of a macro level.

9
00:00:35.830 --> 00:00:40.326
Which is really this time domain
that exists as we deal with

10
00:00:40.326 --> 00:00:42.715
asynchronous programming and

11
00:00:42.715 --> 00:00:48.990
how we can use observables to help
manage flow control in our application.

12
00:00:48.990 --> 00:00:54.264
And so, in this last module I want to
talk about distributed complexity and

13
00:00:54.264 --> 00:00:56.943
how, by applying these techniques,

14
00:00:56.943 --> 00:01:01.214
especially with proper state
management and flow control,

15
00:01:01.214 --> 00:01:07.570
that we can do some really interesting
things by manipulating time and space.

16
00:01:07.570 --> 00:01:12.274
So I want to take a moment and
just walk through the natural

17
00:01:12.274 --> 00:01:16.200
progression of web
applications as we know it.

18
00:01:18.340 --> 00:01:23.014
So, I would say it the first advent
of JavaScript as we know it,

19
00:01:23.014 --> 00:01:25.322
the first phase of greatness.

20
00:01:25.322 --> 00:01:28.601
The first dynasty of greatness was really,

21
00:01:28.601 --> 00:01:33.916
when jQuery showed up that kind of
before that it was just too cumbersome

22
00:01:33.916 --> 00:01:39.510
to really work with JavaScript because
of the browser and consistencies.

23
00:01:40.830 --> 00:01:46.059
The challenge with that was
when you're building a jQuery

24
00:01:46.059 --> 00:01:51.183
application air quotes is that
your user interaction and

25
00:01:51.183 --> 00:01:57.055
the he logic that handled them
were incredibly tightly-coupled

26
00:01:57.055 --> 00:02:01.431
is that the interactions
knew about the logic and

27
00:02:01.431 --> 00:02:04.972
the logic knew about the interaction.

28
00:02:04.972 --> 00:02:09.907
And they were very much
intertwined that you were mixing

29
00:02:09.907 --> 00:02:14.720
declarative markup with imperative logic.

30
00:02:14.720 --> 00:02:20.660
Now when angular JS,
the original angularJS came on the scene.

31
00:02:21.990 --> 00:02:26.699
One of the big things that it
offered was the ability to

32
00:02:26.699 --> 00:02:32.230
separate the imperative logic and
your declarative markup.

33
00:02:32.230 --> 00:02:36.622
And so now you have a little bit
of separation between the user

34
00:02:36.622 --> 00:02:40.600
interaction and the logic that handled it.

35
00:02:40.600 --> 00:02:43.290
And so this went very, very well.

36
00:02:43.290 --> 00:02:46.110
This was kind of a new thing,
and it was very, very popular.

37
00:02:47.640 --> 00:02:52.292
The problem is, is that as your
application started to grow in size,

38
00:02:52.292 --> 00:02:56.560
is that now you had two controllers
that needed the same thing.

39
00:02:57.710 --> 00:02:59.300
And so how did you solve that?

40
00:02:59.300 --> 00:03:02.200
Well, with a service.

41
00:03:02.200 --> 00:03:05.574
And so notice now we're
taking this shared logic and

42
00:03:05.574 --> 00:03:09.610
we're just extracting it out further and
further.

43
00:03:09.610 --> 00:03:14.845
And so now we have a Dom of
Multiple HTML elements in the DOM that

44
00:03:14.845 --> 00:03:21.370
are sharing controllers that are now
sharing logic within a service.

45
00:03:21.370 --> 00:03:25.136
Now, here's the challenge with this,

46
00:03:25.136 --> 00:03:30.122
is that a typical stateful
service is responsible for

47
00:03:30.122 --> 00:03:37.310
not only fetching remote data but
also managing the state of that data.

48
00:03:37.310 --> 00:03:42.233
And this always bothered me because
I felt like I was staring at

49
00:03:42.233 --> 00:03:47.062
a stateful service and
it's like this is doing it a minimum,

50
00:03:47.062 --> 00:03:51.260
two things, two very distinct things.

51
00:03:51.260 --> 00:03:55.670
And thankfully for us Redux shows up.

52
00:03:55.670 --> 00:03:59.857
And what this allowed us to
do is in its simplest form,

53
00:03:59.857 --> 00:04:04.975
is to separate the state management
portion in to or the logic that

54
00:04:04.975 --> 00:04:11.320
handled that into reducers and then
the actual state itself into the store.

55
00:04:11.320 --> 00:04:14.429
And then it also provided a mechanism for

56
00:04:14.429 --> 00:04:19.643
managing that asynchronous part in
the term in the form of effects,

57
00:04:19.643 --> 00:04:24.126
but what we're seeing here is
we're starting to move this

58
00:04:24.126 --> 00:04:29.940
complexity further and
further away from our component layer.

59
00:04:29.940 --> 00:04:34.439
And so here's a quote that I like
quite a bit and It was quite,

60
00:04:34.439 --> 00:04:39.470
I think serendipitous that I was
reading this as I was thinking about

61
00:04:39.470 --> 00:04:44.148
programming and very quickly,
it says in classical physics,

62
00:04:44.148 --> 00:04:49.972
if you know everything about a system at
some instant of time, and you also know

63
00:04:49.972 --> 00:04:56.100
the equations that govern how the system
changes then you can predict the future.

64
00:04:57.270 --> 00:05:00.873
That's what we mean when we say
that the classical laws of physics

65
00:05:00.873 --> 00:05:02.060
are deterministic.

66
00:05:03.060 --> 00:05:06.927
If we can say the same thing, but
with the past and the future reversed,

67
00:05:06.927 --> 00:05:10.490
then the same equations will tell
you everything about the past.

68
00:05:11.650 --> 00:05:14.090
Such a system is called reversible.

69
00:05:15.120 --> 00:05:21.398
And I realized as I'm reading his
theoretical minimum by Leonard Susskind

70
00:05:21.398 --> 00:05:26.790
that this is everything that I
would want out of an application.

71
00:05:26.790 --> 00:05:32.390
And so I'm just sitting there
thinking like, what did I just read?

72
00:05:32.390 --> 00:05:37.016
And so let's break this down because
in some ways Leonard is talking

73
00:05:37.016 --> 00:05:39.260
about classical physics.

74
00:05:39.260 --> 00:05:40.100
And for me,

75
00:05:40.100 --> 00:05:45.820
he's talking about everything that should
exist in a well architected system.

76
00:05:47.390 --> 00:05:51.295
In classical physics, and
a well architected application, if you

77
00:05:51.295 --> 00:05:56.790
know everything about a system at some
instant of time, well guess what we do?

78
00:05:56.790 --> 00:05:57.890
It's the store.

79
00:05:57.890 --> 00:05:59.060
It's your single state tree.

80
00:05:59.060 --> 00:06:02.352
You can know everything about a system and

81
00:06:02.352 --> 00:06:06.970
application at any given time
because it's in the store.

82
00:06:08.210 --> 00:06:11.300
And you also know the equations
that govern how the system changes.

83
00:06:12.390 --> 00:06:15.690
Well, guess what we do, they're reducers.

84
00:06:17.220 --> 00:06:19.950
Then you can predict the future.

85
00:06:21.130 --> 00:06:24.723
That's what we mean when we say
the classical laws of physics

86
00:06:24.723 --> 00:06:28.737
are deterministic, and we can say
the same thing with the future and

87
00:06:28.737 --> 00:06:32.370
past reversed,
such a system is called reversible.

88
00:06:32.370 --> 00:06:35.461
And so with proper state management in

89
00:06:35.461 --> 00:06:40.530
a Redux pattern that we can
accomplish all of this.

90
00:06:40.530 --> 00:06:43.944
And what this allows
us to do is some very,

91
00:06:43.944 --> 00:06:50.570
very interesting things with the user
input and how we respond to it.

92
00:06:50.570 --> 00:06:56.761
So typically, in a very naive system
is that you have a user interaction and

93
00:06:56.761 --> 00:07:02.480
then very quickly almost immediately,
you have a response to that.

94
00:07:03.960 --> 00:07:07.046
But through proper state management and

95
00:07:07.046 --> 00:07:11.039
proper flow control,
we're able to create time and

96
00:07:11.039 --> 00:07:15.680
space between the user interaction and
how we respond to it.

97
00:07:17.300 --> 00:07:18.420
So how do we do that?

98
00:07:19.610 --> 00:07:26.940
With actions, is that we can communicate
that something has happened via an action.

99
00:07:26.940 --> 00:07:32.262
And so now you have a user response or
an interaction and then the response and

100
00:07:32.262 --> 00:07:37.770
then this action has to communicate
this and travel some distance.

101
00:07:37.770 --> 00:07:40.610
And we can play around with that.

102
00:07:40.610 --> 00:07:46.193
So now what we can do is we can
create a user interaction then or

103
00:07:46.193 --> 00:07:53.638
user event dispatch the action, and then
it has to travel some amount of space and

104
00:07:53.638 --> 00:07:58.149
then arrive at some other
place to be processed.

105
00:07:59.270 --> 00:08:06.185
Then what we can also do is if we
can express user interactions or

106
00:08:06.185 --> 00:08:11.794
events through actions,
then we can take those and

107
00:08:11.794 --> 00:08:15.930
recreate those at any given time.

108
00:08:15.930 --> 00:08:17.900
So this is what I mean by time and space.

109
00:08:19.400 --> 00:08:22.100
And from here by using time and

110
00:08:22.100 --> 00:08:26.960
space and through the proper
handling of the logic and

111
00:08:26.960 --> 00:08:33.765
the state that this presents opportunities
to do to not only separate it but

112
00:08:33.765 --> 00:08:38.970
manage the state in ways that
we could not previously do.

113
00:08:40.460 --> 00:08:45.087
But create or recreate interactions
that historically have

114
00:08:45.087 --> 00:08:50.240
happened immediately to where
we can recreate those actions.

115
00:08:50.240 --> 00:08:55.629
Or we can automate actions or
we can isolate certain actions and

116
00:08:55.629 --> 00:08:59.440
control them in a very specific way.

117
00:08:59.440 --> 00:09:05.820
So let's start with manual dispatch,
let me show you a space example.

118
00:09:05.820 --> 00:09:11.995
So in a standard application,
let me just go over to the browser here,

119
00:09:11.995 --> 00:09:16.090
and I'm going to just
close the sidebar down.

120
00:09:17.140 --> 00:09:22.628
What I have here is I'm clicking

121
00:09:22.628 --> 00:09:26.500
this user, so John J.

122
00:09:26.500 --> 00:09:30.076
And you can see as I click it,

123
00:09:30.076 --> 00:09:36.190
that on the left hand side,
my form is updating.

124
00:09:37.330 --> 00:09:41.886
And so how this is working quite simply
is that I'm capturing that user event and

125
00:09:41.886 --> 00:09:43.960
I'm dispatching an action.

126
00:09:43.960 --> 00:09:47.910
To say, hey,
this is the new selected client.

127
00:09:47.910 --> 00:09:52.920
So remember the exercise we
did around the four elements.

128
00:09:52.920 --> 00:09:57.899
This should be somewhat familiar
that we have a state object with

129
00:09:57.899 --> 00:10:03.537
the selected client or a current
client and we're simply setting that.

130
00:10:03.537 --> 00:10:06.180
Now, back to the slides.

131
00:10:06.180 --> 00:10:11.263
What would happen if we could
capture that action that is being

132
00:10:11.263 --> 00:10:16.148
generated off of that click,
and we were able to dispatch it

133
00:10:16.148 --> 00:10:21.134
from the side we could effectively
simulate that user action

134
00:10:21.134 --> 00:10:27.160
because we're converting that
user interaction into an action.

135
00:10:27.160 --> 00:10:31.824
And so we can then side or
dispatch it from the side and

136
00:10:31.824 --> 00:10:36.160
recreate that same exact user interaction.

137
00:10:36.160 --> 00:10:37.020
So what does this look like?

138
00:10:42.270 --> 00:10:48.032
In our code here,
what I've done is I've created a set of or

139
00:10:48.032 --> 00:10:51.500
recreated a set of actions.

140
00:10:51.500 --> 00:10:55.233
Because remember, an action is nothing
more than a simple object with a type and

141
00:10:55.233 --> 00:10:56.370
a payload.

142
00:10:56.370 --> 00:11:01.400
And what I can do is, and
I'll just refresh this is that I can take

143
00:11:01.400 --> 00:11:07.645
these actions and instead of clicking over
here I note that if I'm going to click

144
00:11:07.645 --> 00:11:12.770
on this John DOE element,
that I'm going to dispatch an action,

145
00:11:12.770 --> 00:11:19.110
well, I can just go here, and
I can preemptively create that action.

146
00:11:19.110 --> 00:11:25.979
And so notice now that I am
essentially manipulating the form on

147
00:11:25.979 --> 00:11:32.070
the right by manually
dispatching actions on the left,

148
00:11:32.070 --> 00:11:36.494
so this is what I mean by creating space.

149
00:11:36.494 --> 00:11:40.280
So, put your thinking caps on and
just start to think why or

150
00:11:40.280 --> 00:11:41.840
how this may be useful.

151
00:11:43.070 --> 00:11:50.575
Now, if we can capture and
simulate a single user interaction.

152
00:11:50.575 --> 00:11:57.381
What happens if we take, and
we put a bunch of them together,

153
00:11:57.381 --> 00:12:03.260
and we manually cycle
through a number of actions.

154
00:12:03.260 --> 00:12:08.050
So if we can simulate one action,
why not a group of actions?

155
00:12:08.050 --> 00:12:10.960
And so we can do this via manual cycle.

156
00:12:10.960 --> 00:12:15.828
So imagine now instead of one, we're
going to dispatch a number of actions and

157
00:12:15.828 --> 00:12:18.210
just iterate over them.

158
00:12:18.210 --> 00:12:24.130
And so now we can increase our kind
of sophistication in terms of space.

159
00:12:24.130 --> 00:12:27.257
So the difference is we have our actions,
and

160
00:12:27.257 --> 00:12:30.890
then I'm going to cycle
over them in some interval.

161
00:12:31.970 --> 00:12:34.140
So I'll hop back in the code.

162
00:12:34.140 --> 00:12:36.350
And now let's go to the manual cycle.

163
00:12:36.350 --> 00:12:41.750
Now I'm gonna refresh this just so
we can start clean.

164
00:12:41.750 --> 00:12:46.060
And I'm going to go to the manual cycle.

165
00:12:46.060 --> 00:12:51.939
And all I'm going to do is instead of
one by one dispatching these actions,

166
00:12:51.939 --> 00:12:54.940
I'm going to just iterate over them.

167
00:12:57.020 --> 00:13:01.540
And so now you'll see that on the right
hand side, I'll do this one more time.

168
00:13:03.050 --> 00:13:08.982
It is essentially simulating if I were
on manually on the right hand side and

169
00:13:08.982 --> 00:13:13.238
just clicking back and
forth between those clients.

170
00:13:13.238 --> 00:13:18.243
Now, we've already manipulated
space because I'm manipulating

171
00:13:18.243 --> 00:13:24.121
this thing over here from here, but I can
actually change the cadence in which,

172
00:13:24.121 --> 00:13:28.352
or the speed in which I'm
iterating over those actions.

173
00:13:28.352 --> 00:13:32.890
So, let's go like one and a half seconds.

174
00:13:32.890 --> 00:13:39.230
Notice now if I click this,
like this is happening actually very fast.

175
00:13:39.230 --> 00:13:41.680
So let me refresh this.

176
00:13:41.680 --> 00:13:45.060
And let me just move this
up to like one second.

177
00:13:45.060 --> 00:13:51.660
Here we go.
And so now it's moving even faster.

178
00:13:51.660 --> 00:13:52.530
So it was a half a second.

179
00:13:52.530 --> 00:13:53.870
It was a second.

180
00:13:53.870 --> 00:13:58.359
And we're able to actually
change the cadence in which we

181
00:13:58.359 --> 00:14:01.830
are now simulating this user interaction.

