WEBVTT

1
00:00:00.490 --> 00:00:04.102
When I think of complexity, typically,
I break it down into micro,

2
00:00:04.102 --> 00:00:05.170
mezzo, and macro.

3
00:00:05.170 --> 00:00:07.990
So mezzo is kind of that in-between state.

4
00:00:07.990 --> 00:00:14.632
I had to Google it where I'm like,I know
what macro is, like, what is in between?

5
00:00:14.632 --> 00:00:19.065
And, I realized that the word is mezzo,
and so,

6
00:00:19.065 --> 00:00:25.040
I think of complexity in micro,
mezzo, and macro levels.

7
00:00:25.040 --> 00:00:30.190
And, what's interesting is
that when I think about

8
00:00:30.190 --> 00:00:35.341
managing state and
full control, and code volume,

9
00:00:35.341 --> 00:00:42.850
is that the principles that I have to
adhere to apply at the local code level.

10
00:00:43.860 --> 00:00:46.696
So imagine you're inside of a function and

11
00:00:46.696 --> 00:00:52.230
you're trying to manage the output of that
function, so that's at a micro level.

12
00:00:52.230 --> 00:00:54.800
So I think of that like a component level.

13
00:00:54.800 --> 00:01:00.819
And then at a mezzo level,
I think of that in terms of components or

14
00:01:00.819 --> 00:01:06.515
libraries kind of within
intra-component communication,

15
00:01:06.515 --> 00:01:10.440
and possibly up to the application.

16
00:01:10.440 --> 00:01:15.217
And then when I think about
macro complexity is I definitely

17
00:01:15.217 --> 00:01:19.240
think it the application or
applications level.

18
00:01:19.240 --> 00:01:23.616
So just to set that context is that
when I talk about micro complexity,

19
00:01:23.616 --> 00:01:28.883
I'm talking about local complexity or
really kind of component level complexity,

20
00:01:28.883 --> 00:01:34.430
mezzo would be kind of components and
libs communicating within an application.

21
00:01:34.430 --> 00:01:37.915
And then macro would be
application level complexity or

22
00:01:37.915 --> 00:01:40.420
applications level complexity.

23
00:01:40.420 --> 00:01:44.234
And so starting with local complexity,

24
00:01:44.234 --> 00:01:49.730
the questions that I asked myself,
when I look at code is,

25
00:01:49.730 --> 00:01:54.490
so imagine you've just
opened up a new project.

26
00:01:54.490 --> 00:01:58.550
You've just got put on a new project and
you open up some code.

27
00:02:00.210 --> 00:02:02.890
The first thing I'm gonna ask is,
what does this do?

28
00:02:04.420 --> 00:02:07.931
But, as I'm asking that question,

29
00:02:07.931 --> 00:02:13.031
I'm mentally going through and
I'm asking myself,

30
00:02:13.031 --> 00:02:18.129
can I know the result of this
code every single time and

31
00:02:18.129 --> 00:02:21.778
not only that, can I reuse this code?

32
00:02:21.778 --> 00:02:26.977
So just through muscle memory,
I'm starting to qualify the code

33
00:02:26.977 --> 00:02:32.175
that I'm looking at is I parse through,
and I'm asking myself,

34
00:02:32.175 --> 00:02:35.878
can I know the result of
this code at all times?

35
00:02:35.878 --> 00:02:40.433
And if I can't,
then I found that that has a direct

36
00:02:40.433 --> 00:02:45.440
direct impact on my ability
to figure out what it does.

37
00:02:46.680 --> 00:02:47.830
Can I reuse this code?

38
00:02:47.830 --> 00:02:52.574
And if the answer is no, then typically,
not only do I have to figure out what

39
00:02:52.574 --> 00:02:57.040
that code does, but I have to figure
out the context in which it exists.

40
00:02:58.140 --> 00:03:01.320
And can I test this code?

41
00:03:01.320 --> 00:03:04.530
And so this is the big one.

42
00:03:04.530 --> 00:03:08.036
So ultimately, can I test it?

43
00:03:08.036 --> 00:03:09.970
Can I reuse it?

44
00:03:09.970 --> 00:03:10.860
Or is it portable?

45
00:03:10.860 --> 00:03:11.850
Is it testable?

46
00:03:11.850 --> 00:03:13.580
Is it portable?

47
00:03:13.580 --> 00:03:21.550
And so now this leads into what I
affectionately call the axis of evil.

48
00:03:22.610 --> 00:03:26.953
And so if I had to write down
what I do when I program on

49
00:03:26.953 --> 00:03:31.205
a single sheet of paper,
this would be at the top.

50
00:03:31.205 --> 00:03:36.949
That when almost on every
single project I would say,

51
00:03:36.949 --> 00:03:42.311
over 80% of the code that
I see out in the wild and

52
00:03:42.311 --> 00:03:49.079
the problems and the complexity
that come from it are because or

53
00:03:49.079 --> 00:03:53.932
exists because that
somebody has violated or

54
00:03:53.932 --> 00:03:59.192
made a deal with the devil
via the access of evil.

55
00:03:59.192 --> 00:04:03.570
And so from here,
I wanna start with the statement,

56
00:04:03.570 --> 00:04:07.659
it is impossible to write good test for
bad code.

57
00:04:07.659 --> 00:04:11.230
I just do not believe it is possible.

58
00:04:11.230 --> 00:04:14.810
I think you can write hacky test for
bad code.

59
00:04:14.810 --> 00:04:22.073
It's very, very hard, if not impossible
to write good test for bad code.

60
00:04:22.073 --> 00:04:27.479
So if you're committed to writing
test which testing is like flossing,

61
00:04:27.479 --> 00:04:31.289
that everybody believes
that they should floss but

62
00:04:31.289 --> 00:04:35.206
not everybody does floss,
at least consistently.

63
00:04:35.206 --> 00:04:39.783
Like every time I go to the dentist,
I just basically have to cross my fingers

64
00:04:39.783 --> 00:04:44.359
and lie, like I've totally been flossing
every night for the last six weeks

65
00:04:44.359 --> 00:04:49.240
that's why my teeth are awesome, and
probably not mostly true at all, but yes.

66
00:04:49.240 --> 00:04:51.060
Do you think you should floss?

67
00:04:51.060 --> 00:04:52.500
Absolutely.

68
00:04:52.500 --> 00:04:54.090
And how many people do it?

69
00:04:54.090 --> 00:04:57.012
Well, that's neither here nor there.

70
00:04:57.012 --> 00:05:01.346
But, when you go to an engagement and
you ask your team members or

71
00:05:01.346 --> 00:05:05.455
you ask your client, hey,
what do you think about testing?

72
00:05:05.455 --> 00:05:07.120
You should totally do it.

73
00:05:07.120 --> 00:05:09.037
Okay, what's your test coverage?

74
00:05:09.037 --> 00:05:13.918
And all sudden there's a power outage and
Ninja smoke bombs and they disappear,

75
00:05:13.918 --> 00:05:17.147
it's just this weird awkward
moment of like, well,

76
00:05:17.147 --> 00:05:20.916
we don't actually write test,
we haven't had time to do it.

77
00:05:20.916 --> 00:05:26.447
And one of the reasons is because
the barrier to entry to writing test is so

78
00:05:26.447 --> 00:05:27.000
high.

79
00:05:27.000 --> 00:05:32.250
There's too much friction
to writing good test.

80
00:05:32.250 --> 00:05:32.750
Why?

81
00:05:33.770 --> 00:05:38.315
Because more often than not,
they're not writing testable code.

82
00:05:38.315 --> 00:05:41.387
So if you're committed to writing test,

83
00:05:41.387 --> 00:05:44.913
then you must commit to
writing testable code.

84
00:05:44.913 --> 00:05:51.023
And so, I can honestly say that if this
is all you took from the workshop today,

85
00:05:51.023 --> 00:05:56.577
that you've just paid yourself a ton
of money into the future, because

86
00:05:56.577 --> 00:06:02.428
this is one of the fundamental things
that I run into over and over and over.

87
00:06:02.428 --> 00:06:06.222
This is why we're starting
At Volvo complexity.

88
00:06:06.222 --> 00:06:10.210
And so, the axis of evil, what is this?

89
00:06:10.210 --> 00:06:12.550
So, let's look at this code here.

90
00:06:15.380 --> 00:06:20.872
This is a variation of something I've seen
a bazillion times, over and over and over.

91
00:06:20.872 --> 00:06:26.071
And you basically called recalculate
total, you pass in a widget and

92
00:06:26.071 --> 00:06:30.729
then based on whatever the mode is,
then it does something and

93
00:06:30.729 --> 00:06:34.154
then it recalculates the total, all right?

94
00:06:34.154 --> 00:06:42.764
So, on the surface, you could be tricked
into thinking like this is okayish code.

95
00:06:42.764 --> 00:06:46.505
I've used all of the cool,
immutable operators,

96
00:06:46.505 --> 00:06:50.420
I'm using ternary functions,
fat arrow function.

97
00:06:50.420 --> 00:06:55.382
So somebody might think like, yeah, this
looks like pretty decent, this is okay.

98
00:06:55.382 --> 00:07:00.442
And so the question that I have is,
when I run this code,

99
00:07:00.442 --> 00:07:03.577
so imagine I have a test-widget.

100
00:07:05.613 --> 00:07:10.366
And I call this method three times

101
00:07:10.366 --> 00:07:15.530
with the same test-widget.

102
00:07:15.530 --> 00:07:16.390
What am I going to get?

103
00:07:18.750 --> 00:07:21.880
The answer is, we have no idea.

104
00:07:23.420 --> 00:07:28.249
You can never ever, ever know what
you're going to get when you call

105
00:07:28.249 --> 00:07:30.960
this method with the same parameter,

106
00:07:30.960 --> 00:07:35.760
you'll get a different result
potential every single time.

107
00:07:35.760 --> 00:07:41.565
The reason being is because
the return value of this function or

108
00:07:41.565 --> 00:07:48.810
the output of this function is dependent
on a property outside of that method.

109
00:07:49.840 --> 00:07:57.210
And so, the ringleader of
the axis of evil is hidden state.

110
00:07:58.650 --> 00:08:02.096
And what's interesting
is we talk about these.

111
00:08:02.096 --> 00:08:05.500
These are the worst.

112
00:08:05.500 --> 00:08:10.318
These are scoundrels,
in the programming world, they're evil,

113
00:08:10.318 --> 00:08:13.453
and yet they're the easiest things to fix.

114
00:08:13.453 --> 00:08:18.763
So in this method,
this single line is going

115
00:08:18.763 --> 00:08:24.511
to bring us about all sorts
of pain in your life.

116
00:08:24.511 --> 00:08:30.207
It's the single piece of hidden state

117
00:08:30.207 --> 00:08:37.872
that makes this function
totally unpredictable.

118
00:08:37.872 --> 00:08:41.350
And so the question is, or rather,
we'll get to the solution.

119
00:08:41.350 --> 00:08:43.440
I'm gonna leave you on a cliffhanger here.

120
00:08:43.440 --> 00:08:48.310
So the next one, violating the SRP.

121
00:08:48.310 --> 00:08:54.570
And so when I say SRP, I'm talking about
the single responsibility principle.

122
00:08:54.570 --> 00:09:00.330
And this is a very, very, huge problem.

123
00:09:00.330 --> 00:09:06.210
So, you'll notice when I described this
function, I said, okay, it takes a widget,

124
00:09:06.210 --> 00:09:12.520
then based on the mode, it does something,
and then it recalculates the price.

125
00:09:12.520 --> 00:09:15.864
If you are describing a function or

126
00:09:15.864 --> 00:09:20.474
a block of code and
you say it does this and stop,

127
00:09:20.474 --> 00:09:26.030
you are breaking the single
responsibility principle.

128
00:09:28.070 --> 00:09:32.921
And now for me to test recalculate total,

129
00:09:32.921 --> 00:09:38.741
I have to now test essentially
two blocks of code or

130
00:09:38.741 --> 00:09:42.633
two things within a single test.

131
00:09:42.633 --> 00:09:45.141
All sudden, what do you know?

132
00:09:45.141 --> 00:09:51.029
My complexity is going up and
nested logic.

133
00:09:51.029 --> 00:09:58.068
So within this,
we have at least four statements or

134
00:09:58.068 --> 00:10:03.307
blocks of code that are doing specific

135
00:10:03.307 --> 00:10:08.720
things that first of all l cannot test.

136
00:10:10.240 --> 00:10:13.070
How would l test the code
in the update block?

137
00:10:13.070 --> 00:10:14.748
Well, l would have to step over.

138
00:10:14.748 --> 00:10:17.773
Imagine someone in a movie theater like,
excuse me, excuse me,

139
00:10:17.773 --> 00:10:19.930
trying to get to their seat.

140
00:10:19.930 --> 00:10:24.314
In order to test this, I basically have
to set up the super complicated test so

141
00:10:24.314 --> 00:10:28.910
that I can hit the update block so I can
test my ability to update that collection.

142
00:10:30.200 --> 00:10:34.090
Not only that, is I can never ever,
ever, ever, ever reuse that code.

143
00:10:35.760 --> 00:10:40.685
And so,
this is the problem with nested logic.

144
00:10:40.685 --> 00:10:45.011
Is that it's hard to test, air-go,

145
00:10:45.011 --> 00:10:50.015
what's really hard to test and
in most cases

146
00:10:50.015 --> 00:10:55.846
people just give up and
that you can never reuse it.

147
00:10:55.846 --> 00:11:00.947
And so I can't tell you how many
times that I've seen nested logic in

148
00:11:00.947 --> 00:11:06.049
a condition or within a function and
then I go to another component or

149
00:11:06.049 --> 00:11:11.357
another service and I'm seeing like
basically the same exact thing.

150
00:11:11.357 --> 00:11:15.005
Well, because there's no way for
me to share that code,

151
00:11:15.005 --> 00:11:19.565
there's no ability to achieve a certain
level of cohesion because this

152
00:11:19.565 --> 00:11:22.698
nested logic is coupled
to this data structure.

153
00:11:22.698 --> 00:11:31.620
So, now,
these are the easiest problems to fix.

154
00:11:34.420 --> 00:11:38.970
We do this via dependency injection and
extract method.

155
00:11:41.150 --> 00:11:46.614
I could even say extract a parameter but
this is how you fix or

156
00:11:46.614 --> 00:11:51.110
inoculate yourself from the axis of evil.

157
00:11:51.110 --> 00:11:53.146
So when we look at this code right here,

158
00:11:53.146 --> 00:11:55.560
what's the first thing
that we're gonna do?

159
00:11:56.710 --> 00:11:59.782
Well, we're going to go and

160
00:11:59.782 --> 00:12:04.774
we're going to take this bit of code here,
and

161
00:12:04.774 --> 00:12:10.160
we're simply going to
extract it to a parameter.

162
00:12:12.950 --> 00:12:17.364
And so instead of saying,
let me just get back here, this mode.

163
00:12:20.402 --> 00:12:25.630
All I have to do is,
pass it in via parameter.

164
00:12:25.630 --> 00:12:26.950
Problem solved.

165
00:12:26.950 --> 00:12:30.866
You would be amazed at how
many times a component or

166
00:12:30.866 --> 00:12:37.130
a function has been rendered completely
unstable because it has hidden state.

167
00:12:38.890 --> 00:12:42.111
All you have to do is
extract to a parameter or

168
00:12:42.111 --> 00:12:45.910
it's known as dependency injection.

169
00:12:45.910 --> 00:12:47.080
So that's the first thing.

170
00:12:48.330 --> 00:12:49.190
Super awesome.

171
00:12:49.190 --> 00:12:53.580
I think, if you would just start doing
this, you've got your money's worth.

