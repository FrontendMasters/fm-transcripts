WEBVTT

1
00:00:00.000 --> 00:00:02.975
I'm curious, is there a point where you
can start breaking up your logic too much?

2
00:00:02.975 --> 00:00:06.800
Like is there you can go too far
into kind of making smaller and

3
00:00:06.800 --> 00:00:08.909
smaller functions and methods?

4
00:00:08.909 --> 00:00:10.770
&gt;&gt; The answer is absolutely.

5
00:00:10.770 --> 00:00:16.000
And where that threshold is,
where that limit is, is really dependent

6
00:00:16.000 --> 00:00:21.056
on the context of, I would say,
your comfort level as a programmer,

7
00:00:21.056 --> 00:00:26.940
more importantly, your team and
your organization's comfort level.

8
00:00:26.940 --> 00:00:31.643
And so
I think if you're working on a team,

9
00:00:31.643 --> 00:00:36.479
that you need to figure
out where the level of

10
00:00:36.479 --> 00:00:41.447
abstraction is and
where that sweet spot is,

11
00:00:41.447 --> 00:00:46.413
the problem that you run into is that,
and for

12
00:00:46.413 --> 00:00:50.855
me, this is kind of threshold, for me,

13
00:00:50.855 --> 00:00:56.150
is that I try to avoid
coupling at all costs.

14
00:00:56.150 --> 00:01:01.099
And so, when you look at this code here,
you have a bunch of logic

15
00:01:01.099 --> 00:01:05.880
that's tightly coupled to
the surrounding function block.

16
00:01:06.910 --> 00:01:10.980
And so I'm looking at this I'm like, this
is a really tightly coupled piece of code.

17
00:01:13.100 --> 00:01:20.220
And so I tried to refactor to reduce
coupling as much as possible.

18
00:01:20.220 --> 00:01:26.379
I then tried to move my code
in a way to increase cohesion.

19
00:01:26.379 --> 00:01:29.977
And so, cohesion is really there's
a couple of different versions of this.

20
00:01:29.977 --> 00:01:35.075
And depending on what you're doing,
you may choose to organize it

21
00:01:35.075 --> 00:01:41.250
in such a way that you can have like
type cohesion or functional cohesion.

22
00:01:41.250 --> 00:01:45.964
But typically, generally, what I tried
to do is, I try to have, at least,

23
00:01:45.964 --> 00:01:50.612
feature level cohesion, where something
that specifically has to do with

24
00:01:50.612 --> 00:01:53.070
a feature is kind of grouped together.

25
00:01:54.230 --> 00:01:58.833
So, if I'm writing a component that
the spec is there that the things for

26
00:01:58.833 --> 00:02:02.920
that, the visual presentation
of that component is together.

27
00:02:02.920 --> 00:02:05.650
So, I try to, typically,
go for feature cohesion.

28
00:02:05.650 --> 00:02:09.896
And then from there, I go for
functionality cohesion of,

29
00:02:09.896 --> 00:02:14.990
I take all my state management and
I extract that into a lib.

30
00:02:14.990 --> 00:02:18.710
And then from there I then
organized by feature, typically.

31
00:02:18.710 --> 00:02:25.226
And so, by having things in a logical
place, that it makes it easier to find,

32
00:02:25.226 --> 00:02:32.150
but you can spread things out so
much that it doesn't make sense anymore.

33
00:02:32.150 --> 00:02:33.722
In the sense of,
let me give you two examples.

34
00:02:33.722 --> 00:02:40.193
So there's this show on Netflix called
The Home Edit, and, it's pretty good,

35
00:02:40.193 --> 00:02:45.725
except, they talk about,
organizing a bunch of different things.

36
00:02:45.725 --> 00:02:49.870
And I started thinking about this
in terms of programming, that,

37
00:02:49.870 --> 00:02:54.754
it would be very, very fast, for you to
take all your laundry out of the dryer,

38
00:02:54.754 --> 00:02:56.320
and throw it in a basket.

39
00:02:57.780 --> 00:03:02.450
The upfront cost of doing that is zero,
pretty much it's just like poop.

40
00:03:02.450 --> 00:03:07.164
But then now when you have to go and
find an outfit,

41
00:03:07.164 --> 00:03:12.700
because everything is coupled
to that laundry basket.

42
00:03:12.700 --> 00:03:14.740
It's very very hard to navigate.

43
00:03:14.740 --> 00:03:16.825
So, this is when I think
of course grade code,

44
00:03:16.825 --> 00:03:18.658
it's like all your laundry in a basket.

45
00:03:18.658 --> 00:03:23.592
So, a reasonable approach would
be let's separate this out, and

46
00:03:23.592 --> 00:03:29.420
put our pants in a drawer, our shirts in
a drawer, our socks in a drawer, etc.

47
00:03:29.420 --> 00:03:33.406
And then, you might even go as far
as to say, I'm going to take and

48
00:03:33.406 --> 00:03:36.560
separate my casual pants
from my dress pants.

49
00:03:36.560 --> 00:03:39.334
My workout clothes might go in the drawer,
so

50
00:03:39.334 --> 00:03:42.044
that's an appropriate level of cohesion.

51
00:03:44.603 --> 00:03:49.673
Wouldn't make sense to
separate your wardrobe into

52
00:03:49.673 --> 00:03:54.633
outfits and have a drawer for
every single outfit.

53
00:03:54.633 --> 00:03:56.348
That would be crazy.

54
00:03:56.348 --> 00:03:57.735
I mean, maybe, I don't know?

55
00:03:57.735 --> 00:04:00.577
If you're Kanye West, possibly.

56
00:04:00.577 --> 00:04:05.167
Or saying, I'm gonna put all my
black t shirts in a drawer and

57
00:04:05.167 --> 00:04:10.020
all my red t shirts in a drawer,
it doesn't make a lot of sense.

58
00:04:10.020 --> 00:04:15.000
And so, another thing that they talk
about is organize your colors by books.

59
00:04:15.000 --> 00:04:17.610
Or books by colors, your books by color.

60
00:04:17.610 --> 00:04:20.540
So if you look at the show,
it's like, here's all my red books.

61
00:04:20.540 --> 00:04:21.460
Here's all my blue books.

62
00:04:21.460 --> 00:04:23.080
Here's all my white books.

63
00:04:23.080 --> 00:04:27.620
Well, by color, visually,
that's one way to do it.

64
00:04:27.620 --> 00:04:33.106
But, for me, I might have MySQL
book next to my closure book,

65
00:04:33.106 --> 00:04:38.130
just cuz they're blue and
that makes no sense.

66
00:04:38.130 --> 00:04:42.666
And so, it's also choosing
the parameters in which you achieve

67
00:04:42.666 --> 00:04:46.876
cohesion in a way that helps
you reduce mental complexity.

68
00:04:46.876 --> 00:04:49.484
That is the litmus test.

69
00:04:49.484 --> 00:04:57.520
Is this helping me parse this model even
better, or is it making it efficient?

70
00:04:57.520 --> 00:05:02.661
If not, and you find that you're
fighting against your abstractions,

71
00:05:02.661 --> 00:05:06.380
then you might need to revisit it and
desimplify it.

72
00:05:07.750 --> 00:05:13.320
&gt;&gt; In the code example, with testing,
should I test those small functions?

73
00:05:13.320 --> 00:05:15.314
Is that direct enough, or

74
00:05:15.314 --> 00:05:19.950
should I also test the function
with the switch statements?

75
00:05:19.950 --> 00:05:22.624
&gt;&gt; You test them both, ideally.

76
00:05:22.624 --> 00:05:27.491
That when you run your tests, and
you run your code coverage is that there's

77
00:05:27.491 --> 00:05:30.991
a certain threshold that you
should be aiming for, but

78
00:05:30.991 --> 00:05:35.176
you can absolutely test your air
traffic control functions, and

79
00:05:35.176 --> 00:05:38.550
that actually leads perfectly
into the challenge.

80
00:05:38.550 --> 00:05:40.560
So, we'll see that in a moment.

81
00:05:40.560 --> 00:05:43.695
If you have multiple services
in your application,

82
00:05:43.695 --> 00:05:47.683
does it make sense to have a single
instance of those at the top level

83
00:05:47.683 --> 00:05:52.265
of the application and then make them
available via dependency injection?

84
00:05:52.265 --> 00:05:58.708
And I believe that you should.

85
00:05:59.808 --> 00:06:04.536
As a general rule of thumb,
for instance, in Angular,

86
00:06:04.536 --> 00:06:11.290
you can override the dependency injector
at any point in your component nodes.

87
00:06:12.320 --> 00:06:14.220
I've never had to do that.

88
00:06:14.220 --> 00:06:18.621
The only time I've ever had to override
the injectors, when I'm writing tests.

89
00:06:18.621 --> 00:06:25.880
And so, the question or the heuristic
there that you have to ask yourself is,

90
00:06:25.880 --> 00:06:32.467
is there a reason why I would need
more than one instance of this thing,

91
00:06:32.467 --> 00:06:37.403
to perform this function
within this application?

92
00:06:37.403 --> 00:06:42.591
And there are some cases where
you might have something

93
00:06:42.591 --> 00:06:47.890
that you need to instantiate for,
imagine that you have

94
00:06:47.890 --> 00:06:52.950
a meeting room and
then you have attendees in there.

95
00:06:52.950 --> 00:06:57.050
Well, you wouldn't wanna share the same
meeting room for all the attendees.

96
00:06:57.050 --> 00:07:03.030
And so, from a modeling standpoint,
you want to start to split that out.

97
00:07:04.400 --> 00:07:10.009
But from a, I would say a service
level that's managing all of that,

98
00:07:10.009 --> 00:07:15.540
typically, you only need one
service to manage that application.

99
00:07:15.540 --> 00:07:20.761
So, I would say it will be very,
very rare that you'll

100
00:07:20.761 --> 00:07:27.019
ever need a very common service,
to have more than one instance.

101
00:07:27.019 --> 00:07:29.694
I would recommend keeping
it at the top level, and

102
00:07:29.694 --> 00:07:32.680
then making it available
via dependency injection.

103
00:07:32.680 --> 00:07:36.044
And so, typically,
what you have to identify is,

104
00:07:36.044 --> 00:07:39.802
what is the shared commonality or
the functionality than

105
00:07:39.802 --> 00:07:44.370
all of the interested components or
parties that they need.

106
00:07:44.370 --> 00:07:48.719
And then you place the thing
that you're working on in just

107
00:07:48.719 --> 00:07:52.640
the level of distraction just above that.

108
00:07:52.640 --> 00:07:57.216
And so, this is something we articulated
in the previous course, that I really

109
00:07:57.216 --> 00:08:01.725
quite like, is that when you understand
the level of the interested parties,

110
00:08:01.725 --> 00:08:05.142
then that will determine where
your implementation goes,

111
00:08:05.142 --> 00:08:08.510
which will be at the level
just above that.

112
00:08:08.510 --> 00:08:12.899
So if you have two components
that are inside of a single app,

113
00:08:12.899 --> 00:08:15.470
you might put that in the app.

114
00:08:15.470 --> 00:08:20.107
But if you have two components in two
separate apps, you might move whatever

115
00:08:20.107 --> 00:08:24.823
you're working on into a lib, so that
it can be shared across multiple apps.

116
00:08:24.823 --> 00:08:29.783
If you have more than one project
that needs that functionality, well,

117
00:08:29.783 --> 00:08:33.848
then you might consider publishing
it as an NPM package, so

118
00:08:33.848 --> 00:08:36.150
that all the projects can use it.

119
00:08:36.150 --> 00:08:38.610
Which is where you have
component libraries.

120
00:08:38.610 --> 00:08:40.927
And so find out where
the interested parties are, and

121
00:08:40.927 --> 00:08:45.410
then just go one abstraction level up and
typically that's where it's going to be.

122
00:08:45.410 --> 00:08:47.428
In the case of Angular applications,

123
00:08:47.428 --> 00:08:51.660
I would say just have one service at
the top level that manages everything.

124
00:08:51.660 --> 00:08:55.570
And by the previous course,
I mean production Angular,

125
00:08:55.570 --> 00:08:58.590
which I highly recommend you checking out.

