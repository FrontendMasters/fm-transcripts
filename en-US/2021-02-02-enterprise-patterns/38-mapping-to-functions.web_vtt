WEBVTT

1
00:00:00.630 --> 00:00:04.749
So all we're doing is left,
right, up, down.

2
00:00:08.420 --> 00:00:14.850
But in the code what is happening, Is,

3
00:00:16.858 --> 00:00:23.730
That, So I think the first part of
this is pretty straightforward.

4
00:00:25.140 --> 00:00:27.925
We're listening for a keydown event, and

5
00:00:27.925 --> 00:00:31.000
then we're filtering
out based on the arrow.

6
00:00:31.000 --> 00:00:33.140
So we're creating an up,
down, left, and right stream.

7
00:00:34.200 --> 00:00:38.130
And then from here,
we're merging these together.

8
00:00:40.440 --> 00:00:44.542
And then I'm taking the current or
the accumulated value,

9
00:00:44.542 --> 00:00:46.520
which is a position object.

10
00:00:47.800 --> 00:00:51.146
And then, the current value,

11
00:00:51.146 --> 00:00:56.038
it's a function that
we're then calling and

12
00:00:56.038 --> 00:01:01.200
passing in the accumulated
position objects.

13
00:01:01.200 --> 00:01:05.792
So for instance,
if you take increment what this

14
00:01:05.792 --> 00:01:10.389
expects is an object with a property and
a value.

15
00:01:10.389 --> 00:01:18.550
And so we're saying we don't know
what property you want to increment.

16
00:01:18.550 --> 00:01:19.171
You can define that.
And

17
00:01:19.171 --> 00:01:23.986
we don't know how much you want to
increment it by, you can also define that.

18
00:01:23.986 --> 00:01:29.076
And so in our MapToFunction,
we're saying we

19
00:01:29.076 --> 00:01:34.177
want to return a partially
applied function.

20
00:01:34.177 --> 00:01:39.097
That we definitely know
we want to do X and

21
00:01:39.097 --> 00:01:42.727
we want to increment by 10.

22
00:01:42.727 --> 00:01:46.450
We want to decrement by 10.

23
00:01:46.450 --> 00:01:49.180
Or we want to do y,
an increment or decrement by 10.

24
00:01:49.180 --> 00:01:53.324
And when we supply this
final position object,

25
00:01:53.324 --> 00:02:00.695
then you're able to calculate this, and
return this to complete the calculation.

26
00:02:00.695 --> 00:02:07.710
And it goes into the stream which
is how we're able to do this.

27
00:02:07.710 --> 00:02:10.522
So partial application
is super interesting.

28
00:02:10.522 --> 00:02:14.932
I spent an entire afternoon
wrapping my mind around it, so

29
00:02:14.932 --> 00:02:18.262
if in part you're kind
of looking at this and

30
00:02:18.262 --> 00:02:24.145
being like that was a little cuckoo,
I don't know if I got it, don't worry.

31
00:02:24.145 --> 00:02:25.815
[LAUGH] It took me a while.

32
00:02:25.815 --> 00:02:30.771
Even after this, I realized I
still didn't truly understand it.

33
00:02:30.771 --> 00:02:37.511
So more importantly, what I want to convey
is that you can send not only objects and

34
00:02:37.511 --> 00:02:44.252
values, like primitive values, but
functions into your observable stream, so

35
00:02:44.252 --> 00:02:51.790
that they can be executed at some point in
the future, which is extremely powerful.

36
00:02:51.790 --> 00:02:56.711
And so now we're just slightly
starting to kind of flirt with

37
00:02:56.711 --> 00:03:01.935
some of this high level,
distributed, enterprise-y stuff.

38
00:03:01.935 --> 00:03:05.489
When I think of enterprise-y stuff,

39
00:03:05.489 --> 00:03:10.706
this is now kind of the realm
that we start to get into kind

40
00:03:10.706 --> 00:03:15.946
of this dynamic functional
programming at scale.

41
00:03:15.946 --> 00:03:19.746
Well, we're kind of starting to
touch on that just a little bit.

