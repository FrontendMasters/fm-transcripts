WEBVTT

1
00:00:00.578 --> 00:00:05.906
So, we want to build a reducer function.

2
00:00:05.906 --> 00:00:10.975
And how this works is a reducer function

3
00:00:10.975 --> 00:00:15.891
outside of state but just in general,

4
00:00:15.891 --> 00:00:20.357
is that it takes some parameters.

5
00:00:20.357 --> 00:00:25.345
And then it reduces the whatever
you send in it reduces it

6
00:00:25.345 --> 00:00:29.780
into its final state and then returns it.

7
00:00:29.780 --> 00:00:32.665
And so when we use a reducer for
state management,

8
00:00:32.665 --> 00:00:37.423
what we're saying is ,here is the state
and then here's the action that we want.

9
00:00:37.423 --> 00:00:39.581
So interestingly enough,

10
00:00:39.581 --> 00:00:44.830
if we go back to this calculate this
is kind of a similar situation,

11
00:00:44.830 --> 00:00:49.450
here we're saying,
here's the two numbers available.

12
00:00:49.450 --> 00:00:51.227
And then here's the operation.

13
00:00:51.227 --> 00:00:57.012
In this case, we're saying, here's state,
and then here is your action,

14
00:00:57.012 --> 00:01:01.820
which has the type of action
that it is plus the payload.

15
00:01:01.820 --> 00:01:05.880
But what this does is it accepts.

16
00:01:05.880 --> 00:01:10.120
It takes state and the action and
then based on the action type,

17
00:01:10.120 --> 00:01:13.910
it calculates new state and
then returns it.

18
00:01:13.910 --> 00:01:17.726
And so we kind of hinted at this.

19
00:01:17.726 --> 00:01:20.760
In our refactoring example,

20
00:01:20.760 --> 00:01:25.380
this is an air traffic
controller function.

21
00:01:25.380 --> 00:01:29.407
That its primary existence,

22
00:01:29.407 --> 00:01:34.889
the reason why it exists is to delegate.

23
00:01:34.889 --> 00:01:39.193
Now, if you've done NGR x or
if you've done Redux and

24
00:01:39.193 --> 00:01:44.490
you're seeing complex logic
in these nested statements.

25
00:01:44.490 --> 00:01:49.575
That is bad, and I would say
I've seen a lot of criticism for

26
00:01:49.575 --> 00:01:52.337
Redux and NGR x because of that.

27
00:01:52.337 --> 00:01:56.530
And again, that's not because Redux or
NGR X is bad.

28
00:01:56.530 --> 00:02:00.515
It's because hidden state is bad and
it has no,

29
00:02:00.515 --> 00:02:05.409
it's no commentary or
indictment on the design pattern.

30
00:02:05.409 --> 00:02:10.113
When you're essentially invalidating it
with an anti pattern, so in this case,

31
00:02:10.113 --> 00:02:13.960
load, select, create,
update, delete and clear.

32
00:02:13.960 --> 00:02:19.743
And an action in this case is
it always will have a type and

33
00:02:19.743 --> 00:02:22.584
then it may have a payload.

34
00:02:22.584 --> 00:02:26.071
So this is where this question mark
means is that maybe, you'll have this or

35
00:02:26.071 --> 00:02:27.170
maybe you're won't.

36
00:02:29.050 --> 00:02:32.808
And then from here what I just wanna point
out because the cats out of the bag,

37
00:02:32.808 --> 00:02:34.352
we know what we're building.

38
00:02:34.352 --> 00:02:40.291
Is that one thing I do recommend,
is in your case statements,

39
00:02:40.291 --> 00:02:46.500
these are magic strings and
you want to extract this out.

40
00:02:46.500 --> 00:02:51.669
And so
what I will do at a minimum is extract

41
00:02:51.669 --> 00:02:55.971
this out into essentially const.

42
00:02:55.971 --> 00:03:01.201
Higher level variables that I can
reference that I then put in here so

43
00:03:01.201 --> 00:03:06.410
that I don't have these magic
strings floating around.

44
00:03:06.410 --> 00:03:11.304
In my code, cuz that's a really bad way.

45
00:03:11.304 --> 00:03:18.230
Or rather, what happens if I needed
to reference create somewhere else?

46
00:03:19.330 --> 00:03:21.195
Well now I've got code duplication.

47
00:03:21.195 --> 00:03:25.760
And so
again you just extract to a parameter.

48
00:03:25.760 --> 00:03:27.966
And so this is again, just elevating this.

49
00:03:27.966 --> 00:03:31.718
And so when you have strings,
the primitive strings in your code,

50
00:03:31.718 --> 00:03:33.930
it makes it really hard to reuse those.

51
00:03:33.930 --> 00:03:37.055
So this is where you extract these out.

52
00:03:37.055 --> 00:03:41.360
And you turn these into these
kind of constant variables.

53
00:03:41.360 --> 00:03:44.300
Now you'll notice as well.

54
00:03:44.300 --> 00:03:50.330
That load, select, create,
update, delete clear.

55
00:03:51.420 --> 00:03:56.553
The problem with that is
outside of context or

56
00:03:56.553 --> 00:04:04.673
if you're unless you're looking at
this code you don't really know.

57
00:04:04.673 --> 00:04:07.919
What that's actually talking about, but

58
00:04:07.919 --> 00:04:12.338
the only way that I know that
we're talking about creating

59
00:04:12.338 --> 00:04:17.222
clients is because inside of that code,
it says Create client.

60
00:04:17.222 --> 00:04:19.890
And so
I have to actually infer that meaning.

61
00:04:19.890 --> 00:04:26.767
And so the other thing about writing code
is that it should be self documenting.

62
00:04:26.767 --> 00:04:33.660
You should be able to look at your code
and immediately know what it does.

63
00:04:33.660 --> 00:04:37.440
So the difference is that, we're here
we just have load, select, create,

64
00:04:37.440 --> 00:04:38.437
update and delete.

65
00:04:38.437 --> 00:04:40.361
Well, what what are we doing?

66
00:04:40.361 --> 00:04:41.870
What are we talking about?

67
00:04:41.870 --> 00:04:43.503
There's no modifier there.

68
00:04:43.503 --> 00:04:49.630
Now over here case, client create.

69
00:04:49.630 --> 00:04:55.493
Without seeing the code, we have a pretty
good idea what that is client delete.

70
00:04:55.493 --> 00:05:01.095
And so it's really important,
even at the cost of verbosity,

71
00:05:01.095 --> 00:05:06.817
in other words, computers,
we're not dealing with 256 k.

72
00:05:06.817 --> 00:05:11.636
That's a K of RAM, where we actually
have to manage our own memory and

73
00:05:11.636 --> 00:05:15.723
like our lion counts the characters
in like this matters.

74
00:05:15.723 --> 00:05:20.840
Is that right code to be readable?

75
00:05:20.840 --> 00:05:22.080
This is why we have Webpack.

76
00:05:22.080 --> 00:05:27.256
This is why we have Bundlers
like they take care of that

77
00:05:27.256 --> 00:05:32.201
like I've just seen code where it's so
terse and so

78
00:05:32.201 --> 00:05:37.053
concise and so
clever that it is just ineligible.

79
00:05:37.053 --> 00:05:40.114
Like you can't even you have
no idea what's happening,

80
00:05:40.114 --> 00:05:42.855
that if you've ever seen,
like, minimize code,

81
00:05:42.855 --> 00:05:47.790
like I've met people like that's how they
write code and it's completely opaque.

82
00:05:47.790 --> 00:05:48.846
What is actually happening?

83
00:05:48.846 --> 00:05:53.470
And so that's a little side
bonus that didn't cost anything.

84
00:05:53.470 --> 00:06:00.550
But when you write code that is self
documenting, more often than not,

85
00:06:00.550 --> 00:06:07.166
you do not need documentation in
the form of comments in your code.

86
00:06:07.166 --> 00:06:12.729
Comments are really in my opinion, it's
typically relevant when you write it and

87
00:06:12.729 --> 00:06:15.800
then it goes stale almost immediately.

88
00:06:15.800 --> 00:06:19.674
And so
you should avoid excessive comments and

89
00:06:19.674 --> 00:06:24.153
just write code that really
makes that point for you.

90
00:06:24.153 --> 00:06:27.620
I am going to create a reducer and

91
00:06:27.620 --> 00:06:32.380
we'll just step into this and get started.

92
00:06:33.430 --> 00:06:37.770
So, I'm gonna call this const,

93
00:06:37.770 --> 00:06:43.351
clients, reducer and this is a function.

94
00:06:46.820 --> 00:06:47.425
And.

95
00:06:49.830 --> 00:06:52.144
It takes two parameters.

96
00:06:52.144 --> 00:06:58.928
So it's gonna take, state,
which is going to be client state.

97
00:07:02.500 --> 00:07:04.632
Work with me here.

98
00:07:04.632 --> 00:07:05.720
There we go.

99
00:07:05.720 --> 00:07:09.079
And it's going to take an action.

100
00:07:09.079 --> 00:07:14.531
And what I can also do
is I can pre initialize

101
00:07:14.531 --> 00:07:20.300
this parameter to
the initial client state.

102
00:07:21.570 --> 00:07:26.922
Now from here,
what I'll do is I'm going to make

103
00:07:26.922 --> 00:07:32.290
a switch case and
I'm going to go action.type.

104
00:07:32.290 --> 00:07:36.035
Now, you'll notice here
that when I go dot,

105
00:07:36.035 --> 00:07:41.950
nothing happens because we haven't
defined what an action is.

106
00:07:41.950 --> 00:07:46.091
And so what I'll do is I'll
just go interface action, and

107
00:07:46.091 --> 00:07:49.228
it's going to have a type
which is a string.

108
00:07:49.228 --> 00:07:55.860
And it's going to have a payload, which
is optional, and this is gonna be any.

109
00:07:55.860 --> 00:07:59.460
So a payload just can
really be anything and

110
00:07:59.460 --> 00:08:04.561
I'm gonna just copy this and
I'm gonna move it up to the top.

111
00:08:04.561 --> 00:08:09.400
This is kind of a super top level thing.

112
00:08:09.400 --> 00:08:14.787
And now within the reducer,
if I type this and so this is,

113
00:08:14.787 --> 00:08:21.428
again part of this as we start to turn
this over and get our hands dirty.

114
00:08:21.428 --> 00:08:24.149
You'll notice that now,

115
00:08:24.149 --> 00:08:29.722
when I type this parameter
that it's now telling me.

116
00:08:29.722 --> 00:08:35.536
Or giving me some hints
about what I can use and

117
00:08:35.536 --> 00:08:40.892
then from here cuz I already know what I'm

118
00:08:40.892 --> 00:08:45.803
going to do that I'm going to create.

119
00:08:48.340 --> 00:08:52.622
Some actions what I will do here just

120
00:08:52.622 --> 00:08:57.332
because this would take a bit of time and

121
00:08:57.332 --> 00:09:01.328
I don't know if it is exciting for

122
00:09:01.328 --> 00:09:06.349
you as it is for
me to sit and watch me type.

123
00:09:06.349 --> 00:09:08.530
So I'm just gonna copy
this out of solutions.

124
00:09:08.530 --> 00:09:14.857
You can yell at me later, but
this allows us to be a little bit faster.

125
00:09:14.857 --> 00:09:21.951
So all I've done is I've just copied
these constant variables in here,

126
00:09:21.951 --> 00:09:25.904
and we'll go case and we'll go client,

127
00:09:25.904 --> 00:09:31.951
Load, And we're gonna do something.

128
00:09:31.951 --> 00:09:37.393
And what I'll do is I'm gonna
do just a couple of them.

129
00:09:37.393 --> 00:09:44.823
Maybe let's do, client select.

130
00:09:50.080 --> 00:09:55.134
And I'm just going to return load,

131
00:09:55.134 --> 00:09:59.181
clients, state, action.

132
00:09:59.181 --> 00:10:03.160
Now this doesn't exist,
but it will eventually.

133
00:10:04.950 --> 00:10:11.655
Return select, client, state, action.

134
00:10:14.516 --> 00:10:19.700
And what I can actually do
here is I can just send in

135
00:10:19.700 --> 00:10:26.033
the payload because we already
know what the type is, hello

136
00:10:35.954 --> 00:10:38.200
I can actually even get
rid of these braces here.

137
00:10:40.950 --> 00:10:44.093
Make the super nice and tight And

138
00:10:44.093 --> 00:10:49.917
then what we're gonna do is if
something does not match up,

139
00:10:49.917 --> 00:10:54.590
we're just going to return state,
all right.

140
00:10:54.590 --> 00:10:59.145
Now, let's go ahead and
just create placeholders for

141
00:10:59.145 --> 00:11:02.025
these methods, little clients.

142
00:11:02.025 --> 00:11:03.368
It's going to take state.

143
00:11:05.094 --> 00:11:13.115
And clients and
then it's going to do something.

144
00:11:13.115 --> 00:11:18.851
So I'm just going to
log this out of clients

145
00:11:28.880 --> 00:11:32.498
Select client.

146
00:11:32.498 --> 00:11:40.096
This is going to take
a client select client.

147
00:11:42.697 --> 00:11:43.197
There we go.

148
00:11:44.310 --> 00:11:46.296
So this is angry about shadow names.

149
00:11:46.296 --> 00:11:47.790
That's okay.

150
00:11:47.790 --> 00:11:48.700
We can live with that.

151
00:11:53.015 --> 00:11:53.951
There we go.

152
00:11:53.951 --> 00:11:59.380
And so
the big thing here is that we are now

153
00:11:59.380 --> 00:12:05.769
creating a mechanism in
which we can manipulate

154
00:12:05.769 --> 00:12:11.210
state based on a particular condition.

