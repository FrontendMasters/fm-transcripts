WEBVTT

1
00:00:00.200 --> 00:00:01.470
Now extract to method.

2
00:00:03.460 --> 00:00:06.420
You have this nested logic here,
what do we do?

3
00:00:06.420 --> 00:00:11.790
Well, we just take this and
we extract it to a method.

4
00:00:12.940 --> 00:00:17.537
Not only that is we can safely do this

5
00:00:17.537 --> 00:00:23.370
without breaking the enclosing code.

6
00:00:23.370 --> 00:00:27.929
Now I have not only do I have three
methods now, that I can test,

7
00:00:27.929 --> 00:00:30.350
I have three methods I can reuse.

8
00:00:32.170 --> 00:00:34.724
This is huge,
that what am I doing here now,

9
00:00:34.724 --> 00:00:39.510
I'm managing state flow control and more
importantly is a managing code volume.

10
00:00:42.010 --> 00:00:46.020
And here, I think we probably
can figure out what to do here.

11
00:00:46.020 --> 00:00:48.560
When you're breaking the single
responsibility principle.

12
00:00:50.090 --> 00:00:51.081
What do you do?

13
00:00:51.081 --> 00:00:52.810
You just extract it to a method.

14
00:00:54.170 --> 00:01:00.675
Now, let me make one statement
here that you're going to see or

15
00:01:00.675 --> 00:01:05.829
one thing that mentally I
kind of add a hitch that,

16
00:01:05.829 --> 00:01:11.757
what we have here is at the bottom,
we have four methods.

17
00:01:11.757 --> 00:01:13.540
And they're very, very specific.

18
00:01:14.790 --> 00:01:18.531
They take some input, and
they return something.

19
00:01:18.531 --> 00:01:22.557
And so these have referential transparency
is that you're going to call them and

20
00:01:22.557 --> 00:01:25.290
you're going to get the same
thing every single time.

21
00:01:26.930 --> 00:01:28.220
The top two methods.

22
00:01:29.520 --> 00:01:36.493
These are what I would call air traffic
control methods or sequencing methods.

23
00:01:36.493 --> 00:01:38.405
And so if somebody said okay, well,

24
00:01:38.405 --> 00:01:42.430
I see here that you're making two
assignment statements in this top method.

25
00:01:43.470 --> 00:01:44.830
Are you doing two things?

26
00:01:44.830 --> 00:01:49.819
Well, I would say at this top level,
is that it takes a course in a mode, and

27
00:01:49.819 --> 00:01:52.050
it says the appropriate values.

28
00:01:52.050 --> 00:01:54.264
And so all this is doing right here.

29
00:01:54.264 --> 00:01:57.962
The top method, is just coordinating,

30
00:01:57.962 --> 00:02:02.436
the delegation to these
lower level functions.

31
00:02:02.436 --> 00:02:07.926
If you look at update courses all this
is doing is taking a parameters and

32
00:02:07.926 --> 00:02:10.959
delegating to lower level functions.

33
00:02:10.959 --> 00:02:14.604
It's not actually doing
anything other than saying,

34
00:02:14.604 --> 00:02:18.020
what did you send me based
on this we need to do this.

35
00:02:19.320 --> 00:02:26.166
And so now when you look at this,
the bottom four methods,

36
00:02:26.166 --> 00:02:33.150
you can put something in and
you can test the output.

37
00:02:33.150 --> 00:02:38.333
You can say, when I want to delete
a course, I can test this by I'm

38
00:02:38.333 --> 00:02:44.579
gonna put a course in or a collection of
courses and the course I want to delete.

39
00:02:44.579 --> 00:02:49.336
And then I expect that whatever is coming
back is going to be that collection

40
00:02:49.336 --> 00:02:50.627
minus that course.

41
00:02:50.627 --> 00:02:53.670
And so this is very easy to test.

42
00:02:53.670 --> 00:02:57.720
So these bottom four methods,
inputs, outputs,

43
00:02:57.720 --> 00:03:03.748
it's very easy to write assertions on
those for air traffic style methods,

44
00:03:03.748 --> 00:03:08.910
what I test on these is that
it's delegating properly.

45
00:03:08.910 --> 00:03:14.372
So for instance update course,
how I would test that is when

46
00:03:14.372 --> 00:03:21.473
I pass in my parameters based on the mode
I would expect either create course,

47
00:03:21.473 --> 00:03:25.861
update course or
delete course, to be called.

48
00:03:25.861 --> 00:03:28.429
And so just a little commentary on,

49
00:03:28.429 --> 00:03:33.650
I think there's kind of sometimes
some confusion that somebody could,

50
00:03:33.650 --> 00:03:38.804
and you could test the output of
these air traffic controller methods.

51
00:03:38.804 --> 00:03:43.594
But typically what I really care
about Is that Is it calling

52
00:03:43.594 --> 00:03:49.581
the underlying methods correctly is
this method delegating properly.

53
00:03:49.581 --> 00:03:53.548
And so now,
what this allows us to do is have

54
00:03:53.548 --> 00:03:58.191
fine-grained code over
coarse-grained code.

55
00:03:58.191 --> 00:04:05.562
And so you always want to move your
code Into a state of being fine grained.

56
00:04:05.562 --> 00:04:10.891
And so we've taken this,
which I would say is very coarse-grained,

57
00:04:10.891 --> 00:04:13.072
it's doing a lot of things.

58
00:04:13.072 --> 00:04:18.204
And so when you even just mentally look
at this, you're already having to kind

59
00:04:18.204 --> 00:04:23.288
of create these mental kind of containers
and say it does this or this or this.

60
00:04:23.288 --> 00:04:28.437
And Then

61
00:04:28.437 --> 00:04:33.649
instead we moved to this where we
now have fine-grain green code.

62
00:04:33.649 --> 00:04:37.572
At the bottom we have four
functions that are very specific.

63
00:04:37.572 --> 00:04:38.296
We know what they do.

64
00:04:38.296 --> 00:04:43.473
They create a course, update, total costs,

65
00:04:43.473 --> 00:04:47.457
update course, update courses and

66
00:04:47.457 --> 00:04:52.898
this is a lot easier to not only test and
manage but

67
00:04:52.898 --> 00:04:59.438
to make sense of, and
this is really, really important.

68
00:04:59.438 --> 00:05:02.995
And so when we talk about complexity,

69
00:05:02.995 --> 00:05:08.564
we're not only talking about code and
the technical cost.

70
00:05:08.564 --> 00:05:13.173
But I wanna be very clear
that I'm talking about also

71
00:05:13.173 --> 00:05:17.991
the human cost of writing complex code,
is that we have

72
00:05:17.991 --> 00:05:23.438
better things to do than sit and
be miserable, slaving over or

73
00:05:23.438 --> 00:05:28.390
languishing in a code base
that we can't make sense of.

74
00:05:30.700 --> 00:05:35.785
Unfortunately, I admit that a lot of
those injuries are self inflicted,

75
00:05:35.785 --> 00:05:40.459
because I'm trying to make sense of
a codebase that I myself created

76
00:05:40.459 --> 00:05:44.986
three months ago or three days ago,
and I can't make sense of it.

77
00:05:44.986 --> 00:05:50.574
And so, not only am I talking
about technical complexity,

78
00:05:50.574 --> 00:05:55.381
but managing the the human cost for
addressing this

79
00:05:55.381 --> 00:06:00.075
complexity is that when
you write code like this,

80
00:06:00.075 --> 00:06:05.104
it's a lot easier to be successful,
be effective and

81
00:06:05.104 --> 00:06:08.838
then move on to the things in your life.

82
00:06:08.838 --> 00:06:13.060
That you like to do,
whether that's playing beach volleyball,

83
00:06:13.060 --> 00:06:17.678
pistol whip on VR, eating birthday cake,
ice cream, whatever it is.

84
00:06:17.678 --> 00:06:25.600
That's, I want you to do more of that and
less time fighting with complexity.

85
00:06:25.600 --> 00:06:33.128
So with that said, what this looks like
in a very specific concrete example and

86
00:06:33.128 --> 00:06:39.424
so, one of the questions was
around like complicated services.

87
00:06:39.424 --> 00:06:45.830
Well, this is what you
want to move towards.

88
00:06:45.830 --> 00:06:49.100
So this is a facade,
which is kind of an Angular mechanism.

89
00:06:49.100 --> 00:06:55.600
But this applies to anything is
that you want your methods and

90
00:06:55.600 --> 00:07:00.581
the logic in your code to be very,
very small.

91
00:07:00.581 --> 00:07:03.213
And so I believe, if you read clean code,

92
00:07:03.213 --> 00:07:07.365
Robert C Martin talks about 20
lines is kind of that threshold.

93
00:07:07.365 --> 00:07:13.122
Honestly, I'm typically unless
I'm dealing with a very specific

94
00:07:13.122 --> 00:07:19.694
piece of business logic that I try to
stay really within three to eight lines.

95
00:07:19.694 --> 00:07:25.408
Like it's a really command command done
and you're constantly delegating or moving

96
00:07:25.408 --> 00:07:30.895
this complexity, away from the point of
contact, which is the component layer.

