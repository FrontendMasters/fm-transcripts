WEBVTT

1
00:00:00.020 --> 00:00:03.050
I'm curious wondered like the cost
of doing something like this.

2
00:00:03.050 --> 00:00:06.060
Is there one of the downsides of
like keeping your state in a server?

3
00:00:06.060 --> 00:00:08.577
&gt;&gt; So the question is, what is the cost or

4
00:00:08.577 --> 00:00:12.610
the downside of keeping
your state in a server?

5
00:00:12.610 --> 00:00:17.920
Let me preface that with this is something
I would be very careful about doing.

6
00:00:18.950 --> 00:00:22.960
In the real world in the sense of I would
have to have a good reason to do this.

7
00:00:23.960 --> 00:00:28.917
But at the same time,
that WebSockets are pretty cheap and

8
00:00:28.917 --> 00:00:34.281
state itself, provided we're
not dealing with like a massive

9
00:00:34.281 --> 00:00:40.068
amount of state is actually pretty
small in terms of the foot print.

10
00:00:40.068 --> 00:00:45.245
Even to the point that within Redux or
NgRx you can actually,

11
00:00:45.245 --> 00:00:49.812
I know with NgRx you can break
your state out into these

12
00:00:49.812 --> 00:00:54.281
individual smaller subsets and
then dynamically or

13
00:00:54.281 --> 00:00:58.060
lazily, lazy, load them into your store.

14
00:00:59.570 --> 00:01:01.180
I typically avoid doing that.

15
00:01:01.180 --> 00:01:04.360
Because state in and
of itself is so small.

16
00:01:04.360 --> 00:01:07.580
The footprint is so small in
comparison to the rest of the app.

17
00:01:07.580 --> 00:01:09.400
I just put it in one place.

18
00:01:09.400 --> 00:01:13.955
And so I would say,
when you're looking at a single state tree

19
00:01:13.955 --> 00:01:17.560
as just a JavaScript object,
it's very small.

20
00:01:18.840 --> 00:01:23.000
And so I think,
the cost of it is also very small.

21
00:01:23.000 --> 00:01:27.320
But, I think there has to be a good
functional reason to do this.

22
00:01:28.890 --> 00:01:31.380
And I can think of a couple of them.

23
00:01:31.380 --> 00:01:36.279
I think being able to do remote
assistance, remote troubleshooting,

24
00:01:36.279 --> 00:01:41.960
there's good reasons for
there obviously take security seriously.

25
00:01:41.960 --> 00:01:46.281
But the cost itself in terms
of the transport cost over

26
00:01:46.281 --> 00:01:49.240
the network is pretty small.

27
00:01:49.240 --> 00:01:54.680
And I think moving a single state tree
across the Internet is also pretty small.

28
00:01:54.680 --> 00:01:59.300
So I would obviously,
you'd want to keep an eye on that.

29
00:01:59.300 --> 00:02:04.285
But this is not certainly I would just do
as his default like every app that I get

30
00:02:04.285 --> 00:02:06.600
now has a remote real time back end.

31
00:02:07.600 --> 00:02:11.685
But it is possible to do this in
like pieces or a hybrid approach,

32
00:02:11.685 --> 00:02:14.040
where this becomes very effective.

33
00:02:14.040 --> 00:02:19.560
So to answer the question, I think if the
user interaction would benefit from it,

34
00:02:19.560 --> 00:02:21.480
I think the cost is minimal.

35
00:02:21.480 --> 00:02:25.157
I think you would just have to
have a good reason to do that.

36
00:02:25.157 --> 00:02:29.660
&gt;&gt; So when we're talking about this
observables pattern, you were describing

37
00:02:29.660 --> 00:02:34.370
how we need to like switch our thinking
from input outputs like output input, and

38
00:02:34.370 --> 00:02:38.930
I'm curious just like,
I'm having trouble with that mental model.

39
00:02:38.930 --> 00:02:42.812
I'm curious if you could like walk through
how you apply that mental model to this

40
00:02:42.812 --> 00:02:44.300
use case right here.

41
00:02:44.300 --> 00:02:50.404
&gt;&gt; So, the question is,
based on a comment that I made yesterday,

42
00:02:50.404 --> 00:02:57.990
around we need to switch our paradigm
from input to output, to output to input.

43
00:02:59.850 --> 00:03:05.170
How would I apply that to
this particular example?

44
00:03:05.170 --> 00:03:08.770
So let's think about this for a second.

45
00:03:08.770 --> 00:03:13.419
Let me pull up another instance of this

46
00:03:19.270 --> 00:03:24.006
And I'm just going to interact with this.

47
00:03:26.790 --> 00:03:31.585
For just a second,
notice that on the right hand side,

48
00:03:31.585 --> 00:03:34.410
I'm not having to do anything.

49
00:03:36.430 --> 00:03:42.103
It's that it is receiving
information to the application,

50
00:03:42.103 --> 00:03:44.780
and it's responding to it.

51
00:03:46.270 --> 00:03:51.338
And so when I talk about think of it from
output to input is that when you think

52
00:03:51.338 --> 00:03:56.940
of a stream, the nature of a stream
is that it's outputting something.

53
00:03:56.940 --> 00:04:01.354
And so when you shift your mind to start
to think of everything as a stream

54
00:04:01.354 --> 00:04:02.430
of data.

55
00:04:02.430 --> 00:04:09.014
That there's already an initial output,
really what you have to focus on is,

56
00:04:09.014 --> 00:04:13.620
where do I want to put that
stream into my application.

57
00:04:14.680 --> 00:04:20.310
And so in the right hand side is
that we're pushing data to it.

58
00:04:21.550 --> 00:04:27.114
Is that data is being
outputted from the server and

59
00:04:27.114 --> 00:04:29.903
pushed into the string.

60
00:04:29.903 --> 00:04:34.739
And so when you start to think
about interactions is not,

61
00:04:34.739 --> 00:04:37.659
I'm going to pull this data to me,

62
00:04:37.659 --> 00:04:42.090
but rather I'm going to allow
you to push data to me,

63
00:04:42.090 --> 00:04:47.480
where I'm going to respond
to the output of some event.

64
00:04:47.480 --> 00:04:51.759
So you just sort of think of things in
terms of events, capturing them and

65
00:04:51.759 --> 00:04:55.969
then figuring out how you want to
input them into your application, and

66
00:04:55.969 --> 00:04:58.500
what shape you want it to be in.

67
00:04:58.500 --> 00:05:02.614
And so in this case,
as we start to go through this,

68
00:05:02.614 --> 00:05:07.930
you can see on the right hand side,
that we're interacting.

69
00:05:07.930 --> 00:05:12.310
We're capturing even that output of those
events, translating into something else,

70
00:05:12.310 --> 00:05:15.670
and then pushing that into
the right hand application.

71
00:05:15.670 --> 00:05:22.868
But even here,
if I go like this I'm pushing data or

72
00:05:22.868 --> 00:05:27.667
I'm outputting events that are being
picked up on the right hand side and

73
00:05:27.667 --> 00:05:29.450
being responded to.

74
00:05:29.450 --> 00:05:31.590
And so it's just everything is a stream.

75
00:05:31.590 --> 00:05:33.320
There's always output.

76
00:05:33.320 --> 00:05:36.009
You just need to figure out
what you want to do with it and

77
00:05:36.009 --> 00:05:40.100
how it's going to affect your
application when you input it into it.

78
00:05:40.100 --> 00:05:45.074
So it's very simple to say it like just
go from input to output, output to input,

79
00:05:45.074 --> 00:05:47.210
and your problems will be solved.

80
00:05:47.210 --> 00:05:52.110
I realized that two slides does
not a paradigm shift make,

81
00:05:52.110 --> 00:05:57.320
that I'm constantly having to
refine how I think about that.

82
00:05:58.770 --> 00:06:02.458
And finding new ways to apply
in this case, through space and

83
00:06:02.458 --> 00:06:05.928
time is what happens if I'm
actually pushing things, or

84
00:06:05.928 --> 00:06:10.560
I'm outputting events and data over
the internet through space and time.

85
00:06:10.560 --> 00:06:11.970
What does that mean?

86
00:06:11.970 --> 00:06:15.690
And this is where you have
this particular example.

87
00:06:15.690 --> 00:06:16.940
Hopefully that was helpful?

88
00:06:16.940 --> 00:06:17.470
&gt;&gt; Yeah, definitely.

89
00:06:17.470 --> 00:06:20.727
I think I was stuck thinking when
you're looking at the manual step,

90
00:06:20.727 --> 00:06:24.490
like thinking of that as a piece of input
you're sending, but definitely seems

91
00:06:24.490 --> 00:06:28.620
clearer to talk about that response coming
from the server as output to the client.

92
00:06:28.620 --> 00:06:29.190
&gt;&gt; Yep.

93
00:06:29.190 --> 00:06:32.324
I was always going to dispatch
something that there is some,

94
00:06:32.324 --> 00:06:36.760
but even this, when I click step I'm
actually dispatching, I'm creating output.

95
00:06:37.770 --> 00:06:43.074
And so it just helps you to think of,
instead of saying, I'm pulling this to me,

96
00:06:43.074 --> 00:06:47.910
that I'm pushing things into
the application to be responded to.

97
00:06:47.910 --> 00:06:52.119
And so this concludes Enterprise Patterns
featuring TypeScript,

98
00:06:52.119 --> 00:06:55.806
we've covered a lot of material,
and I just wanna thank you

99
00:06:55.806 --> 00:06:59.568
from the bottom of my heart for
spending this time sharing and

100
00:06:59.568 --> 00:07:04.220
learning these concepts with me,
and please take it, apply it.

101
00:07:04.220 --> 00:07:08.803
And if you do something cool, please
reach out to me on twitter at simpleton,

102
00:07:08.803 --> 00:07:12.060
I'm accept DMs and
I would love to hear what you build.

103
00:07:12.060 --> 00:07:17.086
I would love to hear about your successes,
failures, frustrations, and

104
00:07:17.086 --> 00:07:22.589
as well keep your eye on the repository,
as I will add in some additional resources

105
00:07:22.589 --> 00:07:27.970
that will help you along your journey to
become a better all around programmer.

106
00:07:27.970 --> 00:07:29.750
So thank you so much for being here.

107
00:07:29.750 --> 00:07:31.310
Thank you for joining me on this journey.

108
00:07:31.310 --> 00:07:37.400
I wish you all the luck in the world in
your career, in your pursuit of software.

