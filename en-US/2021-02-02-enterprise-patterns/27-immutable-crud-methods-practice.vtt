WEBVTT

1
00:00:00.120 --> 00:00:06.815
I'm going to do the challenge at
the same time that you're doing it.

2
00:00:06.815 --> 00:00:14.080
And let's just go through and
let's fix these methods here.

3
00:00:14.080 --> 00:00:19.076
That's essentially the challenge,
so, for projects go through and

4
00:00:19.076 --> 00:00:23.405
let's add in your higher order
functions to make this work.

5
00:00:23.405 --> 00:00:28.092
So we need to update our methods

6
00:00:28.092 --> 00:00:32.249
to properly modify state.

7
00:00:32.249 --> 00:00:35.279
So, let's go here and

8
00:00:35.279 --> 00:00:40.704
the one thing that we're going to do so.

9
00:00:43.990 --> 00:00:47.006
I'm gonna do this on clients
even do this on projects.

10
00:00:48.650 --> 00:00:55.058
That we need to make sure that we're
signaling, we are returning clients state.

11
00:00:58.280 --> 00:01:06.829
So I'm gonna go through and
I'm just going to Set a return type.

12
00:01:06.829 --> 00:01:14.303
Now what I could also do is set
it here as well and sometime

13
00:01:18.220 --> 00:01:22.274
If it's super obvious
what it is I may just for

14
00:01:22.274 --> 00:01:26.231
the sake of time opt to
not strongly type it.

15
00:01:26.231 --> 00:01:29.913
So I just for the sake of space and
different things,

16
00:01:29.913 --> 00:01:33.020
I'm not going to strongly
type all of this.

17
00:01:35.550 --> 00:01:40.873
But just know that in most cases I would.

18
00:01:40.873 --> 00:01:45.082
So, when we want to load clients,

19
00:01:45.082 --> 00:01:49.148
what does that look like, well,

20
00:01:49.148 --> 00:01:58.120
we know that we need to return
an object that matches client state.

21
00:01:58.120 --> 00:02:02.853
So it's gonna have, clients and

22
00:02:06.580 --> 00:02:08.665
It's going to also have.

23
00:02:12.356 --> 00:02:13.671
Current client.

24
00:02:13.671 --> 00:02:17.554
Now, in this case we're not modifying.

25
00:02:20.740 --> 00:02:25.409
The current client, so we're just
going to say take this and set it and

26
00:02:25.409 --> 00:02:28.987
just set it what it is,
we're not dealing with that.

27
00:02:28.987 --> 00:02:32.857
But over here,
what we are doing is we're saying,

28
00:02:32.857 --> 00:02:37.447
we're going to take and
we're going to load, in this case,

29
00:02:37.447 --> 00:02:43.210
let's assume that if clients come in,
you're just going to load them all.

30
00:02:44.330 --> 00:02:49.434
And so now what we're gonna do
is we're just going to take,

31
00:02:49.434 --> 00:02:54.742
and we're gonna say it returned the state,
but in this case,

32
00:02:54.742 --> 00:03:01.502
whatever the clients were, we're just
gonna return it with the new clients.

33
00:03:01.502 --> 00:03:04.610
And so now we're saying little clients, so

34
00:03:04.610 --> 00:03:10.330
this is where you would say I've just got
a client from the server, drop them in.

35
00:03:10.330 --> 00:03:14.501
Now, let's do select client,

36
00:03:14.501 --> 00:03:19.448
the clients aren't going to change.

37
00:03:19.448 --> 00:03:24.864
So we're just going to
go state clients but

38
00:03:24.864 --> 00:03:29.829
what is going to change is the client and

39
00:03:29.829 --> 00:03:33.600
so we just update that there.

40
00:03:36.830 --> 00:03:41.894
Now, if we want to clear
the client what we

41
00:03:41.894 --> 00:03:46.685
would do is we would just set this to no.

42
00:03:46.685 --> 00:03:51.459
And more than likely if I
dispatched an object like this, or

43
00:03:51.459 --> 00:03:56.625
an action object that I probably
would not put a payload on this.

44
00:03:56.625 --> 00:04:02.004
And so what this would actually
probably look like is it would

45
00:04:02.004 --> 00:04:07.922
have a single parameter and down here,
I would just pass state in.

46
00:04:07.922 --> 00:04:13.133
Because it doesn't need a payload
to be successful in this particular

47
00:04:13.133 --> 00:04:18.180
operation and from here,
now this is where this gets interesting.

48
00:04:21.150 --> 00:04:26.149
We need to add a client well,
state.currentclient

49
00:04:26.149 --> 00:04:30.589
because we're not doing
anything with this.

50
00:04:30.589 --> 00:04:35.740
But what we need to do is we need
to take the current clients and

51
00:04:35.740 --> 00:04:38.267
we need to create a new array.

52
00:04:42.970 --> 00:04:48.299
And push, the current clients in,
but then add in, our new client.

53
00:04:51.148 --> 00:04:54.615
And so now, using an immutable operation,
we're taking we're saying,

54
00:04:54.615 --> 00:04:58.248
take the clients, create a new array,
put the existing clients in there, but

55
00:04:58.248 --> 00:05:00.250
then just add this new client, at the end.

56
00:05:02.130 --> 00:05:08.596
Now let's go to delete,
we'll do this one, it's a bit easier.

57
00:05:08.596 --> 00:05:13.556
And we're going to filter over

58
00:05:13.556 --> 00:05:18.705
clients and within this, and so

59
00:05:18.705 --> 00:05:24.236
I'm going to just because you will

60
00:05:24.236 --> 00:05:29.016
have a shadow variable here.

61
00:05:29.016 --> 00:05:33.994
We're going to take client and
we're just gonna make sure

62
00:05:33.994 --> 00:05:39.290
that the client ID does not equal
the client ID that we pass in.

63
00:05:41.100 --> 00:05:47.347
So this is how this is being filtered out,

64
00:05:47.347 --> 00:05:53.235
now, let's go up to the top one here and

65
00:05:53.235 --> 00:05:56.282
let's do this one.

66
00:05:56.282 --> 00:06:02.410
So this is probably gonna be in my
opinion probably the most complex one.

67
00:06:04.030 --> 00:06:09.721
And we're going to loop over and
we're going to look for

68
00:06:09.721 --> 00:06:13.242
the client that we want to update.

69
00:06:13.242 --> 00:06:19.690
And so, we'll go here and we'll break this
into a new function block or a new block.

70
00:06:19.690 --> 00:06:25.657
And we're going to essentially return.

71
00:06:29.180 --> 00:06:35.116
One of two things, either the client
that we're iterating over or

72
00:06:35.116 --> 00:06:37.029
a new cloned object.

73
00:06:37.029 --> 00:06:41.995
So if the client ID matches
the client that we want to

74
00:06:41.995 --> 00:06:46.860
replace we're just going
to go object.assign.

75
00:06:48.780 --> 00:06:55.304
We're going to create a new object and
we're just going to pass in the client.

76
00:06:58.167 --> 00:07:02.500
Or we are going to just return.

77
00:07:04.990 --> 00:07:12.304
The existing client that we're iterating
over and leaving the current client alone.

78
00:07:15.360 --> 00:07:20.469
And so this is how you flesh out or
you can essentially

79
00:07:20.469 --> 00:07:25.480
manipulate a collection
in an immutable fashion.

80
00:07:25.480 --> 00:07:29.848
So, one of the things that
I do quite a bit, and

81
00:07:29.848 --> 00:07:37.450
if you watch the production angular
course, is that I mock out a lot of APIs.

82
00:07:37.450 --> 00:07:41.834
Or a mock out that functionality
either in a faÃ§ade or

83
00:07:41.834 --> 00:07:46.328
in an API to reduce
the dependency on the server team.

84
00:07:46.328 --> 00:07:52.387
And this is typically what I'm
doing every single time is,

85
00:07:52.387 --> 00:07:57.610
this is how you add
an element to a collection.

86
00:07:57.610 --> 00:08:02.428
This is how you update an element to a
collection, and this is how you delete or

87
00:08:02.428 --> 00:08:04.817
remove an element from a collection.

88
00:08:04.817 --> 00:08:11.443
And so I would say these three methods,
specifically this part right here,

89
00:08:11.443 --> 00:08:16.010
is something that I use over and
over and over again.

