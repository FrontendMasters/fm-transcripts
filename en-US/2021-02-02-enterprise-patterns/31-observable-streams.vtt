WEBVTT

1
00:00:00.360 --> 00:00:03.257
We started at the microsection.

2
00:00:03.257 --> 00:00:06.600
And we started talking about
complexity at the component level.

3
00:00:08.240 --> 00:00:11.381
What are the things that you see in
your code that's going to cause you

4
00:00:11.381 --> 00:00:13.400
an incredible amount of pain?

5
00:00:13.400 --> 00:00:17.986
Well, it is the axis of evil,
hidden state,

6
00:00:17.986 --> 00:00:22.300
nestled logic, SRP violations.

7
00:00:22.300 --> 00:00:29.099
Then, we expanded this out to
when we think about features and

8
00:00:29.099 --> 00:00:34.190
state management, how do we approach this?

9
00:00:34.190 --> 00:00:41.877
And so we took a very bottom up approach
to how we can think about programming.

10
00:00:41.877 --> 00:00:47.631
And this is where we introduced
the four elements of programming,

11
00:00:47.631 --> 00:00:54.120
which are nouns, verbs conditions,
iterators, and we built out Redux.

12
00:00:55.460 --> 00:00:59.699
Now, the fifth element of programming and

13
00:00:59.699 --> 00:01:05.936
in a lot of ways this, in my opinion,
is the most interesting,

14
00:01:05.936 --> 00:01:13.500
especially when you are in in asynchronous
environment, and that is time.

15
00:01:14.930 --> 00:01:21.828
How do we manage time when we
are building applications?

16
00:01:23.573 --> 00:01:28.828
And, I would say in parallel to time that

17
00:01:28.828 --> 00:01:37.810
this is where typically our flow
control problems come from.

18
00:01:37.810 --> 00:01:46.733
Because not only do you have to
communicate that this thing has happened.

19
00:01:46.733 --> 00:01:52.042
But, how often is it that we are dependent

20
00:01:52.042 --> 00:01:59.788
on the order in which things
are communicated or they break?

21
00:01:59.788 --> 00:02:04.205
Has anybody ever in
a JavaScript application had

22
00:02:04.205 --> 00:02:08.610
something show up before something else?

23
00:02:08.610 --> 00:02:10.690
[LAUGH] It caused a problem.

24
00:02:10.690 --> 00:02:17.060
Like, welcome to JavaScript, it's
asynchronous, this happens all the time.

25
00:02:17.060 --> 00:02:22.012
And when you start to deal
with complex sequences that

26
00:02:22.012 --> 00:02:27.184
are dependent on each other
that are dependent on time,

27
00:02:27.184 --> 00:02:30.486
ie completely out of your control,

28
00:02:30.486 --> 00:02:35.236
this is where things can
become very challenging.

29
00:02:35.236 --> 00:02:38.186
And so, I don't know if
this course is still up but

30
00:02:38.186 --> 00:02:43.100
it one of my favorite Frontend Masters
courses ever was by Jafar Hussain.

31
00:02:43.100 --> 00:02:45.780
And, he's talking about observables.

32
00:02:45.780 --> 00:02:49.520
So he is one of the individuals
who is the core contributor.

33
00:02:49.520 --> 00:02:52.760
And he uses this, it is, yes.

34
00:02:52.760 --> 00:02:59.790
So Mark just chimed in,
popped up said it is in the catalog.

35
00:02:59.790 --> 00:03:01.140
In my opinion, it's timeless.

36
00:03:01.140 --> 00:03:07.850
The stuff that Jafar talks about
is never going to be irrelevant.

37
00:03:07.850 --> 00:03:12.506
And one of the things that he
talks about is at Netflix.,

38
00:03:12.506 --> 00:03:18.040
how do you handle two asynchronous
calls that depend on each other?

39
00:03:19.070 --> 00:03:24.038
So, you have a user that logs in,
and then from there,

40
00:03:24.038 --> 00:03:29.222
you need to go and get their videos,
like whatever videos

41
00:03:29.222 --> 00:03:34.880
that they happen to have been watching or
whatever.

42
00:03:34.880 --> 00:03:37.120
And, how do you coordinate that?

43
00:03:37.120 --> 00:03:42.610
More importantly is if something fails,
how do you recover and then coordinate?

44
00:03:42.610 --> 00:03:48.830
And so there's all these asynchronous
things that become very, very problematic.

45
00:03:48.830 --> 00:03:54.800
And so, when you start to add in one,
two, three of these asynchronous

46
00:03:54.800 --> 00:03:59.689
dependencies, I have seen
programmers lose their mind.

47
00:04:01.090 --> 00:04:07.673
Because they cannot figure out why
something is breaking some of the time.

48
00:04:09.582 --> 00:04:14.070
And so, we are going to talk about
the fifth element of programming.

49
00:04:14.070 --> 00:04:17.900
Specifically, we're going to
talk about observable streams.

50
00:04:19.790 --> 00:04:25.193
And, if we look at the iron
triad of programming,

51
00:04:25.193 --> 00:04:29.953
which is state management, flow control,

52
00:04:29.953 --> 00:04:34.457
and code volume in observable stream does

53
00:04:34.457 --> 00:04:39.238
all three of these very, very, very well.

54
00:04:39.238 --> 00:04:41.842
And so, observable streams,

55
00:04:43.582 --> 00:04:48.590
Gives us a powerful way to encapsulate,
transport, and

56
00:04:48.590 --> 00:04:53.494
transform data from user
interactions into creative,

57
00:04:53.494 --> 00:04:57.780
powerful, immersive experiences.

58
00:04:57.780 --> 00:05:02.810
Now, If you are an angular developer,

59
00:05:02.810 --> 00:05:06.629
and you are tempted right now to be like,
look,

60
00:05:06.629 --> 00:05:10.355
I've made asynchronous
calls to the server,

61
00:05:10.355 --> 00:05:15.036
I've totally use observables,
like I'm totally cool,

62
00:05:15.036 --> 00:05:21.148
that if you are limiting your exposure
to observables to server side calls,

63
00:05:21.148 --> 00:05:24.324
you are living below your privileges.

64
00:05:24.324 --> 00:05:29.026
I would say that's actually one of
the worst ways to learn how to work with

65
00:05:29.026 --> 00:05:30.580
observables.

66
00:05:30.580 --> 00:05:35.890
And so, when I talk about observables,
I immediately talk about it or

67
00:05:35.890 --> 00:05:39.580
I basically reframe it in
the context of the DOM.

68
00:05:40.940 --> 00:05:43.094
And we'll see why in just a moment, but

69
00:05:43.094 --> 00:05:48.710
I've just met certain individuals that,
I know how to make server costs, I'm good.

70
00:05:48.710 --> 00:05:55.740
And, I actually got totally called out and
I said, you understand observables?

71
00:05:55.740 --> 00:06:00.300
Well, build me a stopwatch
with observable streams.

72
00:06:00.300 --> 00:06:02.720
I didn't have a clue how to do that.

73
00:06:02.720 --> 00:06:04.740
And that's when I realized I
didn't understand them at all.

74
00:06:05.830 --> 00:06:10.513
So, in terms of encapsulating,

75
00:06:10.513 --> 00:06:16.202
an observable stream basically creates

76
00:06:16.202 --> 00:06:21.555
this tunnel for your event to move from

77
00:06:21.555 --> 00:06:27.090
its origin to its destination safely.

78
00:06:27.090 --> 00:06:29.000
Observable streams are encapsulated.

79
00:06:30.040 --> 00:06:35.370
It also allows you to reliably transmit or

80
00:06:35.370 --> 00:06:42.540
transport that data or
event from one place to another.

81
00:06:42.540 --> 00:06:47.376
So, thinking about state management,
if something changes in your code,

82
00:06:47.376 --> 00:06:50.635
your state changes,
how do you communicate that?

83
00:06:52.173 --> 00:06:53.710
You need to be able to transport it.

84
00:06:53.710 --> 00:06:58.917
And so
now you have this protected superhighway

85
00:06:58.917 --> 00:07:05.294
that you can then set up these
microfactories along the way

86
00:07:05.294 --> 00:07:11.035
to transform your data into
any shape that you want.

87
00:07:11.035 --> 00:07:15.687
So that by the time,
it gets to its destination,

88
00:07:15.687 --> 00:07:21.510
it is in exactly the form that
you need for it to just work.

89
00:07:21.510 --> 00:07:27.400
So, small little asterix here is if
you're working with observables and

90
00:07:27.400 --> 00:07:32.625
I would say even promises and
you're having to within your then or

91
00:07:32.625 --> 00:07:39.573
subscribe block, do a ton of manipulation
to the result, that's an anti-pattern.

92
00:07:39.573 --> 00:07:44.181
That when your data is the end of the
stream, it should be in the shape that you

93
00:07:44.181 --> 00:07:48.069
need it to be to the point where
you should if you're an angular,

94
00:07:48.069 --> 00:07:51.250
you should be able to just
dump it into the template.

95
00:07:52.360 --> 00:07:55.890
And it should just render that you
do not even have to unwrap it.

96
00:07:57.120 --> 00:07:59.490
And observable streams
gives you the ability and

97
00:07:59.490 --> 00:08:01.850
this is the one thing that promises.

98
00:08:01.850 --> 00:08:08.797
It's very, very hard to do is that as your
data is moving from point A to point B,

99
00:08:08.797 --> 00:08:13.908
you can transform that data
into whatever shape you need.

100
00:08:13.908 --> 00:08:16.607
So that by the time it
steps off the train,

101
00:08:16.607 --> 00:08:19.780
it's got his party gear on and
it's ready to go.

