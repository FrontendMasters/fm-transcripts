WEBVTT

1
00:00:00.180 --> 00:00:04.414
So you're just gonna essentially
create a reducer with the state and

2
00:00:04.414 --> 00:00:08.867
action parameter that has a switch
statement based on the action type for

3
00:00:08.867 --> 00:00:11.500
load, read, create, update, delete.

4
00:00:11.500 --> 00:00:14.870
And then it creates an appropriate
method for each of those.

5
00:00:14.870 --> 00:00:20.246
Now, what I would do is for
the methods, just return state of,

6
00:00:20.246 --> 00:00:24.302
so that's one thing I did do wrong is for
these,

7
00:00:24.302 --> 00:00:29.630
in order for this to be correct,
you need to return state.

8
00:00:29.630 --> 00:00:36.354
And so your handler methods, it's totally
fine if they look like this initially.

9
00:00:36.354 --> 00:00:42.757
All right, so with that said, do we have
any questions about the examples and

10
00:00:42.757 --> 00:00:48.450
or the challenge that we're
about to endeavor to conquer?

11
00:00:48.450 --> 00:00:53.736
Yeah, so the question is how would I go
about separating my code into modules or

12
00:00:53.736 --> 00:00:56.310
would I just leave it all in one place?

13
00:00:56.310 --> 00:01:00.278
And the answer is I would absolutely
extract this into modules.

14
00:01:00.278 --> 00:01:05.560
And a module really,
under the hood is just typically a file

15
00:01:05.560 --> 00:01:10.844
that you're exporting certain,
really just an object and

16
00:01:10.844 --> 00:01:14.240
then consuming it in something else.

17
00:01:14.240 --> 00:01:17.638
So there's nothing particularly
magical about a module.

18
00:01:17.638 --> 00:01:23.006
But I would absolutely, if this was
anything other than an exercise

19
00:01:23.006 --> 00:01:29.505
in programming concepts, I would break
this up, move this into separate files,

20
00:01:29.505 --> 00:01:33.850
and then consume them in
pieces into the application.

21
00:01:33.850 --> 00:01:38.807
So we're making some concessions
here because we are kinda starting

22
00:01:38.807 --> 00:01:42.250
at ground zero and then moving up.

23
00:01:42.250 --> 00:01:44.944
But if this was an actual application,

24
00:01:44.944 --> 00:01:50.658
all of these would be broken out into its
separate respective file slash modules and

25
00:01:50.658 --> 00:01:54.183
then assembled back together
of the composition.

26
00:01:54.183 --> 00:01:55.719
So that's a very good question.

27
00:01:55.719 --> 00:01:58.672
This is not typically how I do this.

28
00:01:58.672 --> 00:02:01.700
But it is for
the sake of an example or creating,

29
00:02:01.700 --> 00:02:06.948
I think cognitive cohesion by keeping
everything together as we iterate on this.

30
00:02:06.948 --> 00:02:10.748
&gt;&gt; Will we get to a point in this
workshop that we will learn how to do it,

31
00:02:10.748 --> 00:02:15.100
just separate them into modules or
does it not part of the scope?

32
00:02:15.100 --> 00:02:19.422
&gt;&gt; So the question is in the workshop,

33
00:02:19.422 --> 00:02:25.766
will we learn how to separate
the code into modules?

34
00:02:25.766 --> 00:02:28.620
And the answer is I hadn't
thought about that.

35
00:02:28.620 --> 00:02:30.669
But since you've asked,

36
00:02:30.669 --> 00:02:35.910
then I'm certain I can show some
demonstration on how to do that.

37
00:02:35.910 --> 00:02:38.930
So your request has been heard.

38
00:02:38.930 --> 00:02:41.790
And I will see if I can
work that in at some point.

39
00:02:41.790 --> 00:02:44.210
It's actually fairly straightforward.

40
00:02:44.210 --> 00:02:47.190
But I realize some people may
have some questions about that.

41
00:02:47.190 --> 00:02:49.260
So thank you for asking that.

42
00:02:49.260 --> 00:02:51.110
I will do my best to touch up on that.

