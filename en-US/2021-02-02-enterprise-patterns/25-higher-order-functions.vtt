WEBVTT

1
00:00:00.060 --> 00:00:06.450
For the fourth and final element of our
Kung Fu, saga, collections and iterators.

2
00:00:07.920 --> 00:00:11.626
And so just before I get started in this,

3
00:00:11.626 --> 00:00:16.531
I just want to make sure that
we understand when we talk

4
00:00:16.531 --> 00:00:21.436
about iterators is that we
have more than one thing and

5
00:00:21.436 --> 00:00:27.017
we need to perform some action
on that collection of things.

6
00:00:27.017 --> 00:00:31.881
Now in JavaScript, and I would say
almost every other language that

7
00:00:31.881 --> 00:00:36.508
I've ever worked with,
you have kind of this classic for loop.

8
00:00:36.508 --> 00:00:43.307
And I hate this particular
programming mechanism.

9
00:00:43.307 --> 00:00:48.139
The reason being is you are creating

10
00:00:48.139 --> 00:00:52.810
a mechanism that is iterating over

11
00:00:52.810 --> 00:00:57.320
an object that has no reference or

12
00:00:57.320 --> 00:01:04.260
knowledge to the object
that it is iterating over.

13
00:01:05.400 --> 00:01:10.370
In other words is you're kind of
measuring this object if you will.

14
00:01:10.370 --> 00:01:15.410
So it's like, okay, I'm gonna start
at zero and I'm gonna go to clients.

15
00:01:15.410 --> 00:01:16.310
How many do you have?

16
00:01:16.310 --> 00:01:18.010
Okay.
10.

17
00:01:18.010 --> 00:01:21.296
I'm gonna keep going over and
it each iteration,

18
00:01:21.296 --> 00:01:26.850
I'm gonna have to ask the clients or right
like, hey, I'm in position number two,

19
00:01:26.850 --> 00:01:32.431
what client are you and you're constantly
having to reference via array notation.

20
00:01:32.431 --> 00:01:40.200
The particular element that you're
at in that particular iteration.

21
00:01:41.320 --> 00:01:47.889
And to me, it seems incredibly clunky
that you're iterating over something and

22
00:01:47.889 --> 00:01:52.816
yet you have no knowledge of
the thing that you're iterating

23
00:01:52.816 --> 00:01:57.136
over versus let me show you
a higher order function.

24
00:01:57.136 --> 00:02:02.184
In JavaScript for each.

25
00:02:02.184 --> 00:02:05.658
So this is an example of
a higher order function,

26
00:02:05.658 --> 00:02:09.370
that you have a client's collection.

27
00:02:09.370 --> 00:02:14.972
And instead of delegating
the iteration of that collection to

28
00:02:14.972 --> 00:02:22.404
something else you're allowing the array
to handle that in iterate over itself,

29
00:02:22.404 --> 00:02:26.926
and not only is it able to
iterate over itself, but

30
00:02:26.926 --> 00:02:32.097
it's able to keep track of
whatever item it's on because

31
00:02:32.097 --> 00:02:37.190
it knows what it is,
because It is controlling itself.

32
00:02:37.190 --> 00:02:41.993
So I look at this and
I can think of only one reason I've only

33
00:02:41.993 --> 00:02:46.111
ever seen one reason in,
I don't know, the six or

34
00:02:46.111 --> 00:02:53.100
seven years that have elapsed or
transpired since I started moving to ESX.

35
00:02:53.100 --> 00:02:57.976
And it's if you need to do In
iteration where you need to loop for

36
00:02:57.976 --> 00:03:03.864
a specific length, so like I need to
have 100 iterations of something and

37
00:03:03.864 --> 00:03:08.096
then I need to fill or
need to push items into an array and

38
00:03:08.096 --> 00:03:12.860
it's a very specific number
that you need to iterate.

39
00:03:12.860 --> 00:03:15.600
You cannot use hydro higher
order functions for that.

40
00:03:15.600 --> 00:03:20.140
But for
everything else higher order functions.

41
00:03:20.140 --> 00:03:27.760
So my three favourite ones outside of for
each is filter, map and reduce.

42
00:03:27.760 --> 00:03:32.765
And so we've kind of hinted at
these through the workshop but

43
00:03:32.765 --> 00:03:38.752
all the filter does is say, I wanna
take this array, I wanna loop over and

44
00:03:38.752 --> 00:03:43.780
I wanna return everything
that matches this condition.

45
00:03:43.780 --> 00:03:47.951
A map allows you to loop
over a collection and

46
00:03:47.951 --> 00:03:54.620
perform some kind of logical
operation on that collection.

47
00:03:54.620 --> 00:03:59.625
Reduce what this does Is it
takes the current state or

48
00:03:59.625 --> 00:04:04.631
the accumulated state and
then the current value and

49
00:04:04.631 --> 00:04:10.545
it is simply, or it's simply
performs a logical operation or

50
00:04:10.545 --> 00:04:17.160
performs a specific logical
operation until you get to the end.

51
00:04:17.160 --> 00:04:23.090
And then it would turn into a final
reduced value for that operation.

52
00:04:23.090 --> 00:04:25.392
So what you're doing is you're
taking all these elements and

53
00:04:25.392 --> 00:04:27.820
you're reducing them into a single value.

54
00:04:27.820 --> 00:04:34.150
Ironically, this is very close to
how the reducer works in Redux.

