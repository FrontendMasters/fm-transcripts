WEBVTT

1
00:00:00.100 --> 00:00:05.900
If we go to the macro application,

2
00:00:05.900 --> 00:00:11.690
there are a ton of examples.

3
00:00:11.690 --> 00:00:16.040
We will probably go through
just a couple of them.

4
00:00:17.580 --> 00:00:19.155
So we'll do a little demo.

5
00:00:21.309 --> 00:00:22.661
We'll do a little challenge.

6
00:00:22.661 --> 00:00:24.930
And we're not gonna go
through all of these.

7
00:00:24.930 --> 00:00:27.440
That would take a very long time.

8
00:00:27.440 --> 00:00:34.236
Mainly what I care about here, is that
when we talk about the fifth element,

9
00:00:34.236 --> 00:00:40.819
that we understand that we can effectively
manage and manipulate time and

10
00:00:40.819 --> 00:00:46.552
communication and leverage it to
create stability in our apps so

11
00:00:46.552 --> 00:00:52.430
that we can deploy them at scale,
safely, and reliably.

12
00:00:52.430 --> 00:00:59.678
So, I'll show you a couple of them,
maybe two, three, maybe four.

13
00:00:59.678 --> 00:01:03.340
So right here,
we have this basic sequence.

14
00:01:03.340 --> 00:01:10.410
And all I'm doing, is when I click this,
it's just going, beast mode activated.

15
00:01:10.410 --> 00:01:12.808
Super simple, all right?

16
00:01:12.808 --> 00:01:17.404
Let's hop in the code and
let us look at this.

17
00:01:17.404 --> 00:01:22.780
So in the macro app,
if you go in here into the app,

18
00:01:22.780 --> 00:01:29.694
you have the concepts, and
within this we have basic sequence.

19
00:01:29.694 --> 00:01:32.742
And what we have here is, and

20
00:01:32.742 --> 00:01:38.460
I'm going to just chop this out for
right now.

21
00:01:38.460 --> 00:01:42.555
And if you actually go to the stack
blitz that we posted in the beginning,

22
00:01:42.555 --> 00:01:45.726
there is a version of this,
the stuff is commented out.

23
00:01:45.726 --> 00:01:47.622
But in this case,
I'm just going to chop it out.

24
00:01:49.946 --> 00:01:54.650
We have a very,
very simple template that has a button.

25
00:01:56.800 --> 00:02:00.570
And I have a simple h1 tag.

26
00:02:00.570 --> 00:02:04.760
And so I'm just saying, I want to get
access to this button with your child.

27
00:02:04.760 --> 00:02:08.710
And I just have this message
that I want to display.

28
00:02:08.710 --> 00:02:14.688
And then I have a convenience method
that allows me to essentially get

29
00:02:14.688 --> 00:02:22.020
access to the native element because I'm
dealing with an angular material button.

30
00:02:23.550 --> 00:02:31.140
All right, now with that said,
let's build this out.

31
00:02:31.140 --> 00:02:35.888
So the first thing we need to do,
is we need to capture,

32
00:02:35.888 --> 00:02:39.830
or we need to establish
that initial output.

33
00:02:41.780 --> 00:02:47.612
So we're gonna go from event, and
then we're going to put in the element

34
00:02:47.612 --> 00:02:52.596
that we want to target, and
the event that we want to capture.

35
00:02:52.596 --> 00:02:55.000
So this.getNativeElement.

36
00:02:56.160 --> 00:02:58.430
And I'm gonna pass in this.button.

37
00:02:58.430 --> 00:03:00.937
So this is just kind of unwrapping this.

38
00:03:00.937 --> 00:03:05.640
And let's go with click, all right?

39
00:03:05.640 --> 00:03:12.677
And so now I have my initial output.

40
00:03:12.677 --> 00:03:19.320
But it's not going to do
anything until I subscribe.

41
00:03:19.320 --> 00:03:22.718
So imagine a tray that has no destination.

42
00:03:22.718 --> 00:03:27.507
It's just gonna go and go and go that
you have to essentially terminate or

43
00:03:27.507 --> 00:03:32.138
say I'm ready to finalize the stream
by adding in the subscribe lock,

44
00:03:32.138 --> 00:03:34.610
it won't even evaluate.

45
00:03:34.610 --> 00:03:40.840
So they're lazy by nature that they do not
evaluate, until you add a subscribe lock.

46
00:03:41.990 --> 00:03:49.742
So from here, I'm just going to
set this.message to the result.

47
00:04:00.167 --> 00:04:05.310
And now actually let's do this first.

48
00:04:06.360 --> 00:04:09.690
I'm taking the result and it knows
that it's definitely not a string.

49
00:04:09.690 --> 00:04:11.107
So I'm just gonna set this here.

50
00:04:14.167 --> 00:04:17.238
And I'm just gonna hard code this in.

51
00:04:17.238 --> 00:04:18.670
Save this.

52
00:04:18.670 --> 00:04:20.260
We'll go back.

53
00:04:20.260 --> 00:04:25.300
And I'm gonna just say
MARK MODE ACTIVATED.

54
00:04:25.300 --> 00:04:27.779
Back to the code, Slick.

55
00:04:27.779 --> 00:04:29.635
So we're just triggering that,
it's just hitting that subscribe block.

56
00:04:29.635 --> 00:04:33.731
Thing is I'm doing it, but I'm not really
updating anything because I'm just keep

57
00:04:33.731 --> 00:04:35.180
sending it to the same value.

58
00:04:36.310 --> 00:04:41.290
Now, what I can do is this.

59
00:04:41.290 --> 00:04:44.963
What is coming through the stream and

60
00:04:44.963 --> 00:04:50.415
I'll just go ahead and
trace this out real quick just so

61
00:04:50.415 --> 00:04:56.591
you can see what we can expect or
what's actually happening.

62
00:04:56.591 --> 00:05:02.689
So if I go here, and
I'm just going to console log the result.

63
00:05:06.268 --> 00:05:08.795
I'm gonna save this.

64
00:05:08.795 --> 00:05:10.943
Let's go back to the browser.

65
00:05:10.943 --> 00:05:17.053
And, I clicked it, the result itself.

66
00:05:17.053 --> 00:05:19.609
And I feel like this is
where I have to make it big.

67
00:05:19.609 --> 00:05:21.510
It's the mouse event.

68
00:05:21.510 --> 00:05:23.460
It's capturing the mouse event,
big surprise.

69
00:05:23.460 --> 00:05:25.030
It's a click.

70
00:05:25.030 --> 00:05:27.090
And it's just passing that through.

71
00:05:27.090 --> 00:05:29.830
It's just saying,
this was the origin of it, here you go.

72
00:05:31.080 --> 00:05:35.388
So it's important to say that
whatever you pass into one side,

73
00:05:35.388 --> 00:05:39.142
is gonna come out the other side,
until you change it.

74
00:05:39.142 --> 00:05:41.140
Which is what we're gonna do.

75
00:05:42.220 --> 00:05:47.641
So now what we can do,
is we can create a pipe for

76
00:05:47.641 --> 00:05:52.094
our observable stream to go through.

77
00:05:52.094 --> 00:05:59.540
So, obviously I don't particularly
care about this mouse event.

78
00:05:59.540 --> 00:06:00.150
I'm gonna throw it away.

79
00:06:02.620 --> 00:06:08.391
And so we'll take the event,
and instead I am,

80
00:06:10.723 --> 00:06:14.288
TANNER IS AN ELITE PLANNER.

81
00:06:15.421 --> 00:06:22.522
And then let's save this and
let's go into the code.

82
00:06:24.333 --> 00:06:28.875
And, I forgot to do something.

83
00:06:28.875 --> 00:06:32.634
So clearly, I am not an elite planner.

84
00:06:32.634 --> 00:06:33.842
Let me save this.

85
00:06:33.842 --> 00:06:35.246
Let's go back.

86
00:06:35.246 --> 00:06:40.098
And, It worked.

87
00:06:40.098 --> 00:06:43.620
If we look in here,
now what is coming in the stream?

88
00:06:43.620 --> 00:06:47.904
Well, this one I said, so I took that
event and I said, I don't want this,

89
00:06:47.904 --> 00:06:50.080
throw it away, instead return this.

90
00:06:50.080 --> 00:06:56.515
All we're doing is we're doing the little
switcheroo, a little fast and furious.

91
00:06:56.515 --> 00:07:01.136
One car pulls under the bridge,
and the exact same car but

92
00:07:01.136 --> 00:07:04.800
without Dominic drives off and
the con is on.

93
00:07:06.820 --> 00:07:13.149
So, what we can do as well, I just want
to show how we can stack operators.

94
00:07:13.149 --> 00:07:18.024
From here I can add in
another one which is filter,

95
00:07:18.024 --> 00:07:23.726
which is going to take the event
which is a keyboard event.

96
00:07:23.726 --> 00:07:27.716
And we're going to say,

97
00:07:27.716 --> 00:07:35.509
only allow this through
if the shift key is true.

98
00:07:35.509 --> 00:07:38.006
In other words,
if I'm holding the shift, allow it in.

99
00:07:38.006 --> 00:07:41.930
If not, then don't do anything.

100
00:07:41.930 --> 00:07:47.715
All right, so I'm filtering and

101
00:07:47.715 --> 00:07:53.291
if it does pass, then we will see

102
00:07:53.291 --> 00:07:58.880
just how elite Tanner truly is.

103
00:08:00.360 --> 00:08:03.270
And so I can simplify this just a bit.

104
00:08:05.990 --> 00:08:06.510
There we go.

105
00:08:08.400 --> 00:08:14.620
And let's save this into our browser.

106
00:08:15.920 --> 00:08:17.940
And you're gonna have to trust me here.

107
00:08:17.940 --> 00:08:23.097
I am truly clicking on this button.

108
00:08:23.097 --> 00:08:27.429
And I also, you're gonna have to trust
me that if I'm clicking on it and

109
00:08:27.429 --> 00:08:31.344
my other hand's over here,
clearly it's not on the shift key.

110
00:08:31.344 --> 00:08:35.428
Unless somehow I put my foot up
without being seen and do that.

111
00:08:35.428 --> 00:08:40.812
But I hold the shift key down, and
now you can see it passes through.

112
00:08:40.812 --> 00:08:44.220
So, very, very simple.

113
00:08:44.220 --> 00:08:48.882
But now think about what
if you had a stream of

114
00:08:48.882 --> 00:08:53.293
data in your application, and you said,

115
00:08:53.293 --> 00:08:59.570
when this data comes in,
I need it to be in this shape.

116
00:08:59.570 --> 00:09:01.771
But I need to know not only does
it need to be in the shape, but

117
00:09:01.771 --> 00:09:04.510
I need to know every single
time it's available.

118
00:09:04.510 --> 00:09:07.470
Well, here we are like this is it.

119
00:09:08.730 --> 00:09:10.450
This is how we do it.

120
00:09:11.840 --> 00:09:17.980
And so
that is the basic observable sequence.

