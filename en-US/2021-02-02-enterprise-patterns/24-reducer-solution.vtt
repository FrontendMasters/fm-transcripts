WEBVTT

1
00:00:00.390 --> 00:00:05.083
And so the challenge is to create
a reducer function that accepts state and

2
00:00:05.083 --> 00:00:09.790
action parameter and a switch statement
that evaluates the action type.

3
00:00:09.790 --> 00:00:13.446
And then based on that load,
read, create, update, delete.

4
00:00:13.446 --> 00:00:18.454
And then it calls an appropriate
method yet to be finished,

5
00:00:18.454 --> 00:00:24.380
that takes state and an action.payload and
then just returns state.

6
00:00:25.580 --> 00:00:30.486
So, I'm going to hop into the code.

7
00:00:30.486 --> 00:00:36.914
And I went ahead and
I finished this for the clients.

8
00:00:36.914 --> 00:00:44.204
And I want to just
illustrate something here.

9
00:00:46.832 --> 00:00:52.060
I'm gonna copy this and
I'm just gonna open a new file.

10
00:00:52.060 --> 00:00:54.140
And so this is in here.

11
00:00:54.140 --> 00:00:58.841
And I've taken everything
that I've done for clients.

12
00:00:58.841 --> 00:01:06.300
And now I'm going to what I'm looking at
is, I need to basically pick this up.

13
00:01:06.300 --> 00:01:13.791
And I need to essentially create
the equivalent for projects.

14
00:01:13.791 --> 00:01:18.412
And so typically what I'll
do is I'm just going to

15
00:01:18.412 --> 00:01:24.220
I almost hit the escape button,
that would have been bad.

16
00:01:24.220 --> 00:01:28.272
I'm just going to go through and

17
00:01:28.272 --> 00:01:34.735
I'm going to do a case sensitive find and
replace.

18
00:01:34.735 --> 00:01:39.979
And now I'm certain somebody's saying,

19
00:01:39.979 --> 00:01:44.353
well you shouldn't be doing that or

20
00:01:46.623 --> 00:01:49.579
When you should not be doing that rather,

21
00:01:49.579 --> 00:01:55.350
is that is because you're actually doing
a straight duplication of the code.

22
00:01:55.350 --> 00:02:00.841
And the differences is that
it's important to make

23
00:02:00.841 --> 00:02:07.190
the distinction between duplication and
convention.

24
00:02:07.190 --> 00:02:10.378
And so
a lot of times we look at things and

25
00:02:10.378 --> 00:02:15.115
we say like that's the exact
same thing over and over, and

26
00:02:15.115 --> 00:02:22.340
if it's doing the exact same thing, so
it's one thing to do the exact same thing.

27
00:02:22.340 --> 00:02:28.490
It's another thing to do it,
do the thing exactly the same.

28
00:02:28.490 --> 00:02:30.908
And so it's the difference
between doing the same thing and

29
00:02:30.908 --> 00:02:33.110
doing the thing exactly the same.

30
00:02:33.110 --> 00:02:40.400
So I think we're good here and
the should be good to go.

31
00:02:40.400 --> 00:02:46.820
Now over the course of me talking about
this convention versus repetition.

32
00:02:46.820 --> 00:02:49.906
Is that I've managed to just pick this up,

33
00:02:49.906 --> 00:02:54.370
change the one piece that was
different between the two.

34
00:02:54.370 --> 00:02:56.230
And I'm going to put it back in.

35
00:02:56.230 --> 00:03:02.260
Now, again,
what is the one thing that I changed?

36
00:03:02.260 --> 00:03:04.270
Well, it's the domain model.

37
00:03:05.820 --> 00:03:07.829
So the domain model is changing,

38
00:03:07.829 --> 00:03:12.500
but the actions in which we're
performing are typically the same.

39
00:03:12.500 --> 00:03:15.773
So for instance,
if you make a rest call, and

40
00:03:15.773 --> 00:03:20.441
you're saying give me all of
the projects or all of the clients.

41
00:03:20.441 --> 00:03:24.556
The mechanism to do that is
going to be exactly the same.

42
00:03:24.556 --> 00:03:29.121
Because it's consistent that
whatever library you're using,

43
00:03:29.121 --> 00:03:31.860
if it's axios, or it's HTTP client,

44
00:03:31.860 --> 00:03:37.390
it really any REST client is going to say,
this is how we talk to a REST client.

45
00:03:37.390 --> 00:03:40.660
And it's typically not
going to be any surprises.

46
00:03:40.660 --> 00:03:46.170
And so the takeaway here as it
applies to enterprise programming.

47
00:03:46.170 --> 00:03:50.839
Enterprise applications is
that identify the things that

48
00:03:50.839 --> 00:03:57.840
are conventionally equivalent and
automate that stuff, optimize that.

49
00:03:57.840 --> 00:04:01.310
Find the things that are not
conventionally equivalent.

50
00:04:01.310 --> 00:04:04.450
So what are the things that typically
changes from application to application?

51
00:04:05.820 --> 00:04:08.500
Well, the UI changes.

52
00:04:08.500 --> 00:04:11.742
And a lot of times
the business logic changes,

53
00:04:11.742 --> 00:04:18.440
you should spend 95% of your time in an
application focusing on those two pieces.

54
00:04:18.440 --> 00:04:24.950
So with that said, I'm just going to pick
this up, and I'm going to come down here.

55
00:04:24.950 --> 00:04:31.503
And I'm going to complete a challenge in

56
00:04:31.503 --> 00:04:37.670
one fell because I have a reference and

57
00:04:37.670 --> 00:04:44.520
I can follow so I'm gonna save this.

58
00:04:44.520 --> 00:04:46.870
And I'm not gonna save this.

59
00:04:46.870 --> 00:04:49.440
Don't save, but I will save this.

60
00:04:49.440 --> 00:04:50.600
So we had two questions.

61
00:04:52.250 --> 00:04:56.760
One, is what are which
is the best architecture

62
00:04:56.760 --> 00:05:01.230
folder structure that I've found?

63
00:05:01.230 --> 00:05:06.830
For me, I really, really, really, really,
really times 10 to the power of 10.

64
00:05:06.830 --> 00:05:13.530
I like how nx organizes
their file structure.

65
00:05:13.530 --> 00:05:19.550
And so that is in it's actually
baked into this and so this is.

66
00:05:19.550 --> 00:05:24.886
Not only even though we're doing
Angular nx supports react,

67
00:05:24.886 --> 00:05:30.937
next a bunch of stuff is that I'd
like to separate my applications into

68
00:05:30.937 --> 00:05:36.910
an Apps folder, and then all of
the shared functionality into libs.

69
00:05:37.950 --> 00:05:40.697
So that is a very basic folder structure,
but

70
00:05:40.697 --> 00:05:45.124
it allows you to have very thin
applications with very thin components.

71
00:05:45.124 --> 00:05:52.190
And then all of your business logic is
pushed away into ribs that you can share.

72
00:05:52.190 --> 00:05:56.953
And so, as the saying goes is that
you want thin clients that models

73
00:05:56.953 --> 00:06:02.073
the idea is to move your complexity
away from the point of consumption.

74
00:06:02.073 --> 00:06:07.176
Further away, so that you can start to
share it, or treat that complexity,

75
00:06:07.176 --> 00:06:11.884
really turn that into functionality,
that then becomes a platform,

76
00:06:11.884 --> 00:06:17.540
in which you're able to serve,
additional applications and modules, etc.

77
00:06:17.540 --> 00:06:20.130
That was,
felt like it was onto something there.

78
00:06:20.130 --> 00:06:26.750
The next question is, are we going to deal
with code duplication, in our projects?

79
00:06:26.750 --> 00:06:31.260
And the answer is not directly.

80
00:06:32.720 --> 00:06:37.830
But in a way we already have
is that the way to avoid

81
00:06:37.830 --> 00:06:42.700
code duplication is to
not have hidden state.

82
00:06:44.070 --> 00:06:50.100
Now have nested logic and do not violate
the single responsibility principle.

83
00:06:50.100 --> 00:06:55.164
Now with that said, there are tools
to check for copy paste detection

84
00:06:55.164 --> 00:07:00.730
to get CBD or whatever but I think
that got hijacked by something else.

85
00:07:00.730 --> 00:07:02.503
Copy Paste si p d and so

86
00:07:02.503 --> 00:07:08.270
there are some tools to see if
there's is code duplication.

87
00:07:08.270 --> 00:07:11.755
And so I would say, you know,
if that's a problem,

88
00:07:11.755 --> 00:07:16.330
then you can run some kind of
static analysis on your code.

89
00:07:16.330 --> 00:07:20.255
But I think by having
a proper architecture and

90
00:07:20.255 --> 00:07:27.530
avoiding the axis of evil, that it really
minimizes on that potential to do so.

91
00:07:27.530 --> 00:07:30.251
The next question is, after the iterators,

92
00:07:30.251 --> 00:07:33.910
could you recap how each part
is related to reducer pattern?

93
00:07:34.990 --> 00:07:37.060
After the iterators,
I will be happy to do that.

