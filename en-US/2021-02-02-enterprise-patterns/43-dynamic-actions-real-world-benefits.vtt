WEBVTT

1
00:00:00.610 --> 00:00:07.645
I've hard coded some actions in, I'm
loading them, I'm cycling through them.

2
00:00:07.645 --> 00:00:12.278
But what if we actually
took actions that didn't

3
00:00:12.278 --> 00:00:16.798
even exist in the application
at that time, and

4
00:00:16.798 --> 00:00:22.109
we were able to load them in so
they could really come from

5
00:00:22.109 --> 00:00:29.310
anywhere is that somebody could send
me a set of actions in the mail.

6
00:00:29.310 --> 00:00:33.940
And I could type them out or
load them in, and they could go.

7
00:00:33.940 --> 00:00:38.120
So now what we're doing is
we're loading in an action.

8
00:00:39.240 --> 00:00:45.430
And then we're able to like a random
action anywhere from in the world.

9
00:00:45.430 --> 00:00:47.560
Pull it in and dispatched.

10
00:00:47.560 --> 00:00:50.452
So not pre hardcoded actions, but

11
00:00:50.452 --> 00:00:55.700
let's imagine just dynamic
actions from anywhere.

12
00:00:55.700 --> 00:00:59.256
So what I have in the code,
you can check it,

13
00:00:59.256 --> 00:01:03.790
out is I'm just fetching
a single action from a server.

14
00:01:04.820 --> 00:01:07.430
I'm loading it and
then I'm going to dispatch it.

15
00:01:08.890 --> 00:01:13.790
So if we go to the manual cycle,
we'll actually go to the dynamic step.

16
00:01:13.790 --> 00:01:15.780
I'm gonna refresh this.

17
00:01:15.780 --> 00:01:19.980
And I'm going to actually
just pull this up.

18
00:01:19.980 --> 00:01:24.743
If we go to the Network tab,
I'm going to fetch an action and so

19
00:01:24.743 --> 00:01:29.610
it's loading an action in And
you can see here in the response.

20
00:01:31.620 --> 00:01:33.845
It's an action coming from this endpoint.

21
00:01:36.611 --> 00:01:42.870
Now what I can do is, in fact, I think
I might even be able to change this,

22
00:01:42.870 --> 00:01:47.820
but we'll go fetch or
let's dispatch this again.

23
00:01:47.820 --> 00:01:48.350
Oops.

24
00:01:48.350 --> 00:01:49.280
Let me refresh this.

25
00:01:49.280 --> 00:01:55.667
I may have messed this up a little bit,
but fetch dispatch.

26
00:01:55.667 --> 00:01:59.123
So now I was able to pull this in and

27
00:01:59.123 --> 00:02:05.420
I was able to dispatch,
I wonder what would happen.

28
00:02:05.420 --> 00:02:06.760
I'm going to be.

29
00:02:06.760 --> 00:02:10.095
Rolling the dice here, but

30
00:02:10.095 --> 00:02:15.520
if I go create let me go set this to No.

31
00:02:15.520 --> 00:02:20.950
And I'm going to call this
individual please work.

32
00:02:23.290 --> 00:02:26.162
I am begging you If this doesn't work,

33
00:02:26.162 --> 00:02:30.260
it doesn't matter, but
let's just see what happens.

34
00:02:31.370 --> 00:02:33.010
And it did not work.

35
00:02:33.010 --> 00:02:35.910
Let's see if maybe I threw an air not,
well.

36
00:02:37.850 --> 00:02:40.950
&gt;&gt; Did Ivy know who was with the strings?

37
00:02:42.440 --> 00:02:45.270
&gt;&gt; So maybe it's because
my ID note wasn't string.

38
00:02:45.270 --> 00:02:45.829
So let's.

39
00:02:47.140 --> 00:02:48.874
Actually just delete that.

40
00:02:48.874 --> 00:02:55.678
Please really work.

41
00:03:02.662 --> 00:03:05.168
And I believe it creates.

42
00:03:05.168 --> 00:03:11.610
And [LAUGH]
yes.

43
00:03:11.610 --> 00:03:12.440
So that wa it.

44
00:03:12.440 --> 00:03:14.170
So thank you very much.

45
00:03:14.170 --> 00:03:18.295
And so now I was able to take and

46
00:03:18.295 --> 00:03:24.080
over here dynamically create an action.

47
00:03:25.440 --> 00:03:26.980
And then send it in.

48
00:03:26.980 --> 00:03:27.490
And it worked.

49
00:03:28.540 --> 00:03:34.318
So now, I think we know where kind
of this next logical step is,

50
00:03:34.318 --> 00:03:39.240
like, what if you could load
in more than one action?

51
00:03:40.390 --> 00:03:42.890
Well, we can.

52
00:03:42.890 --> 00:03:44.860
And I think that's a fair request.

53
00:03:44.860 --> 00:03:45.910
So.

54
00:03:45.910 --> 00:03:52.070
Thank you for making it fetch and we'll
actually do the dynamic cycle here fetch.

55
00:03:52.070 --> 00:03:58.500
And so
all I have now is a number of steps.

56
00:03:58.500 --> 00:04:03.230
And so just to keep it simple,
it's select, select select, but

57
00:04:03.230 --> 00:04:05.018
you could actually do.

58
00:04:05.018 --> 00:04:11.070
Create select update delete.

59
00:04:11.070 --> 00:04:16.699
So just imagine here that you can
actually dynamically load in,

60
00:04:16.699 --> 00:04:22.130
in dispatch, any number of
actions to create this sequence.

61
00:04:23.190 --> 00:04:25.550
So dispatch.

62
00:04:25.550 --> 00:04:33.700
And it is now pulling these actions
over the wire via this endpoint.

63
00:04:33.700 --> 00:04:39.511
And we're able to automate
the essentially a sequence

64
00:04:39.511 --> 00:04:46.090
of user interactions via these
actions that we are creating.

65
00:04:48.280 --> 00:04:52.556
And so, just to kind of stop and

66
00:04:52.556 --> 00:04:56.339
summarize, where we are,

67
00:04:56.339 --> 00:05:01.602
we are talking about creating time and

68
00:05:01.602 --> 00:05:06.372
space by managing complexity, so

69
00:05:06.372 --> 00:05:15.080
we created a essentially
a reducer Redux from scratch.

70
00:05:15.080 --> 00:05:21.380
And then we started talking about
how to manage time with observables.

71
00:05:21.380 --> 00:05:24.822
And then in this example over here,

72
00:05:24.822 --> 00:05:29.759
that we've separated out
It created distance from

73
00:05:29.759 --> 00:05:35.613
the actual user interaction
into the logic that handles it,

74
00:05:35.613 --> 00:05:40.549
in so much that we're sideloading or
simulating or

75
00:05:40.549 --> 00:05:43.880
reproducing those actions.

76
00:05:43.880 --> 00:05:49.308
and then manipulating Or recreating
those actions in our application

77
00:05:49.308 --> 00:05:54.440
without actually having to
click anything on the keyboard.

78
00:05:54.440 --> 00:05:59.781
So again, if I just dispatch
my hands off the keyboard,

79
00:05:59.781 --> 00:06:04.556
and it's still replicating
with high fidelity,

80
00:06:04.556 --> 00:06:08.440
a real user interaction and so.

81
00:06:08.440 --> 00:06:10.680
The question is, what does this mean?

82
00:06:12.650 --> 00:06:19.363
What can we do with this
particular kind of paradigm or

83
00:06:19.363 --> 00:06:24.590
this possibility that I'm presenting.

84
00:06:25.930 --> 00:06:31.988
So if you have the ability
To recreate state, or

85
00:06:31.988 --> 00:06:38.050
recreate a user interaction
at any given time.

86
00:06:40.660 --> 00:06:44.785
Imagine if you had an application,

87
00:06:44.785 --> 00:06:50.430
that was when it broke or
when there was an error.

88
00:06:51.850 --> 00:06:58.530
It would capture that state and
the last known good state.

89
00:06:58.530 --> 00:07:02.383
The current state, and then the action,

90
00:07:02.383 --> 00:07:08.450
that transition from one state to another,
and it pulled it out.

91
00:07:08.450 --> 00:07:14.140
And it was delivered to you what
that would allow you to do,

92
00:07:14.140 --> 00:07:18.788
is then to load your state
into an application,

93
00:07:18.788 --> 00:07:24.130
play that action, and
recreate the action or the bug or

94
00:07:24.130 --> 00:07:29.720
the faulty action that puts
your app in a bad state.

95
00:07:29.720 --> 00:07:33.971
And so now if we talk about,
if you know everything about a system and

96
00:07:33.971 --> 00:07:35.612
the rules that govern it,

97
00:07:35.612 --> 00:07:40.870
Then you can know everything about
that system in forward and reverse.

98
00:07:40.870 --> 00:07:43.350
And so I've actually done this.

99
00:07:43.350 --> 00:07:47.853
And there are a few libraries that exist.

100
00:07:47.853 --> 00:07:52.893
There is a company log rocket that has
actually built in some tooling for

101
00:07:52.893 --> 00:07:56.934
this, that when you throw
an error in your application.

102
00:07:56.934 --> 00:08:01.874
Using a meta reducer is that it
captures those known states and

103
00:08:01.874 --> 00:08:07.800
the action that caused it and
it just sends it out to the server.

104
00:08:07.800 --> 00:08:11.452
You can then go back in
sideload that state,

105
00:08:11.452 --> 00:08:15.509
play that action and
see what exactly happened.

106
00:08:17.000 --> 00:08:19.800
To your application and how it broke.

107
00:08:20.950 --> 00:08:25.090
So that's one very,
very compelling use case is that

108
00:08:25.090 --> 00:08:30.490
I simply need to figure out
what happened and why it broke.

109
00:08:30.490 --> 00:08:34.810
A second use case is that imagine.

110
00:08:34.810 --> 00:08:38.690
If you had a bunch of repetitive task.

111
00:08:39.860 --> 00:08:45.560
Well, you could essentially create
a macro that would capture those actions.

112
00:08:45.560 --> 00:08:49.617
So think about if you
were doing something and

113
00:08:49.617 --> 00:08:55.487
you had like a little record button,
I want to just record this and

114
00:08:55.487 --> 00:09:00.078
all it did was capture
The actions being emitted and

115
00:09:00.078 --> 00:09:04.454
I would save those into an array and
then you could

116
00:09:04.454 --> 00:09:09.300
just replay them and
automate that particular task.

117
00:09:10.320 --> 00:09:13.680
So this is essentially what
I have done here, is that.

118
00:09:13.680 --> 00:09:15.730
Imagine just capturing
an array of actions.

119
00:09:15.730 --> 00:09:18.570
And then being able to say
I just want to play this.

120
00:09:18.570 --> 00:09:22.798
So now you have the ability
to accelerate and

121
00:09:22.798 --> 00:09:28.741
automate repetitive tasks
because you've created space and

122
00:09:28.741 --> 00:09:34.246
time, from the actual human
interaction to the result.

123
00:09:34.246 --> 00:09:38.488
Until eventually It just looks
something very, very, very,

124
00:09:38.488 --> 00:09:43.531
very quick, almost to the point where
it just, you can't even manage it or

125
00:09:43.531 --> 00:09:49.660
you can't even really even process it
because it's just boop, it just happens.

126
00:09:49.660 --> 00:09:52.869
And so I feel like this
could be a little faster but

127
00:09:52.869 --> 00:09:57.320
you can imagine if you turn
this up to like 5 seconds.

128
00:09:57.320 --> 00:10:02.399
And the third application that I

129
00:10:02.399 --> 00:10:11.100
want to present is this
idea of a thin component.

130
00:10:11.100 --> 00:10:18.407
And so in this angular application
that we're seeing here,

131
00:10:18.407 --> 00:10:23.563
that Under the hood, it is absolutely true

132
00:10:23.563 --> 00:10:29.740
that we are using Redux to
manage all of this state.

133
00:10:31.050 --> 00:10:34.630
And so there's no secret about that.

134
00:10:34.630 --> 00:10:39.670
There's no way that we could
do these particular things

135
00:10:39.670 --> 00:10:47.630
With out having some form of Redux that
allows us to create this time and space.

136
00:10:47.630 --> 00:10:53.540
Now what I haven't mentioned
is that the version or

137
00:10:53.540 --> 00:10:58.626
the Redux implementation
of this Is not even

138
00:10:58.626 --> 00:11:04.262
in the application itself
is that I've actually

139
00:11:04.262 --> 00:11:10.447
taken the version of Redux
the implementation of it,

140
00:11:10.447 --> 00:11:16.990
and I've put it into a node
server with socket IO.

141
00:11:16.990 --> 00:11:24.362
What that means is that I can
just open up Another window and

142
00:11:24.362 --> 00:11:29.025
because now I'm taking the state and

143
00:11:29.025 --> 00:11:34.720
imagine the beginning of the workshop.

144
00:11:34.720 --> 00:11:36.920
We're moving state.

145
00:11:36.920 --> 00:11:40.208
We started with a hidden
state in a function And

146
00:11:40.208 --> 00:11:45.521
we've just been systematically moving
it away from our component layer so

147
00:11:45.521 --> 00:11:48.830
that they become as thin
as possible thinner.

148
00:11:51.230 --> 00:11:56.975
And the question I asked myself is what if
we actually took our application state and

149
00:11:56.975 --> 00:12:00.189
just ripped it out of
the application itself.

150
00:12:01.550 --> 00:12:06.607
And we put it into a server
that we could then use

151
00:12:06.607 --> 00:12:12.317
observable streams WebSockets
to then communicate

152
00:12:12.317 --> 00:12:17.560
that state to a very, very thin client.

153
00:12:17.560 --> 00:12:23.531
And so now what we can do
Is things like this.You'll

154
00:12:23.531 --> 00:12:31.110
notice here that I am interacting
with the left application.

155
00:12:31.110 --> 00:12:38.390
And as I do this, the right hand
application is updating as well.

156
00:12:40.640 --> 00:12:43.600
Now think about this two separate
applications time and space.

157
00:12:43.600 --> 00:12:48.722
They're totally separated in yet
because we move the state

158
00:12:48.722 --> 00:12:53.334
into a even higher abstraction
that we are able to keep

159
00:12:53.334 --> 00:12:58.355
these in sync because We've
simplified state management

160
00:12:58.355 --> 00:13:04.160
across both of these,
they're sharing the same state.

161
00:13:04.160 --> 00:13:08.663
And then we have found a way to
effectively communicate via web

162
00:13:08.663 --> 00:13:12.150
sockets and observable streams.

163
00:13:12.150 --> 00:13:16.418
And then because of this,

164
00:13:16.418 --> 00:13:25.151
we can now Interact within
multiple applications and

165
00:13:25.151 --> 00:13:29.240
yet they are connected.

166
00:13:29.240 --> 00:13:31.650
And so now what we've done is
we've taken time and space.

167
00:13:33.120 --> 00:13:39.224
We're starting to do interesting things
by abstracting these things out in such

168
00:13:39.224 --> 00:13:45.160
a way That we can do things like imagine,
if you had a user that needed support.

169
00:13:46.340 --> 00:13:51.990
Well, it would not be hard to
pull in their application state.

170
00:13:53.380 --> 00:14:00.110
And then also now you're sharing it and
somebody remotely is providing support.

171
00:14:00.110 --> 00:14:03.660
From one application to another.

172
00:14:05.090 --> 00:14:10.356
Now, to top this off, and
just to wrap this up,

173
00:14:10.356 --> 00:14:15.097
I want to show you
the version of Redux that I

174
00:14:15.097 --> 00:14:19.358
am actually using in my application.

175
00:14:19.358 --> 00:14:27.120
And hopefully,
this is going to look very familiar.

176
00:14:27.120 --> 00:14:28.200
So this is in node.

177
00:14:29.920 --> 00:14:36.590
So our actions, I have some sample data
clients, new client, initial state.

178
00:14:37.670 --> 00:14:43.468
I have a store I

179
00:14:43.468 --> 00:14:48.890
have actions or rather reducer functions.

180
00:14:48.890 --> 00:14:54.960
So select client, clear client,
create client, update client.

181
00:14:56.710 --> 00:15:00.219
This should look very familiar.

182
00:15:00.219 --> 00:15:05.198
This reducer and then all I had to do

183
00:15:05.198 --> 00:15:10.350
to enable this was drop in about 20

184
00:15:10.350 --> 00:15:14.815
maybe 30 lines of node code,

185
00:15:14.815 --> 00:15:19.968
socket IO code specifically to make

186
00:15:19.968 --> 00:15:28.412
this available to the application
into just pull this in.

187
00:15:28.412 --> 00:15:33.109
And so effectively,
this application right here,

188
00:15:33.109 --> 00:15:38.447
is stateless because I've moved
all of that Into a server,

189
00:15:38.447 --> 00:15:43.571
that we can now share,
via real time connected clients,

190
00:15:43.571 --> 00:15:47.947
using, a reducer, or
a redux implementation,

191
00:15:47.947 --> 00:15:53.990
that we use the four elements
of programming, to bill.

192
00:15:53.990 --> 00:15:58.000
And so, with that demo complete,
this is where.

193
00:15:59.660 --> 00:16:02.849
When we take and
we embrace first principles,

194
00:16:02.849 --> 00:16:06.444
when we start to stack these
up in the proper way, and

195
00:16:06.444 --> 00:16:11.110
we really truly understand them,
then we can do things like this.

196
00:16:11.110 --> 00:16:16.106
And for me personally,
I can't think of anything more

197
00:16:16.106 --> 00:16:21.754
enterprising than doing real
time distributed Applications

198
00:16:21.754 --> 00:16:26.590
in the cloud and so
we are just right at that door.

199
00:16:26.590 --> 00:16:30.963
But this is what managing
state control flow and

200
00:16:30.963 --> 00:16:34.569
code volume will kind of pave the way and

201
00:16:34.569 --> 00:16:39.180
set the foundation for
you to do things like this.

