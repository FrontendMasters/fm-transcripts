WEBVTT

1
00:00:00.800 --> 00:00:03.935
Now, we're gonna take a quick
little segue here, and

2
00:00:03.935 --> 00:00:07.835
I wanna talk about immutable operations,
this is very important.

3
00:00:10.870 --> 00:00:18.117
So if you've ever used array, push, I'm
guilty, I've done it a bazillion times.

4
00:00:18.117 --> 00:00:20.880
Unfortunately, that's mutable.

5
00:00:22.220 --> 00:00:22.720
That's bad.

6
00:00:24.450 --> 00:00:31.539
If you ever needed to update
something in an array, array.

7
00:00:31.539 --> 00:00:32.420
splice.

8
00:00:32.420 --> 00:00:37.760
We just chop some up put something
else in, but it is mutable.

9
00:00:39.080 --> 00:00:43.909
Now if you wanna delete
something similar Splice it

10
00:00:43.909 --> 00:00:49.010
out you're done and
these are mutable operations.

11
00:00:49.010 --> 00:00:49.510
Now.

12
00:00:51.774 --> 00:00:54.868
Before I go to this next slide,

13
00:00:54.868 --> 00:01:01.410
I wanna say that it
Initially when I started.

14
00:01:01.410 --> 00:01:03.150
Learning about immutable operations.

15
00:01:03.150 --> 00:01:06.810
I'm like, my gosh,
that's gonna be so hard to do.

16
00:01:06.810 --> 00:01:11.501
I have to learn this new fancy way
to change these things without

17
00:01:11.501 --> 00:01:15.140
really changing them, and
I had a bad attitude.

18
00:01:16.360 --> 00:01:20.830
And then I realized, that it's actually.

19
00:01:20.830 --> 00:01:24.039
The same amount of work if not less and so

20
00:01:24.039 --> 00:01:28.125
Dan Abramoff has a free
egghead course on Redux and

21
00:01:28.125 --> 00:01:32.693
I believe it's like video 16,
17 or 18 in there,

22
00:01:32.693 --> 00:01:39.016
he starts talking about the immutable
equivalent of the immutable operate or

23
00:01:39.016 --> 00:01:43.392
mutable operations, and
it was just like [SOUND] And so

24
00:01:43.392 --> 00:01:48.546
this is where I realized that to
switch from a mutable mindset,

25
00:01:48.546 --> 00:01:53.746
to an immutable mindset,
really was not much of a shift at all.

26
00:01:53.746 --> 00:01:57.414
It's just using a slightly
different toolset,

27
00:01:57.414 --> 00:02:03.430
is well is I'm imagining somebody Is
saying, Well, why does this matter?

28
00:02:03.430 --> 00:02:08.188
Like why would we actually care about
doing an immutable operation versus

29
00:02:08.188 --> 00:02:10.640
immutable operation?

30
00:02:10.640 --> 00:02:13.180
And there's a couple reasons.

31
00:02:13.180 --> 00:02:17.940
So one, and
the big one is that in JavaScript.

32
00:02:19.540 --> 00:02:23.270
The JavaScript runtime,
it garbage collects on,

33
00:02:23.270 --> 00:02:28.215
essentially memory pointers and
that when you create a variable and

34
00:02:28.215 --> 00:02:34.027
you assign something to it, you're
basically allocating a piece of memory and

35
00:02:34.027 --> 00:02:39.720
you're saying, in this memory,
I'm going to store this thing.

36
00:02:39.720 --> 00:02:44.201
Well if you want to evaluate
if that's changed or not, and

37
00:02:44.201 --> 00:02:49.322
you've done it via a mutable operation,
that you actually have to

38
00:02:49.322 --> 00:02:55.040
inspect the contents of that memory
space to see if it's changed.

39
00:02:55.040 --> 00:02:57.853
So where this became a real problem, and

40
00:02:57.853 --> 00:03:02.090
this is where I think react
really changed the game.

41
00:03:02.090 --> 00:03:03.750
Is Angular j s.

42
00:03:05.130 --> 00:03:07.729
It would essentially when
it was evaluating the DOM,

43
00:03:07.729 --> 00:03:10.680
it would go through and
do this deep comparison.

44
00:03:10.680 --> 00:03:17.023
Now imagine you have an array of, I don't
know, let's just say 100 objects and

45
00:03:17.023 --> 00:03:21.659
you need to figure out if an object
in that array has changed.

46
00:03:22.750 --> 00:03:28.499
Well, if you mutate the object, the only
way that you can know that a change is

47
00:03:28.499 --> 00:03:35.610
you have to compare it with the previous
value that can get very, very expensive.

48
00:03:35.610 --> 00:03:41.330
On the other hand, if you return a new
object, you get a new memory pointer and

49
00:03:41.330 --> 00:03:46.259
so if you want to know if something
has changed and you've done it in

50
00:03:46.259 --> 00:03:52.610
an immutable fashion, all you have
to do is compare the memory pointer.

51
00:03:52.610 --> 00:03:55.217
And if the memory pointer has changed,

52
00:03:55.217 --> 00:03:59.890
then you know something has happened and
you just refresh.

53
00:03:59.890 --> 00:04:04.320
And so purely from a garbage
collection standpoint, from a.

54
00:04:04.320 --> 00:04:05.590
Did this change or not?

55
00:04:05.590 --> 00:04:07.960
And do I need to do a deep comparison?

56
00:04:07.960 --> 00:04:10.320
Evaluating the memory pointer.

57
00:04:10.320 --> 00:04:15.189
Being set by returning a new object
versus mutating an existing object

58
00:04:15.189 --> 00:04:18.640
counterintuitively is a lot faster.

59
00:04:18.640 --> 00:04:25.830
Now, the other piece is that when
you have These immutable operations.

60
00:04:25.830 --> 00:04:29.110
In other words, I have this thing
I'm returning this new result.

61
00:04:29.110 --> 00:04:32.700
And it allows you to memorize
the previous result.

62
00:04:32.700 --> 00:04:35.054
And then you can start to kind
of time travel of like this was

63
00:04:35.054 --> 00:04:35.980
the previous result.

64
00:04:35.980 --> 00:04:37.750
This was the previous result.

65
00:04:37.750 --> 00:04:40.560
And you're able to just say,
I did this thing.

66
00:04:40.560 --> 00:04:43.550
I didn't want it and
I'm going to just put it back.

67
00:04:44.810 --> 00:04:46.950
And no harm, nothing is done.

68
00:04:46.950 --> 00:04:51.169
So a really good example of this is
that if you're dealing with a form,

69
00:04:51.169 --> 00:04:55.886
and you've bound an object to it, and
you just start typing, well, anything

70
00:04:55.886 --> 00:05:00.410
that has a reference to that object is
going to start changing in your page.

71
00:05:00.410 --> 00:05:05.030
So I don't know if you've ever seen
this but you basically dump like a user.

72
00:05:05.030 --> 00:05:07.490
Into a form, you start typing and
all of a sudden,

73
00:05:07.490 --> 00:05:10.480
it starts changing in the list over here.

74
00:05:10.480 --> 00:05:14.210
The reason being is because they're
pointing to the same memory pointer.

75
00:05:14.210 --> 00:05:20.137
And so, how you solve that is
if shared mutable state is bad,

76
00:05:20.137 --> 00:05:25.750
and shared state is okay and
mutable state is okay.

77
00:05:25.750 --> 00:05:28.210
It's when you get them
together that things go wrong.

78
00:05:28.210 --> 00:05:32.316
How you solve that problem is you
make if you have to do a mutation,

79
00:05:32.316 --> 00:05:37.244
like around a form is that you break that
connection where it's you have shared

80
00:05:37.244 --> 00:05:39.360
state or mutable state.

81
00:05:39.360 --> 00:05:43.295
If you have shared mutable state,
you need to make it not shared and

82
00:05:43.295 --> 00:05:48.780
mutable and so what you can do here is as
you pass something into like a component.

83
00:05:48.780 --> 00:05:53.180
You just create a copy of it,
you can mutate the copy.

84
00:05:53.180 --> 00:05:56.100
And then when you're done,
you can either save it or throw it away.

85
00:05:56.100 --> 00:06:00.230
So this is why this was a three
minute kind of a dialogue.

86
00:06:00.230 --> 00:06:02.620
why this matters is for
performance reasons.

87
00:06:02.620 --> 00:06:08.010
It's for having kind of a ledger or
being able to undo things and It

88
00:06:08.010 --> 00:06:15.430
prevents some really interesting things in
terms of like distributed state et cetera.

89
00:06:15.430 --> 00:06:21.070
So with that said without further ado,
immutable operations.

90
00:06:21.070 --> 00:06:26.312
So let's take push and we're going
to replace this with concat And

91
00:06:26.312 --> 00:06:30.992
a helpful way that you can find
out is this immutable or not,

92
00:06:30.992 --> 00:06:34.940
is if you go to
the MDN Mozilla Developer Network.

93
00:06:34.940 --> 00:06:39.159
So this is typically where
if I'm reading up on an API,

94
00:06:39.159 --> 00:06:42.553
this is what I use.And
you look at concat and

95
00:06:42.553 --> 00:06:47.170
it says concat method is used
to merge two or more arrays.

96
00:06:47.170 --> 00:06:48.630
So far, so good.

97
00:06:48.630 --> 00:06:55.360
This method does not change the existing
arrays, but instead returns a new array.

98
00:06:55.360 --> 00:07:00.515
And that is the key right there as
you're reading the documentation

99
00:07:00.515 --> 00:07:05.780
on an operation or a method,
and it says instead returns.

100
00:07:05.780 --> 00:07:08.340
You can be like, aha, that's immutable.

101
00:07:08.340 --> 00:07:13.730
Now, on the example at the top,
what we have is we have brackets.

102
00:07:13.730 --> 00:07:16.865
So this is shorthand is we're
saying create a new array, and

103
00:07:16.865 --> 00:07:19.950
then spread out these properties
inside of this new array.

104
00:07:19.950 --> 00:07:23.820
So this is just a fancy
newfangled way to do this.

105
00:07:23.820 --> 00:07:26.120
This is actually what I use quite often.

106
00:07:26.120 --> 00:07:30.828
And essentially you're, instead of having
to use the operator to create the rate,

107
00:07:30.828 --> 00:07:35.494
you're just doing the shorthand and just
spreading everything out in sight of it.

108
00:07:35.494 --> 00:07:43.490
Next, all right,
I need to update an item in a collection.

109
00:07:43.490 --> 00:07:44.860
How do I do that?

110
00:07:44.860 --> 00:07:50.020
Well two ways are you actually
use a combination of two methods.

111
00:07:50.020 --> 00:07:54.000
So the first is map and
then the second is object data science.

112
00:07:54.000 --> 00:07:59.125
So, the map method creates a new so
anytime you create a new

113
00:07:59.125 --> 00:08:04.144
returns a new array with
the results of calling a provided

114
00:08:04.144 --> 00:08:09.163
function on every element in this array so
it loops over,

115
00:08:09.163 --> 00:08:15.310
it performs a function and
then it return a brand new array.

116
00:08:15.310 --> 00:08:16.700
Immutable.

117
00:08:16.700 --> 00:08:21.500
Now, object that assign is
used to copy all the immutable

118
00:08:21.500 --> 00:08:26.850
own properties from one
source basically to another.

119
00:08:26.850 --> 00:08:28.320
It will return the target object.

120
00:08:28.320 --> 00:08:31.987
So in this case, if you look at object dot
assign, we're starting with a brand new

121
00:08:31.987 --> 00:08:35.460
object, the curly braces, and
it's just copying everything over to that.

122
00:08:35.460 --> 00:08:39.080
So this is kind of you can
also use a spread operator but

123
00:08:39.080 --> 00:08:40.708
this is how this works.

124
00:08:40.708 --> 00:08:47.770
Now this works for a shallow copy.

125
00:08:49.470 --> 00:08:52.510
For me personally,
I've never had this be a problem.

126
00:08:52.510 --> 00:08:56.236
In other words, if you need a copy
an array of complex objects and

127
00:08:56.236 --> 00:09:01.150
you need to actually clone the complex
objects, like there's libraries for that.

128
00:09:01.150 --> 00:09:07.015
So I would say rammed a Immutable JS,
but if you don't need that or

129
00:09:07.015 --> 00:09:13.523
you have fairly shallow objects,
then I recommend just using object and

130
00:09:13.523 --> 00:09:18.130
assign or
spread the object into a new array again.

131
00:09:19.220 --> 00:09:23.812
Every time I bring this up somebody
does mention that it is it's only

132
00:09:23.812 --> 00:09:27.950
a shallow copy and
this is true in a lot of cases.

133
00:09:27.950 --> 00:09:31.690
This will be fine if you
have a fairly flat data.

134
00:09:31.690 --> 00:09:36.350
Then it's no problem at all,
barely an inconvenience.

135
00:09:36.350 --> 00:09:44.340
Now delete this one is super easy filter.

136
00:09:46.060 --> 00:09:50.657
The filter method creates drumroll the new
array with all the elements that pass

137
00:09:50.657 --> 00:09:54.350
the test implemented by
the provided function.

138
00:09:54.350 --> 00:09:59.256
And so if you wanna delete something, all
you do is you say, hey, filter over this

139
00:09:59.256 --> 00:10:04.450
array and return everything that does not
match the thing that I want to delete.

140
00:10:04.450 --> 00:10:05.020
Boom.

141
00:10:05.020 --> 00:10:05.550
Done.

142
00:10:05.550 --> 00:10:06.180
Problem solved.

143
00:10:07.480 --> 00:10:08.960
All right.

144
00:10:08.960 --> 00:10:12.110
One last kind of bonus thing
that I think is interesting.

145
00:10:12.110 --> 00:10:17.390
Occasionally I'll use it that
the object dot freeze method.

146
00:10:18.520 --> 00:10:22.312
If you want to,
if you're developing something or

147
00:10:22.312 --> 00:10:27.880
you wanna free something from being
mutated, then this is a way to do this.

148
00:10:27.880 --> 00:10:32.940
So, In essence,
the object is made effectively immutable.

149
00:10:32.940 --> 00:10:37.654
So some it's just cool to know it's
there if you want to test like,

150
00:10:37.654 --> 00:10:40.020
hey, like, am I mutating this?

151
00:10:40.020 --> 00:10:41.660
Well freeze it and see

