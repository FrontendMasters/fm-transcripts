WEBVTT

1
00:00:00.030 --> 00:00:02.090
Let's talk about decisions and
conditionals.

2
00:00:02.090 --> 00:00:05.490
This is kind of the class,
shall I stay or shall I go?

3
00:00:05.490 --> 00:00:07.910
If I stay there will be trouble,
if I go there will be double.

4
00:00:07.910 --> 00:00:11.398
This is a very, very simple module.

5
00:00:11.398 --> 00:00:15.647
It just comes down to
if something is true or

6
00:00:15.647 --> 00:00:19.670
false, then you perform some actions.

7
00:00:19.670 --> 00:00:23.000
So does true equal true?

8
00:00:23.000 --> 00:00:27.450
Does batman.secretidentity == Bruce Wayne?

9
00:00:27.450 --> 00:00:31.940
Does client ID equal payload ID or not?

10
00:00:31.940 --> 00:00:37.873
And so all of the conditions that
we encounter in our code and

11
00:00:37.873 --> 00:00:45.360
ironically in life, really comes down
to is this condition true or false?

12
00:00:46.520 --> 00:00:51.676
Even when you are looking at,
I have multiple options to take,

13
00:00:51.676 --> 00:00:58.314
I'm at a crossroads and should I go here
or should I take door number 1, 2 or 3?

14
00:00:58.314 --> 00:01:03.522
Well ultimately, your choice of
that door is going to depend on you

15
00:01:03.522 --> 00:01:09.289
determining the condition that's
going to affect your final decision,

16
00:01:09.289 --> 00:01:14.140
and if that's true or false,
then that affects your action.

17
00:01:15.300 --> 00:01:19.701
So one of the most common
ways that I use conditions,

18
00:01:19.701 --> 00:01:24.503
is in a container component
if I'm saving an object, and

19
00:01:24.503 --> 00:01:30.300
I'll just say does this have
a client ID or does this have an ID?

20
00:01:30.300 --> 00:01:36.040
If it does, then I update it,
else, I will create it.

21
00:01:36.040 --> 00:01:43.010
And so here I'm saying, if this doesn't
have a client ID, do this else do this.

22
00:01:44.370 --> 00:01:49.320
Now another form of this and as we start
to move into kind of this brave new world

23
00:01:49.320 --> 00:01:54.500
of type script with kind of functional
programming in the middle of operations,

24
00:01:54.500 --> 00:01:57.338
is that you will see
this ternary operator.

25
00:01:57.338 --> 00:02:04.336
Which is the conditioned exists
around client ID equals payload ID.

26
00:02:04.336 --> 00:02:11.190
And if that evaluates to true, then
the left side of the colon is executed.

27
00:02:11.190 --> 00:02:15.898
If it evaluates to false,
then the right side is and so

28
00:02:15.898 --> 00:02:19.570
this is a very shorthand
way to do if else.

29
00:02:20.790 --> 00:02:25.230
Now, this is one that I quite like,

30
00:02:25.230 --> 00:02:29.523
because we are faced with more than

31
00:02:29.523 --> 00:02:34.460
one possible option at any given time.

32
00:02:34.460 --> 00:02:38.290
This is life, this is what
switch cases were invented for.

33
00:02:38.290 --> 00:02:43.220
So in this case, imagine a calculator,
and you're given two numbers and

34
00:02:43.220 --> 00:02:45.700
then an operation parameter.

35
00:02:45.700 --> 00:02:50.320
And then based on that operation,
you're either going to add it, subtract,

36
00:02:50.320 --> 00:02:55.570
multiply, divide it or just return 42
because that is always the answer.

37
00:02:55.570 --> 00:03:00.597
And so this allows us to go through and
say here is kind of a table

38
00:03:00.597 --> 00:03:05.626
of possible options, and
then based on the cases available,

39
00:03:05.626 --> 00:03:10.130
so you're still evaluating to true or
false.

40
00:03:10.130 --> 00:03:14.280
And so if the operation equals add,
then that's what you're going to do.

41
00:03:15.710 --> 00:03:21.574
Okay, so that was, I feel like if you
ever been standing it like a platform and

42
00:03:21.574 --> 00:03:27.910
a train station, the train just slips by,
that's kinda what that just felt like.

43
00:03:27.910 --> 00:03:31.440
So we're done waxing the train,
let's get down to business.

