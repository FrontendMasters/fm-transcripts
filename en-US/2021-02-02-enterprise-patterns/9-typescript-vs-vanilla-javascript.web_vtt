WEBVTT

1
00:00:00.390 --> 00:00:05.260
So let me move on and
I want to do a quick TypeScript interlude.

2
00:00:05.260 --> 00:00:10.428
So we're gonna be using
TypeScript where appropriate, but

3
00:00:10.428 --> 00:00:16.180
when we talk about plain old JavaScript,
what do we mean?

4
00:00:16.180 --> 00:00:20.527
Well, we're typically
talking about ECMAScript 5

5
00:00:20.527 --> 00:00:25.646
the reason being is that this is
what runs in all the browsers and

6
00:00:25.646 --> 00:00:29.219
so when you write
JavaScript at some point,

7
00:00:29.219 --> 00:00:33.400
it's being compiled into
plain old JavaScript.

8
00:00:33.400 --> 00:00:35.968
I know it's boring but

9
00:00:39.916 --> 00:00:45.074
More frustrating is that
if I said I want you

10
00:00:45.074 --> 00:00:50.430
to create a class and
add some methods to it.

11
00:00:50.430 --> 00:00:56.770
Well, it is five like,
this is a real mind warp.

12
00:00:57.930 --> 00:01:02.749
Like how do you create the concept of
classes when that's not even part of

13
00:01:02.749 --> 00:01:08.042
the framework and so imagine so I learned
how to program with ActionScript one,

14
00:01:08.042 --> 00:01:11.650
which was essentially Ekman script three.

15
00:01:11.650 --> 00:01:16.649
Imagine trying to learn object oriented
programming on a prototypical language

16
00:01:16.649 --> 00:01:17.390
like this.

17
00:01:19.120 --> 00:01:24.781
The problem with this is that We're
trying to express an object and

18
00:01:24.781 --> 00:01:29.937
methods in the context of a class but
the code itself doesn't

19
00:01:29.937 --> 00:01:34.991
look anything like it is that
it's obscured by the language

20
00:01:34.991 --> 00:01:39.970
mechanisms of like,
like what has shaped our prototype.

21
00:01:39.970 --> 00:01:44.898
Well, you don't understand
that until you have to go and

22
00:01:44.898 --> 00:01:48.391
backfill like this long theoretical and

23
00:01:48.391 --> 00:01:54.760
academic discourse of like how prototype
works and what does this mean?

24
00:01:54.760 --> 00:01:57.070
Well, who knows what does this mean?

25
00:01:57.070 --> 00:01:58.710
It can mean anything.

26
00:01:58.710 --> 00:02:04.529
And so, things are a little better when we
move to ECMO script at least I can define,

27
00:02:04.529 --> 00:02:08.010
the concept of an object that does things.

28
00:02:08.010 --> 00:02:12.673
And so now we have a class with
a shape that, has a constructor

29
00:02:12.673 --> 00:02:18.190
method that has two more methods
set location, and get location.

30
00:02:18.190 --> 00:02:22.123
So somebody would look at this
especially coming from maybe a classical

31
00:02:22.123 --> 00:02:25.680
background and
this would make a lot of sense.

32
00:02:25.680 --> 00:02:28.874
This, you look at just like Java
programmers and C sharp programmers,

33
00:02:28.874 --> 00:02:31.600
they see this and they just throw
a chair through the window.

34
00:02:33.640 --> 00:02:37.570
They can look at this, and
this makes sense, or more sense.

35
00:02:38.930 --> 00:02:44.832
TypeScript, on the other hand,
which we're going to use,

36
00:02:44.832 --> 00:02:49.928
because it's better at
communicating intention,

37
00:02:49.928 --> 00:02:55.135
and let me show you what I
mean there are now this little

38
00:02:55.135 --> 00:03:03.469
bit of sprinkles that we've put on to this
that helps communicate not only to myself,

39
00:03:03.469 --> 00:03:08.600
my future self, but
other developers and to the IE.

40
00:03:09.870 --> 00:03:14.334
What I expect when I write my code so
if we go back here,

41
00:03:14.334 --> 00:03:18.290
this is pretty good, but how do I know.

42
00:03:18.290 --> 00:03:20.740
What ID is, is that a string or a number?

43
00:03:21.840 --> 00:03:23.400
How do I know what x and y are?

44
00:03:23.400 --> 00:03:26.700
Is it an object, a number, a string?

45
00:03:26.700 --> 00:03:27.750
What is it?

46
00:03:27.750 --> 00:03:32.315
Well, TypeScript because it's
good at communicating intent,

47
00:03:32.315 --> 00:03:36.300
this is one of the main
reasons why I love it.

48
00:03:36.300 --> 00:03:39.108
Is that we go in and say ID is string,
x and y, or a number.

49
00:03:39.108 --> 00:03:44.860
And that's helpful because
not only are we communicating

50
00:03:44.860 --> 00:03:49.903
to somebody who's consuming this,
but to the UI,

51
00:03:49.903 --> 00:03:56.650
now it can infer and
introspect this class and help you out.

52
00:03:56.650 --> 00:04:01.201
Not only that is we can
start to extract pieces and

53
00:04:01.201 --> 00:04:05.309
say, location is actually a combination,

54
00:04:05.309 --> 00:04:10.420
it's just an object that has an X and
Y property.

55
00:04:10.420 --> 00:04:14.813
So we can pull that out, and we can define
that and so now when you look at x and y,

56
00:04:14.813 --> 00:04:16.360
what are we talking about?

57
00:04:17.660 --> 00:04:23.333
Well Probably we're talking about location
but we're not communicating it very well.

58
00:04:26.586 --> 00:04:32.301
Now when we look at this,
when we say get location, and

59
00:04:32.301 --> 00:04:38.530
it returns this dot location,
that makes a lot more sense.

60
00:04:39.720 --> 00:04:44.280
And so this is again,
reducing complexity at

61
00:04:44.280 --> 00:04:49.680
the technical level and
at the human level.

62
00:04:49.680 --> 00:04:54.103
This is why I believe, and
I'm all in on TypeScript, in fact,

63
00:04:54.103 --> 00:04:59.944
every major framework that is around has
TypeScript options if it's not baked in,

64
00:04:59.944 --> 00:05:04.200
so I know that obviously angular
is all in on TypeScript, but

65
00:05:04.200 --> 00:05:07.020
you can do react, you can do view.

66
00:05:07.020 --> 00:05:12.008
Interestingly enough, the one framework
that a lot of people don't talk

67
00:05:12.008 --> 00:05:16.352
about anymore, but it's still really,
really good is dojo and

68
00:05:16.352 --> 00:05:21.430
Dylan Shimon he lives in Phoenix and
he runs the TypeScript meetup in dojo.

69
00:05:21.430 --> 00:05:23.194
They've done a lot of
really cool stuff but

70
00:05:23.194 --> 00:05:26.190
it's all TypeScript they rewrote
the entire framework in TypeScript.

71
00:05:26.190 --> 00:05:31.226
So pretty much every major framework that
I know of is at least as an option for

72
00:05:31.226 --> 00:05:32.300
TypeScript.

73
00:05:32.300 --> 00:05:33.270
Why?

74
00:05:33.270 --> 00:05:40.070
Because it reduces complexity through
meaningful Signaling of intention.

75
00:05:40.070 --> 00:05:45.698
And when we talk about flow control,
what are we talking about communication,

76
00:05:45.698 --> 00:05:50.300
TypeScript helps solve
the communication problem.

77
00:05:50.300 --> 00:05:55.848
But at the end of the day is just
JavaScript is that our TypeScript

78
00:05:55.848 --> 00:06:00.490
is compiled down into
something the browser can use.

