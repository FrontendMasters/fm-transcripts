WEBVTT

1
00:00:00.170 --> 00:00:05.378
So the first question that
I had was around my IDE and

2
00:00:05.378 --> 00:00:13.273
I believe the question was around string
literals if I'm not mistaken, so if

3
00:00:17.996 --> 00:00:25.765
I did something like
colored string equals law,

4
00:00:25.765 --> 00:00:31.640
this test is this what we're talking

5
00:00:31.640 --> 00:00:37.323
about like this magic take the color

6
00:00:37.323 --> 00:00:43.480
string letter right here, was that?

7
00:00:43.480 --> 00:00:44.500
Yeah, that was your?

8
00:00:44.500 --> 00:00:50.134
All right, so
[SOUND] how that is happening is,

9
00:00:50.134 --> 00:00:55.191
I believe, it is a function of the current

10
00:00:55.191 --> 00:01:00.536
theme that I'm using within my IDE editor,

11
00:01:00.536 --> 00:01:04.162
which is the material theme.

12
00:01:04.162 --> 00:01:05.947
Let me see if I can see this here.

13
00:01:10.001 --> 00:01:10.829
Looking right at it.

14
00:01:22.942 --> 00:01:32.130
And so I'm pretty sure it is the benefits
of this theme by Mattia Astorino.

15
00:01:32.130 --> 00:01:36.459
The fact that it's been
downloaded like 2.8 million

16
00:01:36.459 --> 00:01:40.430
times 1000 Holland coyotes can't be wrong.

17
00:01:40.430 --> 00:01:44.278
It has to be good, so it's the icons and

18
00:01:44.278 --> 00:01:49.900
also I have this additional
community material theme.

19
00:01:49.900 --> 00:01:52.181
So probably what I could do at some point,

20
00:01:52.181 --> 00:01:55.580
there's actually a command line
to export all of my plugins.

21
00:01:55.580 --> 00:01:58.080
I would be more than
happy to just do that.

22
00:01:58.080 --> 00:02:02.022
And so everybody could just see what I
have configured in my IDE if that would be

23
00:02:02.022 --> 00:02:03.060
interesting.

24
00:02:03.060 --> 00:02:07.210
But this is a really good theme,
I use it quite a bit and

25
00:02:07.210 --> 00:02:10.820
I really particularly
like this color thing.

26
00:02:12.970 --> 00:02:18.230
The other thing worth mentioning,
the font that I'm using is operator mono.

27
00:02:18.230 --> 00:02:24.120
It's not free, but I think there's
probably some comparable fonts out there.

28
00:02:24.120 --> 00:02:28.768
That's really kind of the crux of
it is I'm running the material

29
00:02:28.768 --> 00:02:31.450
theme with operator mono as my font.

30
00:02:33.950 --> 00:02:38.741
And so let me see in the chat room, yeah,

31
00:02:38.741 --> 00:02:42.920
Kevin, nailed it, encode URI.

32
00:02:42.920 --> 00:02:47.908
We had a question around observables and
more so,

33
00:02:47.908 --> 00:02:53.340
the question was,
can promises do the same thing?

34
00:02:53.340 --> 00:02:56.200
And the answer to that is,

35
00:02:56.200 --> 00:03:01.010
depending on what we
mean by the same thing,

36
00:03:01.010 --> 00:03:05.340
promises can do some of the things.

37
00:03:05.340 --> 00:03:09.696
Meaning, a promise can get a single value,
asynchronously and

38
00:03:09.696 --> 00:03:13.290
return it to whoever holds that promise.

39
00:03:13.290 --> 00:03:18.563
That is the extent in which
observables overlap with or

40
00:03:18.563 --> 00:03:23.170
promises overlap with observables.

41
00:03:23.170 --> 00:03:27.744
So I would say promises provide a,
an incredibly small

42
00:03:27.744 --> 00:03:32.330
subset of functionality in
relation to observables.

43
00:03:32.330 --> 00:03:36.260
So for one observables don't
have a concept of operators.

44
00:03:38.270 --> 00:03:42.143
So you simply cannot transfer transform
your data is it's moving through

45
00:03:42.143 --> 00:03:43.270
the promise stream.

46
00:03:43.270 --> 00:03:45.307
There's no such thing,

47
00:03:45.307 --> 00:03:50.450
not only that is that A promise
will only ever resolve one time.

48
00:03:52.410 --> 00:03:55.118
And so,
you're only ever going to get one value

49
00:03:55.118 --> 00:03:58.040
with an observable you'll
get n number of values.

50
00:03:59.130 --> 00:04:07.443
Along with that the promises do not
have the ability to cancel and retry.

51
00:04:07.443 --> 00:04:10.810
And so if you're doing any kind of
asynchronous call that you need to

52
00:04:10.810 --> 00:04:13.490
actually cancel it and retry or recover.

53
00:04:13.490 --> 00:04:18.556
Well, promises don't allow you to do that,
which is exactly why.

54
00:04:18.556 --> 00:04:22.420
And one of the impetus of creating
this was around Netflix and

55
00:04:22.420 --> 00:04:27.197
all of the asynchronous problems that
they were having with communicating

56
00:04:27.197 --> 00:04:29.580
with the back end servers.

57
00:04:29.580 --> 00:04:34.286
And so in terms of the ability to
handle situations and recover,

58
00:04:34.286 --> 00:04:39.270
that, yes, you can make an asynchronous
call and it can come back.

59
00:04:39.270 --> 00:04:41.800
You can do that with a promise, but

60
00:04:41.800 --> 00:04:46.073
if you need to do anything
other than that, then You have,

61
00:04:46.073 --> 00:04:51.240
it's going to be challenging,
it's going to be very, very hard.

62
00:04:51.240 --> 00:04:57.192
And so the ability to consume a value
more than once to transform the data and

63
00:04:57.192 --> 00:05:01.265
then to recover if something
goes wrong and retry.

64
00:05:01.265 --> 00:05:05.470
To me is they had me at
hello take my money.

65
00:05:06.690 --> 00:05:10.163
&gt;&gt; When you are communicating with a
server and you have to transform the data.

66
00:05:10.163 --> 00:05:15.737
How do you decide where you transform that
data to the service to the effect and

67
00:05:15.737 --> 00:05:17.700
to the component?

68
00:05:17.700 --> 00:05:20.408
How do you decide where you transform it.

69
00:05:20.408 --> 00:05:22.060
&gt;&gt; For me just is a default.

70
00:05:23.300 --> 00:05:26.732
If somebody asks me that
without any other details,

71
00:05:26.732 --> 00:05:29.074
I'm gonna say put it in the effect.

72
00:05:29.074 --> 00:05:31.763
That, if you're transforming the data,

73
00:05:31.763 --> 00:05:34.980
there's a good reason why
you would be doing that.

74
00:05:36.420 --> 00:05:39.070
And so I'm transforming this data for
a reason.

75
00:05:39.070 --> 00:05:44.990
So I'm going to do, I'm gonna transform
it before I start an application state.

76
00:05:44.990 --> 00:05:46.754
So I would do it at an effect and

77
00:05:46.754 --> 00:05:51.220
the effect is that I would make the
asynchronous call I would get that data.

78
00:05:51.220 --> 00:05:57.180
I would emit a completion event,
which would then go into,

79
00:05:57.180 --> 00:06:02.682
another effect that all it
does is transform the data.

80
00:06:02.682 --> 00:06:04.649
It would transform the data,

81
00:06:04.649 --> 00:06:10.100
emit another effect that would then
probably put that in the reducer.

82
00:06:10.100 --> 00:06:15.960
So you can imagine, you have
the server event, the server response.

83
00:06:17.510 --> 00:06:20.110
That's one effect, so it's asynchronous.

84
00:06:20.110 --> 00:06:26.820
But then I would just put, encapsulate the
transformation logic into another effect.

85
00:06:26.820 --> 00:06:30.151
And so I might actually put that
in like a standalone service, but

86
00:06:30.151 --> 00:06:32.700
the transformation itself the act of it.

87
00:06:32.700 --> 00:06:38.620
What happened in a second effect, which
would then push that off into the reducer?

88
00:06:40.760 --> 00:06:45.765
And so this is also why I like a like
streams and we'll see this in a little bit

89
00:06:45.765 --> 00:06:50.550
hopefully is that you can actually
take a stream and use it to initiate.

90
00:06:52.310 --> 00:06:57.009
And you can just pass these events or
these streams and sequence them up.

91
00:06:57.009 --> 00:07:00.411
So that by the time you get to the end,
any number of things have happened and

92
00:07:00.411 --> 00:07:01.710
you're able to compose it.

