WEBVTT

1
00:00:00.080 --> 00:00:05.710
Where are you doing the currying
they're asking on the example?

2
00:00:05.710 --> 00:00:12.214
&gt;&gt; So, on the scan,
let me come back to the code And

3
00:00:12.214 --> 00:00:17.960
[COUGH] Let me pull this up.

4
00:00:20.670 --> 00:00:24.330
So for the record, I'm not doing currying,
I'm doing partial application.

5
00:00:24.330 --> 00:00:25.150
It's a little bit different.

6
00:00:27.495 --> 00:00:34.507
Right here.

7
00:00:34.507 --> 00:00:38.344
So when this event comes in.

8
00:00:38.344 --> 00:00:40.365
Is that.

9
00:00:42.507 --> 00:00:46.960
It is returning this function right here.

10
00:00:49.510 --> 00:00:56.029
Which then because it doesn't
have the position object just yet

11
00:00:56.029 --> 00:01:03.393
until it gets into the scan operator
which once we hit the scan operator,

12
00:01:03.393 --> 00:01:07.389
then it's passing the position here.

13
00:01:10.681 --> 00:01:15.994
And so how you can know that
I'm doing this is that how I'm

14
00:01:15.994 --> 00:01:22.637
partially applying the function is
that if we go down here Increment and

15
00:01:22.637 --> 00:01:27.619
decrement they have three properties and
over here,

16
00:01:27.619 --> 00:01:30.290
I am satisfying two of them.

17
00:01:30.290 --> 00:01:37.757
And what that does is it returns a new
function that I can then call and

18
00:01:37.757 --> 00:01:42.736
execute by only passing
in a single parameter

19
00:01:42.736 --> 00:01:46.810
because the other two are supplied.

20
00:01:48.430 --> 00:01:53.388
And so this is where this is happening
right here is that I'm partially applying

21
00:01:53.388 --> 00:01:58.460
it by satisfying these two parameters,
but it doesn't get executed.

22
00:01:58.460 --> 00:02:00.650
Until we get down to here.

23
00:02:02.810 --> 00:02:06.869
Hopefully, I realize on one hand
is this is kind of an advanced

24
00:02:06.869 --> 00:02:11.430
JavaScript function, but
that is where that's happening.

25
00:02:11.430 --> 00:02:17.632
And [LAUGH] I would say if this
is interesting, what I had to do,

26
00:02:17.632 --> 00:02:23.836
I'm just being completely candid
that I had to really spend,

27
00:02:23.836 --> 00:02:28.609
I would say a good maybe
at least an afternoon and

28
00:02:28.609 --> 00:02:33.160
afternoon wrapping my mind around this.

29
00:02:33.160 --> 00:02:41.714
What I can do is this mark does your
chat except markdown down by any chance.

30
00:02:44.504 --> 00:02:45.870
&gt;&gt; Yeah.

31
00:02:45.870 --> 00:02:47.400
&gt;&gt; Cool.
&gt;&gt; Basic markdown.

32
00:02:47.400 --> 00:02:47.910
&gt;&gt; Yep.

33
00:02:47.910 --> 00:02:48.620
Several marked out.

34
00:02:48.620 --> 00:02:51.791
So give me one second here and

35
00:02:51.791 --> 00:02:57.340
I'm going to just produce
an example in effect.

36
00:02:57.340 --> 00:03:03.870
I don't think there's anything
sensitive about this at all.

37
00:03:03.870 --> 00:03:06.650
So I can go ahead and share it.

38
00:03:06.650 --> 00:03:10.340
And I'll go ahead and
put this in the chat room.

39
00:03:10.340 --> 00:03:13.052
Just so we can surface this as an example.

40
00:03:16.554 --> 00:03:18.274
But this is.

41
00:03:21.443 --> 00:03:27.070
Me attempting to wrap my
mind around how this works.

42
00:03:28.240 --> 00:03:33.946
So I would give this a look and
this is a pretty good

43
00:03:33.946 --> 00:03:39.235
example of how we can
use partial application

44
00:03:39.235 --> 00:03:45.130
functions to do some interesting things.

45
00:03:45.130 --> 00:03:49.387
Where it gets really interesting
is if you go down here,

46
00:03:49.387 --> 00:03:54.458
the stuff that I'm doing with dash title,
title case camel case so

47
00:03:54.458 --> 00:04:00.280
not intended to get pulled off into
destruction but check this example out.

48
00:04:02.070 --> 00:04:06.390
And with that said,
let's move on to the next question.

49
00:04:08.020 --> 00:04:12.586
&gt;&gt; I think one person was kind of confused
on where the lines between Redux and

50
00:04:12.586 --> 00:04:17.840
observables, like where does each of
those libraries cannot come into play?

51
00:04:17.840 --> 00:04:23.860
&gt;&gt; Yeah, so the question is,
what is better observables or Redux?

52
00:04:23.860 --> 00:04:30.900
And the answer is that, they're really
two separate abstraction layers, is that,

53
00:04:30.900 --> 00:04:36.963
you can use observables what I consider
for like micro state management of

54
00:04:36.963 --> 00:04:42.280
that I want to communicate a single
event and I want to manage it.

55
00:04:43.850 --> 00:04:49.570
Redux is good for large scale,
application state management.

56
00:04:49.570 --> 00:04:54.350
And in fact, if you're using
like NGR x that it's Redux,

57
00:04:54.350 --> 00:04:59.230
with an observable or
behavior subject under the hood and so

58
00:04:59.230 --> 00:05:03.350
that it's not typically one or the other.

59
00:05:03.350 --> 00:05:08.590
It comes down to what abstraction layer,
are you trying to solve that complexity.

60
00:05:08.590 --> 00:05:12.950
So observables are great for
communicating very specific things and

61
00:05:12.950 --> 00:05:17.170
managing, state run those specific
things at a very micro level.

62
00:05:17.170 --> 00:05:22.650
As you can see,
we're doing this at the interaction level.

63
00:05:22.650 --> 00:05:28.190
But Redux is really for
managing state at the application level.

64
00:05:28.190 --> 00:05:32.010
So the answer is,
one is not better than the other.

65
00:05:32.010 --> 00:05:33.838
In fact, one actually,

66
00:05:33.838 --> 00:05:38.720
in the case of Vinci RX uses the other
to do all of its heavy lifting.

67
00:05:40.160 --> 00:05:42.290
The request is regarding immutables.

68
00:05:42.290 --> 00:05:45.740
I'd love to hear a short recap on
a reference comparison to react.

69
00:05:45.740 --> 00:05:50.666
Well, again,
we're comparing two entirely separate

70
00:05:50.666 --> 00:05:54.859
things is that really
immutable operations and

71
00:05:54.859 --> 00:06:01.790
the techniques that we use to achieve
immutability exist in React or Angular.

72
00:06:01.790 --> 00:06:07.121
So, the frameworks and
the implementation of

73
00:06:07.121 --> 00:06:13.490
immutable operations
are at the language level.

74
00:06:13.490 --> 00:06:18.357
And so, what's interesting is that
the immutable operations that I use in

75
00:06:18.357 --> 00:06:23.376
these examples, and so I realized we're
using kind of angular as the shell,

76
00:06:23.376 --> 00:06:28.830
but I actually learned these from 10
Abraham off, who was coding in React.

77
00:06:28.830 --> 00:06:32.859
So a lot of what I've shown you very,
very little of this is,

78
00:06:32.859 --> 00:06:35.900
I would say Angular specific at all.

79
00:06:35.900 --> 00:06:40.376
The only reason why we even
have in this case Angular is so

80
00:06:40.376 --> 00:06:45.709
that we can see some of the stuff in
the browser to kind of give it some

81
00:06:45.709 --> 00:06:52.190
more context but Immutable operations
are not framework specific.

82
00:06:52.190 --> 00:06:57.017
Ramda immutable js not framework specific,
observables not

83
00:06:57.017 --> 00:07:02.480
framework specific and TypeScript,
also not framework specific.

84
00:07:02.480 --> 00:07:04.690
And so
this is what I think is really cool.

85
00:07:04.690 --> 00:07:09.340
And why I was super excited to do this
workshop is that even though we have

86
00:07:09.340 --> 00:07:14.299
a little bit of Angular in here what
we've really done is we've pulled out,

87
00:07:14.299 --> 00:07:18.868
the things that you can use no matter
what type script being a big one and

88
00:07:18.868 --> 00:07:23.090
apply that to anything and
apply these techniques to anything.

89
00:07:23.090 --> 00:07:27.367
So not only are we talking about
the techniques, but hopefully,

90
00:07:27.367 --> 00:07:30.321
we started to see some
of the mental models and

91
00:07:30.321 --> 00:07:35.090
some of the things that we can use to
think about programming in general.

92
00:07:35.090 --> 00:07:40.759
So, the iron triad of managing state,
flow control and code volume,

93
00:07:40.759 --> 00:07:45.372
then the access of evil with
hidden state nested logic and

94
00:07:45.372 --> 00:07:49.892
the single responsibility
principle violations, and

95
00:07:49.892 --> 00:07:54.794
then the four elements of
programming being nouns, verbs,

96
00:07:54.794 --> 00:07:58.040
conditions, and iterators.

97
00:07:58.040 --> 00:08:02.559
And then kind of that fifth element
of how do we manage time within

98
00:08:02.559 --> 00:08:05.153
the context of our application, and

99
00:08:05.153 --> 00:08:10.450
this is where I believe observables
does this better than anybody.

100
00:08:10.450 --> 00:08:14.722
And using because I did make the claim and

101
00:08:14.722 --> 00:08:22.027
I stand by it is everything that I do
can fit on a single piece of paper.

102
00:08:22.027 --> 00:08:27.077
And that's it is that is
the simple patterns that

103
00:08:27.077 --> 00:08:31.756
I use to put together,
to build into larger,

104
00:08:31.756 --> 00:08:35.960
large scale enterprise applications.

