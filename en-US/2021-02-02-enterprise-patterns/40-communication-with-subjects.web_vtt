WEBVTT

1
00:00:00.582 --> 00:00:04.172
Streams are very good at
communicating events and

2
00:00:04.172 --> 00:00:08.966
communicating that, hey,
this is what happened, it happened.

3
00:00:08.966 --> 00:00:11.463
And this is what you
need to know about it.

4
00:00:11.463 --> 00:00:15.193
In our examples or

5
00:00:15.193 --> 00:00:21.413
rather our concepts Folder.

6
00:00:21.413 --> 00:00:26.445
If you go down to the bottom,
and you look for

7
00:00:26.445 --> 00:00:32.297
event communication,
we have a form and a button.

8
00:00:32.297 --> 00:00:37.164
And when we click it,
we're calling notify.

9
00:00:37.164 --> 00:00:40.560
And we're calling notify
sending the message in and

10
00:00:40.560 --> 00:00:44.587
then we're calling dispatch
on this notification service.

11
00:00:44.587 --> 00:00:49.621
So if I click in here, what do we have?

12
00:00:49.621 --> 00:00:51.372
A subject.

13
00:00:51.372 --> 00:00:55.672
A subject is essentially
a mechanism that produces

14
00:00:55.672 --> 00:01:00.677
an observable stream, but
also produces the mechanisms.

15
00:01:00.677 --> 00:01:03.508
To control, that observable stream.

16
00:01:03.508 --> 00:01:07.470
And so, within our notification service,
and I do use this.

17
00:01:07.470 --> 00:01:12.502
That, we're creating a subject, and then,

18
00:01:12.502 --> 00:01:16.767
we are exposing it, as an observable.

19
00:01:16.767 --> 00:01:21.250
So, somebody can come and say,
I want to subscribe to this.

20
00:01:22.664 --> 00:01:29.454
But then we also have the ability to
dispatch events or notifications.

21
00:01:29.454 --> 00:01:34.448
And when we call this dot subject.next,
the observable stream

22
00:01:34.448 --> 00:01:39.080
underneath of it will essentially
push that down the line.

23
00:01:39.080 --> 00:01:45.242
So if I go to I believe

24
00:01:45.242 --> 00:01:52.133
it's app component.

25
00:01:52.133 --> 00:01:53.420
Let me see here.

26
00:01:53.420 --> 00:01:55.818
All right.

27
00:01:55.818 --> 00:02:03.883
So if you look at Angie Annette We are,
subscribing to the notifications.

28
00:02:03.883 --> 00:02:06.618
And anytime a notification
comes in the pipeline.

29
00:02:06.618 --> 00:02:08.067
So, this is the initial output.

30
00:02:08.067 --> 00:02:13.326
This is the input.

31
00:02:13.326 --> 00:02:19.229
It's just passing off that notification,
to this particular method right here.

32
00:02:19.229 --> 00:02:20.911
And it's servicing it.

33
00:02:20.911 --> 00:02:23.313
So this is a very simple way.

34
00:02:23.313 --> 00:02:27.936
If we look at the notification service,
if you want to create an event bus to pass

35
00:02:27.936 --> 00:02:32.011
information around your application,
and you don't need to store.

36
00:02:32.011 --> 00:02:36.440
It's just temporal information that
you just it's there and it's gone.

37
00:02:39.300 --> 00:02:44.511
We can do that in, I don't know,
six, seven lines of code.

38
00:02:44.511 --> 00:02:49.708
And you have the ability from one
component to trigger and say,

39
00:02:49.708 --> 00:02:55.798
hey, I need you to notify cause
the notification service and handles it.

40
00:02:55.798 --> 00:02:58.634
And then over here,
you can subscribe to it.

41
00:02:58.634 --> 00:03:03.462
And so, in this case, this is where
we start to see the observer pattern.

42
00:03:03.462 --> 00:03:05.777
Kinda take, the forefront.

43
00:03:05.777 --> 00:03:10.740
So in event communication,

44
00:03:10.740 --> 00:03:15.710
we can put anything in here.

45
00:03:15.710 --> 00:03:20.888
Holla at your boy, and I'm gonna
go notify now this is from a child

46
00:03:20.888 --> 00:03:26.745
component that's then delegating
backup to the notification service.

47
00:03:26.745 --> 00:03:28.737
And you can see it down here.

48
00:03:28.737 --> 00:03:33.134
So I was able to implement this mechanism.

49
00:03:33.134 --> 00:03:38.337
In 1015 lines of code, and
I can move this around and

50
00:03:38.337 --> 00:03:42.987
so this is a very good way
to communicate events and

51
00:03:42.987 --> 00:03:46.105
state across your application.

52
00:03:46.105 --> 00:03:49.202
For instance, what do we think?

53
00:03:49.202 --> 00:03:56.465
And GRS store is using to communicate
state changes when the store changes.

54
00:03:56.465 --> 00:03:57.779
How do we know?

55
00:03:57.779 --> 00:04:01.382
What is like what's
communicating under the hood?

56
00:04:01.382 --> 00:04:02.194
How's that?

57
00:04:02.194 --> 00:04:03.386
How does that work?

58
00:04:03.386 --> 00:04:07.857
Well, it's a behavior subject.

59
00:04:07.857 --> 00:04:09.039
That's it.

60
00:04:09.039 --> 00:04:14.584
You are literally your entire application
state disease single state tree that's

61
00:04:14.584 --> 00:04:19.826
in an observable that anytime it changes,
the consumers are being notified.

62
00:04:19.826 --> 00:04:24.759
So, there's a lot of other I think really
cool things here that when you have

63
00:04:24.759 --> 00:04:28.861
the time, I really encourage you
to go through, look at that.

64
00:04:28.861 --> 00:04:34.165
Even look at the slides and
the repo and start to think about how

65
00:04:34.165 --> 00:04:40.401
you can actually take some of these
things and build real applications.

66
00:04:40.401 --> 00:04:46.683
So for instance,
a real time sports counter or a slideshow.

67
00:04:46.683 --> 00:04:48.622
This is super easy.

68
00:04:48.622 --> 00:04:52.901
So when we did the left right,
well do a slideshow.

69
00:04:52.901 --> 00:04:55.480
You could even do a spaceship game.

70
00:04:55.480 --> 00:05:00.163
So this is a really kind of a wacky like,
it's not very full feature.

71
00:05:00.163 --> 00:05:02.752
But interesting enough, I think,

72
00:05:02.752 --> 00:05:07.758
pragmatic programmer has a pretty
good book on building RSGS apps and

73
00:05:07.758 --> 00:05:13.647
this is one of the things that they do is
the ability to make a very simple shooter.

74
00:05:13.647 --> 00:05:17.317
Is anybody ever like went running and
just because they're narcissists?

75
00:05:17.317 --> 00:05:20.365
They want to know like how far did I go?

76
00:05:20.365 --> 00:05:22.264
Only because I could brag to my friends.

77
00:05:22.264 --> 00:05:26.356
Well here you can say like
I want to click here.

78
00:05:26.356 --> 00:05:28.480
I came flying in from way over here or
whatever.

79
00:05:28.480 --> 00:05:31.290
So this is a really easy way.

80
00:05:31.290 --> 00:05:36.308
That's all we're doing now is we're
mapping the stream of the mouse clicks.

81
00:05:36.308 --> 00:05:37.680
Another one.

82
00:05:37.680 --> 00:05:39.910
Where are you?
I'm right here.

83
00:05:39.910 --> 00:05:40.730
What about over here?

84
00:05:42.070 --> 00:05:45.010
You're just capturing those events and
responding to it.

85
00:05:45.010 --> 00:05:49.051
So I would say definitely go
through the concepts poker on

86
00:05:49.051 --> 00:05:51.166
the slides poker on the code.

87
00:05:51.166 --> 00:05:56.081
And then in the examples section,
you can see some ways that you could

88
00:05:56.081 --> 00:06:01.450
actually use this to do something
meaningful or some kind of a unit of work.

