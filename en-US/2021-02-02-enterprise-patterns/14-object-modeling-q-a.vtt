WEBVTT

1
00:00:00.000 --> 00:00:05.171
I briefly talked about why
I use ID as a string and

2
00:00:05.171 --> 00:00:10.094
then why I extract it
into like a base entity.

3
00:00:10.094 --> 00:00:16.486
So, good question and or a good request
in the form of a question slash request.

4
00:00:16.486 --> 00:00:22.030
So the reason why I type
out my IDs as strings

5
00:00:22.030 --> 00:00:27.420
is because the databases would generally

6
00:00:27.420 --> 00:00:33.275
generate a UID as
an alphanumeric sequence.

7
00:00:33.275 --> 00:00:35.122
And so I think one purely for

8
00:00:35.122 --> 00:00:40.355
compliance with if you're dealing with
a database, you're maxing it out.

9
00:00:40.355 --> 00:00:45.665
More often than not, that's going to
be a string as well as when you and

10
00:00:45.665 --> 00:00:49.085
so that's just for
the kind of the default but

11
00:00:49.085 --> 00:00:53.855
by using an alphanumeric sequence
you have a lot more options in

12
00:00:53.855 --> 00:00:58.805
terms of uniqueness because numbers
just keep getting larger and

13
00:00:58.805 --> 00:01:03.575
larger and larger versus even
reduce alphanumeric strings and

14
00:01:03.575 --> 00:01:07.271
it's able to get more
versus unique sequences.

15
00:01:07.271 --> 00:01:07.970
So that's one.

16
00:01:07.970 --> 00:01:13.029
The other reason why I use base entity is

17
00:01:13.029 --> 00:01:18.709
because it allows me to
define my interfaces

18
00:01:21.682 --> 00:01:25.702
In a way that so
the assumption here that I'm making

19
00:01:25.702 --> 00:01:29.924
is that every one of my entities
is going to have an ID.

20
00:01:29.924 --> 00:01:32.737
If you're going to the database
specifically, you will have an ID.

21
00:01:32.737 --> 00:01:38.222
And so it's just a way for
me to extract that piece out and

22
00:01:38.222 --> 00:01:44.658
focus just on kind of the extrinsic
properties that I care about.

23
00:01:44.658 --> 00:01:48.965
And so it's just kind of
a convenience method that, for me,

24
00:01:48.965 --> 00:01:54.040
I just assume that every kind of entity
that I have is going to have an ID.

25
00:01:54.040 --> 00:02:00.882
And so it's a way for me to not
have to keep putting that in there.

26
00:02:00.882 --> 00:02:05.085
But by implementing the base entity
is that I'm doing that via like,

27
00:02:05.085 --> 00:02:07.699
I'm contractually obligated to do that.

28
00:02:07.699 --> 00:02:14.269
And so I would I'm very judicious
about how I use inheritance.

29
00:02:14.269 --> 00:02:18.618
And so I think you should
be careful with this but

30
00:02:18.618 --> 00:02:24.832
I think a very specific single
level inheritance is probably okay.

31
00:02:24.832 --> 00:02:27.786
Some people will say that if you use
inheritance at all, you're the devil.

32
00:02:27.786 --> 00:02:33.020
I don't agree with that And I think
the balance is is just really being

33
00:02:33.020 --> 00:02:39.079
cognizant of it and being very judicious
about how you use inheritance, okay?

34
00:02:39.079 --> 00:02:42.805
&gt;&gt; So, you're imagining like you'd have
multiple interfaces beyond the client, and

35
00:02:42.805 --> 00:02:44.781
they'd have the shared
base identity of ID.

36
00:02:44.781 --> 00:02:47.628
&gt;&gt; Right, and so, now, you're ensuring
that all your entities have an ID.

37
00:02:47.628 --> 00:02:52.365
I am creating a coupling here,
is that I'm coupling that

38
00:02:52.365 --> 00:02:57.307
all of my entities that use base
entity to this base entity.

39
00:02:57.307 --> 00:03:04.691
So if I came in here, it just flippantly
said, this is a number, then I break this.

40
00:03:04.691 --> 00:03:10.055
In this is where you got to
have to be careful about this,

41
00:03:10.055 --> 00:03:14.962
but in the case of I can
safely say I want every entity

42
00:03:14.962 --> 00:03:19.204
to have an ID and
I want it to be a string or no.

43
00:03:19.204 --> 00:03:23.706
And I'm willing to enforce
that across all entities and

44
00:03:23.706 --> 00:03:29.848
I'm happy I'm okay with that coupling,
then it's a fair trade off for me.

45
00:03:29.848 --> 00:03:34.018
&gt;&gt; Yes, now I said that you have
everything around, all around your home

46
00:03:34.018 --> 00:03:38.060
component and is there a way to
better organize this or is this okay?

47
00:03:38.060 --> 00:03:42.273
&gt;&gt; So the question is,
everything's in the home component.

48
00:03:42.273 --> 00:03:45.970
And is there a better
way to organize this?

49
00:03:45.970 --> 00:03:49.060
I would never do this for real.

50
00:03:49.060 --> 00:03:51.648
Like this is like we're
waxing the car right now.

51
00:03:51.648 --> 00:03:54.721
And so this is the only reason why
it's even in this home component.

52
00:03:54.721 --> 00:04:00.409
Is because that I can come over here and
I can render it.

53
00:04:00.409 --> 00:04:06.873
But for instance, you could or
somebody could pick this up and

54
00:04:06.873 --> 00:04:12.965
I've done this entire example
in inside of stack Blitz and

55
00:04:12.965 --> 00:04:16.466
you could just paste this in and.

56
00:04:16.466 --> 00:04:20.347
Go here and then within this,
just dump this out.

57
00:04:27.974 --> 00:04:32.955
Just go Tango, no,
&gt;&gt; Yeah.

58
00:04:32.955 --> 00:04:38.523
and if you look in the clo I
mean in the world from the Gita,

59
00:04:38.523 --> 00:04:42.934
It actually is on their API interfaces.ts.

60
00:04:42.934 --> 00:04:44.496
So, yeah,
&gt;&gt; Yeah, so

61
00:04:44.496 --> 00:04:46.681
I did I did put the interface in.

62
00:04:46.681 --> 00:04:52.360
I do have a top level interface,
but I also for

63
00:04:52.360 --> 00:04:57.592
the sake of just kind of visual cohesion,

64
00:04:57.592 --> 00:05:00.446
it's all in one file.

65
00:05:00.446 --> 00:05:03.059
So the idea is we're just starting from
nothing and we're gonna build on this.

66
00:05:03.059 --> 00:05:08.687
But you could do this in sight of
stockless just like this and so.

67
00:05:08.687 --> 00:05:14.241
&gt;&gt; And then another question I have is the
reason you have the ID be either spring or

68
00:05:14.241 --> 00:05:17.777
Knoll is because when
you're creating a new one,

69
00:05:17.777 --> 00:05:20.661
it's going to be no to begin with right?

70
00:05:20.661 --> 00:05:25.027
&gt;&gt; So the question is, is the reason or
rather comment, which the answer is yes.

71
00:05:25.027 --> 00:05:26.982
Is the reason why I have string.

72
00:05:26.982 --> 00:05:31.336
Or ID being string or
null is because I'm saying if it exists,

73
00:05:31.336 --> 00:05:33.273
it's going to be a string.

74
00:05:33.273 --> 00:05:40.495
But if it doesn't, if it's a new client,
then it's just going to be null.

75
00:05:40.495 --> 00:05:45.798
And so this is typically how you
delineate between a new entity and

76
00:05:45.798 --> 00:05:50.332
a pre existing entity is that
there's an ID a unique ID,

77
00:05:50.332 --> 00:05:55.846
a unique identifier for that, so
that is yeah, I think that's it.

78
00:05:55.846 --> 00:06:00.370
So also just in case somebody
showed up a little bit late that

79
00:06:00.370 --> 00:06:03.723
I'm running out of the mezzo application.

80
00:06:03.723 --> 00:06:06.824
I was previously floundering
in the micro application but,

81
00:06:06.824 --> 00:06:10.349
the example that we're running for
now is in the metro application,

82
00:06:10.349 --> 00:06:12.196
specifically the home component.

83
00:06:12.196 --> 00:06:17.928
And actually what we're doing has
really nothing to do with angular,

84
00:06:17.928 --> 00:06:22.894
other than it just allows us to
get a visual representation.

85
00:06:22.894 --> 00:06:27.288
The question is are the solutions in,

86
00:06:27.288 --> 00:06:32.506
a branch and
there are solutions in the code,

87
00:06:32.506 --> 00:06:38.701
and I'm not going to tell
you where they are just yet.

88
00:06:38.701 --> 00:06:42.424
But if you poke around,
you twist my arm, maybe I won't, but

89
00:06:42.424 --> 00:06:45.585
they're in the project and
I've put them in there.

90
00:06:45.585 --> 00:06:47.787
Okay, fine, you twisted my arm.

91
00:06:47.787 --> 00:06:52.610
If you look in each of the projects,
you're gonna find a solutions,

92
00:06:52.610 --> 00:06:53.782
markdown file.

93
00:06:53.782 --> 00:06:56.994
And so kind of everything that
I'm going to be typing and going.

94
00:06:56.994 --> 00:06:58.445
It's not a secret.

95
00:06:58.445 --> 00:06:59.194
Here's the notes.

96
00:06:59.194 --> 00:07:03.168
But I would recommend
not speeding ahead and

97
00:07:03.168 --> 00:07:08.335
actually doing the challenges so
that's the first one.

98
00:07:08.335 --> 00:07:15.582
The question is can I explain state and so
just briefly to offer commentary on that,

99
00:07:15.582 --> 00:07:19.942
objects, your domain
model becomes your state.

100
00:07:19.942 --> 00:07:26.860
And so when you define a domain model is
that your application when it's running,

101
00:07:26.860 --> 00:07:31.974
it is creating the essentially
any number of those objects,

102
00:07:31.974 --> 00:07:36.806
which then produces or
makes up your application state.

103
00:07:36.806 --> 00:07:41.971
And this is why we start at the bottom,
we do domain modeling and

104
00:07:41.971 --> 00:07:48.121
then we use that to construct our
feature state and our application state.

105
00:07:48.121 --> 00:07:49.373
There's another question.

106
00:07:49.373 --> 00:07:53.191
Can I recommend a book on domain modeling?

107
00:07:53.191 --> 00:07:57.296
Off the top of my head,
I believe pragmatic

108
00:07:57.296 --> 00:08:02.320
programmers has a couple
pretty good books on this.

109
00:08:02.320 --> 00:08:08.770
Typically, in this case, I would just go
to Amazon search for domain modeling and

110
00:08:08.770 --> 00:08:14.658
choose the ones with the most stars that
I could talk someone into buying and

111
00:08:14.658 --> 00:08:18.698
put it into my stocking for
Christmas or whatever.

112
00:08:18.698 --> 00:08:22.059
But I believe pragmatic
programmers has a good one.

113
00:08:22.059 --> 00:08:23.388
I'll think about that.

114
00:08:23.388 --> 00:08:28.560
If I come up with it, I'll put the link
in the chats for everybody to check out.

