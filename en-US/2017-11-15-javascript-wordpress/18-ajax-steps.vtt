WEBVTT

1
00:00:00.040 --> 00:00:03.230
&gt;&gt; Zac Gordon: So
this should look familiar, right?

2
00:00:03.230 --> 00:00:05.890
What's the only thing that's new here?

3
00:00:05.890 --> 00:00:08.230
Maybe someone could shout out,
what do you see in here that's new,

4
00:00:08.230 --> 00:00:11.950
that we haven't seen before?
&gt;&gt; Audience Member: Dependecies ajax_url

5
00:00:11.950 --> 00:00:14.582
and nonce?
&gt;&gt; Zac Gordon: So you're right.

6
00:00:14.582 --> 00:00:17.409
Well, you're right that it
looks like a dependency,

7
00:00:17.409 --> 00:00:19.868
but because we're in wp_localize_script,

8
00:00:19.868 --> 00:00:24.121
this is actually the content that's being
pushed out to the front end of the site.

9
00:00:24.121 --> 00:00:28.700
But yeah, the admin_url and
the wp_create_nonce.

10
00:00:28.700 --> 00:00:30.968
So admin_url is going to give us this,

11
00:00:30.968 --> 00:00:36.370
remember I said all Ajax requests go to a
single URL, then WordPress redirects them?

12
00:00:36.370 --> 00:00:38.194
This is it, admin-ajax, and

13
00:00:38.194 --> 00:00:42.965
if you ever hear people talk in WordPress
about man, admin-ajax is this, and

14
00:00:42.965 --> 00:00:48.130
admin-ajax is that, and dude,
I've gotta use admin-ajax, or all this.

15
00:00:48.130 --> 00:00:50.150
You'll hear it eventually if
you hang around long enough, or

16
00:00:50.150 --> 00:00:52.550
you won't, cuz you'll just use the API.

17
00:00:52.550 --> 00:00:54.670
This is what the admin-ajax is doing.

18
00:00:54.670 --> 00:00:57.920
And then the nonce, wp_create_nonce,
is gonna create this on the fly,

19
00:00:57.920 --> 00:01:02.440
a little string of text, and
we can name nonce_name whatever we want.

20
00:01:02.440 --> 00:01:07.350
I suggest you namespace it, and you make
is specific to what the actual thing is.

21
00:01:07.350 --> 00:01:11.310
So we'll see something like jsforwp
likes nonce, for example, and

22
00:01:11.310 --> 00:01:13.552
that'll be our namespace unique nonce.

23
00:01:15.310 --> 00:01:18.586
Then we make our JavaScript call,
so this is just the jQuery Ajax,

24
00:01:18.586 --> 00:01:20.527
but notice a few things specifically.

25
00:01:20.527 --> 00:01:26.243
For the URL, we're parsing in that Ajax
URL, the admin-ajax URL that we just got.

26
00:01:26.243 --> 00:01:31.734
And then in our data, [COUGH] first
let's look at the admin _ajax_nonce,

27
00:01:31.734 --> 00:01:36.107
notice this _ajax_nonce,
it needs to be in that format.

28
00:01:36.107 --> 00:01:42.840
[COUGH] So we can't just pass data nonce
is equal to jsforwp_globals.nonce.

29
00:01:42.840 --> 00:01:47.450
We have to name it _ajax_nonce, so
this is again one of the weird things.

30
00:01:47.450 --> 00:01:52.785
And then action is going to be the name
of the function in our theme or

31
00:01:52.785 --> 00:01:54.500
plugin file that we wanna hook into.

32
00:01:54.500 --> 00:01:59.603
So in our functions.php or in our plugin
file, somewhere we have a PHP function

33
00:01:59.603 --> 00:02:05.228
called 'jsforwp_add_like'.
&gt;&gt; Zac Gordon: Step 3 is inside,

34
00:02:05.228 --> 00:02:09.820
notice now we have this function
called jsforwp_add_like.

35
00:02:09.820 --> 00:02:13.459
We're checking the Ajax referer, so
this is where we put in nonce_name,

36
00:02:13.459 --> 00:02:15.730
whatever we named it before,
we name it here.

37
00:02:15.730 --> 00:02:20.372
And if this fails, so if they passed
in a nonce, but it was the wrong one,

38
00:02:20.372 --> 00:02:24.150
it will exit out and
nothing else will happen.

39
00:02:24.150 --> 00:02:28.910
Otherwise we're setting up some custom
code here to basically take our response.

40
00:02:28.910 --> 00:02:31.110
In this case we only have
one thing in our response,

41
00:02:31.110 --> 00:02:32.808
we're setting success equal to true.

42
00:02:32.808 --> 00:02:36.707
And even though, so
when you run a jQuery or an Ajax call,

43
00:02:36.707 --> 00:02:40.130
it will tell you if the call failed or
not, right?

44
00:02:40.130 --> 00:02:41.840
You'll get some sort of method back.

45
00:02:41.840 --> 00:02:45.680
But what it won't tell you is that the
actual WordPress code that you tried to

46
00:02:45.680 --> 00:02:47.590
run was successful.

47
00:02:47.590 --> 00:02:51.920
So for this reason, oftentimes you'll
see people hard coding in a success or

48
00:02:51.920 --> 00:02:54.240
failure response with
specific information.

49
00:02:54.240 --> 00:02:57.520
So let's say that in our example,
we're updating the database.

50
00:02:57.520 --> 00:03:00.133
If that database update
doesn't go through,

51
00:03:00.133 --> 00:03:03.351
I can control and
say response success is equal to false.

52
00:03:03.351 --> 00:03:06.040
And then have more refined
control in my JavaScript,

53
00:03:06.040 --> 00:03:09.410
what's really going on in
terms of error reporting.

54
00:03:09.410 --> 00:03:13.267
In this particular example,
we want our response to be in JSON format.

55
00:03:13.267 --> 00:03:17.795
So we're wrapping our response In
json_encode, echoing it out, and

56
00:03:17.795 --> 00:03:18.630
then dying.

57
00:03:18.630 --> 00:03:23.160
Because again, this function is
gonna kinda live in invisible space,

58
00:03:23.160 --> 00:03:24.580
WordPress will kick it out there.

59
00:03:24.580 --> 00:03:28.490
The Ajax hits it, grabs the data,
it disappears and then goes.

60
00:03:28.490 --> 00:03:32.000
So we're not returning,
right, it's echoing it out.

61
00:03:32.000 --> 00:03:34.605
We're not returning anything back.

62
00:03:34.605 --> 00:03:37.250
And what would other things that you could
do with a function be that we're not?

63
00:03:37.250 --> 00:03:38.975
We're not putting it into a template,

64
00:03:38.975 --> 00:03:41.022
we're not actually
loading it onto the page.

65
00:03:41.022 --> 00:03:45.517
It's just kind of appearing in memory I
guess, and then we access it, pull it out,

66
00:03:45.517 --> 00:03:46.750
and then we're done.

67
00:03:48.180 --> 00:03:52.210
The other weird thing, not the last
weird thing, but we're getting there.

68
00:03:52.210 --> 00:04:00.240
See this hook down here, wp_ajax_, and
then our name of our function again?

69
00:04:00.240 --> 00:04:02.480
This is one of the last
weird naming conventions,

70
00:04:02.480 --> 00:04:05.320
that _ajax_nonce is one of them,
and this is another.

71
00:04:05.320 --> 00:04:08.240
So anytime we set up any Ajax,

72
00:04:08.240 --> 00:04:10.950
we have to follow this convention,
and it's a little repetitive.

73
00:04:10.950 --> 00:04:13.990
I don't know why you couldn't just
say wp_ajax and then pull it in.

74
00:04:13.990 --> 00:04:17.372
Well I do, but it's a little redundant,
but this is the way it has to go,

75
00:04:17.372 --> 00:04:21.405
okay?
&gt;&gt; Zac Gordon: So once that happens,

76
00:04:21.405 --> 00:04:25.487
back in our front end JavaScript,
this code was part of the bigger one,

77
00:04:25.487 --> 00:04:28.590
I'm just breaking off the part of it.

78
00:04:28.590 --> 00:04:32.157
When the Ajax call is successful,
it comes back.

79
00:04:32.157 --> 00:04:35.902
And then notice that this response
type success, I set that,

80
00:04:35.902 --> 00:04:37.928
that was my own custom response.

81
00:04:37.928 --> 00:04:42.367
So jQuery already succeeded when it hit
the success and is running this code.

82
00:04:42.367 --> 00:04:47.221
But I added an extra layer in, and
I could say, okay, now, go do my code.

83
00:04:47.221 --> 00:04:51.316
And if it's not successful, then I
could give it some specific message and

84
00:04:51.316 --> 00:04:53.990
be more detailed about
exactly what I want back.

85
00:04:55.552 --> 00:04:59.580
So [COUGH] again,
these are the different steps, and

86
00:04:59.580 --> 00:05:04.420
this is the last thing I want
to hit before we go into break.

87
00:05:04.420 --> 00:05:09.130
Because after this, when we come back,
then we'll start looking at just API and

88
00:05:09.130 --> 00:05:10.690
we'll focus on that for
the rest of the day.

89
00:05:10.690 --> 00:05:14.095
So this is the kinda culmination of
the old school JavaScript for WordPress.

