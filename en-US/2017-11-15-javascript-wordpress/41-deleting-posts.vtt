WEBVTT

1
00:00:00.220 --> 00:00:02.540
&gt;&gt; Zac Gordon: That completes the loop for
this and

2
00:00:02.540 --> 00:00:04.970
from here on out it's pretty easy.

3
00:00:04.970 --> 00:00:07.360
I'm gonna jump ahead to the very end and

4
00:00:07.360 --> 00:00:11.170
just walk through the extra
code that you'll see there.

5
00:00:11.170 --> 00:00:19.950
We have a delete function which is
running Axios with a method of delete.

6
00:00:19.950 --> 00:00:26.020
It's passing in the URL to a specific id,
it's giving in our JSON format and token.

7
00:00:26.020 --> 00:00:31.260
And then after our response we're gonna
load a message that says deleted and

8
00:00:31.260 --> 00:00:32.540
reload posts.

9
00:00:32.540 --> 00:00:36.620
So that's delete, pretty straight forward.

10
00:00:36.620 --> 00:00:41.407
And we also have, rather than
doing a separate update post and

11
00:00:41.407 --> 00:00:47.690
a save post, because technically you
could use the same method in Axios.

12
00:00:47.690 --> 00:00:51.420
No, no, we could do different ones, but

13
00:00:51.420 --> 00:00:56.450
save could be and
probably should be maybe its own class.

14
00:00:56.450 --> 00:00:58.680
And then update could be a separate one.

15
00:00:58.680 --> 00:01:03.290
But just like we did before, I'm gonna
run a conditional and check to see, hey,

16
00:01:03.290 --> 00:01:05.760
is something available on the page?

17
00:01:05.760 --> 00:01:07.340
Is a certain thing set?

18
00:01:07.340 --> 00:01:09.250
And if it is,
I know it's on a single page.

19
00:01:09.250 --> 00:01:10.960
If not, I know it's a listing.

20
00:01:10.960 --> 00:01:13.230
But when we update,

21
00:01:13.230 --> 00:01:18.720
notice that instead of setting the method
to post, we're setting it to put.

22
00:01:18.720 --> 00:01:22.080
And put is a different method
that will allow us to update it.

23
00:01:22.080 --> 00:01:25.360
Again, we have to say what
specific post we wanna update.

24
00:01:25.360 --> 00:01:31.630
Pass it the updated the data and
only this data will be updated.

25
00:01:31.630 --> 00:01:36.370
So let's say that we had a category or
an exert, it won't override those.

26
00:01:36.370 --> 00:01:40.550
And so if all we wanted to do was let's
say we only wanted to update the title,

27
00:01:40.550 --> 00:01:44.600
then content would not be
overridden with our put request.

28
00:01:46.850 --> 00:01:50.930
And then we're basically just doing the
same thing again, reloading the page and

29
00:01:50.930 --> 00:01:53.010
saying hey, this is updated.

30
00:01:53.010 --> 00:01:57.840
So I'm not going to go through
the rest of this with you.

31
00:01:57.840 --> 00:02:02.236
Again, we're hitting
really perfect timing for

32
00:02:02.236 --> 00:02:05.590
what we set out to cover on all of this.

33
00:02:05.590 --> 00:02:07.610
And it's not bad to have a few exercises.

34
00:02:07.610 --> 00:02:12.340
And because you already did this
in WordPress as an actual theme,

35
00:02:12.340 --> 00:02:14.640
it's just redundant to do it
in a separate environment.

36
00:02:14.640 --> 00:02:17.430
But it is a helpful code to have and
a good practice.

