WEBVTT

1
00:00:00.300 --> 00:00:02.930
&gt;&gt; Zac Gordon: Let's JavaScript, shall we?

2
00:00:02.930 --> 00:00:07.410
So we have now covered what I would
call the traditional JavaScript for

3
00:00:07.410 --> 00:00:08.660
WordPress content, right?

4
00:00:08.660 --> 00:00:14.362
So we've looked at how to enqueue stuff in
a plugin or theme, we've looked at how to

5
00:00:14.362 --> 00:00:19.907
localize scripts and pass data into them,
and then we looked at some basic Ajax.

6
00:00:19.907 --> 00:00:22.676
We didn't look at the example using Axios,
but

7
00:00:22.676 --> 00:00:26.290
there is a definitely a shift
away from using jQuery for Ajax.

8
00:00:26.290 --> 00:00:32.030
And if you don't want to use native fetch,
I'm actually a big fan of fetch,

9
00:00:32.030 --> 00:00:36.200
which is kind of the replacement for
XML HTTP requests.

10
00:00:36.200 --> 00:00:40.428
But Axios is probably the library
that most people are using now for

11
00:00:40.428 --> 00:00:43.373
their Ajaxy stuff, so
we looked at all that and

12
00:00:43.373 --> 00:00:47.018
what we're gonna focus on now
is the WordPress REST API.

13
00:00:47.018 --> 00:00:51.998
Now if you've used an API, it's a pretty
simple thing, you basically go to a URL

14
00:00:51.998 --> 00:00:55.531
with this one in a browser and
it gives you a bunch of data.

15
00:00:55.531 --> 00:01:00.705
So the question on how to use an API
really lays down to two things.

16
00:01:00.705 --> 00:01:04.733
The first one is, what method are we
gonna use to get the data, and

17
00:01:04.733 --> 00:01:07.603
that's going to be using Axios for
Ajax call.

18
00:01:07.603 --> 00:01:11.991
And then, the second thing is, well, what
are we gonna do with the data once we have

19
00:01:11.991 --> 00:01:15.770
it, and that is JavaScript it,
you do whatever you want with the data.

20
00:01:15.770 --> 00:01:19.944
It's raw data decide what you wanna do,
and go ahead and build it out.

21
00:01:19.944 --> 00:01:25.213
So we'll start off now with just looking
in the browser and then, we'll move

22
00:01:25.213 --> 00:01:31.067
into building out some little demo apps
and some site-slash-theme things, okay?

23
00:01:31.067 --> 00:01:33.685
So, [COUGH] let's come
into our project files.

24
00:01:33.685 --> 00:01:37.568
And you wanna go into Section
4 on WordPress REST API, and

25
00:01:37.568 --> 00:01:40.422
you'll notice that these are not themes,

26
00:01:40.422 --> 00:01:44.400
they're not plug-ins,
all it is is a simple Read Me file.

27
00:01:45.410 --> 00:01:49.472
So I'm just gonna open this up in
my editor, so I can see it here, so

28
00:01:49.472 --> 00:01:52.011
I'm in 4.1, and all it is is a Read Me,

29
00:01:52.011 --> 00:01:56.169
because we're going to be accessing
all this stuff in the browser.

30
00:01:56.169 --> 00:02:01.395
So this is just instructions on what
to do and how we could do that so,

31
00:02:01.395 --> 00:02:05.380
you're gonna pull up
your site.com/wp-json.

32
00:02:05.380 --> 00:02:10.382
And what we get here is the root of our
API or the index of it, and if you've

33
00:02:10.382 --> 00:02:15.876
worked with APIs before this is actually
fairly common for REST API that when you

34
00:02:15.876 --> 00:02:20.982
access the main root you get information
about what's in the API itself.

35
00:02:20.982 --> 00:02:25.236
So once we do that, we should see that
API and we'll look at that together and

36
00:02:25.236 --> 00:02:26.769
it should be pretty clear.

37
00:02:26.769 --> 00:02:31.356
Then we're going to go ahead and
we're going to do something like,

38
00:02:31.356 --> 00:02:33.053
actually you know what?

39
00:02:33.053 --> 00:02:37.374
Yeah, I'll skip the slides,
then we're going to, nope,

40
00:02:37.374 --> 00:02:39.512
I've got to go back, sorry.

41
00:02:39.512 --> 00:02:40.818
Let me show you this first.

42
00:02:40.818 --> 00:02:47.098
[COUGH]
&gt;&gt; Zac Gordon: These are all

43
00:02:47.098 --> 00:02:53.600
the possible roots, this is better to look
at first, so if we go to site.com/wp-json.

44
00:02:53.600 --> 00:02:58.700
That's what we call the root
of our API access point, so

45
00:02:58.700 --> 00:03:03.010
in any site now that has WordPress API
enabled which is pretty much

46
00:03:03.010 --> 00:03:07.340
every current version of WordPress unless
you go out of your way to disable it.

47
00:03:07.340 --> 00:03:10.741
You could access all their
public data by the structure, so

48
00:03:10.741 --> 00:03:15.639
notice that we get posts, post revisions,
categories, tags, pages, comments,

49
00:03:15.639 --> 00:03:19.261
taxonomies, medias, users types,
statuses and settings.

50
00:03:19.261 --> 00:03:21.914
Now some of these have
protected settings so

51
00:03:21.914 --> 00:03:26.010
the general public cannot just go in and
look at all your usernames.

52
00:03:26.010 --> 00:03:28.580
And some things don't necessarily,

53
00:03:28.580 --> 00:03:32.998
[COUGH] behave how you might expect
like If you have 100 users but

54
00:03:32.998 --> 00:03:37.973
only 1 of them has published a blog post
or published a page on your site and

55
00:03:37.973 --> 00:03:43.779
the other people are just subscribers, you
will only see 1 user when you go to users.

56
00:03:43.779 --> 00:03:48.041
So users are only gonna be someone who
would show up on your author sections as

57
00:03:48.041 --> 00:03:49.850
an author on your site anyways.

58
00:03:49.850 --> 00:03:54.636
[COUGH] The other thing that we have
access to are custom endpoints, so

59
00:03:54.636 --> 00:03:57.202
plug-ins are really big with this.

60
00:03:57.202 --> 00:04:02.172
If you're familiar with WooCommerce,
which is the go-to e-commerce solution,

61
00:04:02.172 --> 00:04:06.731
along with easy digital downloads
a little bit simpler, also very popular.

62
00:04:06.731 --> 00:04:11.508
You'll see something like woo/v
something/ something else and

63
00:04:11.508 --> 00:04:14.327
then it will have a bunch of endpoints.

64
00:04:14.327 --> 00:04:17.585
And it's also possible to create
your own custom endpoints and

65
00:04:17.585 --> 00:04:20.175
this is something that's
important to mention.

66
00:04:20.175 --> 00:04:25.081
One of the examples we'll look at in a
moment here is gonna be a custom endpoint

67
00:04:25.081 --> 00:04:28.700
that basically provides
post data simplified.

68
00:04:28.700 --> 00:04:31.682
Because what you'll see
when you go into /posts and

69
00:04:31.682 --> 00:04:34.946
you get a post data,
it's gonna have a ton of data there.

70
00:04:34.946 --> 00:04:39.873
And there's actually several queries
to the database that have to go on,

71
00:04:39.873 --> 00:04:43.613
it has to make one query to
get the title and the content.

72
00:04:43.613 --> 00:04:47.257
It has to make another to necessarily
get the name of the author,

73
00:04:47.257 --> 00:04:49.426
another one to the this piece of data.

74
00:04:49.426 --> 00:04:52.865
So, it is often pooling together
more than one thing at a time, or

75
00:04:52.865 --> 00:04:56.755
just because it has to get so many
different things it could be expensive.

76
00:04:56.755 --> 00:05:00.565
So when people talk about the benefits
of the WordPress REST API and

77
00:05:00.565 --> 00:05:03.229
talk about speed as one
of the largest things.

78
00:05:03.229 --> 00:05:07.631
This is not necessarily true out of the
box, just because you use JavaScript and

79
00:05:07.631 --> 00:05:11.191
just because you use an API,
doesn't mean it's gonna be fast.

80
00:05:11.191 --> 00:05:13.614
You have to use it in a performant way and

81
00:05:13.614 --> 00:05:18.397
be intelligent about what you're doing,
and try to write performant code.

82
00:05:18.397 --> 00:05:23.130
So for that reason, what I have
seen from a lot of professionals in

83
00:05:23.130 --> 00:05:28.311
the field that are leading edge,
in terms of using WordPress as an API.

84
00:05:28.311 --> 00:05:31.824
Is that they do not vary often
leverage the default end

85
00:05:31.824 --> 00:05:34.649
points because they could be quite heavy.

86
00:05:34.649 --> 00:05:38.656
What they do instead is figure out
exactly what data they need, and

87
00:05:38.656 --> 00:05:42.821
then go and write some custom end
points and just get that exact data.

88
00:05:42.821 --> 00:05:46.081
And then, everything is gonna be a little
bit lighter, a little bit faster so,

89
00:05:46.081 --> 00:05:48.280
you'll have an example of how to do that.

90
00:05:48.280 --> 00:05:51.588
To really go deep you're going
to need to know some PHP, but

91
00:05:51.588 --> 00:05:53.055
this will be a good start.

92
00:05:53.055 --> 00:05:57.983
The other thing about this is that,
[COUGH] as we go to this URL

93
00:05:57.983 --> 00:06:02.617
to get all of our posts,
if we add the ID you the end of it,

94
00:06:02.617 --> 00:06:06.279
then were going to get
back a specific post.

95
00:06:06.279 --> 00:06:11.562
So same is true of pages, media,
all of these different endpoints.

96
00:06:11.562 --> 00:06:16.392
If you put slash and then an ID number
after it in some sought of formats it

97
00:06:16.392 --> 00:06:19.370
will be a little different for
some of them,

98
00:06:19.370 --> 00:06:23.736
then you are going to get just that
one post or just that one page.

99
00:06:23.736 --> 00:06:26.880
So again this will get us all our posts,

100
00:06:26.880 --> 00:06:32.614
this will get us one post of the Id of
one, this will get us all our pages.

101
00:06:32.614 --> 00:06:34.525
Guess what this will do?

102
00:06:34.525 --> 00:06:38.779
Get us a page with an ID of one, right?

103
00:06:38.779 --> 00:06:40.218
This is not right.

104
00:06:48.538 --> 00:06:54.332
&gt;&gt; Zac Gordon: I made the example a little
too easy, okay, so you need that in it.

105
00:06:54.332 --> 00:06:59.008
And with this up I could talk
about a few things in terms of

106
00:06:59.008 --> 00:07:02.500
the name spacing and how endpoints work.

107
00:07:02.500 --> 00:07:06.485
So you'll notice that we have,
I'm sorry, let me open that up again.

108
00:07:06.485 --> 00:07:10.690
[COUGH]
&gt;&gt; Speaker 2: You just added -json?

109
00:07:10.690 --> 00:07:14.430
&gt;&gt; Zac Gordon: Yeah, I added -json
which is absolutely essential,

110
00:07:14.430 --> 00:07:17.531
it will not work if you
try to go to /wp/v2.

111
00:07:17.531 --> 00:07:24.850
So wp-json will get us to our root index,
wp will get us just WordPress endpoints.

112
00:07:24.850 --> 00:07:28.663
So like I said, if there are plugins
installed like Jetpack and WooCommerce,

113
00:07:28.663 --> 00:07:32.620
more and more plugins now are starting to
shift with their own custom endpoints.

114
00:07:32.620 --> 00:07:36.210
Instead of wp there you'd see custom or
you would WooCommerce or

115
00:07:36.210 --> 00:07:40.262
you would see Jetpack or you would see
God bless you or whatever it is, and

116
00:07:40.262 --> 00:07:42.341
then whatever version they're on.

117
00:07:42.341 --> 00:07:47.253
So they're not necessarily gonna be on
version 2, right, they might be on version

118
00:07:47.253 --> 00:07:51.631
1, they might be version 6,
WordPress just happens to be on version 2.

119
00:07:51.631 --> 00:07:56.163
And once they go to version 3, the nice
thing is, is that with this kinda syntax,

120
00:07:56.163 --> 00:07:59.660
if you wanna keep using version 2,
it won't break anything.

121
00:07:59.660 --> 00:08:04.259
So a versioning was left off,
let's say it was just /wp/pages/1, and

122
00:08:04.259 --> 00:08:08.712
then WordPress updated and
change it's underlying architecture of how

123
00:08:08.712 --> 00:08:12.145
the API's returning data,
it'll break everything.

124
00:08:12.145 --> 00:08:15.850
So that's why you want to have that
versioning included and why it's there,

125
00:08:15.850 --> 00:08:19.213
and why the WP is there, is because
you can also get other endpoints and

126
00:08:19.213 --> 00:08:20.990
other plugins and things like that.

