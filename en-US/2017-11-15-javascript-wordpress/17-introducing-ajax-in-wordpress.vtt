WEBVTT

1
00:00:00.300 --> 00:00:05.640
&gt;&gt; Zac Gordon: With just this little bit
of code, you could build a whole view app

2
00:00:05.640 --> 00:00:09.920
right here, and you could have it hooking
in to all the stuff that you need.

3
00:00:09.920 --> 00:00:12.340
So if you ever wanted to
create a WordPress plugin and

4
00:00:12.340 --> 00:00:15.580
power the whole thing with JavaScript,
it's just these few lines that will kick

5
00:00:15.580 --> 00:00:18.950
everything off, and then it's all
in the API to do whatever you want.

6
00:00:18.950 --> 00:00:22.230
Okay, so we'll show that stuff later,
but we needed to get this far.

7
00:00:23.790 --> 00:00:30.085
Any questions about difference
between working with a plug in and

8
00:00:30.085 --> 00:00:35.476
working with a theme in terms
of enqueuing JavaScript?

9
00:00:36.807 --> 00:00:38.850
Now got it!

10
00:00:38.850 --> 00:00:40.860
See I told you it's gonna
become second nature.

11
00:00:40.860 --> 00:00:44.180
How many people don't know what WP and
script does at this point?

12
00:00:45.830 --> 00:00:49.070
Success, we have learned
how to enqueue JavaScript.

13
00:00:49.070 --> 00:00:51.430
We're bored with it, we want to move on.

14
00:00:51.430 --> 00:00:55.615
So let's get weird and
look at some AJAX in WordPress and

15
00:00:55.615 --> 00:01:00.430
[COUGH] I have to warn you that AJAX
is a little weird in WordPress.

16
00:01:00.430 --> 00:01:05.659
And if you've ever worked with AJAX and
PHP, the way it usually works is you

17
00:01:05.659 --> 00:01:10.722
have Some JavaScript that's going to
make a call off a certain PHP file.

18
00:01:10.722 --> 00:01:13.799
The PHP file is going to run some code and

19
00:01:13.799 --> 00:01:18.750
then return some code back that
the AJAX request will wait for.

20
00:01:18.750 --> 00:01:21.319
Now you can make really
simple AJAX request,

21
00:01:21.319 --> 00:01:25.316
like hey just go to my homepage and
scrape all the data and give it to me.

22
00:01:25.316 --> 00:01:27.050
And then I will do something with it.

23
00:01:27.050 --> 00:01:28.940
But when I talk about
AJAX in this context,

24
00:01:28.940 --> 00:01:32.130
I'm really talking about AJAX
that is interacting somehow.

25
00:01:32.130 --> 00:01:36.189
With the WordPress backend and code so
like in the AJAX example we're gonna do

26
00:01:36.189 --> 00:01:39.872
you click a button and it likes something
and adds it to the database and

27
00:01:39.872 --> 00:01:43.886
then gives you back the updated value and
that you could update on your site.

28
00:01:43.886 --> 00:01:47.866
Okay, so when I say AJAX and WordPress I
don't mean [COUGH] from a purely

29
00:01:47.866 --> 00:01:51.862
technical level, anything that's
sending out an HML HTTP request.

30
00:01:51.862 --> 00:01:55.928
I'm talking about specifically doing
something that's gonna interact with

31
00:01:55.928 --> 00:01:59.931
the database or the code in WordPress that
we kind of want to have protected and

32
00:01:59.931 --> 00:02:03.090
there's a few extra steps
along the way there.

33
00:02:03.090 --> 00:02:05.710
So the first thing we
have to do is inside of

34
00:02:05.710 --> 00:02:09.530
our PHP remember how we could pass in
stuff through our localized script?

35
00:02:09.530 --> 00:02:14.206
We're going to be passing in a Nonce and
URL.

36
00:02:14.206 --> 00:02:18.391
[COUGH] A Nonce is a number used only
once and it's a unique string and

37
00:02:18.391 --> 00:02:23.249
WordPress will generate it for us when
the page is loaded and then if we make any

38
00:02:23.249 --> 00:02:28.690
AJAX requests it's going to look for
that exact same string back to verify.

39
00:02:28.690 --> 00:02:32.399
So if somebody,
let's say we know the URL in WordPress,

40
00:02:32.399 --> 00:02:37.058
if we want to ping it and make a request
from some other site on to our's.

41
00:02:37.058 --> 00:02:40.989
If we don't have that Nonce
attached to it it will refuse it so

42
00:02:40.989 --> 00:02:46.324
this is one of the validation methods that
WordPress uses and very helpful for us.

43
00:02:46.324 --> 00:02:52.181
[COUGH] Also the URL, our code that we're
gonna run is in our functions.php file for

44
00:02:52.181 --> 00:02:56.962
themes, so where even if it's in a plugin,
how do you get that URL.

45
00:02:56.962 --> 00:03:02.723
Do you type in
site.com/wp-contents/plugins/mycontmyplug-

46
00:03:02.723 --> 00:03:04.790
ins/assetsjsteams?

47
00:03:04.790 --> 00:03:10.890
No, we have to root every single AJAX
call in WordPress goes to a single URL.

48
00:03:10.890 --> 00:03:15.540
And then, WordPress mechanics behind
the scenes figures out what function and

49
00:03:15.540 --> 00:03:17.970
where should process that call.

50
00:03:17.970 --> 00:03:23.160
So we're passing a unique Nonce
every time, and the exact same URL.

51
00:03:23.160 --> 00:03:26.750
Okay, so all AJAX requests are basically
gonna get the same URL but

52
00:03:26.750 --> 00:03:28.560
a different Nonce each time.

53
00:03:28.560 --> 00:03:32.040
Then in our JavaScript we need to
actually make that call right?

54
00:03:32.040 --> 00:03:33.870
So jQuery is pretty easy for this.

55
00:03:33.870 --> 00:03:37.290
There's native fetch,
there is Axel which will look at as well.

56
00:03:37.290 --> 00:03:38.280
There's a lot of different way.

57
00:03:38.280 --> 00:03:42.082
Hey, you could even use
a straight up on HTTP request.

58
00:03:42.082 --> 00:03:45.620
I wouldn't recommend it but
it's all possible.

59
00:03:45.620 --> 00:03:50.060
But you have to pass this Nonce and
the URL back in a very specific ways.

60
00:03:50.060 --> 00:03:53.500
So that's the part I wanna show you and
that's where we're gonna be copying and

61
00:03:53.500 --> 00:03:57.007
pasting as hey, right here in our AJAX
call, we won't type out the whole thing.

62
00:03:57.007 --> 00:03:58.550
I'm gonna assume at this point,

63
00:03:58.550 --> 00:04:01.540
you've probably seen a jQuery
AJAX calling your life.

64
00:04:01.540 --> 00:04:03.590
So it won't leave you
shaking in your boots, and

65
00:04:03.590 --> 00:04:06.293
it's really just figuring out how
to pass the Nonce and the URL.

66
00:04:06.293 --> 00:04:11.495
So the AJAX call is made into WordPress,
then we need to pass

67
00:04:11.495 --> 00:04:16.870
it to the right place, so
there's some Hooks involved.

68
00:04:16.870 --> 00:04:21.420
And then we have the PHP
function that actually processes,

69
00:04:21.420 --> 00:04:26.170
gets the code, and gives us back the data,
and then JavaScript on the other end.

70
00:04:26.170 --> 00:04:31.080
So step one, not normal in all AJAX.

71
00:04:31.080 --> 00:04:34.190
Step two, maybe it's normal,
maybe it's not,

72
00:04:34.190 --> 00:04:37.470
depending on security methods,
but not always.

73
00:04:37.470 --> 00:04:40.687
Three, definitely not normal, right?

74
00:04:40.687 --> 00:04:44.478
We don't normally build a PHP app
that interjects all AJAX requests and

75
00:04:44.478 --> 00:04:48.560
filters and redirects them on their own,
but WordPress will.

76
00:04:48.560 --> 00:04:50.927
And step four is completely normal, right?

77
00:04:50.927 --> 00:04:55.570
So steps two and four and
five you have to have every time.

78
00:04:55.570 --> 00:05:02.120
So we're just adding in this extra
hook and the passing out the Nounce.

79
00:05:02.120 --> 00:05:04.296
Luckily this is mostly stuff
that we've done already.

