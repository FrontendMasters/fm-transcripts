WEBVTT

1
00:00:00.400 --> 00:00:01.660
&gt;&gt; Zac Gordon: Another
thing that we could do,

2
00:00:01.660 --> 00:00:07.600
is we could pass arguments into the API
URLs and customize what we get back.

3
00:00:07.600 --> 00:00:13.000
So what I mean by that is, let's say we're
gonna get all the pages on our site.

4
00:00:14.535 --> 00:00:17.095
All right, this is a duplication, sorry.

5
00:00:17.095 --> 00:00:19.935
Let's say we're going to
get all of our posts here.

6
00:00:19.935 --> 00:00:24.205
If we were to add this query string,
now this would all appear in one line.

7
00:00:24.205 --> 00:00:28.965
I'm just doing it to break it up and
show you the possible order.

8
00:00:28.965 --> 00:00:32.680
Now what we're gonna get
is limited to ten pages.

9
00:00:32.680 --> 00:00:34.670
It's going to have embedded data.

10
00:00:34.670 --> 00:00:37.000
So this makes an extra query and

11
00:00:37.000 --> 00:00:40.640
it pulls in even more data
associated with that post.

12
00:00:40.640 --> 00:00:44.010
We're going to find things that only
have the search phrase, hello world.

13
00:00:44.010 --> 00:00:46.000
And I wanted to show this as an example.

14
00:00:46.000 --> 00:00:47.640
If you put a space bar, or

15
00:00:47.640 --> 00:00:51.770
a space in the URL as we're typing it in,
it'll actually work.

16
00:00:51.770 --> 00:00:56.080
And if you put this %20, which anybody
who's tried to put a space in a URL,

17
00:00:56.080 --> 00:01:00.190
you know what that does, that will
be valid spaces and work for you.

18
00:01:00.190 --> 00:01:03.360
So you could search for certain posts.

19
00:01:03.360 --> 00:01:06.450
And then another big one that's
really common is orderby and order.

20
00:01:06.450 --> 00:01:09.740
So order is only gonna be ascending or
descending.

21
00:01:09.740 --> 00:01:12.800
And orderby could be like titles,
it's date by default.

22
00:01:12.800 --> 00:01:14.650
It could be other things as well.

23
00:01:16.240 --> 00:01:20.840
So, it's worth taking a look
over at the documentation and

24
00:01:22.170 --> 00:01:26.980
let me just start at the homepage for
the rest documentation.

25
00:01:29.070 --> 00:01:31.292
This is stuff you're gonna
wanna get familiar with.

26
00:01:31.292 --> 00:01:34.840
You're gonna wanna bookmark it or
you know put it up there because

27
00:01:34.840 --> 00:01:37.850
there is a lot of data in here
that is important for you to know.

28
00:01:37.850 --> 00:01:39.890
And particularly when you
are first starting off,

29
00:01:39.890 --> 00:01:44.280
remember how I showed you there were
various endpoints that you could access.

30
00:01:44.280 --> 00:01:47.540
Well, here they are and
here is the documentation on all of them.

31
00:01:47.540 --> 00:01:54.990
So if I wanted to find out what arguments
I can pass to getting a list of posts.

32
00:01:54.990 --> 00:02:00.120
I can click on argument and
you could see now,

33
00:02:00.120 --> 00:02:05.140
how many per page, search, after or
things publish after certain date,

34
00:02:05.140 --> 00:02:08.030
publish by a certain author,
not publish by an author.

35
00:02:09.330 --> 00:02:12.850
Before a certain date, so you can get a
date range, right, if you pass before and

36
00:02:12.850 --> 00:02:14.120
after dates.

37
00:02:14.120 --> 00:02:18.110
You could exclude certain things,
include certain things, offset order.

38
00:02:18.110 --> 00:02:20.410
Offset is helpful for pagination, right?

39
00:02:20.410 --> 00:02:21.400
So you could say, get ten,

40
00:02:21.400 --> 00:02:26.790
and then the next time give me
the next ten after the first ten.

41
00:02:26.790 --> 00:02:31.970
The order, the orderby, get something
by slug, by certain status, categories,

42
00:02:31.970 --> 00:02:37.280
tags, basically anything you'd want to
query something by, we could do that.

43
00:02:37.280 --> 00:02:41.970
So when we talk about how to get
data from the WordPress REST API,

44
00:02:41.970 --> 00:02:45.550
writing in AJAX reuest,
is pretty simple at this point, right?

45
00:02:45.550 --> 00:02:47.597
There's a bunch of different
tools we could use for it.

46
00:02:47.597 --> 00:02:51.583
So it's really gonna be a matter of
getting comfortable with the different

47
00:02:51.583 --> 00:02:56.460
arguments that are possible to get us
exactly what it is that we're looking for.

48
00:02:56.460 --> 00:02:58.720
And we don't have enough time today.

49
00:02:58.720 --> 00:03:01.130
We're gonna play around with
passing some of these just so

50
00:03:01.130 --> 00:03:04.889
you get comfortable with it, but
you really need a lot of time because

51
00:03:06.240 --> 00:03:08.990
not only are there posts,
but then there's media.

52
00:03:08.990 --> 00:03:12.905
And media could have slightly different
arguments that can be passed to it,

53
00:03:12.905 --> 00:03:16.230
just like comments are gonna
have different arguments.

54
00:03:16.230 --> 00:03:21.770
So this will be something you will
at a certain point if you decide

55
00:03:21.770 --> 00:03:25.920
to go forward with the WordPress REST API,
and building apps with it or projects.

56
00:03:25.920 --> 00:03:27.100
Use this documentation.

57
00:03:27.100 --> 00:03:29.270
Take the time to explore what's possible.

58
00:03:29.270 --> 00:03:31.630
And the cool thing is,
we could do all this from the browser.

59
00:03:31.630 --> 00:03:34.200
So it's pretty simple to play around with.

60
00:03:34.200 --> 00:03:36.660
Or if you have other tools that you like,
like Postman.

61
00:03:36.660 --> 00:03:39.770
I'm not gonna be using that here,
but that's a pretty common one for

62
00:03:39.770 --> 00:03:41.740
exploring APIs.

63
00:03:41.740 --> 00:03:44.650
We could pass as many
of this that we want,

64
00:03:44.650 --> 00:03:47.970
but I do wanna draw your
attention again to embed.

65
00:03:47.970 --> 00:03:51.700
Notice how it doesn't follow
the same format as the rest of them.

66
00:03:51.700 --> 00:03:53.900
It could be chained in the same way but

67
00:03:53.900 --> 00:03:58.120
embed is just _embed,
it takes no argument or value.

68
00:03:58.120 --> 00:04:02.160
Or it takes no value and what that is
going to do we'll look at in a second and

69
00:04:02.160 --> 00:04:04.316
you'll see that it gets even more data.

70
00:04:04.316 --> 00:04:08.130
But remember that the more data you try to
pull in, the more expensive that query,

71
00:04:08.130 --> 00:04:10.580
the more potential time you maybe waiting.

72
00:04:10.580 --> 00:04:15.550
And way way down the road outside
the scope of this, there are discussions

73
00:04:15.550 --> 00:04:20.810
around, okay, can we even cash certain
API endpoints to make them even faster?

74
00:04:20.810 --> 00:04:23.160
And how do we go about
the best way of doing that?

75
00:04:23.160 --> 00:04:25.960
So once you get the data,
that's one thing.

76
00:04:25.960 --> 00:04:28.700
And then you could worry about
making it even more performant.

