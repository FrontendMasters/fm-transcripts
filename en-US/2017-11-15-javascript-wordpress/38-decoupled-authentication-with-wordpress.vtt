WEBVTT

1
00:00:00.590 --> 00:00:03.139
&gt;&gt; Zac Gordon: When it comes to
decoupled authentication, so

2
00:00:03.139 --> 00:00:07.483
that means we're running on a site or
instance separate from the WordPress one.

3
00:00:07.483 --> 00:00:09.460
We're not in a theme,
we're not in a plugin.

4
00:00:09.460 --> 00:00:12.220
We have a few options for authentication.

5
00:00:12.220 --> 00:00:15.670
First one is BasicAuth, and with BasicAuth

6
00:00:15.670 --> 00:00:20.400
what you do is you have to install
a BasicAuth plugin on your WordPress site.

7
00:00:20.400 --> 00:00:26.863
And then you basically pass over SSL, your
username, and password with every request,

8
00:00:26.863 --> 00:00:31.098
and so that would be saved and
passed over again and again.

9
00:00:31.098 --> 00:00:33.138
This is not really the preferred method,

10
00:00:33.138 --> 00:00:36.040
although you're trying to
get something testing.

11
00:00:36.040 --> 00:00:38.352
It could be an option, but remember,

12
00:00:38.352 --> 00:00:42.558
you need a BasicAuth plugin on your
site and then your code can use it.

13
00:00:42.558 --> 00:00:46.448
The next option and the one that
we're going to be looking at, and

14
00:00:46.448 --> 00:00:49.219
we even have a course on,
are JSON web tokens.

15
00:00:49.219 --> 00:00:52.187
This is still using your username and
password, but

16
00:00:52.187 --> 00:00:56.774
a slightly different architecture behind
the scenes to pass it back and forth and

17
00:00:56.774 --> 00:01:00.970
using tokens In addition to just
passing a straight password every time.

18
00:01:00.970 --> 00:01:03.562
So that means that you don't have
to send it over and over again,

19
00:01:03.562 --> 00:01:04.526
slightly more secure.

20
00:01:04.526 --> 00:01:05.212
And guess what?

21
00:01:05.212 --> 00:01:08.654
Frontend Masters has a course on JWT,
so go check that out and

22
00:01:08.654 --> 00:01:10.720
that's what we'll be using.

23
00:01:10.720 --> 00:01:16.260
But again with JWT you also need a JWT
plugin installed on your site to create

24
00:01:16.260 --> 00:01:20.690
the endpoint and process all the data
when we try to hit it By default right

25
00:01:20.690 --> 00:01:25.100
now WordPress does not have decoupled
authentication baked into course.

26
00:01:25.100 --> 00:01:29.020
So all of these thing that we look at or
going to involve some sort of plug in.

27
00:01:30.640 --> 00:01:34.330
Then we have OAuth one and two and
they are options for both of these.

28
00:01:34.330 --> 00:01:39.810
Again you need stuff setup on your
WordPress site, the plug in install And

29
00:01:39.810 --> 00:01:43.440
in your code you need to write
all the code to handle that and

30
00:01:43.440 --> 00:01:46.560
there's a few plug ins that
are available for that, and

31
00:01:46.560 --> 00:01:51.190
if you look at the main WordPress rest
API it recommends some specific one's.

32
00:01:52.520 --> 00:01:57.990
Then there's a whole another system
called, The WordPress API Broker.

33
00:01:57.990 --> 00:02:02.820
So, if you are building an app or
you built a site that you

34
00:02:02.820 --> 00:02:07.190
want people to be able to ping with an
API, and you're creating that username and

35
00:02:07.190 --> 00:02:11.710
password and you know your credentials
to do it, that's one thing.

36
00:02:11.710 --> 00:02:16.040
But what happens when you want other
people to create credentials on the fly

37
00:02:16.040 --> 00:02:19.760
and interact with your site On their own.

38
00:02:19.760 --> 00:02:23.430
What you introduce at that point is a
broker that will kind of sit between your

39
00:02:23.430 --> 00:02:27.350
site and allow people to get access and

40
00:02:27.350 --> 00:02:29.710
credentials that are still secure and
processed.

41
00:02:29.710 --> 00:02:32.900
So you can check out this URL for
more on that,

42
00:02:32.900 --> 00:02:37.220
it's definitely an advanced thing, so
you want to know what you're doing.

43
00:02:37.220 --> 00:02:38.950
With OAuth to begin.

44
00:02:38.950 --> 00:02:41.950
But the W API Broker is
a really powerful thing.

45
00:02:41.950 --> 00:02:46.910
And if we wanted to someday see
something like how you could

46
00:02:46.910 --> 00:02:51.990
use GitHub or Google Account to
login to different other accounts,

47
00:02:51.990 --> 00:02:55.460
you could potentially set up your
WordPress site To work that way.

48
00:02:55.460 --> 00:02:58.850
Now, you need a lot of distribution,
so it's likely to happen.

49
00:02:58.850 --> 00:03:02.730
There will maybe be a case where somebody
needs this for a project or something, so

50
00:03:02.730 --> 00:03:03.660
that's why I'm mentioning it.

51
00:03:03.660 --> 00:03:11.720
And then finally, I also wanna point
out that there is another API client.

52
00:03:11.720 --> 00:03:13.480
So we're doing all of this by hand.

53
00:03:13.480 --> 00:03:18.290
We're using and we're hardcoding in
the requests we wanna do every time.

54
00:03:18.290 --> 00:03:21.920
If we didn't want to do that
there is a really great client

55
00:03:21.920 --> 00:03:26.770
called the Node Word Press API Client and
it's just Java Script it can run node but

56
00:03:26.770 --> 00:03:27.920
it doesn't have to be nodes.

57
00:03:27.920 --> 00:03:30.300
So, you can use it just any client side.

58
00:03:30.300 --> 00:03:36.710
And I kinda debated between having a whole
example be in this client versus not.

59
00:03:36.710 --> 00:03:40.150
And the reason I chose is not to do or
demo with this.

60
00:03:40.150 --> 00:03:44.200
Is that if we only rely on clients and
then the client can't so

61
00:03:44.200 --> 00:03:46.580
something we want,
we're kind of in hot water.

62
00:03:46.580 --> 00:03:49.750
So if we learn how to do it the most
flexible way from the start and

63
00:03:49.750 --> 00:03:52.940
then we learn and approach later on,
it makes everything easier for

64
00:03:52.940 --> 00:03:57.730
90 to 99% of the cases,
then this is a way better scenario.

65
00:03:57.730 --> 00:04:00.920
So, in the final repo,
I haven't put it up there.

66
00:04:00.920 --> 00:04:04.730
I'll give you a whole app that's
built with the node API client.

67
00:04:04.730 --> 00:04:07.440
So you can see, and
it's similar to the backbone one, but

68
00:04:07.440 --> 00:04:12.230
it's even cleaner in how stuff works,
it's got a really great syntax.

69
00:04:12.230 --> 00:04:17.450
And it has a little bit of authentication
baked into it, but not everything.

70
00:04:17.450 --> 00:04:19.970
So you can't do OAuth and JWT, but

71
00:04:19.970 --> 00:04:24.200
if you wanted to do BasicAuth, it has
the support to be able to handle that.

72
00:04:24.200 --> 00:04:27.690
And I do believe that It will continue
to be supported and grown, and

73
00:04:27.690 --> 00:04:31.180
have other authentication
methods going forward.

74
00:04:31.180 --> 00:04:36.150
So this is what we need to know,
to basically

75
00:04:36.150 --> 00:04:40.000
have the frame of reference to be able to
start working with this authentication.

76
00:04:40.000 --> 00:04:45.490
Remember SSL on your WordPress site,
SSL on your decoupled app.

77
00:04:45.490 --> 00:04:47.950
Plugin to handle whatever authentication.

78
00:04:47.950 --> 00:04:52.580
So BasicOAuth plugin, JWT plugin,
OAuth 1 OAuth 2 plugin, whatever.

79
00:04:52.580 --> 00:04:55.670
And then you call that from your site.

