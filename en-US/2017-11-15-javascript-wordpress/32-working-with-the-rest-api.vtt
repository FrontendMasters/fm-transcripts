WEBVTT

1
00:00:00.250 --> 00:00:01.188
&gt;&gt; Zac Gordon: We went through this app.

2
00:00:01.188 --> 00:00:02.290
This is pretty simple.

3
00:00:02.290 --> 00:00:07.909
Now, it's probably worth taking a moment
to talk about is this a good idea right?

4
00:00:07.909 --> 00:00:11.388
Just because we can do something,
doesn't mean that we necessarily should.

5
00:00:11.388 --> 00:00:15.770
So what are the pro's and
con's of building an app like this?

6
00:00:15.770 --> 00:00:18.979
Well one of the pro's is,
that if you have someone login,

7
00:00:18.979 --> 00:00:21.871
like let's say that we have
a login on the front end.

8
00:00:21.871 --> 00:00:25.766
Cuz it doesn't make much sense if you were
log out of WordPress to log into the back

9
00:00:25.766 --> 00:00:29.449
end where you see all those options and
then coming to the front end, right?

10
00:00:29.449 --> 00:00:32.630
But if you can have a log in here,
somebody just posting really simply.

11
00:00:32.630 --> 00:00:35.787
They can do it right there, it's pretty
clean, they number after see the back end.

12
00:00:35.787 --> 00:00:38.096
They never even have to
know it's WordPress, right?

13
00:00:38.096 --> 00:00:40.101
So, that's pretty great.

14
00:00:40.101 --> 00:00:43.000
On the other hand,
how do we add categories?

15
00:00:43.000 --> 00:00:44.501
How do we add a featured image?

16
00:00:44.501 --> 00:00:48.330
How do we do the excerpt?

17
00:00:48.330 --> 00:00:52.082
All of these things are not included,
so to get to that next level,

18
00:00:52.082 --> 00:00:53.894
you would have to code way more.

19
00:00:53.894 --> 00:00:58.142
Like the amount that we did is this much
but the amount to get to everywhere.

20
00:00:58.142 --> 00:01:02.393
So, this is where a trade off I wanna
suggest is, is that if it's a simple

21
00:01:02.393 --> 00:01:06.109
kind of quick thing or for
that particular client or used case.

22
00:01:06.109 --> 00:01:08.134
You're like yeah but
just hide the whole thing,

23
00:01:08.134 --> 00:01:10.170
let's make it this clean as possible.

24
00:01:10.170 --> 00:01:14.639
But, if you want to rebuild the entire
admin area and all the functionality,

25
00:01:14.639 --> 00:01:18.303
this is a bad idea and
we'll take you way longer than you think.

26
00:01:18.303 --> 00:01:21.656
Hashtag Calypso has teams of
full time developers, and

27
00:01:21.656 --> 00:01:24.733
they still haven't even
finish all the features.

28
00:01:24.733 --> 00:01:29.533
And I have heard this, I haven't seen this
statistics but a good portion of people

29
00:01:29.533 --> 00:01:34.267
who run large sites on WordPress.com,
still opens the traditional editor to do

30
00:01:34.267 --> 00:01:38.743
certain things that aren't fully flash
out in the full react version of it.

31
00:01:38.743 --> 00:01:42.816
But all that said, I think one of
the best places and biggest wins for

32
00:01:42.816 --> 00:01:45.963
doing something like this
that we've looked at is,

33
00:01:45.963 --> 00:01:48.773
let's say this was a portfolio page,
right?

34
00:01:48.773 --> 00:01:52.437
And you had a nice your portfolio pieces
and you click on one and you don't

35
00:01:52.437 --> 00:01:57.590
need to load a new page, it just pops it
open right there, it's all nice and clean.

36
00:01:57.590 --> 00:02:00.994
One of the problems you're
gonna get to though,

37
00:02:00.994 --> 00:02:05.891
if you try to build an entire single
page web app with posts and pages and

38
00:02:05.891 --> 00:02:08.964
URL structures all running in JavaScript,

39
00:02:08.964 --> 00:02:13.719
you get into some issues because
you need to have fallbacks for PHP.

40
00:02:13.719 --> 00:02:18.346
So let's say for
example that when I click on this link it

41
00:02:18.346 --> 00:02:23.650
puts a hashtag up here and
then that URL structure, right?

42
00:02:23.650 --> 00:02:28.106
Well then we need to write some extra
bit of code, some basic routing code,

43
00:02:28.106 --> 00:02:31.524
to figure out what URL we're on and
pull it in to the page.

44
00:02:31.524 --> 00:02:34.736
The other thing is,
is that WordPress already has a page and

45
00:02:34.736 --> 00:02:36.350
a template for this.

46
00:02:36.350 --> 00:02:41.055
So what a lot of folks who are doing, who
are building real rich themes that work

47
00:02:41.055 --> 00:02:45.902
well, they still have some PHP on the back
end to handle potentially if something

48
00:02:45.902 --> 00:02:49.276
doesn't go through or
if the JavaScript isn't there.

49
00:02:49.276 --> 00:02:54.007
But then they're building their whole
JavaScript app on top of the full theme,

50
00:02:54.007 --> 00:02:54.510
right?

51
00:02:54.510 --> 00:02:58.356
So the problem again is is if you get
into different URL structures and

52
00:02:58.356 --> 00:03:01.885
somehow JavaScript isn't loading,
you want some fallback.

53
00:03:01.885 --> 00:03:03.098
The JavaScript space, and

54
00:03:03.098 --> 00:03:06.750
I think Frontend Masters is possibly mixed
on this depending on the application.

55
00:03:06.750 --> 00:03:08.788
But a lot of folks are saying now,
we don't need fallbacks.

56
00:03:08.788 --> 00:03:11.811
You know, try to run Facebook or
your mail or

57
00:03:11.811 --> 00:03:17.225
Major applications without JavaScript,
and it's probably not happening.

58
00:03:17.225 --> 00:03:22.172
So you need to make that decision of if
it makes sense and how possible is it.

59
00:03:22.172 --> 00:03:25.144
And then when you get into
routing on top of WordPress,

60
00:03:25.144 --> 00:03:27.480
you will eventually hit some weird issue.

61
00:03:27.480 --> 00:03:30.582
So I just wanna share that and
point that out.

62
00:03:30.582 --> 00:03:34.966
So all this is to say that you can do
a ton with the WordPress rest API.

63
00:03:34.966 --> 00:03:39.942
And I just wanna point
out a few examples here

64
00:03:39.942 --> 00:03:46.295
that,
&gt;&gt; Zac Gordon: We're not going to go

65
00:03:46.295 --> 00:03:50.940
through, but I just want to show you that
they are here for your reference, okay?

66
00:03:52.070 --> 00:03:57.251
So, if we come into section five,
we stopped at deleting posts.

67
00:03:57.251 --> 00:04:00.890
So I'm not going to go through
all the code with you all here.

68
00:04:00.890 --> 00:04:02.828
It looks like most people
got pretty far along and

69
00:04:02.828 --> 00:04:05.013
at this point you understand
how these examples work.

70
00:04:05.013 --> 00:04:08.900
So the next thing is the axio stemo.

71
00:04:08.900 --> 00:04:11.972
So if you wanted to not use
the backbone client, and

72
00:04:11.972 --> 00:04:16.195
one of the examples we never did,
notice there's no 5.3, right?

73
00:04:16.195 --> 00:04:21.320
5.3 was suppose to be getting custom and
points of the backbone clients.

74
00:04:21.320 --> 00:04:23.627
It's great for
having post pages everything, but

75
00:04:23.627 --> 00:04:25.030
what if we had our simple post.

76
00:04:25.030 --> 00:04:29.825
You need to do some extra code that
I wasn't able quite work out in order

77
00:04:29.825 --> 00:04:32.438
to this backbone with customs stuff.

78
00:04:32.438 --> 00:04:38.136
So, the case where you might want
to use axious is if you're running,

79
00:04:38.136 --> 00:04:39.690
all custom stuff.

80
00:04:39.690 --> 00:04:42.846
And you don't really want to have to
worry about the backbone client or

81
00:04:42.846 --> 00:04:44.355
customizing it or extending it.

82
00:04:44.355 --> 00:04:48.441
Or maybe you already had JavaScript
that was written or your agency or

83
00:04:48.441 --> 00:04:52.826
your group is already working with
a certain framework or certain tools.

84
00:04:52.826 --> 00:04:56.997
This is, the axious demo is
the exact same thing you just built.

85
00:04:56.997 --> 00:04:59.397
But it's using a different client,

86
00:04:59.397 --> 00:05:03.897
it's just using regular ajax calls
instead of the backbone client.

87
00:05:03.897 --> 00:05:07.689
So at some point, if your gonna take this
further, go through this example and

88
00:05:07.689 --> 00:05:11.840
look at how this works,
because it will help you make sense of it.

89
00:05:11.840 --> 00:05:15.217
The second thing, and
we could've started our day with this,

90
00:05:15.217 --> 00:05:19.230
is that notice that when we save our code,
we have to go back to WordPress and

91
00:05:19.230 --> 00:05:21.482
refresh the browser every time, right?

92
00:05:21.482 --> 00:05:24.630
How many of you have worked
before with some sort of watch or

93
00:05:24.630 --> 00:05:27.793
refresh tool that will
automatically refresh your code?

94
00:05:27.793 --> 00:05:29.475
Are you familiar with that?

95
00:05:29.475 --> 00:05:30.224
Amazing, right?

96
00:05:30.224 --> 00:05:33.936
It so, much simply you save it,
pop it open and it's good.

97
00:05:33.936 --> 00:05:38.838
You can do that, so
this demo here what this

98
00:05:38.838 --> 00:05:42.786
shows you is this a normal theme but

99
00:05:42.786 --> 00:05:49.333
it has inside of my JS folder,
a webpack configuration.

100
00:05:49.333 --> 00:05:51.487
So in this webpack configuration,

101
00:05:51.487 --> 00:05:54.732
we're doing a few things
that I just wanna point out.

102
00:05:54.732 --> 00:05:57.264
We're pulling in BrowserSync, and

103
00:05:57.264 --> 00:06:03.440
what BrowserSync does is watch your code
in hard and refresh your browser itself.

104
00:06:03.440 --> 00:06:07.431
And if you're running
the webpack developer tool,

105
00:06:07.431 --> 00:06:10.696
which will look at for
a couple of example,

106
00:06:10.696 --> 00:06:16.521
that operates in the completely different
space then your WordPress site.

107
00:06:16.521 --> 00:06:18.987
So the way we traditionally
built JavaScript apps and

108
00:06:18.987 --> 00:06:21.575
work with the built tools,
will not work in WordPress.

109
00:06:21.575 --> 00:06:26.253
We have to add this other layer that will
automatically refresh our WordPress site

110
00:06:26.253 --> 00:06:26.810
itself.

111
00:06:26.810 --> 00:06:31.670
So the thing in here
are down at the bottom.

112
00:06:31.670 --> 00:06:34.217
I wanna point out this code here.

113
00:06:34.217 --> 00:06:38.760
So my site URL is at vagrant.local.

114
00:06:38.760 --> 00:06:43.430
So you would change this to js
whatever .dev that you have.

115
00:06:43.430 --> 00:06:46.067
And then local host,
you can change it to something else, and

116
00:06:46.067 --> 00:06:49.260
you can change the port,
something that you're not using.

117
00:06:49.260 --> 00:06:52.694
So what happens when you run
this is instead of viewing

118
00:06:52.694 --> 00:06:57.274
your site at vagrant.local,
you would go to localhost; 3333 and

119
00:06:57.274 --> 00:07:01.269
that would proxy your entire site and
control the refreshes.

120
00:07:01.269 --> 00:07:04.960
So that's how it takes control
of everything for you.

121
00:07:04.960 --> 00:07:09.547
If you're going to develop heavy
JavaScript stuff inside of WordPress.

122
00:07:09.547 --> 00:07:12.923
You all grab this webpack
config tweak it for yours and

123
00:07:12.923 --> 00:07:16.387
then it will just save you
all that time of refreshing.

124
00:07:16.387 --> 00:07:20.310
I didn't do that with what we were doing
just because it's one more thing to add

125
00:07:20.310 --> 00:07:23.230
and we've been covering a lot,
but that is there for you.

126
00:07:23.230 --> 00:07:25.960
So I would definitely
suggest check in that out.

127
00:07:25.960 --> 00:07:29.427
And the very last thing is, everybody
wants to know how to do a framework right?

128
00:07:29.427 --> 00:07:30.455
Wait how do we do this in React?

129
00:07:30.455 --> 00:07:33.496
How do we plug Angular and
how do we plug View-in.

130
00:07:33.496 --> 00:07:35.660
It all works the same way.

131
00:07:35.660 --> 00:07:37.616
You basically build whatever it is.

132
00:07:37.616 --> 00:07:41.665
You enqueue the files that you need and
it works.

133
00:07:41.665 --> 00:07:45.400
So this is a very, very simple theme.

134
00:07:45.400 --> 00:07:47.167
It's the exact same thing
we've been doing before.

135
00:07:47.167 --> 00:07:51.356
And what it's gonna do is
basically just list out.

136
00:07:55.720 --> 00:07:59.112
&gt;&gt; Zac Gordon: The ability to show a bunch

137
00:07:59.112 --> 00:08:03.890
of posts, or show a single post, and

138
00:08:03.890 --> 00:08:08.990
the actual template code is in the php.

139
00:08:11.000 --> 00:08:15.568
So notice how I have some view code,
hard coded right here.

140
00:08:15.568 --> 00:08:17.718
Now is this the best approach?

141
00:08:17.718 --> 00:08:22.041
Maybe, it's okay,
if you are doing something like this,

142
00:08:22.041 --> 00:08:25.510
I would highly suggest
leveraging view cloak.

143
00:08:25.510 --> 00:08:29.630
V-cloak, if you look into this,
because all this code is gonna get

144
00:08:29.630 --> 00:08:34.370
executed immediately and
be on the page before JavaScript kicks in.

145
00:08:34.370 --> 00:08:35.769
So v-cloak will let you hide it.

146
00:08:35.769 --> 00:08:37.539
There are other ways to do that.

147
00:08:37.539 --> 00:08:41.440
But if you get deeper into View or
React, or some of these other ones,

148
00:08:41.440 --> 00:08:44.626
you're building all your
templates with JavaScript.

149
00:08:44.626 --> 00:08:47.302
And then you're importing
them into the page.

150
00:08:47.302 --> 00:08:51.442
So that's kind of the next level, but when
you're first starting off with View or

151
00:08:51.442 --> 00:08:54.036
something, it's simpler
to take this approach.

152
00:08:54.036 --> 00:08:58.827
So if you're curious about how this works
and how you make the API requests with

153
00:08:58.827 --> 00:09:08.456
something like View,
&gt;&gt; Zac Gordon: Take a look at this code

154
00:09:08.456 --> 00:09:14.273
for a second and see if that makes sense.
&gt;&gt; Zac Gordon: So

155
00:09:14.273 --> 00:09:20.784
what that is saying is get
&gt;&gt; Zac Gordon: The site URL, and

156
00:09:20.784 --> 00:09:26.640
you can see that we put this out by
using the localized scripts, right?

157
00:09:26.640 --> 00:09:30.257
So that's how we get our site URL, and

158
00:09:30.257 --> 00:09:35.693
then we're getting this site URL or
this restEnd point.

159
00:09:35.693 --> 00:09:38.280
Sorry, restEnd point is here.

160
00:09:38.280 --> 00:09:41.450
It's computed because you want
to take your site URL and

161
00:09:41.450 --> 00:09:43.141
then add some things on to it.

162
00:09:43.141 --> 00:09:46.522
So if you had different Endpoints,
you could set them up that way, so

163
00:09:46.522 --> 00:09:48.346
we're grabbing our restEndpoint.

164
00:09:48.346 --> 00:09:53.890
And then, when we get it back, we're
sending this post equal to the new data.

165
00:09:53.890 --> 00:09:58.607
And this post up here,
will refer to this, our array of posts.

166
00:09:58.607 --> 00:10:01.960
So it's just gonna get the posts and
load them on the page.

167
00:10:01.960 --> 00:10:06.545
Really simple stuff, and again this
just shows and why I was emphasizing

168
00:10:06.545 --> 00:10:11.505
taking a look, not just at jQuery, but
something like axios or some of the more

169
00:10:11.505 --> 00:10:16.566
popular HTTP libraries, is that this is
the only component that is different.

170
00:10:16.566 --> 00:10:21.074
You could build your whole reactor,
your viewer, your angular backbone app.

171
00:10:21.074 --> 00:10:25.220
All you have to do is get those ajax calls
right, and then load it into the page.

172
00:10:25.220 --> 00:10:27.617
So that should be something
that you explore later.

173
00:10:27.617 --> 00:10:31.037
How many of you have played around
with some sort of framework?

174
00:10:31.037 --> 00:10:35.951
Okay, so a good practice might be,
if you wanted to play around with it,

175
00:10:35.951 --> 00:10:37.900
just try to list five posts.

176
00:10:37.900 --> 00:10:40.911
And then when you click on
a post show that specific post,

177
00:10:40.911 --> 00:10:42.498
something like that, okay?

178
00:10:42.498 --> 00:10:44.460
And you can use this as a reference.

179
00:10:44.460 --> 00:10:47.302
And again, this is really the only
code that's gonna change, and

180
00:10:47.302 --> 00:10:49.787
then it just plugs in,
that's going to stay the same, and

181
00:10:49.787 --> 00:10:51.589
the rest just plugs into your framework.

182
00:10:51.589 --> 00:10:55.404
So that's an example there for you, we
won't really go into it further, but when

183
00:10:55.404 --> 00:10:59.190
you get there and you're ready for it,
it'll make a lot of sense and be helpful.

