WEBVTT

1
00:00:00.000 --> 00:00:04.420
So now, it's time for
us to create a new resolver.

2
00:00:04.420 --> 00:00:08.690
And you can create resolvers
that are on a per type basis.

3
00:00:08.690 --> 00:00:14.815
So we're gonna create two new
resolver on a per type basis,

4
00:00:14.815 --> 00:00:20.343
one is gnna be called User.ts and
one's Tweet.ts.

5
00:00:20.343 --> 00:00:24.436
Just gonna finish up the backend work here
before we move to the front end here.

6
00:00:24.436 --> 00:00:29.787
So, on the website,
you can see that we have in this

7
00:00:29.787 --> 00:00:36.390
inner resolvers section,
we've got our User.ts resolver.

8
00:00:36.390 --> 00:00:40.554
Let's paste that in here, and

9
00:00:40.554 --> 00:00:46.170
then we'll do the same thing for tweets.

10
00:00:46.170 --> 00:00:48.920
We'll look at this code real
carefully once we paste it.

11
00:00:56.296 --> 00:00:59.229
All right, an auto format, if you like.

12
00:01:03.023 --> 00:01:08.737
All right, one more thing we have to do,
and that is in our Resolvers.ts,

13
00:01:08.737 --> 00:01:12.655
that sort of stitches
everything thing together.

14
00:01:12.655 --> 00:01:16.773
This is where we want something like this,
user and tweet and

15
00:01:16.773 --> 00:01:24.025
we want to import those here,
Just like that.

16
00:01:24.025 --> 00:01:27.969
So what I added were these
import lines and I just sort of,

17
00:01:27.969 --> 00:01:30.524
I'm assembling them all together.

18
00:01:30.524 --> 00:01:36.036
You're trying to match what
the schema looks like, Right,

19
00:01:36.036 --> 00:01:40.411
where you've got query,
you've got user, you've got suggestion.

20
00:01:40.411 --> 00:01:43.201
You don't need to have
all of them necessarily.

21
00:01:43.201 --> 00:01:48.025
But anytime you're doing what we're about
to do, with these nested deeper fields,

22
00:01:48.025 --> 00:01:50.638
you will end up doing something like this,
but

23
00:01:50.638 --> 00:01:53.264
the structures of these
things should match.

24
00:02:01.500 --> 00:02:06.583
Okay, and
everything is type checking properly now,

25
00:02:06.583 --> 00:02:14.671
because, remember, we ran-yarn-codegen
immediately after our schema changes.

26
00:02:14.671 --> 00:02:19.710
So finally, I wanna talk about
the code that we just pasted.

27
00:02:19.710 --> 00:02:21.480
So let's look at our User.ts.

28
00:02:21.480 --> 00:02:23.440
So this is for stats, right?

29
00:02:23.440 --> 00:02:28.077
This is user stats, this would be the
stuff that's at the top of the Twitter UI,

30
00:02:28.077 --> 00:02:32.800
this stuff up here, following, followers,
tweets, these are three counts.

31
00:02:32.800 --> 00:02:35.275
And you can see we're faking two of them,

32
00:02:35.275 --> 00:02:39.257
just because I don't want you to
have to do repetitive stuff here.

33
00:02:39.257 --> 00:02:44.110
And we don't have the concept
of following in this model, so

34
00:02:44.110 --> 00:02:47.549
we're just putting a fudge number there.

35
00:02:47.549 --> 00:02:52.270
Here we're saying getUserTweets, so
that gives us an array of tweets, and

36
00:02:52.270 --> 00:02:54.208
we get the length of that list.

37
00:02:54.208 --> 00:03:01.574
And something new here,
this first argument, user.

38
00:03:01.574 --> 00:03:08.499
So what's happening here in terms of
the flow of what's calling into what,

39
00:03:08.499 --> 00:03:13.259
when you make that top level query for
current user,

40
00:03:13.259 --> 00:03:18.794
if someone has requested stats,
this will be called first.

41
00:03:18.794 --> 00:03:24.535
And then whatever this returns,
when you get into this user.stats thing,

42
00:03:24.535 --> 00:03:28.841
you'll have whatever the top
level resolver returned,

43
00:03:28.841 --> 00:03:31.095
you'll have access to that.

44
00:03:31.095 --> 00:03:34.040
So that's how we're able to call user.id.

45
00:03:34.040 --> 00:03:38.100
Now, we're making a call
to our database here.

46
00:03:38.100 --> 00:03:42.330
I don't think this is a problem, because
we're getting the current user once.

47
00:03:42.330 --> 00:03:45.350
This is not something that's happening for
each tweet.

48
00:03:45.350 --> 00:03:47.520
We're not requesting stats there.

49
00:03:47.520 --> 00:03:51.880
This would be a problem if
we're doing this a 100 times.

50
00:03:51.880 --> 00:03:56.502
You could end up with 101 database
queries, one for every stats and

51
00:03:56.502 --> 00:03:58.550
then one for the user, right?

52
00:03:58.550 --> 00:04:03.578
Or sorry, you'd have one for
the list of tweets,

53
00:04:03.578 --> 00:04:08.007
and then on a per user basis, potentially,

54
00:04:08.007 --> 00:04:12.575
one or more queries, it'd be pretty awful.

55
00:04:12.575 --> 00:04:16.280
But in this case,
this is appropriate, right?

56
00:04:16.280 --> 00:04:19.700
And we're just getting this array,
getting its length.

57
00:04:19.700 --> 00:04:24.570
Let's see what happens
in our Apollo Studio.

58
00:04:24.570 --> 00:04:28.423
So we're gonna ask for
currentUser &gt; stats, and

59
00:04:28.423 --> 00:04:31.918
let's get everything that they have there.

60
00:04:31.918 --> 00:04:35.441
So just to format it real nice.

61
00:04:35.441 --> 00:04:40.659
Boom, so we haven't tweeted at all
with this user, which is fine,

62
00:04:40.659 --> 00:04:45.984
this is to be expected, and
here are the numbers that are coming out.

63
00:04:53.860 --> 00:04:55.323
I see question in chat.

64
00:04:55.323 --> 00:04:58.318
What did I put in f.tsx?

65
00:04:58.318 --> 00:05:02.653
I have not touched my client side
code quite yet for this step

66
00:05:09.320 --> 00:05:13.701
So we can consider the back
end work pretty much done, but

67
00:05:13.701 --> 00:05:16.820
let's talk about the tweet stats here.

68
00:05:16.820 --> 00:05:21.256
So we'll want tweets &gt; body &gt; stats, and

69
00:05:21.256 --> 00:05:25.579
let's just do a favorite count, run it.

70
00:05:25.579 --> 00:05:29.823
So we see different favorite counts here,
we see 1, we see 4,

71
00:05:29.823 --> 00:05:32.349
and here's the body coming through.

72
00:05:32.349 --> 00:05:36.804
So this is evidence that we're actually
counting stuff up in the back end.

73
00:05:36.804 --> 00:05:40.682
We can get even more confidence about that
by sort of picking apart this thing we

74
00:05:40.682 --> 00:05:42.344
pasted into the tweet resolver.

75
00:05:42.344 --> 00:05:49.020
So first off, here's our stats thing.

76
00:05:49.020 --> 00:05:52.805
Here's us using this
TweetToFavoriteCountMap, just for

77
00:05:52.805 --> 00:05:58.520
fun Let's log that out,
let's see what it looks like.

78
00:06:02.670 --> 00:06:08.329
Fire it off, and look at that,
we've got tweet IDs and then numbers.

79
00:06:08.329 --> 00:06:10.831
So this is the result of
us looping over them and

80
00:06:10.831 --> 00:06:13.668
sort of just counting them and
incrementing by one.

81
00:06:13.668 --> 00:06:16.955
It's no database call required for
this, and so

82
00:06:16.955 --> 00:06:20.895
it's absolutely fine to do this for
each record, right?

83
00:06:20.895 --> 00:06:25.600
So that's all that's happening here,
nothing too fancy.

84
00:06:25.600 --> 00:06:29.437
And again,
because this is sort of a sub-resolver,

85
00:06:29.437 --> 00:06:34.637
we see the parent object here is available
for us, which is what we need so

86
00:06:34.637 --> 00:06:39.610
that we can use the proper ID,
right, this is called for each tweet.

87
00:06:39.610 --> 00:06:40.849
So let's get that out of the way.

88
00:06:40.849 --> 00:06:44.160
What about the user, the author,
right, which is of type user.

89
00:06:44.160 --> 00:06:49.504
So this is where we can grab the tweet,
and

90
00:06:49.504 --> 00:06:54.710
note that I am using this dbTweetCache.

91
00:06:54.710 --> 00:06:58.563
So this is a common issue, right,
that we're trying to solve.

92
00:06:58.563 --> 00:07:02.936
The Graph QL representation of
this object, when we say author,

93
00:07:02.936 --> 00:07:07.479
what you expect to find there is
an object that represents the user.

94
00:07:07.479 --> 00:07:11.558
But in the database representation,

95
00:07:11.558 --> 00:07:17.043
let's see if we can go to
the type definition here.

96
00:07:17.043 --> 00:07:22.280
Oops, wrong type definition.

97
00:07:22.280 --> 00:07:28.696
I want the db tweet.

98
00:07:28.696 --> 00:07:31.581
Here, we have a user ID, right?

99
00:07:31.581 --> 00:07:36.460
So it's like the idea of, are we referring
to a user, or do we actually have a user?

100
00:07:36.460 --> 00:07:38.244
That's why it's important for

101
00:07:38.244 --> 00:07:41.820
us to have access to this database
representation of the tweet.

102
00:07:41.820 --> 00:07:45.180
This tweet here is missing its author.

103
00:07:45.180 --> 00:07:49.135
It is our job, in fact, to go and
find that author, right?

104
00:07:49.135 --> 00:07:53.608
Tweet.author right now would be null.

105
00:07:53.608 --> 00:07:59.458
So if we have this lower level
record that just has the user ID,

106
00:07:59.458 --> 00:08:05.770
that's what's gonna let us grab
the user ID here and populate it.

107
00:08:05.770 --> 00:08:10.530
And again, we're throwing wherever
we find that something's missing,

108
00:08:10.530 --> 00:08:13.109
because this is a non-nullable field.

109
00:08:13.109 --> 00:08:16.988
Or sorry, this is a nullable field,
but we wanna make sure that

110
00:08:16.988 --> 00:08:20.737
we provide something reasonable
in the case where it fails.

111
00:08:23.490 --> 00:08:26.191
So that's all this is,
we're just using these two caches.

112
00:08:26.191 --> 00:08:31.802
No database queries here, because this
is gonna be to support a list of tweets,

113
00:08:31.802 --> 00:08:34.420
and these will be called many times.

114
00:08:34.420 --> 00:08:38.043
All right, so that's all of our back end
code we've walked through all of it.

115
00:08:43.200 --> 00:08:47.277
In this next step, we're going
to consume this data in the UI.

116
00:08:50.846 --> 00:08:56.161
The first thing we'll need to do in
the UI is we'll open up our App.tsx,

117
00:08:56.161 --> 00:09:01.580
and we'll look at the GraphQL query
we have for getting the current user.

118
00:09:01.580 --> 00:09:07.680
We're going to add something to
the current user piece of the query.

119
00:09:07.680 --> 00:09:08.439
And you see,

120
00:09:08.439 --> 00:09:13.136
I get a nice little autocomplete here
from the GraphQL, like VS Code extension.

121
00:09:13.136 --> 00:09:19.728
So I want stats and
I want all of these in there.

122
00:09:19.728 --> 00:09:23.261
Follower, following, and tweet count.

123
00:09:25.380 --> 00:09:30.706
And it turns out that the fact that this
was missing here, that's what prevented

124
00:09:30.706 --> 00:09:35.343
us from getting fully away from our
fixture data for the current user.

125
00:09:35.343 --> 00:09:41.350
So if we were up here, you might notice,
nope, I guess this is also missing it.

126
00:09:41.350 --> 00:09:46.029
In any case, I think that that's why
everything's falling back to zero,

127
00:09:46.029 --> 00:09:48.866
because this was missing
in the first place.

128
00:09:48.866 --> 00:09:49.554
In any case,

129
00:09:49.554 --> 00:09:53.193
we can start wiring this through
that header component that we have.

130
00:09:53.193 --> 00:09:58.154
And we should start seeing those
numbers are no longer zero.

131
00:09:58.154 --> 00:10:05.916
So let's get rid of anywhere that we see,
This current user,

132
00:10:05.916 --> 00:10:11.380
or just in this one place for
now, let's pass this instead.

133
00:10:11.380 --> 00:10:15.220
So this should have real data and
let's check out our UI.

134
00:10:22.436 --> 00:10:25.310
It's still 0.

135
00:10:25.310 --> 00:10:29.771
You know why it's, well, no, I was
gonna say, we haven't tweeted yet, but

136
00:10:29.771 --> 00:10:31.950
I should still have followers.

137
00:10:31.950 --> 00:10:33.804
Let's log into the console and
see what's happening.

138
00:10:39.480 --> 00:10:43.536
Sometimes there's a little caching issue
or you have to stop and restart things.

139
00:10:43.536 --> 00:10:49.820
There's current user, and interesting,
I don't see stats coming through.

140
00:10:49.820 --> 00:10:56.056
You know what it could be, I wonder if

141
00:10:56.056 --> 00:11:01.611
we CodeGened on the client side, that
would be the first thing I'd wanna try.

142
00:11:01.611 --> 00:11:05.898
I'm not getting a type error,
but it's worth a shot.

143
00:11:09.900 --> 00:11:13.330
Cuz we did, yeah,
we did just add this here.

144
00:11:13.330 --> 00:11:14.857
That could cause this problem.

145
00:11:17.046 --> 00:11:19.860
Oop, there we go, that was it.

146
00:11:19.860 --> 00:11:23.426
So, remember the code generation,
especially on the client side,

147
00:11:23.426 --> 00:11:24.910
it's not just about types.

148
00:11:24.910 --> 00:11:28.052
It's also about that function and

149
00:11:28.052 --> 00:11:33.698
making sure that it's building
the GraphQL query properly.

150
00:11:33.698 --> 00:11:37.209
So it's important that you do that,
even beyond just the type checking aspect.

151
00:11:37.209 --> 00:11:41.291
The next thing we're gonna do
on the client side here is

152
00:11:41.291 --> 00:11:43.346
wire up the list of tweets.

153
00:11:43.346 --> 00:11:46.278
So remember we have that tweet,
top level query,

154
00:11:49.499 --> 00:11:53.710
Up here, this is something we
just added in the previous step.

155
00:11:53.710 --> 00:11:56.192
So we're going to
actually consume that and

156
00:11:56.192 --> 00:12:00.900
start to get away from that fixture data,
the currently hard coded list of tweets.

157
00:12:00.900 --> 00:12:06.567
So first thing we have to do here is
go to a timeline, react component.

158
00:12:06.567 --> 00:12:09.640
And you can see here,
this is our fixture data.

159
00:12:09.640 --> 00:12:13.303
This is Timeline.tsx.

160
00:12:13.303 --> 00:12:18.494
We're going to add a new GraphQL query
that represents fetching this data.

161
00:12:18.494 --> 00:12:22.634
And we can get rid of the fixture data,
by the way, we're gonna replace that.

162
00:12:22.634 --> 00:12:25.090
So let's go to the course website.

163
00:12:25.090 --> 00:12:31.745
Let's scroll down to this Tweets section,
and here is the stuff to add as an import,

164
00:12:31.745 --> 00:12:36.638
right, since this is the first
query that we're using here.

165
00:12:36.638 --> 00:12:38.013
Put that up top, and the new query.

166
00:12:38.013 --> 00:12:43.596
And, of course, right after this,
what are we gonna have to run,

167
00:12:43.596 --> 00:12:47.300
because we have changed the GraphQL stuff?

168
00:12:47.300 --> 00:12:50.072
CodeGen, we're gonna
have to CodeGen again, so

169
00:12:50.072 --> 00:12:51.990
that the types for this are built.

170
00:12:57.962 --> 00:13:01.620
Great, and
this type error should go away shortly.

171
00:13:01.620 --> 00:13:04.478
Well, now it's just telling us we
haven't used it yet, which is great.

172
00:13:07.060 --> 00:13:11.300
Okay, we have some more stuff to add,
right, within the component.

173
00:13:11.300 --> 00:13:16.074
So again, we're using this hook,
which is built on a per query basis,

174
00:13:16.074 --> 00:13:18.795
it's part of what's generated for us.

175
00:13:18.795 --> 00:13:21.874
The things it returns are a loading state,
an error,

176
00:13:21.874 --> 00:13:25.650
if one exists, and then ultimately
the data that will come back.

177
00:13:25.650 --> 00:13:29.420
This will be truthy,
once the data arrives.

178
00:13:29.420 --> 00:13:33.431
So we're returning some trivial feedback
here in the event that things don't look

179
00:13:33.431 --> 00:13:34.760
like they're going well.

180
00:13:34.760 --> 00:13:38.977
And then if we look
like we have some data,

181
00:13:38.977 --> 00:13:43.800
we can destructure it,
get the list of tweets.

182
00:13:43.800 --> 00:13:48.637
So I'm gonna paste this in before

183
00:13:48.637 --> 00:13:53.655
the return within the component.

184
00:13:53.655 --> 00:13:56.175
So just some really simple feedback here,

185
00:13:56.175 --> 00:13:59.746
you would want a much better
error handling experience, but

186
00:13:59.746 --> 00:14:03.470
I don't wanna make this any more
complicated than it has to be.

187
00:14:03.470 --> 00:14:06.890
So by the time we get down here,

188
00:14:06.890 --> 00:14:12.191
tweets is, Of this type.

189
00:14:12.191 --> 00:14:16.706
It's not a null,
it's definitely gonna be an array, and

190
00:14:16.706 --> 00:14:20.310
the array is gonna
contain non-null things.

191
00:14:20.310 --> 00:14:23.934
So perhaps, we can just iterate over this.

192
00:14:23.934 --> 00:14:28.827
Let's replace this capital
TWEETS with the tweets.

193
00:14:28.827 --> 00:14:35.460
And if that's es lint bugging me again
I will just, yep, tell it to [SOUND].

194
00:14:39.910 --> 00:14:44.280
All right, and let's save it and
look back at our UI and

195
00:14:44.280 --> 00:14:48.373
see what happened,
we have some more tweets here.

196
00:14:48.373 --> 00:14:53.381
So this is stuff that's actually
coming from the database and

197
00:14:53.381 --> 00:14:58.208
this is the evidence that we're
really wiring this app up.

198
00:14:58.208 --> 00:15:02.038
We're starting to remove the fixture
data and power it with real things,

199
00:15:02.038 --> 00:15:03.600
all through the GraphQL API.

