WEBVTT

1
00:00:00.853 --> 00:00:04.508
So we just did our test query,
we saw that that failed.

2
00:00:04.508 --> 00:00:05.811
So let's proceed to the next step.

3
00:00:05.811 --> 00:00:10.837
What we're gonna need in order to
actually give GraphQL, give Apollo some

4
00:00:10.837 --> 00:00:15.810
data to emit, well, we'll have to
create something called a resolver.

5
00:00:15.810 --> 00:00:21.635
And the job of the resolver is
effectively to gather things together,

6
00:00:21.635 --> 00:00:26.573
maybe reads the equivalent of
path params or query params,

7
00:00:26.573 --> 00:00:31.332
or it reads things that are part
of the request coming in.

8
00:00:31.332 --> 00:00:37.742
And then it produces pieces of the data
that are organized into the response.

9
00:00:37.742 --> 00:00:43.500
If you've ever used something like redux,
you can think of these kind of reducers,

10
00:00:43.500 --> 00:00:49.097
where you have these little subparts that
handle a little piece of state, but then

11
00:00:49.097 --> 00:00:55.060
the way everything is organized together,
it's sort of done at a higher level.

12
00:00:55.060 --> 00:00:59.080
So in a reducer, maybe you're just
adding a new number to an array, and

13
00:00:59.080 --> 00:01:01.040
that's one little thing.

14
00:01:01.040 --> 00:01:05.696
But in the bigger picture, this array is
deeply nested into this one little spot.

15
00:01:05.696 --> 00:01:10.550
So we don't have to worry about
creating this payload that

16
00:01:10.550 --> 00:01:14.017
eventually the consumer of the API gets,

17
00:01:14.017 --> 00:01:18.985
we can just worry about dealing
with this one little field.

18
00:01:18.985 --> 00:01:21.112
So let's create our first resolver.

19
00:01:21.112 --> 00:01:23.339
To create our first resolver,

20
00:01:23.339 --> 00:01:27.803
we're going to need to go back
into our ApolloServer TS file.

21
00:01:27.803 --> 00:01:31.576
And because we're gonna end
up using this database now,

22
00:01:31.576 --> 00:01:35.427
we can remove that underscore
that was telling TypeScript

23
00:01:35.427 --> 00:01:40.080
to not worry about the fact that we
were leaving that variable unused.

24
00:01:40.080 --> 00:01:42.403
So let's go ahead and do that first.

25
00:01:42.403 --> 00:01:42.917
So here we go.

26
00:01:42.917 --> 00:01:43.563
We'll go up to the top.

27
00:01:43.563 --> 00:01:47.192
We'll delete that underscore,
now TypeScript's gonna nag us,

28
00:01:47.192 --> 00:01:49.213
we'll take care of that in a moment.

29
00:01:49.213 --> 00:01:54.067
Next, we're gonna insert
this code somewhere before

30
00:01:54.067 --> 00:01:58.420
we create our instance of ApolloServer,
why?

31
00:01:58.420 --> 00:02:02.595
Because we're gonna pass this in
to the ApolloServer constructor.

32
00:02:02.595 --> 00:02:05.067
And this is our first resolver.

33
00:02:05.067 --> 00:02:10.554
And you can see here we have this as
a top level property of this object,

34
00:02:10.554 --> 00:02:12.420
query with a capital Q.

35
00:02:12.420 --> 00:02:15.724
And you may recall that in our schema,
right,

36
00:02:15.724 --> 00:02:21.160
that GQL string with backticks, we also
had a top level thing called query.

37
00:02:21.160 --> 00:02:22.309
It was a type query.

38
00:02:22.309 --> 00:02:25.180
We can go here and look at it, right here.

39
00:02:26.320 --> 00:02:32.020
So the resolver kind of should match one
to one, at least with this query type.

40
00:02:33.330 --> 00:02:37.019
So we've got currentUser and
we've got suggestions.

41
00:02:37.019 --> 00:02:39.109
And currentUser returns a user.

42
00:02:39.109 --> 00:02:42.214
Suggestions returns an array of things,
right?

43
00:02:42.214 --> 00:02:43.590
That's what we see right up here.

44
00:02:44.710 --> 00:02:47.770
So we're creating the equivalent to that,

45
00:02:47.770 --> 00:02:51.335
something that matches up
nicely with our schema.

46
00:02:51.335 --> 00:02:58.654
So let's grab this and let's insert it
right above our ApollServer instantiation.

47
00:03:06.506 --> 00:03:13.305
And then we're going to add this to
the arguments passed into ApolloServer.

48
00:03:13.305 --> 00:03:16.806
It's into this single
configuration object.

49
00:03:16.806 --> 00:03:21.477
We're also going to add this
function here called context.

50
00:03:21.477 --> 00:03:26.034
So I told you that this context object,
this is by the way,

51
00:03:26.034 --> 00:03:32.547
it's kind of an express concept, but it
carries through to ApolloServer as well.

52
00:03:32.547 --> 00:03:37.675
It's just this object that's always
available in any of our resolvers, right?

53
00:03:37.675 --> 00:03:43.270
Any of these little functions, context
is one of the arguments that you get.

54
00:03:43.270 --> 00:03:47.523
So in this case, if we have our database,
this gives us a nice little convenient

55
00:03:47.523 --> 00:03:51.270
handle to grab our database and
it's right where we need it.

56
00:03:51.270 --> 00:03:55.189
Later we're gonna use this for
any cached records that we need to put

57
00:03:55.189 --> 00:03:59.893
someplace where we have things that might
cascade through multiple resolvers.

58
00:03:59.893 --> 00:04:01.757
Where maybe we get a tweet, and

59
00:04:01.757 --> 00:04:05.644
then we have to in a separate
function get the author for a tweet.

60
00:04:05.644 --> 00:04:09.542
Anything that we wanna save,
like some work that can be reused,

61
00:04:09.542 --> 00:04:12.970
we might also store that
on this context object.

62
00:04:12.970 --> 00:04:18.720
Now this can be either an object or
a function that returns an object.

63
00:04:18.720 --> 00:04:22.010
There is a significant
difference between those.

64
00:04:22.010 --> 00:04:25.960
If it's just an object,
that object remains the same for

65
00:04:25.960 --> 00:04:28.880
the life of your application.

66
00:04:28.880 --> 00:04:34.458
And what that means for you is if you're
using this as a temporary scratchpad

67
00:04:34.458 --> 00:04:39.176
of sorts, things will be left
there between requests, right?

68
00:04:39.176 --> 00:04:44.029
So let's imagine that you use it to
hold temporarily some calculated result,

69
00:04:44.029 --> 00:04:47.276
maybe a count of how many
times a thing has happened.

70
00:04:47.276 --> 00:04:51.164
At subsequent requests,
you might find that, you're not starting

71
00:04:51.164 --> 00:04:55.506
with a 0 you're starting with 10,
because we've already counted up to 10.

72
00:04:55.506 --> 00:05:00.079
So if you have a function that returns
this object, you get a new one each and

73
00:05:00.079 --> 00:05:03.500
every time,
that's an important difference here.

74
00:05:03.500 --> 00:05:09.554
And in this case, we kind of want this to
be on a per request basis, a clean slate.

75
00:05:09.554 --> 00:05:14.191
If we were to store, for example,
information about a user here, but

76
00:05:14.191 --> 00:05:19.692
they're off token, you would want some
guarantee that this will get thrown away,

77
00:05:19.692 --> 00:05:21.994
it won't leak between requests.

78
00:05:21.994 --> 00:05:25.874
All right, so let's paste this in,
resolvers and context.

79
00:05:25.874 --> 00:05:29.576
Resolvers and

80
00:05:29.576 --> 00:05:34.206
context, save.

81
00:05:34.206 --> 00:05:41.570
And let's go back to our GraphQL dev
tools, And let's see what happens.

82
00:05:41.570 --> 00:05:43.750
I'm gonna just run the same query again.

83
00:05:43.750 --> 00:05:46.809
Let me make this a little bit bigger so
we can see it really well.

84
00:05:49.150 --> 00:05:51.813
I wanna run the same query again.

85
00:05:52.947 --> 00:05:55.621
And look at that, no more error,

86
00:05:55.621 --> 00:06:01.650
we're getting that fixed your data,
right, coming through.

87
00:06:01.650 --> 00:06:06.480
Another advantage to GraphQL, I can
combine the retrieval of two different

88
00:06:06.480 --> 00:06:08.980
kinds of things into a single request.

89
00:06:10.140 --> 00:06:13.850
I can get this list of
suggestions as well.

90
00:06:13.850 --> 00:06:16.315
Now in this case,
it's gonna be an empty array.

91
00:06:16.315 --> 00:06:23.105
But this is another advantage
over a REST API design.

92
00:06:23.105 --> 00:06:26.108
You don't need to make n requests for
n resources.

93
00:06:26.108 --> 00:06:28.772
This in fact was a key
reason that GraphQL or

94
00:06:28.772 --> 00:06:31.732
key problem that GraphQL solved for
Facebook,

95
00:06:31.732 --> 00:06:36.847
where this was around the time where they
were rethinking their mobile strategy.

96
00:06:36.847 --> 00:06:41.960
And for their native iOS and Android apps,
the number of requests they were

97
00:06:41.960 --> 00:06:47.318
having to make to assemble everything
on the Facebook page, like messages and

98
00:06:47.318 --> 00:06:52.250
feed items and photos and all of this
stuff, there's so much going on.

99
00:06:52.250 --> 00:06:55.803
And the more they broke things up into
micro services, the more they found

100
00:06:55.803 --> 00:06:59.778
that they were making dozens and dozens of
requests just for that first page load.

101
00:06:59.778 --> 00:07:02.651
So this lets you kind of combine
everything into one big pile,

102
00:07:02.651 --> 00:07:05.700
you get everything that was asked for,
you return it all at once.

103
00:07:05.700 --> 00:07:07.782
And this reduces bottlenecks,

104
00:07:07.782 --> 00:07:11.721
like the number of concurrent
connections that can be made.

105
00:07:11.721 --> 00:07:15.397
Or situations where multiple
round trips are required in

106
00:07:15.397 --> 00:07:19.231
order to assemble something,
makes it real nice and easy.

107
00:07:22.150 --> 00:07:25.775
So great, we have a GraphQL API now.

108
00:07:25.775 --> 00:07:29.250
That was hopefully not too painful.

