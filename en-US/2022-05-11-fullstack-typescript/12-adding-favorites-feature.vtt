WEBVTT

1
00:00:00.380 --> 00:00:04.180
The next feature we're going to add to our
Twitter app is the concept of favorites.

2
00:00:04.180 --> 00:00:07.564
And this is going to involve
two mutations because we're

3
00:00:07.564 --> 00:00:10.660
gonna treat favorites as its own resource.

4
00:00:10.660 --> 00:00:15.028
It's sort of a many to many
relationship where you can think of

5
00:00:15.028 --> 00:00:17.710
a favorite as the join table.

6
00:00:17.710 --> 00:00:20.878
Something that refers to both a tweet and

7
00:00:20.878 --> 00:00:27.440
a user where a user can like many tweets
and a tweet can be liked by many users.

8
00:00:27.440 --> 00:00:29.130
It's effectively all this is going to be.

9
00:00:29.130 --> 00:00:33.099
We're going to have to create
these favorite entities and

10
00:00:33.099 --> 00:00:36.570
we'll have to destroy
them when I use unlikes.

11
00:00:36.570 --> 00:00:40.270
So we'll get to practice building
two more simple mutations.

12
00:00:42.560 --> 00:00:46.646
The first thing we are going to have to
do is add a little bit of code to our

13
00:00:46.646 --> 00:00:47.900
GraphQL Schema.

14
00:00:47.900 --> 00:00:51.460
One more type for
this new favorite entity.

15
00:00:52.820 --> 00:00:54.772
So let's copy that, open up our Schema.

16
00:00:57.816 --> 00:01:00.482
And paste it right at the bottom.

17
00:01:00.482 --> 00:01:05.478
So note that favorite has
a relationship with tweet and user and

18
00:01:05.478 --> 00:01:10.473
those are non nullable meaning
we're going to have to populate

19
00:01:10.473 --> 00:01:14.730
those anytime we're returning
a favorite of sorts.

20
00:01:17.250 --> 00:01:22.450
Next, we're going to have to connect
this concept of a favorite to user.

21
00:01:27.493 --> 00:01:29.860
So here we go.

22
00:01:29.860 --> 00:01:31.860
Let's just put it right
here at the bottom.

23
00:01:31.860 --> 00:01:39.300
So a user has a field that's
an array of favorites.

24
00:01:39.300 --> 00:01:43.975
So can somebody help me think about
whether it's possible to have

25
00:01:43.975 --> 00:01:45.511
nodes in this array?

26
00:01:45.511 --> 00:01:50.342
Or whether it's possible for
me to get no back instead of an array?

27
00:01:53.410 --> 00:01:55.600
Is the collection nullable?

28
00:01:55.600 --> 00:02:03.010
And second question, are members of the
collection nullable based on the Schema?

29
00:02:03.010 --> 00:02:03.750
&gt;&gt; Collections novel.

30
00:02:06.280 --> 00:02:08.550
&gt;&gt; And the second part,
&gt;&gt; no,

31
00:02:08.550 --> 00:02:10.860
no,
&gt;&gt; The collection is nullable.

32
00:02:10.860 --> 00:02:15.420
So favorites could be be
null instead of an array.

33
00:02:15.420 --> 00:02:16.780
But if you get an array,

34
00:02:16.780 --> 00:02:21.480
you can rely on the fact that everything
within the array is of type favorite.

35
00:02:21.480 --> 00:02:23.399
That's what this exclamation mark means.

36
00:02:25.110 --> 00:02:29.982
Great, you may also note that we have

37
00:02:29.982 --> 00:02:34.700
like favorite refers to a tweet.

38
00:02:34.700 --> 00:02:39.580
But in this case tweet does
not refer to favorites.

39
00:02:41.300 --> 00:02:42.820
This is actually fine.

40
00:02:42.820 --> 00:02:47.561
This means that potentially
when we're pulling a tweet,

41
00:02:47.561 --> 00:02:53.890
we don't want someone to find the list
of users who have favorited it.

42
00:02:53.890 --> 00:02:57.365
Maybe we only want to expose that
information to the stats object where you

43
00:02:57.365 --> 00:02:59.240
get the count of the favorites.

44
00:02:59.240 --> 00:03:03.675
But maybe in the future a product manager
comes along and says, we want to show

45
00:03:03.675 --> 00:03:08.820
the little face pile of like, have all of
your friends who have liked this thing.

46
00:03:08.820 --> 00:03:12.578
Then we would need to establish
that relationship, but there is

47
00:03:12.578 --> 00:03:17.400
no requirement that you need that symmetry
in order to define the relationship.

48
00:03:17.400 --> 00:03:23.407
This is about your API's contract with
the outside world not necessarily a fully

49
00:03:23.407 --> 00:03:29.650
fleshed out diagram of how your entities
in your database relate to each other.

50
00:03:29.650 --> 00:03:34.541
So important to remember that because in
some cases you don't wanna expose more

51
00:03:34.541 --> 00:03:36.299
information than you need to

52
00:03:41.759 --> 00:03:46.619
All right, last step that that
relates to the GraphQL changes,

53
00:03:46.619 --> 00:03:50.399
we're going to go to our
app react component, and

54
00:03:50.399 --> 00:03:57.350
in this get current user query, we're
going to retrieve the Favorites array.

55
00:03:57.350 --> 00:04:01.131
So here we go,
it's within the current user.

56
00:04:07.120 --> 00:04:11.263
And all we want to get back is so
we want the tweet and

57
00:04:11.263 --> 00:04:15.070
then within the tweet we want the ID.

58
00:04:15.070 --> 00:04:20.460
So this is going to give us an array
back and each item in the array,

59
00:04:20.460 --> 00:04:25.164
is going to be an object
containing a property called ID,

60
00:04:25.164 --> 00:04:27.230
whose value is a string.

61
00:04:28.880 --> 00:04:31.235
Object with an ID in an array.

62
00:04:34.000 --> 00:04:37.670
All right time to run Yarn CodeGen because
we've changed stuff on our client and

63
00:04:37.670 --> 00:04:38.710
our server Yarn.

64
00:04:38.710 --> 00:04:40.703
CodeGen and then on server.

65
00:04:43.455 --> 00:04:47.130
Yarn CodeGen and everything looks good.

66
00:04:47.130 --> 00:04:51.085
So, what this means is I should be
able to I just test this real quick,

67
00:04:51.085 --> 00:04:53.146
make sure everything's wired up.

68
00:05:03.289 --> 00:05:07.577
I turned it from a value to a key just by
adding more destruction to the right of

69
00:05:07.577 --> 00:05:08.890
it, right?

70
00:05:08.890 --> 00:05:11.977
So here we go,
that's what I wanted to see.

71
00:05:11.977 --> 00:05:18.130
It is objects sorry it's more complicated
than I even described previously.

72
00:05:18.130 --> 00:05:21.219
These objects have
a property called tweet and

73
00:05:21.219 --> 00:05:26.045
within that like the value of tweet
is an object containing an ID.

74
00:05:26.045 --> 00:05:30.784
So I did this deliberately because this is
a common pitfall that people experience

75
00:05:30.784 --> 00:05:31.545
with React.

76
00:05:33.205 --> 00:05:39.089
As soon as I show you what this data looks
like, you're likely to ask me question and

77
00:05:39.089 --> 00:05:42.585
that question is,
how do I flatten this down?

78
00:05:42.585 --> 00:05:45.884
It seems like I just want
this array of IDs and

79
00:05:45.884 --> 00:05:50.074
I'm having to effectively map
over this and drill in and

80
00:05:50.074 --> 00:05:55.970
if anything's nullable as you drill in,
you have to deal with that.

81
00:05:55.970 --> 00:06:00.043
GraphQL does not really solve that
problem, it's gonna give you data in

82
00:06:00.043 --> 00:06:04.180
a format that's aligned with
the schema and align with the types.

83
00:06:04.180 --> 00:06:06.350
So I'll show you what I mean.

84
00:06:06.350 --> 00:06:08.470
I'll show you what this data
looks like in its current state.

85
00:06:10.240 --> 00:06:13.810
Actually, we don't have our resolver
I've wait to show you that.

86
00:06:13.810 --> 00:06:19.034
But that is a problem that
Graph QL doesn't solve, and

87
00:06:19.034 --> 00:06:25.518
it's kind of a common complaint that
things get nested in a big way.

88
00:06:27.924 --> 00:06:29.360
All right, let's keep going here.

89
00:06:31.010 --> 00:06:32.590
So we made this change, great.

90
00:06:32.590 --> 00:06:37.090
We ran Yarn CodeGen on both client and
server, great.

91
00:06:37.090 --> 00:06:43.120
Time to add a new transform to our
transforms TS file on the back end.

92
00:06:43.120 --> 00:06:47.651
So let's go to transforms TS and
paste this in and

93
00:06:47.651 --> 00:06:50.754
pull these imports up to the top.

94
00:06:50.754 --> 00:06:56.893
This is a favorite transform, it doesn't
do much but it's good to have there.

95
00:06:59.547 --> 00:07:02.920
Organized imports for that yep it
combined them for me which is great.

96
00:07:04.380 --> 00:07:05.440
So that's all it is.

97
00:07:05.440 --> 00:07:10.323
It's everything about a favorite, except
for that user object and the tweet object.

98
00:07:10.323 --> 00:07:13.154
So it's just sort of passing
through everything else.

99
00:07:17.321 --> 00:07:24.610
Next, let's go and import that
transform into our user resolver.

100
00:07:24.610 --> 00:07:26.458
So it's in the resolvers folder,

101
00:07:26.458 --> 00:07:35.710
User.TS And how are we going to use that?

102
00:07:35.710 --> 00:07:37.017
It's user.favorites.

103
00:07:45.100 --> 00:07:49.526
Do the old restart everything you, okay?

104
00:07:49.526 --> 00:07:52.422
What does this code we just pasted do?

105
00:07:52.422 --> 00:07:55.841
You know what, I'm gonna disable
this lint rule real fast, so

106
00:07:55.841 --> 00:07:58.497
that I can stop having to kick ESLint so
many times

107
00:08:01.717 --> 00:08:08.499
It should be reading from my engines
property, that my version of node is not 8

108
00:08:14.548 --> 00:08:17.820
I think I have to put
that in here overrides.

109
00:08:18.920 --> 00:08:20.711
That's for the server stuff.

110
00:08:23.815 --> 00:08:25.489
We're just gonna turn
this all the way off.

111
00:08:28.068 --> 00:08:30.252
Because something's weird, okay.

112
00:08:30.252 --> 00:08:34.180
Sorry about that little
squashing of an annoyance.

113
00:08:34.180 --> 00:08:36.850
So what does the Favorites resolver do?

114
00:08:36.850 --> 00:08:41.011
Well, it takes in a user as an argument
because the only way that this

115
00:08:41.011 --> 00:08:44.690
is getting called is if we've asked for
user.favorites.

116
00:08:44.690 --> 00:08:48.556
In fact,
it's safe because we're in user resolvers,

117
00:08:48.556 --> 00:08:53.904
that top level user thing will always
be called, like current user, right,

118
00:08:53.904 --> 00:08:59.853
or tweet.author.user but somewhere you're
passing through a user to get to this.

119
00:08:59.853 --> 00:09:05.640
So we're getting the user favourites and
this returns an array of DB favourite.

120
00:09:06.780 --> 00:09:08.108
Then we're mapping over them.

121
00:09:08.108 --> 00:09:10.505
We're transforming them.

122
00:09:10.505 --> 00:09:14.900
We're placing the user into the record.

123
00:09:14.900 --> 00:09:19.621
Remember, this is already the GraphQL
representation is the already

124
00:09:19.621 --> 00:09:25.010
ready to go user that's ready to serve
up the parent node in the graph.

125
00:09:25.010 --> 00:09:28.070
So we can place it right in there,
and then the tweet,

126
00:09:28.070 --> 00:09:29.570
we can get the tweet by ID.

127
00:09:29.570 --> 00:09:33.063
And then we can do a tweet transform here.

128
00:09:37.135 --> 00:09:38.565
So, we have our user and our tweet.

129
00:09:42.689 --> 00:09:48.090
And we should be able to make this
work in our GraphQL studio now.

130
00:09:48.090 --> 00:09:49.167
Let's give it a shot.

131
00:09:54.483 --> 00:09:57.020
All right,
we have one favorite and that ID.

132
00:09:57.020 --> 00:10:01.730
I have to make it easy to see that
we're getting the right things back.

133
00:10:01.730 --> 00:10:05.420
IDs always begin with a hint
of what kind of entity it is.

134
00:10:05.420 --> 00:10:12.020
Let's add a couple other things like,
tweet body.

135
00:10:12.020 --> 00:10:14.390
So there's like you can
see a list of things.

136
00:10:14.390 --> 00:10:16.070
What are the tweets that I favorited?

137
00:10:16.070 --> 00:10:22.662
But let's actually go back and let's look
at what we're really trying to gather here

138
00:10:26.470 --> 00:10:29.420
This is what we're gonna
consume on the client.

139
00:10:29.420 --> 00:10:34.700
So, it's gonna be an array of
objects that have a tweet property,

140
00:10:34.700 --> 00:10:40.757
whose object has an ID property,
that has the string we're interested in.

141
00:10:40.757 --> 00:10:46.642
So, this is sort of that deep nesting
that can get exhausting at times.

142
00:10:46.642 --> 00:10:50.660
And there's really not
much you can do about it.

143
00:10:50.660 --> 00:10:53.871
This is what we deal with
when we work with Graph QL.

144
00:10:53.871 --> 00:10:57.455
It doesn't solve all the problems.

145
00:10:57.455 --> 00:11:02.209
This is it's workable you're an array.map
away from getting what you want so

146
00:11:02.209 --> 00:11:03.586
it's not not too bad.

147
00:11:03.586 --> 00:11:06.239
But it does mean that there's some
complexity and what you get back.

148
00:11:06.239 --> 00:11:09.685
All the more reason that having
those types is important so

149
00:11:09.685 --> 00:11:14.467
that you can feel confident as you drill
in what's there, what might be there and

150
00:11:14.467 --> 00:11:17.440
so you can solve this
yourself more comfortably.

151
00:11:19.450 --> 00:11:22.130
So let's jump on to the UI side and
wire this up.

152
00:11:22.130 --> 00:11:25.170
We're going to be working
in the app.tsx component.

153
00:11:25.170 --> 00:11:26.702
And we're now, finally,

154
00:11:26.702 --> 00:11:30.490
going to get rid of this current
user piece of texture data.

155
00:11:30.490 --> 00:11:35.010
So we're going to pass this
directly into the left side bar.

156
00:11:35.010 --> 00:11:38.310
And this is the only
change that's not trivial.

157
00:11:38.310 --> 00:11:41.394
So, we're mostly gonna just
replace this current user and

158
00:11:41.394 --> 00:11:45.640
snake case all caps with the value
that's really coming from the back end.

159
00:11:45.640 --> 00:11:48.120
This is a case where we
merge two things together.

160
00:11:48.120 --> 00:11:52.909
And this is where we can get away
from that merge entirely because it's

161
00:11:52.909 --> 00:11:54.600
no longer necessary.

162
00:11:54.600 --> 00:12:00.382
Okay so app.tsx find all occurrences
of current user actually

163
00:12:00.382 --> 00:12:07.145
we can start by deleting this fixture
data boom and find all occurrences,

164
00:12:07.145 --> 00:12:12.597
replace with current user, and
then we can get rid of this,

165
00:12:12.597 --> 00:12:17.833
this is nonsense now like
creating a clone of an object and

166
00:12:17.833 --> 00:12:24.090
mixing it into itself doesn't
really make much sense, all right.

167
00:12:24.090 --> 00:12:27.031
Finally we're just gonna have
to reorder some lines, why?

168
00:12:27.031 --> 00:12:32.025
Because we need this get
current user query to kind of

169
00:12:32.025 --> 00:12:37.366
happen first before any of
our destructuring happens.

170
00:12:37.366 --> 00:12:42.504
So I'm just going to kind of move the hook
stuff way up to the top of the function

171
00:12:42.504 --> 00:12:49.890
and everything should work
nicely Let's check out the UI.

172
00:12:51.290 --> 00:12:55.117
So what we expect to see now
that favorites are coming in,

173
00:12:55.117 --> 00:12:59.999
is I believe we'll see numbers next
to the favorite count for every tweet

174
00:13:05.684 --> 00:13:08.871
There's one favorite here, there's four,

175
00:13:08.871 --> 00:13:13.240
this shows that I as a user have
already liked this one right?

176
00:13:13.240 --> 00:13:17.937
Because that's part of getting that array
of Favorites with the tweet IDs for

177
00:13:17.937 --> 00:13:19.470
the current user.

178
00:13:19.470 --> 00:13:23.860
That's what I'm using as we go through and
render the list of tweets.

179
00:13:23.860 --> 00:13:25.930
Is this tweet already favorited?

180
00:13:25.930 --> 00:13:28.680
Here's an array of what the current
user has already favorited.

181
00:13:28.680 --> 00:13:31.020
Is your tweet ID in this list?

182
00:13:31.020 --> 00:13:33.420
If it is, you're favorited, right?

183
00:13:35.240 --> 00:13:39.517
So, great, what we've just
done is now this is live data,

184
00:13:39.517 --> 00:13:42.750
this is coming in and it's live data.

185
00:13:42.750 --> 00:13:47.978
What we have to do next is wire
up that create favorite and

186
00:13:47.978 --> 00:13:50.770
delete favorite mutations.

