WEBVTT

1
00:00:00.210 --> 00:00:03.290
We're gonna get our database hooked up.

2
00:00:03.290 --> 00:00:05.100
We're gonna wire up.

3
00:00:05.100 --> 00:00:08.789
Instead of returning purely fixture data,
which we are right now.

4
00:00:08.789 --> 00:00:13.483
Just remember in our resolver query
resolver we're returning this

5
00:00:13.483 --> 00:00:19.040
fixture data for suggestions and
this fixture data for the current user.

6
00:00:19.040 --> 00:00:21.332
Let's actually get this returning
something from our database.

7
00:00:24.139 --> 00:00:26.473
So, this should be pretty easy.

8
00:00:26.473 --> 00:00:30.313
We're going to replace the existing
suggestions resolver with this,

9
00:00:30.313 --> 00:00:32.494
get all suggestions from our database.

10
00:00:32.494 --> 00:00:37.311
And because we've typed this really
well and we have this context object,

11
00:00:37.311 --> 00:00:40.993
we'll be able to grab this
little DB variable with ease.

12
00:00:50.570 --> 00:00:55.871
And we'll know this is working if
we see more suggestions in the UI.

13
00:01:03.399 --> 00:01:05.793
Well, let's use our dev tool first.

14
00:01:05.793 --> 00:01:12.453
That's a good sign, we see four
things now instead of two in the UI.

15
00:01:15.003 --> 00:01:18.351
See four things here, so
this is now data coming from our database.

16
00:01:21.815 --> 00:01:26.289
And then for our current user,
we can do something similar.

17
00:01:26.289 --> 00:01:29.238
So what we're going to do
here is grab all users.

18
00:01:29.238 --> 00:01:34.506
We'll use destructuring assignment
to get the first one in the array.

19
00:01:34.506 --> 00:01:38.703
So we'll consider the first user to
be the currently logged in user.

20
00:01:38.703 --> 00:01:44.817
And if it's empty, there's no first
user will throw otherwise we'll return.

21
00:01:44.817 --> 00:01:50.273
The reason we have to do that not only
is it good to give us an actionable mode

22
00:01:50.273 --> 00:01:55.289
of failure here, right,
with a good error message, but this is not

23
00:01:55.289 --> 00:02:00.659
a nullable field like current user if
asked for has to return some value.

24
00:02:00.659 --> 00:02:08.065
So if there's a possibility of this being
null the both the type checking and

25
00:02:08.065 --> 00:02:13.748
Apollo's run time validation
should yell at us about it.

26
00:02:13.748 --> 00:02:16.048
We can explore that here in a sec.

27
00:02:16.048 --> 00:02:19.610
So I've just replaced the existing
resolver with the new one.

28
00:02:22.315 --> 00:02:23.572
Let's test it real quick.

29
00:02:27.104 --> 00:02:29.016
Okay, that this just changed here.

30
00:02:32.086 --> 00:02:33.910
Let's get the creation date.

31
00:02:33.910 --> 00:02:38.240
Great, it's March 23rd.

32
00:02:38.240 --> 00:02:40.777
So it was yesterday.

33
00:02:40.777 --> 00:02:45.964
So this is data coming from our database.

34
00:02:45.964 --> 00:02:50.710
I don't think that the UI will change
much here cuz the fixture data

35
00:02:50.710 --> 00:02:52.590
is in fact the same thing.

36
00:02:52.590 --> 00:02:55.881
But you can see this switch back,
it's no longer John Doe.

37
00:02:55.881 --> 00:03:00.475
So let's see what happens
if we remove this.

38
00:03:00.475 --> 00:03:04.319
So now we're getting yelled at
a little bit like DB user or

39
00:03:04.319 --> 00:03:09.960
undefined is not assignable to the type
that was generated for this resolver.

40
00:03:09.960 --> 00:03:12.161
So this is where we're kind of being told.

41
00:03:12.161 --> 00:03:16.095
Hey, this is not supposed
to be a nullable thing,

42
00:03:16.095 --> 00:03:20.609
like you're supposed to
always return something here.

43
00:03:20.609 --> 00:03:23.027
So where we are right now, is,

44
00:03:23.027 --> 00:03:27.880
we have type checking working
across our tech stack now.

45
00:03:27.880 --> 00:03:30.785
If we wanted to maybe make this nullable,

46
00:03:30.785 --> 00:03:34.275
all we'd have to do is go
to our schema.graphql.

47
00:03:34.275 --> 00:03:36.417
Remove this exclamation mark.

48
00:03:36.417 --> 00:03:42.670
It's gonna make our UI angry, by the way,
cuz it expects current user to be there.

49
00:03:42.670 --> 00:03:46.820
But let's go back to our server sub
project, run our codegen again.

50
00:03:49.220 --> 00:03:54.079
And we might need to bounce the TypeScript
server, the language server.

51
00:04:08.664 --> 00:04:12.322
I'm not sure why this is allowed here.

52
00:04:12.322 --> 00:04:13.424
What if I return null?

53
00:04:15.319 --> 00:04:19.554
Yeah, okay, it's willing to
tolerate null not undefined, but

54
00:04:19.554 --> 00:04:24.559
if I put this requirement back and
kojin again, it should reject to the null.

55
00:04:27.650 --> 00:04:28.971
Yep, it already is.

56
00:04:32.541 --> 00:04:36.724
Null is not assignable to that type now,
so you'd have to put this back and

57
00:04:36.724 --> 00:04:40.515
then add the guard to handle
the possibility that it's not there.

58
00:04:40.515 --> 00:04:47.790
So we can see the guardrails are up
where we're being protected from.

59
00:04:47.790 --> 00:04:52.650
There's one set of assumptions and one
set of constraints that both our UI and

60
00:04:52.650 --> 00:04:57.912
our back end and our data persistence,
like serialization and deserialization.

61
00:04:57.912 --> 00:05:02.380
All of that is operating under the same
set of assumptions that are defined in one

62
00:05:02.380 --> 00:05:04.390
file, which is a great place to be.

