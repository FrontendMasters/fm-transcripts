WEBVTT

1
00:00:00.160 --> 00:00:06.125
The next thing we're going to add to our
Twitter app is, Favorites interactivity,

2
00:00:06.125 --> 00:00:12.278
by which I mean, the ability to click that
like button, to like, or unlike, a tweet.

3
00:00:12.278 --> 00:00:17.075
So, we're going to introduce a new
concept here called an input type.

4
00:00:17.075 --> 00:00:22.326
And you can think of this as
kind of a reusable object type

5
00:00:22.326 --> 00:00:29.495
that you might refer to in variables for
your mutations or for your queries.

6
00:00:29.495 --> 00:00:32.202
So, we'll add this to our schema.

7
00:00:35.099 --> 00:00:43.270
And let's put it up here right below the
top level, query and mutation route types.

8
00:00:43.270 --> 00:00:46.183
And then we're gonna add
our two new mutations,

9
00:00:46.183 --> 00:00:48.538
CreateFavorite and deleteFavorite.

10
00:00:52.982 --> 00:00:54.562
And we'll look at those in a second.

11
00:00:58.224 --> 00:01:00.364
Deleting our plus signs from the diff.

12
00:01:03.009 --> 00:01:06.506
So, looking closely at
these new mutations,

13
00:01:06.506 --> 00:01:10.094
note that we have
an argument called favorite,

14
00:01:10.094 --> 00:01:15.210
and we're referring to favorite
input in both of these cases.

15
00:01:15.210 --> 00:01:20.095
So you think of it just sort of like
a reusable object type that you can

16
00:01:20.095 --> 00:01:22.130
refer to by name.

17
00:01:22.130 --> 00:01:24.254
You're never querying this thing and

18
00:01:24.254 --> 00:01:28.644
getting a result back that looks like
this, it's really for variables only.

19
00:01:32.615 --> 00:01:36.696
So next,
we're going to go to the tweet component.

20
00:01:36.696 --> 00:01:39.230
I think this is the first time
we've touched this component.

21
00:01:39.230 --> 00:01:44.752
So, let's add all these
imports to tweet.tsx.

22
00:01:50.910 --> 00:01:52.260
So add them right at the bottom.

23
00:01:53.270 --> 00:01:56.400
And there's gonna be a mutation for
sure, two of them.

24
00:01:56.400 --> 00:01:59.556
So, we're going to say CreateFavorite and

25
00:01:59.556 --> 00:02:04.930
deleteFavorite in each case we're
passing in a favorite input variable,

26
00:02:04.930 --> 00:02:09.639
which is gonna contain, of course,
the tweetid and the userid.

27
00:02:09.639 --> 00:02:14.399
And what we're gonna get back is
just the id of the like, right?

28
00:02:14.399 --> 00:02:18.260
The id of the Favorite
entity we just created.

29
00:02:18.260 --> 00:02:22.665
Given that there's not a whole lot of
interesting stuff that we can do with

30
00:02:22.665 --> 00:02:27.372
the information we get back, this will
at least tell us something persisted.

31
00:02:27.372 --> 00:02:30.283
So we're gonna paste this
right above the component.

32
00:02:32.882 --> 00:02:37.877
And as usual codegen,
on server, on the client,

33
00:02:41.414 --> 00:02:43.702
To get all of our types updated.

34
00:02:48.978 --> 00:02:53.460
So, we're gonna take on
the backend work first.

35
00:02:53.460 --> 00:02:56.640
To begin, we're going to need to import

36
00:02:56.640 --> 00:03:00.950
the favoriteTransform into
our mutation resolvers.

37
00:03:00.950 --> 00:03:05.661
So we'll go to mutation.ts and
add this import.

38
00:03:05.661 --> 00:03:12.454
In fact if I use organized imports,
What happened there?

39
00:03:12.454 --> 00:03:14.840
[LAUGH] I hadn't used it yet.

40
00:03:14.840 --> 00:03:17.710
So it removed it, it's like,
I kinda told it to.

41
00:03:19.290 --> 00:03:20.814
I can do this one manually.

42
00:03:20.814 --> 00:03:23.677
We have an existing import up there and

43
00:03:23.677 --> 00:03:29.230
it bugs me to have multiple things coming
from one module if I can avoid it.

44
00:03:29.230 --> 00:03:34.714
So we're gonna add two new async resolvers
that have to do with creating and

45
00:03:34.714 --> 00:03:36.380
deleting a Favorite.

46
00:03:37.520 --> 00:03:41.423
This is all going to go into mutation.ts.

47
00:03:41.423 --> 00:03:43.402
These are top level things
that are happening.

48
00:03:56.279 --> 00:03:59.110
And looks like things are type
checking as we hoped.

49
00:04:01.070 --> 00:04:04.850
So, these are both very similar,
so I'm just gonna go over one and

50
00:04:04.850 --> 00:04:08.340
then point out the one
difference between these two.

51
00:04:08.340 --> 00:04:12.810
So, we're getting favorite as
an argument is of type Favoriteinput,

52
00:04:12.810 --> 00:04:18.966
which as you would hope is gonna have,
A tweetid and

53
00:04:18.966 --> 00:04:22.110
a userid just as we defined
in our graph QL schema.

54
00:04:22.110 --> 00:04:26.130
So there's our generated types,
working well for us.

55
00:04:26.130 --> 00:04:28.538
We're going to create a favorite,
which returns a promise.

56
00:04:28.538 --> 00:04:30.790
When it resolves we get a db favorite.

57
00:04:30.790 --> 00:04:35.110
This is that flat entity that gets up
serialized as a JSON object in our

58
00:04:35.110 --> 00:04:35.856
database.

59
00:04:35.856 --> 00:04:40.577
Then we're going to return
the transformed favorite object, right?

60
00:04:40.577 --> 00:04:45.522
This here transform, that is my own
word that I'm using to describe

61
00:04:45.522 --> 00:04:51.490
converting from a database representation
to a graph QL representation.

62
00:04:51.490 --> 00:04:54.417
And we're adding these
embedded records here.

63
00:04:54.417 --> 00:05:00.538
Getting a user by id,
transforming the tweet, right?

64
00:05:00.538 --> 00:05:05.070
We could probably do some more stuff here
in terms of caching and things like that.

65
00:05:05.070 --> 00:05:09.642
However, remember, this kind of operation
we gotta think about this end end,

66
00:05:09.642 --> 00:05:11.361
like when is this happening.

67
00:05:11.361 --> 00:05:15.250
This is proportional to
a user clicking in the UI.

68
00:05:15.250 --> 00:05:20.030
So I don't expect this to happen like n
plus one times, this is a top level thing.

69
00:05:20.030 --> 00:05:24.380
It is not something we're iterating
over a list of things, and

70
00:05:24.380 --> 00:05:29.810
we're fetching the tweet and fetching
the userid, so this is probably okay.

71
00:05:29.810 --> 00:05:33.260
We don't really need to think
about optimizing this too much.

72
00:05:33.260 --> 00:05:38.148
If I were doing this for real,
I would almost surely want

73
00:05:38.148 --> 00:05:43.036
to check to make sure that
the user we get back is valid and

74
00:05:43.036 --> 00:05:49.380
that we're not creating tweets for
users who do not exist in the system,

75
00:05:49.380 --> 00:05:53.979
or likes for
tweets that don't exist in the system.

76
00:05:53.979 --> 00:05:58.753
So there's our CreateFavorite,
and look at that.

77
00:05:58.753 --> 00:06:02.360
This is the only thing that's different,
deleteFavorite, that's it.

78
00:06:02.360 --> 00:06:06.267
They're both async, they both return
the entity you're operating on,

79
00:06:06.267 --> 00:06:10.060
either the thing that was just created or
the thing you just destroyed.

80
00:06:11.490 --> 00:06:12.234
Everything else is the same.

81
00:06:16.113 --> 00:06:17.730
All right,
time to gonna go to the front end.

82
00:06:17.730 --> 00:06:19.350
So we're gonna go to tweet.tsx.

83
00:06:19.350 --> 00:06:23.078
We'll start using the id so we can remove
this underscore in front of it and

84
00:06:23.078 --> 00:06:24.630
simplify things.

85
00:06:24.630 --> 00:06:28.089
And then we're going to create again
two things that look very similar,

86
00:06:28.089 --> 00:06:30.596
I'm gonna paste them in and
we will talk about them.

87
00:06:37.637 --> 00:06:41.033
So, right before we return,

88
00:06:44.338 --> 00:06:49.800
Here, I'm gonna paste this
stuff from the website.

89
00:06:49.800 --> 00:06:56.024
So, and we gotta change that id thing
up here cuz we're using this now.

90
00:06:56.024 --> 00:06:59.579
So, what's going on?

91
00:06:59.579 --> 00:07:04.996
We are using newly created
mutations that correspond

92
00:07:04.996 --> 00:07:10.740
to these new operations we
created up here, right?

93
00:07:10.740 --> 00:07:15.255
So these are the things we're
importing from our generated code,

94
00:07:15.255 --> 00:07:19.505
down here, we're just using
them in their react hooks.

95
00:07:19.505 --> 00:07:20.863
What are we getting back?

96
00:07:20.863 --> 00:07:25.725
We're getting back the function we
use to actually perform the mutation.

97
00:07:25.725 --> 00:07:27.445
We're getting back an err, and

98
00:07:27.445 --> 00:07:31.407
I'm having to sort of alias that property
because we have two of them now.

99
00:07:31.407 --> 00:07:34.158
And down here I wanna be
able to disambiguate between

100
00:07:34.158 --> 00:07:37.597
err creating the Favorite versus
err deleting the Favorite, but

101
00:07:37.597 --> 00:07:40.730
everything else you
should have already seen.

102
00:07:40.730 --> 00:07:45.459
Now, this is where I'm doing something,
I'm advising you don't think about things

103
00:07:45.459 --> 00:07:48.130
quite this way when you're
doing your own code.

104
00:07:48.130 --> 00:07:52.069
We're being very heavy handed
in terms of prefetching queries.

105
00:07:52.069 --> 00:07:56.513
This will get the UI working, but
I don't think we need to fetch all this

106
00:07:56.513 --> 00:08:00.900
information and like boil the ocean
just because we'd like to tweet.

107
00:08:02.730 --> 00:08:04.744
I'm optimizing for different things here.

108
00:08:04.744 --> 00:08:07.716
Like teaching you a set of
concepts in a particular order,

109
00:08:07.716 --> 00:08:11.070
not making you jump around to
a bunch of different files.

110
00:08:11.070 --> 00:08:16.044
So, if you're feeling like
this is a bit ridiculous, and

111
00:08:16.044 --> 00:08:21.641
that you wouldn't do this in a non
training project, I hear you.

112
00:08:21.641 --> 00:08:27.960
But this will make it work,
when we fetch a lot of things.

113
00:08:27.960 --> 00:08:31.031
All right, now,
we're going to replace the contents

114
00:08:31.031 --> 00:08:35.970
of the handleFavoriteClick function
that's in the same component with this.

115
00:08:35.970 --> 00:08:40.733
And similar to when we created a tweet and
we had that synchronous placeholder

116
00:08:40.733 --> 00:08:44.614
method that was just there already
wired up to the react stuff,

117
00:08:44.614 --> 00:08:49.950
now we're dealing with something that's
async, and so we got to catch the err.

118
00:08:49.950 --> 00:08:53.124
This is always a good practice
when you have a dangling promise.

119
00:08:53.124 --> 00:08:57.198
This means that you at least get
some feedback if things blow up.

120
00:08:57.198 --> 00:09:00.825
And it's just generally good thing to do.

121
00:09:00.825 --> 00:09:03.048
Good for your future selves to leave so

122
00:09:03.048 --> 00:09:06.430
you have clues to track
down when things go wrong.

123
00:09:06.430 --> 00:09:09.908
So, up here is this
handleFavoriteClick method.

124
00:09:09.908 --> 00:09:15.665
And we're gonna replace this thing that
used to console log based on is favorited.

125
00:09:19.508 --> 00:09:23.010
And now, we still switch based on this.

126
00:09:23.010 --> 00:09:26.758
And it's create or
delete based on that variable.

127
00:09:30.883 --> 00:09:35.217
We still see a red thing,
get current user from app.

128
00:09:40.032 --> 00:09:42.727
Save to bump the ts server.

129
00:09:47.061 --> 00:09:47.900
Are you happy now?

130
00:09:49.410 --> 00:09:50.474
It is not.

131
00:09:50.474 --> 00:09:51.449
Why is this not happy?

132
00:09:55.214 --> 00:09:57.790
Did I rename that foolishly?

133
00:10:00.760 --> 00:10:06.240
I did, I replaced all current,
sorry that's my bad.

134
00:10:06.240 --> 00:10:10.430
I did an aggressive ctrl f and replace.

135
00:10:12.820 --> 00:10:15.538
No harm done.

136
00:10:15.538 --> 00:10:18.661
I wanna check one more place to make
sure I didn't really screw things up our

137
00:10:18.661 --> 00:10:19.166
timeline.

138
00:10:23.058 --> 00:10:26.035
Sorry, I'm just trying to think
where else might have used that.

139
00:10:26.035 --> 00:10:29.997
Nope, what's being used here, that
didn't get changed, I think we're good.

140
00:10:32.945 --> 00:10:40.272
Okay, so we should now check to see
whether we can like and unlike tweets.

141
00:10:40.272 --> 00:10:42.840
So let's refresh, click some hearts.

142
00:10:42.840 --> 00:10:45.328
Hey, look, the counts are going up.

143
00:10:45.328 --> 00:10:50.240
And unlike, count goes down to 0,
to 1, to 5, to 4.

144
00:10:50.240 --> 00:10:54.065
This is all using set
state behind the scenes.

145
00:10:54.065 --> 00:10:55.011
Again, a little,

146
00:10:55.011 --> 00:10:58.960
there's a lot of data fetching
that's happening in the background.

147
00:10:58.960 --> 00:11:03.679
But on the one hand, it's a little
overkill for such a simple interaction,

148
00:11:03.679 --> 00:11:08.624
and we probably could wrap this in a
container component and validate something

149
00:11:08.624 --> 00:11:13.820
on a little smaller scope, like
invalidate the data on a smaller scope.

150
00:11:13.820 --> 00:11:18.860
On the other hand, what we're doing
here is gonna be proportional to a user

151
00:11:18.860 --> 00:11:23.660
interaction that's not gonna happen
like 1000 times a minute, so

152
00:11:23.660 --> 00:11:27.501
no one's gonna be melting down
a data center due to this.

153
00:11:31.587 --> 00:11:33.290
Great, our Favorites are interactive.

