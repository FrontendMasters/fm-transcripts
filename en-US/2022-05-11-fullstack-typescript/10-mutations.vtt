WEBVTT

1
00:00:00.420 --> 00:00:04.640
The next topic we're going to deal
with is this concept of mutations.

2
00:00:04.640 --> 00:00:09.666
And if you think about the equivalent
in the REST API mental model,

3
00:00:09.666 --> 00:00:12.897
this would be put post or delete requests,

4
00:00:12.897 --> 00:00:17.220
things that actually write
data into a database.

5
00:00:17.220 --> 00:00:22.486
And the first thing we'll need to
do is add a mutation to our GraphQL

6
00:00:22.486 --> 00:00:28.370
schema like query mutation is a top
level collection of resolvers.

7
00:00:28.370 --> 00:00:32.340
And we gonna to need to create
the equivalent piece of our schemas.

8
00:00:32.340 --> 00:00:37.710
So I'm just gonna copy this, and
I'll paste it into our schema.graphql.

9
00:00:37.710 --> 00:00:42.411
I like to keep these up at the top because
when I'm trying to reason my way through

10
00:00:42.411 --> 00:00:47.113
how things flow from, for example, before
we were dealing like with tweets and

11
00:00:47.113 --> 00:00:52.290
then it goes down to sort of
tweets.author as a separate sub resolver.

12
00:00:52.290 --> 00:00:55.440
I like thinking about things
in terms of top to bottom.

13
00:00:55.440 --> 00:00:59.376
So let's look at the create
tweet field in this schema,

14
00:00:59.376 --> 00:01:03.227
we can see that it looks sort
of like function and that is

15
00:01:03.227 --> 00:01:08.200
because this is the first situation
where we are taking in variables.

16
00:01:08.200 --> 00:01:10.290
You can think of these as arguments.

17
00:01:10.290 --> 00:01:15.150
So looks very similar
to TypeScript syntax.

18
00:01:15.150 --> 00:01:19.035
In that we have variable name and
then the type and then variable name and

19
00:01:19.035 --> 00:01:21.800
then the type and this is the return type.

20
00:01:21.800 --> 00:01:26.092
So what this is going to amount to
when we start using this on the client

21
00:01:26.092 --> 00:01:30.390
is it's gonna be kind of like we
call a function called Create tweet.

22
00:01:30.390 --> 00:01:36.520
We pass in a user ID and a body, and
we get a promise that resolves to a tweet.

23
00:01:36.520 --> 00:01:40.032
As everywhere else,
as is the case everywhere else these

24
00:01:40.032 --> 00:01:43.186
exclamation marks mean
this thing cannot be null.

25
00:01:43.186 --> 00:01:47.360
Both in terms of the variables passed in,
they cannot be null.

26
00:01:47.360 --> 00:01:52.470
And you can rely on actually
getting a tweet back, not nothing.

27
00:01:54.150 --> 00:01:58.100
So there's our schema alteration.

28
00:01:58.100 --> 00:02:05.396
Now we need to create a new resolver
to go along with this new type.

29
00:02:05.396 --> 00:02:09.582
So let's open in our server, sub project,

30
00:02:09.582 --> 00:02:16.047
the resolver's folder and
we're going to create a mutation.ts.

31
00:02:16.047 --> 00:02:22.480
And there is some code on the website
that you can copy and paste, here it is.

32
00:02:22.480 --> 00:02:24.869
As usual it's pasted in
let's talk about it.

33
00:02:29.473 --> 00:02:33.926
All right, and
let's run our CodeGen here because we of

34
00:02:33.926 --> 00:02:37.450
course changed our
change our schema a bit.

35
00:02:38.470 --> 00:02:42.429
So I'm gonna run it in
the server sub project, and

36
00:02:42.429 --> 00:02:47.940
yarn CodeGen, can see the green
checkmarks, that's great.

37
00:02:47.940 --> 00:02:54.414
This looks like implicit any issues.

38
00:02:54.414 --> 00:03:00.557
Just give it a sec,
I'm gonna just restart TypeScript server.

39
00:03:00.557 --> 00:03:01.290
Let's see what happens.

40
00:03:03.470 --> 00:03:06.954
Hey, that looks better all right,
and what's going on here?

41
00:03:06.954 --> 00:03:08.140
That's ESLint.

42
00:03:08.140 --> 00:03:09.775
Let's pump that.

43
00:03:09.775 --> 00:03:12.025
A bunch of things.

44
00:03:12.025 --> 00:03:13.520
Good, no errors.

45
00:03:13.520 --> 00:03:16.250
So let's study what's going on here.

46
00:03:16.250 --> 00:03:18.375
So first, this is the first case.

47
00:03:18.375 --> 00:03:19.503
I told you it was possible,

48
00:03:19.503 --> 00:03:22.540
but this is the first case
where we're actually doing it.

49
00:03:22.540 --> 00:03:24.410
An async resolver, right.

50
00:03:24.410 --> 00:03:28.952
We're taking advantage of the fact
that create tweet either needs to

51
00:03:28.952 --> 00:03:32.564
return a tweet, or
a promise that resolves to a tweet.

52
00:03:32.564 --> 00:03:37.202
And when you're dealing with mutations
where you're actually writing

53
00:03:37.202 --> 00:03:42.760
something to a database, this is where
async usually is most likely to happen.

54
00:03:42.760 --> 00:03:45.544
When you're getting data from a database,

55
00:03:45.544 --> 00:03:49.312
sometimes that is something
that happens synchronously.

56
00:03:49.312 --> 00:03:54.026
You don't necessarily have to make
sure that the entity that you

57
00:03:54.026 --> 00:03:57.500
just persisted exists before moving on.

58
00:03:57.500 --> 00:04:03.261
So this is where we're waiting
on something to happen.

59
00:04:03.261 --> 00:04:05.610
All right, so here is parent.

60
00:04:05.610 --> 00:04:06.582
We're not using that.

61
00:04:06.582 --> 00:04:09.054
That's why we have
an underscore before it.

62
00:04:09.054 --> 00:04:13.142
args this is the first time
we're taking in arguments and

63
00:04:13.142 --> 00:04:18.440
you can see that the type of args
It has this body and user ID field.

64
00:04:18.440 --> 00:04:22.740
Those are coming from here user ID and
body.

65
00:04:22.740 --> 00:04:25.098
So you may think of these if
this were a function, right?

66
00:04:25.098 --> 00:04:26.810
These would be local variable names.

67
00:04:26.810 --> 00:04:29.321
They only have a meaning
within the function.

68
00:04:29.321 --> 00:04:31.583
Here these are more like query params.

69
00:04:31.583 --> 00:04:34.390
So their name is significant.

70
00:04:34.390 --> 00:04:38.776
And whatever these names are thatt needs
to be consistent in your server side

71
00:04:38.776 --> 00:04:42.006
code when you're plucking
these off this args object.

72
00:04:42.006 --> 00:04:46.379
And in your client side code when you're
providing those variables in the query

73
00:04:46.379 --> 00:04:48.935
these are the names that
you're going to use.

74
00:04:48.935 --> 00:04:52.495
So name them carefully,
they have to have meaning.

75
00:04:52.495 --> 00:04:57.155
And it's part of your public API where if
you change it, you might break people,.

76
00:04:57.155 --> 00:05:01.311
But thankfully in this situation, you get
type errors all over the place which is.

77
00:05:01.311 --> 00:05:03.090
Helpful in terms of helping you refactor.

78
00:05:04.560 --> 00:05:06.420
So those are the args.

79
00:05:06.420 --> 00:05:11.412
And because they're non nullable, we know
that they're both going to be a string.

80
00:05:11.412 --> 00:05:18.970
Next, we use db.createtweet, which returns
a promise that resolves to a dB tweet.

81
00:05:18.970 --> 00:05:22.829
So it's gonna persist it and
then it's gonna give you back

82
00:05:22.829 --> 00:05:27.651
this entity that was just persisted but
this does a little bit more here.

83
00:05:27.651 --> 00:05:30.070
This eslint again, yeah,
let's just ignore that.

84
00:05:30.070 --> 00:05:34.336
So this creates timestamps so
that right before it's persisted,

85
00:05:34.336 --> 00:05:38.919
I probably should have created one
timestamp and serialized it twice.

86
00:05:38.919 --> 00:05:42.666
But you're gonna get two
dates stringified and

87
00:05:42.666 --> 00:05:47.060
then an automatically generated unique ID.

88
00:05:47.060 --> 00:05:48.591
So you don't have to provide those.

89
00:05:48.591 --> 00:05:51.190
This is a common thing for
a database to do, right?

90
00:05:51.190 --> 00:05:54.380
You don't want to feed it IDs,
it creates the IDs.

91
00:05:54.380 --> 00:05:55.000
So there you go.

92
00:05:55.000 --> 00:05:59.120
We'll end up with our DB
tweet after awaiting.

93
00:05:59.120 --> 00:06:02.128
Next, we have a tweet map.

94
00:06:02.128 --> 00:06:07.758
So we're going to reuse the same caching
object that we can put these entities

95
00:06:07.758 --> 00:06:13.530
from the database in So that
downstream resolvers can do their job.

96
00:06:13.530 --> 00:06:18.544
In this case, remember, tweets have
authors and even after we persist

97
00:06:18.544 --> 00:06:23.225
this thing in order to return it,
that tweet dot author resolver,

98
00:06:23.225 --> 00:06:27.560
that's this one here,
this is still going to be cold.

99
00:06:27.560 --> 00:06:30.030
And so
we need to make sure that dbTweetCache and

100
00:06:30.030 --> 00:06:32.336
dbUserCache have the right things in them.

101
00:06:32.336 --> 00:06:38.750
Now, thankfully, we'll know when we pull
out what we hope is cached in there,

102
00:06:38.750 --> 00:06:44.590
we will get a nice error in
the event that something's missing.

103
00:06:44.590 --> 00:06:49.651
And by the way, If we remove this,

104
00:06:49.651 --> 00:06:53.232
note that we have DB user or undefined.

105
00:06:53.232 --> 00:06:58.675
So we're using a recent compiler
option here called no unchecked index,

106
00:06:58.675 --> 00:07:02.383
access to TypeScript
compiler option that says.

107
00:07:02.383 --> 00:07:07.580
Whenever we use, like square bracket
notation, the type of the thing

108
00:07:07.580 --> 00:07:12.351
that comes back always has
the possibility of being undefined.

109
00:07:12.351 --> 00:07:15.700
Because this we're hoping something's
in there if we did our jobs,

110
00:07:15.700 --> 00:07:16.921
something's in there.

111
00:07:16.921 --> 00:07:21.885
But we're obligated to make sure
that what we got back is truthy,

112
00:07:21.885 --> 00:07:24.606
before we go and continue to use it.

113
00:07:24.606 --> 00:07:26.993
So that's part of
the reason I'm doing this.

114
00:07:26.993 --> 00:07:30.240
And it's exactly what you would want
if you're using this as a cache, right?

115
00:07:30.240 --> 00:07:32.050
It would give you that great feedback.

116
00:07:32.050 --> 00:07:35.132
And in this situation, you could
also fall back and say, all right,

117
00:07:35.132 --> 00:07:36.261
nothing is in the cache.

118
00:07:36.261 --> 00:07:40.489
Let's actually hit the DB and
let's get this thing, and

119
00:07:40.489 --> 00:07:43.230
at least we can get the data, right?

120
00:07:44.780 --> 00:07:49.848
Cool, so
we're going to populate the Tweet map.

121
00:07:49.848 --> 00:07:55.995
And we're going to transform the tweet and
we're going to return it.

122
00:07:55.995 --> 00:07:57.060
It seems good.

123
00:07:57.060 --> 00:07:59.479
I actually noticed that we
have a little bug in here.

124
00:07:59.479 --> 00:08:06.983
Now we could complete this exercise,
even with this bug, but I'm gonna fix it.

125
00:08:06.983 --> 00:08:10.540
And that is we didn't put the author
in the author cache here.

126
00:08:11.550 --> 00:08:16.484
And I think we would get around this
cuz we're not actually returning.

127
00:08:16.484 --> 00:08:19.350
Like when we're making this query,
we're not getting the author back.

128
00:08:20.400 --> 00:08:24.869
That wouldn't be too bad though,
we could say,

129
00:08:24.869 --> 00:08:28.139
object.assign, tweet transform

130
00:08:31.401 --> 00:08:37.087
And, We'll put in author.

131
00:08:43.946 --> 00:08:46.110
You don't have to do this
I'm just doing it for.

132
00:08:48.662 --> 00:08:52.699
For completeness sake, so
we've already got the user ID up here

133
00:08:52.699 --> 00:08:56.380
right this is something that
we were given as an argument.

134
00:08:59.490 --> 00:09:05.006
If the author is not found because
we're getting by user ID and

135
00:09:05.006 --> 00:09:08.939
that could, is that already guard us here.

136
00:09:13.333 --> 00:09:15.900
Looks like it's pretty confidently
returning us an author.

137
00:09:15.900 --> 00:09:17.042
We should do it anyway.

138
00:09:27.024 --> 00:09:30.040
And we'll make a nice
little error message here.

139
00:09:30.040 --> 00:09:32.112
Again, don't feel pressured
to copy this down, but

140
00:09:32.112 --> 00:09:37.070
I'm just sort of, Improving it on the fly.

141
00:09:38.080 --> 00:09:43.680
And then here we would say transform For
our user transform, do we have this?

142
00:09:49.416 --> 00:09:52.436
I guess we can just pass in the DB author
here because it doesn't need to be

143
00:09:52.436 --> 00:09:54.070
transformed.

144
00:09:54.070 --> 00:09:59.589
Yet don't need that await all right.

145
00:09:59.589 --> 00:10:05.050
So now we can be assured that the author
will be populated in this case.

146
00:10:05.050 --> 00:10:09.742
And that means that
user.author this resolver here,

147
00:10:09.742 --> 00:10:12.603
well sorry we never had one here.

148
00:10:15.046 --> 00:10:19.724
Tweet.author, tweet.author will never be
called because when the tweet comes back

149
00:10:19.724 --> 00:10:23.951
after that first resolver will already
have this thing in place it will already

150
00:10:23.951 --> 00:10:25.700
work and we should be good to go.

151
00:10:27.735 --> 00:10:34.456
All right so one more thing we have
to do what you didn't do before,

152
00:10:34.456 --> 00:10:41.672
mutations we need to hook it up in
our big collection of many resolvers.

153
00:10:41.672 --> 00:10:46.353
And we'll just follow
the pattern up here right so

154
00:10:46.353 --> 00:10:51.710
all the resolvers are sort
of joined together.

155
00:10:51.710 --> 00:10:57.603
And I think we should be good to go
there's no we could try to create a tweet.

156
00:11:00.300 --> 00:11:02.285
I'm tempting fate a little bit here.

157
00:11:09.365 --> 00:11:12.896
Just want to make sure my database
has no changes in it, great.

158
00:11:12.896 --> 00:11:17.591
So if we screw things up and we put
a value in there that's not reasonable we

159
00:11:17.591 --> 00:11:21.840
can always revert that JSON file and
get into a good state.

160
00:11:21.840 --> 00:11:26.350
So let's try to do this using
the dev tools just because it's good

161
00:11:26.350 --> 00:11:30.286
to know how to do this in case
you have to in the real world.

162
00:11:30.286 --> 00:11:35.053
So we've got at the top
level route types we

163
00:11:35.053 --> 00:11:39.566
have a mutation, we have create tweet.

164
00:11:39.566 --> 00:11:44.970
Note on the bottom there's this new
little area that just became useful.

165
00:11:44.970 --> 00:11:47.448
It's got user ID and it's got body.

166
00:11:47.448 --> 00:11:53.677
So we gonna need a real user ID and
we could get that with GraphQL actually,

167
00:11:53.677 --> 00:11:59.921
if we get rid of this, let's make a query
and just get the current user ID.

168
00:11:59.921 --> 00:12:03.620
Boom, query, awesome, there is a string.

169
00:12:04.620 --> 00:12:07.065
So let's paste that down here for user ID.

170
00:12:09.720 --> 00:12:11.315
And then say, first tweet.

171
00:12:14.300 --> 00:12:19.430
All right, and now let's go back and
let's create that mutation query.

172
00:12:19.430 --> 00:12:21.668
Here we go, create tweet.

173
00:12:21.668 --> 00:12:24.002
And what do we want back?

174
00:12:24.002 --> 00:12:29.271
Let's just get the ID back, boom.

175
00:12:29.271 --> 00:12:31.418
All right we got a tweet ID back and

176
00:12:31.418 --> 00:12:35.489
let's see what happened in our
database there's db.json and

177
00:12:35.489 --> 00:12:40.270
there it is So that's us testing our
first mutation the creation of a tweet

