WEBVTT

1
00:00:00.110 --> 00:00:06.940
The next change we're gonna make is wiring
up our UI so that it consumes real data.

2
00:00:09.190 --> 00:00:14.170
And this is where we're gonna
get into the React app, right?

3
00:00:14.170 --> 00:00:18.047
This is where we're gonna
start making those queries and

4
00:00:18.047 --> 00:00:20.960
getting data flowing into that React app.

5
00:00:22.170 --> 00:00:27.126
So, the first thing we need
to do is we'll be opening our

6
00:00:27.126 --> 00:00:32.409
client sub project is we will
need to import ApolloClient.

7
00:00:38.560 --> 00:00:42.000
So we've got the ApolloClient itself.

8
00:00:42.000 --> 00:00:46.663
You can think of this as the vanilla
JavaScript thing that makes the GraphQL

9
00:00:46.663 --> 00:00:47.337
queries.

10
00:00:47.337 --> 00:00:50.194
We've got ApolloProvider,

11
00:00:50.194 --> 00:00:55.335
which is a component that
uses the React context API to

12
00:00:55.335 --> 00:01:01.670
make it possible throughout
the app to fire off queries.

13
00:01:01.670 --> 00:01:05.995
And then we have this thing
called InMemoryCache, and

14
00:01:05.995 --> 00:01:09.380
this theoretically helps us store data and

15
00:01:09.380 --> 00:01:15.501
access it maybe from multiple components
where we need the exact same query.

16
00:01:15.501 --> 00:01:20.143
We don't have to worry too much about
n of the exact same request going out

17
00:01:20.143 --> 00:01:22.438
within a very short period of time.

18
00:01:25.430 --> 00:01:27.447
So those are the imports we need.

19
00:01:27.447 --> 00:01:31.196
We're gonna create our ApolloClient,
passing a cache into it,

20
00:01:31.196 --> 00:01:33.660
so you can do this right
below the imports.

21
00:01:37.280 --> 00:01:39.773
And then we're gonna
create our ApolloProvider,

22
00:01:42.469 --> 00:01:45.810
Which is gonna wrap the app component.

23
00:01:45.810 --> 00:01:47.810
So we're doing this in index.tsx.

24
00:01:47.810 --> 00:01:53.456
You could do this in your app.tsx as well,
you want this to cover everything

25
00:01:53.456 --> 00:01:58.940
else that's within your app or
at least wherever you're fetching data.

26
00:01:58.940 --> 00:02:03.606
So we can go down here to where our
app component is, right down here, and

27
00:02:03.606 --> 00:02:07.293
I'm gonna put it within this
error boundary component.

28
00:02:07.293 --> 00:02:10.536
Can someone tell me what an error boundary
is in React, if you've used this before?

29
00:02:13.120 --> 00:02:16.258
It's like a catch, think of it that way.

30
00:02:16.258 --> 00:02:19.902
So if there's a problem that occurs,
rendering something,

31
00:02:19.902 --> 00:02:21.380
this will intercept it.

32
00:02:21.380 --> 00:02:26.315
And its job is to put something on the
screen so that we don't have to watch our

33
00:02:26.315 --> 00:02:30.195
console quite so much,
we can just watch the rendered DOM.

34
00:02:33.310 --> 00:02:38.317
All right, so there's a ApolloProvider,

35
00:02:38.317 --> 00:02:42.521
co-pilot helping me out like a pro.

36
00:02:42.521 --> 00:02:50.293
And now what this means is I can use
Apollo's hook API to make queries,

37
00:02:50.293 --> 00:02:57.832
and that's both the equivalent of
a get request and a post request.

38
00:02:57.832 --> 00:03:03.306
So we would say queries are for fetching
data and then there's something we'll

39
00:03:03.306 --> 00:03:08.792
talk about later called a mutation, and
that's changing or destroying data.

40
00:03:08.792 --> 00:03:11.447
So that's all we should
have to do in this file.

41
00:03:11.447 --> 00:03:15.173
To recap, we imported the Apollo stuff,

42
00:03:15.173 --> 00:03:21.251
we instantiated a client with an in
memory cache, here's our URL.

43
00:03:21.251 --> 00:03:26.805
It's the same one, by the way,
that we're hitting for our dev tools.

44
00:03:26.805 --> 00:03:31.108
And then down here, we're wrapping
our app in the ApolloProvider.

45
00:03:34.060 --> 00:03:34.745
That's it.

46
00:03:36.755 --> 00:03:40.955
So now it's time for
us to create our first operation.

47
00:03:40.955 --> 00:03:45.575
And this word operation
is often used to describe

48
00:03:45.575 --> 00:03:50.872
queries that are defined in
your code base where you're

49
00:03:50.872 --> 00:03:55.831
either fetching data or
you're mutating data, but

50
00:03:55.831 --> 00:04:01.140
these are things that your
API consumer is performing.

51
00:04:01.140 --> 00:04:03.170
There's some data in app.tsx.

52
00:04:04.250 --> 00:04:08.450
In fact, quite a lot of data, so
you can see we have our CURRENT_USER,

53
00:04:08.450 --> 00:04:10.066
we have an array of TRENDS.

54
00:04:10.066 --> 00:04:11.864
We have an array of SUGGESTIONS.

55
00:04:11.864 --> 00:04:17.100
So these two things are both in
the right sidebar over here.

56
00:04:17.100 --> 00:04:18.877
Here's our TRENDS up here.

57
00:04:18.877 --> 00:04:21.090
These are our suggestions.

58
00:04:21.090 --> 00:04:24.515
Our CURRENT_USER is driving this
header area over here as well as

59
00:04:24.515 --> 00:04:25.708
the sidebar, right?

60
00:04:25.708 --> 00:04:28.590
That's like the user's name and
their handle.

61
00:04:30.090 --> 00:04:34.225
So all of that is sort
of loaded with the app.

62
00:04:34.225 --> 00:04:36.997
It's like the initial load
at the topmost level,

63
00:04:36.997 --> 00:04:39.440
cuz there's no routing here, so to speak.

64
00:04:40.810 --> 00:04:44.725
We wanna replace these arrays
with real queries, and

65
00:04:44.725 --> 00:04:50.566
we're gonna first start by asking for
the CURRENT_USER and the SUGGESTIONS.

66
00:04:50.566 --> 00:04:56.616
So before we can make a query,
we need to import this GQL utility,

67
00:04:56.616 --> 00:05:00.136
which is the same thing that we used for

68
00:05:00.136 --> 00:05:06.000
our type definitions in our
first setup for Apollo server.

69
00:05:06.000 --> 00:05:10.521
It's that tagged template literal
where we can define that special

70
00:05:10.521 --> 00:05:15.119
string that defines a query in this case,
it was the schema before but

71
00:05:15.119 --> 00:05:17.196
we could use it for a query now.

72
00:05:17.196 --> 00:05:23.246
And then this is part of code
that will be generated for us,

73
00:05:23.246 --> 00:05:28.431
it's a type that defines
what we need to pass in and

74
00:05:28.431 --> 00:05:33.875
what we can expect back
from a particular query.

75
00:05:33.875 --> 00:05:38.490
So we can expect this here to
error until we generate some code,

76
00:05:38.490 --> 00:05:40.677
it's normal for it to error.

77
00:05:40.677 --> 00:05:44.017
But let's add these to the top of app.tsx.

78
00:05:48.633 --> 00:05:53.420
And let me make sure, yep, I was just
double checking, I don't have a folder

79
00:05:53.420 --> 00:05:57.634
here called generated yet,
I want it to fail as it will fail for you.

80
00:06:00.626 --> 00:06:04.991
All right, next, it's time for
us to make our query.

81
00:06:04.991 --> 00:06:10.042
So I like to make these all caps,
snake case constants,

82
00:06:10.042 --> 00:06:16.260
and we're gonna wrap it in this
GQL tagged template literal.

83
00:06:16.260 --> 00:06:20.918
And you can see here it kinda looks
a little bit like interfaces,

84
00:06:20.918 --> 00:06:24.119
almost like JSON without the punctuation.

85
00:06:24.119 --> 00:06:25.842
You can think of these as, I mean,

86
00:06:25.842 --> 00:06:29.302
it's the same stuff that we're
passing in here in our tool, right?

87
00:06:31.740 --> 00:06:36.730
So this is a top level query, and
then the fields we want to retrieve,

88
00:06:36.730 --> 00:06:41.305
and another top level query and
the fields we want to retrieve.

89
00:06:44.668 --> 00:06:48.796
What you name it here is not gonna be of
great consequence the way we're using

90
00:06:48.796 --> 00:06:53.310
things today, but there are things
you can do to refer to this later on.

91
00:06:53.310 --> 00:06:57.262
So let's grab this, add it to our app.tsx,

92
00:06:57.262 --> 00:07:02.671
we're gonna put it right down
here below of the fixture data.

93
00:07:02.671 --> 00:07:07.095
So now that this has been added,
we can run our codegen utility.

94
00:07:07.095 --> 00:07:11.211
It's the same command,
just run it in the client folder.

95
00:07:11.211 --> 00:07:13.575
So it's yarn codegen.

96
00:07:15.590 --> 00:07:21.246
And you should see some checkmarks,
everything's successful,

97
00:07:21.246 --> 00:07:28.020
and you should see a new folder has
appeared called Generated &gt; graphql.tsx.

98
00:07:28.020 --> 00:07:32.480
This is a good time for me to talk about,
how is all of this happening?

99
00:07:32.480 --> 00:07:35.522
So there's a library called,

100
00:07:35.522 --> 00:07:40.204
I think it's graphql-codegen, there it is.

101
00:07:40.204 --> 00:07:45.267
So this is a project that's doing
this generating, and there are config

102
00:07:45.267 --> 00:07:50.579
files like this that effectively define
where GraphQL stuff can be found and

103
00:07:50.579 --> 00:07:54.660
it's capable of parsing these
strings from TypeScript.

104
00:07:56.200 --> 00:08:00.973
And then what do you want generated,
so this is what's giving where I'm

105
00:08:00.973 --> 00:08:04.897
defining the name of the file,
and then these are plugins.

106
00:08:04.897 --> 00:08:08.887
So this is gonna define,
what is the output?

107
00:08:08.887 --> 00:08:15.634
What exactly is operating on
the parsed GraphQL stuff?

108
00:08:22.190 --> 00:08:26.653
And then that's the exact same way
it's working on the server except you

109
00:08:26.653 --> 00:08:28.788
can see I have resolvers, right?

110
00:08:28.788 --> 00:08:31.054
I have operations generated
on the client side,

111
00:08:31.054 --> 00:08:34.190
I have resolvers generated
on the server side.

112
00:08:34.190 --> 00:08:39.086
Imagine if you had a mid tier API
that had both operations that it was

113
00:08:39.086 --> 00:08:41.534
sending to some other back end and

114
00:08:41.534 --> 00:08:46.781
resolvers it was using to serve data
to someone else that's upstream or

115
00:08:46.781 --> 00:08:51.865
downstream, you might have both
operations and resolvers in here.

116
00:08:51.865 --> 00:08:53.256
So that's it.

117
00:08:53.256 --> 00:09:01.045
And, I just wanna show you the list
of languages that are supported.

118
00:09:04.749 --> 00:09:09.235
A lot of TypeScript, React,
you can have it wired up for Vue, or

119
00:09:09.235 --> 00:09:13.570
Angular, C#, Java,
you can use it to generate flow types.

120
00:09:13.570 --> 00:09:17.761
So this is a great compatibility layer,
if you're migrating

121
00:09:17.761 --> 00:09:21.801
from flow to TypeScript or
back, so it's quite flexible.

122
00:09:28.860 --> 00:09:32.300
So now that that's
generated on our front end,

123
00:09:32.300 --> 00:09:37.116
this import that we had up here,
it is no longer causing a problem,

124
00:09:37.116 --> 00:09:41.421
in fact, it's got a really
complicated type coming back.

125
00:09:41.421 --> 00:09:44.470
That's a complicated type we
didn't have to write, but

126
00:09:44.470 --> 00:09:47.083
let's look at exactly
what's happening here.

127
00:09:47.083 --> 00:09:49.956
So it looks like this is a function.

128
00:09:49.956 --> 00:09:51.340
So it's not strictly a type.

129
00:09:51.340 --> 00:09:54.650
This is actually a function
that's returning something, and

130
00:09:54.650 --> 00:09:58.658
it's saying Apollo.useQuery, and
it's passing in a query of some kind.

131
00:09:58.658 --> 00:10:04.193
And it's got GetCurrentUserQueryVariables.

132
00:10:04.193 --> 00:10:08.043
So here's the query, here
are the variables passed to this query.

133
00:10:08.043 --> 00:10:11.950
These might be thought of
as the the query params or

134
00:10:11.950 --> 00:10:17.452
the path params that you'd put in a URL
for a REST API call of some sort.

135
00:10:17.452 --> 00:10:21.994
And then we have a return type,
which is, sorry,

136
00:10:21.994 --> 00:10:28.935
it's actually gonna be inferred based
on what Apollo.useQuery returns.

137
00:10:29.945 --> 00:10:33.545
So this is the codegen
looking at the schema,

138
00:10:33.545 --> 00:10:39.342
understanding what does this query need,
what do we expect to get back?

139
00:10:42.019 --> 00:10:44.400
Let's put it into action.

140
00:10:44.400 --> 00:10:49.903
So inside the component,
we're gonna invoke this hook,

141
00:10:49.903 --> 00:10:52.609
useGetCurrentUserQuery.

142
00:10:52.609 --> 00:10:57.232
And you may wonder, if you've used React
hooks before, use state, use effect,

143
00:10:57.232 --> 00:10:58.700
things like that.

144
00:10:58.700 --> 00:11:00.716
Often you'll pass something into this, but

145
00:11:00.716 --> 00:11:03.168
this is something that's
already pre-baked for us.

146
00:11:03.168 --> 00:11:06.118
It's part of the generated code,
it has that query baked in,

147
00:11:06.118 --> 00:11:09.650
it has the right type associated with it,
it's all ready to go.

148
00:11:09.650 --> 00:11:15.617
What we get back are three things,
we get loading, error, and data.

149
00:11:15.617 --> 00:11:19.987
So these let us conditionally
render something if this

150
00:11:19.987 --> 00:11:24.073
request is in progress,
if something went wrong.

151
00:11:24.073 --> 00:11:26.570
And if this is a nullable type,

152
00:11:26.570 --> 00:11:31.575
there's always a possibility
that no data will be returned.

153
00:11:31.575 --> 00:11:35.590
So for now,
we're just gonna emit cursory things.

154
00:11:35.590 --> 00:11:39.950
We're gonna return cursory things from the
component if we run into those situations.

155
00:11:39.950 --> 00:11:43.690
And that will let us get to this
point where we'll use the structured

156
00:11:43.690 --> 00:11:46.577
assignment to pick out data
like the currentUser and

157
00:11:46.577 --> 00:11:50.596
the array of suggestions,
we'll grab that from the response payload.

158
00:11:52.104 --> 00:11:57.276
So I'm gonna grab this and post it
into my component before the return.

159
00:11:59.143 --> 00:12:01.716
So that will go down here, right here.

160
00:12:07.370 --> 00:12:11.685
And now we have to use this data
somewhere, but if we look at this,

161
00:12:11.685 --> 00:12:16.087
we can see, hey, look at those
nice little types coming through.

162
00:12:16.087 --> 00:12:20.763
Nowhere have I said that there's this
avatar URL or anything like that.

163
00:12:20.763 --> 00:12:24.006
But it's all coming through,
this is all based on our GraphQL schema.

164
00:12:26.581 --> 00:12:30.387
So I'm going to start to pass
this data into our components.

165
00:12:30.387 --> 00:12:35.000
So here's the first one,
just replacing this red line

166
00:12:35.000 --> 00:12:39.223
with the green line below it,
that is right here.

167
00:12:39.223 --> 00:12:43.915
Now the reason I'm doing this is,
we haven't handled

168
00:12:43.915 --> 00:12:49.423
everything that's on our fixture data for
the CURRENT_USER,

169
00:12:49.423 --> 00:12:55.961
in particular there's this favorites
thing, and we don't have that yet.

170
00:12:55.961 --> 00:12:59.242
So I'm gonna need to do
basically an object to sign,

171
00:12:59.242 --> 00:13:01.565
kinda merge these things together.

172
00:13:01.565 --> 00:13:06.892
I'm gonna keep fixture data in there but
I'll override it with real data for

173
00:13:06.892 --> 00:13:09.985
now, we'll get a mix, so we can save that.

174
00:13:09.985 --> 00:13:13.036
And then the other place we can
use this is suggestions, and

175
00:13:13.036 --> 00:13:16.260
this we should be able
to replace outright.

176
00:13:16.260 --> 00:13:20.155
So right bar, actually here.

177
00:13:20.155 --> 00:13:23.953
Suggestions, there we go.

178
00:13:23.953 --> 00:13:26.867
And I think this means,
can we delete SUGGESTIONS?

179
00:13:26.867 --> 00:13:30.410
We can, it's not used anymore,
fixture data gone.

180
00:13:31.990 --> 00:13:36.988
Now we'll know this works, if you recall
we had one suggestion of who to follow

181
00:13:36.988 --> 00:13:39.427
before, we should see more than one.

182
00:13:42.920 --> 00:13:46.879
And we do, here's jQuery's
Twitter account showing up.

183
00:13:46.879 --> 00:13:49.941
So now for the first time we
have real data coming in and

184
00:13:49.941 --> 00:13:51.929
we're seeing real suggestions.

185
00:13:51.929 --> 00:13:56.380
Other data is being used as well,
you see John Doe up here.

186
00:13:56.380 --> 00:13:59.715
It used to say student, but

187
00:13:59.715 --> 00:14:05.660
now this is from the fixture
data on our back end.

188
00:14:05.660 --> 00:14:09.506
So this is now coming
through our GraphQL API.

189
00:14:09.506 --> 00:14:12.554
And we can see in our
Network tab if we like,

190
00:14:12.554 --> 00:14:15.370
see this in action just to round it out.

191
00:14:17.190 --> 00:14:17.918
Here it is.

192
00:14:17.918 --> 00:14:21.200
There's that GraphQL request and response.

193
00:14:21.200 --> 00:14:23.412
Sorry, it is a post request, of course.

194
00:14:23.412 --> 00:14:28.291
So here's the request payload, and
you can see, we have an operation name,

195
00:14:28.291 --> 00:14:30.216
we have the stringified query.

196
00:14:30.216 --> 00:14:34.560
This looks a lot like, I'm gonna highlight
the one below it, cuz it's easier to see.

197
00:14:35.580 --> 00:14:38.380
This here looks like,

198
00:14:40.575 --> 00:14:44.705
This query GetCurrentUser, currentUser.

199
00:14:44.705 --> 00:14:49.800
query GetCurrentUser, so there it is,
it's just literally that string.

200
00:14:49.800 --> 00:14:55.502
And here's the response we get back, data,
there's currentUser, there's suggestions.

201
00:14:55.502 --> 00:14:58.800
So this is how things
are working behind the scenes.

202
00:14:58.800 --> 00:15:03.240
We don't need to worry about much of this
because it's all happening between Apollo

203
00:15:03.240 --> 00:15:04.689
client and Apollo server.

204
00:15:07.246 --> 00:15:10.780
So great, now we're at a point where
our UI is consuming real data.

