WEBVTT

1
00:00:00.090 --> 00:00:04.140
The first thing we're gonna need
to do is set up an Apollo server.

2
00:00:05.160 --> 00:00:09.930
And we're gonna do that by creating a new
module Apollo-server,ts in the source

3
00:00:09.930 --> 00:00:14.880
folder of the server sub-project,
I'm going to go ahead and do that now.

4
00:00:14.880 --> 00:00:19.770
And then the contents of the file
should be everything below.

5
00:00:19.770 --> 00:00:23.068
And we're gonna paste this in and
then walk through this file and

6
00:00:23.068 --> 00:00:25.890
describe exactly what it
is we're dealing with here.

7
00:00:27.200 --> 00:00:30.896
So I'm gonna go in here,

8
00:00:30.896 --> 00:00:35.477
Apolloserver.ts and paste.

9
00:00:38.982 --> 00:00:46.000
Okay, so, a lot going on here and I'm just
gonna create a little breathing room.

10
00:00:47.240 --> 00:00:51.926
So we're building a function, it looks
like it takes in a database of some sort

11
00:00:51.926 --> 00:00:55.470
an HTTP server and an express application.

12
00:00:55.470 --> 00:00:59.244
So, this database is necessary
because we want to attach this

13
00:00:59.244 --> 00:01:02.780
database eventually to
something called a context.

14
00:01:02.780 --> 00:01:06.308
And this is just a little
object that's for convenience,

15
00:01:06.308 --> 00:01:09.910
available to anywhere that
we're fetching data, right?

16
00:01:09.910 --> 00:01:14.144
It's almost like making this globally
available to our data fetching code, and

17
00:01:14.144 --> 00:01:16.480
this will be much more clear later.

18
00:01:16.480 --> 00:01:20.999
We're not using it for now that's why
we're prepending it with an underscore,

19
00:01:20.999 --> 00:01:22.200
little pro tip here.

20
00:01:24.030 --> 00:01:27.834
TypeScript if you have
no unused parameters,

21
00:01:27.834 --> 00:01:33.660
compiler option enabled,
it will light up things like this, right?

22
00:01:33.660 --> 00:01:37.825
This thing is declared but its value
is never read, prepending it with

23
00:01:37.825 --> 00:01:42.920
an underscore, tells TypeScript to
kind of, don't worry about it, right?

24
00:01:42.920 --> 00:01:46.589
So, this comes from other languages
where this is a language feature, and

25
00:01:46.589 --> 00:01:48.350
it's easy to spot these as unused.

26
00:01:48.350 --> 00:01:51.163
So, that's why we're using
an underscore here, and when we use it,

27
00:01:51.163 --> 00:01:52.510
we'll delete that underscore.

28
00:01:54.250 --> 00:01:56.930
All right,
now we have this typedefs thing.

29
00:01:56.930 --> 00:02:02.081
So, let's get into that last, but I'll
tell you that this is the GraphQL schema,

30
00:02:02.081 --> 00:02:06.480
and we're gonna talk about
what that means independently.

31
00:02:06.480 --> 00:02:10.018
So, I'll collapse that for
a moment, but just for now,

32
00:02:10.018 --> 00:02:12.100
say that it describes the types.

33
00:02:12.100 --> 00:02:18.057
This will become our source of truth for
the types that are going over the wire,

34
00:02:18.057 --> 00:02:22.310
over our network,
that's what this will evolve into.

35
00:02:23.610 --> 00:02:29.758
So, that's this typedef variable, and
then we're creating an Apollo server,

36
00:02:29.758 --> 00:02:34.214
passing in our typedefs and
we're installing a plugin that

37
00:02:34.214 --> 00:02:39.404
effectively lets us wire this thing
up with express as a middleware.

38
00:02:39.404 --> 00:02:44.070
So, that's why we're using this
Apollo server express package here.

39
00:02:44.070 --> 00:02:49.795
We're starting up GraphQL, like starting
up the Apollo server, and then calling

40
00:02:49.795 --> 00:02:55.620
this apply middleware function which kind
of installs it onto the main express app.

41
00:02:55.620 --> 00:02:58.180
And remember,
that's what passed into here.

42
00:02:58.180 --> 00:03:03.031
So ultimately, what we're doing is
we're creating an express app somewhere

43
00:03:03.031 --> 00:03:05.970
else wherever we're using this function,
and

44
00:03:05.970 --> 00:03:09.180
we're passing it in to
create Apollo server.

45
00:03:09.180 --> 00:03:14.079
And then this function we're looking at
here, it'll instantiate an Apollo server,

46
00:03:14.079 --> 00:03:17.300
it'll install the Apollo server
onto the express app and

47
00:03:17.300 --> 00:03:21.890
then it'll return the Apollo server
because we might need that somewhere else.

48
00:03:23.040 --> 00:03:29.196
Now, let's talk about this thing here,
the GraphQL schema and

49
00:03:29.196 --> 00:03:33.420
it's in tagged template literal with GQL.

50
00:03:33.420 --> 00:03:38.261
And that's important here because
there are a bunch of nice set

51
00:03:38.261 --> 00:03:43.191
of VS code extensions that light
this up syntax highlighted give

52
00:03:43.191 --> 00:03:47.593
you a little autocompletes if
you use this GQL name here.

53
00:03:47.593 --> 00:03:52.490
It also happens to do some other
stuff that processes the string.

54
00:03:53.970 --> 00:03:55.280
So, what are we dealing with here?

55
00:03:55.280 --> 00:04:02.020
Well, first off, this is equivalent to a
set of interfaces in the TypeScript world.

56
00:04:02.020 --> 00:04:04.921
And you can see down here,
we have a type called user, and

57
00:04:04.921 --> 00:04:08.981
we have a type called suggestion, these
are the things that we'll start with.

58
00:04:11.835 --> 00:04:14.920
Now, also there's this type called query.

59
00:04:14.920 --> 00:04:17.840
Query is special in the GraphQL world.

60
00:04:17.840 --> 00:04:22.766
This is kind of the entry point
when we're asking for data, so

61
00:04:22.766 --> 00:04:27.710
in the rest world, you can think
of this as your get requests.

62
00:04:27.710 --> 00:04:32.631
So, here we have something where it's
like a user, someone's asking for

63
00:04:32.631 --> 00:04:34.550
the current user.

64
00:04:34.550 --> 00:04:39.808
And down here we have something that says,
I want an array of suggestions

65
00:04:39.808 --> 00:04:44.544
in the in the Twitter UI by the way,
this is the suggestions area,

66
00:04:44.544 --> 00:04:49.390
this little who to follow thing,
and we see just one item in there.

67
00:04:50.930 --> 00:04:55.901
Great, and so we can see like current
user, this returns a user, suggestions and

68
00:04:55.901 --> 00:04:59.300
then we see the square brackets here,
seems arrayish.

69
00:05:00.990 --> 00:05:05.414
This is actually the way to
denote an array of suggestions,

70
00:05:05.414 --> 00:05:08.190
just wrap it in square brackets.

71
00:05:08.190 --> 00:05:12.458
There's no concept of a tuple in GraphQL,
so that's why, like,

72
00:05:12.458 --> 00:05:17.109
you might look at this if you're
using your TypeScript intuition here,

73
00:05:17.109 --> 00:05:21.301
this looks like a tuple of length one,
with one suggestion, no,

74
00:05:21.301 --> 00:05:24.500
this is the way GraphQL represents a race.

75
00:05:24.500 --> 00:05:27.160
And then we have these
exclamation points here.

76
00:05:27.160 --> 00:05:31.630
So, in TypeScript, we use question
marks to indicate optional properties.

77
00:05:33.110 --> 00:05:37.125
By default, things are optional
in the Graph QL world, and

78
00:05:37.125 --> 00:05:42.340
by that I mean their nullable fields,
they could come back no.

79
00:05:42.340 --> 00:05:48.374
There is no current user, maybe that means
that we're not logged in, it could be.

80
00:05:48.374 --> 00:05:52.568
An exclamation mark is the way we
say something is non-nullable.

81
00:05:52.568 --> 00:05:56.920
So, it's sort of an inversion of the way
you think about this, you don't have to

82
00:05:56.920 --> 00:06:01.520
say when something is optional ,you
have to say when something is required.

83
00:06:01.520 --> 00:06:06.962
When the types should represent
that this is always here,

84
00:06:06.962 --> 00:06:12.860
I got a user back, I will have an ID,
I will have a name, right?

85
00:06:14.200 --> 00:06:18.673
Well, we'll end up with some nullable
things that are missing this

86
00:06:18.673 --> 00:06:21.440
exclamation mark later on.

87
00:06:21.440 --> 00:06:26.400
And often these are things that we want,
they're the expensive things to assemble.

88
00:06:26.400 --> 00:06:27.897
In our example of that doctor UI,

89
00:06:27.897 --> 00:06:31.870
remember we might have to hit someone's
calendar to see if they're busy or not.

90
00:06:31.870 --> 00:06:35.345
That would be a good example of something
that you would make nullable because

91
00:06:35.345 --> 00:06:39.780
if nobody asks for it, you wanna be able
to just say, like, don't worry about it.

92
00:06:39.780 --> 00:06:41.662
We're not going to get that,

93
00:06:41.662 --> 00:06:46.346
we'll get your information back to
you fast rather than comprehensive.

94
00:06:46.346 --> 00:06:50.378
All right, now, finally,
like I have two exclamation marks here,

95
00:06:50.378 --> 00:06:55.175
I have a suggestion, bang, and then
that's inside this little array notation,

96
00:06:55.175 --> 00:06:58.080
and then I have another
bang outside of it.

97
00:06:58.080 --> 00:06:59.230
What does this mean?

98
00:06:59.230 --> 00:07:02.017
So, first off, we can look at this and

99
00:07:02.017 --> 00:07:06.984
this means the user object will
always be there, it will not be a no,

100
00:07:06.984 --> 00:07:11.880
and this is the equivalent
exclamation mark there, right?

101
00:07:11.880 --> 00:07:18.438
I'm going to give you an array back,
it's never going to be missing.

102
00:07:18.438 --> 00:07:23.780
What this inner one means is that,
you will find no nulls within the array.

103
00:07:24.910 --> 00:07:28.864
So, it's about whether members
of the collection can be null,

104
00:07:28.864 --> 00:07:32.050
versus the collection itself being null.

105
00:07:32.050 --> 00:07:37.543
And you have two independent,
non-nullable operators there to indicate

106
00:07:37.543 --> 00:07:42.370
those two different things
&gt;&gt; But it could still be empty, right?

107
00:07:42.370 --> 00:07:45.080
&gt;&gt; The question is,
could it still be empty?

108
00:07:45.080 --> 00:07:49.910
Absolutely, you can still have
an empty array that contains no nulls.

109
00:07:49.910 --> 00:07:54.720
That meets both requirements, no nulls
in the array and the array is present.

110
00:07:54.720 --> 00:07:59.941
That means that in our back-end code, even
if somebody did not ask for suggestions,

111
00:07:59.941 --> 00:08:05.160
well, it doesn't make that sense in this
case because it's a top level query.

112
00:08:05.160 --> 00:08:06.970
But let's say,
what if we had this done here?

113
00:08:08.180 --> 00:08:09.180
Another one, right?

114
00:08:09.180 --> 00:08:13.350
Like a user has suggestions, it's like
it's a has many relationship here.

115
00:08:13.350 --> 00:08:16.960
In this case,
anytime we marshal the data together,

116
00:08:16.960 --> 00:08:21.212
we gather together data to say,
I've fetched a user back, and

117
00:08:21.212 --> 00:08:26.820
even what was requested was like these
three fields here and nothing else.

118
00:08:26.820 --> 00:08:32.643
We wouldn't be obligated to make this
an empty array, like it something

119
00:08:32.643 --> 00:08:38.186
has to be there in our back-end code,
if we say it is non-nullable.

120
00:08:38.186 --> 00:08:42.923
So, that's something you have to think
about carefully and we'll get to that

121
00:08:42.923 --> 00:08:47.660
when we start dealing with relationships,
sort of a tight coupling between,

122
00:08:47.660 --> 00:08:51.128
can we save time by avoiding
putting this data together?

123
00:08:51.128 --> 00:08:55.762
And is it possible for this field to
be missing, like null on the record?

124
00:08:55.762 --> 00:08:59.450
They're sort of interrelated
in this situation.

125
00:08:59.450 --> 00:09:03.350
&gt;&gt; And what enforces that requirements and
I guess?

126
00:09:03.350 --> 00:09:04.260
&gt;&gt; It's a very good question.

127
00:09:04.260 --> 00:09:05.860
What enforces that requirement?

128
00:09:07.110 --> 00:09:09.200
In our example today, two things,

129
00:09:09.200 --> 00:09:13.731
at compile time you will have type
information that is built from the schema,

130
00:09:13.731 --> 00:09:16.744
and you will have TypeScript
doing the enforcing.

131
00:09:16.744 --> 00:09:21.200
At runtime the GraphQL infrastructure
that's part of Apollo server,

132
00:09:21.200 --> 00:09:25.359
that will actually validate that
your schema matches the code that

133
00:09:25.359 --> 00:09:30.240
is aligned with your schema, and
that you're returning the right thing.

134
00:09:30.240 --> 00:09:32.100
And we're gonna hit some of those errors.

135
00:09:32.100 --> 00:09:36.622
But there is some help because there's
such a strong opinion about how data is

136
00:09:36.622 --> 00:09:39.100
shaped and how we ask for data.

137
00:09:39.100 --> 00:09:44.084
There is a validation thing that
helps us ensure we have everything

138
00:09:44.084 --> 00:09:45.689
wired up correctly.

139
00:09:46.924 --> 00:09:50.948
Well, we will hit that problem and
then solve it, it is planned,

140
00:09:50.948 --> 00:09:53.890
my usual style of failure
driven development.

141
00:09:57.371 --> 00:10:00.020
Okay, so
that's basically all we have here.

142
00:10:00.020 --> 00:10:03.240
We talked about arrays,
we talked about this exclamation mark.

143
00:10:03.240 --> 00:10:06.500
One thing I didn't talk about yet
was sort of the primitive types.

144
00:10:06.500 --> 00:10:12.018
So, you have strings, you have Booleans,
you have numbers, actually

145
00:10:12.018 --> 00:10:17.453
you have an int type here, we could
do this and it would be totally fine.

146
00:10:23.000 --> 00:10:24.103
Yep.

147
00:10:25.784 --> 00:10:29.790
So, I should not leave it like that
though, that's asking for problems.

148
00:10:32.030 --> 00:10:35.991
These are your primitive entities,
you're missing a couple things,

149
00:10:35.991 --> 00:10:37.773
like you don't have a date, but

150
00:10:37.773 --> 00:10:42.720
you should think of these as mapping one
to one with what you could put in JSON.

151
00:10:42.720 --> 00:10:46.640
Now you can define your own entities,
right?

152
00:10:46.640 --> 00:10:50.670
These are called scalers by the way, you
can define your own scalers if you like,

153
00:10:50.670 --> 00:10:52.270
we're not gonna get into that,

154
00:10:52.270 --> 00:10:54.895
I would leave that to a course
dedicated to GraphQL.

155
00:10:54.895 --> 00:10:58.980
We're more focused on compatibility
between GrappQL and Typescript, and

156
00:10:58.980 --> 00:11:02.315
how you can get the benefits of
everything working together.

157
00:11:02.315 --> 00:11:07.330
That hopefully describes everything
you're seeing here, there are no

158
00:11:07.330 --> 00:11:13.182
interfaces everything sort of begins type
so far, so we've created this one file.

159
00:11:13.182 --> 00:11:16.060
Let's continue on with our instructions.

160
00:11:16.060 --> 00:11:19.050
So, hopefully we understand everything
that's going on in this code we just

161
00:11:19.050 --> 00:11:19.834
copied and pasted.

162
00:11:21.995 --> 00:11:26.994
Okay, so in the entry point for
the server code, which is index.ts,

163
00:11:26.994 --> 00:11:29.960
we're gonna add some imports.

164
00:11:29.960 --> 00:11:31.800
So, let's go ahead and do that.

165
00:11:36.351 --> 00:11:41.613
Imports go at the top, and
we're gonna add the following

166
00:11:41.613 --> 00:11:46.771
two lines immediately below
the static route, right?

167
00:11:46.771 --> 00:11:53.544
This is where the images are served up the
fav icon, all the just the static files.

168
00:11:53.544 --> 00:11:58.054
So, we're gonna put this below
where we see the static stuff.

169
00:11:59.276 --> 00:11:59.931
That is here.

170
00:12:04.694 --> 00:12:07.784
And we're using the imports
now which is great.

171
00:12:09.291 --> 00:12:12.857
And then there's one last thing we're
gonna do just to make our life easier.

172
00:12:15.214 --> 00:12:20.002
And it's a small little change in a
logging line here that will give us a nice

173
00:12:20.002 --> 00:12:25.184
clickable link to a convenient thing,
this will take us to the Apollo dev tools.

174
00:12:25.184 --> 00:12:29.927
So, instead of this empty string
we're gonna replace it with Apollo

175
00:12:29.927 --> 00:12:31.491
server GraphQL path.

176
00:12:34.148 --> 00:12:36.450
Paste, okay.

177
00:12:36.450 --> 00:12:43.770
And I believe that should be
enough to get us up and running.

178
00:12:43.770 --> 00:12:46.915
We go all the way down,
I don't see any errors,

179
00:12:46.915 --> 00:12:51.488
I already see this string here
/GraphQL that wasn't there before.

180
00:12:51.488 --> 00:12:56.513
So, I'm gonna click on
the second link localhost

181
00:12:56.513 --> 00:13:02.617
3000/GraphQL and
you should see something like this,

182
00:13:02.617 --> 00:13:07.176
so this is the Apollo's
studio entry point.

183
00:13:07.176 --> 00:13:10.919
And I can hit query my server, you can see
we're still running on local host here,

184
00:13:10.919 --> 00:13:12.493
and now we'll be off local host but

185
00:13:12.493 --> 00:13:15.220
we're actually we're gonna
still be hitting our own API.

186
00:13:15.220 --> 00:13:19.487
So, you should see yourself
looking at something like this.

187
00:13:19.487 --> 00:13:21.817
You won't see this query here,

188
00:13:21.817 --> 00:13:26.140
this is sort of left over from
when I was testing things out.

189
00:13:27.230 --> 00:13:32.631
But this is where you document your API,
where you can explore it,

190
00:13:32.631 --> 00:13:36.502
we're gonna be using
this extensively today.

191
00:13:38.676 --> 00:13:41.503
And, I wanna just try something,
let's see what happens.

192
00:13:41.503 --> 00:13:46.436
I'm gonna, like,
on the side thing here, the side rail,

193
00:13:46.436 --> 00:13:50.971
I'm gonna say, I wanna make a query,
I wanna query for

194
00:13:50.971 --> 00:13:55.630
current user, and
it's giving me fields to pick from.

195
00:13:55.630 --> 00:13:59.179
Let me just ask for
the current users name, and

196
00:13:59.179 --> 00:14:03.660
let's fire this off, and
we get an error message.

197
00:14:03.660 --> 00:14:07.067
So, this is an answer to the question
like, who's doing the validating for me?

198
00:14:07.067 --> 00:14:13.024
We can see this is at runtime,
we're getting some good feedback here,

199
00:14:13.024 --> 00:14:19.080
cannot return null for
a non-nullable field, query.current user.

200
00:14:19.080 --> 00:14:20.912
But another way to say this is,

201
00:14:20.912 --> 00:14:24.860
we've not implemented anything
that will return a current user,

202
00:14:24.860 --> 00:14:30.290
all we've done is like, set up the GraphQL
server with nothing wired up to it yet.

203
00:14:30.290 --> 00:14:32.845
So, it's gonna return null for
everything no matter what we asked for.

204
00:14:32.845 --> 00:14:39.730
But this is an example of it's kind of
type checking happening at runtime.

