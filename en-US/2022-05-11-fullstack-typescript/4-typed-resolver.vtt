WEBVTT

1
00:00:00.000 --> 00:00:04.616
The next thing we're gonna do
is add types to our resolver.

2
00:00:04.616 --> 00:00:10.145
So we've been operating without a net so
to speak up to this point.

3
00:00:10.145 --> 00:00:15.711
By that I mean,
in my resolvers like I could put a bunch

4
00:00:15.711 --> 00:00:20.682
of junk in here that will
not make Apollo happy.

5
00:00:20.682 --> 00:00:23.770
There's nothing here that enforces,

6
00:00:23.770 --> 00:00:28.168
that I do the right thing or
I return the right thing, and

7
00:00:28.168 --> 00:00:32.578
this will cause all sorts of
annoying things to happen.

8
00:00:32.578 --> 00:00:37.433
And in order for us to have this, in order
to deliver on the promise I've made,

9
00:00:37.433 --> 00:00:40.376
that we can have types
defined in one place, and

10
00:00:40.376 --> 00:00:43.630
nice type checking and
enforcement of those types.

11
00:00:43.630 --> 00:00:47.366
All the way from our resolvers,
over the wire, into our UI,

12
00:00:47.366 --> 00:00:52.431
like we're gonna have to address this,
and that's what we're about to do next.

13
00:00:52.431 --> 00:00:58.136
And this is potentially one of the more
exciting things we're gonna do in this

14
00:00:58.136 --> 00:01:04.125
project, and that is generating TypeScript
code based on that GraphQL schema.

15
00:01:04.125 --> 00:01:05.753
Now, everything's set up for

16
00:01:05.753 --> 00:01:08.700
you right now,
such that you can just run yarn codegen.

17
00:01:08.700 --> 00:01:10.497
And we're gonna do that and

18
00:01:10.497 --> 00:01:15.118
then we're gonna look at what I had
in place in order to make this work.

19
00:01:15.118 --> 00:01:21.049
So do this from within the server
sub project, run yarn codegen.

20
00:01:21.049 --> 00:01:25.192
So I'm gonna open a new terminal here.

21
00:01:28.571 --> 00:01:31.155
Yarn codegen.

22
00:01:34.656 --> 00:01:38.574
Sorry, I'm gonna make
a quick git commit first

23
00:01:42.733 --> 00:01:48.013
All right, yarn codegen, and
hopefully you'll see no errors,

24
00:01:48.013 --> 00:01:50.898
you see two green checkmarks here.

25
00:01:50.898 --> 00:01:57.093
You can see that some files changed so
my server bounced and came back up.

26
00:01:57.093 --> 00:01:59.664
And let's make sure that
everything's still working.

27
00:01:59.664 --> 00:02:03.567
We go back to our Apollo studio,
we click Run, looks like it's still good.

28
00:02:03.567 --> 00:02:06.654
All right, so what just happened?

29
00:02:06.654 --> 00:02:13.904
Well, you may notice that there is
a new file, a new file appears, right?

30
00:02:13.904 --> 00:02:18.703
Resolvers-types.generated.ts, so
you can name these files whatever you

31
00:02:18.703 --> 00:02:21.837
want this file,
you can name it whatever you want.

32
00:02:21.837 --> 00:02:26.240
I like having .generated.ts,
or some convention like that,

33
00:02:26.240 --> 00:02:31.468
makes it very easy for me to know,
I shouldn't touch this file myself ever.

34
00:02:31.468 --> 00:02:36.848
These are files that you
should be able to blow away,

35
00:02:36.848 --> 00:02:43.960
and recreate based on your GraphQL schema,
as your schema evolves.

36
00:02:43.960 --> 00:02:48.143
So if we look at the contents
of this file, you can see, hey,

37
00:02:48.143 --> 00:02:49.709
here are our scalars.

38
00:02:49.709 --> 00:02:53.022
We've got ID, we've got string,
we've got Boolean.

39
00:02:53.022 --> 00:02:57.842
These are sort of most primitive types
in the GraphQL world, and we can see

40
00:02:57.842 --> 00:03:03.002
a mapping of these capital letter things
into their TypeScript equivalents.

41
00:03:03.002 --> 00:03:05.860
Here is something that looks
like our query interface.

42
00:03:05.860 --> 00:03:09.555
And we've got our current user and
our suggestions,

43
00:03:09.555 --> 00:03:12.359
let's look at our query resolver here.

44
00:03:12.359 --> 00:03:15.309
There's current user and suggestions, so

45
00:03:15.309 --> 00:03:19.864
it looks like these are kind of
return types of the of our resolvers.

46
00:03:19.864 --> 00:03:25.472
This is what our client can expect to
get if asking for these kinds of things.

47
00:03:25.472 --> 00:03:30.204
And then we've got our suggestion and
our user type great, so

48
00:03:30.204 --> 00:03:33.760
this represents the TypeScript equivalent.

49
00:03:33.760 --> 00:03:38.882
Have these GraphQL entities, and
they're all exported from this

50
00:03:38.882 --> 00:03:44.931
module which means we're free to import
them and use them in our code, right?

51
00:03:44.931 --> 00:03:48.384
These are sort of your models so to speak.

52
00:03:48.384 --> 00:03:53.310
Down here we have more types,
and some of this we're not gonna

53
00:03:53.310 --> 00:03:58.428
get into like there's graph
skillers concept of subscriptions

54
00:03:58.428 --> 00:04:02.804
where you could say,
tell me when something changes.

55
00:04:02.804 --> 00:04:07.768
Very advanced concept and
tricky to implement in a pro-formart way.

56
00:04:07.768 --> 00:04:16.353
But we've also got some resolver types
like this resolver, resolver type wrapper.

57
00:04:16.353 --> 00:04:23.654
Probably have a query, query resolvers and
look at that query resolvers.

58
00:04:23.654 --> 00:04:27.195
It's got a current user,
it's got suggestion.

59
00:04:27.195 --> 00:04:34.657
So these are the things we're
gonna use to type our resolvers.

60
00:04:34.657 --> 00:04:37.370
So with that, let's get going.

61
00:04:40.880 --> 00:04:45.157
By the way, if you see type errors
immediately following running yarn

62
00:04:45.157 --> 00:04:48.138
codegen, just bounce
your TypeScript server.

63
00:04:48.138 --> 00:04:52.885
If you're using VS code, there's command
restrict restart TypeScript server.

64
00:04:52.885 --> 00:04:57.587
It's just a lot kind of changing behind
the scenes outside the context of

65
00:04:57.587 --> 00:04:58.443
the editor.

66
00:04:58.443 --> 00:05:01.171
So VS code doesn't see that
you're editing a file or

67
00:05:01.171 --> 00:05:03.963
saving it just something
changes behind the scenes.

68
00:05:03.963 --> 00:05:07.650
Sometimes, if you see red squiggles, and

69
00:05:07.650 --> 00:05:12.983
you think they shouldn't be there,
always good to restart.

70
00:05:12.983 --> 00:05:18.025
So at the highest level,
we're gonna type the big

71
00:05:18.025 --> 00:05:26.683
mega resolver object that's returned with
the default export from resolvers.ts.

72
00:05:26.683 --> 00:05:31.386
So we'll import this resolvers
type from this generated file, and

73
00:05:31.386 --> 00:05:35.600
we will type the return type of
our create resolvers function

74
00:05:40.181 --> 00:05:44.673
Actually, I don't think we
have a function here but

75
00:05:44.673 --> 00:05:48.666
we can update it to make
it like that if we want.

76
00:05:48.666 --> 00:05:51.420
Effectively we just need the export
to be typed this way, so

77
00:05:51.420 --> 00:05:54.999
whether you have a function that exports
it or we just have a very full variable

78
00:05:54.999 --> 00:05:57.890
that's a default export,
I think that's where we ended up.

79
00:06:00.905 --> 00:06:04.690
So, let's go to resolvers,
let's add this, and

80
00:06:04.690 --> 00:06:07.690
then let's make this of the right type.

81
00:06:16.019 --> 00:06:23.800
Great, so now, we appropriately be yelled
at if we add a junk here which is great.

82
00:06:23.800 --> 00:06:30.232
Now one problem is that this query thing,
if we look at what's imported,

83
00:06:30.232 --> 00:06:35.940
it's just sort of inferring
the type from whatever is exported,

84
00:06:35.940 --> 00:06:38.560
which is great for this file.

85
00:06:40.998 --> 00:06:46.598
But over here, it kinda is what it is,
so part of the problem

86
00:06:46.598 --> 00:06:51.874
here is if I do this,
everything kinda looks okay here.

87
00:06:51.874 --> 00:06:56.596
If I mess with this,
make the method name wrong,

88
00:06:56.596 --> 00:07:02.137
I'm not getting the type errors
that I would hope to get.

89
00:07:02.137 --> 00:07:04.458
So let me restart my TypeScript
server just to be safe

90
00:07:14.770 --> 00:07:18.598
Yeah, I'm getting no type errors, so

91
00:07:18.598 --> 00:07:22.774
we really wanna type this as well, right?

92
00:07:22.774 --> 00:07:26.760
So the way we're gonna do that, let me
undo my deliberate messing things up here.

93
00:07:26.760 --> 00:07:31.766
We're gonna import query resolvers,
here we go and

94
00:07:31.766 --> 00:07:37.468
make sure you make it a local
path sorry it's dot dot slash.

95
00:07:37.468 --> 00:07:41.109
And now hopefully, yep, so

96
00:07:41.109 --> 00:07:46.268
if I don't have the right names here that

97
00:07:46.268 --> 00:07:50.821
are coming from my GraphQL schema,

98
00:07:50.821 --> 00:07:57.974
I will get the red squiggles
that tell me I've been bad.

99
00:07:57.974 --> 00:07:58.882
So that's it.

100
00:07:58.882 --> 00:08:03.620
So in resolvers.ts, we use this sort
of top level type, and then for

101
00:08:03.620 --> 00:08:07.393
each service object that
contains a set of resolvers.

102
00:08:07.393 --> 00:08:12.983
We can have like query resolvers or
user resolvers or suggestion resolvers,

103
00:08:12.983 --> 00:08:17.457
and we'll talk more about when
we have to build our first one.

104
00:08:17.457 --> 00:08:23.419
We'll talk about why we would have that
and what purpose it serves, so great

105
00:08:27.768 --> 00:08:33.030
There's some sample data we can return
just to take advantage of our types.

106
00:08:33.030 --> 00:08:37.794
Instead of that empty suggestions array,
we can paste the sample data in and

107
00:08:37.794 --> 00:08:39.215
return this instead.

108
00:08:39.215 --> 00:08:43.795
And what we should see, just note that
there's only one suggestion here.

109
00:08:43.795 --> 00:08:49.295
When we complete a change in our UI,
and we actually consume this data,

110
00:08:49.295 --> 00:08:52.514
we should see two of these things show up.

111
00:08:52.514 --> 00:08:55.035
So let's return this from suggestions.

112
00:09:00.890 --> 00:09:06.599
All right, we're gonna just test this
with our server here, or our dev tool.

113
00:09:06.599 --> 00:09:07.810
Okay, awesome.

114
00:09:07.810 --> 00:09:12.005
Note that, there's a lot more
on suggestions I could get.

115
00:09:12.005 --> 00:09:19.049
Get the avatar URL if I want, and
you see how I'm getting what I asked for.

116
00:09:19.049 --> 00:09:20.935
Can ask for only the name or only the ID.

117
00:09:20.935 --> 00:09:24.937
All right, now let's deal with context,

118
00:09:24.937 --> 00:09:29.776
so This is where we have this nice

119
00:09:29.776 --> 00:09:34.825
little convenience object that's gonna be
available within each of these resolvers.

120
00:09:34.825 --> 00:09:40.140
So it's actually the third argument,
it's this right here.

121
00:09:40.140 --> 00:09:44.925
And currently, it's an any, but what we
want is to be able to do something like

122
00:09:44.925 --> 00:09:47.478
this, like grab the DB off of this thing.

123
00:09:47.478 --> 00:09:50.759
And then we could say db.getStuff, and

124
00:09:50.759 --> 00:09:56.561
it'll just be there handed to us just
where we need it for convenience.

125
00:09:56.561 --> 00:10:01.953
So, we want typing to help us
understand what's possible there,

126
00:10:01.953 --> 00:10:04.951
and that's what we're about to do.

127
00:10:04.951 --> 00:10:09.094
So in our resolvers.ts, we're gonna

128
00:10:09.094 --> 00:10:13.997
define an interface for
this context object.

129
00:10:13.997 --> 00:10:19.857
And for now it's just gonna have this db
on it, so we're gonna have to import this,

130
00:10:19.857 --> 00:10:25.075
so we get its type, and create an object
with a db property pretty simple.

131
00:10:25.075 --> 00:10:28.236
So we're adding this to
the top of resolvers.ts.

132
00:10:30.752 --> 00:10:33.290
And we wanna export this because
we'll need it in other places.

133
00:10:42.041 --> 00:10:47.590
Next, we're gonna pass this
type in as a typeparam

134
00:10:47.590 --> 00:10:52.635
to both of the resolver
types we just applied.

135
00:10:52.635 --> 00:11:01.128
Both the one at the top level with the
resolvers thing and the query resolvers.

136
00:11:01.128 --> 00:11:05.619
They both take this as a typeparam,
so you can add it here.

137
00:11:08.480 --> 00:11:12.473
And then in query.ts up at the top,

138
00:11:12.473 --> 00:11:17.677
we can add it here, and
we'll have to import it

139
00:11:20.594 --> 00:11:27.847
Dot slash or dot dot slash And
what does this mean?

140
00:11:27.847 --> 00:11:33.263
Well, now this little db thing
we put in here, look at that,

141
00:11:33.263 --> 00:11:37.512
now we can do db., and
we get createFavorite,

142
00:11:37.512 --> 00:11:42.739
createTweet, createUser,
you had all this good stuff.

143
00:11:42.739 --> 00:11:46.284
This is how we're gonna go and
retrieve our data, it's really nice and

144
00:11:46.284 --> 00:11:49.077
convenient to have that there and
had that typed for us.

145
00:11:55.128 --> 00:11:59.289
We're not gonna use this quite yet So
we'll use her little underscore trick,

146
00:11:59.289 --> 00:12:00.770
we'll kind of leave it there for later.

147
00:12:02.670 --> 00:12:07.382
This is unused but that's okay.

148
00:12:07.382 --> 00:12:11.576
Great, one last place,
we need to apply this type and

149
00:12:11.576 --> 00:12:15.226
that is where this context
object is created.

150
00:12:15.226 --> 00:12:22.540
Remember that little function in
Apollo server, this thing here, right?

151
00:12:22.540 --> 00:12:30.688
We're gonna make this return
a TwitterResolverContext.

152
00:12:34.905 --> 00:12:41.670
That means if we put extra junk on here,
it will be appropriately scolded for that.

153
00:12:44.115 --> 00:12:47.712
So, what is the end
result that we get here?

154
00:12:47.712 --> 00:12:52.514
Well, if in resolvers,
we say I need a thing,

155
00:12:52.514 --> 00:12:56.948
that's an empty array, I should be told,

156
00:12:56.948 --> 00:13:00.660
Hey, you got to give me that array.

157
00:13:00.660 --> 00:13:07.371
You have to initialize this with an empty
array or something, when things start up.

158
00:13:07.371 --> 00:13:12.934
And it also means that in my query
resolvers down here, I could do thing,

159
00:13:12.934 --> 00:13:18.155
and I would get this, so
here's all of the array prototype things.

160
00:13:18.155 --> 00:13:22.480
So let's say, I do this, right?

161
00:13:22.480 --> 00:13:28.499
And then go back here and we say,
no, I don't want that anymore.

162
00:13:28.499 --> 00:13:33.250
Things should light up appropriately like
this is saying, hey, this thing's gone.

163
00:13:33.250 --> 00:13:37.353
So we have typing on this context object
now, we also have make sure that we're

164
00:13:37.353 --> 00:13:41.968
returning the right things, now that we've
added types to the resolvers themselves.

165
00:13:41.968 --> 00:13:47.376
So if we forget to return here,
it's gonna say, hey, look,

166
00:13:47.376 --> 00:13:52.167
I expected you to give me
an array of suggestions here.

167
00:13:52.167 --> 00:13:56.430
Like this should be,
returning an array of suggestions or

168
00:13:56.430 --> 00:14:00.258
a promise that resolves to
an array of suggestions,

169
00:14:00.258 --> 00:14:05.920
does anyone wanna guess why there's
this promise that resolves to an array?

170
00:14:05.920 --> 00:14:09.970
Like what would that let us do,
the fact that we can return an array or

171
00:14:09.970 --> 00:14:12.332
a promise that resolves to that array?

172
00:14:13.992 --> 00:14:15.290
&gt;&gt; Data in the middle.

173
00:14:15.290 --> 00:14:19.250
Yeah, we can get data in the middle,
we can make it an async function, right?

174
00:14:19.250 --> 00:14:22.166
You just put the word async
before the function, and

175
00:14:22.166 --> 00:14:26.483
now we can await within the function,
and things will just work as expected.

176
00:14:26.483 --> 00:14:31.956
So, if you return a promise from one
of these Apollo, we'll just wait for

177
00:14:31.956 --> 00:14:37.100
it, as needed, which is really
nice no special ceremony required.

178
00:14:37.100 --> 00:14:41.591
So, great I think we're at a point
now where we have typing that works.

179
00:14:41.591 --> 00:14:48.023
One last check, make sure things are still
operating, seems good, seems great.

