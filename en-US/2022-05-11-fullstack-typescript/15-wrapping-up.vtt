WEBVTT

1
00:00:00.760 --> 00:00:03.237
All right, Nicholas has a good question.

2
00:00:03.237 --> 00:00:07.064
He asked a couple minutes ago,
could we define a type of for

3
00:00:07.064 --> 00:00:12.500
verifying if something has a hashtag
key instead of using object as any?

4
00:00:12.500 --> 00:00:20.080
And I'm gonna guess he is referring to in
the trend resolver, this this thing here.

5
00:00:20.080 --> 00:00:22.550
So yeah,
we have a little bit of a challenge here.

6
00:00:24.300 --> 00:00:28.247
First off, I mean, actually I think we do,
we could do it like this.

7
00:00:30.675 --> 00:00:31.754
This is a better way to do it.

8
00:00:31.754 --> 00:00:32.959
It's good you asked.

9
00:00:37.193 --> 00:00:41.727
Actually, it's tricky,
I'll tell you what I was just thinking.

10
00:00:41.727 --> 00:00:46.099
I was about to reach for kind, I was
thinking, hey, we already have this kind

11
00:00:46.099 --> 00:00:49.953
string, it's something that's
stored in our database, right?

12
00:00:53.119 --> 00:00:56.756
So we look at the trends,
should be maybe at the bottom.

13
00:00:56.756 --> 00:01:00.746
Yeah, here it's actually a field, you can
think of this, there's a column in our

14
00:01:00.746 --> 00:01:04.519
database and serialized in there we should
be able to rely on it being in there.

15
00:01:04.519 --> 00:01:07.887
However, important to remember,

16
00:01:07.887 --> 00:01:12.836
this is the GraphQL
representation of that entity.

17
00:01:12.836 --> 00:01:17.850
So what we could do instead of doing this,
we could in this query as

18
00:01:17.850 --> 00:01:23.597
we're assembling this, we could use
that cache strategy where we would,

19
00:01:23.597 --> 00:01:28.552
while we have access to the DB
representation which it's this.

20
00:01:32.573 --> 00:01:34.060
This object here.

21
00:01:34.060 --> 00:01:38.413
We could maybe build up a map that
shows here is the trend ID, and

22
00:01:38.413 --> 00:01:42.880
it belonged, it is a hashtag trend or
something like that.

23
00:01:42.880 --> 00:01:49.291
And then as we're being asked to sort
out deeper down in this function like,

24
00:01:49.291 --> 00:01:55.420
all right, here's a GraphQL object
that has no kind property, right?

25
00:01:56.910 --> 00:01:57.942
What is its type?

26
00:01:57.942 --> 00:02:03.291
We could then reach into
this context object and

27
00:02:03.291 --> 00:02:06.372
sort out what's going on.

28
00:02:06.372 --> 00:02:08.484
Does that make sense?

29
00:02:08.484 --> 00:02:10.470
Now, this is also totally fine.

30
00:02:11.470 --> 00:02:12.706
I know this field will be there.

31
00:02:12.706 --> 00:02:17.175
So, I would say that this is okay.

32
00:02:17.175 --> 00:02:21.968
It's effectively a user defined
type guard, but in the GraphQL

33
00:02:21.968 --> 00:02:27.130
world instead of in the TypeScript world,
yeah, many ways to do it.

34
00:02:27.130 --> 00:02:32.135
You could either do some bookkeeping or
some introspection.

35
00:02:32.135 --> 00:02:36.966
What should I remember as a summary after
the course about the cache in terms of

36
00:02:36.966 --> 00:02:38.988
which queries we cache and why?

37
00:02:38.988 --> 00:02:43.258
And he also mentioned n plus 1 queries,
what should I remember about that?

38
00:02:43.258 --> 00:02:51.048
So my answer there is, I'm gonna
paraphrase that question a little bit.

39
00:02:51.048 --> 00:02:53.914
I think what he's asking for
is a sanity check.

40
00:02:53.914 --> 00:02:56.727
How do you know you're
caching in the right places?

41
00:02:56.727 --> 00:03:01.124
And not worrying too much about caching
in places where it matters less.

42
00:03:01.124 --> 00:03:04.795
I would say just study your schema and

43
00:03:04.795 --> 00:03:10.251
think about how it's going
to impact your resolvers.

44
00:03:10.251 --> 00:03:15.259
Things are either going to be
called one time or n times usually,

45
00:03:15.259 --> 00:03:20.820
it's just, is it a current user thing or
is it an N times thing?

46
00:03:20.820 --> 00:03:24.631
And it does get a little
bit more complicated and

47
00:03:24.631 --> 00:03:27.398
this is a challenge with GraphQL.

48
00:03:27.398 --> 00:03:33.291
You can't always be sure what's
gonna be called in what order and

49
00:03:33.291 --> 00:03:36.838
this is the most handwave answer ever.

50
00:03:36.838 --> 00:03:42.555
The more complicated your schema gets,
the less confident

51
00:03:42.555 --> 00:03:49.086
you can feel about users will only
be accessed on a per one off basis.

52
00:03:49.086 --> 00:03:52.920
Here's an example, you could look
at this and we've said this, right?

53
00:03:52.920 --> 00:03:57.781
Based on the kind of queries I'm making,
it's totally fine when we go to a user and

54
00:03:57.781 --> 00:04:02.289
we say, give me your stats, and we're
gonna get the whole list of likes that

55
00:04:02.289 --> 00:04:06.010
they've made and
get all of those into an array.

56
00:04:06.010 --> 00:04:09.696
Well, that may have been fine at one
point, but I could also get all the tweets

57
00:04:09.696 --> 00:04:13.556
and the authors of those tweets which are
of type user and then start reaching into

58
00:04:13.556 --> 00:04:17.170
those users and getting some of
this really expensive stuff.

59
00:04:17.170 --> 00:04:20.285
So try to avoid the n plus one queries,
but

60
00:04:20.285 --> 00:04:24.920
it's the kind of thing where you
have to stay well organized.

61
00:04:24.920 --> 00:04:27.363
It's one of the main challenges
of working with GraphQL.

62
00:04:27.363 --> 00:04:32.049
You have a system here that has very
little information about how is

63
00:04:32.049 --> 00:04:35.990
this information being used and
in what circumstance.

64
00:04:35.990 --> 00:04:40.710
You can ask it for whatever you want,
and that moves the problem.

65
00:04:40.710 --> 00:04:45.550
The problem is now, how do you fulfill
a wide open set of possible requests

66
00:04:45.550 --> 00:04:50.702
people could make in a way where you can
guarantee things will be performant and

67
00:04:50.702 --> 00:04:53.300
that your systems won't be degraded?

68
00:04:53.300 --> 00:04:58.404
An approach that some companies
have taken is limiting queries,

69
00:04:58.404 --> 00:05:00.815
where maybe you can only ask for

70
00:05:00.815 --> 00:05:05.083
certain things on users if
it's a one-off request for

71
00:05:05.083 --> 00:05:09.997
one user and they'll give you
a server error if you try to ask for

72
00:05:09.997 --> 00:05:14.580
it in a context where it's
gonna degrade things too much.

73
00:05:15.750 --> 00:05:21.068
Making something that's fast and
easy and consistent and very,

74
00:05:21.068 --> 00:05:26.096
very, very, very performant all the time,
that sounds like

75
00:05:26.096 --> 00:05:31.037
a zero trade off situation and
those generally do not exist.

76
00:05:34.533 --> 00:05:39.423
I'm not sure how much useful
information there isn't that answer,

77
00:05:39.423 --> 00:05:41.540
but it's kind of a gray area.

78
00:05:41.540 --> 00:05:46.034
This is about system architecture
more than how do you put these pieces

79
00:05:46.034 --> 00:05:49.960
together to form a full
stack TypeScript app.

80
00:05:49.960 --> 00:05:53.800
Thanks very much for
building this Twitter app.

81
00:05:53.800 --> 00:05:56.201
A full stack TypeScript
app where the client and

82
00:05:56.201 --> 00:05:58.450
server are connected with GraphQL.

83
00:05:58.450 --> 00:06:01.761
I hope you can see that some of
the benefits you enjoy with writing

84
00:06:01.761 --> 00:06:04.580
TypeScript code either on your server or
your client,

85
00:06:04.580 --> 00:06:07.358
now we get some of those
advantages across the stack.

86
00:06:07.358 --> 00:06:11.847
Where as we refactor things, as we change
things, type information is telling

87
00:06:11.847 --> 00:06:16.004
us where we need to finish up and
complete our refactor all over the place.

88
00:06:16.004 --> 00:06:20.142
So it's a great way to set things up and
hopefully it provided a great

89
00:06:20.142 --> 00:06:24.878
experience for you and you learn how
to use GraphQL and TypeScript together.

90
00:06:24.878 --> 00:06:25.646
Thanks a lot.

91
00:06:25.646 --> 00:06:26.146
&gt;&gt; [APPLAUSE]

