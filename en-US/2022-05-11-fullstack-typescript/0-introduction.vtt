WEBVTT

1
00:00:00.098 --> 00:00:02.445
Welcome to full stack TypeScript.

2
00:00:02.445 --> 00:00:03.380
I'm Mike North.

3
00:00:03.380 --> 00:00:06.744
And I'm a senior staff engineer at
LinkedIn where I work on developer

4
00:00:06.744 --> 00:00:07.676
infrastructure.

5
00:00:07.676 --> 00:00:10.556
I've been a Frontend Masters
teacher since 2015.

6
00:00:10.556 --> 00:00:14.136
Today, I'm here to talk to you
about full stack TypeScript.

7
00:00:14.136 --> 00:00:18.056
You may enjoy using TypeScript for
your browser based, or your server

8
00:00:18.056 --> 00:00:22.517
side code which is no surprise because
it offers a great authoring experience.

9
00:00:22.517 --> 00:00:27.366
And you catch entire categories of
bugs at build time before they ever

10
00:00:27.366 --> 00:00:28.963
affect a single user.

11
00:00:28.963 --> 00:00:34.213
One of the downsides to working this way,
it's not really a downside,

12
00:00:34.213 --> 00:00:39.025
but something we don't have yet
in a setup like this is the ability

13
00:00:39.025 --> 00:00:43.164
to get the benefits of type
checking across an API call.

14
00:00:43.164 --> 00:00:47.671
This is to say, anytime you fetch data,
and you get a response back,

15
00:00:47.671 --> 00:00:50.859
you find yourself having to assert that,
yeah,

16
00:00:50.859 --> 00:00:54.072
I expect this payload to
be of a particular type.

17
00:00:54.072 --> 00:00:58.013
And there's nothing that makes sure that
all of that stays in alignment except your

18
00:00:58.013 --> 00:00:59.543
own vigilance as a human being.

19
00:00:59.543 --> 00:01:04.304
And the project we're going into work
on today, we're going to try to create

20
00:01:04.304 --> 00:01:08.772
a system that looks more like this,
where you can kind of see how the green

21
00:01:08.772 --> 00:01:13.699
color represents one set of types that
are shared across the client and server.

22
00:01:13.699 --> 00:01:17.718
And then another set of types that
represent how data is actually persisted

23
00:01:17.718 --> 00:01:20.731
in our database that's sort
of this purple color here.

24
00:01:20.731 --> 00:01:24.466
What this means is you get all
the benefits you already love about

25
00:01:24.466 --> 00:01:27.858
TypeScript, like the ability
to confidently refactor,

26
00:01:27.858 --> 00:01:30.780
make sure you haven't
left any dangling things.

27
00:01:30.780 --> 00:01:35.548
You get that across these network calls,
right?

28
00:01:35.548 --> 00:01:38.095
And to do that, we're gonna use GraphQL.

29
00:01:40.754 --> 00:01:45.887
So the scenario we're going to explore
today involves using TypeScript for

30
00:01:45.887 --> 00:01:51.096
all of our client and server side code,
GraphQL for API query language and our

31
00:01:51.096 --> 00:01:56.577
wire format meaning the way we construct
our JSON as it travels over the network.

32
00:01:56.577 --> 00:02:01.470
And we're gonna focus on using a very
simple relational database it's just

33
00:02:01.470 --> 00:02:03.085
based off of a JSON file.

34
00:02:03.085 --> 00:02:06.619
It's important to understand that
if you were to swap that out for

35
00:02:06.619 --> 00:02:10.668
something more realistic like SQL
relational database or a document store

36
00:02:10.668 --> 00:02:15.246
like Mongo DB everything we're working on
today it will still benefit you greatly.

37
00:02:15.246 --> 00:02:19.356
You can even replace your back end
with something that's not written in

38
00:02:19.356 --> 00:02:24.024
TypeScript and you'll get some of the same
benefits that we're going to enjoy.

39
00:02:24.024 --> 00:02:28.482
The way we're going to get hands on
with all of these great tools is by

40
00:02:28.482 --> 00:02:30.292
building a Twitter clone.

41
00:02:30.292 --> 00:02:32.151
At the beginning of the day,

42
00:02:32.151 --> 00:02:37.430
we're gonna start out with UI completely
based off of hard-coded static data.

43
00:02:37.430 --> 00:02:40.081
It'll look great, but it won't do much.

44
00:02:40.081 --> 00:02:43.620
By the end of the day,
you'll be creating new tweets and

45
00:02:43.620 --> 00:02:47.986
you'll be able to like an unlike tweets,
not to mention the fact that

46
00:02:47.986 --> 00:02:52.805
everything you see on the screen will be
powered by real data coming from your

47
00:02:52.805 --> 00:02:57.432
database through GraphQL into the UI,
a much more realistic scenario.

48
00:02:57.432 --> 00:03:03.331
Before we get into the project, let's talk
a little bit about what GraphQL is and

49
00:03:03.331 --> 00:03:05.688
what problems it aims to solve.

50
00:03:05.688 --> 00:03:11.372
So let's imagine a hypothetical scenario
where we are building a new page for

51
00:03:11.372 --> 00:03:12.691
an existing app.

52
00:03:12.691 --> 00:03:16.048
Let's imagine we have this
screen on the right already and

53
00:03:16.048 --> 00:03:19.965
we're being asked to build something
like what you see on the left.

54
00:03:19.965 --> 00:03:24.459
So we may have an API endpoint that
already exists that produces a lot of

55
00:03:24.459 --> 00:03:28.497
detailed information to power
this right side of the screen but

56
00:03:28.497 --> 00:03:33.849
we may need some different things on the
left maybe a field that doesn't exist yet.

57
00:03:33.849 --> 00:03:36.971
For example,
what if we wanted to enable or

58
00:03:36.971 --> 00:03:42.450
disable this little book button based
on the doctor's current schedule.

59
00:03:42.450 --> 00:03:47.406
So we have a couple choices in terms
of how we want to proceed if we want to

60
00:03:47.406 --> 00:03:49.767
go and do this with a restful API.

61
00:03:49.767 --> 00:03:55.327
First, we could use the existing endpoint
as is an add this availability field.

62
00:03:55.327 --> 00:03:59.716
And if we imagine that might involve
talking to some calendar system which

63
00:03:59.716 --> 00:04:03.822
could take a little while,
this means everything that's asking for

64
00:04:03.822 --> 00:04:07.180
information about a doctor,
gets a little bit slower.

65
00:04:07.180 --> 00:04:12.070
We could build an entirely new
endpoint that produces data only for

66
00:04:12.070 --> 00:04:14.088
this availability field.

67
00:04:14.088 --> 00:04:17.803
And we could ask for
the existing doctor information and

68
00:04:17.803 --> 00:04:19.708
this new thing in parallel.

69
00:04:19.708 --> 00:04:24.672
This is gonna result in a lot of little
fragmented supplemental API resources.

70
00:04:24.672 --> 00:04:29.494
And it's gonna be very difficult to
keep everything well organized over

71
00:04:29.494 --> 00:04:31.003
a long period of time.

72
00:04:31.003 --> 00:04:35.685
The third option is we could build
an entirely new API endpoint that gives us

73
00:04:35.685 --> 00:04:39.417
everything we need for
this new scenario we need to handle.

74
00:04:39.417 --> 00:04:44.542
This is gonna result in a lot of duplicate
code where you'll have doctor detail view,

75
00:04:44.542 --> 00:04:48.547
doctor summary view,
doctor advanced view, doctor admin view.

76
00:04:48.547 --> 00:04:53.463
And all of a sudden this whole idea of
leveraging a single API endpoint for

77
00:04:53.463 --> 00:04:55.164
doctor is gone, right?

78
00:04:55.164 --> 00:04:57.778
That's not ideal either.

79
00:04:57.778 --> 00:05:02.498
Finally, we could modify the existing
endpoint, so that it produces

80
00:05:02.498 --> 00:05:07.147
a different response depending on
a query parameter that we pass in.

81
00:05:07.147 --> 00:05:11.250
The fourth option we have is to
modify the existing API endpoint.

82
00:05:11.250 --> 00:05:16.422
For example, providing a query parameter
that tells the API whether to produce

83
00:05:16.422 --> 00:05:21.143
a summary or a details view which may
involve different fields for each.

84
00:05:21.143 --> 00:05:25.416
This is going to become difficult to
manage at scale, especially if we don't

85
00:05:25.416 --> 00:05:29.705
establish a strong convention across
all of the resources we have to manage.

86
00:05:29.705 --> 00:05:31.108
What does summary mean?

87
00:05:31.108 --> 00:05:33.361
What does details mean?

88
00:05:33.361 --> 00:05:38.093
In addition, if we have multiple
different options that all

89
00:05:38.093 --> 00:05:42.935
can influence each other as new
scenarios need to be handled.

90
00:05:42.935 --> 00:05:46.018
You can see how we end up having
to worry about a lot of different

91
00:05:46.018 --> 00:05:49.172
combinations of things and
how they interact with each other.

92
00:05:49.172 --> 00:05:54.357
Even if we had these three different
flags that we could turn on,

93
00:05:54.357 --> 00:05:58.790
that would influence the way
a doctor is represented.

94
00:05:58.790 --> 00:06:03.787
We'll end up with n factorial scenarios
even if we worry about pairs have options

95
00:06:03.787 --> 00:06:08.284
and how they interact with each other
it starts to get very complicated.

96
00:06:08.284 --> 00:06:14.107
So GraphQL aims to solve problems like
this one in that a client asks for

97
00:06:14.107 --> 00:06:16.091
the data that it needs.

98
00:06:16.091 --> 00:06:20.514
And we can avoid problems like
over fetching by producing only

99
00:06:20.514 --> 00:06:23.331
the data that's asked for and no more.

100
00:06:23.331 --> 00:06:27.347
We'll learn more about the details
of GraphQL by getting hands on and

101
00:06:27.347 --> 00:06:30.404
tackling the concepts that
are involved one by one.

102
00:06:30.404 --> 00:06:33.484
For now,
let's dig into the workshop project and

103
00:06:33.484 --> 00:06:35.618
examine the starting point code.

104
00:06:35.618 --> 00:06:44.094
First, you should clone the GitHub repo,
which is Mike North, full stack TS.

105
00:06:44.094 --> 00:06:47.739
After you have your local working copy,
I recommend you install Volta

106
00:06:47.739 --> 00:06:50.642
which ensures that you're
going to use the same Node and

107
00:06:50.642 --> 00:06:54.186
Yarn versions that I do when I'm
running the project for the class.

108
00:06:54.186 --> 00:06:59.207
To install the dependencies for
the project, just run yarn.

109
00:06:59.207 --> 00:07:02.783
Once you have it locally cloned,
you can run yarn build

110
00:07:02.783 --> 00:07:07.393
to create your first build and
then run yarn dev to start up the server.

111
00:07:09.738 --> 00:07:11.726
I'm gonna go ahead and
do that for us right now.

112
00:07:17.407 --> 00:07:20.309
Yarn to install the dependencies

113
00:07:25.000 --> 00:07:28.224
Looks like a build is happening
automatically, which is great.

114
00:07:28.224 --> 00:07:31.805
This shouldn't do much oops,
if I can spell build correctly.

115
00:07:31.805 --> 00:07:35.081
Great, and
now I should be able to run yarn dev.

116
00:07:36.711 --> 00:07:39.111
And I should see a nice little banner,

117
00:07:39.111 --> 00:07:43.086
saying the servers running on
local host 1234 there it is,

118
00:07:43.086 --> 00:07:47.964
may happen twice for the first time you
started out, but that's no big deal.

119
00:07:47.964 --> 00:07:52.084
So you can click this first link here,
localhost 1234.

120
00:07:52.084 --> 00:07:55.630
You should see something that
looks like this, the Twitter UI.

121
00:07:55.630 --> 00:07:58.898
So where will we find ourselves
at the end of this course?

122
00:07:58.898 --> 00:08:03.089
We're gonna to start with this
Twitter app that's purely hard

123
00:08:03.089 --> 00:08:04.837
coded on the client side.

124
00:08:04.837 --> 00:08:09.690
It's just pulling fixture data from arrays
that are in those client side modules.

125
00:08:09.690 --> 00:08:12.503
By the end of the day,
we'll be able to create new tweaks and

126
00:08:12.503 --> 00:08:14.874
we'll be able to interact
with that like button.

127
00:08:14.874 --> 00:08:18.444
We should be able to see the little
heart light up and go away, and

128
00:08:18.444 --> 00:08:20.108
the count should increment.

129
00:08:20.108 --> 00:08:25.161
And all of the data we see on
the UI should be coming ultimately

130
00:08:25.161 --> 00:08:30.131
from our database and
traveling to the UI through GraphQL.

131
00:08:30.131 --> 00:08:32.991
In terms of what we won't end
up touching in this course,

132
00:08:32.991 --> 00:08:36.643
this is stuff that is sort of beyond
the scope of what we're focusing on.

133
00:08:36.643 --> 00:08:38.739
We shouldn't have to touch any CSS.

134
00:08:38.739 --> 00:08:41.368
We shouldn't have to install
any new dependencies.

135
00:08:41.368 --> 00:08:43.813
We shouldn't have to change
the TypeScript config.

136
00:08:43.813 --> 00:08:47.529
And we should not have to worry too
much how our backend interacts with

137
00:08:47.529 --> 00:08:48.821
the database, right?

138
00:08:48.821 --> 00:08:54.645
We're just gonna use that db class, and
that has methods on it, ready to go.

139
00:08:54.645 --> 00:08:57.098
It has everything you should need on it.

140
00:08:57.098 --> 00:09:03.600
And we'll consider that to be a separate
topic, like the ORM aspect of things.

