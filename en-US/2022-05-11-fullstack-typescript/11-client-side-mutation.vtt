WEBVTT

1
00:00:00.290 --> 00:00:05.704
In this next part, we're going to modify
the React component called compose panel.

2
00:00:05.704 --> 00:00:08.522
That's where you're actually
gonna type this tweet, and

3
00:00:08.522 --> 00:00:11.518
we'll use this mutation that we
created in the previous step.

4
00:00:11.518 --> 00:00:16.811
So let's open our client side project,
sub-project.

5
00:00:16.811 --> 00:00:20.392
And we're gonna go to ComposePanel.tsx.

6
00:00:22.490 --> 00:00:26.903
And in here,
we're going to import some utilities,

7
00:00:28.620 --> 00:00:30.996
The apollo/client gql tag.

8
00:00:30.996 --> 00:00:35.706
And something that will fail at first,

9
00:00:35.706 --> 00:00:42.140
the react hook for
using a new Create Tweet mutation.

10
00:00:44.609 --> 00:00:47.646
So we're gonna add these up at the top.

11
00:00:47.646 --> 00:00:50.252
And we're gonna have to
grab this mutation as well.

12
00:00:50.252 --> 00:00:55.828
Note the word mutation here,
this is different from query.

13
00:00:55.828 --> 00:01:00.762
This is important in terms of
wiring things up the right way.

14
00:01:00.762 --> 00:01:06.190
Otherwise looks quite similar, and we'll
look at that in more detail momentarily.

15
00:01:10.089 --> 00:01:13.896
All right, so note,
we have these dollar sign things,

16
00:01:13.896 --> 00:01:18.518
CreateNewTweet, $userId and
$body, with these dollar signs.

17
00:01:18.518 --> 00:01:22.443
So these are the variables
coming into your mutation.

18
00:01:22.443 --> 00:01:26.533
And then you could have
potentially more than one

19
00:01:26.533 --> 00:01:30.735
of these things that uses the variables,
right?

20
00:01:30.735 --> 00:01:35.799
So this is the idea of having
a mutation and then variables,

21
00:01:35.799 --> 00:01:40.578
and then they can be doing
more than one thing down here.

22
00:01:40.578 --> 00:01:45.437
Which is important if you wanted to sort
of almost create a transaction of sorts,

23
00:01:45.437 --> 00:01:48.438
where many things are happening
at the same time,

24
00:01:48.438 --> 00:01:51.020
you want them to be going on concurrently.

25
00:01:51.020 --> 00:01:56.279
It's not strictly transaction in that it
depends on your implementation and your

26
00:01:56.279 --> 00:02:01.475
resolver, whether you let it to either
complete as one atomic operation or not.

27
00:02:01.475 --> 00:02:02.598
But in any case,

28
00:02:02.598 --> 00:02:08.067
it's sort of gonna be one promise from
the standpoint of the consumer of the API.

29
00:02:08.067 --> 00:02:12.511
And this is a nice little aspect
of the VS Code GraphQL plugin,

30
00:02:12.511 --> 00:02:16.439
you can hit Execute Mutation and
it's gonna ask you for

31
00:02:16.439 --> 00:02:21.498
the variables, the value for user ID,
the value for the other thing.

32
00:02:21.498 --> 00:02:26.029
And then the response would show up over
here, but I'm not gonna bother doing that.

33
00:02:26.029 --> 00:02:30.060
Here's that error from our server.

34
00:02:30.060 --> 00:02:32.288
Nice to be able to do that
right from within your code.

35
00:02:32.288 --> 00:02:38.131
So great,
we have the new operation in our UI.

36
00:02:38.131 --> 00:02:44.248
That means we have to CodeGen again,
in the client project, and yarn codegen.

37
00:02:44.248 --> 00:02:45.485
Show me some checkmarks.

38
00:02:45.485 --> 00:02:51.912
Great, at which point this, yep,
red line went away, now it's just unused.

39
00:02:51.912 --> 00:02:54.109
And we can see here's the type.

40
00:02:54.109 --> 00:02:56.479
These are the variables that it takes in,

41
00:02:56.479 --> 00:02:59.940
looks like everything's flowing
through as we would hope.

42
00:02:59.940 --> 00:03:03.363
So the next thing we'll do
is delete the whole thing.

43
00:03:03.363 --> 00:03:08.118
We're going to replace it
with the hook equivalent.

44
00:03:08.118 --> 00:03:12.842
In fact,
Copilot is correctly suggesting it to me.

45
00:03:12.842 --> 00:03:15.926
There it is, CreateNew Tweet.

46
00:03:15.926 --> 00:03:19.641
And then there's a second argument that
we can capture here, which is error.

47
00:03:19.641 --> 00:03:24.000
And I believe there's a loading property
here as well if you wanted a little

48
00:03:24.000 --> 00:03:27.332
spinner that would render
while you're persisting it.

49
00:03:27.332 --> 00:03:32.490
It's gonna happen so fast in our case
that it's not even worth worrying about.

50
00:03:32.490 --> 00:03:37.402
So that's the first line, and
then we can say, if( error ),

51
00:03:37.402 --> 00:03:41.957
this is on the website code if
you wanna just copy paste it.

52
00:03:41.957 --> 00:03:51.116
Return, Return the error creating tweet,

53
00:03:51.116 --> 00:03:57.081
and then we'll have the error,
something like that.

54
00:03:57.081 --> 00:04:01.098
All right, so there's your hook, and
we're leaving it with the same name.

55
00:04:03.499 --> 00:04:05.391
Should be okay.

56
00:04:09.327 --> 00:04:12.230
And we're gonna have to just change
what's happening at the call site.

57
00:04:12.230 --> 00:04:16.998
So handleSubmit, this is actually what's
wired up to the DOM event here, right?

58
00:04:16.998 --> 00:04:19.335
This is the form submit event.

59
00:04:19.335 --> 00:04:22.696
This is our invocation of CreateNewTweet.

60
00:04:22.696 --> 00:04:24.853
This is where things
are actually happening.

61
00:04:24.853 --> 00:04:27.166
In this case, we just Console-logged,

62
00:04:27.166 --> 00:04:30.351
and then this was like
the placeholder implementation.

63
00:04:30.351 --> 00:04:34.477
We'd log and say,
this is where we would do the thing, and

64
00:04:34.477 --> 00:04:39.212
then we clear the text area, so
that the composed tweet goes away.

65
00:04:39.212 --> 00:04:42.820
Well, in this case,
what we're doing is gonna be async.

66
00:04:42.820 --> 00:04:44.539
So we're gonna need to
change this a little bit.

67
00:04:44.539 --> 00:04:50.486
At the very least,
we'll have to say .then,

68
00:04:50.486 --> 00:04:53.841
and then clear the input or

69
00:04:53.841 --> 00:04:58.735
the text area, something like that.

70
00:04:58.735 --> 00:05:03.138
Right, and let's bound to EsLint.

71
00:05:03.138 --> 00:05:06.628
The other thing is,
we're not just passing in body here.

72
00:05:06.628 --> 00:05:10.810
We're passing in something
that this GraphQL react hook

73
00:05:10.810 --> 00:05:14.827
is designed to receive and
that is a variables object.

74
00:05:14.827 --> 00:05:16.680
So there's this config object.

75
00:05:16.680 --> 00:05:20.726
For now, we're just using variables and
we'll pass in userId.

76
00:05:20.726 --> 00:05:23.310
That's gonna be currentUser.Id, and

77
00:05:23.310 --> 00:05:27.036
then body is something that
we're already getting here.

78
00:05:27.036 --> 00:05:32.380
Also, we have a dangling
promise here which is bad Juju.

79
00:05:32.380 --> 00:05:34.122
So we wanna add a catch block,

80
00:05:48.777 --> 00:05:49.915
Something like that.

81
00:05:49.915 --> 00:05:55.074
So just in summary,
we created our new mutation.

82
00:05:55.074 --> 00:05:59.183
We replaced our placeholder,
CreateNewTweet,

83
00:05:59.183 --> 00:06:01.833
function with the use of a hook.

84
00:06:01.833 --> 00:06:05.884
We're handling this error in
the case if things go wrong.

85
00:06:05.884 --> 00:06:10.169
So this will happen after we attempt to
persist things, maybe our server goes down

86
00:06:10.169 --> 00:06:13.722
to the back end, and this little
text will show up, which is great.

87
00:06:13.722 --> 00:06:16.399
And now, we're changing
the way we're invoking this,

88
00:06:16.399 --> 00:06:18.366
we're not passing the body in directly.

89
00:06:18.366 --> 00:06:23.837
We're passing in this variables object,
giving it the user ID and the body.

90
00:06:23.837 --> 00:06:28.143
Again in our schema,
there's userId, there's body.

91
00:06:28.143 --> 00:06:35.074
So these are not local names,
they are part of your public API.

92
00:06:35.074 --> 00:06:40.174
And then we're clearing things out in
the event things complete successfully,

93
00:06:40.174 --> 00:06:43.630
and we're erroring in the event
that things go wrong.

94
00:06:43.630 --> 00:06:46.770
Let's try this out, let's see if it works.

95
00:06:48.576 --> 00:06:53.632
Yeah, so I got a question in chat,
is error unknown?

96
00:06:53.632 --> 00:07:00.070
It should be, these days I should
really make sure it's an unknown.

97
00:07:00.070 --> 00:07:05.166
I wonder if, You know what,

98
00:07:05.166 --> 00:07:07.980
I would have to type it here.

99
00:07:07.980 --> 00:07:12.591
So there's a new TypeScript feature
that makes it so all caught values,

100
00:07:12.591 --> 00:07:16.534
all values you're encountering
catch blocks are unknowns.

101
00:07:16.534 --> 00:07:21.366
But this is literally the catch
type of the promise API, so

102
00:07:21.366 --> 00:07:24.631
it doesn't really benefit from that.

103
00:07:24.631 --> 00:07:28.296
However, you're welcome
to type it as an unknown.

104
00:07:28.296 --> 00:07:30.962
In fact, I think it's wise to do so.

105
00:07:30.962 --> 00:07:33.376
Yeah, Mark, you're correct,

106
00:07:33.376 --> 00:07:38.047
I did suggest doing this in
the Making TypeScript Stick course.

107
00:07:38.047 --> 00:07:40.522
But that's for try-catch,

108
00:07:40.522 --> 00:07:45.875
the sort of the fundamental
control flow JavaScript concepts.

109
00:07:45.875 --> 00:07:47.321
In the Promise API,

110
00:07:47.321 --> 00:07:52.186
I do not believe that these new
language features carry through it.

111
00:07:52.186 --> 00:07:57.852
In fact, I'd be surprised if I hadn't
already set things up that way.

112
00:07:57.852 --> 00:07:58.674
Let's see.

113
00:07:58.674 --> 00:08:00.689
Yep, use unknown and catch variable.

114
00:08:00.689 --> 00:08:03.585
So I already have this turned on,
it's just,

115
00:08:03.585 --> 00:08:05.975
it's sort of the async version of it.

116
00:08:05.975 --> 00:08:09.552
If this were real try-catch,
you would see it.

117
00:08:09.552 --> 00:08:13.436
But that's the right instinct,
people who are thinking,

118
00:08:13.436 --> 00:08:16.163
make that an unknown, good, keep that.

119
00:08:16.163 --> 00:08:18.801
All right, let's kick the tires,
see if things work.

120
00:08:18.801 --> 00:08:24.513
So we should be able to, let's refresh,
just make sure we get the latest code.

121
00:08:24.513 --> 00:08:30.143
And hello, this is a first tweet.

122
00:08:30.143 --> 00:08:32.527
By the way, this is from nine minutes ago,

123
00:08:32.527 --> 00:08:35.787
this is the stuff that we
persisted through the dev tools.

124
00:08:35.787 --> 00:08:37.466
So that's showing up.

125
00:08:37.466 --> 00:08:39.652
And I'm gonna hit Compose.

126
00:08:39.652 --> 00:08:45.050
Boom, and we see nothing, the text
area gets cleared and we see nothing.

127
00:08:45.050 --> 00:08:48.864
And if we refresh, there it pops up.

128
00:08:48.864 --> 00:08:51.309
Less than a minute ago,
this tweet was created.

129
00:08:51.309 --> 00:08:55.707
So what's happening here is we
are successfully persisting the data.

130
00:08:55.707 --> 00:08:59.757
We can see it, first off, when we reload,
we see that the data comes back.

131
00:08:59.757 --> 00:09:03.593
In addition,
if we look at our changes, we can see,

132
00:09:03.593 --> 00:09:07.183
this just happened,
what's the current time?

133
00:09:07.183 --> 00:09:11.379
37 minutes past the hour, that's probably
this one here, this is my first tweet.

134
00:09:11.379 --> 00:09:13.068
So it's persisting, but

135
00:09:13.068 --> 00:09:17.152
what's happening is the state
in my react app is not updating.

136
00:09:17.152 --> 00:09:21.077
Now, normally you would do this through
some state management library or

137
00:09:21.077 --> 00:09:23.620
you would use set state or
something like that.

138
00:09:23.620 --> 00:09:29.853
There is another option
in the Apollo world.

139
00:09:29.853 --> 00:09:38.077
And that is the idea of re-fetching the
data associated with a particular query.

140
00:09:38.077 --> 00:09:43.213
And that can happen in sort of
an action at a distance way.

141
00:09:43.213 --> 00:09:47.157
So although we're in this composed panel,
and

142
00:09:47.157 --> 00:09:53.270
something just happened, the data we
want to effectively invalidate and

143
00:09:53.270 --> 00:09:57.326
refresh, that's in this Timeline.tsx file.

144
00:09:57.326 --> 00:10:01.291
It's this query here called
GET_TIMELINE_TWEETS.

145
00:10:01.291 --> 00:10:04.453
And in terms of how these are organized,

146
00:10:04.453 --> 00:10:08.923
ComposePanel is a child
component of Timeline, right?

147
00:10:08.923 --> 00:10:11.115
It's within Timeline.

148
00:10:11.115 --> 00:10:16.434
So it's a child that wants to sort
of tell its parent to reload.

149
00:10:16.434 --> 00:10:20.475
Many different ways to do this, but
I wanna show you, this is a good

150
00:10:20.475 --> 00:10:24.964
opportunity for me to show you how you
can do this just at the Apollo layer.

151
00:10:24.964 --> 00:10:29.656
So the way we're gonna fix
this bug is adding a new

152
00:10:29.656 --> 00:10:34.018
option to the way we're
invoking this hook.

153
00:10:34.018 --> 00:10:37.843
And it's going to be refetchQueries, and

154
00:10:37.843 --> 00:10:43.381
we'll pass in an array
containing GET_TIMELINE_TWEETS.

155
00:10:43.381 --> 00:10:49.156
So this is what's exported from Timeline.

156
00:10:49.156 --> 00:10:51.551
Remember, we're exporting
all of our queries here.

157
00:10:51.551 --> 00:10:53.746
See, we're bringing it in up here.

158
00:10:53.746 --> 00:10:58.669
And we're just saying refetchQueries,
GET_TIMELINE_TWEETS.

159
00:10:58.669 --> 00:11:04.232
So when this comes back, it'll say,
hey, something just happened,

160
00:11:04.232 --> 00:11:09.996
and that something seems to feel that
you could get something different.

161
00:11:09.996 --> 00:11:12.262
So why don't you go ahead and
refetch this?

162
00:11:12.262 --> 00:11:16.981
And behind the scenes,
what's happening is a set state, and

163
00:11:16.981 --> 00:11:22.907
that's causing the timeline component
to refetch and update accordingly.

164
00:11:22.907 --> 00:11:27.486
So I'm gonna save this real quick,
and let's go ahead and

165
00:11:27.486 --> 00:11:29.551
test the UI one more time.

166
00:11:31.471 --> 00:11:34.391
I'm gonna refresh to make
sure I get the latest stuff.

167
00:11:34.391 --> 00:11:39.195
Does this automatically work?

168
00:11:39.195 --> 00:11:42.679
Will we see it right away?

169
00:11:45.602 --> 00:11:47.091
And we do.

170
00:11:47.091 --> 00:11:52.106
And in fact, interesting,
the tweet count isn't changing here.

171
00:11:52.106 --> 00:11:55.075
If I refresh, it is changing.

172
00:11:55.075 --> 00:11:57.762
Actually, we could fix that as well.

173
00:11:57.762 --> 00:12:00.558
It's getting a little heavy handed here.

174
00:12:00.558 --> 00:12:04.678
We could refresh that GET_CURRENT_USER
query as well if we wanted to.

175
00:12:04.678 --> 00:12:05.669
Let's [LAUGH] do that.

176
00:12:10.942 --> 00:12:15.849
If you're feeling like this is starting
to get out of hand, fair point.

177
00:12:18.710 --> 00:12:20.423
No more refetching.

178
00:12:27.563 --> 00:12:28.547
And we can hit this.

179
00:12:28.547 --> 00:12:32.116
Now, are we gonna see the tweets
count go from three to four?

180
00:12:32.116 --> 00:12:36.187
Yes, I love boiling the ocean.

181
00:12:38.833 --> 00:12:40.583
It makes so much steam.

182
00:12:43.180 --> 00:12:43.991
And five.

183
00:12:43.991 --> 00:12:49.066
Action at a distance is a little
dangerous, because you have to

184
00:12:49.066 --> 00:12:54.637
think carefully about how you'd be
able to debug this kind of thing.

185
00:12:54.637 --> 00:12:59.379
And what you don't want is a situation
where someone's performing some

186
00:12:59.379 --> 00:13:00.623
interaction, and

187
00:13:00.623 --> 00:13:05.300
it's causing mysterious side effects
to happen elsewhere in the app.

188
00:13:05.300 --> 00:13:10.081
So use it like salt,
a little bit goes a long way.

189
00:13:10.081 --> 00:13:15.000
But this is a nice, in the case of
the timeline tweets, this is, I would say,

190
00:13:15.000 --> 00:13:17.524
a straightforward kind of thing to do.

191
00:13:17.524 --> 00:13:21.677
And it certainly beats the idea of trying
to shove some client side representation

192
00:13:21.677 --> 00:13:22.951
of that data structure.

193
00:13:22.951 --> 00:13:26.384
Which might not have a timestamp on it or
an ID or whatnot,

194
00:13:26.384 --> 00:13:30.971
trying to shove that into an array and
optimistically update the timeline.

195
00:13:30.971 --> 00:13:33.901
I would prefer just get the new data,
right?

196
00:13:42.421 --> 00:13:47.297
Nicolas asked a good question in chat,

197
00:13:47.297 --> 00:13:50.853
maybe we need idempotency.

198
00:13:50.853 --> 00:13:56.089
So the idea of idempotency,
[LAUGH] it's a very fancy word that means,

199
00:13:58.053 --> 00:14:01.792
Effectively performing an operation more

200
00:14:01.792 --> 00:14:06.679
than once with the same inputs
will turn out to be a no op.

201
00:14:06.679 --> 00:14:11.488
So a lot of this has to do with
writing code in such a way where

202
00:14:11.488 --> 00:14:15.135
your code just wants to
reach a given state.

203
00:14:15.135 --> 00:14:18.935
And if no work needs to be done
in order to get into that state,

204
00:14:18.935 --> 00:14:20.286
no work will be done.

205
00:14:20.286 --> 00:14:23.523
This is how React does its rendering,
for example.

206
00:14:23.523 --> 00:14:29.027
In this case,
I wouldn't argue that we're doing things

207
00:14:29.027 --> 00:14:34.186
in an idempotent way,
because we are fetching a lot of

208
00:14:34.186 --> 00:14:39.479
data that we might already have,
if that makes sense.

209
00:14:39.479 --> 00:14:43.890
So we are doing more work than we need to.

210
00:14:45.669 --> 00:14:49.289
Yeah, all right,
from the classroom, Mark asks,

211
00:14:49.289 --> 00:14:54.492
can current user summary and the tweet
list subscribe to changes somehow?

212
00:14:54.492 --> 00:15:00.605
It feels like compose panel knows
too much about other components.

213
00:15:00.605 --> 00:15:03.365
I could see how you would feel that way,
right,

214
00:15:03.365 --> 00:15:06.550
the compose panel is reaching
up to its parents query.

215
00:15:06.550 --> 00:15:11.894
And one could argue that that sort of
breaks the separation of concerns.

216
00:15:11.894 --> 00:15:17.067
GraphQL does support
the concept of subscriptions.

217
00:15:19.227 --> 00:15:22.972
I'm just gonna kinda show
you what that looks like.

218
00:15:22.972 --> 00:15:25.692
So just, yeah, here we go.

219
00:15:25.692 --> 00:15:30.613
You can create a type called Subscription,
it's very similar to query and

220
00:15:30.613 --> 00:15:34.299
mutation, it's one of these
special top level types.

221
00:15:34.299 --> 00:15:35.409
Here's the thing though.

222
00:15:37.043 --> 00:15:42.148
You know how GraphQL supports querying and
mutation, but

223
00:15:42.148 --> 00:15:47.579
it's totally on us to implement
the actual work that is done.

224
00:15:47.579 --> 00:15:50.817
We're touching a DB, right?

225
00:15:50.817 --> 00:15:55.031
So the trick is not necessarily
like is it possible to use

226
00:15:55.031 --> 00:15:57.370
subscriptions with GraphQL?

227
00:15:57.370 --> 00:15:59.750
Absolutely, it is possible.

228
00:15:59.750 --> 00:16:06.265
But you get into the same problem that
other near real time apps run into.

229
00:16:06.265 --> 00:16:11.617
Which is, there's a significant overhead
for each user that's connected to your

230
00:16:11.617 --> 00:16:16.980
app, right, be it through a WebSocket,
or long polling, or anything like that.

231
00:16:16.980 --> 00:16:20.064
It makes sense if you're
building a chat app and

232
00:16:20.064 --> 00:16:22.773
you wanna know when new messages arrive.

233
00:16:22.773 --> 00:16:27.804
But if you do it for
all of the data that's in the UI,

234
00:16:27.804 --> 00:16:33.654
it's just a lot, and
it's expensive in terms of operating

235
00:16:33.654 --> 00:16:38.802
that system and
making sure that it's performant.

236
00:16:38.802 --> 00:16:46.131
So I would say, Yes,
it's possible, be careful.

237
00:16:46.131 --> 00:16:49.821
The problem GraphQL solves in this space
is not the hardest problem to solve in

238
00:16:49.821 --> 00:16:50.570
this space..

239
00:16:50.570 --> 00:16:55.190
And that the hard problem is, how do
you do this in an efficient way, and

240
00:16:55.190 --> 00:16:57.731
how do you use this near real time update

241
00:16:57.731 --> 00:17:00.824
sparingly in the right
cases where it matters?

242
00:17:00.824 --> 00:17:05.657
If you're building a stock ticker app or
a currency trading app or an Ebay,

243
00:17:05.657 --> 00:17:08.434
and you wanna show the auction countdown.

244
00:17:08.434 --> 00:17:11.699
And you want that UI to update and
for that to be definitely

245
00:17:11.699 --> 00:17:16.334
how much time is left, cuz someone's
making a purchase decision based on that.

246
00:17:16.334 --> 00:17:19.635
That sounds like a valuable place
to use this kind of thing, but

247
00:17:19.635 --> 00:17:22.270
I don't know if I would use it for
a Twitter clone.

248
00:17:26.036 --> 00:17:30.401
Nicholas, in class,
points out that the client could also

249
00:17:30.401 --> 00:17:33.994
provide the count value
that should be updated.

250
00:17:33.994 --> 00:17:40.151
So I assume what you mean is, at the time
the compose panel submits the tweet,

251
00:17:40.151 --> 00:17:44.152
we could just say the count
is incremented by one.

252
00:17:44.152 --> 00:17:47.813
Yes, of course, we could do that.

253
00:17:47.813 --> 00:17:52.388
But I'm not sure that I would advocate for
doing things that way, because what

254
00:17:52.388 --> 00:17:56.755
if the user has multiple devices, and
they send a tweet from their phone and

255
00:17:56.755 --> 00:18:00.033
they have had this page open
on their browser for a week?

256
00:18:00.033 --> 00:18:04.736
It's kinda just there,
they keep it on the third monitor, and

257
00:18:04.736 --> 00:18:09.192
then I want the state to kinda
come from the source of truth.

258
00:18:09.192 --> 00:18:13.676
I don't want it sometimes to
come from my back end, and

259
00:18:13.676 --> 00:18:17.099
sometimes to be coming from my front end.

260
00:18:17.099 --> 00:18:20.010
That can result in a confusing
experience sometimes.

