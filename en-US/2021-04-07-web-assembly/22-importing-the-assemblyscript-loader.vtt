WEBVTT

1
00:00:00.210 --> 00:00:05.670
That worked, but,
let's write something a bit more complex.

2
00:00:05.670 --> 00:00:07.369
Because I want appreciate,

3
00:00:07.369 --> 00:00:11.810
I want us all to appreciate how
useful the AssemblyScript loader is.

4
00:00:11.810 --> 00:00:15.442
Again, the loader is is a small utility
function which provides a lot of glue

5
00:00:15.442 --> 00:00:18.510
code, which does a lot of
the heavy lifting for us.

6
00:00:18.510 --> 00:00:22.885
Let's see how well, let's see
the benefits of using the loader and

7
00:00:22.885 --> 00:00:27.660
importing that in and using in our code
and all the work that it does for us.

8
00:00:28.760 --> 00:00:31.590
So, we, I feel like we haven't
done enough code today.

9
00:00:31.590 --> 00:00:35.020
So, real quick,
pretend this is an interview.

10
00:00:35.020 --> 00:00:37.500
I want you to implement fizzbuzz.

11
00:00:37.500 --> 00:00:40.360
But I want you to implement
it in AssemblyScripts.

12
00:00:42.560 --> 00:00:47.934
Don't cheat if you don't have to, but
this fizzbuzz is the world famous

13
00:00:47.934 --> 00:00:53.970
problem that apparently most developers
can't solve when handed to them.

14
00:00:53.970 --> 00:00:57.420
Let's see if you can do it, but
you're doing an assembly script this time.

15
00:00:57.420 --> 00:01:01.170
And a question that was asked was,

16
00:01:01.170 --> 00:01:06.340
where can we find the Opcodes,
in a useful way,

17
00:01:06.340 --> 00:01:11.384
not in the official
WebAssembly documents and

18
00:01:11.384 --> 00:01:17.219
the Opcodes are at
pengoreGitHub.io/wazzleops.

19
00:01:18.970 --> 00:01:23.050
I don't know why GitHub
scrolling along to that.

20
00:01:23.050 --> 00:01:27.274
However, if you need a link,
they are in the notes,

21
00:01:27.274 --> 00:01:30.260
under the stack and Opcode section.

22
00:01:30.260 --> 00:01:33.848
And if you click on here's an interactive
table, you'll see all those Opcodes.

23
00:01:36.906 --> 00:01:42.613
All right,
let's put my money where my mouth is and

24
00:01:42.613 --> 00:01:47.300
let's see if we can implement fizzbuzz.

25
00:01:47.300 --> 00:01:51.124
Now, I'm gonna write it out because,
again, I like to practice what I preach.

26
00:01:51.124 --> 00:01:56.731
So I'm gonna export function fizzbuzz and

27
00:01:56.731 --> 00:02:01.870
fizzbuzz is going to take one number and

28
00:02:01.870 --> 00:02:05.776
and it's a 32 bit integer.

29
00:02:05.776 --> 00:02:10.050
So i32 and we're going to return a string.

30
00:02:10.050 --> 00:02:14.704
The function is gonna return a string.

31
00:02:14.704 --> 00:02:21.464
Or no, we use the pipe to say no, okay?

32
00:02:24.011 --> 00:02:29.013
And once you understand the logic transfer
as well as it's pretty straightforward.

33
00:02:29.013 --> 00:02:31.821
I know, I've been trying
not to say straightforward,

34
00:02:31.821 --> 00:02:35.648
much intact because like if someone
doesn't get it feels like diminutive,

35
00:02:35.648 --> 00:02:38.840
but I do feel like fizzbuzz
is fairly straightforward.

36
00:02:38.840 --> 00:02:42.133
So all we're checking is if n is a,

37
00:02:42.133 --> 00:02:47.850
Why is that complaining,
it's just early complaining.

38
00:02:47.850 --> 00:02:54.026
I was checking if and
n mod 15 is 0, that means it's a,

39
00:02:54.026 --> 00:02:59.714
multiple of 15, so
we can say return, fizzbuzz,

40
00:03:06.853 --> 00:03:12.073
And if n mod 3 equals 0,

41
00:03:12.073 --> 00:03:18.298
we're gonna return, fizz,

42
00:03:22.588 --> 00:03:29.180
In it n mode 5,
there are many ways to write fizzbuzz.

43
00:03:29.180 --> 00:03:33.190
This is just one, you might have written
it a little bit different, that's okay.

44
00:03:34.740 --> 00:03:38.575
Buzz, otherwise we're
going to return null.

45
00:03:43.683 --> 00:03:46.570
Now the liter stuff and planning cool.

46
00:03:46.570 --> 00:03:50.257
And as I like to do whenever I write
a function, before I go wild about it,

47
00:03:50.257 --> 00:03:53.883
I like to run it through the compiler
cuz it's going to check my types and

48
00:03:53.883 --> 00:03:55.956
make sure I didn't do anything wrong.

49
00:03:55.956 --> 00:04:00.478
Compiles fine, awesome,
okay, so now we're getting,

50
00:04:00.478 --> 00:04:05.649
into something a little bit trickier and
we'll see why I saved this

51
00:04:05.649 --> 00:04:11.310
towards the end, why we didn't
start messing with strings yet.

52
00:04:11.310 --> 00:04:15.369
But for now, let's update our index.html
to call our fizzbuzz function and

53
00:04:15.369 --> 00:04:17.820
see let's see if it actually works.

54
00:04:17.820 --> 00:04:25.240
So jumping back to our index.html going
take out minus one and write fizzbuzz.

55
00:04:28.020 --> 00:04:35.170
And I'm just gonna fizzbuzz three,
which theoretically should return.

56
00:04:36.240 --> 00:04:40.320
It should return fizz, right,
all right, well, let's see.

57
00:04:40.320 --> 00:04:44.833
Let's see what happens,

58
00:04:44.833 --> 00:04:52.226
if returned 1104 that is not a string.

59
00:04:52.226 --> 00:04:59.602
Why is that, can anybody, can you think of
why or what this is actually returning.

60
00:04:59.602 --> 00:05:04.100
&gt;&gt; Some buffery, so
it's four characters, I would say.

61
00:05:05.380 --> 00:05:08.098
And each letter is
represented a character.

62
00:05:08.098 --> 00:05:13.630
&gt;&gt; That's a good guess,
I liked what you're thinking and

63
00:05:13.630 --> 00:05:18.410
that's how I would interpret it as well.

64
00:05:18.410 --> 00:05:22.541
But actually what it's doing
is it's returning a pointer,

65
00:05:22.541 --> 00:05:26.190
to the location in memory
where the string is stored.

66
00:05:27.600 --> 00:05:30.710
And because we like to go
into a bit of detail here,

67
00:05:30.710 --> 00:05:34.720
let's check out what is actually
happening, in the what file.

68
00:05:36.980 --> 00:05:39.749
So, if we scroll down to
our fizzbuzz example,

69
00:05:39.749 --> 00:05:44.200
we see again, this gets more complicated
as we saw in the previous example.

70
00:05:45.290 --> 00:05:50.970
And what it's doing is, it's getting
the number it's comparing it against.

71
00:05:50.970 --> 00:05:55.570
It's comparing against zero or 15, and
if it equals that it's going to return.

72
00:05:55.570 --> 00:05:59.997
This function or
it's gonna return 1056 for fizzbuzz,

73
00:05:59.997 --> 00:06:03.920
1104 for fizz and 1136 for buzz.

74
00:06:03.920 --> 00:06:08.780
What these are, they are memory
pointers to the location and memory.

75
00:06:08.780 --> 00:06:15.700
That AssemblyScript has saved our strings,
because I can WebAssembly.

76
00:06:15.700 --> 00:06:17.490
I'm gonna keep repeating this, but

77
00:06:17.490 --> 00:06:19.980
WebAssembly does not have
the concept of strings.

78
00:06:19.980 --> 00:06:24.920
It only has the concept of numbers,
strings, or should I say natively?

79
00:06:24.920 --> 00:06:29.370
Strings are just the concepts created for
high level programming.

80
00:06:29.370 --> 00:06:31.390
At the core of everything,
it's just a number.

81
00:06:31.390 --> 00:06:33.520
So we're still just dealing
with numbers and in this case,

82
00:06:33.520 --> 00:06:34.979
we're dealing with memory locations.

83
00:06:36.240 --> 00:06:41.193
So, what's really interesting
is we can look here and

84
00:06:41.193 --> 00:06:48.450
we see a series of X representing
the padding on the strings we're saving.

85
00:06:48.450 --> 00:06:51.470
But if we look down here,
we should it's bigger.

86
00:06:53.460 --> 00:06:55.980
We see that the strings
are are actually saved.

87
00:06:55.980 --> 00:07:00.374
So what AssemblyScript does is,
it saves references to our strings,

88
00:07:00.374 --> 00:07:01.870
it puts them into data.

89
00:07:01.870 --> 00:07:06.570
And data is just a way of saving
things in directly in the memory and

90
00:07:06.570 --> 00:07:11.690
it saves them as these as X
operators with the letters attached.

91
00:07:11.690 --> 00:07:16.672
So when we reach in, we can actually
pull the strings backed out,

92
00:07:16.672 --> 00:07:19.300
using the loader, but naively and

93
00:07:19.300 --> 00:07:25.020
this is something it took me a while
to grasp, was what that number meant.

94
00:07:25.020 --> 00:07:28.970
Because it's in this case we said three,
it's returning 1104.

95
00:07:28.970 --> 00:07:35.144
Why is it 1104, because if we look
at the data for fizz, it's 1196.

96
00:07:36.230 --> 00:07:40.900
There is such thing as the header
files on memory locations.

97
00:07:40.900 --> 00:07:46.710
So one of those header files
starts with also step back.

98
00:07:46.710 --> 00:07:49.525
AssemblyScripts can only
write to linear memory or

99
00:07:49.525 --> 00:07:52.240
WebAssembly only writes to linear memory.

100
00:07:52.240 --> 00:07:56.930
That is, these chunks of memory,
that are allocated for the process.

101
00:07:56.930 --> 00:08:00.079
So to save as something like
a string in the memory,

102
00:08:00.079 --> 00:08:04.691
you have to give it a specific location
and a specific size, so that later,

103
00:08:04.691 --> 00:08:09.250
when a web assembly is looking it up,
it says, you want the string?

104
00:08:09.250 --> 00:08:11.282
Which it doesn't have
the concept of string,

105
00:08:11.282 --> 00:08:12.896
it has the concept of ones and zeros,

106
00:08:12.896 --> 00:08:17.080
but we know that it's stored at this
particular memory location at this offset.

107
00:08:17.080 --> 00:08:20.662
With this header file,
that's why these are numbers and

108
00:08:20.662 --> 00:08:22.760
that's why they jump up in size.

109
00:08:22.760 --> 00:08:25.574
Or should I say they,
the pointers increase over time, but

110
00:08:25.574 --> 00:08:28.616
they're not necessarily correlated
to the size of the string,

111
00:08:28.616 --> 00:08:32.840
because you have headers that go along
with it that identify it as a string.

112
00:08:32.840 --> 00:08:37.016
And actually,
we're gonna jump in a little bit to this,

113
00:08:37.016 --> 00:08:41.632
I know this is like, what's going on,
what does it even mean?

114
00:08:41.632 --> 00:08:45.783
But I think it's important to understand
under the hood, what's happening and

115
00:08:45.783 --> 00:08:47.744
the fact that we get nothing for free.

116
00:08:47.744 --> 00:08:51.669
Like we do in JavaScript, we have to think
about very carefully, all the code we're

117
00:08:51.669 --> 00:08:55.839
writing and how it's actually interacting
with WebAssembly and then memory directly.

118
00:08:57.358 --> 00:09:00.910
So that was a good rant,
not one of my best said give me like a,

119
00:09:00.910 --> 00:09:03.000
three out of 10 on memory.

120
00:09:03.000 --> 00:09:08.660
But let's check out, actually let's, see
if that works, we're still getting 1104.

121
00:09:08.660 --> 00:09:12.441
Okay, so what we need to do is,
we need to tell AssemblyScript,

122
00:09:12.441 --> 00:09:15.180
this is actually a pointer to memory.

123
00:09:15.180 --> 00:09:18.693
Want you to grab that memory and
then compile that into a string, so

124
00:09:18.693 --> 00:09:21.320
that JavaScript knows what to do with it.

125
00:09:21.320 --> 00:09:23.392
Because JavaScript doesn't,

126
00:09:23.392 --> 00:09:28.620
It can't necessarily reach in to a memory
location, say like that's a string.

127
00:09:29.790 --> 00:09:31.580
It can, there's an asterix on that, but

128
00:09:31.580 --> 00:09:34.660
we have to use we'd have to
use the string decoder, API.

129
00:09:34.660 --> 00:09:37.640
It's really cumbersome,
it is not fun to work with at all.

130
00:09:37.640 --> 00:09:39.870
I don't want to do that to you, so
we're not going to go down that path.

131
00:09:39.870 --> 00:09:42.910
We're going to get the WebAssembly
loader to do all the work for us.

132
00:09:46.620 --> 00:09:51.590
Okay, so to use the loader,
I, we have to import it.

133
00:09:51.590 --> 00:09:57.002
So I, this part I'm just gonna copy paste
because it's not worth copying out a URL,

134
00:09:57.002 --> 00:10:01.900
right now this is just one of the CD ends,
it's the AssemblyScript loader.

135
00:10:01.900 --> 00:10:06.358
It's the same thing that we imported into
our node modules earlier but, and we can

136
00:10:06.358 --> 00:10:10.870
serve it out ourselves, but I'm just
going to be lazy and copy and paste this.

137
00:10:10.870 --> 00:10:13.110
So let's go back to our index.HTML.

138
00:10:15.632 --> 00:10:18.328
And I'm gonna load, actually,
I'm gonna load that in first.

139
00:10:22.560 --> 00:10:25.777
Okay, so now we have the loader
on the global scope,

140
00:10:25.777 --> 00:10:28.205
so let's go back into our loader.js.

141
00:10:31.029 --> 00:10:33.786
And in case,
my jumping around in my rants,

142
00:10:33.786 --> 00:10:38.570
we're here in the notes, we're still
on AssemblyScript loader section.

143
00:10:39.580 --> 00:10:43.420
Let's, we're gonna replace all the
WebAssembly codes with the loader codes.

144
00:10:43.420 --> 00:10:47.313
So instead of using the native built in
libraries, we're gonna use the loader,

145
00:10:47.313 --> 00:10:51.209
because the loader includes some useful
utilities that will help us decode these

146
00:10:51.209 --> 00:10:53.950
strings and
help us read the write from memory.

147
00:10:53.950 --> 00:10:58.547
In a, we'll say a more transparent way,
rather than getting to the nuances of

148
00:10:58.547 --> 00:11:01.611
converting to a byte array and
using a text encoder,

149
00:11:01.611 --> 00:11:05.676
API to iterate that byte array
knowing the length, and it's a mess.

150
00:11:05.676 --> 00:11:07.370
[LAUGH] But
the loader makes it much simpler.

151
00:11:09.300 --> 00:11:15.950
So in our loader file, I'm gonna do it
the fast way, because we have VS code.

152
00:11:15.950 --> 00:11:19.532
Gonna take all our WebAssembly
references and I'm just gonna call,

153
00:11:19.532 --> 00:11:22.380
loader because loader is
available on the window now.

154
00:11:26.090 --> 00:11:29.719
And so that was it,
what I did in case I moved too fast,

155
00:11:29.719 --> 00:11:34.486
all of our instantiate streaming calls,
that were WebAssembly dot,

156
00:11:34.486 --> 00:11:40.250
I just converted those to load or dot So
now we're using the AssemblyScript loader.

157
00:11:42.990 --> 00:11:44.626
And because we're using the loader,

158
00:11:44.626 --> 00:11:47.320
we need to include a certain
amount of glue code.

159
00:11:47.320 --> 00:11:51.625
And the glue code represents utility
files, that will help us decode strings,

160
00:11:51.625 --> 00:11:53.690
allocate memory, things like that.

161
00:11:55.100 --> 00:12:00.680
So in our package JSON,
the way we include those extra

162
00:12:00.680 --> 00:12:05.900
utilities is,
we're gonna say export runtime.

163
00:12:08.010 --> 00:12:12.959
So I'm just modifying the scripts right
now in the package JSON under scripts and

164
00:12:12.959 --> 00:12:17.345
for both optimized and untouched,
I'm gonna say export and runtime.

165
00:12:22.361 --> 00:12:28.614
Okay, and, just before we do it,
let's look at a nice, relatively clean,

166
00:12:28.614 --> 00:12:34.503
optimize that what file, and
then let's rebuild and see what happens.

167
00:12:40.338 --> 00:12:43.868
Whoa, that blew up very quickly,
didn't it?

168
00:12:45.774 --> 00:12:49.198
So now, if somebody scripts
including a lot of glue code and

169
00:12:49.198 --> 00:12:52.290
helper, that will help us
fetch things from memory.

170
00:12:53.800 --> 00:12:57.861
Do type conversion or, yeah,
type conversions work with arrays,

171
00:12:57.861 --> 00:13:02.900
work with things that, WebAssembly
itself doesn't really make easy to do.

172
00:13:02.900 --> 00:13:05.630
But using AssemblyScript,
it provides us glue code.

173
00:13:05.630 --> 00:13:09.537
We didn't do it at start, because I wanted
to keep the file as clean as possible,

174
00:13:09.537 --> 00:13:12.360
because now,
it's a bit more difficult to read.

175
00:13:12.360 --> 00:13:16.296
But, yeah, if you're in a situation and
you're trying to find the function,

176
00:13:16.296 --> 00:13:20.580
the WebAssembly function that you wrote,
you can just command F.

177
00:13:20.580 --> 00:13:23.580
And I'm going to say,
where's that fizzbuzz function.

178
00:13:24.800 --> 00:13:28.310
There we go, it's still there,
it's buried under a lot of other code.

179
00:13:30.570 --> 00:13:33.740
And, we will not get into
what this code is doing.

180
00:13:33.740 --> 00:13:37.670
Even I don't know this is pretty
low level by the library operators.

181
00:13:37.670 --> 00:13:42.010
But, I know that your function is still
in there and it's still readable.

182
00:13:42.010 --> 00:13:45.474
But generally I don't include
the runtime unless I absolutely need to,

183
00:13:45.474 --> 00:13:48.560
because it makes things a bit
more complicated to read anyways.

