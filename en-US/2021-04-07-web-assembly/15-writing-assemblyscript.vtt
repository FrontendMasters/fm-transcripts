WEBVTT

1
00:00:00.330 --> 00:00:03.387
Let's write some assembly scripts, and

2
00:00:03.387 --> 00:00:08.830
important to note about these
notes that I'm working off of.

3
00:00:08.830 --> 00:00:14.783
I made a link back to the repo and the
repo should have the completed lesson for

4
00:00:14.783 --> 00:00:18.010
every step that we go through.

5
00:00:18.010 --> 00:00:21.860
That way, it's easy for
me to keep going and keep going.

6
00:00:21.860 --> 00:00:25.860
And I build up like something by the end
it's gonna get a little complex.

7
00:00:25.860 --> 00:00:28.948
And I don't want people to become
intimidated by missing a step.

8
00:00:28.948 --> 00:00:32.341
And then you realize you missed a step
somewhere and like none of it works or

9
00:00:32.341 --> 00:00:35.630
you're getting a weird error or
things like that.

10
00:00:35.630 --> 00:00:39.762
I really wanna follow the blessed path,
the paved road for this, so

11
00:00:39.762 --> 00:00:41.430
I've created a.

12
00:00:41.430 --> 00:00:45.128
A series of exercises that are all
represent different steps of what we're

13
00:00:45.128 --> 00:00:46.150
gonna take.

14
00:00:46.150 --> 00:00:49.495
So if you're ever confused and lost,
you will see this working repo,

15
00:00:49.495 --> 00:00:50.919
you can always go back there.

16
00:00:50.919 --> 00:00:55.348
Clone it and you'll jump right
back to where we are, however,

17
00:00:55.348 --> 00:00:59.920
as I said before,
you learn better when you code yourself.

18
00:00:59.920 --> 00:01:02.755
Don't copy and paste,
if you can, try to copy paste,

19
00:01:02.755 --> 00:01:04.910
try to code things out directly.

20
00:01:04.910 --> 00:01:08.691
Build out those neuromuscular
pathways by typing and

21
00:01:08.691 --> 00:01:12.900
let it run through your arms to
your brain and let it absorb.

22
00:01:13.940 --> 00:01:16.870
All right, so
let's write some assembly script.

23
00:01:18.490 --> 00:01:22.910
Now we're gonna bring back that n minus
one example because it's pretty simple.

24
00:01:22.910 --> 00:01:30.820
So we're gonna just delete this and
we're gonna start off.

25
00:01:30.820 --> 00:01:33.833
Now we're back to familiar syntax,
we're back to JavaScript or

26
00:01:33.833 --> 00:01:35.270
TypeScript in this instance.

27
00:01:35.270 --> 00:01:39.279
So things should be a little
bit easier to grasp, but

28
00:01:39.279 --> 00:01:44.770
let's right actually,
we'll start off with a function.

29
00:01:44.770 --> 00:01:50.079
Nothing new here,
we'll call it n minus one,

30
00:01:50.079 --> 00:01:56.080
actually, sorry, I'm writing JavaScript.

31
00:01:57.680 --> 00:01:59.176
Actually, I'll write this
in JavaScript first and

32
00:01:59.176 --> 00:02:00.810
then we'll convert it to assembly scripts.

33
00:02:00.810 --> 00:02:05.104
So we can see kind of
that the mental model, so

34
00:02:05.104 --> 00:02:09.400
minus one is just gonna return and
minus one.

35
00:02:11.220 --> 00:02:14.771
I know groundbreaking stuff here,
it's a simple example, but

36
00:02:14.771 --> 00:02:17.080
let's write this in assembly scripts.

37
00:02:17.080 --> 00:02:22.334
And in this case, that just means adding
the type references to the variables and

38
00:02:22.334 --> 00:02:25.140
the function that we're using.

39
00:02:25.140 --> 00:02:30.904
So add a type, we're gonna say,
n is always gonna be a 32-bit integer,

40
00:02:30.904 --> 00:02:35.587
and this function is always
gonna return a 32 bit integer.

41
00:02:40.329 --> 00:02:45.327
So if you've never dealt
with Typescript before,

42
00:02:45.327 --> 00:02:48.410
it looks a little strange.

43
00:02:48.410 --> 00:02:51.756
And it almost seems like you're not
writing JavaScript as much because you

44
00:02:51.756 --> 00:02:54.600
have these weird characters
that aren't official.

45
00:02:54.600 --> 00:02:56.600
Li part of the ACMA script standard.

46
00:02:56.600 --> 00:03:03.046
However, because assembly or web assembly
script compiles to web assembly.

47
00:03:03.046 --> 00:03:06.400
And we need to know that specific
type of number we're dealing with.

48
00:03:06.400 --> 00:03:07.784
Remember the outcodes earlier and

49
00:03:07.784 --> 00:03:10.630
how every type of number has
an outcode associated with it?

50
00:03:10.630 --> 00:03:15.436
We have to tell AssemblyScript what
type of out codes we're gonna use, so

51
00:03:15.436 --> 00:03:18.850
it knows how to call them in WebAssembly.

52
00:03:18.850 --> 00:03:20.785
Remember, this isn't JavaScript.

53
00:03:20.785 --> 00:03:24.310
[LAUGH] We get nothing for free, well,
we get very little for free now.

54
00:03:24.310 --> 00:03:28.816
We have to be explicit for
every single step,

55
00:03:28.816 --> 00:03:34.875
implicit computing is it works
things like SQL statements.

56
00:03:34.875 --> 00:03:38.672
That's implicit you're giving
a set of directions, or even HTML,

57
00:03:38.672 --> 00:03:43.260
you're saying a set of directions
that you want the machine to follow.

58
00:03:43.260 --> 00:03:47.459
Versus explicit programming,
you're saying do this.

59
00:03:49.010 --> 00:03:53.552
If you say, here's a pro tip,
go on Twitter right now and be like, hey,

60
00:03:53.552 --> 00:03:56.996
what do you think difference
we employ a declarative.

61
00:03:56.996 --> 00:04:01.737
And imperative programming is and
then you'll watch that erupt into this

62
00:04:01.737 --> 00:04:06.970
giant flame or people to argue about
imperative versus declarative.

63
00:04:06.970 --> 00:04:08.270
Doesn't really matter to me.

64
00:04:08.270 --> 00:04:12.787
All I care about is specificity because we
need the specificity to execute our low

65
00:04:12.787 --> 00:04:15.120
level programming that is WebAssembly.

66
00:04:16.930 --> 00:04:20.749
All right, sorry for that rants, I just,

67
00:04:20.749 --> 00:04:24.830
I had to do it,
next up is tabs versus spaces.

68
00:04:24.830 --> 00:04:27.677
We'll argue about that later,
all right, so

69
00:04:27.677 --> 00:04:30.970
we've now written a bit
of assembly script.

70
00:04:30.970 --> 00:04:35.545
Now what's left to do is compile it, so

71
00:04:35.545 --> 00:04:40.536
I'm gonna run NPM run, ASMR, build, and

72
00:04:40.536 --> 00:04:47.070
you don't have to, but
you know, it's nice to see it.

73
00:04:48.310 --> 00:04:52.910
Let us look at our did I not save,
it's let's make sure

74
00:04:52.910 --> 00:04:58.246
I don't see anything in here
optimize that What is wrong?

75
00:04:58.246 --> 00:05:06.080
Easy mistake, so I wrote this function in
assembly script, but I never exported it.

76
00:05:06.080 --> 00:05:11.361
And because assembly script uses
a form of it uses ahead of time

77
00:05:11.361 --> 00:05:16.350
compilation, similar to C or
Java or anything like that.

78
00:05:16.350 --> 00:05:19.920
And any strongly typed language is
gonna use ahead of time compilation.

79
00:05:19.920 --> 00:05:22.550
So it catches those type
errors before they happen,

80
00:05:22.550 --> 00:05:26.230
assembly script does the same thing,
it compiles ahead of time.

81
00:05:26.230 --> 00:05:29.619
So if there's a function that we write,
but it's never accessed,

82
00:05:29.619 --> 00:05:32.539
it actually tree shakes those out and
it won't actually.

83
00:05:32.539 --> 00:05:35.630
It won't create it, and
won't use it because it's not being

84
00:05:35.630 --> 00:05:38.880
called to why include
unnecessary code into your file.

85
00:05:38.880 --> 00:05:41.477
So we looked at that optimize that lot,
and

86
00:05:41.477 --> 00:05:44.736
the untouched that what
are functions that in there.

87
00:05:44.736 --> 00:05:49.565
Why because I forgot to export it,
so let's export that function, and

88
00:05:49.565 --> 00:05:51.911
then now let's rerun that build.

89
00:05:55.975 --> 00:06:01.830
And now we see the minus one function,
and if we look carefully,

90
00:06:01.830 --> 00:06:06.970
that looks exactly like
the example we wrote earlier.

91
00:06:06.970 --> 00:06:11.730
So now we know the code we wrote in web
assembly, last time was good and valid.

92
00:06:11.730 --> 00:06:15.980
It's been compiled down to
WebAssembly from assembly scripts.

93
00:06:15.980 --> 00:06:17.533
And again, I really love this for

94
00:06:17.533 --> 00:06:20.931
learning if you're trying to figure
out well how to if statements work.

95
00:06:20.931 --> 00:06:26.280
How to for loops, work from
assembly script into web assembly.

96
00:06:26.280 --> 00:06:28.014
Writing the code out and compiling it and

97
00:06:28.014 --> 00:06:31.330
seeing what the compiler is doing
is such a valuable learning tool.

98
00:06:31.330 --> 00:06:34.286
So I'm probably gonna keep referring
back to these watch files,

99
00:06:34.286 --> 00:06:37.900
just because it's really interesting
to know what's going on under the hood.

