WEBVTT

1
00:00:00.140 --> 00:00:02.240
Now, we've written WebAssembly by hand.

2
00:00:02.240 --> 00:00:05.395
And we've seen that for
more complicated used cases,

3
00:00:05.395 --> 00:00:10.860
WebAssembly can get a bit onerous,
a bit cumbersome, a bit difficult to read.

4
00:00:10.860 --> 00:00:14.657
But remember WebAssembly itself is
meant to be a compiled target for

5
00:00:14.657 --> 00:00:16.590
high-level languages.

6
00:00:16.590 --> 00:00:22.035
So that is RustC sharp PHP,
I believe you can write some PHP and

7
00:00:22.035 --> 00:00:24.779
compile down to WebAssembly.

8
00:00:24.779 --> 00:00:29.747
For the JavaScript side, we can write a
high level language that will compile down

9
00:00:29.747 --> 00:00:33.710
to WebAssembly, and
that language is known as AssemblyScript.

10
00:00:35.060 --> 00:00:40.330
AssemblyScript, at a high level,
is a TypeScript to WebAssembly compiler.

11
00:00:40.330 --> 00:00:44.976
As in it uses the syntax and
the typing of TypeScript and

12
00:00:44.976 --> 00:00:49.724
JavaScript to compile well
into WebAssembly modules.

13
00:00:49.724 --> 00:00:54.093
I'm a really big fan of AssemblyScript for
many reasons.

14
00:00:54.093 --> 00:00:56.981
I think the main one is
that its documentation and

15
00:00:56.981 --> 00:01:00.866
its way of presenting itself is
really accessible to everybody.

16
00:01:00.866 --> 00:01:05.236
From beginners to people are just getting
started in JavaScript to more advanced

17
00:01:05.236 --> 00:01:05.758
people.

18
00:01:05.758 --> 00:01:10.294
Who really want to get down to
the low level internals of memory and

19
00:01:10.294 --> 00:01:16.100
byte manipulation, and actually
executing computer instruction code.

20
00:01:16.100 --> 00:01:18.154
There is a level of AssemblyScript for
everybody,

21
00:01:18.154 --> 00:01:20.620
and that's what I really love about it.

22
00:01:20.620 --> 00:01:25.384
More importantly is when we look
at the docs, the documentation for

23
00:01:25.384 --> 00:01:26.813
assembly scripts.

24
00:01:26.813 --> 00:01:30.470
They put a lot of time and effort into it,
so that they make it accessible.

25
00:01:31.600 --> 00:01:33.521
When I was doing research for

26
00:01:33.521 --> 00:01:38.497
this course about what's the best way
to present WebAssembly to people.

27
00:01:38.497 --> 00:01:43.960
A lot of the documentation I came across,
it was just really arcane a little bit.

28
00:01:43.960 --> 00:01:48.203
It was so specific into the details
of memory and bid shifting and things

29
00:01:48.203 --> 00:01:53.650
like that, that I didn't think it made for
a good beginner introductory course.

30
00:01:53.650 --> 00:01:58.422
But when I looked at the AssemblyScript
documentation, it's clean, it's readable,

31
00:01:58.422 --> 00:02:01.298
it doesn't make assumptions
about your knowledge.

32
00:02:01.298 --> 00:02:04.348
And it's really written in a way that
it's designed to be accessible for

33
00:02:04.348 --> 00:02:06.060
anybody reading it.

34
00:02:06.060 --> 00:02:09.653
And I really have nothing but respect for
the AssemblyScript maintainers,

35
00:02:09.653 --> 00:02:11.940
they clearly put a lot of work into it.

36
00:02:11.940 --> 00:02:13.851
And I do believe in
the open source community,

37
00:02:13.851 --> 00:02:17.140
it's important to call out good open
source work and a good healthy community.

38
00:02:17.140 --> 00:02:20.350
And I think AssemblyScript
represents a lot of that.

39
00:02:20.350 --> 00:02:23.390
So if you can,
should donate some money to the project.

40
00:02:23.390 --> 00:02:26.624
I know I will and do there, I am really,

41
00:02:26.624 --> 00:02:30.740
really happy to be teaching
AssemblyScript now.

42
00:02:32.610 --> 00:02:34.878
So we learned a bit about
what AssemblyScript is,

43
00:02:34.878 --> 00:02:37.500
as in it looks like
a variant of TypeScript.

44
00:02:37.500 --> 00:02:40.528
I won't say you can just take
your TypeScript code and

45
00:02:40.528 --> 00:02:44.510
put it directly into WebAssembly or
AssemblyScripts.

46
00:02:44.510 --> 00:02:47.876
There are operations in
AssemblyScript such as storing and

47
00:02:47.876 --> 00:02:53.100
loading data, writing directly to memory
that aren't available in TypeScript.

48
00:02:53.100 --> 00:02:56.080
So it's not quite a one to one but
it's fairly close.

49
00:02:56.080 --> 00:03:00.168
If you have large complex operations
that you're doing in TypeScripts.

50
00:03:00.168 --> 00:03:03.625
And you're not doing too many things
with data structures or complex objects,

51
00:03:03.625 --> 00:03:04.460
things like that.

52
00:03:04.460 --> 00:03:08.754
You could actually put your code
over without too much trouble.

53
00:03:08.754 --> 00:03:12.325
And now let's get started
with AssemblyScript, and

54
00:03:12.325 --> 00:03:14.710
let's get our ID set up.

55
00:03:14.710 --> 00:03:18.406
So I'm just going to switch over,
I have a blank IDE.

56
00:03:18.406 --> 00:03:23.008
And I'm going to make a directory
called IOS, which already did.

57
00:03:23.008 --> 00:03:26.592
I know I made this a bit further down in
the steps, but I'm doing it now just for

58
00:03:26.592 --> 00:03:28.480
simplicity's sake.

59
00:03:28.480 --> 00:03:31.328
So make a directory called iwasm, and

60
00:03:31.328 --> 00:03:35.970
if you don't remember how to
make a directory, we use mkdir.

61
00:03:35.970 --> 00:03:39.191
And iwasm, it's a funny name [LAUGH],
but it just stands for

62
00:03:39.191 --> 00:03:41.440
introduction to WebAssembly.

63
00:03:41.440 --> 00:03:46.640
So if you make that directory already did,
it's a good place to have a repo.

64
00:03:46.640 --> 00:03:51.936
Next, AssemblyScripts requires
us being on the latest

65
00:03:51.936 --> 00:03:57.240
version of node, so
I'm gonna say nvm instal- -LTS.

66
00:04:00.020 --> 00:04:04.384
And npm is the node version manager,
if you don't have it,

67
00:04:04.384 --> 00:04:07.280
I believe should have the easiest way.

68
00:04:07.280 --> 00:04:11.000
I assume most people have it now,
but just in case you don't.

69
00:04:11.000 --> 00:04:13.500
What is the easiest way of installing it?

70
00:04:13.500 --> 00:04:17.590
We might use brew, actually,
yeah, it's a curl command.

71
00:04:17.590 --> 00:04:21.550
So if you copy this curl command,
it'll add it to your bash.

72
00:04:21.550 --> 00:04:25.898
Setups you can just use nvm globally,
and essentially nvm is a quick way of

73
00:04:25.898 --> 00:04:30.335
versioning the node because depending
on the environment you're using.

74
00:04:30.335 --> 00:04:32.844
You might need the latest version of node,

75
00:04:32.844 --> 00:04:36.370
you might need an older version of node,
etc.

76
00:04:36.370 --> 00:04:40.721
Right now we're using the LTS
version node, so that is,

77
00:04:40.721 --> 00:04:45.030
LTS is the long term stable or
long term support.

78
00:04:45.030 --> 00:04:48.352
That's a version of node that we
know is going to be supported for

79
00:04:48.352 --> 00:04:50.130
at least two years or so.

80
00:04:50.130 --> 00:04:54.590
So if you want to build your projects
in that, that's the way to go.

81
00:04:54.590 --> 00:04:58.555
In general, if you're developing things or
you're just doing it for fun.

82
00:04:58.555 --> 00:05:01.489
You can use the latest
cutting edge version of node,

83
00:05:01.489 --> 00:05:03.165
I forget which node version.

84
00:05:03.165 --> 00:05:04.147
We're up to is it 16?

85
00:05:04.147 --> 00:05:07.795
Might be more by now, but we want
to see what the LTS version because

86
00:05:07.795 --> 00:05:12.040
it's going to be the most stable,
it's going to be most consistent.

87
00:05:12.040 --> 00:05:15.055
So let's check to see the version of node
that we're using to make sure we're on

88
00:05:15.055 --> 00:05:15.650
the right one.

89
00:05:17.800 --> 00:05:20.450
No version, okay,
we're on 14-5, that's perfect.

90
00:05:20.450 --> 00:05:22.830
Anything about 14, we're okay.

91
00:05:22.830 --> 00:05:27.361
Next, we're gonna install npm, so

92
00:05:27.361 --> 00:05:33.217
npm- i- g for
installing globally or saw NPX.

93
00:05:42.581 --> 00:05:47.695
Whoops, something happened symlink nerd.

94
00:05:49.586 --> 00:05:51.956
So I already had MDX installed, so

95
00:05:51.956 --> 00:05:57.366
it's just telling me that there's an error
not a problem, we should be okay.

96
00:05:57.366 --> 00:05:59.881
And give me a second to
clear this terminal.

97
00:06:03.330 --> 00:06:07.738
All right, so next up,
let's initiate our repo,

98
00:06:07.738 --> 00:06:11.780
just it'll give us a package.JSON, etc.

99
00:06:11.780 --> 00:06:17.440
So I'm gonna say npm and knit,
and call it I was it's fine.

100
00:06:17.440 --> 00:06:19.400
Yes, yes, yes, cool.

101
00:06:19.400 --> 00:06:22.400
And that's just gonna make
a package JSON for us,

102
00:06:22.400 --> 00:06:25.170
it's gonna scaffold out a bit of things.

103
00:06:25.170 --> 00:06:27.609
Not entirely necessary yet, but
it just makes things easier,

104
00:06:27.609 --> 00:06:29.650
it's how I like to start up projects.

105
00:06:29.650 --> 00:06:33.170
So next, let's install the software nerd.

106
00:06:33.170 --> 00:06:36.858
So we need AssemblyScript, and
we need the AssemblyScript loader.

107
00:06:36.858 --> 00:06:40.563
So npmi- -save, and

108
00:06:40.563 --> 00:06:47.194
using AssemblyScripts and the loader.

109
00:06:51.261 --> 00:06:53.653
A second, cool.

110
00:06:53.653 --> 00:06:57.540
And then next, we're gonna save
the actual Assemblyscripts.

111
00:06:57.540 --> 00:06:59.353
We're gonna save this as dev,

112
00:06:59.353 --> 00:07:03.130
because we don't need
the AssemblyScript code in production.

113
00:07:03.130 --> 00:07:06.653
We only needed to compile our
AssemblyScript into rasm, and

114
00:07:06.653 --> 00:07:10.462
we're just gonna use the JSON
production along with the loader.

115
00:07:10.462 --> 00:07:15.855
So I'm gonna say npmi def def save Dev,

116
00:07:15.855 --> 00:07:21.584
and think I can just do AssemblyScripts.

117
00:07:21.584 --> 00:07:23.867
I'll have to do the ads, alright.

118
00:07:26.238 --> 00:07:29.017
So we should be in the iOS directory,

119
00:07:29.017 --> 00:07:33.962
we have all of our packages installed,
we can check here, cool.

120
00:07:33.962 --> 00:07:39.560
What's awesome is that AssemblyScript
will scaffold your project up for you.

121
00:07:39.560 --> 00:07:44.470
It'll build out everything you want
to copy, and it'll build tests.

122
00:07:44.470 --> 00:07:49.690
It'll build the directory,
the assemblies directory,

123
00:07:49.690 --> 00:07:56.730
so we can run that with NPX as a net We're
gonna say.to install it in this repo.

124
00:07:56.730 --> 00:08:02.387
And I was gonna say yes, and
it's all done, that's pretty nice.

125
00:08:02.387 --> 00:08:06.938
So what that did was it
created these shortcuts in

126
00:08:06.938 --> 00:08:10.670
the scripts in that package JSON.

127
00:08:10.670 --> 00:08:15.410
It lets us build a Debug version of our
code, and optimized version of the code.

128
00:08:15.410 --> 00:08:19.358
Which we'll talk about in a little bit,
but it's more of a compressed version,

129
00:08:19.358 --> 00:08:22.670
more efficient version
of the WebAssembly code.

130
00:08:22.670 --> 00:08:25.833
And it also scaffold out
all these folders, and

131
00:08:25.833 --> 00:08:29.530
let's talk about what these folders are.

132
00:08:29.530 --> 00:08:32.830
The assembly directory is where
our assembly is going to go,

133
00:08:32.830 --> 00:08:36.270
there's an add function already
built in there as a scaffold.

134
00:08:37.880 --> 00:08:42.005
Pretty, this should look very similar to
that minus one function we built already,

135
00:08:42.005 --> 00:08:44.750
which we're gonna build it
again in AssemblyScripts.

136
00:08:45.830 --> 00:08:48.010
You can ignore TS config,
that's the TypeScript config.

137
00:08:49.140 --> 00:08:53.717
The build directory is where
all of the built Wasm and

138
00:08:53.717 --> 00:08:57.474
WAT files are, what files are going to go.

139
00:08:57.474 --> 00:09:04.301
And actually let's go ahead and run that
now, so I'm going to say npm run as build.

140
00:09:08.087 --> 00:09:13.320
And if things are running correctly,
you should see an output.

141
00:09:13.320 --> 00:09:17.103
And then in our build folder now,
we now have the optimize WAT folder,

142
00:09:17.103 --> 00:09:19.750
it's gonna look a little confusing.

143
00:09:19.750 --> 00:09:23.847
And add some glue code in there,
then we have the untouched file,

144
00:09:23.847 --> 00:09:28.410
which is not as optimized and it pulls
in things from the library itself.

145
00:09:30.770 --> 00:09:37.408
We're not actually directly gonna
write any more WebAssembly,

146
00:09:37.408 --> 00:09:43.573
generally speaking, but
it's nice to look at the WAT file.

147
00:09:43.573 --> 00:09:46.573
And it's really useful to
make a really simple example,

148
00:09:46.573 --> 00:09:50.336
if you're confused about how well
somebody is working under the hood.

149
00:09:50.336 --> 00:09:54.057
And then run it through the compiler,
and it spits it out and lets you.

150
00:09:54.057 --> 00:09:56.564
And it pretty much gives
you the instructions for

151
00:09:56.564 --> 00:09:58.670
how it's going to operate.

152
00:09:58.670 --> 00:10:01.930
And I personally find that more useful
than trying to read documentation.

153
00:10:01.930 --> 00:10:05.490
Like seeing what the compiler
is actually doing, I learned so

154
00:10:05.490 --> 00:10:07.070
much more from doing this.

155
00:10:08.970 --> 00:10:12.702
And we have a test,
I think we are gonna run npm run test,

156
00:10:12.702 --> 00:10:14.540
hopefully that will work.

157
00:10:16.210 --> 00:10:18.190
And it's okay, cool.

158
00:10:18.190 --> 00:10:22.590
When I was creating this course,
the error I'd run into most often.

159
00:10:22.590 --> 00:10:27.750
Was it'll complain about if you tried to
do a build, it'll complain about the.

160
00:10:27.750 --> 00:10:30.664
It can't use ES modules,
which are a newer module syntax,

161
00:10:30.664 --> 00:10:33.640
that's why we have to use
the latest version of node.

162
00:10:33.640 --> 00:10:35.627
So if you're running to that error,

163
00:10:35.627 --> 00:10:40.650
double check that the terminal you're
using is using the latest version of node.

164
00:10:40.650 --> 00:10:42.378
I guarantee that's probably the problem,

165
00:10:42.378 --> 00:10:45.980
I've done it several times because I
switch terminals all the time and every.

166
00:10:45.980 --> 00:10:49.120
Bash instance has its own version
of node because we're using npm.

167
00:10:49.120 --> 00:10:51.400
There's a question in chat, Todd.

168
00:10:53.000 --> 00:10:59.106
&gt;&gt; For the syntax highlighting,
should we get that WebAssembly extension?

169
00:10:59.106 --> 00:11:00.680
&gt;&gt; Yeah, thank you.

170
00:11:00.680 --> 00:11:03.520
I'm glad you mentioned that,
I do believe I have that installed.

171
00:11:05.140 --> 00:11:08.240
Let me search my, da da da.

172
00:11:09.750 --> 00:11:13.310
What is the way Sandy Brian Holden
is VS code expertise,

173
00:11:13.310 --> 00:11:15.520
I think at installed will tell me.

174
00:11:15.520 --> 00:11:19.112
And then if I say WebAssembly, yeah.

175
00:11:19.112 --> 00:11:22.200
&gt;&gt; Okay, thank you.

176
00:11:22.200 --> 00:11:25.215
&gt;&gt; So unfortunately I do this
myself [LAUGH] all the time,

177
00:11:25.215 --> 00:11:29.250
I've installed I think three
different [LAUGH] WebAssembly.

178
00:11:29.250 --> 00:11:32.972
So I'm not sure which one is
actually being used right now,

179
00:11:32.972 --> 00:11:34.620
I am an average engineer.

180
00:11:34.620 --> 00:11:37.720
I make mistakes,
I don't know the details of everything.

181
00:11:37.720 --> 00:11:40.918
I think the WebAssembly Toolkit
is the official one from

182
00:11:40.918 --> 00:11:46.360
the WebAssembly Foundation, so I would I
generally go with the blast version of it.

183
00:11:46.360 --> 00:11:51.518
And I think it's the WebAssembly syntax
highlighting is the one I'm using,

184
00:11:51.518 --> 00:11:54.380
but whatever works, is what I say.

185
00:11:54.380 --> 00:11:56.680
I'm actually not even sure
the WebAssembly toolkit is necessary.

186
00:11:56.680 --> 00:12:01.871
It's a way of compiling folders or
way of compiling

187
00:12:01.871 --> 00:12:06.592
WAT files which I think
I must have a disabled.

188
00:12:06.592 --> 00:12:09.306
But there is a WebAssembly extension that,

189
00:12:09.306 --> 00:12:13.720
you can write dot WAT files,
right click and it will convert into Wasm.

190
00:12:15.450 --> 00:12:18.406
That's probably not really what
you want to do, generally, but

191
00:12:18.406 --> 00:12:21.770
I would use WebAssembly studio for
something like that.

192
00:12:21.770 --> 00:12:24.433
But if you had to,
it's good to know these tools exists, and

193
00:12:24.433 --> 00:12:25.857
thank you for calling them out.

194
00:12:25.857 --> 00:12:29.278
And if you have any questions about my
setup environment, please let me know.

195
00:12:29.278 --> 00:12:32.132
I try to write down every
single step that I've done, so

196
00:12:32.132 --> 00:12:34.218
we're always aligned on the same page.

197
00:12:34.218 --> 00:12:37.650
But I may have missed something here and
there, but great question.

198
00:12:39.200 --> 00:12:43.547
Okay, So we are here,

199
00:12:43.547 --> 00:12:49.544
in case in the future these changes,
some of these steps change.

200
00:12:49.544 --> 00:12:53.380
We were just following the Quick Start
guide from AssemblyScripts.

201
00:12:53.380 --> 00:12:55.110
So if you follow this, we should.

202
00:12:55.110 --> 00:12:57.997
And even if things change in the future,
we'll generally end up in the same place

203
00:12:57.997 --> 00:13:00.490
with the same folder structure,
things like that.

204
00:13:00.490 --> 00:13:03.299
But just in case,
because open source changes a lot.

205
00:13:03.299 --> 00:13:06.435
Just fall back to these instructions
if they're not working.

