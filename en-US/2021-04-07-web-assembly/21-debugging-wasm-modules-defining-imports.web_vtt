WEBVTT

1
00:00:00.030 --> 00:00:04.834
Let's talk about debugging, because I
do believe the fundamental part of any

2
00:00:04.834 --> 00:00:09.770
good programmer, is knowing how to fix or
knowing how to debug a program.

3
00:00:09.770 --> 00:00:13.413
That's honestly, what one of the gauges
I have measured when I talk about what

4
00:00:13.413 --> 00:00:16.117
is a senior engineer and
like what makes senior engineer,

5
00:00:16.117 --> 00:00:17.900
it's not someone who can write code.

6
00:00:18.900 --> 00:00:22.170
Anybody can write code, it doesn't mean
it's good, anybody can write code.

7
00:00:22.170 --> 00:00:25.290
I think people are really good engineers,
know how to debug code.

8
00:00:25.290 --> 00:00:28.438
And that, again,
is something that is an underrated skill,

9
00:00:28.438 --> 00:00:31.344
that we probably don't talk
about enough as engineers,

10
00:00:31.344 --> 00:00:34.970
like we spend most of our time
reading code and not writing code.

11
00:00:34.970 --> 00:00:36.870
So the ability to debug it is critical.

12
00:00:38.850 --> 00:00:44.218
So jumping back, I'll just refresh
the page, we should be at an error,

13
00:00:44.218 --> 00:00:49.050
I'm using Chrome right now,
where I pause on exceptions.

14
00:00:49.050 --> 00:00:53.750
So it's paused right here, which is pretty
nice, and I'm gonna let it play out.

15
00:00:53.750 --> 00:00:56.910
And I say nice in that debugging
is actually a fairly recent

16
00:00:56.910 --> 00:00:58.920
feature in web assembly.

17
00:00:58.920 --> 00:01:01.300
You couldn't do it,
you could do it before, but

18
00:01:01.300 --> 00:01:04.420
you have to use console logs and
things like that.

19
00:01:04.420 --> 00:01:07.831
Fortunately, assembly scripts
serve source maps, and

20
00:01:07.831 --> 00:01:11.250
we can use those source map to
figure out what went wrong.

21
00:01:12.750 --> 00:01:15.825
So for looking at the console,
it's big enough for everybody.

22
00:01:15.825 --> 00:01:20.597
So we're looking at the console,
and it's saying the call stack

23
00:01:20.597 --> 00:01:25.750
is the issue happened,
at minus one in our build function.

24
00:01:25.750 --> 00:01:28.193
But because we're using source maps,

25
00:01:28.193 --> 00:01:32.350
we can map directly to the typeScript
source that we're running.

26
00:01:33.640 --> 00:01:37.406
Now this is really cool, because before,

27
00:01:37.406 --> 00:01:41.970
it would just be maybe a what file or
just plain.

28
00:01:41.970 --> 00:01:45.612
Actually, yeah, it was just a what file or
it was some gibberish or

29
00:01:45.612 --> 00:01:49.140
garbage that you're like what,
what just happened?

30
00:01:49.140 --> 00:01:50.518
But now because we have source maps,

31
00:01:50.518 --> 00:01:53.370
we can actually dive back into our
assembly script and see what's running.

32
00:01:55.180 --> 00:01:58.892
I wanna remind people,
we're not actually running index.ts,

33
00:01:58.892 --> 00:02:01.280
this is just a map back to it.

34
00:02:01.280 --> 00:02:07.090
And if you run into issues, or
this isn't working, let's go into Chrome.

35
00:02:10.080 --> 00:02:14.059
We're gonna go to experiments,
we're gonna scroll down and

36
00:02:14.059 --> 00:02:18.920
then we're gonna make sure web
assembly debugging is enabled.

37
00:02:18.920 --> 00:02:21.920
I'll say this,
this has been really hit and miss.

38
00:02:21.920 --> 00:02:26.362
I've had some really useful
source map debugging stories,

39
00:02:26.362 --> 00:02:29.220
when I was writing this course.

40
00:02:29.220 --> 00:02:30.900
But sometimes it just
doesn't seem to work.

41
00:02:30.900 --> 00:02:35.930
I think, this falls under experimental so
it may or may not work.

42
00:02:35.930 --> 00:02:39.393
But generally the source map story
works and web assembly by default, or

43
00:02:39.393 --> 00:02:42.480
assembly script by default ships,
the source maps websites.

44
00:02:42.480 --> 00:02:43.607
So when we throw an error,

45
00:02:43.607 --> 00:02:46.030
we can trace back to exactly
where that error is called.

46
00:02:47.400 --> 00:02:51.160
Again, this seems simple,
we reload dev tools.

47
00:02:51.160 --> 00:02:56.368
That seems simple, but I the key to being
good at something is the ability to break

48
00:02:56.368 --> 00:03:01.434
it and then see what you broke and
then fix it later, that's just philosophy.

49
00:03:03.811 --> 00:03:08.463
Okay, so we managed to, so
far we've exported functions,

50
00:03:08.463 --> 00:03:14.132
into JavaScript and now we've imported
functions into web assembling.

51
00:03:14.132 --> 00:03:18.995
And we did it in the standard way we use
the port which is built into assembly

52
00:03:18.995 --> 00:03:20.730
script as a known object.

53
00:03:20.730 --> 00:03:22.499
We don't have to define that at all.

54
00:03:22.499 --> 00:03:30.322
And let's check out, actually they have
a list of the imports that are available.

55
00:03:30.322 --> 00:03:36.528
So, if we were to say if we use memory or
table or abort, which we just use.

56
00:03:36.528 --> 00:03:40.348
We don't have to define those in our
TypeScript or our assembly script code,

57
00:03:40.348 --> 00:03:43.840
because there are known functions,
to assembly script.

58
00:03:43.840 --> 00:03:47.512
But what happens if we want to
define our own custom JavaScript,

59
00:03:47.512 --> 00:03:50.330
that assembly doesn't know about?

60
00:03:50.330 --> 00:03:53.380
How does that work,
how would we import that?

61
00:03:53.380 --> 00:03:55.360
Well, let's go and try that out.

62
00:03:56.700 --> 00:04:02.260
What I really want to do now is, I want
to be able to console log in any way.

63
00:04:02.260 --> 00:04:05.050
I just want to console log,
because that's always a useful feature.

64
00:04:05.050 --> 00:04:08.520
Like I said, debugging is what
is the more interesting story.

65
00:04:08.520 --> 00:04:13.464
I do believe the ability of a program in a
programming language is it's hinged on its

66
00:04:13.464 --> 00:04:15.870
ability to debug it properly.

67
00:04:15.870 --> 00:04:19.693
So, right now I want to create a log
function that just logs the number, or

68
00:04:19.693 --> 00:04:22.990
logs the input that I
put into that function.

69
00:04:22.990 --> 00:04:27.070
So let's jump back to the code,
in our index.ts.

70
00:04:27.070 --> 00:04:32.025
Let's take out the abort,
because that is not necessarily

71
00:04:32.025 --> 00:04:36.410
more of just an example,
and I wanted to say.

72
00:04:36.410 --> 00:04:42.250
I Want to have a log function that is just
going to log the inputs that we have.

73
00:04:42.250 --> 00:04:46.638
And right now the linter is finding where
the type scripts literally is finding

74
00:04:46.638 --> 00:04:49.420
an issue because log is not defined.

75
00:04:49.420 --> 00:04:53.658
So what we have to do, because we're
working with types, we need to declare,

76
00:04:53.658 --> 00:04:55.990
the function and the function signature.

77
00:04:57.470 --> 00:04:59.510
So I'm going to declare function log.

78
00:05:01.200 --> 00:05:05.170
It's gonna take one parameter and
or wherever you wanna call it.

79
00:05:05.170 --> 00:05:06.530
And that's going to be a 32 bit integer.

80
00:05:07.730 --> 00:05:13.220
And it's gonna be void,
it's not gonna return anything, all right?

81
00:05:14.520 --> 00:05:19.084
So now having that let us recompile,
so NPM run-s build.

82
00:05:22.137 --> 00:05:24.362
Looking good so far, and again,

83
00:05:24.362 --> 00:05:29.460
a useful way of seeing just what exactly
is going on is to check the what file.

84
00:05:30.590 --> 00:05:34.200
We see now that we have
an import declared under index.

85
00:05:34.200 --> 00:05:37.322
It's under index because the default
namespace is the namespace of

86
00:05:37.322 --> 00:05:38.150
the file itself.

87
00:05:38.150 --> 00:05:41.000
So index.ts, and
the function is called log.

88
00:05:42.220 --> 00:05:46.370
And down here if we're calling our
imported functions, that's just a call.

89
00:05:46.370 --> 00:05:49.730
The opcode is call within web assembly.

90
00:05:49.730 --> 00:05:52.790
But if we ran it now it
still wouldn't work.

91
00:05:52.790 --> 00:05:54.460
Actually, let's just write it out and
see what happens.

92
00:05:56.490 --> 00:06:01.720
That's my philosophy of life,
module index.

93
00:06:01.720 --> 00:06:05.640
The module is not an object or function,
you're probably gonna run into this error

94
00:06:05.640 --> 00:06:07.890
at some point in your
assembly script journey.

95
00:06:07.890 --> 00:06:11.650
And this is because we never
defined it in our import objects.

96
00:06:11.650 --> 00:06:12.977
So let's jump back to the loader.

97
00:06:17.353 --> 00:06:21.155
And I'm gonna say,
it's under the namespace index.

98
00:06:21.155 --> 00:06:25.543
And under index is a function called log,
which we've defined already,

99
00:06:25.543 --> 00:06:30.253
it's gonna take n, And

100
00:06:30.253 --> 00:06:34.370
we're just gonna console log and
you can make fancier if you want.

101
00:06:35.980 --> 00:06:38.964
So now,
if we've done everything correctly,

102
00:06:38.964 --> 00:06:42.550
we should see a console log and
not an error.

103
00:06:42.550 --> 00:06:44.980
Refresh the page and there we go.

104
00:06:44.980 --> 00:06:50.710
In logged out 44,
everybody follow what happened there.

105
00:06:50.710 --> 00:06:53.862
So I, first thing I did was
I created a log function or

106
00:06:53.862 --> 00:06:55.582
any function I want to call,

107
00:06:55.582 --> 00:07:00.850
I declared a type its type so that the
assembly script compiler knows what to do.

108
00:07:00.850 --> 00:07:03.240
What the parameters are what
the return type is.

109
00:07:04.870 --> 00:07:08.494
And because I, sometimes we can get
unclear about what's happening, I always

110
00:07:08.494 --> 00:07:12.480
check the optimize or I check the what
file to see what exactly is happening.

111
00:07:12.480 --> 00:07:15.680
I see that the index, the namespace
is index and the function is log.

112
00:07:15.680 --> 00:07:21.030
And then in my loader,
I just define that under index and log.

113
00:07:21.030 --> 00:07:25.182
And the reason why we built this in end,
because it's like I said,

114
00:07:25.182 --> 00:07:28.890
as I said before it's part of
the assembly script loader and

115
00:07:28.890 --> 00:07:33.750
we're going to use that next, and
that's just under end of word aboard.

116
00:07:33.750 --> 00:07:37.552
And so that's why in the import
object its name states under n.

117
00:07:40.784 --> 00:07:47.885
So not too bad, now we have the ability
to pretty much also do anything we want.

118
00:07:47.885 --> 00:07:50.056
[LAUGH] I've gotten into trouble
in the past where like we can do

119
00:07:50.056 --> 00:07:51.200
whatever we want.

120
00:07:51.200 --> 00:07:52.304
We can't really, but

121
00:07:52.304 --> 00:07:56.500
we can now define functions in JavaScript
that can be called in web assembly.

122
00:07:56.500 --> 00:07:59.099
And then now we can define a function
in the web assembly that can be called

123
00:07:59.099 --> 00:07:59.620
JavaScript.

124
00:07:59.620 --> 00:08:03.600
So we understand how these,
two bridges work.

125
00:08:03.600 --> 00:08:06.270
Which is pretty pretty
dang cool if you ask me.

