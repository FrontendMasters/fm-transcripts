WEBVTT

1
00:00:00.000 --> 00:00:03.985
I hope everybody wrote the minus
one function, because,

2
00:00:03.985 --> 00:00:08.782
[LAUGH] honestly you see how tedious
it is to write web assembly by hand,

3
00:00:08.782 --> 00:00:11.970
and working with stacks and
things like that.

4
00:00:11.970 --> 00:00:12.679
Is it fast?

5
00:00:12.679 --> 00:00:15.676
Yes.
Is it efficient by computer standards?

6
00:00:15.676 --> 00:00:16.210
Yes.

7
00:00:16.210 --> 00:00:17.694
Is it efficient by engineering standards?

8
00:00:17.694 --> 00:00:18.665
No.

9
00:00:18.665 --> 00:00:20.590
It's very difficult to reason about.

10
00:00:20.590 --> 00:00:26.880
And in fact If we took a more complex
example, it's called the function example.

11
00:00:26.880 --> 00:00:31.546
You don't have to write this, this is
purely information absorption right now.

12
00:00:31.546 --> 00:00:33.361
If we did something
a bit more complicated,

13
00:00:33.361 --> 00:00:35.578
where we wanna create this
function in web assembly.

14
00:00:35.578 --> 00:00:39.164
So if I wanna create a function
that takes in a number,

15
00:00:39.164 --> 00:00:41.408
check this if it's equal to two.

16
00:00:41.408 --> 00:00:42.466
And if it's equal to two,

17
00:00:42.466 --> 00:00:45.025
I wanna return that number
multiplied by two is equal to three.

18
00:00:45.025 --> 00:00:47.147
I wanna turn that number
multiplied by three.

19
00:00:47.147 --> 00:00:50.360
Otherwise, I wanna turn that
number multiplied by itself,

20
00:00:50.360 --> 00:00:53.447
it's an arbitrary example
doesn't really do that much.

21
00:00:53.447 --> 00:00:56.877
But in JavaScript it's pretty
easy to reason about, right?

22
00:00:56.877 --> 00:00:59.995
You can look at this, I wouldn't
even have to tell you what it does,

23
00:00:59.995 --> 00:01:02.643
you can imply exactly what's
happening under the code.

24
00:01:04.012 --> 00:01:08.633
But in web assembly, something that
is relatively simple at a high level

25
00:01:08.633 --> 00:01:11.890
language becomes much more complex.

26
00:01:11.890 --> 00:01:16.106
For example, okay, good local, we're
pushing the local variable the stack,

27
00:01:16.106 --> 00:01:17.853
makes sense we understand that.

28
00:01:17.853 --> 00:01:21.370
We're declaring a constant to,
makes sense as well.

29
00:01:21.370 --> 00:01:25.291
We can see that because we're
compared to the number two,

30
00:01:25.291 --> 00:01:28.150
we declared number two here.

31
00:01:28.150 --> 00:01:31.301
We know that equals the operation
takes two numbers off the stack and

32
00:01:31.301 --> 00:01:32.588
checks if they're equal.

33
00:01:32.588 --> 00:01:35.137
Cool.

34
00:01:35.137 --> 00:01:37.510
Then what?

35
00:01:37.510 --> 00:01:43.136
So the if statement checks the validity
of what's on the stack before,

36
00:01:43.136 --> 00:01:45.685
because equal is gonna return.

37
00:01:45.685 --> 00:01:49.560
I wanna say it returns a 1 or
0 based on if it's true or false.

38
00:01:49.560 --> 00:01:53.983
But you have to know that the if
opcode checks the most recent thing on

39
00:01:53.983 --> 00:01:55.931
the stack and executes that.

40
00:01:55.931 --> 00:02:00.469
If it's true, it jumps into here, where
we declare two again, we multiply and

41
00:02:00.469 --> 00:02:01.640
returns this year.

42
00:02:01.640 --> 00:02:04.670
I don't have to have the return,
but it's implied.

43
00:02:04.670 --> 00:02:06.610
And then we keep doing that and
so on and so forth.

44
00:02:06.610 --> 00:02:11.848
But, you really have to memorize opcodes
and understand what they're pulling from,

45
00:02:11.848 --> 00:02:16.720
what's on the stack of the current moment,
all of this is not intuitive at all.

46
00:02:16.720 --> 00:02:18.697
You can't, I mean, some people can.

47
00:02:18.697 --> 00:02:22.717
But I personally can't look at this and
say, I know exactly what's happening.

48
00:02:22.717 --> 00:02:26.978
Because the flow control just doesn't
make sense in a way that I would

49
00:02:26.978 --> 00:02:29.530
wanna write this manually.

50
00:02:29.530 --> 00:02:33.020
And we can see that writing
web assembly by hand.

51
00:02:33.020 --> 00:02:35.700
Well, it's just not that practical.

52
00:02:36.860 --> 00:02:40.067
Fortunately, because web assembly
is not meant to be written by hand,

53
00:02:40.067 --> 00:02:43.620
we only generally are looking at
what files when we're debugging.

54
00:02:43.620 --> 00:02:48.348
We wanna write higher level languages that
through a series of tool chains compiled

55
00:02:48.348 --> 00:02:49.642
down to web assembly.

56
00:02:49.642 --> 00:02:52.850
And that's what we're gonna do for
the remainder of the course.

57
00:02:52.850 --> 00:02:57.284
So, if you wanna write more web assembly,
feel free.

58
00:02:57.284 --> 00:03:00.200
If you wanna get really,
really into it, go ahead.

59
00:03:00.200 --> 00:03:04.231
You now know how to do it, you understand
how opcodes work, you understand what

60
00:03:04.231 --> 00:03:08.690
modules and parameters and the stack
machine looks like and how it works.

61
00:03:08.690 --> 00:03:09.548
But, generally,

62
00:03:09.548 --> 00:03:13.300
we're gonna write in a higher level
language that will compile down.

63
00:03:13.300 --> 00:03:16.690
It's still good to know how to read
web assembly just in case you need to

64
00:03:16.690 --> 00:03:17.620
debug it.

65
00:03:17.620 --> 00:03:20.614
But hopefully,
if we've done things correctly,

66
00:03:20.614 --> 00:03:22.780
[LAUGH] you'll never have to do that.

67
00:03:22.780 --> 00:03:26.068
Because, well, as you can see,
this is a really simple function and

68
00:03:26.068 --> 00:03:27.550
it gets really long.

69
00:03:27.550 --> 00:03:29.670
It only gets worse, trust me.

