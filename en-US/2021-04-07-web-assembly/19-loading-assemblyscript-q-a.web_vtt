WEBVTT

1
00:00:00.340 --> 00:00:02.490
Have you said you know what?

2
00:00:02.490 --> 00:00:03.390
Nice job.

3
00:00:03.390 --> 00:00:05.970
Now you've so
far today you've written Web assembly.

4
00:00:05.970 --> 00:00:08.680
You've written assembly script,
which compiles to web assembly.

5
00:00:08.680 --> 00:00:12.540
And now we're calling that web
assembly in our JavaScript.

6
00:00:12.540 --> 00:00:16.660
I know there's a lot of interweaving
steps in between there to do the work.

7
00:00:16.660 --> 00:00:18.995
And that's why we created the loader
file to do all that work for us and

8
00:00:18.995 --> 00:00:20.130
now we're not worried about it.

9
00:00:20.130 --> 00:00:23.206
Now we just fetch web assembly and
pull out those functions and

10
00:00:23.206 --> 00:00:26.880
exports as they come,
are there any questions so far?

11
00:00:26.880 --> 00:00:30.110
This is fairly familiar.

12
00:00:30.110 --> 00:00:32.970
I really want to get the browser
part because I think loading a node

13
00:00:32.970 --> 00:00:34.390
is fairly straightforward.

14
00:00:34.390 --> 00:00:37.925
Loading the browser does take a bit more
work, but that's where as front engineers,

15
00:00:37.925 --> 00:00:41.030
we're mostly going to do most
of our web assembly work.

16
00:00:41.030 --> 00:00:45.490
&gt;&gt; Is assembly script,
strict superset of TypeScript?

17
00:00:45.490 --> 00:00:46.060
&gt;&gt; Yes.

18
00:00:47.250 --> 00:00:51.370
It is a I mean, it uses TypeScript
to become strictly typed.

19
00:00:51.370 --> 00:00:53.640
However, they're not one to one.

20
00:00:53.640 --> 00:00:58.560
There are many methods in assembly
scripts that don't exist in TypeScript.

21
00:00:58.560 --> 00:01:03.506
So you can't quite say they're the same It
just uses TypeScript under the hood for

22
00:01:03.506 --> 00:01:08.095
the type checking actually, I'm glad
you brought that up because let's,

23
00:01:08.095 --> 00:01:10.400
let's look at the docs as I like to do.

24
00:01:12.550 --> 00:01:16.860
And if we go to assembly scripts in
the docs, make sure it's big enough.

25
00:01:18.530 --> 00:01:22.430
And we got to basics because
they have a part on quirks.

26
00:01:22.430 --> 00:01:26.086
Which is it kind of explains some of
the differences between TypeScript and

27
00:01:26.086 --> 00:01:27.950
assembly scripts where they differ.

28
00:01:29.450 --> 00:01:32.027
I'm not going to spend too much time on
these because we're not really going to

29
00:01:32.027 --> 00:01:32.790
get into them today.

30
00:01:32.790 --> 00:01:36.070
But it's good to know like things
like triple equals are not the same.

31
00:01:36.070 --> 00:01:39.477
in JavaScript those checking
those checking for,

32
00:01:39.477 --> 00:01:42.020
object to quality or type of quality.

33
00:01:43.090 --> 00:01:48.122
Yeah, for whereas in assembly script,
it has to be the exact same objects versus

34
00:01:48.122 --> 00:01:53.240
in JavaScript, you can have string this
as Hello, you have no string says Hello.

35
00:01:53.240 --> 00:01:54.240
Are they equivalent?

36
00:01:54.240 --> 00:01:54.750
Yes.

37
00:01:55.860 --> 00:01:56.733
In assembly script,

38
00:01:56.733 --> 00:01:59.900
those would not be equivalent because
they're two different objects.

39
00:01:59.900 --> 00:02:01.200
There.

40
00:02:01.200 --> 00:02:06.363
Entirely different, I'll skip knowability
checks, they're not as important,

41
00:02:06.363 --> 00:02:09.926
I've mentioned this before,
but the tree shaking part,

42
00:02:09.926 --> 00:02:14.888
so if you create a function in assembly
scripts, and you don't actually use it.

43
00:02:14.888 --> 00:02:19.204
It will not get compiled, because it
does what's called tree shaking with

44
00:02:19.204 --> 00:02:23.382
essentially cutting out dead part of
the code that aren't being used for

45
00:02:23.382 --> 00:02:25.220
efficiency sake.

46
00:02:25.220 --> 00:02:28.937
So if you see that issue like I did
earlier, it's probably because you

47
00:02:28.937 --> 00:02:33.032
didn't export something if you don't
see that function availability, but

48
00:02:33.032 --> 00:02:34.600
I like the questions.

49
00:02:34.600 --> 00:02:38.380
Any other questions so
far before we move on?

50
00:02:38.380 --> 00:02:45.990
The question was, I mentioned before
that you shouldn't where is that file?

51
00:02:45.990 --> 00:02:47.220
There we go.

52
00:02:47.220 --> 00:02:50.420
You shouldn't serve from the default
root directory you shouldn't serve

53
00:02:50.420 --> 00:02:51.740
everything out.

54
00:02:51.740 --> 00:02:54.455
In reality if I was doing it,
some production code,

55
00:02:54.455 --> 00:02:58.717
I would have a slash lasme endpoint that
points specifically to my lasme directory

56
00:02:58.717 --> 00:03:01.420
where I would fetch those files out.

57
00:03:01.420 --> 00:03:03.583
And, in general,
anything about web security,

58
00:03:03.583 --> 00:03:05.890
you want to be as specific as possible.

59
00:03:05.890 --> 00:03:10.162
It's really easy It's simpler, it's for
us web developers and say like, yeah,

60
00:03:10.162 --> 00:03:13.685
we'll just serve out everything like,
I don't have any secrets here,

61
00:03:13.685 --> 00:03:17.034
but you may have secrets,
you may have like configuration files, or

62
00:03:17.034 --> 00:03:20.617
you may just have underlying
implementations that you don't want people

63
00:03:20.617 --> 00:03:23.257
necessarily to know about and
exposed to the public.

64
00:03:23.257 --> 00:03:25.118
So if we were doing some production,

65
00:03:25.118 --> 00:03:29.038
I would just have a dedicated Jasmine
point that only turned out last summer.

66
00:03:29.038 --> 00:03:30.494
But good question.

67
00:03:30.494 --> 00:03:36.076
We try to try to do some best practices
but sometimes we cut corners.

68
00:03:36.076 --> 00:03:41.010
&gt;&gt; Why is the response bad magic
number in the western response?

69
00:03:42.280 --> 00:03:44.060
&gt;&gt; You're getting bad magic number.

70
00:03:44.060 --> 00:03:46.440
I ran into this before.

71
00:03:46.440 --> 00:03:49.230
I so though lasme.

72
00:03:49.230 --> 00:03:55.240
Binary code itself the file has
what is known as a magic number.

73
00:03:55.240 --> 00:04:00.648
It's a set of X values that correspond
to numbers that just says like,

74
00:04:00.648 --> 00:04:03.540
Hey, I'm a lasme file.

75
00:04:03.540 --> 00:04:08.625
You know what to do next so that way the,
the compiler engine that is running our

76
00:04:08.625 --> 00:04:13.960
lasme code in the browser Notice that it's
a valid lasme file and it checks for it.

77
00:04:15.100 --> 00:04:19.010
I don't know why you're getting that I ran
into it before and I can't duplicate it.

78
00:04:19.010 --> 00:04:19.990
Otherwise I would.

79
00:04:19.990 --> 00:04:25.560
I do like making errors just
because you're gonna run into them.

80
00:04:25.560 --> 00:04:27.113
Usually when that happens,

81
00:04:27.113 --> 00:04:30.995
it means that the file that when you
call web assembly dot instantiate or

82
00:04:30.995 --> 00:04:35.212
instantiate streaming The file you're
trying to pull in is not a lasme file.

83
00:04:35.212 --> 00:04:39.403
And generally, you're probably pulling
in you might be pulling in like index

84
00:04:39.403 --> 00:04:41.820
dot HTML or something like that.

85
00:04:41.820 --> 00:04:44.750
So in that case,
it's going to complain that it's a bad.

86
00:04:44.750 --> 00:04:49.452
It's a bad magic number because it checks
that header first of the ;lasme file to

87
00:04:49.452 --> 00:04:53.396
make sure it's valid web assembly
before continuous compiling And

88
00:04:53.396 --> 00:04:56.923
I during our next break,
maybe whoever's having an issue,

89
00:04:56.923 --> 00:05:01.280
we can share screens because I would
like to replicate this because I do like

90
00:05:01.280 --> 00:05:05.810
running into issues just so
we can solve them for everybody.

91
00:05:05.810 --> 00:05:06.869
Yeah, I went on and

92
00:05:06.869 --> 00:05:11.280
on about how we shouldn't serve
static files from the root directory.

93
00:05:11.280 --> 00:05:15.960
And one of the questions that was
asked was well, how do we serve?

94
00:05:15.960 --> 00:05:18.310
What is the best way to serve lasme files?

95
00:05:18.310 --> 00:05:21.039
That's gonna depend a lot on
your situation, your server,

96
00:05:21.039 --> 00:05:23.260
what type of language you're running.

97
00:05:23.260 --> 00:05:27.165
But I'll say in the Express case,

98
00:05:27.165 --> 00:05:32.560
let's see if we can whip
this up in my server js.

99
00:05:33.710 --> 00:05:35.812
So instead of doing other.

100
00:05:35.812 --> 00:05:38.480
use with no with no default path.

101
00:05:39.940 --> 00:05:43.310
I think we're just going
to serve up a regular.

102
00:05:43.310 --> 00:05:47.330
We're just going to start
with that specific directory.

103
00:05:47.330 --> 00:05:48.280
So I.

104
00:05:48.280 --> 00:05:51.690
So in Express, I can say other use.

105
00:05:51.690 --> 00:05:54.814
And I'll say, /wisdom.

106
00:05:56.250 --> 00:06:02.406
Then I can see express static And

107
00:06:02.406 --> 00:06:06.727
then I'm only gonna serve
from my build directory.

108
00:06:11.505 --> 00:06:17.280
So if you're using express that is the
that seems to be the best way of doing it.

109
00:06:18.680 --> 00:06:20.740
Let me just double check that
checking the docs right now.

110
00:06:20.740 --> 00:06:21.990
Yes.

111
00:06:21.990 --> 00:06:25.649
So if you were going to use if you did
want to just serve this specifically,

112
00:06:25.649 --> 00:06:28.940
we just served directly
from the build directory.

113
00:06:28.940 --> 00:06:30.540
And of course in this case,

114
00:06:30.540 --> 00:06:35.130
the build directory component
contains our source maps as well.

115
00:06:35.130 --> 00:06:39.126
For the intrepid people that noticed,
and we really do want these source maps

116
00:06:39.126 --> 00:06:42.320
because they'll make debugging so
much easier.

117
00:06:42.320 --> 00:06:46.960
One of the questions asked during
the break was when we what happens to

118
00:06:46.960 --> 00:06:49.890
the actual opcode that we're using.

119
00:06:49.890 --> 00:06:53.090
So in this case, i32 multiplier.

120
00:06:53.090 --> 00:06:56.330
So all opcodes inherently when
they perform the operation,

121
00:06:56.330 --> 00:06:58.970
push the value onto the stack.

122
00:06:58.970 --> 00:07:05.050
Actually, let's just pull this up in web
assembly studio switch over here, watts.

123
00:07:05.050 --> 00:07:07.300
In this case it's an add function,
that's fine.

124
00:07:09.130 --> 00:07:14.630
So get local I it's pushing that left
hand side operator or operators zero.

125
00:07:14.630 --> 00:07:20.510
Onto the stack, get local, the next one is
pushing the next parameter onto the stack.

126
00:07:20.510 --> 00:07:25.610
I32 add is going to pop both values
off the stack, add them together,

127
00:07:25.610 --> 00:07:32.000
and then return that, and by return I
mean it pushes that value onto the stack.

128
00:07:32.000 --> 00:07:35.388
So now inherently if we return,
and when we return,

129
00:07:35.388 --> 00:07:40.050
it's just going to return whatever
the value on the stack is.

130
00:07:40.050 --> 00:07:44.780
But if we wanted to continue to
do operations on in this module,

131
00:07:44.780 --> 00:07:46.130
we can say I 32.

132
00:07:46.130 --> 00:07:48.870
We'll say const 1.

133
00:07:48.870 --> 00:07:52.860
So we'll add 1 and then I can say I32 add.

134
00:07:52.860 --> 00:07:58.170
And what this is going to
do is it's now popping.

135
00:07:59.900 --> 00:08:04.411
It's either this operation is now popping
the results of this add operator and

136
00:08:04.411 --> 00:08:08.390
this constant so it's going to add
one to whatever the value is have.

137
00:08:08.390 --> 00:08:13.290
We added four and that's one of the things
that makes working web assembly tricky if

138
00:08:13.290 --> 00:08:14.970
you're writing it by hand,

139
00:08:14.970 --> 00:08:19.450
is you have to remember exactly what
is on the stack at a given time.

140
00:08:19.450 --> 00:08:22.079
You don't save them as variables
necessarily like you would in

141
00:08:22.079 --> 00:08:23.730
another language.

142
00:08:23.730 --> 00:08:28.456
Thus, we generally try to keep our
operations pretty simple whenever we're

143
00:08:28.456 --> 00:08:31.230
writing in watt files and
web assembly by hand

