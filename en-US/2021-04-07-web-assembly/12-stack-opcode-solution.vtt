WEBVTT

1
00:00:00.070 --> 00:00:04.523
One of the questions asked during
the break was what happens to

2
00:00:04.523 --> 00:00:07.640
the actual opcode that we're using.

3
00:00:07.640 --> 00:00:10.840
So in this case, I 32 multiplier.

4
00:00:10.840 --> 00:00:14.088
So all opcodes inherently when
they perform the operation,

5
00:00:14.088 --> 00:00:16.720
push the value onto the stack.

6
00:00:16.720 --> 00:00:20.610
Actually, let's pull this up in web
assembly studio switch over here.

7
00:00:21.900 --> 00:00:26.163
What's in this case it's an add function,
that's fine.

8
00:00:26.163 --> 00:00:30.712
So get local it's pushing that
left hand side operator OR

9
00:00:30.712 --> 00:00:33.730
operator zero onto the stack.

10
00:00:33.730 --> 00:00:34.330
Get local.

11
00:00:34.330 --> 00:00:38.310
The next one is pushing the next
parameter onto the stack.

12
00:00:38.310 --> 00:00:42.188
I 32 ad is going to pop
both values off the stack.

13
00:00:42.188 --> 00:00:46.230
Add them together, and then return that.

14
00:00:46.230 --> 00:00:49.810
And by return, I mean it pushes
that value onto the stack.

15
00:00:49.810 --> 00:00:53.253
So now, inherently if we return and
when we return,

16
00:00:53.253 --> 00:00:57.850
it's just gonna return whatever
the value on the stack is.

17
00:00:57.850 --> 00:01:03.268
But if we wanted to continue to
do operations on in this module,

18
00:01:03.268 --> 00:01:08.190
We can say I32, we'll say const 1,
so we'll add 1.

19
00:01:08.190 --> 00:01:11.640
And then I can say I32 add.

20
00:01:13.640 --> 00:01:17.943
And this is where it gets a little tricky
once you get more complex because you have

21
00:01:17.943 --> 00:01:20.981
to remember that even though
there's no variable here,

22
00:01:20.981 --> 00:01:24.480
you don't see an explicit equals or
anything like that.

23
00:01:24.480 --> 00:01:26.860
There is a number on the stack already.

24
00:01:26.860 --> 00:01:28.330
And add is gonna take both numbers.

25
00:01:28.330 --> 00:01:29.950
So here's the number on a stack.

26
00:01:29.950 --> 00:01:31.100
Here's the next number on a stack.

27
00:01:31.100 --> 00:01:34.540
So this is gonna add the two numbers
together and then add plus 1.

28
00:01:34.540 --> 00:01:39.173
In the next section, we'll see why
we don't write web assembly by hand,

29
00:01:39.173 --> 00:01:42.613
because reasoning about
this is really complicated,

30
00:01:42.613 --> 00:01:45.696
because mentally you have
to keep track of okay.

31
00:01:45.696 --> 00:01:49.330
This operation puts
the number into the stack.

32
00:01:49.330 --> 00:01:54.159
Okay, so that's that number and then we
take this number, and then that takes

33
00:01:54.159 --> 00:01:59.070
two operands to perform the operation on,
and then it gets really confusing.

34
00:01:59.070 --> 00:02:02.158
That's why all the examples we're
doing today are very simple so

35
00:02:02.158 --> 00:02:05.710
we don't have to go too far down that
rabbit hole, but I'm glad you asked.

36
00:02:06.740 --> 00:02:07.890
Okay.

37
00:02:07.890 --> 00:02:10.270
What was the example I said, minus one.

38
00:02:10.270 --> 00:02:14.250
All right, so how did everybody do,
did you create a minus one function?

39
00:02:16.310 --> 00:02:21.300
And I'm cheating here, I already created
it, I embedded the web assembly.

40
00:02:21.300 --> 00:02:23.840
So your function should
look something like this.

41
00:02:23.840 --> 00:02:27.570
Again the export,
it can be at the top or the bottom.

42
00:02:27.570 --> 00:02:31.718
By convention, a lot of exports are at the
top just because it makes it easy when you

43
00:02:31.718 --> 00:02:34.350
look at a file to see
what's being exported.

44
00:02:34.350 --> 00:02:35.875
That's just generally how it goes or

45
00:02:35.875 --> 00:02:38.350
the convention, but
you can do whatever you want.

46
00:02:38.350 --> 00:02:40.300
You can name it minus one, which I did.

47
00:02:41.420 --> 00:02:42.920
I call the parameter x.

48
00:02:42.920 --> 00:02:46.660
So I'm just getting That parameter,
I'm getting local.

49
00:02:46.660 --> 00:02:48.185
I can also say get local zero,

50
00:02:48.185 --> 00:02:51.950
it'll do the same thing cuz it's
getting that first parameter.

51
00:02:51.950 --> 00:02:55.500
But again, I like to name things cuz
it makes it easy to reason about.

52
00:02:55.500 --> 00:02:57.860
So we're pushing this
number into the stack.

53
00:02:57.860 --> 00:03:02.359
We're declaring a number one, and
then we're pushing that onto the stack and

54
00:03:02.359 --> 00:03:04.556
then we're subtracting the number.

55
00:03:04.556 --> 00:03:08.960
And then because the function will
always return whatever's on the stack.

56
00:03:08.960 --> 00:03:12.660
This is implied the return
is implied at this point.

57
00:03:12.660 --> 00:03:15.300
So if I run this I build it.

58
00:03:15.300 --> 00:03:15.900
The bill.

59
00:03:15.900 --> 00:03:16.540
Yes, it builds.

60
00:03:17.580 --> 00:03:18.750
I run it.

61
00:03:18.750 --> 00:03:21.770
It returns a two because
I passed in a three

