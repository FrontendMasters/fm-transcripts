WEBVTT

1
00:00:00.030 --> 00:00:06.170
We spent the last section talking about
binary and hacks and low level things.

2
00:00:06.170 --> 00:00:10.430
But honestly, none of that really matters.

3
00:00:10.430 --> 00:00:12.890
That's because computers are stateless.

4
00:00:12.890 --> 00:00:18.870
They don't have the concept of This
thing is here, this thing is here.

5
00:00:18.870 --> 00:00:22.285
All it does is it processes
instructions in real time,

6
00:00:22.285 --> 00:00:27.275
as in because we're manipulating tiny,
tiny, tiny amounts of electricity.

7
00:00:27.275 --> 00:00:30.003
Once the computer is turned off,
all that's gone,

8
00:00:30.003 --> 00:00:33.971
computer doesn't know it has no concept
of where it was where it wants to be,

9
00:00:33.971 --> 00:00:36.150
who it wants to grow up
to be in the future.

10
00:00:36.150 --> 00:00:37.100
It has none of that.

11
00:00:37.100 --> 00:00:38.280
All right.

12
00:00:38.280 --> 00:00:41.000
So we have this concept called memory.

13
00:00:41.000 --> 00:00:44.173
That is the ability to
store these ones and

14
00:00:44.173 --> 00:00:50.830
zeros in a state that can be accessed
either by the CPU or the operating system.

15
00:00:50.830 --> 00:00:55.448
And we can store those long term via
things like SSDs, solid state drives or

16
00:00:55.448 --> 00:01:00.300
we should store them in short term memory
known as RAM or random access memory.

17
00:01:01.410 --> 00:01:03.760
And memory is everywhere on a computer.

18
00:01:03.760 --> 00:01:08.210
There are caches at different levels,
there's L1 cache, L2 cache and

19
00:01:08.210 --> 00:01:11.600
these are caches of information
on the CPU themselves.

20
00:01:11.600 --> 00:01:16.250
So it's memory built into the CPU, that it
can access data really, really quickly.

21
00:01:16.250 --> 00:01:21.120
Actually, the l one cache to cache
that is the fastest memory access

22
00:01:21.120 --> 00:01:23.330
we can get on a computer.

23
00:01:23.330 --> 00:01:27.815
And as we go out to more and more complex
memory, so if we go out to RAM, our hard

24
00:01:27.815 --> 00:01:33.180
drives or tape drives, things like that,
the speed takes much, much longer.

25
00:01:33.180 --> 00:01:37.883
So if you've shopped for a computer and
you see it has like, I don't know,

26
00:01:37.883 --> 00:01:39.760
a one megabyte and one cache.

27
00:01:39.760 --> 00:01:41.000
I think that's a pretty small cache.

28
00:01:41.000 --> 00:01:45.208
But as a 1 or 2 megabyte, 1 cache,
that just means it all that there it

29
00:01:45.208 --> 00:01:49.730
can store it has space to store
a million bytes of information.

30
00:01:49.730 --> 00:01:52.951
And we actually want the caches
to be as large as possible,

31
00:01:52.951 --> 00:01:55.860
because that's the fastest
way of accessing data.

32
00:01:57.400 --> 00:02:00.852
And I know, for
a high level language like JavaScript,

33
00:02:00.852 --> 00:02:05.560
we generally don't spend too
much time thinking about memory.

34
00:02:05.560 --> 00:02:08.250
That's because JavaScript
is a high level language.

35
00:02:08.250 --> 00:02:12.490
And to me when I hear high level language,
it means it covers up all of the ugly

36
00:02:12.490 --> 00:02:16.619
stuff, all the nasty parts we don't
want to think about as programmers.

37
00:02:16.619 --> 00:02:18.109
For instance, we don't, or

38
00:02:18.109 --> 00:02:22.353
when's the last time in JavaScript you've
had to think about garbage collection?

39
00:02:24.505 --> 00:02:26.926
Like probably if you're a performance
engineer or performance oriented,

40
00:02:26.926 --> 00:02:28.590
you probably think about
garbage collection.

41
00:02:28.590 --> 00:02:33.213
But most frontend engineers don't think
about how to actually access memory of

42
00:02:33.213 --> 00:02:34.840
what's happening.

43
00:02:34.840 --> 00:02:38.170
When I create a string,
how is that being stored?

44
00:02:38.170 --> 00:02:41.570
We don't think about that because
JavaScript does that for us.

45
00:02:41.570 --> 00:02:48.118
When we think about web assembly,
which doesn't have garbage collection,

46
00:02:48.118 --> 00:02:53.871
we actually have to consider,
I've got the number I'll say 21.

47
00:02:53.871 --> 00:02:59.950
I've got 21 that means I need to
allocate at least 8 bytes of storage.

48
00:02:59.950 --> 00:03:03.912
That means I need to tell the computer
itself, hey, I want to reserve 8 bytes and

49
00:03:03.912 --> 00:03:07.530
I want to start at this memory address so
I can access it later.

50
00:03:07.530 --> 00:03:10.900
And then later, when we're done with
that information that number 21,

51
00:03:10.900 --> 00:03:12.810
we don't need anymore.

52
00:03:12.810 --> 00:03:15.970
We have to deallocate that and
that's we tell the computer.

53
00:03:15.970 --> 00:03:17.550
Hey, actually you can free this up.

54
00:03:17.550 --> 00:03:18.940
This is now a free space.

55
00:03:20.560 --> 00:03:24.906
And when you start thinking about that,
you're like, man, if I had to do that for

56
00:03:24.906 --> 00:03:27.540
every string and
every object and every property,

57
00:03:27.540 --> 00:03:30.450
it would get so tedious, and it would.

58
00:03:30.450 --> 00:03:36.805
So we don't do that in JavaScript,
but we're gonna do some of that today.

59
00:03:36.805 --> 00:03:40.934
So, all right it's, I don't know if
anything after all this, you will

60
00:03:40.934 --> 00:03:45.825
appreciate how much high level languages
like JavaScript do for you as programmers.

61
00:03:47.415 --> 00:03:52.170
The best way to think of memory and I
struggled with this one because there's so

62
00:03:52.170 --> 00:03:53.259
many analogies.

63
00:03:53.259 --> 00:03:56.303
I don't know if any of you
are Star Trek fans, but

64
00:03:56.303 --> 00:03:58.920
I am like a Star Trek next generation fan.

65
00:03:59.950 --> 00:04:03.013
There's a scene or there's an episode,

66
00:04:03.013 --> 00:04:09.130
it's super famous in in Star Trek canon,
but it's called a Darmok and Jalad.

67
00:04:09.130 --> 00:04:11.870
But anyways,
it's about this entire society.

68
00:04:11.870 --> 00:04:15.591
Who only form who main form of
communications is telling stories and

69
00:04:15.591 --> 00:04:19.540
telling analogies and
those represents something larger.

70
00:04:19.540 --> 00:04:25.780
So I like to apply the same thing too
hard or difficult to grasp concepts.

71
00:04:25.780 --> 00:04:27.890
So I'll tell the same story.

72
00:04:27.890 --> 00:04:33.010
Think of memory as a giant
warehouse full of storage bins.

73
00:04:33.010 --> 00:04:36.059
Just think of it as a town full of
houses or many other things, but

74
00:04:36.059 --> 00:04:38.490
I'll use the storage of an example.

75
00:04:38.490 --> 00:04:43.795
So in your mental mind, think of
this massive massive storehouse and

76
00:04:43.795 --> 00:04:47.080
all these are houses have bins.

77
00:04:47.080 --> 00:04:51.437
The bins are generally a fixed size so you
can only store so much in a given bin and

78
00:04:51.437 --> 00:04:53.800
we can put anything in there.

79
00:04:53.800 --> 00:05:00.150
We can put as big a jumble of ones and
zeros into that bin as the bin will fit.

80
00:05:00.150 --> 00:05:02.094
And oftentimes, actually,
most of the time,

81
00:05:02.094 --> 00:05:03.950
you're probably gonna need multiple bins.

82
00:05:03.950 --> 00:05:07.423
So you'll have an address
that starts say here and

83
00:05:07.423 --> 00:05:11.720
we move down the aisle and
it fills up more and more bins.

84
00:05:11.720 --> 00:05:14.200
It takes more and more bins to
store more and more information.

85
00:05:16.020 --> 00:05:17.480
That's the way we think of memory.

86
00:05:18.700 --> 00:05:20.630
Just this giant storage system, and

87
00:05:20.630 --> 00:05:23.620
there's different pointers
to different addresses and

88
00:05:23.620 --> 00:05:27.990
a pointer is just an address, it's the
location of that bin within the warehouse.

89
00:05:29.500 --> 00:05:33.361
I hope that analogy makes sense because,
if we started talking about like,

90
00:05:33.361 --> 00:05:37.490
what actually memory does it
wouldn't be meaningful to you.

91
00:05:37.490 --> 00:05:40.440
So, where does the operating
system come in and all this?

92
00:05:40.440 --> 00:05:45.290
The operating system is
the foreperson of the warehouse.

93
00:05:45.290 --> 00:05:50.090
The operating system is the one who
decides, like, hey, this process here,

94
00:05:50.090 --> 00:05:52.940
no you need you need 10
bins worth of memory.

95
00:05:52.940 --> 00:05:56.190
Sure, you can have these,
here's your address now.

96
00:05:56.190 --> 00:06:00.776
It's your mailing address, I know where
to route all the mail that you get,

97
00:06:00.776 --> 00:06:02.791
it's gonna go to the these bins.

98
00:06:02.791 --> 00:06:07.550
But the operating systems job, its primary
job, is just allocating memory and

99
00:06:07.550 --> 00:06:11.740
deallocating memory and
deciding who gets what, who has where.

100
00:06:11.740 --> 00:06:14.950
And it keeps track of all of
this in its internal state.

101
00:06:16.430 --> 00:06:22.230
So, you're probably thinking
like why is that important?

102
00:06:22.230 --> 00:06:26.790
Well, there's many reasons why we have
to be very, very careful about memory.

103
00:06:26.790 --> 00:06:30.830
So for instance, let's say I have
a process, I'm gonna use JavaScript.

104
00:06:30.830 --> 00:06:33.642
It's really not the probably
the right analogy goes to high level,

105
00:06:33.642 --> 00:06:35.930
but I'll use JavaScript for example.

106
00:06:35.930 --> 00:06:41.812
I have a JavaScript process that is gonna
require about 10 megabytes of memory for

107
00:06:41.812 --> 00:06:44.930
some reason, doesn't really matter.

108
00:06:44.930 --> 00:06:47.430
It has a heap, it has an execution stack.

109
00:06:47.430 --> 00:06:49.320
It's gonna need 10 megabytes of memory.

110
00:06:49.320 --> 00:06:55.480
And let's say I have another process
say I'm playing Spotify on my computer.

111
00:06:55.480 --> 00:06:58.267
Spotify is also gonna need memory to
run and store its internal state,

112
00:06:58.267 --> 00:06:59.950
things like that.

113
00:06:59.950 --> 00:07:04.404
What would happen if they're both writing
to the same addresses, the same memory,

114
00:07:04.404 --> 00:07:08.858
you get a memory corruption and the entire
computer crashed because instead of these

115
00:07:08.858 --> 00:07:13.530
organized series of ones and zeros,
it'll just be jibberish ones and zeros.

116
00:07:13.530 --> 00:07:18.523
So the order matters, the instructions
matter, having a good, stable,

117
00:07:18.523 --> 00:07:21.706
reliable operating
system honestly matters.

118
00:07:21.706 --> 00:07:25.325
And it's another one of that
bit of magic that we take for

119
00:07:25.325 --> 00:07:30.030
granted in programming, that like
all these things are managed for us.

120
00:07:30.030 --> 00:07:32.119
We don't have to manually
think about these things.

121
00:07:33.450 --> 00:07:38.080
And I said the word pointer, but
think of pointer as it's an address.

122
00:07:38.080 --> 00:07:40.340
It's not the actual data itself.

123
00:07:40.340 --> 00:07:44.740
It's just the start of the data and
we know exactly how long that data is.

124
00:07:44.740 --> 00:07:48.424
So we're gonna read from, say,
index zero, it's not an index, but

125
00:07:48.424 --> 00:07:52.234
we'll start at zero and we're gonna
read 32 bits of information, and

126
00:07:52.234 --> 00:07:53.740
we're gonna pull that out.

127
00:07:54.870 --> 00:07:58.940
It is critical and I do mean critical
that we understand the size of

128
00:07:58.940 --> 00:08:03.899
the information and the type, because
there are different types of numbers and

129
00:08:03.899 --> 00:08:06.800
they are represented
differently in binary.

130
00:08:08.680 --> 00:08:11.760
And we'll cover that in the next
lecture under numeric types.

131
00:08:11.760 --> 00:08:15.903
So there are any questions about memory,
because memory it's

132
00:08:15.903 --> 00:08:20.750
a foundational part of computing that
a lot of us just forget it's there,

133
00:08:20.750 --> 00:08:23.740
because it's kind of
magical at high level.

