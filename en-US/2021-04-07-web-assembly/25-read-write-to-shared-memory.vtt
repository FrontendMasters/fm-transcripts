WEBVTT

1
00:00:00.000 --> 00:00:06.769
There's different ways of creating memory
in Web Assembly, but if we wanted to,

2
00:00:06.769 --> 00:00:12.082
actually yeah, I think this
the last exercise we're gonna do.

3
00:00:12.082 --> 00:00:18.265
Cuz [LAUGH] I can tell it's now we're
starting to get really deep into and

4
00:00:18.265 --> 00:00:24.672
we're talking about unsigned 8 bit
memory arrays and things like that.

5
00:00:24.672 --> 00:00:28.062
And this an intro course, I don't
wanna go too far in that direction,

6
00:00:28.062 --> 00:00:29.739
I just wanna give you a taste just.

7
00:00:29.739 --> 00:00:32.823
So when you come across it again,
you'll be like, yeah,

8
00:00:32.823 --> 00:00:36.450
I remember Jim said that array buffer
is actually just ones and zeros and

9
00:00:36.450 --> 00:00:40.332
we have to give it a view, that's what
a typed array is called a view into it.

10
00:00:40.332 --> 00:00:43.938
So let's go and do that,
let's create some memory, let's create

11
00:00:43.938 --> 00:00:48.078
a memory object in Web Assembly, and
then let's pass memory back and forth.

12
00:00:48.078 --> 00:00:51.446
So this is a demo of passing
memory to WebAssembly, and so

13
00:00:51.446 --> 00:00:55.028
whether someone's gonna read
from JavaScript memory, and

14
00:00:55.028 --> 00:00:58.483
then JavaScript gonna read
from the WebAssembly memory.

15
00:00:58.483 --> 00:01:05.251
Okay, I am going to start over,
I don't need this,

16
00:01:11.438 --> 00:01:15.778
And gonna check my notes so
I get this right.

17
00:01:15.778 --> 00:01:20.578
So, we're gonna jump back to our index.ts,

18
00:01:23.679 --> 00:01:28.753
Close that, that is in the assembly
directory index.ts and

19
00:01:28.753 --> 00:01:33.724
you can keep these if you want but
I'm gonna clear them out,

20
00:01:33.724 --> 00:01:36.127
just to keep things simple.

21
00:01:36.127 --> 00:01:39.484
So the first thing we wanna do
is we wanna set the memory,

22
00:01:39.484 --> 00:01:44.215
memory because it's fixed and
it's linear it doesn't grow automatically.

23
00:01:44.215 --> 00:01:48.877
You have to tell the computer, hey, I want
from this address to this address and

24
00:01:48.877 --> 00:01:50.909
I want that reserved for my space.

25
00:01:50.909 --> 00:01:53.600
And I'm gonna do whatever I want within
that space, but I don't want anybody else

26
00:01:53.600 --> 00:01:55.944
to overwrite that memory, and
I want you to know it's allocated to me.

27
00:01:55.944 --> 00:02:00.368
But we have to tell the computer
exactly how much memory we want, so

28
00:02:00.368 --> 00:02:01.873
we use memory.grow.

29
00:02:04.735 --> 00:02:10.799
And we're gonna give it 2 pages, and
a page is 64 kilobytes of information,

30
00:02:10.799 --> 00:02:14.974
it's just one of the many
ways of referring to memory.

31
00:02:14.974 --> 00:02:18.000
And we're gonna give it 2
pages worth of information, so

32
00:02:18.000 --> 00:02:21.975
we're allocating 128 kilobytes of
memory to our Web Assembly process.

33
00:02:24.112 --> 00:02:26.673
So now, and this is pretty cool,

34
00:02:26.673 --> 00:02:31.978
we're gonna write directly to memory,
there's no fancy utility or

35
00:02:31.978 --> 00:02:36.746
anything like that,
we're writing directly to memory now.

36
00:02:36.746 --> 00:02:42.853
So we're gonna say store, And
we're gonna say store at index 0, that

37
00:02:42.853 --> 00:02:47.970
is the beginning of our memory after the
headers and the offset, things like that.

38
00:02:47.970 --> 00:02:51.490
We're gonna store the number 21,
preferred save or

39
00:02:51.490 --> 00:02:56.465
if we try to compile it now it's gonna
throw an error, because we said we wanna

40
00:02:56.465 --> 00:03:00.843
store the number 21 but we didn't
say what we want it to look like.

41
00:03:00.843 --> 00:03:05.161
Remember, we're dealing with ones and
zeros, so we have to be very specific.

42
00:03:05.161 --> 00:03:09.810
So I wanna store this number as
an unsigned 8 bit integer, so

43
00:03:09.810 --> 00:03:11.826
I'm gonna say store u8.

44
00:03:15.395 --> 00:03:18.745
So now we're storing 21
index 0 into our memory.

45
00:03:18.745 --> 00:03:26.378
And let's store another number, let's
store another unsigned 8 bit integer.

46
00:03:26.378 --> 00:03:30.529
And we'll store that index 1,
I'm gonna store 99, there.

47
00:03:32.743 --> 00:03:39.174
Okay, I [LAUGH] think this is so cool,
I think we are now writing ones and

48
00:03:39.174 --> 00:03:43.316
zeros directly into
the RAM of our computer or

49
00:03:43.316 --> 00:03:47.365
the registry depends on where it's going.

50
00:03:47.365 --> 00:03:51.041
I think that's powerful,
there's no abstraction on top of this,

51
00:03:51.041 --> 00:03:55.749
this is straight, low level programming,
which is hopefully what you're here for,

52
00:03:55.749 --> 00:03:58.536
if not, I'm excited for
you that we get to do this.

53
00:03:58.536 --> 00:04:03.525
All right, next up, we want to
export a function that reads memory,

54
00:04:03.525 --> 00:04:06.460
so I'm gonna say, export readMemory.

55
00:04:06.460 --> 00:04:10.745
And that's gonna to take a number and
that's gonna be an unsigned or

56
00:04:10.745 --> 00:04:14.215
it's gonna be a 32 bit integer,
call it a function.

57
00:04:18.631 --> 00:04:26.138
And it's gonna return a 32 bit integer
that is read from memory, so i32.

58
00:04:26.138 --> 00:04:30.626
Okay, so
here we're gonna use the load function, so

59
00:04:30.626 --> 00:04:37.433
store writes directly into memory and
verses load is gonna read out from memory.

60
00:04:37.433 --> 00:04:41.550
And again, we have to say exactly how
we're reading it and what we're reading.

61
00:04:41.550 --> 00:04:48.516
So in this case, we're reading
an unsigned 8 bit integer, And

62
00:04:48.516 --> 00:04:50.910
I wanna load the index that is passed in.

63
00:04:56.247 --> 00:05:01.461
And I'm just gonna say
return because out of habit,

64
00:05:01.461 --> 00:05:06.808
I know it's implied but
it's gonna return anyways.

65
00:05:06.808 --> 00:05:12.171
Okay, everybody with me so far, [LAUGH]
this is pretty tactical, I know it can be

66
00:05:12.171 --> 00:05:17.456
a little confusing for people, especially
for I'll say for me, who doesn't

67
00:05:17.456 --> 00:05:22.524
work directly in languages like C we
have to allocate the allocate memory.

68
00:05:22.524 --> 00:05:26.879
So, storing things in memory, reading
them from memory and being specific about

69
00:05:26.879 --> 00:05:30.492
the type, this is all brand new stuff
to me as well or it was at a time.

70
00:05:30.492 --> 00:05:35.220
So, that's why we're spending a little
bit of time on it but we're not going

71
00:05:35.220 --> 00:05:39.802
too deep into it, cuz, as we'll see
in the later more advanced examples,

72
00:05:39.802 --> 00:05:42.520
things will get complicated very quickly.

73
00:05:42.520 --> 00:05:46.225
All right, so now let's access
the function we just wrote, well,

74
00:05:46.225 --> 00:05:49.871
first, let's build it,
let's make sure I do everything right.

75
00:05:49.871 --> 00:05:54.430
No whammies, no whammies, no whammies,
no whammies okay, built so,

76
00:05:54.430 --> 00:05:57.739
the code I wrote is valid,
that's always helpful.

77
00:05:57.739 --> 00:06:02.544
I do like that about typed languages is it
catches a lot of mistakes ahead of time.

78
00:06:02.544 --> 00:06:07.866
And now, let's pull out the memory,
so one of the things export it is we

79
00:06:07.866 --> 00:06:13.570
exported the function called readMemory,
remember the one we just wrote.

80
00:06:13.570 --> 00:06:20.212
And then we also export it, what exports
by default is the memory itself,

81
00:06:20.212 --> 00:06:24.510
and this is in the form
of a shared array buffer.

82
00:06:24.510 --> 00:06:29.273
And I will actually pause or
not pause there, but I'll take a break for

83
00:06:29.273 --> 00:06:33.413
a second and that's instance
to come back to array buffers.

84
00:06:33.413 --> 00:06:35.782
We talked about them briefly but

85
00:06:35.782 --> 00:06:40.168
there are two types of array
buffers that we care about, and

86
00:06:40.168 --> 00:06:45.010
remember, array buffer is just
a long string of raw binary data.

87
00:06:45.010 --> 00:06:48.811
There are array buffers, which
are isolated to the process itself and

88
00:06:48.811 --> 00:06:51.013
then there's the shared array buffer.

89
00:06:51.013 --> 00:06:58.270
And shared array buffer is a buffer that
is accessible by two different processes.

90
00:06:58.270 --> 00:07:02.770
So that is in this case, a shared array
buffer is a memory space that both

91
00:07:02.770 --> 00:07:06.370
the WebAssembly and
JavaScript know the addresses, and

92
00:07:06.370 --> 00:07:10.349
they can reach in and they can
both read and write to each other.

93
00:07:10.349 --> 00:07:13.940
Funny enough, at underneath all
of the craft all the helpers and

94
00:07:13.940 --> 00:07:17.614
everything we're doing,
that is what's actually happening.

95
00:07:17.614 --> 00:07:22.405
That's how we're passing data back and
forth is via writing of memory and

96
00:07:22.405 --> 00:07:23.803
reading the memory.

97
00:07:23.803 --> 00:07:28.656
Fortunately, things like assembly
script do all that work for us, so

98
00:07:28.656 --> 00:07:30.969
we don't have to worry about it.

99
00:07:30.969 --> 00:07:34.929
But if we were writing pure on
adulterated vanilla web assembly,

100
00:07:34.929 --> 00:07:39.681
we'd have to handle all this ourselves,
as in how to pass data back and forth.

101
00:07:39.681 --> 00:07:43.380
But fortunately, the JavaScript API and

102
00:07:43.380 --> 00:07:47.826
assembly script loader,
do all this work for us.

103
00:07:47.826 --> 00:07:51.004
Okay, so
we learned what shared array buffers are,

104
00:07:51.004 --> 00:07:55.929
you've probably seen them before,
anybody remember, this is a bit of trivia.

105
00:07:55.929 --> 00:08:00.196
But anybody remember the,
was it spectre and

106
00:08:00.196 --> 00:08:04.473
meltdown over those big
things from before?

107
00:08:04.473 --> 00:08:06.660
All right, so part of it, and

108
00:08:06.660 --> 00:08:11.734
I will explain this naively cuz I am
not a low level systems engineer,

109
00:08:11.734 --> 00:08:16.651
but part of what was happening was
a share rate was a timing attack.

110
00:08:16.651 --> 00:08:19.026
So things are memory safe right now,

111
00:08:19.026 --> 00:08:22.866
that's in a process can read
from another process memory.

112
00:08:22.866 --> 00:08:27.039
That's part of what operating systems do
is they guarantee this memory security.

113
00:08:27.039 --> 00:08:31.812
We want this because, let's say, I don't
know, you're streaming are your saving

114
00:08:31.812 --> 00:08:34.797
confidential medical
information to the hard disk,

115
00:08:34.797 --> 00:08:39.263
there's a process that's doing that if
we're just taking this as an example.

116
00:08:39.263 --> 00:08:43.735
You wouldn't want another process to
be able to read into that memory and

117
00:08:43.735 --> 00:08:48.669
extract that information to the side,
that is not what we want computers to do.

118
00:08:48.669 --> 00:08:52.302
And if we didn't have memory security,
we would have to run everything linearly.

119
00:08:52.302 --> 00:08:55.849
We'd have to say, you execute and
then you execute and

120
00:08:55.849 --> 00:09:00.493
then you execute just to make sure
that there's no memory crossovers.

121
00:09:00.493 --> 00:09:05.666
So what happened was the shared array
buffer is a way of sharing memory.

122
00:09:05.666 --> 00:09:10.161
And the bug was other processes could
reach in and read that shared array buffer

123
00:09:10.161 --> 00:09:14.603
because it wasn't being used properly,
it wasn't implemented properly.

124
00:09:14.603 --> 00:09:19.342
And there's such thing known
as a timing attack, and

125
00:09:19.342 --> 00:09:24.202
a timing attack is when
a process is writing to memory.

126
00:09:24.202 --> 00:09:27.121
And because the operating systems
are generally pretty good,

127
00:09:27.121 --> 00:09:29.221
other processes can't tell what's doing.

128
00:09:29.221 --> 00:09:32.700
But what it can do,
what the other hostile process can do,

129
00:09:32.700 --> 00:09:36.045
is it by the amount of time it
takes to write into memory.

130
00:09:36.045 --> 00:09:40.004
We know that a bigger number is gonna
take a certain amount of time and

131
00:09:40.004 --> 00:09:42.440
a smaller number is gonna take less time.

132
00:09:42.440 --> 00:09:47.102
And through a lot of complex engineering,
you can actually figure out what's being

133
00:09:47.102 --> 00:09:51.499
written by the sheer amount of time it
takes for the process to start and finish,

134
00:09:51.499 --> 00:09:54.668
and that's what is one of
the things that was happening.

135
00:09:54.668 --> 00:09:59.304
So they actually disabled shared array
buffer for a while in browsers until they

136
00:09:59.304 --> 00:10:03.611
fix that, and they also reduce
the specificity on performance that now.

137
00:10:03.611 --> 00:10:08.329
Cuz performance that now was, I think
it got to microsecond precision for

138
00:10:08.329 --> 00:10:10.242
it in terms of timing things.

139
00:10:10.242 --> 00:10:14.024
And that was one of the things that
allowed the timing attacks was when you

140
00:10:14.024 --> 00:10:16.256
can get to that level of precision, as in,

141
00:10:16.256 --> 00:10:19.434
you know exactly how long it
takes the CPU to write to memory.

142
00:10:19.434 --> 00:10:22.071
We're talking about microseconds or
pico seconds,

143
00:10:22.071 --> 00:10:25.946
you can figure out what's going on, so
they disabled a lot of that for a while.

144
00:10:25.946 --> 00:10:29.670
Totally an aside,
not including the course that's just the,

145
00:10:29.670 --> 00:10:34.025
so you can nerd out with me next time we
all hang out in person [LAUGH] will nerd

146
00:10:34.025 --> 00:10:36.006
out about shared array buffers.

147
00:10:36.006 --> 00:10:39.581
Okay, [LAUGH] back to the cours, itself,

148
00:10:39.581 --> 00:10:44.496
so now what we need to do is we
want to read from the memory.

149
00:10:44.496 --> 00:10:48.417
And then we wanna write to memory and read
from memory as an example of JavaScript

150
00:10:48.417 --> 00:10:52.472
writing to WebAssembly memory, and
WebAssembly writing to JavaScript memory.

151
00:10:52.472 --> 00:10:58.192
So in our index.html file,
we're back, no more rants from me,

152
00:10:58.192 --> 00:11:03.186
I promise, maybe one more,
but for now, no more rants.

153
00:11:03.186 --> 00:11:07.391
One of the things that the loader and
WebAssembly self exports is the memory, so

154
00:11:07.391 --> 00:11:10.616
this is a shared array buffer,
the one we just talked about.

155
00:11:10.616 --> 00:11:14.480
So, now let's read from the memory array,
but

156
00:11:14.480 --> 00:11:19.308
the first thing we need to do is
we need to cast the memory into

157
00:11:19.308 --> 00:11:23.280
a view that makes sense to
us now we can decode it.

158
00:11:23.280 --> 00:11:27.555
So I'm gonna say memoryArray,

159
00:11:27.555 --> 00:11:32.303
Equals new unsigned integer array.

160
00:11:35.556 --> 00:11:39.868
Because remember we are previously in
the index ts we are storing everything as

161
00:11:39.868 --> 00:11:40.795
unsigned ends.

162
00:11:40.795 --> 00:11:44.987
We don't necessarily have to do that, but
it just makes things easier when we come

163
00:11:44.987 --> 00:11:48.633
up on the other side, we're talking
about different types of memory,

164
00:11:48.633 --> 00:11:50.975
it helps to keep the same
view of that memory.

165
00:11:50.975 --> 00:11:56.984
I'm gonna say the memory buffer, which is
the active memory being used right now.

166
00:11:56.984 --> 00:11:59.388
And I'm gonna use document.write, again.

167
00:12:02.867 --> 00:12:09.294
And I'm gonna pull from
the memoryArray at index 1.

168
00:12:12.625 --> 00:12:13.282
All right,

169
00:12:13.282 --> 00:12:17.375
one of the benefits of an unsigned
8array it's an array like structure.

170
00:12:17.375 --> 00:12:19.507
So things like indexing and

171
00:12:19.507 --> 00:12:24.800
certain operations like you're
gonna move some things like that.

172
00:12:24.800 --> 00:12:27.639
It's an array like it's
not an array itself, but

173
00:12:27.639 --> 00:12:31.838
it's close enough for our use case, so
we can just access it by the index.

174
00:12:31.838 --> 00:12:37.880
So index 1, this should print 99
if I've done things correctly,

175
00:12:37.880 --> 00:12:43.207
hey, did, all right,
pretty cool, that's pretty cool.

176
00:12:43.207 --> 00:12:48.139
So now we wrote 99 into
the memory at index 1, and

177
00:12:48.139 --> 00:12:52.272
then we're reading it from JavaScript via

178
00:12:52.272 --> 00:12:56.660
the unsigned 8 array and
the memory buffer.

179
00:12:56.660 --> 00:13:00.192
So let's go the other way,
let's write to memory and

180
00:13:00.192 --> 00:13:02.871
see if WebAssembly can use that as well.

181
00:13:02.871 --> 00:13:06.689
So I'm gonna say, just for cleanliness,

182
00:13:06.689 --> 00:13:12.415
I'm gonna say document.writes,
I'm gonna throw in a br tag,

183
00:13:12.415 --> 00:13:16.569
just to make it easier to read,
not critical.

184
00:13:16.569 --> 00:13:24.640
I'm gonna say, Actually do that next,

185
00:13:24.640 --> 00:13:29.267
I'm gonna write to the memory, right?

186
00:13:29.267 --> 00:13:33.018
So, writing to the memory array in
JavaScript is a little bit simpler,

187
00:13:33.018 --> 00:13:35.842
we don't have to give it types or
anything like that.

188
00:13:35.842 --> 00:13:41.150
I'm gonna write at three location 3,
and I'm gonna say,

189
00:13:41.150 --> 00:13:47.963
actually get to all follow my own example,
I'm gonna write 42 int array.

190
00:13:47.963 --> 00:13:52.322
So now we can read from the memory,
so documents.writes, and

191
00:13:52.322 --> 00:13:56.928
we're gonna call that an exported
wizened function read memory,

192
00:13:56.928 --> 00:14:00.396
which reads from whatever
the pointer we pass in.

193
00:14:00.396 --> 00:14:05.609
So, I'm gonna read from index 2,
from the shared array buffer,

194
00:14:06.652 --> 00:14:14.276
And if I've done things correctly,
this should print outs 42, yeah.

195
00:14:14.276 --> 00:14:18.712
So, this seems trivial and
it's just an example, but

196
00:14:18.712 --> 00:14:23.638
what we did was we wrote directly
to memory and WebAssembly.

197
00:14:23.638 --> 00:14:27.642
And then we call that in JavaScript,
that shared memory, and

198
00:14:27.642 --> 00:14:31.030
we read from it and
then we wrote back to the memory and

199
00:14:31.030 --> 00:14:34.264
we made sure that WebAssembly
can call it itself.

200
00:14:34.264 --> 00:14:38.872
So in this way, we pass things back and
forth, we pass data back and forth and

201
00:14:38.872 --> 00:14:43.698
this is the primary way of communicating
between WebAssembly and JavaScript.

202
00:14:43.698 --> 00:14:46.442
Is just through this
shared array buffer and

203
00:14:46.442 --> 00:14:49.046
writing to the memory locations at once.

204
00:14:49.046 --> 00:14:53.702
Now, you see the complexity in doing
something like this get to keep track of

205
00:14:53.702 --> 00:14:58.386
indexes and the pointer says index, and
what type of memory is being saved.

206
00:14:58.386 --> 00:14:59.461
Is it an unsigned integer?

207
00:14:59.461 --> 00:15:00.423
Is it a 32 bit integer?

208
00:15:00.423 --> 00:15:02.851
Things like that.

209
00:15:02.851 --> 00:15:07.139
Which is why, as I said earlier, one of
the struggles with creating this course

210
00:15:07.139 --> 00:15:09.187
was creating simple enough content or

211
00:15:09.187 --> 00:15:12.524
simple enough examples that it
didn't get too complicated.

212
00:15:12.524 --> 00:15:17.564
Cuz the really build up really performance
and applications that really showcased

213
00:15:17.564 --> 00:15:22.172
WebAssembly would get incredibly complex,
because of all this reading and

214
00:15:22.172 --> 00:15:26.708
writing to memory, and I didn't really
wanna spend too much time on that.

