WEBVTT

1
00:00:00.000 --> 00:00:01.530
We understand how to read Hex.

2
00:00:03.550 --> 00:00:04.990
We can convert it easily.

3
00:00:04.990 --> 00:00:06.680
I know, I'm sorry, I tricked you.

4
00:00:06.680 --> 00:00:09.380
I made you go through the exercise where
you're probably writing it down by hand.

5
00:00:09.380 --> 00:00:14.000
We can do this using programming because
we're programmers, that's what we do.

6
00:00:14.000 --> 00:00:14.640
We're lazy.

7
00:00:14.640 --> 00:00:16.490
We don't wanna have to memorize
how to convert things.

8
00:00:17.830 --> 00:00:23.802
And we can do this with totally
underrated toString method in JavaScript,

9
00:00:23.802 --> 00:00:26.870
we do this in the browser.

10
00:00:26.870 --> 00:00:31.548
What most people don't know, and
honestly I didn't know for a long time,

11
00:00:31.548 --> 00:00:35.869
was that if we use object prototype
toString, we can pass it a radix.

12
00:00:35.869 --> 00:00:38.770
And the radix, just think of it as base.

13
00:00:38.770 --> 00:00:40.675
The radix is like a fancy
term of saying base.

14
00:00:40.675 --> 00:00:45.416
And we understood from before that base 2,
base 10, base 16, that's what it means.

15
00:00:45.416 --> 00:00:48.334
We can pass the radix to the toString and

16
00:00:48.334 --> 00:00:53.610
JavaScript will convert that
into whatever format we want.

17
00:00:53.610 --> 00:00:59.134
So, there's an exercise here, but
I'll do the first one for you.

18
00:00:59.134 --> 00:01:00.200
Or we'll go through the first one.

19
00:01:02.430 --> 00:01:05.653
So if we want to run a function
that converts hex to decimal.

20
00:01:05.653 --> 00:01:09.254
And decimal being our modern number
system that we all know and love,

21
00:01:09.254 --> 00:01:12.400
we can just create a function
called hexadecimal.

22
00:01:12.400 --> 00:01:14.062
It's gonna take a hex in, and

23
00:01:14.062 --> 00:01:17.730
then we're gonna pass it to
the toString method with a base 10.

24
00:01:17.730 --> 00:01:21.690
And actually, let's fire that up.

25
00:01:21.690 --> 00:01:24.410
Let's see if if I'm lying or not.

26
00:01:25.700 --> 00:01:27.160
You never know.

27
00:01:27.160 --> 00:01:30.410
I'm just gonna copy it, cuz, lazy,
I think I've mentioned that before.

28
00:01:31.430 --> 00:01:39.960
And what was the number we
just did text to decimal?

29
00:01:39.960 --> 00:01:43.359
What are we trying to convert it was,
&gt;&gt; 2f7.

30
00:01:43.359 --> 00:01:45.110
&gt;&gt; 2f7, thank you.

31
00:01:45.110 --> 00:01:49.988
So we can't just write 2f7, we have to
tell JavaScript that this is hex and

32
00:01:49.988 --> 00:01:52.740
not just a random miss type string.

33
00:01:52.740 --> 00:01:57.965
So we're gonna say 0x, which means it's

34
00:01:57.965 --> 00:02:03.930
a hexadecimal number,
and 2f7 I did it wrong.

35
00:02:07.778 --> 00:02:10.220
0, there we go.

36
00:02:10.220 --> 00:02:11.780
I typed an O instead of a 0.

37
00:02:11.780 --> 00:02:13.960
It's a common mistake I make.

38
00:02:13.960 --> 00:02:17.084
So we see that converts to a 759.

39
00:02:17.084 --> 00:02:18.980
I don't think it's 2x7, was it?

40
00:02:18.980 --> 00:02:20.907
&gt;&gt; I must have said the wrong number.

41
00:02:20.907 --> 00:02:22.107
&gt;&gt; 2e7,
&gt;&gt; Sorry.

42
00:02:22.107 --> 00:02:23.511
&gt;&gt; Trying to make me look bad.

43
00:02:23.511 --> 00:02:26.223
&gt;&gt; [INAUDIBLE] [LAUGH]
&gt;&gt; [LAUGH] I was like,

44
00:02:26.223 --> 00:02:28.929
did I get my math wrong,
which happens a lot.

45
00:02:28.929 --> 00:02:31.980
743, so that's easy.

46
00:02:31.980 --> 00:02:36.072
Now in the future you can write your own
utility methods if you really wanna nerd

47
00:02:36.072 --> 00:02:39.052
out, which I encourage you to
do at maximum nerd volume.

48
00:02:39.052 --> 00:02:42.198
You can write your own methods
convert to and from different formats.

49
00:02:42.198 --> 00:02:49.215
So, without cheating, write a function
that converts decimal into binary.

50
00:02:49.215 --> 00:02:53.705
And to me this is really gets really
interesting cuz you actually see

51
00:02:53.705 --> 00:02:56.780
what numbers represent in 0s and 1s.

52
00:02:56.780 --> 00:03:01.574
And I should mention for the exercises,
yeah, you can copy paste code,

53
00:03:01.574 --> 00:03:06.052
but in all of my years of learning,
I have discovered that I learn and

54
00:03:06.052 --> 00:03:10.530
I think most people learn when
they actually write it down.

55
00:03:10.530 --> 00:03:15.721
There's something about
the muscle brain connection,

56
00:03:15.721 --> 00:03:21.027
I forget what it's called in
actually like kinesiology.

57
00:03:21.027 --> 00:03:24.865
But there's something about your muscles
doing something, your fingers doing

58
00:03:24.865 --> 00:03:28.704
something, and your brain comprehending
that, that makes it stick more than if

59
00:03:28.704 --> 00:03:32.700
you just copy and pasted like yeah,
that was pretty simple, I did it.

60
00:03:32.700 --> 00:03:35.693
But I really encourage you to
actually do the exercises and

61
00:03:35.693 --> 00:03:38.560
not just copy paste them or look at them.

62
00:03:38.560 --> 00:03:40.826
I promise it's seems like the hard way,
but

63
00:03:40.826 --> 00:03:44.380
you will learn a lot better
when you code it yourself.

64
00:03:44.380 --> 00:03:46.535
Yeah, it's the same principle as before,

65
00:03:46.535 --> 00:03:50.410
we're just passing a different
radix to the toString method.

66
00:03:50.410 --> 00:03:55.880
So, I'm not gonna take my own advice and
copy paste.

67
00:03:55.880 --> 00:04:01.410
So we'll say decimal to binary,
and I wanna see what's 22 is.

68
00:04:01.410 --> 00:04:06.659
And binary, and it's 0110.

69
00:04:06.659 --> 00:04:10.650
Actually, there are a bunch more
leading zeros, but because they're not

70
00:04:10.650 --> 00:04:15.033
terribly relevant and just makes it harder
to read, JavaScript just cuts us off.

