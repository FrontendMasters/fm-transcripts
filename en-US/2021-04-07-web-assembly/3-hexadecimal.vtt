WEBVTT

1
00:00:00.280 --> 00:00:03.637
Who here has ever heard the phrase,
machine code?

2
00:00:06.797 --> 00:00:11.329
Yeah me, when you think of machine code,
what do you think of?

3
00:00:11.329 --> 00:00:15.070
You think of that binary ones and
zeros, right?

4
00:00:15.070 --> 00:00:19.804
And that's technically correct,
the best kind of correct, but

5
00:00:19.804 --> 00:00:24.452
generally when the low level
program is referred to machine code

6
00:00:24.452 --> 00:00:28.254
,we're describing what's
called hexadecimal.

7
00:00:28.254 --> 00:00:31.742
And if you thought reading
binary was tricky,

8
00:00:31.742 --> 00:00:36.043
I got some bad news for you,
it gets a little more tricky.

9
00:00:36.043 --> 00:00:40.950
But essentially,
hex is the lowest form of computing we can

10
00:00:40.950 --> 00:00:43.907
do when we talk about machine code.

11
00:00:43.907 --> 00:00:47.165
We can't read ones and zeros,
it just wouldn't make any sense,

12
00:00:47.165 --> 00:00:49.180
we wouldn't know where the breaks are,

13
00:00:49.180 --> 00:00:53.310
we wouldn't know if we're talking about
an 8 bit integer or a 16 bit integer.

14
00:00:53.310 --> 00:00:56.010
We don't know if it's signed or
unsigned things like that.

15
00:00:56.010 --> 00:00:59.926
So we use hex,
hex is an abbreviated form of binary and

16
00:00:59.926 --> 00:01:02.893
we can actually convert back and forth.

17
00:01:02.893 --> 00:01:07.243
Just hex is a human readable format,
and I'm putting air quotes on

18
00:01:07.243 --> 00:01:11.828
readable because you'll see it may
not seem reasonable at first, but

19
00:01:11.828 --> 00:01:16.956
once you understand how to decode hex,
you'll be like, so actually computer

20
00:01:16.956 --> 00:01:22.194
instructions are just numbers that you
call and those perform some operation?

21
00:01:22.194 --> 00:01:25.647
Yeah, and those numbers
are actually just ones and zeros?

22
00:01:25.647 --> 00:01:28.120
Yeah, that's how computers work.

23
00:01:28.120 --> 00:01:29.710
Which is like super fascinating.

24
00:01:29.710 --> 00:01:33.913
We rarely get a chance to go this deep,
but you have to today cuz you're stuck

25
00:01:33.913 --> 00:01:38.330
here with me, so I appreciate that and
let me and letting me nerd out about this.

26
00:01:39.890 --> 00:01:42.627
So I've said before hexadecimal,

27
00:01:42.627 --> 00:01:49.470
it's an intermediate step between binary
and sort of high level programming.

28
00:01:49.470 --> 00:01:54.460
It's, concise enough for machines serene,
so it's very short, it's very abbreviated.

29
00:01:54.460 --> 00:01:57.362
It's generally only,
we'll say 3 characters or

30
00:01:57.362 --> 00:02:00.610
so sometimes 2, sometimes more,
but usually 2 or 3.

31
00:02:01.900 --> 00:02:05.460
So it's very fast to read if
you know what you're doing.

32
00:02:05.460 --> 00:02:07.510
So it's good for machines and
it's good for humans.

33
00:02:07.510 --> 00:02:11.635
It's kinda the in between stuff because,
like we said, writing ones and

34
00:02:11.635 --> 00:02:14.410
zeros just isn't that practical.

35
00:02:14.410 --> 00:02:18.613
And I wanna note here before you get
intimidated and you close your laptop and

36
00:02:18.613 --> 00:02:22.553
say screw Jams, your friend and
masters, this is not relevant at all,

37
00:02:22.553 --> 00:02:26.280
I don't need you to memorize
how to read hexadecimal.

38
00:02:26.280 --> 00:02:28.847
I don't think necessarily that's
gonna make you a better engineer,

39
00:02:28.847 --> 00:02:31.710
and that's all I wanted the other
day to make you a better engineer.

40
00:02:31.710 --> 00:02:35.656
All right, but I think it's important
to know how it is or how it works and

41
00:02:35.656 --> 00:02:40.054
how to read it, just at a super high level
so that when you see it in the future, and

42
00:02:40.054 --> 00:02:42.870
you will if you're dealing web assembly.

43
00:02:42.870 --> 00:02:47.765
That you're like, okay I don't know
what 0X27 means, but I know how to

44
00:02:47.765 --> 00:02:52.505
convert that and I know generally,
what that means because I know that,

45
00:02:52.505 --> 00:02:56.260
that's actually a number in
his calling instructions.

46
00:02:58.250 --> 00:03:05.360
When we think about hex, we said binary
is base 2, so that's a 100 zero.

47
00:03:05.360 --> 00:03:09.450
Our current number system is decimal base,
so that's zero through 9.

48
00:03:10.490 --> 00:03:16.760
hexadecimal is base 16, so
that means it goes 1, 16, 256, 512, etc.

49
00:03:16.760 --> 00:03:23.632
And this is the part, I think,
cuz I tried to learn hexidecimal for

50
00:03:23.632 --> 00:03:28.930
years and I always give up,
I give up really early.

51
00:03:28.930 --> 00:03:33.262
So I'm teaching you how I learned it,
actually, fairly recently I would say.

52
00:03:33.262 --> 00:03:36.787
Just because I had to know I got so
frustrated with that building

53
00:03:36.787 --> 00:03:41.310
something and I'm an engineer and I've
been an engineer for many years now, and

54
00:03:41.310 --> 00:03:44.390
there's parts that I don't know,
so I try to dive in.

55
00:03:45.440 --> 00:03:48.663
So the part that is gonna throw you,

56
00:03:48.663 --> 00:03:54.980
is that hex uses the letters
A through F to represent numbers.

57
00:03:54.980 --> 00:03:57.360
And that's where it looks confusing.

58
00:03:57.360 --> 00:04:04.031
So when you see something like 0X2E7,
and you're like, what?

59
00:04:04.031 --> 00:04:06.720
Is that programming?

60
00:04:06.720 --> 00:04:08.610
What are we even doing here?

61
00:04:08.610 --> 00:04:14.270
Know that the letter E stands for 14.

62
00:04:14.270 --> 00:04:18.860
So now you can think of like,
that's 214 and a 7.

63
00:04:19.860 --> 00:04:21.338
And it's written that way so

64
00:04:21.338 --> 00:04:24.920
we can get all the way up to basic
scene without repeating ourselves.

65
00:04:25.970 --> 00:04:28.219
Now converting it is a little tricky,

66
00:04:28.219 --> 00:04:32.210
that's why I have this handy
image here to help you process.

67
00:04:32.210 --> 00:04:36.750
So two 2E7 is equivalent
to the number 743.

68
00:04:36.750 --> 00:04:39.230
And we got that through math, up but

69
00:04:39.230 --> 00:04:45.290
all we're doing is multiplying the value
of the number against that position.

70
00:04:45.290 --> 00:04:51.760
So in this, in our instance or example of
2E7, the 2 is at the leftmost position.

71
00:04:51.760 --> 00:04:59.308
So that represents 256 multiplied by 2
plus 16 because the next position is 16,

72
00:04:59.308 --> 00:05:05.432
that's E, and E represents 14 times 7,
that's how we get 743.

73
00:05:05.432 --> 00:05:10.180
Are you confused, a little bit, no?

74
00:05:10.180 --> 00:05:12.050
I see head saying no, you got it.

75
00:05:13.170 --> 00:05:18.029
All right, I know,
intuitively you look at it and

76
00:05:18.029 --> 00:05:21.590
doesn't really make sense.

77
00:05:21.590 --> 00:05:25.528
But once you remember that it's base
16 and that letters represent a number,

78
00:05:25.528 --> 00:05:28.410
we see that actually
this is just a number.

79
00:05:28.410 --> 00:05:32.399
And actually all of the computer
instructions generally that

80
00:05:32.399 --> 00:05:37.750
we read are going to be in hex, and
computer structures are just numbers.

81
00:05:37.750 --> 00:05:42.790
So we can't manually call, say add,
we can't manually add two numbers,

82
00:05:42.790 --> 00:05:47.271
but we call an instruction like 0X2D,
which points to a number,

83
00:05:47.271 --> 00:05:51.790
which actually represents
an instruction on machine level code.

84
00:05:51.790 --> 00:05:55.260
And that's why it's called
machine level code.

85
00:05:55.260 --> 00:06:02.590
So we're going down, we're getting
in there, it's getting gnarly.

86
00:06:02.590 --> 00:06:05.214
Okay, so just a quick exercise just so
you know,

87
00:06:05.214 --> 00:06:09.630
because I really want you to kind of grasp
this concept, because hex is one of those

88
00:06:09.630 --> 00:06:13.290
things that programmers look at and
they just walk away and give up.

89
00:06:14.680 --> 00:06:19.930
We'll do a quick exercise,
what does 1F7 equal in numbers?

90
00:06:21.640 --> 00:06:26.260
So, 1F7, I'll give you a minute.

91
00:06:26.260 --> 00:06:33.152
And remember, here's our handy handy
table of, we know that F equals 15,

92
00:06:33.152 --> 00:06:39.089
and we know that 1 is in 256 place
is in the value it represents,

93
00:06:39.089 --> 00:06:46.680
and while you're thinking of that,
check out this site, it's by the BBC.

94
00:06:46.680 --> 00:06:50.944
I don't know why, but I happened
to come across this, and honestly,

95
00:06:50.944 --> 00:06:55.573
it is one of the easiest sites I've
seen for how to understand hexadecimal,

96
00:06:55.573 --> 00:07:01.260
how to convert from that to binary and
how that works on our decimal base system.

97
00:07:01.260 --> 00:07:05.266
So shout out to the BBC, who knew?

98
00:07:05.266 --> 00:07:08.890
And, all right,
anybody have the answer yet?

99
00:07:08.890 --> 00:07:12.480
I see a hand in our chat, go ahead.

100
00:07:14.010 --> 00:07:18.272
&gt;&gt; So just the question, so
the hex number is in itself,

101
00:07:18.272 --> 00:07:22.420
the instructions to recreate a number?

102
00:07:22.420 --> 00:07:27.406
&gt;&gt; Yes, well actually this converts
down to binary where we think of it in

103
00:07:27.406 --> 00:07:32.640
terms of numbers because that makes
sense to us at a cognitive level.

104
00:07:32.640 --> 00:07:36.340
But actually this converts
down into ones and zeros.

105
00:07:36.340 --> 00:07:41.479
But when I say number, it's always
a representation of the ones and

106
00:07:41.479 --> 00:07:47.860
zeros, it's just, I can't say
000001 means 1 in actual computing.

107
00:07:47.860 --> 00:07:51.897
So we say, 001 in terms of hex or

108
00:07:51.897 --> 00:07:58.466
we just say the number 1,
I know it's a little tricky.

109
00:07:58.466 --> 00:08:04.960
But this really, for me this clarifies
things for me learning assembly.

110
00:08:04.960 --> 00:08:07.284
This clarified how to
think about computing and

111
00:08:07.284 --> 00:08:09.500
that everything is just
a number at the core.

112
00:08:09.500 --> 00:08:13.530
There's no strings, there's no objects,
there's no struts, it's just a number.

113
00:08:13.530 --> 00:08:17.156
And those numbers represent
an actual binary bit of code,

114
00:08:17.156 --> 00:08:20.199
which represents a machine
level instruction.

115
00:08:23.140 --> 00:08:26.910
Yeah, I see people still nodding
haven't lost yet, thank goodness.

116
00:08:26.910 --> 00:08:31.899
&gt;&gt; What is the problem with
the decimal system instead of using

117
00:08:31.899 --> 00:08:34.701
hexadecimal can we use this one?

118
00:08:34.701 --> 00:08:38.455
&gt;&gt; So,
I hate asking rhetorical questions but

119
00:08:38.455 --> 00:08:43.330
at a low level,
how would we represent a decimal number?

120
00:08:45.200 --> 00:08:48.370
We would do it with binary.

121
00:08:48.370 --> 00:08:50.761
But because a decimal number has a points,

122
00:08:50.761 --> 00:08:54.010
it's actually known as
a floating point number.

123
00:08:54.010 --> 00:08:55.771
All right, it has a point and

124
00:08:55.771 --> 00:09:00.619
then it has almost an infinite number of
zeros this way on the right hand side and

125
00:09:00.619 --> 00:09:05.200
has an infinite number of zeros and
ones on the left hand side.

126
00:09:05.200 --> 00:09:08.244
So we couldn't really
use a decimal system,

127
00:09:08.244 --> 00:09:12.670
because at the core we still
need representing in binary.

128
00:09:12.670 --> 00:09:16.366
And to get the proper precision
on decimals, we take a very,

129
00:09:16.366 --> 00:09:18.547
very, very, very, long number.

130
00:09:18.547 --> 00:09:22.677
Versus when we use hex,
it's very short, it's very readable and

131
00:09:22.677 --> 00:09:26.530
it converts to a very,
very small binary code.

132
00:09:26.530 --> 00:09:30.252
At the core, we really want computers
to be as fast as possible and

133
00:09:30.252 --> 00:09:34.920
by being as fast as possible that means
processing as small in number as possible,

134
00:09:34.920 --> 00:09:37.850
as few bits as possible to
get our desired outcome.

135
00:09:39.220 --> 00:09:42.280
So remember I said I'm
gonna nerd out a bit more.

136
00:09:43.680 --> 00:09:48.720
Computer CPU is just a bunch of switches,
it's going to [SOUND] Really fast.

137
00:09:48.720 --> 00:09:51.960
I mean, we can't even
comprehend how fast they move.

138
00:09:51.960 --> 00:09:53.042
And what it's doing is,

139
00:09:53.042 --> 00:09:56.460
it's loading information from
what's known as the register.

140
00:09:56.460 --> 00:10:00.288
I didn't put this in the notes
because it's not totally necessary,

141
00:10:00.288 --> 00:10:02.160
but you asked them to nerd out.

142
00:10:02.160 --> 00:10:06.258
It's known as the register, and
the register is just a cache of ones and

143
00:10:06.258 --> 00:10:08.260
zeros at the lowest level.

144
00:10:08.260 --> 00:10:11.219
And what the CPU does is, it grabs
instructions from the register and

145
00:10:11.219 --> 00:10:12.780
grabs data from register.

146
00:10:12.780 --> 00:10:16.403
It performs operations from them, and then
puts them either back in the register or

147
00:10:16.403 --> 00:10:19.353
it sends those out to the larger
computer which gets stored in RAM and

148
00:10:19.353 --> 00:10:21.040
things like that.

149
00:10:21.040 --> 00:10:25.446
But because we can, model processors or
any processor at all,

150
00:10:25.446 --> 00:10:27.950
can only move so much data at once.

151
00:10:27.950 --> 00:10:32.789
It can only go [SOUND], the switches
can only move so fast at a time.

152
00:10:32.789 --> 00:10:38.030
We really want to maximize the amount
of computation we can do per cycle.

153
00:10:38.030 --> 00:10:40.923
And that's what it's called,
is a cycle, is when a computer,

154
00:10:40.923 --> 00:10:44.459
it runs through all the instruction says
give me some more, give me some more,

155
00:10:44.459 --> 00:10:47.700
give me some more and
it just is constantly doing that.

156
00:10:47.700 --> 00:10:51.278
So, we really want this instruction
to be as small as possible so

157
00:10:51.278 --> 00:10:55.550
we can fit as many instructions
per CPU clock cycle as possible.

158
00:10:55.550 --> 00:10:56.210
So in that case,

159
00:10:56.210 --> 00:11:00.050
we wouldn't use floating point number of
decimal because they're just too large.

160
00:11:00.050 --> 00:11:07.738
We can accomplish the same thing at a much
smaller footprint, good question though.

161
00:11:07.738 --> 00:11:12.378
Okay, back to the what does
the numbers represent?

162
00:11:12.378 --> 00:11:17.850
It represents 503, and
we got that by multiplying 256 by 1,

163
00:11:17.850 --> 00:11:21.786
it's in the first position,
F is equal to 15,

164
00:11:21.786 --> 00:11:26.370
multiply that by 16 plus 7, we get 503.

165
00:11:26.370 --> 00:11:32.710
Okay, I know you're like well, I sorta
get it now, I don't see the utility.

166
00:11:32.710 --> 00:11:37.300
Again, this is because you'll probably
come across this as you'll all

167
00:11:37.300 --> 00:11:41.301
be expert web assembly programmers
in the future I'm hoping.

168
00:11:41.301 --> 00:11:46.118
You will come across this because assembly
uses hex to represent most of its

169
00:11:46.118 --> 00:11:50.629
instructions or technically,
if you're decompiling a program as in

170
00:11:50.629 --> 00:11:55.598
reverse engineering, you'll see
the written text, it'll just be a series

171
00:11:55.598 --> 00:12:00.230
of hexadecimal numbers and
it just looks like gibberish to you.

172
00:12:00.230 --> 00:12:01.680
Alright, it looks like
gibberish to most programmers.

173
00:12:01.680 --> 00:12:03.765
But now you see that those
are actually numbers and

174
00:12:03.765 --> 00:12:07.350
those numbers correspond to either actual
numbers or instructions to the computer.

175
00:12:08.760 --> 00:12:10.380
Question in the chat, yes.

176
00:12:10.380 --> 00:12:15.724
&gt;&gt; Why is it, so
it was 116 2026 it's not 1 8 32?

177
00:12:15.724 --> 00:12:20.575
&gt;&gt; Yeah, so
our explanation earlier was that

178
00:12:20.575 --> 00:12:26.100
the base system represents
at a given position,

179
00:12:26.100 --> 00:12:32.190
what are the possible values for
that position?

180
00:12:32.190 --> 00:12:36.781
So base 2 means there's only two
possible combinations, one and zero,

181
00:12:36.781 --> 00:12:40.186
base 10 means zero through 9,
base 16 means there

182
00:12:40.186 --> 00:12:44.350
are 16 possible different numbers for
a possible combination.

183
00:12:44.350 --> 00:12:46.842
So we start off at,
we always start at one,

184
00:12:46.842 --> 00:12:49.360
because we need a one to get odd numbers.

185
00:12:49.360 --> 00:12:52.310
It's funny enough yet,
if we started at just 16,

186
00:12:52.310 --> 00:12:56.950
if we would only have positive numbers
which would make computing a little weird.

187
00:12:58.280 --> 00:13:04.460
So that's why it goes from 16
to 256 instead of 8 and etc.

188
00:13:04.460 --> 00:13:06.710
Why base 16?

189
00:13:06.710 --> 00:13:08.400
Honestly, I don't know,

190
00:13:08.400 --> 00:13:13.320
I would imagine it's to fit the maximum
number of instructions so you wanna have

191
00:13:13.320 --> 00:13:18.242
the widest possible number of possible
characters, without getting too big,

192
00:13:18.242 --> 00:13:22.960
but without getting into 32 bit number or
32 or 64, things like that.

193
00:13:22.960 --> 00:13:27.026
But yeah, I think there are historical
reasons why it's base 16,

194
00:13:27.026 --> 00:13:29.170
I'm not terribly familiar.

195
00:13:29.170 --> 00:13:32.490
I just accept that's how the universe is,
I don't fight against it.

