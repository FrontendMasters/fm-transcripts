WEBVTT

1
00:00:00.202 --> 00:00:03.442
Thing to note, and
because I ran into this issue.

2
00:00:03.442 --> 00:00:06.726
Actually, let me just demonstrate
the issue because you will probably have

3
00:00:06.726 --> 00:00:07.453
the same issue.

4
00:00:07.453 --> 00:00:10.180
So I'm gonna run a very,
very simple server.

5
00:00:10.180 --> 00:00:14.961
I have Python installed, I'm using OSX,
it has Python installed, most people do.

6
00:00:14.961 --> 00:00:16.276
Let me say python-m.

7
00:00:16.276 --> 00:00:22.358
So load the module, I believe, and
I always get this wrong, simpleHTTPserver.

8
00:00:22.358 --> 00:00:23.265
Is it a capital?

9
00:00:23.265 --> 00:00:25.707
Yeah.

10
00:00:25.707 --> 00:00:30.554
Thank you, every single time, I've never
once been able to type that out and

11
00:00:30.554 --> 00:00:31.683
it's so simple.

12
00:00:31.683 --> 00:00:32.546
So let's check this out.

13
00:00:32.546 --> 00:00:34.717
Let's fire up in our browser.

14
00:00:34.717 --> 00:00:39.359
Let's go to local host 8000.

15
00:00:39.359 --> 00:00:42.862
It's not really doing anything, because.

16
00:00:42.862 --> 00:00:45.100
We forgot to create
an actual file to load.

17
00:00:45.100 --> 00:00:49.645
So by default, browsers load index.html,
in case you didn't know that.

18
00:00:49.645 --> 00:00:50.977
So let's create that file, so

19
00:00:50.977 --> 00:00:53.653
you have something to look at
not just directory of our files.

20
00:00:53.653 --> 00:00:55.844
So I'm gonna touch index.html.

21
00:01:01.294 --> 00:01:04.291
Oops, wrong directory.

22
00:01:06.691 --> 00:01:09.604
And we're just gonna create
this in a project root touch.

23
00:01:15.012 --> 00:01:19.588
Okay, I'll jump back to the Python example
because I will make an important point of

24
00:01:19.588 --> 00:01:23.075
something you're probably gonna
run into because I know I did.

25
00:01:23.075 --> 00:01:30.496
But for now, I'm gonna scroll down
the notes, I'm jumping ahead a little bit.

26
00:01:30.496 --> 00:01:36.555
But let's go out here and let's use our
WasmLoader class that we just created.

27
00:01:36.555 --> 00:01:39.495
And we're gonna try to load this function,

28
00:01:39.495 --> 00:01:42.997
and we'll see if it works,
it should work, right?

29
00:01:42.997 --> 00:01:45.516
I'm definitely not making a point here.

30
00:01:45.516 --> 00:01:48.658
But we're gonna need this index.html, and

31
00:01:48.658 --> 00:01:52.964
this is how we're gonna load the file,
the actual Wasm code.

32
00:01:52.964 --> 00:01:57.469
So in index.html, I'm just gonna say html.

33
00:02:00.449 --> 00:02:06.415
We give it a lots of spaces,
we give it a body,

34
00:02:06.415 --> 00:02:10.664
no groundbreaking stuff here.

35
00:02:10.664 --> 00:02:13.363
All right, so let's load that script.

36
00:02:13.363 --> 00:02:15.994
Let's load the script of
the loader we just wrote.

37
00:02:15.994 --> 00:02:20.338
So we're gonna say the src,

38
00:02:20.338 --> 00:02:25.950
the source is /js/loader, cool.

39
00:02:25.950 --> 00:02:27.948
&gt;&gt; Missing an equal sign.

40
00:02:27.948 --> 00:02:29.189
&gt;&gt; Thank you.

41
00:02:31.705 --> 00:02:33.665
And add a quote.

42
00:02:33.665 --> 00:02:36.555
Yeah, thanks.

43
00:02:36.555 --> 00:02:38.930
And let's create a script tag.

44
00:02:38.930 --> 00:02:42.081
That's where we're gonna do,
most of the heavy lifting.

45
00:02:42.081 --> 00:02:46.193
Again, this isn't the most efficient way
of doing it, it's just the simplest way.

46
00:02:46.193 --> 00:02:48.641
And when all else fails,
I prefer the simple way.

47
00:02:48.641 --> 00:02:52.384
And I'm just gonna call that WasmLoader,
We're gonna instantiate our class,

48
00:02:52.384 --> 00:02:54.324
which is loaded on this global scope now.

49
00:02:57.513 --> 00:03:03.986
And then remember what was the name of our
method to install or fetch the wasm file?

50
00:03:03.986 --> 00:03:04.786
Was that Wasm, right?

51
00:03:04.786 --> 00:03:09.245
Yes, WL.wasm.

52
00:03:09.245 --> 00:03:10.684
Then we're gonna give it a path.

53
00:03:10.684 --> 00:03:13.742
The path is the path of
the actual wasm folder and

54
00:03:13.742 --> 00:03:17.273
that's our wasm file that's
in the build directory.

55
00:03:17.273 --> 00:03:23.763
So I'm gonna say /build, and
we're gonna load optimize.wasm for now.

56
00:03:26.810 --> 00:03:29.784
And that is a promise
we can use a wait but

57
00:03:29.784 --> 00:03:35.029
I'm just gonna use standard promise
syntax, I'm gonna save then.

58
00:03:35.029 --> 00:03:38.598
And we got an instance out of it.

59
00:03:38.598 --> 00:03:41.662
From that instance,

60
00:03:41.662 --> 00:03:46.772
we're going to do our magic there.

61
00:03:46.772 --> 00:03:52.104
And the instance in this case is
the exports from our web assembly.

62
00:03:52.104 --> 00:03:59.147
So I'm gonna pull out the function that
we wrote, that was called minusOne.

63
00:03:59.147 --> 00:04:01.206
And that's from the instance.

64
00:04:03.271 --> 00:04:09.184
So at this point, minusOne is
a call into web assembly itself,

65
00:04:09.184 --> 00:04:12.207
and we're gonna run that file.

66
00:04:12.207 --> 00:04:16.109
I'm gonna use document.write.

67
00:04:16.109 --> 00:04:21.317
Again, don't judge me, you generally don't
wanna use document.write for anything.

68
00:04:21.317 --> 00:04:24.893
But in this case, because I don't like
reading console log all the time,

69
00:04:24.893 --> 00:04:27.271
I like to see on page,
call it person semantics.

70
00:04:27.271 --> 00:04:29.232
So I'm gonna use document.write,

71
00:04:29.232 --> 00:04:33.038
your browser's probably throw some
warnings at you, but it's fine.

72
00:04:33.038 --> 00:04:39.057
So I'm gonna say minusOne and
I'll say 44, okay?

73
00:04:40.786 --> 00:04:42.159
Now we can start the server.

74
00:04:42.159 --> 00:04:46.471
And now let's see if we
can load this file up.

75
00:04:48.785 --> 00:04:51.584
And let me switch over.

76
00:04:51.584 --> 00:04:56.111
So we're in local hosts now,
and we're just

77
00:04:56.111 --> 00:05:01.127
gonna open the inspector
to see what's going on.

78
00:05:01.127 --> 00:05:05.851
This is something you will run into
if you're running a basic app.

79
00:05:05.851 --> 00:05:10.548
Because if you could look at the docs,
and you look on MDM, you look at blogs,

80
00:05:10.548 --> 00:05:14.763
everybody is gonna say,
You wanna use instantiate streaming.

81
00:05:14.763 --> 00:05:20.083
It's the fastest, most efficient way
of compiling your web assembly module.

82
00:05:20.083 --> 00:05:25.196
What a lot of people don't tell you
is that instantiate streaming has

83
00:05:25.196 --> 00:05:30.850
to return an application type or
the content header of application/wasm.

84
00:05:30.850 --> 00:05:35.470
Now because we're using a very simple
Python HB server, it will just serve out

85
00:05:35.470 --> 00:05:39.180
files, it has no idea about
application type or content type.

86
00:05:39.180 --> 00:05:43.343
We can't use instantiate streaming at all,
which is kind of frustrating.

87
00:05:43.343 --> 00:05:47.652
So instead of doing that, and
this is why we're gonna run from a server,

88
00:05:47.652 --> 00:05:52.105
we're not just gonna run from the file
system directly is because we need to

89
00:05:52.105 --> 00:05:54.313
serve out the proper response type.

90
00:05:54.313 --> 00:05:57.202
So what we're gonna do,
I'm gonna stop this server.

91
00:05:57.202 --> 00:06:02.638
I'm gonna jump back up,
just let you know where I am.

92
00:06:02.638 --> 00:06:03.898
We're coming back up here.

93
00:06:03.898 --> 00:06:07.964
We're gonna create a server and
we're gonna use Express,

94
00:06:07.964 --> 00:06:11.623
which is awesome because
Express automatically adds

95
00:06:11.623 --> 00:06:15.948
the appropriate header when
you're serving out Wasms files.

96
00:06:15.948 --> 00:06:22.821
So I'm gonna install Express,
so npm i -- save express.

97
00:06:22.821 --> 00:06:25.404
For those who don't know or not familiar,

98
00:06:25.404 --> 00:06:29.228
Express is probably one of the more
popular servers in NodeJS.

99
00:06:29.228 --> 00:06:34.216
It's been around for many years, pretty
mature, lots of organizations use it,

100
00:06:34.216 --> 00:06:36.106
I use it in most of my projects.

101
00:06:36.106 --> 00:06:39.578
So yeah, that's expressed,
you're probably familiar with it.

102
00:06:39.578 --> 00:06:43.023
I'm sure there's a Frontend Masters Course
on Express cuz Frontend Masters

103
00:06:43.023 --> 00:06:45.740
has literally a course on everything,
it's pretty great.

104
00:06:45.740 --> 00:06:49.483
All right, so let's create just a very,
very basic server.

105
00:06:49.483 --> 00:06:52.275
Again, I'm gonna say touchserver.js.

106
00:06:55.000 --> 00:07:02.450
And in my server.js, this is
the simplest server that I can think of.

107
00:07:02.450 --> 00:07:06.050
Shout out if you can create
a even smaller server than this,

108
00:07:06.050 --> 00:07:07.923
I would give you a lot of props.

109
00:07:07.923 --> 00:07:10.643
This is five lines, so it's pretty good.

110
00:07:10.643 --> 00:07:13.619
So I'm gonna say express and
then we're gonna require.

111
00:07:17.206 --> 00:07:22.650
The Express Library in, and
then we get the app from that.

112
00:07:29.594 --> 00:07:34.475
And I wanna make a note that you
should not do this in production code,

113
00:07:34.475 --> 00:07:37.008
this is extremely dangerous to do.

114
00:07:37.008 --> 00:07:40.614
But because this is a learning course,
we're gonna take some shortcuts.

115
00:07:40.614 --> 00:07:44.823
But again, [LAUGH] please if this is
the first course you've ever taken,

116
00:07:44.823 --> 00:07:47.790
you're like,
I learned this from Jim Young,

117
00:07:47.790 --> 00:07:51.876
do not do what we're about to do in
production, because it is unsafe.

118
00:07:51.876 --> 00:07:54.280
So I'm gonna say app.use, and

119
00:07:54.280 --> 00:07:58.833
I'm gonna use the Express
static plugin that is built-in.

120
00:07:58.833 --> 00:08:01.450
And I'm gonna use that.

121
00:08:01.450 --> 00:08:03.602
Oops, go.

122
00:08:03.602 --> 00:08:07.095
And I'm gonna use that to just
serve out our file system.

123
00:08:07.095 --> 00:08:16.359
So, And

124
00:08:16.359 --> 00:08:19.803
then I'm gonna say app.listen,
this will start up the server.

125
00:08:19.803 --> 00:08:24.195
We're gonna listen on port 3000,
it doesn't have to be 3000,

126
00:08:24.195 --> 00:08:27.299
just 3000 is usually
a default in these cases.

127
00:08:27.299 --> 00:08:33.792
And I'm just gonna say console.log that

128
00:08:33.792 --> 00:08:40.108
the server is running on port 3000.

129
00:08:41.691 --> 00:08:46.871
Okay, so what we're doing here
is we just created a very,

130
00:08:46.871 --> 00:08:52.496
very simple server, and
we are serving, sorry, typo there.

131
00:08:53.635 --> 00:08:57.022
We're just serving static
files from the file system.

132
00:08:57.022 --> 00:09:01.266
Now the reason why I said don't do this in
production is because you're now exposing

133
00:09:01.266 --> 00:09:03.019
all of your files to the Internet.

134
00:09:03.019 --> 00:09:06.706
So if you had some sort of secrets,
or I don't know, some configs that

135
00:09:06.706 --> 00:09:10.779
aren't necessarily supposed to be
shared out, you'd be sharing them now.

136
00:09:10.779 --> 00:09:13.855
We're doing this now for the simplicity
of not having to go through pathing and

137
00:09:13.855 --> 00:09:14.606
things like that.

138
00:09:14.606 --> 00:09:17.651
The paths we're gonna fetch from
are just a path from the file system.

139
00:09:17.651 --> 00:09:23.033
But again, do not use this in
production code, is unsafe.

140
00:09:23.033 --> 00:09:28.934
Next, because I am lazy, and I don't wanna
run node, and this is just a faster way.

141
00:09:28.934 --> 00:09:31.535
Let's add a quick script
in our package JSON.

142
00:09:31.535 --> 00:09:37.111
So we're gonna say server,
and then we're gonna

143
00:09:37.111 --> 00:09:42.440
say that is the equivalent
of node server.js.

144
00:09:42.440 --> 00:09:47.219
I know we're not, [LAUGH] we're not
actually saving that many keystrokes by

145
00:09:47.219 --> 00:09:52.683
running npm run server versus node server,
it's just for consistency in my scripts.

146
00:09:52.683 --> 00:09:58.487
So now if I did everything correctly,
I can say npm run server.

147
00:09:58.487 --> 00:10:02.548
Cool, and we should see a server
running up on port 3000.

148
00:10:02.548 --> 00:10:07.351
So let's jump back here to
our local hosts and 3000.

149
00:10:07.351 --> 00:10:09.554
There we go.

150
00:10:09.554 --> 00:10:12.806
And now we're using instantiate streaming,

151
00:10:12.806 --> 00:10:17.150
which means it's fetching and
compiling in streaming form.

152
00:10:17.150 --> 00:10:21.652
So versus instantiate, which instantiate
has to import the entire file,

153
00:10:21.652 --> 00:10:24.867
convert it into a byte array and
into an array buffer,

154
00:10:24.867 --> 00:10:27.806
and then you can actually
instantiate the code.

155
00:10:27.806 --> 00:10:30.896
Versus doing it this way,
it's gonna be much faster.

156
00:10:30.896 --> 00:10:31.611
In our case,

157
00:10:31.611 --> 00:10:35.645
it doesn't make too much difference
because the file we're serving is so

158
00:10:35.645 --> 00:10:39.954
small, but Wasm that files are very large
because they have a lot of glue code.

159
00:10:39.954 --> 00:10:42.122
They do a lot of complex operations.

160
00:10:42.122 --> 00:10:44.509
So you want that to load
as quickly as possible,

161
00:10:44.509 --> 00:10:47.622
so you want to use instantiate
streaming wherever possible.

162
00:10:47.622 --> 00:10:51.949
Again, the caveat is you have to serve
it out with a server that understands

163
00:10:51.949 --> 00:10:55.054
the application type,
otherwise, it won't work.

164
00:10:55.054 --> 00:11:00.334
And just because I like to be on
the same level, if we look in here,

165
00:11:00.334 --> 00:11:06.194
I'm gonna restart the page,
we can see it's fetching, and we see the,

166
00:11:11.026 --> 00:11:15.538
And the response header,
the content type is application/wasm.

167
00:11:15.538 --> 00:11:18.539
Just you know, we're on the same page.

