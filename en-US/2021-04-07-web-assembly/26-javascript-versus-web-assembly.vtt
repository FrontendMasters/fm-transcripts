WEBVTT

1
00:00:00.260 --> 00:00:02.920
So you've made it,
you've written Web Assembly.

2
00:00:02.920 --> 00:00:06.850
You've written assembly scripts,
you've written directly to memory.

3
00:00:06.850 --> 00:00:11.730
You've read from memory, you've done
things that most JavaScript engineers will

4
00:00:11.730 --> 00:00:14.440
never do or
never have the opportunity to do.

5
00:00:14.440 --> 00:00:19.669
And if you take away nothing else
you've now understand at a very very

6
00:00:19.669 --> 00:00:24.912
low level how computers and
programming works which is pretty cool.

7
00:00:24.912 --> 00:00:27.862
I believe there's no such thing as
bad knowledge to have it all comes

8
00:00:27.862 --> 00:00:30.410
together to make you a better engineer.

9
00:00:30.410 --> 00:00:33.724
But you know what's gonna happen
is I eventually you're gonna

10
00:00:33.724 --> 00:00:36.412
go back to the office,
you're gonna be like yeah,

11
00:00:36.412 --> 00:00:40.365
I took this course on introduction to
Web Assembly and I don't wanna brag.

12
00:00:40.365 --> 00:00:45.305
But I can write Assembly now, I'm pretty
good and then someone's gonna be like,

13
00:00:45.305 --> 00:00:50.330
well, actually and then they're gonna say,
why don't you use JavaScript's?

14
00:00:50.330 --> 00:00:54.520
And you'll be like, well, last one
was faster or you'll say some reason.

15
00:00:54.520 --> 00:01:00.444
And I want to like address that because
it's the biggest point of contention

16
00:01:00.444 --> 00:01:05.950
between when people talk about
Web Assembly is, which one is faster?

17
00:01:05.950 --> 00:01:07.610
Is it JavaScript or Web Assembly?

18
00:01:08.730 --> 00:01:12.900
And I haven't obviously I know the answer
to this, but I'm gonna go ahead and

19
00:01:12.900 --> 00:01:16.640
write an example and I took the this
function we're writing a prime.

20
00:01:17.810 --> 00:01:21.450
Checking if a number is
prime pretty basic example.

21
00:01:21.450 --> 00:01:24.574
I took this from this log rocket post
which is actually pretty useful.

22
00:01:24.574 --> 00:01:27.781
It covers a lot of things we talk about.

23
00:01:27.781 --> 00:01:29.366
But I just, if I take source code or

24
00:01:29.366 --> 00:01:33.400
I take code from somewhere I like to
attribute it and not just like steal it.

25
00:01:33.400 --> 00:01:35.500
Sorry, not steal internet borrow.

26
00:01:37.630 --> 00:01:41.178
So I wrote for this case,
I'm just gonna copy and

27
00:01:41.178 --> 00:01:45.950
paste cuz we we're not gonna learn
anything by me writing it out.

28
00:01:45.950 --> 00:01:49.831
I know I said don't do that, but
it's my course and I do what I want.

29
00:01:49.831 --> 00:01:53.450
[LAUGH] I'm just gonna paste that
in there and I'm gonna compile it.

30
00:01:54.600 --> 00:01:56.672
This is just checking
if a number is prime,

31
00:01:56.672 --> 00:02:00.200
it's something you've probably all
seen before it's nothing fancy.

32
00:02:01.390 --> 00:02:04.879
Just for the sake of example and
then in my index dot HTML,

33
00:02:04.879 --> 00:02:09.909
I'm just gonna copy all of this and then
I'll explain what exactly we're doing.

34
00:02:09.909 --> 00:02:13.660
Because what we really want to do
is figure out which one is faster.

35
00:02:14.910 --> 00:02:18.006
So copy, copy, copy, copy, copy, copy.

36
00:02:21.228 --> 00:02:22.403
Come back.

37
00:02:22.403 --> 00:02:24.178
And in my index HTML.

38
00:02:27.099 --> 00:02:31.465
And I can delete this other stuff,
there we go.

39
00:02:31.465 --> 00:02:38.240
If you wanna follow along you can do this,
it's an exercise seven of the repo.

40
00:02:38.240 --> 00:02:42.083
I've wiped away most of stuff, but
if you sorta wanna run this on your own,

41
00:02:42.083 --> 00:02:44.282
play around, it's all there available.

42
00:02:44.282 --> 00:02:46.786
And I'm gonna build as we
do hopefully it builds.

43
00:02:51.413 --> 00:02:55.851
So what we did was we created this
checking is prime when we wrote this in

44
00:02:55.851 --> 00:02:59.630
assembly scripts, and
it just checks if a number is prime.

45
00:03:00.730 --> 00:03:03.604
And then we took that same code and
we wrote it in JavaScripts,

46
00:03:03.604 --> 00:03:05.833
which in this case is
pretty straightforward.

47
00:03:05.833 --> 00:03:08.060
It looks identical just it
doesn't have the types.

48
00:03:10.160 --> 00:03:14.386
So now, let's check out which is faster.

49
00:03:14.386 --> 00:03:17.450
Okay, so I have an input box.

50
00:03:17.450 --> 00:03:23.790
So if I type in a number,
it's gonna check, which one is faster?

51
00:03:25.190 --> 00:03:27.760
And I'm outputting this to the console
may make that a little bigger.

52
00:03:30.070 --> 00:03:34.192
And what we're doing is we're
running the sample 1000 times,

53
00:03:34.192 --> 00:03:36.560
actually a pretty low sample.

54
00:03:36.560 --> 00:03:40.340
So I'm using performance now to get
as close to precision as I can.

55
00:03:40.340 --> 00:03:44.402
I'm calling the Web Assembly function,
checking if this number is prime and

56
00:03:44.402 --> 00:03:46.650
then I'm outputting the time.

57
00:03:46.650 --> 00:03:48.942
And then I'm doing the same thing
with a JavaScript function and

58
00:03:48.942 --> 00:03:52.310
then I'm outputting the time and
we're doing this 1000 times.

59
00:03:52.310 --> 00:03:55.732
I then take the results of that and
I reduce it down to an array where if

60
00:03:55.732 --> 00:03:59.200
JavaScript is faster,
I increment the JavaScript counter.

61
00:03:59.200 --> 00:04:01.200
If Wasm is faster, increment the Wasm.

62
00:04:02.780 --> 00:04:07.694
I increase the Wasm wide array and
then I'll put that data into a table.

63
00:04:07.694 --> 00:04:12.881
In case you all didn't know,
console that table, it's really nice.

64
00:04:12.881 --> 00:04:14.250
It's pretty look at this.

65
00:04:14.250 --> 00:04:19.335
So these are the results of 1000
iterations on that is prime.

66
00:04:19.335 --> 00:04:20.203
This is not rigorous.

67
00:04:20.203 --> 00:04:21.191
This is not comprehensive.

68
00:04:21.191 --> 00:04:25.580
This isn't something that you're
like I've proved anything.

69
00:04:25.580 --> 00:04:29.459
This is just an example and because under
the hood there are a lot of optimizations

70
00:04:29.459 --> 00:04:31.580
that compilers are doing things like that.

71
00:04:31.580 --> 00:04:33.930
It's not a good one, one comparison.

72
00:04:33.930 --> 00:04:37.180
This is just for example,
I try to make that very very clear.

73
00:04:37.180 --> 00:04:42.276
So, in this case,
it turns out that Wasm was faster in 1000

74
00:04:42.276 --> 00:04:47.390
iterations was faster 868
times than JavaScript.

75
00:04:47.390 --> 00:04:48.530
What about a larger number?

76
00:04:50.240 --> 00:04:54.837
Wasm is still faster
875 against 125 larger,

77
00:04:54.837 --> 00:04:59.120
larger, larger, larger and
we probably hit a,

78
00:04:59.120 --> 00:05:04.039
actually, at this point
we've locked up JavaScript.

79
00:05:04.039 --> 00:05:06.990
We looked at the page because
JavaScript runs in the UI thread so

80
00:05:06.990 --> 00:05:08.790
we can't update anymore.

81
00:05:08.790 --> 00:05:15.385
But this is just a toy example, to say
that, is JavaScript faster than Wasm?

82
00:05:15.385 --> 00:05:16.750
It depends.

83
00:05:16.750 --> 00:05:18.820
It really depends on what you're doing.

84
00:05:18.820 --> 00:05:20.788
There is an inherent costs,

85
00:05:20.788 --> 00:05:25.879
there's a performance overhead costs
of reading and writing to memory.

86
00:05:25.879 --> 00:05:28.863
Because remember, that's the only way
we can actually communicate with Wasm

87
00:05:28.863 --> 00:05:31.450
is doing it through the memory
buffer that's shared array buffer.

88
00:05:31.450 --> 00:05:34.070
And there is a cost to going back and
forth doing that.

89
00:05:35.080 --> 00:05:39.658
So in general, if you have really
heavy computations that are writing

90
00:05:39.658 --> 00:05:42.540
directly to memory Wasm
is gonna be faster.

91
00:05:42.540 --> 00:05:46.630
It can be in some benchmarks
up to 20 times faster.

92
00:05:46.630 --> 00:05:50.796
But remember, if you're doing
stuff with strings or objects or

93
00:05:50.796 --> 00:05:53.884
giant arrays or
complicated data structures,

94
00:05:53.884 --> 00:05:58.380
my personal recommendation
is to stick with JavaScript.

95
00:05:58.380 --> 00:06:01.350
The abstractions and
the garbage collection and

96
00:06:01.350 --> 00:06:05.850
not having to allocate memory makes
working in JavaScript much simpler.

97
00:06:05.850 --> 00:06:08.180
I would use a web worker for
a lot of things.

98
00:06:08.180 --> 00:06:12.298
However, if you have a game where
you're actually writing pixels or

99
00:06:12.298 --> 00:06:17.055
you're writing points on a graph and
you're writing directly in the memory and

100
00:06:17.055 --> 00:06:21.620
you have a heavy computations, do I
would use Wasm or I'd use Web Assembly.

101
00:06:21.620 --> 00:06:24.030
It's gonna be a superior
platform in this case.

102
00:06:24.030 --> 00:06:27.572
Or if you have something with image
decoding or video decoding or

103
00:06:27.572 --> 00:06:30.787
anything like that,
anything when you're manipulating

104
00:06:30.787 --> 00:06:35.140
bytes directly from the source, I would
always use Web Assembly if possible.

105
00:06:36.150 --> 00:06:40.127
So that was a completely contrived example
to say JavaScript is not necessarily

106
00:06:40.127 --> 00:06:41.088
faster than Wasm.

107
00:06:41.088 --> 00:06:46.097
They both have their use cases and it's
important to understand when to use them.

108
00:06:46.097 --> 00:06:53.051
What's the famous saying from Fast and
the Furious three, Tokyo Drift?

109
00:06:53.051 --> 00:06:55.142
No, no, yeah.

110
00:06:55.142 --> 00:06:57.657
That I'm confusing my metaphors but

111
00:06:57.657 --> 00:07:02.535
it's the one when all you have is
a hammer everything looks like a nail.

112
00:07:02.535 --> 00:07:06.549
That's the same thing when if, when people
leave this course I don't wanna be like,

113
00:07:06.549 --> 00:07:09.710
I'm gonna rewrite
everything in Web Assembly.

114
00:07:09.710 --> 00:07:13.140
Well, no, that's not necessarily
the best course of action.

115
00:07:13.140 --> 00:07:17.989
What I really want you to do is
think carefully about the pros and

116
00:07:17.989 --> 00:07:21.572
cons and
the trade offs you're working with.

117
00:07:21.572 --> 00:07:25.910
And you're saying, well, okay,
but what if I use the web worker?

118
00:07:25.910 --> 00:07:28.630
A web worker is kind of the same idea,
right?

119
00:07:28.630 --> 00:07:31.520
It's a different process,
it's a different thread.

120
00:07:31.520 --> 00:07:36.200
It's not gonna lock up the UI thread
which this page is still locked up.

121
00:07:36.200 --> 00:07:38.710
And I can do sort of the same
thing as Web Assembly.

122
00:07:38.710 --> 00:07:39.520
Why would I not use that?

123
00:07:41.330 --> 00:07:46.766
I mentioned earlier, but
Web Assembly can be cached.

124
00:07:46.766 --> 00:07:51.260
You can fetch that instantiate that and
cache that into memory on the browser.

125
00:07:51.260 --> 00:07:53.700
A web worker, you can't do that.

126
00:07:53.700 --> 00:07:57.320
It inherently has a high memory cost and
a high startup time.

127
00:07:57.320 --> 00:08:00.423
And the only way to communicate
with a with a web worker is yet

128
00:08:00.423 --> 00:08:02.510
to use post message.

129
00:08:02.510 --> 00:08:06.760
And post message is an inefficient way of
communicating between threads because it

130
00:08:06.760 --> 00:08:10.340
takes the data you're trying
to pass it serializes that.

131
00:08:10.340 --> 00:08:12.950
Then it gets to serialize and then,
it keeps doing that back and forth.

132
00:08:12.950 --> 00:08:17.690
And that's just not terribly efficient,
there is a use case for web workers.

133
00:08:17.690 --> 00:08:22.659
And that's when you need to do complex
calculations, involving say, objects or

134
00:08:22.659 --> 00:08:25.550
something, or complicated data structures.

135
00:08:26.560 --> 00:08:30.890
I would use web workers for
those, but they're all three.

136
00:08:30.890 --> 00:08:33.659
They're all different parts
of the same equation and

137
00:08:33.659 --> 00:08:35.830
that's working in the browser.

138
00:08:35.830 --> 00:08:38.288
There is no one case where I'd say, yeah,

139
00:08:38.288 --> 00:08:41.100
you should definitely use one or
the other.

140
00:08:41.100 --> 00:08:44.540
It really depends on you and
your programming style and

141
00:08:44.540 --> 00:08:47.250
kind of what your end goal is.

142
00:08:47.250 --> 00:08:49.888
So, hopefully that clears it up
because I know a lot of people

143
00:08:49.888 --> 00:08:53.570
wanted this course thinking, well I sure
hope I know when to use Web Assembly.

144
00:08:53.570 --> 00:08:57.582
So hopefully you do now and that makes
it a little more clear or less clear,

145
00:08:57.582 --> 00:08:58.240
who knows?

