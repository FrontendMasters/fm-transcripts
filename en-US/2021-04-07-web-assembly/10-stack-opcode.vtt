WEBVTT

1
00:00:00.000 --> 00:00:05.256
So before we get to anything more
complicated, we have to understand some

2
00:00:05.256 --> 00:00:11.210
things about how WebAssembly is executed
and how we get those instructions.

3
00:00:11.210 --> 00:00:15.655
So we're gonna talk about the Stack and
Opcodes.

4
00:00:15.655 --> 00:00:20.559
WebAssembly is a Stack machine,
that is everything

5
00:00:20.559 --> 00:00:26.300
that happens is either pushed or
popped off a Stack.

6
00:00:26.300 --> 00:00:28.115
And we can only have so
much or we can only have so

7
00:00:28.115 --> 00:00:29.660
much information in the Stack at once.

8
00:00:31.090 --> 00:00:36.020
This seems similar you're probably Jam I
know Stack that I've taken all the front

9
00:00:36.020 --> 00:00:41.690
end masters courses on data structures and
operating algorithms things like that.

10
00:00:41.690 --> 00:00:42.956
This is a different Stack,

11
00:00:42.956 --> 00:00:46.630
the Stack that you're probably
thinking of it's a data structure.

12
00:00:46.630 --> 00:00:51.120
in JavaScript, we usually use an array to
represent it, it uses lasting first out.

13
00:00:51.120 --> 00:00:57.380
This is not that, this is a machine Stack,
as in, we load variables.

14
00:00:57.380 --> 00:01:01.450
So actually,
let's go back to our other example.

15
00:01:01.450 --> 00:01:07.320
So in this case with git local,
it's pushing that number onto the Stack.

16
00:01:07.320 --> 00:01:09.370
So that primary patch then
it pushes onto the Stack.

17
00:01:09.370 --> 00:01:13.260
So now we now have a pointer to
this number that we passed in.

18
00:01:13.260 --> 00:01:15.620
And then it just returns that pointer.

19
00:01:15.620 --> 00:01:21.120
And fortunately during the compilation
process it, it writes it to memory.

20
00:01:21.120 --> 00:01:23.920
And then JavaScript when we use it,
it pulls that back out of memory.

21
00:01:23.920 --> 00:01:26.690
And that's what's happening
under the hood here.

22
00:01:26.690 --> 00:01:31.700
But everything we see in WebAssembly
is pushing and popping off the Stack.

23
00:01:31.700 --> 00:01:35.720
That's it,
that's all the commands we're gonna run.

24
00:01:37.080 --> 00:01:42.584
At its core, it's such a basic concept and
it seems really really simple.

25
00:01:42.584 --> 00:01:45.487
But, we see the complexity in that,

26
00:01:45.487 --> 00:01:50.010
how do we do things like fore
loops if it's just a Stack?

27
00:01:50.010 --> 00:01:53.298
How do we do things like
trying to think of more,

28
00:01:53.298 --> 00:01:58.481
it's difficult to do more complex
engineering when it's only pushing and

29
00:01:58.481 --> 00:02:03.520
popping information off the Stack,
and we can only do that one at a time.

30
00:02:05.930 --> 00:02:11.328
This is also different than the call
Stack that you know of in JavaScript,

31
00:02:11.328 --> 00:02:13.430
which is a similar concept.

32
00:02:13.430 --> 00:02:16.610
But again, it's different because
JavaScript is not a Stack machine.

33
00:02:16.610 --> 00:02:20.190
It uses a heap, for
its data underlying data structure.

34
00:02:20.190 --> 00:02:21.292
Versus WebAssembly,

35
00:02:21.292 --> 00:02:24.890
which only has a Stack which has
this really tiny portion of memory.

36
00:02:24.890 --> 00:02:26.886
It's always reading and
pulling from the memory and

37
00:02:26.886 --> 00:02:29.180
doing all the operations internally.

38
00:02:29.180 --> 00:02:31.278
That is part of what makes assembly so
fast,

39
00:02:31.278 --> 00:02:34.180
is that it doesn't have to
worry about garbage collection.

40
00:02:34.180 --> 00:02:38.268
It doesn't have to worry about
memory that's been dereferenced or

41
00:02:38.268 --> 00:02:43.340
anything like that, because it's all just
a really simple right here right now.

42
00:02:43.340 --> 00:02:44.256
What's on my Stack?

43
00:02:44.256 --> 00:02:45.220
Pushing and popping.

44
00:02:46.760 --> 00:02:49.570
Okay, I won't go too
much more into the sack.

45
00:02:49.570 --> 00:02:54.477
But when we get to a more complicated
example, which we do later,

46
00:02:54.477 --> 00:02:56.989
you'll see exactly what I mean.

47
00:02:56.989 --> 00:02:58.675
Opcodes.

48
00:02:58.675 --> 00:03:02.970
Remember how I said that all computer
instructions at its core are just numbers

49
00:03:02.970 --> 00:03:07.203
and the numbers represent something based
on the architecture on the CPU that

50
00:03:07.203 --> 00:03:08.070
we're using.

51
00:03:08.070 --> 00:03:10.050
So in this case, probably an x86.

52
00:03:10.050 --> 00:03:16.520
x86 has a whole bunch of instructions,
and at the core just numbers.

53
00:03:16.520 --> 00:03:19.579
So when we say something like get which,
like get local or

54
00:03:19.579 --> 00:03:23.023
something like that,
that corresponds to a specific hex code,

55
00:03:23.023 --> 00:03:26.050
which corresponds to a specific
machine instruction.

56
00:03:28.350 --> 00:03:32.976
Yeah, we're low down we
are [LAUGH] We are down here in

57
00:03:32.976 --> 00:03:35.720
the CPU in this low level code.

58
00:03:36.940 --> 00:03:42.059
But because WebAssembly is designed to be
friendly, we have Opcodes, which are just

59
00:03:42.059 --> 00:03:46.980
representations of these hex codes which
are actually just machine level codes.

60
00:03:46.980 --> 00:03:53.480
But because we can't read hex that well,
[LAUGH] We have these helpful Opcodes.

61
00:03:53.480 --> 00:03:57.033
Think of an Opcode as just
a computer instruction code, but

62
00:03:57.033 --> 00:03:58.960
we call it Opcode code shorter.

63
00:03:58.960 --> 00:04:02.440
Actually here is a really
cool interactive table.

64
00:04:02.440 --> 00:04:04.215
And I know cool is completely relative.

65
00:04:04.215 --> 00:04:08.510
[LAUGH] But
I think it's pretty cool, but it is.

66
00:04:08.510 --> 00:04:09.100
Okay.

67
00:04:09.100 --> 00:04:12.616
Loaded, is that big enough everybody see,

68
00:04:12.616 --> 00:04:17.760
though small I can only make it so
big and see the whole table but.

69
00:04:19.610 --> 00:04:23.710
Alright, so here is a list of
all of the WebAssembly opcodes.

70
00:04:23.710 --> 00:04:28.588
So this is a list of all of the possible
instructions that we can perform

71
00:04:28.588 --> 00:04:32.270
in WebAssembly, which is pretty cool.

72
00:04:32.270 --> 00:04:33.370
Because it fits in a table.

73
00:04:33.370 --> 00:04:34.090
It's a large table.

74
00:04:34.090 --> 00:04:38.826
Yes, but it fits in a table versus if we
looked at all the possible instructions we

75
00:04:38.826 --> 00:04:42.251
can do in JavaScript,
it would be hundreds of pages long.

76
00:04:42.251 --> 00:04:44.369
WebAssembly is much simpler.

77
00:04:44.369 --> 00:04:45.675
With that simplicity,

78
00:04:45.675 --> 00:04:50.048
we get more complexity because we have
less obfuscation, but at the core of it,

79
00:04:50.048 --> 00:04:54.250
these are everything we're gonna do is
using one of these operation codes.

80
00:04:54.250 --> 00:04:55.580
So one of these instruction codes.

81
00:04:56.640 --> 00:05:04.030
Opcodes are based exactly on the type
of number that we're dealing with.

82
00:05:04.030 --> 00:05:07.600
Today we're only doing
dealing with 32 bit integers.

83
00:05:07.600 --> 00:05:10.840
So all four opcodes
are prefixed with I 32.

84
00:05:10.840 --> 00:05:15.080
But you also do 64 bit integers,
floating point numbers, things like that.

85
00:05:15.080 --> 00:05:19.760
Let me pick one and we'll hover over it,
I'll pick an easy one.

86
00:05:21.600 --> 00:05:26.747
Less than greater than add,

87
00:05:26.747 --> 00:05:31.679
adds an easy one equal and or

88
00:05:31.679 --> 00:05:34.906
think multiply.

89
00:05:34.906 --> 00:05:36.100
Yep.

90
00:05:36.100 --> 00:05:40.672
So the way to read this is I
because it's a Stack machine,

91
00:05:40.672 --> 00:05:45.840
the Stack is gonna take the last
two things off the Stack.

92
00:05:45.840 --> 00:05:48.389
So it's gonna pop the last two
numbers that are on the Stack and

93
00:05:48.389 --> 00:05:50.610
then perform an operation and
it's going to return.

94
00:05:51.940 --> 00:05:55.700
It's gonna multiply those numbers together
and it's going to return a 32 bit integer.

95
00:05:55.700 --> 00:06:02.350
The shortcut or the actual machine
instruction that we're calling is 0X6C.

96
00:06:02.350 --> 00:06:06.276
For a 32 bit integer, but
because that would be tedious to write and

97
00:06:06.276 --> 00:06:08.130
it wouldn't make any sense.

98
00:06:08.130 --> 00:06:10.630
We say I 32 dot multiply.

99
00:06:10.630 --> 00:06:16.170
And there's also a multiply for 64 bit
integers, floating point, numbers, etc.

100
00:06:18.250 --> 00:06:22.276
Due to the portability of WebAssembly and
the fact that it's gonna run on

101
00:06:22.276 --> 00:06:26.570
many platforms, we have this such
specificity when it comes to operations.

102
00:06:27.950 --> 00:06:31.117
So it's a good time to give
another shout out to JavaScript,

103
00:06:31.117 --> 00:06:32.929
which does all this stuff for you.

104
00:06:32.929 --> 00:06:34.180
You don't have to worry about types.

105
00:06:34.180 --> 00:06:35.510
It does type conversion for you.

106
00:06:35.510 --> 00:06:37.990
If you wanna deal with integers or
floating point numbers,

107
00:06:37.990 --> 00:06:39.040
it does all that for you.

108
00:06:39.040 --> 00:06:42.798
You can multiply, divide, add, you
don't care about the underlying memory,

109
00:06:42.798 --> 00:06:44.170
architecture.

110
00:06:44.170 --> 00:06:46.740
But because we're writing WebAssembly,
we do care.

111
00:06:46.740 --> 00:06:50.179
And we have to be very explicit about
what we're doing because we're literally

112
00:06:50.179 --> 00:06:53.280
telling the computer what to do,
how to move these bits of data around.

113
00:06:53.280 --> 00:06:54.486
Thus the specificity.

114
00:06:56.316 --> 00:06:59.600
Again, if I showed you this table in
the beginning, you'd be like what?

115
00:07:00.900 --> 00:07:01.400
What?

116
00:07:02.520 --> 00:07:03.080
Translate what?

117
00:07:03.080 --> 00:07:05.280
It's not really working.

118
00:07:05.280 --> 00:07:08.280
Okay, so this is a helpful reference.

119
00:07:08.280 --> 00:07:10.798
I won't even show you
the official WebAssembly docs,

120
00:07:10.798 --> 00:07:14.910
cuz remember I showed you earlier and
it's just like this jumble of information.

121
00:07:14.910 --> 00:07:18.745
This to me is probably one of the more
useful sites you're gonna use in terms of

122
00:07:18.745 --> 00:07:20.880
what can and can't you do in WebAssembly.

123
00:07:20.880 --> 00:07:27.510
And this tells you everything you can do,
so it's a bit harder to read but

124
00:07:27.510 --> 00:07:31.760
so lt dash S is less than,
but it's unsigned.

125
00:07:31.760 --> 00:07:35.560
So we're talking about sign
in unsigned integers earlier,

126
00:07:35.560 --> 00:07:39.900
subtraction, multiplication,
things like that.

127
00:07:39.900 --> 00:07:43.468
And we can declare, and just real quick
cuz this isn't quite an operation,

128
00:07:43.468 --> 00:07:46.220
it's an operation but
it doesn't actually do anything.

129
00:07:46.220 --> 00:07:49.804
If we wanna declare just a number,
we would say I 32.const, and

130
00:07:49.804 --> 00:07:53.590
then at that point we're pushing
a 32-bit integer onto the Stack.

131
00:07:55.100 --> 00:07:57.688
I forgot the name of the person
who wrote this page, but

132
00:07:57.688 --> 00:08:01.514
shout out to them because they took a lot
of really hard to understand information

133
00:08:01.514 --> 00:08:03.278
and put it into a nice table format.

134
00:08:03.278 --> 00:08:07.911
So, shout out to Pengo Ray.

135
00:08:07.911 --> 00:08:10.546
Don't know who you are but respect.

136
00:08:10.546 --> 00:08:14.232
All right, And interactive

137
00:08:14.232 --> 00:08:18.570
table that we talked a bit earlier
about 32 bit integer, 64 bit integers.

138
00:08:20.050 --> 00:08:21.460
Okay.

139
00:08:21.460 --> 00:08:27.520
So, because we're talking about
WebAssembly is a Stack machine.

140
00:08:27.520 --> 00:08:29.830
And we're always pushing and
popping from the Stack.

141
00:08:29.830 --> 00:08:33.960
We take this example of a multiplication
example, we get local one.

142
00:08:33.960 --> 00:08:36.570
Remember the locals are the variables,
we're passing into a function.

143
00:08:36.570 --> 00:08:41.070
And then we get local, or
we get local 0 because it's zero index.

144
00:08:41.070 --> 00:08:43.110
We get local 1.

145
00:08:43.110 --> 00:08:48.130
We can use 1 or 0, or we can use the
actual name of the parameters themselves.

146
00:08:48.130 --> 00:08:51.696
I like to use the name of
the parameters because, well, again,

147
00:08:51.696 --> 00:08:54.690
I write code to be
readable by other humans.

148
00:08:54.690 --> 00:08:57.540
But if you want,
you can get them in order.

149
00:08:57.540 --> 00:09:00.511
So if we add three parameters,
we're passing through a function,

150
00:09:00.511 --> 00:09:03.218
we can say get local zero,
get a local one, get local two, and

151
00:09:03.218 --> 00:09:06.620
it's the same thing or
you can call them by name directly.

152
00:09:06.620 --> 00:09:07.440
And then we multiply.

153
00:09:09.000 --> 00:09:13.731
And this right here is it's a little
confusing because when you just

154
00:09:13.731 --> 00:09:17.964
look at it if you had no idea
what I just said 20 minutes ago,

155
00:09:17.964 --> 00:09:22.871
you look at it and you're, wait,
what operations being performed?

156
00:09:22.871 --> 00:09:25.965
Because in JavaScript,
if you wanna multiply two numbers,

157
00:09:25.965 --> 00:09:29.740
it would be number 1,
times number 2, output something.

158
00:09:29.740 --> 00:09:34.094
But in WebAssembly, that is all implied
you have to understand what's being pushed

159
00:09:34.094 --> 00:09:35.762
in pop to the Stack at all times.

160
00:09:35.762 --> 00:09:39.733
And you have to understand that this
operation is gonna pull both values in

161
00:09:39.733 --> 00:09:41.860
the Stack and multiply them together.

162
00:09:41.860 --> 00:09:46.949
If it seems I'm spending a lot of time on
it, it's because as a JavaScript engineer,

163
00:09:46.949 --> 00:09:50.440
it's not intuitive to me what's happening.

164
00:09:50.440 --> 00:09:53.340
It's kind of the first time you see.

165
00:09:54.790 --> 00:09:55.840
Someone help me on the chat.

166
00:09:55.840 --> 00:10:03.460
What's it called when it's like 2, 2 an
a plus, we're saying that my CS teachers.

167
00:10:06.150 --> 00:10:08.319
I'm blanking right now,
I'll think of it later.

168
00:10:08.319 --> 00:10:12.820
But it's really good binary.

169
00:10:12.820 --> 00:10:17.224
But it's a different way of looking
at operations instead of doing

170
00:10:17.224 --> 00:10:19.230
operation number.

171
00:10:19.230 --> 00:10:22.120
Now, we're just purely using Stack.

172
00:10:22.120 --> 00:10:25.754
And these are all just pointers to memory,
and then that computer instruction reads

173
00:10:25.754 --> 00:10:28.790
from those two pointers, executes them,
and then clears the Stack.

