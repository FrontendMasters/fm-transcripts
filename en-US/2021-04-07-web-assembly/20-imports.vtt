WEBVTT

1
00:00:00.710 --> 00:00:05.110
We've now learned how to export
functions from assembly scripts to

2
00:00:05.110 --> 00:00:08.907
TypeScript into JavaScript,
and then we called it here.

3
00:00:08.907 --> 00:00:09.987
We can go the other way too.

4
00:00:09.987 --> 00:00:15.210
We can import functions
into our assembly scripts.

5
00:00:15.210 --> 00:00:17.960
This is where it gets
a little bit more tricky.

6
00:00:17.960 --> 00:00:20.750
And I know I've been saying that
the entire course like, this is gonna get

7
00:00:20.750 --> 00:00:24.170
a little more complicated, this is
gonna get a little more complicated.

8
00:00:24.170 --> 00:00:25.799
Yeah, this is totally iterative.

9
00:00:25.799 --> 00:00:27.849
We are building step by step by step.

10
00:00:27.849 --> 00:00:32.793
So by the end, we will have something
that is gonna look a little complex but

11
00:00:32.793 --> 00:00:36.885
we're gonna understand everything
that we're doing here.

12
00:00:36.885 --> 00:00:38.483
So I am now in the Working repo,
I'm now in 3.

13
00:00:38.483 --> 00:00:42.225
So if something went terribly wrong and
you're having issues,

14
00:00:42.225 --> 00:00:45.967
you're getting the bad magic number error,
things like that,

15
00:00:45.967 --> 00:00:49.868
you can just go to this repo error and
you'll be exactly where I am.

16
00:00:57.825 --> 00:01:00.545
We're gonna talk about custom imports,
but for

17
00:01:00.545 --> 00:01:03.490
now we're gonna do a few built in imports.

18
00:01:03.490 --> 00:01:08.419
One of the more useful function imports
we want to call in our assembly script is

19
00:01:08.419 --> 00:01:10.380
the abort function.

20
00:01:10.380 --> 00:01:14.173
The abort function allows us to terminate
execution if something has gone

21
00:01:14.173 --> 00:01:15.100
terribly wrong.

22
00:01:16.220 --> 00:01:20.370
Which it shouldn't for this course,
but it's really useful to know.

23
00:01:20.370 --> 00:01:22.462
So let's go back to our -1 and

24
00:01:22.462 --> 00:01:28.675
let's add an abort if a certain number
is passed, and just we'll call abort.

25
00:01:28.675 --> 00:01:31.218
So I'm jumping back.

26
00:01:31.218 --> 00:01:35.038
I'm gonna close all these other
files since I will get confused.

27
00:01:38.888 --> 00:01:39.746
Close you.

28
00:01:39.746 --> 00:01:45.275
And so now I'm back in our
assembly directory in index.ts.

29
00:01:45.275 --> 00:01:50.031
So now I can say if n =

30
00:01:52.262 --> 00:01:55.899
Else this should be equals 44.

31
00:01:55.899 --> 00:01:59.963
And we're just gonna call abort on that.

32
00:02:01.270 --> 00:02:03.991
Then we save it.

33
00:02:05.616 --> 00:02:07.041
And we're gonna stop that server.

34
00:02:08.546 --> 00:02:15.330
Actually what I'm gonna do now, NPM run,
I'm gonna run, so I opened a new terminal.

35
00:02:16.340 --> 00:02:19.159
And I'm just gonna run the server
in the background because I hate to

36
00:02:19.159 --> 00:02:22.790
keep stopping and starting and
we will keep jumping back to the terminal.

37
00:02:22.790 --> 00:02:25.476
So now, in case you get confused later,
there is another terminal and

38
00:02:25.476 --> 00:02:27.080
the server is running in the background.

39
00:02:28.120 --> 00:02:32.180
Okay, and let's just verify that
localhost 3000, still working, cool.

40
00:02:34.120 --> 00:02:37.708
Next we need to compile our
assembly script to function again.

41
00:02:37.708 --> 00:02:40.777
So NPM run sbuild.

42
00:02:46.906 --> 00:02:48.504
Okay?

43
00:02:48.504 --> 00:02:54.140
So jumping back, so that means if we
call 44 it should throw an error.

44
00:02:54.140 --> 00:02:55.800
So we're passing 44 here.

45
00:02:55.800 --> 00:02:57.993
Let's see if that works.

46
00:02:57.993 --> 00:03:00.212
Hey it did.

47
00:03:00.212 --> 00:03:02.198
Actually no, it didn't work.

48
00:03:02.198 --> 00:03:04.790
Aah.

49
00:03:04.790 --> 00:03:11.302
So, assembly script has
the concept of built in functions.

50
00:03:11.302 --> 00:03:14.527
But to use those functions, we have
to use that assembly script loader.

51
00:03:14.527 --> 00:03:18.579
Remember earlier in the steps when
we imported that for saving dev,

52
00:03:18.579 --> 00:03:22.917
where we import it as save dev
the assemble script loader separately from

53
00:03:22.917 --> 00:03:25.209
the assembly script library itself.

54
00:03:25.209 --> 00:03:29.921
The loader is a tiny utility function
that wraps glue code that does some of

55
00:03:29.921 --> 00:03:32.340
the heavy lifting for us.

56
00:03:32.340 --> 00:03:35.655
So the abort function is built into
the loader, but unfortunately,

57
00:03:35.655 --> 00:03:40.180
we're not using the loader right now,
we're gonna use it in the next step.

58
00:03:40.180 --> 00:03:45.290
But for now, we can pass our
own custom version of aborts.

59
00:03:45.290 --> 00:03:46.920
So we can make it do whatever we want.

60
00:03:46.920 --> 00:03:50.316
The abort function is just
a JavaScript call that has

61
00:03:50.316 --> 00:03:53.256
no specific meaning to WebAssembly itself.

62
00:03:53.256 --> 00:03:56.231
It only knows that it's an important
function, when we call it,

63
00:03:56.231 --> 00:03:58.572
it reaches back out to
JavaScript to execute that.

64
00:03:58.572 --> 00:04:04.616
So let's create an abort function that,
what do we want to do?

65
00:04:04.616 --> 00:04:07.010
We want it to throw an error,
because that's what we're doing.

66
00:04:07.010 --> 00:04:12.455
We want it to throw so it'll pause
execution of our program, all right?

67
00:04:12.455 --> 00:04:14.632
So let's go and do that.

68
00:04:14.632 --> 00:04:18.024
So I'm going to refer
back to my notes now.

69
00:04:23.171 --> 00:04:27.561
A word on imports.

70
00:04:27.561 --> 00:04:33.675
So imports are the second argument to
instantiate streaming and instantiate.

71
00:04:33.675 --> 00:04:40.241
The first one they take is the actual
WebAssembly module itself.

72
00:04:40.241 --> 00:04:43.273
But it also takes this idea of imports.

73
00:04:43.273 --> 00:04:47.062
That is the imported functions into
WebAssembly that we're gonna call,

74
00:04:47.062 --> 00:04:48.723
because it's a two way street.

75
00:04:48.723 --> 00:04:50.386
You can call a function from WebAssembly,

76
00:04:50.386 --> 00:04:52.920
you can call functions
from JavaScript as well.

77
00:04:52.920 --> 00:04:56.270
But to do that, we need to define them and
then pass them in.

78
00:04:56.270 --> 00:04:58.371
So we're gonna do that with
the imports object, and

79
00:04:58.371 --> 00:04:59.960
it's gonna look something like this.

80
00:04:59.960 --> 00:05:03.379
So, let's code that up.

81
00:05:03.379 --> 00:05:08.107
So I'm gonna go into,
our loader file again.

82
00:05:08.107 --> 00:05:12.409
And we're gonna make use
of this constructor.

83
00:05:12.409 --> 00:05:18.300
So I'm gonna say this underscore
imports equals an object.

84
00:05:18.300 --> 00:05:22.080
And we're gonna call this inf,
which I'll explain why in a second.

85
00:05:24.680 --> 00:05:28.427
And that itself is an object,
and within the object,

86
00:05:28.427 --> 00:05:31.191
we're gonna find the abort function.

87
00:05:31.191 --> 00:05:35.059
And so right now we're designing
the functionality that we want to

88
00:05:35.059 --> 00:05:38.178
happen in WebAssembly when
this function is called.

89
00:05:38.178 --> 00:05:44.204
So in this case, I wanna throw
a new error that's gonna say,

90
00:05:44.204 --> 00:05:51.349
abort called from, WASM file.

91
00:05:55.467 --> 00:05:57.127
Okay, that's fine.

92
00:05:57.127 --> 00:06:01.077
But we still need to actually
pass those imports into that

93
00:06:01.077 --> 00:06:05.863
compile time when we compile and
instantiate our WebAssembly code.

94
00:06:05.863 --> 00:06:10.994
So I'm gonna add a second
argument to our WASM,

95
00:06:10.994 --> 00:06:16.897
let me say by default we're
gonna get our own imports,

96
00:06:16.897 --> 00:06:22.180
but we're gonna use this default value for
now.

97
00:06:22.180 --> 00:06:25.797
And then I'm gonna take those imports, and

98
00:06:25.797 --> 00:06:29.720
I'm gonna pass them both
to the WASM fallback.

99
00:06:29.720 --> 00:06:33.169
And as the second argument
through instantiate streaming.

100
00:06:33.169 --> 00:06:38.050
And then we're gonna do the same thing for
the WASM fallback, and

101
00:06:38.050 --> 00:06:42.030
we're gonna pass it in and instantiate.

102
00:06:42.030 --> 00:06:45.831
So, this is colloquially known as the
imports object, I like to call it imports,

103
00:06:45.831 --> 00:06:49.690
but you'll see referred to as imports
object, because it's an object containing

104
00:06:49.690 --> 00:06:52.520
all of the functions that we're
gonna import into our code.

105
00:06:53.810 --> 00:06:56.667
So now, because we're not actually
touching the assembly script,

106
00:06:56.667 --> 00:06:59.042
this is just the glue code,
we don't need to recompile.

107
00:06:59.042 --> 00:07:04.738
Let's go ahead and try our code again and
see if that works.

108
00:07:04.738 --> 00:07:05.356
And it did work.

109
00:07:05.356 --> 00:07:11.173
And if we want to get specific,
I'm gonna go to sources and

110
00:07:11.173 --> 00:07:14.280
I can say pause on exceptions.

111
00:07:17.459 --> 00:07:21.978
And now it's gonna pause because it's
being called in our WebAssembly.

