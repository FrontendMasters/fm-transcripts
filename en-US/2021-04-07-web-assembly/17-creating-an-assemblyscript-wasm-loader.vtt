WEBVTT

1
00:00:00.000 --> 00:00:04.600
All modern browsers,
I mean all including Safari.

2
00:00:04.600 --> 00:00:07.947
They have a web assembly, global objects.

3
00:00:07.947 --> 00:00:11.432
And this global object is
the primary API on how we're

4
00:00:11.432 --> 00:00:15.704
going to access web assembly and
all of our web assembly methods.

5
00:00:15.704 --> 00:00:17.186
They have five static methods.

6
00:00:17.186 --> 00:00:21.377
You don't have to instantiate web assembly
if the new these are static methods.

7
00:00:21.377 --> 00:00:24.629
They're compile, which compiles wasum and

8
00:00:24.629 --> 00:00:30.283
outputs just bytecode compiled streaming
which compiles lame from a stream.

9
00:00:30.283 --> 00:00:34.898
Which is actually a faster way
of loading and instantiating or

10
00:00:34.898 --> 00:00:37.126
just loading our wasum file.

11
00:00:37.126 --> 00:00:42.017
But what we really care about is
instantiate and instantiate streaming.

12
00:00:42.017 --> 00:00:48.628
These are the ways of it
takes a web assembly module.

13
00:00:48.628 --> 00:00:49.657
It compiles it and

14
00:00:49.657 --> 00:00:53.644
then it instantiates versus just
compile which it just compiles it.

15
00:00:53.644 --> 00:00:57.396
You still need to at that point,
instantiate it within the browser.

16
00:00:57.396 --> 00:00:59.265
That means load it up and

17
00:00:59.265 --> 00:01:04.415
get it loaded into the memory of
the browser for the engine to run.

18
00:01:04.415 --> 00:01:10.567
So to do this we actually have to use
instantiate and instantiate streaming.

19
00:01:10.567 --> 00:01:17.657
All major browsers supports instantiate
streaming except for Safari.

20
00:01:17.657 --> 00:01:20.948
And Safari is still a widely used browser,
so we're gonna have to use instantiate.

21
00:01:20.948 --> 00:01:24.357
So we're gonna have to
make two Methods for this.

22
00:01:24.357 --> 00:01:28.347
And we'll create this utility loader
class, which we're going to use for

23
00:01:28.347 --> 00:01:29.562
the rest of the class.

24
00:01:29.562 --> 00:01:33.170
And it's just an easy way of
wrapping these ways of fetching and

25
00:01:33.170 --> 00:01:34.678
compiling web assembly.

26
00:01:34.678 --> 00:01:37.869
But we're gonna make the utility class and
it just obfuscate the rest of that away.

27
00:01:37.869 --> 00:01:39.997
Wo we don't have to
worry about it anymore.

28
00:01:39.997 --> 00:01:43.270
So, for my instructions here.

29
00:01:43.270 --> 00:01:46.486
Lets create a [INAUDIBLE] node.

30
00:01:46.486 --> 00:01:48.249
And lets create a new directory.

31
00:01:48.249 --> 00:01:53.125
Let me say, [INAUDIBLE] JS,
we got CD in there.

32
00:01:53.125 --> 00:02:00.162
And I'm gonna touch a file called

33
00:02:00.162 --> 00:02:08.008
loader JS And go into j s.

34
00:02:08.008 --> 00:02:12.032
I try to explain like everything
I'm doing most of the time.

35
00:02:12.032 --> 00:02:15.646
I use a touch command as
a lazy way of creating files.

36
00:02:15.646 --> 00:02:18.831
Touch, it just modifies
the timestamp on a file.

37
00:02:18.831 --> 00:02:21.944
And if it doesn't exist,
it creates the file for you.

38
00:02:21.944 --> 00:02:26.080
It's a really quick and
dirty way of creating files very quickly.

39
00:02:26.080 --> 00:02:27.507
Not related to this course.

40
00:02:27.507 --> 00:02:31.516
I think I bring it up in full stack or
front end, but yeah, just in case you're

41
00:02:31.516 --> 00:02:35.111
wondering, I don't wanna use
commands that don't make any sense.

42
00:02:35.111 --> 00:02:37.333
I'm gonna make this a class.

43
00:02:37.333 --> 00:02:42.445
You don't have to make this a class,
but it's totally semantics up to you.

44
00:02:42.445 --> 00:02:46.686
But I like using classes when possible
as it just encapsulate this data.

45
00:02:46.686 --> 00:02:50.421
So I'm gonna call this wagon loader.

46
00:02:50.421 --> 00:02:53.409
And, of course a class has a constructor.

47
00:02:56.172 --> 00:02:57.888
And constructor is gonna be empty for now.

48
00:02:57.888 --> 00:02:59.251
It's like to do anything.

49
00:02:59.251 --> 00:03:06.746
And let's create a function or a method
called Wissam, doesn't do anything yet.

50
00:03:06.746 --> 00:03:13.163
And then we're gonna create that
Wissam fallback, just for Safari.

51
00:03:13.163 --> 00:03:17.097
And if you're asking me do I feel
bad about calling on Apple, no.

52
00:03:17.097 --> 00:03:18.129
They're like always behind.

53
00:03:18.129 --> 00:03:20.377
I don't know why,
they're behind on service workers.

54
00:03:20.377 --> 00:03:22.516
They're behind on this.

55
00:03:22.516 --> 00:03:24.127
I don't know what's
going down in Cupertino.

56
00:03:24.127 --> 00:03:25.473
I hope they catch up soon.

57
00:03:25.473 --> 00:03:30.253
But I imagine that instantiate streaming
will be supported pretty soon in Safari,

58
00:03:30.253 --> 00:03:33.407
but until then,
we have to make this fallback, okay?

59
00:03:33.407 --> 00:03:38.667
So, and I'm just following on here.

60
00:03:38.667 --> 00:03:42.974
Our YS a method, the way we're going to
load the file is we just give it a path.

61
00:03:42.974 --> 00:03:44.774
And then we're going to fetch.

62
00:03:44.774 --> 00:03:49.615
And this question was asked earlier about,
well, how do we fetch our web assembly?

63
00:03:49.615 --> 00:03:51.301
How do we pull it all together?

64
00:03:51.301 --> 00:03:52.929
Where's the JavaScript come in?

65
00:03:52.929 --> 00:03:54.204
This is where it comes in.

66
00:03:54.204 --> 00:03:58.819
So we're going to use the fetch API,
which is for the old school of us,

67
00:03:58.819 --> 00:04:01.411
it's the same as ex HR or not same as HR.

68
00:04:01.411 --> 00:04:03.512
But it's just a way of fetching files.

69
00:04:03.512 --> 00:04:05.007
And we're going to fetch that.

70
00:04:05.007 --> 00:04:07.805
We're going to pass that
to our web assembly,

71
00:04:07.805 --> 00:04:12.771
instantiate static method, which is going
to fetch the file and instantiate it.

72
00:04:12.771 --> 00:04:14.719
And then we're going to grab the imports.

73
00:04:14.719 --> 00:04:18.364
And then we're going to see how to
use those imports in JavaScript.

74
00:04:18.364 --> 00:04:19.426
All right.

75
00:04:19.426 --> 00:04:23.446
So, as I said before, rather than discuss,
is going to take a path and

76
00:04:23.446 --> 00:04:25.092
we'll give this a path too.

77
00:04:25.092 --> 00:04:32.579
And the path is just the URL or location
of the file we're trying to fetch.

78
00:04:32.579 --> 00:04:36.657
So I like to add in, console statements.

79
00:04:36.657 --> 00:04:40.304
Just so we know we're doing in case
something goes wrong, which it will.

80
00:04:40.304 --> 00:04:41.367
Something always goes wrong.

81
00:04:41.367 --> 00:04:42.111
But that's okay.

82
00:04:42.111 --> 00:04:44.192
We're engineers we deal with it.

83
00:04:44.192 --> 00:04:47.007
So I like to add console statements
just to let me know what's happening.

84
00:04:47.007 --> 00:04:52.332
So I'm going to say fetching,
[INAUDIBLE] This

85
00:04:52.332 --> 00:04:59.257
string say fetching, Whereas, yeah.

86
00:05:00.881 --> 00:05:04.180
So we're talking about something
else just, alerts in the console.

87
00:05:04.180 --> 00:05:08.631
So next let's check to make sure
our browser supports streaming.

88
00:05:08.631 --> 00:05:17.256
So I would say if not web assembly
dot instantiates streaming.

89
00:05:20.853 --> 00:05:22.762
So it doesn't support
instantiate streaming.

90
00:05:22.762 --> 00:05:27.989
Let's just call our fallback.

91
00:05:27.989 --> 00:05:29.500
Say wasn't fallback.

92
00:05:29.500 --> 00:05:32.605
And then we're gonna
pass it the path as well.

93
00:05:35.632 --> 00:05:39.184
And it's always good
to think of fallbacks.

94
00:05:39.184 --> 00:05:42.816
I know they're not popular but
remember back in a day when you go, or

95
00:05:42.816 --> 00:05:44.236
this even happens today.

96
00:05:44.236 --> 00:05:48.718
Remember back in a day when you go on
website and it was like, I'm sorry your

97
00:05:48.718 --> 00:05:53.289
browser doesnâ€™t currently support this,
please use Chrome or whatever.

98
00:05:53.289 --> 00:05:54.466
That's really frustrating.

99
00:05:54.466 --> 00:05:57.588
I don't think that's good practice
unless you absolutely have to do that,

100
00:05:57.588 --> 00:06:00.243
like you're making a cutting edge demo or
something like that.

101
00:06:00.243 --> 00:06:02.241
So in general,
we try to be good citizens and

102
00:06:02.241 --> 00:06:05.599
always create fallbacks wherever
possible if it's not too cumbersome.

103
00:06:05.599 --> 00:06:08.316
But so we'll jump back to the web and
fall back in a second,

104
00:06:08.316 --> 00:06:12.155
which is going to look very similar to
this, just there's an intermediate step.

105
00:06:12.155 --> 00:06:14.372
But for now, let's say,

106
00:06:17.008 --> 00:06:21.105
We're gonna pull up instance which is

107
00:06:21.105 --> 00:06:26.492
the instance of the modules
that we're loading.

108
00:06:26.492 --> 00:06:32.297
And we're gonna say, we're gonna wait.

109
00:06:32.297 --> 00:06:38.354
And, oops, let me put a sync, there we go.

110
00:06:38.354 --> 00:06:41.291
What's ref a sync, probably it would
have yelled at me in a second.

111
00:06:43.398 --> 00:06:48.238
And we're gonna await webassembly dot

112
00:06:48.238 --> 00:06:52.937
instantiate streaming, thank you.

113
00:06:52.937 --> 00:06:55.422
And we're gonna pass it up just a fetch.

114
00:06:55.422 --> 00:06:57.136
So we're going to fetch that path.

115
00:07:01.302 --> 00:07:06.867
And fetch, of course, returns a promise,
but we're waiting so it's okay.

116
00:07:06.867 --> 00:07:09.856
And essentially it's streaming is going
to take that promise to execute it.

117
00:07:09.856 --> 00:07:14.614
And then take the bytes better returned,
compile them down and

118
00:07:14.614 --> 00:07:19.838
it's going to return an instance of
our x of the web assembly module.

119
00:07:19.838 --> 00:07:27.353
From there, we want to return
the instance if it exists.

120
00:07:27.353 --> 00:07:31.352
And then return the exports off instance.

121
00:07:31.352 --> 00:07:35.478
In this case, the export is just going
to be the function that we exported.

122
00:07:35.478 --> 00:07:38.370
Remember earlier how I made that mistake,
and I forgot to export that function.

123
00:07:38.370 --> 00:07:40.013
There's nothing in my web assembly.

124
00:07:40.013 --> 00:07:42.668
Well, now that we did, it's only
going to export this one function.

125
00:07:42.668 --> 00:07:48.487
So right now it just contains the minus
one function that we wrote earlier.

126
00:07:48.487 --> 00:07:55.531
And for jumping to the Wiseman fallback,
it's gonna copy this because it's a log.

127
00:07:55.531 --> 00:07:58.086
So say using fallback.

128
00:08:06.357 --> 00:08:10.384
Just to let us know that we
are on a different code path now.

129
00:08:10.384 --> 00:08:14.207
So now we have to do things
a little bit more manually.

130
00:08:14.207 --> 00:08:19.455
So we're gonna say, We're

131
00:08:19.455 --> 00:08:24.473
gonna wait the response from
the fetch same as before.

132
00:08:24.473 --> 00:08:27.949
Except this time we have to
create an in between byte array.

133
00:08:27.949 --> 00:08:33.654
So the fetcher is going to return
the web assembly file, the Wissam file.

134
00:08:33.654 --> 00:08:38.818
And again, the Wissam file is in a binary
format, so it's just a stream of bytes.

135
00:08:38.818 --> 00:08:44.398
So we need to convert those bytes into an
array buffer so we can actually use them.

136
00:08:44.398 --> 00:08:49.622
And we'll cover array buffers
towards the end of the class.

137
00:08:49.622 --> 00:08:52.290
They can be a bit confusing, they can
be a bit challenging honestly, like

138
00:08:52.290 --> 00:08:55.356
coming from my own perspective, when I
first started learning about these things.

139
00:08:55.356 --> 00:08:58.323
Array buffers are a little
bit tricky to reason about.

140
00:08:58.323 --> 00:09:00.726
So I'm gonna leave those
to the end of the class and

141
00:09:00.726 --> 00:09:02.280
we can dive a bit more into them.

142
00:09:02.280 --> 00:09:08.562
But for now, we know that an array buffer
is just an array of raw binary data.

143
00:09:08.562 --> 00:09:15.557
So we're gonna say a weights,
response, there is a response.

144
00:09:15.557 --> 00:09:18.008
I'm gonna say array.

145
00:09:18.008 --> 00:09:20.135
And we're gonna convert
it to an array buffer.

146
00:09:22.050 --> 00:09:24.603
All right, so
now we can take these bytes and

147
00:09:24.603 --> 00:09:27.582
then we can pass those to
web assembly associates.

148
00:09:27.582 --> 00:09:32.714
So same as before,
We're grabbing that instance.

149
00:09:32.714 --> 00:09:37.308
And we're gonna say web
assembly dot instantiate.

150
00:09:39.956 --> 00:09:43.374
And we're going to just
instantiate it with these bytes,

151
00:09:43.374 --> 00:09:45.127
rather thanks just the path.

152
00:09:45.127 --> 00:09:47.806
And then like as before,
we're going to return,

153
00:10:01.742 --> 00:10:06.065
.All right, everybody, with me so far?

154
00:10:06.065 --> 00:10:08.529
Thumbs, hands.

155
00:10:08.529 --> 00:10:09.354
Two thumbs.

156
00:10:09.354 --> 00:10:13.088
All right, yeah,
this seems like a bit of work upfront.

157
00:10:13.088 --> 00:10:17.729
But this will save us time later down
the line because we're just gonna reuse

158
00:10:17.729 --> 00:10:19.115
these utility paths.

159
00:10:19.115 --> 00:10:22.317
We can't just fetch in binary data.

160
00:10:22.317 --> 00:10:24.815
And that's what Jasmine
is just binary data,

161
00:10:24.815 --> 00:10:27.513
because JavaScript would
know what to do with it.

162
00:10:27.513 --> 00:10:29.923
It's a stream of ones and
zeros and machine code.

163
00:10:29.923 --> 00:10:30.900
It doesn't mean anything.

164
00:10:30.900 --> 00:10:32.997
So we have to use a web assembly API.

165
00:10:32.997 --> 00:10:35.465
First, to convert into a useful format so

166
00:10:35.465 --> 00:10:38.292
that the JavaScript
engine understands that.

167
00:10:38.292 --> 00:10:40.702
And then we start playing
with web assembly.

