WEBVTT

1
00:00:00.200 --> 00:00:02.830
So, you're probably thinking,
what do you mean numbers?

2
00:00:02.830 --> 00:00:05.650
There's one type of number, it's a number.

3
00:00:05.650 --> 00:00:06.660
And it's an integer.

4
00:00:06.660 --> 00:00:09.642
And those are positive or negative.

5
00:00:09.642 --> 00:00:11.440
Well, not really.

6
00:00:11.440 --> 00:00:13.694
An integer is a type of number.

7
00:00:13.694 --> 00:00:18.255
The two types of numbers we
primarily care about in computing

8
00:00:18.255 --> 00:00:23.800
are floating point numbers, better
numbers with a decimal place as in and

9
00:00:23.800 --> 00:00:28.730
the decimal can move,
hence the floating point in moves, yeah.

10
00:00:30.400 --> 00:00:33.120
Yeah, you get it now,
floating point yeah, it makes sense.

11
00:00:33.120 --> 00:00:35.628
And we have integers which
are integers are whole numbers and

12
00:00:35.628 --> 00:00:37.310
they're either positive or negative.

13
00:00:39.060 --> 00:00:41.824
This is important because
at the core of it,

14
00:00:41.824 --> 00:00:46.440
different numbers are represented
differently in binary.

15
00:00:46.440 --> 00:00:51.346
So, a positive integer is going
to have the leading bit of 0.

16
00:00:51.346 --> 00:00:53.020
And I'll use this example right here.

17
00:00:54.140 --> 00:00:55.720
So, this is the number 1.

18
00:00:55.720 --> 00:01:00.870
It is a, we'll say, it's assigned integer.

19
00:01:00.870 --> 00:01:03.960
So, when I say sign that means positive or
negative.

20
00:01:03.960 --> 00:01:06.600
There's such thing as unsigned integers.

21
00:01:06.600 --> 00:01:10.021
And that's what a lot of times
we're working in computer and

22
00:01:10.021 --> 00:01:12.500
engineering is unsigned integers.

23
00:01:12.500 --> 00:01:15.320
Think of unsigned integers as
the absolute value of a number.

24
00:01:15.320 --> 00:01:17.150
So, it's not positive, it's not negative.

25
00:01:17.150 --> 00:01:18.940
It just is the number.

26
00:01:20.370 --> 00:01:22.360
And if you're thinking
why do we need signs?

27
00:01:22.360 --> 00:01:24.137
Why we need a positive or negative?

28
00:01:24.137 --> 00:01:25.485
Why do we need to know that?

29
00:01:25.485 --> 00:01:29.520
The sign bit is always the leading bit.

30
00:01:29.520 --> 00:01:33.664
So, if this is a 1,
that would make this number a negative 1,

31
00:01:33.664 --> 00:01:36.700
it's a zero so it's a positive.

32
00:01:36.700 --> 00:01:38.408
It's a positive zero.

33
00:01:38.408 --> 00:01:43.919
However, sometimes we want this bit
of information to be as small and

34
00:01:43.919 --> 00:01:45.730
concise as possible.

35
00:01:45.730 --> 00:01:47.190
So, we use unsigned integer.

36
00:01:47.190 --> 00:01:52.370
And by using unsigned numbers,
we get this extra bit of information back.

37
00:01:52.370 --> 00:01:58.650
So, now we can fit larger numbers in
a smaller space by using unsigned numbers.

38
00:02:00.000 --> 00:02:05.050
Now, if you wanna see what the largest
number in JavaScript you can do is,

39
00:02:05.050 --> 00:02:07.751
we can use the number max safe integer.

40
00:02:07.751 --> 00:02:10.911
We just click to the wonderful
Mozilla docs and

41
00:02:10.911 --> 00:02:15.110
we see that number is nine
zero actually can't read that.

42
00:02:15.110 --> 00:02:17.060
It's so long.

43
00:02:17.060 --> 00:02:22.878
But there's a concept of the,
it's called a max safe integer,

44
00:02:22.878 --> 00:02:29.040
because Java Script uses 64 bits
to represent all of its numbers.

45
00:02:29.040 --> 00:02:33.000
It uses 64 bit floating point numbers and
not integers.

46
00:02:33.000 --> 00:02:35.325
But if you're saying, if it's 64 bit,

47
00:02:35.325 --> 00:02:40.270
that means I should be able to do 2 to
the 64th to get the largest number.

48
00:02:40.270 --> 00:02:44.098
Well, now we can only do two to 53,
because there's such thing as the headers

49
00:02:44.098 --> 00:02:47.780
and other bits of information that
we need to know about the number.

50
00:02:47.780 --> 00:02:52.217
So, the max safe integer in
JavaScript is 2 to the 53 minus 1.

51
00:02:52.217 --> 00:02:55.630
I know, you're like, why do I care?

52
00:02:55.630 --> 00:02:59.880
If you've ever done heavy computations,
or you're working with very,

53
00:02:59.880 --> 00:03:04.070
very large numbers, you actually
want to use 64 bits of information.

54
00:03:04.070 --> 00:03:07.095
You wanna use as much information as
possible, because that means we don't have

55
00:03:07.095 --> 00:03:10.970
to slice up that number into different
parts and then perform computations on it.

56
00:03:10.970 --> 00:03:16.120
By having a 32-bit system
versus a 64-bit system,

57
00:03:16.120 --> 00:03:21.391
a 64-bit system can represent
larger numbers at once.

58
00:03:21.391 --> 00:03:26.462
And it can move those around much easier
versus say, a 32-bit system which

59
00:03:26.462 --> 00:03:31.455
is gonna be constrained by only having
2 to the 32nd as the largest entry,

60
00:03:31.455 --> 00:03:34.830
2 to 30,
actually it's 2 to the 31 minus 1.

61
00:03:36.680 --> 00:03:40.344
Again, if you've come across this,
and you probably have,

62
00:03:40.344 --> 00:03:43.690
JavaScript will do the heavy lifting for
you.

63
00:03:43.690 --> 00:03:46.567
So, if you're using really, really,
really, really, really large numbers,

64
00:03:46.567 --> 00:03:49.730
it divides those numbers up and
it performs calculations on them.

65
00:03:49.730 --> 00:03:54.533
That is why something like JavaScript is
never gonna be as fast as something like

66
00:03:54.533 --> 00:03:56.200
C, which doesn't quit.

67
00:03:56.200 --> 00:03:57.700
You can use more of those numbers.

68
00:03:57.700 --> 00:04:01.730
It doesn't have to use to 253, you can
use 2 to 61 or something like that.

69
00:04:02.730 --> 00:04:05.334
And again, the larger numbers we're using,

70
00:04:05.334 --> 00:04:08.739
the less computation and
less number mangling we have to do,

71
00:04:08.739 --> 00:04:13.100
not super critical to know that's why
I didn't really go too deep into it.

72
00:04:13.100 --> 00:04:15.847
But it's just interesting to know
about the language we write, know and

73
00:04:15.847 --> 00:04:16.530
write every day.

74
00:04:16.530 --> 00:04:17.580
A lot of people don't know this.

75
00:04:18.774 --> 00:04:22.156
Actually, it turns out
that 9 is 9 quadrillion,

76
00:04:22.156 --> 00:04:26.810
I'm trying to think it's 9 quadrillion
grains of rice in the world?

77
00:04:28.590 --> 00:04:29.460
Sand on the beach.

78
00:04:30.590 --> 00:04:31.860
Hm, I don't know.

79
00:04:31.860 --> 00:04:33.944
It's a number so
large it's almost incomprehensible.

80
00:04:37.420 --> 00:04:40.208
All right.
So, funny enough, as I mention before,

81
00:04:40.208 --> 00:04:43.180
JavaScript only has
floating point numbers.

82
00:04:43.180 --> 00:04:46.280
So, in all numbers are floating points.

83
00:04:46.280 --> 00:04:51.880
That throws people for a loop a bit
because you're like, well, wait.

84
00:04:51.880 --> 00:04:54.540
I can write 21, and it comes out as 21.

85
00:04:54.540 --> 00:04:58.640
That's because JavaScript inherently drops
off the decimal places if it's just zero.

86
00:04:58.640 --> 00:05:01.739
So, now you know, you've been working in
floating point numbers this entire time

87
00:05:01.739 --> 00:05:03.390
and you didn't even know it.

88
00:05:03.390 --> 00:05:05.500
Then again,
that's the beauty of high level languages.

89
00:05:05.500 --> 00:05:07.330
They obfuscate all these things away.

90
00:05:07.330 --> 00:05:09.750
So, you don't have to think
about floating point math.

91
00:05:09.750 --> 00:05:12.747
It does work for you underneath and
a quick note, yes,

92
00:05:12.747 --> 00:05:16.217
JavaScript is a 64 bit floating
point numbers web assembly.

93
00:05:16.217 --> 00:05:19.142
It can use 64 bit, but generally speaking,

94
00:05:19.142 --> 00:05:22.668
all of the memory pointers
are only going to be 32 bit.

95
00:05:22.668 --> 00:05:23.495
So, again,

96
00:05:23.495 --> 00:05:29.150
the pointer is just an address to numbers
in that giant warehouse of memory.

97
00:05:29.150 --> 00:05:34.120
And unfortunately it can't use 64 bit
fully yet, it converts back and forth.

98
00:05:34.120 --> 00:05:36.200
It gets a little confusing.

99
00:05:36.200 --> 00:05:40.309
So, I try to stay away from
the two confusing parts, but

100
00:05:40.309 --> 00:05:45.206
it means you can still do 64 bit
math within WebAssembly itself,

101
00:05:45.206 --> 00:05:50.400
but when you export it,
it's always gonna be a 32 bit pointer.

102
00:05:50.400 --> 00:05:51.870
So, it has to do that conversion for you.

