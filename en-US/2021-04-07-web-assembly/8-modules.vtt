WEBVTT

1
00:00:00.270 --> 00:00:06.210
In Web Assembly the fundamental
unit of code is a module.

2
00:00:06.210 --> 00:00:10.706
And if this looks, this has got to look
a little strange to most of you because,

3
00:00:10.706 --> 00:00:12.558
it looks strange to me even now.

4
00:00:12.558 --> 00:00:16.940
Because at least no brackets and there's
no parentheses or anything like that.

5
00:00:18.600 --> 00:00:20.897
The Web Assembly is actually a module,

6
00:00:20.897 --> 00:00:24.830
it's written in a format
called the S-expression.

7
00:00:24.830 --> 00:00:27.941
Not terribly important to know you
can look up the docs on MDN and

8
00:00:27.941 --> 00:00:29.420
get real nerdy about it.

9
00:00:29.420 --> 00:00:31.612
But essentially, it's a tree and

10
00:00:31.612 --> 00:00:36.570
the different parentheses represent
different branches on that tree.

11
00:00:36.570 --> 00:00:40.963
But ultimately, it comes back to
the trunk, there are, trying to think of

12
00:00:40.963 --> 00:00:45.790
a good course, I think Bianca has
a good course, on data structures.

13
00:00:45.790 --> 00:00:48.517
There's a few good course on front of
masters on data structures if you wanna

14
00:00:48.517 --> 00:00:50.790
learn more about trees and
things like that.

15
00:00:50.790 --> 00:00:54.510
I try not to load you down, with too
much information that is not, useful.

16
00:00:54.510 --> 00:00:57.808
I just thought you'd like to know,
that this is actually a real format,

17
00:00:57.808 --> 00:00:58.790
it's an old format.

18
00:01:00.120 --> 00:01:02.671
But that's it, back to our program.

19
00:01:02.671 --> 00:01:08.522
The financing code is a module,
we can declare our modules using func.

20
00:01:08.522 --> 00:01:13.405
The func keyword, names and parameters
are prefixed with a dollar sign so

21
00:01:13.405 --> 00:01:15.544
you know what you're reading.

22
00:01:15.544 --> 00:01:20.110
And more importantly here
is the concept of types.

23
00:01:20.110 --> 00:01:22.647
Remember earlier actually,
in the last section,

24
00:01:22.647 --> 00:01:26.780
we talked about different number types and
how that's important.

25
00:01:26.780 --> 00:01:31.715
It's important here because, again, we're
dealing with binary streams of data that

26
00:01:31.715 --> 00:01:34.662
is ones and zeros and
we need to know how to read that.

27
00:01:34.662 --> 00:01:38.027
And to know how to read that,
we have to tell our Web Assembly module,

28
00:01:38.027 --> 00:01:39.953
what type of number we're looking at.

29
00:01:39.953 --> 00:01:47.830
So that if we see a string of eight zeros
actually will say a string of 16 zeros.

30
00:01:47.830 --> 00:01:51.806
We can either interpret that as
one number, a 16 bit integer, or

31
00:01:51.806 --> 00:01:55.910
we can say, actually that's 2,
8 bit integers.

32
00:01:55.910 --> 00:01:59.891
And in the memory because it's this
consistent long string of ones and zeros,

33
00:01:59.891 --> 00:02:03.770
we have noticed slices up, so we know
how to deal with that memory so simply.

34
00:02:05.620 --> 00:02:09.415
And because remember what I said
earlier about different views, and

35
00:02:09.415 --> 00:02:12.819
the danger of like 2 different
processes writing to memory,

36
00:02:12.819 --> 00:02:15.970
which will corrupt it because
we don't know the format.

37
00:02:15.970 --> 00:02:18.170
It's just gibberish at that point.

38
00:02:18.170 --> 00:02:21.453
That's why we have types, is because we
wanna be very specific about the memory

39
00:02:21.453 --> 00:02:24.610
we're accessing, and
the type of data we're moving around.

40
00:02:24.610 --> 00:02:27.445
So that's what the i32 stands for,
and that's what we're gonna use for

41
00:02:27.445 --> 00:02:28.530
this class the entire time.

42
00:02:28.530 --> 00:02:32.330
We're not gonna touch floating
corner 64 bit numbers.

43
00:02:32.330 --> 00:02:35.911
Not totally irrelevant,
we're just gonna use 32 bit integers, and

44
00:02:35.911 --> 00:02:37.450
that's what i32 means.

45
00:02:37.450 --> 00:02:41.542
And we prefix the error,
we set these types, so in this case,

46
00:02:41.542 --> 00:02:45.266
the function signature,
the function is called name.

47
00:02:45.266 --> 00:02:50.044
It's taking in a parameter called params,
the params at 32 bit integer, and

48
00:02:50.044 --> 00:02:52.411
it's gonna return a 32 bit integer.

