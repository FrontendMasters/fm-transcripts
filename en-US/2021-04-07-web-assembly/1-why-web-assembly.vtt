WEBVTT

1
00:00:00.270 --> 00:00:04.574
So this is the question I get asked a lot
because people here aren't familiar with

2
00:00:04.574 --> 00:00:06.802
web assembly be like, cool cool cool.

3
00:00:06.802 --> 00:00:11.393
Web assembly, why do we need web assembly?

4
00:00:11.393 --> 00:00:12.527
Is it java script?

5
00:00:12.527 --> 00:00:15.664
And I am like well no,
it's not JavaScript.

6
00:00:15.664 --> 00:00:16.758
Can I use on JavaScript?

7
00:00:16.758 --> 00:00:17.458
Absolutely.

8
00:00:17.458 --> 00:00:19.922
You're supposed to, you have to.

9
00:00:19.922 --> 00:00:22.739
Is it going to replace JavaScript?

10
00:00:22.739 --> 00:00:26.254
No, it is not a replacement for
JavaScript.

11
00:00:26.254 --> 00:00:29.908
Web assembly is designed to
work in tandem with JavaScript.

12
00:00:29.908 --> 00:00:34.481
It's an entirely different language
running an entirely different

13
00:00:34.481 --> 00:00:36.143
process in the browser.

14
00:00:36.143 --> 00:00:41.792
The main point of confusion that people
get is should I use web assembly or

15
00:00:41.792 --> 00:00:42.908
a web worker?

16
00:00:42.908 --> 00:00:46.500
And again,
those are two different concepts.

17
00:00:46.500 --> 00:00:49.915
They're both different processes
running in the browser.

18
00:00:49.915 --> 00:00:54.773
But web assembly is its own environment
its sandbox is memory safe.

19
00:00:54.773 --> 00:00:59.602
And the main point of web
assembly is that other engineers

20
00:00:59.602 --> 00:01:02.726
can write code that runs on browser.

21
00:01:02.726 --> 00:01:06.620
And this is the part that always gets me
it's kind of a misnomer because people say

22
00:01:06.620 --> 00:01:10.358
we're suddenly like, yeah, it must
be something in front engineers do.

23
00:01:10.358 --> 00:01:11.079
And actually,

24
00:01:11.079 --> 00:01:15.070
from the people I've talked to you all the
blog posts I've read the talks I've seen,

25
00:01:15.070 --> 00:01:18.296
most of the people writing web
assembly are not front end engineers.

26
00:01:18.296 --> 00:01:19.832
They are people that write C.

27
00:01:19.832 --> 00:01:24.692
They're people to write rust or C++ or
I don't know if C sharp compiles yet.

28
00:01:24.692 --> 00:01:25.976
I'll look that up.

29
00:01:25.976 --> 00:01:30.530
But there are people that aren't
necessarily enamored with the front end

30
00:01:30.530 --> 00:01:32.964
like like, we are in front of masters.

31
00:01:32.964 --> 00:01:37.670
There are people that they want to do
video processing image processing games,

32
00:01:37.670 --> 00:01:40.425
because web assembly
works with binary data.

33
00:01:40.425 --> 00:01:45.125
That is super low level ones and
zeros and you're moving them around,

34
00:01:45.125 --> 00:01:50.236
which is why we're gonna spend quite
a bit of time on the foundational work.

35
00:01:50.236 --> 00:01:55.123
But really the advantages of
web assembly are, it's fast.

36
00:01:55.123 --> 00:01:59.112
And I know you're thinking,
is it faster than JavaScript?

37
00:01:59.112 --> 00:02:00.429
It depends.

38
00:02:00.429 --> 00:02:04.212
That's not really the use case and I'm
sure lots of people on Twitter are gonna

39
00:02:04.212 --> 00:02:07.667
get inflames, and they're gonna get
really angry about saying that.

40
00:02:07.667 --> 00:02:12.255
But it really depends on the use case on
whether or not you should use web assembly

41
00:02:12.255 --> 00:02:16.044
or JavaScript for particular for
solving a particular problem.

42
00:02:16.044 --> 00:02:21.352
By the end of this course I hope and
we will understand that the use case for

43
00:02:21.352 --> 00:02:23.963
web assembly versus JavaScript and

44
00:02:23.963 --> 00:02:29.111
when to actually take on the complexity
of dealing with web assembly.

45
00:02:29.111 --> 00:02:33.346
Well, actually, I think I can do
this in JavaScript and a web worker.

46
00:02:33.346 --> 00:02:38.450
More advantages of web assembly in
general, I've already said it, you can

47
00:02:38.450 --> 00:02:43.570
take a high level language like rust or
C, it compiles down to web assembly.

48
00:02:43.570 --> 00:02:46.366
It runs on more than just browsers.

49
00:02:46.366 --> 00:02:48.720
Right now,
there's not a really broad use case for

50
00:02:48.720 --> 00:02:52.241
writing desktop apps with web assembly,
but that's coming in the future.

51
00:02:52.241 --> 00:02:56.945
The whole reason why web assembly
exists is to have a portable,

52
00:02:56.945 --> 00:03:01.668
memory safe, consistent environment,
to write a language.

53
00:03:01.668 --> 00:03:06.250
And if you're thinking, Well,
that sounds a lot like the old days,

54
00:03:06.250 --> 00:03:10.834
like where we wrote desktop apps,
and then we ship them constantly.

55
00:03:10.834 --> 00:03:13.342
And the idea is the same.

56
00:03:13.342 --> 00:03:16.859
The power of a desktop app is that
it runs natively on a computer.

57
00:03:16.859 --> 00:03:21.128
So this is going to be my first most

58
00:03:21.128 --> 00:03:25.709
controversial point of the day is.

59
00:03:25.709 --> 00:03:27.837
No matter what you write,

60
00:03:27.837 --> 00:03:33.852
a JavaScript is never going to be as
fast as a native desktop application.

61
00:03:33.852 --> 00:03:37.690
That's because a native application
written in C sharp or Java or

62
00:03:37.690 --> 00:03:40.829
anything like that is always
going to use the low level

63
00:03:40.829 --> 00:03:43.930
memory instructions of
the computer that it's on.

64
00:03:43.930 --> 00:03:47.069
So if it's using Windows or
Linux or an arm system or

65
00:03:47.069 --> 00:03:51.815
an x86 system, a desktop application
can take advantage of that because it

66
00:03:51.815 --> 00:03:56.430
can reach down into low level instruction
code and just be more efficient.

67
00:03:56.430 --> 00:04:01.095
Whereas JavaScript no matter what
Always has to be interpreted first and

68
00:04:01.095 --> 00:04:02.172
then compiled.

69
00:04:02.172 --> 00:04:06.713
And so you're always going to get this
idea that it's running in a sandbox

70
00:04:06.713 --> 00:04:07.674
environment.

71
00:04:07.674 --> 00:04:13.381
So it's never gonna be as fast,
versus now we can write web assembly,

72
00:04:13.381 --> 00:04:16.784
we can get that sort
of speed in a browser.

73
00:04:16.784 --> 00:04:21.062
And then we can take that code and
move it to a Linux machine or

74
00:04:21.062 --> 00:04:24.842
Windows machine and
run it natively on the desktop.

75
00:04:24.842 --> 00:04:26.223
That's pretty cool.

76
00:04:26.223 --> 00:04:28.944
That's so cool.

77
00:04:28.944 --> 00:04:36.117
Alright, but mainly I'm trying to set
context here and it's not a silver bullet,

78
00:04:36.117 --> 00:04:42.485
it's not gonna solve all of your
performance issues or things like that.

79
00:04:42.485 --> 00:04:44.308
That's not what web assembly is for.

80
00:04:44.308 --> 00:04:49.116
It's for this portability and the ability
to take complex programs that you've

81
00:04:49.116 --> 00:04:52.931
already written in C,
like a video encoder or decoder, and then

82
00:04:52.931 --> 00:04:57.756
bring them to the web and then use that
power in a safe, memory efficient manner.

83
00:04:57.756 --> 00:05:00.538
Okay, that was a lot.

84
00:05:00.538 --> 00:05:02.686
Are there any questions so

85
00:05:02.686 --> 00:05:07.479
far on web assembly because I
talked at a super high level.

86
00:05:07.479 --> 00:05:10.847
And I really wanna make sure we
understand what we're doing here today.

87
00:05:10.847 --> 00:05:12.587
And what we're going to get out of it.

88
00:05:14.892 --> 00:05:20.053
&gt;&gt; Is a question about comparing
it to Java has byte code

89
00:05:20.053 --> 00:05:26.640
what it compiles versus web assembly
like how are they different?

90
00:05:26.640 --> 00:05:29.403
&gt;&gt; They-
&gt;&gt; Are there similarities.

91
00:05:29.403 --> 00:05:32.831
&gt;&gt; There are similarities because Java and

92
00:05:32.831 --> 00:05:38.694
I want to say Python also compiles
down to bytecode or some form of it.

93
00:05:38.694 --> 00:05:41.001
There's similarities there but

94
00:05:41.001 --> 00:05:45.703
web assembly ultimately is going
to compile down to assembly it is.

95
00:05:45.703 --> 00:05:50.132
It's not the lowest level of programming
that would be assembly language itself.

96
00:05:50.132 --> 00:05:54.143
That's as low as we can get,
we can't write ones and zeros.

97
00:05:54.143 --> 00:05:57.905
I haven't met a human who can do that I'm
sure there's like one person on the planet

98
00:05:57.905 --> 00:05:59.746
who can like I can code in ones and zeros.

99
00:05:59.746 --> 00:06:03.818
I don't know how, but the lowest level
of programming we can get is assembly.

100
00:06:03.818 --> 00:06:06.846
And then right above that is web assembly.

101
00:06:06.846 --> 00:06:09.083
So hence the name web assembly.

102
00:06:09.083 --> 00:06:12.211
Now Java is still going to compile to, or

103
00:06:12.211 --> 00:06:17.087
Python is still doing part of
bytecode which has to compile down

104
00:06:17.087 --> 00:06:22.057
again into assembly instructions,
and then it runs natively.

105
00:06:22.057 --> 00:06:27.425
So, in terms of performance,
I would say Java is still gonna be faster,

106
00:06:27.425 --> 00:06:32.798
not not due to anything like input or
architecture or how it's written.

107
00:06:32.798 --> 00:06:34.426
It's just the more mature platform.

108
00:06:34.426 --> 00:06:37.365
There are more optimizations in the Pilar.

109
00:06:37.365 --> 00:06:40.999
There are more tips and tricks we know for
optimizing all that code.

110
00:06:40.999 --> 00:06:43.805
Web assembly is the newest
kid on the block.

111
00:06:43.805 --> 00:06:45.908
It's been around for a few years, but

112
00:06:45.908 --> 00:06:50.659
it really gained popularity once all the
browser's decided that this was the thing.

113
00:06:50.659 --> 00:06:54.047
We're gonna adopt it and
let's make it work for everybody.

114
00:06:54.047 --> 00:06:58.907
And for the most part for something kind
of relatively unknown in the front end

115
00:06:58.907 --> 00:07:03.843
land every browser supports web assembly,
that's one of the reasons why I'm

116
00:07:03.843 --> 00:07:09.114
making this course is because we just
don't really know that it's for engineers.

117
00:07:09.114 --> 00:07:13.119
And if you look at some web assembly code,
it's really intimidating because it

118
00:07:13.119 --> 00:07:15.949
doesn't look anything like
programming that we know.

119
00:07:15.949 --> 00:07:19.474
And it makes you think like, hey,
this isn't some JavaScript, this

120
00:07:19.474 --> 00:07:23.746
is even a language that I'm even familiar
with and a syntax that I'm familiar with.

121
00:07:23.746 --> 00:07:28.192
And that's why I wrote this course
because as we go on in the future,

122
00:07:28.192 --> 00:07:33.512
we will definitely see more web assembly
and I want people to be familiar with it.

123
00:07:33.512 --> 00:07:37.023
This is exactly what I say in my full
stack course, in that you're not gonna

124
00:07:37.023 --> 00:07:40.175
learn everything about full stack or
servers or things like that.

125
00:07:40.175 --> 00:07:43.055
It's more when you see it again,
you'll be familiar and

126
00:07:43.055 --> 00:07:45.456
if it's an area you're interested in,
well,

127
00:07:45.456 --> 00:07:49.190
maybe I can change your career path
into being a web assembly programmer.

128
00:07:49.190 --> 00:07:54.527
I really believe this is the forefront
of the next stage of the internet,

129
00:07:54.527 --> 00:07:59.966
which, yeah, I'll talk more about that and
my passionate and all that.

130
00:07:59.966 --> 00:08:01.450
Are any other questions?

131
00:08:01.450 --> 00:08:04.180
I love that what about Java and bytecode.

132
00:08:04.180 --> 00:08:08.473
The question was,
is web assembly similar to programming in

133
00:08:08.473 --> 00:08:12.008
assembly itself as an x86 instructions or
arm or

134
00:08:12.008 --> 00:08:16.661
whatever micro architecture of
the system they programming on?

135
00:08:16.661 --> 00:08:19.237
The answer is yes and no.

136
00:08:19.237 --> 00:08:23.592
Yes, in that the principles are the same
we're actually just taking bits and

137
00:08:23.592 --> 00:08:25.208
we're moving them around.

138
00:08:25.208 --> 00:08:30.941
We're applying low level instructions
called opcodes to all of these bits.

139
00:08:30.941 --> 00:08:36.798
But it's a step above assembly and
that we have nice things like four loops,

140
00:08:36.798 --> 00:08:42.107
and dealing with arrays, and
if statements that aren't completely

141
00:08:42.107 --> 00:08:47.068
ridiculous to read, so
I'd say it's somewhere in the middle.

142
00:08:47.068 --> 00:08:50.358
It's definitely more approachable
than trying to learn assembly.

143
00:08:50.358 --> 00:08:55.036
And that's really the goal of this course
is to make it approachable make it

144
00:08:55.036 --> 00:08:57.129
understandable for everybody.

145
00:08:57.129 --> 00:09:01.499
But yeah, I'll do some comparisons
to assembly a bit later.

146
00:09:01.499 --> 00:09:06.336
But for now think of it as the middle
ground between assembly and

147
00:09:06.336 --> 00:09:08.167
a high level language.

148
00:09:08.167 --> 00:09:10.019
&gt;&gt; I was just wondering.

149
00:09:10.019 --> 00:09:14.764
So that means we can actually rethink the
way we shipped like for example packages

150
00:09:14.764 --> 00:09:18.894
can we just swipe packages in web
assembly and then they can actually.

151
00:09:18.894 --> 00:09:23.616
I mean, the consumer can compose those
packages they could do when shipping.

152
00:09:23.616 --> 00:09:25.043
&gt;&gt; Yes, thank you.

153
00:09:25.043 --> 00:09:26.155
Yeah, you're already there.

154
00:09:26.155 --> 00:09:28.958
You're already that's why
we wanna think about this.

155
00:09:28.958 --> 00:09:33.443
Yes, what we, the power we get
right now is the ability to take,

156
00:09:33.443 --> 00:09:35.449
let's say a video decoder.

157
00:09:35.449 --> 00:09:38.789
It's written in C, which is a time tested,
very old language.

158
00:09:38.789 --> 00:09:39.875
Very efficient.

159
00:09:39.875 --> 00:09:44.954
We can compile that to web assembly and we
take all those efficiencies we got from C.

160
00:09:44.954 --> 00:09:47.838
And then we run them as we
run those in the browser.

161
00:09:47.838 --> 00:09:51.727
So yes, that's what it's designed
to do is to create packages of

162
00:09:51.727 --> 00:09:55.350
really complex imputing and
then bring that to the browser.

163
00:09:55.350 --> 00:09:59.218
Whereas if we try to do this in
JavaScript, it would be very clunky and

164
00:09:59.218 --> 00:10:00.096
very onerous.

165
00:10:00.096 --> 00:10:04.095
JavaScript isn't really designed
to work at a low level,

166
00:10:04.095 --> 00:10:09.004
the way that we would need to be as
optimal and as efficient as possible.

167
00:10:09.004 --> 00:10:11.749
You're asking about,

168
00:10:11.749 --> 00:10:17.522
if we just like imported
the cool secret library?

169
00:10:17.522 --> 00:10:20.377
When we import that web assembly,
is it going to be a pain to debug?

170
00:10:20.377 --> 00:10:25.085
And the answer is, yes, it is,
that debugging story on web assembly is

171
00:10:25.085 --> 00:10:29.411
probably not as strong as other
languages that we have right now.

172
00:10:29.411 --> 00:10:33.633
Because again, this isn't as
mature as even JavaScript where we

173
00:10:33.633 --> 00:10:36.253
have amazing debugging school skills.

174
00:10:36.253 --> 00:10:41.628
So, if you were at the end of this
course if you say hey I have my favorite

175
00:10:41.628 --> 00:10:46.661
image decoder, audio processing
library that I want to pull in.

176
00:10:46.661 --> 00:10:51.781
You really do still have to know what
you're doing because it can quickly go

177
00:10:51.781 --> 00:10:56.823
off the rails I'll say when we tackle
memory later which I save memory till

178
00:10:56.823 --> 00:11:01.703
pretty far down the course because
it's a really complicated topic and

179
00:11:01.703 --> 00:11:06.773
it's cognitively it's difficult for
a lot of engineers to understand.

180
00:11:06.773 --> 00:11:09.463
But you have to understand
exactly what's going on.

181
00:11:09.463 --> 00:11:14.288
Because we're going to see sine shifting,
like literally we're moving bits here and

182
00:11:14.288 --> 00:11:18.799
there and we're moving from a 16 bit
Integer to an unsigned eight bit integer.

183
00:11:18.799 --> 00:11:22.033
And you really have to understand
that stuff at a low level.

184
00:11:22.033 --> 00:11:27.578
So I wouldn't say go out and pour your
favorite library to web assembly just yet.

185
00:11:27.578 --> 00:11:31.568
However, there are many examples of
people have done that so far and

186
00:11:31.568 --> 00:11:36.118
there are some links at the end where we
see made with web assembly where people

187
00:11:36.118 --> 00:11:39.418
have ported rust and
other high level programs into it.

188
00:11:39.418 --> 00:11:43.543
But yes, to answer that,
that's a long way to answer your question.

189
00:11:43.543 --> 00:11:44.727
You can.

190
00:11:44.727 --> 00:11:46.812
It's a little tricky though.

191
00:11:46.812 --> 00:11:51.550
There's the question in the chat was,
can we reuse things like fetch and

192
00:11:51.550 --> 00:11:55.756
other browser API's or
do we have to rewrite them from scratch?

193
00:11:55.756 --> 00:11:58.147
The answer is yes, we will use fetch.

194
00:11:58.147 --> 00:12:00.368
We will use some browser API's.

195
00:12:00.368 --> 00:12:02.725
But the surface area is pretty minimal.

196
00:12:02.725 --> 00:12:06.380
And it's gonna come down to
moving memory back and forth and

197
00:12:06.380 --> 00:12:11.133
the tooling that we're going to use later
built by using assembly scripts and

198
00:12:11.133 --> 00:12:13.710
things like binary and things like that.

199
00:12:13.710 --> 00:12:16.160
But good question we will get there.

