WEBVTT

1
00:00:00.227 --> 00:00:01.754
We're still not there yet,

2
00:00:01.754 --> 00:00:05.138
we need to pull out the functions
we need to convert the string.

3
00:00:05.138 --> 00:00:08.035
So, I'm gonna go back to the notes.

4
00:00:08.035 --> 00:00:11.239
And we should be here, we should have
modified our package JSON scripts to

5
00:00:11.239 --> 00:00:13.007
export the runtime for both our builds.

6
00:00:13.007 --> 00:00:15.720
We ran the builds,
the runtime included now.

7
00:00:15.720 --> 00:00:19.394
So now, let's talk about using
the assembly script loader.

8
00:00:19.394 --> 00:00:23.319
Again, I talk really fast,
I go on good rants.

9
00:00:23.319 --> 00:00:27.928
And just in case I didn't explain
something handsomely enough,

10
00:00:27.928 --> 00:00:31.699
there's always the fallback
run exercise five now,

11
00:00:31.699 --> 00:00:35.742
if you need to catch up or
something went terribly wrong.

12
00:00:35.742 --> 00:00:39.400
This is where we're at,
this library works, I've tested the ball,

13
00:00:39.400 --> 00:00:40.463
so but we're here.

14
00:00:43.521 --> 00:00:46.299
So now let's modify,
we need to modify our loader file.

15
00:00:46.299 --> 00:00:50.500
Because we no longer just care
about the export functions,

16
00:00:50.500 --> 00:00:55.891
we care about all of the functions that
assembly script is providing for us.

17
00:00:55.891 --> 00:01:01.529
So jumping back,
jumping back into loader.js,

18
00:01:01.529 --> 00:01:05.970
what I want to do is I wanna change this.

19
00:01:05.970 --> 00:01:07.496
It's a relatively simple changed.

20
00:01:07.496 --> 00:01:12.467
So instead of pulling destructuring it and
pulling out the instance,

21
00:01:12.467 --> 00:01:15.342
I'm just gonna call this instance now.

22
00:01:15.342 --> 00:01:20.150
So now we're getting the entire web as or
we're getting the entire web assembly

23
00:01:20.150 --> 00:01:23.248
module instance that
assembly script is passing.

24
00:01:23.248 --> 00:01:31.295
And we're gonna do the same thing here
Again, I just took out the D structuring.

25
00:01:32.816 --> 00:01:36.675
So now let's check this out.

26
00:01:36.675 --> 00:01:44.087
Let's set a breakpoint in here,
so I like to see what's going on.

27
00:01:46.913 --> 00:01:54.269
Sources, and skill into our elements.

28
00:01:56.803 --> 00:02:01.257
Go to Sources, where is my breakpoint?

29
00:02:01.257 --> 00:02:04.814
JS loader, there we go.

30
00:02:04.814 --> 00:02:05.888
We'll set a break point there.

31
00:02:09.804 --> 00:02:13.487
And I generally like to do this.

32
00:02:13.487 --> 00:02:18.297
I like to see what is available to me
now because it makes it easier to reason

33
00:02:18.297 --> 00:02:22.035
about versus if you have to go
into the docs and read them.

34
00:02:22.035 --> 00:02:24.945
They're not as intuitive versus,
when you're actually coding, and

35
00:02:24.945 --> 00:02:28.156
you can play around with it, you can break
stuff, you get a better grasp of it.

36
00:02:28.156 --> 00:02:33.229
So now,
let's look at this instance object.

37
00:02:33.229 --> 00:02:35.581
So before when we were destructuring,

38
00:02:35.581 --> 00:02:38.874
we were just getting this
instance which had exports.

39
00:02:38.874 --> 00:02:43.844
Which are just the exports of Fizz Buzz
minusOne, the memory which we'll cover and

40
00:02:43.844 --> 00:02:47.754
then some helper methods for
doing specific things with memory.

41
00:02:47.754 --> 00:02:52.229
But now instead of that,
we're getting the entire exports,

42
00:02:52.229 --> 00:02:56.112
which has all these helper
functions built-in now.

43
00:02:56.112 --> 00:03:00.414
And the helper function we
care about is getString or

44
00:03:00.414 --> 00:03:07.871
actually new string technically, actually
it getString, and getString is right here.

45
00:03:10.698 --> 00:03:11.839
Yeah, getString.

46
00:03:11.839 --> 00:03:16.763
So now let's jump back to our index.html,

47
00:03:16.763 --> 00:03:21.686
and we're now exporting Fizz Buzz as well,

48
00:03:21.686 --> 00:03:26.358
but we're also gonna get use getString.

49
00:03:26.358 --> 00:03:32.139
And I'm going to say const
str = getString, and

50
00:03:32.139 --> 00:03:39.612
we're gonna say getString on
this function fizzbuzz(3),

51
00:03:39.612 --> 00:03:45.112
and then we're gonna document.write that.

52
00:03:45.112 --> 00:03:52.582
And if I did things correctly,
take off the breakpoint,

53
00:03:52.582 --> 00:03:56.948
hey, is not bad, not bad at all.

54
00:03:56.948 --> 00:03:58.433
Is everybody here so far?

55
00:03:58.433 --> 00:04:01.582
Because dealing with
strings is a little tricky.

56
00:04:04.043 --> 00:04:07.137
Thumbs up, all right?

57
00:04:07.137 --> 00:04:13.486
So, what's actually happening though,
because assembly scripts,

58
00:04:13.486 --> 00:04:18.470
it does a lot of work for
us, what's really happening?

59
00:04:18.470 --> 00:04:21.005
We know that fizzbuzz(3),

60
00:04:21.005 --> 00:04:25.591
it returns a pointer to
the string in the memory buffer.

61
00:04:25.591 --> 00:04:29.146
getString takes that pointer and
it decompiles it into, or

62
00:04:29.146 --> 00:04:34.137
it takes that pointer, it reaches in,
and says like, hey, this is a string.

63
00:04:34.137 --> 00:04:37.080
I know it's a string, so
I'm gonna grab this from the memory, and

64
00:04:37.080 --> 00:04:38.289
I know the length of it, and

65
00:04:38.289 --> 00:04:41.917
then I'm gonna convert that into something
that is readable by JavaScripts, and

66
00:04:41.917 --> 00:04:44.249
then it writes it out,
we write out to the document.

67
00:04:44.249 --> 00:04:48.972
Under the hood, this is actually doing a
lot of work, and it makes it look really,

68
00:04:48.972 --> 00:04:49.799
really easy.

69
00:04:49.799 --> 00:04:54.787
And actually, let's dive into that
a little bit because the source code on

70
00:04:54.787 --> 00:04:56.777
this is really interesting.

71
00:04:56.777 --> 00:04:59.392
This is under bonus,
you don't have to memorize this.

72
00:04:59.392 --> 00:05:02.360
It's good to know what's
going on under the hood,

73
00:05:02.360 --> 00:05:07.332
because it really helps you understand the
relationship of memory and web assembly in

74
00:05:07.332 --> 00:05:11.149
assembly script in JavaScript,
and how this all ties together.

75
00:05:11.149 --> 00:05:14.533
So we're looking at the functions or
the source code for

76
00:05:14.533 --> 00:05:16.844
the getString method that we called.

77
00:05:16.844 --> 00:05:21.354
As we saw before, it takes a pointer,
which is what was turned by fizzbuzz or

78
00:05:21.354 --> 00:05:23.833
the fizz, it takes a pointer to a string.

79
00:05:23.833 --> 00:05:27.506
It checks if there's a pointer,
if not, it returns none,

80
00:05:27.506 --> 00:05:29.423
we grabbed the memory buffer.

81
00:05:29.423 --> 00:05:34.877
Remember how we said earlier that
memory is linear in web assembly,

82
00:05:34.877 --> 00:05:40.055
it is a fixed set of space that is
allocated just for our program.

83
00:05:40.055 --> 00:05:42.603
And we access that by memory buffer.

84
00:05:42.603 --> 00:05:46.431
And again, the buffer is just a buffer,

85
00:05:46.431 --> 00:05:50.266
it's a fixed string of raw binary data.

86
00:05:50.266 --> 00:05:51.913
So it really means nothing.

87
00:05:51.913 --> 00:05:54.604
It's just gibberish to the computer
until we give it purpose,

88
00:05:54.604 --> 00:05:55.630
until we give it a view.

89
00:05:55.630 --> 00:06:00.642
We'll give it a view by creating
a 32-bit array around that memory.

90
00:06:00.642 --> 00:06:05.770
I think I've made a small typo there,
but we're grabbing from the buffer.

91
00:06:05.770 --> 00:06:10.560
Now, remember how I said why don't these
numbers correspond with the data function

92
00:06:10.560 --> 00:06:11.514
in the wot file?

93
00:06:11.514 --> 00:06:16.105
It's because there's an offset
that every string that's

94
00:06:16.105 --> 00:06:18.594
saved into the memory is set to.

95
00:06:18.594 --> 00:06:22.083
We don't just save it directly to memory,
you have to give it some sort of offset,

96
00:06:22.083 --> 00:06:24.985
so that we're keep moving down
the line when we're saving things.

97
00:06:24.985 --> 00:06:28.426
Because its memory is actually
just one long continuous space,

98
00:06:28.426 --> 00:06:32.578
it's only the length and the offset that
we know where each thing is located.

99
00:06:32.578 --> 00:06:34.594
I know it's super technical, but

100
00:06:34.594 --> 00:06:37.730
it's cool to see how this
stuff works under the hood.

101
00:06:37.730 --> 00:06:42.539
So what the getString does is it pulls
the memory out, the actual ones and zeros,

102
00:06:42.539 --> 00:06:46.569
it sets it to a 32-bit array,
and it has this custom ID_OFFSET,

103
00:06:46.569 --> 00:06:50.131
it has an offset that it knows about,
along with a pointer.

104
00:06:50.131 --> 00:06:54.448
It zero fills right to the 2,
that's just to give it a common ground.

105
00:06:54.448 --> 00:06:59.578
I promised, I swore to myself I would
not get into bitwise operations

106
00:06:59.578 --> 00:07:04.282
because I think that's a bit
outside the scope of this course.

107
00:07:04.282 --> 00:07:08.770
Well, it doesn't really add
too much right now, but

108
00:07:08.770 --> 00:07:13.472
know that this is a zero [LAUGH]
fill right shift, the 2.

109
00:07:13.472 --> 00:07:17.566
It's actually taking the ones and zeros,
and shifting off to the points, and

110
00:07:17.566 --> 00:07:18.567
it add zeros to it.

111
00:07:18.567 --> 00:07:21.807
I won't get into it, but
you can look at if you want,

112
00:07:21.807 --> 00:07:25.728
it's called a zero fill right
shift if you wanna look up on MDN.

113
00:07:25.728 --> 00:07:31.066
And then from there, it calls getString in
mutation which reaches into the buffer,

114
00:07:31.066 --> 00:07:35.741
which again use the pointer, and
then it pulls it directly out of memory.

115
00:07:35.741 --> 00:07:37.971
Was that a lot?

116
00:07:37.971 --> 00:07:39.451
Yeah, it's a bit, but

117
00:07:39.451 --> 00:07:43.377
I just wannna point out how much
work the loader is doing for us.

118
00:07:43.377 --> 00:07:46.866
Otherwise, without the loader,
we'd have to do this manually ourselves.

119
00:07:46.866 --> 00:07:50.588
We'd have to reach into the memory, we'd
have to know exactly what the offset is,

120
00:07:50.588 --> 00:07:53.245
we'd have to know where to look,
the length of the string,

121
00:07:53.245 --> 00:07:54.753
the number of bits that are in it.

122
00:07:54.753 --> 00:07:59.286
And then from there, we'd have to pull
the JavaScript, convert it into text using

123
00:07:59.286 --> 00:08:02.784
the text API because we're still
dealing with binary data, and

124
00:08:02.784 --> 00:08:04.299
then we can get our string.

125
00:08:04.299 --> 00:08:07.650
But all that is solved by
using the getString method.

126
00:08:07.650 --> 00:08:12.001
So shout out to the loader, [LAUGH] it
really is impressive with the amount of

127
00:08:12.001 --> 00:08:15.330
work it does and
the amount of obfuscation it does for us.

