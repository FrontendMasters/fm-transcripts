WEBVTT

1
00:00:00.416 --> 00:00:02.143
Okay, so far.

2
00:00:02.143 --> 00:00:05.083
It's a little bit different.

3
00:00:05.083 --> 00:00:08.458
So hopefully that was explained in
a way that makes sense that you

4
00:00:08.458 --> 00:00:11.660
understand what's going on now
because we get down into it.

5
00:00:11.660 --> 00:00:16.395
If I just, [LAUGH] I made a mistake I
should have opened with like an example of

6
00:00:16.395 --> 00:00:18.961
Web Assembly and you'd be like, what?

7
00:00:18.961 --> 00:00:22.038
And then by the time you got to here,
you'd be like, okay, now this makes sense.

8
00:00:22.038 --> 00:00:26.381
That was a miss, maybe next time maybe V2.

9
00:00:26.381 --> 00:00:30.681
I really like this program
called Web Assembly Studio, and

10
00:00:30.681 --> 00:00:34.040
we'll actually we'll
open that in a second.

11
00:00:34.040 --> 00:00:37.021
But it's a fast way if you wanna
write some web assembly right now or

12
00:00:37.021 --> 00:00:39.642
real quick without building
up an entire tooling system.

13
00:00:39.642 --> 00:00:44.103
Web Assembly studio, is super useful, it's
really cool, we don't upload VS code or

14
00:00:44.103 --> 00:00:46.070
anything, it works in your browser.

15
00:00:46.070 --> 00:00:50.123
It's actually,
it's built on Web Assembly funny enough.

16
00:00:50.123 --> 00:00:53.671
And it's a really cool
open-source project.

17
00:00:53.671 --> 00:00:56.652
We're gonna use it,
actually we'll use right now,

18
00:00:56.652 --> 00:00:59.641
let's write a helloworld
function in Web Assembly.

19
00:00:59.641 --> 00:01:04.982
Yeah, we finally get to code
that less talking more coding.

20
00:01:04.982 --> 00:01:10.003
So, what we're gonna do is actually I
think I have the example right here.

21
00:01:10.003 --> 00:01:11.810
Did I save?

22
00:01:11.810 --> 00:01:16.464
I do, but I'll start off yet
let's pretend I don't have an example yet.

23
00:01:16.464 --> 00:01:18.515
Let's go to Web Assembly Studio.

24
00:01:18.515 --> 00:01:25.412
So remember we said earlier that
Web Assembly is a compile target for

25
00:01:25.412 --> 00:01:29.405
other languages, hence we write in C,

26
00:01:29.405 --> 00:01:34.255
we write in Rust,
we write in Assembly Script.

27
00:01:34.255 --> 00:01:37.555
Or we can write directly, in Web Assembly
and we won't compile at all,

28
00:01:37.555 --> 00:01:38.823
we just compile it to wasm.

29
00:01:38.823 --> 00:01:44.358
So let's open a new Empty Wat Project.

30
00:01:44.358 --> 00:01:47.141
Create.

31
00:01:47.141 --> 00:01:49.462
And we're going to main.wat.

32
00:01:49.462 --> 00:01:52.832
And we're just gonna delete out
this code that it puts in earlier.

33
00:01:52.832 --> 00:01:57.024
So when we're declaring,
when we're writing Web Assembly module,

34
00:01:57.024 --> 00:01:59.735
we start with module and
little space there.

35
00:01:59.735 --> 00:02:02.029
We're gonna create a function
called helloworld.

36
00:02:02.029 --> 00:02:03.534
So func.

37
00:02:06.021 --> 00:02:09.713
And we prefix out with dollar
sign to let us know it's a name.

38
00:02:09.713 --> 00:02:11.515
So helloworld.

39
00:02:14.959 --> 00:02:18.096
And we're gonna declare some of
the parameters to this function.

40
00:02:18.096 --> 00:02:19.996
So we're gonna say param.

41
00:02:19.996 --> 00:02:22.385
And the parameters are just
inputs to the function.

42
00:02:22.385 --> 00:02:25.924
And we're gonna call this num1, and

43
00:02:25.924 --> 00:02:32.015
we declared as a 32 bit integer,
as we discussed a bit earlier.

44
00:02:32.015 --> 00:02:34.402
And for
a function if it's not a void function,

45
00:02:34.402 --> 00:02:38.401
as in void doesn't return anything, in
this case we want it to return something

46
00:02:38.401 --> 00:02:42.402
because a void function isn't terribly
helpful for calling it from JavaScript

47
00:02:42.402 --> 00:02:46.312
because it just wouldn't output anything
unless we're writing to memory.

48
00:02:46.312 --> 00:02:47.432
So in this case,

49
00:02:47.432 --> 00:02:52.392
we're gonna say the results of
the function is a 32 bit integer as well.

50
00:02:56.735 --> 00:02:59.295
Okay, now you're with me.

51
00:02:59.295 --> 00:03:02.199
I feel it, I feel it.

52
00:03:02.199 --> 00:03:07.146
So in this case, we wanna call our
number and then we wanna return it.

53
00:03:07.146 --> 00:03:08.667
So we're just whatever the input is,

54
00:03:08.667 --> 00:03:11.529
we're just gonna spit that right back
out in this very simple example.

55
00:03:11.529 --> 00:03:16.129
So I'm gonna say get local and

56
00:03:16.129 --> 00:03:19.995
we're gonna say num1.

57
00:03:19.995 --> 00:03:22.851
So get local,
what it does is it grabs the locals,

58
00:03:22.851 --> 00:03:26.198
the locals are known as
the parameters that would pass in.

59
00:03:26.198 --> 00:03:30.658
We can also say get globals, globals
are the same concept as in JavaScript.

60
00:03:30.658 --> 00:03:32.511
They're things that are globally
declared with an object.

61
00:03:32.511 --> 00:03:38.190
So different numbers and, well,
generally numbers, we can pull those in.

62
00:03:38.190 --> 00:03:40.235
But in this case,
we're gonna say get local,

63
00:03:40.235 --> 00:03:43.024
which is an opcode,
which we'll discuss in the next section.

64
00:03:43.024 --> 00:03:47.461
The return on Web Assembly
modules is implied, so

65
00:03:47.461 --> 00:03:52.541
this will actually just return
the number that we put in.

66
00:03:52.541 --> 00:03:54.269
Next, we have a function, but

67
00:03:54.269 --> 00:03:58.202
we need to actually tell JavaScript
that this function is available.

68
00:03:58.202 --> 00:04:00.350
So we do that with the export command.

69
00:04:00.350 --> 00:04:03.336
So we're gonna export a function
we can call it whatever but

70
00:04:03.336 --> 00:04:06.681
I'm just gonna call it the same
name as we did before because well,

71
00:04:06.681 --> 00:04:08.672
it makes it easy to reason about later.

72
00:04:08.672 --> 00:04:11.696
So we're exporting something
called helloworld.

73
00:04:11.696 --> 00:04:14.778
And now we're going to
declare that it's a function.

74
00:04:14.778 --> 00:04:18.915
And the function is
actually the helloworld

75
00:04:18.915 --> 00:04:22.948
function that we see, that we just wrote.

76
00:04:22.948 --> 00:04:25.478
Okay, and then don't forget to save.

77
00:04:25.478 --> 00:04:27.376
That's really important.

78
00:04:27.376 --> 00:04:30.848
And let's build it and
see if I have any errors.

79
00:04:30.848 --> 00:04:34.105
Hey, no errors cool.

80
00:04:34.105 --> 00:04:36.350
Let's jump to the main.js.

81
00:04:36.350 --> 00:04:40.874
We'll cover converting Web Assembly
fetching and all these things a bit later.

82
00:04:40.874 --> 00:04:43.956
I don't want to get bogged down
into that because that's more

83
00:04:43.956 --> 00:04:47.642
the browser implementation of
Web Assembly and not Web Assembly itself.

84
00:04:47.642 --> 00:04:52.240
But in this case, because we declare our
exports, when we fetch the Web Assembly

85
00:04:52.240 --> 00:04:56.651
module, it's going to have exports as
one of the properties on the objects.

86
00:04:56.651 --> 00:05:03.843
And that property that
export is helloworld.

87
00:05:03.843 --> 00:05:08.504
And we'll say I don't know, 42.

88
00:05:08.504 --> 00:05:09.373
And then again,

89
00:05:09.373 --> 00:05:13.730
don't forget to save it is the most common
mistake I always make is I forget to save.

90
00:05:13.730 --> 00:05:16.913
And let's build and run.

91
00:05:16.913 --> 00:05:20.995
Hey, not bad, not bad, everybody there

92
00:05:20.995 --> 00:05:25.899
everybody get 42 or
whatever number you put in?

93
00:05:25.899 --> 00:05:28.041
Yeah, congratulations.

94
00:05:28.041 --> 00:05:31.149
You just wrote Web Assembly by hand.

95
00:05:31.149 --> 00:05:32.236
I am so proud of you.

96
00:05:32.236 --> 00:05:34.022
Wait.

97
00:05:34.022 --> 00:05:36.267
[SOUND] You all have come so far.

98
00:05:36.267 --> 00:05:37.983
I bet you didn't think you'd
be writing assembly today.

99
00:05:37.983 --> 00:05:38.804
Actually, you did.

100
00:05:38.804 --> 00:05:40.576
You probably like I'm taking
a class on Web Assembly,

101
00:05:40.576 --> 00:05:41.702
we're gonna write web assembly.

102
00:05:41.702 --> 00:05:43.927
You just did.

103
00:05:43.927 --> 00:05:47.960
Remember, we wrote we use the wat file.

104
00:05:47.960 --> 00:05:49.924
But that's not actually what's
running in the browser.

105
00:05:49.924 --> 00:05:53.044
It's actually the wasm file,
which you can't edit directly.

106
00:05:53.044 --> 00:05:57.558
So Web Assembly Studio will just tell you
to use the wat file if you try to edit it

107
00:05:57.558 --> 00:05:59.449
and it even gives you a warning.

108
00:05:59.449 --> 00:06:02.481
Because again,
the wasm file is just binary data,

109
00:06:02.481 --> 00:06:04.534
it wouldn't make any sense to us.

110
00:06:04.534 --> 00:06:06.557
It's actually not terribly readable.

111
00:06:06.557 --> 00:06:13.132
It is readable but we're not that beginner
and so we can read, raw Web Assembly.

112
00:06:13.132 --> 00:06:14.157
That was it.

113
00:06:14.157 --> 00:06:18.727
That is in the nutshell
how to write web assembly.

114
00:06:18.727 --> 00:06:20.910
Now, let's build on this a bit.

115
00:06:20.910 --> 00:06:23.355
Now that we kind of all
have this fundamental base.

116
00:06:23.355 --> 00:06:28.884
We understand types, we understand
like how to return functions,

117
00:06:28.884 --> 00:06:34.326
things like that we understand for
some reason the s expressions.

118
00:06:34.326 --> 00:06:39.191
Okay, so we wrote a really, really
basic example, I probably should add,

119
00:06:39.191 --> 00:06:43.904
if you wanna put a comment in your
Web Assembly it's two semi colons back to

120
00:06:43.904 --> 00:06:46.659
back and
that is a comment in Web Assembly.

121
00:06:46.659 --> 00:06:49.070
Always useful to know how to
write comments in any language.

