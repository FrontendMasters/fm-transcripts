WEBVTT

1
00:00:00.182 --> 00:00:06.987
We are there we're done, we've spent
an entire day writing low level code and

2
00:00:06.987 --> 00:00:13.397
understanding [LAUGH] unsigned eight
bit integers and all that fun stuff.

3
00:00:13.397 --> 00:00:17.560
I wrote all this in markdown in VS Code so
that that means I essentially have no

4
00:00:17.560 --> 00:00:21.741
grammar and spell check, so there
are probably plenty of spelling errors.

5
00:00:21.741 --> 00:00:25.315
If you see any, please follow
this you are open a pull request,

6
00:00:25.315 --> 00:00:29.430
I really appreciate that if you want
to start to make it more available for

7
00:00:29.430 --> 00:00:31.874
other people, I appreciate that as well.

8
00:00:31.874 --> 00:00:37.072
There are some further resources,
WASI is increasingly becoming

9
00:00:37.072 --> 00:00:42.103
very popular, WASI is essentially
an API into the file system.

10
00:00:42.103 --> 00:00:45.769
So right now if I wanted to
read files from web assembly,

11
00:00:45.769 --> 00:00:50.061
I'd have to load those into memory
convert those and do all that.

12
00:00:50.061 --> 00:00:54.416
That unfun byte conversion,
reading the buffers and pointers and

13
00:00:54.416 --> 00:00:59.312
all that, WASI Its goal is to provide
an a standardized API that works on any

14
00:00:59.312 --> 00:01:01.974
files or works on any operating system.

15
00:01:01.974 --> 00:01:06.128
And you can do things like reading a file
and doing all the low level desktop

16
00:01:06.128 --> 00:01:10.551
operations that we've come to know and
love, but we can do it in web assembly.

17
00:01:10.551 --> 00:01:15.645
That's the goal of WASI, I expect you'll
hear a lot more about this in the future.

18
00:01:15.645 --> 00:01:20.239
So if you want to stay ahead of the curve,
this is we'll say the new hotness and

19
00:01:20.239 --> 00:01:23.434
web assembly it's not that new but
it's new enough.

20
00:01:23.434 --> 00:01:28.857
There's made with web assembly if you
wanna see what people have done so far.

21
00:01:28.857 --> 00:01:31.998
And if you wanna look at some of the
source code, and you'll see what I mean

22
00:01:31.998 --> 00:01:34.902
when I say web assembly gets very,
very complicated very quickly.

23
00:01:34.902 --> 00:01:39.123
Here's a collection of resources
I believe, I think actually,

24
00:01:39.123 --> 00:01:42.190
Amy you shared this with
me who is in the chat, or

25
00:01:42.190 --> 00:01:46.896
somebody shared this with me I
appreciate whoever sends me these links.

26
00:01:46.896 --> 00:01:50.539
Figma is probably one of the bigger
cases that modern front end

27
00:01:50.539 --> 00:01:51.948
engineers know about.

28
00:01:51.948 --> 00:01:56.055
They're using baby wrote their entire
front ends to use web assembly which

29
00:01:56.055 --> 00:01:56.976
is pretty cool.

30
00:01:56.976 --> 00:02:00.278
They're probably one of the bigger
users or most well known right now.

31
00:02:02.866 --> 00:02:07.712
I remember how we had to do that kind
of ugliness with underscore get string

32
00:02:07.712 --> 00:02:11.304
to get a pointer to get a string
out of the web assembly,

33
00:02:11.304 --> 00:02:16.014
as bind I aims to fix that problem,
so you don't have to use the loader.

34
00:02:16.014 --> 00:02:19.797
You can pass data structures like
objects and arrays and strings back and

35
00:02:19.797 --> 00:02:22.166
forth between web assembly and JavaScript.

36
00:02:22.166 --> 00:02:23.816
It does all of that work for

37
00:02:23.816 --> 00:02:27.950
you without having to get into
that low level mess with pointers.

38
00:02:27.950 --> 00:02:33.291
So as mine is a pretty cool library pretty
useful as well and it's still being

39
00:02:33.291 --> 00:02:39.064
updated, I won't go through all these
binary and is the compiler and tool chain.

40
00:02:39.064 --> 00:02:44.138
That is how Literally all the web assembly
we know from JavaScript to rust and

41
00:02:44.138 --> 00:02:46.764
all that gets built into web assembly.

42
00:02:46.764 --> 00:02:51.359
The one you've probably heard of or
may have heard of is Emscripten,

43
00:02:51.359 --> 00:02:54.053
that is the compiler tool chain that c and

44
00:02:54.053 --> 00:02:59.221
rust in all those use to convert from
those languages into another assembly.

45
00:02:59.221 --> 00:03:03.602
It uses under the hood binary and on top
of that, so it just you will hear if you

46
00:03:03.602 --> 00:03:08.684
get into web assembly you'll definitely
hear of Emscripten it's extremely popular.

47
00:03:08.684 --> 00:03:13.906
It's fairly mature right now, and
the people I work on are just pretty,

48
00:03:13.906 --> 00:03:19.992
pretty awesome, I'll skip build with web
assembly or our build assembly scripts.

49
00:03:19.992 --> 00:03:23.895
Actually, we can look at it real quick,
this is on this assembly script.org.

50
00:03:23.895 --> 00:03:29.127
It's a bunch of things built with assembly
scripts, just to show you what you can do

51
00:03:29.127 --> 00:03:34.610
web assembly studio that thing, the editor
we just use was built in assembly scripts.

52
00:03:34.610 --> 00:03:37.399
That's, it's pretty cool, but

53
00:03:37.399 --> 00:03:42.399
these are examples of things you
can do anything is possible,

54
00:03:42.399 --> 00:03:46.167
in fact,
I consider this a pretty short list.

55
00:03:46.167 --> 00:03:51.471
I think, there are a lot more powerful
features or powerful applications that,

56
00:03:51.471 --> 00:03:56.158
just haven't been build yet,
people just haven't bothered to do it.

57
00:03:56.158 --> 00:03:59.730
And the last one, I wanted to point out,

58
00:03:59.730 --> 00:04:06.048
there is an epilepsy warning around
this cuz it's [SOUND] it will flash.

59
00:04:06.048 --> 00:04:10.356
But the reason why I stayed away
from more complicated use cases of

60
00:04:10.356 --> 00:04:14.974
assembly script is because, well,
it gets it gets nigh unreadable,

61
00:04:14.974 --> 00:04:18.293
remember we talked about
bitwise operations?.

62
00:04:18.293 --> 00:04:20.919
Yeah, we do, you do a lot of those, so

63
00:04:20.919 --> 00:04:23.960
I tried to stay away
from Things like this but

64
00:04:23.960 --> 00:04:29.567
if you if you wanna see what it looks like
what a real application doing real work.

65
00:04:29.567 --> 00:04:34.923
In this case it is gonna think
like a flashing pretty cool image,

66
00:04:34.923 --> 00:04:41.180
it's this is all written in assembly
script and compiled to web assembly.

67
00:04:41.180 --> 00:04:46.945
I'm not quite sure what it does, it's kind
cool, kind of just kind of move with it,

68
00:04:46.945 --> 00:04:51.333
I, but you can look at the source
code here and see exactly what it

69
00:04:51.333 --> 00:04:55.989
means to write to memory to do bit
manipulation, things like that.

70
00:04:55.989 --> 00:04:59.929
We stayed away from that cuz again,
it's too complicated but

71
00:04:59.929 --> 00:05:02.973
You can dive as deep as
you want in web assembly.

72
00:05:02.973 --> 00:05:06.207
Or you can stick at a higher
level with assembly scripts and

73
00:05:06.207 --> 00:05:07.859
just just to create content.

74
00:05:07.859 --> 00:05:14.438
&gt;&gt; Is there a watcher for
that assembly script build process?

75
00:05:14.438 --> 00:05:19.927
&gt;&gt; There is I don't think it's
built into assembly script,

76
00:05:19.927 --> 00:05:24.746
It might be somewhere in
the tooling that I haven't

77
00:05:24.746 --> 00:05:29.004
discovered but
there are watchers for node,

78
00:05:29.004 --> 00:05:34.513
actually no just look this up,
node like node watcher no.

79
00:05:34.513 --> 00:05:37.667
Yeah, I think actually
will node mon do it.

80
00:05:37.667 --> 00:05:40.343
&gt;&gt; So no mine would take care of that and
as you change your.

81
00:05:40.343 --> 00:05:44.613
&gt;&gt; Yeah, any sort of watcher
that watches the file system for

82
00:05:44.613 --> 00:05:49.420
changes and then executes whatever
command you want would work.

83
00:05:49.420 --> 00:05:50.195
&gt;&gt; Okay.

84
00:05:50.195 --> 00:05:50.756
&gt;&gt; That's a good point.
&gt;&gt; So

85
00:05:50.756 --> 00:05:53.087
it doesn't matter that
it's the AS build process?

86
00:05:53.087 --> 00:05:54.191
&gt;&gt; Doesn't matter.

87
00:05:54.191 --> 00:05:55.104
&gt;&gt; Okay, cool.

88
00:05:55.104 --> 00:05:59.968
&gt;&gt; Good question though, one of the
questions was if you were to create a new

89
00:05:59.968 --> 00:06:03.972
WASI projects,
what is the the language you would choose.

90
00:06:03.972 --> 00:06:06.267
If I'm understanding correctly, and

91
00:06:06.267 --> 00:06:10.241
that's totally dependent on what
you're most comfortable with.

92
00:06:10.241 --> 00:06:13.565
And generally we're writing assembly
script because I'm most comfortable in

93
00:06:13.565 --> 00:06:14.167
JavaScript.

94
00:06:14.167 --> 00:06:18.247
If you are a C programmer or rust
programmer, I would write in C or rust,

95
00:06:18.247 --> 00:06:22.944
those are going to be a bit more powerful
languages and they're a bit more mature.

96
00:06:22.944 --> 00:06:26.394
When it comes to the platform so
you can do more things,

97
00:06:26.394 --> 00:06:31.044
I guess one of the differences and
one of the issues with writing in Rust and

98
00:06:31.044 --> 00:06:35.769
C versus assembly Script is, we saw
that without including that run time,

99
00:06:35.769 --> 00:06:40.720
we can actually get really, small WASI
files that are easy to digest and read.

100
00:06:40.720 --> 00:06:45.600
However, when you write in C or Rust,
because they're not native JavaScript,

101
00:06:45.600 --> 00:06:50.264
they include a lot of boilerplate Glue
Code that can make the WOT files a little

102
00:06:50.264 --> 00:06:51.654
bit harder to digest.

103
00:06:51.654 --> 00:06:55.879
And the files they send down the pipe for,
like even a really simple example,

104
00:06:55.879 --> 00:06:57.191
tend to be quite large.

105
00:06:57.191 --> 00:07:00.239
Whereas assembly script, we can
actually get that down pretty minimal.

106
00:07:00.239 --> 00:07:04.235
So, that long answer to which language
would you use if starting new Web

107
00:07:04.235 --> 00:07:08.974
assembly project it's, I would use
whatever language you're comfortable with.

108
00:07:08.974 --> 00:07:11.482
And that is supported by web assembly,

109
00:07:11.482 --> 00:07:15.511
let's see if they have a list
of languages that are supported.

110
00:07:15.511 --> 00:07:18.539
Yeah, there we go, good old open source.

111
00:07:18.539 --> 00:07:24.496
So, apparently all these languages
are relatively well supported for

112
00:07:24.496 --> 00:07:26.488
writing web assembly.

113
00:07:26.488 --> 00:07:32.397
Dot net who knew, the, go,

114
00:07:32.397 --> 00:07:37.569
we're interesting so,

115
00:07:37.569 --> 00:07:43.983
write PHP not quite there yet.

116
00:07:43.983 --> 00:07:47.287
So essentially, you can,
according to this,

117
00:07:47.287 --> 00:07:52.573
you can use a lot of languages so you
kind of have whatever you want to choose,

118
00:07:52.573 --> 00:07:57.458
I assume you're probably gonna know
at least one of these languages.

119
00:07:57.458 --> 00:08:01.564
You know what I thought
Java was better supported,

120
00:08:01.564 --> 00:08:04.726
it's interesting I think that's it.

121
00:08:04.726 --> 00:08:09.361
There's a special thanks to Bryan Holt, he
actually created a course startup kit, so

122
00:08:09.361 --> 00:08:13.549
if you have a course you wanna create,
he has a course starter on GitHub that you

123
00:08:13.549 --> 00:08:17.636
just clone, and you can create all of
your course and markdown and use that.

124
00:08:17.636 --> 00:08:21.865
My friend Justine, and Luna, they helped
me with the site design to make this

125
00:08:21.865 --> 00:08:23.764
a little bit prettier for you all.

126
00:08:23.764 --> 00:08:28.031
Because before it's like this narrow
amount of space, garbage, and

127
00:08:28.031 --> 00:08:30.865
of course the entire
team in front of masters.

128
00:08:30.865 --> 00:08:35.465
We literally spent four hours yesterday
getting the entire studio set up they're

129
00:08:35.465 --> 00:08:38.075
awesome, they've made it really painless.

130
00:08:38.075 --> 00:08:42.035
And of course Special thanks my wife and
son who they put up with me,

131
00:08:42.035 --> 00:08:44.463
I don't know why but I love them dearly.

132
00:08:44.463 --> 00:08:47.732
And with that, thank you for
taking the course,

133
00:08:47.732 --> 00:08:50.453
reach out to me on twitter if this helps.

134
00:08:50.453 --> 00:08:55.329
If you have suggestions, again,
file a PR if you see something missing or

135
00:08:55.329 --> 00:09:00.047
there should be a note or agenda I
should add into the content but if not,

136
00:09:00.047 --> 00:09:02.032
go forth and build, thanks.

