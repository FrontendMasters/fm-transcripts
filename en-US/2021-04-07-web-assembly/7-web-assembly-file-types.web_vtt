WEBVTT

1
00:00:00.250 --> 00:00:01.800
What is Web Assembly?

2
00:00:01.800 --> 00:00:07.280
Like, really I've mentioned it
several times, but really, what is it?

3
00:00:07.280 --> 00:00:09.944
Is it a language we code directly?

4
00:00:09.944 --> 00:00:12.310
A little bit, yeah.

5
00:00:12.310 --> 00:00:16.050
Is it a faster replacement for JavaScript?

6
00:00:16.050 --> 00:00:20.380
No, it's a compliment to JavaScript
that works in tandem with it.

7
00:00:20.380 --> 00:00:26.244
But really what it is, is a low level
language that we actually compile to.

8
00:00:26.244 --> 00:00:31.189
It is meant to be compiled
from Assemblyscript or Rusts,

9
00:00:31.189 --> 00:00:35.300
or C and
all these other languages into wasm.

10
00:00:35.300 --> 00:00:38.660
And I'll say wasm Web Assembly,
I'll use them interchangeably.

11
00:00:38.660 --> 00:00:41.815
If you see wasm it's short for
Web Assembly,

12
00:00:41.815 --> 00:00:46.800
we're actually not meant to
write Web Assembly directly.

13
00:00:46.800 --> 00:00:50.681
As we'll see later, we'll some examples
of what Web Assembly looks like.

14
00:00:50.681 --> 00:00:53.637
Things will get complicated very quickly.

15
00:00:53.637 --> 00:00:55.661
But I want you to know it
because if you read the blog,

16
00:00:55.661 --> 00:00:57.890
you'll have to look at Web Assembly files.

17
00:00:57.890 --> 00:00:59.177
But what it is,

18
00:00:59.177 --> 00:01:05.121
is Web Assembly the secure sandbox
area that runs in near native speed,

19
00:01:05.121 --> 00:01:11.720
almost runs at the speed of a program
that is written on the desktop itself.

20
00:01:11.720 --> 00:01:15.475
But it's running in the browser, which is
pretty phenomenal cuz the browser actually

21
00:01:15.475 --> 00:01:18.523
is a pretty high level abstraction
over the operating system itself.

22
00:01:18.523 --> 00:01:21.534
Which is a high level abstraction
over axing the memory and CPU,

23
00:01:21.534 --> 00:01:22.889
the registers and all that.

24
00:01:22.889 --> 00:01:28.018
So the fact that Web Assembly can run
it almost that speed of application

25
00:01:28.018 --> 00:01:33.076
written natively for a particular
platform, is pretty impressive.

26
00:01:33.076 --> 00:01:37.982
The difference in, I know this is gonna
come up, and someone will ask you this,

27
00:01:37.982 --> 00:01:41.590
so, why Web Assembly and not a web worker.

28
00:01:41.590 --> 00:01:44.740
There's probably two main things.

29
00:01:44.740 --> 00:01:49.418
One is Web Assembly can be cached, so we
can fetch our wasm file from the server.

30
00:01:49.418 --> 00:01:52.434
It's instantiated and
then it's cached in memory,

31
00:01:52.434 --> 00:01:56.060
versus a worker which has to be
instantiated every single time.

32
00:01:57.360 --> 00:02:01.621
And as you know, Web Worker is a way of
spinning up a separate thread away from

33
00:02:01.621 --> 00:02:03.690
the UI thread in JavaScript.

34
00:02:03.690 --> 00:02:06.870
It's generally how we were
doing heavy computation before.

35
00:02:06.870 --> 00:02:09.900
And there are pros and
cons to a worker versus Web Assembly.

36
00:02:09.900 --> 00:02:14.772
But at the end of the day, remember
Web Assembly isn't necessarily written for

37
00:02:14.772 --> 00:02:17.755
JavaScript engineers to
make our lives easier,

38
00:02:17.755 --> 00:02:22.720
it's written for other types of languages
that compile down into Web Assembly.

39
00:02:23.840 --> 00:02:27.031
And that to me is one of the bigger,
I think points of contention, and

40
00:02:27.031 --> 00:02:29.452
points that people miss
about what Web Assembly is,

41
00:02:29.452 --> 00:02:32.936
they're like, why wouldn't you use
a Web Worker, you can offload.

42
00:02:32.936 --> 00:02:35.330
You can do a lot of the same
things in Web Worker.

43
00:02:35.330 --> 00:02:37.606
You can do it in Web Assembly,
well, not same things, but

44
00:02:37.606 --> 00:02:39.100
you can perform heavy calculations.

45
00:02:39.100 --> 00:02:40.912
You don't block the UI thread.

46
00:02:40.912 --> 00:02:43.240
You can pass information back and forth.

47
00:02:43.240 --> 00:02:45.450
Yeah, there's definitely use case for
workers.

48
00:02:45.450 --> 00:02:49.200
But Web Assembly isn't designed
to compete with workers.

49
00:02:49.200 --> 00:02:52.390
It's designed for other languages compiled
down and we have this shared platform.

50
00:02:54.680 --> 00:02:58.013
Is there nods is that everybody
understands that ,because I

51
00:02:58.013 --> 00:03:02.410
think that's the biggest thing of like,
what is Web Assembly for?

52
00:03:02.410 --> 00:03:03.910
What are we using it for?

53
00:03:03.910 --> 00:03:05.600
Why not use these other features?

54
00:03:05.600 --> 00:03:08.689
It's primarily designed to
run in other languages.

55
00:03:10.330 --> 00:03:12.827
Okay, any questions on that?

56
00:03:12.827 --> 00:03:13.703
All right, cool.

57
00:03:17.177 --> 00:03:23.480
So this also confused me when I was first
looking into, what is Web Assembly?

58
00:03:23.480 --> 00:03:27.357
So if you can't tell, I designed this
course around all of the questions that I

59
00:03:27.357 --> 00:03:30.372
had when I was learning these things,
and I write them down.

60
00:03:30.372 --> 00:03:32.469
So that when you run
in the same questions,

61
00:03:32.469 --> 00:03:35.890
you hopefully won't have
the same problems I have.

62
00:03:35.890 --> 00:03:40.220
When I saw that Web Assembly had
two different types of files.

63
00:03:40.220 --> 00:03:41.450
I was like, what?

64
00:03:42.780 --> 00:03:44.600
What, did it?

65
00:03:44.600 --> 00:03:49.230
Nobody, man,
my jokes aren't landing today, all right.

66
00:03:49.230 --> 00:03:53.290
So, Web Assembly there is the wasm file.

67
00:03:53.290 --> 00:03:58.150
The .wasm file is the actual assembly
code, written in binary format,

68
00:03:58.150 --> 00:03:59.990
that the machine will run.

69
00:04:01.210 --> 00:04:02.780
It is not readable by humans.

70
00:04:02.780 --> 00:04:09.062
It's just a bunch of hexs and
zeros, and things like that.

71
00:04:09.062 --> 00:04:13.300
We're never gonna access it directly,
we're never gonna read it directly.

72
00:04:14.360 --> 00:04:18.086
Fortunately, the good people
who created Web Assembly and

73
00:04:18.086 --> 00:04:20.182
this giant committee of people.

74
00:04:20.182 --> 00:04:25.169
They're like, well, it turns out
people wana debug their program, so

75
00:04:25.169 --> 00:04:30.890
we can make them debug actual assembly
code like actual binary code.

76
00:04:30.890 --> 00:04:32.898
Or we create another file
that goes alongside it.

77
00:04:32.898 --> 00:04:40.369
And that's the wat file, the wat file is
a text format, it's readable by humans.

78
00:04:40.369 --> 00:04:42.750
We only use it for editing and debugging.

79
00:04:42.750 --> 00:04:47.368
But at the end of day, it's still
gonna get compiled to a wasm file, so

80
00:04:47.368 --> 00:04:51.830
you can edit your wat file all day and
say you compile it back to wasm,

81
00:04:51.830 --> 00:04:54.044
it doesn't really do anything.

82
00:04:54.044 --> 00:04:58.188
It's interesting that it is a format that,
the wat file, that you're coding but

83
00:04:58.188 --> 00:05:00.232
you're not actually coding anything,

84
00:05:00.232 --> 00:05:03.110
until it's compiled the machine
can't run it at all.

85
00:05:03.110 --> 00:05:06.860
It's purely for
us humans who can't read binary.

86
00:05:06.860 --> 00:05:09.784
And, so all the files today,
when we talk about,

87
00:05:09.784 --> 00:05:12.163
when we write some Web Assembly in a bit.

88
00:05:12.163 --> 00:05:14.715
And when we see Web Assembly and
we see examples of it,

89
00:05:14.715 --> 00:05:16.680
it's always in the wat format.

90
00:05:16.680 --> 00:05:18.310
It's not in wasm format.

91
00:05:18.310 --> 00:05:22.375
The wasm was what we're gonna
import into our browser later.

92
00:05:24.395 --> 00:05:26.990
Okay, I want to clear it up, cuz it does.

93
00:05:26.990 --> 00:05:30.266
When you look at Web Assembly it does
seem confusing, and it's a weird,

94
00:05:30.266 --> 00:05:33.800
I don't know if there's other
languages that have that concept of.

95
00:05:33.800 --> 00:05:36.366
There's two different formats,
like the actual code being run and

96
00:05:36.366 --> 00:05:38.320
the actual code that you're writing.

97
00:05:38.320 --> 00:05:40.898
And there are two different
files that you pull together or

98
00:05:40.898 --> 00:05:42.910
that are sent down together.

99
00:05:42.910 --> 00:05:45.350
So it's a little tricky, okay.

100
00:05:45.350 --> 00:05:48.226
Also wat, is just funny,
it's a funny name for file format.

