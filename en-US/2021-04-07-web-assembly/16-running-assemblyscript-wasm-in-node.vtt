WEBVTT

1
00:00:00.080 --> 00:00:03.240
So we've written our assembly script.

2
00:00:03.240 --> 00:00:05.493
We now have a web assembly function.

3
00:00:05.493 --> 00:00:07.477
It's being exported.

4
00:00:07.477 --> 00:00:08.720
So let's run it.

5
00:00:08.720 --> 00:00:11.580
Let's run our web assembly.

6
00:00:11.580 --> 00:00:16.030
Fortunately, assembly script does
a lot of the heavy lifting for you.

7
00:00:16.030 --> 00:00:19.420
It's creates this index.js file.

8
00:00:24.144 --> 00:00:27.550
Which automatically imports,
everything in the build directory.

9
00:00:28.580 --> 00:00:32.116
So as we said before, the build directory
has, all of the files and source maps,

10
00:00:32.116 --> 00:00:32.800
along with it.

11
00:00:34.380 --> 00:00:39.890
And it's automatically imported right
here, through the build optimized lasme.

12
00:00:39.890 --> 00:00:42.610
So if we wanna use it,
we can just call it.

13
00:00:42.610 --> 00:00:46.260
So let's go ahead and call that now,
let's use node to call our function.

14
00:00:47.640 --> 00:00:51.333
So what I'm going to say is,
I'm just gonna run an instance of node, so

15
00:00:51.333 --> 00:00:52.450
I'm gonna say node.

16
00:00:54.050 --> 00:00:57.760
And I want to import
that function we wrote.

17
00:00:57.760 --> 00:01:01.530
So I'm gonna say cost,
and what do we call it?

18
00:01:01.530 --> 00:01:08.210
Minus one and I'm just gonna require
that in from the index.js file.

19
00:01:18.910 --> 00:01:25.399
Alright, so let's go and
run that -12 should give me a 1.

20
00:01:25.399 --> 00:01:27.794
Congratulation sorry.

21
00:01:27.794 --> 00:01:30.860
Clapping, clapping, nice job.

22
00:01:30.860 --> 00:01:34.279
You've now written assembly script
compile to web assembly and

23
00:01:34.279 --> 00:01:36.820
now you're running that
web assembly in node.

24
00:01:38.270 --> 00:01:40.030
That's pretty cool.

25
00:01:40.030 --> 00:01:41.670
And I love that it's just automatic.

26
00:01:41.670 --> 00:01:48.800
So every function we export here will
end up being required into the index.js.

27
00:01:48.800 --> 00:01:50.330
And the pull it out and use it.

28
00:01:50.330 --> 00:01:51.543
We just require it in.

29
00:01:51.543 --> 00:01:52.774
Using web assembly and

30
00:01:52.774 --> 00:01:57.390
node is a bit more straightforward because
you don't have to fetch the wasum files.

31
00:01:57.390 --> 00:02:00.130
You don't have to compile them or
anything like that.

32
00:02:00.130 --> 00:02:03.642
The assembly script loader
does all that work for you.

33
00:02:04.938 --> 00:02:07.480
All right, we're cruising along now.

34
00:02:07.480 --> 00:02:09.590
Let's, get to something.

35
00:02:11.580 --> 00:02:16.244
Well, It's a bit more
challenging I'll say,

36
00:02:16.244 --> 00:02:22.077
because browsers inherently
don't have the concept of all

37
00:02:22.077 --> 00:02:27.340
of the glue code that is
required to run web assembly.

38
00:02:28.530 --> 00:02:31.930
We have to import that in which
we'll get to a little bit later.

39
00:02:31.930 --> 00:02:36.642
But remember, Web Assembly is not this
native thing that's built into browsers

40
00:02:36.642 --> 00:02:39.130
and then implicitly know how to run.

41
00:02:39.130 --> 00:02:43.100
What browsers know how to
do is execute a wasum file.

42
00:02:43.100 --> 00:02:46.348
That's it, but to actually glue
that together to make that useful,

43
00:02:46.348 --> 00:02:49.159
we have to call it from JavaScript,
which we know how to do.

44
00:02:49.159 --> 00:02:53.956
But that involves writing some glue
code to fetch that web assembly,

45
00:02:53.956 --> 00:02:59.578
compile it, export those functions, and
then once we export those functions,

46
00:02:59.578 --> 00:03:03.316
we can use them in JavaScript,
which is pretty cool.

