WEBVTT

1
00:00:00.310 --> 00:00:03.310
Okay, I know I lost some of
you [LAUGH] a little bit,

2
00:00:03.310 --> 00:00:07.889
because that was really tactical, and
we're gonna get more tactical now.

3
00:00:07.889 --> 00:00:11.485
But [LAUGH] the good news is
we're getting to the end,

4
00:00:11.485 --> 00:00:14.199
I specifically saved memory for last.

5
00:00:14.199 --> 00:00:18.795
I touched on it, we danced around it, but
I stayed away from it because this is

6
00:00:18.795 --> 00:00:22.685
where, for me as an engineer,
when I was learning these things,

7
00:00:22.685 --> 00:00:27.320
it got really confusing because I'm
just not used to thinking about memory.

8
00:00:27.320 --> 00:00:30.219
I'm used to everything happening for me.

9
00:00:31.934 --> 00:00:36.871
But the best way to visualize
memory in web assembly is

10
00:00:36.871 --> 00:00:41.380
it's this long,
unbroken chain of 0s and 1s.

11
00:00:41.380 --> 00:00:42.508
That's all it is.

12
00:00:42.508 --> 00:00:50.115
It's 0s and 1s nonstop to,
I don't know, 1,000?

13
00:00:50.115 --> 00:00:55.320
No, I can't even think of the cases
it's way, way larger than that.

14
00:00:55.320 --> 00:00:58.860
But right now it's just those 1s and
0s are gibberish.

15
00:00:58.860 --> 00:01:02.540
The computer doesn't know and our program
doesn't know where to start and stop.

16
00:01:02.540 --> 00:01:07.667
It doesn't know if this section of
code here is a 32 bit number or

17
00:01:07.667 --> 00:01:10.570
this is a bunch of eight bit numbers.

18
00:01:10.570 --> 00:01:12.570
It doesn't know if it's signed or
unsigned.

19
00:01:12.570 --> 00:01:16.690
It literally means nothing to
the computer until we give it a view.

20
00:01:16.690 --> 00:01:18.723
And we give it a view using an array, or

21
00:01:18.723 --> 00:01:21.820
we convert from array buffer
into a typed array buffer.

22
00:01:21.820 --> 00:01:23.930
I'll talk about array buffers in second.

23
00:01:23.930 --> 00:01:29.662
But dealing with memory, the good thing
about web assembly is that it is linear,

24
00:01:29.662 --> 00:01:31.730
it doesn't jump around.

25
00:01:31.730 --> 00:01:33.440
That means it's very efficient.

26
00:01:33.440 --> 00:01:36.501
Memory that is co-located next to
each other is going to be faster to

27
00:01:36.501 --> 00:01:38.930
access that memory that is
spread all over the place.

28
00:01:40.360 --> 00:01:45.734
Have you ever all, this is a throwback to
the Windows days, but do you remember,

29
00:01:45.734 --> 00:01:50.409
it was Windows 95, do you remember
defragmenting your hard drive?

30
00:01:50.409 --> 00:01:53.305
Yeah, it's satisfying and
you're watching the bits.

31
00:01:53.305 --> 00:01:55.971
What that is doing is it's
actually taking disparate

32
00:01:55.971 --> 00:01:59.420
portions of memory on the hard disk and
it's putting them together.

33
00:01:59.420 --> 00:02:01.218
So it makes it faster to read.

34
00:02:01.218 --> 00:02:03.774
Because technically,
when you're reading from memory,

35
00:02:03.774 --> 00:02:06.800
you can actually read from wherever,
that's why it's called RAM.

36
00:02:06.800 --> 00:02:10.537
It's called random access memory,
memory and can be all over the place.

37
00:02:10.537 --> 00:02:14.484
In web assembly, the memory is specific
and it's in a specific location and

38
00:02:14.484 --> 00:02:18.650
it's all linear, which makes it very,
very fast and efficient.

39
00:02:18.650 --> 00:02:23.379
But that also means we have to
track exactly what we need and

40
00:02:23.379 --> 00:02:27.250
what type of data it is,
in order to extract it.

41
00:02:27.250 --> 00:02:34.760
In other languages, like C, for example,
we think of memory in terms of pointers.

42
00:02:34.760 --> 00:02:37.470
And a pointer is just an address
to a memory location,

43
00:02:37.470 --> 00:02:40.610
somewhere in memory,
it actually doesn't matter.

44
00:02:40.610 --> 00:02:42.230
It's technically in the heap.

45
00:02:42.230 --> 00:02:45.654
And a heap is a dynamic
nonlinear memory that any

46
00:02:45.654 --> 00:02:48.830
program used to save all their operations.

47
00:02:48.830 --> 00:02:50.133
JavaScript has a heap.

48
00:02:50.133 --> 00:02:52.490
You've probably heard
the phrase the JavaScript heap.

49
00:02:52.490 --> 00:02:57.462
When you think heap, just think of
a pile of stuff, the objects, strings,

50
00:02:57.462 --> 00:03:02.605
the execution context, debugging,
the call stack, all of that is in a heap.

51
00:03:02.605 --> 00:03:05.252
It's a heap of stuff somewhere.

52
00:03:05.252 --> 00:03:06.445
That's why it's called the heap.

53
00:03:06.445 --> 00:03:09.036
They're not necessarily
located next to each other,

54
00:03:09.036 --> 00:03:12.090
it's just a space allocated by
the operating system to work in.

55
00:03:13.260 --> 00:03:15.455
This is different from linear memory,

56
00:03:15.455 --> 00:03:19.512
which linear memory is a fixed set of
space, and if we go outside of that,

57
00:03:19.512 --> 00:03:23.632
we can get a out of band era, we can get
a out of memory error because we start

58
00:03:23.632 --> 00:03:27.190
reaching out of things that
are not accessible to our program.

59
00:03:28.400 --> 00:03:31.407
But in JavaScript, it's not low level,
we have garbage collection,

60
00:03:31.407 --> 00:03:32.519
we have a lot of niceties.

61
00:03:32.519 --> 00:03:36.415
But that means when we're dealing with
fixed memory spaces and memory directly,

62
00:03:36.415 --> 00:03:38.580
we have to use an array buffer.

63
00:03:38.580 --> 00:03:43.409
An array buffer is just
a representation of raw binary data.

64
00:03:43.409 --> 00:03:45.694
It doesn't itself do anything.

65
00:03:45.694 --> 00:03:47.383
It doesn't itself mean anything.

66
00:03:47.383 --> 00:03:49.314
We have to give it meaning.

67
00:03:49.314 --> 00:03:54.265
Again, when you think of an array buffer
I want you to visualize this unbroken

68
00:03:54.265 --> 00:03:55.800
strings of 1s and 0s.

69
00:03:55.800 --> 00:03:57.020
That's the easiest way.

70
00:03:57.020 --> 00:03:59.848
And array buffers tend to give
people a little bit of hiccup,

71
00:03:59.848 --> 00:04:02.610
that's why I'm spending
a bit of time on it.

72
00:04:02.610 --> 00:04:06.943
But because it's this unbroken string
of 1s and 0s, which mean nothing,

73
00:04:06.943 --> 00:04:10.070
we have to use what's called a TypedArray.

74
00:04:10.070 --> 00:04:13.010
And a TypedArray tells JavaScript, okay,

75
00:04:13.010 --> 00:04:17.240
you're actually dealing with
a 16-bit unsigned integer.

76
00:04:17.240 --> 00:04:20.385
I know how to divide this memory
up into 16-bit chunks, and

77
00:04:20.385 --> 00:04:24.072
I know that because it's unsigned,
the leading bit is not assigned, so

78
00:04:24.072 --> 00:04:27.900
it doesn't matter, it's not positive or
negative, it just is a number.

79
00:04:27.900 --> 00:04:32.877
I know how to read that and now I can
create indexes that point from index 0 is

80
00:04:32.877 --> 00:04:36.520
16 bits,
the next index 1 is another 16 bits etc.

