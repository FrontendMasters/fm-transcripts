WEBVTT

1
00:00:00.000 --> 00:00:02.290
&gt;&gt; Scott Moss: We're gonna talk about
creating different types of indexes,

2
00:00:02.290 --> 00:00:05.180
and more specific,
like I said, compound indexes.

3
00:00:05.180 --> 00:00:09.630
So a compound index is an index
on more than one field.

4
00:00:09.630 --> 00:00:12.750
So we've been adding indexes on one field,
like unique true on first name,

5
00:00:12.750 --> 00:00:13.693
unique true on email.

6
00:00:13.693 --> 00:00:17.821
Now we're gonna add indexes on
a combination of fields, which is very,

7
00:00:17.821 --> 00:00:19.820
very, very useful.

8
00:00:19.820 --> 00:00:26.938
So for instance, if I have a school
here as part of a district.

9
00:00:26.938 --> 00:00:33.587
Schools are part of districts, and
let's say a district is a type of id type.

10
00:00:33.587 --> 00:00:37.657
So mongoose.Schema.Types.ObjectId, and

11
00:00:37.657 --> 00:00:42.131
ref, we don't have anything
called district, but

12
00:00:42.131 --> 00:00:45.600
imagine we had a model called district.

13
00:00:45.600 --> 00:00:48.727
It's not that important for
this example, but if we have one,

14
00:00:48.727 --> 00:00:51.980
it would reference that district,
okay, but, thank you.

15
00:00:51.980 --> 00:00:54.710
Yeah, I thought that looked weird,
I was like, there's something wrong.

16
00:00:55.860 --> 00:00:59.175
It's kinda weird to have two schools at
the same district with the same name,

17
00:00:59.175 --> 00:01:00.049
it's kinda weird.

18
00:01:00.049 --> 00:01:03.092
But it's totally fine to have two schools
in different districts with the same name,

19
00:01:03.092 --> 00:01:05.800
cuz they might be in different states,
so that seems feasible.

20
00:01:05.800 --> 00:01:09.896
So we want our names to be unique, so
if I just came over here and said, okay,

21
00:01:09.896 --> 00:01:16.087
type string for name,
&gt;&gt; Scott Moss: And

22
00:01:16.087 --> 00:01:19.590
then I put unique, that would not be good.

23
00:01:19.590 --> 00:01:23.200
Because now, you can never have
two schools with the same name,

24
00:01:23.200 --> 00:01:24.980
even though they're in
different districts.

25
00:01:24.980 --> 00:01:26.354
That's not what you want,

26
00:01:26.354 --> 00:01:30.250
you might have a school in New York who
has the same name as a school in Atlanta.

27
00:01:30.250 --> 00:01:31.908
And they should basically
have the same name.

28
00:01:31.908 --> 00:01:34.697
But if they're in the same district or
county, they shouldn't, so

29
00:01:34.697 --> 00:01:35.620
how do you scope that?

30
00:01:35.620 --> 00:01:38.210
And this is where
compound indexes come in.

31
00:01:38.210 --> 00:01:39.560
So without compound indexes, again,

32
00:01:39.560 --> 00:01:41.180
you'd have to do this yourself
inside of middleware.

33
00:01:41.180 --> 00:01:43.583
So what we're gonna do is,
we're gonna use a compound index for this.

34
00:01:43.583 --> 00:01:47.750
So what we wanna do is, we wanna make
name unique, but scoped to a district.

35
00:01:47.750 --> 00:01:53.193
So the way we would do that is,
we would use our schema object for

36
00:01:53.193 --> 00:01:56.699
school, so we'll say school.index.

37
00:01:56.699 --> 00:02:01.001
And here, index is gonna take an object
because we're doing a compound index.

38
00:02:01.001 --> 00:02:05.234
And basically, it's just gonna take
a property name that you wanna index, and

39
00:02:05.234 --> 00:02:06.889
then it's gonna take a value.

40
00:02:06.889 --> 00:02:09.988
It's gonna be a number, and I'm gonna tell
you what this number does in a minute.

41
00:02:09.988 --> 00:02:12.310
But basically, the first thing
we wanna index is the district.

42
00:02:12.310 --> 00:02:16.670
So district: 1, and again, I'm gonna
tell you what that 1 means in a minute.

43
00:02:16.670 --> 00:02:20.430
And the next thing we wanna do is,
we wanna index the name,

44
00:02:20.430 --> 00:02:21.880
and we'll also put 1.

45
00:02:23.400 --> 00:02:28.640
And as a second argument, what we're gonna
do is we're gonna say, unique: true.

46
00:02:28.640 --> 00:02:31.070
Okay, so
now I'm gonna talk about all this.

47
00:02:31.070 --> 00:02:35.580
What's happening here is, obviously,
these field names correspond to

48
00:02:35.580 --> 00:02:39.443
the field names on the school schema,
so I want to index those.

49
00:02:39.443 --> 00:02:47.514
The 1 value, it's basically telling Mongo
what order to, it's a compound index.

50
00:02:47.514 --> 00:02:49.802
So every time you set an index,

51
00:02:49.802 --> 00:02:55.230
you're gonna be reducing the size
of the query that has to happen.

52
00:02:55.230 --> 00:02:58.740
So we have to tell Mongo
what to index first.

53
00:02:58.740 --> 00:03:02.816
So right now, we wanna index
the district 1 first, and then the name.

54
00:03:02.816 --> 00:03:07.695
But the crazy thing is that,
in JavaScript, there's no such thing

55
00:03:07.695 --> 00:03:13.030
as order in objects, because they
just can't keep track of order.

56
00:03:13.030 --> 00:03:15.532
So this number is supposed to do that,
but in fact,

57
00:03:15.532 --> 00:03:19.682
what actually ended up happening was that
you can keep track of order in JavaScript.

58
00:03:19.682 --> 00:03:23.021
But once they figured that
out in a V8 node environment,

59
00:03:23.021 --> 00:03:27.973
they're able to determine that you declare
district first, and then name second.

60
00:03:27.973 --> 00:03:30.990
Cuz it's the way that I wrote them,
if I switched it, it'll be opposite.

61
00:03:30.990 --> 00:03:32.215
So what they're doing is,

62
00:03:32.215 --> 00:03:35.841
they're gonna create a compound index
where this is the first half of the index,

63
00:03:35.841 --> 00:03:39.290
this is the second half of the index,
it's very complicated.

64
00:03:39.290 --> 00:03:42.380
But the reason why this
is important is because

65
00:03:42.380 --> 00:03:45.830
I need the name to exist
underneath the district.

66
00:03:45.830 --> 00:03:49.020
If I put the name first,
that's really not gonna help me.

67
00:03:49.020 --> 00:03:52.545
Now I still have unique names, and
then now the districts are there for

68
00:03:52.545 --> 00:03:54.839
some reason, that really doesn't help me.

69
00:03:54.839 --> 00:03:57.338
But I wanna say,
names have to be unique for a district, so

70
00:03:57.338 --> 00:04:01.319
they're not unique by themselves globally,
they're only unique underneath a district.

71
00:04:04.283 --> 00:04:07.967
&gt;&gt; Scott Moss: So basically, the short
answer is, always put 1, you can put -1,

72
00:04:07.967 --> 00:04:09.818
just don't do that, just put 1.

73
00:04:09.818 --> 00:04:12.770
I think they're working on this,
so just put 1.

74
00:04:12.770 --> 00:04:17.579
And I don't wanna talk about cardinality
and how to figure out which ones go first.

75
00:04:18.850 --> 00:04:23.610
But in reality, it's such a complicated
topic, you really just want to index by

76
00:04:24.630 --> 00:04:29.994
the one that has the highest
potential of change.

77
00:04:29.994 --> 00:04:36.160
Right, which one of these fields might
have the highest difference of values?

78
00:04:36.160 --> 00:04:38.698
Is district gonna have more
chance of different values, or

79
00:04:38.698 --> 00:04:41.248
is name gonna have a different
chance of different values?

80
00:04:41.248 --> 00:04:43.511
We're seeing how name
might be conflicting,

81
00:04:43.511 --> 00:04:47.200
I would say districts might have a chance
of having more different values.

82
00:04:47.200 --> 00:04:51.978
There's an option there where
districts might have way

83
00:04:51.978 --> 00:04:54.629
more cardinality than names.

84
00:04:54.629 --> 00:04:59.041
Okay, it's very complicated,
basically, yeah,

85
00:04:59.041 --> 00:05:05.716
you just wanna scope the big ones first,
and then the little ones underneath it.

86
00:05:05.716 --> 00:05:08.018
And that's how you do a compound index,
this is the same thing.

87
00:05:08.018 --> 00:05:11.632
So for instance, if we just wanted
to index just the name, remember,

88
00:05:11.632 --> 00:05:14.405
we put index,
we would put unique: true right here.

89
00:05:14.405 --> 00:05:21.664
You don't have to do that,
you can just do this, it's the same thing.

90
00:05:21.664 --> 00:05:25.263
In fact, I always write my indexes
like this, I don't put them up here,

91
00:05:25.263 --> 00:05:27.399
cuz I like to just see
them all in one place.

92
00:05:27.399 --> 00:05:30.261
So I'll just do schema.index and
write my indexes down here.

93
00:05:37.872 --> 00:05:39.072
&gt;&gt; Scott Moss: So
this is a compound index, so

94
00:05:39.072 --> 00:05:40.375
this is an index with two fields.

95
00:05:40.375 --> 00:05:45.853
So now if I try to save a school in
the same district with the same name,

96
00:05:45.853 --> 00:05:49.647
it'll fail, no, those gotta be unique.

