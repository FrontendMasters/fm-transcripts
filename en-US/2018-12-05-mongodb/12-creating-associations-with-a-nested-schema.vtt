WEBVTT

1
00:00:02.644 --> 00:00:05.930
&gt;&gt; Scott Moss: Let's talk about relations.

2
00:00:05.930 --> 00:00:09.090
So I had a question earlier about

3
00:00:09.090 --> 00:00:13.350
if I wanted to embed another document
in a document, how would I do that?

4
00:00:13.350 --> 00:00:15.290
Were they basically like relationships?

5
00:00:15.290 --> 00:00:17.100
There's a few ways you could do that.

6
00:00:17.100 --> 00:00:21.000
One, you could literally just embed
the document like this, right,

7
00:00:21.000 --> 00:00:23.810
in as an object, so it's just an object.

8
00:00:23.810 --> 00:00:27.790
But if you want this thing to have an ID
where it's its own separate thing,

9
00:00:27.790 --> 00:00:30.500
what you can do is you can actually
just add a schema in here as well.

10
00:00:30.500 --> 00:00:31.870
These are nested schemas.

11
00:00:31.870 --> 00:00:33.170
I highly recommend not doing that.

12
00:00:33.170 --> 00:00:35.350
I almost never do that in production.

13
00:00:35.350 --> 00:00:40.370
Instead what you probably wanna do,
is you want another model, and

14
00:00:40.370 --> 00:00:41.820
a reference to it here.

15
00:00:41.820 --> 00:00:44.270
You wanna reference that model
with something like an ID, or

16
00:00:44.270 --> 00:00:47.360
something like a foreign key, so
that's something you probably wanna do.

17
00:00:47.360 --> 00:00:48.858
So I'm gonna show you how to do that.

18
00:00:48.858 --> 00:00:52.790
So what we're gonna do is,
we're gonna make another schema here, or

19
00:00:52.790 --> 00:00:55.602
another model, and
we'll gonna call it school.

20
00:00:59.256 --> 00:01:03.372
&gt;&gt; Scott Moss: And school is just
gonna be a new mongoose.schema.

21
00:01:07.277 --> 00:01:09.200
&gt;&gt; Scott Moss: And right now,
we'll just give the school a name.

22
00:01:10.220 --> 00:01:13.790
That's about it, and it'll just be of
type String, it's not that important.

23
00:01:13.790 --> 00:01:18.436
So now we have a school, and
then a student belongs to a school, so

24
00:01:18.436 --> 00:01:19.967
we have two options.

25
00:01:19.967 --> 00:01:26.514
If you've ever done any relational
data building, or data configuration,

26
00:01:26.514 --> 00:01:32.165
then you know that we could store
the students array on the school.

27
00:01:32.165 --> 00:01:35.291
Or we can store the school on the student,
all right?

28
00:01:35.291 --> 00:01:37.791
It really depends on how you're
trying to query this data.

29
00:01:37.791 --> 00:01:39.951
If you're gonna be reading
from the school all the time,

30
00:01:39.951 --> 00:01:41.532
you might put the students on the school.

31
00:01:41.532 --> 00:01:44.311
But then you have an array
that can be infinitely big, so

32
00:01:44.311 --> 00:01:45.630
you might have a problem.

33
00:01:45.630 --> 00:01:49.530
Or you might just keep it one-to-one and
put the school on the student, and

34
00:01:49.530 --> 00:01:51.540
that way you're good to go.

35
00:01:51.540 --> 00:01:54.280
We're just gonna put the school
on the student for now.

36
00:01:54.280 --> 00:01:57.608
So for here what we're gonna do is, let's
make another field on the student, and

37
00:01:57.608 --> 00:01:58.777
we'll just call it school.

38
00:02:01.032 --> 00:02:03.730
&gt;&gt; Scott Moss: And the first thing
to do is we're gonna give it a type.

39
00:02:03.730 --> 00:02:09.360
Now if the type is going to be a reference
to some other document somewhere,

40
00:02:09.360 --> 00:02:14.740
then we need that to be something
reliable, something unique.

41
00:02:14.740 --> 00:02:17.749
By default, the most unique thing in
the database is gonna be an ID, so

42
00:02:17.749 --> 00:02:19.490
that's the type that we're gonna use.

43
00:02:19.490 --> 00:02:25.324
So we wanna use the ObjectID type,
which is just gonna be mongoose.Schema

44
00:02:25.324 --> 00:02:29.871
with a capital S,
.Types with a captial T, .ObjectId.

45
00:02:29.871 --> 00:02:32.660
So that's the ObjectID type.

46
00:02:32.660 --> 00:02:37.275
This is saying this type is going to
be the same ObjectID type that all of

47
00:02:37.275 --> 00:02:40.730
our underscore IDs are composed
of inside of Mongo.

48
00:02:42.700 --> 00:02:46.416
This alone is not telling Mongo that
this is referring to a school somewhere.

49
00:02:46.416 --> 00:02:48.390
It's just saying there's
a field called school,

50
00:02:48.390 --> 00:02:50.900
and its type is an ID,
that's all it's doing.

51
00:02:50.900 --> 00:02:53.670
We've still gotta do just
a little more work here.

52
00:02:53.670 --> 00:02:58.048
This should be required, because all
students should be in school, so

53
00:02:58.048 --> 00:03:01.680
this is required.

54
00:03:01.680 --> 00:03:06.160
Still, this doesn't tell Mongo and
Mongoose that this school

55
00:03:07.480 --> 00:03:11.240
values belonging to
an actual school model.

56
00:03:11.240 --> 00:03:14.680
So the last thing we wanna do,
and we can do this here,

57
00:03:14.680 --> 00:03:19.998
we can do this at query time,
there's a lot of places we can do it.

58
00:03:19.998 --> 00:03:22.912
But I think it makes more sense
to do it on the schema, and

59
00:03:22.912 --> 00:03:24.654
that's to provide a reference.

60
00:03:24.654 --> 00:03:28.946
So the reference is going to be
the collection in which this ID is gonna

61
00:03:28.946 --> 00:03:29.689
belong to.

62
00:03:29.689 --> 00:03:34.038
When we query for this later, Mongoose is
automatically gonna go to that collection.

63
00:03:34.038 --> 00:03:34.644
Like yeah,

64
00:03:34.644 --> 00:03:38.370
I'm going to the collection that you
told me to to find this matching ID.

65
00:03:38.370 --> 00:03:40.109
So what you can do is you
can just put ref, and

66
00:03:40.109 --> 00:03:41.670
then we put the name of the collection.

67
00:03:43.390 --> 00:03:48.048
Now if we rewind back to what I said about
naming collections, the collection name is

68
00:03:48.048 --> 00:03:52.113
gonna be whatever name that you pass
into this first argument right here,

69
00:03:52.113 --> 00:03:53.251
mongoose.model.

70
00:03:53.251 --> 00:03:56.622
You don't have to think ahead of time and
add the pluralized version,

71
00:03:56.622 --> 00:03:58.960
you can just put whatever you put here.

72
00:03:58.960 --> 00:04:03.633
So in this case the school one,
which we haven't made yet,

73
00:04:03.633 --> 00:04:05.880
let's go ahead and make it.

74
00:04:05.880 --> 00:04:15.216
School =,
&gt;&gt; Scott Moss: mongoose.model,

75
00:04:15.216 --> 00:04:19.753
and we'll just use school, lowercase.

76
00:04:19.753 --> 00:04:25.589
And we'll put the school schema there,
there we go.

77
00:04:25.589 --> 00:04:31.452
So school lowercase places school
in there, we get a school model.

78
00:04:31.452 --> 00:04:34.665
So if that's gonna be the name
of our collection for school,

79
00:04:34.665 --> 00:04:38.067
then the reference for
the school filled on the student schema,

80
00:04:38.067 --> 00:04:40.469
that's just gonna be
called school as well.

81
00:04:44.017 --> 00:04:47.728
&gt;&gt; Scott Moss: So walking through this,
this is saying on student.school,

82
00:04:47.728 --> 00:04:49.696
its type is gonna be an ObjectID.

83
00:04:49.696 --> 00:04:51.016
It is required.

84
00:04:51.016 --> 00:04:55.400
And when I ask for it Mongoose, I want
you to match this ID with something in

85
00:04:55.400 --> 00:04:59.110
the school collection,
that's what it's doing.

86
00:04:59.110 --> 00:05:03.254
We can point this to any collection,
but we decided to do school.

87
00:05:03.254 --> 00:05:05.791
Any questions on this part?

88
00:05:05.791 --> 00:05:10.488
&gt;&gt; Speaker 2: So that's how it tells
it to save in separate areas, right?

89
00:05:10.488 --> 00:05:12.000
If you do the reference, right?

90
00:05:12.000 --> 00:05:14.196
Otherwise it would put it all
in the same document, kind of?

91
00:05:14.196 --> 00:05:17.830
&gt;&gt; Scott Moss: No, it won't save
it in both collections for you,

92
00:05:17.830 --> 00:05:21.190
you still have to save it separately.

93
00:05:21.190 --> 00:05:23.710
So if you're asking if-
&gt;&gt; Speaker 2: It won't save it in

94
00:05:23.710 --> 00:05:24.710
the other collection?

95
00:05:24.710 --> 00:05:27.380
&gt;&gt; Scott Moss: No,
cuz it only exists in one collection.

96
00:05:27.380 --> 00:05:30.290
So when we start querying this,
I'm gonna show you, it's all virtual.

97
00:05:30.290 --> 00:05:33.530
It's not like a joined table, or

98
00:05:33.530 --> 00:05:39.213
some table that you created
that there is a virtual thing.

99
00:05:39.213 --> 00:05:44.212
You could imagine is going to
create a table at query time, and

100
00:05:44.212 --> 00:05:46.530
grab it for you if it exists.

101
00:05:46.530 --> 00:05:48.060
But it's not saved in
the database like that.

102
00:05:48.060 --> 00:05:52.146
A school is ever only going to
exist in the school collection, and

103
00:05:52.146 --> 00:05:56.469
then the student's ever only gonna
refer to it by an ID, that's it.

104
00:05:56.469 --> 00:06:01.193
And IDs never change, so you don't have
to change the ID in the student.school,

105
00:06:01.193 --> 00:06:02.505
cuz IDs never change.

106
00:06:02.505 --> 00:06:04.403
And then if you create a new school,

107
00:06:04.403 --> 00:06:06.939
then you have a new student
with that school ID.

108
00:06:06.939 --> 00:06:08.970
So you almost never have
to change these things.

109
00:06:08.970 --> 00:06:12.382
It's only when you add some field that
changes a lot where you have to update

110
00:06:12.382 --> 00:06:14.120
them, but in this case we don't.

111
00:06:14.120 --> 00:06:16.330
And that's cuz we're only using
references that don't change.

112
00:06:16.330 --> 00:06:19.140
So we don't have to worry about
figuring out how to update them,

113
00:06:19.140 --> 00:06:21.340
it should be good to go.

114
00:06:21.340 --> 00:06:25.070
Other than the fact that if you delete
a school, and you're referring to

115
00:06:25.070 --> 00:06:29.428
something that's not there anymore, then
yeah, you have to clean it up yourself.

116
00:06:29.428 --> 00:06:31.087
And you're gonna be doing
that in one of the exercises.

117
00:06:31.087 --> 00:06:32.180
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: Yeah.

