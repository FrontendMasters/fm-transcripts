WEBVTT

1
00:00:00.170 --> 00:00:02.370
&gt;&gt; Scott Moss: So
the CRUD stuff was the work, right?

2
00:00:02.370 --> 00:00:05.120
That was the one where I was like
I don't know what's going on here.

3
00:00:06.240 --> 00:00:11.541
Okay, so we hop over here to the CRUD one,

4
00:00:11.541 --> 00:00:14.280
we'll do CRUD here.

5
00:00:14.280 --> 00:00:16.170
Okay, so
we'll go through this line by line.

6
00:00:16.170 --> 00:00:19.140
So the first one says get user by ID.

7
00:00:19.140 --> 00:00:21.870
And it says get user by object ID.

8
00:00:24.330 --> 00:00:27.000
Yeah, that's basically what it needs,
an object ID,

9
00:00:27.000 --> 00:00:30.950
not like an object with an ID property,
but object ID as in a Mongo object ID.

10
00:00:32.220 --> 00:00:36.110
So you're already given an ID here so
given this ID that it's asking for,

11
00:00:36.110 --> 00:00:39.250
you should return a user by that ID.

12
00:00:39.250 --> 00:00:47.980
So what we want to do is, we want to
return User.findById, pass the id.

13
00:00:47.980 --> 00:00:52.800
And that should satisfy it because, again,

14
00:00:52.800 --> 00:00:55.620
we're given an ID,
we're just gonna use findById.

15
00:00:55.620 --> 00:01:00.070
This always returns a promise, so pretty
much every query you do on the model

16
00:01:00.070 --> 00:01:02.090
is gonna return a promise,
almost every single one of them.

17
00:01:03.830 --> 00:01:05.120
So this should satisfy it.

18
00:01:05.120 --> 00:01:10.120
And if we can go look,
you can see get user by object id is good.

19
00:01:11.160 --> 00:01:13.150
So quick pro tip, yes,

20
00:01:13.150 --> 00:01:18.280
these queries do return a promise, but
technically, they're not really promises.

21
00:01:18.280 --> 00:01:22.170
What Mongoose is, doing is they're
actually returning a query object.

22
00:01:23.330 --> 00:01:25.240
That's really advanced,
we're probably not going to get to query

23
00:01:25.240 --> 00:01:27.400
objects today because that's
like an advanced thing.

24
00:01:27.400 --> 00:01:32.090
But you could think of it as,
like, SQL like query on a query.

25
00:01:32.090 --> 00:01:35.770
And on that query object
there's a dot then property.

26
00:01:35.770 --> 00:01:39.790
So anything consumed in this query thinks
it's a promise because there's a dot then

27
00:01:39.790 --> 00:01:40.890
property on it.

28
00:01:40.890 --> 00:01:42.700
But in reality, it's not a real promise.

29
00:01:42.700 --> 00:01:45.550
So to avoid that,
what you normally do is you

30
00:01:45.550 --> 00:01:50.140
use .exec at the end of a query
like this to say, I'm done.

31
00:01:50.140 --> 00:01:53.500
There's no more querying
coming after this.

32
00:01:53.500 --> 00:01:59.350
Because on a query, I can do things like
.limit, .sort, .greaterthan, .lessthan.

33
00:01:59.350 --> 00:02:03.260
But when I'm done with all that I can
say cool, I'm done, execute the query.

34
00:02:03.260 --> 00:02:05.170
So .exec is short of execute.

35
00:02:05.170 --> 00:02:08.930
So this is saying, I'm done, there's
no more querying coming out of this, so

36
00:02:08.930 --> 00:02:11.680
just return a real promise and
that's what this does.

37
00:02:11.680 --> 00:02:16.390
So this will help you avoid any bugs
that you might have that might be

38
00:02:16.390 --> 00:02:20.870
consuming this function and expecting
a real promise, this will help avoid that.

39
00:02:20.870 --> 00:02:24.490
So always use .exec at
the end of your queries.

40
00:02:24.490 --> 00:02:28.680
This won't work at the end of things like
create cuz a creation is not a query.

41
00:02:28.680 --> 00:02:33.590
So only for queries, get all users.

42
00:02:34.850 --> 00:02:41.740
We'll just say return
User.find wild card exact.

43
00:02:41.740 --> 00:02:45.134
There's no arguments here, so
it's just a wild card, so all the users.

44
00:02:45.134 --> 00:02:47.980
All right, let me go check the test,
that one passes, get all users.

45
00:02:51.370 --> 00:02:57.130
For our create user we're just
going to return user.create,

46
00:02:57.130 --> 00:02:59.030
it's in the name create.

47
00:02:59.030 --> 00:03:00.900
And we'll just pass the user details, so

48
00:03:00.900 --> 00:03:04.020
whatever details that
the test decides to pass us.

49
00:03:04.020 --> 00:03:05.940
It's up to the test to make
sure those details are correct,

50
00:03:05.940 --> 00:03:08.100
we're just going to save it.

51
00:03:08.100 --> 00:03:13.010
And we can check to see if that worked,
and that works so create a user succeeded.

52
00:03:14.220 --> 00:03:19.040
The next one we have is remove user by ID,
so given an ID remove users.

53
00:03:19.040 --> 00:03:23.860
So if we say return
user.findByIDAndRemove, I

54
00:03:25.740 --> 00:03:30.360
know it's so verbose,
.exec cuz that's a query.

55
00:03:30.360 --> 00:03:32.050
We know it's a query
because it has find in it.

56
00:03:36.100 --> 00:03:40.625
That should pass and now we get
removeUserByID that's successful.

57
00:03:43.890 --> 00:03:45.890
&gt;&gt; Scott Moss: There's
another way you can do this.

58
00:03:45.890 --> 00:03:49.670
You could just user.findById,
grab the user and,

59
00:03:49.670 --> 00:03:50.730
I didn't teach you how to do this.

60
00:03:50.730 --> 00:03:54.610
But you could use the .remove method
on the document instance itself.

61
00:03:54.610 --> 00:03:57.110
Remember, I told you that documents
that you get back from Mongoose aren't

62
00:03:57.110 --> 00:03:58.020
JavaScript documents.

63
00:03:58.020 --> 00:04:01.470
So like Mongoose documents, well,
they have properties on the methods,

64
00:04:01.470 --> 00:04:02.830
one of them is .remove.

65
00:04:02.830 --> 00:04:07.010
You can do .remove on the document itself
at the instance, it will remove itself.

66
00:04:07.010 --> 00:04:10.900
So you can do that way but obviously
this way is just way cleaner, and

67
00:04:10.900 --> 00:04:12.330
is just on one operation.

68
00:04:12.330 --> 00:04:16.680
And then the last one
is update user by Id.

69
00:04:16.680 --> 00:04:19.810
So we have an Id and
then we have some properties to update.

70
00:04:19.810 --> 00:04:27.040
So I'm just gonna say return
User.findByIdAndUpdate.

71
00:04:27.040 --> 00:04:28.990
So id is the one that's passed in here.

72
00:04:30.560 --> 00:04:32.950
And then the update is the update.

73
00:04:32.950 --> 00:04:38.173
Now if you ran this,
you probably expected it to work and

74
00:04:38.173 --> 00:04:43.310
[SOUND]
&gt;&gt; Scott Moss: Now it's just hanging.

75
00:04:43.310 --> 00:04:46.180
So, yeah, if you ran this,
you'd probably expect this to work, right?

76
00:04:46.180 --> 00:04:50.850
But if you got to this point, you might
have realized that this one might not work

77
00:04:50.850 --> 00:04:52.750
all the way, because there's
something else that you have to do.

78
00:04:53.880 --> 00:04:56.780
So we'll let this run, and you can
see right here, my test is failing.

79
00:04:56.780 --> 00:05:03.140
So it's expecting beta user to be true but
instead it's getting false.

80
00:05:03.140 --> 00:05:05.690
And it's not because it's not
updating the database it is.

81
00:05:05.690 --> 00:05:07.320
It is updating the database.

82
00:05:07.320 --> 00:05:13.380
The problem is find by ID and update
isn't returning the newly updated user.

83
00:05:13.380 --> 00:05:16.910
By default it's just not going to do that,
even though it updated in the database.

84
00:05:16.910 --> 00:05:19.712
What it's returning is the user
before it got updated.

85
00:05:19.712 --> 00:05:21.490
So [LAUGH] how helpful is that?

86
00:05:21.490 --> 00:05:23.350
It's not that helpful, so

87
00:05:23.350 --> 00:05:27.610
what you have to do is you have
to add this third option here.

88
00:05:27.610 --> 00:05:31.350
So findByIdAndUpdate and
you have to put new:true,

89
00:05:31.350 --> 00:05:35.630
and that means return the new thing
that got updated, the new instance.

90
00:05:35.630 --> 00:05:39.020
It doesn't mean create a new one,
that option is called upsert.

91
00:05:39.020 --> 00:05:42.150
As in, if this doesn't exist,
create a new one, that's what that does.

92
00:05:42.150 --> 00:05:45.208
New means return the updated object.

93
00:05:45.208 --> 00:05:48.320
After the update operation is done,
return that object.

94
00:05:48.320 --> 00:05:51.160
And that's the one that we want,
that's what the test is expecting.

95
00:05:51.160 --> 00:05:55.400
I saved that one for
last to let you explore a little bit.

96
00:05:55.400 --> 00:05:58.330
&gt;&gt; Student: Does that
need an exec at the end?

97
00:05:58.330 --> 00:06:01.960
&gt;&gt; Scott Moss: And it does need
an exec cuz it has a find on it.

98
00:06:01.960 --> 00:06:04.470
That's exactly right, cool.

99
00:06:05.900 --> 00:06:08.305
&gt;&gt; Student2: If you do
separately the update or

100
00:06:08.305 --> 00:06:11.910
.remove then it's not executable, right?

101
00:06:11.910 --> 00:06:13.880
&gt;&gt; Scott Moss: Right,
the exec is only for model queries.

102
00:06:13.880 --> 00:06:15.580
&gt;&gt; Student2: I mean, you can do it find?

103
00:06:15.580 --> 00:06:17.080
Update at the end, it said.

104
00:06:17.080 --> 00:06:18.350
&gt;&gt; Scott Moss: Yeah,
then you're fine, yeah.

105
00:06:20.900 --> 00:06:25.550
&gt;&gt; Scott Moss: So now if you run the test,
all those tests should pass.

106
00:06:25.550 --> 00:06:32.600
So what we're gonna do now is we're gonna
hop into more advanced things in Mongo,

107
00:06:32.600 --> 00:06:39.220
things like more advanced queries so using
some type of filtering type of options.

108
00:06:39.220 --> 00:06:42.250
We are going to talk about relations,
how does that work with Mongo?

109
00:06:43.740 --> 00:06:48.430
And like many to one and one to many,
those different types of things.

110
00:06:48.430 --> 00:06:51.340
So that's what we are going to do next.

111
00:06:51.340 --> 00:06:53.606
So I'm just going to hop
back into my test.js file.

112
00:06:55.480 --> 00:06:57.172
And I'm just gonna continue
to do my work in here.

