WEBVTT

1
00:00:00.160 --> 00:00:02.150
&gt;&gt; Scott Moss: So I'm gonna show
you a little more exercises and

2
00:00:02.150 --> 00:00:05.500
then you're gonna jump into the exercise
and try to get some of this stuff to work.

3
00:00:05.500 --> 00:00:07.040
So we talked about validation.

4
00:00:07.040 --> 00:00:08.770
Someone asked a question about that.

5
00:00:08.770 --> 00:00:11.490
We talked about how to do more fields.

6
00:00:11.490 --> 00:00:13.920
And then I haven't showed
you how to create.

7
00:00:13.920 --> 00:00:15.660
So I'm gonna show you
all those right quick,

8
00:00:15.660 --> 00:00:17.840
that way you can get a feel
of what they feel like.

9
00:00:17.840 --> 00:00:20.270
I can leave this code up too,
but then you're gonna go off and

10
00:00:20.270 --> 00:00:22.620
you're gonna do a lot of that yourself.

11
00:00:22.620 --> 00:00:23.700
So the first thing is,

12
00:00:23.700 --> 00:00:28.730
I wanna talk about a little deeper dive
into how these schemas are created,

13
00:00:28.730 --> 00:00:31.190
and a little more different type
of fields and stuff you can do.

14
00:00:31.190 --> 00:00:35.790
So for instance, if we wanted to
add a validation to first name.

15
00:00:35.790 --> 00:00:39.150
What you can do, instead of putting
a type here, you put an object.

16
00:00:39.150 --> 00:00:44.595
And then object, you can use the keyword,
type and actually put the type like this.

17
00:00:47.116 --> 00:00:50.477
&gt;&gt; Scott Moss: There's no difference than
what I had before in this, because all

18
00:00:50.477 --> 00:00:54.660
I'm adding is a type filled, but now this
allows me to add more meta information.

19
00:00:54.660 --> 00:00:57.380
So now I can say the first
thing is actually required now.

20
00:00:57.380 --> 00:00:59.090
And I put require true.

21
00:00:59.090 --> 00:01:00.054
So now the first thing is required.

22
00:01:00.054 --> 00:01:03.942
So if I try to save a student without
this firstName supplied, it mongoose,

23
00:01:03.942 --> 00:01:06.512
which is error out,
it's like nope can't do it.

24
00:01:11.381 --> 00:01:14.823
&gt;&gt; Scott Moss: So
that's how you can do one validation here.

25
00:01:14.823 --> 00:01:18.399
Other thing I wanted to show you is that
the sweet thing about mongoose that you

26
00:01:18.399 --> 00:01:20.284
can just do nested structures, right?

27
00:01:20.284 --> 00:01:25.309
So if I had a student here student
here and then I had info property

28
00:01:25.309 --> 00:01:31.470
about the student, and maybe the info
was the school that the student went to.

29
00:01:31.470 --> 00:01:33.955
And that has a type of string.

30
00:01:37.088 --> 00:01:39.640
&gt;&gt; Scott Moss: And
this was the shoe size of the student..

31
00:01:39.640 --> 00:01:42.520
[LAUGH] I don't know why you
need your student shoe sizes,

32
00:01:42.520 --> 00:01:45.593
but I'm just thinking
about shoes right now.

33
00:01:45.593 --> 00:01:51.172
[LAUGH] And this could be a type: Number.

34
00:01:53.033 --> 00:01:54.540
&gt;&gt; Scott Moss: And
this could go on and on and on.

35
00:01:54.540 --> 00:01:56.020
You can nest this object
as much as you want.

36
00:01:56.020 --> 00:01:58.370
I mean, you could set
validations on these fields, and

37
00:01:58.370 --> 00:02:00.770
you could do all different
types of things if you wanted.

38
00:02:00.770 --> 00:02:01.720
And array type.

39
00:02:01.720 --> 00:02:04.880
So, faveFoods for the students.

40
00:02:04.880 --> 00:02:08.770
You can add an array type here and you
literally just add an array literal and

41
00:02:08.770 --> 00:02:10.880
then inside of there it's
the same thing you've been doing.

42
00:02:10.880 --> 00:02:14.370
It's an object with the type and
I could say string.

43
00:02:14.370 --> 00:02:17.738
So, this faveFoods is an array of strings.

44
00:02:21.703 --> 00:02:23.284
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Speaker 2: Follow to that,

45
00:02:23.284 --> 00:02:27.760
it's not completely the same
thing It's just not to mongoose.

46
00:02:27.760 --> 00:02:33.040
So okay, what happened if you
nest things like that inside and

47
00:02:33.040 --> 00:02:36.110
then you want to access them on their own,
like schools and things?

48
00:02:37.620 --> 00:02:39.372
&gt;&gt; Scott Moss: You mean if you want
to query for them on their own?

49
00:02:39.372 --> 00:02:41.623
&gt;&gt; Speaker 2: Yeah exactly, cuz
somebody has school types, for example,

50
00:02:41.623 --> 00:02:44.030
and then you have it inside and
then you have it outside.

51
00:02:44.030 --> 00:02:45.743
Is it easy to do?

52
00:02:45.743 --> 00:02:46.671
&gt;&gt; Scott Moss: It's pretty easy to do,
yeah.

53
00:02:46.671 --> 00:02:51.254
So the query is aware of how
you set your schemas up.

54
00:02:51.254 --> 00:02:53.414
So you can do dot notation in the queries,

55
00:02:53.414 --> 00:02:55.710
and I could show you
how those queries work.

56
00:02:55.710 --> 00:02:57.038
But yeah it's pretty simple to do.

57
00:02:57.038 --> 00:03:00.439
So there's nothing
stopping me from saying,

58
00:03:00.439 --> 00:03:04.149
give me a student whose
info dot school is blank.

59
00:03:04.149 --> 00:03:06.960
Yeah cool, so yeah,
you can play around with this.

60
00:03:06.960 --> 00:03:08.710
There's a lot more things you can do here.

61
00:03:08.710 --> 00:03:12.570
I mean, like I said, you can go pretty
deep with this stuff and get nested.

62
00:03:12.570 --> 00:03:15.048
So, just actually just give
an example of that unique one,

63
00:03:15.048 --> 00:03:16.497
you can just put unique true here.

64
00:03:16.497 --> 00:03:21.803
And then now this is an index for
unique, it's not a validation.

65
00:03:21.803 --> 00:03:25.340
Required is a validation, unique is
an index, so there's a difference.

66
00:03:25.340 --> 00:03:26.507
If I put unique true here,

67
00:03:26.507 --> 00:03:29.330
now the first name is gonna be
unique to the entire collection.

68
00:03:29.330 --> 00:03:31.472
So, there could be no student
with two first names now.

69
00:03:31.472 --> 00:03:33.100
With the two same first names.

70
00:03:35.170 --> 00:03:36.810
That's what this does,
just for this collection.

71
00:03:36.810 --> 00:03:40.466
If I had another collection called apples
and then had a first name then they could

72
00:03:40.466 --> 00:03:42.850
have the same name, but
for student collection no.

