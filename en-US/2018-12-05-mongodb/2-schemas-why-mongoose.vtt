WEBVTT

1
00:00:00.610 --> 00:00:01.190
&gt;&gt; Scott Moss: Let's get started.

2
00:00:01.190 --> 00:00:02.617
So, does everybody have the repo?

3
00:00:04.307 --> 00:00:05.533
&gt;&gt; Scott Moss: Yep, okay.

4
00:00:05.533 --> 00:00:07.097
So if you have the repo,

5
00:00:07.097 --> 00:00:12.513
basically what we're gonna do is we're
gonna start off doing a couple of things.

6
00:00:12.513 --> 00:00:14.913
But when we first started
the course I said yes,

7
00:00:14.913 --> 00:00:17.410
you can use Mongo without schemas.

8
00:00:17.410 --> 00:00:20.330
But I highly recommend not
using Mongo without schemas.

9
00:00:20.330 --> 00:00:22.810
It's just,
I just don't recommend doing it.

10
00:00:22.810 --> 00:00:26.005
I've even talked to the people who
work at Mongo and it's like yeah,

11
00:00:26.005 --> 00:00:27.890
just don't use Mongo without schemas.

12
00:00:27.890 --> 00:00:30.670
In fact, the latest MongoDB driver for

13
00:00:30.670 --> 00:00:34.090
Node just started supporting schemas and
validations.

14
00:00:34.090 --> 00:00:39.898
So even the first party ORM
is supporting schemas now.

15
00:00:39.898 --> 00:00:41.680
So yeah, you definitely wanna use schemas.

16
00:00:41.680 --> 00:00:44.800
But it doesn't mean it's a relational
database because you have schemas.

17
00:00:44.800 --> 00:00:48.160
It's just a way to validate your data, and
make sure that the shape is consistent.

18
00:00:48.160 --> 00:00:51.600
So you're not duct taping on
the front end, or your mobile app,

19
00:00:51.600 --> 00:00:55.100
trying to figure out what's there and
what's not, cuz that's just horrible.

20
00:00:55.100 --> 00:00:57.090
So you kinda need schemas.

21
00:00:57.090 --> 00:00:57.990
So what we're gonna do is,

22
00:00:57.990 --> 00:01:00.580
we're gonna walk through a few
exercises on a couple of things.

23
00:01:00.580 --> 00:01:04.090
Because the exercise that you're about to
do next, is you're gonna be developing

24
00:01:04.090 --> 00:01:07.860
some schemas with some validations,
and developing some credit queries.

25
00:01:07.860 --> 00:01:10.583
So I'm gonna show you a little bit
of things to get started doing that,

26
00:01:10.583 --> 00:01:12.120
because it's actually quite simple.

27
00:01:12.120 --> 00:01:14.584
So I'm just gonna open up
this code editor here.

28
00:01:14.584 --> 00:01:17.921
So the first thing we
need to figure out is,

29
00:01:17.921 --> 00:01:23.137
how do we connect to a Mongo
database from a Node.js application?

30
00:01:23.137 --> 00:01:24.170
That's the first thing.

31
00:01:24.170 --> 00:01:26.350
Without that,
you can't really do anything.

32
00:01:26.350 --> 00:01:28.960
So the way you do that is,
you basically have two options.

33
00:01:28.960 --> 00:01:33.250
You can use the native MongoDB driver,
which is pretty cool.

34
00:01:33.250 --> 00:01:34.670
It's getting better.

35
00:01:34.670 --> 00:01:37.790
Or you can use a package called Mongoose.

36
00:01:37.790 --> 00:01:39.030
Who here has heard of Mongoose before?

37
00:01:39.030 --> 00:01:40.397
You've heard of Mongoose?

38
00:01:40.397 --> 00:01:41.025
Mongoose, yeah?

39
00:01:41.025 --> 00:01:42.041
Mongoose is awesome.

40
00:01:42.041 --> 00:01:43.730
I use Mongoose for everything.

41
00:01:43.730 --> 00:01:46.171
I don't see a need to even
use the native Mongo driver,

42
00:01:46.171 --> 00:01:48.098
because Mongoose just kinda does the job.

43
00:01:48.098 --> 00:01:50.965
It actually just passes straight
through to the MongoDB driver for

44
00:01:50.965 --> 00:01:54.240
a lot of other things that it does, so
you kinda get the best of both worlds.

45
00:01:54.240 --> 00:01:58.080
Mongoose is more modern, and they just
have features that the MongoDB driver just

46
00:01:58.080 --> 00:02:01.730
hasn't supported yet,
although they are catching up.

47
00:02:01.730 --> 00:02:04.524
And it's got really good support, so
that's what we're gonna be using.

48
00:02:04.524 --> 00:02:09.420
We're gonna be using Mongoose for
our ORM, or ODM, which stands for

49
00:02:09.420 --> 00:02:14.650
Object Rational Mapper, or Object
Relational Mapper, or Object Data Mapper.

50
00:02:14.650 --> 00:02:17.490
However you wanna call it,
it's one of those things.

51
00:02:17.490 --> 00:02:19.680
It's the same thing like SQL.

52
00:02:19.680 --> 00:02:25.300
Sequelize for postgres, or Bookshelf for
postgres, any one of those ORMs.

53
00:02:25.300 --> 00:02:27.390
Waterline if you've ever used that.

54
00:02:27.390 --> 00:02:30.107
Nex, all those ORMs for SQL.

55
00:02:30.107 --> 00:02:33.881
This is the ORM for Mongo,
and it's called Mongoose.

56
00:02:33.881 --> 00:02:35.800
And it's definitely the de facto one.

57
00:02:35.800 --> 00:02:38.420
And it's probably one of the biggest
reasons why I use MongoDB,

58
00:02:38.420 --> 00:02:41.050
because Mongoose is so good.

59
00:02:41.050 --> 00:02:44.970
Without Mongoose I don't know if I would
even use MongoDB, that's how good it is.

60
00:02:44.970 --> 00:02:48.691
I've tried to use DynamoDB before,
and I love DynamoDB, but I'm so

61
00:02:48.691 --> 00:02:51.338
spoiled by Mongoose I
can't even use DynamoDB.

62
00:02:51.338 --> 00:02:53.524
I'm just like, it's just not even close.

