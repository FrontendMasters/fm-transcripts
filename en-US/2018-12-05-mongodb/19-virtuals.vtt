WEBVTT

1
00:00:03.317 --> 00:00:08.276
&gt;&gt; Scott Moss: All right, so
we're gonna move on to the next part,

2
00:00:08.276 --> 00:00:13.012
which is gonna be working with hooks,
virtuals,

3
00:00:13.012 --> 00:00:15.962
and indexes with our schemas.

4
00:00:15.962 --> 00:00:21.089
So up to this point, you can pretty
much do anything with Mongo.

5
00:00:21.089 --> 00:00:24.390
What you've learned so
far will take you 80% of the way.

6
00:00:24.390 --> 00:00:28.380
Even the connection logic, unless you're
doing some advanced stuff in production,

7
00:00:28.380 --> 00:00:29.940
it's mostly the same even in production.

8
00:00:29.940 --> 00:00:31.480
You don't really have to change much,

9
00:00:31.480 --> 00:00:34.740
there's not much more you have to do
other than what I've already taught you.

10
00:00:34.740 --> 00:00:38.140
What I'm gonna teach you now is just, take
it to the next level just a little a bit,

11
00:00:38.140 --> 00:00:41.700
just thinking about it in general and
how to get it there.

12
00:00:41.700 --> 00:00:44.470
So the first thing I wanna
talk about is virtuals, so

13
00:00:44.470 --> 00:00:46.570
we've already been working with virtuals.

14
00:00:46.570 --> 00:00:49.890
And a virtual is nothing
more than a filled,

15
00:00:49.890 --> 00:00:51.540
you can think of it as like a getter.

16
00:00:51.540 --> 00:00:55.511
If you ever used JavaScript objects where
you can set getters on properties that

17
00:00:55.511 --> 00:00:59.068
don't actually exists, but
you can create them when you ask for them,

18
00:00:59.068 --> 00:01:00.737
that's what a virtual field is.

19
00:01:00.737 --> 00:01:05.101
So if I want a field on this school
that just concatenated all the strings

20
00:01:05.101 --> 00:01:10.640
together, but I didn't wanna say that in a
database, I could make a virtual for that.

21
00:01:10.640 --> 00:01:14.880
So when I ask for it, a function will
run and give me back the value for it.

22
00:01:14.880 --> 00:01:18.542
So it's a getter, it's a virtual thing,
it's not actually saved in a database,

23
00:01:18.542 --> 00:01:21.119
it's computed when I ask for
it based on some properties.

24
00:01:21.119 --> 00:01:24.826
So that's a virtual, you can do the same
thing for set, so you can set a virtual.

25
00:01:24.826 --> 00:01:29.304
So I can set a property that doesn't exist
in a database, but when I actually set it,

26
00:01:29.304 --> 00:01:33.298
there's a function that runs and
it sets real properties in the database.

27
00:01:33.298 --> 00:01:38.364
So it's like building a domain model
around your actual database model,

28
00:01:38.364 --> 00:01:39.840
if you will.

29
00:01:39.840 --> 00:01:42.668
So that's what you can do,
it's pretty handy for virtuals.

30
00:01:42.668 --> 00:01:45.352
If you've already seen GraphQL,
GraphQL is literally just virtuals.

31
00:01:45.352 --> 00:01:50.120
So if you've ever used GraphQL, it's the
same thing, so that's what we're gonna do.

32
00:01:50.120 --> 00:01:53.110
And one of the virtuals we've been
using this whole time is .id.

33
00:01:53.110 --> 00:01:57.380
Any document that you get back
has a .id property on it.

34
00:01:57.380 --> 00:02:01.395
But if you look in the database, there's
no such thing as an id property, it's _id,

35
00:02:01.395 --> 00:02:02.614
so how did that get there?

36
00:02:02.614 --> 00:02:06.142
Well, Mongoose created a .id virtual for
you because,

37
00:02:06.142 --> 00:02:08.577
who wants to write ._id all the time?

38
00:02:08.577 --> 00:02:11.941
So they just made one for you, and
that's a built-in virtual, but

39
00:02:11.941 --> 00:02:13.760
you can make your own.

40
00:02:13.760 --> 00:02:15.530
So that's what you're gonna
do on the next exercise.

41
00:02:15.530 --> 00:02:18.720
So I was gonna show you how
to do some of those virtuals.

42
00:02:18.720 --> 00:02:22.303
So I'm just gonna clean some of this
stuff up right quick so it's not so

43
00:02:22.303 --> 00:02:23.111
noisy in here.

44
00:02:25.832 --> 00:02:29.195
&gt;&gt; Scott Moss: And we'll just stick
with the school one, it's pretty easy.

45
00:02:34.998 --> 00:02:40.154
&gt;&gt; Scott Moss: There we go, so to create
virtuals, and pretty much everything

46
00:02:40.154 --> 00:02:46.277
dealing with the schema, all you have
to do is use the schema object itself.

47
00:02:46.277 --> 00:02:48.754
So the schema instance that we created for

48
00:02:48.754 --> 00:02:52.210
the school is gonna be
returned from mongoose.Schema.

49
00:02:52.210 --> 00:02:56.860
So this right here is more than just
an object that we pass to mongoose.model.

50
00:02:56.860 --> 00:02:59.845
We have the schema, we can do some
pretty amazing things with it.

51
00:02:59.845 --> 00:03:02.470
We can add different query
methods that we want.

52
00:03:02.470 --> 00:03:05.030
We can make our own query methods,
our own mutation methods,

53
00:03:05.030 --> 00:03:07.450
our own helpers, instance methods.

54
00:03:07.450 --> 00:03:09.190
Pretty much whatever we want,
we could do here, and

55
00:03:09.190 --> 00:03:11.590
one of the things we're gonna do is,
we're gonna add virtuals.

56
00:03:11.590 --> 00:03:15.452
So we're gonna add a virtual for the
school, and the way you would do that is,

57
00:03:15.452 --> 00:03:17.545
you would grab the schema object itself.

58
00:03:17.545 --> 00:03:22.197
After you create the schema,
you do the .virtual here.

59
00:03:22.197 --> 00:03:24.642
So if you do a .virtual,
which is a function,

60
00:03:24.642 --> 00:03:28.900
you can pass in whatever value you
want here, that's not a real field.

61
00:03:28.900 --> 00:03:35.265
So if I pass in a field called,
&gt;&gt; Scott Moss: staffCount,

62
00:03:35.265 --> 00:03:38.801
like this, now what I'll have to do is,

63
00:03:38.801 --> 00:03:43.330
I can define getters and
setters on this virtual.

64
00:03:43.330 --> 00:03:46.600
A getter is a function that's gonna be
called when someone tries to retrieve this

65
00:03:46.600 --> 00:03:48.157
property called staffCount.

66
00:03:48.157 --> 00:03:51.330
A setter's a function that's gonna be
called when someone tries to set the value

67
00:03:51.330 --> 00:03:52.700
of staffCount.

68
00:03:52.700 --> 00:03:53.938
For right now, we're gonna do getters.

69
00:03:53.938 --> 00:03:58.893
So I'm gonna say, when something in
my code tries to get the value for

70
00:03:58.893 --> 00:04:03.700
staffCount, run this function,
and this part is important.

71
00:04:03.700 --> 00:04:08.637
So if you know ES6 and if you use
the arrow function, does anybody what

72
00:04:08.637 --> 00:04:13.499
an arrow function does differently
than a regular function in ES6?

73
00:04:13.499 --> 00:04:15.619
&gt;&gt; Speaker 2: It binds this.

74
00:04:15.619 --> 00:04:17.739
&gt;&gt; Scott Moss: Right,
it keeps the same context of this.

75
00:04:17.739 --> 00:04:22.259
So in this case, the context inside of
this function would be the same context of

76
00:04:22.259 --> 00:04:25.169
whatever is out here, and
that's normally okay.

77
00:04:25.169 --> 00:04:27.401
In this situation, it's not okay,

78
00:04:27.401 --> 00:04:31.365
because we need to reference
properties of the school instance.

79
00:04:31.365 --> 00:04:35.516
And in order for that to work,
we're gonna use the this keyword.

80
00:04:35.516 --> 00:04:37.840
But we need to keep that
context different, so

81
00:04:37.840 --> 00:04:39.817
we have to use a regular function here.

82
00:04:39.817 --> 00:04:43.975
So if you use the arrow function here,
your code will not work, 100% won't work.

83
00:04:43.975 --> 00:04:48.492
Because the this inside of the arrow
function will be the this of whatever is

84
00:04:48.492 --> 00:04:50.078
in this scope right here.

85
00:04:50.078 --> 00:04:52.989
And we're not in a browser so
this won't refer to window.

86
00:04:52.989 --> 00:04:55.980
We're in Node, so
this will refer to something else, but

87
00:04:55.980 --> 00:04:58.372
it for
sure won't be the instance of a school.

88
00:04:58.372 --> 00:05:01.306
So make sure you use
a regular function here, and

89
00:05:01.306 --> 00:05:05.958
if you're gonna be using a function
that's gonna be using the keyword this,

90
00:05:05.958 --> 00:05:08.409
make sure you're using the right this.

91
00:05:08.409 --> 00:05:10.364
So what we wanna do here is,

92
00:05:10.364 --> 00:05:14.200
we want to really just return
the length of the staff.

93
00:05:14.200 --> 00:05:19.480
So let's say return this.staff.length.

94
00:05:19.480 --> 00:05:20.390
And this, remember,

95
00:05:20.390 --> 00:05:26.310
is referring to whatever school instance
it is that we're asking the property for.

96
00:05:26.310 --> 00:05:29.368
Staff is gonna be the property called
staff, which should be array, and

97
00:05:29.368 --> 00:05:32.238
arrays have lengths, so
we'll just get the length property on it.

98
00:05:32.238 --> 00:05:34.488
So I'm just gonna return
this.staff.length.

99
00:05:34.488 --> 00:05:37.792
This is gonna give me a virtual
field called staffCount.

100
00:05:37.792 --> 00:05:41.356
It's not in a database, it's not on
a schema, I can't save it anywhere,

101
00:05:41.356 --> 00:05:42.501
it's computed for me.

102
00:05:42.501 --> 00:05:44.595
So to verify this,
I'm gonna create a school.

103
00:05:53.779 --> 00:05:58.824
&gt;&gt; Scott Moss: So create a school,
we'll put a name, my school.

104
00:06:02.912 --> 00:06:05.765
&gt;&gt; Scott Moss: And
then we'll add some staff here, so

105
00:06:05.765 --> 00:06:08.107
we can actually see that count.

106
00:06:08.107 --> 00:06:12.466
And these are just strings, so
I'll just add some strings here.

107
00:06:12.466 --> 00:06:15.450
There we go, actually,
yeah, let's do that.

108
00:06:16.750 --> 00:06:19.099
So now that we have a school,
we can see what that is.

109
00:06:19.099 --> 00:06:27.486
So I'm just gonna console.log
mySchool.staffCount.

110
00:06:27.486 --> 00:06:31.544
And when I log this, it's going to
actually execute this function right here.

111
00:06:31.544 --> 00:06:35.240
So we should be able to verify
that if I put a log here,

112
00:06:35.240 --> 00:06:37.177
we can just say in virtual.

113
00:06:37.177 --> 00:06:41.180
So a log there, so
this is me doing a getter.

114
00:06:41.180 --> 00:06:44.778
See, I'm accessing the property called
staffCount, it's me trying to get it.

115
00:06:44.778 --> 00:06:46.762
So that's gonna trigger,
you could think of this like middleware.

116
00:06:46.762 --> 00:06:49.585
It's like a listener that's like,
you're trying to get staffCount, cool,

117
00:06:49.585 --> 00:06:52.580
I gotta run this function,
I'm gonna return whatever value is here.

118
00:06:52.580 --> 00:06:56.267
So that's why that's gonna run,
so actually run this code.

119
00:07:01.267 --> 00:07:02.960
&gt;&gt; Scott Moss: So
you can see it immediately,

120
00:07:02.960 --> 00:07:06.804
before it even returned the value,
it first went inside the virtual,

121
00:07:06.804 --> 00:07:10.750
it was inside the virtual,
in virtual, so it ran this first.

122
00:07:10.750 --> 00:07:13.983
Then the value was returned and
then it logged here.

123
00:07:13.983 --> 00:07:15.563
So you can see, now I have 3,

124
00:07:15.563 --> 00:07:18.486
which is exactly how many
strings I have in this array.

125
00:07:18.486 --> 00:07:22.020
So that's how you would do a virtual,
so it's doing it synchronously.

126
00:07:22.020 --> 00:07:25.486
So that means you probably don't wanna
put async code inside your virtuals,

127
00:07:25.486 --> 00:07:26.187
probably not.

128
00:07:26.187 --> 00:07:29.445
I mean, there's nothing stopping
you from doing it, but I mean,

129
00:07:29.445 --> 00:07:32.308
you would have some pretty
confusing code if you did that.

130
00:07:32.308 --> 00:07:35.995
I think actually,
the runtime might even break, so yeah,

131
00:07:35.995 --> 00:07:37.852
I would probably avoid that.

132
00:07:37.852 --> 00:07:39.759
So yeah, keep things synchronous,

133
00:07:39.759 --> 00:07:43.545
use them if you just wanna do some
quick computing on some virtual paths.

134
00:07:43.545 --> 00:07:47.456
id's a really good example,
or anything like that.

135
00:07:47.456 --> 00:07:49.016
Any questions on virtuals?

136
00:07:53.300 --> 00:07:56.150
&gt;&gt; Scott Moss: No, pretty straightforward,
I like virtuals, they're really legit.

