WEBVTT

1
00:00:00.000 --> 00:00:01.470
&gt;&gt; Scott Moss: Okay, so
now I'm gonna show you how to query.

2
00:00:02.600 --> 00:00:04.940
So the first thing is,
let's create the school.

3
00:00:04.940 --> 00:00:07.180
So we'll say school =

4
00:00:12.397 --> 00:00:17.015
&gt;&gt; Scott Moss: Await, school.create.

5
00:00:17.015 --> 00:00:21.500
And school only has like a name so,
Mlk Elementary and

6
00:00:21.500 --> 00:00:27.193
then we got that and the next thing
is we're gonna create a student.

7
00:00:27.193 --> 00:00:35.340
So we'll say a student
= await student.create.

8
00:00:35.340 --> 00:00:41.160
And a student has a first name that's
required, and a school that's required.

9
00:00:41.160 --> 00:00:42.764
It's the only required thing,
so I'll do that.

10
00:00:42.764 --> 00:00:47.160
First name is,

11
00:00:47.160 --> 00:00:52.920
Trisha and school.

12
00:00:52.920 --> 00:00:55.370
So remember if we go
back to look at school,

13
00:00:55.370 --> 00:00:59.040
it's type is gonna be
mongoose.schema.type.objectid.

14
00:00:59.040 --> 00:01:00.370
Where did we get that id?

15
00:01:00.370 --> 00:01:01.920
Well, we already created a school, and

16
00:01:01.920 --> 00:01:05.040
we know if we create something in
Mongo we get an id property back.

17
00:01:05.040 --> 00:01:09.789
So we'll just use school.id here or
better yet, just to be explicit,

18
00:01:09.789 --> 00:01:15.015
school._id and we're gonna talk about
the differences between the .id and

19
00:01:15.015 --> 00:01:18.340
_id, but
the short answer is virtualization.

20
00:01:18.340 --> 00:01:22.697
You're gonna be doing virtualization later
on in the course but to be explicit,

21
00:01:22.697 --> 00:01:23.925
you can just use _id.

22
00:01:26.812 --> 00:01:30.569
&gt;&gt; Scott Moss: So now I save the student
with the school and then now, if I were

23
00:01:30.569 --> 00:01:35.230
to query the student later on application
and I want to get the school for it.

24
00:01:35.230 --> 00:01:40.322
The way I would do that is,
I would say awaits,

25
00:01:40.322 --> 00:01:46.460
students, I'm sorry
capital Student.findById,

26
00:01:46.460 --> 00:01:53.154
see where these ID here is
already have an ID, student.ID.

27
00:01:53.154 --> 00:01:56.030
And then subduing the exec right away I'm

28
00:01:56.030 --> 00:01:58.110
gonna use this handy
method called populate.

29
00:01:59.200 --> 00:02:01.430
So, this is why mongoose is really cool,

30
00:02:01.430 --> 00:02:04.940
they have this thing called populate which
are basically like virtual join tables.

31
00:02:04.940 --> 00:02:09.250
So populate's gonna do if I don't pass
it any arguments it's gonna go look

32
00:02:09.250 --> 00:02:12.360
at the schema for the student.

33
00:02:12.360 --> 00:02:15.960
It's gonna look at anything
that has a type Object ID and

34
00:02:15.960 --> 00:02:19.340
a reference to a collection and
it's gonna go query the database for

35
00:02:19.340 --> 00:02:23.660
those and,
inject those values into the field itself.

36
00:02:23.660 --> 00:02:26.774
So, instead of getting back
a school field that's an ID,

37
00:02:26.774 --> 00:02:29.648
I'll get back a school field
that is a school object.

38
00:02:33.404 --> 00:02:36.517
&gt;&gt; Scott Moss: All right, so
if I populate that and then I run exec.

39
00:02:40.161 --> 00:02:43.527
&gt;&gt; Scott Moss: I should get back at
school, or a student with the school so,

40
00:02:43.527 --> 00:02:49.517
let's check that out
&gt;&gt; Scott Moss: I'm sorry,

41
00:02:49.517 --> 00:02:51.850
yeah, I'm thinking of
an older version of Mongoose.

42
00:02:51.850 --> 00:02:55.870
So you do have to pass in
the actual field here by default so

43
00:02:55.870 --> 00:03:01.960
passing the school field here and then it
will go populated, so sorry about that.

44
00:03:01.960 --> 00:03:05.883
So now if I run that again, you can see
now it actually populates the school,

45
00:03:05.883 --> 00:03:10.113
there's an ID, there's the name of the
school, along with the other properties

46
00:03:10.113 --> 00:03:12.840
that I told you that really
aren't that important.

47
00:03:12.840 --> 00:03:17.900
So that's how you would do associations
and relationships in Mongo so you

48
00:03:17.900 --> 00:03:23.286
set up the schema, what the ref and the
type of ObjectId required is up to you and

49
00:03:23.286 --> 00:03:29.230
then you just have to call populate
with the field that you wanna populate.

50
00:03:29.230 --> 00:03:32.090
And then, it will go fetch it for
you, if it finds it and

51
00:03:32.090 --> 00:03:34.300
attach it to that field
It'll basically hydrate it.

52
00:03:34.300 --> 00:03:37.692
It'll turn that ID into a full
object instance if it finds it and

53
00:03:37.692 --> 00:03:39.104
then you'll get it back.

