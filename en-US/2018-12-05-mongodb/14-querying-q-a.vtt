WEBVTT

1
00:00:01.040 --> 00:00:03.090
&gt;&gt; Student: Could you go
to the end of that line?

2
00:00:03.090 --> 00:00:04.850
&gt;&gt; Scott Moss: Which one?
&gt;&gt; Student: 39, the one you're on.

3
00:00:04.850 --> 00:00:05.520
&gt;&gt; Scott Moss: There you go.

4
00:00:05.520 --> 00:00:10.850
&gt;&gt; Student: So
why do we use school._ id here but

5
00:00:10.850 --> 00:00:14.570
then on 41 we use student.id?

6
00:00:14.570 --> 00:00:15.230
&gt;&gt; Scott Moss: That's a good question.

7
00:00:15.230 --> 00:00:18.611
So remember, these queries and

8
00:00:18.611 --> 00:00:24.630
these Mongoose Operations
return Mongoose objects.

9
00:00:24.630 --> 00:00:27.000
And part of that,
there's this thing called virtualization,

10
00:00:27.000 --> 00:00:28.950
that you're gonna be working on soon.

11
00:00:28.950 --> 00:00:33.460
And virtualization's basically, it's a
field that doesn't exist in a database but

12
00:00:33.460 --> 00:00:35.520
gets created at run time.

13
00:00:35.520 --> 00:00:39.080
And by default,
there is an _id that saves at a database.

14
00:00:39.080 --> 00:00:41.720
That's kind of annoying
to do _id all the time.

15
00:00:41.720 --> 00:00:45.370
So mongoose virtualized
the field called id.

16
00:00:45.370 --> 00:00:47.930
That represents the same
thing as underscore ID, but

17
00:00:47.930 --> 00:00:50.870
that's only if you use
the Mongoose objects.

18
00:00:50.870 --> 00:00:55.730
If you were to convert that to JSON or
object by default, you won't have .id.

19
00:00:55.730 --> 00:00:59.901
So just to be explicit and
to avoid errors, it can be saved as use

20
00:00:59.901 --> 00:01:04.576
_ id until you understand virtuals and
how to keep those consistent.

21
00:01:06.826 --> 00:01:09.562
&gt;&gt; Student2: So
if you add another student to the school?

22
00:01:11.327 --> 00:01:13.792
&gt;&gt; Scott Moss: Yes, so
if I add another student to the school or

23
00:01:13.792 --> 00:01:16.830
create another student that
has reference to the school.

24
00:01:16.830 --> 00:01:23.634
So we can say, const student2, and
I'm just gonna copy that, change the name.

25
00:01:27.236 --> 00:01:28.764
&gt;&gt; Scott Moss: And
it's got the same school.

26
00:01:31.157 --> 00:01:32.751
&gt;&gt; Scott Moss: All right,
so I'm gonna do that and

27
00:01:32.751 --> 00:01:34.966
then,
&gt;&gt; Scott Moss: Actually,

28
00:01:34.966 --> 00:01:37.430
I gotta change these two
cuz those will break again.

29
00:01:37.430 --> 00:01:42.690
&gt;&gt; Student2: Or could it do just create or
find, or something like that?

30
00:01:42.690 --> 00:01:45.780
&gt;&gt; Scott Moss: Create or,
you mean this one?

31
00:01:45.780 --> 00:01:49.252
You like if I change this to create or,
are you talking about for the school or

32
00:01:49.252 --> 00:01:50.073
for the student?

33
00:01:50.073 --> 00:01:51.286
&gt;&gt; Student2: Yeah, for the school.

34
00:01:51.286 --> 00:01:52.031
&gt;&gt; Scott Moss: For the school.

35
00:01:52.031 --> 00:01:54.330
You mean like,
if it is already there don't do it.

36
00:01:54.330 --> 00:01:55.340
Is that what you are saying?

37
00:01:55.340 --> 00:01:56.480
Yeah, you can do that.

38
00:01:56.480 --> 00:01:58.260
So I will do, create.

39
00:01:59.940 --> 00:02:01.148
Actually, you don't have
to create that there.

40
00:02:01.148 --> 00:02:02.460
I think they got rid of that.

41
00:02:02.460 --> 00:02:04.731
I'm almost positive they got rid of that,
hold on.

42
00:02:16.762 --> 00:02:19.360
&gt;&gt; Scott Moss: Yeah, I think you
might be referring to find one and

43
00:02:19.360 --> 00:02:20.757
update with true.

44
00:02:20.757 --> 00:02:22.419
Whereas like it finds it.

45
00:02:22.419 --> 00:02:24.630
If it does find it, it will return it.

46
00:02:24.630 --> 00:02:29.060
If it doesn't see it, I can put upsearch
through, which we'll create it.

47
00:02:29.060 --> 00:02:30.810
I think that might be the one
you might referring to.

48
00:02:32.750 --> 00:02:36.430
So if we do that, that's basically this.

49
00:02:36.430 --> 00:02:37.420
So stop doing create.

50
00:02:38.600 --> 00:02:41.250
But you'd have to be there and let's.

51
00:02:41.250 --> 00:02:46.637
So it'll be school.findOne,

52
00:02:46.637 --> 00:02:52.819
and then I could say mlk elementry and

53
00:02:52.819 --> 00:02:57.221
then findOneAndUpdate.

54
00:02:57.221 --> 00:02:59.230
So I have to do that.

55
00:02:59.230 --> 00:03:03.673
But if it's not there, then I have to
put the same object in there that's for

56
00:03:03.673 --> 00:03:04.307
the find.

57
00:03:08.893 --> 00:03:11.450
&gt;&gt; Scott Moss: Like that,
just in case it's not there.

58
00:03:11.450 --> 00:03:16.170
And then I can say upsert: true,
which will create it if it's not there.

59
00:03:17.350 --> 00:03:22.370
And then just to make sure I get
the new one back, new true, avoid that.

60
00:03:22.370 --> 00:03:24.530
So that's saying find it.

61
00:03:24.530 --> 00:03:25.300
If it is there, return it.

62
00:03:27.330 --> 00:03:28.480
If it is there, update it.

63
00:03:28.480 --> 00:03:31.140
If it's not there, create it from
scratch with this second object.

64
00:03:31.140 --> 00:03:32.240
So whatever the second object is,

65
00:03:32.240 --> 00:03:34.650
the updated object,
that's what I want you to create it from.

66
00:03:34.650 --> 00:03:36.156
So that's how you would avoid that error.

67
00:03:41.713 --> 00:03:42.632
&gt;&gt; Scott Moss: Any other questions?

68
00:03:48.055 --> 00:03:50.770
&gt;&gt; Student3: Do we have exec
at the end of 38 or not?

69
00:03:50.770 --> 00:03:52.450
Do I not need that?

70
00:03:52.450 --> 00:03:54.498
&gt;&gt; Scott Moss: If there's a find,
you definitely wanna put an exec.

71
00:03:54.498 --> 00:03:56.530
I haven't been using exec on any of these.

72
00:03:56.530 --> 00:03:59.370
Haven't been explicit because I'm
not doing anything with them.

73
00:03:59.370 --> 00:04:03.460
But, yeah, always get in a good
habit of doing .exec on them.

74
00:04:03.460 --> 00:04:06.160
Like I said, you probably won't
run into issues with them.

75
00:04:06.160 --> 00:04:09.650
But if you use a library that is
like very strict with promises and

76
00:04:09.650 --> 00:04:13.840
they are expecting a promise spec promise,
then you're going to run into a problem.

77
00:04:13.840 --> 00:04:15.090
But if you're just using
something like .den,

78
00:04:15.090 --> 00:04:17.530
then you're never going
to run into a problem.

79
00:04:17.530 --> 00:04:20.370
But there are promise libraries
out there that are to the spec.

80
00:04:20.370 --> 00:04:23.827
And if the spec ever evolves into
something else, other than just .den,

81
00:04:23.827 --> 00:04:25.121
then these will all break.

82
00:04:29.893 --> 00:04:34.526
&gt;&gt; Student2: So
upsert either updates or creates it.

83
00:04:34.526 --> 00:04:39.300
&gt;&gt; Scott Moss: Yeah, so upsert means if
you don't find a matching document with

84
00:04:39.300 --> 00:04:42.800
this query, then create a new
document with this update.

85
00:04:43.830 --> 00:04:44.671
That's what upsert does.

86
00:04:52.867 --> 00:04:54.570
&gt;&gt; Student2: What is new: true for you?

87
00:04:54.570 --> 00:04:58.510
&gt;&gt; Scott Moss: New: true,
what it does is, by default,

88
00:04:58.510 --> 00:05:03.560
if you update a document, it's not gonna
return the new document that was updated.

89
00:05:03.560 --> 00:05:06.790
It's gonna return the document
before that was not updated.

90
00:05:06.790 --> 00:05:08.620
I don't know why it would ever do that.

91
00:05:08.620 --> 00:05:12.700
So you have to pass new: true to say, give
me the document after you updated it so

92
00:05:12.700 --> 00:05:16.030
I have the new properties versus
the document before you updated it.

93
00:05:17.410 --> 00:05:19.880
The only other stuff I want to show
you that's going to be helpful for

94
00:05:19.880 --> 00:05:24.780
your exercise is walking through some
more slightly complicated queries.

95
00:05:24.780 --> 00:05:27.159
So we already talked about populate but

96
00:05:27.159 --> 00:05:30.160
there is some other stuff
that we can do in here.

97
00:05:30.160 --> 00:05:34.320
For instance, if we have these students, I
have a student whose first name is Trisha.

98
00:05:34.320 --> 00:05:40.770
Then what I can do, instead of say
findById, let's say I just say findOne.

99
00:05:40.770 --> 00:05:44.100
Now, I can pass in an object and
I can say firstName

100
00:05:46.110 --> 00:05:49.620
the same as Trisha, and
that one might be obvious.

101
00:05:49.620 --> 00:05:52.150
That one might be pretty obvious that
obviously we're doing name match

102
00:05:52.150 --> 00:05:53.450
here for field.

103
00:05:53.450 --> 00:05:56.350
But there's a lot more stuff
you can do in here, and

104
00:05:56.350 --> 00:05:58.140
it's pretty optional how
you want to do them.

105
00:05:58.140 --> 00:06:03.630
So it really depends if you want
to run a Mongoose query, which is

106
00:06:03.630 --> 00:06:08.100
methods that are chainable, or if you just
wanna pass filters as properties here.

107
00:06:08.100 --> 00:06:10.310
So you can kinda go both
ways of how you wanna do it.

