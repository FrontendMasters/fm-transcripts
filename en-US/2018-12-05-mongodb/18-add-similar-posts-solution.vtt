WEBVTT

1
00:00:00.140 --> 00:00:01.941
&gt;&gt; Scott Moss: And
then the last one is add related post, so

2
00:00:01.941 --> 00:00:03.943
you have to do a lot of work
to get this one to work.

3
00:00:03.943 --> 00:00:05.222
Did anyone get this last one to work?

4
00:00:07.401 --> 00:00:09.190
&gt;&gt; Scott Moss: Yeah, it's a lot of work.

5
00:00:09.190 --> 00:00:13.050
Okay, so this last one if you look
at the test, add related post,

6
00:00:13.050 --> 00:00:15.900
should not override related
posts that are there.

7
00:00:17.710 --> 00:00:20.790
So I mentioned something in the,
to do that,

8
00:00:20.790 --> 00:00:24.640
you had to add a field for
related posts, right?

9
00:00:24.640 --> 00:00:26.810
But there was no test for that.

10
00:00:26.810 --> 00:00:28.440
So when you got to this point,

11
00:00:28.440 --> 00:00:31.190
this is where you would have to have
added in order to get this to work.

12
00:00:31.190 --> 00:00:33.200
So that was the first step,
you had to add that.

13
00:00:33.200 --> 00:00:35.230
And that's why I put that in the readme.

14
00:00:35.230 --> 00:00:40.140
And then after you add that, the next
thing you gotta do is actually figure out

15
00:00:40.140 --> 00:00:43.660
how to do a mutation against that
array without erasing everything.

16
00:00:43.660 --> 00:00:45.649
So we gonna walk through
that step by step.

17
00:00:45.649 --> 00:00:49.798
So the first thing is head over
the post and if you look at the test.

18
00:00:52.537 --> 00:00:53.488
&gt;&gt; Scott Moss: Go back to the test.

19
00:00:54.822 --> 00:00:59.944
&gt;&gt; Scott Moss: Clear that expect,
it looks like it's expecting the post

20
00:00:59.944 --> 00:01:06.435
to have an array called similarPosts
whose value Types is like ObjectId.

21
00:01:06.435 --> 00:01:08.941
And it's also the same thing
that I've put in the Readme,

22
00:01:08.941 --> 00:01:10.830
you have to make another field.

23
00:01:10.830 --> 00:01:13.662
It's gonna be many-to-many,
it's gonna be an array.

24
00:01:13.662 --> 00:01:16.372
So you would have to go do that, so
we're gonna go ahead and do that here.

25
00:01:18.371 --> 00:01:22.948
&gt;&gt; Scott Moss: Post, so now I'm
gonna go down to the post field and

26
00:01:22.948 --> 00:01:25.724
I'm gonna add similarPosts.

27
00:01:27.480 --> 00:01:32.220
And it's gonna be an array type and
we looked at array types before.

28
00:01:32.220 --> 00:01:36.580
The only difference is it's
belonging to an association.

29
00:01:36.580 --> 00:01:39.010
An association is itself, it's a post.

30
00:01:39.010 --> 00:01:43.751
So what we're gonna do
is we're gonna say it's

31
00:01:43.751 --> 00:01:48.614
type is mongoose.Sxchma.Types.ObjectID,

32
00:01:48.614 --> 00:01:55.132
there we're going to say the ref is
going to be whatever the name of

33
00:01:55.132 --> 00:02:00.841
this collection is,
which is post, so we'll say post.

34
00:02:00.841 --> 00:02:02.173
Here we go.

35
00:02:02.173 --> 00:02:08.499
So now it's going to be an array of IDs
that reference the post correction.

36
00:02:08.499 --> 00:02:12.519
So that's step one,
I will over to expect file and

37
00:02:12.519 --> 00:02:18.386
then now we can actually fill this
function where its addSimilarPosts.

38
00:02:18.386 --> 00:02:23.038
So it's gonna give you a postId and
it's gonna give you an array of

39
00:02:23.038 --> 00:02:27.703
similarpostIds to update the given
the found POST by the Id with.

40
00:02:27.703 --> 00:02:31.159
So that means you don't want to blow
out the array of similar posts that

41
00:02:31.159 --> 00:02:34.990
are already there for the given post,
you want to add to that array.

42
00:02:34.990 --> 00:02:37.250
So you don't want to set,
you want to update.

43
00:02:37.250 --> 00:02:40.020
And by default if you just wrote
a regular query, you might set it and

44
00:02:40.020 --> 00:02:42.310
overwrite it and
the test is gonna test for that.

45
00:02:42.310 --> 00:02:45.190
So if you got to this point, you might
have overwritten your array and like,

46
00:02:45.190 --> 00:02:47.405
I don't know what to do here,
you gotta update the array.

47
00:02:47.405 --> 00:02:55.073
So the way you wanna do that is
we wanna do a return Post.find.

48
00:02:55.073 --> 00:02:58.250
Let's do a find by Id cuz we get an Id,
so that makes sense.

49
00:02:58.250 --> 00:03:03.140
And also you wanna update,
so findByIdAndUpdate.

50
00:03:03.140 --> 00:03:05.660
So we do update here and
we wanna find by this Id.

51
00:03:07.110 --> 00:03:10.430
And then for the update,
this is where it gets kinda tricky.

52
00:03:10.430 --> 00:03:15.890
What we wanna do is,
when your operating with arrays in Mongo,

53
00:03:15.890 --> 00:03:18.940
and you wanna do CRUD on them,

54
00:03:18.940 --> 00:03:23.880
you want to use the push
helper property from Mongoose,

55
00:03:23.880 --> 00:03:28.130
it's actually Mongo, but Mongoose uses it
as well to push things into that array.

56
00:03:28.130 --> 00:03:29.599
So I want this $push.

57
00:03:29.599 --> 00:03:31.530
So I'm gonna say $push, and

58
00:03:31.530 --> 00:03:36.550
then from here what you do is you have
to say what field do you wanna push on.

59
00:03:36.550 --> 00:03:39.094
In this case,
I wanna push on the similarPost field.

60
00:03:40.650 --> 00:03:43.640
And from here what you normally would
do is you just put a value here.

61
00:03:43.640 --> 00:03:49.730
So I just put like an ID, but the problem
is, I have an array of values and

62
00:03:49.730 --> 00:03:54.830
I want to push, I want to put each one of
those inside of this similar posts array.

63
00:03:54.830 --> 00:03:57.879
Each one of them, so
if I just put the array here like this,

64
00:03:57.879 --> 00:04:01.119
similar post it might discover
write what is there already and

65
00:04:01.119 --> 00:04:05.002
then test already put some in there so
you will completely override that.

66
00:04:05.002 --> 00:04:10.024
So instead you wanna update that,
so what you do is you'll use

67
00:04:10.024 --> 00:04:15.550
the $each method here and
then you can say similarPosts.

68
00:04:15.550 --> 00:04:19.340
So basically what this is saying is I want

69
00:04:20.500 --> 00:04:25.360
to add a push command on
the field called similarPost and

70
00:04:25.360 --> 00:04:29.850
I want to push in each item inside
this array called similarPosts.

71
00:04:30.910 --> 00:04:33.411
So if there's three items in this array,

72
00:04:33.411 --> 00:04:36.274
they're all gonna get
pushed into this array.

73
00:04:36.274 --> 00:04:37.446
&gt;&gt; Speaker 2: What is the push command?

74
00:04:37.446 --> 00:04:38.955
What kind of command is this?

75
00:04:38.955 --> 00:04:42.841
&gt;&gt; Scott Moss: This is a mongo native
command, it's how you operate on arrays

76
00:04:42.841 --> 00:04:47.699
with mongo so if you want to add items to
an array, you would have these pushed.

77
00:04:47.699 --> 00:04:50.917
Just like the same way you would do it in
JavaScript, you'd have to do dot push,

78
00:04:50.917 --> 00:04:52.034
it's the same way, yeah.

79
00:04:52.034 --> 00:04:55.571
So yeah, dot push is a native
JavaScript thing with arrays, so

80
00:04:55.571 --> 00:04:59.200
you're pushing something to
the beginning of an array, yeah.

81
00:05:01.401 --> 00:05:05.783
&gt;&gt; Scott Moss: And then we'll .exact and
then because this is an update, I'm gonna

82
00:05:05.783 --> 00:05:10.760
test probably I'm gonna fill this and
put a new true, right last time so

83
00:05:10.760 --> 00:05:15.091
make sure we get updated document
not the one before you got updated.

84
00:05:16.616 --> 00:05:23.066
&gt;&gt; Scott Moss: So
we'll do that and we go back and,

85
00:05:23.066 --> 00:05:29.519
sorry postId Post ID, there we go.

86
00:05:29.519 --> 00:05:32.193
So we'll do that and all the tests pass.

