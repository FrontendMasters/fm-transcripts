WEBVTT

1
00:00:00.070 --> 00:00:03.080
&gt;&gt; Scott Moss: Hope
everyone had some fun and

2
00:00:03.080 --> 00:00:06.730
enough time to get some of those tests,
if not all of those tests to pass.

3
00:00:07.740 --> 00:00:10.780
So I'm just gonna walk
through all those solutions.

4
00:00:10.780 --> 00:00:15.120
And also you can check out to the master
branch or the solution branch and

5
00:00:15.120 --> 00:00:16.330
see the solutions yourself.

6
00:00:16.330 --> 00:00:18.660
But I'm gonna walk through the same
solutions that are gonna be on that

7
00:00:18.660 --> 00:00:20.170
branch right now.

8
00:00:20.170 --> 00:00:23.670
So the first thing that we're
supposed to do after we install and

9
00:00:23.670 --> 00:00:26.610
do all that stuff is
create connection logic.

10
00:00:26.610 --> 00:00:31.220
And this logic is very important because
the test itself actually uses this logic.

11
00:00:31.220 --> 00:00:36.470
So it's basically gonna be exactly
the same thing that I showed you all in

12
00:00:36.470 --> 00:00:37.230
the demonstration.

13
00:00:37.230 --> 00:00:42.293
It's just gonna use the mogoose.connect
and then you pass the url.

14
00:00:42.293 --> 00:00:43.060
That's it.

15
00:00:44.310 --> 00:00:45.850
And once that's there, you're connected.

16
00:00:45.850 --> 00:00:46.500
Like I said,

17
00:00:46.500 --> 00:00:49.340
there are some other options you can pass
here depending on what version you have.

18
00:00:49.340 --> 00:00:54.170
Like for me,
I might put use new url parser true or

19
00:00:54.170 --> 00:00:57.350
something like that to get
the deprecation warrant to go away.

20
00:00:57.350 --> 00:00:58.710
But it's not that important right now.

21
00:00:58.710 --> 00:00:59.339
It still connects.

22
00:01:00.720 --> 00:01:05.040
So once you add that url, like I said this
is very important because the testing

23
00:01:05.040 --> 00:01:07.650
setup that I'm using is
using your connection logic.

24
00:01:07.650 --> 00:01:11.320
So if this logic isn't working, then
none of the tests will execute properly.

25
00:01:11.320 --> 00:01:13.590
So you would have had to
have done this one first,

26
00:01:13.590 --> 00:01:15.130
which is why I put it
first in the checklist.

27
00:01:17.080 --> 00:01:18.490
So once that's good,

28
00:01:18.490 --> 00:01:22.580
then let's head over to the user spec
since Connor relies on user to be done.

29
00:01:22.580 --> 00:01:26.920
And I'll just open these up side-by-side
so we can figure out what's going on.

30
00:01:26.920 --> 00:01:31.805
So user spec, and then userjs.

31
00:01:31.805 --> 00:01:35.920
All right, so the first test,
let's get this to pass.

32
00:01:35.920 --> 00:01:37.860
It says first name must be required.

33
00:01:37.860 --> 00:01:41.920
So we'll head over to the user schema and
to the first name declaration field here,

34
00:01:41.920 --> 00:01:45.700
and we'll just put required true.

35
00:01:45.700 --> 00:01:48.641
So we'll run that, and
then we'll run our test.

36
00:01:51.732 --> 00:01:54.362
&gt;&gt; Scott Moss: Get that command,
I'm just gonna do a --watch.

37
00:01:54.362 --> 00:01:57.340
If you do --watch in JS,
it will just keep the tests there and

38
00:01:57.340 --> 00:02:00.210
run them every time you change a file, so
it doesn't have to rebuild every time.

39
00:02:01.680 --> 00:02:02.830
So it looks like that one passed.

40
00:02:02.830 --> 00:02:07.320
I got one that passed, and just to verify
if it was that one, we'll scroll up and

41
00:02:07.320 --> 00:02:08.070
it was.

42
00:02:08.070 --> 00:02:09.700
First name must be required.

43
00:02:09.700 --> 00:02:11.600
So that one's good.

44
00:02:11.600 --> 00:02:14.620
The next one says,
last name must be required.

45
00:02:14.620 --> 00:02:15.830
Very much the same thing.

46
00:02:15.830 --> 00:02:18.828
Just copy and past that required
field down, and we're good.

47
00:02:18.828 --> 00:02:21.760
Test is re-running,
looks like two pass now.

48
00:02:22.990 --> 00:02:29.120
And just to verify, last name must be
required, so that one's good, okay?

49
00:02:29.120 --> 00:02:33.010
Keep going and if you want,
just a quick tip with jes.

50
00:02:33.010 --> 00:02:35.830
You might see something that
says expect.insertions1.

51
00:02:35.830 --> 00:02:42.900
This is because if your code didn't
throw an error I wouldn't know.

52
00:02:42.900 --> 00:02:46.780
So I have to tell jes that you should
expect at least one insertion.

53
00:02:46.780 --> 00:02:49.820
Because if this code didn't throw
an error, this catch would never run.

54
00:02:49.820 --> 00:02:52.510
And therefore,
there would be no expectations.

55
00:02:52.510 --> 00:02:54.760
And then we would never if your test or
failed.

56
00:02:54.760 --> 00:02:55.750
We just wouldn't know.

57
00:02:55.750 --> 00:02:59.870
So this is captioning a failure
that should be a failure, so

58
00:02:59.870 --> 00:03:01.420
that's why I'm telling you to do that.

59
00:03:02.770 --> 00:03:06.680
So for email, email must be required
very much the same thing so

60
00:03:06.680 --> 00:03:09.100
I'm just gonna paste that
required true in the email.

61
00:03:09.100 --> 00:03:13.111
And it looks like three is passing now, so

62
00:03:13.111 --> 00:03:18.079
if we verify that, we have,
&gt;&gt; Scott Moss: Email must be required so

63
00:03:18.079 --> 00:03:18.790
that passes.

64
00:03:18.790 --> 00:03:22.500
So, that's good.
And then this is where it starts to

65
00:03:22.500 --> 00:03:23.300
get tricky.

66
00:03:23.300 --> 00:03:25.440
So email must be unique, okay.

67
00:03:26.630 --> 00:03:28.240
So we talked about this one a little bit,

68
00:03:28.240 --> 00:03:31.800
and it's just adding
the unique field here to true.

69
00:03:32.830 --> 00:03:33.830
This is one way to do it,

70
00:03:33.830 --> 00:03:36.470
we will talk about other ways to
do it when we talk about indexes.

71
00:03:36.470 --> 00:03:40.320
Remember unique is not
a validation it is an index.

72
00:03:40.320 --> 00:03:42.270
If you don't know what index is that's
fine we are going to talk about

73
00:03:42.270 --> 00:03:42.860
indexes later.

74
00:03:42.860 --> 00:03:46.560
But it is an index, it is not
a validation, completely different thing.

75
00:03:46.560 --> 00:03:49.040
So unique true is going
to add an index here and

76
00:03:49.040 --> 00:03:52.470
in a test you'll see me doing
something like user.init.

77
00:03:52.470 --> 00:03:55.110
This is because indexes
take time to build.

78
00:03:55.110 --> 00:03:58.725
And I need them to be built before
I can actually use them, so

79
00:03:58.725 --> 00:04:03.770
user.init is telling mongoose,
hey I'm just going to wait until

80
00:04:03.770 --> 00:04:06.980
you tell me when the index for the user
is done because indexes have to be built.

81
00:04:06.980 --> 00:04:10.930
They are basically Data in a file,
and that file has to be written.

82
00:04:10.930 --> 00:04:15.630
And I need it to be there so I can check
for validations against that index.

83
00:04:15.630 --> 00:04:18.050
So wait for the indexes to be built, and

84
00:04:18.050 --> 00:04:21.935
then try to create two users with the same
email, and we'll see what happens.

85
00:04:21.935 --> 00:04:27.070
So it looks like four tests are passing,
before I go verify that.

86
00:04:28.970 --> 00:04:29.830
Email must be unique.

87
00:04:29.830 --> 00:04:32.300
So that one is good, good to go there.

88
00:04:32.300 --> 00:04:34.020
What else do we have in here?

89
00:04:34.020 --> 00:04:36.770
We have betaUser should default to false.

90
00:04:37.850 --> 00:04:39.050
So we didn't talk about defaults, but

91
00:04:39.050 --> 00:04:42.540
it looks like people were getting this one
to pass because it's so intuitive, right?

92
00:04:42.540 --> 00:04:44.290
It's probably what you think it is.

93
00:04:44.290 --> 00:04:48.610
Like what if I just add
a default here to false?

94
00:04:48.610 --> 00:04:51.650
If you did that then you'd be right
because that's exactly what it is.

95
00:04:51.650 --> 00:04:53.210
If you add a default field here.

96
00:04:53.210 --> 00:04:54.560
And you can put whatever value you want,

97
00:04:54.560 --> 00:04:56.380
as long as the value's
the same type as the type.

98
00:04:57.620 --> 00:05:04.200
So if we go look,
we get 60 pounds here and

99
00:05:04.200 --> 00:05:07.270
that right there fixed the other
test which needed other fields, too.

100
00:05:07.270 --> 00:05:09.331
So pass two tests just with that one fix.

