WEBVTT

1
00:00:00.980 --> 00:00:05.640
&gt;&gt; Speaker 1: So since morning
this is what I was wondering.

2
00:00:05.640 --> 00:00:07.240
Is Mongo dynamic?

3
00:00:08.520 --> 00:00:10.594
&gt;&gt; Scott Moss: Dynamic as in,
like what do you mean?

4
00:00:10.594 --> 00:00:12.210
Give me an example.

5
00:00:12.210 --> 00:00:17.397
&gt;&gt; Speaker 1: So our servers,
they have limited memory,

6
00:00:17.397 --> 00:00:22.170
or they're 1tb long or 5T long.

7
00:00:22.170 --> 00:00:23.998
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 1: From the looks of it,

8
00:00:23.998 --> 00:00:26.340
it looks like it's been expanded.

9
00:00:26.340 --> 00:00:28.550
&gt;&gt; Scott Moss: It just goes
until it eats all your stores.

10
00:00:28.550 --> 00:00:31.506
Yeah, you don't have to set.

11
00:00:31.506 --> 00:00:35.178
I mean, it's not like dynamodb where
you're like, you gotta tell me exactly how

12
00:00:35.178 --> 00:00:38.447
much you need, and then I think that's
more of a business decision for them,

13
00:00:38.447 --> 00:00:40.440
right, cuz they charge for that.

14
00:00:40.440 --> 00:00:42.650
Right, but no, Mongo's not like that.

15
00:00:42.650 --> 00:00:45.539
This thing will eat your whole
hard drive if you let it.

16
00:00:45.539 --> 00:00:50.340
But like I said, there's some scientific
stuff behind how they calculate how

17
00:00:50.340 --> 00:00:55.212
much RAM they need, how much stuff they
need, and then what do they allocate for

18
00:00:55.212 --> 00:00:59.040
indexes versus actual data
versus what's actually on disk.

19
00:00:59.040 --> 00:01:01.400
It's actually pretty
smart the way they do it.

20
00:01:02.450 --> 00:01:04.380
But yeah,
if you wanna look more into that,

21
00:01:04.380 --> 00:01:07.890
you can look up the what's
called the WiredTiger engine.

22
00:01:07.890 --> 00:01:10.310
If you Google that you will find days and

23
00:01:10.310 --> 00:01:13.290
weeks worth of information
about how that works.

24
00:01:13.290 --> 00:01:15.290
But yeah,
you can just expand this stuff forever.

25
00:01:15.290 --> 00:01:17.339
You don't have to set limits
when you create your database.

26
00:01:19.750 --> 00:01:22.711
But when you go get a hosted database,
yeah, it's going to be capped, right?

27
00:01:22.711 --> 00:01:24.100
It's like you get a terabyte.

28
00:01:24.100 --> 00:01:25.822
If you want more, you got to pay for
something, right?

29
00:01:25.822 --> 00:01:31.540
Cuz that's just what those machines
that host those databases are capped to.

30
00:01:31.540 --> 00:01:35.020
Yes.

31
00:01:35.020 --> 00:01:41.000
&gt;&gt; Speaker 1: How is consistency achieved
in Mongo, in SQL Server when someone's

32
00:01:41.000 --> 00:01:43.710
performing a write operation, it's just-
&gt;&gt; Scott Moss: It blocks everything.

33
00:01:43.710 --> 00:01:46.990
&gt;&gt; Speaker 1: Yeah, there's a locking
mechanism which goes on, and

34
00:01:46.990 --> 00:01:51.180
nobody can write it unless this
user is done with his writing.

35
00:01:51.180 --> 00:01:53.470
&gt;&gt; Scott Moss: Yeah, so
that's like a ACID compliant database.

36
00:01:55.160 --> 00:01:58.105
So the answer to that is
Mongo 4 just came out and

37
00:01:58.105 --> 00:02:00.830
Mongo 5 supports this new thing,
transactions.

38
00:02:00.830 --> 00:02:05.940
So it's the same way you would use
transactions to basically create a queue

39
00:02:05.940 --> 00:02:09.600
to block everything and
get commands and put them in a queue.

40
00:02:09.600 --> 00:02:12.570
And then you run those commands and
then you replay them back.

41
00:02:12.570 --> 00:02:15.510
So you can do that, but
the thing is this is running on Node, so

42
00:02:15.510 --> 00:02:16.400
everything's asynchronous.

43
00:02:16.400 --> 00:02:18.200
So all that it was doing on database,

44
00:02:18.200 --> 00:02:20.860
you have another request that's
coming in that's doing stuff, too.

45
00:02:20.860 --> 00:02:24.030
So it can also happen asynchronously, but

46
00:02:24.030 --> 00:02:26.400
the transactions protect
you on the database level.

47
00:02:26.400 --> 00:02:28.070
So you can still do transactions,

48
00:02:28.070 --> 00:02:32.260
but you gotta go back to think
about why would you need.

49
00:02:32.260 --> 00:02:34.730
If you think about why you need
transactions in the first place,

50
00:02:34.730 --> 00:02:38.380
it's because you have tables
that are all separated and

51
00:02:38.380 --> 00:02:42.370
you need to perform one thing but that one
thing touches like five tables, right?

52
00:02:42.370 --> 00:02:44.090
So you gotta make sure it does this and
then this.

53
00:02:44.090 --> 00:02:46.090
Well, if this messes up, undo this.

54
00:02:46.090 --> 00:02:49.630
Whereas kind of like in Mongo you can
put almost everything you need for

55
00:02:49.630 --> 00:02:51.800
one operation in one schema.

56
00:02:51.800 --> 00:02:53.750
So you don't really have to
think about transactions.

57
00:02:53.750 --> 00:02:55.120
Transactions, that's why they added it so

58
00:02:55.120 --> 00:02:59.130
late cuz it was an afterthought, because
you could just get away without ever

59
00:02:59.130 --> 00:03:03.240
having to use transactions just by
modeling your data with nested objects.

60
00:03:03.240 --> 00:03:04.210
So if you nest your objects and

61
00:03:04.210 --> 00:03:07.910
everything belongs to one model,
then you don't need transactions.

62
00:03:07.910 --> 00:03:10.340
There's only one thing to worry about,
it's not many things.

63
00:03:10.340 --> 00:03:12.200
So that's the way you
have to think about it.

64
00:03:12.200 --> 00:03:15.430
But if you come from a relational
database background,

65
00:03:15.430 --> 00:03:20.970
you start modeling data in Mongo, very
relational, that's actually what I did.

66
00:03:20.970 --> 00:03:23.250
You run into the problem where I
need transactions immediately.

67
00:03:23.250 --> 00:03:25.830
And that's why we were so
glad when they came out with them.

68
00:03:25.830 --> 00:03:28.210
But then after sitting down and
talking to the people at Mongo,

69
00:03:28.210 --> 00:03:31.130
I realized I was just
modeling my data like SQL.

70
00:03:31.130 --> 00:03:34.810
I should have been modeling like Mongo,
and we didn't need transactions any more.

71
00:03:36.430 --> 00:03:37.349
But yeah, they have transactions.

72
00:03:40.450 --> 00:03:43.390
&gt;&gt; Speaker 3: I mean, if you are worried
like about the multiple users using

73
00:03:43.390 --> 00:03:48.520
the same data, same record at the same
time, you may wanna implement something,

74
00:03:48.520 --> 00:03:50.760
maybe to market or
something, I don't know.

75
00:03:50.760 --> 00:03:54.396
&gt;&gt; Scott Moss: You mean if two users were-
&gt;&gt; Speaker 3: Editing the same thing, for

76
00:03:54.396 --> 00:03:56.480
example, like [INAUDIBLE] or
something like that.

77
00:03:56.480 --> 00:03:57.891
&gt;&gt; Scott Moss: If they were
writing at the same time?

78
00:03:57.891 --> 00:04:00.280
&gt;&gt; Speaker 3: Yeah, it was like
they're using the same piece of data.

79
00:04:00.280 --> 00:04:00.830
&gt;&gt; Scott Moss: Yeah, so

80
00:04:00.830 --> 00:04:04.420
when you write to the database in Mongo,
it doesn't actually write to the database.

81
00:04:04.420 --> 00:04:06.200
It writes it in memory.

82
00:04:06.200 --> 00:04:07.690
It writes it later, right?

83
00:04:07.690 --> 00:04:09.060
It has a journal log, yeah.

84
00:04:09.060 --> 00:04:11.440
So it doesn't write to disk immediately.

85
00:04:11.440 --> 00:04:12.540
It writes everything in memory.

86
00:04:12.540 --> 00:04:16.060
So it can figure out what's happening
if it's a split second thing and

87
00:04:16.060 --> 00:04:17.220
then it can dedupe it.

88
00:04:17.220 --> 00:04:18.840
So it can figure that stuff out.

89
00:04:18.840 --> 00:04:20.397
If you're writing to the database and

90
00:04:20.397 --> 00:04:23.650
it write into memory, there's
something already in memory that was

91
00:04:23.650 --> 00:04:27.180
operation that already happening on
the same thing, it's just like a replay.

92
00:04:27.180 --> 00:04:28.570
It kind of knows what's happening there.

93
00:04:28.570 --> 00:04:31.705
So you don't have it locked to database
because it's just in the memory,

94
00:04:31.705 --> 00:04:33.720
everything's in the memory until it's not.

95
00:04:33.720 --> 00:04:36.940
And it is like a flush and
then it saves it and then you're good.

