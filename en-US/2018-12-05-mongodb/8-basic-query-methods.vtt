WEBVTT

1
00:00:00.250 --> 00:00:01.390
&gt;&gt; Scott Moss: So now that we know that,

2
00:00:01.390 --> 00:00:04.480
there are gonna be a couple
methods here that you can use.

3
00:00:04.480 --> 00:00:05.806
I'm just gonna walk through them briefly.

4
00:00:05.806 --> 00:00:06.880
So we've talked about create.

5
00:00:08.140 --> 00:00:10.440
The other ones are gonna be fine.

6
00:00:10.440 --> 00:00:13.965
So I'm gonna say student,
I'm gonna auto complete this, nuts.

7
00:00:13.965 --> 00:00:18.530
Student.find and I have autocomplete
set up here on VS Code, but

8
00:00:18.530 --> 00:00:20.240
you can see there
are tons of methods here.

9
00:00:20.240 --> 00:00:23.030
The ones that are gonna be very
important to you are just gonna be find,

10
00:00:23.030 --> 00:00:25.610
which gives you back a list of things.

11
00:00:25.610 --> 00:00:28.730
And you could put whatever properties
you wanna filter in on here.

12
00:00:28.730 --> 00:00:32.550
So if I wanted to find by first name,
I would say find by firstname.

13
00:00:32.550 --> 00:00:34.260
And whatever the first name was.

14
00:00:34.260 --> 00:00:36.490
And then it would try to find it.

15
00:00:36.490 --> 00:00:40.057
And that's gonna give you a list.

16
00:00:40.057 --> 00:00:47.226
Another one would be student.findById
which exactly what it sounds like,

17
00:00:47.226 --> 00:00:52.100
you get an id know find
one student by that id.

18
00:00:52.100 --> 00:00:55.050
So if I had an id here,
I can type in here and

19
00:00:55.050 --> 00:00:59.180
then I would get back just one
student with id if it exists.

20
00:00:59.180 --> 00:01:01.380
Mongo doesn't throw errors
if things don't exist.

21
00:01:01.380 --> 00:01:03.010
It just returns null.

22
00:01:03.010 --> 00:01:04.640
So if it's not there, it was just null.

23
00:01:04.640 --> 00:01:05.504
It's not gonna break.

24
00:01:09.366 --> 00:01:16.614
&gt;&gt; Scott Moss: Other helpful ones that you
will be using will be Student.findById and

25
00:01:16.614 --> 00:01:21.564
then like from there you can do delete,
remove,

26
00:01:21.564 --> 00:01:26.420
update, pretty much all
the CRUD operations.

27
00:01:26.420 --> 00:01:27.790
And they're all pretty much the same.

28
00:01:27.790 --> 00:01:34.040
So if I wanted to do findByIdAndUpdate,
I pass in the id as the first parameter.

29
00:01:34.040 --> 00:01:35.670
So like any id here.

30
00:01:35.670 --> 00:01:37.890
And then I pass what I want to have for
an update.

31
00:01:37.890 --> 00:01:41.740
And then if it finds it,
it'll push this object on to update it.

32
00:01:44.700 --> 00:01:47.780
So these are just like basic crud
methods but Mongoose has like so

33
00:01:47.780 --> 00:01:50.020
many of these methods it's ridiculous.

34
00:01:50.020 --> 00:01:52.300
And they keep changing
them all the time and

35
00:01:52.300 --> 00:01:55.610
you can make your own but
these are just the basic ones.

36
00:01:55.610 --> 00:01:57.875
So I'm just going to just label these.

37
00:02:16.302 --> 00:02:17.008
&gt;&gt; Scott Moss: Make
sure that code is good.

38
00:02:21.786 --> 00:02:23.390
&gt;&gt; Scott Moss: Any
questions on this course?

39
00:02:23.390 --> 00:02:24.790
Yes, Martin.

40
00:02:24.790 --> 00:02:29.315
&gt;&gt; Speaker 2: In the find,
is there a wildcard, like in SQL?

41
00:02:29.315 --> 00:02:34.190
&gt;&gt; Scott Moss: [LAUGH] Yes, if you wanna
do a wild card like give me everything,

42
00:02:34.190 --> 00:02:37.180
which you should not,
then you just put an empty object.

43
00:02:37.180 --> 00:02:41.290
That's the wild card, it's like, just give
me everything, just match everything, so

44
00:02:41.290 --> 00:02:42.230
just put an MD object there.

45
00:02:43.770 --> 00:02:46.710
Let's go do the whole collection scan
that's gonna scan your entire database.

46
00:02:46.710 --> 00:02:48.380
Well, I guess,
technically it wouldn't scan it cuz

47
00:02:48.380 --> 00:02:49.838
it's gonna just drop the whole collection.

48
00:02:49.838 --> 00:02:52.920
But yeah, you'll probably just crash
your server if you had a couple hundred

49
00:02:52.920 --> 00:02:54.590
thousand records or something.

50
00:02:54.590 --> 00:02:55.830
So yeah, just be careful with that.

51
00:02:55.830 --> 00:02:57.370
But, yeah, that's how you would do that.

52
00:02:57.370 --> 00:02:58.390
&gt;&gt; Speaker 3: Textual also?

53
00:02:58.390 --> 00:03:00.690
Textual wildcards part of?

54
00:03:00.690 --> 00:03:03.370
&gt;&gt; Scott Moss: That's called
a text index on a search.

55
00:03:03.370 --> 00:03:05.910
We probably won't get to that today
because it's pretty advanced.

56
00:03:05.910 --> 00:03:09.312
But yes, you can set up an index on
text so you can search within text.

57
00:03:09.312 --> 00:03:11.320
Give me something that starts with F.

58
00:03:11.320 --> 00:03:14.357
And that's a text index,
but that's pretty advanced.

59
00:03:14.357 --> 00:03:15.747
&gt;&gt; Speaker 3: Because it's
not common topic [LAUGH].

60
00:03:15.747 --> 00:03:19.870
&gt;&gt; Scott Moss: Yeah, well-
&gt;&gt; Speaker 3: Well, for such honestly.

61
00:03:19.870 --> 00:03:21.970
&gt;&gt; Scott Moss: Right,
there's better tools to search than Mongo.

62
00:03:21.970 --> 00:03:26.332
It searches but not, [LAUGH] no.

63
00:03:26.332 --> 00:03:27.170
Yeah?

64
00:03:27.170 --> 00:03:29.760
&gt;&gt; Speaker 4: Does MongoDB have default

65
00:03:29.760 --> 00:03:33.501
timestamps like-
&gt;&gt; Scott Moss: You guys just ask literally

66
00:03:33.501 --> 00:03:36.680
some of the best questions ever.

67
00:03:36.680 --> 00:03:41.840
By default, no, but just to show you,
so we can get to this exercise,

68
00:03:41.840 --> 00:03:46.409
you can pass a second option to schema
here, and you can put timestamps.

69
00:03:47.490 --> 00:03:50.950
True, and that'll put a created at and
updated at timestamp for you.

70
00:03:50.950 --> 00:03:54.550
&gt;&gt; Speaker 4: So Mongoose does that,
MongoDB doesn't have that?

71
00:03:54.550 --> 00:03:56.102
&gt;&gt; Scott Moss: Mongoose is doing this for
us, yeah.

72
00:03:58.654 --> 00:04:00.219
&gt;&gt; Scott Moss: Actually,
Mongo probably supports it now,

73
00:04:00.219 --> 00:04:01.630
now that I'm thinking about it.

74
00:04:01.630 --> 00:04:02.980
They might support this as well.

75
00:04:02.980 --> 00:04:05.710
And if so
Mongoose will pass it straight to them.

76
00:04:05.710 --> 00:04:08.630
But both of those libraries
are in such a flux right now,

77
00:04:08.630 --> 00:04:13.220
because there is actually such a huge
major release of Mongo version four,

78
00:04:13.220 --> 00:04:15.870
which released Mongoose version five.

79
00:04:15.870 --> 00:04:18.860
So there's so many deprecated
things happening right now,

80
00:04:18.860 --> 00:04:21.210
it's really hard to tell
which ones doing which now.

81
00:04:21.210 --> 00:04:22.640
And if you look in their GitHub issues,

82
00:04:22.640 --> 00:04:25.290
there's just tons of
what the hell's going on?

83
00:04:25.290 --> 00:04:26.260
So that's what's happening.

