WEBVTT

1
00:00:00.460 --> 00:00:04.810
&gt;&gt; Speaker 1: Can Scott explain
the pros and cons between Mongo NoSQL,

2
00:00:04.810 --> 00:00:10.078
versus traditional SQL databases
like MS SQL, Oracle, Postgres?

3
00:00:10.078 --> 00:00:14.517
&gt;&gt; Scott Moss: Wow,
&gt;&gt; Scott Moss: I could talk about that for

4
00:00:14.517 --> 00:00:15.210
a week.

5
00:00:16.430 --> 00:00:19.724
And I know everybody says this,
but it really depends on your app.

6
00:00:19.724 --> 00:00:23.881
But I can tell you from practical use from
my experience in the different types of

7
00:00:23.881 --> 00:00:26.130
apps that I've built, the pros and cons.

8
00:00:26.130 --> 00:00:31.690
So pros for Mongo, for me, was that it was
just easier to get started with, without

9
00:00:31.690 --> 00:00:38.210
having to fight a database with all of
its restrictions to get something going.

10
00:00:38.210 --> 00:00:42.544
I mean, you will see, just in a couple
lines we're able to spin up a database and

11
00:00:42.544 --> 00:00:46.819
throw some data in it without having to
think about things like foreign keys and

12
00:00:46.819 --> 00:00:49.044
primary keys and ids and all that stuff.

13
00:00:49.044 --> 00:00:49.930
We're able to just spin something up.

14
00:00:49.930 --> 00:00:53.125
So it's really great to started,
so that's one thing.

15
00:00:53.125 --> 00:00:54.193
Two, it is very flexible.

16
00:00:54.193 --> 00:00:58.377
Although we do have a schema, you saw
in the first attempt when I created

17
00:00:58.377 --> 00:01:02.839
a student, I didn't have to add a first
name, and it just doesn't matter,

18
00:01:02.839 --> 00:01:04.400
cuz it wasn't required.

19
00:01:04.400 --> 00:01:07.710
So it just adds it there and
it won't freak out about it.

20
00:01:07.710 --> 00:01:10.500
So that can be good or bad, but
it's just really flexible to get started.

21
00:01:11.890 --> 00:01:15.980
Three, the other thing that I've realized
is that when it comes to shaping data,

22
00:01:15.980 --> 00:01:18.780
it's really flexible because
it's just JSON by default.

23
00:01:18.780 --> 00:01:20.530
Sure, Postgres now has support for

24
00:01:20.530 --> 00:01:25.470
like JSONB, I think, where you
can just store JSON and Postgres.

25
00:01:25.470 --> 00:01:28.690
But how you create that JSON and
how you store it is two different things.

26
00:01:28.690 --> 00:01:30.460
I don't think you can query the JSON and

27
00:01:30.460 --> 00:01:32.829
Postgres the same way you
could query JSON in Mongo.

28
00:01:32.829 --> 00:01:38.080
Because all the keys are actually fields
in Mongo, whereas in JSON, it's just JSON.

29
00:01:39.120 --> 00:01:40.652
So there's a difference there.

30
00:01:40.652 --> 00:01:45.879
The other thing about Mongo is that it's
kind of built with JavaScript in mind,

31
00:01:45.879 --> 00:01:47.060
and Node in mind.

32
00:01:47.060 --> 00:01:51.019
So it's event-based and
it takes advantage of that architecture,

33
00:01:51.019 --> 00:01:53.005
which is really easy to work with.

34
00:01:53.005 --> 00:01:56.590
So that's why I think Mongoose
itself has one of the best ORMs.

35
00:01:56.590 --> 00:01:58.223
It's promise-based.

36
00:01:58.223 --> 00:02:00.900
It's modern.
It kinda just works with everything.

37
00:02:00.900 --> 00:02:04.040
Whereas a lot of other databases, it's
like, this just wasn't made for Node and

38
00:02:04.040 --> 00:02:06.340
you kinda gotta finesse
it to do a lot of work.

39
00:02:06.340 --> 00:02:10.640
If you've never had to use Postgres
in Node, then good for you.

40
00:02:10.640 --> 00:02:13.506
If you did,
you know what I'm talking about.

41
00:02:13.506 --> 00:02:17.438
And when you get into performance
reasons and scaling and all that stuff,

42
00:02:17.438 --> 00:02:20.990
I think at the higher end,
if you're like Google's of the world,

43
00:02:20.990 --> 00:02:24.420
I think Postgres and
SQL's gonna perform for better.

44
00:02:24.420 --> 00:02:28.710
I think it's just a more
complete database at that end.

45
00:02:28.710 --> 00:02:31.370
I mean, Postgres and
SQL's been around forever.

46
00:02:31.370 --> 00:02:33.420
There's just so much support on it.

47
00:02:33.420 --> 00:02:35.400
It's been ASIC compliant for awhile.

48
00:02:35.400 --> 00:02:38.280
Mongo's getting there,
they're just now becoming ASIC compliant.

49
00:02:38.280 --> 00:02:39.863
They have transactions.

50
00:02:39.863 --> 00:02:42.440
And they're definitely getting there,
but I would say because Postgres and

51
00:02:42.440 --> 00:02:45.186
SQL's been around for much longer, it's
probably just gonna be better for you.

52
00:02:45.186 --> 00:02:48.220
There's just more support for
those types of databases.

53
00:02:48.220 --> 00:02:51.240
I mean, if you go to AWS, there's just so
many different types of SQL databases.

54
00:02:51.240 --> 00:02:53.981
Sure they have Dynamo,
but they also have Aurora,

55
00:02:53.981 --> 00:02:55.964
which is a serverless SQL database.

56
00:02:55.964 --> 00:02:57.593
And pretty much everybody
has some SQL something.

57
00:02:57.593 --> 00:02:58.775
So because of support,

58
00:02:58.775 --> 00:03:02.266
I would say it's probably better if
you're the Googles of the world.

59
00:03:02.266 --> 00:03:04.800
But for everybody else,
I think Mongo is just great.

60
00:03:04.800 --> 00:03:08.240
It's just fantastic to get going.

61
00:03:08.240 --> 00:03:10.403
But yeah, I think it really
depends on your applications.

62
00:03:10.403 --> 00:03:14.840
Because if you have high writes or
low reads or low reads and high writes,

63
00:03:14.840 --> 00:03:18.260
it's really gonna depend on
what the application is and

64
00:03:18.260 --> 00:03:20.690
what type of server it's running on.

65
00:03:20.690 --> 00:03:22.000
Are you running Mongo on Python?

66
00:03:22.000 --> 00:03:23.310
Are you running it on Node?

67
00:03:23.310 --> 00:03:27.460
That really all depends, so it's really
hard to compare apples to apples.

68
00:03:27.460 --> 00:03:30.100
But from my experience,
Mongo has just been a pleasure.

69
00:03:30.100 --> 00:03:33.320
I haven't run into a problem where I was
like, I absolutely need SQL right now.

70
00:03:33.320 --> 00:03:35.140
It's the only solution
that's gonna help me.

71
00:03:35.140 --> 00:03:39.200
I've never run into that problem,
so yeah, yes?

72
00:03:39.200 --> 00:03:42.150
&gt;&gt; Speaker 3: Maybe you answered this,
but what is Mongo written in?

73
00:03:42.150 --> 00:03:43.187
Is it written in C?

74
00:03:43.187 --> 00:03:45.274
Is it written in C++?

75
00:03:45.274 --> 00:03:49.042
&gt;&gt; Scott Moss: Yeah,
&gt;&gt; Scott Moss: It's written in

76
00:03:49.042 --> 00:03:49.566
a lot of things.

77
00:03:49.566 --> 00:03:56.810
[LAUGH] You know what,
I'm not going to try to answer that.

78
00:03:56.810 --> 00:04:01.668
Let's go,
&gt;&gt; Scott Moss: See if we can find that

79
00:04:01.668 --> 00:04:02.758
out right now.

80
00:04:02.758 --> 00:04:04.310
I don't think it is on GitHub.

81
00:04:05.740 --> 00:04:08.229
&gt;&gt; Scott Moss: I wanna say
it's mostly written in C+.

82
00:04:08.229 --> 00:04:12.790
But I know it's written
in a lot of things.

83
00:04:12.790 --> 00:04:14.229
So here we go, yeah, C++.

84
00:04:14.229 --> 00:04:18.150
So it's mostly written in C++, but you can
see, like I said, it's a lot of things.

85
00:04:18.150 --> 00:04:24.280
We got JavaScript, Python, Go, Shell,
Java and then other, whatever that is.

86
00:04:24.280 --> 00:04:28.670
So yeah, it's mostly C++, but yeah,
it's written a lot of things.

87
00:04:28.670 --> 00:04:32.730
And that's why it's a pretty compatible
with JavaScript, because V8, C++.

88
00:04:32.730 --> 00:04:35.890
So yeah, it's a pretty good database.

89
00:04:37.360 --> 00:04:40.289
&gt;&gt; Speaker 4: What are the ideal
situations like, or

90
00:04:40.289 --> 00:04:44.295
applications to use Mongo and
versus relational DB?

91
00:04:44.295 --> 00:04:46.142
&gt;&gt; Scott Moss: Yes, almost every time.

92
00:04:46.142 --> 00:04:47.818
No, that's such a bad answer.

93
00:04:47.818 --> 00:04:51.531
[LAUGH] I feel like I'm
selling Mongo over here.

94
00:04:51.531 --> 00:04:53.430
Like I need a Mongo cape.

95
00:04:53.430 --> 00:04:58.900
I would say for simple apps,
definitely Mongo.

96
00:04:58.900 --> 00:04:59.730
It's just so easier.

97
00:04:59.730 --> 00:05:03.475
The time you save starting and
getting back to the app is just free.

98
00:05:03.475 --> 00:05:09.880
And then any app where the shape changes
constantly, like for instance, a CMS.

99
00:05:09.880 --> 00:05:11.220
If you're building a CMS and

100
00:05:11.220 --> 00:05:15.040
you allow people to create their own
custom shapes and their own custom types,

101
00:05:15.040 --> 00:05:18.280
their own custom schemas, you need
something that can change schemas.

102
00:05:18.280 --> 00:05:20.608
So Mongo's perfect for that,
because it's forgiving.

103
00:05:20.608 --> 00:05:22.730
It's just like, yeah,
you can do whatever you want.

104
00:05:22.730 --> 00:05:24.900
Whereas, if you use
something like Postgres,

105
00:05:24.900 --> 00:05:28.439
you'd have to run a migration every
single time somebody changed one thing.

106
00:05:28.439 --> 00:05:30.966
So it can get pretty annoying and
then developer cost for

107
00:05:30.966 --> 00:05:33.562
that can just be ridiculous,
like running migrations.

108
00:05:33.562 --> 00:05:36.379
If you have some globally
deployed architecture and

109
00:05:36.379 --> 00:05:40.669
you're running migrations on a primary,
now you gotta block everything, and

110
00:05:40.669 --> 00:05:43.820
then you gotta write it concern
to these other databases.

111
00:05:43.820 --> 00:05:45.170
It can just get pretty annoying there.

112
00:05:45.170 --> 00:05:48.365
So I think Mongo is just really good for
those types of applications.

113
00:05:48.365 --> 00:05:52.020
I also think it's really good for
real-time applications, for

114
00:05:52.020 --> 00:05:54.220
things like chats and stuff like that.

115
00:05:54.220 --> 00:05:59.150
It's just perfect because you can
just store the data the exact

116
00:05:59.150 --> 00:06:01.970
same way that you need it without
having any different types of formats.

117
00:06:01.970 --> 00:06:03.950
You can just store an array of things and

118
00:06:03.950 --> 00:06:06.860
it will scale up until it hits
the document collection limit.

119
00:06:06.860 --> 00:06:08.430
Or you can do relational if you want.

120
00:06:08.430 --> 00:06:12.260
So I think those type of
applications are the best.

121
00:06:12.260 --> 00:06:13.090
Yeah, in my opinion.

122
00:06:16.161 --> 00:06:19.424
&gt;&gt; Scott Moss: Yeah, but I wouldn't use
it for something like a social network,

123
00:06:19.424 --> 00:06:21.528
where it's like you need graphs, right?

124
00:06:21.528 --> 00:06:26.538
Yeah, you can do graphs look up in Mongo,
and that's really advanced,

125
00:06:26.538 --> 00:06:31.057
but I wouldn't default to a Mongo
database for a graph scenario or

126
00:06:31.057 --> 00:06:34.690
a time series database
where I'm doing analytics.

127
00:06:34.690 --> 00:06:35.593
I wouldn't use it in that scenario.

128
00:06:35.593 --> 00:06:40.170
I would use it pretty much in any scenario
where I'm just building a traditional

129
00:06:40.170 --> 00:06:44.542
application and not something that's
specific to something like graphs,

130
00:06:44.542 --> 00:06:47.250
time series, or something like that, yeah.

131
00:06:47.250 --> 00:06:50.068
&gt;&gt; Speaker 5: Would you recommend it for
e-commerce applications?

132
00:06:50.068 --> 00:06:51.760
&gt;&gt; Scott Moss: It's perfect for
e-commerce applications.

133
00:06:51.760 --> 00:06:53.090
It's basically a CMS, yeah.

134
00:06:53.090 --> 00:06:55.890
It's fantastic for
e-commerce applications, yeah,

135
00:06:55.890 --> 00:06:57.600
those types of apps is where it's good at.

136
00:06:57.600 --> 00:07:02.220
It's just a traditional, hardcore,
not gonna surprise you app.

137
00:07:02.220 --> 00:07:06.520
Nothing that's like you're doing machine
learning models with real-time web sockets

138
00:07:06.520 --> 00:07:08.530
that's spitting out an audit log.

139
00:07:08.530 --> 00:07:09.850
Like no, that's just crazy.

140
00:07:09.850 --> 00:07:13.950
You can do that in Mongo, but
it's gonna be pretty complicated.

141
00:07:13.950 --> 00:07:16.916
&gt;&gt; Speaker 5: Can we
store blob data types?

142
00:07:16.916 --> 00:07:21.273
Like from WSIWYG editors, you can get
a bunch of HTML and stuff combined and

143
00:07:21.273 --> 00:07:24.320
then you can store it in MySQL databases.

144
00:07:24.320 --> 00:07:26.930
&gt;&gt; Scott Moss: Yep, you can store
it in whatever fort type you want.

145
00:07:26.930 --> 00:07:29.190
In fact,
I do that on my application that we built.

146
00:07:29.190 --> 00:07:31.792
We have tons of editors and
we just store it as that.

147
00:07:31.792 --> 00:07:35.757
At the end of the day, you can store
however you want, anyway that you want and

148
00:07:35.757 --> 00:07:37.650
you can run validations on it, too.

149
00:07:39.762 --> 00:07:41.402
&gt;&gt; Speaker 6: So that was sort
of like replications database,

150
00:07:41.402 --> 00:07:42.084
you can [INAUDIBLE]?

151
00:07:42.084 --> 00:07:44.580
&gt;&gt; Scott Moss: Actually,
it uses that for replication, yeah.

152
00:07:44.580 --> 00:07:47.712
So you don't have to do replication
yourself if you use something like

153
00:07:47.712 --> 00:07:48.465
MongoDB Atlas.

154
00:07:48.465 --> 00:07:51.054
There's [INAUDIBLE].

155
00:07:51.054 --> 00:07:51.793
So they do replication for you.

156
00:07:51.793 --> 00:07:55.513
But they use that technique to do
replication, where they have primary,

157
00:07:55.513 --> 00:07:57.260
secondary, secondary.

158
00:07:57.260 --> 00:07:58.020
So yeah, they'll do that for you.

159
00:07:58.020 --> 00:08:01.710
But you can also subscribe to it
yourself and do all types of things.

160
00:08:01.710 --> 00:08:05.034
We use it to actually create
an auto-log on the front end for

161
00:08:05.034 --> 00:08:07.039
activity on a company's profile.

162
00:08:07.039 --> 00:08:10.573
Like, here's everything that users have
been doing in the last 20 days, and

163
00:08:10.573 --> 00:08:12.790
it will just format it and show you.

164
00:08:12.790 --> 00:08:14.461
So we do stuff like that.

165
00:08:14.461 --> 00:08:18.137
So yeah, [LAUGH] if I had to create
a database with something that's two years

166
00:08:18.137 --> 00:08:21.872
old, then, yeah, I would just make sure
I don't have to create a database in

167
00:08:21.872 --> 00:08:25.120
something two years old and
just send it somewhere else.

168
00:08:25.120 --> 00:08:27.270
That should be like an S3
file somewhere I would say.

169
00:08:27.270 --> 00:08:28.926
That way you can just go S3,

170
00:08:28.926 --> 00:08:33.493
give me all the logs from the database for
the last two years for this customer.

171
00:08:33.493 --> 00:08:40.076
And that should be backed up in S3 or
Glacier on AWS, somewhere like that.

172
00:08:40.076 --> 00:08:40.940
&gt;&gt; Speaker 1: Or Redis?

173
00:08:40.940 --> 00:08:43.189
&gt;&gt; Scott Moss: Probably not Redis,
because that's long-term storage.

174
00:08:43.189 --> 00:08:46.490
Redis is just short-term,
in memory, and it's volitile.

175
00:08:46.490 --> 00:08:48.920
It'll be erased once
you restart everything.

176
00:08:48.920 --> 00:08:52.885
You definitely wanna put that in some
cheap storage that's never, almost,

177
00:08:52.885 --> 00:08:53.861
gonna be touched.

178
00:08:53.861 --> 00:08:57.760
So, literally,
Glacier is what AWS uses for that.

