WEBVTT

1
00:00:00.200 --> 00:00:01.390
&gt;&gt; Scott Moss: So
once we connect to Mongo,

2
00:00:02.450 --> 00:00:07.530
we should start actually creating
some data, doing some CRUD stuff.

3
00:00:07.530 --> 00:00:12.640
So the first thing you have to do is you
have to create some type of shapes that

4
00:00:12.640 --> 00:00:14.140
we actually want to add data for.

5
00:00:14.140 --> 00:00:16.190
And those shapes are gonna
be like collections, right?

6
00:00:16.190 --> 00:00:19.190
So we talked about collections,
we created one in the shell.

7
00:00:19.190 --> 00:00:21.880
Now we're gonna create
one here using Mongoose.

8
00:00:21.880 --> 00:00:23.260
And again, it's pretty straightforward,

9
00:00:23.260 --> 00:00:25.370
because we are already using
something like Mongoose.

10
00:00:25.370 --> 00:00:28.810
So the way you create a collection
is gonna be something like this.

11
00:00:28.810 --> 00:00:31.150
So if I wanted to create
a collection called student.

12
00:00:35.971 --> 00:00:41.849
&gt;&gt; Scott Moss: All I would have to
use is the new mongoose.schema,

13
00:00:41.849 --> 00:00:46.250
and that's gonna take an object.

14
00:00:46.250 --> 00:00:48.930
So if I say new mongoose.schema,
this is telling mongoose that, hey,

15
00:00:48.930 --> 00:00:52.370
I'm making a new schema, and
by itself a schema doesn't do anything.

16
00:00:52.370 --> 00:00:56.621
It's just like instructions on field
names and types and validation.

17
00:00:56.621 --> 00:00:58.450
It doesn't actually do
anything in the database.

18
00:00:58.450 --> 00:01:00.200
It doesn't create a collection.

19
00:01:00.200 --> 00:01:02.870
It's just instructions for
a collection that we have to create later.

20
00:01:02.870 --> 00:01:04.820
So we're gonna create that schema first.

21
00:01:04.820 --> 00:01:08.740
It's very much the same way if you
created a schema for a table or

22
00:01:08.740 --> 00:01:11.120
a model in Postgres or
SQL, very much the same.

23
00:01:12.200 --> 00:01:13.880
So I'm just gonna keep it very minimum and

24
00:01:13.880 --> 00:01:17.470
say I'm gonna have a student who has
a firstName, and its type is string.

25
00:01:18.790 --> 00:01:22.500
And what's pretty sweet here is
that we can use the built in

26
00:01:22.500 --> 00:01:25.000
JavaScript perimeters as the typings.

27
00:01:25.000 --> 00:01:28.570
So, string is a global in JavaScript
because that's a primitive in JavaScript.

28
00:01:28.570 --> 00:01:30.550
It's a global class.

29
00:01:30.550 --> 00:01:33.460
So, we can choose a primitive to figure
out because Mongoose is based off

30
00:01:33.460 --> 00:01:35.010
JavaScript and that's pretty cool.

31
00:01:35.010 --> 00:01:39.760
We're gonna use any libraries or
use a actual string of value like string.

32
00:01:39.760 --> 00:01:43.770
You can just say string and

33
00:01:43.770 --> 00:01:46.670
it knows that you wanna use a string, so
that's pretty legit, I kinda like that.

34
00:01:46.670 --> 00:01:48.280
That's very easy to get started.

35
00:01:50.480 --> 00:01:53.910
So once we have our schema,
the next thing that we need to do

36
00:01:53.910 --> 00:01:58.920
is convert the schema over to what we
call a Mongoose model, or a Mongol model.

37
00:01:58.920 --> 00:02:01.930
And then that model is gonna
create a collection for us.

38
00:02:01.930 --> 00:02:05.130
So the way you do that is also
pretty simple with Mongoose.

39
00:02:05.130 --> 00:02:07.540
All you have to do is use mongoose.model.

40
00:02:09.880 --> 00:02:13.270
You pass in the name of your
collection as the first argument.

41
00:02:13.270 --> 00:02:18.260
And what's important here is
the pattern that the community uses for

42
00:02:18.260 --> 00:02:22.110
this is that you use a lower case name for
the collection.

43
00:02:22.110 --> 00:02:26.480
And don't pluralized it because Mongoose
or Mongo is gonna pluralized it for you.

44
00:02:26.480 --> 00:02:28.160
So, whatever I type in here
is gonna be pluralized.

45
00:02:28.160 --> 00:02:32.830
So, if I type in student, the actual name
of the collection is gonna be students,

46
00:02:32.830 --> 00:02:33.960
lower case.

47
00:02:33.960 --> 00:02:38.560
So, that's why it's just keep it singular,
keep it lowercase and then don't be

48
00:02:38.560 --> 00:02:42.180
surprised when you go look in the database
is like, it's gonna be pluralized.

49
00:02:42.180 --> 00:02:44.410
It's gonna be students and
it's gonna be lowercase.

50
00:02:44.410 --> 00:02:47.650
The reason I say, keep it like this, is
because once we start doing relations and

51
00:02:47.650 --> 00:02:51.880
referring to things, it's gonna be a lot
easier to deal with if it's constant.

52
00:02:51.880 --> 00:02:53.520
So just say student and

53
00:02:53.520 --> 00:02:58.550
then the next thing you wanna do is just
pass the schema as the second argument.

54
00:02:58.550 --> 00:02:59.260
And now you have a model.

55
00:03:01.420 --> 00:03:04.060
That's gonna return a model, so you want
to go ahead and say that in a variable,

56
00:03:04.060 --> 00:03:06.990
and we can just call that Student,
with a capital S.

57
00:03:06.990 --> 00:03:09.840
The convention in the community is
to use capital letters for models.

58
00:03:09.840 --> 00:03:12.670
So Student with a capital S,
that's gonna be the model.

59
00:03:12.670 --> 00:03:16.720
Now I'll have a reference
to a model called Student,

60
00:03:16.720 --> 00:03:18.460
which is gonna represent a collection.

61
00:03:18.460 --> 00:03:21.940
So now I can save students
using this student model

62
00:03:21.940 --> 00:03:25.290
against the student collection
with just these few lines of code.

63
00:03:27.837 --> 00:03:30.846
&gt;&gt; Scott Moss: So again in just these few
lines of code we were able to connect

64
00:03:30.846 --> 00:03:31.970
to a database.

65
00:03:31.970 --> 00:03:32.930
We have the logic for it.

66
00:03:32.930 --> 00:03:35.570
We didn't actually connect yet
cuz we've got to run this function.

67
00:03:35.570 --> 00:03:37.500
We created a schema for a student and

68
00:03:37.500 --> 00:03:41.166
then we registered that schema as
a collection called student, and

69
00:03:41.166 --> 00:03:45.239
it returned as a model that we can
interact with inside of our application.

