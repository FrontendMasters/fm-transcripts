WEBVTT

1
00:00:00.160 --> 00:00:02.896
&gt;&gt; Scott Moss: The first
thing is you see this _id.

2
00:00:02.896 --> 00:00:05.790
By default Mongo is gonna create _id for

3
00:00:05.790 --> 00:00:10.970
every single document that you
save in the database by default.

4
00:00:10.970 --> 00:00:13.200
You can turn that off and
you can make it do whatever you want.

5
00:00:13.200 --> 00:00:14.826
But my default it's gonna be _id, and

6
00:00:14.826 --> 00:00:17.350
its value is gonna be something
that's called an object id.

7
00:00:18.460 --> 00:00:19.950
Who here has heard about object id before?

8
00:00:21.850 --> 00:00:23.060
Yeah, me neither when I first used Mongo.

9
00:00:23.060 --> 00:00:23.760
I was like, what is that?

10
00:00:23.760 --> 00:00:27.030
It looks like a string or it looks like
a number or a string to me, what is that?

11
00:00:27.030 --> 00:00:32.195
Well object id is something
from this package called BSON,

12
00:00:32.195 --> 00:00:35.510
B-S-O-N, if you've never heard of that,
that's something Mongo uses and

13
00:00:35.510 --> 00:00:36.920
we can talk about that later.

14
00:00:36.920 --> 00:00:41.420
But it's basically an object
representation of a unique id, and

15
00:00:41.420 --> 00:00:43.590
that's what Mongo uses for its ids.

16
00:00:43.590 --> 00:00:44.800
And they're very recognizable.

17
00:00:44.800 --> 00:00:46.186
I can look at a Mongo id and

18
00:00:46.186 --> 00:00:49.300
I can tell you that this
person uses a Mongo database.

19
00:00:49.300 --> 00:00:51.336
I see this in the real world I'm like,
they use Mongo,

20
00:00:51.336 --> 00:00:53.050
cuz they're very recognizable.

21
00:00:53.050 --> 00:00:56.590
It's not like most databases where
there's a counter and it goes up,

22
00:00:56.590 --> 00:00:57.760
right, it's not like that.

23
00:00:57.760 --> 00:01:01.398
It's a unique, guaranteed unique
id that's object based, and

24
00:01:01.398 --> 00:01:03.524
that's what's called an object id.

25
00:01:03.524 --> 00:01:05.913
And that's gonna be generated for
every single document that you create.

26
00:01:05.913 --> 00:01:10.161
So you don't have to worry about
figuring out the primary key or

27
00:01:10.161 --> 00:01:13.390
the ID of a document, it does it for you.

28
00:01:13.390 --> 00:01:15.910
You just create the document and
then you get an id, you're good to go.

29
00:01:17.360 --> 00:01:21.412
The next thing to note is obviously the
first name cuz that's what our student had

30
00:01:21.412 --> 00:01:23.360
was a first name, so we got that.

31
00:01:24.500 --> 00:01:30.980
Then you get this _ _v0, this you
will probably almost will never use.

32
00:01:30.980 --> 00:01:33.700
This has to do with
the version of the schema.

33
00:01:33.700 --> 00:01:36.550
If you're versioning schemas,
you might be asking yourself,

34
00:01:36.550 --> 00:01:39.570
of course I'm going to version my
schemas and I'm gonna have this.

35
00:01:39.570 --> 00:01:41.560
Most likely you won't use this.

36
00:01:41.560 --> 00:01:43.280
I've never had to use this in production.

37
00:01:43.280 --> 00:01:47.068
In fact I always strip this version thing
out because the way you wouldversion

38
00:01:47.068 --> 00:01:50.913
you schemas is if you do that you would
probably handle the versioning yourself

39
00:01:50.913 --> 00:01:52.440
and not allow Mongo handle it.

40
00:01:52.440 --> 00:01:54.930
You would just handle the version
yourself with migrations or

41
00:01:54.930 --> 00:01:56.490
what ever approach you wanna do.

42
00:01:56.490 --> 00:01:58.620
So you wouldn't have this
thing internally do it, and

43
00:01:58.620 --> 00:02:00.580
you wouldn't check versions on here.

44
00:02:00.580 --> 00:02:04.870
So most likely you would never use this
but it's here, that's why you see that.

45
00:02:04.870 --> 00:02:07.770
And by default, that's everything you're
gonna get for creating a document.

46
00:02:07.770 --> 00:02:10.430
If we had more fields, obviously,
we would see more fields here.

47
00:02:10.430 --> 00:02:14.540
But all we have is a first name and its
value is Tim, and that's in the database.

48
00:02:14.540 --> 00:02:15.714
Yes?
&gt;&gt; Speaker 2: So does Mongo have some

49
00:02:15.714 --> 00:02:19.075
validation kind of, that's why it has it,
it has some validation that it has to

50
00:02:19.075 --> 00:02:21.750
validate instead of this version
I'm giving you this data?

51
00:02:21.750 --> 00:02:24.770
If you had different versions you would
probably give different set of data for

52
00:02:24.770 --> 00:02:27.230
different fields, whatever, right?

53
00:02:27.230 --> 00:02:28.610
&gt;&gt; Scott Moss: Well-
&gt;&gt; Speaker 2: I don't know

54
00:02:28.610 --> 00:02:29.790
&gt;&gt; Scott Moss: Yes and no.

55
00:02:29.790 --> 00:02:33.690
So Mongo itself doesn't have validations,
but you can use validations and we will.

56
00:02:33.690 --> 00:02:36.790
But where that happens,
it's not on a database level.

57
00:02:36.790 --> 00:02:38.730
It happens outside of the database.

58
00:02:38.730 --> 00:02:42.360
And then this versioning right here,
it's misconceiving.

59
00:02:42.360 --> 00:02:46.428
It's not gonna allow you to say, save this
student with this schema version and save

60
00:02:46.428 --> 00:02:50.490
this student with this schema version,
it's just not gonna work that way.

61
00:02:50.490 --> 00:02:52.000
That's why I was like
it's kinda pointless.

62
00:02:52.000 --> 00:02:53.550
Cuz it's like, what is the point of this?

63
00:02:53.550 --> 00:02:55.650
It doesn't really make any sense,
cuz you can't do that.

64
00:02:55.650 --> 00:02:58.200
That's just a whole other
schema that you would make.

65
00:02:58.200 --> 00:03:00.310
So yeah, this right here,

66
00:03:00.310 --> 00:03:04.170
I think this was part of Mongo
a long time ago, when it made sense.

67
00:03:04.170 --> 00:03:06.740
But now, it just doesn't really make
sense, they just never got rid of it.

68
00:03:11.122 --> 00:03:14.525
&gt;&gt; Scott Moss: Cool, the other thing to
take note of is that, you can't tell by

69
00:03:14.525 --> 00:03:18.260
the log, but this student object is
not a regular JavaScript object.

70
00:03:19.480 --> 00:03:21.635
It's what we call a Mongo document.

71
00:03:21.635 --> 00:03:25.670
There's a whole bunch of stuff
on here that's not logging out.

72
00:03:25.670 --> 00:03:27.740
You can't see it because
it's not innumerable.

73
00:03:27.740 --> 00:03:29.040
When you do a log in JavaScript,

74
00:03:29.040 --> 00:03:31.870
the only thing that logs are properties
that are innumerable, and

75
00:03:31.870 --> 00:03:35.870
the properties that I want to talk
to you about are not innumerable.

76
00:03:35.870 --> 00:03:38.240
So when I log them, you won't see them.

77
00:03:38.240 --> 00:03:42.460
But there's other properties on this
because it itself is not a JavaScript

78
00:03:42.460 --> 00:03:46.890
object, it's an object from
the database that has methods and

79
00:03:46.890 --> 00:03:50.610
all different types of things on it
that we can use to operate on it.

80
00:03:50.610 --> 00:03:53.793
But you won't be able to see it because,
like I said, it's not innumerable.

81
00:03:53.793 --> 00:03:58.170
Sometimes that's not desirable and
you wanna convert that object to JSON.

82
00:03:58.170 --> 00:04:02.030
So in later exercises we'll do that,
because if you start doing matching,

83
00:04:02.030 --> 00:04:06.350
fills, and id's, those properties can get
in the way and kind of mess things up.

84
00:04:06.350 --> 00:04:10.080
It also slows down the database if you're
passing around these objects in memory and

85
00:04:10.080 --> 00:04:12.520
you really just wanna pass around
regular JavaScript objects and

86
00:04:12.520 --> 00:04:13.870
not document objects.

87
00:04:15.140 --> 00:04:16.038
So that's just a quick note.

88
00:04:16.038 --> 00:04:18.565
We'll run into this later, just wanted
talk about it for a little bit.

89
00:04:18.565 --> 00:04:19.510
Yes?

90
00:04:19.510 --> 00:04:23.810
&gt;&gt; Speaker 3: So
this is a Mongoose document?

91
00:04:23.810 --> 00:04:24.600
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Speaker 3: Not a Mongo document?

92
00:04:24.600 --> 00:04:25.240
&gt;&gt; Scott Moss: Did I say Mongo?

93
00:04:25.240 --> 00:04:26.490
Yeah, Mongoose document.

94
00:04:26.490 --> 00:04:28.900
Sorry, yeah, it's a Mongoose document.

95
00:04:28.900 --> 00:04:30.663
&gt;&gt; Speaker 4: How are they different?

96
00:04:30.663 --> 00:04:31.709
&gt;&gt; Scott Moss: How are they different?

97
00:04:31.709 --> 00:04:35.294
Yeah, they're different because, so if you
can imagine, you have Mongo right here,

98
00:04:35.294 --> 00:04:37.580
right, and then you have
Mongoose sitting on top of it.

99
00:04:37.580 --> 00:04:41.700
Mongo by itself just spits JSON,
that's all it does.

100
00:04:41.700 --> 00:04:42.830
It doesn't do anything else.

101
00:04:42.830 --> 00:04:44.980
It saves JSON, it spits out JSON.

102
00:04:44.980 --> 00:04:49.735
Mongoose sits on top of that and
provides all different types of tools and

103
00:04:49.735 --> 00:04:53.630
methods and helpers that virtualizes
that to make it easy for you.

104
00:04:53.630 --> 00:04:57.894
So the distinction is we call it
a Mongoose document because it is in fact

105
00:04:57.894 --> 00:05:01.234
Mongoose that's taking that
JSON from the database and

106
00:05:01.234 --> 00:05:04.801
adding all these methods and
helpers and properties on it.

107
00:05:04.801 --> 00:05:06.312
And then providing it to you so

108
00:05:06.312 --> 00:05:09.570
you can operate on it within
the confines of Mongoose.

109
00:05:09.570 --> 00:05:12.642
Mongo doesn't do that,
it's just like here's JSON.

110
00:05:12.642 --> 00:05:15.851
So yeah, it is a Mongoose document,
because if you didn't use Mongoose you

111
00:05:15.851 --> 00:05:17.820
wouldn't get this,
you would just get JSON.

