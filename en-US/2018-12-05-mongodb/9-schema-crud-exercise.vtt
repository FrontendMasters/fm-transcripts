WEBVTT

1
00:00:00.180 --> 00:00:01.120
&gt;&gt; Scott Moss: I've been talking too much.

2
00:00:01.120 --> 00:00:03.390
I want to get you all into the exercise.

3
00:00:03.390 --> 00:00:05.658
So, if you look at the read me,
here's what you're gonna be doing.

4
00:00:10.804 --> 00:00:15.043
&gt;&gt; Scott Moss: If you go down to the
section that's called models underneath

5
00:00:15.043 --> 00:00:20.847
the exercises, the location for that is
gonna be in the exercises/models folder.

6
00:00:22.160 --> 00:00:24.950
And here's some important commands that
you'll have to use to actually work

7
00:00:24.950 --> 00:00:25.610
with this exercise.

8
00:00:25.610 --> 00:00:28.150
There's really only one and
it's a test command.

9
00:00:28.150 --> 00:00:30.170
And if you have Yarn,
you could run this command.

10
00:00:30.170 --> 00:00:31.910
If you have npm, you can run this command.

11
00:00:31.910 --> 00:00:36.235
Either one's gonna run test for this
exercise, and it's only gonna run test for

12
00:00:36.235 --> 00:00:40.123
this exercise and not test in other
exercises, which was a big problem.

13
00:00:40.123 --> 00:00:41.593
So it's only gonna run tests for
this one and

14
00:00:41.593 --> 00:00:43.465
you don't have to worry about
any of your other ones.

15
00:00:43.465 --> 00:00:47.140
So once you have that, and
you understand what's going on here,

16
00:00:47.140 --> 00:00:50.640
basically this exercise is going to
have you create connection logic.

17
00:00:50.640 --> 00:00:53.168
Which is what we talked about
how to connect to MongoDB.

18
00:00:53.168 --> 00:00:55.553
And then you're going
to create some schemas.

19
00:00:55.553 --> 00:00:56.943
And then you're going
to use those schemas,

20
00:00:56.943 --> 00:00:58.633
you're going to create some functionality.

21
00:00:58.633 --> 00:00:59.560
That's it.

22
00:00:59.560 --> 00:01:03.660
So on this check list, first you need
to do is check out to the start branch.

23
00:01:03.660 --> 00:01:06.276
If you haven't already,
check out to that branch,

24
00:01:06.276 --> 00:01:08.365
install the node models with npm or yarn.

25
00:01:08.365 --> 00:01:10.780
If you haven't already, install those.

26
00:01:10.780 --> 00:01:12.450
Check the readme,
which we're looking at right now.

27
00:01:12.450 --> 00:01:17.640
But refer to this readme if you need to
figure out what the test command was,

28
00:01:17.640 --> 00:01:20.190
if you have a problem with installation,
any links or

29
00:01:20.190 --> 00:01:22.930
resources I talked about
is gonna be in this readme.

30
00:01:22.930 --> 00:01:25.790
And then, getting to the code,
the first thing you're actually gonna

31
00:01:25.790 --> 00:01:28.420
do is create connection
logic inside connect.js.

32
00:01:28.420 --> 00:01:32.770
So if you go to connect.js, right now,
it's just returning promise.reject.

33
00:01:32.770 --> 00:01:35.970
It's doing that on purpose because
I need it to fail on a test.

34
00:01:35.970 --> 00:01:38.280
If I didn't put anything here,
the test would just hang, and

35
00:01:38.280 --> 00:01:39.600
you wouldn't know what to do.

36
00:01:39.600 --> 00:01:42.071
So right now, it's literally just
throwing out a promise.reject and

37
00:01:42.071 --> 00:01:43.410
hope that it just breaks.

38
00:01:43.410 --> 00:01:47.260
So you need to fix that to where,
given that URL that it's seeing,

39
00:01:47.260 --> 00:01:49.000
it connects to a Mongo database.

40
00:01:49.000 --> 00:01:51.840
So you should just take a URL and
connect to a database.

41
00:01:51.840 --> 00:01:52.910
That's what you should do.

42
00:01:52.910 --> 00:01:55.010
So that's the first thing you need to do.

43
00:01:55.010 --> 00:02:00.000
The second thing you need to do
is finish the user schema so

44
00:02:00.000 --> 00:02:01.920
that the user model test passes.

45
00:02:01.920 --> 00:02:06.990
So if you go inside of Models,
User, there's a schema in here and

46
00:02:06.990 --> 00:02:08.250
it's got some fields on it.

47
00:02:08.250 --> 00:02:09.090
It looks pretty complete.

48
00:02:09.090 --> 00:02:12.010
There's some stuff in here, but
if you run a for it, it's gonna fail.

49
00:02:12.010 --> 00:02:13.100
So you gotta read the test,

50
00:02:13.100 --> 00:02:15.330
the test is very descriptive
about what it's asking for.

51
00:02:15.330 --> 00:02:17.870
You need to fulfil those needs for
the test.

52
00:02:17.870 --> 00:02:20.940
It's gonna say, we expected this,
this should have been this.

53
00:02:20.940 --> 00:02:23.400
Just make the test pass for the schema.

54
00:02:23.400 --> 00:02:24.923
And the test, like I said, are pretty.

55
00:02:24.923 --> 00:02:30.748
But you can even go look at the test in
the __test__ folder inside of user spec.

56
00:02:30.748 --> 00:02:32.390
All the tests you will see inside of here.

57
00:02:32.390 --> 00:02:36.380
So if you still can't figure it out, read
the text, and if not I'll help you out.

58
00:02:36.380 --> 00:02:37.350
But they're pretty descriptive.

59
00:02:39.380 --> 00:02:42.069
So once you got that,
the last thing you need to do is

60
00:02:44.100 --> 00:02:48.580
complete the crud functions with the user
model, and get all the crud tests to pass.

61
00:02:48.580 --> 00:02:51.740
So inside that same folder
there is a crud.js, and

62
00:02:51.740 --> 00:02:53.770
there's just a whole
bunch of empty functions.

63
00:02:53.770 --> 00:02:56.716
There's a getUserById, getAllUsers,

64
00:02:56.716 --> 00:03:00.740
createUser, removeUserById,
and updateUserById.

65
00:03:00.740 --> 00:03:04.060
And these paths and these arguments,
there's test for all of these so

66
00:03:04.060 --> 00:03:05.430
all those test have to pass as well.

67
00:03:05.430 --> 00:03:08.600
And you're just going to be using
the user model based on the schema

68
00:03:08.600 --> 00:03:12.490
that you already fixed to fufill these,
and they're mostly just generic crud.

69
00:03:14.090 --> 00:03:16.930
And again, you'd know if you passed
if all the test pass and, again,

70
00:03:16.930 --> 00:03:18.380
the test are very specific.

71
00:03:18.380 --> 00:03:19.580
You can look at the test.

72
00:03:19.580 --> 00:03:22.050
You can even look at a test to help
you out with some of the answers for

73
00:03:22.050 --> 00:03:23.000
some of the other ones.

74
00:03:23.000 --> 00:03:25.860
Because I have to mock a lot of these
out in the test so you can look at how

75
00:03:25.860 --> 00:03:28.970
I'm creating stuff to kind of get you
tips on what you should be doing.

76
00:03:28.970 --> 00:03:33.730
So if you run the test, so
if you go to the package.json,

77
00:03:33.730 --> 00:03:36.240
I'm sorry, the readme, so many files.

78
00:03:38.300 --> 00:03:39.879
I use yarn, so
I'm going to use the yarn command.

79
00:03:40.990 --> 00:03:45.180
And then I'm just going to say this.

80
00:03:45.180 --> 00:03:46.670
So what you're going to do is, one,

81
00:03:46.670 --> 00:03:51.310
it's only going to run the two
tests inside of models.

82
00:03:51.310 --> 00:03:54.470
So we've got a crowd spec and
then we have a user spec.

83
00:03:54.470 --> 00:03:57.640
And you're using Jes, so
Jes runs the test in parallel.

84
00:03:57.640 --> 00:04:00.904
And later on, I'm gonna talk about how I
set all this up cuz this is actually very

85
00:04:00.904 --> 00:04:04.191
advanced how to set up Mongo with jess and
to get everything to work in parallel.

86
00:04:04.191 --> 00:04:05.994
But I don't want you to
get distracted by that,

87
00:04:05.994 --> 00:04:07.717
but yes,
the tests are running in parallel.

88
00:04:07.717 --> 00:04:10.372
If you try to do a console.log
in a test and you don't see it,

89
00:04:10.372 --> 00:04:13.501
it's because it's running in parallel
in different environments and

90
00:04:13.501 --> 00:04:15.030
it's not gonna spit out the logs.

91
00:04:15.030 --> 00:04:17.070
So I just want you to
all be aware of that.

92
00:04:17.070 --> 00:04:20.270
So yeah, once you run the test,
everything is just going to fail.

93
00:04:20.270 --> 00:04:21.840
You're going to see user crud.

94
00:04:21.840 --> 00:04:24.710
This expected something it failed,
failed, failed.

95
00:04:24.710 --> 00:04:28.720
And you can see that it's literally
pointing to where it's failing.

96
00:04:28.720 --> 00:04:32.090
And this is going to be for
the user crud, which is the crud file.

97
00:04:32.090 --> 00:04:35.070
And then if you scroll down, depending
on what order your test executed in,

98
00:04:35.070 --> 00:04:37.090
you're gonna see one for the user model.

99
00:04:37.090 --> 00:04:39.450
And again, there's a few tests
here that have to pass and

100
00:04:39.450 --> 00:04:40.920
they're very descriptive as well.

101
00:04:40.920 --> 00:04:44.040
First name must be required,
last name must be required.

102
00:04:44.040 --> 00:04:46.320
Email must be required,
email must be unique.

103
00:04:46.320 --> 00:04:48.880
They're very descriptive
on what they're asking, and

104
00:04:48.880 --> 00:04:50.530
it's gonna run all the tests for that.

105
00:04:50.530 --> 00:04:51.950
All you have to do is
just fill out the code,

106
00:04:51.950 --> 00:04:53.660
you don't have to connect
it back to the test.

107
00:04:53.660 --> 00:04:56.240
The test is already connected,
it's gonna run everything.

108
00:04:56.240 --> 00:04:57.700
You just got to listen
to what it is saying.

109
00:04:58.700 --> 00:05:01.340
And once this is all good,
you are going to get all green here.

110
00:05:01.340 --> 00:05:06.910
And you should have 11 passed
tests with 2 passed sweets.

