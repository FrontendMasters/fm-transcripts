WEBVTT

1
00:00:00.280 --> 00:00:00.981
&gt;&gt; Scott Moss: Welcome back.

2
00:00:00.981 --> 00:00:05.729
I hope everyone had enough time to
complete those exercises on the indexes,

3
00:00:05.729 --> 00:00:08.290
the middleware, and the virtuals.

4
00:00:08.290 --> 00:00:17.906
So, like always, I'm just going to go
ahead and walk through the solutions,

5
00:00:17.906 --> 00:00:20.350
so let's start with a project.

6
00:00:22.120 --> 00:00:25.780
So for the project we had a couple
of things, let's see here.

7
00:00:27.860 --> 00:00:33.360
We needed to add a compound
index of the project schema,

8
00:00:33.360 --> 00:00:35.300
so that the project names are unique for
all.

9
00:00:35.300 --> 00:00:38.030
So I'll pull up the test and
then will do that.

10
00:00:38.030 --> 00:00:39.211
So, project here.

11
00:00:41.283 --> 00:00:47.563
&gt;&gt; Scott Moss: And
then project.spec, cool.

12
00:00:47.563 --> 00:00:51.090
All right, so it says right here
project names are unique per org.

13
00:00:51.090 --> 00:00:54.560
So it's expecting an error
to happen if I insert

14
00:00:54.560 --> 00:00:57.300
a project with the same
name that has the same org.

15
00:00:57.300 --> 00:00:59.990
So we'll just go ahead and
write a index for that.

16
00:00:59.990 --> 00:01:06.170
So what we'll do is we'll
say projectschema.index.

17
00:01:06.170 --> 00:01:08.910
And then first one we
will index on is the org.

18
00:01:08.910 --> 00:01:13.790
And then underneath that,
we want it to shadow the name.

19
00:01:13.790 --> 00:01:17.290
So that means we're gonna make
a compound index with the org and

20
00:01:17.290 --> 00:01:20.807
then a combination of name and
we want that to be a unique index.

21
00:01:23.122 --> 00:01:27.238
&gt;&gt; Scott Moss: So think about there's
different types of indexes, right?

22
00:01:27.238 --> 00:01:31.213
I didn't talk about the different
types but you said compound indexes,

23
00:01:31.213 --> 00:01:33.570
but this compound index is a unique index.

24
00:01:33.570 --> 00:01:39.985
There's also text indexes and,
&gt;&gt; Scott Moss: Sparse indexes and

25
00:01:39.985 --> 00:01:43.821
different types of indexes, but
we've just been talking about unique.

26
00:01:43.821 --> 00:01:46.936
For the most of time is gonna be regular
indexes it looks like maybe unique or

27
00:01:46.936 --> 00:01:48.810
something like that.

28
00:01:48.810 --> 00:01:51.600
Text may be but
is probably something else.

29
00:01:51.600 --> 00:01:54.010
So we've got that and
now is gonna run test.

30
00:01:55.450 --> 00:02:01.054
And I'll do watch, I think watch
break here with indexes we'll see.

31
00:02:01.054 --> 00:02:03.410
Okay, so we've got one passing.

32
00:02:03.410 --> 00:02:06.500
And yup, project names are unique per org.

33
00:02:06.500 --> 00:02:07.190
So that one's good.

34
00:02:08.970 --> 00:02:11.460
The next one we have
to do was budget left.

35
00:02:11.460 --> 00:02:16.660
So a virtual should
calculate the budget left,

36
00:02:16.660 --> 00:02:21.210
so to do that, what we'll do is we'll say

37
00:02:21.210 --> 00:02:26.801
projectSchema.virtual('budgetsLeft').

38
00:02:26.801 --> 00:02:32.429
And I'm gonna define a getter, and

39
00:02:32.429 --> 00:02:37.869
for that I'm just gonna say return

40
00:02:37.869 --> 00:02:42.947
this.budget- this.spent.

41
00:02:42.947 --> 00:02:47.385
So it'll tell me how much is left from
the budget and how much we spent so far.

42
00:02:47.385 --> 00:02:52.150
So I'm gonna add that virtual, and it
looks like 2 passed, so we'll verify that.

43
00:02:52.150 --> 00:02:54.970
And budgetleft virtual should
calculate budget left.

44
00:02:54.970 --> 00:02:56.289
That passed, all that's good.

45
00:02:57.450 --> 00:03:00.670
So the last test that we
have here is Org model,

46
00:03:00.670 --> 00:03:03.700
removes projects when org is remove.

47
00:03:03.700 --> 00:03:07.245
So I saw a couple issues with this and
I haven't quite figured out

48
00:03:07.245 --> 00:03:10.740
what exactly the issue was,
it seems like some silent issues.

49
00:03:10.740 --> 00:03:15.445
But I think it's an issue where if you
have an older version of Mongo as in

50
00:03:15.445 --> 00:03:19.839
less than 4.0, but using the latest
version of Mongoose as in,

51
00:03:19.839 --> 00:03:24.310
anything above 5.0,
these middleware might not work for you.

52
00:03:24.310 --> 00:03:26.570
They don't actually fail,
they just don't work.

53
00:03:26.570 --> 00:03:27.790
So I think it's a combination of that.

54
00:03:27.790 --> 00:03:28.754
I haven't verified it.

55
00:03:28.754 --> 00:03:32.058
But if you're in that boat, whereas you
had Mongo before coming in today, and

56
00:03:32.058 --> 00:03:34.661
it's an older version, but
you installed the NPM packages,

57
00:03:34.661 --> 00:03:36.029
which are the latest Mongoose.

58
00:03:36.029 --> 00:03:39.852
There might be some inconsistencies
there and they might not be working,

59
00:03:39.852 --> 00:03:41.640
I think that's the issue.

60
00:03:41.640 --> 00:03:43.667
So, if you're just like,
my hooks aren't even running.

61
00:03:43.667 --> 00:03:46.070
I really don't know why they
aren't running, that might be you.

62
00:03:47.700 --> 00:03:55.440
But to get going with this exercise
I'm gonna look into the orgspec.

63
00:03:55.440 --> 00:03:56.291
There we go.

64
00:03:56.291 --> 00:04:01.470
And so the mongoose project
org should be removed.

65
00:04:02.810 --> 00:04:10.390
So I'm gonna head over to org.js and I'm
gonna go ahead and add a hook for that.

66
00:04:10.390 --> 00:04:12.390
So I'll

67
00:04:12.390 --> 00:04:21.534
say orgSchema.post('remove',

68
00:04:21.534 --> 00:04:28.110
function(doc, next).

69
00:04:28.110 --> 00:04:32.982
What I want to do here is I'm going
to use the project model to remove

70
00:04:32.982 --> 00:04:34.378
all the projects.

71
00:04:34.378 --> 00:04:38.120
I want this to be async, cuz I like async.

72
00:04:39.220 --> 00:04:43.080
So what I'll do is I'll just await

73
00:04:45.350 --> 00:04:49.210
Project., and there's so
many different operations you can do here.

74
00:04:49.210 --> 00:04:51.530
You can do delete many,
you can do find and

75
00:04:51.530 --> 00:04:56.890
delete, you can just do .remove,
which might be deprecated but still works.

76
00:04:56.890 --> 00:04:59.419
There's so many ways to delete a lot
of things out of the database.

77
00:05:00.560 --> 00:05:07.394
I'm just gonna do a findAnd,
&gt;&gt; Scott Moss: Actually,

78
00:05:07.394 --> 00:05:09.260
I'm gonna do a deleteMany,
let's do deleteMany.

79
00:05:09.260 --> 00:05:14.150
So we'll say a deleteMany, and
then the conditions are pretty much any

80
00:05:14.150 --> 00:05:19.010
project that has the ID of
the org that was removed.

81
00:05:19.010 --> 00:05:21.650
So we know a project,
if you go look at it,

82
00:05:21.650 --> 00:05:24.980
it has an org property
whose value is a org ID.

83
00:05:24.980 --> 00:05:28.706
And we know this document has an ID on it,
so if I say org and

84
00:05:28.706 --> 00:05:33.530
then document._ID,
I should be able to delete all of those.

85
00:05:33.530 --> 00:05:37.210
I'm gonna save that and I'm gonna
go back to my test and that passes.

86
00:05:41.407 --> 00:05:43.569
&gt;&gt; Scott Moss: Again, if org was removed,

87
00:05:43.569 --> 00:05:49.165
then delete all of the projects that
are associated with that org as well.

88
00:05:49.165 --> 00:05:49.809
In production,

89
00:05:49.809 --> 00:05:53.400
you can probably do like a soft delete,
just in case your customers come back.

90
00:05:53.400 --> 00:05:54.140
Getting their data back.

91
00:05:56.990 --> 00:05:58.380
Any questions on this?

92
00:05:58.380 --> 00:06:00.686
Other than the issue that
I brought up earlier?

93
00:06:05.345 --> 00:06:07.550
&gt;&gt; Scott Moss: Anybody do anything
differently than this and if you did,

94
00:06:07.550 --> 00:06:09.180
I would love to know about it.

95
00:06:09.180 --> 00:06:11.761
Cuz there's a lot of different
ways you can do this.

96
00:06:11.761 --> 00:06:12.586
Yeah what's up?

97
00:06:12.586 --> 00:06:14.135
&gt;&gt; Student: So doc I just did this,

98
00:06:14.135 --> 00:06:18.510
not sure if it worked not sure
if that's better or worse.

99
00:06:18.510 --> 00:06:20.100
&gt;&gt; Scott Moss: Yeah, yeah this works.

100
00:06:20.100 --> 00:06:21.460
Yeah, that totally works.

101
00:06:21.460 --> 00:06:24.340
&gt;&gt; Student: And it used the async or
await, maybe that's bad?

102
00:06:24.340 --> 00:06:25.760
&gt;&gt; Scott Moss: No, it's not bad.

103
00:06:25.760 --> 00:06:30.420
The reason I did this is I forced
this function to just wait, right?

104
00:06:30.420 --> 00:06:33.390
Technically, I should come here and
do next right underneath it.

105
00:06:33.390 --> 00:06:36.210
But the reason next is
not that important here

106
00:06:36.210 --> 00:06:38.720
is because I don't have
any middleware after it.

107
00:06:38.720 --> 00:06:41.340
If I did then I would
absoluely have to put next.

108
00:06:41.340 --> 00:06:43.000
But the reason I put await is so

109
00:06:43.000 --> 00:06:46.810
that there's no race condition in my test,
right?

110
00:06:46.810 --> 00:06:50.510
Because if I don't await this, then

111
00:06:51.710 --> 00:06:56.510
while I'm awaiting this org to be removed,
this might be happening in the background.

112
00:06:56.510 --> 00:07:00.652
And then when my assertion happens,
this still might be happening.

113
00:07:00.652 --> 00:07:03.200
So you have an erase condition
where it may pass sometimes and

114
00:07:03.200 --> 00:07:05.760
it may fail sometimes because
there's erase condition.

115
00:07:05.760 --> 00:07:08.110
So you just wanna put everything
synchronous, so I just awaited it.

116
00:07:09.420 --> 00:07:09.950
That was it.

117
00:07:09.950 --> 00:07:13.252
But I also think in these posts depending
on where the version of mongoose you

118
00:07:13.252 --> 00:07:16.460
are using, like mongoose 5 you can
actually just return a promise here.

119
00:07:16.460 --> 00:07:17.980
So if you just put a return
statement infront of it,

120
00:07:17.980 --> 00:07:20.290
it probably would have worked as well too,
as far as waiting

