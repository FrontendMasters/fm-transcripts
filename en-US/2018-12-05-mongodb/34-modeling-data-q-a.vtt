WEBVTT

1
00:00:00.800 --> 00:00:01.550
&gt;&gt; Scott Moss: Yeah what's up?

2
00:00:03.790 --> 00:00:08.725
&gt;&gt; Speaker 2: So how do you sort of
decide when to just make a really deep

3
00:00:08.725 --> 00:00:12.820
tree of data versus a very
sort of normalized or

4
00:00:12.820 --> 00:00:16.817
sort of split apart, more relational data.

5
00:00:16.817 --> 00:00:19.806
&gt;&gt; Scott Moss: What I found out is that
Mongo is really good at changing how you

6
00:00:19.806 --> 00:00:20.447
model data.

7
00:00:20.447 --> 00:00:24.266
Because if you think about modeling
data from a SQL perspective,

8
00:00:24.266 --> 00:00:27.610
it has nothing to do with application,
it's just data.

9
00:00:27.610 --> 00:00:30.522
It's just how do I model the data so
it fits the database?

10
00:00:30.522 --> 00:00:31.330
Whereas in Mongo it's so

11
00:00:31.330 --> 00:00:34.560
flexible, you actually wanna model
the data how it fits the application.

12
00:00:34.560 --> 00:00:37.820
So my answer to that is how
are you querying the data?

13
00:00:37.820 --> 00:00:38.740
What needs to see it?

14
00:00:38.740 --> 00:00:39.830
And what does it need to see?

15
00:00:39.830 --> 00:00:44.540
If you have a screen on your app
that's got the user profile,

16
00:00:44.540 --> 00:00:49.320
it's got this information about settings,
and it's got all the posts.

17
00:00:49.320 --> 00:00:52.170
Maybe you should put that all in one
thing, so you just hit it once and

18
00:00:52.170 --> 00:00:53.290
grab it all, right?

19
00:00:53.290 --> 00:00:57.270
Cuz it's built for your application
versus built for the database.

20
00:00:57.270 --> 00:00:59.780
Now if you've built SQL you might
be thinking, that's disgusting.

21
00:00:59.780 --> 00:01:01.580
Yeah, in SQL it is disgusting.

22
00:01:01.580 --> 00:01:05.270
But like in Mango it actually works,
it's better for you if you do it that way.

23
00:01:05.270 --> 00:01:08.730
So for me, we model our data
around what the application needs.

24
00:01:08.730 --> 00:01:11.650
That way we can just hit one route,
do one database call and

25
00:01:11.650 --> 00:01:13.890
get everything we need for
that page, and then we're done.

26
00:01:13.890 --> 00:01:17.570
We don't have to do like multiple database
queries to like get this, and then this,

27
00:01:17.570 --> 00:01:19.390
and then this, and
then this just to put it on the page.

28
00:01:19.390 --> 00:01:22.010
It's like, this one page needs all this,
put it in one thing.

29
00:01:22.010 --> 00:01:22.510
Done.

30
00:01:24.133 --> 00:01:28.047
&gt;&gt; Speaker 2: This was on Firebase that
I saw this, which is also NoSQL, but

31
00:01:28.047 --> 00:01:32.340
I've seen instances where they
literally write the same content in

32
00:01:32.340 --> 00:01:36.050
different places,
just duplicates of the same content.

33
00:01:36.050 --> 00:01:37.760
&gt;&gt; Scott Moss: Yeah, yeah,
they denormalize, yeah.

34
00:01:37.760 --> 00:01:41.126
&gt;&gt; Speaker 2: So literally,
the blog post will go under user/posts.

35
00:01:41.126 --> 00:01:41.690
&gt;&gt; Scott Moss: Mm-hm.

36
00:01:41.690 --> 00:01:43.720
&gt;&gt; Speaker 2: And
also it will just go under posts, and

37
00:01:43.720 --> 00:01:48.670
also it will go under
category/categoryname/posts in there.

38
00:01:48.670 --> 00:01:51.800
And so you've written that blog
post content in three places.

39
00:01:51.800 --> 00:01:53.280
Is that madness or is that cool?

40
00:01:53.280 --> 00:01:54.470
&gt;&gt; Scott Moss: That takes
it to an extreme level.

41
00:01:54.470 --> 00:01:57.072
I think at some point it's just like,
that's a lot of work,

42
00:01:57.072 --> 00:02:00.254
because you gotta do a lot of middleware
to keep track of all that, right?

43
00:02:00.254 --> 00:02:03.970
But there is some really good benefits
of denormalizing your data, right?

44
00:02:03.970 --> 00:02:07.730
So if you start off with normalizing it,
as in they got a reference here but

45
00:02:07.730 --> 00:02:08.310
no reference here.

46
00:02:08.310 --> 00:02:10.970
But eventually you start to
denormalize the words in two places.

47
00:02:10.970 --> 00:02:14.090
I think that actually really
is a good place to be, but

48
00:02:14.090 --> 00:02:15.230
only if your application needs it.

49
00:02:15.230 --> 00:02:19.710
If your application's not asking for that,
like if I have a org and a project and

50
00:02:19.710 --> 00:02:20.850
they both reference each other.

51
00:02:22.080 --> 00:02:24.800
When I ask for
a project do I need the org there?

52
00:02:24.800 --> 00:02:26.280
Why do I need that, you know what I mean?

53
00:02:26.280 --> 00:02:28.950
So you gotta think about
the queries that you're asking for.

54
00:02:28.950 --> 00:02:32.020
And again, it's really gonna be based
off what is it that you're asking for?

55
00:02:32.020 --> 00:02:36.530
At some point, if your data structures
look like that, if you're modeling

56
00:02:36.530 --> 00:02:40.430
data like that, then I would imagine
your user experience is probably bad to.

57
00:02:40.430 --> 00:02:43.430
So you should figure out,
you gotta take a step back and

58
00:02:43.430 --> 00:02:46.660
realize what is the information
you're trying to show you users?

59
00:02:46.660 --> 00:02:51.200
And then how do you model the data but
you know, denormalizing is not that bad.

60
00:02:51.200 --> 00:02:56.160
I would just stay away from like
arrays and arrays together.

61
00:02:56.160 --> 00:02:58.680
Just working with arrays in general
is always gonna be tough if

62
00:02:58.680 --> 00:02:59.530
you've probably noticed,

63
00:02:59.530 --> 00:03:02.950
those are some of the most challenging
thing in exercises today where arrays.

64
00:03:02.950 --> 00:03:06.771
So, I would try my best to stay away
from that as much as possible and

65
00:03:06.771 --> 00:03:11.413
add a reference on the other side as much
as I can, unless there's just no way I can

66
00:03:11.413 --> 00:03:14.989
get around it because the way I
need to query data, so, yeah.

67
00:03:14.989 --> 00:03:16.158
You had a question?

68
00:03:16.158 --> 00:03:19.999
&gt;&gt; Speaker 3: Yeah, so it relates
to the previous question is that,

69
00:03:19.999 --> 00:03:25.340
you said whatever links together
should be put in a single document.

70
00:03:25.340 --> 00:03:26.180
So I work for

71
00:03:26.180 --> 00:03:30.730
a commerce application and we have
a lot of things going on in one page.

72
00:03:30.730 --> 00:03:31.960
&gt;&gt; Scott Moss: Yeah.
&gt;&gt; Speaker 3: We have shopping cart,

73
00:03:31.960 --> 00:03:35.170
we have shopping list, we have items and

74
00:03:35.170 --> 00:03:37.620
all the items available,
and lots of stuff.

75
00:03:37.620 --> 00:03:39.784
&gt;&gt; Scott Moss: Right.
&gt;&gt; Speaker 3: So if we cram all these into

76
00:03:39.784 --> 00:03:43.730
one document,
then we are at a disadvantage, so.

77
00:03:43.730 --> 00:03:45.981
&gt;&gt; Scott Moss: Well, you can't put
the whole app in one document cuz if you

78
00:03:45.981 --> 00:03:49.043
put the whole app in document, and then
you query one document, you've queried

79
00:03:49.043 --> 00:03:52.894
the whole database and that's just-
&gt;&gt; Speaker 3: Yes, but just for like,

80
00:03:52.894 --> 00:03:58.720
to show just the homepage we
need all these stuff loading up?

81
00:03:58.720 --> 00:03:59.750
&gt;&gt; Scott Moss: Yeah, yeah.

82
00:03:59.750 --> 00:04:00.490
&gt;&gt; Speaker 3: So-
&gt;&gt; Scott Moss: So

83
00:04:00.490 --> 00:04:02.030
the way I would think about that,

84
00:04:02.030 --> 00:04:06.320
if you had a homepage, what specifically
is on a homepage and only on a homepage?

85
00:04:06.320 --> 00:04:07.570
Put all that in one document.

86
00:04:07.570 --> 00:04:11.600
You probably have other stuff around
the homepage that exists on other pages.

87
00:04:11.600 --> 00:04:13.730
Maybe those don't go in
the homepage document then,

88
00:04:13.730 --> 00:04:16.220
they go in some other document cuz
they are gonna be used somewhere else.

89
00:04:16.220 --> 00:04:17.530
They just happen to be in the homepage.

90
00:04:17.530 --> 00:04:21.520
So I would just put specific
things that are always together

91
00:04:21.520 --> 00:04:23.470
in the document together and try to.

92
00:04:23.470 --> 00:04:27.330
For instance, if I was doing SQL,
I would have a user table and

93
00:04:27.330 --> 00:04:29.280
then I would have a user settings table.

94
00:04:29.280 --> 00:04:31.065
And then I would join them get
the settings for the user.

95
00:04:31.065 --> 00:04:33.670
Whereas that doesn't really make sense
cuz I'm always gonna get the settings for

96
00:04:33.670 --> 00:04:34.770
the user, always, so

97
00:04:34.770 --> 00:04:37.460
I'll just put the settings embedded
in the user then I'm done, right?

98
00:04:37.460 --> 00:04:39.722
So like you kind of got to take
it step by step like that,

99
00:04:39.722 --> 00:04:43.490
to understand why am I even joining this
when I'm always going to get this anyways,

100
00:04:43.490 --> 00:04:46.440
like default,I'm always going to
get the settings for this user.

101
00:04:46.440 --> 00:04:47.800
Why not just put it here.

102
00:04:47.800 --> 00:04:52.060
So it's like that type of thing so, yeah,
you can't take it to the point where

103
00:04:52.060 --> 00:04:57.440
you're putting everything in there
because a document has a collection

104
00:04:57.440 --> 00:05:01.280
of a top of like sixteen,
I can't remember if it's 16 megabytes or

105
00:05:01.280 --> 00:05:03.610
10 megabytes,
the limit of what a document can be.

106
00:05:03.610 --> 00:05:05.230
I think it's 16 megabytes.

107
00:05:06.890 --> 00:05:10.560
Yeah, I'm pretty sure 16 megabytes,
that's the biggest a document can be, so

108
00:05:10.560 --> 00:05:11.240
you can't do that.

109
00:05:11.240 --> 00:05:16.490
16 megabytes is just ridiculous, so
yeah, don't push it that far but

110
00:05:16.490 --> 00:05:20.070
group things that make sense
together as much as possible.

111
00:05:20.070 --> 00:05:22.937
Especially if you're fighting
around transactions and

112
00:05:22.937 --> 00:05:26.937
undoing things because things break, you
gotta go back like all right how can we

113
00:05:26.937 --> 00:05:30.638
change our data model to where we can
just do all of this in one operation and

114
00:05:30.638 --> 00:05:32.749
take advantage of the nested structure.

115
00:05:36.107 --> 00:05:38.877
&gt;&gt; Speaker 4: In this case would
it be possible to have multiple

116
00:05:38.877 --> 00:05:40.410
instances of node?

117
00:05:40.410 --> 00:05:45.290
I mean, let's say like shopping cart,
I mean that's a good example.

118
00:05:45.290 --> 00:05:46.790
Even if someone is on a home page,

119
00:05:46.790 --> 00:05:51.740
you still need to keep up our system
shopping cart with items and everything.

120
00:05:51.740 --> 00:05:57.760
Would it be possible to have one server
only handle like this direct content on

121
00:05:57.760 --> 00:06:02.360
the homepage for example, another server
taking care of only the shopping cart.

122
00:06:02.360 --> 00:06:05.516
&gt;&gt; Scott Moss: Yes,
that's like a market service architecture,

123
00:06:05.516 --> 00:06:07.451
a lot of people do that today, or

124
00:06:07.451 --> 00:06:12.617
they have these little servers that do one
thing, this server does authentication,

125
00:06:12.617 --> 00:06:17.377
this server only handle users,
this server handles like, whatever, yeah.

126
00:06:17.377 --> 00:06:19.782
So that's a very common pattern,
that right there,

127
00:06:19.782 --> 00:06:23.308
that architecture, it can get pretty crazy
cuz now you gotta figure out a way to

128
00:06:23.308 --> 00:06:25.838
communicate between those
different architectures.

129
00:06:25.838 --> 00:06:28.720
You need a license to operate the queueing
system, all types of different things.

130
00:06:28.720 --> 00:06:32.168
You might need a gateway that is
a proxy that sits in front of it.

131
00:06:32.168 --> 00:06:35.262
So that just introduces a lot more
problems, but yes, a lot of people do

132
00:06:35.262 --> 00:06:38.164
micro service architecture and
there is nothing wrong with that.

133
00:06:38.164 --> 00:06:41.162
They can all talk to
the same database too,

134
00:06:41.162 --> 00:06:43.918
cuz you can connect with just a string.

135
00:06:43.918 --> 00:06:45.779
&gt;&gt; Speaker 5: So
you'd probably just do a mix,

136
00:06:45.779 --> 00:06:48.046
a relational database also with Mongo?

137
00:06:48.046 --> 00:06:50.480
Or, because I mean that will
complicate things, I don't know.

138
00:06:50.480 --> 00:06:51.590
&gt;&gt; Scott Moss: I think you can.

139
00:06:51.590 --> 00:06:54.270
I think if you're the Targets
in the Googles of the world,

140
00:06:54.270 --> 00:06:56.370
I think you can't just use one database.

141
00:06:56.370 --> 00:06:57.640
It's just not gonna solve your problem.

142
00:06:57.640 --> 00:07:00.840
You're gonna have different scenarios and
you're gonna have different needs.

143
00:07:00.840 --> 00:07:03.056
So there's nothing wrong
with mixing two databases.

144
00:07:03.056 --> 00:07:06.900
We use Postgres for our analytics
database, but we use Mongo for

145
00:07:06.900 --> 00:07:09.930
our application database and
they work together just fine.

