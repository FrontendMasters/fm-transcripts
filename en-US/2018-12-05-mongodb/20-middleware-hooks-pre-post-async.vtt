WEBVTT

1
00:00:00.020 --> 00:00:04.210
&gt;&gt; Scott Moss: Sweet, some of
the other stuff I wanna show is hooks.

2
00:00:04.210 --> 00:00:08.730
So someone asked a question about
how do we get notifications or

3
00:00:08.730 --> 00:00:13.760
how do we know when something happens on
a collection, and then respond to it.

4
00:00:13.760 --> 00:00:16.370
Well Mongoose's answer to that is hooks.

5
00:00:16.370 --> 00:00:20.260
So we can hook into, or actually they call
them middleware, I call them hooks, but

6
00:00:20.260 --> 00:00:21.860
the official name is called middleware.

7
00:00:21.860 --> 00:00:25.140
So what you can do is you
can add middleware into

8
00:00:25.140 --> 00:00:28.690
different events that
happen on the collection.

9
00:00:28.690 --> 00:00:32.440
And pretty much an event is any
operation that could happen.

10
00:00:32.440 --> 00:00:37.920
You do a find, a find one and
delete, a save, a remove, all those

11
00:00:37.920 --> 00:00:41.760
different types of operations you can do
on a model, you can either tie into them

12
00:00:41.760 --> 00:00:46.330
before they happen or after they happen,
and it can be synchronous or asynchronous.

13
00:00:46.330 --> 00:00:48.780
And you could even control
the order when they happen.

14
00:00:48.780 --> 00:00:50.690
And that's what the middleware
allows you to do.

15
00:00:50.690 --> 00:00:52.770
So it's actually,
middleware by itself is really advanced,

16
00:00:52.770 --> 00:00:55.610
but I was just gonna show you some
of the stuff that you can do.

17
00:00:55.610 --> 00:01:01.166
So for instance, if I wanted to run
middleware before I created a school,

18
00:01:01.166 --> 00:01:06.901
before it was actually saved in
the database, I wanna run some middleware,

19
00:01:06.901 --> 00:01:11.828
what I can do is I can use the same
schema object that we created from

20
00:01:11.828 --> 00:01:16.606
mongoose.schema, and
what I can do is I can say school.pre.

21
00:01:16.606 --> 00:01:21.636
So if I do pre, and
then I pass in the name of the event that

22
00:01:21.636 --> 00:01:26.240
I want to subscribe to,
I'm going to say pre save,

23
00:01:26.240 --> 00:01:29.690
I can run some functionality in here.

24
00:01:31.660 --> 00:01:41.311
So in this case I'm just going
to say console.log(before save),

25
00:01:41.311 --> 00:01:42.870
save there we go.

26
00:01:42.870 --> 00:01:44.260
So I'm just going to do that.

27
00:01:46.010 --> 00:01:48.970
And none of our school stuff is unique or
required, so

28
00:01:48.970 --> 00:01:51.230
I can just run the same code,
and we should still see it.

29
00:01:51.230 --> 00:01:52.477
So I'm gonna get rid of these other logs.

30
00:01:56.160 --> 00:01:57.429
&gt;&gt; Scott Moss: Still gonna save it, so

31
00:01:57.429 --> 00:02:01.487
if I run this,
&gt;&gt; Scott Moss: You can see I get a log

32
00:02:01.487 --> 00:02:02.840
before a save.

33
00:02:02.840 --> 00:02:05.530
So this happened before
the actual document was saved.

34
00:02:05.530 --> 00:02:07.870
This did not happen before the validation.

35
00:02:07.870 --> 00:02:11.750
If we had validations on the document and
I was trying to fix them inside of

36
00:02:11.750 --> 00:02:15.515
the save, it would still fail
because validations run before save.

37
00:02:15.515 --> 00:02:18.862
There's another hook for
that and that's prevalidate.

38
00:02:18.862 --> 00:02:22.369
So if you want to run things before
Mongoose validates then you can say

39
00:02:22.369 --> 00:02:25.643
before you validate anything,
let me do my validation first, and

40
00:02:25.643 --> 00:02:27.001
then you can do your thing.

41
00:02:27.001 --> 00:02:30.458
So this is a great place to do
everything that's custom validations and

42
00:02:30.458 --> 00:02:31.910
stuff like that.

43
00:02:31.910 --> 00:02:36.080
And again, pretty much for almost any
operation that you can do on a model,

44
00:02:36.080 --> 00:02:38.630
there is a hook for it,
or a middleware for it.

45
00:02:38.630 --> 00:02:45.220
So if you want to do before find one,
you can say before find one.

46
00:02:45.220 --> 00:02:48.640
And whenever the find one query runs,
it's gonna run this function first.

47
00:02:48.640 --> 00:02:51.910
If you wanna do one before find one and
remove, you can add that.

48
00:02:51.910 --> 00:02:54.070
Almost any operation you can do that.

49
00:02:54.070 --> 00:02:58.310
There's some small gotchas
between querying and

50
00:02:58.310 --> 00:03:02.190
updating and how that works,
and what you would get,

51
00:03:02.190 --> 00:03:06.070
but it's very minute, and you just have to
look at the documentation of what those

52
00:03:06.070 --> 00:03:11.050
small ones are because it really
depends on how your stuff is set up.

53
00:03:11.050 --> 00:03:15.057
But basically you either might get
a reference to a document as this,

54
00:03:15.057 --> 00:03:18.593
or you might get a reference to
the update that's coming in.

55
00:03:18.593 --> 00:03:21.090
It really depends on how you
structure your application.

56
00:03:21.090 --> 00:03:24.890
And those are the only things, but just to
be safe, don't use the arrow functions,

57
00:03:24.890 --> 00:03:28.180
just use the regular functions to make
sure that the binding is correct.

58
00:03:29.460 --> 00:03:32.830
So that's for pre, for
post it's mostly the same thing.

59
00:03:32.830 --> 00:03:34.815
So I can do post save.

60
00:03:36.887 --> 00:03:39.930
&gt;&gt; Scott Moss: And
I can say after save check this out.

61
00:03:41.630 --> 00:03:45.115
So I'm going to do this and
then, boom, after save it ran.

62
00:03:47.985 --> 00:03:51.063
&gt;&gt; Scott Moss: So these were just
synchronous middleware functions,

63
00:03:51.063 --> 00:03:53.210
you can also do asynchronous.

64
00:03:53.210 --> 00:03:57.660
So if you wanted to do asynchronous then,
and if you're just doing saves and

65
00:03:57.660 --> 00:03:59.910
read, then you're gonna get two arguments.

66
00:03:59.910 --> 00:04:04.414
So you'll probably get the documents, the
first argument, and I believe you'll get

67
00:04:04.414 --> 00:04:08.753
this other one called next or, actually,I
think next is the only one you'll get.

68
00:04:08.753 --> 00:04:10.898
So you'll get next as
one argument like this,

69
00:04:10.898 --> 00:04:13.430
and then now you can do
asynchronous stuff in here.

70
00:04:13.430 --> 00:04:19.060
So if I wanted to say let's
just do a setTimeout here.

71
00:04:19.060 --> 00:04:24.476
So we'll say setTimeout for 300 and

72
00:04:24.476 --> 00:04:28.917
then we'll do a console.log.

73
00:04:31.755 --> 00:04:33.900
&gt;&gt; Scott Moss: And
then we'll say next as in we're done.

74
00:04:33.900 --> 00:04:36.427
So next is a function,
that you can say, all right,

75
00:04:36.427 --> 00:04:39.769
I'm finally done, you can go onto
the next middleware in the stack.

76
00:04:39.769 --> 00:04:42.815
Cuz you can stack up these middleware and
whenever you create them,

77
00:04:42.815 --> 00:04:46.344
that's the order they're going to be
executed, so saying next is saying go to

78
00:04:46.344 --> 00:04:49.831
the next middleware, I'm done now,
and that's what that function is for.

79
00:04:49.831 --> 00:04:53.429
So if you ever use middleware in Express
or any other server framework, it's very

80
00:04:53.429 --> 00:04:56.885
much the same way, just saying go to
the next middleware that's registered.

81
00:04:56.885 --> 00:05:02.310
Cuz there's nothing stopping me for
making another school.post('save').

82
00:05:02.310 --> 00:05:05.062
I can do that again, there's no
one stopping me from doing it, but

83
00:05:05.062 --> 00:05:06.650
this one will run first then this one.

84
00:05:07.960 --> 00:05:10.760
And this is saying, all right,
I'm done, go to the next one, but

85
00:05:10.760 --> 00:05:12.960
not before I do 300 milliseconds.

86
00:05:12.960 --> 00:05:15.410
So, we'll do that, run this.

87
00:05:17.420 --> 00:05:19.038
Okay, yeah, I had it right the first time.

88
00:05:19.038 --> 00:05:22.610
So doc will be the first argument and
then next will be the next argument,

89
00:05:23.660 --> 00:05:26.770
doc is gonna be the instance
of the document itself.

90
00:05:26.770 --> 00:05:31.050
So if I said doc, like that.

91
00:05:33.224 --> 00:05:33.890
&gt;&gt; Scott Moss: There we go.

92
00:05:33.890 --> 00:05:37.366
So now we have a post save,
it waited 300 milliseconds, and

93
00:05:37.366 --> 00:05:40.722
then I logged off the docket,
which was the first argument.

94
00:05:43.916 --> 00:05:46.176
&gt;&gt; Scott Moss: And actually,
I'll just make that a little longer, so

95
00:05:46.176 --> 00:05:48.401
we can actually see it,
cuz that happened kinda fast.

96
00:05:51.826 --> 00:05:52.440
&gt;&gt; Scott Moss: There we go.

97
00:05:54.360 --> 00:05:55.840
So I'm using asynchronous stuff in here,

98
00:05:55.840 --> 00:05:59.740
which means you can do other database
stuff inside of this middleware,

99
00:05:59.740 --> 00:06:02.410
which is really helpful, and that's
actually what you're gonna be doing next.

100
00:06:02.410 --> 00:06:03.983
So we had a question earlier was like,
well,

101
00:06:03.983 --> 00:06:07.300
if we're doing these associations and
I delete something but

102
00:06:07.300 --> 00:06:10.570
now the model that's referred to some of
this is deleted, how do I clean that up?

103
00:06:10.570 --> 00:06:13.000
You would do it in this middleware.

104
00:06:13.000 --> 00:06:15.790
So if you delete something, you need to go
query the database for all the things that

105
00:06:15.790 --> 00:06:19.350
are referencing it and delete the
reference too, or whatever you do there.

106
00:06:19.350 --> 00:06:21.030
So this is where you would do that.

107
00:06:22.840 --> 00:06:25.902
Or this is where I would do it,
I'm sure you can do it somewhere else, but

108
00:06:25.902 --> 00:06:27.221
this is what this is built for.

109
00:06:29.944 --> 00:06:31.375
&gt;&gt; Scott Moss: Any
questions on middleware?

110
00:06:34.240 --> 00:06:34.799
&gt;&gt; Scott Moss: Yes.

111
00:06:34.799 --> 00:06:37.574
&gt;&gt; Speaker 2: Did we have to do
anything to denote that it was gonna be

112
00:06:37.574 --> 00:06:39.363
asynchronous or did just-
&gt;&gt; Scott Moss: Yeah, or

113
00:06:39.363 --> 00:06:42.134
I was going to answer that question,
yes, kind of crazy how that works.

114
00:06:42.134 --> 00:06:46.666
So note a lot of libraries
what they'll do is,

115
00:06:46.666 --> 00:06:53.304
basically the short answer is they
look if you ask for the argument.

116
00:06:53.304 --> 00:06:55.720
If you ask for two arguments,
they know it's asynch.

117
00:06:57.750 --> 00:06:58.440
That's what they do.

118
00:06:58.440 --> 00:07:01.531
So if you say, yeah, I asked for
two arguments, so therefore it's asynch.

119
00:07:01.531 --> 00:07:05.080
If I only asked for
one argument, it won't be asynch.

120
00:07:05.080 --> 00:07:07.570
So they look at the like
arity of the arguments.

121
00:07:07.570 --> 00:07:09.370
I don't really like
that style programming.

122
00:07:09.370 --> 00:07:11.379
I don't know why people do
that in JavaScript, but

123
00:07:11.379 --> 00:07:14.830
it's something people used to do back
in the day and it's carrying over.

124
00:07:14.830 --> 00:07:17.870
I really don't like that, I like to be
just explicit, like I like to pass in

125
00:07:17.870 --> 00:07:23.250
a flag or maybe just return a promise,
like everybody else does,

126
00:07:23.250 --> 00:07:26.530
but yeah, if you put two arguments here,
then that's how they know.

127
00:07:27.880 --> 00:07:29.720
Yeah, otherwise it's like what is that?

128
00:07:29.720 --> 00:07:33.932
It's magic.
Yeah, any other questions?

129
00:07:38.921 --> 00:07:40.980
&gt;&gt; Scott Moss: Pretty powerful stuff.

130
00:07:40.980 --> 00:07:44.430
Another good example for middleware is if
you're doing real time with WebSockets or

131
00:07:44.430 --> 00:07:47.320
anything like that, this is a great place
to update all your clients, all right.

132
00:07:47.320 --> 00:07:52.840
So if one client updates a chat,
right, and you need to post that

133
00:07:52.840 --> 00:07:55.878
chat message to everybody else's chat,
you would do that in something like this,

134
00:07:55.878 --> 00:08:00.460
like post save, ping everybody
else's chat room with this thing.

135
00:08:00.460 --> 00:08:04.040
So, it's a great place for
stuff like that, very, very helpful.

