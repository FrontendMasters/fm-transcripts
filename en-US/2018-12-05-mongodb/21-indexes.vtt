WEBVTT

1
00:00:00.030 --> 00:00:05.010
&gt;&gt; Scott Moss: And the last thing that I
wanted to talk about is gonna be indexes

2
00:00:05.010 --> 00:00:10.050
in a little more detail, specifically
compound indexes, which are so

3
00:00:10.050 --> 00:00:14.110
fantastic in Mongo,
one of my favorite features.

4
00:00:14.110 --> 00:00:17.030
Absolutely my application would
die without compound indexes,

5
00:00:17.030 --> 00:00:18.430
it's just amazing.

6
00:00:19.980 --> 00:00:23.094
But just we're gonna talk about
indexes for just a little bit.

7
00:00:23.094 --> 00:00:26.230
Indexes are really complicated,
and I'm definitely not like

8
00:00:26.230 --> 00:00:29.380
a database admin that knows everything
about low level indexes, but

9
00:00:29.380 --> 00:00:32.970
I can tell you about my experience
in what indexes are in Mongo.

10
00:00:32.970 --> 00:00:36.260
But you can think of indexes
very much like this.

11
00:00:36.260 --> 00:00:42.080
So if I have an object with keys, right?

12
00:00:42.080 --> 00:00:46.920
Key and value, very much like
the router that we built, I'm sorry,

13
00:00:46.920 --> 00:00:49.550
that was yesterday's course,
different group, sorry.

14
00:00:49.550 --> 00:00:54.670
[LAUGH] Yeah, so if you have
an object with a key and a value,

15
00:00:54.670 --> 00:01:00.570
we can now use constant time to go
find the location, right, because

16
00:01:00.570 --> 00:01:03.550
if we know what the key is we can go
straight to this object and get the value.

17
00:01:03.550 --> 00:01:08.360
If you know how hash tables work then
that's what this is, it's a hash table.

18
00:01:08.360 --> 00:01:11.110
But basically what this means is we have
the address we can go straight to it,

19
00:01:11.110 --> 00:01:12.680
we don't have to search for it.

20
00:01:12.680 --> 00:01:17.200
If this was an array, I might have to
search an entire array to figure out where

21
00:01:17.200 --> 00:01:20.253
value is, whereas if it's an object,
I can go straight to it.

22
00:01:20.253 --> 00:01:23.710
Our index's job, at the end of the day,
is to do that for your database.

23
00:01:23.710 --> 00:01:26.530
So right,
we wanna be able to go straight to a value

24
00:01:26.530 --> 00:01:29.510
without having to search
the whole collection for it.

25
00:01:29.510 --> 00:01:31.240
Because if you have a million
things in your collection,

26
00:01:31.240 --> 00:01:33.310
and the thing you're trying
to get is all at the end,

27
00:01:33.310 --> 00:01:36.570
you just scanned a million
things just to get one thing.

28
00:01:36.570 --> 00:01:40.540
That is so like that like you just
couldn't scale an application like that.

29
00:01:40.540 --> 00:01:42.970
So, databases cannot
live without indexes and

30
00:01:42.970 --> 00:01:45.050
Mongo is not the only
database with indexes.

31
00:01:45.050 --> 00:01:49.030
This is just how indexes work,
they're all implemented differently but

32
00:01:49.030 --> 00:01:52.280
this is how indexes kinda work or
this is the purpose of them.

33
00:01:52.280 --> 00:01:58.410
How it actually works in Mongo,
basically the indexes are saved in a file,

34
00:01:58.410 --> 00:02:02.400
and the files are basically kept
in memory, the indexes, and

35
00:02:02.400 --> 00:02:07.060
then Mongo will read the indexes
as address as a pointer so

36
00:02:07.060 --> 00:02:09.730
it will find the actual value
that's somewhere in memory.

37
00:02:09.730 --> 00:02:13.420
So basically if you have,
if you're only querying with indexes,

38
00:02:13.420 --> 00:02:16.120
you're basically reading from memory and
it's free.

39
00:02:16.120 --> 00:02:20.565
So you don't have to use something like or
something like that.

40
00:02:20.565 --> 00:02:21.190
Yes.

41
00:02:21.190 --> 00:02:22.570
&gt;&gt; Speaker 2: What if
you run out of memory?

42
00:02:24.010 --> 00:02:26.460
&gt;&gt; Scott Moss: If you're out of memory
you have to throw money at it, or

43
00:02:26.460 --> 00:02:28.710
you've got to write some better indexes.

44
00:02:28.710 --> 00:02:30.510
That's a really complicated answer.

45
00:02:30.510 --> 00:02:33.470
I could tell you about that
like we're done with this,

46
00:02:33.470 --> 00:02:38.550
how Mongo allocates memory for indexes and
what it does because it's very scientific.

47
00:02:38.550 --> 00:02:41.200
And actually I just learned
this myself not too long ago,

48
00:02:41.200 --> 00:02:42.910
talking with the Mongo experts.

49
00:02:42.910 --> 00:02:46.850
But yeah, the short answer is throw
money at it or fix your indexes.

50
00:02:46.850 --> 00:02:47.650
Yeah.

51
00:02:47.650 --> 00:02:51.600
Okay cool, so now that we have
a primer on indexes, guess what?

52
00:02:51.600 --> 00:02:52.970
You've already built an index before.

53
00:02:52.970 --> 00:02:55.260
When you put unique true,
that was an index.

54
00:02:55.260 --> 00:02:56.280
That wasn't a validation.

55
00:02:56.280 --> 00:03:00.930
You told Mongo, hey, every time I
create a user that has a first name and

56
00:03:00.930 --> 00:03:03.350
a last name in an email and
they all have unique true,

57
00:03:03.350 --> 00:03:07.700
I need you to store a reference
to this user somewhere.

58
00:03:07.700 --> 00:03:11.590
That way when someone tries to create
another one, I'm going to check to see

59
00:03:11.590 --> 00:03:14.680
if this value already exists, and
if it does, I'm going to error out.

60
00:03:14.680 --> 00:03:17.166
And it can do that efficiently
because you created an index for it.

61
00:03:17.166 --> 00:03:22.010
You taught Mongo where the address for
these users were so

62
00:03:22.010 --> 00:03:23.770
it can find them immediately on insert.

63
00:03:23.770 --> 00:03:27.270
So as soon as someone inserts something
you're like I know exactly where this is,

64
00:03:27.270 --> 00:03:30.100
lemme go, no, sorry,
same first name can't do it.

65
00:03:30.100 --> 00:03:34.400
Whereas if you didn't have an index, you
would merely have to, on insert yourself,

66
00:03:34.400 --> 00:03:38.510
you have to write a middleware that
will scan the entire user database and

67
00:03:38.510 --> 00:03:42.600
check every single name yourself to see if
it exists, and you would throw an error.

68
00:03:42.600 --> 00:03:45.260
So imagine how inefficient that would be.

69
00:03:45.260 --> 00:03:49.690
It would grow it's end, so
that would grow as big as users you have.

70
00:03:49.690 --> 00:03:52.720
The more users you have, the slower that
would be, so you don't wanna do that.

