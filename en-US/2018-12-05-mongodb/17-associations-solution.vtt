WEBVTT

1
00:00:00.120 --> 00:00:01.190
&gt;&gt; Scott Moss: All right, welcome back,

2
00:00:01.190 --> 00:00:06.340
hope everyone had enough time
to get those exercises done.

3
00:00:06.340 --> 00:00:08.950
Like I said, the last couple
ones have been challenging.

4
00:00:08.950 --> 00:00:12.140
And you definitely will either have
to have a really good intuition and

5
00:00:12.140 --> 00:00:13.350
a really good guess.

6
00:00:13.350 --> 00:00:16.710
Or had to do a little bit of exploring in
the documentation after you figured out

7
00:00:16.710 --> 00:00:19.560
what the right idea was after
completing some of the previous ones.

8
00:00:19.560 --> 00:00:23.650
So I'm just gonna walk through some
of those or all of those solutions.

9
00:00:23.650 --> 00:00:25.600
So let's go ahead and do that.

10
00:00:25.600 --> 00:00:30.420
So we head over to the queries folder, we
have, I'm gonna do the side by side thing,

11
00:00:30.420 --> 00:00:32.740
so I'm gonna start with the posts.

12
00:00:32.740 --> 00:00:39.529
So open that up and then I open up
post js, so, here, then post js.

13
00:00:41.150 --> 00:00:43.340
Okay, so we start with these tests.

14
00:00:43.340 --> 00:00:47.600
This test says author is required and
must be like an id type.

15
00:00:48.600 --> 00:00:52.820
So if I go look at the post schema,
there's no author here, and

16
00:00:52.820 --> 00:00:55.010
it's definitely not an id type,
so I need to do that.

17
00:00:55.010 --> 00:00:55.963
So I'm gonna to make an author.

18
00:00:58.420 --> 00:01:05.335
&gt;&gt; Scott Moss: I'm going to give it
a type of mongoose.Schema.Types.ObjectId,

19
00:01:05.335 --> 00:01:08.269
I'm gonna make it required.

20
00:01:10.836 --> 00:01:16.280
&gt;&gt; Scott Moss: And there we go, so that
should be all that this is testing for.

21
00:01:16.280 --> 00:01:19.230
So if we run the test,
we'll see if this passed or not.

22
00:01:19.230 --> 00:01:23.790
And if not, we'll have to figure
out what the test is asking for.

23
00:01:23.790 --> 00:01:27.860
I got to go back into my program.

24
00:01:27.860 --> 00:01:28.700
There we go.

25
00:01:28.700 --> 00:01:33.939
So the testing command for this is going

26
00:01:33.939 --> 00:01:41.735
to be yarn tests
exercises/queries/__test__/.

27
00:01:46.543 --> 00:01:48.320
&gt;&gt; Scott Moss: Cool, so
it looks like I got one of them passing.

28
00:01:48.320 --> 00:01:53.610
So if I go look at that it was
author is required and ID type.

29
00:01:53.610 --> 00:01:56.020
So that satisfied that one and
let's put this on watch.

30
00:01:58.080 --> 00:01:58.990
There you go.

31
00:01:58.990 --> 00:02:00.626
So we'll go to the next one.

32
00:02:00.626 --> 00:02:06.590
Which is author must reference
author collection so

33
00:02:06.590 --> 00:02:09.490
I can put the name ref
as a tip of what to do.

34
00:02:09.490 --> 00:02:13.230
So if you go back to the author field that
you made it needs to reference an author

35
00:02:13.230 --> 00:02:17.670
collection, so to do that you go back
to the author field and you put ref.

36
00:02:17.670 --> 00:02:20.840
And then you put the name of
the collection, and the way you would get

37
00:02:20.840 --> 00:02:25.400
the name is if I went to go look
at the author file, author.js.

38
00:02:25.400 --> 00:02:26.790
The name of the collection's
gonna be right here.

39
00:02:28.100 --> 00:02:30.000
In this case it's just author.

40
00:02:30.000 --> 00:02:32.040
So I'm gonna copy that.

41
00:02:32.040 --> 00:02:34.820
I'm gonna go back here, and
I'm gonna say 'author'.

42
00:02:34.820 --> 00:02:39.460
And that's gonna be the name of
the collection that it's referencing.

43
00:02:39.460 --> 00:02:42.990
So if I look here,
it looks like I got two tests passing, so

44
00:02:42.990 --> 00:02:47.760
I scroll up to verify, and
yep author must ref author collection.

45
00:02:47.760 --> 00:02:48.410
So that one's good.

46
00:02:49.600 --> 00:02:51.560
Any questions on the post model?

47
00:02:51.560 --> 00:02:52.798
Is everyone able to get those to pass?

48
00:02:55.017 --> 00:02:56.460
&gt;&gt; Scott Moss: Okay.

49
00:02:56.460 --> 00:03:01.135
Awesome, so now we're going to move over
to the queries and I'll open those up.

50
00:03:09.524 --> 00:03:11.930
&gt;&gt; Scott Moss: Yeah, so
these were kinda fun.

51
00:03:11.930 --> 00:03:15.430
Maybe kind of annoying depending
on how you thought about it.

52
00:03:15.430 --> 00:03:18.530
But, I think it made you
think about little bit.

53
00:03:18.530 --> 00:03:22.630
So post by title, what you can do here is,

54
00:03:22.630 --> 00:03:27.710
I mean there's no wrong way,
there's no one way to really do this.

55
00:03:27.710 --> 00:03:29.655
There's so many ways you can
do a lot of these queries,

56
00:03:29.655 --> 00:03:33.570
so I'm just gonna just do it
the way I've already solved it.

57
00:03:33.570 --> 00:03:35.880
But so for the post by title,
it's pretty simple.

58
00:03:35.880 --> 00:03:38.890
We just wanna do a quick
filter on the query parameters

59
00:03:38.890 --> 00:03:40.040
that we're passing in, right?

60
00:03:40.040 --> 00:03:43.800
So you can see that is expecting, whoops,

61
00:03:43.800 --> 00:03:47.680
let me get the test of,
over here on this one.

62
00:03:49.240 --> 00:03:50.040
There we go.

63
00:03:50.040 --> 00:03:51.570
So post by title.

64
00:03:51.570 --> 00:03:52.550
Get post by title.

65
00:03:52.550 --> 00:03:56.570
So it looks like it's expecting
one post and not many posts.

66
00:03:56.570 --> 00:04:00.670
So I'm gonna roll with that and
if it expects too many posts,

67
00:04:00.670 --> 00:04:02.240
then I'll change the query.

68
00:04:02.240 --> 00:04:08.404
So we want to be able to
just say Post.findOne.

69
00:04:08.404 --> 00:04:11.684
And then I'm just gonna pass in
a title as the only parameter,

70
00:04:11.684 --> 00:04:13.780
and I'll do a .exec just to make sure.

71
00:04:15.220 --> 00:04:19.480
So we're gonna run that,
looks like we got three tests passing.

72
00:04:19.480 --> 00:04:25.040
Scroll up to verify and get postByTitle,
that was it, so we passed that one.

73
00:04:25.040 --> 00:04:26.011
Anybody do that one differently?

74
00:04:28.533 --> 00:04:29.760
&gt;&gt; Scott Moss: No,
that was pretty straightforward.

75
00:04:30.930 --> 00:04:32.008
Posts for authors.

76
00:04:32.008 --> 00:04:38.620
This one looks like it's plural so down
here, text getPost by an author, okay?

77
00:04:38.620 --> 00:04:41.250
And this,
it looks like it's taking an author ID.

78
00:04:41.250 --> 00:04:46.043
So I'll just return Post.findOne by

79
00:04:46.043 --> 00:04:52.440
the field author, and
its value is authorId.

80
00:04:52.440 --> 00:04:54.113
Remember author is just an ID.

81
00:04:54.113 --> 00:04:55.890
Only when we call it partly is an object.

82
00:04:57.340 --> 00:04:58.910
So we can just mash our IDs here.

83
00:05:00.130 --> 00:05:02.060
So this should find that one.

84
00:05:02.060 --> 00:05:03.560
&gt;&gt; Speaker 2: It was post polarized.

85
00:05:03.560 --> 00:05:04.220
&gt;&gt; Scott Moss: Yep, post.

86
00:05:04.220 --> 00:05:05.760
There we go.
Sorry about that.

87
00:05:05.760 --> 00:05:08.790
So it's going to be Post.find so
it we'll look at all of them.

88
00:05:08.790 --> 00:05:15.430
So if we go look, four passed and
get post by author works.

89
00:05:15.430 --> 00:05:16.280
So that one works.

90
00:05:17.490 --> 00:05:20.320
We'll go to the next one which looks
like it's postByContentLength.

91
00:05:20.320 --> 00:05:21.660
This one gets a little more challenging.

92
00:05:23.660 --> 00:05:24.579
Who completed this one?

93
00:05:26.180 --> 00:05:27.500
Got three, okay.

94
00:05:27.500 --> 00:05:29.410
I'm very curious to how
you would have done it.

95
00:05:29.410 --> 00:05:33.680
So I'm gonna walk through mine, and then
I'm gonna ask how you might have done it.

96
00:05:33.680 --> 00:05:35.090
So postByContentLength,

97
00:05:35.090 --> 00:05:40.180
if we look at the test it tests find
post in between content lengths.

98
00:05:40.180 --> 00:05:44.660
So it's gonna give you a max and a min and
you should be able to get back any posts

99
00:05:44.660 --> 00:05:47.600
who has content length in between
that maximum and the minimum.

100
00:05:49.460 --> 00:05:54.437
So the way I can do that is
if I just return Post.find

101
00:05:54.437 --> 00:05:57.840
[SOUND]
and

102
00:05:57.840 --> 00:06:02.680
then what I want to do is use some of the
operators like greater than and less than.

103
00:06:02.680 --> 00:06:07.578
And use these arguments,
the maxContentLength and minContentLength,

104
00:06:07.578 --> 00:06:12.304
cuz if I go look at it post file,
&gt;&gt; Scott Moss: The model itself,

105
00:06:12.304 --> 00:06:16.050
you could see that there's a contentLength
filled on it whose value is a number, and

106
00:06:16.050 --> 00:06:16.860
it's required.

107
00:06:16.860 --> 00:06:19.960
So it always has a contentLength, so
that's the one we wanna query on.

108
00:06:19.960 --> 00:06:21.880
We wanna do the query on that.

109
00:06:21.880 --> 00:06:26.690
If you try to do querying on the content
itself, and try to do greater than or

110
00:06:26.690 --> 00:06:29.310
less than on that, it won't work
because those aren't numbers.

111
00:06:29.310 --> 00:06:30.533
Those are strings.

112
00:06:30.533 --> 00:06:33.910
So you can't do, won't do the greater
than the equal, the greater than,

113
00:06:33.910 --> 00:06:35.520
the less than on a string.

114
00:06:35.520 --> 00:06:36.850
Although JavaScript will do it.

115
00:06:36.850 --> 00:06:38.310
So that's probably why,
if you've done it that way,

116
00:06:38.310 --> 00:06:40.080
you probably thought that was gonna work.

117
00:06:40.080 --> 00:06:41.020
But Mongo won't do it that way.

118
00:06:41.020 --> 00:06:42.660
It's only gonna do that on numbers.

119
00:06:42.660 --> 00:06:45.662
So heading back to the test.

120
00:06:49.541 --> 00:06:51.418
&gt;&gt; Scott Moss: So
the way I would do this is,

121
00:06:51.418 --> 00:06:54.850
one I want to query on
the content length field.

122
00:06:54.850 --> 00:06:58.375
And then I want dollar less than,

123
00:06:58.375 --> 00:07:02.860
so anything less than the maxContentLength
because that is the upper bound.

124
00:07:04.160 --> 00:07:07.698
And then anything greater than
the minContentLength, and

125
00:07:07.698 --> 00:07:11.517
it's not exclusive so
I'm not gonna put less than or equals to,

126
00:07:11.517 --> 00:07:14.931
which does exist in Margo, or
greater than or equals to.

127
00:07:14.931 --> 00:07:16.220
I'm not gonna make it exclusive.

128
00:07:16.220 --> 00:07:19.850
I'm gonna cut off there cuz that's
what it seems like the test is doing.

129
00:07:19.850 --> 00:07:21.880
And if you did put E there
on either one of them,

130
00:07:21.880 --> 00:07:23.150
you probably would have failed it.

131
00:07:23.150 --> 00:07:24.760
And actually like no, not those.

132
00:07:24.760 --> 00:07:28.680
So I think I hard coded it to the exact
lengths than needed to be there.

133
00:07:28.680 --> 00:07:29.370
Yeah.

134
00:07:29.370 --> 00:07:31.100
So that was testing that.

135
00:07:31.100 --> 00:07:36.080
So once you got that,
you need to do .exact and

136
00:07:36.080 --> 00:07:38.350
we'll see if that passes or not.

137
00:07:38.350 --> 00:07:41.460
So let's think that I got five
that passed so let's check it out.

138
00:07:41.460 --> 00:07:44.190
And find post in between
ContentLength pass.

139
00:07:44.190 --> 00:07:45.234
So that's pass this one.

140
00:07:45.234 --> 00:07:46.875
Yes?
&gt;&gt; Speaker 2: You say how you did the ors.

141
00:07:46.875 --> 00:07:49.490
[COUGH] If it was or, what would you do?

142
00:07:49.490 --> 00:07:50.510
&gt;&gt; Scott Moss: If it was or?

143
00:07:50.510 --> 00:07:51.220
&gt;&gt; Speaker 2: Yeah.

144
00:07:51.220 --> 00:07:54.900
&gt;&gt; Scott Moss: If this was or, then
the way you would do this is you would say

145
00:07:56.720 --> 00:08:00.120
or looks like, takes an array.

146
00:08:00.120 --> 00:08:01.090
&gt;&gt; Speaker 2: Okay.

147
00:08:01.090 --> 00:08:03.498
&gt;&gt; Scott Moss: So,
you do or like that, yep.

148
00:08:07.710 --> 00:08:13.070
&gt;&gt; Scott Moss: Cool, so
the next one is fullPostById.

149
00:08:13.070 --> 00:08:16.170
So this one you really probably have to
fail the test a couple times to really

150
00:08:16.170 --> 00:08:17.050
understand what it's doing.

151
00:08:17.050 --> 00:08:19.640
Maybe you even have to look at the test
to understand what it's doing.

152
00:08:19.640 --> 00:08:23.910
But basically, if you read the test,
assertion here is find post by ID and

153
00:08:23.910 --> 00:08:25.420
populates everything.

154
00:08:25.420 --> 00:08:26.050
That's basically it.

155
00:08:26.050 --> 00:08:27.950
So how do you know what to populate?

156
00:08:27.950 --> 00:08:34.130
Well, if you go look at a post model,
you can see that

157
00:08:34.130 --> 00:08:39.000
we need to observe what on here
needs to be populated or not.

158
00:08:39.000 --> 00:08:43.180
So, so far, a post just has this author so

159
00:08:43.180 --> 00:08:47.400
we have basically just this
author to populate and that's it.

160
00:08:47.400 --> 00:08:49.430
So that's the only thing we have
to populate for this test to work.

161
00:08:51.180 --> 00:08:55.959
So we will go back to queries, exec, and

162
00:08:55.959 --> 00:09:00.750
fullPostById so I will say return post.

163
00:09:04.216 --> 00:09:09.388
&gt;&gt; Scott Moss: .findById, pass in the ID.

164
00:09:09.388 --> 00:09:12.760
And I'm gonna use a populate,
cuz that's how we populate stuff.

165
00:09:12.760 --> 00:09:16.320
And it says it in the hint right here,
find by ID and populates everything.

166
00:09:16.320 --> 00:09:19.799
So the thing that I wanna
populate is gonna be the author.

167
00:09:19.799 --> 00:09:20.824
And then I'm just gonna exec.

168
00:09:25.543 --> 00:09:26.900
&gt;&gt; Scott Moss: So I got six passing now.

169
00:09:28.570 --> 00:09:30.710
So findsPostById and populates everything.

170
00:09:37.257 --> 00:09:40.498
&gt;&gt; Scott Moss: So the next one
is selective posts by latest, so

171
00:09:40.498 --> 00:09:42.530
if you scroll out on that one.

172
00:09:43.970 --> 00:09:47.110
Only it selects fields given.

173
00:09:47.110 --> 00:09:54.560
So what this is saying is,
it's going to pass you, where is it at?

174
00:09:55.680 --> 00:10:01.826
It selects
&gt;&gt; Scott Moss: SelectivePostsByLatest,

175
00:10:01.826 --> 00:10:03.030
this one is, excuse me.

176
00:10:03.030 --> 00:10:04.260
By allPostsSlim there we go yeah.

177
00:10:05.370 --> 00:10:08.950
So the names messed up, so yeah
allPostsSlim so this one is gonna give you

178
00:10:08.950 --> 00:10:12.800
fields that it's gonna ask you
to select from the database.

179
00:10:12.800 --> 00:10:15.860
So you could have just cheated this test
by just getting everything to the database

180
00:10:15.860 --> 00:10:18.400
and selecting over JavaScript
then you go to pass the test.

181
00:10:18.400 --> 00:10:19.680
But you should let the database handle it.

182
00:10:19.680 --> 00:10:26.062
So what you wanna do here is, looks like
it wants all posts, so I'll just say post.

183
00:10:26.062 --> 00:10:31.477
Oops, posts., my God,
it's all autocomplete,

184
00:10:31.477 --> 00:10:36.150
.find, all, so I'll just do a star there.

185
00:10:36.150 --> 00:10:41.170
And then I wanna do a .select, and
select is the method you wanna use here.

186
00:10:41.170 --> 00:10:43.082
And this object right here,

187
00:10:43.082 --> 00:10:47.940
fieldsToSelect is gonna be an object
that looks something like this.

188
00:10:47.940 --> 00:10:52.292
It's gonna have a field on it like,
name: -1.

189
00:10:52.292 --> 00:10:53.530
That means don't select name.

190
00:10:54.800 --> 00:10:57.050
So it's gonna have a whole bunch of
fields that belong to the post with

191
00:10:57.050 --> 00:10:57.950
a number on them.

192
00:10:57.950 --> 00:11:00.200
And you can pass that straight to select.

193
00:11:03.811 --> 00:11:06.510
&gt;&gt; Scott Moss: And then do your .exec.

194
00:11:06.510 --> 00:11:07.182
So we'll run that.

195
00:11:11.437 --> 00:11:14.750
&gt;&gt; Scott Moss: And looks like I got
seven tests to pass, so we scroll up.

196
00:11:14.750 --> 00:11:16.687
That one passed to only
selects fields given.

