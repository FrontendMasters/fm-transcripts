WEBVTT

1
00:00:00.230 --> 00:00:01.717
&gt;&gt; Scott Moss: All right,
so speaking of exercises,

2
00:00:01.717 --> 00:00:03.900
we're gonna jump into the next one.

3
00:00:03.900 --> 00:00:10.396
So if you look inside the hooks folder,
you're going to have a org file,

4
00:00:10.396 --> 00:00:17.550
org.js, which is just a org schema, and
you're gonna have a project schema.

5
00:00:17.550 --> 00:00:20.996
And they're both pretty much filled out,
they've got some good stuff on them.

6
00:00:20.996 --> 00:00:22.516
But just like the rest of the exercises,

7
00:00:22.516 --> 00:00:24.498
you're gonna have some tests
that you have to pass.

8
00:00:24.498 --> 00:00:30.277
So if we hop into the README and we,
&gt;&gt; Scott Moss: Preview that,

9
00:00:30.277 --> 00:00:33.190
and we go down to what's happening here,
so again,

10
00:00:33.190 --> 00:00:35.790
you're gonna have
a different test command.

11
00:00:35.790 --> 00:00:39.060
It's just gonna be
exercises/hook/__test__, just so

12
00:00:39.060 --> 00:00:41.250
we could run those tests and
not any other ones.

13
00:00:41.250 --> 00:00:41.924
And basically,

14
00:00:41.924 --> 00:00:45.201
in this exercise you're gonna learn how
to use schema middleware and virtuals,

15
00:00:45.201 --> 00:00:48.303
which is exactly what we just talked
about and what I walked you all through.

16
00:00:48.303 --> 00:00:51.437
Also, you'll dig into the indexes
a little more in detail and

17
00:00:51.437 --> 00:00:53.070
talk about compound indexes.

18
00:00:53.070 --> 00:00:56.400
So that's what we just did, so now you're
gonna have to showcase those skills.

19
00:00:56.400 --> 00:01:00.360
And just like before, check out to
the start branch, reference the README for

20
00:01:00.360 --> 00:01:04.110
any links or resources or
help that I might have talked about.

21
00:01:04.110 --> 00:01:06.660
And as far as the tasks go,
there's more tasks here, but

22
00:01:06.660 --> 00:01:09.070
I promise you that they're not
as difficult as the last one.

23
00:01:09.070 --> 00:01:13.010
So first thing is you're gonna add
a compound index to the project schema so

24
00:01:13.010 --> 00:01:15.990
that the project names are unique per org.

25
00:01:15.990 --> 00:01:21.205
Very similar to what we just did, where I
made the school names unique per district,

26
00:01:21.205 --> 00:01:24.523
you're gonna make the project
names unique per org.

27
00:01:24.523 --> 00:01:28.353
Second thing you're gonna do is add
a virtual getter to the project schema

28
00:01:28.353 --> 00:01:32.121
called bucketLeft, and that's gonna
calculate how much budget is left

29
00:01:32.121 --> 00:01:34.238
versus how much budget has spent so far.

30
00:01:34.238 --> 00:01:37.304
I'm gonna walk you through that in a
minute, cuz you haven't seen these models

31
00:01:37.304 --> 00:01:39.474
before, so
you might not know what I'm talking about.

32
00:01:39.474 --> 00:01:43.872
And the next thing you're gonna do is add
a post remove a hook to the org schema

33
00:01:43.872 --> 00:01:46.917
that removes all projects
associated with the org.

34
00:01:46.917 --> 00:01:49.781
So again, if you have associations
set up on a organization and

35
00:01:49.781 --> 00:01:53.239
you delete an organization, every
party that's referencing that deleted

36
00:01:53.239 --> 00:01:55.195
organization needs to get deleted, too.

37
00:01:55.195 --> 00:01:57.060
So you need to write a middleware for
that, or a hook.

38
00:01:58.660 --> 00:02:03.840
Add a virtual getter to the org schema
called avatar that creates the full url

39
00:02:03.840 --> 00:02:08.140
to the org avatar by concatenating
the cdnURL with the org id.

40
00:02:08.140 --> 00:02:10.485
That sounds very complicated,
but in reality,

41
00:02:10.485 --> 00:02:13.757
you're just making a string that
adds a string inside of a virtual.

42
00:02:13.757 --> 00:02:15.700
And I'll walk you through
what that looks like.

43
00:02:15.700 --> 00:02:18.954
And these need to get
all the tests to pass.

44
00:02:18.954 --> 00:02:20.278
So I'm gonna walk you
through those right quick.

45
00:02:20.278 --> 00:02:24.716
So if we look at the org.js, the virtual,
what I'm talking about is, and

46
00:02:24.716 --> 00:02:29.014
the test will tell you is, you need
to take this cdnUrl, right here, and

47
00:02:29.014 --> 00:02:32.269
you need to add it to the ID
of an org inside of a virtual.

48
00:02:32.269 --> 00:02:34.336
And that virtual needs
to be called avatar.

49
00:02:34.336 --> 00:02:39.923
So you need a virtual called avatar that
just returns the cdnUrl plus the ID,

50
00:02:39.923 --> 00:02:40.897
that's it.

51
00:02:40.897 --> 00:02:41.837
So that's one thing.

52
00:02:41.837 --> 00:02:45.867
You also need to add
another middleware in here,

53
00:02:45.867 --> 00:02:50.683
that post remove will go find
all of the projects related to

54
00:02:50.683 --> 00:02:55.126
the org that just got removed and
delete those, too.

55
00:02:55.126 --> 00:02:55.944
So you gotta do that.

56
00:02:55.944 --> 00:03:00.133
So that's gonna be an asynchronous
middleware hook that you have to do on

57
00:03:00.133 --> 00:03:00.964
post remove.

58
00:03:00.964 --> 00:03:05.962
And then inside the project,
I believe what you had to do in here was

59
00:03:05.962 --> 00:03:09.278
you had to add a virtual
called budgetLeft.

60
00:03:09.278 --> 00:03:13.389
And basically all it does is, it has
a getter on it that when called will just

61
00:03:13.389 --> 00:03:16.741
give you the difference between
a budget and what was spent.

62
00:03:16.741 --> 00:03:17.804
That's all it does.

63
00:03:17.804 --> 00:03:22.327
So you subtract the spent from the budget
and it should return that value.

64
00:03:22.327 --> 00:03:24.874
And that should be a virtual
called budgetLeft.

65
00:03:24.874 --> 00:03:27.721
And then the last one that
you had to do was, and

66
00:03:27.721 --> 00:03:33.180
in the project,
&gt;&gt; Scott Moss: Where is it?

67
00:03:34.570 --> 00:03:36.688
Yeah, add a compound index
to the project scheme.

68
00:03:36.688 --> 00:03:42.953
Yeah, so in the project scheme, this
is where you also add a compound index

69
00:03:42.953 --> 00:03:49.233
where you want the name of the project
to be unique but only scoped to an org.

70
00:03:49.233 --> 00:03:50.740
So you add a compound index for that.

71
00:03:51.830 --> 00:03:53.270
And those are the four
things you had to do.

72
00:03:53.270 --> 00:03:54.950
If you do all that,
all the tests should pass.

73
00:03:54.950 --> 00:03:58.039
So if we run these tests,

74
00:03:58.039 --> 00:04:02.890
we can do yarn test, or, yarn, yeah,

75
00:04:02.890 --> 00:04:08.494
test exercises/hooks/__test__/.

76
00:04:08.494 --> 00:04:13.774
If we run those,
&gt;&gt; Scott Moss: You see two test suits and

77
00:04:13.774 --> 00:04:15.862
only three tests that pass.

78
00:04:15.862 --> 00:04:18.352
So it's not that many tests, but
you can see they are pretty descriptive.

79
00:04:18.352 --> 00:04:22.017
So project names are unique per org,
like we said before.

80
00:04:22.017 --> 00:04:25.806
This one's expecting
that virtual to be there.

81
00:04:25.806 --> 00:04:31.210
And then you have some other ones up here,
that's expecting the org to

82
00:04:31.210 --> 00:04:36.998
move all the projects inside of a hook,
so it's testing for those things.

