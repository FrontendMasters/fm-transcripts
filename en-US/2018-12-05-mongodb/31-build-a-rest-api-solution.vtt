WEBVTT

1
00:00:00.250 --> 00:00:03.170
&gt;&gt; Scott Moss: Hopefully everybody
had a chance to integrate Mongo and

2
00:00:03.170 --> 00:00:06.440
Mongoose with an Express application.

3
00:00:06.440 --> 00:00:09.677
Like I said, it was very much
like the example that I did,

4
00:00:09.677 --> 00:00:11.640
just a slightly different model.

5
00:00:11.640 --> 00:00:13.451
Obviously you had to
fill out these functions,

6
00:00:13.451 --> 00:00:15.680
there might have even been one or
two things you had to add.

7
00:00:15.680 --> 00:00:17.700
But at the end of the day,
it was pretty simple.

8
00:00:17.700 --> 00:00:20.470
So I'm gonna walk through this exercise,
before I start, does

9
00:00:20.470 --> 00:00:23.880
anybody have any questions specifically
to this exercise that came up?

10
00:00:23.880 --> 00:00:27.257
Maybe they wanna ask now that they have
some experience building a full blown API.

11
00:00:30.264 --> 00:00:32.080
&gt;&gt; Scott Moss: No, all right,
we'll hop right into it.

12
00:00:32.080 --> 00:00:35.040
So the first one is I wanna be
able to get it Todo by an ID.

13
00:00:35.040 --> 00:00:38.680
Well, the ID is gonna
be on the req.param.id.

14
00:00:38.680 --> 00:00:40.140
That's very specific to express.

15
00:00:40.140 --> 00:00:41.350
You don't need to know what that is.

16
00:00:41.350 --> 00:00:43.549
That's why I put that there for you,
so you didn't have to figure that out.

17
00:00:44.840 --> 00:00:50.580
But, basically anything with a colon
in front of it's gonna be a parameter.

18
00:00:50.580 --> 00:00:53.270
And you can access a parameter by name,
by whatever name it is here.

19
00:00:53.270 --> 00:00:55.140
So if this was called I,
then this would be called I.

20
00:00:55.140 --> 00:00:58.320
And that's how Express works,
so you can do parameters.

21
00:00:58.320 --> 00:01:05.296
So once we have that ID,
I'm just gonna go ahead and

22
00:01:05.296 --> 00:01:09.367
say give me the Todo = await.

23
00:01:09.367 --> 00:01:13.033
Todo.findById and

24
00:01:13.033 --> 00:01:18.000
then past id, do a .lean.

25
00:01:18.000 --> 00:01:18.500
Oops.

26
00:01:18.500 --> 00:01:19.550
Why is it a div there?

27
00:01:19.550 --> 00:01:20.745
That was ridiculous.

28
00:01:20.745 --> 00:01:22.300
.exec.

29
00:01:22.300 --> 00:01:27.522
So now we have the Todo,
I'm just gonna say res.status.

30
00:01:27.522 --> 00:01:32.295
Res is short for
response with 200 status code,

31
00:01:32.295 --> 00:01:36.530
and I'm gonna send back
some json over todo.

32
00:01:36.530 --> 00:01:38.340
So this will work.

33
00:01:38.340 --> 00:01:41.190
So let's test this and
see all of this will work.

34
00:01:41.190 --> 00:01:42.570
There's some nuances here.

35
00:01:42.570 --> 00:01:44.380
So let's see what that is.

36
00:01:44.380 --> 00:01:47.220
But if I run this, I got my URL here.

37
00:01:47.220 --> 00:01:49.850
I'm gonna go over to Insomnia.

38
00:01:49.850 --> 00:01:51.060
I'll paste that URL here.

39
00:01:51.060 --> 00:01:55.020
I'm gonna do a GET request to /todo.

40
00:01:55.020 --> 00:01:58.290
I'm just gonna put some random thing here,
all right?

41
00:01:58.290 --> 00:01:59.020
And then we'll hit send.

42
00:01:59.020 --> 00:02:03.360
And you can see, it's just going
to load and load, it's hanging.

43
00:02:03.360 --> 00:02:06.550
There's no reason why this service
would take this long to respond.

44
00:02:06.550 --> 00:02:09.990
Usually, when you see it that
means something blew up and

45
00:02:09.990 --> 00:02:11.490
it's not telling you.

46
00:02:11.490 --> 00:02:13.150
So the way you would fix this.

47
00:02:13.150 --> 00:02:15.160
Actually, let's look at the error so
you kinda understand.

48
00:02:16.255 --> 00:02:19.010
As you can see, what actually happens is
we have an unhandled promise rejection

49
00:02:19.010 --> 00:02:20.680
warning reference error.

50
00:02:20.680 --> 00:02:23.130
In this case it's saying
ID is not defined,

51
00:02:23.130 --> 00:02:26.640
that's probably because
I typed in the wrong ID.

52
00:02:26.640 --> 00:02:28.220
So, let's fix that.

53
00:02:28.220 --> 00:02:31.204
But even after I fix that, you're gonna
get the same error if I run this.

54
00:02:35.086 --> 00:02:37.458
&gt;&gt; Scott Moss: It's still gonna hang,
it's still gonna break, and

55
00:02:37.458 --> 00:02:40.656
that's because the actual error
wasn't that typo that I had.

56
00:02:40.656 --> 00:02:44.700
Well, actually it was because it's trying
to cast the value of that parameter

57
00:02:44.700 --> 00:02:45.870
to an object ID.

58
00:02:45.870 --> 00:02:50.170
The way ID's work with Mongo,
like I told you they're all object IDs.

59
00:02:50.170 --> 00:02:53.770
So before it actually tries to
do the query for a buy an ID,

60
00:02:53.770 --> 00:02:56.360
it's going to take the value
of the ID that you gave it and

61
00:02:56.360 --> 00:03:00.370
it is going to try to see if
it is a valid object ID and

62
00:03:00.370 --> 00:03:02.570
if it's not it's just gonna fail right
there, and that's what's happening.

63
00:03:02.570 --> 00:03:06.650
So whenever you see a cast error that
means you gave it a different value type

64
00:03:06.650 --> 00:03:07.840
than it's expecting.

65
00:03:07.840 --> 00:03:12.660
Anything find by ID is
expecting an object ID always,

66
00:03:12.660 --> 00:03:17.800
unless you go and change what an ID is for
a schema, which you can do.

67
00:03:17.800 --> 00:03:20.390
Which we did not talk about
cuz it's really advanced.

68
00:03:20.390 --> 00:03:22.050
But by default it's always an object ID.

69
00:03:22.050 --> 00:03:23.510
So that's why this failed.

70
00:03:23.510 --> 00:03:26.310
So you couldn't just come in here and
just write something like that.

71
00:03:26.310 --> 00:03:27.300
So that's one thing.

72
00:03:27.300 --> 00:03:29.510
Another thing,
is why is the server hanging,

73
00:03:29.510 --> 00:03:33.710
the server should just send back an error
message instead of hanging like that.

74
00:03:33.710 --> 00:03:37.660
That's kind of more a server topic type
thing, but basically the answer is to

75
00:03:37.660 --> 00:03:41.460
that, whenever you're doing Async 08, you
have to try and catch your errors, right?

76
00:03:41.460 --> 00:03:44.660
Cuz it's hanging because we didn't
handle the error that this was.

77
00:03:44.660 --> 00:03:48.179
So the way you would fix that is you
would a try-catch around this Async 08 or

78
00:03:48.179 --> 00:03:50.470
if you're using promises,
just use a dot catch.

79
00:03:59.173 --> 00:04:03.202
&gt;&gt; Scott Moss: So I would catch that and
now I would say if it freaked out,

80
00:04:03.202 --> 00:04:07.525
at least it would send back a 500,
whatever, status code.

81
00:04:07.525 --> 00:04:08.795
I'll just send that back.

82
00:04:08.795 --> 00:04:15.068
So if I restart that,
&gt;&gt; Scott Moss: Restart the server and

83
00:04:15.068 --> 00:04:15.590
then go back.

84
00:04:15.590 --> 00:04:17.810
At least now I get a 500.

85
00:04:17.810 --> 00:04:22.460
It just responds immediately saying,
yeah, that's just not gonna work.

86
00:04:22.460 --> 00:04:24.570
You could see I got a 500
internal server error.

87
00:04:26.300 --> 00:04:26.990
So that's how you fix that.

88
00:04:26.990 --> 00:04:30.590
And now our server just doesn't hang and
we can do other requests.

89
00:04:30.590 --> 00:04:33.970
So obviously this isn't going to work
until we can send back a real ID.

90
00:04:33.970 --> 00:04:35.480
So let's get to the next part.

91
00:04:35.480 --> 00:04:37.950
We can create something then we
can grab one of those IDs and

92
00:04:37.950 --> 00:04:40.360
then we'll pass it to this and
we'll see if it works.

93
00:04:40.360 --> 00:04:44.620
But before that we'll get all todos
which doesn't take any parameters.

94
00:04:44.620 --> 00:04:46.580
So this would just be pretty free.

95
00:04:46.580 --> 00:04:50.103
So we'll just do the same
thing to a try-catch here.

96
00:04:53.074 --> 00:04:54.560
&gt;&gt; Scott Moss: And
I'll just do the same thing for now.

97
00:04:54.560 --> 00:04:58.581
We'll just send back all 500s for now.

98
00:04:58.581 --> 00:05:00.930
And then what we'll do
here is we'll just say,

99
00:05:00.930 --> 00:05:03.059
I can actually just do
all this in one line.

100
00:05:03.059 --> 00:05:07.324
I can say res.status(200) or

101
00:05:07.324 --> 00:05:11.460
200 for GET, And then .json.

102
00:05:11.460 --> 00:05:13.900
And then I can just await right here.

103
00:05:13.900 --> 00:05:18.076
And I can just say,

104
00:05:18.076 --> 00:05:24.347
todo.find.lean.exec.

105
00:05:27.565 --> 00:05:29.011
&gt;&gt; Scott Moss: So
this is giving me all the todos.

106
00:05:31.250 --> 00:05:33.730
Wild card,
I'm gonna wait it right in line.

107
00:05:33.730 --> 00:05:37.988
That's sweet thing by the way,
you can just do it all in one line.

108
00:05:37.988 --> 00:05:43.020
So I was giving you that and then we'll
restart server and we'll try that out.

109
00:05:43.020 --> 00:05:50.104
So I'm expecting to get back
an empty array, if I do this.

110
00:05:50.104 --> 00:05:51.101
It's todos.

111
00:05:55.889 --> 00:05:56.663
&gt;&gt; Scott Moss: Cool, so I do,

112
00:05:56.663 --> 00:06:00.423
I get back an empty the array because
the database didn't find anything and

113
00:06:00.423 --> 00:06:04.255
the database just returned an empty array,
so that's what I've got back.

114
00:06:04.255 --> 00:06:08.504
And, onto the part where we
actually can create a todo, so

115
00:06:08.504 --> 00:06:11.124
our arguments are req, response.

116
00:06:11.124 --> 00:06:14.330
We get the todo created by passing up
an object that has a todo property on it.

117
00:06:15.470 --> 00:06:20.360
And we know a todo has,
if we go look at the model,

118
00:06:20.360 --> 00:06:24.520
it has a message that's unique and
required in a complete that's default.

119
00:06:24.520 --> 00:06:26.360
So all we really need is a message.

120
00:06:26.360 --> 00:06:29.420
So long as you send back an object that
has a message property you're pretty good.

121
00:06:29.420 --> 00:06:32.068
So we'll do the same thing,
we try-catch this.

122
00:06:36.824 --> 00:06:39.487
&gt;&gt; Scott Moss: And if we couldn't do it,

123
00:06:39.487 --> 00:06:45.060
we'll just say res.status, 500.send, boom.

124
00:06:45.060 --> 00:06:48.775
And then now we'll try to create this so
we'll say todo equals await,

125
00:06:48.775 --> 00:06:55.260
todo.create and
we'll pass in the todotocreate.

126
00:06:55.260 --> 00:07:02.578
And what we'll do is we'll
res.status(201).json,

127
00:07:02.578 --> 00:07:10.047
and we'll do todo.json to get
the JSON representation of it.

128
00:07:11.934 --> 00:07:12.820
&gt;&gt; Scott Moss: So we'll do that.

129
00:07:12.820 --> 00:07:13.820
Restart the server.

130
00:07:15.170 --> 00:07:16.894
Oops, where is that?

131
00:07:16.894 --> 00:07:19.485
How did that happen?

132
00:07:22.330 --> 00:07:24.330
&gt;&gt; Scott Moss: Cool, so
now we'll go back here.

133
00:07:24.330 --> 00:07:29.344
We'll do a post request
to the route is /todo.

134
00:07:30.600 --> 00:07:36.270
And we'll add some json,
it's looking for a todo property on

135
00:07:36.270 --> 00:07:40.720
the body, so
I'll add a todo property here.

136
00:07:40.720 --> 00:07:45.200
And I know a todo, the only requirement
that it has is a message, so

137
00:07:45.200 --> 00:07:48.829
I'll add a message and
I'll just say hello there.

138
00:07:50.020 --> 00:07:51.840
So then I will send that.

139
00:07:53.950 --> 00:08:01.630
I get a 500 error because,
it blew up here.

140
00:08:01.630 --> 00:08:04.600
So, whatever I sent, it didn't like it.

141
00:08:04.600 --> 00:08:08.650
So, the way we get around that is
we need to see where the error is.

142
00:08:08.650 --> 00:08:12.060
So we'll log this error and
we'll restart and see what happens.

143
00:08:12.060 --> 00:08:14.920
I'm guessing its the way that
I'm sending it up from Insomnia,

144
00:08:14.920 --> 00:08:18.500
it's doing some type of formatting
other than json that I'm not aware of.

145
00:08:19.590 --> 00:08:24.270
So we'll try that again and
we'll send it, we'll look at the error.

146
00:08:25.352 --> 00:08:28.264
It looks like it's just a duplicate key

147
00:08:28.264 --> 00:08:32.494
on,
&gt;&gt; Scott Moss: Hello there.

148
00:08:32.494 --> 00:08:39.480
So, it's supposed to be unique so let me
try that again do another one of that and

149
00:08:39.480 --> 00:08:43.985
clear the console, hit send,
still errored out.

150
00:08:43.985 --> 00:08:46.881
So this one says,
it's not letting me use two jsons.

151
00:08:46.881 --> 00:08:48.150
It's not liking that.

152
00:08:49.800 --> 00:08:51.010
That's weird.

153
00:08:51.010 --> 00:08:52.070
&gt;&gt; Student: Is it two Jason?

154
00:08:53.240 --> 00:08:54.270
&gt;&gt; Scott Moss: Yeah, I'm sorry.

155
00:08:54.270 --> 00:08:55.190
I just mistyped that.

156
00:08:55.190 --> 00:08:56.100
It is tojson.

157
00:08:56.100 --> 00:08:57.686
I just put json.

158
00:08:57.686 --> 00:09:00.463
There we go.

159
00:09:00.463 --> 00:09:05.288
&gt;&gt; [SOUND]
&gt;&gt; Student2: Can we not put json

160
00:09:05.288 --> 00:09:09.475
strings into the json response sender?

161
00:09:09.475 --> 00:09:12.740
&gt;&gt; Scott Moss: This right here .json?

162
00:09:12.740 --> 00:09:15.100
&gt;&gt; Student2: Yeah,
don't we just put full objects into that?

163
00:09:15.100 --> 00:09:16.100
&gt;&gt; Scott Moss: We do, yeah.

164
00:09:16.100 --> 00:09:19.920
It converts it to json for us.

165
00:09:19.920 --> 00:09:23.580
Okay, so you're asking like to do that
json doesn't that give us back like json?

166
00:09:23.580 --> 00:09:24.676
It's kinda misleading, it does.

167
00:09:24.676 --> 00:09:25.949
It actually gives us back an object.

168
00:09:27.420 --> 00:09:30.990
I know, so
[LAUGH] it gives us back an object.

169
00:09:30.990 --> 00:09:34.462
That's why sometimes I will
use toObjects instead.

170
00:09:34.462 --> 00:09:37.890
Yeah, they both kinda do the same thing.

171
00:09:37.890 --> 00:09:42.030
Very misleading, I know,
it's kind of silly, but

172
00:09:42.030 --> 00:09:46.310
no, it gives you back an object By
the way, technically an object is JSON.

173
00:09:46.310 --> 00:09:51.290
JSON stands for JavaScript Object
Notation, and technically a JavaScript

174
00:09:51.290 --> 00:09:54.080
object is a JavaScript Object Notation,
so it's not wrong.

175
00:09:54.080 --> 00:09:56.360
&gt;&gt; Student3: I think JSON
like text JSON right there.

176
00:09:56.360 --> 00:09:58.030
&gt;&gt; Scott Moss: Yes, of course, yeah.

177
00:09:58.030 --> 00:10:00.070
But I guess it's the way
they rationalize it.

178
00:10:00.070 --> 00:10:01.590
It's like hey, it's not wrong, you know?

179
00:10:01.590 --> 00:10:03.367
Who's gonna complain about that?

180
00:10:03.367 --> 00:10:04.087
We did.

181
00:10:04.087 --> 00:10:10.100
[LAUGH] So, we'll send that,
I've got to change the name.

182
00:10:10.100 --> 00:10:14.180
See those validations,
how awesome they come in handy.

183
00:10:16.420 --> 00:10:17.750
Okay, now we send that.

184
00:10:17.750 --> 00:10:18.300
Cool, there we go.

185
00:10:18.300 --> 00:10:21.830
So now we created a todo and here we go,

186
00:10:21.830 --> 00:10:26.100
we've got the ID, so I'm gonna grab the ID
and then now, I'm gonna be able to.

187
00:10:26.100 --> 00:10:29.750
First, let's just do all todos and
we should get back at least one of them.

188
00:10:29.750 --> 00:10:32.620
And we get three now cuz I created so
many of them.

189
00:10:32.620 --> 00:10:35.990
So now we got three of them,
cuz I did those duplicate requests.

190
00:10:35.990 --> 00:10:39.600
And now we have three todos.

191
00:10:39.600 --> 00:10:44.240
And then just to get one,
which was /todo/the ID.

192
00:10:44.240 --> 00:10:45.429
So I paste the ID in there.

193
00:10:46.468 --> 00:10:49.225
And I'm just gonna send it,
and I get back that one to do.

