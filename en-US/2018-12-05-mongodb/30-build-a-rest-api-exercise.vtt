WEBVTT

1
00:00:00.360 --> 00:00:03.386
&gt;&gt; Scott Moss: So the exercise you're
gonna be doing is basically what we just

2
00:00:03.386 --> 00:00:05.508
did, but without having to write express.

3
00:00:05.508 --> 00:00:06.766
You won't have to write any express.

4
00:00:06.766 --> 00:00:07.743
So if you don't know express or

5
00:00:07.743 --> 00:00:09.820
know, don't worry about
it [INAUDIBLE] any of it.

6
00:00:09.820 --> 00:00:12.693
But if you look inside the app folder,
there's gonna be two files.

7
00:00:12.693 --> 00:00:16.470
There's gonna be a todo.js, very similar
to the node.js that I just made.

8
00:00:18.080 --> 00:00:21.470
And then it's gonna be an index file
that's already got a express server

9
00:00:21.470 --> 00:00:22.035
built out.

10
00:00:22.035 --> 00:00:25.105
The only thing that's missing
are these three controllers.

11
00:00:25.105 --> 00:00:27.696
These three controllers just
expect to do three things.

12
00:00:27.696 --> 00:00:31.705
The get request to slash
to do slash parameter ID is

13
00:00:31.705 --> 00:00:37.360
expecting to find a to do by the ID,
and the ID is gonna be here.

14
00:00:37.360 --> 00:00:39.428
So given this ID I want to go
to find us to do by this ID.

15
00:00:39.428 --> 00:00:42.960
So it's just a basic find my ID
core that you've done before, and

16
00:00:42.960 --> 00:00:45.610
they need to respond using
the response object.

17
00:00:45.610 --> 00:00:48.127
You can look at the code that
I did to see how to respond.

18
00:00:48.127 --> 00:00:50.470
This next one is going
to be getting all todos.

19
00:00:50.470 --> 00:00:52.942
So this one expects to just give
me all the todos and respond.

20
00:00:52.942 --> 00:00:56.445
And then this last one is
expecting to create a todo so,

21
00:00:56.445 --> 00:00:59.840
here's a to do that it
expects you to create.

22
00:00:59.840 --> 00:01:01.241
It wants you to create it and
send it back.

23
00:01:01.241 --> 00:01:04.640
So exactly what I just
showed you in my example.

24
00:01:04.640 --> 00:01:07.526
And that's it, there are no
tests associated with this, so

25
00:01:07.526 --> 00:01:08.836
you just get those to work.

26
00:01:08.836 --> 00:01:12.740
And if you want to test them out you could
use your browser for the get requests.

27
00:01:12.740 --> 00:01:17.124
You just literally just type in, when
you run the server you'll see a address

28
00:01:17.124 --> 00:01:20.105
that you can go to that where
your server is located.

29
00:01:20.105 --> 00:01:23.525
So you just copy this address,
localhost 4000,

30
00:01:23.525 --> 00:01:26.950
paste that into your browser and
then just do the URL.

31
00:01:26.950 --> 00:01:28.360
So I'm gonna go ahead and run this
to show you what I'm talking about.

32
00:01:28.360 --> 00:01:31.930
Let me do a consolt log on this one.

33
00:01:31.930 --> 00:01:36.629
So let me do a rest.sin, hello.

34
00:01:36.629 --> 00:01:37.780
There we go.

35
00:01:37.780 --> 00:01:46.144
So if I run this example which is going
to be node exercises/app/index.js.

36
00:01:46.144 --> 00:01:52.796
If I run that,
I get an error because, yeah.

37
00:01:52.796 --> 00:01:56.171
You also got to pass in the connection
string here, add mongo url here,

38
00:01:56.171 --> 00:01:57.530
to connect to the database.

39
00:01:57.530 --> 00:01:59.900
So I'll just go on ahead and
hard code one right quick.

40
00:02:04.967 --> 00:02:10.113
&gt;&gt; Scott Moss: Local host,
course always 27017,

41
00:02:10.113 --> 00:02:13.500
and I'm just gonna say yo.

42
00:02:13.500 --> 00:02:16.059
Could be any database,
so we'll connect there.

43
00:02:18.080 --> 00:02:21.494
&gt;&gt; Scott Moss: So, you can see,
it'll log this out Http://localhost:4000.

44
00:02:21.494 --> 00:02:22.690
You can copy that.

45
00:02:22.690 --> 00:02:26.099
You can go to your browser and
paste that in.

46
00:02:26.099 --> 00:02:31.450
Then what I want to do is a /todo and
/:Id.

47
00:02:31.450 --> 00:02:34.599
So just ID of what todo,we
don't have the todos yet and

48
00:02:34.599 --> 00:02:38.788
I'm just sending something back, so
I'm just going to set that route.

49
00:02:38.788 --> 00:02:43.150
So /todo and then slash whatever,
and you can see I get back hello.

50
00:02:45.010 --> 00:02:47.049
This is exactly what I put here.

51
00:02:47.049 --> 00:02:49.064
So your job is instead of
sending back hello and

52
00:02:49.064 --> 00:02:52.620
hello world you're just gonna send back
the result of your database query.

53
00:02:52.620 --> 00:02:55.705
That's it, so
you're only writing database queries here,

54
00:02:55.705 --> 00:02:59.224
connect to your database here, and
then just respond and that's it.

55
00:02:59.224 --> 00:03:00.739
Any questions on that exercise?

56
00:03:01.950 --> 00:03:03.309
&gt;&gt; Scott Moss: Yes.

57
00:03:03.309 --> 00:03:07.996
&gt;&gt; Speaker 2: They could use postman
to construct the post request.

58
00:03:07.996 --> 00:03:13.290
&gt;&gt; Scott Moss: Yeah, so for the post
request, there are a lot of options.

59
00:03:13.290 --> 00:03:16.801
You can't really do it in a browser cuz
you can't do a post request in the URL.

60
00:03:16.801 --> 00:03:20.833
So if you have postman, need to use
postman, which is literally built just for

61
00:03:20.833 --> 00:03:21.643
this purpose.

62
00:03:21.643 --> 00:03:25.991
I usually got CLI tool, but
recently I've been using

63
00:03:25.991 --> 00:03:30.422
something called Insomnia,
which is very much like postman,

64
00:03:30.422 --> 00:03:34.703
it's a desktop app that allows
you to construct http stuff.

65
00:03:34.703 --> 00:03:39.849
So I can come in here, I could paste that
same thing in here and be like todo,

66
00:03:39.849 --> 00:03:44.890
and then I could add,
&gt;&gt; Scott Moss: Not graph QL but

67
00:03:44.890 --> 00:03:50.930
I wanna add some JSON,
&gt;&gt; Scott Moss: Or

68
00:03:50.930 --> 00:03:53.530
JSON's kinda ridiculous to write.

69
00:03:53.530 --> 00:03:56.248
So yeah, I'll just write JSON.

70
00:03:56.248 --> 00:03:57.559
So I can add a JSON here, and

71
00:03:57.559 --> 00:04:01.275
then obviously my server's going to
break cuz I don't have the solution up.

72
00:04:01.275 --> 00:04:06.175
But if I had a todo here
with a name of like do

73
00:04:06.175 --> 00:04:10.927
your work,
&gt;&gt; Scott Moss: Like that,

74
00:04:10.927 --> 00:04:15.060
I could just send this request and
it would do a post request.

75
00:04:15.060 --> 00:04:18.399
It's gonna hang for me, because like
I said I don't have the solution,

76
00:04:18.399 --> 00:04:20.716
so you can see it's just
like breaking right now.

77
00:04:20.716 --> 00:04:22.038
It's just killing it right now.

78
00:04:22.038 --> 00:04:26.629
So yeah, you can use this as well,
but any HTTP client,

79
00:04:26.629 --> 00:04:31.930
API client that you wanna use,
you can use it for a POST request.

80
00:04:31.930 --> 00:04:33.939
You can also do the forget
request if you want, so

81
00:04:33.939 --> 00:04:35.660
that's how you would test these things.

82
00:04:39.789 --> 00:04:40.301
&gt;&gt; Speaker 2: Is it free?

83
00:04:40.301 --> 00:04:41.276
&gt;&gt; Scott Moss: It is free.

84
00:04:41.276 --> 00:04:43.470
There's a paid version for it.

85
00:04:43.470 --> 00:04:46.239
It's just one guy who opened source
this and he's asking for donations,

86
00:04:46.239 --> 00:04:47.319
really good work actually.

87
00:04:47.319 --> 00:04:48.820
He does a lot of good work, actually.

88
00:04:48.820 --> 00:04:49.542
He does a lot of good work.
But no,

89
00:04:49.542 --> 00:04:52.830
this is free, I haven't paid anything for
it, but it's really nice.

90
00:04:52.830 --> 00:04:54.930
You might get a little ad that pops up and
is it hey,

91
00:04:54.930 --> 00:04:57.085
pay me, and it'll show his face for
the sympathy.

92
00:04:57.085 --> 00:05:00.580
&gt;&gt; [LAUGH]
&gt;&gt; Scott Moss: [LAUGH] So yeah, it's free.

