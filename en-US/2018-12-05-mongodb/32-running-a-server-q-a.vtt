WEBVTT

1
00:00:00.360 --> 00:00:01.720
&gt;&gt; Scott Moss: Any questions on this?

2
00:00:03.640 --> 00:00:05.410
&gt;&gt; Speaker 2: So
this is the production-wise,

3
00:00:05.410 --> 00:00:06.720
that's how it's been-
&gt;&gt; Scott Moss: Yeah,

4
00:00:06.720 --> 00:00:09.980
you can take this right now,
build your app,

5
00:00:09.980 --> 00:00:12.770
go to Silicon Valley, raise 100 million.

6
00:00:12.770 --> 00:00:16.480
Tell them you got this note taking app,
but, no, seriously,

7
00:00:16.480 --> 00:00:20.050
this is a really good foundation
to creating a production app.

8
00:00:20.050 --> 00:00:23.210
Yeah, I mean, it's just one file and
it's not really doing anything.

9
00:00:23.210 --> 00:00:27.430
But you'll be surprised how similar
production code looks to this.

10
00:00:27.430 --> 00:00:30.770
There's this more business logic, right,
around like I said, authentication and

11
00:00:30.770 --> 00:00:31.710
stuff like that.

12
00:00:31.710 --> 00:00:35.800
When you get down to business,
it's a route that's hitting a database and

13
00:00:35.800 --> 00:00:37.640
then returning the result, right,

14
00:00:37.640 --> 00:00:42.060
and the difficulty is gonna depend on,
how did you model your data?

15
00:00:42.060 --> 00:00:46.090
Did you model your data in such a way
that you have to make multiple queries?

16
00:00:46.090 --> 00:00:47.410
How did you do that?

17
00:00:47.410 --> 00:00:49.160
So that's difficult these
queries are gonna be.

18
00:00:49.160 --> 00:00:51.470
So yeah, at the end of the day,
this is it.

19
00:00:51.470 --> 00:00:55.460
This is why I like Node, because you got
this little thing that's running, but

20
00:00:55.460 --> 00:00:57.390
it's powering so much.

21
00:00:57.390 --> 00:00:59.880
&gt;&gt; Speaker 2: So Node is always running?

22
00:01:01.300 --> 00:01:04.640
&gt;&gt; Scott Moss: Yeah, I opened up a port,
I opened up a socket.

23
00:01:04.640 --> 00:01:05.450
I'm on 5000.

24
00:01:05.450 --> 00:01:06.965
It's just running until it crashes.

25
00:01:06.965 --> 00:01:11.506
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Scott Moss: Yeah,

26
00:01:11.506 --> 00:01:16.349
right, yeah, so
if you compare this to Apache,

27
00:01:16.349 --> 00:01:21.750
man, Apache,
I've used Apache before [LAUGH] yeah.

28
00:01:21.750 --> 00:01:23.270
&gt;&gt; Speaker 2: I'm just saying,
this looks simpler.

29
00:01:23.270 --> 00:01:24.750
&gt;&gt; Scott Moss: It's way
simpler than Apache.

30
00:01:24.750 --> 00:01:26.540
Apache is way more low level, right.

31
00:01:26.540 --> 00:01:29.976
Express takes care of, you don't have to
worry about connecting to the socket,

32
00:01:29.976 --> 00:01:35.460
open it yourself and
chunking the data and all that stuff.

33
00:01:35.460 --> 00:01:38.110
It just takes care of it for
you because it's event based.

34
00:01:38.110 --> 00:01:40.170
So yeah, it's a little more high level,
but at the end of the day,

35
00:01:40.170 --> 00:01:44.010
it kinda does the same thing, yeah.

36
00:01:44.010 --> 00:01:46.590
You got a question?

37
00:01:46.590 --> 00:01:48.130
&gt;&gt; Speaker 3: Yes,
I think you just answered it.

38
00:01:48.130 --> 00:01:51.410
So I was wondering if you just open
the connection and not close it,

39
00:01:51.410 --> 00:01:55.370
you might get socket exception later.

40
00:01:55.370 --> 00:01:55.949
&gt;&gt; Scott Moss: Yeah, you don't-
&gt;&gt; Speaker 3: Like

41
00:01:55.949 --> 00:01:57.107
after a couple of hundred requests.

42
00:01:57.107 --> 00:01:58.160
&gt;&gt; Scott Moss: Yeah,
you want get that here.

43
00:01:58.160 --> 00:02:00.300
[LAUGH] I know what you are talking about.

44
00:02:00.300 --> 00:02:03.624
I ran into that so many times.

45
00:02:03.624 --> 00:02:04.850
Yeah.

46
00:02:04.850 --> 00:02:07.405
&gt;&gt; Speaker 2: How do you
prevent the server from dying,

47
00:02:07.405 --> 00:02:11.055
you have means to handle everything,
but in the real life,

48
00:02:11.055 --> 00:02:11.840
it's-
&gt;&gt; Scott Moss: Yeah,

49
00:02:11.840 --> 00:02:14.510
so if you wanna know more
about that in detail,

50
00:02:14.510 --> 00:02:17.760
the course I taught yesterday
talks a little more about that.

51
00:02:17.760 --> 00:02:20.690
But the API course that I
taught talks about that a lot.

52
00:02:20.690 --> 00:02:24.030
But in short,
if you don't want the server to die,

53
00:02:24.030 --> 00:02:26.080
then you just gotta catch your errors,
all right?

54
00:02:26.080 --> 00:02:29.020
Cuz I have throw an error in here,
the whole process is gonna crash, and

55
00:02:29.020 --> 00:02:30.380
the server crashes.

56
00:02:30.380 --> 00:02:34.030
And then you gotta figure out,
did I want this error to cause a crash?

57
00:02:34.030 --> 00:02:35.970
Or did I not want this
error to cause a crash?

58
00:02:35.970 --> 00:02:38.390
If you are not authenticated and
that caused an error to my server,

59
00:02:38.390 --> 00:02:41.440
I don't want that to cause a crash, it's
you're fault you're not authenticated.

60
00:02:41.440 --> 00:02:43.090
&gt;&gt; Speaker 2: You may have
external tools to be,

61
00:02:43.090 --> 00:02:45.125
like I'm thinking of doing something to,

62
00:02:45.125 --> 00:02:49.100
double-checking that there's something
is still running or I don't know.

63
00:02:49.100 --> 00:02:51.310
&gt;&gt; Scott Moss: Yeah, so like a health
check service or something like that.

64
00:02:51.310 --> 00:02:53.320
Yeah, you can register a help check route.

65
00:02:53.320 --> 00:02:58.013
At the end of the day, you just
gotta be wary of what's coming in.

66
00:02:58.013 --> 00:03:01.011
Just like any other server, you just need
to prevent the errors from happening but

67
00:03:01.011 --> 00:03:03.380
most of the time,
you'll put something in front of this.

68
00:03:03.380 --> 00:03:07.810
So like if you did that you do like engine
x for reverse proxy or sometimes a caching

69
00:03:07.810 --> 00:03:11.200
layer or a CDN, but most times
there's something in front of it.

70
00:03:11.200 --> 00:03:14.120
So this thing is just focused on data,
which is Jason.

71
00:03:14.120 --> 00:03:18.523
At that point, if it's just Jason, you can
kinda have full control over it, yeah.

72
00:03:18.523 --> 00:03:22.711
&gt;&gt; Speaker 2: [INAUDIBLE] other things,
but I don't know if it's all related,

73
00:03:22.711 --> 00:03:27.357
I'm just wondering, [INAUDIBLE] back and
front end, I mean you can reuse

74
00:03:27.357 --> 00:03:30.529
the same things on the front-
&gt;&gt; Scott Moss: There you go, yeah,

75
00:03:30.529 --> 00:03:31.090
you can.

76
00:03:31.090 --> 00:03:35.590
So if you ever built an app that was
like isomorphic or universal, yeah,

77
00:03:35.590 --> 00:03:36.610
you were using the same code.

78
00:03:36.610 --> 00:03:38.220
Like you were literally-
&gt;&gt; Speaker 2: Well those are things you

79
00:03:38.220 --> 00:03:39.128
could use on the front, yeah.

80
00:03:39.128 --> 00:03:40.773
&gt;&gt; Scott Moss: Yeah,
you can use it on the front end,

81
00:03:40.773 --> 00:03:43.552
I mean you couldn't make an express
server on the front end, but

82
00:03:43.552 --> 00:03:45.732
a lot of this code,
you could use on the front end.

83
00:03:45.732 --> 00:03:48.720
I mean technically,
you could use Mongoose on her front.

84
00:03:48.720 --> 00:03:51.330
And actually they have examples
of how you can do it, Adam.

85
00:03:51.330 --> 00:03:53.050
Yeah, I know, right.

86
00:03:53.050 --> 00:03:57.041
Some people find theirself in the position
of where they're like type checking data

87
00:03:57.041 --> 00:04:00.522
on the front end and they love the schemas
of Mongoose that they use that for

88
00:04:00.522 --> 00:04:01.270
validations.

89
00:04:01.270 --> 00:04:03.130
&gt;&gt; Speaker 2: Because exactly,
the evaluations, it would be so

90
00:04:03.130 --> 00:04:05.460
nice to be able to have it back and
front, the same.

91
00:04:05.460 --> 00:04:06.400
&gt;&gt; Scott Moss: Yeah,
I've seen people do it.

92
00:04:06.400 --> 00:04:09.640
If you ever heard something called Meteor,
that's literally what that does.

93
00:04:09.640 --> 00:04:11.830
So yeah.
You had a question, Mark?

94
00:04:12.850 --> 00:04:17.460
&gt;&gt; Speaker 4: I was just gonna comment,
PWAs and offline.

95
00:04:17.460 --> 00:04:23.480
If you're gonna save all your notes
offline in a service order or something,

96
00:04:23.480 --> 00:04:31.450
and then when you connect, then you can
cut off the data to the API or whatever.

97
00:04:31.450 --> 00:04:33.240
A lot of people will do that,
so they'll mock.

98
00:04:34.360 --> 00:04:34.980
&gt;&gt; Scott Moss: Exactly.

99
00:04:34.980 --> 00:04:36.800
So he's talking about
progressive web apps,

100
00:04:36.800 --> 00:04:41.290
which are like the new mobile apps,
offline storage and all that stuff.

101
00:04:41.290 --> 00:04:45.220
So there's some advance techniques there,
where you will use a lot of that,

102
00:04:45.220 --> 00:04:48.560
a lot of those techniques on the front
end than you would on the back end for

103
00:04:48.560 --> 00:04:49.810
syncing the server and the data.

104
00:04:49.810 --> 00:04:52.579
So yeah, it all is just JavaScript.

105
00:04:52.579 --> 00:04:58.609
But the thing about is Node itself has
things that you can't do in the browser,

106
00:04:58.609 --> 00:04:59.279
that you can do-
&gt;&gt; Speaker 4: Yeah,

107
00:04:59.279 --> 00:05:01.254
I'm talking mostly about the models, and

108
00:05:01.254 --> 00:05:02.741
[INAUDIBLE]-
&gt;&gt; Scott Moss: Yep,

109
00:05:02.741 --> 00:05:05.132
you can do a lot of that if you want to.

