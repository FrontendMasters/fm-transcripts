WEBVTT

1
00:00:00.200 --> 00:00:04.220
&gt;&gt; Scott Moss: What I wanna do now is
walk through the next exercise, and

2
00:00:04.220 --> 00:00:06.680
what you're gonna be doing,
and how you can get started.

3
00:00:06.680 --> 00:00:09.306
So the next exercise is gonna
be in the queries folder, and

4
00:00:09.306 --> 00:00:11.296
there's gonna be a couple of things there.

5
00:00:11.296 --> 00:00:14.919
There's gonna be an author.js,
a post.js, and a queries.js.

6
00:00:14.919 --> 00:00:20.504
So if we read the README,
&gt;&gt; Scott Moss: Preview,

7
00:00:20.504 --> 00:00:26.142
in this exercise you will have to
add relationships between models.

8
00:00:26.142 --> 00:00:29.111
And then you will have to use those models
to create slightly more advanced queries

9
00:00:29.111 --> 00:00:30.110
than in the last exercise.

10
00:00:30.110 --> 00:00:31.870
So exactly what I just showed you.

11
00:00:31.870 --> 00:00:33.600
Building relationships
between these two models, and

12
00:00:33.600 --> 00:00:36.790
then writing some slightly
more advanced queries.

13
00:00:36.790 --> 00:00:39.697
So check out to the start branch
if you haven't already, and

14
00:00:39.697 --> 00:00:41.920
refer to this README for
how to run your tests.

15
00:00:41.920 --> 00:00:45.610
It is a new test command, so it's not
the same test command you ran last time.

16
00:00:45.610 --> 00:00:47.440
The only thing that's changed is the path.

17
00:00:47.440 --> 00:00:51.622
Again, this is so it filters out the tests
that aren't necessary for this exercise,

18
00:00:51.622 --> 00:00:54.040
so you only see tests for this exercise.

19
00:00:54.040 --> 00:00:57.840
If you run npm test, or Jest,
you'll just run tests for everything, and

20
00:00:57.840 --> 00:00:59.990
the future exercises will just fail.

21
00:00:59.990 --> 00:01:01.500
So this is just to help you,
scope you for this.

22
00:01:03.510 --> 00:01:06.890
So basically, yeah, the things you're
gonna be working on are the post models

23
00:01:06.890 --> 00:01:11.584
should have a one-to-one author field
that points to the author collection.

24
00:01:11.584 --> 00:01:16.080
So what that means is, this post field
should have an author field here

25
00:01:16.080 --> 00:01:17.980
that points to the author collection,
basically.

26
00:01:17.980 --> 00:01:19.270
And there should be one author.

27
00:01:19.270 --> 00:01:22.039
So a post should have one author,
basically.

28
00:01:22.039 --> 00:01:29.090
What else it's saying is,
&gt;&gt; Scott Moss: The post model should

29
00:01:29.090 --> 00:01:35.500
also have a one-to-many field called
similarPost field that points to posts.

30
00:01:35.500 --> 00:01:36.570
So that was really confusing, but

31
00:01:36.570 --> 00:01:40.000
basically what that means is there's
another field inside the post object

32
00:01:40.000 --> 00:01:45.160
that's called similarPost,
and it's an array of posts.

33
00:01:45.160 --> 00:01:47.484
It points to itself.

34
00:01:47.484 --> 00:01:50.463
Yeah, and I know we didn't talk about
that, so you might be thinking,

35
00:01:50.463 --> 00:01:51.366
what does that mean?

36
00:01:51.366 --> 00:01:55.379
Yeah, I promise you it's no different,
that's the trick.

37
00:01:55.379 --> 00:01:58.506
[LAUGH] So
that's like a one-to-many, right?

38
00:01:58.506 --> 00:02:00.869
So this one post can relate
to many other posts, so

39
00:02:00.869 --> 00:02:03.189
you're getting some type
of graph type things.

40
00:02:03.189 --> 00:02:06.241
If you're on a blog post at the bottom
it's like, here's some similar posts,

41
00:02:06.241 --> 00:02:07.301
that's what that's for.

42
00:02:09.602 --> 00:02:10.550
&gt;&gt; Scott Moss: So you got that.

43
00:02:10.550 --> 00:02:15.789
What else you'll be doing is, you're gonna
get all the post model tests to pass.

44
00:02:15.789 --> 00:02:18.370
So this test associated
with those schema changes.

45
00:02:18.370 --> 00:02:20.740
And then you need to get all
the query tests to pass.

46
00:02:20.740 --> 00:02:23.620
So if you go look at the queries,
it's very much like you did last time.

47
00:02:23.620 --> 00:02:26.590
There's some empty functions in here
that take some arguments with some

48
00:02:26.590 --> 00:02:30.140
very descriptive tests,
you gotta get the tests to pass.

49
00:02:30.140 --> 00:02:35.210
I only showed you about 60%, maybe 70%
of what you need to get these to work.

50
00:02:35.210 --> 00:02:38.100
As you get down the list,
they're gonna get more difficult.

51
00:02:38.100 --> 00:02:42.305
And yeah, I feel pretty confident that
you're gonna be able to figure it out,

52
00:02:42.305 --> 00:02:43.654
cuz you did it last time.

53
00:02:43.654 --> 00:02:46.599
So yeah,
you've just gotta get all these to pass.

54
00:02:46.599 --> 00:02:48.259
And again, you can check out the tests.

55
00:02:48.259 --> 00:02:51.453
They're in the local underscore
underscore test folder, in that folder.

56
00:02:51.453 --> 00:02:55.063
For instance,
queries.spec has very detailed tests, and

57
00:02:55.063 --> 00:02:57.977
I'll just run the tests right now so
you can see.

58
00:03:08.825 --> 00:03:10.312
&gt;&gt; Scott Moss: So
it looks like there's two suites.

59
00:03:10.312 --> 00:03:12.985
Eight failed,
which is exactly what we were expecting.

60
00:03:12.985 --> 00:03:17.581
And for instance the queries,
you can see it's testing a postByTitle,

61
00:03:17.581 --> 00:03:19.450
get a post by title.

62
00:03:19.450 --> 00:03:22.120
The next one is getting
a post by an author.

63
00:03:22.120 --> 00:03:25.350
The next one is finding all posts
in between two content lengths.

64
00:03:26.430 --> 00:03:32.020
The next one is find post by ID, and
populates everything on that post object.

65
00:03:32.020 --> 00:03:35.630
There's another one that says,
only selects fields given.

66
00:03:35.630 --> 00:03:38.088
Didn't really talk about that, but
I think you can figure it out.

67
00:03:38.088 --> 00:03:44.154
And this last one is, should be able
to add relationships to a post.

68
00:03:44.154 --> 00:03:46.869
So we only talked about querying for
them using arrays,

69
00:03:46.869 --> 00:03:48.788
now you're gonna have to add for them.

70
00:03:48.788 --> 00:03:51.573
And I can give you a little tip in
a minute what that looks like, but

71
00:03:51.573 --> 00:03:53.458
these two are gonna be pretty challenging.

72
00:03:53.458 --> 00:03:55.883
The rest of these,
we literally just did all of these.

73
00:03:55.883 --> 00:04:00.048
And then below are just gonna be
the tests for the actual schema changes.

74
00:04:04.796 --> 00:04:07.734
&gt;&gt; Speaker 2: That second to last one
is basically GraphQL, am I right?

75
00:04:07.734 --> 00:04:09.458
&gt;&gt; Scott Moss: [LAUGH] This one?

76
00:04:09.458 --> 00:04:11.994
&gt;&gt; Speaker 2: Like only give me
the fields that I'm asking for?

77
00:04:11.994 --> 00:04:14.832
&gt;&gt; Scott Moss: It works very
well with GraphQL, but yeah,

78
00:04:14.832 --> 00:04:17.217
I use this with GraphQL all the time.

79
00:04:17.217 --> 00:04:21.420
The answer is in the name,
I'll tell you that, select.

80
00:04:22.520 --> 00:04:26.160
But yeah, this allows you to do
what they call projection, right?

81
00:04:26.160 --> 00:04:27.440
You can project.

82
00:04:27.440 --> 00:04:29.818
You can tell the database to
only project these fields.

83
00:04:29.818 --> 00:04:32.926
A post might have all these fields,
but you only want these fields.

84
00:04:32.926 --> 00:04:35.988
So how do you tell the database to only
give you these fields, versus getting back

85
00:04:35.988 --> 00:04:38.890
all the fields and then using
JavaScript to only select the fields?

86
00:04:38.890 --> 00:04:41.470
That's very wasteful,
you can have the database do that for you.

87
00:04:41.470 --> 00:04:42.494
So that's what this is.

88
00:04:42.494 --> 00:04:43.350
Ask the database for

89
00:04:43.350 --> 00:04:46.470
only the minimum amount of thing that
you need, so that's what this does.

90
00:04:47.510 --> 00:04:49.325
So yeah,
it does work very well with GraphQL.

91
00:04:49.325 --> 00:04:53.111
You could take a GraphQL query that has
these fields, feed it straight to this,

92
00:04:53.111 --> 00:04:54.420
and only get those fields.

93
00:04:54.420 --> 00:04:55.320
And that's just perfect.

