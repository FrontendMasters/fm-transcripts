WEBVTT

1
00:00:00.130 --> 00:00:02.283
&gt;&gt; Scott Moss: Pagination, okay, so

2
00:00:02.283 --> 00:00:07.890
there's many ways to do pagination
in databases in general.

3
00:00:09.660 --> 00:00:14.353
The two approaches that I like
to use the best is either

4
00:00:14.353 --> 00:00:19.740
a cursor based pagination or
a skip limit based pagination.

5
00:00:19.740 --> 00:00:23.100
A cursor based pagination is basically,
you send back,

6
00:00:23.100 --> 00:00:26.060
let's say a list of 100 results.

7
00:00:26.060 --> 00:00:31.090
The last result in item is basically
the cursor, it's where you left off, so

8
00:00:31.090 --> 00:00:34.594
when you send the request back to
the next one, you start from that cursor.

9
00:00:34.594 --> 00:00:38.476
So some people use the indexes as the
cursor, some people make their own cursor.

10
00:00:38.476 --> 00:00:41.550
So they'll send back all the items,
they'll actually make a cursor, and

11
00:00:41.550 --> 00:00:44.930
a cursor is just an ID
that points to something.

12
00:00:44.930 --> 00:00:47.850
Something unique that you save,
this is like a bookmark in your book.

13
00:00:47.850 --> 00:00:50.150
It's like, here's where I left off,
and it can be anything.

14
00:00:50.150 --> 00:00:53.320
Something that you know is guaranteed
to allow you to figure out where

15
00:00:53.320 --> 00:00:54.410
you left off.

16
00:00:54.410 --> 00:00:56.692
An item in the results is
the best thing as a cursor,

17
00:00:56.692 --> 00:00:59.929
because if you sort your results and
you get the last thing in the result,

18
00:00:59.929 --> 00:01:02.556
you're guaranteed to start
off where you left off there.

19
00:01:02.556 --> 00:01:05.216
If everything is sorted,
which it should be in pagination.

20
00:01:05.216 --> 00:01:08.766
So that's why people use the last
item in the array for a cursor.

21
00:01:08.766 --> 00:01:09.610
So that's one way.

22
00:01:09.610 --> 00:01:11.900
The other way is just to skip a limit.

23
00:01:11.900 --> 00:01:16.546
So if you were gonna do that in Mongo,
skip a limit, guess what?

24
00:01:16.546 --> 00:01:22.080
They have a .skip and a .limit.

25
00:01:22.080 --> 00:01:24.040
So you can do pagination there.

26
00:01:24.040 --> 00:01:28.600
So if you were on page ten and
there's ten things on a page, I'm sorry,

27
00:01:28.600 --> 00:01:30.280
if you were on page two and
there was ten things on the page,

28
00:01:30.280 --> 00:01:35.230
you want to skip the first ten and you
want to limit ten, so yeah, pagination.

29
00:01:35.230 --> 00:01:36.670
So that would give you
the second page of ten.

30
00:01:39.600 --> 00:01:40.850
Yeah, super simple.

31
00:01:40.850 --> 00:01:43.950
If you want to do cursor based,
then that's a implementation detail.

32
00:01:43.950 --> 00:01:48.327
Are you saving the cursor in the database
somewhere, are you using the last value?

33
00:01:48.327 --> 00:01:50.600
Whatever you're doing you have to
grab it from the request object.

34
00:01:50.600 --> 00:01:53.820
And you're gonna have to,
find me the thing that I left off here.

35
00:01:53.820 --> 00:01:57.450
So you will do that, but with skipping
limit, yeah, you're pretty good,

36
00:01:57.450 --> 00:01:59.870
but don't forget,
you also have to do a sort.

37
00:01:59.870 --> 00:02:03.420
So you need to sort,
otherwise you will get random results.

38
00:02:03.420 --> 00:02:05.206
So you wanna sort by something.

39
00:02:05.206 --> 00:02:08.337
So whatever your sort field is, sort by
that, and then do your skipping limit, and

40
00:02:08.337 --> 00:02:09.383
then that's pagination.

