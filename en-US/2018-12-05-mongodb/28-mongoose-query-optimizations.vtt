WEBVTT

1
00:00:00.170 --> 00:00:01.144
&gt;&gt; Scott Moss: That's basically it.

2
00:00:01.144 --> 00:00:04.670
There's some optimizations we can do
here and I want to talk about those.

3
00:00:04.670 --> 00:00:10.101
So remember when I said all these crazy
return like Mongo or mongoose objects.

4
00:00:10.101 --> 00:00:13.492
We don't really need Mongoose objects
here, because we're not, the only time you

5
00:00:13.492 --> 00:00:16.787
ever need a Mongoose object is when you're
doing an operation on the object itself

6
00:00:16.787 --> 00:00:19.770
like dot remove, dot populate,
something you're doing on the object.

7
00:00:19.770 --> 00:00:21.940
We're not doing anything
to these objects and

8
00:00:21.940 --> 00:00:24.060
it takes Mongoose time
to build that object.

9
00:00:24.060 --> 00:00:27.020
So we can save Mongoose the time and
not build that object and

10
00:00:27.020 --> 00:00:28.490
just return us the pure JSON.

11
00:00:28.490 --> 00:00:32.780
So the way you would do that is
you would do .lean on the query.

12
00:00:32.780 --> 00:00:36.590
So lean means just give me the JSON,
give me the object, that's it.

13
00:00:36.590 --> 00:00:39.070
I don't want all these fancy properties,
just give me the JSON.

14
00:00:39.070 --> 00:00:41.270
That's very helpful,
because we're sending it back as JSON.

15
00:00:41.270 --> 00:00:42.487
So we just wanna do that.

16
00:00:42.487 --> 00:00:43.940
So .lean is good for that.

17
00:00:43.940 --> 00:00:46.390
If you didn't want to do .lean or
you couldn't.

18
00:00:46.390 --> 00:00:51.320
Like for example, down here on create you
can't do .lean, because it's not a query.

19
00:00:51.320 --> 00:00:56.360
The way you'd have to do that is
you would use the .2json method

20
00:00:56.360 --> 00:01:00.800
on the document itself,
which will convert it to a regular object.

21
00:01:00.800 --> 00:01:04.482
You can also do .2 object and
it will also do it, but

22
00:01:04.482 --> 00:01:09.340
those are optimizations you can do
just to get the regular JavaScript

23
00:01:09.340 --> 00:01:13.715
object representation of your
data versus a Mongoose model.

24
00:01:13.715 --> 00:01:15.209
And it does speed up database queries,

25
00:01:15.209 --> 00:01:17.076
especially if you're
looking at a lot of stuff.

26
00:01:20.551 --> 00:01:23.134
&gt;&gt; Scott Moss: So that's querying it,
and then, from there,

27
00:01:23.134 --> 00:01:27.167
all you have to do is just connect to
the database and then start your server.

28
00:01:27.167 --> 00:01:29.790
And then you've kinda got to figure
out what order do you wanna do that.

29
00:01:29.790 --> 00:01:32.450
Do you start your server first,
and then connect to your database?

30
00:01:32.450 --> 00:01:34.958
Do you connect your database
then start your server?

31
00:01:34.958 --> 00:01:36.710
There is no wrong or right answer there.

32
00:01:36.710 --> 00:01:40.030
It really kinda depends on
what it is that you wanna do.

33
00:01:40.030 --> 00:01:44.840
So in this example you might see me, right
now, I'm already connecting, so maybe now

34
00:01:44.840 --> 00:01:49.110
I'll start my server after I connect, so
maybe the database is already connected.

35
00:01:49.110 --> 00:01:54.820
So now, I'll start the server on my port
5,000 after the database is connected.

36
00:01:54.820 --> 00:01:56.260
Boom, now, I start the server.

37
00:01:56.260 --> 00:01:58.150
In Express that's how you start
a server it's that simple.

38
00:02:01.840 --> 00:02:06.689
The sweet thing about Mongoose is that
while the database is building up these

39
00:02:06.689 --> 00:02:08.789
models and collections for you.

40
00:02:08.789 --> 00:02:10.821
If you start running operations on them,

41
00:02:10.821 --> 00:02:13.618
they'll buffer them kinda
like an analytics tool does.

42
00:02:13.618 --> 00:02:17.824
If you ever use any analytics tool,
on a Friday, Google Analytics, or

43
00:02:17.824 --> 00:02:21.100
literally any analytics library ever.

44
00:02:21.100 --> 00:02:24.040
Before it loads up, if you start
issuing analytics commands and

45
00:02:24.040 --> 00:02:27.010
tracking commands to it,
it'll capture all the events in an array.

46
00:02:27.010 --> 00:02:30.633
And then when it finally loads up, it will
replay them in the order it happened, so

47
00:02:30.633 --> 00:02:31.588
it will buffer them.

48
00:02:31.588 --> 00:02:36.039
Mongo does the same thing so if you
start ushering commands in a database

49
00:02:36.039 --> 00:02:41.028
on the node model or whatever model you
have, before it's done initializing.

50
00:02:41.028 --> 00:02:44.216
It'll just buffer those commands and
replay them when it does connect,

51
00:02:44.216 --> 00:02:47.100
the problem with that is you might
have unexpected side effects.

52
00:02:47.100 --> 00:02:49.540
For instance, if you start
ushering commands like find and

53
00:02:49.540 --> 00:02:54.140
create before the indexes were built,
then you might have some code,

54
00:02:54.140 --> 00:02:57.620
some data that snuck in there,
that snuck past the indexes.

55
00:02:57.620 --> 00:03:00.297
So maybe you want to wait for
those indexes to be built, but

56
00:03:00.297 --> 00:03:02.934
indexes actually take a long
time to be built sometimes.

57
00:03:02.934 --> 00:03:06.824
So there's a lot of trade-offs that
you have to think about when to index,

58
00:03:06.824 --> 00:03:11.570
when to setup, what to wait for, it's
all very specific to your application.

59
00:03:11.570 --> 00:03:14.200
Most application you don't really
have to think about that, but

60
00:03:14.200 --> 00:03:16.070
when it gets like really
big production application,

61
00:03:16.070 --> 00:03:19.870
you really got to think about when do
I index, do I wait for the indexes,

62
00:03:19.870 --> 00:03:25.650
how do I go about doing this,
and it's all very case by case.

