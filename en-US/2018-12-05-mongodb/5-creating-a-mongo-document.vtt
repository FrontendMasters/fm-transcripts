WEBVTT

1
00:00:00.390 --> 00:00:03.930
&gt;&gt; Scott Moss: Now I'm going to show you
how to do some inserts and some queries.

2
00:00:05.621 --> 00:00:08.271
&gt;&gt; Scott Moss: So the first thing we want
to do is let's connect to the database

3
00:00:08.271 --> 00:00:10.900
first cuz we can't do
anything until we connect.

4
00:00:10.900 --> 00:00:14.910
Once we connect to the database then we'll
start actually adding stuff to the student

5
00:00:14.910 --> 00:00:17.736
collection, and then we'll see if
we can retrieve it, basic stuff.

6
00:00:17.736 --> 00:00:21.988
So what we'll do is we will run connect,
the function that we created.

7
00:00:21.988 --> 00:00:27.770
And remember, connect is just calling
Mongoose.connect, which returns a promise,

8
00:00:27.770 --> 00:00:33.650
so we should be able to just say .then and
that'll give us a connection.

9
00:00:33.650 --> 00:00:36.751
We probably won't need this connection,
but we'll just reference it here.

10
00:00:44.353 --> 00:00:47.279
&gt;&gt; Scott Moss: Cool, so
now that it connects to the database, and

11
00:00:47.279 --> 00:00:51.166
just to be safe we'll just catch it and
log it if something happens.

12
00:00:55.033 --> 00:00:55.670
&gt;&gt; Scott Moss: All right, so

13
00:00:55.670 --> 00:00:59.178
once we're in the scope of the database
being connected and we're good to go,

14
00:00:59.178 --> 00:01:02.350
we can actually start writing
operations against the database.

15
00:01:02.350 --> 00:01:06.390
So using the student model, what I want to
do is I just want to create one student.

16
00:01:06.390 --> 00:01:08.730
So there's a lot of ways you
can do that in Mongoose, but

17
00:01:08.730 --> 00:01:15.060
the preferred way is just to use
the create method on the actual model.

18
00:01:15.060 --> 00:01:22.453
So I can make a new student here by saying
student = and I'm going to await this.

19
00:01:22.453 --> 00:01:26.245
I'm just going to return a promise,
I'm going to use asynch await actually,

20
00:01:26.245 --> 00:01:27.690
it's just better.

21
00:01:27.690 --> 00:01:31.497
So I'm going to await this, and

22
00:01:31.497 --> 00:01:36.302
I'm going to say await Student.create

23
00:01:39.577 --> 00:01:41.130
&gt;&gt; Scott Moss: So by using Student.create,

24
00:01:41.130 --> 00:01:45.660
all I have to do is pass in an object that
fulfills the schema that I created above.

25
00:01:45.660 --> 00:01:48.130
And the schema above only has
a firstName whose type is String.

26
00:01:48.130 --> 00:01:50.540
There's no validations,
there's nothing else.

27
00:01:50.540 --> 00:01:53.440
So if I pass in an object
that fulfills that schema,

28
00:01:53.440 --> 00:01:55.660
then I should get back a new Student.

29
00:01:55.660 --> 00:01:58.680
Well if you look at our schema there's
no validations, there's nothing.

30
00:01:58.680 --> 00:02:00.550
I could actually just pass
in an empty object and

31
00:02:00.550 --> 00:02:01.960
this would actually create a student.

32
00:02:01.960 --> 00:02:04.100
It would have nothing on it other then ID.

33
00:02:04.100 --> 00:02:06.830
Cuz when you create
documents IDs are generated,

34
00:02:06.830 --> 00:02:09.000
but other than that there's
nothing else on it.

35
00:02:09.000 --> 00:02:12.360
And that's kind of where you can
see the flexibility of Mongo, so.

36
00:02:12.360 --> 00:02:18.760
But I'm just gonna ahead and
pass in the first name of Tim.

37
00:02:18.760 --> 00:02:19.947
Cool, and then we'll just log this.

38
00:02:26.914 --> 00:02:29.082
&gt;&gt; Scott Moss: So
now I connect to the database,

39
00:02:29.082 --> 00:02:33.585
I'm going to create my first student,
and then I'm going to log it.

40
00:02:33.585 --> 00:02:36.720
So, now in order to run this we
need to check for one thing.

41
00:02:36.720 --> 00:02:40.500
One, we need to make sure our server
is actually running, our Mongo server.

42
00:02:40.500 --> 00:02:43.116
The MongoDB instance itself
needs to be running.

43
00:02:43.116 --> 00:02:47.060
For me, cuzI install it with Brew,
I actually use this pretty cool thing.

44
00:02:47.060 --> 00:02:50.585
If you have Brew installed,
I use something called Launch Rocket.

45
00:02:50.585 --> 00:02:55.639
And Launch Rocket,
what it does is it scans your

46
00:02:55.639 --> 00:02:58.210
file in Brew and it shows you
all the services that you have,

47
00:02:58.210 --> 00:03:00.920
and then you could just start
them with the GUI like this.

48
00:03:00.920 --> 00:03:04.610
So I don't have to use
a terminal to go and start and

49
00:03:04.610 --> 00:03:07.250
stop Mongo, I just use this GUI and
it does it for me.

50
00:03:07.250 --> 00:03:09.560
This only works if you
install it with Brew.

51
00:03:09.560 --> 00:03:11.690
If you didn't install with Brew,
it's still the same thing.

52
00:03:11.690 --> 00:03:13.210
You just have to go in the terminal and

53
00:03:13.210 --> 00:03:17.330
run the same command that we had to run
before, which is just gonna be "mongod".

54
00:03:17.330 --> 00:03:20.730
And for me it's not gonna run
because it's already started.

55
00:03:20.730 --> 00:03:22.420
I'm already running it so
it's not gonna execute it.

56
00:03:22.420 --> 00:03:26.780
If you're not running it, this should just
hang and you should be running mongod.

57
00:03:26.780 --> 00:03:29.464
So make sure your Mongo server's
started by running mongod

58
00:03:36.432 --> 00:03:37.227
&gt;&gt; Scott Moss: Once that's good,

59
00:03:37.227 --> 00:03:39.970
then we just execute this
file with just basic node.

60
00:03:39.970 --> 00:03:41.870
So I don't know what you named
the file on your machine, but for

61
00:03:41.870 --> 00:03:45.720
me I just called it test js, so
I'm just going to execute this file,

62
00:03:45.720 --> 00:03:53.750
which is just for
me is going to be node test.js.

63
00:03:53.750 --> 00:03:57.642
You can see like I said you'll get some
deprecation warnings because of what's

64
00:03:57.642 --> 00:04:01.475
happening with Mongoose and Mongo right
now, so you can kind of ignore them for

65
00:04:01.475 --> 00:04:05.366
now cuz they're not gonna kill your app
but what actually happened here is there

66
00:04:05.366 --> 00:04:07.952
is my student, it was created,
and I logged it out.

67
00:04:07.952 --> 00:04:11.093
So let's look at this object and
kinda dissect it a little bit.

