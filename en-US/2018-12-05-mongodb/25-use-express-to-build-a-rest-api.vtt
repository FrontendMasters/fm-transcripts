WEBVTT

1
00:00:02.675 --> 00:00:07.737
&gt;&gt; Scott Moss: What we're gonna do now is,
at this point, you've pretty much

2
00:00:07.737 --> 00:00:12.815
learned a lot about Mongo, and
Mongoose, and using it in Node.

3
00:00:12.815 --> 00:00:16.219
And I could promise you, you know
enough to build and app in Mongo and

4
00:00:16.219 --> 00:00:18.147
Mongoose, you can get to that point.

5
00:00:18.147 --> 00:00:22.209
If it starts crapping the bed because it's
not scaling, that's a whole other thing.

6
00:00:22.209 --> 00:00:25.311
But you can definitely get to the point
where this thing can host over

7
00:00:25.311 --> 00:00:27.886
a million people, easily,
with what we just learned.

8
00:00:27.886 --> 00:00:29.230
So with that in mind,

9
00:00:29.230 --> 00:00:33.660
the next thing I wanna do is show you
how to actually use Mongo in an app.

10
00:00:33.660 --> 00:00:36.773
We've been doing all of these tests and
all these isolated queries and

11
00:00:36.773 --> 00:00:38.788
creations and
getting those things to pass.

12
00:00:38.788 --> 00:00:40.863
It's really cool,
you're just be like, okay, well,

13
00:00:40.863 --> 00:00:43.172
how do I actually use this inside
of an app, how does this work?

14
00:00:43.172 --> 00:00:47.249
And you'd be surprised, it's the same
thing, nothing really changes.

15
00:00:47.249 --> 00:00:52.809
So what I wanna do is, I wanna to spend
just a little bit of time of hooking up

16
00:00:52.809 --> 00:00:59.128
a basic Hello World app using Express, and
showing you how Mongo could tie into it.

17
00:00:59.128 --> 00:01:00.772
It could tie into it in so
many different ways,

18
00:01:00.772 --> 00:01:02.720
we're just showing you one
way of how that would work.

19
00:01:02.720 --> 00:01:08.672
And then just set you loose and have you
fix some of that on your own, sound good?

20
00:01:08.672 --> 00:01:11.569
All right, so what we're gonna do is, I'm
just gonna come in here to test.js again.

21
00:01:11.569 --> 00:01:16.070
I'm just gonna blow all this out,
since we don't really need it.

22
00:01:20.735 --> 00:01:25.577
&gt;&gt; Scott Moss: All right, so, well,
we're gonna create a small server.

23
00:01:25.577 --> 00:01:28.678
I'm not gonna talk too much about
the implementations of what I'm doing.

24
00:01:28.678 --> 00:01:30.390
It's gonna be small,
we're gonna do it all in one file.

25
00:01:30.390 --> 00:01:33.190
But what's important, is we're gonna
focus on the controllers of a server.

26
00:01:33.190 --> 00:01:35.160
And that's where the database
stuff is gonna happen.

27
00:01:35.160 --> 00:01:38.229
So that's where you're gonna be looking
into what's happening with Mongo and

28
00:01:38.229 --> 00:01:39.527
Mongoose, is the controllers.

29
00:01:39.527 --> 00:01:42.125
In the exercises, the only thing
you're focused on is the controllers.

30
00:01:42.125 --> 00:01:44.206
So you don't have to really worry
about the specifics of this.

31
00:01:44.206 --> 00:01:48.747
This is just a practical example of
how you actually use this database in

32
00:01:48.747 --> 00:01:51.176
an application today to get started.

33
00:01:51.176 --> 00:01:55.943
So I'm just gonna use a package called
express, which is a very good package,

34
00:01:55.943 --> 00:01:58.774
I use it all the time in
Node to create a server.

35
00:02:01.404 --> 00:02:03.564
&gt;&gt; Scott Moss: And express is pretty
simple, if you've used express before,

36
00:02:03.564 --> 00:02:04.452
you know what I'm doing.

37
00:02:04.452 --> 00:02:07.259
If you don't know what I'm doing, I'm just
gonna be talking about it as I go, but

38
00:02:07.259 --> 00:02:08.860
we're not gonna be diving
deep into wxpress.

39
00:02:08.860 --> 00:02:11.166
We have a course for
that already at FrontendMasters.

40
00:02:11.166 --> 00:02:14.142
Check that one out if you
don't know about express, and

41
00:02:14.142 --> 00:02:16.038
a little more deeper dive into it.

42
00:02:16.038 --> 00:02:18.930
But basically, all I'm gonna
do is I'm just going to create

43
00:02:18.930 --> 00:02:20.720
some routes that I can hit from an API.

44
00:02:20.720 --> 00:02:23.950
And then those routes are just
gonna run database operations

45
00:02:23.950 --> 00:02:25.320
when they're activated.

46
00:02:25.320 --> 00:02:27.190
That's it,
that's all express is gonna help me do.

47
00:02:29.360 --> 00:02:33.313
So the first thing I need to do
is just set up some middleware.

48
00:02:33.313 --> 00:02:36.665
Again, you won't have to do
any of this in your exercise.

49
00:02:36.665 --> 00:02:42.378
And middleware is very similar to what
you've been doing in Mongo itself.

50
00:02:42.378 --> 00:02:44.948
So this middleware is to just
help us debug some things.

51
00:02:50.564 --> 00:02:53.336
&gt;&gt; Scott Moss: So again,
if you wanna follow along, feel free,

52
00:02:53.336 --> 00:02:57.166
if you already know express,
this is probably not that big of a deal.

53
00:03:03.961 --> 00:03:05.216
&gt;&gt; Scott Moss: body-parser.

54
00:03:07.257 --> 00:03:12.090
&gt;&gt; Scott Moss: Okay, so let's set up some
logging, so we can see some logging here.

55
00:03:12.090 --> 00:03:15.074
And make sure we can actually
post some stuff here.

56
00:03:20.726 --> 00:03:25.254
&gt;&gt; Scott Moss: And then,
&gt;&gt; Scott Moss: Make sure this works.

57
00:03:30.156 --> 00:03:31.888
&gt;&gt; Scott Moss: Okay, so
now that I've got the middleware set up,

58
00:03:31.888 --> 00:03:33.580
now I'm just gonna add some routes.

59
00:03:33.580 --> 00:03:40.073
So let's say we have an API server that
gets notes, it's a note-taking app.

60
00:03:40.073 --> 00:03:44.040
And we wanna be able to get our notes,
and we wanna be able to create notes.

61
00:03:44.040 --> 00:03:47.062
So how would you do that in something
like Node or express, it's pretty simple.

62
00:03:47.062 --> 00:03:50.469
So in your server framework of choice,
we're using express,

63
00:03:50.469 --> 00:03:52.152
you would just define a route.

64
00:03:52.152 --> 00:03:56.191
So in our case, we're gonna say,
I wanna do a get request to,

65
00:03:56.191 --> 00:04:00.184
let's just say /notes, so
that would give me all my notes.

66
00:04:00.184 --> 00:04:04.475
And then from there,
I'm just gonna run a function.

67
00:04:04.475 --> 00:04:07.383
This function is literally everything
we've been doing all day today.

68
00:04:07.383 --> 00:04:09.470
This is where you're gonna
do your database stuff.

69
00:04:09.470 --> 00:04:12.785
The only difference is,
after you do your database stuff,

70
00:04:12.785 --> 00:04:15.516
you have to respond to the request,
that's it.

71
00:04:15.516 --> 00:04:18.990
So inside of here, this is where
you would use your Mongo stuff.

72
00:04:18.990 --> 00:04:20.874
So how you get in here
is totally up to you.

73
00:04:20.874 --> 00:04:24.118
Most of the time,
you'll have your models in another file.

74
00:04:24.118 --> 00:04:26.659
We're gonna do it in one file now,
but we'll have them in another file,

75
00:04:26.659 --> 00:04:28.171
which is like we do in
all of our exercises.

76
00:04:28.171 --> 00:04:32.070
And it will just require them, right,
then you'll start using them in here.

77
00:04:32.070 --> 00:04:35.289
Some people put their controllers,
this functions are called controllers,

78
00:04:35.289 --> 00:04:37.007
inside of their own file that use models.

79
00:04:37.007 --> 00:04:39.399
So there's many different patterns,
but for this example,

80
00:04:39.399 --> 00:04:40.695
just put everything in one file.

81
00:04:40.695 --> 00:04:44.120
So I'm just gonna make a new model
right now, I'm gonna call it a note.

82
00:04:44.120 --> 00:04:48.995
So I'm gonna say, I'm gonna make
a noteSchema = new mongooseSchema.

83
00:04:53.078 --> 00:05:00.068
&gt;&gt; Scott Moss: And a note just has a
title, that's a String, and it's required.

84
00:05:02.472 --> 00:05:03.248
&gt;&gt; Scott Moss: And it's unique.

85
00:05:06.724 --> 00:05:08.036
&gt;&gt; Scott Moss: And then it has a body.

86
00:05:10.334 --> 00:05:12.446
&gt;&gt; Scott Moss: Super simple note,
this type is a String.

87
00:05:18.620 --> 00:05:21.513
&gt;&gt; Scott Moss: And
we can put some validation like minlength,

88
00:05:21.513 --> 00:05:22.751
minlength of 10.

89
00:05:25.773 --> 00:05:27.888
&gt;&gt; Scott Moss: So that's our noteSchema,
now you can make a Note model.

90
00:05:27.888 --> 00:05:36.765
So I'll just call this Note =
mongoose.model('notes', noteSchema).

91
00:05:36.765 --> 00:05:39.449
Cool, so now we have our schema,
we have our model,

92
00:05:39.449 --> 00:05:41.221
we can start using this in our API.

93
00:05:41.221 --> 00:05:44.118
So I wanna be able to get all the notes,
so first thing I'll do is,

94
00:05:44.118 --> 00:05:46.088
I'll query the database for all the notes.

95
00:05:46.088 --> 00:05:49.934
So I'll make this async and

96
00:05:49.934 --> 00:05:54.951
I'll just say, notes equals await

97
00:05:54.951 --> 00:06:00.912
Note.find,
&gt;&gt; Scott Moss: All of them,

98
00:06:00.912 --> 00:06:03.330
cool, so I got all the notes.

99
00:06:03.330 --> 00:06:05.158
And then the rest is just
framework specific stuff.

100
00:06:05.158 --> 00:06:09.382
So for express,
I set the status code to 200, and

101
00:06:09.382 --> 00:06:14.002
then I send back some JSON as notes,
and then there we go.

102
00:06:14.002 --> 00:06:18.255
That's it, that's how you would create an
API server that grabs all the notes from

103
00:06:18.255 --> 00:06:20.464
a database using something like express.

104
00:06:20.464 --> 00:06:24.033
Pretty simple, I mean, this controller's
literally two lines of code.

105
00:06:24.033 --> 00:06:27.059
Yeah, in the real application,
you would have way more logic,

106
00:06:27.059 --> 00:06:28.472
like checking permissions.

107
00:06:28.472 --> 00:06:31.785
And you probably wouldn't check
the whole collection of notes and

108
00:06:31.785 --> 00:06:35.348
send them back, it'd be based off
some user ID or something like that.

109
00:06:35.348 --> 00:06:36.570
But you can see, it's pretty simple.

