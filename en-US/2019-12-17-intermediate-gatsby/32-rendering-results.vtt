WEBVTT

1
00:00:00.000 --> 00:00:03.525
&gt;&gt; Jason Lengstorf: The last thing we
wanna do here is actually add support for

2
00:00:03.525 --> 00:00:08.161
running queries against that brick and
mortar API and returning results.

3
00:00:08.161 --> 00:00:11.665
So to do that, we're gonna start out by
getting the dependencies that we need.

4
00:00:11.665 --> 00:00:13.383
We're gonna be using Apollo for this.

5
00:00:13.383 --> 00:00:19.405
Apollo is a GraphQL library
that has specific React setup.

6
00:00:19.405 --> 00:00:23.365
It's designed to be relatively
straightforward to set up and they just

7
00:00:23.365 --> 00:00:27.855
released hook support which is really,
really nice, so we're gonna use that.

8
00:00:27.855 --> 00:00:34.110
So we're gonna yarn add
gatsby-plugin-apollo and

9
00:00:34.110 --> 00:00:39.255
then we're gonna have some dependencies.

10
00:00:39.255 --> 00:00:45.616
So it needs the graphql tag and
then it needs apollo/react-common for

11
00:00:45.616 --> 00:00:52.189
some common pieces will use, and
then it needs apollo/react-hooks for

12
00:00:52.189 --> 00:00:55.375
the react hooks that we want to use.

13
00:00:57.741 --> 00:00:59.743
&gt;&gt; Jason Lengstorf: So
we'll get that installed.

14
00:00:59.743 --> 00:01:02.785
And while we're waiting for
that to install,

15
00:01:02.785 --> 00:01:06.455
I'm gonna create a new
component called results.js.

16
00:01:06.455 --> 00:01:11.975
And inside of it we're gonna
import react from react and

17
00:01:11.975 --> 00:01:18.676
we're also going to import
useQuery from apollo/react-hooks.

18
00:01:23.164 --> 00:01:28.640
&gt;&gt; Jason Lengstorf: And
we'll import the gql tag which is very

19
00:01:28.640 --> 00:01:34.754
different from the graphql
that Gatsby uses.

20
00:01:34.754 --> 00:01:39.394
And it's important to draw
a distinction here because the GQL tag

21
00:01:39.394 --> 00:01:43.119
stays in the code, so
this will ship to the browser.

22
00:01:43.119 --> 00:01:49.764
And what it's doing is it's telling
when you write a GraphQL query,

23
00:01:49.764 --> 00:01:55.151
and you use that template tag,
the GQL tag breaks it down

24
00:01:55.151 --> 00:02:00.437
into something that a GraphQL
server can understand.

25
00:02:00.437 --> 00:02:06.418
The Gatsby GraphQL gets removed at build
time, it's marking something as like,

26
00:02:06.418 --> 00:02:09.983
hey, you should process
this during the build.

27
00:02:09.983 --> 00:02:15.894
GQL from Apollo is telling Apollo how to
interpret a query that's been written and

28
00:02:15.894 --> 00:02:17.702
executed at build time.

29
00:02:17.702 --> 00:02:21.289
So that's why they're different things,
they perform different functions.

30
00:02:21.289 --> 00:02:24.714
But it can be a little confusing
especially if you need a GraphQL

31
00:02:24.714 --> 00:02:29.185
to understand exactly what each of those
pieces does and why they're necessary.

32
00:02:29.185 --> 00:02:33.486
But that's the very fast
version of why that's there.

33
00:02:33.486 --> 00:02:36.358
So the first thing I wanna do
is to set up my search query.

34
00:02:36.358 --> 00:02:39.288
And because we're doing
this on the client side,

35
00:02:39.288 --> 00:02:44.114
we can use any variables that we want, we
can do really anything that we want here.

36
00:02:44.114 --> 00:02:49.916
So this is the Rick and Morty API, and
we'll just start with where we want to be.

37
00:02:49.916 --> 00:02:52.462
So we want to do a query for characters.

38
00:02:52.462 --> 00:02:58.178
The Rick and Morty API uses
a different GraphQL Explorer.

39
00:02:58.178 --> 00:03:03.769
So it's a little bit different, it doesn't
have the the like click button this

40
00:03:03.769 --> 00:03:09.371
to build a query thing, which is kind of
a bummer, but it's still pretty nice.

41
00:03:09.371 --> 00:03:11.908
So we're gonna dig into the docs
over here and take a look.

42
00:03:11.908 --> 00:03:16.315
So we've got the characters query,
which is what I want and

43
00:03:16.315 --> 00:03:18.793
inside of it, I can set a filter.

44
00:03:18.793 --> 00:03:20.747
And the filter that I want
is gonna be on the name.

45
00:03:20.747 --> 00:03:26.318
So let's query on the name,
that's gonna be a string and

46
00:03:26.318 --> 00:03:32.830
then I want to filter on the name and
we'll use that name variable.

47
00:03:32.830 --> 00:03:36.696
So we may open up the query
variables down here and

48
00:03:36.696 --> 00:03:41.236
we'll say that the name is
gonna be let's do Rick first.

49
00:03:41.236 --> 00:03:50.574
Then,
&gt;&gt; Jason Lengstorf: Once we're in here,

50
00:03:50.574 --> 00:03:56.264
we can hit Option + Space to see
what the available fields are.

51
00:03:56.264 --> 00:03:59.708
So I'm gonna get results and
inside my results,

52
00:03:59.708 --> 00:04:03.994
Option + Space again, and
let's just get the name for now.

53
00:04:03.994 --> 00:04:08.412
So we should get everybody named Rick,
&gt;&gt; Jason Lengstorf: And

54
00:04:08.412 --> 00:04:11.343
we can see that there
are quite a few of them.

55
00:04:11.343 --> 00:04:17.655
And if we were to include the info,
we can see I think the count.

56
00:04:17.655 --> 00:04:22.021
So there are 73 characters in the show
named Rick, and we are getting

57
00:04:22.021 --> 00:04:27.362
a sub-selection, it's not all of them,
but for our purposes this is okay, right?

58
00:04:27.362 --> 00:04:32.259
So let's go ahead and
get all the stuff that we need.

59
00:04:32.259 --> 00:04:36.117
So I think for our purposes,
we're going to get an ID.

60
00:04:36.117 --> 00:04:41.808
We want the name, let's get the species,
will get the origin name,

61
00:04:41.808 --> 00:04:48.105
and we'll get the location, and
we'll do the name and dimension for that.

62
00:04:48.105 --> 00:04:49.695
And then finally, let's grab the image.

63
00:04:51.675 --> 00:04:55.113
&gt;&gt; Jason Lengstorf: Okay, and so this
will give us everything that we're gonna

64
00:04:55.113 --> 00:04:59.787
need to show some results back where they
are, where they came from, name and and

65
00:04:59.787 --> 00:05:02.220
image of them so
that we can show that off.

66
00:05:02.220 --> 00:05:08.168
So knowing that, we can take this query
and we can drop it straight in here.

67
00:05:12.764 --> 00:05:16.945
&gt;&gt; Jason Lengstorf: And let's make
this a little bit smaller, okay?

68
00:05:16.945 --> 00:05:20.692
So I've got my full query up here.

69
00:05:20.692 --> 00:05:24.893
And then,
&gt;&gt; Jason Lengstorf: I'm going to set up my

70
00:05:24.893 --> 00:05:25.428
component.

71
00:05:25.428 --> 00:05:30.862
So my component is gonna be called Results
and it's going to accept a name prop.

72
00:05:30.862 --> 00:05:33.477
And that name prop is gonna be the result

73
00:05:33.477 --> 00:05:36.735
of the query that we're
gonna get out of the URL.

74
00:05:36.735 --> 00:05:41.765
So let's first, fire off the query.

75
00:05:41.765 --> 00:05:47.206
So the way that useQuery works
is we send in the query itself,

76
00:05:47.206 --> 00:05:53.515
which we've defined up here, and
then we can parse in any variables.

77
00:05:53.515 --> 00:06:00.403
So the variables that I'm gonna pass in
are just the name, so this goes into here.

78
00:06:00.403 --> 00:06:03.761
And what we're gonna get out
of it is a loading prop.

79
00:06:03.761 --> 00:06:07.982
So when the query is executing,
loading will be true.

80
00:06:07.982 --> 00:06:11.678
If anything goes wrong,
we're gonna get an error.

81
00:06:11.678 --> 00:06:16.507
And if everything goes well,
we'll get data.

82
00:06:16.507 --> 00:06:21.625
Once we have that, we're gonna check
to see if we've got results and

83
00:06:21.625 --> 00:06:25.081
we can do that by just
saying if there's data.

84
00:06:25.081 --> 00:06:30.825
And then we're gonna do a little
bit of kind of like tricky stuff.

85
00:06:30.825 --> 00:06:34.498
So we'll say data characters length and
if that fails,

86
00:06:34.498 --> 00:06:39.734
we're gonna just skip over to an empty
array, and then we'll set the length and

87
00:06:39.734 --> 00:06:44.050
say if the length is greater than 0,
that means we have results.

88
00:06:44.050 --> 00:06:49.280
So basically, if the data comes back
empty, we will show a no results.

89
00:06:49.280 --> 00:06:54.262
Or if if for some reason we don't
get a characters prop at all

90
00:06:54.262 --> 00:06:58.959
will default to an empty array and
then show no results.

91
00:06:58.959 --> 00:07:03.508
Once we know about that,
we can return our object.

92
00:07:03.508 --> 00:07:08.557
And so for this one, for the sake of
making it not impossible to read,

93
00:07:08.557 --> 00:07:11.620
we'll do a little bit of inline styling.

94
00:07:11.620 --> 00:07:15.536
So we're gonna set up
a max width of 500 and

95
00:07:15.536 --> 00:07:20.174
then we'll set up a margin
of 50 pixels at the top and

96
00:07:20.174 --> 00:07:23.384
bottom and center it left and right.

97
00:07:25.606 --> 00:07:30.494
&gt;&gt; Jason Lengstorf: And then we'll say
that these are our search results, and

98
00:07:30.494 --> 00:07:33.303
let's see, if we're loading.

99
00:07:33.303 --> 00:07:39.397
We're going to show just a paragraph
that says loading results.

100
00:07:39.397 --> 00:07:45.407
If there is an error,
we will show a pre-tag and

101
00:07:45.407 --> 00:07:51.134
we are just gonna have
the overflowX scroll.

102
00:07:51.134 --> 00:07:56.088
So if we get a long error,
it doesn't blow our layout.

103
00:07:56.088 --> 00:08:00.198
And then we will just stringify the error.

104
00:08:00.198 --> 00:08:05.461
So will do JSON.stringify
passing the error.

105
00:08:05.461 --> 00:08:07.128
That's stringfies a function,

106
00:08:07.128 --> 00:08:11.292
so we'll pass in the error as the first
argument, null is the second argument, and

107
00:08:11.292 --> 00:08:15.238
2 as the number of spaces to break the
object up and prettify it up a little bit.

108
00:08:18.244 --> 00:08:20.333
&gt;&gt; Jason Lengstorf: And
assuming we don't have an error,

109
00:08:20.333 --> 00:08:22.497
we're gonna check if we have results.

110
00:08:22.497 --> 00:08:28.782
And if we have results we wil,
&gt;&gt; Jason Lengstorf: Map

111
00:08:28.782 --> 00:08:33.751
over our characters, so
data.characters.results.map,

112
00:08:33.751 --> 00:08:36.193
that'll give us a character.

113
00:08:36.193 --> 00:08:40.535
And we can set up a div,
and that'll have a key

114
00:08:40.535 --> 00:08:44.894
of the character ID that we queried for
that.

115
00:08:44.894 --> 00:08:50.590
So we can just use anything that comes
back here the ID, names spaces, etc.

116
00:08:50.590 --> 00:08:54.357
Set up a little bit of styling on this,
so display flex so

117
00:08:54.357 --> 00:08:59.343
that we can kind of show things in
the line as opposed to a big gnarly stack.

118
00:08:59.343 --> 00:09:01.554
And then we'll set a little
bit of margin bottom so

119
00:09:01.554 --> 00:09:03.354
that things aren't smashed together.

120
00:09:07.388 --> 00:09:11.534
&gt;&gt; Jason Lengstorf: Okay, then,
&gt;&gt; Jason Lengstorf: We've got that div.

121
00:09:15.495 --> 00:09:20.544
&gt;&gt; Jason Lengstorf: Right, and
then down here we need to figure out if

122
00:09:20.544 --> 00:09:25.356
its not loading and
it doesn't have results.

123
00:09:25.356 --> 00:09:29.687
So if it doesn't have results and
it's not loading,

124
00:09:29.687 --> 00:09:33.921
we're going to show just
a basic no characters found

125
00:09:33.921 --> 00:09:39.442
matching,
&gt;&gt; Jason Lengstorf: Name.

126
00:09:42.664 --> 00:09:45.550
&gt;&gt; Jason Lengstorf: So assuming we
get in here we've got our div and

127
00:09:45.550 --> 00:09:47.771
we want to show off what we've got.

128
00:09:47.771 --> 00:09:52.390
So let's set up a div to hold the image.

129
00:09:52.390 --> 00:09:56.946
And this is getting a little divy,
I think this could be cleaned up but

130
00:09:56.946 --> 00:10:01.349
again we're not going for
design awards here, we're going for,

131
00:10:01.349 --> 00:10:04.270
showing how the client
side app would work.

132
00:10:04.270 --> 00:10:11.456
So if you go to do this,
please don't make your markup this ugly.

133
00:10:11.456 --> 00:10:15.839
Let's go and do an image,
&gt;&gt; Jason Lengstorf: And inside of our

134
00:10:15.839 --> 00:10:21.843
image we need source and we're gonna
use the character.image which is a URL.

135
00:10:21.843 --> 00:10:27.261
Then, we're gonna use the alt,
which is the character's name,

136
00:10:27.261 --> 00:10:32.192
and a little bit of style,
we will set it to be 100% wide,

137
00:10:32.192 --> 00:10:34.937
so just fill this div basically.

138
00:10:37.668 --> 00:10:42.105
&gt;&gt; Jason Lengstorf: And next to that,
because we're using flexbox, we will,

139
00:10:45.485 --> 00:10:48.010
&gt;&gt; Jason Lengstorf: Set up an h3 to show,

140
00:10:52.408 --> 00:10:54.217
&gt;&gt; Jason Lengstorf: The name.

141
00:10:54.217 --> 00:10:58.845
So we'll say character.name, and

142
00:10:58.845 --> 00:11:06.159
let's make the font size 20 and
set the margin top to 0 so

143
00:11:06.159 --> 00:11:11.098
that it's not blowing out the layout.

144
00:11:11.098 --> 00:11:15.904
And then we'll set up a Species and

145
00:11:15.904 --> 00:11:21.382
use the character.species for that.

146
00:11:21.382 --> 00:11:26.138
And then let's duplicate this and
say Origin and

147
00:11:26.138 --> 00:11:30.433
we'll use the character.origin.name.

148
00:11:30.433 --> 00:11:35.389
And I think that's probably good, so
let's see species and origin name, so

149
00:11:35.389 --> 00:11:39.750
we're actually not using the location so
we can just drop that out.

150
00:11:39.750 --> 00:11:48.021
So let's export this result,
&gt;&gt; Jason Lengstorf: Default results, okay?

