WEBVTT

1
00:00:00.170 --> 00:00:03.770
&gt;&gt; Jason Lengstorf: So the major benefit
of using themes in Gatsby versus just

2
00:00:03.770 --> 00:00:07.200
doing a site individually is
that when you create a theme,

3
00:00:07.200 --> 00:00:10.070
you're able to package up
that logic in a sharable way.

4
00:00:10.070 --> 00:00:14.327
So in the theme that we're gonna create
today, we're gonna add support for

5
00:00:14.327 --> 00:00:15.334
writing up docs.

6
00:00:15.334 --> 00:00:20.152
And in those docs,
we might wanna use that in multiple sites.

7
00:00:20.152 --> 00:00:24.572
Maybe if you work in an agency, this is
gonna be a common pattern where you've

8
00:00:24.572 --> 00:00:28.530
got clients that need similar but
slightly different things.

9
00:00:28.530 --> 00:00:31.940
You can package up all the common
functionality into a theme, and

10
00:00:31.940 --> 00:00:33.810
then share that in a reusable way.

11
00:00:34.820 --> 00:00:39.070
And a major benefit here over using
a standard boilerplate is that

12
00:00:39.070 --> 00:00:42.770
when you're using a theme,
that theme is an NPM package.

13
00:00:42.770 --> 00:00:46.410
When you use a boilerplate,
you're cloning a repo.

14
00:00:46.410 --> 00:00:49.380
As soon as you clone a repo,
that is now your responsibility.

15
00:00:49.380 --> 00:00:53.540
You've fully opted-in to maintaining
all of the code in that boilerplate.

16
00:00:53.540 --> 00:00:58.060
If things happen upstream, you would have
to then manually import those changes.

17
00:00:58.060 --> 00:01:01.100
You would have to look at the migration
docs, figure out what changed.

18
00:01:01.100 --> 00:01:04.620
And then, port those changes over
into each usage of that boilerplate.

19
00:01:04.620 --> 00:01:05.640
That's a huge pain.

20
00:01:05.640 --> 00:01:09.140
And if you've got a lot of sites, if
you're working on, say, a client site, and

21
00:01:09.140 --> 00:01:11.620
they've got a suite of
15 different properties,

22
00:01:11.620 --> 00:01:15.620
the time investment to do
an upgrade like that is not small.

23
00:01:15.620 --> 00:01:19.790
So with a theme, it becomes a package,
just an NPM installed package.

24
00:01:19.790 --> 00:01:21.330
So to get those upstream updates,

25
00:01:21.330 --> 00:01:26.810
all you have to do is NPM install the
theme at latest and you get those updates.

26
00:01:26.810 --> 00:01:31.855
So now, you can set up something like
dependabot to automatically keep

27
00:01:31.855 --> 00:01:37.084
your sites up to date with whatever
the upstream latest best practice is.

28
00:01:37.084 --> 00:01:41.951
Another benefit of using themes versus
just building it all out directly is

29
00:01:41.951 --> 00:01:46.664
that because themes are composable
you can break down sites into small,

30
00:01:46.664 --> 00:01:51.687
logically grouped sets of functionality
that handle one thing really well in

31
00:01:51.687 --> 00:01:56.900
a really maintainable way, which then
makes that sharing much more easy.

32
00:01:56.900 --> 00:02:01.035
If you built a site, and
that site has a blog and e-commerce and

33
00:02:01.035 --> 00:02:03.923
a marketing page and
an email capture form,

34
00:02:03.923 --> 00:02:08.838
those are four distinct jobs that if
they were broken into themes, then any

35
00:02:08.838 --> 00:02:13.859
site that needs a contact form, you can
just drop in the contact form theme.

36
00:02:13.859 --> 00:02:16.462
Any site that needs a blog,
you drop in the blog theme.

37
00:02:16.462 --> 00:02:21.512
And your sites become more like
Lego block assembly rather than

38
00:02:21.512 --> 00:02:27.240
looking at previous work and
copy pasting out the pieces that you need.

39
00:02:27.240 --> 00:02:31.854
So this is gonna give you all the same
benefits of building it as a site,

40
00:02:31.854 --> 00:02:36.626
but with an added layer of benefits of
upstream updates and the ability to

41
00:02:36.626 --> 00:02:41.738
compose smaller units of code together
much more quickly and maintainably.

42
00:02:43.133 --> 00:02:45.990
&gt;&gt; Speaker 2: So
Gatsby themes is not just about the UI,

43
00:02:45.990 --> 00:02:49.430
it's actually the functionality as well?

44
00:02:49.430 --> 00:02:52.680
&gt;&gt; Jason Lengstorf: Gatsby
themes is UI and functionality.

45
00:02:52.680 --> 00:02:57.937
So a Gatsby theme is effectively
a fully functioning Gatsby site.

46
00:02:57.937 --> 00:03:01.172
The only difference is that it
accepts configuration options and

47
00:03:01.172 --> 00:03:05.210
needs to be installed as a package,
as opposed to running standalone.

48
00:03:05.210 --> 00:03:10.012
But a lot of Gatsby sites these days,
if you look at the default blog theme

49
00:03:10.012 --> 00:03:14.500
starter, what it is is just an empty
folder with a content folder for

50
00:03:14.500 --> 00:03:17.916
blogs and
a Gatsby config that installs the theme.

51
00:03:17.916 --> 00:03:21.947
And the rest of everything else in
it is handled in the theme itself.

52
00:03:25.690 --> 00:03:28.230
&gt;&gt; Jason Lengstorf: It’s anything that
you can do with a Gatsby site, but

53
00:03:28.230 --> 00:03:32.830
packaged up in such a way that it’s
configurable, reusable, and shareable.

54
00:03:32.830 --> 00:03:36.273
So ranging from theme to
the underlying data manipulation and

55
00:03:36.273 --> 00:03:40.590
schema customization and all the things
that you would do on a standard site.

56
00:03:41.627 --> 00:03:44.800
&gt;&gt; Speaker 3: Is there a difference
between a plugin and a theme, or

57
00:03:44.800 --> 00:03:47.491
things that one can do
that the other can't?

58
00:03:48.625 --> 00:03:50.750
&gt;&gt; Jason Lengstorf: For the most part, no.

59
00:03:50.750 --> 00:03:55.605
The one major difference is that themes,
when they use the Gatsby theme tag,

60
00:03:55.605 --> 00:04:01.520
opt-in to component shadowing behavior,
and they have a Gatsby config.

61
00:04:01.520 --> 00:04:06.100
So really, a Gatsby theme is
a plug-in with a Gatsby config in it.

62
00:04:06.100 --> 00:04:10.850
And anything else is a plug-in
without a Gatsby config in it.

63
00:04:10.850 --> 00:04:12.770
That's the major difference.

64
00:04:12.770 --> 00:04:15.520
And then, the naming is required because
that's how Gatsby identifies that

65
00:04:15.520 --> 00:04:16.970
a theme should be handled differently.

66
00:04:19.213 --> 00:04:23.357
&gt;&gt; Speaker 2: So is the concept of
a boilerplate gonna go away pretty much

67
00:04:23.357 --> 00:04:23.870
then?

68
00:04:23.870 --> 00:04:25.662
&gt;&gt; Jason Lengstorf: Inside
the Gatsby world,

69
00:04:25.662 --> 00:04:29.060
I would expect that it
will be de emphasized.

70
00:04:29.060 --> 00:04:35.080
I mean, I don't think anything ever really
goes away, because it's an open ecosystem.

71
00:04:35.080 --> 00:04:36.160
People have preferences and

72
00:04:36.160 --> 00:04:38.371
people are gonna do things
the way they're gonna do them.

73
00:04:38.371 --> 00:04:42.880
In my experience, I have completely
stopped using boilerplates because

74
00:04:42.880 --> 00:04:45.071
themes function as boilerplates.

75
00:04:45.071 --> 00:04:47.884
But they add an additional layer
of benefits that I, to me,

76
00:04:47.884 --> 00:04:50.607
it just doesn't make sense
to do a boilerplate anymore.

