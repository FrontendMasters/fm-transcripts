WEBVTT

1
00:00:00.170 --> 00:00:06.660
Once we have the template, we can
define a component to use the query.

2
00:00:06.660 --> 00:00:10.400
And so that is gonna get
the result of this query as data.

3
00:00:10.400 --> 00:00:13.746
So the way that Gatsby works during
the build is it's gonna look for

4
00:00:13.746 --> 00:00:14.910
this exported query.

5
00:00:14.910 --> 00:00:17.380
And it will actually executed,

6
00:00:17.380 --> 00:00:22.480
get the data and then inject that data
as a data prop to this component.

7
00:00:23.750 --> 00:00:27.250
This is all done during the build so
there is kind of a rewrite process.

8
00:00:27.250 --> 00:00:29.750
Again, another reason to keep
these templates separate so

9
00:00:29.750 --> 00:00:31.540
that it's clear that they
get special handling.

10
00:00:32.980 --> 00:00:37.690
That data then is going
to be put somewhere and

11
00:00:37.690 --> 00:00:43.110
what I like to do is just pass it directly
to a component that we'll use it.

12
00:00:43.110 --> 00:00:47.772
And so I'm just gonna do that,
I'm gonna go

13
00:00:47.772 --> 00:00:52.569
straight into the data.docsPage can go in.

14
00:00:52.569 --> 00:00:58.000
And now we have to define that but
first, let's export this DocsPage.

15
00:00:59.790 --> 00:01:02.870
Okay, so we're gonna need to go get this,
this DocsPage.

16
00:01:02.870 --> 00:01:05.360
I'm gonna put it in components.

17
00:01:05.360 --> 00:01:08.470
We'll call it doc's-page.js and

18
00:01:08.470 --> 00:01:12.320
inside of this one we're going
to import react from react.

19
00:01:12.320 --> 00:01:15.190
We will import the MDXRenderer.

20
00:01:16.330 --> 00:01:22.620
And the MDXRenderer is used to actually
make this into something readable.

21
00:01:22.620 --> 00:01:27.402
So all this code that MDX generates,
we wanna be able to use it,

22
00:01:27.402 --> 00:01:31.119
and the MDXRenderer makes
that possible for us.

23
00:01:33.091 --> 00:01:41.799
I'm also gonna pull in the Layout
that we used, so let me get that.

24
00:01:41.799 --> 00:01:46.143
And then, we can do a DocsPage component.

25
00:01:49.793 --> 00:01:55.655
We will then put this layout in here,
do an h1,

26
00:01:55.655 --> 00:02:01.665
do page title, and
then put in the MDXRenderer,

27
00:02:01.665 --> 00:02:05.930
page dot body goes inside of that.

28
00:02:07.050 --> 00:02:13.600
And then we'll put a little note at the
bottom that says this page was updated.

29
00:02:13.600 --> 00:02:16.982
Whenever the updated value is,
and again, it's plain language,

30
00:02:16.982 --> 00:02:19.310
so we can just drop it
right into the sentence.

31
00:02:20.390 --> 00:02:23.650
So we're gonna export default Doc'sPage.

32
00:02:23.650 --> 00:02:27.820
And then I can save that,
come back here and let's Import this so

33
00:02:27.820 --> 00:02:28.520
that we can use it.

34
00:02:30.290 --> 00:02:35.479
Import Doc'sPage from components,
Doc'sPage.

35
00:02:39.090 --> 00:02:43.081
And now, if I stop and restart, or what
I need to, before we stop and restart,

36
00:02:43.081 --> 00:02:45.210
we need to actually use these templates.

37
00:02:45.210 --> 00:02:52.700
So we've defined them, but now we
need to run the Create Page API hook.

38
00:02:52.700 --> 00:02:57.420
So back in our gatsby-node,
all the way down at the bottom here.

39
00:02:57.420 --> 00:03:04.320
We're going to use exports, createPages.

40
00:03:04.320 --> 00:03:06.410
And because we're gonna make a request for

41
00:03:06.410 --> 00:03:08.610
data, we're gonna mark
this as an async function.

42
00:03:11.420 --> 00:03:14.340
And the createPages API
gives us a few things.

43
00:03:14.340 --> 00:03:18.532
The first is an actions object that
gives us a bunch of helper functions.

44
00:03:18.532 --> 00:03:22.260
A graphqL function that'll
allow us to get some data.

45
00:03:22.260 --> 00:03:27.519
And then we also have a reporter in case
we wanna output anything to the console,

46
00:03:27.519 --> 00:03:32.007
and then the second argument is
gonna be the options from the theme.

47
00:03:32.007 --> 00:03:36.970
So, We're not really using the options.

48
00:03:38.070 --> 00:03:41.880
So I'm gonna just skip that actually.

49
00:03:44.220 --> 00:03:47.050
So we're gonna get
an object full of actions,

50
00:03:47.050 --> 00:03:50.410
the graphqL function and
a reporter function.

51
00:03:51.840 --> 00:03:56.440
And then inside,
we start out by getting our data.

52
00:03:56.440 --> 00:03:58.830
So we want to do a graphql query.

53
00:03:58.830 --> 00:04:03.300
And inside the createPages graphql
is a function, not a template tag.

54
00:04:03.300 --> 00:04:06.790
That's a little bit of
a gotcha at the beginning.

55
00:04:07.910 --> 00:04:09.839
And inside I'm gonna
get all the DocsPages.

56
00:04:11.100 --> 00:04:14.950
And I want all the nodes, and
all I need in here is the id and the path.

57
00:04:14.950 --> 00:04:19.890
So the id I'm gonna use to
pass in this context and

58
00:04:19.890 --> 00:04:25.085
the path I'm gonna use as a definition for
the URL.

59
00:04:27.075 --> 00:04:28.629
So we've awaited that result.

60
00:04:29.670 --> 00:04:31.730
Then we're just gonna do a quick
check to see if anything wrong.

61
00:04:31.730 --> 00:04:35.980
So if result.errors, we will panic.

62
00:04:37.310 --> 00:04:42.282
So we'll do reporter.panic and we'll say,

63
00:04:42.282 --> 00:04:48.805
error loading docs and
just pass in the errors.

64
00:04:48.805 --> 00:04:51.600
If we get through that,
we can assume everything's okay.

65
00:04:51.600 --> 00:04:55.950
So we'll just grab out our pages
by diving into our data here.

66
00:04:55.950 --> 00:05:02.330
So we'll do result.data.allDocsPage.nodes.

67
00:05:02.330 --> 00:05:04.480
And then once we've got those pages,
we can loop through them so

68
00:05:04.480 --> 00:05:08.370
we'll do a forEach because
we're not returning anything.

69
00:05:08.370 --> 00:05:13.420
And forEach page, we're going to
run an action called createPage.

70
00:05:13.420 --> 00:05:17.690
And that accepts an object which
has two required fields and

71
00:05:17.690 --> 00:05:19.510
one optional field that we're gonna use.

72
00:05:19.510 --> 00:05:22.130
The first required field is path.

73
00:05:22.130 --> 00:05:24.420
And for that,
we're gonna use the page path.

74
00:05:24.420 --> 00:05:29.350
And that's again what we
defined using the base path,

75
00:05:29.350 --> 00:05:30.850
the relative directory and
then the file name.

76
00:05:32.610 --> 00:05:34.300
Next, we need to give it a component.

77
00:05:35.440 --> 00:05:38.960
And that component is gonna be
the template that we just defined.

78
00:05:38.960 --> 00:05:44.110
So we'll do a require.resolve,
go into our source templates, and

79
00:05:44.110 --> 00:05:46.150
the docs-page template.

80
00:05:46.150 --> 00:05:48.550
And finally, we need to set some context.

81
00:05:48.550 --> 00:05:49.700
And the context is an object.

82
00:05:49.700 --> 00:05:51.750
This is arbitrary,
we can put whatever we want.

83
00:05:51.750 --> 00:05:57.898
There are a few reserved fields, but
for the most part, it should be okay.

84
00:05:57.898 --> 00:06:01.880
In the context you'll you'll get a big
warning if you use a reserved field.

85
00:06:01.880 --> 00:06:05.830
So in the context,
I'm gonna pass in this pageID and

86
00:06:05.830 --> 00:06:10.130
I want that to be the page.id.

87
00:06:10.130 --> 00:06:15.120
And whatever name I give it now, it will
become available as a graph qL variable.

88
00:06:15.120 --> 00:06:19.255
So we defined in here pageID.

89
00:06:20.360 --> 00:06:24.636
So by defining pageID in the context,
we're able to access it.

90
00:06:26.340 --> 00:06:31.471
And once we've done this, we are fingers
crossed, ready to rock and roll.

91
00:06:31.471 --> 00:06:33.919
So let's build some pages.

92
00:06:37.054 --> 00:06:38.590
That's promising, we're getting two pages.

93
00:06:39.990 --> 00:06:40.590
Let's give it a look.

94
00:06:42.200 --> 00:06:43.170
Hey, there we go.

95
00:06:43.170 --> 00:06:46.115
So now we've got our Home page.

96
00:06:46.115 --> 00:06:48.230
It shows the MDX content.

97
00:06:48.230 --> 00:06:52.000
It shows our layout, and
it shows us when the page was updated.

98
00:06:52.000 --> 00:06:56.820
So that means that we've
got data coming in

99
00:06:56.820 --> 00:07:00.180
getting customized through Gatsby's
data layer and now it's on the screen.

100
00:07:00.180 --> 00:07:01.500
So this is pretty powerful, right?

101
00:07:01.500 --> 00:07:03.280
We're in pretty good shape here.

102
00:07:03.280 --> 00:07:10.130
So our next move here is going to be to
make this look slightly less terrible.

103
00:07:10.130 --> 00:07:12.080
And in a way that's more extensible.

104
00:07:12.080 --> 00:07:13.480
What's up?

105
00:07:13.480 --> 00:07:17.760
&gt;&gt; Why did it put up two pages I
thought it was only the one MDX file.

106
00:07:17.760 --> 00:07:21.730
&gt;&gt; So there's only the one MDX file, but
Gatsby will always give you a 404 page.

107
00:07:22.980 --> 00:07:26.670
So if we go to a page that
I have it disabled if

108
00:07:26.670 --> 00:07:30.100
we go to a page that doesn't exist,
so let me boot this up.

109
00:07:33.000 --> 00:07:36.590
It will also give us this 404 page.

110
00:07:36.590 --> 00:07:41.750
So this is the page that's being
referenced as the second one.

111
00:07:41.750 --> 00:07:44.912
And that's a really nice thing to have
during development because especially if

112
00:07:44.912 --> 00:07:47.061
you haven't set up your navigation or
something yet.

113
00:07:47.061 --> 00:07:50.879
You can get to the point where like,
you've created a bunch of pages but

114
00:07:50.879 --> 00:07:53.640
you haven't built the list
to show them all.

115
00:07:53.640 --> 00:07:54.960
Well this will give you that list.

116
00:07:54.960 --> 00:07:58.990
So it's a nice little convenience thing
to have when you're still in progress and

117
00:07:58.990 --> 00:08:03.180
things are kind of in various stages of
flux to make sure that you don't forget to

118
00:08:03.180 --> 00:08:04.160
link to certain pages.

