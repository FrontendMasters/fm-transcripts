WEBVTT

1
00:00:00.530 --> 00:00:04.884
&gt;&gt; Jason Lengstorf: All right, so our
first piece here is going to be to create

2
00:00:04.884 --> 00:00:09.435
a form, so that we can track
what people are searching for.

3
00:00:09.435 --> 00:00:12.811
They need to be able to actually input
a search term and then we wanna take

4
00:00:12.811 --> 00:00:15.981
that search term on submitting the form,
rewrite the URL with it.

5
00:00:15.981 --> 00:00:20.772
So that means that we need to make
the search term URL-friendly.

6
00:00:20.772 --> 00:00:25.539
So we're gonna do a little bit of string
munging to make that work and then we'll

7
00:00:25.539 --> 00:00:30.891
also get into programmatic navigation with
Gatsby using the navigate helper function.

8
00:00:30.891 --> 00:00:35.059
So first, we're just gonna hop
into our source folder and

9
00:00:35.059 --> 00:00:40.600
let's create a components folder and
inside of that, we'll create a form.

10
00:00:41.620 --> 00:00:43.380
And this is gonna be our search form.

11
00:00:43.380 --> 00:00:47.254
So I'm gonna import React from React.

12
00:00:47.254 --> 00:00:51.176
And then we're gonna set up our form,
so const form, and

13
00:00:51.176 --> 00:00:55.111
that will return something,
that will export default.

14
00:00:59.013 --> 00:01:06.128
&gt;&gt; Jason Lengstorf: Okay, so inside of
our form, we want to set up just a form.

15
00:01:06.128 --> 00:01:10.689
And then, onSubmit,
we need to do something.

16
00:01:10.689 --> 00:01:15.144
So let's create a function
called handleSubmit.

17
00:01:22.691 --> 00:01:25.687
&gt;&gt; Jason Lengstorf: And
that's gonna do something, and

18
00:01:25.687 --> 00:01:30.236
then inside of our form,
we're going to set up a label.

19
00:01:30.236 --> 00:01:33.716
And inside of the label
we'll say search by name.

20
00:01:33.716 --> 00:01:37.844
And then we'll add
an input of the type text.

21
00:01:37.844 --> 00:01:41.860
We will give it a name of name.

22
00:01:41.860 --> 00:01:44.893
And we'll set a value.

23
00:01:44.893 --> 00:01:48.466
And because we want to control the value,
we want React to manage it.

24
00:01:48.466 --> 00:01:51.700
We don't want it to be
kind of user-land managed.

25
00:01:51.700 --> 00:01:55.300
We're going to use the use state hook.

26
00:01:55.300 --> 00:02:01.580
So let's set up use state,
and we'll say value.

27
00:02:01.580 --> 00:02:03.340
set value.

28
00:02:03.340 --> 00:02:07.260
And that's going to be the result of use
state, and we'll just start it out empty.

29
00:02:08.690 --> 00:02:11.990
So our value here is going to be value.

30
00:02:11.990 --> 00:02:15.264
And then on change,
we're going to handle input,

31
00:02:15.264 --> 00:02:17.863
which will be another helper function.

32
00:02:21.375 --> 00:02:24.840
&gt;&gt; Jason Lengstorf: And
then below, outside of our label,

33
00:02:24.840 --> 00:02:27.470
we're going to add a button.

34
00:02:27.470 --> 00:02:31.590
That button is gonna
be of the type Submit.

35
00:02:31.590 --> 00:02:33.250
And it'll just say search.

36
00:02:34.270 --> 00:02:37.170
So, that is most of what we need.

37
00:02:37.170 --> 00:02:41.160
But now we need to make this,
we need to handle input.

38
00:02:41.160 --> 00:02:47.195
So we can set up const handle input,
and that's also gonna be a function.

39
00:02:49.799 --> 00:02:51.849
&gt;&gt; Jason Lengstorf: So
for handling the input,

40
00:02:51.849 --> 00:02:56.852
what we really wanna do is just get
the current value and drop it in.

41
00:02:56.852 --> 00:02:59.459
So we can just get the event and

42
00:02:59.459 --> 00:03:04.270
then we're gonna set the value
to event target value.

43
00:03:05.450 --> 00:03:08.380
And that will allow us to
type in the field, and

44
00:03:08.380 --> 00:03:09.900
that'll update the state whenever we type.

45
00:03:11.370 --> 00:03:15.026
It's a pretty standard way of
controlling inputs in React.

46
00:03:15.026 --> 00:03:19.173
If you've done this
using class components,

47
00:03:19.173 --> 00:03:24.168
the useState hook is such
a breath of fresh air in terms of

48
00:03:24.168 --> 00:03:27.906
how simple it makes it to control inputs.

49
00:03:27.906 --> 00:03:32.631
We're not writing out special class
methods and then binding this to them and

50
00:03:32.631 --> 00:03:35.610
doing all these things that are like,
you know,

51
00:03:35.610 --> 00:03:39.983
they're easy once you've memorized
how they work but it's not easy.

52
00:03:39.983 --> 00:03:44.928
useState is a little bit funky to look at
because when you look at hooks they've got

53
00:03:44.928 --> 00:03:47.723
these kind of array destructuring set up,
and

54
00:03:47.723 --> 00:03:50.249
they kind of feel like magic a little bit.

55
00:03:50.249 --> 00:03:56.924
But once the the model kind of sets in,
it really makes things straightforward and

56
00:03:56.924 --> 00:04:02.258
declarative, which is really,
really wonderful to work with.

57
00:04:02.258 --> 00:04:07.861
In our handle, submit, what we want to do,
is again, we're going to get an event.

58
00:04:07.861 --> 00:04:10.854
But in this case, we wanna prevent
the form from going anywhere.

59
00:04:10.854 --> 00:04:13.680
We don't wanna like navigate to
another page or refresh the page or

60
00:04:13.680 --> 00:04:16.160
any of the things that forms
will typically do by default.

61
00:04:16.160 --> 00:04:19.242
So we're gonna do event.preventDefault,
and

62
00:04:19.242 --> 00:04:23.901
that will prevent the form from,
you know, blowing away our React app and

63
00:04:23.901 --> 00:04:27.452
taking us to, or
like refreshing the page or anything.

64
00:04:27.452 --> 00:04:32.823
Underneath that,
we need to turn the search

65
00:04:32.823 --> 00:04:37.330
string into a URL-friendly query.

66
00:04:37.330 --> 00:04:38.493
And then,

67
00:04:38.493 --> 00:04:45.182
we need to actually,
&gt;&gt; Jason Lengstorf: Change

68
00:04:45.182 --> 00:04:48.247
the URL to match our search results.

69
00:04:51.913 --> 00:04:55.449
&gt;&gt; Jason Lengstorf: So,
to turn this into a search-friendly query,

70
00:04:55.449 --> 00:04:59.918
we're gonna take the value up here,
which could be anything.

71
00:04:59.918 --> 00:05:03.990
So what I'll actually do is, let's just
get this on the screen, so we can see it.

72
00:05:03.990 --> 00:05:09.000
And then we'll start playing
with how to handle the form.

73
00:05:09.000 --> 00:05:09.737
So let's get this.

74
00:05:09.737 --> 00:05:12.765
We're going to use that
auto-import because that's neat.

75
00:05:12.765 --> 00:05:17.496
And then up here, that does what we want.

76
00:05:17.496 --> 00:05:20.020
Don't need that link actually.

77
00:05:20.020 --> 00:05:20.777
So let's get that out of there.

78
00:05:20.777 --> 00:05:23.034
And so now I've got a form.

79
00:05:23.034 --> 00:05:24.274
So let's start this up.

80
00:05:24.274 --> 00:05:25.773
I'm going to do netlify dev.

81
00:05:35.345 --> 00:05:38.862
&gt;&gt; Jason Lengstorf: Okay, success, all
right, and so now we've got a form, and

82
00:05:38.862 --> 00:05:41.718
we can type into it and
it's doing what we expect.

83
00:05:41.718 --> 00:05:47.215
So if I move the console down here,

84
00:05:47.215 --> 00:05:54.229
so we can see it and
then make it much bigger so

85
00:05:54.229 --> 00:05:59.157
we can read it, I can set this by

86
00:05:59.157 --> 00:06:04.107
default to console log value.

87
00:06:04.107 --> 00:06:10.859
So let's just take a field and
search it, and it's gonna log something.

88
00:06:10.859 --> 00:06:11.970
Okay, good.

89
00:06:11.970 --> 00:06:14.158
So our form does submit.

90
00:06:14.158 --> 00:06:16.774
It handles the submit properly,
it's not refreshing the page or anything.

91
00:06:16.774 --> 00:06:21.799
So the next thing that we want
to do is what if somebody

92
00:06:21.799 --> 00:06:26.710
types in like Rick &amp; Morty,
something like that,

93
00:06:26.710 --> 00:06:32.444
that would break any URL,
we can't just like link to that.

94
00:06:32.444 --> 00:06:37.110
It's also not particularly useful in the
context of the lookup that we're doing.

95
00:06:37.110 --> 00:06:40.100
So because we know that our
API's a text-based search,

96
00:06:40.100 --> 00:06:44.665
we don't need any special characters, so
that drastically simplifies our job here.

97
00:06:44.665 --> 00:06:49.590
So the first thing that I want to do is,
I'm just gonna go ahead and

98
00:06:49.590 --> 00:06:55.683
let's start by creating a new variable,
which is gonna initially be the value,

99
00:06:55.683 --> 00:06:59.642
but then I'm gonna do
a couple of transformations.

100
00:06:59.642 --> 00:07:01.419
I'm gonna change it to lowercase,

101
00:07:01.419 --> 00:07:04.390
I'm gonna trim any white space
from the beginning and end.

102
00:07:04.390 --> 00:07:08.572
Then I'm gonna get into regular
expression replacement.

103
00:07:08.572 --> 00:07:11.093
So we'll use a regex.

104
00:07:11.093 --> 00:07:16.297
And I'm going to create a set and
say anything that is not

105
00:07:16.297 --> 00:07:21.551
a word character or a space,
&gt;&gt; Jason Lengstorf: And

106
00:07:21.551 --> 00:07:24.777
we're gonna go global with that,
it's going to be replaced with nothing.

107
00:07:24.777 --> 00:07:29.313
So we're basically going through and
stripping out any

108
00:07:29.313 --> 00:07:34.250
special characters,
any non-space white space, all in.

109
00:07:34.250 --> 00:07:37.307
And so that's the letters A through Z and
the number zero through nine.

110
00:07:37.307 --> 00:07:39.269
That's what the slash lowercase w allows.

111
00:07:39.269 --> 00:07:43.120
And the space character is
just the space character.

112
00:07:43.120 --> 00:07:47.140
So not new lines, not tabs,
nothing like that.

113
00:07:47.140 --> 00:07:49.111
So we're being pretty restrictive
about what we're allowing.

114
00:07:49.111 --> 00:07:54.750
And then, because I wanna pass this in
the URL and I don't want a bunch of ugly,

115
00:07:54.750 --> 00:08:00.580
like, percent 20s in there, I'm going
to also replace any space character.

116
00:08:00.580 --> 00:08:04.463
And we will do one or more,
just in case somebody says, like,

117
00:08:04.463 --> 00:08:09.830
Rick 15 spaces and then Morty,
we don't like 15 hyphens, that's silly.

118
00:08:09.830 --> 00:08:12.135
So we're going to do one or
more space characters.

119
00:08:12.135 --> 00:08:15.395
And again, we'll go global with that,
and we'll replace it with a hyphen.

120
00:08:15.395 --> 00:08:18.606
So now I have this query.

121
00:08:18.606 --> 00:08:20.792
So let's console log it.

122
00:08:24.304 --> 00:08:27.944
&gt;&gt; Jason Lengstorf: Okay, so
upon doing that, what I should get is for

123
00:08:27.944 --> 00:08:32.019
an average query,
like if I just type someone's name,

124
00:08:32.019 --> 00:08:36.959
nothing really changes, but
if I start adding a bunch of nonsense in

125
00:08:36.959 --> 00:08:41.627
here,
&gt;&gt; Jason Lengstorf: It strips it to just

126
00:08:41.627 --> 00:08:45.847
the actual letter characters, and does so
in a way that would work in a URL.

127
00:08:45.847 --> 00:08:48.787
So that's kind of what we're after, right?

128
00:08:48.787 --> 00:08:52.563
Is we want something that we can put
in a URL and make it linkable, and

129
00:08:52.563 --> 00:08:55.758
we'll deal with reversing
this in the results session.

130
00:08:55.758 --> 00:09:01.800
So, now that we know these are there,
and it's doing what we want,

131
00:09:01.800 --> 00:09:05.840
we can use this query
to rewrite our history.

132
00:09:05.840 --> 00:09:09.616
And to do that, we're going to use
the navigate helper from Gatsby.

133
00:09:09.616 --> 00:09:16.324
So we're gonna import
navigate from Gatsby,

134
00:09:16.324 --> 00:09:20.280
and inside of our handler,

135
00:09:20.280 --> 00:09:24.930
we're just going to navigate.

136
00:09:29.351 --> 00:09:32.479
&gt;&gt; Jason Lengstorf: To search,
and we'll use the query.

137
00:09:32.479 --> 00:09:37.967
And then,
we're also going to pass that down.

138
00:09:37.967 --> 00:09:40.866
So we'll put it in the state as query.

139
00:09:45.127 --> 00:09:48.977
&gt;&gt; Jason Lengstorf: So this means that
we can pull the state that we've created

140
00:09:48.977 --> 00:09:53.379
right out of the query without
having to parse the url or anything,

141
00:09:53.379 --> 00:09:55.121
when it's a local click.

142
00:09:55.121 --> 00:09:58.909
We'll still have to parse the URL
when someone sends a link.

143
00:09:58.909 --> 00:10:03.154
But we can skip some work in the case
that somebody's doing it locally,

144
00:10:03.154 --> 00:10:06.217
which will be, really,
the most common use case.

145
00:10:06.217 --> 00:10:11.384
So upon doing this,
what should happen is whenever we search,

146
00:10:11.384 --> 00:10:18.509
so I'll say, let's say, Morty, our URL
just changed, and now it says slash Morty.

147
00:10:18.509 --> 00:10:22.349
And if I put a bunch of junk in here and

148
00:10:22.349 --> 00:10:27.730
then say Rick,
it gets edited to Morty dash Rick.

149
00:10:27.730 --> 00:10:29.546
Cool.

150
00:10:29.546 --> 00:10:31.186
Okay, that's doing what we want.

151
00:10:31.186 --> 00:10:33.665
So let's save our work.

152
00:10:33.665 --> 00:10:38.067
And then we'll get that
results page working.

