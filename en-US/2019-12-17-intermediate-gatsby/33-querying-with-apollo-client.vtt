WEBVTT

1
00:00:00.370 --> 00:00:02.819
&gt;&gt; Jason Lengstorf: And so,
now what we've got here,

2
00:00:02.819 --> 00:00:08.410
is when this result component loads,
it's gonna receive a name prop.

3
00:00:08.410 --> 00:00:14.398
Upon mounting,
it's going to run this useQuery and

4
00:00:14.398 --> 00:00:19.579
that useQuery will determine what display.

5
00:00:19.579 --> 00:00:24.269
So we'll either show a loading stage,
an error stage, or the results, or

6
00:00:24.269 --> 00:00:26.735
an empty state if there's no results.

7
00:00:26.735 --> 00:00:33.327
So let's go ahead and
run it and see what happens.

8
00:00:33.327 --> 00:00:35.060
We're gonna use netlify dev.

9
00:00:40.761 --> 00:00:44.347
&gt;&gt; Jason Lengstorf: So
to use it we are gonna have to import it,

10
00:00:44.347 --> 00:00:47.529
so let's grab results and results.

11
00:00:47.529 --> 00:00:52.463
And then you can drop this in here.

12
00:00:52.463 --> 00:00:55.858
And it needs a name, so let's just
hard code one for now, we'll say rick.

13
00:01:05.099 --> 00:01:09.535
&gt;&gt; Jason Lengstorf: And we've got
an issue, and that issue is we installed

14
00:01:09.535 --> 00:01:14.367
the Apollo plugin, but
we didn't actually configure it.

15
00:01:14.367 --> 00:01:21.443
So in our gatsby config, we're going to-
&gt;&gt; Jason Lengstorf: set

16
00:01:21.443 --> 00:01:27.811
up module.exports and
then we will set up our plugins.

17
00:01:27.811 --> 00:01:32.362
And we're gonna resolve
gatsby-plugin-apollo, and

18
00:01:32.362 --> 00:01:35.685
for our options, we're gonna set a uri.

19
00:01:35.685 --> 00:01:45.092
And that uri is going to be
the rickandmortyapi.com/graphql.

20
00:01:45.092 --> 00:01:48.513
And what we're doing is,
we're telling Apollo to set up a client.

21
00:01:48.513 --> 00:01:50.794
And the client that we wanna set up,

22
00:01:50.794 --> 00:01:55.690
is going to try to attach to a GraphQL
endpoint to make queries against.

23
00:01:55.690 --> 00:01:57.570
So the way that we're doing this,

24
00:01:57.570 --> 00:02:00.150
we're using a helper in
the gatsby-plugin-apollo.

25
00:02:00.150 --> 00:02:03.670
So that we don't have to
set up the provider and

26
00:02:03.670 --> 00:02:06.810
mess with getting the client configured.

27
00:02:06.810 --> 00:02:09.660
This is only gonna work
in the happiest of paths,

28
00:02:09.660 --> 00:02:14.470
if you're doing anything custom,
middleware, anything like that.

29
00:02:14.470 --> 00:02:17.960
You'll probably find yourself having to
manually configure the Apollo client.

30
00:02:17.960 --> 00:02:22.250
But for simple examples where your GraphQL
endpoint is pretty straightforward,

31
00:02:22.250 --> 00:02:25.060
you're not doing any kind
of cross origin stuff.

32
00:02:25.060 --> 00:02:29.728
You're gonna find that this is a really
nice way to very quickly set up

33
00:02:29.728 --> 00:02:31.184
the GraphQL client.

34
00:02:31.184 --> 00:02:36.727
So now that this is configured,
we should be able to start it again,

35
00:02:36.727 --> 00:02:41.710
and now it'll actually have
a Apollo client to run against.

36
00:02:41.710 --> 00:02:43.083
Let's do netlify dev.

37
00:02:54.792 --> 00:02:55.536
&gt;&gt; Jason Lengstorf: Okay.

38
00:02:57.339 --> 00:03:01.267
&gt;&gt; Jason Lengstorf: All right, so-
&gt;&gt; Jason Lengstorf: We're kind of okay

39
00:03:01.267 --> 00:03:05.817
here, but something went wrong,
because we should have results.

40
00:03:05.817 --> 00:03:07.694
So why doesn't it like our results?

41
00:03:13.264 --> 00:03:14.646
&gt;&gt; Jason Lengstorf: And
we're getting them, so

42
00:03:14.646 --> 00:03:17.823
this is my favorite hack when
you're doing client-side stuff.

43
00:03:17.823 --> 00:03:20.648
Is you can go to the Network tab and
see what's happening, and so

44
00:03:20.648 --> 00:03:22.170
we know we're getting data.

45
00:03:22.170 --> 00:03:26.228
So the error is in my code,
not a problem with the network.

46
00:03:26.228 --> 00:03:32.068
So we can go back and look at our results,
and figure out what was missed.

47
00:03:34.444 --> 00:03:41.910
&gt;&gt; Jason Lengstorf: So we've got if we've
got data, and we've got data characters.

48
00:03:44.815 --> 00:03:48.949
&gt;&gt; Jason Lengstorf: But
we need the results length,

49
00:03:48.949 --> 00:03:54.470
not the characters length, so that is me.

50
00:03:54.470 --> 00:03:56.168
Hey, there we go.

51
00:03:56.168 --> 00:04:00.263
So what we can see now is that
we are doing a search, and

52
00:04:00.263 --> 00:04:03.454
we're getting a search for what we want.

53
00:04:03.454 --> 00:04:08.721
Okay, this is all good, so let's search
for Rick, let's search for Morty.

54
00:04:08.721 --> 00:04:11.983
Okay, so we're not pulling anything
out yet, we've hard-coded our name.

55
00:04:11.983 --> 00:04:14.562
So the last thing that we wanna do here,

56
00:04:14.562 --> 00:04:18.952
is extract that query from the state,
if we're doing it locally.

57
00:04:18.952 --> 00:04:23.300
Or from the Path if we're
being linked to it.

58
00:04:23.300 --> 00:04:27.055
And make sure that we're actually
searching for what we wanna search for,

59
00:04:27.055 --> 00:04:28.615
and not what's hard-coded.

60
00:04:28.615 --> 00:04:36.940
So to do that, we're going to
open up our search component,

61
00:04:36.940 --> 00:04:41.363
I need to rename that to Search.

62
00:04:41.363 --> 00:04:46.704
And inside of it we are going to
turn this into a full function,

63
00:04:46.704 --> 00:04:50.627
so that we can do some
query management in it.

64
00:04:50.627 --> 00:04:54.934
And we're gonna get the query
out of the location.

65
00:04:54.934 --> 00:04:58.293
So something that Gatsby is
gonna pass into every page, and

66
00:04:58.293 --> 00:04:59.979
again this is only for pages.

67
00:04:59.979 --> 00:05:04.754
So anything that's created with
the Create Page action in Gatsby,

68
00:05:04.754 --> 00:05:07.778
which is anything in the pages directory.

69
00:05:07.778 --> 00:05:15.673
Or anything that's created as a template
using like Gatsby actions Create Page.

70
00:05:15.673 --> 00:05:20.548
The location is gonna come in as an object
that gives us some metadata about where

71
00:05:20.548 --> 00:05:21.072
we are.

72
00:05:21.072 --> 00:05:26.020
And what we want
specifically in this case,

73
00:05:26.020 --> 00:05:30.445
is we want to get the location.state.

74
00:05:30.445 --> 00:05:37.490
And if that's set, we wanna get the query
out of it, so location.state.query.

75
00:05:37.490 --> 00:05:40.920
And if that's not set,
then we can jump down and

76
00:05:40.920 --> 00:05:44.690
say let's get the location.pathname.

77
00:05:44.690 --> 00:05:50.628
So the location.pathname is
gonna be like Search /Morty.

78
00:05:50.628 --> 00:05:57.878
So we can replace, and again we're
getting into regular expression land.

79
00:05:57.878 --> 00:06:02.637
So anything starting with search,
we are going to-

80
00:06:06.323 --> 00:06:09.066
&gt;&gt; Jason Lengstorf: remove the /search and

81
00:06:09.066 --> 00:06:15.520
the \ after that, and
we will replace it with nothing.

82
00:06:15.520 --> 00:06:20.110
And if that doesn't work,
we will set it to be an empty string.

83
00:06:21.770 --> 00:06:27.670
And then to get the name,
we're going to do a query.replace.

84
00:06:27.670 --> 00:06:34.385
And we just wanna take any hyphens and

85
00:06:34.385 --> 00:06:41.323
replace them with a space character.

86
00:06:41.323 --> 00:06:47.237
And so
we're using regular expressions here.

87
00:06:47.237 --> 00:06:51.772
So any hyphen, the plus means one or more,
so we're looking for one or more hyphens.

88
00:06:51.772 --> 00:06:54.620
And then we'll collapse those down
into a single space character.

89
00:06:56.190 --> 00:06:59.720
That means that we have a name now, and

90
00:06:59.720 --> 00:07:03.140
it also means that we can show
a little more helpful information.

91
00:07:03.140 --> 00:07:08.474
So let's start, we'll quote this and
we'll say that if the name is set.

92
00:07:08.474 --> 00:07:15.599
We're going to say Showing results for
"{name}" and

93
00:07:15.599 --> 00:07:21.250
that's gonna need to
be a template literal.

94
00:07:22.800 --> 00:07:26.235
Otherwise, show Search for Rick and Morty.

95
00:07:26.235 --> 00:07:29.136
So first it should show us what our
current Search query is right in

96
00:07:29.136 --> 00:07:29.830
the headline.

97
00:07:31.000 --> 00:07:36.070
Next, we're going to say if we have

98
00:07:36.070 --> 00:07:40.640
a name, then show the results.

99
00:07:45.274 --> 00:07:47.822
&gt;&gt; Jason Lengstorf: And so
what we should see here,

100
00:07:47.822 --> 00:07:54.200
is now it's showing us results for
morty and it will pull that from here.

101
00:07:54.200 --> 00:07:59.400
So if I do another search,
let's say alien, it loads aliens.

102
00:08:00.490 --> 00:08:04.148
And if I search for
rick, it pulls up Rick.

103
00:08:04.148 --> 00:08:07.533
And then if I take something like this,
and

104
00:08:07.533 --> 00:08:12.531
I throw it right into the URL,
it will search for Adjudicator.

105
00:08:12.531 --> 00:08:18.014
So we can now search for
things by updating the URL.

106
00:08:18.014 --> 00:08:20.698
We can share these links around and
someone could click it and

107
00:08:20.698 --> 00:08:22.030
see those results.

108
00:08:22.030 --> 00:08:25.980
And all of that's done by using
Apollo on the frontend, and

109
00:08:25.980 --> 00:08:28.750
then setting up client routes in Gatsby.

110
00:08:28.750 --> 00:08:30.466
To handle all of the routing and

111
00:08:30.466 --> 00:08:33.900
making sure that things end up
where they're supposed to be.

