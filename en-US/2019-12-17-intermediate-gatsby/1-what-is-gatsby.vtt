WEBVTT

1
00:00:00.440 --> 00:00:03.020
&gt;&gt; Jason Lengstorf: Another way to think
of it is that it's a Progressive Web App

2
00:00:03.020 --> 00:00:03.595
generator.

3
00:00:03.595 --> 00:00:07.972
So because we are shipping static assets
that rehydrate in the react apps,

4
00:00:07.972 --> 00:00:12.695
that also means that using things like
service workers allows us to catch offline

5
00:00:12.695 --> 00:00:17.350
versions and upload a manifester plug-ins
for both of those things that make it

6
00:00:17.350 --> 00:00:22.100
relatively straight forward to make your
apps available offline using Gatsby.

7
00:00:23.160 --> 00:00:25.960
That obviously isn't gonna solve
the client site problem, but

8
00:00:25.960 --> 00:00:30.410
it will make all of the build time data
and all of your static assets available so

9
00:00:30.410 --> 00:00:32.420
that someone could save it offline for
use later.

10
00:00:34.260 --> 00:00:37.720
Ultimately, the goal with Gatsby is to
make the right thing the easy thing.

11
00:00:37.720 --> 00:00:42.320
The idea is to set good defaults so
that if somebody just

12
00:00:42.320 --> 00:00:45.830
leaves it as is out of the box,
they're gonna get a good result.

13
00:00:45.830 --> 00:00:50.060
Another way to say that is that we're
trying to design tools so that somebody

14
00:00:50.060 --> 00:00:54.590
who is completely under deadline pressure
and takes every shortcut in the book,

15
00:00:54.590 --> 00:00:57.779
delivers an excellent experience
to the people using the website.

16
00:00:59.560 --> 00:01:02.020
So Gatsby under the hood
is setting good defaults.

17
00:01:02.020 --> 00:01:05.280
It's following the purple pattern,
which if you follow Addy Osmani, or

18
00:01:05.280 --> 00:01:09.210
the Google Chrome dev team,

19
00:01:09.210 --> 00:01:13.880
I think is who could put this
out which is all about like.

20
00:01:13.880 --> 00:01:17.649
How to structure data request for
pre-loading and rendering in

21
00:01:17.649 --> 00:01:22.268
the background and lots of things that
make it more performing on the website.

22
00:01:22.268 --> 00:01:24.304
I'm not gonna go into the details of that,

23
00:01:24.304 --> 00:01:26.576
the purple pattern is
worth looking up though.

24
00:01:26.576 --> 00:01:29.931
It also generates only static assets
which again taking the server out of

25
00:01:29.931 --> 00:01:30.646
the equation,

26
00:01:30.646 --> 00:01:33.730
that's one less hop that your users
have to make to get to the data.

27
00:01:35.190 --> 00:01:39.440
And then Gatsby will optimize an lazy-load
assets, so you can take, instead of

28
00:01:39.440 --> 00:01:43.910
a single three megabyte image off of your
phone that you've uploaded to your blog.

29
00:01:43.910 --> 00:01:47.460
That'll get compressed, cut down,
turned into the right size image for

30
00:01:47.460 --> 00:01:50.870
the viewport loading it, and it only gets
loaded when it shows up in the viewport,

31
00:01:50.870 --> 00:01:55.340
which saves your users
megabytes of data transfer and

32
00:01:55.340 --> 00:01:58.590
potentially never loads it at all if they
don't scroll to that part of the page.

33
00:02:00.420 --> 00:02:02.360
It'll normalize third party data as well.

34
00:02:02.360 --> 00:02:06.012
So again, we talked about
the data access through GraphQL.

35
00:02:06.012 --> 00:02:10.634
By doing that, you don't have to
figure out how to asynchronously load

36
00:02:10.634 --> 00:02:14.731
a bunch of third party API's and
try to make that performance.

37
00:02:14.731 --> 00:02:18.522
If you end up in a situation where you're
making lots of asynchronous calls,

38
00:02:18.522 --> 00:02:21.490
you're probably gonna be
tempted to use async await.

39
00:02:21.490 --> 00:02:25.640
But if you use async await, and you're
not setting up like a promise dot all,

40
00:02:25.640 --> 00:02:28.090
then they're actually blocking and
running sequentially.

41
00:02:28.090 --> 00:02:30.880
So inadvertently,
you'll make your pages really slow.

42
00:02:30.880 --> 00:02:35.310
By normalizing that data into GraphQL,
Gatsby handles all of that for you.

43
00:02:35.310 --> 00:02:38.830
So you don't actually have to think
about how to get that data in quickly.

44
00:02:38.830 --> 00:02:42.640
And because you're doing it at build time,
you feel that pain as a developer,

45
00:02:42.640 --> 00:02:47.040
if you do something that's not
performing because the build is slow.

46
00:02:47.040 --> 00:02:49.700
But the static assets that
get generated are fast.

47
00:02:49.700 --> 00:02:52.900
And so your users don't feel the pain
if you do something silly with

48
00:02:52.900 --> 00:02:53.660
your data management.

49
00:02:54.810 --> 00:03:00.378
I mean, you wanna fix that obviously, but
it becomes your problem not theirs, right?

50
00:03:00.378 --> 00:03:03.318
The other thing that I think is
really important about this is that,

51
00:03:03.318 --> 00:03:06.170
while Gatsby has a lot of opinions and
sets up a bunch of defaults.

52
00:03:06.170 --> 00:03:08.600
It also gives you a huge
amount of control.

53
00:03:08.600 --> 00:03:10.850
So you can get all the way
down to the Webpack config,

54
00:03:10.850 --> 00:03:13.650
you can get all the way
down to the Babel config.

55
00:03:13.650 --> 00:03:17.250
But the thing that's important is that
Gatsby uses a model that I I've started

56
00:03:17.250 --> 00:03:19.620
calling progressive
disclosure of complexity.

57
00:03:19.620 --> 00:03:22.184
I don't think I made up that term but
I've co-opted it.

58
00:03:23.380 --> 00:03:27.330
Which is the idea that,
when you want to modify something,

59
00:03:27.330 --> 00:03:30.380
you should only have to eject
the piece that you want to modify.

60
00:03:30.380 --> 00:03:33.960
We've probably all seen this when you
use some kind of a boiler plated tool

61
00:03:33.960 --> 00:03:37.320
that it does all the things that we
want and then we hit an edge case and

62
00:03:37.320 --> 00:03:40.290
suddenly, all of the config
is managed by us.

63
00:03:40.290 --> 00:03:44.240
The entire app becomes objective, and
now any change that happens upstream,

64
00:03:44.240 --> 00:03:45.800
we have to manually migrate.

65
00:03:45.800 --> 00:03:48.260
There are a lot of pain
points involved in that.

66
00:03:48.260 --> 00:03:52.910
So Gatsby tries to get rid of that by only
exposing pieces one section at a time.

67
00:03:52.910 --> 00:03:55.070
If you make a Babel adjustment,

68
00:03:55.070 --> 00:03:58.330
you don't have to eject
the entire Gatsby build pipeline.

69
00:03:58.330 --> 00:04:02.339
You're just injecting that one
little piece of Babel config.

70
00:04:02.339 --> 00:04:06.607
So, to kind of recap this, Gatsby is
fast and all the ways that matter,

71
00:04:06.607 --> 00:04:10.035
it makes you faster as a developer,
it makes you faster.

72
00:04:10.035 --> 00:04:14.618
The experience that your
users will see is faster.

73
00:04:14.618 --> 00:04:19.137
And it's fast to get started,
fast to ship and iterate.

74
00:04:19.137 --> 00:04:21.471
And those are all really important things.

75
00:04:21.471 --> 00:04:24.337
And lets you bring in your data from
anywhere because it can use the file

76
00:04:24.337 --> 00:04:26.290
system, API, software as a service.

77
00:04:26.290 --> 00:04:29.730
It doesn't restrict you as
a developer on what you can build or

78
00:04:29.730 --> 00:04:31.327
where you can build it from.

79
00:04:31.327 --> 00:04:35.912
It does the right thing by default by
setting up good guard rails in defaults,

80
00:04:35.912 --> 00:04:39.872
you're able to cut most of the corners and
still get a good result.

81
00:04:39.872 --> 00:04:42.510
And I think this is probably
the most important thing for me.

82
00:04:42.510 --> 00:04:47.420
Gatsby actually made web development fun
for me again, if I have a silly idea for

83
00:04:47.420 --> 00:04:50.000
a project, I actually build it now.

84
00:04:50.000 --> 00:04:53.140
Because before I would get halfway
through a web pack config, and

85
00:04:53.140 --> 00:04:55.800
then I would get disheartened, and
I wouldn't wanna do it anymore.

86
00:04:55.800 --> 00:05:00.160
And so with Gatsby, when you just
say Gatsby new use your template,

87
00:05:00.160 --> 00:05:02.950
it will just give you something that
you can run Gatsby development.

88
00:05:02.950 --> 00:05:06.670
It's in the browser and it's working and
I'm immediately writing UI code.

89
00:05:06.670 --> 00:05:10.430
I'm not trying to figure out how
to get my boilerplate to work so

90
00:05:10.430 --> 00:05:11.430
that I can ship something.

91
00:05:12.870 --> 00:05:14.932
So, that's kind of the overview, right?

92
00:05:14.932 --> 00:05:18.796
That's my pitch on why Gatsby
is worth looking into and

93
00:05:18.796 --> 00:05:22.668
why it's worth taking
seriously as a web technology.

94
00:05:22.668 --> 00:05:25.581
But the rabbit hole goes so much deeper
and that's what we're gonna do today.

