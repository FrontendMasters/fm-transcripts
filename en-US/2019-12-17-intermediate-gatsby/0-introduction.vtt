WEBVTT

1
00:00:00.190 --> 00:00:01.395
&gt;&gt; Jason Lengstorf: Hi everyone.

2
00:00:01.395 --> 00:00:03.120
Super excited for
you all to be here today.

3
00:00:03.120 --> 00:00:06.532
And we're gonna be learning
about intermediate, and

4
00:00:06.532 --> 00:00:10.329
then in tiny parenthetical slash,
advanced Gatsby today.

5
00:00:11.764 --> 00:00:14.190
&gt;&gt; Jason Lengstorf: We're gonna get
into some of the kinda edges and

6
00:00:14.190 --> 00:00:16.201
corners of what you can do with Gatsby.

7
00:00:16.201 --> 00:00:17.724
Get into some more powerful stuff,

8
00:00:17.724 --> 00:00:21.480
moving outside of what you would typically
think a set of site is capable of.

9
00:00:21.480 --> 00:00:24.380
And I'm really really
looking forward to doing it.

10
00:00:24.380 --> 00:00:26.320
So, a little bit about me I'm Jason.

11
00:00:26.320 --> 00:00:32.201
I am kind of a, I've made it my career to
learn, I really really like doing that.

12
00:00:32.201 --> 00:00:36.015
And one of the ways I learn is by
teaching, so I do that as often as I can,

13
00:00:36.015 --> 00:00:39.050
which is part of the reason
why I'm here today.

14
00:00:39.050 --> 00:00:43.500
I'm currently a principal developer
experience engineer at Netlify.

15
00:00:43.500 --> 00:00:46.220
Prior that I was head of
Developer Relations at Gatsby and

16
00:00:46.220 --> 00:00:49.600
then I was a front end
architect at IBM before that.

17
00:00:49.600 --> 00:00:53.840
I live in Portland,
Oregon and also I teach a or

18
00:00:53.840 --> 00:00:57.590
I run a weekly live stream on Twitch.

19
00:00:57.590 --> 00:01:00.396
A couple of times a week I
pair program with somebody and

20
00:01:00.396 --> 00:01:02.171
we build something from scratch.

21
00:01:02.171 --> 00:01:05.090
It's called Learn with Jason,
it's a lot of fun.

22
00:01:05.090 --> 00:01:08.586
And it's full of silly sound
effects you can chat along live,

23
00:01:08.586 --> 00:01:11.545
it's a good time if you wanna
learn something and and

24
00:01:11.545 --> 00:01:14.793
also hopefully giggle a little
bit at my terrible jokes.

25
00:01:15.907 --> 00:01:18.851
&gt;&gt; Jason Lengstorf: So, before we get
started I wanna set a little bit of who

26
00:01:18.851 --> 00:01:23.210
this workshop is for just to make sure
that we've got our assumptions straight.

27
00:01:24.690 --> 00:01:26.140
I'm gonna make two assumptions.

28
00:01:26.140 --> 00:01:28.690
One is that you've built at least
a simple Gatsby site before,

29
00:01:28.690 --> 00:01:32.990
we're gonna be talking about
a lot of the internals of Gatsby.

30
00:01:32.990 --> 00:01:37.587
And I'm not gonna go over things
like what the files are named,

31
00:01:37.587 --> 00:01:39.506
or those sorts of things.

32
00:01:40.533 --> 00:01:44.469
&gt;&gt; Jason Lengstorf: So, definitely ask if
I do something that you're not clear on.

33
00:01:44.469 --> 00:01:47.484
But I will be assuming
that you've at least

34
00:01:47.484 --> 00:01:51.270
seen some of the Gatsby
development process before.

35
00:01:52.310 --> 00:01:54.910
And I'll also be assuming that you're
at least a little familiar with React.

36
00:01:54.910 --> 00:01:58.305
So we're going to be doing
things like using React Hooks.

37
00:01:58.305 --> 00:02:02.911
We're going to be managing state today and
handling forms.

38
00:02:02.911 --> 00:02:07.354
So, if you've never used React or
you're not super comfortable with React,

39
00:02:07.354 --> 00:02:10.854
you may want to go back and
watch Brian Holt's Intro to React or

40
00:02:10.854 --> 00:02:14.378
another course that'll kind of
bring you up to speed on that.

41
00:02:14.378 --> 00:02:18.460
If you're uncomfortable with Gatsby,
then you may want to go back and

42
00:02:18.460 --> 00:02:22.142
watch my front end Masters course
on kind of a Beginner Gatsby.

43
00:02:23.813 --> 00:02:26.245
&gt;&gt; Jason Lengstorf: With that being said,
I think we're ready to jump in.

44
00:02:26.245 --> 00:02:28.423
So before we talk about what Gatsby is,

45
00:02:28.423 --> 00:02:32.912
it's kind of important to understand
what the problems are that it's solving.

46
00:02:32.912 --> 00:02:36.777
So the first thing is just to kind of get
an overview of the challenges of modern

47
00:02:36.777 --> 00:02:37.736
web development.

48
00:02:39.405 --> 00:02:42.528
&gt;&gt; Jason Lengstorf: The biggest problem
that I've seen, especially lately,

49
00:02:42.528 --> 00:02:46.533
is that getting started in modern web
development is really overwhelming.

50
00:02:46.533 --> 00:02:50.687
There are tons of options,
there are lots and lots of pieces.

51
00:02:50.687 --> 00:02:56.908
And they don't necessarily feel
clear as to how they fit together.

52
00:02:56.908 --> 00:02:59.015
It feels like a lot of stuff going on.

53
00:02:59.015 --> 00:03:02.641
It's very noisy in the ecosystem with
everybody saying that they've got

54
00:03:02.641 --> 00:03:05.974
preferences and those preferences
are usually stated like facts so

55
00:03:05.974 --> 00:03:10.142
it can be really difficult to understand
what the quote unquote best practices are.

56
00:03:12.156 --> 00:03:14.900
&gt;&gt; Jason Lengstorf: On top of that
the way we manage data is evolving.

57
00:03:14.900 --> 00:03:18.609
I mean, it used to be, back in the day,
at least when I was getting started that

58
00:03:18.609 --> 00:03:21.380
you'd have some kind of
a centralized store of your data.

59
00:03:21.380 --> 00:03:25.076
You would have an API or
you would have your WordPress instance or

60
00:03:25.076 --> 00:03:26.720
your Drupal instance.

61
00:03:26.720 --> 00:03:28.090
And that would manage everything.

62
00:03:28.090 --> 00:03:30.490
If you had a blog that was in WordPress.

63
00:03:30.490 --> 00:03:32.730
If you had e-commerce,
that was in WordPress.

64
00:03:32.730 --> 00:03:34.890
If you had a form, that was in WordPress.

65
00:03:34.890 --> 00:03:37.789
And so
your CMS was kind of this monolithic,

66
00:03:39.080 --> 00:03:42.320
one size fits all approach
to data management.

67
00:03:42.320 --> 00:03:44.764
And that's changing now so
it's starting to come apart.

68
00:03:44.764 --> 00:03:46.755
We'll talk a little bit more
about that in a minute.

69
00:03:47.902 --> 00:03:50.260
&gt;&gt; Jason Lengstorf: And
then just getting it right is hard.

70
00:03:50.260 --> 00:03:54.482
Any particular tiny sliver of modern web
development could become a career in and

71
00:03:54.482 --> 00:03:56.788
of itself, and we're seeing that happen.

72
00:03:56.788 --> 00:04:01.128
People like Harry Roberts have made an
entire career just out of optimizing web

73
00:04:01.128 --> 00:04:01.979
performance.

74
00:04:01.979 --> 00:04:04.835
And other people, like Rachel Andrew,

75
00:04:04.835 --> 00:04:08.953
have made a career out of
teaching people CSS and CSS Grid.

76
00:04:08.953 --> 00:04:13.031
You can go down the rabbit hole in any
one of these things and it's a completely

77
00:04:13.031 --> 00:04:17.230
valid profession with a huge amount
of knowledge to acquire and share.

78
00:04:17.230 --> 00:04:21.930
So for us, the average
developer working in a company,

79
00:04:21.930 --> 00:04:25.500
how do we expect to get
all of these things right?

80
00:04:25.500 --> 00:04:29.810
How do we expect to not
only build a good app and

81
00:04:29.810 --> 00:04:32.150
deliver good features,
but get performance right?

82
00:04:33.220 --> 00:04:34.698
Get maintainability right?

83
00:04:34.698 --> 00:04:40.406
Make sure that we're shipping modern and
apps that are gonna scale with us,

84
00:04:40.406 --> 00:04:45.221
and there are just so many different
things that we need to know in

85
00:04:45.221 --> 00:04:49.514
order to get this right and
that's super overwhelming.

86
00:04:50.620 --> 00:04:54.000
&gt;&gt; Jason Lengstorf: So Gatsby is
an attempt to address some of these

87
00:04:54.000 --> 00:04:59.910
challenges and one of the ways to think
about it is that it's a shortcut, right?

88
00:04:59.910 --> 00:05:04.287
So Gatsby is a shortcut to allow
developers to quickly build excellent apps

89
00:05:04.287 --> 00:05:04.988
and sites.

90
00:05:04.988 --> 00:05:09.709
And what that means is that it's
trying to set some defaults and

91
00:05:09.709 --> 00:05:16.185
some pathways so that you have to make
fewer decisions to get a good outcome.

92
00:05:16.185 --> 00:05:18.476
&gt;&gt; Jason Lengstorf: So to give
an illustration of what that means,

93
00:05:18.476 --> 00:05:21.766
a lot of workflows involve a ton
of boilerplate to get started, and

94
00:05:21.766 --> 00:05:23.320
let's just illustrate that.

95
00:05:23.320 --> 00:05:25.530
So let's say I've got,
I wanna write some code and

96
00:05:25.530 --> 00:05:27.640
I wanna get that code on to the internet,
right?

97
00:05:27.640 --> 00:05:31.250
That's, that seems like a one step thing,
but when you start to dig into it,

98
00:05:31.250 --> 00:05:34.600
if you're going from scratch and rolling
your own thing, you're gonna end up.

99
00:05:34.600 --> 00:05:37.840
Okay, I need to set up some web packs,
I wanna use modern features.

100
00:05:37.840 --> 00:05:41.069
Okay, well that means I have to have Babel
because I need to transpile those features

101
00:05:41.069 --> 00:05:42.899
into something that
the browser understands.

102
00:05:42.899 --> 00:05:46.880
Then you need post CSS so
that you can use modern CSS features.

103
00:05:46.880 --> 00:05:48.110
Now you're looking at node so

104
00:05:48.110 --> 00:05:51.620
that you can actually set up a server
that hosts that code somewhere.

105
00:05:51.620 --> 00:05:54.956
Then you might be getting into
containers like Kubernetes.

106
00:05:54.956 --> 00:05:59.176
Then NginX if you want to set up
reverse proxies because your containers

107
00:05:59.176 --> 00:06:01.652
are managing different parts of the app.

108
00:06:01.652 --> 00:06:05.840
You need a CDN like fastly so that you
can get things to your users quickly.

109
00:06:05.840 --> 00:06:09.090
And if you're feeling overwhelmed,
I mean, this is overwhelming.

110
00:06:09.090 --> 00:06:11.410
Each one of these things
could be a career, right?

111
00:06:11.410 --> 00:06:14.530
I mean, there were people when I
worked at IBM whose entire job

112
00:06:14.530 --> 00:06:16.910
was just dealing with the containers.

113
00:06:16.910 --> 00:06:21.691
And the reverse proxies that kept them
alive on the services that we deployed.

114
00:06:21.691 --> 00:06:26.466
So there are a huge number of
complexities that get introduced as you

115
00:06:26.466 --> 00:06:28.830
start to work on modern web apps.

116
00:06:30.010 --> 00:06:34.706
So to simplify that Gatsby kind of
takes an approach of let's take all of

117
00:06:34.706 --> 00:06:35.735
these things.

118
00:06:35.735 --> 00:06:40.837
And just set up some happy path defaults
and say that for the vast majority of web

119
00:06:40.837 --> 00:06:46.300
apps there's a way to ship these that
will be mostly right most of the time.

120
00:06:46.300 --> 00:06:50.050
And that allows us to remove
a ton of boilerplate.

121
00:06:50.050 --> 00:06:54.050
So we can get started and deploy something
to production that will start out

122
00:06:54.050 --> 00:06:56.815
passing all the lighthouse audits for
performance.

123
00:06:56.815 --> 00:07:00.272
It'll start out getting
straight A's on web page test.

124
00:07:00.272 --> 00:07:04.597
And that puts you, as a web developer in a
position to not have to become an expert,

125
00:07:04.597 --> 00:07:08.925
but just to pay attention to what you're
doing to make sure that you're not having

126
00:07:08.925 --> 00:07:10.060
regressions.

127
00:07:10.060 --> 00:07:13.200
So the average web app,
if you start you add something and

128
00:07:13.200 --> 00:07:15.180
then you have to go
figure out why it's slow.

129
00:07:15.180 --> 00:07:19.800
This intentionally takes a lot of
the boilerplate and says if you do it like

130
00:07:19.800 --> 00:07:24.740
this, you're gonna be okay and then as you
start to add things you just have to be

131
00:07:24.740 --> 00:07:28.650
watching as opposed to kind of bringing
up the whole boilerplate just enough.

132
00:07:29.740 --> 00:07:34.020
And it looks kind of like this, you have
your code, you write that in Gatsby and

133
00:07:34.020 --> 00:07:38.300
you push it up to Netlify
which hooks up to Github and

134
00:07:38.300 --> 00:07:41.840
that puts it on the Internet,
so it's a much simpler process.

135
00:07:41.840 --> 00:07:45.330
And inside that Gatsby workflow,
you're using React and GraphQL.

136
00:07:45.330 --> 00:07:51.290
So you're not doing quite as
much orchestration of tools,

137
00:07:51.290 --> 00:07:55.650
you're doing more building the actual
thing that you want to work on.

138
00:07:55.650 --> 00:07:59.401
And so it takes a lot of that work out
of the way and allows you to focus on

139
00:07:59.401 --> 00:08:04.089
shipping features, as opposed to setting
up the foundation for shipping features.

140
00:08:05.331 --> 00:08:08.127
&gt;&gt; Jason Lengstorf: Another way to think
about Gatsby is that it's an orchestration

141
00:08:08.127 --> 00:08:10.190
layer for taming the Content Mesh.

142
00:08:10.190 --> 00:08:12.790
The Content Mesh is a buzzword
that Gatsby made up but

143
00:08:12.790 --> 00:08:16.740
Iove it because it kind of
describes what's happening in

144
00:08:16.740 --> 00:08:21.840
the the front end landscape right now,
if you look at monolithic CMS

145
00:08:21.840 --> 00:08:26.140
is they're all starting to back away from
this idea that we can handle everything.

146
00:08:26.140 --> 00:08:29.570
WordPress has a headless implementation,
Drupal calls it

147
00:08:29.570 --> 00:08:33.490
decoupled Drupal where it no longer
has opinions about the front end.

148
00:08:33.490 --> 00:08:38.430
Most major services are starting to
ship all of their data via API so

149
00:08:38.430 --> 00:08:41.010
that you can build your own
front end on top of it.

150
00:08:41.010 --> 00:08:46.336
That means that we're moving away from
this idea of one size fits all or

151
00:08:46.336 --> 00:08:48.334
one tool to rule them all.

152
00:08:48.334 --> 00:08:52.210
And we're starting to move toward
this idea of the Content Mesh.

153
00:08:52.210 --> 00:08:57.610
Where you pull different services together
to use them for what they're best at.

154
00:08:57.610 --> 00:09:00.202
A way to think about this is,
if you look at the average website,

155
00:09:00.202 --> 00:09:03.867
you've got your images, you've got your
search functionality, you've got content.

156
00:09:03.867 --> 00:09:05.960
Maybe you've got products that you sell.

157
00:09:05.960 --> 00:09:09.900
And each of those things is going to
be pulled from a different service.

158
00:09:09.900 --> 00:09:12.170
So maybe you've got your
images on cloud near you.

159
00:09:12.170 --> 00:09:15.764
Maybe you're using Algolia for search,
Contentful to manage your content,

160
00:09:15.764 --> 00:09:17.462
Stripe to manage your e-commerce.

161
00:09:17.462 --> 00:09:18.501
And that's a good thing.

162
00:09:18.501 --> 00:09:21.370
That means that you're using
each of these tools which,

163
00:09:21.370 --> 00:09:24.810
depending on who you ask is
best in class at what it does.

164
00:09:24.810 --> 00:09:27.063
And you're using it only for what it does.

165
00:09:27.063 --> 00:09:30.110
You're not trying to make Contentful
into an e-commerce platform.

166
00:09:30.110 --> 00:09:31.330
That's not what it's for.

167
00:09:31.330 --> 00:09:34.413
You're not trying to make Stripe
into a content management system,

168
00:09:34.413 --> 00:09:36.176
because that's not what that's for.

169
00:09:36.176 --> 00:09:38.904
You just use the tools for
what they're best at, and

170
00:09:38.904 --> 00:09:41.020
stitch them together in your front end.

171
00:09:41.020 --> 00:09:44.020
Now, as you can imagine, this can get kind
of complicated because now we're talking

172
00:09:44.020 --> 00:09:48.850
about just in this simple example we're
looking four different APIs that we have

173
00:09:48.850 --> 00:09:53.120
to request things from, put together,
stick on to the page and

174
00:09:53.120 --> 00:09:55.640
make sure that we didn't make everything
horribly slow in the process.

175
00:09:56.650 --> 00:10:01.205
So what Gatsby does is it has this
idea of a centralized GraphQL layer.

176
00:10:01.205 --> 00:10:04.388
And it will pull data from any
source that you can think of

177
00:10:04.388 --> 00:10:07.979
whether that's a file system,
software as a service and API,

178
00:10:07.979 --> 00:10:12.553
something like that, pull it in and
put it into the centralized GraphQL layer.

179
00:10:12.553 --> 00:10:16.100
Then you query that
GraphQL layer in React.

180
00:10:16.100 --> 00:10:17.240
And that means that for

181
00:10:17.240 --> 00:10:22.250
developers data access stays the same
no matter what source you're using.

182
00:10:22.250 --> 00:10:26.147
You're going to be requiring a GraphQL
API, and it starts to feel familiar as you

183
00:10:26.147 --> 00:10:29.415
get more and more comfortable with
the way the Gatsby imports data,

184
00:10:29.415 --> 00:10:31.622
so everything starts to
feel about the same.

185
00:10:31.622 --> 00:10:34.963
You're always gonna get all
Contentful data, and the nodes,

186
00:10:34.963 --> 00:10:38.150
and then you'll get some fields inside.

187
00:10:38.150 --> 00:10:40.390
And that stays true across services.

188
00:10:40.390 --> 00:10:45.150
Once you've done,
once you've got everything working,

189
00:10:45.150 --> 00:10:48.690
you build it and that outputs
a folder full of static assets.

190
00:10:48.690 --> 00:10:53.660
The static assets can be uploaded
to an Amazon S3 bucket to nullify

191
00:10:53.660 --> 00:10:59.170
to whatever CDN kind of object storage
that you want, which is great because

192
00:10:59.170 --> 00:11:02.860
that means you don't have to keep a live
running server, you just need the CDN.

193
00:11:02.860 --> 00:11:06.115
And as far as keeping things up and
inexpensive, a CDN is about

194
00:11:06.115 --> 00:11:09.821
the best way to keep things available and
not spend a fortune doing it.

195
00:11:11.005 --> 00:11:14.470
&gt;&gt; Jason Lengstorf: And then when it hits
the browser rehydrates into a React app.

196
00:11:14.470 --> 00:11:18.700
And that means that you don't lose any
dynamic capabilities, you can still make

197
00:11:18.700 --> 00:11:22.550
asynchronous requests, you can still
do client side routing, you can still

198
00:11:22.550 --> 00:11:26.420
do authentication, all the things that
you would do with the regular React app.

199
00:11:26.420 --> 00:11:30.432
But you've cut out a lot of the complexity
of getting that React app up onto the web.

200
00:11:30.432 --> 00:11:35.018
You don't have to ship a node server to
serve that did that React mounts into you

201
00:11:35.018 --> 00:11:39.065
can just put some static assets up and
React will handle that for you.

202
00:11:39.065 --> 00:11:43.665
As an example of how this might look in a
real website, this is an old screenshot of

203
00:11:43.665 --> 00:11:48.810
the Gatsby's Swag Store, the UI has been
updated but the concepts are the same.

204
00:11:48.810 --> 00:11:51.890
How this works is that
when you load this site,

205
00:11:51.890 --> 00:11:53.630
you're looking at data
from multiple sources.

206
00:11:53.630 --> 00:11:56.508
So the first source is
gonna be Shopify and

207
00:11:56.508 --> 00:12:00.136
Shopify keeps inventory of
each of these products.

208
00:12:00.136 --> 00:12:03.431
It has the photos and
the price and the sizes,

209
00:12:03.431 --> 00:12:07.976
all the things that you would
expect in an e-commerce store.

210
00:12:07.976 --> 00:12:12.562
Then, we on the client side,
load off zero for authentication, and

211
00:12:12.562 --> 00:12:16.280
we use Shopify's Buy SDK to
dynamically load whether or

212
00:12:16.280 --> 00:12:19.784
not a thing is in stock and
to manage a shopping cart.

213
00:12:21.996 --> 00:12:26.350
&gt;&gt; Jason Lengstorf: Then once you're
logged in, you can see your GitHub data.

214
00:12:26.350 --> 00:12:31.180
So we use GitHub to decide whether or not
you have qualified for the discount codes.

215
00:12:31.180 --> 00:12:36.170
If you do one pull request to Gatsby,
you get a $10 discount code.

216
00:12:36.170 --> 00:12:38.910
If you do five you get
a $25 discount code,

217
00:12:38.910 --> 00:12:42.550
it's kind of Gatsby's way of saying
thanks for participating in open source.

218
00:12:42.550 --> 00:12:47.360
And so they pull this to
get the contribution count.

219
00:12:47.360 --> 00:12:51.130
And then below that, you can also
see your most recent contributions.

220
00:12:51.130 --> 00:12:55.070
So it's kind of a cool
way to use live data.

221
00:12:55.070 --> 00:12:57.200
But you have to be authenticated for
that right.

222
00:12:57.200 --> 00:12:58.560
This is all dynamic.

223
00:12:58.560 --> 00:13:01.010
So it runs on the client side.

224
00:13:01.010 --> 00:13:06.210
And this is a good example of Gatsby being
more than just like static sites, right?

225
00:13:06.210 --> 00:13:07.190
It can be dynamic.

226
00:13:07.190 --> 00:13:08.260
It's just static assets.
