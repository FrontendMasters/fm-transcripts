WEBVTT

1
00:00:00.380 --> 00:00:06.470
&gt;&gt; Speaker 1: And a question about the way
that you setup the redirect, initially.

2
00:00:06.470 --> 00:00:12.960
And I guess my question is, I've seen
an example of client-only routes before.

3
00:00:12.960 --> 00:00:18.750
Where someone used the router library
that's in, I think it's Reach Router.

4
00:00:18.750 --> 00:00:19.250
&gt;&gt; Jason Lengstorf: Yeah.

5
00:00:20.730 --> 00:00:23.170
&gt;&gt; Speaker 1: Versus what you did
here where you set up a redirect

6
00:00:24.390 --> 00:00:26.370
thoughts about one or the other.

7
00:00:26.370 --> 00:00:29.030
&gt;&gt; Jason Lengstorf: It's kind
of a use case based thing so

8
00:00:29.030 --> 00:00:32.180
if you use reach router,
what you're able to do is say,

9
00:00:32.180 --> 00:00:36.720
based on the URL that I'm seeing,
show me a different component.

10
00:00:36.720 --> 00:00:40.701
And it's a really nice API but
in this particular case,

11
00:00:40.701 --> 00:00:44.861
what we were actually trying
to do wasn't quite the same.

12
00:00:44.861 --> 00:00:48.192
So we were looking at like, we wanna
show the same component all the time,

13
00:00:48.192 --> 00:00:50.309
we're just pulling
something out of the URL.

14
00:00:50.309 --> 00:00:54.397
And if the URL is set, then we're
showing a different kind of output so

15
00:00:54.397 --> 00:00:58.923
there's no really like a right or
wrong way, it's just a case by case basis.

16
00:01:05.625 --> 00:01:08.831
&gt;&gt; Jason Lengstorf: Okay, so now the
the FEM progress branch is pushed up to

17
00:01:08.831 --> 00:01:12.750
GitHub, it's done,
everything that we've done today.

18
00:01:12.750 --> 00:01:17.230
And you should be able to step through
the commits and see exactly what happened.

19
00:01:17.230 --> 00:01:22.070
There's also a branch on
GitHub called Chichi that

20
00:01:22.070 --> 00:01:27.040
has links to comparisons
between each step of the way so

21
00:01:27.040 --> 00:01:30.590
you can see the code as it
evolved throughout the day.

22
00:01:30.590 --> 00:01:32.760
Any other questions?

23
00:01:32.760 --> 00:01:34.420
Anything coming from the chat?

24
00:01:34.420 --> 00:01:38.408
&gt;&gt; Speaker 3: If the API that we
are consuming requires an EMVA variable,

25
00:01:38.408 --> 00:01:41.610
are you going to specify
them in Gatsby config?

26
00:01:43.490 --> 00:01:49.057
And if yes, it's not going to be
shipped to the end user browser?

27
00:01:49.057 --> 00:01:53.653
&gt;&gt; Jason Lengstorf: So
if you want to use an API that needs

28
00:01:53.653 --> 00:01:58.040
like a secret to make calls.

29
00:01:58.040 --> 00:02:00.860
You would probably want to look
into something like serverless

30
00:02:00.860 --> 00:02:03.820
functions to handle that.

31
00:02:03.820 --> 00:02:09.070
Because the the catch with
client side request is that

32
00:02:09.070 --> 00:02:11.880
if you have to send a token along
that token is gonna be visible.

33
00:02:11.880 --> 00:02:14.210
You could be sniffed out of the request,

34
00:02:14.210 --> 00:02:16.280
it could be snipped out
of the source code.

35
00:02:16.280 --> 00:02:21.301
And so you probably don't want to do that,
but if you use a serverless function.

36
00:02:21.301 --> 00:02:30.022
You are able to kind of abstract away
the the sensitive part of the call.

37
00:02:30.022 --> 00:02:35.730
And instead you can say only this function
can only be called from my domain.

38
00:02:35.730 --> 00:02:39.370
And so my website will make
a request to that domain,

39
00:02:39.370 --> 00:02:44.450
which passes the call restrictions or
the cross site request issues.

40
00:02:44.450 --> 00:02:49.020
And then it will make that authenticated
request on your behalf and

41
00:02:49.020 --> 00:02:51.050
send back the results you need.

42
00:02:51.050 --> 00:02:55.672
So that's a way to protect those
credentials, if you have unauthentic.

43
00:02:55.672 --> 00:02:58.489
Or like unsecure,
like a public key that you need to pass,

44
00:02:58.489 --> 00:03:01.140
then yes,
you would set that through Gatsby config.

45
00:03:01.140 --> 00:03:05.690
&gt;&gt; Speaker 3: Will the same thing go for
like any type of authentication?

46
00:03:07.080 --> 00:03:10.780
&gt;&gt; Jason Lengstorf: I mean, in general,
when you're looking at client side apps.

47
00:03:10.780 --> 00:03:14.930
Anything that shouldn't be visible to
the client probably shouldn't end up in

48
00:03:14.930 --> 00:03:16.040
client side code.

49
00:03:16.040 --> 00:03:20.361
And as a general rule,
if you're working with it in Gatsby,

50
00:03:20.361 --> 00:03:25.465
it's the build step, isn't public
that doesn't create artifacts.

51
00:03:25.465 --> 00:03:30.145
But you wanna try to avoid
putting sensitive data

52
00:03:30.145 --> 00:03:33.350
into any type of build artifact.

53
00:03:33.350 --> 00:03:37.550
So if it gets to react, if it goes into
your metadata or anything like that,

54
00:03:37.550 --> 00:03:40.580
you wanna be pretty careful about that.

55
00:03:40.580 --> 00:03:46.450
It can be useful to
just not set like it so

56
00:03:46.450 --> 00:03:51.420
as an example, we set the Cloudinary API
secret in Gatsby config.

57
00:03:52.710 --> 00:03:56.280
Another way that you can approach
that with really sensitive stuff

58
00:03:56.280 --> 00:03:58.930
is you can say it needs to be
available in the environment.

59
00:03:58.930 --> 00:04:03.070
But it never actually gets set in
the config the code will just expect that,

60
00:04:03.070 --> 00:04:05.030
that environment variable is set.

61
00:04:05.030 --> 00:04:08.890
And that would avoid it getting
any potential for a leakage or

62
00:04:08.890 --> 00:04:11.730
things like that so
if you want to be really sure.

63
00:04:11.730 --> 00:04:15.040
You can just make sure that it doesn't
gets set in any of the configured or

64
00:04:15.040 --> 00:04:18.120
use anywhere other than
exactly what's needed.

65
00:04:19.460 --> 00:04:25.458
&gt;&gt; Speaker 3: So how about authenticated
templates versus unauthenticated?

66
00:04:25.458 --> 00:04:29.755
&gt;&gt; Jason Lengstorf: So authenticated
templates, as a general rule,

67
00:04:29.755 --> 00:04:37.548
my recommendation is don't pre-build any
data that shouldn't be publicly available.

68
00:04:37.548 --> 00:04:43.361
So what that means is if
you have a user dashboard.

69
00:04:43.361 --> 00:04:45.741
And that's got any kind
of sensitive data on it,

70
00:04:45.741 --> 00:04:47.848
You don't wanna build that ahead of time.

71
00:04:47.848 --> 00:04:51.000
You don't wanna put that into Gatsby's

72
00:04:51.000 --> 00:04:55.840
pipeline at all because any kind of
static asset can be compromised.

73
00:04:55.840 --> 00:04:58.690
And it's just easier to not
try to play that game so

74
00:04:58.690 --> 00:05:04.110
what's easier to do is to have someone
login within an OAuth workflow.

75
00:05:04.110 --> 00:05:08.810
And then only send back that data
if they have a valid token and

76
00:05:08.810 --> 00:05:10.740
just do it all on the client
side asynchronously.

77
00:05:12.560 --> 00:05:13.700
&gt;&gt; Speaker 4: Actually i have a question.

78
00:05:13.700 --> 00:05:14.220
&gt;&gt; Jason Lengstorf: Yeah, sure.

79
00:05:14.220 --> 00:05:17.720
&gt;&gt; Speaker 4: Regarding
the server side redirecting.

80
00:05:17.720 --> 00:05:20.930
&gt;&gt; Jason Lengstorf: Yeah.
&gt;&gt; Speaker 4: You had nullified here, but

81
00:05:20.930 --> 00:05:24.090
what if you were using
something like AWSS3?

82
00:05:25.930 --> 00:05:30.230
&gt;&gt; Jason Lengstorf: You can set it up,
I've done it and what did I use,

83
00:05:31.730 --> 00:05:37.900
Route 53, I think, is that right?

84
00:05:37.900 --> 00:05:42.620
There is a way to do it, I cannot remember
off the top of my head what it is but

85
00:05:42.620 --> 00:05:45.820
you set up the same sort of redirect.

86
00:05:45.820 --> 00:05:51.410
But I don't remember which part of the AWS
suite of services actually handled it.

87
00:05:51.410 --> 00:05:54.470
But if you were using,
like if you're deploying to DigitalOcean.

88
00:05:54.470 --> 00:05:57.920
Or another kind of container based
service, you would use Apache or

89
00:05:57.920 --> 00:05:59.920
NGINX to set up these routes.

90
00:05:59.920 --> 00:06:04.040
Managed services like Nullify tend to
have configuration based redirects.

91
00:06:04.040 --> 00:06:06.800
So anywhere where you're gonna

92
00:06:06.800 --> 00:06:09.280
deploy it most likely you'll
be able to make it happen.

93
00:06:09.280 --> 00:06:13.560
It's just a matter of what your
particular flavor of deployment

94
00:06:15.360 --> 00:06:18.040
requires for redirects.

95
00:06:18.040 --> 00:06:21.280
&gt;&gt; Speaker 4: I guess my question,
thank you for

96
00:06:21.280 --> 00:06:24.910
the answer, it's entirely obvious
to me now that you said it right,

97
00:06:24.910 --> 00:06:28.400
you have to do the server
side configuration for that.

98
00:06:28.400 --> 00:06:33.090
But a lot of servers will just like if
it doesn't recognize the path, right,

99
00:06:33.090 --> 00:06:36.460
it returns index dot
whatever like that HTML.

100
00:06:36.460 --> 00:06:38.260
&gt;&gt; Jason Lengstorf: All right.
&gt;&gt; Speaker 4: Is there a Gatsby config you

101
00:06:38.260 --> 00:06:43.240
can use in that scenarios,
you know what, when?

102
00:06:44.340 --> 00:06:48.681
&gt;&gt; Jason Lengstorf: Well, so
the thing is with routes like that,

103
00:06:48.681 --> 00:06:55.897
you'll never get to Gatsby so if Gatsby
is only set up for like slash surge.

104
00:06:55.897 --> 00:07:01.610
Then the only thing that exists in the
file system is a folder/search index.html.

105
00:07:01.610 --> 00:07:05.878
So the server itself needs to handle
that redirect because otherwise,

106
00:07:05.878 --> 00:07:09.588
like Gatsby, we would have to
declare every possible route.

107
00:07:09.588 --> 00:07:13.300
And every possible combination
of characters to manage that.

108
00:07:13.300 --> 00:07:18.990
And it's, I mean, that's obviously
gonna be very not feasible.

109
00:07:18.990 --> 00:07:21.384
If you're using serverless,

110
00:07:21.384 --> 00:07:26.456
you don't have to stand up
a Digital Ocean box with a NGINX proxy.

111
00:07:26.456 --> 00:07:30.168
That wraps your node server
that serves your static assets,

112
00:07:30.168 --> 00:07:34.080
those sorts of problems just
kind of disappear, right?

113
00:07:34.080 --> 00:07:35.580
And that doesn't mean they go away,

114
00:07:35.580 --> 00:07:38.360
they're now on somebody else's
computer and not yours.

115
00:07:38.360 --> 00:07:41.682
But the services are becoming
very stable and reliable and

116
00:07:41.682 --> 00:07:45.156
affordable which means that for
us as front end developers.

117
00:07:45.156 --> 00:07:48.620
We just get to hand off a huge
number of our problems.

118
00:07:48.620 --> 00:07:53.267
And trust that someone who is
probably better at back end than we

119
00:07:53.267 --> 00:07:56.520
are is doing it in the best
way they know how.

120
00:07:57.690 --> 00:07:59.676
So there are always
trade offs with this but

121
00:07:59.676 --> 00:08:01.726
to me it's really exciting because again.

122
00:08:01.726 --> 00:08:05.832
The same way that Gatsby takes all this
boiler plate out of the front end,

123
00:08:05.832 --> 00:08:07.727
the jam stack, the serverless.

124
00:08:07.727 --> 00:08:13.022
And the infrastructure as a service stuff
that's out there is removing the need for

125
00:08:13.022 --> 00:08:16.810
a whole bunch of boiler plate
on the back end as well.

126
00:08:16.810 --> 00:08:19.330
And that gives us just, I mean,

127
00:08:19.330 --> 00:08:21.940
we can get complete parity with
what you used to have to build.

128
00:08:21.940 --> 00:08:23.330
A full fledged server and

129
00:08:23.330 --> 00:08:27.890
API 4 with a couple lines of JavaScript
and a serverless function now.

130
00:08:27.890 --> 00:08:31.745
&gt;&gt; Speaker 4: TypeScript support,
just Gatsby'll do it out of the box.

131
00:08:31.745 --> 00:08:34.716
Is there a configuration that-
&gt;&gt; Jason Lengstorf: There's a plugin and

132
00:08:34.716 --> 00:08:36.870
it's called Gatsby plugin TypeScript.

133
00:08:36.870 --> 00:08:41.984
That should add support,
like with one line of config.

134
00:08:41.984 --> 00:08:46.780
I'm not a TypeScript developer, so
I'm not sure to be completely honest.

