WEBVTT

1
00:00:00.519 --> 00:00:03.809
[MUSIC]

2
00:00:03.809 --> 00:00:07.170
&gt;&gt; Jon: This one's a little bit more
open ended as far as the challenges go.

3
00:00:07.170 --> 00:00:13.550
I have this profiling page here and
there's a lot of stuff wrong with it.

4
00:00:13.550 --> 00:00:17.580
It's super, super slow but I thought it
would be a good opportunity for everybody

5
00:00:17.580 --> 00:00:23.090
to take 10 or 15, do the audit on it,
see what it comes back with do a timeline.

6
00:00:23.090 --> 00:00:25.140
So go to timeline and
hit refresh and record and

7
00:00:25.140 --> 00:00:28.240
like just kind of start peeking around and
seeing like what

8
00:00:28.240 --> 00:00:32.670
kind of stuff is a problem like is too
much painting, is it too much JavaScript.

9
00:00:32.670 --> 00:00:36.000
Can you maybe click through and
figure out you what painting or

10
00:00:36.000 --> 00:00:37.500
what JavaScript it is?

11
00:00:37.500 --> 00:00:41.335
Just kind of familiarizing yourself
with the timeline and the audit panel.

12
00:00:41.335 --> 00:00:44.373
Yeah.
&gt;&gt; Speaker 2: One quick question from John

13
00:00:44.373 --> 00:00:45.470
online.

14
00:00:45.470 --> 00:00:49.660
Can you explain what each
level means is the top

15
00:00:49.660 --> 00:00:54.330
level the main processing thread?
&gt;&gt; Jon: Okay, so as far as like

16
00:00:54.330 --> 00:00:58.250
this stuff goes this is all within the
main thread, this is just a call stack.

17
00:00:58.250 --> 00:01:00.840
It's another way of
visualizing the call stack.

18
00:01:00.840 --> 00:01:04.810
So like in the sources were doing
the debugging it was just flat and

19
00:01:04.810 --> 00:01:05.760
it went all the way down.

20
00:01:05.760 --> 00:01:06.700
This is like that,

21
00:01:06.700 --> 00:01:10.680
except the width of each method is
determined by actually how long it took.

22
00:01:10.680 --> 00:01:14.148
So kind of imagine instead of that nice
pretty table you've got these like shapes.

23
00:01:14.148 --> 00:01:19.044
And then however, if you minimize the main
thread you can actually see stuff that

24
00:01:19.044 --> 00:01:23.724
was like tossed off of the GPU and a bunch
other stuff we're going to cover that

25
00:01:23.724 --> 00:01:28.476
a little bit later but basically like I
don't know if you've ever heard like if

26
00:01:28.476 --> 00:01:31.738
you do a CSS animation the GPU
can help accelerate it.

27
00:01:31.738 --> 00:01:35.238
Where as like JavaScript animations
they can stuff like that so

28
00:01:35.238 --> 00:01:39.080
there's like a work that can be
tossed off to the GPU when available.

29
00:01:40.620 --> 00:01:44.640
So yes you can see kind of what works
going on on the GPU side as well.

30
00:01:44.640 --> 00:01:46.300
But yeah this is all a single threaded so

31
00:01:46.300 --> 00:01:48.610
this is the one thread it's
just a call stack going down.

32
00:01:48.610 --> 00:01:52.280
So again like tall functions are not
what you want to worry about.

