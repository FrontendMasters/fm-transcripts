WEBVTT

1
00:00:00.000 --> 00:00:03.738
[MUSIC]

2
00:00:03.738 --> 00:00:07.162
&gt;&gt; Jon Kuperman: So I hope that it was
easy to find that there was a problem, but

3
00:00:07.162 --> 00:00:10.049
I'm assume,
as is usually the case that it was much

4
00:00:10.049 --> 00:00:13.290
harder to figure out what
the problem was or how to fix it.

5
00:00:13.290 --> 00:00:16.250
I think that's usually the way
it goes with memory leaks.

6
00:00:17.460 --> 00:00:21.300
But so I would start off,
I think I put some hints.

7
00:00:23.230 --> 00:00:24.980
I'd start off with a Timeline recording.

8
00:00:24.980 --> 00:00:27.048
I just always start with a Timeline.

9
00:00:27.048 --> 00:00:32.030
I don't know, I guess it's probably
I'm most comfortable panel but

10
00:00:32.030 --> 00:00:37.130
it's also the easiest view in my opinion
to see for having a problem or not.

11
00:00:37.130 --> 00:00:41.590
So I expanded all the way out, yeah.

12
00:00:41.590 --> 00:00:44.180
So this time, sorry,
instead of doing the on page load,

13
00:00:44.180 --> 00:00:47.760
we wanna actually make a recording
of the page being loaded.

14
00:00:47.760 --> 00:00:49.078
Because we're not looking for

15
00:00:49.078 --> 00:00:51.927
memory leaks with the page loading
which is almost never the case.

16
00:00:51.927 --> 00:00:55.748
So if you're looking for memory leaks,
you wanna do one of these, start and stop,

17
00:00:55.748 --> 00:00:57.750
after the page is loaded.

18
00:00:57.750 --> 00:01:00.796
And here's kind of one of the jigsaws
like I was talking about so

19
00:01:00.796 --> 00:01:03.720
we've got kinda two
different jigsaws going on.

20
00:01:03.720 --> 00:01:07.940
So we've got this nodes one is a very
classic jigsaw if I may say so

21
00:01:07.940 --> 00:01:11.800
myself, just more and more and
more being allocated.

22
00:01:11.800 --> 00:01:14.610
And it never being garbage collected.

23
00:01:14.610 --> 00:01:16.397
And then this JavaScript heap.

24
00:01:16.397 --> 00:01:21.085
This is another pretty common pattern
which is that it's generating a ton of

25
00:01:21.085 --> 00:01:23.630
code somewhere, a lot of memory.

26
00:01:23.630 --> 00:01:27.090
And then garbage collection kicks in and
it's dropping.

27
00:01:27.090 --> 00:01:30.290
Except we can see that each time
it doesn't quite drop all the way.

28
00:01:30.290 --> 00:01:31.220
So it is getting higher.

29
00:01:31.220 --> 00:01:32.350
So they're both jigsawing.

30
00:01:32.350 --> 00:01:34.200
So we've got two problems.

31
00:01:34.200 --> 00:01:38.975
One is some sort of elements being created
somewhere, I recognized these nodes.

32
00:01:38.975 --> 00:01:43.748
And then alternatively we've got some
kind of loop or iteration something's

33
00:01:43.748 --> 00:01:48.430
going on that is being garbage
collected but not all the way.

34
00:01:48.430 --> 00:01:50.870
So knowing that there is a memory leak,

35
00:01:50.870 --> 00:01:55.370
the next thing that I would do
is go into the Profiles panel.

36
00:01:55.370 --> 00:01:58.098
And I probably just
kinda refresh the page.

37
00:01:58.098 --> 00:02:03.613
And get a Heap Snapshot just like
where are we at from a fresh page.

38
00:02:03.613 --> 00:02:07.472
And you can play around here a little bit,
seeing what the biggest thing is,

39
00:02:07.472 --> 00:02:09.658
there's kinda give away already in here.

40
00:02:09.658 --> 00:02:13.351
So the biggest thing by
far are these strings,

41
00:02:13.351 --> 00:02:16.674
full of the letter x and some other stuff.

42
00:02:16.674 --> 00:02:19.092
And the second biggest
thing are these arrays.

43
00:02:19.092 --> 00:02:23.986
So again, I guess I like to take
the approach before I dive too deeper just

44
00:02:23.986 --> 00:02:25.681
hitting all the panels.

45
00:02:25.681 --> 00:02:27.798
And trying to get in my head,

46
00:02:27.798 --> 00:02:32.270
getting in the head space of
what the problems likely are.

47
00:02:32.270 --> 00:02:34.710
Before I have to dig into the code to be,
but

48
00:02:34.710 --> 00:02:36.890
you know it's all those videos
that I have on the page.

49
00:02:36.890 --> 00:02:40.660
So now here I'm, okay so we've got
JavaScript and we've got some elements.

50
00:02:40.660 --> 00:02:41.550
Now we've got strings,

51
00:02:41.550 --> 00:02:45.570
we've got arrays, I'm trying to keep
in mind everything that's going on.

52
00:02:45.570 --> 00:02:48.660
So then yeah I guess hit
this Do some work button,

53
00:02:48.660 --> 00:02:52.740
give that a second then
I go back to Profiles.

54
00:02:52.740 --> 00:02:54.210
And take another Heap Snapshot.

55
00:02:55.710 --> 00:02:59.201
So at this point, I've got two, I can see
there dramatically different in size.

56
00:02:59.201 --> 00:03:02.589
So this one 61 megabytes,
this one's only 11.

57
00:03:02.589 --> 00:03:06.369
And then I can switch from the Summary
view to the Comparison view and

58
00:03:06.369 --> 00:03:08.037
compare it with Snapshot 1.

59
00:03:08.037 --> 00:03:12.808
And again we have this huge
Size Delta of these strings which is

60
00:03:12.808 --> 00:03:15.820
the same kinda xxx-string.

61
00:03:15.820 --> 00:03:19.328
So from there, there's a couple of
different ways that you could go at

62
00:03:19.328 --> 00:03:23.349
it.
&gt;&gt; Jon Kuperman: It gets a little bit

63
00:03:23.349 --> 00:03:27.100
tricky as again, it's not as
simple as when you're doing those

64
00:03:27.100 --> 00:03:30.588
JavaScript profiling,
that's as accurate as you can be.

65
00:03:30.588 --> 00:03:34.782
Cuz it'll be, this line of this file
caused this thing to happen, right.

66
00:03:34.782 --> 00:03:38.819
Whereas, with the memory allocation
a lot of times it's like,

67
00:03:38.819 --> 00:03:41.456
it can tell you what it's experiencing.

68
00:03:41.456 --> 00:03:45.109
That you've been requesting a ton of
strings or something like that but it's

69
00:03:45.109 --> 00:03:49.000
not quite as accurate as like, bam here's
where all the strings are coming from.

70
00:03:49.000 --> 00:03:53.757
Because those variables, those data
structures come from multiple places,

71
00:03:53.757 --> 00:03:54.950
right.

72
00:03:54.950 --> 00:03:58.132
Lots of things can generate strings or
arrays or things like that.

73
00:03:58.132 --> 00:03:59.110
So if we wanted to,

74
00:03:59.110 --> 00:04:03.386
we could have used some of these tools as
well just to see that it's kinda growing.

75
00:04:03.386 --> 00:04:05.400
It all kinda gets you
the same information, right,

76
00:04:05.400 --> 00:04:08.020
like memories growing, stuff like that.

77
00:04:08.020 --> 00:04:09.430
So yeah, from here we can kind of,

78
00:04:10.650 --> 00:04:14.310
I mean we could do it a couple of
different ways of going through.

79
00:04:14.310 --> 00:04:19.110
I thought somebody had asked what distance
was, it was a really good question.

80
00:04:19.110 --> 00:04:21.780
I don't know how useful distances but

81
00:04:21.780 --> 00:04:26.224
the distance is the distance from
the global object basically.

82
00:04:26.224 --> 00:04:31.320
So it's in this case since around web,
Windows the global object so

83
00:04:31.320 --> 00:04:37.410
it's like your how many steps it takes to
get to this element from Window, yeah.

84
00:04:39.660 --> 00:04:41.620
So yeah basically about
all these strings and

85
00:04:41.620 --> 00:04:45.920
I saw a lot of people I know some people
were like running the button over and

86
00:04:45.920 --> 00:04:48.010
over again and
seeing that it was crashing or whatever.

87
00:04:48.010 --> 00:04:51.486
So one approach that might be interesting
to take is you could go back to this

88
00:04:51.486 --> 00:04:55.366
button kinda keeping it a little bit more
old school like we're working on before.

89
00:04:55.366 --> 00:04:58.632
And looking at Event Listeners or
something like that.

90
00:04:58.632 --> 00:05:05.888
Why don't I, uh-oh.
&gt;&gt; Jon Kuperman: I'm not seeing it,

91
00:05:05.888 --> 00:05:13.198
hold on a second.
&gt;&gt; Jon Kuperman: No,

92
00:05:13.198 --> 00:05:16.950
all right, maybe we can't do that.

93
00:05:16.950 --> 00:05:19.820
There should be an Event Listener
in there somewhere.

94
00:05:19.820 --> 00:05:22.375
I'm wondering if it's just that
it's going through jQuery.

95
00:05:22.375 --> 00:05:25.360
And it's not registering as
an actual Event Listener.

96
00:05:25.360 --> 00:05:27.450
I have to look into that,
that might be what it is.

97
00:05:27.450 --> 00:05:31.830
Although jQuery should be
adding the Event Listener.

98
00:05:31.830 --> 00:05:32.820
Anyway, sorry about that.

99
00:05:34.550 --> 00:05:39.445
So yeah basically,
that's not even going through jQuery.

100
00:05:39.445 --> 00:05:43.425
Basically what's going on here it's just
some memory leak that I thought of writing

101
00:05:43.425 --> 00:05:44.355
really quickly.

102
00:05:44.355 --> 00:05:47.745
But it's got two different problems to it.

103
00:05:47.745 --> 00:05:52.575
The main thing is that
we've got this setTimeout

104
00:05:52.575 --> 00:05:57.005
which calls grow and then grow which calls
setTimeout so it's a circular reference.

105
00:05:58.525 --> 00:06:01.905
It's a very, very vague form but another
common form of memory leaks in JavaScript

106
00:06:01.905 --> 00:06:07.640
if you have foo has some mention
the bar and bar has any mention of foo.

107
00:06:07.640 --> 00:06:10.540
Neither can ever be garbage collected
because they'll both forever have

108
00:06:10.540 --> 00:06:12.380
a reference to each other.

109
00:06:12.380 --> 00:06:15.300
This one's even more severe because
it's actually calling it over and

110
00:06:15.300 --> 00:06:16.030
over and over again.

111
00:06:16.030 --> 00:06:19.972
So you get this infinite,
in an infinite loop of calling it.

112
00:06:19.972 --> 00:06:22.874
And then I just have this,
I don't know, some huge leap,

113
00:06:22.874 --> 00:06:24.790
I think arrays money wrote this code.

114
00:06:24.790 --> 00:06:27.164
And I found it on some
memory leak website but

115
00:06:27.164 --> 00:06:29.934
basically it just goes from
a hundred down to zero.

116
00:06:29.934 --> 00:06:36.720
And it creates a div and it adds a bunch
of date time to string kinda things.

117
00:06:36.720 --> 00:06:37.664
And then it just appends those Child.

118
00:06:37.664 --> 00:06:41.768
So there's two different things
going on that's where we saw,

119
00:06:41.768 --> 00:06:45.570
with the grow, that array is
able to be garbage collected.

120
00:06:45.570 --> 00:06:49.557
Which is why you are seeing the actual
JavaScript blue kinda able to go

121
00:06:49.557 --> 00:06:50.321
up and down.

122
00:06:50.321 --> 00:06:54.765
Stuff that's being appended in the nodes
category that was the one that we saw it

123
00:06:54.765 --> 00:06:59.497
was, sorry, a very classic jigsaw, none
of that ever getting garbage collected.

124
00:06:59.497 --> 00:07:04.411
So yeah basically you can,
[LAUGH] anyway, looks like I don't have

125
00:07:04.411 --> 00:07:08.994
a Event Listener which is why I
didn't see an Event Listener.

126
00:07:08.994 --> 00:07:11.510
Unless I think I must
have removed that but so

127
00:07:11.510 --> 00:07:14.034
that's the basic kind of concept of there.

128
00:07:14.034 --> 00:07:19.778
Again, these things are gonna be really
easy to spot and really hard to fix.

129
00:07:19.778 --> 00:07:22.722
Just because there's not
a one-to-one mapping on,

130
00:07:22.722 --> 00:07:25.249
this memory comes from
this line of JavaScript.

131
00:07:25.249 --> 00:07:27.453
It doesn't have that capability,
it's more,

132
00:07:27.453 --> 00:07:30.826
you're allocating a ton of strings or
a bunch of objects or arrays.

133
00:07:30.826 --> 00:07:33.260
And you kinda use the tools
between Timeline and

134
00:07:33.260 --> 00:07:35.482
Profile to get a better
idea of what's going on.

135
00:07:35.482 --> 00:07:39.953
But yeah, I mean ultimately it's gonna
come down until you either taking

136
00:07:39.953 --> 00:07:43.356
a profile approach, or
you looking through your code.

137
00:07:43.356 --> 00:07:46.320
And trying to figure out what's
causing those kind of things.

138
00:07:46.320 --> 00:07:50.250
Is that pretty clear at least being
able to identify that there are problems

139
00:07:50.250 --> 00:07:52.490
was clear for everybody, cool.

