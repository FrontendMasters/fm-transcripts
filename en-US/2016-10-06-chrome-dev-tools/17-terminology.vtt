WEBVTT

1
00:00:00.000 --> 00:00:03.669
[MUSIC]

2
00:00:03.669 --> 00:00:05.710
&gt;&gt; Jon Kuperman: Okay, so
we've got terminology.

3
00:00:05.710 --> 00:00:10.170
So, if you hover and
hold shift over any one of these things.

4
00:00:10.170 --> 00:00:16.250
Let's find a juicy one,
&gt;&gt; Jon Kuperman: Like this one, all right.

5
00:00:16.250 --> 00:00:19.590
So, I'm gonna hold shift while I hover
over this and I get this modal pop up.

6
00:00:20.710 --> 00:00:24.270
So, we've got a bunch of different terms
here and each term gets its own color.

7
00:00:24.270 --> 00:00:27.130
On a more interesting site, like if you do
this on your production site you'll see

8
00:00:27.130 --> 00:00:28.960
a lot more colors than just green and
blue.

9
00:00:28.960 --> 00:00:31.670
You'll see like oranges and
yellows and all that kind of stuff.

10
00:00:31.670 --> 00:00:33.790
So, we've got all these different terms.

11
00:00:33.790 --> 00:00:36.170
So, I'm gonna cover each one of them and
then kind of come back and

12
00:00:36.170 --> 00:00:40.930
we can take a look at it because the terms
matter as much as the time loaded.

13
00:00:40.930 --> 00:00:42.569
Cuz you need to figure out
what's actually wrong.

14
00:00:43.590 --> 00:00:48.850
So, we've got queuing, so
if you see queuing taking a long time

15
00:00:48.850 --> 00:00:50.960
there's a couple of
things that can happen.

16
00:00:50.960 --> 00:00:53.210
One thing is that browsers
try to be smart and

17
00:00:53.210 --> 00:00:57.390
they try to prioritize each
item by the type that it is.

18
00:00:57.390 --> 00:01:02.580
So, we can see that and
over here there's a priority tab, right?

19
00:01:02.580 --> 00:01:05.620
So, you can see is that the highest
priority of the document,

20
00:01:05.620 --> 00:01:07.618
we need the document, you need the CSS.

21
00:01:07.618 --> 00:01:11.080
And then JavaScript high.

22
00:01:11.080 --> 00:01:11.940
It's really important but

23
00:01:11.940 --> 00:01:14.920
it's not as important as the CSS
cuz CSS needs to be there.

24
00:01:14.920 --> 00:01:18.320
And then if you ended up with stuff
like a bunch of images or fonts or

25
00:01:18.320 --> 00:01:20.520
things like that you'll see
the priorities kinda going down.

26
00:01:20.520 --> 00:01:23.884
So, an item might be queuing even
though it's an earlier request cuz

27
00:01:23.884 --> 00:01:26.621
Chrome doesn't think it's
a very important request.

28
00:01:27.998 --> 00:01:32.030
&gt;&gt; Jon Kuperman: It can also be waiting on
hold, again, like I said you can only have

29
00:01:32.030 --> 00:01:36.250
so many, here it is it's six,
I think I said five earlier.

30
00:01:36.250 --> 00:01:39.190
Chrome can only handle
six concurrent requests.

31
00:01:39.190 --> 00:01:43.090
So, if for the very beginning of your
document you have seven style sheets.

32
00:01:43.090 --> 00:01:47.340
The seventh one is gonna be queued,
put on hold, until the six have completed.

33
00:01:48.890 --> 00:01:51.890
And then, yeah, this is like disk cache
entries, that's not really important.

34
00:01:51.890 --> 00:01:55.820
Really if you're seeing queuing,
it's either, it's a low priority item or

35
00:01:55.820 --> 00:02:00.520
it's marked that way, or it's too many
requests and you can't do that one.

36
00:02:00.520 --> 00:02:01.950
So, that's queueing.

37
00:02:01.950 --> 00:02:03.530
The next one is stalled or blocking.

38
00:02:04.720 --> 00:02:08.710
It's like the same thing as queuing,
they're very similar.

39
00:02:08.710 --> 00:02:09.224
Stalled or

40
00:02:09.224 --> 00:02:12.949
blocking also might be indicative of
you having a proxy server that's slow.

41
00:02:12.949 --> 00:02:15.377
So if you have like some
caching server somewhere and

42
00:02:15.377 --> 00:02:18.247
you're seeing a big stalled and
blocking in a small queuing,

43
00:02:18.247 --> 00:02:21.410
there's a good chance that your
proxy server is taking a long time.

44
00:02:22.620 --> 00:02:24.234
And that's what's causing it.

45
00:02:24.234 --> 00:02:25.993
Usually, you see queuing as the,

46
00:02:25.993 --> 00:02:28.970
if there's a latency it's
gonna be in the queuing field.

47
00:02:30.500 --> 00:02:33.510
Also you'll see some information here,
this is just a timestamp of

48
00:02:33.510 --> 00:02:37.662
how long the proxy negotiations took,
so as like the DNS call goes out.

49
00:02:37.662 --> 00:02:41.461
I don't wanna get I guess too far in
to the that working, I just want you to

50
00:02:41.461 --> 00:02:45.220
understand okay, I have a really wide
bar but why is it, why is it slow?

51
00:02:45.220 --> 00:02:49.901
DNS look up, again I don't think I've
ever run into this being the cause of

52
00:02:49.901 --> 00:02:51.992
anything slow but it is worth it.

53
00:02:51.992 --> 00:02:54.869
It's kinda cool that every
request Chrome sends out,

54
00:02:54.869 --> 00:02:57.380
it timestamps each step of the process for
you.

55
00:02:57.380 --> 00:03:00.909
So yeah, this is just like
hitting a domain name service and

56
00:03:00.909 --> 00:03:03.250
transferring your IP to a domain name.

57
00:03:03.250 --> 00:03:06.596
Establishing a connection, this could be,

58
00:03:06.596 --> 00:03:11.710
I have never seen this one slow either,
it is part of TCP handshakes.

59
00:03:11.710 --> 00:03:15.534
It could be failing and retrying and
also how long it takes to make the SSL

60
00:03:15.534 --> 00:03:19.460
connection but
I've never seen this one as a problem.

61
00:03:19.460 --> 00:03:22.730
So, if you see as a problem you're on
your own but feel free to tweet at me and

62
00:03:22.730 --> 00:03:23.713
I help you investigate.

63
00:03:25.120 --> 00:03:27.540
This is just the pure SSL part of it.

64
00:03:27.540 --> 00:03:32.480
And then the actual time of the network
request, how long the request sent.

65
00:03:32.480 --> 00:03:36.760
And so, it's the time that it took

66
00:03:38.170 --> 00:03:41.060
the server to start sending
the request basically.

67
00:03:44.100 --> 00:03:48.980
This one is how long it took
from when the request was sent

68
00:03:48.980 --> 00:03:51.310
until the first byte was
received by the browser.

69
00:03:52.380 --> 00:03:57.530
And so, this is where things kind of get
interesting where it's most commonly your

70
00:03:57.530 --> 00:04:02.490
problem is gonna be in some a slow server,
a slow network connection, a big files.

71
00:04:02.490 --> 00:04:03.830
Here's where we really start seeing that.

72
00:04:03.830 --> 00:04:07.873
So, this is like I send off a request for
a stylesheet and

73
00:04:07.873 --> 00:04:11.841
then I get a timestamp,
1:00 PM request was sent.

74
00:04:11.841 --> 00:04:15.261
And then time to first byte
received is like 1:02 PM,

75
00:04:15.261 --> 00:04:18.265
obviously it would be
milliseconds not minutes.

76
00:04:18.265 --> 00:04:22.796
But, so now you're like, okay, it took you
not a lot of time to send the file, but

77
00:04:22.796 --> 00:04:25.193
it took me a really long
time to receive it.

78
00:04:25.193 --> 00:04:26.730
It's probably a network issue.

79
00:04:26.730 --> 00:04:29.060
Or it took you a really
long time to send it,

80
00:04:29.060 --> 00:04:32.350
I received it just fine after you finally
started, it's probably a slow server.

81
00:04:33.430 --> 00:04:37.670
And then this is just like the actual
process of those bytes coming down, so

82
00:04:37.670 --> 00:04:40.370
this is gonna be purely
your network connection.

83
00:04:40.370 --> 00:04:46.050
But if you're seeing slow content download
you probably don't think my gosh,

84
00:04:46.050 --> 00:04:47.400
my users need to be faster.

85
00:04:47.400 --> 00:04:49.940
You probably wanna start thing about how
you can make your files smaller, right?

86
00:04:49.940 --> 00:04:55.805
Because if you as a web developer likely
from this class in a first world country,

87
00:04:55.805 --> 00:04:58.560
on a powerful machine like
a MacBook Pro or something.

88
00:04:58.560 --> 00:05:00.620
If you're seeing long
content download times,

89
00:05:00.620 --> 00:05:05.934
you gotta believe a lot of your users
are having excruciating download times.

90
00:05:05.934 --> 00:05:08.990
Cool, so having said that we
can start holding shift and

91
00:05:08.990 --> 00:05:12.630
taking a look at some of these,
so you can see it queued for

92
00:05:12.630 --> 00:05:15.380
6 milliseconds, that's nothing,
not worry about that at all.

93
00:05:15.380 --> 00:05:16.330
It wasn't stalled for

94
00:05:16.330 --> 00:05:19.660
very long either probably just the time
it took to negotiate all that stuff.

95
00:05:19.660 --> 00:05:22.070
The request was sent
basically immediately, so

96
00:05:22.070 --> 00:05:24.030
my server is doing a really good job.

97
00:05:24.030 --> 00:05:28.740
And then it's like I didn't start
receiving the first byte for,

98
00:05:28.740 --> 00:05:30.730
I think that's really fast,
100 milliseconds.

99
00:05:30.730 --> 00:05:34.150
But that's like the one thing I might
might keep my eye on or whatever.

100
00:05:34.150 --> 00:05:37.875
Is maybe I could send less or
maybe I could, things like that.

101
00:05:37.875 --> 00:05:40.060
The content download didn't
even take a millisecond,

102
00:05:40.060 --> 00:05:40.880
so I'm really happy with that.

103
00:05:40.880 --> 00:05:45.038
So, out of anything here, I mean,
I think this is a great chart but

104
00:05:45.038 --> 00:05:49.690
out of anything here is like time to first
bite was kind of what took a while, so

105
00:05:49.690 --> 00:05:52.190
I might start investigating
that little bit.

106
00:05:52.190 --> 00:05:56.820
Again, on a big production app, you'll
start seeing a ton of different colors.

107
00:05:56.820 --> 00:05:58.180
And you'll start really seeing,

108
00:05:59.390 --> 00:06:03.596
this file took a second to download,
or something like that.

109
00:06:03.596 --> 00:06:06.150
And we're gonna do some examples
where there are some really bad ones.

110
00:06:06.150 --> 00:06:08.539
So, just kind of important to go over,
yeah?

111
00:06:08.539 --> 00:06:10.138
&gt;&gt; Speaker 2: Yeah,
I just wanna point out,

112
00:06:10.138 --> 00:06:12.989
some of us aren't seeing
the priority column.

113
00:06:12.989 --> 00:06:13.853
&gt;&gt; Jon Kuperman: So sorry.

114
00:06:13.853 --> 00:06:15.428
&gt;&gt; Speaker 2: Yeah,
if you right click on there.

115
00:06:15.428 --> 00:06:16.040
&gt;&gt; Jon Kuperman: So, yeah.

116
00:06:16.040 --> 00:06:17.910
So, mine's over here.

117
00:06:17.910 --> 00:06:20.510
There's actually a bunch of
extra columns you can add, so

118
00:06:20.510 --> 00:06:27.890
you can right click on any one of these
and make sure that priority is checked.

119
00:06:27.890 --> 00:06:29.870
For those that aren't seeing it-
&gt;&gt; Speaker 3: Not even in

120
00:06:29.870 --> 00:06:30.930
the list of available.

121
00:06:32.220 --> 00:06:33.782
&gt;&gt; Jon Kuperman: Really?
&gt;&gt; Speaker 2: It is for me.

122
00:06:33.782 --> 00:06:34.339
&gt;&gt; Speaker 4: Yeah, I was able to do it.

123
00:06:34.339 --> 00:06:35.758
&gt;&gt; Jon Kuperman: [LAUGH] Okay.

124
00:06:39.487 --> 00:06:40.818
&gt;&gt; Jon Kuperman: Yeah, it's not there.

125
00:06:40.818 --> 00:06:41.593
&gt;&gt; Speaker 4: It's not in your list?

126
00:06:41.593 --> 00:06:42.204
&gt;&gt; Speaker 5: [CROSSTALK] protocol.

127
00:06:42.204 --> 00:06:42.990
&gt;&gt; Speaker 3: I don't think so.

128
00:06:42.990 --> 00:06:44.397
&gt;&gt; Speaker 6: Hit right [CROSSTALK].

129
00:06:44.397 --> 00:06:47.361
&gt;&gt; Speaker 7: Jon,
you have a secret version of- [CROSSTALK]

130
00:06:47.361 --> 00:06:48.297
&gt;&gt; Jon Kuperman: Well somebody sees

131
00:06:48.297 --> 00:06:48.941
it, right?

132
00:06:48.941 --> 00:06:49.578
&gt;&gt; Speaker 2: I see it.

133
00:06:49.578 --> 00:06:50.557
&gt;&gt; Speaker 4: I see it.

134
00:06:50.557 --> 00:06:52.186
&gt;&gt; Jon Kuperman: There we go.

135
00:06:52.186 --> 00:06:58.720
Sorry, yeah, I mean so again it's,
[LAUGH] they move fast, things change.

136
00:06:58.720 --> 00:07:03.908
Priority is not really important because
you can figure it out just by file type.

137
00:07:03.908 --> 00:07:07.833
That's really all it's doing, so it's
gonna give the document the high end CSS

138
00:07:07.833 --> 00:07:11.480
the highest priority, because those
are absolutely crucial for render.

139
00:07:11.480 --> 00:07:16.215
And it's going to give all JavaScript
high priority because we'd like to have

140
00:07:16.215 --> 00:07:17.010
that stuff.

141
00:07:17.010 --> 00:07:21.820
And then things like Async or deferred
scripts, anything like that, images,

142
00:07:21.820 --> 00:07:24.810
all that kind of stuff is gonna start
slowly trickle down the priority line.

143
00:07:24.810 --> 00:07:26.460
Sorry if you're not seeing it.

144
00:07:26.460 --> 00:07:30.330
I'm not sure why but it is not vital for

145
00:07:30.330 --> 00:07:32.580
any of the stuff that
we're gonna to be doing.

146
00:07:32.580 --> 00:07:36.904
&gt;&gt; Speaker 2: Next question is how
does the network tab work with HTTP

147
00:07:36.904 --> 00:07:39.067
streaming or WebSockets?

148
00:07:39.067 --> 00:07:43.870
&gt;&gt; Jon Kuperman: Yeah, so
basically yeah, so WebSockets will work.

149
00:07:45.870 --> 00:07:47.820
It basically works really well
with both of those things.

150
00:07:47.820 --> 00:07:53.400
So, it handles like Ajax, WebSocket
requests all as their own type and

151
00:07:53.400 --> 00:07:57.031
so you'll see a WebSocket
type event in here.

152
00:07:57.031 --> 00:08:01.454
And each transmission from it,
you'll see as a viewable,

153
00:08:01.454 --> 00:08:06.400
how long it took, how big it was,
all that kind of stuff, yeah?

154
00:08:06.400 --> 00:08:08.570
&gt;&gt; Speaker 8: The screenshots
thing was really interesting.

155
00:08:08.570 --> 00:08:12.110
But you had a ton of screenshots and
I have like two.

156
00:08:12.110 --> 00:08:13.810
&gt;&gt; Jon Kuperman: Okay,
I had a ton on Twitter.

157
00:08:14.870 --> 00:08:17.190
Because, and I didn't know
that they started doing this,

158
00:08:17.190 --> 00:08:21.670
they're fading those images
in on the home page.

159
00:08:21.670 --> 00:08:25.651
So there was a re-paint for
every one opacity that they filled in.

160
00:08:25.651 --> 00:08:29.479
So yeah, screenshots are gonna
be taken when an important

161
00:08:29.479 --> 00:08:31.832
up re-paint of any kind happened.

162
00:08:31.832 --> 00:08:37.279
So, on the current page that we're on
there's one initial paint is all there is.

163
00:08:37.279 --> 00:08:41.218
On a web application there's gonna be
like a ton of different paints as things

164
00:08:41.218 --> 00:08:41.890
go around.

165
00:08:41.890 --> 00:08:45.240
So yeah,
mileage may vary on those for sure.

166
00:08:45.240 --> 00:08:49.020
&gt;&gt; Speaker 8: So, it only generates a
screenshot when you're re-paints, not when

167
00:08:49.020 --> 00:08:53.150
it loads, well I suppose it re-paints
every time that loads a new resource.

168
00:08:53.150 --> 00:08:56.940
&gt;&gt; Jon Kuperman: Yeah, so it's not gonna
re-paint when it downloads a stylesheet,

169
00:08:56.940 --> 00:08:59.710
but it will re-paint if
it applies to anything.

170
00:08:59.710 --> 00:09:03.030
So, if you had a stylesheet
with no used rules in it,

171
00:09:03.030 --> 00:09:04.984
that wouldn't trigger a screenshot.

172
00:09:04.984 --> 00:09:05.970
But yeah, every image,

173
00:09:05.970 --> 00:09:09.510
every style change, every content change,
all that stuff will trigger one.

