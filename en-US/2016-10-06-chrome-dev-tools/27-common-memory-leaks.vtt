WEBVTT

1
00:00:00.000 --> 00:00:03.724
[MUSIC]

2
00:00:03.724 --> 00:00:07.880
&gt;&gt; Jon Kuperman: And then this is
the last section which is Memory Leaks.

3
00:00:07.880 --> 00:00:12.640
And before we go into memory leaks we
just need to cover a little bit of boring

4
00:00:12.640 --> 00:00:15.174
computer science stuff which
is Garbage Collection.

5
00:00:15.174 --> 00:00:18.830
So, there's kind of two kinds of
languages garbage collected and

6
00:00:18.830 --> 00:00:21.940
not garbage collected languages
JavaScript is garbage collected.

7
00:00:21.940 --> 00:00:25.160
And idea if you're in a not garbage
collected language you have to actually

8
00:00:25.160 --> 00:00:29.200
allocate all the memory you use and
de-allocate it when you're done.

9
00:00:29.200 --> 00:00:30.860
So, you've used old Objective C or

10
00:00:30.860 --> 00:00:35.360
something like that or to see where you
have to do like Malik to grab some memory.

11
00:00:35.360 --> 00:00:36.050
You have to be like, hey,

12
00:00:36.050 --> 00:00:39.490
I'm gonna make an array you give me
some memory you fully control it.

13
00:00:40.540 --> 00:00:44.880
But JavaScript and a lot of languages,
scripting languages all of them,

14
00:00:44.880 --> 00:00:46.420
use garbage collection.

15
00:00:46.420 --> 00:00:51.450
And so what garbage collection is a little
bit deeper down, is this is concept.

16
00:00:51.450 --> 00:00:53.210
They call it mark and sweep.

17
00:00:53.210 --> 00:00:58.410
And so, what it does is it goes and
it finds a list of all of the items,

18
00:00:58.410 --> 00:01:03.790
like all the memory allocated that
you have in the whole document.

19
00:01:03.790 --> 00:01:06.750
And then it's basically finding
which ones still maintain

20
00:01:06.750 --> 00:01:08.260
some kind of reference somewhere.

21
00:01:08.260 --> 00:01:12.040
So, if you have an object in memory, but

22
00:01:12.040 --> 00:01:16.730
you have nothing referencing it, no
nothing, not being passed into a function,

23
00:01:16.730 --> 00:01:18.560
not being used,
not being anything like that.

24
00:01:19.670 --> 00:01:21.390
It gets marked for deletion basically.

25
00:01:22.690 --> 00:01:23.720
So, it's a little bit complicated and

26
00:01:23.720 --> 00:01:25.830
we don't really need to
understand how it works exactly.

27
00:01:25.830 --> 00:01:28.670
It's just we need to
understand that with garbage

28
00:01:28.670 --> 00:01:31.770
collector languages it's all about
whether or not it has a reference still.

29
00:01:31.770 --> 00:01:34.244
If there's still anything using it or

30
00:01:34.244 --> 00:01:37.963
pointing at it it gets capped
otherwise it gets ditched.

31
00:01:37.963 --> 00:01:43.997
So, in that level, JavaScript can't have
memory leaks in the pure sense, right?

32
00:01:43.997 --> 00:01:47.770
Because memory gets
automatically deallocated.

33
00:01:47.770 --> 00:01:52.030
But what it can have is like user error,
where like a developer forgets to

34
00:01:53.310 --> 00:01:57.700
remove a pointer to something or
a developer forgets to clean things up.

35
00:01:57.700 --> 00:02:02.240
So, there's some basic types of memory
leaks that are really common but

36
00:02:02.240 --> 00:02:03.240
they really can range.

37
00:02:04.310 --> 00:02:05.321
They can be a lot of different things.

38
00:02:05.321 --> 00:02:10.234
So, the common ones that I've seen
a lot are the first one I call

39
00:02:10.234 --> 00:02:12.199
the accidental global.

40
00:02:12.199 --> 00:02:15.430
So, for those who have taken
some of the JavaScript classes.

41
00:02:15.430 --> 00:02:17.295
If you're not in script mode and

42
00:02:17.295 --> 00:02:21.867
you assign a variable like this without
bar const with a keyword declaration.

43
00:02:21.867 --> 00:02:24.235
What it does is it binds it to the window,
right?

44
00:02:24.235 --> 00:02:26.750
And the window is always gonna
have that reference to it.

45
00:02:26.750 --> 00:02:30.753
So, stuff that you pinned to the global
object is just gonna stick around forever.

46
00:02:30.753 --> 00:02:33.688
So, you probably meant to do for
the bar equals whatever and

47
00:02:33.688 --> 00:02:37.462
then it would have been garbage collected
as soon as that function was done.

48
00:02:37.462 --> 00:02:39.478
But in fact you're pinning
stuff to the window and

49
00:02:39.478 --> 00:02:41.260
it's just sticking around there forever.

50
00:02:42.970 --> 00:02:47.130
Another one is things like timeouts and
intervals can be really tricky.

51
00:02:48.560 --> 00:02:52.040
Especially if you don't
remember to stop them.

52
00:02:52.040 --> 00:02:56.290
So, if you have a set interval or a set
timeout that can dump into a variable that

53
00:02:56.290 --> 00:02:58.550
you could pause execution on or
stop execution.

54
00:02:58.550 --> 00:03:03.070
But I see there's a lot with any
kind of polling interval request.

55
00:03:03.070 --> 00:03:08.009
Just remember that whatever happens
inside that interval that is gonna

56
00:03:08.009 --> 00:03:12.299
stay in memory because the interval
is still referencing it.

57
00:03:12.299 --> 00:03:15.310
Another one is this is probably
the most common one I see.

58
00:03:15.310 --> 00:03:19.447
So, it's like as front-end
developers we often have this

59
00:03:19.447 --> 00:03:21.689
kind of duality the situation.

60
00:03:21.689 --> 00:03:26.628
Where we have DOM and
we're taking the DOM into memory.

61
00:03:26.628 --> 00:03:29.262
And by that I just mean if you
do a jQuery selector, okay?

62
00:03:29.262 --> 00:03:31.990
So, if you do jQuery selector button..

63
00:03:31.990 --> 00:03:32.910
So, you have the button.

64
00:03:32.910 --> 00:03:34.510
That's in the DOM that's one place but

65
00:03:34.510 --> 00:03:38.290
now you also have this memory in
memory representation of that button.

66
00:03:38.290 --> 00:03:40.120
And is important to memory of
those are two different things,

67
00:03:41.550 --> 00:03:45.640
if you get rid of one, it doesn't get
rid of the other one necessarily, right?

68
00:03:45.640 --> 00:03:50.510
So, if you do like var equals
a jQuery selector on a button.

69
00:03:50.510 --> 00:03:53.760
And then you set equals undefined.

70
00:03:53.760 --> 00:03:56.310
You know the button's not gonna
disappear off the website, right?

71
00:03:56.310 --> 00:03:59.208
Like cuz they're separate things,
it's like a copy.

72
00:03:59.208 --> 00:04:03.531
And so, what can happen is if you,
this is a contrived example,

73
00:04:03.531 --> 00:04:05.381
but if you grab the button.

74
00:04:05.381 --> 00:04:09.953
And then later you take care of it like
you have a single page apps you erase all

75
00:04:09.953 --> 00:04:11.150
that mark up.

76
00:04:11.150 --> 00:04:14.290
It's not gonna erase all that stuff
that you have in memory still holding

77
00:04:14.290 --> 00:04:15.060
on to that button.

78
00:04:15.060 --> 00:04:18.050
So, just kind of keeping in mind
whenever you're working with this.

79
00:04:19.340 --> 00:04:22.110
You got a bunch of HTML in your append it.

80
00:04:22.110 --> 00:04:25.070
Did you get rid of that, did you unset
that thing you know what I mean?

81
00:04:25.070 --> 00:04:27.500
And vice versa just because you're
removing something from the document

82
00:04:27.500 --> 00:04:28.980
doesn't mean you're
removing it from memory.

