WEBVTT

1
00:00:00.000 --> 00:00:03.934
[MUSIC]

2
00:00:03.934 --> 00:00:06.861
&gt;&gt; Jon Kuperman: So this one,
I'm gonna kind of just do together,

3
00:00:06.861 --> 00:00:10.975
cuz it's tiny and probably doesn't
merit its own full exercise, but

4
00:00:10.975 --> 00:00:15.368
it's kind of cool just that in multiple
ways, Chrome DevTools can help you

5
00:00:15.368 --> 00:00:18.924
really get a feel for
how long everything takes to execute and

6
00:00:18.924 --> 00:00:22.860
they just added a brand new UI for
it, which I think is really nice.

7
00:00:24.280 --> 00:00:29.180
So there's two ways to measure timing the
kinda old way is using the console.time

8
00:00:29.180 --> 00:00:30.894
API, which is pretty cool.

9
00:00:30.894 --> 00:00:34.318
So you do like console.time and
you pass in a unique string,

10
00:00:34.318 --> 00:00:37.410
like my edition function or
something like that.

11
00:00:37.410 --> 00:00:41.157
And then at the end of it, you do
console.time end and pass in the same

12
00:00:41.157 --> 00:00:45.551
string and it tells you how long it took
between those things, but the new cool way

13
00:00:45.551 --> 00:00:49.516
built in the Chrome DevTools,
let's go over here to this timing thing.

14
00:00:49.516 --> 00:00:52.250
I just got a bunch of code running,
it doesn't do anything important.

15
00:00:52.250 --> 00:00:53.358
I'm not very creative.

16
00:00:53.358 --> 00:00:57.146
But basically, what you can do
is you can come back in here and

17
00:00:57.146 --> 00:01:00.580
this is going to be our first
time on the profiles page.

18
00:01:01.880 --> 00:01:04.290
So basically again,
like timeline kind of does everything.

19
00:01:04.290 --> 00:01:05.660
It does profiling.

20
00:01:05.660 --> 00:01:06.910
It does network requests.

21
00:01:06.910 --> 00:01:11.040
It does a lot of stuff, but
it's also very overwhelming to look at.

22
00:01:11.040 --> 00:01:12.677
So when all you need is one thing,

23
00:01:12.677 --> 00:01:16.490
like all you need is the JavaScript CPU
profile or all you need is the network.

24
00:01:16.490 --> 00:01:19.315
I prefer to use the individual tab just,
so it's less cluttered.

25
00:01:19.315 --> 00:01:23.422
So I'm gonna record a CPU profile and
then again, just like I've been doing,

26
00:01:23.422 --> 00:01:25.240
I'm just gonna refresh the page.

27
00:01:28.902 --> 00:01:29.895
&gt;&gt; Speaker 2: You need to start first.

28
00:01:29.895 --> 00:01:32.367
&gt;&gt; Jon Kuperman: I do need to start first.

29
00:01:32.367 --> 00:01:35.060
Yes, this is the this is the one that
behaves differently from the others.

30
00:01:35.060 --> 00:01:35.807
Thank you.

31
00:01:35.807 --> 00:01:40.657
Like network timeline, all of those ones
will trigger a start if you refresh.

32
00:01:40.657 --> 00:01:44.179
With this one, you actually have
to start the CPU profile and

33
00:01:44.179 --> 00:01:46.500
then refresh your page.

34
00:01:46.500 --> 00:01:50.330
And you can let it go for a second,
if you want and then stop your profile.

35
00:01:50.330 --> 00:01:53.899
As a general rule with both timeline and
profiles,

36
00:01:53.899 --> 00:01:58.142
if you're doing them after
the fact like not with a refresh.

37
00:01:58.142 --> 00:02:02.489
Just keep them short, so you don't get too
much information, especially with complex

38
00:02:02.489 --> 00:02:06.013
applications like I always try to
keep them to like under five seconds,

39
00:02:06.013 --> 00:02:08.890
probably like you wanna measure
like 30 seconds of app,

40
00:02:08.890 --> 00:02:12.280
cuz it's gonna compile
way too much information.

41
00:02:12.280 --> 00:02:16.007
So if you're like worried about
performance on when you click a certain

42
00:02:16.007 --> 00:02:19.870
button, I would like record click
a button and the recording right then.

43
00:02:19.870 --> 00:02:20.555
So basically,

44
00:02:20.555 --> 00:02:23.730
this gives us a pretty similar looking
thing to what we saw on timeline.

45
00:02:23.730 --> 00:02:25.298
It's just got its own view here.

46
00:02:25.298 --> 00:02:29.160
So it's like how long each thing took,
the total time, everything like that.

47
00:02:29.160 --> 00:02:31.361
So, we can start looking at self-time.

48
00:02:31.361 --> 00:02:34.084
And again,
we're gonna see all of these libraries,

49
00:02:34.084 --> 00:02:37.420
which is like not really what
we wanna be checking out.

50
00:02:37.420 --> 00:02:41.203
So if we wanted to check out, for
example, I have this timing.js file and

51
00:02:41.203 --> 00:02:44.450
I thought it would be fun to see
a bunch of different functions.

52
00:02:44.450 --> 00:02:45.320
What's slow?

53
00:02:45.320 --> 00:02:46.161
What's fast?

54
00:02:46.161 --> 00:02:47.153
What takes a long time?

55
00:02:47.153 --> 00:02:52.620
We can just do a File &gt; Find, like Ctrl+F
or Cmd+F and look for my timing.js file.

56
00:02:52.620 --> 00:02:57.723
It's like way down here, but then you can
click into it from the profiles page and

57
00:02:57.723 --> 00:03:02.529
it takes you to a sources page, except
it has this cruel extra sidebar here,

58
00:03:02.529 --> 00:03:06.388
which tells you by each function
how long it took to execute.

59
00:03:06.388 --> 00:03:09.319
So, I think this is really cool.

60
00:03:09.319 --> 00:03:13.220
This is also us kind of, so it's a micro
optimization, but it's kind of surprising.

61
00:03:13.220 --> 00:03:16.049
Sometimes where you'll
see certain operations,

62
00:03:16.049 --> 00:03:20.256
certain functions that are like really
taking a lot of time, but I would only

63
00:03:20.256 --> 00:03:24.683
do it if you've kind of already proven
that there's a JavaScript CPU problem.

64
00:03:24.683 --> 00:03:26.830
But anyway,
I just thought that this was like cool.

65
00:03:26.830 --> 00:03:31.138
So basically, I've got functions
that are like creating elements and

66
00:03:31.138 --> 00:03:35.587
appending them to the DOM and they're
really fast and then this one here is

67
00:03:35.587 --> 00:03:40.210
actually the slowest one and it's
actually just iteration over in array.

68
00:03:40.210 --> 00:03:43.721
I just kind of thought was interesting,
it's like actually way, way faster.

69
00:03:43.721 --> 00:03:45.750
I mean, everybody always talks
about the DOM being slow.

70
00:03:45.750 --> 00:03:48.718
It's actually way, way faster to
create elements and append them and

71
00:03:48.718 --> 00:03:51.310
than it is to use the JavaScript for
each over an array.

72
00:03:51.310 --> 00:03:54.713
You could also just do things like,
if you cared about performance stuff,

73
00:03:54.713 --> 00:03:58.115
you could try a couple of different
approaches like is a map faster than a for

74
00:03:58.115 --> 00:04:01.193
each faster than a for loop, but
those three and refresh the page and

75
00:04:01.193 --> 00:04:03.482
just right here see how
long they took to execute.

76
00:04:03.482 --> 00:04:04.761
I think it's kind of cool.

77
00:04:04.761 --> 00:04:08.844
It's basically like trying to
think of whatever the website is

78
00:04:08.844 --> 00:04:12.860
that lets you compared to I was
a performance that people use.

79
00:04:14.130 --> 00:04:17.570
Jasper, if it's kind of a Jasper
built right into your DevTools which

80
00:04:17.570 --> 00:04:19.340
is kind of neat.

81
00:04:19.340 --> 00:04:22.779
So yeah, so basically, the longest
operation out of all the stuff that I was

82
00:04:22.779 --> 00:04:25.110
doing was just iterating
through an array of devs.

83
00:04:25.110 --> 00:04:25.947
So that was interesting,

84
00:04:25.947 --> 00:04:28.008
especially because there are only
like five devs in that array.

85
00:04:28.008 --> 00:04:34.130
Yeah, so that's kind of timing another
micro optimization, but pretty cool.

86
00:04:35.640 --> 00:04:36.190
Okay, cool.

