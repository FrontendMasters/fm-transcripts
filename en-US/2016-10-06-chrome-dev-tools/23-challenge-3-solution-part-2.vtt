WEBVTT

1
00:00:00.000 --> 00:00:04.036
[MUSIC]

2
00:00:04.036 --> 00:00:04.892
&gt;&gt; Jon Kuperman: Cool, so yeah,

3
00:00:04.892 --> 00:00:08.210
we've got kind of back over here
we've got a ton of JavaScript.

4
00:00:08.210 --> 00:00:11.410
A lot of it,
it is it's like the YouTube players.

5
00:00:11.410 --> 00:00:13.540
If you were able to run
it with all four images,

6
00:00:13.540 --> 00:00:17.100
those images are really huge,
there's like two things we could do there.

7
00:00:17.100 --> 00:00:19.690
The first thing is to
get an image editor and

8
00:00:19.690 --> 00:00:23.290
shrink them down because they just
don't need to be 2,000 pixels wide.

9
00:00:23.290 --> 00:00:27.220
The second thing is using one of those
programs, like I mentioned ImageOptim.

10
00:00:27.220 --> 00:00:30.310
And I'll just show that real
quick because I really like it.

11
00:00:30.310 --> 00:00:31.870
It's just this little drag and drop area.

12
00:00:31.870 --> 00:00:35.330
There is a command line version you
can use with your build process.

13
00:00:35.330 --> 00:00:37.350
And then you can just do something like.

14
00:00:37.350 --> 00:00:40.530
I can go into my Public folder,
and go into my images, and

15
00:00:40.530 --> 00:00:43.450
I can just grab those four,
and slide them in here.

16
00:00:43.450 --> 00:00:45.620
And it just kind of goes to work and
you can see,

17
00:00:45.620 --> 00:00:50.210
hopefully, the savings are like 60
to 70% and it changes them inline.

18
00:00:50.210 --> 00:00:52.620
You don't need to like export or
save them back, or anything like that.

19
00:00:52.620 --> 00:00:56.156
Looks like there was nothing to
be done with the fave icon and

20
00:00:56.156 --> 00:01:00.720
[LAUGH] it might have even choked on this,
this one looks like it's still working.

21
00:01:00.720 --> 00:01:04.330
But anyway, so a program like that,
I mean it's so easy,

22
00:01:04.330 --> 00:01:07.460
it has no bad effect on the user,
you can put it into your build tool and

23
00:01:07.460 --> 00:01:11.550
it can have just tremendous effect and
again this is like all that metadata,

24
00:01:11.550 --> 00:01:15.730
it's all lossless so you're not losing
image quality, so yeah never discount

25
00:01:15.730 --> 00:01:19.310
the power of a tool like ImageOptim or
any lossless image compression.

26
00:01:20.760 --> 00:01:23.910
Cool and then like the other way that you
could kind of have taken a look at this

27
00:01:23.910 --> 00:01:27.580
which we hadn't really gotten to yet
is in this summary panel.

28
00:01:27.580 --> 00:01:30.710
I'm gonna go ahead and pop these out so
I get a little bit more view.

29
00:01:30.710 --> 00:01:31.590
So we're looking in the timeline.

30
00:01:31.590 --> 00:01:33.370
We're looking at the summary panel.

31
00:01:33.370 --> 00:01:37.740
You can switch it over to something like
bottom up, which is really handy cuz then

32
00:01:37.740 --> 00:01:41.610
you get, this what I, I kind of mentioned
this before like, there's self time and

33
00:01:41.610 --> 00:01:45.020
total time whenever you're
profiling any program, so

34
00:01:45.020 --> 00:01:49.190
self time is like how long
the function foo took to execute and

35
00:01:49.190 --> 00:01:54.750
total time is like if foo calls bar and
bar takes three seconds.

36
00:01:54.750 --> 00:01:57.640
Foo is total time is not only
how long it took to execute but

37
00:01:57.640 --> 00:02:00.100
how long everything it
called took to execute.

38
00:02:00.100 --> 00:02:03.953
So basically what you'll see if you search
by total time you'll see the order in

39
00:02:03.953 --> 00:02:05.689
which everything happened right.

40
00:02:05.689 --> 00:02:06.780
Like what called what called what.

41
00:02:06.780 --> 00:02:09.278
If you search by self time
which is the default,

42
00:02:09.278 --> 00:02:12.527
you'll see what the most expensive
time wise functions are so

43
00:02:12.527 --> 00:02:16.587
the first thing that we see is like the
most expensive thing was just compiling

44
00:02:16.587 --> 00:02:20.570
and evaluating scripts unavoidable
unless you have less scripts.

45
00:02:20.570 --> 00:02:23.390
But then the second thing that we'll
see kind of right away is like this

46
00:02:23.390 --> 00:02:27.800
anonymous function and this is
based.js it's the YouTube video game.

47
00:02:27.800 --> 00:02:31.550
So we kind of look for here is like
searching by the most expensive.

48
00:02:31.550 --> 00:02:35.610
We can kind of see like when is that
we get to any of our own staff?

49
00:02:35.610 --> 00:02:40.510
If we get to any of our own staff, so if
you had seen like one of your application

50
00:02:40.510 --> 00:02:43.960
files in this bottom up view,
it would be really worth looking into.

51
00:02:43.960 --> 00:02:45.870
If you're seeing other
people's files like these,

52
00:02:45.870 --> 00:02:50.420
you can see they're all coming
from www.YouTubeimage.com.

53
00:02:50.420 --> 00:02:52.780
There's not much you can do except for

54
00:02:52.780 --> 00:02:57.740
you can make things asynchronous like a
good example, we talked about AMP earlier.

55
00:02:57.740 --> 00:03:01.690
And I think what they do is they
make a YouTube call just to get

56
00:03:01.690 --> 00:03:06.230
the image using the You Tube API and
they put the image there as a placeholder.

57
00:03:06.230 --> 00:03:09.640
After the page loads,
they replace it with an embedded video.

58
00:03:09.640 --> 00:03:15.350
Just in the hopes that it's way better to
hit the page and it takes a second before

59
00:03:15.350 --> 00:03:19.220
the video's clickable, than it is to be
stuck there hanging waiting for the page

60
00:03:19.220 --> 00:03:22.680
to be interactive because you're loading
all these videos or something like that.

61
00:03:22.680 --> 00:03:24.590
So I think it's just something
to be careful about.

62
00:03:24.590 --> 00:03:27.500
Obviously embeds provide
a really rich experience,

63
00:03:27.500 --> 00:03:31.470
but can you make them asynchronous,
can you have less of them,

64
00:03:31.470 --> 00:03:36.160
can you control them in some way like
loading a picture and then loading in?

65
00:03:36.160 --> 00:03:36.920
&gt;&gt; Speaker 2: Couple questions.

66
00:03:36.920 --> 00:03:38.040
&gt;&gt; Jon Kuperman: Yeah.

67
00:03:38.040 --> 00:03:43.113
&gt;&gt; Speaker 2: Olga is asking if
the timeline is able to use source maps?

68
00:03:43.113 --> 00:03:48.180
&gt;&gt; Jon Kuperman: Yeah so yeah generally
source maps do work well with dev tools.

69
00:03:48.180 --> 00:03:52.619
So yeah they it should pick up
mapping all those functions over.

70
00:03:53.766 --> 00:03:55.032
&gt;&gt; Speaker 2: Amberley is,

71
00:03:55.032 --> 00:03:59.540
she's seeing JavaScript from her
extensions is it better to run.

72
00:03:59.540 --> 00:04:01.415
&gt;&gt; Jon Kuperman: Yeah.
[CROSSTALK] That's a great question.

73
00:04:01.415 --> 00:04:02.720
And that comes up a lot.

74
00:04:04.510 --> 00:04:05.600
It's another opinion one so

75
00:04:05.600 --> 00:04:09.220
yeah you will see like depending on
what Chrome extensions that you have

76
00:04:09.220 --> 00:04:12.860
sometimes you'll see that the slowest
function is not the app at all but

77
00:04:12.860 --> 00:04:15.900
it's just something that your
Chrome browser runs all the time.

78
00:04:15.900 --> 00:04:19.850
I think it's cool to do the profiling
with your Chrome extensions on both for

79
00:04:19.850 --> 00:04:23.210
your own personal knowledge of like if
you have some really slow extensions.

80
00:04:23.210 --> 00:04:26.980
But also most people rock a few
extensions so it's good to get a feel.

81
00:04:26.980 --> 00:04:30.140
However, yeah if it is not auditable for
your app.

82
00:04:30.140 --> 00:04:33.240
So what I would kind of recommend doing
there is like do some profiling and

83
00:04:33.240 --> 00:04:37.930
then open in Incognito tab which by
default doesn't enable any extensions and

84
00:04:37.930 --> 00:04:42.160
run a profile in the Incognito tab to see
you know purely what your app is causing.

85
00:04:42.160 --> 00:04:43.740
It's easier than like than
turning them off all the time and

86
00:04:43.740 --> 00:04:44.676
turning it back on whenever.

87
00:04:44.676 --> 00:04:48.510
The other thing you can do is like
have no extensions for Chrome canary.

88
00:04:48.510 --> 00:04:51.200
But yeah it's kind of good but
it is misleading for sure.

89
00:04:52.390 --> 00:04:55.360
&gt;&gt; Speaker 2: And
then Richard is asking why audit

90
00:04:55.360 --> 00:04:58.843
didn't have a recommendation
to compress the images?

91
00:04:58.843 --> 00:05:00.670
&gt;&gt; Jon Kuperman: Yeah that's a good call.

92
00:05:00.670 --> 00:05:05.431
It does offer that sometimes I'm really
not sure what its logic is behind

93
00:05:05.431 --> 00:05:09.774
when it suggests it and
when it doesn't but

94
00:05:09.774 --> 00:05:14.400
the rule for me would just be
losslessly compress everything because

95
00:05:14.400 --> 00:05:18.530
otherwise I mean it's invisible meta data
that you're making every user download.

96
00:05:18.530 --> 00:05:20.937
It's a good call.

97
00:05:20.937 --> 00:05:24.360
Okay.
Awesome okay cool.

98
00:05:24.360 --> 00:05:27.610
So that's like an intro
to the timeline panel,

99
00:05:27.610 --> 00:05:29.280
it's a really overwhelming looking panel.

100
00:05:29.280 --> 00:05:32.980
But kind of ultimately my hope is
that you'll get to the point where

101
00:05:32.980 --> 00:05:36.910
you don't have to read every single thing,
you just start looking for these patterns.

102
00:05:36.910 --> 00:05:38.380
Are you seeing a ton of green?

103
00:05:38.380 --> 00:05:41.940
Like this stands out to me, I'm like
why am I doing all that repainting,

104
00:05:41.940 --> 00:05:45.240
all that page jank and I look and
I see it's the YouTube videos.

105
00:05:45.240 --> 00:05:50.650
Or like this is a ton of JavaScript, is
it something that I can fix in some way?

106
00:05:50.650 --> 00:05:53.950
I just thought of an optimization here
which is like you'll notice it's like

107
00:05:53.950 --> 00:05:55.970
the same thing happening over and
over again.

108
00:05:55.970 --> 00:06:00.490
That's because each iFrame right is like
reaching out and grabbing the same, so

109
00:06:00.490 --> 00:06:04.410
I'm getting five videos means I have
five copies of YouTube's base.js

110
00:06:04.410 --> 00:06:08.170
right like that's a lot of
copies of YouTube base.js.

111
00:06:08.170 --> 00:06:12.010
So if you're using their API instead
of just an easy embed you could grab

112
00:06:12.010 --> 00:06:16.480
one copy of YouTube's base.js and
then user API to publish those but

113
00:06:16.480 --> 00:06:19.520
you start getting like
a view of what's going on.

114
00:06:19.520 --> 00:06:24.730
Where you can win or where you can I
can't really prescribe like an easy win,

115
00:06:24.730 --> 00:06:26.190
like don't use embeds.

116
00:06:26.190 --> 00:06:29.060
Obviously, embeds are great and
they provide really rich experiences.

117
00:06:29.060 --> 00:06:32.610
But it's just good to know at least
like where all that time is going or

118
00:06:32.610 --> 00:06:36.530
why things are janking around, and to be
able to like kind of look through and

119
00:06:36.530 --> 00:06:37.592
click in like this.

120
00:06:37.592 --> 00:06:38.197
Yeah.

121
00:06:38.197 --> 00:06:41.530
And then the summary and the bottom up
are really helpful for that stuff too.

122
00:06:43.760 --> 00:06:45.470
Think ImageOptim finally finished.

123
00:06:48.140 --> 00:06:48.970
All right.

124
00:06:48.970 --> 00:06:53.200
&gt;&gt; Speaker 2: It looks like ImageOptim
is Mac only, is there a good?

125
00:06:53.200 --> 00:06:53.980
&gt;&gt; Jon Kuperman: Yeah.

126
00:06:53.980 --> 00:06:56.800
Actually, I don't have them all
right now there's a really good

127
00:06:56.800 --> 00:06:58.040
totally tooling tips.

128
00:06:58.040 --> 00:07:02.095
I don't know if you've ever seen that,
it's a YouTube video series, where I think

129
00:07:02.095 --> 00:07:05.880
like Matt Gott and Andy Asmati talk
about all the best image optimizers.

130
00:07:05.880 --> 00:07:09.180
There's a lot of really good ones out
there I'm just struggling to think of

131
00:07:09.180 --> 00:07:09.890
the names right now.

132
00:07:09.890 --> 00:07:14.210
But I would personally recommend finding
ones that work with your build process,

133
00:07:14.210 --> 00:07:17.240
as opposed to a GUI, so
it's always automated.

134
00:07:17.240 --> 00:07:21.080
So if you go to Gulp, or Grunt,
or Webpack, whatever you use and

135
00:07:21.080 --> 00:07:22.540
look at their plugins to find.

136
00:07:22.540 --> 00:07:24.390
I'm sure there's a lossless
image compressor.

137
00:07:24.390 --> 00:07:28.026
Same with all the content management
systems like WordPress has things

138
00:07:28.026 --> 00:07:30.934
called like ewww, e-w-w-w or
something like that and

139
00:07:30.934 --> 00:07:34.356
it automatically losslessly
compresses every image you upload.

140
00:07:34.356 --> 00:07:37.350
So I would just pick whatever tool
you're already using find one that

141
00:07:37.350 --> 00:07:38.020
works for that tool.

