WEBVTT

1
00:00:00.000 --> 00:00:04.040
[MUSIC]

2
00:00:04.040 --> 00:00:07.011
&gt;&gt; Jon Kuperman: Page Jank,
we've talked about it a little bit,

3
00:00:07.011 --> 00:00:10.320
just like this general
according to Jank free.

4
00:00:10.320 --> 00:00:14.697
It's a stuttering, juddering or
plain halting that users see.

5
00:00:14.697 --> 00:00:17.725
So it's pretty common and
it's one of those I think

6
00:00:17.725 --> 00:00:21.960
like subtle things that makes a big
difference to the user experience.

7
00:00:21.960 --> 00:00:24.860
Like any kind of like stutter,
I mean it just kinda throws you off.

8
00:00:24.860 --> 00:00:28.890
It just doesn't look great, it doesn't
feel great, and they've done a lot

9
00:00:28.890 --> 00:00:33.354
of market research studies that say that,
it's very, very important to people that

10
00:00:33.354 --> 00:00:36.909
websites are apps feel fluid,
feel really smooth, feel instead.

11
00:00:36.909 --> 00:00:41.675
So this is why I like measuring frames per
second, and looking at the timeline for

12
00:00:41.675 --> 00:00:44.214
Page Jank notifiers is really important.

13
00:00:44.214 --> 00:00:48.580
So this is kind of an older
view of the DevTools.

14
00:00:48.580 --> 00:00:53.176
But paints are definitely unavoidable in
the sense that your screen needs to paint

15
00:00:53.176 --> 00:00:55.181
any time anything needs to change.

16
00:00:55.181 --> 00:00:59.699
But there's a lot of stuff that you
can do to make the process better.

17
00:00:59.699 --> 00:01:03.128
And so
we kind of covered 60 frames per second.

18
00:01:03.128 --> 00:01:04.457
Again there's just the math behind it.

19
00:01:04.457 --> 00:01:08.453
Basically, a new frame 60 times in
a second which gives your browser

20
00:01:08.453 --> 00:01:10.902
10 milliseconds to come up with a frame.

21
00:01:10.902 --> 00:01:15.815
And so some kind of like interesting
things that you can do coming back

22
00:01:15.815 --> 00:01:16.670
over here.

23
00:01:17.710 --> 00:01:22.680
If I open the DevTools,
well it's got really big on me.

24
00:01:22.680 --> 00:01:26.030
So there's a kind of hidden panel
that's not one of these panels.

25
00:01:26.030 --> 00:01:29.709
And it's accessible only
by hitting the Esc button.

26
00:01:29.709 --> 00:01:32.630
And it's called the like console drawer or
whatever.

27
00:01:32.630 --> 00:01:36.620
I use it a lot because it allows you
to have a console on every other panel.

28
00:01:36.620 --> 00:01:39.080
So if you wanted it instead of
hopping between elements and

29
00:01:39.080 --> 00:01:40.870
console like we were doing earlier.

30
00:01:40.870 --> 00:01:43.870
From elements you can just hit Esc and
open up this drawer, and

31
00:01:43.870 --> 00:01:45.609
you have your full console access.

32
00:01:45.609 --> 00:01:49.519
But it also offers these two tools
around Animations and Rendering.

33
00:01:50.620 --> 00:01:53.990
So the first one that we're
gonna use is a FPS Meter.

34
00:01:53.990 --> 00:01:55.560
You turn that on and all this and

35
00:01:55.560 --> 00:02:00.830
you get this fancy little frames
per second thing going on.

36
00:02:00.830 --> 00:02:04.912
And from there you can kind
of go around on your site and

37
00:02:04.912 --> 00:02:09.179
you're just basically seeing
like if it's moving, so

38
00:02:09.179 --> 00:02:13.568
it's cool, it's color codes it all for
you basically.

39
00:02:13.568 --> 00:02:16.916
Basically like as we get up higher and
higher and higher,

40
00:02:16.916 --> 00:02:19.428
it'll start turning orange and then red,

41
00:02:19.428 --> 00:02:23.507
if you're not able to serve enough
frames per second to the browser.

42
00:02:23.507 --> 00:02:26.450
I'd also tells you like how much
of GPU memory is being used.

43
00:02:26.450 --> 00:02:29.234
This is like if you're
doing any kind of D3 or

44
00:02:29.234 --> 00:02:32.031
even like just complicated CSS animations.

45
00:02:32.031 --> 00:02:35.176
It's really great that you
can toss work to the GPU,

46
00:02:35.176 --> 00:02:37.619
but this helps you kind of keep an eye on.

47
00:02:37.619 --> 00:02:42.390
If you're close, because the GPU only
donates so much to your browser.

48
00:02:42.390 --> 00:02:47.222
So you can you can max that out,
doing things like CSS transitions and

49
00:02:47.222 --> 00:02:48.229
animations.

50
00:02:48.229 --> 00:02:49.000
This is pretty cool.

51
00:02:49.000 --> 00:02:53.644
The page that is here definitely
feels a little bit janky, but

52
00:02:53.644 --> 00:02:56.963
it's not breaking the FPS, which is good.

53
00:03:01.953 --> 00:03:03.756
&gt;&gt; Jon Kuperman: So
yeah, I guess, okay, so

54
00:03:03.756 --> 00:03:08.110
the FPS Meter is really nice and
I leave that up, sometimes.

55
00:03:08.110 --> 00:03:09.430
The other thing that's really,

56
00:03:09.430 --> 00:03:13.390
really useful is back in the exact
same area is Paint Flashing.

57
00:03:13.390 --> 00:03:17.610
And it's called show paint rectangles on
Chrome stable they just renamed it and

58
00:03:17.610 --> 00:03:20.380
what this lets you do,
it works nicely in Tandem.

59
00:03:20.380 --> 00:03:24.489
Is it basically will flash green
wherever the screen is repainting.

60
00:03:24.489 --> 00:03:27.722
So you knew this unlike any site
to get a good idea, this is where

61
00:03:27.722 --> 00:03:31.565
I think you asked a question about like,
how can you find what's causing,

62
00:03:31.565 --> 00:03:35.170
like if I see a lot of paints or
a lot of rendering slowing it down.

63
00:03:35.170 --> 00:03:39.592
It's not as easy as clicking a function
a line number, but what you can do is you

64
00:03:39.592 --> 00:03:43.748
can turn on Paint Flashing, and
you can see where your problem areas are.

65
00:03:43.748 --> 00:03:46.919
So it looks like I have a problem
area on my whole page, but

66
00:03:46.919 --> 00:03:51.730
I also have an additional problem area
on this little ad that I've got up here.

67
00:03:51.730 --> 00:03:53.890
So this kind of helps
you visualize things.

68
00:03:53.890 --> 00:03:57.610
An area like that's interesting
to look at like on Twitter,

69
00:03:57.610 --> 00:03:59.780
I worked for a while on the Home Timeline.

70
00:03:59.780 --> 00:04:03.480
So I'd have Paint Flashing on and
nothing should we rerender, right?

71
00:04:03.480 --> 00:04:06.540
The entire time line, if something needs
to change it should just rerender it.

72
00:04:06.540 --> 00:04:09.142
So it's like those are the kind of
things that you would watch out for

73
00:04:09.142 --> 00:04:10.018
with Paint Flashing.

74
00:04:10.018 --> 00:04:12.718
Your whole page should not be repainting,

75
00:04:12.718 --> 00:04:16.018
unless it's actually
changing all of its content.

76
00:04:16.018 --> 00:04:19.933
So we can see that we kind of some
problems on here, if we wanted to see

77
00:04:19.933 --> 00:04:24.820
a good example, there's this really
adorable site called koalastothemax.com,

78
00:04:24.820 --> 00:04:26.505
I think I have a slide for it.

79
00:04:26.505 --> 00:04:29.841
Well there it is, we'll get to it,
but we're gonna jump to this.

80
00:04:29.841 --> 00:04:33.022
So you can turn Paint Flashing on,
open up the console,

81
00:04:33.022 --> 00:04:36.060
open the drawer, turn Paint Flashing on.

82
00:04:36.060 --> 00:04:39.818
And from here you can see what a good
example is where all that rerenders

83
00:04:39.818 --> 00:04:42.693
are the actual areas that you're changing,
right?

84
00:04:42.693 --> 00:04:46.744
So what a bad example would be is if we
saw this whole square paint green every

85
00:04:46.744 --> 00:04:49.550
time we just animated something over here.

86
00:04:49.550 --> 00:04:54.649
So this is what a good example would look
like, and I think if you scroll enough

87
00:04:54.649 --> 00:04:59.762
on this it turns into a picture of
a Koala eventually, it's gonna get there.

88
00:04:59.762 --> 00:05:01.360
Anyway, there it is.

89
00:05:03.460 --> 00:05:08.120
So yes, so this is a good example, this
page that I have up right here is a bad

90
00:05:08.120 --> 00:05:10.998
example, cuz we're seeing way
too much stuff going on here.

91
00:05:10.998 --> 00:05:13.677
So this one again, the painting and

92
00:05:13.677 --> 00:05:18.780
rendering is trickier to diagnose
than JavaScript stuff, right?

93
00:05:18.780 --> 00:05:21.380
Like the JavaScript stuff, we can
just click on and get a line number.

94
00:05:21.380 --> 00:05:25.312
It's pretty easy to at least find what
the problem is, if not find a solution.

95
00:05:25.312 --> 00:05:28.770
The painting stuff is
a little bit trickier and

96
00:05:28.770 --> 00:05:32.770
I often use this kind of find and
delete methodology.

97
00:05:32.770 --> 00:05:35.677
[LAUGH] I call it, so basically,
I'm gonna pin this to the bottom and

98
00:05:35.677 --> 00:05:38.290
I'm gonna close the console
door with Esc again.

99
00:05:38.290 --> 00:05:44.810
And basically what I do, pretty frequently
is I just kind of hover over items.

100
00:05:44.810 --> 00:05:48.900
And then I use the Delete key to remove
them and see if the problem still exists.

101
00:05:48.900 --> 00:05:51.319
It is very scientific.

102
00:05:51.319 --> 00:05:56.071
So for example, if I see that
the first problem that I wanna fix is

103
00:05:56.071 --> 00:05:59.684
the whole screen is
repainting when you scroll.

104
00:05:59.684 --> 00:06:01.760
And there is just no reason for that.

105
00:06:01.760 --> 00:06:06.213
So it's like if I kind of went in here and
I started just a fleeting items,

106
00:06:06.213 --> 00:06:09.799
I got in that row and then it's OK,
that's a bad example.

107
00:06:09.799 --> 00:06:12.370
So I can Ctrl+Z to undo,
cuz the rows all the contact.

108
00:06:12.370 --> 00:06:16.716
But anyway, so you can start sniping,
get rid of this class here,

109
00:06:16.716 --> 00:06:18.745
and see us still problematic.

110
00:06:18.745 --> 00:06:21.150
And then you can kind of
get rid of the stuff here,

111
00:06:21.150 --> 00:06:23.328
again it's shrinking the content too low.

112
00:06:23.328 --> 00:06:27.880
But anyway, it's kind of the best approach
that I found so far, is just removing it.

113
00:06:27.880 --> 00:06:30.671
I mean sometimes it'll be obvious, right?

114
00:06:30.671 --> 00:06:35.899
So in this case, I have a pretty good
idea like fixed position items like this,

115
00:06:35.899 --> 00:06:37.179
are always a pain.

116
00:06:37.179 --> 00:06:41.048
They're usually a source, so
what I imagine is if I go ahead and

117
00:06:41.048 --> 00:06:44.479
inspect this thing and
it's like this ad-container.

118
00:06:44.479 --> 00:06:47.810
And I go ahead and delete it,
we won't see that extra junk anymore.

119
00:06:47.810 --> 00:06:50.640
Now we just have the one
covering the whole page, right?

120
00:06:50.640 --> 00:06:52.189
As opposed to before, we've got two.

121
00:06:52.189 --> 00:06:56.110
So I know that the fixed position is
a problem, but if I'm not sure what

122
00:06:56.110 --> 00:07:00.579
the problem on the actual page is, I
usually just go through and delete things.

123
00:07:00.579 --> 00:07:04.277
So this is an example that
I took from somebody site,

124
00:07:04.277 --> 00:07:07.820
where they have this div
menu animation wrapper.

125
00:07:08.820 --> 00:07:13.300
And it basically was just like a container
that they had that they wanted to

126
00:07:13.300 --> 00:07:14.620
use as a CSS selector.

127
00:07:14.620 --> 00:07:18.082
So it was an outer container for
everything, but

128
00:07:18.082 --> 00:07:22.558
it was styled all wonky with
this position fixed width 100,

129
00:07:22.558 --> 00:07:27.218
height 100, z-index 1,000,
all this stuff going on.

130
00:07:27.218 --> 00:07:30.461
So I took this overproduction site.

131
00:07:30.461 --> 00:07:33.809
And it's really useless, cuz all it
helps with is your CSS selectors.

132
00:07:33.809 --> 00:07:35.138
But if you go ahead to lead it,

133
00:07:35.138 --> 00:07:38.133
then all of a sudden there's no more
green on any of that page jank.

134
00:07:38.133 --> 00:07:41.081
So that's why Paint Flashing is so
important,

135
00:07:41.081 --> 00:07:44.629
cuz it's some seemingly
harmless thing on a container.

136
00:07:44.629 --> 00:07:51.011
Can actually be causing users to visually
struggle to get through your site.

137
00:07:51.011 --> 00:07:55.645
Another thing that I just kind of want
to talk about with screen paints is,

138
00:07:55.645 --> 00:07:58.351
this is from, I can't remember his name.

139
00:08:03.731 --> 00:08:05.770
&gt;&gt; Jon Kuperman: I'll have to look up,
I think I've got the source somewhere.

140
00:08:05.770 --> 00:08:10.810
But this is really, really great blog post
that's called Preventing Layout Thrashing.

141
00:08:10.810 --> 00:08:15.410
And it explains what it is that causes
things to need to be repainted too often.

142
00:08:15.410 --> 00:08:19.465
So the basic idea is whenever you
write to the document in any way,

143
00:08:19.465 --> 00:08:22.950
the browser has to invalidate
that containing layout.

144
00:08:22.950 --> 00:08:27.491
Cuz it can't possibly know what's being
changed as you write to the document.

145
00:08:27.491 --> 00:08:29.686
So the problem comes not
writing to the document,

146
00:08:29.686 --> 00:08:32.100
cuz that is important you
always need to do that.

147
00:08:32.100 --> 00:08:35.980
The problem comes with the way we
end up having to structure our code.

148
00:08:35.980 --> 00:08:37.996
So we do things like this all the time,

149
00:08:37.996 --> 00:08:40.519
where we read something
then we invalidate it.

150
00:08:40.519 --> 00:08:43.361
And we read again, then we invalidate
again, cuz we're reading and

151
00:08:43.361 --> 00:08:45.721
writing constantly, and
applications are really big.

152
00:08:45.721 --> 00:08:49.424
So what it would be ideal to do
is to do all of our reads, and

153
00:08:49.424 --> 00:08:50.980
then all of our writes.

154
00:08:50.980 --> 00:08:55.369
Which is just not realistic in a real
company with multiple employees

155
00:08:55.369 --> 00:08:56.360
writing code.

156
00:08:56.360 --> 00:09:01.161
You can't be like hey, you now allowed to
look at the height there, you have to look

157
00:09:01.161 --> 00:09:05.700
at the height in another file and weigh
up the chain, it's just not possible.

158
00:09:05.700 --> 00:09:10.400
And so what you can do to avoid this
layout thrashing, which is the constant

159
00:09:10.400 --> 00:09:15.860
invalidation of the DOM, is you can use
this API Window requestAnimationFrame().

160
00:09:15.860 --> 00:09:20.340
And requestAnimationFrame() is basically
a method that gives you a call back.

161
00:09:20.340 --> 00:09:25.028
And it says, hey,
next time you're about to repaint anyway,

162
00:09:25.028 --> 00:09:27.688
here's some code I want you to run.

163
00:09:27.688 --> 00:09:31.977
So you could say, if you need to write a
user's name or maybe it's a shopping cart,

164
00:09:31.977 --> 00:09:35.860
and they're clicking on items they
wanna add to their shopping cart.

165
00:09:35.860 --> 00:09:39.190
So every time they click on an item
you need to update that total, right?

166
00:09:39.190 --> 00:09:42.550
We don't necessarily need
to do it instantaneous,

167
00:09:42.550 --> 00:09:45.400
I mean you get 60 frames in a second.

168
00:09:45.400 --> 00:09:47.849
So instead of writing to that
shopping cart, you could say,

169
00:09:47.849 --> 00:09:51.311
Window.requestAnimationFrame() you can
pass in a callback function that writes

170
00:09:51.311 --> 00:09:52.138
the shopping cart.

171
00:09:52.138 --> 00:09:55.350
So it's doing things like
that will really help you.

172
00:09:55.350 --> 00:09:57.850
But don't worry, you don't need
to do all that stuff yourself.

173
00:09:57.850 --> 00:10:01.554
I just wanted to explain how the inner
workings of this really cool library.

174
00:10:01.554 --> 00:10:05.929
Wilson page, he's the one that wrote the
article, this library's called Fastdom.

175
00:10:05.929 --> 00:10:08.788
This is a library that you
might not be familiar with, but

176
00:10:08.788 --> 00:10:12.380
likely libraries you use
have this as a dependency.

177
00:10:12.380 --> 00:10:16.901
So it's at github/wilsonpage/fastdom.

178
00:10:16.901 --> 00:10:21.153
And so all this does is it has a nice
little API that just wraps everything in

179
00:10:21.153 --> 00:10:23.432
these nice requestAnimationFrames.

180
00:10:23.432 --> 00:10:25.919
So you write your code kind of normally,
and

181
00:10:25.919 --> 00:10:30.573
then it takes care of making sure that it
batches up reads and it batches up writes.

182
00:10:30.573 --> 00:10:34.212
So I'd recommend using this,
it's very easy to use, but

183
00:10:34.212 --> 00:10:38.238
likely if you're using something like amp,
amp uses fastdom.

184
00:10:38.238 --> 00:10:39.079
If you're using,

185
00:10:39.079 --> 00:10:42.556
you know what I'm saying, it's usually
a dependency of your dependencies.

186
00:10:42.556 --> 00:10:45.060
But it is a cool concept and
I want to explain how it worked.

