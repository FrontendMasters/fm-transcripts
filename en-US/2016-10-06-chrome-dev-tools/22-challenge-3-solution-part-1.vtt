WEBVTT

1
00:00:00.000 --> 00:00:03.948
[MUSIC]

2
00:00:03.948 --> 00:00:07.060
&gt;&gt; Speaker 1: A couple
questions from Dylan.

3
00:00:07.060 --> 00:00:10.160
How do you add the no CPU throttling
button in the timeline tab?

4
00:00:11.180 --> 00:00:15.685
&gt;&gt; Jon: Okay, so that one is, that's
like a very, very brand new feature.

5
00:00:16.855 --> 00:00:18.565
So it's only on Canary, and

6
00:00:18.565 --> 00:00:21.955
it's likely only on the latest
minor version of Canary.

7
00:00:21.955 --> 00:00:26.885
So maybe just checking to see if you're
eligible for an update on Chrome Canary.

8
00:00:28.605 --> 00:00:32.090
Actually I lied, cut that,
it's an experiment.

9
00:00:32.090 --> 00:00:35.280
Even in Canary I think,
I wanna cover experiments later but for

10
00:00:35.280 --> 00:00:40.021
now you can go to the three dots and
settings and then I think we're

11
00:00:40.021 --> 00:00:44.670
gonna cover this in a bit if you have
this, it is totally an experiment.

12
00:00:44.670 --> 00:00:47.960
Can we hold off maybe on that and I'll
we're gonna cover experiments in the end

13
00:00:47.960 --> 00:00:49.820
you have to like turn him on and
stuff like that?

14
00:00:49.820 --> 00:00:50.460
Sorry about that.

15
00:00:52.400 --> 00:00:55.190
So that's an experimental
feature even in Canary.

16
00:00:55.190 --> 00:00:58.220
&gt;&gt; Speaker 1: And
then the next question is from Juan,

17
00:00:58.220 --> 00:01:03.110
who would like to ask if there's
any way to find the corresponding

18
00:01:03.110 --> 00:01:06.636
function in sources from the main
call stack on the Timeline tab.

19
00:01:06.636 --> 00:01:12.740
&gt;&gt; Jon: Yeah, so [COUGH] if you're in here
in the main call stack, and you get down

20
00:01:12.740 --> 00:01:18.390
to whatever function you want like this
anonymous function and you click on it.

21
00:01:18.390 --> 00:01:21.810
It'll change what's in the summary this JS
frame, you scroll down to the bottom of

22
00:01:21.810 --> 00:01:24.860
the summary and
you'll be able to click on the exact line.

23
00:01:26.070 --> 00:01:30.994
Keep in mind like some of these
are just externally loaded resources.

24
00:01:30.994 --> 00:01:34.248
Like YouTube and beds or whatever will
actually take you to the YouTube code.

25
00:01:34.248 --> 00:01:37.675
So it's gonna take a second but
you can do it that way.

26
00:01:37.675 --> 00:01:40.600
&gt;&gt; Speaker 1: Okay, and
the next question is from John.

27
00:01:40.600 --> 00:01:43.070
Some scripts are green and
some are purple.

28
00:01:43.070 --> 00:01:45.660
Does it color the scripts depending
on the domain or the file?

29
00:01:47.790 --> 00:01:49.390
&gt;&gt; Jon: Yeah, well,
that's a really good question.

30
00:01:50.870 --> 00:01:55.461
I don't know how it colors the scripts.

31
00:01:55.461 --> 00:01:57.490
It's really interesting.

32
00:01:57.490 --> 00:02:01.505
You see like that the colors for
all the other section are labeled but

33
00:02:01.505 --> 00:02:05.891
I'm really not sure it's got this
whole like pastel colors scheme here.

34
00:02:05.891 --> 00:02:10.318
I'm not sure how colors than I do I do see
like kinda immediately that like native

35
00:02:10.318 --> 00:02:12.910
abends being triggered
showing up in yellow.

36
00:02:12.910 --> 00:02:16.940
But I have no idea how it does if
the difference between the pastel blue and

37
00:02:16.940 --> 00:02:18.120
purple and green.

38
00:02:18.120 --> 00:02:20.573
I'm not sure.

39
00:02:20.573 --> 00:02:22.610
It's a good question.

40
00:02:22.610 --> 00:02:26.390
Cool, and I also saw on
the chat that some people were,

41
00:02:26.390 --> 00:02:28.750
it was crashing when they were doing this.

42
00:02:28.750 --> 00:02:29.520
I played around with it.

43
00:02:29.520 --> 00:02:34.450
I think some of the crashes, something
experimental in Canary because it's not

44
00:02:34.450 --> 00:02:37.840
It's not that slow for
me in stable Chrome.

45
00:02:37.840 --> 00:02:41.380
But also I just had a lot of really
bad practices going on on this site.

46
00:02:41.380 --> 00:02:45.040
So that's probably when I went
a little bit overboard on that.

47
00:02:45.040 --> 00:02:47.887
What I ended up kinda doing
is I just went through and

48
00:02:47.887 --> 00:02:49.950
I just deleted some of these images.

49
00:02:49.950 --> 00:02:52.500
And this is from profiling.pug.

50
00:02:52.500 --> 00:02:54.790
So you could do that too,
if you needed to speed it up.

51
00:02:56.084 --> 00:02:59.710
Cool, so I guess the first thing I would
do, just to kind of walk through it,

52
00:02:59.710 --> 00:03:02.770
is do a full audit and reload the page.

53
00:03:02.770 --> 00:03:04.450
So it's gonna reload
the page in the background,

54
00:03:04.450 --> 00:03:08.400
and when that's done take
a look at what the audit says.

55
00:03:09.910 --> 00:03:14.070
I'd also, if the site were online, I would
run it through Google page feed insights,

56
00:03:14.070 --> 00:03:16.480
like I mentioned before, just to
get some more in-depth information.

57
00:03:18.010 --> 00:03:20.480
So some of the stuff like you know
those things that we covered.

58
00:03:20.480 --> 00:03:22.876
I'm serving to many JavaScript file so

59
00:03:22.876 --> 00:03:27.317
any any kind of teak manger to bundle
all of those together would be help.

60
00:03:27.317 --> 00:03:28.570
G.Z compression.

61
00:03:29.730 --> 00:03:32.396
Again, it depends on your platform but
for node and

62
00:03:32.396 --> 00:03:36.250
Express which is what my app is there's
a MPM module called compression.

63
00:03:36.250 --> 00:03:39.683
So you can just add him install and
then app use compression and

64
00:03:39.683 --> 00:03:41.010
will reduce it for you.

65
00:03:42.360 --> 00:03:44.670
Browser caching, this is a little tricky.

66
00:03:44.670 --> 00:03:50.770
So you can specify like time,
freshness lifetime whatever on your files.

67
00:03:50.770 --> 00:03:54.160
Sometimes you're gonna get this though
with files that are not yours,like so

68
00:03:54.160 --> 00:03:57.260
if you're using like the YouTube and
video and bad's or

69
00:03:57.260 --> 00:03:59.050
SoundCloud or Facebook, any of that.

70
00:03:59.050 --> 00:04:00.617
You don't always have control over that.

71
00:04:00.617 --> 00:04:02.900
But some of these, we could.

72
00:04:05.350 --> 00:04:06.570
Cookie size.

73
00:04:06.570 --> 00:04:07.230
A lot of cookies.

74
00:04:07.230 --> 00:04:09.410
Again, I'm not setting
these cookies manually.

75
00:04:09.410 --> 00:04:11.710
They're just like YouTube trackers and
stuff like that.

76
00:04:11.710 --> 00:04:13.850
So again,
it's like if you need a YouTube embed,

77
00:04:13.850 --> 00:04:16.050
you take the good with the bad, basically.

78
00:04:17.554 --> 00:04:21.200
And then, we've got a ton of CSS rules,
again I'm using boot strap and

79
00:04:21.200 --> 00:04:23.370
I only have like five
elements on this page.

80
00:04:23.370 --> 00:04:25.778
So it's like an image and
some paragraphs, so

81
00:04:25.778 --> 00:04:28.818
there's a lot of unnecessary
CSS is coming over the wire.

82
00:04:28.818 --> 00:04:32.369
So it started there, and so get a bundler,

83
00:04:32.369 --> 00:04:37.405
get the gzip compression going,
crop down bootstrap to just

84
00:04:37.405 --> 00:04:42.359
the CSS that I need,
those are probably your biggest wins.

85
00:04:42.359 --> 00:04:44.710
And then, kinda going over timeline.

86
00:04:44.710 --> 00:04:49.522
I'll hit a refresh,
see if it crashes for me.

87
00:04:49.522 --> 00:04:51.049
This one's real slow.

88
00:04:51.049 --> 00:04:55.840
[LAUGH] I went overboard on making
it as not performant as possible.

89
00:04:57.000 --> 00:05:00.510
So basically, I mean even while
this is loading, if it's loading.

90
00:05:00.510 --> 00:05:05.089
We can see that the images taken
a noticeably long time to load in.

91
00:05:06.150 --> 00:05:09.498
I'm getting getting the crash I think.

92
00:05:09.498 --> 00:05:14.190
We might hop over to Chrome, and see if
I can do it in Chrome stable, just so

93
00:05:14.190 --> 00:05:17.689
I can at least show everybody
what's going on with it.

94
00:05:30.674 --> 00:05:31.881
&gt;&gt; Jon: And also that run.

95
00:05:34.632 --> 00:05:40.137
&gt;&gt; Jon: So this looks mostly the same as
what we're looking at a few things I think

96
00:05:40.137 --> 00:05:46.110
have been minor redesigns So we see right
off the bat this huge chunk of yellow.

97
00:05:46.110 --> 00:05:51.850
Like the whole CPU is basically
executing JavaScript the whole time.

98
00:05:51.850 --> 00:05:54.810
Nothing really looks bad as far
as the memory stuff goes, so

99
00:05:54.810 --> 00:05:56.160
I'm gonna hide that one for now.

100
00:05:56.160 --> 00:05:58.919
Again, we don't see that jigsaw
pattern that we are watching out for.

101
00:06:00.140 --> 00:06:01.080
So that's fine.

102
00:06:02.800 --> 00:06:05.920
The screen paints are a little bit bad.

103
00:06:05.920 --> 00:06:09.850
So the cool thing about doing these
profiles is you start getting really

104
00:06:09.850 --> 00:06:12.520
comfortable with like the patterns
that you'll see here.

105
00:06:12.520 --> 00:06:16.260
So we see like you always see the green
bump at the beginning because you have to

106
00:06:16.260 --> 00:06:17.410
run to the page like I said.

107
00:06:18.520 --> 00:06:22.421
And I'm almost 100% sure that
all of these green bumps and

108
00:06:22.421 --> 00:06:25.800
all this page junk here
is from YouTube stuff.

109
00:06:25.800 --> 00:06:29.560
I'd imagine that it's like loading in the
YouTube UI and Chrome and stuff like that.

110
00:06:29.560 --> 00:06:31.878
So we can check that out.

111
00:06:31.878 --> 00:06:33.830
And just kinda see you.

112
00:06:33.830 --> 00:06:36.657
So another thing I think
I didn't mention but

113
00:06:36.657 --> 00:06:41.728
you can like drag it to select any area as
opposed to like trying to scroll in on it.

114
00:06:41.728 --> 00:06:44.467
But so then we can kinda
like come over here and see,

115
00:06:44.467 --> 00:06:48.736
so these are all like all of that stuff is
like calling all these embed players and

116
00:06:48.736 --> 00:06:52.000
then this gets into
YouTube the minified code.

117
00:06:52.000 --> 00:06:55.880
Another good note with this is like, if
you're, concatenating is really important

118
00:06:55.880 --> 00:06:58.970
but a lot of people minified their code
to their JavaScript which like turns

119
00:06:58.970 --> 00:07:02.210
all the variables in the single letter
variable names and things like that.

120
00:07:02.210 --> 00:07:05.686
If at all possible make sure your
development build is does not minifying so

121
00:07:05.686 --> 00:07:08.941
that when you look at something like
the callStack you're not seeing h

122
00:07:08.941 --> 00:07:11.313
calls an anonymous function,
calls e, calls m but

123
00:07:11.313 --> 00:07:14.090
you see something that's like
more meaningful than that.

124
00:07:14.090 --> 00:07:18.837
So either way, basically the all
those YouTube videos are causing

125
00:07:18.837 --> 00:07:24.370
a bunch of screen junk that's like
my first take away right here.

126
00:07:24.370 --> 00:07:27.670
So I project a low those in asynchronously
if I could just like render the page and

127
00:07:27.670 --> 00:07:29.094
then load those iFrames in.

128
00:07:30.900 --> 00:07:34.230
There's a ton of JavaScript going on.

129
00:07:34.230 --> 00:07:36.450
So there's kinda two approaches
that we could take care.

130
00:07:36.450 --> 00:07:40.560
We can pick a section that's
like very JavaScript heavy and

131
00:07:40.560 --> 00:07:44.060
then we can see what it is that
it's doing, what's taking so long.

132
00:07:45.430 --> 00:07:50.020
Is like this base.js and we could
kind of go in here click on it and

133
00:07:50.020 --> 00:07:54.450
then we could pre-print it, so now we're
back in the sources area it's gonna take

134
00:07:54.450 --> 00:07:56.350
a minute and it's YouTube player.

135
00:07:56.350 --> 00:07:59.690
So it's like the iFrame call out,
there are calling this base thing and

136
00:07:59.690 --> 00:08:02.060
it's like this YouTube
boot strapping process.

137
00:08:02.060 --> 00:08:07.530
So again, a lot of that JavaScript could
be not resolved, cuz it's okay to do a lot

138
00:08:07.530 --> 00:08:11.490
of work in the main thread, but it could
be done after the whole page is loaded.

139
00:08:11.490 --> 00:08:14.570
If you use JavaScript to load
these in asynchronously.

140
00:08:14.570 --> 00:08:15.640
&gt;&gt; Speaker 3: Yeah.

141
00:08:15.640 --> 00:08:20.240
So speaking of the YouTube I'm betting on,
so

142
00:08:20.240 --> 00:08:25.140
earlier you had talked about how when you
were trying to do a page on it it will not

143
00:08:25.140 --> 00:08:31.270
necessarily pick up on CSS
rules that are being applied

144
00:08:31.270 --> 00:08:38.260
to other pages in your site and to
anything that is potentially interactive.

145
00:08:38.260 --> 00:08:43.300
On the audit results some of
the removed unused CSS rules tab,

146
00:08:43.300 --> 00:08:50.630
it picks up no CSS rules being used in
the CSS files for the YouTube embeds.

147
00:08:50.630 --> 00:08:55.110
Is that the primary reason why it's
not picking up any used style rules or

148
00:08:55.110 --> 00:08:55.749
is that another reason?

149
00:08:57.150 --> 00:08:58.910
&gt;&gt; Jon: So let me make sure I understand.

150
00:08:58.910 --> 00:09:03.098
So we're in the audits tab.

151
00:09:03.098 --> 00:09:04.390
I think I've got it open.

152
00:09:04.390 --> 00:09:08.530
I got multiple dev tools going on here.

153
00:09:09.530 --> 00:09:13.070
So when we ran the audit,
there was the unused CSS rules?

154
00:09:13.070 --> 00:09:14.420
&gt;&gt; Speaker 3: Right.

155
00:09:14.420 --> 00:09:17.860
&gt;&gt; Jon: And it wasn't picking up things
that are applying to the YouTube?

156
00:09:17.860 --> 00:09:22.548
&gt;&gt; Speaker 3: Right, it was saying that
100% of the CSS rules in each YouTube

157
00:09:22.548 --> 00:09:26.244
embed CSS file is not being
used on the current page.

158
00:09:26.244 --> 00:09:26.966
&gt;&gt; Jon: Got you.

159
00:09:26.966 --> 00:09:28.696
&gt;&gt; [CROSSTALK]
&gt;&gt; Speaker 3: What you were talking about

160
00:09:28.696 --> 00:09:31.140
is the primary reason why that's the case.

161
00:09:31.140 --> 00:09:32.570
&gt;&gt; Jon: Yes.
I think there's like two different things

162
00:09:32.570 --> 00:09:33.230
going on there.

163
00:09:33.230 --> 00:09:37.360
Like one, all those YouTube embeds
are iFrames, so their page source

164
00:09:37.360 --> 00:09:40.580
is going to be different, but the resource
still comes through to your page.

165
00:09:40.580 --> 00:09:44.480
Like you're downloading the CSS but
you're not responsible for that markup.

166
00:09:44.480 --> 00:09:48.493
The other thing that is definitely, like
what I was talking about before is that,

167
00:09:48.493 --> 00:09:50.190
YouTube loads these multi level.

168
00:09:50.190 --> 00:09:52.030
So it's like that image comes in.

169
00:09:53.070 --> 00:09:58.060
And so, this audit is only as good as
when DOM content loaded event fires.

170
00:09:58.060 --> 00:10:00.340
So all the like Chrome that
starts coming in afterwards and

171
00:10:00.340 --> 00:10:04.160
all that staff isn't gonna be present
when DOM content loaded fire.

172
00:10:04.160 --> 00:10:07.910
So like a lot of it is just markup
that's coming in asynchronously.

