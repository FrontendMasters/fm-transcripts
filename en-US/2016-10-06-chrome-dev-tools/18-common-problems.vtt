WEBVTT

1
00:00:00.000 --> 00:00:03.844
[MUSIC]

2
00:00:03.844 --> 00:00:06.588
&gt;&gt; Jon Kuperman: So next up I wanted to
talk about the most common things that

3
00:00:06.588 --> 00:00:10.340
you'll see from all those different
network problems that can possibly happen

4
00:00:10.340 --> 00:00:12.595
but first I think we have
a couple of questions.

5
00:00:12.595 --> 00:00:13.181
&gt;&gt; Speaker 2: Yeah so

6
00:00:13.181 --> 00:00:17.966
on from Kidar we have,
do people use both Chrome stable and

7
00:00:17.966 --> 00:00:21.480
Canary at the same time?
&gt;&gt; Jon Kuperman: Yeah, so

8
00:00:21.480 --> 00:00:27.020
that's kinda up to you like you can go
either way Canaries cool because it

9
00:00:27.020 --> 00:00:32.200
has some extra tools and some better like
the more modern stuff for a Dev tools.

10
00:00:32.200 --> 00:00:37.580
But Canary is also very beta in the sense
that like it may well just crash on you or

11
00:00:37.580 --> 00:00:42.660
like some of the stuff is really
experimental so I like to use Canary for

12
00:00:42.660 --> 00:00:45.650
everything and
deal with it when it crashes.

13
00:00:46.810 --> 00:00:47.960
You can also just use stable for

14
00:00:47.960 --> 00:00:51.950
everything and just wait on new
stuff to come, or you can use both.

15
00:00:51.950 --> 00:00:53.310
Definitely an opinion thing, so.

16
00:00:56.320 --> 00:00:57.440
Okay, cool, and

17
00:00:57.440 --> 00:01:02.430
then I had two on Twitter which where
from stuff we had talked about before.

18
00:01:02.430 --> 00:01:07.030
One was how you would go about things like
lazy loading which I had kind of mentioned

19
00:01:07.030 --> 00:01:10.210
before, only loading stuff that's
in the viewport basically.

20
00:01:11.390 --> 00:01:14.650
And so the whole idea with
lazy loading would just be

21
00:01:14.650 --> 00:01:16.440
that like I kind of mentioned it.

22
00:01:16.440 --> 00:01:17.770
Like, so if you have all these images and

23
00:01:17.770 --> 00:01:20.920
you don't want to load all of them, you
would instead of putting a source on them,

24
00:01:20.920 --> 00:01:23.540
if you have a source,
the browser's going to fetch him.

25
00:01:23.540 --> 00:01:26.720
You could put a data attribute
on it with the source URL.

26
00:01:26.720 --> 00:01:28.350
Then you can do some JavaScript so

27
00:01:28.350 --> 00:01:32.436
you can get the view port with get
client bounding wrecked or whatever.

28
00:01:32.436 --> 00:01:34.370
There's an API call for the view port and

29
00:01:34.370 --> 00:01:38.820
you can like say that anything
that's out of that you can add it.

30
00:01:38.820 --> 00:01:42.430
You can take use the JavaScript to take
the data attribute and append a source so

31
00:01:42.430 --> 00:01:47.600
basically it's like this trick that you
do where you don't load things until they

32
00:01:47.600 --> 00:01:51.870
come into view and then the other one was
just about like critical rendering path.

33
00:01:51.870 --> 00:01:55.670
In CSS, and I think it's just like,
that's a term just used for like,

34
00:01:55.670 --> 00:01:58.640
what stuff is like the critical rendering
that is like what's necessary for

35
00:01:58.640 --> 00:02:00.150
your app to start functioning.

36
00:02:01.150 --> 00:02:04.810
Because there is a lot of stuff
like the HTML might be there but

37
00:02:04.810 --> 00:02:07.350
until the synchronous JavaScript loads,

38
00:02:07.350 --> 00:02:09.870
you won't be able to necessarily
click around and do stuff.

39
00:02:09.870 --> 00:02:13.390
So it's like basically like a lot of it is
kind of what I was talking about before,

40
00:02:13.390 --> 00:02:18.400
or just like making sure that it's usually
common practice to have one CSS and

41
00:02:18.400 --> 00:02:19.180
one JavaScript file.

42
00:02:19.180 --> 00:02:22.850
But in certain situations you
might wanna have like the CSS and

43
00:02:22.850 --> 00:02:26.120
JavaScript that you absolutely
need to render your page and

44
00:02:26.120 --> 00:02:29.240
then a separate big file that has like all
the other stuff you might need eventually.

45
00:02:29.240 --> 00:02:34.090
So your page renders really quick and
then, so the most common

46
00:02:34.090 --> 00:02:40.180
networking issues that you'll see are the
queued slash stalled either side of that.

47
00:02:40.180 --> 00:02:44.810
Again with HTTP 1 like we talked about
Chrome can only handle six synchronous

48
00:02:44.810 --> 00:02:48.680
requests, so if you have more than that
they're gonna be stalled or queued.

49
00:02:49.750 --> 00:02:52.330
So do what you can to get it down to six,
and I think,

50
00:02:52.330 --> 00:02:54.790
I'm pretty sure all the browsers have

51
00:02:54.790 --> 00:02:58.210
slightly different numbers of synchronous
requests but I'd say like the five and

52
00:02:58.210 --> 00:03:02.080
six range is a really good number for
initial load if you can.

53
00:03:02.080 --> 00:03:04.720
Obviously, images throw that off,
but they're also a lower priority.

54
00:03:04.720 --> 00:03:11.420
So yep and then slow time to first byte,
which can be one of two things.

55
00:03:11.420 --> 00:03:13.870
One is you could be on
a bad network connection,

56
00:03:13.870 --> 00:03:18.260
like taking a long time and
the other one is a slow server.

57
00:03:18.260 --> 00:03:22.137
So if you can check your network
connection just to see if it's slow

58
00:03:22.137 --> 00:03:24.977
everywhere and
figure out if it's that or not and

59
00:03:24.977 --> 00:03:29.271
if it's not then you wanna kind of toss
the ticket onto the back end team and

60
00:03:29.271 --> 00:03:33.379
say okay I've got a really slow time
to first byte all of my CSS assets.

61
00:03:33.379 --> 00:03:35.584
Like can we cache these
put them on a CDN and

62
00:03:35.584 --> 00:03:38.430
can we speed anything
up that kind of stuff.

63
00:03:38.430 --> 00:03:41.560
No longer your job is front and
developers not

64
00:03:41.560 --> 00:03:45.480
that anybody gets to be just a front and
developer anymore but there we have it.

65
00:03:45.480 --> 00:03:50.980
Another thing you can do which is really
useful is there's a network simulator.

66
00:03:50.980 --> 00:03:54.750
So I'm hover back over to Dev tools and
open them up

67
00:03:54.750 --> 00:03:58.040
on the network tab I'm actually gonna go
ahead and pin this down to the bottom.

68
00:03:59.180 --> 00:04:02.340
And so
it over here this throttling concept.

69
00:04:02.340 --> 00:04:05.890
So the traveling concept is to
simulate different traffic conditions

70
00:04:05.890 --> 00:04:08.980
all way from offline to
like really really slow.

71
00:04:08.980 --> 00:04:12.080
I like to load sites at
regular 3G just to kind of

72
00:04:12.080 --> 00:04:14.390
remind yourselves of what
It's going to really be.

73
00:04:14.390 --> 00:04:16.120
I mean we just get so

74
00:04:16.120 --> 00:04:21.106
used to you I live in California, places
you have high speed Internet everywhere.

75
00:04:21.106 --> 00:04:25.640
You have 4G LTE service, you have a phone
that was made in the last five years.

76
00:04:25.640 --> 00:04:26.980
Everything is really powerful.

77
00:04:28.080 --> 00:04:31.140
And so you rebuild sites that way
like we are on our MacBook Pros.

78
00:04:32.470 --> 00:04:35.980
Like a T1 line or whatever and we're
building websites, and we're forgetting

79
00:04:35.980 --> 00:04:39.310
how many people use the web, and
how different the conditions can be.

80
00:04:39.310 --> 00:04:43.550
So try like throttling to regular 3G and
then refreshing your pages and

81
00:04:43.550 --> 00:04:45.760
seeing how long they take to load now.

82
00:04:45.760 --> 00:04:47.870
And then remember to stop the throttling.

83
00:04:49.480 --> 00:04:53.740
I have one time file I took it
at Twitter over a page taking

84
00:04:53.740 --> 00:04:58.050
over the threshold to load and then
realize that I had a regular 4G on, so

85
00:04:58.050 --> 00:05:01.234
it wasn't a real noticeable amount
of throttling, but it was somewhat.

86
00:05:01.234 --> 00:05:04.090
So yeah remember to turn it back to no
throttling when you want to go fast

87
00:05:04.090 --> 00:05:04.760
on the web again.

88
00:05:04.760 --> 00:05:08.910
But again, this also only is in
play when Dev tools are open.

89
00:05:08.910 --> 00:05:11.740
So throttling won't actually
mess up your regular sessions.

90
00:05:12.990 --> 00:05:17.430
So that's pretty cool and I really
recommend put on good 3G and do a refresh

91
00:05:17.430 --> 00:05:20.410
of your one your biggest pages and
see what that experience is like.

92
00:05:20.410 --> 00:05:24.330
I mean it's could even be if
you're at a coffee shop or

93
00:05:24.330 --> 00:05:28.590
crappy college WiFi something like
that and that's the real customers,

94
00:05:28.590 --> 00:05:31.940
local customers that are struggling
to get your page to load.

