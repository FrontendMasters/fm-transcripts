WEBVTT

1
00:00:00.000 --> 00:00:03.900
[MUSIC]

2
00:00:03.900 --> 00:00:08.011
&gt;&gt; Jon: That was the editing phase and
now we're moving into

3
00:00:08.011 --> 00:00:12.411
the debugging phase over here
which will be pretty fun.

4
00:00:12.411 --> 00:00:16.683
So step through debugging, which is a
concept that is really popular in a lot of

5
00:00:16.683 --> 00:00:21.409
programming languages, but for a long time
was missing as an option from JavaScript,

6
00:00:21.409 --> 00:00:24.230
so I think it's new for a lot of people.

7
00:00:24.230 --> 00:00:27.988
The basic idea is one of the probably
the most common way I see people debug

8
00:00:27.988 --> 00:00:32.067
JavaScript applications right now is
console log all over the place, right?

9
00:00:32.067 --> 00:00:33.731
It's probably what a lot of you do and

10
00:00:33.731 --> 00:00:37.278
something like going in each function
console log, it worked, console log,

11
00:00:37.278 --> 00:00:40.201
it didn't work and then refresh and
see what's in the console.

12
00:00:40.201 --> 00:00:43.981
So step through debugging allows you to
have a lot more control than that and

13
00:00:43.981 --> 00:00:45.670
just be more precise in general.

14
00:00:46.930 --> 00:00:51.330
So let's kind of do one together,
kind of talking it through, and

15
00:00:51.330 --> 00:00:54.990
then we'll have one more as a challenge
where you can do on your own.

16
00:00:54.990 --> 00:00:57.110
So I'm gonna go to this Debugging tab.

17
00:00:57.110 --> 00:01:00.100
This will be the challenge,
what's wrong with this Github thing.

18
00:01:00.100 --> 00:01:05.308
But in the meantime, I put another little
file so I'm gonna open up the dev tools,

19
00:01:05.308 --> 00:01:08.948
I'm gonna go to Sources,
make this a little bit bigger.

20
00:01:13.217 --> 00:01:14.382
&gt;&gt; Jon: I'm gonna go ahead and

21
00:01:14.382 --> 00:01:18.436
remove this mapping for now, the
workspace, cuz I don't need it any longer.

22
00:01:18.436 --> 00:01:22.831
And basically another cool little tip
that you can do here, let me close these,

23
00:01:22.831 --> 00:01:26.373
is you can Cmd+P and you can do
a fuzzy search just like Sublime or

24
00:01:26.373 --> 00:01:27.962
Atom or anything like that.

25
00:01:27.962 --> 00:01:29.861
So you can start looking for
files this way.

26
00:01:29.861 --> 00:01:33.560
You can do .js to see the .js files,
.css, anything like that.

27
00:01:34.930 --> 00:01:39.920
So I made this one which you wouldn't be
able to find maybe naturally cuz it's just

28
00:01:39.920 --> 00:01:43.000
set aside but hopefully the GitHub
one will be a little bit easier.

29
00:01:43.000 --> 00:01:46.250
So this is debugging2.js
that we'll do together.

30
00:01:47.700 --> 00:01:50.970
So I'm gonna not serve in
the file system this time.

31
00:01:50.970 --> 00:01:54.006
So basically I've got this code and
it's a little bit confusing.

32
00:01:54.006 --> 00:01:56.201
It's functions that call
each other whatever.

33
00:01:56.201 --> 00:01:59.349
And I wanted to show step through
debugging so we can really get a feel for

34
00:01:59.349 --> 00:02:03.370
how this can help you better understand
the code that you're working with.

35
00:02:03.370 --> 00:02:07.340
So, before we kind of squeeze this right
panel off to the side and ignored it.

36
00:02:07.340 --> 00:02:09.050
Now we're gonna do the same
thing with the left panel.

37
00:02:09.050 --> 00:02:13.180
So we don't need this kind of file system
thing anymore, now we want these two.

38
00:02:13.180 --> 00:02:15.720
So the first thing that I'll
do is I'm gonna go ahead and

39
00:02:15.720 --> 00:02:20.380
the way you add what's called a break
point is by clicking on a line number.

40
00:02:20.380 --> 00:02:24.370
So, I'm gonna click on line number 2 and
you get this blue breakpoint here.

41
00:02:24.370 --> 00:02:26.940
So, I'm not sure where everybody's at,
as far as this goes.

42
00:02:26.940 --> 00:02:29.340
So, I'm kinda gonna start with
an explanation from the beginning and

43
00:02:29.340 --> 00:02:30.190
move through it.

44
00:02:30.190 --> 00:02:34.650
So, basically the idea with step through
debugging and a breakpoint and why those

45
00:02:34.650 --> 00:02:38.700
are named that way is a breakpoint is
communicating with the browser and

46
00:02:38.700 --> 00:02:42.120
it's saying when you
go to parse this code.

47
00:02:42.120 --> 00:02:45.280
I want you to halt all execution and

48
00:02:45.280 --> 00:02:49.220
I want you to maintain state of everything
that you had going on at that point.

49
00:02:49.220 --> 00:02:50.580
And I want you to give me control.

50
00:02:50.580 --> 00:02:54.716
So we're actually really just
pausing the JavaScript execution.

51
00:02:54.716 --> 00:02:59.020
And the reason it's called step through
debugging is because from that pause,

52
00:02:59.020 --> 00:03:03.220
you're then able to either step into
the function that's being called,

53
00:03:03.220 --> 00:03:06.190
step over it to the next one,
or step out of it back.

54
00:03:06.190 --> 00:03:08.120
So you get these kind of three moves here.

55
00:03:08.120 --> 00:03:09.010
So let's take a look at them.

56
00:03:09.010 --> 00:03:11.621
So I set a breakpoint by
clicking on a line number and

57
00:03:11.621 --> 00:03:14.250
then I'm gonna go ahead and
just refresh the page.

58
00:03:14.250 --> 00:03:17.497
So it's gonna load all the HTML and
CSS just like normal, and

59
00:03:17.497 --> 00:03:20.498
it's gonna load the JavaScript
file just like normal.

60
00:03:20.498 --> 00:03:25.448
But now when it goes to parse it and
run it.

61
00:03:25.448 --> 00:03:26.601
I should say not parse it.

62
00:03:26.601 --> 00:03:30.650
So you're not gonna hit a breakpoint
just because the code exists.

63
00:03:30.650 --> 00:03:34.160
You're only gonna hit a breakpoint if
that code actually goes to be executed.

64
00:03:34.160 --> 00:03:38.820
So if I didn't have this foo here
where I'm calling a function,

65
00:03:38.820 --> 00:03:40.650
the breakpoint is not gonna show.

66
00:03:40.650 --> 00:03:42.170
Or it's not gonna pause.

67
00:03:42.170 --> 00:03:44.880
But since I call foo and
it goes to execute this line,

68
00:03:44.880 --> 00:03:46.720
it pauses it here for me.

69
00:03:46.720 --> 00:03:49.390
So we get this little paused in debugger.

70
00:03:49.390 --> 00:03:53.680
Ignoring this tab over here, we've got
a couple of things going on over here and

71
00:03:53.680 --> 00:03:56.640
this is where things start
to get pretty technical.

72
00:03:56.640 --> 00:04:01.670
So stop me if I gloss over something or if
I need to slow down or anything like that.

73
00:04:02.860 --> 00:04:05.120
So I'm gonna pretend this isn't here for
now.

74
00:04:05.120 --> 00:04:10.336
So we've got [LAUGH] watch,
Call Stack, and Breakpoints.

75
00:04:10.336 --> 00:04:14.080
So the breakpoint is just letting us
know because often in more advanced

76
00:04:14.080 --> 00:04:17.960
applications, you'll have breakpoints all
over your application, more than just one.

77
00:04:17.960 --> 00:04:21.420
So this down here, this section,
we can kind of ignore because

78
00:04:21.420 --> 00:04:25.190
this is only gonna tell you
where all your break points are.

79
00:04:25.190 --> 00:04:29.260
So let's kind of cut this whole
section out, forget about it.

80
00:04:29.260 --> 00:04:35.550
Watch allows you to spy on any variable,
anything declared.

81
00:04:35.550 --> 00:04:36.940
So for example,

82
00:04:36.940 --> 00:04:41.340
if we wanted to see what one is set
to before this line gets executed.

83
00:04:41.340 --> 00:04:45.090
We can go ahead and
add something to Watch and type in one and

84
00:04:45.090 --> 00:04:48.060
hit Enter and
you'll see that it's undefined.

85
00:04:49.240 --> 00:04:53.420
However after this line is executed,
if we keep one being watched,

86
00:04:53.420 --> 00:04:57.020
you'll see that it's
set to the string one.

87
00:04:57.020 --> 00:04:58.690
So this is really cool.

88
00:04:58.690 --> 00:05:00.930
So you can even do things like
you can double-click to edit,

89
00:05:00.930 --> 00:05:04.570
you could set it to foo, and it'll tell
you that foo is a function, right?

90
00:05:04.570 --> 00:05:07.140
And then you can even dive down
into it like this and see,

91
00:05:07.140 --> 00:05:08.630
does it have any arguments?

92
00:05:08.630 --> 00:05:11.560
No, what's its prototype?

93
00:05:11.560 --> 00:05:12.130
Things like that.
So

94
00:05:12.130 --> 00:05:15.290
you get this full control where you can
really get a good understanding of what's

95
00:05:15.290 --> 00:05:16.480
going on here.

96
00:05:16.480 --> 00:05:21.140
And then the call stack is just
simply how did we get here?

97
00:05:21.140 --> 00:05:23.791
Why did we execute this bit of code?

98
00:05:23.791 --> 00:05:28.960
So for this case,
this is contrived, an example.

99
00:05:28.960 --> 00:05:30.641
It's really, really simple, right?

100
00:05:30.641 --> 00:05:35.226
We called foo because foo was called
by anonymous function here, right?

101
00:05:35.226 --> 00:05:37.141
We called foo so we got to foo.

102
00:05:37.141 --> 00:05:41.328
In a bigger code base, you're often
going to see things like well,

103
00:05:41.328 --> 00:05:44.643
you had an event listener
which went through jQuery.

104
00:05:44.643 --> 00:05:47.994
jQuery did the on-click and
then jQuery called its trigger method and

105
00:05:47.994 --> 00:05:51.080
then jQuery trigger called this,
you know what I mean.

106
00:05:51.080 --> 00:05:53.390
So you'll start seeing these
call stacks that are longer and

107
00:05:53.390 --> 00:05:56.340
longer the more advanced your program is.

108
00:05:56.340 --> 00:05:57.670
For this example, it's really simple.

109
00:05:57.670 --> 00:06:01.257
So it's not uncommon to see
30 files in the call stack or

110
00:06:01.257 --> 00:06:04.038
something like that in a real application.

111
00:06:04.038 --> 00:06:05.954
So this is stuff that we're watching,

112
00:06:05.954 --> 00:06:08.227
this is all totally up to you to add and
remove.

113
00:06:08.227 --> 00:06:12.250
And then this is like at whatever break
point we're at, how did we get here?

114
00:06:12.250 --> 00:06:13.790
Those are kind of the two
things going on and

115
00:06:13.790 --> 00:06:18.620
then very simply this will just
pause wherever you tell it to.

116
00:06:18.620 --> 00:06:21.790
So you can do things like you can click
back and forth in this call stack.

117
00:06:21.790 --> 00:06:24.910
If there were multiple files, it'll
jump through those multiple files but

118
00:06:24.910 --> 00:06:29.880
since there's only one, it'll just jump
from line 2 up here to line 27 down here.

119
00:06:31.210 --> 00:06:34.720
And so, okay, so now we're kinda here,
we see that we have this function foo.

120
00:06:34.720 --> 00:06:37.460
We already checked one and it's undefined.

121
00:06:37.460 --> 00:06:40.532
So now we've got some choices and
the choices are up here.

122
00:06:40.532 --> 00:06:44.850
So we can resume script execution, this
for right now will just display the rest

123
00:06:44.850 --> 00:06:48.019
of the page because we don't
have any other break points.

124
00:06:48.019 --> 00:06:51.333
But if we did have other break points,
this is like, I didn't want this one,

125
00:06:51.333 --> 00:06:52.850
skip through for now.

126
00:06:52.850 --> 00:06:57.100
So this could be useful if you were
checking when a function errors and you

127
00:06:57.100 --> 00:07:00.400
put a breakpoint in the function and the
first time it hits, it's not the error.

128
00:07:00.400 --> 00:07:03.150
So you're like, just play on,
just keep going.

129
00:07:03.150 --> 00:07:05.490
The second time it hits, it'll stop again.

130
00:07:05.490 --> 00:07:07.330
But since we only have this called once,

131
00:07:07.330 --> 00:07:10.779
hitting resume script execution
will just resume the script as is.

132
00:07:11.820 --> 00:07:15.006
You can step over to
the next function call.

133
00:07:15.006 --> 00:07:17.653
So okay, we stopped at one, that's great.

134
00:07:17.653 --> 00:07:19.051
Stop when anything else happens.

135
00:07:19.051 --> 00:07:22.430
Stop the next time a function's called and
we'll do that in a second.

136
00:07:22.430 --> 00:07:28.350
You can step into a function call, so
if the next place we stop was bar.

137
00:07:28.350 --> 00:07:31.190
And we didn't wanna skip all
the way down to this call.

138
00:07:31.190 --> 00:07:32.845
We could actually start stepping inward.

139
00:07:32.845 --> 00:07:35.556
So if you think about like when
you're writing JavaScript code,

140
00:07:35.556 --> 00:07:38.677
you kind of start building these
pyramid sometimes of functions, right?

141
00:07:38.677 --> 00:07:42.839
So you've got your Ajax function and
then inside that is a success function and

142
00:07:42.839 --> 00:07:46.824
then inside that, you're sorting names or
something like that, right?

143
00:07:46.824 --> 00:07:50.073
So step into is just going
one next function in.

144
00:07:50.073 --> 00:07:54.662
Basically kind of like looking for
curly braces almost, and stepping in.

145
00:07:54.662 --> 00:07:57.788
Stepping over would be like if
you have foo and you have bar.

146
00:07:57.788 --> 00:08:01.456
You're not gonna go into foo,
you're just gonna step over to bar and

147
00:08:01.456 --> 00:08:02.606
stop at the next one.

148
00:08:02.606 --> 00:08:06.570
And then when you step in,
you often need to just step back out.

149
00:08:06.570 --> 00:08:08.608
So that's really the only
three ways that you can go.

150
00:08:08.608 --> 00:08:11.973
You can step over it, you can step
into it, and if you've stepped in,

151
00:08:11.973 --> 00:08:14.450
then you get the option
to step back out of it.

152
00:08:14.450 --> 00:08:17.170
So let's play with that,
cuz that's kind of an advanced concept.

153
00:08:17.170 --> 00:08:18.930
Yeah, go ahead.
&gt;&gt; Speaker 2: Can you touch on that

154
00:08:18.930 --> 00:08:21.960
async check box up there?
&gt;&gt; Jon: Yeah, definitely.

155
00:08:21.960 --> 00:08:26.670
So basically, and this is really cool,
a powerful feature.

156
00:08:26.670 --> 00:08:34.420
Basically the stack traces
are typically reserved for

157
00:08:34.420 --> 00:08:38.750
these synchronous methods like what foo
calls bar calls bad, something like that.

158
00:08:38.750 --> 00:08:43.248
Chrome dev tools is adding a lot of really
cool support around async, promises,

159
00:08:43.248 --> 00:08:44.780
await, things like that.

160
00:08:44.780 --> 00:08:48.428
And so
basically an async stack trace is like,

161
00:08:48.428 --> 00:08:53.195
if you had a file, script.js,
and it did some Ajax thing and

162
00:08:53.195 --> 00:08:58.452
then came back with a success function and
called something else.

163
00:08:58.452 --> 00:09:01.661
So it's basically just the full
asynchronous stack trace.

164
00:09:01.661 --> 00:09:04.554
So if you're working with Ajax or
something like that,

165
00:09:04.554 --> 00:09:06.040
you could have that ticked.

166
00:09:06.040 --> 00:09:09.601
If you just want to see what
immediately called the function,

167
00:09:09.601 --> 00:09:11.596
then you don't have that ticked.

168
00:09:11.596 --> 00:09:16.582
Okay, cool, so the point being with these
things is that I really want people to get

169
00:09:16.582 --> 00:09:18.872
comfortable clicking through them.

170
00:09:18.872 --> 00:09:21.806
Because I think a lot of people just don't
use it cuz you get to a page like this,

171
00:09:21.806 --> 00:09:23.560
and it's just really intimidating looking.

172
00:09:23.560 --> 00:09:25.370
There's a lot going on.

173
00:09:25.370 --> 00:09:26.946
So you can't really mess anything up here.

174
00:09:26.946 --> 00:09:29.946
And worst case scenario,
you just hit Cmd+R or

175
00:09:29.946 --> 00:09:34.221
Ctrl whatever Windows people use,
and you just refresh the page and

176
00:09:34.221 --> 00:09:38.210
you'll get right back to this stack trace,
this breakpoint.

177
00:09:38.210 --> 00:09:41.190
So you can really just play.

178
00:09:41.190 --> 00:09:43.830
So if I hit resume script execution,
like I said, it's just done.

179
00:09:43.830 --> 00:09:44.930
There's no other breakpoints.

180
00:09:44.930 --> 00:09:46.053
So I'll hit Refresh again.

181
00:09:46.053 --> 00:09:50.179
And on this new Refresh, again,
it pauses in debugger at line 2.

182
00:09:50.179 --> 00:09:51.502
So this time I'm not gonna hit Play.

183
00:09:51.502 --> 00:09:54.460
This time I'll hit step over
to the next function call.

184
00:09:54.460 --> 00:09:57.620
So I hit step over and it goes for
a little bit and it goes.

185
00:09:57.620 --> 00:10:00.970
So now this is important to notice and
kind of cool.

186
00:10:00.970 --> 00:10:03.780
Some people might have thought
that it would stop here, but

187
00:10:03.780 --> 00:10:05.880
this is just this function declaration,
right?

188
00:10:05.880 --> 00:10:08.880
It's not actually executing any code.

189
00:10:08.880 --> 00:10:12.660
So this is actually gonna get hoisted,
right, JavaScript hoisted to the top.

190
00:10:12.660 --> 00:10:17.350
So the next thing that actually executes
is calling this function bar here.

191
00:10:17.350 --> 00:10:19.560
So let's say we want to step over
again and see what happens next.

192
00:10:21.240 --> 00:10:22.292
It goes to foobar.

193
00:10:22.292 --> 00:10:28.412
So from bar, if we had stepped in,
that would have meant going inside bar.

194
00:10:28.412 --> 00:10:31.892
But to step over, it means go to
the next thing that gets called foobar.

195
00:10:31.892 --> 00:10:35.198
Does that make sense as I know it's
like this took me forever to get my

196
00:10:35.198 --> 00:10:35.900
head around.

197
00:10:35.900 --> 00:10:39.160
I kept clicking on one when I meant
the other one or something like that.

198
00:10:40.324 --> 00:10:42.895
So yeah, so then we can go into foobar and
it's like okay,

199
00:10:42.895 --> 00:10:46.673
foobar I'm interested in stepping in cuz
if I skip over foobar, it's done, right,

200
00:10:46.673 --> 00:10:48.207
there's no more code to execute.

201
00:10:48.207 --> 00:10:50.749
So I'll step into foobar and boom,

202
00:10:50.749 --> 00:10:55.169
get a breakpoint here at line 13,
the beginning of foobar.

203
00:10:55.169 --> 00:10:57.840
So there's nothing to step into here,
it's just an object creation.

204
00:10:58.990 --> 00:11:00.648
But you can start to
really get a feel for,

205
00:11:00.648 --> 00:11:04.740
especially with JavaScript's rules
around things like hoisting.

206
00:11:06.030 --> 00:11:09.577
It can be confusing to understand
how your program is executing and

207
00:11:09.577 --> 00:11:13.692
step through debugging, even if you don't
have a bug can be really useful for

208
00:11:13.692 --> 00:11:17.840
just understanding what lines get
executed when, what stuff's being set.

209
00:11:17.840 --> 00:11:22.871
So for example, if we step

210
00:11:22.871 --> 00:11:27.453
back and back one more.

211
00:11:27.453 --> 00:11:29.610
And then, can I step into foo now?

212
00:11:31.110 --> 00:11:32.840
See, all right, even I screwed it up.

213
00:11:32.840 --> 00:11:37.440
So, if you step over, then stepping
out is not gonna get you back.

214
00:11:37.440 --> 00:11:39.380
If you step over and
you need to go back to something,

215
00:11:39.380 --> 00:11:42.870
you gotta restart the application process,
basically.

216
00:11:42.870 --> 00:11:45.140
So, I'm just gonna go
ahead an restart it here.

217
00:11:45.140 --> 00:11:48.490
So if I wanted to check on,
I'm watching this variable one, and

218
00:11:48.490 --> 00:11:49.760
one is undefined here, right?

219
00:11:49.760 --> 00:11:52.170
Cuz it hasn't executed this line yet.

220
00:11:52.170 --> 00:11:56.938
But if I step to the next function call
which is this bar here on line 8, you'll

221
00:11:56.938 --> 00:12:01.512
notice that the one that we're watching
over here is set to this variable.

222
00:12:01.512 --> 00:12:02.895
So that's really cool.

223
00:12:02.895 --> 00:12:07.637
The other thing that I wanted to
mention that's really useful is as

224
00:12:07.637 --> 00:12:09.162
state is preserved,

225
00:12:09.162 --> 00:12:14.795
you can also use the console as though
the application were frozen in time.

226
00:12:14.795 --> 00:12:17.065
So if I go to console and I just type one,

227
00:12:17.065 --> 00:12:23.165
it actually knows my variable frozen
in state, as set to this string of one.

228
00:12:23.165 --> 00:12:25.385
So you can kind of take things into
the console and click through them or

229
00:12:25.385 --> 00:12:26.449
play with them, stuff like that.

