WEBVTT

1
00:00:00.000 --> 00:00:03.836
[MUSIC]

2
00:00:03.836 --> 00:00:08.289
&gt;&gt; Jon: So this will be the last challenge
here, and basically, I've got like some

3
00:00:08.289 --> 00:00:13.210
documentation here on common memory
leaks and some examples stuff like that.

4
00:00:13.210 --> 00:00:18.622
But I also have some memory
leaking on this page, and

5
00:00:18.622 --> 00:00:24.290
so the goal here what we're gonna do is
we're gonna use combination of tools.

6
00:00:24.290 --> 00:00:27.360
The first one is the timeline
like we've all ready saw.

7
00:00:27.360 --> 00:00:29.400
So you can use the timeline and
remember you're looking for

8
00:00:29.400 --> 00:00:32.310
that jigsaw pattern that's
like the danger zone, and

9
00:00:32.310 --> 00:00:36.510
from there you can get a better idea of
like what is leaking memory, is it nodes?

10
00:00:36.510 --> 00:00:37.650
Is it JavaScript?

11
00:00:37.650 --> 00:00:39.340
Is it all these different things.

12
00:00:39.340 --> 00:00:45.260
The other one that we're gonna take a look
at is back over here in the profiles,

13
00:00:45.260 --> 00:00:48.690
and this is very similar to
the JavaScript CPU profile that we did,

14
00:00:48.690 --> 00:00:51.850
except it's,
they call it the Heap Snapshot.

15
00:00:51.850 --> 00:00:55.890
And so, what this does, if you take
a Heap Snapshot, is it looks and

16
00:00:55.890 --> 00:00:59.020
grabs every single thing that you have
in memory right now in your app, and

17
00:00:59.020 --> 00:01:00.320
you can just look at it.

18
00:01:00.320 --> 00:01:04.530
And so this has a very similar
concept in profiling land,

19
00:01:04.530 --> 00:01:06.430
you have like self and total time.

20
00:01:07.570 --> 00:01:12.800
In memory land you have shallow and
retained size, so shallow sizes like

21
00:01:12.800 --> 00:01:16.130
how big is the object if you have
got an object has got two keys and

22
00:01:16.130 --> 00:01:18.240
two values that's its shallow size.

23
00:01:18.240 --> 00:01:21.640
But if one of those values is
a reference to another object

24
00:01:22.650 --> 00:01:25.880
its retained size is it and
everything it has references to.

25
00:01:25.880 --> 00:01:27.550
Does that make sense?

26
00:01:27.550 --> 00:01:28.980
It's a little bit of a tricky concept.

27
00:01:28.980 --> 00:01:31.540
But so it's like what's cool is like,

28
00:01:33.200 --> 00:01:37.200
removing something from memory not
only gets you its shallow size but

29
00:01:37.200 --> 00:01:40.560
it connect you, it's retained size
back in free memory because if it's

30
00:01:40.560 --> 00:01:44.360
the last reference to something
you're freeing all that stuff up.

31
00:01:44.360 --> 00:01:47.280
So you can start seeing like if you wanted
to see like what the biggest shallow

32
00:01:47.280 --> 00:01:50.330
size things are on my
mastering chromed up tools.

33
00:01:50.330 --> 00:01:53.910
Looks like it's like these strings,
and I think that's from Mike.

34
00:01:53.910 --> 00:01:57.550
That's a service worker demo,
I don't know what we have time for, but

35
00:01:57.550 --> 00:02:00.476
the point being that you can
run a profile Heap Snapshot.

36
00:02:00.476 --> 00:02:04.639
And then you can start sorting by like
shallow size distance all those kind of

37
00:02:04.639 --> 00:02:05.170
things.

38
00:02:06.210 --> 00:02:09.530
While we're here I kind of wanted
to mention a few other cool things.

39
00:02:10.640 --> 00:02:13.950
One thing that is very, very helpful
is you can, with these Heap Snapshots,

40
00:02:13.950 --> 00:02:15.870
you can compare them to each other.

41
00:02:15.870 --> 00:02:18.980
This is great for like applications
where you wanna see the difference in

42
00:02:18.980 --> 00:02:21.000
memory between two places in time.

43
00:02:21.000 --> 00:02:24.980
So if you have a app that's a to-do list,
and it doesn't look like you have a memory

44
00:02:24.980 --> 00:02:27.180
leak just loading the page
you've refreshed the timeline,

45
00:02:27.180 --> 00:02:30.290
there's no memory leak, but users
are complaining that it gets really slow

46
00:02:30.290 --> 00:02:32.570
the more they interact on the to-do list.

47
00:02:32.570 --> 00:02:35.370
What you could do is you could
capture this Heap Snapshot.

48
00:02:35.370 --> 00:02:37.560
And then you could add and
remove a bunch of to-do list items,

49
00:02:37.560 --> 00:02:42.200
and then you go back to profiles
then you take another Heap Snapshot.

50
00:02:42.200 --> 00:02:45.580
So now we've got two, these are gonna
be probably fairly similar,

51
00:02:45.580 --> 00:02:48.760
but you know the point still,
no, what is going on?

52
00:02:50.200 --> 00:02:54.670
What you can do is you can, instead of the
summary of one, you can do a comparison.

53
00:02:54.670 --> 00:02:57.660
So you can take the second one and
you can compare it to the first one and

54
00:02:57.660 --> 00:03:00.790
you get this like, you get a delta,
you get what the difference is.

55
00:03:00.790 --> 00:03:03.480
So this is not gonna apply to our
examples cuz I don't have a cool,

56
00:03:03.480 --> 00:03:04.370
fancy application.

57
00:03:04.370 --> 00:03:06.250
But, when you're working
on your production app,

58
00:03:06.250 --> 00:03:10.420
especially if it's a single page app and
users are complaining that it gets slow,

59
00:03:10.420 --> 00:03:14.230
do a Heap Snapshot on page load,
mess with your app a whole bunch of times.

60
00:03:14.230 --> 00:03:19.190
Do a Heap Snapshot again and
compare that delta because you shouldn't

61
00:03:19.190 --> 00:03:22.570
see that much of a difference basically,
unless you're leaking memory in some way.

62
00:03:22.570 --> 00:03:25.430
Like if you're just adding a to-do
list item you shouldn't see a very

63
00:03:25.430 --> 00:03:27.550
large difference between the two.

64
00:03:27.550 --> 00:03:29.900
And then the last thing, if I can,

65
00:03:29.900 --> 00:03:33.890
over here is they have these two
tools that kind of help you do that.

66
00:03:33.890 --> 00:03:38.830
It's not as clean as the comparison,
but it's basically like an allocation

67
00:03:38.830 --> 00:03:41.980
over time, it just keeps taking snapshots
and kind of seeing where you're at.

68
00:03:41.980 --> 00:03:44.100
So you can like just click on this and

69
00:03:44.100 --> 00:03:47.940
get more of like a high level
view as it's just doing its work.

70
00:03:47.940 --> 00:03:50.958
Give it a second you'll start
seeing some blue lines.

71
00:03:50.958 --> 00:03:55.640
Well, maybe not.

72
00:03:55.640 --> 00:03:59.388
Anyway, if you were on a bigger app that
was doing more stuff you would start

73
00:03:59.388 --> 00:04:01.427
seeing basically, let me drag this up.

74
00:04:04.221 --> 00:04:08.587
&gt;&gt; Jon: You're basically start seeing,
as things are getting allocated,

75
00:04:08.587 --> 00:04:10.700
they're really subtle on here.

76
00:04:10.700 --> 00:04:12.510
Can you see this gray line here?

77
00:04:12.510 --> 00:04:16.270
I think in Chrome Stable it's blue,
in Chrome Canary it looks to be gray.

78
00:04:16.270 --> 00:04:19.760
But basically every time it takes a heap
allocation, it'll give you a line.

79
00:04:19.760 --> 00:04:21.970
And similar to the jigsaw thing,
what you wanna look for

80
00:04:21.970 --> 00:04:25.840
is if that line's getting taller each
time that it takes one of these things.

81
00:04:25.840 --> 00:04:27.780
Meaning more and
more memory's being allocated.

82
00:04:27.780 --> 00:04:29.020
Sorry, if that's tough to see.

83
00:04:30.630 --> 00:04:34.060
And then you have back in profiles
like a very last thing is like

84
00:04:34.060 --> 00:04:38.040
you can just see what memories being
allocated from your scripts like

85
00:04:38.040 --> 00:04:41.830
this isn't gonna be documents
stuff nodes anything like that.

86
00:04:41.830 --> 00:04:45.212
So you can just get like this
final allocation that's just like,

87
00:04:45.212 --> 00:04:50.830
come on, I did my pages I'm doing enough.

88
00:04:50.830 --> 00:04:52.414
Check these all on the challenge page,

89
00:04:52.414 --> 00:04:55.120
cuz the challenge page is doing
a bunch of stuff in memory.

90
00:04:55.120 --> 00:04:58.790
I think this page just has no
nothing running on it, but yes, so

91
00:04:58.790 --> 00:05:02.950
the basic idea they have got some stuff
here is like, yeah, so do a timeline

92
00:05:02.950 --> 00:05:07.070
recording that's always the first way
to see if you have a problem at all.

93
00:05:07.070 --> 00:05:10.840
And then if you do have a problem
connect a Heap Snapshot.

94
00:05:10.840 --> 00:05:15.229
This is like an interactive button compare
those Snapshots kinda start figuring out

95
00:05:15.229 --> 00:05:16.896
what's going on with the code,

96
00:05:16.896 --> 00:05:19.946
if you can without looking at
the actual JavaScript code.

97
00:05:19.946 --> 00:05:21.390
See if you can get it with just the tools.

