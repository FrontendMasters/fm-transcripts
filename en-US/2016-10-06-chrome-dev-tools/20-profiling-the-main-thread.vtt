WEBVTT

1
00:00:00.000 --> 00:00:03.165
[MUSIC]

2
00:00:03.165 --> 00:00:07.522
&gt;&gt; Jon Kuperman: The last thing to kinda
hit on here is this section over here,

3
00:00:07.522 --> 00:00:10.540
so I'm gonna minimize these.

4
00:00:10.540 --> 00:00:14.220
A lot of this is brand new,
just released, I think, at Google I/O.

5
00:00:14.220 --> 00:00:19.640
But the important one that's always been
there is, what is the main thread doing?

6
00:00:19.640 --> 00:00:21.489
So with JavaScript,
you're single threaded.

7
00:00:22.880 --> 00:00:23.930
And so it's kinda cool and

8
00:00:23.930 --> 00:00:27.970
important to be able to see what
work is going on on your website.

9
00:00:27.970 --> 00:00:29.590
So this is gonna be very similar.

10
00:00:29.590 --> 00:00:31.960
It's almost as though you took
this little pyramid thing and

11
00:00:31.960 --> 00:00:33.500
just turned it on its side, basically.

12
00:00:34.640 --> 00:00:37.540
So again, the x-axis is time.

13
00:00:38.660 --> 00:00:41.137
And then the y-axis is just call stack.

14
00:00:41.137 --> 00:00:45.834
So I think one mistake is, you don't
ever wanna care about a really tall one,

15
00:00:45.834 --> 00:00:47.920
like this one over here.

16
00:00:47.920 --> 00:00:49.970
See how it's really tall?

17
00:00:49.970 --> 00:00:52.170
Again, I'm using Shift to scroll.

18
00:00:52.170 --> 00:00:54.570
That doesn't matter,
cuz that's just like nested functions,

19
00:00:54.570 --> 00:00:56.630
which are fine, that's how it works.

20
00:00:56.630 --> 00:00:58.899
What you wanna look out for
are really fat ones.

21
00:00:59.970 --> 00:01:02.220
Because those are the things
that take a really long time.

22
00:01:02.220 --> 00:01:03.310
Some of which, again, are unavoidable.

23
00:01:03.310 --> 00:01:06.600
So we see the biggest one is parsing HTML.

24
00:01:06.600 --> 00:01:08.820
So there's nothing you can do about that,
right?

25
00:01:08.820 --> 00:01:11.105
I mean, you could have less HTML maybe.

26
00:01:11.105 --> 00:01:15.366
But most likely,
[LAUGH] there's a certain requirement.

27
00:01:15.366 --> 00:01:17.270
You need to have that text and
those buttons and things like that, so

28
00:01:17.270 --> 00:01:17.950
don't worry about it.

29
00:01:19.160 --> 00:01:23.175
These Evaluate Scripts are just
the same as Parse HTML.

30
00:01:23.175 --> 00:01:26.450
It's like parsing a JavaScript,
it's unavoidable.

31
00:01:26.450 --> 00:01:29.089
If you include jQuery,
it has to parse jQuery, right?

32
00:01:29.089 --> 00:01:30.350
That's how that works.

33
00:01:30.350 --> 00:01:32.231
What you'd wanna watch out for

34
00:01:32.231 --> 00:01:36.148
is, you'll start seeing your own
function names being really fat.

35
00:01:36.148 --> 00:01:43.484
Or you see update user status is taking
500 milliseconds or something like that.

36
00:01:43.484 --> 00:01:44.937
You're like, man, I wrote that function.

37
00:01:44.937 --> 00:01:46.369
Why is it taking that long?

38
00:01:46.369 --> 00:01:50.251
So again, the mile-high view is just

39
00:01:50.251 --> 00:01:55.204
looking at your widest ones and
seeing what's taking so long.

40
00:01:55.204 --> 00:01:59.129
And then what's cool with the call stack,
just kind of how you would view it is,

41
00:01:59.129 --> 00:02:01.583
Evaluate Script is taking
a really long time.

42
00:02:01.583 --> 00:02:04.362
But it's not the whole script,
there's something specific.

43
00:02:04.362 --> 00:02:06.081
And so you can go down the call stack.

44
00:02:06.081 --> 00:02:10.253
And the way I like to think about it is,
from the fat ones,

45
00:02:10.253 --> 00:02:13.680
you wanna see where they'd very
suddenly stopped being fat, right?

46
00:02:13.680 --> 00:02:16.659
So this one's huge,
this one's huge, this one's huge.

47
00:02:17.760 --> 00:02:20.797
This one's less huge, but
I think it's worth checking out.

48
00:02:20.797 --> 00:02:24.917
Cuz after this one, it's just like
these tiny, little blocks, right?

49
00:02:24.917 --> 00:02:29.277
So if you've ever done anything
with a profiler that's like,

50
00:02:29.277 --> 00:02:34.557
how long the function took and how long
everything under the function took.

51
00:02:34.557 --> 00:02:37.153
Like cell first contained or
something like that, right?

52
00:02:37.153 --> 00:02:39.935
It's not that the whole script
took a long time to evaluate.

53
00:02:39.935 --> 00:02:44.650
It's specifically that this
anonymous function took a long time.

54
00:02:44.650 --> 00:02:46.088
And then it's not just that, it's that.

55
00:02:46.088 --> 00:02:47.816
It's not just that, it's that.

56
00:02:47.816 --> 00:02:50.311
So what you're looking for
is where the dropoff is.

57
00:02:50.311 --> 00:02:54.090
Like here,
runInContext took 21 milliseconds.

58
00:02:54.090 --> 00:02:58.231
But then everything after it took 4,
1 ,1 ,0 ,0 ,0.

59
00:02:58.231 --> 00:02:59.987
So we don't really care
about those little ones.

60
00:02:59.987 --> 00:03:02.740
We wanna see the last really wide one.

61
00:03:02.740 --> 00:03:04.230
That's how we're gonna kinda profile that.

62
00:03:04.230 --> 00:03:06.651
Does that make sense, everybody?

63
00:03:06.651 --> 00:03:09.170
Okay, it's a little bit confusing,
but that's just kind of a rule.

64
00:03:09.170 --> 00:03:10.640
That's just how I look at it.

65
00:03:10.640 --> 00:03:13.569
I'm like, okay, I wanna drill down
until there's the last wide one and

66
00:03:13.569 --> 00:03:14.830
then investigate it.

67
00:03:14.830 --> 00:03:18.114
So if we wanted to see, we parse the HTML.

68
00:03:18.114 --> 00:03:21.970
And then we're evaluating lodash,
which is cool.

69
00:03:21.970 --> 00:03:25.241
This is a compiling script,
we can't really do anything about that.

70
00:03:25.241 --> 00:03:29.230
And then the code that we could look at
starts with this anonymous function and

71
00:03:29.230 --> 00:03:32.840
goes down eventually to this runInContext.

72
00:03:32.840 --> 00:03:34.908
When you click on something here,

73
00:03:34.908 --> 00:03:39.700
you'll start seeing information about
it here, like what kind it is, right?

74
00:03:39.700 --> 00:03:43.375
So if you click on a purple one.

75
00:03:43.375 --> 00:03:46.174
Come on, Parse HTML.

76
00:03:46.174 --> 00:03:49.300
I guess that is it, okay.

77
00:03:49.300 --> 00:03:51.010
Compile Script, Evaluate Script,
all that kinda stuff.

78
00:03:51.010 --> 00:03:55.020
So we'll see that this
runInContext is a JS Frame.

79
00:03:55.020 --> 00:03:55.780
It took a long time.

80
00:03:55.780 --> 00:03:59.720
And then we can kinda click into it,
if we wanted to go back into the Sources

81
00:03:59.720 --> 00:04:03.820
tab now, it's gonna take a second,
and actually see the function.

82
00:04:03.820 --> 00:04:07.220
So this is the relationship
you can start getting.

83
00:04:07.220 --> 00:04:11.870
Keep in mind, in the last little section,
we talked about page audits, right?

84
00:04:11.870 --> 00:04:13.770
And we talked about minifying and

85
00:04:13.770 --> 00:04:16.300
concatenating CSS in your images and
all that.

86
00:04:16.300 --> 00:04:19.910
Those are really big macro-optimizations,

87
00:04:19.910 --> 00:04:22.405
really great things that all
websites should be doing.

88
00:04:22.405 --> 00:04:26.403
When it comes to profiling your
JavaScript, that's a micro-optimization.

89
00:04:26.403 --> 00:04:30.203
And so what you really wanna do is,
from back on the timeline,

90
00:04:30.203 --> 00:04:32.565
you wanna look at the whole picture.

91
00:04:32.565 --> 00:04:37.308
Because, let's see,
this anonymous function runInContext is

92
00:04:37.308 --> 00:04:40.667
the biggest named function we can find.

93
00:04:40.667 --> 00:04:46.087
But it took 21 milliseconds, which is not
a human eye perceivable amount of time.

94
00:04:46.087 --> 00:04:47.262
So I probably don't need to,

95
00:04:47.262 --> 00:04:50.132
I don't need to optimize JavaScript
performance on this site, right?

96
00:04:50.132 --> 00:04:51.967
Because everything's
actually pretty small.

97
00:04:51.967 --> 00:04:53.772
I'm showing you how to do it for
the sake of the class.

98
00:04:53.772 --> 00:05:00.239
But you don't necessarily wanna like,
wow, that one function's really wide.

99
00:05:00.239 --> 00:05:02.025
I need to fix it, or something like that.

100
00:05:02.025 --> 00:05:02.840
That's not necessarily a healthy attitude,

101
00:05:02.840 --> 00:05:05.170
because sometimes they're
just really fast.

102
00:05:05.170 --> 00:05:08.330
It just happens to be the slowest
of your really fast site.

103
00:05:08.330 --> 00:05:12.290
So I just wanted to point out to always
keep in mind that, once you get to this

104
00:05:12.290 --> 00:05:15.470
screen, this is really micro-optimizations
and they're really relative.

105
00:05:15.470 --> 00:05:17.130
So look at how long they take.

106
00:05:17.130 --> 00:05:20.885
If it's taking half a second to
run a function, that's a problem.

107
00:05:20.885 --> 00:05:22.180
You wanna look into it.

108
00:05:22.180 --> 00:05:25.368
If it's taking, like in this case,
21 milliseconds, that's really fast.

109
00:05:25.368 --> 00:05:27.660
I really don't need to look at that.

110
00:05:28.920 --> 00:05:30.880
So yeah, just wanted to point that out.

111
00:05:32.060 --> 00:05:37.170
Cool, so yeah, that was starting
to get used to the timeline tab.

112
00:05:37.170 --> 00:05:43.560
A cool feature they just added,
very similar to the device emulator.

113
00:05:43.560 --> 00:05:46.540
Where you can see what it would
look like on a mobile device.

114
00:05:46.540 --> 00:05:49.160
You can now do CPU throttling.

115
00:05:49.160 --> 00:05:52.031
So you can actually do,
with the Network tab,

116
00:05:52.031 --> 00:05:55.300
you can throttle your
network conditions to 3G.

117
00:05:55.300 --> 00:05:57.646
Then you come over to the Timeline tab and

118
00:05:57.646 --> 00:06:00.897
throttle your CPU to what it's
like on a low-end device.

119
00:06:00.897 --> 00:06:03.040
And you can start seeing
how long things take.

120
00:06:04.280 --> 00:06:05.790
So again, maybe that would be a better.

121
00:06:05.790 --> 00:06:07.522
Maybe if you were worried
about JavaScript performance,

122
00:06:07.522 --> 00:06:08.980
you could throttle it
down to a low-end device.

123
00:06:08.980 --> 00:06:11.103
And see how long these
things are really taking.

124
00:06:11.103 --> 00:06:13.820
Are they taking three seconds for
something to run?

125
00:06:13.820 --> 00:06:14.320
That's a problem.

126
00:06:14.320 --> 00:06:17.878
Are they still kinda fast,
like in the one second range?

127
00:06:17.878 --> 00:06:18.571
It's probably okay.

