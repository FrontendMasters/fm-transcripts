WEBVTT

1
00:00:00.000 --> 00:00:03.795
[MUSIC]

2
00:00:03.795 --> 00:00:05.510
&gt;&gt; Jon Kuperman: One thing
I wanted to mention, and

3
00:00:05.510 --> 00:00:09.179
we all get into this with the example
is as you're looking at call stacks,

4
00:00:09.179 --> 00:00:12.613
it's gonna be very, very common,
especially in production apps to

5
00:00:12.613 --> 00:00:16.848
see a bunch of libraries that you're using
that aren't your code in the call stack.

6
00:00:16.848 --> 00:00:20.440
So jQuery, Lodash, React,
something like that.

7
00:00:20.440 --> 00:00:24.759
And chances are that the bug that you're
trying to find are not in those libraries,

8
00:00:24.759 --> 00:00:27.178
chances are it's in
your application logic.

9
00:00:27.178 --> 00:00:31.403
So one thing that you can do and you'll
see this in your example as you can what's

10
00:00:31.403 --> 00:00:35.632
called black boxing scripts and a blackbox
of script is essentially to say, for

11
00:00:35.632 --> 00:00:39.186
all things DevTools like,
this is likely not where my problem is.

12
00:00:39.186 --> 00:00:42.675
I really don't want you to clutter
my screen with this stuff.

13
00:00:42.675 --> 00:00:46.483
So, you can right-click on any script and
you can blackbox it.

14
00:00:46.483 --> 00:00:48.923
I'm not gonna do that with debugging.js,
cuz that's my application.

15
00:00:48.923 --> 00:00:52.739
But if you have reactor, underscore or
any of those things showing up,

16
00:00:52.739 --> 00:00:56.313
you can go ahead and blackbox them and
it'll do a couple of things.

17
00:00:56.313 --> 00:00:58.061
One, it'll gray them out on here.

18
00:00:58.061 --> 00:01:01.418
So you don't have to stare at them when
you're looking at your stack trace,

19
00:01:01.418 --> 00:01:03.368
you can only see what
your application did.

20
00:01:03.368 --> 00:01:06.971
And two,
when you're stepping into functions,

21
00:01:06.971 --> 00:01:12.044
it won't bother stepping into
bootstrap that jazz things like that.

22
00:01:12.044 --> 00:01:15.835
So that's really great as you'll notice
when you start messing with production

23
00:01:15.835 --> 00:01:19.919
apps or it's like you, there's like jQuery
is an incredibly complex library right.

24
00:01:19.919 --> 00:01:23.559
And so like you don't wanna be like in
some anonymous function that's like

25
00:01:23.559 --> 00:01:26.124
the trigger method or
that I mean, like some scope.

26
00:01:26.124 --> 00:01:27.391
You don't really want to mess with that.

27
00:01:27.391 --> 00:01:30.789
So just black box jQuery and
again, on your way.

28
00:01:30.789 --> 00:01:35.086
The blackboxes persist
based on your domain.

29
00:01:35.086 --> 00:01:39.697
So, jQuery stay blackbox on local host or
something like that.

30
00:01:39.697 --> 00:01:43.459
How would you go about effectively
inserting breakpoints and

31
00:01:43.459 --> 00:01:48.374
debugging those breakpoints when your
page or app, or what have you that you're

32
00:01:48.374 --> 00:01:53.291
working with crashes almost immediately
after loading in the file that you would

33
00:01:53.291 --> 00:01:57.004
be wanting to insert the breakpoint
into in the first place?

34
00:01:57.004 --> 00:02:01.758
&gt;&gt; Jon Kuperman: So I mean, like a little
bit depends on why it is crashing.

35
00:02:01.758 --> 00:02:06.019
If you set a breakpoint in the first
line in the first code function like I

36
00:02:06.019 --> 00:02:09.652
have done here, it will break
before that line is executed.

37
00:02:09.652 --> 00:02:14.509
So at this point where I'm breaking
the only thing that it is been past

38
00:02:14.509 --> 00:02:19.225
is executing full, nothing else,
no memories has been used yet.

39
00:02:19.225 --> 00:02:21.650
So, I would hope that
that would be helpful.

40
00:02:23.770 --> 00:02:27.891
I mean, like if even that's crashing
it's probably not that JavaScript that's

41
00:02:27.891 --> 00:02:28.913
causing the crash.

42
00:02:28.913 --> 00:02:32.657
So yeah, if you put it at the first line
of the first executed function which can

43
00:02:32.657 --> 00:02:36.287
be a little bit tricky, you might have
to read the code to see where where that

44
00:02:36.287 --> 00:02:40.076
is like a library like jQuery has it whole
boot strapping process that it does.

45
00:02:40.076 --> 00:02:43.772
So you might have to like read, what get
coded first what is like the first thing

46
00:02:43.772 --> 00:02:46.908
that happen and put the breakpoint
there and then I guess tread very

47
00:02:46.908 --> 00:02:49.632
carefully from there like you know
&gt;&gt; Speaker 2: So, you can only insert

48
00:02:49.632 --> 00:02:53.877
those breakpoint within your browser
though not in your Yeah, sorry.

49
00:02:53.877 --> 00:02:54.882
&gt;&gt; Jon Kuperman: Yeah, thank you so much.

50
00:02:54.882 --> 00:02:58.243
[CROSSTALK] Well, if you're working
like a no, no, you can, you can.

51
00:02:58.243 --> 00:02:59.851
Sorry, I totally skipped on this.

52
00:02:59.851 --> 00:03:03.713
So, I'm gonna play this through,
I'm gonna remove this breakpoint here.

53
00:03:03.713 --> 00:03:09.246
Yeah, so this is like a API for
the browsers.

54
00:03:09.246 --> 00:03:11.530
I can go into debugging2.js.

55
00:03:11.530 --> 00:03:15.905
This is just my text editor and
I can throw a debugger line here.

56
00:03:15.905 --> 00:03:17.347
So, that's debugger with a semicolon.

57
00:03:17.347 --> 00:03:18.566
I'm really sorry I skipped over that.

58
00:03:18.566 --> 00:03:20.438
That's a really great tool.

59
00:03:20.438 --> 00:03:24.237
So I have debugger here and now I'll
go back, and I'll refresh it with no

60
00:03:24.237 --> 00:03:28.183
breakpoints and it still knows to break
on debugging of line once I say yes.

61
00:03:28.183 --> 00:03:30.612
So if you are not able
to add the breakpoint,

62
00:03:30.612 --> 00:03:34.946
cuz you're not able to load the app in
the first place use the debugger there and

63
00:03:34.946 --> 00:03:39.498
also add a lint rule to make sure your
debuggers don't get shipped to production.

64
00:03:39.498 --> 00:03:42.485
I would recommend doing,
cuz that's no fun for anybody.

65
00:03:42.485 --> 00:03:44.053
It's even worse than a console log,

66
00:03:44.053 --> 00:03:46.239
cuz it's actually takes
control of their screen.

67
00:03:46.239 --> 00:03:47.970
So yeah, the debugger API is really great.

