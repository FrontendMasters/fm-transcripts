WEBVTT

1
00:00:00.000 --> 00:00:03.971
[MUSIC]

2
00:00:03.971 --> 00:00:05.246
&gt;&gt; Jon Kuperman: I think just from,

3
00:00:05.246 --> 00:00:10.410
however many people slamming the API
thatwe ran out of reads from GitHub.

4
00:00:10.410 --> 00:00:14.550
So I'll probably pick a different
example for next time I do the workshop.

5
00:00:14.550 --> 00:00:18.580
Sorry about that,
if anybody was getting, like, whatever,

6
00:00:18.580 --> 00:00:19.900
400s that we exceeded that.

7
00:00:20.970 --> 00:00:24.180
So, but basically you could
take different approaches.

8
00:00:25.410 --> 00:00:30.189
One approach that I had kind of covered
before, before if you didn't know

9
00:00:30.189 --> 00:00:35.122
what JavaScript was coming down, is that
you could go in the Elements tab and

10
00:00:35.122 --> 00:00:39.539
you could find this list here basically,
this repositories list.

11
00:00:39.539 --> 00:00:43.102
And then you could say give me
a breakpoint whenever you do a subtree

12
00:00:43.102 --> 00:00:43.970
modification.

13
00:00:43.970 --> 00:00:48.156
So then you can go back up here and type
and it'll go ahead and stop for you and

14
00:00:48.156 --> 00:00:51.830
it'll say here I am this script
is black-boxed in the debugger.

15
00:00:53.330 --> 00:00:55.350
So I think, just to back up,

16
00:00:55.350 --> 00:00:57.450
because this was like the main
problem people were having,

17
00:00:57.450 --> 00:01:03.010
I think that The black-boxing seems to
only work when you're in stepping mode.

18
00:01:03.010 --> 00:01:07.560
If you have these like dom breakpoints
set, it seems to ignore the black-boxing.

19
00:01:07.560 --> 00:01:13.430
It's a little ironic that it's like,
this won't show up, and then it shows up.

20
00:01:13.430 --> 00:01:19.130
So if we just keep kind of stepping
through, that might take a while.

21
00:01:19.130 --> 00:01:22.970
But we get to this like empty current
list, is basically where we get to.

22
00:01:22.970 --> 00:01:25.870
And all I did was I just kept stepping
over jQuery functions til I was out of

23
00:01:25.870 --> 00:01:26.920
jQuery.

24
00:01:26.920 --> 00:01:29.810
So this is like one way that you
could see what's being called.

25
00:01:32.840 --> 00:01:36.845
Another way that you could have done it
is just looking at like maybe the network

26
00:01:36.845 --> 00:01:40.743
tab, and seeing what JavaScript is
coming down, and opening one of those.

27
00:01:40.743 --> 00:01:43.025
Or you could command P
from the sources tab and

28
00:01:43.025 --> 00:01:47.060
just see what .JS files you had
available and add some break points.

29
00:01:47.060 --> 00:01:50.760
So just to kinda like show, I'm gonna go
ahead down to these break points here,

30
00:01:50.760 --> 00:01:54.130
and I'm gonna remove the one that
I have and just play it through.

31
00:01:54.130 --> 00:01:59.160
So like another thing you could have just
done is Command+P see what JS there is.

32
00:01:59.160 --> 00:02:01.986
We don't want these library files,
you could find this one and

33
00:02:01.986 --> 00:02:05.200
just start adding some breakpoints
to see if this is getting executed.

34
00:02:05.200 --> 00:02:10.071
Either way any approach you take
you end up on debugging.js.

35
00:02:10.071 --> 00:02:12.630
And you've just got like
something's going on here.

36
00:02:12.630 --> 00:02:15.541
One thing that is kind of
hard to get your head around

37
00:02:15.541 --> 00:02:20.226
is you can only put these breakpoints on
executable lines, so not declarations.

38
00:02:20.226 --> 00:02:23.083
This is something I always struggle with,
so

39
00:02:23.083 --> 00:02:27.730
you can't put a breakpoint on this
line here, like this success.

40
00:02:27.730 --> 00:02:30.240
Which seems like really
counter intuitive because

41
00:02:30.240 --> 00:02:31.440
that's where you want to put the line.

42
00:02:31.440 --> 00:02:35.100
So you have to do it on something
executable like line ten where you're

43
00:02:35.100 --> 00:02:37.510
actually executing something.

44
00:02:37.510 --> 00:02:41.653
So one thing you could have done, there's
a couple of parts when I saw people doing

45
00:02:41.653 --> 00:02:45.573
was you put a breakpoint on the error
callback, and on the success callback.

46
00:02:45.573 --> 00:02:49.574
We can remove this one and
then you can kind of play it through.

47
00:02:49.574 --> 00:02:53.280
Oops, still got one here.

48
00:02:53.280 --> 00:02:55.090
And so then we see we get into error.

49
00:02:55.090 --> 00:02:57.880
And then you can start tons
different approaches here.

50
00:02:57.880 --> 00:03:00.830
One that I might recommend is to be like,
okay so

51
00:03:00.830 --> 00:03:04.790
when you're in error, the only thing
you have locally scoped here is data.

52
00:03:04.790 --> 00:03:06.890
So you can kinda take
a peek at what's data.

53
00:03:06.890 --> 00:03:09.510
So I'll edit this watch thing,
add data as an object.

54
00:03:10.710 --> 00:03:13.270
And then you can kinda look
through all this stuff, right.

55
00:03:13.270 --> 00:03:16.050
And you see, what's this response text.

56
00:03:16.050 --> 00:03:19.170
So you could either slide this
over to make it bigger, or

57
00:03:19.170 --> 00:03:25.070
you can change data to data.Responsetext.

58
00:03:25.070 --> 00:03:28.600
And we get this not found,
because we all hit the API too many times.

59
00:03:28.600 --> 00:03:33.576
But either way what was going
on before the API had stopped

60
00:03:33.576 --> 00:03:38.965
working was that we were at,
I think we're just at a bad URL for

61
00:03:38.965 --> 00:03:42.713
it, and then you can kind of step through.

62
00:03:42.713 --> 00:03:44.488
Sorry that they example broke.

63
00:03:44.488 --> 00:03:49.355
You can kind of step through maybe
black box, low dash as well.

64
00:03:49.355 --> 00:03:54.876
And then the other thing that was going
on, which I can't demonstrate right now,

65
00:03:54.876 --> 00:03:57.997
is that when we were
getting into insert HTML,

66
00:03:57.997 --> 00:04:02.290
we were inserting repo.title
which does not exist.

67
00:04:02.290 --> 00:04:03.740
So if you were to break here and

68
00:04:03.740 --> 00:04:08.130
examine repo I think it's called
repo.name or something like that.

69
00:04:08.130 --> 00:04:12.006
So yeah, again sorry that GitHub
stopped taking our requests,

70
00:04:12.006 --> 00:04:15.037
this is a bigger class
than I'm used to teaching.

71
00:04:15.037 --> 00:04:17.885
But hopefully, at least through
the examples that we did together,

72
00:04:17.885 --> 00:04:20.010
we were able to start getting comfortable,
yeah?

73
00:04:21.180 --> 00:04:25.150
&gt;&gt; Speaker 2: Can you talk about
pausing on subtree modifications and

74
00:04:25.150 --> 00:04:26.625
what's that actually doing?

75
00:04:26.625 --> 00:04:28.290
&gt;&gt; Jon Kuperman: Yeah, definitely.
&gt;&gt; Speaker 2: I think I kind of know but

76
00:04:28.290 --> 00:04:31.250
I'm a little confused as to how
that links to the actual JavaScript

77
00:04:31.250 --> 00:04:32.220
file that's written.

78
00:04:32.220 --> 00:04:33.000
&gt;&gt; Jon Kuperman: Yeah absolutely.

79
00:04:33.000 --> 00:04:36.900
So it's basically, one of the cool things
about this being, Chrome being your

80
00:04:36.900 --> 00:04:40.850
debugger, is it's it is also the browser
that is in charge of rendering stuff.

81
00:04:40.850 --> 00:04:45.940
And so basically what you're able to do
is when you say subtree modification or

82
00:04:45.940 --> 00:04:49.010
attribute change or whatever,
you're telling Chrome

83
00:04:49.010 --> 00:04:52.940
when you go to repaint this area,
will you tell me why you're doing that?

84
00:04:54.034 --> 00:04:58.270
And so basically what you would notice
from the way that we had it before, so

85
00:04:58.270 --> 00:05:01.060
let me remove these breakpoints and
put this one back.

86
00:05:01.060 --> 00:05:04.090
So this is the subtree
modification that I had.

87
00:05:04.090 --> 00:05:11.590
And you go to type something as it,
where am I at come on I lost that one.

88
00:05:11.590 --> 00:05:14.677
Let me go ahead, and it is selected here.

89
00:05:14.677 --> 00:05:17.853
Okay so it's like why did you
go to repaint that list and

90
00:05:17.853 --> 00:05:22.580
it's like I went because this append child
is getting called with this element.

91
00:05:22.580 --> 00:05:26.100
Very specifically this
is the line of jQuery

92
00:05:26.100 --> 00:05:29.100
that is in charge of re-rendering
that area of the screen.

93
00:05:29.100 --> 00:05:30.720
&gt;&gt; Speaker 2: So
that's why it stopped there.

94
00:05:30.720 --> 00:05:34.250
&gt;&gt; Jon Kuperman: Yeah, so it's the actual
line, the last line of JavaScript that

95
00:05:34.250 --> 00:05:37.360
executes before it actually makes
a visual change to the screen.

96
00:05:37.360 --> 00:05:39.712
So this is where the black-boxing
comes in, though,

97
00:05:39.712 --> 00:05:42.882
is because if you're using any DOM
libraries or you're using reactors,

98
00:05:42.882 --> 00:05:46.636
using jQuery or anything like that, you're
not gonna get your change first, right?

99
00:05:46.636 --> 00:05:51.624
Cuz it's like, you call li append, and
then it goes into jQuery's append or

100
00:05:51.624 --> 00:05:52.410
whatever.

101
00:05:52.410 --> 00:05:54.960
So just something that maybe
you can keep in mind is that

102
00:05:54.960 --> 00:05:57.920
it's usually not your application
code that causes the,

103
00:05:57.920 --> 00:06:00.780
unless you're just doing
a pure Vanilla JavaScript app.

104
00:06:00.780 --> 00:06:02.850
But that's why it stops there.

105
00:06:02.850 --> 00:06:03.870
Did you have one, too?

106
00:06:03.870 --> 00:06:07.310
&gt;&gt; Speaker 3: Are there
any specific rules for

107
00:06:08.390 --> 00:06:12.600
the tool tip method of looking
at the contents of an object.

108
00:06:12.600 --> 00:06:16.560
Like when you're hovering over, for
example when we were in debugger.

109
00:06:16.560 --> 00:06:23.750
We could hover over in the repository or
debugging.JS.

110
00:06:23.750 --> 00:06:24.891
&gt;&gt; Jon Kuperman: Yep.

111
00:06:24.891 --> 00:06:29.160
&gt;&gt; Speaker 3: We could hover
over a given function and

112
00:06:29.160 --> 00:06:32.640
look at the object that was
being passed in as the argument.

113
00:06:32.640 --> 00:06:38.290
But at least in my personal experience,
sort of trying to fuzzily work

114
00:06:38.290 --> 00:06:41.580
with these particular tool-tips sometimes
they work and sometimes they don't.

115
00:06:41.580 --> 00:06:42.350
&gt;&gt; Jon Kuperman: Yeah.

116
00:06:42.350 --> 00:06:46.520
So they're not, I mean yeah.

117
00:06:46.520 --> 00:06:50.400
Ultimately you just want to add stuff
like data to your watch column.

118
00:06:51.430 --> 00:06:55.593
However in smaller examples,
it can be really nice.

119
00:06:55.593 --> 00:06:58.742
If all data contained
was an array of numbers,

120
00:06:58.742 --> 00:07:04.560
it can be really nice to just like pause
there and just, a time saver a little bit.

121
00:07:04.560 --> 00:07:06.670
But when you work with
anything substantial,

122
00:07:06.670 --> 00:07:09.570
the data response object from
a jQuery AJAX call is enormous.

123
00:07:09.570 --> 00:07:10.910
Yeah, it's not good.

124
00:07:10.910 --> 00:07:13.390
It's not going to be super useful.

125
00:07:15.140 --> 00:07:18.472
Once in a while the tooltip is enough,
and that's I need and

126
00:07:18.472 --> 00:07:20.213
it kind of help save some time.

127
00:07:20.213 --> 00:07:24.610
But, yeah,
I think it's just a little helper maybe.

128
00:07:24.610 --> 00:07:29.310
&gt;&gt; Speaker 4: One question from on
line from Richie is, is the watch but

129
00:07:29.310 --> 00:07:33.520
can you alter values within the watch
panel or is it just for watching?

130
00:07:33.520 --> 00:07:36.900
&gt;&gt; Jon Kuperman: Yes, so
watching you can't change the values but

131
00:07:36.900 --> 00:07:37.890
you can take them.

132
00:07:37.890 --> 00:07:41.310
So like data response text is here and
we're paused.

133
00:07:41.310 --> 00:07:46.530
And so you can take them into the console
and type data.responsetext and

134
00:07:46.530 --> 00:07:50.210
here we go, and
now you could do something like that.

135
00:07:50.210 --> 00:07:53.708
So you can drag them into the console and
change them that way.

136
00:07:55.997 --> 00:07:59.898
&gt;&gt; Jon Kuperman: Cool, yeah, so
step through debugging's really powerful.

137
00:07:59.898 --> 00:08:03.320
My biggest advice is just play with it.

138
00:08:03.320 --> 00:08:06.236
It's such an intimidating UI,
but it's really harmless, and

139
00:08:06.236 --> 00:08:08.725
it's really helpful for
better understanding apps.

140
00:08:08.725 --> 00:08:11.674
And whenever I start a new job,
I use the dev tools and

141
00:08:11.674 --> 00:08:16.660
particularly step through debugging a lot
just like understand, how' is it working.

142
00:08:16.660 --> 00:08:18.870
One other cool thing which
can be kind of a nightmare.

143
00:08:19.990 --> 00:08:21.440
I hadn't talked about these so

144
00:08:21.440 --> 00:08:25.060
you got these two handy things,
deactivate all break points.

145
00:08:25.060 --> 00:08:28.646
And this is great when you kind of get
into a nest of like you've got 13 things

146
00:08:28.646 --> 00:08:31.450
and you're like,
I just want it to resume execution.

147
00:08:31.450 --> 00:08:33.600
You can just temporarily
turn them all off.

148
00:08:33.600 --> 00:08:36.230
You can also pause on any
single JavaScript exception.

149
00:08:38.194 --> 00:08:43.240
So basically, it depends totally on
your app, but this is again, any

150
00:08:43.240 --> 00:08:47.730
time any JavaScript errors anything throws
at any point in any library or whatever.

151
00:08:47.730 --> 00:08:53.080
So you can just have no breakpoint set
pause on all JavaScript exceptions.

152
00:08:53.080 --> 00:08:55.780
And run your production app and
see, is there stuff that's,

153
00:08:55.780 --> 00:08:58.040
because a lot of times
stuff gets swallowed.

154
00:08:58.040 --> 00:09:00.920
Just cuz you throw an error doesn't
mean you catch it and handle it.

155
00:09:00.920 --> 00:09:02.342
And that's true with all libraries.

156
00:09:02.342 --> 00:09:06.028
So it can be kind of cool to turn on
pause on all exceptions and click

157
00:09:06.028 --> 00:09:10.467
around on your production app and see
All the errors that are being generated.

158
00:09:10.467 --> 00:09:12.360
If there are,
not saying that you guys write errors.

159
00:09:12.360 --> 00:09:13.492
But it can be kind of cool,

160
00:09:13.492 --> 00:09:16.380
with bigger apps you're going to
get a lot of exceptions, right?

161
00:09:16.380 --> 00:09:18.690
Because a lot of libraries throw and
catch exceptions,

162
00:09:18.690 --> 00:09:20.564
even when everything's working just fine.

163
00:09:20.564 --> 00:09:24.550
But, again, it can be a cool way
to learn how your app works.

164
00:09:24.550 --> 00:09:26.330
Cool, so I'm gonna

