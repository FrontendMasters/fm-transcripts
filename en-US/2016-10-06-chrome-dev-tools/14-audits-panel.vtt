WEBVTT

1
00:00:00.000 --> 00:00:03.973
[MUSIC]

2
00:00:03.973 --> 00:00:07.717
&gt;&gt; Jon: So the next section,
we've now done editing, debugging.

3
00:00:07.717 --> 00:00:11.466
Now, on to profiling which is we're
goinna spend the rest of our time.

4
00:00:11.466 --> 00:00:14.130
Cuz it's profiling,
there's a lot of stuff going on there.

5
00:00:15.720 --> 00:00:20.761
So to start off with,
why is profiling important?

6
00:00:20.761 --> 00:00:23.919
And this deviates a little bit
from the dev tools aspect and

7
00:00:23.919 --> 00:00:26.280
more into general web performance.

8
00:00:26.280 --> 00:00:29.880
Why you should care, what you should
care about, those kinda things.

9
00:00:29.880 --> 00:00:32.092
For those who are familiar with WordPress,

10
00:00:32.092 --> 00:00:34.615
it's got a bunch of really
cool caching plugins.

11
00:00:34.615 --> 00:00:37.320
And one of them is called W3 Total Cache.

12
00:00:37.320 --> 00:00:42.226
And they did some research awhile ago and
they got these three statistics.

13
00:00:42.226 --> 00:00:46.650
These are from a few years ago but
are really mind blowing to me.

14
00:00:46.650 --> 00:00:51.390
So Google had an experiment in which
a 500 milliseconds, so a half a second

15
00:00:51.390 --> 00:00:54.530
speed decrease on their search results
was a 20% traffic loss for them.

16
00:00:56.390 --> 00:00:59.940
Similarly, Yahoo had one less
than half a second speed decrease

17
00:00:59.940 --> 00:01:02.450
was five to 9% traffic loss.

18
00:01:02.450 --> 00:01:05.650
And Amazon.com had done an experiment

19
00:01:05.650 --> 00:01:10.070
where a 100 milliseconds speed decrease
resulted in a 1% sales loss for them.

20
00:01:10.070 --> 00:01:14.170
So it's really not just,
I want the page to load faster.

21
00:01:14.170 --> 00:01:16.610
People leave, if you're selling
stuff people don't buy it.

22
00:01:17.720 --> 00:01:20.686
How to sign up form, it doesn't look,
people really do leave.

23
00:01:20.686 --> 00:01:22.512
But at this point in time, also,

24
00:01:22.512 --> 00:01:26.220
search engines have started
punishing slower sites.

25
00:01:26.220 --> 00:01:28.044
So your search result place will be less.

26
00:01:28.044 --> 00:01:31.527
So it's basically, really,
really important and

27
00:01:31.527 --> 00:01:34.000
it's not just perceived slowness.

28
00:01:34.000 --> 00:01:37.570
It's what people, what your potential
customers will and will not tolerate.

29
00:01:39.050 --> 00:01:40.200
So yeah, really important stuff.

30
00:01:41.780 --> 00:01:45.260
Like I had said, when we were going
over the kind of mile high view.

31
00:01:45.260 --> 00:01:48.947
I always like to start with just a page on
it because you're not really diving too

32
00:01:48.947 --> 00:01:50.389
deep into technical details.

33
00:01:50.389 --> 00:01:55.390
You're kinda seeing what nice easy
stuff you can fix and get away with.

34
00:01:57.000 --> 00:02:00.130
So for that,
we are going to go into dev tools.

35
00:02:00.130 --> 00:02:03.050
And we are going to go to the Audits page.

36
00:02:03.050 --> 00:02:05.760
And so we've got a couple things here.

37
00:02:05.760 --> 00:02:08.404
These ones will be really fun to
check out on big production sites.

38
00:02:08.404 --> 00:02:11.397
Cuz they've got a lot more
going on in my little app.

39
00:02:11.397 --> 00:02:15.044
But basically, there's two
different approaches it can take,

40
00:02:15.044 --> 00:02:16.740
I always like for both.

41
00:02:16.740 --> 00:02:20.470
It's network utilization and then,
once the network resources are loaded,

42
00:02:20.470 --> 00:02:21.840
actual page performance.

43
00:02:22.910 --> 00:02:26.970
And you can do two different ways, you can
either audit your already loaded site.

44
00:02:26.970 --> 00:02:29.789
So if you wanna see,
my Ajax staff seems really slow.

45
00:02:29.789 --> 00:02:34.140
You do this way or the best place
to start is to reload the page.

46
00:02:34.140 --> 00:02:38.200
So you're loading a fresh page,
no cache and auditing the whole thing.

47
00:02:38.200 --> 00:02:40.600
So I'm just gonna go ahead and run that.

48
00:02:40.600 --> 00:02:42.647
So this is gonna control the reload.

49
00:02:42.647 --> 00:02:45.936
And then, it's gonna break them up into
those two different web page performance

50
00:02:45.936 --> 00:02:47.050
and network utilization.

51
00:02:47.050 --> 00:02:50.420
And it's gonna give you a bunch of advice,
which is just really handy.

52
00:02:50.420 --> 00:02:51.800
So this one, you'll see really often.

53
00:02:51.800 --> 00:02:57.010
Remove unused CSS rules and this is coming
from the fact, I'm using a SS framework.

54
00:02:57.010 --> 00:03:01.671
So I'm using Bootstrap and
Bootstrap just comes with one size fits.

55
00:03:01.671 --> 00:03:04.629
I mean, it does have the option to
have a SAS version where you just add

56
00:03:04.629 --> 00:03:05.300
what you need.

57
00:03:05.300 --> 00:03:09.120
But, generally,
if you're using a CSS framework, right?

58
00:03:09.120 --> 00:03:12.620
I don't have any tables but
I have all the table CSS from Bootstrap.

59
00:03:12.620 --> 00:03:15.681
I don't have any,
a lot of different elements like that.

60
00:03:15.681 --> 00:03:19.785
You can save a ton of speed over the wire
if you delete staff that you're not using.

61
00:03:19.785 --> 00:03:24.393
But do keep in mind that this has no, if
you're working on an app, not a web site.

62
00:03:24.393 --> 00:03:27.890
This doesn't have any way of knowing
of what markup could be there, right?

63
00:03:27.890 --> 00:03:31.380
So you might have unused CSS rules.

64
00:03:31.380 --> 00:03:35.290
But there really CSS rules that are gonna
be on your dialog box when it pops up or

65
00:03:35.290 --> 00:03:36.250
something like that.

66
00:03:36.250 --> 00:03:38.050
I mean, this is not something
that you can really automate.

67
00:03:38.050 --> 00:03:42.632
You have to know it a little bit
better but it is good to look at.

68
00:03:42.632 --> 00:03:44.569
There's a ton of CSS that I'm not using.

69
00:03:46.500 --> 00:03:48.440
Combining external JavaScript.

70
00:03:48.440 --> 00:03:51.170
We're gonna talk about this more later

71
00:03:51.170 --> 00:03:54.306
with HTTP/1 which is what almost
everything is on right now.

72
00:03:54.306 --> 00:03:58.396
Requests are expensive,
multiple requests are expensive.

73
00:03:58.396 --> 00:04:02.620
And browsers can only handle so
many requests in parallel.

74
00:04:02.620 --> 00:04:05.600
So if you have 20
different JavaScript files.

75
00:04:05.600 --> 00:04:07.315
I think, Chrome does five at a time.

76
00:04:07.315 --> 00:04:10.711
So start the five and then as they
come in, it's adding more and more.

77
00:04:10.711 --> 00:04:13.150
And that's why you see these bundlers.

78
00:04:13.150 --> 00:04:16.550
You get all your JavaScript minified,
concatenated,

79
00:04:16.550 --> 00:04:19.740
all that kind of stuff this
is why we're doing that.

80
00:04:19.740 --> 00:04:23.380
Gzip compression is really important and
really easy.

81
00:04:23.380 --> 00:04:24.280
It's basically,

82
00:04:24.280 --> 00:04:29.580
it's a compression format that
the browsers all know how to decompress.

83
00:04:29.580 --> 00:04:32.381
So you compress all your files and
you send him over the wire.

84
00:04:32.381 --> 00:04:36.461
And all major browsers know how to
turn that back into your HTML, CSS and

85
00:04:36.461 --> 00:04:37.280
JavaScript.

86
00:04:37.280 --> 00:04:42.850
So their only thing about
implementation details is,

87
00:04:42.850 --> 00:04:46.200
a lot of these like Gzip compression
depends on your web server.

88
00:04:46.200 --> 00:04:49.107
So it's different for Apache than it
is for engine X or something like that.

89
00:04:49.107 --> 00:04:52.483
But there's tons documentations so
if you go to your site, and

90
00:04:52.483 --> 00:04:55.489
you're seeing that you don't
have Gzip compression.

91
00:04:55.489 --> 00:04:59.529
Whatever you're doing, node, engine X,
how to Gzip, something like that.

92
00:04:59.529 --> 00:05:02.314
Using Apache same thing
like Apache how to Gzip.

93
00:05:02.314 --> 00:05:05.720
If you're using a CMS,
there's probably plug-ins for it.

94
00:05:05.720 --> 00:05:08.360
So this is really important and
it kinda shows you in a nice way,

95
00:05:08.360 --> 00:05:09.420
how much could be saved.

96
00:05:09.420 --> 00:05:14.645
So I mean, really, look at this one,
bootstrap.css 78 kilobytes.

97
00:05:14.645 --> 00:05:19.890
If I just enabled Gzip compression, these
are really big, same with browser caching.

98
00:05:19.890 --> 00:05:24.709
So when you serve files down,
you're able to specify with that file.

99
00:05:24.709 --> 00:05:29.265
How long the browser, you'd like
it to keep that file cached for.

100
00:05:29.265 --> 00:05:32.437
And that can be a huge difference
because things like jQuery or

101
00:05:32.437 --> 00:05:36.280
your libraries or whatever,
you're not gonna change that often.

102
00:05:36.280 --> 00:05:38.830
So specifying browser cache can be really,
really helpful.

103
00:05:40.050 --> 00:05:44.130
So for those that are familiar, Google
has this site called PageSpeed Insights.

104
00:05:45.960 --> 00:05:50.580
Which has this exact kind of workflow but
it, actually, has a lot more stuff.

105
00:05:50.580 --> 00:05:54.525
So the audit can start in Chrome dev
tools, that's totally cool to do.

106
00:05:54.525 --> 00:05:58.942
But I would recommend checking out,
let me get the link here.

107
00:05:58.942 --> 00:06:04.331
And I'll publish this, it's
developers.google.com/speed/pagespeed/ins-

108
00:06:04.331 --> 00:06:06.620
ights and put your URL in here.

109
00:06:06.620 --> 00:06:10.420
The great thing about the DevTools 1 is
you can do it on your local sites, right?

110
00:06:10.420 --> 00:06:12.250
You can do it on something
that you're working on.

111
00:06:12.250 --> 00:06:15.200
Whereas, this needs actually
go over the Internet and

112
00:06:15.200 --> 00:06:16.390
have domain name that it hits.

113
00:06:16.390 --> 00:06:20.049
But again, you can put any site in there,
google.com or whatever.

114
00:06:20.049 --> 00:06:21.228
And it'll run this whole thing.

115
00:06:21.228 --> 00:06:24.494
And it'll give you a bunch of different
advice on stuff you should fix,

116
00:06:24.494 --> 00:06:26.570
stuff that's good, all that kind of stuff.

117
00:06:28.660 --> 00:06:31.160
It's not always possible
to fix everything.

118
00:06:31.160 --> 00:06:32.970
That's a caveat that I'd like to add here.

119
00:06:32.970 --> 00:06:35.721
Sometimes, you just have
stuff that you just need.

120
00:06:35.721 --> 00:06:39.440
There are certain libraries that
you'll use, it's a JavaScript library.

121
00:06:39.440 --> 00:06:41.765
You have to put it in the head.

122
00:06:41.765 --> 00:06:43.028
For those that are familiar,

123
00:06:43.028 --> 00:06:45.918
JavaScript is recommended goes
right before the closing body tag.

124
00:06:45.918 --> 00:06:50.287
But if you're using modernizr or
anything that's web component,

125
00:06:50.287 --> 00:06:53.130
something like that,
it has to go up there.

126
00:06:53.130 --> 00:06:55.580
So sometimes, your score is what it is.

127
00:06:55.580 --> 00:06:59.262
Sometimes, you just still gonna have,
I could fix item in here.

128
00:06:59.262 --> 00:07:02.868
But it's a really good place to get
started with finding low hanging fruit,

129
00:07:02.868 --> 00:07:04.060
seeing what you can fix.

