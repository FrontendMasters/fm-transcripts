WEBVTT

1
00:00:00.000 --> 00:00:03.834
[MUSIC]

2
00:00:03.834 --> 00:00:07.254
&gt;&gt; Speaker 2: One question from Dimitri
is can you talk about the scope

3
00:00:07.254 --> 00:00:08.610
tab?
&gt;&gt; Jon Kuperman: Yeah,

4
00:00:08.610 --> 00:00:10.440
sorry I missed that before.

5
00:00:10.440 --> 00:00:14.574
So basically the scope tab, just lost it.

6
00:00:14.574 --> 00:00:18.549
At any point is just going to show
you what you have in global and

7
00:00:18.549 --> 00:00:20.970
what you have in local scope.

8
00:00:20.970 --> 00:00:24.740
So global scope will just show you like
a list of all the global variables,

9
00:00:24.740 --> 00:00:26.680
all the global properties
that you have access to.

10
00:00:26.680 --> 00:00:28.750
A local scope can help you for

11
00:00:28.750 --> 00:00:32.960
those that have done Kyle Sampson's
class here on understanding closures.

12
00:00:32.960 --> 00:00:35.810
So it'll help you understand
what you locally have access to.

13
00:00:35.810 --> 00:00:38.480
This is going to be another great way to
kind of help you understand the language

14
00:00:38.480 --> 00:00:39.090
a little bit better.

15
00:00:39.090 --> 00:00:42.726
So if you're like you have function fu and
then inside you have bar and

16
00:00:42.726 --> 00:00:46.370
you've a break point in bar local
scope will show you all of fu still.

17
00:00:46.370 --> 00:00:49.910
So it's just kind of like understanding
what you have access to at this

18
00:00:49.910 --> 00:00:50.990
point in time.

19
00:00:50.990 --> 00:00:55.430
Hope that helps, let me know,
if that's not clear enough.

20
00:00:55.430 --> 00:00:58.740
There were a couple of things, again,
like it's just some finicky things,

21
00:00:58.740 --> 00:01:02.830
I think some people are like having
jQuery obviously black boxed and

22
00:01:02.830 --> 00:01:05.200
it was still landing in jQuery.

23
00:01:06.830 --> 00:01:07.530
I'm not really sure.

24
00:01:07.530 --> 00:01:11.790
The only thing that seemed to kinda
help was, like classic turn it off and

25
00:01:11.790 --> 00:01:15.910
on again, kind of approach of make sure
all your break points are removed.

26
00:01:15.910 --> 00:01:19.990
So we're like kind of going in here and
deselecting all these,

27
00:01:19.990 --> 00:01:23.770
closing all these files,
refreshing the app and trying again.

28
00:01:23.770 --> 00:01:25.960
So if you're if you're getting
stuck something like that

29
00:01:25.960 --> 00:01:27.060
you might wanna try that.

30
00:01:27.060 --> 00:01:30.309
We did have one that I
couldn't figure out.

31
00:01:30.309 --> 00:01:35.428
Yeah, any other questions?
&gt;&gt; Speaker 2: Yeah from Richie.

32
00:01:35.428 --> 00:01:39.130
Are there any useful console commands
that you use while debugging?

33
00:01:39.130 --> 00:01:39.630
&gt;&gt; Jon Kuperman: Yeah.

34
00:01:40.710 --> 00:01:44.560
So when doing this kind of
step through debugging I don't

35
00:01:44.560 --> 00:01:46.080
use the console additionally.

36
00:01:47.260 --> 00:01:50.860
The console API is pretty nice though,
so you have access to

37
00:01:52.920 --> 00:01:55.900
more than just console.log so
you have access.

38
00:01:55.900 --> 00:02:00.330
The next are two examples from how we're
gonna look at console.time when you can

39
00:02:00.330 --> 00:02:02.390
actually see how long
things take to execute.

40
00:02:04.320 --> 00:02:07.346
There are console warn and console error.

41
00:02:07.346 --> 00:02:11.400
I don't really use them,
but those do exist.

42
00:02:11.400 --> 00:02:14.570
So yeah, I probably just use console log,
console time and

43
00:02:14.570 --> 00:02:18.720
then the step through debugger,
those are probably

44
00:02:18.720 --> 00:02:20.353
the only things that I use.
&gt;&gt; Speaker 2: Okay, and

45
00:02:20.353 --> 00:02:23.571
then.
&gt;&gt; Speaker 2: There's a threads panel just

46
00:02:23.571 --> 00:02:24.745
above the watch panel.

47
00:02:24.745 --> 00:02:26.013
I don't see it on mine.
&gt;&gt; Jon Kuperman: Yeah,

48
00:02:26.013 --> 00:02:28.296
so that is another finicky lovely thing.

49
00:02:28.296 --> 00:02:30.246
So that's reserved for web workers if
you're doing service workers like and

50
00:02:30.246 --> 00:02:31.844
it's like maybe they're just
different versions of Canary.

51
00:02:31.844 --> 00:02:34.426
For web workers if you're
doing service workers and

52
00:02:34.426 --> 00:02:37.310
it's maybe they're just
different versions of Canary.

53
00:02:37.310 --> 00:02:40.005
It's an experimental panel
that they're messing with.

54
00:02:40.005 --> 00:02:43.546
I'm not gonna have time to cover service
workers say, but they're really cool.

55
00:02:43.546 --> 00:02:46.360
You should check them out, but
that's what that's gonna be for.

