WEBVTT

1
00:00:00.120 --> 00:00:04.400
Let's cover Angular component
testing fundamentals.

2
00:00:04.400 --> 00:00:09.230
And it is interesting to me that when
I start talking about component of

3
00:00:09.230 --> 00:00:14.300
an architecture,
I get really excited because I think it's

4
00:00:14.300 --> 00:00:18.860
just incredibly important how you
architect your application and

5
00:00:18.860 --> 00:00:26.004
just the implications that it has a very
high level isreally compelling to me.

6
00:00:26.004 --> 00:00:30.930
And I think you cannot overstate

7
00:00:30.930 --> 00:00:36.117
the importance of having good component
architecture in your application.

8
00:00:36.117 --> 00:00:42.540
Now, the funny thing is, when I start
talking about Angular testing that.

9
00:00:43.540 --> 00:00:46.445
I do not get as excited.

10
00:00:46.445 --> 00:00:50.930
I think most people when they think of
testing, they just kind of freeze up.

11
00:00:50.930 --> 00:00:55.290
And at the same time, I have kind of
almost the opposite reaction of talking

12
00:00:55.290 --> 00:00:58.160
about testing versus component
driven architecture,

13
00:00:58.160 --> 00:01:02.690
but it is equally as important.

14
00:01:02.690 --> 00:01:07.920
And when you look at an application,

15
00:01:07.920 --> 00:01:10.940
and you say, well, how does this work?

16
00:01:13.660 --> 00:01:18.010
An answer of well, it hasn't broke is not

17
00:01:19.030 --> 00:01:24.200
really acceptable because there will
be a time it too in the morning,

18
00:01:24.200 --> 00:01:28.900
or, a hacker comes in and

19
00:01:28.900 --> 00:01:32.920
something bad happens and
then it becomes a huge problem.

20
00:01:32.920 --> 00:01:36.990
And so, when you're building applications,
the question is

21
00:01:36.990 --> 00:01:42.330
really how do you know anything and
the answer is with feedback loops.

22
00:01:42.330 --> 00:01:46.180
That when you're building an application,
like a proof of concept

23
00:01:47.230 --> 00:01:51.020
that it's important to
test your application.

24
00:01:52.180 --> 00:01:55.390
But I would not say do unit testing

25
00:01:56.730 --> 00:01:58.850
at the onset because you
don't want you're building.

26
00:01:58.850 --> 00:02:00.580
You're doing user testing.

27
00:02:00.580 --> 00:02:02.800
It's very high touch, it's very analogue.

28
00:02:02.800 --> 00:02:07.110
But then once you've validated what
you're building, then you start to build

29
00:02:08.350 --> 00:02:11.580
out your unit tests and
that becomes very, very important.

30
00:02:11.580 --> 00:02:13.940
And then once everything
starts to come together,

31
00:02:13.940 --> 00:02:16.390
then you start to add
in end to end testing.

32
00:02:16.390 --> 00:02:21.501
So you start to test these units or
these features in conjunction.

33
00:02:21.501 --> 00:02:26.812
And so it's really,
really important to make testing

34
00:02:26.812 --> 00:02:33.350
a first class citizen and
a part of your development process.

35
00:02:33.350 --> 00:02:38.790
And I would be willing to
bet a lot of money that

36
00:02:38.790 --> 00:02:44.200
as you're watching this, if I asked you,
what is your test coverage

37
00:02:44.200 --> 00:02:48.100
of the application you
are working on right now?

38
00:02:48.100 --> 00:02:52.950
And I imagine that some people are saying,
well, it's 80%.

39
00:02:52.950 --> 00:02:55.720
And to that, I applaud you,
that's amazing.

40
00:02:55.720 --> 00:03:00.170
Most of the time,
I kinda get this embarrassed like that,

41
00:03:00.170 --> 00:03:01.490
we're working on it.

42
00:03:01.490 --> 00:03:08.200
And part of that is because one,
I think teams haven't doubled down.

43
00:03:08.200 --> 00:03:13.310
It really made it just a mandatory
part of their development process.

44
00:03:13.310 --> 00:03:17.500
But secondly, and this is what
I really want to touch on, is,

45
00:03:17.500 --> 00:03:21.360
when you talk about testing, you have
to talk about the code you're testing.

46
00:03:21.360 --> 00:03:28.080
And the reason why most people do not
test is because it's really hard.

47
00:03:28.080 --> 00:03:32.290
The reason why it's really
hard is because, well, one,

48
00:03:32.290 --> 00:03:37.530
life is hard, complicated,
programming is hard and complicated.

49
00:03:37.530 --> 00:03:42.490
But, because there's this diversion off
of kinda these fundamental programmatic

50
00:03:42.490 --> 00:03:47.190
principles I see a lot
of code that the reason

51
00:03:47.190 --> 00:03:52.390
why they don't have unit test is
because it's impossible to test.

52
00:03:52.390 --> 00:03:57.710
And so one of my favourite saying is
there's not enough time in the world to

53
00:03:57.710 --> 00:04:01.010
write good tests for bad code.

54
00:04:01.010 --> 00:04:06.080
And so I just really encourage you as
we go into this module, think about

55
00:04:06.080 --> 00:04:12.400
testing not just on from a testing
perspective is this isolated activity.

56
00:04:12.400 --> 00:04:17.991
But really think about it in
the context of the code that you write.

57
00:04:17.991 --> 00:04:23.264
And if you write clean, good code,
if you write fine grain code that does

58
00:04:23.264 --> 00:04:29.240
one very specific thing and it's well
defined it's a lot easier, to write test.

59
00:04:29.240 --> 00:04:33.850
And so that's just a bit of a precursor,
that when you think about testing, also,

60
00:04:33.850 --> 00:04:36.650
be diligent about the code
that you're writing.

61
00:04:36.650 --> 00:04:39.220
Because, what will happen is you'll
create technical debt in your code.

62
00:04:39.220 --> 00:04:44.650
And then it's very, very hard,
to test in most teams just to like,

63
00:04:44.650 --> 00:04:47.350
I give up, and
then you get this technical debt.

64
00:04:47.350 --> 00:04:50.040
And then how they solve that
is they feel like, well, if I

65
00:04:50.040 --> 00:04:54.330
just switch to this new fancy framework,
everything is going to be solved.

66
00:04:54.330 --> 00:04:58.060
And I've seen time and time again,
you have a team on Angular, and

67
00:04:58.060 --> 00:05:01.610
they're just like, well, if I burn it down
and do it and react, things will be fine.

68
00:05:01.610 --> 00:05:02.850
And then it doesn't go well.

69
00:05:02.850 --> 00:05:05.500
So then they burn it down and
go to View and back.

70
00:05:05.500 --> 00:05:10.760
Is that testing should be
a first class citizen.

71
00:05:10.760 --> 00:05:15.030
But clean code is the Emperor.

72
00:05:15.030 --> 00:05:22.152
It is the king write clean code,
and it's much easier to write test.

73
00:05:22.152 --> 00:05:26.240
All right, so with that said,
let's talk about

74
00:05:26.240 --> 00:05:30.842
testing as it pertains to Angular.

75
00:05:30.842 --> 00:05:33.858
So we hop into this code,

76
00:05:33.858 --> 00:05:38.990
one thing that we can just
point out right away.

77
00:05:38.990 --> 00:05:47.680
And so I'm going to close down these files
here is whenever you generate a component.

78
00:05:47.680 --> 00:05:50.231
So let's look at this users
component we just generated.

79
00:05:52.441 --> 00:05:57.559
That it generated not only the component,

80
00:05:57.559 --> 00:06:02.970
but it generated the spec for
the component.

81
00:06:04.450 --> 00:06:11.789
And so you get this working
test right out of the gates.

82
00:06:11.789 --> 00:06:17.910
And so they've done a really
nice job of making it easy

83
00:06:17.910 --> 00:06:24.220
to write tests by saying,
here's a working test for this component.

84
00:06:24.220 --> 00:06:31.580
Now what we need to do is what I would
like to do is step through the spec and

85
00:06:31.580 --> 00:06:36.857
talk about the pieces here and
what is happening and

86
00:06:36.857 --> 00:06:42.763
what each part in the spec
that they've generated does.

87
00:06:42.763 --> 00:06:46.730
So I think it'd be very easy to just say,
I've got this test, we're good.

88
00:06:46.730 --> 00:06:51.530
But it's really important to dig down and
check out and

89
00:06:51.530 --> 00:06:55.420
understand, like,
what are these pieces doing?

90
00:06:55.420 --> 00:06:59.480
And so, the first thing that

91
00:06:59.480 --> 00:07:05.150
I want to point out is, and I'm just gonna
kind of comment this out real quick.

92
00:07:05.150 --> 00:07:06.660
Or pieces of this.

93
00:07:06.660 --> 00:07:10.917
And we're going to go through
this kind of step by step, and

94
00:07:10.917 --> 00:07:15.187
I'm going to unpack what's
happening in this component.

95
00:07:19.485 --> 00:07:26.540
So the first piece of
this is the test bed.

96
00:07:26.540 --> 00:07:30.670
And so, the test bed,
let me comment this as well.

97
00:07:32.990 --> 00:07:38.590
The test bed right here is,
this is essentially

98
00:07:38.590 --> 00:07:44.514
the the context or
the the mechanism responsible for

99
00:07:44.514 --> 00:07:49.590
creating the environment for
your test to run.

100
00:07:49.590 --> 00:07:54.252
So this is like the single most
important piece when you're testing

101
00:07:54.252 --> 00:07:55.818
angular components.

102
00:07:55.818 --> 00:08:01.119
And It's responsible for

103
00:08:01.119 --> 00:08:05.764
essentially booting up or
configuring or essentially setting up

104
00:08:05.764 --> 00:08:11.240
a very controlled Angular environment for
you to run your test in.

105
00:08:11.240 --> 00:08:17.170
And so if we look here,
I'm gonna come out of this line as well,

106
00:08:17.170 --> 00:08:24.250
so we can just focus on this,
TestBed.configureTestingModule.

107
00:08:24.250 --> 00:08:29.650
And so what this does is this
gives you an opportunity to create

108
00:08:29.650 --> 00:08:33.194
a very specific module for

109
00:08:33.194 --> 00:08:38.370
you to run or test your component in.

110
00:08:38.370 --> 00:08:46.860
And so, you want to run this in a before
each block before all of your tests.

111
00:08:46.860 --> 00:08:48.639
So before you run your test

112
00:08:49.680 --> 00:08:54.340
what you're doing is you're saying
testbed configure testing module.

113
00:08:54.340 --> 00:08:59.560
And you're setting up essentially
an Angular module for your component,

114
00:08:59.560 --> 00:09:05.220
or your service or whatever it is to
live in, so that you can test it.

115
00:09:05.220 --> 00:09:09.350
And so we're saying
Testbed.configureTestingModule.

116
00:09:09.350 --> 00:09:12.790
And I want to declare this user component.

117
00:09:13.980 --> 00:09:17.074
Well, that's pretty interesting,

118
00:09:17.074 --> 00:09:22.014
because if we go over to our app module,
let's look at that.

119
00:09:22.014 --> 00:09:30.680
Entry module declarations,users component,
so here it is.

120
00:09:30.680 --> 00:09:38.571
Same thing is we're declaring that
we want to test this component.

121
00:09:38.571 --> 00:09:43.637
Now, the next piece to this is,
now that we've

122
00:09:43.637 --> 00:09:49.856
configured the module is that
we need to create a fixture.

123
00:09:49.856 --> 00:09:55.900
And so a fixture essentially creates
an instance of the component to test and

124
00:09:55.900 --> 00:10:01.000
then it returns this in a test
fixture that you can then start to do

125
00:10:01.000 --> 00:10:07.150
some interesting things in and
access that component that you've created.

126
00:10:07.150 --> 00:10:12.300
Because you have the testing module or
the testbed which creates the module, and

127
00:10:12.300 --> 00:10:17.540
then within that, then you can create
a fixture that has an instance

128
00:10:17.540 --> 00:10:22.990
of that component that you can
start to manipulate and access.

129
00:10:22.990 --> 00:10:30.410
So, We have fixture,
component fixture up at the top here.

130
00:10:30.410 --> 00:10:33.170
And let's start to unpack this a bit more.

131
00:10:33.170 --> 00:10:38.870
So we're saying, configure the testing
module, then compile the components.

132
00:10:38.870 --> 00:10:41.789
But if we go down into the second
before each block, and

133
00:10:41.789 --> 00:10:43.573
I'll explain why there's two.

134
00:10:45.766 --> 00:10:50.220
Is we're calling fixture Testbed.

135
00:10:51.280 --> 00:10:52.590
Create usersComponent.

136
00:10:52.590 --> 00:10:59.180
So what it's doing is it's returning a
testbed with an instance of that component

137
00:10:59.180 --> 00:11:03.690
within the testbed that you can access.

138
00:11:03.690 --> 00:11:09.950
So we're saying fissure is a component
fissure with a user component in it.

139
00:11:09.950 --> 00:11:13.990
And so now We're saying
testbed create component and

140
00:11:13.990 --> 00:11:16.800
return me the users component.

141
00:11:18.350 --> 00:11:23.773
And then what we can do is
we can access the component

142
00:11:23.773 --> 00:11:28.452
by calling fixture.componentInstance.

143
00:11:28.452 --> 00:11:33.667
And what this does now is we now
have an instance of this component

144
00:11:33.667 --> 00:11:38.207
that we can start to access,
and we can manipulate, and

145
00:11:38.207 --> 00:11:43.440
we can call methods on, and
we can test, and we start to do this.

146
00:11:43.440 --> 00:11:50.060
So now, this testing piece
has done a really good job of

147
00:11:50.060 --> 00:11:55.370
saying I'm allowing you to create
a very specific module to run this in.

148
00:11:55.370 --> 00:12:00.243
And I'm going to allow you
to create this component

149
00:12:00.243 --> 00:12:04.788
in isolation so
that you can start to work with.

150
00:12:04.788 --> 00:12:12.476
And so, with the testbed that
We have created a module,

151
00:12:12.476 --> 00:12:17.577
we've created a fixture using
Testbed.createComponent.

152
00:12:17.577 --> 00:12:22.053
And then by calling
fixture.componentInstance,

153
00:12:22.053 --> 00:12:25.720
we now have an instance of that component.

154
00:12:25.720 --> 00:12:31.230
So now, for instance,
if I go here, and I created

155
00:12:31.230 --> 00:12:36.160
a title property I could say Hello Users.

156
00:12:36.160 --> 00:12:39.241
Now within

157
00:12:39.241 --> 00:12:46.135
the Spec here,

158
00:12:46.135 --> 00:12:52.630
I can say it should have a title or

159
00:12:52.630 --> 00:12:59.135
should have the correct title.

160
00:12:59.135 --> 00:13:02.500
Then we'll create a federal function.

161
00:13:02.500 --> 00:13:03.201
We'll go here.

162
00:13:06.798 --> 00:13:07.570
Close this out.

163
00:13:11.050 --> 00:13:17.168
And now what we can do is we
can say expect component.title.

164
00:13:17.168 --> 00:13:19.231
And so you saw it already picked that up.

165
00:13:21.864 --> 00:13:25.244
To be, Hello.

166
00:13:28.513 --> 00:13:29.270
Users.

167
00:13:33.029 --> 00:13:33.952
There we go.

168
00:13:33.952 --> 00:13:42.210
And so let's go ahead and
Let's just go ahead and run these tests.

169
00:13:42.210 --> 00:13:46.090
And let's see what happens.

170
00:13:46.090 --> 00:13:46.970
So I'm going to go here.

171
00:13:48.010 --> 00:13:51.189
And from the command line,
you just do NPM run test.

172
00:13:54.320 --> 00:13:58.070
And this is going to spin
up the karma test runner.

173
00:13:58.070 --> 00:13:59.730
So you get this for free.

174
00:14:01.240 --> 00:14:05.540
And it's just going to run so
you can see it's launching a browser.

175
00:14:06.540 --> 00:14:15.580
And, This should work but possibly not.

176
00:14:15.580 --> 00:14:17.750
So, as we've been coding.

177
00:14:19.150 --> 00:14:23.280
We have run into a bunch of stuff,
but here we go.

178
00:14:23.280 --> 00:14:25.080
Let's focus on this one right here.

179
00:14:25.080 --> 00:14:32.050
So, obviously got a couple failing test,
but more importantly this one right here.

180
00:14:32.050 --> 00:14:34.900
Expected Hello Users to be fail.

181
00:14:34.900 --> 00:14:36.150
So let's fix this one.

182
00:14:37.340 --> 00:14:42.478
So we'll go back into our code and

183
00:14:45.625 --> 00:14:47.670
We'll change this to Hello Users.

184
00:14:50.460 --> 00:14:51.230
Let's go back here.

185
00:14:52.990 --> 00:15:01.518
And, now that should be gone perfect.

186
00:15:01.518 --> 00:15:06.661
And so we'll actually fix these in just
moment while they're here, so this is also

187
00:15:06.661 --> 00:15:11.536
kind of going to get into something
that's what we'll talk about in a moment.

188
00:15:11.536 --> 00:15:17.800
But let's keep going just
a little bit further down this.

189
00:15:17.800 --> 00:15:19.750
And we're gonna focus on this component,
and

190
00:15:19.750 --> 00:15:23.960
then we'll kind of go in and
I can show you how to fix

191
00:15:23.960 --> 00:15:27.510
kind of the rest of those tests because
you will run into this quite a bit.

192
00:15:27.510 --> 00:15:30.400
So when you're running a test,

193
00:15:30.400 --> 00:15:35.260
configure the module, create the fixture
and then get the component instance.

194
00:15:35.260 --> 00:15:38.280
Now, this is done for
you kinda get this for free.

195
00:15:38.280 --> 00:15:44.720
So it's really easy to kind of just
not think about the what's actually

196
00:15:44.720 --> 00:15:49.790
happening but
that is the sequence of the events.

