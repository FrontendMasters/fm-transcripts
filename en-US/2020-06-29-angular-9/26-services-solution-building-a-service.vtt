WEBVTT

1
00:00:00.020 --> 00:00:03.770
Let's get into our services challenge.

2
00:00:04.840 --> 00:00:09.300
So what we need you to do is
create a lesson service and

3
00:00:09.300 --> 00:00:15.600
then move this course lessons data
structure into the service and

4
00:00:15.600 --> 00:00:20.560
then service it back to our components.

5
00:00:20.560 --> 00:00:27.010
So from the command line,
we'll just go ng g s.

6
00:00:27.010 --> 00:00:33.292
And so this is just short for
ng, generate service and

7
00:00:33.292 --> 00:00:39.437
we're gonna go
shared/services/lessons -d for

8
00:00:39.437 --> 00:00:43.357
dry run, and it looks good to me.

9
00:00:43.357 --> 00:00:45.650
Make sure I didn't spell anything wrong.

10
00:00:47.300 --> 00:00:51.373
And we'll add this in, good to go.

11
00:00:51.373 --> 00:00:56.306
And then what we'll do is we're going to,
and

12
00:00:56.306 --> 00:01:02.633
further conversation, well,
I'm going to do this just so

13
00:01:02.633 --> 00:01:09.608
we can see in our app module,
we're going to go LessonsService.

14
00:01:12.616 --> 00:01:13.757
Did that import?

15
00:01:13.757 --> 00:01:16.020
Yes, it did, very good.

16
00:01:16.020 --> 00:01:19.628
And now, let's go into our home component.

17
00:01:22.068 --> 00:01:26.302
And we're going to inject this,
so we'll go private.

18
00:01:29.736 --> 00:01:32.376
LessonsService.

19
00:01:35.449 --> 00:01:38.793
And then from here,

20
00:01:38.793 --> 00:01:45.230
I'm just going to chop this out.

21
00:01:45.230 --> 00:01:50.937
And actually what I'll do,
I'll copy that because I'll

22
00:01:50.937 --> 00:01:56.306
need that in a moment, and
I'll just set this to null.

23
00:01:56.306 --> 00:02:02.247
Now, in our, LessonsService,

24
00:02:02.247 --> 00:02:08.196
we're going to go here and what I'm gonna
do is I'm just gonna call this lessons,

25
00:02:08.196 --> 00:02:13.100
it seems to me a little bit
more semantically correct.

26
00:02:13.100 --> 00:02:17.876
And then what I'm gonna
do is I will set this to

27
00:02:17.876 --> 00:02:23.179
private since I did this
in the previous example.

28
00:02:23.179 --> 00:02:31.460
And we'll just go all return this lessons,
all right?

29
00:02:31.460 --> 00:02:36.983
Now, back in our home component,
when we go to ngOnInit,

30
00:02:36.983 --> 00:02:43.076
will go this.courseLessons
= this.lessonsService.all,

31
00:02:43.076 --> 00:02:49.200
so we'll call this now, just so
we can see this in action.

32
00:02:49.200 --> 00:02:55.590
If I take this private off, notice that
it doesn't exist on type home component.

33
00:02:55.590 --> 00:03:00.050
And so this is kind of some TypeScript
voodoo magic where if you add in this

34
00:03:00.050 --> 00:03:05.680
access modifier,
then it adds it as a member of the class.

35
00:03:05.680 --> 00:03:06.990
So let me save this.

36
00:03:08.400 --> 00:03:13.531
Let me go back to my lessonsService and
let me just create some,

37
00:03:18.099 --> 00:03:20.766
One more maybe possible
data structure in here.

38
00:03:23.060 --> 00:03:29.452
And we're gonna have a lesson on YOLO,
all right?

39
00:03:29.452 --> 00:03:36.370
We'll hop in here and
let's go into go home, there we go.

40
00:03:36.370 --> 00:03:41.170
So pretty straightforward,
the one thing that I'll do in closing

41
00:03:41.170 --> 00:03:45.685
on this challenge is that I

42
00:03:45.685 --> 00:03:51.670
find like the most kind of
grievous things that happen

43
00:03:51.670 --> 00:03:56.600
in an application such as hidden state
breaking the single responsibility

44
00:03:56.600 --> 00:04:00.920
principle nested logic structures.

45
00:04:01.920 --> 00:04:06.740
And in this case where you have,
essentially logic and the wrong

46
00:04:06.740 --> 00:04:14.170
abstraction, in theory is that we saw how
quickly I was able to just extract or

47
00:04:14.170 --> 00:04:19.190
extract out that data structure and
move it into its appropriate place.

48
00:04:19.190 --> 00:04:24.680
And so I think the thing here is when
you have something in your codebase,

49
00:04:24.680 --> 00:04:29.300
where you got this large,
monolithic component, it's very easy

50
00:04:29.300 --> 00:04:33.950
to start to move that and break that
out into its appropriate classes.

51
00:04:33.950 --> 00:04:38.050
And so this is when I talk
about refactoring by promotion,

52
00:04:38.050 --> 00:04:40.290
this is really what it comes down to.

53
00:04:40.290 --> 00:04:43.870
It's actually pulling out something that
doesn't belong at that abstraction or

54
00:04:43.870 --> 00:04:47.410
at that level, and
then moving it into a smaller,

55
00:04:47.410 --> 00:04:51.850
more precise, fine grained method or
class that handles just that thing.

56
00:04:51.850 --> 00:04:56.490
And so it's a lot of just pulling things
apart and putting them into their place.

