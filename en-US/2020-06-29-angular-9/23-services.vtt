WEBVTT

1
00:00:00.040 --> 00:00:03.633
As an Angular developer.

2
00:00:03.633 --> 00:00:10.469
I think one of the most fundamental
mistakes that new Angular developers make,

3
00:00:10.469 --> 00:00:16.284
and that is, that there's not
a proper abstraction from component

4
00:00:16.284 --> 00:00:21.400
functionality to functionality
that exist in the server.

5
00:00:21.400 --> 00:00:26.150
And so I'm now gonna start to
kinda touch on state management.

6
00:00:26.150 --> 00:00:29.500
And so I'm just going to hint at this.

7
00:00:29.500 --> 00:00:33.941
And, the one thing that I wanna point out,

8
00:00:38.384 --> 00:00:45.350
Is as we look at our components,
What do we notice about them?

9
00:00:46.880 --> 00:00:55.143
And so, I'll just condense
this down that it's a class.

10
00:00:55.143 --> 00:01:02.173
And if we look at our module,
what do we notice?

11
00:01:02.173 --> 00:01:05.888
It is a class.

12
00:01:05.888 --> 00:01:10.180
And, so now the question is,

13
00:01:10.180 --> 00:01:16.019
when you have a component that has data,

14
00:01:16.019 --> 00:01:21.000
that you need to share with another

15
00:01:21.000 --> 00:01:25.140
component, what do you do?

16
00:01:27.120 --> 00:01:33.074
And the answer is, well,
you abstract that data or

17
00:01:33.074 --> 00:01:38.474
that functionality into
a higher abstraction

18
00:01:38.474 --> 00:01:43.879
that both of those
components can then share.

19
00:01:43.879 --> 00:01:49.246
And so, for instance,
if we go to the app, and

20
00:01:49.246 --> 00:01:54.479
we have the courses
route with that feature,

21
00:01:54.479 --> 00:02:00.675
and if we went to the home component or
the home route,

22
00:02:00.675 --> 00:02:06.230
let's say I wanted to also add in courses.

23
00:02:06.230 --> 00:02:11.560
Well right now,
the courses data structure exists

24
00:02:11.560 --> 00:02:18.200
naively which is fine as
we iterate in the courses

25
00:02:18.200 --> 00:02:23.870
collection that's local
to the courses component.

26
00:02:23.870 --> 00:02:29.226
And so, what we need to do is,
I call this refactoring through

27
00:02:29.226 --> 00:02:33.964
promotion cuz we need to
promote this functionality or

28
00:02:33.964 --> 00:02:38.194
the minimum this data
structure into a service.

29
00:02:38.194 --> 00:02:46.724
And then share it with any component
that's interested or needs that data.

30
00:02:46.724 --> 00:02:50.140
So, we're going to do this as a service.

31
00:02:50.140 --> 00:02:56.504
And so,
let's hop into our command line and

32
00:02:56.504 --> 00:03:01.845
I'm going to generate this so ng g s.

33
00:03:01.845 --> 00:03:06.203
And, let's go with typically what

34
00:03:06.203 --> 00:03:10.706
I'll do is anything that is shared,

35
00:03:10.706 --> 00:03:14.628
I'll either put it in a common or

36
00:03:14.628 --> 00:03:19.858
a shared directory, so put the services,

37
00:03:19.858 --> 00:03:26.140
group them together, and
let's go with courses.

38
00:03:26.140 --> 00:03:30.500
So what I wanna do is create
a shared courses service.

39
00:03:30.500 --> 00:03:34.726
Let me just do a dry run and
see what is going,

40
00:03:38.048 --> 00:03:41.240
To happen, all right?

41
00:03:41.240 --> 00:03:47.112
And so this command here,
I'll just, Put this up here,

42
00:03:47.112 --> 00:03:53.223
so it's ng g for generate, s for
service, shared/services/courses,

43
00:03:53.223 --> 00:03:57.210
and this is going to
generate the services core.

44
00:03:57.210 --> 00:04:01.840
So I'll put this back up, and
I'm taking the d flag with

45
00:04:01.840 --> 00:04:06.420
the dry run flag off, and
I'm going to generate this.

46
00:04:07.500 --> 00:04:12.245
All right, so what this has done is
it's generated not only the service but

47
00:04:12.245 --> 00:04:18.040
the service spec, and so
now I have eight courses service.

48
00:04:18.040 --> 00:04:21.410
Now, when I happen to this class,

49
00:04:23.240 --> 00:04:27.520
what do you think that we're going to see
or the service, what are we going to see?

50
00:04:28.740 --> 00:04:32.816
Well, wanna pull this up, and,

51
00:04:35.157 --> 00:04:40.510
Lo and behold, it's another class.

52
00:04:40.510 --> 00:04:45.910
And so there is one slide that I
do want to show, and it's in here.

53
00:04:45.910 --> 00:04:50.870
I know we have been
pretty light on slides,

54
00:04:50.870 --> 00:04:53.440
I've just enjoyed coding with everybody.

55
00:04:53.440 --> 00:05:00.517
But, everything that we do in
Angular is just a class, what?

56
00:05:00.517 --> 00:05:05.556
So when you do a component,
or a directive, or

57
00:05:05.556 --> 00:05:11.112
a service or a pipe,
it is simply a JavaScript class

58
00:05:11.112 --> 00:05:17.560
with some metadata,
hooking it back in to Angular.

59
00:05:17.560 --> 00:05:23.750
And so, this is actually a pretty
short module in the sense that

60
00:05:25.240 --> 00:05:32.190
we already fundamentally kind
of understand what we're doing.

61
00:05:32.190 --> 00:05:37.997
Or we kind of understand the shape,
because of component classes.

62
00:05:37.997 --> 00:05:42.552
So, now we have this CoursesService and so

63
00:05:42.552 --> 00:05:45.976
let's start to refactor this.

64
00:05:49.374 --> 00:05:56.168
So what I'm gonna do is I'm going
to copy this structure out,

65
00:05:56.168 --> 00:06:01.926
and I'm going to paste it
into the courses service.

66
00:06:05.851 --> 00:06:12.610
And, Just like a class now that
that's here, it is available.

67
00:06:12.610 --> 00:06:17.070
But, what we need to do is
we need to make it available

68
00:06:18.590 --> 00:06:22.730
to the rest of our application.

69
00:06:24.090 --> 00:06:29.110
And so,
we're gonna go in here into the app

70
00:06:29.110 --> 00:06:34.490
component or rather the app module,

71
00:06:34.490 --> 00:06:39.380
and in providers, and so,
imports are for modules.

72
00:06:39.380 --> 00:06:45.650
Declarations are for components and
providers are for services.

73
00:06:45.650 --> 00:06:50.940
So we'll go Courses service so
I'm just going to add this in.

74
00:06:52.270 --> 00:06:58.099
And then, now that it's in my module,
I'm going to come into my component.

75
00:06:58.099 --> 00:07:02.000
And I'm going to inject this.

76
00:07:02.000 --> 00:07:04.670
And so, if anybody's done AngularJS,

77
00:07:04.670 --> 00:07:07.360
they're familiar with this
idea of dependency injection.

78
00:07:07.360 --> 00:07:10.995
Well dependency injection
happens in the constructor, or

79
00:07:10.995 --> 00:07:13.183
at the constructor as a parameter.

80
00:07:13.183 --> 00:07:16.629
And so, I'm going to set private, so

81
00:07:16.629 --> 00:07:22.050
I'm going to set a visibility or
an access modifier.

82
00:07:22.050 --> 00:07:26.322
And I'm going to go courses service and
I'm going to type it

83
00:07:26.322 --> 00:07:31.176
as, CoursesService.

84
00:07:31.176 --> 00:07:39.196
Now, I don't wanna assume prior knowledge,

85
00:07:39.196 --> 00:07:43.501
but when you're working with TypeScript,

86
00:07:43.501 --> 00:07:50.247
that when you set an access modifier
on a parameter in a constructor,

87
00:07:50.247 --> 00:07:57.450
then it will automatically assign
that to a member of that class.

88
00:07:57.450 --> 00:08:00.483
So now what I can do is,

89
00:08:02.482 --> 00:08:07.314
I can set courses to null here.

90
00:08:07.314 --> 00:08:12.186
And then with ng on a net,

91
00:08:12.186 --> 00:08:17.762
I can go and this .courses,

92
00:08:20.006 --> 00:08:27.491
= this .coursesService, Courses.

93
00:08:30.153 --> 00:08:35.052
And if I refresh this,
then it should show up but

94
00:08:35.052 --> 00:08:38.114
I want to just make sure that or

95
00:08:38.114 --> 00:08:43.270
prove that I am indeed
pulling from this service.

96
00:08:44.360 --> 00:08:47.103
So, back to here, let's look at the app.

97
00:08:51.506 --> 00:08:53.161
Let me refresh.

98
00:08:53.161 --> 00:08:57.560
And you'll notice now
that the courses that I'm

99
00:08:57.560 --> 00:09:00.890
pulling in is coming from the service

