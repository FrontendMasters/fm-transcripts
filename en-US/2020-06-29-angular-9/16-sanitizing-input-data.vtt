WEBVTT

1
00:00:01.540 --> 00:00:06.410
So checking the chat room here,
don't be shy.

2
00:00:06.410 --> 00:00:09.357
We've kind of just been burning
through a ton of stuff here.

3
00:00:09.357 --> 00:00:14.000
How about my,
&gt;&gt; A couple

4
00:00:14.000 --> 00:00:18.395
about sanitizing inputs and
use cases for two way bindings.

5
00:00:20.050 --> 00:00:22.937
&gt;&gt; Yeah, so I didn't answer
the two way binding question

6
00:00:22.937 --> 00:00:26.230
that's typically on
a template driven form.

7
00:00:26.230 --> 00:00:32.940
And now if you're sanitizing, so
it depends on what you mean by sanitation.

8
00:00:32.940 --> 00:00:38.140
Now one thing that Angular does not like

9
00:00:38.140 --> 00:00:44.270
enabled by default is the ability
to render raw HTML in the DOM.

10
00:00:44.270 --> 00:00:49.277
And so if you're going to do that,
you have to explicitly enable that.

11
00:00:49.277 --> 00:00:52.621
And so going back to here,

12
00:00:52.621 --> 00:00:57.641
let me see if I can Find this real quick.

13
00:01:14.571 --> 00:01:19.639
So they have in the core they
have the sanitizer class

14
00:01:19.639 --> 00:01:26.910
that essentially allows you to take HTML,
sanitize it and then render it.

15
00:01:26.910 --> 00:01:30.260
So you definitely want to be careful
about rendering just like raw HTML.

16
00:01:31.310 --> 00:01:35.315
There is a use case for
that, but by default, for

17
00:01:35.315 --> 00:01:40.690
the sake of security that's turned off and
so what you have to do is

18
00:01:40.690 --> 00:01:45.707
if you want to do that,
you essentially have to enable that.

19
00:01:45.707 --> 00:01:51.850
And so that is,
there is a sanitation service.

20
00:01:51.850 --> 00:01:56.390
And I did not have an example here.

21
00:01:56.390 --> 00:02:00.818
I occasionally I have had to use this
typically when I do I need to go look

22
00:02:00.818 --> 00:02:01.429
that up.

23
00:02:01.429 --> 00:02:05.387
Let me see if I can find
something real quick.

24
00:02:05.387 --> 00:02:09.263
Actually,let me see let's
try something here.

25
00:02:09.263 --> 00:02:14.913
So typically if I'm looking for
a working example of really

26
00:02:14.913 --> 00:02:20.224
anything the two techniques
that I will use is I feel like

27
00:02:20.224 --> 00:02:25.874
everybody's sort of
Stack Overflow driven development,

28
00:02:25.874 --> 00:02:30.281
sod or whatever, but
you really kind of have,

29
00:02:30.281 --> 00:02:35.479
I would say you have
Stack Overflow driven development

30
00:02:35.479 --> 00:02:40.696
which I'm not ashamed to
admit that I use frequently.

31
00:02:40.696 --> 00:02:43.000
Where's like, what's up with this problem?

32
00:02:43.000 --> 00:02:43.788
Working example.

33
00:02:43.788 --> 00:02:44.708
I'm just going to copy this in.

34
00:02:44.708 --> 00:02:47.471
The other piece is document
driven development,

35
00:02:47.471 --> 00:02:49.519
which we saw with angular material.

36
00:02:49.519 --> 00:02:54.411
Another one that I've started
using that I found to be

37
00:02:54.411 --> 00:02:59.193
really helpful so
you guys are getting all my tips and

38
00:02:59.193 --> 00:03:04.192
tricks here is if I need to
see something I'll do like,

39
00:03:04.192 --> 00:03:08.599
in this case Angular sanitizer,
stack Blitz.

40
00:03:08.599 --> 00:03:13.840
And, more often than not surprisingly,
you'll find somebody so

41
00:03:13.840 --> 00:03:19.779
stacks Blitz is by default,
our public is an example of,

42
00:03:21.400 --> 00:03:28.050
something where you can look and
be like, this is being sanitized.

43
00:03:28.050 --> 00:03:30.120
And so I realized actually,

44
00:03:30.120 --> 00:03:34.040
there's a couple things I can actually
talk about in the next thing.

45
00:03:34.040 --> 00:03:39.717
So we'll talk about kind of dependency
injection and services in a little bit,

46
00:03:39.717 --> 00:03:44.716
but that's how you would do that is
using essentially DOM sanitizer,

47
00:03:44.716 --> 00:03:47.105
and then you just sanitize that.

48
00:03:50.657 --> 00:03:51.361
Let me see.

49
00:03:51.361 --> 00:03:54.570
Yeah, a couple questions here.

50
00:03:54.570 --> 00:04:00.660
So, can I explain what ng template does.

51
00:04:00.660 --> 00:04:05.740
Really what ng template
does is It's a way to

52
00:04:08.060 --> 00:04:13.630
take the DOM and then Angular will
then go and insert those empty

53
00:04:13.630 --> 00:04:18.910
templates into the code to essentially
manipulate the DOM under the hooded.

54
00:04:18.910 --> 00:04:25.223
So it's kind of how Angular
hooks into the DOM for that.

55
00:04:25.223 --> 00:04:30.132
And so for
instance ng4 is it's looping over is it's

56
00:04:30.132 --> 00:04:35.152
actually creating those
entity template elements for

57
00:04:35.152 --> 00:04:38.110
Angular to manipulate the DOM.

58
00:04:38.110 --> 00:04:41.620
So it's just a kind of a holder for that.

59
00:04:41.620 --> 00:04:44.600
So that's what ng template does.

60
00:04:44.600 --> 00:04:49.758
To something like view dev tools,
reactive tools exist, totally.

61
00:04:49.758 --> 00:04:55.312
And actually,
when I'm doing state management

62
00:04:55.312 --> 00:04:59.620
that I actually use Redux dev tools.

63
00:04:59.620 --> 00:05:04.569
And so as well as there's
another component called augury,

64
00:05:04.569 --> 00:05:06.613
which I don't use a ton.

65
00:05:06.613 --> 00:05:09.890
Typically I'll just kind
of parse the DOM in or

66
00:05:09.890 --> 00:05:12.710
I can just do it right from the console.

67
00:05:12.710 --> 00:05:15.570
But there definitely is Redux dev
tools which I use quite a bit.

