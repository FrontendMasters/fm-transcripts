WEBVTT

1
00:00:00.310 --> 00:00:07.930
So this routing table, in and
of itself, is very, very simple.

2
00:00:07.930 --> 00:00:12.950
But, let's talk about how
to do lazy loaded routes.

3
00:00:12.950 --> 00:00:17.970
So the first thing to do, for
lazy loaded routes, and by that is,

4
00:00:17.970 --> 00:00:22.160
when you go to a route, that's when
it loads that bundle in that asset.

5
00:00:22.160 --> 00:00:27.650
So if you have a very large application,
with a large number of features,

6
00:00:27.650 --> 00:00:33.330
for optimization purposes, maybe you only
wanna load, let's say, the main route.

7
00:00:33.330 --> 00:00:37.170
And then if somebody navigates to
the features that they want to use,

8
00:00:37.170 --> 00:00:44.870
then you load those routes
dynamically into your application.

9
00:00:44.870 --> 00:00:49.565
And so, this is a really nice way to
start to break your application up into

10
00:00:49.565 --> 00:00:54.141
really small parts, and really
optimize the experience for the user.

11
00:00:54.141 --> 00:01:00.600
And so, in order to do that, we need to
create a new module and a new component.

12
00:01:00.600 --> 00:01:04.990
So let's go ahead, and let's create

13
00:01:04.990 --> 00:01:11.090
a login module and a login component.

14
00:01:11.090 --> 00:01:12.070
And we'll attach a route to that,

15
00:01:12.070 --> 00:01:16.160
and I'll show you how to do
this in a lazy loaded fashion.

16
00:01:16.160 --> 00:01:21.570
So the first thing we need to do,
is to generate a new module.

17
00:01:21.570 --> 00:01:27.350
So ng g m, for module, and
I'm going to call this Login.

18
00:01:28.400 --> 00:01:32.990
And I'm going to also
attach routing to this.

19
00:01:32.990 --> 00:01:36.640
So, I'm saying, generate a module and
we're going to add routing to this.

20
00:01:36.640 --> 00:01:38.700
Now let's go ahead and attach the d flag.

21
00:01:38.700 --> 00:01:39.780
So we'll do a dry run real quick.

22
00:01:41.963 --> 00:01:44.180
Everything looks good, so routing module.

23
00:01:44.180 --> 00:01:48.406
Let's go ahead, and so,
actually you have login module, and

24
00:01:48.406 --> 00:01:50.920
then you have login routing module.

25
00:01:50.920 --> 00:01:53.113
So let's go ahead and run this.

26
00:01:56.982 --> 00:02:00.741
Very good, now let's hop into
the code just real quick and

27
00:02:00.741 --> 00:02:03.370
see what we have generated.

28
00:02:03.370 --> 00:02:08.340
So we have our Login Module,
which is just a standard module.

29
00:02:08.340 --> 00:02:13.030
We have the CommonModule and
then we have the LoginRoutingModule.

30
00:02:13.030 --> 00:02:17.780
Now if we go into the LoginRoutingModule,
what you'll notice is,

31
00:02:17.780 --> 00:02:22.690
this is almost identical to our
top level app routing module.

32
00:02:22.690 --> 00:02:26.990
The difference is that one,
obviously we don't have any routes yet.

33
00:02:26.990 --> 00:02:34.260
More importantly that it's
RouterModule.forChild.

34
00:02:34.260 --> 00:02:39.300
Now what is the difference
between RouterModule.forChild and

35
00:02:39.300 --> 00:02:41.750
RouterModule.forRoot?

36
00:02:42.830 --> 00:02:48.730
So the idea is that,
at some point in your application,

37
00:02:48.730 --> 00:02:53.800
or at any point in your application, you
should be able to load routes dynamically.

38
00:02:53.800 --> 00:02:59.180
The problem is,
you only want one routing service,

39
00:02:59.180 --> 00:03:02.020
handling the routes for your application.

40
00:03:02.020 --> 00:03:07.210
And so, when you do RouterModule.forRoot,
it's going to load all of the routes,

41
00:03:07.210 --> 00:03:11.390
but it's also going to
load the routing service.

42
00:03:11.390 --> 00:03:15.220
Versus, if we go into
the LoginRoutingModule,

43
00:03:15.220 --> 00:03:20.820
it's going to load the routes, but
it's not going to load the service.

44
00:03:20.820 --> 00:03:24.790
And so what you wanna do, is,
for child routing modules or

45
00:03:24.790 --> 00:03:29.760
lazy loaded routing modules,
you want to use RouterModule.forchild,

46
00:03:29.760 --> 00:03:33.310
because you don't want to try
to override the routing service,

47
00:03:33.310 --> 00:03:35.760
that is another bit of
unpredictable behavior.

48
00:03:35.760 --> 00:03:40.530
So for your top level RoutingModule,
it's RouterModule.forRoot,

49
00:03:40.530 --> 00:03:45.330
which is going to load that routing
service, and then for child modules, or

50
00:03:45.330 --> 00:03:50.892
lazy loaded modules you use forchild.

51
00:03:50.892 --> 00:03:54.500
So with that said,
let's generate a component

52
00:03:54.500 --> 00:03:58.810
that we can use with in this login module.

53
00:03:58.810 --> 00:04:05.827
So ng, we'll go ng g, c for component,
we're going to go login and

54
00:04:05.827 --> 00:04:10.029
let's just do -d and see what happens.

55
00:04:11.900 --> 00:04:17.750
So, notice it's generating this component,
and it's putting it in the Login folder.

56
00:04:17.750 --> 00:04:22.380
And previously, in some cases, if you
have more than one module in the folder,

57
00:04:22.380 --> 00:04:26.710
you have to tell the CLI,
what module you want to put that in.

58
00:04:26.710 --> 00:04:30.998
But, because there was already a login
module in this folder, it just went ahead

59
00:04:30.998 --> 00:04:34.859
and added that for us, so let's run
this again without the dry run flag.

60
00:04:36.833 --> 00:04:42.943
There we go, and from here,
back into our code,

61
00:04:42.943 --> 00:04:47.417
let's create a very basic route for

62
00:04:47.417 --> 00:04:50.870
the LoginRoutingModule.

63
00:04:50.870 --> 00:04:57.214
And so, path is going to be,
we'll just say login,

64
00:04:57.214 --> 00:05:02.854
and component is going
to be LoginComponent.

65
00:05:05.182 --> 00:05:05.890
There we go.

66
00:05:07.100 --> 00:05:10.980
And so now we have just a really,
really basic route here.

67
00:05:10.980 --> 00:05:12.800
Again, just path component,

68
00:05:12.800 --> 00:05:16.569
most of the time, that's what most of
your routes are going to look like.

69
00:05:17.800 --> 00:05:22.180
And so, we now have this module, and this

70
00:05:23.930 --> 00:05:30.577
component that's kinda encapsulated within
this route, and we want to lazy load it,

71
00:05:30.577 --> 00:05:34.450
into our main application,
how do we do that?

72
00:05:34.450 --> 00:05:40.190
So if we go back to our AppRoutingModule,

73
00:05:40.190 --> 00:05:42.990
we can add in, an additional route.

74
00:05:44.420 --> 00:05:48.252
And so it's still gonna be path, and

75
00:05:48.252 --> 00:05:53.310
the difference is that, we'll go here.

76
00:05:53.310 --> 00:05:55.020
And this is going to be login.

77
00:05:55.020 --> 00:05:57.600
And so I'm gonna need to make
a change to my previous route,

78
00:05:57.600 --> 00:05:59.660
to actually make this work.

79
00:05:59.660 --> 00:06:01.900
So the path is the Login.

80
00:06:01.900 --> 00:06:08.330
And instead of using component,
we're going to use loadchildren.

81
00:06:08.330 --> 00:06:12.410
And so what this does, is it basically
performs an asynchronous call,

82
00:06:12.410 --> 00:06:17.850
to load whatever kind of module,
wherever you point it.

83
00:06:17.850 --> 00:06:21.450
So it's gonna do an asynchronous
call to load this module.

84
00:06:21.450 --> 00:06:23.001
So loadchildren and

85
00:06:28.263 --> 00:06:32.190
We're going to put this function in here,
and we're going to use import.

86
00:06:35.738 --> 00:06:42.620
Login We're going to point
it to this login.module.

87
00:06:42.620 --> 00:06:49.170
Now, because this is asynchronous,
this is going to return a promise.

88
00:06:49.170 --> 00:06:54.250
And so then from here, we're just
going to take this and unpack or

89
00:06:54.250 --> 00:07:00.100
return the module within this,
so m.loginmodule.

90
00:07:00.100 --> 00:07:02.926
And let me break this down,
because we're getting a little crowded.

91
00:07:08.987 --> 00:07:10.350
There we go.

92
00:07:16.147 --> 00:07:20.272
All right, so the path is login,
loadchildren,

93
00:07:20.272 --> 00:07:26.068
which is calling import, and
we're pointing it to the login module,

94
00:07:26.068 --> 00:07:30.010
which is going to return that entire file.

95
00:07:30.010 --> 00:07:34.140
And then within our promise,
we're going to pull off or

96
00:07:34.140 --> 00:07:40.880
we'll just say take the loginmodule class,
and load this into angular and spin it up.

97
00:07:40.880 --> 00:07:45.820
Now the one thing that we need to
fix here, other than these few

98
00:07:45.820 --> 00:07:50.690
small syntactical errors,
is, this is going to load

99
00:07:52.000 --> 00:07:55.950
this module,
essentially kind of as a childmodule.

100
00:07:55.950 --> 00:08:01.550
The problem is that,
every route to this module,

101
00:08:01.550 --> 00:08:05.500
is going to be relative to that.

102
00:08:05.500 --> 00:08:11.920
So within these lazy loaded modules, this
is essentially kind of like the route.

103
00:08:11.920 --> 00:08:15.790
So, this is where you have to kind of
watch the context of the routes and

104
00:08:15.790 --> 00:08:19.550
you can sometimes get into trouble,
because,

105
00:08:19.550 --> 00:08:23.980
everything within this LoginRoutingModule,

106
00:08:23.980 --> 00:08:28.380
is going to treat LoginRoutingModule
as kind of the root.

107
00:08:28.380 --> 00:08:30.260
And so, what we wanna say here is, for

108
00:08:30.260 --> 00:08:34.250
the root of this module,
let's load in LoginComponent.

109
00:08:34.250 --> 00:08:38.520
So we're just changing
the context just slightly.

110
00:08:38.520 --> 00:08:40.160
And so we'll go ahead and save this.

111
00:08:41.350 --> 00:08:46.586
And let's go into our application, and

112
00:08:46.586 --> 00:08:51.514
let's first of all open up the Network

113
00:08:51.514 --> 00:08:55.674
tab here, and lets go to Login.

114
00:08:58.086 --> 00:08:59.530
And we are going to hit Enter.

115
00:09:01.170 --> 00:09:06.990
And notice that it routed to login,
so we have login works, hooray.

116
00:09:06.990 --> 00:09:12.270
More importantly,
if you look into the Network tab

117
00:09:12.270 --> 00:09:16.670
of your Dev Console, and
we start to scroll down, is,

118
00:09:16.670 --> 00:09:21.080
you'll see that we've loaded
the login-login-module.

119
00:09:21.080 --> 00:09:26.810
And so what that has done, is, it's
printed a separate bundle for this module.

120
00:09:28.130 --> 00:09:30.380
And then it's just pulling
it over the wire, and

121
00:09:30.380 --> 00:09:34.010
then loading it into your application.

122
00:09:34.010 --> 00:09:36.820
So, how do I know it's lazy?

123
00:09:36.820 --> 00:09:40.890
Well, you step into the Network tab,
and you can see here that it's loading

124
00:09:40.890 --> 00:09:45.800
this particular module,
in its own separate bundle.

125
00:09:45.800 --> 00:09:50.550
So, that's how you do
lazy loading modules.

126
00:09:50.550 --> 00:09:53.770
And for large applications,
this is, I think,

127
00:09:53.770 --> 00:09:58.580
a really kind of a key fundamental
piece of optimizing that experience.

128
00:09:58.580 --> 00:10:01.608
I've seen where this was not done.

129
00:10:01.608 --> 00:10:07.620
And also when you have a large center of
your frontend application, then it's 2MB

130
00:10:07.620 --> 00:10:13.190
to load or 3MB, which is, if you're
on the fast computer, maybe okay.

131
00:10:13.190 --> 00:10:17.670
But, I think it's really dangerous to
assume that everybody's on a high speed

132
00:10:17.670 --> 00:10:22.490
internet, or that they're even on
a desktop or a powerful desktop at that.

