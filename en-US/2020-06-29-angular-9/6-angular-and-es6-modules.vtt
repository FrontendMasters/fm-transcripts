WEBVTT

1
00:00:00.160 --> 00:00:03.920
The question is, is it a good
practice to create a module for

2
00:00:03.920 --> 00:00:07.030
a newly created component?

3
00:00:07.030 --> 00:00:11.850
And I'll touch on this more when we get
into component driven architecture,

4
00:00:11.850 --> 00:00:16.690
but it depends, and so
I definitely will not,

5
00:00:16.690 --> 00:00:21.530
I will create a module to group
a set of related components.

6
00:00:21.530 --> 00:00:25.080
So for instance, I might have a parent or
a container component and

7
00:00:25.080 --> 00:00:27.850
then I might have some sub
components that are related to that,

8
00:00:27.850 --> 00:00:29.880
where I'm dividing out some functionality.

9
00:00:29.880 --> 00:00:34.060
Well, I'm not going to create a module for
every one of those components, but

10
00:00:34.060 --> 00:00:40.580
I will create a module to encapsulate
a group of related components.

11
00:00:40.580 --> 00:00:47.425
And typically how I think of that
is how are we dividing up features?

12
00:00:47.425 --> 00:00:53.710
And so, generally, I think a routing
table, if you click and you go to this

13
00:00:53.710 --> 00:00:58.195
new route, that's a pretty good indication
that you probably have changed context.

14
00:00:58.195 --> 00:01:02.950
And I may create at least
a top level component for

15
00:01:02.950 --> 00:01:07.370
that route, but possibly a module.

16
00:01:07.370 --> 00:01:09.870
And if I'm doing lazy loading definitely.

17
00:01:09.870 --> 00:01:13.250
So my answer is,
I would not create a module for

18
00:01:13.250 --> 00:01:18.140
every component for
the sake of having a module.

19
00:01:18.140 --> 00:01:22.160
But I would create a module for

20
00:01:22.160 --> 00:01:27.630
a group of components where it makes
sense from an organizational standpoint.

21
00:01:27.630 --> 00:01:31.719
So typically that would be maybe
a top level container component,

22
00:01:33.230 --> 00:01:37.550
maybe, but if I'm lazy loading that
top level component, definitely.

23
00:01:38.980 --> 00:01:42.350
So hopefully that answered that question.

24
00:01:42.350 --> 00:01:46.695
&gt;&gt; The next question,
there's kind of two related questions.

25
00:01:46.695 --> 00:01:50.610
&gt;&gt; Sure.
&gt;&gt; One doesn't really understand,

26
00:01:50.610 --> 00:01:52.900
yes six module.

27
00:01:52.900 --> 00:01:59.900
And then the other question is kind
of NgModules versus ESX modules.

28
00:01:59.900 --> 00:02:02.980
Why did Angular create
their own module system?

29
00:02:04.940 --> 00:02:06.170
&gt;&gt; Right.

30
00:02:06.170 --> 00:02:08.690
So that is a really good question.

31
00:02:08.690 --> 00:02:12.600
The question is, you have,

32
00:02:12.600 --> 00:02:16.800
why do you have ESX modules and
engine module?

33
00:02:16.800 --> 00:02:21.624
In other words, why do we have
a language level module system, and

34
00:02:21.624 --> 00:02:24.132
really an Angular module system.

35
00:02:24.132 --> 00:02:27.631
And so, let me show you in the code,

36
00:02:27.631 --> 00:02:32.190
why we need really just
the ESX module system.

37
00:02:32.190 --> 00:02:36.900
So you'll notice here that,
let me pull up a just another one.

38
00:02:36.900 --> 00:02:41.670
So this is our routing module and we
haven't really done anything with this but

39
00:02:42.800 --> 00:02:46.145
notice export class AppRoutingModule.

40
00:02:48.350 --> 00:02:56.090
Outside of this right here, if I delete
this, there is nothing Angular about this.

41
00:02:56.090 --> 00:03:01.730
And so that's the other thing that Angular
has done in really made a shift is there

42
00:03:01.730 --> 00:03:06.380
leveraging native language features where
they can which I think is really good.

43
00:03:06.380 --> 00:03:11.850
That you're reducing the footprint
of the framework instead of having

44
00:03:11.850 --> 00:03:16.730
to create all these, the shims in these
layers to do that, so this right here,

45
00:03:16.730 --> 00:03:21.780
this is nothing more than that ESX or
TypeScript, which is a superset of ESX.

46
00:03:21.780 --> 00:03:25.376
And so how do I make this app routing

47
00:03:25.376 --> 00:03:30.340
module available to
the rest of my source code?

48
00:03:30.340 --> 00:03:35.785
Well, prior to ESX module system,
you just had all these imports

49
00:03:35.785 --> 00:03:41.880
in your inner study XML, or
you had to have some crazy build system.

50
00:03:41.880 --> 00:03:46.190
Well, with module systems,
it's easy for me to say, okay,

51
00:03:46.190 --> 00:03:48.490
I have this routing module.

52
00:03:48.490 --> 00:03:52.370
And I want to make this
available to my AppModule.

53
00:03:52.370 --> 00:03:57.030
And so when this compiles,
I need to do it in such a way that

54
00:03:57.030 --> 00:04:02.210
App Module knows about RoutingModule,
just the source code itself.

55
00:04:02.210 --> 00:04:07.220
And so you can see here
that I exported the module.

56
00:04:07.220 --> 00:04:10.240
And then up at the top,
I'm able to import that.

57
00:04:10.240 --> 00:04:15.666
And now it's available for
consumption within this module.

58
00:04:15.666 --> 00:04:20.131
Or really this class and so,
this is how to source code

59
00:04:20.131 --> 00:04:24.993
level at a language level
you're able to essentially pass

60
00:04:24.993 --> 00:04:29.970
source code around that it
satisfied those dependencies.

61
00:04:29.970 --> 00:04:33.617
It's really import-export.

62
00:04:33.617 --> 00:04:40.880
The reason why we have the Angular
module system on top of that,

63
00:04:42.240 --> 00:04:47.449
is because when we do
things like lazy loading.

64
00:04:48.920 --> 00:04:54.140
We need to be able to communicate,
to Angular

65
00:04:54.140 --> 00:04:59.310
that certain things exist, even though
you may not be using it right then.

66
00:05:01.020 --> 00:05:06.370
And so, in terms of optimizing your build
and providing additional information

67
00:05:06.370 --> 00:05:10.600
to Angular to say this is
precisely what you need to run, or

68
00:05:10.600 --> 00:05:14.076
here's some additional things that
you need when you wire this up.

69
00:05:14.076 --> 00:05:18.410
And so ESX modules are strictly to just

70
00:05:19.440 --> 00:05:23.010
indicate to Webpack that this is
how this is gonna be put together.

71
00:05:24.410 --> 00:05:28.630
NgModules or angular modules are there
to say this is how we're going to put

72
00:05:28.630 --> 00:05:33.390
the Angular application together in a way
that is performant, and that makes sense.

73
00:05:33.390 --> 00:05:37.610
So especially when you're
doing lazy loaded modules,

74
00:05:37.610 --> 00:05:43.320
being able to declare that, hey,
you don't know anything about this yet.

75
00:05:43.320 --> 00:05:46.720
But this is how you find this module and
this is this is where this exists.

76
00:05:46.720 --> 00:05:49.120
And so that's why that is it.

77
00:05:50.180 --> 00:05:55.810
There was a point in time,
when this did not exist NgModule.

78
00:05:55.810 --> 00:05:57.900
And they ran into some performance issues,

79
00:05:57.900 --> 00:06:00.980
they wanted to do lazy loading
in a couple different things.

80
00:06:00.980 --> 00:06:05.697
And another thing is actually tree
shaking, optimizing the build that

81
00:06:05.697 --> 00:06:08.810
Angular is able to look and say,
this is everything that I need.

82
00:06:09.920 --> 00:06:11.480
I don't need everything else.

83
00:06:11.480 --> 00:06:17.770
And it can create this optimized AOT
build, which I can talk about later.

84
00:06:17.770 --> 00:06:22.540
When they reannounced NgModule,
just a funny story.

85
00:06:22.540 --> 00:06:25.880
I just recorded a front
end masters workshop.

86
00:06:25.880 --> 00:06:31.135
And for months later, they're like,
we're reinducing NgMoodle and I just

87
00:06:31.135 --> 00:06:36.570
laid on the ground and I cried because it
really invalidated that whole workshop.

88
00:06:36.570 --> 00:06:40.310
So I had to basically come back and
redo it.

89
00:06:40.310 --> 00:06:45.060
So I would say the first four versions
of Angular were, like angular two and

90
00:06:45.060 --> 00:06:49.700
three and four was a bit tomaculous now
that we're at nine, it's a lot better.

91
00:06:49.700 --> 00:06:57.200
So that's why there are two kind
of module systems in parallel

