WEBVTT

1
00:00:00.791 --> 00:00:06.398
We have the service, we've abstracted
it out, but kind of this next level,

2
00:00:06.398 --> 00:00:12.092
this next piece that we need to kind of
bake in, talking about stage management

3
00:00:12.092 --> 00:00:17.390
is ultimately in an application,
what is the single source of truth?

4
00:00:17.390 --> 00:00:20.350
Well, it's not in the front end usually.

5
00:00:20.350 --> 00:00:24.990
Typically, it's within the database but

6
00:00:24.990 --> 00:00:30.020
exposed via some API, and so

7
00:00:30.020 --> 00:00:35.262
we definitely need the ability to
communicate to a remote endpoint and

8
00:00:35.262 --> 00:00:38.656
perform actions.

9
00:00:38.656 --> 00:00:42.881
And so if we go into our application and

10
00:00:42.881 --> 00:00:48.383
this was kind of baked
in from the beginning.

11
00:00:48.383 --> 00:00:52.645
But I wanna talk about first,
how do you mock out a REST API?

12
00:00:52.645 --> 00:00:57.225
This is a really valuable tool
that I've used quite a bit.

13
00:00:57.225 --> 00:01:05.770
And so using JSON server, the package,
that you can then point to

14
00:01:05.770 --> 00:01:10.600
a JSON file, and so
in this case, it's db.jason.

15
00:01:10.600 --> 00:01:18.836
And you can expose a data
structure as a REST endpoint.

16
00:01:18.836 --> 00:01:26.440
And and I think if I look at my terminal,

17
00:01:26.440 --> 00:01:31.660
I'll see this up here,
so localhost 3000, so

18
00:01:31.660 --> 00:01:38.740
let's go here, we save this.

19
00:01:38.740 --> 00:01:42.138
And let's just go into browser real quick
so you can kinda see what this looks like.

20
00:01:46.672 --> 00:01:49.550
Here we go, so we have courses.

21
00:01:50.910 --> 00:01:54.680
And so now, we have this basically this
REST endpoint just off of this JSON file.

22
00:01:54.680 --> 00:01:59.210
And so this is really, really handy
when you wanna start building and

23
00:01:59.210 --> 00:02:02.230
developing an application locally.

24
00:02:02.230 --> 00:02:06.750
Now, I will say this is that I have
worked on projects where the frontend

25
00:02:06.750 --> 00:02:10.630
team is working faster than the backend or
the API team.

26
00:02:11.630 --> 00:02:17.740
Not a problem, but
because we can agree on the data models,

27
00:02:17.740 --> 00:02:22.540
all we did is we basically spun up JSON
server with some mock data that matched

28
00:02:22.540 --> 00:02:28.360
the native models that we agreed on,
and we got our end working.

29
00:02:28.360 --> 00:02:30.300
And then when the API team was done,

30
00:02:30.300 --> 00:02:35.170
they just swapped out the endpoint and
it just worked.

31
00:02:35.170 --> 00:02:43.080
So with that said, we are going to consume
this endpoint, so let me close this down.

32
00:02:43.080 --> 00:02:48.790
And now, we're going to start to flesh out

33
00:02:48.790 --> 00:02:54.670
the courses service to actually
communicate with the backend.

34
00:02:54.670 --> 00:03:00.200
And so in order to do that,
the first thing that we need to do

35
00:03:00.200 --> 00:03:06.180
is we need to make sure
that we're using the HTTP

36
00:03:06.180 --> 00:03:10.340
model, and so it is here.

37
00:03:10.340 --> 00:03:14.520
So typically, when you generate a CLI
project, it will add this in, so

38
00:03:14.520 --> 00:03:17.820
this is the HTTP client module.

39
00:03:17.820 --> 00:03:22.500
And this makes it possible
to make HTTP calls.

40
00:03:22.500 --> 00:03:27.160
So now, if we go into our courses service,

41
00:03:27.160 --> 00:03:32.710
we can start to migrate or
transition this to instead of using

42
00:03:32.710 --> 00:03:38.010
kind of this home brewed functionality to,

43
00:03:38.010 --> 00:03:42.220
in fact us or make remote calls.

44
00:03:42.220 --> 00:03:48.470
So I'm going to inject HTTP quiet,

45
00:03:50.260 --> 00:03:54.520
and from here we can start to make call.

46
00:03:54.520 --> 00:03:59.903
So let me see real quick,
I may have a slide for

47
00:03:59.903 --> 00:04:05.900
this but, I do.

48
00:04:05.900 --> 00:04:11.720
So let me just pull this over and
just so we can see this

49
00:04:13.200 --> 00:04:18.630
in just from a high level.

50
00:04:18.630 --> 00:04:23.240
So if you're familiar with RESTful verbs,
which is get, put, post,

51
00:04:23.240 --> 00:04:28.380
delete, patch, I really don't use
requests with a very general one.

52
00:04:28.380 --> 00:04:32.530
And I don't think I've ever used head.

53
00:04:32.530 --> 00:04:37.480
But I definitely use get, post,
put, and delete quite a bit.

54
00:04:37.480 --> 00:04:43.960
And so HTTP client essentially
has these methods on it

55
00:04:43.960 --> 00:04:50.120
that match up to HTTP verbs,
very, very convenient.

56
00:04:50.120 --> 00:04:53.730
And so I think it's just
easier to see that as a list.

57
00:04:53.730 --> 00:04:58.330
And so from here, under all,

58
00:04:59.900 --> 00:05:05.070
what we're going to do is we're going to

59
00:05:06.440 --> 00:05:12.970
make a call this.http.get and

60
00:05:12.970 --> 00:05:19.050
you can see here, it's looking for
some bit of information.

61
00:05:19.050 --> 00:05:25.770
Because this is a simple get,
we need essentially to pass in a URL.

62
00:05:25.770 --> 00:05:29.612
So if we go back into our browser,

63
00:05:29.612 --> 00:05:35.943
I think I had localhost
3000 in this case courses.

64
00:05:35.943 --> 00:05:41.420
And there are some things you can do
around this but we'll start nice and easy.

65
00:05:43.060 --> 00:05:49.430
I'm just going to do CONST BASE_URL.

66
00:05:49.430 --> 00:05:54.670
Typically, I would add this to
like an environment config file.

67
00:05:56.490 --> 00:06:02.420
And so this is the the base URL, and
that's not uppercase, there we go.

68
00:06:03.780 --> 00:06:09.231
And then what I'm going
to do here is we're

69
00:06:09.231 --> 00:06:14.130
just gonna add in

70
00:06:14.130 --> 00:06:18.300
a property called model and
we're dealing with courses.

71
00:06:18.300 --> 00:06:21.370
So this is an endpoint for
the courses data model.

72
00:06:24.130 --> 00:06:29.164
And so what we can do now is we can

73
00:06:29.164 --> 00:06:37.695
construct this URL using base URL and
this.model.

74
00:06:40.652 --> 00:06:45.795
Now, when I call this all,
what it's going to do is it's

75
00:06:45.795 --> 00:06:52.240
going to make an HTTP call and
then it's going to return an observable.

76
00:06:53.460 --> 00:06:58.580
So an observable is very much
like a promise, except that

77
00:06:58.580 --> 00:07:03.210
instead of getting one value,
it gets many, many values.

78
00:07:03.210 --> 00:07:05.170
And I absolutely love observables,

79
00:07:06.390 --> 00:07:09.946
this could be an entire
frontend master's course.

80
00:07:09.946 --> 00:07:13.799
Wait, it is Jafar saying hi five,
that changed my life and so

81
00:07:13.799 --> 00:07:18.802
there's a lot of power, there's a lot
of things you can do with observables.

82
00:07:18.802 --> 00:07:23.780
I'm not going to have time
to get into all of them.

83
00:07:23.780 --> 00:07:29.320
But do know that I think one of the other
things that Angular got, right really,

84
00:07:29.320 --> 00:07:34.730
really right is by baking
observables into the framework,

85
00:07:34.730 --> 00:07:41.020
making it very easy to be reactive because
observables when something changes

86
00:07:41.020 --> 00:07:47.190
at the origination point, it pushes it
out to anything that is consuming it.

87
00:07:47.190 --> 00:07:50.860
And so maybe if we have time,
I may talk about that a bit more.

88
00:07:50.860 --> 00:07:55.790
But for now just know that sort of
a promise, you're getting an observable.

89
00:07:55.790 --> 00:08:02.380
So if I go back to my courses component,

90
00:08:02.380 --> 00:08:09.660
now when we call this courses service,

91
00:08:09.660 --> 00:08:14.820
what we're going to get is
a promise that we have to

92
00:08:15.930 --> 00:08:19.770
Resolve, so I can go .subscribe.

93
00:08:19.770 --> 00:08:26.390
And then from here I can go courses,

94
00:08:26.390 --> 00:08:34.360
this.courses = courses, all right?

95
00:08:34.360 --> 00:08:36.643
So let's save this.

96
00:08:39.160 --> 00:08:42.844
And let's see if indeed,

97
00:08:50.285 --> 00:08:55.380
Let's see if I get this right,
I love this keyboard, there we go.

98
00:08:55.380 --> 00:09:01.470
So one thing I'm noticing in the template,
I'll fix certainly not a deal breaker,

99
00:09:01.470 --> 00:09:05.780
but I somehow have duplicated that line,
all right?

100
00:09:05.780 --> 00:09:11.644
So if we go back to our component here,

101
00:09:11.644 --> 00:09:18.320
refresh this, and we're seeing that it's
loading, I think everything is okay.

102
00:09:18.320 --> 00:09:21.950
Let's look in the Network tab,
let's do this one more time.

103
00:09:23.780 --> 00:09:30.675
And hopefully, what you'll see here
is that we now have courses and

104
00:09:30.675 --> 00:09:37.620
it's doing a get request and
calling courses.

105
00:09:37.620 --> 00:09:43.043
And then you can see
the response here is that it's

106
00:09:43.043 --> 00:09:47.770
returning the object from the endpoint.

107
00:09:49.410 --> 00:09:54.311
The thing I like about RST
by the way is that it is

108
00:09:54.311 --> 00:09:59.107
pretty conventional, so let's do create.

109
00:10:01.342 --> 00:10:04.672
Now when you create,

110
00:10:04.672 --> 00:10:10.222
you can do return this dot HTTP, for

111
00:10:10.222 --> 00:10:17.530
create I use post and
we'll use the same URL.

112
00:10:17.530 --> 00:10:22.870
Now, what's interesting
is my muscle memory,

113
00:10:22.870 --> 00:10:26.340
my spidey sense, is going off.

114
00:10:26.340 --> 00:10:33.250
And it's saying,
you just duplicated this, like what's up?

115
00:10:33.250 --> 00:10:37.210
And so at this point, I'd go here,

116
00:10:37.210 --> 00:10:41.975
private getUrl, And

117
00:10:41.975 --> 00:10:47.802
return, This.

118
00:10:47.802 --> 00:10:54.625
And so this is a way for
me to not have to duplicate this code.

119
00:10:57.742 --> 00:11:01.626
I think now when I find myself
typing something more than once,

120
00:11:01.626 --> 00:11:06.609
especially in the same class, so that's
where I kind of draw the line is there's

121
00:11:06.609 --> 00:11:10.130
there's three convention and duplication.

122
00:11:10.130 --> 00:11:13.430
In this case,
it was very much duplication.

123
00:11:14.920 --> 00:11:19.620
And then what I also need to send
is the payload which is course,

124
00:11:19.620 --> 00:11:24.320
so when we create the course then

125
00:11:26.000 --> 00:11:32.720
it's going to also send as that URL, it's
going to pass the payload over the wire.

126
00:11:32.720 --> 00:11:36.339
So now, if we go here and,

127
00:11:39.232 --> 00:11:44.204
I'm just gonna go, subscribe,
and let's just see

128
00:11:44.204 --> 00:11:49.180
what this is cuz I'm not for
sure what exactly it is.

129
00:11:49.180 --> 00:11:53.600
And so this would depend on whatever
server using whatever server you are using

130
00:11:53.600 --> 00:11:57.000
what the result could be,
I've seen it vary.

131
00:11:57.000 --> 00:12:02.543
So console.log, COURSE CREATED.

132
00:12:08.930 --> 00:12:14.909
Result, okay, so of course created and
let's dump out the result.

133
00:12:18.150 --> 00:12:24.979
So in our application, we'll go,

134
00:12:35.280 --> 00:12:40.430
Ryan is a demigod,
that was a really good course by the way,

135
00:12:40.430 --> 00:12:43.520
0% and let me pull up the console.

136
00:12:43.520 --> 00:12:50.330
Submit and course created.

137
00:12:50.330 --> 00:12:57.130
Now, if we look at the Network tab,
preview so this is over the wire,

138
00:12:57.130 --> 00:13:03.020
what we're sending is title,
all the stuff,

139
00:13:03.020 --> 00:13:08.950
etc and you'll notice that up
at the top This is a post.

140
00:13:08.950 --> 00:13:14.220
Now, the response is we now have an ID.

141
00:13:15.530 --> 00:13:21.450
And so that's where I delineate
between a new component or

142
00:13:21.450 --> 00:13:24.470
something I need to create or
something I need to update.

143
00:13:25.970 --> 00:13:33.330
And so now one thing, we've created this,
but it still doesn't exist.

144
00:13:33.330 --> 00:13:36.871
So there's a couple different
ways that you can handle this.

145
00:13:36.871 --> 00:13:42.850
You can do optimistic or
pessimistic loading.

146
00:13:42.850 --> 00:13:47.748
And so for instance, you can say I'm
not going to update the UI until I'm

147
00:13:47.748 --> 00:13:50.811
certain that this operation has completed.

148
00:13:50.811 --> 00:13:54.528
You can do optimistic loading or
an optimistic operation or

149
00:13:54.528 --> 00:14:00.530
say I'm going to update the UI, which is
a better, more responsive user experience.

150
00:14:00.530 --> 00:14:07.440
But if something goes wrong, then you have
to figure out how to go kind of undo that.

151
00:14:07.440 --> 00:14:15.829
So what I'm going to do is I'm going
to do probably the easiest thing,

152
00:14:15.829 --> 00:14:20.096
and that is when this is completed,

153
00:14:20.096 --> 00:14:26.087
all I do is I just rehydrate
the data structure in.

154
00:14:26.087 --> 00:14:30.687
In I think for very small data set,
this is fine or

155
00:14:30.687 --> 00:14:35.739
something is basically is
changing a lot of the server

156
00:14:35.739 --> 00:14:40.020
you kind of need to
redehydrate that anyway.

157
00:14:40.020 --> 00:14:45.373
So now,
I could see here like core services

158
00:14:45.373 --> 00:14:49.844
all I kind of need to use this again.

159
00:14:49.844 --> 00:14:53.779
So what I'll do is we'll
extract this into or

160
00:14:53.779 --> 00:14:59.269
extract this rather,
I guess abstract would probably work and

161
00:14:59.269 --> 00:15:04.780
we're going to create a load
courses method and boom water ta.

162
00:15:04.780 --> 00:15:13.190
Now, what I'll do up here
is this.loadcourses, cool.

163
00:15:13.190 --> 00:15:19.050
And now,
because I've extracted that method,

164
00:15:19.050 --> 00:15:24.979
I can now come down here and
just say load courses.

165
00:15:28.590 --> 00:15:29.810
What is this?

166
00:15:34.100 --> 00:15:38.460
There we go, okay,
now let's try this one more time.

167
00:15:41.180 --> 00:15:46.140
Over here, refresh,
I think we're good, it does exist.

168
00:15:46.140 --> 00:15:49.709
And so let's create a new one.

169
00:15:52.910 --> 00:15:54.677
What's the last course I watched?

170
00:15:58.012 --> 00:16:02.500
Do GraphQL for the masses.

171
00:16:03.890 --> 00:16:09.664
This was Scott Moss is the boss,
I'm sure he's never heard that.

172
00:16:09.664 --> 00:16:15.110
And we'll submit, and

173
00:16:15.110 --> 00:16:20.970
notice, ta-da,
hopefully we captured this, we did.

174
00:16:20.970 --> 00:16:21.752
Let me do it again,

175
00:16:26.371 --> 00:16:30.994
We'll do Creating a Course Empire,

176
00:16:30.994 --> 00:16:35.473
we'll call this Learning Empire.

177
00:16:39.912 --> 00:16:47.702
Mark G, gets it done, All right?

178
00:16:47.702 --> 00:16:53.442
So now, there we go.

179
00:16:53.442 --> 00:16:59.627
So we sent it over the wire,
but then once I completed,

180
00:16:59.627 --> 00:17:05.550
then we went and
we got the rest of it, so there we go.

181
00:17:06.600 --> 00:17:12.111
So on that note, I think we can infer on

182
00:17:12.111 --> 00:17:19.340
some level what it would take to finish,
create, read.

183
00:17:19.340 --> 00:17:25.037
So we've done, read and create,
what it would take to do update,

184
00:17:25.037 --> 00:17:28.100
and delete?

185
00:17:28.100 --> 00:17:32.820
And as well,
there's a little bit of an issue here

186
00:17:32.820 --> 00:17:36.750
that I'm going to challenge everybody
to think about how would I solve this?

187
00:17:36.750 --> 00:17:44.280
Notice I created this course, but
it's still selected over here.

188
00:17:45.330 --> 00:17:46.160
How would we fix that?

189
00:17:46.160 --> 00:17:50.830
So let me check in what I have

190
00:17:52.790 --> 00:17:55.290
and then we will do a challenge.

