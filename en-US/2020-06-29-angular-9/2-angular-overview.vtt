WEBVTT

1
00:00:00.120 --> 00:00:05.029
Once this is running,
if you go to localhost:4200,

2
00:00:05.029 --> 00:00:07.843
you have this application here.

3
00:00:07.843 --> 00:00:09.403
And we kind of have two or

4
00:00:09.403 --> 00:00:13.860
three main things happening that
we're going to build out today.

5
00:00:13.860 --> 00:00:21.610
The thing that really what we're
gonna focus on, is the courses view.

6
00:00:21.610 --> 00:00:26.520
And so this is a master detail view,
which I believe is the most fundamental

7
00:00:26.520 --> 00:00:28.680
design interface when you're
building an application.

8
00:00:28.680 --> 00:00:33.936
So when you learn a new JavaScript
framework, or you're evaluating it,

9
00:00:33.936 --> 00:00:39.304
what is kind of the quintessential
Hello World of JavaScript frameworks?

10
00:00:39.304 --> 00:00:43.305
Well, it's the to do list,
which is a master detail view.

11
00:00:43.305 --> 00:00:46.686
So the idea is you have a list of items or

12
00:00:46.686 --> 00:00:51.800
a collection that you can then select and
manipulate.

13
00:00:51.800 --> 00:00:55.082
And so
when I'm working with new developers,

14
00:00:55.082 --> 00:01:00.469
is once they have a strong understanding
how to build a master detail view and

15
00:01:00.469 --> 00:01:05.012
how to communicate with a server,
really what's left is how do I

16
00:01:05.012 --> 00:01:09.918
handle the business logic that is
specific to that business domain.

17
00:01:09.918 --> 00:01:13.808
So we're going to be building
this out throughout the day.

18
00:01:13.808 --> 00:01:18.700
The other piece is we just have a home
route with just another component.

19
00:01:18.700 --> 00:01:22.024
And then at the end of the day,
towards the end of the day,

20
00:01:22.024 --> 00:01:25.704
we'll talk about routing, but
we just have this login route.

21
00:01:25.704 --> 00:01:29.270
You can just put anything in here,
we're not really doing anything.

22
00:01:29.270 --> 00:01:33.640
And then it just routes back into
kind of the main application.

23
00:01:33.640 --> 00:01:37.532
So this is what we're
going to be building.

24
00:01:37.532 --> 00:01:40.934
And on the flip side,

25
00:01:40.934 --> 00:01:45.852
I'm going to just close this.

26
00:01:45.852 --> 00:01:52.636
And then I'm going to git
checkout 00-start and

27
00:01:52.636 --> 00:01:58.650
so this is going to put
us on the start branch.

28
00:01:58.650 --> 00:02:03.000
So the one thing I'm going to
do is I'm just going to hop in.

29
00:02:04.830 --> 00:02:07.605
And I feel like I could probably do
this way faster from the command line,

30
00:02:07.605 --> 00:02:13.030
but, Just discard that package-lock.json.

31
00:02:13.030 --> 00:02:16.350
All right, so let's switch to this branch.

32
00:02:16.350 --> 00:02:18.360
And then, I'm going to run this again.

33
00:02:18.360 --> 00:02:19.951
So npm run server:all.

34
00:02:22.211 --> 00:02:24.897
And it's gonna pretty
much do the same thing.

35
00:02:24.897 --> 00:02:29.607
But what we're going to see is a really
a simplified application that we're

36
00:02:29.607 --> 00:02:31.380
going to be building off of.

37
00:02:31.380 --> 00:02:34.580
So this is just getting started.

38
00:02:34.580 --> 00:02:37.690
This is kind of some of
the stuff that we need to know.

39
00:02:37.690 --> 00:02:39.419
And you'll notice that as well,

40
00:02:39.419 --> 00:02:42.330
that we didn't see all those
modules being generated.

41
00:02:42.330 --> 00:02:46.687
So one thing Angular has really tried
to do is get smarter about how they're

42
00:02:46.687 --> 00:02:47.391
building.

43
00:02:47.391 --> 00:02:51.540
Because any non-trivial
framework can get pretty large.

44
00:02:51.540 --> 00:02:56.896
So if I go back to the browser here,
let me just refresh.

45
00:02:56.896 --> 00:03:00.533
You'll notice that there is
the placeholders here, but

46
00:03:00.533 --> 00:03:01.980
nothing else is here.

47
00:03:01.980 --> 00:03:10.620
So this is kind of where we're going to be
starting once we start to build this out.

48
00:03:10.620 --> 00:03:15.966
But let's take a small detour and
let's talk about

49
00:03:15.966 --> 00:03:21.558
the kind of the main pieces
as it pertains to Angular,

50
00:03:21.558 --> 00:03:25.801
and let's just set kind of the context.

51
00:03:25.801 --> 00:03:28.105
So this is the app.

52
00:03:28.105 --> 00:03:29.973
And I'm gonna skip through
a bunch of these slides.

53
00:03:29.973 --> 00:03:34.259
What I do wanna talk about is,
in kind of the intro,

54
00:03:34.259 --> 00:03:40.143
there's a couple developers here
in the Zoom call, they are 1.x and

55
00:03:40.143 --> 00:03:46.596
they're moving to to Angular,
to the latest version of Angular.

56
00:03:46.596 --> 00:03:51.221
And with Angular 1.x, the kind of the main

57
00:03:51.221 --> 00:03:56.096
core components in a very
simplified view is,

58
00:03:56.096 --> 00:04:00.228
you have approximately eight of them.

59
00:04:00.228 --> 00:04:05.073
So you have your module,
you have config, you have routes,

60
00:04:05.073 --> 00:04:09.350
controller, scope, view,
service, directive.

61
00:04:09.350 --> 00:04:12.703
I'm very much trying to forget
that part of the Angular.js.

62
00:04:12.703 --> 00:04:19.790
It was very good at the time, but
in Angular, it's really simplified.

63
00:04:19.790 --> 00:04:24.664
And so I'm going to be spending
also intentionally a lot of

64
00:04:24.664 --> 00:04:29.638
time today trying to,
instead of increasing complexity,

65
00:04:29.638 --> 00:04:34.810
instead of showing new,
really cool shiny things, is really

66
00:04:34.810 --> 00:04:40.893
trying to just reduce things into
the simplest possible form that I can.

67
00:04:40.893 --> 00:04:46.542
Because once you start to understand the
fundamental and underlying patterns that

68
00:04:46.542 --> 00:04:52.410
exist, it's very easy not only to pick up
Angular, but to pick up other frameworks.

69
00:04:52.410 --> 00:04:56.580
And so a lot of even what I'm talking
about, though the semantics and

70
00:04:56.580 --> 00:05:01.120
the syntax may be different,
the principles are going to be the same.

71
00:05:01.120 --> 00:05:05.260
And I'm going to try to
call those out where I can.

72
00:05:05.260 --> 00:05:06.940
And I think that's really
where the real value is.

73
00:05:06.940 --> 00:05:11.390
It's not that we're learning just
a specific version of Angular, but

74
00:05:11.390 --> 00:05:15.323
we're learning how to build
well architected applications,

75
00:05:15.323 --> 00:05:18.601
regardless of the version or
even of the framework.

76
00:05:18.601 --> 00:05:23.266
So the simplified big picture is,
you have a module,

77
00:05:23.266 --> 00:05:29.240
you have routes, you have components and
you have services.

78
00:05:29.240 --> 00:05:32.500
And that is, I would say,

79
00:05:32.500 --> 00:05:37.400
there are a few exceptions to this,
but it's very, very rare.

80
00:05:39.250 --> 00:05:43.590
And so as we walk through this, at the end
of the day, if you understand well, okay,

81
00:05:43.590 --> 00:05:45.080
this is what a module does.

82
00:05:45.080 --> 00:05:49.270
It's fundamentally
an organizational mechanism.

83
00:05:49.270 --> 00:05:50.670
This is what a route does.

84
00:05:50.670 --> 00:05:54.160
It's if I live in Phoenix, and

85
00:05:54.160 --> 00:05:59.370
if you say Phoenix, most of the time
people are referring to Phoenix Metro, but

86
00:05:59.370 --> 00:06:02.690
Phoenix is actually made up
of a bunch of smaller cities.

87
00:06:02.690 --> 00:06:05.740
So you would say, well,
where at in Phoenix do you live at?

88
00:06:05.740 --> 00:06:07.060
Well, I live in Peoria.

89
00:06:08.220 --> 00:06:11.780
And so, I think of,
if you look at an application, it's, well,

90
00:06:11.780 --> 00:06:14.490
what part of the application
does this exist in?

91
00:06:14.490 --> 00:06:18.860
And a well organized application
will have very kind of a logical,

92
00:06:18.860 --> 00:06:23.530
intuitive way that it's organized and
this happens via modules.

93
00:06:23.530 --> 00:06:28.830
And then if I said, well, I need to go
to Chandler, well how do you get there?

94
00:06:28.830 --> 00:06:31.053
And so routes are really, I think,

95
00:06:31.053 --> 00:06:34.553
just a way to navigate from
one kind of state to another.

96
00:06:34.553 --> 00:06:39.140
Components, just a fundamental
building block of Angular.

97
00:06:39.140 --> 00:06:45.554
And Angular is certainly a
component-centric framework at this point.

98
00:06:45.554 --> 00:06:48.760
We'll talk a little bit more about
that and a bunch of an architecture.

99
00:06:48.760 --> 00:06:54.042
And then you have services,
which in my opinion

100
00:06:54.042 --> 00:07:00.392
really shoulders the heavy
lifting of the application.

101
00:07:00.392 --> 00:07:02.710
And so I'll also talk about
that a little bit more.

