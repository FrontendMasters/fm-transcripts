WEBVTT

1
00:00:00.160 --> 00:00:01.420
Let's generate a component.

2
00:00:01.420 --> 00:00:06.210
Let's just see what that looks like and
just generate a couple things and

3
00:00:06.210 --> 00:00:08.370
just see kind of these major pieces.

4
00:00:08.370 --> 00:00:11.900
And then we'll get into
component fundamentals.

5
00:00:13.615 --> 00:00:15.120
Where I think probably
we'll take a break and

6
00:00:15.120 --> 00:00:16.390
then we'll get into
component fundamentals.

7
00:00:16.390 --> 00:00:21.640
So one of the nice things about the,

8
00:00:23.190 --> 00:00:28.530
CLI, is that, you can generate,
almost anything.

9
00:00:29.670 --> 00:00:34.530
And, I think it's important,
to use the generator, but also,

10
00:00:34.530 --> 00:00:39.430
I would just encourage you, if you're new,
to Angular, don't use that as a crutch.

11
00:00:39.430 --> 00:00:41.730
And so, it's like somebody saying,

12
00:00:41.730 --> 00:00:46.990
I know JavaScript really well,
what do you use jQuery?

13
00:00:46.990 --> 00:00:49.532
Well, you can understand jQuery
without understanding JavaScript.

14
00:00:49.532 --> 00:00:53.560
Right even, I'm a web developer,
what do you do?

15
00:00:53.560 --> 00:00:56.250
WordPress and
what they mean to say install WordPress.

16
00:00:56.250 --> 00:01:01.900
And so, don't let the COI give you
a superficial understanding or

17
00:01:01.900 --> 00:01:05.320
a shallow understanding of
what's actually happening.

18
00:01:05.320 --> 00:01:11.120
So, I'm going to use the CLI but
really take the time to understand,

19
00:01:11.120 --> 00:01:13.498
why are these pieces here and
what are they doing?

20
00:01:13.498 --> 00:01:20.330
So let's do a new component.

21
00:01:20.330 --> 00:01:26.610
And I'm going to, so
you can do this longhand.

22
00:01:26.610 --> 00:01:28.400
So I can do anti generate component.

23
00:01:29.590 --> 00:01:32.200
And I'm just gonna go items.

24
00:01:33.840 --> 00:01:37.010
And I'm gonna use the D flag.

25
00:01:37.010 --> 00:01:39.510
And so what this means is dry run.

26
00:01:39.510 --> 00:01:43.450
So a lot of times, maybe I just,
I get the file structure wrong or

27
00:01:43.450 --> 00:01:45.270
I wanna generate into something and
I mess it up.

28
00:01:45.270 --> 00:01:50.459
So by using the D flag is
it's going to give you

29
00:01:50.459 --> 00:01:55.387
output without actually doing anything.

30
00:01:55.387 --> 00:02:04.330
So this is just a really really nice
way to just measure twice, cut once.

31
00:02:04.330 --> 00:02:10.002
Right so I'm going to generate a new
component, and I'm gonna call it items.

32
00:02:14.792 --> 00:02:19.433
And so you notice here,
four files, style HTML,

33
00:02:19.433 --> 00:02:24.740
your spec and your component or
your TypeScript class.

34
00:02:24.740 --> 00:02:27.620
So you're just gonna see this over and
over.

35
00:02:27.620 --> 00:02:30.390
So once you get that, it's easy.

36
00:02:30.390 --> 00:02:31.700
It's consistent.

37
00:02:31.700 --> 00:02:35.520
And what it's also done is
it's updated the app module.

38
00:02:35.520 --> 00:02:36.560
And so this is where I wanna step in.

39
00:02:36.560 --> 00:02:38.763
And I want to talk about
what's happening here.

40
00:02:45.811 --> 00:02:51.159
And close this all down and
If we look in the app module,

41
00:02:51.159 --> 00:02:55.710
there's a few things
that I want to point out.

42
00:02:57.850 --> 00:03:01.530
And that is two I think
really important things.

43
00:03:01.530 --> 00:03:05.959
So, one we generated an item's component.

44
00:03:07.280 --> 00:03:14.250
Well, what it's done is in the app module
within this empty module block here.

45
00:03:14.250 --> 00:03:18.750
And so this is just essentially
taking this class here.

46
00:03:18.750 --> 00:03:25.260
And it's decorating this with metadata and
it's saying, this class is a module.

47
00:03:25.260 --> 00:03:31.541
And I want to within this
module declare two components.

48
00:03:31.541 --> 00:03:37.570
So app component was generated, we
generated the app, but we also generated

49
00:03:37.570 --> 00:03:43.440
items component and so it's adding that
to essentially this module container and

50
00:03:43.440 --> 00:03:46.830
saying this is now available for
this application.

51
00:03:49.240 --> 00:03:52.870
As well is we're importing
some additional modules.

52
00:03:52.870 --> 00:03:55.740
So browser module, app routing module,

53
00:03:55.740 --> 00:03:59.190
which has our routes, and
the browser animations module.

54
00:04:00.510 --> 00:04:04.720
Now, one other piece here,
just you'll know this once and

55
00:04:04.720 --> 00:04:06.800
you'll never have to touch it again.

56
00:04:06.800 --> 00:04:10.690
But the question is just like how
does your application actually start?

57
00:04:10.690 --> 00:04:12.650
Like, how does that work?

58
00:04:12.650 --> 00:04:17.560
And so you'll notice here
in our top level module, in

59
00:04:17.560 --> 00:04:22.830
this module configuration object,
we have a bootstrap property.

60
00:04:22.830 --> 00:04:27.785
And it's a bootstrap app component.

61
00:04:27.785 --> 00:04:32.710
And so with App module being at
the top level module or the container,

62
00:04:32.710 --> 00:04:39.004
when the spins up, it's saying I'm
going to bootstrap app component.

63
00:04:39.004 --> 00:04:41.860
And so,

64
00:04:41.860 --> 00:04:46.660
if you go to the root of this project or I
think just write the route of source here.

65
00:04:47.930 --> 00:04:53.275
We just collapse that is

66
00:04:53.275 --> 00:04:58.730
you have this main TS.

67
00:04:58.730 --> 00:05:02.490
And so
we won't need to get into this at all.

68
00:05:02.490 --> 00:05:07.740
But this we're saying for the browser,
I want to bootstrap this module.

69
00:05:07.740 --> 00:05:10.842
And so this is what kicks this off.

70
00:05:10.842 --> 00:05:16.540
And from here,
just in your index dot HTML,

71
00:05:16.540 --> 00:05:19.471
we have this app root.

72
00:05:19.471 --> 00:05:22.864
So this is what's actually adding
that component to the stage and

73
00:05:22.864 --> 00:05:25.820
then everything else attaches to that.

74
00:05:25.820 --> 00:05:32.140
And so, just to kind of lock this down
where I'm going is you have a module,

75
00:05:32.140 --> 00:05:37.480
which holds information about
the things that you wanna put into it,

76
00:05:37.480 --> 00:05:40.880
other modules, components, services, etc.

77
00:05:40.880 --> 00:05:46.610
And then for the top level module we're
just saying when we start the application,

78
00:05:46.610 --> 00:05:50.700
we want to bootstrap and
this is the entry point for that.

79
00:05:51.860 --> 00:05:57.040
And so
now it takes this app component, which

80
00:05:57.040 --> 00:06:02.920
if we step into here you can see there's
all this HTML needs different things well,

81
00:06:02.920 --> 00:06:07.260
that then captures that via
the selector and renders it.

82
00:06:07.260 --> 00:06:11.030
And so
I'm starting to get into what I would,

83
00:06:11.030 --> 00:06:14.960
what I'm gonna talk about
in the next module.

84
00:06:14.960 --> 00:06:20.449
But it's important to
understand that you have

85
00:06:21.480 --> 00:06:26.100
a module, which is denoted by mg module

86
00:06:27.820 --> 00:06:33.140
that defines how Angular is
supposed to be configured.

87
00:06:33.140 --> 00:06:36.770
And so you're telling Angular,
when this compiles,

88
00:06:36.770 --> 00:06:38.809
these are the things you
need to be aware of.

89
00:06:40.340 --> 00:06:44.100
Now there's one other thing
that I want to call out.

90
00:06:44.100 --> 00:06:48.290
That is slightly confusing is that,

91
00:06:50.620 --> 00:06:54.090
what do we have up here
at the top of the page?

92
00:06:55.390 --> 00:06:58.738
Well, these are also modules.

93
00:06:58.738 --> 00:07:05.750
But these are ES6 essential modules.

94
00:07:05.750 --> 00:07:09.820
And so, you have kind of two
parallel module systems happening.

95
00:07:09.820 --> 00:07:12.560
And it's really easy
sometimes to where it's like,

96
00:07:12.560 --> 00:07:14.740
how come Angular can't find this thing?

97
00:07:14.740 --> 00:07:18.590
I've attached it here at
the framework level, but

98
00:07:18.590 --> 00:07:22.830
you haven't surfaced it
at the language level so

99
00:07:22.830 --> 00:07:26.840
that it can actually be
built into your application.

100
00:07:26.840 --> 00:07:31.980
And so it's really, really important
if you're new to Angular to understand

101
00:07:31.980 --> 00:07:36.920
that you have two parallel kind
of module systems happening.

102
00:07:36.920 --> 00:07:43.100
So one is at the language level which
is just ES6 and above, so ESNext.

103
00:07:43.100 --> 00:07:46.410
And that's used for
actually managing your source code.

104
00:07:46.410 --> 00:07:52.100
But then you also have mg module,
which is used

105
00:07:52.100 --> 00:07:57.320
for managing and
configuring your Angular application.

