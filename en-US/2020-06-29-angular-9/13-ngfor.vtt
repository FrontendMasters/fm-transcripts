WEBVTT

1
00:00:01.340 --> 00:00:03.240
So let's take this whole component.

2
00:00:03.240 --> 00:00:11.390
And I'm just going to get
rid of all of this here.

3
00:00:12.760 --> 00:00:14.250
And I think I will leave the title in.

4
00:00:15.880 --> 00:00:22.237
And now let's do something
with these course lessons.

5
00:00:24.569 --> 00:00:29.300
Okay, so now, It's super okay, I guess,

6
00:00:29.300 --> 00:00:32.810
binding to a single property or
calling a method.

7
00:00:32.810 --> 00:00:37.430
But what happens when you actually
need to lay something out on the page?

8
00:00:37.430 --> 00:00:41.490
And Angular has a number of,

9
00:00:45.164 --> 00:00:50.616
Essentially directives or
structural directives that will allow

10
00:00:50.616 --> 00:00:57.320
you to kind of manipulate the DOM based on
the data structure that you bind it to.

11
00:00:57.320 --> 00:01:04.259
And so, I think, the most useful one,
right out of the gates is ngFor.

12
00:01:04.259 --> 00:01:09.429
And so
if we go back to our courseLessons here,

13
00:01:09.429 --> 00:01:12.930
we have all of these lessons.

14
00:01:12.930 --> 00:01:15.933
And I would like to lay them out, and

15
00:01:15.933 --> 00:01:20.150
lay these out on a page,
and do something with it.

16
00:01:20.150 --> 00:01:25.108
So a question that just came in
is what would be the use cases of

17
00:01:25.108 --> 00:01:27.170
two-way data binding?

18
00:01:27.170 --> 00:01:31.520
Typically, the only time you'll
use two-way data binding is

19
00:01:31.520 --> 00:01:33.540
if you're using a template driven form.

20
00:01:33.540 --> 00:01:37.090
So forms, eventually at some point,
you have to mutate data.

21
00:01:37.090 --> 00:01:41.830
If you're doing template driven forms,
that's where that comes in,

22
00:01:41.830 --> 00:01:46.580
is I need to type in a text field, and
I need it to update somewhere else.

23
00:01:46.580 --> 00:01:50.390
So that's where that comes in.

24
00:01:50.390 --> 00:01:52.510
And that's where I use it.

25
00:01:52.510 --> 00:01:57.080
More often than not, you kinda want your
bindings to be really unidirectional and

26
00:01:57.080 --> 00:01:59.830
that data flows down and events flow up.

27
00:01:59.830 --> 00:02:03.610
This is a state management conversation,
which I'm saving for later for

28
00:02:03.610 --> 00:02:05.130
my friend over here.

29
00:02:05.130 --> 00:02:09.360
And we'll talk about that a little bit
more, but really, I only use two-way

30
00:02:09.360 --> 00:02:14.500
data binding if I'm doing a template
driven form, and I need to mutate data.

31
00:02:14.500 --> 00:02:18.580
So all right,
we have this course lessons here and

32
00:02:18.580 --> 00:02:24.200
I would like to lay this out, and
I would like to not have to type

33
00:02:24.200 --> 00:02:28.660
all this code over and over and over.

34
00:02:28.660 --> 00:02:32.330
So I'm gonna hop into the template.

35
00:02:32.330 --> 00:02:37.360
And I'm going to just lay
some boilerplate here.

36
00:02:37.360 --> 00:02:38.918
Let's see if we can get this to render.

37
00:02:38.918 --> 00:02:42.634
All right, and this plugin is super nice

38
00:02:42.634 --> 00:02:47.125
because it basically did
all the heavy lifting.

39
00:02:47.125 --> 00:02:50.604
And so what I'm gonna do is I'm
gonna create a mat list and

40
00:02:50.604 --> 00:02:52.864
I'm going to put list items in here.

41
00:02:52.864 --> 00:02:57.487
And you'll notice that it's
ngFor let item of items, and so

42
00:02:57.487 --> 00:03:03.510
we're going to delete this because
obviously I don't have items.

43
00:03:03.510 --> 00:03:08.190
But what I do have is I
have courseLessons, and

44
00:03:08.190 --> 00:03:13.550
so if I go here, I can say, let lessons

45
00:03:13.550 --> 00:03:18.608
of courseLessons.

46
00:03:18.608 --> 00:03:23.060
And now what this is going to do is,
think of this is just a classic for loop.

47
00:03:23.060 --> 00:03:27.200
It's just going to loop
over courseLessons and

48
00:03:27.200 --> 00:03:32.700
it's going to essentially stamp
out an instance of the template or

49
00:03:32.700 --> 00:03:37.986
the element that it's on for
each of the instances in the collection.

50
00:03:37.986 --> 00:03:42.481
So we'll go, we'll create h3, and

51
00:03:42.481 --> 00:03:47.550
within here, let's go lessons.title.

52
00:03:51.322 --> 00:03:55.800
All right, and I'm going to save this.

53
00:03:56.860 --> 00:03:58.970
All right, so before we look at this,

54
00:03:58.970 --> 00:04:05.150
I have courseLessons and
I'm just looping over this.

55
00:04:06.810 --> 00:04:10.670
And I'm saying stamp
this out on to the page.

56
00:04:10.670 --> 00:04:16.300
And so if we hop over here,
you'll notice that, It's

57
00:04:16.300 --> 00:04:21.530
now laying this out which is
exactly what we would hope.

58
00:04:21.530 --> 00:04:27.681
The upside is, in our template,
we only had to write this once.

59
00:04:27.681 --> 00:04:31.820
Now, let's do something.

60
00:04:31.820 --> 00:04:34.510
So we've looped over it.

61
00:04:36.560 --> 00:04:39.000
Let's take this a step further.

62
00:04:40.060 --> 00:04:43.810
So let's say I want to select a lesson.

63
00:04:43.810 --> 00:04:46.310
So I'm gonna go back to home component.

64
00:04:47.310 --> 00:04:52.055
And I'm going to create a method,
and I'm going to

65
00:04:52.055 --> 00:04:56.840
selectLesson.

66
00:04:56.840 --> 00:04:58.560
And this is going to take a lesson.

67
00:04:59.920 --> 00:05:02.730
And I'm also going to create a property.

68
00:05:02.730 --> 00:05:07.274
And I'm gonna call this currentLesson, and

69
00:05:07.274 --> 00:05:13.621
I'm gonna set this to null for
right now cuz it doesn't exist.

70
00:05:13.621 --> 00:05:18.454
And then from here, we're gonna go this,

71
00:05:18.454 --> 00:05:21.551
currentLesson = lesson.

72
00:05:22.605 --> 00:05:26.914
Okay, and so again properties, methods,

73
00:05:26.914 --> 00:05:32.970
this has very little to do with
Angular until I come over here,

74
00:05:32.970 --> 00:05:36.710
and I want to be able to select lesson.

75
00:05:36.710 --> 00:05:41.057
So let me use click,
this is typically, I think,

76
00:05:41.057 --> 00:05:46.556
the event handler you're gonna
use the most, selectLesson.

77
00:05:46.556 --> 00:05:53.280
And the upside is, and
I'm gonna try something here.

78
00:05:54.890 --> 00:05:59.360
So in the background,
if I go back to my plugins here,

79
00:05:59.360 --> 00:06:03.380
this is gonna be just a slight side way,
it's you'd notice that I have the Angular

80
00:06:03.380 --> 00:06:06.930
language services plugin and
I'll actually post all these.

81
00:06:06.930 --> 00:06:10.680
And so what this does is just
sit in the background and

82
00:06:10.680 --> 00:06:13.850
it gives you some hints as you're typing.

83
00:06:13.850 --> 00:06:16.840
And so it tries to just be helpful.

84
00:06:16.840 --> 00:06:22.340
So it's kind of like the Jarvis of
Angular, but I think I crashed it earlier.

85
00:06:22.340 --> 00:06:28.836
So in VS Code, if you go Cmd + Shift + A,
you can kind of essentially,

86
00:06:28.836 --> 00:06:34.250
it's like your master control panel,
all your lessons.

87
00:06:34.250 --> 00:06:40.622
And so every once in a while if I'm
not getting the kinda the IntelliSense

88
00:06:40.622 --> 00:06:45.637
that I want and
there's no guarantee this is gonna work,

89
00:06:45.637 --> 00:06:52.030
but more often than not, I will just
go and restart the language server.

90
00:06:53.450 --> 00:06:54.910
And so there we go.

91
00:06:54.910 --> 00:06:56.890
So now you'll see lesson and

92
00:06:56.890 --> 00:07:02.100
it's able to introspect into
the component class and see that.

93
00:07:02.100 --> 00:07:08.190
And so here, let me just delete this back
out, if you go selectLesson, there we go.

94
00:07:08.190 --> 00:07:11.480
So I kind of just slipped actually
like kind of a nugget in there without

95
00:07:11.480 --> 00:07:16.910
intending to, is that if you have
the Angular language service installed in

96
00:07:16.910 --> 00:07:24.410
VS Code and it's running, you can
get some really helpful code sense.

97
00:07:24.410 --> 00:07:29.510
So it really streamlines
the development workflow.

98
00:07:29.510 --> 00:07:34.059
In fact, I probably would have got dinged
if I would have actually had this running.

99
00:07:34.059 --> 00:07:39.420
And so click selectLesson,
and we're sending in lesson.

100
00:07:39.420 --> 00:07:43.869
Now one thing I wanna call out here
is that as we're looping over this,

101
00:07:45.260 --> 00:07:50.055
it's creating using let a locally
scoped variable called lesson

102
00:07:50.055 --> 00:07:55.100
that refers to whatever lesson you
happen to be iterating over that time.

103
00:07:55.100 --> 00:08:01.830
And so Angular is smart enough to know
that when I go selectLesson and I pass in

104
00:08:01.830 --> 00:08:08.170
lesson, it knows that whatever I click on,
that's the lesson that I want to send in.

105
00:08:08.170 --> 00:08:10.410
And so I'm gonna save this.

106
00:08:10.410 --> 00:08:18.015
I'm gonna go back into here and
let's go, and I'm just going to,

107
00:08:19.756 --> 00:08:23.960
Just console log this back out.

108
00:08:23.960 --> 00:08:29.880
So console.log('SELECT LESSON FIRED'),
so we can just see it.

109
00:08:30.920 --> 00:08:37.120
And we'll go lesson, save this and
we'll go back into our code.

110
00:08:38.324 --> 00:08:44.353
And if we look in the console, and
I'll kind of zoom this up, as you can see,

111
00:08:44.353 --> 00:08:50.084
as I'm clicking here, There we go.

