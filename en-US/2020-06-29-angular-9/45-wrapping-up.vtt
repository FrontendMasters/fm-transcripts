WEBVTT

1
00:00:00.450 --> 00:00:05.610
Have to feel like there has to be some
questions in the live audience here.

2
00:00:05.610 --> 00:00:11.017
&gt;&gt; What was the difference
between that event emitter

3
00:00:11.017 --> 00:00:16.780
from the Angular core and
events and the other one?

4
00:00:19.280 --> 00:00:22.150
&gt;&gt; So the question is,
what was the difference between

5
00:00:22.150 --> 00:00:25.145
the event emitter from Angular core or
events or even Protractor.

6
00:00:25.145 --> 00:00:29.210
[LAUGH] Unfortunately, it's the same name,
it's a totally different implementation,

7
00:00:29.210 --> 00:00:30.620
and so it just doesn't work.

8
00:00:32.130 --> 00:00:35.640
And so you'll emit this event,
and Angular will go,

9
00:00:35.640 --> 00:00:39.316
I don't know what this is,
and it'll just explode..

10
00:00:39.316 --> 00:00:41.696
Which is embarrassing when you're
trying to do a product demo.

11
00:00:41.696 --> 00:00:43.717
Or something where this should be working,
and

12
00:00:43.717 --> 00:00:47.263
you realize you've done the wrong import,
or just pulled it from the wrong place.

13
00:00:47.263 --> 00:00:51.586
So that's the difference,
is one works and one doesn't.

14
00:00:55.555 --> 00:01:01.495
&gt;&gt; I guess a curiosity thing for
me that you might've touched on already,

15
00:01:01.495 --> 00:01:08.135
but subscribing to observables, is that
a component thing or a service thing?

16
00:01:08.135 --> 00:01:09.872
Is there a preferred place for that?

17
00:01:13.504 --> 00:01:20.038
&gt;&gt; So the question is,
when I subscribe to an observable stream,

18
00:01:20.038 --> 00:01:24.738
is there kind of a preferred
place to do that?

19
00:01:24.738 --> 00:01:32.674
And, There's a couple of things that you
could do that we didn't get to today.

20
00:01:32.674 --> 00:01:38.617
One thing you can do Is you can
actually take an observable stream and

21
00:01:38.617 --> 00:01:43.111
run it right into the template
using an AsyncPipe.

22
00:01:43.111 --> 00:01:48.012
And so generally the general consensus is,
is once you have an observable

23
00:01:48.012 --> 00:01:52.845
stream in your component class,
that you don't unpack it in the class.

24
00:01:52.845 --> 00:01:58.311
You can, but it's actually more
efficient to just put it into your, just

25
00:01:58.311 --> 00:02:05.030
run it right into your template using the
AsyncPipe and it will unwrap it for you.

26
00:02:05.030 --> 00:02:05.590
And so

27
00:02:05.590 --> 00:02:10.500
I think there's a possibility we could
possibly get into like Reactive Angular,

28
00:02:10.500 --> 00:02:13.990
and talk about that where we would
definitely talk about state management.

29
00:02:13.990 --> 00:02:18.612
But that's one of those
things that comes in is,

30
00:02:18.612 --> 00:02:24.942
you can either do it within like
a service that manages that state.

31
00:02:24.942 --> 00:02:27.965
Or if you're piping
the stream into a template,

32
00:02:27.965 --> 00:02:32.771
then you actually run through the
component into the template and unpack it.

33
00:02:32.771 --> 00:02:35.468
So that's kind of where that goes.

34
00:02:35.468 --> 00:02:38.015
I'll either run into the template or

35
00:02:38.015 --> 00:02:42.875
I'll have a specific class that
handles those side effects for that.

36
00:02:42.875 --> 00:02:46.953
So another question that Noah had, and

37
00:02:46.953 --> 00:02:52.144
the question is, so
Noah's learning React, and

38
00:02:52.144 --> 00:02:57.582
he wanted to know,
other than batteries included,

39
00:02:57.582 --> 00:03:02.173
is there anything that sets Angular apart?

40
00:03:02.173 --> 00:03:06.326
So I will say it's a nontrivial detail,

41
00:03:06.326 --> 00:03:13.310
is that you get everything just
packaged up into this single thing.

42
00:03:13.310 --> 00:03:17.460
That's in terms of large-scale
development, that's really, really handy.

43
00:03:17.460 --> 00:03:21.190
The other thing that I
think is important for

44
00:03:21.190 --> 00:03:26.920
Angular Is that one,
observable streams are baked right in.

45
00:03:26.920 --> 00:03:29.600
And so the things that I like most
about Angular actually are not part of

46
00:03:29.600 --> 00:03:31.365
the framework by design.

47
00:03:31.365 --> 00:03:36.290
TypeScript, observable streams are,
I think, really,

48
00:03:36.290 --> 00:03:41.320
really, really powerful, and
I think they're fantastic.

49
00:03:41.320 --> 00:03:46.251
Now, In terms of choosing one
framework over the other,

50
00:03:46.251 --> 00:03:51.261
I find that people that are classically
trained, such as Java or .NET, especially

51
00:03:51.261 --> 00:03:56.640
.NET developers, because Anders,
who created C# also created TypeScript.

52
00:03:56.640 --> 00:04:02.110
Is that if you know C#, it's really
easy to make that leap into TypeScript.

53
00:04:02.110 --> 00:04:06.447
Whereas somebody who has maybe come up
from a JavaScript kind of a background,

54
00:04:06.447 --> 00:04:10.076
some of that structure and
different things is going to be weird.

55
00:04:10.076 --> 00:04:14.953
And so that's where I think it depends
on where are you coming from, and

56
00:04:14.953 --> 00:04:19.080
what is the skill level and
the comfort level of your team?

57
00:04:19.080 --> 00:04:25.180
So in React, for instance,
you abstract everything out of the DOM.

58
00:04:25.180 --> 00:04:29.320
And it's done in JSX, which is really
just a layer on top of JavaScript.

59
00:04:29.320 --> 00:04:32.100
For me,
that feels just a little unnatural.

60
00:04:32.100 --> 00:04:37.315
I think having a DOM is very good for
very specific reasons,

61
00:04:37.315 --> 00:04:41.189
and I don't think you
should throw it away.

62
00:04:41.189 --> 00:04:44.910
But at the same time,
React does a really good job.

63
00:04:44.910 --> 00:04:48.118
And the other thing is like,
what about Vue?

64
00:04:48.118 --> 00:04:52.940
Well, for instance with Angular, it's
kind of all or nothing a lot of times,

65
00:04:52.940 --> 00:04:55.170
it's kind of pre-Elements.

66
00:04:55.170 --> 00:04:57.710
Or Elements are the kind
of the Angular like

67
00:04:57.710 --> 00:04:59.830
native components that you can generate.

68
00:04:59.830 --> 00:05:01.570
And so
I've had situations where it's like,

69
00:05:01.570 --> 00:05:03.800
I just need to update this one
little thing on this page.

70
00:05:03.800 --> 00:05:08.070
Well, I'm not gonna generate an entire
Angular application to do that.

71
00:05:08.070 --> 00:05:10.175
And so that's where I think
Vue comes in really nice,

72
00:05:10.175 --> 00:05:14.180
cuz you can just shoehorn that in and
you get that functionality.

73
00:05:14.180 --> 00:05:18.500
With that said, is I think every
framework in terms of parity, again,

74
00:05:18.500 --> 00:05:23.036
I'm not trying to alienate Amber,
I would say even or even actually Dojo,

75
00:05:23.036 --> 00:05:25.283
which not a lot of people talk about.

76
00:05:25.283 --> 00:05:27.948
But all of these major
frameworks have parity.

77
00:05:27.948 --> 00:05:31.500
And so one is I think not leaps and
bounds ahead of another one,

78
00:05:31.500 --> 00:05:33.769
they all pretty much do the same thing.

79
00:05:33.769 --> 00:05:38.871
It's what are you most comfortable
with and what kind of resonates with

80
00:05:38.871 --> 00:05:43.730
you philosophically and feels right for
you, as well as your team?

81
00:05:47.864 --> 00:05:51.318
Another question here, Camilla asked,

82
00:05:51.318 --> 00:05:57.742
I noticed you weren't using any types
even though we're using TypeScript.

83
00:05:57.742 --> 00:05:59.810
That was purely for velocity.

84
00:05:59.810 --> 00:06:04.030
That was just so that I could get three
days' worth of material into a single day,

85
00:06:04.030 --> 00:06:07.630
which obviously I wasn't quite successful.

86
00:06:07.630 --> 00:06:10.330
But generally given enough time,
I would go back and

87
00:06:10.330 --> 00:06:12.250
create interfaces and custom types.

88
00:06:12.250 --> 00:06:17.360
So just because I didn't do that doesn't
mean I don't or do not believe in it.

89
00:06:17.360 --> 00:06:20.617
And so definitely, if we had
another day to expand on this is,

90
00:06:20.617 --> 00:06:23.764
I would actually go and
create interfaces for everything.

91
00:06:23.764 --> 00:06:25.960
So then as we pass it around,
there's that type safety.

92
00:06:27.420 --> 00:06:31.100
So Jordan asked, when you unit tested,
you mentioned that components that don't

93
00:06:31.100 --> 00:06:35.060
handle logic are solid,
less prone to breaking.

94
00:06:36.060 --> 00:06:39.540
When you have many levels
of logicless components,

95
00:06:39.540 --> 00:06:41.570
how would you go about unit testing them?

96
00:06:42.640 --> 00:06:44.260
That's [LAUGH] a really good question.

97
00:06:44.260 --> 00:06:48.120
So we have a bunch of logicless or
presentation components,

98
00:06:48.120 --> 00:06:49.890
how do we unit test them?

99
00:06:49.890 --> 00:06:54.470
Well, the answer is, you don't.

100
00:06:54.470 --> 00:06:59.166
Now pause, and if somebody just ended
the video and just like, we're done,

101
00:06:59.166 --> 00:07:00.913
he would get the wrong idea.

102
00:07:00.913 --> 00:07:04.736
I believe in really testing
your components, but

103
00:07:04.736 --> 00:07:10.040
by removing units of logic,
you don't have anything to test.

104
00:07:10.040 --> 00:07:13.997
So now you move that burden
into end-to-end testing.

105
00:07:15.130 --> 00:07:19.210
And so you still test it, but
you just don't do it at the unit level.

106
00:07:19.210 --> 00:07:24.550
Instead, you move it to end-to-end, which
then allows you to test whole features and

107
00:07:24.550 --> 00:07:27.520
whole workflows versus
single units of logic.

108
00:07:27.520 --> 00:07:30.560
And that's the other piece,
is that when you unit test,

109
00:07:30.560 --> 00:07:35.620
you really wanna focus on very small,
fine grained pieces of code to test.

110
00:07:35.620 --> 00:07:40.750
Versus just these kind of large things
that you're trying to test, and being

111
00:07:40.750 --> 00:07:46.430
able to just dial in onto a single piece
of logic versus kind of a large thing.

112
00:07:46.430 --> 00:07:49.350
And so I think a lot of times
people approach their unit testing

113
00:07:49.350 --> 00:07:51.370
like they're testing the feature.

114
00:07:51.370 --> 00:07:54.490
And instead of just trying to test
even just a couple lines of code.

115
00:07:54.490 --> 00:07:59.419
So the answer is, you don't unit test it,
but you do end-to-end test it.

116
00:07:59.419 --> 00:08:04.134
And so you just are moving that
burden of validating correctness

117
00:08:04.134 --> 00:08:06.500
further up the chain.

118
00:08:06.500 --> 00:08:10.320
All right, let me see here,
do we have any other questions?

119
00:08:10.320 --> 00:08:14.630
&gt;&gt; How would you go about refactoring
one of those modules to be lazy loaded?

120
00:08:15.900 --> 00:08:19.897
&gt;&gt; If we go into a app-routing.module,

121
00:08:23.709 --> 00:08:28.559
We have courses, so in master,
courses is lazy loaded.

122
00:08:28.559 --> 00:08:35.575
And so if we step in here,
you'll notice that I have a CoursesModule.

123
00:08:36.800 --> 00:08:38.400
And so that's the first thing is you say,

124
00:08:38.400 --> 00:08:41.557
I have this component,
I need to put it in a module.

125
00:08:41.557 --> 00:08:48.166
From here, then when you do the path,
you call loadChildren,

126
00:08:48.166 --> 00:08:52.542
and you essentially import that module.

127
00:08:52.542 --> 00:08:55.975
And then you basically unpack
the CourseModule there.

128
00:08:59.458 --> 00:09:00.562
And so when it goes to this,

129
00:09:00.562 --> 00:09:03.920
essentially what happens is it's
now doing this asynchronous call.

130
00:09:03.920 --> 00:09:07.180
So when you go to courses,
it's saying, I need to import this.

131
00:09:07.180 --> 00:09:13.076
And when it's done, I need to
unpack the CoursesModule module and

132
00:09:13.076 --> 00:09:15.822
make it available to Angular.

133
00:09:17.669 --> 00:09:18.740
Does that make sense?

134
00:09:18.740 --> 00:09:19.380
&gt;&gt; Yep.

135
00:09:23.234 --> 00:09:26.430
&gt;&gt; Yeah, so essentially you're
just treating it as a module.

136
00:09:26.430 --> 00:09:30.320
You're doing an asynchronous call,
which is you can see this .then.

137
00:09:30.320 --> 00:09:33.330
So this is actually returning a promise,
which is a bit odd.

138
00:09:33.330 --> 00:09:38.691
And then it's saying within this module,
go and

139
00:09:38.691 --> 00:09:44.070
unpack this LoginModule or
the CoursesModule.

140
00:09:44.070 --> 00:09:48.770
So here it's just going to grab this and
then make it available.

141
00:09:48.770 --> 00:09:50.750
Thank you so very much for

142
00:09:50.750 --> 00:09:54.480
spending a day with me learning Angular,
it's been awesome.

