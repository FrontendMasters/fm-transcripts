WEBVTT

1
00:00:00.390 --> 00:00:06.017
We're now going to talk about
pretty much I think one of my

2
00:00:06.017 --> 00:00:13.889
all time favorite subjects as a developer
especially as an Angular developer.

3
00:00:13.889 --> 00:00:18.179
And so for
this we are going to use a few slides and

4
00:00:18.179 --> 00:00:23.659
we're going to talk about
Component Driven Architecture.

5
00:00:23.659 --> 00:00:29.297
But first, a little bit of back story,
a brief history of Angular.

6
00:00:29.297 --> 00:00:35.300
So this is not the first time that I've
talked about this in a public forum,

7
00:00:35.300 --> 00:00:42.720
but it's really, really important to
illustrate how we got to where we are now.

8
00:00:42.720 --> 00:00:50.048
And so, when I first discovered
AngularJS I had spent a lot of time,

9
00:00:50.048 --> 00:00:55.975
many, many,
many years doing really Flex and Flash.

10
00:00:55.975 --> 00:01:02.480
And I saw the writing was on the wall,
I wanted to get into JavaScript.

11
00:01:02.480 --> 00:01:08.910
And I became very frustrated
very quickly in the sense that,

12
00:01:08.910 --> 00:01:14.885
say what you want about, I think
the Flash Player, the Flash platform was

13
00:01:14.885 --> 00:01:20.610
a lot of the growing pains they were
going through, we're now experiencing it.

14
00:01:20.610 --> 00:01:24.660
And so there was a lot of
structure a lot of definition.

15
00:01:24.660 --> 00:01:31.060
And then you move into, I'm using
air quotes, a JQuery application,

16
00:01:31.060 --> 00:01:37.062
which is most certainly not unless you
can consider a bowl of spaghetti or

17
00:01:37.062 --> 00:01:40.950
kit kat lasagna as
an application framework.

18
00:01:41.970 --> 00:01:46.740
Then I went to the next big thing, the
major player on the block at that time was

19
00:01:46.740 --> 00:01:54.100
backbone which had no opinions whatsoever,
and then so I was a little frustrated.

20
00:01:54.100 --> 00:01:56.560
And then I discovered AngularJS,

21
00:01:56.560 --> 00:02:00.590
which was magical,
you had this kind of view model paradigm.

22
00:02:00.590 --> 00:02:04.480
And you could write very tiny apps
very quickly with a tiny view and

23
00:02:04.480 --> 00:02:05.550
a tiny controller.

24
00:02:06.640 --> 00:02:11.600
And I became very, very excited about,
in fact, you don't even need a controller

25
00:02:11.600 --> 00:02:16.060
with AngularJS, you just can
actually put something in the view.

26
00:02:16.060 --> 00:02:20.980
So I got excited and I said,
I think I wanna build something ambitious.

27
00:02:20.980 --> 00:02:23.680
And so I went and not only that,
I'd like to get paid for it.

28
00:02:23.680 --> 00:02:28.020
So I went to my employer at the time and
I said, I wanna give this a shot.

29
00:02:28.020 --> 00:02:32.400
And so we started building applications
and they started to grow and

30
00:02:32.400 --> 00:02:39.480
get bigger until this is
what we ended up with,

31
00:02:39.480 --> 00:02:44.260
is this application which really

32
00:02:44.260 --> 00:02:50.390
consisted of a single template and
a single controller.

33
00:02:50.390 --> 00:02:56.630
And it was kind of this, moment because
when you're working on a large team,

34
00:02:56.630 --> 00:03:03.700
or even a team with more than two people,
and you need to work in the same file.

35
00:03:03.700 --> 00:03:06.530
Well, that becomes very problematic
to where you have to start making

36
00:03:06.530 --> 00:03:10.760
deals like okay,
I'm from line zero to 1000.

37
00:03:10.760 --> 00:03:15.320
Don't touch that but
anything over line 1000 you can work on.

38
00:03:15.320 --> 00:03:18.420
It's not a great experience.

39
00:03:18.420 --> 00:03:21.280
And so what 1.x came up with,

40
00:03:21.280 --> 00:03:26.450
really some architecture
opinions started to emerge.

41
00:03:26.450 --> 00:03:31.800
The first one was using named routes
is that you would essentially create,

42
00:03:31.800 --> 00:03:34.660
a router outlet and say this is sidebar.

43
00:03:34.660 --> 00:03:39.690
This is content, this is footer, and then
you would essentially load a template and

44
00:03:39.690 --> 00:03:42.000
a controller into that named route.

45
00:03:42.000 --> 00:03:46.960
So you still have that template controller
pattern, it's just getting broken down.

46
00:03:46.960 --> 00:03:51.640
The other more prevalent one is or
I was actually not as prevalent,

47
00:03:51.640 --> 00:03:56.630
but in hindsight,
is that creating directives or

48
00:03:56.630 --> 00:04:00.870
custom elements that you
could do the same thing.

49
00:04:00.870 --> 00:04:05.545
Which is the precursor for
really any angular application today.

50
00:04:05.545 --> 00:04:08.571
And this is again, hats off to React,

51
00:04:08.571 --> 00:04:13.869
I think they really accelerated
frontend development by leaps and

52
00:04:13.869 --> 00:04:18.790
bounds when they introduce this
component driven components

53
00:04:18.790 --> 00:04:22.840
centric approach to
application development.

54
00:04:22.840 --> 00:04:28.400
Now, what I think is interesting
is the extension of that which

55
00:04:28.400 --> 00:04:35.360
I've started to see a lot more is native
or just basic native web components.

56
00:04:35.360 --> 00:04:39.640
And you can achieve that with Angular,
which I think is really interesting is

57
00:04:39.640 --> 00:04:45.730
that now the idea is, you don't even
have to target a specific framework.

58
00:04:45.730 --> 00:04:48.850
Use whatever framework
you're comfortable with.

59
00:04:48.850 --> 00:04:53.663
And if you compile into a web component,
well then it doesn't matter.

60
00:04:53.663 --> 00:04:56.574
And so I know even one of my friends.

61
00:04:56.574 --> 00:04:59.990
Here is a large application for
a very large company.

62
00:04:59.990 --> 00:05:04.010
And they have React 1.x
Angular components, but

63
00:05:04.010 --> 00:05:07.250
because they're being compiled into
web components, it doesn't matter.

64
00:05:07.250 --> 00:05:11.880
So I really believe that's where
the future of web is going is to

65
00:05:11.880 --> 00:05:16.030
kind of these web components that
are really framework agnostic.

66
00:05:17.700 --> 00:05:22.554
So, this is how every Angular component,

67
00:05:22.554 --> 00:05:27.870
or Angular application
by design is developed,

68
00:05:27.870 --> 00:05:32.680
is that you now break things into
components that have a template.

69
00:05:32.680 --> 00:05:36.710
And now what used to be
a controller is a component class.

70
00:05:36.710 --> 00:05:40.960
And so this helps us solve a couple
of really important problems.

71
00:05:40.960 --> 00:05:43.220
The first one is structure.

72
00:05:44.460 --> 00:05:47.800
How do you structure your application
in a way that's scalable,

73
00:05:48.830 --> 00:05:54.720
that it's portable, that it's stable,
it's extensible, all the ables?

74
00:05:54.720 --> 00:05:59.740
And by breaking things into components,
this helps solve that problem.

75
00:05:59.740 --> 00:06:03.420
The other pieces that helps solve
the problem of communication,

76
00:06:03.420 --> 00:06:07.770
is that when data changes, or

77
00:06:07.770 --> 00:06:11.490
there's a state mutation in your
application, how do you communicate that?

78
00:06:11.490 --> 00:06:14.290
Well, if you have a bunch of components
and they're mishmash together,

79
00:06:14.290 --> 00:06:18.130
it's very hard to reason about this needs
to go here and this needs to go here.

80
00:06:18.130 --> 00:06:24.900
But by having a sane and
clear component hierarchy,

81
00:06:24.900 --> 00:06:29.090
that with a unidirectional data flow,
which I'll talk about just a minute,

82
00:06:29.090 --> 00:06:33.560
that not only solves a structural problem,
but the communication problem.

83
00:06:34.610 --> 00:06:38.380
Make a little mental note of that
because I'm going to come back and

84
00:06:38.380 --> 00:06:44.690
talk about that in kind of a tada,
kind of a moment here.

85
00:06:44.690 --> 00:06:49.760
So, with that said, the idea

86
00:06:49.760 --> 00:06:55.110
is to break things into kind of
these self encapsulated components

87
00:06:56.400 --> 00:06:59.660
that handle like a single
piece of functionality.

88
00:07:00.730 --> 00:07:04.280
And so the question I want to ask is,

89
00:07:05.490 --> 00:07:08.510
we've played around with event binding
we've played around with property binding.

90
00:07:10.790 --> 00:07:16.170
But what if we had the ability
to create a component and

91
00:07:16.170 --> 00:07:23.890
define our own custom properties that we
could bind to, and our own custom events?

92
00:07:23.890 --> 00:07:27.960
So this is where when you're
talking about really components,

93
00:07:27.960 --> 00:07:33.360
it the introductory level,
property binding is not that interesting.

94
00:07:33.360 --> 00:07:36.870
But what if you had a child component

95
00:07:36.870 --> 00:07:40.570
that you could define a custom
property to pass data into?

96
00:07:41.950 --> 00:07:46.531
And so what if we could define custom
properties and events to bind to?

97
00:07:46.531 --> 00:07:53.982
Well, we can and
that's in the form of inputs and outputs.

98
00:07:53.982 --> 00:08:01.659
And so you can pass data into a child
component via its template via an input.

99
00:08:01.659 --> 00:08:10.950
You can capture the output of a child
component via an event or a custom output.

100
00:08:10.950 --> 00:08:15.990
And so, when you have an Angular
application in a child and

101
00:08:15.990 --> 00:08:21.320
a parent exist, we have a parent
then you have a child component.

102
00:08:21.320 --> 00:08:24.920
Where is the surface area that they exist?

103
00:08:24.920 --> 00:08:27.520
How do we get a component onto the page.

104
00:08:27.520 --> 00:08:31.146
Well, we use the selector.

105
00:08:31.146 --> 00:08:36.660
And so this selector of the child
component lives in the parents template.

106
00:08:36.660 --> 00:08:39.770
And so that's where they kind of

107
00:08:39.770 --> 00:08:42.350
intersect where that they
bought up against each other.

108
00:08:42.350 --> 00:08:48.370
And so, what this looks like it's from
the parent, you're passing a property or

109
00:08:48.370 --> 00:08:50.900
you're binding to a property
on the child component.

110
00:08:50.900 --> 00:08:52.640
And you're just listening for an event.

111
00:08:54.980 --> 00:09:00.110
But on the child component is
that's coming in via an input,

112
00:09:00.110 --> 00:09:03.800
and you're emitting the event via output.

113
00:09:03.800 --> 00:09:06.850
And so I'm going to skip
these tech slides here and

114
00:09:07.870 --> 00:09:10.450
I think let's get right into the code.

115
00:09:10.450 --> 00:09:12.780
So I think sometimes not sometimes,

116
00:09:12.780 --> 00:09:16.480
but a lot of times it's easier
to kinda look at a high level.

117
00:09:16.480 --> 00:09:20.260
It kind of some pictures and so
that's where, with the arrows and stuff,

118
00:09:20.260 --> 00:09:23.180
it's very easy for, I think,
at least for me to see but

119
00:09:23.180 --> 00:09:26.780
then from here, let's get into the code.

120
00:09:28.730 --> 00:09:31.880
And so what we have here is

121
00:09:34.410 --> 00:09:38.390
kind of this large component

122
00:09:40.270 --> 00:09:44.790
and if we look at this,
if we look at it being rendered.

123
00:09:47.590 --> 00:09:49.800
This could certainly be
a standalone component.

124
00:09:49.800 --> 00:09:53.300
And this could be a standalone component.

125
00:09:53.300 --> 00:09:55.830
And so let's break these out.

126
00:09:55.830 --> 00:09:59.030
And let's do this in a way that
not only we can reuse it, but

127
00:09:59.030 --> 00:10:03.980
we can control the structure and the
communication that happening around that.

128
00:10:03.980 --> 00:10:09.190
So let's hop into our command line.

129
00:10:10.400 --> 00:10:13.960
And let's generate some components.

130
00:10:13.960 --> 00:10:18.957
So let's do ng, g, and we're

131
00:10:18.957 --> 00:10:24.738
going to do c and let's do courses.

132
00:10:27.097 --> 00:10:30.949
And we'll do courses-list.

133
00:10:33.323 --> 00:10:37.940
And I'm gonna do d because I don't know
what's gonna happen, or it could go awry.

134
00:10:39.230 --> 00:10:45.577
So what happened here is is saying I don't
know what module to put this component in.

135
00:10:45.577 --> 00:10:49.420
The reason being is in the,

136
00:10:51.789 --> 00:10:54.757
Rich directory, we now have two modules.

137
00:10:54.757 --> 00:10:59.884
So this is where when you come in,

138
00:11:06.952 --> 00:11:12.235
I think it's app module = or rather module

139
00:11:12.235 --> 00:11:17.665
= app.module and doing this from memory,

140
00:11:17.665 --> 00:11:22.652
so if I mess this up, it's certainly not

141
00:11:22.652 --> 00:11:29.877
module There we go.

142
00:11:29.877 --> 00:11:33.636
And so
now I'm saying specifically add this in or

143
00:11:33.636 --> 00:11:38.220
generate this but
hook this up into the app module.

144
00:11:38.220 --> 00:11:40.810
And so of course/courses-list.

145
00:11:40.810 --> 00:11:41.310
Very good.

146
00:11:42.500 --> 00:11:48.730
So I'm gonna take this off and
we're going to do this for real.

147
00:11:50.500 --> 00:11:55.246
Now let's do one more so
in ng g c courses,

148
00:11:58.626 --> 00:12:04.137
Course, Details and

149
00:12:04.137 --> 00:12:10.957
we'll do module=app.module.ts,
we'll do a dry run here,

150
00:12:18.521 --> 00:12:24.149
And there we go, so I think we're good,
so let me take off the drive on flag.

151
00:12:25.490 --> 00:12:27.290
And we're going to generate this.

152
00:12:27.290 --> 00:12:33.190
So now what I've done is I've created
a list component and a details component.

153
00:12:33.190 --> 00:12:35.940
So hop back into the code, and

154
00:12:35.940 --> 00:12:39.980
now if we look in courses, we have
course details so it's a single course.

155
00:12:39.980 --> 00:12:42.350
Then we have courses-list.

156
00:12:43.730 --> 00:12:50.962
And from here what we
can do is let's take and

157
00:12:50.962 --> 00:12:57.421
let's go ahead and add this to the dom.

158
00:12:57.421 --> 00:13:02.571
So if we go here we have, notice I had
already picked up app-courses-list,

159
00:13:02.571 --> 00:13:07.571
so I'm just gonna close this and I'm

160
00:13:07.571 --> 00:13:11.466
gonna go ahead and just comment this out.

161
00:13:11.466 --> 00:13:16.332
And then in the course-details,

162
00:13:16.332 --> 00:13:20.537
let's go with app-course.

163
00:13:20.537 --> 00:13:25.740
Oops, app-course-details.

164
00:13:27.250 --> 00:13:28.480
And we're just gonna start over.

165
00:13:28.480 --> 00:13:31.690
So app, there we go, super.

166
00:13:32.690 --> 00:13:37.833
Now, I'm going to comment this out.

167
00:13:40.376 --> 00:13:47.210
Let's save this and let's see what wonders
I have brought before this workshop.

168
00:13:50.020 --> 00:13:53.750
Course-list works,
course-details works, boom.

169
00:13:55.070 --> 00:13:58.420
So I think everybody just
got their money's worth.

170
00:13:59.890 --> 00:14:03.330
Probably one of the most
relevant things I've done so

171
00:14:03.330 --> 00:14:07.570
far today, but I think I can do better.

172
00:14:07.570 --> 00:14:13.740
So I'm just going to pick up
this code that I commented out.

173
00:14:13.740 --> 00:14:17.852
So notice I'm refactoring and
I'm going to go into the template,

174
00:14:17.852 --> 00:14:22.250
the course-list component template,

175
00:14:22.250 --> 00:14:25.300
just to be specific in case
anybody was wondering.

176
00:14:25.300 --> 00:14:30.232
And I'm gonna uncomment this out.

177
00:14:32.955 --> 00:14:34.266
Okay?

178
00:14:34.266 --> 00:14:40.444
Now, What I'm going to do is,

179
00:14:43.064 --> 00:14:47.273
I'm going to remove this event handler for
now.

180
00:14:47.273 --> 00:14:55.941
And I'm also going to remove
this event handler for now.

