WEBVTT

1
00:00:00.410 --> 00:00:06.692
Let us jump into component fundamentals.

2
00:00:06.692 --> 00:00:11.581
So we're gonna go through
just a few slides.

3
00:00:11.581 --> 00:00:15.503
And then we're gonna
get back into the code.

4
00:00:15.503 --> 00:00:21.727
So components are the fundamental building

5
00:00:21.727 --> 00:00:26.949
block of your Angular application.

6
00:00:26.949 --> 00:00:30.896
And when you understand components,

7
00:00:30.896 --> 00:00:36.705
I think on the surface,
they're deceptively simple.

8
00:00:36.705 --> 00:00:40.217
But what's interesting is it really
informs your architecture and

9
00:00:40.217 --> 00:00:42.372
I'm really wanting to like jump ahead and

10
00:00:42.372 --> 00:00:45.300
start talking about component
driven architecture.

11
00:00:45.300 --> 00:00:48.467
But we're just going to
practice restraint and

12
00:00:48.467 --> 00:00:51.565
we're going to take this slow, methodical.

13
00:00:51.565 --> 00:00:56.328
And I would say one of the big
things that I will bring out, and

14
00:00:56.328 --> 00:01:02.683
I'll talk about this a bit later, is that
there's been a fundamental shift in,

15
00:01:02.683 --> 00:01:07.870
I think the mentality of all
frameworks around components.

16
00:01:07.870 --> 00:01:11.722
And before when you're doing
like jQuery applications,

17
00:01:11.722 --> 00:01:13.851
there really was no structure.

18
00:01:13.851 --> 00:01:17.662
There was no mechanism for, I'm creating
this state and I wanna use it over and

19
00:01:17.662 --> 00:01:18.970
over and over.

20
00:01:18.970 --> 00:01:24.842
And really even in AngularJS
there was a very little,

21
00:01:24.842 --> 00:01:28.638
just a hint of that but not really.

22
00:01:28.638 --> 00:01:34.208
Then react came and I would say I think
one of the greatest things that that

23
00:01:34.208 --> 00:01:39.874
react did is really put component-driven
architecture at the forefront

24
00:01:39.874 --> 00:01:46.150
of people's minds and how they think
about building front end applications.

25
00:01:46.150 --> 00:01:52.353
And so with Angular,
components became front and center.

26
00:01:52.353 --> 00:01:56.800
And this is anything that a user sees.

27
00:01:56.800 --> 00:02:01.024
It goes into a component.

28
00:02:01.024 --> 00:02:05.686
And so let's talk about components.

29
00:02:05.686 --> 00:02:08.780
We'll talk about the anatomy of a
component and we'll start to build on it.

30
00:02:08.780 --> 00:02:16.074
So the anatomy of a component
is it's fairly simple,

31
00:02:16.074 --> 00:02:20.124
that you have two main parts,

32
00:02:20.124 --> 00:02:24.337
is you have a component class,

33
00:02:24.337 --> 00:02:28.404
which is just a yes six class.

34
00:02:28.404 --> 00:02:30.740
That's it, as you define the class.

35
00:02:30.740 --> 00:02:36.093
And then you export it, so it's available.

36
00:02:36.093 --> 00:02:40.365
Then you have an HTML template,
nothing more than HTML.

37
00:02:40.365 --> 00:02:45.259
And so kind of in and
of themselves that there's nothing Angular

38
00:02:45.259 --> 00:02:49.255
specific about them until
you introduce metadata.

39
00:02:50.355 --> 00:02:54.568
And what that does is that
decorates the class and

40
00:02:54.568 --> 00:03:01.369
tells the class this is how you're going
to operate in the context of Angular.

41
00:03:01.369 --> 00:03:06.800
So it kind of is responsible for gluing
the template and the class together.

42
00:03:06.800 --> 00:03:11.347
And then from there, we use property
bindings and event bindings to

43
00:03:11.347 --> 00:03:16.625
communicate from the class to the template
and from the template to the class.

44
00:03:16.625 --> 00:03:20.510
Now I do wanna say this.

45
00:03:20.510 --> 00:03:25.722
And I'm trying not to
get on a Soapbox here.

46
00:03:25.722 --> 00:03:30.685
But a lot of times, a fundamental
pitfall that I see when people

47
00:03:30.685 --> 00:03:34.995
come from a very classical
learning environment, for

48
00:03:34.995 --> 00:03:40.426
instance like Java is a really,
really, I think kinda one of the main

49
00:03:40.426 --> 00:03:45.577
perpetrators of this is that when
you see class or you see a class,

50
00:03:45.577 --> 00:03:51.210
it's this opportunity to inherit
it an inherit it, inherit it.

51
00:03:51.210 --> 00:03:56.273
And I think that's a very slippery
slope and I was really resistant

52
00:03:56.273 --> 00:04:00.796
because I prefer functional
programmatic concepts is I was

53
00:04:00.796 --> 00:04:05.968
resistant to even just having
the concept of a class in JavaScript.

54
00:04:05.968 --> 00:04:09.554
But what I began to realize is
just because you have a class,

55
00:04:09.554 --> 00:04:13.040
that doesn't necessarily
equal inheritance.

56
00:04:13.040 --> 00:04:15.776
And so because we're using classes,

57
00:04:15.776 --> 00:04:20.818
think of those as just like a container
mechanism, a place that you can

58
00:04:20.818 --> 00:04:26.048
kind of put things.- I'd really think
of classes is a data structure.

59
00:04:26.048 --> 00:04:29.927
And so what I have seen in some client
engagements is you take a Java or

60
00:04:29.927 --> 00:04:34.493
.NET developer who's learning Angular,
and you'll see a component that's

61
00:04:34.493 --> 00:04:39.195
inherited from another component that
inherits from another component which now

62
00:04:39.195 --> 00:04:43.740
what you're doing is you're tightly
coupling everything together.

63
00:04:43.740 --> 00:04:47.308
And when you make a change
to one class upstream,

64
00:04:47.308 --> 00:04:50.015
it has adverse effects downstream.

65
00:04:50.015 --> 00:04:54.515
So classes I just recommend really
staying away from inheritance.

66
00:04:54.515 --> 00:04:59.088
I think that's a really, really slippery
slope, but as an organizational

67
00:04:59.088 --> 00:05:04.100
mechanisms or really I think of it as a
data structure, it's actually quite nice.

68
00:05:05.210 --> 00:05:08.486
So what I want to call out here,

69
00:05:08.486 --> 00:05:13.402
again I'm trying to avoid
the slides cuz I just

70
00:05:13.402 --> 00:05:18.081
wanna do code,
I wanna jump into the codes.

71
00:05:18.081 --> 00:05:22.859
So let's let's look at
the code that we generated or

72
00:05:22.859 --> 00:05:26.661
rather let's hop into our start branch,

73
00:05:26.661 --> 00:05:31.780
because we're gonna start building,
let's do that.

74
00:05:31.780 --> 00:05:37.355
So this angular workshop
project that I generated,

75
00:05:37.355 --> 00:05:42.811
I'm not gonna throw it away,
but I don't need it.

76
00:05:42.811 --> 00:05:47.379
So instead,
I'm just going back into the Angular

77
00:05:47.379 --> 00:05:52.092
nine fundamentals, and
I'm on the start branch.

78
00:05:52.092 --> 00:05:58.299
So hopefully you've
downloaded the repo and

79
00:05:58.299 --> 00:06:02.225
let's hop into 00 start.

80
00:06:02.225 --> 00:06:06.640
And let's start to just
kind of step into the code,

81
00:06:06.640 --> 00:06:12.810
if you are not on 00 start branch,
so I'm gonna hop back into master.

82
00:06:12.810 --> 00:06:15.400
So get checkout master.

83
00:06:17.220 --> 00:06:19.596
Oops, ha, there we go.

84
00:06:21.928 --> 00:06:25.655
All right, so you can see, I'm on master.

85
00:06:25.655 --> 00:06:30.150
And so per chance it's like,
well how do I get onto the start branch?

86
00:06:30.150 --> 00:06:35.283
You're just going to go get
checkout 00 dash start.

87
00:06:35.283 --> 00:06:39.221
And so my apologies in everyone
to assume prior knowledge.

88
00:06:39.221 --> 00:06:42.040
So now you should be on the start branch.

89
00:06:43.480 --> 00:06:48.440
Okay from the start branch,

90
00:06:48.440 --> 00:06:52.780
we can hop into the code,

91
00:06:52.780 --> 00:07:00.435
which is I'm using VS
code as my editor and,

92
00:07:03.330 --> 00:07:07.699
Let's start with the component class.

93
00:07:07.699 --> 00:07:09.064
So what I'm going to do,

94
00:07:09.064 --> 00:07:14.170
the narrative arc that we're going to
follow is I'm going to start with a class.

95
00:07:14.170 --> 00:07:17.267
I'm going to explain what's
happening kind of the pieces.

96
00:07:17.267 --> 00:07:19.549
Then we're going to hop into the template,
and

97
00:07:19.549 --> 00:07:23.590
I'm going to explain how that works and
how that's wired together.

98
00:07:23.590 --> 00:07:27.974
And then we'll start to build on that.

99
00:07:27.974 --> 00:07:34.608
So in our app component, what you have is,

100
00:07:39.710 --> 00:07:41.593
You have a class here, and
then you have this decorator.

101
00:07:41.593 --> 00:07:43.790
So I'm just going to delete this for
just a moment.

102
00:07:45.350 --> 00:07:50.576
And at this point in our app component,
outside of this

103
00:07:50.576 --> 00:07:56.155
import at the top,
there's nothing Angular about this.

104
00:07:56.155 --> 00:08:00.326
And so it's really interesting that
you can actually write a lot of just

105
00:08:00.326 --> 00:08:04.916
TypeScript classes or a lot of times I
write functionality in TypeScript, and

106
00:08:04.916 --> 00:08:06.880
then I just move it into Angular.

107
00:08:06.880 --> 00:08:13.756
And so we have properties, methods, etc.

108
00:08:13.756 --> 00:08:19.620
And then on top of that,
we have our metadata.

109
00:08:21.390 --> 00:08:25.583
And so what the metadata is,
is it is a function, so

110
00:08:25.583 --> 00:08:30.363
this is actually part of TypeScript,
it's not Angular,

111
00:08:30.363 --> 00:08:35.141
that it's a function that gets called and
you can actually

112
00:08:35.141 --> 00:08:40.116
create your own decorators
that when it's being compiled,

113
00:08:40.116 --> 00:08:43.067
it hits this decorator right here.

114
00:08:43.067 --> 00:08:48.341
And it then calls this function passing
in this parameter, which in this

115
00:08:48.341 --> 00:08:55.200
case is a component configuration object
and then it performs some functionality.

116
00:08:55.200 --> 00:09:00.095
And so within this component decorator,
we're going to tell

117
00:09:00.095 --> 00:09:05.176
angular how we want to decorate
this class to make it available or

118
00:09:05.176 --> 00:09:10.653
to make it function as an angular
component within our application.

119
00:09:10.653 --> 00:09:15.050
So the big one is the selector.

120
00:09:15.050 --> 00:09:17.167
And so in this case,
we're gonna app route.

121
00:09:17.167 --> 00:09:20.815
And what this does is by your selector,

122
00:09:20.815 --> 00:09:26.390
you're able to attach this
component into the DOM.

123
00:09:26.390 --> 00:09:31.363
And so if we go to index.html,
you'll notice here

124
00:09:31.363 --> 00:09:35.759
that we have app root,
this element here, so

125
00:09:35.759 --> 00:09:40.400
this is obviously not
a standard HTML element.

126
00:09:40.400 --> 00:09:45.509
But because we're defining it here,
and when it compiles,

127
00:09:45.509 --> 00:09:49.428
we now are able to add
that to our application.

128
00:09:49.428 --> 00:09:55.280
So the question is how do I get
a component into an application?

129
00:09:55.280 --> 00:09:59.433
Well, via the selectors, so
you take the selector and

130
00:09:59.433 --> 00:10:04.138
then you're able to just add
that like a normal HTML element.

131
00:10:04.138 --> 00:10:09.932
Now the other few things
I'll add is the template,

132
00:10:09.932 --> 00:10:16.150
which is gonna be app component.html and
style URLs.

133
00:10:16.150 --> 00:10:19.327
And so this is interesting
because this is an array and

134
00:10:19.327 --> 00:10:22.020
you're able to actually stack your styles.

135
00:10:22.020 --> 00:10:29.786
I've never had a reason to do that
in reality, but it is an option.

136
00:10:32.481 --> 00:10:38.929
And so the thing with component classes
is if you understand JavaScript and

137
00:10:38.929 --> 00:10:44.456
especially ES6, I think your
understanding of the components

138
00:10:44.456 --> 00:10:50.002
themselves are pretty straightforward,
like you're there.

139
00:10:50.002 --> 00:10:54.745
It's a very short leap,
because we're leveraging essentially

140
00:10:54.745 --> 00:10:59.600
the native mechanisms of JavaScript and
TypeScript.

141
00:10:59.600 --> 00:11:06.730
And then in our component,
what we have is just an HTML,

142
00:11:06.730 --> 00:11:12.042
and you'll notice here that we have these

143
00:11:12.042 --> 00:11:17.353
elements, mat hyphen toolbar, etc.,

144
00:11:17.353 --> 00:11:22.361
and these are just us pulling in Angular

145
00:11:22.361 --> 00:11:28.163
material components into our application.

146
00:11:28.163 --> 00:11:33.490
And so this is how again you essentially
get a component typically to render.

147
00:11:33.490 --> 00:11:38.204
Now you can do this via routes,
that is another way to do that.

148
00:11:38.204 --> 00:11:42.204
But more often than not, you will put

149
00:11:42.204 --> 00:11:47.280
a component on the page
via the app selector.

150
00:11:47.280 --> 00:11:51.360
So let me just run this real quick.

151
00:11:51.360 --> 00:11:58.130
So hopping back into the command line,
it's npn run server all.

152
00:11:58.130 --> 00:12:03.140
Remember, the reason why we're doing
that is because we're running like

153
00:12:03.140 --> 00:12:08.562
a small note server with a REST API in the
background that we will use eventually.

154
00:12:08.562 --> 00:12:12.909
And so as this is running,
once this pulls up,

155
00:12:12.909 --> 00:12:18.500
then we'll hop into the page and
we'll start to see this.

156
00:12:18.500 --> 00:12:24.741
And then I can start to kind of add on to
this and we can kind of step through this.

157
00:12:24.741 --> 00:12:27.283
So, compiled successfully.

158
00:12:27.283 --> 00:12:30.115
I'm gonna hop into the browser.

159
00:12:30.115 --> 00:12:36.752
And let me create a new window here, okay?

160
00:12:41.660 --> 00:12:42.163
There we go.

