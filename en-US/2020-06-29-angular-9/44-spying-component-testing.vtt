WEBVTT

1
00:00:00.000 --> 00:00:03.631
Now the second piece to this is and

2
00:00:03.631 --> 00:00:08.819
this is kind of the last
piece I want to talk about

3
00:00:08.819 --> 00:00:14.137
in terms of component
testing fundamentals is,

4
00:00:14.137 --> 00:00:19.860
in courses component how
do you test delete course?

5
00:00:19.860 --> 00:00:22.820
Like how do you know that delete course
is doing what it's supposed to do?

6
00:00:24.570 --> 00:00:28.100
Well, you don't need to
test the service because

7
00:00:28.100 --> 00:00:30.800
that's not part of the unit under test.

8
00:00:32.070 --> 00:00:37.347
In order for you to say in
a vacuum this function works,

9
00:00:37.347 --> 00:00:43.314
I will know that this function
works because when I call this,

10
00:00:43.314 --> 00:00:48.962
it calls this course services
delete with this course ID.

11
00:00:48.962 --> 00:00:53.091
And so for this, what we use is a spy.

12
00:00:53.091 --> 00:00:57.450
So I use mocks in spies all the time for
testing.

13
00:00:57.450 --> 00:01:02.270
So a lot of times especially when you have
really fine grained component functions

14
00:01:02.270 --> 00:01:04.190
is that you're not testing the logic.

15
00:01:04.190 --> 00:01:07.760
In fact in here,
there's not very much logic.

16
00:01:07.760 --> 00:01:11.810
It's set, maybe this piece right here.

17
00:01:11.810 --> 00:01:16.080
And so what you could do is then say if I
pass in this course depending on the ID,

18
00:01:16.080 --> 00:01:19.950
it's either going to call this or
this and that's what you could validate.

19
00:01:19.950 --> 00:01:24.200
But let's go with just delete course.

20
00:01:24.200 --> 00:01:29.136
So let's go back into our code here and

21
00:01:29.136 --> 00:01:33.914
what we want to do is we want to spy on or

22
00:01:33.914 --> 00:01:39.486
rather we want to validate it should call,

23
00:01:42.396 --> 00:01:49.328
Let's say, Course.

24
00:01:49.328 --> 00:01:52.496
We'll do this on

25
00:01:59.812 --> 00:02:04.366
On delete, and so
essentially when we call delete,

26
00:02:04.366 --> 00:02:08.040
it should call courses service delete.

27
00:02:08.040 --> 00:02:11.370
And so that's what we want to validate.

28
00:02:11.370 --> 00:02:15.255
So, within this, we're going to go.

29
00:02:19.346 --> 00:02:25.735
And Within this block,

30
00:02:25.735 --> 00:02:29.410
we're going to essentially
spy on the service,

31
00:02:29.410 --> 00:02:34.550
make sure that that method was
called with the correct parameter.

32
00:02:34.550 --> 00:02:38.990
But in order to do that,
the first thing that we need to do is

33
00:02:38.990 --> 00:02:43.920
we need to create a reference to
the service that we can call and so

34
00:02:43.920 --> 00:02:48.985
I'm just going to go courses service and
I'm going to type this to

35
00:02:48.985 --> 00:02:55.560
courses service cuz we're
basically faking it, all right.

36
00:02:55.560 --> 00:03:02.079
And so now, when we go into our
synchronous before each block,

37
00:03:02.079 --> 00:03:09.583
we can also get a reference to
the service using debug element injector.

38
00:03:15.924 --> 00:03:18.620
I also need to create a debug element.

39
00:03:18.620 --> 00:03:20.410
I did that in the other component,
I didn't do it here.

40
00:03:20.410 --> 00:03:22.450
So debug element, there we go.

41
00:03:22.450 --> 00:03:27.212
And then we'll go here debug
element equals fixture.

42
00:03:31.829 --> 00:03:36.160
Debug element and so
now I should be able to grab this

43
00:03:40.922 --> 00:03:46.333
injector that get and
we want to get of course our courses

44
00:03:46.333 --> 00:03:53.707
service which There we go.

45
00:03:58.229 --> 00:04:01.259
All right, so using the debug element,

46
00:04:01.259 --> 00:04:06.787
we're able to call the injector and
then we're able to get that service so

47
00:04:06.787 --> 00:04:10.282
that we can reference it
in our test down here.

48
00:04:10.282 --> 00:04:14.024
So as we're in the homestretch,

49
00:04:14.024 --> 00:04:18.712
we're going to go and we will spy on this.

50
00:04:18.712 --> 00:04:21.690
So let's go spy on and

51
00:04:21.690 --> 00:04:27.815
we're going to spy on our courses service.

52
00:04:33.871 --> 00:04:38.076
And we're going to call spy on
actually the delete method and

53
00:04:38.076 --> 00:04:42.868
what we want to do is when you spy
you can do a couple different things.

54
00:04:42.868 --> 00:04:46.345
You can just say stop, we can allow it
to call through, you can return and

55
00:04:46.345 --> 00:04:49.370
so I recommend checking
the documentation for that.

56
00:04:49.370 --> 00:04:52.726
But in this case,
we're just going to say call through.

57
00:05:00.012 --> 00:05:05.180
And so notice here that it's saying,
well, this doesn't well.

58
00:05:05.180 --> 00:05:07.950
I actually wrote the stub in here,
so let's go here.

59
00:05:07.950 --> 00:05:10.970
There we go.
Of course the service delete and

60
00:05:10.970 --> 00:05:12.291
call through.

61
00:05:12.291 --> 00:05:16.936
Now what I want to do is we're
going to go component, delete, and

62
00:05:16.936 --> 00:05:24.438
let's just pass in one, On delete course.

63
00:05:24.438 --> 00:05:28.898
So when we pass this in,

64
00:05:28.898 --> 00:05:34.919
we're sending in a course ID and

65
00:05:34.919 --> 00:05:37.818
here we go, and

66
00:05:37.818 --> 00:05:42.947
we expect service delete to

67
00:05:42.947 --> 00:05:48.080
have been called with one.

68
00:05:50.160 --> 00:05:56.030
All right, and but let's go ahead and
change this to 100.

69
00:05:56.030 --> 00:05:58.520
So we'll run it green and
then we'll make it work.

70
00:05:58.520 --> 00:06:02.557
So save, let's go back in here.

71
00:06:07.991 --> 00:06:12.080
Now notice spy on delete
method does not exist.

72
00:06:12.080 --> 00:06:15.970
So we'll go here,
just run up here real quick

73
00:06:18.090 --> 00:06:24.410
and I'll just copy this,
we'll stub this out as well and

74
00:06:24.410 --> 00:06:29.290
we'll call this delete because what we're
doing is we're using the service set.

75
00:06:29.290 --> 00:06:36.087
So if you're just spying,
then Well if you're just spying then,

76
00:06:36.087 --> 00:06:39.850
you can just inject it because you're
just spying and overriding it.

77
00:06:39.850 --> 00:06:43.510
But in this case we're doing the stub and
then we're layering it with a spy.

78
00:06:44.830 --> 00:06:50.750
So we'll go here, and
I always run these out of order.

79
00:06:53.930 --> 00:06:58.300
So here expected spy delete to
have been called with 100 when

80
00:06:58.300 --> 00:07:01.750
the call was actually one.

81
00:07:01.750 --> 00:07:06.710
So we just go back down and
let's fix this.

82
00:07:06.710 --> 00:07:08.200
So we'll just set this to one.

83
00:07:08.200 --> 00:07:10.110
Let's save this and

84
00:07:10.110 --> 00:07:15.800
provided this passes then I think we can
just summarize this and wrap this up.

85
00:07:15.800 --> 00:07:17.170
So, there we go.

86
00:07:17.170 --> 00:07:21.843
All right, a few dangling tests,
I wouldn't worry about that.

87
00:07:21.843 --> 00:07:27.027
The main thing is just to review
that when you are testing

88
00:07:27.027 --> 00:07:31.881
a component that you have
a testbed that essentially

89
00:07:31.881 --> 00:07:36.530
creates the environment for
you to run your test.

90
00:07:37.610 --> 00:07:43.290
Which means essentially you
are creating a very specific module for

91
00:07:43.290 --> 00:07:44.910
this component to run in.

92
00:07:44.910 --> 00:07:48.695
Then you from the testbed
can get a test fixture,

93
00:07:48.695 --> 00:07:53.865
which is an instance that creates
an instance of that component and

94
00:07:53.865 --> 00:07:58.296
returns it in a fixture which
allows you to for instance,

95
00:07:58.296 --> 00:08:01.922
get a debug element and
a component instance.

96
00:08:01.922 --> 00:08:06.035
as well as off of the debug element,

97
00:08:06.035 --> 00:08:11.794
you can then query the component
Dom as you see here

98
00:08:11.794 --> 00:08:17.580
that in I think I did that
in the users components.

99
00:08:17.580 --> 00:08:20.321
Let me just jump in there real quick so
we can see that piece.

100
00:08:24.032 --> 00:08:25.550
Here, there we go.

101
00:08:25.550 --> 00:08:30.560
So debug element query and
then by CSS which is just

102
00:08:30.560 --> 00:08:35.700
another convenience method, and
then you can run tests on that as well,

103
00:08:35.700 --> 00:08:40.810
make sure not to forget to run detect
changes if you need to update the template

104
00:08:40.810 --> 00:08:45.810
to validate it,
back to our courses component spec.

105
00:08:45.810 --> 00:08:51.080
Is that you can also use debug
element injector to get a reference or

106
00:08:51.080 --> 00:08:55.480
an instance of a service
that you can then spy on.

107
00:08:57.130 --> 00:08:58.770
You can also override a service or

108
00:08:58.770 --> 00:09:04.150
a dependency which I recommend
by marking out a stub and

109
00:09:04.150 --> 00:09:09.420
approximating or writing just the amount
of functionality that you need.

110
00:09:09.420 --> 00:09:13.880
This is nice if you have a service with
let's say 20 methods, but your component

111
00:09:13.880 --> 00:09:18.060
is using let's say two, well you just
have to mock those methods out so

112
00:09:18.060 --> 00:09:20.930
you can stub out just what you're using.

113
00:09:20.930 --> 00:09:25.920
So you saw as we were running this,
that I didn't have to stub

114
00:09:25.920 --> 00:09:31.540
delete until I actually
called it in my last test.

115
00:09:31.540 --> 00:09:38.150
And so creating a stub and then using
this kind of longhand provides syntax.

116
00:09:38.150 --> 00:09:38.998
You can override it.

117
00:09:38.998 --> 00:09:43.590
So it's provide whatever you wanna
provide, then use value and then

118
00:09:43.590 --> 00:09:48.260
you are essentially feeding the injector,
this is what I wanna use in its place.

119
00:09:49.960 --> 00:09:54.030
And so then from there because
I wanna spy on the method,

120
00:09:54.030 --> 00:09:57.754
then you can call the method
that encompasses it and

121
00:09:57.754 --> 00:10:03.402
then you can come back and say I expected
this method to open called with this.

122
00:10:03.402 --> 00:10:09.461
And so this I believe is I would say,
outside of some edge cases,

123
00:10:09.461 --> 00:10:14.780
at least 80% of the test
that I write in components.

124
00:10:14.780 --> 00:10:20.310
So testbed, test fixture,
debug element, mocks,

125
00:10:20.310 --> 00:10:25.140
stubs, and spies is going to get
you a long ways down the road.

126
00:10:25.140 --> 00:10:28.290
So thank you for
joining me on this module,

127
00:10:28.290 --> 00:10:32.061
this completes component
testing fundamentals.

