WEBVTT

1
00:00:00.060 --> 00:00:06.419
And while that's going,
let me set the challenge and

2
00:00:06.419 --> 00:00:10.525
I'm gonna do this up here complete

3
00:00:13.964 --> 00:00:15.850
Remote, update, call.

4
00:00:20.190 --> 00:00:25.151
Complete, remote,

5
00:00:25.151 --> 00:00:29.012
delete, call.

6
00:00:32.881 --> 00:00:42.320
And Completed

7
00:00:42.320 --> 00:00:46.130
operation, so
this is the challenge I want.

8
00:00:46.130 --> 00:00:51.431
I think that's pretty noble there,
so let me go back in

9
00:01:01.269 --> 00:01:03.900
The challenge description, good push.

10
00:01:03.900 --> 00:01:05.290
All right, so now this is up.

11
00:01:06.370 --> 00:01:09.340
And I have a question here from Camille.

12
00:01:10.780 --> 00:01:14.130
Are services persistent?

13
00:01:14.130 --> 00:01:17.570
And the answer is yes.

14
00:01:17.570 --> 00:01:18.570
They are persistent.

15
00:01:20.010 --> 00:01:25.230
And so the point is that you want
to load your data in one place

16
00:01:25.230 --> 00:01:29.960
in a persistent service, and
then basically pull that in or

17
00:01:29.960 --> 00:01:33.670
consume that to your components.

18
00:01:33.670 --> 00:01:39.580
And so that's very much the idea is that,
once they're created, they are in a sense,

19
00:01:39.580 --> 00:01:42.620
a singleton, especially when
you do provide it in route.

20
00:01:42.620 --> 00:01:47.038
And so that's the idea if you have
the singleton service that exists,

21
00:01:47.038 --> 00:01:52.490
that is has your application state for
the life cycle of that application.

22
00:01:52.490 --> 00:02:00.200
And so now in the way that I'm coding it,
my services are not stateful,

23
00:02:00.200 --> 00:02:04.810
but I could put it in the service and
then consume in two different components.

24
00:02:04.810 --> 00:02:11.670
So we're doing it a little bit
funny this way to be reactive,

25
00:02:11.670 --> 00:02:18.430
but as a whole typically what I would do
is put my state in, like an object store.

26
00:02:18.430 --> 00:02:22.010
And then essentially anybody who
needs that data would pull that

27
00:02:22.010 --> 00:02:25.000
off from that and
consume it and then display it.

28
00:02:25.000 --> 00:02:27.210
So really, really good question.

29
00:02:27.210 --> 00:02:30.850
But exactly is that they're persistent,
other signals in and

30
00:02:30.850 --> 00:02:36.920
that's how you essentially share or
consolidate your data into a single place.

31
00:02:36.920 --> 00:02:42.970
So, what I'm going to do is give everybody
an opportunity to do the challenge,

32
00:02:42.970 --> 00:02:47.380
and then we'll come back and
I will show you the answer.

