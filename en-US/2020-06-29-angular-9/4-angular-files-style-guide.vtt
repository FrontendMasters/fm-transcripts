WEBVTT

1
00:00:00.390 --> 00:00:06.130
And so, in an Angular CLI project,
you have kind of two main folders here,

2
00:00:06.130 --> 00:00:10.470
you have your source, and
then you have your end to end.

3
00:00:10.470 --> 00:00:12.743
And so what they do is they
kind of separate that out.

4
00:00:12.743 --> 00:00:17.139
Because typically when you run your end
to end test, that's kind of a separate

5
00:00:17.139 --> 00:00:21.086
application that is responsible for
hitting your main application.

6
00:00:21.086 --> 00:00:25.408
So that's separated out, but more so

7
00:00:25.408 --> 00:00:30.412
in the source directory, we have apps and,

8
00:00:32.734 --> 00:00:35.850
Within this we have our
main application stuff.

9
00:00:35.850 --> 00:00:40.953
Now the question is,
let me just double check this real quick,

10
00:00:40.953 --> 00:00:44.434
20, There we go.

11
00:00:44.434 --> 00:00:47.499
All right, I just wanna make sure that
hopefully everybody can see this,

12
00:00:47.499 --> 00:00:49.740
VS Code is a little funny about that.

13
00:00:49.740 --> 00:00:54.893
And what you have here is, I want to
call out these four files real quick.

14
00:00:54.893 --> 00:00:59.310
Is when you generate a component,
you're going to get an HTML file,

15
00:00:59.310 --> 00:01:00.918
which is your template.

16
00:01:00.918 --> 00:01:06.739
You're going to get a TS file,
which is, it's essentially a class.

17
00:01:06.739 --> 00:01:12.410
And then you have a style sheet.
And then you have a spec.

18
00:01:12.410 --> 00:01:15.170
And so to me, this is really, really cool.

19
00:01:16.770 --> 00:01:22.157
Testing is one of these things where
it's not necessarily exciting.

20
00:01:22.157 --> 00:01:28.510
But it's really, really, really important.

21
00:01:28.510 --> 00:01:33.010
And I find that one of
the biggest barriers to entry to

22
00:01:33.010 --> 00:01:36.540
testing is that it's just too
hard to get up and running.

23
00:01:36.540 --> 00:01:40.820
And so
Angular has done a really good job of

24
00:01:40.820 --> 00:01:44.920
generating working test for
you right out of the gates.

25
00:01:44.920 --> 00:01:48.870
Now as you start to develop,
you need to update these.

26
00:01:48.870 --> 00:01:53.700
But the fact that it's going ahead and
generating the spec file for you, when you

27
00:01:53.700 --> 00:01:58.450
create it, or when you create this
component, is just a major convenience.

28
00:01:58.450 --> 00:02:03.916
And so I think the big thing here that
I really want to call out is that

29
00:02:03.916 --> 00:02:09.170
using the CLI and

30
00:02:09.170 --> 00:02:14.360
generating your application and leveraging
the CLI, a couple of things are happening.

31
00:02:14.360 --> 00:02:18.430
One, it's eliminating a lot of
the busy work that you're not having

32
00:02:18.430 --> 00:02:23.430
to assemble these pieces and
really choose and decide.

33
00:02:23.430 --> 00:02:28.018
So that's really important,
is velocity and ergonomics.

34
00:02:28.018 --> 00:02:32.488
But is well is it's making
testing a first class citizen,

35
00:02:32.488 --> 00:02:36.640
not only unit testing,
but end to end testing.

36
00:02:36.640 --> 00:02:40.465
And although the CLI generates
with Protractor, which,

37
00:02:40.465 --> 00:02:45.626
I don't want to marginalize those
contributions, it's based on Selenium.

38
00:02:45.626 --> 00:02:51.009
And I think there's just some better
options out there, specifically Cypress.

39
00:02:51.009 --> 00:02:57.058
And so, if you generate a workspace
using NX, then you get Cypress.

40
00:02:57.058 --> 00:03:03.570
And so, but nonetheless,
unit testing is a first class citizen.

41
00:03:03.570 --> 00:03:06.356
End to end testing is
a first class citizen.

42
00:03:06.356 --> 00:03:08.980
It's set up for you, it runs.

43
00:03:08.980 --> 00:03:14.164
And that's really, really nice.

44
00:03:14.164 --> 00:03:18.894
And if you've ever been in a situation
where you have to kind of generate all

45
00:03:18.894 --> 00:03:23.325
this stuff yourself or handwrite it,
not having to do that is really,

46
00:03:23.325 --> 00:03:24.623
really fantastic.

47
00:03:24.623 --> 00:03:31.130
And so it's well, these four files
are very, very, very consistent.

48
00:03:31.130 --> 00:03:37.180
And the other thing that the CLI gives
you, is uniformity across your projects.

49
00:03:37.180 --> 00:03:41.630
And so you know that if you're
on an Angular CLI project,

50
00:03:41.630 --> 00:03:46.570
that when you generate something,
you know exactly what you're gonna get.

51
00:03:46.570 --> 00:03:50.293
And it's based off of
the Angular style guide.

52
00:03:50.293 --> 00:03:53.978
And so there's a lot of really,
really smart people,

53
00:03:53.978 --> 00:03:58.784
I would say, collectively,
smarter than any one of us individually,

54
00:03:58.784 --> 00:04:03.692
that have put a lot of thought into
how do we write Angular applications.

55
00:04:03.692 --> 00:04:08.025
And so
if you just Google Angular style guide,

56
00:04:08.025 --> 00:04:13.050
there's a really good
document document here.

57
00:04:13.050 --> 00:04:17.996
And they've really put out some,
it's pretty well thought out,

58
00:04:17.996 --> 00:04:20.479
but like, do this instead this.

59
00:04:20.479 --> 00:04:23.471
And so
this is a really good starting point for

60
00:04:23.471 --> 00:04:27.192
your team when you start to
think about best practices.

61
00:04:27.192 --> 00:04:30.343
And so even in the pre kind of workshop,
it's like, well,

62
00:04:30.343 --> 00:04:32.430
what are the best practices?

63
00:04:32.430 --> 00:04:36.150
Well, it's documented, it's very clear,
it's in a very public forum.

64
00:04:36.150 --> 00:04:39.450
And so when I go to an organization,
and I say,

65
00:04:39.450 --> 00:04:44.220
I really want you to,
you really need to do this thing.

66
00:04:45.690 --> 00:04:49.930
Well, when I get pushback from it like,
well, that's your opinion.

67
00:04:49.930 --> 00:04:52.360
It's like, well, respectfully not.

68
00:04:52.360 --> 00:04:55.700
It is my opinion, but respectfully,
it's not just my opinion.

69
00:04:55.700 --> 00:04:59.550
But this is what the community
has adopted is best practices.

70
00:04:59.550 --> 00:05:03.013
And so that's also really important.

71
00:05:03.013 --> 00:05:06.485
Nothing's worse than you
get on an application and

72
00:05:06.485 --> 00:05:11.169
you have some super clever person
in a vacuum that's just engineered

73
00:05:11.169 --> 00:05:14.818
this thing that nobody understands but
this person.

74
00:05:14.818 --> 00:05:19.730
I think really consistency is super,
super important.

75
00:05:19.730 --> 00:05:20.960
I think I saw a hand up in the Zoom.

76
00:05:20.960 --> 00:05:23.787
Because I think really
at the end of the day,

77
00:05:23.787 --> 00:05:29.280
it's better to be consistent than
it is to be philosophically right.

78
00:05:29.280 --> 00:05:35.683
And so, people spend so much energy in
commas, not commas, brackets, whatever.

79
00:05:35.683 --> 00:05:38.987
Is if you spent that much energy
being consistent with your team and

80
00:05:38.987 --> 00:05:41.996
coordinating and communicating,
it would just work out and

81
00:05:41.996 --> 00:05:44.240
you'd still be able to
build awesome stuff.

82
00:05:44.240 --> 00:05:47.324
So, again,
just kind of laying some pieces here,

83
00:05:47.324 --> 00:05:52.220
that as you start to develop Angular
applications that you can reference these.

84
00:05:52.220 --> 00:05:56.570
Not only to be effective as a developer,
but as a developer on a large team.

85
00:05:56.570 --> 00:05:59.200
And so the style guide is
a really nice thing to reference.

86
00:05:59.200 --> 00:06:00.650
Like, why are we doing this?

87
00:06:00.650 --> 00:06:06.000
Well, they explain that, more importantly,
when another developers is like,

88
00:06:06.000 --> 00:06:08.470
why do we use small functions?

89
00:06:08.470 --> 00:06:12.370
I want to use a large function,
it's like, well,

90
00:06:12.370 --> 00:06:16.630
style 1.02 says do this and
that's what John Papa says.

91
00:06:16.630 --> 00:06:19.270
So, what would John Papa do?

92
00:06:20.640 --> 00:06:22.920
And so this is,
the CLI is based off of that.

93
00:06:22.920 --> 00:06:27.220
So with that said,
let me show you one other thing.

94
00:06:28.644 --> 00:06:30.580
I see a hand.

95
00:06:30.580 --> 00:06:33.347
&gt;&gt; How do you handle the topic
of state management?

96
00:06:33.347 --> 00:06:37.910
Cuz the docs pretty much avoid NgRx or
anything like that.

97
00:06:40.697 --> 00:06:44.440
&gt;&gt; So the question is how do
we handle state management?

98
00:06:45.730 --> 00:06:51.109
And that is a question I'm going
to defer until later today.

99
00:06:51.109 --> 00:06:56.741
And I have a lot of opinions
about state management.

100
00:06:56.741 --> 00:07:00.040
I would spend the rest of
the day talking about it.

101
00:07:01.470 --> 00:07:06.776
But, The reason why Angular itself,
the core

102
00:07:06.776 --> 00:07:12.110
doesn't talk about state management, is
because those libraries are separated out.

103
00:07:12.110 --> 00:07:13.240
And I really,

104
00:07:13.240 --> 00:07:17.620
really like NgRx, I think it's a really
stable well thought out library.

105
00:07:17.620 --> 00:07:20.380
But Mike Ryan, Brandon Roberts,

106
00:07:20.380 --> 00:07:26.280
I think they're really
just classy individuals.

107
00:07:26.280 --> 00:07:31.210
And I think at one time they were thinking
about pulling NgRx into Angular core.

108
00:07:31.210 --> 00:07:35.554
And the decision was like, no, we don't
wanna force this kind of state management.

109
00:07:35.554 --> 00:07:38.021
It's that we want to have
people to have options.

110
00:07:38.021 --> 00:07:42.785
And so what I will talk about later
is state management outside of

111
00:07:42.785 --> 00:07:45.510
a state management framework.

112
00:07:45.510 --> 00:07:50.599
Because you can have NgRx or Akita or
whatever, you can even be doing Redux,

113
00:07:50.599 --> 00:07:54.272
but you can be mishandling
state all the way upstream.

114
00:07:54.272 --> 00:07:58.007
So I'd look forward to
to handling that topic.

115
00:07:58.007 --> 00:08:02.369
I think a lot of times when we talk about
state management you have to address a lot

116
00:08:02.369 --> 00:08:06.680
of kind of more fundamental concepts that
are actually making it a lot harder.

117
00:08:06.680 --> 00:08:09.473
So even with test,
one of the reasons why tests are so

118
00:08:09.473 --> 00:08:12.917
hard to write is because the code
that you're testing is so bad.

119
00:08:12.917 --> 00:08:18.020
And there's just not enough time in the
world to write good tests for bad code.

120
00:08:18.020 --> 00:08:20.340
And so it's one of these kind
of trailing indicator things.

121
00:08:20.340 --> 00:08:23.380
So we'll definitely dig into some
state management more later.

122
00:08:23.380 --> 00:08:23.980
So that was

