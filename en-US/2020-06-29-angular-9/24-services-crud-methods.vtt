WEBVTT

1
00:00:00.025 --> 00:00:05.974
And so that was Pretty simple,

2
00:00:05.974 --> 00:00:10.281
I think the big thing is you have to be

3
00:00:10.281 --> 00:00:15.164
aggressive about application state and

4
00:00:15.164 --> 00:00:19.051
moving that out of components.

5
00:00:19.051 --> 00:00:23.820
And so I'll talk about this more when I
get into the bunker of an architecture.

6
00:00:23.820 --> 00:00:29.830
But in regards to state management
components should do two things.

7
00:00:30.890 --> 00:00:37.290
One, it should consume just enough data
to satisfy and render its templates.

8
00:00:38.630 --> 00:00:45.030
It should also only capture events
from the user and delegate that,

9
00:00:46.780 --> 00:00:52.320
further up the stream into what
I would say, a logic layer.

10
00:00:52.320 --> 00:00:56.170
Or into a service that
handles that business logic.

11
00:00:56.170 --> 00:00:59.550
And so what you want, and so this is
really fundamental for state management.

12
00:01:00.770 --> 00:01:06.390
Is you want to keep as much state
out of your components is possible.

13
00:01:06.390 --> 00:01:14.450
How you accomplish that is by having very
razor-thin components and rich models.

14
00:01:14.450 --> 00:01:18.670
And so I think the first thing
when it comes to state management

15
00:01:18.670 --> 00:01:23.170
in an Angular application is
keep your components thin,

16
00:01:23.170 --> 00:01:28.660
keep your business logic in services,
and abstract out as much as you can.

17
00:01:28.660 --> 00:01:31.340
And the only thing a component should do

18
00:01:31.340 --> 00:01:34.660
is consume just enough information
to render its template.

19
00:01:34.660 --> 00:01:38.180
And if an event happens,
it captures that event and

20
00:01:38.180 --> 00:01:43.290
then it delegates it
back out to a service.

21
00:01:43.290 --> 00:01:46.160
And so
let me extend this just a bit further.

22
00:01:46.160 --> 00:01:49.160
What do I mean by that?

23
00:01:49.160 --> 00:01:54.060
And so if I go into the courses service,

24
00:01:54.060 --> 00:01:57.590
you could imagine when
you have a collection,

25
00:01:57.590 --> 00:02:01.745
you need to do typically kind of
four main things on a collection.

26
00:02:01.745 --> 00:02:03.397
Create

27
00:02:11.403 --> 00:02:15.388
I'm going to, Skip,

28
00:02:15.388 --> 00:02:19.960
gonna do it slightly out of order, but
base is create, read, update, and delete.

29
00:02:21.090 --> 00:02:21.869
So we'll do delete.

30
00:02:23.740 --> 00:02:31.700
And on top of that,
what I'll do is instead of read,

31
00:02:31.700 --> 00:02:38.970
I'll do all, so
give me all of this thing or

32
00:02:38.970 --> 00:02:44.420
find, just give me one of these things.

33
00:02:44.420 --> 00:02:49.510
And so if we go here, and we just
think about what this would look like.

34
00:02:49.510 --> 00:02:58.000
So, for find, it would just take a course
ID and it would return a course.

35
00:02:58.000 --> 00:03:00.859
For create,
it would just take an entire course,

36
00:03:02.760 --> 00:03:05.480
update it would also
take an entire course.

37
00:03:07.840 --> 00:03:13.416
And for Delete, it would take a course ID.

38
00:03:15.129 --> 00:03:19.891
And then all,
it will take no parameters and

39
00:03:19.891 --> 00:03:24.794
it's just going to
return this dot courses.

40
00:03:28.702 --> 00:03:31.970
And so then what I can do is
I can set this to private.

41
00:03:33.370 --> 00:03:38.491
So I really should try to avoid
accessing this directly but

42
00:03:38.491 --> 00:03:41.008
expose it through a method.

43
00:03:41.008 --> 00:03:45.648
And Now,

44
00:03:50.685 --> 00:03:56.239
What I can do is I'm just going to do,
Well,

45
00:03:56.239 --> 00:04:02.912
more, so I'll fill in,
just probably gonna do find,

46
00:04:02.912 --> 00:04:07.555
but I will do CREATE COURSE, course so

47
00:04:07.555 --> 00:04:15.008
we're just going through and
Fleshing this out.

48
00:04:15.008 --> 00:04:19.874
So update, course, and

49
00:04:19.874 --> 00:04:23.126
delete course.

50
00:04:26.361 --> 00:04:31.377
And so this is where, now,
we're moving if I need to actually

51
00:04:31.377 --> 00:04:36.104
modify a collection that is controlled or
that falls under

52
00:04:36.104 --> 00:04:42.000
the preview of application state
versus I would say UI state.

53
00:04:42.000 --> 00:04:43.790
Then we need to move that into a service.

54
00:04:43.790 --> 00:04:48.162
So this is what I mean by moving
business logic out of your component.

55
00:04:48.162 --> 00:04:55.006
So then if we hop into the courses
component, where it says save course

56
00:04:57.703 --> 00:05:04.526
What we're going to do is we're
doing to do this.coursesService.

57
00:05:04.526 --> 00:05:12.915
And We're going to do
something here real quick.

58
00:05:12.915 --> 00:05:17.550
Cuz the question is, well,
if we're saving it, are we creating it?

59
00:05:17.550 --> 00:05:19.870
Or are we deleting it?

60
00:05:20.870 --> 00:05:23.960
So what I'm gonna do is I'm
gonna add course as a parameter.

61
00:05:23.960 --> 00:05:29.020
This is of course uh-huh,
going to be the selected course.

62
00:05:29.020 --> 00:05:33.750
But how do we know if this is a new or
an old course?

63
00:05:33.750 --> 00:05:37.815
Well, I can just check course.id.

64
00:05:39.320 --> 00:05:43.714
If it has an ID,
well guess what it exists, and

65
00:05:43.714 --> 00:05:46.774
we can just go ahead and update.

66
00:05:52.133 --> 00:05:56.958
But if it doesn't have an ID,

67
00:05:56.958 --> 00:06:02.174
then we can go ahead and create.

68
00:06:08.980 --> 00:06:14.490
And so notice now we're delegating
this out to the courses

69
00:06:14.490 --> 00:06:19.920
service versus handling it
directly in our component.

70
00:06:19.920 --> 00:06:24.122
Even though we're not doing much,
you can see we're starting to groom and

71
00:06:24.122 --> 00:06:25.932
shift that functionality out.

72
00:06:25.932 --> 00:06:29.029
so deletecourse, but

73
00:06:29.029 --> 00:06:35.040
we're just gonna send in courseId.

74
00:06:35.040 --> 00:06:36.510
There we go.

75
00:06:36.510 --> 00:06:42.008
And now we are, Just

76
00:06:42.008 --> 00:06:47.481
essentially taking this in
passing it to the service.

77
00:06:47.481 --> 00:06:54.352
Now the other thing that
we can do this.courses,

78
00:06:56.624 --> 00:07:01.080
And actually I wonder sorry,
not they're here.

79
00:07:01.080 --> 00:07:08.180
So if you notice course services courses,
it's telling us this is private.

80
00:07:08.180 --> 00:07:13.390
So it can't really stop you but
because once it gets compiled JavaScript

81
00:07:13.390 --> 00:07:20.480
doesn't have a concept of access
modifiers, but instead we will do all.

82
00:07:23.010 --> 00:07:28.063
Okay, so we have create, update, delete.

83
00:07:30.701 --> 00:07:38.124
And so let's hop back into
the code form savecourse, yes.

84
00:07:38.124 --> 00:07:42.345
So let me update the HTML.

85
00:07:45.628 --> 00:07:50.426
So when we hit submit what
we need to do is we need

86
00:07:50.426 --> 00:07:54.340
to just pass the selected course in.

87
00:07:54.340 --> 00:07:56.250
So this should render now.

88
00:07:56.250 --> 00:07:59.386
So if I go here, oops.

89
00:08:03.484 --> 00:08:09.119
CoursesService.all is not a function.

90
00:08:09.119 --> 00:08:13.624
I beg to differ,
let's see what I did wrong.

91
00:08:19.887 --> 00:08:21.698
Mm-hm.

92
00:08:24.154 --> 00:08:26.179
This looks like a function to me.

93
00:08:28.745 --> 00:08:38.685
Let me check the, I'll just restart
the server and do it again.

94
00:08:38.685 --> 00:08:40.360
Every once in a while,

95
00:08:40.360 --> 00:08:45.222
you'll see that kinda your build
server will just be like [SOUND].

96
00:08:45.222 --> 00:08:49.764
I know what to do, and so
I, on occasion will have to

97
00:08:49.764 --> 00:08:54.730
restart the build server just
because it jumps tracks,

98
00:08:54.730 --> 00:08:58.550
and so this may or may not be the case.

99
00:08:58.550 --> 00:09:05.230
But we have been running for a bit so
I wanted to go ahead and just do that.

100
00:09:05.230 --> 00:09:07.330
So should be going.

101
00:09:07.330 --> 00:09:09.120
Let's hop back into our template.

102
00:09:10.620 --> 00:09:11.130
There we go.

103
00:09:11.130 --> 00:09:13.300
So it actually does seem to be working.

104
00:09:15.398 --> 00:09:17.180
So now I select this.

105
00:09:17.180 --> 00:09:22.640
And if we go here,
you notice delete course,

106
00:09:22.640 --> 00:09:24.490
on console logs spell
wrong doesn't matter.

107
00:09:27.510 --> 00:09:31.742
If I go and I create a new

108
00:09:34.511 --> 00:09:39.230
Test, set this, well,
it didn't even exist, submit.

109
00:09:40.660 --> 00:09:44.060
Create course, the reason being is
that it didn't, it doesn't have an id.

110
00:09:44.060 --> 00:09:45.510
So, id of no.

111
00:09:45.510 --> 00:09:50.250
So this is kind of a way
to reuse your same form.

112
00:09:50.250 --> 00:09:54.100
Over and over, because actually nothing is
changing because the model is the same.

113
00:09:54.100 --> 00:09:58.280
Or if I select it, and
then I submit notice it's update course.

114
00:09:58.280 --> 00:09:59.080
And it's passing it in.

115
00:09:59.080 --> 00:10:04.790
So we are deleting, updating, reading.

116
00:10:04.790 --> 00:10:09.670
And so now what we've done is and
I think the most important

117
00:10:09.670 --> 00:10:14.770
thing is we have abstracted out,
not only the data model,

118
00:10:14.770 --> 00:10:18.410
but the functionality that's going
to manipulate that data model so

119
00:10:18.410 --> 00:10:22.080
that we can use it in other
places in the application.

120
00:10:22.080 --> 00:10:24.800
So this is really,
really important for state management,

121
00:10:26.030 --> 00:10:31.090
that you have a single source of truth.

122
00:10:31.090 --> 00:10:36.200
In that when you have application state
kind of spread and scattered across your

123
00:10:36.200 --> 00:10:42.270
components and across your application,
well, what is the single source of truth?

124
00:10:42.270 --> 00:10:47.070
How do you know what you
are referencing is in fact,

125
00:10:47.070 --> 00:10:49.930
the single source of truth or
what you wanna know?

126
00:10:49.930 --> 00:10:54.970
Or more importantly,
is because it's shared and it's mutable.

127
00:10:54.970 --> 00:10:59.672
How do you know that when the object
that you're referencing is safe

128
00:10:59.672 --> 00:11:04.467
from somebody else coming in and
mutating it without you knowing it.

129
00:11:04.467 --> 00:11:09.515
And so, how you start to consolidate
that is one, you consolidate

130
00:11:09.515 --> 00:11:15.270
your state into a single state tree
that you have one source of truth.

131
00:11:15.270 --> 00:11:23.130
And then you essentially move to immutable
operations to allow for when you

132
00:11:24.250 --> 00:11:29.550
modify that if somebody is referencing
an old for instance, data structure,

133
00:11:29.550 --> 00:11:34.600
that it is not going to be kind
of changed under your feet.

134
00:11:34.600 --> 00:11:39.870
An example of that is or
share mutable state,

135
00:11:39.870 --> 00:11:45.870
anecdotally is if anybody has
ever been shopping on Amazon.

136
00:11:45.870 --> 00:11:51.990
And, for instance, your significant
other in this case my wife, has the same

137
00:11:51.990 --> 00:11:56.100
account and so there's been times where
I'm like, I really wanna buy this book.

138
00:11:56.100 --> 00:11:57.650
And I put the book in the cart.

139
00:11:57.650 --> 00:12:01.610
And I'm like, I need to buy some, some
air pods because these aren't working.

140
00:12:01.610 --> 00:12:03.820
I go back into my cart, and

141
00:12:03.820 --> 00:12:09.360
all of a sudden, there's a pair of
socks and a bouquet of flowers.

142
00:12:09.360 --> 00:12:14.210
And this is I think a really good example
when I see this I'm like coursed shared

143
00:12:14.210 --> 00:12:15.120
mutable state.

144
00:12:15.120 --> 00:12:18.050
You've just affected my shopping cart.

145
00:12:18.050 --> 00:12:21.390
And so this is how we start
from an application level,

146
00:12:21.390 --> 00:12:26.490
start to hedge against that is moving
your state into a single place and

147
00:12:26.490 --> 00:12:30.860
consolidate it and out of your components.

