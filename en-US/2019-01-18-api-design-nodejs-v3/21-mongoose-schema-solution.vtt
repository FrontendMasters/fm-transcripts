WEBVTT

1
00:00:00.070 --> 00:00:04.294
&gt;&gt; Scott Moss: Hopefully everybody had
a chance to create those fields for

2
00:00:04.294 --> 00:00:05.484
the item model.

3
00:00:05.484 --> 00:00:07.855
So I'm just gonna go ahead and
walk through them.

4
00:00:07.855 --> 00:00:10.544
Because the tests were pretty descriptive
on how to do them there's some

5
00:00:10.544 --> 00:00:12.840
really good examples inside
the list in the user resource.

6
00:00:12.840 --> 00:00:18.570
So I'm gonna hop into item model here and
pull up our test.

7
00:00:21.480 --> 00:00:24.204
Whoops, go away.

8
00:00:24.204 --> 00:00:29.264
So if we just run test models,
I already have the name

9
00:00:29.264 --> 00:00:35.820
on here from when I went over it,
so now we have the status line.

10
00:00:35.820 --> 00:00:38.580
And if we look at that,
this one has a few things.

11
00:00:38.580 --> 00:00:43.320
It expects there to be a default.

12
00:00:43.320 --> 00:00:45.990
Some enum stuff here, required.

13
00:00:45.990 --> 00:00:48.410
And a type,
which is a type of string here.

14
00:00:48.410 --> 00:00:52.910
So I'm gonna say status, and I'll talk
about all this stuff as I'm doing it.

15
00:00:52.910 --> 00:00:55.816
So status field,
looks like it has a type of string.

16
00:00:58.649 --> 00:01:04.050
&gt;&gt; Scott Moss: And then it has a required
validation on it which is true.

17
00:01:04.050 --> 00:01:04.930
So it has to be there.

18
00:01:06.350 --> 00:01:07.437
Then it has an enum.

19
00:01:07.437 --> 00:01:10.560
So enum basically,
is not only is it required, but

20
00:01:10.560 --> 00:01:12.710
it can only be one of these things.

21
00:01:12.710 --> 00:01:14.050
So that's what enum is saying.

22
00:01:14.050 --> 00:01:16.793
So it has to be either active,
complete, or past due.

23
00:01:16.793 --> 00:01:19.303
So that's a validation on here.

24
00:01:22.234 --> 00:01:26.308
&gt;&gt; Scott Moss: And then it has
a default value of one of the enums,

25
00:01:26.308 --> 00:01:27.764
which is active.

26
00:01:30.498 --> 00:01:33.173
&gt;&gt; Scott Moss: So that should pass and
satisfy that status one.

27
00:01:33.173 --> 00:01:34.928
Gonna run that again.

28
00:01:38.417 --> 00:01:41.241
&gt;&gt; Scott Moss: Looks like we have
two passing now, and it is for

29
00:01:41.241 --> 00:01:42.670
sure the status one.

30
00:01:42.670 --> 00:01:43.710
So that one's good.

31
00:01:43.710 --> 00:01:47.850
So the next one is notes, so
notes is just a type of string.

32
00:01:47.850 --> 00:01:51.728
That's the only thing that it's
looking for here, so I'll say notes,

33
00:01:51.728 --> 00:01:53.072
and it's a string type.

34
00:01:53.072 --> 00:01:54.895
And that's the only thing
that it's expecting, so

35
00:01:54.895 --> 00:02:00.894
I'll go run this,
&gt;&gt; Scott Moss: And

36
00:02:00.894 --> 00:02:05.160
it looks like we have three passing now,
so that's the notes.

37
00:02:05.160 --> 00:02:09.660
And then the due one is, looks like it's
just expecting a date, a type of date.

38
00:02:09.660 --> 00:02:12.900
So if I say due: type of Dates.

39
00:02:15.350 --> 00:02:16.164
And I'll run this one.

40
00:02:20.902 --> 00:02:23.970
&gt;&gt; Scott Moss: Got four passing and
it is the due one.

41
00:02:23.970 --> 00:02:28.330
So we've got that, and
now we have createdBy, so

42
00:02:28.330 --> 00:02:33.870
if you look at createdBy,
it's got this ObjectID weird thing.

43
00:02:33.870 --> 00:02:34.530
What the hell is that?

44
00:02:34.530 --> 00:02:36.260
That's not native to JavaScript.

45
00:02:36.260 --> 00:02:40.478
Then it's got this ref thing, so at this
point, I think this is where I would have

46
00:02:40.478 --> 00:02:43.560
to go look at another example
to see what's going on.

47
00:02:43.560 --> 00:02:45.010
So if we take a look at the list model,

48
00:02:45.010 --> 00:02:49.590
you can see it also has the exact same
created by field where it's referenced.

49
00:02:49.590 --> 00:02:54.750
Its type is ObjectID and it's referencing
the user and it's required true.

50
00:02:54.750 --> 00:02:58.390
So basically, this is how you set up
relationships in Mongo using Mongoose.

51
00:02:58.390 --> 00:03:03.300
This is saying, this field is going
to use the ID from a user and

52
00:03:03.300 --> 00:03:05.260
it's required as true,
that's what that's saying.

53
00:03:05.260 --> 00:03:08.000
So and the reason you put a ref here,
although you don't have to,

54
00:03:08.000 --> 00:03:12.280
but the reason you do that is when
you do what's called population in

55
00:03:12.280 --> 00:03:16.270
Mongo which is basically like
joining tables at runtime.

56
00:03:16.270 --> 00:03:20.470
It'll know what collection, or in this
case, or I'm sorry, in the case of like

57
00:03:20.470 --> 00:03:25.910
SQL or table, what table to go look up and
add this ID to search for.

58
00:03:25.910 --> 00:03:28.540
So if the ID was 1 and
you did a population,

59
00:03:28.540 --> 00:03:33.458
it knows to go look at the user table with
the ID of 1 to find the user with that ID.

60
00:03:33.458 --> 00:03:36.016
That's what the reference is for,
so it knows where and

61
00:03:36.016 --> 00:03:37.960
what table does this ID belong to.

62
00:03:37.960 --> 00:03:39.130
That's what ref means.

63
00:03:39.130 --> 00:03:40.250
You don't have to do this here.

64
00:03:40.250 --> 00:03:43.270
You can do this when you call
the populated method on the query itself.

65
00:03:43.270 --> 00:03:46.360
You can say, and the model you
want to reference is this one.

66
00:03:46.360 --> 00:03:50.254
But it's better just to put it
on the schema in my opinion.

67
00:03:50.254 --> 00:03:55.680
But even if it wasn't a schema you can
overwrite in a call to population as well.

68
00:03:55.680 --> 00:04:00.683
So that just means the type is

69
00:04:00.683 --> 00:04:05.550
mongoose.SchemaTypes.

70
00:04:05.550 --> 00:04:09.441
You can also do Schema.Types.

71
00:04:09.441 --> 00:04:11.805
They're like both the same thing.

72
00:04:11.805 --> 00:04:15.900
SchemaTypes.ObjectID.

73
00:04:15.900 --> 00:04:19.880
ObjectID is how Mongo does IDs.

74
00:04:19.880 --> 00:04:24.820
They're like uniquely generated
strings but represented as objects.

75
00:04:24.820 --> 00:04:25.950
They're weird.
They look like strings but

76
00:04:25.950 --> 00:04:26.650
they're actually objects.

77
00:04:26.650 --> 00:04:28.550
They're called ObjectIds.

78
00:04:28.550 --> 00:04:30.970
And you can go look at the algorithm for
them, but they generate,

79
00:04:30.970 --> 00:04:34.131
they can be generated off of time,
they can be generate off of another ID.

80
00:04:34.131 --> 00:04:37.828
They can regenerate off some value,
but if you look at a mongo ID,

81
00:04:37.828 --> 00:04:40.510
you know it's a mongo
ID by the way it looks.

82
00:04:40.510 --> 00:04:41.110
They all look the same.

83
00:04:42.900 --> 00:04:44.280
And then it says it's required.

84
00:04:47.320 --> 00:04:54.452
And lastly,
the ref must be from the user model.

85
00:04:54.452 --> 00:05:00.260
And the way we know that we can put user
here is that we go look at the user model.

86
00:05:00.260 --> 00:05:03.020
The name of the model,
if you scroll down, is called user.

87
00:05:04.110 --> 00:05:06.209
So whatever name is here,
that's the name we would ref with.

88
00:05:07.790 --> 00:05:12.340
So this is called person,
then we would ref person.

89
00:05:12.340 --> 00:05:13.143
But it's called user.

90
00:05:17.452 --> 00:05:18.714
&gt;&gt; Scott Moss: So
let's run the test again.

91
00:05:23.720 --> 00:05:25.261
&gt;&gt; Scott Moss: And that passed out, so

92
00:05:25.261 --> 00:05:28.895
the last one is list which is
very similar to createdBy.

93
00:05:30.520 --> 00:05:35.260
It is expecting a type of same thing,
so ObjectID.

94
00:05:36.730 --> 00:05:37.790
It, too, is required.

95
00:05:41.700 --> 00:05:46.960
And this time it
references the list model.

96
00:05:46.960 --> 00:05:49.210
And we know it's called list, because
if we go look at the model here and

97
00:05:49.210 --> 00:05:53.200
we scroll down,
it's called list right here.

98
00:05:53.200 --> 00:05:59.230
Of course, if you run the test,
all six pass.

99
00:05:59.230 --> 00:06:03.738
So the extra credit was to basically add

100
00:06:03.738 --> 00:06:09.040
a compound index to ensure all
tasks in a list have unique names.

101
00:06:09.040 --> 00:06:15.260
Or if you go look at the list model,
there is this listSchema.index, and

102
00:06:15.260 --> 00:06:19.083
basically what this is saying is, I want
to set a compound index on the field for

103
00:06:19.083 --> 00:06:21.770
user, and in the field for
name, and it must be unique.

104
00:06:21.770 --> 00:06:25.620
So the combination of a user ID and
a name on the list must be unique.

105
00:06:25.620 --> 00:06:33.510
So that's basically saying this name here,
when paired with a user, must be unique.

106
00:06:34.770 --> 00:06:39.240
So what I wanna do is do the same
thing except for, I wanna do it for

107
00:06:39.240 --> 00:06:40.310
an item in the list.

108
00:06:40.310 --> 00:06:44.217
So I'll go to model here,

109
00:06:44.217 --> 00:06:49.021
I'll say ItemSchema.index.

110
00:06:49.021 --> 00:06:53.847
And I wanna say for a list, I want to make

111
00:06:53.847 --> 00:06:58.550
this name,
&gt;&gt; Scott Moss: Unique.

112
00:07:01.270 --> 00:07:02.713
So this is, on insert,

113
00:07:02.713 --> 00:07:07.626
if you try to insert an item with the name
of clean room and it belonged to list one,

114
00:07:07.626 --> 00:07:11.170
and they tried to insert another
item called clean room and

115
00:07:11.170 --> 00:07:16.014
it also belonged to list one, it'll error
out and say you can't do that because

116
00:07:16.014 --> 00:07:20.762
there's already an item with the name
of clean room that belongs to list one.

117
00:07:20.762 --> 00:07:22.510
So you have to change the list or
change the name.

118
00:07:23.750 --> 00:07:24.959
So that's a compound index.

119
00:07:26.250 --> 00:07:29.680
That's a little different than
putting unique on the name itself.

120
00:07:29.680 --> 00:07:33.540
So I just made the name itself unique,
the difference is, it's now, that the name

121
00:07:33.540 --> 00:07:37.610
has got to be unique across the database
which is probably not something you want.

122
00:07:37.610 --> 00:07:40.650
Because I'm sure, you might have more
than one user with a different name or

123
00:07:40.650 --> 00:07:41.700
even a list with a different name.

124
00:07:41.700 --> 00:07:43.598
So that would suck.

125
00:07:43.598 --> 00:07:47.543
That would be really bad to do that if
all the names of tasks had to be unique,

126
00:07:47.543 --> 00:07:51.444
because somebody else in the world came
out with that name other than you.

127
00:07:54.157 --> 00:07:56.030
&gt;&gt; Speaker 2: What do the 1s mean?

128
00:07:56.030 --> 00:07:56.960
&gt;&gt; Scott Moss: Good question.
So

129
00:07:56.960 --> 00:07:58.600
the 1s here just mean the sorting order.

130
00:07:58.600 --> 00:08:04.813
Right, cuz our index is basically, index
is, I don't wanna go in too much detail,

131
00:08:04.813 --> 00:08:09.468
at least in Mongo,
it's a file with all these values, right?

132
00:08:09.468 --> 00:08:10.884
And what it does,
it reads those files in memory,

133
00:08:10.884 --> 00:08:12.022
eventually it will put them in memory.

134
00:08:12.022 --> 00:08:14.262
So when it goes to look for those indexes,

135
00:08:14.262 --> 00:08:16.760
on write it will save into that file,
right?

136
00:08:16.760 --> 00:08:20.133
So we also look at them, it has to
search those indexes to find it and

137
00:08:20.133 --> 00:08:22.730
then it locates it, the actual document.

138
00:08:22.730 --> 00:08:23.960
This one just tells us,

139
00:08:23.960 --> 00:08:29.590
in what order do you wanna sort
these fields on the index itself?

140
00:08:29.590 --> 00:08:32.859
So do you wanna have it to be
negative 1 or do you want it to be 1?

141
00:08:32.859 --> 00:08:35.600
So it's basically just
sorting out the indexes.

142
00:08:36.680 --> 00:08:42.340
And indexing by itself is literally,
I could talk about indexes for

143
00:08:42.340 --> 00:08:45.570
a month, and
I'm not an index expert at all for sure.

144
00:08:45.570 --> 00:08:47.460
But yeah, it's really complex.

145
00:08:47.460 --> 00:08:48.888
But yeah, that's just for sorting.

146
00:08:51.091 --> 00:08:51.930
&gt;&gt; Scott Moss: Any other questions?

147
00:08:51.930 --> 00:08:53.246
Yes, Mark?

148
00:08:53.246 --> 00:08:54.696
&gt;&gt; Mark: Does ref have to be a string?

149
00:08:56.611 --> 00:08:57.824
&gt;&gt; Scott Moss: Does which one?

150
00:08:57.824 --> 00:08:58.861
Ref.

151
00:08:58.861 --> 00:09:02.466
Yes, ref has to be a string.

152
00:09:02.466 --> 00:09:05.745
You can't really put anything else here,
not that I know of.

153
00:09:07.170 --> 00:09:10.576
&gt;&gt; Scott Moss: Yeah, I don't know, you
literally, the only thing you can put here

154
00:09:10.576 --> 00:09:13.650
is the reference to the collection
that you wanna reference.

155
00:09:13.650 --> 00:09:17.380
In this case, the collections are the
names of the models that you create.

156
00:09:17.380 --> 00:09:20.150
So yeah,
not only will it have to be a string,

157
00:09:20.150 --> 00:09:24.130
it will have to be a real registered
model that you created at some point.

158
00:09:24.130 --> 00:09:26.060
So if you put something random here,
it won't work.

159
00:09:29.241 --> 00:09:32.998
&gt;&gt; Speaker 3: When I did this,
I started with createdBy,

160
00:09:32.998 --> 00:09:35.850
as the ObjectID on schema types.

161
00:09:35.850 --> 00:09:36.530
&gt;&gt; Scott Moss: Yes.

162
00:09:36.530 --> 00:09:38.010
&gt;&gt; Speaker 3: And
then as on to the other ones,

163
00:09:38.010 --> 00:09:42.110
I assume that string was also on schema
types and date was also on schema types?

164
00:09:42.110 --> 00:09:44.762
It has it on there.

165
00:09:44.762 --> 00:09:48.440
Any idea what those Mongoose
data types are for?

166
00:09:48.440 --> 00:09:50.060
&gt;&gt; Scott Moss: They're
just referencing this.

167
00:09:50.060 --> 00:09:53.030
They're just like,
let's just add them here, why not?

168
00:09:53.030 --> 00:09:56.250
But they're just doing this internally,
yeah, Mark.

169
00:09:56.250 --> 00:09:59.130
&gt;&gt; Mark: Does the order in any
of these definitions matter?

170
00:10:00.190 --> 00:10:03.806
&gt;&gt; Scott Moss: Order and the schema
definitions do not matter at all.

171
00:10:03.806 --> 00:10:05.060
You can put them in
whatever order you want.

172
00:10:05.060 --> 00:10:07.670
Just put them in whatever order makes
sense to you as a developer and

173
00:10:07.670 --> 00:10:11.460
a team will make sense for y'all, but
no, it's an object so it doesn't matter.

174
00:10:11.460 --> 00:10:15.361
But down here on the indexes,
they do matter.

175
00:10:15.361 --> 00:10:20.036
Whatever, I know this sounds weird cuz
it's JavaScript and objects don't have

176
00:10:20.036 --> 00:10:23.954
order, but whatever fields you
define first on this index will be,

177
00:10:23.954 --> 00:10:28.440
when you make a compound index,
it's a pair, right, so it's an umbrella.

178
00:10:28.440 --> 00:10:32.500
So having an index where the list is first
and then name's second is different than

179
00:10:32.500 --> 00:10:35.355
having an index where the name
is first and the list is second.

180
00:10:35.355 --> 00:10:38.540
Cuz it's going to go to the list,
narrow down all the possibilities,

181
00:10:38.540 --> 00:10:39.240
and then find the name.

182
00:10:39.240 --> 00:10:41.430
If it was the other way
around it would go to name,

183
00:10:41.430 --> 00:10:43.850
narrow down all of the possibilities,
and find the list.

184
00:10:43.850 --> 00:10:47.880
So that is the only place in this
whole file where order matters.

185
00:10:47.880 --> 00:10:48.430
Which again,

186
00:10:48.430 --> 00:10:53.200
I know this sounds silly because objects
don't have order in JavaScript, but

187
00:10:53.200 --> 00:10:56.970
Mongo uses something called BSON, which
is like JSON which does have ordering.

188
00:10:56.970 --> 00:10:58.590
It's really complicated.

189
00:10:58.590 --> 00:11:00.420
So they do have ordering
capabilities here.

190
00:11:01.510 --> 00:11:02.880
So yeah, that's the only place where

191
00:11:02.880 --> 00:11:04.550
ordering actually matters
in this entire file.

