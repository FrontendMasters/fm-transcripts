WEBVTT

1
00:00:00.184 --> 00:00:03.384
&gt;&gt; Scott Moss: Okay, so
I'm gonna start with signup.

2
00:00:03.384 --> 00:00:07.582
So for signup I know there's
gonna be a email and password, or

3
00:00:07.582 --> 00:00:12.050
I'm requiring an email and
password to be on the request.body.

4
00:00:12.050 --> 00:00:14.171
The client should send it.

5
00:00:14.171 --> 00:00:16.970
And then I need to create a new user for
that.

6
00:00:16.970 --> 00:00:19.946
So if we go look at a user model,
which is already created for you,

7
00:00:19.946 --> 00:00:22.341
there's a few things that
a user absolutely needs.

8
00:00:22.341 --> 00:00:24.012
It needs an email to be unique.

9
00:00:24.012 --> 00:00:25.465
It needs a password, and

10
00:00:25.465 --> 00:00:29.143
it has this settings object that
has some required stuff on it.

11
00:00:29.143 --> 00:00:33.007
And they all have defaults, so
all those should be good for us.

12
00:00:33.007 --> 00:00:35.183
So all we really need is the email and
the password.

13
00:00:35.183 --> 00:00:39.122
And like I said, the passwords are already
gonna be hashed for you and saved.

14
00:00:39.122 --> 00:00:41.287
So we're not saving
passwords in plaintext.

15
00:00:41.287 --> 00:00:42.748
And we should be good here.

16
00:00:42.748 --> 00:00:46.763
So I'm gonna go ahead and do that signup.

17
00:00:46.763 --> 00:00:53.259
So I'm gonna say const user = await

18
00:00:53.259 --> 00:01:02.096
User.create(rec.body)
&gt;&gt; Scott Moss: That's it,

19
00:01:02.096 --> 00:01:03.944
that should create a user.

20
00:01:03.944 --> 00:01:08.474
The problem is, because a user has
validations on it as a unique email,

21
00:01:08.474 --> 00:01:10.219
this creation might fail.

22
00:01:10.219 --> 00:01:14.024
So because it might fail, you probably
wanna do a try catch, or do promises,

23
00:01:14.024 --> 00:01:17.317
or whatever you wanna do, but
you should definitely handle that.

24
00:01:17.317 --> 00:01:23.012
Because if it fails that means
somebody already has this email.

25
00:01:23.012 --> 00:01:25.791
All right, if somebody already has
this email then you can't sign up.

26
00:01:25.791 --> 00:01:28.831
So we wanna do something like,
first let's just log the error so

27
00:01:28.831 --> 00:01:30.363
we can see that it is that error.

28
00:01:31.843 --> 00:01:36.172
&gt;&gt; Scott Moss: And then what we'll do is,

29
00:01:36.172 --> 00:01:41.451
we'll say, return res.status

30
00:01:43.066 --> 00:01:47.418
&gt;&gt; Scott Moss: (400).end() ,you can't use

31
00:01:47.418 --> 00:01:48.213
that.

32
00:01:48.213 --> 00:01:50.318
So that's one thing.

33
00:01:50.318 --> 00:01:53.231
So we got the user here.

34
00:01:53.231 --> 00:01:58.052
The next thing we wanna do is, so now
that we have a user, if it is successful,

35
00:01:58.052 --> 00:01:59.740
we want to create a token.

36
00:01:59.740 --> 00:02:03.887
So let's say const token = newToken.

37
00:02:03.887 --> 00:02:05.455
And that just takes in the user object.

38
00:02:05.455 --> 00:02:08.399
So we just pass in user like that.

39
00:02:08.399 --> 00:02:11.112
So we'll pass in the user object,
that should give us a token.

40
00:02:11.112 --> 00:02:19.119
And from there we'll just
say res.send( token ).

41
00:02:21.104 --> 00:02:22.748
&gt;&gt; Scott Moss: So this may or
may not pass all the tests, so

42
00:02:22.748 --> 00:02:26.025
we'll run the tests to see what else we're
missing here, and we'll go from there.

43
00:02:26.025 --> 00:02:27.976
So let's run these tests.

44
00:02:32.776 --> 00:02:37.415
&gt;&gt; Speaker 2: What's the difference
between .send and .end?

45
00:02:37.415 --> 00:02:39.672
&gt;&gt; Scott Moss: .send sends back some data,

46
00:02:39.672 --> 00:02:43.202
.end just ends it without
sending anything.

47
00:02:43.202 --> 00:02:45.051
That's it.
It's the same thing if you did .send

48
00:02:45.051 --> 00:02:45.667
with nothing.

49
00:02:48.290 --> 00:02:51.590
&gt;&gt; Scott Moss: End is just explicitly
ending the request and stopping it.

50
00:02:51.590 --> 00:02:53.919
.send also stops
the request with a message.

51
00:02:56.063 --> 00:02:59.115
&gt;&gt; Scott Moss: So
if we look at that test here for signup,

52
00:02:59.115 --> 00:03:04.447
looks like we're still failing, so
it requires an email and password.

53
00:03:04.447 --> 00:03:07.729
Creates user and
sends new token from user.

54
00:03:07.729 --> 00:03:09.607
So it requires an email and password.

55
00:03:09.607 --> 00:03:14.858
So if I go and look at that test,
then I'm guessing that test is testing

56
00:03:14.858 --> 00:03:20.469
something that, it's mocking out
the email and password to be like, no.

57
00:03:20.469 --> 00:03:23.824
And it's saying that it should test for
that.

58
00:03:23.824 --> 00:03:27.679
So if I go look, yep, there's no email and
password on that request body and

59
00:03:27.679 --> 00:03:30.103
it's expecting it to be
a 400 because of it.

60
00:03:30.103 --> 00:03:31.485
So I need to test for that.

61
00:03:31.485 --> 00:03:36.363
So I need to come here and say,

62
00:03:36.363 --> 00:03:41.047
if 0 req.body.email, or

63
00:03:41.047 --> 00:03:45.926
if 0 req.body.password,

64
00:03:45.926 --> 00:03:49.839
because you need both.

65
00:03:49.839 --> 00:03:53.114
Then I'm gonna go ahead and I'm not
even gonna send this to the database.

66
00:03:53.114 --> 00:03:55.492
I'm just gonna go ahead and
say, get out of here.

67
00:03:55.492 --> 00:03:57.915
Like, you can't do that.

68
00:03:57.915 --> 00:04:02.839
And it's looking like it expects
some message property here on .send

69
00:04:02.839 --> 00:04:04.178
instead of .end.

70
00:04:04.178 --> 00:04:10.396
So I'm gonna do a .send
here with a message

71
00:04:10.396 --> 00:04:16.629
property of Email and password required.

72
00:04:23.765 --> 00:04:24.933
&gt;&gt; Scott Moss: So
we'll run a test for that.

73
00:04:33.894 --> 00:04:35.490
&gt;&gt; Scott Moss: And if we scroll up here,

74
00:04:35.490 --> 00:04:39.526
we're gonna see that passes
the requires email and password.

75
00:04:39.526 --> 00:04:43.760
And then the next one says, creates
user and sends new token from user.

76
00:04:43.760 --> 00:04:44.880
So if we look at the test.

77
00:04:47.631 --> 00:04:51.277
&gt;&gt; Scott Moss: It's
expecting a .send here,

78
00:04:51.277 --> 00:04:55.733
and it's expecting the email to be on,

79
00:04:55.733 --> 00:05:00.459
it's expecting the email to be the same as

80
00:05:00.459 --> 00:05:05.064
the user that was created by the user ID.

81
00:05:05.064 --> 00:05:12.163
So if I go here to,
&gt;&gt; Scott Moss: Sorry, signup here.

82
00:05:12.163 --> 00:05:16.496
Basically, what it's trying to,
actually, let me see,

83
00:05:16.496 --> 00:05:19.000
user.email verify token results.

84
00:05:20.977 --> 00:05:22.081
&gt;&gt; Scott Moss: .send.

85
00:05:24.153 --> 00:05:24.760
&gt;&gt; Scott Moss: Start.

86
00:05:26.473 --> 00:05:28.118
&gt;&gt; Scott Moss: Status, so
I've gotta do a status here.

87
00:05:29.998 --> 00:05:33.194
&gt;&gt; Scott Moss: Status of 201 for

88
00:05:33.194 --> 00:05:37.894
a successful post, .send.

89
00:05:37.894 --> 00:05:38.528
There we go.

90
00:05:50.975 --> 00:05:55.367
&gt;&gt; Scott Moss: Okay, so we got res.status.

91
00:05:55.367 --> 00:05:57.334
And then what else are we missing?

92
00:05:57.334 --> 00:06:00.015
Creates user and sends a token from user.

93
00:06:00.015 --> 00:06:01.175
&gt;&gt; Speaker 2: I thought it was 401 there.

94
00:06:02.991 --> 00:06:05.403
&gt;&gt; Scott Moss: All right,
it's fine now, I guess I just,

95
00:06:05.403 --> 00:06:07.175
I had to put a return statement.

96
00:06:07.175 --> 00:06:10.014
[COUGH] So yeah,
I was just missing the return statement.

97
00:06:10.014 --> 00:06:11.356
So yeah, that was it,

98
00:06:11.356 --> 00:06:15.679
just needed to put a return statement
here to stop it from going further.

