WEBVTT

1
00:00:00.030 --> 00:00:02.945
&gt;&gt; Scott Moss: I'm just gonna show
you some more schema stuff, but

2
00:00:02.945 --> 00:00:07.714
not too much, and then you're gonna break
off into an exercise where you're gonna be

3
00:00:07.714 --> 00:00:11.955
developing the schema and the model for
the item resource, and like I said,

4
00:00:11.955 --> 00:00:15.993
it will be test associated with it so
as long as you get those test to pass,

5
00:00:15.993 --> 00:00:19.410
you'll be good, and
these tests are very descriptive.

6
00:00:19.410 --> 00:00:23.915
They literally tell you exactly what you
need to do, so even if you had no clue how

7
00:00:23.915 --> 00:00:27.491
to do this, the test tells you
exactly what it's looking for.

8
00:00:27.491 --> 00:00:30.260
So I'm confident that you'll
be able to figure it out.

9
00:00:30.260 --> 00:00:32.780
So let's do that.

10
00:00:32.780 --> 00:00:38.784
So I'm going to check out to,
&gt;&gt; Scott Moss: Let's stash this.

11
00:00:42.153 --> 00:00:43.166
&gt;&gt; Scott Moss: Start out
with lesson three here.

12
00:00:46.255 --> 00:00:48.207
&gt;&gt; Scott Moss: And
basically, lesson three,

13
00:00:48.207 --> 00:00:53.559
if you've already check out to the lesson
two solution branch, it's the same branch,

14
00:00:53.559 --> 00:00:58.070
there's just, if you go look at
the item model, there's nothing here.

15
00:00:58.070 --> 00:01:02.360
There's a model that's being created,
but the schema has no information on it.

16
00:01:02.360 --> 00:01:05.215
We have to fill some information
into this schema here,

17
00:01:05.215 --> 00:01:08.676
because right now the item schema
has absolutely nothing on it, and

18
00:01:08.676 --> 00:01:12.400
the only way to know what you need to
put in here is if you execute the test.

19
00:01:12.400 --> 00:01:15.997
So if you execute the test,
it'll tell you, it's expecting this field,

20
00:01:15.997 --> 00:01:19.422
this validation, this name, and
you have to fulfill those tests, and

21
00:01:19.422 --> 00:01:21.770
this is where you're going
to be putting it in.

22
00:01:21.770 --> 00:01:23.100
You'll be putting it
here in this schema here.

23
00:01:25.729 --> 00:01:27.945
&gt;&gt; Scott Moss: So just to give you some
examples I'm gonna run the test, and

24
00:01:27.945 --> 00:01:29.430
I'm gonna do one for you.

25
00:01:29.430 --> 00:01:33.143
So if I say yarn and the test command for

26
00:01:33.143 --> 00:01:39.074
this one is going to be npm run
test-models I believe, yes.

27
00:01:42.831 --> 00:01:44.385
&gt;&gt; Scott Moss: Of course
it is going to fail.

28
00:01:44.385 --> 00:01:48.692
You can see this looks like about
six tests that's failing here, and

29
00:01:48.692 --> 00:01:53.200
it's testing for each field name
that's supposed to be on the schema.

30
00:01:53.200 --> 00:01:58.440
So, for instance,
it's saying item model, schema name.

31
00:01:58.440 --> 00:02:03.204
It expected it to have a max length of 50,
required to be true,

32
00:02:03.204 --> 00:02:06.043
trim true, and a type that is string.

33
00:02:06.043 --> 00:02:08.860
So I can satisfy some of that
by just looking at the test.

34
00:02:08.860 --> 00:02:11.190
So if I say, okay,
there must be a name field here.

35
00:02:12.410 --> 00:02:13.866
Its type must be string.

36
00:02:18.020 --> 00:02:21.607
&gt;&gt; Scott Moss: It is required.

37
00:02:21.607 --> 00:02:22.980
It has something called trim: true.

38
00:02:22.980 --> 00:02:25.650
I have no idea what that is, but
that's what it's looking for.

39
00:02:25.650 --> 00:02:29.349
But basically what that is, that's just
saying this is a string, if it has

40
00:02:29.349 --> 00:02:33.305
empty spaces before or after, trim it
just like if you call trim in JavaScript.

41
00:02:33.305 --> 00:02:36.260
You call it .trim in JavaScript,
it'll trim the spaces.

42
00:02:36.260 --> 00:02:39.400
So that's what it's saying there, and

43
00:02:39.400 --> 00:02:43.000
then it has another validation called
maxlength of 50, so it's expecting that.

44
00:02:44.030 --> 00:02:47.010
So that right there
might satisfy that test.

45
00:02:50.178 --> 00:02:53.030
&gt;&gt; Scott Moss: So if we scroll up,
it looks like we got one to pass, and

46
00:02:53.030 --> 00:02:55.100
it should have been that one.

47
00:02:55.100 --> 00:02:57.270
So yeah, that one passed.

48
00:02:57.270 --> 00:03:00.510
So that's the flow that you're gonna
go through to get these fields

49
00:03:00.510 --> 00:03:02.480
in the right way that you need them to be.

50
00:03:02.480 --> 00:03:05.030
So item, like I said, is basically,
it's like a to-do item.

51
00:03:05.030 --> 00:03:08.353
This is like a very basic API for
a to-do app, and

52
00:03:08.353 --> 00:03:11.795
you're just filling out these fields for
Mongo.

53
00:03:11.795 --> 00:03:16.072
So, like I said,
check out to lesson three,

54
00:03:16.072 --> 00:03:21.486
if we look at the readme,
just to go over it one more time.

55
00:03:21.486 --> 00:03:23.247
You're gonna be creating the schemas.

56
00:03:23.247 --> 00:03:24.432
It's on lesson three branch.

57
00:03:24.432 --> 00:03:27.939
The test command is gonna test models,
where there's yarn or NPM, and

58
00:03:27.939 --> 00:03:31.679
the things you're gonna be doing is
you're gonna be creating the schema for

59
00:03:31.679 --> 00:03:34.776
the item resource,
you're gonna add the correct fields, and

60
00:03:34.776 --> 00:03:38.576
this says look at the test here,
you're gonna add the correct validations,

61
00:03:38.576 --> 00:03:42.650
also look at the test, the test
does exactly what we are expecting.

62
00:03:42.650 --> 00:03:47.375
For extra credit, if you know how to use
Mongo, or if you just wanna take the extra

63
00:03:47.375 --> 00:03:51.682
credit and figure out how to do it,
I'll give you a hint if you wanna do it,

64
00:03:51.682 --> 00:03:55.949
add a compound index to ensure all
the tasks in a list have a unique names.

65
00:03:55.949 --> 00:03:57.431
You're looking at me like what
the hell I'm talking about.

66
00:03:57.431 --> 00:03:59.755
That's because I've made it extra credit,
so you don't have to do that.

67
00:03:59.755 --> 00:04:03.085
You should be looking at me like
what am I talking about, cuz that's,

68
00:04:03.085 --> 00:04:06.755
you probably only how to do that if
you've ever used Mongo before, but yeah,

69
00:04:06.755 --> 00:04:08.062
that's basically index.

70
00:04:08.062 --> 00:04:13.243
So we want all the items to have unique
names that belong to a list, so we don't

71
00:04:13.243 --> 00:04:18.300
want it to be unique in the database,
but we want them to be unique per list.

72
00:04:18.300 --> 00:04:21.702
So it's a compound index, it's a little
little trickier to do, and then,

73
00:04:21.702 --> 00:04:25.473
of course, like always, get all the tests
to pass, and if you fulfill all of these,

74
00:04:25.473 --> 00:04:27.860
except the extra credit,
all the tests will pass.

75
00:04:27.860 --> 00:04:29.129
There's no test for the extra credit, so

76
00:04:29.129 --> 00:04:30.625
you don't have to worry
about that one failing.

