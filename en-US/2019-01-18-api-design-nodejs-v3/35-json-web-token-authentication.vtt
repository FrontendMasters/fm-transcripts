WEBVTT

1
00:00:00.090 --> 00:00:03.500
&gt;&gt; Scott Moss: So JWT authentication.

2
00:00:03.500 --> 00:00:08.340
They're basically tokens passed to every
single request to check on the auth

3
00:00:08.340 --> 00:00:09.290
server.

4
00:00:09.290 --> 00:00:14.920
So if you compare it to something like
sessions and cookies on the server,

5
00:00:14.920 --> 00:00:18.130
right, that's a traditional authentication
mechanism where, on the server,

6
00:00:18.130 --> 00:00:20.710
the server keeps track of
sessions stored somewhere.

7
00:00:20.710 --> 00:00:24.620
You have some session state
where it's in redis, in memory.

8
00:00:24.620 --> 00:00:28.490
Somewhere you're keeping track of
sessions of a user that's interacted with

9
00:00:28.490 --> 00:00:31.520
the database and that's how you
know they are authenticated or not.

10
00:00:31.520 --> 00:00:32.960
When they're not,
you get rid of that session.

11
00:00:32.960 --> 00:00:34.530
They had to create a new session.

12
00:00:34.530 --> 00:00:38.130
So that's like a stateful
authentication method.

13
00:00:38.130 --> 00:00:39.210
JWT is the quite opposite.

14
00:00:39.210 --> 00:00:40.150
It's stateless.

15
00:00:40.150 --> 00:00:41.470
The server doesn't keep track of anything.

16
00:00:41.470 --> 00:00:43.910
It has no idea what's happening.

17
00:00:43.910 --> 00:00:46.760
They're not keeping track of
who's asking for anything.

18
00:00:46.760 --> 00:00:51.650
All the server does is create a token and
gives it to an authenticated requestor.

19
00:00:51.650 --> 00:00:53.090
And from that point on,

20
00:00:53.090 --> 00:00:56.730
the requestor has to send that
token on every single request.

21
00:00:56.730 --> 00:00:57.670
It's stateless.

22
00:00:57.670 --> 00:00:59.350
It doesn't remember what
happened last time.

23
00:00:59.350 --> 00:01:01.030
You have to send it every single time,

24
00:01:01.030 --> 00:01:03.680
and then it checks every single time
to see if you're authenticated.

25
00:01:05.250 --> 00:01:08.660
So a JWT authentication is
basically a bearer token strategy

26
00:01:08.660 --> 00:01:10.600
that allows the API to be
stateless with user auth.

27
00:01:10.600 --> 00:01:12.210
What does that mean?

28
00:01:12.210 --> 00:01:16.050
Bearer tokens are basically just
somebody came up with a way

29
00:01:16.050 --> 00:01:19.340
that they can use tokens to authenticate
in the authorization header and

30
00:01:19.340 --> 00:01:22.990
they call them bearer tokens and
JWT is just one type of those.

31
00:01:22.990 --> 00:01:27.579
There is many types of bearer
authentication methods whether it's like

32
00:01:27.579 --> 00:01:30.521
API keys or whatever,
JWT is just one of them.

33
00:01:30.521 --> 00:01:33.677
So the reason I'm saying bearer because
you'll see that word when you're

34
00:01:33.677 --> 00:01:35.220
implementing this.

35
00:01:35.220 --> 00:01:38.510
&gt;&gt; Speaker 2: Does bearer mean
the same thing as client?

36
00:01:38.510 --> 00:01:42.910
&gt;&gt; Scott Moss: Yeah basically,
yeah, it's basically saying your

37
00:01:42.910 --> 00:01:47.360
API is allowing some untrusted
resource to access it.

38
00:01:47.360 --> 00:01:51.420
Right, this happened like I said
when SaaS company started saying,

39
00:01:51.420 --> 00:01:54.470
we wanna develop a API product and
allow people to integrate, so

40
00:01:54.470 --> 00:01:58.132
we need a way to have untrusted
resources access our API.

41
00:01:58.132 --> 00:02:00.520
Whereas everything before
then was all internal.

42
00:02:00.520 --> 00:02:04.664
You only use your API for your product,
you never really let somebody else use

43
00:02:04.664 --> 00:02:08.509
it so you don't have to think about
that so this is where this came from.

44
00:02:08.509 --> 00:02:11.869
JWTs are created by a combination
of secrets on the API and

45
00:02:11.869 --> 00:02:15.654
a payload like a user object, so
you'll have like some secret.

46
00:02:15.654 --> 00:02:18.540
You'll pick out the type of
algorithm you wanna run to hash it.

47
00:02:18.540 --> 00:02:25.900
And then you basically hash that payload,
or whatever algorithm you wanna run on it.

48
00:02:25.900 --> 00:02:28.640
And that payload is usually, sometimes,
something to do with the user.

49
00:02:28.640 --> 00:02:30.090
Something to identify about the user.

50
00:02:30.090 --> 00:02:33.060
It's role, it's Id,
something to identify by it.

51
00:02:33.060 --> 00:02:36.890
So after we verify this data we see
on the request, we know who it was.

52
00:02:36.890 --> 00:02:38.780
Now we can do our identification part.

53
00:02:38.780 --> 00:02:40.915
So we'll authenticate them,
then we'll identify them,

54
00:02:40.915 --> 00:02:43.840
and we'll allow our
controllers to authorize them.

55
00:02:43.840 --> 00:02:45.563
And we can do all three of those with JWT.

56
00:02:47.916 --> 00:02:51.720
&gt;&gt; Scott Moss: Like I said, must be sent
with every single request where the API.

57
00:02:51.720 --> 00:02:55.040
And then API will then try to
verify the token was created

58
00:02:55.040 --> 00:02:56.230
with the expected secrets.

59
00:02:56.230 --> 00:03:01.870
So once you send API a token,
the API tries to verify that token,

60
00:03:01.870 --> 00:03:05.230
like, hey, was this token created
by me with these secrets?

61
00:03:05.230 --> 00:03:10.190
And if it was, it will then undo
the process of tokenizing that object and

62
00:03:10.190 --> 00:03:13.880
it will get back the payload that
was created to make that token.

63
00:03:13.880 --> 00:03:17.750
So if you created a token off a user
object, once the token is verified,

64
00:03:17.750 --> 00:03:19.956
you'll get back that same user object.

65
00:03:19.956 --> 00:03:23.140
So it's a way of passing around
a stateless object, basically.

66
00:03:23.140 --> 00:03:24.930
Then now, you know who the user is.

67
00:03:24.930 --> 00:03:29.370
You can pass that information along across
middleware so your controllers know who

68
00:03:29.370 --> 00:03:33.700
it is trying to access some type of
data and if they're authorized to do it.

69
00:03:33.700 --> 00:03:34.499
So, it's completely stateless.

70
00:03:37.944 --> 00:03:41.490
After a successful verification,
JWT payload is accessible in the server.

71
00:03:41.490 --> 00:03:44.540
And like I said, it can be used for
authorization and identification.

72
00:03:46.270 --> 00:03:48.590
Any questions on JWT stuff?

73
00:03:48.590 --> 00:03:55.457
&gt;&gt; Speaker 2: Is the overhead considered
to be relatively small for this?

74
00:03:55.457 --> 00:03:58.290
&gt;&gt; Scott Moss: Yeah,
it's actually pretty small.

75
00:03:58.290 --> 00:04:02.380
Surprisingly, in MyTAN it's
easier to set up a system

76
00:04:02.380 --> 00:04:07.590
to use JSON web tokens than it
is what cookies in sessions.

77
00:04:07.590 --> 00:04:09.680
Store sessions you need
some type of session state.

78
00:04:09.680 --> 00:04:11.230
You gotta set up Redis.

79
00:04:11.230 --> 00:04:14.736
And you can even store sessions of Mongo
if you want to cuz Mongo uses in memory.

80
00:04:14.736 --> 00:04:16.940
There's nothing that's
set up on the server.

81
00:04:16.940 --> 00:04:18.410
Like there's literally nothing.

82
00:04:18.410 --> 00:04:20.060
It's basically free.

83
00:04:20.060 --> 00:04:23.830
It's not that hard at all because it's
pushing off all the work to the client.

84
00:04:23.830 --> 00:04:26.990
It's like client has to store
this token somewhere, not me.

85
00:04:26.990 --> 00:04:28.579
I don't care where you store it.

86
00:04:28.579 --> 00:04:29.919
Just send it to me, and

87
00:04:29.919 --> 00:04:32.769
I'm gonna check a header, and
then I'm gonna verify it, and that's it.

88
00:04:32.769 --> 00:04:33.619
I don't have to do anything else.

89
00:04:33.619 --> 00:04:39.089
So, yeah, the overhead is a lot simpler
than a stateful implementation.

