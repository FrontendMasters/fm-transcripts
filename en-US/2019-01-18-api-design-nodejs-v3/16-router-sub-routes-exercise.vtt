WEBVTT

1
00:00:00.210 --> 00:00:03.050
&gt;&gt; Scott Moss: So we're gonna
head over to the next exercise.

2
00:00:03.050 --> 00:00:05.140
So check out to lesson two.

3
00:00:07.220 --> 00:00:11.440
And if I didn't say it already,
if you haven't looked instructions for

4
00:00:11.440 --> 00:00:15.040
every exercise on what you're gonna be
doing is in the readme with like check

5
00:00:15.040 --> 00:00:19.550
marks on showing you exactly
what you got to do and what not.

6
00:00:19.550 --> 00:00:22.340
This exercise and going forward is gonna
be a little different from the first one.

7
00:00:22.340 --> 00:00:24.470
The first one, we didn't really
have any test associated with it,

8
00:00:24.470 --> 00:00:26.610
it just to get you to keep your feet wet.

9
00:00:26.610 --> 00:00:29.320
Going forward is gonna be test associated
with every single exercise and

10
00:00:29.320 --> 00:00:31.190
you got to those test to pass.

11
00:00:31.190 --> 00:00:35.232
So in this example,
if you check out to lesson two

12
00:00:45.612 --> 00:00:48.128
&gt;&gt; Scott Moss: And if you all look at

13
00:00:48.128 --> 00:00:49.758
the readme.

14
00:00:49.758 --> 00:00:54.491
So if we look at this one, two things to
know is it's always gonna say the branch

15
00:00:54.491 --> 00:00:56.298
that you need to check out to.

16
00:00:56.298 --> 00:01:00.530
So in this case lesson two and it is gonna
say the test command that you have to run.

17
00:01:00.530 --> 00:01:02.980
There is a test command just for
running all the test.

18
00:01:02.980 --> 00:01:04.630
How come it's not running that?

19
00:01:04.630 --> 00:01:06.480
Because it will run all the test for

20
00:01:06.480 --> 00:01:09.480
the future branches too which obviously
would fail cuz you didn't write code for

21
00:01:09.480 --> 00:01:12.660
those yet, and then you'll just be like,
why are these tests not passing.

22
00:01:12.660 --> 00:01:15.370
So if you just run the command that
I have specifically for that lesson,

23
00:01:15.370 --> 00:01:17.710
it will only run the test for that lesson.

24
00:01:17.710 --> 00:01:19.930
And those are only tests
that you have to get a pass.

25
00:01:19.930 --> 00:01:22.700
So in this case the test
command that you have to write.

26
00:01:22.700 --> 00:01:25.690
If you are using yarn,
it's yarn test dash routes.

27
00:01:25.690 --> 00:01:29.010
If you are using npm
it's npm run test-routes.

28
00:01:29.010 --> 00:01:30.830
So that's the command that we've
been running to run the tests.

29
00:01:30.830 --> 00:01:32.450
So if you check out after lesson one and

30
00:01:32.450 --> 00:01:35.580
you run a test command, you'll see
how much tests they got skipped.

31
00:01:35.580 --> 00:01:38.010
Ignore those we need to see
some tests that failed.

32
00:01:38.010 --> 00:01:40.420
Those are the ones that
you have to get to pass.

33
00:01:40.420 --> 00:01:43.370
Now to get those to pass, basically what
you're gonna be doing is you're gonna be

34
00:01:43.370 --> 00:01:45.620
creating some routes and sub-routers for

35
00:01:45.620 --> 00:01:49.670
our soon to be database resources
using the express routing and routers.

36
00:01:49.670 --> 00:01:51.250
So there's a checklist here.

37
00:01:51.250 --> 00:01:52.590
So you're gonna create a router for

38
00:01:52.590 --> 00:01:55.800
the item resource, and
I'm gonna walk you through all this.

39
00:01:55.800 --> 00:02:00.330
You're gonna create full crud routes and
create placeholder controllers which

40
00:02:00.330 --> 00:02:04.280
just don't do anything, just send back a
message kind of like what we did already.

41
00:02:04.280 --> 00:02:07.370
Then you're gonna mount that
router on the root server,

42
00:02:07.370 --> 00:02:08.670
very much like I just showed you all.

43
00:02:08.670 --> 00:02:13.070
And then you could go and ensure that all
tests pass by writing the test command.

44
00:02:13.070 --> 00:02:14.410
But if you do all these things above,

45
00:02:14.410 --> 00:02:15.939
these three things,
all the tests should pass.

46
00:02:17.120 --> 00:02:18.600
So what does that actually mean?

47
00:02:18.600 --> 00:02:21.420
Well, if you go int
the source slash resources,

48
00:02:21.420 --> 00:02:25.790
you will see three weeks resources in
here, you'll see item, list and user.

49
00:02:25.790 --> 00:02:30.670
You get this thing API as basically like
we're building API for like to do app.

50
00:02:30.670 --> 00:02:32.900
So we have users and we have items and

51
00:02:32.900 --> 00:02:36.080
then we have a list of items,
those are our three resources.

52
00:02:36.080 --> 00:02:39.190
User and list are mostly filled out,

53
00:02:39.190 --> 00:02:41.900
they're mostly complete for you, so
they're here mostly for examples for

54
00:02:41.900 --> 00:02:46.340
you just to look to see how things
are organized and how they're created.

55
00:02:46.340 --> 00:02:49.000
But what we're going to be
working on mostly in this whole

56
00:02:49.000 --> 00:02:50.730
course is going to be the item resource.

57
00:02:50.730 --> 00:02:53.930
So if you look here, you click on item,
there's a few things.

58
00:02:53.930 --> 00:02:54.740
We have a controller.

59
00:02:55.780 --> 00:02:58.230
We have a model and we have a router.

60
00:02:58.230 --> 00:03:01.280
So I organize it in that
way because that's how

61
00:03:01.280 --> 00:03:04.230
I separate the resources out for
my REST API.

62
00:03:04.230 --> 00:03:07.720
So for every resource there's gonna
be controllers associated with them.

63
00:03:07.720 --> 00:03:10.680
There's gonna be models that
the controllers use to query and

64
00:03:10.680 --> 00:03:11.970
to crema on the data.

65
00:03:11.970 --> 00:03:15.360
There's going to be a router that controls
how that resource is accessed, so

66
00:03:15.360 --> 00:03:17.520
that's why it separated it out like that.

67
00:03:17.520 --> 00:03:20.830
So we're going to be working mostly
is going to be in the router file.

68
00:03:20.830 --> 00:03:21.670
So if you go to that file,

69
00:03:21.670 --> 00:03:25.090
it's got these three lines,
that's like literally nothing in here.

70
00:03:25.090 --> 00:03:27.430
It's just a router that's being exported.

71
00:03:27.430 --> 00:03:30.000
So it's going to be up to you
to create those crud routes.

72
00:03:30.000 --> 00:03:34.462
So remember, you're only really
gonna have two routes /resource,

73
00:03:34.462 --> 00:03:38.110
/resource/id, but
with five different valid combinations.

74
00:03:38.110 --> 00:03:40.790
So it's up to you to figure out how you
want to do that using this router or

75
00:03:40.790 --> 00:03:43.420
you can do the .route
method that I showed you or

76
00:03:43.420 --> 00:03:46.695
you gonna explicit define
each one of them yourself.

77
00:03:46.695 --> 00:03:49.500
As far as controllers you can just mock
them out you can just send back hello.

78
00:03:49.500 --> 00:03:51.460
Doesn't matter what you send back
right now in the controllers.

79
00:03:51.460 --> 00:03:54.040
But they have to be there or
otherwise the server will hang.

80
00:03:54.040 --> 00:03:54.720
So you have to be there.

81
00:03:54.720 --> 00:03:56.400
You don't have to put
anything in the controllers.

82
00:03:58.880 --> 00:04:00.830
And that's the first part.

83
00:04:00.830 --> 00:04:03.110
The second part, what we're gonna have to
do is we have to tape this router that's

84
00:04:03.110 --> 00:04:09.520
been exported, and you're gonna have
to register it here on the root server.

85
00:04:09.520 --> 00:04:11.510
All right, so here's the root server.

86
00:04:11.510 --> 00:04:15.110
You have a router that's been
exported you have to register here.

87
00:04:15.110 --> 00:04:19.970
Just feel free to register at /api/
the name of the resource, right?

88
00:04:19.970 --> 00:04:22.440
So the resource in this
case is called item

89
00:04:22.440 --> 00:04:24.070
then you would mount that up /api/item,

90
00:04:24.070 --> 00:04:28.040
and that's where you'll mount that router,
right here on the root server.

91
00:04:29.340 --> 00:04:32.293
So once you do all that you should
get all the test to pass and

92
00:04:32.293 --> 00:04:33.860
you should be able to access and

93
00:04:33.860 --> 00:04:38.769
do all the crud on the item resource
&gt;&gt; Scott Moss: And again,

94
00:04:38.769 --> 00:04:41.728
if you go look at the list router and
the user router,

95
00:04:41.728 --> 00:04:46.250
there's some really good examples of what
that might look like if you get lost.

96
00:04:49.128 --> 00:04:52.580
&gt;&gt; Scott Moss: For extra credit if you
want to, feel free to go ahead and

97
00:04:52.580 --> 00:04:56.179
register the list router and
the user router on the route,

98
00:04:56.179 --> 00:04:57.732
the root server as well.

99
00:04:57.732 --> 00:04:58.482
You don't have to,

100
00:04:58.482 --> 00:05:01.317
that's just extra credit, it's mostly
the same thing as items resource.

101
00:05:01.317 --> 00:05:04.234
But if you want to you can register those
as well, they are already created for you,

102
00:05:04.234 --> 00:05:06.401
they are already done,
if you want to register them go ahead,

103
00:05:06.401 --> 00:05:08.004
they are already
registered on the session.

104
00:05:11.394 --> 00:05:13.600
&gt;&gt; Scott Moss: Any questions on that?

105
00:05:13.600 --> 00:05:18.663
So again, if I run this test,

106
00:05:18.663 --> 00:05:25.560
npm run test, what is it, test router?

107
00:05:25.560 --> 00:05:28.867
No, test routes, there we go.

108
00:05:31.623 --> 00:05:36.216
&gt;&gt; Scott Moss: You can see npm fails
because I have this failing test item

109
00:05:36.216 --> 00:05:38.340
router has crud routes.

110
00:05:38.340 --> 00:05:40.470
So I clearly don't have any crud route.

111
00:05:40.470 --> 00:05:43.380
If you wanna go look at the tests inside
the item photo, there's an underscore,

112
00:05:43.380 --> 00:05:45.234
underscore tests, underscore underscore.

113
00:05:45.234 --> 00:05:48.980
Click on itemrouter.spec.js and

114
00:05:48.980 --> 00:05:51.570
you can just look at the tests and
see what's expecting.

115
00:05:51.570 --> 00:05:54.510
So you can see there's some router
that's expecting what's in verb and

116
00:05:54.510 --> 00:05:56.560
it's testing this presence to
see if they got registered,

117
00:05:56.560 --> 00:05:57.960
if they haven't registered
it's gonna fail.

118
00:05:57.960 --> 00:06:00.850
So if you register all those routes,
you'll get a pass here.

