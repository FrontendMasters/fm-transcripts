WEBVTT

1
00:00:00.150 --> 00:00:01.150
&gt;&gt; Scott Moss: But yeah so ultimately,

2
00:00:01.150 --> 00:00:05.120
controllers are gonna implement the logic
that interacts with our database

3
00:00:05.120 --> 00:00:05.860
models, right.

4
00:00:05.860 --> 00:00:07.100
So we created those models.

5
00:00:07.100 --> 00:00:07.840
Where do we use them?

6
00:00:07.840 --> 00:00:09.160
We use them in the controllers.

7
00:00:09.160 --> 00:00:13.230
So, that's basically
how they're gonna work.

8
00:00:13.230 --> 00:00:17.430
The sweet thing about REST and
how Express gives us tools for

9
00:00:17.430 --> 00:00:19.390
route matching and verbs.

10
00:00:19.390 --> 00:00:22.980
And then how Mongo kinda ties into
a lot of this stuff too, is that

11
00:00:22.980 --> 00:00:27.370
we can actually generalize our controllers
to work for many different models.

12
00:00:27.370 --> 00:00:31.790
If you go look at the routes that we had,
&gt;&gt; Scott Moss: Our router,

13
00:00:31.790 --> 00:00:33.110
already have it right here.

14
00:00:33.110 --> 00:00:34.619
So let me just get rid of this controller.

15
00:00:41.029 --> 00:00:42.439
&gt;&gt; Scott Moss: If we go
look at these routes here.

16
00:00:47.476 --> 00:00:50.438
&gt;&gt; Scott Moss: We kind of generalized
these to just have two routes, so

17
00:00:50.438 --> 00:00:51.722
it's / and then /id.

18
00:00:51.722 --> 00:00:55.020
And they just have different verb
combinations, so we generalize that.

19
00:00:55.020 --> 00:00:57.450
And that's gonna be the same no matter
which resource we're on, right.

20
00:00:57.450 --> 00:01:00.940
If I go to list router,
it's exactly the same thing.

21
00:01:00.940 --> 00:01:04.510
If I go to the user model,
this one's going to be different.

22
00:01:04.510 --> 00:01:08.650
Because user has different permissions and
stuff, but there's some similarities here.

23
00:01:08.650 --> 00:01:13.220
The reason user is different
is because you sign up,

24
00:01:13.220 --> 00:01:16.090
signing up and creating a new
item are two different things.

25
00:01:16.090 --> 00:01:19.600
Signing up as an user is not as
simple as like doing CRUD user,

26
00:01:19.600 --> 00:01:21.470
like creating a user.

27
00:01:21.470 --> 00:01:25.000
Normally when you create a user,
I don't create a user for somebody else.

28
00:01:25.000 --> 00:01:27.410
They sign themselves up,
so they're not a user yet.

29
00:01:27.410 --> 00:01:28.670
So I already perform CRUD, so

30
00:01:28.670 --> 00:01:31.560
that's why it's a little
special with users and stuff.

31
00:01:31.560 --> 00:01:35.740
But for most resource based stuff in our
database, it's mostly the same thing.

32
00:01:36.850 --> 00:01:42.640
So because of that, that similarity we can
actually generalize our controllers too.

33
00:01:42.640 --> 00:01:44.020
They're all doing the same thing.

34
00:01:44.020 --> 00:01:49.990
For instance, if a list has a controller
to get one list by an ID, then

35
00:01:49.990 --> 00:01:54.810
that logic would be exactly the same as an
item controller getting one item by an ID.

36
00:01:54.810 --> 00:01:56.550
The only difference is at the model.

37
00:01:57.750 --> 00:01:59.850
One's a list model,
the other one's an item model.

38
00:01:59.850 --> 00:02:03.210
But because Mongoose makes all
the models exactly the same,

39
00:02:03.210 --> 00:02:05.120
as far as the methods you can use on them.

40
00:02:05.120 --> 00:02:08.700
Then we can just generalize the
controllers and just create one controller

41
00:02:08.700 --> 00:02:12.070
for every single CRUD action then just
pass in the model and then we are done.

42
00:02:13.170 --> 00:02:16.706
Technically that's your work if
you follow REST exactly to T.

43
00:02:16.706 --> 00:02:20.290
Where that gets crazy is when you
got to do special things like,

44
00:02:20.290 --> 00:02:24.420
we got to remove the password from
the user or we had to populate this field.

45
00:02:24.420 --> 00:02:27.084
But then you're not doing REST,
that's where it gets blurry.

46
00:02:27.084 --> 00:02:31.638
So for ultimate REST, yeah, we can
generalize the controllers to work for

47
00:02:31.638 --> 00:02:32.517
everything.

48
00:02:32.517 --> 00:02:34.870
And that's actually what
we're gonna be doing next.

49
00:02:36.200 --> 00:02:40.160
Anybody not understand me when I said what
I just said, generalize our controllers?

50
00:02:40.160 --> 00:02:42.330
I think I was talking too fast.

51
00:02:42.330 --> 00:02:46.580
But basically, what I was saying is,
instead of writing a controller for

52
00:02:46.580 --> 00:02:49.260
every single route, for
every single resource.

53
00:02:49.260 --> 00:02:53.899
We'll just write one controller for
getOne, one controller for createOne,

54
00:02:53.899 --> 00:02:57.906
one controller for updateOne,
one controller for removeOne, and

55
00:02:57.906 --> 00:03:00.306
one controller for getMany.

56
00:03:00.306 --> 00:03:02.380
And then we'll pass a model
to that controller and

57
00:03:02.380 --> 00:03:04.890
it'll just do the same code for
every single model.

58
00:03:04.890 --> 00:03:05.900
Cuz it's very generic,

59
00:03:05.900 --> 00:03:08.354
it's very general, does the same
thing just on a different model.

60
00:03:08.354 --> 00:03:11.370
Doesn't need to know about fields,
doesn't need to know about schemas.

61
00:03:11.370 --> 00:03:12.940
It just does the same thing
on every single model.

62
00:03:14.390 --> 00:03:17.920
And that's exactly how Ruby on Rails
would have generated routes for

63
00:03:17.920 --> 00:03:21.580
you if you were using it back when they
were coming out with the res stuff.

