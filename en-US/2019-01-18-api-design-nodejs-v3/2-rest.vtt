WEBVTT

1
00:00:00.050 --> 00:00:01.500
&gt;&gt; Scott Moss: So about REST?

2
00:00:01.500 --> 00:00:05.162
Well, Locke?

3
00:00:05.162 --> 00:00:10.934
&gt;&gt; Speaker 2: Rest is
the set of instructions,

4
00:00:10.934 --> 00:00:14.240
post, get, put.

5
00:00:15.360 --> 00:00:17.930
&gt;&gt; Scott Moss: I'm gonna say this,
whatever answer anybody says about REST,

6
00:00:17.930 --> 00:00:21.180
is probably gonna be right,
cuz it's literally that blurry.

7
00:00:21.180 --> 00:00:24.690
Like, there is no good,
definitely, so you are right.

8
00:00:24.690 --> 00:00:27.360
It is that.
That's describing how REST works.

9
00:00:27.360 --> 00:00:31.200
It's very blurry,
there isn't really a solid thing.

10
00:00:31.200 --> 00:00:33.510
There's no enforced interface.

11
00:00:33.510 --> 00:00:39.430
There's just like, some ideas around and,
you implement them, and see how it goes.

12
00:00:39.430 --> 00:00:44.548
But tldr, it's the most popular API
design pattern out there, I would say,

13
00:00:44.548 --> 00:00:49.767
but it's not this silver bullet, and
also, like I said, it's very blurry.

14
00:00:49.767 --> 00:00:53.672
It's just some ideas that people
came up with, and then, eventually,

15
00:00:53.672 --> 00:00:57.129
people just go off and
just create their own different version of

16
00:00:57.129 --> 00:01:00.734
it that's completely different
than what the idea started with.

17
00:01:00.734 --> 00:01:05.000
And I've never really truly
seen of a strict REST API.

18
00:01:05.000 --> 00:01:07.298
I think the closest you might
get to something like that,

19
00:01:07.298 --> 00:01:10.990
is like back in the day when you were
generating APIs with Ruby on Rails,

20
00:01:10.990 --> 00:01:13.920
and they kinda just did everything for
you, like that.

21
00:01:13.920 --> 00:01:16.880
But even then, you would denormalize and
make something else, because your

22
00:01:16.880 --> 00:01:20.629
application needed something completely
different, so it's very, very blurry.

23
00:01:22.590 --> 00:01:26.800
Like I said, it's an API design
that combines database resources

24
00:01:26.800 --> 00:01:30.480
with route paths, and
you said Lock, HTTP verbs.

25
00:01:30.480 --> 00:01:33.480
So it's a combination of those three
things that allow the application to

26
00:01:33.480 --> 00:01:38.610
describe what action, as in a crud action,
that they are trying to perform, right?

27
00:01:38.610 --> 00:01:44.090
So if I have resources, like a user and

28
00:01:44.090 --> 00:01:48.700
an account, and I wanna be able
to perform crud on an account,

29
00:01:48.700 --> 00:01:53.440
the REST interface would allow
me to perform those different

30
00:01:53.440 --> 00:01:57.890
actions based on the combinations of
the route that I send to the server, and

31
00:01:57.890 --> 00:02:01.930
the verb, so
it could be slash user with a delete.

32
00:02:01.930 --> 00:02:05.835
Now that API knows I want to
delete a user, that type of thing.

33
00:02:05.835 --> 00:02:10.100
Any questions on that?

34
00:02:10.100 --> 00:02:15.290
Okay, so it was popularized when SAS
products started offering APIs for

35
00:02:15.290 --> 00:02:16.420
integrations, basically.

36
00:02:16.420 --> 00:02:21.380
So all these SAS products started coming
out, and when you're building an API for

37
00:02:21.380 --> 00:02:26.300
yourself internally, as in your web app
is using your API, you don't really

38
00:02:26.300 --> 00:02:30.430
need to use REST, you can just do whatever
you want, right, because it really depends

39
00:02:30.430 --> 00:02:35.760
on whatever your client needs, it'll
be just very specific domain, like API.

40
00:02:35.760 --> 00:02:39.146
But would you open that API for
developers to use, to integrate?

41
00:02:39.146 --> 00:02:42.310
Well, now you gotta have some type
of standards and some type of form.

42
00:02:42.310 --> 00:02:43.630
You can't just be whatever you want.

43
00:02:43.630 --> 00:02:44.940
You can't be proprietary.

44
00:02:44.940 --> 00:02:47.700
So that's kind of where
REST decided to show.

45
00:02:47.700 --> 00:02:52.260
It was created before that, but
I think that's when it got popular, so.

46
00:02:52.260 --> 00:02:54.680
And then, obviously,
Ruby on Rails made it super popular.

47
00:02:57.470 --> 00:03:00.110
Works with basic data models, and
basically, what I mean by that,

48
00:03:00.110 --> 00:03:02.630
is it's really hard to scale
with complex data models.

49
00:03:02.630 --> 00:03:06.740
So for instance, if you have like a graph
DB, if you're the Facebook of the world,

50
00:03:06.740 --> 00:03:11.028
and all your data is linked with nodes and
dependencies down here, that's a graph DB,

51
00:03:11.028 --> 00:03:12.704
the rest if really hard for that.

52
00:03:12.704 --> 00:03:14.130
Like it's really hard.

53
00:03:14.130 --> 00:03:16.690
It doesn't,
it just doesn't really work for that.

54
00:03:16.690 --> 00:03:19.600
I mean, you'll basically just been
extending what REST can do, and

55
00:03:19.600 --> 00:03:21.600
you might as well
implement something else.

56
00:03:21.600 --> 00:03:26.940
So when I say basic data models, I mean,
like basic, relational, hopefully,

57
00:03:26.940 --> 00:03:32.620
data models that don't really depend on
each other, and yeah, that type of stuff.

58
00:03:32.620 --> 00:03:34.750
So, very hard.

