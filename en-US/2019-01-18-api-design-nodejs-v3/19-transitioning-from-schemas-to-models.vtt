WEBVTT

1
00:00:00.210 --> 00:00:03.110
&gt;&gt; Scott Moss: So for every single
resource that we want to expose through

2
00:00:03.110 --> 00:00:04.610
our API, in this case, we have a user,

3
00:00:04.610 --> 00:00:08.440
a list, an item, we need to
create a schema and a model for.

4
00:00:08.440 --> 00:00:09.280
But in a REST API,

5
00:00:09.280 --> 00:00:13.350
you might have resources that are private
that aren't exposed to the REST API.

6
00:00:13.350 --> 00:00:16.927
So that means you might have database
models that don't have resources attached

7
00:00:16.927 --> 00:00:17.617
to the routes.

8
00:00:17.617 --> 00:00:20.750
Like you have some internal private
analytics thing that you're tracking or

9
00:00:20.750 --> 00:00:23.939
something completely different that you
don't wanna expose to the REST API.

10
00:00:23.939 --> 00:00:25.944
That doesn't mean you have
to make a resource for it.

11
00:00:25.944 --> 00:00:28.360
You don't have to.
You can do whatever you want.

12
00:00:28.360 --> 00:00:31.720
So just cuz you have routes doesn't
mean you have models to go with them.

13
00:00:31.720 --> 00:00:33.360
They don't always go hand in hand.

14
00:00:33.360 --> 00:00:34.589
But according to REST,

15
00:00:34.589 --> 00:00:38.590
the resources line up to something that
you're trying to do in the database.

16
00:00:38.590 --> 00:00:40.254
Should they be called the same?

17
00:00:40.254 --> 00:00:41.734
Maybe you should call them
the same to save people's sanity,

18
00:00:41.734 --> 00:00:42.393
but they don't have to be.

19
00:00:42.393 --> 00:00:44.550
You can do whatever you want.

20
00:00:44.550 --> 00:00:45.560
They could be virtual.

21
00:00:45.560 --> 00:00:47.774
They could be something that calls
something else, but on the route,

22
00:00:47.774 --> 00:00:48.571
they're called a user.

23
00:00:48.571 --> 00:00:51.091
But on somewhere else,
they're called person.

24
00:00:51.091 --> 00:00:54.280
They could be anything you want,
but that's usually how it lines up.

25
00:00:54.280 --> 00:00:56.885
A resource lines up with a model, and
a model is created from a schema.

26
00:01:01.386 --> 00:01:05.031
&gt;&gt; Scott Moss: So when we talk about
transitioning from schemas to the models,

27
00:01:05.031 --> 00:01:09.390
basically, like I said, schemas
are gonna be instructions for the model.

28
00:01:09.390 --> 00:01:12.030
So you can't create a model
without creating a schema first.

29
00:01:12.030 --> 00:01:15.490
Schemas basically hold
the instructions for the models.

30
00:01:15.490 --> 00:01:20.270
Things like validations,
the names of the fields, indexes, hooks.

31
00:01:20.270 --> 00:01:23.627
Pretty much anything a database will
support, it goes through to the schema.

32
00:01:23.627 --> 00:01:28.310
When you have to do a migration, you gotta
change the schema and stuff like that.

33
00:01:28.310 --> 00:01:29.790
So the schema's everything.

34
00:01:29.790 --> 00:01:35.000
So if we go back and
check out this user model here.

35
00:01:35.000 --> 00:01:37.796
Actually, I'll just go through,
let me just delete this stuff and

36
00:01:37.796 --> 00:01:42.080
we'll just make some new one here.

37
00:01:42.080 --> 00:01:43.500
This thing's moving so fast.

38
00:01:43.500 --> 00:01:46.350
Okay, all right.

39
00:01:46.350 --> 00:01:48.200
So we'll just make a new schema here for
the user.

40
00:01:48.200 --> 00:01:52.530
So for instance, if I wanted
this user to have a first name,

41
00:01:52.530 --> 00:01:57.710
I can give it firstName, and
I can give it a type string.

42
00:01:57.710 --> 00:02:01.120
And all I have to do is just pass
this object to mongoose.Schema,

43
00:02:01.120 --> 00:02:05.218
which basically is creating a new schema,
so it's gonna return a new schema.

44
00:02:05.218 --> 00:02:08.528
So I'm saying, hey, I want this
schema to have a first name and

45
00:02:08.528 --> 00:02:10.060
its type is string, right?

46
00:02:10.060 --> 00:02:16.700
I can also give it a last name, but
this time I want this to be required.

47
00:02:16.700 --> 00:02:18.510
For some reason,
the last name has to be required.

48
00:02:18.510 --> 00:02:20.350
I don't know,
that's just how our application works.

49
00:02:20.350 --> 00:02:23.544
So in this case, instead of giving it
a type, I give it an object like this.

50
00:02:23.544 --> 00:02:26.783
And then I could say its
type is also a string, but

51
00:02:26.783 --> 00:02:29.950
it has a required validation on it,
like this.

52
00:02:31.500 --> 00:02:32.990
All right, so this is making it required.

53
00:02:32.990 --> 00:02:36.515
So as you can see I'm building
a schema that I'm then going to use

54
00:02:36.515 --> 00:02:37.571
to create a model.

55
00:02:37.571 --> 00:02:41.679
And then that model is gonna help us
inside of our controllers that we'll build

56
00:02:41.679 --> 00:02:45.310
eventually that attach to the resources
that we expose over at REST.

57
00:02:45.310 --> 00:02:46.200
So it all combines.

58
00:02:46.200 --> 00:02:48.080
It all starts with a schema.

59
00:02:48.080 --> 00:02:51.600
So you design your data with the schemas.

60
00:02:51.600 --> 00:02:53.530
You convert those to models.

61
00:02:53.530 --> 00:02:58.140
You have your controllers use the models
to query and perform CRUD on the models.

62
00:02:58.140 --> 00:03:02.820
And then the resources activate
the controllers, and there you go.

63
00:03:02.820 --> 00:03:03.457
You have a REST API.

64
00:03:06.124 --> 00:03:08.720
&gt;&gt; Scott Moss: So as you see,
you can continue building on the schema.

65
00:03:08.720 --> 00:03:10.190
There's a lot of different
things you can do here.

66
00:03:10.190 --> 00:03:13.370
So I already have examples
of all the different

67
00:03:14.490 --> 00:03:16.400
possibilities this schema
could do with Mongoose.

68
00:03:16.400 --> 00:03:19.930
Like I said, there is another course
where we go into more detail about it.

69
00:03:19.930 --> 00:03:22.480
But for what you're gonna be doing,
there's definitely gonna be enough

70
00:03:22.480 --> 00:03:24.690
here for you to understand and
see what you're doing.

71
00:03:24.690 --> 00:03:27.152
If you check out the user schema,
like I said, you'll see more here.

72
00:03:27.152 --> 00:03:31.611
The list schema also has some
other stuff here as well, but

73
00:03:31.611 --> 00:03:34.530
there's some really good examples.

74
00:03:34.530 --> 00:03:37.910
I don't wanna go too deep or
into developing schemas and

75
00:03:37.910 --> 00:03:39.390
stuff with Mongo or Mongoose.

