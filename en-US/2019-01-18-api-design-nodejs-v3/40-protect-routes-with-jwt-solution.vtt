WEBVTT

1
00:00:00.410 --> 00:00:04.090
&gt;&gt; Scott Moss: So for protect,
let's see what the tests say.

2
00:00:04.090 --> 00:00:08.380
Looks like we have to look for
a bearer token in the headers.

3
00:00:08.380 --> 00:00:11.870
Must be correct prefix as in bearer,
must be real user and

4
00:00:11.870 --> 00:00:15.860
finds user from token and
passes it on, so those few things.

5
00:00:15.860 --> 00:00:18.270
So to do that,
first thing is let's grab the token.

6
00:00:18.270 --> 00:00:21.300
So grab the token, so

7
00:00:21.300 --> 00:00:24.840
I'm just going to do let because I
reassigned this a couple of times.

8
00:00:24.840 --> 00:00:32.678
It's going to be req dot
headers dot authorization.

9
00:00:32.678 --> 00:00:37.674
So I'm gonna get the token there, and

10
00:00:37.674 --> 00:00:43.720
then I'm going to split
on Bare with a space.

11
00:00:43.720 --> 00:00:48.170
If I can spell it there, so

12
00:00:48.170 --> 00:00:51.780
I'm gonna do that, and then if not token.

13
00:00:51.780 --> 00:00:56.890
So if there's well now token's
gonna be like an array,

14
00:00:56.890 --> 00:00:58.310
and I wanna get the first thing.

15
00:00:58.310 --> 00:01:01.529
Because if this works out, then I should
get back an array that looks like

16
00:01:04.440 --> 00:01:07.580
an empty space, and
then my token, over here.

17
00:01:07.580 --> 00:01:10.220
If they formatted correctly,
it should be something like that.

18
00:01:10.220 --> 00:01:12.460
So I wanna get the first thing in it.

19
00:01:12.460 --> 00:01:15.960
So if there is no token,
then I wanna go ahead and

20
00:01:15.960 --> 00:01:21.793
say, res.status(401)

21
00:01:21.793 --> 00:01:28.755
.send(message: 'no auth').

22
00:01:28.755 --> 00:01:33.730
So that'll take care of it's no token and
then the next thing I wanna

23
00:01:33.730 --> 00:01:38.660
do is I wanna verify if this is a token or
not.

24
00:01:38.660 --> 00:01:43.023
So what I can do is const payload =,

25
00:01:43.023 --> 00:01:48.550
I'll use a verified token
method that we have

26
00:01:48.550 --> 00:01:54.084
above which takes a token and
it verifies it.

27
00:01:56.087 --> 00:01:58.248
&gt;&gt; Scott Moss: This one right here,
and it's asynchronous.

28
00:01:59.774 --> 00:02:00.703
&gt;&gt; Scott Moss: So we'll await that.

29
00:02:00.703 --> 00:02:02.920
&gt;&gt; Student: Return in
front of that res.status.

30
00:02:02.920 --> 00:02:03.600
&gt;&gt; Scott Moss: Yes, thank you.

31
00:02:03.600 --> 00:02:05.350
That would've caused major problems.

32
00:02:07.010 --> 00:02:10.180
So we got the payload, so
that'll check to see, if this works,

33
00:02:10.180 --> 00:02:12.370
this will give us back the user.

34
00:02:12.370 --> 00:02:14.951
If it doesn't work, it's gonna break,
so we'll do a try catch here.

35
00:02:21.475 --> 00:02:23.537
&gt;&gt; Scott Moss: And
we'll just log the error just in case.

36
00:02:27.481 --> 00:02:30.826
&gt;&gt; Scott Moss: And I will just
send back message if it doesn't.

37
00:02:33.279 --> 00:02:37.644
&gt;&gt; Scott Moss: Cool, so if it is,
then the next thing we wanna do is,

38
00:02:37.644 --> 00:02:41.524
you must be the real user,
so we need to query for

39
00:02:41.524 --> 00:02:47.175
the user in this case, so let's say
user = await User dot find by id.

40
00:02:47.175 --> 00:02:50.304
And it'll be on payload dot id.

41
00:02:50.304 --> 00:02:54.592
The reason I know it's on payload id is if
I go look above on the way it's signed,

42
00:02:54.592 --> 00:02:57.280
I signed it with a payload
of an id who is user id, so

43
00:02:57.280 --> 00:03:02.190
when I get it back from verify token it'll
be the same thing it was when I signed it.

44
00:03:02.190 --> 00:03:06.120
And there's a .ID property on it, so
that's what I'm using as a user ID.

45
00:03:06.120 --> 00:03:10.900
User goes in on sign, user comes
out on verify as the same object.

46
00:03:10.900 --> 00:03:13.710
So, I have an Id project there, so

47
00:03:13.710 --> 00:03:17.060
that's how I know that there was an Id on
this payload, cuz it's that same thing.

48
00:03:18.280 --> 00:03:20.620
So I'll go ahead and accept that.

49
00:03:20.620 --> 00:03:26.080
And because I don't wanna add
the passwords on there, I'll go ahead and

50
00:03:26.080 --> 00:03:31.285
select and remove the password from
beyond there I don't want that.

51
00:03:31.285 --> 00:03:34.649
And then it says must pass it on, so

52
00:03:34.649 --> 00:03:39.986
what I'll do is I'll say
req.user equals the user and

53
00:03:39.986 --> 00:03:45.917
then I'll say next to continue
cuz this will be middle ware.

54
00:03:48.230 --> 00:03:49.725
&gt;&gt; Scott Moss: So let's see if this works.

55
00:03:58.999 --> 00:04:00.412
&gt;&gt; Scott Moss: We'd go up here.

56
00:04:02.060 --> 00:04:06.190
&gt;&gt; Scott Moss: It looks for Bare, okay.

57
00:04:06.190 --> 00:04:08.520
Looks like not of the tests
passed on that one.

58
00:04:08.520 --> 00:04:11.200
So let's see how much they've
got the formatting off, for

59
00:04:11.200 --> 00:04:13.260
like the status codes and stuff.

60
00:04:13.260 --> 00:04:17.526
So this is, specs a 401, and a .and, and

61
00:04:17.526 --> 00:04:22.567
a .and, and a .and, yeah,
so, all these are .and.

62
00:04:30.959 --> 00:04:37.006
&gt;&gt; Scott Moss: There we go, and
we'll see what happens, do that.

63
00:04:42.698 --> 00:04:45.000
&gt;&gt; Scott Moss: Cool, so
we got a solid pass here.

64
00:04:45.000 --> 00:04:47.110
So a token must have the correct prefix,
got that.

65
00:04:47.110 --> 00:04:48.460
Must be a real user.

66
00:04:48.460 --> 00:04:51.130
Looks for a Bearer token in
the headers that didn't pass.

67
00:04:51.130 --> 00:04:52.830
Finds user from token, passes it on.

68
00:04:52.830 --> 00:04:57.240
So that didn't pass it, so what we'll do
is find user from token passes it on.

69
00:04:57.240 --> 00:05:01.717
This is expecting correct.user to ID.

70
00:05:01.717 --> 00:05:02.510
Okay.

71
00:05:03.983 --> 00:05:05.280
&gt;&gt; Scott Moss: Okay, so
we'll get to that one.

72
00:05:05.280 --> 00:05:10.180
And the first one that failed was
looks for Bearer tokens in headers.

73
00:05:10.180 --> 00:05:12.120
It's cuz if you don't pass a header,
it should fail.

74
00:05:12.120 --> 00:05:13.648
So we should do that.

75
00:05:13.648 --> 00:05:20.168
If not req.headers.authorization,

76
00:05:20.168 --> 00:05:26.310
then do this, so that was it for that.

77
00:05:28.420 --> 00:05:29.087
Run the test.

78
00:05:34.605 --> 00:05:38.259
&gt;&gt; Scott Moss: Okay, and it looks
like we got the last one, which is,

79
00:05:38.259 --> 00:05:40.730
finds user from token and passes on.

80
00:05:40.730 --> 00:05:46.871
So that one is looking for
the token here, authorization, next.

81
00:05:46.871 --> 00:05:54.320
Okay, expect(rec.user, _id.toString.

82
00:05:54.320 --> 00:05:56.308
Okay, so let's check that out.

83
00:06:00.573 --> 00:06:04.214
&gt;&gt; Student: [INAUDIBLE]
&gt;&gt; Scott Moss: No,

84
00:06:04.214 --> 00:06:07.362
it should just be payload,
let's check it out.

85
00:06:08.877 --> 00:06:10.609
&gt;&gt; Scott Moss: Should we,
payload should be fine.

86
00:06:15.104 --> 00:06:18.757
&gt;&gt; Scott Moss: It's not id,
because I put this id here like that,

87
00:06:18.757 --> 00:06:20.670
yeah, so that should be fine.

88
00:06:25.321 --> 00:06:30.869
&gt;&gt; Scott Moss: Looks like
not to have property.

89
00:06:30.869 --> 00:06:32.610
It looks like I am getting it back.

90
00:06:32.610 --> 00:06:39.660
I'm just got a little mismatch
with something that's off here.

91
00:06:39.660 --> 00:06:45.602
I think I know why,
it's because I need to call

92
00:06:45.602 --> 00:06:50.790
it .lean in here I believe.

93
00:06:50.790 --> 00:06:56.280
Dot lean just converted to JSON, because
right now it's a Mongoose document.

94
00:06:56.280 --> 00:06:58.710
I think it just wants it
to be a JSON document.

95
00:06:58.710 --> 00:07:00.610
See if that was it, yeah, that was it.

96
00:07:00.610 --> 00:07:05.515
The only other way you can do that is if
you do user dot two JSON like that, it's

97
00:07:05.515 --> 00:07:10.498
the same thing, but these are documents
I could return from the database, and

98
00:07:10.498 --> 00:07:14.199
it's just expecting it to be
a raw JavaScript document and

99
00:07:14.199 --> 00:07:17.554
not a Mongoose document,
so that's what that was.

100
00:07:19.621 --> 00:07:21.320
&gt;&gt; Scott Moss: And so
that passed those tests, and

101
00:07:21.320 --> 00:07:23.310
then now we need to add
these to the route.

102
00:07:23.310 --> 00:07:27.042
So we'll go to server and
we'll add them here, so we'll say app.

103
00:07:27.042 --> 00:07:35.055
Post('/signup', signup) and

104
00:07:35.055 --> 00:07:38.510
we'll do the same thing for sign in, and

105
00:07:41.010 --> 00:07:45.250
we'll add signin here, cool.

106
00:07:45.250 --> 00:07:48.370
And then, to lock down the routes, and
that should've imported them, it did.

107
00:07:48.370 --> 00:07:51.610
To lock down the routes we'll
use the protect middleware here.

108
00:07:52.980 --> 00:07:59.350
And again, we can add them like this,
protect, and add them again here, protect.

109
00:07:59.350 --> 00:08:00.690
But that's just tedious.

110
00:08:00.690 --> 00:08:05.320
So what I'm gonna do instead
is I'm just gonna say app.use,

111
00:08:05.320 --> 00:08:08.002
anything with /api just protect.

112
00:08:09.270 --> 00:08:12.860
And as long as I add that before these,
it'll run this middleware and

113
00:08:12.860 --> 00:08:16.390
then if it succeeds it'll call next and
it'll go to where it's supposed to go.

114
00:08:16.390 --> 00:08:21.266
I would prefer to add the protect
middleware to here at the mount path of

115
00:08:21.266 --> 00:08:24.985
/api because this is a lot
less tedious to write, and

116
00:08:24.985 --> 00:08:27.895
if we run our test, that should satisfy.

117
00:08:30.445 --> 00:08:32.102
&gt;&gt; Scott Moss: Yeah, so
all of our tests pass now.

