WEBVTT

1
00:00:00.270 --> 00:00:03.270
&gt;&gt; Scott Moss: So for
this exercise what you're gonna be doing

2
00:00:03.270 --> 00:00:07.410
is you're gonna be locking
down our APIs using JWTs.

3
00:00:07.410 --> 00:00:09.120
So checkout to the lesson-5 branch.

4
00:00:10.670 --> 00:00:13.770
The first thing to do is you're
create a sign-up controller.

5
00:00:13.770 --> 00:00:14.430
So what is that?

6
00:00:14.430 --> 00:00:16.660
In that same file you'll see
these three functions down here,

7
00:00:16.660 --> 00:00:18.910
signup, signin and protect.

8
00:00:18.910 --> 00:00:21.400
So in order to authenticate and
have people use our API.

9
00:00:21.400 --> 00:00:23.490
We need them to sign up and sign in.

10
00:00:23.490 --> 00:00:27.150
And this is where I said some routes
just don't work well with rest.

11
00:00:27.150 --> 00:00:29.130
Authentication just really
doesn't work well with rest.

12
00:00:29.130 --> 00:00:29.860
You just can't

13
00:00:29.860 --> 00:00:32.730
really do authentication rest it
kind of just needs their own route.

14
00:00:32.730 --> 00:00:36.030
So that's where sign up and sign in
are here, and they weren't there before.

15
00:00:36.030 --> 00:00:39.640
So it needs a lot of people to sign up and
these are controllers, right,

16
00:00:39.640 --> 00:00:41.100
request and response.

17
00:00:41.100 --> 00:00:45.980
So you will need to implement
the sign up logic for

18
00:00:45.980 --> 00:00:49.570
our API,
which means you have to accept email and

19
00:00:49.570 --> 00:00:52.880
password which is basically
just creating a user.

20
00:00:53.950 --> 00:00:56.160
But the most important part is you have
to send back an adjacent web token.

21
00:00:56.160 --> 00:00:57.790
You don't have to worry about
hashing the password or

22
00:00:57.790 --> 00:01:00.720
doing anything like that cuz that's
already done for you in the database.

23
00:01:00.720 --> 00:01:06.870
If you go look at user.model,
I'm already doing that for you here.

24
00:01:06.870 --> 00:01:09.070
So every time a user's
created I hashed a password.

25
00:01:09.070 --> 00:01:12.040
I even allow you to check the passwords,
so you'll need that on signin.

26
00:01:12.040 --> 00:01:14.840
So you don't have to worry about
that part, that part's done.

27
00:01:14.840 --> 00:01:17.360
The part you're specifically worried
about is gonna be with JSON web tokens.

28
00:01:18.480 --> 00:01:21.140
So we have to create signup,
which creates a new user.

29
00:01:21.140 --> 00:01:22.574
And it's successful.

30
00:01:22.574 --> 00:01:26.230
It responds back with
a token that you have to use

31
00:01:26.230 --> 00:01:27.430
the new token method to create.

32
00:01:28.630 --> 00:01:29.470
So that's one thing.

33
00:01:29.470 --> 00:01:33.260
The next thing you have to do is you
have to create the sign in controller

34
00:01:33.260 --> 00:01:37.260
which is very much like the sign up,
except for creating a new user, it checks

35
00:01:37.260 --> 00:01:41.630
to see if the credentials that are coming
in, the email and the password, are valid.

36
00:01:41.630 --> 00:01:42.510
In the database.

37
00:01:42.510 --> 00:01:46.840
And if that is true, send back a new
token the same way the signup would.

38
00:01:46.840 --> 00:01:49.240
So to send back a new token
if the signin is successful.

39
00:01:49.240 --> 00:01:52.280
And how do you know if
the signin is successful?

40
00:01:52.280 --> 00:01:54.940
Well, if the email and
the password matches.

41
00:01:54.940 --> 00:01:59.430
And again, the passwords are hashed, so in
order to check the passwords you'll have

42
00:01:59.430 --> 00:02:06.340
to use User.checkPassword.

43
00:02:06.340 --> 00:02:08.630
So on the user model,

44
00:02:08.630 --> 00:02:13.440
you will have access to a checkPassword
function that takes a password.

45
00:02:14.560 --> 00:02:18.680
And from there, you'll be able to
check the password, I'm sorry,

46
00:02:18.680 --> 00:02:21.806
not on the user model, on the user
document, the instance of the user.

47
00:02:21.806 --> 00:02:25.590
When you crawl the database and
you get a user back, that user itself will

48
00:02:25.590 --> 00:02:29.240
have a check password function on it
that you can pass in a password that

49
00:02:29.240 --> 00:02:33.060
you wanna check and it'll compare
the two to see if the hashes match up.

50
00:02:33.060 --> 00:02:34.785
So you don't have to worry
about doing that but

51
00:02:34.785 --> 00:02:36.710
you will have to do that and sign in.

52
00:02:36.710 --> 00:02:41.110
So given a password against the user,
check to see the passwords match.

53
00:02:41.110 --> 00:02:43.060
If they do, Create a token.

54
00:02:43.060 --> 00:02:44.575
If they don't, they're not authorized.

55
00:02:49.566 --> 00:02:50.342
&gt;&gt; Scott Moss: The last thing is,

56
00:02:50.342 --> 00:02:54.000
you've got to create a protect
middleware to lock down the API routes.

57
00:02:54.000 --> 00:02:57.760
So, cool, we've got,
we have sign up and sign in.

58
00:02:57.760 --> 00:02:59.340
But now we've got to
protect our API routes.

59
00:02:59.340 --> 00:03:00.920
So, this is going to be middleware.

60
00:03:00.920 --> 00:03:04.460
So, what you're going to do here, this is
where you're going to verify the token.

61
00:03:04.460 --> 00:03:07.940
So, in every single route,
every single request is slash API.

62
00:03:07.940 --> 00:03:10.200
You need to run this middleware protect.

63
00:03:10.200 --> 00:03:11.806
It needs to execute.

64
00:03:11.806 --> 00:03:16.880
And its job is to look for the adjacent
web token in the authorization header.

65
00:03:18.170 --> 00:03:21.170
So, if you look in the authorization
header, you'll see a token on there.

66
00:03:21.170 --> 00:03:25.780
You need to grab that token and
you need to run it through verify and

67
00:03:25.780 --> 00:03:27.190
if verify passes, it's good.

68
00:03:27.190 --> 00:03:32.490
If it doesn't pass, it's a wrong token or
somebody's trying to attack your website.

69
00:03:32.490 --> 00:03:34.090
Yes?
&gt;&gt; Speaker 2: And we're protecting all

70
00:03:34.090 --> 00:03:35.030
routes the same way?

71
00:03:35.030 --> 00:03:36.920
We're not differentiating between routes?

72
00:03:36.920 --> 00:03:40.720
&gt;&gt; Scott Moss: Every route that's
mounted at slash API should use this.

73
00:03:40.720 --> 00:03:44.564
Yep, so you wouldn't put this
in front of sign up and sign in.

74
00:03:44.564 --> 00:03:46.180
Because then you couldn't sign up or
sign in.

75
00:03:46.180 --> 00:03:48.690
But you will put this in
front of all the other ones.

76
00:03:48.690 --> 00:03:53.900
But if you go look at server JS, this
is where you're gonna add those routes.

77
00:03:53.900 --> 00:03:56.840
So after you make sign up and sign in,
you need to register them here.

78
00:03:56.840 --> 00:03:58.640
So you do like a app.

79
00:03:58.640 --> 00:04:00.490
Post signup app.

80
00:04:00.490 --> 00:04:02.680
post signin and
you'll put those controllers there.

81
00:04:02.680 --> 00:04:08.030
And then for API you would add your
middleware either here, here, and here.

82
00:04:08.030 --> 00:04:12.220
Or you can make a new mount for
everything at API use this one.

83
00:04:12.220 --> 00:04:13.720
And it'll work for everything below it.

84
00:04:13.720 --> 00:04:15.520
So it's up to you how
you want to add that.

85
00:04:15.520 --> 00:04:17.089
But you will also have to
add those routes here.

86
00:04:19.247 --> 00:04:21.160
&gt;&gt; Scott Moss: So I'll give you a tip.

87
00:04:21.160 --> 00:04:24.610
The thing you're gonna run into that's
gonna be the most difficult at first for

88
00:04:24.610 --> 00:04:26.590
sure is gonna be protect.

89
00:04:26.590 --> 00:04:30.320
These signup and signin are not that
difficult but protect might be.

90
00:04:30.320 --> 00:04:34.090
But because the format of the way
that JSON web token comes in.

91
00:04:34.090 --> 00:04:36.240
A JSON web token comes
in a format like this.

92
00:04:36.240 --> 00:04:42.120
So if you look at the authorization header
you'll see something like "Bearer " and

93
00:04:42.120 --> 00:04:44.120
then a space, and
then you'll see the token here.

94
00:04:44.120 --> 00:04:45.490
It's gonna come like that.

95
00:04:45.490 --> 00:04:47.770
That's how it's expected.

96
00:04:47.770 --> 00:04:51.540
If you don't see it like that,
then it's not correct.

97
00:04:51.540 --> 00:04:53.480
And the test is testing for that.

98
00:04:53.480 --> 00:04:58.610
So if it comes in just as a token,
then that's not right.

99
00:04:58.610 --> 00:05:02.750
If it comes in as a token would something
or bearer with something after.

100
00:05:02.750 --> 00:05:03.540
That's not right.

101
00:05:03.540 --> 00:05:05.340
It has to come in just like that.

102
00:05:05.340 --> 00:05:06.570
And that's what the test is testing for.

103
00:05:06.570 --> 00:05:08.950
And you can look at the test and
see what exactly I'm talking about.

104
00:05:08.950 --> 00:05:10.940
But that's what this function
should be testing for

105
00:05:10.940 --> 00:05:15.420
is that the token looks like that,
and then you pop the token off and

106
00:05:15.420 --> 00:05:17.450
you pass it to verify token
to see if it's real or not.

107
00:05:18.690 --> 00:05:20.370
So one, does it have a token?

108
00:05:20.370 --> 00:05:22.030
Two, is it formatted correctly?

109
00:05:22.030 --> 00:05:23.710
Three, is it a valid token?

110
00:05:23.710 --> 00:05:25.430
If all three of those pass
then you're good to go.

111
00:05:28.490 --> 00:05:32.640
I think protect is also its job
is to take it a step further.

112
00:05:32.640 --> 00:05:35.900
And not only verify the token, but
then go look in the database and

113
00:05:35.900 --> 00:05:37.380
get the entire user.

114
00:05:37.380 --> 00:05:40.400
And attach it to their request
object before calling next.

115
00:05:40.400 --> 00:05:41.640
So after you verify the token,

116
00:05:41.640 --> 00:05:45.310
you then need to do a database
query to see if this user exists.

117
00:05:45.310 --> 00:05:50.390
So cool story you gave me a valid JWT,
that hasn't been expired yet, but

118
00:05:50.390 --> 00:05:52.120
that user just deleted
their profile yesterday.

119
00:05:52.120 --> 00:05:53.890
So I need to see if they're
a real a user in our database.

120
00:05:53.890 --> 00:05:57.880
So that's why you take that extra step
to see even if they pass the validation,

121
00:05:57.880 --> 00:05:59.960
is this even a real user still?

122
00:05:59.960 --> 00:06:01.870
So that's why you do that
extra database crawl.

123
00:06:01.870 --> 00:06:03.420
And again, the test is testing for
that as well.

124
00:06:05.990 --> 00:06:07.650
Any questions on that?

125
00:06:07.650 --> 00:06:08.260
Yes.

126
00:06:08.260 --> 00:06:10.580
&gt;&gt; Speaker 2: The name
of the test is testauth?

127
00:06:10.580 --> 00:06:15.210
&gt;&gt; Scott Moss: Yes, so
to run the test, you're just

128
00:06:15.210 --> 00:06:19.854
going to run test npm run test-auth.

129
00:06:26.014 --> 00:06:27.020
&gt;&gt; Scott Moss: There you go.

130
00:06:27.020 --> 00:06:29.360
And you'll see a whole
bunch of test failing here.

131
00:06:33.153 --> 00:06:36.092
&gt;&gt; Scott Moss: So there's already a test
for new token or verified token, but

132
00:06:36.092 --> 00:06:37.970
those are already done for you.

133
00:06:37.970 --> 00:06:39.250
But then here's a test that you'll have.

134
00:06:39.250 --> 00:06:41.140
You've got two tests for sign up.

135
00:06:41.140 --> 00:06:44.490
You got four tests for sign in and
about four tests for protect.

136
00:06:44.490 --> 00:06:47.360
And they're pretty detailed so

137
00:06:47.360 --> 00:06:50.600
I'll be helping out if you get stuck,
just let me know.

138
00:06:50.600 --> 00:06:52.170
But it's four o'clock now.

139
00:06:52.170 --> 00:06:56.080
We'll come back at 4:20 and
go over the solution.

