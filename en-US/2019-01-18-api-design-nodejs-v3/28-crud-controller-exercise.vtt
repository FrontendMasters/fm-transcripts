WEBVTT

1
00:00:00.000 --> 00:00:01.880
&gt;&gt; Scott Moss: So
far we have the routes and the models.

2
00:00:01.880 --> 00:00:04.490
Now we need to hook our
routes up to our models, so

3
00:00:04.490 --> 00:00:07.725
we can perform CRUD on the models
based on the routes + the verbs.

4
00:00:07.725 --> 00:00:10.141
That's exactly what controllers do.

5
00:00:10.141 --> 00:00:12.525
So you're gonna be creating
the generic CRUD resolvers,

6
00:00:12.525 --> 00:00:14.790
you're gonna create controllers for

7
00:00:14.790 --> 00:00:20.000
the item resources using the base generic
CRUD resolvers that you just created, and

8
00:00:20.000 --> 00:00:23.530
you're gonna ensure that all test paths
by running the test command, as always.

9
00:00:23.530 --> 00:00:29.146
So basically, what I'm saying is,
if you go over to utils &gt; crud.js,

10
00:00:29.146 --> 00:00:38.765
after you check out to lesson-4,
&gt;&gt; Scott Moss: And

11
00:00:38.765 --> 00:00:42.180
you go over to utils &gt; crud.js,
you'll see a few things in here.

12
00:00:42.180 --> 00:00:45.290
There's about five functions in
here that are completely empty,

13
00:00:45.290 --> 00:00:46.800
they don't do anything.

14
00:00:46.800 --> 00:00:51.020
Because these are generic controllers, or

15
00:00:51.020 --> 00:00:54.610
because they're controllers in general,
they have a signature of request response.

16
00:00:54.610 --> 00:00:58.220
Cuz that's just how controllers
in middleware work and Express.

17
00:00:58.220 --> 00:01:00.950
But there's another function before them.

18
00:01:00.950 --> 00:01:04.170
This function is because they're generic,
we've got to pass any model

19
00:01:04.170 --> 00:01:08.070
to the controller itself,
because we won't know what the model is.

20
00:01:08.070 --> 00:01:14.180
The model might be an item, it might be
a user, it might be a whatever, a list.

21
00:01:14.180 --> 00:01:17.580
So we have to pass that model in, and
then those controllers get created.

22
00:01:17.580 --> 00:01:21.780
So that's just because like I said,
we abstracted these and them generic.

23
00:01:21.780 --> 00:01:23.880
But that part you don't really
have to concern yourself with,

24
00:01:23.880 --> 00:01:26.420
the only part that you have to concern
yourself with is actually creating

25
00:01:26.420 --> 00:01:27.840
the controllers themselves.

26
00:01:27.840 --> 00:01:33.096
So for a getOne we know that we wanna
be able to do a model.findOne or

27
00:01:33.096 --> 00:01:34.754
a model.findID.

28
00:01:35.870 --> 00:01:39.390
So for instance, in the case of you
wanna be able to find by an ID if

29
00:01:39.390 --> 00:01:43.360
you go back here, so FindByID.

30
00:01:43.360 --> 00:01:44.910
We're expecting an ID here.

31
00:01:46.420 --> 00:01:50.738
If we go to our routes,
&gt;&gt; Scott Moss: Item router,

32
00:01:50.738 --> 00:01:55.340
you can see that we have
this parameter ID here.

33
00:01:55.340 --> 00:01:58.100
So how do we get the access to that
ID inside of our controller so

34
00:01:58.100 --> 00:01:59.810
we can use it in our database queries?

35
00:01:59.810 --> 00:02:02.497
Well, if we go to our controllers,

36
00:02:02.497 --> 00:02:06.180
you will be able to access
that ID on the request.

37
00:02:06.180 --> 00:02:11.630
So if you req.params,
that's an object of all

38
00:02:11.630 --> 00:02:16.520
the parameters on a URL, whether it's a
slash id, whether it's a create parameter

39
00:02:16.520 --> 00:02:20.910
that somebody unexpectedly sent up,
Express creates all that stuff for you.

40
00:02:20.910 --> 00:02:26.026
So in this case we have
a parameter called ID.

41
00:02:26.026 --> 00:02:28.786
That means, if it's passed, there'll be

42
00:02:28.786 --> 00:02:33.720
something on the request called request
dot params dot whatever this name is.

43
00:02:33.720 --> 00:02:34.360
In this case, ID.

44
00:02:34.360 --> 00:02:39.641
If this was called thing,
then it would be req.params.thing.

45
00:02:39.641 --> 00:02:43.190
If this was called whatever,
then you get the point.

46
00:02:43.190 --> 00:02:44.170
So in this case it's ID.

47
00:02:44.170 --> 00:02:49.475
So we'll have access to the ID that's
passed by doing request.params.id.

48
00:02:49.475 --> 00:02:55.077
And that's how we get that ID that we can
pass to a getOne or a put or a deleteOne.

49
00:02:58.581 --> 00:03:00.789
&gt;&gt; Scott Moss: The other params,
there aren't any other params, so

50
00:03:00.789 --> 00:03:02.328
you won't have any issues with that.

51
00:03:02.328 --> 00:03:06.435
But again, if somebody put create params,
like a question mark after the URL,

52
00:03:06.435 --> 00:03:10.250
pass it up, Express will merge all of
those into the params object, too.

53
00:03:10.250 --> 00:03:13.990
So there'd be collisions, so
that's just one thing to take note of.

54
00:03:13.990 --> 00:03:19.820
So yeah, you're basically, you're going to
create the functionality, given a model.

55
00:03:19.820 --> 00:03:23.935
All you have to do is just create the CRUD
functionality based on the model queries

56
00:03:23.935 --> 00:03:27.240
that I just showed you for
these controllers.

57
00:03:27.240 --> 00:03:29.650
And the tests are testing for that.

58
00:03:29.650 --> 00:03:33.579
There are some specific tests in there,
they have some really good.

59
00:03:33.579 --> 00:03:36.659
They're really good documented, so

60
00:03:36.659 --> 00:03:41.120
if we look at the ones for
the CRUD which in crud.spec.

61
00:03:41.120 --> 00:03:46.270
You'll see getOne,
it finds authenticated users.

62
00:03:46.270 --> 00:03:48.380
It's doing a lot of different stuff here.

63
00:03:48.380 --> 00:03:53.147
So you'll have to test all of this, or
you'll have to get all these test passed

64
00:03:53.147 --> 00:03:58.280
in order to move forward, and again,
they're pretty well documented here.

65
00:03:58.280 --> 00:03:59.931
If you run the test here we can see.

66
00:04:01.087 --> 00:04:04.431
&gt;&gt; Scott Moss: I'll say yarn run,

67
00:04:04.431 --> 00:04:09.549
npm run tests-controllers,

68
00:04:09.549 --> 00:04:12.511
I believe, yes.

69
00:04:17.242 --> 00:04:19.550
&gt;&gt; Scott Moss: Get a whole
bunch of failing tests here.

70
00:04:19.550 --> 00:04:22.410
We scroll up.

71
00:04:22.410 --> 00:04:25.160
You're gonna have two suites
of failing tests, most likely.

72
00:04:25.160 --> 00:04:28.930
So you'll have the generic CRUD
controllers that are failing.

73
00:04:28.930 --> 00:04:33.110
So it's looking for
all these things to be satisfied, and

74
00:04:33.110 --> 00:04:39.130
then you have the ones failing based
off of you not adding the controllers

75
00:04:39.130 --> 00:04:44.430
to the actual item's
controller file itself.

76
00:04:44.430 --> 00:04:47.080
So the items controller file,
which is where I wrote all this stuff, for

77
00:04:47.080 --> 00:04:51.300
you it'll just be empty, it's like almost
nothing here, it's like an empty object.

78
00:04:51.300 --> 00:04:55.120
You gotta fill that out with the generic
controllers that you created and

79
00:04:55.120 --> 00:04:56.310
pass in the right model.

80
00:04:56.310 --> 00:04:59.819
And if you get lost on that,
there's examples inside of, like list,

81
00:04:59.819 --> 00:05:01.310
if you like list controller.

82
00:05:01.310 --> 00:05:02.789
You can kinda see what
I'm talking about here.

83
00:05:07.748 --> 00:05:09.810
&gt;&gt; Scott Moss: So if you get those
to pass, you should be good.

84
00:05:09.810 --> 00:05:16.220
One thing to note is if we go over to
the CRUD controllers or the test here.

85
00:05:18.270 --> 00:05:21.490
It's gonna be expecting there to be

86
00:05:21.490 --> 00:05:26.790
some user object on the request object,
and it's gonna be looking for that.

87
00:05:26.790 --> 00:05:30.870
So that means you're gonna have to
write your controllers in a way that

88
00:05:30.870 --> 00:05:32.500
it expects a user to come in.

89
00:05:32.500 --> 00:05:34.600
Cuz the next thing we're gonna
be doing is authentication, so

90
00:05:34.600 --> 00:05:36.880
these controller are aware
of that authentication.

91
00:05:36.880 --> 00:05:40.660
So just like I said, middleware can
attach things to the request object.

92
00:05:40.660 --> 00:05:43.910
In this case, these controllers
are assuming that there is a user object

93
00:05:43.910 --> 00:05:45.730
attached to the request object, and

94
00:05:45.730 --> 00:05:49.450
that's how it's gonna be identifying
that you can or cannot do something.

95
00:05:49.450 --> 00:05:52.530
So some of the tests you might
see finds authenticated user.

96
00:05:52.530 --> 00:05:55.180
Finds by authenticated user and ID.

97
00:05:55.180 --> 00:05:59.410
So in this case, it's expecting to query

98
00:05:59.410 --> 00:06:04.260
by a user ID which is created by,
and a parameter ID.

99
00:06:04.260 --> 00:06:06.040
So it's doing a combination of both.

100
00:06:06.040 --> 00:06:09.128
But that's basically what's
it's expected to do.

101
00:06:09.128 --> 00:06:10.320
So the test will tell you what to do.

102
00:06:11.800 --> 00:06:14.330
And you can see that if it doesn't
find it, it expects it to 404.

103
00:06:14.330 --> 00:06:17.230
So you'll have to use
the response object and

104
00:06:17.230 --> 00:06:19.760
set the status to be a 404
if you don't find something.

105
00:06:19.760 --> 00:06:23.480
So you might have to do some try catches,
or you might have to do a .din or

106
00:06:23.480 --> 00:06:25.842
.catch in your premises
to figure that out.

107
00:06:30.588 --> 00:06:31.760
&gt;&gt; Scott Moss: Any questions on this?

108
00:06:31.760 --> 00:06:35.090
So there's only five functions
you have to fill out.

109
00:06:35.090 --> 00:06:40.050
And then the next thing you have to do is
just add it to the item controllers.js,

110
00:06:40.050 --> 00:06:43.180
which is very similar to
the list controllers.js.

111
00:06:43.180 --> 00:06:47.689
It's almost identical, the only
difference is the model that you pass in,

112
00:06:47.689 --> 00:06:49.457
which will be the item model.

113
00:06:53.098 --> 00:06:53.699
&gt;&gt; Scott Moss: Yes?

114
00:06:53.699 --> 00:06:56.861
&gt;&gt; Speaker 2: Could you put up the code
again that shows where you connect to

115
00:06:56.861 --> 00:06:58.600
the database?

116
00:06:58.600 --> 00:07:01.610
&gt;&gt; Scott Moss: You won't have to connect
to the database in this one, but

117
00:07:01.610 --> 00:07:02.760
I can show you, yeah.

118
00:07:02.760 --> 00:07:03.990
You shouldn't have to do it.

119
00:07:03.990 --> 00:07:07.310
The only reason I had to connect to the
database because I was running just that

120
00:07:07.310 --> 00:07:08.370
one file.

121
00:07:08.370 --> 00:07:11.105
Outside of the application, so
I had to connect to the database, but

122
00:07:11.105 --> 00:07:13.400
you're gonna be running
your code in the context.

123
00:07:13.400 --> 00:07:15.440
Yeah, exactly, so you should be fine.

124
00:07:15.440 --> 00:07:15.940
&gt;&gt; Speaker 2: Okay.

