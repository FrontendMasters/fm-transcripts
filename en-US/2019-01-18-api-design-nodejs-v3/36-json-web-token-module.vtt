WEBVTT

1
00:00:00.090 --> 00:00:03.465
&gt;&gt; Scott Moss: So
before we get into the exercise,

2
00:00:03.465 --> 00:00:09.101
what I'm gonna do is i'm going
to check out to lesson five.

3
00:00:16.193 --> 00:00:20.888
&gt;&gt; Scott Moss: And
then what you'll see in here is,

4
00:00:20.888 --> 00:00:27.405
if you go down to utils &gt; auth,
some stuff in here.

5
00:00:27.405 --> 00:00:29.116
I just wanna walk through what's in here,

6
00:00:29.116 --> 00:00:32.120
that's already here that you
already have and what it's doing.

7
00:00:32.120 --> 00:00:35.190
That way you'll have more context when
you actually go complete the exercise.

8
00:00:36.650 --> 00:00:37.330
So if you go to auth.js,

9
00:00:37.330 --> 00:00:40.130
you'll see two functions in here
that are already filled out.

10
00:00:40.130 --> 00:00:43.940
There is a function called newToken and
a function called verifyToken.

11
00:00:43.940 --> 00:00:45.450
These are the two things
that I was talking about.

12
00:00:45.450 --> 00:00:50.457
So newToken, given a user objects
from the database, a user document,

13
00:00:50.457 --> 00:00:54.414
will create a new JSON Web Token
based on that user's ID.

14
00:00:54.414 --> 00:00:55.830
That's basically what it does.

15
00:00:55.830 --> 00:01:01.100
So given a user object, it'll return back
adjacent web token based on that user ID,

16
00:01:01.100 --> 00:01:03.900
signed with the correct secrets and
expiration time.

17
00:01:05.420 --> 00:01:06.427
That's already done for you.

18
00:01:06.427 --> 00:01:08.840
And then verifyToken does the opposite.

19
00:01:08.840 --> 00:01:10.130
Given a token,

20
00:01:10.130 --> 00:01:14.530
it'll verify that that token was created
with the same secret from the same server,

21
00:01:14.530 --> 00:01:17.910
and then it will return the payload,
which in this case will be a user.

22
00:01:17.910 --> 00:01:21.300
So it'll do the opposite of newToken,
they're the opposites of each other.

23
00:01:21.300 --> 00:01:22.957
Those are already done for you.

24
00:01:22.957 --> 00:01:24.185
And you might be thinking about,
well, damn,

25
00:01:24.185 --> 00:01:25.750
what are we gonna do if
that's already done?

26
00:01:25.750 --> 00:01:29.650
Well, [LAUGH] that part is done, but
you still have to add to Express, and

27
00:01:29.650 --> 00:01:31.600
that's the part that
you're gonna be doing.

28
00:01:31.600 --> 00:01:32.795
They're pretty simple,

29
00:01:32.795 --> 00:01:36.420
I'm just using a JSON Web Token
package from NPM there's tons of them.

30
00:01:36.420 --> 00:01:39.233
This one is probably the most popular one,
and

31
00:01:39.233 --> 00:01:43.490
it just has a sign method that allows
me to sign an object with a secret,

32
00:01:43.490 --> 00:01:47.478
and I can add an optional expires
time when this token is expired.

33
00:01:47.478 --> 00:01:49.485
And then the verifyToken
does the opposite.

34
00:01:49.485 --> 00:01:53.010
Given a token with the same secret
that it should have been signed with,

35
00:01:53.010 --> 00:01:56.445
I either get a error or the payload
that was used to create that token.

36
00:01:56.445 --> 00:02:00.600
And that's it, it's a in-out operation.

37
00:02:00.600 --> 00:02:04.422
User goes in, token comes out,
token goes in, user comes out.

38
00:02:04.422 --> 00:02:05.694
That's what these two functions are doing.

