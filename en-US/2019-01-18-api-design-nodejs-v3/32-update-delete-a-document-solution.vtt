WEBVTT

1
00:00:00.120 --> 00:00:02.090
&gt;&gt; Scott Moss: And
then now for an update one.

2
00:00:02.090 --> 00:00:09.548
Well, it says find a doc by authenticating
a user and ID to update and 400 if no doc.

3
00:00:09.548 --> 00:00:14.761
Okay, so what we'll do

4
00:00:14.761 --> 00:00:21.055
is const doc = await model.

5
00:00:21.055 --> 00:00:27.179
.findOneAndUpdate.

6
00:00:27.179 --> 00:00:30.699
The reason I chose findOneUpdate is
because I have two parameters that I need

7
00:00:30.699 --> 00:00:34.280
to find by, the ID of the document itself,
and then the authenticated user.

8
00:00:34.280 --> 00:00:38.149
If it was just the ID of the document
I could do find by ID and update, but

9
00:00:38.149 --> 00:00:41.249
because I have more than just
an ID I have to use findOne.

10
00:00:41.249 --> 00:00:47.784
So, for _ID,
it's going to be req.prams.id and

11
00:00:47.784 --> 00:00:52.239
then for creativei which is the user

12
00:00:52.239 --> 00:00:56.853
it's going to be req.user._id.

13
00:00:56.853 --> 00:00:57.875
So that's defined, and

14
00:00:57.875 --> 00:01:00.460
then the update is going to be
whatever they posted to the body.

15
00:01:00.460 --> 00:01:01.780
So req.body.

16
00:01:01.780 --> 00:01:04.790
Whatever that is, that's what
the update body is supposed to be.

17
00:01:04.790 --> 00:01:08.676
Because this is res we want to send back
the new updated object, we put new true.

18
00:01:09.890 --> 00:01:12.937
Remember, we have to put that, otherwise
we won't get back the updated object,

19
00:01:12.937 --> 00:01:15.736
we'll get back to object before it was
updated, which is not what we want.

20
00:01:23.269 --> 00:01:28.019
&gt;&gt; Scott Moss: So now that we have that,
then you can just say

21
00:01:28.019 --> 00:01:34.850
res.status(200).json, and
we can send back the data.

22
00:01:34.850 --> 00:01:36.781
And that will be doc.

23
00:01:38.858 --> 00:01:43.037
&gt;&gt; Scott Moss: And then it says,
it 400, if there is no doc, so

24
00:01:43.037 --> 00:01:49.262
what we're gonna do is say, if no doc,
I say and there was nothing to find and

25
00:01:49.262 --> 00:01:54.545
update, then we'll just
return a res.status(400).en

26
00:02:02.164 --> 00:02:03.632
&gt;&gt; Scott Moss: So, execute those.

27
00:02:08.608 --> 00:02:11.132
&gt;&gt; Scott Moss: Okay, if we scroll up,
looks like those tests passed.

28
00:02:15.788 --> 00:02:19.544
&gt;&gt; Scott Moss: Okay, and if the last is
removeOne, very similar to updateOne,

29
00:02:21.396 --> 00:02:25.717
&gt;&gt; Scott Moss: We are going to say doc =

30
00:02:25.717 --> 00:02:32.211
await model.findOneandRemove.

31
00:02:33.390 --> 00:02:34.880
And we're gonna do the same thing.

32
00:02:34.880 --> 00:02:39.840
We're gonna find by id _id,
which is req.params.id.

33
00:02:39.840 --> 00:02:44.260
And then the createdBy,
which will be req.user._id.

34
00:02:44.260 --> 00:02:48.013
And there's no other arguments for

35
00:02:48.013 --> 00:02:52.023
this to take, so we'll just do that.

36
00:02:52.023 --> 00:02:58.715
.exec and it looks like, so
find the one to remove and

37
00:02:58.715 --> 00:03:02.878
then 400 if there is no doc, so

38
00:03:02.878 --> 00:03:10.490
if there was no doc to remove,
res dot status 400 dot end.

39
00:03:12.890 --> 00:03:19.794
But there was,
now I would just say res.status(200).json,

40
00:03:19.794 --> 00:03:22.418
and then select the data.

41
00:03:25.252 --> 00:03:28.050
&gt;&gt; Scott Moss: Cool, and
it looks like all those test passed

