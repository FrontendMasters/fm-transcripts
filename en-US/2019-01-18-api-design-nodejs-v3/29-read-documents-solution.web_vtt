WEBVTT

1
00:00:00.100 --> 00:00:01.360
&gt;&gt; Scott Moss: Cool.
Welcome back.

2
00:00:01.360 --> 00:00:07.658
I hope everybody had a challenging time
trying to get those controllers done.

3
00:00:07.658 --> 00:00:12.439
There was a lot there to sink in, because
it's kinda like what I said before,

4
00:00:12.439 --> 00:00:13.260
we left off.

5
00:00:13.260 --> 00:00:19.440
If you can read the notes, I said, we need
a way to hook our routes up to our models,

6
00:00:19.440 --> 00:00:22.760
so we can perform CRUD on the models
based on the routes verbs, and

7
00:00:22.760 --> 00:00:24.510
that's exactly what controllers do.

8
00:00:24.510 --> 00:00:27.940
So controllers are the crossroads between
the routes that we've been doing,

9
00:00:27.940 --> 00:00:31.280
and the models and schemas that we've
been creating, and combining them.

10
00:00:31.280 --> 00:00:34.870
So this is a lot of context
to soak in to get it right.

11
00:00:34.870 --> 00:00:37.013
Cuz you gotta understand the routes and
the verbs.

12
00:00:37.013 --> 00:00:41.480
And then you gotta understand
the models and the schemas.

13
00:00:41.480 --> 00:00:43.090
And then, you gotta build the controller.

14
00:00:43.090 --> 00:00:45.030
So there's just a lot to dig in.

15
00:00:45.030 --> 00:00:47.250
And these are just generic CRUD ones.

16
00:00:47.250 --> 00:00:50.510
So if you're building a different
business case specific ones,

17
00:00:50.510 --> 00:00:51.960
they can get even more complicated.

18
00:00:51.960 --> 00:00:53.406
So there's a lot of context here.

19
00:00:53.406 --> 00:00:57.380
So you gotta look at a lot of places to
understand what the tests are written out,

20
00:00:57.380 --> 00:01:01.980
in such a way that you can look at them
to understand what's expected, and then,

21
00:01:01.980 --> 00:01:04.640
try to walk backwards from there.

22
00:01:04.640 --> 00:01:06.060
All right, so
I'm gonna go through the solution.

23
00:01:06.060 --> 00:01:09.260
As I'm going through the solution,
feel free to interrupt me, ask questions.

24
00:01:09.260 --> 00:01:11.110
There's not one right way to do this.

25
00:01:11.110 --> 00:01:13.620
Even with the test you can do
this a lot of different ways,

26
00:01:13.620 --> 00:01:14.860
cuz the tests are very generic.

27
00:01:14.860 --> 00:01:16.680
They're not even super strict test.

28
00:01:16.680 --> 00:01:19.730
I would actually write way more tests
from our controllers than I did.

29
00:01:19.730 --> 00:01:21.720
So I'm going to tend to do that.

30
00:01:22.780 --> 00:01:30.010
So we start with the CRUDS back here,
and we'll head over to crud.js.

31
00:01:30.010 --> 00:01:31.540
And we'll start with getOne.

32
00:01:31.540 --> 00:01:36.062
So getOne inside of our CRUD,
which is what we're doing for

33
00:01:36.062 --> 00:01:38.080
a REST, that's gonna be a read.

34
00:01:38.080 --> 00:01:42.620
And we know for read, we can use,
what do we have here?

35
00:01:42.620 --> 00:01:46.510
We have find, findOne, and findById, so

36
00:01:46.510 --> 00:01:50.230
those are some of the methods we can
use on this model that we're given.

37
00:01:50.230 --> 00:01:54.513
If we look at the test for
CRUD spec, the getOne,

38
00:01:54.513 --> 00:01:59.633
it's expecting to find one by
an ID from a user, and then,

39
00:01:59.633 --> 00:02:04.880
a parameter,
because getOne actually uses /id, right?

40
00:02:04.880 --> 00:02:08.150
So if we look at the router,
we know that getOne has an ID unit, and

41
00:02:08.150 --> 00:02:09.090
an ID parameter.

42
00:02:09.090 --> 00:02:12.950
So we have that one parameter, but also,
because this is gonna be an authenticated

43
00:02:12.950 --> 00:02:18.480
API, we need to search for, not only for
this ID, but for the user's one, as well.

44
00:02:18.480 --> 00:02:22.965
What are the chances that two different
users will have an item with the same id?

45
00:02:22.965 --> 00:02:26.760
Hopefully, none, cuz your database
doesn't give out conflicting IDs.

46
00:02:26.760 --> 00:02:28.560
And that would be really bad.

47
00:02:28.560 --> 00:02:32.500
But we should still namespace our query
with a user id anyway, just to guarantee

48
00:02:32.500 --> 00:02:35.380
that somebody isn't getting something
that doesn't belong to them.

49
00:02:35.380 --> 00:02:36.780
That's just what you should do anyway.

50
00:02:36.780 --> 00:02:37.682
So that's why we're doing that.

51
00:02:40.108 --> 00:02:41.310
&gt;&gt; Scott Moss: So we head over to CRUD.

52
00:02:41.310 --> 00:02:42.180
We have a model.

53
00:02:42.180 --> 00:02:45.930
The first thing is,
let's just grab the id from the request.

54
00:02:45.930 --> 00:02:50.040
So that'll just be rec.params.id.

55
00:02:50.040 --> 00:02:56.060
And we know that because a getOne, if we
go look at the router, has this id in it.

56
00:02:56.060 --> 00:02:57.390
So we got that.

57
00:02:57.390 --> 00:03:01.540
The other way you might have known that,
is if you looked at the test,

58
00:03:01.540 --> 00:03:04.370
you can see that I'm passing it
a request object here that I made, and

59
00:03:04.370 --> 00:03:07.040
it has a params.idproperty on it.

60
00:03:07.040 --> 00:03:09.990
Which is exactly what express would
do if you were to run the server,

61
00:03:09.990 --> 00:03:12.870
so that's why I mocked it out like that,
it's the same thing express would do.

62
00:03:14.490 --> 00:03:15.996
So we have that.

63
00:03:15.996 --> 00:03:21.710
And then for the user,
the user would also be req.user.

64
00:03:21.710 --> 00:03:27.740
And the only way you would have found
this out, is if you looked at the test.

65
00:03:27.740 --> 00:03:33.038
There's an underscore id for
this use here, so rec.user._id.

66
00:03:35.657 --> 00:03:41.040
&gt;&gt; Scott Moss: So now, we have our user,
I'm just gonna say user id, and our ID.

67
00:03:41.040 --> 00:03:43.330
So now we wanna perform a getOne.

68
00:03:43.330 --> 00:03:47.760
So a getOne will look like this,
I'm just gonna call it a document.

69
00:03:47.760 --> 00:03:51.120
It's gotta be an await model,
so whatever the model is.

70
00:03:51.120 --> 00:03:52.490
I have no idea what this
model is going to be.

71
00:03:52.490 --> 00:03:53.800
It could be a list, it could be an item.

72
00:03:53.800 --> 00:03:55.870
It could be whatever
database model we have.

73
00:03:55.870 --> 00:03:56.920
I have no idea what it's gonna be.

74
00:03:56.920 --> 00:03:57.660
It doesn't matter,

75
00:03:57.660 --> 00:04:01.010
cuz we're gonna do a getOne on it,
with these parameters, and that's it.

76
00:04:02.010 --> 00:04:04.530
So for getOne, remember,
we can do findById,

77
00:04:04.530 --> 00:04:07.670
but we're not gonna do that because we
have two parameters, we have to search by.

78
00:04:07.670 --> 00:04:12.494
So we can't do a findByID,
so we need a findOne.

79
00:04:12.494 --> 00:04:14.690
And at findOne,
you can pass as whatever field you want.

80
00:04:14.690 --> 00:04:16.875
So the first field we wanna
search is gonna be _id.

81
00:04:18.420 --> 00:04:23.699
Underscore id is, and
when you create a document in Mongo,

82
00:04:23.699 --> 00:04:26.136
it always gives it an _id.

83
00:04:26.136 --> 00:04:30.196
That's how it ids things in Mongo
in database, it makes an _id.

84
00:04:30.196 --> 00:04:32.062
So that's what we're gonna search for, and

85
00:04:32.062 --> 00:04:35.910
that's gonna be whatever id was
passed to us through the parameter.

86
00:04:35.910 --> 00:04:40.700
That _id is gonna be the same thing as
the ID that's here in the parameter.

87
00:04:40.700 --> 00:04:44.290
So when someone asks for
a task with an ID of ABCD123,

88
00:04:44.290 --> 00:04:49.120
that's the ID that they're gonna be
passing, that _id for it in the database.

89
00:04:49.120 --> 00:04:50.370
So that's the first thing.

90
00:04:50.370 --> 00:04:54.430
The second thing is the user, so the only
way you would have found this out,

91
00:04:54.430 --> 00:04:59.220
is if you looked at our schema that
you created, and item or even list,

92
00:04:59.220 --> 00:05:03.860
and you would've seen
that in the model itself.

93
00:05:03.860 --> 00:05:06.274
They both have users on them
that are on the createdBy field.

94
00:05:07.530 --> 00:05:08.840
That's where this comes in at.

95
00:05:08.840 --> 00:05:13.880
So we only wanna get the item or
the list from the authenticated user.

96
00:05:13.880 --> 00:05:14.800
And how do we know it's theirs?

97
00:05:14.800 --> 00:05:15.670
Well, they created it.

98
00:05:15.670 --> 00:05:16.770
There's a createdBy field on it.

99
00:05:18.820 --> 00:05:22.380
So that's what we're gonna search for
here, createdBy.

100
00:05:22.380 --> 00:05:26.142
&gt;&gt; Scott Moss: And then, we're gonna pass
in the userId there, so we get that, so

101
00:05:26.142 --> 00:05:26.680
userId.

102
00:05:26.680 --> 00:05:32.388
And then, I'm just gonna do .exec,
cool, so that'll give us a document.

103
00:05:32.388 --> 00:05:37.510
And then, the test,
if you ran it or you looked at it,

104
00:05:37.510 --> 00:05:42.020
it's expecting, or another text is,
if there is no document,

105
00:05:42.020 --> 00:05:46.400
if it wasn't found, then, it should 404,
send back a status of 404.

106
00:05:46.400 --> 00:05:48.600
So that's what I'll do.

107
00:05:48.600 --> 00:05:53.236
So I'll say, if not a document,
so if nothing was returned

108
00:05:53.236 --> 00:05:57.797
from the database,
then resource.status(404).

109
00:05:57.797 --> 00:06:02.719
And then, you have to end it, because
a status doesn't send back a response,

110
00:06:02.719 --> 00:06:04.300
it just sets the status.

111
00:06:04.300 --> 00:06:05.630
You still have to do a dot send or

112
00:06:05.630 --> 00:06:09.180
a dot in, at some point, which is
what I described to you all before.

113
00:06:09.180 --> 00:06:11.170
And I'll put a return here.

114
00:06:11.170 --> 00:06:15.390
But if it does, if it is there, then
I'll just go ahead and say res.status.

115
00:06:15.390 --> 00:06:17.470
Actually I don't have to set a status,
it's 200 by default.

116
00:06:17.470 --> 00:06:19.780
I'll just do a dot json here.

117
00:06:21.060 --> 00:06:23.106
With a data property and a doc.

118
00:06:32.606 --> 00:06:35.082
&gt;&gt; Speaker 2: If you
were to do a res.send,

119
00:06:35.082 --> 00:06:39.380
you'd have to set the response types and
stuff?

120
00:06:39.380 --> 00:06:43.790
&gt;&gt; Scott Moss: No, the only reason
you can't do a res.send here,

121
00:06:43.790 --> 00:06:46.660
is because the test isn't looking for
it, that's it.

122
00:06:46.660 --> 00:06:48.290
It would work in Express.

123
00:06:48.290 --> 00:06:50.470
It's just that's what
the test is looking for.

124
00:06:50.470 --> 00:06:52.340
You could do a res.set in Express,
totally works.

125
00:06:52.340 --> 00:06:57.235
If you ran this with a rest.send,
it would work, but the test is looking for

126
00:06:57.235 --> 00:07:00.468
a res.json, and
I specifically asked for that.

127
00:07:00.468 --> 00:07:00.980
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Scott Moss: Yeah.

128
00:07:00.980 --> 00:07:03.194
[LAUGH] If that's all that you messed

129
00:07:03.194 --> 00:07:04.370
up on, you did fine.

130
00:07:04.370 --> 00:07:06.940
But, in the other way, you can say,
that is if you go look.

131
00:07:06.940 --> 00:07:09.560
Remember, I mocked out this object.

132
00:07:09.560 --> 00:07:12.330
These objects are mocked out,
request and response, right?

133
00:07:12.330 --> 00:07:16.970
If you go look at this test, you can
see literally right here, response.

134
00:07:16.970 --> 00:07:17.738
There's a RES.

135
00:07:17.738 --> 00:07:19.300
There's a status and there's a json.

136
00:07:19.300 --> 00:07:21.735
There's no send method on here.

137
00:07:21.735 --> 00:07:25.270
So if you try to call send,
that function doesn't exist.

138
00:07:25.270 --> 00:07:27.670
So I did that to force you
to use the other method,

139
00:07:27.670 --> 00:07:30.480
json, because we've been
using send this whole time.

140
00:07:30.480 --> 00:07:32.800
So I want you to use another one,
and that's why I did it that way.

141
00:07:34.390 --> 00:07:36.800
And that's why you're all like, well,
we've been using send, what's going on?

142
00:07:36.800 --> 00:07:38.670
Yeah, I wanted you to use JSON.

143
00:07:38.670 --> 00:07:41.820
But, yeah, that's how you can test, so
remember, if you can't really figure out

144
00:07:41.820 --> 00:07:44.869
what's going on, the test always
tells the truth, so look at the test.

145
00:07:47.120 --> 00:07:55.680
Cool, so now if we run this test,
&gt;&gt; Scott Moss: Yarn test,

146
00:07:55.680 --> 00:08:01.020
or I'll do npm run tests models,
I believe.

147
00:08:01.020 --> 00:08:03.100
Some of the route tests might fail.

148
00:08:03.100 --> 00:08:06.370
They might run, because the route's
messed up with the controllers now, but

149
00:08:06.370 --> 00:08:07.340
that's fine you can ignore them.

150
00:08:09.350 --> 00:08:11.330
It's not models, what is it?

151
00:08:11.330 --> 00:08:12.330
Controllers, see, I'm sorry.

152
00:08:19.490 --> 00:08:21.760
Okay, so let's see what happened here.

153
00:08:25.610 --> 00:08:26.110
Okay.

154
00:08:27.740 --> 00:08:29.630
Guess I do have to put a status here,
guess you're right.

155
00:08:29.630 --> 00:08:33.293
[LAUGH]
&gt;&gt; Scott Moss: Let's see,

156
00:08:33.293 --> 00:08:34.760
did I write it that strict?

157
00:08:34.760 --> 00:08:35.490
Man, I'm a jerk.

158
00:08:39.202 --> 00:08:42.122
&gt;&gt; Scott Moss: Okay,
it looks like that passed half the tests,

159
00:08:42.122 --> 00:08:46.480
yeah, okay, so yeah, yeah,
you do have to explicitly set the status.

160
00:08:46.480 --> 00:08:49.321
All right, guess I wanted you
to explicitly set the status and

161
00:08:49.321 --> 00:08:53.474
not unintentionally set the status, so-
&gt;&gt; [INAUDIBLE]

162
00:08:53.474 --> 00:08:55.371
&gt;&gt; Scott Moss: Yes, set the status, but

163
00:08:55.371 --> 00:08:58.579
I actually wanted you to call
the .status method itself,

164
00:08:58.579 --> 00:09:02.070
versus having to implicitly do it,
so that satisfy that one.

165
00:09:02.070 --> 00:09:03.460
And then, for the-
&gt;&gt; Speaker 2: Are you saying that

166
00:09:03.460 --> 00:09:06.010
your assertions look for that, or-
&gt;&gt; Scott Moss: My

167
00:09:06.010 --> 00:09:06.810
assertions look for that.

168
00:09:06.810 --> 00:09:11.111
&gt;&gt; Speaker 2: So
if your assertions work, [INAUDIBLE].

169
00:09:11.111 --> 00:09:13.710
&gt;&gt; Scott Moss: Yeah, yeah,
it would work in Express for sure.

170
00:09:13.710 --> 00:09:17.425
&gt;&gt; Speaker 2: And it's
&gt;&gt; Scott Moss: Yes, exactly.

171
00:09:17.425 --> 00:09:19.796
Yep, I'm mocking it out,
that's for sure, yep.

172
00:09:19.796 --> 00:09:24.215
And then 404, if no doc was found,
so for that one, if we look at what

173
00:09:24.215 --> 00:09:28.638
it's expecting, it looks like it's
expecting us to call status, and

174
00:09:28.638 --> 00:09:32.490
then call end, or it says 400 here,
it should be a 404.

175
00:09:32.490 --> 00:09:35.109
So if you ran into this problem,
that's because, yeah,

176
00:09:35.109 --> 00:09:38.697
it looks like I fact figured that one,
that should be a 404, and not 400.

177
00:09:38.697 --> 00:09:41.529
So that should be 404 in the test.

178
00:09:43.527 --> 00:09:46.406
&gt;&gt; Scott Moss: And
then setting a 404 here would fix that.

179
00:09:46.406 --> 00:09:48.521
So run that.

180
00:09:52.673 --> 00:09:57.350
&gt;&gt; Scott Moss: And
it looks like that one passed as well.

181
00:09:57.350 --> 00:10:00.970
So we got that, and then we got the 404.

182
00:10:00.970 --> 00:10:03.020
Okay, let's do a getMany.

183
00:10:04.540 --> 00:10:07.482
So for a get-
&gt;&gt; Speaker 2: Just out of curiosity, so

184
00:10:07.482 --> 00:10:11.913
I made my, I sent back 400s,
cuz it said 400 in the test.

185
00:10:11.913 --> 00:10:14.240
I mean,
what's the difference between those two?

186
00:10:14.240 --> 00:10:15.120
&gt;&gt; Scott Moss: That's a good question.

187
00:10:15.120 --> 00:10:16.840
&gt;&gt; Speaker 2: 404 is document,
not found or something.

188
00:10:16.840 --> 00:10:19.570
&gt;&gt; Scott Moss: Right, so
technically, what's the difference?

189
00:10:19.570 --> 00:10:20.790
Nothing, you're just a number.

190
00:10:20.790 --> 00:10:24.690
The only difference is,
is how the requester handles it, right?

191
00:10:24.690 --> 00:10:28.509
A browser handles a 404
different than it handles a 400.

192
00:10:28.509 --> 00:10:31.036
So it really depends on what's

193
00:10:31.036 --> 00:10:33.660
making the request-
&gt;&gt; Speaker 2: What it's gonna do with

194
00:10:33.660 --> 00:10:34.560
it in the browser?

195
00:10:34.560 --> 00:10:35.520
&gt;&gt; Scott Moss: Right.
&gt;&gt; Speaker 2: Or wherever you are.

196
00:10:35.520 --> 00:10:38.770
&gt;&gt; Scott Moss: Exactly, as far as the
server's concerned, doesn't really matter.

197
00:10:38.770 --> 00:10:42.770
I mean, you might have something on your
server, like, that's watching your API,

198
00:10:42.770 --> 00:10:45.530
watching for errors, and it does something
different for different status codes,

199
00:10:45.530 --> 00:10:49.490
as well, but as far as Xpress is
concerned, it's just a number.

200
00:10:49.490 --> 00:10:52.580
I mean, you can set it to what you
want honestly, it doesn't care.

201
00:10:52.580 --> 00:10:55.540
But if you're doing RESTS than yeah,
you do a 404,

202
00:10:55.540 --> 00:11:00.700
you do a 200's, your 201's, and
your 401's, and stuff like that.

203
00:11:00.700 --> 00:11:03.760
So yeah, not really a big thing.

204
00:11:03.760 --> 00:11:07.699
Most different, modern,
I would say modern, anything after REST,

205
00:11:07.699 --> 00:11:12.658
API interfaces, like GraphQL or whatever,
they don't even care about status codes.

206
00:11:12.658 --> 00:11:16.160
Everything's a 200,
even an error's a 200, it doesn't matter.

207
00:11:16.160 --> 00:11:19.440
So it really depends on what
your clients are doing.

