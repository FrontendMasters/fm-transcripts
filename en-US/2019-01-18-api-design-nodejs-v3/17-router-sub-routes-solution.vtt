WEBVTT

1
00:00:00.260 --> 00:00:04.190
&gt;&gt; Scott Moss: During the break, we were
tasked with completing the crud routes for

2
00:00:04.190 --> 00:00:06.980
the item resource that we have and

3
00:00:06.980 --> 00:00:11.430
right now you'll see that there's
just a blank router here.

4
00:00:11.430 --> 00:00:15.070
So what I'm gonna do is I'm gonna walk
through my solution of how I would have

5
00:00:15.070 --> 00:00:17.060
completed this to get the test to pass.

6
00:00:17.060 --> 00:00:20.260
So feel free to follow along, but
the same solution is also going to

7
00:00:20.260 --> 00:00:24.620
be on the lesson-2-solution branch where
you can check out too and see there.

8
00:00:24.620 --> 00:00:27.421
So I'm just gonna go ahead and
get started.

9
00:00:27.421 --> 00:00:33.041
So because we wanna mount this
router at the /api/resource name,

10
00:00:33.041 --> 00:00:37.587
in this case item,
we're gonna mount it at that path.

11
00:00:37.587 --> 00:00:39.620
There's actually a lot of
different ways that we can do it.

12
00:00:39.620 --> 00:00:44.180
And how you do it is gonna determine what
you can do later with your routers and

13
00:00:44.180 --> 00:00:45.780
how you organize your code.

14
00:00:45.780 --> 00:00:48.530
So I'll walk through some different
scenarios of the different ways you can do

15
00:00:48.530 --> 00:00:52.190
it and then I'll also walk through
how I'm gonna do it and why.

16
00:00:52.190 --> 00:00:57.270
So the first obvious scenario
is that you might start

17
00:00:57.270 --> 00:01:02.040
naming the full route path here with
this router because that's very obvious,

18
00:01:02.040 --> 00:01:04.390
cuz it's a router and
we're gonna put the full route path.

19
00:01:04.390 --> 00:01:06.900
So you might do something like this.

20
00:01:06.900 --> 00:01:09.750
In this case I'm just gonna do get for
now.

21
00:01:09.750 --> 00:01:12.550
So you might do something like /api/item.

22
00:01:12.550 --> 00:01:14.940
I'm gonna do a get request to that.

23
00:01:14.940 --> 00:01:16.320
And there's nothing wrong with that.

24
00:01:16.320 --> 00:01:20.050
You can totally do that and
you can do that for every single

25
00:01:20.050 --> 00:01:25.070
route verb combination we might have
slash api slash item slash id for a post.

26
00:01:25.070 --> 00:01:29.240
I'm sorry, for a put,
slash api slash item for a post,

27
00:01:29.240 --> 00:01:31.200
you can do that all the way down.

28
00:01:31.200 --> 00:01:35.630
The issue is what's gonna happen
is when you go mount that

29
00:01:35.630 --> 00:01:39.590
on your server,
where would you mount that?

30
00:01:40.860 --> 00:01:45.250
So the only way you can mount
that is you would have to do, you

31
00:01:46.610 --> 00:01:52.200
would have to realize that you could
do itemrouter like this without a path.

32
00:01:52.200 --> 00:01:56.310
So you would import itemRouter and
then you would pass in without a path

33
00:01:56.310 --> 00:02:00.690
at all because the item router
itself determines the full path.

34
00:02:00.690 --> 00:02:01.810
So that's how you would do that.

35
00:02:01.810 --> 00:02:03.610
So you could do that, and

36
00:02:03.610 --> 00:02:07.150
that way this file doesn't have
to know about any of the routes.

37
00:02:07.150 --> 00:02:08.930
It doesn't have to know
about any of the names.

38
00:02:08.930 --> 00:02:11.070
You can just abstract it completely away.

39
00:02:11.070 --> 00:02:12.080
So that's one way.

40
00:02:12.080 --> 00:02:18.420
But the way that I'm gonna do it is
I'm going to do have this router

41
00:02:18.420 --> 00:02:22.700
not know about where it's mounted, it's
just gonna know about it's relative route.

42
00:02:22.700 --> 00:02:24.900
It's not gonna know
about its parent routes.

43
00:02:24.900 --> 00:02:29.470
So basically what that means is,
instead of it knowing about /api/item, and

44
00:02:29.470 --> 00:02:33.030
having control over that,
all it knows about is its relative route,

45
00:02:33.030 --> 00:02:34.430
in this case it'll just be slash.

46
00:02:34.430 --> 00:02:39.000
So by the time this router executes,
it's already gonna be at /api/item.

47
00:02:39.000 --> 00:02:41.880
And then this router runs,
so it's just relative.

48
00:02:41.880 --> 00:02:44.540
So in this case, I'm gonna do that and

49
00:02:44.540 --> 00:02:49.310
I'm gonna use the .route method which
I showed you all before we headed off.

50
00:02:49.310 --> 00:02:54.822
And I'm gonna say, cool, for a .route
to this path which is just the index.

51
00:02:54.822 --> 00:03:00.213
So in this case, because we're
gonna mount it at /api, /item,

52
00:03:00.213 --> 00:03:05.915
this route right here, just a slash,
is equivalent to /api/item.

53
00:03:05.915 --> 00:03:08.070
It's equivalent to that cuz that's
where I'm gonna mount this router.

54
00:03:08.070 --> 00:03:11.550
I'm gonna mount this router here,
/api/item.

55
00:03:11.550 --> 00:03:15.620
So that means this route
is equivalent to this.

56
00:03:15.620 --> 00:03:16.609
It's the index for this.

57
00:03:18.200 --> 00:03:19.410
So I'm gonna route there.

58
00:03:19.410 --> 00:03:23.940
And I know I need a get request
to be able to get many.

59
00:03:23.940 --> 00:03:29.202
And then I need a post request to be
able to create one, so that's one.

60
00:03:29.202 --> 00:03:35.082
And then I needed a router.route('/:id')

61
00:03:35.082 --> 00:03:40.543
which is gonna be
equivalent to / API/item.

62
00:03:40.543 --> 00:03:45.180
It's gonna be equivalent to that or
/ID, sorry.

63
00:03:45.180 --> 00:03:50.600
So that's gonna be equiv because again,
this is gonna be mounted at /API/item.

64
00:03:50.600 --> 00:03:52.680
So this is what comes after.

65
00:03:52.680 --> 00:03:53.990
Express is gonna combine the routes for
me.

66
00:03:55.760 --> 00:03:57.510
So now that I have that,
I can go ahead and

67
00:03:57.510 --> 00:04:01.970
do my put request, which is the update.

68
00:04:01.970 --> 00:04:05.180
I'll do my delete request
which is to delete one.

69
00:04:05.180 --> 00:04:07.500
Now I'll do my get request
which is to get one by an ID.

70
00:04:08.760 --> 00:04:10.570
So now that I have all those,
I'm gonna go ahead and

71
00:04:10.570 --> 00:04:12.220
just mock out these
controllers right quick.

72
00:04:12.220 --> 00:04:16.195
I'm just gonna make one mock
controller that just does nothing.

73
00:04:23.402 --> 00:04:26.675
&gt;&gt; Scott Moss: And
I'll just res.send a message.

74
00:04:29.153 --> 00:04:30.450
&gt;&gt; Scott Moss: There we go.

75
00:04:30.450 --> 00:04:33.800
And I'll just add
the controller to all of them.

76
00:04:33.800 --> 00:04:35.700
If you don't have a controller
here that sends something back and

77
00:04:35.700 --> 00:04:39.840
you try to run these routes,
you might not get a response,

78
00:04:39.840 --> 00:04:41.610
actually you won't get a response,
it will just hang.

79
00:04:41.610 --> 00:04:45.010
So if your server was hanging even though
you know your routes were right, you were

80
00:04:45.010 --> 00:04:48.428
not getting a 404, it's cuz you didn't
send something back in a controller.

81
00:04:48.428 --> 00:04:51.231
So I was gonna send something back,

82
00:04:51.231 --> 00:04:55.536
put a fake controller on all of these,
have it export.

83
00:04:55.536 --> 00:04:59.496
So now that I'm exporting, and then
the sweet thing about the E6 stuff here is

84
00:04:59.496 --> 00:05:03.756
that because I'm exporting as a default,
I can import it whatever name that I want,

85
00:05:03.756 --> 00:05:06.060
because it's a default export.

86
00:05:06.060 --> 00:05:11.660
If it's a named export, as in,
I got rid of line 20, and I put the word

87
00:05:11.660 --> 00:05:16.520
export in front of router, then now I
have to import it with the name router.

88
00:05:17.580 --> 00:05:18.610
But on the import,

89
00:05:18.610 --> 00:05:22.610
I can also change the name there using
the as keyword, import as something else.

90
00:05:22.610 --> 00:05:25.940
So there's a lot of ways you can do that
in the S6, I'm just gonna import it, or

91
00:05:25.940 --> 00:05:27.790
export it as a default here.

92
00:05:27.790 --> 00:05:31.742
Because there's many routers in these
different resources and have them just be

93
00:05:31.742 --> 00:05:35.303
the same as a lot better to have them
think of what the name is to import it.

94
00:05:37.367 --> 00:05:38.368
&gt;&gt; Scott Moss: So now that we have that,

95
00:05:38.368 --> 00:05:41.220
the next thing we need to do is
actually import that router.

96
00:05:41.220 --> 00:05:43.595
So because it's a default,
I can call it whatever I want.

97
00:05:43.595 --> 00:05:44.847
I'll call it the item router from,

98
00:05:50.143 --> 00:05:55.245
&gt;&gt; Scott Moss: Resources/item/item.router.

99
00:05:55.245 --> 00:05:57.817
So we've got the item router there.

100
00:05:57.817 --> 00:06:05.183
And then I'm going to mount it at
/api/item and now we have the item router.

101
00:06:10.021 --> 00:06:14.427
&gt;&gt; Scott Moss: So if we run our

102
00:06:14.427 --> 00:06:19.515
test,
&gt;&gt; Scott Moss: our

103
00:06:19.515 --> 00:06:24.618
npm run
&gt;&gt; Scott Moss: Test-routes, I believe.

104
00:06:29.707 --> 00:06:31.170
&gt;&gt; Scott Moss: You can see, it passed.

105
00:06:31.170 --> 00:06:34.140
There was only one test for
that, and it passed.

106
00:06:34.140 --> 00:06:36.085
If we just go look at
the test one more time,

107
00:06:36.085 --> 00:06:40.410
you can see it's testing that there
is these combination of routes.

108
00:06:40.410 --> 00:06:43.400
So it's expecting a path of
this with a method of git.

109
00:06:43.400 --> 00:06:46.070
This path with a method of git and
so forth and so forth.

110
00:06:46.070 --> 00:06:48.000
So we satisfied that here.

111
00:06:48.000 --> 00:06:50.430
So here's all the routes with
the different verb methods, and

112
00:06:50.430 --> 00:06:52.370
that's why the test passed.

113
00:06:52.370 --> 00:06:57.028
And now let's actually run it,
we'll execute this.

114
00:07:01.615 --> 00:07:05.501
&gt;&gt; Scott Moss: And
I'm gonna head over to 3000 and

115
00:07:05.501 --> 00:07:10.340
do a slash api slash item and
I'm gonna run that.

116
00:07:10.340 --> 00:07:12.400
And you can see I get a message hello.

117
00:07:12.400 --> 00:07:13.550
So that works good.

118
00:07:13.550 --> 00:07:15.490
So that's a get request.

119
00:07:15.490 --> 00:07:17.210
Then I had another one for slash ID.

120
00:07:17.210 --> 00:07:19.660
So I'll put slash anything here.

121
00:07:19.660 --> 00:07:22.040
That's also a get request, so that's good.

122
00:07:22.040 --> 00:07:28.380
Then there was a post request to just
/item, so I'll run that, that's also good.

123
00:07:28.380 --> 00:07:32.660
And then we had a put request to /item,

124
00:07:32.660 --> 00:07:36.540
with some ID, so we run that as well.

125
00:07:36.540 --> 00:07:40.400
And then, last one was a delete
request to /item with some ID.

126
00:07:40.400 --> 00:07:41.860
And if we run that, that one will.

127
00:07:43.690 --> 00:07:44.510
Anybody do it differently?

128
00:07:44.510 --> 00:07:48.930
Cuz there's a lot of ways,
there's not one right way to do this.

129
00:07:48.930 --> 00:07:50.950
There's a lot of ways which
is why I love Express.

