WEBVTT

1
00:00:00.120 --> 00:00:03.840
&gt;&gt; Scott Moss: So if you head
over to the repo, you cloned it.

2
00:00:03.840 --> 00:00:05.740
Go ahead and open it up.

3
00:00:05.740 --> 00:00:08.560
And you're gonna see a whole
bunch of stuff in here.

4
00:00:08.560 --> 00:00:11.850
So I did a lot of hard work in here for
you all so you don't have to.

5
00:00:11.850 --> 00:00:13.700
Cuz I really want us to
focus on the API and

6
00:00:13.700 --> 00:00:16.720
not focus on setting up and
stuff like that.

7
00:00:16.720 --> 00:00:17.830
That's kinda garbage.

8
00:00:17.830 --> 00:00:20.174
So I did all that for you so
you don't have to worry about it.

9
00:00:20.174 --> 00:00:23.342
But mostly what we're going to be doing
in this course is as we go through these

10
00:00:23.342 --> 00:00:26.708
different concepts, you're going to be
doing an exercise that kind of relates to

11
00:00:26.708 --> 00:00:27.817
what I just talked about.

12
00:00:27.817 --> 00:00:30.930
And progressively you're going
to be building out a full API.

13
00:00:30.930 --> 00:00:33.680
But half of the API is there,
half of it's not.

14
00:00:33.680 --> 00:00:35.300
There's some tests that
you have to get to pass.

15
00:00:35.300 --> 00:00:38.820
So it's going to be your goal to complete
this API, get the test to pass and

16
00:00:38.820 --> 00:00:41.540
ultimately have an API that's actually
working at the end of the course.

17
00:00:41.540 --> 00:00:44.370
And we're gonna be going through
the progression of the topics that I talk

18
00:00:44.370 --> 00:00:45.820
about in the slides.

19
00:00:45.820 --> 00:00:52.240
So right now, what you should have is,
if you check out to the lesson 1 branch.

20
00:00:52.240 --> 00:00:54.310
So if you just do a git checkout.

21
00:00:54.310 --> 00:00:56.420
For me, I have a shortcut like this.

22
00:00:57.780 --> 00:01:00.280
Lesson 1 I'm already checked out to it.

23
00:01:00.280 --> 00:01:01.900
That's where we wanna start with this one.

24
00:01:01.900 --> 00:01:04.660
So definitely do that.

25
00:01:04.660 --> 00:01:10.600
If you read the README, I talk about how
those branches work, but basically, for

26
00:01:10.600 --> 00:01:14.540
every lesson that I teach, there's gonna
be a branch and a solution branch for it.

27
00:01:14.540 --> 00:01:17.140
So you always want to check out to
the one that doesn't have solution on it.

28
00:01:17.140 --> 00:01:21.020
So in this case, check out to lesson one,
which is gonna be the starting point for

29
00:01:21.020 --> 00:01:22.280
this lesson.

30
00:01:22.280 --> 00:01:27.160
And then when we go over the solution,
you can follow along to my solution or

31
00:01:27.160 --> 00:01:28.000
keep your solution.

32
00:01:28.000 --> 00:01:29.350
Or if you didn't get it done or

33
00:01:29.350 --> 00:01:32.310
you just wanna use mine,
you can check out to the solution branch.

34
00:01:32.310 --> 00:01:33.180
It's your call.

35
00:01:33.180 --> 00:01:34.710
But that's where the solution's gonna be.

36
00:01:34.710 --> 00:01:37.470
So for this lesson, just check out
to lesson 1 and we'll get started.

37
00:01:37.470 --> 00:01:40.370
I'll just give you a tour of
kinda what's going on here.

38
00:01:40.370 --> 00:01:41.850
So we have all these files here.

39
00:01:41.850 --> 00:01:44.040
Like I said, we have set up.

40
00:01:44.040 --> 00:01:47.701
Some prettier things to automate,
or formatting of our code,

41
00:01:47.701 --> 00:01:50.267
if you have the plugin
set up on your editor.

42
00:01:50.267 --> 00:01:54.990
And then there's a source folder, and
there's a lot of stuff going on in here.

43
00:01:54.990 --> 00:01:56.850
But what you're going to be doing for
this exercise is,

44
00:01:56.850 --> 00:01:58.888
if you go click on the server.js, file,

45
00:01:58.888 --> 00:02:02.240
you're gonna see some stuff you've
probably never seen before.

46
00:02:02.240 --> 00:02:06.910
There's some express stuff in here,
and some other weird stuff.

47
00:02:06.910 --> 00:02:11.320
You're gonna be working in here,
but let's just continue going.

48
00:02:12.970 --> 00:02:16.660
This project is set up using Babble,
so you'll see some ES6 stuff,

49
00:02:16.660 --> 00:02:20.050
like imports and
the froms and the exports.

50
00:02:20.050 --> 00:02:22.910
That's because we're using Babble
to transpile this, so when you

51
00:02:22.910 --> 00:02:27.480
run the command then I'm going to show
you the package.json to start the server.

52
00:02:27.480 --> 00:02:31.090
It's going to transpile it to a disc, and
then we're gonna execute it from there.

53
00:02:31.090 --> 00:02:34.070
So all these files in the source
folder aren't being executed,

54
00:02:34.070 --> 00:02:38.960
they're being transpiled, and it's gonna
execute it in another dist folder.

55
00:02:38.960 --> 00:02:41.090
And I did that because I just
wanted to use the ES6 though.

56
00:02:41.090 --> 00:02:44.680
I can't write code without it anymore,
so I tried it and

57
00:02:44.680 --> 00:02:47.450
I was like I'm just not gonna do it,
I just can't, I can't go back.

58
00:02:47.450 --> 00:02:50.250
So I'm sorry,
you guys gotta deal with the Babel stuff.

59
00:02:50.250 --> 00:02:55.310
Okay, cool, so what I'm gonna do is I
was gonna just free hand some code here

60
00:02:55.310 --> 00:02:59.410
to get us warmed up in and
a little knowledgeable about express.

61
00:02:59.410 --> 00:03:03.067
Because this first exercise you're
just gonna build a hello world,

62
00:03:03.067 --> 00:03:04.905
welcome to express application.

63
00:03:04.905 --> 00:03:07.680
And that kind of just
does the very minimal.

64
00:03:07.680 --> 00:03:11.470
But first I'm gonna show you some of
the things in express that you can do.

65
00:03:11.470 --> 00:03:14.730
And then later on the course we're gonna
go into detail about every single thing

66
00:03:14.730 --> 00:03:16.110
that I'm showing you here.

67
00:03:16.110 --> 00:03:19.780
So this is just a primer just to
get you to get something going.

68
00:03:19.780 --> 00:03:22.890
Just to see what's happening and
then give you some context and

69
00:03:22.890 --> 00:03:25.280
some questions to ask me later
as we get more detailed.

70
00:03:26.390 --> 00:03:28.170
So if you want to follow along,
feel free, but

71
00:03:28.170 --> 00:03:31.060
I'm gonna let you loose
to continue this as well.

72
00:03:32.530 --> 00:03:36.355
So if we look at the README,
we'll see that in lesson one,

73
00:03:36.355 --> 00:03:39.409
you've got a couple
things you gotta do here.

74
00:03:39.409 --> 00:03:43.360
First thing is,
install dependencies with yarn.

75
00:03:43.360 --> 00:03:46.750
I prefer to do it with yarn because I
lock the versions with the yarn lock.

76
00:03:46.750 --> 00:03:50.350
So that guarantees you'll always have the
right versions, because we've had problems

77
00:03:50.350 --> 00:03:53.540
in the past with the course where
the dependencies would get updated,

78
00:03:53.540 --> 00:03:55.670
and then the repo would get broken.

79
00:03:55.670 --> 00:03:59.170
So if you use yarn,
you'll have the locked versions.

80
00:03:59.170 --> 00:04:00.570
NPM does locking as well, but

81
00:04:00.570 --> 00:04:03.140
I didn't set up the locking file
with NPM cuz I don't like NPM.

82
00:04:04.154 --> 00:04:08.480
[LAUGH] So yeah I prefer to use yarn,
but you can also use npm.

83
00:04:08.480 --> 00:04:09.970
So install the dependencies.

84
00:04:09.970 --> 00:04:12.710
The second thing you're gonna do is you're
gonna create a route that sends back

85
00:04:12.710 --> 00:04:13.390
some json.

86
00:04:13.390 --> 00:04:14.920
You have no idea how to do that.

87
00:04:14.920 --> 00:04:18.250
So I'm gonna show you how to do that.

88
00:04:18.250 --> 00:04:20.910
And then the third thing from there is
you're gonna create a route that accepts

89
00:04:20.910 --> 00:04:22.290
json and just logs it.

90
00:04:22.290 --> 00:04:24.720
And then just sends back a response.

91
00:04:24.720 --> 00:04:27.230
And then the last thing is you're
going to start the server.

92
00:04:27.230 --> 00:04:29.440
That's what you're going to do for
this exercise for Hello World.

93
00:04:30.930 --> 00:04:33.170
So now I'm going to show you
how to do some of those things.

94
00:04:33.170 --> 00:04:36.430
And again, this is just an overview of
how to get started with Express, and

95
00:04:36.430 --> 00:04:39.780
we're going to go into more detail about
these things throughout the next lessons.

96
00:04:40.970 --> 00:04:44.328
I promise we're going to cover this
stuff right here, like this app.use and

97
00:04:44.328 --> 00:04:45.390
stuff like that.

98
00:04:45.390 --> 00:04:46.784
Don't worry about that right now.

99
00:04:46.784 --> 00:04:50.340
We're gonna cover it, it's just
here to get you to ask questions.

100
00:04:50.340 --> 00:04:52.901
But the first thing that we had to
do was install the appendices, so

101
00:04:52.901 --> 00:04:55.307
if you haven't done that already,
just go ahead and do that.

102
00:04:55.307 --> 00:04:57.350
You can just run Yarn or NPM Install.

103
00:04:57.350 --> 00:05:00.790
I already had mine installed so
I'm just gonna continue.

104
00:05:00.790 --> 00:05:05.360
The next thing we're supposed to do
is create a route that accepts json.

105
00:05:05.360 --> 00:05:08.110
So there's so
many ways you can do that, but

106
00:05:08.110 --> 00:05:13.500
I just want you to get familiar with
using some of the route matchers and

107
00:05:13.500 --> 00:05:17.310
verb combinations with express
without going into too much detail.

108
00:05:17.310 --> 00:05:24.030
So in this case, I'm gonna use this app
object here that's created from express.

109
00:05:24.030 --> 00:05:26.270
That's right here, app is express.

110
00:05:26.270 --> 00:05:30.394
And if you have VS code or anything like
that you might see some auto complete

111
00:05:30.394 --> 00:05:34.859
here, but I wanna be able to get some
json, so I'm just gonna use this app.get.

112
00:05:34.859 --> 00:05:39.210
And get is short for the verb get.

113
00:05:39.210 --> 00:05:42.450
In HTTP you can do a get request,
or if you type in your browser and

114
00:05:42.450 --> 00:05:45.060
you go to Google.com and
you hit Enter, that's a get request.

115
00:05:45.060 --> 00:05:48.930
So this is what we're allowing our
server to register for, a get request.

116
00:05:48.930 --> 00:05:53.580
So I just wanna do a get request to this
route, which is basically the index.

117
00:05:53.580 --> 00:05:56.430
So I'm gonna say when
a get request comes in for

118
00:05:56.430 --> 00:06:00.470
this route I want you to do something.

119
00:06:00.470 --> 00:06:02.670
So I'm just gonna register
a callback function here.

120
00:06:02.670 --> 00:06:05.080
This is the function that I want to
run when a GET request comes in.

121
00:06:07.820 --> 00:06:09.170
This function is called a controller.

122
00:06:09.170 --> 00:06:11.040
We'll talk more about that later.

123
00:06:11.040 --> 00:06:12.730
And it always receives three arguments.

124
00:06:12.730 --> 00:06:13.390
A request.

125
00:06:15.330 --> 00:06:17.870
And a response, and
then a next function, but

126
00:06:17.870 --> 00:06:18.990
we're not gonna use that next function.

127
00:06:18.990 --> 00:06:20.410
So we gotta request and response.

128
00:06:21.820 --> 00:06:24.900
In Express we always use
a short head in req and res.

129
00:06:24.900 --> 00:06:28.580
So req for request, res for response.

130
00:06:28.580 --> 00:06:34.110
And then we're supposed to send
back some data, some JSON.

131
00:06:34.110 --> 00:06:37.430
So I'm just gonna say, response,
cuz I wanna send something back so

132
00:06:37.430 --> 00:06:39.010
I'll use the response.

133
00:06:39.010 --> 00:06:44.492
I was gonna say .send and I'm just gonna
send back some data like hello, boom.

134
00:06:49.249 --> 00:06:52.098
&gt;&gt; Scott Moss: And then the next one is
we're supposed to receive some data and

135
00:06:52.098 --> 00:06:53.430
then just log it.

136
00:06:53.430 --> 00:06:56.470
So what I'm doing here,
is I'm going to do the opposite of a get

137
00:06:56.470 --> 00:06:58.350
where I want to send
some data to a server.

138
00:06:58.350 --> 00:07:00.210
There's a lot of ways to do that but

139
00:07:00.210 --> 00:07:03.100
most of the time when you want to
create something as far as CRUD goes,

140
00:07:03.100 --> 00:07:08.550
you use a post request so I'm going to say
app.post to the same URL because remember,

141
00:07:08.550 --> 00:07:12.160
the URL is going to be the same if the
verbs are different because the matchers

142
00:07:12.160 --> 00:07:16.720
are on a route verb combination,
and not just a route by itself.

143
00:07:16.720 --> 00:07:19.170
Right, if it was just routes by itself,
then verbs wouldn't matter.

144
00:07:19.170 --> 00:07:21.360
So although this is the same
route as the one above it,

145
00:07:21.360 --> 00:07:24.320
it's a combination of the route and the
verb, and because the verb it different,

146
00:07:24.320 --> 00:07:27.370
it's post and not get,
this will match a different route.

147
00:07:27.370 --> 00:07:30.660
So I wanna be able to do a post,
so I'll say request response.

148
00:07:33.210 --> 00:07:38.106
And in this case,
you can just be guaranteed that the data's

149
00:07:38.106 --> 00:07:40.894
going to be on the request.body.

150
00:07:40.894 --> 00:07:42.070
So I'm just going to log that.

151
00:07:43.760 --> 00:07:47.497
And we'll talk about that later.

152
00:07:47.497 --> 00:07:49.250
So I'm just going to log request.body.

153
00:07:49.250 --> 00:07:53.790
And I'm just gonna just send
back a message that says OK.

154
00:07:56.290 --> 00:07:56.790
And that's it.

155
00:07:59.210 --> 00:08:02.580
So now we have our request
that sends to json.

156
00:08:02.580 --> 00:08:04.840
We have our request that locks iming JSON.

157
00:08:04.840 --> 00:08:07.280
And the last thing we need
to do was start the server.

158
00:08:08.550 --> 00:08:10.610
So we have this function
down here called start.

159
00:08:10.610 --> 00:08:12.710
So inside of this function we can
go ahead and start the server,

160
00:08:12.710 --> 00:08:14.650
which is pretty simple.

161
00:08:14.650 --> 00:08:17.810
We can just do app.listen and
then pass in a port.

162
00:08:18.990 --> 00:08:20.296
So I'm just gonna put it on port 3000.

163
00:08:25.123 --> 00:08:31.435
&gt;&gt; Scott Moss: And just log a message
when that happens, server is on 3000.

164
00:08:31.435 --> 00:08:35.296
So if you don't know anything about
ports and how that stuff works,

165
00:08:35.296 --> 00:08:39.022
basically this is going to connect
to local host on your machine on

166
00:08:39.022 --> 00:08:43.040
the port that you pass in and that
port needs to be open on your machine.

167
00:08:43.040 --> 00:08:47.000
If it's occupied by some other program or
service that's running in the background,

168
00:08:47.000 --> 00:08:48.550
you'll get an error saying
it couldn't connect.

169
00:08:48.550 --> 00:08:50.355
So just pass in a different port.

170
00:08:50.355 --> 00:08:53.576
3,000's a very common one so
if you get that error that's why.

171
00:08:53.576 --> 00:08:57.452
It will literally say, could not
connect you get an error connect or

172
00:08:57.452 --> 00:08:59.680
something like that.

173
00:08:59.680 --> 00:09:03.550
Cool and the index ijs which
is already there for you.

174
00:09:03.550 --> 00:09:04.730
There's like a start function.

175
00:09:04.730 --> 00:09:07.420
It's going to actually start our server.

176
00:09:07.420 --> 00:09:10.740
So only thing you have to do from there so
you can check out the package that JSON

177
00:09:10.740 --> 00:09:15.760
is there's a lot of different files and
folders and stuff in here.

178
00:09:15.760 --> 00:09:18.600
There's a task called start.

179
00:09:18.600 --> 00:09:20.400
So if you run yarn, I'm sorry.

180
00:09:20.400 --> 00:09:21.164
You actually wanna use dev.

181
00:09:21.164 --> 00:09:22.550
So you wanna use the dev one.

182
00:09:22.550 --> 00:09:27.076
So if you run yarn dev, or if you're
using npm you could do npm run dev.

183
00:09:27.076 --> 00:09:30.224
What's that's gonna do,
it's going to build the project.

184
00:09:30.224 --> 00:09:34.808
Then after it's built it's going to
start the server from the index file,

185
00:09:34.808 --> 00:09:39.684
which is index.js, which should then call
the start function in the server and

186
00:09:39.684 --> 00:09:41.242
then start your server.

187
00:09:41.242 --> 00:09:44.470
And then from there we should be
able to interact with our API.

188
00:09:44.470 --> 00:09:45.480
So let's try that.

189
00:09:47.722 --> 00:09:50.560
&gt;&gt; Scott Moss: So I'm gonna say yarn dev.

190
00:09:52.350 --> 00:09:52.927
It's building.

191
00:09:55.144 --> 00:09:57.510
&gt;&gt; Scott Moss: And
you can see right here, here's my log.

192
00:09:57.510 --> 00:09:59.058
sever is on 3000.

193
00:09:59.058 --> 00:10:02.269
So that's the log that I log
after I started the server so

194
00:10:02.269 --> 00:10:04.740
that tells me that it executed correctly.

195
00:10:04.740 --> 00:10:05.780
I didn't get any errors.

196
00:10:05.780 --> 00:10:08.220
If something bad were to happen
this wouldn't have happened,

197
00:10:08.220 --> 00:10:09.140
we would have gotten an error here.

