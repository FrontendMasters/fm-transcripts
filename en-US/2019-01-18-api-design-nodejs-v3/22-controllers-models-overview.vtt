WEBVTT

1
00:00:00.290 --> 00:00:02.780
&gt;&gt; Scott Moss: The next lesson, which
is basically gonna be controllers and

2
00:00:02.780 --> 00:00:03.750
working with the models.

3
00:00:03.750 --> 00:00:09.110
So we created schemas that created
models and we have routes.

4
00:00:09.110 --> 00:00:14.661
So we're really only missing one thing as
far as having a API that does something,

5
00:00:14.661 --> 00:00:16.677
is we need some controllers.

6
00:00:16.677 --> 00:00:18.820
So that's what we're
gonna be working on next.

7
00:00:18.820 --> 00:00:20.579
So routes and controllers.

8
00:00:22.250 --> 00:00:24.960
Basically controllers, like I said before,
are just middleware but

9
00:00:24.960 --> 00:00:26.760
with the intent of returning some data.

10
00:00:26.760 --> 00:00:28.860
That is the only difference
in the context of Express.

11
00:00:28.860 --> 00:00:31.046
They're the exact same
thing as middleware, and

12
00:00:31.046 --> 00:00:34.080
middleware and controllers are literally
the same thing, it's just the intent.

13
00:00:34.080 --> 00:00:37.572
So controllers are meant to
return some data from somewhere.

14
00:00:37.572 --> 00:00:40.384
And in our case, it's gonna be from
our database using our models.

15
00:00:40.384 --> 00:00:42.700
But they could return
data from somewhere else.

16
00:00:42.700 --> 00:00:44.862
If you have a microservice architecture,

17
00:00:44.862 --> 00:00:47.684
your controllers might talk
to another microservice,

18
00:00:47.684 --> 00:00:51.235
or they might talk to some third
party library or Stripe or whereever.

19
00:00:51.235 --> 00:00:53.375
They're gonna be returning
data from some resource.

20
00:00:53.375 --> 00:00:56.479
And if they're not,
then why are they on your API?

21
00:00:56.479 --> 00:00:57.700
What are they doing?

22
00:00:57.700 --> 00:01:00.075
So most likely it's gonna
be returning some data,

23
00:01:00.075 --> 00:01:01.688
some information from a request.

24
00:01:03.753 --> 00:01:07.766
&gt;&gt; Scott Moss: So controllers handle
what a Route + Verb combo can

25
00:01:07.766 --> 00:01:10.576
access from the database, right?

26
00:01:10.576 --> 00:01:14.401
So we wrote some hello world ones,
we did some generic ones.

27
00:01:14.401 --> 00:01:16.402
You messed around with this
thing called response.

28
00:01:16.402 --> 00:01:20.766
You don't really kinda understand how that
works, but that's how all the stuff in

29
00:01:20.766 --> 00:01:24.458
the controller goes together to
respond to what a Route + Verb combo.

30
00:01:24.458 --> 00:01:28.220
So slash user, GET request,
we write a controller for that.

31
00:01:28.220 --> 00:01:32.090
Slash item, PUT request,
we write a controller for that.

32
00:01:32.090 --> 00:01:35.928
So each one of those combinations has
its own controller that does a job.

33
00:01:41.252 --> 00:01:42.047
&gt;&gt; Scott Moss: So like I said,

34
00:01:42.047 --> 00:01:45.357
think of them as the final middleware
in the stack for a request.

35
00:01:45.357 --> 00:01:49.660
There is no intent to proceed to another
middleware function after a controller.

36
00:01:49.660 --> 00:01:52.486
Once you get to a controller,
your intent is, I'm done.

37
00:01:52.486 --> 00:01:55.760
I'm not gonna call next here,
cuz this is the final middleware.

38
00:01:55.760 --> 00:01:59.354
The only time I could ever see myself
calling next inside of a controller is,

39
00:01:59.354 --> 00:02:02.891
again, it's the same case in the
middleware, is if you have error handler

40
00:02:02.891 --> 00:02:06.225
somewhere at the end of your routing
that's gonna handle all errors.

41
00:02:06.225 --> 00:02:08.647
So if you have an error in your
controller, you call next, and

42
00:02:08.647 --> 00:02:11.290
you pass an error, and
you delegate to that error handler.

43
00:02:11.290 --> 00:02:13.930
Other than that, you will never
call next inside of a controller,

44
00:02:13.930 --> 00:02:15.890
because then it's just middleware.

45
00:02:15.890 --> 00:02:19.280
So, yeah, just remember,
it's just gonna be finalized there.

