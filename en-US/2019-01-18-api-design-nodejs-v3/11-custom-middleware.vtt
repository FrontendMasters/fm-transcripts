WEBVTT

1
00:00:00.330 --> 00:00:03.556
&gt;&gt; Scott Moss: So, what we're gonna do,
is we're just gonna create some middleware

2
00:00:03.556 --> 00:00:07.070
here though and see just how familiar it
is to what we've already done so far.

3
00:00:07.070 --> 00:00:09.360
So far,
we've created these small routes and

4
00:00:09.360 --> 00:00:12.640
we have these call back functions
here what I've called controllers

5
00:00:12.640 --> 00:00:16.230
because they're basically the last
function that needs to run on this route.

6
00:00:16.230 --> 00:00:17.890
Now, we're just gonna
create some middleware.

7
00:00:17.890 --> 00:00:23.070
And to do that, it's the exact
same syntax as the controllers.

8
00:00:23.070 --> 00:00:27.830
There just functions that take
a request and a response.

9
00:00:27.830 --> 00:00:29.080
And then they run some action.

10
00:00:29.080 --> 00:00:33.409
So I'm just gonna make
a middleware here and

11
00:00:33.409 --> 00:00:37.750
I'm gonna call it myLog or
just call it log.

12
00:00:37.750 --> 00:00:39.300
So it's gonna take a request.

13
00:00:39.300 --> 00:00:42.300
It's gonna take a response and

14
00:00:42.300 --> 00:00:47.420
is just going to log, logging.

15
00:00:48.520 --> 00:00:53.211
So, down here these controllers we
have the ability to do rest.send,

16
00:00:53.211 --> 00:00:55.180
rest.send, that's what we have been doing.

17
00:00:55.180 --> 00:00:59.950
That's gonna end a request and that's
gonna send back a response to the client.

18
00:00:59.950 --> 00:01:04.170
Well like I said the middleware, the
intent is to not do that, although we can.

19
00:01:04.170 --> 00:01:07.450
I don't wanna end the request and
send back a response to the client,

20
00:01:07.450 --> 00:01:09.670
I wanna continue moving forward.

21
00:01:09.670 --> 00:01:12.882
So that's where that third argument
comes in that we haven't used.

22
00:01:12.882 --> 00:01:15.430
We just call it next.

23
00:01:15.430 --> 00:01:18.970
But it's basically just
a function that when called,

24
00:01:18.970 --> 00:01:22.830
executes the next middleware that's
after it, that's all it's gonna do.

25
00:01:22.830 --> 00:01:26.120
So this is where Express ties
the middleware together.

26
00:01:26.120 --> 00:01:27.620
So by calling the next function,

27
00:01:27.620 --> 00:01:32.450
I'm basically saying, okay,
I'm done here, go to the next one.

28
00:01:32.450 --> 00:01:35.180
Whoever's next, because this log
function doesn't know who's next,

29
00:01:35.180 --> 00:01:37.050
doesn't know who's registered after it.

30
00:01:37.050 --> 00:01:40.250
But whatever is next in
the stack Run that function and

31
00:01:40.250 --> 00:01:41.900
that can be another middleware.

32
00:01:41.900 --> 00:01:43.440
It could also be a controller.

33
00:01:43.440 --> 00:01:44.380
It could be anything.

34
00:01:44.380 --> 00:01:46.540
But it doesn't really
matter cuz it doesn't know.

35
00:01:46.540 --> 00:01:49.870
So I'm just gonna call next like this.

36
00:01:50.970 --> 00:01:54.260
If you call next with an argument, the
argument is gonna be treated like an error

37
00:01:54.260 --> 00:01:57.710
and we'll talk about that when
we get to error handling.

38
00:01:57.710 --> 00:01:59.650
Normally, just call it
next with no arguments.

39
00:01:59.650 --> 00:02:02.880
And unless you have an error
that you wanna pass along and

40
00:02:02.880 --> 00:02:05.190
don't wanna handle in this middleware.

41
00:02:05.190 --> 00:02:07.500
So for instance,
this was an authentication middleware.

42
00:02:08.720 --> 00:02:12.700
And there's an authentication error,
you could just, in the request right here,

43
00:02:12.700 --> 00:02:16.200
what the rest.send or
rest.status whatever you wanna do.

44
00:02:16.200 --> 00:02:18.820
Or you could pass that
error along with next.

45
00:02:18.820 --> 00:02:22.791
And then later on in your application have
an error handler kinda like catches it and

46
00:02:22.791 --> 00:02:23.820
deals with it there.

47
00:02:25.050 --> 00:02:26.130
So it's up to you.

48
00:02:26.130 --> 00:02:28.184
But for now,
we're just not gonna pass anything.

49
00:02:28.184 --> 00:02:32.840
And then, all we gotta do is just
add the log to our route definition.

50
00:02:32.840 --> 00:02:35.200
So you can see, I just squeeze
it in here after this route.

51
00:02:36.990 --> 00:02:41.560
And that just is basically letting
me run this middleware function,

52
00:02:41.560 --> 00:02:42.569
before this controller runs.

53
00:02:44.040 --> 00:02:45.970
That's one way I could do it.

54
00:02:45.970 --> 00:02:50.762
The benefits of doing it this way is
that it's only gonna run for this route.

55
00:02:50.762 --> 00:02:55.748
If I wanted this log functions to run for
the entire server,

56
00:02:55.748 --> 00:02:58.750
I could use an app dot use log.

57
00:02:58.750 --> 00:02:59.820
Now it's gonna run for everything.

58
00:03:01.710 --> 00:03:02.890
Very similar to what we have up here.

59
00:03:08.550 --> 00:03:13.870
Another way I could do it is I could say
I want to pass an array of middleware.

60
00:03:13.870 --> 00:03:17.690
There's if I had log here like three times
or other middleware, I could do that as

61
00:03:17.690 --> 00:03:21.880
well and that's gonna run all of these in
order before it executes the controller.

62
00:03:21.880 --> 00:03:25.000
So there's like a lot of ways you
can actually register middleware and

63
00:03:25.000 --> 00:03:26.800
execute it those are just three.

64
00:03:26.800 --> 00:03:29.740
There's other ways you can mount it them
at different paths you can mount them at

65
00:03:29.740 --> 00:03:32.260
different sub-routers when we
get to sub-routers there's

66
00:03:32.260 --> 00:03:34.120
a lot different configurations
with middleware.

67
00:03:34.120 --> 00:03:37.370
But at the end of the day a middleware
function is basically the same thing as

68
00:03:37.370 --> 00:03:41.160
a controller function they have the exact
same syntax the exact same capabilities.

69
00:03:41.160 --> 00:03:43.350
The only difference is
that they are intent.

70
00:03:43.350 --> 00:03:47.350
The middleware is intent is
to not respond is to mutate,

71
00:03:48.540 --> 00:03:52.270
whatever and pass on in
a controllers intent is to respond.

72
00:03:52.270 --> 00:03:53.610
That's it.
But they can both do either.

73
00:03:54.870 --> 00:03:58.260
But at the end of the day if you don't
respond user services are gonna hang,

74
00:03:58.260 --> 00:03:58.950
this is gonna hang.

75
00:03:58.950 --> 00:04:02.200
Your request is gonna hang
forever until it times out.

76
00:04:02.200 --> 00:04:03.480
So, you have to respond eventually.

77
00:04:05.610 --> 00:04:09.980
&gt;&gt; Speaker 2: Is this
like a chain where you

78
00:04:09.980 --> 00:04:12.810
are processing the incoming requests and

79
00:04:12.810 --> 00:04:17.500
then you can process the response from-
&gt;&gt; Scott Moss: Yeah, that's exactly right.

80
00:04:17.500 --> 00:04:20.479
So let me run this, so you can see.

81
00:04:21.860 --> 00:04:24.640
I'll just put one log here and
then we'll start the server.

82
00:04:25.670 --> 00:04:27.600
Looks like it already restarted.

83
00:04:27.600 --> 00:04:29.070
I'll go over to Insomnia.

84
00:04:29.070 --> 00:04:30.990
Which request did I put that on, get?

85
00:04:30.990 --> 00:04:34.360
Okay, so for
the get one we'll just run it.

86
00:04:34.360 --> 00:04:37.010
Go over to the logs you
can see it says logging.

87
00:04:37.010 --> 00:04:39.360
So this one logs first.

88
00:04:39.360 --> 00:04:44.110
All right, if I put that array back and
add it a few more times.

89
00:04:44.110 --> 00:04:45.270
We should see it three times now.

90
00:04:49.440 --> 00:04:52.880
Run this and
you see I got log in three times.

91
00:04:52.880 --> 00:04:54.010
Right so it is changed.

92
00:04:54.010 --> 00:04:56.380
It's doing that in sequential order.

93
00:04:56.380 --> 00:04:57.170
But it's not parallel.

94
00:04:57.170 --> 00:04:58.610
It's not running them
all at the same time.

95
00:04:58.610 --> 00:05:00.070
In sequential order.

96
00:05:00.070 --> 00:05:01.260
And it's just gonna keep going.

97
00:05:01.260 --> 00:05:02.600
They could also be asynchronous.

98
00:05:02.600 --> 00:05:05.670
There's nothing stopping you from doing
anything async in here if you want to.

99
00:05:05.670 --> 00:05:08.930
It's just, whenever you call next that's
when it's gonna go to the next one, or

100
00:05:08.930 --> 00:05:11.990
if it errors out, or if you respond,
whichever one comes first.

101
00:05:11.990 --> 00:05:12.690
That's what it's gonna do.

102
00:05:14.280 --> 00:05:16.460
&gt;&gt; Speaker 2: So
they won't run in sequence?

103
00:05:16.460 --> 00:05:18.760
&gt;&gt; Scott Moss: No, they run in sequence,
but not in parallel.

104
00:05:18.760 --> 00:05:20.840
Right, so the won't run at the same time.

105
00:05:20.840 --> 00:05:22.594
They'll run sequentially.

106
00:05:22.594 --> 00:05:23.094
Yeah.

107
00:05:25.114 --> 00:05:28.750
&gt;&gt; Scott Moss: So even if these were async
they still will not run at the same time.

108
00:05:28.750 --> 00:05:30.400
They would wait to go to the next one.

109
00:05:30.400 --> 00:05:34.480
It literally does not move on
unless it either called next,

110
00:05:34.480 --> 00:05:40.000
there's an error that was not handled or
thrown or you respond explicitly.

111
00:05:40.000 --> 00:05:41.990
That's the only way it's gonna progress.

112
00:05:41.990 --> 00:05:45.540
&gt;&gt; Speaker 2: So if you threw
an error before you called next

113
00:05:45.540 --> 00:05:47.840
then your application blows up?

114
00:05:47.840 --> 00:05:51.460
&gt;&gt; Scott Moss: Yep, right,
in this example yes it will.

115
00:05:51.460 --> 00:05:52.940
So let's try it out.

116
00:05:52.940 --> 00:05:53.667
So if I throw and error here.

117
00:05:56.697 --> 00:05:58.490
&gt;&gt; Scott Moss: And I do this boom.

118
00:05:59.940 --> 00:06:02.340
It [LAUGH] definitely blew up yeah.

119
00:06:02.340 --> 00:06:04.430
So it will definitely blow up here.

120
00:06:04.430 --> 00:06:07.660
But if I were to pass this error over to

121
00:06:09.290 --> 00:06:13.960
next like this, and
I'm not handling the error anywhere,

122
00:06:13.960 --> 00:06:18.140
then you might still get some
unexpected side effects.

123
00:06:18.140 --> 00:06:19.810
Yeah, I still get the error here.

124
00:06:19.810 --> 00:06:23.380
The only difference is instead
of the error blowing up here,

125
00:06:23.380 --> 00:06:28.090
it blew up inside of express so
whenever it's, I do have an error and

126
00:06:28.090 --> 00:06:30.930
expressed through it but
I didn't handle it somewhere else.

127
00:06:30.930 --> 00:06:33.280
When you pass an error to next
you're basically telling express,

128
00:06:33.280 --> 00:06:35.370
I'm gonna handle this
later somewhere else.

129
00:06:35.370 --> 00:06:37.900
It's like you're gonna have
like a catch all error here and

130
00:06:37.900 --> 00:06:41.760
went somewhere else, but in this example
we don't so it kinda just died anyway.

131
00:06:44.930 --> 00:06:46.660
Any other questions?

132
00:06:46.660 --> 00:06:53.050
&gt;&gt; Speaker 2: So there'd be no way
to pass the error to your route?

133
00:06:54.380 --> 00:06:55.959
&gt;&gt; Scott Moss: Pass an error,
give me an example.

134
00:06:55.959 --> 00:06:59.804
&gt;&gt; Speaker 2: Like if your
middleware had an error and

135
00:06:59.804 --> 00:07:05.760
you wanted your route
app.get/data to handle it.

136
00:07:05.760 --> 00:07:07.955
I know, I'm just thinking out loud kinda.

137
00:07:07.955 --> 00:07:10.849
&gt;&gt; Scott Moss: Yeah, so, sounds like we're
describing it you want the app.get to be

138
00:07:10.849 --> 00:07:12.740
able to handle something
about the software.

139
00:07:12.740 --> 00:07:14.510
So if you did want to do that, so

140
00:07:14.510 --> 00:07:17.720
basically how do you
communicate between middleware?

141
00:07:17.720 --> 00:07:20.900
How do you have one middleware communicate
to some other middleware, right?

142
00:07:20.900 --> 00:07:22.317
So if you're going to
pass some data along.

143
00:07:22.317 --> 00:07:23.430
&gt;&gt; Speaker 2: If it's even a good idea,
I don't know.

144
00:07:23.430 --> 00:07:24.110
&gt;&gt; Scott Moss: It is a good idea.

145
00:07:24.110 --> 00:07:27.540
I would say in that case, as far as like
letting a controller handle an error,

146
00:07:27.540 --> 00:07:30.160
probably not a good idea,
you normally just, and we'll get to it,

147
00:07:30.160 --> 00:07:34.030
you normally register an error handler
controller at the end of everything that

148
00:07:34.030 --> 00:07:37.350
handles all errors and
let the controllers just do there job.

149
00:07:37.350 --> 00:07:41.000
But if you did wanna just pass data along
to some other middleware controller,

150
00:07:41.000 --> 00:07:44.260
which is a good idea and which we will be
doing, then from there normally what you

151
00:07:44.260 --> 00:07:46.330
would do is you just attach
it to the request object.

152
00:07:46.330 --> 00:07:53.960
So I can just say req.mydata =
'hello,' and then I'll call next.

153
00:07:53.960 --> 00:07:56.222
And then down here below
I'll just send that back.

154
00:08:02.885 --> 00:08:07.030
&gt;&gt; Scott Moss: I'm gonna say req.myData.

155
00:08:07.030 --> 00:08:10.020
And then now if I run this,
you see I get data hello.

156
00:08:10.020 --> 00:08:14.626
Pretty simple, but it's really powerful.

157
00:08:14.626 --> 00:08:18.670
It's life-changing, really amazing.

158
00:08:18.670 --> 00:08:20.170
A super flexible way to write code.

