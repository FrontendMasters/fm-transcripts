WEBVTT

1
00:00:00.260 --> 00:00:01.551
&gt;&gt; Scott Moss: So those are those tests.

2
00:00:01.551 --> 00:00:05.190
And now we actually gotta hook
the controller up to the controllers,

3
00:00:05.190 --> 00:00:09.670
the item's controller, which is all these
other tests are failing because of it.

4
00:00:09.670 --> 00:00:13.346
So if we go over to item controllers,
we see it's just exporting a default

5
00:00:13.346 --> 00:00:17.820
object here, which is breaking, like, our
route, and breaking all this other stuff.

6
00:00:17.820 --> 00:00:22.940
Well to get this to work, we can just
look at what list control is doing then.

7
00:00:22.940 --> 00:00:25.948
It's importing that crudControllers
function at the bottom here that you

8
00:00:25.948 --> 00:00:26.910
didn't have to touch.

9
00:00:26.910 --> 00:00:29.061
Because these are actually
creating the crud controllers.

10
00:00:29.061 --> 00:00:33.853
Given a model, it returns an object that
references those functions that we created

11
00:00:33.853 --> 00:00:36.050
above, and passes in the models.

12
00:00:36.050 --> 00:00:36.969
So that's how we get the models there.

13
00:00:36.969 --> 00:00:39.020
Cuz we're passing it in when we
create our crud controllers.

14
00:00:39.020 --> 00:00:41.929
So I just gotta use this as an export.

15
00:00:41.929 --> 00:00:44.050
So list controller's pretty
much already doing it.

16
00:00:44.050 --> 00:00:46.702
You can see
the import.crudControllers function.

17
00:00:46.702 --> 00:00:47.795
It imports the list model.

18
00:00:47.795 --> 00:00:51.486
And then by default it just exports the
crud controllers and passes in the list.

19
00:00:51.486 --> 00:00:54.410
Which again,
exports that object right there.

20
00:00:54.410 --> 00:00:57.130
With removeOne, updateOne,
getMany, getOne,

21
00:00:57.130 --> 00:00:59.541
which is exactly ready to be used for
routes.

22
00:00:59.541 --> 00:01:01.100
So we're gonna do the same thing.

23
00:01:01.100 --> 00:01:05.650
In fact, we can just copy it and
go over to Item Controllers,

24
00:01:05.650 --> 00:01:08.700
paste it, and then change List to Item.

25
00:01:11.581 --> 00:01:13.095
&gt;&gt; Scott Moss: And that's it.

26
00:01:15.576 --> 00:01:21.170
&gt;&gt; Speaker 2: Crud should now work for
any of those three types of models, right?

27
00:01:21.170 --> 00:01:22.036
&gt;&gt; Scott Moss: There you go, that's right.

28
00:01:22.036 --> 00:01:24.334
They're generic controllers,
and they work for anything.

29
00:01:24.334 --> 00:01:26.448
You just pass in the models, it'll work.

30
00:01:26.448 --> 00:01:27.760
And that's why we made them that way.

31
00:01:27.760 --> 00:01:31.319
We could have just made each one for
every single model ourselves, but

32
00:01:31.319 --> 00:01:33.748
they all would've end up
being the same thing.

33
00:01:33.748 --> 00:01:37.603
The other beauty of this is that,
like, for instance, like I said,

34
00:01:37.603 --> 00:01:38.870
REST is very blurred.

35
00:01:38.870 --> 00:01:41.702
So now if you've got to
deviate from the path, for

36
00:01:41.702 --> 00:01:45.285
like, whoa, normally we do a generic REST,
getOne for item.

37
00:01:45.285 --> 00:01:49.558
But for this scenario we wanna do
something a little different for getOne.

38
00:01:49.558 --> 00:01:51.060
You can overwrite it, right?

39
00:01:51.060 --> 00:01:53.943
So you can just come in here and
say, all right, yeah,

40
00:01:53.943 --> 00:01:55.966
we've got credControllers, cool.

41
00:01:55.966 --> 00:01:58.350
I'll just go ahead and spread those.

42
00:01:58.350 --> 00:02:01.436
But I wanna overwrite what getOne is,
but getOne is now gonna do this.

43
00:02:01.436 --> 00:02:04.210
And now you can overwrite it to be
something completely different.

44
00:02:04.210 --> 00:02:05.831
So this allows you to do that.

45
00:02:05.831 --> 00:02:09.530
So you can opt,
you get all the defaults REST controllers.

46
00:02:09.530 --> 00:02:12.912
But if you've gotta overwrite them to do
something specifically for this model,

47
00:02:12.912 --> 00:02:14.350
you can do it like this.

48
00:02:14.350 --> 00:02:17.301
&gt;&gt; Speaker 2: Like you wouldn't want
a user to be able to delete themselves?

49
00:02:17.301 --> 00:02:19.790
&gt;&gt; Scott Moss: Like if you don't want
a user to delete themselves, exactly.

50
00:02:19.790 --> 00:02:22.392
Anything that's like outside of
the range of what REST does.

51
00:02:22.392 --> 00:02:25.590
Then yeah, you would have to overwrite
it with something like this.

52
00:02:25.590 --> 00:02:26.284
Yep, that's a good example.

53
00:02:33.690 --> 00:02:36.269
&gt;&gt; Scott Moss: All right,
so now if we run some tests

54
00:02:36.269 --> 00:02:41.106
here,
&gt;&gt; Scott Moss: Cool,

55
00:02:41.106 --> 00:02:42.007
now all the tests pass.

56
00:02:46.030 --> 00:02:47.756
&gt;&gt; Scott Moss: Good to go, okay.

57
00:02:47.756 --> 00:02:52.632
&gt;&gt; Speaker 2: In your solutions you've
got Try-Catches around everything,

58
00:02:52.632 --> 00:02:55.696
is that-
&gt;&gt; Scott Moss: Yeah, that's just a more.

59
00:02:55.696 --> 00:02:58.460
Well, I mean we're gonna get
into error handling next.

60
00:02:58.460 --> 00:03:02.666
But yeah,
that's just better error handling.

61
00:03:02.666 --> 00:03:07.543
Yeah, you wanna put Try-Catches around
stuff to make sure things don't break

62
00:03:07.543 --> 00:03:09.157
in a server environment.

63
00:03:09.157 --> 00:03:12.455
Cuz if your server breaks
from an error being thrown,

64
00:03:12.455 --> 00:03:15.782
then your server's gonna break,
it's gonna stop.

65
00:03:15.782 --> 00:03:18.818
All right, if you don't have some
process manager managing your server,

66
00:03:18.818 --> 00:03:20.034
then it won't even restart.

67
00:03:20.034 --> 00:03:22.220
So you have to restart it manually.

68
00:03:22.220 --> 00:03:23.520
So try catch prevents that from happening.

69
00:03:23.520 --> 00:03:26.911
So that's just a more
battle-tested way of writing code.

70
00:03:26.911 --> 00:03:30.480
But the test wasn't looking for it,
so I didn't do it the demonstration.

71
00:03:30.480 --> 00:03:32.545
&gt;&gt; Speaker 2: And can that be moved into,
so that's in each of the methods.

72
00:03:32.545 --> 00:03:36.429
Can it be moved somewhere else so
that you have.

73
00:03:38.260 --> 00:03:39.889
&gt;&gt; Scott Moss: Yes,
you can, you can move it.

74
00:03:39.889 --> 00:03:44.190
You can wrap all your controllers and
then Try-Catch on the route level.

75
00:03:44.190 --> 00:03:46.610
That way you don't have to do
it on every single one yourself.

76
00:03:46.610 --> 00:03:49.837
You can bump Try-Catch all
the way up as far as you want.

77
00:03:49.837 --> 00:03:55.481
You can even just listen for unhandled,
cuz when something throws an asynchronous

78
00:03:55.481 --> 00:04:00.570
task and node, it's not on the main loop,
it's somewhere else, right?

79
00:04:00.570 --> 00:04:01.447
So it catches it eventually.

80
00:04:01.447 --> 00:04:05.830
So node has a way for you to listen for
unhandled promise rejections.

81
00:04:05.830 --> 00:04:08.941
So you can listen to say, hey,
when any promise rejection is thrown,

82
00:04:08.941 --> 00:04:11.913
which is an async/await,
let me listen for it and handle it here.

83
00:04:11.913 --> 00:04:14.700
So you can also do that,
which is not the best way.

84
00:04:14.700 --> 00:04:17.087
But yeah, you could push
Try-Catch up as far as you want,

85
00:04:17.087 --> 00:04:19.060
all the way up to where
whatever's calling it.

86
00:04:19.060 --> 00:04:21.940
So if I had a function that was async,
and I had another function calling

87
00:04:21.940 --> 00:04:24.724
it another function,
calling it another function, calling that,

88
00:04:24.724 --> 00:04:27.669
I could do Try-Catch all the way up
here if I want, versus doing it here.

89
00:04:27.669 --> 00:04:32.510
&gt;&gt; Speaker 2: Is it important in these
methods just because you're using awaits?

90
00:04:32.510 --> 00:04:35.032
&gt;&gt; Scott Moss: Yeah, when you use await
you have to use Try-Catch to handle

91
00:04:35.032 --> 00:04:37.510
errors, because it's treating
it as it's synchronous.

92
00:04:37.510 --> 00:04:41.730
If you're using a promise then you
would do a .catch versus a Try-Catch.

93
00:04:41.730 --> 00:04:44.670
So yeah, you would have to do a Try-Catch
specifically because you used await.

94
00:04:44.670 --> 00:04:47.621
So that's the, I guess that's
the cons of using async/await is that

95
00:04:47.621 --> 00:04:49.031
you now have to use a Try-Catch.

96
00:04:49.031 --> 00:04:51.110
But there's ways around that too.

