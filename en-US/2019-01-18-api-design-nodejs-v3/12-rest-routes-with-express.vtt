WEBVTT

1
00:00:00.040 --> 00:00:02.790
&gt;&gt; Speaker 1: So now we're gonna get
a little more into the REST routes with

2
00:00:02.790 --> 00:00:03.560
Express.

3
00:00:03.560 --> 00:00:07.108
So so far you've seen me use routes,
you've tried to use some routes.

4
00:00:07.108 --> 00:00:10.430
Whether you understand them or not, now's
the time that we're gonna actually dive

5
00:00:10.430 --> 00:00:12.370
deep into them and
talk about them a little more.

6
00:00:13.900 --> 00:00:17.110
So basically Express was
designed with REST in mind and

7
00:00:17.110 --> 00:00:18.480
pretty much has everything you need.

8
00:00:18.480 --> 00:00:20.740
So we know that when
we build a rest API or

9
00:00:20.740 --> 00:00:24.108
it can be a combination of
a route matching a verb, right?

10
00:00:24.108 --> 00:00:29.320
So like /user with a post or a get or
a delete or whatever, or a put.

11
00:00:29.320 --> 00:00:31.950
So Express was designed with that in mind.

12
00:00:31.950 --> 00:00:36.550
So it makes it really easy to do those
combinations of routes and verbs.

13
00:00:38.220 --> 00:00:40.890
So the matching system,
as far as when it comes to routes,

14
00:00:40.890 --> 00:00:41.960
allows us to do a few things.

15
00:00:41.960 --> 00:00:47.160
So we can match on an exact route, like,
literally slash whatever I put here

16
00:00:47.160 --> 00:00:52.330
exactly, we can match on a regex,
we can match on a glob.

17
00:00:52.330 --> 00:00:55.820
If you don't know what a glob is,
it's very much like a regex.

18
00:00:55.820 --> 00:00:57.620
We can also match on parameters.

19
00:00:57.620 --> 00:01:00.980
So just to give you some examples, let's
just go through some of what that looks

20
00:01:00.980 --> 00:01:05.840
like, is I'm going to change
this data one around.

21
00:01:05.840 --> 00:01:09.170
So I said you could match on the exact
one, that's what we've been doing so far.

22
00:01:09.170 --> 00:01:12.640
So in this case,
I'm matching exactly on /data.

23
00:01:12.640 --> 00:01:14.290
So we've done that one.

24
00:01:14.290 --> 00:01:16.820
And then I said you can match on,
like, a regex.

25
00:01:16.820 --> 00:01:22.099
So if you were to type in, like, a regex
here, I don't know, I want to start with

26
00:01:24.070 --> 00:01:30.960
let's say it has to start with me,
I guess.

27
00:01:30.960 --> 00:01:35.050
Anything that starts with me,
it'll match on this one right here.

28
00:01:35.050 --> 00:01:39.819
If you want it to match on glob for,
like, instance, I would say /user and

29
00:01:39.819 --> 00:01:43.605
then anything after that, so
as long as it has slash user and

30
00:01:43.605 --> 00:01:46.811
something after it,
it'll match this request.

31
00:01:49.729 --> 00:01:54.570
&gt;&gt; Speaker 1: You can also match on
parameters, which is gonna be very useful.

32
00:01:54.570 --> 00:02:02.600
So if I were to say, this parameter,
like, id, I can match on the parameter.

33
00:02:02.600 --> 00:02:05.940
And because the parameter is dynamic,
you need some way of

34
00:02:07.020 --> 00:02:09.520
getting that parameter inside your
controller, we'll talk about that later.

35
00:02:09.520 --> 00:02:11.970
But these are just all the different
ways you can match routes.

36
00:02:13.060 --> 00:02:18.240
So an exact match, a regex match,
a parameter match, a glob match.

37
00:02:19.490 --> 00:02:23.250
I'm sure there's other ones out there,
but in my experience,

38
00:02:23.250 --> 00:02:29.370
the only ones you'll probably ever
use are gonna be exact matching and

39
00:02:29.370 --> 00:02:33.260
parameter matching, especially for
REST cuz that's just how REST works.

40
00:02:33.260 --> 00:02:37.601
REST is a resource and then sometimes
a resource followed by an ID.

41
00:02:37.601 --> 00:02:40.010
And that's mostly REST, that's it.

42
00:02:40.010 --> 00:02:44.440
For special stuff, yeah,
you can get fancy, do regex's and globs.

43
00:02:44.440 --> 00:02:48.020
If you wanna automate some things, and not
have to register a route every single time

44
00:02:48.020 --> 00:02:52.710
yourself, then yeah, you could just say,
well I know that there's a user resource,

45
00:02:52.710 --> 00:02:53.920
so I'm just gonna do that.

46
00:02:53.920 --> 00:02:57.540
And then I'm gonna deal with whatever
comes after it pragmatically inside

47
00:02:57.540 --> 00:03:00.720
the controllers, versus letting
express deal with it for me.

48
00:03:00.720 --> 00:03:04.280
Right, so if I just did this glob here,
then I would have to figure out what's

49
00:03:04.280 --> 00:03:08.480
after here inside this controller or
some middleware that I define myself.

50
00:03:08.480 --> 00:03:11.980
Whereas if I just did an exact match,
Express will take care of it for me.

51
00:03:11.980 --> 00:03:15.991
So it really depends on what you want
to do, how fancy you want to get.

52
00:03:15.991 --> 00:03:22.755
So that's route matching.

53
00:03:22.755 --> 00:03:27.265
I recommend just sticking to exact
matching and parameter matching.

54
00:03:27.265 --> 00:03:32.485
Everything else is clever, but it's like
people are going to hate you if you do it.

55
00:03:32.485 --> 00:03:35.395
Your team's going to hate you,
so just don't do that.

56
00:03:35.395 --> 00:03:38.970
[LAUGH] It's very confusing if
you do it the other way around.

57
00:03:38.970 --> 00:03:40.580
If you do globs or regex's.

58
00:03:43.800 --> 00:03:47.010
So, it also supports HTTP
verbs on a route based level.

59
00:03:48.330 --> 00:03:51.988
So, together with the routing,
the HTTP verbs together with the routing,

60
00:03:51.988 --> 00:03:53.426
you can create the REST APIs.

61
00:03:53.426 --> 00:03:58.480
So to give you some examples of that So
we have app.get, we did app.post.

62
00:03:58.480 --> 00:04:01.990
So the get will help us, so
we're talking about CRUD, right?

63
00:04:01.990 --> 00:04:06.304
So if we have create, read, update, and
destroy, and we're talking about that.

64
00:04:06.304 --> 00:04:07.588
Let me get rid of this.
There we go.

65
00:04:07.588 --> 00:04:14.550
So the get would help us with the R
in CRUD, which is read, right?

66
00:04:14.550 --> 00:04:18.490
So for create we have a post,
that would help us with the C, for

67
00:04:18.490 --> 00:04:23.580
U which is update we would use app.put,
all right,

68
00:04:23.580 --> 00:04:27.940
this allows to put some data, so far we
could say, I wanna put some data here.

69
00:04:31.159 --> 00:04:33.458
&gt;&gt; Speaker 1: And
get a request and response.

70
00:04:33.458 --> 00:04:36.710
The difference between put and
post is literally nothing.

71
00:04:36.710 --> 00:04:39.000
They're both the same thing,
they just have different names.

72
00:04:39.000 --> 00:04:40.150
They both do the same thing.

73
00:04:40.150 --> 00:04:43.530
You post some data to the server,
it's just that the intention is different.

74
00:04:43.530 --> 00:04:46.270
A post is I'm creating something new.

75
00:04:46.270 --> 00:04:47.330
I'm creating a new resource.

76
00:04:47.330 --> 00:04:48.240
I'm creating a new user.

77
00:04:48.240 --> 00:04:50.210
I'm creating a new something.

78
00:04:50.210 --> 00:04:52.460
A put is I'm updating something.

79
00:04:52.460 --> 00:04:55.630
But they both send some
type of data to the server.

80
00:04:55.630 --> 00:04:58.710
And expect some type of
mutation on the database, and

81
00:04:58.710 --> 00:05:02.330
then they both expect some
type of response that is,

82
00:05:02.330 --> 00:05:06.460
if they're creating something, they expect
that new created thing to be sent back.

83
00:05:06.460 --> 00:05:10.250
If they're updating something, they expect
the updating thing to be sent back, and

84
00:05:10.250 --> 00:05:12.010
that's what REST describes.

85
00:05:12.010 --> 00:05:14.210
This is why I it's blurry,
because as you can see,

86
00:05:14.210 --> 00:05:15.849
I could just do whatever I wanted in here.

87
00:05:16.948 --> 00:05:20.590
So if REST says yeah, you've gotta do
this, but I'm like yeah, screw it,

88
00:05:20.590 --> 00:05:22.560
I'm gonna do this instead,
it kinda gets blurry.

89
00:05:22.560 --> 00:05:25.580
It's like well, what do you do?

90
00:05:25.580 --> 00:05:28.498
So yeah, that's just what REST describes,
but you don't have to do it.

91
00:05:30.592 --> 00:05:33.790
&gt;&gt; Speaker 1: Any questions on the put and
the post?

92
00:05:33.790 --> 00:05:40.814
No, so the other one might be, so
the D in delete would be app.delete.

93
00:05:40.814 --> 00:05:45.170
Like I said, Express words are very well
with CRUD, so we see we got app.get,

94
00:05:45.170 --> 00:05:47.330
we got put, delete and post.

95
00:05:47.330 --> 00:05:52.353
And it handles all of our
CRUD operations there.

