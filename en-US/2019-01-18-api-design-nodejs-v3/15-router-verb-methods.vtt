WEBVTT

1
00:00:00.025 --> 00:00:05.984
&gt;&gt; Scott Moss: So one last thing I wanted
to show you with the router in the app is

2
00:00:05.984 --> 00:00:12.065
we talked about the verbs like get,
post, use, put, delete.

3
00:00:12.065 --> 00:00:15.520
All that's really cool, but when you're
doing res, they're all the same thing.

4
00:00:15.520 --> 00:00:20.370
If we think about res,
there's literally the exact same routes.

5
00:00:20.370 --> 00:00:21.231
Every single time.

6
00:00:21.231 --> 00:00:22.463
No matter what resource you have.

7
00:00:22.463 --> 00:00:24.798
I'm just gonna go through some examples.

8
00:00:24.798 --> 00:00:27.161
So I'm just gonna say routes.

9
00:00:27.161 --> 00:00:28.303
Just to show you how.

10
00:00:28.303 --> 00:00:32.007
So we'll have, let's say our resources,

11
00:00:32.007 --> 00:00:36.623
let's say we have a pet app,
and our resource is cats.

12
00:00:36.623 --> 00:00:38.222
Okay, so we got cats here.

13
00:00:38.222 --> 00:00:39.664
I like cats.

14
00:00:39.664 --> 00:00:46.316
So if we wanted to do a get request
to get one cat, it'll be /cat, right?

15
00:00:46.316 --> 00:00:51.654
If we wanted to do, let me get that
cat with that specific ID it'll be,

16
00:00:51.654 --> 00:00:53.557
/cat: id, all right?

17
00:00:53.557 --> 00:00:56.853
But those are two get requests.

18
00:00:56.853 --> 00:01:01.508
Let's just put this like this, get, get.

19
00:01:01.508 --> 00:01:04.884
If I wanted to create a cat,
it would be a post request to /cat.

20
00:01:07.070 --> 00:01:08.992
&gt;&gt; Scott Moss: If I
wanted to update a cat,

21
00:01:08.992 --> 00:01:14.099
it would be a put request to /cat with
an ID of the cat that I wanna update.

22
00:01:14.099 --> 00:01:19.979
And then if I wanted to remove
a cat because it got adopted,

23
00:01:19.979 --> 00:01:25.022
then I would put delete a cat
with the ID of the cat.

24
00:01:25.022 --> 00:01:27.023
And that's never gonna change for res.

25
00:01:27.023 --> 00:01:29.712
It doesn't matter what your resource is,

26
00:01:29.712 --> 00:01:33.527
it's always gonna be these
five different routes, right?

27
00:01:33.527 --> 00:01:35.315
If you follow res it'll be these five.

28
00:01:35.315 --> 00:01:38.435
That's why I say it's really blurry
because it's really hard to build

29
00:01:38.435 --> 00:01:40.052
an application that only does this.

30
00:01:40.052 --> 00:01:42.149
Sometimes you need more,
like there's different relationships.

31
00:01:42.149 --> 00:01:44.725
This cat might have an owner
that has this thing.

32
00:01:44.725 --> 00:01:46.472
It gets complicated.

33
00:01:46.472 --> 00:01:49.391
But if you just follow res, these
are the only routes you'll ever need.

34
00:01:49.391 --> 00:01:50.212
This is why Rails was so

35
00:01:50.212 --> 00:01:52.468
popular cuz they were able to
scaffold this stuff out for you.

36
00:01:52.468 --> 00:01:54.718
Cuz it was like, this is it,
this is all you'll ever need.

37
00:01:54.718 --> 00:01:58.914
So if that's the case, it's kind of
tedious to write those over and over and

38
00:01:58.914 --> 00:02:02.534
over and over again especially if
we look at some of these routes.

39
00:02:02.534 --> 00:02:06.837
So if we look at the cat resource,
there's only two routes really.

40
00:02:06.837 --> 00:02:09.950
There's different verbs,
get, post, put, delete.

41
00:02:09.950 --> 00:02:14.399
But look at the routes, there's only two,
there's /cat and /cat:id, that's it.

42
00:02:14.399 --> 00:02:15.776
Those are the only two different routes.

43
00:02:15.776 --> 00:02:20.351
So, Express allows us to make this a lot
simpler versus writing five different

44
00:02:20.351 --> 00:02:23.625
route combinations like this,
we can just do it in two.

45
00:02:23.625 --> 00:02:26.254
So what you could do is
using the router or the app,

46
00:02:26.254 --> 00:02:29.961
cuz they both have the same routing
capabilities, doesn't matter.

47
00:02:29.961 --> 00:02:31.594
In this case I'll just say router.

48
00:02:31.594 --> 00:02:35.962
You can do .route, so
.route allows you to pass any route,

49
00:02:35.962 --> 00:02:38.113
in this case I'll say /cat.

50
00:02:38.113 --> 00:02:40.369
And then from there, I can do my verbs.

51
00:02:40.369 --> 00:02:43.378
I can do .get, pass in my controller and
my middleware.

52
00:02:43.378 --> 00:02:47.287
I can do .post, pass in my controller and
my middleware, right?

53
00:02:47.287 --> 00:02:51.268
And then for the other route,

54
00:02:51.268 --> 00:02:56.691
I could say router.routes /cat/id.

55
00:02:56.691 --> 00:03:00.669
And then I could do my get, my put and

56
00:03:00.669 --> 00:03:04.123
my delete,
&gt;&gt; Scott Moss: Right?

57
00:03:04.123 --> 00:03:07.387
So that just cleaned up a lot of stuff for
us just by doing that.

58
00:03:10.739 --> 00:03:12.422
&gt;&gt; Scott Moss: And again,
because a router and

59
00:03:12.422 --> 00:03:16.234
app have the same routing capabilities
this works the same way on an app.

60
00:03:16.234 --> 00:03:18.464
So yeah,
this is just a cleaner way to do it.

61
00:03:18.464 --> 00:03:20.386
So then now you just pass
in your controllers and

62
00:03:20.386 --> 00:03:22.367
your middleware here just
like we did down here.

63
00:03:24.838 --> 00:03:28.616
&gt;&gt; Scott Moss: And that way you
don't have to say router .get/cat,

64
00:03:28.616 --> 00:03:31.912
router .get /cat,
cuz it gets very tedious.

65
00:03:31.912 --> 00:03:33.832
So this is just like yeah,
it's res, just do this.

