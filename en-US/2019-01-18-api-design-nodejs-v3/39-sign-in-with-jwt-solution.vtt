WEBVTT

1
00:00:00.300 --> 00:00:06.190
&gt;&gt; Scott Moss: For sign in,
this one requires email and password.

2
00:00:06.190 --> 00:00:10.070
User must be real, passwords must match,
and creates a new token, so

3
00:00:10.070 --> 00:00:10.750
a lot of things here.

4
00:00:10.750 --> 00:00:13.530
Email and password,
that's the same as the one above so

5
00:00:13.530 --> 00:00:16.730
I'm just going to copy that logic,
paste it down here.

6
00:00:16.730 --> 00:00:19.976
That should satisfy that so
let's run this first test and see.

7
00:00:25.966 --> 00:00:29.900
&gt;&gt; Scott Moss: Looks like it did pass that
first one, it requires email and password.

8
00:00:29.900 --> 00:00:32.250
And then it says user must be real.

9
00:00:32.250 --> 00:00:35.097
So I'm guessing giving
the email that we got,

10
00:00:35.097 --> 00:00:38.531
that should be a real user in a database,
so let's see.

11
00:00:40.900 --> 00:00:49.315
&gt;&gt; Scott Moss:
User.findOne({email}).exec().

12
00:00:49.315 --> 00:00:56.599
Cool, so,
&gt;&gt; Scott Moss: And

13
00:00:56.599 --> 00:01:01.847
then if (!user)
&gt;&gt; Scott Moss: return

14
00:01:01.847 --> 00:01:06.635
rest.status(400).

15
00:01:11.356 --> 00:01:14.072
&gt;&gt; Scott Moss: .end(), so
that checks if it's a real user.

16
00:01:16.801 --> 00:01:19.170
&gt;&gt; Scott Moss: Prevent anyone
from sending any random email.

17
00:01:20.480 --> 00:01:22.210
Let's see if that worked.

18
00:01:22.210 --> 00:01:27.698
Looks like that's expecting
a different error code.

19
00:01:27.698 --> 00:01:30.270
Yeah, a 401, this time.

20
00:01:30.270 --> 00:01:34.220
401 past that one and
then the next one is passwords must match.

21
00:01:34.220 --> 00:01:37.710
So, if we do have a user,
then we need to check the passwords.

22
00:01:37.710 --> 00:01:39.178
So we're gonna do a try cache here.

23
00:01:42.815 --> 00:01:46.440
&gt;&gt; Scott Moss: Just in case
they check passwords break.

24
00:01:46.440 --> 00:01:49.448
So we'll say const match equals, and

25
00:01:49.448 --> 00:01:55.370
remember I told you there's a check
password method on the user document.

26
00:01:55.370 --> 00:01:57.570
So we get as user document here.

27
00:01:57.570 --> 00:02:03.459
So you can say user.checkPassword and
it'll take the password

28
00:02:03.459 --> 00:02:08.290
that was sent out,
which is rec.body.password.

29
00:02:08.290 --> 00:02:11.050
And it will compare it to
the hash password for this user.

30
00:02:12.090 --> 00:02:13.830
And we need to await that.

31
00:02:13.830 --> 00:02:15.310
No, wait, here, I've got it right here.

32
00:02:15.310 --> 00:02:16.110
Passwords must match.

33
00:02:16.110 --> 00:02:17.020
No, I got it everyone.

34
00:02:18.480 --> 00:02:19.470
I do.
Right here.

35
00:02:19.470 --> 00:02:20.480
I did create it.

36
00:02:20.480 --> 00:02:21.460
I just didn't see it.

37
00:02:21.460 --> 00:02:22.310
Yeah, you get a real user.

38
00:02:23.780 --> 00:02:25.700
So, yeah, this one should be fine.

39
00:02:25.700 --> 00:02:30.750
So if you go and you run this, so if it's
not a real user, you check the password.

40
00:02:30.750 --> 00:02:36.083
And again, if you look at the user model,
&gt;&gt; Scott Moss: checkPassword

41
00:02:36.083 --> 00:02:37.660
looks like this.

42
00:02:37.660 --> 00:02:42.800
So it's an async method, takes a password,
it throws an error if something happened.

43
00:02:42.800 --> 00:02:46.410
But it'll return a boolean true or
false if it passed or not.

44
00:02:46.410 --> 00:02:48.280
It just return that boolean.

45
00:02:48.280 --> 00:02:50.000
So right here this'll either be true or
false.

46
00:02:50.000 --> 00:02:53.842
So if this is false, oops,

47
00:02:53.842 --> 00:02:59.830
if (!match) then what I
wanna do is do a 401.

48
00:02:59.830 --> 00:03:01.045
So I'll just copy this.

49
00:03:05.024 --> 00:03:07.359
&gt;&gt; Scott Moss: Yeah, that's a right user,
but your password is incorrect, so

50
00:03:07.359 --> 00:03:08.970
you can't do it.

51
00:03:08.970 --> 00:03:11.619
So then I'll just log the error
just in case that fails.

52
00:03:15.891 --> 00:03:18.791
&gt;&gt; Scott Moss: And I'll just send back
a 400 just in case that breaks for now,

53
00:03:18.791 --> 00:03:21.340
unless it tells us something different.

54
00:03:21.340 --> 00:03:22.114
So we'll test that.

55
00:03:31.160 --> 00:03:36.350
&gt;&gt; Scott Moss: Then if we go look,
looks like, no those are still messed up.

56
00:03:36.350 --> 00:03:38.116
So if we look at a test with those.

57
00:03:42.762 --> 00:03:48.583
&gt;&gt; Scott Moss: 401 send,
I need a message here, that's why.

58
00:03:48.583 --> 00:03:51.583
I need to do a send with a message.

59
00:03:54.383 --> 00:03:56.688
&gt;&gt; Scott Moss: Not off,
just to short cut it.

60
00:03:58.959 --> 00:04:00.710
&gt;&gt; Scott Moss: And
I'll do the same thing here.

61
00:04:00.710 --> 00:04:03.037
Auth and did the same thing here,
there we go.

62
00:04:15.550 --> 00:04:20.920
&gt;&gt; Scott Moss: Got an extra
bracket here from something.

63
00:04:20.920 --> 00:04:21.620
Where's that?

64
00:04:21.620 --> 00:04:22.146
There it is.

65
00:04:22.146 --> 00:04:23.281
Nice.

66
00:04:30.453 --> 00:04:33.230
&gt;&gt; Scott Moss: Gotta
have that extra bracket.

67
00:04:34.920 --> 00:04:35.874
Where is it at?

68
00:04:40.707 --> 00:04:42.090
&gt;&gt; Scott Moss: There it is.

69
00:04:42.090 --> 00:04:43.953
How did that all get messed up?

70
00:04:52.357 --> 00:04:55.945
&gt;&gt; Scott Moss: There we go, so looks
like those two pass, user must be real,

71
00:04:55.945 --> 00:04:57.600
password must match.

72
00:04:57.600 --> 00:05:01.120
And then now it's testing to make
sure it creates a new token.

73
00:05:01.120 --> 00:05:06.509
So token will be new token from the user,

74
00:05:06.509 --> 00:05:11.739
and then we just need to return status of

75
00:05:11.739 --> 00:05:16.823
200 with the token as the payload.

76
00:05:19.470 --> 00:05:22.751
&gt;&gt; Scott Moss: Okay, cool,
so that'll pass sign in, and

77
00:05:22.751 --> 00:05:25.775
then the next thing is gonna be protect.

