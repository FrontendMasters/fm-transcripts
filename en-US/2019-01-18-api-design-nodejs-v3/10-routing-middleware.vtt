WEBVTT

1
00:00:00.140 --> 00:00:02.990
&gt;&gt; Scott Moss: So we did a little
bit of routing you know just

2
00:00:02.990 --> 00:00:03.940
on the last exercise.

3
00:00:03.940 --> 00:00:08.470
But now we're going to dive deep into
it and see how nice it is with Express.

4
00:00:08.470 --> 00:00:10.970
It's actually one of my most favorite
part of Express is the routing.

5
00:00:10.970 --> 00:00:14.780
I use the Express routing well,
actually Express routing using some other

6
00:00:14.780 --> 00:00:17.910
library but I use that library
in other projects that I do

7
00:00:17.910 --> 00:00:21.420
that have to do with routing
unrelated to like servers and stuff.

8
00:00:21.420 --> 00:00:22.880
It's that good.

9
00:00:22.880 --> 00:00:23.990
So what is Middleware?

10
00:00:23.990 --> 00:00:25.680
Does anybody know what Middleware is?

11
00:00:27.330 --> 00:00:32.270
It's like underwear, but
it's in the middle, Middleware.

12
00:00:32.270 --> 00:00:33.176
Y'all don't wear middleware?

13
00:00:33.176 --> 00:00:37.496
Wow, [LAUGH] no, Middleware Nate,

14
00:00:37.496 --> 00:00:42.705
you said you used Express before, right?

15
00:00:42.705 --> 00:00:43.350
&gt;&gt; Nate: Mm-hmm.

16
00:00:43.350 --> 00:00:45.250
&gt;&gt; Scott Moss: Would you,
what's your definition of Middleware?

17
00:00:45.250 --> 00:00:48.760
&gt;&gt; Nate: I would say,
I've seen that in the context of using,

18
00:00:48.760 --> 00:00:52.080
like, templating, like Handlebars.

19
00:00:52.080 --> 00:00:52.930
And from what I understand,

20
00:00:52.930 --> 00:00:59.150
it's sort of like software to allow two
other softwares to talk to each other.

21
00:00:59.150 --> 00:01:01.610
&gt;&gt; Scott Moss: Yeah,
you can use Middleware to do that.

22
00:01:01.610 --> 00:01:04.500
That's one application of Middleware,
for sure.

23
00:01:04.500 --> 00:01:05.420
Anybody else?

24
00:01:05.420 --> 00:01:08.580
I think we have the concept of Middleware
in other server frameworks too,

25
00:01:08.580 --> 00:01:09.760
it's not just Express.

26
00:01:09.760 --> 00:01:12.220
I use Middleware a lot
in writing stuff too,

27
00:01:13.330 --> 00:01:17.000
it's not something that's
unique to Express.

28
00:01:17.000 --> 00:01:18.522
It's just like convention of, so

29
00:01:18.522 --> 00:01:21.800
like a software design pattern that
Express adopted and popularized.

30
00:01:21.800 --> 00:01:23.470
But it's not created by Express.

31
00:01:25.520 --> 00:01:30.030
TLDR, it's basically just a list
of functions that execute in order

32
00:01:30.030 --> 00:01:31.560
before your controllers.

33
00:01:31.560 --> 00:01:34.700
And we'll talk about controllers later,
but you've already written controllers.

34
00:01:34.700 --> 00:01:38.880
If we go look at our code these are
controls of these functions here, these

35
00:01:38.880 --> 00:01:42.580
are like our final functions that have to
run before we respond back to the request,

36
00:01:42.580 --> 00:01:44.060
that's a controller.

37
00:01:44.060 --> 00:01:46.290
Middleware are just a list of
functions that run before that.

38
00:01:47.360 --> 00:01:48.760
That's basically it.

39
00:01:48.760 --> 00:01:51.540
So, you can think of it as
interceptors for route.

40
00:01:51.540 --> 00:01:52.530
Like route interceptors.

41
00:01:52.530 --> 00:01:56.200
So like, this request comes in,
run this function, then this function,

42
00:01:56.200 --> 00:01:59.640
then this function, then this function,
then finally respond with this function.

43
00:01:59.640 --> 00:02:02.010
So, all those functions that
we ran before were middleware.

44
00:02:02.010 --> 00:02:07.200
They sit in the middle between
your request and your response.

45
00:02:07.200 --> 00:02:07.700
Middleware.

46
00:02:10.670 --> 00:02:14.680
They allow you to execute functions on
an incoming request with guaranteed order.

47
00:02:14.680 --> 00:02:16.030
That part is important.

48
00:02:16.030 --> 00:02:19.670
Order is very important, so
however you register the Middleware and

49
00:02:19.670 --> 00:02:23.240
the routes with Express, that's
the order that they're gonna execute.

50
00:02:23.240 --> 00:02:26.080
And that's important, because some
Middleware might be relying on previous

51
00:02:26.080 --> 00:02:29.830
Middleware to do some type of
enhancement on the request object.

52
00:02:29.830 --> 00:02:34.160
Or do some logging, or do some database
creating before this other one executes.

53
00:02:34.160 --> 00:02:35.360
So order is very important.

54
00:02:37.930 --> 00:02:40.660
&gt;&gt; Scott Moss: Some different types of
scenarios you might use Middleware for

55
00:02:40.660 --> 00:02:45.290
are gonna be authenticating, which we're
gonna be doing, transforming the requests,

56
00:02:45.290 --> 00:02:48.070
which is already happening in this file.

57
00:02:49.470 --> 00:02:53.798
So all this stuff right here that's doing
app.use, so we have like app.use cors,

58
00:02:53.798 --> 00:02:58.200
app.use json, urlencoded,
all the stuff that was here for you,

59
00:02:58.200 --> 00:03:05.140
all these are Middleware that I installed
to transform the request when it comes in,

60
00:03:05.140 --> 00:03:09.040
and because these were defined before
our routes were they happened first.

61
00:03:09.040 --> 00:03:13.380
So this CORS middleware makes
our server CORS enabled.

62
00:03:13.380 --> 00:03:16.208
If you don't know what that means
that basically CORS are short for

63
00:03:16.208 --> 00:03:18.310
cross-origin resource sharing.

64
00:03:18.310 --> 00:03:22.840
You have a server on mydomain.com and

65
00:03:22.840 --> 00:03:27.750
you have a website on some other
domain.com, the browser might not

66
00:03:27.750 --> 00:03:30.700
allow you to interact with that server
because it's on a different domain.

67
00:03:30.700 --> 00:03:35.007
It's across domain so the server has to
implement cross domain resource sharing

68
00:03:35.007 --> 00:03:38.743
which basically means we allow this
domain, we allow these headers,

69
00:03:38.743 --> 00:03:39.580
we allow this.

70
00:03:39.580 --> 00:03:40.950
So that's what CORS does.

71
00:03:40.950 --> 00:03:45.130
It basically allows your API to be used
by other domains that are on the browser.

72
00:03:45.130 --> 00:03:47.410
Server to server communication
doesn't really respect CORS.

73
00:03:47.410 --> 00:03:48.340
It's mostly just browsers.

74
00:03:49.530 --> 00:03:53.076
JSON, this is how we were
able to get req.body.

75
00:03:53.076 --> 00:03:54.680
So req.body,

76
00:03:54.680 --> 00:03:57.830
that's actually really a lot of work
to do in just Node without Express.

77
00:03:57.830 --> 00:04:02.790
You have to like you get all these bytes
and you gotta put them together yourself.

78
00:04:02.790 --> 00:04:05.610
Then you gotta turn them into a string and
then you gotta parse them.

79
00:04:05.610 --> 00:04:10.480
You gotta do all that manual work whereas
this json middle work does it for you and

80
00:04:10.480 --> 00:04:13.680
just gives it to you in the way that you
expect it to be, a javascript object.

81
00:04:14.800 --> 00:04:17.030
Urlencoded, we're not
really using this but

82
00:04:17.030 --> 00:04:19.670
this is also a middle where
that transforms the request.

83
00:04:19.670 --> 00:04:22.990
It just allows us to attach
parameters to a URL.

84
00:04:22.990 --> 00:04:26.800
Like a query string, like a question mark,
here's all this other stuff.

85
00:04:26.800 --> 00:04:27.900
It kind of does that for us.

86
00:04:27.900 --> 00:04:31.490
And then this Morgan one
does all the logging for us.

87
00:04:31.490 --> 00:04:36.407
So if you saw any logs
that we had in our server,

88
00:04:36.407 --> 00:04:40.760
when it was starting up like right here.

89
00:04:40.760 --> 00:04:43.580
/getdata, what the time it took.

90
00:04:43.580 --> 00:04:45.260
Morgan did that, it logged it for us.

91
00:04:45.260 --> 00:04:46.700
It just a logging middleware.

92
00:04:46.700 --> 00:04:49.580
So all these middleware don't
really respond to the requests.

93
00:04:49.580 --> 00:04:53.180
They just transform the request then
they go to the next one, in that order.

94
00:04:59.060 --> 00:05:03.320
&gt;&gt; Scott Moss: But they can also respond
to requests like a controller although

95
00:05:03.320 --> 00:05:05.910
that is not their intent,
they can if they need to.

96
00:05:05.910 --> 00:05:07.430
They have the same power.

97
00:05:07.430 --> 00:05:08.890
That's not their intent.

98
00:05:08.890 --> 00:05:12.810
They don't want to respond to requests,
but they can.

99
00:05:12.810 --> 00:05:15.780
For instance, if you have
an authentication Middleware and

100
00:05:15.780 --> 00:05:19.150
you run authentication and turns out,
they're not authenticated.

101
00:05:19.150 --> 00:05:21.030
Yeah, you probably wanna respond
to the request right there and

102
00:05:21.030 --> 00:05:24.230
say they're not authenticated
versus continue going forward.

103
00:05:24.230 --> 00:05:28.125
All right, so although
the intention is not to respond to

104
00:05:28.125 --> 00:05:32.223
the request in Middleware,
they do have the power to do so.

105
00:05:32.223 --> 00:05:33.370
So just keep that in mind.

