WEBVTT

1
00:00:00.040 --> 00:00:03.010
&gt;&gt; Scott Moss: Okay, so
to get started with the Repo, go ahead and

2
00:00:03.010 --> 00:00:04.740
check out to lesson one.

3
00:00:04.740 --> 00:00:06.060
Let's just do a quick
tour of what we have,

4
00:00:06.060 --> 00:00:10.350
because we will already have some stuff
that comes with it, that way we can

5
00:00:10.350 --> 00:00:14.390
focus on just doing the API and
not so much about the other things.

6
00:00:14.390 --> 00:00:17.390
So first thing is,
let's take a look at the package.json, and

7
00:00:17.390 --> 00:00:19.630
look at some of the dependencies in here.

8
00:00:19.630 --> 00:00:22.460
So a few things is we have decrypt,
we use that to

9
00:00:22.460 --> 00:00:26.760
hash the passwords that we're gonna be
using for our users and authentication.

10
00:00:26.760 --> 00:00:29.470
Body parser, cors,

11
00:00:29.470 --> 00:00:33.730
these are some packages that we're gonna
be using for our servers that we build.

12
00:00:33.730 --> 00:00:35.810
And we'll talk more about that later.

13
00:00:35.810 --> 00:00:40.119
But then we have cuid.env.

14
00:00:40.119 --> 00:00:43.540
These are just tools that we use for
testing.

15
00:00:43.540 --> 00:00:46.440
And we won't be using those too much.

16
00:00:46.440 --> 00:00:50.550
And then, we got express itself, which
is gonna be the framework that we use.

17
00:00:50.550 --> 00:00:54.160
JSON web token is gonna be some
package that helps us build

18
00:00:54.160 --> 00:00:56.320
all of our authentication.

19
00:00:56.320 --> 00:00:59.080
And then load the ashes
of utility library,

20
00:00:59.080 --> 00:01:02.050
Mongoose to interact with the database,
we'll talk more about that.

21
00:01:02.050 --> 00:01:07.360
And Morgan and valid data, are just
gonna be packarges that we use for

22
00:01:07.360 --> 00:01:11.770
our API plugins, and
also tools to authenticate our schemas.

23
00:01:11.770 --> 00:01:14.640
And then as far as scripts go,
we got a few scripts here, so

24
00:01:14.640 --> 00:01:16.170
we have the build script.

25
00:01:16.170 --> 00:01:18.630
This project is gonna be
built with Babble, so

26
00:01:18.630 --> 00:01:21.120
although no desk support,
especially the latest version though,

27
00:01:21.120 --> 00:01:24.080
it does support really cool
features that ES6 provides.

28
00:01:24.080 --> 00:01:27.780
It doesn't really have the ES6 imports and
exports, so we're gonna use Babble for

29
00:01:27.780 --> 00:01:31.250
that cuz I prefer that, so
this builds with Babble.

30
00:01:31.250 --> 00:01:33.570
And then,
we have a whole board of test commands.

31
00:01:33.570 --> 00:01:35.480
These test commands the reason they are so

32
00:01:35.480 --> 00:01:39.630
many is because, the projects is gonna
be organised in different branches.

33
00:01:39.630 --> 00:01:43.280
And I want the test that you run for
the certain branch to be scoped for

34
00:01:43.280 --> 00:01:44.130
that lesson.

35
00:01:44.130 --> 00:01:46.740
I don't want the other test creating
noise and getting in the way.

36
00:01:46.740 --> 00:01:49.850
So I create different commands for the
different branches that you'll be using.

37
00:01:49.850 --> 00:01:53.360
And then just the overall test
command that test everything.

38
00:01:53.360 --> 00:01:56.760
And then, you have the dev command, which
is what you'll be using to star the repo.

39
00:01:56.760 --> 00:01:58.850
And basically, what this command does,

40
00:01:58.850 --> 00:02:01.603
it's going to build the repo
using the build command.

41
00:02:01.603 --> 00:02:05.342
And then, it's also going to execute
the build command or the output of

42
00:02:05.342 --> 00:02:09.890
the build command using something called
nodemon, which is basically like node.

43
00:02:09.890 --> 00:02:13.470
But it will restart and
rerun a file if a file changes.

44
00:02:13.470 --> 00:02:15.200
So in our case,

45
00:02:15.200 --> 00:02:18.980
if a file changes in the source
directory while the server is running,

46
00:02:18.980 --> 00:02:23.740
it will rebuild and reserve our API, so
we don't have to stop and turn it back on.

47
00:02:23.740 --> 00:02:25.560
So that's what the dev
command is doing for us.

48
00:02:25.560 --> 00:02:28.640
And the restart command,
is doing what I describe there.

49
00:02:28.640 --> 00:02:30.400
And then, a start command is for

50
00:02:30.400 --> 00:02:33.450
something if you were deploy you would
use this versus the dev command.

51
00:02:34.740 --> 00:02:36.676
So just to walk through
some of that stuff.

52
00:02:36.676 --> 00:02:39.490
The node mon.json are the instructions for

53
00:02:39.490 --> 00:02:41.960
that restartable executable
that I talked about.

54
00:02:41.960 --> 00:02:45.340
So you'll see that I'm
watching these paths here and

55
00:02:45.340 --> 00:02:47.950
if any of those paths change,
I know to go ahead and

56
00:02:47.950 --> 00:02:51.530
restart with the node command,
and ignore these paths here.

57
00:02:51.530 --> 00:02:55.790
So that's what that's doing,
to take a look at the babel config.

58
00:02:55.790 --> 00:03:00.810
We're using Babel 7, so we're using the
latest Babel which uses @babel name space.

59
00:03:00.810 --> 00:03:04.611
And we're just gonna target
the current version of node, and

60
00:03:04.611 --> 00:03:09.597
then we just have a few plug-ins here
like the class properties for E6 classes.

61
00:03:09.597 --> 00:03:12.516
And then, object spread,
which is what we will be using, so

62
00:03:12.516 --> 00:03:14.024
just a couple plug-ins here.

63
00:03:14.024 --> 00:03:17.930
And then we have the ES lint and
prettier setup for formatting.

64
00:03:17.930 --> 00:03:21.860
So if we have any auto formatting
setup in your repo that uses es lint,

65
00:03:21.860 --> 00:03:25.310
it'll take advantage of this, if not,
you'll see some linting errors.

66
00:03:25.310 --> 00:03:28.670
You can also just run the linter yourself
manually if you want to, but I like to

67
00:03:28.670 --> 00:03:33.370
have formatted code so I set up the linter
for you with es lint and prettier.

68
00:03:33.370 --> 00:03:38.060
And then the last thing is a test DB file,
and we'll talk more about this later.

69
00:03:38.060 --> 00:03:43.450
But basically, we need this to set up
our test that you will be running for

70
00:03:43.450 --> 00:03:45.900
this repo to actually get going and
making progress.

71
00:03:46.970 --> 00:03:51.030
So if we hop into the source folder,
we're gonna have a few things here.

72
00:03:51.030 --> 00:03:53.525
One, you'll see this __tests__ directory.

73
00:03:53.525 --> 00:03:55.976
You'll see a lot of these
throughout the repo.

74
00:03:55.976 --> 00:03:57.970
And this is where we will have tests.

75
00:03:57.970 --> 00:04:01.570
These tests will be written for you, and
your job will be to get them to pass.

76
00:04:01.570 --> 00:04:03.840
So if you see that,
that's where tests will be.

77
00:04:03.840 --> 00:04:07.010
And then, we have this config folder,
this is also done for you.

78
00:04:07.010 --> 00:04:11.380
But basically, what this config folder
does is it houses all the configuration,

79
00:04:11.380 --> 00:04:16.480
things like secrets and ports and strings,
and URLs that our API is gonna need.

80
00:04:16.480 --> 00:04:19.100
It puts them in one central place and
it switches them,

81
00:04:19.100 --> 00:04:21.090
depending on what environment we're in.

82
00:04:21.090 --> 00:04:24.600
So if we're in a testing environment,
we might see a testing configuration.

83
00:04:24.600 --> 00:04:27.690
If we're in a development environment, we
might see a development configuration and

84
00:04:27.690 --> 00:04:29.160
production, and so forth.

85
00:04:29.160 --> 00:04:32.080
So it allows us to be able to switch
our configurations depending on what

86
00:04:32.080 --> 00:04:33.111
environment we're in.

87
00:04:33.111 --> 00:04:35.721
And extract it out to one place so
we're not just moving and

88
00:04:35.721 --> 00:04:37.970
copying variables into
all of our applications.

89
00:04:37.970 --> 00:04:39.810
So that's going to be done for you.

90
00:04:39.810 --> 00:04:41.420
Then, we have this resources directory,

91
00:04:41.420 --> 00:04:43.570
this is where we're going
to do most of our work.

92
00:04:43.570 --> 00:04:48.399
And these resources are going to be
matched up with how we build our rest API.

93
00:04:48.399 --> 00:04:51.349
So, for every resource that we wanna
interact with API that we build,

94
00:04:51.349 --> 00:04:52.960
we're gonna have them here.

95
00:04:52.960 --> 00:04:56.852
In this example,
our API is gonna be a basic-to-do-app API.

96
00:04:56.852 --> 00:05:00.712
So we have resources like an item,
a list which items belong to, and

97
00:05:00.712 --> 00:05:03.970
then a user.com logs in and
create items and list.

98
00:05:03.970 --> 00:05:06.410
So it's very basic and
that's where you'll see these resources.

99
00:05:06.410 --> 00:05:07.460
And then,

100
00:05:07.460 --> 00:05:12.310
utils is where we store code that has
nothing do with resources but help us out.

101
00:05:12.310 --> 00:05:17.172
So for instance, we'll have authentication
in here, stuff for creating read,

102
00:05:17.172 --> 00:05:21.740
update, and destroy on our controllers,
and then importantly the db one.

103
00:05:21.740 --> 00:05:25.619
So this one is here for you, and basically
what this logic does is is going to

104
00:05:25.619 --> 00:05:28.219
connect to our Mongo database for
us using Mongo.

105
00:05:28.219 --> 00:05:30.900
So you don't have to worry about that
logic, we'll be connecting for you.

106
00:05:30.900 --> 00:05:33.240
We'll be connected for
you doing the test and

107
00:05:33.240 --> 00:05:35.890
also when you start the server
in development mode.

108
00:05:35.890 --> 00:05:38.920
But this is the logic that
actually connects to the test.

109
00:05:38.920 --> 00:05:42.583
And then, you have the index file which
is the start point to the server and

110
00:05:42.583 --> 00:05:45.729
this just kicks everything off,
actually starts the server.

111
00:05:45.729 --> 00:05:49.490
And then, the other place will do a lot
of your work is the server file itself.

112
00:05:49.490 --> 00:05:51.690
So this is where we're gonna get started.

113
00:05:51.690 --> 00:05:54.819
The last thing I'll mention is,
to actually get your editor setup so

114
00:05:54.819 --> 00:05:59.410
you take advantageof ESLint and Prettier,
you need to install some extensions.

115
00:05:59.410 --> 00:06:03.150
So I'm using VS code, so for me,
I just click on extensions and

116
00:06:03.150 --> 00:06:05.370
I could type in prettier.

117
00:06:05.370 --> 00:06:08.890
And you can see, I already have the
prettier code for matter are installed, so

118
00:06:08.890 --> 00:06:11.510
you should install that one,
that's the one that you want.

119
00:06:11.510 --> 00:06:15.490
And then for ESLint, you can just type in
ESLint, and you can see they already have

120
00:06:15.490 --> 00:06:18.630
the ESLint, the win with the star on it,
already installed.

121
00:06:18.630 --> 00:06:20.920
And then from there,
you should be able to configure it.

122
00:06:20.920 --> 00:06:25.820
So if I hit Cmd+comma, I can go over
to my settings, I can type in ESLint.

123
00:06:25.820 --> 00:06:28.530
And you can see, there's tons of
different settings that you want.

124
00:06:28.530 --> 00:06:30.870
For me, I like to autofix on save.

125
00:06:30.870 --> 00:06:35.500
So whenever I hit save,
it will fix any warning linting errors.

126
00:06:35.500 --> 00:06:38.580
So anything that's formatting,
it'll fix that for me.

127
00:06:38.580 --> 00:06:41.040
And that's really cool,
so you should do that.

128
00:06:41.040 --> 00:06:46.130
If not, you can switch it to where it's on
type or whenever you run it manually with

129
00:06:46.130 --> 00:06:49.610
the command that ESLint
installs through the plug in.

130
00:06:49.610 --> 00:06:53.474
So you can run Command+Shift+P and
you can type in lint, and

131
00:06:53.474 --> 00:06:55.491
you can auto fix here manually.

