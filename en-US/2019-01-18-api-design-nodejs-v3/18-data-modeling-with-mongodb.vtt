WEBVTT

1
00:00:00.096 --> 00:00:02.986
&gt;&gt; Scott Moss: Data Modeling with MongoDB.

2
00:00:02.986 --> 00:00:06.185
So this will just be more of
a reference thing for you all and

3
00:00:06.185 --> 00:00:10.320
how to do things with Mongo than it is
completely new different data bases.

4
00:00:10.320 --> 00:00:13.169
So if you've never used a database before,

5
00:00:13.169 --> 00:00:18.490
I'm not gonna go into extreme detail about
how databases work and all that stuff.

6
00:00:18.490 --> 00:00:19.760
We have another course for

7
00:00:19.760 --> 00:00:23.470
that, intro to MongoDB that goes
a little further into that.

8
00:00:23.470 --> 00:00:26.770
But I will be talking about how to use
Mongo and Mongoose in this course.

9
00:00:26.770 --> 00:00:30.070
So if you want more detail about
just the database in general,

10
00:00:30.070 --> 00:00:31.860
definitely check out that course.

11
00:00:31.860 --> 00:00:35.089
It's mostly about data modeling and
not so much working with the database.

12
00:00:37.690 --> 00:00:43.540
Cool, so we talk about Mongo being
a document store where it's schemaless.

13
00:00:43.540 --> 00:00:46.250
So basically, you can store whatever
you want in there and it'll save it.

14
00:00:46.250 --> 00:00:48.660
But I said that's a really bad idea and
we'll talk about it later.

15
00:00:48.660 --> 00:00:49.360
Well, this is now.

16
00:00:49.360 --> 00:00:52.240
[LAUGH] We don't wanna do that.

17
00:00:52.240 --> 00:00:55.210
So we definitely want to use schemas for
our schemaless DB.

18
00:00:55.210 --> 00:00:59.470
So what does that mean and
why do I always use Postgress instead?

19
00:00:59.470 --> 00:01:00.340
Well, you can.

20
00:01:00.340 --> 00:01:01.790
You can use prosgrez if you want.

21
00:01:01.790 --> 00:01:02.810
But I decided to use Mongo for

22
00:01:02.810 --> 00:01:06.870
this exercise because it's
a lot easier to get set up.

23
00:01:06.870 --> 00:01:11.149
But yeah, you should always use a schema
for you models, and Mongoose makes it easy

24
00:01:11.149 --> 00:01:14.350
to create those schemas, and
that's just my tool of choice.

25
00:01:15.380 --> 00:01:19.680
So MongoDB is a schemaless document store,
you should always use a schemaless,

26
00:01:19.680 --> 00:01:21.360
otherwise you will go crazy.

27
00:01:21.360 --> 00:01:26.340
I've actually worked with organizations
before that they switched over from like

28
00:01:26.340 --> 00:01:30.160
to some relational database, and then they
used Mongo because it was schemaless.

29
00:01:30.160 --> 00:01:33.230
And they went with that and
it just threw everything in the database.

30
00:01:33.230 --> 00:01:36.440
And then at some point,
you're gonna have to check the data.

31
00:01:36.440 --> 00:01:37.610
At some point,
you're gonna have to do that.

32
00:01:37.610 --> 00:01:39.790
So guess where they decided to do it?

33
00:01:39.790 --> 00:01:40.880
On the front end.

34
00:01:40.880 --> 00:01:44.520
So on the front end, it's literally just
validating all the data that comes back

35
00:01:44.520 --> 00:01:47.140
from an API and
it is the worst place to do it.

36
00:01:47.140 --> 00:01:49.600
I mean,
the front end was just full of errors.

37
00:01:49.600 --> 00:01:52.520
Full of errors, there were no tests,
it was really bad.

38
00:01:52.520 --> 00:01:54.700
So that's what happens if
you don't have a schema.

39
00:01:54.700 --> 00:01:56.930
At some point,
you're gonna have to validate that data.

40
00:01:56.930 --> 00:01:59.050
You better validate it before
it goes in the database.

41
00:01:59.050 --> 00:02:02.896
Otherwise every single client that use
that data is gonna have to do some type of

42
00:02:02.896 --> 00:02:04.366
validation in order to work.

43
00:02:04.366 --> 00:02:07.390
So definitely use a schema.

44
00:02:07.390 --> 00:02:10.849
MongoDB has added support for
creating schema, so

45
00:02:10.849 --> 00:02:14.044
mongoose is a separate
package than MongoDB.

46
00:02:14.044 --> 00:02:19.460
For MongoDB, the JavaScript client has
added support for schemas, like this year.

47
00:02:19.460 --> 00:02:23.335
So you could use just the MongoDB
client to create schemas and

48
00:02:23.335 --> 00:02:26.840
the way they do it is a little different
than the way Mongoose does it.

49
00:02:26.840 --> 00:02:29.350
But they too have created support for

50
00:02:29.350 --> 00:02:31.040
schemas although they
are a schemas database.

51
00:02:31.040 --> 00:02:34.390
So even they're saying, like yeah they
should probably use some schemas here.

52
00:02:34.390 --> 00:02:37.540
So you can use that if you want,
but Mongoose is still way better.

53
00:02:37.540 --> 00:02:39.700
Just way better.

54
00:02:43.432 --> 00:02:46.930
&gt;&gt; Scott Moss: So we can create the models
for each REST resource we want, and

55
00:02:46.930 --> 00:02:48.760
then we can expose it to the API.

56
00:02:48.760 --> 00:02:50.240
So what does that mean?

57
00:02:50.240 --> 00:02:53.286
So if we go over to our resources here,
for instance,

58
00:02:53.286 --> 00:02:57.892
let's look at the user resource, you can
see I have controller model router, so

59
00:02:57.892 --> 00:03:02.302
I click on model,
&gt;&gt; Scott Moss: You can see I have a schema

60
00:03:02.302 --> 00:03:07.760
here that describes what fields this
user resource is gonna have on it.

61
00:03:07.760 --> 00:03:11.880
And then I use that
schema to create a model.

62
00:03:11.880 --> 00:03:15.210
And the model is
the JavaScript representation

63
00:03:15.210 --> 00:03:17.580
of that database resource
that we're gonna use, right?

64
00:03:17.580 --> 00:03:21.819
This is how we interact with the users and
the databases by using this user model.

65
00:03:23.430 --> 00:03:26.020
So that's how Mongoose kind of
works with schemas and models.

66
00:03:26.020 --> 00:03:28.660
You create a schema and
that schema is used to create a model.

67
00:03:28.660 --> 00:03:33.450
And that model holds instructions for that
schema so you can use it in JavaScript.

