WEBVTT

1
00:00:00.150 --> 00:00:01.440
&gt;&gt; Scott Moss: Let's just get
a really good primer here,

2
00:00:01.440 --> 00:00:03.130
I know we have a lot of
front end people here.

3
00:00:03.130 --> 00:00:05.460
Maybe this is your first
time building an API.

4
00:00:05.460 --> 00:00:07.570
So what exactly is an API?

5
00:00:09.320 --> 00:00:13.310
Kevin, what is an API?

6
00:00:13.310 --> 00:00:18.720
&gt;&gt; Kevin: What makes it possible for
one program to talk to my data.

7
00:00:18.720 --> 00:00:19.340
&gt;&gt; Scott Moss: There you go.

8
00:00:19.340 --> 00:00:20.590
Yep that's basically it.

9
00:00:21.960 --> 00:00:26.890
So TLDR, it's the server that creates,
this is just my long explanation.

10
00:00:26.890 --> 00:00:31.154
A server that creates an HTTP interface
for interacting with some data.

11
00:00:31.154 --> 00:00:33.250
At least in the context
of building a rest API.

12
00:00:33.250 --> 00:00:38.450
I mean, the term API is used very
broadly across like everything.

13
00:00:38.450 --> 00:00:42.430
But in the context of servers,
it's something that's over HTTP.

14
00:00:42.430 --> 00:00:44.400
That defines some interface for

15
00:00:44.400 --> 00:00:46.740
interacting with some data,
usually a database.

16
00:00:46.740 --> 00:00:47.990
But it could be some other server.

17
00:00:50.140 --> 00:00:53.720
It's short for
Application Programming Interface.

18
00:00:53.720 --> 00:00:57.630
I guess,
that was created way before I was born.

19
00:00:57.630 --> 00:01:00.280
So [LAUGH].

20
00:01:00.280 --> 00:01:01.800
The name is used everywhere, right?

21
00:01:01.800 --> 00:01:04.330
Literally, people say APIs, and
they're not just talking about servers.

22
00:01:04.330 --> 00:01:06.530
They're talking about, well,
what's the API for your component?

23
00:01:06.530 --> 00:01:07.940
What's the API for this function?

24
00:01:07.940 --> 00:01:10.670
What's the API for your GitHub library?

25
00:01:10.670 --> 00:01:13.030
What's the API for your developer tool?

26
00:01:13.030 --> 00:01:14.680
Literally, it's used everywhere.

27
00:01:14.680 --> 00:01:16.589
But in this context,
we're gonna be talking about servers.

28
00:01:17.960 --> 00:01:21.810
Like I said, it's usually a server
on some remote machine that dictates

29
00:01:21.810 --> 00:01:24.460
how another application can
interact with some data.

30
00:01:24.460 --> 00:01:29.350
Right, so if you have a front end client,
like a react app or an angular app, and

31
00:01:29.350 --> 00:01:33.380
you want to interact with some
data on the database over here,

32
00:01:33.380 --> 00:01:35.770
the API determines how
you interact with it.

33
00:01:35.770 --> 00:01:36.800
Like, what are the format?

34
00:01:36.800 --> 00:01:37.630
What are the routes?

35
00:01:37.630 --> 00:01:38.470
What are the verbs?

36
00:01:38.470 --> 00:01:39.770
What are the headers?

37
00:01:39.770 --> 00:01:41.340
What are the query params?

38
00:01:41.340 --> 00:01:44.050
The API is determining that, so

39
00:01:44.050 --> 00:01:47.300
it's the interface of how
you interact with that data.

40
00:01:47.300 --> 00:01:53.300
So usually most APIs their interface is
built around what I like to call CRUD or

41
00:01:53.300 --> 00:01:54.620
what other people call CRUD.

42
00:01:54.620 --> 00:01:57.230
Which is short for Create,
Read, Update, and Destroy, so

43
00:01:57.230 --> 00:01:59.410
if we have data sitting on a database.

44
00:01:59.410 --> 00:02:04.160
We want to do operations, we want to
create new data so, for instance, I wanna.

45
00:02:04.160 --> 00:02:06.310
When someone signs up
I'm creating a new user.

46
00:02:06.310 --> 00:02:09.130
I wanna be able to read that data as in

47
00:02:09.130 --> 00:02:12.170
I have a page on my [INAUDIBLE]
app that shows the user settings.

48
00:02:12.170 --> 00:02:14.660
So I need to read that user and
pull it down.

49
00:02:14.660 --> 00:02:18.980
I have an update where I'm gonna update
the email or the password of this user.

50
00:02:18.980 --> 00:02:21.870
And then I have a destroy,
which is deleting this user's account.

51
00:02:21.870 --> 00:02:25.140
So, it's the usual operations
that people want to perform or

52
00:02:25.140 --> 00:02:29.960
applications want to perform on a
database, so the API because it's sitting

53
00:02:29.960 --> 00:02:34.900
in front of the database, and it's the
layer between the client and the database.

54
00:02:34.900 --> 00:02:39.700
It has to allow you to perform
those operations somehow.

55
00:02:39.700 --> 00:02:41.500
And there's a lot of ways to do it.

56
00:02:41.500 --> 00:02:44.570
The one we're gonna be talking about
today is gonna be called REST.

57
00:02:44.570 --> 00:02:46.090
That's the interface that
we're gonna be describing.

