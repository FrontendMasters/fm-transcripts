WEBVTT

1
00:00:00.070 --> 00:00:04.016
&gt;&gt; Scott Moss: So now we're gonna talk
about Node.js and how it works with APIs.

2
00:00:04.016 --> 00:00:09.260
So basically, Node.js is built for

3
00:00:09.260 --> 00:00:12.820
high concurrent APIs that
are not CPU intensive.

4
00:00:13.970 --> 00:00:15.880
So what exactly does that mean?

5
00:00:15.880 --> 00:00:20.290
Well one, Node.js is JavaScript, so
it's async and it's event driven.

6
00:00:20.290 --> 00:00:23.940
That allows it to take on a lot
of high concurrent requests.

7
00:00:23.940 --> 00:00:26.841
Because it is a bit driven
when requests do come in,

8
00:00:26.841 --> 00:00:30.416
they get sent off to the bit loop
to be handled asynchronously,

9
00:00:30.416 --> 00:00:34.539
so that way you can register more
requests so it is very high concurrent.

10
00:00:34.539 --> 00:00:39.506
But because it is single threaded,
It's not gonna be great for

11
00:00:39.506 --> 00:00:41.389
CPU intensive things.

12
00:00:41.389 --> 00:00:45.342
So you're not gonna be doing
things like machine learning and

13
00:00:45.342 --> 00:00:49.599
that type of stuff, you could and
you can optimize like I put here,

14
00:00:49.599 --> 00:00:54.050
you can definitely optimize it for
it not be single threaded.

15
00:00:54.050 --> 00:00:57.277
But, you're probably better off
using something like Python or

16
00:00:57.277 --> 00:01:00.339
something like that to do some
big CPU intensive operations.

17
00:01:01.930 --> 00:01:02.870
When you do keep,

18
00:01:02.870 --> 00:01:06.780
like I said when you keep node async, it
can handle a lot of concurrent requests.

19
00:01:06.780 --> 00:01:09.540
And the key here is that
you do keep it async.

20
00:01:09.540 --> 00:01:10.530
You could block node.

21
00:01:10.530 --> 00:01:12.890
For instance if you put a while
loop that takes forever to execute,

22
00:01:14.020 --> 00:01:17.850
nobody's gonna be able to register
anymore requests on your api.

23
00:01:17.850 --> 00:01:20.990
Because you're still in a while
loop on request number one.

24
00:01:20.990 --> 00:01:23.560
And you have like 100 requests
per second coming in.

25
00:01:23.560 --> 00:01:25.260
They're not gonna be registered
because you're blocking

26
00:01:26.500 --> 00:01:29.200
JavaScript with this while loop,
cuz it's a single thread.

27
00:01:29.200 --> 00:01:33.830
So you gotta be careful of how you
actually, or what you actually do in node,

28
00:01:33.830 --> 00:01:35.520
and try to keep everything asynchronous.

29
00:01:37.550 --> 00:01:41.490
And like I said, it's not great for CPU
intensive work, so although yes, there's

30
00:01:41.490 --> 00:01:45.960
tensored flow.js and all this stuff in
JavaScript, you can totally do it in node.

31
00:01:45.960 --> 00:01:49.750
And because it's getting better and
better, and spitting up a new CPU at a new

32
00:01:49.750 --> 00:01:53.020
machine in a cloud is like basically
free now, you can totally do it.

33
00:01:53.020 --> 00:01:55.600
But it is definitely not designed for
that.

34
00:01:55.600 --> 00:01:57.410
And there might be better tools.

35
00:01:57.410 --> 00:01:58.990
Really depends on what you want to do.

36
00:01:58.990 --> 00:02:01.580
I mean, nowadays you can do
machine learning in a browser.

37
00:02:01.580 --> 00:02:04.240
I think they have TensorFlow
in a browser now, so.

38
00:02:04.240 --> 00:02:05.510
Who am I to say you can't do it,

39
00:02:05.510 --> 00:02:07.720
but I'm just letting you
know what it was built for.

40
00:02:07.720 --> 00:02:08.520
What it's intended for.

41
00:02:09.640 --> 00:02:12.160
Yeah, and there's just a lot of
open source stuff out there.

42
00:02:12.160 --> 00:02:16.940
Literally, there is so
many open source tools for APIs and

43
00:02:16.940 --> 00:02:18.290
node, it's kinda ridiculous.

44
00:02:18.290 --> 00:02:20.220
We're just gonna be talking about one,
Express.

45
00:02:20.220 --> 00:02:21.420
But there's so many of them.

46
00:02:21.420 --> 00:02:24.920
Most of them are actually based off
Express, but there is a lot of them,

47
00:02:24.920 --> 00:02:26.212
and that's just true.

48
00:02:26.212 --> 00:02:28.240
With anything in node,
there's just a lot of packages and

49
00:02:28.240 --> 00:02:32.274
a lot of libraries, but when it comes
to APIs, there is this overflow amount.

