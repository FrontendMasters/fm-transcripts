WEBVTT

1
00:00:00.040 --> 00:00:06.200
&gt;&gt; Scott Moss: For read,
I talked about find, findOne and findById.

2
00:00:06.200 --> 00:00:08.660
So if I were to do,

3
00:00:08.660 --> 00:00:13.215
I'll just do a console.log here
within a wait, so magical.

4
00:00:13.215 --> 00:00:19.920
Item.findById, then,

5
00:00:19.920 --> 00:00:22.970
I could pass the ID of
this item right here.

6
00:00:22.970 --> 00:00:29.850
So I'll say item._id like that.

7
00:00:29.850 --> 00:00:30.468
Get rid of this log.

8
00:00:33.344 --> 00:00:35.736
&gt;&gt; Scott Moss: And I'll do a .exec.

9
00:00:35.736 --> 00:00:40.780
So the .exec, basically.

10
00:00:40.780 --> 00:00:42.770
What this does is, it's kinda tricky,

11
00:00:42.770 --> 00:00:46.850
because mongoose returns
these fake promises.

12
00:00:46.850 --> 00:00:51.880
They aren't real promises, they just have
.then functionality at the end of them,

13
00:00:51.880 --> 00:00:56.080
but they're not real promises,
.exec, which is short for

14
00:00:56.080 --> 00:00:58.500
execute, turns it into a real promise.

15
00:00:58.500 --> 00:01:00.980
So I have to do .exec here to
make sure it's a real promise, so

16
00:01:00.980 --> 00:01:02.620
it doesn't have any issues.

17
00:01:02.620 --> 00:01:07.136
Also, because mongoose allows you to do
tons of different querying after this, so

18
00:01:07.136 --> 00:01:09.986
you could do .where,
.limit, .all this stuff.

19
00:01:09.986 --> 00:01:12.220
And .exec is just like I'm done.

20
00:01:12.220 --> 00:01:16.200
I'm not adding anymore query parameters to
this, so that's why I have a .exec there.

21
00:01:16.200 --> 00:01:18.184
So I'll log that, build it.

22
00:01:21.533 --> 00:01:25.680
&gt;&gt; Scott Moss: And again,
I was able to find that one by ID.

23
00:01:25.680 --> 00:01:26.760
So that's that.

24
00:01:26.760 --> 00:01:31.330
If I change this to just say find,
and give it no parameters,

25
00:01:31.330 --> 00:01:37.700
it'll find every single one of them, which
in this case, should be like a couple.

26
00:01:38.750 --> 00:01:41.810
So looks like we have,
yeah, like three or four.

27
00:01:41.810 --> 00:01:44.790
So it sent back an array of them,
so that's fine.

28
00:01:44.790 --> 00:01:45.870
So that's the R for read.

29
00:01:45.870 --> 00:01:51.274
And then, we have update,
so you got model.update,

30
00:01:51.274 --> 00:01:55.990
findByIdAndUpdate, and findOneAndUpdate.

31
00:01:55.990 --> 00:02:00.454
The thing about update,
is that what you'll have to do,

32
00:02:00.454 --> 00:02:02.506
is let me write this here.

33
00:02:05.865 --> 00:02:08.621
&gt;&gt; Scott Moss: Because rest,
when you do an update on res,

34
00:02:08.621 --> 00:02:11.910
the response is expecting
back the updated object.

35
00:02:11.910 --> 00:02:15.580
So you wanna get the updated
object back that was just updated.

36
00:02:15.580 --> 00:02:19.620
So mongoose doesn't do that by default,
so you gotta tell it to.

37
00:02:19.620 --> 00:02:23.640
So if I want the updated one,
I could do item.find.

38
00:02:23.640 --> 00:02:25.650
In this case, we'll do findByIdAndUpdate.

39
00:02:29.100 --> 00:02:31.725
So the first parameter's gonna be the Id
that we want in this case it's gonna be

40
00:02:31.725 --> 00:02:33.960
item.Id, cuz that's the one
that was created up here.

41
00:02:35.640 --> 00:02:37.830
And then, the second parameter's
what we wanna update.

42
00:02:37.830 --> 00:02:45.330
So let's change the name to eat, and
then, that's it as far as requirements.

43
00:02:45.330 --> 00:02:47.400
But the third option one that
you should definitely pass,

44
00:02:47.400 --> 00:02:51.810
because rest wants back the updated
object, is you have to put new true.

45
00:02:51.810 --> 00:02:55.340
And what that means, is this goes away.

46
00:02:55.340 --> 00:02:59.520
What new true means,
is return the new object that was updated.

47
00:02:59.520 --> 00:03:00.790
That's what it means.

48
00:03:00.790 --> 00:03:05.490
New true, if you don't put new true,
it will just return the update,

49
00:03:05.490 --> 00:03:08.250
what field are updated and
not the whole object.

50
00:03:08.250 --> 00:03:11.490
Or I'm sorry, it'll return
the object before it was update,

51
00:03:11.490 --> 00:03:12.730
that's what it would return.

52
00:03:12.730 --> 00:03:13.690
We don't want that, so

53
00:03:13.690 --> 00:03:16.350
we wouldn't have the updates applied
to it that you just update it,

54
00:03:16.350 --> 00:03:20.740
it will have the object before it got
updates, which is not what you want.

55
00:03:20.740 --> 00:03:22.730
Because if your client was
expecting the updated object,

56
00:03:22.730 --> 00:03:25.230
it would not get back those right fields.

57
00:03:25.230 --> 00:03:28.080
So you wanna put new true there, so
that'll give you an updated object.

58
00:03:29.660 --> 00:03:32.692
If I did that,
&gt;&gt; Scott Moss: Or,

59
00:03:35.109 --> 00:03:39.701
&gt;&gt; Scott Moss: Console.log(updated),

60
00:03:42.555 --> 00:03:45.954
&gt;&gt; Scott Moss: Looks like we,

61
00:03:47.000 --> 00:03:51.967
I forgot to put an await

62
00:03:51.967 --> 00:03:56.690
there, there we go.

63
00:03:56.690 --> 00:04:00.060
So we got back to updated
one with the name so

64
00:04:00.060 --> 00:04:02.790
that's gonna be the U for updating CRUD.

65
00:04:02.790 --> 00:04:03.820
And again, there's other ones.

66
00:04:03.820 --> 00:04:05.540
Update, which allows you
to update many of them.

67
00:04:06.630 --> 00:04:10.470
FindByIdAndUpdate is one that we just did,
which takes an Id and updates it.

68
00:04:10.470 --> 00:04:13.490
And then, findOne is like findById,

69
00:04:13.490 --> 00:04:17.880
except for, instead of taking an Id,
it takes a list of things.

70
00:04:17.880 --> 00:04:22.470
So if I wanted to update, or
one that had the name of cleanup,

71
00:04:22.470 --> 00:04:25.806
it'll find out when an updated, instead.

72
00:04:25.806 --> 00:04:28.170
But this is where you
get into indexing stuff.

73
00:04:28.170 --> 00:04:30.870
So you wanna make sure you have
an appropriate index for that.

74
00:04:30.870 --> 00:04:35.510
So, and then, for a delete, we have,

75
00:04:35.510 --> 00:04:39.210
it's exactly the same as update,
except for, it's just, our remove.

76
00:04:39.210 --> 00:04:45.040
So we got .remove, this should be findById
and remove, and then, findOne and remove.

77
00:04:45.040 --> 00:04:47.660
So we'll just do the findById and
remove here.

78
00:04:47.660 --> 00:04:52.380
So if I got this,
I'll just change this to remove.

79
00:04:52.380 --> 00:04:56.510
So I'm gonna remove that, I don't need a
second argument, I don't need a new true.

80
00:04:56.510 --> 00:04:57.880
I'll just remove this.

81
00:04:57.880 --> 00:05:01.404
And now,
we'll just change that to removed.

82
00:05:05.659 --> 00:05:06.159
&gt;&gt; Scott Moss: And I build it.

83
00:05:08.816 --> 00:05:12.232
&gt;&gt; Scott Moss: And then, boom, you can see
it went ahead and sent back the one that

84
00:05:12.232 --> 00:05:16.180
it removed from the database, so
that one will no longer be in there.

85
00:05:16.180 --> 00:05:21.190
So that's the crud methods that you
would perform using the mongo models,

86
00:05:21.190 --> 00:05:24.810
inside the controllers, that combine
with the routes and the verbs.

87
00:05:24.810 --> 00:05:29.960
So for instance, if we had a git request
to /user, or, that's not a good one,

88
00:05:29.960 --> 00:05:33.570
let's say, a git request to /item,
that means you wanna get all items.

89
00:05:33.570 --> 00:05:37.120
You wanna get many items,
cuz it's not /id, which is get one ID.

90
00:05:37.120 --> 00:05:37.620
Yes?

91
00:05:38.930 --> 00:05:41.090
&gt;&gt; Speaker 2: So
did it remove the one for,

92
00:05:41.090 --> 00:05:44.695
is it sending back
the object that got removed?

93
00:05:44.695 --> 00:05:45.195
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Speaker 2: Okay.

94
00:05:45.195 --> 00:05:46.267
&gt;&gt; Scott Moss: It's sending back

95
00:05:46.267 --> 00:05:48.210
the object.
&gt;&gt; Speaker 2: Before it gets removed?

96
00:05:48.210 --> 00:05:49.820
&gt;&gt; Scott Moss: Before it gets removed,
yes.

97
00:05:49.820 --> 00:05:52.360
Yeah, cuz once it's removed,
it's gone, it's no longer there.

98
00:05:52.360 --> 00:05:55.930
So it's like, here you go,
which is exactly what arrest wants, or

99
00:05:55.930 --> 00:05:56.754
at least an ID.

100
00:05:56.754 --> 00:06:01.007
You, at least need an ID back on most
applications, cuz you might have some

101
00:06:01.007 --> 00:06:05.600
state management on the application,
like redux, or whatever you're using,

102
00:06:05.600 --> 00:06:09.380
Narwhal, NGRX, and you need to
remove it from your local cache.

103
00:06:09.380 --> 00:06:11.600
And you're probably storing things by IDs.

104
00:06:11.600 --> 00:06:13.611
So you need an ID, at least,
to be able to remove it.

