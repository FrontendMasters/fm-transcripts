WEBVTT

1
00:00:00.328 --> 00:00:04.353
&gt;&gt; Scott Moss: So we talked about
how middleware order matters, right,

2
00:00:04.353 --> 00:00:08.211
and you saw my example where
I had these up here first, so

3
00:00:08.211 --> 00:00:11.098
they ran in front of our routes down here.

4
00:00:11.098 --> 00:00:12.930
And that's because, yes, they were on top.

5
00:00:12.930 --> 00:00:17.670
So not only do middleware order matter,
but route definition order matters, too.

6
00:00:17.670 --> 00:00:22.380
So if I had two that matched
the exact same thing, for instance,

7
00:00:22.380 --> 00:00:26.566
app.get, and I do another one down here,
in this case,

8
00:00:26.566 --> 00:00:30.512
let's say I send back 1,
in this case I send back 2.

9
00:00:30.512 --> 00:00:33.046
If we were to run this,
let me get rid of this right quick.

10
00:00:38.925 --> 00:00:41.811
&gt;&gt; Scott Moss: Cool, so if we run this and

11
00:00:41.811 --> 00:00:46.487
we hit that,
&gt;&gt; Scott Moss: I got rid of the data.

12
00:00:46.487 --> 00:00:48.090
There we go.

13
00:00:48.090 --> 00:00:50.840
&gt;&gt; Scott Moss: We get back to data 1,
right?

14
00:00:50.840 --> 00:00:53.080
Because that was the first
one that matched.

15
00:00:53.080 --> 00:00:57.991
Even though they're both the same, this
one matched first, so it was executed.

16
00:00:57.991 --> 00:01:02.044
Now if you were to get crazy, [LAUGH]
this will show you how the line between

17
00:01:02.044 --> 00:01:05.050
controllers and
middleware are basically nothing.

18
00:01:06.400 --> 00:01:11.976
If I were to do a next in here, for
some reason, instead of responding, I did

19
00:01:11.976 --> 00:01:17.236
a next, I'm just gonna get rid of that,
&gt;&gt; Scott Moss: What

20
00:01:17.236 --> 00:01:18.695
do you think would happen?

21
00:01:20.188 --> 00:01:23.094
&gt;&gt; Scott Moss: [LAUGH]
&gt;&gt; Speaker 2: [INAUDIBLE] my guess it will

22
00:01:23.094 --> 00:01:24.350
go to two, but.

23
00:01:24.350 --> 00:01:24.850
&gt;&gt; Scott Moss: Let's see.

24
00:01:26.540 --> 00:01:27.370
I like the way you think.

25
00:01:27.370 --> 00:01:29.300
Yeah, it goes to the next one.

26
00:01:29.300 --> 00:01:30.060
It goes to 2.
It goes to

27
00:01:30.060 --> 00:01:32.450
the next one that matches, right?

28
00:01:32.450 --> 00:01:36.410
So that's why I was like middleware and
controls are basically the same thing,

29
00:01:36.410 --> 00:01:37.880
it's just the intent are different.

30
00:01:37.880 --> 00:01:40.470
But as far as Express is concerned,
it's the same thing.

31
00:01:40.470 --> 00:01:43.210
They take a request,
a response and the next object.

32
00:01:43.210 --> 00:01:46.850
And you either respond,
throw an error or you call it next.

33
00:01:46.850 --> 00:01:49.000
Those are basically your
three options there.

34
00:01:49.000 --> 00:01:53.090
It's just that middleware, its intent
is not to respond, it's to go next.

35
00:01:53.090 --> 00:01:55.890
So if I just put next here,
it's gonna go here.

36
00:01:55.890 --> 00:01:57.248
You should never do this.

37
00:01:57.248 --> 00:01:59.461
I don't know,
[LAUGH] if you saw this in your code,

38
00:01:59.461 --> 00:02:03.330
you should just find the person that
did it and have a sit down with them.

39
00:02:03.330 --> 00:02:07.311
Tell them not to do this,
because [LAUGH] this is very confusing.

40
00:02:07.311 --> 00:02:09.090
This should be middleware, instead.

41
00:02:09.090 --> 00:02:10.176
You wouldn't make this a route.

42
00:02:10.176 --> 00:02:15.130
If this thing was literally doing nothing
but calling next first, get rid of it.

43
00:02:15.130 --> 00:02:18.460
But if it was doing something and
not responding, it shouldn't be a route.

44
00:02:18.460 --> 00:02:21.938
It should be a middleware that you
register on a route somewhere so

45
00:02:21.938 --> 00:02:23.149
it's easier to read.

46
00:02:27.187 --> 00:02:28.280
&gt;&gt; Scott Moss: Any questions on that?

47
00:02:30.020 --> 00:02:31.940
So, yeah, order does matter,
top to bottom.

