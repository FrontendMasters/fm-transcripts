WEBVTT

1
00:00:00.000 --> 00:00:03.300
&gt;&gt; Scott Moss: So we'll talk about
how to actually end, or finalize,

2
00:00:03.300 --> 00:00:03.860
some of those things.

3
00:00:03.860 --> 00:00:09.890
So what we'll do is we'll go over to,
let's go to one of our routers.

4
00:00:09.890 --> 00:00:12.780
Let's go to the item router here.

5
00:00:12.780 --> 00:00:17.305
So if you're in the item router,
&gt;&gt; Scott Moss: Let's talk about

6
00:00:17.305 --> 00:00:18.170
some of these.

7
00:00:18.170 --> 00:00:20.750
So I'm gonna make some controllers
here inside the get request.

8
00:00:20.750 --> 00:00:22.960
So I'll say request and response.

9
00:00:24.020 --> 00:00:27.510
And we'll just talk about how to do
some stuff inside this controller.

10
00:00:27.510 --> 00:00:32.085
So we already looked at this response
object and it got some stuff on it like we

11
00:00:32.085 --> 00:00:36.674
used res.send before which allows us
to send some types of arbitrary data.

12
00:00:36.674 --> 00:00:39.740
We have a lot over here on the response
object that we could use inside of our

13
00:00:39.740 --> 00:00:40.340
controller.

14
00:00:41.400 --> 00:00:43.949
One of the most useful ones
is gonna be res.status.

15
00:00:43.949 --> 00:00:48.880
This is new to Express, or
I wouldn't say new, but it's newer.

16
00:00:48.880 --> 00:00:53.380
But this allows us to
set the status code of

17
00:00:53.380 --> 00:00:55.030
the response that we wanna send back,
right?

18
00:00:55.030 --> 00:00:58.328
So if we wanted to do a 200,
if we wanted to say it was a 404,

19
00:00:58.328 --> 00:01:00.118
we could do whatever we want here.

20
00:01:00.118 --> 00:01:02.730
So this allows us to set that status code.

21
00:01:02.730 --> 00:01:07.660
We're not responding, we're just
setting the code before we respond.

22
00:01:07.660 --> 00:01:13.920
Any time you wanted to end this response
you could just do .end like that.

23
00:01:13.920 --> 00:01:15.460
Even right on the response object itself.

24
00:01:15.460 --> 00:01:17.810
You're gonna say,
just end this and it'll stop.

25
00:01:17.810 --> 00:01:19.040
It'll just cancel the requests.

26
00:01:19.040 --> 00:01:20.060
So at any point you could do that.

27
00:01:20.060 --> 00:01:22.390
There'd be no message that's sent back or
anything.

28
00:01:22.390 --> 00:01:22.990
You'll just end it.

29
00:01:24.010 --> 00:01:25.390
But status is a good one.

30
00:01:25.390 --> 00:01:26.290
It's chainable.

31
00:01:26.290 --> 00:01:29.890
It always returns the response object
itself so that way we can chain it with

32
00:01:29.890 --> 00:01:34.630
a .end like this or, from what you've
been using, you could do a .send.

33
00:01:34.630 --> 00:01:37.050
So if you want to send
back a message after

34
00:01:38.060 --> 00:01:41.630
it was 404 of whatever you wanted to do,
not found, you could do that.

35
00:01:44.010 --> 00:01:47.950
Set whatever status you want here, so
status is a good one, send is pretty good.

36
00:01:47.950 --> 00:01:50.670
Send is smart enough to know, well,

37
00:01:50.670 --> 00:01:55.190
it attempts to figure out what
type of data you're sending it.

38
00:01:55.190 --> 00:01:59.450
Whether it's JSON, whether it's string,
whether it's some type of file,

39
00:01:59.450 --> 00:02:02.417
it tries to get smart about it but
it's not the best, so

40
00:02:02.417 --> 00:02:04.371
there are explicit ways to do that.

41
00:02:04.371 --> 00:02:08.215
So for instance we can just do .json,
which is explicitly saying I want to

42
00:02:08.215 --> 00:02:11.811
send back some json, and
it'll set the appropriate json headers and

43
00:02:11.811 --> 00:02:14.170
stuff like that to make
sure you send it back.

44
00:02:15.240 --> 00:02:19.020
But most of the time, because this is
an API server that's always serving json,

45
00:02:19.020 --> 00:02:22.190
you can do .send and it's smart enough
to know that you're sending back json so

46
00:02:22.190 --> 00:02:24.190
it'll convert it to json to figure it out.

47
00:02:24.190 --> 00:02:27.190
But if you were serving static assets or
anything like that with

48
00:02:27.190 --> 00:02:31.414
no real experience, which I highly don't
recommend, then you couldn't do dot send.

49
00:02:31.414 --> 00:02:35.020
And you have to set the mime type, you
might have to set some different headers.

50
00:02:35.020 --> 00:02:39.120
That way the browsers and other
clients can read those type of files.

51
00:02:39.120 --> 00:02:42.530
You can't send back a JavaScript
file as a string and

52
00:02:42.530 --> 00:02:46.770
not set the type to JavaScript,
then the browser can't read it.

53
00:02:46.770 --> 00:02:48.130
So you have to set those mine types.

54
00:02:51.840 --> 00:02:57.030
And then the other thing is after
you send back a response, you can,

55
00:02:57.030 --> 00:02:59.460
I mean I didn't put a return here.

56
00:02:59.460 --> 00:03:03.774
So because I didn't put a return here,
there's nothing stopping you for

57
00:03:03.774 --> 00:03:05.800
writing more code underneath it.

58
00:03:05.800 --> 00:03:08.850
The only problem is Express is
not expecting you to do that.

59
00:03:08.850 --> 00:03:13.880
So if you do add some more code underneath
it you almost likely will have some bugs.

60
00:03:13.880 --> 00:03:16.050
And if you're intentionally doing
it because you think you're doing

61
00:03:16.050 --> 00:03:19.080
something clever, don't do that [LAUGH].

62
00:03:19.080 --> 00:03:23.530
So get in the habit of thinking
of a response as a retur.

63
00:03:23.530 --> 00:03:25.350
And it's like there's nothing after this.

64
00:03:25.350 --> 00:03:26.120
This is it.

65
00:03:26.120 --> 00:03:28.600
If you have some if statements and
some branches, that's cool, but

66
00:03:28.600 --> 00:03:30.810
at any point after this,
just don't do anything.

67
00:03:30.810 --> 00:03:35.110
In fact, you can have this put in your
return here if that helps you feel better.

68
00:03:35.110 --> 00:03:37.850
But yeah, there's nothing stopping
you from like going here.

69
00:03:37.850 --> 00:03:41.420
Like some people, this is where they
will like, I'm gonna get clever and

70
00:03:41.420 --> 00:03:42.860
like after I send back a response,

71
00:03:42.860 --> 00:03:47.010
this is where I want to do my analytics
and stuff like that, that's cool.

72
00:03:47.010 --> 00:03:49.740
There's some scenarios where I can think
of where you would right code after you

73
00:03:49.740 --> 00:03:50.820
send back a response.

74
00:03:50.820 --> 00:03:53.410
Like if you were responding to web hooks.

75
00:03:53.410 --> 00:03:55.500
Right cuz if you're
getting let's say stripes,

76
00:03:55.500 --> 00:03:59.200
stripe is sending you web hooks for
payment information from your clients.

77
00:03:59.200 --> 00:04:01.200
Like updates on their
payments information.

78
00:04:01.200 --> 00:04:04.640
When you have a server that responds to
webhooks, you have to reply immediately.

79
00:04:04.640 --> 00:04:08.820
You don't want the webhook sender waiting
for you to process their webhook, for

80
00:04:08.820 --> 00:04:09.630
you to respond to them.

81
00:04:09.630 --> 00:04:12.870
So as soon as you get an incoming request
from webhook, you're like, cool, I got it.

82
00:04:12.870 --> 00:04:14.680
And then you wanna continue
to do what you were doing.

83
00:04:14.680 --> 00:04:17.042
So that's one example I could
think of where you would do that,

84
00:04:17.042 --> 00:04:19.450
is you wanna hear the respond immediately,
but then go ahead and

85
00:04:19.450 --> 00:04:22.280
process what you were going
to do with that webhook.

86
00:04:22.280 --> 00:04:23.690
So that's a good example.

87
00:04:23.690 --> 00:04:28.975
Another good example is, actually, that's
the only good example I can think of,

88
00:04:28.975 --> 00:04:31.807
[LAUGH], I wouldn't do that anywhere else.

89
00:04:31.807 --> 00:04:34.380
It's very complicated, for
somebody to look at and

90
00:04:34.380 --> 00:04:36.040
kinda understand what's going on.

91
00:04:36.040 --> 00:04:41.500
Especially when you start doing
stuff like this, not that, but this.

92
00:04:41.500 --> 00:04:43.190
Now, you added a next() after there,
it's like,

93
00:04:43.190 --> 00:04:47.645
okay Whats really happening,like I
cant tell whats happening there.

94
00:04:47.645 --> 00:04:50.503
So, you get problems.

95
00:04:50.503 --> 00:04:53.526
The other thing is,
once you send back a response, for

96
00:04:53.526 --> 00:04:57.339
a request, and you try to send back
another response right after it,

97
00:04:57.339 --> 00:05:00.847
you'll get error from express
saying response already sent.

98
00:05:00.847 --> 00:05:04.190
So you cant send it again .It will
just tell you, you already did that.

99
00:05:04.190 --> 00:05:04.940
Can't do it again.

100
00:05:06.090 --> 00:05:08.550
So, just be careful of that.

101
00:05:08.550 --> 00:05:10.370
That's a big gotcha that
I run into all the time.

102
00:05:12.770 --> 00:05:14.130
Any questions on the response of it?

103
00:05:19.404 --> 00:05:21.530
&gt;&gt; Scott Moss: No, okay, cool.

104
00:05:21.530 --> 00:05:25.250
And again, there is this a lot more
stuff here that's appropriate for

105
00:05:25.250 --> 00:05:29.580
different other types of APIs, and
might be appropriate for JSON APIs, but

106
00:05:29.580 --> 00:05:33.720
for most of the time, you're just gonna be
setting a status, setting back a payload,

107
00:05:33.720 --> 00:05:35.850
and that's about it.

108
00:05:35.850 --> 00:05:37.250
Not really gonna do anything else.

109
00:05:37.250 --> 00:05:41.530
Like I said, I wouldn't recommend doing
a static asset server in JavaScript.

110
00:05:41.530 --> 00:05:45.110
If you think that's a good idea, talk
to me, and I'll tell you why it's not.

