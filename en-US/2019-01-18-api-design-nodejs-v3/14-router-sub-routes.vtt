WEBVTT

1
00:00:00.090 --> 00:00:03.298
&gt;&gt; Scott Moss: And then for abstraction,
which is what we're gonna be doing here,

2
00:00:03.298 --> 00:00:04.916
is that we can create sub routers.

3
00:00:04.916 --> 00:00:07.578
So everything up to this point,
we've just been creating,

4
00:00:07.578 --> 00:00:09.050
everything on the router level.

5
00:00:09.050 --> 00:00:13.950
But because we have, we're gonna have many
different resources for our REST API,

6
00:00:13.950 --> 00:00:18.500
we can create sub routers, which allows
a different part of our API to have its

7
00:00:18.500 --> 00:00:20.910
own router, its own middleware stack.

8
00:00:20.910 --> 00:00:23.050
It's own everything and

9
00:00:23.050 --> 00:00:26.220
whether it's an opt in to inherit
from a parent router or not.

10
00:00:26.220 --> 00:00:28.600
So it's, you can think of
it as just a nested router.

11
00:00:28.600 --> 00:00:33.750
Or, if you think of routes as a tree, this
is just a branch on that route, basically.

12
00:00:33.750 --> 00:00:35.220
It's just its own branch.

13
00:00:35.220 --> 00:00:37.680
It stills comes from the tree, but
it's got its own branch, its own rules,

14
00:00:37.680 --> 00:00:39.110
its own everything.

15
00:00:39.110 --> 00:00:40.980
So Express allows you
to do that very simple.

16
00:00:40.980 --> 00:00:44.040
So that allows you to,
separate your code and

17
00:00:44.040 --> 00:00:46.310
abstract it out to where
like it's pretty neat.

18
00:00:46.310 --> 00:00:50.170
And you can collocate code in certain
places if you have a folder with all your

19
00:00:50.170 --> 00:00:52.214
different resources,
which is exactly what we're gonna have.

20
00:00:52.214 --> 00:00:56.430
So it allows that to happen versus
putting every single thing in one file,

21
00:00:56.430 --> 00:00:58.730
in one route where it can get pretty,

22
00:00:58.730 --> 00:01:02.740
I mean you might have a 500 line file
full of routes, which is kinda scary.

23
00:01:02.740 --> 00:01:03.784
So this helps prevent that.

24
00:01:06.182 --> 00:01:11.470
&gt;&gt; Scott Moss: So what that looks like is,
using Express we can make a router.

25
00:01:12.710 --> 00:01:16.430
So we can just say,
I'm gonna make a router, and to do that,

26
00:01:16.430 --> 00:01:21.220
you just use Express.Router with
a capital R, and that makes a router.

27
00:01:22.650 --> 00:01:27.230
Now just how controllers and middleware
are basically the same thing except for

28
00:01:27.230 --> 00:01:27.870
the intention.

29
00:01:28.940 --> 00:01:32.520
The router and the app are,
when it comes to routing,

30
00:01:32.520 --> 00:01:34.350
they're basically the same thing.

31
00:01:34.350 --> 00:01:40.150
A router can't do things like,
listen on a port and stuff like that.

32
00:01:40.150 --> 00:01:42.080
But as far as registering routes and

33
00:01:42.080 --> 00:01:47.510
verb combinations, the router can do
the exact same thing as the app can.

34
00:01:47.510 --> 00:01:50.470
So just to show you, so
if I come down here and

35
00:01:50.470 --> 00:01:53.679
I'm just gonna make some
routes on the router.

36
00:01:53.679 --> 00:01:57.354
So I'm gonna take that router,
I'm gonna say router dot,

37
00:01:57.354 --> 00:01:59.719
let me just clean this up a little bit.

38
00:02:02.520 --> 00:02:03.860
&gt;&gt; Scott Moss: Go away.

39
00:02:03.860 --> 00:02:04.759
There we go.

40
00:02:04.759 --> 00:02:09.676
So I'm gonna say

41
00:02:09.676 --> 00:02:17.409
router.get, slash me.

42
00:02:17.409 --> 00:02:19.701
And I'm just gonna send
back some json here.

43
00:02:23.999 --> 00:02:27.320
&gt;&gt; Scott Moss: Or I'll also say, send.

44
00:02:28.360 --> 00:02:29.930
Cool.
So I said router.get/me.

45
00:02:29.930 --> 00:02:31.480
Right now, the router's disconnected.

46
00:02:31.480 --> 00:02:33.750
All I did was make a router,
and I registered a route on it.

47
00:02:33.750 --> 00:02:35.600
It won't actually do anything.

48
00:02:35.600 --> 00:02:36.815
I can't actually go to this route,

49
00:02:36.815 --> 00:02:42.480
because I have to register this router
with the route router, which is our app.

50
00:02:42.480 --> 00:02:46.550
App is always a route router, so right
now, it's just a leaf floating somewhere,

51
00:02:46.550 --> 00:02:48.360
but now, I need to attach it to the tree.

52
00:02:48.360 --> 00:02:49.150
So how do I do that?

53
00:02:49.150 --> 00:02:54.430
I need to register it with the app
somehow, and the way you do that is,

54
00:02:54.430 --> 00:02:57.100
just like middleware,
it treats it exactly the same way.

55
00:02:57.100 --> 00:02:58.300
It's called mounting, so now,

56
00:02:58.300 --> 00:03:02.490
I just need to mount this
router on this app somewhere.

57
00:03:02.490 --> 00:03:09.150
And I can do that pretty easily just
by saying, app.use which is saying,

58
00:03:09.150 --> 00:03:13.670
hey, I wanna use this middleware for
everything.

59
00:03:13.670 --> 00:03:16.700
There's no route combination here,
this is for every for

60
00:03:16.700 --> 00:03:19.150
every path, I wanna use this middleware.

61
00:03:19.150 --> 00:03:20.440
So I can do that.

62
00:03:20.440 --> 00:03:23.260
And I could just pass in a path here.

63
00:03:23.260 --> 00:03:24.848
So I'm gonna say app.use.

64
00:03:24.848 --> 00:03:27.520
I'll just say ('/api').

65
00:03:27.520 --> 00:03:30.813
So if a request comes in for
any verb that has /api on it,

66
00:03:30.813 --> 00:03:33.349
I'm gonna use this router that I created.

67
00:03:35.369 --> 00:03:36.522
&gt;&gt; Scott Moss: So
it's gonna delegate to that.

68
00:03:43.287 --> 00:03:48.316
&gt;&gt; Scott Moss: So if I go here and
I say /api/me and

69
00:03:48.316 --> 00:03:52.851
I run this, I'll get me hello.

70
00:03:55.815 --> 00:03:57.500
&gt;&gt; Scott Moss: Which is
exactly what's here.

71
00:03:57.500 --> 00:03:59.860
Because I went to /api, right?

72
00:03:59.860 --> 00:04:02.540
And just to test that,
if I don't go to /api me, I just go to me,

73
00:04:02.540 --> 00:04:07.553
I get a 404 because there
is no such thing as /me.

74
00:04:07.553 --> 00:04:12.187
There's only /api/me.

75
00:04:17.627 --> 00:04:18.347
&gt;&gt; Scott Moss: Cool on that?

76
00:04:20.980 --> 00:04:23.230
&gt;&gt; Scott Moss: Any questions
on the subrouting?

77
00:04:23.230 --> 00:04:27.300
That's basically it, and like I said, a
router has the same thing as app does, so

78
00:04:27.300 --> 00:04:30.050
if I wanted to register middleware on
the router, I could do the same thing.

79
00:04:30.050 --> 00:04:32.100
I could do router.use here.

80
00:04:32.100 --> 00:04:34.350
I could do all of that,
it's the exact same thing.

81
00:04:38.100 --> 00:04:39.480
Any questions on that?

82
00:04:39.480 --> 00:04:42.920
&gt;&gt; Speaker 2: So
why would you use router over app.get?

83
00:04:42.920 --> 00:04:43.780
&gt;&gt; Scott Moss: The reason you would use

84
00:04:43.780 --> 00:04:47.290
router is if you just didn't wanna put
everything in the same file, honestly.

85
00:04:47.290 --> 00:04:52.910
Or if you had, if some part of your API
had its own set of rules that you wanted

86
00:04:52.910 --> 00:04:56.480
to isolate just for that part of the API,
then you would make another router for it.

87
00:04:56.480 --> 00:05:01.640
For instance, let's say you had
an API that serves static assets

88
00:05:01.640 --> 00:05:06.470
that also serves json, it served this
proprietary machine learning thing.

89
00:05:06.470 --> 00:05:11.040
And the json one had a different
authentication strategy than a machine

90
00:05:11.040 --> 00:05:12.370
learning one did, right?

91
00:05:12.370 --> 00:05:15.710
So if you added the authentication
strategy as middleware to the route,

92
00:05:15.710 --> 00:05:17.810
it'll lock the whole API down.

93
00:05:17.810 --> 00:05:20.440
That's not what you want, you need
different authentication strategies for

94
00:05:20.440 --> 00:05:20.990
different things.

95
00:05:20.990 --> 00:05:25.100
So you would make another router for
this part of your API, for the json, and

96
00:05:25.100 --> 00:05:28.480
register it's authentication
strategy on it's middleware and

97
00:05:28.480 --> 00:05:31.070
then the machine learning one would have
it's authentication strategy on it's

98
00:05:31.070 --> 00:05:33.040
middleware, and
they don't conflict with each other.

99
00:05:34.570 --> 00:05:36.830
So it's like I got separate rules for
separate things, yes?

100
00:05:36.830 --> 00:05:38.110
&gt;&gt; Speaker 2: And now,
how can we, I'm just saying,

101
00:05:38.110 --> 00:05:41.290
if you have lots of pieces
combining those routes,

102
00:05:41.290 --> 00:05:46.310
how can we, I mean, how can, from any
point, can we look at the routes that are?

103
00:05:46.310 --> 00:05:47.008
&gt;&gt; Scott Moss: In what file?

104
00:05:47.008 --> 00:05:47.835
&gt;&gt; Speaker 2: [CROSSTALK], yeah.

105
00:05:47.835 --> 00:05:50.210
&gt;&gt; Scott Moss: You can't, so
you lose out on that, right?

106
00:05:50.210 --> 00:05:51.100
&gt;&gt; Speaker 2: Really?
&gt;&gt; Scott Moss: Yeah, so

107
00:05:51.100 --> 00:05:54.200
if you have, right, if you take all these
out, and you put them in different files,

108
00:05:54.200 --> 00:05:58.290
then, there's no way to look
at all of them in one place.

109
00:05:58.290 --> 00:05:59.119
So you lose out on that.

110
00:05:59.119 --> 00:06:02.219
&gt;&gt; Speaker 2: No,
I'm saying if there's a big application.

111
00:06:02.219 --> 00:06:04.879
There's only one part and you wanna make
sure you're not conflicting with anything.

112
00:06:04.879 --> 00:06:07.405
It's just like, okay, at this point,
what kinda routes are there?

113
00:06:07.405 --> 00:06:08.589
&gt;&gt; Scott Moss: I said you mean.

114
00:06:08.589 --> 00:06:10.143
There's no way a doing that either.

115
00:06:10.143 --> 00:06:10.709
&gt;&gt; Speaker 2: At them.

116
00:06:10.709 --> 00:06:12.928
Yeah Like even debug?

117
00:06:12.928 --> 00:06:15.257
&gt;&gt; Scott Moss: No,
there's no way because as we saw,

118
00:06:15.257 --> 00:06:19.079
it's just whichever's first
that is going to happen, right?

119
00:06:20.193 --> 00:06:23.334
&gt;&gt; Scott Moss: So the only way you would
run into a problem is if you started

120
00:06:23.334 --> 00:06:28.240
getting unexpected things like well,
what is that, that's not what I expected.

121
00:06:28.240 --> 00:06:30.920
It's hard to debug because it'll
just goes to the next one.

122
00:06:30.920 --> 00:06:32.450
&gt;&gt; Speaker 2: It just goes
through all those trees right?

123
00:06:32.450 --> 00:06:34.770
&gt;&gt; Scott Moss: It just goes through
the whole tree until it finds a match.

124
00:06:34.770 --> 00:06:37.060
The only time it'll error
is if there is no match.

125
00:06:37.060 --> 00:06:40.100
You'll get a 404,
like there's no match, I'm a 404 here.

126
00:06:40.100 --> 00:06:43.110
But yeah,
if you got this crazy business logic and

127
00:06:43.110 --> 00:06:46.560
you eventually have something overriding,
then yeah.

128
00:06:46.560 --> 00:06:48.940
I've never ever run into that problem.

129
00:06:48.940 --> 00:06:50.420
&gt;&gt; Speaker 2: Yeah it shouldn't happen,
but.

130
00:06:50.420 --> 00:06:54.030
&gt;&gt; Scott Moss: The way you can avoid it
is because eventually you have to tie

131
00:06:55.110 --> 00:06:57.220
the routers back to
the application somewhere.

132
00:06:57.220 --> 00:06:58.390
You have to tie them back, right?

133
00:06:58.390 --> 00:07:00.170
&gt;&gt; Speaker 2: There has to be some
other point that actually has

134
00:07:00.170 --> 00:07:01.230
the information on it.

135
00:07:01.230 --> 00:07:03.320
&gt;&gt; Scott Moss: Right, so
like right here I have the app.use /api.

136
00:07:03.320 --> 00:07:04.780
That's the mount path.

137
00:07:04.780 --> 00:07:07.950
All I know is, I just don't do this again.

138
00:07:07.950 --> 00:07:10.310
I just can't use /api now.

139
00:07:10.310 --> 00:07:13.630
If I do /api and put another router here
then I'm gonna have unexpected problems.

140
00:07:13.630 --> 00:07:16.370
So I know now I'm gonna have to
put something different here.

141
00:07:16.370 --> 00:07:18.500
And then now it doesn't matter.

142
00:07:18.500 --> 00:07:22.330
If this router had /me and another
router that I put here also had /me,

143
00:07:22.330 --> 00:07:25.950
they'll never conflict because
they have different parent paths.

144
00:07:25.950 --> 00:07:27.670
They have /diff and /api.

145
00:07:27.670 --> 00:07:31.940
So this basically, where you mount it is
kind of where you get rid of that problem.

