WEBVTT

1
00:00:00.290 --> 00:00:02.235
&gt;&gt; Scott Moss: Who here writes tests for
their code?

2
00:00:02.235 --> 00:00:09.330
[LAUGH] Nobody writes tests?

3
00:00:09.330 --> 00:00:10.091
You know what?
I'm not a fan

4
00:00:10.091 --> 00:00:10.920
of-
&gt;&gt; Scott Moss: Yeah.

5
00:00:10.920 --> 00:00:17.960
I'm not a fan of writing tests for
like front end stuff.

6
00:00:17.960 --> 00:00:19.630
Cuz it's so much stuff, but for

7
00:00:19.630 --> 00:00:21.790
back end like I literally write test for
everything.

8
00:00:21.790 --> 00:00:25.390
In fact I got to the point now where on
the back end I write all my tests first.

9
00:00:25.390 --> 00:00:28.081
Which I know it's like who does that?

10
00:00:28.081 --> 00:00:29.727
But I do.
I write all my tests first on

11
00:00:29.727 --> 00:00:30.406
the back end.

12
00:00:30.406 --> 00:00:32.930
Because it's so
easy to like think about on the back end.

13
00:00:32.930 --> 00:00:36.300
Then I write my code and
it helps me figure out what to do.

14
00:00:36.300 --> 00:00:38.970
So I love writing tests on
the back-end because it's so simple.

15
00:00:38.970 --> 00:00:41.470
So what I wanted to talk about is
we've been looking at tests and

16
00:00:41.470 --> 00:00:42.610
you've been fixing tests all day.

17
00:00:42.610 --> 00:00:46.130
I just wanted to show you what was
actually happening in this testing setup,

18
00:00:46.130 --> 00:00:48.940
so when you go out and do your own
testing setup, you'd know what's

19
00:00:48.940 --> 00:00:51.200
actually happening because I had
to do a lot to get this to work.

20
00:00:52.590 --> 00:00:55.895
One is I'm using Jest to write test.

21
00:00:55.895 --> 00:01:00.741
Jest is basically a piggy back off of
Mocha which is basically a piggy back off

22
00:01:00.741 --> 00:01:01.621
of Jasmine.

23
00:01:01.621 --> 00:01:04.430
But Jest is definitely
the best one in my opinion.

24
00:01:04.430 --> 00:01:06.640
Because it's very much like Jasmine.

25
00:01:06.640 --> 00:01:10.813
And where it comes with every single thing
you need like an assertion library and

26
00:01:10.813 --> 00:01:16.800
mocks but it's more modern and
not as bad as Jasmine.

27
00:01:16.800 --> 00:01:18.080
It just does more stuff.

28
00:01:18.080 --> 00:01:24.393
It has built-in checking of,
what do they call it.

29
00:01:24.393 --> 00:01:26.007
I can't even think of the name of it.

30
00:01:26.007 --> 00:01:29.229
Percentage checking, or
coverage, built-in coverage.

31
00:01:29.229 --> 00:01:30.760
It's got built-in mocks.

32
00:01:30.760 --> 00:01:33.280
All the way to mocking modules out
completely, it's got everything.

33
00:01:33.280 --> 00:01:36.190
It's made by Facebook so
it's pretty well-backed.

34
00:01:36.190 --> 00:01:38.030
So we're using Jest.

35
00:01:38.030 --> 00:01:43.310
And then Jest by default runs all tests.

36
00:01:43.310 --> 00:01:49.450
And when I say test I mean anything
that has a describe block,

37
00:01:49.450 --> 00:01:50.430
a top level describe block.

38
00:01:50.430 --> 00:01:53.060
It runs all of them in parallel,
at the same time.

39
00:01:53.060 --> 00:01:54.520
That's how it runs it really fast.

40
00:01:54.520 --> 00:01:55.990
But that creates issues.

41
00:01:55.990 --> 00:01:59.580
One, when you log inside of a test,
sometimes you don't see those logs.

42
00:01:59.580 --> 00:02:02.320
If you are ever logged in one of these
tests and you didn't see it pop up,

43
00:02:02.320 --> 00:02:05.830
that's because it runs it in parallel and
it may or may not show up.

44
00:02:05.830 --> 00:02:09.080
It runs them all in different
chopped processes at the same time.

45
00:02:09.080 --> 00:02:10.380
It spawns them.

46
00:02:10.380 --> 00:02:12.910
So there's a master process
from where you ran that

47
00:02:12.910 --> 00:02:15.140
every described block is
ran in a child process.

48
00:02:15.140 --> 00:02:18.800
So you're logging down here, but
you're looking right here, so

49
00:02:18.800 --> 00:02:19.880
you might not see those logs.

50
00:02:19.880 --> 00:02:23.500
Maybe, maybe not, and that's because
it runs into parallel by default.

51
00:02:23.500 --> 00:02:27.040
You can run it in serially, but
it's passing a flag to prevent that, but

52
00:02:27.040 --> 00:02:27.990
it helps, speeds it up.

53
00:02:27.990 --> 00:02:31.910
But it introduces problems,
because we write tests stateless,

54
00:02:31.910 --> 00:02:33.120
as part of our database.

55
00:02:33.120 --> 00:02:38.740
So I had to introduce a script that
connects to a different database every

56
00:02:38.740 --> 00:02:45.970
single time for every single describe
block, and then delete that database.

57
00:02:45.970 --> 00:02:47.970
So if you go look at test-db.setup,

58
00:02:47.970 --> 00:02:52.190
you'll see where I'm doing that, but
that's basically what's happening here,

59
00:02:52.190 --> 00:02:56.050
is I'm connecting a database before
every single describe block.

60
00:02:56.050 --> 00:02:57.730
That's happening in parallel and

61
00:02:57.730 --> 00:03:00.630
then I completely delete that
database after it's done.

62
00:03:00.630 --> 00:03:02.320
So for
every describe blocks you have that's

63
00:03:02.320 --> 00:03:04.220
how many databases are being created.

64
00:03:04.220 --> 00:03:09.180
That allows you to run in parallel
without having to have stateful tests

65
00:03:09.180 --> 00:03:12.750
which is basically a test knowing about
a test before it, which is really bad.

66
00:03:12.750 --> 00:03:13.430
You don't want to do that.

67
00:03:13.430 --> 00:03:14.789
It's really hard to write tests like that.

68
00:03:16.339 --> 00:03:21.575
&gt;&gt; Scott Moss: And then other thing
is everything in a __tests__ folder

69
00:03:21.575 --> 00:03:27.570
that has a spec or a .test on it
will be tested by default by Jest.

70
00:03:27.570 --> 00:03:29.360
So you don't have to do anything.

71
00:03:29.360 --> 00:03:31.780
So that's all the stuff I
had to do to get it set up.

72
00:03:31.780 --> 00:03:33.796
And there's obviously some options.

73
00:03:33.796 --> 00:03:37.480
In the packets.JSON there'll
be pass suggest to help us

74
00:03:38.490 --> 00:03:40.960
ignore certain files like the disk folder.

75
00:03:40.960 --> 00:03:43.820
Point to that setup file
that I talked about and

76
00:03:43.820 --> 00:03:46.690
make sure that we're running a node,
and that's about it.

77
00:03:46.690 --> 00:03:48.190
Everything else is just boiler plate.

78
00:03:49.380 --> 00:03:52.220
So I had to do all that to get set up.

79
00:03:52.220 --> 00:03:53.860
Other than that, tests are pretty simple.

80
00:03:53.860 --> 00:03:55.310
You don't really have to do anything else.

