WEBVTT

1
00:00:00.210 --> 00:00:02.600
&gt;&gt; Scott Moss: So using models, so
we talked about the schemas and

2
00:00:03.880 --> 00:00:06.960
the schemas creating the models,
but how do we actually use them?

3
00:00:06.960 --> 00:00:12.320
Well, like I said, mongoose models work
very nicely with CRUD, extremely nice.

4
00:00:12.320 --> 00:00:14.660
And the models are gonna be normalized.

5
00:00:14.660 --> 00:00:17.940
It doesn't matter what schema it is,
it's still gonna be the same model.

6
00:00:17.940 --> 00:00:19.470
They're still gonna have the same methods.

7
00:00:19.470 --> 00:00:20.670
It doesn't matter what
the schema looks like,

8
00:00:20.670 --> 00:00:21.960
they're gonna have
the exact same methods on.

9
00:00:21.960 --> 00:00:24.290
They're gonna work exactly the same.

10
00:00:24.290 --> 00:00:28.760
But basically, I'm just gonna break down
some methods on the mongoose models and

11
00:00:28.760 --> 00:00:29.750
how they tie into CRUD.

12
00:00:29.750 --> 00:00:31.553
So the C in CRUD, which is create,

13
00:00:31.553 --> 00:00:36.120
some of the methods you would use would
be model.create, or just use new model.

14
00:00:36.120 --> 00:00:37.550
So I'm gonna walk through
those right quick.

15
00:00:38.580 --> 00:00:43.458
So if I go into item.controller,

16
00:00:43.458 --> 00:00:47.290
which is where you're gonna be working and

17
00:00:47.290 --> 00:00:52.830
I make a create,
actually I'm not gonna do it here.

18
00:00:52.830 --> 00:00:57.130
I'll do it in, yeah, I'll just do it here.

19
00:00:57.130 --> 00:00:58.196
It's just an example.

20
00:00:58.196 --> 00:01:03.078
So if I wanted to make
a create function here,

21
00:01:03.078 --> 00:01:07.450
so I would say, import from item model.

22
00:01:10.890 --> 00:01:13.850
So if we go look here, so
the create inside of CRUD,

23
00:01:13.850 --> 00:01:16.630
we can just do model.create,
which is the one that I use the most.

24
00:01:16.630 --> 00:01:17.820
You can also do new model,

25
00:01:17.820 --> 00:01:22.390
which doesn't really create a model but
it creates one that's ready to be saved.

26
00:01:22.390 --> 00:01:29.020
So, if I wanted to make a new model,
I could just say item.create, like this.

27
00:01:29.020 --> 00:01:32.370
And then I was passing
the fields that an item needs.

28
00:01:32.370 --> 00:01:35.863
In this case, we know an item needs,
it needs a name, that's required.

29
00:01:35.863 --> 00:01:39.354
It needs a status, that's required but
it has a default so we can skip it.

30
00:01:39.354 --> 00:01:43.682
Doesn't need notes, doesn't need due date,
but it does need created by and

31
00:01:43.682 --> 00:01:45.120
it needs list.

32
00:01:45.120 --> 00:01:47.460
So we have to pass a created by,
we have to pass a list, and

33
00:01:47.460 --> 00:01:49.230
we have to pass a name.

34
00:01:49.230 --> 00:01:51.020
So I would pass all three of those here.

35
00:01:51.020 --> 00:01:53.450
And then, boom, I have an item.

36
00:01:53.450 --> 00:01:58.090
This is asynchronous, so you'd either have
to do a promise or async or wait on it.

37
00:01:58.090 --> 00:01:59.790
Yeah, it'll create it for you in database.

38
00:01:59.790 --> 00:02:03.274
So that's the C in CRUD for Mongo.

39
00:02:03.274 --> 00:02:04.520
Item.create.

40
00:02:04.520 --> 00:02:07.840
So this takes this one item that
you wanna create or any model, or

41
00:02:07.840 --> 00:02:08.770
it can take an array of them.

42
00:02:08.770 --> 00:02:17.840
So it can create many of them,
&gt;&gt; Scott Moss: Like that.

43
00:02:17.840 --> 00:02:19.120
So again, this doesn't really matter.

44
00:02:19.120 --> 00:02:21.080
If this was list,
this would work the same.

45
00:02:21.080 --> 00:02:24.500
If this was user, it would work the same.

46
00:02:24.500 --> 00:02:27.450
Now, if your validations were different,
then those would throw errors, right?

47
00:02:27.450 --> 00:02:30.020
If the user had a different validation
than the list item, then obviously,

48
00:02:30.020 --> 00:02:30.990
that wouldn't work.

49
00:02:30.990 --> 00:02:33.758
But as far as it executing,
it'll execute exactly the same.

50
00:02:36.819 --> 00:02:38.695
&gt;&gt; Scott Moss: Because that's
what the mongoose models do,

51
00:02:38.695 --> 00:02:41.690
they normalize our schemas so
that we can use them generally, like that.

52
00:02:42.730 --> 00:02:44.140
So that's for the create.

53
00:02:45.950 --> 00:02:49.240
And then next we have read in CRUD.

54
00:02:49.240 --> 00:02:50.380
So read,

55
00:02:50.380 --> 00:02:55.130
some of the methods you can use there
are gonna be find, findOne, findById.

56
00:02:55.130 --> 00:02:58.160
Those are gonna be some ones that
you're gonna be using in Mongo.

57
00:02:58.160 --> 00:03:00.420
And they're pretty simple.

58
00:03:00.420 --> 00:03:04.180
So if I wanted to find one,
actually I'm just gonna go ahead and

59
00:03:04.180 --> 00:03:07.430
run some of these in a file,
versus just virtualize them.

60
00:03:07.430 --> 00:03:08.719
So I'll just make a file down here.

61
00:03:13.569 --> 00:03:14.640
&gt;&gt; Scott Moss: Well,
I guess I can just do it in here.

62
00:03:14.640 --> 00:03:16.880
It doesn't matter.

63
00:03:16.880 --> 00:03:17.681
There we go, so.

64
00:03:27.102 --> 00:03:28.190
&gt;&gt; Scott Moss: Correct, there we go.

65
00:03:28.190 --> 00:03:29.924
So I'll make a create.

66
00:03:35.382 --> 00:03:38.175
&gt;&gt; Scott Moss: All right, let's call this.

67
00:03:41.264 --> 00:03:41.834
&gt;&gt; Scott Moss: Cool.

68
00:03:41.834 --> 00:03:47.227
So for the create, I'll just say
this is an item that we created,

69
00:03:47.227 --> 00:03:50.771
and this'll just be await item.create.

70
00:03:58.191 --> 00:04:01.787
&gt;&gt; Scott Moss: And we know we need a name,
so I'll just give it a name,

71
00:04:01.787 --> 00:04:04.068
call it Clean up, if I could type.

72
00:04:04.068 --> 00:04:09.607
And we know we needed a createdBy,
I don't have a user right now so

73
00:04:09.607 --> 00:04:14.362
I'm just gonna just put a fake
ID in there for mongoose.

74
00:04:18.331 --> 00:04:22.710
&gt;&gt; Scott Moss: Which is gonna
be mongoose.Types.ObjectId,

75
00:04:22.710 --> 00:04:25.600
which creates a fake object ID.

76
00:04:25.600 --> 00:04:28.130
And then list is the same thing.

77
00:04:28.130 --> 00:04:30.538
I don't have one, so
I'm just gonna make a fake one as well.

78
00:04:34.403 --> 00:04:35.806
&gt;&gt; Scott Moss: There we go.

79
00:04:35.806 --> 00:04:37.936
And now I will just log this.

80
00:04:40.120 --> 00:04:41.544
&gt;&gt; Scott Moss: I'll
just run this function.

81
00:04:47.264 --> 00:04:49.169
&gt;&gt; Scott Moss: Cool, so
now I wanna execute this.

82
00:04:53.524 --> 00:04:58.123
&gt;&gt; Scott Moss: Cool, so before can run
this, we need to connect to the database,

83
00:04:58.123 --> 00:05:00.880
otherwise it won't run.

84
00:05:00.880 --> 00:05:02.381
And in the utils folde,

85
00:05:02.381 --> 00:05:06.800
there is a DB file that has a connect
function that will connect for us.

86
00:05:06.800 --> 00:05:08.640
So we can just use that.

87
00:05:08.640 --> 00:05:09.780
So that's exactly what I'll do.

88
00:05:09.780 --> 00:05:14.410
I'll go over to our file
that I was writing here, and

89
00:05:14.410 --> 00:05:19.716
I'll import that
functionality from util/db,

90
00:05:19.716 --> 00:05:25.120
the connect function.

91
00:05:25.120 --> 00:05:28.340
And I'll just go ahead and await that
connection, because it is asynchronous.

92
00:05:29.950 --> 00:05:32.533
And then from there,
I'll just give it a mongo url,

93
00:05:32.533 --> 00:05:34.138
you can give it any one you want.

94
00:05:34.138 --> 00:05:35.436
Local host.

95
00:05:37.656 --> 00:05:41.540
&gt;&gt; Scott Moss: 27017.

96
00:05:41.540 --> 00:05:44.010
And then any database string.

97
00:05:45.410 --> 00:05:47.410
So once we connect, await the connection.

98
00:05:47.410 --> 00:05:50.330
If it's successful,
then we should see this thing create.

99
00:05:50.330 --> 00:05:55.520
So let's build this,
&gt;&gt; Scott Moss: And then run it.

100
00:05:57.080 --> 00:05:58.490
So looks like it ran.

101
00:05:58.490 --> 00:06:03.340
And as you can see right here,
that create method did create

102
00:06:03.340 --> 00:06:07.160
an item in the database, with our
defaults and the IDs that we passed it.

103
00:06:07.160 --> 00:06:08.930
So that's the seed for create.

