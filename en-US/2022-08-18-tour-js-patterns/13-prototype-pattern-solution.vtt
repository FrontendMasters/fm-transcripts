WEBVTT

1
00:00:00.000 --> 00:00:03.079
All right, well, I think we'll
start off with the solution for

2
00:00:03.079 --> 00:00:05.316
the prototype pattern
exercise in that case.

3
00:00:05.316 --> 00:00:08.626
I'm just gonna open this
again in stack blitz,

4
00:00:08.626 --> 00:00:13.855
I'm just gonna make the font size a bit
bigger, I hope this was big enough.

5
00:00:13.855 --> 00:00:15.626
On the prototype pattern we of course,

6
00:00:15.626 --> 00:00:19.127
first have to create the constructor
that contains all the unique elements.

7
00:00:19.127 --> 00:00:22.874
And on this create user factory function
you can see that the object that

8
00:00:22.874 --> 00:00:27.065
gets returned that first name, last name,
full name and email are all unique.

9
00:00:27.065 --> 00:00:33.139
So when we create a new class or
just do class user, the constructor,

10
00:00:33.139 --> 00:00:38.507
which again, takes all these
arguments that we had before.

11
00:00:38.507 --> 00:00:41.995
So then we have like this at first name,
this first name,

12
00:00:41.995 --> 00:00:44.258
I see that I made a syntax error here.

13
00:00:44.258 --> 00:00:49.445
I make syntax errors everywhere,
okay, this last name is last name.

14
00:00:49.445 --> 00:00:52.886
This email is email, and
then we also have a unique full name,

15
00:00:52.886 --> 00:00:54.683
which is both of them combined.

16
00:00:54.683 --> 00:01:00.301
So this step full name is, again,
I'm just gonna copy-paste this,

17
00:01:00.301 --> 00:01:03.458
this our first name and this last name.

18
00:01:03.458 --> 00:01:07.456
Now, we also have these methods on here
that are shared among all the users.

19
00:01:07.456 --> 00:01:09.608
So we don't wanna put that
on the constructor but

20
00:01:09.608 --> 00:01:11.561
instead we wanna put
that on the prototype.

21
00:01:11.561 --> 00:01:16.936
So we can do that check last online,
which logs this.

22
00:01:21.304 --> 00:01:27.065
Send email, Which logs this.

23
00:01:27.065 --> 00:01:32.597
And then lastly we have to delete,
Which is that.

24
00:01:32.597 --> 00:01:35.744
So now I can remove this function.

25
00:01:35.744 --> 00:01:40.259
And instead of calling create user,
I can just do a new user, a new user.

26
00:01:40.259 --> 00:01:44.311
So now when we log, I'm just going
to log user and user to first,

27
00:01:44.311 --> 00:01:46.576
I will show that other thing later.

28
00:01:46.576 --> 00:01:48.766
Let's see if this is all implemented,
right?

29
00:01:48.766 --> 00:01:50.786
Yeah, okay, so now we've got two users.

30
00:01:50.786 --> 00:01:55.859
Now, one thing you may notice or that's
actually pretty fun is that when we log,

31
00:01:55.859 --> 00:02:00.558
both the delete methods are like methods
that are available in both of these

32
00:02:00.558 --> 00:02:04.755
objects prototypes, or
we can check if they're strictly equal.

33
00:02:04.755 --> 00:02:07.324
So if we go to node.js,
you can see that it's true.

34
00:02:07.324 --> 00:02:13.045
Okay, now let me go back a bit.

35
00:02:13.045 --> 00:02:18.166
So here, I'm just going to fork this
again, so this should be a new one, fork.

36
00:02:18.166 --> 00:02:21.550
If we were to do that on
the factory function approach and

37
00:02:21.550 --> 00:02:23.998
we checked if they were strictly equal,

38
00:02:23.998 --> 00:02:28.393
it's false because we are creating
new functions in memory every time.

39
00:02:28.393 --> 00:02:31.837
So the reference to that
delete method is like it

40
00:02:31.837 --> 00:02:34.688
refers to a different place in memory.

41
00:02:34.688 --> 00:02:38.624
But on the prototype pattern because
it's using the same prototype, so

42
00:02:38.624 --> 00:02:41.735
it's actually all referring
to the same one it's true.

43
00:02:41.735 --> 00:02:45.590
So here you can, like clearly see okay,
we've just actually created one delete

44
00:02:45.590 --> 00:02:48.664
method instead of two whatever for
what the prototype pattern.

45
00:02:48.664 --> 00:02:52.097
So this is where the whole memory
efficiency thing comes in,

46
00:02:52.097 --> 00:02:53.388
which is pretty cool.

47
00:02:53.388 --> 00:02:55.938
So yeah, this is all we have to do
to create the prototype pattern

48
00:02:55.938 --> 00:02:56.560
for the users.

