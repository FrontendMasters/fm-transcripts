WEBVTT

1
00:00:00.064 --> 00:00:01.703
All right,
then moving on to the compound pattern,

2
00:00:01.703 --> 00:00:03.392
which is still using
the provider pattern by the way.

3
00:00:03.392 --> 00:00:06.709
So maybe also if you still have questions,
this might clear some things up.

4
00:00:06.709 --> 00:00:08.739
But with the compound pattern,

5
00:00:08.739 --> 00:00:13.789
we can create multiple components that
work together to perform a single task.

6
00:00:13.789 --> 00:00:16.236
And this is very nice to use
with the provider pattern.

7
00:00:16.236 --> 00:00:20.396
So for example here we want to click on
a search and again this opens like that,

8
00:00:20.396 --> 00:00:21.366
that search bar.

9
00:00:21.366 --> 00:00:25.855
Now essentially what happens here is that
the search bar and this kind of like fly

10
00:00:25.855 --> 00:00:30.478
outs, they all work together, like all
those components are performing a single

11
00:00:30.478 --> 00:00:34.908
task like the user clicks on the inputs
then this input shows these list items.

12
00:00:34.908 --> 00:00:38.231
So we could wrap all these
components within a provider

13
00:00:38.231 --> 00:00:42.780
that provides that data or that state,
like okay, is this list item open or

14
00:00:42.780 --> 00:00:46.049
is a list open has user clicking it and
all that stuff.

15
00:00:46.049 --> 00:00:49.209
Now often what you see with
the compound pattern and

16
00:00:49.209 --> 00:00:53.988
maybe you've used this in like component
libraries is that we can import like

17
00:00:53.988 --> 00:00:56.948
a single component or
like a visual component.

18
00:00:56.948 --> 00:01:01.262
And then we can use like dot notation
like fly dot input, fly dot list to

19
00:01:01.262 --> 00:01:06.187
conditionally render the components
that this compound component provided.

20
00:01:06.187 --> 00:01:08.343
Hope that was not too confusing.

21
00:01:08.343 --> 00:01:13.158
So for example here we have like the fly
dot inputs which I tried to make like

22
00:01:13.158 --> 00:01:15.422
here, and fly dot list list item.

23
00:01:15.422 --> 00:01:19.247
Now you can see here that we don't
have any state in the search

24
00:01:19.247 --> 00:01:23.822
input itself because that state is
contained within the flyout itself.

25
00:01:23.822 --> 00:01:28.111
So we can see kind of
the implementation here.

26
00:01:28.111 --> 00:01:31.934
And we will of course have an exercise
that also makes you do this, but so

27
00:01:31.934 --> 00:01:35.632
the fly out component here, so
that's like the parent that wraps all

28
00:01:35.632 --> 00:01:38.916
those smaller components,
that's a stateful component.

29
00:01:38.916 --> 00:01:43.770
And that provides, all right, yeah so
we create a context again like we have for

30
00:01:43.770 --> 00:01:48.334
the provider pattern, and this returns
a provider that has the open toggle

31
00:01:48.334 --> 00:01:51.521
value and set value method,
just for this example,

32
00:01:51.521 --> 00:01:55.811
of course you can pass anything,
and then that renders the children.

33
00:01:55.811 --> 00:01:59.395
Now any of those children
can use this context or

34
00:01:59.395 --> 00:02:04.323
use that consumer components to
retrieve the value of to toggle or

35
00:02:04.323 --> 00:02:10.162
to set the value to open all the values
that we provided here in this provider.

36
00:02:10.162 --> 00:02:13.739
Now the cool thing about the compound
pattern is that you can also just say like

37
00:02:13.739 --> 00:02:17.648
flyout dot input is this input component,
flyout dot list is this list component and

38
00:02:17.648 --> 00:02:21.556
that makes it super easy, yeah, to create
like those sub components because we only

39
00:02:21.556 --> 00:02:23.292
have to have like one single import.

40
00:02:23.292 --> 00:02:26.284
Like we saw here,
we can just do like import flyouts and

41
00:02:26.284 --> 00:02:30.791
we don't have to also import like flyout
input, flyout list, flyout list item.

42
00:02:30.791 --> 00:02:33.251
You don't have to do that
with a compound pattern, but

43
00:02:33.251 --> 00:02:36.409
it definitely makes it clear like okay,
this is just one component and

44
00:02:36.409 --> 00:02:39.046
all these sub components,
they just like work together.

45
00:02:39.046 --> 00:02:41.781
It's just like part of
one bigger component.

46
00:02:41.781 --> 00:02:48.813
It's not like a standalone
component on its own, yeah.

47
00:02:48.813 --> 00:02:51.143
Now here we see that we're
just rendering it right away.

48
00:02:51.143 --> 00:02:55.506
One other way that you might often see
it is using the react children map with

49
00:02:55.506 --> 00:02:56.763
the clone elements.

50
00:02:56.763 --> 00:03:02.154
So instead of directly rendering like
props of children like wrapped within that

51
00:03:02.154 --> 00:03:07.308
provider, we can also just map all the
children and directly pass the props or

52
00:03:07.308 --> 00:03:12.537
like these props the open, toggle, value,
set value the same like value that

53
00:03:12.537 --> 00:03:17.642
provided to the provider before [LAUGH]
that we now pass it directly as props.

54
00:03:17.642 --> 00:03:22.612
So you can see that here, like props and
then like on focus, on blur,

55
00:03:22.612 --> 00:03:25.546
children, all those things, so yeah.

56
00:03:28.741 --> 00:03:32.844
Let's see,
I guess this is just an example.

57
00:03:32.844 --> 00:03:35.562
Yeah, so
here we're using like it's basically

58
00:03:35.562 --> 00:03:39.488
just a real version of the example
that we saw before in the animation.

59
00:03:39.488 --> 00:03:43.326
So we have like San Francisco, Seattle,
Austin, Miami all that stuff, and

60
00:03:43.326 --> 00:03:44.934
we can easily render that here.

61
00:03:44.934 --> 00:03:49.007
So we're just importing the fly outs,
we have the fly out input and we can,

62
00:03:49.007 --> 00:03:51.409
if we want to,
we could just add more items.

63
00:03:51.409 --> 00:03:55.361
I don't know,
have multiple boulders for no reason.

64
00:03:55.361 --> 00:03:59.490
And then we have, so it's super
easy to like add new components and

65
00:03:59.490 --> 00:04:02.219
if you are using maybe
a component library or

66
00:04:02.219 --> 00:04:05.487
something, those components
are usually styled.

67
00:04:05.487 --> 00:04:10.638
You see this in like material UI,
probably many other ones as well.

68
00:04:10.638 --> 00:04:14.479
Yeah, we don't have to care about the
styling of the components or the state.

69
00:04:14.479 --> 00:04:18.361
So it's super easy to
render stateful components,

70
00:04:18.361 --> 00:04:21.548
but in a very easy, straightforward way.

71
00:04:21.548 --> 00:04:24.405
Yeah, so the trade-offs like the pros are
kind of what I just talked about having

72
00:04:24.405 --> 00:04:25.930
that single import, which is super nice.

73
00:04:25.930 --> 00:04:30.312
We don't have to explicitly import
all those child components as well.

74
00:04:30.312 --> 00:04:34.869
And yeah, so the state management, so
any component that uses such a compound

75
00:04:34.869 --> 00:04:37.977
component doesn't have to
implement its own state,

76
00:04:37.977 --> 00:04:42.138
because that's already contained
within that compound components.

77
00:04:42.138 --> 00:04:45.919
Now the only kind of drawbacks is I guess
when you're using react children map,

78
00:04:45.919 --> 00:04:49.540
you just have to be more careful with
how you're rendering those children.

79
00:04:49.540 --> 00:04:54.266
Because it's like only direct children
will then get access to like all the props

80
00:04:54.266 --> 00:04:58.800
that we pass, but yeah, that's just
kind of like implementation details.

81
00:04:58.800 --> 00:05:03.339
Same with the naming collisions,
maybe the child components that we pass

82
00:05:03.339 --> 00:05:08.172
already have props that we're then
passing when using react clone elements,

83
00:05:08.172 --> 00:05:12.654
cuz it's only performing a shallow merge,
but again that's about it.

84
00:05:13.738 --> 00:05:18.516
All right, so the last challenge of today,
as far as I know,

85
00:05:18.516 --> 00:05:23.034
is to create a compound pattern or
a compound component.

86
00:05:23.034 --> 00:05:26.279
So here we see that we
have an input component.

87
00:05:26.279 --> 00:05:30.845
I'm just going to make this
big real quick, one sec.

88
00:05:34.395 --> 00:05:38.652
Okay, so in this input component,
we see that we have the state for

89
00:05:38.652 --> 00:05:41.786
logic, like set open value,
set value toggle.

90
00:05:41.786 --> 00:05:46.880
And this one is or this input
component is rendering the flyouts.

91
00:05:46.880 --> 00:05:49.991
Now you can see that this is not
a compound component like we're actually

92
00:05:49.991 --> 00:05:51.785
creating all those children ourselves.

93
00:05:51.785 --> 00:05:55.156
So instead, what we wanna get
is something like we saw before.

94
00:05:55.156 --> 00:05:58.365
Like we just wanna be able
to import a fly outs and

95
00:05:58.365 --> 00:06:02.227
then render a flyout dot input,
input list, list item.

96
00:06:02.227 --> 00:06:07.157
So it changed this code to create
a flyout components that's

97
00:06:07.157 --> 00:06:12.098
the input component returns,
if that makes sense, clear?

98
00:06:15.563 --> 00:06:19.195
And of course, if you need any
inspiration, just scroll up a bit and

99
00:06:19.195 --> 00:06:21.577
you will probably see the implementation.

