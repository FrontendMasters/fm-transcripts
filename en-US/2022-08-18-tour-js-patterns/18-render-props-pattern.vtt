WEBVTT

1
00:00:00.340 --> 00:00:04.615
Okay, so the Render Props pattern is,
as the name says,

2
00:00:04.615 --> 00:00:09.440
we pass props and
those props are actually React components.

3
00:00:09.440 --> 00:00:11.560
So they're props that we can render.

4
00:00:11.560 --> 00:00:16.470
And they make it super easy to reuse
logic across multiple components.

5
00:00:16.470 --> 00:00:20.653
So for example here we have a render
prop called render Kelvin and

6
00:00:20.653 --> 00:00:25.002
then render Fahrenheit and
it's going to show this little video.

7
00:00:25.002 --> 00:00:27.120
I'll make this big.

8
00:00:27.120 --> 00:00:28.827
So we see that the render Kelvin prop and

9
00:00:28.827 --> 00:00:31.060
the render Fahrenheit prop
are both render props.

10
00:00:31.060 --> 00:00:34.760
They are props that render
data to the screen.

11
00:00:34.760 --> 00:00:38.975
So the components that we pass to it,
we see like is either a P or

12
00:00:38.975 --> 00:00:43.533
maybe temp card, or I don't know
what comes after, large texts.

13
00:00:43.533 --> 00:00:47.931
They all get the value prop that we
add here in the temperature converter

14
00:00:47.931 --> 00:00:52.270
cuz we're passing that value here,
and they receive that back here.

15
00:00:55.162 --> 00:01:02.025
So the implementation is I think this
example is exactly this video here.

16
00:01:02.025 --> 00:01:05.119
So this is for example, then again,
the render component, renderKelvin,

17
00:01:05.119 --> 00:01:05.985
renderFahrenheit.

18
00:01:07.575 --> 00:01:11.445
And the value that we pass here as
a prop is then returned here as a prop.

19
00:01:11.445 --> 00:01:14.552
So any component that we show here,

20
00:01:14.552 --> 00:01:19.130
can easily get that value
from the input component.

21
00:01:19.130 --> 00:01:23.833
Now, the nice thing about this,
I don't know where the s is here, is that,

22
00:01:23.833 --> 00:01:25.460
yeah, the reusability.

23
00:01:25.460 --> 00:01:29.409
So what we saw here is that this render
Kelvin and the render Fahrenheit even

24
00:01:29.409 --> 00:01:33.850
though they are the same prop, we can
always pass a different component to it.

25
00:01:33.850 --> 00:01:36.192
So even though we know that they
will always render something,

26
00:01:36.192 --> 00:01:38.810
what they render can always be different,
so it's highly flexible.

27
00:01:41.500 --> 00:01:44.954
Again we have the separation of concerns
but I think the biggest thing for

28
00:01:44.954 --> 00:01:47.670
me is that it's the solution
that we saw over the problems

29
00:01:47.670 --> 00:01:51.255
that we saw with the higher order
components, namely the implicit props.

30
00:01:51.255 --> 00:01:54.447
Because we don't always know
what the higher order component,

31
00:01:54.447 --> 00:01:57.698
what props get modified,
what props get might get overwritten,

32
00:01:57.698 --> 00:02:00.669
but with the render props pattern,
it's super explicit.

33
00:02:00.669 --> 00:02:03.075
Okay, these are the props that it expects,
and

34
00:02:03.075 --> 00:02:07.620
this is how you render those components,
this is the data that they get.

35
00:02:07.620 --> 00:02:11.630
Now as we move things, they might
sometimes be unnecessary with hooks.

36
00:02:11.630 --> 00:02:13.935
We will look at that later.

37
00:02:13.935 --> 00:02:17.060
And another thing with render props is
that it is any prop that renders data.

38
00:02:17.060 --> 00:02:20.180
So if you've used React you've probably
used like the props of children.

39
00:02:20.180 --> 00:02:23.484
Children is actually also a render prop,
it's a prop that renders data.

40
00:02:23.484 --> 00:02:28.243
So render prop doesn't always have to
say like render in it or something,

41
00:02:28.243 --> 00:02:31.332
it's just a prop that
renders any type of data.

42
00:02:33.510 --> 00:02:36.933
All right, so we see another challenge
here with the refactor the following code

43
00:02:36.933 --> 00:02:39.501
so that the temperature converter
uses the render Kelvin and

44
00:02:39.501 --> 00:02:42.697
render Fahrenheit props to render
the Kelvin and Fahrenheit components.

45
00:02:42.697 --> 00:02:47.407
So right now here we see that this example
is still uses a Kelvin component and

46
00:02:47.407 --> 00:02:49.039
a Fahrenheit component.

47
00:02:49.039 --> 00:02:51.477
So it's not using any render props.

48
00:02:51.477 --> 00:02:56.005
So we're directly passing the value prop
here from the temperature converter.

49
00:02:56.005 --> 00:03:00.408
But instead we wanna have something that
is similar to what we saw before where we

50
00:03:00.408 --> 00:03:04.091
could just use this render Kelvin and
render Fahrenheit props, so

51
00:03:04.091 --> 00:03:07.890
it's not always this component,
but it's more flexible.

52
00:03:07.890 --> 00:03:12.710
So try to refactor this code to use
the render prop pattern instead.

