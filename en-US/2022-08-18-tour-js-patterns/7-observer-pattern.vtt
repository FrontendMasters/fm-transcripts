WEBVTT

1
00:00:00.220 --> 00:00:02.371
Let's move on to the observer pattern.

2
00:00:02.371 --> 00:00:06.647
It somehow always scrolls down to
my StackBlitz whenever I open it.

3
00:00:06.647 --> 00:00:10.820
So with the observer pattern, if you've
used React or just JavaScript in general,

4
00:00:10.820 --> 00:00:13.663
you may be familiar with
something called observables.

5
00:00:13.663 --> 00:00:18.215
With the observer pattern, well,
there are multiple parts at play here.

6
00:00:18.215 --> 00:00:23.458
So we have the observable object,
which can be observed by subscribers.

7
00:00:23.458 --> 00:00:28.120
And an observable object can in
turn notify all those subscribers

8
00:00:28.120 --> 00:00:29.738
when an event occurs.

9
00:00:29.738 --> 00:00:33.281
So in this example,
we have an observable there.

10
00:00:33.281 --> 00:00:36.561
It has a notify method,
a subscribe method, and

11
00:00:36.561 --> 00:00:41.046
an unsubscribe method, just visualized,
not in the code there.

12
00:00:41.046 --> 00:00:45.438
So what we can do is we can
subscribe certain functions,

13
00:00:45.438 --> 00:00:48.809
or any logic really, to that observable.

14
00:00:48.809 --> 00:00:54.661
And then when the notify method is invoked
on this observable, all the subscribers

15
00:00:54.661 --> 00:01:00.272
that are currently subscribed to that
observable get notified with that data.

16
00:01:00.272 --> 00:01:04.427
So for example, if we then notify
subscribers on that observable, and

17
00:01:04.427 --> 00:01:08.736
we have four functions here that
are all subscribers to this observable.

18
00:01:08.736 --> 00:01:12.633
I'm just going make this big real quick.

19
00:01:12.633 --> 00:01:14.834
Whenever we notify it with certain data,
so

20
00:01:14.834 --> 00:01:17.157
here the data is a string
notify subscribers.

21
00:01:17.157 --> 00:01:21.004
All of these subscribers will get notified
with that string, notify subscribers.

22
00:01:21.004 --> 00:01:24.794
And what they do with it, that's up
to them, the observable doesn't care.

23
00:01:24.794 --> 00:01:28.212
But they get passed that
as their argument as data.

24
00:01:28.212 --> 00:01:33.170
So maybe we want to add
some analytics here.

25
00:01:33.170 --> 00:01:37.820
Maybe we want to notify an observable
whenever a user clicked on something.

26
00:01:37.820 --> 00:01:41.732
We'll actually do this in
the challenge later on.

27
00:01:41.732 --> 00:01:45.861
But it's a very useful way to notify
a lot of different parts of your

28
00:01:45.861 --> 00:01:50.753
application without having to repeat
that code throughout the application.

29
00:01:50.753 --> 00:01:54.304
It's not like, we have to send
the request within every function.

30
00:01:54.304 --> 00:01:58.353
We can just all manage that
within one observable, and

31
00:01:58.353 --> 00:02:01.529
they can then notify all the subscribers.

32
00:02:01.529 --> 00:02:05.353
It probably gets more clear in
the challenge that we have later on.

33
00:02:05.353 --> 00:02:11.528
But yeah, so an observer object, we can
just have a singleton like we had before.

34
00:02:11.528 --> 00:02:16.448
And the easiest implementation
is to have a notify method

35
00:02:16.448 --> 00:02:20.144
like we saw before, which gets some data.

36
00:02:20.144 --> 00:02:22.846
The data can just come from
throughout the application.

37
00:02:22.846 --> 00:02:27.373
And then all the observers
that are currently subscribed

38
00:02:27.373 --> 00:02:32.185
to this observable,
we invoke that observer with the data.

39
00:02:32.185 --> 00:02:33.694
We don't know what these observers are.

40
00:02:33.694 --> 00:02:34.644
We don't know what they do.

41
00:02:34.644 --> 00:02:36.096
The observable doesn't care.

42
00:02:36.096 --> 00:02:39.737
We just care about passing the data to
all the observers that are currently

43
00:02:39.737 --> 00:02:40.449
subscribed.

44
00:02:40.449 --> 00:02:42.747
Then, of course,
we have the subscribe method,

45
00:02:42.747 --> 00:02:45.551
which is just pushing that
function to the observers array.

46
00:02:45.551 --> 00:02:48.807
So all the observers that
care about this observable,

47
00:02:48.807 --> 00:02:52.147
I know I use these methods like observer,
observable.

48
00:02:52.147 --> 00:02:55.724
And then also we have unsubscribe
to remove that function again

49
00:02:55.724 --> 00:02:57.216
from the observers list.

50
00:03:00.715 --> 00:03:04.957
So the easiest way, or
a very simple example here,

51
00:03:04.957 --> 00:03:09.789
I guess, is say we have an observable and
we have a button,

52
00:03:09.789 --> 00:03:14.151
so an element ID button,
and we just wanna click it.

53
00:03:14.151 --> 00:03:16.645
We can just notify
the observable with clicked, and

54
00:03:16.645 --> 00:03:19.988
say that we have a lot of subscribers,
maybe Analytics subscribers,

55
00:03:19.988 --> 00:03:22.608
Google Analytics subscribers,
email subscribers.

56
00:03:22.608 --> 00:03:23.675
I don't know what all these functions do.

57
00:03:23.675 --> 00:03:25.782
They can be declared
elsewhere in our code.

58
00:03:25.782 --> 00:03:27.856
They would all get
notified with this string.

59
00:03:27.856 --> 00:03:33.502
And maybe they can also send events
asynchronously based on that user event.

60
00:03:33.502 --> 00:03:36.013
So that's something that
an observable can do.

61
00:03:36.013 --> 00:03:41.077
For example here,
let me see if I can split the screen here.

62
00:03:41.077 --> 00:03:44.958
We have this observer which is the exact
same implementation that we had before.

63
00:03:44.958 --> 00:03:48.172
So we have notify,
subscribe, and unsubscribe.

64
00:03:48.172 --> 00:03:50.869
Then we also just have
a fake analytics page.

65
00:03:50.869 --> 00:03:55.984
So we have sendToGoogleAnalytics,
sendToCustomAnalytics, and sendToEmail.

66
00:03:55.984 --> 00:03:58.390
And then here, I'm subscribing them.

67
00:03:58.390 --> 00:04:02.031
So now,
whenever I invoke that subscribe method,

68
00:04:02.031 --> 00:04:05.681
these functions get pushed
to the observer array.

69
00:04:05.681 --> 00:04:10.164
Wait, I thought this was the observer,
to this observers array.

70
00:04:10.164 --> 00:04:13.763
So then when you see when we notify,
I think it might forget,

71
00:04:13.763 --> 00:04:15.398
this invokes that method.

72
00:04:15.398 --> 00:04:19.327
So it would in turn [LAUGH]
see all this method.

73
00:04:19.327 --> 00:04:22.991
It would then pass this
data here as this data.

74
00:04:22.991 --> 00:04:27.539
So now we see if we run, so in index.js,
I just have this simple notify function.

75
00:04:27.539 --> 00:04:31.014
And then that also have a notify just
after a second just to kind of simulate

76
00:04:31.014 --> 00:04:32.707
maybe user events, I don't know.

77
00:04:32.707 --> 00:04:37.251
So when we run this, You can see that it

78
00:04:37.251 --> 00:04:41.711
automatically notified all the subscribers
because we imported the analytics here.

79
00:04:41.711 --> 00:04:44.767
So it ran this file,
it executed all these contents.

80
00:04:44.767 --> 00:04:48.130
So it created the functions, and
then also subscribe it to the observer.

81
00:04:48.130 --> 00:04:52.953
We then notified it here back
in index.js with this string,

82
00:04:52.953 --> 00:04:59.305
which then sent the string from the
observable, sorry, to all the observers.

83
00:04:59.305 --> 00:05:01.479
So it invokes these
functions with this data.

84
00:05:05.289 --> 00:05:10.101
Yeah, so just look at the tradeoffs for
the observer.

85
00:05:10.101 --> 00:05:13.496
Yeah, so the observer object, like I
said before, the function in this case,

86
00:05:13.496 --> 00:05:15.690
are not tightly coupled
to the observable object.

87
00:05:15.690 --> 00:05:19.483
So the observable doesn't care
about what the observers do.

88
00:05:19.483 --> 00:05:22.511
All it cares about is, okay,
I'm going to pass this data to them.

89
00:05:22.511 --> 00:05:23.611
I don't care what they do with it.

90
00:05:23.611 --> 00:05:25.161
Here's your data.

91
00:05:25.161 --> 00:05:26.923
So it can just be decoupled at any time.

92
00:05:26.923 --> 00:05:29.725
So maybe our application grows or
it changes its need.

93
00:05:29.725 --> 00:05:31.757
Maybe we don't wanna
have analytics anymore.

94
00:05:31.757 --> 00:05:33.622
We just easily unsubscribe.

95
00:05:36.146 --> 00:05:39.356
Yeah, so here, an example like
the observable object is responsible for

96
00:05:39.356 --> 00:05:40.455
monitoring the events.

97
00:05:40.455 --> 00:05:46.368
And the observers simply handle the
received data in whatever way possible.

98
00:05:46.368 --> 00:05:50.007
Now, of course, make sure that if you're
notifying all the subscribers, for

99
00:05:50.007 --> 00:05:53.210
example, and I know this is a micro
optimization, but we like this for

100
00:05:53.210 --> 00:05:53.885
each method.

101
00:05:53.885 --> 00:05:57.947
If you have millions of observers,
this might take a while.

102
00:05:57.947 --> 00:06:00.680
So just make sure that you're
doing that in a performant way.

103
00:06:00.680 --> 00:06:03.706
Maybe if it's asynchronous
with Promise.all or

104
00:06:03.706 --> 00:06:06.089
something that it can run in parallel.

105
00:06:06.089 --> 00:06:09.420
Cuz in most cases, the observers,
they don't rely on each other.

106
00:06:09.420 --> 00:06:11.393
They don't necessarily
have to run sequentially.

107
00:06:11.393 --> 00:06:13.981
They're all just kinda
standalone on their own.

108
00:06:16.056 --> 00:06:19.740
Okay, so I have a simple exercise
here with the observer pattern.

109
00:06:19.740 --> 00:06:21.375
So we have two buttons.

110
00:06:21.375 --> 00:06:23.924
So I have I'm a pink button and
I'm a blue button.

111
00:06:23.924 --> 00:06:28.020
Now you can see that I've added
an event listener here with a click.

112
00:06:28.020 --> 00:06:31.777
And it has some data, and it sends all
these data to the Google Analytics,

113
00:06:31.777 --> 00:06:33.787
custom analytics, and send to email.

114
00:06:33.787 --> 00:06:37.492
Same with the blue button, but, of course,
the blue button sends different data.

115
00:06:37.492 --> 00:06:42.116
Now your exercise here is to change
this so we aren't repeating ourselves.

116
00:06:42.116 --> 00:06:45.914
We are not explicitly invoking
this function with the data.

117
00:06:45.914 --> 00:06:49.542
Instead, we will notify an observer
that this click happened.

118
00:06:49.542 --> 00:06:53.245
And this observer will then notify
this sendToGoogleAnalytics,

119
00:06:53.245 --> 00:06:55.835
sendToCustomAnalytics, and sendToEmail.

120
00:06:55.835 --> 00:07:00.823
To achieve a similar result, we still
want to log this data or we still wanna

121
00:07:00.823 --> 00:07:05.830
send it to Google Analytics,
custom analytics whenever the user clicks.

122
00:07:05.830 --> 00:07:09.419
Just not in this way because
we're repeating ourselves here.

123
00:07:09.419 --> 00:07:12.380
It's not very scalable, so
we wanna use an observer instead.

124
00:07:14.117 --> 00:07:17.717
&gt;&gt; So instead of repeating the functions,
we notify the observer and

125
00:07:17.717 --> 00:07:20.748
the observer will take care
of all those broadcasting.

126
00:07:20.748 --> 00:07:25.394
&gt;&gt; Yes, so if you just need a sneak peek,

127
00:07:25.394 --> 00:07:31.804
it's pretty similar to what we did,
or maybe not.

128
00:07:31.804 --> 00:07:36.637
Yeah, I guess it's pretty similar to
what we did here with the analytics,

129
00:07:36.637 --> 00:07:38.491
and then subscribing them.

130
00:07:38.491 --> 00:07:42.120
&gt;&gt; It kinda reminds me of event.

131
00:07:42.120 --> 00:07:43.180
&gt;&gt; Yeah.

132
00:07:43.180 --> 00:07:44.726
&gt;&gt; Cuz if you click a button,

133
00:07:44.726 --> 00:07:48.394
anything that's subscribed to
the click listener will run.

134
00:07:48.394 --> 00:07:50.709
&gt;&gt; That's using the observer
pattern as well.

135
00:07:50.709 --> 00:07:52.568
It is really just a pattern.

136
00:07:52.568 --> 00:07:57.480
It's more like a way that you think about
architecting your code about how the data

137
00:07:57.480 --> 00:07:59.915
is passed to certain parts of your code.

138
00:07:59.915 --> 00:08:03.880
So I would say that the events is
also using that observer pattern.

139
00:08:03.880 --> 00:08:11.402
Maybe not like one-on-one, and it doesn't
have to be, but yeah, it's very similar.

140
00:08:11.402 --> 00:08:17.258
&gt;&gt; Is the observer pattern and
Pub/Sub pattern the same?

141
00:08:17.258 --> 00:08:20.740
&gt;&gt; I believe so,
I haven't used a Pub/Sub pattern in ages.

142
00:08:20.740 --> 00:08:25.667
So I don't know if it has other
functionality that maybe makes it easier

143
00:08:25.667 --> 00:08:29.782
cuz the observer pattern is,
of course, a very low level.

144
00:08:29.782 --> 00:08:31.931
This is just a way to think about things.

145
00:08:31.931 --> 00:08:36.645
But I would say they're the same for
what I know.

146
00:08:36.645 --> 00:08:39.690
Yeah, cuz it's like publish-subscribe,
yeah.

