WEBVTT

1
00:00:00.090 --> 00:00:02.333
So, first we have the static import,

2
00:00:02.333 --> 00:00:06.790
which I'm sure most of us have used
many times or use most of the time.

3
00:00:06.790 --> 00:00:11.364
So with a static import, we can just
use the built in import keyword, so

4
00:00:11.364 --> 00:00:14.010
import module from this file.

5
00:00:14.010 --> 00:00:18.994
So in that case, what happens is when
the JavaScript engine sees this code I'd

6
00:00:18.994 --> 00:00:23.071
like import module 1 for module 1,
it will execute module 1,

7
00:00:23.071 --> 00:00:26.265
then execute module 2,
then execute module 3.

8
00:00:26.265 --> 00:00:28.950
Is pretty similar to what we saw before
when we talked about the bundler.

9
00:00:28.950 --> 00:00:33.888
So in this case, if we were to statically
import module 3 from module 3,

10
00:00:33.888 --> 00:00:39.225
it will add this to the bundle and then
statically import module 2 in module 3,

11
00:00:39.225 --> 00:00:41.555
it will all add this to the bundle.

12
00:00:41.555 --> 00:00:44.415
Yeah, I won't really talk about
the implementation here just because it's

13
00:00:44.415 --> 00:00:45.430
pretty straightforward.

14
00:00:45.430 --> 00:00:50.065
This is kind of the normal import that
we use nowadays in at least in ES6.

15
00:00:50.065 --> 00:00:54.115
So the static import is pretty useful
because the dependencies are instantly

16
00:00:54.115 --> 00:00:55.369
available to the user.

17
00:00:55.369 --> 00:00:59.422
Because when we statically import
something, it's available in the bundle,

18
00:00:59.422 --> 00:01:02.940
it gets bundled in the main bundle
that the user initially requests.

19
00:01:03.960 --> 00:01:09.271
It's also better for optimizations because
a bundler can statically analyze it and

20
00:01:09.271 --> 00:01:10.628
maybe tree shake it.

21
00:01:10.628 --> 00:01:14.848
But yeah, like I said before, it's pretty
easy to end up with pretty large bundle

22
00:01:14.848 --> 00:01:18.335
size when we statically import
components that may not necessary or

23
00:01:18.335 --> 00:01:20.679
may not be necessary on
that initial render.

24
00:01:20.679 --> 00:01:24.628
So just make sure that you're not
statically importing a lot of components

25
00:01:24.628 --> 00:01:27.143
that aren't instantly
available to the user.

26
00:01:27.143 --> 00:01:30.565
So in decades we can maybe use
something like a dynamic import.

27
00:01:30.565 --> 00:01:34.679
So just to show you an example, for
example we can have this search bar and

28
00:01:34.679 --> 00:01:38.080
only when a user clicks on
that we wanna show that list.

29
00:01:38.080 --> 00:01:41.046
So that list isn't really necessary for
the initial load,

30
00:01:41.046 --> 00:01:44.029
because it will only ever render
it when a user clicks on it.

31
00:01:44.029 --> 00:01:47.521
Now, if we were just statically important,
this search input or

32
00:01:47.521 --> 00:01:51.720
this flyout would have been included in
the bundle for essentially no reason.

33
00:01:51.720 --> 00:01:54.067
Maybe the user never clicks on it, right.

34
00:01:54.067 --> 00:01:58.649
Of course, this is very small example but
just as an example, so instead,

35
00:01:58.649 --> 00:02:02.752
what we could have done,
is dynamically loading this component.

36
00:02:02.752 --> 00:02:06.199
And when we're doing that,
we're just telling the vendor, hey,

37
00:02:06.199 --> 00:02:07.720
this component is on its own.

38
00:02:07.720 --> 00:02:12.454
So it can be in its own little bundle, so
it can be split out of that larger bundle,

39
00:02:12.454 --> 00:02:14.880
and put into its own bundle.

40
00:02:14.880 --> 00:02:16.213
Many bundle wars here.

41
00:02:16.213 --> 00:02:20.182
But so here we have a static import and
then a dynamic import.

42
00:02:20.182 --> 00:02:23.757
So here we see that we're
splitting that search papa bundle,

43
00:02:23.757 --> 00:02:26.723
which is here this component
from the big bundles.

44
00:02:26.723 --> 00:02:31.033
So we can reduce the bundle size by
lazy loading the search bar pop up, and

45
00:02:31.033 --> 00:02:35.870
we can do this with a built in component
in react called react suspense.

46
00:02:35.870 --> 00:02:37.914
So we don't have to touch
a lot back here at all.

47
00:02:37.914 --> 00:02:42.552
Which is super nice, it automatically
will create this separate bundle for us.

48
00:02:42.552 --> 00:02:46.084
And as it's loading this, so
only when a user actually needs it or

49
00:02:46.084 --> 00:02:49.684
when we're actually rendering
the component so when it's open,

50
00:02:49.684 --> 00:02:51.889
will it fetch that bundle and render it.

51
00:02:51.889 --> 00:02:56.715
In the meantime, while it's fetching it,
we of course don't want to just show

52
00:02:56.715 --> 00:03:01.260
something random,
it will show this fallback component.

53
00:03:01.260 --> 00:03:04.463
Let me show you an example.

54
00:03:04.463 --> 00:03:07.756
For example here I'm just going
to open this in StackBlitz.

55
00:03:10.303 --> 00:03:17.010
I'm going to leave this one, so
what I have here is I have multiple cards.

56
00:03:17.010 --> 00:03:19.590
I don't know what the messages are there.

57
00:03:19.590 --> 00:03:24.156
So in here I am statically
importing card1 and Card2 but

58
00:03:24.156 --> 00:03:31.560
I'm dynamically importing card3 and card4
with a lazy method is available on react.

59
00:03:31.560 --> 00:03:33.430
Now I'm adding this webpack chunk name.

60
00:03:33.430 --> 00:03:36.350
I'll show you in a second why
it's just like a nice thing.

61
00:03:36.350 --> 00:03:40.230
But now what we can do is click here to
dynamically import a card 3 component.

62
00:03:40.230 --> 00:03:44.919
So what I have here is I have a suspense
which we imported from react.

63
00:03:44.919 --> 00:03:48.797
And whenever this card is open, so
whenever we click on it, which is

64
00:03:48.797 --> 00:03:53.628
here like on click toggle, then it's open
and then this component will render, and

65
00:03:53.628 --> 00:03:57.350
only then will it fetch that bundle for
that component.

66
00:03:57.350 --> 00:04:02.203
So I can hear it dynamically rendered
at 3:45:03 PM while whereas these

67
00:04:02.203 --> 00:04:05.522
were rendered at 3:44 PM,
same work for card4.

68
00:04:05.522 --> 00:04:09.323
Now you can see that if we
go into the bigger one,

69
00:04:09.323 --> 00:04:13.020
I'm just going to go to
the network request.

70
00:04:13.020 --> 00:04:14.300
I'm going to make this
a little bit bigger.

71
00:04:14.300 --> 00:04:16.127
When we're dynamically importing it,

72
00:04:16.127 --> 00:04:19.000
you can see that it's now
fetching that card3 bundle.

73
00:04:19.000 --> 00:04:20.550
And here card4 bundle.

74
00:04:20.550 --> 00:04:23.923
So, it's only fetching that bundle when we
actually request it when the user actually

75
00:04:23.923 --> 00:04:24.860
needs to see it.

76
00:04:24.860 --> 00:04:26.990
So, that initial bundle
can be a lot smaller.

77
00:04:26.990 --> 00:04:31.810
Now this is called a magic
common the webpack junk name.

78
00:04:31.810 --> 00:04:36.194
It just makes it possible to see the card3
bundle and card4 a bundle because

79
00:04:36.194 --> 00:04:40.805
when we remove that you will just see,
I can just show you what it shows instead.

80
00:04:40.805 --> 00:04:43.060
So this is just kind of
like developer experience.

81
00:04:43.060 --> 00:04:44.731
I'll just reload this.

82
00:04:44.731 --> 00:04:46.666
I'll just show the 0.bundle and like 0.1,

83
00:04:46.666 --> 00:04:49.511
that's not always like super obvious
what is actually loading there.

84
00:04:49.511 --> 00:04:55.235
So I like to use these magic commons
to change the name of our bundles.

85
00:04:55.235 --> 00:04:57.111
Yeah, so
this is already a really good way.

86
00:04:57.111 --> 00:05:01.791
So dynamically importing components
is a really nice way to reduce that

87
00:05:01.791 --> 00:05:06.790
initial bundle size and only fetch
the bundle when a user actually needs it.

88
00:05:06.790 --> 00:05:09.705
So the trade offs here of course
is the pester initial load.

89
00:05:09.705 --> 00:05:14.465
This ensures that we can have that smaller
initial bundle however it can also lead to

90
00:05:14.465 --> 00:05:15.350
layout shift.

91
00:05:15.350 --> 00:05:17.490
Now layout shift is like, for

92
00:05:17.490 --> 00:05:22.796
example here if this component didn't
match this component which is kind

93
00:05:22.796 --> 00:05:27.860
of doesn't it can lead to like
a weird layout shift that's not great.

94
00:05:27.860 --> 00:05:30.661
It's just about like user experience.

95
00:05:30.661 --> 00:05:33.364
And then also,
if you're lazy loading a component and

96
00:05:33.364 --> 00:05:36.021
that component actually
ends up being pretty large.

97
00:05:36.021 --> 00:05:40.553
Maybe this card4 bundle is another
large bundle because somehow we didn't

98
00:05:40.553 --> 00:05:41.841
code split that one.

99
00:05:41.841 --> 00:05:44.565
User clicked on something and
it takes a while maybe they're homeless so

100
00:05:44.565 --> 00:05:46.483
internet or something,
takes a while to fetch it,

101
00:05:46.483 --> 00:05:48.646
to render i,t there you're
like I don't see anything.

102
00:05:48.646 --> 00:05:49.813
I don't know what's going on.

103
00:05:49.813 --> 00:05:51.943
So just something to think about.

104
00:05:51.943 --> 00:05:56.204
But, normally you kinda wanna lazy load
those smaller components that just aren't

105
00:05:56.204 --> 00:05:58.376
instantly visible on the initial render.

106
00:06:00.467 --> 00:06:05.324
Now another, type of dynamic import,
is what we just saw what like

107
00:06:05.324 --> 00:06:10.183
clicking on the cards is kinda go
like import on user interaction,

108
00:06:10.183 --> 00:06:14.820
import on interaction, but
we also have input on visibility.

109
00:06:14.820 --> 00:06:15.931
This is really nice for

110
00:06:15.931 --> 00:06:19.454
example if we wanted to show all those
listings on a smaller viewpoint.

111
00:06:19.454 --> 00:06:22.855
And of course this is
again a small example but

112
00:06:22.855 --> 00:06:28.327
we are rendering those listings that
aren't directly in the viewport.

113
00:06:28.327 --> 00:06:30.970
So instead,
we might lazy load those listings.

114
00:06:30.970 --> 00:06:32.820
And in the meantime,
we'd to show a fallback.

115
00:06:32.820 --> 00:06:34.561
I know this is a really bad animation.

116
00:06:34.561 --> 00:06:35.149
But anyway,

117
00:06:35.149 --> 00:06:38.690
only when the user actually sees it in
the viewport will we render that bundle.

118
00:06:38.690 --> 00:06:43.390
So instead of having an onclick,
we kind of have if it's in the viewport.

119
00:06:43.390 --> 00:06:44.357
Now really nice and

120
00:06:44.357 --> 00:06:48.290
really easy way to do that is by
using the intersection observer API.

121
00:06:48.290 --> 00:06:51.755
But then even easier way is to
use the the hook that they also

122
00:06:51.755 --> 00:06:54.748
provide with that react
intersection observer.

123
00:06:54.748 --> 00:06:57.964
So we can just use a simple
hook called use interview,

124
00:06:57.964 --> 00:07:00.621
which returns a reference and
then in view.

125
00:07:00.621 --> 00:07:05.557
So we can say, okay,
if this components with that ref

126
00:07:05.557 --> 00:07:09.300
is in the view, then show that listing.

127
00:07:09.300 --> 00:07:13.609
Now I just again have this example just
with the cards but see if I can open this,

128
00:07:13.609 --> 00:07:17.158
I feel like if I open it and
StackBlitz it'll be in the viewport.

129
00:07:17.158 --> 00:07:20.116
So I'm just gonna keep this a bit small,
well okay, yeah, okay, so

130
00:07:20.116 --> 00:07:22.054
here we can see that we
statically import it,

131
00:07:22.054 --> 00:07:25.022
actually I'm just going to show you
the code real quick though that.

132
00:07:28.631 --> 00:07:30.042
Ignore this for now.

133
00:07:30.042 --> 00:07:32.728
Sorry about that,
maybe I don't know, right.

134
00:07:32.728 --> 00:07:36.608
So we have this card1 card2 which
we statically import it and

135
00:07:36.608 --> 00:07:41.245
then we also have the card3 and part4,
which we dynamically import it.

136
00:07:41.245 --> 00:07:45.425
And we are using this dynamic current and
we're using the ref and view.

137
00:07:45.425 --> 00:07:49.715
So here we see scroll down because it
just had to be in the viewport not

138
00:07:49.715 --> 00:07:54.764
immediately [LAUGH], so here we see
dynamically imported at 3:48:56 and

139
00:07:54.764 --> 00:07:56.745
here it is at 4:49:01.

140
00:07:56.745 --> 00:08:00.742
So it's basically the same as what we
saw with the dynamic import unclick but

141
00:08:00.742 --> 00:08:04.690
this time it'll fetch the bundle
automatically what's in the viewport.

142
00:08:04.690 --> 00:08:10.390
Now of course from a react perspective,
we implemented this the exact same way.

143
00:08:10.390 --> 00:08:11.879
But instead of being open,

144
00:08:11.879 --> 00:08:15.649
we just had an interview that was
returned from this using view hook.

145
00:08:15.649 --> 00:08:18.976
But this is often also used when
you have maybe a large list or

146
00:08:18.976 --> 00:08:22.390
just many components that
are normally outside of the view.

147
00:08:22.390 --> 00:08:24.577
Or it's the initial viewport,

148
00:08:24.577 --> 00:08:30.089
it's a nice way to import them visibility
not necessarily on user interaction.

149
00:08:33.010 --> 00:08:36.914
It's like the same trade off that we saw
with the with the dynamic input, but

150
00:08:36.914 --> 00:08:39.731
this time a user may not be
expecting to see something.

151
00:08:39.731 --> 00:08:41.539
So you don't really have that, what's it?

152
00:08:41.539 --> 00:08:43.858
I'm clicked on something,
why can't I see your component?

153
00:08:43.858 --> 00:08:47.195
Because it's on visibility it
doesn't require user interaction.

154
00:08:47.195 --> 00:08:50.344
But it's still not great,
it can still lead to layout shifts and

155
00:08:50.344 --> 00:08:54.505
stuff like that, but definitely worth it
for the faster initial load in most cases.

156
00:08:54.505 --> 00:09:00.118
Then we also have
the route based splitting.

157
00:09:00.118 --> 00:09:05.168
Now for example, I'm not entirely sure
what this animation is going to show you?

158
00:09:05.168 --> 00:09:10.026
Yeah, so we can have a separate bundle
per page for example if we normally with

159
00:09:10.026 --> 00:09:14.463
an SBA we have one large bundle that
contains the code for everything.

160
00:09:14.463 --> 00:09:18.923
And although this does give you really
fast navigation what we can do instead is

161
00:09:18.923 --> 00:09:20.283
have a bundle per page.

162
00:09:20.283 --> 00:09:24.262
So when a user here requests the about
page or navigates to the about page it

163
00:09:24.262 --> 00:09:27.486
fetches this bundle and
then it'll render the about page.

164
00:09:27.486 --> 00:09:31.617
This is also a great way to have
that smaller initial bundle so

165
00:09:31.617 --> 00:09:35.832
we only render what is necessary for
the current navigation.

166
00:09:35.832 --> 00:09:39.970
Maybe if you're, I don't know
if you're using React Router but

167
00:09:39.970 --> 00:09:42.990
they provide a pretty
easy way to implement it.

168
00:09:42.990 --> 00:09:48.707
I feel like this is the updated syntax.

169
00:09:48.707 --> 00:09:49.970
I'm just going to open this real quick.

170
00:09:52.440 --> 00:09:56.827
So here you can see that we
are importing those pages, those routes,

171
00:09:56.827 --> 00:10:01.518
as in the Router, the React Router
we're saying that the elements is just

172
00:10:01.518 --> 00:10:04.630
a wreck suspense, like we saw before.

173
00:10:04.630 --> 00:10:06.980
And then we're rendering this component.

174
00:10:06.980 --> 00:10:11.430
So again, from a React perspective,
it's basically the exact same thing.

175
00:10:11.430 --> 00:10:15.207
But when we are, I'm just going to
show you the network request again.

176
00:10:15.207 --> 00:10:18.837
This time the code for the about and
contact page it's not included in

177
00:10:18.837 --> 00:10:22.542
the initial bundle based on their route,
so I can do about in contact.

178
00:10:22.542 --> 00:10:24.886
Now in this case it didn't
use the magic comments so

179
00:10:24.886 --> 00:10:26.586
they just got one bundle two bundle.

180
00:10:26.586 --> 00:10:29.254
Yeah, so these are the bundles
that are just necessary for

181
00:10:29.254 --> 00:10:32.751
this page like here's the pages contact
and here's the other pages about.

182
00:10:32.751 --> 00:10:37.671
So this is also a very nice way to make
sure that we're only fetching the minimal

183
00:10:37.671 --> 00:10:38.800
necessary code.

184
00:10:41.133 --> 00:10:46.340
Any questions so far on bundle
splitting based on certain events?

185
00:10:47.490 --> 00:10:47.990
No, perfect.

