WEBVTT

1
00:00:00.890 --> 00:00:04.762
So from the start we're first going
to create a variable, oops, sorry,

2
00:00:04.762 --> 00:00:06.272
this pop up is the instance.

3
00:00:06.272 --> 00:00:10.750
So by default this does just nothing,
we don't have an instance yet hopefully.

4
00:00:10.750 --> 00:00:15.587
But if we do require a new one
we wanna set the instance equal

5
00:00:15.587 --> 00:00:19.059
to the new instance that we just created.

6
00:00:19.059 --> 00:00:24.051
Now if we do see that there is
already an instance when we create

7
00:00:24.051 --> 00:00:27.133
a new instance we just throw an error.

8
00:00:27.133 --> 00:00:32.924
So throw a new error, you can only
create one single database connection.

9
00:00:35.598 --> 00:00:39.366
Then we have the connection here, but we
actually just want to say we always just

10
00:00:39.366 --> 00:00:41.290
use the same URI and we know what that is.

11
00:00:41.290 --> 00:00:43.861
So this connection can just
be an object dot freeze.

12
00:00:45.423 --> 00:00:47.514
And right now connection is a singleton.

13
00:00:47.514 --> 00:00:51.626
We make sure that there's only ever one
single instance, throw an error if it's

14
00:00:51.626 --> 00:00:55.266
not, but most likely we will never
really cuz we aren't exporting it.

15
00:00:55.266 --> 00:00:59.166
So it's not like other files can import
this database connection class without

16
00:00:59.166 --> 00:01:00.165
the singleton now.

17
00:01:00.165 --> 00:01:02.660
So we can then do export
default connection.

18
00:01:03.810 --> 00:01:07.108
So really we would only ever see
this error if within this file,

19
00:01:07.108 --> 00:01:09.870
we maybe say new DB database connection.

20
00:01:09.870 --> 00:01:12.307
But I mean, hopefully you won't do that.

21
00:01:12.307 --> 00:01:15.170
So yeah, database is now a singleton.

22
00:01:15.170 --> 00:01:18.271
&gt;&gt; What are the pros and
cons of instantiating the object from

23
00:01:18.271 --> 00:01:21.569
a class versus directly defining
the object in this pattern?

24
00:01:22.970 --> 00:01:27.738
&gt;&gt; In this case we could
have just created an object.

25
00:01:27.738 --> 00:01:30.806
However since we're also
using that URI here, so

26
00:01:30.806 --> 00:01:35.204
in this case this connection,
actually I will open it up, sorry.

27
00:01:35.204 --> 00:01:38.393
I keep forgetting to
open up a new Steglitz.

28
00:01:38.393 --> 00:01:43.121
So for an object let's see what
this would have looked like.

29
00:01:43.121 --> 00:01:46.180
Const, database, connection,
object dot freeze.

30
00:01:47.320 --> 00:01:49.646
So we want to have a URI here.

31
00:01:49.646 --> 00:01:54.186
Maybe what we could do
is create a function

32
00:01:54.186 --> 00:01:58.735
that takes URI, so then we have connect.

33
00:02:03.137 --> 00:02:05.474
URI has been connected and
we have a disconnect.

34
00:02:08.217 --> 00:02:11.112
So DB is disconnected.

35
00:02:11.112 --> 00:02:15.024
And then we can just have
that URI here if we want to.

36
00:02:15.024 --> 00:02:19.789
So now this could have worked so
now the connection could be is database

37
00:02:19.789 --> 00:02:24.093
connection and then we pass the URI
here which is this Mongo DB,

38
00:02:26.253 --> 00:02:28.453
Cuz this returns an object right away.

39
00:02:28.453 --> 00:02:32.620
This is an arrow function that immediately
implicitly returns an object here.

40
00:02:34.160 --> 00:02:36.421
So that also could have been the case.

41
00:02:36.421 --> 00:02:40.960
It was just easier to refactor this
with the class that was already there.

42
00:02:40.960 --> 00:02:42.466
So now we can do export
default connection.

43
00:02:45.491 --> 00:02:50.258
So yeah.

44
00:02:50.258 --> 00:02:51.720
&gt;&gt; I have one question.

45
00:02:51.720 --> 00:02:56.924
So you mentioned that explicitly
creating singletons is less

46
00:02:56.924 --> 00:03:03.227
necessary now because now ES 2015
modules are singletons by default,

47
00:03:03.227 --> 00:03:07.060
could you say a little
bit more about that?

48
00:03:07.060 --> 00:03:07.990
&gt;&gt; For sure.

49
00:03:07.990 --> 00:03:11.610
&gt;&gt; So for example, I'm just going to
use the same file that we have here.

50
00:03:11.610 --> 00:03:13.160
I'm just going to create a counter.

51
00:03:15.220 --> 00:03:18.890
So we have counts but default is zero.

52
00:03:18.890 --> 00:03:22.200
Now if we wanted to have maybe
a function that's increments,

53
00:03:22.200 --> 00:03:23.990
we actually want to export this.

54
00:03:26.070 --> 00:03:29.685
So this returns return plus, plus count.

55
00:03:29.685 --> 00:03:33.343
So this returns the counts incremented
by one and maybe we also want to have

56
00:03:33.343 --> 00:03:36.295
an export function decrement return minus,
minus count.

57
00:03:37.605 --> 00:03:40.574
And then also let's just have an export.

58
00:03:43.832 --> 00:03:45.743
So I'm just gonna create another file,

59
00:03:45.743 --> 00:03:48.844
I'm going to import this counter
module into files in that case.

60
00:03:48.844 --> 00:03:53.892
So file1, file 2 or I could just,
I'll keep index here.

61
00:03:53.892 --> 00:04:00.704
So import counter increment

62
00:04:00.704 --> 00:04:05.540
from counter.js.

63
00:04:05.540 --> 00:04:11.240
Now I can do increments and
then log the counter.

64
00:04:15.454 --> 00:04:16.501
Right, I forgot.

65
00:04:16.501 --> 00:04:19.342
Like I said I always forget to do this,
I type module.

66
00:04:29.651 --> 00:04:31.937
It's count.

67
00:04:38.629 --> 00:04:42.090
[INAUDIBLE] I am here.

68
00:04:42.090 --> 00:04:45.815
Increments, not increments.

69
00:04:45.815 --> 00:04:48.030
Okay, so right now count is two.

70
00:04:48.030 --> 00:04:51.434
But if we were to also import this and
say file 1,

71
00:04:51.434 --> 00:04:54.425
we will just do something
pretty similar so

72
00:04:54.425 --> 00:04:59.092
we are going to Import increment here and
just increment it twice.

73
00:04:59.092 --> 00:05:05.560
And then in index, I might also import,
say, import file1.

74
00:05:05.560 --> 00:05:10.897
So what this does is it immediately
imports the file when we run this code and

75
00:05:10.897 --> 00:05:12.940
it also executes this file.

76
00:05:12.940 --> 00:05:17.261
But within this file we
also increment count twice.

77
00:05:17.261 --> 00:05:20.869
So now you can see that count is four.

78
00:05:20.869 --> 00:05:24.846
So we import file 1,
which also imports the singleton module.

79
00:05:24.846 --> 00:05:26.796
We didn't declare
an actual singleton here,

80
00:05:26.796 --> 00:05:30.202
we just used a module we export it counts,
we export it increment and decrement.

81
00:05:30.202 --> 00:05:34.154
And you can see that even though we only
incremented it twice here because we

82
00:05:34.154 --> 00:05:37.805
import file 1, which also increments
it twice, count is now four.

83
00:05:37.805 --> 00:05:40.898
And this is usually kinda what they
mean with side effects as well.

84
00:05:40.898 --> 00:05:45.400
Because it may not always be obvious
that within file 1 we are incrementing

85
00:05:45.400 --> 00:05:46.479
the count by two.

86
00:05:46.479 --> 00:05:50.494
So then you're login count you're like,
why is it not two?

87
00:05:50.494 --> 00:05:51.862
I only incremented twice.

88
00:05:51.862 --> 00:05:55.528
So this could easily happen with
those side effects that you may not

89
00:05:55.528 --> 00:05:56.650
always be aware of.

90
00:05:56.650 --> 00:06:00.271
So yeah, just make sure that if you
ever run into an issue like that,

91
00:06:00.271 --> 00:06:01.745
this might be the problem.

92
00:06:01.745 --> 00:06:03.080
I've definitely had that before.

