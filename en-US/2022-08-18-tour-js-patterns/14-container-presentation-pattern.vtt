WEBVTT

1
00:00:00.000 --> 00:00:03.796
Well, I think that kind of concludes
the whole design patterns section of this

2
00:00:03.796 --> 00:00:04.378
workshop.

3
00:00:04.378 --> 00:00:07.709
So we talked about the module pattern,
singleton pattern, proxy pattern,

4
00:00:07.709 --> 00:00:10.389
observer pattern, factory pattern and
prototype pattern.

5
00:00:10.389 --> 00:00:11.549
But the next one is not so

6
00:00:11.549 --> 00:00:15.099
much on like the JavaScript design
patterns are more on react patterns.

7
00:00:15.099 --> 00:00:18.533
And these, I'll talk about how
we can use different components,

8
00:00:18.533 --> 00:00:22.040
how their data is shared and
just their relationship to each other.

9
00:00:23.100 --> 00:00:26.520
So, first let's talk about
the Container Presentational Pattern.

10
00:00:28.260 --> 00:00:30.332
So with the container
presentational pattern,

11
00:00:30.332 --> 00:00:32.045
we essentially have two components.

12
00:00:32.045 --> 00:00:32.744
I'm just going to make this real quick.

13
00:00:32.744 --> 00:00:37.372
We have a container components, which is
a component that's solely responsible for

14
00:00:37.372 --> 00:00:38.409
retrieving data.

15
00:00:38.409 --> 00:00:42.171
And then we have a presentational
component which is solely responsible for

16
00:00:42.171 --> 00:00:43.827
showing data, rendering data.

17
00:00:43.827 --> 00:00:48.442
So because the container component is only
fetching data, it usually doesn't like

18
00:00:48.442 --> 00:00:52.932
render any styled components, it just
renders the presentational components.

19
00:00:55.380 --> 00:01:00.790
So, when we look at the implementation
here, this is using React hooks.

20
00:01:00.790 --> 00:01:04.070
By the way most of my examples
I will use React hooks.

21
00:01:04.070 --> 00:01:08.036
I will also cover the hooks pattern so you
can kind of see how the different patterns

22
00:01:08.036 --> 00:01:10.590
relate to how we can
implement hooks nowadays.

23
00:01:10.590 --> 00:01:13.240
So I do like assume that
you know how hooks work.

24
00:01:13.240 --> 00:01:16.912
But if there are any questions about, like
these basic like use of XQ state hooks,

25
00:01:16.912 --> 00:01:19.080
of course, do let me know.

26
00:01:19.080 --> 00:01:22.202
Yeah, so in this implementation, we have
the listings container components and

27
00:01:22.202 --> 00:01:24.860
container components responsible for
fetching data.

28
00:01:24.860 --> 00:01:29.788
And we can see that here because it's
fetching, like listings from an API or

29
00:01:29.788 --> 00:01:33.022
like a CMS sets the state
to have those listings and

30
00:01:33.022 --> 00:01:36.263
then passes them down to
the listings component.

31
00:01:36.263 --> 00:01:38.105
Are like that
the presentational component.

32
00:01:38.105 --> 00:01:41.250
I feel like this should have been
the presentational component this may be

33
00:01:41.250 --> 00:01:41.965
a typo in my end.

34
00:01:41.965 --> 00:01:45.157
So what we have here is we have that
listing container component that

35
00:01:45.157 --> 00:01:45.947
you saw before.

36
00:01:45.947 --> 00:01:49.973
So this one fetches listing from our API
passes down to this listings component

37
00:01:49.973 --> 00:01:53.947
which here's just called listings which
is probably why I made the mistake.

38
00:01:53.947 --> 00:01:56.531
But this is a presentational components.

39
00:01:56.531 --> 00:02:00.449
So in here it retrieves this
the listings as props and

40
00:02:00.449 --> 00:02:05.536
the only thing he cares about is
rendering that data in a styled way.

41
00:02:05.536 --> 00:02:07.100
I'm just getting roads screenly.

42
00:02:09.010 --> 00:02:14.580
Yeah, so that was the container
presentational pattern.

43
00:02:14.580 --> 00:02:19.510
Now, there are many trade offs or
benefits to using this pattern.

44
00:02:19.510 --> 00:02:22.426
As you can see, there's definitely
a separation of concerns.

45
00:02:22.426 --> 00:02:26.208
Because the presentational components
can be just responsible for the UI.

46
00:02:26.208 --> 00:02:29.803
Like just the styling of how
are we going to render that data.

47
00:02:29.803 --> 00:02:33.895
Whereas like container components
are just responsible for

48
00:02:33.895 --> 00:02:36.711
the state of the data of the application.

49
00:02:36.711 --> 00:02:39.354
Yeah, it's also super easy that way
to like reuse these presentational

50
00:02:39.354 --> 00:02:39.885
components.

51
00:02:39.885 --> 00:02:44.115
Maybe they are using like different
data sources different data but

52
00:02:44.115 --> 00:02:46.794
they're render the content the same way.

53
00:02:46.794 --> 00:02:49.754
So we can reuse this presentational
components even though they

54
00:02:49.754 --> 00:02:51.740
like retrieve different data from props.

55
00:02:53.850 --> 00:02:57.050
It's also nice if you have many
presentational components that don't

56
00:02:57.050 --> 00:02:58.608
really touch the fetching logic.

57
00:02:58.608 --> 00:03:01.702
So, if you just care about the design or
you maybe you're a designer,

58
00:03:01.702 --> 00:03:04.176
you don't really know what
gets returned from the API.

59
00:03:04.176 --> 00:03:08.933
You can make a lot of changes to these
presentational components without maybe

60
00:03:08.933 --> 00:03:13.328
accidentally like making a mistake
with that data how data is fetched and

61
00:03:13.328 --> 00:03:14.351
all that stuff.

62
00:03:14.351 --> 00:03:18.020
Now, of course like Hooks we will see
later how Hooks kind of replace this

63
00:03:18.020 --> 00:03:22.050
pattern a lot of the time we don't really
necessarily have to use this container

64
00:03:22.050 --> 00:03:23.873
presentational pattern anymore.

65
00:03:23.873 --> 00:03:27.788
Or as much as we had to when we used
classes just because it was like more work

66
00:03:27.788 --> 00:03:31.403
to like create a class all that stuff but
we will see that a bit later.

67
00:03:31.403 --> 00:03:36.267
All right, so the exercise even though I
kind of already showed you the solution

68
00:03:36.267 --> 00:03:38.309
here but we see an exercise here.

69
00:03:38.309 --> 00:03:42.453
So right now, we just have one component
it's called the listings components.

70
00:03:42.453 --> 00:03:45.330
But then this component,
it's not split up into two separate parts.

71
00:03:45.330 --> 00:03:48.043
We don't have like a container part or
a presentational part,

72
00:03:48.043 --> 00:03:50.090
it's just one big component.

73
00:03:50.090 --> 00:03:53.581
So what I would like you to do is to
split this up into two components,

74
00:03:53.581 --> 00:03:56.880
a container components and
a presentational components.

75
00:03:56.880 --> 00:03:59.989
So the container component responsible for
fetching the data and

76
00:03:59.989 --> 00:04:04.320
then the presentational components
responsible for showing the data.

77
00:04:04.320 --> 00:04:08.062
Now, you can I guess already kind of
see I've already created the folder

78
00:04:08.062 --> 00:04:09.114
structure for you.

79
00:04:09.114 --> 00:04:12.073
So you have like presentational here and
then container here.

80
00:04:12.073 --> 00:04:15.950
So you can just type the container code
right in the container listings file.

