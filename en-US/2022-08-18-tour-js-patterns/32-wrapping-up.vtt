WEBVTT

1
00:00:00.000 --> 00:00:02.356
I know I've covered
a lot of patterns here.

2
00:00:02.356 --> 00:00:07.369
However, if you wanna read more,
then make sure to check out patterns.dev.

3
00:00:07.369 --> 00:00:12.497
Cuz we have a lot more patterns here,
stuff that I wasn't able to cover today,

4
00:00:12.497 --> 00:00:15.620
like mixin pattern, mediator/middleware.

5
00:00:17.020 --> 00:00:18.260
What else didn't I cover?

6
00:00:18.260 --> 00:00:20.501
Flyweight, I guess.

7
00:00:20.501 --> 00:00:24.599
And yeah, it goes all the way down.

8
00:00:24.599 --> 00:00:29.595
And then there's also Addy's original
book, Learning JavaScript Design Patterns,

9
00:00:29.595 --> 00:00:32.374
and I believe he updated
it to the ES15 syntax.

10
00:00:32.374 --> 00:00:35.968
So this is also covering a lot
of the original patterns,

11
00:00:35.968 --> 00:00:39.562
are based on the original
book with the updated syntax,

12
00:00:39.562 --> 00:00:43.248
in case you wanna learn more
about JavaScript patterns.

13
00:00:45.182 --> 00:00:48.499
&gt;&gt; Someone wants to know how you
created all those awesome animations.

14
00:00:48.499 --> 00:00:49.100
&gt;&gt; Keynote.

15
00:00:49.100 --> 00:00:50.949
[LAUGH]
&gt;&gt; Just Keynote?

16
00:00:50.949 --> 00:00:52.463
&gt;&gt; Yeah.

17
00:00:52.463 --> 00:00:55.612
&gt;&gt; The rendering patterns, [LAUGH] it
was helpful, but it was also fast and

18
00:00:55.612 --> 00:00:57.041
a lot of new information for me.

19
00:00:57.041 --> 00:01:00.072
Do you have any other
resources you would recommend?

20
00:01:00.072 --> 00:01:06.862
&gt;&gt; So I actually have a blog on this, what
it's called, Talks Rendering Patterns.

21
00:01:06.862 --> 00:01:10.291
Now this one doesn't cover
client side rendering.

22
00:01:10.291 --> 00:01:14.726
Don't watch this talk, it was really bad,
by the way, [LAUGH] it was so bad.

23
00:01:14.726 --> 00:01:19.144
But on this blog I also have
everything about static rendering, and

24
00:01:19.144 --> 00:01:21.090
then also server rendering.

25
00:01:21.090 --> 00:01:24.816
And I also included,
let me just go down a bit,

26
00:01:24.816 --> 00:01:29.510
the edge rendering side that
I wasn't able to cover here.

27
00:01:30.910 --> 00:01:33.640
So serverless and
then we have edge server side rendering.

28
00:01:33.640 --> 00:01:37.105
And I have to say,
because this was also tough for Vercel,

29
00:01:37.105 --> 00:01:40.942
a lot of this is kind of focused on
what Vercel uses out of the box.

30
00:01:40.942 --> 00:01:44.998
But by all means, I see a lot of
frameworks move to this edge SSR

31
00:01:44.998 --> 00:01:48.748
right now, just because it comes with so
many benefits.

32
00:01:48.748 --> 00:01:51.038
So it will definitely be
the future of rendering.

33
00:01:51.038 --> 00:01:54.120
I feel like talking about rendering
patterns will be outdated in three

34
00:01:54.120 --> 00:01:54.861
years from now.

35
00:01:54.861 --> 00:01:57.890
Everyone will just use one
optimized pattern, and be,

36
00:01:57.890 --> 00:02:00.087
why did we even have to think about this?

37
00:02:00.087 --> 00:02:05.113
I may be wrong, but yeah, especially
with React server components and

38
00:02:05.113 --> 00:02:09.989
the new Edge runtime, stuff like that,
it's exciting, I like it.

39
00:02:09.989 --> 00:02:11.738
It will only get better,
well, it gets so much better.

40
00:02:11.738 --> 00:02:14.776
&gt;&gt; It also mentioned in
the intermediate React course,

41
00:02:14.776 --> 00:02:17.408
Reinhold kind of covers
some of these topics,

42
00:02:17.408 --> 00:02:20.999
shows you how to do server side
rendering and that kinda thing.

43
00:02:20.999 --> 00:02:23.209
&gt;&gt; Yeah.

44
00:02:23.209 --> 00:02:28.518
&gt;&gt; Could you clarify again the
distinctions between static rendering and

45
00:02:28.518 --> 00:02:30.384
server side rendering?

46
00:02:30.384 --> 00:02:32.649
&gt;&gt; Yeah, so-
&gt;&gt; I know you kinda talked about that,

47
00:02:32.649 --> 00:02:35.300
but-
&gt;&gt; For sure, so the biggest difference is

48
00:02:35.300 --> 00:02:39.410
that with static rendering the HTML
gets generated at build time.

49
00:02:39.410 --> 00:02:42.140
So if I deploy my website right now,
it would get built.

50
00:02:42.140 --> 00:02:46.470
So it generates the HTML on my computer,
and then I can deploy it to any server.

51
00:02:46.470 --> 00:02:49.773
And what I deploy is
already that complete HTML.

52
00:02:49.773 --> 00:02:51.643
But with server side rendering,

53
00:02:51.643 --> 00:02:54.914
that HTML that normally I would
have built on my computer,

54
00:02:54.914 --> 00:02:59.480
it will get generated on the server when
a user requests it, if that makes sense.

55
00:02:59.480 --> 00:03:03.586
So instead of already having that HTML
file ready for the user as they request

56
00:03:03.586 --> 00:03:07.963
it, it still needs to be generated on
demand, which is the biggest difference.

57
00:03:07.963 --> 00:03:12.235
But they both kind of return the same
result, they both return the static HTML.

58
00:03:12.235 --> 00:03:17.693
But when it's generated is the biggest
difference here, if that clears things up.

59
00:03:17.693 --> 00:03:23.751
[LAUGH]
&gt;&gt; Another

60
00:03:23.751 --> 00:03:28.517
good course to check out would
be Scott Moss's Next.js course.

61
00:03:28.517 --> 00:03:29.118
&gt;&gt; Yeah, he had a Next.js course, right?

62
00:03:29.118 --> 00:03:32.662
&gt;&gt; Thought to say what
you're talking about.

63
00:03:32.662 --> 00:03:36.294
We won't have obviously
the streaming SSR stuff here.

64
00:03:36.294 --> 00:03:39.542
&gt;&gt; It's probably good it's
still in beta [LAUGH] so

65
00:03:39.542 --> 00:03:42.234
the API changes, I guess, probably.

66
00:03:44.988 --> 00:03:52.112
&gt;&gt; Is there a way to measure the current
performance rendering with the browsers?

67
00:03:52.112 --> 00:03:53.467
&gt;&gt; You mean like Lighthouse?

68
00:03:53.467 --> 00:03:54.245
Are you aware of Lighthouse?

69
00:03:54.245 --> 00:03:55.560
&gt;&gt; Yes, something like that.

70
00:03:55.560 --> 00:03:57.961
&gt;&gt; Yeah, so you can use,
for example, this one.

71
00:03:57.961 --> 00:04:00.690
Okay, I'm probably gonna get
a really bad performance, and

72
00:04:00.690 --> 00:04:03.221
not right as I talk to you,
I gotta get good performance.

73
00:04:03.221 --> 00:04:05.290
So we can, for example,
here generate a report,

74
00:04:05.290 --> 00:04:06.781
I'm just going to do it on desktop.

75
00:04:06.781 --> 00:04:12.781
Generate a report,
Now it's auditing me, or my website.

76
00:04:16.768 --> 00:04:17.760
Let's see.

77
00:04:20.755 --> 00:04:22.850
It comes up with fun tips.

78
00:04:22.850 --> 00:04:25.589
Average user device
costs less than US $200.

79
00:04:26.930 --> 00:04:29.783
They just show this to be like, look,
you really need to optimize your website.

80
00:04:29.783 --> 00:04:32.595
Cuz a lot of people have
pretty bad phones, so

81
00:04:32.595 --> 00:04:35.188
it takes a long time to load that website.

82
00:04:35.188 --> 00:04:37.422
I don't know why this is taking me so
long, by the way,

83
00:04:37.422 --> 00:04:39.085
normally this doesn't take this long.

84
00:04:44.110 --> 00:04:48.913
I know there's also something like
a real web curve test or something.

85
00:04:48.913 --> 00:04:52.300
I think maybe it's this one.

86
00:04:52.300 --> 00:04:54.685
&gt;&gt; webpagetest.org is great, and

87
00:04:54.685 --> 00:04:58.610
then web.dev allows you to
kinda do this Lighthouse.

88
00:05:00.010 --> 00:05:01.820
&gt;&gt; Yeah, so I can start a test here.

89
00:05:01.820 --> 00:05:06.640
So, yeah, it just showed you it runs
on a really bad phone right now.

90
00:05:08.460 --> 00:05:13.266
So this is gonna be,
&gt;&gt; But yeah,

91
00:05:13.266 --> 00:05:17.429
you can also go to web.dev and
that's basically Lighthouse.

92
00:05:17.429 --> 00:05:22.639
&gt;&gt; Yeah, I don't know what this is,

93
00:05:22.639 --> 00:05:25.369
this never takes this long, [LAUGH] okay.

94
00:05:25.369 --> 00:05:26.902
&gt;&gt; Under measure.

95
00:05:26.902 --> 00:05:29.335
&gt;&gt; Yeah, I always forget
everything that thing that-

96
00:05:29.335 --> 00:05:32.091
&gt;&gt; That's basically a hosted version of

97
00:05:32.091 --> 00:05:33.128
Lighthouse.

98
00:05:33.128 --> 00:05:34.947
&gt;&gt; Because it returns the same results.

99
00:05:34.947 --> 00:05:40.420
Okay, I'm just going to close that one,
maybe that'll speed things up a bit.

100
00:05:40.420 --> 00:05:41.327
Do I have Wi-Fi?

101
00:05:41.327 --> 00:05:42.119
Yeah, I do.

102
00:05:43.456 --> 00:05:47.110
[LAUGH] Okay, well, here you see that
it measured the first concentful paint.

103
00:05:47.110 --> 00:05:50.643
It measured the time to interactive, total
blocking time, cumulative layout shift,

104
00:05:50.643 --> 00:05:51.320
all that stuff.

105
00:05:52.530 --> 00:05:54.445
Now, it also shows some
nice opportunities,

106
00:05:54.445 --> 00:05:57.920
stuff that I haven't covered yet,
like serve images in next-gen formats.

107
00:05:57.920 --> 00:06:02.582
For example, here I'm using PNG, and
maybe I wanted to use webp, I don't know,

108
00:06:02.582 --> 00:06:05.025
other type of better formats that make it.

109
00:06:05.025 --> 00:06:09.530
It actually also shows you how Next.js
is doing it, which is pretty nice.

110
00:06:09.530 --> 00:06:11.394
Cuz yeah, if you're using Next,

111
00:06:11.394 --> 00:06:15.655
it actually comes with image optimization
by default, which is pretty nice.

112
00:06:15.655 --> 00:06:17.138
So yeah, it shows you all these things.

113
00:06:17.138 --> 00:06:20.568
Also other stuff that I haven't talked
about, not about performance, but

114
00:06:20.568 --> 00:06:22.540
about accessibility.

115
00:06:22.540 --> 00:06:24.580
For example, some of my buttons
don't have an accessible name.

116
00:06:24.580 --> 00:06:29.259
So this can be difficult, like these
screen readers, stuff like that.

117
00:06:29.259 --> 00:06:33.779
But yeah, if you ever wonder how
well your website's performing,

118
00:06:33.779 --> 00:06:36.440
make sure to use a tool like this.

119
00:06:36.440 --> 00:06:40.260
Let's see if I can also
run it on a desktop.

120
00:06:40.260 --> 00:06:41.860
No, I guess I can't change it here.

121
00:06:41.860 --> 00:06:43.609
Yeah, there are many ways to
measure your performance.

122
00:06:43.609 --> 00:06:47.686
And you can actually see if the changes
that you made have had any impact on your

123
00:06:47.686 --> 00:06:48.890
app's performance.

124
00:06:51.617 --> 00:06:55.071
&gt;&gt; Can you explain a little
more about static rendering,

125
00:06:55.071 --> 00:07:00.186
where you fetch dynamic data on the client
side, versus server side rendering?

126
00:07:00.186 --> 00:07:03.832
&gt;&gt; Yeah.
&gt;&gt; Are they fairly similar, or?

127
00:07:03.832 --> 00:07:10.358
&gt;&gt; No, so what I was trying to, and
I can, I guess, show you the thing here.

128
00:07:11.392 --> 00:07:15.060
I think this was the dynamic one,
let me just check real quick.

129
00:07:15.060 --> 00:07:17.587
So I have the components,
I have the listings.

130
00:07:17.587 --> 00:07:23.441
So I'm actually using, let's see,
yeah, so since I'm using Next.js,

131
00:07:23.441 --> 00:07:27.110
it's called automatic static optimization.

132
00:07:27.110 --> 00:07:30.220
So any page that we build
is static by default.

133
00:07:30.220 --> 00:07:32.492
So I am showing these listings, but

134
00:07:32.492 --> 00:07:36.960
then these listings themselves
use that useListings hook.

135
00:07:36.960 --> 00:07:41.157
So what happens is, let me see if,
I feel like the network might be so

136
00:07:41.157 --> 00:07:44.830
fast that you cannot
really see the difference.

137
00:07:44.830 --> 00:07:47.260
I feel like I ended up in
an infinite loop there.

138
00:07:49.080 --> 00:07:50.930
That's always a fun thing with hooks,
isn't it?

139
00:07:50.930 --> 00:07:52.888
Let's see.

140
00:07:52.888 --> 00:07:56.561
Because I didn't, okay.

141
00:08:00.153 --> 00:08:06.411
So let's see what the initial HTML
contains, if we can see that.

142
00:08:08.119 --> 00:08:16.537
Now this has a lot of extra data just
because StackBlitz, actually, let's see.

143
00:08:16.537 --> 00:08:20.762
Since using, again, StackBlitz makes this
hard because it adds so many other things.

144
00:08:20.762 --> 00:08:25.046
So there's a big difference between
this and server side rendering.

145
00:08:25.046 --> 00:08:29.252
So what I wanted to show here is
that the entire page still gets

146
00:08:29.252 --> 00:08:30.990
statically generated.

147
00:08:30.990 --> 00:08:36.356
So if I wanted to maybe show a title here,

148
00:08:38.179 --> 00:08:45.430
h1, welcome, whatever, this would
still all be generated at build time.

149
00:08:45.430 --> 00:08:48.011
The only difference here
is that within listings,

150
00:08:48.011 --> 00:08:50.620
which will also get
generated at build time.

151
00:08:50.620 --> 00:08:55.027
But initially, it will just only
render this p loading component.

152
00:08:55.027 --> 00:08:57.592
Because this listings
is false at build time,

153
00:08:57.592 --> 00:09:02.590
it's not going to fetch from a React hook
at build time, it doesn't run the hooks.

154
00:09:02.590 --> 00:09:05.680
So the initial HTML that get returned
to the client just has this p loading.

155
00:09:05.680 --> 00:09:09.114
So it's not that it doesn't have anything.

156
00:09:09.114 --> 00:09:13.190
And then on demand,
when it actually does have listings.

157
00:09:13.190 --> 00:09:15.792
So in the example I
showed here just quick,

158
00:09:15.792 --> 00:09:19.274
the p loading would have been
like a skeleton component.

159
00:09:19.274 --> 00:09:23.825
So maybe instead of loading here, it would
have been skeleton UI, I don't know.

160
00:09:23.825 --> 00:09:28.223
So that skeleton UI component would
be generated or turned to HTML, and

161
00:09:28.223 --> 00:09:31.537
that would get built at build time and
then deployed.

162
00:09:31.537 --> 00:09:34.599
And then only once
the useListings hook has

163
00:09:34.599 --> 00:09:38.855
fetched data will it actually
return those other grids, or

164
00:09:38.855 --> 00:09:42.765
the listings grid, sorry
&gt;&gt; Which on server side it's making

165
00:09:42.765 --> 00:09:45.760
the API call on the server
instead of client?

166
00:09:45.760 --> 00:09:49.214
&gt;&gt; Well, it's fetching the data for
the listings on the server, but

167
00:09:49.214 --> 00:09:53.481
it's not generating HTML on the server,
its generating the HTML on the clients.

168
00:09:53.481 --> 00:09:54.067
&gt;&gt; All right.

169
00:09:54.067 --> 00:09:57.808
&gt;&gt; Yeah, it's rendering those
listings on the clients.

170
00:09:57.808 --> 00:10:02.485
So with server side rendering, the entire
HTML gets generated on the client from

171
00:10:02.485 --> 00:10:06.978
the HTML body, head, head, head,
everything is generated on the client.

172
00:10:06.978 --> 00:10:09.784
Whereas here with static rendering and
a client side fetch,

173
00:10:09.784 --> 00:10:12.602
we still have a lot of components
that have been pre-built.

174
00:10:12.602 --> 00:10:17.143
Is really just in this case, any
dynamic components that need that data,

175
00:10:17.143 --> 00:10:20.303
that will be generated on
the client dynamically.

176
00:10:20.303 --> 00:10:23.623
Thank you all so much for
coming to this workshop, I appreciated it.

177
00:10:23.623 --> 00:10:28.645
I appreciated your presence here,
I hope it was useful in a bit.

178
00:10:28.645 --> 00:10:32.275
Yeah, of course, make sure to check
out javascriptpatterns.vercel.app, or

179
00:10:32.275 --> 00:10:35.336
just pattern.dev, where we have so
many more patterns to show you.

180
00:10:35.336 --> 00:10:36.096
Thanks so much.

181
00:10:36.096 --> 00:10:42.528
[LAUGH]
&gt;&gt; [APPLAUSE]

