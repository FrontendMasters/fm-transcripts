WEBVTT

1
00:00:00.180 --> 00:00:06.295
Well, we've already had three of them, but
the hooks better is mightiest of them all.

2
00:00:06.295 --> 00:00:10.930
Because this one can actually replace
the first three we're just covered in most

3
00:00:10.930 --> 00:00:12.301
cases not in all cases.

4
00:00:12.301 --> 00:00:16.430
Now, if you've been working with react for
at least the past year,

5
00:00:16.430 --> 00:00:21.211
I'm sure you've used hooks, maybe
the built in like use state, use effect,

6
00:00:21.211 --> 00:00:23.250
use reducer, all these things.

7
00:00:23.250 --> 00:00:25.339
But that's not the only
thing we can do with hooks,

8
00:00:25.339 --> 00:00:28.020
because we can actually also easily
create our own custom hooks.

9
00:00:29.070 --> 00:00:32.411
For example, this is one example
if we wanna use hover hook,

10
00:00:32.411 --> 00:00:33.794
we can just create that.

11
00:00:33.794 --> 00:00:37.886
So whenever like user is hovering that
specific card, we can change the state and

12
00:00:37.886 --> 00:00:40.896
maybe I don't know log something
when they're hovering or

13
00:00:40.896 --> 00:00:42.713
show something else I don't know.

14
00:00:42.713 --> 00:00:45.787
We can do anything with hooks so
they give us like all the possibilities.

15
00:00:48.237 --> 00:00:52.731
Yeah, so one thing that we could do here
or I guess that we used to do is to just.

16
00:00:52.731 --> 00:00:57.044
I'm just going to pause this real quick
there is to have this all within this

17
00:00:57.044 --> 00:01:00.820
listings component,
which works like this is completely fine.

18
00:01:00.820 --> 00:01:04.669
But if we wanna have more components
that also uses hovering data,

19
00:01:04.669 --> 00:01:08.518
it's just nicer to split this up
to create our own custom hooks, so

20
00:01:08.518 --> 00:01:11.680
like more components can use this logic.

21
00:01:11.680 --> 00:01:15.349
So right now, if we can just use
a create a use hover hook, and then use

22
00:01:15.349 --> 00:01:19.546
this enlisting, but we can also use it
anywhere else in any other components.

23
00:01:22.377 --> 00:01:26.298
I'm actually showing that here, so if we
have an image or a button that also needs

24
00:01:26.298 --> 00:01:29.944
this hovering implementation,
we can just use this use hover hook again.

25
00:01:29.944 --> 00:01:36.436
Because one thing to keep in mind is
that it's not like a shared state,

26
00:01:36.436 --> 00:01:40.523
their way of adding
state to any component.

27
00:01:40.523 --> 00:01:44.719
But it's not like they're sharing state
among the components that's using

28
00:01:44.719 --> 00:01:45.570
that hook.

29
00:01:45.570 --> 00:01:48.280
We'll actually talk about that
later with the provider pattern and

30
00:01:48.280 --> 00:01:51.560
the compound pattern, because that is
a way to share data through hooks.

31
00:01:51.560 --> 00:01:55.401
But a hook itself is not
a way to like share data,

32
00:01:55.401 --> 00:02:00.986
it's just a way to add a stateful
logic to a components, let's see.

33
00:02:00.986 --> 00:02:07.259
Yeah, this is just the implementation
that we kind of just covered I believe.

34
00:02:07.259 --> 00:02:10.506
Yeah, well, one thing of course to keep
in mind is that whenever you're creating

35
00:02:10.506 --> 00:02:13.867
a hook yourself, you have to use you use,
because these are like the rules of hooks.

36
00:02:13.867 --> 00:02:16.921
So react knows that like okay,
it starts with use, this is a hook,

37
00:02:16.921 --> 00:02:18.953
I have to treat it in
kind of a different way.

38
00:02:18.953 --> 00:02:23.877
Because there are certain rules that
we need to use when using hooks and

39
00:02:23.877 --> 00:02:28.900
react just with the way that the react
engine works and stuff like that.

40
00:02:28.900 --> 00:02:32.611
Now, there are many
benefits to using hooks,

41
00:02:32.611 --> 00:02:36.240
it definitely simplifies components a lot.

42
00:02:36.240 --> 00:02:41.154
Because we can remove that stateful logic
from these components, which usually

43
00:02:41.154 --> 00:02:45.579
cause components to be way more complex
than they should be or need to be.

44
00:02:45.579 --> 00:02:48.459
And really just move that
all into their own hook, and

45
00:02:48.459 --> 00:02:52.630
we can even reuse the stateful logic
which was kind of difficult to do before.

46
00:02:52.630 --> 00:02:55.796
I mean, we saw that with like
the container presentational

47
00:02:55.796 --> 00:03:00.184
pattern where we could wrap multiple
components in like a container components.

48
00:03:00.184 --> 00:03:05.063
But now, we don't have to use it anymore,
we'll keep we can just create a hook for

49
00:03:05.063 --> 00:03:06.427
that stateful logic.

50
00:03:06.427 --> 00:03:11.003
I'm showing that here, so this is
using a class component which maybe

51
00:03:11.003 --> 00:03:14.975
you're still using,
I mainly use functional components.

52
00:03:14.975 --> 00:03:19.349
But like we had this container component
here that fetched those listings,

53
00:03:19.349 --> 00:03:23.859
added that state or pass the state back
down to the presentational component in

54
00:03:23.859 --> 00:03:25.420
order to render it.

55
00:03:25.420 --> 00:03:28.641
With hooks, we can just simplify that
a lot, we can just create a hook,

56
00:03:28.641 --> 00:03:32.370
maybe called like use listings that
contains all that stateful data.

57
00:03:32.370 --> 00:03:35.493
And then that listings component can
use that hook like useless things to

58
00:03:35.493 --> 00:03:37.090
eventually render that component.

59
00:03:37.090 --> 00:03:40.493
So kind of the whole, the vibe to
my container presentational doesn't

60
00:03:40.493 --> 00:03:45.000
necessarily exist anymore, we don't really
have a container, we just have hooks.

61
00:03:45.000 --> 00:03:48.151
And since it's so easy to use
that in a functional components,

62
00:03:48.151 --> 00:03:51.670
any functional component can really
be a presentational component.

63
00:03:53.130 --> 00:03:56.269
So that is a great way to
write weight cleaner code,

64
00:03:56.269 --> 00:03:59.910
share the stateful logic
across multiple components.

65
00:03:59.910 --> 00:04:03.572
But yeah, like I said before, the rules of
hooks is just something that you need to

66
00:04:03.572 --> 00:04:06.660
kind of learn, and
this is also in their documentation.

67
00:04:06.660 --> 00:04:10.436
And actually it will throw an error if
you're using hooks kind of out of order,

68
00:04:10.436 --> 00:04:13.071
like you cannot render a component and
then use a hook,

69
00:04:13.071 --> 00:04:16.760
it needs to all be like on the top
of the component, stuff like that.

70
00:04:16.760 --> 00:04:21.075
But honestly, once you know that
it's pretty fair to use, it's nice,

71
00:04:21.075 --> 00:04:25.320
it's maybe something to get used to
if you haven't used it before, but

72
00:04:25.320 --> 00:04:28.030
after that it's pretty nice.

73
00:04:28.030 --> 00:04:30.946
Okay, so here, we actually use
the solution that we had before with

74
00:04:30.946 --> 00:04:33.120
the container presentational pattern.

75
00:04:33.120 --> 00:04:37.815
And like I said before, hooks can
definitely replace that whole structure.

76
00:04:37.815 --> 00:04:42.209
So for this challenge, I would like you
to refactor this example that's using

77
00:04:42.209 --> 00:04:46.416
this container presentational pattern,
and use a hook for that instead.

78
00:04:46.416 --> 00:04:48.991
So if you need to get any inspiration,

79
00:04:48.991 --> 00:04:52.381
I guess it's pretty similar
to what we have here.

80
00:04:52.381 --> 00:04:55.062
So yeah,
I just create a use listings hook or

81
00:04:55.062 --> 00:04:58.407
name it anything you want as
long as it starts with use.

82
00:04:58.407 --> 00:05:03.491
[LAUGH]
&gt;&gt; Question, so what is the difference

83
00:05:03.491 --> 00:05:10.324
between the use custom hook versus
creating a reusable component?

84
00:05:10.324 --> 00:05:14.577
&gt;&gt; Well, it just simplifies like I think
if you create a reusable component,

85
00:05:14.577 --> 00:05:17.423
of course,
you we can also like add state to that.

86
00:05:17.423 --> 00:05:20.201
Like we did with it,
like a container component could,

87
00:05:20.201 --> 00:05:24.080
I guess be like a reusable
component that contains states.

88
00:05:24.080 --> 00:05:28.987
It's just harder to use that across an
application and not end up with like for

89
00:05:28.987 --> 00:05:31.494
nesting issues or like prop drilling.

90
00:05:31.494 --> 00:05:34.820
Like maybe you need to have many
components that need props,

91
00:05:34.820 --> 00:05:38.750
you need to wrap that around
every time if that makes sense.

92
00:05:38.750 --> 00:05:42.124
So hook makes is really easy to get
data in even the smallest component

93
00:05:42.124 --> 00:05:44.858
which we'll also cover and
like the provider pattern,

94
00:05:44.858 --> 00:05:47.550
which kind of shows or
talks about like shared states.

95
00:05:48.870 --> 00:05:52.870
But like if you're just using maybe
a single state like maybe in this case

96
00:05:52.870 --> 00:05:57.340
listings, it would have been fine to
use like ng container components.

97
00:05:57.340 --> 00:06:01.828
But in some cases, maybe they use hover,
it would really make sense to wrap every

98
00:06:01.828 --> 00:06:05.272
component that needs hover
logic within another component.

99
00:06:05.272 --> 00:06:08.886
Like readability, scalability,
all those things, but

100
00:06:08.886 --> 00:06:11.623
it works cuz like with
most things it works.

101
00:06:11.623 --> 00:06:16.183
So it's not like don't do that, but
I think once you've used a hook for

102
00:06:16.183 --> 00:06:20.760
that, yeah, you can see how much
easier it is to use and more readable.

