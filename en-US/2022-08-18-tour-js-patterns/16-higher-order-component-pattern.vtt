WEBVTT

1
00:00:00.090 --> 00:00:01.722
Well then, we go to the next pattern,

2
00:00:01.722 --> 00:00:03.821
which is the higher-order
component pattern.

3
00:00:06.179 --> 00:00:10.891
So, a higher-order component makes it
really easy to pass logic to other

4
00:00:10.891 --> 00:00:12.872
components by wrapping them.

5
00:00:12.872 --> 00:00:17.254
For example, like this component,
we have like a title component and

6
00:00:17.254 --> 00:00:20.817
we wrap that in with large font size,
so it makes it big and

7
00:00:20.817 --> 00:00:25.076
then with bold font weight to make
the font weight bigger or bolder.

8
00:00:25.076 --> 00:00:29.408
Now, essentially what a higher order
component does is it gets that

9
00:00:29.408 --> 00:00:31.232
components that it wraps and

10
00:00:31.232 --> 00:00:36.098
it automatically adds other props to
that component which it then returns.

11
00:00:36.098 --> 00:00:41.405
So for example here we have a with styles,
higher-order components and

12
00:00:41.405 --> 00:00:47.060
you see here that we're we create a style
object that has like the color red and

13
00:00:47.060 --> 00:00:48.632
then font size 1em.

14
00:00:48.632 --> 00:00:52.151
And then also we're merging props like in
case the component that we're wrapping

15
00:00:52.151 --> 00:00:55.575
already had the style prop, you wanna
make sure that we don't overwrite that.

16
00:00:55.575 --> 00:00:59.480
And then we've returned that
components with a new style, so

17
00:00:59.480 --> 00:01:03.852
this is pretty useful, I also see
that it's overflowing here a bit.

18
00:01:03.852 --> 00:01:07.172
But for example we just have a text
component that just has like the font

19
00:01:07.172 --> 00:01:08.533
family enter nothing else.

20
00:01:08.533 --> 00:01:12.374
But then we can make a new component
really easily which is the,

21
00:01:12.374 --> 00:01:16.598
or by wrapping it with the with styles,
higher-order components.

22
00:01:16.598 --> 00:01:20.188
So again, we have the separation
of concerns, we said before,

23
00:01:20.188 --> 00:01:23.648
cuz we have components that just
care about adding that data.

24
00:01:23.648 --> 00:01:27.049
And yeah, I guess the only downside and

25
00:01:27.049 --> 00:01:32.101
although I already showed that
before is that it can easily

26
00:01:32.101 --> 00:01:37.376
end up in naming collisions and
you may not always know that.

27
00:01:37.376 --> 00:01:43.741
So for in this case we add the style
prop to the element that we're wrapping,

28
00:01:43.741 --> 00:01:47.526
but maybe if we didn't
merge the props here.

29
00:01:47.526 --> 00:01:49.518
So we just added like the padding and
the margin and

30
00:01:49.518 --> 00:01:52.086
it's component already had
the style it would overwrite that.

31
00:01:52.086 --> 00:01:55.771
And in some cases when we have
that higher order components, and

32
00:01:55.771 --> 00:02:00.018
we add new props to it, we may not
always know that this gets overwritten.

33
00:02:00.018 --> 00:02:03.422
So sometimes you end up
in unexpected behavior,

34
00:02:03.422 --> 00:02:06.583
why is this problem not
what I expect it to be?

35
00:02:06.583 --> 00:02:09.511
So that's the only downside to
using higher-order components.

36
00:02:09.511 --> 00:02:14.534
So if you ever use that make sure to
always merge the props or at least kind

37
00:02:14.534 --> 00:02:19.669
of make sure that which props are modified
or added to those components.

38
00:02:19.669 --> 00:02:24.476
Yeah, you can also wrap multiple
higher order components, for example,

39
00:02:24.476 --> 00:02:28.761
we saw here is with large font size and
then with bold font weights.

40
00:02:28.761 --> 00:02:30.525
So this would have been wrapped twice,

41
00:02:30.525 --> 00:02:33.839
now sometimes it can be difficult to
know where certain styles come from or

42
00:02:33.839 --> 00:02:36.412
certain props come from cuz
it doesn't have to be style.

43
00:02:36.412 --> 00:02:40.298
I'll just use that as like
a simple example here, so yeah,

44
00:02:40.298 --> 00:02:44.808
it can kind of hinder the readability but
making it harder to debug and

45
00:02:44.808 --> 00:02:46.545
scale and all that stuff.

46
00:02:48.827 --> 00:02:52.712
All right,
we're already have another exercise here.

47
00:02:52.712 --> 00:02:58.446
So, I'm just going to show what
the solution is going to look like,

48
00:02:58.446 --> 00:02:59.505
should look like.

49
00:02:59.505 --> 00:03:02.876
So what you see here real quick is that
there's a little spinner while it's

50
00:03:02.876 --> 00:03:03.793
fetching the data.

51
00:03:03.793 --> 00:03:07.992
Now we want to or preferably we
want to reuse that spinner or

52
00:03:07.992 --> 00:03:10.832
multiple components of replication.

53
00:03:10.832 --> 00:03:13.050
Now in this one,
we're just using it here, but

54
00:03:13.050 --> 00:03:16.610
this would have been a reason to create
a higher-order component for this.

55
00:03:16.610 --> 00:03:20.783
So what I want you to do is to create a
higher-order component that adds this with

56
00:03:20.783 --> 00:03:21.295
loader.

57
00:03:21.295 --> 00:03:26.842
Or we can wrap the listings with
the with loader higher order components,

58
00:03:26.842 --> 00:03:30.522
which adds this spinner
while it's loading at.

59
00:03:30.522 --> 00:03:35.063
I showed some steps for fetch the data,
showed the loading spinner,

60
00:03:35.063 --> 00:03:37.657
which we're already importing here.

61
00:03:37.657 --> 00:03:41.169
And then, we can pass the fetch
data to the reps component,

62
00:03:41.169 --> 00:03:43.627
it's pretty similar to what we did here so

63
00:03:43.627 --> 00:03:47.720
if you need any inspiration from
somewhere, just take a look there.

