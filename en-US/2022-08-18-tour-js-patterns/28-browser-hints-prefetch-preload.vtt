WEBVTT

1
00:00:00.230 --> 00:00:05.055
So the first browser hints or a browser
hint is a hint that the browser uses in

2
00:00:05.055 --> 00:00:09.804
order to or that we can use to tell
the browser like, hey, these resources

3
00:00:09.804 --> 00:00:14.706
are important, make sure to fetch this
maybe before the user requested it or

4
00:00:14.706 --> 00:00:19.730
something just to have that
faster navigation or faster load.

5
00:00:19.730 --> 00:00:21.700
So one of them is prefetch.

6
00:00:21.700 --> 00:00:25.972
And a prefetch is an attribute
that we can use to fetch

7
00:00:25.972 --> 00:00:30.160
those resources in the background and
cache them.

8
00:00:30.160 --> 00:00:33.019
So whenever a user actually request them,
we can as quickly get it from cache

9
00:00:33.019 --> 00:00:35.310
instead of having to make a request
all the way to the server.

10
00:00:37.990 --> 00:00:44.005
So the browser will prefetch a resource
whenever the browser is idle and it's also

11
00:00:44.005 --> 00:00:50.032
calculated that it's got enough bandwidth
to actually prefetch that resource.

12
00:00:50.032 --> 00:00:52.430
So for example,
I think I'm showing it here.

13
00:00:53.460 --> 00:00:56.745
So if we have that route-based splitting
and we've seen maybe from our analytics

14
00:00:56.745 --> 00:00:59.800
that most of our users after going to
the website are going to the about page.

15
00:00:59.800 --> 00:01:01.820
I don't know,
maybe there's just something trendy there.

16
00:01:02.840 --> 00:01:06.078
So although we don't want to
have that in our initial bundle,

17
00:01:06.078 --> 00:01:07.464
we can still prefetch it.

18
00:01:07.464 --> 00:01:12.200
So when the browser is idle, has
the resources to do that, it'll cache it.

19
00:01:12.200 --> 00:01:14.869
So when the user then actually clicks
on it, it can just quickly get it from

20
00:01:14.869 --> 00:01:16.870
cache and we don't have to go
all the way to the server.

21
00:01:16.870 --> 00:01:20.499
Now, of course this is just based on
the route-based splitting example that we

22
00:01:20.499 --> 00:01:21.103
saw before.

23
00:01:21.103 --> 00:01:23.200
But prefetching could be for anything,

24
00:01:23.200 --> 00:01:27.084
maybe images that will show up a bit
later below the fold or any components,

25
00:01:27.084 --> 00:01:30.125
maybe that the search input
component that we saw before.

26
00:01:30.125 --> 00:01:34.212
If we know that most users will click
there even though it's still its own

27
00:01:34.212 --> 00:01:38.040
bundle we can just prefetch that
to make sure it's already cached.

28
00:01:38.040 --> 00:01:41.752
Yeah, so we can either use that
with just an html prefetch or

29
00:01:41.752 --> 00:01:47.240
in Webpack we can actually use another
magic comment called webpackPrefetch.

30
00:01:47.240 --> 00:01:49.854
And what this does is
when it bundles the code,

31
00:01:49.854 --> 00:01:53.250
it will just create a link
like this with that prefetch.

32
00:01:53.250 --> 00:01:55.807
Yeah, so
the trainers are pretty good because if we

33
00:01:55.807 --> 00:01:59.613
have a resource that should be prefetched,
we can deliver very fast loading

34
00:01:59.613 --> 00:02:03.061
time because that request doesn't
have to go all the way to a server,

35
00:02:03.061 --> 00:02:06.400
get this giant bundle,
instead they could just get it from cache.

36
00:02:06.400 --> 00:02:10.070
But of course, we have to make sure
that we only prefetch the resources that

37
00:02:10.070 --> 00:02:14.327
are actually required cuz we don't want to
unnecessarily fetch all this data, use our

38
00:02:14.327 --> 00:02:18.670
users bandwidth to fetch the data and then
cache it if they never end up using it.

39
00:02:18.670 --> 00:02:21.027
So don't use this everywhere,
just use this for

40
00:02:21.027 --> 00:02:23.571
the resources that are likely
to be requested soon.

41
00:02:23.571 --> 00:02:27.990
Now the next one is preload and this one
is a bit more aggressive than prefetch

42
00:02:27.990 --> 00:02:31.374
because with prefetch,
the browser will be like, okay,

43
00:02:31.374 --> 00:02:34.913
do I have enough bandwidth,
I'm idle, can I request this?

44
00:02:34.913 --> 00:02:38.930
But with a preload, it will download
the resource, it will get it.

45
00:02:38.930 --> 00:02:42.733
Actually your browser will,
at least Chrome will show you a warning,

46
00:02:42.733 --> 00:02:45.698
it'll be like, hey,
you preloaded this resource but

47
00:02:45.698 --> 00:02:48.870
it wasn't visible in the viewport
within three seconds.

48
00:02:48.870 --> 00:02:51.660
You should not be preloading this
cuz it wasn't that important.

49
00:02:53.720 --> 00:02:58.693
But for example, if for some reason
we wanted to have a landing page and

50
00:02:58.693 --> 00:03:01.240
the search flyout was always open.

51
00:03:03.270 --> 00:03:06.303
Yeah, so it wasn't based on a user
click or just always there but

52
00:03:06.303 --> 00:03:08.240
it still should be its own bundler.

53
00:03:08.240 --> 00:03:12.396
In that case we could preload that and
even though in this animation it's pretty

54
00:03:12.396 --> 00:03:15.290
slow of course,
this will happen super fast.

55
00:03:15.290 --> 00:03:19.810
So in that case this bundle request
will be in parallel with the main

56
00:03:19.810 --> 00:03:21.570
bundle request.

57
00:03:21.570 --> 00:03:25.396
So when it's fetching the main bundle,
it'll use it, it will cache it and

58
00:03:25.396 --> 00:03:27.483
then instantly use that bundle as well.

59
00:03:30.192 --> 00:03:32.370
Yeah, so
the implementation is pretty similar.

60
00:03:32.370 --> 00:03:35.028
So you can instead of using
prefetching use preload and

61
00:03:35.028 --> 00:03:39.260
also use a Webpack magic comment with
what that preload instead of prefetch.

62
00:03:39.260 --> 00:03:43.838
This is only after Webpack 4.3 I believe
before that you had to use some plugins

63
00:03:43.838 --> 00:03:45.061
and preload plugin.

64
00:03:45.061 --> 00:03:49.890
Yeah, so a preload you will often use for
maybe images that are instantly

65
00:03:49.890 --> 00:03:54.655
available like a banner image that
might usually take a while to fetch.

66
00:03:54.655 --> 00:03:57.653
We can preload it to make sure that
that has already been fetched or

67
00:03:57.653 --> 00:03:58.750
fonts stuff like that.

68
00:03:58.750 --> 00:04:01.310
Just anything that's important
on the initial render.

69
00:04:01.310 --> 00:04:06.346
Yeah, of course the performance here,
it's just important to

70
00:04:06.346 --> 00:04:12.607
make sure that you're only preloading
the stuff that's actually necessary.

71
00:04:13.972 --> 00:04:17.647
All right, lots to take in but
that was the last thing up for

72
00:04:17.647 --> 00:04:19.450
that performance pattern.

73
00:04:19.450 --> 00:04:22.900
So maybe they will make a bit more sense
when we talk about rendering patterns.

74
00:04:22.900 --> 00:04:27.421
&gt;&gt; For the browser hints,
the implementation examples you

75
00:04:27.421 --> 00:04:32.760
showed with the link,
you already know the bundler name.

76
00:04:32.760 --> 00:04:33.260
&gt;&gt; Yeah.

77
00:04:34.310 --> 00:04:38.178
&gt;&gt; I guess would you normally if
you're using Webpack as bundler,

78
00:04:38.178 --> 00:04:40.520
would you just do the magic comments?

79
00:04:40.520 --> 00:04:42.206
&gt;&gt; Exactly.
&gt;&gt; [INAUDIBLE], okay.

80
00:04:42.206 --> 00:04:46.641
&gt;&gt; Like in this case if we're also using
the magic comment with the chunk name,

81
00:04:46.641 --> 00:04:49.827
we do know the bundle name but
in most cases you don't or

82
00:04:49.827 --> 00:04:53.830
you're not going to add this
chunk name for all these bundles.

83
00:04:53.830 --> 00:04:56.692
So yeah, in most cases you would
just use these magic comments so

84
00:04:56.692 --> 00:05:00.510
to let Webpack automatically do that, but
not if you're using images or something.

85
00:05:00.510 --> 00:05:05.365
If you know your banner image wants to
prefetch or preload that actually or

86
00:05:05.365 --> 00:05:07.179
font stuff like that, so.

