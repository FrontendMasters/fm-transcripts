WEBVTT

1
00:00:00.360 --> 00:00:05.197
So if you wanna share stateful logic
throughout your application using Hooks,

2
00:00:05.197 --> 00:00:07.300
you can use the Provider Pattern.

3
00:00:07.300 --> 00:00:11.348
And this is kind of a combination
between the context API and.

4
00:00:11.348 --> 00:00:13.784
Well, you don't have to use Hooks but

5
00:00:13.784 --> 00:00:17.146
we'll see later that that's
definitely an extra.

6
00:00:17.146 --> 00:00:21.256
So with a Provider Pattern we can say or
for example we have like this site again

7
00:00:21.256 --> 00:00:23.925
and we wanna have like a dark mode and
a light mode.

8
00:00:23.925 --> 00:00:28.579
So all the components on that website need
to know, okay, what's the current theme,

9
00:00:28.579 --> 00:00:30.834
it needs to get that data from somewhere.

10
00:00:30.834 --> 00:00:35.031
Now usually, I was just gonna go here real
quick is what happens, is when we wanna

11
00:00:35.031 --> 00:00:39.015
implement logic like this, we end up
with something called prop drilling.

12
00:00:39.015 --> 00:00:43.135
For example, if we have that state in a
very high component like the app component

13
00:00:43.135 --> 00:00:46.790
and the listings all the way down
the component tree need to know that.

14
00:00:46.790 --> 00:00:49.000
We have to like pass it
as like props theme.

15
00:00:49.000 --> 00:00:50.080
This is called prop drilling.

16
00:00:51.340 --> 00:00:55.075
You've probably seen this before where
you just like pass a component props and

17
00:00:55.075 --> 00:00:58.307
that component has a child component,
you have to pass props there,

18
00:00:58.307 --> 00:01:01.000
which has a child component,
all that stuff.

19
00:01:01.000 --> 00:01:05.118
Now this can be super difficult to work
with and it's bad for like readability.

20
00:01:05.118 --> 00:01:10.187
You just don't really know where stuff
goes, where it comes from, all that stuff.

21
00:01:10.187 --> 00:01:16.231
Now the contextAPI in React uses bit or
is a bit different.

22
00:01:16.231 --> 00:01:21.110
So instead we can wrap the components that
actually need the data in something called

23
00:01:21.110 --> 00:01:21.874
a Provider.

24
00:01:21.874 --> 00:01:25.691
And these components if they
need to have that data or

25
00:01:25.691 --> 00:01:29.870
that stateful data,
they can opt in to use that Context.

26
00:01:29.870 --> 00:01:31.100
If they don't, that's fine.

27
00:01:32.120 --> 00:01:35.235
Because another thing that we saw with
Prop drilling is every time the state

28
00:01:35.235 --> 00:01:37.361
changes, I'm just going to
scroll up a bit in app,

29
00:01:37.361 --> 00:01:41.530
all the components re-render, even the
components that don't care about the data.

30
00:01:41.530 --> 00:01:43.370
This is of course,
something that we want to avoid.

31
00:01:43.370 --> 00:01:45.822
But sometimes it's pretty
hard to avoid that,

32
00:01:45.822 --> 00:01:50.175
especially when many components care about
the data like further down the tree, but

33
00:01:50.175 --> 00:01:53.170
tha like stateful logic
comes from higher up.

34
00:01:53.170 --> 00:01:57.838
Yeah, so with the Provider Pattern, we can
wrap the components that care about it or

35
00:01:57.838 --> 00:02:02.178
at least the parent most components that
has all the children to care about it in

36
00:02:02.178 --> 00:02:02.933
a Provider.

37
00:02:02.933 --> 00:02:07.161
And this Provider provides a React
context which is essentially

38
00:02:07.161 --> 00:02:11.232
a component like a stateful
components that other components

39
00:02:11.232 --> 00:02:15.200
within the Provider can opt
in to consume that data.

40
00:02:15.200 --> 00:02:17.160
So we have like a provider and
we have consumers.

41
00:02:19.810 --> 00:02:21.964
For example,
here we have the ThemeContext.

42
00:02:21.964 --> 00:02:25.870
This is just the kinda based on
the example that we saw earlier.

43
00:02:25.870 --> 00:02:29.908
So for example, now we have like
state lights by default, but

44
00:02:29.908 --> 00:02:33.420
we also have like a theme and then set it.

45
00:02:33.420 --> 00:02:37.840
Now the landing page can be wrapped in
the Provider because the components within

46
00:02:37.840 --> 00:02:39.994
the landing page care about this data.

47
00:02:39.994 --> 00:02:43.659
Some refer to them, maybe not TopNav
directly, maybe not main directly, but

48
00:02:43.659 --> 00:02:44.990
somewhere down there.

49
00:02:44.990 --> 00:02:46.932
They care about this data.

50
00:02:46.932 --> 00:02:48.700
Now in this case TopNav
does care about it.

51
00:02:48.700 --> 00:02:49.915
It's a Consumer.

52
00:02:49.915 --> 00:02:52.864
So here we are against the render prop.

53
00:02:52.864 --> 00:03:00.180
So it gets the theme component that we
passed here as a value from the Provider.

54
00:03:00.180 --> 00:03:04.210
So that is essentially like that Context.

55
00:03:04.210 --> 00:03:08.375
So they can consume this Context and
based on the state changes that we make in

56
00:03:08.375 --> 00:03:12.235
the Provider, we can either have
a background color of light or dark.

57
00:03:12.235 --> 00:03:20.335
And then we can also have a toggle
that uses the setTheme state update.

58
00:03:20.335 --> 00:03:23.560
So, even though we see that
Main itself doesn't care about,

59
00:03:23.560 --> 00:03:27.770
like we don't have any bugs with Main but
maybe the toggle is within Main.

60
00:03:27.770 --> 00:03:31.001
But we don't have to care, we don't have
to worry about the re-render of Main if

61
00:03:31.001 --> 00:03:33.963
the Theme Provider update it,
because it doesn't directly consume it.

62
00:03:33.963 --> 00:03:37.443
Only the companies that consume it
directly will update on a state update.

63
00:03:37.443 --> 00:03:42.118
Yeah, this is kind of where the Hooks come
in because it's really nice to combine

64
00:03:42.118 --> 00:03:43.505
this with React Hooks.

65
00:03:43.505 --> 00:03:48.782
So for example, if we have a ThemeContext
which is just like stateful objects and

66
00:03:48.782 --> 00:03:53.843
we have the Provider here which I like
to just create a direct like component.

67
00:03:53.843 --> 00:03:55.327
For it you don't have to do that,

68
00:03:55.327 --> 00:03:58.096
you can also just wrap it directly
in like this Provider here.

69
00:03:58.096 --> 00:03:59.940
But I just like to export it as Provider.

70
00:03:59.940 --> 00:04:01.576
So it's like the same everywhere.

71
00:04:01.576 --> 00:04:06.212
And then we can also create a custom Hook
that's called like useTheme Context,

72
00:04:06.212 --> 00:04:10.240
cuz one of the built in Hooks within
React is the useContext hook.

73
00:04:10.240 --> 00:04:14.085
And this is the way that other components
can opt in to consume the values of

74
00:04:14.085 --> 00:04:15.280
the Provider.

75
00:04:15.280 --> 00:04:18.161
But this just makes it a bit
more clear like, okay,

76
00:04:18.161 --> 00:04:20.314
this is just a useTheme Context hook.

77
00:04:20.314 --> 00:04:22.890
So now for example,
the TopNav cares about the theme.

78
00:04:22.890 --> 00:04:26.585
So instead of using like this component,
and then there's render prop,

79
00:04:26.585 --> 00:04:30.220
which is fine, but it's,
I don't know, it's not too pretty.

80
00:04:30.220 --> 00:04:32.830
We can also just use this Hook,
like use the Hook.

81
00:04:32.830 --> 00:04:34.357
So anytime that theme updates,

82
00:04:34.357 --> 00:04:37.390
it actually also just gets it
the same way that we saw before.

83
00:04:37.390 --> 00:04:40.880
Same with Toggle, because it also
exposes that setTheme toggle.

84
00:04:41.880 --> 00:04:44.608
Yeah, so this is a really
nice way to use Hooks, but

85
00:04:44.608 --> 00:04:46.647
this time in like a stateful context.

86
00:04:46.647 --> 00:04:51.428
So we're actually using it to
change state or to consume state.

87
00:04:51.428 --> 00:04:55.975
Yeah, so
one thing just to keep in mind is that,

88
00:04:55.975 --> 00:05:03.601
if your component doesn't necessarily
care about what the Provider context or

89
00:05:03.601 --> 00:05:07.497
I guess here what the Context provides.

90
00:05:07.497 --> 00:05:11.593
Just make sure that you don't accidentally
end up using it because that will

91
00:05:11.593 --> 00:05:12.770
cause a re-render.

92
00:05:12.770 --> 00:05:16.674
But yeah, so only the components
that actually should consume it,

93
00:05:16.674 --> 00:05:17.983
which is pretty nice.

94
00:05:17.983 --> 00:05:21.747
Yeah, and of course it's better for like
scalability because we don't run into that

95
00:05:21.747 --> 00:05:25.037
render props issue where it's hard to
know where certain props come from,

96
00:05:25.037 --> 00:05:25.893
it's just nicer.

97
00:05:25.893 --> 00:05:30.255
It's way more readable in my opinion,
yeah.

98
00:05:30.255 --> 00:05:33.482
We can see that here, so
we have another challenge.

99
00:05:33.482 --> 00:05:36.148
So the application below
contains a listings component and

100
00:05:36.148 --> 00:05:37.315
an input components.

101
00:05:37.315 --> 00:05:41.708
So what we have here is we have this input
components and we're again using that

102
00:05:41.708 --> 00:05:45.970
useListings Hook that we saw before,
in order to render the listings here,

103
00:05:45.970 --> 00:05:49.318
I know it's really bad CSS but
to render the listings here.

104
00:05:49.318 --> 00:05:53.780
However, we're also using this
components in the listings.

105
00:05:53.780 --> 00:05:57.814
So what ends up happening and
I'm just going to open this in a new tab,

106
00:05:57.814 --> 00:06:02.908
is that we're unnecessarily fetching the
listings twice, which you can I guess see.

107
00:06:02.908 --> 00:06:04.827
Let me just reload this.

108
00:06:04.827 --> 00:06:11.440
I don't know what container hard
reload is the way to go, right here.

109
00:06:11.440 --> 00:06:15.997
Yeah, so you can see that it fetched it
twice cuz we're calling useListings twice

110
00:06:15.997 --> 00:06:19.410
both in the inputs and
in the listings components.

111
00:06:19.410 --> 00:06:20.104
So instead,

112
00:06:20.104 --> 00:06:24.137
what I would like you to do is to create
a Provider that wraps both the input and

113
00:06:24.137 --> 00:06:28.410
the listings and that consumes this or
that uses this useListings Hook.

114
00:06:28.410 --> 00:06:31.854
But it makes sure that it just fetches
it once because it can pass it down or

115
00:06:31.854 --> 00:06:34.745
it can provide it to these
consumers input and the listings.

116
00:06:34.745 --> 00:06:38.250
So we don't accidentally
fetch it twice for no reason

