WEBVTT

1
00:00:00.280 --> 00:00:03.010
All right, so
next is the prototype pattern.

2
00:00:03.010 --> 00:00:07.076
And this is probably a pattern that
you have used many times when working

3
00:00:07.076 --> 00:00:10.200
with JavaScript, but
you may not have known it.

4
00:00:10.200 --> 00:00:15.130
So what we saw with the factory
pattern is that it's pretty

5
00:00:15.130 --> 00:00:18.360
easy to have many of the same objects.

6
00:00:18.360 --> 00:00:22.971
For example, in this example, we have
a factory function like createDog [LAUGH].

7
00:00:22.971 --> 00:00:25.707
So we wanna create many dogs,
maybe we have a name and an age.

8
00:00:25.707 --> 00:00:30.658
And also, all dogs can bark when
we console the name is barking,

9
00:00:30.658 --> 00:00:32.317
and we have wagTail.

10
00:00:32.317 --> 00:00:34.664
Now, this is totally doable.

11
00:00:34.664 --> 00:00:37.055
It's fine, this works.

12
00:00:37.055 --> 00:00:40.447
However, what's happening here is that
whenever we are creating those new

13
00:00:40.447 --> 00:00:43.309
objects, for every object,
we're also allocating memory for

14
00:00:43.309 --> 00:00:44.435
all the functions here.

15
00:00:44.435 --> 00:00:47.387
So even though the whack tail and
bark functions are identical for

16
00:00:47.387 --> 00:00:51.680
all the objects, we're still allocating
new memory for each and every one of them.

17
00:00:51.680 --> 00:00:53.715
So this is not very memory efficient.

18
00:00:53.715 --> 00:00:54.345
Now, instead,

19
00:00:54.345 --> 00:00:57.640
what we can do in JavaScript is use
something called the prototype pattern.

20
00:00:57.640 --> 00:01:01.593
And this is where the classes come in,
because everything on a class that's

21
00:01:01.593 --> 00:01:05.690
defined directly on the body is
considered to be a part of the prototype.

22
00:01:05.690 --> 00:01:10.756
And the constructor is the individual,
or the unique object that gets returned.

23
00:01:10.756 --> 00:01:14.252
So any functionality that is
shared between those many

24
00:01:14.252 --> 00:01:16.912
objects can be defined on the class body.

25
00:01:16.912 --> 00:01:23.120
So what we see here is that we've now
moved the bark and the wagTail methods.

26
00:01:23.120 --> 00:01:27.385
Instead of having them directly
on these objects that we created,

27
00:01:27.385 --> 00:01:32.196
we now go up the prototype chain,
as to say, or go down to prototype chain.

28
00:01:32.196 --> 00:01:33.940
People use them synonymously.

29
00:01:33.940 --> 00:01:36.670
And instead,
it's now on that dog prototype.

30
00:01:36.670 --> 00:01:42.650
So whenever we invoke a function here,
I think this is just an example.

31
00:01:42.650 --> 00:01:47.940
So we can just say a dog1 or
2, and then bark index.js.

32
00:01:47.940 --> 00:01:51.234
So you can see here that
we've created many new

33
00:01:51.234 --> 00:01:54.114
dog instances that just say name, age.

34
00:01:54.114 --> 00:01:57.964
Actually, I will show this in a browser
console, because they're just a bit

35
00:01:57.964 --> 00:02:02.670
better at showing the prototype, so
you can kind of see what's going on here.

36
00:02:02.670 --> 00:02:07.143
I'll just open it in here,

37
00:02:07.143 --> 00:02:10.839
if that's all right.

38
00:02:10.839 --> 00:02:16.359
I'm just going to do, Okay,

39
00:02:16.359 --> 00:02:20.020
so we've just created many new dogs,
again, dog1 and dog2.

40
00:02:20.020 --> 00:02:24.547
So when we just logged dog1, you can
see that there's only name and age.

41
00:02:24.547 --> 00:02:28.380
Now, you might think okay, but
whereas it was bark and wagTail,

42
00:02:28.380 --> 00:02:29.922
cuz we can still use that.

43
00:02:29.922 --> 00:02:31.778
Now, whenever we log this dog again,

44
00:02:31.778 --> 00:02:34.504
I'm just going to clear this
just to make it cleared up.

45
00:02:34.504 --> 00:02:35.915
I'm just going to make this a bit bigger.

46
00:02:35.915 --> 00:02:39.368
You can see that there is a prototype
object, yeah, these logs.

47
00:02:39.368 --> 00:02:43.808
And this prototype object is essentially,
like you can see here,

48
00:02:43.808 --> 00:02:48.898
it looks very familiar to the dog we
just created, cuz we had a constructor.

49
00:02:48.898 --> 00:02:52.638
And then we also added the bark and
wagTail methods to this class object.

50
00:02:52.638 --> 00:02:54.730
So here we can see that bark and wagTail.

51
00:02:54.730 --> 00:02:57.070
Those methods are available
on the prototype.

52
00:02:57.070 --> 00:03:00.910
And this prototype is shared among
all the objects that we just created.

53
00:03:00.910 --> 00:03:02.283
So any dog instance, or

54
00:03:02.283 --> 00:03:07.160
any instance from the class automatically
also has access to those methods.

55
00:03:07.160 --> 00:03:10.910
And we don't have to worry about
allocating a space in memory for

56
00:03:10.910 --> 00:03:16.585
those methods, because we can
just add it to the prototype Now,

57
00:03:16.585 --> 00:03:20.783
yeah, like I said, having that prototype
pattern is extremely memory efficient,

58
00:03:20.783 --> 00:03:23.752
because we don't really have
to worry about duplication.

59
00:03:23.752 --> 00:03:28.534
But you can also extend
classes kind of infinitely.

60
00:03:28.534 --> 00:03:31.592
In which case, it can be pretty difficult
to kind of understand where certain

61
00:03:31.592 --> 00:03:32.872
properties may be coming from.

62
00:03:32.872 --> 00:03:34.728
I don't know if it's clear.

63
00:03:34.728 --> 00:03:38.301
But for example, you have a border collie,
or we have an animal class, and

64
00:03:38.301 --> 00:03:42.170
all animals have a name and a cell counts
that's kind of unique to an animal.

65
00:03:42.170 --> 00:03:43.398
Then we also have mammals.

66
00:03:43.398 --> 00:03:47.173
Now, a mammal is an animal, so it should
have all the properties of an animal, but

67
00:03:47.173 --> 00:03:48.710
a mammal also drinks milk.

68
00:03:48.710 --> 00:03:51.570
So for that specific mammal,
we have to drink milk method.

69
00:03:51.570 --> 00:03:55.772
And then we have canine, which is
a mammal, so it can drink milk, and

70
00:03:55.772 --> 00:03:57.667
it has a name and a cell counts.

71
00:03:57.667 --> 00:04:01.352
And it also has a smell method, and
so on, all the way down to dog,

72
00:04:01.352 --> 00:04:05.446
which can wag its tail, and then
a border collie, which can hurt sheep.

73
00:04:05.446 --> 00:04:09.522
So they get more and
more explicit every time, or unique.

74
00:04:09.522 --> 00:04:12.468
But of course,
if we have that new border collie, and

75
00:04:12.468 --> 00:04:17.220
we get the property cell count, it can
be like, okay, where did that come from?

76
00:04:17.220 --> 00:04:18.352
Is that on the border collie?

77
00:04:18.352 --> 00:04:21.430
And then you have to go all
the way down that prototype chain.

78
00:04:21.430 --> 00:04:26.304
Now, when I said you've probably
used the prototype pattern how many

79
00:04:26.304 --> 00:04:31.274
times before is because whenever we have,
I don't know, any object.

80
00:04:31.274 --> 00:04:33.770
So const person is { name: "Lydia" }.

81
00:04:33.770 --> 00:04:38.219
So on this person,
you will also find a person,

82
00:04:38.219 --> 00:04:43.006
because everything that
we create in JavaScript,

83
00:04:43.006 --> 00:04:47.347
or all the objects that
we create in JavaScript

84
00:04:47.347 --> 00:04:52.388
automatically inherit from
that object prototype.

85
00:04:52.388 --> 00:04:56.625
So this is why we have all this
functionality that you may have seen

86
00:04:56.625 --> 00:05:02.195
whenever we're using any type of data type
on an object, like toString or valueOff.

87
00:05:02.195 --> 00:05:06.523
So even though we didn't determine
that on the object itself,

88
00:05:06.523 --> 00:05:12.087
JavaScript has gave that to us because
it's an instance from that object class.

89
00:05:12.087 --> 00:05:17.710
Now the same goes for I think string,
we have all that primitive data types.

90
00:05:17.710 --> 00:05:21.245
I guess if we have name,
I guess you cannot really

91
00:05:21.245 --> 00:05:25.265
see like that in the DevTools we get,
so that has new string.

92
00:05:25.265 --> 00:05:27.180
I think maybe this is a prototype or
something.

93
00:05:27.180 --> 00:05:29.520
I don't know, I don't know how
you can see that in DevTools.

94
00:05:29.520 --> 00:05:33.735
That's essentially where we get
all those built-in methods from,

95
00:05:33.735 --> 00:05:37.690
it's from those primitive
data type prototypes.

96
00:05:37.690 --> 00:05:43.022
So what we saw with factory pattern
before is that it might have been better

97
00:05:43.022 --> 00:05:48.670
if these objects that we created here
had some kind of shared properties.

98
00:05:48.670 --> 00:05:51.270
I'm just trying to find the, yeah, here.

99
00:05:51.270 --> 00:05:53.910
I mean, in here, they're all unique.

100
00:05:53.910 --> 00:05:57.231
So it doesn't necessarily make sense to
use a prototype pattern here because there

101
00:05:57.231 --> 00:05:59.040
is nothing to share
among all those objects.

102
00:05:59.040 --> 00:06:00.505
They all have unique values.

103
00:06:00.505 --> 00:06:04.030
Book Two title is not
the same as Book Three title.

104
00:06:04.030 --> 00:06:08.042
But maybe if they had some kind of method,
I don't know what method could be on

105
00:06:08.042 --> 00:06:10.973
a book, ad sale or something,
or sell, I don't know.

106
00:06:10.973 --> 00:06:13.788
It's something that is
shared among all of them,

107
00:06:13.788 --> 00:06:17.457
then a prototype pattern
would've made sense.

108
00:06:17.457 --> 00:06:22.151
Yeah, so in there are actually many ways
to create a prototype either just with

109
00:06:22.151 --> 00:06:24.780
a class, or with the object.create method.

110
00:06:24.780 --> 00:06:27.744
Yeah, but I'm only showing
examples with a class here,

111
00:06:27.744 --> 00:06:30.659
just because it's a bit more readable,
in my opinion.

112
00:06:34.060 --> 00:06:37.120
Yeah, so
I think then we're done with the exercise.

113
00:06:37.120 --> 00:06:40.431
So we have a factory function here again,
which creates a user, and

114
00:06:40.431 --> 00:06:43.110
we only pass a firstName,
lastName and email.

115
00:06:43.110 --> 00:06:45.697
But on every user,
we also have some functions, or

116
00:06:45.697 --> 00:06:48.839
some methods like checkLastOnline,
sendEmail and delete.

117
00:06:48.839 --> 00:06:51.508
So instead of creating
a factory function here,

118
00:06:51.508 --> 00:06:55.541
I want you to use the prototype pattern
to create those users instead, and

119
00:06:55.541 --> 00:06:58.220
be a bit more memory
efficient with everything.

