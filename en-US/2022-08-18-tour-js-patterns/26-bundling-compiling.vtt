WEBVTT

1
00:00:00.000 --> 00:00:03.570
Well, I guess that concludes
the section on React patterns.

2
00:00:03.570 --> 00:00:06.812
So we still have two sections,
but they're kind of different.

3
00:00:06.812 --> 00:00:09.623
They're not patterns like we
discussed with the design patterns or

4
00:00:09.623 --> 00:00:10.518
the React patterns.

5
00:00:10.518 --> 00:00:16.454
They're more ways of thinking about,
how do we want to render our website,

6
00:00:16.454 --> 00:00:19.722
which is here, the rendering patterns?

7
00:00:19.722 --> 00:00:22.359
And then also just how
do we use the imports,

8
00:00:22.359 --> 00:00:25.723
the modules that we saw before
with the module pattern?

9
00:00:25.723 --> 00:00:28.547
And what are all the steps
that our code takes or

10
00:00:28.547 --> 00:00:33.336
has to take before a user can actually
see it, and how can we optimize for that?

11
00:00:33.336 --> 00:00:35.543
So that is going to be the next sections.

12
00:00:35.543 --> 00:00:38.909
Yeah, I don't know if there should
be a break in between or not, but

13
00:00:38.909 --> 00:00:40.692
[LAUGH] otherwise I can just keep on.

14
00:00:40.692 --> 00:00:42.929
&gt;&gt; [INAUDIBLE]
&gt;&gt; Okay, cool.

15
00:00:42.929 --> 00:00:48.453
In the case, before we start with
performance patterns, let's just talk

16
00:00:48.453 --> 00:00:54.161
about everything that we need to do before
we can actually ship it to the user.

17
00:00:54.161 --> 00:00:57.384
So any clients or JavaScript in
our application has to get shipped

18
00:00:57.384 --> 00:00:59.149
to the client in one way or another.

19
00:00:59.149 --> 00:01:03.133
And in order to do that, we need to make
sure that it can do a couple of things.

20
00:01:03.133 --> 00:01:04.089
Well, the first thing,

21
00:01:04.089 --> 00:01:06.737
of course, is that it has to be
executable in a browser environment.

22
00:01:06.737 --> 00:01:09.359
Because the fact that it
works in our VS Code,

23
00:01:09.359 --> 00:01:14.259
doesn't necessarily mean that old browsers
support the syntax that we're using.

24
00:01:14.259 --> 00:01:17.834
And we also want to make sure that
the JavaScript that we're fetching is

25
00:01:17.834 --> 00:01:18.619
not too large.

26
00:01:18.619 --> 00:01:22.432
We don't wanna have a huge bundle
that takes a long time to download,

27
00:01:22.432 --> 00:01:26.934
use user bandwidth that eventually cost
users a lot of money and stuff like that.

28
00:01:26.934 --> 00:01:29.036
So in order to do this, we use bundlers.

29
00:01:29.036 --> 00:01:34.186
Now, there are many bundlers out there,
but what a bundler does is it bundles our

30
00:01:34.186 --> 00:01:39.143
application into one or multiple files,
depending on your configuration.

31
00:01:39.143 --> 00:01:43.171
And this makes it possible to execute or
make our code executable in other

32
00:01:43.171 --> 00:01:46.087
environments as well based
on your configuration.

33
00:01:46.087 --> 00:01:50.461
So essentially, what under bundler
does is it has a config file.

34
00:01:50.461 --> 00:01:53.660
In this case, I'm using Webpack, but
there are many others out there,

35
00:01:53.660 --> 00:01:55.029
I will also list them later on.

36
00:01:55.029 --> 00:02:00.816
But it has an entry file, and it starts
to bundle your code from that entry file.

37
00:02:00.816 --> 00:02:06.106
In this example, the entry point is
index.js, which imports module three,

38
00:02:06.106 --> 00:02:09.804
which imports module two,
which imports module one.

39
00:02:09.804 --> 00:02:12.718
So it starts to look at index.js,
and it's like, okay,

40
00:02:12.718 --> 00:02:16.351
I see that you want to use module three
from the module three file, cool.

41
00:02:16.351 --> 00:02:19.492
I'll make sure to bundle that in
the index.js cuz it's going to need it.

42
00:02:19.492 --> 00:02:22.643
And then module three in
turn imports module two, so

43
00:02:22.643 --> 00:02:25.445
it also makes sure that
it's in there as well.

44
00:02:25.445 --> 00:02:30.022
So we don't have a bundle of JavaScript
code that references things that

45
00:02:30.022 --> 00:02:31.383
aren't available.

46
00:02:31.383 --> 00:02:36.392
So that is the main goal of a bundler,
is to make sure that the bundle that

47
00:02:36.392 --> 00:02:41.569
we're creating has all the code that
is necessary to run certain script,

48
00:02:41.569 --> 00:02:44.179
certain page, and stuff like that.

49
00:02:44.179 --> 00:02:46.476
Now, like I said,
there are a few popular bundlers.

50
00:02:46.476 --> 00:02:48.889
In these examples,
I will just use Webpack,

51
00:02:48.889 --> 00:02:51.947
just because it's right now
the most commonly used one.

52
00:02:51.947 --> 00:02:56.241
But maybe you've also heard of Parcel,
Rollup, which are also great bundlers.

53
00:02:56.241 --> 00:02:59.810
Yeah, I'll be using Webpack
in the following examples.

54
00:02:59.810 --> 00:03:01.770
Then we also have compilers.

55
00:03:01.770 --> 00:03:04.561
So a compiler converts JavaScripts or

56
00:03:04.561 --> 00:03:09.539
TypeScripts into a version of
JavaScript that browsers could run.

57
00:03:09.539 --> 00:03:14.135
Now, of course, maybe it depends on
your configuration, but in some cases,

58
00:03:14.135 --> 00:03:18.259
you know that your users are still
on Internet Explorer or something.

59
00:03:18.259 --> 00:03:21.624
Now, that browser basically
supports almost nothing.

60
00:03:21.624 --> 00:03:25.193
So even though we want to use
the latest features in JavaScript,

61
00:03:25.193 --> 00:03:28.957
we have to make sure that we can use
a compiler that turns our code into

62
00:03:28.957 --> 00:03:31.892
executable code that can
run in Internet Explorer.

63
00:03:31.892 --> 00:03:35.511
Cuz obviously, we don't want to write
our code and always think about, okay,

64
00:03:35.511 --> 00:03:36.385
what am I writing?

65
00:03:36.385 --> 00:03:37.388
Can I use that?

66
00:03:37.388 --> 00:03:39.637
Is that executable in
the browsers that my users use?

67
00:03:39.637 --> 00:03:42.248
So we just want to use
the latest technologies,

68
00:03:42.248 --> 00:03:44.873
we want to use the latest
JavaScript features.

69
00:03:44.873 --> 00:03:47.369
So, yeah, a compiler is great for that.

70
00:03:47.369 --> 00:03:50.544
An example here is using private classes.

71
00:03:50.544 --> 00:03:53.215
So for example, I don't know if I
should zoom in here or not, but

72
00:03:53.215 --> 00:03:54.314
we have a SecretManager.

73
00:03:54.314 --> 00:03:56.532
And this is pretty new syntax here.

74
00:03:56.532 --> 00:04:00.299
We can actually use private
values within classes.

75
00:04:00.299 --> 00:04:03.491
Now, obviously,
a lot of browsers do not support this yet.

76
00:04:03.491 --> 00:04:06.835
So if we were to fetch this file in a
browser, and the browser would be like, I

77
00:04:06.835 --> 00:04:10.573
don't know what to do with this, I cannot
interpret this, I don't know what to do.

78
00:04:10.573 --> 00:04:14.501
So a common or a well known transpiler
here is, for example, Babel,

79
00:04:14.501 --> 00:04:19.109
which then turns this code and based
on your configuration, it's like, okay,

80
00:04:19.109 --> 00:04:23.489
I can make this code executable still,
so you can write it in the latest way.

81
00:04:23.489 --> 00:04:28.617
But I will transform it into a way that
your browser will also understand,

82
00:04:28.617 --> 00:04:31.689
but still resulting in
the same end result.

83
00:04:31.689 --> 00:04:37.907
Oop, yeah, so a compiler doesn't bundle
code, that's what the bundler does.

84
00:04:37.907 --> 00:04:42.874
It just transforms it into another
version based on a certain configuration.

85
00:04:44.459 --> 00:04:47.793
Yeah, I don't know, if you've used
TypeScript, that's also a compiler cuz

86
00:04:47.793 --> 00:04:50.400
there's TypeScript into a certain
version of JavaScripts.

87
00:04:50.400 --> 00:04:54.533
But in the following examples, I'll
probably be using Babel or TypeScript,

88
00:04:54.533 --> 00:04:56.235
I'm not sure, both are great.

89
00:04:56.235 --> 00:05:00.771
And then there's also the minifier,
because as you can see here,

90
00:05:00.771 --> 00:05:05.145
even though the code that we wrote
was pretty small and concise,

91
00:05:05.145 --> 00:05:08.075
the result of the compiler was pretty big.

92
00:05:08.075 --> 00:05:12.767
Cuz we have so much code, it needs to add
all these other functionality in order to

93
00:05:12.767 --> 00:05:14.700
make it executable in a browser.

94
00:05:14.700 --> 00:05:16.960
Now, one minifier is, for example, Terser.

95
00:05:16.960 --> 00:05:19.792
And when you're using Webpack,
you can also add Terser plugins and

96
00:05:19.792 --> 00:05:20.542
stuff like that.

97
00:05:20.542 --> 00:05:24.959
So the bundler automatically takes
care of also minimizing that code, or

98
00:05:24.959 --> 00:05:28.822
minifying, sorry, that code,
for example, in production.

99
00:05:28.822 --> 00:05:32.995
So we can make sure that the code
that we write is super readable.

100
00:05:32.995 --> 00:05:34.812
We don't really have to
think too much about,

101
00:05:34.812 --> 00:05:36.310
do I really want to add that function?

102
00:05:36.310 --> 00:05:39.094
This might increase the bundle size for
our users.

103
00:05:39.094 --> 00:05:42.768
Because the minifier will take care of
that, and will make sure that it's super,

104
00:05:42.768 --> 00:05:43.418
super small.

105
00:05:43.418 --> 00:05:47.271
For example, here function t,
I have no idea what that is, but

106
00:05:47.271 --> 00:05:50.560
this also refers to these
functions that we saw here.

107
00:05:50.560 --> 00:05:53.407
It just changes names, stuff like that.

108
00:05:53.407 --> 00:05:56.525
So yeah, this makes sure that
our bundle size is very small.

109
00:05:56.525 --> 00:05:59.745
Now, popular minifiers are Terser or
Uglify.

110
00:05:59.745 --> 00:06:04.299
So, now in 2022, there are also many
developers working on tools that combine

111
00:06:04.299 --> 00:06:06.589
all the things that we just talked about.

112
00:06:06.589 --> 00:06:11.426
So, for example, SWC, which is
a Rust-based compiler, and bundler,

113
00:06:11.426 --> 00:06:12.447
and minifier.

114
00:06:12.447 --> 00:06:16.619
And there's also ESBuild, which is a
Ro-based compiler, bundler, and minifier.

115
00:06:16.619 --> 00:06:20.106
So the only issue is that right now,
as I'm giving this workshop,

116
00:06:20.106 --> 00:06:22.991
they don't support as many
features as Webpack does.

117
00:06:22.991 --> 00:06:27.089
So sometimes it's still better to use
Webpack if you're using certain features

118
00:06:27.089 --> 00:06:28.004
that are needed.

119
00:06:28.004 --> 00:06:30.036
But it's definitely nice that there are so

120
00:06:30.036 --> 00:06:34.044
many developers developing better tools
out there, because adding the bundler and

121
00:06:34.044 --> 00:06:36.885
the compiler and
minifier always takes quite a lot of work.

122
00:06:36.885 --> 00:06:40.334
And it's just a pain to set up when
you just wanna develop a code and

123
00:06:40.334 --> 00:06:43.808
ship your project, and
you have to think about all these things.

124
00:06:43.808 --> 00:06:48.500
Now, there are also certain practices that
we need to think of when we think about

125
00:06:48.500 --> 00:06:49.405
performance.

126
00:06:49.405 --> 00:06:51.108
Now, one of them is bundle splitting.

127
00:06:51.108 --> 00:06:55.844
So what we just saw is that Webpack
creates this one big bundle from our entry

128
00:06:55.844 --> 00:06:56.381
point.

129
00:06:56.381 --> 00:06:59.308
It contains all the code that is
necessary in order to run that.

130
00:06:59.308 --> 00:07:04.283
But of course, a larger bundle can lead
to an increased amount of loading time,

131
00:07:04.283 --> 00:07:06.601
processing time, execution time.

132
00:07:06.601 --> 00:07:11.719
And yeah, users on low-end devices,
especially with slower networks,

133
00:07:11.719 --> 00:07:16.361
will get a bad performance,
your website will load pretty slowly.

134
00:07:16.361 --> 00:07:21.724
Now, in order to avoid larger bundles, we
can also create multiple smaller bundles.

135
00:07:21.724 --> 00:07:26.206
So instead of fetching everything,
this one big bundle at once,

136
00:07:26.206 --> 00:07:30.536
we can just kinda split them up
into multiple smaller bundles.

137
00:07:30.536 --> 00:07:32.063
Then there's also tree shaking.

138
00:07:32.063 --> 00:07:35.012
So tree shaking is basically
eliminating dead code,

139
00:07:35.012 --> 00:07:39.866
cuz in many cases, maybe we're importing
something, or we're creating a function.

140
00:07:39.866 --> 00:07:44.173
But it's not actually used anywhere,
it's just kind of there,

141
00:07:44.173 --> 00:07:46.380
but it's not referenced at all.

142
00:07:46.380 --> 00:07:49.955
For example, here we have an input,
and we have the validateInput, and

143
00:07:49.955 --> 00:07:51.432
then we also have the format.

144
00:07:51.432 --> 00:07:53.839
But here, you see that we're only
importing the validateInput.

145
00:07:53.839 --> 00:07:58.684
So this one is never used, never
referenced in our application whatsoever.

146
00:07:58.684 --> 00:08:02.274
Now, normally, we could just
bundle this in that bundle, but

147
00:08:02.274 --> 00:08:05.344
this would just add to the bundle size,
which is bad.

148
00:08:05.344 --> 00:08:09.008
So instead, a bundler usually takes care
of automatically also eliminating that

149
00:08:09.008 --> 00:08:11.673
code that we're not using,
which is called tree shaking.

150
00:08:11.673 --> 00:08:16.568
This is a bit tricky to do,
so it's not always perfect.

151
00:08:16.568 --> 00:08:21.527
But it definitely tries to eliminate
as much code that we don't need from

152
00:08:21.527 --> 00:08:24.729
the end bundle, I guess,
which is shown here.

153
00:08:24.729 --> 00:08:26.350
So yeah, it just removes that.

154
00:08:26.350 --> 00:08:31.098
There is no reference here to formatInput
at all, it's only to validateInput.

155
00:08:31.098 --> 00:08:35.770
So these are just some things to keep in
mind when we're talking about performance

156
00:08:35.770 --> 00:08:36.455
patterns.

157
00:08:36.455 --> 00:08:38.816
Any questions so far?

158
00:08:38.816 --> 00:08:39.861
Yeah.

159
00:08:39.861 --> 00:08:40.840
&gt;&gt; [LAUGH] Okay, a couple.

160
00:08:40.840 --> 00:08:42.539
One about tree shaking?

161
00:08:42.539 --> 00:08:47.162
Does it make a difference, I don't
know if maybe this isn't really a tree

162
00:08:47.162 --> 00:08:52.014
shaking question, but to do destructured
imports for React, for example,

163
00:08:52.014 --> 00:08:57.036
instead of doing import react in every
file you just import the things you need?

164
00:08:57.036 --> 00:08:58.985
&gt;&gt; Yeah.
&gt;&gt; Does that help to minimize the tree

165
00:08:58.985 --> 00:09:03.157
shaking, or is it like, those things
reference other things behind the scenes?

166
00:09:03.157 --> 00:09:08.375
&gt;&gt; So, well, it kind of depends on how
the library authors structure the module.

167
00:09:08.375 --> 00:09:12.798
It used to be the case that, yeah,
whenever you import it, like import react

168
00:09:12.798 --> 00:09:17.649
from React would include more code, and
for example, import use state from React.

169
00:09:17.649 --> 00:09:21.993
But the way it works now is that they've
restructured it, so that when you're only

170
00:09:21.993 --> 00:09:26.105
using React that use state, it will make
sure to not include everything else.

171
00:09:26.105 --> 00:09:31.584
But this is also part of your
configuration for your bundler.

172
00:09:31.584 --> 00:09:34.808
Sometimes you can also just turn it off
and be like, just include everything.

173
00:09:34.808 --> 00:09:38.614
And in some cases, you have files that,
for example, have side effects.

174
00:09:38.614 --> 00:09:43.299
For example, when you just import a large
file, the bundler cannot always know like,

175
00:09:43.299 --> 00:09:45.625
I don't know if you're going to use this.

176
00:09:45.625 --> 00:09:49.103
So just make sure that it's not
eliminating code that you might actually

177
00:09:49.103 --> 00:09:51.163
end up using, it will still include that.

178
00:09:51.163 --> 00:09:54.871
So there are just many things that are
kind of not insecure, but it's kinda like,

179
00:09:54.871 --> 00:09:56.503
it doesn't always know what to do.

180
00:09:56.503 --> 00:10:01.653
Your bundler doesn't want to make too many
assumptions and maybe break your code.

181
00:10:01.653 --> 00:10:05.964
So that's kinda why I said,
tree shaking, it is very good right now,

182
00:10:05.964 --> 00:10:10.569
it's in a much better state, but
it's still not as perfect as it can be, or

183
00:10:10.569 --> 00:10:14.103
as many people expect, but
we're only getting better.

184
00:10:14.103 --> 00:10:16.482
Yeah, so this also really depends
on how you structure your own code.

185
00:10:16.482 --> 00:10:17.934
So, it's definitely not
just developer's fault.

186
00:10:17.934 --> 00:10:21.983
It's just sometimes kinda tricky to make
sure that you're also optimizing your code

187
00:10:21.983 --> 00:10:23.904
to make it as tree shakable as possible.

188
00:10:23.904 --> 00:10:28.844
But in a lot of cases,
this really only is kind of important for

189
00:10:28.844 --> 00:10:30.435
library authors
&gt;&gt; And

190
00:10:30.435 --> 00:10:34.869
then I did have one question
about bundle splitting as well.

191
00:10:34.869 --> 00:10:40.875
So, when you're bundling, you're following
this chain of all of your imports.

192
00:10:40.875 --> 00:10:44.446
When you're bundle splitting,
is it undoing that in any sense, or

193
00:10:44.446 --> 00:10:46.586
is it something very, very different?

194
00:10:46.586 --> 00:10:47.900
&gt;&gt; No, it's something different, and

195
00:10:47.900 --> 00:10:49.839
we're kind of going to talk
about this later on as well.

196
00:10:49.839 --> 00:10:50.950
&gt;&gt; Okay.

197
00:10:50.950 --> 00:10:54.069
&gt;&gt; But with bundle splitting,
we can essentially say these parts of

198
00:10:54.069 --> 00:10:56.574
the application are just
kind of standalone parts.

199
00:10:56.574 --> 00:11:00.078
They don't necessarily rely on each other,
although they can,

200
00:11:00.078 --> 00:11:02.891
a bundle can require another
bundle if they have to.

201
00:11:02.891 --> 00:11:05.711
But it doesn't create a bundle and
then split it,

202
00:11:05.711 --> 00:11:10.226
it just outputs multiple bundles from
multiple entries, if that makes sense.

203
00:11:10.226 --> 00:11:13.884
So you're not just bundling your entire
application into one big bundle.

204
00:11:13.884 --> 00:11:18.653
It's just kind of splitting it based on
components, for example, on components or

205
00:11:18.653 --> 00:11:21.488
maybe on pages,
just parts of your application.

206
00:11:23.006 --> 00:11:25.908
&gt;&gt; Is there any difference between
bundle splitting and code splitting, or

207
00:11:25.908 --> 00:11:27.091
are those interchangeable?

208
00:11:27.091 --> 00:11:28.515
&gt;&gt; I believe they're interchangeable.

209
00:11:28.515 --> 00:11:30.088
&gt;&gt; Okay.
&gt;&gt; But I may be wrong, but

210
00:11:30.088 --> 00:11:33.237
I believe they're interchangeable, yeah.

211
00:11:33.237 --> 00:11:33.891
&gt;&gt; I have a question.

212
00:11:33.891 --> 00:11:34.495
&gt;&gt; Sure.

213
00:11:34.495 --> 00:11:37.618
&gt;&gt; So
when you work in a large organizations,

214
00:11:37.618 --> 00:11:43.451
you have a boilerplate code that comes
with Webpack, Babel, and everything.

215
00:11:43.451 --> 00:11:46.330
&gt;&gt; Yeah,
&gt;&gt; As a normal day-to-day developer,

216
00:11:46.330 --> 00:11:51.610
are these things different than what
comes with the boilerplate code,

217
00:11:51.610 --> 00:11:54.345
or we need to enable those features?

218
00:11:54.345 --> 00:11:59.386
&gt;&gt; I mean, you can, if you see that you're
working with a codebase, and it doesn't

219
00:11:59.386 --> 00:12:04.149
have all the performance features
enabled that maybe Webpack now provides.

220
00:12:04.149 --> 00:12:08.026
I don't know if you're using maybe Webpack
4, you can maybe upgrade to Webpack 5 and

221
00:12:08.026 --> 00:12:08.994
have more features.

222
00:12:08.994 --> 00:12:12.342
It's definitely worth it to see
the plugins that are out there,

223
00:12:12.342 --> 00:12:15.380
cuz Webpack has plugins and
presets or stuff like that, so

224
00:12:15.380 --> 00:12:18.233
you can kind of customize
your bundling based on that.

225
00:12:18.233 --> 00:12:22.641
But working with Webpack is difficult,
it is so tricky, especially,

226
00:12:22.641 --> 00:12:24.997
like you said, in larger code bases.

227
00:12:24.997 --> 00:12:30.340
So I think if you're working on a larger
code base, I would say it's definitely

228
00:12:30.340 --> 00:12:35.708
worth it to see like, okay, what does
the Webpack config currently look like?

229
00:12:35.708 --> 00:12:40.374
Can it add more optimizations,
like maybe minimizing, preloading?

230
00:12:40.374 --> 00:12:41.396
And we'll see that later.

231
00:12:41.396 --> 00:12:46.312
But I think it's more important, maybe
if you start a new project or something,

232
00:12:46.312 --> 00:12:51.013
that you might consider using the latest
Webpack, or maybe using one of those

233
00:12:51.013 --> 00:12:54.937
combination tools to make it even faster,
like SWC or ESBuild.

234
00:12:54.937 --> 00:12:57.826
I feel like that didn't really answer
your question, but I hope it makes sense.

235
00:12:57.826 --> 00:13:01.019
I know that if you're working
in a larger organization,

236
00:13:01.019 --> 00:13:03.489
it's a pain to change your Webpack config.

237
00:13:03.489 --> 00:13:07.544
So yeah, don't break anything,
[LAUGH] yeah.

238
00:13:07.544 --> 00:13:08.924
&gt;&gt; One follow-up question.

239
00:13:08.924 --> 00:13:10.696
&gt;&gt; Sure.
So in your mind,

240
00:13:10.696 --> 00:13:13.596
what defines a larger bundle?

241
00:13:13.596 --> 00:13:17.677
Is it in the performance uploading,
or is it the size of the bundle?

242
00:13:17.677 --> 00:13:20.816
&gt;&gt; So it's the size of the bundle,
but that also,

243
00:13:20.816 --> 00:13:24.281
in almost all cases,
affects loading time as well.

244
00:13:24.281 --> 00:13:26.912
When you're actually
outputting with Webpack,

245
00:13:26.912 --> 00:13:30.856
they usually have those little colors,
and they actually tell you, hey,

246
00:13:30.856 --> 00:13:35.573
this bundle is when it's red, cuz it's too
big, which might affect your performance.

247
00:13:35.573 --> 00:13:36.703
I cannot really show that right now.

248
00:13:36.703 --> 00:13:39.803
I won't go too deep into Webpack,
by the way, cuz it's so

249
00:13:39.803 --> 00:13:44.004
precise that I feel like there's another
Frontend Masters workshop on that.

250
00:13:44.004 --> 00:13:49.468
But, yeah, a larger bundle size is
over a certain amount of bytes.

251
00:13:49.468 --> 00:13:51.531
It's different for everyone,
I'm not entirely sure how much that is.

252
00:13:51.531 --> 00:13:55.653
But I know that also Webpack tells you,
maybe consider code splitting this bundle,

253
00:13:55.653 --> 00:13:56.883
cuz it's really large.

254
00:13:56.883 --> 00:13:59.326
And we will talk about
the static imports and

255
00:13:59.326 --> 00:14:03.565
dynamic imports with which you can
actually create those smaller bundles.

256
00:14:03.565 --> 00:14:07.516
Yeah, so a larger bundle is just a large
bundle that also then in turn affects

257
00:14:07.516 --> 00:14:12.046
the loading time, download time, parsing
time, execution time, stuff like that.

