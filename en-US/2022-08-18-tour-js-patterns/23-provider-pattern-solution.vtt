WEBVTT

1
00:00:00.500 --> 00:00:04.544
So the first thing that I like to do is
to put all the providers anything with

2
00:00:04.544 --> 00:00:07.101
context in a separate
folder called context.

3
00:00:07.101 --> 00:00:09.251
You don't have to do that,
it's just what I personally prefer.

4
00:00:09.251 --> 00:00:12.671
If you like anything else,
feel free to do that.

5
00:00:12.671 --> 00:00:14.248
Now here,
I'm going to do it listings provider.

6
00:00:16.482 --> 00:00:19.337
And in here I'm just going
to import react from react.

7
00:00:19.337 --> 00:00:21.740
I'm also going to import the use listing,

8
00:00:21.740 --> 00:00:26.029
because this is essentially what we'll
be using afterwards use listings.

9
00:00:26.029 --> 00:00:28.120
Hopefully I, yep.

10
00:00:28.120 --> 00:00:34.020
Now, I'm going to tap
that listings provider.

11
00:00:34.020 --> 00:00:38.603
And this one I use this use listings hook,
cuz it needs to pet those listings.

12
00:00:38.603 --> 00:00:42.320
I'm just gonna say if no
listings then return no, or

13
00:00:42.320 --> 00:00:46.550
loading spinner,
I don't have that component right now.

14
00:00:46.550 --> 00:00:48.521
Normally I would've added a nice spinner.

15
00:00:48.521 --> 00:00:52.859
And otherwise return the context
of we're going to create now.

16
00:00:52.859 --> 00:00:56.974
So, here's like constant listings
context is react dot create context.

17
00:00:56.974 --> 00:00:59.675
And the initial value is no,
like we don't have anything yet.

18
00:00:59.675 --> 00:01:02.742
It's kind of just like an empty object.

19
00:01:02.742 --> 00:01:06.600
So, here we can say okay, so, from this
context, I want to have the provider.

20
00:01:06.600 --> 00:01:12.554
And the value that we wanna pass
to the consumers are the listings,

21
00:01:12.554 --> 00:01:16.805
in here I'm going to use
prop set children, and

22
00:01:16.805 --> 00:01:20.761
then listings context up provider, boom.

23
00:01:20.761 --> 00:01:24.444
Now, like a set before I like to
create a custom hook for this.

24
00:01:24.444 --> 00:01:28.060
So maybe like- function
use listings context and

25
00:01:28.060 --> 00:01:30.740
then return reacts dot use context.

26
00:01:30.740 --> 00:01:35.964
So this hook lets us consume the context
that we're providing to that

27
00:01:35.964 --> 00:01:41.292
children off their listings provider,
so that is listings context.

28
00:01:41.292 --> 00:01:42.326
Cool.

29
00:01:42.326 --> 00:01:48.368
Now, the parent most component that wraps
both the input and the listings is an app.

30
00:01:48.368 --> 00:01:54.192
So, we need to go back here and import
this provider from context listings,

31
00:01:54.192 --> 00:02:00.290
provider listings provider not listing and
we are just going to wrap that here.

32
00:02:04.099 --> 00:02:05.434
Cool.

33
00:02:05.434 --> 00:02:08.682
So now we just need to
update the input component.

34
00:02:08.682 --> 00:02:14.486
I don't want it to use
listing hook instead,

35
00:02:14.486 --> 00:02:19.832
I wanted to use the Use listings context,

36
00:02:19.832 --> 00:02:24.283
use, sorry, listing provider.

37
00:02:24.283 --> 00:02:28.227
So in here, I get this,
it is a named export, and

38
00:02:28.227 --> 00:02:31.422
I also have to change that in listings.

39
00:02:31.422 --> 00:02:35.965
So I'm gonna say use listing context
from context listings provider or

40
00:02:35.965 --> 00:02:39.610
listings context and
then we're going to use that here.

41
00:02:39.610 --> 00:02:44.603
Now, I don't really have to show that
anymore because we that provider already

42
00:02:44.603 --> 00:02:48.793
renders know that if there is no data and
that reps that component.

43
00:02:48.793 --> 00:02:53.186
So right now we have access to
the listings through this context that we

44
00:02:53.186 --> 00:02:54.905
provide in this provider.

45
00:02:54.905 --> 00:02:59.487
So we're only calling useless things once
and the data that we get from that we

46
00:02:59.487 --> 00:03:04.370
are passing to both, well, to any child
component that would like to consume it.

47
00:03:04.370 --> 00:03:08.228
But in is case,
we're only consuming it here and input and

48
00:03:08.228 --> 00:03:09.974
then again in enlisting.

49
00:03:09.974 --> 00:03:13.638
So the nice way of sharing data
across multiple components and

50
00:03:13.638 --> 00:03:16.951
making sure that especially
if you're fetching data or

51
00:03:16.951 --> 00:03:20.058
something to minimize like
the amount of API calls.

52
00:03:20.058 --> 00:03:22.500
Because that can get pretty both laggy and

53
00:03:22.500 --> 00:03:25.517
expensive as if it's your
own API stuff like that.

54
00:03:25.517 --> 00:03:29.552
So yeah, this is a pretty easy way
to use the provider pattern and

55
00:03:29.552 --> 00:03:32.333
to share data across multiple components.

56
00:03:32.333 --> 00:03:34.267
Any questions about the solution?

57
00:03:34.267 --> 00:03:37.771
&gt;&gt; Yeah, I got one question that
you mentioned re-renders and

58
00:03:37.771 --> 00:03:39.144
if I'm a consumer, and

59
00:03:39.144 --> 00:03:43.557
let's say the context is pretty complex
it's got a lot of returns, right?

60
00:03:43.557 --> 00:03:45.752
But I'm only consuming one of them and

61
00:03:45.752 --> 00:03:50.693
context updates something else that I'm
not consuming, am I not gonna re-render or

62
00:03:50.693 --> 00:03:53.180
is it an all or
nothing thing with context?

63
00:03:53.180 --> 00:03:57.993
&gt;&gt; As far as I know so for example right
now we're actually returning listings,

64
00:03:57.993 --> 00:04:02.804
but maybe this is like an object I just
have to change this real quick otherwise

65
00:04:02.804 --> 00:04:05.708
it's guaranteed freak out events listings.

66
00:04:05.708 --> 00:04:08.053
But maybe we also had
another value in here.

67
00:04:08.053 --> 00:04:12.649
I don't know, it could be data set data is
react use state and let me know if this

68
00:04:12.649 --> 00:04:16.982
doesn't answer your question, but
maybe we also have like data in here.

69
00:04:16.982 --> 00:04:21.502
Now, if data updates, but the input is
only consuming listings it will not

70
00:04:21.502 --> 00:04:26.196
re-render, so only the consumers that
also use that data will re-render.

71
00:04:26.196 --> 00:04:30.188
I may be mistaken here, but
this is the last thing that I learned.

72
00:04:30.188 --> 00:04:33.625
So, if that's not right,
do let me know that.

73
00:04:33.625 --> 00:04:41.103
Yeah, it will only render if you're
actually consuming the updated value.

74
00:04:41.103 --> 00:04:42.701
Any more question?

75
00:04:42.701 --> 00:04:46.244
&gt;&gt; So this is using like the built in
React stuff like create context and

76
00:04:46.244 --> 00:04:46.872
whatever.

77
00:04:46.872 --> 00:04:49.488
Is there kind of a more
generic idea of a provider?

78
00:04:49.488 --> 00:04:50.514
&gt;&gt; Provider patterns?

79
00:04:50.514 --> 00:04:54.188
&gt;&gt; Pretty much like at least in
the context of React you would just

80
00:04:54.188 --> 00:04:55.120
always-
&gt;&gt; Yeah,

81
00:04:55.120 --> 00:04:59.449
when we're talking about React and we're
talking about the provider pattern this is

82
00:04:59.449 --> 00:05:01.986
definitely pattern that
we're thinking about.

83
00:05:01.986 --> 00:05:06.023
I think in like in general let's see
what like defines a provider pattern,

84
00:05:06.023 --> 00:05:10.456
I don't know if there's like make data
available to multiple child components.

85
00:05:10.456 --> 00:05:14.040
So, it could really be any
like wrapped component,

86
00:05:14.040 --> 00:05:18.934
I guess it passes data in like an easy
way to multiple child components.

87
00:05:18.934 --> 00:05:22.493
But when talking about React and
I'm not entirely sure like what defines

88
00:05:22.493 --> 00:05:26.245
the provider pattern maybe in other
languages you can use like other tools.

89
00:05:26.245 --> 00:05:28.658
I'm not entirely sure I don't dare
to make any statements there.

90
00:05:28.658 --> 00:05:31.381
But like, no, that's not true.

91
00:05:31.381 --> 00:05:34.296
Yeah, with React,
it's always with like the context API.

92
00:05:34.296 --> 00:05:38.685
And if you wanna use
hooks like I did here,

93
00:05:38.685 --> 00:05:43.212
use hooks but you don't have to, so cool.

94
00:05:43.212 --> 00:05:47.417
&gt;&gt; There was a question online
that was in a complex app,

95
00:05:47.417 --> 00:05:50.137
you might have lots of providers.

96
00:05:50.137 --> 00:05:52.822
So you just Brett,
do you wrap your app with all providers or

97
00:05:52.822 --> 00:05:55.735
just certain components in that
case where you've got a bunch?

98
00:05:55.735 --> 00:05:57.376
&gt;&gt; Yeah, I mean, in this case,

99
00:05:57.376 --> 00:06:01.583
I'm wrapping it in within this app just
because like that's the parent most

100
00:06:01.583 --> 00:06:04.888
component that shares children
that both need this input.

101
00:06:04.888 --> 00:06:06.581
But always try to make sure and

102
00:06:06.581 --> 00:06:11.197
also like you can read this multiple times
if the data doesn't have to be shared.

103
00:06:11.197 --> 00:06:14.848
For example, if I read this and
like the input listings,

104
00:06:14.848 --> 00:06:19.200
now this will create two different
providers for each of them item.

105
00:06:19.200 --> 00:06:23.203
So like I could, if you want to reuse
certain data in like smaller sections of

106
00:06:23.203 --> 00:06:25.593
your application, you can totally do that.

107
00:06:25.593 --> 00:06:29.877
And that's also obviously, way more
performant like try to make sure that

108
00:06:29.877 --> 00:06:33.073
you're only wrapping the parent
most component that or

109
00:06:33.073 --> 00:06:35.592
the kind of the common ancestor component.

110
00:06:35.592 --> 00:06:37.167
I don't know if that makes sense.

111
00:06:37.167 --> 00:06:42.420
But don't unnecessarily wrap your
application in all those providers,

112
00:06:42.420 --> 00:06:47.417
even though it will only update if it
consumes it it can still cause like

113
00:06:47.417 --> 00:06:49.210
unexpected re renders.

114
00:06:49.210 --> 00:06:54.573
And it also makes it like a lot
more readable to understand

115
00:06:54.573 --> 00:07:00.175
which component parts
are consuming certain data, yeah.

116
00:07:00.175 --> 00:07:02.852
&gt;&gt; I'm a bit lost here.

117
00:07:02.852 --> 00:07:08.606
When previous lighting if I'm right
whenever I used a provider the child

118
00:07:08.606 --> 00:07:13.718
covenant was interested in has to
have a consumer portion of it.

119
00:07:13.718 --> 00:07:18.299
&gt;&gt; Yeah, so that was, let's see.

120
00:07:18.299 --> 00:07:20.596
So you can either use it, I guess
is what you're referring to, right?

121
00:07:20.596 --> 00:07:21.544
Yes.

122
00:07:21.544 --> 00:07:25.275
So you can either use this or
you can use the use context hook.

123
00:07:25.275 --> 00:07:28.083
So this is like,
either or, but personally,

124
00:07:28.083 --> 00:07:31.979
I prefer to use the use context
hook just because it's smaller.

125
00:07:31.979 --> 00:07:34.474
It's personally more readable to me, but

126
00:07:34.474 --> 00:07:38.230
feel free to use that this render
props pattern with a consumer.

