WEBVTT

1
00:00:00.607 --> 00:00:08.294
I'm just going to copy these requirements
real quick cuz I will forget that.

2
00:00:08.294 --> 00:00:09.202
Let's see.

3
00:00:13.499 --> 00:00:17.232
Okay, this was pasted without any,
okay, it's fine.

4
00:00:17.232 --> 00:00:18.674
So first, we need to create a new proxy.

5
00:00:18.674 --> 00:00:22.536
So I'm just going to create
const userProxy = newProxy and

6
00:00:22.536 --> 00:00:25.558
then the target object
is going to be the user.

7
00:00:25.558 --> 00:00:30.410
So first, we have to get the, or
we will just add the get method.

8
00:00:30.410 --> 00:00:35.006
So in here the username, actually we just
have one gets, this is easier to read.

9
00:00:35.006 --> 00:00:39.262
When a property is retrieved so
that's when the get method is executed,

10
00:00:39.262 --> 00:00:41.159
change the output to a new Date.

11
00:00:41.159 --> 00:00:46.043
And then the value of
property is the target.

12
00:00:46.043 --> 00:00:48.309
So let's see console.log.

13
00:00:50.525 --> 00:00:54.631
And instead of this target property,

14
00:00:54.631 --> 00:01:00.672
I'm just going to do Reflect.get target,
property.

15
00:01:00.672 --> 00:01:04.126
I'm just typing this all out now,
I mean, this could have been just TEP,

16
00:01:04.126 --> 00:01:05.028
all those things.

17
00:01:05.028 --> 00:01:09.828
But just to make it a bit more clear,
so target, property.

18
00:01:09.828 --> 00:01:13.261
So now let's just see if it works.

19
00:01:13.261 --> 00:01:20.983
[LAUGH] So
we do userProxy.age node index js.

20
00:01:20.983 --> 00:01:24.198
Yes, so now we logged it with a timestamp.

21
00:01:24.198 --> 00:01:26.936
I know we could have used a different
timestamp, this is always really long.

22
00:01:26.936 --> 00:01:33.752
And then the value of age is 42,
I think I have some, here.

23
00:01:36.224 --> 00:01:40.752
So that's what we needed to do to add
logging to when a property is retrieved,

24
00:01:40.752 --> 00:01:42.785
now we just need to add the set one.

25
00:01:42.785 --> 00:01:47.429
So this one gets to target,
the property that we're changing,

26
00:01:47.429 --> 00:01:51.481
I cannot type, and
the value that we are changing it to.

27
00:01:51.481 --> 00:01:56.494
So with these two requirements where
the username property has to be a string

28
00:01:56.494 --> 00:02:01.288
that only contains letters and
has to be at least three characters long.

29
00:02:01.288 --> 00:02:03.990
No, of course, you can add this
validation in many different ways.

30
00:02:03.990 --> 00:02:09.351
But I'm just going to, if property, so
the property that we're changing is age,

31
00:02:09.351 --> 00:02:13.269
or wait, did I say age or
username, sorry, is username.

32
00:02:13.269 --> 00:02:19.875
If it's not, isAllLetters,
[LAUGH] isAllLetters,

33
00:02:19.875 --> 00:02:25.599
the value that we're
changing it to then throw

34
00:02:25.599 --> 00:02:31.176
new Error ("You can only
use letters in your

35
00:02:31.176 --> 00:02:36.347
username"), or something like that.

36
00:02:36.347 --> 00:02:40.477
Or if the username is shorter
than three characters,

37
00:02:40.477 --> 00:02:43.245
cuz we also had that requirements.

38
00:02:43.245 --> 00:02:46.837
So if the value length
is shorter than three,

39
00:02:46.837 --> 00:02:53.558
throw new Error("please provide a valid
username"), or something like that.

40
00:02:53.558 --> 00:02:55.910
So now let's say that we
want to add the userProxy.

41
00:02:55.910 --> 00:02:57.594
Let's just see if this works.

42
00:02:57.594 --> 00:03:00.934
Or otherwise so if that's not the case,

43
00:03:00.934 --> 00:03:06.347
we want to just return Reflect.sets
cuz we're setting in here.

44
00:03:06.347 --> 00:03:08.153
That's again the target, property value.

45
00:03:08.153 --> 00:03:12.234
So then it successfully REST
request to the actual userProxy.

46
00:03:12.234 --> 00:03:15.382
So now we will use that username is ha,
actually ha.

47
00:03:15.382 --> 00:03:20.221
So this shouldn't be doable because we
were checking that it's at least three

48
00:03:20.221 --> 00:03:23.759
characters long, so
let's see if this throws an error.

49
00:03:26.041 --> 00:03:27.660
Yeah, so please provide a valid username.

50
00:03:27.660 --> 00:03:33.188
So right now, we didn't,
if we do haha, It just works.

51
00:03:33.188 --> 00:03:35.917
Actually, I could have
just add another log

52
00:03:35.917 --> 00:03:39.623
here of successfully updated
your username or something.

53
00:03:39.623 --> 00:03:43.611
And if it's all letter, so
now let's change it to a haha10,

54
00:03:43.611 --> 00:03:48.443
this should not work right here,
you can only use letters in your username.

55
00:03:48.443 --> 00:03:52.164
So now we have the first one, which is the
username property has to be a string that

56
00:03:52.164 --> 00:03:55.033
only contains letters and
is at least three characters long.

57
00:03:55.033 --> 00:03:59.277
Next one is the email property
has to be a valid email address.

58
00:03:59.277 --> 00:04:03.153
So in here, if property is email,

59
00:04:03.153 --> 00:04:10.520
if it's not I think is valid email or
something I named it, yeah.

60
00:04:10.520 --> 00:04:13.177
The value that we're passing it,

61
00:04:13.177 --> 00:04:18.409
then throw new Error("please
provide a valid email") please.

62
00:04:18.409 --> 00:04:21.964
So now if we do email is john@doe.com,

63
00:04:21.964 --> 00:04:28.026
actually I'll just add a log here
just to say successfully updated or

64
00:04:28.026 --> 00:04:31.805
something, so it successfully updates.

65
00:04:31.805 --> 00:04:35.517
But if we do an invalid email maybe
like johndoe.com, which is not an email,

66
00:04:35.517 --> 00:04:38.271
it should throw an error,
please provide a valid email.

67
00:04:38.271 --> 00:04:40.888
So that's one validation.

68
00:04:40.888 --> 00:04:44.135
Next, the age property has to be
a number and has to be at least 18.

69
00:04:44.135 --> 00:04:48.716
So if property is age,

70
00:04:48.716 --> 00:04:54.992
if type of value is not number.

71
00:04:54.992 --> 00:04:59.200
And, of course, you can add these
if statement in better ways.

72
00:04:59.200 --> 00:05:02.642
This is just to kind of simply
show that this is one possibility,

73
00:05:02.642 --> 00:05:05.404
("please provide a valid age") or
something.

74
00:05:05.404 --> 00:05:09.921
And then if value is lower than 18,

75
00:05:09.921 --> 00:05:17.812
throw a new Error("You have to
be at least 18 years old").

76
00:05:17.812 --> 00:05:22.677
So now when I say, I have an invalid age,
maybe it's somehow a string,

77
00:05:22.677 --> 00:05:25.120
which can happen with JavaScript.

78
00:05:25.120 --> 00:05:27.664
We say please provide a valid age,
this was not valid.

79
00:05:27.664 --> 00:05:34.889
Or if maybe he is too young, he's 17,
You have to be at least 18 years old.

80
00:05:34.889 --> 00:05:40.397
So yeah, again, this is pretty nice to
just validate to make sure that the users

81
00:05:40.397 --> 00:05:45.347
that we're creating are all the users
who are expecting, questions?

82
00:05:45.347 --> 00:05:50.814
&gt;&gt; Are higher order functions generally
used to implement proxy patterns?

83
00:05:50.814 --> 00:05:55.746
&gt;&gt; They can, I don't know if that's
usually what people do, cuz now with this

84
00:05:55.746 --> 00:06:00.308
newProxy object that's built in,
you don't really have to do that.

85
00:06:00.308 --> 00:06:04.650
But it's definitely a useful way to
kind of add it as almost a middleware,

86
00:06:04.650 --> 00:06:05.707
like a mediator.

87
00:06:05.707 --> 00:06:07.432
Before we add anything,

88
00:06:07.432 --> 00:06:12.360
you can use the built in proxy in
whatever way to ensure that the requests

89
00:06:12.360 --> 00:06:17.148
that are made to the target object
are always what we're expecting.

90
00:06:17.148 --> 00:06:20.238
I don't know if there's a normal way that
people usually do it, I haven't seen it.

91
00:06:20.238 --> 00:06:22.269
I've only mainly seen it like this, but

92
00:06:22.269 --> 00:06:25.806
I'm sure that everyone comes up with
their own implementation of it.

93
00:06:25.806 --> 00:06:30.309
&gt;&gt; Could intercepting request and
response objects be a use case?

94
00:06:30.309 --> 00:06:37.721
&gt;&gt; Yeah, absolutely, so that's essentially
what it's doing, it is intercepting.

95
00:06:37.721 --> 00:06:43.105
Or do you mean with middleware, express
middleware which is kind of different.

96
00:06:43.105 --> 00:06:49.371
I mean, it kinda acts as a middleware
function which is another pattern,

97
00:06:49.371 --> 00:06:56.158
but, yeah, I guess you can compare it
definitely to middleware but it's not.

98
00:06:56.158 --> 00:07:01.125
A middleware is usually used for one
single entry point to multiple objects.

99
00:07:01.125 --> 00:07:05.338
But with a proxy it's only proxy to one,
it's proxy object, proxy object.

100
00:07:05.338 --> 00:07:06.468
For the middleware,

101
00:07:06.468 --> 00:07:10.438
you have a middleware many objects to
kind of route them to different ways.

102
00:07:10.438 --> 00:07:15.490
So it is similar if you use middleware for
just one single endpoints,

103
00:07:15.490 --> 00:07:20.643
but that's usually not why you would
wanna use a middleware anyways.

104
00:07:20.643 --> 00:07:23.514
But it's similar, you can use
a proxy as middleware, I guess.

105
00:07:23.514 --> 00:07:28.263
[LAUGH]
&gt;&gt; How would you handle arbitrarily nested

106
00:07:28.263 --> 00:07:29.193
objects?

107
00:07:29.193 --> 00:07:32.579
&gt;&gt; Actually, let's see if we can add just
a proxy, I haven't done this before.

108
00:07:32.579 --> 00:07:37.935
Actually, just do it address, I guess
we can do this, street: 'Main street.

109
00:07:37.935 --> 00:07:42.393
I just wanna create a proxy for
just the address,

110
00:07:42.393 --> 00:07:47.409
const addressProxy =
newProxy(user.address).

111
00:07:47.409 --> 00:07:52.199
Not sad, get: ( target property).

112
00:07:52.199 --> 00:07:56.738
Just going to log this the same way.

113
00:07:58.866 --> 00:07:59.922
Let's see.

114
00:07:59.922 --> 00:08:03.926
So now if we do addressProxy.street =, no,

115
00:08:03.926 --> 00:08:09.177
we're just getting it, sorry,
so let's see what this is.

116
00:08:10.550 --> 00:08:13.485
I'm just going to comment
this out real quick maybe,

117
00:08:13.485 --> 00:08:17.602
it'll throw an error main is not defined,
property is not defined.

118
00:08:17.602 --> 00:08:22.417
Cuz it's property, so yeah,
you can just create proxy, obviously,

119
00:08:22.417 --> 00:08:25.400
I guess you can just
create it on any object.

120
00:08:25.400 --> 00:08:28.282
So if you only care about
the deeply nested objects,

121
00:08:28.282 --> 00:08:30.978
you can just add that proxy
to do just that thing.

122
00:08:30.978 --> 00:08:35.281
And I think you could probably also,
maybe add it directly, no,

123
00:08:35.281 --> 00:08:37.092
maybe not, I don't know.

124
00:08:37.092 --> 00:08:38.563
Although, yeah, I guess, you can.

125
00:08:42.689 --> 00:08:49.355
You can get, Yeah,

126
00:08:49.355 --> 00:08:52.047
I don't know,
I'm just kinda playing around here now.

127
00:08:52.047 --> 00:08:54.473
I mean,
you can use proxies I guess on any object.

128
00:08:54.473 --> 00:08:57.746
And if you know the structure
of the object that you're using,

129
00:08:57.746 --> 00:09:02.196
just make sure that if you're formatting,
validating anything that you account for

130
00:09:02.196 --> 00:09:05.125
all these possibilities,
which in this case I did not.

131
00:09:05.125 --> 00:09:10.120
Cuz I just knew that aid only because
it's already had firstname, last name,

132
00:09:10.120 --> 00:09:11.792
all those things, yeah?

133
00:09:11.792 --> 00:09:15.952
&gt;&gt; Why not implement these methods
directly on the user object,

134
00:09:15.952 --> 00:09:18.913
what's the benefit of
moving it to a proxy?

135
00:09:21.269 --> 00:09:26.668
&gt;&gt; So if you add this to the user
objects and it would allocate memory for

136
00:09:26.668 --> 00:09:30.756
those functions,
whenever you create that user.

137
00:09:30.756 --> 00:09:36.093
Whereas with a proxy, we can keep it
on just that proxy if that makes sense.

138
00:09:36.093 --> 00:09:42.173
So if we added this directly, say here,
maybe instead of directly modifying.

139
00:09:42.173 --> 00:09:47.250
And I guess another one which is
maybe we can just set firstname,

140
00:09:47.250 --> 00:09:50.728
which we will just always be using, sorry,

141
00:09:50.728 --> 00:09:54.410
to set the first name,
which is maybe a value.

142
00:09:54.410 --> 00:09:59.328
And maybe we can update the firstName that
way, but there's still a possibility in

143
00:09:59.328 --> 00:10:02.992
that case that we can just
directly modify user.firstName.

144
00:10:02.992 --> 00:10:07.039
Or maybe we don't have firstname,
firstname is always a function or

145
00:10:07.039 --> 00:10:07.819
something.

146
00:10:07.819 --> 00:10:11.911
That wouldn't really be memory efficient
because functions are other objects under

147
00:10:11.911 --> 00:10:12.431
the hood.

148
00:10:12.431 --> 00:10:14.627
So every time we create an object,

149
00:10:14.627 --> 00:10:18.805
we're essentially creating a new
object for all of these types.

150
00:10:18.805 --> 00:10:23.576
So using that validation directly on
the object, a, doesn't stop people

151
00:10:23.576 --> 00:10:27.606
from modifying the properties
cuz we could still just do that.

152
00:10:27.606 --> 00:10:29.316
If we know the name of the property,

153
00:10:29.316 --> 00:10:32.400
we could still use .notation
bracket notation to update them.

154
00:10:32.400 --> 00:10:33.164
And secondly,

155
00:10:33.164 --> 00:10:36.705
it's definitely more difficult to
implement that on a direct object.

156
00:10:36.705 --> 00:10:38.378
Well, maybe in a class,

157
00:10:38.378 --> 00:10:42.772
you can easily update with this
.blah blah equals the new value.

158
00:10:42.772 --> 00:10:46.565
But with a regular object
that gets a bit more tricky,

159
00:10:46.565 --> 00:10:48.852
if that explains the question?

160
00:10:53.464 --> 00:10:55.342
I guess the more you use proxies,

161
00:10:55.342 --> 00:10:59.848
the more you will see their value cuz at
least that's kinda what happened to me.

162
00:10:59.848 --> 00:11:03.692
First I was, why would you really
need a proxy for all these things?

163
00:11:03.692 --> 00:11:07.548
But when you really start using it
in actual application, you're this

164
00:11:07.548 --> 00:11:11.674
is the perfect use case for a proxy and
then you'll see it just kinda clicks.

165
00:11:11.674 --> 00:11:15.663
But it definitely takes some
implementation in different settings to

166
00:11:15.663 --> 00:11:18.103
see the value,
[LAUGH] of proxies for sure.

167
00:11:18.103 --> 00:11:21.251
&gt;&gt; It reminds me of almost an interface.

168
00:11:21.251 --> 00:11:23.405
&gt;&gt; Yeah, exactly, definitely is.

169
00:11:23.405 --> 00:11:27.157
&gt;&gt; You could hand this out to an export.

170
00:11:27.157 --> 00:11:28.702
&gt;&gt; Mm-hm.

171
00:11:30.505 --> 00:11:34.830
&gt;&gt; And
not have to expose the object directly.

172
00:11:34.830 --> 00:11:39.450
The person said I could see
value in displaying dates in

173
00:11:39.450 --> 00:11:43.072
different formats, as a useful use case.

174
00:11:43.072 --> 00:11:47.851
&gt;&gt; Yeah, there are, honestly, so
many use cases to proxies, and

175
00:11:47.851 --> 00:11:51.932
I think it applies to so
many different applications.

176
00:11:51.932 --> 00:11:54.840
Yeah, they're pretty powerful.

177
00:11:58.445 --> 00:12:03.978
&gt;&gt; Why use the reflect object instead
of directly accessing the properties?

178
00:12:03.978 --> 00:12:08.456
Honestly, it's just easier
to type is more readable,

179
00:12:08.456 --> 00:12:13.011
so, You don't really have to worry about

180
00:12:13.011 --> 00:12:15.889
the names that you gave to the object and
the property here.

181
00:12:15.889 --> 00:12:19.081
Like you said before, I had the type
of property not defined because

182
00:12:19.081 --> 00:12:21.164
I usually call it prop and
all those things.

183
00:12:21.164 --> 00:12:24.934
Personally, I prefer using
reflect just for readability.

184
00:12:24.934 --> 00:12:26.889
People know what's going on.

185
00:12:26.889 --> 00:12:32.083
And also with a set,
you usually have to return a truthy value.

186
00:12:32.083 --> 00:12:35.874
Only if it returns a truthy value
will it actually forward that,

187
00:12:35.874 --> 00:12:38.973
set the modification command
to the target object.

188
00:12:38.973 --> 00:12:42.514
But this is pretty easy to forget because
if we didn't return anything here,

189
00:12:42.514 --> 00:12:44.426
we'd return undefined which is falsie.

190
00:12:44.426 --> 00:12:47.563
So we'd never actually forward
that request to the target object.

191
00:12:47.563 --> 00:12:50.160
But Reflect.set automatically
returns a truthy value,

192
00:12:50.160 --> 00:12:52.124
meaning that it will forward that request.

193
00:12:52.124 --> 00:12:55.076
So otherwise,
you could have maybe done, well,

194
00:12:55.076 --> 00:12:57.270
first you had change it in that case.

195
00:12:57.270 --> 00:13:01.785
So object.prop, = value.

196
00:13:01.785 --> 00:13:06.395
And then maybe return true or something,
which to me isn't always very intuitive.

197
00:13:06.395 --> 00:13:09.373
I forget to do that and
then you don't see the update.

198
00:13:09.373 --> 00:13:11.987
So personally,
I prefer to use Reflect.set.

199
00:13:11.987 --> 00:13:16.319
Maybe it also has some built in
benefits that I'm not aware of.

200
00:13:16.319 --> 00:13:23.238
But to me, I just like it for
readability, and yeah, it's easy to use.

201
00:13:23.238 --> 00:13:27.942
&gt;&gt; What should you do to set
with a proxy to a falsie value?

202
00:13:27.942 --> 00:13:29.360
&gt;&gt; To a falsie value?

203
00:13:30.719 --> 00:13:34.707
So do you mean if you wanna
set something else to false,

204
00:13:34.707 --> 00:13:37.058
maybe is human, or is that not?

205
00:13:37.058 --> 00:13:39.394
&gt;&gt; Cuz I think you were saying that,

206
00:13:39.394 --> 00:13:43.406
if it's a falsie value with
reflect it doesn't get set.

207
00:13:43.406 --> 00:13:47.096
&gt;&gt; No, so if that sets method,
in this case,

208
00:13:47.096 --> 00:13:51.403
returns not a truthy value,
for example, here.

209
00:13:51.403 --> 00:13:54.070
Actually, let me find that,

210
00:13:54.070 --> 00:13:59.090
we throw an error here which
of course is a falsie value.

211
00:13:59.090 --> 00:14:01.566
It stops the execution there.

212
00:14:01.566 --> 00:14:06.376
So it will not forward the command
to the actual target object.

213
00:14:06.376 --> 00:14:08.319
The value itself can be false, but

214
00:14:08.319 --> 00:14:11.143
we cannot return a falsie
value from this method.

215
00:14:11.143 --> 00:14:15.883
So if I do return false here,
I mean after everything,

216
00:14:15.883 --> 00:14:19.500
even maybe after here or anything false.

217
00:14:19.500 --> 00:14:25.215
Maybe it doesn't have to be explicitly
false, it can just be undefined,

218
00:14:25.215 --> 00:14:29.287
the request will not get
a pass to the target object.

219
00:14:29.287 --> 00:14:32.298
But, of course,
the value itself can be false,

220
00:14:32.298 --> 00:14:36.573
as long as we don't return a falsie
value from this specific method.

221
00:14:36.573 --> 00:14:41.533
Because it's not that the returned value
of the set method is what gets passed to

222
00:14:41.533 --> 00:14:44.285
the target objects, that's not the case.

223
00:14:44.285 --> 00:14:46.042
That would have been
maybe with middleware,

224
00:14:46.042 --> 00:14:48.504
the return value from middleware
gets passed to the endpoint.

225
00:14:48.504 --> 00:14:49.907
But with the proxy, that's not the case.

226
00:14:49.907 --> 00:14:56.000
The only thing that a proxy
does is within this method,

227
00:14:56.000 --> 00:14:59.186
we can change the property.

228
00:14:59.186 --> 00:15:00.714
So we can just say, okay,

229
00:15:00.714 --> 00:15:04.263
the set method is now returned
to value to the target object.

230
00:15:04.263 --> 00:15:08.324
No, that's not what a proxy does,
we have to explicitly update the target

231
00:15:08.324 --> 00:15:11.105
object with that value,
if that makes more sense.

232
00:15:11.105 --> 00:15:15.123
Cuz I think that's maybe the confusion
where with middleware that's what happens,

233
00:15:15.123 --> 00:15:17.032
but that's not the case with the proxy.

234
00:15:17.032 --> 00:15:21.191
So if it's false, maybe it's
some target.is human is false or

235
00:15:21.191 --> 00:15:25.285
is the value in that case is false,
that's totally possible.

236
00:15:25.285 --> 00:15:28.102
That's not a problem at all,
as long as then it returns true.

237
00:15:28.102 --> 00:15:32.268
[LAUGH]
&gt;&gt; Yep, they said that clears things up,

238
00:15:32.268 --> 00:15:32.893
so thanks.

239
00:15:32.893 --> 00:15:33.636
&gt;&gt; Okay, cool.

240
00:15:33.636 --> 00:15:37.254
&gt;&gt; So you said if you're using reflect,
you don't have to do that return true,

241
00:15:37.254 --> 00:15:39.211
it'll just return truthy if it's able.

242
00:15:39.211 --> 00:15:42.102
&gt;&gt; Exactly, yeah,
reflect set returns a truthy value, so

243
00:15:42.102 --> 00:15:43.857
you don't have to worry about that

