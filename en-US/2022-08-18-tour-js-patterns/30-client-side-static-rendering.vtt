WEBVTT

1
00:00:00.173 --> 00:00:03.880
So the first thing when you are working
with React that you're definitely

2
00:00:03.880 --> 00:00:05.992
familiar with is client side rendering.

3
00:00:05.992 --> 00:00:10.385
So with client side rendering, essentially
what happens is your user makes a request

4
00:00:10.385 --> 00:00:13.201
to your server,
which responds with bare bones HTML.

5
00:00:13.201 --> 00:00:17.051
Browser parses this HTML, which contains
nothing, then your client request and

6
00:00:17.051 --> 00:00:18.334
download the scripts, and

7
00:00:18.334 --> 00:00:22.258
then it will actually execute this which
dynamically appends all those elements.

8
00:00:22.258 --> 00:00:26.825
Only then will your user actually
see stuff render to the screen.

9
00:00:26.825 --> 00:00:29.671
So all the rendering
happens in the browser.

10
00:00:29.671 --> 00:00:33.786
So most basic implementation is,
of course, having this route here,

11
00:00:33.786 --> 00:00:37.832
and then maybe a bundle.js and
this bundle contains, I don't know,

12
00:00:37.832 --> 00:00:39.082
a DOM manipulation.

13
00:00:39.082 --> 00:00:43.557
But when you're working with React, if we
go to any of, I mean, I won't go over it.

14
00:00:43.557 --> 00:00:47.988
If we go to any of the other exercises,
you will see that the initial load will

15
00:00:47.988 --> 00:00:50.633
just contain that ID root,
just empty HTML.

16
00:00:50.633 --> 00:00:54.423
And as the bundle comes in, it
automatically appends all those DOM nodes,

17
00:00:54.423 --> 00:00:57.208
and that's when a user is
actually able to see things.

18
00:00:57.208 --> 00:00:59.239
So from a performance perspective,

19
00:00:59.239 --> 00:01:02.912
client side rendering returns in
a pretty fast time to first byte.

20
00:01:02.912 --> 00:01:05.397
Here's a time to first byte
as the time it takes for

21
00:01:05.397 --> 00:01:08.071
the browser as a first byte
of that initial response.

22
00:01:08.071 --> 00:01:11.771
But that is just the small HTML,
nothing in it yet, it's just that ID root.

23
00:01:11.771 --> 00:01:12.894
So that's pretty good.

24
00:01:12.894 --> 00:01:16.138
However, when it does that, it still
needs to fetch the bundle before the user

25
00:01:16.138 --> 00:01:18.707
is actually able to see anything and
interact with anything.

26
00:01:18.707 --> 00:01:22.895
So with client side rendering, what could
happen if your bundle is pretty big,

27
00:01:22.895 --> 00:01:25.407
which is why bundle splitting is so
important.

28
00:01:25.407 --> 00:01:27.965
Is that the first Contentful paint,
the largest Contentful paints, and

29
00:01:27.965 --> 00:01:29.376
of course also the time to interactive.

30
00:01:29.376 --> 00:01:31.746
Because it also binds those events,

31
00:01:31.746 --> 00:01:37.027
handlers to all those components can be
pretty long, or user can wait a long time.

32
00:01:37.027 --> 00:01:41.226
However, client side rendering is
definitely useful if your content should

33
00:01:41.226 --> 00:01:42.783
be interactive instantly.

34
00:01:42.783 --> 00:01:45.936
Because what it does is it parses
the data, it renders it and

35
00:01:45.936 --> 00:01:49.606
also automatically binds those
event listeners to them right away.

36
00:01:49.606 --> 00:01:53.227
Yeah, which is what sort of
like the interactivity but

37
00:01:53.227 --> 00:01:56.698
then the bundle size is also
not super SEO friendly.

38
00:01:56.698 --> 00:02:01.242
Because when a crawler is crawling
your website, it might take a while to

39
00:02:01.242 --> 00:02:05.572
actually fetch that bundle too long and
it actually won't crawl it.

40
00:02:05.572 --> 00:02:09.252
So instead, what we might
wanna use is static rendering.

41
00:02:09.252 --> 00:02:12.464
So with static rendering, what happens is,

42
00:02:12.464 --> 00:02:16.435
just gonna go up all the way,
is that the HTML contents,

43
00:02:16.435 --> 00:02:20.932
the contents of a page are already
pregenerated at build time.

44
00:02:20.932 --> 00:02:25.715
So in that case, the client can
request the HTML from the server, and

45
00:02:25.715 --> 00:02:28.119
it can instantly show something.

46
00:02:28.119 --> 00:02:31.024
Because the HTML,
instead of just having that roots,

47
00:02:31.024 --> 00:02:34.700
it already contains all the elements
that we eventually wanna show.

48
00:02:34.700 --> 00:02:37.983
Now, of course, this is just HTML,
it's not interactive yet, and

49
00:02:37.983 --> 00:02:41.226
that's why the client, then,
also still has to request a bundle.

50
00:02:41.226 --> 00:02:46.102
But this bundle doesn't contain all
those DOM append child methods,

51
00:02:46.102 --> 00:02:49.406
it just contains those hydration elements,
so

52
00:02:49.406 --> 00:02:53.055
binding those event listeners
to that static HTML.

53
00:02:53.055 --> 00:02:57.800
Cuz a bare minimum for a static rendered
application is just to have listings, but

54
00:02:57.800 --> 00:03:00.825
when you're just using RAC
normally out of the box,

55
00:03:00.825 --> 00:03:03.738
it will always default to
client side rendering.

56
00:03:03.738 --> 00:03:07.340
But maybe if you're using
a framework like next.js,

57
00:03:07.340 --> 00:03:10.010
it's super easy to statically render.

58
00:03:10.010 --> 00:03:11.696
Let's see if this one is using.

59
00:03:11.696 --> 00:03:14.703
Yeah, so
this example here is using next.js.

60
00:03:14.703 --> 00:03:18.041
I know a lot of frameworks also
include static rendering, but

61
00:03:18.041 --> 00:03:20.040
this was just the easiest one to use.

62
00:03:20.040 --> 00:03:22.567
So here you can see that.

63
00:03:22.567 --> 00:03:24.426
Let's see if we're actually using it.

64
00:03:24.426 --> 00:03:28.666
By default, it will actually off to
static rendering just because it has so

65
00:03:28.666 --> 00:03:30.362
many performance benefits.

66
00:03:30.362 --> 00:03:37.925
So when we go into the network here,
Inspect, I'm just going to reload this.

67
00:03:40.789 --> 00:03:45.182
You can see that it already contains all
this HTML that we're eventually showing

68
00:03:45.182 --> 00:03:48.554
here, and it didn't have that,
I'll try to find maybe the,

69
00:03:51.494 --> 00:03:55.678
These exercises here,
then you might see the difference,

70
00:03:55.678 --> 00:04:01.296
cuz this is a client side rendered up that
I could have used the listings as well.

71
00:04:01.296 --> 00:04:08.849
But here what you see is when we initially
load it, it contains nothing, it just has.

72
00:04:08.849 --> 00:04:12.519
Well, okay, you're also using Steglitz now
so it's adding a bunch of other stuff.

73
00:04:12.519 --> 00:04:14.818
But the HTML itself on
the initial quest is empty,

74
00:04:14.818 --> 00:04:18.346
whereas here it already contains the data
that the browser needs to render.

75
00:04:18.346 --> 00:04:21.990
Now, of course, it doesn't have
the CSS yet because it's just HTML,

76
00:04:21.990 --> 00:04:24.540
it still needs to make that
trip to fetch the CSS and

77
00:04:24.540 --> 00:04:26.812
then also fetch the bundle
to hydrate them.

78
00:04:26.812 --> 00:04:30.741
But static rendering, let me see,
it just comes with so

79
00:04:30.741 --> 00:04:36.018
many benefits because yeah, the time
to first byte can still be very fast.

80
00:04:36.018 --> 00:04:38.543
Cuz we just have the HTML file and
in a lot of cases,

81
00:04:38.543 --> 00:04:41.927
because it's just static content,
we can easily cache it on CDN.

82
00:04:41.927 --> 00:04:46.052
So the user doesn't always have
to make that request to a server,

83
00:04:46.052 --> 00:04:49.352
we can just cache that static
page near to our users or

84
00:04:49.352 --> 00:04:52.965
close to our users on the edge or
any CDN close to the user.

85
00:04:52.965 --> 00:04:53.779
But of course,

86
00:04:53.779 --> 00:04:58.105
what does happen is that we have to make
an additional request to fetch the bundle.

87
00:04:58.105 --> 00:05:01.236
So even though the user sees content
rendered to the screen, they think it's

88
00:05:01.236 --> 00:05:04.801
interactive, they don't think about that,
where people don't think about, okay,

89
00:05:04.801 --> 00:05:07.369
I cannot click on this yet
because the bundle hasn't fetched.

90
00:05:07.369 --> 00:05:09.642
Well, maybe just developers
think about that.

91
00:05:09.642 --> 00:05:13.758
Cuz it still needs to make
the request to fetch the bundle and

92
00:05:13.758 --> 00:05:17.889
then attaches event handlers
which is the hydration part.

93
00:05:17.889 --> 00:05:22.414
So, yeah, it can be very good

94
00:05:22.414 --> 00:05:28.030
depending on the page that you have.

95
00:05:28.030 --> 00:05:29.845
Yeah, so
let's see where I was going with this.

96
00:05:29.845 --> 00:05:33.370
But in a lot of cases, the stuff that we
just saw was with not dynamic data, but

97
00:05:33.370 --> 00:05:36.030
you can still statically render
also with dynamic data and

98
00:05:36.030 --> 00:05:37.351
there are a few approaches.

99
00:05:37.351 --> 00:05:41.378
So when you're using next, you can use
something called get static props, and

100
00:05:41.378 --> 00:05:43.014
this method runs at build time.

101
00:05:43.014 --> 00:05:47.954
So when we're building our application,
so before we deploy it we build it,

102
00:05:47.954 --> 00:05:52.742
it will actually fetch this data and
then inject that data into the HTML that

103
00:05:52.742 --> 00:05:55.713
eventually we parsed our servers and
the CDN.

104
00:05:55.713 --> 00:06:00.625
So here I actually created a quick example
showing this, and I know there are more

105
00:06:00.625 --> 00:06:05.623
frameworks that use an approach like this,
it's just one way to render content.

106
00:06:05.623 --> 00:06:10.719
So we have the getStaticProps, this one
fetches these listings at build time,

107
00:06:10.719 --> 00:06:14.370
which then automatically
passes these props to the app,

108
00:06:14.370 --> 00:06:17.356
which can statically
render these listings.

109
00:06:17.356 --> 00:06:22.264
So from a user perspective,
we end up with the exact same output,

110
00:06:22.264 --> 00:06:27.456
because the generated HTML is,
again, the HTML that we saw before.

111
00:06:27.456 --> 00:06:33.924
So it already contains the listing
step will eventually render.

112
00:06:33.924 --> 00:06:34.998
Let's see.

113
00:06:37.517 --> 00:06:42.655
Yeah so the exact same, it's just
different from a developer perspective,

114
00:06:42.655 --> 00:06:45.112
so the tradeoffs are the exact same.

115
00:06:45.112 --> 00:06:49.885
But imagine calling this method
every time for a lot of pages.

116
00:06:49.885 --> 00:06:53.242
Cuz in next.js, you can just
have those automatic pages here,

117
00:06:53.242 --> 00:06:57.547
if we have the page folder, it also
includes route-based splitting by default.

118
00:06:57.547 --> 00:07:01.160
But if you want to pregenerate a lot
of pages, it might take a while.

119
00:07:01.160 --> 00:07:05.481
Maybe this fetch call takes three seconds
to finish, if that'll run sequentially,

120
00:07:05.481 --> 00:07:09.382
our build may end up being like 45
minutes, if we want to pre-render lots of

121
00:07:09.382 --> 00:07:12.760
pages, maybe an e-commerce website or
a blog, stuff like that.

122
00:07:12.760 --> 00:07:16.646
And also in order, if we deployed this
website and we wanted to update this data,

123
00:07:16.646 --> 00:07:20.091
we'd have to redeploy the entire
website in order to update that data.

124
00:07:20.091 --> 00:07:23.794
So that's not great.

125
00:07:23.794 --> 00:07:29.150
Now, of course, one thing we can do here
is to fetch the dynamic data client side.

126
00:07:29.150 --> 00:07:31.925
So we render everything else statically,
and

127
00:07:31.925 --> 00:07:36.422
then we just render the listings once
the user can actually see something.

128
00:07:36.422 --> 00:07:39.770
So in the meantime, we'll just
render a skeleton UI or something.

129
00:07:39.770 --> 00:07:42.860
So it fetches this data and
only then will it show the listings.

130
00:07:42.860 --> 00:07:48.404
And of course, there's also the step with
adding the event listeners and so on.

131
00:07:48.404 --> 00:07:51.866
I won't really go too much into
the implementation then, but example here,

132
00:07:51.866 --> 00:07:53.952
we're also using the SWRI
like we saw before.

133
00:07:53.952 --> 00:07:58.733
So we can fetch API's or we can fetch
the listings from the API and while it's

134
00:07:58.733 --> 00:08:04.202
loading, we'll just show a skeleton, and
otherwise we'll just show the listings.

135
00:08:04.202 --> 00:08:05.777
So in that case, we again,

136
00:08:05.777 --> 00:08:10.305
have a good time to first byte same with
any statically rendered application.

137
00:08:10.305 --> 00:08:14.757
We also have a good first Contentful
paint, because the first Contentful paint

138
00:08:14.757 --> 00:08:17.823
is essentially the view that we see,
let's see here.

139
00:08:17.823 --> 00:08:21.985
This could be the first Contentful paint,
but the largest Contentful paint doesn't

140
00:08:21.985 --> 00:08:24.311
happen until the listings
are in the viewport.

141
00:08:24.311 --> 00:08:27.755
So even though we have a good first
Contentful paint in that case the largest

142
00:08:27.755 --> 00:08:31.035
contentful paints still has to wait for
their listings to be fetched and

143
00:08:31.035 --> 00:08:31.818
then rendered.

