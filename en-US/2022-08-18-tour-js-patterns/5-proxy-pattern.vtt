WEBVTT

1
00:00:00.054 --> 00:00:03.189
So normally, when we use objects,
I'm just going to make this big,

2
00:00:03.189 --> 00:00:06.002
I don't know if it's annoying
when this repeatedly goes on,

3
00:00:06.002 --> 00:00:09.164
I can just always just pause it,
[LAUGH] if this is like overwhelming.

4
00:00:09.164 --> 00:00:11.547
But, yeah,
normally when we use an object, or

5
00:00:11.547 --> 00:00:13.692
we want to access properties on an object,

6
00:00:13.692 --> 00:00:17.876
we can either use dot notation like we did
here like personal name returns John Doe.

7
00:00:17.876 --> 00:00:22.391
Or when we want to modify it we can do
that instantly as well with dot notation

8
00:00:22.391 --> 00:00:24.047
or with bracket notation.

9
00:00:24.047 --> 00:00:28.207
Now, with the proxy pattern,
we actually use something called a proxy,

10
00:00:28.207 --> 00:00:32.770
which is kind of an object that sits in
between that intercepts those requests and

11
00:00:32.770 --> 00:00:34.800
also intercepts those responses.

12
00:00:34.800 --> 00:00:38.334
So instead of directly changing
the volume person here,

13
00:00:38.334 --> 00:00:43.132
we actually go through that proxy which
invokes the set method on that proxy.

14
00:00:43.132 --> 00:00:48.934
And then the proxy forwards that request
to the target object same with get.

15
00:00:48.934 --> 00:00:54.081
Now luckily, in JavaScript,
it's pretty easy to use proxies

16
00:00:54.081 --> 00:01:00.015
because JavaScript has a built in
proxy object to use the proxy pattern.

17
00:01:00.015 --> 00:01:02.785
Now, the syntax is kinda
like the following,

18
00:01:02.785 --> 00:01:05.564
so this is kind of related
to this person here.

19
00:01:05.564 --> 00:01:10.270
So if we had a person object, the proxy
could look something like, new proxy and

20
00:01:10.270 --> 00:01:13.024
then the person would
just the target object.

21
00:01:13.024 --> 00:01:18.053
So that the object that intercept
the request to forward the request to or

22
00:01:18.053 --> 00:01:19.791
get the responses from.

23
00:01:19.791 --> 00:01:24.110
And then by default, the proxy object
has a lot of built in methods.

24
00:01:24.110 --> 00:01:27.700
Now two of them are getting set, those are
the only ones that I'll cover right now.

25
00:01:27.700 --> 00:01:32.279
But you can just go on MDN and see all the
all the methods that are available now.

26
00:01:32.279 --> 00:01:38.887
And then again,
they also get our arguments properties.

27
00:01:38.887 --> 00:01:42.740
So the first one is, again, target,
so that's a target objects and

28
00:01:42.740 --> 00:01:45.797
then the property that we wanna
get in case we use gets or

29
00:01:45.797 --> 00:01:48.532
that we wanna set if we
are modifying a property.

30
00:01:48.532 --> 00:01:52.066
And also the set has a value which is
the new value that we're changing that

31
00:01:52.066 --> 00:01:52.755
property to.

32
00:01:55.685 --> 00:01:59.027
So for example here,
if we have this person again,

33
00:01:59.027 --> 00:02:03.240
I don't know if I should make
this bigger or not, I'll do that.

34
00:02:03.240 --> 00:02:05.053
So we have a person called John Doe.

35
00:02:05.053 --> 00:02:09.621
And then we create a new person proxy,
which takes that person objects.

36
00:02:09.621 --> 00:02:13.449
And whenever we change it, so
whenever we want to retrieve a value,

37
00:02:13.449 --> 00:02:17.628
maybe we do like person proxy.name,
we get the value of name is John Doe.

38
00:02:17.628 --> 00:02:23.120
Or we wanna set a property,
maybe want to increment the age,

39
00:02:23.120 --> 00:02:26.901
it's like changed age from 42 to 43.

40
00:02:26.901 --> 00:02:31.284
So I'll just, I can show you either in
StackBlitz, I know, I also have it here,

41
00:02:31.284 --> 00:02:33.288
but I can just show it in the browser.

42
00:02:36.313 --> 00:02:39.682
So we can say like personProxy.name.

43
00:02:39.682 --> 00:02:42.259
And then you see that it looks like
the value of name is John Doe.

44
00:02:42.259 --> 00:02:45.924
So this is super nice because it actually
just executed this Get method here.

45
00:02:45.924 --> 00:02:49.815
So if we're like changing a value,

46
00:02:49.815 --> 00:02:53.708
maybe a personProxy.age +=1,

47
00:02:53.708 --> 00:03:00.207
is like change age from 42 to 43,
so this is super nice.

48
00:03:00.207 --> 00:03:03.378
Yeah, so here you see that
we're using the target prop,

49
00:03:03.378 --> 00:03:06.101
we're still using this
bracket notation here.

50
00:03:06.101 --> 00:03:11.100
But there's actually another built
in method that we can use in

51
00:03:11.100 --> 00:03:13.470
JavaScript namely reflect.

52
00:03:13.470 --> 00:03:19.414
So instead of writing it here, the target
property or target a property equals value

53
00:03:19.414 --> 00:03:24.873
and then returning true we can just use
that reflect to get and reflect to set.

54
00:03:24.873 --> 00:03:30.396
Which I find a lot easier to read and
they do the exact same thing.

55
00:03:30.396 --> 00:03:35.901
So with a proxy, it's super easy to
add functionality to a certain object.

56
00:03:35.901 --> 00:03:40.033
Maybe every time that we're changing
a value we want to, I don't know,

57
00:03:40.033 --> 00:03:43.648
send something to analytics like,
hey, this is now changed.

58
00:03:43.648 --> 00:03:48.688
Or the more I think useful case
of proxy is to add validation.

59
00:03:48.688 --> 00:03:52.675
I often use it for validation when I
wanna make sure that if we're changing

60
00:03:52.675 --> 00:03:56.040
a property, it's either always
string if it's a username.

61
00:03:56.040 --> 00:03:58.560
Or it's a number when
we're changing the age or

62
00:03:58.560 --> 00:04:01.968
maybe the age shouldn't be lower than 18,
all those things.

63
00:04:01.968 --> 00:04:07.071
It's also super easy to log things like
we just saw with this one, every time

64
00:04:07.071 --> 00:04:12.119
we accessed it, we sent a log to the
console with the value that we changed.

65
00:04:12.119 --> 00:04:13.997
So if you ever need to debug anything,

66
00:04:13.997 --> 00:04:17.591
this is definitely a super nice way to
do that to see what are we changing?

67
00:04:17.591 --> 00:04:18.580
What is the target object?

68
00:04:18.580 --> 00:04:21.923
And what are we changing it to?

69
00:04:21.923 --> 00:04:26.679
Now of course, like a big trade out, or
at least something to keep in mind is

70
00:04:26.679 --> 00:04:31.299
that those methods run every time
they interact with the target object.

71
00:04:31.299 --> 00:04:35.655
So if you have a pretty long execution of
those things, maybe, like I said before,

72
00:04:35.655 --> 00:04:38.517
we send it to analytics and
this takes, I don't know,

73
00:04:38.517 --> 00:04:40.651
even just like one second to send there.

74
00:04:40.651 --> 00:04:44.752
This could definitely lead to performance
issues cuz we don't wanna have to wait

75
00:04:44.752 --> 00:04:47.844
every time we interact with an object,
it has to be instant.

76
00:04:47.844 --> 00:04:51.412
But there's so many things you can do to
make sure that it still goes faster like,

77
00:04:51.412 --> 00:04:53.254
it's asynchronous, all those things.

78
00:04:53.254 --> 00:04:57.931
So that's not too big of an issue but
definitely something to keep in mind.

79
00:04:57.931 --> 00:05:01.277
So every time when we interact with
target object those methods run, so

80
00:05:01.277 --> 00:05:03.079
make sure to keep them small and fast.

81
00:05:06.326 --> 00:05:09.811
Okay, so to get started, [LAUGH] okay
this looks a bit scary, but it's not.

82
00:05:09.811 --> 00:05:14.042
So to get the exercise about the proxy,
what we have here is that we have

83
00:05:14.042 --> 00:05:17.074
an object and
we want to add some validation to it.

84
00:05:17.074 --> 00:05:18.963
So you can see the validation
requirements here.

85
00:05:18.963 --> 00:05:22.981
So the user name has to be a string
that only contains two letters, so

86
00:05:22.981 --> 00:05:26.859
it cannot be a string that's 1,
2, 3, hello or something and

87
00:05:26.859 --> 00:05:29.632
it needs to be at least
three characters long.

88
00:05:29.632 --> 00:05:32.272
The email also has to be
a valid email address.

89
00:05:32.272 --> 00:05:35.014
Now I've already add some
validators to this file so

90
00:05:35.014 --> 00:05:37.457
you don't need to like
validate it yourself.

91
00:05:37.457 --> 00:05:39.865
You can just like invoke that
is valid email function.

92
00:05:39.865 --> 00:05:41.980
Also there is all letters for

93
00:05:41.980 --> 00:05:46.221
the username to make sure that
it only contains letters.

94
00:05:46.221 --> 00:05:50.484
And for the age,
has to be number at least 18.

95
00:05:50.484 --> 00:05:54.662
And to add some logging to it, so
not just validation but also logging.

96
00:05:54.662 --> 00:05:59.714
You should change the output to include
the dates when it was logged and

97
00:05:59.714 --> 00:06:04.421
then the value of that property is
this new property or forget, so

98
00:06:04.421 --> 00:06:07.428
the value of this property is this value.

99
00:06:07.428 --> 00:06:09.625
I just have like a quick example here.

100
00:06:09.625 --> 00:06:14.811
&gt;&gt; Could you restate the best use
cases of proxy pattern again?

101
00:06:14.811 --> 00:06:18.550
&gt;&gt; Yeah, they're are certain,
so we have validation logging,

102
00:06:18.550 --> 00:06:21.169
formatting notifications and debugging.

103
00:06:21.169 --> 00:06:24.188
But for me,
the most useful one is definitely for

104
00:06:24.188 --> 00:06:26.699
validation like we do in this exercise.

105
00:06:26.699 --> 00:06:32.297
If the object that we are interacting
with, if we modify it and

106
00:06:32.297 --> 00:06:37.586
we have to make sure that it
always has certain data types.

107
00:06:37.586 --> 00:06:39.320
Maybe because our database expects it,

108
00:06:39.320 --> 00:06:41.617
so when you need it to be
string it needs to be a number.

109
00:06:41.617 --> 00:06:47.049
We wanna make sure that we cannot
accidentally change it to an invalid type.

110
00:06:47.049 --> 00:06:49.812
Of course with TypeScript that's a bit
harder, which is great with TypeScript.

111
00:06:49.812 --> 00:06:54.739
But this is a much better way to do
that at runtime to make sure that, yeah,

112
00:06:54.739 --> 00:06:57.685
we don't change it in any unexpected ways.

113
00:06:57.685 --> 00:07:02.066
I've got it, yeah, I also like it for
just logging, like I said here,

114
00:07:02.066 --> 00:07:05.937
if you ever need to know the time
at which something was logged,

115
00:07:05.937 --> 00:07:08.663
you can just add that
to the get method here.

116
00:07:08.663 --> 00:07:11.816
Like we did like the value of prop,
maybe we just, yeah.

117
00:07:11.816 --> 00:07:15.915
In this exercise, we're adding a new date,
so you will see the outcome of that.

