WEBVTT

1
00:00:00.493 --> 00:00:03.496
Okay, so next is the singleton pattern.

2
00:00:03.496 --> 00:00:08.086
And a singleton is basically
a single instance that can be shared

3
00:00:08.086 --> 00:00:10.813
throughout the entire application.

4
00:00:10.813 --> 00:00:15.542
Normally when we have classes, maybe like
this Counter class, we can either export

5
00:00:15.542 --> 00:00:19.937
it as a class and then instantiate a new
counter whenever we import it in a file,

6
00:00:19.937 --> 00:00:21.825
but we usually don't want this.

7
00:00:21.825 --> 00:00:27.050
So with a singleton what we can do
is ensure that there's only that

8
00:00:27.050 --> 00:00:32.086
single instance that can be used
throughout our application.

9
00:00:32.086 --> 00:00:35.136
So here, for example, we have file one,
I should just make this big,

10
00:00:35.136 --> 00:00:38.740
we can have file one that imports the
counter, the singleton, it increments it.

11
00:00:38.740 --> 00:00:41.698
You can see the increment,
or count, going up, and

12
00:00:41.698 --> 00:00:45.479
it continues to do that when we
increment it in other files as well.

13
00:00:45.479 --> 00:00:47.973
Because they all share
that single instance.

14
00:00:47.973 --> 00:00:52.429
So they all have that reference to
the same class, to the same instance,

15
00:00:52.429 --> 00:00:53.756
in the application.

16
00:00:53.756 --> 00:00:57.423
Now, in ES6, there are several
ways to create singletons.

17
00:00:57.423 --> 00:01:00.146
The very first one is using a class.

18
00:01:00.146 --> 00:01:05.161
And there are a couple of things here
that are very unique to singletons.

19
00:01:05.161 --> 00:01:08.874
So the first thing is that when we
are instantiating the new counter,

20
00:01:08.874 --> 00:01:10.666
or in this case to Counter class,

21
00:01:10.666 --> 00:01:14.008
we have to make sure that
an instance doesn't already exist.

22
00:01:14.008 --> 00:01:16.135
Because that's the thing
of the singletons,

23
00:01:16.135 --> 00:01:17.887
only one instance should ever exist.

24
00:01:17.887 --> 00:01:22.071
So if we are instantiating a new one and
we do see that an instance exists,

25
00:01:22.071 --> 00:01:26.529
we have the instance variable here that
we set equal to the new instance when we

26
00:01:26.529 --> 00:01:27.571
instantiate it.

27
00:01:27.571 --> 00:01:32.292
We will throw an error, like hey, you
cannot do that, this is not a singleton,

28
00:01:32.292 --> 00:01:34.348
you can only create one instance.

29
00:01:34.348 --> 00:01:39.251
Then another thing about singletons is
that they shouldn't be modifiable, so

30
00:01:39.251 --> 00:01:43.200
no file or no part of the application
should be able to change it,

31
00:01:43.200 --> 00:01:45.484
it's just that class, that's it.

32
00:01:45.484 --> 00:01:49.699
And we can do that in JavaScript
with the object.freeze.

33
00:01:49.699 --> 00:01:54.567
That makes sure that we cannot add any
properties or change the properties that

34
00:01:54.567 --> 00:01:59.598
currently exist on an object or a class,
cuz classes are, of course, objects.

35
00:01:59.598 --> 00:02:03.011
And we actually instantiate the new
counter, so this new class,

36
00:02:03.011 --> 00:02:06.061
as a singleton,
already in this file before we export it.

37
00:02:06.061 --> 00:02:10.835
So whenever files import it, they
import the instance and not the class.

38
00:02:10.835 --> 00:02:14.687
So they cannot instantiate
the already instantiated instance,

39
00:02:14.687 --> 00:02:15.954
if that makes sense.

40
00:02:15.954 --> 00:02:18.172
So yeah, we only instantiate it once,

41
00:02:18.172 --> 00:02:20.738
freeze it to make sure
it's not modifiable.

42
00:02:20.738 --> 00:02:25.393
However, in a lot of cases, we don't
actually have to use classes anymore,

43
00:02:25.393 --> 00:02:27.911
in ES6 we can actually just use objects.

44
00:02:27.911 --> 00:02:30.504
Now if we have the counter example again,

45
00:02:30.504 --> 00:02:35.467
we can see that we can create a counter
object that just has the getCount method,

46
00:02:35.467 --> 00:02:39.561
increment and decrement method,
we can freeze it and export it.

47
00:02:39.561 --> 00:02:42.030
I always like to keep it pretty short,

48
00:02:42.030 --> 00:02:46.982
we can just instantly freeze the object
that we create, and then export it.

49
00:02:46.982 --> 00:02:52.987
So whenever other files import it,
they just have that one single object.

50
00:02:52.987 --> 00:02:55.973
Now some of the trade
of singletons is that,

51
00:02:55.973 --> 00:03:00.508
of course, it's really good for
memory, if you care about that.

52
00:03:00.508 --> 00:03:05.487
Because we make sure that we can only
have just one single instance instead

53
00:03:05.487 --> 00:03:09.680
of having to create memory or
use memory for every one of them.

54
00:03:09.680 --> 00:03:13.975
But there actually are also a lot
of cons to the singleton pattern,

55
00:03:13.975 --> 00:03:16.670
especially in 2022, what it is now.

56
00:03:16.670 --> 00:03:19.976
Now like I said, these 15 modules
are singletons by default.

57
00:03:19.976 --> 00:03:24.339
So we no longer really have to think
too much about, okay, creating this or

58
00:03:24.339 --> 00:03:27.529
achieving this global,
non-modifiable behavior,

59
00:03:27.529 --> 00:03:30.673
because modules by default
are already singletons.

60
00:03:30.673 --> 00:03:32.820
Then there's also stuff
like dependency hiding.

61
00:03:32.820 --> 00:03:36.448
Maybe a singleton is importing
another module that we don't really

62
00:03:36.448 --> 00:03:37.410
know about that.

63
00:03:37.410 --> 00:03:41.066
So every time that we import it,
we could be modifying

64
00:03:41.066 --> 00:03:46.040
this singleton without really knowing it,
this is dependency hiding.

65
00:03:48.160 --> 00:03:50.150
Then there's also the testing,

66
00:03:50.150 --> 00:03:55.010
it's really difficult to test singletons
because we change it globally.

67
00:03:55.010 --> 00:03:59.511
So every one, small modification can
lead to the entire test suite failing,

68
00:03:59.511 --> 00:04:01.670
which is highly, highly annoying.

69
00:04:01.670 --> 00:04:04.347
And we also have to reset it every time.

70
00:04:04.347 --> 00:04:06.594
So that's definitely
a big con to singletons.

71
00:04:06.594 --> 00:04:11.313
But yeah, long story short, singletons
are great if you wanna achieve some

72
00:04:11.313 --> 00:04:13.977
kind of global state in your application.

73
00:04:13.977 --> 00:04:19.625
But maybe consider using a module if
that works for your application as well.

74
00:04:19.625 --> 00:04:22.566
&gt;&gt; What does the default
keyword do to an export?

75
00:04:22.566 --> 00:04:27.316
&gt;&gt; The default, so
it kind of does two things.

76
00:04:27.316 --> 00:04:30.838
I'll just show you.

77
00:04:36.100 --> 00:04:39.672
I was gonna fork it so
I didn't change the, so

78
00:04:39.672 --> 00:04:43.718
let's say I was going to
default connection here.

79
00:04:43.718 --> 00:04:45.613
And I go to test.js.

80
00:04:45.613 --> 00:04:51.869
I can just do,
import connection from './index.js'.

81
00:04:51.869 --> 00:04:55.316
And with a default import,
I don't have to use this in brackets.

82
00:04:55.316 --> 00:04:57.026
I could have actually named this anything.

83
00:04:57.026 --> 00:05:00.271
It could have been like,
databaseConnectionlol,

84
00:05:00.271 --> 00:05:03.672
and it still would have
imported this default export.

85
00:05:03.672 --> 00:05:06.385
Now, normally,
if we have maybe a named export, so

86
00:05:06.385 --> 00:05:09.840
anything within brackets, or
export connection, in that case,

87
00:05:09.840 --> 00:05:12.633
I do have to explicitly say
this is named connection.

88
00:05:12.633 --> 00:05:15.590
Now I can still rename it to
be databaseConnection with,

89
00:05:15.590 --> 00:05:19.838
I always forget the name of this thing,
as, sorry, with the as keyword, but

90
00:05:19.838 --> 00:05:21.643
that's the biggest difference.

91
00:05:21.643 --> 00:05:24.835
Now actually, also the default keyword.

92
00:05:24.835 --> 00:05:28.828
So what we're exporting here is more like,
okay, wait, let me just create a comment.

93
00:05:28.828 --> 00:05:31.717
I'm so bad at live coding, it's hilarious.

94
00:05:31.717 --> 00:05:35.890
Okay, we can actually have
default connection, and

95
00:05:35.890 --> 00:05:38.682
then we also have connection here.

96
00:05:38.682 --> 00:05:44.788
So when we're importing the default,
I could also just say default,

97
00:05:44.788 --> 00:05:48.770
which is importing the default connection.

98
00:05:48.770 --> 00:05:51.611
Okay, I don't know if that
explanation was any better.

99
00:05:51.611 --> 00:05:55.931
The biggest advantage of using a default
export is that we don't have to think

100
00:05:55.931 --> 00:05:59.000
about the name with which
we're exporting the value.

101
00:05:59.000 --> 00:06:02.063
I could have just done databaseConnection.

102
00:06:02.063 --> 00:06:06.760
And if I maybe in this file already had
something called databaseConnection,

103
00:06:06.760 --> 00:06:09.322
I don't know, just a private value here,

104
00:06:09.322 --> 00:06:12.538
then this would have resulted
in a naming collision.

105
00:06:12.538 --> 00:06:14.275
So I don't want to use that.

106
00:06:14.275 --> 00:06:17.312
So I either don't want to rename
this import or the default export,

107
00:06:17.312 --> 00:06:19.779
which is most likely the case
cuz this can be anything.

108
00:06:19.779 --> 00:06:24.560
I can just rename it and make sure that
I'm using that throughout the application,

109
00:06:24.560 --> 00:06:26.008
or at least in this file.

110
00:06:26.008 --> 00:06:28.151
So that's the biggest difference,

111
00:06:28.151 --> 00:06:31.411
is just the way that we can
import them in other modules.

112
00:06:31.411 --> 00:06:33.240
Again, there's a small exercise.

113
00:06:33.240 --> 00:06:36.539
So this is a fake database
connection class, and

114
00:06:36.539 --> 00:06:41.777
we want to make sure that there's only
ever one single database connection.

115
00:06:41.777 --> 00:06:46.152
This is actually a pretty common use case
for a singleton because we don't wanna

116
00:06:46.152 --> 00:06:49.890
just have a hundred database
connections within one application.

117
00:06:49.890 --> 00:06:53.788
So you can see the class here,
DBConnection, we have a connect and

118
00:06:53.788 --> 00:06:55.051
disconnect method.

119
00:06:55.051 --> 00:06:58.864
And we want to make sure that
only one instance can ever exist.

120
00:06:58.864 --> 00:07:04.239
So make sure that this is a singleton,
non-modifiable, and a single instance.

