WEBVTT

1
00:00:00.041 --> 00:00:03.239
Is there like a certain
amount of times like for

2
00:00:03.239 --> 00:00:08.078
this example we only had it in two
places but in a bigger applications,

3
00:00:08.078 --> 00:00:13.264
they're like actually two,
doesn't warrant an observer but like five.

4
00:00:13.264 --> 00:00:16.165
&gt;&gt; For sure I mean yeah, in this
example there is no reason to use it.

5
00:00:16.165 --> 00:00:20.499
As an observer I think it's totally fine
to just use those methods but normally

6
00:00:20.499 --> 00:00:25.177
especially with maybe user tracking, user
analytics or if there's ever an error.

7
00:00:25.177 --> 00:00:30.381
And you just wanna send it to an external
service like a logging service,

8
00:00:30.381 --> 00:00:33.122
I don't know any analytics service.

9
00:00:33.122 --> 00:00:36.650
Which is very common to do that throughout
the application like especially

10
00:00:36.650 --> 00:00:39.063
when you're working with React or
anything else.

11
00:00:39.063 --> 00:00:41.762
You have so
many different components that,

12
00:00:41.762 --> 00:00:45.953
they're not always structured in
a very performance way where you can

13
00:00:45.953 --> 00:00:49.586
just like import all these
analytics functions every time.

14
00:00:49.586 --> 00:00:50.799
So, yeah.

15
00:00:50.799 --> 00:00:54.911
I mean, of course you can use it at any
scale, you can still use it also for

16
00:00:54.911 --> 00:00:56.472
just these two functions.

17
00:00:56.472 --> 00:01:01.307
But obviously it's way more
you get more benefits out

18
00:01:01.307 --> 00:01:06.155
of it when it's actually
like a larger application.

19
00:01:06.155 --> 00:01:08.807
Yeah, so you don't have to worry about it.

20
00:01:08.807 --> 00:01:12.948
&gt;&gt; Could you quickly touch
upon the real use case for

21
00:01:12.948 --> 00:01:15.521
unsubscribe
&gt;&gt; For unsubscribe,

22
00:01:15.521 --> 00:01:17.534
there are many use cases.

23
00:01:17.534 --> 00:01:20.669
I mean, maybe you just want to use
it one time if something happens or

24
00:01:20.669 --> 00:01:21.879
if If it doesn't happen,

25
00:01:21.879 --> 00:01:25.574
then you wanna make sure that this
subscriber doesn't get invoked more often.

26
00:01:25.574 --> 00:01:29.817
Maybe based on external events or if
certain time has passed, there's certain

27
00:01:29.817 --> 00:01:33.762
timeout or if an error occurred,
you want to make sure to unsubscribe it.

28
00:01:33.762 --> 00:01:37.042
So like while the program is running,

29
00:01:37.042 --> 00:01:41.046
it will never try to
call that observer again.

30
00:01:41.046 --> 00:01:41.681
Honestly, yeah.

31
00:01:41.681 --> 00:01:46.214
I feel like there's not really a specific
use case I can think of now because there

32
00:01:46.214 --> 00:01:48.558
are so many different types of use cases.

33
00:01:48.558 --> 00:01:52.876
Normally I do it like I said based on
an error handling if an error gets thrown

34
00:01:52.876 --> 00:01:56.590
somewhere else and that is somehow
connected to that observer.

35
00:01:56.590 --> 00:02:00.153
I want to make sure to unsubscribe it,
so I'm not calling it more often.

36
00:02:00.153 --> 00:02:02.712
This error can maybe come from
like an external API if I've

37
00:02:02.712 --> 00:02:05.428
already reached my request limit or
if your request limit just

38
00:02:05.428 --> 00:02:08.425
to make sure that I'm not getting
a huge bill at the end of the month.

39
00:02:08.425 --> 00:02:12.627
Because I kept on or
at invoking that subscriber, yeah.

40
00:02:12.627 --> 00:02:17.180
It's nice that once
an observer is subscribed,

41
00:02:17.180 --> 00:02:21.296
that you can also
unsubscribe it if need be.

42
00:02:21.296 --> 00:02:23.550
Yeah, but there are many of these cases.

43
00:02:23.550 --> 00:02:25.887
[LAUGH]
&gt;&gt; I got a question too.

44
00:02:25.887 --> 00:02:27.190
&gt;&gt; Yeah.

45
00:02:27.190 --> 00:02:30.501
&gt;&gt; We're, in this case, we're just
sending things to analytics, and so

46
00:02:30.501 --> 00:02:34.087
maybe we don't care if it fails I'm
imagining a situation where I go overboard

47
00:02:34.087 --> 00:02:36.343
with observables I think
they're really cool.

48
00:02:36.343 --> 00:02:41.416
And now I've got my observers crashing,
creating problems or I want one

49
00:02:41.416 --> 00:02:46.668
to happen and then but if that one
happens, I want the second one to happen.

50
00:02:46.668 --> 00:02:51.415
For sure is there like a juggling problem
you can encounter with observables where

51
00:02:51.415 --> 00:02:54.045
it's maybe not a good
case to use observables

52
00:02:54.045 --> 00:02:54.771
&gt;&gt; Yeah I mean and

53
00:02:54.771 --> 00:02:58.475
this is kind of this almost goes back
to the decreased performance here.

54
00:02:58.475 --> 00:03:02.608
It is good for, if you have many function
that you wanna invoke but then there's yet

55
00:03:02.608 --> 00:03:03.684
a certain pressure.

56
00:03:03.684 --> 00:03:07.188
If it's too many or
if they relate to each other,

57
00:03:07.188 --> 00:03:11.729
if one has to go first then
definitely do not use an observable.

58
00:03:11.729 --> 00:03:15.870
Do not subscribe them to the same
observable because the observer doesn't

59
00:03:15.870 --> 00:03:17.324
care about how it's run.

60
00:03:17.324 --> 00:03:22.349
All he cares about is notifying that
function, doesn't care how it's done and

61
00:03:22.349 --> 00:03:27.224
in what order and of course if you have
some for like millions of subscribers.

62
00:03:27.224 --> 00:03:31.419
It can take a long time to notify all of
them maybe even like results in the server

63
00:03:31.419 --> 00:03:31.999
timeout.

64
00:03:31.999 --> 00:03:37.653
So you wanna ensure that the observers
themselves are not related to each other

65
00:03:37.653 --> 00:03:43.235
like the result of one should not are not
dependent on each other I should say.

66
00:03:43.235 --> 00:03:46.585
The result of one should
not affect the other one.

67
00:03:46.585 --> 00:03:48.660
Maybe you can lose multiple
observables for that but

68
00:03:48.660 --> 00:03:51.688
you can definitely go overboard with
like having observables everywhere.

69
00:03:51.688 --> 00:03:55.607
And then ending up in this weird problem,
where does certain data come from,

70
00:03:55.607 --> 00:03:57.614
why does it get invoked all that stuff?

71
00:03:57.614 --> 00:04:02.087
It can definitely be pretty tricky to
understand where stuff happens with

72
00:04:02.087 --> 00:04:03.391
observables I find.

73
00:04:03.391 --> 00:04:07.363
&gt;&gt; I think that's why RX JS has lots and
lots of operators.

74
00:04:07.363 --> 00:04:08.585
&gt;&gt; Yeah, exactly, yeah.

75
00:04:08.585 --> 00:04:14.347
If you use RX JS yeah, exactly that
they're trying to solve that problem.

76
00:04:14.347 --> 00:04:19.474
Personally I don't use RX JS or
I haven't used RXJS and

77
00:04:19.474 --> 00:04:25.840
react applications but when you go
to their, I don't know if RXJS.

78
00:04:25.840 --> 00:04:28.102
Just to show you real quick,
so they have an overview,

79
00:04:28.102 --> 00:04:29.930
so they're all using observables as well.

80
00:04:29.930 --> 00:04:35.387
So you have like observers and in here you
can actually see they give you a lot more

81
00:04:35.387 --> 00:04:40.781
to work with, that you can invoke like
the next event you can like middleware.

82
00:04:40.781 --> 00:04:45.002
Yeah, so what I showed before it's kind
of more like the the pattern behind

83
00:04:45.002 --> 00:04:47.481
observables, like this is what you can do.

84
00:04:47.481 --> 00:04:50.455
And then luckily, there are many
developers that tell you that pattern and

85
00:04:50.455 --> 00:04:53.536
simplify it for those exact reasons
that you say like okay, this is perfect.

86
00:04:53.536 --> 00:04:57.339
But there are so
many things that might go wrong, so

87
00:04:57.339 --> 00:05:02.202
if you wanna use observables,
I would definitely check out RCS or

88
00:05:02.202 --> 00:05:06.676
any similar library that may
&gt;&gt; We do have multiple courses on arcs

89
00:05:06.676 --> 00:05:08.215
&gt;&gt; Yeah, yeah perfect.

90
00:05:08.215 --> 00:05:12.717
Check out their courses
on RXJS net in that case.

91
00:05:12.717 --> 00:05:14.049
&gt;&gt; One quick question.

92
00:05:14.049 --> 00:05:18.599
So are the subscribers
notified in random order or

93
00:05:18.599 --> 00:05:21.858
according to on subscribed first?

94
00:05:21.858 --> 00:05:26.331
&gt;&gt; No, so that just depends on
how you implement the Notify.

95
00:05:26.331 --> 00:05:29.923
So in here, I do the for each,
so that does it sequentially.

96
00:05:29.923 --> 00:05:34.686
Maybe if I knew that they were Promises,
I could do promise.all or

97
00:05:34.686 --> 00:05:40.572
something which returns a promise and
then runs all those functions in parallel.

98
00:05:40.572 --> 00:05:42.633
So that all depends on
your own implementation.

99
00:05:42.633 --> 00:05:47.706
It depends on the data you expect but,
yeah, that doesn't really,

100
00:05:47.706 --> 00:05:52.176
yeah like I said it just depends
on your own implementation.

101
00:05:52.176 --> 00:05:55.180
In this case, it's all in sequence.

102
00:05:55.180 --> 00:06:00.500
&gt;&gt; For this example, so we could
have created a wrapper function that

103
00:06:00.500 --> 00:06:07.351
call all those functions, like the three
though does it the Google, and the custom.

104
00:06:07.351 --> 00:06:11.721
&gt;&gt; Yeah
&gt;&gt; Why would you reach for

105
00:06:11.721 --> 00:06:14.626
a wrapper function versus an observable?

106
00:06:14.626 --> 00:06:19.803
&gt;&gt; I feel like they have different
use cases with an observable,

107
00:06:19.803 --> 00:06:23.788
you can handle a lot of
different subscribers,

108
00:06:23.788 --> 00:06:30.875
maybe a wrapper function in this case,
could have looked something like function.

109
00:06:30.875 --> 00:06:34.150
I don't know if this is kind
of what you were thinking of,

110
00:06:34.150 --> 00:06:36.130
which in turn ,well actually no,

111
00:06:36.130 --> 00:06:40.597
I will not live code that's because
that would just go wrong anyways, yeah.

112
00:06:40.597 --> 00:06:42.166
&gt;&gt; Like call all three of those functions.

113
00:06:42.166 --> 00:06:45.317
&gt;&gt; Yeah, exactly.
&gt;&gt; Function and call all that function.

114
00:06:45.317 --> 00:06:49.007
&gt;&gt; Exactly
&gt;&gt; Instead of the observer

115
00:06:49.007 --> 00:06:51.665
&gt;&gt; Yeah, no of course.

116
00:06:51.665 --> 00:06:54.229
Like in this case,
that's totally an option.

117
00:06:54.229 --> 00:06:57.571
I feel like observers in general,
it makes it so

118
00:06:57.571 --> 00:07:02.347
much easier like in this case,
I could just import the server here.

119
00:07:02.347 --> 00:07:07.677
And just notify it and
this name isn't super descriptive,

120
00:07:07.677 --> 00:07:10.982
maybe I can say analytics observer or

121
00:07:10.982 --> 00:07:16.218
something observable,
I should say servable, Notify.

122
00:07:16.218 --> 00:07:18.882
If we'd had to import
that wrapper function,

123
00:07:18.882 --> 00:07:22.861
maybe if we need to have way more
functions in that wrapper function.

124
00:07:22.861 --> 00:07:26.386
We'd like have to update that every time
whereas here, we can easily change it.

125
00:07:26.386 --> 00:07:30.575
We can unsubscribe subscribers,
we can subscribe subscribers at runtime,

126
00:07:30.575 --> 00:07:33.613
we cannot easily update
a wrapper function at runtime.

127
00:07:33.613 --> 00:07:36.205
So that's what I mean,
they have different use cases.

128
00:07:36.205 --> 00:07:40.963
If you know that a couple of functions
will always run the same ones,

129
00:07:40.963 --> 00:07:43.565
a wrapper function might be better.

130
00:07:43.565 --> 00:07:47.663
An observable is more for like, okay,
we don't know who's gonna subscribe to it,

131
00:07:47.663 --> 00:07:49.755
we don't know if they might unsubscribe.

132
00:07:49.755 --> 00:07:51.975
The observable doesn't care.

133
00:07:51.975 --> 00:07:57.576
There's just a nice way to pass data
to potential subscribers if they

134
00:07:57.576 --> 00:08:02.297
are subscribed, if that clears things up,
&gt;&gt; Yeah, thank you.

135
00:08:02.297 --> 00:08:03.600
&gt;&gt; Cool, yeah.

136
00:08:03.600 --> 00:08:07.256
&gt;&gt; I'm curious in apps.

137
00:08:07.256 --> 00:08:09.148
And it might be hard to speak to this but

138
00:08:09.148 --> 00:08:12.233
would it be common to have
a number of different observables?

139
00:08:12.233 --> 00:08:18.039
And how might you delineate
between observables?

140
00:08:18.039 --> 00:08:23.516
Would it I guess depend on which
subscribers you wanted to be attached?

141
00:08:23.516 --> 00:08:27.614
&gt;&gt; Exactly, so of course,
kinda like I did here,

142
00:08:27.614 --> 00:08:31.616
maybe this is like our
analytics observable.

143
00:08:31.616 --> 00:08:35.867
So, we know that all the functions that
are subscribed here are all dedicated to

144
00:08:35.867 --> 00:08:37.015
sending analytics.

145
00:08:37.015 --> 00:08:41.566
So, maybe even in the Notify or in the
subscribe, maybe we wanna do some extra

146
00:08:41.566 --> 00:08:46.414
validation, okay, is this the function
that we'd expect, is a type we expect.

147
00:08:46.414 --> 00:08:51.316
In the Notify we might also, I don't know,
add different at any different logic,

148
00:08:51.316 --> 00:08:52.237
I don't know.

149
00:08:52.237 --> 00:08:53.116
And then normally,

150
00:08:53.116 --> 00:08:56.589
if we maybe wanna have another observable
like click observable or something.

151
00:08:56.589 --> 00:09:00.644
Like we wanna track a user click events,
that'll be another observable just to make

152
00:09:00.644 --> 00:09:04.374
sure that we don't have one giant
observable that sends events to all the-.

153
00:09:04.374 --> 00:09:08.646
If we had a click observable, we don't
want them to send events to analytics or

154
00:09:08.646 --> 00:09:10.344
if that's not what we expect.

155
00:09:10.344 --> 00:09:15.144
Although I guess click is the wrong thing
here cuz I'm literally using click, so

156
00:09:15.144 --> 00:09:17.487
I guess maybe a scrolling observable.

157
00:09:17.487 --> 00:09:21.185
Yeah, so it's just having multiple
observables in that case,

158
00:09:21.185 --> 00:09:24.544
if you need to use observables for
that specific use case.

159
00:09:24.544 --> 00:09:28.959
It's definitely the better way to go, just
to make sure that you don't unnecessarily

160
00:09:28.959 --> 00:09:31.873
invoke your observers,
send analytics all that stuff.

161
00:09:35.750 --> 00:09:36.563
Cool.

162
00:09:36.563 --> 00:09:42.968
&gt;&gt; A place I use it, is if I have like
model like anytime that model updates,

163
00:09:42.968 --> 00:09:46.344
it just trigger an event and then-
&gt;&gt; Yeah.

164
00:09:46.344 --> 00:09:51.380
&gt;&gt; Anything my code can listen and
subscribe many different places.

165
00:09:51.380 --> 00:09:53.637
And that seems to work really well.

166
00:09:53.637 --> 00:09:55.742
&gt;&gt; Yeah, yeah,
it's a very powerful pattern.

167
00:09:55.742 --> 00:09:57.969
It's very nice, very nice to use.

