WEBVTT

1
00:00:00.430 --> 00:00:04.043
Okay, let's look at the solution for
this provider pattern, or

2
00:00:04.043 --> 00:00:05.757
a compound pattern exercise.

3
00:00:05.757 --> 00:00:10.439
So the first thing that I like to do
is to create just a separate file where

4
00:00:10.439 --> 00:00:13.029
we're going to store this component.

5
00:00:13.029 --> 00:00:17.022
And I'm actually just going to move a lot
of functionality from input to FlyOut.

6
00:00:17.022 --> 00:00:21.060
So don't get confused now,
I'm just going to copy paste.

7
00:00:21.060 --> 00:00:26.565
So the first thing that I'm gonna
do is I'm gonna get rid of this.

8
00:00:26.565 --> 00:00:28.514
So we gonna create like a FlyOutContext.

9
00:00:28.514 --> 00:00:32.186
FlyOutContext is React.createContext.

10
00:00:32.186 --> 00:00:35.417
This is going to keep track of
the state of our FlyOuts, or yeah, or

11
00:00:35.417 --> 00:00:38.784
compound components and
see if it's open values, stuff like that.

12
00:00:38.784 --> 00:00:42.850
Then we're going to create the FlyOuts
which is just going to be the provider.

13
00:00:42.850 --> 00:00:49.056
So the first thing that we're
gonna do is return.provider.

14
00:00:50.232 --> 00:00:52.788
It doesn't auto close,
I'm used to that it auto close,

15
00:00:52.788 --> 00:00:55.367
I guess then prompts a children's
gonna get props here.

16
00:00:55.367 --> 00:01:00.169
And the value that we pass here is, again,
like that functionality that we see here.

17
00:01:00.169 --> 00:01:04.706
So we wanna get the open toggle.

18
00:01:10.168 --> 00:01:14.625
Yeah, so we have the open
setOpen value setValue, or

19
00:01:14.625 --> 00:01:19.986
I guess we just have toggle actually
because it uses to setOpen.

20
00:01:19.986 --> 00:01:20.847
Okay, cool.

21
00:01:20.847 --> 00:01:24.541
So now we have this FlyOut
which I'm just going to export.

22
00:01:24.541 --> 00:01:28.719
And then we also want to add,
what else was it, the FlyOut.input and

23
00:01:28.719 --> 00:01:30.244
List item and ListItem.

24
00:01:30.244 --> 00:01:33.567
So the FlyOut.input, export function or

25
00:01:33.567 --> 00:01:39.119
actually it could just be a function
input, which was gonna get props.

26
00:01:39.119 --> 00:01:43.149
So this one is going to consume that
provider that we just created here.

27
00:01:43.149 --> 00:01:49.143
So I need the value, toggles,
setValue is Reacts.useContext.

28
00:01:49.143 --> 00:01:52.992
I could have just created a separate
hook for this, use FlyOutContext but

29
00:01:52.992 --> 00:01:54.182
I haven't done that.

30
00:01:54.182 --> 00:02:00.080
So here,
which then again returns this input,

31
00:02:02.006 --> 00:02:05.501
Okay, return, input.

32
00:02:05.501 --> 00:02:08.820
Now this is already using the toggle,
value, setValue,

33
00:02:08.820 --> 00:02:10.726
all the stuff that we had before.

34
00:02:10.726 --> 00:02:17.425
And then I also need to create a list,
again gets props.

35
00:02:17.425 --> 00:02:22.386
This one just needs to know if
it should be open or not, so

36
00:02:22.386 --> 00:02:27.047
that's also get passed to your open,
return open.

37
00:02:27.047 --> 00:02:28.307
Let's see how we add that here.

38
00:02:28.307 --> 00:02:34.159
So we have the open FlyOut
list is going to copy this.

39
00:02:34.159 --> 00:02:36.229
We didn't include the open there.

40
00:02:36.229 --> 00:02:38.604
I think I did.

41
00:02:38.604 --> 00:02:41.807
Yeah, return open.

42
00:02:41.807 --> 00:02:46.528
Now it doesn't care about the actual
listings, it just needs to render this UL

43
00:02:46.528 --> 00:02:51.553
and then the children that we eventually
pass to it, or props that children serve.

44
00:02:51.553 --> 00:02:55.832
And then we also need to create a list,
there.

45
00:02:55.832 --> 00:02:58.271
And then we also have an item, props, and

46
00:02:58.271 --> 00:03:01.279
that is just going to be
this little list item here.

47
00:03:04.084 --> 00:03:09.711
And this doesn't need to key,
just needs to know the props of children.

48
00:03:16.294 --> 00:03:20.579
Okay props, and then we're going to
use the setValue from this context.

49
00:03:20.579 --> 00:03:23.260
So we're going to get setValue.

50
00:03:23.260 --> 00:03:24.903
I need to return it obviously, return.

51
00:03:31.613 --> 00:03:36.765
So I'm just going to add another proper,
it's gonna be like props up value.

52
00:03:36.765 --> 00:03:39.889
This is kind of similar to
what we saw in these examples,

53
00:03:39.889 --> 00:03:43.278
just to make it easier to set the value,
wait, now we got it,

54
00:03:43.278 --> 00:03:46.812
this value, to essentially, or
to eventually set the state.

55
00:03:46.812 --> 00:03:47.917
So on mouse down so

56
00:03:47.917 --> 00:03:52.061
when we click it we set the value to
that props up value that we pass.

57
00:03:52.061 --> 00:03:55.001
All right, so now we have the list,
the item, and

58
00:03:55.001 --> 00:03:59.490
the input components and is throwing
an error now because it's duplicate.

59
00:03:59.490 --> 00:04:04.219
But to make this a compound component
we just need to say FlyOut.Input,

60
00:04:04.219 --> 00:04:07.408
FlyOut.Input is equal
to the input component.

61
00:04:07.408 --> 00:04:12.026
FlyOut.List is equal to list component,
and FlyOut.,

62
00:04:12.026 --> 00:04:18.734
I think I probably didn't have the, yeah,
flyout.listItem is item for example.

63
00:04:20.960 --> 00:04:24.860
All right, so now we have our compound
component, the FlyOut component.

64
00:04:24.860 --> 00:04:26.975
So now we created the context.

65
00:04:26.975 --> 00:04:30.798
The FlyOut itself is provider like we saw
before, so this one contains the state and

66
00:04:30.798 --> 00:04:32.280
passes it down to any children.

67
00:04:32.280 --> 00:04:35.416
And we see that the children here,
they use this context,

68
00:04:35.416 --> 00:04:38.563
they consume this context which
they can then in turn use.

69
00:04:38.563 --> 00:04:43.919
So in the input component we can
now just import this FlyOut.

70
00:04:43.919 --> 00:04:49.853
FlyOut, hopefully I exported it,
I may have forgotten to do that.

71
00:04:49.853 --> 00:04:51.385
Okay, no, I did not.

72
00:04:51.385 --> 00:04:54.315
So we can just do return.

73
00:04:57.002 --> 00:05:00.624
I'm just gonna create it here,
FlyOut, nope.

74
00:05:04.041 --> 00:05:06.518
Then first we have the FlyOut.input.

75
00:05:06.518 --> 00:05:08.537
Now does doesn't need any props or
anything,

76
00:05:08.537 --> 00:05:10.463
we're just rendering the input right now.

77
00:05:10.463 --> 00:05:12.956
But you can see here it's just the input.

78
00:05:12.956 --> 00:05:16.962
But then we also want to
render the list which is

79
00:05:16.962 --> 00:05:21.709
attached to that input, so
we have the flyout.list.

80
00:05:21.709 --> 00:05:25.836
And within this list we want
to render these list items.

81
00:05:25.836 --> 00:05:27.980
Now these list items are based on
the listings that we map here.

82
00:05:27.980 --> 00:05:32.618
So we can still use this part, But

83
00:05:32.618 --> 00:05:40.603
then instead of just rendering
a ListItem here we do FlyOuts.ListItem.

84
00:05:40.603 --> 00:05:44.637
FlyOuts.ListItem, cool.

85
00:05:44.637 --> 00:05:47.731
So now we just set
the value is listing.name.

86
00:05:47.731 --> 00:05:51.380
Okay we don't need this anymore,
we also don't need that.

87
00:05:51.380 --> 00:05:56.631
We do need a key because we're still
mapping over React components,

88
00:05:56.631 --> 00:06:00.713
and it also expected this
value prop here in FlyOuts.

89
00:06:00.713 --> 00:06:04.601
So, now let's see.

90
00:06:04.601 --> 00:06:10.325
Return, We can get rid
of all of these things.

91
00:06:15.006 --> 00:06:16.125
Let's see.

92
00:06:18.312 --> 00:06:25.509
Okay, so now when we refresh,
[LAUGH] Wait, where did it go?

93
00:06:25.509 --> 00:06:26.346
Let's see.

94
00:06:26.346 --> 00:06:32.035
Are we rendering the Flyouts, input, list?

95
00:06:32.035 --> 00:06:34.112
FlyOut.list equals list.

96
00:06:34.112 --> 00:06:35.422
Let's see if it's open or not.

97
00:06:39.156 --> 00:06:42.469
True, FlyOut.list.

98
00:06:42.469 --> 00:06:45.145
Maybe I don't have the right
CSS selectors here,

99
00:06:45.145 --> 00:06:47.320
let's look at the solution right here.

100
00:06:47.320 --> 00:06:49.327
It could also just be stuck,
this thing again.

101
00:06:49.327 --> 00:06:53.737
This is the solution that I wrote down
here is the exact same state as where

102
00:06:53.737 --> 00:06:56.350
I left the other one off, so don't worry.

103
00:06:56.350 --> 00:06:59.123
So we can have this FlyOuts, and

104
00:06:59.123 --> 00:07:04.169
in here, Yeah, so
we're not actually using this.

105
00:07:04.169 --> 00:07:09.082
So here in the input, one thing about
the compact component is that we

106
00:07:09.082 --> 00:07:13.074
can just use these return
components whatever we want.

107
00:07:13.074 --> 00:07:18.375
If we wanna somehow render three
inputs we could do that if we want to.

108
00:07:18.375 --> 00:07:20.658
Is not my friend today.

109
00:07:20.658 --> 00:07:24.484
Anyways, normally you would see three
input components just because it doesn't

110
00:07:24.484 --> 00:07:26.092
care about the component itself,

111
00:07:26.092 --> 00:07:28.598
it will just render whatever
will pass his children.

112
00:07:28.598 --> 00:07:33.634
So the compound pattern is a really nice
way to create those dynamic flexible

113
00:07:33.634 --> 00:07:39.224
stateful components, and kind of have
this plug-and-play method that you both,

114
00:07:39.224 --> 00:07:43.182
like I said, often see unlike
those component libraries.

115
00:07:43.182 --> 00:07:46.466
Yeah, so this is a really good
example of where it is useful for

116
00:07:46.466 --> 00:07:48.945
smaller context to use
the provider pattern.

117
00:07:48.945 --> 00:07:51.546
Because it was super easy for
us to just create a context and

118
00:07:51.546 --> 00:07:53.682
share the state with so
many child components.

119
00:07:53.682 --> 00:07:59.167
We don't know what the child components
are cuz we can dynamically render them.

120
00:07:59.167 --> 00:08:03.628
And the child components only
care about certain values, so

121
00:08:03.628 --> 00:08:08.452
it's really nice to destructure
them from the context that way.

122
00:08:10.260 --> 00:08:14.743
Yeah, any questions?

123
00:08:14.743 --> 00:08:18.439
I know this is a lot to take in cuz
it's a combination of many things that

124
00:08:18.439 --> 00:08:19.387
we just covered.

125
00:08:19.387 --> 00:08:23.503
So I completely understand if it's still
a bit, okay, but why would you use it?

126
00:08:23.503 --> 00:08:26.417
Of course also,
this website will always be online so

127
00:08:26.417 --> 00:08:30.192
if you ever wanna read back what we
did today, free to check that out.

128
00:08:30.192 --> 00:08:33.704
Sure, yeah, what's the question?

129
00:08:33.704 --> 00:08:36.517
&gt;&gt; Can we use the memo and

130
00:08:36.517 --> 00:08:42.305
useCallback to avoid rerendering issues?

131
00:08:42.305 --> 00:08:47.061
&gt;&gt; It depends on the data that you're
getting, but yeah, usually you can use

132
00:08:47.061 --> 00:08:52.663
useMemo and useCallback to ensure that we
aren't unnecessarily updating the states.

133
00:08:52.663 --> 00:08:57.505
In this case, I mean, this is not
specific to the compound pattern,

134
00:08:57.505 --> 00:09:01.189
this is just specific to,
I guess hooks in general.

135
00:09:01.189 --> 00:09:05.953
So, in some cases you may not
necessarily need to reupdate a hook if

136
00:09:05.953 --> 00:09:08.179
the end result stays the same.

137
00:09:08.179 --> 00:09:13.177
In that case we can memo-ize the results
or memo-ize the actual function that we

138
00:09:13.177 --> 00:09:17.881
pass to the useCallback to make sure
that we don't generate another hook for

139
00:09:17.881 --> 00:09:18.927
that specific.

140
00:09:18.927 --> 00:09:21.535
Or create another function for
that hook, if that makes sense.

141
00:09:21.535 --> 00:09:26.167
I'm really bad at explaining those
two hooks because they are so

142
00:09:26.167 --> 00:09:30.800
specific, but once you know
the difference between useMemo and

143
00:09:30.800 --> 00:09:36.150
useCallback, they return the same result,
they have the same use case.

144
00:09:36.150 --> 00:09:40.610
But useCallback expects a function,
whereas useMemo expects a value,

145
00:09:40.610 --> 00:09:41.639
as far as I know.

146
00:09:41.639 --> 00:09:44.368
But yeah, these are very
useful hooks if you are using

147
00:09:44.368 --> 00:09:47.961
data that are within a component
that shouldn't rerender too often.

148
00:09:47.961 --> 00:09:51.203
But if it's highly dynamic data make sure
that you're not using useMemo where it

149
00:09:51.203 --> 00:09:51.782
shouldn't.

150
00:09:51.782 --> 00:09:55.129
Cuz then you might actually end up
with the opposite where you're,

151
00:09:55.129 --> 00:09:56.546
why is my data not updating?

152
00:09:56.546 --> 00:09:58.319
Why is my component not updating?

153
00:09:58.319 --> 00:10:01.566
It's because it's using a memo-ized value.

154
00:10:01.566 --> 00:10:04.316
Yeah, those are the built-in hooks.

155
00:10:04.316 --> 00:10:09.063
I mean, if you get started with hooks,
definitely make sure to check them out

156
00:10:09.063 --> 00:10:11.765
because the React core team,
they expose so

157
00:10:11.765 --> 00:10:16.388
many useful hooks that you can use to
get really good performance website.

158
00:10:16.388 --> 00:10:21.128
So you don't have to use all the community
hooks, but it's definitely good to know

159
00:10:21.128 --> 00:10:26.084
what's out there and what you can use to
decrypt performance, stateful components.

160
00:10:26.084 --> 00:10:28.514
Cuz of course it's always
an issue with React,

161
00:10:28.514 --> 00:10:31.136
does it render too often?Where
do I put the state?

162
00:10:31.136 --> 00:10:34.680
But yeah, it's a different way of thinking
about things with hooks, I guess.

