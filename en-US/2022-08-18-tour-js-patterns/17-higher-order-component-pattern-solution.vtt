WEBVTT

1
00:00:00.000 --> 00:00:04.265
So the very first thing that we're going
to do is to fetch the data from the URL

2
00:00:04.265 --> 00:00:08.666
that was passed as an argument cuz this
makes this higher order component super

3
00:00:08.666 --> 00:00:09.351
reusable.

4
00:00:09.351 --> 00:00:12.249
We're not just fetching
from the listing to URL,

5
00:00:12.249 --> 00:00:14.735
we can fetch from any
URL that we pass to it.

6
00:00:14.735 --> 00:00:17.963
So first,
we just have to use this effect again.

7
00:00:20.932 --> 00:00:26.487
Fetch(url) then res res.json,
the normal fetch stuff.

8
00:00:26.487 --> 00:00:29.790
And then based on this data,
we can set the data.

9
00:00:29.790 --> 00:00:32.636
We just have data, setData.

10
00:00:32.636 --> 00:00:33.718
It's React.useState.

11
00:00:37.175 --> 00:00:40.806
I'm just going to make this
only render on initial.

12
00:00:40.806 --> 00:00:42.373
And then if there's no data, so

13
00:00:42.373 --> 00:00:45.640
this is kind of where the higher-order
component logic comes in.

14
00:00:45.640 --> 00:00:46.789
We want to show that LoadingSpinner.

15
00:00:46.789 --> 00:00:51.155
Now, I'm aware that this could also
mean that there has been an error.

16
00:00:51.155 --> 00:00:52.982
So normally,
you probably also wanna account for that.

17
00:00:52.982 --> 00:00:55.873
But in this case,
we'll just say if there's no data yet,

18
00:00:55.873 --> 00:00:57.644
just return that LoadingSpinner.

19
00:00:57.644 --> 00:01:03.549
And otherwise, we will return the element
that was passed as this element,

20
00:01:03.549 --> 00:01:08.808
so the first one that we wrapped
the higher-order component with,

21
00:01:08.808 --> 00:01:11.774
and then also pass this data, right?

22
00:01:11.774 --> 00:01:19.150
So now when we go back to listings, We
don't want to export default the listings,

23
00:01:19.150 --> 00:01:22.926
we actually want to import the withLoader
higher-order component first, so

24
00:01:22.926 --> 00:01:28.170
withLoader from,
Let's see how far up I have to go.

25
00:01:28.170 --> 00:01:32.885
I think it's twice, hoc/withLoader, yes.

26
00:01:32.885 --> 00:01:35.583
And then in here, I'm going to default,
so these components.

27
00:01:35.583 --> 00:01:38.030
And it also expected that
URL from which to fetch it.

28
00:01:38.030 --> 00:01:39.689
So I'm just going to pass this one here.

29
00:01:43.298 --> 00:01:44.758
And now it will get this as props.

30
00:01:44.758 --> 00:01:47.750
So I don't have to use this anymore.

31
00:01:47.750 --> 00:01:50.089
And I believe it will be props.listings.

32
00:01:50.089 --> 00:01:52.284
So let's see how deeply fetched that is.

33
00:01:52.284 --> 00:01:57.623
I'm just gonna check how, See,

34
00:01:57.623 --> 00:02:01.022
props data.listings, so okay,

35
00:02:01.022 --> 00:02:06.072
props.data.listings, so data, okay, cool.

36
00:02:08.743 --> 00:02:11.343
Yeah, so now we created our
higher-order component, and

37
00:02:11.343 --> 00:02:14.257
you see this little loading spinner
spin when there is no data yet.

38
00:02:14.257 --> 00:02:18.513
So even if we have multiple components and
maybe fetch from another API,

39
00:02:18.513 --> 00:02:23.471
we can easily just reuse this withLoader
higher-order component by simply passing

40
00:02:23.471 --> 00:02:24.475
it another URL.

41
00:02:24.475 --> 00:02:27.387
And then probably also another component.

42
00:02:27.387 --> 00:02:31.022
Yeah, so that's really cool thing about
higher-order components is that they're

43
00:02:31.022 --> 00:02:32.949
super reusable, they're super flexible.

44
00:02:32.949 --> 00:02:37.016
And it makes it really easy to
easily add presentational data and

45
00:02:37.016 --> 00:02:38.380
also fetching data.

