WEBVTT

1
00:00:00.200 --> 00:00:02.960
Last, we have rendering patterns.

2
00:00:02.960 --> 00:00:08.919
Cuz yeah, we can render content in
a lot of different ways nowadays and

3
00:00:08.919 --> 00:00:16.260
knowing how and where to fetch your data
is key to your applications performance.

4
00:00:16.260 --> 00:00:20.147
Now maybe you're using a framework or
some other library or maybe just React

5
00:00:20.147 --> 00:00:23.975
standalone, but they often all use
different patterns like client-site

6
00:00:23.975 --> 00:00:28.108
rendering, static rendering, maybe
even incremental static regeneration,

7
00:00:28.108 --> 00:00:30.290
service site rendering and so on.

8
00:00:30.290 --> 00:00:34.530
Now, I'm not here to talk about which
pattern is the best which is the worst.

9
00:00:34.530 --> 00:00:37.950
They all have trade-offs,
best use cases and so on.

10
00:00:37.950 --> 00:00:41.588
Now before we start talking about
the different rendering patterns,

11
00:00:41.588 --> 00:00:43.880
something to keep in
mind is the Web Vitals.

12
00:00:43.880 --> 00:00:47.881
And this is a set of useful
measurements that Chrome provides and

13
00:00:47.881 --> 00:00:52.623
also uses in their search index to measure
how well your website performs and

14
00:00:52.623 --> 00:00:54.566
how your users experience it.

15
00:00:54.566 --> 00:00:57.770
Now, a subset of that is
called your Core Web Vitals.

16
00:00:57.770 --> 00:00:59.547
So here for
example we have the Time to First Byte.

17
00:00:59.547 --> 00:01:02.629
So that's how long it takes when
a user requests a website for

18
00:01:02.629 --> 00:01:04.570
your server to respond with the data.

19
00:01:04.570 --> 00:01:09.560
So before the browser gets the first bytes
in order to first execute all that stuff.

20
00:01:09.560 --> 00:01:11.475
Then we have the First Contentful Paint.

21
00:01:11.475 --> 00:01:14.643
So whenever your user actually sees
something useful to the screen for

22
00:01:14.643 --> 00:01:15.820
the first time.

23
00:01:15.820 --> 00:01:17.736
Then we also have
the Largest Contentful Paint.

24
00:01:17.736 --> 00:01:22.734
So the largest component has loaded maybe
a big image or any large component.

25
00:01:22.734 --> 00:01:26.138
And then also Time to Interactive
which is the time it takes

26
00:01:26.138 --> 00:01:31.550
before user can actually click on your
components and it actually does something.

27
00:01:31.550 --> 00:01:35.253
Cumulative Layout Shift, like we saw
before a layout shift is just annoying for

28
00:01:35.253 --> 00:01:35.870
your users.

29
00:01:35.870 --> 00:01:39.546
We don't want to load a website and
then stuff randomly renders in.

30
00:01:39.546 --> 00:01:42.838
You've probably experienced,
it is a very frustrating experience.

31
00:01:42.838 --> 00:01:46.895
And then there's also First Input Delay
which is the time for when the user

32
00:01:46.895 --> 00:01:51.960
interacts with the page and when the event
handlers are actually able to run.

33
00:01:51.960 --> 00:01:54.373
Now, we will be covering
a couple of terms.

34
00:01:54.373 --> 00:01:57.792
Compiling like we saw before,
the execution time,

35
00:01:57.792 --> 00:02:02.767
hydration which is attaching event and
this will be more clear later on, but

36
00:02:02.767 --> 00:02:07.276
it's attaching the handlers to
those static DOM nodes when they're

37
00:02:07.276 --> 00:02:10.490
just HTML and they're not interactive yet.

38
00:02:10.490 --> 00:02:13.692
Idle, the browser's state
when it's not doing anything,

39
00:02:13.692 --> 00:02:16.598
browser's idle it will
prefetch certain resources.

40
00:02:16.598 --> 00:02:19.943
Main thread, parsing, processing,
this will make sense later.

