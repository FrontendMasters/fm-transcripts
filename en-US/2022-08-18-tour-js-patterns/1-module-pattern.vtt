WEBVTT

1
00:00:00.010 --> 00:00:04.784
So first up, we have the module pattern,
which is a very useful pattern to split

2
00:00:04.784 --> 00:00:08.365
your code up into multiple,
smaller and reusable pieces.

3
00:00:08.365 --> 00:00:12.606
Now, if you've only been using JavaScript
pretty recently, or at least after ES15,

4
00:00:12.606 --> 00:00:14.413
this may seem very obvious to you, but

5
00:00:14.413 --> 00:00:16.918
it didn't really used to
be that way in JavaScript.

6
00:00:16.918 --> 00:00:20.904
It was pretty normal to just create one
big file that contained all the methods

7
00:00:20.904 --> 00:00:24.234
and all the values that we needed to use,
and then execute that.

8
00:00:24.234 --> 00:00:28.735
But with the module pattern, we can
actually split this up into modules, and

9
00:00:28.735 --> 00:00:32.544
only export the values, so
making them accessible to other files

10
00:00:32.544 --> 00:00:36.369
when we explicitly export these
values with the export keyword.

11
00:00:36.369 --> 00:00:41.469
And we can then import them in other
modules with the import keyword.

12
00:00:41.469 --> 00:00:45.438
So it's nice that when values
aren't explicitly exported,

13
00:00:45.438 --> 00:00:48.276
they're actually private to that module.

14
00:00:48.276 --> 00:00:51.083
For example,
here if we have the secret variable,

15
00:00:51.083 --> 00:00:55.016
since we didn't export it,
it's only available within that module.

16
00:00:55.016 --> 00:00:58.466
We cannot import it in other modules,
it will just stay in there, so

17
00:00:58.466 --> 00:00:59.625
it's encapsulated.

18
00:00:59.625 --> 00:01:04.619
We kind of have an idea of having
private variables within that module.

19
00:01:04.619 --> 00:01:07.907
Now, normally when we used
to work with JavaScripts,

20
00:01:07.907 --> 00:01:10.411
maybe we would import a script like this.

21
00:01:10.411 --> 00:01:16.919
So we have a math.js scripts or a file
that contains some mathematical methods.

22
00:01:16.919 --> 00:01:20.708
And then we also have the index.js file,
which then uses these.

23
00:01:20.708 --> 00:01:23.444
And this is totally fine,
this is how JavaScript works.

24
00:01:23.444 --> 00:01:29.187
And we can first import this math.js file
and then the index.js file, and index

25
00:01:29.187 --> 00:01:34.690
automatically has access to everything
that was written in a math.js file.

26
00:01:34.690 --> 00:01:39.281
That happened because JavaScript uses
something called an implied global.

27
00:01:39.281 --> 00:01:42.567
So anything that we defined in this file,
for example, divide,

28
00:01:42.567 --> 00:01:44.794
is actually also accessible on the window.

29
00:01:44.794 --> 00:01:47.432
We can just do divide 1 and 2.

30
00:01:47.432 --> 00:01:53.578
Now, if we had any secret values, it was
just hard to do that without modules.

31
00:01:53.578 --> 00:01:58.275
Now, ES15 or after ES15 we can
actually use built-in modules, and

32
00:01:58.275 --> 00:02:00.049
we can use this in two ways.

33
00:02:00.049 --> 00:02:04.096
So if we're just using the HTML tag,
we can add the type module to this,

34
00:02:04.096 --> 00:02:08.288
which then turns it into a module,
meaning it encapsulates everything.

35
00:02:08.288 --> 00:02:11.727
So you can see here that when we
tried to use sum in the index here,

36
00:02:11.727 --> 00:02:13.214
it says sum is not defined.

37
00:02:13.214 --> 00:02:16.681
Because it's a module and
it hasn't been exported from the module,

38
00:02:16.681 --> 00:02:18.310
it is private to just that file.

39
00:02:18.310 --> 00:02:23.113
Whereas if we didn't use the type module,
you can see that it works just fine, but

40
00:02:23.113 --> 00:02:25.632
this is not always the expected behavior.

41
00:02:25.632 --> 00:02:27.520
Besides HTML we can also
use modules in node, and

42
00:02:27.520 --> 00:02:29.417
there are actually two
ways that we can use this.

43
00:02:29.417 --> 00:02:33.770
Either we can use the mjs extension
to a file that should be module or

44
00:02:33.770 --> 00:02:37.131
we can just use the type
module in our package json.

45
00:02:37.131 --> 00:02:42.273
So for example here, you can see that
we've added the type module to our package

46
00:02:42.273 --> 00:02:47.186
json, which allows us to use all this
module specific syntax like import and

47
00:02:47.186 --> 00:02:48.755
then export from math.

48
00:02:48.755 --> 00:02:53.573
So here if we now run index, you can
see that we were able to use the sum,

49
00:02:53.573 --> 00:02:55.956
subtract, divide and multiply.

50
00:02:55.956 --> 00:03:02.742
It also shows that if we had a private
variable here like com secret and

51
00:03:02.742 --> 00:03:07.193
we imported that in our index file,
secret.

52
00:03:07.193 --> 00:03:11.304
And we again, run this node index, you
will see that it throws an error because

53
00:03:11.304 --> 00:03:14.691
the requested module doesn't
provide an export named secret.

54
00:03:14.691 --> 00:03:18.137
So only within the module
can we actually use that,

55
00:03:18.137 --> 00:03:21.754
we cannot use it in any other
part of our application.

56
00:03:21.754 --> 00:03:25.234
Yeah, so the tradeoffs to the module
pattern is that it's super easy to

57
00:03:25.234 --> 00:03:29.294
encapsulate all these values within just
that module because we have those private

58
00:03:29.294 --> 00:03:31.389
values by not explicitly exporting them.

59
00:03:31.389 --> 00:03:37.108
And then we also have these publicly
available values by exporting them.

60
00:03:37.108 --> 00:03:39.761
It's also easier to reuse certain modules.

61
00:03:39.761 --> 00:03:42.757
If we want to reuse certain parts of the
code, we don't have to repeat ourselves

62
00:03:42.757 --> 00:03:45.188
every time, we could just create
a module and then import that.

63
00:03:46.861 --> 00:03:51.617
All right, so the first challenge is,
we see this large index.js file that

64
00:03:51.617 --> 00:03:55.870
uses all these mathematical methods,
and in here we're using it.

65
00:03:55.870 --> 00:03:59.094
So the challenge is to split
this up into two modules.

66
00:03:59.094 --> 00:04:02.774
So we have the math.js module and
then the index.js module,

67
00:04:02.774 --> 00:04:06.830
which imports all these math methods
in order to log them like this.

