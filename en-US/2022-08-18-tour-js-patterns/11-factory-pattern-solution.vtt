WEBVTT

1
00:00:00.450 --> 00:00:03.337
All right, so
let's look at the solution for this one.

2
00:00:03.337 --> 00:00:05.734
I'm just gonna go to the books js one and

3
00:00:05.734 --> 00:00:09.158
in here I'm just going to
create the factory function.

4
00:00:09.158 --> 00:00:12.059
I can sign in, so export, well,
we can just keep it in here.

5
00:00:12.059 --> 00:00:16.394
So const createBook, I'm just gonna
say this is gonna take a title,

6
00:00:16.394 --> 00:00:18.508
an author, and the ISBN number.

7
00:00:18.508 --> 00:00:22.504
And this returns that title,
author and ISBN.

8
00:00:22.504 --> 00:00:25.758
I'm not going to add any other
properties although I could have,

9
00:00:25.758 --> 00:00:27.350
in this case I won't.

10
00:00:27.350 --> 00:00:29.006
So this is book one.

11
00:00:29.006 --> 00:00:34.191
We can actually just say createBook,

12
00:00:34.191 --> 00:00:40.192
Harry Potter, JK Rowling, and AB123.

13
00:00:40.192 --> 00:00:42.300
I'm not going to type this out for
all of them.

14
00:00:43.800 --> 00:00:47.498
Let's see we've got other
Harry Potter's here, book four,

15
00:00:50.650 --> 00:00:54.139
Just going to create that one.

16
00:00:54.139 --> 00:00:55.660
So this is the Great Gatsby.

17
00:00:56.790 --> 00:00:59.666
The Great Gatsby.

18
00:00:59.666 --> 00:01:02.206
Okay, I cannot say about that name.

19
00:01:02.206 --> 00:01:06.507
I'm lazy and then CD456.

20
00:01:06.507 --> 00:01:09.196
Okay, well,
this isn't enough books for me.

21
00:01:09.196 --> 00:01:12.528
I'm not going to change all of these,
it takes a bit too long.

22
00:01:12.528 --> 00:01:16.154
So right now we've just created those
books with a create book function, so

23
00:01:16.154 --> 00:01:18.647
instead of having to create
that object every time,

24
00:01:18.647 --> 00:01:21.765
we know that all these books that
always have the same structure,

25
00:01:21.765 --> 00:01:24.283
they always have the title,
the author, and ISBN.

26
00:01:24.283 --> 00:01:28.090
So when we go back into index now,
you can see that we, again, import books.

27
00:01:29.370 --> 00:01:31.370
And we have the exact same
objects as we had before.

28
00:01:31.370 --> 00:01:35.140
But this time, at least we know exactly
the object that will get returned.

29
00:01:35.140 --> 00:01:39.214
We don't risk accidentally creating typos,
if we had a book five,

30
00:01:39.214 --> 00:01:44.580
that's like Thai total or something
which totally could have happened.

31
00:01:44.580 --> 00:01:47.798
So yeah, that's all like type safety.

32
00:01:47.798 --> 00:01:51.396
And yeah, so if we wanted to add any other
properties based on the arguments that we

33
00:01:51.396 --> 00:01:54.740
pass, it's super easy to do
that with the factory function.

34
00:01:54.740 --> 00:01:57.950
But luckily, it's very easy in
JavaScript to to create that.

35
00:01:59.170 --> 00:02:00.530
Any questions?

36
00:02:00.530 --> 00:02:04.237
&gt;&gt; If you use the class to implement
this instead of a function,

37
00:02:04.237 --> 00:02:08.080
will this still be considered
the factory pattern?

38
00:02:08.080 --> 00:02:10.078
&gt;&gt; So
that would more be the prototype pattern,

39
00:02:10.078 --> 00:02:12.900
which is what I'll be covering after this.

40
00:02:12.900 --> 00:02:16.067
So using a class in this case and
then, well, so

41
00:02:16.067 --> 00:02:18.693
we could have used a constructor here.

42
00:02:18.693 --> 00:02:23.880
So we could have said like
class Book is constructor,

43
00:02:23.880 --> 00:02:30.233
title author, isbn and
this again creates the exact same thing.

44
00:02:30.233 --> 00:02:31.308
I won't type this out now.

45
00:02:31.308 --> 00:02:33.223
Cuz I know I will have typos again.

46
00:02:33.223 --> 00:02:36.269
Yeah, we can also of course
create new instances of a book.

47
00:02:36.269 --> 00:02:37.175
Well, actually I will just finish it.

48
00:02:37.175 --> 00:02:42.338
So this title is title and
this author is author.

49
00:02:42.338 --> 00:02:44.633
This isbn is isbn.

50
00:02:44.633 --> 00:02:49.255
And instead of saying the create
book here, because I'd like export

51
00:02:49.255 --> 00:02:54.193
const book five is new Book, so we get
a new instance of this book which is,

52
00:02:54.193 --> 00:02:57.473
I don't know,
I'm just gonna do Harry Potter.

53
00:02:57.473 --> 00:02:59.560
So you could have totally done this.

54
00:02:59.560 --> 00:03:04.700
Personally I prefer just having the more
concise syntax whenever possible.

55
00:03:04.700 --> 00:03:07.783
However, using classes
does have some benefits,

56
00:03:07.783 --> 00:03:11.086
which we'll talk about later
when it comes to memory.

57
00:03:11.086 --> 00:03:13.390
That's part of the prototype pattern, but

58
00:03:13.390 --> 00:03:17.516
if you prefer this syntax over the regular
object, that's completely fine.

59
00:03:17.516 --> 00:03:20.002
They both pretty much results in or yeah,

60
00:03:20.002 --> 00:03:22.710
they both pretty much
have the same results.

61
00:03:22.710 --> 00:03:25.350
It's just that this is not
actually an instance of book.

62
00:03:25.350 --> 00:03:28.505
So when we run this, let's see.

63
00:03:28.505 --> 00:03:32.050
You can see that this is actually like
book instead of just a random object.

64
00:03:32.050 --> 00:03:32.780
It's an instance.

65
00:03:33.960 --> 00:03:36.760
Yeah, whatever floats your boat.

66
00:03:36.760 --> 00:03:41.425
&gt;&gt; Would you consider the old
school way of creating

67
00:03:41.425 --> 00:03:44.738
a class in js as a factory pattern?

68
00:03:44.738 --> 00:03:49.026
&gt;&gt; Like we're doing here, I guess it
could be considered a factory pattern but

69
00:03:49.026 --> 00:03:51.371
a factory is more like we have a function,

70
00:03:51.371 --> 00:03:54.685
we have a factory function
that returns an object.

71
00:03:54.685 --> 00:03:58.985
And just returning a class here, it's not
a function, we're just creating instances.

72
00:03:58.985 --> 00:04:02.643
Now maybe if we had a function that says,
create book which returns a class,

73
00:04:02.643 --> 00:04:04.770
then I would consider
it a factory pattern.

74
00:04:05.780 --> 00:04:09.077
But with a normal class and
like creating instances,

75
00:04:09.077 --> 00:04:11.722
it's not necessarily a factory pattern.

76
00:04:11.722 --> 00:04:14.731
But again, these patterns come
from different languages,

77
00:04:14.731 --> 00:04:18.514
usually like languages that, where
it's not easy to create many objects.

78
00:04:18.514 --> 00:04:20.914
So yeah in JavaScript,
especially nowadays,

79
00:04:20.914 --> 00:04:24.158
the factory pattern is still usable,
it's obviously usable.

80
00:04:24.158 --> 00:04:27.471
It's something that you might just
implement not knowing that it's called

81
00:04:27.471 --> 00:04:28.461
the factory pattern.

82
00:04:28.461 --> 00:04:31.827
But yeah,
it's the official implementation.

83
00:04:31.827 --> 00:04:35.014
It's not,
the benefits are not the same as for

84
00:04:35.014 --> 00:04:39.290
other languages like Java or
C++, all that stuff.

85
00:04:39.290 --> 00:04:42.358
So-
&gt;&gt; I think they were talking about before

86
00:04:42.358 --> 00:04:47.819
we had the class keyword we used to do
new function function capital book.

87
00:04:47.819 --> 00:04:50.021
&gt;&gt; Yeah, like that.

88
00:04:50.021 --> 00:04:53.905
Yeah, that would definitely be considered
a factory function in that case,

89
00:04:53.905 --> 00:04:55.771
instead of creating new instances.

90
00:04:55.771 --> 00:04:58.520
At least if I'm thinking of the right
thing, cuz I think, I mean,

91
00:04:58.520 --> 00:04:59.661
I won't type that out now.

92
00:04:59.661 --> 00:05:03.368
Yeah, you could create a function
that then returned an object, either

93
00:05:03.368 --> 00:05:07.640
explicitly or implicitly, which would
be considered a factory function, yeah.

