WEBVTT

1
00:00:00.040 --> 00:00:04.720
If I refresh this page,
it will take a second, right?

2
00:00:04.720 --> 00:00:07.080
So we're gonna talk a little
bit about CloudFront functions,

3
00:00:07.080 --> 00:00:08.970
which is the last little piece here.

4
00:00:08.970 --> 00:00:12.160
And kind of like how
they're kind of different.

5
00:00:12.160 --> 00:00:19.010
The kinda core piece with CloudFront
functions is that, they are much simpler.

6
00:00:19.010 --> 00:00:20.670
They can't call out to external things.

7
00:00:20.670 --> 00:00:23.852
They have a much shorter
time they're allowed to run,

8
00:00:23.852 --> 00:00:25.581
they seem worse in every way,

9
00:00:25.581 --> 00:00:30.300
except like the number of concurrent ones
that you can run is way higher, right?

10
00:00:30.300 --> 00:00:33.171
And so if you're really super
worried about the throughput and

11
00:00:33.171 --> 00:00:35.567
you're hitting the limitations
of lambda at edge.

12
00:00:35.567 --> 00:00:39.626
Then Cloud run functions are highly
optimized versions of that,

13
00:00:39.626 --> 00:00:44.315
that can do less, but faster and
more and stuff along those lines.

14
00:00:44.315 --> 00:00:46.065
That actually lives in cloud front,
not in lambda.

15
00:00:46.065 --> 00:00:51.935
And you can go in here and
see that as well.

16
00:00:53.335 --> 00:00:55.209
And here we can go create a function,

17
00:00:55.209 --> 00:00:59.210
now the other caveat where I'm
probably gonna get burned in a second.

18
00:00:59.210 --> 00:01:01.310
Is where you can mix and match.

19
00:01:02.990 --> 00:01:07.132
Is problematic like, if you one of the
other reasons you might wanna stick with

20
00:01:07.132 --> 00:01:10.640
a Lambda edge function in your
cloud front distribution.

21
00:01:10.640 --> 00:01:15.953
Is because you can only have one for
every each viewer request

22
00:01:15.953 --> 00:01:20.655
viewer response,
origin request origin response.

23
00:01:20.655 --> 00:01:25.488
But sometimes you'd be like well
you can't have a viewer request for

24
00:01:25.488 --> 00:01:28.335
one and a viewer response for the other.

25
00:01:28.335 --> 00:01:32.090
All right, so l probably deploying
both will be slightly problematic, but

26
00:01:32.090 --> 00:01:34.700
we'll play with that in a second.

27
00:01:34.700 --> 00:01:36.425
So here, we'll say like.

28
00:01:39.510 --> 00:01:40.700
Smaller image.

29
00:01:40.700 --> 00:01:43.220
And we'll create the function
while at least have it, so

30
00:01:43.220 --> 00:01:44.540
we can swap it out in a second.

31
00:01:46.200 --> 00:01:48.890
This looks relatively the same.

32
00:01:50.070 --> 00:01:56.030
Now you might be like,
I'm not writing bar.

33
00:01:56.030 --> 00:01:57.630
Am not doing it.

34
00:01:57.630 --> 00:01:59.000
You can't make me.

35
00:01:59.000 --> 00:02:04.422
I won't do it, you will do it because
it won't work if you try to use cost or

36
00:02:04.422 --> 00:02:09.470
lat, so like that's the thing
that we need to keep in mind.

37
00:02:09.470 --> 00:02:14.332
It's got a bunch of limitations it can
only use certain limited subset of

38
00:02:14.332 --> 00:02:17.533
JavaScript which is you
kind of have to look at.

39
00:02:17.533 --> 00:02:22.612
It's got a few you can't pull in
any other libraries it's got a few

40
00:02:22.612 --> 00:02:27.978
things to hashing Stuff along those
lines for parsing query strings.

41
00:02:27.978 --> 00:02:32.483
It's got I think most of the Array
prototype methods that you might want in

42
00:02:32.483 --> 00:02:37.280
modern JavaScript not the hot ones but
like I think you've got like includes at

43
00:02:37.280 --> 00:02:42.030
least right so you have to do like
index up and stuff along those lines.

44
00:02:42.030 --> 00:02:44.366
You get no file it's not running Node
effectively is what you need to know.

45
00:02:44.366 --> 00:02:49.199
It is running a JavaScript like
environment where you have access to

46
00:02:49.199 --> 00:02:53.290
basically yeah,
these global functions, that's it.

47
00:02:56.080 --> 00:02:59.140
These global constants, that's it.

48
00:02:59.140 --> 00:03:03.769
And like I said, just a few of
the given the data-types a few of

49
00:03:03.769 --> 00:03:07.508
the array methods to me a six,
one for me a seven and

50
00:03:07.508 --> 00:03:12.423
then mostly you're stuck with is five for
the rest of it, right?

51
00:03:12.423 --> 00:03:17.833
So just keep that in mind and this is
one we definitely want to test early and

52
00:03:17.833 --> 00:03:22.549
often, but like we can theoretically
you can do stuff yeah it's

53
00:03:22.549 --> 00:03:27.554
like yeah like you have applied
you don't have anything that like.

54
00:03:27.554 --> 00:03:30.485
So don't try to use the spread operator,

55
00:03:30.485 --> 00:03:34.432
don't try to be fancy at all
you will break everything.

56
00:03:34.432 --> 00:03:38.344
But I said, yeah,
again what you lose in flexibility,

57
00:03:38.344 --> 00:03:41.020
you gain in performance in this case.

58
00:03:41.020 --> 00:03:44.970
Cool, so we have this one kind
of in place here as you can see.

59
00:03:46.970 --> 00:03:49.250
And do you have the code from before?

60
00:03:49.250 --> 00:03:53.694
No, let's do it, we'll do alive

61
00:03:57.775 --> 00:03:59.640
Live coding I think I told you it
could break should be fun, right?

62
00:04:02.660 --> 00:04:05.610
So here we've got your turn a request and
response.

63
00:04:05.610 --> 00:04:11.997
We're probably not gonna be
able to play this one just yet,

64
00:04:11.997 --> 00:04:16.213
but you could say something like nope,

65
00:04:16.213 --> 00:04:21.707
see I started typing comps,
you are laughing [LAUGH]

66
00:04:21.707 --> 00:04:28.135
Our request equals event.request and
then we'll say if.

67
00:04:31.935 --> 00:04:33.525
Request.uri.

68
00:04:49.243 --> 00:04:52.622
Rewrite that.

69
00:05:00.977 --> 00:05:01.477
And return the request.

70
00:05:02.920 --> 00:05:05.740
This is similar to what we were talking
about with the client side routes.

71
00:05:05.740 --> 00:05:11.810
Hey, if it is notes, or
whatever rewrite it index that HTML.

72
00:05:11.810 --> 00:05:14.433
We'll let the cashing happen,
we will tell everyone was successful and

73
00:05:14.433 --> 00:05:16.720
then we can have errors
from a real bad round.

74
00:05:16.720 --> 00:05:21.370
Now I'm pretty sure,
if I hit save, I can hit Test.

75
00:05:22.560 --> 00:05:26.300
And I can kind of like show you like
what would happen in that sense.

76
00:05:26.300 --> 00:05:28.910
So we will say viewer request, actually.

77
00:05:28.910 --> 00:05:32.010
So one fewer requests, which,
so let's try it out real quick.

78
00:05:32.010 --> 00:05:35.210
I'm pretty sure, yeah,
I already have a function there as well.

79
00:05:36.290 --> 00:05:37.639
So we can say here's the request.

80
00:05:38.930 --> 00:05:42.560
Cool, everything kind of goes through with
the output in this case, so that's good.

81
00:05:43.580 --> 00:05:47.831
I'm pretty sure I can't save it though
right now because it's gonna tell me you

82
00:05:47.831 --> 00:05:52.083
can't do it if you have the lambda at edge
of that one did successfully published

83
00:05:52.083 --> 00:05:52.920
that's cool.

84
00:05:52.920 --> 00:05:57.711
So it was not that conflict there's a
table you can look at which functions play

85
00:05:57.711 --> 00:06:00.977
with which lambda edge ones
during this from memory,

86
00:06:00.977 --> 00:06:03.170
I don't have the table memorized.

87
00:06:04.340 --> 00:06:07.080
I've read it 100 times read this morning.

88
00:06:07.080 --> 00:06:11.020
Still don't have it memorized, but
we have that kind of in place.

89
00:06:11.020 --> 00:06:14.760
Now we still have to check to see if it
works because that went more smoothly than

90
00:06:14.760 --> 00:06:15.740
I was hoping.

91
00:06:15.740 --> 00:06:17.220
But let's go back,

92
00:06:17.220 --> 00:06:22.630
see your behaviors inside of that area
right there where we wanna edit it.

93
00:06:24.450 --> 00:06:28.220
We published it, but
we didn't set it in this case, awesome.

94
00:06:28.220 --> 00:06:31.343
So I think I want this as
a viewer request actually.

95
00:06:35.857 --> 00:06:40.177
So we'll save the changes,
that might take a second to propagate, but

96
00:06:40.177 --> 00:06:42.629
you can see it's currently deploying.

97
00:06:42.629 --> 00:06:44.765
So our last kind of thing is let's
just check to see that should

98
00:06:44.765 --> 00:06:47.180
still be deploying, but
this is the ability we're talking about.

99
00:06:47.180 --> 00:06:48.980
This would work with a client side routes.

100
00:06:48.980 --> 00:06:53.209
We'll also work if we saw earlier that
we could see like CloudFront will tell

101
00:06:53.209 --> 00:06:57.440
if they are on a phone versus a smart TV
versus a desktop computer like maybe we

102
00:06:57.440 --> 00:06:59.530
don't need to send them.

103
00:06:59.530 --> 00:07:02.252
It's weird because phones are getting
big enough and the screens are so

104
00:07:02.252 --> 00:07:04.820
dense that like, this is probably
less true as time goes on.

105
00:07:04.820 --> 00:07:09.550
But maybe you don't need to send them a
like 8k resolution image for their phone.

106
00:07:09.550 --> 00:07:11.591
For the next year or two until Android and

107
00:07:11.591 --> 00:07:15.870
iOS phones have like 8k screens on them
somehow, because physics doesn't exist.

108
00:07:17.670 --> 00:07:19.720
So I think a viewer request was right.

109
00:07:19.720 --> 00:07:22.720
I was kinda live coding that while I
was talking, but let's go ahead and

110
00:07:22.720 --> 00:07:23.920
check it out.

111
00:07:23.920 --> 00:07:26.870
So if it's Beatles or JPEG,
we should swap it out.

112
00:07:29.300 --> 00:07:33.295
There we go, take a look at that one
to see if it's actually getting hit or

113
00:07:33.295 --> 00:07:35.926
it could also have not
have fully deployed yet.

114
00:07:35.926 --> 00:07:39.855
So that's also a fun idea as well but
the idea of like you can look at

115
00:07:39.855 --> 00:07:44.569
the URI rewrite it to another one as you
check the origin source and it will still

116
00:07:44.569 --> 00:07:49.524
work allows us to have that 200 for
known client side routes different images.

117
00:07:49.524 --> 00:07:52.875
The possibilities it's definitely one
of those things where it's like there's

118
00:07:52.875 --> 00:07:56.138
the initial set that are like common which
is rewriting those URI so on so forth.

119
00:07:56.138 --> 00:08:00.994
Then there's a part of kind of specific
your application which will hit you

120
00:08:00.994 --> 00:08:05.634
in a week and stuff along those as
long as we're possibly in six months.

121
00:08:05.634 --> 00:08:08.388
Now you're, we could just solve for
that doing this and

122
00:08:08.388 --> 00:08:11.358
that's kinda the major point that
I want to get is that like you can

123
00:08:11.358 --> 00:08:13.412
program the CDN to do
what it is that you want.

124
00:08:13.412 --> 00:08:17.022
So those are all the pieces
that we put in place.

125
00:08:17.022 --> 00:08:20.789
So when we're building the system that
like I kind of joked I think during

126
00:08:20.789 --> 00:08:23.897
a break has bumps in the road
when you're implementing it.

127
00:08:23.897 --> 00:08:27.463
But once you get all these pieces
in place, your headers are secure,

128
00:08:27.463 --> 00:08:32.150
your client side routes are in place
you're distributed along the world like.

129
00:08:32.150 --> 00:08:34.431
This even like we were
talking about it and

130
00:08:34.431 --> 00:08:37.764
kind of live doing it now when
once you get that process down.

131
00:08:37.764 --> 00:08:43.079
You can basically own this relatively
inexpensive infrastructure that is

132
00:08:43.079 --> 00:08:49.210
a highly perform application platform for
getting your code out to your customers.

133
00:08:49.210 --> 00:08:53.845
That solves a lot of the core problems and
again, I mentioned a second ago but

134
00:08:53.845 --> 00:08:58.626
we talked about before like It is a lot of
a set it and forget it kind of thing too,

135
00:08:58.626 --> 00:08:59.147
right?

136
00:08:59.147 --> 00:09:03.827
A lot of infrastructure I no longer
work at the company, right, and

137
00:09:03.827 --> 00:09:07.206
we iterated on a time we
didn't do is all at once.

138
00:09:07.206 --> 00:09:11.113
We started out with just our index.html
was still in the rails app at first,

139
00:09:11.113 --> 00:09:12.835
cuz it was being served by rails.

140
00:09:12.835 --> 00:09:16.475
And then the next version of the app, a
year later, when we could kind of move it

141
00:09:16.475 --> 00:09:19.940
out to a fully React app,
then we move the index html to CloudFront.

142
00:09:19.940 --> 00:09:22.240
That's only had to worry
about the invalidations.

143
00:09:22.240 --> 00:09:28.128
Then later we've split into multiple
teams, and we actually use the lambda

144
00:09:28.128 --> 00:09:33.648
edge to say, okay, in our we use
build code instead of GitHub actions.

145
00:09:33.648 --> 00:09:35.693
But like on every pull request,

146
00:09:35.693 --> 00:09:39.707
move version of that app into
a directory inside of a bucket, so

147
00:09:39.707 --> 00:09:44.057
we could have a staging environment for
every single pull request.

148
00:09:44.057 --> 00:09:48.196
So that different teams could test their
code independently would then have all

149
00:09:48.196 --> 00:09:51.370
the test run on emergent
domain before it got deployed.

150
00:09:51.370 --> 00:09:55.818
So a lot of the stuff we incremented
slowly over time, but as we tried out

151
00:09:55.818 --> 00:10:00.580
different things, kind of just set it,
put it in place and forgot about it.

152
00:10:02.310 --> 00:10:06.983
I'm gonna see if my thing deployed yet
And if I got it right.

153
00:10:10.011 --> 00:10:13.538
Definitely deployed.

154
00:10:16.339 --> 00:10:21.964
All right, let's see what we got I go into
Chrome I can debug it a little bit better.

155
00:10:29.965 --> 00:10:30.465
So it's a 200.

156
00:10:37.190 --> 00:10:40.062
There's no response, so
I definitely mess something up.

157
00:10:40.062 --> 00:10:44.092
Give me a second, I'll go take a look and
then we'll do some questions and

158
00:10:44.092 --> 00:10:48.830
then we'll hopefully, and on a high note
or you'll watch me look at it again.

159
00:10:48.830 --> 00:10:51.480
Stare at it, squint, find out.

160
00:10:51.480 --> 00:10:52.430
Did I use a concert?

161
00:10:52.430 --> 00:10:53.000
It didn't blow up.

162
00:10:53.000 --> 00:10:56.485
So I definitely didn't use a concert or
a lead or some kind of JavaScript in

163
00:10:56.485 --> 00:10:59.250
the last five years, but
we'll go take a look in a second.

164
00:10:59.250 --> 00:11:03.032
Let me just check the kind
of previous version as well,

165
00:11:03.032 --> 00:11:07.885
the other interesting thing that you
can do with these is let's say you

166
00:11:07.885 --> 00:11:10.530
don't wanna play an entire back end.

167
00:11:10.530 --> 00:11:15.190
But like, course, for
an API you want to hit.

168
00:11:15.190 --> 00:11:18.130
It's technically a server,
right, that no j is running.

169
00:11:18.130 --> 00:11:20.532
You could also rewrite the headers and

170
00:11:20.532 --> 00:11:24.519
do stuff along those lines if
you're just trying to hit an API.

171
00:11:24.519 --> 00:11:27.641
But like you have course blocking around
as well, there's like, again, these small

172
00:11:27.641 --> 00:11:31.200
little things that you can do that kind of
add up to solve problems is super useful.

173
00:11:31.200 --> 00:11:36.246
All right, so we go into my function,

174
00:11:36.246 --> 00:11:40.220
let's see what we got.

175
00:11:40.220 --> 00:11:44.230
All right, so everything worked,
just not the way that I wanted to.

176
00:11:44.230 --> 00:11:46.476
That's why I was getting a blank page,

177
00:11:46.476 --> 00:11:49.990
because it was sending
a blank 200 status code.

178
00:11:49.990 --> 00:11:53.950
Apparently, I just did not
save that previous version.

179
00:11:53.950 --> 00:11:55.800
And so, the code was working.

180
00:11:55.800 --> 00:11:58.629
It just wasn't the code that I wanted,
the other

181
00:11:58.629 --> 00:12:03.600
fun fact you can have multiple cloud fund
distributions pointing at the same bucket,

182
00:12:03.600 --> 00:12:06.240
maybe you call one staging hypothetically?

183
00:12:09.500 --> 00:12:13.580
So take that code from earlier,
that was the code we wrote together.

184
00:12:15.520 --> 00:12:17.816
Save the changes.

185
00:12:17.816 --> 00:12:20.005
You know what I did?
I probably went directly to test.

186
00:12:20.005 --> 00:12:21.470
And then I went to Publish.

187
00:12:21.470 --> 00:12:24.955
And I didn't hit that save button and at
no point did it go like you have something

188
00:12:24.955 --> 00:12:27.516
different in the editor than
what you plan on publishing.

189
00:12:31.792 --> 00:12:36.731
All right, so that should go out.

190
00:12:39.679 --> 00:12:40.930
Can I get like?
It's up there.

191
00:12:40.930 --> 00:12:41.710
There's a banner.

192
00:12:41.710 --> 00:12:44.646
I make sure my browser cache isn't part
of the problem to bring this into Chrome.

193
00:12:53.613 --> 00:12:54.400
There it is.

194
00:12:54.400 --> 00:12:56.620
There's my smaller picture of the Beatles,
right?

195
00:12:56.620 --> 00:13:00.932
So this one on the fly,
we rewrote the image to pick

196
00:13:00.932 --> 00:13:04.950
up a picture of Oasis instead,
don't ask me.

197
00:13:04.950 --> 00:13:07.420
So yeah, we can rewrite stuff,
render different resources.

198
00:13:07.420 --> 00:13:11.360
So not only is this a really
angry in that picture?

199
00:13:11.360 --> 00:13:14.706
Not only this is a different file,
we rewrote the request and

200
00:13:14.706 --> 00:13:19.101
got a different resource, a smaller
resource based on whatever you need to do,

201
00:13:19.101 --> 00:13:20.563
or whatever you wanna do.

202
00:13:20.563 --> 00:13:25.158
You can program all the things redirect
stuff be bet basically like redirect

203
00:13:25.158 --> 00:13:29.200
the flow of time and request and
change stuff on the fly.

204
00:13:29.200 --> 00:13:32.995
Have a lot of stuff you would normally
need to spin up a server for,

205
00:13:32.995 --> 00:13:35.870
accessible to you as a front end engineer.

206
00:13:35.870 --> 00:13:40.237
And not actually the nice part is,
again, once you get that stuff in place,

207
00:13:40.237 --> 00:13:43.857
the updating security patches,
all that stuff are handled for

208
00:13:43.857 --> 00:13:45.520
you by Amazon, right?

209
00:13:45.520 --> 00:13:47.700
So now you can have a whole bunch of
functionality that you might have.

210
00:13:47.700 --> 00:13:50.513
One of the places I've used
this in other projects is,

211
00:13:50.513 --> 00:13:52.909
sometimes I don't get
the API's that I want.

212
00:13:53.950 --> 00:13:57.841
And so you can kind of move some of
that logic to kind of normalize and

213
00:13:57.841 --> 00:13:59.370
flatten your API's, and

214
00:13:59.370 --> 00:14:03.560
doing a client side that can also kind
of live kind of on that or just one.

