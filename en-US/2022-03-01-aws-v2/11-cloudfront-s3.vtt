WEBVTT

1
00:00:00.050 --> 00:00:04.883
The S3 bucket that we created is either in
US East one or possibly somewhere else if

2
00:00:04.883 --> 00:00:08.608
you made it somewhere else, and
that doesn't really matter.

3
00:00:08.608 --> 00:00:12.821
But as we kind of refer to along the way,

4
00:00:12.821 --> 00:00:18.470
some places are further
from Virginia than others.

5
00:00:18.470 --> 00:00:21.000
There's a free geography lesson for you.

6
00:00:21.000 --> 00:00:23.292
Not only are we fun in Masters, but

7
00:00:23.292 --> 00:00:28.130
also geography masters is our next
product that will be launching soon.

8
00:00:28.130 --> 00:00:31.840
It takes people longer to get
those applications cuz of physics.

9
00:00:31.840 --> 00:00:33.920
Yes, computers can get faster, but

10
00:00:33.920 --> 00:00:37.220
electrons are only gonna move
at max at the speed of light.

11
00:00:38.370 --> 00:00:43.460
So turns out probably not getting around
that one until quantum computing really,

12
00:00:43.460 --> 00:00:47.660
and all sorts of other physics has
to happen to make that happen.

13
00:00:47.660 --> 00:00:52.949
Also even then, they don't just go
through the air as a series of tubes or

14
00:00:52.949 --> 00:00:56.490
really cables but let's go with tubes.

15
00:00:56.490 --> 00:00:59.220
They get all of our bits and
bytes everywhere.

16
00:00:59.220 --> 00:01:03.690
So you have a few options is you could
make a whole bunch of S3 buckets, right?

17
00:01:03.690 --> 00:01:06.705
Put it in like S3 buckets
around the world or

18
00:01:06.705 --> 00:01:11.516
if you think about where your API is
gonna go, you could theoretically

19
00:01:11.516 --> 00:01:16.200
pick where you feel like your
customer base is going to be.

20
00:01:16.200 --> 00:01:18.010
And that that's an option, right?

21
00:01:18.010 --> 00:01:22.022
And for some of your server side stuff
if you're not using some of the globally

22
00:01:22.022 --> 00:01:26.050
distributed databases, I think dynamo
has a globally distributed option.

23
00:01:26.050 --> 00:01:29.590
I think Aurora there SQL database,
you can also have a global option but

24
00:01:29.590 --> 00:01:31.480
they have limitations.

25
00:01:31.480 --> 00:01:33.569
For some levels, you have to do that, for

26
00:01:33.569 --> 00:01:36.160
us disaster recovery
stuff along those lines.

27
00:01:36.160 --> 00:01:38.570
But as front end engineers,
we're not gonna worry about that.

28
00:01:38.570 --> 00:01:42.642
We're putting text files on the internet
like the 1990s, right [LAUGH].

29
00:01:42.642 --> 00:01:45.450
We could just put those
text files everywhere.

30
00:01:45.450 --> 00:01:48.020
That's gonna be what we do.

31
00:01:48.020 --> 00:01:52.990
So CloudFront has a ever out of date map.

32
00:01:54.120 --> 00:01:57.552
This is not the out of date version
of it but at any given point,

33
00:01:57.552 --> 00:01:59.330
it could be out of date.

34
00:01:59.330 --> 00:02:03.190
I think last time we did
this course three years ago,

35
00:02:03.190 --> 00:02:08.480
there was 144 edge locations,
now there's over 300, right?

36
00:02:08.480 --> 00:02:14.237
So there's just basically little kinda
data centers spread throughout the world,

37
00:02:14.237 --> 00:02:19.050
and we're gonna put our app
on all of them easily, right?

38
00:02:19.050 --> 00:02:23.497
We're technically not, but it's really
not important [LAUGH] that's the detail.

39
00:02:23.497 --> 00:02:28.293
So let's kind of look at the before and
after of the real world

40
00:02:28.293 --> 00:02:33.320
application that we had that
I took some measurements for.

41
00:02:33.320 --> 00:02:37.800
Which is, you can guess that is
probably in around US East one.

42
00:02:37.800 --> 00:02:41.430
See the green is all close to like
the East Coast of the United States.

43
00:02:41.430 --> 00:02:47.700
And the further that you get, the longer
even takes, this is time to first byte.

44
00:02:47.700 --> 00:02:50.417
This isn't even the entire
time to get the application,

45
00:02:50.417 --> 00:02:54.590
this is time before the very first
byte hits their browsers, right?

46
00:02:54.590 --> 00:02:59.678
So it's like,
it's over 10 times almost just shy

47
00:02:59.678 --> 00:03:06.810
of 20 times worse in kind of Australia and
some parts of South Asia.

48
00:03:06.810 --> 00:03:11.480
That is before CloudFront,
this is after, right?

49
00:03:11.480 --> 00:03:14.780
So you see a lot more green
in this case as well.

50
00:03:16.030 --> 00:03:19.820
CloudFront also supports
HTTP/2 out of the box.

51
00:03:19.820 --> 00:03:22.430
What is that and why is it great?

52
00:03:22.430 --> 00:03:28.054
So the way that it worked before
HTTP/2 is you send a request for

53
00:03:28.054 --> 00:03:31.505
a thing, it sends you some bytes back.

54
00:03:31.505 --> 00:03:36.127
If you send more bytes that's under
the request, it sends more bytes back,

55
00:03:36.127 --> 00:03:37.876
it can do one thing at a time.

56
00:03:37.876 --> 00:03:41.359
Browsers cheated for
a while and they still cheat,

57
00:03:41.359 --> 00:03:45.086
and they'll open up 6 of
those connections, right,

58
00:03:45.086 --> 00:03:50.450
to try to get you 6 times as much stuff
in parallel, but even then they give up.

59
00:03:50.450 --> 00:03:52.220
And so
there used to be a whole bunch of tricks.

60
00:03:52.220 --> 00:03:56.034
If you really wanna optimize your
performance as you put your images on one

61
00:03:56.034 --> 00:03:58.324
subdomain, cuz it was 6 to a given domain.

62
00:03:58.324 --> 00:04:01.286
You put some images there, and
you put your CSS there, and

63
00:04:01.286 --> 00:04:02.750
you start to break stuff up.

64
00:04:02.750 --> 00:04:03.920
So you have more than 6.

65
00:04:04.990 --> 00:04:10.754
Well, so this HTTP/2 which is just like
what if we just like multiplex all

66
00:04:10.754 --> 00:04:16.242
this and we'll just send you everything
kind of as a constant Stream and

67
00:04:16.242 --> 00:04:20.376
an open connection,
that is how she HTTP/2 works.

68
00:04:20.376 --> 00:04:27.890
There's some other bonuses, so we talked
about you pay for requests from S3.

69
00:04:27.890 --> 00:04:31.870
You pay to get data out of S3.

70
00:04:31.870 --> 00:04:35.056
If CloudFront serves that request,
you're not hitting S3 and

71
00:04:35.056 --> 00:04:37.418
it's way cheaper to serve
it from CloudFront.

72
00:04:37.418 --> 00:04:42.799
I think there was, is it five?

73
00:04:42.799 --> 00:04:45.711
It's 5 gigabytes of free transfer,
I don't remember the top of my head,

74
00:04:45.711 --> 00:04:46.928
I had this slide earlier.

75
00:04:46.928 --> 00:04:51.181
Terabytes, terabytes, yeah, of transfer.

76
00:04:51.181 --> 00:04:54.670
I thought it was big as far as transfers,
whatever, we can figure it out.

77
00:04:54.670 --> 00:05:00.560
But it's a lot cheaper and yeah,
it won't hit your S3 bucket at all, right?

78
00:05:00.560 --> 00:05:05.528
The other part that's nice is
it's not just about the distance.

79
00:05:05.528 --> 00:05:10.352
When you normally would go hit
your server in US East one or

80
00:05:10.352 --> 00:05:13.770
wherever you were hosting your assets,

81
00:05:13.770 --> 00:05:18.695
your request has to go through
the public internet with all

82
00:05:18.695 --> 00:05:23.239
the other public internet traffic,
gross, right?

83
00:05:23.239 --> 00:05:27.529
We're using CloudFront,
it hits the CloudFront edge node, and

84
00:05:27.529 --> 00:05:31.990
then Amazon has their own private
cables that it goes through.

85
00:05:31.990 --> 00:05:35.806
Yeah, right, fits with your
mental model and goes through and

86
00:05:35.806 --> 00:05:37.470
kind of gets all the bytes.

87
00:05:37.470 --> 00:05:41.289
So it's usually faster even to get
to wherever the S3 bucket is over

88
00:05:41.289 --> 00:05:46.370
Amazon's private networks, than it is
going over the public internet as well.

89
00:05:46.370 --> 00:05:51.426
So keeping requests from going to S3
in the beginning is obviously cheaper,

90
00:05:51.426 --> 00:05:56.430
because it reduce our cost because
we're paying for requests out of there.

91
00:05:56.430 --> 00:06:00.631
At the same time, it's also faster
when it does have to go there and

92
00:06:00.631 --> 00:06:03.724
we'll kind of look at
another chart real quick.

93
00:06:03.724 --> 00:06:08.032
So the other kinda cool part
about how it works is there's

94
00:06:08.032 --> 00:06:12.788
like multiple stops along the way,
which is you had all of those

95
00:06:12.788 --> 00:06:17.583
little intermediate nodes which
are kind of shown right here.

96
00:06:17.583 --> 00:06:19.924
Then you have see these
bigger yellow ones,

97
00:06:19.924 --> 00:06:22.333
these are the regional edge caches, right?

98
00:06:22.333 --> 00:06:25.416
Which is so let's say they go
to hit this one right here and

99
00:06:25.416 --> 00:06:28.949
it's not there, it's not gonna
go all the way back to Virginia,

100
00:06:28.949 --> 00:06:32.057
it's gonna go to the closest
regional edge cache first.

101
00:06:32.057 --> 00:06:34.272
So somebody request file.

102
00:06:35.902 --> 00:06:39.322
If we have it right near them,
give it to them immediately.

103
00:06:39.322 --> 00:06:44.832
If we don't have it right near them,
okay, go to the regional edge caches.

104
00:06:44.832 --> 00:06:46.862
Do we have it somewhere close to them?

105
00:06:46.862 --> 00:06:50.582
No, at which point go all
the way back to Virginia.

106
00:06:50.582 --> 00:06:55.072
And then on the way back the other way,
we'll put it in all of those places.

107
00:06:55.072 --> 00:06:58.717
So when I said that little thing before
about how we're gonna put our application

108
00:06:58.717 --> 00:07:02.980
all over the world with tactically,
now we're gonna put it in our bucket.

109
00:07:02.980 --> 00:07:07.876
But as it goes through all the different
edge nodes to get to our customers,

110
00:07:07.876 --> 00:07:10.908
Amazon's gonna leave it
in all those places so

111
00:07:10.908 --> 00:07:16.530
that when future requests come in, then we
don't necessarily have to pay that cost.

112
00:07:17.830 --> 00:07:23.100
Cool, one other quick note is just
to talk about headers a little bit.

113
00:07:24.750 --> 00:07:29.640
Generally speaking, CloudFront is gonna
ignore most of the request headers, right?

114
00:07:29.640 --> 00:07:33.820
So anything in there around any
special header you might rely on.

115
00:07:33.820 --> 00:07:36.570
We don't rely on any for
the purposes of we're building today for

116
00:07:36.570 --> 00:07:37.790
our static assets.

117
00:07:37.790 --> 00:07:40.932
I mentioned it because it
will just drop them, why?

118
00:07:40.932 --> 00:07:45.915
It will drop them because it's trying to
figure out, do I already have something in

119
00:07:45.915 --> 00:07:50.827
either the regional edge cache or the edge
node that I can just give them by carrying

120
00:07:50.827 --> 00:07:56.048
about necessarily maybe the cookie or what
user agent or something along those lines.

121
00:07:56.048 --> 00:08:00.612
If it's the same JavaScript file, I don't
care that they're using Safari versus

122
00:08:00.612 --> 00:08:04.290
Chrome, just gives them
the JavaScript file, right?

123
00:08:04.290 --> 00:08:08.538
So it tries to ignore as much about
the requests as they can possibly get

124
00:08:08.538 --> 00:08:09.750
away with.

125
00:08:09.750 --> 00:08:12.390
And that is almost always the right case.

126
00:08:12.390 --> 00:08:16.377
I only mentioned this because if there's
in our app we need to a special header to

127
00:08:16.377 --> 00:08:20.870
get set for authentication, you do need to
allow that through and so on and so forth.

128
00:08:20.870 --> 00:08:26.320
It will also add in some of its own
headers after it hits the edge node.

129
00:08:27.610 --> 00:08:30.720
And you can take a lucky guess
what sets these to true.

130
00:08:32.150 --> 00:08:34.839
I'll leave that as like an exercise.

131
00:08:34.839 --> 00:08:37.384
In this case which is if it's
a desktop viewer, and so

132
00:08:37.384 --> 00:08:40.326
you can do stuff when we get to
the lambda that just kind of stuff

133
00:08:40.326 --> 00:08:43.344
a little bit later where you can
maybe shrink an image, right?

134
00:08:43.344 --> 00:08:45.581
We'll kind of mostly talk
about some of those things.

135
00:08:45.581 --> 00:08:49.765
The actual writing image resizing
code is its own thing, but

136
00:08:49.765 --> 00:08:54.932
you can kind of get a little bit of
knowledge about where it's coming from,

137
00:08:54.932 --> 00:09:00.367
and do some really interesting stuff with
the request itself as we go through.

138
00:09:00.367 --> 00:09:01.511
All right, cool.

139
00:09:05.721 --> 00:09:11.638
Let's go check on our CloudFront
distribution, shall we?

140
00:09:11.638 --> 00:09:13.425
Say go back to cloud farm.

141
00:09:20.012 --> 00:09:23.276
We'll go ahead and
we'll check out our distribution, and so

142
00:09:23.276 --> 00:09:25.235
I should be able to grab this domain.

143
00:09:27.821 --> 00:09:33.095
And we can see that it
works in this case and

144
00:09:33.095 --> 00:09:38.839
super awesome.clicks should work as well.

145
00:09:38.839 --> 00:09:44.715
What happens I do GTPS HTTPS now works.

146
00:09:44.715 --> 00:09:47.791
We have that little lock up there as well.

147
00:09:47.791 --> 00:09:50.803
Pretty sure we set it to redirect, but

148
00:09:50.803 --> 00:09:54.673
I also might have old DNS
records in here as well.

149
00:09:54.673 --> 00:09:57.959
So we can figure that in a second.

150
00:09:57.959 --> 00:10:00.644
But yeah, so
now our app works super awesome.

151
00:10:00.644 --> 00:10:04.965
A click is secure HTTPS,
we can go refresh one of these pages.

152
00:10:04.965 --> 00:10:11.059
In this case, it still works and
everything is pretty good.

153
00:10:11.059 --> 00:10:11.979
That's good to know.

154
00:10:11.979 --> 00:10:14.322
So now, this is all kind of in place.

155
00:10:19.188 --> 00:10:23.586
Does that one now is everyone
else's distribution?

156
00:10:23.586 --> 00:10:24.994
You need a second, all right?

157
00:10:24.994 --> 00:10:29.295
&gt;&gt; Can you show where you associate
CloudFront in route 53, I guess,

158
00:10:29.295 --> 00:10:31.012
I had to regenerate my SSL?

159
00:10:31.012 --> 00:10:31.780
&gt;&gt; [LAUGH] All right, yeah,

160
00:10:31.780 --> 00:10:35.146
I'll show that one more time in case
you had to To regenerate your cert, so

161
00:10:35.146 --> 00:10:36.545
go into route 53.

162
00:10:40.997 --> 00:10:42.615
Go to registered domains.

163
00:10:42.615 --> 00:10:46.366
Now mine will be set up in this case, but

164
00:10:46.366 --> 00:10:51.154
we can still kind of show
where we go to manage DNS.

165
00:10:51.154 --> 00:10:54.960
Click that little button because
just yeah, you hit View Details.

166
00:10:56.560 --> 00:10:58.301
Then you find a record,
so we got two of them.

167
00:10:58.301 --> 00:11:01.113
We got the regular bear domain, and

168
00:11:01.113 --> 00:11:05.612
then we've got the www bro
that will edit the record, and

169
00:11:05.612 --> 00:11:10.957
the alias instead of to an S3 should
be CloudFront distribution and

170
00:11:10.957 --> 00:11:14.830
that should then be
the autocomplete in that case

