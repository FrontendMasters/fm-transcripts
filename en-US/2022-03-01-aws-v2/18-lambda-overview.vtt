WEBVTT

1
00:00:00.210 --> 00:00:06.060
There is one kind of additional extra
mile that we can choose to go here.

2
00:00:06.060 --> 00:00:08.714
And we talk about like what it is and
basically how or

3
00:00:08.714 --> 00:00:10.800
why you might consider doing it.

4
00:00:10.800 --> 00:00:15.832
But it is definitely at the point of
being a little bit of a victory lap at

5
00:00:15.832 --> 00:00:21.370
this point, which is, let's kinda
look at what we have right now.

6
00:00:21.370 --> 00:00:23.220
And then we'll see.

7
00:00:23.220 --> 00:00:27.130
So right now we have a routes,
they call everything at 200.

8
00:00:27.130 --> 00:00:30.951
But our user experience, if we set it up
and react router to have not found and

9
00:00:30.951 --> 00:00:33.030
all that kinda stuff, will work.

10
00:00:33.030 --> 00:00:35.220
We have it distributed around the world.

11
00:00:35.220 --> 00:00:37.327
We have it automated CICD process.

12
00:00:37.327 --> 00:00:38.848
We've got HTTPS.

13
00:00:38.848 --> 00:00:42.260
We've got most of the things, except for
that client side routing piece.

14
00:00:42.260 --> 00:00:47.168
And there's a little bit of improvement
with our security headers that we could

15
00:00:47.168 --> 00:00:48.330
do, right?

16
00:00:48.330 --> 00:00:54.011
And these are mostly just limitations
of CloudFront that we can't get around,

17
00:00:54.011 --> 00:00:55.890
right, kind of, right?

18
00:00:55.890 --> 00:00:59.092
I kinda mentioned in the very
beginning that we can program our CDNs

19
00:00:59.092 --> 00:01:00.540
to a certain extent.

20
00:01:00.540 --> 00:01:03.569
And there are two ways to do that,
Lambda@Edge and

21
00:01:03.569 --> 00:01:06.930
these other things called
CloudFront functions.

22
00:01:06.930 --> 00:01:09.040
Let's talk a little bit about Lambda@Edge.

23
00:01:09.040 --> 00:01:12.140
Like I said, it is definitely
the victory lap portion of this.

24
00:01:12.140 --> 00:01:16.720
We have a mostly working infrastructure
for most all of the major reasons.

25
00:01:16.720 --> 00:01:19.060
We could make some slightly
better CSP headers.

26
00:01:19.060 --> 00:01:21.770
We could handle this client side
routes a little bit better.

27
00:01:21.770 --> 00:01:25.700
But beyond that, we've got it in place.

28
00:01:25.700 --> 00:01:28.580
So we'll talk about the two
ways you can program a CDN.

29
00:01:28.580 --> 00:01:31.460
We'll talk about the two
differences between them.

30
00:01:31.460 --> 00:01:34.330
And then we've got it, right?

31
00:01:34.330 --> 00:01:40.554
So, Lambda is a feature from AWS that
came out a while back at this point.

32
00:01:40.554 --> 00:01:46.216
And basically, instead of managing servers
and deploying a whole bunch of stuff and

33
00:01:46.216 --> 00:01:49.327
updating CentOS and
stuff along those lines,

34
00:01:49.327 --> 00:01:53.892
you simply write some code in your
favorite programming language.

35
00:01:53.892 --> 00:02:01.163
And you say to AWS, take my code,
run my code, update Linux.

36
00:02:01.163 --> 00:02:02.728
I don't want to.

37
00:02:02.728 --> 00:02:05.919
When I was a kid, I had a step of VPS.

38
00:02:05.919 --> 00:02:09.036
That was worse than this, [LAUGH] right?

39
00:02:09.036 --> 00:02:12.155
That was not fun.

40
00:02:12.155 --> 00:02:14.787
So Lambdas allow you just
put code on the Internet.

41
00:02:14.787 --> 00:02:18.753
Predominantly JavaScript Python,
in our case, for Lambda@Edge is,

42
00:02:18.753 --> 00:02:21.555
I think you're limited to JavaScript and
Python.

43
00:02:21.555 --> 00:02:27.720
For CloudFront functions,
I use the term JavaScript loosely, right?

44
00:02:27.720 --> 00:02:30.250
A JavaScript like programming language.

45
00:02:30.250 --> 00:02:32.701
But you can use JavaScript or Python.

46
00:02:32.701 --> 00:02:33.981
You could just write some code.

47
00:02:33.981 --> 00:02:34.837
You're like, you host it.

48
00:02:34.837 --> 00:02:39.736
And if anyone needs you call it,
I'll pay for the compute later and

49
00:02:39.736 --> 00:02:42.560
pennies on the execution.

50
00:02:42.560 --> 00:02:46.390
Lambda@Edge allows you to do it in all
of those CloudFront edge nodes that

51
00:02:46.390 --> 00:02:47.270
we saw earlier.

52
00:02:47.270 --> 00:02:50.285
So, on every request and every response,

53
00:02:50.285 --> 00:02:54.474
if you need to change anything
about those HTTP requests and

54
00:02:54.474 --> 00:02:59.101
responses, you can, on the fly,
intercept them and do things.

55
00:02:59.101 --> 00:03:03.973
That could be, hey,
I want to modify the headers to include

56
00:03:03.973 --> 00:03:07.293
some kind of cookie that I need, right?

57
00:03:07.293 --> 00:03:11.310
Like one of the examples that I see
it used a lot is like AB testing.

58
00:03:11.310 --> 00:03:14.743
They have no cookies set for where they
should get version a of the website,

59
00:03:14.743 --> 00:03:17.960
version b, give them one randomly,
install that cookie.

60
00:03:17.960 --> 00:03:22.460
So now on the request in and out, they'll
either get the new hotness or not, right?

61
00:03:22.460 --> 00:03:24.650
Like we can call it AB testing.

62
00:03:24.650 --> 00:03:26.070
You're like, I don't care.

63
00:03:26.070 --> 00:03:29.300
You can also call that bluegreen deploys,
right?

64
00:03:29.300 --> 00:03:30.834
So we just deployed a new version.

65
00:03:30.834 --> 00:03:34.470
Start out with 10%, then 20%.

66
00:03:34.470 --> 00:03:37.600
If we don't have enough,
if my pager isn't going off,

67
00:03:37.600 --> 00:03:40.440
then start moving everyone
to the new deploy.

68
00:03:40.440 --> 00:03:43.249
You do a whole bunch of stuff
along the way in and out.

69
00:03:43.249 --> 00:03:46.375
You could also hypothetically
add those security headers for

70
00:03:46.375 --> 00:03:50.403
CSP that'll get you a higher score on
like Mozilla observatory that CloudFront

71
00:03:50.403 --> 00:03:52.420
doesn't give you by default.

72
00:03:52.420 --> 00:03:59.581
You could also hypothetically say, here
are the known good client side routes,

73
00:03:59.581 --> 00:04:05.910
call those 200,
call any other garbage a 400, right?

74
00:04:05.910 --> 00:04:10.352
So you can do all the kind of missing
features that we had along the way,

75
00:04:10.352 --> 00:04:11.930
as well as other stuff.

76
00:04:11.930 --> 00:04:14.330
Lambda@Edge functions can
even call out to a database.

77
00:04:14.330 --> 00:04:18.898
They can do all sorts of other stuff
as well that you might need to do,

78
00:04:18.898 --> 00:04:22.520
analytics for segment,
what have you along the way.

79
00:04:23.590 --> 00:04:29.030
And there are effectively four places that
you can put Lambda@Edge functions, right?

80
00:04:30.450 --> 00:04:34.260
It is the viewer request,
which is your end user,

81
00:04:34.260 --> 00:04:38.180
their browser on its way into CloudFront,
right?

82
00:04:40.480 --> 00:04:44.470
The origin requests, which is
CloudFront called it the cache miss.

83
00:04:44.470 --> 00:04:46.550
Let's send it to, in our case, S3.

84
00:04:46.550 --> 00:04:49.610
In any other case, maybe the API,
so on and so forth.

85
00:04:50.820 --> 00:04:53.494
The origin response, so our case S3,

86
00:04:53.494 --> 00:04:59.340
possibly your server as it hits CloudFront
and then back again on the way out, right?

87
00:04:59.340 --> 00:05:01.460
And it all depends on what you wanna do.

88
00:05:01.460 --> 00:05:05.132
The thing to note is that if
you wanna stored in the cache,

89
00:05:05.132 --> 00:05:09.420
it kinda has to be a viewer request or
viewer response, right?

90
00:05:09.420 --> 00:05:13.881
And if it's not a cache miss,
it's never gonna hit origin request and

91
00:05:13.881 --> 00:05:15.630
origin response, right?

92
00:05:15.630 --> 00:05:19.238
So it's like, hey,
if you did need to talk to a database or

93
00:05:19.238 --> 00:05:23.100
something, that's probably
on the origin request.

94
00:05:23.100 --> 00:05:27.533
They're asking for something with
a set of query programs or headers, or

95
00:05:27.533 --> 00:05:30.930
a URL that I've never seen before,
do some stuff.

96
00:05:30.930 --> 00:05:34.461
But as soon as we do the stuff,
don't talk to me ever again, right?

97
00:05:34.461 --> 00:05:36.062
Or for 24 hours, right?

98
00:05:36.062 --> 00:05:38.453
[LAUGH] All in those ways.

99
00:05:38.453 --> 00:05:41.703
So what you might wanna do really
depends on what you need to do.

100
00:05:41.703 --> 00:05:44.854
If you want it on every request,
it needs to be viewer request.

101
00:05:44.854 --> 00:05:48.733
Every response, viewer response,
if it misses CloudFront is

102
00:05:48.733 --> 00:05:52.991
going back to the origin,
this origin request and origin response.

103
00:05:52.991 --> 00:05:56.096
So things you might do
on a Viewer Request.

104
00:05:56.096 --> 00:05:56.701
Like I said,

105
00:05:56.701 --> 00:06:00.680
this is executed every request before
CloudFront's cache is even checked, right?

106
00:06:00.680 --> 00:06:05.600
So it's like, hey, I wanna lowercase all
the headers or normalize the query params

107
00:06:05.600 --> 00:06:09.065
to all be in the right order or
something along those lines,

108
00:06:09.065 --> 00:06:13.383
you would do that before we check to see
if it was a cache miss or a cache hit.

109
00:06:13.383 --> 00:06:15.502
You might wanna see like,
do they have an authorization token?

110
00:06:15.502 --> 00:06:20.915
Whatever you need to care about,
you can do that.

111
00:06:20.915 --> 00:06:24.758
If you need to generate a response like,
hey, listen, I know that like that route

112
00:06:24.758 --> 00:06:27.843
is not even gonna be found,
don't waste the check on the origin.

113
00:06:27.843 --> 00:06:29.556
Just tell them you can do that.

114
00:06:29.556 --> 00:06:32.406
But just notice that anything won't
be cached cuz we never even talked

115
00:06:32.406 --> 00:06:33.350
to CloudFront yet.

116
00:06:33.350 --> 00:06:37.223
This is like, on the way in,
check this thing, modify it, normalize it,

117
00:06:37.223 --> 00:06:38.399
all that kinda stuff.

118
00:06:39.850 --> 00:06:41.240
And do whatever you need to do.

119
00:06:41.240 --> 00:06:44.961
But since if you respond to it right then
and there, CloudFront will never know,

120
00:06:44.961 --> 00:06:46.503
CloudFront will never cache it.

121
00:06:46.503 --> 00:06:50.252
That would be by design,
not a drawback, per se.

122
00:06:50.252 --> 00:06:52.431
So it goes into the origin requests.

123
00:06:52.431 --> 00:06:56.300
So, like, hey, CloudFront's like,
I have never seen this before.

124
00:06:56.300 --> 00:06:59.590
This is another opportunity
to inject some logic.

125
00:06:59.590 --> 00:07:00.970
Again, you can talk to databases.

126
00:07:00.970 --> 00:07:02.750
You can make external networks calls.

127
00:07:02.750 --> 00:07:04.760
You can rewrite the URLs.

128
00:07:04.760 --> 00:07:10.036
You can, I dont know, based on the origin,
if they don't have a langauge preference

129
00:07:10.036 --> 00:07:14.680
set, try to make some guesses on how
you should format the dates for an API.

130
00:07:14.680 --> 00:07:16.959
All sorts of stuff that
you might want to do.

131
00:07:18.340 --> 00:07:19.490
It hits either your server S3.

132
00:07:20.900 --> 00:07:25.427
Again, you can modify the, at this point,
we have checked the server or S3,

133
00:07:25.427 --> 00:07:30.150
we might wanna modify any of the headers
on the response before we cache it.

134
00:07:30.150 --> 00:07:31.809
This is a place to do it.

135
00:07:31.809 --> 00:07:35.781
And then, finally, on the way out,
right before we talk to the user again,

136
00:07:35.781 --> 00:07:37.659
any last things that you need to do.

137
00:07:37.659 --> 00:07:45.086
These will not be cached because we've
already left CloudFront at this point.

138
00:07:45.086 --> 00:07:48.845
So we don't have all that
necessarily in place.

