WEBVTT

1
00:00:00.310 --> 00:00:01.619
So if we look at the notes,

2
00:00:01.619 --> 00:00:04.780
because this is again more code
than you probably want to type.

3
00:00:07.390 --> 00:00:09.770
This is the code that we're
going to kind of drop in.

4
00:00:09.770 --> 00:00:12.520
And if we see an error, we can kind
of go deal with it in a second.

5
00:00:12.520 --> 00:00:15.265
But it's basically going to
add a bunch of CSP headers,

6
00:00:15.265 --> 00:00:17.680
because we take our current site.

7
00:00:17.680 --> 00:00:21.221
Let's actually fix it first for a second.

8
00:00:27.139 --> 00:00:30.325
I will tell you right now,
I think it gets a B+, no,

9
00:00:30.325 --> 00:00:34.091
maybe less than a might get an F
from the Mozilla observatory,

10
00:00:34.091 --> 00:00:39.360
just because it doesn't have all
the right headers that have been set.

11
00:00:39.360 --> 00:00:42.195
It's like, hey, you should do this and
you should do these other things so

12
00:00:42.195 --> 00:00:43.900
you don't get hacked.

13
00:00:43.900 --> 00:00:48.380
Because one just doesn't do them for us.

14
00:00:48.380 --> 00:00:51.260
So we don't have that kinda in place.

15
00:00:51.260 --> 00:00:57.336
So what we want to do is,
we can go to observatory,

16
00:00:57.336 --> 00:01:01.830
Mozilla, and you put in any site.

17
00:01:01.830 --> 00:01:05.064
I'll show you the one that
I made kind of earlier,

18
00:01:05.064 --> 00:01:10.610
which is superawesome.XYZ instead, I'm
clearly not good at coming up with names.

19
00:01:10.610 --> 00:01:12.920
It will scan the site.

20
00:01:12.920 --> 00:01:17.990
This is a version as the other one kind of
deploys to the previous yellow version.

21
00:01:17.990 --> 00:01:20.883
This is a version that has
all the checks passing but

22
00:01:20.883 --> 00:01:23.730
out of the box that is not how it works.

23
00:01:23.730 --> 00:01:28.170
So we can go ahead let's say
that this redeploy, yes.

24
00:01:28.170 --> 00:01:35.442
So now let's put in superawesome.click And
we'll go do another scan.

25
00:01:44.166 --> 00:01:49.010
Got an F, that's not good,
we didn't do better than that we would

26
00:01:49.010 --> 00:01:53.074
like to go from an F to an A+,
and again like I said like,

27
00:01:53.074 --> 00:01:58.350
we've just got all we have to do is fix
some of the headers effectively all

28
00:01:58.350 --> 00:02:04.096
I did was go through all the things that
it was yelling at me for and adjust them.

29
00:02:04.096 --> 00:02:07.410
That's a little bit outside the scope of
this we kind of just look at it together.

30
00:02:07.410 --> 00:02:11.555
But basically,
we wanna do is go through and

31
00:02:11.555 --> 00:02:16.707
then as the request comes in
we modify all the headers,

32
00:02:16.707 --> 00:02:21.411
setting them to just
the headers that should be set

33
00:02:21.411 --> 00:02:26.451
right because this is the way
the ability to program or

34
00:02:26.451 --> 00:02:31.043
CDN becomes fairly helpful so
let's go ahead and

35
00:02:31.043 --> 00:02:34.546
just look at that so you can just see.

36
00:02:36.533 --> 00:02:41.869
It's just setting the most important
ones in the Content-Security-Policy

37
00:02:41.869 --> 00:02:45.018
which is like cool,
will allow only images for

38
00:02:45.018 --> 00:02:50.810
myself Scripts from ourself styles from
our own domain, so on and so forth.

39
00:02:50.810 --> 00:02:58.310
Turn off the X frame options,
so on and so forth.

40
00:02:58.310 --> 00:03:03.560
These are just kind of the suggestions
just to prove that it worked.

41
00:03:03.560 --> 00:03:07.110
Right now the server is Amazon s3,
cuz that's the origin.

42
00:03:07.110 --> 00:03:11.720
I like a lot of times,
if your site in the header goes,

43
00:03:11.720 --> 00:03:17.053
Ruby on Rails 4.0,
which was like end of life in 2015.

44
00:03:17.053 --> 00:03:19.410
And the security
vulnerabilities are known,

45
00:03:19.410 --> 00:03:22.030
you've just said a here's how to own me.

46
00:03:22.030 --> 00:03:27.020
This is ours actually out
of the box says Amazon S3.

47
00:03:27.020 --> 00:03:30.677
I have I think the hard part of
inventing your own framework is

48
00:03:30.677 --> 00:03:32.690
that you need to name it first.

49
00:03:32.690 --> 00:03:36.160
So welcome to my new
framework early on eels.

50
00:03:36.160 --> 00:03:41.218
It doesn't exist yet, but that's as
far as anyone go to this website.

51
00:03:41.218 --> 00:03:45.938
They don't know that, as far as I
know they're going to be looking for

52
00:03:45.938 --> 00:03:51.218
the documentation for Erlang on eels and
this is how I become a thought leader,

53
00:03:51.218 --> 00:03:55.710
so let's go ahead we will grab this
code and kind of put it in place.

54
00:03:59.730 --> 00:04:01.225
There if you wanna try a different one.

55
00:04:01.225 --> 00:04:03.205
There's a few other
recipes in here as well.

56
00:04:03.205 --> 00:04:05.295
There's one where I get
the client side routes working.

57
00:04:05.295 --> 00:04:08.545
They're kind of variations on a theme.

58
00:04:08.545 --> 00:04:10.211
So let's actually look at
all of them real quick and

59
00:04:10.211 --> 00:04:11.605
we'll pick which one we like the most.

60
00:04:11.605 --> 00:04:13.542
I like the security header
ones cuz I need an A plus,

61
00:04:13.542 --> 00:04:16.125
because I'm a millennial
who needs validation.

62
00:04:16.125 --> 00:04:19.710
But if we want to handle
those client side routes.

63
00:04:19.710 --> 00:04:24.450
So here we know that all of the client
side routes are notes, and then a number

64
00:04:24.450 --> 00:04:29.510
and so we can basically look at the URI on
the request object we get from the event.

65
00:04:30.520 --> 00:04:34.936
If it matches this note
slash possibly edit,

66
00:04:34.936 --> 00:04:39.352
change it to URI on the way
in the cloud front,

67
00:04:39.352 --> 00:04:44.815
which CloudFront will be like,
cool, I'll ask s3 for

68
00:04:44.815 --> 00:04:50.140
index that HTML,
which will totally be okay.

69
00:04:50.140 --> 00:04:53.450
And but like they won't change
the actual response header.

70
00:04:53.450 --> 00:04:57.250
So it'll say CloudFront will say to s3,
give me index.

71
00:04:57.250 --> 00:04:58.960
HTML will tell the browser.

72
00:04:58.960 --> 00:05:01.710
I got notes slash zombie.

73
00:05:01.710 --> 00:05:02.437
Here it is.

74
00:05:02.437 --> 00:05:05.060
So we actually have our 200 3200s.

75
00:05:05.060 --> 00:05:06.979
And our 404 will be 404s.

76
00:05:06.979 --> 00:05:07.759
Now clearly,

77
00:05:07.759 --> 00:05:11.860
I haven't have a simple app where like
notes slash a word will do the trick.

78
00:05:13.240 --> 00:05:16.855
So what we did was we basically we knew
the general typography or application,

79
00:05:16.855 --> 00:05:19.390
we had all the routes
pretty much specked out.

80
00:05:19.390 --> 00:05:22.978
And so we had a little bit more
robust version of this for

81
00:05:22.978 --> 00:05:25.810
the actual structure of our application.

82
00:05:25.810 --> 00:05:30.741
But the same basic principle will
work in this case the security

83
00:05:30.741 --> 00:05:34.650
headers we saw you can also
implement a redirect so

84
00:05:34.650 --> 00:05:39.860
this would be an origin request so
if we leave the cache.

85
00:05:39.860 --> 00:05:44.628
We can actually take generate our own
response before we ever touch s3,

86
00:05:44.628 --> 00:05:49.100
respond to the request with this URL,
and they'll be redirected.

87
00:05:49.100 --> 00:05:50.080
So you can do a whole bunch of stuff.

88
00:05:50.080 --> 00:05:53.810
You can program the CDN in all sorts
of interesting and different ways.

89
00:05:53.810 --> 00:05:56.547
It's just basically taking those
requests and responses and

90
00:05:56.547 --> 00:05:58.828
doing various different
things with them as well.

91
00:05:58.828 --> 00:06:03.747
So let's say,
it's a recall if you need to know,

92
00:06:03.747 --> 00:06:07.860
nobody play right now we're recording.

93
00:06:09.390 --> 00:06:12.660
It's the same video that you could expect
because I'm a child on the internet.

94
00:06:14.740 --> 00:06:16.120
So let's go in here.

95
00:06:16.120 --> 00:06:17.630
Let's grab this one.

96
00:06:17.630 --> 00:06:18.575
If it doesn't work,

97
00:06:18.575 --> 00:06:21.830
we'll do some debugging in a second
because I believe that was our issue.

98
00:06:23.730 --> 00:06:29.320
So we'll go into lambda,
we will have our version one here it is.

99
00:06:30.730 --> 00:06:35.761
in this case we're gonna go back to our
code now if you click on the code and

100
00:06:35.761 --> 00:06:40.030
you try to type things It
looks like you have a cursor.

101
00:06:40.030 --> 00:06:41.238
You can move around.

102
00:06:44.420 --> 00:06:47.979
Doesn't do anything
till you hit edit code.

103
00:06:51.208 --> 00:06:56.495
Then, it looks exactly the same, but

104
00:06:56.495 --> 00:07:03.434
now you can type, so
we'll paste that in as well,

105
00:07:03.434 --> 00:07:08.710
we'll save it, and deploy it.

106
00:07:08.710 --> 00:07:13.852
Again, hitting deploy does not deploy
to cloud front, then you go to Actions,

107
00:07:13.852 --> 00:07:18.490
Deploy to Lambda@Edge Look again,

108
00:07:18.490 --> 00:07:22.220
hopefully, once you have this in place,
most of it should work.

109
00:07:22.220 --> 00:07:23.520
This should be the viewer response.

110
00:07:23.520 --> 00:07:28.083
On the way out, change the headers
in every way that we need so

111
00:07:28.083 --> 00:07:30.600
that they pass the Mozilla test.

112
00:07:31.820 --> 00:07:33.061
I acknowledge what I'm doing.

113
00:07:37.337 --> 00:07:39.498
And that should go out at this point.

114
00:07:42.761 --> 00:07:44.130
Awesome.

115
00:07:44.130 --> 00:07:47.267
So successfully created version two or
your function associated with the cloud

116
00:07:47.267 --> 00:07:50.430
front trigger, function has been
replicated across all the regions.

117
00:07:50.430 --> 00:07:54.170
Great, our lambda edge did in fact cook.

118
00:07:54.170 --> 00:07:57.309
Right as you can see it is it is running,
and

119
00:07:57.309 --> 00:08:01.300
I just recently rebrand
the Mozilla observatory.

120
00:08:01.300 --> 00:08:03.540
I can run it again if nobody believes me.

121
00:08:03.540 --> 00:08:05.290
Will get to run at once
every five minutes.

122
00:08:05.290 --> 00:08:08.070
So I ran out while
the opportunity was there.

123
00:08:08.070 --> 00:08:11.556
And you can see we went
from an F previously

124
00:08:11.556 --> 00:08:14.850
to an A+ just by fixing those headers.

125
00:08:14.850 --> 00:08:19.359
And that is one of the powers of
the programmable CDN aspect here, right,

126
00:08:19.359 --> 00:08:24.000
which is previously would have been,
well, this is what it does.

127
00:08:24.000 --> 00:08:28.288
Wait for a feature to come out or
something along those lines the idea that

128
00:08:28.288 --> 00:08:31.590
if you needed to modify stuff or
like I said set cookies or

129
00:08:31.590 --> 00:08:36.299
do any custom logic that you can do it and
this is happening at the edge right close

130
00:08:36.299 --> 00:08:40.586
to your users right like it depends
if you're still talking to a database

131
00:08:40.586 --> 00:08:45.120
located in Des Moines then like you're
still gonna pay some of those costs.

132
00:08:45.120 --> 00:08:49.509
But if you can like also set up, so
as few requests go back to that API,

133
00:08:49.509 --> 00:08:54.580
is simply just get me the latest top
trending items for the Twitter sidebar.

134
00:08:54.580 --> 00:08:59.120
That's not even necessarily,
possibly too much scope to a user.

135
00:08:59.120 --> 00:09:02.750
There are things you can probably
move to the edge and cache.

136
00:09:02.750 --> 00:09:06.560
And then obviously, a user's personal
stuff is usually probably unique to them.

137
00:09:06.560 --> 00:09:08.100
But maybe you keep that with a TTL.

138
00:09:08.100 --> 00:09:09.870
So they keep refreshing the page.

139
00:09:09.870 --> 00:09:12.310
It's not slamming on your servers.

140
00:09:12.310 --> 00:09:13.860
They're getting a cached version.

141
00:09:13.860 --> 00:09:18.909
So maybe one even if you like, set a TTL
on something like that from down to 30

142
00:09:18.909 --> 00:09:24.050
seconds that means one request gets
through every 30 seconds at that point.

143
00:09:24.050 --> 00:09:27.464
And for the API's, there's a web
application firewall and stuff like that

144
00:09:27.464 --> 00:09:31.490
you can use that origin shield you can do
even more protection around that as well.

145
00:09:31.490 --> 00:09:34.156
For static assets,
we're mostly just trying to,

146
00:09:34.156 --> 00:09:37.319
we know that we can basically store it for
a really long time,

147
00:09:37.319 --> 00:09:41.250
until we cast the invalidation on
a deploy or something along those lines.

