WEBVTT

1
00:00:00.180 --> 00:00:04.438
My name is Steve Kinney and
I am the front-end architect at Temporal,

2
00:00:04.438 --> 00:00:09.345
our company that does workflows as code,
and a lot of the processes around making

3
00:00:09.345 --> 00:00:13.490
all the ways building an application
can go wrong, not go wrong.

4
00:00:13.490 --> 00:00:15.671
So, if you need your code to
be reliable at all times,

5
00:00:15.671 --> 00:00:17.980
you should definitely check out Temporal.

6
00:00:17.980 --> 00:00:20.488
And what I'm gonna talk
a little bit about today is,

7
00:00:20.488 --> 00:00:23.580
we spent a lot of time building
client-side applications.

8
00:00:23.580 --> 00:00:28.321
We think a lot about, okay, is a for
loop faster than a for each loop, so

9
00:00:28.321 --> 00:00:29.890
on and so forth.

10
00:00:29.890 --> 00:00:34.374
And we don't necessarily spend as
much time always thinking about,

11
00:00:34.374 --> 00:00:38.018
how do we actually get these
applications to our users?

12
00:00:38.018 --> 00:00:41.173
So this workshop is
a workshop on building,

13
00:00:41.173 --> 00:00:46.038
not only taking the client-side
applications that we've built,

14
00:00:46.038 --> 00:00:50.392
and building the kind of
professional grade infrastructure

15
00:00:50.392 --> 00:00:54.763
necessary to get it to our users
reliably and performantly.

16
00:00:54.763 --> 00:00:59.677
And it's based on kind of putting
together kind of multiple runs at this.

17
00:00:59.677 --> 00:01:02.117
Before I was the front-end
architect at Temporal,

18
00:01:02.117 --> 00:01:06.220
I was a front-end architect at Twilio, and
before that, the front-end architect and

19
00:01:06.220 --> 00:01:07.842
principal engineer at SendGrid.

20
00:01:07.842 --> 00:01:11.305
This is the thing that we've kind of taken
multiple iterations at over the course of

21
00:01:11.305 --> 00:01:12.150
the last few years.

22
00:01:12.150 --> 00:01:14.457
And how to actually build that for
yourself,

23
00:01:14.457 --> 00:01:16.346
it's simpler than you might think.

24
00:01:16.346 --> 00:01:19.686
That even if you think about how long
we're gonna talk about this today,

25
00:01:19.686 --> 00:01:22.061
we're also gonna talk about it and
explain it all.

26
00:01:22.061 --> 00:01:24.099
Actually putting together and

27
00:01:24.099 --> 00:01:29.820
putting in place the infrastructure that
makes your application really performant,

28
00:01:29.820 --> 00:01:34.300
and reliably so, is something that
is relatively in your control.

29
00:01:34.300 --> 00:01:37.570
And there are a lot of other ways
that you can go about doing this.

30
00:01:37.570 --> 00:01:42.914
Especially, there are options such
as nullify and Vercel in Cloudflare.

31
00:01:42.914 --> 00:01:44.767
And those, for a lot of cases,
might be a really great option.

32
00:01:44.767 --> 00:01:49.096
But there's times where you also
need to do enough custom things or

33
00:01:49.096 --> 00:01:53.756
your company already has AWS and
some of this infrastructure in place.

34
00:01:53.756 --> 00:01:58.042
And you're looking to tweak it, or improve
it, or make it better, or you kinda wanna

35
00:01:58.042 --> 00:02:02.092
learn how these other companies that
are building this kind of infrastructure,

36
00:02:02.092 --> 00:02:05.509
how they work and how you can kind
of have that in place for yourself.

37
00:02:05.509 --> 00:02:07.498
So, it's kind of what we're
gonna cover in this course.

38
00:02:07.498 --> 00:02:11.762
Is we kind of build all the pieces
necessary to have this infrastructure in

39
00:02:11.762 --> 00:02:14.375
place for
a project that will work reliably,

40
00:02:14.375 --> 00:02:18.638
if it's your personal blog, as well
as if you were building a application

41
00:02:18.638 --> 00:02:22.470
that makes tens of millions of
dollars a year, or possibly more.

42
00:02:22.470 --> 00:02:27.189
So, before we get all the way into all
the moving pieces around that, let's

43
00:02:27.189 --> 00:02:31.852
talk a little bit about just the kind
of problem that inspired a lot of this.

44
00:02:31.852 --> 00:02:36.947
I worked on this application, and long
ago, it was a Ruby on Rails application.

45
00:02:36.947 --> 00:02:39.248
So, server-rendered pages,
so on and so forth.

46
00:02:39.248 --> 00:02:42.622
You'd render some server,
some HTML on the server, send it out,

47
00:02:42.622 --> 00:02:46.820
there'd be some Coffee Script and
some jQuery stuff would move around.

48
00:02:46.820 --> 00:02:49.680
Eventually, that became
a React application.

49
00:02:49.680 --> 00:02:53.669
But it still had the fundamental
problem of the four servers that were

50
00:02:53.669 --> 00:02:57.407
serving out this application
were located outside of Chicago.

51
00:02:57.407 --> 00:03:00.124
And so, the further you got from Chicago,

52
00:03:00.124 --> 00:03:04.814
the worse the time to first byte was,
and all the subsequent other bytes.

53
00:03:04.814 --> 00:03:07.957
And so, performance would get worse,
and worse, and worse,

54
00:03:07.957 --> 00:03:12.181
the further you were away from the Central
Time Zone in the United States of America.

55
00:03:12.181 --> 00:03:15.497
Which it turns out,
we had some metrics to show that India and

56
00:03:15.497 --> 00:03:19.076
Brazil were two of the kind of
bigger regions, as well as London,

57
00:03:19.076 --> 00:03:22.285
where performance was actually
really kind of not great.

58
00:03:22.285 --> 00:03:25.205
So, we started out with our client-side
code, it was hosted on a Rails app.

59
00:03:25.205 --> 00:03:27.470
The Rails app was located in Chicago.

60
00:03:27.470 --> 00:03:28.950
It was getting a little bit tricky.

61
00:03:28.950 --> 00:03:31.526
And we had this opportunity to, one,

62
00:03:31.526 --> 00:03:35.956
start thinking about where we'd
put our client-side assets and

63
00:03:35.956 --> 00:03:40.563
eventually move the entire front-end
into AWS using CloudFront.

64
00:03:40.563 --> 00:03:42.659
And we'll kind of explore how we did it,
and

65
00:03:42.659 --> 00:03:44.541
how you might choose to do it, as well.

66
00:03:44.541 --> 00:03:46.458
Let's look at some of the numbers first.

67
00:03:46.458 --> 00:03:52.186
So, we have the before column,
SendGrid was based out of Denver.

68
00:03:52.186 --> 00:03:54.716
And so, time to Chicago, not too bad.

69
00:03:54.716 --> 00:03:59.260
Even then, the performance gain within the
US was pretty good cuz there's actually

70
00:03:59.260 --> 00:04:02.462
a CloudFront edge node in Denver,
as well as Minneapolis.

71
00:04:02.462 --> 00:04:04.310
So that even is somewhat helpful.

72
00:04:04.310 --> 00:04:08.574
Go out to Frankfurt and
you're going from 11 seconds down to 1.8.

73
00:04:08.574 --> 00:04:12.873
Mumbai, you're going from
9.6 seconds down to 1.3.

74
00:04:12.873 --> 00:04:15.620
And Sydney,
from 12 seconds down to 0.8 seconds.

75
00:04:15.620 --> 00:04:20.636
So huge performance gains that didn't
really involve any change in our code,

76
00:04:20.636 --> 00:04:21.170
right?

77
00:04:21.170 --> 00:04:25.471
It was just a change in how we got
that code to our users, right?

78
00:04:25.471 --> 00:04:28.166
Because, rather than figure out
the optimal one place to put it,

79
00:04:28.166 --> 00:04:30.568
you can use CloudFront just
to put it everywhere, right?

80
00:04:30.568 --> 00:04:35.142
And one user has to pay the cost of it
going all the way to a given Amazon region

81
00:04:35.142 --> 00:04:40.239
while everyone else has it cached nearby,
and they're able to get it a lot faster.

82
00:04:40.239 --> 00:04:45.012
So, one person pays that original cost,
every subsequent end user gets something

83
00:04:45.012 --> 00:04:49.047
very close to these performance levels for
loading the application.

84
00:04:49.047 --> 00:04:51.830
Like I said,
we're gonna build this application today.

85
00:04:51.830 --> 00:04:55.913
And what we're gonna build will
have the following characteristics.

86
00:04:55.913 --> 00:04:58.673
And we're gonna build it to a point
where we have it kinda working but

87
00:04:58.673 --> 00:04:59.895
it's got some trade-offs.

88
00:04:59.895 --> 00:05:04.943
And then, slowly, over the course of our
time together, we will address each one

89
00:05:04.943 --> 00:05:09.921
of those trade-offs until we have a pretty
kinda solid implementation, as well

90
00:05:09.921 --> 00:05:14.998
as some opportunities for how you could
even further improve it, after the fact.

91
00:05:14.998 --> 00:05:20.020
So, we're gonna get our client-side
application hosted on AWS via S3.

92
00:05:20.020 --> 00:05:24.644
Have it distributed globally, so that no
matter where you are in the world you're

93
00:05:24.644 --> 00:05:27.066
getting fast access to that application.

94
00:05:27.066 --> 00:05:30.474
Secured with HTTPS using SSL cert.

95
00:05:30.474 --> 00:05:32.780
Automatically deployed,
at first we'll do it by hand,

96
00:05:32.780 --> 00:05:34.998
at first we're gonna literally
hit an Upload button.

97
00:05:34.998 --> 00:05:37.105
And then we will do it
from the command line and

98
00:05:37.105 --> 00:05:40.324
then eventually we'll have it
automatically deployed with a CI/CD

99
00:05:40.324 --> 00:05:42.718
pipeline that we'll write
using GitHub actions.

100
00:05:42.718 --> 00:05:47.338
And then for kind of custom things like
fixing some of the security headers and

101
00:05:47.338 --> 00:05:48.915
stuff along those lines.

102
00:05:48.915 --> 00:05:50.586
We'll use Lambda, and Edge, and

103
00:05:50.586 --> 00:05:54.389
CloudFront functions to see that we can
actually take this infrastructure and

104
00:05:54.389 --> 00:05:58.379
program it, and write code against it to
do various things that we might wanna do.

105
00:05:58.379 --> 00:06:00.593
We'll do some of
the general cases together,

106
00:06:00.593 --> 00:06:04.055
we'll talk about some of the additional
things that you might wanna do,

107
00:06:04.055 --> 00:06:06.684
depending on the specific
needs of your application.

108
00:06:06.684 --> 00:06:07.783
What are we not gonna cover?

109
00:06:07.783 --> 00:06:11.672
So, we're not gonna cover servers,
cuz this is a course on getting

110
00:06:11.672 --> 00:06:15.712
your phone an application,
like interproduction in a scalable way.

111
00:06:15.712 --> 00:06:20.132
We're gonna kinda dance next to
serverless, with this idea that you

112
00:06:20.132 --> 00:06:24.641
can program your CDN, but
we're not gonna cover AWS Lambda in depth.

113
00:06:24.641 --> 00:06:28.133
That is a course, in and of itself,
that Frontend Masters offers.

114
00:06:28.133 --> 00:06:32.110
And you should absolutely check it out as
soon as you finish watching the rest of

115
00:06:32.110 --> 00:06:32.840
this course.

116
00:06:32.840 --> 00:06:37.662
So, let's look at a slide that we might
show at the end of this workshop.

117
00:06:37.662 --> 00:06:40.186
So, we'll first get it
up onto the Internet,

118
00:06:40.186 --> 00:06:43.373
just in someplace that Amazon's
willing to put it for us.

119
00:06:43.373 --> 00:06:45.250
And we'll fix that URL to begin with.

120
00:06:45.250 --> 00:06:46.161
We'll register a domain name.

121
00:06:46.161 --> 00:06:49.184
There's not necessarily a requirement that
you have to go register a domain name

122
00:06:49.184 --> 00:06:50.345
today, if you don't want to.

123
00:06:50.345 --> 00:06:54.095
But I will, at least, go through the
process, so you can have that in place.

124
00:06:54.095 --> 00:06:57.362
We'll kind of work through
this list of to-do's,

125
00:06:57.362 --> 00:07:02.723
from the initial version that we start out
with, towards the version at the very end.

