WEBVTT

1
00:00:00.465 --> 00:00:05.190
So, now that we have this,
we are still getting an error here,

2
00:00:05.190 --> 00:00:08.860
because menu can be null the first time,
right?

3
00:00:08.860 --> 00:00:13.312
So if it's null, I cannot return
a null because it's asking for

4
00:00:13.312 --> 00:00:14.885
a list of categories.

5
00:00:14.885 --> 00:00:20.595
So if I know that I do have a menu,
because I fetched it, I need to do this,

6
00:00:20.595 --> 00:00:25.392
or check if it's null or not,
and maybe create an empty one.

7
00:00:28.170 --> 00:00:34.092
Remember, this is actually saying,
open that option and return that option.

8
00:00:34.092 --> 00:00:38.618
And actually this code will
make the trick of going and

9
00:00:38.618 --> 00:00:41.545
rendering something in the menu.

10
00:00:41.545 --> 00:00:44.796
It's downloading the JSON,
parsing the JSON.

11
00:00:44.796 --> 00:00:46.918
How do I know if this is working?

12
00:00:46.918 --> 00:00:49.494
Well, first, who is going to use this?

13
00:00:49.494 --> 00:00:51.567
Menupage, okay?

14
00:00:51.567 --> 00:00:57.747
So in menupage, I was doing this dummy
product thing that I don't think I want.

15
00:00:57.747 --> 00:00:59.977
What do I want here?

16
00:00:59.977 --> 00:01:02.862
I wanna go and talk to the data manager.

17
00:01:02.862 --> 00:01:04.904
So I have a list view here.

18
00:01:04.904 --> 00:01:10.823
What if instead of this, I'm rendering
a text, just to see if something works.

19
00:01:10.823 --> 00:01:14.315
And in the text, I will say items or

20
00:01:14.315 --> 00:01:19.143
categories, Available.

21
00:01:23.136 --> 00:01:28.756
And I will pull here an expression

22
00:01:28.756 --> 00:01:34.383
saying dataManager.getMenu.

23
00:01:34.383 --> 00:01:37.069
So this is going to get the menu, right?

24
00:01:37.069 --> 00:01:38.845
That was kind of the idea.

25
00:01:38.845 --> 00:01:42.802
So I'm getting the menu
directly like this.

26
00:01:42.802 --> 00:01:48.493
And from this, I can take from the menu.

27
00:01:48.493 --> 00:01:53.594
Remember, getMenu is actually returning
the future list of categories.

28
00:01:55.807 --> 00:01:56.463
Make sense?

29
00:01:56.463 --> 00:02:00.427
So we can actually get
the contents on the screen.

30
00:02:00.427 --> 00:02:05.083
But it's a future,
how can I listen for the future?

31
00:02:05.083 --> 00:02:09.531
This is similar to promises in JavaScript,

32
00:02:09.531 --> 00:02:12.784
you can listen for them, okay?

33
00:02:12.784 --> 00:02:15.800
So there is a then, there is a cart,
similar to promises, but

34
00:02:15.800 --> 00:02:17.485
it feels a little weird to do this.

35
00:02:17.485 --> 00:02:21.779
I mean, I can, so
then I can render the value, but

36
00:02:21.779 --> 00:02:26.500
it's kind of weird that I'm
doing this within a text.

37
00:02:26.500 --> 00:02:31.253
So to solve the problems and work with
futures, there is a much better way.

38
00:02:31.253 --> 00:02:37.441
So Flutter has something
known as FutureBuilder.

39
00:02:37.441 --> 00:02:39.728
What's a FutureBuilder?

40
00:02:39.728 --> 00:02:45.151
The FutureBuilder is actually a widget

41
00:02:45.151 --> 00:02:49.427
that will be based in a future.

42
00:02:49.427 --> 00:02:51.319
Again, what's a future?

43
00:02:51.319 --> 00:02:54.330
A value that is coming later, okay?

44
00:02:54.330 --> 00:02:55.657
That's kind of the idea.

45
00:02:55.657 --> 00:02:58.669
So the FutureBuilder works in this way.

46
00:02:58.669 --> 00:03:02.242
You will understand the whole
idea in a minute and

47
00:03:02.242 --> 00:03:07.220
I think that you will like it,
because it's actually pretty good.

48
00:03:07.220 --> 00:03:10.284
The FutureBuilder
receives first a builder.

49
00:03:10.284 --> 00:03:11.886
What's a builder?

50
00:03:11.886 --> 00:03:15.210
There are some elements,
some widgets in Flutter,

51
00:03:15.210 --> 00:03:18.995
that instead of receiving children,
they have a builder.

52
00:03:18.995 --> 00:03:23.410
A builder typically receives a context and
an index, okay,

53
00:03:23.410 --> 00:03:26.362
typically, but it depends on the case.

54
00:03:26.362 --> 00:03:28.746
Some builders will get you
something different, okay?

55
00:03:28.746 --> 00:03:30.666
So it depends on the builder.

56
00:03:30.666 --> 00:03:33.539
In this case, you're getting
something known as a snapshot.

57
00:03:33.539 --> 00:03:39.261
In fact, I think that you get
the signature there, as an example, okay?

58
00:03:39.261 --> 00:03:41.073
You'll understand what's
going on in a second.

59
00:03:42.964 --> 00:03:47.257
I think I have some parentheses issues.

60
00:03:47.257 --> 00:03:49.923
So let's balance this.

61
00:03:49.923 --> 00:03:52.136
This goes to a newline, okay, that's fine.

62
00:03:52.136 --> 00:03:57.035
So here, what I need to do,
I need to return something, for example,

63
00:03:57.035 --> 00:03:58.123
a text, okay?

64
00:03:58.123 --> 00:04:03.472
Saying something, a widget, so
a builder returns a widget, okay?

65
00:04:03.472 --> 00:04:04.087
What's going on?

66
00:04:04.087 --> 00:04:05.138
What's a snapshot?

67
00:04:05.138 --> 00:04:12.320
A snapshot is a variable that will
contain the data from the future,

68
00:04:12.320 --> 00:04:18.747
but it also will contain
properties such as this, hasData.

69
00:04:18.747 --> 00:04:22.459
So if it has data, we can do something,
if it doesn't have data,

70
00:04:22.459 --> 00:04:23.949
we can do something else.

71
00:04:23.949 --> 00:04:28.150
So while it is waiting for
the future to finish,

72
00:04:30.047 --> 00:04:32.814
It will actually go to the else, and

73
00:04:32.814 --> 00:04:37.631
here in the else, we can render
anything such as for example.

74
00:04:37.631 --> 00:04:41.429
And by the way, if it doesn't have data,
maybe it's because there is an error.

75
00:04:41.429 --> 00:04:43.614
So an exception has happened.

76
00:04:43.614 --> 00:04:48.500
So the future actually reject the data.

77
00:04:48.500 --> 00:04:53.441
So, what we can do here,
we need to return different options,

78
00:04:53.441 --> 00:04:56.909
such as there was an error
loading the data.

79
00:04:59.529 --> 00:05:05.232
This is a const, and
here there is a CircularPogressIndicator

80
00:05:05.232 --> 00:05:09.764
that we can use as well,
so we can return that one.

81
00:05:09.764 --> 00:05:10.819
What is that?

82
00:05:10.819 --> 00:05:14.223
An animation with a circle.

83
00:05:14.223 --> 00:05:20.780
So this means the data is in progress,
so the future didn't finish.

84
00:05:20.780 --> 00:05:22.066
Make sense?

85
00:05:22.066 --> 00:05:29.652
If we are here, it's because the data
is not there because of an error.

86
00:05:29.652 --> 00:05:33.164
So we are rendering an error.

87
00:05:33.164 --> 00:05:40.367
And if we have data,
the future has finished, data is ready.

88
00:05:40.367 --> 00:05:45.807
So with a FutureBuilder,
we have this way to actually render

89
00:05:45.807 --> 00:05:51.149
different things on the screen for
different situations.

90
00:05:51.149 --> 00:05:52.759
Does it make sense for now?

91
00:05:52.759 --> 00:05:58.064
So we can release a widget, so we can
use it anytime that we have widget that

92
00:05:58.064 --> 00:06:03.040
needs to go to the network or
to other places that are future-based,

93
00:06:05.930 --> 00:06:08.770
And then render content on the screen.

94
00:06:08.770 --> 00:06:13.057
But where is the data coming from, because
we need to specify where the future is?

95
00:06:13.057 --> 00:06:16.994
And the future is the dataManager.getMenu.

96
00:06:20.020 --> 00:06:24.951
Okay, so we are asking the FutureBuilder
to build a UI based on the future.

97
00:06:24.951 --> 00:06:27.749
The future has different states.

98
00:06:27.749 --> 00:06:28.897
What's a future?

99
00:06:28.897 --> 00:06:32.149
A promise,
a promise of a future data, okay?

100
00:06:32.149 --> 00:06:34.849
That make sense, kind of?

101
00:06:34.849 --> 00:06:39.607
So if we do have something,
maybe we can return the text for now,

102
00:06:39.607 --> 00:06:41.561
taking where is the data?

103
00:06:41.561 --> 00:06:45.322
Actually the snapshot has the data.

104
00:06:47.359 --> 00:06:49.318
Okay, the snapshot has the data.

105
00:06:49.318 --> 00:06:52.561
So what do I need to do with that data?

106
00:06:52.561 --> 00:06:56.535
I can install that into a variable, sorry.

107
00:06:56.535 --> 00:07:02.005
So my data is an array of categories,
so you can call these categories,

108
00:07:02.005 --> 00:07:06.124
and I will say is,
I know that the data is there, why?

109
00:07:06.124 --> 00:07:09.494
Because I have already asked for it.

110
00:07:09.494 --> 00:07:13.623
Because if there is errors,
the data is null.

111
00:07:13.623 --> 00:07:18.261
Does it make sense or
did you get really complicated?

112
00:07:18.261 --> 00:07:23.193
So now, I can say there

113
00:07:23.193 --> 00:07:29.171
are categories_length.

114
00:07:29.171 --> 00:07:29.987
Can we get length?

115
00:07:29.987 --> 00:07:32.337
Well, the promise said it
doesn't know what it is.

116
00:07:32.337 --> 00:07:36.107
So what you can do here is I can say,

117
00:07:36.107 --> 00:07:41.324
as something,
I know it's a list of category.

118
00:07:41.324 --> 00:07:41.874
Does it make sense?

119
00:07:41.874 --> 00:07:42.924
So now, it has a length.

120
00:07:47.695 --> 00:07:50.240
So let's summarize what I've done here.

121
00:07:50.240 --> 00:07:53.416
So this is my menu page.

122
00:07:53.416 --> 00:07:56.802
My menu page right now is
rendering a FutureBuilder.

123
00:07:56.802 --> 00:08:01.286
So it means that it's
rendering some content

124
00:08:01.286 --> 00:08:06.132
based on requesting that
content from a future.

125
00:08:06.132 --> 00:08:08.460
Does it makes sense?

126
00:08:08.460 --> 00:08:12.547
The content, for a while,
it's loading, and for that,

127
00:08:12.547 --> 00:08:15.725
we have here a CircularProgressIndicator.

128
00:08:15.725 --> 00:08:19.444
Maybe there is an error at some
point in the future process.

129
00:08:19.444 --> 00:08:22.785
For example, there was an error
with parsing the JSON or

130
00:08:22.785 --> 00:08:26.996
wherever you define as an error,
and then it's going to render this.

131
00:08:26.996 --> 00:08:30.919
And if we have data,
it should render a text.

132
00:08:30.919 --> 00:08:32.268
Does it make sense kind of?

133
00:08:34.320 --> 00:08:41.383
So let's rerun this in Chrome.

134
00:08:41.383 --> 00:08:45.844
&gt;&gt; So a FutureBuilder just
keeps getting rebuilt?

135
00:08:45.844 --> 00:08:48.176
&gt;&gt; We are in a state with widgets,

136
00:08:48.176 --> 00:08:53.124
so actually once it was rendered,
there will be no rerendering.

137
00:08:53.124 --> 00:08:56.587
Does it makes sense?

138
00:08:56.587 --> 00:09:01.332
And, I mean,
it still doesn't look super great, but

139
00:09:01.332 --> 00:09:07.007
I think you should get excited
about that little message saying,

140
00:09:07.007 --> 00:09:14.667
there are four categories, because that's
actually the data coming from the server.

141
00:09:14.667 --> 00:09:18.466
I didn't hack all that, okay?

142
00:09:18.466 --> 00:09:22.301
I mean, we didn't see that circular
indicator because it's actually going

143
00:09:22.301 --> 00:09:23.372
really fast, okay?

144
00:09:23.372 --> 00:09:24.513
So that's why we didn't.

145
00:09:24.513 --> 00:09:30.619
We can try to reload here and see if
it's right to turn on this again and

146
00:09:30.619 --> 00:09:36.955
keep this up to the right, so
we can actually preview what's going on.

147
00:09:38.850 --> 00:09:45.205
Let me rearrange a little bit this,
like so.

148
00:09:45.205 --> 00:09:52.215
Oops, Like that.

149
00:09:52.215 --> 00:09:55.751
So if I refresh, now the JSON
is coming really really fast, so

150
00:09:55.751 --> 00:09:58.269
that's why we're not seeing the measure.

151
00:09:58.269 --> 00:10:02.399
But let's see, if there is an error,
we can actually see that because

152
00:10:02.399 --> 00:10:05.834
I can just force an error in the URL and
see if that happens.

153
00:10:05.834 --> 00:10:10.919
So now, I don't wanna see
a text saying there are four

154
00:10:10.919 --> 00:10:15.787
categories, I wanna see the categories,
right?

155
00:10:15.787 --> 00:10:22.640
So to do that, I need a column or a list
view, because we want to scroll, remember.

156
00:10:22.640 --> 00:10:27.543
So I want a ListView, but
in this case, the ListView, remember,

157
00:10:27.543 --> 00:10:30.799
has children, and
I need to pass the array.

158
00:10:30.799 --> 00:10:34.058
Can I pass the array of
categories as an argument?

159
00:10:34.058 --> 00:10:36.458
What do you think, like here?

160
00:10:41.385 --> 00:10:47.824
No, because this is a list of category,
not the list of widgets.

161
00:10:47.824 --> 00:10:49.147
Does it makes sense?

162
00:10:49.147 --> 00:10:53.573
So yeah, I can map these into,
but it doesn't work like this.

163
00:10:53.573 --> 00:10:57.077
So ListView has another way to
create a ListView with a builder.

164
00:10:59.031 --> 00:11:04.529
Okay, so this is actually a factory
constructor or a name constructor.

165
00:11:04.529 --> 00:11:06.477
What's an item builder?

166
00:11:06.477 --> 00:11:12.169
I will receive here context and
index, and I need to return a view.

167
00:11:12.169 --> 00:11:14.873
So actually, this is how it works.

168
00:11:14.873 --> 00:11:17.930
The index is actually the category
that I need to render.

169
00:11:17.930 --> 00:11:22.463
So I need to return here,
what do I wanna render for that index?

170
00:11:22.463 --> 00:11:23.136
So for example,

171
00:11:23.136 --> 00:11:26.029
I can render, you will understand
finally what's going on in minute.

172
00:11:26.029 --> 00:11:32.408
So I can render categories[index].name,

173
00:11:32.408 --> 00:11:35.194
so a text with that.

174
00:11:35.194 --> 00:11:38.847
I need to put semicolon here, and

175
00:11:38.847 --> 00:11:43.683
I think I have a parenthesis
balance issue.

176
00:11:43.683 --> 00:11:46.616
Yeah, I need one more
to close the builder.

177
00:11:46.616 --> 00:11:48.290
There we go.

178
00:11:48.290 --> 00:11:52.530
So now, what we have here,
where I'm going more for some reason,

179
00:11:52.530 --> 00:11:54.211
we'll check in a minute.

180
00:11:54.211 --> 00:11:57.310
But I see hot coffee,
ice coffee, tea and snacks.

181
00:11:57.310 --> 00:12:03.215
So this is actually going
through the ListView, okay?

182
00:12:05.055 --> 00:12:06.380
Any questions on this one?

183
00:12:08.670 --> 00:12:11.333
So why do we have an error?

184
00:12:11.333 --> 00:12:16.550
Because actually,
if you look at the ListView builder,

185
00:12:16.550 --> 00:12:22.426
the ListView builder doesn't
know about my categories array.

186
00:12:22.426 --> 00:12:27.057
So it doesn't know how many
items it should render, okay?

187
00:12:27.057 --> 00:12:29.375
Does it make sense?
So it doesn't know.

188
00:12:30.646 --> 00:12:33.603
I can actually say so with itemCount.

189
00:12:33.603 --> 00:12:37.600
So I will say, hey, you know what,
you will have four only.

190
00:12:37.600 --> 00:12:41.382
So don't ask me for
more because I don't have more.

191
00:12:41.382 --> 00:12:44.338
It's not an infinite list.

192
00:12:44.338 --> 00:12:48.577
So actually, with this, you can make
an infinite list, you don't pass account.

193
00:12:48.577 --> 00:12:52.988
And actually what will happen is
that if you have 1000 elements,

194
00:12:52.988 --> 00:12:56.494
it's not going to ask you for
the 1000 at the time.

195
00:12:56.494 --> 00:13:02.513
When you start scrolling, it will start
asking you to the builder function,

196
00:13:02.513 --> 00:13:06.502
hey, I need the fourth one,
I need the eighth one.

197
00:13:06.502 --> 00:13:10.681
Give me the widget that you want for
this particular item.

198
00:13:10.681 --> 00:13:14.351
So this is actually looping
through the categories.

199
00:13:14.351 --> 00:13:17.917
Of course, I can now add more widgets,

200
00:13:17.917 --> 00:13:23.438
such as icon with a padding on
everything that you know here.

201
00:13:23.438 --> 00:13:25.578
So now, we have padding on them.

