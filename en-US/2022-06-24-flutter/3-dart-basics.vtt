WEBVTT

1
00:00:00.160 --> 00:00:02.869
It's time to go and
see some Dart code, okay,

2
00:00:02.869 --> 00:00:05.234
before actually getting into Flutter.

3
00:00:05.234 --> 00:00:09.504
So I'm going to get out of the slide for
a minute and

4
00:00:09.504 --> 00:00:15.314
I'm going to use VS Code to open
a folder that you have in the assets.

5
00:00:15.314 --> 00:00:20.585
So remember that we have in
firtman.github.io/intro-flutter,

6
00:00:20.585 --> 00:00:26.495
we have a lesson, the first one, where
you can download the workshop assets.

7
00:00:27.945 --> 00:00:32.295
So in that ZIP file, you have a couple
of images that we will use later.

8
00:00:32.295 --> 00:00:36.194
And also there is a folder
with the name dart101, okay?

9
00:00:36.194 --> 00:00:38.270
So these are the basics of Dart.

10
00:00:38.270 --> 00:00:39.310
I want you to go.

11
00:00:39.310 --> 00:00:39.862
In fact,

12
00:00:39.862 --> 00:00:44.434
if you go to the next lesson here, it will
just tell you to download the slides.

13
00:00:44.434 --> 00:00:49.590
And next one, so the third lesson will
actually tell you again to download

14
00:00:49.590 --> 00:00:55.178
the assets and open in Visual Studio or
Android Studio, up to you, so be ready.

15
00:00:55.178 --> 00:00:59.100
I want you to open the folder dart101,
okay?

16
00:00:59.100 --> 00:01:01.511
So I will use Visual Studio.

17
00:01:01.511 --> 00:01:04.148
It's the same if you
wanna use Android Studio.

18
00:01:04.148 --> 00:01:05.569
So I'm going to open a folder.

19
00:01:08.337 --> 00:01:16.198
And I'm going to look into my,
The Assets &gt; dart101.

20
00:01:16.198 --> 00:01:18.170
So I'm going to open that folder.

21
00:01:18.170 --> 00:01:21.950
In that folder, what we have is
a couple of files, Dart files.

22
00:01:21.950 --> 00:01:27.433
And by the way, you can see at this point
the extension of Dart files, it's .dart.

23
00:01:27.433 --> 00:01:32.674
And here we can actually start
playing with some Dart code and

24
00:01:32.674 --> 00:01:35.155
see errors in the compiler.

25
00:01:35.155 --> 00:01:40.626
Well, the first news that I have for you,
I know that when I'm saying this, a lot

26
00:01:40.626 --> 00:01:46.118
of people will feel a little sad about
this, but yeah, you'll get used to that.

27
00:01:46.118 --> 00:01:49.720
Semicolons are mandatory in Dart.

28
00:01:49.720 --> 00:01:53.415
So if you're coming from Kotlin or
Swift or

29
00:01:53.415 --> 00:01:58.752
other modern languages where
the semicolon is on mandatory,

30
00:01:58.752 --> 00:02:03.080
you will need to get used
to use semicolons again.

31
00:02:03.080 --> 00:02:07.951
So first, if you look at this,
this looks like JavaScript, okay?

32
00:02:07.951 --> 00:02:10.737
So I have two variables, semicolons.

33
00:02:10.737 --> 00:02:12.590
It actually looks like JavaScript.

34
00:02:12.590 --> 00:02:16.795
So we actually have the var keyword to
define variables as in JavaScript, but

35
00:02:16.795 --> 00:02:19.330
it's like something completely different.

36
00:02:20.650 --> 00:02:24.845
So actually, the var keyword works
similar to the var keyword in C#,

37
00:02:24.845 --> 00:02:26.920
if you have experience with that.

38
00:02:26.920 --> 00:02:29.910
So if you don't, don't worry,
I will explain what that is.

39
00:02:29.910 --> 00:02:34.354
So in JavaScript, you create a variable
with var or now with let, if you want.

40
00:02:34.354 --> 00:02:41.036
And actually always, it's just a memory
space where you can store values.

41
00:02:41.036 --> 00:02:43.429
And you can actually change
the type of those values later.

42
00:02:44.560 --> 00:02:48.715
But here, we're not actually
creating something like that.

43
00:02:48.715 --> 00:02:55.870
If you look at VS Code,
if I hover my x variable, it says int x.

44
00:02:55.870 --> 00:03:02.400
So what var is doing is inferring the type
of my variable based on the value.

45
00:03:02.400 --> 00:03:07.584
And because I said equals to 1,
it knows it's an integer, okay?

46
00:03:07.584 --> 00:03:11.767
So then I cannot just
change like in JavaScript,

47
00:03:11.767 --> 00:03:16.200
this on a string,
it will give me an error, okay?

48
00:03:16.200 --> 00:03:21.033
Because I cannot change them with
a string because it's an integer, okay?

49
00:03:21.033 --> 00:03:25.674
So anyway, we're going to talk
about the types in a minute.

50
00:03:25.674 --> 00:03:27.804
In terms of conditionals, like if,

51
00:03:27.804 --> 00:03:32.769
whiles are pretty much the same as you're
used to in JavaScript and other languages.

52
00:03:32.769 --> 00:03:36.741
So we use parentheses for Booleans.

53
00:03:36.741 --> 00:03:39.940
Boolean, in this case, conditions.

54
00:03:39.940 --> 00:03:43.560
So if you look at that code, I think it's
pretty straightforward for most of you.

55
00:03:43.560 --> 00:03:46.670
Print will actually print to the console.

56
00:03:46.670 --> 00:03:50.790
Have in mind that on different platform,
the console means different things.

57
00:03:50.790 --> 00:03:54.414
Like on iOS and Android,
there is an output console, but

58
00:03:54.414 --> 00:03:56.464
it's not actually the screen.

59
00:03:56.464 --> 00:03:59.400
On the web,
the console is the browser's console.

60
00:03:59.400 --> 00:04:04.086
And if you're doing desktop applications,
well, the console is the output console.

61
00:04:04.086 --> 00:04:09.050
The term, you can see that in the output
console where you're running your app,

62
00:04:09.050 --> 00:04:12.701
okay, but the place is different
on different platforms.

63
00:04:12.701 --> 00:04:15.370
So as you can see here,
I have, what is this?

64
00:04:15.370 --> 00:04:20.655
So you can guess what it is
because it has parentheses.

65
00:04:20.655 --> 00:04:22.020
It's actually a function.

66
00:04:22.020 --> 00:04:23.660
Why do I have a function here?

67
00:04:23.660 --> 00:04:28.430
Because I cannot have global code,
like a global leaf.

68
00:04:29.670 --> 00:04:30.930
That's not possible in Dart.

69
00:04:30.930 --> 00:04:34.520
Everything must be in a class or
in a function.

70
00:04:34.520 --> 00:04:38.616
So that's why here, to actually show you
some code that will not giving us any

71
00:04:38.616 --> 00:04:41.420
errors, I need to put
that into a function.

72
00:04:41.420 --> 00:04:44.930
As you can see, by default,
there is no function keyword.

73
00:04:44.930 --> 00:04:46.746
So in JavaScript, it will be function.

74
00:04:46.746 --> 00:04:51.488
Well, we don't need the function keyword,
we just use the name,

75
00:04:51.488 --> 00:04:53.871
parentheses, and that's all.

76
00:04:53.871 --> 00:04:57.405
So playing with names, well,
actually we use guidelines,

77
00:04:57.405 --> 00:05:01.120
the same guidelines that
you're used to in JavaScript.

78
00:05:01.120 --> 00:05:03.165
So for example, variable names.

79
00:05:03.165 --> 00:05:07.693
Constant names, we will get into
that in a minute what's a constant.

80
00:05:07.693 --> 00:05:10.710
And function names, they use CamelCase.

81
00:05:10.710 --> 00:05:13.160
So we start with lowercase, and

82
00:05:13.160 --> 00:05:18.712
then we move up to CamelCase on our
letter such as the M in message, okay?

83
00:05:18.712 --> 00:05:21.139
Everything is public in the package.

84
00:05:21.139 --> 00:05:22.396
What's a package?

85
00:05:22.396 --> 00:05:27.292
In Dart, everything that we're doing
in a project is by default a package,

86
00:05:27.292 --> 00:05:29.748
and we can have more than one package.

87
00:05:29.748 --> 00:05:32.920
So a package actually is kind of a folder,
okay?

88
00:05:32.920 --> 00:05:35.383
And when you wanna use
something from other package,

89
00:05:35.383 --> 00:05:36.866
you need to import the package.

90
00:05:36.866 --> 00:05:40.696
This is similar to packages in Java or

91
00:05:40.696 --> 00:05:45.520
the namespaces in .NET, or even PHP, okay?

92
00:05:45.520 --> 00:05:49.106
So if you have used those languages,
you probably know the idea of a package or

93
00:05:49.106 --> 00:05:50.117
a namespace.

94
00:05:50.117 --> 00:05:55.207
It's just a way to group,
to contain different, let's say,

95
00:05:55.207 --> 00:06:01.559
objects that can be, for example,
classes or functions or global variable.

96
00:06:02.580 --> 00:06:05.221
So everything is public by default, but

97
00:06:05.221 --> 00:06:10.830
if you prefix your name with underscore,
it becomes private automatically.

98
00:06:10.830 --> 00:06:14.943
So from other packages,
even if you're importing the package,

99
00:06:14.943 --> 00:06:19.002
you cannot use or see that variable or
function or class, okay?

100
00:06:19.002 --> 00:06:22.766
So it does not use visibility prefixes,

101
00:06:22.766 --> 00:06:27.320
such as protected, private, or public.

102
00:06:27.320 --> 00:06:30.910
Everything is public,
unless it starts with underscore.

103
00:06:32.170 --> 00:06:36.594
In that case, it's a private property,
variable, function, or class.

104
00:06:38.369 --> 00:06:42.055
So data types such as
a class will use TitleCase.

105
00:06:42.055 --> 00:06:43.507
So we'll start with CamelCase.

106
00:06:43.507 --> 00:06:47.962
So this is, again, similar to Java,
to JavaScript, to many other languages.

107
00:06:47.962 --> 00:06:53.870
And for loops, we have the usual for,
we have the usual while.

108
00:06:53.870 --> 00:06:59.452
And also we have the for in that works
similarly to other languages like for

109
00:06:59.452 --> 00:07:03.550
of or for each,
depends on the language, okay?

110
00:07:03.550 --> 00:07:06.621
But here it's called for in.

111
00:07:06.621 --> 00:07:11.341
Be careful because in JavaScript, you also
have a for in, but it's not the same.

112
00:07:11.341 --> 00:07:15.004
In JavaScript, for
in will not loop through collections,

113
00:07:15.004 --> 00:07:17.726
it loop through properties of your object.

114
00:07:17.726 --> 00:07:22.050
In a collection,
every element is also a property.

115
00:07:22.050 --> 00:07:26.642
But anyway, you will also get into,
not just if you have

116
00:07:26.642 --> 00:07:31.258
an array of ten strings in JavaScript and
you use for if.

117
00:07:31.258 --> 00:07:34.770
You will get the ten elements and
also properties of the array,

118
00:07:34.770 --> 00:07:39.190
more properties that you can set,
that may not be strings, okay?

119
00:07:39.190 --> 00:07:45.220
So here, this is more like the for
each or for of of other languages.

