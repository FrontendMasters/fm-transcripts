WEBVTT

1
00:00:00.450 --> 00:00:01.160
Are we ready?

2
00:00:01.160 --> 00:00:05.230
Well, we are ready to download
the data and parse the data.

3
00:00:05.230 --> 00:00:07.360
We didn't do that yet, okay?

4
00:00:07.360 --> 00:00:11.922
So now,
we are getting into our companion website,

5
00:00:11.922 --> 00:00:16.394
into the latest chapter
that has to do with coding.

6
00:00:16.394 --> 00:00:19.040
Because the rest is the final compilation.

7
00:00:19.040 --> 00:00:22.270
So we already added the dependency,
we already did that.

8
00:00:22.270 --> 00:00:26.430
So we are in 5.2,
we're going to request data with futures.

9
00:00:26.430 --> 00:00:28.088
It's like, what is that?

10
00:00:28.088 --> 00:00:33.374
Well, first, Dart doesn't include

11
00:00:33.374 --> 00:00:40.318
an automatic way to map
JSON to objects of a class.

12
00:00:40.318 --> 00:00:43.795
So typically we do it manually, okay?

13
00:00:43.795 --> 00:00:44.712
So how is manually?

14
00:00:44.712 --> 00:00:47.085
First, what's the type of a JSON?

15
00:00:47.085 --> 00:00:51.570
A JSON will give you a map
of a string dynamic.

16
00:00:51.570 --> 00:00:56.100
So the key is a string, and
the value can be anything.

17
00:00:56.100 --> 00:01:00.191
Because it can be a number, it can be a
string, it can be an array that's a JSON,

18
00:01:00.191 --> 00:01:02.240
okay, makes sense?

19
00:01:02.240 --> 00:01:04.110
So this is what we're getting.

20
00:01:04.110 --> 00:01:09.590
So where we're going to do typically
is a factory constructor for

21
00:01:09.590 --> 00:01:12.491
the product and for the category.

22
00:01:12.491 --> 00:01:13.680
That is just making the map.

23
00:01:15.150 --> 00:01:20.970
So I'm taking from the JSON the id, and
I'm saving that in the id of the product.

24
00:01:20.970 --> 00:01:27.932
And as int, it's actually how
we cast here in Dart, yeah.

25
00:01:27.932 --> 00:01:32.354
&gt;&gt; Max, what happens if the data structure
came back with a null, like, for example,

26
00:01:32.354 --> 00:01:33.760
on price?

27
00:01:33.760 --> 00:01:39.009
&gt;&gt; So if the structure is not matching
this, as the code that is right now,

28
00:01:39.009 --> 00:01:42.170
will actually give you an a runtime error.

29
00:01:42.170 --> 00:01:45.940
So if that might happen, well, first,
you can wrap this in a try catch.

30
00:01:45.940 --> 00:01:47.910
We do have exceptions in Dart.

31
00:01:47.910 --> 00:01:51.062
So you can trap this in a try-catch and
then say, okay, it didn't work.

32
00:01:51.062 --> 00:01:52.480
We don't know why, but it didn't work.

33
00:01:52.480 --> 00:01:57.056
Or you can play with the map,
and before actually doing this,

34
00:01:57.056 --> 00:02:01.026
you can validate if the map
has the keys that you want.

35
00:02:01.026 --> 00:02:04.633
One by one,
you can do a manual validation.

36
00:02:04.633 --> 00:02:05.866
Okay, makes sense?

37
00:02:05.866 --> 00:02:10.135
&gt;&gt; But what if you did Map&lt;String,
Object&gt;?

38
00:02:10.135 --> 00:02:10.810
&gt;&gt; The same happens.

39
00:02:10.810 --> 00:02:13.970
So if the type is different
when you are casting,

40
00:02:13.970 --> 00:02:16.680
it will generate the runtime exception.

41
00:02:16.680 --> 00:02:19.311
So if the key is not there,
or if the key is there but

42
00:02:19.311 --> 00:02:22.402
of a different type,
you will get the runtime exception.

43
00:02:22.402 --> 00:02:24.710
And you can catch that
exception with try-catch.

44
00:02:24.710 --> 00:02:27.262
I think that's what we're going to do.

45
00:02:27.262 --> 00:02:31.595
That's a more general error handling,
or you can go first and

46
00:02:31.595 --> 00:02:33.520
validate your JSON first.

47
00:02:34.910 --> 00:02:36.500
Okay, makes sense?

48
00:02:36.500 --> 00:02:39.018
So this goes in the product class.

49
00:02:39.018 --> 00:02:45.079
I mean, we can type this, but
it's actually simple to get.

50
00:02:45.079 --> 00:02:47.427
Within the product, that's a constructor.

51
00:02:47.427 --> 00:02:51.912
We are going to add another
factory constructor,

52
00:02:51.912 --> 00:02:55.344
factory constructor that take this.

53
00:02:55.344 --> 00:03:00.839
Okay, like so, from a JSON, and
something similar for the category.

54
00:03:02.486 --> 00:03:04.797
Okay, so not really a big deal.

55
00:03:07.382 --> 00:03:11.887
It's just, Taking the the id and

56
00:03:11.887 --> 00:03:16.128
the products and
creating all the structure.

57
00:03:16.128 --> 00:03:19.280
Okay, so you get a JSON.

58
00:03:19.280 --> 00:03:23.378
And we are mapping property by property
that JSON with the right type or

59
00:03:23.378 --> 00:03:26.500
with the expected type
here directly in the code.

60
00:03:26.500 --> 00:03:28.020
Does it make sense?

61
00:03:28.020 --> 00:03:32.595
Of course, there are some frameworks and
libraries that are actually not

62
00:03:32.595 --> 00:03:37.261
part of Dart that can help you with
doing this with a more complex scenario.

63
00:03:37.261 --> 00:03:42.410
Also, if you have the URL of the JSON.

64
00:03:43.490 --> 00:03:46.060
Let's look at the JSON,
we haven't seen the JSON yet.

65
00:03:46.060 --> 00:03:52.523
It's firtman.github.io, you have
the URL to copy and paste in the here.

66
00:03:52.523 --> 00:03:55.710
If you go down a little bit,
it's here, that's the JSON, okay?

67
00:03:56.890 --> 00:04:01.830
So let's look at the JSON for
a second, so we can see a structure.

68
00:04:01.830 --> 00:04:04.320
So we have an array of categories.

69
00:04:04.320 --> 00:04:06.180
Each category has an array of products.

70
00:04:07.580 --> 00:04:08.420
That's kind of the idea.

71
00:04:09.480 --> 00:04:14.660
Okay, so if you have these, you can
actually go on Google JSON to Dart.

72
00:04:16.030 --> 00:04:20.651
And you will find some web
apps where you can actually

73
00:04:20.651 --> 00:04:24.129
generate Dart code, your Dart cloud.

74
00:04:24.129 --> 00:04:27.980
I need to create a class name like Testy,
whatever, or

75
00:04:27.980 --> 00:04:30.427
copy their code to the clipboard.

76
00:04:30.427 --> 00:04:32.970
For some reason,
I sure see that button is working.

77
00:04:34.950 --> 00:04:39.476
It says, I pasted the URL, and
not the JSON, sorry about that.

78
00:04:39.476 --> 00:04:40.900
View page source.

79
00:04:40.900 --> 00:04:43.570
This is the JSON, okay?

80
00:04:43.570 --> 00:04:47.323
So now we have the JSON.

81
00:04:47.323 --> 00:04:48.260
I'm not sure it's that one.

82
00:04:48.260 --> 00:04:50.050
Generate Dart, there we are.

83
00:04:50.050 --> 00:04:52.750
And this is creating the code for you.

84
00:04:52.750 --> 00:04:58.504
Actually, it's creating the same fromJson
factory method that we have just seen.

85
00:04:58.504 --> 00:05:03.137
So when you have a very complex structure,
typically,

86
00:05:03.137 --> 00:05:07.967
you have one of these tools
to generate rapidly, or fast,

87
00:05:07.967 --> 00:05:11.628
the factory methods, okay, makes sense?

88
00:05:11.628 --> 00:05:19.160
So, good, so the next step, is to now
go to the network and fetch the data.

89
00:05:19.160 --> 00:05:22.130
So for that,
I'm going back to the DataManager.

90
00:05:22.130 --> 00:05:26.243
And I'm going to create two functions,
first a function called fetchMenu,

91
00:05:26.243 --> 00:05:28.279
that will actually go to the network.

92
00:05:28.279 --> 00:05:30.549
And the other one is only
just going to be a getter.

93
00:05:30.549 --> 00:05:38.060
Okay, so, getMenu,
that will do something like this.

94
00:05:38.060 --> 00:05:42.413
If the menu is null,
is because we don't have it,

95
00:05:42.413 --> 00:05:46.620
we are going to fetch the menu, okay?

96
00:05:46.620 --> 00:05:51.864
And then after fetching, we're going
to return the menu, make sense?

97
00:05:51.864 --> 00:05:54.580
It's a getter, it's like a lazy getter.

98
00:05:54.580 --> 00:05:57.610
There are other ways to do a lazy getter.

99
00:05:57.610 --> 00:06:02.300
But I'm trying to do it so we can
actually understand what's going on.

100
00:06:02.300 --> 00:06:07.410
So we're going to do, what's
the type that we're going to return?

101
00:06:08.590 --> 00:06:10.800
Are we going to return a menu?

102
00:06:10.800 --> 00:06:12.470
A menu is actually a list of Category.

103
00:06:14.060 --> 00:06:18.195
We have a problem, the problem is that
going to the network, and you know that if

104
00:06:18.195 --> 00:06:22.040
you're a developer, a frontend developer,
it's an async operation.

105
00:06:23.360 --> 00:06:26.450
So I can't just return the menu
because I need to go to the network.

106
00:06:27.800 --> 00:06:32.270
So Dart supports async
programing with futures.

107
00:06:33.480 --> 00:06:36.462
A future is something very
similar to a promise.

108
00:06:36.462 --> 00:06:41.120
So if you're used to promises in
JavaScript, it's actually pretty similar.

109
00:06:41.120 --> 00:06:43.973
So instead of returning
a list of categories,

110
00:06:43.973 --> 00:06:47.490
we are going to return
a future list of Category.

111
00:06:47.490 --> 00:06:50.330
Think about promise, okay?

112
00:06:50.330 --> 00:06:56.560
So it's a promise of a list of categories,
it's a future in this case, okay?

113
00:06:56.560 --> 00:07:02.068
That's what we're going to say here,
does it make sense?

114
00:07:02.068 --> 00:07:05.305
But now,
if you're going to return a future,

115
00:07:05.305 --> 00:07:08.381
our function must be annotated with async.

116
00:07:10.866 --> 00:07:14.382
And fetchMenu we need to await.

117
00:07:14.382 --> 00:07:20.220
So we have async await as we are used to,
okay, on other platforms.

118
00:07:21.580 --> 00:07:22.840
Okay, makes sense?

119
00:07:22.840 --> 00:07:28.910
So it's a similar way,
that we have on other platforms.

120
00:07:28.910 --> 00:07:31.790
So we will solve that problem in a minute.

121
00:07:31.790 --> 00:07:38.016
So fetchMenu needs to go to the network,
okay?

122
00:07:38.016 --> 00:07:44.239
So we're going to now create
a constant for the URL.

123
00:07:44.239 --> 00:07:47.327
Let me take the URL from here,
from the JSON.

124
00:07:49.884 --> 00:07:55.753
I will need to use the HTTP API that
we've seen before, okay, that we added.

125
00:07:55.753 --> 00:08:00.505
And for that, we say response is equal to,

126
00:08:00.505 --> 00:08:04.603
we are going to await for http.get.

127
00:08:04.603 --> 00:08:09.587
And we're going to create a Uri object

128
00:08:09.587 --> 00:08:14.130
from that url string, okay?

129
00:08:14.130 --> 00:08:19.483
So await, it says hey, if you wanna await,

130
00:08:19.483 --> 00:08:24.250
you need to be in a async function.

131
00:08:24.250 --> 00:08:27.730
The http package needs to be imported,
actually.

132
00:08:27.730 --> 00:08:33.771
So to import the package, if the ID is not
helping you to automatically import that,

133
00:08:33.771 --> 00:08:37.102
the package is package:http/http.dart.

134
00:08:37.102 --> 00:08:40.670
And I'm actually renaming that as http.

135
00:08:40.670 --> 00:08:43.110
So you can actually use any name here.

136
00:08:43.110 --> 00:08:47.610
And then, of course,
you need to use that name down, okay?

137
00:08:47.610 --> 00:08:49.408
So when you have the response,

138
00:08:49.408 --> 00:08:52.560
you can just take directly
the body of the response.

139
00:08:52.560 --> 00:08:54.580
But the problem is that we are doing http.

140
00:08:55.580 --> 00:09:01.062
We know that sometimes the server is
giving us errors, 400, 404, okay?

141
00:09:01.062 --> 00:09:08.586
So typically you wanna check if
the response status code is 200.

142
00:09:08.586 --> 00:09:16.712
And if it's 200, what we need to do
is to try to decode our content.

143
00:09:16.712 --> 00:09:17.962
Okay, does it make sense?

144
00:09:17.962 --> 00:09:23.915
So we can take, for example,
response.body will give me the body.

145
00:09:23.915 --> 00:09:24.637
What's the body?

146
00:09:24.637 --> 00:09:30.325
The contents of the HTTP response,
the string of the JSON, makes sense?

147
00:09:30.325 --> 00:09:35.128
So now,
what I need is to decode that data.

148
00:09:35.128 --> 00:09:39.187
And for that we have a JSON decoder,
so we don't need to do it manually,

149
00:09:39.187 --> 00:09:41.470
the manually string parsing.

150
00:09:41.470 --> 00:09:45.304
jsonDecode will actually take that body,
and

151
00:09:45.304 --> 00:09:48.758
we need to specify what are we expecting.

152
00:09:48.758 --> 00:09:52.877
jsonDecoder needs to be imported,

153
00:09:52.877 --> 00:09:57.005
let's finish this, so like that.

154
00:09:57.005 --> 00:10:00.881
I think my imports
are kind of crazy today.

155
00:10:00.881 --> 00:10:08.470
Anyway, so we need to import the body, and
we just specify what are we expecting.

156
00:10:08.470 --> 00:10:15.910
And this JSON, if we look back to
the JSON, it start with an array.

157
00:10:15.910 --> 00:10:17.870
A list, it's not an object.

158
00:10:17.870 --> 00:10:19.340
Okay, the root element.

159
00:10:19.340 --> 00:10:22.410
So that's why we're going to
say it's a list, of what?

160
00:10:22.410 --> 00:10:25.758
Of whatever, that says list of dynamic.

161
00:10:25.758 --> 00:10:29.397
Okay, so that is that problem.

162
00:10:29.397 --> 00:10:33.028
And here I have a typo,
because it's jsonDecode,

163
00:10:33.028 --> 00:10:36.918
not jsonDecoder, and now,
I can import the library.

164
00:10:36.918 --> 00:10:39.365
So what to do with that data?

165
00:10:39.365 --> 00:10:42.312
So I have the list now,

166
00:10:42.312 --> 00:10:48.371
I need to actually start
create an empty menu.

167
00:10:48.371 --> 00:10:55.615
And start looping through all
the decoded data objects.

168
00:10:56.880 --> 00:11:02.651
And within that menu,
I'm going to add what?

169
00:11:02.651 --> 00:11:05.405
A new category from a JSON.

170
00:11:07.927 --> 00:11:08.840
Makes sense?

171
00:11:08.840 --> 00:11:13.180
I have an error here, because it says hey,
the menu can't be null.

172
00:11:13.180 --> 00:11:17.610
So you cannot call el,
remember how to solve the problem?

173
00:11:17.610 --> 00:11:22.070
I know it's not null because I
have just created one, okay?

174
00:11:22.070 --> 00:11:22.731
Sorry, what?

175
00:11:22.731 --> 00:11:27.644
&gt;&gt; The bang, non-null [INAUDIBLE]
&gt;&gt; It's a non-null, we can use that,

176
00:11:27.644 --> 00:11:29.298
or we can also use the safe operator.

177
00:11:29.298 --> 00:11:33.182
The safe operator if it's null, so
the question mark, if it's null,

178
00:11:33.182 --> 00:11:35.138
we need to ignore the declaration.

179
00:11:35.138 --> 00:11:39.771
Both in this case will kind of work, okay?

180
00:11:39.771 --> 00:11:41.290
And that will make the trick.

181
00:11:41.290 --> 00:11:43.710
What happens if the JSON is not valid?

182
00:11:43.710 --> 00:11:45.410
If it's not JSON?

183
00:11:45.410 --> 00:11:48.770
What happens if the keys I'm
expecting are not there?

184
00:11:48.770 --> 00:11:51.106
Well, we can put this in a try-catch.

185
00:11:51.106 --> 00:11:53.050
Okay, that's a possibility.

