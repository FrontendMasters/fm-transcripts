WEBVTT

1
00:00:00.000 --> 00:00:04.745
In terms of variables and types, so how to
declare a variable, there are two ways.

2
00:00:04.745 --> 00:00:09.346
If you know the type or
if you wanna explicitly use the type,

3
00:00:09.346 --> 00:00:11.934
you use the type name as a prefix.

4
00:00:11.934 --> 00:00:17.462
So you say int data,
similar to C, or Java.

5
00:00:17.462 --> 00:00:20.184
Okay, you start with a type and
then the name.

6
00:00:20.184 --> 00:00:23.151
But something that we have
here is type inference.

7
00:00:23.151 --> 00:00:26.847
Type inference means
that if you don't wanna

8
00:00:26.847 --> 00:00:31.722
define the type every time you
can use bar as in JavaScript.

9
00:00:31.722 --> 00:00:36.870
But in this case bar needs something
that we are assigning at that time.

10
00:00:36.870 --> 00:00:41.007
If I create a variable without a type,

11
00:00:41.007 --> 00:00:45.287
it becomes something of type dynamic.

12
00:00:45.287 --> 00:00:49.346
That is actually pretty flexible, dynamic
is like the default type in JavaScript,

13
00:00:49.346 --> 00:00:51.929
everything in JavaScript
is kind of dynamic, okay?

14
00:00:51.929 --> 00:00:54.608
It can be anything actually.

15
00:00:54.608 --> 00:00:59.171
So it's a bad practice in that
to create variables dynamic

16
00:00:59.171 --> 00:01:03.651
unless you have a real use case for
using dynamic, okay?

17
00:01:03.651 --> 00:01:07.357
So when you use bar be careful
to actually assign the value.

18
00:01:07.357 --> 00:01:09.842
And if not, don't use bar and

19
00:01:09.842 --> 00:01:14.922
use explicitly the type that
you wanna use on that variable.

20
00:01:14.922 --> 00:01:18.800
Okay, so you need to get used
to these differences if you're

21
00:01:18.800 --> 00:01:21.243
coming from things like JavaScript.

22
00:01:21.243 --> 00:01:26.217
These are mutable variables, so
everything you set a with the type or

23
00:01:26.217 --> 00:01:29.326
the bar keyword it's a mutable variable.

24
00:01:29.326 --> 00:01:31.722
Then we have immutable variables.

25
00:01:31.722 --> 00:01:37.337
In this case instead of bar, we use
final or we apply final to the type.

26
00:01:37.337 --> 00:01:45.145
And final is a variable that cannot be
changed after it's set for the first time.

27
00:01:45.145 --> 00:01:47.931
That's an immutable variable,
okay, make sense?

28
00:01:47.931 --> 00:01:51.814
Fine, and then we have constants that
are using the const keyword, and

29
00:01:51.814 --> 00:01:54.089
we are going to use
const a lot in flutter.

30
00:01:54.089 --> 00:01:58.409
You will see that it's kind of annoying
at one point, asking us to use const.

31
00:01:58.409 --> 00:02:02.192
So, in JavaScript, we do have const, okay?

32
00:02:02.192 --> 00:02:07.770
But what do you think, question for
you, are they constants or

33
00:02:07.770 --> 00:02:13.783
immutable variables in JavaScript
when you use the const keyword?

34
00:02:13.783 --> 00:02:18.648
It sounds weird because
const seems constant, right?

35
00:02:18.648 --> 00:02:23.850
That actually they are more
like immutable variables.

36
00:02:23.850 --> 00:02:29.261
So first, what's the difference between
an immutable variable and a constant?

37
00:02:29.261 --> 00:02:31.804
Does anyone know?

38
00:02:31.804 --> 00:02:35.320
&gt;&gt; From a JavaScript side or from-
&gt;&gt; On any sides like a generic

39
00:02:35.320 --> 00:02:36.630
programming.

40
00:02:36.630 --> 00:02:40.952
Typically we have a difference between
an immutable variable and a constant.

41
00:02:40.952 --> 00:02:43.954
&gt;&gt; Const would be at compile time so
it's set and

42
00:02:43.954 --> 00:02:47.675
it's more performant because
it's already defined.

43
00:02:47.675 --> 00:02:52.255
&gt;&gt; Exactly, so the constant is
actually something that we define and

44
00:02:52.255 --> 00:02:54.228
we set at compilation time.

45
00:02:54.228 --> 00:02:59.287
In JavaScript, we don't have compilation
time so that's why technically

46
00:02:59.287 --> 00:03:03.724
we kind of not using that idea,
because we don't compile, okay?

47
00:03:03.724 --> 00:03:08.048
An immutable variable,
it's actually a variable, so

48
00:03:08.048 --> 00:03:12.832
it's actually a place in memory
while our app is running, but

49
00:03:12.832 --> 00:03:15.962
after it was set, it cannot be changed.

50
00:03:15.962 --> 00:03:20.481
But I don't need to have a value at
compile time for immutable variable,

51
00:03:20.481 --> 00:03:22.121
that's the difference.

52
00:03:22.121 --> 00:03:26.851
And for the constant, I actually need
to have a value at compile time,

53
00:03:26.851 --> 00:03:28.224
okay, make sense?

54
00:03:28.224 --> 00:03:32.865
Types, here,
we have a mix between using lowercase and

55
00:03:32.865 --> 00:03:36.432
uppercase, but everything is an object.

56
00:03:36.432 --> 00:03:40.499
So don't get confused here
with languages like Java, for

57
00:03:40.499 --> 00:03:45.485
example in Java, you have int and
you also have integer with capital I.

58
00:03:45.485 --> 00:03:47.144
This is Java, okay?

59
00:03:47.144 --> 00:03:51.644
And this is a basic data type and
this is an object, but

60
00:03:51.644 --> 00:03:57.144
actually here int is an object,
everything is an object in Dart.

61
00:03:57.144 --> 00:04:01.709
And we have some basic type with
lowercase, they use lowercase,

62
00:04:01.709 --> 00:04:05.444
because they say that when
you're coming from Java or

63
00:04:05.444 --> 00:04:09.264
from C, you're more used to
use int with lowercase i.

64
00:04:09.264 --> 00:04:13.237
So we have int, double, bool,
dynamic, that's anything.

65
00:04:13.237 --> 00:04:15.640
And we also have num, say num,

66
00:04:15.640 --> 00:04:21.111
that's a number that you don't
define the type of the number, okay?

67
00:04:21.111 --> 00:04:24.472
Actually this has to do with ROP,

68
00:04:24.472 --> 00:04:29.401
double and int,
they're inheriting from num.

69
00:04:29.401 --> 00:04:35.155
So it's like a generic version,
okay, of a number.

70
00:04:35.155 --> 00:04:39.056
And remember what happens
when we export to JavaScript,

71
00:04:39.056 --> 00:04:42.479
the JavaScript runtime
takes precedence there.

72
00:04:42.479 --> 00:04:44.783
So that means that a number, in fact,

73
00:04:44.783 --> 00:04:48.317
I'm not sure if you know
the type of number in JavaScript.

74
00:04:48.317 --> 00:04:51.307
I mean, if you use typeof of four,

75
00:04:51.307 --> 00:04:56.269
what you get in return number,
okay, so it's a number.

76
00:04:56.269 --> 00:05:03.459
So that num kind of reference the number
type in the JavaScript runtime, okay?

77
00:05:03.459 --> 00:05:08.465
Strings, you can use double quotes or
single quotes, okay,

78
00:05:08.465 --> 00:05:14.545
both are working and as in JavaScript and
they're doing exactly the same.

79
00:05:14.545 --> 00:05:19.236
You will see that today,
most of the design guidelines for

80
00:05:19.236 --> 00:05:23.258
Flutter are actually
suggesting double quotes,

81
00:05:23.258 --> 00:05:26.908
just to pick one, okay,
the same as in HTML.

82
00:05:26.908 --> 00:05:30.350
So in HTML you can use single
quotes today if you want to,

83
00:05:30.350 --> 00:05:34.835
but it's kind of typical to see HTML
with single quotes for attributes.

84
00:05:34.835 --> 00:05:38.859
Well same here, you can create multiline,

85
00:05:38.859 --> 00:05:43.222
literal strings with triple,
double quotes.

86
00:05:43.222 --> 00:05:48.370
So if I have a long description,
you can use triple,

87
00:05:48.370 --> 00:05:52.933
double quotes and
then you end up somewhere and

88
00:05:52.933 --> 00:05:56.796
then everything is part of the string.

89
00:05:56.796 --> 00:06:01.023
This is similar to other
languages such as Kotlin or Swift,

90
00:06:01.023 --> 00:06:04.073
they have the same multiline experience.

91
00:06:04.073 --> 00:06:08.072
It's similar to
the backtick in JavaScript,

92
00:06:08.072 --> 00:06:11.359
when you open the backtick of string.

93
00:06:11.359 --> 00:06:16.709
And also within the string,
one line or multiline string,

94
00:06:16.709 --> 00:06:20.882
you can use the dollar
sign to actually replace

95
00:06:20.882 --> 00:06:25.272
templates with variables or
with expressions.

96
00:06:25.272 --> 00:06:29.664
So for example,
if I have the price here, it will say,

97
00:06:29.664 --> 00:06:32.445
the price is something like this.

98
00:06:34.548 --> 00:06:39.147
For example, so in this case,
this is going to say the price is 3 and

99
00:06:39.147 --> 00:06:42.700
it will then multiply
the other price by 1.1, and

100
00:06:42.700 --> 00:06:46.847
it will convert the result of
that expression into a string.

101
00:06:46.847 --> 00:06:52.111
Okay, so to the backtick or
the template string in JavaScript,

102
00:06:52.111 --> 00:06:55.231
that's actually the name of that, yeah.

103
00:06:55.231 --> 00:06:58.324
&gt;&gt; So
type keywords are capitalized like string?

104
00:06:58.324 --> 00:07:03.730
&gt;&gt; So the answer is not always,
because int is not with capital i,

105
00:07:03.730 --> 00:07:06.291
double is not with capital i.

106
00:07:06.291 --> 00:07:11.118
Let's say, and again,
I know what you're thinking,

107
00:07:11.118 --> 00:07:14.157
that's because it's not an object.

108
00:07:14.157 --> 00:07:19.742
No, that's not true, it's an object,
everything is an object in Dart.

109
00:07:19.742 --> 00:07:24.302
But they made the choice when
they created the language to

110
00:07:24.302 --> 00:07:28.872
use lowercase on the basic types,
integers, doubles.

111
00:07:28.872 --> 00:07:30.824
And why not the string?

112
00:07:30.824 --> 00:07:35.807
Because in Java, the string is a class and
its capital S, so

113
00:07:35.807 --> 00:07:40.210
they tend to try to bring
Java developers into Dart.

114
00:07:40.210 --> 00:07:42.426
So that's why a string is capital S.

115
00:07:42.426 --> 00:07:45.247
If you're creating your own types,

116
00:07:45.247 --> 00:07:49.532
the guideline is to start
with capital letters, okay?

117
00:07:49.532 --> 00:07:54.244
But let's say that you will
see lowercase types only on

118
00:07:54.244 --> 00:07:58.752
these basic ones, bool,
dabble, int, dynamic,

119
00:07:58.752 --> 00:08:03.476
boid as well, we haven't seen it yet
and that's all.

120
00:08:03.476 --> 00:08:08.444
For the other types,
they will be title case, so capitalized,

121
00:08:08.444 --> 00:08:12.222
but have in mind everything
is an object anyway.

122
00:08:12.222 --> 00:08:16.220
&gt;&gt; Now when you see a simple objects,
they're still full objects?

123
00:08:16.220 --> 00:08:20.178
&gt;&gt; They are still objects,
full objects, so an int is an object,

124
00:08:20.178 --> 00:08:22.881
it's an object, there is a class behind.

125
00:08:22.881 --> 00:08:26.781
It's actually an object so
that integer value has methods and

126
00:08:26.781 --> 00:08:29.033
properties like any other object.

127
00:08:29.033 --> 00:08:34.281
It's based on a class, it's not
like an int in C or an int in Java,

128
00:08:34.281 --> 00:08:39.737
where it's not actually an object,
here everything is an object.

129
00:08:39.737 --> 00:08:44.130
You can actually even get
inside how Ctrl+click, or

130
00:08:44.130 --> 00:08:48.726
Cmd+click on a Mac,
you can actually get into the int.

131
00:08:48.726 --> 00:08:55.847
And you can see it's a class extending
from num, from number, so it's a class.

132
00:08:55.847 --> 00:08:59.223
Because it's a class,
it can contain methods constructors,

133
00:08:59.223 --> 00:09:01.144
and everything that we know on OOP.

