WEBVTT

1
00:00:00.380 --> 00:00:01.701
Is void in object?

2
00:00:01.701 --> 00:00:03.100
&gt;&gt; Void is a data type.

3
00:00:03.100 --> 00:00:04.940
So data types are not objects.

4
00:00:04.940 --> 00:00:11.230
So it's not an option, but
you can't have a variable of type void.

5
00:00:11.230 --> 00:00:14.235
And so
you cannot have a value of type void.

6
00:00:14.235 --> 00:00:20.309
So you can have void objects, but void by
itself is a type types are not objects,

7
00:00:20.309 --> 00:00:22.990
at least not the normal objects.

8
00:00:22.990 --> 00:00:26.194
So Int is not an object,
you can have objects of type Int, okay?

9
00:00:26.194 --> 00:00:27.990
Makes sense.

10
00:00:27.990 --> 00:00:33.558
&gt;&gt; What does it mean when there are square
back brackets in the parameter list?

11
00:00:33.558 --> 00:00:37.693
&gt;&gt; I'm not sure if we have
one of those examples, but

12
00:00:37.693 --> 00:00:40.942
typically if you have a function call,

13
00:00:40.942 --> 00:00:45.775
and you have square brackets,
typically that's a list.

14
00:00:45.775 --> 00:00:47.830
So you're passing a list as an argument.

15
00:00:49.630 --> 00:00:54.002
Again, it depends on the case here
we'll see a couple of these cases later

16
00:00:54.002 --> 00:00:58.604
in flutter, where some arguments will
need a list but here as in JavaScript.

17
00:00:58.604 --> 00:01:02.747
When you see a square brackets
you're looking at a list,

18
00:01:02.747 --> 00:01:05.650
so arrays, collections of data.

19
00:01:05.650 --> 00:01:09.513
If you have a function returning a list,
the type goes first.

20
00:01:09.513 --> 00:01:15.720
And it goes like this list, and then you
use angle brackets, not square bracket.

21
00:01:15.720 --> 00:01:20.060
So if you wanna list of
integers that creates a great,

22
00:01:20.060 --> 00:01:25.373
at least it will be like this and
your return something like this.

23
00:01:27.478 --> 00:01:31.811
There, I'm not sure if you understand
where that sample is coming from.

24
00:01:33.220 --> 00:01:37.348
&gt;&gt; Yeah, he said it's code that
he was reading elsewhere and

25
00:01:37.348 --> 00:01:42.068
in the function signature,
the parameters had string, string,

26
00:01:42.068 --> 00:01:46.638
string, and then bracket,
string question mark or whatever.

27
00:01:46.638 --> 00:01:49.478
&gt;&gt; Well, yeah,
probably I have to see the code and

28
00:01:49.478 --> 00:01:54.980
try to think exactly what's going on, but
because it can be many things, actually.

29
00:01:54.980 --> 00:01:56.686
Yeah, we'll have to see the code.

30
00:01:56.686 --> 00:02:01.368
But anyway,
every time you see this is typically we're

31
00:02:01.368 --> 00:02:06.653
talking about lists,
maybe it can be a default value of a list.

32
00:02:06.653 --> 00:02:07.420
I don't know.

33
00:02:07.420 --> 00:02:08.927
It can be many things, all right?

34
00:02:10.926 --> 00:02:15.832
But have in mind that you don't have
anything after the function name,

35
00:02:15.832 --> 00:02:16.660
all right?

36
00:02:16.660 --> 00:02:19.834
So like this, so here it goes first,
like in copying or

37
00:02:19.834 --> 00:02:22.663
Swift, you define the type after,
here it's.

38
00:02:22.663 --> 00:02:25.460
&gt;&gt; What are function parameters?

39
00:02:25.460 --> 00:02:30.354
So in create list you
would go like string name.

40
00:02:30.354 --> 00:02:36.080
&gt;&gt; We weren't doing this, but
was not angled it just curly braces, okay?

41
00:02:37.160 --> 00:02:44.542
&gt;&gt; Yeah, not curly braces, so it just be
like a string name not what the brackets.

42
00:02:47.330 --> 00:02:49.052
&gt;&gt; You're talking about this,
something like this.

43
00:02:50.350 --> 00:02:51.414
&gt;&gt; And then, yeah.

44
00:02:52.840 --> 00:02:55.328
&gt;&gt; This is where you're
saying something like this.

45
00:02:55.328 --> 00:02:57.920
&gt;&gt; Yes string and
then there was a question mark.

46
00:02:57.920 --> 00:03:05.195
&gt;&gt; Yeah, this is making it like optional.

47
00:03:05.195 --> 00:03:08.620
Actually, we're not going
to use this in flutter.

48
00:03:08.620 --> 00:03:11.343
So flutter doesn't use this pattern, okay?

49
00:03:11.343 --> 00:03:14.032
Have you seen, now I understand
what [LAUGH] what was the idea.

50
00:03:14.032 --> 00:03:19.370
So actually you can make this
with positional arguments.

51
00:03:19.370 --> 00:03:21.795
So also like this.

52
00:03:21.795 --> 00:03:24.050
&gt;&gt; Exactly,
that's how it was working, yep.

53
00:03:24.050 --> 00:03:25.156
&gt;&gt; Like that to be it.

54
00:03:25.156 --> 00:03:26.020
That's how it works.

55
00:03:26.020 --> 00:03:30.626
But most of the time,
you're going to mix this between, so

56
00:03:30.626 --> 00:03:36.261
the premise that everything you put
there must have the same signature.

57
00:03:36.261 --> 00:03:41.230
And most of the time, what we want is to
use curly braces because typically you

58
00:03:41.230 --> 00:03:46.340
have many arguments, some of them
mandatory, some of them optional.

59
00:03:46.340 --> 00:03:48.469
So for example, in this case I'm making.

60
00:03:50.305 --> 00:03:55.999
A name require and then for example,
you can have an optional age or

61
00:03:55.999 --> 00:03:59.570
something like that and for this, okay?

62
00:03:59.570 --> 00:04:04.347
We have to use some
kind of the map Syntax.

63
00:04:04.347 --> 00:04:06.160
There is actually curly braces.

64
00:04:06.160 --> 00:04:11.290
So we can actually mix
requires with optionals.

65
00:04:11.290 --> 00:04:13.595
So do have any question on the chat?

66
00:04:16.105 --> 00:04:19.795
&gt;&gt; You said, okay, so like required
arguments with optional named arguments.

67
00:04:19.795 --> 00:04:22.525
&gt;&gt; Yeah, we're not going to
use that in flutter actually.

68
00:04:22.525 --> 00:04:27.297
So there are many other things in that as
the language that are typically useful for

69
00:04:27.297 --> 00:04:29.522
backend development, for example.

70
00:04:29.522 --> 00:04:33.886
But the flutter SDK is not using
because of several reasons, so

71
00:04:33.886 --> 00:04:38.823
I tried to stay here today in the parts
of the language that you will use in

72
00:04:38.823 --> 00:04:40.850
a flutter application.

73
00:04:40.850 --> 00:04:44.532
But there are more things like mixing and

74
00:04:44.532 --> 00:04:50.386
other stuff that you can get
into the dart website, dart.dev.

75
00:04:50.386 --> 00:04:54.846
That's a website used to be.lang.org,
but now because we have the Dart dev,

76
00:04:54.846 --> 00:04:57.120
top-level domain, it's Dart or Dev.

77
00:04:58.210 --> 00:05:04.832
There is a nice step by step, playground
based, let's say documentation there so

78
00:05:04.832 --> 00:05:08.913
we can go step by step with
everything within that.

79
00:05:08.913 --> 00:05:15.611
&gt;&gt; And then in arguments they cannot be
renamed like named in the other language.

80
00:05:15.611 --> 00:05:17.560
&gt;&gt; They're part of the signature.

81
00:05:17.560 --> 00:05:20.438
Okay, so you cannot rename them so
I know what you're.

82
00:05:20.438 --> 00:05:21.270
&gt;&gt; Because we did it like fun.

83
00:05:22.510 --> 00:05:24.133
&gt;&gt; So what you're asking if?

84
00:05:24.133 --> 00:05:25.218
Okay, I got you.
&gt;&gt; If we have another name

85
00:05:25.218 --> 00:05:25.809
for the outside?

86
00:05:25.809 --> 00:05:28.511
&gt;&gt; So you wanna use a different name?

87
00:05:28.511 --> 00:05:29.573
&gt;&gt; For the outside.
&gt;&gt; For the argument and

88
00:05:29.573 --> 00:05:31.315
a different name for the local variable.

89
00:05:31.315 --> 00:05:32.650
Yeah, no like in Swift.

90
00:05:32.650 --> 00:05:33.946
&gt;&gt; Yeah, in swifts though.
&gt;&gt; No.

91
00:05:33.946 --> 00:05:34.503
&gt;&gt; Just check.

92
00:05:34.503 --> 00:05:35.643
Just asking.
&gt;&gt; No way to go up here.

93
00:05:35.643 --> 00:05:36.754
&gt;&gt; [LAUGH] Okay.

