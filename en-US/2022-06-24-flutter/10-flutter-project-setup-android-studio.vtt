WEBVTT

1
00:00:00.100 --> 00:00:01.681
Let's create a project.

2
00:00:01.681 --> 00:00:04.440
We have more slides to see later.

3
00:00:04.440 --> 00:00:08.613
So again,
let me start with Android Studio and

4
00:00:08.613 --> 00:00:13.010
I will finally use VS Code for
the rest of the day.

5
00:00:13.010 --> 00:00:17.350
So I will show how to create the project
in both platforms, in both IDs.

6
00:00:17.350 --> 00:00:21.399
So I will create one in Android Studio and
then one in VS Code.

7
00:00:21.399 --> 00:00:23.033
You pick the ID you want.

8
00:00:23.033 --> 00:00:26.476
In Android Studio if you
have installed the plug in,

9
00:00:26.476 --> 00:00:29.617
you can create a new
Flutter project from here.

10
00:00:29.617 --> 00:00:33.730
The Flutter project will
ask you first the SDK path.

11
00:00:33.730 --> 00:00:37.930
Remember, the SDK is a big C file that
you have downloaded in the morning.

12
00:00:39.680 --> 00:00:43.905
And if everything works,
it will ask me for a project name.

13
00:00:43.905 --> 00:00:48.344
It's not going to be my final project
because I will use VS Code for that, so

14
00:00:48.344 --> 00:00:50.399
we'll reach out to FlutterDemo.

15
00:00:50.399 --> 00:00:53.850
Well, Description, Project Type,
yeah, we wanna create an application.

16
00:00:53.850 --> 00:00:57.410
Organisation, this is asking for
a package name.

17
00:00:57.410 --> 00:01:02.084
Actually, when you're publishing
apps In App Stores these days,

18
00:01:02.084 --> 00:01:05.450
you have to define a Package ID or
a Package Name.

19
00:01:05.450 --> 00:01:11.740
That's a string that is mandatory on every
app and it's going to be the primary key

20
00:01:11.740 --> 00:01:18.050
that will uniquely identify your app in
the operating system and in the App Store.

21
00:01:18.050 --> 00:01:23.491
And how can we guarantee you,
how can we have better probability

22
00:01:23.491 --> 00:01:28.650
of not making conflicts with
other developers in the world?

23
00:01:28.650 --> 00:01:31.370
How can we guarantee that we
are not using the same name?

24
00:01:31.370 --> 00:01:37.670
We use the website of our company or
our own website in reverse order.

25
00:01:37.670 --> 00:01:42.206
So actually Frontend Masters,
I can do something like this, or

26
00:01:42.206 --> 00:01:44.810
in my case, I can use my own website.

27
00:01:44.810 --> 00:01:49.887
And the idea is that no one else is
owning the same name in the world,

28
00:01:49.887 --> 00:01:53.526
so technically,
no one can actually use that.

29
00:01:53.526 --> 00:01:56.392
And then it will attach to
that the name of your project.

30
00:01:56.392 --> 00:02:00.194
So the final package name
will be com.frontendmasters,

31
00:02:00.194 --> 00:02:03.150
I cannot say workshops
something like that.

32
00:02:03.150 --> 00:02:07.438
I mean it doesn't need the DNS, it
doesn't need to exist to make that work,

33
00:02:07.438 --> 00:02:08.652
it's just a string.

34
00:02:08.652 --> 00:02:14.592
So the final name will be
comfrontendmastersworship.flutterdemo, and

35
00:02:14.592 --> 00:02:20.445
that will be must be unique in your
operating system and within the store.

36
00:02:20.445 --> 00:02:25.254
So you will pick the Android language that
you want the project to be created because

37
00:02:25.254 --> 00:02:27.727
actually it doesn't mentioned this, but

38
00:02:27.727 --> 00:02:31.436
when you create a Flutter application and
you want to compile for

39
00:02:31.436 --> 00:02:35.024
Android, it creates an Android Studio
project internally.

40
00:02:35.024 --> 00:02:39.271
So it's asking you for that project,
do you want to use Java or Kotlin?

41
00:02:39.271 --> 00:02:44.071
Kotlin is the modern Android version,
so typically we select Kotlin and for

42
00:02:44.071 --> 00:02:47.814
iOS, By the way, you wont see iOS if
you're on a Mac on the Windows or Linux,

43
00:02:47.814 --> 00:02:50.530
if you're on a Mac, you will see iOS.

44
00:02:50.530 --> 00:02:52.015
I can pick Objective-C or Swift.

45
00:02:52.015 --> 00:02:56.220
Again, this is internal code in
case you need to get later and

46
00:02:56.220 --> 00:03:00.761
add more stuff, that typically is
not needed for the first demo.

47
00:03:00.761 --> 00:03:04.093
I'm going pick Swift as well.

48
00:03:04.093 --> 00:03:06.698
I can send it here if I
want the web as well.

49
00:03:06.698 --> 00:03:11.474
And Linux, Macros and Windows need another
plugin, so that's why it's disabled by

50
00:03:11.474 --> 00:03:15.939
default, but you can add more platforms
from the common line interface later.

51
00:03:15.939 --> 00:03:22.363
So if you pick web,
it's going to target also the web, okay?

52
00:03:22.363 --> 00:03:27.433
Great project offline will actually
download everything and make you compile

53
00:03:27.433 --> 00:03:32.513
and do everything offline because it's
not you will need connection, okay?

54
00:03:32.513 --> 00:03:37.505
Because every time you compile, it is
checking if there is a new version, so

55
00:03:37.505 --> 00:03:41.099
you wanna make the project
offline be fine and finish.

56
00:03:41.099 --> 00:03:45.410
And if you look here, I'm getting
an error saying, Invalid module name.

57
00:03:46.620 --> 00:03:48.418
So what's going on here?

58
00:03:48.418 --> 00:03:53.667
Flutter supports only
the snake case names for

59
00:03:53.667 --> 00:03:57.436
the project and for our files, so

60
00:03:57.436 --> 00:04:02.697
the project cannot be
FlutterDemo like this.

61
00:04:02.697 --> 00:04:06.418
I need to use Flutter_demo.

62
00:04:06.418 --> 00:04:07.000
Make sense?

63
00:04:07.000 --> 00:04:11.342
So this is mandatory,
it's not going to work if not.

64
00:04:11.342 --> 00:04:16.109
And by the way,
it's a good idea to have the SDK

65
00:04:16.109 --> 00:04:20.520
in a folder in your device without spaces.

66
00:04:20.520 --> 00:04:23.239
So if the footpath has no spaces,

67
00:04:23.239 --> 00:04:28.500
the same happens with other SDKs
that you might be downloading.

68
00:04:28.500 --> 00:04:33.977
So instead of downloading this in
in your main Windows, in C colon,

69
00:04:33.977 --> 00:04:39.084
my space programmes, no,
use myprogrammes without spaces.

70
00:04:39.084 --> 00:04:44.673
So store the Flutter SDK In
a folder without spaces, okay?

71
00:04:44.673 --> 00:04:48.260
To avoid the issues with
the command line interface.

72
00:04:48.260 --> 00:04:53.363
Okay, finish and this is actually
creating the Flutter project.

73
00:04:55.359 --> 00:04:59.840
We will see the files that we have
here in a minute so no worries.

74
00:04:59.840 --> 00:05:04.632
What I want to show you first
is that at the top we have

75
00:05:04.632 --> 00:05:08.649
a section that says, No device selector.

76
00:05:08.649 --> 00:05:13.799
And when you click there,
you can actually see Chrome Web,

77
00:05:13.799 --> 00:05:17.404
Open iOS Simulator, or Refresh, okay?

78
00:05:17.404 --> 00:05:20.330
And here main.dart.

79
00:05:20.330 --> 00:05:24.451
And actually, also here it's Android.

80
00:05:25.790 --> 00:05:28.279
This says pixel 4 with Play Store, okay?

81
00:05:28.279 --> 00:05:35.518
But anyway, I can open now Chrome web,
iOS Simulator or Android Emulators.

82
00:05:35.518 --> 00:05:42.310
So if I select Chrome Web and
I hit Run, my Flutter app will appear.

83
00:05:42.310 --> 00:05:46.404
The first time you open
your Flutter application,

84
00:05:46.404 --> 00:05:50.782
you run your Flutter
application in a platform, Web,

85
00:05:50.782 --> 00:05:54.320
Android or iOS, it takes some time, okay?

86
00:05:54.320 --> 00:05:58.306
And to be honest on Android,
it takes minutes and

87
00:05:58.306 --> 00:06:01.620
sometimes it can take up to half an hour.

88
00:06:02.900 --> 00:06:07.899
So be careful with that because it happens
that the first time you run your app,

89
00:06:07.899 --> 00:06:12.828
because it needs to download more
Android requirements that sometimes it's

90
00:06:12.828 --> 00:06:14.140
500 megabytes.

91
00:06:14.140 --> 00:06:17.523
The problem is that sometimes you're
downloading that from a server that is Is

92
00:06:17.523 --> 00:06:21.059
like busy, and it takes real time and you
don't get the feedback in the meantime,

93
00:06:21.059 --> 00:06:22.512
you say, Okay what's going on?

94
00:06:22.512 --> 00:06:24.420
Well, be patient.

95
00:06:24.420 --> 00:06:29.691
And this is the default code that we
receive here, it's actually a working app.

96
00:06:29.691 --> 00:06:36.230
You can click on the browser,
so this is a website, okay?

97
00:06:36.230 --> 00:06:40.355
And you can click in the button and
you see the number in the middle,

98
00:06:40.355 --> 00:06:43.759
that's what you have as
your default project, okay?

99
00:06:43.759 --> 00:06:48.844
So you you're right here and
then you press the play button,

100
00:06:48.844 --> 00:06:54.740
at the bottom is actually saying that,
Flutter supports hot reload.

101
00:06:54.740 --> 00:07:01.232
So that means that if you make a change
in this file for example here it says,

102
00:07:01.232 --> 00:07:05.783
Flutter demo homepage,
I say, Frontend Masters.

103
00:07:05.783 --> 00:07:10.247
We will understand this in a minute,
but if I change something, and I save

104
00:07:10.247 --> 00:07:15.220
Cmd+S on a Mac, Ctrl+S, now I go back to
Chrome and it says, Frontend Masters.

105
00:07:15.220 --> 00:07:18.123
So I don't need to recompile,
I don't need to rerun, so

106
00:07:18.123 --> 00:07:21.400
I don't need to wait another half
an hour in the case of Android.

107
00:07:21.400 --> 00:07:26.200
I just can keep my emulator, or my phone
or whatever I'm using as my target running

108
00:07:26.200 --> 00:07:30.760
and everything I'm changing is
really quick, it's a hot reload.

109
00:07:30.760 --> 00:07:33.732
This is actually something that
if you're a web developer,

110
00:07:33.732 --> 00:07:36.602
probably you're used to this,
to a live reload, right?

111
00:07:36.602 --> 00:07:39.520
You'll save and
you'll see immediately the changes.

112
00:07:39.520 --> 00:07:43.329
So, that's actually brand
new on the mobile space.

113
00:07:43.329 --> 00:07:47.861
So I've been a mobile developer for 20
years, and actually it is the first time

114
00:07:47.861 --> 00:07:51.662
with Flutter, that we can actually
have a real live reload system,

115
00:07:51.662 --> 00:07:55.949
that you make a change and you can
immediately see that changing your phone.

116
00:07:55.949 --> 00:08:00.537
So before that on any platform,
even modern iOS, modern Android,

117
00:08:00.537 --> 00:08:04.402
typically you need to recompile,
that takes seconds and

118
00:08:04.402 --> 00:08:08.523
sometimes minutes to actually
get the result on your phone.

119
00:08:08.523 --> 00:08:13.174
With Flutter, this actually cool,
this is actually a really high

120
00:08:13.174 --> 00:08:18.585
performance solution that is also
highly efficient for developing, okay?

121
00:08:18.585 --> 00:08:21.499
It's actually pretty cool,
okay, make sense?

122
00:08:21.499 --> 00:08:24.182
So that how you work roughly
with Android Studio.

