WEBVTT

1
00:00:00.350 --> 00:00:04.247
So now we are going to then start
working with our application,

2
00:00:04.247 --> 00:00:07.010
the coffee masters application.

3
00:00:07.010 --> 00:00:13.920
And for that, we're going to start
working with the main.dart file.

4
00:00:13.920 --> 00:00:19.330
So I will just hide the Explorer, so
I have more space to see what's going on.

5
00:00:19.330 --> 00:00:21.090
This is a default template.

6
00:00:21.090 --> 00:00:23.764
And to be honest,
you can see it has a lot of comments,

7
00:00:23.764 --> 00:00:26.440
more than the ones that we typically want.

8
00:00:26.440 --> 00:00:29.105
So we can get rid of these
comments at this point,

9
00:00:29.105 --> 00:00:32.350
just to clear a little bit
what we see on the screen.

10
00:00:32.350 --> 00:00:32.861
Of course,

11
00:00:32.861 --> 00:00:36.800
it's a good idea to read those comments
later to understand what's going on.

12
00:00:36.800 --> 00:00:41.227
But I need to just simplify
what we have here, so

13
00:00:41.227 --> 00:00:45.114
I'm going to delete everything we have.

14
00:00:45.114 --> 00:00:50.392
In fact, I'm also going to
delete here from my home page,

15
00:00:50.392 --> 00:00:53.427
the counter and something else.

16
00:00:53.427 --> 00:00:56.510
But for now, I will just keep it.

17
00:00:56.510 --> 00:00:57.880
I'm just deleting the comments.

18
00:00:57.880 --> 00:01:03.637
Okay, just to simplify a little bit what
we have on the screen, just a little bit.

19
00:01:04.751 --> 00:01:08.699
So within here,
within this class main.dart,

20
00:01:08.699 --> 00:01:12.947
I can actually create more classes,
more content.

21
00:01:12.947 --> 00:01:17.861
Dart does not require one file,
one class, or one class,

22
00:01:17.861 --> 00:01:23.394
one file, so you can actually put
more than one class in one file.

23
00:01:23.394 --> 00:01:28.284
As I mentioned before,
Dart requires a main function.

24
00:01:28.284 --> 00:01:33.808
So you're going to find within
main.dart a main function,

25
00:01:33.808 --> 00:01:38.679
it says void main, and
in this case is running MyApp,

26
00:01:38.679 --> 00:01:42.253
and it's creating an object of MyApp,

27
00:01:42.253 --> 00:01:46.720
and it's treating that
object as a constant.

28
00:01:46.720 --> 00:01:50.060
So actually,
you cannot change that object later.

29
00:01:50.060 --> 00:01:56.680
MyApp, it's actually a class
that you have on the same file.

30
00:01:56.680 --> 00:01:59.309
So in the same file,
you have that MyApp class.

31
00:01:59.309 --> 00:02:03.920
So let's try to understand what
these classes actually are.

32
00:02:05.470 --> 00:02:12.560
Flutter is heavily based, but really
heavily based on the concept of a widget.

33
00:02:12.560 --> 00:02:14.281
What's a widget?

34
00:02:14.281 --> 00:02:20.970
Something that decides how to render
content on the screen, that's a widget.

35
00:02:20.970 --> 00:02:24.130
At least the basic initial
definition of a widget.

36
00:02:24.130 --> 00:02:28.530
A widget,
it's a class that extends from widget.

37
00:02:28.530 --> 00:02:31.122
But the widget class is abstract, so

38
00:02:31.122 --> 00:02:35.230
we cannot actually extend
from the widget class.

39
00:02:35.230 --> 00:02:38.634
We need to create a class,
I'm going to do this manually only once,

40
00:02:38.634 --> 00:02:40.660
just to show you a quick idea.

41
00:02:40.660 --> 00:02:46.550
So if I have a HelloWord widget, I need
to extend from one of the subclasses

42
00:02:46.550 --> 00:02:51.209
of widget, the simplest one
is called statelesswidget.

43
00:02:51.209 --> 00:02:54.890
We will understand why it's
called a stateless in a minute.

44
00:02:56.350 --> 00:03:02.725
So the widget has only one required
property, the key property.

45
00:03:02.725 --> 00:03:06.421
So in fact if we look at the error,
it's actually saying that

46
00:03:06.421 --> 00:03:12.250
we are not actually implementing all the
methods and all the things that we need.

47
00:03:12.250 --> 00:03:15.995
We need two things,
we need the key property,

48
00:03:15.995 --> 00:03:19.164
the keys being used by the framework for

49
00:03:19.164 --> 00:03:24.060
the tree because it will create
a tree of widgets in memory and

50
00:03:24.060 --> 00:03:28.125
each one will have its own key,
its kind of the ID.

51
00:03:28.125 --> 00:03:32.240
But it's internal, so we are not
going to set the value of those keys.

52
00:03:32.240 --> 00:03:36.429
The framework will do that for us,
but we need to have the space,

53
00:03:36.429 --> 00:03:39.210
the placeholder for that key, okay?

54
00:03:39.210 --> 00:03:44.165
So that's why you will see that all
the classes will have something like

55
00:03:44.165 --> 00:03:45.750
this here, they are.

56
00:03:45.750 --> 00:03:46.390
What is this?

57
00:03:46.390 --> 00:03:50.685
This is the constructor so let me
change the name of this constructor.

58
00:03:50.685 --> 00:03:52.054
It receives a key, and

59
00:03:52.054 --> 00:03:57.470
it's passing that key to the the super
class because it's mandatory, okay?

60
00:03:57.470 --> 00:03:59.460
So that's completely mandatory.

61
00:03:59.460 --> 00:04:05.051
So typically you will need a constructor
in your widget class that receives

62
00:04:05.051 --> 00:04:10.790
a key and it passes that key to
the super class, that's mandatory.

63
00:04:10.790 --> 00:04:17.640
And then you need also a build function.

64
00:04:17.640 --> 00:04:21.096
Look at this, I've just typed build, and

65
00:04:21.096 --> 00:04:25.910
if I select the first option,
it will populate this for me.

66
00:04:26.990 --> 00:04:30.742
There is actually a function or a method
of my class with the name build, that they

67
00:04:30.742 --> 00:04:34.510
receive something known as a BuildContext,
but we don't know what that is yet.

68
00:04:35.540 --> 00:04:38.348
And it has this annotation of override,

69
00:04:38.348 --> 00:04:41.988
that if you know Java
probably you're used to that.

70
00:04:41.988 --> 00:04:46.622
It's just an annotation saying that
this is not just any function or

71
00:04:46.622 --> 00:04:51.113
any method, it's actually
overriding the superclass method.

72
00:04:51.113 --> 00:04:54.660
And it need to return a widget,
this is a return type.

73
00:04:55.700 --> 00:04:57.827
So actually,
we need to return a widget, so

74
00:04:57.827 --> 00:05:01.060
the build method typically
returns a widget.

75
00:05:01.060 --> 00:05:06.172
For example, the simplest widget
that we can use it's called Text,

76
00:05:06.172 --> 00:05:12.359
receives a text, and it renders that text
on the screen, remember the semicolon.

77
00:05:12.359 --> 00:05:16.570
You will start seeing
a lot of warning errors.

78
00:05:16.570 --> 00:05:20.621
For example, here it says,
what is my error in VS Code?

79
00:05:20.621 --> 00:05:26.425
First when you hover this message,
you see the help of the text declaration,

80
00:05:26.425 --> 00:05:30.890
but if you scroll down
you will see the problem.

81
00:05:30.890 --> 00:05:34.604
The problem says, we prefer constants.

82
00:05:34.604 --> 00:05:39.900
Let's do that again,
we prefer constants constructors.

83
00:05:39.900 --> 00:05:46.020
So actually, what this says is that
because this text is not changing,

84
00:05:46.020 --> 00:05:49.998
it's always a text with
a Hello World inside,

85
00:05:49.998 --> 00:05:54.244
I must declare that with
a const prefix I mean,

86
00:05:54.244 --> 00:06:00.020
it will work without the const,
but it's part of the linter.

87
00:06:00.020 --> 00:06:01.664
It's a linter rule.

88
00:06:01.664 --> 00:06:03.382
Okay, we can get rid of that
rule if you don't want to.

89
00:06:03.382 --> 00:06:08.979
In fact, part of the options that I
have here to auto solve the problem

90
00:06:08.979 --> 00:06:15.442
is to add the modifier, and also I can add
for the whole file a reference saying,

91
00:06:15.442 --> 00:06:20.008
I don't want you to bother
me with this anymore, okay?

92
00:06:20.008 --> 00:06:23.760
Be careful using this,
ignore linter rules.

93
00:06:25.180 --> 00:06:27.640
Okay, so let's add the const,
so it's not complaining.

94
00:06:27.640 --> 00:06:32.270
So this is actually a widget,
we have just created our first widget.

95
00:06:32.270 --> 00:06:37.010
It's a class with a build method
returning another widget.

96
00:06:38.140 --> 00:06:39.140
That's kind of the idea.

97
00:06:40.410 --> 00:06:45.000
So we are going to make these
kinds of widgets a lot.

98
00:06:45.000 --> 00:06:51.267
So that's why the tools, both
Visual Studio Code and Android Studio,

99
00:06:51.267 --> 00:06:57.753
they include a shortcut to create
that class, it's st from a stateless.

100
00:06:57.753 --> 00:07:01.935
So if you type stless and
then press Enter or Tab,

101
00:07:01.935 --> 00:07:07.341
depends on the IDE,
both in Android Studio and Visual Studio,

102
00:07:07.341 --> 00:07:14.190
it will let you create this class, and
then you type the name of the class.

103
00:07:14.190 --> 00:07:17.707
And actually you're getting
exactly the same thing.

104
00:07:17.707 --> 00:07:21.325
The only difference without the text,
it includes another widget by default,

105
00:07:21.325 --> 00:07:22.520
it's called Container.

106
00:07:23.810 --> 00:07:27.650
A Container is an empty widget
that contains other widgets.

107
00:07:27.650 --> 00:07:32.216
It's like a div in HTML, okay?

108
00:07:32.216 --> 00:07:37.480
So roughly we're going to create widget
stless, and it creates a widget.

109
00:07:37.480 --> 00:07:40.350
That's kind of what we're
going to do all the time.

110
00:07:40.350 --> 00:07:44.750
We're going to understand why it's
called stateless, in a minute, okay?

111
00:07:44.750 --> 00:07:51.193
But, for what we have so far,
what if we wanna render that HelloWord?

112
00:07:51.193 --> 00:07:54.562
Instead of rendering here,
MyApp, I can just say,

113
00:07:54.562 --> 00:07:59.400
I can replace, when I'm running instead
of MyApp, I can run a HelloWord.

114
00:08:01.090 --> 00:08:05.150
So I'm asking the system to run HelloWord.

115
00:08:05.150 --> 00:08:10.430
So now I can run this again on
the emulator or on Chrome, it's up to you.

116
00:08:11.470 --> 00:08:14.285
So let's say Chrome, for
example, run and debug.

117
00:08:18.373 --> 00:08:19.070
Let's wait for it.

118
00:08:22.502 --> 00:08:25.410
And look at this,
we have an error, so ooh.

119
00:08:26.920 --> 00:08:32.820
So we have errors, it's asking for
No Directionality widget found.

120
00:08:32.820 --> 00:08:36.240
So this is our first error in Flutter.

121
00:08:37.430 --> 00:08:39.440
This is how we are going to see them.

122
00:08:39.440 --> 00:08:44.425
In this case, the problem is
that the text widget is trying

123
00:08:44.425 --> 00:08:49.309
to define its position and
its size based on a container,

124
00:08:49.309 --> 00:08:54.490
and we don't have a container,
so this is too much.

125
00:08:54.490 --> 00:08:58.112
Okay, we can start adding
those containers, but

126
00:08:58.112 --> 00:09:03.640
maybe something that I can do is go
back to render in MyApp, like so.

127
00:09:03.640 --> 00:09:06.638
And then MyApp has its own build method,
and

128
00:09:06.638 --> 00:09:11.340
it has some containers such as
a MaterialApp container that we don't

129
00:09:11.340 --> 00:09:17.130
know what that is MaterialApp, but
it has to do with material design.

130
00:09:17.130 --> 00:09:20.910
And in one place, it says home.

131
00:09:22.070 --> 00:09:24.940
That is what's the home of MyApp.

132
00:09:24.940 --> 00:09:30.160
And it's pointing to another widget
call MyHomePage, that's actually here.

133
00:09:30.160 --> 00:09:36.203
Well, if you want,
you can replace this with my HelloWold or

134
00:09:36.203 --> 00:09:40.481
if you want, you can get into MyHomePage.

135
00:09:40.481 --> 00:09:45.400
MyHomePage has also a lot of code that
actually we are not going to use.

136
00:09:45.400 --> 00:09:48.554
So we need to clean this a little bit,
okay?

137
00:09:48.554 --> 00:09:52.532
So I'm going to delete the counter and
also this increment counter,

138
00:09:52.532 --> 00:09:54.600
this is a default code that we have.

139
00:09:54.600 --> 00:09:58.010
And at one point there is a body,
an you see that body?

140
00:09:59.400 --> 00:10:04.104
Well, instead of what we have in body,
I'm going to delete this,

141
00:10:04.104 --> 00:10:06.720
I'm going to put my HelloWord here.

142
00:10:08.500 --> 00:10:13.314
This FloatingActionButton is actually
the plus little sign button that was

143
00:10:13.314 --> 00:10:15.579
available, I also don't need it.

144
00:10:17.568 --> 00:10:23.910
So now it's actually much
simpler if I save this.

145
00:10:23.910 --> 00:10:27.968
You remember we have halt restart,
so every time I save,

146
00:10:27.968 --> 00:10:32.705
I can actually see this in action
without actually rebuild it, and

147
00:10:32.705 --> 00:10:35.600
I have my really small HelloWord there.

148
00:10:37.202 --> 00:10:41.438
Okay, so at the end what I have
right now is I have a tree of,

149
00:10:41.438 --> 00:10:45.171
we can actually understand
what's going on here.

150
00:10:45.171 --> 00:10:50.819
If we design the widget tree, here,
we have an app, it's called MyApp.

151
00:10:50.819 --> 00:10:53.420
By the way, what's an app?

152
00:10:53.420 --> 00:10:57.790
A widget, it's not actually,
an especial concept.

153
00:10:57.790 --> 00:10:58.960
It's just a widget.

154
00:10:58.960 --> 00:11:01.301
MyApp has inside another
one called HomePage,

155
00:11:01.301 --> 00:11:04.590
that is actually the one that is here,
is MyHomePage, actually.

156
00:11:05.830 --> 00:11:08.160
You can rename this widget.

157
00:11:08.160 --> 00:11:15.080
And MyHomePage is actually rendering
my own widget, that is, a HelloWord.

158
00:11:15.080 --> 00:11:16.880
And HelloWord inside has a text.

159
00:11:19.480 --> 00:11:22.497
Actually, it's a little bit more
complicated than this, a tree, but

160
00:11:22.497 --> 00:11:25.230
I think that we can understand
what's going on at least, okay?

161
00:11:26.430 --> 00:11:29.331
So because we have hot reload,

162
00:11:29.331 --> 00:11:34.239
maybe it's a good idea to
keep Chrome at one side, so

163
00:11:34.239 --> 00:11:40.168
let me try to rearrange the windows
here a little bit, like so.

164
00:11:40.168 --> 00:11:44.515
And then I have this little
Chrome that I will put here.

165
00:11:44.515 --> 00:11:49.368
Because Chrome has a minimum size,
what I can do is

166
00:11:49.368 --> 00:11:54.116
open the data inspector and
enable device mode.

167
00:11:54.116 --> 00:11:55.940
This is web based.

168
00:11:57.960 --> 00:12:06.040
I can actually make a really
narrow window with this, like so.

169
00:12:06.040 --> 00:12:08.130
And then I can put that here somewhere.

170
00:12:08.130 --> 00:12:13.019
So then I can play with Flutter on one
side and keep it there on the other side.

171
00:12:13.019 --> 00:12:17.486
Also if you're using an emulator like
the Android emulator or the iOS emulator,

172
00:12:17.486 --> 00:12:20.584
you can also keep that emulator
on top of Visual Studio.

173
00:12:20.584 --> 00:12:24.642
If you have multiple monitors it's
probably a better idea, okay,

174
00:12:24.642 --> 00:12:28.570
but I don't have it right now
in my setup so I'm doing this.

175
00:12:28.570 --> 00:12:33.575
So actually,
if I'm changing the text and I'm saving,

176
00:12:33.575 --> 00:12:40.372
Ctrl+S or Cmd+S on the Mac, I have
an automatic reload in my Chrome, okay?

177
00:12:40.372 --> 00:12:44.620
So you can see this is really fast.

178
00:12:44.620 --> 00:12:50.940
So you are developing your app, you'll see
the results on the screen immediately.

179
00:12:50.940 --> 00:12:54.200
Okay, and if you're using a real phone and
real device for your previews,

180
00:12:54.200 --> 00:12:57.230
it will work with the same speed,
actually, really, really fast.

