WEBVTT

1
00:00:00.000 --> 00:00:04.177
We're gonna use a language that
probably isn't used before, okay?

2
00:00:04.177 --> 00:00:09.040
It's actually difficult to find
a Dart developer out there that

3
00:00:09.040 --> 00:00:13.103
personal experience in Flutter,
actually, okay?

4
00:00:13.103 --> 00:00:16.539
Dart is a language created by Google,
okay?

5
00:00:16.539 --> 00:00:22.011
So Google created Dart as an open
source language around ten years ago.

6
00:00:22.011 --> 00:00:27.332
I remember being there in San Francisco
in Google IO when it was announced.

7
00:00:27.332 --> 00:00:31.255
And it was kind of weird to
hear about the new language,

8
00:00:31.255 --> 00:00:34.853
mostly because of why they
created the language.

9
00:00:34.853 --> 00:00:38.239
So it's a statically typed language.

10
00:00:38.239 --> 00:00:42.662
So compared with JavaScript, it has that
difference, means that we need to compile.

11
00:00:42.662 --> 00:00:46.422
We are going to compile code and
every variable has a type,

12
00:00:46.422 --> 00:00:48.277
it's not like JavaScript.

13
00:00:48.277 --> 00:00:50.958
But the original intention of Dart,

14
00:00:50.958 --> 00:00:54.771
was actually to replace
JavaScript in the browser.

15
00:00:54.771 --> 00:00:59.282
So, that's ten years ago even
more than ten years ago.

16
00:00:59.282 --> 00:01:03.735
So, I think whilst we're, unless you know,
at this point it didn't work.

17
00:01:03.735 --> 00:01:10.014
So that idea of replacing JavaScript with
a new client side language didn't work.

18
00:01:10.014 --> 00:01:11.817
Fortunately, I will say.

19
00:01:11.817 --> 00:01:16.732
So, I remember there was
only one version of Chrome

20
00:01:16.732 --> 00:01:21.773
the The Chrome Canary,
that's the alpha version.

21
00:01:21.773 --> 00:01:25.724
There was one version supporting
Dart directly client side, okay?

22
00:01:25.724 --> 00:01:27.470
But that idea didn't work.

23
00:01:27.470 --> 00:01:30.725
But then Flutter appear a few years later.

24
00:01:30.725 --> 00:01:33.976
And Google said, okay,
we have a language, let's use it.

25
00:01:33.976 --> 00:01:36.849
Okay, so
now it's like the new life of Dart.

26
00:01:36.849 --> 00:01:38.594
Of course,
you can do more things with Dart.

27
00:01:38.594 --> 00:01:42.500
But like server code or
normal scripting, but

28
00:01:42.500 --> 00:01:47.220
most of the time today,
we will use Dart with a Flutter.

29
00:01:47.220 --> 00:01:48.361
So we didn't lose type inference.

30
00:01:48.361 --> 00:01:50.303
We will see these in a minute.

31
00:01:50.303 --> 00:01:51.040
So no worries.

32
00:01:51.040 --> 00:01:56.120
It's multi-platform so it has compiler for
mostly all the platforms available today.

33
00:01:56.120 --> 00:01:58.399
Easy to learn, okay?

34
00:01:58.399 --> 00:02:01.012
So if you know Java or C sharp,

35
00:02:01.012 --> 00:02:05.720
it's actually pretty similar
with some additions or

36
00:02:05.720 --> 00:02:11.698
with some addition from other languages,
including JavaScript.

37
00:02:11.698 --> 00:02:13.419
It has less ceremony.

38
00:02:13.419 --> 00:02:17.080
Less bureaucracy than for
example, Java, okay?

39
00:02:17.080 --> 00:02:20.678
But it's still similar to Java, okay?

40
00:02:20.678 --> 00:02:25.869
It includes some other ideas
such as promises, okay?

41
00:02:25.869 --> 00:02:27.114
It has a different name here.

42
00:02:27.114 --> 00:02:27.825
It's called Future.

43
00:02:27.825 --> 00:02:34.186
It's not 100% the same as the promise but
it's kind of the same at this point.

44
00:02:34.186 --> 00:02:38.302
And it includes optional new safety.

45
00:02:38.302 --> 00:02:43.093
So you can enable null-safety if you want
to and I will explain what that is if this

46
00:02:43.093 --> 00:02:47.052
is the first time you're hearing
about null-safety in a minute.

47
00:02:47.052 --> 00:02:49.707
So that's the idea of
Dart as a language,okay?

48
00:02:49.707 --> 00:02:53.593
As I mentioned before it was
originally for internal web and

49
00:02:53.593 --> 00:02:57.415
work to replace JavaScript
fortunately it didn't work.

50
00:02:57.415 --> 00:03:02.177
And today to carry intention
the current target of Dart is to

51
00:03:02.177 --> 00:03:07.335
create in front-end apps
including Flutter and AngularDart.

52
00:03:07.335 --> 00:03:12.224
So if you're an Angular developer
you can decide to use Dart instead

53
00:03:12.224 --> 00:03:14.816
of TypeScript for example, okay?

54
00:03:14.816 --> 00:03:16.810
But anyway, that's not for today.

55
00:03:16.810 --> 00:03:19.277
Today, we are going to
be covering Flutter.

56
00:03:19.277 --> 00:03:23.981
And it's inspired by
T Java JavaScript Erlang small talk even

57
00:03:23.981 --> 00:03:26.518
a little bit of Swift and Kotlin.

58
00:03:26.518 --> 00:03:30.366
We will be using Dart 2,
2 point something, okay?

59
00:03:30.366 --> 00:03:32.693
But that is different from dot 1.

60
00:03:32.693 --> 00:03:34.669
So it's actually not compatible.

61
00:03:34.669 --> 00:03:39.116
So the version that we will be using
of the language is called Dark 2,okay?

62
00:03:39.116 --> 00:03:42.459
And Dart compiles into native code and

63
00:03:42.459 --> 00:03:47.584
intermediate language and
even compiled to JavaScript.

64
00:03:47.584 --> 00:03:50.369
And we are gonna see what
that means in a minute.

65
00:03:50.369 --> 00:03:54.118
So it's actually one of
the most multi platform

66
00:03:54.118 --> 00:03:58.898
languages out there because we
can actually get Dart code and

67
00:03:58.898 --> 00:04:03.319
compile that into Intel 64
bits architecture, ARM.

68
00:04:03.319 --> 00:04:07.168
We can also compile to a B machine
that that can be executed in different

69
00:04:07.168 --> 00:04:09.462
operating system without recompiling.

70
00:04:09.462 --> 00:04:12.654
And we can compiled to JavaScript
compile in quotes, right?

71
00:04:12.654 --> 00:04:14.797
So we can transpire if you want.

72
00:04:14.797 --> 00:04:17.631
We can get an output in JavaScript.

73
00:04:17.631 --> 00:04:20.870
So then you can run in the browser.

74
00:04:20.870 --> 00:04:23.131
So, we are going to be using Dart 2, and

75
00:04:23.131 --> 00:04:27.468
if you wanna play with the language
without installing any compiler, okay?

76
00:04:27.468 --> 00:04:33.441
You can go to dartpad.dev, they'll let
you play with Dart in the browser.

77
00:04:33.441 --> 00:04:36.591
Because it can compile to JavaScript,

78
00:04:36.591 --> 00:04:42.710
it's actually pretty simple to make
a Dart compiler client inside, okay?

79
00:04:42.710 --> 00:04:45.099
Make sense?

80
00:04:45.099 --> 00:04:50.346
So every Dart application has a main
function, so similar to C or Java.

81
00:04:50.346 --> 00:04:53.882
So we are going to start
with the main function.

82
00:04:53.882 --> 00:04:58.734
It has full object oriented
programming with type inference,

83
00:04:58.734 --> 00:05:02.680
meaning that everything
will be an object in Dart.

84
00:05:02.680 --> 00:05:04.917
So this is kind of similar to Java.

85
00:05:04.917 --> 00:05:07.655
It's even more extreme than Java.

86
00:05:07.655 --> 00:05:11.999
Because in Java, like an int, with
a lowercase is not actually an option.

87
00:05:11.999 --> 00:05:15.130
Well here everything is an object, okay?

88
00:05:15.130 --> 00:05:18.616
Everything comes from a class in Dart.

89
00:05:18.616 --> 00:05:21.657
No safety is available
as an optional feature.

90
00:05:21.657 --> 00:05:27.254
And actually when we are making flatter
applications today, it's enabled by

91
00:05:27.254 --> 00:05:32.790
default, like a year ago, it was
actually disabled by default, no safety.

92
00:05:32.790 --> 00:05:37.355
It feels easy to understand, and
it has feature for many languages,

93
00:05:37.355 --> 00:05:43.116
such as Extension, Mixins, Futures that
is async programming similar to promises.

94
00:05:43.116 --> 00:05:47.727
But when compiling to the web,
this is important we need to remember,

95
00:05:47.727 --> 00:05:52.506
that the code is going to be executed
in the JavaScript built on machine.

96
00:05:52.506 --> 00:05:57.154
With all the advantages and
disadvantages of that, okay?

97
00:05:57.154 --> 00:06:03.320
So meaning that the security of our
objects might not be the same when

98
00:06:03.320 --> 00:06:09.175
we are running our Dart code in
a native platform than on the web.

99
00:06:09.175 --> 00:06:11.868
Because on the web everything is
being converted to JavaScript.

100
00:06:11.868 --> 00:06:17.436
And we know that JavaScript sometimes
it doesn't contain hard limits for

101
00:06:17.436 --> 00:06:22.283
options for example,
I can mess with the prototype of objects,

102
00:06:22.283 --> 00:06:28.685
I can change the type of variable, and
transcript, the runtime will not complain.

103
00:06:28.685 --> 00:06:31.222
If I have a variable defined
as in the string and

104
00:06:31.222 --> 00:06:35.331
I changed the value to an integer,
who is going to complain in the browser?

105
00:06:35.331 --> 00:06:36.596
No one, okay?

106
00:06:36.596 --> 00:06:40.350
So, have in mind that we have those
differences when we are targeting

107
00:06:40.350 --> 00:06:41.656
different platforms.

108
00:06:41.656 --> 00:06:46.065
So in terms of where Dart goes, typically,

109
00:06:46.065 --> 00:06:51.667
we know that we have some
languages such as JavaScript,

110
00:06:51.667 --> 00:06:54.420
where we ship source code.

111
00:06:54.420 --> 00:06:59.452
We have some other languages,
such as Java, where we ship bytecode.

112
00:06:59.452 --> 00:07:02.435
That is an intermediate language and
then we have a built on machine.

113
00:07:02.435 --> 00:07:05.125
And we have compiled languages,

114
00:07:05.125 --> 00:07:10.226
such as Dart that actually
compiles into machine code, okay?

115
00:07:10.226 --> 00:07:15.253
And that means that you need to compile
for every different platform like ARM,

116
00:07:15.253 --> 00:07:18.235
Intel and
other architectures that you have.

117
00:07:18.235 --> 00:07:19.171
And for Intel,

118
00:07:19.171 --> 00:07:23.142
you have different architectures
per operating system as well.

119
00:07:23.142 --> 00:07:27.634
But I already mentioned
that Dart is I do enough so

120
00:07:27.634 --> 00:07:32.905
we can actually get into
the three words at the same time.

121
00:07:32.905 --> 00:07:37.139
So you write Dart and
you can compile to JavaScript, so

122
00:07:37.139 --> 00:07:42.109
you get an output JavaScript source
code that is not intended for

123
00:07:42.109 --> 00:07:44.425
human interaction, right?

124
00:07:44.425 --> 00:07:49.337
So we are not going to we touch or
develop on top of that JavaScript code.

125
00:07:49.337 --> 00:07:54.438
It can compile into bytecode and
that has its own built on machine and

126
00:07:54.438 --> 00:07:57.225
it isn't compiled to machine code.

127
00:07:57.225 --> 00:08:02.155
Well let me tell you this when we
are building web apps actually we're

128
00:08:02.155 --> 00:08:04.460
going to shape the source code.

129
00:08:04.460 --> 00:08:09.651
So if you're making with Dart,
with Flutter web apps, that's our target.

130
00:08:09.651 --> 00:08:15.347
If we are targeting desktop
operating systems such as Linux,

131
00:08:15.347 --> 00:08:20.178
Mac OS, or Windows,
we will be shipping bytecode.

132
00:08:20.178 --> 00:08:27.174
And if we are targeting iOS or Android
we're going to ship machine code directly.

133
00:08:27.174 --> 00:08:30.890
We then we then need to
make this decision, okay?

134
00:08:30.890 --> 00:08:34.731
This happens automatically
behind the scenes but

135
00:08:34.731 --> 00:08:39.671
have that in mind the same codebase
will actually get completely

136
00:08:39.671 --> 00:08:44.528
different outputs with completely
different nature, okay?

137
00:08:44.528 --> 00:08:47.561
From the same codebase
you have any questions?

138
00:08:47.561 --> 00:08:50.202
That's fine.

139
00:08:50.202 --> 00:08:53.252
&gt;&gt; I was just wondering why
Windows platforms when compiled to

140
00:08:53.252 --> 00:08:54.230
the machine code.

141
00:08:54.230 --> 00:08:59.732
&gt;&gt; Actually with performance because
on desktop they can perform.

142
00:08:59.732 --> 00:09:04.489
So on desktop they can perform better with
a brutal machine that it might not be so

143
00:09:04.489 --> 00:09:05.065
simple.

144
00:09:05.065 --> 00:09:09.067
Actually on iOS, for example,
it's forbidden to have a built on machine.

145
00:09:09.067 --> 00:09:11.526
So if you're making an iOS application,

146
00:09:11.526 --> 00:09:16.178
you cannot include the IBM like with
the just in time compiler is not possible.

147
00:09:16.178 --> 00:09:20.720
So a technical issue, it's a commercial
issue from the Apple platform.

148
00:09:20.720 --> 00:09:22.095
So I think that's the reason.

149
00:09:22.095 --> 00:09:27.907
So on mobile for performance and because
of the restrictions of the app stores,

150
00:09:27.907 --> 00:09:32.519
they are actually compiling to
machine code and not to the IBM.

151
00:09:32.519 --> 00:09:33.885
Question on the chat?

152
00:09:33.885 --> 00:09:37.599
&gt;&gt; Can you make command line binaries?

153
00:09:37.599 --> 00:09:42.727
&gt;&gt; So if you wanna do binaries,
yeah, it's like in machine code.

154
00:09:42.727 --> 00:09:47.104
So, you can target machine code for
different operating systems.

155
00:09:47.104 --> 00:09:50.681
So, in that case you need to
pick the operating system.

156
00:09:50.681 --> 00:09:55.073
And I mean if you wanna create a Linux
output and install like a CLI or

157
00:09:55.073 --> 00:09:58.067
something like that, yeah it's possible.

158
00:09:58.067 --> 00:10:01.234
&gt;&gt; Someone was asking what
did you mean by null-safety?

159
00:10:01.234 --> 00:10:05.237
&gt;&gt; Okay, we will get into null-safety
in a minute with some examples.

160
00:10:05.237 --> 00:10:10.569
But it's the ability on
a language like Dart to actually

161
00:10:10.569 --> 00:10:15.115
express if we accept nulls or
not any variable.

162
00:10:15.115 --> 00:10:20.727
So if you're writing Java or C sharp or
even PHP, if you create a variable,

163
00:10:20.727 --> 00:10:25.465
okay, and you don't set the value to it,
it stores no, okay?

164
00:10:25.465 --> 00:10:27.263
So by default it's null.

165
00:10:27.263 --> 00:10:32.051
Well, actually when you have
null-safety language with null-safety,

166
00:10:32.051 --> 00:10:34.335
it cannot be null unless you say so.

167
00:10:34.335 --> 00:10:38.735
So, you as a developer can
actually make the decision if each

168
00:10:38.735 --> 00:10:41.420
variable if you accept nulls or not.

169
00:10:41.420 --> 00:10:44.827
So it had to do with
the semantics of your code, and

170
00:10:44.827 --> 00:10:48.896
it will reduce the amount of
bugs that you have in your code.

171
00:10:48.896 --> 00:10:54.036
So today modern languages such
as Dart ,Swift, Caitlyn ,Go and

172
00:10:54.036 --> 00:10:58.807
many others are actually
supporting null-safety, okay?

173
00:10:58.807 --> 00:11:00.978
And this is also coming to
other languages as well.

174
00:11:00.978 --> 00:11:08.073
C sharp has also null-safety, there is
an optional way to do that as well, but

175
00:11:08.073 --> 00:11:13.675
it was like something that
the others later on C Sharp, okay?

176
00:11:13.675 --> 00:11:15.410
But we will see an example
of that in a minute.

