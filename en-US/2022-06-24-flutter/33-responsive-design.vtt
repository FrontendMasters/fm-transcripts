WEBVTT

1
00:00:00.370 --> 00:00:02.855
But before actually compiling the app,

2
00:00:02.855 --> 00:00:06.370
let's say you're going to
create a website, a web app.

3
00:00:07.900 --> 00:00:10.650
What happens with responsive design?

4
00:00:10.650 --> 00:00:12.080
Look at that.

5
00:00:12.080 --> 00:00:14.220
It doesn't look like really nice, right?

6
00:00:14.220 --> 00:00:15.770
So it's like, really big.

7
00:00:17.350 --> 00:00:22.560
So how responsive design
works with Flutter?

8
00:00:22.560 --> 00:00:25.070
There are many ways to solve
the responsive design problem.

9
00:00:26.770 --> 00:00:31.280
Let me go back to the initial view.

10
00:00:31.280 --> 00:00:36.361
For example, if I'm going to
the offers page, one way to work

11
00:00:36.361 --> 00:00:43.470
is to create the property with a media
query similar to browser media queries.

12
00:00:43.470 --> 00:00:46.879
So for example,
if we want this screen size,

13
00:00:46.879 --> 00:00:51.360
we can say MediaQuery of
the context we receive.

14
00:00:51.360 --> 00:00:56.825
And we can query about a lot of stuff,
devicePixelRatio,

15
00:00:56.825 --> 00:01:00.961
gestureSetting, and we have size, okay?

16
00:01:00.961 --> 00:01:03.543
So this is the size of the screen.

17
00:01:03.543 --> 00:01:07.530
So actually, I can make conditions here.

18
00:01:07.530 --> 00:01:13.879
If the width of the screen is more than
500, then I'm going to return this view.

19
00:01:13.879 --> 00:01:16.792
If not, I'm going to return that view.

20
00:01:16.792 --> 00:01:18.986
Yeah, you need to do this manually, right?

21
00:01:18.986 --> 00:01:26.289
But then you can have a large viewport and
a small viewport with media queries.

22
00:01:26.289 --> 00:01:30.677
Also, the other way, sometimes instead
of using a ListView, for example,

23
00:01:30.677 --> 00:01:32.713
there is another word called wrap.

24
00:01:32.713 --> 00:01:36.150
Wrap would actually make
the trick pretty simply.

25
00:01:36.150 --> 00:01:43.590
So if I go to offers now, wrap, what we'll
do is we'll try to wrap the elements.

26
00:01:43.590 --> 00:01:48.047
So maybe what I need is
to also fix the offers,

27
00:01:50.629 --> 00:01:52.551
Not just in the height,
but also in the width.

28
00:01:54.512 --> 00:01:55.656
By 300.

29
00:01:57.612 --> 00:02:00.270
Have a typo.

30
00:02:00.270 --> 00:02:06.047
So if I go to offers now,
the wrap widget would actually

31
00:02:06.047 --> 00:02:11.587
try to wrap the elements
if there is no space, okay?

32
00:02:11.587 --> 00:02:16.126
Well, then you can center,
you can play with this, but

33
00:02:16.126 --> 00:02:20.690
wrap would actually work
like float in HTML, okay?

34
00:02:20.690 --> 00:02:22.816
So with media queries and wrap,

35
00:02:22.816 --> 00:02:27.560
you can start making decisions
about your user interface.

36
00:02:27.560 --> 00:02:32.609
&gt;&gt; I haven't used this kinda
implementation, but in other projects,

37
00:02:32.609 --> 00:02:38.364
I used the inits, one of the lifecycle
hooks to grab the data versus using the-

38
00:02:38.364 --> 00:02:39.455
&gt;&gt; Futures.

39
00:02:39.455 --> 00:02:42.595
&gt;&gt; Yeah, so just something,
a different style.

40
00:02:42.595 --> 00:02:45.498
&gt;&gt; No, the thing is that
Flutter had different versions,

41
00:02:45.498 --> 00:02:47.600
and also Dart had different versions.

42
00:02:47.600 --> 00:02:52.706
So if you have been doing Flutter since
the beginning, maybe you're not using all

43
00:02:52.706 --> 00:02:58.200
the techniques that we've seen today
because they were added over time, okay?

44
00:02:58.200 --> 00:03:00.753
So there are many things that
were added over time, so

45
00:03:00.753 --> 00:03:03.100
maybe that's why you
are using that technique.

46
00:03:03.100 --> 00:03:07.014
Also, maybe because you are using
a different design pattern.

47
00:03:07.014 --> 00:03:12.322
So typically today,
we prefer futures that the future builder

48
00:03:12.322 --> 00:03:17.441
will actually help you a lot to
work with async programming.

