WEBVTT

1
00:00:00.000 --> 00:00:04.190
Flutter is Google's UI toolkit for
building beautiful, natively compiled

2
00:00:04.190 --> 00:00:09.101
applications for mobile, web, desktop, and
embedded devices from a single codebase.

3
00:00:09.101 --> 00:00:11.317
That's the official definition.

4
00:00:11.317 --> 00:00:18.836
And the first thing that we think is,
why is Google doing this?

5
00:00:18.836 --> 00:00:23.441
Because Google has Android, and
they also have UI toolkit there.

6
00:00:23.441 --> 00:00:26.580
I mean,
the Android team is using now Kotlin.

7
00:00:26.580 --> 00:00:30.975
And they have Jetpack Compose, and
they have also ways to great Android apps.

8
00:00:30.975 --> 00:00:33.236
And they did this, they did Flutter.

9
00:00:33.236 --> 00:00:36.566
Well, Google,
it's not actually one company,

10
00:00:36.566 --> 00:00:40.066
it's like a universe of
smaller companies inside.

11
00:00:40.066 --> 00:00:43.120
And sometimes they are even
competing with each other, okay?

12
00:00:43.120 --> 00:00:44.736
Well, this is one case.

13
00:00:44.736 --> 00:00:47.089
Flutter can create Android apps,

14
00:00:47.089 --> 00:00:52.010
as well as the other toolkits that
they have within the company.

15
00:00:52.010 --> 00:00:57.512
But also it can create apps for iOS, and
also for desktop, and also for the web.

16
00:00:57.512 --> 00:01:02.597
So it's a framework that they created for
more purposes, okay?

17
00:01:02.597 --> 00:01:04.800
It's a declarative UI framework.

18
00:01:04.800 --> 00:01:08.861
So we are not going to create buttons and

19
00:01:08.861 --> 00:01:14.277
everything, like in creating
a variable button and

20
00:01:14.277 --> 00:01:19.460
then we are attaching
the button with the DOM API.

21
00:01:19.460 --> 00:01:23.998
We are not creating a DOM element and
then appending that element into the DOM,

22
00:01:23.998 --> 00:01:25.525
that's not how it works.

23
00:01:25.525 --> 00:01:30.587
It looks more than React,
than Swift UI, Jetpack Compose,

24
00:01:30.587 --> 00:01:36.741
Angular, where we declare the code,
the UI, directly in one sentence,

25
00:01:36.741 --> 00:01:42.440
in one expression,
everything is one expression, okay?

26
00:01:42.440 --> 00:01:44.710
It was launched in 2018, and

27
00:01:44.710 --> 00:01:49.183
it focused on modern UI patterns
such as a single source of truth.

28
00:01:49.183 --> 00:01:52.325
The idea is that in your, for
now, let's say hierarchy,

29
00:01:52.325 --> 00:01:54.583
that we all know exactly what that means.

30
00:01:54.583 --> 00:02:00.210
But the data resides only in one place,
composable components.

31
00:02:00.210 --> 00:02:03.473
So actually we can create
components that the name

32
00:02:03.473 --> 00:02:06.113
that we are going to use here is widgets,

33
00:02:06.113 --> 00:02:10.789
so we are going to compose widgets
that we can reuse within our project.

34
00:02:10.789 --> 00:02:13.766
It's multiplatform, we already
mentioned that a couple of time.

35
00:02:13.766 --> 00:02:19.931
Dependency rendering, so actually, your
widgets we have dependencies on variables,

36
00:02:19.931 --> 00:02:25.730
on properties, on states, that will define
how your widgets are being rendered.

37
00:02:25.730 --> 00:02:31.003
We have some data binding and
some kind of reactive programming.

38
00:02:31.003 --> 00:02:35.958
It's not really complete,
the reactive part, but it works for

39
00:02:35.958 --> 00:02:39.080
the basic ideas, at least.

40
00:02:39.080 --> 00:02:42.902
So everything in the UI
it's expressed in widgets.

41
00:02:42.902 --> 00:02:45.957
And a widget it's just a Dart class,

42
00:02:45.957 --> 00:02:50.307
that we'd extend from a widget superclass,
okay?

43
00:02:50.307 --> 00:02:51.517
We will see it action in a minute.

44
00:02:51.517 --> 00:02:57.206
And we have a visual editor tool in
Android Studio or in Visual Studio, okay?

45
00:02:57.206 --> 00:02:58.910
Both are okay.

46
00:02:58.910 --> 00:03:03.173
So we are going to,
we can target Android, iOS, iPadOS,

47
00:03:03.173 --> 00:03:07.800
embedded device, Fuchsia OS,
desktop devices, Windows.

48
00:03:07.800 --> 00:03:12.399
This has answered the question
that we had before, win32 and

49
00:03:12.399 --> 00:03:15.365
universal Windows platform, as well.

50
00:03:15.365 --> 00:03:19.328
MacOS, macOS is better at this point,
Linux, okay?

51
00:03:19.328 --> 00:03:20.945
And the web.

52
00:03:20.945 --> 00:03:25.602
So the same the same widgets
that we are going to create

53
00:03:25.602 --> 00:03:27.853
are going to work everywhere.

54
00:03:27.853 --> 00:03:32.390
How does that work, how does magic work?

55
00:03:32.390 --> 00:03:36.441
Well, if you have been in
the cross-platform SDK world,

56
00:03:36.441 --> 00:03:43.000
maybe you have heard about React Native,
for example, or Xamarin or NativeScripts.

57
00:03:43.000 --> 00:03:46.192
Flutter, it's competing in the same group,
but

58
00:03:46.192 --> 00:03:49.469
it's completely different,
let me tell you why.

59
00:03:49.469 --> 00:03:53.959
In React Native or in Xamarin,
when you render Xamarin forms,

60
00:03:53.959 --> 00:03:57.688
actually they're
multi-platform UI framework,

61
00:03:57.688 --> 00:04:01.007
when you create a button on the screen,
okay?

62
00:04:01.007 --> 00:04:06.429
The button instance is using
the UI toolkit from each OS.

63
00:04:06.429 --> 00:04:11.225
So in iOS, it's using UI button,
on Android, it's using the button

64
00:04:11.225 --> 00:04:16.124
from the Android toolkit, on Windows,
it's using a Windows button.

65
00:04:16.124 --> 00:04:21.064
And on the web, if React Native for Web,
for example, you can export to the web,

66
00:04:21.064 --> 00:04:24.061
it's actually creating an HTML button,
okay?

67
00:04:24.061 --> 00:04:26.648
Flutter is doing something different.

68
00:04:26.648 --> 00:04:31.218
Flutter is not using any UI framework
from the operating systems,

69
00:04:31.218 --> 00:04:34.900
it's rendering its own button
in a low level canvas.

70
00:04:36.720 --> 00:04:41.709
So it's rolling the button,
that it will look like pixel perfect

71
00:04:41.709 --> 00:04:45.894
to an Android or
iOS device if you use the right widget.

72
00:04:45.894 --> 00:04:50.936
But it's not actually using their
own UI frameworks, okay, make sense?

73
00:04:50.936 --> 00:04:56.302
So it's more like UC unity.

74
00:04:56.302 --> 00:04:57.949
I mean, from a UI point of view,

75
00:04:57.949 --> 00:05:01.619
it's like having a full canvas where
you can render whatever you want.

76
00:05:01.619 --> 00:05:06.725
But Flutter over that canvas it's actually
render an app that looks like the other

77
00:05:06.725 --> 00:05:11.469
apps in the operating system, but
it was completely written from scratch.

78
00:05:11.469 --> 00:05:17.226
So that means that animation,
transitions, that code was written in

79
00:05:17.226 --> 00:05:23.780
a low level system that emulates the
standard UI toolkit, okay, makes sense?

80
00:05:23.780 --> 00:05:27.782
On the web, we have renderers,
we will talk about that later.

81
00:05:27.782 --> 00:05:34.930
But by default it's rendering in a canvas
or WebGL, so your app render fair.

82
00:05:36.740 --> 00:05:40.491
And you can convert that into
a progressive web app, that's for

83
00:05:40.491 --> 00:05:41.544
the end of today.

84
00:05:41.544 --> 00:05:44.020
You have any question
on the rendering part,

85
00:05:44.020 --> 00:05:48.660
on what's the difference between other
cross-platform frameworks and Flutter?

86
00:05:50.240 --> 00:05:54.086
&gt;&gt; Is it using Skia to
render to the canvas?

87
00:05:54.086 --> 00:05:55.145
&gt;&gt; Internally?

88
00:05:55.145 --> 00:05:59.018
&gt;&gt; Yeah.
&gt;&gt; It has its own system called

89
00:05:59.018 --> 00:06:02.328
Canvas Kit, on the web.

90
00:06:02.328 --> 00:06:03.266
&gt;&gt; On the web, okay.

91
00:06:03.266 --> 00:06:04.561
&gt;&gt; On the web.

92
00:06:04.561 --> 00:06:09.263
So you can then compile for
the Play Store, creating an AAB file,

93
00:06:09.263 --> 00:06:13.124
an Android App Bundle,
to Android and Chromebooks.

94
00:06:13.124 --> 00:06:16.124
For the Amazon AppStore,
and other App Store,

95
00:06:16.124 --> 00:06:20.100
you can create an APK that also
will work on Windows 11 Store.

96
00:06:20.100 --> 00:06:24.376
For the Huawei AppGallery,
you can also create an APK.

97
00:06:24.376 --> 00:06:27.784
For the App Store, you can create an IPA,
an iPhone application.

98
00:06:27.784 --> 00:06:32.197
And for Microsoft Store, you can create
an Universal Windows application, as well.

99
00:06:32.197 --> 00:06:33.326
So for Windows,

100
00:06:33.326 --> 00:06:38.246
you can create an Android app to
distribute that on the Microsoft Store or

101
00:06:38.246 --> 00:06:42.777
you can create a Windows up,
both will work, okay, makes sense?

102
00:06:42.777 --> 00:06:46.923
So as we mentioned before,
it's not using any SDK,

103
00:06:46.923 --> 00:06:50.325
everything is your own widget and design.

104
00:06:50.325 --> 00:06:54.389
And it comes with two widget sets,
ready to use,

105
00:06:54.389 --> 00:06:58.563
material widgets and
Cupertino widgets, okay?

106
00:06:58.563 --> 00:07:01.776
So we pick the one that we want to use.

107
00:07:01.776 --> 00:07:05.240
Cupertino is the iOS-like widget.

108
00:07:05.240 --> 00:07:10.679
And it's weird to use that on Android,
it's weird to use that on the web.

109
00:07:10.679 --> 00:07:13.696
We can, but it looks weird.

110
00:07:13.696 --> 00:07:17.500
So most of the time we prefer,
if you aren't going to do

111
00:07:17.500 --> 00:07:21.907
a multi-platform application,
we prefer Material widget.

112
00:07:21.907 --> 00:07:27.687
So that is more universal,
but it's up to you, okay?

113
00:07:27.687 --> 00:07:30.264
So there are cloning pixel-perfect,

114
00:07:30.264 --> 00:07:35.035
the Android Material Design and
the Apple Human Interface guidelines.

115
00:07:35.035 --> 00:07:41.450
So when you look at a Real Native app and
a Flutter app using that toolkit,

116
00:07:41.450 --> 00:07:47.150
you won't see a lot of differences,
okay, makes sense?

117
00:07:47.150 --> 00:07:51.811
So pixel-perfect, high-performance,
same gestures, same animations,

118
00:07:51.811 --> 00:07:53.277
as the Native toolkits.

119
00:07:53.277 --> 00:07:57.419
So for example, the same app,
using, in this case,

120
00:07:57.419 --> 00:08:02.314
it's the same Material,
Apple running on iOS and an Android.

121
00:08:02.314 --> 00:08:06.836
And you can see, for example,
the buttons look different,

122
00:08:06.836 --> 00:08:10.915
the switch, that little switch
that you can turn on and

123
00:08:10.915 --> 00:08:15.716
off is looking different on
Cupertino than on Material, okay?

124
00:08:15.716 --> 00:08:17.934
So yeah, they're pretty similar.

125
00:08:17.934 --> 00:08:21.443
Or if you look at the plus sign,
there is a plus sign on Android,

126
00:08:21.443 --> 00:08:23.845
it's called the Floating Action Button.

127
00:08:23.845 --> 00:08:28.144
And on iOS they're the same pattern is
to put the plus sign at the top right.

128
00:08:28.144 --> 00:08:32.025
So this is Material and Cupertino.

129
00:08:32.025 --> 00:08:36.460
Can you use both at the same time?

130
00:08:36.460 --> 00:08:39.646
For Android and
the web I wanna use Material, and for

131
00:08:39.646 --> 00:08:41.540
iOS I wanna target Cupertino?

132
00:08:41.540 --> 00:08:46.562
Yes, but it's a problem, because we
are talking about different widgets.

133
00:08:46.562 --> 00:08:50.575
So you need to have some kind
of conditional arrangements, and

134
00:08:50.575 --> 00:08:55.585
also there is a design pattern where you
create some kind of abstract widgets.

135
00:08:55.585 --> 00:09:00.987
You're creating your own abstract button,
then inside we have a conditional saying,

136
00:09:00.987 --> 00:09:05.659
if it's Android or the web, let's use
the material button, if it's iOS or

137
00:09:05.659 --> 00:09:08.900
iPadOS, let's use the Cupertino button.

138
00:09:08.900 --> 00:09:14.605
So if you wanna do that, it's possible,
but it takes more effort in your code.

139
00:09:14.605 --> 00:09:20.346
Most of the time, Flutter application will
use the same UI guideline everywhere,

140
00:09:20.346 --> 00:09:22.870
but it's your decision, yeah?

141
00:09:22.870 --> 00:09:26.910
&gt;&gt; So if you ran the Cupertino on
the Android, it would look like iPhone?

142
00:09:26.910 --> 00:09:30.642
&gt;&gt; It will look like an iPhone and
the user is not expecting that UI, and

143
00:09:30.642 --> 00:09:33.665
the share stores and
everything looks like an iPhone.

144
00:09:33.665 --> 00:09:38.235
It will work because it's not using
the UI from the toolkit from iOS.

145
00:09:38.235 --> 00:09:42.605
It's rendering that from scratch, so
it will look like iOS on Android as well.

146
00:09:42.605 --> 00:09:46.030
But the gestures, the tabs,
how everything looks like, it's different.

147
00:09:48.370 --> 00:09:52.675
So most of the time, Flutter applications
are using the Material widgets or

148
00:09:52.675 --> 00:09:53.760
your own widgets.

149
00:09:53.760 --> 00:09:58.655
You create your own widgets
with your own design, okay?

150
00:09:58.655 --> 00:10:03.895
So for example, this is a Material
app working on both platforms.

151
00:10:03.895 --> 00:10:06.941
So typically it looks nice on both.

152
00:10:06.941 --> 00:10:11.004
So we have to make the decision,
design your own visual pattern system,

153
00:10:11.004 --> 00:10:12.748
use Material for all devices.

154
00:10:12.748 --> 00:10:18.353
Or have that multi-user interface that
makes, you need more effort, okay?

155
00:10:18.353 --> 00:10:22.688
To make that work, just have that in mind.

156
00:10:22.688 --> 00:10:28.244
So it doesn't happen automatically because
widgets are not translatable, okay?

157
00:10:28.244 --> 00:10:31.593
So have in mind, it takes some time.

158
00:10:31.593 --> 00:10:39.166
Today we will just pick Material, we will
make an app in Material, okay, make sense?

159
00:10:39.166 --> 00:10:41.183
So and
then we will have different products.

160
00:10:41.183 --> 00:10:44.613
The iOS application and
the replication and web builder,

161
00:10:44.613 --> 00:10:48.955
web build folder, they have ready to
deploy, we will see that at the end.

162
00:10:48.955 --> 00:10:53.933
And executable for Windows, and APPX for
Windows and macOS application, I'm sorry,

163
00:10:53.933 --> 00:10:56.959
and a macOS application,
or a Linux application, or

164
00:10:56.959 --> 00:11:00.615
a folksy iOS application and
blah, blah, blah, blah, blah.

