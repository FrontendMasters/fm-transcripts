WEBVTT

1
00:00:00.440 --> 00:00:04.950
At this point, many of you may
be wondering, what about the UI?

2
00:00:04.950 --> 00:00:09.068
But I mean, if I wanna change the font
size, if I wanna add paddings,

3
00:00:09.068 --> 00:00:13.590
because everything looks terrible
on my app at this point, okay?

4
00:00:13.590 --> 00:00:16.020
So let's start with padding.

5
00:00:17.100 --> 00:00:18.790
So let me tell you this.

6
00:00:18.790 --> 00:00:24.300
On Flutter, not everything, but
most of the things are widgets.

7
00:00:25.670 --> 00:00:27.110
It's heavily based on widget.

8
00:00:28.210 --> 00:00:31.764
And I'm not sure if you're going to like
this the first time you see that, okay?

9
00:00:31.764 --> 00:00:37.539
But if I wanna add a padding to
the TextField, so this TextField, okay?

10
00:00:37.539 --> 00:00:39.716
So I wanna add a padding to the TextField.

11
00:00:39.716 --> 00:00:41.298
How would you do that?

12
00:00:41.298 --> 00:00:43.650
With a padding widget.

13
00:00:43.650 --> 00:00:48.940
So I need to wrap the TextField into
a widget that has a name padding.

14
00:00:48.940 --> 00:00:56.240
So if I click here, now I have
a padding with a child of a TextField.

15
00:00:56.240 --> 00:01:01.292
So the padding is like having
in HTML a padding element, okay?

16
00:01:01.292 --> 00:01:04.310
So you wrap your elements
in the padding elements.

17
00:01:05.450 --> 00:01:09.177
So that's why it gets big and big and
big because there are already pads.

18
00:01:09.177 --> 00:01:14.232
So if I save now, we should see a padding.

19
00:01:14.232 --> 00:01:18.660
By default, it's creating,
it's not actually a property.

20
00:01:18.660 --> 00:01:22.560
Sometimes we say a widget property, but
it's actually the widget constructor.

21
00:01:23.710 --> 00:01:25.820
We're calling the widget constructor.

22
00:01:25.820 --> 00:01:29.000
And these are actually
arguments to that constructor.

23
00:01:29.000 --> 00:01:35.890
So here it says all the paddings,
all the edges at 8, I can say 24.

24
00:01:35.890 --> 00:01:41.090
And this is expressed in
something similar CSS pixels.

25
00:01:41.090 --> 00:01:44.200
So it's independent from the resolution.

26
00:01:44.200 --> 00:01:48.310
So it's like saying 24 px in CSS, okay?

27
00:01:48.310 --> 00:01:49.499
So you can see now it's better.

28
00:01:49.499 --> 00:01:53.010
Instead of all,
there are other options here.

29
00:01:53.010 --> 00:01:57.947
You can say only, and now you pick,
for example, only top.

30
00:01:57.947 --> 00:02:00.997
Here you have all the options,
bottom, right.

31
00:02:00.997 --> 00:02:06.783
Because there are a column there,
it means that's a named argument, okay?

32
00:02:06.783 --> 00:02:09.210
And it's optional because
it's not forcing me.

33
00:02:09.210 --> 00:02:13.914
So now it's only at the right,
and here I can add more,

34
00:02:13.914 --> 00:02:16.998
the top, and also the left as well.

35
00:02:19.006 --> 00:02:20.510
Okay, makes sense?

36
00:02:20.510 --> 00:02:27.160
What if you want a padding also to the row
or to each children, well, a child?

37
00:02:27.160 --> 00:02:28.560
Let's go with the row.

38
00:02:28.560 --> 00:02:31.276
Click here, I'm adding a padding.

39
00:02:31.276 --> 00:02:35.209
Save, and now everything has a padding.

40
00:02:35.209 --> 00:02:37.459
What about font size?

41
00:02:37.459 --> 00:02:39.363
Well, actually font
size is another widget.

42
00:02:39.363 --> 00:02:41.587
So that's why I said not
everything is a widget.

43
00:02:41.587 --> 00:02:46.670
In that case, we need to talk to,
in this case, the text and

44
00:02:46.670 --> 00:02:52.730
see if we have more possible
arguments in the constructor, okay?

45
00:02:52.730 --> 00:02:55.040
And you can actually ask for
all the possibilities here.

46
00:02:56.830 --> 00:02:59.647
And there is one that says style.

47
00:02:59.647 --> 00:03:01.781
That is of type TextStyle.

48
00:03:03.812 --> 00:03:06.481
So let's see, TextStyle is another class.

49
00:03:06.481 --> 00:03:08.270
Everything is a class.

50
00:03:08.270 --> 00:03:13.728
So TextStyle is another class that has
a lot of possibilities, such a fontSize.

51
00:03:15.788 --> 00:03:20.143
So I will say fontSize 24.

52
00:03:20.143 --> 00:03:24.333
If I say,
now you see a much large hello, not,

53
00:03:24.333 --> 00:03:29.290
there is a const Text, okay,
with exclamation mark.

54
00:03:29.290 --> 00:03:30.351
Why is this complaining here?

55
00:03:30.351 --> 00:03:32.152
Because the TextStyle is not changing.

56
00:03:32.152 --> 00:03:35.206
So it's asking me to add const.

57
00:03:35.206 --> 00:03:41.841
If I add a trailing comma to the arguments
here, it will put this in different lines.

58
00:03:45.094 --> 00:03:51.396
And because it gets really messy,
the ID tried to help adding these hints.

59
00:03:51.396 --> 00:03:52.624
These are actually not comments.

60
00:03:52.624 --> 00:03:55.870
They are not part of
the actual source code.

61
00:03:55.870 --> 00:03:58.610
It's saying here we are closing the text.

62
00:03:58.610 --> 00:03:59.860
Here we are closing the row.

63
00:03:59.860 --> 00:04:01.903
Here we are closing the padding.

64
00:04:01.903 --> 00:04:05.808
So you know where you are, okay?

65
00:04:05.808 --> 00:04:06.647
Does it make sense?

66
00:04:09.236 --> 00:04:10.648
Any question at this point, yeah?

67
00:04:10.648 --> 00:04:14.737
&gt;&gt; Can you apply the TextStyle to, say,
you got a bunch of stuff in the row?

68
00:04:14.737 --> 00:04:18.320
&gt;&gt; Well, so let's say I wanna
apply the same style here.

69
00:04:18.320 --> 00:04:22.618
So you need to say style, and
yeah, you can copy and paste, but

70
00:04:22.618 --> 00:04:25.830
we don't like copy and pasting, right?

71
00:04:25.830 --> 00:04:28.940
So this is just a function build.

72
00:04:28.940 --> 00:04:32.670
We are returning something, so
we can write content before the return.

73
00:04:32.670 --> 00:04:37.023
So we can create the variable and
call this greetStyle or

74
00:04:37.023 --> 00:04:42.580
something like that, and do this,
and then use greetStyle.

75
00:04:42.580 --> 00:04:45.601
So we can create variables here
because this is just a function.

76
00:04:45.601 --> 00:04:49.100
So the build is just a function, okay?

77
00:04:49.100 --> 00:04:55.710
Something like this,
then we add a trailing comma,

78
00:04:55.710 --> 00:04:59.173
like so, and greetStyle.

79
00:04:59.173 --> 00:05:01.252
It's fine, what's going on?

80
00:05:01.252 --> 00:05:04.376
&gt;&gt; It could be a constant.

81
00:05:04.376 --> 00:05:05.656
&gt;&gt; It says give me a forward constant.

82
00:05:05.656 --> 00:05:08.502
Now, it's probably complaining
here because it's a variable.

83
00:05:08.502 --> 00:05:10.791
I think that's the issue.

84
00:05:10.791 --> 00:05:12.000
It's not a constant here?

85
00:05:12.000 --> 00:05:12.740
Yeah, you were right.

86
00:05:14.600 --> 00:05:16.380
Because it's a variable,
the style might change.

87
00:05:17.920 --> 00:05:20.530
And now I'm reusing the same style.

88
00:05:20.530 --> 00:05:22.653
And of course, this is just something.

89
00:05:22.653 --> 00:05:26.079
And now we can go back to the const here,
something that

90
00:05:26.079 --> 00:05:31.340
you can put on a separate class with all
your styles, and then just use them.

91
00:05:31.340 --> 00:05:33.280
So you can use OOP here.

92
00:05:33.280 --> 00:05:36.455
So if you wanna emulate CSS classes,

93
00:05:36.455 --> 00:05:41.996
you could do something like this,
put these objects, colors.

94
00:05:41.996 --> 00:05:44.490
For colors, we have other place, actually.

95
00:05:44.490 --> 00:05:48.672
But for these objects that you
wanna reuse along your app,

96
00:05:48.672 --> 00:05:51.840
you can create your own
repository of this.

97
00:05:51.840 --> 00:05:54.876
This is an object of type TextStyle, so

98
00:05:54.876 --> 00:05:59.020
you can put them in a container,
and then reuse them.

99
00:06:00.150 --> 00:06:02.466
So have in mind that there is a return.

100
00:06:02.466 --> 00:06:05.197
So you can do a lot of stuff
before the return, but

101
00:06:05.197 --> 00:06:07.860
the return is just one expression.

102
00:06:07.860 --> 00:06:10.190
So everything here is one expression.

103
00:06:10.190 --> 00:06:14.760
So you cannot do a lot of stuff within
the return, such as creating variables.

104
00:06:14.760 --> 00:06:17.846
Surely, you need to do
that before the return.

105
00:06:17.846 --> 00:06:22.290
&gt;&gt; The state of state management in
Flutter mirrors React in a lot of ways.

106
00:06:22.290 --> 00:06:25.680
It's been one of my biggest struggles
in building out Flutter apps.

107
00:06:25.680 --> 00:06:28.097
&gt;&gt; Yeah, it's copying that model.

108
00:06:28.097 --> 00:06:33.616
But to be honest, it's copying
the React model prehooks, okay?

109
00:06:33.616 --> 00:06:36.362
So it's actually how it was prehooks.

110
00:06:36.362 --> 00:06:40.430
On React now, you have hooks, and
you don't use that setState anymore,

111
00:06:40.430 --> 00:06:41.490
you use useState.

112
00:06:41.490 --> 00:06:44.187
And Flutter is not upgrading to that part.

113
00:06:44.187 --> 00:06:48.350
Flutter is still heavily
based in classes and OOP.

114
00:06:48.350 --> 00:06:53.840
So it's actually mimicking that situation,
but it's a design pattern.

115
00:06:53.840 --> 00:06:56.049
So as any new paradigm that you learn,

116
00:06:56.049 --> 00:06:59.569
any new design pattern that you learn,
it takes some time for

117
00:06:59.569 --> 00:07:03.659
your brain to make the connections
actually until you make the click.

118
00:07:03.659 --> 00:07:05.681
And you say, okay, I got it.

119
00:07:05.681 --> 00:07:07.830
And now you understand what's going on,
okay?

120
00:07:07.830 --> 00:07:14.456
So it will take time if this is
the first time you are dealing with this

121
00:07:14.456 --> 00:07:19.937
pattern of having a state-based
UI component, okay?

122
00:07:19.937 --> 00:07:24.850
Cool, well, now that we've done
that little widget that was

123
00:07:24.850 --> 00:07:28.534
just to understand the basics of widgets,
and

124
00:07:28.534 --> 00:07:34.135
also the basics of a stateful
widget versus a stateless widget.

125
00:07:34.135 --> 00:07:35.695
Have in mind this works on iOS and
Android.

126
00:07:35.695 --> 00:07:41.735
So I don't have a need to now go and
test on Android and iOS.

127
00:07:41.735 --> 00:07:47.317
So you should be confident enough that
this will work on all the platforms,

128
00:07:47.317 --> 00:07:50.450
they're exactly the same.

129
00:07:50.450 --> 00:07:55.190
Because remember that they're not using
the UI kits from each operating system.

130
00:07:56.230 --> 00:08:00.260
It's the same engine that is rendering
the same app on every platform.

131
00:08:01.260 --> 00:08:06.662
So unless you are using plugins, that's
something that we will mention later,

132
00:08:06.662 --> 00:08:11.520
there is no need for all the time
to test this on all the platforms.

133
00:08:11.520 --> 00:08:16.040
I mean, if you're happy with testing
on Chrome, you're good to go.

134
00:08:17.070 --> 00:08:21.332
Of course, at the end, you can try on
iOS and Android, but just pick one for

135
00:08:21.332 --> 00:08:22.563
testing and keep it.

136
00:08:22.563 --> 00:08:26.610
I think that probably
the Chrome is the fastest one.

137
00:08:26.610 --> 00:08:29.067
I mean, the hot reload is faster here, but

138
00:08:29.067 --> 00:08:32.629
it's not a big deal anyway on
the other emulator for this one.

