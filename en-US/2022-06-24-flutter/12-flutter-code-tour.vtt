WEBVTT

1
00:00:00.190 --> 00:00:05.168
So before actually touching our code,
let's briefly understand the folders that

2
00:00:05.168 --> 00:00:08.880
we have in our project,
both in VS code and in Android Studio.

3
00:00:08.880 --> 00:00:12.478
To be honest, the Android Studio project
is actually much more complex in terms of

4
00:00:12.478 --> 00:00:14.210
the files that you have inside, okay?

5
00:00:15.280 --> 00:00:17.140
But it's kind of the same thing.

6
00:00:17.140 --> 00:00:19.398
So let's see.
We are going to keep all the folders

7
00:00:19.398 --> 00:00:20.540
starting with dart.

8
00:00:20.540 --> 00:00:24.490
We know that dart means it's
a private folder for some tools.

9
00:00:24.490 --> 00:00:28.063
So this is part of the Dart compiler or
the Flutter SDK,

10
00:00:28.063 --> 00:00:30.740
so we don't care about those.

11
00:00:30.740 --> 00:00:31.890
Then we have an android folder.

12
00:00:32.980 --> 00:00:35.140
So what is the android folder?

13
00:00:35.140 --> 00:00:39.992
This is actually the Android Studio
project that Flutter is going

14
00:00:39.992 --> 00:00:42.860
to use to compile your app.

15
00:00:42.860 --> 00:00:48.200
If you know Android development, native
development, you can go out and open that

16
00:00:48.200 --> 00:00:53.710
folder in Android Studio and customize the
native part of your Flutter application.

17
00:00:53.710 --> 00:00:57.130
It will be like the container
of your Android application.

18
00:00:57.130 --> 00:00:57.740
Okay, it makes sense.

19
00:00:59.080 --> 00:01:01.560
If you're on a Mac,
you will also find the iOS application.

20
00:01:02.630 --> 00:01:05.140
The iOS folder contains an Xcode project.

21
00:01:05.140 --> 00:01:11.140
The same idea, this is actually
the project that is used as a wrapper for

22
00:01:11.140 --> 00:01:14.320
the Flutter application.

23
00:01:14.320 --> 00:01:16.288
Every time you build an app in Flutter,

24
00:01:16.288 --> 00:01:19.260
it's not going to change
the contents of those projects.

25
00:01:19.260 --> 00:01:21.415
Those projects are static,

26
00:01:21.415 --> 00:01:26.443
meaning that it's safe to open
these projects in Android Studio or

27
00:01:26.443 --> 00:01:31.573
Xcode and touch the project to
customize the project to your needs.

28
00:01:31.573 --> 00:01:34.585
So it's not going to be overriding this.

29
00:01:34.585 --> 00:01:38.301
I'm telling you this because if you
have ever played with PhoneGap or

30
00:01:38.301 --> 00:01:42.609
Apache Cordova, if you know what that is,
they were using the same technique.

31
00:01:42.609 --> 00:01:44.472
But the Android project and

32
00:01:44.472 --> 00:01:49.658
the Xcode project were actually being
overwritten every time you compile.

33
00:01:49.658 --> 00:01:53.910
So it's actually a very bad
idea to use those projects but

34
00:01:53.910 --> 00:01:56.929
here in Flutter, you can use a project.

35
00:01:56.929 --> 00:02:02.641
Then we have a build folder where the
final build will actually appear later.

36
00:02:02.641 --> 00:02:03.895
We'll talk about that later.

37
00:02:03.895 --> 00:02:06.140
We have a web folder.

38
00:02:06.140 --> 00:02:07.260
And what is the folder?

39
00:02:07.260 --> 00:02:12.830
The web folder is similar to the the iOS
folder and the Android folder.

40
00:02:12.830 --> 00:02:16.980
What we have here is
the wrapper of our web version.

41
00:02:16.980 --> 00:02:19.136
And what's a wrapper for the web?

42
00:02:19.136 --> 00:02:20.050
An index html.

43
00:02:21.280 --> 00:02:26.163
So you can actually open the index
html and customize the html.

44
00:02:26.163 --> 00:02:32.106
So changing the title, the metadata
because this is going to be the container,

45
00:02:32.106 --> 00:02:35.860
the wrapper of your Flutter application.

46
00:02:35.860 --> 00:02:37.840
Okay, make sense?

47
00:02:37.840 --> 00:02:43.970
Well, on tests, we will insert
our test suites for unit testing.

48
00:02:43.970 --> 00:02:46.880
Windows, it's something similar for
the Windows environment.

49
00:02:46.880 --> 00:02:49.874
I think if you want to compile
the Windows executable.

50
00:02:49.874 --> 00:02:56.430
And lib the for from library or
lib, is where our code will reside.

51
00:02:56.430 --> 00:02:59.782
To be honest,
I prefer SRC as a folder name,

52
00:02:59.782 --> 00:03:04.690
not lib because it's just like
standard libraries typically.

53
00:03:04.690 --> 00:03:11.100
But anyway, this is where Flutter
will store your dart files, okay?

54
00:03:11.100 --> 00:03:13.570
So we're going to integrate
all our files here.

55
00:03:14.660 --> 00:03:18.105
And the other file that we're
going to use a couple of times, so

56
00:03:18.105 --> 00:03:19.940
it's an important file.

57
00:03:19.940 --> 00:03:21.580
It's pubspec.yaml.

58
00:03:23.120 --> 00:03:26.610
There's a YAML file in case we
haven't played with YAML files before.

59
00:03:26.610 --> 00:03:28.710
It's a configuration file.

60
00:03:28.710 --> 00:03:32.530
So where we can actually
change some properties.

61
00:03:32.530 --> 00:03:34.710
We can add dependencies.

62
00:03:34.710 --> 00:03:39.250
We can set some things that
are used by the Flutter SDK.

63
00:03:39.250 --> 00:03:41.792
So every time we compile,
every time we build our app,

64
00:03:41.792 --> 00:03:44.570
it's going to take information from here.

65
00:03:44.570 --> 00:03:48.650
So this is like package.json
in an NPM project.

66
00:03:50.320 --> 00:03:52.370
It's the pubspec.yaml.

67
00:03:52.370 --> 00:03:55.690
So far, we've seen Dart as the language.

68
00:03:55.690 --> 00:03:58.630
And quickly,
how would you create a project.

69
00:03:58.630 --> 00:04:02.208
So what if you try to run your
app on an Android emulator or

70
00:04:02.208 --> 00:04:06.110
an IOS simulator in case you
have a Mac and it's not working.

71
00:04:07.680 --> 00:04:13.405
One thing that you can do if you have
already installed your Flutter SDK and

72
00:04:13.405 --> 00:04:15.987
the SD is, actually in the path,

73
00:04:15.987 --> 00:04:20.166
you can open a terminal or
use any terminal in your OS.

74
00:04:20.166 --> 00:04:23.947
And you can type flutter doctor.

75
00:04:23.947 --> 00:04:28.211
That will actually make a couple
of analysis within your computer.

76
00:04:28.211 --> 00:04:31.060
And it's going to check
if you have the SDKs.

77
00:04:31.060 --> 00:04:34.040
If you have the Android emulator set up.

78
00:04:34.040 --> 00:04:35.690
If you have everything set up.

79
00:04:35.690 --> 00:04:39.251
And in my case, you can see everything
is green, so I'm good to go.

80
00:04:39.251 --> 00:04:42.482
But you may have some reds there and

81
00:04:42.482 --> 00:04:47.732
every red item will give you
instructions on what to do.

82
00:04:47.732 --> 00:04:52.693
For example, the first time
you open the Android emulator,

83
00:04:52.693 --> 00:04:57.275
you need to actually accept
some licenses from Google.

84
00:04:57.275 --> 00:05:02.100
And flutter doctor will actually
tell you exactly what to do.

85
00:05:02.100 --> 00:05:06.856
You just need to copy and paste
something in the terminal to accept all

86
00:05:06.856 --> 00:05:11.470
those terms and conditions, so
then the emulator will work.

87
00:05:11.470 --> 00:05:14.564
So in any case, when you have
a problem with an emulator or

88
00:05:14.564 --> 00:05:18.440
with the Flutter compilation system,
just go and run flutter doctor.

