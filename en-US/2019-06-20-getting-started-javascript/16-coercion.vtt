WEBVTT

1
00:00:00.000 --> 00:00:01.818
&gt;&gt; Kyle Simpson: So
let's get into converting of types.

2
00:00:01.818 --> 00:00:04.450
Let's talk about how we
go from one to another.

3
00:00:04.450 --> 00:00:09.760
And I just want to point out that this
is absolutely necessary in all programs.

4
00:00:09.760 --> 00:00:13.842
All languages, all programs you have
to convert from one type to another.

5
00:00:13.842 --> 00:00:17.459
It would be total nonsense to consider
a program that never needed to go

6
00:00:17.459 --> 00:00:19.620
from a number to a string or vice-versa.

7
00:00:19.620 --> 00:00:23.409
You can't do anything hardly useful
whatsoever without some type of type

8
00:00:23.409 --> 00:00:24.480
conversion.

9
00:00:24.480 --> 00:00:27.750
And in a dynamically typed language
like JavaScript the way we do that is

10
00:00:27.750 --> 00:00:28.980
called coercion.

11
00:00:30.100 --> 00:00:34.590
So if I start out with msg1 that's
got this sentence fragment and

12
00:00:34.590 --> 00:00:37.500
then I have a numStudents
which is a number and

13
00:00:37.500 --> 00:00:41.970
then msg2 which is another character
string, another string segment.

14
00:00:41.970 --> 00:00:44.973
And I want to put all three of
those together into a message.

15
00:00:44.973 --> 00:00:46.918
In this case,
I'm going to print it to the console.

16
00:00:46.918 --> 00:00:51.104
But I might want to render it to the page,
or write it to a file or a database or

17
00:00:51.104 --> 00:00:51.850
something.

18
00:00:51.850 --> 00:00:53.064
Well, you have a problem.

19
00:00:53.064 --> 00:00:57.450
Because we've got two strings on
either side, and a number in between.

20
00:00:57.450 --> 00:01:01.750
And the only way that you can get
that number into that string is for

21
00:01:01.750 --> 00:01:08.040
the number to be converted to be coerced
into a string representation of itself.

22
00:01:08.040 --> 00:01:12.732
The good news is that numeric coercion,
or string conversion of a number,

23
00:01:12.732 --> 00:01:16.837
going from a number to a string,
that's pretty well thought of.

24
00:01:16.837 --> 00:01:19.219
I mean,
there's not much complexity around that.

25
00:01:19.219 --> 00:01:21.814
If you have a valid number, and
then you turn that into a string,

26
00:01:21.814 --> 00:01:23.704
it's probably gonna
look exactly like that.

27
00:01:23.704 --> 00:01:27.154
There are a few little corner cases,
with really, really giant numbers,

28
00:01:27.154 --> 00:01:30.137
that it may end up having
the exponentiation form or something.

29
00:01:30.137 --> 00:01:34.959
But most numbers that you work with, the
number 42 or the number 3.14 or whatever,

30
00:01:34.959 --> 00:01:38.650
the string form is going to look
exactly like what you might expect.

31
00:01:39.760 --> 00:01:44.170
And there's further ways that you can
control if you had a number with 15

32
00:01:44.170 --> 00:01:45.650
decimal places after it and

33
00:01:45.650 --> 00:01:49.420
you wanted to truncate it to
two relevant decimal places.

34
00:01:49.420 --> 00:01:52.960
There's methods for that,
the two fix method, for example.

35
00:01:52.960 --> 00:01:57.280
But the point is that 16 here has
to get converted to a string so

36
00:01:57.280 --> 00:02:02.049
that the plus operator on line 4 can
concatenate three strings together.

37
00:02:03.230 --> 00:02:08.500
The string concatenation that's happening
here is essentially an implicit coercion

38
00:02:08.500 --> 00:02:11.320
of that number to a string.

39
00:02:11.320 --> 00:02:13.590
And some people like implicit coercion.

40
00:02:13.590 --> 00:02:16.380
Some people really don't
like implicit coercion.

41
00:02:16.380 --> 00:02:19.571
I'm not going to pass a value judgment
on which one is right or wrong here.

42
00:02:19.571 --> 00:02:24.001
But I just wanna point out that we
are assuming something about the plus

43
00:02:24.001 --> 00:02:28.896
operator here, which is that it'll go
ahead and convert, coerce it for us.

44
00:02:28.896 --> 00:02:33.002
And sometimes it might be more preferable
to be explicit and tell it, no, no,

45
00:02:33.002 --> 00:02:35.384
no, I really want you
to convert the string.

46
00:02:35.384 --> 00:02:40.445
So that plus operator is overloaded with
some behavior that if at least one of

47
00:02:40.445 --> 00:02:45.350
the things that we're dealing with in
the operation is already a string,

48
00:02:45.350 --> 00:02:48.460
it's going to prefer string concatenation.

49
00:02:49.600 --> 00:02:53.570
Now you notice here on line 4, I've
got the back tick form of that string,

50
00:02:53.570 --> 00:02:57.000
which is basically doing kind of
the same thing as what we did before.

51
00:02:57.000 --> 00:02:59.640
It's just interpolating the value in and

52
00:02:59.640 --> 00:03:03.510
notice on line 4 I have
a plus with an empty quote.

53
00:03:03.510 --> 00:03:06.760
You may have seen that in JavaScript,
this is an extremely common,

54
00:03:06.760 --> 00:03:11.970
idiomatic way of converting something to
a string by adding the empty string to it.

55
00:03:11.970 --> 00:03:16.320
And again, we're taking advantage of the
fact that the plus operator is overloaded,

56
00:03:16.320 --> 00:03:19.780
that if at least one side
of it's already a string,

57
00:03:19.780 --> 00:03:22.040
everything else is gonna become a string.

58
00:03:22.040 --> 00:03:25.320
And it only does numeric math
if both of them are numbers.

59
00:03:25.320 --> 00:03:29.620
So this is another way of
implicitly coercing to a string.

60
00:03:29.620 --> 00:03:33.076
Basically, the pattern that we're
looking at here with this plus operator

61
00:03:33.076 --> 00:03:36.208
overloading is that the only time it
does math is when you have a number

62
00:03:36.208 --> 00:03:36.861
and a number.

63
00:03:36.861 --> 00:03:40.762
Any other time, number string,
string number or string string,

64
00:03:40.762 --> 00:03:43.704
you're gonna end up with
string concatenation.

65
00:03:43.704 --> 00:03:47.866
And it's kind of a regrettable choice to
have this overloading of the operator, but

66
00:03:47.866 --> 00:03:49.520
it is our reality in JavaScript.

67
00:03:49.520 --> 00:03:53.820
So you just have to get in your head,
if you want the mathematic addition,

68
00:03:53.820 --> 00:03:57.215
you've gotta make sure that
both of them are numbers.

69
00:03:57.215 --> 00:04:01.801
Now, if I take this addAStudent function
that I've defined here on line 1,

70
00:04:01.801 --> 00:04:05.628
and it's expecting to be able to
say + 1 to a thing that we have.

71
00:04:05.628 --> 00:04:09.845
We know that the plus operator is
susceptible to this type conversion

72
00:04:09.845 --> 00:04:13.020
problem or
this overloading of types problem.

73
00:04:13.020 --> 00:04:17.660
And so when we pass in something to
the addAStudent we need to make sure

74
00:04:17.660 --> 00:04:19.900
that it's gonna get treated as a number.

75
00:04:19.900 --> 00:04:24.345
If I pull a value off of some DOM element,
the way I'm doing here on line 6,

76
00:04:24.345 --> 00:04:26.408
it's going to come in as a string.

77
00:04:26.408 --> 00:04:30.670
Even though somebody typed the number
16 into an input box on a page,

78
00:04:30.670 --> 00:04:33.343
when we get it into our
JavaScript program,

79
00:04:33.343 --> 00:04:37.478
it's gonna be a string because all
value properties have strings.

80
00:04:37.478 --> 00:04:40.747
And if we wanna do math with it,
we're gonna have to convert.

81
00:04:40.747 --> 00:04:43.940
And that's what the number
function is doing here on line 6.

82
00:04:43.940 --> 00:04:47.040
It is converting from
a string to a number.

83
00:04:47.040 --> 00:04:49.550
And again, remember,
there's no new keyword here.

84
00:04:49.550 --> 00:04:51.060
Notice that there's no new keyword.

85
00:04:51.060 --> 00:04:55.240
We're just calling the function to
convert it from a string to a number.

86
00:04:55.240 --> 00:04:57.048
By the way,
number can be used with any value.

87
00:04:57.048 --> 00:05:01.590
So you can convert a boolean to a number,
you can convert a string to a number.

88
00:05:01.590 --> 00:05:06.090
Anything that can validly be
converted to a number, you can do so

89
00:05:06.090 --> 00:05:07.020
with this number function.

