WEBVTT

1
00:00:02.130 --> 00:00:04.930
&gt;&gt; Kyle Simpson: Al right, let's look
at our second unit of discussion

2
00:00:04.930 --> 00:00:06.440
under the three pillars.

3
00:00:06.440 --> 00:00:09.520
The second pillar we wanna look
at is the scope system, and

4
00:00:09.520 --> 00:00:11.900
specifically the closure system.

5
00:00:11.900 --> 00:00:14.160
So we're not gonna go too
deep into this topic.

6
00:00:14.160 --> 00:00:17.420
There's definitely a lot more to
go through both in the book, and

7
00:00:17.420 --> 00:00:21.580
also there's a companion course to
this one called Deep JS Foundations.

8
00:00:21.580 --> 00:00:24.760
If you wanna go further, I would
definitely recommend checking that out.

9
00:00:24.760 --> 00:00:29.510
Wanna look just a little bit at this idea
of how scopes work, and what they mean for

10
00:00:29.510 --> 00:00:32.060
how closure works in our programs.

11
00:00:32.060 --> 00:00:36.300
So just to give you a quick, practical
definition, what does scope mean?

12
00:00:36.300 --> 00:00:39.510
It means where the JavaScript
engine looks for things.

13
00:00:39.510 --> 00:00:43.190
And the things that it's looking for
are these variables, these identifiers.

14
00:00:43.190 --> 00:00:49.360
So when I say x equals 42, we need to
know where in the program to find x.

15
00:00:49.360 --> 00:00:50.490
Where in memory, that is.

16
00:00:50.490 --> 00:00:56.320
Where in memory is it, and what bucket
of organization does it fit into?

17
00:00:56.320 --> 00:00:58.669
And the rules for that are called scope.

18
00:00:58.669 --> 00:01:01.084
Same thing when I said console dot log y.

19
00:01:01.084 --> 00:01:06.090
Not only do I need to look up console and
log, but I also need to look up y.

20
00:01:06.090 --> 00:01:07.950
I need to figure out that variable.

21
00:01:07.950 --> 00:01:09.290
Where does that come from?

22
00:01:09.290 --> 00:01:10.330
Does it come from this scope?

23
00:01:10.330 --> 00:01:12.270
Does it come from
a different bucket of scope?

24
00:01:12.270 --> 00:01:16.246
So all the rules that go into figuring
that out, that's called scope.

25
00:01:18.508 --> 00:01:20.528
&gt;&gt; Kyle Simpson: Looking
at this example code,

26
00:01:20.528 --> 00:01:24.574
you'll notice that I have a line
one var teacher equals Kyle.

27
00:01:24.574 --> 00:01:25.321
And then,

28
00:01:25.321 --> 00:01:30.808
I have an assignment to a teacher variable
inside of our function on line four.

29
00:01:30.808 --> 00:01:33.038
I say teacher equals Suzy.

30
00:01:33.038 --> 00:01:38.646
Well, because there's no declaration for
a teacher inside of otherClass,

31
00:01:38.646 --> 00:01:44.441
the rules of scope tell us that it's gonna
find the variable in the outer scope.

32
00:01:44.441 --> 00:01:50.340
So line four is gonna end up pointing
at the variable out in the outer scope.

33
00:01:50.340 --> 00:01:53.072
It says that's the area of
memory that we need to assign.

34
00:01:53.072 --> 00:01:58.748
So when I've run the other class function
line nine, I've ended up changing

35
00:01:58.748 --> 00:02:03.828
that line one teacher variable from
the value Kyle to the value Suzy.

36
00:02:03.828 --> 00:02:07.508
That's part of what we mean when we
talk about scope, is the rules for

37
00:02:07.508 --> 00:02:10.190
figuring out how variables get set.

38
00:02:10.190 --> 00:02:13.510
Line one sets the variable
directly in the same scope, but

39
00:02:13.510 --> 00:02:19.780
line four ends up crossing that boundary
of scope by assigning a teacher variable.

40
00:02:19.780 --> 00:02:22.750
And when we looked it up, we found
it in an entirely different scope.

41
00:02:24.000 --> 00:02:27.620
But then, when I set topic,
what's gonna happen with that?

42
00:02:27.620 --> 00:02:30.590
Well, there is no topic declared
inside of otherClass, and

43
00:02:30.590 --> 00:02:33.940
there's also no topic
declared in the outer scope.

44
00:02:33.940 --> 00:02:37.919
And because this program is in
what we call non-strict mode,

45
00:02:37.919 --> 00:02:41.064
it's in the sloppy mode as it's so
referred to.

46
00:02:41.064 --> 00:02:45.529
Because of that, when I do the assignment
on line five to a variable that's never

47
00:02:45.529 --> 00:02:50.180
been declared, that ends up creating
a variable in the same global scope.

48
00:02:50.180 --> 00:02:52.090
It can't create it in otherClass.

49
00:02:52.090 --> 00:02:55.680
Because of the rules of scope,
it creates it into the global scope.

50
00:02:55.680 --> 00:02:59.930
So now we have both a teacher and
a topic that are out in the global scope.

51
00:02:59.930 --> 00:03:02.810
Which is why, down on lines 11 and 12,

52
00:03:02.810 --> 00:03:06.891
when we access both variables
by that name, teacher goes and

53
00:03:06.891 --> 00:03:11.227
finds the value Suzy, and
topic goes and finds the value React.

