WEBVTT

1
00:00:00.000 --> 00:00:01.400
&gt;&gt; Kyle Simpson: Now let's
talk about equality,

2
00:00:01.400 --> 00:00:03.480
the third topic underneath types and
coercion.

3
00:00:03.480 --> 00:00:04.930
Let's talk about equality.

4
00:00:04.930 --> 00:00:08.620
You've probably heard about the double
equals versus the triple equals.

5
00:00:08.620 --> 00:00:12.710
And you've probably heard, as most
people say, that we should just avoid

6
00:00:12.710 --> 00:00:15.870
the double equals all together and
only use the triple equals.

7
00:00:15.870 --> 00:00:17.680
And the way that's usually
explained is this,

8
00:00:17.680 --> 00:00:21.560
that the double equals will
check the value loosely.

9
00:00:21.560 --> 00:00:24.520
And that the triple equals will
check the value and the type, and

10
00:00:24.520 --> 00:00:26.560
that's called strict equality.

11
00:00:26.560 --> 00:00:32.360
It turns out that even though this is what
most people say, it's not actually true.

12
00:00:32.360 --> 00:00:36.230
It turns out that the difference
between them is whether or

13
00:00:36.230 --> 00:00:37.740
not coercion is allowed.

14
00:00:37.740 --> 00:00:41.640
The double equals allows coercion
when the types are different, and

15
00:00:41.640 --> 00:00:44.090
triple equals disallows coercion.

16
00:00:44.090 --> 00:00:46.950
And really that means that you
can only use triple equals

17
00:00:46.950 --> 00:00:48.170
when the types are the same.

18
00:00:50.070 --> 00:00:53.490
So, it's interesting that people
say never use the double equals.

19
00:00:53.490 --> 00:00:54.510
They're basically saying,

20
00:00:54.510 --> 00:00:58.122
I don't want to let JavaScript
convert from one type to another.

21
00:00:58.122 --> 00:01:01.410
I wanna always make sure
that my types are the same.

22
00:01:01.410 --> 00:01:05.900
Really triple equals comes down to saying,
I wanna do these checks but

23
00:01:05.900 --> 00:01:09.930
if I messed up and one of these things
is not the type that I thought it was.

24
00:01:09.930 --> 00:01:13.980
I want Java script to basically fail for
me.

25
00:01:13.980 --> 00:01:16.720
And I don't think that's
the best way to go about this.

26
00:01:16.720 --> 00:01:19.110
We don't want to not
know what our types are.

27
00:01:19.110 --> 00:01:20.760
We wanna know what the types are.

28
00:01:20.760 --> 00:01:22.090
And if we know what the types are,

29
00:01:22.090 --> 00:01:25.580
then we can choose specifically
whether we want coercion.

30
00:01:25.580 --> 00:01:26.955
Whether it's helpful or not.

31
00:01:26.955 --> 00:01:28.890
So let me give you a couple examples.

32
00:01:28.890 --> 00:01:33.090
If I have studentName1 is Frank,
and then I make studentName2.

33
00:01:33.090 --> 00:01:37.100
That's another string that
has studentName1 in it.

34
00:01:37.100 --> 00:01:40.730
So I just went from a string to a string,
no coercion happened there.

35
00:01:40.730 --> 00:01:45.268
Now, line four and five if I make
workshop elements is 16, and

36
00:01:45.268 --> 00:01:48.396
I make workshop element two is 16 plus 0.

37
00:01:48.396 --> 00:01:51.160
Both of those are numbers.

38
00:01:51.160 --> 00:01:53.410
So if I do studentName1 equal,

39
00:01:53.410 --> 00:01:58.700
equal studentName2, that is a string
double equal to the string.

40
00:01:58.700 --> 00:02:02.530
And we know those strings are already
equal cuz of how I assigned them.

41
00:02:02.530 --> 00:02:06.473
And if we did a triple equals,
it's also gonna be true.

42
00:02:06.473 --> 00:02:10.550
And then if you look at line ten and
11, whether we use the double equals or

43
00:02:10.550 --> 00:02:13.360
the triple equals,
they both result in true.

44
00:02:13.360 --> 00:02:19.470
The point that I'm making is, that when
the types are already the same, the double

45
00:02:19.470 --> 00:02:25.150
equals and the triple equals do exactly
the same thing in 100% of all cases.

46
00:02:25.150 --> 00:02:26.840
No corner cases whatsoever.

47
00:02:26.840 --> 00:02:30.020
When the types are already the same,
they do the same thing.

48
00:02:31.200 --> 00:02:35.480
And my advice to you as you go about this
journey of learning about JavaScript more.

49
00:02:35.480 --> 00:02:39.530
Is that you bring with you any habits that
you may have from another programming

50
00:02:39.530 --> 00:02:45.205
language, if any that you actually
do make your types more obvious.

51
00:02:45.205 --> 00:02:46.125
And if you're gonna do that,

52
00:02:46.125 --> 00:02:49.655
if you're gonna take the time and
the effort to make sure that every

53
00:02:49.655 --> 00:02:53.175
comparison that you do that it's
obvious that they're both strings.

54
00:02:53.175 --> 00:02:55.795
Or that it's obvious,
that they're both numbers.

55
00:02:55.795 --> 00:03:01.070
In those particular cases, double
equals and triple equals are identical.

56
00:03:01.070 --> 00:03:05.320
There's no reason to avoid the double
equals just because somebody said, hey,

57
00:03:05.320 --> 00:03:06.800
you should never use the double equals.

58
00:03:08.160 --> 00:03:09.570
It's only when they're different,

59
00:03:09.570 --> 00:03:13.830
it's only when the types are different
that they have a different behavior.

60
00:03:13.830 --> 00:03:17.960
And here you'll notice that actually
the double equals can be more convenient,

61
00:03:17.960 --> 00:03:22.260
at least more easily readily readable.

62
00:03:22.260 --> 00:03:27.642
So I have a case where I'm comparing
workshop1.topic whether it's null or

63
00:03:27.642 --> 00:03:28.570
undefined.

64
00:03:28.570 --> 00:03:32.399
And workshop2.topic whether it's null or
undefined.

65
00:03:32.399 --> 00:03:35.535
And on lines four through
seven I'm basically saying,

66
00:03:35.535 --> 00:03:37.550
can it be one or the other?

67
00:03:37.550 --> 00:03:41.430
Can it be null, or can it be undefined,
and I'm using the triple equals.

68
00:03:41.430 --> 00:03:44.970
But on lines 11 through 14,
I'm doing the exact same kind of check,

69
00:03:44.970 --> 00:03:48.310
with the exact same outcome,
but I'm using a double equals.

70
00:03:48.310 --> 00:03:50.590
And notice how much shorter that code is.

71
00:03:50.590 --> 00:03:54.560
Because I know that the double
equals coercively checks null and

72
00:03:54.560 --> 00:03:55.719
undefined equal to each other.

73
00:03:56.860 --> 00:04:01.770
And my claim is that lines 11 through
14 are not only the same functionally

74
00:04:01.770 --> 00:04:06.400
equivalent code, but that that is better
code because it is more readable.

75
00:04:06.400 --> 00:04:10.630
And remember how I define better is
because the reader is focused on the more

76
00:04:10.630 --> 00:04:12.050
important thing.

77
00:04:12.050 --> 00:04:13.808
The less important detail is whether or

78
00:04:13.808 --> 00:04:16.750
not there's this nuance in
whether it was null or undefined.

79
00:04:16.750 --> 00:04:20.449
That is an unimportant detail that
distracts the reader in lines four

80
00:04:20.449 --> 00:04:21.350
through seven.

81
00:04:21.350 --> 00:04:24.200
The more important detail is, I'm asking,

82
00:04:24.200 --> 00:04:29.670
is workshop1.topic empty, and
is workshop2.topic empty?

83
00:04:29.670 --> 00:04:34.320
So I would claim that lines 11 through
14 are focusing the reader on the more

84
00:04:34.320 --> 00:04:35.380
important thing.

85
00:04:35.380 --> 00:04:37.450
And by my definition,
that makes the code better.

86
00:04:38.720 --> 00:04:40.280
So that's one of the examples,

87
00:04:40.280 --> 00:04:43.240
there are more that we won't
really fully dive into here.

88
00:04:43.240 --> 00:04:46.390
But that's one of the examples
of why something like

89
00:04:46.390 --> 00:04:50.990
allowing Java script to take care of type
conversions can actually improve our code.

