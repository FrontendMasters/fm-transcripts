WEBVTT

1
00:00:00.110 --> 00:00:01.380
&gt;&gt; Kyle Simpson: Now I've
said this several times, so

2
00:00:01.380 --> 00:00:03.610
let's get into what is a variable?

3
00:00:03.610 --> 00:00:06.160
A variable is like a place in memory,

4
00:00:06.160 --> 00:00:10.080
you know in your computer that
it has memory, what we call RAM.

5
00:00:10.080 --> 00:00:12.390
And as a program is running,
it uses up and

6
00:00:12.390 --> 00:00:15.420
it stores bits of information
all over the RAM.

7
00:00:15.420 --> 00:00:17.608
And we don't know where it's being stored.

8
00:00:17.608 --> 00:00:19.940
As a matter of fact, our program has
no idea where it's being stored.

9
00:00:19.940 --> 00:00:22.872
The system, like our Mac OS or Windows,

10
00:00:22.872 --> 00:00:26.160
it's figuring all that out for
the program.

11
00:00:26.160 --> 00:00:30.402
And so we need a symbolic representation,
kind of like a pointer or

12
00:00:30.402 --> 00:00:35.110
an address or whatever sort of metaphor
you want to have in your head.

13
00:00:35.110 --> 00:00:40.070
It's a representation of some place in
memory, we don't really care where it is,

14
00:00:40.070 --> 00:00:43.310
but we know that our number
42's gonna be over here.

15
00:00:43.310 --> 00:00:46.528
And we know our string tile
is gonna be over here, and

16
00:00:46.528 --> 00:00:51.228
the way we do that inside of our program
is we give those things useful names.

17
00:00:51.228 --> 00:00:54.995
So we already saw this at
the outset in the intro, but

18
00:00:54.995 --> 00:01:01.360
if I say var name = "Kyle Simpson", name
is going to point to somewhere in memory.

19
00:01:01.360 --> 00:01:04.910
We don't know and we don't even really
care where but somewhere in memory and

20
00:01:04.910 --> 00:01:08.730
it's gonna say, the equal sign there
is going to take that string and

21
00:01:08.730 --> 00:01:10.940
put it in that place in memory.

22
00:01:10.940 --> 00:01:16.250
And then later if we want to access that,
we would use the variable name

23
00:01:16.250 --> 00:01:19.890
again, and it would give us that
string back, it would go and

24
00:01:19.890 --> 00:01:23.030
find it in that particular place in
memory and give us the string back.

25
00:01:24.080 --> 00:01:25.910
By the way,
just a quick note on operators.

26
00:01:25.910 --> 00:01:28.420
You'll notice here we
have a single equals,

27
00:01:28.420 --> 00:01:30.830
that's called the assignment operator.

28
00:01:30.830 --> 00:01:33.650
And the single equals being used for

29
00:01:33.650 --> 00:01:37.340
assignment is why we have to do
double equals for comparison.

30
00:01:37.340 --> 00:01:41.474
I know some of you might have been
thinking, why don't we say a equal b, or

31
00:01:41.474 --> 00:01:42.487
42 equal 42?

32
00:01:42.487 --> 00:01:46.539
Well it's because we have the single
equals reserved for assignment in our

33
00:01:46.539 --> 00:01:50.602
language and that's why we have double or
a triple equals two comparison.

34
00:01:50.602 --> 00:01:55.054
Okay, sometimes trip people up where they
meant to do one equals and did two, or

35
00:01:55.054 --> 00:01:58.582
they meant to do two and did one,
so something to be aware of.

36
00:01:58.582 --> 00:02:03.950
Line 3 and 4 are slightly different than
line 1 because in line 1, I both said that

37
00:02:03.950 --> 00:02:10.360
I needed a variable of the name name, but
I also assigned it a value, right away.

38
00:02:10.360 --> 00:02:13.720
I said, go and create this location
in memory, and give it a value.

39
00:02:13.720 --> 00:02:15.630
Line 3 does something slightly different.

40
00:02:15.630 --> 00:02:18.780
It says, hey, go give me some area in
memory, but I don't know what I want to

41
00:02:18.780 --> 00:02:22.510
put into it yet, so
just give it one of those empty values.

42
00:02:22.510 --> 00:02:25.850
In particular, it's gonna give
it the undefined empty value.

43
00:02:25.850 --> 00:02:31.593
And then later which just happens to be
line 4, we're gonna give it a value of 39.

44
00:02:31.593 --> 00:02:34.220
That's how old I am at the time right now.

45
00:02:34.220 --> 00:02:39.003
So we're putting in the value
39 into that location of memory

46
00:02:39.003 --> 00:02:42.172
that is referred to in our program as age.

47
00:02:42.172 --> 00:02:46.230
Line 6 does something very similar but
it takes an array of values.

48
00:02:46.230 --> 00:02:50.331
And so, the program and the operating
system would have to go figure out a bunch

49
00:02:50.331 --> 00:02:54.058
of places in memory, one for the quote
Brandon and one for quote mark and

50
00:02:54.058 --> 00:02:56.452
for any other values
that were on that array.

51
00:02:56.452 --> 00:02:59.150
And I've got a section
off all this memory and

52
00:02:59.150 --> 00:03:02.820
then have one reference to
that whole section of memory.

53
00:03:02.820 --> 00:03:05.109
And that reference is what
we call friends here.

54
00:03:06.130 --> 00:03:09.980
Now line 8 does something interesting and
it's tempting to sort of skip over.

55
00:03:09.980 --> 00:03:12.920
But before we even look
at the friends.length or

56
00:03:12.920 --> 00:03:17.420
the friends with that square brackets
of 1, let's look at the console part.

57
00:03:17.420 --> 00:03:24.010
Because that's also a variable,
console is referring to a special built in

58
00:03:24.010 --> 00:03:30.260
thing that the JavaScript environment is
given by the browser or by Node.js or

59
00:03:30.260 --> 00:03:35.360
wherever you're running your JavaScript,
it's given this thing called console.

60
00:03:35.360 --> 00:03:39.780
It's a special area in memory with a very
special set of behaviors attached to it.

61
00:03:39.780 --> 00:03:44.530
And when we do that dot operator there
on line 8, we're basically saying,

62
00:03:44.530 --> 00:03:51.160
I want to go and access something in that
location at a certain name called log.

63
00:03:51.160 --> 00:03:54.210
Well, log happens to be a method,
a function,

64
00:03:54.210 --> 00:03:56.950
that can print things to
our developer console.

65
00:03:56.950 --> 00:04:00.800
So we're actually saying go find console,
wherever that is in memory, and

66
00:04:00.800 --> 00:04:01.840
then access it.

67
00:04:01.840 --> 00:04:06.140
And then when we say .log, we're saying
now access something inside of it.

68
00:04:07.190 --> 00:04:11.094
And then we are telling it what
to print to our console and

69
00:04:11.094 --> 00:04:13.837
that's why it says friends.length,

70
00:04:13.837 --> 00:04:19.260
we're saying go find the friends thing
which we know is an array from line 6.

71
00:04:19.260 --> 00:04:24.491
Access something at that location which
isn't just like a position like zero or

72
00:04:24.491 --> 00:04:27.170
one, but it's called the property.

73
00:04:27.170 --> 00:04:31.230
Remember arrays are objects so
they can have properties.

74
00:04:31.230 --> 00:04:33.670
And one of those special
properties is the length.

75
00:04:33.670 --> 00:04:37.874
And that length would tell us that our
friends array at this time has two

76
00:04:37.874 --> 00:04:40.650
element, it would say length 2.

77
00:04:40.650 --> 00:04:44.418
So we're saying print whatever
that value is, and in this case,

78
00:04:44.418 --> 00:04:48.350
it would print the value 2
to the developer console.

79
00:04:48.350 --> 00:04:51.760
And then line 9, we do something
very similar, we say console.log.

80
00:04:51.760 --> 00:04:54.750
And then we say friends[1].

81
00:04:54.750 --> 00:04:59.544
Remember I've referred to the idea of
arrays and we declare an array like

82
00:04:59.544 --> 00:05:03.473
line 6 with square brackets,
but when we say a variable and

83
00:05:03.473 --> 00:05:07.656
a bracket immediately after that,
now we're saying access.

84
00:05:07.656 --> 00:05:12.501
Line 6 is creating an array and line 9,
the bracket 1 there that's accessing

85
00:05:12.501 --> 00:05:17.126
something inside of that, kind of like
the dot operator, but in this case,

86
00:05:17.126 --> 00:05:20.280
we're accessing in the numeric position.

87
00:05:20.280 --> 00:05:23.634
So friends[1], that's gonna return Marc,

88
00:05:23.634 --> 00:05:26.920
not Brandon because
the array is zero indexed.

89
00:05:28.840 --> 00:05:31.329
So these are how we refer to these values,

90
00:05:31.329 --> 00:05:36.540
even though they're gonna be stored in
all kinds of random places in our memory.

91
00:05:36.540 --> 00:05:38.722
These are how we refer to them and
keep track of them.

92
00:05:38.722 --> 00:05:44.360
How we deal with them and
how we manage them inside of our programs.

93
00:05:46.780 --> 00:05:49.500
A couple of other operators
that I just highlighted here,

94
00:05:49.500 --> 00:05:53.310
youâ€™ll notice on line 8 that parenthesis,
the open parenthesis,

95
00:05:53.310 --> 00:05:58.410
that's also kind of technically
an operator and it means function call.

96
00:05:58.410 --> 00:06:02.420
Actually parenthesis can be used, it's
another one of those overloaded cases.

97
00:06:02.420 --> 00:06:06.530
It can be used to mean lots of things,
when it comes immediately after

98
00:06:06.530 --> 00:06:11.290
a variable like log,
it means execute a function.

99
00:06:11.290 --> 00:06:15.736
But it may show up in another operation
where it's just grouping things

100
00:06:15.736 --> 00:06:19.811
together like, you might put
parentheses around 1 plus 3, and

101
00:06:19.811 --> 00:06:23.757
then do something else with that
number like multiply it by 6.

102
00:06:23.757 --> 00:06:27.411
And that's a grouping, and you may
remember that from math class, kind of

103
00:06:27.411 --> 00:06:32.290
grouping things together to decide what
things happen before with other things.

104
00:06:32.290 --> 00:06:33.580
So we have the parentheses operator.

105
00:06:33.580 --> 00:06:38.310
And then up on line 1,
we have that little, bizarre semicolon.

106
00:06:38.310 --> 00:06:39.730
What's the semicolon about?

107
00:06:39.730 --> 00:06:41.970
Well, that's an also kind of an operator.

108
00:06:41.970 --> 00:06:45.110
In this case,
it's not really doing anything to a value.

109
00:06:45.110 --> 00:06:50.350
But it's just a part of the syntax that
is denoting that we finished a statement.

110
00:06:50.350 --> 00:06:56.800
It's very similar to if I just used
an English sentence and then I finished,

111
00:06:56.800 --> 00:07:00.860
and there would have been a period at
the end of the sentence when I finish.

112
00:07:00.860 --> 00:07:05.440
And it's very similar in programming,
we are telling the program, I don't have

113
00:07:05.440 --> 00:07:10.240
anything else to say in this particular
sentence, so this sentence is done.

114
00:07:10.240 --> 00:07:12.910
Before we move on,
let's actually execute that code and

115
00:07:12.910 --> 00:07:17.120
make sure you understand how those values
are being pulled out of that array.

116
00:07:17.120 --> 00:07:21.290
So I've got it loaded up here in RunJS and
I click run.

117
00:07:21.290 --> 00:07:24.650
And you'll notice that the first
console log statement says,

118
00:07:24.650 --> 00:07:26.750
two because there are two
elements in the array,

119
00:07:26.750 --> 00:07:31.430
that's the length of the array,
and friends[1] gives us Marc.

120
00:07:31.430 --> 00:07:35.690
But if I were to change this array,
if I were to add my friend Alex to

121
00:07:35.690 --> 00:07:39.407
the beginning of this list and
then we run the code again,

122
00:07:39.407 --> 00:07:44.218
you notice now we are going to get three
as the length of the friends array.

123
00:07:44.218 --> 00:07:48.797
And now friends[1] is pointing at Brandon
because we've changed the relative

124
00:07:48.797 --> 00:07:50.940
position of the values in that array.

125
00:07:50.940 --> 00:07:53.460
So again, this re-emphasizes why it's so
important for

126
00:07:53.460 --> 00:07:58.180
you to be able to run the code and see
how it works, that concretely see means

127
00:07:58.180 --> 00:08:01.990
in your head how JavaScript is actually
executing the things that you're writing.

128
00:08:03.240 --> 00:08:07.890
Now there are other kinds of operations
that we're gonna do that can only be

129
00:08:07.890 --> 00:08:10.730
done with actual variables.

130
00:08:10.730 --> 00:08:15.342
So we talked about some operators
before like the plus and the minus, and

131
00:08:15.342 --> 00:08:20.028
the exclamation mark, those can be done
even with values like you saw with

132
00:08:20.028 --> 00:08:22.464
the number 42 or the Boolean false.

133
00:08:22.464 --> 00:08:26.670
But we have some operators which can
only be used if thereâ€™s a variable.

134
00:08:26.670 --> 00:08:29.980
And itâ€™s because these operators
not only do something but

135
00:08:29.980 --> 00:08:35.016
then they reassign,
they set a value back into that location.

136
00:08:35.016 --> 00:08:38.030
So line 3, we have the ++ operator and

137
00:08:38.030 --> 00:08:43.390
it is saying, go in increment,
add one to whatever is in age,

138
00:08:43.390 --> 00:08:48.530
but also, you should reassign
that value right back to age.

139
00:08:48.530 --> 00:08:54.980
So it would have been similar to if we
had said, age is equal to age plus 1.

140
00:08:54.980 --> 00:08:58.960
Go compute whatever age plus 1 is,
which in this case would be 40.

141
00:08:58.960 --> 00:09:01.790
And then assign that back
into the variable age.

142
00:09:03.110 --> 00:09:07.350
Line 4 does something very similar except
instead of only incrementing by 1,

143
00:09:07.350 --> 00:09:11.380
the += allows it to tell it
how much we wanna increment.

144
00:09:11.380 --> 00:09:12.910
But because the equals is there,

145
00:09:12.910 --> 00:09:16.600
you can see very clearly there's
gonna be a reassignment back.

146
00:09:16.600 --> 00:09:20.198
So now,
we will have moved age from the value 39.

147
00:09:20.198 --> 00:09:23.630
We will have reassigned
the value 40 on line 3.

148
00:09:23.630 --> 00:09:29.369
And then on line 4, we will reassigned it
a new value which will be the value 42.

149
00:09:29.369 --> 00:09:33.350
Which is why on line 6, when I just
have a variable reference there,

150
00:09:33.350 --> 00:09:37.402
Iâ€™m just basically saying,
whatâ€™s in the variable at this place and

151
00:09:37.402 --> 00:09:41.980
at this moment in the memory somewhere,
what value is in that location?

152
00:09:41.980 --> 00:09:44.419
Well, itâ€™s the value 42.

