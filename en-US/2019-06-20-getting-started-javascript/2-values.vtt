WEBVTT

1
00:00:02.543 --> 00:00:03.631
&gt;&gt; Kyle Simpson: So let's dive in.

2
00:00:03.631 --> 00:00:05.133
Values.

3
00:00:05.133 --> 00:00:09.873
Here's an example of a variety of
values that you can express, again,

4
00:00:09.873 --> 00:00:11.614
in a Javascript program.

5
00:00:11.614 --> 00:00:14.135
Line one, you see just the number 42.

6
00:00:14.135 --> 00:00:16.424
Line two, you see 3.14.

7
00:00:16.424 --> 00:00:20.161
Now, there might be a temptation to think
that those are different kinds of values

8
00:00:20.161 --> 00:00:23.880
because one of them has some decimals
on it and one of them doesn't.

9
00:00:23.880 --> 00:00:27.004
In the JavaScript language
specifically between

10
00:00:27.004 --> 00:00:31.402
numbers that have decimal places
after them and numbers that don't.

11
00:00:31.402 --> 00:00:35.970
So 42 and 3.14,
those are both just numbers.

12
00:00:35.970 --> 00:00:39.590
Some languages will distinguish, and
they'll say something with a certain

13
00:00:39.590 --> 00:00:42.270
number of decimal places is
a particular kind of number.

14
00:00:42.270 --> 00:00:45.600
But here we're just gonna
talk about numbers.

15
00:00:45.600 --> 00:00:49.383
There in line 4 you see,
those double quotes that are around it.

16
00:00:49.383 --> 00:00:51.862
And by the way you could use
double quotes or single quote.

17
00:00:51.862 --> 00:00:56.683
So you'll see a variety of different
styles of coding as you explore.

18
00:00:56.683 --> 00:00:58.788
I just choose to use double
quotes to illustrate.

19
00:00:58.788 --> 00:01:00.850
This is what we call a string.

20
00:01:00.850 --> 00:01:05.256
A string is a collection of characters
that make up something that we can,

21
00:01:05.256 --> 00:01:08.823
in English, can actually pronounce,
we can say out loud.

22
00:01:08.823 --> 00:01:13.640
It's sort of a word or a sentence,
a set of characters that go together.

23
00:01:13.640 --> 00:01:17.822
And so we're basically saying this is how
I can put together something that I might

24
00:01:17.822 --> 00:01:21.466
print out a message to the screen,
or write some information to a file.

25
00:01:21.466 --> 00:01:23.845
That's why we use a string.

26
00:01:23.845 --> 00:01:29.350
Now you notice on line 6 and 7,
we have values like true and false.

27
00:01:29.350 --> 00:01:34.750
Those two values go together in a sort of
kind or a class of value called Boolean.

28
00:01:34.750 --> 00:01:39.377
Boolean is actually the name of a famous
mathematician from hundreds of years ago,

29
00:01:39.377 --> 00:01:40.377
George Boolean.

30
00:01:40.377 --> 00:01:42.767
But we get this idea of true and false and

31
00:01:42.767 --> 00:01:47.005
you may of heard that computers work
in a bit wise with zeros and ones.

32
00:01:47.005 --> 00:01:50.003
There's a same concept here
that there is an either one or

33
00:01:50.003 --> 00:01:53.074
the other can't be anything
other than those two values.

34
00:01:53.074 --> 00:01:57.414
So, if you have Boolean,
it's either true or false.

35
00:01:57.414 --> 00:02:00.643
And then you notice null and
undefined, those two values.

36
00:02:00.643 --> 00:02:04.312
Those are two different kinds
of what we call empty values.

37
00:02:04.312 --> 00:02:07.602
Now, empty value is a little bit strange,
like what does it mean for

38
00:02:07.602 --> 00:02:08.886
there to not be any value?

39
00:02:08.886 --> 00:02:12.425
Or the sort of a placeholder for
some missing value, but

40
00:02:12.425 --> 00:02:16.000
it's an really important
concept in programming.

41
00:02:16.000 --> 00:02:19.978
And each programming language has their
sort of own flavor of what it means to

42
00:02:19.978 --> 00:02:20.919
have emptiness.

43
00:02:20.919 --> 00:02:23.720
Either something that has
never been given a value or

44
00:02:23.720 --> 00:02:26.979
something that used to have a value and
it doesn't anymore.

45
00:02:26.979 --> 00:02:28.408
There's sort of an emptiness.

46
00:02:28.408 --> 00:02:33.810
It's a little bit of a strange historic
fact why JavaScript has two of them.

47
00:02:33.810 --> 00:02:37.870
It might seem like we only need one,
like either undefined or

48
00:02:37.870 --> 00:02:42.220
null but there's some historical reasons
why we end up with two of these.

49
00:02:42.220 --> 00:02:45.480
My general recommendation is for
you to try to do your programming

50
00:02:45.480 --> 00:02:48.395
in such a way that makes those
sort of indistinguishable.

51
00:02:48.395 --> 00:02:51.873
Don't really try to get too wrapped
up in I need a null here but

52
00:02:51.873 --> 00:02:53.272
I need an undefined here.

53
00:02:53.272 --> 00:02:56.958
There are a couple of places that you
may run into where the distinction is

54
00:02:56.958 --> 00:02:57.630
important.

55
00:02:57.630 --> 00:02:59.461
But for the most part null and undefined,

56
00:02:59.461 --> 00:03:01.722
they're just kinda two
different ways of saying.

57
00:03:01.722 --> 00:03:05.057
This thing is empty,
there is no other value here, so

58
00:03:05.057 --> 00:03:09.440
we're just denoting the fact that
there's a kind of emptiness to it.

59
00:03:09.440 --> 00:03:11.439
Now lines 12 and
13 get a little bit more interesting.

60
00:03:11.439 --> 00:03:15.947
Because on line 12 and 13 we would move
out of what we call primitive values,

61
00:03:15.947 --> 00:03:19.470
like we've seen thus far,
into these non primitive values.

62
00:03:19.470 --> 00:03:24.161
And all we mean by primitive is that it
is like literally written as an actual

63
00:03:24.161 --> 00:03:27.410
value is rather than
a collection of values.

64
00:03:27.410 --> 00:03:30.190
So you notice on line 12,
that's what we call an array.

65
00:03:30.190 --> 00:03:33.736
An array is basically just
an ordered set of lists.

66
00:03:33.736 --> 00:03:35.798
I have a favorite little
anecdote about this.

67
00:03:35.798 --> 00:03:40.721
My son, when he was like two or three
years old, I got one of these books and

68
00:03:40.721 --> 00:03:42.643
it was called A is for array.

69
00:03:42.643 --> 00:03:46.660
It's a great little kids book
to teach kids about programming.

70
00:03:46.660 --> 00:03:47.753
And it uses the alphabet or

71
00:03:47.753 --> 00:03:50.870
signs of different programming term
to each letter of the alphabet.

72
00:03:50.870 --> 00:03:53.920
And I remember we got as for
array, the very first letter and

73
00:03:53.920 --> 00:03:56.000
I was trying to help him
understand this concept.

74
00:03:56.000 --> 00:03:57.300
They do a good job in the book.

75
00:03:57.300 --> 00:03:59.915
What i was trying to help him
understand the concept, and

76
00:03:59.915 --> 00:04:02.381
what we did was just line up
some blocks on the ground.

77
00:04:02.381 --> 00:04:05.240
And I was teaching him this
whole idea about arrays.

78
00:04:05.240 --> 00:04:07.442
And arrays are what we call zero index,

79
00:04:07.442 --> 00:04:11.716
meaning the first thing in the array is
actually at position zero rather than

80
00:04:11.716 --> 00:04:14.205
maybe what we might
assume is position one.

81
00:04:14.205 --> 00:04:17.936
There's a long historical reason
why that's true in computers.

82
00:04:17.936 --> 00:04:22.220
But I was trying to help him understand
this idea of zero indexed into an array.

83
00:04:22.220 --> 00:04:26.325
And so we lined up several of his
blocks and I remember playing with him.

84
00:04:26.325 --> 00:04:29.885
And I'd say all right, now pick up block
zero, and he would pick up the first one.

85
00:04:29.885 --> 00:04:33.282
Then I'd say pick up block one and
he'd pick up the one right next to it.

86
00:04:33.282 --> 00:04:37.572
So that's basically what an array is just
an ordered collection of these values.

87
00:04:37.572 --> 00:04:41.750
And they have these kind of numeric
association because of where they are,

88
00:04:41.750 --> 00:04:43.510
where is their position.

89
00:04:43.510 --> 00:04:44.890
That's how we go and get something.

90
00:04:44.890 --> 00:04:48.520
So if I wanted to get
the value 3 out of the array,

91
00:04:48.520 --> 00:04:53.190
I would basically need to get the value
at position 2 rather than at position 3.

92
00:04:53.190 --> 00:04:54.909
And those values,
of course, can be anything.

93
00:04:54.909 --> 00:04:59.165
I've got numbers here but they could be
any of those other values like numbers,

94
00:04:59.165 --> 00:05:00.610
strings, booleans.

95
00:05:00.610 --> 00:05:03.050
In fact, they could be even other arrays.

96
00:05:03.050 --> 00:05:06.111
Or they could be objects
like we see on line 13.

97
00:05:06.111 --> 00:05:08.834
Now line 13,
it's a little bit different than an array.

98
00:05:08.834 --> 00:05:11.290
It's also a collection of values.

99
00:05:11.290 --> 00:05:14.140
It's not a primitive single value but
a collection of values.

100
00:05:14.140 --> 00:05:18.482
But it's a different kind of collection
because rather than the values being

101
00:05:18.482 --> 00:05:22.643
in positions that are like numbers,
like position zero or position one.

102
00:05:22.643 --> 00:05:26.330
These values are at positions
that are given names.

103
00:05:26.330 --> 00:05:28.370
Almost like you have an address at home,

104
00:05:28.370 --> 00:05:32.453
and that's a specific location within
your neighborhood and within your city.

105
00:05:32.453 --> 00:05:36.700
The mailman knows exactly where to go
to deliver the packages or the mail.

106
00:05:36.700 --> 00:05:41.848
A key is what it's called, instead of
an object, otherwise known as a property.

107
00:05:41.848 --> 00:05:45.892
It's a specific named vocation,
and we use a string.

108
00:05:45.892 --> 00:05:48.240
So you notice here, I have name.

109
00:05:48.240 --> 00:05:51.210
That's the literal key name or

110
00:05:51.210 --> 00:05:55.060
property name for
this particular position in an object.

111
00:05:55.060 --> 00:05:58.903
And I could have either surrounded that
property or that key with a string,

112
00:05:58.903 --> 00:06:02.080
with the double quotes, or
not surrounded it, as I did here.

113
00:06:02.080 --> 00:06:05.349
Most of the time, you don't surround it
with quotes, but every once in a while,

114
00:06:05.349 --> 00:06:05.890
you need to.

115
00:06:05.890 --> 00:06:10.542
And then on the other side of that colon,
that's where we have a value.

116
00:06:10.542 --> 00:06:13.681
And here I chose to put the value Kyle but
of course,

117
00:06:13.681 --> 00:06:18.802
it could have been any other value like a
number or another array or another object.

118
00:06:18.802 --> 00:06:22.674
So these are the kind of basic building
blocks in any sort of programming

119
00:06:22.674 --> 00:06:23.327
language.

120
00:06:23.327 --> 00:06:24.821
You have values.

121
00:06:24.821 --> 00:06:27.290
You need to do things with those values.

122
00:06:27.290 --> 00:06:28.382
And we'll get into that
in just a little bit.

123
00:06:28.382 --> 00:06:32.395
But you have to first understand how to
represent some concept that you have in

124
00:06:32.395 --> 00:06:33.022
your head.

125
00:06:33.022 --> 00:06:36.521
If you're doing something that
is mathematically related,

126
00:06:36.521 --> 00:06:40.641
like maybe adding up the amount of
money to charge somebody for an order.

127
00:06:40.641 --> 00:06:43.550
Of course you need
values that are numbers.

128
00:06:43.550 --> 00:06:45.480
And if you have a message that
you wanna print to the screen,

129
00:06:45.480 --> 00:06:49.200
of course you're gonna have strings
that you're gonna be manipulating or

130
00:06:49.200 --> 00:06:49.740
working with.

131
00:06:49.740 --> 00:06:52.403
Or adding together or
moving around or things like that.

132
00:06:52.403 --> 00:06:57.740
So these values represent tasks
that we want to accomplish.

133
00:06:57.740 --> 00:07:01.088
And that have sort of intrinsic
behaviors associated with them.

134
00:07:01.088 --> 00:07:05.998
You can do math with a number,
you can't really do math with a string.

135
00:07:05.998 --> 00:07:08.687
That doesn't make sense, but
there are operations that you do

136
00:07:08.687 --> 00:07:11.130
with a string that don't really
make sense for a number.

