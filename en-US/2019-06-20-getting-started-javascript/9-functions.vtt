WEBVTT

1
00:00:00.070 --> 00:00:02.700
&gt;&gt; Kyle Simpson: We have seen
a number of times already, and

2
00:00:02.700 --> 00:00:04.770
you've heard me say over and
over function.

3
00:00:04.770 --> 00:00:06.840
And some of you are like,
why does he keep saying it?

4
00:00:06.840 --> 00:00:08.560
What is a function?

5
00:00:08.560 --> 00:00:12.100
Well, similar to the idea of
wanting to repeat things,

6
00:00:12.100 --> 00:00:17.310
there are times when we have a collection
of statements like a paragraph in a novel.

7
00:00:17.310 --> 00:00:22.050
But we wanna do that multiple times
in different places, not multiple

8
00:00:22.050 --> 00:00:26.460
times in a row but like do it one time and
a little bit later do it again.

9
00:00:26.460 --> 00:00:29.150
And maybe a minute later do it again.

10
00:00:29.150 --> 00:00:34.410
And that's when we wanna group that
information into what we call a function.

11
00:00:34.410 --> 00:00:38.610
Actually technically the computer
science programming term for

12
00:00:38.610 --> 00:00:40.570
this would be a procedure.

13
00:00:40.570 --> 00:00:43.894
It's a collection of things
that we want it to do.

14
00:00:43.894 --> 00:00:49.370
So greetStudent like the one we were
using just a moment ago with the looping.

15
00:00:49.370 --> 00:00:54.550
greetStudent takes the students name,
I mean a student object in this case.

16
00:00:54.550 --> 00:00:56.636
And we know it's an object
because of line three.

17
00:00:56.636 --> 00:01:02.747
You see student.name, that implies that
student is an object in memory that

18
00:01:02.747 --> 00:01:08.024
has a property or a key called name and
we're gonna go access that.

19
00:01:08.024 --> 00:01:12.582
First we're gonna access student and then
we gonna access the name property on it.

20
00:01:12.582 --> 00:01:17.060
So we gonna just print out Hello, and
then whatever that students name is,

21
00:01:17.060 --> 00:01:21.370
by the way, you'll notice these
little backtick operators here.

22
00:01:21.370 --> 00:01:27.080
That's the sort of cousin to the double
quotes and single quotes, this

23
00:01:27.080 --> 00:01:32.850
is a special kind of string in JavaScript
that's called an interpolated string.

24
00:01:32.850 --> 00:01:36.590
I know that's a big mouthful,
interpolated string.

25
00:01:36.590 --> 00:01:39.420
All that really means is
a string where we're gonna

26
00:01:39.420 --> 00:01:42.760
put other kinds of variable
values directly inside of it.

27
00:01:42.760 --> 00:01:44.500
And that's what you see on line three,

28
00:01:44.500 --> 00:01:49.530
that special dollar sign with the curly
brace thing wrapped around student.name.

29
00:01:49.530 --> 00:01:51.730
That says, go find whatever that is, and

30
00:01:51.730 --> 00:01:55.490
just put it right in place
inside of this string.

31
00:01:55.490 --> 00:01:59.700
Which is why when we actually do
the console.log, it would print out Hello,

32
00:01:59.700 --> 00:02:01.350
Matt, or Hello, Sarah.

33
00:02:03.060 --> 00:02:07.470
So, that's a procedure it uses
the word function to note it and

34
00:02:07.470 --> 00:02:10.190
it has a name, called greetStudent.

35
00:02:10.190 --> 00:02:14.350
It has online one there,
it has student that's called a parameter.

36
00:02:14.350 --> 00:02:17.950
That's the input to it and
it's just doing something, but

37
00:02:17.950 --> 00:02:20.610
you'll notice that it's not
really giving us anything back.

38
00:02:21.660 --> 00:02:25.630
That's really why we call it a procedure
because it's not giving us anything back.

39
00:02:25.630 --> 00:02:30.090
It's doing something which is important
but not giving us a value back.

40
00:02:30.090 --> 00:02:34.030
What's an example of something where
it would give us a value back?

41
00:02:34.030 --> 00:02:38.247
Well, this is a little bit more truer
to the spirit of a function, and

42
00:02:38.247 --> 00:02:42.057
functions a special word that
actually comes to us from math.

43
00:02:42.057 --> 00:02:45.350
And some of you may have heard of
functional programming before.

44
00:02:45.350 --> 00:02:48.970
That's the idea of writing these things,
not just that they do stuff, but

45
00:02:48.970 --> 00:02:52.030
that they compute values and
they give them back to us.

46
00:02:52.030 --> 00:02:55.790
So here I have what's called
a function called time remaining.

47
00:02:55.790 --> 00:02:57.870
It takes two inputs now.

48
00:02:57.870 --> 00:03:02.810
It takes a time elapsed variable and
an end time variable.

49
00:03:02.810 --> 00:03:05.920
Those have a special term
they're called parameters.

50
00:03:05.920 --> 00:03:10.500
The inputs to a function and
you'll notice that it returns those back,

51
00:03:10.500 --> 00:03:14.140
it computes an expression and
return as the value.

52
00:03:14.140 --> 00:03:20.860
So we say endTime minus timeEllapsed and
then we say return whatever that value is.

53
00:03:20.860 --> 00:03:26.693
So if timeEllapsed comes in as 42,
you see that on line five and

54
00:03:26.693 --> 00:03:32.201
if endTime comes in at 240,
then when we subtract those,

55
00:03:32.201 --> 00:03:38.698
subtract 42 from 240,
what we have left, of course, is 198.

56
00:03:38.698 --> 00:03:42.257
That on line five we assign
to the variable left and

57
00:03:42.257 --> 00:03:46.338
then we see line seven that
that value 198 is in there.

58
00:03:46.338 --> 00:03:50.613
So time remaining here is a function
because it takes some inputs and

59
00:03:50.613 --> 00:03:55.263
it computes an output for us, it doesn't
really go and do other stuff like

60
00:03:55.263 --> 00:04:00.076
print to the screen it just says let me
do some work and give you a result back.

61
00:04:00.076 --> 00:04:03.848
When we give you a computational results
back, let's try to run a function and

62
00:04:03.848 --> 00:04:06.930
mess around with the arguments and
see how it changes.

63
00:04:06.930 --> 00:04:10.420
We know if we run it with these
existing argument we get 198.

64
00:04:10.420 --> 00:04:14.500
But, if I were to change this
around a little bit, maybe say,

65
00:04:14.500 --> 00:04:18.518
make that 140 then were gonna
get different result 98.

66
00:04:18.518 --> 00:04:22.384
And what if I were to change this
expression around a little bit,

67
00:04:22.384 --> 00:04:25.820
what if I were to make this
an expression divided by two and

68
00:04:25.820 --> 00:04:29.276
then all of a sudden, whoops,
we've got a syntax area.

69
00:04:29.276 --> 00:04:32.864
That's important for you to be able to see
the kinds of things that are happening in

70
00:04:32.864 --> 00:04:35.190
your program and
sometimes you make a mistake.

71
00:04:35.190 --> 00:04:37.280
I have an accidental parentheses here.

72
00:04:37.280 --> 00:04:38.560
So I take that back out.

73
00:04:38.560 --> 00:04:41.240
We run it again and
now we get a different result.

