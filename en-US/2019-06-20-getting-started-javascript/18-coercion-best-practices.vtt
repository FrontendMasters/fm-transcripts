WEBVTT

1
00:00:00.040 --> 00:00:02.630
&gt;&gt; Kyle Simpson: The point I wanna get
across is that a quality JavaScript

2
00:00:02.630 --> 00:00:06.360
program always embraces
these types of conversion.

3
00:00:06.360 --> 00:00:09.140
And we have to make sure that the types

4
00:00:09.140 --> 00:00:13.060
that we're involving in those
operations are as clear as possible.

5
00:00:13.060 --> 00:00:17.570
It's not the case that having JavaScript
do these conversions is buggy.

6
00:00:17.570 --> 00:00:21.310
It is the case that if we are not
clear on what the types are,

7
00:00:21.310 --> 00:00:25.690
then we can accidentally miss those
corner cases that we're talking about.

8
00:00:25.690 --> 00:00:29.360
So a quality JavaScript program
makes those things very obvious.

9
00:00:29.360 --> 00:00:32.963
Make it obvious that if you're doing some
math, everything's already a number.

10
00:00:32.963 --> 00:00:34.379
And if its not already a number,

11
00:00:34.379 --> 00:00:37.820
make sure it's obvious that
you're turning it into a number.

12
00:00:37.820 --> 00:00:41.770
If you make your types obvious in your
programs, the vast majority of all

13
00:00:41.770 --> 00:00:45.340
those weird quirky corner cases
that you've heard people moan and

14
00:00:45.340 --> 00:00:47.360
complain about go away.

15
00:00:47.360 --> 00:00:50.083
They really do go away as
long as it is very clear.

16
00:00:50.083 --> 00:00:53.261
I'm doing something numeric and
both of these things are a number,

17
00:00:53.261 --> 00:00:56.116
then we really don't have a lot
of corner cases to worry about

18
00:00:58.184 --> 00:00:59.136
&gt;&gt; Kyle Simpson: Doug Crockford,

19
00:00:59.136 --> 00:01:02.563
many of you know that name,
he's famous for a number of things,

20
00:01:02.563 --> 00:01:06.350
including the book that he wrote,
JavaScript, The Good Parts.

21
00:01:06.350 --> 00:01:08.660
And in JavaScript, The Good Parts,
he has this statement.

22
00:01:08.660 --> 00:01:12.772
He says if a feature is sometimes
useful and sometimes dangerous, and

23
00:01:12.772 --> 00:01:16.551
if there is a better option,
then always use the better option.

24
00:01:16.551 --> 00:01:19.850
Now this is an oft-quoted idea.

25
00:01:19.850 --> 00:01:23.819
It's thrown around the JavaScript and even
the greater programming communities a lot.

26
00:01:23.819 --> 00:01:28.970
And it sounds very wise at the outset,
but I am troubled by this statement.

27
00:01:28.970 --> 00:01:32.980
And I wanna point out why I'm troubled by
it, because it uses terminology that is

28
00:01:32.980 --> 00:01:38.670
not particularly well agreed upon across
the broader programming communities.

29
00:01:38.670 --> 00:01:42.518
So for example, what does he really
mean by useful and dangerous?

30
00:01:42.518 --> 00:01:45.968
If I asked you or you or
you what useful and dangerous means,

31
00:01:45.968 --> 00:01:49.180
I'm gonna get three to
five different answers.

32
00:01:49.180 --> 00:01:53.250
I'm gonna get a lot of different answers
to precisely what does useful and

33
00:01:53.250 --> 00:01:54.230
dangerous mean.

34
00:01:54.230 --> 00:01:56.380
And so
if we don't have a clear definition for

35
00:01:56.380 --> 00:02:02.040
those words, then we can't really
make much action out of this wisdom.

36
00:02:02.040 --> 00:02:05.566
And in particular,
the one that bothers me the most is,

37
00:02:05.566 --> 00:02:08.574
how do we even define
what better option means?

38
00:02:08.574 --> 00:02:09.790
Is there a better option?

39
00:02:09.790 --> 00:02:12.870
How can you definitely say there is?

40
00:02:12.870 --> 00:02:15.801
By the way,
his quote is used in terms of saying,

41
00:02:15.801 --> 00:02:21.110
don't use all these coercion mechanisms in
JavaScript because there's a better way.

42
00:02:21.110 --> 00:02:23.940
But really,
there isn't actually a better way.

43
00:02:23.940 --> 00:02:28.130
And I would claim that the better way
ends up producing worse programs.

44
00:02:28.130 --> 00:02:31.020
Programs that are more cluttered,
they're harder to communicate.

45
00:02:31.020 --> 00:02:34.040
And yes, you might avoid one
particular set of problems, but you

46
00:02:34.040 --> 00:02:37.970
introduce a different set of problems, and
then you blame that on some other part of

47
00:02:37.970 --> 00:02:43.340
JavaScript, instead of simply saying let's
step back and ask what does useful mean?

48
00:02:43.340 --> 00:02:45.852
What does dangerous mean and
what does better mean?

49
00:02:45.852 --> 00:02:47.633
So to answer that question,

50
00:02:47.633 --> 00:02:51.875
I wanna give you a very brief
alternate definition for those words.

51
00:02:51.875 --> 00:02:55.080
If we're gonna use this quote, I'm gonna
give you a different alternate definition.

52
00:02:55.080 --> 00:02:59.040
First of all, I would say useful is when
the reader is focused on what's important.

53
00:03:00.260 --> 00:03:04.570
So if the reader of your code can see
something and they are focused on

54
00:03:04.570 --> 00:03:08.150
the thing that they really should be
focused on, then I'd call that useful.

55
00:03:09.460 --> 00:03:12.570
If the reader is focused on something and

56
00:03:12.570 --> 00:03:15.510
they really can't figure out what's gonna
happen, I would call that dangerous.

57
00:03:16.900 --> 00:03:19.260
So we shouldn't have stuff
that's hard to figure out.

58
00:03:19.260 --> 00:03:21.320
You should avoid things that
are hard to figure out.

59
00:03:23.010 --> 00:03:26.430
And most importantly, to determine
whether something is better or not,

60
00:03:26.430 --> 00:03:30.940
I would say that when the reader
understands the code better than before,

61
00:03:30.940 --> 00:03:32.720
then that code is better.

62
00:03:32.720 --> 00:03:35.810
That is the ultimate metric is
that is it more understandable,

63
00:03:35.810 --> 00:03:37.850
is it more readable, then it's better.

64
00:03:37.850 --> 00:03:41.480
Now you may disagree with those
definitions, but I think at least

65
00:03:41.480 --> 00:03:45.510
putting a pin on some definition and
saying this is what I mean by useful,

66
00:03:45.510 --> 00:03:48.620
this is what I mean by dangerous,
and this is what I mean by better.

67
00:03:48.620 --> 00:03:51.370
At least we can have a more
productive conversation

68
00:03:51.370 --> 00:03:53.480
about the decisions we should
be making in our code.

