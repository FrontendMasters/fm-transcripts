WEBVTT

1
00:00:00.480 --> 00:00:04.080
So we have this concept of the stack
like we've been talking about before.

2
00:00:04.080 --> 00:00:06.600
And it's this series of bytes
just like everything else.

3
00:00:06.600 --> 00:00:09.523
But there's the separate region
of memory called the heap,

4
00:00:09.523 --> 00:00:11.960
which has its own sequence of bytes.

5
00:00:11.960 --> 00:00:14.120
And basically, they're just used for
different purposes.

6
00:00:14.120 --> 00:00:17.460
The stack is used for all the function
calling things we've been talking about.

7
00:00:17.460 --> 00:00:21.171
Where we pass arguments around, and
the stack gets bigger as you call more and

8
00:00:21.171 --> 00:00:24.900
more nested functions, and then it gets
smaller as those functions return.

9
00:00:26.700 --> 00:00:28.620
The heap has nothing to
do with function calling.

10
00:00:28.620 --> 00:00:31.240
It's just as big bucket of space.

11
00:00:31.240 --> 00:00:34.290
And basically, it's used as sort
of like a helper for the stack.

12
00:00:34.290 --> 00:00:37.624
So things that are running on
the stack can use the heap for

13
00:00:37.624 --> 00:00:42.142
sort of like separate storage and use
the fact that it doesn't play by the same

14
00:00:42.142 --> 00:00:45.500
rules as the stack to give
a little bit more flexibility.

15
00:00:46.870 --> 00:00:50.329
So this VecMetadata struct is
gonna live on the stack, but

16
00:00:50.329 --> 00:00:54.220
first_elem_index is actually
going to be index into the heap.

17
00:00:55.740 --> 00:00:59.641
So for example, let's say I said
let nums equals vec [ 1, 2, 3 ].

18
00:00:59.641 --> 00:01:02.532
So I'm making a vector of three numbers.

19
00:01:02.532 --> 00:01:05.774
Basically, this first elem index,

20
00:01:05.774 --> 00:01:11.860
this use size right here is going
to refer to the first open slot.

21
00:01:11.860 --> 00:01:16.458
The first open index that
the russ like runtime system

22
00:01:16.458 --> 00:01:21.269
figured out is available to store this 1,
2, and 3.

23
00:01:21.269 --> 00:01:26.182
So let's say that this bookkeeping
system when we run this vec macro,

24
00:01:26.182 --> 00:01:31.390
it says okay, I need to find enough
room for three elements in this vec.

25
00:01:31.390 --> 00:01:33.400
These are gonna be u8s.

26
00:01:33.400 --> 00:01:38.760
Does anyone have, anywhere in the heap can
I find three places, three u8s in a row.

27
00:01:38.760 --> 00:01:40.200
And someplace to store them.

28
00:01:40.200 --> 00:01:42.623
And maybe the bookkeeping
system comes back and says,

29
00:01:42.623 --> 00:01:45.320
I found that there's three
available right here at slot 2.

30
00:01:45.320 --> 00:01:48.792
Maybe you could have said zero, could have
said seven, but it happened to say, okay,

31
00:01:48.792 --> 00:01:50.770
I found enough space for them right here.

32
00:01:50.770 --> 00:01:54.287
So that means that this two is gonna go
into this VecMetadata struct saying this

33
00:01:54.287 --> 00:01:55.630
is where the elements begin.

34
00:01:56.660 --> 00:01:59.039
And then the length is going to refer
to the length of the vector, so

35
00:01:59.039 --> 00:02:00.250
it's gonna say three.

36
00:02:00.250 --> 00:02:03.747
So that's gonna be, the first
element is gonna be at index two.

37
00:02:03.747 --> 00:02:07.844
And then because the length is three, we
know it's gonna be these three elements,

38
00:02:07.844 --> 00:02:11.061
right here are the three elements
that are representing the vec,

39
00:02:11.061 --> 00:02:12.830
those three are stored on the heap.

40
00:02:13.910 --> 00:02:15.960
And again,
we'll get back to capacity later.

41
00:02:15.960 --> 00:02:18.340
So with these two combined,
we can say, okay, great.

42
00:02:18.340 --> 00:02:20.830
We know we have enough length for
this, we've stored the length.

43
00:02:20.830 --> 00:02:23.308
This is what's gonna get returned
when we call the length method.

44
00:02:23.308 --> 00:02:24.830
And then we also know where to put them.

45
00:02:24.830 --> 00:02:28.160
So we say great, put the one here,
put the two there and put the three there.

46
00:02:28.160 --> 00:02:28.740
Everything is good.

47
00:02:28.740 --> 00:02:30.534
So now we have successfully
stored our data and

48
00:02:30.534 --> 00:02:33.210
we now have this thing that we
can pass around on the stack.

49
00:02:33.210 --> 00:02:36.001
Which gives us a way to go
look that data up on the heap.

50
00:02:37.894 --> 00:02:40.653
So how then say nums.push(85).

51
00:02:40.653 --> 00:02:42.542
Well, hopefully that's no problem,

52
00:02:42.542 --> 00:02:45.555
I can just say I'll just bump
the length up from three to four.

53
00:02:45.555 --> 00:02:47.883
First_elem_index doesn't change,
that stays at 2,

54
00:02:47.883 --> 00:02:50.075
because that's still the index
of our first element.

55
00:02:50.075 --> 00:02:53.140
All that happens is we go and write
this 85 into that next piece of memory.

56
00:02:54.720 --> 00:02:56.157
No problem.

57
00:02:56.157 --> 00:02:59.190
But there's at least a potential problem
that can happen here that can't really

58
00:02:59.190 --> 00:03:00.290
happen on the stack.

59
00:03:00.290 --> 00:03:02.600
This gets into sort of
the downside of the heap.

60
00:03:03.660 --> 00:03:05.882
We've got this bookkeeping system, and

61
00:03:05.882 --> 00:03:09.110
it told us that there were
three slots available here.

62
00:03:09.110 --> 00:03:10.822
Now if we get lucky when we call push,

63
00:03:10.822 --> 00:03:13.530
there's a fourth slot
available right here.

64
00:03:13.530 --> 00:03:16.538
If so, great, we can just write our
85 there, increase the length by 1,

65
00:03:16.538 --> 00:03:18.400
everything's fine.

66
00:03:18.400 --> 00:03:21.913
But what happens if we then
push another number like 29 and

67
00:03:21.913 --> 00:03:26.990
the bookkeeping system says actually,
sorry, this is in use, like somebody else.

68
00:03:26.990 --> 00:03:30.825
Some other function was doing another
vec somewhere, and I actually told it,

69
00:03:30.825 --> 00:03:33.220
it was okay to store a vec here so,
this is in use.

70
00:03:33.220 --> 00:03:35.094
And if you try to put your 29 there,

71
00:03:35.094 --> 00:03:38.920
it's gonna overwrite some other 4
vecs first element, that's no good.

72
00:03:38.920 --> 00:03:40.880
We don't want that to happen.

73
00:03:40.880 --> 00:03:42.853
So what do we do if this happens?

74
00:03:42.853 --> 00:03:45.223
If the bookkeeping system says,
yeah, I'm sorry,

75
00:03:45.223 --> 00:03:49.030
you can't put something there because it's
in use by somebody else, what do you do?

76
00:03:50.170 --> 00:03:52.663
Well, unfortunately, in that case,

77
00:03:52.663 --> 00:03:56.450
basically what we need to do is
we need to go back and redo it.

78
00:03:56.450 --> 00:03:58.330
We need to say, find a new spot,

79
00:03:58.330 --> 00:04:01.416
I now need to need when we
went back earlier and said.

80
00:04:01.416 --> 00:04:05.785
Hey, bookkeeping system, can you
find me three consecutive elements?

81
00:04:05.785 --> 00:04:09.125
Now I can do that again, except this time
we need to find five consecutive elements.

82
00:04:09.125 --> 00:04:13.352
We need to say yeah, can you find me
five consecutive elements anywhere in

83
00:04:13.352 --> 00:04:17.185
the heap and I'm gonna go and
copy every single one of my elements.

84
00:04:17.185 --> 00:04:19.345
I copy the one over into that,
the two over into that,

85
00:04:19.345 --> 00:04:21.540
the three over that, 85 over that.

86
00:04:21.540 --> 00:04:23.110
Update my first elem index.

87
00:04:23.110 --> 00:04:25.400
And then I can finally
push the 29 in over there.

88
00:04:26.540 --> 00:04:29.638
Now of course, you can imagine what if we
happen to find a slot that was exactly

89
00:04:29.638 --> 00:04:33.330
five elements long and then there happens
to be something else right after that.

90
00:04:33.330 --> 00:04:35.907
We could get unlucky again,
if we call push again, and

91
00:04:35.907 --> 00:04:39.340
it might need to do that whole
copying dance all over again.

92
00:04:39.340 --> 00:04:42.960
This can get really expensive and
really performance intensive,

93
00:04:42.960 --> 00:04:45.230
which is why we have this capacity thing.

94
00:04:46.320 --> 00:04:51.238
So capacity is basically a way that lets
us prevent this problem from happening or

95
00:04:51.238 --> 00:04:54.660
at least reduce the chances
of it happening.

96
00:04:54.660 --> 00:04:58.689
So basically, instead of saying
let nums = vec [ 1, 2, 3 ].

97
00:04:58.689 --> 00:05:03.687
If we call it Vec : : with_capacity(5),
what that saying is basically, I

98
00:05:03.687 --> 00:05:08.460
want you to give me back a new VecMetadata
struct where the first elem index is

99
00:05:08.460 --> 00:05:13.705
pointing to something that has at least
five slots open, like five elements open.

100
00:05:13.705 --> 00:05:16.681
Not even using them, yet
necessarily I'm gonna go through and

101
00:05:16.681 --> 00:05:18.690
use push to populate it later.

102
00:05:18.690 --> 00:05:23.308
But this I'm saying, I want upfront
to say please make sure that I have

103
00:05:23.308 --> 00:05:26.772
enough room to store five
elements inside this vec.

104
00:05:26.772 --> 00:05:30.560
And so you can use this as this is
considered a good sort of a best practice.

105
00:05:30.560 --> 00:05:34.163
You can use this as a way to minimize
the incidence of needing to do that really

106
00:05:34.163 --> 00:05:37.432
expensive copying over because after
you did a bunch of pushes you ran

107
00:05:37.432 --> 00:05:38.330
out of space.

108
00:05:38.330 --> 00:05:43.350
So if you anticipate wanting to call
push on a vec a number of times.

109
00:05:43.350 --> 00:05:47.070
Try to call with capacity ahead of time
to make sure that you have enough room.

110
00:05:48.410 --> 00:05:51.688
Okay, so revising our sort
of previous mental model,

111
00:05:51.688 --> 00:05:55.749
we still have first element x being
the same thing but the capacity,

112
00:05:55.749 --> 00:06:01.120
not the length is actually what determines
how many total slots we're taking up.

113
00:06:01.120 --> 00:06:03.980
Length is just how many slots
we are currently taking up.

114
00:06:03.980 --> 00:06:08.540
But as far as memory goes, capacity
is really what determines the total

115
00:06:08.540 --> 00:06:13.020
number of slots that we have
available to push things into.

116
00:06:13.020 --> 00:06:16.116
So if our length is less than our
capacity, like if we have a capacity of

117
00:06:16.116 --> 00:06:19.319
five, and we've only got three
elements in there, that tells us okay,

118
00:06:19.319 --> 00:06:22.785
it's fine to just go ahead and push up to
two more things in there before we might

119
00:06:22.785 --> 00:06:25.750
potentially need to find a new home for
this thing and move it over.

120
00:06:27.450 --> 00:06:30.890
Okay, now in contrast,
remember we saw earlier,

121
00:06:30.890 --> 00:06:36.360
our example of an array with three
elements, like it just [u8; 3].

122
00:06:36.360 --> 00:06:37.800
I mean, how does this work?

123
00:06:37.800 --> 00:06:42.260
Well, just goes on the stack because we
know how big it is than compile to nine.

124
00:06:42.260 --> 00:06:46.487
So, I know this is like kind of
a long winded explanation here, but

125
00:06:46.487 --> 00:06:52.480
it really does illustrate, like just how
vastly more complicated vec is than array.

126
00:06:52.480 --> 00:06:54.100
Just because its sizes dynamic.

127
00:06:54.100 --> 00:06:58.720
There's just so much more going on
that has to be taken into account.

128
00:06:58.720 --> 00:07:01.330
There's that whole bookkeeping system,
which is not trivial.

129
00:07:01.330 --> 00:07:03.410
That's its own whole source of complexity.

130
00:07:03.410 --> 00:07:06.219
Also the bookkeeping system, depending on
how long you're program has been running

131
00:07:06.219 --> 00:07:08.200
and what kind of data is
been running through it.

132
00:07:08.200 --> 00:07:11.156
It can actually take it potentially quite
a long time to come back with an answer of

133
00:07:11.156 --> 00:07:13.780
like where it found space on the heap for
doing things.

134
00:07:13.780 --> 00:07:16.950
So sort of the moral of the story is,
yeah, the heap is more flexible.

135
00:07:16.950 --> 00:07:18.590
It does let you get this sort of dynamism.

136
00:07:18.590 --> 00:07:22.930
It lets you have things that don't
really necessarily work on the stack,

137
00:07:22.930 --> 00:07:27.180
like being able to return a vec
that has sort of a dynamic length.

138
00:07:27.180 --> 00:07:32.276
But that comes at a serious cost of
complexity, and especially a performance.

139
00:07:32.276 --> 00:07:36.880
And so when we talk about some of these
rusts specific features like the bar

140
00:07:36.880 --> 00:07:41.706
checker and stuff like that, really all
of those things turn out to be dealing

141
00:07:41.706 --> 00:07:46.461
with the heap and trying to efficiently
manage all the complexity that comes

142
00:07:46.461 --> 00:07:49.236
with it without sacrificing performance.

143
00:07:49.236 --> 00:07:56.030
Okay, so to sum up,
we talked about vectors versus arrays.

144
00:07:56.030 --> 00:07:59.010
Arrays have this sort of hard coded size.

145
00:07:59.010 --> 00:08:02.493
And although that's inconvenient, it
does mean that it's very straightforward

146
00:08:02.493 --> 00:08:05.940
to pass arrays around on the stack because
they work just like tuples and structs.

147
00:08:05.940 --> 00:08:08.780
There's nothing complicated about them.

148
00:08:08.780 --> 00:08:12.571
Vectors do let you have a variable
lengths, you can push stuff onto them,

149
00:08:12.571 --> 00:08:14.510
you can pop them off.

150
00:08:14.510 --> 00:08:18.494
But that means that we can't actually
store the entire veck on the stack because

151
00:08:18.494 --> 00:08:22.002
we don't know how much space to like
pre allocate for return values and

152
00:08:22.002 --> 00:08:23.930
things like that.

153
00:08:23.930 --> 00:08:26.759
So arrays can be stack
allocated whereas vectors

154
00:08:26.759 --> 00:08:30.284
have to be heap allocated
because they're dynamic length.

155
00:08:30.284 --> 00:08:34.301
And as previously mentioned, what we
will see in future sections is that,

156
00:08:34.301 --> 00:08:36.404
this trade off sort of sets the stage for

157
00:08:36.404 --> 00:08:40.200
the number one biggest factor in
programming language performance.

