WEBVTT

1
00:00:00.060 --> 00:00:01.320
Okay, let's talk about methods.

2
00:00:01.320 --> 00:00:02.960
So we saw these earlier
with the inner method.

3
00:00:02.960 --> 00:00:05.750
And then now we're going to talk
about how to actually make your own.

4
00:00:05.750 --> 00:00:08.092
So let's say we've got
our color enum here, and

5
00:00:08.092 --> 00:00:09.920
I want to introduce a method to it.

6
00:00:09.920 --> 00:00:11.310
Here's how I can do that.

7
00:00:11.310 --> 00:00:14.788
First I use the impl keyword which
is short for implementation, and

8
00:00:14.788 --> 00:00:17.190
I'm going to say impl color.

9
00:00:17.190 --> 00:00:19.728
Inside that I'm going
to define a function.

10
00:00:19.728 --> 00:00:22.320
So here I've decided to
name my function rgb,

11
00:00:22.320 --> 00:00:25.650
rgb is going to take a color and
return a tuple of three u8s.

12
00:00:26.730 --> 00:00:29.314
And then I'm also going to make another
function called new which is going to take

13
00:00:29.314 --> 00:00:31.570
a red green and a blue and
then return a color.

14
00:00:31.570 --> 00:00:34.424
And you can kind of guess what
the implementations of these might be.

15
00:00:34.424 --> 00:00:37.163
The rgb one is gonna do a match
on our color and say if it's red,

16
00:00:37.163 --> 00:00:39.617
then return you know,
the rgb is associated with red.

17
00:00:39.617 --> 00:00:42.945
If it's yellow to it for yellow,
if it's green to green, if it's custom,

18
00:00:42.945 --> 00:00:46.657
probably just returning the red, green or
blue that it's gotten the custom value.

19
00:00:46.657 --> 00:00:49.229
And likewise with new, it's probably
going to look at the red, green and blue.

20
00:00:49.229 --> 00:00:53.445
And decide either to turn it into
a red variant, a yellow variant,

21
00:00:53.445 --> 00:00:58.890
a green variant or a custom as a fallback
if it can't find any, any good matches.

22
00:00:58.890 --> 00:01:03.059
Okay, so let's say we want
to define a new color, and

23
00:01:03.059 --> 00:01:09.636
we say let red = Color : : new 250, 0,
0, and let purple is color new 100,

24
00:01:09.636 --> 00:01:13.833
0, 50, and let r, g,
b = Color : : rgb purple.

25
00:01:13.833 --> 00:01:16.745
So what's happening here,
is that we've essentially used

26
00:01:16.745 --> 00:01:19.713
that same names pacing concept
that we did with the variants,

27
00:01:19.713 --> 00:01:23.470
except now it's applied to
the actual color enum itself.

28
00:01:23.470 --> 00:01:26.350
So this is in terms of like
what the functions are doing.

29
00:01:26.350 --> 00:01:28.010
This is not changing anything.

30
00:01:28.010 --> 00:01:29.820
This is just the plain old function.

31
00:01:29.820 --> 00:01:31.176
It's just got a namespace now.

32
00:01:31.176 --> 00:01:32.901
It's inside this color namespace,

33
00:01:32.901 --> 00:01:36.620
which means I call it by saying
color colon colon in front of it.

34
00:01:36.620 --> 00:01:38.213
So similarly to how with variants,

35
00:01:38.213 --> 00:01:42.040
this is a way to have multiple variants
in the same scope that are named red.

36
00:01:42.040 --> 00:01:44.912
Now I can have multiple functions in
the same scope that are names new,

37
00:01:44.912 --> 00:01:46.340
I can just namespace them.

38
00:01:46.340 --> 00:01:49.504
According to maybe this is color : : new,
but maybe I'd have something else,

39
00:01:49.504 --> 00:01:50.416
it's either an enum.

40
00:01:50.416 --> 00:01:54.321
You can also do this with structs that
would say, you know, user colon colon new.

41
00:01:54.321 --> 00:01:57.844
You can imagine the name new kind of tends
to come up a lot when you're building data

42
00:01:57.844 --> 00:01:59.250
structures.

43
00:01:59.250 --> 00:02:01.963
And similarly with the rgb function here.

44
00:02:01.963 --> 00:02:05.933
So, this is a way that you can
use impl to namespace things.

45
00:02:05.933 --> 00:02:10.687
Now, there's an additional thing that
you can do with this namespacing,

46
00:02:10.687 --> 00:02:13.100
which is what we get into methods.

47
00:02:13.100 --> 00:02:15.278
So let's once again say
we have impl color, and

48
00:02:15.278 --> 00:02:18.870
this time we're going to say
function rgb parentheses self.

49
00:02:18.870 --> 00:02:22.140
So previously we were saying color colon
color, but here we're just saying self.

50
00:02:22.140 --> 00:02:25.680
And in an unusual step, we're actually
not defining a type for this,

51
00:02:25.680 --> 00:02:28.020
which is the first time
we've ever seen that.

52
00:02:28.020 --> 00:02:30.046
And here we have new,
again the same as before,

53
00:02:30.046 --> 00:02:34.090
except instead of returning a color,
it's returning self with a capital S.

54
00:02:34.090 --> 00:02:35.644
So what's going on here?

55
00:02:35.644 --> 00:02:38.963
Basically, this code will work
exactly the same way as before,

56
00:02:38.963 --> 00:02:42.034
because self with the lowercase s and
self with the capital S

57
00:02:42.034 --> 00:02:45.730
are special values in rust and
they're only used inside of an impulse.

58
00:02:46.860 --> 00:02:51.223
And what they mean as you may have guessed
is self refers to basically give me

59
00:02:51.223 --> 00:02:55.601
one of these, one of these particular
types whatever your your impl is on.

60
00:02:55.601 --> 00:02:59.790
And self with a capital S refers to
that type, whatever the impl is on.

61
00:02:59.790 --> 00:03:03.156
So self is basically saying you can
imagine it saying self colon color,

62
00:03:03.156 --> 00:03:07.045
because it's saying it's automatically
going to be whatever that type is.

63
00:03:07.045 --> 00:03:09.165
And this thing is just
the same thing as color.

64
00:03:10.595 --> 00:03:14.232
Now the cool thing that this lets you do
is this right here that we've seen at

65
00:03:14.232 --> 00:03:14.935
the end here.

66
00:03:16.105 --> 00:03:21.619
Basically, rather than
calling Color::rgb(purple),

67
00:03:21.619 --> 00:03:24.063
now I can say purple.rgb.

68
00:03:24.063 --> 00:03:27.770
And all this is doing is just calling the
same function passing the same argument.

69
00:03:27.770 --> 00:03:29.540
It's just a different
way of expressing it.

70
00:03:29.540 --> 00:03:31.250
So this is what's known as method syntax.

71
00:03:31.250 --> 00:03:36.280
This is where we are calling the purple
method inside the color impl.

72
00:03:36.280 --> 00:03:40.785
Sorry, we're calling the rgb
method inside the purples impl.

73
00:03:40.785 --> 00:03:45.860
So purple is a color,
which means that it has this rgb method.

74
00:03:45.860 --> 00:03:48.650
And basically a method is anything
to take self as an argument.

75
00:03:49.860 --> 00:03:53.480
So similarly to Python you
might be familiar with.

76
00:03:53.480 --> 00:03:57.300
This is not really doing anything
more complicated than syntax sugar.

77
00:03:57.300 --> 00:03:59.330
Both of these two do
exactly the same thing.

78
00:03:59.330 --> 00:04:01.050
They have the same performance.

79
00:04:01.050 --> 00:04:05.930
Then they compile about the same amount
of speed, so it's just a matter of style.

80
00:04:05.930 --> 00:04:08.590
Do I want to call it in this style or
do we want to call it this way?

81
00:04:08.590 --> 00:04:12.750
Which is both slightly more concise and
also more amenable to chaining.

82
00:04:12.750 --> 00:04:15.900
So I can say purple.rgb dot
something else, dot something else.

83
00:04:15.900 --> 00:04:18.326
If you know, this returns
something that also has a method,

84
00:04:18.326 --> 00:04:21.870
which also returns something else that
has a method and so on and so forth.

85
00:04:21.870 --> 00:04:24.410
So this is mostly just
a syntactic convenience.

86
00:04:24.410 --> 00:04:25.910
The way we're using it here,

87
00:04:25.910 --> 00:04:30.220
there's nothing really anything
particularly fancier going on there.

88
00:04:30.220 --> 00:04:33.424
Somebody asked about traits earlier self
can do a little bit fancier stuff when you

89
00:04:33.424 --> 00:04:37.480
get to traits, but we're not gonna cover
those in this introductory course.

90
00:04:37.480 --> 00:04:42.309
But because it's generally speaking
strictly more useful than writing out

91
00:04:42.309 --> 00:04:44.180
like color colon color.

92
00:04:44.180 --> 00:04:47.808
Typically speaking, whenever you're
inside an input block like this.

93
00:04:47.808 --> 00:04:52.110
You'll tend to see self and capital S self
used in positions like this rather than

94
00:04:52.110 --> 00:04:54.210
using the actual color type directly.

