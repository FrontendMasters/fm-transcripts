WEBVTT

1
00:00:00.100 --> 00:00:03.220
So to review, we first talked
about manual memory management.

2
00:00:03.220 --> 00:00:06.680
So what you're explicitly calling
dealloc like you wouldn't see.

3
00:00:06.680 --> 00:00:08.939
And now the downsides of this
are you can get use after freeze,

4
00:00:08.939 --> 00:00:10.280
you can get double freeze.

5
00:00:10.280 --> 00:00:12.900
It's a potential source
of security problems.

6
00:00:12.900 --> 00:00:16.367
It's really just like something
that absolutely does work, but

7
00:00:16.367 --> 00:00:19.680
it's pretty error prone and
the stakes can be pretty high.

8
00:00:19.680 --> 00:00:20.690
These are really nasty bugs.

9
00:00:20.690 --> 00:00:21.772
We don't wanna deal with them.

10
00:00:21.772 --> 00:00:23.780
We really wanna have
automatic memory management.

11
00:00:23.780 --> 00:00:26.164
But, we talked about that
automatic memory management and

12
00:00:26.164 --> 00:00:29.468
garbage collected languages, you have
to deal with garbage collection pauses.

13
00:00:29.468 --> 00:00:32.060
You have to deal with the overhead
of the garbage collector itself.

14
00:00:33.190 --> 00:00:36.485
Rust has these instead, it has these
pretty simple scope-based heuristics.

15
00:00:36.485 --> 00:00:40.880
But they do have a number of edge cases
which we're starting to get into now.

16
00:00:40.880 --> 00:00:44.947
But it is a way to do automatic memory
management without the overhead of a GC.

17
00:00:44.947 --> 00:00:48.027
And this is exactly how Rust is
able to be competitive with C and

18
00:00:48.027 --> 00:00:52.010
C++ in terms of performance cuz they
don't have garbage collectors either.

19
00:00:53.280 --> 00:00:57.997
While still having the ergonomics of
more like a garbage collected language,

20
00:00:57.997 --> 00:01:01.510
like, Python, JavaScript and
so on and so forth.

21
00:01:01.510 --> 00:01:05.071
Now we can already start to see the way
in which it's different from a garbage

22
00:01:05.071 --> 00:01:08.925
collected language, which is you have
this new category of compile time errors.

23
00:01:08.925 --> 00:01:12.453
That can happen when the compiler says,
if I were to follow my heuristics,

24
00:01:12.453 --> 00:01:15.780
I would accidentally give you
a use after free or a double free.

25
00:01:15.780 --> 00:01:17.136
I don't wanna do that to you,
so therefore,

26
00:01:17.136 --> 00:01:18.290
instead I'm gonna give you an error.

27
00:01:18.290 --> 00:01:21.536
And I'm gonna to ask you to rearrange your
program in a way such that the heuristics

28
00:01:21.536 --> 00:01:22.820
will no longer cause a problem.

29
00:01:24.230 --> 00:01:25.251
We talked about ownership,

30
00:01:25.251 --> 00:01:27.802
which is the first of these sort of
three concepts that all have to do with

31
00:01:27.802 --> 00:01:30.920
this automatic memory management, the next
two being borrowing and then lifetimes.

32
00:01:30.920 --> 00:01:34.671
And this is basically where we see our
first category of compiler errors that

33
00:01:34.671 --> 00:01:38.160
are designed to prevent
use-after-free errors.

34
00:01:38.160 --> 00:01:41.180
Finally, we talked about cloning, which
is a beginner's best friend and Rust.

35
00:01:41.180 --> 00:01:45.671
It's a way that you can temporarily
sacrifice some performance to just sort of

36
00:01:45.671 --> 00:01:49.702
get past these compiler errors that
are gonna be unfamiliar at first.

37
00:01:49.702 --> 00:01:51.820
So, as before, we have our main here.

38
00:01:51.820 --> 00:01:55.254
And this, like I mentioned previously
is the exercise where we're going to

39
00:01:55.254 --> 00:01:57.950
basically encounter
a use-after-move compiler error.

40
00:01:57.950 --> 00:02:00.620
And we're gonna solve it
in two different ways.

41
00:02:00.620 --> 00:02:03.170
So basically,
we've got a whole bunch of numbers here.

42
00:02:03.170 --> 00:02:06.500
We've got some of nums,
which calls the sum function.

43
00:02:06.500 --> 00:02:10.601
And we got here looking at some basically
some takes a vec of i64s, and it just

44
00:02:10.601 --> 00:02:15.550
goes through and iterates over the numbers
and then just adds each of them to total.

45
00:02:15.550 --> 00:02:18.304
We also have product which is the same
thing except that it multiplies

46
00:02:18.304 --> 00:02:19.118
instead of adding.

47
00:02:19.118 --> 00:02:22.580
And finally, we have average which
basically takes the length of the numbers

48
00:02:22.580 --> 00:02:26.380
and then divides the sum of the numbers by
the length, so sum, product and average.

49
00:02:26.380 --> 00:02:29.020
And all we're trying to do is, we're
trying to do something that would be in

50
00:02:29.020 --> 00:02:31.763
most languages pretty straightforward,
which is called sum of the numbers.

51
00:02:31.763 --> 00:02:35.485
Then call products on the same numbers and
then call average on the same numbers.

52
00:02:35.485 --> 00:02:39.223
And as you might guess, this is going to
result in the same type of error that we

53
00:02:39.223 --> 00:02:41.884
saw on the slides,
namely s use-after-move error.

54
00:02:41.884 --> 00:02:45.655
Because when we pass numbers to each of
these things, it gets moved into there and

55
00:02:45.655 --> 00:02:47.657
then those scopes take ownership of them.

56
00:02:47.657 --> 00:02:52.235
And then automatically deallocate them
because they're not returning it.

57
00:02:52.235 --> 00:02:54.535
So we're gonna use the two
techniques we talked about.

58
00:02:54.535 --> 00:02:58.419
One is just calling .clone on numbers,
which is the quick and easy way.

59
00:02:58.419 --> 00:03:01.400
But I encourage you to try
out the extra technique

60
00:03:01.400 --> 00:03:04.530
of having these functions return a tuple.

61
00:03:04.530 --> 00:03:09.309
So not just the i64 but also return
this vec again, so that the caller

62
00:03:09.309 --> 00:03:14.173
can regain access to it and have it
get moved back into the caller scope.

63
00:03:14.173 --> 00:03:19.096
And therefore, prevent the compiler
from trying to deallocate it.

64
00:03:19.096 --> 00:03:22.476
And either of those are ways that
you can address the use-after-move.

