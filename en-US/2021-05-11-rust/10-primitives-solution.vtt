WEBVTT

1
00:00:00.000 --> 00:00:02.056
So, here we have this population,

2
00:00:02.056 --> 00:00:05.285
which we're going to compute
by adding adults to kids.

3
00:00:05.285 --> 00:00:08.946
Now notice, by the way that we mentioned
previously that this was inferring a type

4
00:00:08.946 --> 00:00:12.198
of I 32 for this and that's because
right now it's just set to be zero.

5
00:00:12.198 --> 00:00:16.205
And I 32 is the default integer type that
Russ chooses if it doesn't have any other

6
00:00:16.205 --> 00:00:16.957
information.

7
00:00:16.957 --> 00:00:19.457
Now watch what happens when
we change this to be adults.

8
00:00:19.457 --> 00:00:24.930
So now, population is now inferred to
be u64 because adults is the type u64.

9
00:00:24.930 --> 00:00:28.809
And if I try to add it to kids,
well, now we're gonna have a problem.

10
00:00:28.809 --> 00:00:33.231
So I'm actually going to have a type
mismatch because basically cannot add you

11
00:00:33.231 --> 00:00:34.107
32 to u64.

12
00:00:34.107 --> 00:00:37.418
Okay, so we need to use as
to convert one or the other.

13
00:00:37.418 --> 00:00:39.569
Now, as I mentioned previously,

14
00:00:39.569 --> 00:00:43.438
if we want we could fix this by
converting adults to be a u32.

15
00:00:43.438 --> 00:00:44.986
But if adults happens
to be bigger than that,

16
00:00:44.986 --> 00:00:46.505
then we might lose some information there.

17
00:00:46.505 --> 00:00:49.487
So, it'd be better if we
converted kids to u64.

18
00:00:49.487 --> 00:00:54.873
So, now we've done that
populations infer to be u64.

19
00:00:54.873 --> 00:00:55.827
And everything's good so far.

20
00:00:55.827 --> 00:00:56.604
Okay.

21
00:00:56.604 --> 00:00:57.603
So that's what you do down.

22
00:00:57.603 --> 00:01:03.880
Next, let's take a look at
computing buildings per person.

23
00:01:03.880 --> 00:01:06.441
Now here again,
we want to end up with an F 64.

24
00:01:06.441 --> 00:01:11.292
Because we wanna make sure that we have
any like decimal component to this

25
00:01:11.292 --> 00:01:12.889
that gets kept around.

26
00:01:12.889 --> 00:01:15.887
The reason that this is currently
computed inferred to be an F 64.

27
00:01:15.887 --> 00:01:18.647
Is this conditional down here we say if
buildings per person is greater than or

28
00:01:18.647 --> 00:01:19.288
equal to 1.0.

29
00:01:19.288 --> 00:01:21.819
And again the default floating point type.

30
00:01:21.819 --> 00:01:24.861
So, 1.0 was a floating point literal, and

31
00:01:24.861 --> 00:01:28.143
the default floating point
time is type is F 64.

32
00:01:28.143 --> 00:01:29.024
Okay, so.

33
00:01:29.024 --> 00:01:33.649
Let's start by saying
buildings over population.

34
00:01:33.649 --> 00:01:35.697
And notice that now it changes
the inferred type u64.

35
00:01:35.697 --> 00:01:39.604
And once again, we have a problem here
where these are a mismatch between

36
00:01:39.604 --> 00:01:42.240
population which is u64 and buildings u32.

37
00:01:42.240 --> 00:01:46.736
But in this case, we want to just
convert both of them to f64 using AZ and

38
00:01:46.736 --> 00:01:50.369
now that we've done that
everything is happy once again.

39
00:01:50.369 --> 00:01:52.674
Great.
So now, if I were to rerun this again,

40
00:01:52.674 --> 00:01:56.227
we would see that this is partially
better, but not totally better.

41
00:01:56.227 --> 00:01:59.497
Because we now have an accurate
population, which is great, but

42
00:01:59.497 --> 00:02:02.536
we still have this to do here
print billings per person here.

43
00:02:02.536 --> 00:02:06.743
And so to fix that, we can just do
a little bit of string interpolation in

44
00:02:06.743 --> 00:02:11.250
the same example, using the same sort
of technique that we've used above.

45
00:02:11.250 --> 00:02:13.604
And say buildings per person.

46
00:02:13.604 --> 00:02:14.943
And there we go.

47
00:02:14.943 --> 00:02:19.543
So now when I rerun, we should
see absolutely everything printed

48
00:02:19.543 --> 00:02:24.487
out population, adults,
kids buildings and buildings per person.

49
00:02:24.487 --> 00:02:26.174
Any questions about that solution?

50
00:02:26.174 --> 00:02:30.043
&gt;&gt; I see that we're declaring
implementing the print population

51
00:02:30.043 --> 00:02:34.060
after mean are there rules about
function order in a single file?

52
00:02:34.060 --> 00:02:35.564
&gt;&gt; Great question.
Are there rules for

53
00:02:35.564 --> 00:02:37.691
function order within a single file?

54
00:02:37.691 --> 00:02:40.764
Nope, if you want to have these in any
order you want like top level functions

55
00:02:40.764 --> 00:02:42.359
you can reorder them however you want.

56
00:02:42.359 --> 00:02:47.771
&gt;&gt; How does cargo know, it has to compile
source main RS, does it target the files

57
00:02:47.771 --> 00:02:53.516
specifically for compilation because it's
only of the only RS bottle available.

58
00:02:53.516 --> 00:02:56.644
&gt;&gt; Great question.
How does cargo know that it's a source

59
00:02:56.644 --> 00:02:57.499
main.rs?

60
00:02:57.499 --> 00:02:59.977
Main.rs is actually a special name,
so it's gonna look for

61
00:02:59.977 --> 00:03:03.300
something named specifically names main.rs
as the entry point of the program.

