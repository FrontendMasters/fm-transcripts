WEBVTT

1
00:00:00.170 --> 00:00:03.300
So we've talked about rust as a language
empowering everyone to build reliable and

2
00:00:03.300 --> 00:00:04.160
efficient software.

3
00:00:04.160 --> 00:00:06.351
And hopefully over the course of
the workshop, you've gotten a sense for

4
00:00:06.351 --> 00:00:07.190
what that means.

5
00:00:07.190 --> 00:00:10.454
So reliable means that basically,
either it's going to compile in which case

6
00:00:10.454 --> 00:00:13.816
it's going to have very low overhead, or
if there could be a potentially serious

7
00:00:13.816 --> 00:00:16.480
problem the compiler is
going to tell you about it.

8
00:00:16.480 --> 00:00:19.292
Now granted, this can be a little bit less
convenient than languages that will use

9
00:00:19.292 --> 00:00:21.770
something like a garbage collector
to take care of this for you.

10
00:00:21.770 --> 00:00:24.470
But that gets into the second
piece of this which is efficient.

11
00:00:24.470 --> 00:00:28.520
It's basically a language that's really
focused on having as little overhead as

12
00:00:28.520 --> 00:00:31.200
possible so
that it can compete with like C and C++.

13
00:00:31.200 --> 00:00:33.086
We've seen that it's memory layouts,

14
00:00:33.086 --> 00:00:36.917
it's basically using the absolute bare
minimum they can possibly get away with.

15
00:00:36.917 --> 00:00:39.955
And using these compile time
things to to compensate for that,

16
00:00:39.955 --> 00:00:43.278
to make sure that you're not having
to do manual memory management,

17
00:00:43.278 --> 00:00:46.280
to get that same level of
efficiency that you'll see and see.

18
00:00:47.390 --> 00:00:50.610
We talked about Russ compiles to
either machine code or web assembly.

19
00:00:50.610 --> 00:00:54.303
Honestly, the main difference between here
is just going to be what your size of your

20
00:00:54.303 --> 00:00:58.048
sizes is going to be eight bytes, or four
bytes, depending on whether it's a 64 bit

21
00:00:58.048 --> 00:01:01.274
or 32 bits target.But otherwise,
all the stuff that we learned in this

22
00:01:01.274 --> 00:01:04.110
course today.You can use this
to build web assembly programs.

23
00:01:04.110 --> 00:01:05.600
So we didn't get into
exactly how to do that.

24
00:01:05.600 --> 00:01:06.850
But there's tutorials on doing that.

25
00:01:06.850 --> 00:01:08.810
And it's honestly not a ton of work.

26
00:01:08.810 --> 00:01:11.843
Talks about a bunch of different people
who are using Rust organizations,

27
00:01:11.843 --> 00:01:15.660
of all shapes and sizes and they're using
it for all sorts of different things.

28
00:01:15.660 --> 00:01:17.680
One thing that they all
do have in common though,

29
00:01:17.680 --> 00:01:20.790
is that these are all use cases
where performance really matters.

30
00:01:20.790 --> 00:01:24.426
And that gets us into sort of the the
three main reasons I would say you want to

31
00:01:24.426 --> 00:01:28.040
use Rust which is speed,
performance and going real fast.

32
00:01:28.040 --> 00:01:31.381
As you can see, Rust goes to some
pretty great lengths.To try and

33
00:01:31.381 --> 00:01:35.030
give you an experience where you're
building reliable software, but

34
00:01:35.030 --> 00:01:39.130
also that software goes as fast as
the hardware will let it just about.

35
00:01:39.130 --> 00:01:41.881
And finally let's wrap up with
some additional resources that so

36
00:01:41.881 --> 00:01:44.330
as I mentioned,
right Rust is a very big language.

37
00:01:44.330 --> 00:01:48.246
I wanted to focus on basically helping
you out as much as possible with,

38
00:01:48.246 --> 00:01:52.882
Baro checker errors because I know that's
typically cited as the most common source

39
00:01:52.882 --> 00:01:55.451
of frustration and
confusion for beginners.

40
00:01:55.451 --> 00:01:58.351
So I think it's like, the most
useful thing I could do for you and

41
00:01:58.351 --> 00:02:01.682
a one day workshop, is to get you as
comfortable as you can possibly be with

42
00:02:01.682 --> 00:02:05.003
a mental model of like what are these
Baro checker errors actually mean.

43
00:02:05.003 --> 00:02:07.385
So that you're not,
looking at these things and

44
00:02:07.385 --> 00:02:10.685
looking at all these new words and
sort of struggling with them.

45
00:02:10.685 --> 00:02:14.410
But, there's plenty more to the language,
we talked about traits a number of times,

46
00:02:14.410 --> 00:02:16.810
there are questions around that.Closures,
macros,

47
00:02:16.810 --> 00:02:19.311
there's plenty of other stuff
in the language to learn but

48
00:02:19.311 --> 00:02:23.110
fortunately.Most of the other stuff has
an closer analogues in other languages.

49
00:02:23.110 --> 00:02:27.160
The stuff we learned today is really
the most rust specific stuff.

50
00:02:27.160 --> 00:02:29.475
So when you encounter traits,
you'll probably be like, yeah,

51
00:02:29.475 --> 00:02:30.580
this reminds me of something.

52
00:02:30.580 --> 00:02:31.720
I've used another line language.

53
00:02:31.720 --> 00:02:32.610
Same thing with macros.

54
00:02:32.610 --> 00:02:34.870
Same thing with closures and
to some extent.

55
00:02:34.870 --> 00:02:37.200
So, some additional resources.

56
00:02:37.200 --> 00:02:40.610
Definitely if you go to
rust lang.org slash learn.

57
00:02:40.610 --> 00:02:42.280
They have a complete, tutorial.

58
00:02:42.280 --> 00:02:45.592
It's like very comprehensive, very well
written that has all sorts of that takes

59
00:02:45.592 --> 00:02:47.660
you through the entirety of the language.

60
00:02:47.660 --> 00:02:51.363
And hopefully the mental model that you
built up here would be useful when going

61
00:02:51.363 --> 00:02:52.380
through that.

62
00:02:52.380 --> 00:02:56.769
They also rust-lang.org/community which
has links to places you can like chat

63
00:02:56.769 --> 00:02:57.910
and posts.

64
00:02:57.910 --> 00:02:58.810
Ask questions.

65
00:02:58.810 --> 00:03:01.380
Rust community is like pretty
famously beginner friendly.

66
00:03:01.380 --> 00:03:05.030
There's a lot of people willing to
help people answer the questions.

67
00:03:05.030 --> 00:03:07.878
I've definitely posted on
their Discord server and

68
00:03:07.878 --> 00:03:11.900
gotten some help when I was starting out,
so definitely recommend that.

69
00:03:13.110 --> 00:03:16.895
Also if you're looking for the language
server protocol extension that I was using

70
00:03:16.895 --> 00:03:20.120
in VS code, this is where to get
that that's called rust-analyzer.

71
00:03:20.120 --> 00:03:24.485
And finally, if you want to see a more
detailed example of a rust program.Inside

72
00:03:24.485 --> 00:03:27.053
the lessons directory
in this workshops repo,

73
00:03:27.053 --> 00:03:31.290
actually built a little static site
generator in rust, which is actually used

74
00:03:31.290 --> 00:03:35.130
to generate the companion site
that goes with this website.

75
00:03:35.130 --> 00:03:38.077
So if you wanna see a rust program
that is like not trivial, but

76
00:03:38.077 --> 00:03:40.110
also not particularly big.

77
00:03:40.110 --> 00:03:44.821
That thing does use some concepts that we
haven't talked about in the course of this

78
00:03:44.821 --> 00:03:45.790
course.

79
00:03:45.790 --> 00:03:48.793
I did add some comments in there so you
can kind of if you want to read through

80
00:03:48.793 --> 00:03:51.958
that code, it'll give you a little bit
of a hint of what's going on in there.

81
00:03:51.958 --> 00:03:55.179
With the things that we didn't cover here,
but that might be a nice little like, next

82
00:03:55.179 --> 00:03:58.480
stepping stone, looking through that code,
trying to understand what it's doing.

83
00:03:58.480 --> 00:04:01.930
And you'll definitely spot a lot of the
concepts we did talk about in the course

84
00:04:01.930 --> 00:04:02.670
of this course.

85
00:04:02.670 --> 00:04:05.886
And it's there's like a little nice meta
aspect to being able to read the code for

86
00:04:05.886 --> 00:04:09.011
the companion website to the course.That
you wouldn't have been able to read

87
00:04:09.011 --> 00:04:10.410
before going through the course.

88
00:04:11.720 --> 00:04:13.960
Okay, and that wraps it up.

89
00:04:13.960 --> 00:04:18.586
Thank you so much for attending and
if you have any last questions,

90
00:04:18.586 --> 00:04:20.480
please feel free to ask.

91
00:04:20.480 --> 00:04:23.036
&gt;&gt; I guess my question would
be kind of like next steps,

92
00:04:23.036 --> 00:04:25.370
I definitely wanna take
a look at that lessons.

93
00:04:26.950 --> 00:04:31.919
Directory you're talking about but
in terms of like project applications,

94
00:04:31.919 --> 00:04:32.920
are there any.

95
00:04:34.490 --> 00:04:38.023
Like for me I kind of struggle with
building a project if I don't really know

96
00:04:38.023 --> 00:04:40.020
the full scope of the language so.

97
00:04:40.020 --> 00:04:42.450
Is there anything you would recommend?

98
00:04:42.450 --> 00:04:45.840
Like building that would really
help someone grasp rust and

99
00:04:45.840 --> 00:04:47.140
rust in its entirety?

100
00:04:48.430 --> 00:04:49.530
&gt;&gt; That's a good question.

101
00:04:49.530 --> 00:04:53.045
To be honest, I don't know if there's
like any one project that would satisfy

102
00:04:53.045 --> 00:04:54.270
that.Because there are so

103
00:04:54.270 --> 00:04:57.590
many parts of the language that
are somewhat specific to certain niches.

104
00:04:57.590 --> 00:04:59.150
For example,
there's like sort of a whole subset.

105
00:04:59.150 --> 00:05:01.420
Section that all has to
do with concurrency.

106
00:05:01.420 --> 00:05:04.783
If you ever hear about like people
talking about like a sync await and

107
00:05:04.783 --> 00:05:08.382
stuff that was a big deal for a while and
still somewhat of a hot topic.But

108
00:05:08.382 --> 00:05:11.745
that only really comes up if you're
doing stuff with concurrency,

109
00:05:11.745 --> 00:05:15.410
which you might not care about at all
depending on what you're building.

110
00:05:16.460 --> 00:05:17.650
So concrete advice.

111
00:05:17.650 --> 00:05:20.795
I actually think if you go to
rustling.org/learn, they have,

112
00:05:20.795 --> 00:05:24.512
it's not just like a tutorial.That's
like the main thing that's there but

113
00:05:24.512 --> 00:05:27.795
actually they list a couple of other
different like ways you can go.

114
00:05:27.795 --> 00:05:30.985
With your next step so some of them
they have like little exercises.

115
00:05:30.985 --> 00:05:33.994
I think there might even be some
like project ideas in there,

116
00:05:33.994 --> 00:05:38.006
haven't been there a while.But I would
recommend going there as the next step or

117
00:05:38.006 --> 00:05:41.725
just looking through the static
site generator in the repo.

118
00:05:41.725 --> 00:05:43.905
&gt;&gt; Yeah,
I'm afraid your element action book and

119
00:05:43.905 --> 00:05:47.448
I really loved that that approach and
I realized that ,It was hard to do here,

120
00:05:47.448 --> 00:05:49.430
because it's just such a large language.

121
00:05:49.430 --> 00:05:52.560
So we just couldn't do
an inaction approach, really.

122
00:05:53.700 --> 00:05:57.470
But yeah, I'm just wondering if you
have any specific sort of thing, like,

123
00:05:57.470 --> 00:06:01.124
certainly I could look at rustling,
rustling learn, but maybe something

124
00:06:01.124 --> 00:06:05.071
that's performance critical, or is there
any sort of thing like, involving.

125
00:06:05.071 --> 00:06:09.144
Like web assembly or something that for
like a front end developer where they'd

126
00:06:09.144 --> 00:06:13.113
say, you know what, I think rust would
be really good for this sort of thing.

127
00:06:13.113 --> 00:06:15.930
&gt;&gt; Honestly, the main example
that comes to mind is games.

128
00:06:15.930 --> 00:06:19.017
Games are always performance critical
because if your game is leggy,

129
00:06:19.017 --> 00:06:20.085
it's not gonna be fun.

130
00:06:20.085 --> 00:06:23.352
[LAUGH] And also, like games tend to be
like, the more performance you can throw

131
00:06:23.352 --> 00:06:26.160
out them, the more stuff you
can have on the screen at once.

132
00:06:26.160 --> 00:06:32.170
Not just graphics, but also like, number
of like characters or whatever else.

133
00:06:32.170 --> 00:06:33.862
So I would say if you're into games,

134
00:06:33.862 --> 00:06:36.570
that's probably a pretty
good place to look.

135
00:06:36.570 --> 00:06:38.710
Because you can do some cool stuff there.

136
00:06:38.710 --> 00:06:41.753
Also anything to do with like
simulations or visualizations.

137
00:06:41.753 --> 00:06:45.853
Again, those are both areas where like,
the more things you have on the screen at

138
00:06:45.853 --> 00:06:48.929
once like potentially.The more
valuable the thing is, but

139
00:06:48.929 --> 00:06:51.540
you get constrained by
performance at some point.

140
00:06:51.540 --> 00:06:54.100
So that's three areas that come to mind.

141
00:06:54.100 --> 00:06:58.069
Yeah, by the way, I guess I should have
said that I'm the author of element

142
00:06:58.069 --> 00:07:01.534
Action but also, if you wanna learn,
[LAUGH] Elm for me on front end

143
00:07:01.534 --> 00:07:05.690
masters.I have both a beginner Elm
course and an advanced Elm course.

144
00:07:05.690 --> 00:07:07.585
It's way easier than Rust.

145
00:07:07.585 --> 00:07:11.590
[LAUGH] At least, that's my opinion.

146
00:07:11.590 --> 00:07:13.200
But also that's like everybody's opinion.

147
00:07:13.200 --> 00:07:13.730
Who knows both?

148
00:07:13.730 --> 00:07:14.690
I would say.

149
00:07:16.720 --> 00:07:18.470
&gt;&gt; Have you heard of Actix?

150
00:07:18.470 --> 00:07:22.410
Is it still a good choice for
first web server framework?

151
00:07:22.410 --> 00:07:23.240
&gt;&gt; Good question.

152
00:07:23.240 --> 00:07:24.440
I have heard of Actix.

153
00:07:24.440 --> 00:07:29.369
So actix is a way to do web servers in
rust.And actix is famous for two things

154
00:07:29.369 --> 00:07:34.612
One is that it was basically being at the
top of like the tech and power benchmarks

155
00:07:34.612 --> 00:07:39.623
for like fastest.Like web servers even
like beating out like c++ ones and

156
00:07:39.623 --> 00:07:44.800
stuff like that, which was considered
a really cool milestone for Rust.

157
00:07:44.800 --> 00:07:48.447
But it's also known for a second thing,
which is there was a lot of

158
00:07:48.447 --> 00:07:52.756
controversy over how it did that.Because
in a lot of cases, it was using a lot

159
00:07:52.756 --> 00:07:56.620
of like unsafe code and doing basically
things that are sort of like.

160
00:07:56.620 --> 00:08:00.227
Not turning off the borrow checker
since you can't do that, but basically,

161
00:08:00.227 --> 00:08:04.003
sort of doing things closer to manual
memory management.Using things that like

162
00:08:04.003 --> 00:08:07.777
Rust lets you do, they're generally
intended to be used with mainly with like,

163
00:08:07.777 --> 00:08:08.930
C type things.

164
00:08:08.930 --> 00:08:12.770
And so people felt like it was, a lot of
people felt that it was sort of outside

165
00:08:12.770 --> 00:08:14.780
the spirit of Rust to do it in this way.

166
00:08:14.780 --> 00:08:16.640
There became a whole big
kerfuffle about that.

167
00:08:16.640 --> 00:08:18.901
And I think the maintainer ended
up like walking away from it and

168
00:08:18.901 --> 00:08:19.934
there was there was a whole.

169
00:08:21.245 --> 00:08:24.525
There's a lot of drama there
that I'm not exactly up on.

170
00:08:24.525 --> 00:08:27.985
But so long story short is,
I have not personally used it.

171
00:08:27.985 --> 00:08:29.425
So I certainly would not recommend it.

172
00:08:29.425 --> 00:08:31.076
But I do know that it has a reputation for

173
00:08:31.076 --> 00:08:33.435
being very fast, but
also there was a big controversy.

174
00:08:33.435 --> 00:08:35.475
So I guess I would say read up on that.

175
00:08:35.475 --> 00:08:39.288
But there's plenty of alternatives
that are also plenty fast and

176
00:08:39.288 --> 00:08:40.545
not controversial.

177
00:08:40.545 --> 00:08:44.608
So maybe you might wanna look into.One
of those like work for example.

178
00:08:44.608 --> 00:08:47.220
&gt;&gt; Someone's asking about
the job market for rust?

179
00:08:48.690 --> 00:08:49.590
&gt;&gt; Job market for rust.

180
00:08:49.590 --> 00:08:55.360
So I have a friend who recently
was looking for a rust job.

181
00:08:55.360 --> 00:08:59.431
And I would say that the number of
job openings was pretty small, but

182
00:08:59.431 --> 00:09:03.870
actually they did end up getting a rust
job so definitely seems possible.

183
00:09:05.070 --> 00:09:09.845
But I, I would expect it to be
significantly smaller than death like this

184
00:09:09.845 --> 00:09:15.440
really like the JavaScript job market,
which is of course enormous.

185
00:09:15.440 --> 00:09:19.170
Having said that, I also don't know how
much that depends on your background.

186
00:09:19.170 --> 00:09:22.905
Like I wouldn't be surprised if
a lot of rust jobs are involved in

187
00:09:22.905 --> 00:09:24.496
taking like an existing C or

188
00:09:24.496 --> 00:09:29.810
c++ code base.And trying to move it to
something more maintainable, like rust.

189
00:09:29.810 --> 00:09:32.873
In which case they might actually expect,
like hey, maybe you don't have years of

190
00:09:32.873 --> 00:09:36.260
rust experience, but maybe they are
looking for years of C or C++ experience.

191
00:09:36.260 --> 00:09:38.080
Having said that,
that's pure speculation on my part.

192
00:09:38.080 --> 00:09:39.900
I've never actually tried applying for
rust jobs.

193
00:09:39.900 --> 00:09:43.020
So I can't speak from firsthand
experience when it comes to that..

194
00:09:44.430 --> 00:09:46.210
Al lright, thank you all so
much for coming.

