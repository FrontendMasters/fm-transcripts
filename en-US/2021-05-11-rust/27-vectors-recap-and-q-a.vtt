WEBVTT

1
00:00:00.050 --> 00:00:02.051
So first we talked about Vec, so

2
00:00:02.051 --> 00:00:06.440
if I wanna make a Vec of numbers like
u8 numbers, I can do it like this.

3
00:00:06.440 --> 00:00:08.052
I can use the Vec macro to do that.

4
00:00:08.052 --> 00:00:11.853
We also mentioned that you might wanna use
Vec :: with capacity if you anticipate

5
00:00:11.853 --> 00:00:13.451
doing a lot of pushing onto there,

6
00:00:13.451 --> 00:00:17.270
to avoid having to potentially
recopy things a bunch of times.

7
00:00:17.270 --> 00:00:18.407
We talked about usize.

8
00:00:18.407 --> 00:00:22.212
So this is this new type that's
either u64 on a 64-bit system or

9
00:00:22.212 --> 00:00:24.610
a u32 on a 32-bit systems.

10
00:00:24.610 --> 00:00:28.192
In practice, you're probably only gonna
encounter u32s on web assembly and

11
00:00:28.192 --> 00:00:30.704
encountering something
that's neither 32-bit nor

12
00:00:30.704 --> 00:00:33.600
64-bit is very rare in this day and age.

13
00:00:33.600 --> 00:00:37.002
We talked about stack memory where
basically when I'm calling functions,

14
00:00:37.002 --> 00:00:39.535
everything that I'm doing
is happening on the stack.

15
00:00:39.535 --> 00:00:44.365
So functions, we'll use this sort of like,
take the stack length of -1 to get my

16
00:00:44.365 --> 00:00:49.276
current argument, or a stack length of -2,
if there's more than one argument.

17
00:00:49.276 --> 00:00:51.332
And this is how functions actually,

18
00:00:51.332 --> 00:00:56.040
really use memory in order to pass
values around between one another.

19
00:00:56.040 --> 00:00:58.296
And finally, we talked about heap memory,
which is for

20
00:00:58.296 --> 00:01:01.360
things that don't have a size
that's known at compile time.

21
00:01:01.360 --> 00:01:03.050
And that's the purpose of the heap.

22
00:01:03.050 --> 00:01:06.640
And basically, what we'll do instead is we
will write down on the stack in some sort

23
00:01:06.640 --> 00:01:09.930
of struct like our Vec metadata struct,
for example.

24
00:01:09.930 --> 00:01:14.708
The index into the heap slot that
is like the first element in

25
00:01:14.708 --> 00:01:17.299
that dynamically sized thing.

26
00:01:17.299 --> 00:01:21.040
Okay, questions about any of this.

27
00:01:21.040 --> 00:01:24.970
&gt;&gt; So is usize essentially a pointer?

28
00:01:24.970 --> 00:01:28.472
&gt;&gt; If I were to use C, so
pointer is a term from C and C++,

29
00:01:28.472 --> 00:01:30.540
you would use this as a pointer.

30
00:01:30.540 --> 00:01:33.452
I don't wanna get into
explanation of pointers,

31
00:01:33.452 --> 00:01:37.300
which is why I chose not to do that,
this is the correct size.

32
00:01:37.300 --> 00:01:41.836
If this was C or C++, this would be
a pointer type rather than usize, but

33
00:01:41.836 --> 00:01:44.265
at runtime, it's all the same thing.

34
00:01:44.265 --> 00:01:48.543
&gt;&gt; But
as to the colon colon size underscore t?

35
00:01:48.543 --> 00:01:52.119
&gt;&gt; Yeah, that's the length size,
size underscore t-

36
00:01:52.119 --> 00:01:55.877
&gt;&gt; usize as with size underscore t is in

37
00:01:55.877 --> 00:01:57.160
C, C++?

38
00:01:57.160 --> 00:02:01.613
&gt;&gt; Right, that sounds right [LAUGH].

39
00:02:01.613 --> 00:02:03.287
&gt;&gt; And then somebody else put,

40
00:02:03.287 --> 00:02:07.410
I think first_elem_index is
the pointer to an index in the heap?

41
00:02:07.410 --> 00:02:10.900
&gt;&gt; Correct, then again, I'm trying to keep
this accessible to people who don't know C

42
00:02:10.900 --> 00:02:13.880
and C++, so I don't wanna get
into that whole terminology.

43
00:02:13.880 --> 00:02:17.212
&gt;&gt; Can one pass capacity
to Vec to instantiate and

44
00:02:17.212 --> 00:02:21.640
set capacity at the same time
without needing to push?

45
00:02:21.640 --> 00:02:24.260
&gt;&gt; That's a good question.

46
00:02:24.260 --> 00:02:26.850
I don't know if there's
a macro that does that.

47
00:02:26.850 --> 00:02:30.525
Presumably, if there isn't one, you could
define your own if you wanted to, like

48
00:02:30.525 --> 00:02:33.991
once you learn how to do macros, which
again outside the scope of this course,

49
00:02:33.991 --> 00:02:37.060
but there's no reason someone
couldn't make a macro that did both.

50
00:02:38.360 --> 00:02:40.450
&gt;&gt; Isn't a capacity up to breast?

51
00:02:42.080 --> 00:02:45.070
&gt;&gt; No, you can definitely
choose the capacity yourself.

52
00:02:45.070 --> 00:02:50.070
So basically,
when you say Vec : : with_capacity (5),

53
00:02:50.070 --> 00:02:55.554
like when you call this function,
what's gonna happen is that this

54
00:02:55.554 --> 00:03:00.844
is gonna compile the code that says,
hey, bookkeeping system,

55
00:03:00.844 --> 00:03:08.157
find me 5 u8s in a row that are available,
that are not in use by some other Vec.

56
00:03:08.157 --> 00:03:13.427
And that is gonna give you back the index
of the first element where that's true.

57
00:03:13.427 --> 00:03:15.097
So yeah,
you're definitely in charge of this.

58
00:03:15.097 --> 00:03:19.674
Honestly, the Vec macro behind the scenes
is actually calling Vec_with_capacity and

59
00:03:19.674 --> 00:03:21.287
then push a bunch of times.

60
00:03:21.287 --> 00:03:22.787
That's really what that macro does.

61
00:03:22.787 --> 00:03:24.288
It's sort of a convenience for

62
00:03:24.288 --> 00:03:27.821
calling with capacity followed by
push a bunch of times, essentially.

63
00:03:27.821 --> 00:03:33.260
&gt;&gt; What would you do if you have no idea
what the size of a list of items is?

64
00:03:33.260 --> 00:03:34.940
&gt;&gt; Yeah, it's a good question.

65
00:03:34.940 --> 00:03:39.214
I mean, basically the trade off there is,
if you want to pick something

66
00:03:39.214 --> 00:03:44.148
like really high capacity, it's gonna
use more memory and maybe wastefully so.

67
00:03:44.148 --> 00:03:47.054
There is no real hard and
fast rule where it's like, if you do this,

68
00:03:47.054 --> 00:03:47.970
you're always fine.

69
00:03:47.970 --> 00:03:51.861
This is one of those things where
if there's unknown information,

70
00:03:51.861 --> 00:03:55.250
you kind of just try to
take your best shot.

71
00:03:55.250 --> 00:04:00.040
Worth noting that in practice, when you
run out of capacity because like this

72
00:04:00.040 --> 00:04:04.604
whole thing where if you're in a bad
situation where you run out of space,

73
00:04:04.604 --> 00:04:09.389
basically rust is gonna be, or Vec I
should say, is not going to just be like,

74
00:04:09.389 --> 00:04:11.550
well, I hope this is the last one.

75
00:04:11.550 --> 00:04:14.112
So I'm gonna allocate capacity plus 1 for
the next time.

76
00:04:14.112 --> 00:04:17.337
It's actually gonna try and over allocate
in case there's more pushes coming, so

77
00:04:17.337 --> 00:04:19.420
it'll actually double the capacity.

78
00:04:19.420 --> 00:04:21.490
So it wouldn't go from 4 to 5 here.

79
00:04:21.490 --> 00:04:25.755
In actuality, Vec would go from 4 to 8
automatically, just so you have room for

80
00:04:25.755 --> 00:04:28.310
another four pushes if you want them.

81
00:04:28.310 --> 00:04:34.079
So knowing that, if you just set something
that's reasonably close to what you want,

82
00:04:34.079 --> 00:04:38.110
you're probably going to be off
by at most a magnitude of 2,

83
00:04:38.110 --> 00:04:43.030
unless you're way off, in which case
it might need to do it double twice.

84
00:04:45.050 --> 00:04:47.040
So hopefully that's
a helpful guidance [LAUGH].

85
00:04:48.710 --> 00:04:53.652
&gt;&gt; Would it be better to use something
like a linked list data structure in

86
00:04:53.652 --> 00:04:54.740
that case?

87
00:04:54.740 --> 00:04:57.469
&gt;&gt; Would it be better to use something
like a linked list data structure in

88
00:04:57.469 --> 00:04:58.170
a case like this?

89
00:04:58.170 --> 00:04:59.018
That's a great question.

90
00:04:59.018 --> 00:05:03.160
Without going into too much detail, the
first rule, I've watched a lot of talks,

91
00:05:03.160 --> 00:05:08.210
I'm not a C++ programmer, but I have
actually watched a lot of talks at CppCon.

92
00:05:08.210 --> 00:05:10.620
And also rust talks about performance.

93
00:05:10.620 --> 00:05:12.642
Basically, to make a long story short,

94
00:05:12.642 --> 00:05:16.485
the first rule of fast performance
is never use linked lists.

95
00:05:16.485 --> 00:05:17.981
They're super slow [LAUGH].

96
00:05:17.981 --> 00:05:22.505
Basically, the fact that you need to do,
every time you make a new element a linked

97
00:05:22.505 --> 00:05:26.178
list, you have to go back to
the bookkeeping system and say, hey,

98
00:05:26.178 --> 00:05:29.595
find me a new index for
the next element in the linked list.

99
00:05:29.595 --> 00:05:32.010
Hey, find me the next
element in the linked list.

100
00:05:32.010 --> 00:05:34.962
Asking the bookkeeping system
to find you available memory is

101
00:05:34.962 --> 00:05:39.320
quite often the most expensive thing that
the entire data structure ends up doing.

102
00:05:39.320 --> 00:05:43.863
And so a lot of performance optimization
as we're gonna see in future

103
00:05:43.863 --> 00:05:48.330
sections is basically avoiding
asking that bookkeeping system for

104
00:05:48.330 --> 00:05:51.540
how to find available memory on the heap.

105
00:05:51.540 --> 00:05:55.446
And so linked lists generally are much
more often the cause of performance

106
00:05:55.446 --> 00:05:58.980
problems and the solution to them,
not saying they're useless.

107
00:05:58.980 --> 00:06:03.230
There are absolutely some situations
where a linked list is the right choice.

108
00:06:03.230 --> 00:06:07.199
But that's sort of a rule that I've
internalized based on watching lots of

109
00:06:07.199 --> 00:06:10.160
experts talk about this stuff is,
if you wanna go fast,

110
00:06:10.160 --> 00:06:12.145
avoid linked lists like the plague.

111
00:06:12.145 --> 00:06:13.162
[LAUGH]

