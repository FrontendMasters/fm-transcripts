WEBVTT

1
00:00:00.150 --> 00:00:03.000
And finally, let's talk about Booleans.

2
00:00:03.000 --> 00:00:06.219
So Booleans, there's two of them,
you got your true, and you got your false,

3
00:00:06.219 --> 00:00:07.580
those are the only two Booleans.

4
00:00:08.630 --> 00:00:11.220
And so here we defined,
should we go fast to be true, and

5
00:00:11.220 --> 00:00:13.010
should we go slow to be false.

6
00:00:13.010 --> 00:00:16.491
If you want you can use as to
convert between a Boolean and

7
00:00:16.491 --> 00:00:20.270
u8, because behind the scenes
Boolean is just a u8 that's

8
00:00:20.270 --> 00:00:24.310
kinda the smallest thing that
hardware will let you do.

9
00:00:24.310 --> 00:00:26.735
Theoretically, you can represent
a Boolean as just a bit,

10
00:00:26.735 --> 00:00:29.938
but there isn't any hardware that I'm
aware of, that actually has precision

11
00:00:29.938 --> 00:00:33.300
that's small, usually the smallest
storage size they have is a byte.

12
00:00:33.300 --> 00:00:37.794
You could do something fancier if you
wanna actually only take up a bit.

13
00:00:37.794 --> 00:00:40.458
So true will evaluate to 1,
and false will value to 0,

14
00:00:40.458 --> 00:00:42.740
because that's basically
how it stores them.

15
00:00:42.740 --> 00:00:46.080
True is 1 and false is 0 at runtime.

16
00:00:47.170 --> 00:00:50.880
There's also double equals in Rust,
which is a way to compare things.

17
00:00:50.880 --> 00:00:54.408
Of note, double equals is what's
known as structural equality,

18
00:00:54.408 --> 00:00:57.495
which is to say that if I were
to put two collections here and

19
00:00:57.495 --> 00:01:01.653
compare that with double equals, Rust
would actually go through normally and

20
00:01:01.653 --> 00:01:05.400
actually compare all the contents
of both of those collections.

21
00:01:05.400 --> 00:01:08.450
It wouldn't be reference equality you
might be used to in some languages.

22
00:01:09.670 --> 00:01:13.354
Also worth noting that this double equals
is really the only equals you've got in

23
00:01:13.354 --> 00:01:14.940
Rust, there is no triple equals.

24
00:01:14.940 --> 00:01:18.253
So always use double equals,
because that's the only one there is and

25
00:01:18.253 --> 00:01:20.120
it's probably gonna do what you want.

26
00:01:22.720 --> 00:01:26.330
Okay, let's talk about conditionals
briefly because these use Booleans.

27
00:01:26.330 --> 00:01:28.117
So here we have an if conditional, so

28
00:01:28.117 --> 00:01:31.760
I say if cats greater than 1,
println multiple cats.

29
00:01:31.760 --> 00:01:34.310
We can also throw an else on there,
and say need more cats.

30
00:01:34.310 --> 00:01:35.660
That's totally valid.

31
00:01:35.660 --> 00:01:39.701
Of note, compared to a lot of
languages with similar syntax in Rust,

32
00:01:39.701 --> 00:01:43.800
you do not need parentheses around this,
you can leave them off.

33
00:01:43.800 --> 00:01:46.310
But, you do always need the curly braces.

34
00:01:46.310 --> 00:01:48.943
So I know in a lot of languages
you can say, if parentheses and

35
00:01:48.943 --> 00:01:52.559
then leave off the curly braces, Rust is
not having that, in Rust, you always have

36
00:01:52.559 --> 00:01:55.680
to have the curly braces, which I
think is a good decision personally.

37
00:01:57.270 --> 00:02:01.164
Also of note, this condition right here,
this cats greater than 1,

38
00:02:01.164 --> 00:02:02.889
this thing has to be a Boolean.

39
00:02:02.889 --> 00:02:05.960
There's no truthiness in Rust, this
can't be a number, it can't be a string,

40
00:02:05.960 --> 00:02:06.876
it can't be anything.

41
00:02:06.876 --> 00:02:10.890
If this is not exactly a Boolean value,
you'll get an error from the compiler.

42
00:02:10.890 --> 00:02:15.688
Fortunately, using double equals you
can always pretty easily get something

43
00:02:15.688 --> 00:02:18.170
into a Boolean if that's what you want.

44
00:02:18.170 --> 00:02:19.541
You can also do else if,

45
00:02:19.541 --> 00:02:23.940
so, else if in Rust is basically exactly
the same as it is a lot of languages.

46
00:02:25.590 --> 00:02:30.970
And, what to take a brief detour here and
talk about statements and expressions.

47
00:02:30.970 --> 00:02:34.520
So an expression in Rust,
is something that evaluates to a value.

48
00:02:35.580 --> 00:02:38.630
So for example, here's an expression,
cats is greater than 1000.

49
00:02:38.630 --> 00:02:41.640
That's an expression, because that will
evaluate to either true, or false.

50
00:02:41.640 --> 00:02:43.410
That's the value.

51
00:02:43.410 --> 00:02:45.359
This also breaks down
into sub expressions,

52
00:02:45.359 --> 00:02:49.025
like cats itself is an expression,
and 1000 itself is an expression.

53
00:02:49.025 --> 00:02:52.185
Each of those they evaluate to a value,
so they are expressions.

54
00:02:53.415 --> 00:02:55.384
So both of them individually
are expressions, and

55
00:02:55.384 --> 00:02:57.825
also the entire thing with them
put together is an expression.

56
00:02:59.155 --> 00:03:02.583
Similarly, with a function call,
we can say okay, this is an expression,

57
00:03:02.583 --> 00:03:05.797
this is an expression, this whole
function call is an expression, and

58
00:03:05.797 --> 00:03:08.200
the entire thing there is an expression.

59
00:03:08.200 --> 00:03:11.490
All of these are expressions,
they're things that evaluate to a value.

60
00:03:11.490 --> 00:03:14.820
A statement on the other hand,
does not evaluate to a value.

61
00:03:14.820 --> 00:03:19.160
So, the canonical example of this we've
been using are our calls to println,

62
00:03:19.160 --> 00:03:22.515
this does not evaluate to any
particularly useful value, so

63
00:03:22.515 --> 00:03:26.167
there's a semicolon at the end,
which kinda is a good clue that.

64
00:03:26.167 --> 00:03:30.080
So, a statement, generally speaking
will end with a semicolon.

65
00:03:30.080 --> 00:03:33.328
It's not always true, like conditionals,
like if can be used the statement and

66
00:03:33.328 --> 00:03:35.500
you don't have to put
a semicolon at the end.

67
00:03:35.500 --> 00:03:36.768
But, anytime you do see a semicolon,

68
00:03:36.768 --> 00:03:38.400
you're definitely dealing
with a statement.

69
00:03:38.400 --> 00:03:42.460
Okay, why does this distinction matter?

70
00:03:42.460 --> 00:03:46.387
Well, it matters because in a number of
cases, the Rust compiler sorta gives you

71
00:03:46.387 --> 00:03:50.710
these little conveniences, when you
choose an expression over a statement.

72
00:03:50.710 --> 00:03:54.133
So here's an example, we had this
function earlier, multiply both x and y,

73
00:03:54.133 --> 00:03:55.990
both taking f64, returning an f64.

74
00:03:55.990 --> 00:03:58.980
Then we said return x times y.

75
00:03:58.980 --> 00:04:03.030
And in a language like JavaScript for
example, you need that return keyword.

76
00:04:03.030 --> 00:04:07.454
But in Rust, as long as you wanna
return this expression here,

77
00:04:07.454 --> 00:04:11.961
you can say okay, I don't wanna
have my return statement here,

78
00:04:11.961 --> 00:04:14.900
I wanna just let the compiler infer that.

79
00:04:14.900 --> 00:04:19.079
And the way that this works is basically,
the last expression in a function,

80
00:04:19.079 --> 00:04:23.950
in this case, x times y being our
expression, is automatically returned.

81
00:04:23.950 --> 00:04:28.190
So you don't need to write out return,
you don't need to use the return keyword,

82
00:04:28.190 --> 00:04:31.090
instead, you can just say,
x times y, and that's it.

83
00:04:31.090 --> 00:04:33.040
Both of these functions
are exactly the same.

84
00:04:33.040 --> 00:04:34.781
There's no performance trade off here,

85
00:04:34.781 --> 00:04:38.020
this is just something that
the Rust compiler does for you.

86
00:04:38.020 --> 00:04:41.358
So this is the rule, if a function
ends with an expression rather than

87
00:04:41.358 --> 00:04:44.800
a statement,
it automatically returns that expression.

88
00:04:44.800 --> 00:04:47.719
But of note,
you don't wanna put a semicolon here.

89
00:04:47.719 --> 00:04:50.306
If you put a semicolon,
then this becomes a statement, and

90
00:04:50.306 --> 00:04:53.204
then Rust says, Hey,
I thought you were gonna return something,

91
00:04:53.204 --> 00:04:56.141
how come you didn't return an f64
like I thought you were gonna?

92
00:04:56.141 --> 00:04:59.746
So basically, either say return and semi
colon, or leave off both the return and

93
00:04:59.746 --> 00:05:02.520
the semi colon, and
either of those are gonna be equivalent.

94
00:05:03.780 --> 00:05:05.805
Now I mentioned this
in the context of ifs,

95
00:05:05.805 --> 00:05:08.290
because this is also a thing
that you can do with ifs.

96
00:05:08.290 --> 00:05:09.960
It's not just functions.

97
00:05:09.960 --> 00:05:14.276
So actually, each of these if branches,
follows the same rule as functions do,

98
00:05:14.276 --> 00:05:18.081
which is to say, if you want to,
you can leave off the semicolon here and

99
00:05:18.081 --> 00:05:22.510
have the entire branch, evaluate to
whatever the expression is here.

100
00:05:22.510 --> 00:05:23.550
So here's an example of that.

101
00:05:23.550 --> 00:05:26.833
I can say let message equals, and
then use if basically like a ternary,

102
00:05:26.833 --> 00:05:30.883
if you're familiar with those, where I'm
saying, okay, if cats is greater than 1,

103
00:05:30.883 --> 00:05:34.660
then message will be equal to this
expression right here, multiple cats.

104
00:05:34.660 --> 00:05:39.522
Cats greater thousand, then message will
get set to this expression right here, and

105
00:05:39.522 --> 00:05:42.373
otherwise message will get
set to need more cats.

106
00:05:42.373 --> 00:05:46.333
So here, although each of these
branches does not have a semicolon,

107
00:05:46.333 --> 00:05:49.883
this is an example where I do need
a semicolon at the end there,

108
00:05:49.883 --> 00:05:53.666
which is sorta going with the let,
because lets are statements.

109
00:05:53.666 --> 00:05:58.405
I'm gonna highlight this semicolon
little bit, because yeah, I definitely

110
00:05:58.405 --> 00:06:02.736
forget this all the time whenever
I'm doing this like, let equals if.

111
00:06:02.736 --> 00:06:06.252
And the compiler error messages
uncharacteristically unhelpful.

112
00:06:06.252 --> 00:06:10.686
So, if you're gonna use let equals and if,
definitely don't forget that semicolon.

113
00:06:10.686 --> 00:06:14.675
Any questions about statements and
expressions, and how you can use them for

114
00:06:14.675 --> 00:06:18.110
automatic return and functions,
or in if branches like this.

115
00:06:18.110 --> 00:06:21.950
&gt;&gt; The last expression would be
the return then, it sounds like.

116
00:06:21.950 --> 00:06:23.049
&gt;&gt; Right, yeah.
So if I wanted,

117
00:06:23.049 --> 00:06:25.000
I could put other stuff
in this block above this.

118
00:06:25.000 --> 00:06:28.241
And that would be the same thing as it
would be the function where the last

119
00:06:28.241 --> 00:06:32.380
expression in there would automatically
become the result of the whole branch.

120
00:06:32.380 --> 00:06:36.138
&gt;&gt; If a function contains
more than one expression,

121
00:06:36.138 --> 00:06:38.816
then also can we still do this?

122
00:06:38.816 --> 00:06:39.578
&gt;&gt; Great question.
Yeah,

123
00:06:39.578 --> 00:06:42.474
if a function contains more than one
expression, also can you do this.

124
00:06:42.474 --> 00:06:45.806
So basically the rule is, you can have as
many statements as you want in a row, and

125
00:06:45.806 --> 00:06:48.599
then after that one final expression,
but if you tried to put like,

126
00:06:48.599 --> 00:06:52.295
here's an expression, then here's another
expression, you get a compiler error.

127
00:06:52.295 --> 00:06:55.376
So it has to be a bunch of statements
followed by an expression at the end

128
00:06:55.376 --> 00:06:58.563
that's just sorta hanging out, and
that last expression right there,

129
00:06:58.563 --> 00:07:00.755
that's sorta the last
thing in the function.

130
00:07:00.755 --> 00:07:03.977
That's what gets turned to
the automatic return, and

131
00:07:03.977 --> 00:07:06.648
it's the same thing
inside these if blocks.

132
00:07:06.648 --> 00:07:11.051
&gt;&gt; Would you wanna specify explicitly
every return statement if you're trying

133
00:07:11.051 --> 00:07:12.780
to make an early return?

134
00:07:12.780 --> 00:07:13.560
&gt;&gt; Yeah, for sure.

135
00:07:13.560 --> 00:07:15.265
Yeah if you wanna early return,

136
00:07:15.265 --> 00:07:17.994
then you do need to use
the return keyword for that.

137
00:07:17.994 --> 00:07:21.043
But if you want, you can can do an early
return, and then still at the end have

138
00:07:21.043 --> 00:07:24.470
the default return use the expression
style, that's totally fine.

139
00:07:24.470 --> 00:07:28.368
But yeah, if you wanna do an early return,
either you need to do that, or you need to

140
00:07:28.368 --> 00:07:32.217
do something like this where you have
conditionals throughout the function and,

141
00:07:32.217 --> 00:07:35.451
it's always possible to,
you never need to use the return keyword,

142
00:07:35.451 --> 00:07:38.240
you can always express
the same thing without it.

143
00:07:38.240 --> 00:07:42.495
But yeah, early returns generally
use the return keyword for that.

144
00:07:42.495 --> 00:07:43.602
&gt;&gt; For the comparison,

145
00:07:43.602 --> 00:07:47.486
I'm guessing that it takes that type
into account like a string of 1.1.

146
00:07:47.486 --> 00:07:53.197
What it would be false if it
was compared to a float of 1.1?

147
00:07:53.197 --> 00:07:56.908
&gt;&gt; That's even better you
would get a type error.

148
00:07:56.908 --> 00:08:02.311
So if you tried to compare, if you
said the string foo is greater than 1,

149
00:08:02.311 --> 00:08:04.357
it would just not compile.

150
00:08:04.357 --> 00:08:09.093
&gt;&gt; And then the second question was kinda
setting these variables of conditional

151
00:08:09.093 --> 00:08:10.500
statements.

152
00:08:10.500 --> 00:08:16.764
Can you then pass around in
the string interpolation?

153
00:08:16.764 --> 00:08:17.783
&gt;&gt; Sure.
Yeah, if you want to.

154
00:08:17.783 --> 00:08:20.520
[LAUGH]
&gt;&gt; Yeah, that's awesome.

155
00:08:20.520 --> 00:08:23.073
&gt;&gt; Yeah, so actually this entire
if like starting from the i and

156
00:08:23.073 --> 00:08:25.790
f to this close curly brace,
that whole thing is an expression.

157
00:08:25.790 --> 00:08:28.505
So you can just pick that up and
drop it anywhere you want.

158
00:08:28.505 --> 00:08:31.076
[LAUGH]
&gt;&gt; Can that be used for

159
00:08:31.076 --> 00:08:32.490
knowledge coercion?

160
00:08:33.736 --> 00:08:34.540
&gt;&gt; Great question.

161
00:08:34.540 --> 00:08:36.644
Can that be used for knowledge coercion?

162
00:08:36.644 --> 00:08:39.747
Rust actually does not have
a concept of null, or undefined,

163
00:08:39.747 --> 00:08:41.484
or any similar kinds of coercion.

164
00:08:41.484 --> 00:08:44.881
We'll see how the alternative
that it has when we get to Enums.

165
00:08:44.881 --> 00:08:49.680
But basically, those are no nil undefined,
anything like that, Rust does not have it.

