WEBVTT

1
00:00:00.950 --> 00:00:03.020
And let's talk about type parameters.

2
00:00:03.020 --> 00:00:05.940
So here's an example of
a method on a string.

3
00:00:05.940 --> 00:00:07.850
So this is the pop method.

4
00:00:07.850 --> 00:00:11.720
And what pop does is it says take one
character off the end of the string and

5
00:00:11.720 --> 00:00:13.330
just return it.

6
00:00:13.330 --> 00:00:16.470
So I'm gonna say last char = mystring.pop.

7
00:00:16.470 --> 00:00:18.630
Remember we talked about chars earlier,
that's that type.

8
00:00:18.630 --> 00:00:21.078
That's basically the same
thing as a u32 but

9
00:00:21.078 --> 00:00:23.856
it's validated to be a valid
unicode scalar value.

10
00:00:23.856 --> 00:00:28.606
So just like, hey, just pop the public
character off of my string.

11
00:00:28.606 --> 00:00:31.856
Now in some languages,
this might be the type of last char,

12
00:00:31.856 --> 00:00:34.066
as it might have actually the type char.

13
00:00:34.066 --> 00:00:37.390
In other words, when I call pop on my
string, it's gonna give me back a char.

14
00:00:38.550 --> 00:00:39.270
Well, here's the problem.

15
00:00:39.270 --> 00:00:40.820
What if it's an empty string?

16
00:00:40.820 --> 00:00:43.650
What if my string is actually
has no characters in it?

17
00:00:43.650 --> 00:00:46.490
I'm calling pop on it,
then what would this be?

18
00:00:46.490 --> 00:00:49.542
Well, in a lot of languages that might
come back as null or nil or undefined or

19
00:00:49.542 --> 00:00:52.960
something like that, but
Rust doesn't have those things.

20
00:00:52.960 --> 00:00:53.830
So what does it do?

21
00:00:53.830 --> 00:00:57.050
Well, one option is it could panic,
but as it happens, it doesn't panic.

22
00:00:57.050 --> 00:00:59.009
It does something a little
bit more useful than that.

23
00:01:00.180 --> 00:01:01.260
So here's what it actually does.

24
00:01:02.540 --> 00:01:05.780
Pop returns an option, bracket char.

25
00:01:06.820 --> 00:01:08.970
So what does that, let's talk about that.

26
00:01:08.970 --> 00:01:12.450
So option is an enum and
its definition looks like this.

27
00:01:12.450 --> 00:01:16.635
It's enum option bracket T, and
then it's two variants or none,

28
00:01:16.635 --> 00:01:18.514
and then some parentheses T.

29
00:01:18.514 --> 00:01:22.212
This being the tuple syntax for
having a payload.

30
00:01:22.212 --> 00:01:25.429
So either it's got none,
or it's got some and

31
00:01:25.429 --> 00:01:30.640
then this T type that's wrapped up
inside as a payload to the some variant.

32
00:01:31.830 --> 00:01:33.230
So what is T?

33
00:01:33.230 --> 00:01:35.550
Well, T could be anything.

34
00:01:35.550 --> 00:01:38.160
It's what's called a type parameter.

35
00:01:38.160 --> 00:01:39.870
I could have actually chosen
any name I wanted for this.

36
00:01:39.870 --> 00:01:42.639
I happen to choose T but
I could have chosen B or X or

37
00:01:42.639 --> 00:01:45.430
food or hamburger, anything you want.

38
00:01:45.430 --> 00:01:48.874
The point is when you define it
inside these angle brackets,

39
00:01:48.874 --> 00:01:50.765
whatever name you choose there,

40
00:01:50.765 --> 00:01:54.900
you're now free to use inside of your
variants in your enum definition.

41
00:01:56.350 --> 00:01:59.785
And as you may have noticed,
there's more angle brackets here when I'm

42
00:01:59.785 --> 00:02:02.370
actually making one of
these option things.

43
00:02:02.370 --> 00:02:04.852
So because I put angle
brackets here the definition,

44
00:02:04.852 --> 00:02:09.560
whenever you're actually using this thing,
you need to specify exactly what T is.

45
00:02:09.560 --> 00:02:12.120
So in this particular example, T is char.

46
00:02:12.120 --> 00:02:15.740
But as we'll C,
T can be any type you want.

47
00:02:15.740 --> 00:02:20.360
So for example, here's using T
being string rather than char.

48
00:02:20.360 --> 00:02:24.672
So I could say let email:
Option&lt;string&gt; = Some (email_str) which

49
00:02:24.672 --> 00:02:25.930
has the type string.

50
00:02:26.930 --> 00:02:31.400
Now here, this is an example of my
creating an option from scratch.

51
00:02:32.420 --> 00:02:36.002
Now you may be wondering why didn't
I put option colon colon some here.

52
00:02:36.002 --> 00:02:38.491
And the answer there is that
option is actually special.

53
00:02:38.491 --> 00:02:41.632
This is built into the standard library
and you don't actually have to namespace

54
00:02:41.632 --> 00:02:43.840
it basically because it
comes up really often.

55
00:02:43.840 --> 00:02:47.080
There's a lot of functions
that involve option types.

56
00:02:47.080 --> 00:02:51.280
And Rust didn't want you to have to write
out option colon colon all the time.

57
00:02:51.280 --> 00:02:55.526
So basically, just made it so
you can just say some or none and

58
00:02:55.526 --> 00:02:58.458
not have to do any name spacing for those.

59
00:02:58.458 --> 00:03:03.331
So the other thing we could do is we
could set it equal to none either

60
00:03:03.331 --> 00:03:05.826
of those is totally fine, okay.

61
00:03:09.123 --> 00:03:13.422
So a related type is result.

62
00:03:13.422 --> 00:03:18.160
So result is similar to option
except that instead of representing

63
00:03:18.160 --> 00:03:20.528
the possible absence of a value,

64
00:03:20.528 --> 00:03:25.530
result represents the possible
an operation that could have failed.

65
00:03:26.750 --> 00:03:31.070
So here we have an okay variant,
in which case, it wraps up the okay.

66
00:03:31.070 --> 00:03:34.743
That's why the O type parameter,
or we have an error variant,

67
00:03:34.743 --> 00:03:38.320
in which case it has a payload
of E type parameter.

68
00:03:38.320 --> 00:03:40.049
So there's two type parameters
here rather than one.

69
00:03:40.049 --> 00:03:42.010
You can have as many type
parameters as you want in a type.

70
00:03:43.190 --> 00:03:44.510
So here's an example of using that.

71
00:03:44.510 --> 00:03:48.781
I might say let success is result
of i64 string equals okay 42, or

72
00:03:48.781 --> 00:03:53.730
failure of i64 string it was error and
then some error string.

73
00:03:53.730 --> 00:03:57.192
So this would be basically I would use
this in a situation where I'm gonna

74
00:03:57.192 --> 00:03:58.611
run some sort of operation and

75
00:03:58.611 --> 00:04:02.389
either it will succeed in which case
if it succeeded, I'll get back in i64.

76
00:04:02.389 --> 00:04:04.768
Or that operation might fail and
if it failed,

77
00:04:04.768 --> 00:04:07.700
it's gonna give me a string
describing what went wrong.

78
00:04:09.410 --> 00:04:12.090
Keep in mind that this error
type could be anything you want.

79
00:04:12.090 --> 00:04:15.310
Maybe in fact, a pretty common thing that
people will do is they'll actually have

80
00:04:15.310 --> 00:04:18.510
an enum that enumerates all the different
things that could go wrong.

81
00:04:18.510 --> 00:04:20.990
And then that will be what
comes back as your error type.

82
00:04:22.060 --> 00:04:25.331
If you don't have an error type,
you could just put unit there.

83
00:04:25.331 --> 00:04:29.575
Or if you want, that is to say if there's
no additional error information that you

84
00:04:29.575 --> 00:04:32.960
wanna have there,
you could put unit for this error type.

85
00:04:32.960 --> 00:04:36.710
Or it's quite common instead to
use option rather than results.

86
00:04:36.710 --> 00:04:40.520
Either one's totally fine.

87
00:04:40.520 --> 00:04:43.667
Much like with option, the result colon
colon prefix is also optional for

88
00:04:43.667 --> 00:04:45.860
result because again result
comes up all the time.

89
00:04:45.860 --> 00:04:50.111
Results and option both are very common
use not just in the Rust standard library

90
00:04:50.111 --> 00:04:52.151
but also in the whole Rust ecosystem.

91
00:04:52.151 --> 00:04:55.500
They're the only two enums that work
this way are result and option but

92
00:04:55.500 --> 00:04:58.640
everywhere else you do need to
actually put that prefix on there.

