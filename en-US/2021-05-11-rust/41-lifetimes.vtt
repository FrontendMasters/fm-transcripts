WEBVTT

1
00:00:00.080 --> 00:00:03.280
That brings us to the final section,
lifetimes.

2
00:00:03.280 --> 00:00:11.335
This is the end of our discussion of how
rusts memory management system works.

3
00:00:11.335 --> 00:00:14.912
Cool, so in this section, we're talking
about lifetimes, lifetime annotations,

4
00:00:14.912 --> 00:00:17.960
lifetime illusion, and
finally, the static lifetime.

5
00:00:17.960 --> 00:00:22.560
So here we have a vector of years so
we've got 1980 through 2010.

6
00:00:22.560 --> 00:00:25.224
And let's say,
we wanna take some slices of this.

7
00:00:25.224 --> 00:00:28.666
So we wanna say, eighties is
the first two years in 1980-1985.

8
00:00:28.666 --> 00:00:31.450
And the nineties is
the two years after that.

9
00:00:31.450 --> 00:00:35.050
So 1990 and another 1990 in there.

10
00:00:35.050 --> 00:00:38.597
And then we want to print, we have this
many years in the nineties and say,

11
00:00:38.597 --> 00:00:39.465
nineties.len.

12
00:00:39.465 --> 00:00:41.928
Very simple program not terribly useful,
but

13
00:00:41.928 --> 00:00:45.340
we'll make it a little
bit more interesting.

14
00:00:45.340 --> 00:00:49.392
Now let's say that I'm making a program
that has something to do with when certain

15
00:00:49.392 --> 00:00:52.410
pieces of music were
released in different years.

16
00:00:52.410 --> 00:00:55.443
So I want to make a struct and
I want to have a struct that says, okay,

17
00:00:55.443 --> 00:00:57.490
I want to have a slice for all my years.

18
00:00:57.490 --> 00:00:59.200
And I also want to have
a slice of just the eighties.

19
00:00:59.200 --> 00:01:03.589
So part of our years back that we had
sliced off in the previous example, and

20
00:01:03.589 --> 00:01:06.290
I also want to have a slice of nineties.

21
00:01:06.290 --> 00:01:08.460
And this is what I want to
have in my releases struct.

22
00:01:09.470 --> 00:01:12.590
And then let's say I want to make
a function that's just looking at jazz

23
00:01:12.590 --> 00:01:13.110
releases.

24
00:01:13.110 --> 00:01:16.960
So it says, give me a list of
the years and then I'm going to return

25
00:01:16.960 --> 00:01:22.540
a struct of releases for all the jazz
releases that I know about in those years.

26
00:01:22.540 --> 00:01:26.260
So let's say again, I'm defining eighties
and nineties, the same way we did on

27
00:01:26.260 --> 00:01:29.398
the previous slide, as the first
two years and second, two years.

28
00:01:29.398 --> 00:01:32.530
Ordinarily, a function like this
would probably want to do some more

29
00:01:32.530 --> 00:01:33.780
sophisticated analysis.

30
00:01:33.780 --> 00:01:36.340
This will just hard code it for
the sake of the example.

31
00:01:36.340 --> 00:01:41.301
And then I would return the struct saying
releases with years is the years that

32
00:01:41.301 --> 00:01:44.060
were passed in the eighties and nineties.

33
00:01:44.060 --> 00:01:44.880
And that's it.

34
00:01:46.180 --> 00:01:49.350
Okay, everything looks okay so far.

35
00:01:49.350 --> 00:01:53.040
Now, let's further say that I've
got our jazz releases function.

36
00:01:53.040 --> 00:01:56.280
And then I'm over here in main and
I say let releases equals, and

37
00:01:56.280 --> 00:02:00.300
then I open a curly brace because I want
to make a little anonymous scope in here.

38
00:02:01.440 --> 00:02:06.300
And I'm like, let all years equals and
then another back of years.

39
00:02:06.300 --> 00:02:09.100
And I say I call jazz
releases passing all years.

40
00:02:09.100 --> 00:02:11.290
So jazz releases is gonna take this.

41
00:02:11.290 --> 00:02:14.548
And it's going to go through and
make these slices these things,

42
00:02:14.548 --> 00:02:17.580
put the slices into the releases,
and then we're all good.

43
00:02:18.770 --> 00:02:23.704
And finally, let's say that after all
this is done, after this scope has ended,

44
00:02:23.704 --> 00:02:26.585
I say let eighties = releases.eighties.

45
00:02:26.585 --> 00:02:29.360
Bridget, there's kind of
a lot of moving parts here.

46
00:02:29.360 --> 00:02:33.965
But believe it or not, at some point, if
Rust were to do exactly what we've asked

47
00:02:33.965 --> 00:02:38.470
and not give us a compiler error, but
of course it will give us a compile error.

48
00:02:39.900 --> 00:02:43.186
This would actually be a use after free
and it might not look like it at first

49
00:02:43.186 --> 00:02:46.220
because we had to kind of jump through
a number of hoops to get there.

50
00:02:47.530 --> 00:02:52.522
So lifetimes solve a problem in Rust it
has to do with this type of complicated

51
00:02:52.522 --> 00:02:53.380
situation.

52
00:02:54.620 --> 00:02:57.471
We've seen over the course of this
workshop, we sort of built up more and

53
00:02:57.471 --> 00:02:59.496
more complicated examples
of memory management.

54
00:02:59.496 --> 00:03:02.594
And seeing sort of the edge cases that
we can get into when dealing with Rust.

55
00:03:02.594 --> 00:03:05.493
Sort of form of automatic memory
management that doesn't require a garbage

56
00:03:05.493 --> 00:03:06.000
collector.

57
00:03:07.030 --> 00:03:10.230
Then we saw how initially we
talked about just ownership and

58
00:03:10.230 --> 00:03:12.928
when things go out of scope,
we deallocate them.

59
00:03:12.928 --> 00:03:15.002
And where that model kind of breaks
down and becomes kind of cumbersome,

60
00:03:15.002 --> 00:03:15.961
like in our exercise for Part 5.

61
00:03:15.961 --> 00:03:19.591
When you start needing to like
accidentally return more things or

62
00:03:19.591 --> 00:03:23.353
not accidentally but incidentally,
return more things, just for

63
00:03:23.353 --> 00:03:25.820
the sake of avoiding a use after move.

64
00:03:25.820 --> 00:03:28.130
And we saw how borrowing
solves that problem.

65
00:03:28.130 --> 00:03:29.862
It makes things a lot nicer by saying,

66
00:03:29.862 --> 00:03:33.123
I want to just temporarily give access
to this thing to something else.

67
00:03:33.123 --> 00:03:36.790
But now we're running into a scenario
where when we're using ownership and

68
00:03:36.790 --> 00:03:37.887
borrowing together.

69
00:03:37.887 --> 00:03:40.848
We've actually ended up with
a situation where by default,

70
00:03:40.848 --> 00:03:44.400
we would have a use after free if
the Rust compiler wasn't gonna save us.

71
00:03:44.400 --> 00:03:48.200
And just looking at the code, it's not
necessarily obvious why that would be.

72
00:03:49.820 --> 00:03:52.370
So let's look at why it is a problem.

73
00:03:52.370 --> 00:03:56.622
And we can see how the concept of
lifetimes can allow us to track when these

74
00:03:56.622 --> 00:03:58.026
things are happening.

75
00:03:58.026 --> 00:04:02.682
And sort of get a better understanding and
build a better mental model in our code of

76
00:04:02.682 --> 00:04:07.490
what's actually happening behind the
scenes of Rust's memory management model.

77
00:04:08.660 --> 00:04:12.320
Okay, so why is this a use after free,
so here's why.

78
00:04:13.650 --> 00:04:15.090
All years is allocated right here.

79
00:04:15.090 --> 00:04:16.080
This is our vec.

80
00:04:16.080 --> 00:04:18.045
And then, of course,
when the vec goes out of scope,

81
00:04:18.045 --> 00:04:21.063
unless it's been moved to a different
scope and ownership has been transferred,

82
00:04:21.063 --> 00:04:23.354
it's going to get de allocated
as soon as it goes out of scope.

83
00:04:23.354 --> 00:04:26.770
And it goes out of scope right here,
so this is all years gets reallocated.

84
00:04:27.830 --> 00:04:29.691
Now we never do reference
all years ever again,

85
00:04:29.691 --> 00:04:32.400
which of course we couldn't because
it's out of scope, all right?

86
00:04:32.400 --> 00:04:35.120
The scope where it's
alive is inside of here.

87
00:04:35.120 --> 00:04:40.862
But remember that what this jazz releases
function does is we give it something

88
00:04:40.862 --> 00:04:46.450
that this references a heap allocation,
in this case, a slice of years.

89
00:04:46.450 --> 00:04:50.483
And inside that function,
it's taking these slices of this thing,

90
00:04:50.483 --> 00:04:54.029
which are all references pointing
to that same heap memory,

91
00:04:54.029 --> 00:04:57.280
as was originally
allocated in this vec call.

92
00:04:57.280 --> 00:04:59.677
And then it's storing them
in this releases struct,

93
00:04:59.677 --> 00:05:02.170
which we then reference later on.

94
00:05:02.170 --> 00:05:05.480
So after going through a series of hops,
what we've ended up with this,

95
00:05:05.480 --> 00:05:08.954
we now have a reference that's pointing
to heap memory that has been freed,

96
00:05:08.954 --> 00:05:10.440
which is to say I use after free.

97
00:05:12.630 --> 00:05:17.140
So the problem here is that this
slice of all years.releases is

98
00:05:17.140 --> 00:05:21.240
essentially going to cause
this use after free problem.

99
00:05:22.330 --> 00:05:25.700
So fortunately, because this is Rust, we
won't actually get to use that for free,

100
00:05:25.700 --> 00:05:27.540
we'll get a compiler error.

101
00:05:27.540 --> 00:05:32.231
But let's look at how Rust knows that
it should give a compiler error using

102
00:05:32.231 --> 00:05:33.980
the concept of lifetimes.

103
00:05:35.100 --> 00:05:39.120
So what we have highlighted on the screen
here is the lifetime of this vec.

104
00:05:39.120 --> 00:05:42.369
In other words, this is the time
between when the vec gets allocated and

105
00:05:42.369 --> 00:05:46.350
when it's going to get automatically
deallocated, that is its lifetime.

106
00:05:46.350 --> 00:05:49.764
It's sort of its metaphorically,
its life begins when it's allocated and

107
00:05:49.764 --> 00:05:51.160
ends when it's deallocated.

108
00:05:53.210 --> 00:05:58.450
So this is what's highlighted here is
sort of the lifetime of all years.

109
00:05:58.450 --> 00:06:02.517
And we can see that this right
here refers to all years

110
00:06:02.517 --> 00:06:06.440
indirectly granted through these releases.

111
00:06:06.440 --> 00:06:11.370
After the lifetime of all years has ended,
and that's why the use after free happens.

112
00:06:11.370 --> 00:06:14.310
So another way to think of this
is that lifetimes are a way of

113
00:06:14.310 --> 00:06:16.596
tracking when a use
after free might happen.

114
00:06:16.596 --> 00:06:19.800
Which is to say, if we use something
after its lifetime has ended,

115
00:06:19.800 --> 00:06:21.240
that'll be a use after free.

116
00:06:22.590 --> 00:06:26.050
Okay, so
this is the lifetime of all years.

117
00:06:26.050 --> 00:06:28.300
This refers to all years
after its lifetime has ended.

118
00:06:28.300 --> 00:06:28.960
That's a problem.

119
00:06:30.440 --> 00:06:32.680
What can we do about this and
how can we track it?

120
00:06:33.685 --> 00:06:36.142
So at this point,
when we call jazz releases,

121
00:06:36.142 --> 00:06:38.035
this is still within its lifetime.

122
00:06:39.155 --> 00:06:41.543
Like when we call this
function passing in all years,

123
00:06:41.543 --> 00:06:43.305
we're still in the highlighted area.

124
00:06:43.305 --> 00:06:47.125
Which is to say, this thing is still
alive, it has not yet been deallocated.

125
00:06:47.125 --> 00:06:48.995
So there's no problem at this stage.

126
00:06:48.995 --> 00:06:51.671
The problem seems to come
somewhere after this stage,

127
00:06:51.671 --> 00:06:54.905
after we're passing this
into this function.

128
00:06:54.905 --> 00:06:55.755
So let's take a look at that.

129
00:06:57.340 --> 00:07:00.734
In particular, let's take a look at
how releases is sort of depending

130
00:07:00.734 --> 00:07:04.140
on years even though that
dependency is not clear.

131
00:07:04.140 --> 00:07:06.127
Like when we return this releases value,

132
00:07:06.127 --> 00:07:10.300
we have some slices in here which
actually referenced this years slice.

133
00:07:10.300 --> 00:07:12.850
But that's not clear just
from looking at this code.

134
00:07:14.420 --> 00:07:16.780
So let's try and
make it a little bit more explicit.

135
00:07:16.780 --> 00:07:19.580
So here's our function, I shortened
the name so it fit on the slide.

136
00:07:19.580 --> 00:07:21.996
So now we're just calling it jazz
instead of jazz releases, but

137
00:07:21.996 --> 00:07:23.560
you can kind of get the idea.

138
00:07:23.560 --> 00:07:25.840
So we're taking this slice.

139
00:07:25.840 --> 00:07:29.464
This slice as of when this function
is called, it's still alive and

140
00:07:29.464 --> 00:07:31.080
then we return it.

141
00:07:31.080 --> 00:07:34.142
We're returning this releases
struct which references things that

142
00:07:34.142 --> 00:07:35.360
are still inside of there.

