WEBVTT

1
00:00:00.070 --> 00:00:01.350
So let's talk about numeric types.

2
00:00:02.360 --> 00:00:04.840
So here I've said let mut y =2.2.

3
00:00:04.840 --> 00:00:08.465
And then later on I've said y = 3.1.

4
00:00:08.465 --> 00:00:12.350
And then let's suppose right after
that I said y equals the string 3.1.

5
00:00:12.350 --> 00:00:15.039
So this would not work because in rust,

6
00:00:15.039 --> 00:00:20.010
although you're allowed to reassign
things, once you define a value,

7
00:00:20.010 --> 00:00:23.770
that value gets a particular
type associated with it.

8
00:00:23.770 --> 00:00:25.860
And you're not allowed to
change that at runtime.

9
00:00:25.860 --> 00:00:28.361
Even though you're allowed to
reassign values of the same type,

10
00:00:28.361 --> 00:00:30.510
you can't change to a different type.

11
00:00:30.510 --> 00:00:33.543
So this would be an example of
changing from a float to a string and

12
00:00:33.543 --> 00:00:34.960
that's not allowed in rust.

13
00:00:37.300 --> 00:00:41.660
Now, we didn't have any type
annotations in that example.

14
00:00:41.660 --> 00:00:45.160
But if I wanted to, I could add a comment
here, this is a comment and rust say, hey,

15
00:00:45.160 --> 00:00:46.770
by the way, x is a float.

16
00:00:46.770 --> 00:00:49.899
But really I would never do that because
what I would do instead is I would

17
00:00:49.899 --> 00:00:52.780
actually write a type annotation
like this saying x colon f 64.

18
00:00:52.780 --> 00:00:57.440
F64 is short for
64 bit floating point number.

19
00:00:57.440 --> 00:01:00.125
So we'll talk about the different
numeric types in a second.

20
00:01:00.125 --> 00:01:04.842
But basically the reason that I
might do this is I might want to be

21
00:01:04.842 --> 00:01:07.430
explicit about the type of x.

22
00:01:07.430 --> 00:01:09.035
Now you'll notice that I
didn't have to do this.

23
00:01:09.035 --> 00:01:12.910
So there's plenty of languages where you
have to write out the types of absolutely

24
00:01:12.910 --> 00:01:13.593
everything.

25
00:01:13.593 --> 00:01:16.824
In rust, at least when it comes to let,
you don't have to do that.

26
00:01:16.824 --> 00:01:20.499
Rust you'll be able to do type inference
and generally speaking be able to figure

27
00:01:20.499 --> 00:01:22.832
out that okay,
I see that you assigned X to 1.1.

28
00:01:22.832 --> 00:01:25.605
That's some sort of floating point number,
okay, no problem.

29
00:01:25.605 --> 00:01:27.445
You don't actually need
to write out the f64.

30
00:01:27.445 --> 00:01:30.555
And in fact, if I want to,
I could write it out for x but not for y.

31
00:01:30.555 --> 00:01:33.430
That's another thing I could totally do.

32
00:01:33.430 --> 00:01:36.669
But importantly,
it doesn't always get that,

33
00:01:36.669 --> 00:01:39.750
it's not always able to provide that.

34
00:01:39.750 --> 00:01:42.920
So in some cases rust type inference
when you get into more complicated types

35
00:01:42.920 --> 00:01:45.657
probably won't actually happen
in the course of this workshop.

36
00:01:45.657 --> 00:01:47.144
But as you get more advanced rust,

37
00:01:47.144 --> 00:01:50.478
sometimes when you write let, rust
compiler will say, okay, I need to write

38
00:01:50.478 --> 00:01:54.100
out the type annotation because I
can't quite figure out what this is.

39
00:01:54.100 --> 00:01:57.020
But it's important to note
that it'll never get it wrong.

40
00:01:57.020 --> 00:02:00.789
Like it'll never miss infer something and
say like, yeah, I know what the type is.

41
00:02:00.789 --> 00:02:03.140
And it actually is a different type.

42
00:02:03.140 --> 00:02:06.373
The worst that will happen is either
it'll get it right and say, great,

43
00:02:06.373 --> 00:02:08.334
I was able to infer that or
it'll say, hey,

44
00:02:08.334 --> 00:02:12.260
I couldn't figure this out, I need
you to write out the type annotation.

45
00:02:12.260 --> 00:02:16.563
So the compiler is at least reliable
when it comes to that even if it's

46
00:02:16.563 --> 00:02:19.100
not 100% able to always offer that.

47
00:02:20.230 --> 00:02:22.830
So let's look at defining
our own functions.

48
00:02:22.830 --> 00:02:27.185
Let's say I want to say let answer equals
then call a function called multiply

49
00:02:27.185 --> 00:02:30.334
both passing two floats and
then print the answer here.

50
00:02:30.334 --> 00:02:32.846
Here's how I would define that function,

51
00:02:32.846 --> 00:02:37.331
say function multiply both x is an f64
y is an f64 and it returns an f64.

52
00:02:37.331 --> 00:02:41.700
So here although main didn't have any
arguments multiply both is taking two

53
00:02:41.700 --> 00:02:43.060
arguments.

54
00:02:43.060 --> 00:02:45.084
Now when you're defining functions,

55
00:02:45.084 --> 00:02:49.080
you do have to write out the type
annotations always, that's a rule in rust.

56
00:02:49.080 --> 00:02:52.486
So if I'm saying multiply both is
a function that takes x and y,

57
00:02:52.486 --> 00:02:54.490
I do have to say what their types are.

58
00:02:54.490 --> 00:02:56.733
And then I also have to say what
the return type of the function is.

59
00:02:56.733 --> 00:03:00.300
And then I can use the return
keyword to say return x times y.

60
00:03:01.610 --> 00:03:06.352
So you can read this type annotation here
as multiply both takes two f64 arguments

61
00:03:06.352 --> 00:03:08.410
and returns an f64.

62
00:03:08.410 --> 00:03:11.360
Whereas main takes no arguments and
returns nothing.

63
00:03:11.360 --> 00:03:14.240
So if your function
doesn't return anything,

64
00:03:14.240 --> 00:03:18.203
you don't have to put this arrow here,
you can just leave it off.

65
00:03:18.203 --> 00:03:22.910
Okay, we did talk about the difference
between, macros and functions.

66
00:03:22.910 --> 00:03:25.867
But here we can actually see in the way
that we're calling multiply both,

67
00:03:25.867 --> 00:03:27.740
we're not using
the exclamation point here.

68
00:03:27.740 --> 00:03:30.618
So this is the first time that we've seen
something without that exclamation point.

69
00:03:30.618 --> 00:03:33.620
But in normal rust code,
this is way more common.

70
00:03:33.620 --> 00:03:36.863
And the exclamation point is only used for
the occasional macro, which

71
00:03:36.863 --> 00:03:40.720
definitely come up plenty often, but not
nearly as often as normal function calls.

72
00:03:43.150 --> 00:03:45.766
Okay, any questions about
the differences there and

73
00:03:45.766 --> 00:03:49.440
anything we've talked about in terms
of type annotations and functions?

74
00:03:49.440 --> 00:03:54.772
So the question is, basically, is there
some way to sort of maybe trick the rust

75
00:03:54.772 --> 00:04:00.264
compiler by saying this thing has the type
object or maybe the type any and then that

76
00:04:00.264 --> 00:04:05.457
would allow you to reassign it on the fly
from a float to a string or vice versa.

77
00:04:05.457 --> 00:04:07.390
Is that [INAUDIBLE] that cool?

78
00:04:07.390 --> 00:04:10.040
Yeah, so the short answer is no,
you can't do that.

79
00:04:10.040 --> 00:04:11.797
So rust does not have an any type.

80
00:04:11.797 --> 00:04:14.387
It also doesn't have Java,
you have object and

81
00:04:14.387 --> 00:04:18.681
everything inherits from object just
about, it doesn't have either those.

82
00:04:18.681 --> 00:04:21.400
In fact,
rust doesn't have inheritance in general.

83
00:04:21.400 --> 00:04:25.140
So basically,
there really is no way to get around that.

84
00:04:25.140 --> 00:04:29.992
Now, it is possible to have Collections

85
00:04:29.992 --> 00:04:34.783
which contain multiple different types of
their elements like you can have an array

86
00:04:34.783 --> 00:04:39.574
that contains simultaneously a string for
some of its elements, and add a float for

87
00:04:39.574 --> 00:04:42.243
other elements, but
the way that you do that is

88
00:04:42.243 --> 00:04:46.862
using something called EOMS which we'll
get to and think two seconds from now.

89
00:04:46.862 --> 00:04:49.466
[LAUGH] So we haven't gotten there yet.

90
00:04:49.466 --> 00:04:53.093
But yeah, in general short answer is yeah,
you can't do that [LAUGH].

