WEBVTT

1
00:00:00.500 --> 00:00:02.920
All right,
welcome this is the introduction to rust.

2
00:00:02.920 --> 00:00:05.422
So we have some instructions
on here on the slide,

3
00:00:05.422 --> 00:00:07.640
in this repo,
that will help you get set up.

4
00:00:07.640 --> 00:00:11.752
So this is things like how to install
rust, how to find the companion website

5
00:00:11.752 --> 00:00:14.460
for this, and also the slides for
this workshop.

6
00:00:15.910 --> 00:00:18.766
We're gonna start with a little
introduction before we get into the actual

7
00:00:18.766 --> 00:00:19.500
course material.

8
00:00:19.500 --> 00:00:22.960
So, this is gonna give you a little
bit of background, like what is Rust?

9
00:00:22.960 --> 00:00:24.170
Who uses Rust?

10
00:00:24.170 --> 00:00:26.720
Why and
why not you might want to use Rust?

11
00:00:26.720 --> 00:00:28.170
And the workshop structure.

12
00:00:29.470 --> 00:00:32.278
So, this is from
the rust-lang.org website,

13
00:00:32.278 --> 00:00:34.610
this is sort of how Rust self describes.

14
00:00:34.610 --> 00:00:38.900
It's a language empowering everyone to
build reliable and efficient software.

15
00:00:38.900 --> 00:00:40.497
So, both of those two
words are highlighted, and

16
00:00:40.497 --> 00:00:42.690
they're both important as we're gonna see.

17
00:00:42.690 --> 00:00:45.519
So rust is a language that compiles
to either machine code which would

18
00:00:45.519 --> 00:00:46.850
mean like a binary executable.

19
00:00:46.850 --> 00:00:50.302
So like a.xc on Windows or
just a binary executable on Mac or

20
00:00:50.302 --> 00:00:54.180
Linux or to webassembly,
which will let you run it in the browser.

21
00:00:55.190 --> 00:00:59.090
Who uses Rust, all sorts of people,
all sorts of organisations.

22
00:00:59.090 --> 00:01:02.314
Mozilla is probably the most well known
because they were sort of bankrolling rust

23
00:01:02.314 --> 00:01:05.400
development for the first like decade or
so of its life.

24
00:01:05.400 --> 00:01:08.810
They use it in Firefox to power some of
their new rendering stuff that's been

25
00:01:08.810 --> 00:01:11.370
a lot faster than what they had before.

26
00:01:11.370 --> 00:01:16.023
Microsoft has started using rust in a big
way they are apparently rewriting some of

27
00:01:16.023 --> 00:01:18.940
the core like low level
windows things in rust.

28
00:01:18.940 --> 00:01:22.140
I don't know if that means they're going
to rewrite all of windows in rust that

29
00:01:22.140 --> 00:01:24.659
seems unlikely but it is powerful
enough that you can use it for

30
00:01:24.659 --> 00:01:26.760
really low level operating system stuff.

31
00:01:26.760 --> 00:01:30.146
And Microsoft has joined the rust
foundation as like one of the most

32
00:01:30.146 --> 00:01:31.244
prominent members.

33
00:01:31.244 --> 00:01:34.789
Dropbox has been using rough stuff
to improve some of the performance

34
00:01:34.789 --> 00:01:37.170
on some of their sinking stuff.

35
00:01:37.170 --> 00:01:40.197
There's also sort of lesser
known organizations talk for

36
00:01:40.197 --> 00:01:44.770
example is using rust to make
an embedded systems operating system.

37
00:01:44.770 --> 00:01:48.525
Debbie makes makes a game engine in Rust
Redux is actually a full blown desktop

38
00:01:48.525 --> 00:01:50.930
operating system written entirely in Rust.

39
00:01:50.930 --> 00:01:53.670
You can find more examples
of this on the Rust website.

40
00:01:53.670 --> 00:01:56.190
So you can see there's a lot of
diversity in how rust is used.

41
00:01:56.190 --> 00:01:58.742
It's used by really big companies,
really small companies,

42
00:01:58.742 --> 00:02:02.840
not organizations that are not companies,
all sorts of different examples.

43
00:02:02.840 --> 00:02:05.545
So what can I build with rust
you might be asking yourself.

44
00:02:05.545 --> 00:02:09.145
One of the obvious things for an audience
in front end masters is web servers.

45
00:02:09.145 --> 00:02:12.650
Like you got a front end and
usually you need a back end to go with it.

46
00:02:12.650 --> 00:02:14.850
You can absolutely build
a web server in Rust.

47
00:02:14.850 --> 00:02:16.300
You can also build
command line interfaces.

48
00:02:16.300 --> 00:02:19.353
This is something that comes up if you're
doing tooling like build tooling stuff to

49
00:02:19.353 --> 00:02:20.710
compile your front end.

50
00:02:20.710 --> 00:02:23.985
Also, you can use it to build the front
end of a native desktop application.

51
00:02:23.985 --> 00:02:25.584
Maybe you don't want to use electron,

52
00:02:25.584 --> 00:02:29.190
you'd rather use something else that's
maybe a little bit higher performance.

53
00:02:29.190 --> 00:02:33.000
Rust is absolutely something you can
use to build native desktop apps.

54
00:02:33.000 --> 00:02:36.810
Also, you can just actually use it for
web front ends to via webAssembly.

55
00:02:36.810 --> 00:02:38.010
Now granted, that's not JavaScript.

56
00:02:38.010 --> 00:02:41.030
So if you need to target older browsers,
that's not necessarily gonna work.

57
00:02:41.030 --> 00:02:43.890
But it is something that you can do.

58
00:02:43.890 --> 00:02:47.051
A really powerful example
of this is makepad.dev.

59
00:02:47.051 --> 00:02:50.719
I recommend bringing this up on your
phone because it's an example of

60
00:02:50.719 --> 00:02:54.910
really like what how powerful rust can be
when it comes to making in browser UI.

61
00:02:54.910 --> 00:02:59.968
Makepad is a fully featured IDE that runs
like 60 frames per second on your phone,

62
00:02:59.968 --> 00:03:01.860
and it's all built with rust.

63
00:03:01.860 --> 00:03:06.254
So check that out if you have an example
of what rust can do in the browser.

64
00:03:06.254 --> 00:03:07.583
Also, you might want to use it for

65
00:03:07.583 --> 00:03:11.063
just performance intensive libraries that
could be in any one of these applications.

66
00:03:11.063 --> 00:03:14.520
Like web servers, CLIs,
Native apps or even in browser apps,

67
00:03:14.520 --> 00:03:18.590
because again, rust is a really,
really good at performance.

68
00:03:18.590 --> 00:03:21.199
And finally, like we saw on the previous
slide on operating systems.

69
00:03:21.199 --> 00:03:24.112
if you really want to build your own
operating system that is, believe it or

70
00:03:24.112 --> 00:03:25.420
not something you can do in rust.

71
00:03:27.010 --> 00:03:28.960
So why would you choose to use rest?

72
00:03:28.960 --> 00:03:30.000
These are some of the things that can do.

73
00:03:30.000 --> 00:03:33.830
Why would you choose it over some of the
other ways you might build those things.

74
00:03:33.830 --> 00:03:39.090
I'm gonna give you three reasons speed
performance and going real fast.

75
00:03:39.090 --> 00:03:41.530
These are really
the selling points of Rust.

76
00:03:41.530 --> 00:03:42.500
You'll notice the theme here.

77
00:03:43.630 --> 00:03:47.872
This is really like in my mind the reason
to use rust over any other like back end

78
00:03:47.872 --> 00:03:48.667
technology.

79
00:03:48.667 --> 00:03:52.385
Or any other front end technologies
that you might get Is rust unlocks

80
00:03:52.385 --> 00:03:56.502
like basically the maximum speed you
can possibly get out of your hardware.

81
00:03:56.502 --> 00:03:59.874
So historically like languages that
give you really great performance.

82
00:03:59.874 --> 00:04:03.320
Are actually really old languages like
C is still one of the most widely used

83
00:04:03.320 --> 00:04:04.700
languages in the world.

84
00:04:04.700 --> 00:04:07.220
Because it gets you such
strong performance.

85
00:04:07.220 --> 00:04:12.080
So you came out in 1972, and its whole big
deal is that it's basically efficient.

86
00:04:12.080 --> 00:04:16.520
C's sort of claim to fame is being known
as, quote portable assembly language.

87
00:04:16.520 --> 00:04:19.180
In other words, it's about as
low level as assembly language.

88
00:04:19.180 --> 00:04:20.560
It has a few conveniences, but

89
00:04:20.560 --> 00:04:22.960
it gives you like complete
control of your hardware.

90
00:04:22.960 --> 00:04:26.323
So there's really basically no
overhead between your C program and

91
00:04:26.323 --> 00:04:27.855
the hardware underneath it.

92
00:04:27.855 --> 00:04:32.012
C++ from 1985 also one of the most popular
high performance languages out there.

93
00:04:32.012 --> 00:04:34.980
Still one of the most widely
used languages today.

94
00:04:34.980 --> 00:04:38.740
And again, the main reason is
because it's very efficient.

95
00:04:38.740 --> 00:04:43.620
One of C++ his goals was to introduce
object oriented programming to C.

96
00:04:43.620 --> 00:04:47.411
So that you could have those constructs
as a convenience for the programmer,

97
00:04:47.411 --> 00:04:51.570
while still maintaining the same level
of efficiency and performance as C.

98
00:04:51.570 --> 00:04:55.670
In other words, having no or as little
as possible between you and the end.

99
00:04:55.670 --> 00:04:57.820
What the heck Hardware is capable of.

100
00:04:57.820 --> 00:05:01.740
And it's not until 2010 that we get
something that really can be considered

101
00:05:01.740 --> 00:05:02.920
a serious challenger.

102
00:05:02.920 --> 00:05:07.217
To the the sort of the throne of C and C++
that have been at the top of the heap for

103
00:05:07.217 --> 00:05:09.490
so long, which is rust.

104
00:05:09.490 --> 00:05:13.859
Rust again very, very efficient, almost
nothing between a compiled Rust programme

105
00:05:13.859 --> 00:05:16.050
and what the hardware is capable of.

106
00:05:16.050 --> 00:05:19.896
But rather than going in the object
oriented direction like C++ did because

107
00:05:19.896 --> 00:05:21.977
rust is not an object oriented language.

108
00:05:21.977 --> 00:05:25.753
Rust said, what, we just want to be
reliable, efficient and ergonomic and

109
00:05:25.753 --> 00:05:27.910
that's kind of the whole goal of rust.

110
00:05:27.910 --> 00:05:30.610
I know ergonomic is not one of the words
that they use to describe themselves.

111
00:05:30.610 --> 00:05:32.690
They just focus on efficient and reliable.

112
00:05:32.690 --> 00:05:35.548
But I would say compared
to both of these things,

113
00:05:35.548 --> 00:05:40.514
not only is rust a lot more reliable, it's
also a lot more ergonomic than C or C++.

114
00:05:41.700 --> 00:05:44.040
Okay, so
here's a concrete example of this.

115
00:05:44.040 --> 00:05:47.654
Here's an error that you would get in
from the Rust compiler, if you had,

116
00:05:47.654 --> 00:05:48.880
let's say a typo.

117
00:05:48.880 --> 00:05:52.970
It says no field 'emial' on type
'User' because I misspelled email.

118
00:05:52.970 --> 00:05:55.940
It says, note: available fields
are: 'name' and 'email'.

119
00:05:55.940 --> 00:05:58.339
Now contrast this to
the same error in C++.

120
00:05:58.339 --> 00:06:02.487
This is what you get, main.cpp error,
no member named, 'emial' in 'User'.

121
00:06:02.487 --> 00:06:04.912
And that's about it doesn't really
show you the line number or

122
00:06:04.912 --> 00:06:08.600
hint like what are some of the available
fields, maybe you have a typo there.

123
00:06:08.600 --> 00:06:11.572
So this is a pretty big improvement and
you can sort of extrapolate this.

124
00:06:11.572 --> 00:06:14.590
To more complicated areas like type
mismatches and things like that.

125
00:06:14.590 --> 00:06:18.357
It's just generally a much friendlier
experience than you would get from

126
00:06:18.357 --> 00:06:21.588
something like C or C++,
even modern C and C++ compilers.

127
00:06:21.588 --> 00:06:25.057
Now granted, I'm not gonna say that rust
is like the most ergonomic language that

128
00:06:25.057 --> 00:06:28.440
I've ever used with the nicest in terms
of compiler errors, that would be elm.

129
00:06:28.440 --> 00:06:32.380
So here's what it is when Rust in the same
era in elm would be, something like this.

130
00:06:32.380 --> 00:06:34.170
The user record does not
have an email field.

131
00:06:34.170 --> 00:06:36.733
This is usually a typo here are the user
fields that are most similar so

132
00:06:36.733 --> 00:06:37.870
maybe email should be email.

133
00:06:37.870 --> 00:06:39.585
If you've ever used elm before,

134
00:06:39.585 --> 00:06:42.410
I teach a course on it right
here on Frontend Masters.

135
00:06:42.410 --> 00:06:45.680
And it's really the most delightful
language I've ever used.

136
00:06:45.680 --> 00:06:49.209
But again, we're not trying to compare
Rust, at least in my mind, to really high

137
00:06:49.209 --> 00:06:52.331
level languages like elm that are sort
of designed around ergonomics and

138
00:06:52.331 --> 00:06:53.530
delightfulness.

139
00:06:53.530 --> 00:06:56.823
What we're comparing it to is
languages that have that same level of

140
00:06:56.823 --> 00:06:57.818
efficiency like C.

141
00:06:57.818 --> 00:07:01.890
And C++ because that's where rust really
shines is when you want that level of

142
00:07:01.890 --> 00:07:03.080
performance.

143
00:07:03.080 --> 00:07:05.274
And when you're up at
that tier of performance,

144
00:07:05.274 --> 00:07:06.833
like Rust is just leaps and leaps.

145
00:07:06.833 --> 00:07:09.579
And bounds ahead of the competition
as far as I'm concerned.

146
00:07:10.660 --> 00:07:12.420
Okay, so why use rust?

147
00:07:12.420 --> 00:07:15.632
To sum up I would say you can get C and
C++ levels of performance.

148
00:07:15.632 --> 00:07:17.840
But with nice ergonomics,
a language server,

149
00:07:17.840 --> 00:07:20.990
we're gonna actually see that
when we do the exercises.

150
00:07:20.990 --> 00:07:23.924
Automatic memory management
package manager code for matter.

151
00:07:23.924 --> 00:07:27.452
More compiler help with concurrency
not something we're gonna get into in

152
00:07:27.452 --> 00:07:28.130
this course.

153
00:07:28.130 --> 00:07:31.200
But something to know about rust is
it's really good with concurrency.

154
00:07:31.200 --> 00:07:32.781
Also lots of compiler help for

155
00:07:32.781 --> 00:07:36.520
really big code bases like you can
make changes to a big Rust code base.

156
00:07:36.520 --> 00:07:39.411
And still have a lot of
confidence that once it compiles,

157
00:07:39.411 --> 00:07:41.530
it's probably just going to work again.

158
00:07:43.140 --> 00:07:45.020
Okay, so
those are some of the reasons to use Rust.

159
00:07:45.020 --> 00:07:48.070
Let's talk about some of the reasons
why you might not choose rust.

160
00:07:48.070 --> 00:07:50.580
Number one rust is a big
language there's lots to learn.

161
00:07:50.580 --> 00:07:51.819
This is an introductory course so

162
00:07:51.819 --> 00:07:54.132
we're definitely not going to
get into the entire language.

163
00:07:54.132 --> 00:07:56.957
By the end of this course you should have
a good understanding of like the basic

164
00:07:56.957 --> 00:07:57.659
concepts of rust.

165
00:07:57.659 --> 00:07:58.184
And the for

166
00:07:58.184 --> 00:08:03.150
the things that you would need to learn to
build like a full featured huge Rust app.

167
00:08:03.150 --> 00:08:04.718
They're out there.
There's plenty of stuff there.

168
00:08:04.718 --> 00:08:07.952
But you should at least not have any
trouble learning those things from here.

169
00:08:07.952 --> 00:08:11.696
If as long as you've gotten a handle on
the things we talked about today, but

170
00:08:11.696 --> 00:08:13.760
there is a lot more out there.

171
00:08:13.760 --> 00:08:17.195
Really, even though this is a full day
workshop, this is kind of just the tip of

172
00:08:17.195 --> 00:08:20.420
the iceberg of what's there and
the entire language.

173
00:08:20.420 --> 00:08:21.380
There's just a lot to learn.

174
00:08:22.460 --> 00:08:26.122
It has a smaller ecosystem than
something like C or C++ there has been,

175
00:08:26.122 --> 00:08:29.855
CNC plus plus being written since 1972,
in the case of C in 1985.

176
00:08:29.855 --> 00:08:34.680
since, in the case of C++ there's just
way more CNC plus plus code out there in

177
00:08:34.680 --> 00:08:35.415
the world.

178
00:08:35.415 --> 00:08:40.294
Now granted, rust does have an FFI,
which is a foreign function interface,

179
00:08:40.294 --> 00:08:45.315
which is a way that you can call C and
C plus code C and C++ code from rust.

180
00:08:45.315 --> 00:08:48.318
But as soon as you do that you start
to lose out on some of our safety and

181
00:08:48.318 --> 00:08:50.762
reliability guarantees and
the economics get worse.

182
00:08:50.762 --> 00:08:52.613
So it's something you can
do as a fallback, but

183
00:08:52.613 --> 00:08:55.682
it's generally something that you
want to avoid if at all possible.

184
00:08:55.682 --> 00:08:59.352
Much nicer to have everything in Rust
which is why you see projects like let's

185
00:08:59.352 --> 00:09:02.940
build a whole operating system in Rust,
things like that.

186
00:09:02.940 --> 00:09:07.220
Also I would say that rust has a slower
iteration cycle than most languages.

187
00:09:07.220 --> 00:09:09.346
Now I'm not saying slower
than let's say C++ but

188
00:09:09.346 --> 00:09:10.983
I am saying like languages in general.

189
00:09:10.983 --> 00:09:14.019
I'm very spoiled as an elm programmer
because the Elm compiler is very,

190
00:09:14.019 --> 00:09:14.890
very fast.

191
00:09:14.890 --> 00:09:18.050
The rust compiler,
let's say is not so much.

192
00:09:18.050 --> 00:09:21.118
But one of the reasons is, is not
necessarily the speed of the compiler,

193
00:09:21.118 --> 00:09:23.180
just the strictness of the compiler.

194
00:09:23.180 --> 00:09:27.450
Rust is very much a language that sort
of helps you build reliable software.

195
00:09:27.450 --> 00:09:29.554
By telling you when there
are problems with it,

196
00:09:29.554 --> 00:09:31.790
not by sort of like
papering over problems.

197
00:09:31.790 --> 00:09:34.734
So there's a lot of cases where the rust
compiler will give you errors that

198
00:09:34.734 --> 00:09:36.360
you might not see in any other language.

199
00:09:36.360 --> 00:09:37.746
These are called borrow checker errors and

200
00:09:37.746 --> 00:09:39.259
we'll talk about them
later on in the course.

201
00:09:40.890 --> 00:09:44.526
Especially as a beginner, the satisfying
the borrow checker can feel like

202
00:09:44.526 --> 00:09:46.846
an experience of fighting
the borrow checker.

203
00:09:46.846 --> 00:09:50.424
Because this is new category of
errors that you've never seen before.

204
00:09:50.424 --> 00:09:53.573
I definitely remember when I was a rusted
beginner encountering this feeling of

205
00:09:53.573 --> 00:09:55.360
working through the borrow checker errors.

206
00:09:55.360 --> 00:09:57.533
And seeing like, I see that it's
telling me there's a problem, but

207
00:09:57.533 --> 00:09:59.458
I don't understand what it's
trying to communicate to me.

208
00:09:59.458 --> 00:10:01.176
So over the course of this course,

209
00:10:01.176 --> 00:10:03.801
you're gonna see that we
are going to build up ways.

210
00:10:03.801 --> 00:10:07.295
To talk about memory in order to give you
a mental model of what the borrow checker

211
00:10:07.295 --> 00:10:08.680
is actually doing.

212
00:10:08.680 --> 00:10:12.483
And hopefully by the end of the course,
you'll have an understanding of like.

213
00:10:12.483 --> 00:10:15.966
I see why it's giving me this error
because I know what it's trying to do and

214
00:10:15.966 --> 00:10:18.080
the problem is that
it's trying to prevent.

215
00:10:18.080 --> 00:10:21.833
Also, especially when you're doing a full
build as opposed to like an incremental

216
00:10:21.833 --> 00:10:24.450
build, the rust compiler
is just pretty slow.

217
00:10:24.450 --> 00:10:27.738
I wish I could say that there was sort
of hope that it was going to get faster.

218
00:10:27.738 --> 00:10:30.758
But after reading some blog posts from
some of the people who were closely

219
00:10:30.758 --> 00:10:33.740
involved in the development
of the rust compiler.

220
00:10:33.740 --> 00:10:36.617
Think it's sort of safe to assume
that that's not going to get better

221
00:10:36.617 --> 00:10:37.360
anytime soon.

222
00:10:37.360 --> 00:10:40.590
Maybe not ever, it might just be a
language that always has a slow compiler.

223
00:10:40.590 --> 00:10:42.650
I think that might just be
a downside of the language.

224
00:10:42.650 --> 00:10:45.690
But nevertheless, it's got plenty
of upsides to compensate for that.

225
00:10:46.740 --> 00:10:49.322
In particular tests can take a while
to build, like integration tests and

226
00:10:49.322 --> 00:10:50.860
things like that.

227
00:10:50.860 --> 00:10:52.570
They just take longer to
build than I would like.

228
00:10:52.570 --> 00:10:56.282
And I think that's going to be
the case somewhat indefinitely.

229
00:10:56.282 --> 00:11:00.457
Finally, although rust is definitely safer
and more reliable than something like C++.

230
00:11:00.457 --> 00:11:02.041
Which is what it's competing with,

231
00:11:02.041 --> 00:11:04.758
if you don't need that level of
performance that Rust offers.

232
00:11:04.758 --> 00:11:08.539
Like that C and C++ level where you might
want to build a game engine out of it or

233
00:11:08.539 --> 00:11:11.920
something like really high powered
It's not as safe as something like

234
00:11:11.920 --> 00:11:14.005
a pure functional programming language.

235
00:11:14.005 --> 00:11:17.779
Again like elm or there's a number of
other languages out there that basically

236
00:11:17.779 --> 00:11:19.953
have even more safety
guarantees than Rust,

237
00:11:19.953 --> 00:11:22.310
at the expense of not being
as fast to run as rust.

238
00:11:22.310 --> 00:11:26.477
So that's why I said at the beginning like
really the reason to use rust is if you

239
00:11:26.477 --> 00:11:29.010
really want to,
you really want to go fast.

240
00:11:29.010 --> 00:11:31.610
You want to have that like
top tier of performance.

241
00:11:31.610 --> 00:11:33.980
And there are some downsides
that come with that.

242
00:11:33.980 --> 00:11:35.997
But as far as I'm concerned if
you want to be in that tier,

243
00:11:35.997 --> 00:11:37.990
I can't think of anything I
would rather use then rust.

244
00:11:37.990 --> 00:11:40.890
For most things, shout out to
Zig Zig programming language is

245
00:11:40.890 --> 00:11:43.081
another thing that you
might wanna consider.

246
00:11:43.081 --> 00:11:44.860
But it's a lot newer than rust.

247
00:11:44.860 --> 00:11:48.320
And not nearly as many people
are using it, at least at this point.

248
00:11:48.320 --> 00:11:52.336
&gt;&gt; What makes us compiler
slow specifically?

249
00:11:52.336 --> 00:11:56.275
&gt;&gt; Great question so what makes
the Russ compiler slow honestly,

250
00:11:56.275 --> 00:11:58.590
there's not one particular thing.

251
00:11:58.590 --> 00:12:02.992
There's a number of design decisions, some
of which are in the name of performance.

252
00:12:02.992 --> 00:12:07.650
Others of which are just that happened
to be the way that they designed it.

253
00:12:07.650 --> 00:12:10.053
I wish I had a link handy for
the blog post, but

254
00:12:10.053 --> 00:12:13.790
I guess there's not one
short succinct answer to it.

255
00:12:13.790 --> 00:12:17.901
There's a guy who used to work on the Rust
compiler that did sort of a deep dive into

256
00:12:17.901 --> 00:12:20.990
like why is Rust slow or
like why isn't Rust fast to compile.

257
00:12:20.990 --> 00:12:25.480
Because of course the programs generates
very fast or can be very fast.

258
00:12:25.480 --> 00:12:30.310
But I don't have that link handy
offhand so I wish I had a quick answer.

259
00:12:30.310 --> 00:12:32.590
But it's a bunch of things,
it's not just one thing.

260
00:12:32.590 --> 00:12:35.030
So putting these things together,
we have some pros.

261
00:12:35.030 --> 00:12:35.889
We have some cons,

262
00:12:35.889 --> 00:12:39.620
like how does rust sort of stack up
against other languages that people use?

263
00:12:39.620 --> 00:12:43.266
Well, one way you might evaluate this
is stack overflow every year runs

264
00:12:43.266 --> 00:12:44.007
this survey.

265
00:12:44.007 --> 00:12:47.610
And they ask people what they think
about the language they're using.

266
00:12:47.610 --> 00:12:49.722
Like what do they like about him
when they dislike how much do

267
00:12:49.722 --> 00:12:50.990
they like them overall.

268
00:12:50.990 --> 00:12:54.777
And one of the categories they have at
the end of the survey is what is the most

269
00:12:54.777 --> 00:12:56.354
loved programming language.

270
00:12:56.354 --> 00:13:00.394
And in 2016 that was Rust was
considered the most loved programming

271
00:13:00.394 --> 00:13:02.086
language on Stack Overflow.

272
00:13:02.086 --> 00:13:04.540
Out of all the languages that people
were using on Stack Overflow.

273
00:13:04.540 --> 00:13:10.632
In 2017, it was also Rust, also in 2018,
also in 2019, and also in 2020.

274
00:13:10.632 --> 00:13:14.368
So basically the the past five years
that they've been running the survey.

275
00:13:14.368 --> 00:13:17.891
Rust has been considered the most
loved programming language by whatever

276
00:13:17.891 --> 00:13:20.150
survey methodology they're using.

277
00:13:20.150 --> 00:13:23.240
Now, does that mean that rust is the most
loved programming language in the world?

278
00:13:23.240 --> 00:13:26.198
No, but it does mean there at least
are a lot of people on stack overflow who

279
00:13:26.198 --> 00:13:27.359
are answering that survey.

280
00:13:27.359 --> 00:13:29.960
Who seem to think that It's a really
nice programming language and

281
00:13:29.960 --> 00:13:32.130
is meeting your needs really well.

282
00:13:32.130 --> 00:13:34.401
So hopefully by the end of this course,
you'll be able to evaluate for

283
00:13:34.401 --> 00:13:36.930
yourself whether it's a language
that is going to meet your needs.

284
00:13:36.930 --> 00:13:41.795
Okay, so to recap, we started off talking
about what is Rust who uses Rust, why and

285
00:13:41.795 --> 00:13:42.360
why not.

286
00:13:42.360 --> 00:13:44.960
You might use rust and
the overall workshop structure

