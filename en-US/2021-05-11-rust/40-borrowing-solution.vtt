WEBVTT

1
00:00:00.000 --> 00:00:04.133
So once again,
we get the use after move error, but

2
00:00:04.133 --> 00:00:09.132
this time we know an easier way
to fix this, which is to say I'm

3
00:00:09.132 --> 00:00:14.535
going to ask these to accept
references to x rather than regular x.

4
00:00:14.535 --> 00:00:18.741
And I'm gonna go ahead and do that for
average too cuz it's much quicker than

5
00:00:18.741 --> 00:00:22.000
the return value juggling
we were doing before.

6
00:00:22.000 --> 00:00:25.854
And now it's gonna give me a different
error, which is mismatch types say

7
00:00:25.854 --> 00:00:29.728
expected a reference, but I actually
found a sort of a non reference VEC.

8
00:00:29.728 --> 00:00:34.196
Consider borrowing here, well, thank you
very much, I will consider borrowing here,

9
00:00:34.196 --> 00:00:36.380
that's exactly what I wanna do.

10
00:00:36.380 --> 00:00:39.798
So there we go, and
now everything works, excellent.

11
00:00:39.798 --> 00:00:45.151
So let's run this and
we get exactly the same answer as before,

12
00:00:45.151 --> 00:00:49.898
with a much cleaner solution
than what we had before with

13
00:00:49.898 --> 00:00:55.460
the return value juggling and
also without having to do cloning.

14
00:00:56.740 --> 00:00:58.895
Okay, so
that was the first way of doing this,

15
00:00:58.895 --> 00:01:02.780
but we can also have this except a slice,
so here's what that'll look like.

16
00:01:02.780 --> 00:01:08.764
So it'll be bracket I64.

17
00:01:08.764 --> 00:01:11.350
Now you can iterate over slices
exactly the same way as VEC.

18
00:01:11.350 --> 00:01:16.227
So this part fortunately will
not be any different in terms

19
00:01:16.227 --> 00:01:19.630
of what it's doing, no problem there.

20
00:01:19.630 --> 00:01:23.950
And you won't be surprised to see that
now, I can actually just run this exactly

21
00:01:23.950 --> 00:01:27.630
normally I didn't actually
have to call like .asslice.

22
00:01:27.630 --> 00:01:31.086
And the reason for
this is that rust has as a convenience,

23
00:01:31.086 --> 00:01:35.838
whenever you have a function that accepts
a reference, sorry a slice, you can

24
00:01:35.838 --> 00:01:40.533
actually just give it a borrowed VEC and
it will go ahead and translate those.

25
00:01:40.533 --> 00:01:43.981
The way that it does that is actually
using traits which again we're not gonna

26
00:01:43.981 --> 00:01:45.095
cover in this workshop,

27
00:01:45.095 --> 00:01:48.110
we only have one more section
it's gonna be about lifetimes.

28
00:01:48.110 --> 00:01:51.660
But if you're curious this is not actually
something that's sort of like hard coded

29
00:01:51.660 --> 00:01:55.240
baked into the compiler this is actually
a little trick you can do yourself.

30
00:01:55.240 --> 00:02:00.214
With your own types to basically make it
so that when you borrow a particular type,

31
00:02:00.214 --> 00:02:03.241
you can make it sort of
translated into multiple or

32
00:02:03.241 --> 00:02:07.230
compatible with multiple different
reference types like this.

33
00:02:07.230 --> 00:02:10.150
Okay, questions about this exercise?

34
00:02:10.150 --> 00:02:14.605
&gt;&gt; I am curious if you do hard code
the slice and give it parameters for

35
00:02:14.605 --> 00:02:18.169
what you wanna cut,
if the VEC changes the length and

36
00:02:18.169 --> 00:02:23.970
you have too many numbers now like you've
included too many what will happen?

37
00:02:23.970 --> 00:02:24.990
&gt;&gt; Great question.

38
00:02:26.210 --> 00:02:30.419
I don't think I've ever
actually tried that.

39
00:02:30.419 --> 00:02:33.615
What would I expect to happen?

40
00:02:33.615 --> 00:02:37.609
I certainly would expect a panic,
but I'm not sure when.

41
00:02:37.609 --> 00:02:41.696
[LAUGH] So I'm reasonably confident
the answer will be you'll get a panic

42
00:02:41.696 --> 00:02:43.670
somewhere, but I'm not sure.

43
00:02:43.670 --> 00:02:48.660
I guess it would be probably when
you try to Iterate over the slice.

44
00:02:48.660 --> 00:02:56.110
Actually, I take that back.

45
00:02:56.110 --> 00:03:00.666
So because of the rules that we talked
about previously, if I already have

46
00:03:00.666 --> 00:03:05.664
an immutable borrow active on this thing,
I actually wouldn't be able to change

47
00:03:05.664 --> 00:03:10.900
the contents of the VEC because that would
require having a mutable reference to it.

48
00:03:10.900 --> 00:03:12.412
And if I have a mutable reference,

49
00:03:12.412 --> 00:03:16.680
I couldn't also at the same time have
an immutable reference via the slice.

50
00:03:16.680 --> 00:03:21.537
So it wouldn't be possible to have a slice
to a VEC and then change its length,

51
00:03:21.537 --> 00:03:26.097
or change the length of the vector after
a while that slice still exists or

52
00:03:26.097 --> 00:03:27.240
is still active.

53
00:03:28.440 --> 00:03:32.512
However I could like just runway
off the end here like this,

54
00:03:32.512 --> 00:03:35.689
and that will definitely
either not compile or

55
00:03:35.689 --> 00:03:39.858
panic depending on whether it's
a slice of an array or a VEC.

56
00:03:39.858 --> 00:03:44.483
But yeah, it shouldn't actually be
possible to compile a recipe against

57
00:03:44.483 --> 00:03:46.880
successfully that has that problem.

