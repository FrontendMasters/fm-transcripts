WEBVTT

1
00:00:00.060 --> 00:00:01.470
So how does Rust do it?

2
00:00:01.470 --> 00:00:03.964
We've seen in all these amas we've done so

3
00:00:03.964 --> 00:00:07.630
far Rust has never asked us to
deallocate memory manually.

4
00:00:07.630 --> 00:00:08.620
We've used vec.

5
00:00:08.620 --> 00:00:12.600
We've used strings, both of those are
dynamic length, and there was no problem.

6
00:00:12.600 --> 00:00:14.770
Rust just took care of that for
us somehow.

7
00:00:14.770 --> 00:00:17.870
And yet,
Rust doesn't have a garbage collector.

8
00:00:17.870 --> 00:00:19.070
So how does it do it,

9
00:00:19.070 --> 00:00:23.045
how does it avoid this thing that we
have to do in C of manual memory.

10
00:00:23.045 --> 00:00:27.560
How does Rust do automatic memory
management without a garbage collector?

11
00:00:27.560 --> 00:00:28.060
Here's how we do it.

12
00:00:29.250 --> 00:00:33.608
Okay, so back here we saw that vec
was causing allocation basically

13
00:00:33.608 --> 00:00:37.891
rust just says you know what I'm
gonna automatically call dealloc

14
00:00:37.891 --> 00:00:40.962
on orders right before
we return the function.

15
00:00:40.962 --> 00:00:44.534
Because it's no longer in use,
[SOUND] the end.

16
00:00:44.534 --> 00:00:47.991
It basically just inserts the same
instruction that C would have done that

17
00:00:47.991 --> 00:00:51.520
you would have had to do manually in C and
it inserts it in the correct place.

18
00:00:53.180 --> 00:00:55.674
That we're seeing it that way, [LAUGH].

19
00:00:55.674 --> 00:00:57.624
One of the previous times
I was doing this course,

20
00:00:57.624 --> 00:01:00.220
someone really said why doesn't
everyone do it that way?

21
00:01:00.220 --> 00:01:04.785
It's a totally valid question, I mean it
seems like yeah, allocate it when you need

22
00:01:04.785 --> 00:01:08.539
it and then, deallocate it when
you don't need it anymore, right?

23
00:01:08.539 --> 00:01:12.016
Like duh, and yeah, it does raise
the question of why not do this, and,

24
00:01:12.016 --> 00:01:14.239
when I put it out in
a simple example like this,

25
00:01:14.239 --> 00:01:17.040
it doesn't really seem like
there are a lot of edge cases.

26
00:01:17.040 --> 00:01:19.510
But it turns out there are some
important edge cases here.

27
00:01:19.510 --> 00:01:22.282
And this gets into the concepts
of ownership and borrowing and

28
00:01:22.282 --> 00:01:25.070
lifetimes that are sort of
unique to the rust compiler.

29
00:01:25.070 --> 00:01:27.932
They're basically around
dealing with the edge cases.

30
00:01:27.932 --> 00:01:33.387
Where this relatively conceptually simple
system runs into potential problems and

31
00:01:33.387 --> 00:01:34.700
how it solves them.

32
00:01:35.890 --> 00:01:40.050
Okay, so basically rusts kind
of baseline algorithm for

33
00:01:40.050 --> 00:01:45.930
when to deallocate something is just says
when it goes out of scope, like okay.

34
00:01:45.930 --> 00:01:47.480
Orders is out of scope here.

35
00:01:47.480 --> 00:01:51.737
So from now on, I know that nobody could
possibly access orders because it was out

36
00:01:51.737 --> 00:01:55.280
of scope and scope is how you
determine access for things.

37
00:01:55.280 --> 00:01:56.805
So yeah, we created it up here and

38
00:01:56.805 --> 00:01:59.855
then over here when the function
returns it's no longer in scope,

39
00:01:59.855 --> 00:02:03.295
I know that nobody can access it so
it's definitely safe to deallocate it.

40
00:02:04.425 --> 00:02:08.344
Now, when it does it this in this way,
rust is able to guarantee that there is

41
00:02:08.344 --> 00:02:11.350
not gonna be any possibility of
a use after free because for

42
00:02:11.350 --> 00:02:14.885
use after free to happen,
somebody would have to actually use it.

43
00:02:14.885 --> 00:02:18.025
But once it's out of scope, there's no
possibility that anyone can use it.

44
00:02:18.025 --> 00:02:21.227
And also there's a guarantee of
no double free because it only

45
00:02:21.227 --> 00:02:22.465
goes out of scope once.

46
00:02:22.465 --> 00:02:24.297
So there's only one place where it
says I'm gonna call the deallocation.

47
00:02:24.297 --> 00:02:27.338
Great, also, of course,
there's a guarantee

48
00:02:27.338 --> 00:02:32.100
of no garbage collection pause because
there just is no garbage collector.

49
00:02:33.350 --> 00:02:39.541
Okay, so, we saw that this is like sort of
when it chose to free the memory, but it's

50
00:02:39.541 --> 00:02:46.190
worth noting that Rust could have safely
chosen an earlier time to free the memory.

51
00:02:46.190 --> 00:02:48.040
Like it could have freed it
before final orders right?

52
00:02:48.040 --> 00:02:51.940
After this loop had run this is
the last place that actually gets us.

53
00:02:51.940 --> 00:02:55.750
So yeah, it could have just very
easily done the deallocate up here.

54
00:02:55.750 --> 00:02:59.016
But again, Rust has this pretty simple
heuristic of free it when it goes out of

55
00:02:59.016 --> 00:03:01.790
scope so this is not where
it would choose to do that.

56
00:03:01.790 --> 00:03:05.660
Now, is that gonna matter probably not in
practice, but let's say that it does for

57
00:03:05.660 --> 00:03:09.310
some reason, let's say that you really
want to have that memory reclaimed and

58
00:03:09.310 --> 00:03:11.835
marked as free before you
call this finish function.

59
00:03:11.835 --> 00:03:13.620
Because finish is really memory hungry or

60
00:03:13.620 --> 00:03:16.340
something like that needs
absolutely every resource.

61
00:03:16.340 --> 00:03:19.470
Well, if you wanna do that, you can
just rewrite your function like this.

62
00:03:19.470 --> 00:03:21.800
So here we have exactly
the same business logic.

63
00:03:21.800 --> 00:03:26.491
We start with total orders, zero, we
define orders as the same vec, we iterate

64
00:03:26.491 --> 00:03:31.810
over the same way, we add up total orders,
then we returned finish of total orders.

65
00:03:31.810 --> 00:03:35.028
The only difference is I added these
sort of standalone curly braces.

66
00:03:35.028 --> 00:03:36.810
So this is something you can do in Rust,

67
00:03:36.810 --> 00:03:40.010
you can just sort of define
an anonymous scope like this.

68
00:03:40.010 --> 00:03:41.856
And this is kind of what it's used for

69
00:03:41.856 --> 00:03:46.370
is basically as a way to give Rust a hint
about how you want to manage the memory.

70
00:03:46.370 --> 00:03:50.276
So now because orders is going out of
scope here before the end of the function

71
00:03:50.276 --> 00:03:55.010
that's going to result in rust choosing
to deallocate it a little bit sooner.

72
00:03:55.010 --> 00:03:56.931
So the only difference
between this version and

73
00:03:56.931 --> 00:04:00.910
the previous one is when Rust is going to
choose to automatically deallocate orders.

74
00:04:00.910 --> 00:04:04.653
In practice, this is something that you
don't tend to do very often or it doesn't

75
00:04:04.653 --> 00:04:08.396
tend to be important very often, but it's
worth noting that you can use this to get

76
00:04:08.396 --> 00:04:12.224
sort of a similar level of control as what
you would get in something like C or C++.

77
00:04:12.224 --> 00:04:15.481
Obviously not the same level of control
because you're not actually doing manual

78
00:04:15.481 --> 00:04:16.670
memory management.

79
00:04:16.670 --> 00:04:20.604
But it's a way that you can do it, while
still maintaining these really strong

80
00:04:20.604 --> 00:04:23.523
guarantees of like, yeah,
no chance of a use after free,

81
00:04:23.523 --> 00:04:26.880
no chance of a double free and
still no need for garbage collector.

