WEBVTT

1
00:00:00.060 --> 00:00:01.380
Part Three, Pattern Matching.

2
00:00:01.380 --> 00:00:04.937
So, we're gonna talk about a few
things in this section, enums,

3
00:00:04.937 --> 00:00:08.190
pattern matching itself,
methods, and type parameters.

4
00:00:09.210 --> 00:00:11.730
Let's start with enums,
this is an enum and rust.

5
00:00:11.730 --> 00:00:13.031
Enum is short for enumeration,

6
00:00:13.031 --> 00:00:16.214
although if you've encountered
enumerations in other languages, they're

7
00:00:16.214 --> 00:00:19.509
probably not quite what you're expecting
when it comes to how they work in rust.

8
00:00:20.850 --> 00:00:22.867
Here's an example of how
to make one of these,

9
00:00:22.867 --> 00:00:24.696
I'm gonna say let go equals color green.

10
00:00:24.696 --> 00:00:29.320
Let stop equals color red, and
let's slow down equals color yellow.

11
00:00:29.320 --> 00:00:31.060
So these are like American
traffic light colors.

12
00:00:31.060 --> 00:00:35.719
So we're doing here is we're saying
that color is enumeration of three

13
00:00:35.719 --> 00:00:37.670
different possible values.

14
00:00:38.970 --> 00:00:43.868
So here I've said I've assigned
the variable go to be the green variant,

15
00:00:43.868 --> 00:00:48.302
stop to be the red variant, and
slow down to be the yellow variant.

16
00:00:48.302 --> 00:00:52.136
Now, in all three of these cases,
the type of the value is color, but

17
00:00:52.136 --> 00:00:54.601
they have different values inside of them.

18
00:00:54.601 --> 00:00:57.891
So much like how if I were to make
a string, I could have different values of

19
00:00:57.891 --> 00:01:01.010
strings, some strings have
different contents than others.

20
00:01:01.010 --> 00:01:03.506
Or, if I were to make a number,
there are different numbers,

21
00:01:03.506 --> 00:01:05.430
values that can go inside
the same number type.

22
00:01:05.430 --> 00:01:09.811
It's the same thing with enums, all three
of these have the same type, namely color,

23
00:01:09.811 --> 00:01:13.894
but they have different values at runtime,
in this case, green, in this case,

24
00:01:13.894 --> 00:01:15.298
red in this case, yellow.

25
00:01:15.298 --> 00:01:18.076
So the type is what goes
after the word enum, and

26
00:01:18.076 --> 00:01:21.680
then the things inside of
the curly braces are variants.

27
00:01:21.680 --> 00:01:25.246
And the way that you instantiate them is
you sort of namespace them with the type

28
00:01:25.246 --> 00:01:28.070
followed by colon, colon, and
then the name of the variant.

29
00:01:28.070 --> 00:01:31.530
So you don't just say green or red or
yellow, you say color colon colon green,

30
00:01:31.530 --> 00:01:33.190
or color colon colon red.

31
00:01:33.190 --> 00:01:36.931
And that's just so that in case you
have multiple enums, in the same scope,

32
00:01:36.931 --> 00:01:38.400
with overlapping variants.

33
00:01:38.400 --> 00:01:41.946
Like let's say, I had another thing
that had something and it's called red,

34
00:01:41.946 --> 00:01:43.870
I wouldn't want to get those mixed up.

35
00:01:43.870 --> 00:01:47.598
And so this way I can distinguish
between color, colon, colon red, and

36
00:01:47.598 --> 00:01:50.485
whatever my other thing is
that also has a red variance.

37
00:01:50.485 --> 00:01:55.407
We can also add additional variants
that have data inside of them.

38
00:01:55.407 --> 00:01:59.791
So here we have another variant called
custom, and I've actually included some

39
00:01:59.791 --> 00:02:03.940
data that's that's known as
a payload within this variant.

40
00:02:03.940 --> 00:02:07.949
So here, this is basically using normal
struct syntax, so I've set it red, green,

41
00:02:07.949 --> 00:02:08.460
and blue.

42
00:02:08.460 --> 00:02:12.008
This is basically like okay, let's say
I don't wanna have one of these normal

43
00:02:12.008 --> 00:02:15.630
colors, I wanna have a custom color
with red, green, and blue each being u8.

44
00:02:16.800 --> 00:02:19.662
So I could once again say go is green,
stop is red, but

45
00:02:19.662 --> 00:02:22.830
now maybe I wanna just have
a color called purple.

46
00:02:22.830 --> 00:02:26.170
And to do this I would say
color colon colon custom.

47
00:02:26.170 --> 00:02:30.157
And then inside of this this would be
normal struct syntax like red 100,

48
00:02:30.157 --> 00:02:31.665
green 0, blue 250.

49
00:02:31.665 --> 00:02:36.491
And so this would be the way
that I would define a one of

50
00:02:36.491 --> 00:02:39.359
these color custom variants.

51
00:02:39.359 --> 00:02:43.453
Also, another way you can do this is
you can have it with tuples instead of

52
00:02:43.453 --> 00:02:44.067
structs.

53
00:02:44.067 --> 00:02:48.740
So here's an example of that, and so
I say color:: custom and just parentheses,

54
00:02:48.740 --> 00:02:50.089
100, 0, 250.

55
00:02:50.089 --> 00:02:53.745
Unlike regular tuples if you want, you can
actually have a tuple with one element

56
00:02:53.745 --> 00:02:56.410
here, cuz that actually
is useful in this case.

57
00:02:56.410 --> 00:02:59.490
But basically, either of these do exactly
the same thing, cuz like we saw in

58
00:02:59.490 --> 00:03:03.360
the previous section, tuples and structs,
basically have the same feature set.

59
00:03:03.360 --> 00:03:07.300
It's just a matter of whether you want
them to be labeled or done by position.

60
00:03:07.300 --> 00:03:08.639
Also worth noting,

61
00:03:08.639 --> 00:03:14.330
you can have as many of your variants use
payloads as you want, or none of them.

62
00:03:14.330 --> 00:03:17.073
If you want, you can say, none of my
variants are gonna have payloads, or

63
00:03:17.073 --> 00:03:19.552
you could say all of my variants
have payloads, or you could mix and

64
00:03:19.552 --> 00:03:21.610
match like we've done here,
it's totally up to you.

65
00:03:24.280 --> 00:03:29.000
Okay, so how do we get values out of these
variants once we've constructed them?

66
00:03:29.000 --> 00:03:30.940
Well, that's where we're
gonna do pattern matching.

67
00:03:30.940 --> 00:03:33.500
So let's say I've said let current
color equals color yellow.

68
00:03:33.500 --> 00:03:36.561
So currently I'm looking at the color
yellow, but current color could have been

69
00:03:36.561 --> 00:03:38.780
set to anything, or
it could even be a function argument.

70
00:03:39.860 --> 00:03:42.630
And now, I'm gonna run a match on this.

71
00:03:42.630 --> 00:03:46.662
So this match keyword works a little
bit like switch in other languages like

72
00:03:46.662 --> 00:03:50.120
Java Script, but
there are also some differences.

73
00:03:50.120 --> 00:03:53.055
So basically what this is saying,
is I give it a value, and it says,

74
00:03:53.055 --> 00:03:56.160
okay, I'm going to do what's called
a pattern match on each of these.

75
00:03:56.160 --> 00:04:00.402
And I'm basically going to go and try each
of these different branches one at a time,

76
00:04:00.402 --> 00:04:03.550
until I find one that
matches current color.

77
00:04:03.550 --> 00:04:06.340
So the first branch that it tries is
the color colon, colon green branch.

78
00:04:06.340 --> 00:04:10.320
So basically it's saying, is current
color equal to color colon colon green?

79
00:04:10.320 --> 00:04:13.383
Well, it's not, so it says okay,
I'm gonna skip over this entire block, and

80
00:04:13.383 --> 00:04:14.820
move down to the next one.

81
00:04:14.820 --> 00:04:18.360
This one, it's again gonna see that
this matches as, it does match,

82
00:04:18.360 --> 00:04:20.344
so great, we're gonna run this branch.

83
00:04:20.344 --> 00:04:24.146
Now, where are these differ from switch
statements that you might have seen in

84
00:04:24.146 --> 00:04:25.945
other languages is a couple of ways.

85
00:04:25.945 --> 00:04:29.282
Number one, with switch statements you
usually have to put something like break

86
00:04:29.282 --> 00:04:32.120
after each one,
to prevent things from falling through.

87
00:04:32.120 --> 00:04:32.970
That's not a thing here,

88
00:04:32.970 --> 00:04:35.730
you don't need to say break
because there is no fall through.

89
00:04:35.730 --> 00:04:38.951
The other big difference is that usually
when your saying switch your comparing

90
00:04:38.951 --> 00:04:41.850
two, like a number or
maybe a string depending on the language.

91
00:04:41.850 --> 00:04:45.080
But as we'll see, you can do actually a
good bit more with this pattern matching.

92
00:04:46.500 --> 00:04:48.435
So, here's an example of
something more involved,

93
00:04:48.435 --> 00:04:51.530
where we've got the color custom that
actually has the payload in there.

94
00:04:51.530 --> 00:04:55.220
So here, we've got the same pattern match
for green, same pattern match for yellow.

95
00:04:55.220 --> 00:04:57.500
And here, we're doing two things at once.

96
00:04:57.500 --> 00:05:00.981
One, we're saying, okay,
if this variant is a custom variant,

97
00:05:00.981 --> 00:05:05.208
then I wanna run this code, but also what
we're saying, is we're doing a struct

98
00:05:05.208 --> 00:05:09.650
destructure in here, to give names to each
of the values inside that custom struct.

99
00:05:10.710 --> 00:05:14.670
So basically we're saying, not only do I
want to run this code if it's a custom

100
00:05:14.670 --> 00:05:18.550
variant, but also I wanna pull out
these red, green, and blue values.

101
00:05:18.550 --> 00:05:21.917
And then now those are just variables that
only exist within these curly braces in

102
00:05:21.917 --> 00:05:22.880
terms of scope.

103
00:05:22.880 --> 00:05:24.735
So I can print line there red,
green, or blue, or

104
00:05:24.735 --> 00:05:26.029
do whatever else I want with them.

105
00:05:27.140 --> 00:05:31.153
And it'll be basically the same thing if
we use the the tuple style rather than

106
00:05:31.153 --> 00:05:35.550
the struct style, except instead of being
curly braces, we would have the tuples.

107
00:05:35.550 --> 00:05:37.860
But otherwise, it's exactly the same.

108
00:05:37.860 --> 00:05:38.983
Much like with IF,

109
00:05:38.983 --> 00:05:43.200
you can use match in the same way
as an expression if you like to.

110
00:05:43.200 --> 00:05:47.269
So once again, we're seeing the same thing
that we saw with IF, where if you're gonna

111
00:05:47.269 --> 00:05:51.000
say match on this thing, you can set it
equal to something if you if you like, but

112
00:05:51.000 --> 00:05:54.000
then you do need to have
that semicolon at the end.

113
00:05:54.000 --> 00:05:58.947
But, worth noting, that if you try to do
this, you and assign it to be something,

114
00:05:58.947 --> 00:06:02.967
you actually do need to include
every single possible variant, or

115
00:06:02.967 --> 00:06:06.190
at least have some coverage for
each of those.

116
00:06:06.190 --> 00:06:10.480
Because otherwise, rust won't know
what to set color stir to be equal to.

117
00:06:10.480 --> 00:06:13.531
So if you did this, it would say,
this is the compiler error you would get,

118
00:06:13.531 --> 00:06:16.100
it would say patterns red and
customer not covered.

119
00:06:16.100 --> 00:06:20.177
In other words, if rust runs this code,
and current color is equal to green or

120
00:06:20.177 --> 00:06:24.157
yellow, okay, great it knows what to do,
to set color stir to be equal to.

121
00:06:24.157 --> 00:06:28.265
But if it does not encounter, either green
or yellow, if it encounters red or custom,

122
00:06:28.265 --> 00:06:31.671
it doesn't know what to do,
it doesn't know what to set color stir to.

123
00:06:31.671 --> 00:06:36.390
And remember, rust doesn't have
a concept like null or undefined.

124
00:06:37.440 --> 00:06:39.940
Instead, rust just has something
we'll see in a second.

125
00:06:39.940 --> 00:06:43.726
But basically, since it wouldn't know
how to set that, it's gonna give you

126
00:06:43.726 --> 00:06:47.746
a compiler error and say, you know what,
I need to know in all possible situations

127
00:06:47.746 --> 00:06:51.501
what to do here, so that no matter what
I have something to set color stir to.

128
00:06:53.098 --> 00:06:55.944
Here's one way you can do that,
this is what's called a catch all pattern,

129
00:06:55.944 --> 00:06:57.450
it's basically an underscore.

130
00:06:57.450 --> 00:07:00.480
And this basically says, yeah,
this just matches anything.

131
00:07:00.480 --> 00:07:03.813
I don't care what I've got, if it didn't
match one of the previous patterns,

132
00:07:03.813 --> 00:07:06.100
then I wanna run this branch right here.

133
00:07:06.100 --> 00:07:09.610
Which is totally fine, that's
a reasonable way to go about doing it.

134
00:07:09.610 --> 00:07:12.760
But, worth noting that there
is a downside if you do this.

135
00:07:12.760 --> 00:07:15.269
And the downside is that this
error message is actually

136
00:07:15.269 --> 00:07:18.105
potentially quite helpful when
you introduce a new variant,

137
00:07:18.105 --> 00:07:21.540
because it will immediately pop up in
all of your matches that are doing this

138
00:07:21.540 --> 00:07:24.570
style of matching,
if that don't have the underscore.

139
00:07:24.570 --> 00:07:26.443
It'll say, hey,
you've forgot to incorporate it here,

140
00:07:26.443 --> 00:07:29.400
you've forgot to incorporate it here,
you've forgot to incorporate it here.

141
00:07:29.400 --> 00:07:33.248
But, if you do the catch all, now you have
this situation where whenever you add

142
00:07:33.248 --> 00:07:35.832
a new variant here,
there's not gonna be any error,

143
00:07:35.832 --> 00:07:38.645
which means you're not gonna
get a reminder to maybe go and

144
00:07:38.645 --> 00:07:42.230
try to handle that differently,
depending on what logic is there.

145
00:07:42.230 --> 00:07:43.590
So that's sort of a trade off.

146
00:07:43.590 --> 00:07:47.852
You can feel free to use this underscore,
this default case if you want to or not,

147
00:07:47.852 --> 00:07:49.430
but those are the trade offs.

