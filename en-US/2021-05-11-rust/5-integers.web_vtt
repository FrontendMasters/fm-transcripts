WEBVTT

1
00:00:00.130 --> 00:00:03.650
So one other thing that Rust has is
it has multiple sizes of numbers.

2
00:00:03.650 --> 00:00:07.652
So we saw f64 before, there's also f32.

3
00:00:07.652 --> 00:00:10.499
So f64 is a 64-bit float,
f32 is a 32-bit float.

4
00:00:10.499 --> 00:00:12.408
So why have two?

5
00:00:12.408 --> 00:00:15.520
When would you wanna use
one versus the other?

6
00:00:15.520 --> 00:00:16.210
Well, basically,

7
00:00:16.210 --> 00:00:19.750
there are just trade-offs to when you
might wanna use one versus the other.

8
00:00:19.750 --> 00:00:23.740
So here, I have both of these
set to be 10 divided by 3.

9
00:00:23.740 --> 00:00:26.517
And in both cases,
we're gonna get 3.333 repeating,

10
00:00:26.517 --> 00:00:28.322
there's gonna be a lot of 3s in there.

11
00:00:28.322 --> 00:00:32.369
Now, the difference here is that f64,
because it's bigger,

12
00:00:32.369 --> 00:00:36.427
it's 64-bits rather than 32-bits,
it can hold more 3s.

13
00:00:36.427 --> 00:00:39.891
So it has eight bytes of storage, 64-bits
being the same thing as eight bytes,

14
00:00:39.891 --> 00:00:43.070
whereas f32 only has 32-bits,
or four bytes of storage.

15
00:00:43.070 --> 00:00:45.754
And because of that,
f64 is sort of more precise,

16
00:00:45.754 --> 00:00:48.660
it can hold more of those repeating 3s.

17
00:00:48.660 --> 00:00:50.854
And so, that makes f64 better for

18
00:00:50.854 --> 00:00:55.330
sort of like calculations where
precision is really important.

19
00:00:55.330 --> 00:00:57.640
So why not always use f64?

20
00:00:57.640 --> 00:01:01.035
Well, although more memory used allows for
more precision,

21
00:01:01.035 --> 00:01:05.830
it also means there's more memory used,
which can slow down your program.

22
00:01:05.830 --> 00:01:08.497
So if you're just doing
a local calculation like this,

23
00:01:08.497 --> 00:01:11.278
like in the middle of your
function you're doing like

24
00:01:11.278 --> 00:01:14.023
I wanna do a division operation,
do I use f64 or f32?

25
00:01:14.023 --> 00:01:16.690
Probably not gonna make a difference,
just go ahead and use the f64.

26
00:01:16.690 --> 00:01:18.730
Treat yourself, it's gonna be fine.

27
00:01:18.730 --> 00:01:22.305
But if you can imagine,
let's say I'm making a game engine and

28
00:01:22.305 --> 00:01:24.954
I have millions and
millions of coordinates.

29
00:01:24.954 --> 00:01:29.711
The decision between using f64 or f32 for
all of those coordinates could add

30
00:01:29.711 --> 00:01:34.406
up to megabytes, maybe hundreds of
megabytes, maybe even a gigabyte of RAM.

31
00:01:34.406 --> 00:01:37.827
That's probably extreme, but it can add
up to a really big difference in how much

32
00:01:37.827 --> 00:01:41.470
memory you're using, which in turn can
translate into the program running slower.

33
00:01:42.550 --> 00:01:46.260
So basically, that's the trade-off is
that f64 gives you more precision, but

34
00:01:46.260 --> 00:01:49.758
also takes up more memory, and especially
when you have a lot of these things,

35
00:01:49.758 --> 00:01:51.750
that can really make a big difference.

36
00:01:51.750 --> 00:01:56.105
In fact, in most really performance
intensive applications that use coordinate

37
00:01:56.105 --> 00:01:59.890
systems like this, for example,
game engines, it's way more common

38
00:01:59.890 --> 00:02:04.140
to find 32-bit floats than 64-bit
float floats for exactly this reason.

39
00:02:06.290 --> 00:02:07.913
Integers also have different sizes.

40
00:02:07.913 --> 00:02:10.751
So let's start by talking about
integers in general in Rust.

41
00:02:10.751 --> 00:02:13.210
So here, I've said let ninety equals,
and then the number 90.

42
00:02:13.210 --> 00:02:15.680
Notice I didn't have a decimal point here.

43
00:02:15.680 --> 00:02:19.695
So the difference between an integer and a
float fundamentally is that integers don't

44
00:02:19.695 --> 00:02:23.383
have a decimal component to them, they're
just a sort of a whole number or a 0.

45
00:02:23.383 --> 00:02:24.390
They can also be negative.

46
00:02:25.440 --> 00:02:28.080
So here's negative 5,
that's an example of a negative integer.

47
00:02:29.130 --> 00:02:30.410
Can also say 1_000.

48
00:02:30.410 --> 00:02:32.120
Note here that I put an underscore here.

49
00:02:32.120 --> 00:02:34.603
This is just a little syntactic
convenience that Rust has.

50
00:02:34.603 --> 00:02:37.527
You're allowed to put underscores
wherever you want in number literals.

51
00:02:37.527 --> 00:02:40.970
They're usually used as sort of
a placeholder for digits, like a comma.

52
00:02:40.970 --> 00:02:43.990
Or if you're in the US, we use commas,
I would put a comma there.

53
00:02:43.990 --> 00:02:47.036
But I know, depending on where else you
are, you might put a space there or

54
00:02:47.036 --> 00:02:47.981
something like that.

55
00:02:47.981 --> 00:02:49.468
In Rust, it's always an underscore, so

56
00:02:49.468 --> 00:02:51.260
it's a little bit more
international friendly.

57
00:02:52.410 --> 00:02:55.497
And basically, those are just treated
as whitespace by the compiler,

58
00:02:55.497 --> 00:02:57.041
basically they're just ignored so

59
00:02:57.041 --> 00:02:59.930
you can put as many of those as you
want in whatever places you want.

60
00:02:59.930 --> 00:03:00.653
They're totally optional.

61
00:03:02.175 --> 00:03:07.022
I've named this one exactly_three because
if I don't put a decimal point here,

62
00:03:07.022 --> 00:03:09.380
this is going to do integer division.

63
00:03:09.380 --> 00:03:12.137
So 10 divided by 3 is going to say
I'm gonna take the integer 10 and

64
00:03:12.137 --> 00:03:15.225
divide it by the integer 3, and I'm
gonna get an integer out the other side.

65
00:03:15.225 --> 00:03:19.242
Which means that whatever the decimal
component of that calculation is,

66
00:03:19.242 --> 00:03:21.670
is gonna get completely discarded.

67
00:03:21.670 --> 00:03:25.012
So that's not rounding up,
that's just saying whatever it was,

68
00:03:25.012 --> 00:03:28.123
we're discarding it and
we're gonna end up with exactly 3.

69
00:03:28.123 --> 00:03:30.644
But if we ended up with 3.9,
that would still get rounded down to 3.

70
00:03:30.644 --> 00:03:32.413
So definitely be careful with that.

71
00:03:32.413 --> 00:03:35.996
You don't wanna accidentally do integer
division when you think you're doing

72
00:03:35.996 --> 00:03:37.235
floating point division.

73
00:03:38.885 --> 00:03:41.737
Also, with integer division,
if you divide by 0, it'll panic.

74
00:03:41.737 --> 00:03:45.187
And like we talked about earlier, when
a panic happens, that's it, game over.

75
00:03:45.187 --> 00:03:47.712
[LAUGH] That's sort of
the end of the program.

76
00:03:47.712 --> 00:03:50.852
So definitely make sure
not to divide by 0.

77
00:03:50.852 --> 00:03:53.934
If you're not confident that
the denominator is non-0,

78
00:03:53.934 --> 00:03:58.050
then you probably wanna add a conditional
to make sure that it's not.

79
00:03:58.050 --> 00:04:00.140
This is not the case with floats, though.

80
00:04:00.140 --> 00:04:02.969
Floats, if you divide by 0,
you'll either get infinity or

81
00:04:02.969 --> 00:04:06.574
negative infinity or not a number,
same thing that you would in JavaScript or

82
00:04:06.574 --> 00:04:09.180
most other languages
that use binary floats.

83
00:04:09.180 --> 00:04:10.530
But for integer division, it's different.

84
00:04:10.530 --> 00:04:15.634
Integer division will panic,
whereas those other ones will just

85
00:04:15.634 --> 00:04:20.760
give you some special value that
indicates a problem happened.

86
00:04:20.760 --> 00:04:24.847
Okay, there are different sizes of
integers just like there are with floats.

87
00:04:24.847 --> 00:04:26.035
But actually, there's a lot more integer
sizes than there are float sizes.

88
00:04:26.035 --> 00:04:30.750
So floats it's just f64 and
f32, so 64-bit and 32-bit.

89
00:04:30.750 --> 00:04:35.192
Whereas integers, you can get as
small as i8, which is 8-bits, so

90
00:04:35.192 --> 00:04:41.640
that's just one byte, or i16, i32, i64,
or even i128, that's as high as they go.

91
00:04:41.640 --> 00:04:43.960
So i8 is 8-bits, aka 1 byte.

92
00:04:43.960 --> 00:04:48.550
16 is 2 bytes, 4 bytes, 8 bytes and
all the way up to 16 bytes.

93
00:04:50.020 --> 00:04:52.370
So these have different ranges
of integers that they support.

94
00:04:52.370 --> 00:04:56.716
So an i8 can represent numbers
as low as negative 127,

95
00:04:56.716 --> 00:04:59.300
all the way up to positive 128.

96
00:04:59.300 --> 00:05:04.620
i6 goes from negative 32,000 to positive
32,000, and so on and so forth.

97
00:05:04.620 --> 00:05:06.945
You can find on the Rust
website documentation for

98
00:05:06.945 --> 00:05:08.780
how big all these different sizes are.

99
00:05:10.280 --> 00:05:11.700
There's also unsigned integers.

100
00:05:11.700 --> 00:05:14.286
So the difference between those
integers that we just saw,

101
00:05:14.286 --> 00:05:17.440
which are known as signed integers,
and unsigned integers is whether or

102
00:05:17.440 --> 00:05:19.810
not they have a potential minus sign.

103
00:05:19.810 --> 00:05:22.305
So unsigned means that you
don't have the minus sign,

104
00:05:22.305 --> 00:05:25.300
meaning the lowest value
you can have in these is 0.

105
00:05:25.300 --> 00:05:27.670
So these basically just
have a different range.

106
00:05:27.670 --> 00:05:29.560
So u8 goes from 0 to 255.

107
00:05:29.560 --> 00:05:32.665
You may recall that i8
only went up to 127.

108
00:05:32.665 --> 00:05:36.926
Well, u8, even though it's the same size,
it's the same eight bits,

109
00:05:36.926 --> 00:05:41.602
because it doesn't store the information
about whether or not it's negative,

110
00:05:41.602 --> 00:05:46.026
it uses that one extra bit as a way to
allow it to store more positive numbers.

111
00:05:46.026 --> 00:05:46.745
So it goes all the way up to 255 for
the same storage space.

112
00:05:46.745 --> 00:05:49.284
u16 goes up to about 65,000.

113
00:05:49.284 --> 00:05:51.466
u32 goes up to about 4 billion.

114
00:05:51.466 --> 00:05:54.460
u64 it goes up to 18 quintillion.

115
00:05:54.460 --> 00:05:59.310
And if that's not enough for you, u128
goes all the way up to 170 undecillion.

116
00:05:59.310 --> 00:06:03.610
I had to learn the word undecillion just
to be able to express how big 128 is.

117
00:06:05.070 --> 00:06:10.008
Sometimes people ask me does Rust have
arbitrary ints, like arbitrary size ints?

118
00:06:10.008 --> 00:06:10.601
The answer is yes.

119
00:06:10.601 --> 00:06:15.270
Not built into the language, but if you
want to you can get a third -party package

120
00:06:15.270 --> 00:06:17.760
that gets an arbitrarily large int.

121
00:06:17.760 --> 00:06:20.077
But if you need that, I'm really,

122
00:06:20.077 --> 00:06:25.023
really curious to know what wouldn't
fit in 171 undecillion, because I

123
00:06:25.023 --> 00:06:30.225
personally have never done any math that
that would not be able to accommodate.

124
00:06:30.225 --> 00:06:33.720
Okay, cool, so
these are the unsigned integers.

125
00:06:33.720 --> 00:06:35.600
There's two reasons that you
might choose an unsigned integer.

126
00:06:35.600 --> 00:06:39.417
One is maybe you're sort of size
constrained on how many bytes you wanna

127
00:06:39.417 --> 00:06:43.503
use for your storage, but you really
wanna be able to store some extra data.

128
00:06:43.503 --> 00:06:47.691
Or more commonly, I just find them to be
pretty nice because a lot of cases I have

129
00:06:47.691 --> 00:06:50.240
values where I don't
want them to be negative.

130
00:06:50.240 --> 00:06:52.310
I want to make sure that
they're never negative, and

131
00:06:52.310 --> 00:06:55.484
it's just kind of nice to be able to have
a number where it's like, yeah, I know

132
00:06:55.484 --> 00:06:58.850
this is never gonna be negative because it
just doesn't even store that possibility.

133
00:07:01.000 --> 00:07:04.643
There's one other unsigned integer
in here known as char, and

134
00:07:04.643 --> 00:07:08.424
char is basically just the same
thing as u32 with the additional

135
00:07:08.424 --> 00:07:12.450
constraint that it's been
validated to be valid Unicode.

136
00:07:12.450 --> 00:07:14.580
So it's otherwise exactly the same thing.

137
00:07:14.580 --> 00:07:17.720
So it's a u32, it's some number
between 0 and about 4 billion.

138
00:07:17.720 --> 00:07:22.633
But it's also been validated to make
sure that that number is a valid

139
00:07:22.633 --> 00:07:24.364
Unicode scalar value.

140
00:07:24.364 --> 00:07:27.428
And so,
char is used basically to make up strings,

141
00:07:27.428 --> 00:07:32.370
like each element of a string is a char,
and that's just something to be aware of.

142
00:07:32.370 --> 00:07:35.355
Char will come up a little bit
in the course of the workshop,

143
00:07:35.355 --> 00:07:36.800
but it's basically u32.

144
00:07:37.860 --> 00:07:41.608
Yeah, a question
&gt;&gt; If we use i8, is the compiler smart

145
00:07:41.608 --> 00:07:46.409
enough to pack the memory to use
a 64-bit space with many i8s?

146
00:07:46.409 --> 00:07:51.037
&gt;&gt; Is the compiler smart enough to use,
so if you have four i8s,

147
00:07:51.037 --> 00:07:55.220
will the compiler just use
one i64 to represent that?

148
00:07:55.220 --> 00:08:00.011
So actually, the short answer is
that I don't think it would do that

149
00:08:00.011 --> 00:08:05.470
because it might actually be less
efficient, believe it or not.

150
00:08:05.470 --> 00:08:08.216
This gets into registers on your CPU, and

151
00:08:08.216 --> 00:08:11.124
I don't wanna go down
a rabbit hole on that.

152
00:08:11.124 --> 00:08:15.494
But basically, I would say the Rust
compiler is very smart in a lot of cases,

153
00:08:15.494 --> 00:08:16.927
and also builds on LLVM,

154
00:08:16.927 --> 00:08:21.435
which is a technology that a lot of
other compilers use, like C++ and Swift,

155
00:08:21.435 --> 00:08:25.980
which does a lot of that really
low level optimization stuff.

156
00:08:25.980 --> 00:08:30.040
And in general, I wouldn't assume that
that's actually gonna be more efficient.

157
00:08:30.040 --> 00:08:31.613
It might be surprisingly less efficient,

158
00:08:31.613 --> 00:08:34.570
even though it sounds like
it might be more efficient.

159
00:08:34.570 --> 00:08:36.156
So there's trade-offs to all that stuff.

160
00:08:36.156 --> 00:08:39.324
But short answer is I don't think that
particular thing is something that I would

161
00:08:39.324 --> 00:08:42.460
expect the Rust compiler to do, and
I think that's probably the right choice.

162
00:08:43.460 --> 00:08:46.110
Okay, so another thing you can
do is you can convert between

163
00:08:46.110 --> 00:08:48.760
different numeric types
using the as keyword.

164
00:08:48.760 --> 00:08:49.790
So here's an example of this.

165
00:08:49.790 --> 00:08:52.677
I've got this function called multiply,
it takes x,

166
00:08:52.677 --> 00:08:57.190
which is an i64 and y which is u8,
and by default those are incompatible.

167
00:08:57.190 --> 00:09:00.210
I can't just do multiplication
between an i64 and u8.

168
00:09:00.210 --> 00:09:02.460
First, I need to convert to one or
the other.

169
00:09:02.460 --> 00:09:06.215
Now, whenever I'm in a situation
like this, I'm gonna use y as i64,

170
00:09:06.215 --> 00:09:07.640
I would have a choice here.

171
00:09:07.640 --> 00:09:12.490
I could have also said x as u8,
so that they would both be u8s.

172
00:09:12.490 --> 00:09:16.500
But in this case, I wanna change
y to be an i64 for two reasons.

173
00:09:16.500 --> 00:09:19.120
One is cuz the function as
a whole is returning an i64.

174
00:09:19.120 --> 00:09:22.625
So I might as well just get it in
an i64 format cuz otherwise I need to

175
00:09:22.625 --> 00:09:25.160
use a second as to convert
them from u8 to i64.

176
00:09:25.160 --> 00:09:28.336
But the second reason is just that,
like we've been talking about,

177
00:09:28.336 --> 00:09:29.827
there's more precision here.

178
00:09:29.827 --> 00:09:33.040
An i64 can fit all of the possible
values that a u8 can have, but

179
00:09:33.040 --> 00:09:34.450
the reverse is not true.

180
00:09:34.450 --> 00:09:38.099
So if I were to use as to convert
this x down to a u8, well,

181
00:09:38.099 --> 00:09:40.847
what happens if x is like more than 255?

182
00:09:40.847 --> 00:09:44.099
Then, we're just gonna lose that
information, it's just gonna jumble it up.

183
00:09:44.099 --> 00:09:45.342
So, I don't wanna do that.

184
00:09:45.342 --> 00:09:49.651
I would generally speaking prefer
always prefer to us as to make

185
00:09:49.651 --> 00:09:54.890
something that's strictly bigger,
that can hold strictly more data.

186
00:09:54.890 --> 00:09:59.396
That may not always be possible, but
it's definitely sort of the preference.

187
00:09:59.396 --> 00:10:03.696
Worth noting that you can not only do
this to convert between integer types,

188
00:10:03.696 --> 00:10:07.390
you can also convert between integers and
floats.

189
00:10:07.390 --> 00:10:10.008
So, here we have x as f64, x being an i32,

190
00:10:10.008 --> 00:10:13.510
so I'm converting a 32-bit
integer to a 64-bit float.

191
00:10:13.510 --> 00:10:14.043
And here,

192
00:10:14.043 --> 00:10:17.850
we have y which is a 16-bit unsigned
integer converting also to an f64.

193
00:10:17.850 --> 00:10:20.811
And this is actually a pretty common
thing, is I'll have some integers and

194
00:10:20.811 --> 00:10:24.195
I wanna do some float division because,
as we talked about previously, when you're

195
00:10:24.195 --> 00:10:28.060
doing integer division, it truncates
the decimal, just throws it away.

196
00:10:28.060 --> 00:10:31.276
So it's a reasonably common use of as to
say okay, I've got some integers, but

197
00:10:31.276 --> 00:10:35.360
I actually wanna end up with a float
because I care about that decimal portion.

198
00:10:35.360 --> 00:10:39.294
And again, typically, the most common way
you'll do it is you'll use f64 instead of

199
00:10:39.294 --> 00:10:42.061
f32 because if I'm just doing
a little local calculation,

200
00:10:42.061 --> 00:10:44.530
I kind of wanna get the most
performance I can out of it.

201
00:10:44.530 --> 00:10:46.354
&gt;&gt; You mentioned that it's better for

202
00:10:46.354 --> 00:10:49.990
the multiply to cast as i64
because you don't lose precision.

203
00:10:49.990 --> 00:10:52.769
But so
you're saying that you can do x as u8 and

204
00:10:52.769 --> 00:10:55.620
the Rust compiler won't be mad at that?

205
00:10:55.620 --> 00:10:57.959
&gt;&gt; Correct, yeah,
it won't be mad at it, but

206
00:10:57.959 --> 00:11:00.785
you might not be happy with
what happens at runtime.

207
00:11:00.785 --> 00:11:04.460
[LAUGH]
&gt;&gt; I think this is the same question.

208
00:11:04.460 --> 00:11:07.074
So the Rust compiler will
let you do x as u8 as

209
00:11:07.074 --> 00:11:08.173
multiple-
&gt;&gt; Correct.

210
00:11:08.173 --> 00:11:11.832
&gt;&gt; Functions, and happily truncate
according to some specification.

211
00:11:11.832 --> 00:11:14.832
&gt;&gt; Yeah, it'll actually wrap around.

212
00:11:14.832 --> 00:11:20.960
Basically don't use as if you're
worried about that happening.

213
00:11:20.960 --> 00:11:22.610
You'll have a bad time.

