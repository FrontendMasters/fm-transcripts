WEBVTT

1
00:00:00.000 --> 00:00:02.390
So to summarize, we have tuple,
structs, and arrays.

2
00:00:02.390 --> 00:00:05.821
Arrays are the only one of the three that
can be iterated over, and tuples and

3
00:00:05.821 --> 00:00:06.631
structs cannot.

4
00:00:06.631 --> 00:00:10.230
And the reason for this is that arrays
have to have a consistent element type.

5
00:00:10.230 --> 00:00:11.852
So when you're inside your for loop,

6
00:00:11.852 --> 00:00:14.900
each iteration of that loop is gonna
have the same type for the element.

7
00:00:15.980 --> 00:00:19.390
And that restriction is what allows
them to be iterated over, but

8
00:00:19.390 --> 00:00:23.172
also it's a restriction that means
you're not allowed to sort of mix and

9
00:00:23.172 --> 00:00:25.976
match the types like you can
with tuples and structs.

10
00:00:25.976 --> 00:00:29.226
But in memory, regardless, if you have
the same data in a tuple, a struct, or

11
00:00:29.226 --> 00:00:31.888
an array, they're all represented
as exactly the same thing,

12
00:00:31.888 --> 00:00:34.180
just adjacent bytes with
no extra metadata included.

13
00:00:35.260 --> 00:00:38.210
Okay, let's review and
then we'll pause for questions.

14
00:00:38.210 --> 00:00:40.360
So to sum up, we talked about tuples.

15
00:00:40.360 --> 00:00:42.330
So here's an example of defining a tuple.

16
00:00:42.330 --> 00:00:44.739
We can basically just use parentheses and
commas,

17
00:00:44.739 --> 00:00:47.651
you can have tuples as small as
two with the exception of unit,

18
00:00:47.651 --> 00:00:51.370
which is the empty tuple that's
just open paren and closed paren.

19
00:00:51.370 --> 00:00:56.529
And here we've said I've made a tuple
that has an i64 followed by a bool.

20
00:00:56.529 --> 00:01:00.210
And I've defined the value of
that to be one and then true.

21
00:01:00.210 --> 00:01:02.383
We can also do structs,
which are similar to tuples,

22
00:01:02.383 --> 00:01:05.280
except you have to use the struct
keyword to define it upfront.

23
00:01:05.280 --> 00:01:07.220
So here I defined a struct named foo.

24
00:01:07.220 --> 00:01:10.654
I'm using labels to name
the elements inside of this rather

25
00:01:10.654 --> 00:01:13.510
than using positions
like we did with tuples.

26
00:01:13.510 --> 00:01:17.180
But otherwise they do exactly the same
thing and they have the same trade offs.

27
00:01:17.180 --> 00:01:22.200
And arrays are similar to tuples
in that they are positional, but

28
00:01:22.200 --> 00:01:27.320
they all have to have the same
element type, so in this case u32.

29
00:01:27.320 --> 00:01:29.780
Unlike arrays in most languages,
they do have to have a fixed length.

30
00:01:29.780 --> 00:01:32.706
So in this case,
this array has a fixed length of three,

31
00:01:32.706 --> 00:01:35.217
we'll talk about more
flexible ones later on.

32
00:01:35.217 --> 00:01:39.240
And the advantage of that is of
course that we can iterate over them.

33
00:01:39.240 --> 00:01:40.720
And finally we talked about the memory.

34
00:01:40.720 --> 00:01:44.909
So u8, as we talked about in the previous
section, is 8 bits which is to say 1 byte,

35
00:01:44.909 --> 00:01:46.950
u16 to 16 bits which is 2 bytes.

36
00:01:46.950 --> 00:01:49.351
But in either case,
the memory is just all ones and zeros,

37
00:01:49.351 --> 00:01:52.487
it's really is the matter of how we're
choosing to interpret those ones and

38
00:01:52.487 --> 00:01:55.110
zeros that determines what
the program actually does.

39
00:01:55.110 --> 00:01:58.159
&gt;&gt; Can I put functions in a struct?

40
00:01:58.159 --> 00:02:01.586
&gt;&gt; There are ways to do it, but it might
not be as straightforward as what you're

41
00:02:01.586 --> 00:02:03.290
used to, [LAUGH] I'll put it that way.

42
00:02:03.290 --> 00:02:07.865
We're not gonna do that in this course,
but it is possible, essentially.

43
00:02:07.865 --> 00:02:12.629
&gt;&gt; What kind of data iterable structure
can I put in different types.

44
00:02:12.629 --> 00:02:15.276
&gt;&gt; What kind of data iterable structure
can I put in different types?

45
00:02:15.276 --> 00:02:18.259
So Rust does have a concept of iterables,

46
00:02:18.259 --> 00:02:22.110
meaning you can make a custom
thing that is iterable.

47
00:02:22.110 --> 00:02:24.410
It's not just arrays that are iterable.

48
00:02:24.410 --> 00:02:28.960
That also gets into traits which we're not
gonna cover in this introductory course.

49
00:02:28.960 --> 00:02:32.631
But basically if you want to you're
allowed to make up your own new iterable

50
00:02:32.631 --> 00:02:35.952
thing from scratch and define what
iteration means in the context of

51
00:02:35.952 --> 00:02:39.020
that thing, and
at which point it can be using for loops.

52
00:02:39.020 --> 00:02:42.160
So that's not something that's baked into
the language and hard coded for arrays.

53
00:02:42.160 --> 00:02:44.977
It's a more general concept
that can be extended by you and

54
00:02:44.977 --> 00:02:48.250
is used in a number of ways
throughout the standard library.

55
00:02:48.250 --> 00:02:52.190
&gt;&gt; So
based off of the fixed length of arrays,

56
00:02:52.190 --> 00:03:00.130
is it not possible to make say a dynamic
array based off a length of a dictionary?

57
00:03:00.130 --> 00:03:04.751
&gt;&gt; Yeah, so we'll talk about how
to make more dynamic things than

58
00:03:04.751 --> 00:03:09.650
arrays in two sections from now,
but you're on the right track.

59
00:03:09.650 --> 00:03:13.366
It is like we're using the same memory
concepts, but we'll introduce the concept

60
00:03:13.366 --> 00:03:16.190
of a length that also gets stored
in memory and stuff like that.

61
00:03:16.190 --> 00:03:20.550
So using these same building blocks,
we will do that later on.

62
00:03:20.550 --> 00:03:23.340
Will we cover iterating over
structs labels and or values?

63
00:03:23.340 --> 00:03:26.850
So that can't be done,
there's no way to iterate over a struct.

64
00:03:26.850 --> 00:03:29.376
If you want you could define
your own custom iterator for

65
00:03:29.376 --> 00:03:32.880
your own custom struct, but it wouldn't
be iterating over just the labels.

66
00:03:32.880 --> 00:03:35.420
You'd have to figure out
something else to do.

67
00:03:35.420 --> 00:03:37.220
So I know that can be done in
a number of languages, but

68
00:03:37.220 --> 00:03:38.180
Rust is just not one of them.

69
00:03:38.180 --> 00:03:40.915
If you've got a struct or
if you've got a tuple,

70
00:03:40.915 --> 00:03:43.730
you cannot iterate over the values or
the fields.

