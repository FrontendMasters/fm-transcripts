WEBVTT

1
00:00:00.380 --> 00:00:04.467
Okay, so to recap, we have this city size
thing and the town is 1000 residents,

2
00:00:04.467 --> 00:00:07.970
the city is 10,000
the metropolis is 1 million.

3
00:00:07.970 --> 00:00:11.383
So when we are duplicating this branch,
I'm just gonna copy paste this whole thing

4
00:00:11.383 --> 00:00:13.537
and just change those numbers around,
basically.

5
00:00:16.213 --> 00:00:21.830
So, we've got town,
what to do city and also metropolis.

6
00:00:24.250 --> 00:00:28.340
City has a residence of 10,
000s and Metropolis was a million.

7
00:00:29.380 --> 00:00:31.090
And so
here I'm just gonna replace the word here.

8
00:00:31.090 --> 00:00:35.654
I'm gonna say, a city of approximately
that many residents and here a metropolis.

9
00:00:35.654 --> 00:00:39.880
Again, as before, if we wanted to,
we could do some more code sharing here.

10
00:00:39.880 --> 00:00:42.400
But since this is just an exercise,
we're not gonna bother with that.

11
00:00:42.400 --> 00:00:45.470
The main thing to note is that
we now have three branches.

12
00:00:45.470 --> 00:00:50.380
And all three of them are basically the
three different variants of this enough.

13
00:00:50.380 --> 00:00:52.100
We're not using the payloads
in this example.

14
00:00:52.100 --> 00:00:54.694
But if we want to, we could very
well introduce a payload here and

15
00:00:54.694 --> 00:00:55.870
just say like, hey.

16
00:00:55.870 --> 00:00:59.558
Metropolis now has an i64 inside of it,
but we're not gonna bother with that for

17
00:00:59.558 --> 00:01:00.100
this case.

18
00:01:01.670 --> 00:01:04.180
Okay, we're still getting this error here.

19
00:01:04.180 --> 00:01:11.480
And we're gonna fix that by replacing this
city struct with a call to city colon new.

20
00:01:11.480 --> 00:01:16.150
And it takes two arguments, one is a city
size, so I'm gonna pick metropolis.

21
00:01:16.150 --> 00:01:17.030
Why not?

22
00:01:17.030 --> 00:01:17.786
And notice,

23
00:01:17.786 --> 00:01:22.340
my autocomplete here now actually has
the three possible variants here.

24
00:01:22.340 --> 00:01:25.104
So this is something that rust
analyzers aware of it knows well,

25
00:01:25.104 --> 00:01:28.470
there's exactly three different
possibilities that could be here.

26
00:01:28.470 --> 00:01:32.031
So just pick metropolis and
then as in the previous one this time,

27
00:01:32.031 --> 00:01:33.860
I guess I will make it be coastal.

28
00:01:33.860 --> 00:01:35.060
Why not?

29
00:01:35.060 --> 00:01:38.760
So we got a coastal metropolis,
as many of them are I suppose.

30
00:01:38.760 --> 00:01:42.571
Okay, and
now I should be able to run this and

31
00:01:42.571 --> 00:01:46.389
once again we're gonna get some warnings.

32
00:01:46.389 --> 00:01:48.109
We'll come back to those in a second, but

33
00:01:48.109 --> 00:01:51.150
says this city is a metropolis of
approximately a million residents.

34
00:01:51.150 --> 00:01:52.480
Wow.

35
00:01:52.480 --> 00:01:55.900
Okay, now we did see is
coastal is never read here, so

36
00:01:55.900 --> 00:01:58.487
that was a warning there for this thing.

37
00:01:58.487 --> 00:02:02.034
Because in this example we never actually
read the coastal field recall in

38
00:02:02.034 --> 00:02:05.019
the previous example that we
never read the residents field.

39
00:02:05.019 --> 00:02:08.040
Nothing to be concerned about,
solely fine for things to be unused.

40
00:02:08.040 --> 00:02:12.731
But you might also notice that we see this
warning variant is never constructed city

41
00:02:12.731 --> 00:02:15.350
very it is never constructed town.

42
00:02:15.350 --> 00:02:19.228
So actually the warning that we're getting
here is it saying hey, you said these two

43
00:02:19.228 --> 00:02:22.959
are possibilities but in practice, you
never actually use either of these two.

44
00:02:22.959 --> 00:02:25.780
And that's because I chose
metropolis down here.

45
00:02:25.780 --> 00:02:30.368
Now if I change this to city now it's
gonna complain the town of Metropolis

46
00:02:30.368 --> 00:02:32.292
are not used and city was used.

47
00:02:32.292 --> 00:02:35.457
So this is another interesting feature of
enums is that it's a way of expressing

48
00:02:35.457 --> 00:02:38.320
here are all the different possibilities,
but Russ will say.

49
00:02:38.320 --> 00:02:41.303
Hey, if some of these possibilities
never come up in practice,

50
00:02:41.303 --> 00:02:43.730
maybe you might as well
just get rid of them.

51
00:02:43.730 --> 00:02:44.877
Not so that you have to deal with, and

52
00:02:44.877 --> 00:02:47.210
there are ways you can suppress
those warnings if you want to.

53
00:02:47.210 --> 00:02:50.095
But worth noting that one of
the nice things about enums,

54
00:02:50.095 --> 00:02:54.002
is that the compiler is really keenly
aware of these are all the possibilities

55
00:02:54.002 --> 00:02:55.400
that you have to deal with.

56
00:02:56.420 --> 00:02:58.879
There are no other possible
values that we could have for

57
00:02:58.879 --> 00:03:02.000
city size other than the exact
three that you defined here.

58
00:03:02.000 --> 00:03:07.900
&gt;&gt; I was curious if you could illustrate
how we could build like a custom example.

59
00:03:07.900 --> 00:03:11.416
Say it wasn't it didn't fall in either
of those three, and we just wanted

60
00:03:11.416 --> 00:03:14.908
to enter our own resident amount
&gt;&gt; Yeah, sure.

61
00:03:14.908 --> 00:03:17.110
Okay, so I'll add another one, okay.

62
00:03:17.110 --> 00:03:20.260
So I can say area with,
with residents, you 64.

63
00:03:20.260 --> 00:03:21.360
I could do it either like this.

64
00:03:21.360 --> 00:03:22.886
So this would be the struct style or

65
00:03:22.886 --> 00:03:26.030
if I wanted to,
I could put it in parentheses like this.

66
00:03:26.030 --> 00:03:31.290
Now it's kinda interesting to see, whoops,
I do in parentheses and I can't label it.

67
00:03:31.290 --> 00:03:34.984
So I'm going to use it struct style just
because otherwise it's not really clear

68
00:03:34.984 --> 00:03:36.189
what that u64 is doing.

69
00:03:36.189 --> 00:03:38.660
So here it's a little bit clear that's
like, okay, it's the residence count.

70
00:03:39.950 --> 00:03:43.930
So notice that when I do this,
I'm now going to get an error here.

71
00:03:43.930 --> 00:03:48.220
On mass city sites where
it says missing match arm.

72
00:03:48.220 --> 00:03:52.160
Nonexhaustive can't move
my mouse to show you.

73
00:03:52.160 --> 00:03:55.660
But nonexhaustive patterns area dot,
dot, dot, not covered.

74
00:03:55.660 --> 00:03:58.922
Ensure that all possible cases are being
handled, possibly by adding wild cards or

75
00:03:58.922 --> 00:03:59.630
more match arms.

76
00:04:01.050 --> 00:04:04.850
So basically what it's telling me
is like hey you need to either.

77
00:04:04.850 --> 00:04:08.042
Do something like this where I make
this be an underscore that will fix

78
00:04:08.042 --> 00:04:11.190
that problem, and
it won't complain about that anymore.

79
00:04:11.190 --> 00:04:15.315
Or I need to add an explicit match arm for

80
00:04:15.315 --> 00:04:20.440
our new area thing and
I'll say residents okay,

81
00:04:20.440 --> 00:04:26.070
and now I guess I'm just
gonna not bother doing that.

82
00:04:26.070 --> 00:04:26.585
I'm just gonna.

83
00:04:26.585 --> 00:04:28.990
[LAUGH] We've already got the resident
that was stored in there.

84
00:04:28.990 --> 00:04:33.540
And so now I'll just do that,
that's how we do it.

85
00:04:33.540 --> 00:04:36.021
And everything else should work,
although it's gonna complain,

86
00:04:36.021 --> 00:04:39.100
the area's never constructed, but
I guess we want to see that in action.

87
00:04:39.100 --> 00:04:43.924
I could just say, city size area and then
I'd say residents I don't know this is

88
00:04:43.924 --> 00:04:46.590
a really small area five
people in this one.

89
00:04:47.940 --> 00:04:52.730
Okay, and yeah, sure enough it runs
the city is a, I said metropolis in there.

90
00:04:52.730 --> 00:04:56.495
How about an area, there we go.

91
00:04:56.495 --> 00:05:02.375
We run that, so yeah, this city is
an area of approximately five residents.

92
00:05:02.375 --> 00:05:03.765
So there you go.

93
00:05:03.765 --> 00:05:07.632
&gt;&gt; Is there a way to encode values rather
than types in the enum variants if I

94
00:05:07.632 --> 00:05:12.273
wanted to, instead of those comments, I
could sort of say that town is 1000 there

95
00:05:12.273 --> 00:05:15.255
and there's 10,000 or
is that a terrible idea?

96
00:05:15.255 --> 00:05:18.767
And then I could, so
I don't have to define what the numbers

97
00:05:18.767 --> 00:05:22.781
are in a particular implementation
method or you're just saying.

98
00:05:22.781 --> 00:05:26.981
&gt;&gt; Yeah, so the question is like, is there
some way to encode these in the types so

99
00:05:26.981 --> 00:05:29.630
that we don't have to put it in a comment?

100
00:05:29.630 --> 00:05:32.527
Unfortunately, not types, well, okay,

101
00:05:32.527 --> 00:05:37.460
I guess it's like it's really
ridiculously overcomplicated.

102
00:05:37.460 --> 00:05:40.344
Type shenanigans you could engage
in to try and do that, but

103
00:05:40.344 --> 00:05:42.000
I wouldn't recommend it.

104
00:05:42.000 --> 00:05:44.118
I think the short answer
is like I pretty much no,

105
00:05:44.118 --> 00:05:46.970
I think a comment would be the way
to go for something like this.

106
00:05:46.970 --> 00:05:51.400
Or of course you could have
a hard coded constant, but yeah.

