WEBVTT

1
00:00:00.070 --> 00:00:02.150
All right, part two collections.

2
00:00:02.150 --> 00:00:06.894
So in this next section, we're going to
talk about tuples, structs, arrays and

3
00:00:06.894 --> 00:00:07.460
memory.

4
00:00:07.460 --> 00:00:10.030
Let's start with tuples.

5
00:00:10.030 --> 00:00:12.790
This is how I can define a tuple in rust.

6
00:00:12.790 --> 00:00:14.918
So basically I use these parentheses here.

7
00:00:14.918 --> 00:00:18.158
So you'll notice that I'm saying (0,
0, 0),

8
00:00:18.158 --> 00:00:21.623
that's making a tuple,
which has three elements in it.

9
00:00:21.623 --> 00:00:26.366
The title of the tuple is ( i64,
i64, i64), in this case.

10
00:00:26.366 --> 00:00:27.771
Now, you can mix and
match these as much as you want.

11
00:00:27.771 --> 00:00:30.890
They don't all have to be the same type,
but they just happen to be in this case.

12
00:00:30.890 --> 00:00:36.430
And you can also have more than three of
these or fewer than that if you want.

13
00:00:36.430 --> 00:00:38.445
If I wanna read some
value out of this tuple.

14
00:00:38.445 --> 00:00:42.540
I can say let x = point.0, and that's
going to get the first element in there.

15
00:00:42.540 --> 00:00:46.150
We can also say y is point.1,
Z is point.2.

16
00:00:46.150 --> 00:00:49.410
So you can imagine this might
be a 3D coordinate point.

17
00:00:49.410 --> 00:00:52.530
And this would be how I would
get the values out of there.

18
00:00:52.530 --> 00:00:57.390
I can also use destructuring syntax as
a way to get x, y and z into scope.

19
00:00:57.390 --> 00:00:59.290
So x, y and z equals point.

20
00:00:59.290 --> 00:01:01.560
This does exactly the same
thing as this previous line.

21
00:01:01.560 --> 00:01:03.630
This is basically just syntax sugar for
this.

22
00:01:03.630 --> 00:01:06.026
So x is going to be this one,
y is going to be the middle one, and

23
00:01:06.026 --> 00:01:07.151
z is going to be the last one.

24
00:01:08.608 --> 00:01:12.260
If you want, you can also D structure
only some of them, not all of them.

25
00:01:12.260 --> 00:01:14.819
So you can do that by putting
an underscore in place of any of the ones

26
00:01:14.819 --> 00:01:16.300
that you don't care.

27
00:01:16.300 --> 00:01:19.680
Underscore and rust generally means I
don't want to bother naming this thing

28
00:01:19.680 --> 00:01:21.405
although I need to put something here.

29
00:01:21.405 --> 00:01:25.802
So rather than picking a name and having
it be unused, I'll just put an underscore

30
00:01:25.802 --> 00:01:29.193
here to say I only care about x and
y from this particular point.

31
00:01:29.193 --> 00:01:32.400
If you want to have only x, you do that
too and have multiple underscores.

32
00:01:32.400 --> 00:01:35.239
In fact, you can have as many
underscores as you want,

33
00:01:35.239 --> 00:01:37.420
whenever you're doing destructuring.

34
00:01:37.420 --> 00:01:41.344
If you want to mutate a tuple you
need you do need to use let mut.

35
00:01:41.344 --> 00:01:45.252
So you may recall that we mentioned
previously that let by default is both

36
00:01:45.252 --> 00:01:47.780
cost and immutable and let mut is neither.

37
00:01:47.780 --> 00:01:50.615
So this allows me to not only
reassign something to point but

38
00:01:50.615 --> 00:01:53.461
also to mutate any of these
individual values inside of it.

39
00:01:53.461 --> 00:01:56.220
So now I can say point.0 = 17.

40
00:01:56.220 --> 00:02:01.231
To change that from a zero to a 17,
I can change point.1 as well, and point.2.

41
00:02:01.231 --> 00:02:03.889
But again, if I didn't have let mut,
none of these would compile.

42
00:02:03.889 --> 00:02:05.329
The rust compiler would say, Nope,

43
00:02:05.329 --> 00:02:07.470
you need to have a mut there
in order to make it mutable.

44
00:02:09.450 --> 00:02:14.260
Unit is a special tuple which
is basically these zero tuple.

45
00:02:14.260 --> 00:02:16.690
So if we saw here we had a tuple
with three values in it,

46
00:02:16.690 --> 00:02:18.590
you can also have tuples with two values.

47
00:02:18.590 --> 00:02:22.492
There's really no such thing as a tuple
with one value because that's just like

48
00:02:22.492 --> 00:02:25.474
the thing itself and
you can have more than three if you want.

49
00:02:25.474 --> 00:02:29.610
But there's also a special tuple called
unit which is basically a zero tuple.

50
00:02:29.610 --> 00:02:31.870
This is a tuple that has
nothing inside of it.

51
00:02:31.870 --> 00:02:33.680
It's a tuple holding no information.

52
00:02:33.680 --> 00:02:38.046
It's extremely boring, because
there's only one zero tuple ever and

53
00:02:38.046 --> 00:02:39.290
it's called unit.

54
00:02:39.290 --> 00:02:41.804
So you can never have more than
one of these because they hold

55
00:02:41.804 --> 00:02:43.610
no information whatsoever.

56
00:02:43.610 --> 00:02:46.630
And in fact, they're guaranteed
to never hold any information.

57
00:02:46.630 --> 00:02:49.900
Because tuples cannot change
their sizes at runtime.

58
00:02:49.900 --> 00:02:51.630
You can't have more elements in the tuple.

59
00:02:51.630 --> 00:02:54.842
There's no like, I want to push a new
element into a tuple at runtime,

60
00:02:54.842 --> 00:02:55.502
can't do it.

61
00:02:55.502 --> 00:02:59.399
It's got a fixed number of slots that
are always constant throughout the life of

62
00:02:59.399 --> 00:03:00.700
your programme.

63
00:03:00.700 --> 00:03:04.350
And in this case, it's fixed at zero
slots for the life of your program.

64
00:03:04.350 --> 00:03:07.170
So you might be asking the question,
why is this in the language?

65
00:03:07.170 --> 00:03:08.888
What is the use of having a zero tuple,

66
00:03:08.888 --> 00:03:12.810
something that guaranteed has no
information associated with it.

67
00:03:12.810 --> 00:03:15.616
Well, basically it comes up when
you're writing functions that have no

68
00:03:15.616 --> 00:03:16.700
return value.

69
00:03:16.700 --> 00:03:18.960
At least,
that's one case where it can come up.

70
00:03:18.960 --> 00:03:20.820
So let's say I have my main function.

71
00:03:20.820 --> 00:03:23.182
We said earlier that main
doesn't return anything,

72
00:03:23.182 --> 00:03:27.100
but actually this is really just syntax
sugar for saying it returns tuple.

73
00:03:27.100 --> 00:03:29.172
So many times you have a function or
a macro,

74
00:03:29.172 --> 00:03:33.400
which quote unquote returns nothing, in
rust every function is actually required.

75
00:03:33.400 --> 00:03:37.890
To have a return type, but unit is
basically used as sort of the default.

76
00:03:37.890 --> 00:03:39.046
If you don't wanna specify one.

77
00:03:39.046 --> 00:03:43.078
It's basically saying, okay, yes, I have
a return type II return type is unit which

78
00:03:43.078 --> 00:03:45.272
is to say I have nothing
of interest to return.

79
00:03:45.272 --> 00:03:48.280
So, you can safely disregard
whatever I'm returning.

80
00:03:50.610 --> 00:03:54.221
So technically if you want to, you can
even say let print line return Val,

81
00:03:54.221 --> 00:03:57.050
which has the type unit equals and
then call print line.

82
00:03:57.050 --> 00:03:59.745
So When you're calling a macro,
unless you have a list,

83
00:03:59.745 --> 00:04:02.058
it's on its own line with
a semicolon at the end.

84
00:04:02.058 --> 00:04:05.134
This is still technically an expression
and yeah, it'll return a value, but

85
00:04:05.134 --> 00:04:08.610
that value is going to be unit, so
it's not going to be of any help to you.

86
00:04:08.610 --> 00:04:12.068
So suddenly we just have the term, use the
term void for something similar to this.

87
00:04:12.068 --> 00:04:16.179
Technically, yeah, you can take unit
you can even pass a unit around, but

88
00:04:16.179 --> 00:04:16.969
in practice.

89
00:04:16.969 --> 00:04:21.421
This is how it's most commonly used as
basically a rusts equivalent of what other

90
00:04:21.421 --> 00:04:23.200
languages use the term void to me

