WEBVTT

1
00:00:00.250 --> 00:00:05.390
All right, so for
the exercise I've got VS code open here.

2
00:00:05.390 --> 00:00:10.570
This is a fresh VS code install that only
has a theme and rust analyzer installed.

3
00:00:11.910 --> 00:00:14.974
So everything that you're gonna see me do
when talk through these things is just

4
00:00:14.974 --> 00:00:16.310
using the rusty analyzer plugin.

5
00:00:18.680 --> 00:00:21.161
So, Russ analyzer is like
the rust like language or

6
00:00:21.161 --> 00:00:23.130
one of the rust language server things.

7
00:00:23.130 --> 00:00:24.020
There's also RMLS.

8
00:00:24.020 --> 00:00:27.880
But rust analyzers a lot faster,
at least by reputation.

9
00:00:29.050 --> 00:00:32.390
Okay, so
I have here I've opened part one in.

10
00:00:32.390 --> 00:00:35.615
So when you download the repository,
you'll see a directory called part one.

11
00:00:35.615 --> 00:00:38.396
As you can imagine,
there's also part two through seven, and

12
00:00:38.396 --> 00:00:40.900
those would be the exercises for those.

13
00:00:40.900 --> 00:00:45.590
Each of these exercises has the same
structure, so there's a source main.rs.

14
00:00:45.590 --> 00:00:48.990
If you wanna know how to build it, there's
a read me that just kind of explains it.

15
00:00:48.990 --> 00:00:52.360
But basically, all you've got to do
at the command line is run cargo run.

16
00:00:52.360 --> 00:00:54.885
If you're in VS code,
there's actually a rust analyzer,

17
00:00:54.885 --> 00:00:56.460
I can actually press run right here.

18
00:00:57.740 --> 00:01:00.029
So basically all of these
exercises have the same form.

19
00:01:00.029 --> 00:01:03.140
Which is we've got some rust code,
and there's some to do's in there.

20
00:01:03.140 --> 00:01:05.910
Well, these little emojis so
you can see what's going on there.

21
00:01:05.910 --> 00:01:08.710
So here we have three different to do's.

22
00:01:09.740 --> 00:01:11.222
So basically we have our main function so

23
00:01:11.222 --> 00:01:13.460
this is what's going to
kick off the program.

24
00:01:13.460 --> 00:01:17.720
All it does is it prints out says hey, the
city of and then city name is Rossville.

25
00:01:17.720 --> 00:01:20.460
And then we're calling this
print population function.

26
00:01:20.460 --> 00:01:24.239
Passing some number of adults, some number
of kids and some number of buildings.

27
00:01:24.239 --> 00:01:27.460
So adults is a use 64 kids is a u 32.

28
00:01:27.460 --> 00:01:29.420
Buildings as a u 32.

29
00:01:29.420 --> 00:01:32.108
Rust analyzer one of the things that
it does is like if I hover over these

30
00:01:32.108 --> 00:01:33.410
types anywhere in here.

31
00:01:33.410 --> 00:01:36.980
It'll tell me the types of adults use 64
because it knows that because of what

32
00:01:36.980 --> 00:01:39.972
we've defined up here, but
that also works the type inference.

33
00:01:39.972 --> 00:01:43.534
You can also see, for example,
that although I didn't put a type here for

34
00:01:43.534 --> 00:01:44.281
a population,

35
00:01:44.281 --> 00:01:48.090
it actually inferred when you can see in
gray there it says colon i32 in gray.

36
00:01:48.090 --> 00:01:49.402
That's just roughly analyzer saying,

37
00:01:49.402 --> 00:01:50.877
I know what type was inferred for
that thing.

38
00:01:50.877 --> 00:01:54.706
So I'm just going to tell you, if you
want, I can also say insert explicit type

39
00:01:54.706 --> 00:01:58.376
and then it'll just bop just put it in
there and make it be a the actual type.

40
00:01:58.376 --> 00:02:01.731
So this is kind of a way that you can sort
of get the type inference benefit but

41
00:02:01.731 --> 00:02:04.300
also still be able to see
the types if you want.

42
00:02:04.300 --> 00:02:08.986
You can also I think there's a way to
turn that off if you don't wanna see so

43
00:02:08.986 --> 00:02:10.583
many type annotations.

44
00:02:10.583 --> 00:02:11.171
Okay, so

45
00:02:11.171 --> 00:02:16.495
here's our first to do we wanna compute
the population by adding adults to kids.

46
00:02:16.495 --> 00:02:19.045
Now because adults is use u 64 and
kids uses u 32.

47
00:02:19.045 --> 00:02:23.132
We're going to need to use the as keyword
to get them both in the same type.

48
00:02:23.132 --> 00:02:26.300
We're also gonna wanna compute buildings
per person by dividing buildings by

49
00:02:26.300 --> 00:02:27.302
population.

50
00:02:27.302 --> 00:02:30.983
So another tip here about how to use
as for that, and finally we're gonna do

51
00:02:30.983 --> 00:02:35.571
a little bit string interpolation to
print buildings for person right here.

52
00:02:35.571 --> 00:02:39.871
So when I run this,
we'll see that it's gonna build my code.

53
00:02:39.871 --> 00:02:42.688
This takes a little bit, but
when I do subsequent builds,

54
00:02:42.688 --> 00:02:44.771
it should be a little bit faster.

55
00:02:44.771 --> 00:02:47.542
And here we see the output of this
program, the city of Rustville,

56
00:02:47.542 --> 00:02:49.027
population,0, which is wrong,

57
00:02:49.027 --> 00:02:52.690
adults, kids, buildings and then we
have the two that it's printing out.

58
00:02:52.690 --> 00:02:55.140
Once we're done,
the population should not be zero.

59
00:02:55.140 --> 00:03:00.260
And rather than this, it should print
out buildings per person there.

60
00:03:00.260 --> 00:03:03.566
Okay and again, if you're not using
like a VS code, like with this plugin,

61
00:03:03.566 --> 00:03:04.610
that's totally fine.

62
00:03:04.610 --> 00:03:08.657
All you have to do is run cargo, run at
the command line in this directory and

63
00:03:08.657 --> 00:03:10.360
this part one directory.

64
00:03:10.360 --> 00:03:12.170
And it'll do exactly the same thing.

