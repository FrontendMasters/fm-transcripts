WEBVTT

1
00:00:00.050 --> 00:00:02.340
&gt;&gt; Great, so let's go through these two.

2
00:00:02.340 --> 00:00:05.420
So first we're gonna use pop to
remove the last city from the list.

3
00:00:06.480 --> 00:00:09.290
So, here's an example of
pattern matching syntax.

4
00:00:09.290 --> 00:00:16.800
So remember if I just say city names.pub,
this is not gonna work the press escape.

5
00:00:19.330 --> 00:00:21.960
Okay, fixed Sorry,
it's gonna wait for this to go away.

6
00:00:23.950 --> 00:00:28.717
So if I call citynames.pub, that's not
gonna work because we're gonna get

7
00:00:28.717 --> 00:00:34.280
an error here where it says hey, wait
a minute, this is an option not as string.

8
00:00:34.280 --> 00:00:39.226
So here's how we can deal with
that is I can actually just

9
00:00:39.226 --> 00:00:44.500
match on citynames.pop directly and
just do one of these.

10
00:00:45.980 --> 00:00:47.970
I can uncomment these.

11
00:00:47.970 --> 00:00:51.890
And now, I've got this nice
little match right here, and

12
00:00:51.890 --> 00:00:54.290
I can just change this inner value.

13
00:00:54.290 --> 00:00:55.990
I'm just gonna return
that right here first.

14
00:00:58.070 --> 00:01:02.211
In the case of none,
I'm just gonna use empty string.

15
00:01:12.232 --> 00:01:13.002
Okay.

16
00:01:13.002 --> 00:01:17.337
So, there's one other problem here, which
is that city names is not mutable and

17
00:01:17.337 --> 00:01:22.200
pop is something that actually mutates
like it takes something off of the back.

18
00:01:22.200 --> 00:01:24.800
So you can say cannot borrow
city names as mutable.

19
00:01:24.800 --> 00:01:28.824
We haven't talked about borrowing yet,
but it does at least have a suggestion at

20
00:01:28.824 --> 00:01:32.552
the end there consider changing this
to be mutable, and that will in fact,

21
00:01:32.552 --> 00:01:33.770
fix the problem.

22
00:01:33.770 --> 00:01:37.630
So now this is no longer giving
us an error, citynames.pop.

23
00:01:37.630 --> 00:01:41.556
And now we're basically able to do
the pop, get back our option and

24
00:01:41.556 --> 00:01:45.767
then we say either it's some in which
case we wanna just record that city

25
00:01:45.767 --> 00:01:50.047
name the inner value, or we're just
going to default to empty string and

26
00:01:50.047 --> 00:01:55.000
just say there was no city name that
was just an empty string there instead.

27
00:01:55.000 --> 00:01:57.630
Okay, next now we've got our last
city which is a string we can

28
00:01:57.630 --> 00:02:01.490
call starts with and then so it's going
to print either these things great.

29
00:02:01.490 --> 00:02:05.749
Now we've done that we're going to use dot
push to put last city back in city name so

30
00:02:05.749 --> 00:02:13.482
we're going to say city names dot push,
last city Oops.

31
00:02:16.157 --> 00:02:16.695
Okay.

32
00:02:16.695 --> 00:02:20.520
And finally, we want to print
out the full list of cities.

33
00:02:20.520 --> 00:02:24.084
So we're gonna do for city,
we've got to see this,

34
00:02:24.084 --> 00:02:27.600
actually just copy paste this right here.

35
00:02:27.600 --> 00:02:32.470
So we're gonna say for
city name in city names dot iter.

36
00:02:35.531 --> 00:02:40.490
And we'll just print each of
these with a little asterisk

37
00:02:40.490 --> 00:02:44.226
next to them so
sort of like a bullet point.

38
00:02:44.226 --> 00:02:50.820
City name all right,
everything compiles let's see how it runs.

39
00:02:52.060 --> 00:02:53.890
Cool Rossville starts with an R.

40
00:02:53.890 --> 00:02:54.670
I agree.

41
00:02:54.670 --> 00:02:57.880
Here's the full list of cities Python to
Java's Burg c by the sea and westville.

42
00:02:58.960 --> 00:03:00.025
Any questions?

43
00:03:00.025 --> 00:03:05.200
&gt;&gt; When once more could you explain
why do we need the match again?

44
00:03:06.920 --> 00:03:11.831
&gt;&gt; Sure so basically, the pop function or
the pop method does not

45
00:03:11.831 --> 00:03:16.730
return a string even though
this is a vector of strings.

46
00:03:16.730 --> 00:03:19.980
And the reason it doesn't return that
is because Russ doesn't have a concept

47
00:03:19.980 --> 00:03:22.060
like null or undefined or nil.

48
00:03:22.060 --> 00:03:25.347
So what happens if this vector happens
to be empty when I call pop on it,

49
00:03:25.347 --> 00:03:27.810
like what is it actually returned?

50
00:03:27.810 --> 00:03:30.940
So because there's no possible
value It could return.

51
00:03:30.940 --> 00:03:34.872
Will rust does is instead of returning
something like nil or undefined or

52
00:03:34.872 --> 00:03:39.191
panicking, what it does instead is it
returns this option enum, and the option

53
00:03:39.191 --> 00:03:44.310
basically represents the concept of the
value that might or might not be there.

54
00:03:44.310 --> 00:03:47.380
And so, if we have the subvariant,
that means the value is there.

55
00:03:47.380 --> 00:03:50.670
In which case,
we can pattern match on it and get it out.

56
00:03:50.670 --> 00:03:53.940
But, there also might be none which
indicates there was not value there.

57
00:03:53.940 --> 00:03:59.213
And so, basically this branch
will get run If we call pop and

58
00:03:59.213 --> 00:04:06.320
there is something to pop off there,
but otherwise it's not gonna work.

59
00:04:06.320 --> 00:04:08.320
It's just gonna come back as as none.

60
00:04:10.520 --> 00:04:14.757
&gt;&gt; So, rust is forcing you to
explicitly write your edge case

61
00:04:14.757 --> 00:04:17.150
scenarios into your code.

62
00:04:17.150 --> 00:04:22.089
&gt;&gt; Yeah, it's as if you had, like null
checking built into the language where

63
00:04:22.089 --> 00:04:26.718
it said like you If you get back no you
have to handle the possibility that

64
00:04:26.718 --> 00:04:31.349
it's no except that rather than having
it be no rust basically uses this

65
00:04:31.349 --> 00:04:36.083
concept that's already got of enums
to accomplish something similar.

