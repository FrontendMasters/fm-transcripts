WEBVTT

1
00:00:00.260 --> 00:00:04.230
All right, as with all the other
exercises, we have main.rs and this time,

2
00:00:04.230 --> 00:00:06.750
we're doing something
a little bit different.

3
00:00:06.750 --> 00:00:10.712
We've got in addition to our city struct
from last time where we have description

4
00:00:10.712 --> 00:00:14.338
residents and his coastal, now we also
have an enum called cities sizes.

5
00:00:14.338 --> 00:00:18.245
We got these little comments here that
are sort of documenting about what each of

6
00:00:18.245 --> 00:00:19.660
these sizes correspond to.

7
00:00:19.660 --> 00:00:22.617
So a town is about 1000 people,
a city it's about 10,000,

8
00:00:22.617 --> 00:00:24.970
Metropolis is about a million.

9
00:00:24.970 --> 00:00:28.180
These values will come up a little
bit later in the exercise.

10
00:00:28.180 --> 00:00:31.633
So this time,
you may recall in our previous exercise,

11
00:00:31.633 --> 00:00:33.940
we had a function called New_city.

12
00:00:33.940 --> 00:00:37.468
Well, here we're doing it sort of the more
idiomatic rust style where we have

13
00:00:37.468 --> 00:00:40.690
an impulse city and inside that
we're saying function new insights.

14
00:00:40.690 --> 00:00:45.159
So we'll say city colon colon new rather
than new_city when we're calling this

15
00:00:45.159 --> 00:00:48.984
function, but otherwise it's gonna
be exactly the same as before.

16
00:00:48.984 --> 00:00:52.668
By the way, you might notice this
is returning a city, if you want,

17
00:00:52.668 --> 00:00:54.749
you could have a return self up to you.

18
00:00:54.749 --> 00:00:58.223
Okay, so this is still
thinking city size is coastal.

19
00:00:58.223 --> 00:00:59.770
Now we're doing things
a little bit differently here.

20
00:00:59.770 --> 00:01:03.000
So, we're doing a pattern match on
this city size that we were given.

21
00:01:03.000 --> 00:01:06.685
Remember city sizes either town, city or
Metropolis and based on the city size,

22
00:01:06.685 --> 00:01:10.587
like the general description of the city
size we're getting, we're going to make up

23
00:01:10.587 --> 00:01:14.620
a residence value and this is 1000 for a
town and that's where this thing comes in.

24
00:01:14.620 --> 00:01:17.200
It'll be 10,000 for a city and
a million for metropolis.

25
00:01:17.200 --> 00:01:19.728
And then what we're actually
doing is in each of these

26
00:01:19.728 --> 00:01:22.240
branches we're returning a tuple.

27
00:01:22.240 --> 00:01:24.890
So here I'm returning a tuple,
where the first one is a string.

28
00:01:24.890 --> 00:01:27.458
That's that same description
string we had last time and

29
00:01:27.458 --> 00:01:30.360
the second one is the the residence value.

30
00:01:30.360 --> 00:01:34.537
So then I'm saying let and then I'm doing
a tuple D structure here, equals and

31
00:01:34.537 --> 00:01:36.230
then the whole match.

32
00:01:36.230 --> 00:01:39.132
So basically what ends up happening
is after we run this match,

33
00:01:39.132 --> 00:01:42.090
we end up with description in scope and
residents in scope.

34
00:01:42.090 --> 00:01:45.375
Because each of the branches of
this match is returning a tuple.

35
00:01:45.375 --> 00:01:46.702
And then what we do with that tuple,

36
00:01:46.702 --> 00:01:49.805
once we get it back is we just immediately
D structure it and put it into scope.

37
00:01:49.805 --> 00:01:53.305
So this is an example of a pretty
common technique that you see in rust.

38
00:01:53.305 --> 00:01:56.565
It's sort of a way to quote and
quote, return multiple values.

39
00:01:56.565 --> 00:01:59.595
We're not actually returning multiple
values, we're returning a tuple.

40
00:01:59.595 --> 00:02:00.965
But a tuple can hold multiple values.

41
00:02:00.965 --> 00:02:05.815
So this is kind of a relatively
lightweight trick for doing that.

42
00:02:07.050 --> 00:02:10.929
So here's our first to do we wanna handle
the other city size variants individually.

43
00:02:10.929 --> 00:02:13.549
Now similarly to how the town
variant is handled here, so

44
00:02:13.549 --> 00:02:16.061
we wanna duplicate that one for
city and Metropolis and

45
00:02:16.061 --> 00:02:18.640
change each of their residence
counts as appropriate.

46
00:02:20.050 --> 00:02:23.699
Finally, at the end of all this once we've
actually pulled out our description and

47
00:02:23.699 --> 00:02:26.830
residents Then we construct the cities
with description residents and

48
00:02:26.830 --> 00:02:28.080
his coastal.

49
00:02:28.080 --> 00:02:33.468
And that's the end of our city
colon colon new method, okay?

50
00:02:33.468 --> 00:02:36.487
And then finally the last thing that
we have to do here is inside main,

51
00:02:36.487 --> 00:02:40.032
we're basically going to use city colon
colon new in order to create a metropolis

52
00:02:40.032 --> 00:02:40.830
sized city here.

53
00:02:40.830 --> 00:02:44.456
So we're gonna replace this sort of hard
coded definition where we're building

54
00:02:44.456 --> 00:02:47.400
the struct by hand with a colon to
the city colon colon new method.

