WEBVTT

1
00:00:00.090 --> 00:00:04.853
Now, having said that, there's also this
concept of lifetime illusion, which is

2
00:00:04.853 --> 00:00:10.070
basically saying, in some cases, the
compiler knows what the lifetimes must be.

3
00:00:10.070 --> 00:00:13.030
And it doesn't actually
require you to annotate them.

4
00:00:13.030 --> 00:00:16.483
So, I like to think of lifetime illusion
as being somewhat similar to type

5
00:00:16.483 --> 00:00:20.326
inference in the sense that it's a way to
say, I could write out the type here, but

6
00:00:20.326 --> 00:00:24.337
since the compiler knows exactly what the
type is, anyway, I'm not gonna bother and

7
00:00:24.337 --> 00:00:26.340
it's going to be fine.

8
00:00:26.340 --> 00:00:28.333
Similarly, sometimes you can say,

9
00:00:28.333 --> 00:00:31.680
I could write out the lifetime
annotation here if I wanted to.

10
00:00:31.680 --> 00:00:35.741
In fact, if you want to anytime you have
a reference anywhere in rust, you can put

11
00:00:35.741 --> 00:00:40.210
a lifetime annotation on it if you want
to be explicit about it like that.

12
00:00:40.210 --> 00:00:42.414
But in practice a lot of the time,
it's kind of a,

13
00:00:42.414 --> 00:00:44.870
more trouble than you
necessarily want to take.

14
00:00:44.870 --> 00:00:48.540
And so it's can be pretty nice that
the rust compiler oftentimes will say,

15
00:00:48.540 --> 00:00:51.000
you know what,
I know what the lifetime is here.

16
00:00:51.000 --> 00:00:53.150
You don't actually need to annotate
this if you don't want to.

17
00:00:53.150 --> 00:00:56.035
So for example,
here's how I could if I wanted to,

18
00:00:56.035 --> 00:00:58.800
I could have annotated
our releases value here.

19
00:00:58.800 --> 00:01:02.736
I could have said yes, this is a release
a struct with a lifetime of tick a,

20
00:01:02.736 --> 00:01:05.310
if I wanted to,
that's something I could do.

21
00:01:05.310 --> 00:01:07.350
It's not necessarily
something that I want to do.

22
00:01:07.350 --> 00:01:11.238
And so if I wanted to I could use
this right here like tick underscore,

23
00:01:11.238 --> 00:01:13.250
which is basically a way of saying,

24
00:01:13.250 --> 00:01:16.940
I don't actually care about what
the lifetime of this thing is.

25
00:01:16.940 --> 00:01:20.859
I know that there's some life time
parameter there, but Russ compiler,

26
00:01:20.859 --> 00:01:25.300
you just figure it out take care of it and
and I don't need to bother with it.

27
00:01:25.300 --> 00:01:29.377
And also it's why you can see things in
various functions like that like length

28
00:01:29.377 --> 00:01:31.870
that we saw earlier that
takes ampersand self.

29
00:01:31.870 --> 00:01:35.570
You don't have to put ampersand
tick a self for example.

30
00:01:35.570 --> 00:01:38.841
The rust compiler is smart enough to
figure okay There's only one reference

31
00:01:38.841 --> 00:01:40.500
in this entire function type.

32
00:01:40.500 --> 00:01:42.710
Therefore, you don't need to
bother giving it an annotation.

33
00:01:42.710 --> 00:01:45.220
I know that it's just like
there's just the one lifetime.

34
00:01:45.220 --> 00:01:48.100
You don't need to give it a name
because the whole point of

35
00:01:48.100 --> 00:01:49.920
the name is to connect things.

36
00:01:49.920 --> 00:01:51.332
There's nothing to connect
in a case like that.

37
00:01:54.724 --> 00:01:57.957
Actually, before we talk about the static
lifetime limit, just pause and

38
00:01:57.957 --> 00:02:02.090
ask any questions about lifetime illusion
or lifetime annotations in general?

39
00:02:02.090 --> 00:02:06.957
&gt;&gt; Shouldn't the compiler know
automatically if it deallocates the vector

40
00:02:06.957 --> 00:02:09.960
as it's being referenced by the slices?

41
00:02:09.960 --> 00:02:13.986
&gt;&gt; Shouldn't the compiler know not to
deallocate the vector because it's still

42
00:02:13.986 --> 00:02:17.050
being referenced by the slices,
in other words.

43
00:02:17.050 --> 00:02:19.675
What if instead of giving you
a compile error saying, hey,

44
00:02:19.675 --> 00:02:21.310
you need to fix something?

45
00:02:21.310 --> 00:02:23.926
Why can't I just extend the lifetime and
basically say, okay, well,

46
00:02:23.926 --> 00:02:25.770
there's still active
references to this thing.

47
00:02:25.770 --> 00:02:27.738
So just don't deallocate it here and

48
00:02:27.738 --> 00:02:31.620
deallocate it sometime after
the last reference expires.

49
00:02:31.620 --> 00:02:33.420
I'm assuming that is the question.

50
00:02:33.420 --> 00:02:35.740
That's how I understand it.

51
00:02:35.740 --> 00:02:36.320
It's a great question.

52
00:02:36.320 --> 00:02:39.940
I would say that the short answer
here is that it's a design decision.

53
00:02:39.940 --> 00:02:43.440
I have not personally thought through all
the implications of what that might mean.

54
00:02:43.440 --> 00:02:47.859
I wouldn't be surprised if it turned
out that if you had that as a policy,

55
00:02:47.859 --> 00:02:52.858
it created other edge cases that were even
worse than getting a compiler error here

56
00:02:52.858 --> 00:02:57.133
but to be honest, I haven't really
thought it through that much, but

57
00:02:57.133 --> 00:03:01.859
the short answer is that it is a design
decision that the rust compiler makes.

58
00:03:01.859 --> 00:03:03.815
And the policy is that slices and

59
00:03:03.815 --> 00:03:08.860
references are not allowed to outlive
the thing that they're referencing.

60
00:03:08.860 --> 00:03:13.500
And what the compiler is policy is is just
to give you an error when that happens.

61
00:03:13.500 --> 00:03:15.710
Is it possible that they could
have gone a different way?

62
00:03:15.710 --> 00:03:19.578
I'm honestly not sure, I'm not enough
of an expert on the compiler internals

63
00:03:19.578 --> 00:03:21.861
of the rust compiler to know that or
even like,

64
00:03:21.861 --> 00:03:24.150
what design considerations are involved.

65
00:03:24.150 --> 00:03:29.300
But suffice it to say that is the rule and
that's what we got to work with.

66
00:03:29.300 --> 00:03:30.982
So the question is basically hey,

67
00:03:30.982 --> 00:03:34.120
why did we put these curly braces
here that caused this problem?

68
00:03:34.120 --> 00:03:35.901
We could just get rid
of the curly braces and

69
00:03:35.901 --> 00:03:38.630
then [LAUGH] we would not
a lifetime issue the first place.

70
00:03:38.630 --> 00:03:41.197
Yeah, absolutely correct.

71
00:03:41.197 --> 00:03:45.525
Short answer is I was trying to
find an example that sort of

72
00:03:45.525 --> 00:03:48.630
minimally reproduce the problem.

73
00:03:48.630 --> 00:03:51.680
And before this, I had an even
more involved example than this.

74
00:03:51.680 --> 00:03:52.920
And I was trying to sort of trim it down.

75
00:03:52.920 --> 00:03:55.310
And this was one of the ways
that I decided to trim it down.

76
00:03:55.310 --> 00:03:57.370
But yeah, I mean, you're absolutely right.

77
00:03:57.370 --> 00:04:00.220
In this case, we could get rid of that.

78
00:04:00.220 --> 00:04:02.452
As far as real world examples
where this has come up,

79
00:04:02.452 --> 00:04:05.820
I have definitely personally run to this
in a number of different situations.

80
00:04:05.820 --> 00:04:10.784
But they're all pretty complicated, the
reasons lifetimes is at the very end of

81
00:04:10.784 --> 00:04:15.237
this course is because it really is
kind of it has to do with the most well,

82
00:04:15.237 --> 00:04:19.836
not the most, but some of the most
obscure edge cases that you can encounter

83
00:04:19.836 --> 00:04:22.410
having to do with the Baro checker.

84
00:04:22.410 --> 00:04:25.704
And they solve problems related to
that where basically you have complex

85
00:04:25.704 --> 00:04:28.890
relationships between references
that are getting passed around and

86
00:04:28.890 --> 00:04:31.968
you want to model them explicitly,
or maybe you even need to in order

87
00:04:31.968 --> 00:04:35.850
to disambiguate for the compiler,
because it can't always allied them.

88
00:04:35.850 --> 00:04:39.470
But yeah, I wish I had off and
a simple example I could rattle off but

89
00:04:39.470 --> 00:04:41.930
I couldn't come up with one.

90
00:04:41.930 --> 00:04:44.610
Maybe somebody else can, but
I couldn't think of one.

91
00:04:45.960 --> 00:04:49.279
&gt;&gt; What are the kind of naming
conventions you'd use for

92
00:04:49.279 --> 00:04:52.895
lifetimes, would you rather
be more explicit rather than

93
00:04:52.895 --> 00:04:56.720
just take a do you wanna give
it a name that means something?

94
00:04:56.720 --> 00:04:57.430
&gt;&gt; That's a great question.

95
00:04:57.430 --> 00:05:01.347
Yeah, so the question was, wouldn't you
rather use a more descriptive name than

96
00:05:01.347 --> 00:05:04.660
tick a like this is kind of your
traditional single letter variable.

97
00:05:05.730 --> 00:05:08.405
Honestly, a tick a itself
is extremely common,

98
00:05:08.405 --> 00:05:12.700
it's probably the most common one
you'll see in the wild by a lot.

99
00:05:12.700 --> 00:05:16.504
Because most often when you
encounter something like this,

100
00:05:16.504 --> 00:05:21.054
it's like there's a function that has
one maybe two lifetimes in it like

101
00:05:21.054 --> 00:05:23.390
differently named lifetimes.

102
00:05:23.390 --> 00:05:26.673
And so it's just sort of, I don't know,
it's the one that's there.

103
00:05:26.673 --> 00:05:30.636
So giving it a descriptive name isn't
necessarily gonna help out much because

104
00:05:30.636 --> 00:05:34.540
there's just not that many that can
possibly be confused cuz there's just so

105
00:05:34.540 --> 00:05:37.482
few of them and they also only
exist generally speaking for

106
00:05:37.482 --> 00:05:41.050
the type signature or maybe inside
the function in a couple of places.

107
00:05:42.070 --> 00:05:44.956
Having said that, there is one library
that I use that actually has three

108
00:05:44.956 --> 00:05:48.317
different type variables and it does use
slightly more descriptive names for them,

109
00:05:48.317 --> 00:05:49.610
and they are pretty helpful.

110
00:05:49.610 --> 00:05:53.468
So, I'm not saying it doesn't happen,
but it's pretty common

111
00:05:53.468 --> 00:05:58.311
to have single letter names for these
things in practice, but you're absolutely

112
00:05:58.311 --> 00:06:02.480
free to use more helpful ones if you
want and I definitely see that too.

