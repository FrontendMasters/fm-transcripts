WEBVTT

1
00:00:00.080 --> 00:00:04.605
All right, so in this section we're going
to talk about strings, floats, integers,

2
00:00:04.605 --> 00:00:05.410
and Booleans.

3
00:00:05.410 --> 00:00:09.003
And along the way, we'll talk about a few
like different basic language constructs

4
00:00:09.003 --> 00:00:10.630
that sort of fit around these things.

5
00:00:11.730 --> 00:00:14.160
Okay, so here is hello world in Rust.

6
00:00:14.160 --> 00:00:15.580
We say fn main.

7
00:00:15.580 --> 00:00:19.060
So this is how you declare a function
in Rust, is what the fn keyword,

8
00:00:19.060 --> 00:00:20.960
main is the name of our function.

9
00:00:20.960 --> 00:00:21.950
Doesn't take any arguments.

10
00:00:21.950 --> 00:00:25.070
And then inside the curly braces
are the body of the function.

11
00:00:25.070 --> 00:00:27.950
So far, this is probably looking pretty
similar to what you might expect from

12
00:00:27.950 --> 00:00:30.650
a language like JavaScript,
except for this exclamation point.

13
00:00:30.650 --> 00:00:32.840
We'll get back to that exclamation
point in a couple of slides.

14
00:00:34.450 --> 00:00:38.317
This is something that you might put
inside a file called, let's say app.rs.

15
00:00:38.317 --> 00:00:40.740
so.rs is Rust's file extension.

16
00:00:40.740 --> 00:00:45.570
And then I would compile this
file by running rustc app.rs.

17
00:00:45.570 --> 00:00:49.256
When I run that, it's going to give
me out a binary file, which is

18
00:00:49.256 --> 00:00:54.250
something like app.exe on Windows or just
something called app on Mac OS or Linux.

19
00:00:54.250 --> 00:00:56.813
Then I can just execute that file
normally and it will print out Hello,

20
00:00:56.813 --> 00:00:58.200
World to the screen.

21
00:00:58.200 --> 00:01:00.780
So this right here is the entirety
of Hello World in Rust.

22
00:01:02.680 --> 00:01:06.229
Rust has string interpolation, but not
built in as a language feature like you

23
00:01:06.229 --> 00:01:08.510
might find it some languages
like Python or Ruby.

24
00:01:08.510 --> 00:01:10.860
It's a little bit different in Rust.

25
00:01:10.860 --> 00:01:14.859
So in Rust, this string interpolation that
I'm doing right here, where I'm saying

26
00:01:14.859 --> 00:01:18.579
print line and then I have these curly
braces, and the first curly brace is going

27
00:01:18.579 --> 00:01:21.600
to get substituted with greeting,
which in this case is hello.

28
00:01:21.600 --> 00:01:24.309
And the second curly brace is going
to get substituted with subject,

29
00:01:24.309 --> 00:01:25.439
which in this case is world.

30
00:01:25.439 --> 00:01:29.255
So this is going to print out hello world
just like the version we had before.

31
00:01:29.255 --> 00:01:32.900
But it's doing so with this sort
of string interpolation technique.

32
00:01:32.900 --> 00:01:35.113
Now, the difference here is that in Rust,

33
00:01:35.113 --> 00:01:38.554
it's not actually that all strings
support this, but rather that

34
00:01:38.554 --> 00:01:42.310
print lines specifically supports
this as part of its implementation.

35
00:01:43.620 --> 00:01:47.103
So although this is going to print
hello world, just like before,

36
00:01:47.103 --> 00:01:50.000
it's it's doing a little bit differently.

37
00:01:50.000 --> 00:01:53.010
Print line is not the only way that
you can do string interpolation.

38
00:01:53.010 --> 00:01:57.100
Another really useful way to do string
interpolation is with this format.

39
00:01:57.100 --> 00:01:59.819
So the difference between format and
print line is print line,

40
00:01:59.819 --> 00:02:03.770
although it does string interpolation,
it always prints it out to the console.

41
00:02:03.770 --> 00:02:06.786
Whereas format will just
take this interpolation and

42
00:02:06.786 --> 00:02:10.405
then do the substitutions in
the same way that we had before, but

43
00:02:10.405 --> 00:02:12.170
it'll just return a string.

44
00:02:12.170 --> 00:02:16.012
So you can use this to sort of compose
together different strings using string

45
00:02:16.012 --> 00:02:17.890
interpolation.

46
00:02:17.890 --> 00:02:22.400
Another thing that uses string
interpolation is panic.

47
00:02:22.400 --> 00:02:24.123
So panic right here, as we can see,

48
00:02:24.123 --> 00:02:28.324
it's using string interpolation to put
the crash_reason inside the panic message.

49
00:02:28.324 --> 00:02:31.800
And panic is basically when
you want to end the program.

50
00:02:31.800 --> 00:02:35.195
So panic is not like throw in a lot of
languages or raise or something like that,

51
00:02:35.195 --> 00:02:37.000
it's not based around exceptions.

52
00:02:37.000 --> 00:02:39.590
It's really saying panic
means like we're done.

53
00:02:39.590 --> 00:02:40.150
I give up.

54
00:02:40.150 --> 00:02:43.420
I can't keep running this program,
we're exiting right now.

55
00:02:43.420 --> 00:02:46.073
Technically there are ways that you
can recover from panics in Rust, but

56
00:02:46.073 --> 00:02:48.860
it's kind of convoluted and it's,
in practice it's really not done.

57
00:02:48.860 --> 00:02:50.970
Basically when you panic,
you're saying like I'm done.

58
00:02:50.970 --> 00:02:53.210
This program is completely finished.

59
00:02:53.210 --> 00:02:56.103
That's why I have this line greyed
out right here is that this line will

60
00:02:56.103 --> 00:02:56.850
never get run.

61
00:02:56.850 --> 00:03:00.203
There's no way to really get this line to
run because we're going to have panicked

62
00:03:00.203 --> 00:03:03.700
before then and in fact, the compiler will
give you a warning about this saying like,

63
00:03:03.700 --> 00:03:05.325
hey, you have some code after a panic.

64
00:03:05.325 --> 00:03:07.290
That's not actually going
to gonna run anything.

