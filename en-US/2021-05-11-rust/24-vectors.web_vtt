WEBVTT

1
00:00:00.680 --> 00:00:02.350
So, we're gonna talk
about a few things here.

2
00:00:02.350 --> 00:00:04.963
First is the vec type that
we're gonna talk about usize,

3
00:00:04.963 --> 00:00:07.270
which someone asked about earlier.

4
00:00:07.270 --> 00:00:09.530
Talk about stack memory,
and finally, heap memory.

5
00:00:09.530 --> 00:00:12.244
So we're gonna get a little bit further
into our exploration of memory and

6
00:00:12.244 --> 00:00:13.134
how it relates to rust.

7
00:00:14.265 --> 00:00:16.385
Okay, let's start with
talking about vectors.

8
00:00:16.385 --> 00:00:20.075
So, we saw previously how to
define an array of years.

9
00:00:20.075 --> 00:00:23.865
Here's how to define a vector or
vec for short of years.

10
00:00:23.865 --> 00:00:28.293
So I'm saying let mut yours is Vec&lt;i32.

11
00:00:28.293 --> 00:00:32.270
So there's those angle brackets
like we saw with options, so

12
00:00:32.270 --> 00:00:36.171
this is a type parameter saying,
= vec exclamation point,

13
00:00:36.171 --> 00:00:39.706
so this is a macro, 1985, 2000, 2005.

14
00:00:39.706 --> 00:00:43.448
Now, unlike arrays, we actually
can increase the size of vectors.

15
00:00:43.448 --> 00:00:45.416
So I can say years.push 2010.

16
00:00:45.416 --> 00:00:47.715
So now years has 4
elements ending in 2010.

17
00:00:47.715 --> 00:00:50.388
So this is pushing 2010
onto the end of the vector.

18
00:00:51.978 --> 00:00:55.038
We can also call push again on it and
push that onto the end.

19
00:00:55.038 --> 00:00:57.878
So now we'd have 2010 and
2015 on the end there.

20
00:00:57.878 --> 00:01:01.625
Notice by the way that we would only be
able to do this if we have let mut yours.

21
00:01:01.625 --> 00:01:02.918
If I tried to call push, and

22
00:01:02.918 --> 00:01:07.130
this was not defined let mut it would say
you can't do that because push mutates.

23
00:01:07.130 --> 00:01:11.594
And you're only allowed to mutate
things that are defined with mut.

24
00:01:11.594 --> 00:01:15.225
And then once I was done with that,
I could say number of years and

25
00:01:15.225 --> 00:01:20.600
then call the len method on yours which
returns the length of the years vector.

26
00:01:20.600 --> 00:01:22.530
So, couple things to note about this.

27
00:01:22.530 --> 00:01:24.503
Number one, much like arrays,

28
00:01:24.503 --> 00:01:29.220
you do have to specify what the type of
every single one of these elements is.

29
00:01:29.220 --> 00:01:30.532
So in this case, I said,

30
00:01:30.532 --> 00:01:34.050
every single one of these elements
inside this vec has to be i32.

31
00:01:34.050 --> 00:01:37.446
But, unlike arrays,
I don't have to hard code the length.

32
00:01:37.446 --> 00:01:40.995
So that's because the length is allowed
to change at runtime with a vector,

33
00:01:40.995 --> 00:01:42.945
I'm allowed to push things onto the vec.

34
00:01:42.945 --> 00:01:45.324
And I'm also allowed there's
other things like pop,

35
00:01:45.324 --> 00:01:46.987
which will take things off of the vec.

36
00:01:46.987 --> 00:01:48.931
And that's also why
there's a length method.

37
00:01:48.931 --> 00:01:51.912
So you can imagine with an array, it
wouldn't be that useful to have a method

38
00:01:51.912 --> 00:01:55.730
for it because the length is hard coded
at compile time, it's never gonna change.

39
00:01:55.730 --> 00:01:57.840
But in the case of a vector,
it actually can change at runtime.

40
00:01:57.840 --> 00:02:03.990
So the len method will return the current
length of that year's vector.

41
00:02:03.990 --> 00:02:06.512
So initially, if I call .len on this,
it would be 3, but

42
00:02:06.512 --> 00:02:09.713
at this point it would now be 5 because
I pushed two more elements onto it.

43
00:02:12.365 --> 00:02:18.129
Usize comes up in the context of length
because len actually returns not a u64 or

44
00:02:18.129 --> 00:02:21.790
u16 or u32 but
rather something called usize.

45
00:02:22.890 --> 00:02:24.769
So usize is a little bit interesting,

46
00:02:24.769 --> 00:02:28.480
it's a little bit different than
the number size that we've seen before.

47
00:02:29.590 --> 00:02:36.391
And what's different about it is that it's
almost always in practice either a u32 or

48
00:02:36.391 --> 00:02:43.208
use 64 because usize the size of it varies
based on the system you're compiling for.

49
00:02:43.208 --> 00:02:47.687
So on a 64 bit system,
usize is equivalent to a u64, but

50
00:02:47.687 --> 00:02:51.554
on a 32 bit system,
it's equivalent to a u32.

51
00:02:51.554 --> 00:02:55.036
And if there are still 16 bits
systems around on a 16 bit system,

52
00:02:55.036 --> 00:02:56.941
it would be the equivalent of u16.

53
00:02:56.941 --> 00:02:59.902
I don't know of any 128 bit systems,

54
00:02:59.902 --> 00:03:04.180
but if there were usize on
those systems would be u128.

55
00:03:04.180 --> 00:03:08.738
So, a good example of a modern
32 bit system is Web Assembly is

56
00:03:08.738 --> 00:03:10.888
actually 32 bit right now.

57
00:03:10.888 --> 00:03:13.985
Whereas pretty much every other machine
you're gonna encounter is gonna be 64 bit.

58
00:03:13.985 --> 00:03:16.480
Like [LAUGH] this laptop is 64 bit,

59
00:03:16.480 --> 00:03:21.386
any like mobile phone you've got or
like a tablet is gonna be 64 bit,

60
00:03:21.386 --> 00:03:25.670
32 bit systems are like older systems or
Web Assembly.

61
00:03:25.670 --> 00:03:29.652
Although granted, they're actually working
on a 64 bit version of Web Assembly, but

62
00:03:29.652 --> 00:03:31.360
it hasn't really been released yet.

63
00:03:31.360 --> 00:03:33.120
I don't think there are any
browsers that implement it yet.

64
00:03:35.240 --> 00:03:39.421
So in practice, really what usize means,
at least in this day and age is generally

65
00:03:39.421 --> 00:03:43.725
speaking is gonna be either u64 or u32
depending on what you're compiling for,

66
00:03:43.725 --> 00:03:46.109
it's almost always gonna
be one of those two.

67
00:03:46.109 --> 00:03:49.029
And that's the type of
length like whenever you

68
00:03:49.029 --> 00:03:53.830
store the length of a particular vector,
it's always gonna be usize.

69
00:03:53.830 --> 00:03:58.536
This is actually a really common thing
where length values are stored as usize.

70
00:03:58.536 --> 00:04:01.536
It's true for vectors, it's also true for
strings, it's true for

71
00:04:01.536 --> 00:04:03.305
a number of different data structures.

72
00:04:03.305 --> 00:04:07.440
So this is the most common context
in which you will see usize come up.

73
00:04:07.440 --> 00:04:10.875
But other one that we didn't
talk about was array indexes.

74
00:04:10.875 --> 00:04:13.778
When your indexing into an array
with the square brackets,

75
00:04:13.778 --> 00:04:16.925
the type of the value that you put
in there is also gonna be usize.

76
00:04:18.165 --> 00:04:23.559
So, not really something that you need
to like get a ton of detail about but

77
00:04:23.559 --> 00:04:27.045
it's basically is just either u32 or u64.

78
00:04:27.045 --> 00:04:31.300
Okay, so let's talk about a few more
differences between vectors and arrays.

79
00:04:31.300 --> 00:04:37.082
So here we have an array called nums and
this is 3 u8s, so 1, 2, 3.

80
00:04:37.082 --> 00:04:38.880
And here we have a vector of u8s.

81
00:04:38.880 --> 00:04:40.570
So you can kind of see
the differences in the types here.

82
00:04:40.570 --> 00:04:43.892
We still have the u8 because we're say,
all the elements have to be u8 but

83
00:04:43.892 --> 00:04:46.580
we didn't have to put the 3 here,
although we did put vec and

84
00:04:46.580 --> 00:04:49.170
then angle brackets instead
of square brackets.

85
00:04:49.170 --> 00:04:52.257
And of course, when you're making the
vector you actually call the vec macro,

86
00:04:52.257 --> 00:04:53.880
rather than just using square brackets.

87
00:04:55.200 --> 00:05:00.400
This does highlight another feature of
macros that we haven't seen before,

88
00:05:00.400 --> 00:05:05.849
which is macros can actually be used to
you can call macros without parentheses.

89
00:05:05.849 --> 00:05:10.317
You can use call them with other things
like square brackets or curly braces.

90
00:05:10.317 --> 00:05:13.033
That's just like one of the things that
macros let you do that functions don't.

91
00:05:13.033 --> 00:05:15.596
Functions are always called with
parentheses but macros, yeah,

92
00:05:15.596 --> 00:05:18.577
you can potentially call them with
other things depending on the macro.

93
00:05:18.577 --> 00:05:21.975
The vec macro says give me square
brackets because it wants to kind of look

94
00:05:21.975 --> 00:05:25.943
like arrays whereas like print line and
format, that wouldn't really make sense.

95
00:05:25.943 --> 00:05:28.943
So of course,
they want you to use parentheses.

96
00:05:28.943 --> 00:05:33.319
Now of node, we can't actually do a for
loop over either of these.

97
00:05:33.319 --> 00:05:37.604
Whether it's a vec, or it's an array,

98
00:05:37.604 --> 00:05:42.893
we can still do a for
loop over that thing.

99
00:05:42.893 --> 00:05:48.417
Basically, this might seem like,
well, what's the difference?

100
00:05:48.417 --> 00:05:53.112
Why would you you ever want to use
an array if you could use a vec?

101
00:05:53.112 --> 00:05:56.969
And basically there's a trade off there
in terms of how they're represented

102
00:05:56.969 --> 00:05:57.570
in memory.

103
00:05:57.570 --> 00:06:01.591
And basically the trade off there sort of
set the stage for the number one biggest

104
00:06:01.591 --> 00:06:06.135
factor in language performance,
which is how heap memory is managed.

105
00:06:06.135 --> 00:06:07.644
So, it might seem like
a small difference and

106
00:06:07.644 --> 00:06:10.315
it might seem like you would always use
a vec cuz it's just like way better.

107
00:06:10.315 --> 00:06:14.428
It's more flexible,
there's no reason to ever use an array.

108
00:06:14.428 --> 00:06:17.365
But behind the scenes in terms of memory
management, they're quite different.

109
00:06:17.365 --> 00:06:20.566
And, this is also relates to some of
the borrow checking errors that you'll

110
00:06:20.566 --> 00:06:21.225
see later on.

111
00:06:21.225 --> 00:06:25.251
So, we're gonna take some time now and
just talk about the difference between

112
00:06:25.251 --> 00:06:28.980
stack memory and heap memory and
how that pertains to vec in particular.

113
00:06:28.980 --> 00:06:32.626
&gt;&gt; So vectors are still you have to be
consistently typed within a vector,

114
00:06:32.626 --> 00:06:33.186
correct?

115
00:06:33.186 --> 00:06:35.892
&gt;&gt; Correct, yeah, you still have the same
restriction where every single one of

116
00:06:35.892 --> 00:06:37.860
the elements and
that really has to do with the for loops.

117
00:06:37.860 --> 00:06:41.055
Like when you're iterating through this
Russ needs to be able to say like,

118
00:06:41.055 --> 00:06:42.990
I know exactly what the type of num is.

119
00:06:42.990 --> 00:06:44.230
And then in both of these cases,
that's true.

120
00:06:44.230 --> 00:06:46.560
In both cases, it knows that it's
always gonna have a u8 in there

