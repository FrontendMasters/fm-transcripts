WEBVTT

1
00:00:00.060 --> 00:00:02.899
So just a quick recap of what we
talked about two sections ago with

2
00:00:02.899 --> 00:00:03.840
regards to memory.

3
00:00:03.840 --> 00:00:07.319
So we have all these bits in memory,
we can choose to interpret those bits as

4
00:00:07.319 --> 00:00:10.500
bytes, which is to say
groups of eight 1's and 0's.

5
00:00:10.500 --> 00:00:15.014
So these eight 1's and
0's happened to be the number 243.

6
00:00:15.014 --> 00:00:19.890
Here's another group of eight 1's and
0's and those correspond to 107.

7
00:00:19.890 --> 00:00:20.850
And so on and so forth.

8
00:00:20.850 --> 00:00:24.922
And for most of the time, we're talking
here we're just gonna be thinking about it

9
00:00:24.922 --> 00:00:28.995
as bytes, but while still remembering that
the bits in there are representative of

10
00:00:28.995 --> 00:00:32.960
this, this is just a way of
interpreting these 1's and 0's.

11
00:00:32.960 --> 00:00:35.867
Okay, but now we're gonna get
a little bit more specific and

12
00:00:35.867 --> 00:00:37.699
talk about the stack versus the heap.

13
00:00:38.750 --> 00:00:42.998
So basically, we've been talking about how
all memory can be thought of as like one

14
00:00:42.998 --> 00:00:45.840
big long continuous piece of 1's and 0's.

15
00:00:45.840 --> 00:00:47.880
And that is a useful mental model.

16
00:00:47.880 --> 00:00:51.983
But in practice, basically every process
divides that up into a couple of different

17
00:00:51.983 --> 00:00:55.290
regions, one of which is the stack,
and another which is the heap.

18
00:00:56.290 --> 00:00:58.640
So let's talk about like
why those are divided.

19
00:00:58.640 --> 00:01:01.563
Why would you ever like want to divide
up your memory into these two different

20
00:01:01.563 --> 00:01:03.920
regions like what would
be the purpose of that?

21
00:01:03.920 --> 00:01:05.622
So we'll talk through that.

22
00:01:05.622 --> 00:01:07.580
So we're gonna start with the stack.

23
00:01:07.580 --> 00:01:11.510
And basically the stack is a way
of dealing with function calls.

24
00:01:11.510 --> 00:01:14.280
It's a way of passing
memory between functions.

25
00:01:14.280 --> 00:01:15.678
So we're gonna have this sort of,

26
00:01:15.678 --> 00:01:18.690
we'll pretend it's a global
variable called stack length.

27
00:01:18.690 --> 00:01:21.012
I know global variables
have a bad reputation, but

28
00:01:21.012 --> 00:01:22.418
let's just go with it for now.

29
00:01:22.418 --> 00:01:23.760
And it's called stack length.

30
00:01:23.760 --> 00:01:27.878
And right now the stack is quote on quote,
empty, which is to say, we have these like

31
00:01:27.878 --> 00:01:31.600
memory cells, these are gonna be bytes,
but nothing's in them right now.

32
00:01:31.600 --> 00:01:36.030
There's no information of any
importance in them so far.

33
00:01:36.030 --> 00:01:39.500
Okay, and now I'm gonna define a couple of
functions that we're gonna use an example.

34
00:01:39.500 --> 00:01:41.840
So one's gonna be called
increment decrement.

35
00:01:41.840 --> 00:01:46.261
It takes a number and then it calls a
function called print_nums passing num +1

36
00:01:46.261 --> 00:01:49.990
and num -1, hence,
increment and decrement.

37
00:01:49.990 --> 00:01:53.627
The print_num function just takes an x and
y and as you would expect,

38
00:01:53.627 --> 00:01:55.250
prints them both out.

39
00:01:55.250 --> 00:01:57.880
And then finally we're
gonna have a function call,

40
00:01:57.880 --> 00:02:00.460
we're going to invoke
increment decrement 42.

41
00:02:00.460 --> 00:02:02.403
So we haven't really talked
about this before, but

42
00:02:02.403 --> 00:02:04.170
there's some memory traffic going on here.

43
00:02:04.170 --> 00:02:06.580
Like we're passing these numbers
between these different functions.

44
00:02:06.580 --> 00:02:09.322
So what's actually going on
there in terms of memory,

45
00:02:09.322 --> 00:02:11.060
when the computer runs this code?

46
00:02:11.060 --> 00:02:13.020
That's exactly what we're
about to talk about.

47
00:02:13.020 --> 00:02:17.110
So let's just step through what happens
when I call increment decrement passing 42

48
00:02:17.110 --> 00:02:21.085
and then increment decrement in turn
calls print_nums, passing 42 plus one and

49
00:02:21.085 --> 00:02:23.730
then 42 minus one, and
then print_nums runs.

50
00:02:23.730 --> 00:02:26.770
Let's see what happens in terms of
just specifically the memory involved.

51
00:02:27.830 --> 00:02:31.480
Okay, so at first before we call
the function, our stack is empty.

52
00:02:31.480 --> 00:02:34.770
There's no memory in any of these cells.

53
00:02:35.840 --> 00:02:39.438
Okay, let's start with just our first
call to increment_decrement (42).

54
00:02:39.438 --> 00:02:42.541
So what happens is we come along,
the program is running along it sees this

55
00:02:42.541 --> 00:02:45.359
instruction, says hey calling
from executive and passing 42.

56
00:02:45.359 --> 00:02:48.846
So it says okay,
I wanna put that 42 onto the stack,

57
00:02:48.846 --> 00:02:53.886
which basically means I want to take this
sort of conceptual array of bytes and

58
00:02:53.886 --> 00:02:56.302
I wanna fill the first one with 42.

59
00:02:56.302 --> 00:02:57.650
Why the first one?

60
00:02:57.650 --> 00:02:59.400
Well, because our stack
length was previously zero.

61
00:02:59.400 --> 00:03:02.064
So it says, okay, well,
I mean, since it's zero,

62
00:03:02.064 --> 00:03:05.020
I know that I can just
overwrite what's in the cell.

63
00:03:05.020 --> 00:03:06.711
And it's going to be no problem
because they're like the zero,

64
00:03:06.711 --> 00:03:07.570
there's nothing in the stack.

65
00:03:07.570 --> 00:03:09.080
So I'll just write it right in there.

66
00:03:09.080 --> 00:03:11.255
Great, so now I have a 42 on there.

67
00:03:11.255 --> 00:03:13.282
Next thing that happens is
the program moves on and says,

68
00:03:13.282 --> 00:03:15.170
okay, you told me to
call increment_decrement.

69
00:03:15.170 --> 00:03:17.623
I've got this 42 hanging out of
the stacks not really doing anything, but

70
00:03:17.623 --> 00:03:19.200
it's just hanging out there.

71
00:03:19.200 --> 00:03:21.100
Now we're gonna run this
increment_decrement function.

72
00:03:22.300 --> 00:03:26.269
So, increment_decrement, when it gets
inside of there, the way that it

73
00:03:26.269 --> 00:03:30.490
knows where it's argument is, is it
actually pulls it out of memory like this.

74
00:03:31.730 --> 00:03:34.310
It says I wanna take
stack length minus one.

75
00:03:34.310 --> 00:03:37.670
So in this case, our stack length is one,
so stack length minus one is zero.

76
00:03:37.670 --> 00:03:41.080
And I wanna get the memory
that's at that address.

77
00:03:41.080 --> 00:03:45.271
So in other words, slot zero because stack
length minus one is zero, slot zero and

78
00:03:45.271 --> 00:03:47.410
stack bytes, that's what my number is.

79
00:03:48.950 --> 00:03:51.910
And this works no matter how many
other functions have been called.

80
00:03:51.910 --> 00:03:55.456
It's basically saying like the most
recent thing that was put onto the stack,

81
00:03:55.456 --> 00:03:58.464
even if there's like a bazillion
things in this stack right here,

82
00:03:58.464 --> 00:04:00.360
that's what I want to be my num argument.

83
00:04:00.360 --> 00:04:02.370
It says, okay, cool,
now I know what num is.

84
00:04:02.370 --> 00:04:04.090
It's this thing right here.

85
00:04:04.090 --> 00:04:08.718
And then it can proceed on to
its print _nums and says, okay,

86
00:04:08.718 --> 00:04:12.820
I've got 42 and
I'm gonna say 42 plus one is 43.

87
00:04:12.820 --> 00:04:15.434
And then 42 minus one is 41.

88
00:04:15.434 --> 00:04:17.440
And now it's going to call print _nums.

89
00:04:17.440 --> 00:04:19.064
So what does it do to call print _nums?

90
00:04:19.064 --> 00:04:21.230
We follow the exact same procedure.

91
00:04:21.230 --> 00:04:23.760
Except this time we're gonna do it twice
because print_nums takes two arguments.

92
00:04:23.760 --> 00:04:26.850
So first we're gonna say num + 1,
we're gonna put that on the stack.

93
00:04:26.850 --> 00:04:29.510
So now our stack length is 2 and
there's a 43 on there.

94
00:04:29.510 --> 00:04:33.510
The 42 is still hanging out from before,
we haven't gotten rid of that yet.

95
00:04:33.510 --> 00:04:36.350
And then we're gonna
do 42 minus one is 41.

96
00:04:36.350 --> 00:04:38.250
And then put that on the stack.

97
00:04:38.250 --> 00:04:42.620
So, basically this first argument gonna go
to stack length of 2, put the 43 there.

98
00:04:42.620 --> 00:04:46.510
And then this one is gonna evaluate to 41,
we're gonna put that on the stack.

99
00:04:46.510 --> 00:04:48.105
Now we have a stack length of 3.

100
00:04:48.105 --> 00:04:50.757
Then the program says, okay,
now it's time to jump over and

101
00:04:50.757 --> 00:04:52.650
start executing print_nums.

102
00:04:52.650 --> 00:04:53.430
How do we do that?

103
00:04:53.430 --> 00:04:55.550
How do we know what
these two arguments are?

104
00:04:55.550 --> 00:04:58.860
Well, again, it's gonna be the same
kind of algorithm as before.

105
00:04:58.860 --> 00:05:01.835
Although the first one in this
case is gonna be stack length -2,

106
00:05:01.835 --> 00:05:03.360
because this has two arguments.

107
00:05:03.360 --> 00:05:05.810
And the second one is
gonna be stack length -1.

108
00:05:05.810 --> 00:05:09.353
So this first argument, it says,
okay, whatever our stack length is,

109
00:05:09.353 --> 00:05:11.460
go back two and that's my first argument.

110
00:05:11.460 --> 00:05:12.862
So this case the 43.

111
00:05:12.862 --> 00:05:17.810
And then this says go back one, and
that in this case is gonna be the 41.

112
00:05:17.810 --> 00:05:21.226
Now notice that even if the stack were
empty, and we had called this thing

113
00:05:21.226 --> 00:05:24.375
from scratch, this would still work and
give us the right answer.

114
00:05:24.375 --> 00:05:25.725
Like if that 42 went there,

115
00:05:25.725 --> 00:05:29.304
that'd be no problem because our stack
length would be 2 and 2 minus 2 is 0.

116
00:05:29.304 --> 00:05:31.095
So this would be our first argument.

117
00:05:31.095 --> 00:05:32.745
And this would be our second argument.

118
00:05:32.745 --> 00:05:35.655
And likewise it would also
work just as well if we add

119
00:05:35.655 --> 00:05:38.979
a whole bunch of things here
instead of just this one 42.

120
00:05:38.979 --> 00:05:42.870
So this is pretty much exactly what's
actually going on when you do a normal

121
00:05:42.870 --> 00:05:45.310
function call on a computer.

122
00:05:45.310 --> 00:05:49.486
It's using this concept of stack
memory and this one global counter,

123
00:05:49.486 --> 00:05:53.589
that's like how big is my stack to
figure out where to write things and

124
00:05:53.589 --> 00:05:55.641
then when you call the functions,

125
00:05:55.641 --> 00:06:00.218
they know where to look in memory based
on these offsets of their arguments.

126
00:06:00.218 --> 00:06:03.796
And you can imagine if there were third
argument here, this would be stack_length

127
00:06:03.796 --> 00:06:07.341
minus three, this would be minus two, and
the third argument would be minus one.

128
00:06:07.341 --> 00:06:10.087
Okay, so print_nums is finished as
we've printed the numbers back out

129
00:06:10.087 --> 00:06:11.380
to the screen.

130
00:06:11.380 --> 00:06:15.782
And now when we go back where the program
jumps back down to here, it says, hey,

131
00:06:15.782 --> 00:06:19.002
we saw that this 43 and
41 hanging out of the stack but,

132
00:06:19.002 --> 00:06:21.970
nobody's really using those anymore.

133
00:06:21.970 --> 00:06:25.765
So now, we can say you know what, I don't
need to like zero those out or anything,

134
00:06:25.765 --> 00:06:29.395
I'm just gonna reduce my stack link from
three down to one and just say, yeah,

135
00:06:29.395 --> 00:06:31.605
there's only one thing
on the stack right now.

136
00:06:31.605 --> 00:06:34.709
But the memory that we wrote into there,
the 43 that we wrote it to here,

137
00:06:34.709 --> 00:06:37.964
and the 41 of you wrote it there,
that's still what the ones and zeros are,

138
00:06:37.964 --> 00:06:39.343
like that memory is unchanged.

139
00:06:39.343 --> 00:06:42.020
We didn't go through and
turn them all into zero,

140
00:06:42.020 --> 00:06:46.118
we just sort of marked them as unused
by reducing this stack length counter.

141
00:06:46.118 --> 00:06:49.395
Which means that later if we go on and
call another function, that other function

142
00:06:49.395 --> 00:06:53.250
when it puts its arguments on the stack,
it's gonna happily overwrite these things.

143
00:06:53.250 --> 00:06:56.046
Because all of our logic has been
based around the stack length, and

144
00:06:56.046 --> 00:06:57.960
everything's still gonna work.

145
00:06:57.960 --> 00:07:01.535
But, again, interesting to note that
these things are still sort of,

146
00:07:01.535 --> 00:07:06.290
like hanging out, they're written into
memory, we're just not using them anymore.

147
00:07:06.290 --> 00:07:09.036
And the way that we fly that we're not
using them anymore is just by changing

148
00:07:09.036 --> 00:07:09.740
the stack length.

149
00:07:10.910 --> 00:07:13.620
Okay, so we're done calling print numbers,
we're back down here.

150
00:07:13.620 --> 00:07:16.190
Now increment_decrement is done,
it's gonna return.

151
00:07:16.190 --> 00:07:18.210
And once again,
we're gonna do exactly the same thing.

152
00:07:18.210 --> 00:07:21.061
We're not gonna bother erasing this 42,
we're just gonna say, well,

153
00:07:21.061 --> 00:07:22.340
we're done calling a function.

154
00:07:22.340 --> 00:07:25.154
So we're gonna take the stack
length all the way back to zero.

155
00:07:25.154 --> 00:07:27.867
So this is sorta what actually
happens in the computer,

156
00:07:27.867 --> 00:07:30.490
when we are running
a function call like this.

157
00:07:30.490 --> 00:07:32.740
First we push some things onto the stack.

158
00:07:32.740 --> 00:07:35.680
The functions use those things on
the stack to read their arguments.

159
00:07:35.680 --> 00:07:38.860
And then once the functions exit,
we don't go and override anything.

160
00:07:38.860 --> 00:07:41.916
We just keep decreasing the stack length
back down until we get all the way back

161
00:07:41.916 --> 00:07:42.490
down to zero.

162
00:07:42.490 --> 00:07:47.650
And then we're back at the top and
we've finished executing our program.

163
00:07:47.650 --> 00:07:50.254
And the stack is now empty once again.

164
00:07:50.254 --> 00:07:55.223
Okay, so you can imagine that actually, if
we think about how like memory like really

165
00:07:55.223 --> 00:07:59.460
works in practice, there's generally
all sorts of garbage in here.

166
00:07:59.460 --> 00:08:03.420
I mean like these bytes they're not
all zeros, [LAUGH] necessarily.

167
00:08:03.420 --> 00:08:06.612
There's potentially all sorts of like
random numbers from previous function

168
00:08:06.612 --> 00:08:08.240
calls just hanging out there.

169
00:08:08.240 --> 00:08:10.907
And as long as we're managing
our stack length properly, or

170
00:08:10.907 --> 00:08:13.890
rather our compiled program is
managing the cycling's properly,

171
00:08:13.890 --> 00:08:17.465
it doesn't really matter, we're never
gonna actually see any of those bytes.

172
00:08:17.465 --> 00:08:19.530
They're never gonna sort of
interfere with our program.

173
00:08:19.530 --> 00:08:23.211
The fact that there is garbage in there,
if everything's working properly,

174
00:08:23.211 --> 00:08:25.290
it's not really gonna
affect us in any way.

175
00:08:27.100 --> 00:08:30.979
Okay, so now let's say I wanted to,
instead of calling increment decrement

176
00:08:30.979 --> 00:08:34.919
passing 11 instead of 42, like let's
say I finished running this code and

177
00:08:34.919 --> 00:08:38.082
now I want to call it passing
11 instead of 42, real quick,

178
00:08:38.082 --> 00:08:40.530
we can kind of go through
the example again.

179
00:08:40.530 --> 00:08:43.603
So now we're gonna overwrite
that 42 with an 11.

180
00:08:43.603 --> 00:08:45.170
We're gonna jump up in here.

181
00:08:45.170 --> 00:08:47.551
Now, stack bytes of stack
length minus one is once again,

182
00:08:47.551 --> 00:08:49.350
going to refer to the first slot.

183
00:08:49.350 --> 00:08:51.784
Except this time it happens
to be an 11 instead of a 42.

184
00:08:51.784 --> 00:08:54.370
I'm gonna jump in here,
bump up the cycling for 3.

185
00:08:54.370 --> 00:08:57.454
This time it's gonna be 12 and
10 instead of 43 and 41,

186
00:08:57.454 --> 00:09:01.200
because that's what 11 plus one,
11 minus one are.

187
00:09:01.200 --> 00:09:02.292
Then we come in here again,

188
00:09:02.292 --> 00:09:04.860
stack bytes of stack length minus
2 is gonna be the same thing.

189
00:09:04.860 --> 00:09:06.420
12 and then 10 for this one.

190
00:09:06.420 --> 00:09:10.781
And once we go all the way back down to
the second is all the way back to zero

191
00:09:10.781 --> 00:09:16.260
except that the memory is now written into
these cells instead of what it was before.

192
00:09:16.260 --> 00:09:19.450
Okay, so that's passing function
arguments on the stack.

193
00:09:19.450 --> 00:09:21.154
But what if I wanna return something?

194
00:09:21.154 --> 00:09:24.745
What if I have this function called
double_and_return which takes a number and

195
00:09:24.745 --> 00:09:26.751
then returns that number
multiplied by two,

196
00:09:26.751 --> 00:09:29.573
and then I call that function
double_and_return(30).

197
00:09:29.573 --> 00:09:30.880
How does that work with the stack?

198
00:09:32.030 --> 00:09:35.858
Well, basically, it works pretty
similar to how we had things before,

199
00:09:35.858 --> 00:09:39.874
with one exception, which is that
basically before we, sorry, when we put

200
00:09:39.874 --> 00:09:44.180
the arguments on the stack here, would
actually leave space for a return value.

201
00:09:44.180 --> 00:09:47.760
We're gonna leave one extra byte
here because this returns to u8.

202
00:09:47.760 --> 00:09:48.892
And we're gonna say that you ate,

203
00:09:48.892 --> 00:09:51.200
we're gonna leave a little landing pad for
it here.

204
00:09:51.200 --> 00:09:53.334
So, we're gonna put this
30 on the stack and

205
00:09:53.334 --> 00:09:56.690
we're gonna put it in the second slot and
leave the first slot reserved.

206
00:09:56.690 --> 00:09:59.760
So we're basically gonna bump
the stack length up to two.

207
00:09:59.760 --> 00:10:02.320
Again, we're not gonna bother
clearing out that thing.

208
00:10:02.320 --> 00:10:04.823
We're just gonna sort of reserve it and
hold it and say, you know what,

209
00:10:04.823 --> 00:10:05.826
that's sort of reserved for

210
00:10:05.826 --> 00:10:08.479
our return value in the future when we
know we're gonna end up needing one.

211
00:10:09.720 --> 00:10:12.475
So, then we call the function and
we say, okay,

212
00:10:12.475 --> 00:10:16.910
how do I get my argument out of here
stack bytes of stack length minus one.

213
00:10:16.910 --> 00:10:19.473
Once again, stack length is two,
so two minus one is one.

214
00:10:19.473 --> 00:10:23.151
So it's gonna look in slot one,
which is gonna be this 30 right here.

215
00:10:23.151 --> 00:10:26.360
And so it's got its argument
multiplies it by two.

216
00:10:26.360 --> 00:10:30.863
And then when it returns it, what the
return is actually doing is saying, use

217
00:10:30.863 --> 00:10:35.602
that reserved slot that we had previously,
and store the return value in there.

218
00:10:35.602 --> 00:10:36.542
So 30 times two is 60.

219
00:10:36.542 --> 00:10:40.950
So 60 now we finally populated
that first value of the stack.

220
00:10:40.950 --> 00:10:44.172
And now when we come back in here,
this is okay, we're done with that so

221
00:10:44.172 --> 00:10:46.375
we can decrease the stack
length back down to 1,

222
00:10:46.375 --> 00:10:50.390
because we no longer need this argument
on the stack cuz the function is done.

223
00:10:50.390 --> 00:10:53.640
And now we're left with the stack
length of 1 and quite happily,

224
00:10:53.640 --> 00:10:54.713
a return value in it.

225
00:10:54.713 --> 00:10:58.610
And so now we can say let x equals and
then x can be assigned to 60.

226
00:10:58.610 --> 00:11:01.370
And then we can proceed
with our program as normal.

227
00:11:01.370 --> 00:11:03.541
Well, let's take this one step further and
say,

228
00:11:03.541 --> 00:11:07.650
we're gonna do exactly same thing before
I said now we're gonna say doubled twice.

229
00:11:07.650 --> 00:11:10.136
And we're gonna say same
argument of one thing, but

230
00:11:10.136 --> 00:11:12.580
now we're returning a tuple of two units.

231
00:11:12.580 --> 00:11:16.480
Okay, no big deal,
returns num times two and num times two.

232
00:11:16.480 --> 00:11:19.940
And this time we'll say,
let (x,y) = double_twice(30).

233
00:11:19.940 --> 00:11:23.500
So same exact example as the previous
step, except this time we're giving it

234
00:11:23.500 --> 00:11:26.750
two, or sorry,
we're returning two u8 instead of one.

235
00:11:26.750 --> 00:11:27.760
So no big deal.

236
00:11:27.760 --> 00:11:29.620
We reserve two slots instead of one,

237
00:11:29.620 --> 00:11:32.150
everything else is basically
the same as before.

238
00:11:33.240 --> 00:11:36.230
And we could also take this one
step further and say double thrice.

239
00:11:36.230 --> 00:11:37.700
We wanna have return three u8.

240
00:11:37.700 --> 00:11:40.404
Again, no problem, just reserve
three slots for the return value,

241
00:11:40.404 --> 00:11:42.700
and everything else works
exactly the same way as before.

242
00:11:45.310 --> 00:11:48.829
And if we wanted to,
we could instead of using a tuple there,

243
00:11:48.829 --> 00:11:50.141
we could say an array.

244
00:11:50.141 --> 00:11:52.096
And as we talked about previously,
arrays and

245
00:11:52.096 --> 00:11:55.320
tuples have exactly the same memory
representation, so no big deal there.

246
00:11:55.320 --> 00:11:58.490
This will once again work just reserve
three slots for the return value.

247
00:12:00.310 --> 00:12:01.110
What about this?

248
00:12:02.390 --> 00:12:08.470
What if I wanna actually return a Vec
of u8's, how many slots do we reserve?

249
00:12:08.470 --> 00:12:12.437
I don't know, one, two, three, a billion?

250
00:12:12.437 --> 00:12:16.625
We kind of can't know how many slots to
return to reserve ahead of time when we're

251
00:12:16.625 --> 00:12:19.953
trying to call the function because
we won't know how big the Vec

252
00:12:19.953 --> 00:12:22.500
is until the function is
actually done running.

253
00:12:23.610 --> 00:12:27.579
So we've got a bit of a chicken and
egg problem here where we wanna figure out

254
00:12:27.579 --> 00:12:32.380
how much space to reserve for that return
value before we call the function.

255
00:12:32.380 --> 00:12:34.308
But until we've actually run the function,

256
00:12:34.308 --> 00:12:36.500
we don't know how big
the return value needs to be.

257
00:12:36.500 --> 00:12:39.020
We don't know how big that Vec is.

258
00:12:39.020 --> 00:12:43.270
So remember when I said earlier that
this gets into one of the biggest areas

259
00:12:43.270 --> 00:12:47.331
of performance, one of the biggest
differences between Vec and u8.

260
00:12:47.331 --> 00:12:52.972
This is actually a really serious problem,
is that we can't just use the basic stack

261
00:12:52.972 --> 00:12:58.627
mechanism for passing these things around
in order to return a vector of a function.

262
00:12:58.627 --> 00:13:02.270
This seemingly simple thing, actually,
when you get down to like how the computer

263
00:13:02.270 --> 00:13:04.558
is working in order to pass
things around in memory,

264
00:13:04.558 --> 00:13:06.760
this is actually a really
serious problem for it.

265
00:13:08.640 --> 00:13:13.053
So, I mean, yeah, potentially we could
reserve like [LAUGH] an indefinitely large

266
00:13:13.053 --> 00:13:16.977
amount of memory for this Vec just in
case it was like a billion items long.

267
00:13:16.977 --> 00:13:20.133
But of course that doesn't scale very well
what if we have multiple function calls

268
00:13:20.133 --> 00:13:21.413
and they're all returning Vec,

269
00:13:21.413 --> 00:13:24.270
we're just gonna return like a reserved
a billion bytes for each of them?

270
00:13:24.270 --> 00:13:25.450
Not really gonna work.

271
00:13:27.000 --> 00:13:31.817
So really this kind of generalizes to
a rule which is in order to have something

272
00:13:31.817 --> 00:13:33.299
be returned directly,

273
00:13:33.299 --> 00:13:37.840
the size must be known at compile time
if we want to return it on the stack.

274
00:13:39.060 --> 00:13:40.948
This is just a truism, like in rust and

275
00:13:40.948 --> 00:13:44.665
in any language if you want to return
something on the stack the entire value

276
00:13:44.665 --> 00:13:48.100
on the stack, it has to be possible
to know that size at compile time.

277
00:13:49.680 --> 00:13:57.180
Okay, well, so what actually can we return
on the stack instead of this entire Vec.

278
00:13:57.180 --> 00:13:59.018
So this is basically what Russ does.

279
00:13:59.018 --> 00:14:02.929
When it actually returns this Vec,
like if I write this function out,

280
00:14:02.929 --> 00:14:07.107
it's not actually going to return all
of the u8 elements inside that Vec on

281
00:14:07.107 --> 00:14:12.040
the stack, instead, what it's gonna return
is something that does have a fixed size.

282
00:14:13.120 --> 00:14:14.610
In fact, it's a struct.

283
00:14:15.750 --> 00:14:17.000
I'm gonna call it Vec metadata.

284
00:14:17.000 --> 00:14:19.827
It actually has a different name if
you read the Russ source code, but

285
00:14:19.827 --> 00:14:20.820
this is the basic idea.

286
00:14:21.840 --> 00:14:24.520
It's a struct that has three fields in it.

287
00:14:24.520 --> 00:14:29.364
The first element index set is to
say the index into memory like as in

288
00:14:29.364 --> 00:14:32.230
our actual conceptual array of bytes.

289
00:14:32.230 --> 00:14:35.210
Each of those has an index that
we've been storing things into.

290
00:14:35.210 --> 00:14:37.030
It's gonna write that down and

291
00:14:37.030 --> 00:14:40.262
say what's the index of
the first element in this Vec.

292
00:14:40.262 --> 00:14:42.370
And that's gonna have the type usize.

293
00:14:42.370 --> 00:14:43.660
Also what's the length of this back?

294
00:14:43.660 --> 00:14:46.200
In other words,
how many total elements are there?

295
00:14:46.200 --> 00:14:47.400
And finally, capacity.

296
00:14:47.400 --> 00:14:49.340
We'll get into capacity
a little bit later.

297
00:14:49.340 --> 00:14:52.270
But let's first start by looking at
the first element index and the length.

298
00:14:53.850 --> 00:14:59.650
So first of all, this struct does have
a size that is known at compile time.

299
00:14:59.650 --> 00:15:00.630
That's three usizes.

300
00:15:00.630 --> 00:15:02.160
I know exactly how much those are.

301
00:15:02.160 --> 00:15:04.310
If it's a 64 bit system,
each of those are eight bytes.

302
00:15:04.310 --> 00:15:06.600
If it's a 32 bit system,
each of those are four bytes.

303
00:15:06.600 --> 00:15:08.418
And I know what compile time,
which system I'm compiling for.

304
00:15:08.418 --> 00:15:11.175
So no problem, all set.

305
00:15:11.175 --> 00:15:15.597
Of course the problem is that this is just
an index into some memory and a length,

306
00:15:15.597 --> 00:15:19.110
but it's not actually giving me
the actual bytes themselves.

307
00:15:19.110 --> 00:15:22.210
So where do the actual
elements in that Vec go?

308
00:15:23.800 --> 00:15:26.010
Well, the short answer
is they go on the heap.

