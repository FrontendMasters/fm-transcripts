WEBVTT

1
00:00:00.100 --> 00:00:04.068
So part five, six and seven are basically
each of them are going to introduce

2
00:00:04.068 --> 00:00:07.840
the three main concepts of rusts
automatic memory management system.

3
00:00:07.840 --> 00:00:11.484
Those concepts are ownership,
borrowing and lifetimes.

4
00:00:11.484 --> 00:00:14.320
We start with ownership and and
first learn how that works.

5
00:00:14.320 --> 00:00:16.200
Then in the next section we'll
talk about borrowing and

6
00:00:16.200 --> 00:00:17.600
then finally we'll end with lifetimes.

7
00:00:18.640 --> 00:00:21.860
Cool, so first, we're gonna talk
about manual memory management.

8
00:00:21.860 --> 00:00:25.332
Then we're gonna talk about
automatic memory management,

9
00:00:25.332 --> 00:00:27.520
then ownership and finally cloning.

10
00:00:27.520 --> 00:00:30.491
Okay, so
we previously talked about the heap and

11
00:00:30.491 --> 00:00:34.850
how when we want to make a vec full of
nums that are gonna live on the heap.

12
00:00:34.850 --> 00:00:39.540
We call this vecmacro, and it's going
to actually store them inside the heap.

13
00:00:39.540 --> 00:00:43.040
What's gonna go on the stack is something
more like this VecMetadata struct, we're

14
00:00:43.040 --> 00:00:46.312
gonna have the first element index which
is going to be where this one is stored.

15
00:00:46.312 --> 00:00:50.506
And then the length which will be three
the capacity which is gonna be at least

16
00:00:50.506 --> 00:00:52.550
three but might be bigger than that.

17
00:00:52.550 --> 00:00:55.158
In this case the vec macro will
set the capacity to be three but

18
00:00:55.158 --> 00:00:57.320
these things are going to
live on the actual heap.

19
00:00:58.410 --> 00:01:02.591
Okay, so let's talk a little bit
more specifically about that he

20
00:01:02.591 --> 00:01:05.260
bookkeeping that we were talking about.

21
00:01:06.330 --> 00:01:11.075
So basically whenever the vec macro gets
run it calls a function called alloc which

22
00:01:11.075 --> 00:01:13.180
is short for allocate.

23
00:01:13.180 --> 00:01:19.000
You may hear the term allocation used to
refer to like sort of reserving memory.

24
00:01:19.000 --> 00:01:21.910
Allocation can refer to the stack or
the heap but typically speaking,

25
00:01:21.910 --> 00:01:25.313
whenever people talk about allocations
if they're not more specific than that,

26
00:01:25.313 --> 00:01:27.880
they usually mean heap allocations.

27
00:01:27.880 --> 00:01:30.570
It's a common technique in
performance optimization to say,

28
00:01:30.570 --> 00:01:33.973
reduce allocations and when people say
that they mean reduced heap allocations

29
00:01:33.973 --> 00:01:35.830
cuz they can be kinda expensive.

30
00:01:35.830 --> 00:01:39.747
This alloc function actually takes a non
trivial amount of time to run depending on

31
00:01:39.747 --> 00:01:41.860
like what's been going on in your program.

32
00:01:43.620 --> 00:01:47.995
So basically what its job is to say find
three unused heat bytes in a row and

33
00:01:47.995 --> 00:01:49.230
mark them as in use.

34
00:01:50.280 --> 00:01:54.541
So when this happens, this is not
something that's built into the hardware.

35
00:01:54.541 --> 00:01:57.290
Like the computer does not have
a concept of a stack or a heap.

36
00:01:57.290 --> 00:02:01.038
It just has ones and zeros and
instructions for doing like arithmetic and

37
00:02:01.038 --> 00:02:02.031
things like that.

38
00:02:02.031 --> 00:02:03.506
So when you run this function,

39
00:02:03.506 --> 00:02:06.131
it's actually running a non
trivial amount of logic.

40
00:02:06.131 --> 00:02:08.560
It's got an actual data
structure in memory.

41
00:02:08.560 --> 00:02:12.359
This alloc function does like a global
data structure that's storing these

42
00:02:12.359 --> 00:02:16.120
indices of which things are available and
which things are in use.

43
00:02:16.120 --> 00:02:19.103
When you call it,
it's actually doing work to traverse

44
00:02:19.103 --> 00:02:22.465
this data structure like it's
like a potentially a big tree and

45
00:02:22.465 --> 00:02:26.090
actually find out where
the next available thing is.

46
00:02:26.090 --> 00:02:27.920
Especially when you get
into concurrency and stuff.

47
00:02:27.920 --> 00:02:31.952
This can be quite time consuming,
so let's say that it comes back,

48
00:02:31.952 --> 00:02:36.000
alloc returns it says okay,
I found three unused e bytes in a row.

49
00:02:36.000 --> 00:02:37.021
Great, here they are.

50
00:02:37.021 --> 00:02:40.860
I'm going to mark them in my
alloc data structure as in use.

51
00:02:40.860 --> 00:02:44.600
So next time you ask me I'll remember
not to give you these things.

52
00:02:44.600 --> 00:02:47.708
But there's a reasonable question
to ask here which is okay,

53
00:02:47.708 --> 00:02:50.930
how does it know when
they're no longer in use?

54
00:02:50.930 --> 00:02:54.608
I guess one of the important points of
this bookkeeping system is we ask it for

55
00:02:54.608 --> 00:02:56.730
three bytes that are not in use.

56
00:02:56.730 --> 00:02:59.794
Okay, fine when I call alloc
it marks them as in use, but

57
00:02:59.794 --> 00:03:03.600
how does it know when to mark
them as no longer in use?

58
00:03:03.600 --> 00:03:05.706
So this is not a problem
that we had on the stack,

59
00:03:05.706 --> 00:03:08.818
on the stack we just had that stack
length that gets higher and lower and

60
00:03:08.818 --> 00:03:11.670
then that's sort of how you
know as you call the function.

61
00:03:11.670 --> 00:03:13.402
Once the function is over, well,

62
00:03:13.402 --> 00:03:17.450
we can move the stack back on all
the remaining bytes become garbage.

63
00:03:17.450 --> 00:03:19.540
But on the heap, it's different.

64
00:03:19.540 --> 00:03:24.280
On the heap, the question of when is this
thing no longer in use is non trivial.

65
00:03:24.280 --> 00:03:25.390
It's it's not obvious.

66
00:03:26.800 --> 00:03:30.060
Well, this is where we get into
the concept of manual memory management.

