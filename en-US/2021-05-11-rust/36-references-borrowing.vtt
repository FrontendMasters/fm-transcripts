WEBVTT

1
00:00:00.190 --> 00:00:03.396
So first we're gonna talk about references
and how they interact with borrowing,

2
00:00:03.396 --> 00:00:06.020
they're gonna talk about mutable
references and finally slices.

3
00:00:07.270 --> 00:00:12.262
Okay, so, we talked about previously we
had our example of printing years function

4
00:00:12.262 --> 00:00:16.131
which takes years and then we iterate
through each of the years and

5
00:00:16.131 --> 00:00:17.700
at the end to deallocate.

6
00:00:17.700 --> 00:00:19.740
Years because yours is not returned.

7
00:00:19.740 --> 00:00:21.687
And we talked about how this is a problem,

8
00:00:21.687 --> 00:00:25.136
because if I want to call print yours
twice in a row passing the same years,

9
00:00:25.136 --> 00:00:28.280
I Got a compiler error,
specifically a use after move error.

10
00:00:28.280 --> 00:00:31.465
And we talked about how,
one way we can fix this is with clone and

11
00:00:31.465 --> 00:00:34.592
what we could do is with this,
returning the the vec, just for

12
00:00:34.592 --> 00:00:36.605
purposes of satisfying the compiler.

13
00:00:36.605 --> 00:00:38.990
Here's another way we can fix it.

14
00:00:38.990 --> 00:00:43.880
Loop, we just add three ampersands on the
screen, which are highlighted in hot pink.

15
00:00:45.250 --> 00:00:47.290
So this actually also solves it and
it makes it so

16
00:00:47.290 --> 00:00:49.850
that, this compiles and runs and
everything works great.

17
00:00:49.850 --> 00:00:50.982
There's no cloning,

18
00:00:50.982 --> 00:00:55.310
there's no need to return like those
extra do that sort of returning dance.

19
00:00:55.310 --> 00:00:59.497
This is sort of the solution to
the problem that we had in the previous

20
00:00:59.497 --> 00:01:00.236
exercise.

21
00:01:00.236 --> 00:01:03.216
Okay, so what's going on here,
let's talk about it.

22
00:01:03.216 --> 00:01:04.910
A couple things are going on.

23
00:01:04.910 --> 00:01:06.550
So first, let's look at this thing.

24
00:01:06.550 --> 00:01:10.280
This right here inside this box,
is a new type that we haven't seen before.

25
00:01:10.280 --> 00:01:13.480
This is called a reference type and
it begins with an ampersand.

26
00:01:13.480 --> 00:01:17.785
So this is not a vec of i32, is rather
it is a reference to a vec of i32s, and

27
00:01:17.785 --> 00:01:20.860
we'll talk about the rules
behind references later.

28
00:01:23.700 --> 00:01:27.115
So, a reference,
is basically something that says,

29
00:01:27.115 --> 00:01:31.330
I want to have access to this thing,
but I don't actually own it.

30
00:01:31.330 --> 00:01:35.000
I'm not going to clean it up,
I'm just going to look at it.

31
00:01:35.000 --> 00:01:37.911
So, access to it but
not ownership means, something

32
00:01:37.911 --> 00:01:42.840
different than ownership especially
when it comes to deallocating memory.

33
00:01:42.840 --> 00:01:46.600
So here's another, a really common
example of reference you can find.

34
00:01:46.600 --> 00:01:48.830
In this case we have ampersand self.

35
00:01:48.830 --> 00:01:51.010
So this is a reference to self.

36
00:01:51.010 --> 00:01:54.376
And this is what you see inside
the length function of vectors

37
00:01:54.376 --> 00:01:58.470
as well as strings as well as
other data structures like that.

38
00:01:58.470 --> 00:02:01.520
And basically it says, hey,
when you're asking me for my lenth,

39
00:02:01.520 --> 00:02:05.388
that's not like transferring ownership,
I'm not saying I'm gonna delete self,

40
00:02:05.388 --> 00:02:08.400
I'm gonna deallocate it after
I'm done telling you the length.

41
00:02:08.400 --> 00:02:10.530
Of course not, that would be ridiculous.

42
00:02:10.530 --> 00:02:13.835
Instead, what it's gonna say is, yeah,
just give me a reference to self,

43
00:02:13.835 --> 00:02:16.896
I'll go look at it, and figure out
what its length is and return that.

44
00:02:16.896 --> 00:02:20.172
And then, we're not going to do anything
having to do with who's responsible for

45
00:02:20.172 --> 00:02:21.274
deallocating this thing.

46
00:02:21.274 --> 00:02:23.839
The caller is still just as
responsible as before, or

47
00:02:23.839 --> 00:02:27.267
the original owner is still responsible
for deallocating this thing.

48
00:02:27.267 --> 00:02:29.933
I just want to take a look at it and
then whoever,

49
00:02:29.933 --> 00:02:34.746
was originally going to deallocate it,
they're still responsible for doing that.

50
00:02:34.746 --> 00:02:39.526
Yeah, so this is a reference to a vec i32,
this is a reference to a self.

51
00:02:39.526 --> 00:02:43.772
So basically, you can think of what is
happening here with this ampersand and

52
00:02:43.772 --> 00:02:48.296
here is it saying, hey, I temporarily want
to give print years access two years.

53
00:02:48.296 --> 00:02:51.853
And ampersand years in this case where
we're outside of the type signature,

54
00:02:51.853 --> 00:02:53.950
we're inside an actual value.

55
00:02:53.950 --> 00:02:55.880
This is basically called a borrow.

56
00:02:55.880 --> 00:02:58.800
So I'm saying I want to borrow years.

57
00:02:58.800 --> 00:03:03.170
So the metaphor years, it's not a perfect
metaphor, but, it's basically the concept

58
00:03:03.170 --> 00:03:06.390
of like, okay, I have this thing,
and I'm not giving it to you.

59
00:03:06.390 --> 00:03:08.410
I'm not transferring
ownership from me to you.

60
00:03:08.410 --> 00:03:09.900
I'm just letting you borrow it.

61
00:03:09.900 --> 00:03:12.310
So I'm still responsible for
it, it's still mine.

62
00:03:12.310 --> 00:03:14.337
And you're going to give it
back to me at some point,

63
00:03:14.337 --> 00:03:16.382
there's sort of an implicit
understanding there.

64
00:03:16.382 --> 00:03:23.120
But I am [COUGH] temporarily allowing you
to have access to it, you can borrow it.

65
00:03:23.120 --> 00:03:26.871
So, when we write it like this,
what we're basically saying is, okay,

66
00:03:26.871 --> 00:03:29.894
when I call print years,
not going to transfer ownership,

67
00:03:29.894 --> 00:03:32.830
main is still responsible for
main still owns years.

68
00:03:32.830 --> 00:03:35.490
Which means main is still responsible for
deallocating it.

69
00:03:35.490 --> 00:03:37.766
We're just handing temporary ownership,
sorry,

70
00:03:37.766 --> 00:03:40.360
we're handing temporary reference to it,
to print here.

71
00:03:40.360 --> 00:03:45.575
So print yours is able to do some things
with it, but not necessarily everything.

72
00:03:45.575 --> 00:03:49.369
So, in the context of this use
after move compiler that we saw,

73
00:03:49.369 --> 00:03:52.675
the reason that this is called
a borrow checker error.

74
00:03:52.675 --> 00:03:56.990
Is because typically, this is like
the this sort of checking to see if all

75
00:03:56.990 --> 00:04:01.260
the borrows are done properly,
is kind of the the uniquely rust thing.

76
00:04:01.260 --> 00:04:03.560
This is the thing that you don't
really find in other languages.

77
00:04:03.560 --> 00:04:07.149
So it's colloquially called the borrow
checker even though it also has to do with

78
00:04:07.149 --> 00:04:11.300
ownership errors, or as we'll see in
the next section, lifetime errors.

79
00:04:11.300 --> 00:04:14.795
One really important thing to know about
the borrow checker is you can't turn it

80
00:04:14.795 --> 00:04:16.950
off, I mentioned this because,
it's a thing.

81
00:04:16.950 --> 00:04:20.370
It's a common misconception that people
say, Rust has this borrow checker.

82
00:04:20.370 --> 00:04:24.480
But don't worry, you can turn it off
using this keyword called unsafe.

83
00:04:24.480 --> 00:04:26.350
False, that is absolutely not true.

84
00:04:26.350 --> 00:04:30.585
In fact, it is so false that you can't
turn off the borrow checker in Rust,

85
00:04:30.585 --> 00:04:34.012
is the exact title of a blog post,
by a Rust core team member,

86
00:04:34.012 --> 00:04:38.500
who wrote this entire blog post,
in order to try and dispel this myth.

87
00:04:38.500 --> 00:04:40.230
There is no way to drop
the borrow checker.

88
00:04:40.230 --> 00:04:43.980
When you see an error like this, you got
to figure out some way to deal with it,

89
00:04:43.980 --> 00:04:47.271
either by using clone or by using
return or by introducing a borrow or

90
00:04:47.271 --> 00:04:48.390
something like that.

91
00:04:48.390 --> 00:04:50.720
There is no way to get
around these things.

92
00:04:50.720 --> 00:04:54.704
So really important to note, that's why
we're learning this [LAUGH] because, when

93
00:04:54.704 --> 00:04:58.480
you encounter an error like this, you got
to figure out some way to deal with it.

