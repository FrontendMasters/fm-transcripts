WEBVTT

1
00:00:00.210 --> 00:00:02.040
So here I have a mutable vector.

2
00:00:02.040 --> 00:00:06.694
So a vector by 30 twos, so
in this case, just 9090 9095 and

3
00:00:06.694 --> 00:00:10.530
here I have a mutable
reference to a vector.

4
00:00:10.530 --> 00:00:15.245
So this ampersand Mutt is basically
saying I want to get back a reference to

5
00:00:15.245 --> 00:00:19.040
a Vec and
I want to be able to mutate that Vec.

6
00:00:19.040 --> 00:00:22.624
So normally references are sort of
look but don't touch there they're

7
00:00:22.624 --> 00:00:26.149
immutable references which means you
can borrow this thing you need to

8
00:00:26.149 --> 00:00:30.420
give it back to me in exactly
the same condition that you found it.

9
00:00:30.420 --> 00:00:33.039
Mutable references kind of stretch
the metaphor a little bit because

10
00:00:33.039 --> 00:00:35.704
basically saying like, well,
I'm gonna lend this thing to you, and

11
00:00:35.704 --> 00:00:38.580
you can give it back to me, but
it's okay if it's different.

12
00:00:38.580 --> 00:00:42.701
So maybe the metaphor might be, I'm going
to lend you something where once you use

13
00:00:42.701 --> 00:00:44.860
it, it's going to be changed in some way.

14
00:00:44.860 --> 00:00:45.630
And when you give it back,

15
00:00:45.630 --> 00:00:48.660
I understand that it's gonna be a little
bit different than how I gave it to you.

16
00:00:48.660 --> 00:00:53.361
Whereas the traditional immutable
bar is like I expect to be getting

17
00:00:53.361 --> 00:00:55.430
back exactly what I gave you.

18
00:00:55.430 --> 00:00:59.320
An example of a function where
this comes up is the clear method.

19
00:00:59.320 --> 00:01:03.240
So clear is a method that says I wanna
take a vec and I wanna just empty it out.

20
00:01:03.240 --> 00:01:06.210
I want to throw away all
the elements that were inside of it.

21
00:01:06.210 --> 00:01:08.960
Now clear does not take
ownership of this vec.

22
00:01:08.960 --> 00:01:10.850
It says once you call it like,
yeah, it's a problem.

23
00:01:10.850 --> 00:01:12.740
I've emptied it out, but you still own it.

24
00:01:12.740 --> 00:01:15.176
No big deal.
You can still use mutable years after

25
00:01:15.176 --> 00:01:16.850
calling clear on it.

26
00:01:16.850 --> 00:01:17.830
Because it's a reference.

27
00:01:17.830 --> 00:01:19.492
It's just saying,

28
00:01:19.492 --> 00:01:25.320
I want to give this method
a reference to my mute my years vec.

29
00:01:25.320 --> 00:01:27.070
And it's gonna give it
back to me afterwards.

30
00:01:27.070 --> 00:01:31.760
It's not, I'm not transferring
over deallocated I'm gonna give us

31
00:01:31.760 --> 00:01:35.971
sort of an elevated level of not
only can you look at this thing,

32
00:01:35.971 --> 00:01:38.850
changes to it, you're free to mutate it.

33
00:01:38.850 --> 00:01:41.000
What's the difference?

34
00:01:42.350 --> 00:01:47.292
And this is exactly the type that you'll
find in the definition of clear it

35
00:01:47.292 --> 00:01:51.038
says fn clear and
then it says &amp;mut self so instead of and

36
00:01:51.038 --> 00:01:55.380
set self.and then inside there,
set self length to zero.

37
00:01:55.380 --> 00:01:58.358
So you can contrast this
with a function like length,

38
00:01:58.358 --> 00:02:01.082
which only takes a immutable
reference to self.

39
00:02:01.082 --> 00:02:05.930
So when you're reading rust documentation,
you'll encounter both of these things

40
00:02:05.930 --> 00:02:09.836
like you'll see some Methods like
Len which takes ampersand self and

41
00:02:09.836 --> 00:02:13.354
you'll encounter things like
clear which takes ampersand.

42
00:02:13.354 --> 00:02:17.518
But self whether or not you want them it's
kind of similar to lead versus lead but

43
00:02:17.518 --> 00:02:21.200
knowing that something can't mutate
it is potentially beneficial.

44
00:02:22.280 --> 00:02:26.909
Of note though, there is one important
difference between Mutable references and

45
00:02:26.909 --> 00:02:31.170
immutable references that does
not come up with let and let mut.

46
00:02:31.170 --> 00:02:33.945
So, let's say that I wanted
to add additional call,

47
00:02:33.945 --> 00:02:37.290
let's say I had all three of these
pc's laser codes right here.

48
00:02:37.290 --> 00:02:41.474
So, I had years which is [INAUDIBLE] then
I had mutable years which is mutable

49
00:02:41.474 --> 00:02:45.726
reference to this Then right after that
I said I wanna call them mutable years

50
00:02:45.726 --> 00:02:46.270
dot Len.

51
00:02:47.380 --> 00:02:51.086
Well, believe it or not, that would
not compile because mutable references

52
00:02:51.086 --> 00:02:54.520
have additional restrictions that
immutable references do not have.

53
00:02:55.670 --> 00:02:58.470
So let's say that I wrote this right here.

54
00:02:58.470 --> 00:03:02.914
So I said yours is vec of 1999 in 2005
then I said, let yours ref one is

55
00:03:02.914 --> 00:03:07.460
a normal reference to this like
we've seen in the previous section.

56
00:03:07.460 --> 00:03:11.230
And then I said years ref two
is an old reference, no problem.

57
00:03:11.230 --> 00:03:12.140
That's all well and good.

58
00:03:12.140 --> 00:03:17.430
You can have as many immutable references
to something as you want at the same time.

59
00:03:17.430 --> 00:03:19.600
But with mutable references,
that's not true.

60
00:03:19.600 --> 00:03:24.505
The rules are a little bit different with
mutable references you can only have

61
00:03:24.505 --> 00:03:26.990
one mutable reference at a time.

62
00:03:26.990 --> 00:03:30.724
And furthermore, if you have one mutable
reference for the active that is to say

63
00:03:30.724 --> 00:03:35.350
still in scope, you're not allowed to have
any immutable references at the same time.

64
00:03:35.350 --> 00:03:38.555
So if you try to do this, you'll get
an error saying I can't borrow this as

65
00:03:38.555 --> 00:03:41.190
mutable because it's not
declared as mutable.

66
00:03:41.190 --> 00:03:45.480
So in order to do ampersand mud on yours,
yours has to be defined using let mud.

67
00:03:46.540 --> 00:03:48.650
Okay, so let's say I fix that great.

68
00:03:48.650 --> 00:03:51.020
Now I can define my years to no problem.

69
00:03:51.020 --> 00:03:54.179
But if I try to do years three
with another mutable reference to

70
00:03:54.179 --> 00:03:55.029
the same thing,

71
00:03:55.029 --> 00:03:59.670
I'll get an error saying can I borrow
yours as mutable more than once at a time.

72
00:03:59.670 --> 00:04:01.270
So it says here's
the first mutable borrow.

73
00:04:01.270 --> 00:04:02.570
And then here's the second mutable bar.

74
00:04:02.570 --> 00:04:04.235
So again, in the same scope,

75
00:04:04.235 --> 00:04:07.540
we cannot have these these sort
of active at the same time.

76
00:04:07.540 --> 00:04:10.596
First one of them needs to go out of
scope and no longer be accessible, and

77
00:04:10.596 --> 00:04:12.720
then the second one is allowed to happen.

78
00:04:12.720 --> 00:04:13.760
We'll talk about why in a second.

79
00:04:15.480 --> 00:04:17.944
And then similarly if you
have an immutable borrow,

80
00:04:17.944 --> 00:04:21.920
you can't have any mutable borrows this is
not gonna work says cannot borrow yours as

81
00:04:21.920 --> 00:04:24.940
mutable because it is also
borrowed as immutable.

82
00:04:24.940 --> 00:04:28.580
So here's the immutable borrow ampersand
yours and here's the mutable borrow.

83
00:04:28.580 --> 00:04:31.920
So we're getting a healthy dose of
borrow checker errors right here.

84
00:04:31.920 --> 00:04:34.340
These are the types of things
you can encounter in the wild.

85
00:04:34.340 --> 00:04:36.060
When you're starting out with rust.

86
00:04:36.060 --> 00:04:38.582
And also doesn't help if you
switch them around, it's not,

87
00:04:38.582 --> 00:04:42.160
it's no help if you do the mutable
one first and then the immutable one.

88
00:04:42.160 --> 00:04:45.290
Again, cannot borrow is immutable
because it is also borrowed as mutable.

89
00:04:45.290 --> 00:04:47.651
So really, it's very strict about this,

90
00:04:47.651 --> 00:04:51.110
you can only have one mutable
reference active at a time.

91
00:04:51.110 --> 00:04:54.423
And then any number of, or
you can have any number of immutable ones,

92
00:04:54.423 --> 00:04:56.150
but they're mutually exclusive.

93
00:04:56.150 --> 00:04:57.810
It's either one mutable.

94
00:04:57.810 --> 00:05:01.440
Or any number of immutable,
but you can't mix and match.

95
00:05:01.440 --> 00:05:03.790
The reason for this is concurrency.

96
00:05:03.790 --> 00:05:08.224
So there's a whole category of bugs that
we're not going to get into here called

97
00:05:08.224 --> 00:05:09.340
data races.

98
00:05:09.340 --> 00:05:13.509
And these can happen in like C and c++ all
the time where basically you have multiple

99
00:05:13.509 --> 00:05:16.796
threads running in parallel and
they have some shared memory, and

100
00:05:16.796 --> 00:05:19.930
one of the threads writes to
that piece of shared memory.

101
00:05:19.930 --> 00:05:22.702
At the same time is another
thread is trying to read from it.

102
00:05:22.702 --> 00:05:25.928
And potentially what can happen is
that there's a race condition and

103
00:05:25.928 --> 00:05:29.100
one of these things gets partway
through reading the value in memory

104
00:05:29.100 --> 00:05:31.677
while the other one starts
writing in the middle of it.

105
00:05:31.677 --> 00:05:36.662
And you can get a totally great Garbled
value much like us after free and

106
00:05:36.662 --> 00:05:40.380
and double free data races
are extremely painful and

107
00:05:40.380 --> 00:05:43.276
difficult to reproduce and then debug.

108
00:05:43.276 --> 00:05:45.889
So they're they're really
really nasty stuff and

109
00:05:45.889 --> 00:05:49.290
the way that rust prevents them at
compile time by by ruling them out

110
00:05:49.290 --> 00:05:52.772
with its compiler Is exactly
the system where mutable references.

111
00:05:52.772 --> 00:05:54.938
You can only have one of
them active at a time,

112
00:05:54.938 --> 00:05:58.871
which basically means no matter how many
threads you've got going, the compiler

113
00:05:58.871 --> 00:06:02.700
will enforce that only one thread can
possibly have write access to something.

114
00:06:02.700 --> 00:06:05.753
And if it's writing, nobody else is
allowed to read it at the same time, or

115
00:06:05.753 --> 00:06:07.520
for that matter to write to it.

116
00:06:07.520 --> 00:06:09.910
So this is how rust prevents data races.

117
00:06:09.910 --> 00:06:12.410
We're not gonna get into rust
concurrency in this course, but

118
00:06:12.410 --> 00:06:14.958
I do wanna just take a second and
note this If you're wondering,

119
00:06:14.958 --> 00:06:17.835
why this restriction exist and
why you see this burrow checker errors?

120
00:06:17.835 --> 00:06:21.560
It' for concurrency, it's a way of
preventing data raises from happening.

121
00:06:21.560 --> 00:06:25.193
So, one of reasons claims to fame,
in comparison to see a c plus plus in

122
00:06:25.193 --> 00:06:29.000
particular, is that it has really
high performance concurrency.

123
00:06:29.000 --> 00:06:32.970
But it is able to roll out,
like to guarantee no data raises.

124
00:06:32.970 --> 00:06:33.510
And this is how.

125
00:06:34.510 --> 00:06:37.018
So we won't spend any more time talking
about concurrency though just so

126
00:06:37.018 --> 00:06:38.550
you know why those restrictions are there.

