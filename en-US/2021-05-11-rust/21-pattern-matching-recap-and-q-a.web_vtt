WEBVTT

1
00:00:00.580 --> 00:00:04.160
Cool so to review Part 3,
we talked about enums first.

2
00:00:04.160 --> 00:00:08.839
So here's an example of making
a custom enum called purple, so

3
00:00:08.839 --> 00:00:10.619
this is a custom color.

4
00:00:10.619 --> 00:00:13.407
We talked about how you need to have
this sort of namespace prefix before

5
00:00:13.407 --> 00:00:13.922
your enums.

6
00:00:13.922 --> 00:00:17.398
Which is true for almost all enums,
except for results in option,

7
00:00:17.398 --> 00:00:19.706
which are baked into the standard library.

8
00:00:19.706 --> 00:00:21.560
Talks about how to do pattern matching.

9
00:00:21.560 --> 00:00:23.480
So I could say match on
a particular color value.

10
00:00:23.480 --> 00:00:27.366
And then I could enumerate all
the different possibilities.

11
00:00:27.366 --> 00:00:29.463
Or if I wanted to,
I could leave some of them off, but

12
00:00:29.463 --> 00:00:31.531
then I wouldn't be able to
use it as an expression.

13
00:00:31.531 --> 00:00:35.409
Whenever I'm using it as an expression
because it needs to be able to know,

14
00:00:35.409 --> 00:00:39.920
what to assign that value 2, I do have to
enumerate all the different possibilities.

15
00:00:39.920 --> 00:00:42.976
And if I don't wanna enumerate all of
them, I can just put an underscore at

16
00:00:42.976 --> 00:00:45.960
the end, and then it'll fall
back into that default case.

17
00:00:45.960 --> 00:00:48.690
But here I'm pattern
matching on Color::Custom.

18
00:00:48.690 --> 00:00:51.087
And if it happens to be a custom variant,

19
00:00:51.087 --> 00:00:54.570
then I am extracting and
using de structuring syntax.

20
00:00:54.570 --> 00:00:58.819
To pull out this tuple of r, g and b, and
then I can just use those inside my branch

21
00:00:58.819 --> 00:01:02.010
here, like I would in any
normal conditional expression.

22
00:01:03.330 --> 00:01:07.193
We'll start about methods, so
here's a how I could call color dot rgb,

23
00:01:07.193 --> 00:01:10.043
and method style,
where things are now changeable,

24
00:01:10.043 --> 00:01:13.210
it's going to be using that
self inside the ample.

25
00:01:13.210 --> 00:01:17.498
Or I could use it in traditional style
where I just use :::rgb, which is

26
00:01:17.498 --> 00:01:22.360
basically just saying, I want to make use
of that input namespace for this method.

27
00:01:23.405 --> 00:01:25.535
Finally we talked about type parameters.

28
00:01:25.535 --> 00:01:28.065
So here's an example of using option.

29
00:01:28.065 --> 00:01:30.415
So in this case I'm
using option sharp but,

30
00:01:30.415 --> 00:01:34.554
because option is defined with a T type
parameter or a type parameter named T.

31
00:01:34.554 --> 00:01:39.093
It's possible for me to put any type that
I want inside of those angle brackets and

32
00:01:39.093 --> 00:01:40.825
have it still work.

33
00:01:40.825 --> 00:01:44.633
&gt;&gt; Might have missed this for
matching multiple times on a variant.

34
00:01:44.633 --> 00:01:51.638
How does it decide which one, to pattern
match, like, any shows in an example.

35
00:01:51.638 --> 00:01:55.043
&gt;&gt; So like if we had green in here
multiple times or something like that,

36
00:01:55.043 --> 00:01:57.580
okay, well,
I guess I can give a thorough answer.

37
00:01:57.580 --> 00:02:00.123
So, if I were to put green
in here multiple times,

38
00:02:00.123 --> 00:02:04.260
I would get a compiler error, saying that,
the second pattern is unreachable.

39
00:02:04.260 --> 00:02:07.060
It might actually just be a warning but
certainly, if I had green in

40
00:02:07.060 --> 00:02:10.150
here multiple times, only the first
one would actually get matched.

41
00:02:10.150 --> 00:02:12.426
Any ones below that would not get matched,
because it goes through and

42
00:02:12.426 --> 00:02:14.390
tries to match each of these in order.

43
00:02:14.390 --> 00:02:18.295
But, something that can happen and this is
a little bit advanced for this course is,

44
00:02:18.295 --> 00:02:20.990
in some cases, you can do stuff like,
:::custom, and

45
00:02:20.990 --> 00:02:24.090
then rather than just saying red here,
I could say like.

46
00:02:24.090 --> 00:02:27.866
Red;0, meaning I only want you to
match this branch if red is 0, and

47
00:02:27.866 --> 00:02:32.090
if red is specifically 0, then I want to
run this logic and then de structure,

48
00:02:32.090 --> 00:02:33.920
green and blue as normal.

49
00:02:33.920 --> 00:02:37.280
And then in that case,
I could have another ::custom variant,

50
00:02:37.280 --> 00:02:41.493
below this that had like red, green and
blue, defined like this, in which case,

51
00:02:41.493 --> 00:02:43.960
it would be all the variants
where red is not 0.

52
00:02:45.480 --> 00:02:49.017
So, those are basically all the different
scenarios you could have where,

53
00:02:49.017 --> 00:02:51.940
duplication either would or
wouldn't make sense.

54
00:02:51.940 --> 00:02:54.999
&gt;&gt; Is it possible to set
default values for those,

55
00:02:54.999 --> 00:03:00.290
like saying like red equals 0 or
red equals to 255 or something like that?

56
00:03:00.290 --> 00:03:02.700
&gt;&gt; Is it possible to set
default values for this.

57
00:03:02.700 --> 00:03:04.219
So when you're pattern matching,

58
00:03:04.219 --> 00:03:07.470
this is really about asking the question
of like what's actually in there.

59
00:03:08.520 --> 00:03:12.769
So, a default value wouldn't really work
in the sense that it's not really possible

60
00:03:12.769 --> 00:03:14.260
for it to be missing.

61
00:03:14.260 --> 00:03:18.040
If you do have custom then like, red,
green and blue have to be there.

62
00:03:18.040 --> 00:03:21.020
And if you have yellow or green, there
is no such thing as red, green and blue.

63
00:03:21.020 --> 00:03:24.411
So if you wanted to, I guess you could
define like default values in these

64
00:03:24.411 --> 00:03:28.390
branches, but yeah,
this one it wouldn't really do anything.

65
00:03:28.390 --> 00:03:32.170
&gt;&gt; I believe you said,
there's no prototyping in Rust, correct?

66
00:03:32.170 --> 00:03:35.902
&gt;&gt; Yeah, so Rust does not have,
like prototypes in the sense that like

67
00:03:35.902 --> 00:03:39.310
JavaScript does also doesn't
have classes or inheritance.

68
00:03:41.300 --> 00:03:44.896
&gt;&gt; So if you were to ever define an enum,

69
00:03:44.896 --> 00:03:49.850
you made a variable that
uses a node as a check.

70
00:03:49.850 --> 00:03:53.946
You wouldn't be able to add extra
functionality like a custom method,

71
00:03:53.946 --> 00:03:58.030
after you've already initiated it,
have that available.

72
00:03:58.030 --> 00:04:01.930
&gt;&gt; Yeah, so question is like once you make
an enum, you define an info on it or for

73
00:04:01.930 --> 00:04:03.490
structure that matter.

74
00:04:03.490 --> 00:04:06.390
There's no way to add additional
methods on to it after the fact.

75
00:04:07.850 --> 00:04:12.580
There actually is, which that's
basically what you use traits for.

76
00:04:12.580 --> 00:04:15.848
It doesn't do it with inheritance,
but there is,

77
00:04:15.848 --> 00:04:18.280
a way to do that, [LAUGH] essentially.

