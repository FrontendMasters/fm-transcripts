WEBVTT

1
00:00:00.090 --> 00:00:02.271
So once again,
we're calling some product and

2
00:00:02.271 --> 00:00:05.551
average to replace these equals zero
values here without using clone.

3
00:00:05.551 --> 00:00:07.450
Or changing what these functions return.

4
00:00:07.450 --> 00:00:10.736
So we're not going to use any of the
techniques we learned in part five with

5
00:00:10.736 --> 00:00:12.300
the ownership tricks.

6
00:00:12.300 --> 00:00:15.935
What we're going to do is we're going
to just do this using references.

7
00:00:15.935 --> 00:00:19.054
Now here, we've actually taken
this a little bit further, and

8
00:00:19.054 --> 00:00:21.670
we're making things a little
bit more complicated.

9
00:00:21.670 --> 00:00:23.612
So we also have these things
called other numbers,

10
00:00:23.612 --> 00:00:25.730
which is like another vector of numbers.

11
00:00:25.730 --> 00:00:29.731
And we're making a tuple of slice one and
slice two, which calls this thing

12
00:00:29.731 --> 00:00:33.900
called first three, which takes
a slice of the first three numbers.

13
00:00:33.900 --> 00:00:37.462
From numbers one as well as numbers to,
sorry,

14
00:00:37.462 --> 00:00:40.780
from numbers as well as other numbers.

15
00:00:40.780 --> 00:00:43.590
So this is a case where we're actually
going to end up with multiple

16
00:00:43.590 --> 00:00:45.096
different lifetimes coexisting,

17
00:00:45.096 --> 00:00:47.820
which is exactly why we're going
to take more time for this one.

18
00:00:48.970 --> 00:00:52.070
So, some products in average,
those are gonna be familiar from before.

19
00:00:52.070 --> 00:00:54.470
We know exactly what to do
to modify those things.

20
00:00:54.470 --> 00:00:56.830
But, this is kind of the the new stuff.

21
00:00:56.830 --> 00:01:01.254
So these first three function, its whole
job is to grab the first three numbers and

22
00:01:01.254 --> 00:01:03.573
a slice out of numbers one and
numbers two.

23
00:01:03.573 --> 00:01:06.730
And then return rather than
returning vexed like this.

24
00:01:06.730 --> 00:01:09.950
We wanna actually return two slices.

25
00:01:09.950 --> 00:01:14.642
And because these are potentially gonna
have interesting lifetime stuff, we're

26
00:01:14.642 --> 00:01:19.410
gonna need to use the lifetime annotations
for this here's a couple of tips on this.

27
00:01:19.410 --> 00:01:21.660
So here's a slice with
lifetime added annotation.

28
00:01:21.660 --> 00:01:22.220
And also,

29
00:01:22.220 --> 00:01:26.880
here's some tips on how to introduce
lifetime annotations to this function.

30
00:01:26.880 --> 00:01:28.660
There's a couple of different
ways to solve this one.

31
00:01:28.660 --> 00:01:30.852
And I realized that
lifetimes are like a syntax,

32
00:01:30.852 --> 00:01:34.380
you really are not going to find
it any other language but rust.

33
00:01:34.380 --> 00:01:38.440
So again, we'll take an extra give
you some extra time on this one and

34
00:01:38.440 --> 00:01:40.820
then go through the solutions as usual.

