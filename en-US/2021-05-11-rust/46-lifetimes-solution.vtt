WEBVTT

1
00:00:00.120 --> 00:00:02.196
So once again,
we have somewhat of a choice to make here.

2
00:00:02.196 --> 00:00:06.894
We definitely are going to need
to make some product an average,

3
00:00:06.894 --> 00:00:10.030
take either slices or vector references.

4
00:00:10.030 --> 00:00:15.552
I'm gonna start by just
doing References and

5
00:00:15.552 --> 00:00:21.369
now I should be able to
call some of numbers.

6
00:00:21.369 --> 00:00:24.445
But of course that's not gonna
compile because I need to borrow it.

7
00:00:24.445 --> 00:00:29.798
So I can do it like that and
then product ampersand numbers,

8
00:00:29.798 --> 00:00:35.700
not double ampersand and
finally average of ampersand numbers.

9
00:00:35.700 --> 00:00:40.117
Okay, next we want to
go look at this first

10
00:00:40.117 --> 00:00:44.790
three function which
is going to take some,

11
00:00:44.790 --> 00:00:51.500
either a slice of ice 64 or
a reference to a vector of ice 64.

12
00:00:51.500 --> 00:00:52.470
And then is gonna return a slice.

13
00:00:52.470 --> 00:00:54.639
So let's start by having it work that way.

14
00:00:54.639 --> 00:00:59.541
Now notice, by the way that
when we call first three we're

15
00:00:59.541 --> 00:01:03.154
potentially giving it an own copy of this.

16
00:01:03.154 --> 00:01:06.440
So if we want, we don't necessarily
need to make any change here.

17
00:01:06.440 --> 00:01:10.872
If we want, we can just like leave this
alone and just have it pass in the own

18
00:01:10.872 --> 00:01:15.448
value, but that is a little bit more
restrictive in the sense that we are just

19
00:01:15.448 --> 00:01:19.339
returning slices here so
we don't necessarily need to do that.

20
00:01:19.339 --> 00:01:22.007
But as we'll see in a second,
if I try to do it this way,

21
00:01:22.007 --> 00:01:25.545
it actually makes it a little bit more
annoying and complicated to try and

22
00:01:25.545 --> 00:01:28.166
express how we're gonna be
returning these slices.

23
00:01:28.166 --> 00:01:29.141
And in fact,

24
00:01:29.141 --> 00:01:35.185
it's gonna cause a problem when I change
the return type to try to return a slice.

25
00:01:35.185 --> 00:01:37.946
So let's just see that problem and
actually, then we'll solve it.

26
00:01:37.946 --> 00:01:40.586
Okay, so we will return two slices
one contain the first three elements

27
00:01:40.586 --> 00:01:43.404
in numbers one, the other contain
the first three elements, numbers two.

28
00:01:43.404 --> 00:01:44.896
So here's the syntax for doing that.

29
00:01:44.896 --> 00:01:48.341
So I'm just gonna say let
slice one equals that.

30
00:01:48.341 --> 00:01:53.260
And so that's gonna be numbers one and
then this is gonna be numbers two.

31
00:01:53.260 --> 00:01:55.875
And this is gonna be slice two.

32
00:01:55.875 --> 00:01:58.537
All right, so we have two slices now,
so far so good.

33
00:01:58.537 --> 00:02:00.103
And now I want to return them.

34
00:02:00.103 --> 00:02:03.556
So let's see what happens when
I go to return these slices.

35
00:02:03.556 --> 00:02:08.160
So instead of numbers one or numbers two,
I'm now returning slice one and slice two.

36
00:02:08.160 --> 00:02:11.162
Okay, well immediately
we're gonna have a problem,

37
00:02:11.162 --> 00:02:14.098
which is a type mismatch
because it's saying, hey,

38
00:02:14.098 --> 00:02:18.230
I expected a vac of Ice 64 because
that's what it says we're returning.

39
00:02:18.230 --> 00:02:21.820
But when I actually got was
a slice of ice 64, okay?

40
00:02:21.820 --> 00:02:26.515
Fair enough, so
let's change this to be returning slices.

41
00:02:32.581 --> 00:02:36.380
And now we have a new problem, which is
it says, hey, missing lifetime specify,

42
00:02:36.380 --> 00:02:39.961
this function has returned type contains
a borrowed value within the lighted

43
00:02:39.961 --> 00:02:43.120
lifetime, but the lifetime cannot
be derived from the arguments.

44
00:02:43.120 --> 00:02:47.213
So we wanna pause here and just imagine if
we hadn't just gone through this section

45
00:02:47.213 --> 00:02:49.361
on ownership, borrowing and lifetimes.

46
00:02:49.361 --> 00:02:51.316
What would you think
of this error message?

47
00:02:51.316 --> 00:02:55.061
Missing lifetime specifier this functions
return type contains a borrowed value

48
00:02:55.061 --> 00:02:58.859
within a lighted lifetime, with a lifetime
cannot be derived from the arguments,

49
00:02:58.859 --> 00:03:00.341
what could that possibly mean?

50
00:03:00.341 --> 00:03:04.210
Hopefully now you can see from this
error message, a why we spent so

51
00:03:04.210 --> 00:03:08.441
much time building up to this and b,
why the course gets into this stuff.

52
00:03:08.441 --> 00:03:11.873
These things can be incredibly frustrating
as a beginner if you have no idea what any

53
00:03:11.873 --> 00:03:13.058
of this terminology means.

54
00:03:13.058 --> 00:03:14.141
So the reason that I spent so

55
00:03:14.141 --> 00:03:17.296
much time in this course like building up
a mental model of how the memory works,

56
00:03:17.296 --> 00:03:20.404
and the purpose of each of these things
is, I don't expect you to have a perfect

57
00:03:20.404 --> 00:03:22.262
understanding of these
things by this point.

58
00:03:22.262 --> 00:03:24.573
But hopefully,
especially if you wanna go back and

59
00:03:24.573 --> 00:03:27.059
re-review some of the parts
of the workshop earlier.

60
00:03:27.059 --> 00:03:29.553
This gives you some sense
of what's going on here.

61
00:03:29.553 --> 00:03:33.604
So basically, what it's saying is hey, I
couldn't figure out what the lifetimes of

62
00:03:33.604 --> 00:03:36.651
these things could be,
I couldn't successfully allied them.

63
00:03:36.651 --> 00:03:38.731
So I need you to add a lifetime
specifier to do that.

64
00:03:38.731 --> 00:03:41.266
So that's what we're gonna have to do.

65
00:03:41.266 --> 00:03:44.292
We're gonna have to actually change
this to be not just ampersand but

66
00:03:44.292 --> 00:03:46.184
something like tick a and possibly tick b.

67
00:03:46.184 --> 00:03:49.823
So let's try it with tick a first and
see what happens, so it says okay,

68
00:03:49.823 --> 00:03:51.655
use of undeclared lifetime tick a.

69
00:03:51.655 --> 00:03:54.144
All right, fair enough I forgot to do
that let's just put that in there.

70
00:03:54.144 --> 00:03:56.314
Okay, great now we're doing this.

71
00:03:56.314 --> 00:03:59.610
So, I've now said okay,
these two slices have the same lifetime.

72
00:03:59.610 --> 00:04:02.268
These two slices that I'm
returning same lifetime.

73
00:04:02.268 --> 00:04:02.924
Great, but

74
00:04:02.924 --> 00:04:07.719
I've got an error it says cod return value
referencing function parameter numbers two

75
00:04:07.719 --> 00:04:11.348
returns a value referencing data
owned by the current function.

76
00:04:11.348 --> 00:04:13.333
So what does that mean?

77
00:04:13.333 --> 00:04:15.241
Data owned by the current function.

78
00:04:15.241 --> 00:04:19.314
Well, we've declared these
as owned arguments, right?

79
00:04:19.314 --> 00:04:22.586
I decided I wasn't gonna change
this to be a reference type, so

80
00:04:22.586 --> 00:04:23.901
this is now an owned vac.

81
00:04:23.901 --> 00:04:27.891
If I had an ampersand here, it would be
a reference but I didn't, so not there.

82
00:04:27.891 --> 00:04:30.064
[LAUGH] If I had an ampersand here,
it would be an owned vac.

83
00:04:30.064 --> 00:04:33.980
But I didn't do that instead,
I'm accepting an owned value.

84
00:04:33.980 --> 00:04:38.100
And one of the things we know about owned
values is if this function owns this vac,

85
00:04:38.100 --> 00:04:40.171
it's gonna get deallocated at the end.

86
00:04:40.171 --> 00:04:44.508
So here, this is receiving
from a use after free, right?

87
00:04:44.508 --> 00:04:46.663
So I'm trying to return
slices to this thing,

88
00:04:46.663 --> 00:04:49.151
but also I'm going to be
deallocating it by default,

89
00:04:49.151 --> 00:04:51.833
this would be a use after free but
instead it's a no, no.

90
00:04:51.833 --> 00:04:54.844
I Can't return a value
referencing this parameter

91
00:04:54.844 --> 00:04:59.605
because this references data owned by the
current function and owned by really is

92
00:04:59.605 --> 00:05:03.910
kind of translated into is going
to get de allocated at the end of.

93
00:05:03.910 --> 00:05:05.456
So that's what the error is telling us.

94
00:05:05.456 --> 00:05:09.864
It's saying these owned values are a
problem because [LAUGH] They're gonna get

95
00:05:09.864 --> 00:05:11.630
de allocated at the end here.

96
00:05:11.630 --> 00:05:12.191
So how do we fix that?

97
00:05:12.191 --> 00:05:15.150
Well, we don't make them owned,
we make them be references.

98
00:05:15.150 --> 00:05:18.822
Okay, so let's do that and
then go back to first three here and so

99
00:05:18.822 --> 00:05:21.814
now in order to pass those in,
I need to borrow them.

100
00:05:21.814 --> 00:05:25.114
Okay, that's why it was complaining
that there's a red squiggle there, so

101
00:05:25.114 --> 00:05:25.791
we fixed that.

102
00:05:25.791 --> 00:05:29.711
So now that type mismatch is fixed,
great, but now we come back and

103
00:05:29.711 --> 00:05:31.120
we have another error.

104
00:05:31.120 --> 00:05:35.258
Says explicit lifetime required in
the type of numbers one lifetime

105
00:05:35.258 --> 00:05:36.355
tick a required.

106
00:05:36.355 --> 00:05:40.013
This is an interesting example where
it figured out that it's like okay,

107
00:05:40.013 --> 00:05:42.790
I know that there should be
a lifetime annotation here.

108
00:05:42.790 --> 00:05:45.861
I need you to write it out but
I also know what it is, which is,

109
00:05:45.861 --> 00:05:47.447
[LAUGH] I know that it's tick a.

110
00:05:47.447 --> 00:05:50.752
This is kind of a weird case of the
example of like lifetime illusion where

111
00:05:50.752 --> 00:05:54.164
it's like it was able to figure out
what the lifetime should have been, but

112
00:05:54.164 --> 00:05:55.752
it still wants you to write it out.

113
00:05:55.752 --> 00:05:59.805
Again, imagine seeing this, [LAUGH] like
for the first time when you're a beginner,

114
00:05:59.805 --> 00:06:02.973
if you don't know what lifetimes are,
it can be kinda confusing.

115
00:06:02.973 --> 00:06:07.693
So all right, we're gonna add tick
a in both of these places, and hey,

116
00:06:07.693 --> 00:06:08.648
look at that.

117
00:06:08.648 --> 00:06:11.045
No more compile errors,
let's see what happens when we run it.

118
00:06:11.045 --> 00:06:14.264
Cool, first of all with a slice one,
R 2, 4 and 6,

119
00:06:14.264 --> 00:06:16.998
the first VM with slice, two R 1,2 and 3.

120
00:06:16.998 --> 00:06:18.726
Great everything worked.

121
00:06:18.726 --> 00:06:22.455
Now real quick, I want to point out this
is not the only way to solve solve this.

122
00:06:22.455 --> 00:06:25.167
There is another way we could do this,
which is if we wanted to,

123
00:06:25.167 --> 00:06:28.037
we could actually claim that these
two have decoupled lifetimes,

124
00:06:28.037 --> 00:06:30.158
I could add a second lifetime here and
say tick b.

125
00:06:30.158 --> 00:06:31.584
So let me try something
that's not gonna work.

126
00:06:31.584 --> 00:06:33.419
And then we'll see how
it's gonna not work.

127
00:06:33.419 --> 00:06:35.212
So let's say I added a tick b here.

128
00:06:35.212 --> 00:06:36.698
And I just said, you know what?

129
00:06:36.698 --> 00:06:40.227
Just this one has tick b says,
wait a minute.

130
00:06:40.227 --> 00:06:42.490
No, that's an error, what's the error?

131
00:06:42.490 --> 00:06:43.066
It says lifetime mismatch.

132
00:06:43.066 --> 00:06:46.568
[LAUGH] So basically it says this
parameter and the return type are declared

133
00:06:46.568 --> 00:06:50.025
with different lifetimes, but
data from numbers two is returned here.

134
00:06:50.025 --> 00:06:53.233
So basically I said this argument
has the lifetime tick b, but

135
00:06:53.233 --> 00:06:57.243
then I referenced it in slice two and try
to return that and then when over here I

136
00:06:57.243 --> 00:07:01.030
claimed that has the lifetime tick and
it's like no, no that's wrong.

137
00:07:01.030 --> 00:07:05.514
See these are connected this is a slice
of numbers two, numbers two has

138
00:07:05.514 --> 00:07:10.465
lifetime tick b, therefore slice two
also needs to have a lifetime of tick b.

139
00:07:10.465 --> 00:07:13.870
And sure enough, if I change this to that,
now it's happy again, and

140
00:07:13.870 --> 00:07:14.988
everything's cool.

141
00:07:14.988 --> 00:07:18.112
So what's the difference between
this version with tick a and

142
00:07:18.112 --> 00:07:21.307
tick b versus the version I had
a second ago were both are tick a?

143
00:07:21.307 --> 00:07:25.979
Well, basically this version that I have
here is sort of strictly more flexible,

144
00:07:25.979 --> 00:07:30.449
because this accepts more possibilities
than the other way that I have it where

145
00:07:30.449 --> 00:07:31.820
everything was today.

146
00:07:31.820 --> 00:07:34.196
Another way of saying this
is that here I'm saying,

147
00:07:34.196 --> 00:07:36.086
you can give me any numbers when you want.

148
00:07:36.086 --> 00:07:40.920
And FYI, I'm gonna return a tuple where
the first thing has the same lifetime as

149
00:07:40.920 --> 00:07:43.245
whatever you gave me for numbers one.

150
00:07:43.245 --> 00:07:46.218
Also, if you wanna give me something
with a totally different lifetime for

151
00:07:46.218 --> 00:07:47.407
numbers two, that's cool.

152
00:07:47.407 --> 00:07:51.064
Just FYI I'm going to return something in
the second position of the tuple that has

153
00:07:51.064 --> 00:07:53.671
the same lifetime as whatever
you give me for numbers two.

154
00:07:53.671 --> 00:07:57.246
In contrast, when I use tick a for
everything, I was actually saying that but

155
00:07:57.246 --> 00:08:00.986
something a little bit stronger than that,
which is I'm saying all of these have

156
00:08:00.986 --> 00:08:04.565
the same lifetime, but they don't
actually need to have the same lifetime.

157
00:08:04.565 --> 00:08:08.331
So I mentioned this because [LAUGH] This
is something I have run into before where

158
00:08:08.331 --> 00:08:12.385
sometimes I've been accidentally overly
strict in my lifetime annotations where I

159
00:08:12.385 --> 00:08:13.999
just went through and I was like.

160
00:08:13.999 --> 00:08:15.479
Yeah, okay, I'll tick a,

161
00:08:15.479 --> 00:08:19.378
tick a if you want some lifetime
annotations here have a bunch of tick a's.

162
00:08:19.378 --> 00:08:22.742
And then later on, I found that I couldn't
actually call it passing the things that

163
00:08:22.742 --> 00:08:25.835
I wanted to call because I'd been too
strict with my lifetime annotations.

164
00:08:25.835 --> 00:08:29.254
So, it can't be worth thinking about this.

165
00:08:29.254 --> 00:08:31.479
Especially if you run into errors
where it's saying like, hey,

166
00:08:31.479 --> 00:08:33.547
these things need to have
the same lifetime but they don't.

167
00:08:33.547 --> 00:08:36.644
Sometimes if you take a second look at it,
you can realize, you know what,

168
00:08:36.644 --> 00:08:38.325
actually they don't all need to be tick a.

169
00:08:38.325 --> 00:08:41.853
I can relax that a little bit and
say only these two are connected.

170
00:08:41.853 --> 00:08:44.820
These two are connected, but they
don't all have to be exactly the same.

