WEBVTT

1
00:00:00.000 --> 00:00:02.610
What benefits are there for
macros over functions?

2
00:00:02.610 --> 00:00:04.440
Honestly, it's mainly just
a matter of convenience.

3
00:00:04.440 --> 00:00:07.632
Because they let you do more things
than functions do functions,

4
00:00:07.632 --> 00:00:10.950
you give them the arguments, and
that's all they get to work with.

5
00:00:12.060 --> 00:00:14.684
For example, in this print line call,

6
00:00:14.684 --> 00:00:18.271
I'm giving it as many
different arguments as I want.

7
00:00:18.271 --> 00:00:23.094
I always have to give it the string
literal that it's going to be

8
00:00:23.094 --> 00:00:24.463
interpolating.

9
00:00:24.463 --> 00:00:26.659
And then I can give it as many
different arguments as I want.

10
00:00:26.659 --> 00:00:32.097
And at compile-time, rust is able to
turn these into other function calls.

11
00:00:32.097 --> 00:00:35.318
Normally, as we will see later on
when we define our own functions,

12
00:00:35.318 --> 00:00:38.840
when you define a rust function,
you have to fix the number of arguments.

13
00:00:38.840 --> 00:00:42.105
You can't say this can take as
many arguments as you want, so

14
00:00:42.105 --> 00:00:44.739
that's one of the things
that macros let you do.

15
00:00:44.739 --> 00:00:49.308
There are some other more advanced things
that we won't get into in this course that

16
00:00:49.308 --> 00:00:50.624
you can do with macros.

17
00:00:50.624 --> 00:00:54.705
But I guess the short answer is that
macros are sort of strictly more powerful

18
00:00:54.705 --> 00:00:57.085
than functions in every way except for
one.

19
00:00:57.085 --> 00:00:59.880
Which is that a function
you're allowed to pass around,

20
00:00:59.880 --> 00:01:02.161
you can have first-class
functions in rust.

21
00:01:02.161 --> 00:01:03.334
You cannot pass macros around.

22
00:01:03.334 --> 00:01:07.680
Because really what this exclamation point
is saying is at compile-time, the rust

23
00:01:07.680 --> 00:01:11.719
compiler is going to take this whole
statement right here, this whole line and

24
00:01:11.719 --> 00:01:15.815
break it down and run some code and
turn it into a series of function calls.

25
00:01:15.815 --> 00:01:19.780
So you can't really pass that around
because that's not really a thing it's

26
00:01:19.780 --> 00:01:23.257
just sort of like a way to let you
write something like syntax sugar at

27
00:01:23.257 --> 00:01:24.174
compile-time.

28
00:01:24.174 --> 00:01:27.294
&gt;&gt; Yeah, so are there performance
differences between macros versus

29
00:01:27.294 --> 00:01:28.094
functions?

30
00:01:28.094 --> 00:01:29.540
&gt;&gt; Great question.

31
00:01:29.540 --> 00:01:32.080
Are there performance differences
between macros versus functions?

32
00:01:32.080 --> 00:01:34.150
Yes at compile time but not at runtime.

33
00:01:34.150 --> 00:01:38.176
So, because a macro is just going to at
compile time the term is expanded it gets

34
00:01:38.176 --> 00:01:40.624
expanded into these
series of function calls.

35
00:01:40.624 --> 00:01:43.894
It's no different than if you'd written
those function calls by hand as far as

36
00:01:43.894 --> 00:01:45.780
runtime performance is concerned.

37
00:01:45.780 --> 00:01:48.640
But because it has to do that
expansion work at compile time,

38
00:01:48.640 --> 00:01:52.229
macros are one of the things that can
make your compile times longer in rust,

39
00:01:52.229 --> 00:01:56.070
depending on the complexity of the macro
and how many you're using and so forth.

40
00:01:57.650 --> 00:02:01.110
&gt;&gt; So using less macros would
make it compile faster.

41
00:02:01.110 --> 00:02:02.251
&gt;&gt; All else being equal, yeah.

42
00:02:02.251 --> 00:02:06.070
Using fewer macros would not
improve your compile times.

43
00:02:06.070 --> 00:02:10.118
But to be honest, that's not
a common remediation macros tend to,

44
00:02:10.118 --> 00:02:12.674
unless you're really using a lot of them,

45
00:02:12.674 --> 00:02:17.780
they tend not to be the main culprit
in compile times, in my experience.

46
00:02:17.780 --> 00:02:22.532
&gt;&gt; Questions around the point of
immutable variables I'm not sure

47
00:02:22.532 --> 00:02:25.084
if you want to get into that or not.

48
00:02:25.084 --> 00:02:26.613
&gt;&gt; I mean, the point of them is
essentially, it's just good programming

49
00:02:26.613 --> 00:02:28.254
practice to default to immutability
because they're less error-prone.

50
00:02:28.254 --> 00:02:32.778
If I didn't intend to
reassign this to x if

51
00:02:32.778 --> 00:02:37.057
I thought okay, x is defined this way.

52
00:02:37.057 --> 00:02:41.084
And if I have a whole big chunk of code
after this, I want to know whether or

53
00:02:41.084 --> 00:02:43.474
not x might be changing anywhere in there.

54
00:02:43.474 --> 00:02:46.225
And if I define it with let I can know,
yeah 100% confidence,

55
00:02:46.225 --> 00:02:49.839
there's no chance that this was changed
because the compiler wouldn't have let me.

56
00:02:49.839 --> 00:02:52.876
Whereas if I say let mut, I now have more
things to check because I can say, well,

57
00:02:52.876 --> 00:02:55.087
hang on, x could have changed
at any point in these steps.

58
00:02:55.087 --> 00:02:59.807
I need to sort of go audit that to try and
figure out what might have changed.

59
00:02:59.807 --> 00:03:03.528
&gt;&gt; You've talked about rust
being a static language, right?

60
00:03:03.528 --> 00:03:07.498
Because there's questions
around dynamic versus static.

61
00:03:07.498 --> 00:03:15.867
&gt;&gt; So yeah, so rust is definitely
a static type check language.

62
00:03:15.867 --> 00:03:17.498
There is a keyword called dyn, D-Y-N,
but it's relatively advanced use case,

63
00:03:17.498 --> 00:03:18.748
and we're not going to get into
it in the course of this course.

64
00:03:18.748 --> 00:03:23.200
But it doesn't really do what you
might guess based on the name if

65
00:03:23.200 --> 00:03:27.500
you're thinking about it in
terms of static versus dynamic.

66
00:03:27.500 --> 00:03:28.879
But yeah, like c plus plus or

67
00:03:28.879 --> 00:03:32.848
Java, Rust is just a type-checked language
there's no runtime dynamic types.

