WEBVTT

1
00:00:00.440 --> 00:00:06.350
So sack lifetime basically comes up when
we assign things to string literals.

2
00:00:06.350 --> 00:00:10.200
So, throughout the course of these
exercises we've been doing you may have

3
00:00:10.200 --> 00:00:14.051
seen something kind of surprising whenever
we had like a vector of strings or

4
00:00:14.051 --> 00:00:15.210
something like that.

5
00:00:15.210 --> 00:00:19.464
Which is that it didn't have string with
a capital S it had like ampersand STR like

6
00:00:19.464 --> 00:00:22.520
a string slice and you even wondering why.

7
00:00:22.520 --> 00:00:26.455
Well, that's because when I write this if
I wanted to actually annotate this thing

8
00:00:26.455 --> 00:00:28.040
fully, this is what it would be.

9
00:00:28.040 --> 00:00:33.340
It's ampersand, tick static, stir equals,
and then the string literal.

10
00:00:33.340 --> 00:00:36.570
So tick static is a special name.

11
00:00:36.570 --> 00:00:37.600
This is a reserved name.

12
00:00:37.600 --> 00:00:39.360
You're not allowed to name
your stuff tick static.

13
00:00:39.360 --> 00:00:41.385
You can choose any name you want
as long as it's not static.

14
00:00:41.385 --> 00:00:44.704
[LAUGH] When you're,
when you're making a lifetime parameter,

15
00:00:44.704 --> 00:00:47.192
because static has a special
1 in the language.

16
00:00:47.192 --> 00:00:51.040
And tick static means this is
the lifetime of the entire program.

17
00:00:52.100 --> 00:00:55.477
So things that have the static lifetime,
they don't get allocated and

18
00:00:55.477 --> 00:00:58.130
they don't get deallocated,
they just always exist.

19
00:00:58.130 --> 00:01:01.090
So you might be wondering like,
okay, but like where like they're in

20
00:01:01.090 --> 00:01:03.400
memory somewhere, but
like where are they in there?

21
00:01:03.400 --> 00:01:07.834
Memory and the answer is there in the
binary itself, so when you have a string.

22
00:01:07.834 --> 00:01:12.067
This is a really common performance
optimization like C does it rust does it

23
00:01:12.067 --> 00:01:14.157
like various other languages do it.

24
00:01:14.157 --> 00:01:18.505
When rust gets to this point in your code,
it needs to know that the letters s

25
00:01:18.505 --> 00:01:22.662
a m are needs to know about those
letters in order to put them somewhere.

26
00:01:22.662 --> 00:01:26.690
So one thing you could do is it could
write them down in the binary SAM.

27
00:01:26.690 --> 00:01:29.072
And then when it gets to this
line of code, it could say,

28
00:01:29.072 --> 00:01:32.830
okay, I'm gonna get heap allocation and
copy the S over the A over the M over.

29
00:01:32.830 --> 00:01:35.649
But really, it's like, Y bother,
it's already there in memory,

30
00:01:35.649 --> 00:01:39.150
like in the binary, the binary gets loaded
into memory when you run it because that's

31
00:01:39.150 --> 00:01:40.530
where all the instructions are.

32
00:01:40.530 --> 00:01:44.288
So, like, why bother copying it over into
the heap doing all that work when we can

33
00:01:44.288 --> 00:01:47.170
instead just like leave it
where it is in the binary?

34
00:01:47.170 --> 00:01:50.984
And just say that this is going to be
a reference directly to that memory inside

35
00:01:50.984 --> 00:01:52.940
the binary itself?

36
00:01:52.940 --> 00:01:53.830
Why not indeed.

37
00:01:53.830 --> 00:01:55.500
So that's exactly what it does.

38
00:01:55.500 --> 00:01:59.108
And the reason it's called the static
lifetime is because the binary is like on

39
00:01:59.108 --> 00:01:59.880
your hard disk.

40
00:01:59.880 --> 00:02:01.793
And so, for
the entire life of the program,

41
00:02:01.793 --> 00:02:03.830
that binary is going to
be loaded into memory.

42
00:02:03.830 --> 00:02:07.740
So there's really no need to allocate or
deallocate anything.

43
00:02:07.740 --> 00:02:11.255
It's also not going on the stack because,
it operates more or

44
00:02:11.255 --> 00:02:13.226
less like a heap allocated thing.

45
00:02:13.226 --> 00:02:17.171
And that we will have submitted
data structure that's going to have

46
00:02:17.171 --> 00:02:20.640
the index into the,
what would ordinarily be heap memory.

47
00:02:21.710 --> 00:02:25.876
And basically this is just a way
to say this lives forever, so

48
00:02:25.876 --> 00:02:31.860
titanic never gets allocated never needs
to get deallocated, it just lives forever.

49
00:02:31.860 --> 00:02:35.210
And this is as efficient as it gets
because there's no copying of any sort,

50
00:02:35.210 --> 00:02:38.241
there's no copying on the stack,
there's no copying on the heap,

51
00:02:38.241 --> 00:02:39.430
it's just always there.

52
00:02:39.430 --> 00:02:43.595
So this is a these things are great for
performance and that's exactly why when

53
00:02:43.595 --> 00:02:48.365
you make a string literal in rust, you,
you get the static lifetime by default.

54
00:02:48.365 --> 00:02:52.145
But because of lifetime illusion,
this is a very commonly alighted 1.

55
00:02:52.145 --> 00:02:55.018
And so usually the way I would actually
write this is I would just say

56
00:02:55.018 --> 00:02:56.125
ampersand stir.

57
00:02:56.125 --> 00:02:59.723
And rust could just infer that like, okay,
you don't need to put the lifetime there,

58
00:02:59.723 --> 00:03:01.945
I know that this is just
a string reference.

59
00:03:01.945 --> 00:03:05.841
But now, thanks to our having talked about
lifetimes, when you see this ,you know

60
00:03:05.841 --> 00:03:09.346
what is this a slice to what's actually
it's not a slice of a string that was

61
00:03:09.346 --> 00:03:13.040
allocated on the heap, it's actually
a slice of your binary itself.

62
00:03:13.040 --> 00:03:16.781
So [LAUGH] That was quite a moment when
I learned that the first time honestly,

63
00:03:16.781 --> 00:03:19.528
this is the main layer,
the main area where it comes up,

64
00:03:19.528 --> 00:03:21.242
you can also like make constants.

65
00:03:21.242 --> 00:03:25.624
And stuff using it but mainly the way
that it comes up is just a Is for

66
00:03:25.624 --> 00:03:27.760
string literals.

67
00:03:27.760 --> 00:03:30.830
All right, so
let's review our final section.

68
00:03:30.830 --> 00:03:32.332
First we talked about lifetime, so

69
00:03:32.332 --> 00:03:35.195
a lifetime is defined as the time
between when a value is allocated.

70
00:03:35.195 --> 00:03:38.570
And when it's ultimately deallocated,
that is that values lifetime.

71
00:03:39.610 --> 00:03:41.439
We talked about lifetime annotations, so

72
00:03:41.439 --> 00:03:43.920
here's a way to add a lifetime
annotation to a struct.

73
00:03:43.920 --> 00:03:45.630
You can also add these to Neumes.

74
00:03:45.630 --> 00:03:46.831
In the case of rust,

75
00:03:46.831 --> 00:03:51.662
you do always need to add them to a struct
if that struct contains any references.

76
00:03:51.662 --> 00:03:56.160
So I would not be allowed to say x
has the type ampersand bracket I 64,

77
00:03:56.160 --> 00:03:58.914
I would need to see ampersand tick a I 64.

78
00:04:00.060 --> 00:04:03.375
And then I would need to have that tick
a defined somewhere up here in full

79
00:04:03.375 --> 00:04:04.830
definition.

80
00:04:04.830 --> 00:04:06.780
We talked about lifetime illusion, so

81
00:04:06.780 --> 00:04:10.441
this is where in some cases I can omit
the lifetime annotation because rust

82
00:04:10.441 --> 00:04:13.360
the rust compiler is
capable of figuring it out.

83
00:04:13.360 --> 00:04:15.867
Much like with type inference if it
can't figure it out don't worry,

84
00:04:15.867 --> 00:04:19.150
it'll give you a compile time
error rather than just guessing.

85
00:04:19.150 --> 00:04:22.693
So it'll only elide these when it can
successfully say like as an example of

86
00:04:22.693 --> 00:04:26.236
length, you can say okay, I can see
that this only appears 1 time in here so

87
00:04:26.236 --> 00:04:28.120
you don't need to bother with it.

88
00:04:28.120 --> 00:04:31.210
You can just write ampersand self and
not have to write ampersand tick a self.

89
00:04:32.400 --> 00:04:35.573
And finally, we talked about the static
lifetime, which is basically a way of

90
00:04:35.573 --> 00:04:38.940
defining lifetimes that exists for
the entire duration of the program.

91
00:04:38.940 --> 00:04:42.340
And the most common
example of this is static.

92
00:04:42.340 --> 00:04:44.892
The ampersand tick static stir for
string literals,

93
00:04:44.892 --> 00:04:48.632
which are stored in the actual application
binary, as a very nice performance

94
00:04:48.632 --> 00:04:51.540
optimization to prevent needing
to copy them onto the heap.

