WEBVTT

1
00:00:00.000 --> 00:00:03.872
Now, let's move on to arrays, now,
this is an example of an array in rust and

2
00:00:03.872 --> 00:00:07.926
arrays in rust are pretty different from
how you might think of arrays in any other

3
00:00:07.926 --> 00:00:09.907
language views unless specifically.

4
00:00:09.907 --> 00:00:12.957
You've used c because rust arrays
are more like C arrays and

5
00:00:12.957 --> 00:00:15.468
they are arrays in like
JavaScript Python Ruby.

6
00:00:15.468 --> 00:00:18.076
Most languages that use
the term arrays means something

7
00:00:18.076 --> 00:00:20.191
different than what they mean in rust or
in C.

8
00:00:20.191 --> 00:00:23.043
Here's what I mean, so
here we have an array of years,

9
00:00:23.043 --> 00:00:26.708
there are three years in this array 1985,
2000, 2005.

10
00:00:26.708 --> 00:00:31.999
See, we have the square bracket syntax,
which is the traditional array

11
00:00:31.999 --> 00:00:37.216
syntax from C and we have the type,
so this says i32 semi colon three.

12
00:00:37.216 --> 00:00:41.081
Now, what's interesting about this is that
this is saying All of the elements in this

13
00:00:41.081 --> 00:00:41.896
array are i32.

14
00:00:41.896 --> 00:00:44.293
So unlike tuples, and
structs, you cannot mix and

15
00:00:44.293 --> 00:00:47.483
match you have to have one consistent
type for all of your elements.

16
00:00:47.483 --> 00:00:48.724
And the second thing and

17
00:00:48.724 --> 00:00:52.448
this is where rust arrays differ from
arrays in most other languages you

18
00:00:52.448 --> 00:00:56.315
might be familiar with, arrays have
a hard coded length at compile time.

19
00:00:56.315 --> 00:00:59.414
So these three is part of the type
of this array, it says, this array,

20
00:00:59.414 --> 00:01:02.566
always has exactly three elements,
it can never have more than three,

21
00:01:02.566 --> 00:01:04.162
it can never have fewer than three.

22
00:01:04.162 --> 00:01:06.019
Now, there is a way to
get a similar collection,

23
00:01:06.019 --> 00:01:09.101
it's probably more like what you're
familiar with where at that can't grow and

24
00:01:09.101 --> 00:01:11.159
shrink, we're getting that
in the future section.

25
00:01:11.159 --> 00:01:14.714
But for arrays,
this actually much like with structs and

26
00:01:14.714 --> 00:01:17.379
with tuples, what you see is what you get,

27
00:01:17.379 --> 00:01:21.769
you get exactly three elements
forever with this array called years.

28
00:01:21.769 --> 00:01:25.890
So that's sort of a, arrays are fixed
length in rust, now, if I want,

29
00:01:25.890 --> 00:01:30.354
I can say I want to get the first year out
of this, I can say years bracket zero,

30
00:01:30.354 --> 00:01:32.862
so that's going to give me back 1995.

31
00:01:32.862 --> 00:01:36.253
I can also do destructuring, here like
this with the square brackets and

32
00:01:36.253 --> 00:01:38.701
underscoring the appropriate
positions of notes,

33
00:01:38.701 --> 00:01:40.996
I can also put variables
in here instead of zero.

34
00:01:40.996 --> 00:01:44.346
So I could say, years bracket x,
years bracket y, if that,

35
00:01:44.346 --> 00:01:48.439
if I put something that's out of bounds or
like I say, years bracket foo.

36
00:01:48.439 --> 00:01:52.770
And it's outside the bounds of this array,
that will panic at runtime, so

37
00:01:52.770 --> 00:01:57.339
don't do that but if we're using it
with hard coded numbers like this, then.

38
00:01:57.339 --> 00:02:01.358
It's basically gonna work the same way as
a tuple would because, I've defined this

39
00:02:01.358 --> 00:02:04.940
as mutable, I can also reassign
this year's bracket to equals 2010.

40
00:02:04.940 --> 00:02:07.507
And again,
I could also put yours bracket x or

41
00:02:07.507 --> 00:02:12.034
yours bracket foo equals 2010 if I wanted
to, so this is an example of that,

42
00:02:12.034 --> 00:02:14.623
both of these do
essentially the same thing.

43
00:02:14.623 --> 00:02:17.311
Worth noting that, yeah, in this case,
this will never pack it,

44
00:02:17.311 --> 00:02:20.252
this will never panic, because rust
would give me a compile time error.

45
00:02:20.252 --> 00:02:23.556
If I put in a hard coded number that's
outside the bounds of the array,

46
00:02:23.556 --> 00:02:26.804
rust says, okay, I know that's gonna
be a problem but if I do with x,

47
00:02:26.804 --> 00:02:29.051
rust necessarily know
what next is going to be.

48
00:02:29.051 --> 00:02:33.929
So it'll do a runtime check instead and
potentially panic if I do something

49
00:02:33.929 --> 00:02:38.663
that's outside the bounds of the array,
so be careful with doing that.

50
00:02:38.663 --> 00:02:41.781
One thing you can do with arrays
that you cannot do with tuples and

51
00:02:41.781 --> 00:02:43.916
structures, you can iterate over them, so

52
00:02:43.916 --> 00:02:46.936
here's how we do that,
I'd say four year in years dot enter.

53
00:02:46.936 --> 00:02:49.473
This is a method call,
we haven't gotten into methods yet,

54
00:02:49.473 --> 00:02:52.907
we'll talk about them in the future, but
their syntax is probably familiar to you

55
00:02:52.907 --> 00:02:55.022
depending on what other
languages you've used.

56
00:02:55.022 --> 00:02:59.211
And here, this is basically going to do a
loop where, each time we go through one of

57
00:02:59.211 --> 00:03:02.461
the elements in this array,
it's gonna run this line of code.

58
00:03:02.461 --> 00:03:06.985
So this print line that says next
year colon and then year plus one, so

59
00:03:06.985 --> 00:03:11.589
first it'll say next year 1996,
cuz that's 1995 plus one,

60
00:03:11.589 --> 00:03:14.885
then next year 2001 then next year 2006.

61
00:03:14.885 --> 00:03:17.826
So this is something you do with arrays,

62
00:03:17.826 --> 00:03:22.324
you cannot iterate over tuples and
structs though, okay, so

63
00:03:22.324 --> 00:03:27.092
in summary, some of the differences
between arrays and tuples.

64
00:03:27.092 --> 00:03:32.120
So here we have our array, we can iterate
over it, it's got a fixed type to it,

65
00:03:32.120 --> 00:03:35.855
so all of the elements in the array
have to have this type and

66
00:03:35.855 --> 00:03:37.857
it's got a hard coded length.

67
00:03:37.857 --> 00:03:42.212
And this sort of will illustrate why
we're allowed to iterate over arrays but

68
00:03:42.212 --> 00:03:46.637
not over tuples, so because we have this
hard coded type for all the elements.

69
00:03:46.637 --> 00:03:49.571
That means that, rust knows every
single time we go into this loop,

70
00:03:49.571 --> 00:03:52.155
I know Know exactly what
the type of error is, it's i32.

71
00:03:52.155 --> 00:03:55.848
It has to be because every single of
these elements has to be an i32 and

72
00:03:55.848 --> 00:03:57.360
that's good because rust.

73
00:03:57.360 --> 00:04:00.524
As we've discussed previously,
wants to know the exact type for

74
00:04:00.524 --> 00:04:03.818
every single thing and every single
thing has to have only one type.

75
00:04:03.818 --> 00:04:07.135
There's no such thing as may be i32,
may be string, rust doesn't do that,

76
00:04:07.135 --> 00:04:09.817
it's always got to be one type,
so because of this, it knows.

77
00:04:09.817 --> 00:04:14.377
Okay, no matter how many elements we
decided to hard code, there always gonna

78
00:04:14.377 --> 00:04:18.398
be i32s there for year when I run
this code is always gonna be i32.

79
00:04:18.398 --> 00:04:22.207
Now, in contrast, if we had a tuple here,
remember tuples you can mix and

80
00:04:22.207 --> 00:04:25.094
match, you can say i32,
i32 bool, well, I mean,

81
00:04:25.094 --> 00:04:27.817
you can imagine when we're
going through the loop.

82
00:04:27.817 --> 00:04:31.240
What is the type of year like
the first two iterations of loopy i32,

83
00:04:31.240 --> 00:04:35.450
the third time it would be bool, what's
bool plus one, that's not really a thing.

84
00:04:35.450 --> 00:04:39.498
So this would give you a compile error,
if you tried to do this, it would say, no,

85
00:04:39.498 --> 00:04:42.843
you can't iterate over tuples,
you can only iterate over arrays or

86
00:04:42.843 --> 00:04:44.918
the things that we'll talk about later.

87
00:04:44.918 --> 00:04:49.283
Okay, so in summary,
arrays can be iterated over tuples and

88
00:04:49.283 --> 00:04:52.287
structs cannot but the downside of that.

89
00:04:52.287 --> 00:04:55.674
So the trade off is that array
elements must all have the same type,

90
00:04:55.674 --> 00:04:58.336
which is both what allows
them to be iterated over but

91
00:04:58.336 --> 00:05:01.440
also what makes them less
flexible than tuples and structs.

