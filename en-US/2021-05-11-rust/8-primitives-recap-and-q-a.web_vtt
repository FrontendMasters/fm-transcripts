WEBVTT

1
00:00:00.000 --> 00:00:03.180
Okay, so let's review part 1 and
then we'll ask open it up for

2
00:00:03.180 --> 00:00:07.262
any general questions about anything
we've talked about in the whole section.

3
00:00:07.262 --> 00:00:09.609
So we started out talking about strings,
so

4
00:00:09.609 --> 00:00:12.971
this is an example of using
the format macro to say hi, comma and

5
00:00:12.971 --> 00:00:16.858
then the curly braces the name will
get substituted in the curly braces.

6
00:00:16.858 --> 00:00:20.677
We also talked about print line and panic
being to met macros that also support

7
00:00:20.677 --> 00:00:24.684
string interpolation but again,
that's built into those particular macros.

8
00:00:24.684 --> 00:00:27.920
It's not like a general language concept,
talks about floats, so

9
00:00:27.920 --> 00:00:30.892
here's an example of a float
that I've defined with let mut.

10
00:00:30.892 --> 00:00:34.063
So it's mutable, which means I'm allowed
to redefine it later on if I want and

11
00:00:34.063 --> 00:00:36.866
I've got my decimal point there,
which is how we know it's a float.

12
00:00:36.866 --> 00:00:40.850
I've also optionally chosen to do a type
annotation to say, this is an f64, but

13
00:00:40.850 --> 00:00:43.677
I also could have made an f32 or
I could have left it off and

14
00:00:43.677 --> 00:00:45.387
just let rust infer it instantly.

15
00:00:45.387 --> 00:00:48.962
If you're curious by default,
it will default to f64, but

16
00:00:48.962 --> 00:00:52.402
that's just sort of
an implementation detail, usually,

17
00:00:52.402 --> 00:00:56.900
the compiler has more information it'll
sort of figure out what you want to.

18
00:00:56.900 --> 00:01:01.116
Integers, we have let one,
it has the type u32, so

19
00:01:01.116 --> 00:01:07.322
this is not a mutable let, and
here I've converted a float 1.99 as u32.

20
00:01:07.322 --> 00:01:11.946
The reason I call this one is because
when you convert to a float to a u32,

21
00:01:11.946 --> 00:01:15.079
it's just gonna drop the decimal points,
also,

22
00:01:15.079 --> 00:01:19.580
if you're curious, by defaults if
I didn't put this on here, right?

23
00:01:19.580 --> 00:01:24.403
Rust would actually default to i32 as
the default integer type and finally,

24
00:01:24.403 --> 00:01:28.057
we talked about booleans, so
here's an example of using,

25
00:01:28.057 --> 00:01:31.142
if I said x greater than 5,
then true else false.

26
00:01:31.142 --> 00:01:35.484
And because I didn't put any like semi
colons anywhere, if I wanted to this.

27
00:01:35.484 --> 00:01:36.973
I could replace this true or

28
00:01:36.973 --> 00:01:41.635
this false with something more complicated
than at the end have an expression there,

29
00:01:41.635 --> 00:01:44.763
which is what this entire
expression would evaluate to.

30
00:01:44.763 --> 00:01:48.963
&gt;&gt; What's the difference between
traits and macros in rust?

31
00:01:48.963 --> 00:01:52.809
&gt;&gt; Great question, difference between
traits and macros, basically,

32
00:01:52.809 --> 00:01:56.075
they have nothing to do with each other,
so macros are like,

33
00:01:56.075 --> 00:01:59.423
we discussed something that
happens purely at compile time.

34
00:01:59.423 --> 00:02:03.569
That's something like, syntax sugar
where When I call format right here,

35
00:02:03.569 --> 00:02:04.752
the ad compile time.

36
00:02:04.752 --> 00:02:08.045
Rust is going to execute some code
that's inside that format macro,

37
00:02:08.045 --> 00:02:11.184
which is going to expand it into
a series of other function calls.

38
00:02:11.184 --> 00:02:16.644
In contrast, traits are something more
similar to something like classes,

39
00:02:16.644 --> 00:02:19.922
it's more about like it's called dispatch.

40
00:02:19.922 --> 00:02:23.986
But basically trying to figure out which
of several functions should be called in

41
00:02:23.986 --> 00:02:27.569
a particular point, and it's a way
to have things like code reuse, and

42
00:02:27.569 --> 00:02:29.442
like some additional flexibility.

43
00:02:29.442 --> 00:02:32.905
So really, macros and
traits do totally different jobs,

44
00:02:32.905 --> 00:02:37.358
we're actually traits is one of the
several things that are part of the rust

45
00:02:37.358 --> 00:02:40.703
language that we're not gonna
get into in this course.

46
00:02:40.703 --> 00:02:44.964
But it trades should be something
relatively familiar based on other

47
00:02:44.964 --> 00:02:48.200
languages that you've used,
like interfaces or.

48
00:02:48.200 --> 00:02:52.938
I guess they're not quite like interfaces,
depending on your language but,

49
00:02:52.938 --> 00:02:56.910
yeah, we won't quite get into
those in the scope of this course.

50
00:02:56.910 --> 00:02:59.454
&gt;&gt; Can I return type B inferred?

51
00:02:59.454 --> 00:03:04.476
&gt;&gt; Can a return type B inferred, not for
functions, they can for closures,

52
00:03:04.476 --> 00:03:09.012
but also closures are something
we won't get into in this course,

53
00:03:09.012 --> 00:03:13.467
closures are sort of like inline,
lambdas, inline functions.

54
00:03:13.467 --> 00:03:17.108
And for those that can actually infer both
the arguments and the return type but for

55
00:03:17.108 --> 00:03:20.451
normal functions, which is all we're
going to cover in this course, it.

56
00:03:20.451 --> 00:03:23.682
You have to write out the entire
type including the return type.

57
00:03:23.682 --> 00:03:29.219
&gt;&gt; Does rust have DSA library like CPP?

58
00:03:29.219 --> 00:03:34.713
&gt;&gt; DSA, I don't actually know what DSA
stands for but if you want to check,

59
00:03:34.713 --> 00:03:39.596
so if you go to crates.io,
that's rust's package registry.

60
00:03:39.596 --> 00:03:43.608
So you can do a search in there and it'll
tell you all the libraries that it does

61
00:03:43.608 --> 00:03:45.728
have crates is kind of like NPM for rust.

62
00:03:45.728 --> 00:03:48.914
And basically, it will tell you all the
packages that you can find and maybe you

63
00:03:48.914 --> 00:03:52.110
can find something that's the equivalent
of what you're looking for there.

64
00:03:52.110 --> 00:03:54.730
&gt;&gt; Is there's something like
a ternary operator in rust?

65
00:03:54.730 --> 00:03:58.352
&gt;&gt; Great question, is there something
like a ternary operator in rust, yes, but

66
00:03:58.352 --> 00:03:59.661
we've already learned it.

67
00:03:59.661 --> 00:04:03.279
Because if, when used as an expression
is basically exactly the same thing as

68
00:04:03.279 --> 00:04:06.633
a ternary operator, so rust doesn't
have a separate syntax for that.

69
00:04:06.633 --> 00:04:08.918
It just lets you use
if like an expression,

70
00:04:08.918 --> 00:04:11.523
basically exactly like
a ternary if you want to.

71
00:04:11.523 --> 00:04:15.861
&gt;&gt; Is rust like Java,
compiled into byte code and run on a VM or

72
00:04:15.861 --> 00:04:19.951
does it generate machine level code for
the platform?

73
00:04:19.951 --> 00:04:23.515
&gt;&gt; Great question, yeah,
it just goes straight to machine code,

74
00:04:23.515 --> 00:04:26.496
we had a slide on this very
back at the beginning here.

75
00:04:26.496 --> 00:04:31.364
But basically, yeah, rust just goes
straight to either machine code and

76
00:04:31.364 --> 00:04:36.483
a binary executable or to web assembly,
there is no intermediate bytecode.

77
00:04:36.483 --> 00:04:40.312
&gt;&gt; Yeah, can we cross compile
binaries compiling for Mac,

78
00:04:40.312 --> 00:04:43.756
Linux, windows and
is there an easy way to do that?

79
00:04:43.756 --> 00:04:47.183
&gt;&gt; Got it, question was can you cross
compile binary, so for example,

80
00:04:47.183 --> 00:04:48.541
I'm running on a Mac here,

81
00:04:48.541 --> 00:04:51.753
can I use my Mac to compile a rust
binary not only to Mac binaries.

82
00:04:51.753 --> 00:04:56.604
But also to Windows and Linux,
not currently, so if I want to build for

83
00:04:56.604 --> 00:04:57.270
Window.

84
00:04:57.270 --> 00:05:01.949
I would need to actually like run my rust
compiler on my rust code on a Windows

85
00:05:01.949 --> 00:05:05.757
machine, same thing for Linux or
on a VM is much more common.

86
00:05:05.757 --> 00:05:08.777
&gt;&gt; Are there queue and
stack collections in rust?

87
00:05:08.777 --> 00:05:12.495
&gt;&gt; Yes, are there queue and
stack collections, there are and again,

88
00:05:12.495 --> 00:05:16.095
I would refer you to crates.io to
find a whole selection of them.

89
00:05:16.095 --> 00:05:20.641
&gt;&gt; When doing y as i64 does
rust copy the original value

90
00:05:20.641 --> 00:05:23.279
to a new i64 value in memory?

91
00:05:23.279 --> 00:05:29.943
&gt;&gt; When do, yes, when doing like y as i64
does rust copy that i64 to a new i64,

92
00:05:29.943 --> 00:05:35.730
there is a copy, whatever that
number was to a new i64 memory, yes.

93
00:05:35.730 --> 00:05:39.460
It would have to be because
it's a different size,

94
00:05:39.460 --> 00:05:43.795
those are all going to end up
CPU registers, so, but also,

95
00:05:43.795 --> 00:05:48.516
it's also extremely fast,
like the, AS is also trively fast.

96
00:05:48.516 --> 00:05:50.787
Monoids and
monads are practically rust, no,

97
00:05:50.787 --> 00:05:52.728
rust does not have higher kind of types.

98
00:05:52.728 --> 00:05:56.418
So if you're, for
any Haskell fans in the audience,

99
00:05:56.418 --> 00:06:02.163
those aren't things that that rust really
has any kind of reasonable support for.

100
00:06:02.163 --> 00:06:08.584
If you don't want to learn what monads and
monoids or maybe that's a good thing.

101
00:06:08.584 --> 00:06:11.698
&gt;&gt; Does rust have any built in crypto?

102
00:06:11.698 --> 00:06:14.333
&gt;&gt; Does rust have any built in crypto,
I, don't they,

103
00:06:14.333 --> 00:06:16.630
I mean certainly not
built into the language.

104
00:06:16.630 --> 00:06:19.842
But definitely there's plenty of
cryptography libraries out there, so

105
00:06:19.842 --> 00:06:21.820
just depends on your
definition of built in.

