WEBVTT

1
00:00:00.000 --> 00:00:05.738
So we've got product of numbs here and
we're basically just trying to call,

2
00:00:05.738 --> 00:00:10.064
same thing as before here,
product numbs semicolon, and

3
00:00:10.064 --> 00:00:16.092
then same thing with average and we're
gonna do both of these cases get an error.

4
00:00:16.092 --> 00:00:23.274
So, oops, well, one of the errors is
it's called number errors not numbs.

5
00:00:26.418 --> 00:00:31.906
Right, so we're getting use of move value
numbers values here after moved yesterday,

6
00:00:31.906 --> 00:00:35.462
so, how can we fix this, well,
the easy way the quick and

7
00:00:35.462 --> 00:00:38.376
dirty way is we can just
say numbers dot clone.

8
00:00:38.376 --> 00:00:43.594
Numbers, clone, oops, and
now everything's fine, we're totally good,

9
00:00:43.594 --> 00:00:47.863
however, this does of course have
a performance penalty to it,

10
00:00:47.863 --> 00:00:52.149
I guess we can run this just to
make sure everything's working.

11
00:00:52.149 --> 00:00:54.687
So proud of these numbers,
some of these are average these numbers,

12
00:00:54.687 --> 00:00:55.887
some of these numbers, great.

13
00:00:55.887 --> 00:01:00.315
So everything's working but
we do have this performance downside, so

14
00:01:00.315 --> 00:01:04.592
let's try doing it the other way,
so basically the other way being,

15
00:01:04.592 --> 00:01:08.465
let's actually have some of
these functions return a tuple.

16
00:01:08.465 --> 00:01:12.491
So we'll jump down to the sum of numbs
function beside the sum function,

17
00:01:12.491 --> 00:01:17.045
and basically we're gonna say rather than
having a return I 64 we're gonna have

18
00:01:17.045 --> 00:01:18.106
a return the 64.

19
00:01:18.106 --> 00:01:21.466
Yes, but also additionally a veck of I-64,

20
00:01:21.466 --> 00:01:25.332
which is to say the original
numbers that we passed in.

21
00:01:25.332 --> 00:01:28.777
You can do these in either order, you can
have it returned the I-64 followed by

22
00:01:28.777 --> 00:01:32.240
the thing that we're returning back or
the other way around, doesn't matter.

23
00:01:32.240 --> 00:01:33.697
I'm gonna go and do the same thing for

24
00:01:33.697 --> 00:01:37.131
product because I know we're going to want
it so that I-64, I'm not going to bother

25
00:01:37.131 --> 00:01:40.257
doing it with average because in this
particular example, we don't need to.

26
00:01:40.257 --> 00:01:44.482
But if I wanted to use this strategy
everywhere I would also do it for average,

27
00:01:44.482 --> 00:01:49.032
okay, now we see we have some type errors
because this is now returning a tuple, but

28
00:01:49.032 --> 00:01:50.865
I'm pretending like it's not.

29
00:01:50.865 --> 00:01:55.024
So now I want to return some of
numbs followed by numbers 2, and

30
00:01:55.024 --> 00:01:57.467
I'm gonna use numbers 2 over here.

31
00:01:57.467 --> 00:02:01.855
So now that one's fixed, but I still have
a problem with the other one, which is

32
00:02:01.855 --> 00:02:06.397
that I do project numbers come in numbers
3, and then I can use numbers 3 in here.

33
00:02:06.397 --> 00:02:10.620
Great, now everything works again, so

34
00:02:10.620 --> 00:02:16.087
I have not used any cloning but
whoops, [LAUGH] Okay,

35
00:02:16.087 --> 00:02:22.687
fair enough, so I guess I actually
did that in the wrong place.

36
00:02:22.687 --> 00:02:28.511
Number 3 is a vector bytes 64
averages numbers three problems,

37
00:02:28.511 --> 00:02:32.255
I see some of numbers, right, so yeah, so

38
00:02:32.255 --> 00:02:38.199
then here I need to do some of numbers,
I guess I can just do dot zero.

39
00:02:38.199 --> 00:02:43.193
That'll work cool, okay, so
now we have, some of numbers,

40
00:02:43.193 --> 00:02:47.036
is the same answers as before,
except that we,

41
00:02:47.036 --> 00:02:52.725
were able to do it without any
cloning questions about this exercise.

42
00:02:52.725 --> 00:02:55.372
&gt;&gt; What did some.0 do?

43
00:02:55.372 --> 00:03:00.115
&gt;&gt; Yeah, that was basically, returning
the taking the value out of the tuples, so

44
00:03:00.115 --> 00:03:03.065
dot zero says give me
the first thing in the tuple.

45
00:03:03.065 --> 00:03:08.097
And because some is now returning
a tuple of I-64 and veck of I-64,

46
00:03:08.097 --> 00:03:13.555
I need to get just this part out of the
out of the veck, sorry, out of the tuple.

47
00:03:13.555 --> 00:03:17.684
So .0 is just a quick way to do that,

48
00:03:17.684 --> 00:03:22.349
I could have also done like let (answer,

49
00:03:22.349 --> 00:03:26.482
numbers2) = sum numbers, yeah,

50
00:03:26.482 --> 00:03:33.712
that would have also worked then
I could say answer over length.

51
00:03:33.712 --> 00:03:37.018
So same basic thing, and
then it would complain to me saying, hey,

52
00:03:37.018 --> 00:03:40.904
numbers 2 is unused, so I figured rather
than writing that, I would just say,

53
00:03:40.904 --> 00:03:43.070
some numbers .0, both do the same thing.

54
00:03:43.070 --> 00:03:47.144
This is going all the way back to part
two, which I realized was hours ago at

55
00:03:47.144 --> 00:03:50.653
this point, but it's yeah,
just a different way to write it.

56
00:03:50.653 --> 00:03:55.078
&gt;&gt; With using an array instead
of a vector bypass this process?

57
00:03:55.078 --> 00:03:58.956
&gt;&gt; It would, yeah, absolutely,
if we were using an array instead of this,

58
00:03:58.956 --> 00:04:02.587
we would not have any of these
problems we would not get, you can't,

59
00:04:02.587 --> 00:04:04.920
yeah, that would totally not be a problem.

60
00:04:04.920 --> 00:04:08.284
However, that would mean that numbers
would then be have a hard coded

61
00:04:08.284 --> 00:04:11.706
length where it would only be able to
be a fixed length at compile time.

62
00:04:11.706 --> 00:04:15.697
Which as we all know from programming with
these types of data structures is not

63
00:04:15.697 --> 00:04:19.397
the most useful, it's much more useful
if they have a flexible length.

64
00:04:19.397 --> 00:04:22.877
&gt;&gt; Thanks, [INAUDIBLE] And I were both
able to just reuse the name numbers

65
00:04:22.877 --> 00:04:27.197
instead of numbers 2, and numbers 3 seems
a little weird because we didn't declare

66
00:04:27.197 --> 00:04:30.862
let mute numbers, but I don't know
if you could explain how that works.

67
00:04:30.862 --> 00:04:35.538
&gt;&gt; Sure, yeah, so you can actually do
this if you want, instead of numbers,

68
00:04:35.538 --> 00:04:39.993
2 numbers 3, so basically what's
happening when you do this is it's

69
00:04:39.993 --> 00:04:43.737
not actually mutating it, but
rather it's shadowing it.

70
00:04:43.737 --> 00:04:49.168
So essentially what this is saying
is it's saying, from now on,

71
00:04:49.168 --> 00:04:55.614
I am defining a new thing called numbers,
this old thing is no longer exists.

72
00:04:55.614 --> 00:04:59.120
The old the old thing known as numbers,
is dead to me and now for

73
00:04:59.120 --> 00:05:03.523
like Long live this new definition of
the word numbers, and same thing here.

74
00:05:03.523 --> 00:05:06.660
So basically we're sort of like
kicking this thing out of scope and

75
00:05:06.660 --> 00:05:09.867
replacing it with a new thing that
has nothing to do with the old one.

76
00:05:09.867 --> 00:05:13.922
In contrast, mutating is saying
I wanna actually go in and

77
00:05:13.922 --> 00:05:18.486
make a change to this value,
like whatever this thing refers to.

78
00:05:18.486 --> 00:05:22.779
So where this distinction
potentially makes a big

79
00:05:22.779 --> 00:05:27.680
difference is let's say you do
it inside of a for loop, so

80
00:05:27.680 --> 00:05:35.056
it's basically the difference between
saying like, let x= 5x =5 and let y=5.

81
00:05:35.056 --> 00:05:39.646
Let y =5 so, if I do well first of all,
it's gonna give me a compile error on this

82
00:05:39.646 --> 00:05:44.096
one, but not on the second one, if you
can imagine now let's suppose I put a for

83
00:05:44.096 --> 00:05:46.689
loop on this, like I don't know, numbers.

84
00:05:50.894 --> 00:05:53.478
And versus if I put a for
loop on this one,

85
00:05:53.478 --> 00:05:58.497
then you can kind of see the difference
more clearly, because in this top one,

86
00:05:58.497 --> 00:06:02.012
I'm actually like inside
each iteration of the loop.

87
00:06:02.012 --> 00:06:05.918
I'm going back and changing the original
one which after I exit the loop,

88
00:06:05.918 --> 00:06:09.887
sort of effects what this value is from
now on, whereas in this one I'm just

89
00:06:09.887 --> 00:06:13.226
defining a new thing that's like
shadowing the previous one,

90
00:06:13.226 --> 00:06:17.093
and when I exit the loop, the original
one still has its original value.

91
00:06:17.093 --> 00:06:21.730
So that's really the distinction here
is when you are, if you decide to

92
00:06:21.730 --> 00:06:26.153
make a lead or any kind of naming
that sort of reuse an existing name.

93
00:06:26.153 --> 00:06:30.242
What that does if they're in the same
scope is it just says, Well, from now on,

94
00:06:30.242 --> 00:06:32.152
you can't access the previous one.

95
00:06:32.152 --> 00:06:35.078
Whereas this version actually
overrides the previous one,

96
00:06:35.078 --> 00:06:37.784
which in an example like this,
maybe doesn't matter.

97
00:06:37.784 --> 00:06:40.896
But inside a for loop or something
like that it can't make it or is that

98
00:06:40.896 --> 00:06:44.344
a conditional would be another case
where that would make a big difference.

99
00:06:44.344 --> 00:06:47.618
So, yeah, I don't want to go
into huge change on this but

100
00:06:47.618 --> 00:06:50.300
hopefully that [LAUGH]
clarifies a little bit.

