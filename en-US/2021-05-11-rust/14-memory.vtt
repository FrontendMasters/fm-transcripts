WEBVTT

1
00:00:00.020 --> 00:00:01.506
So, next, we're gonna talk about memory.

2
00:00:01.506 --> 00:00:04.956
And the reason we're gonna talk about
memory is, basically, not because this is

3
00:00:04.956 --> 00:00:08.506
something that's really important to know
about for this particular section, but

4
00:00:08.506 --> 00:00:11.706
rather because, we're going to start
introducing the concept of memory as

5
00:00:11.706 --> 00:00:15.050
a way to build up to an understanding
of Rust's Baro checker.

6
00:00:15.050 --> 00:00:17.856
So, all the stuff we're gonna be
talking about with regards to memory,

7
00:00:17.856 --> 00:00:19.973
it's kind of useful to know
in terms of performance and

8
00:00:19.973 --> 00:00:21.950
just kind of how things
work under the hood.

9
00:00:21.950 --> 00:00:25.133
But the main motivation here is that we're
building up to something that will be

10
00:00:25.133 --> 00:00:28.316
helpful to you later on when we get to
later sections about the Baro checker, and

11
00:00:28.316 --> 00:00:31.590
how to understand the error
messages that it's giving you.

12
00:00:31.590 --> 00:00:34.720
So, I know that people who are taking this
course will have different backgrounds.

13
00:00:34.720 --> 00:00:36.954
I don't want to assume anyone has
any computer science background or

14
00:00:36.954 --> 00:00:38.840
knows how memory works or
anything like that.

15
00:00:38.840 --> 00:00:42.110
So, we're gonna start with a sort of
very bare bones explanation of how this

16
00:00:42.110 --> 00:00:42.732
stuff works.

17
00:00:42.732 --> 00:00:46.507
So, you can think of memory as
a whole bunch of bits, 1s and 0s.

18
00:00:46.507 --> 00:00:48.858
So, a bit refers to, either, a 0 or a 1.

19
00:00:48.858 --> 00:00:50.894
And you can think of, conceptually,

20
00:00:50.894 --> 00:00:54.655
the memory in your computer is just
a big long list of these 0s and 1s.

21
00:00:54.655 --> 00:00:57.486
Just like a lot of 0s,
a lot of 1s, back to back.

22
00:00:57.486 --> 00:00:59.345
Some of them are 0, some of them are 1.

23
00:00:59.345 --> 00:01:01.260
But 0s and 1s are not that useful.

24
00:01:01.260 --> 00:01:05.100
We wanna talk about things like strings
and numbers that are bigger than 1.

25
00:01:05.100 --> 00:01:06.730
So, how do we get those?

26
00:01:06.730 --> 00:01:10.848
Well, the answer is that, basically,
when we're looking at this, the program is

27
00:01:10.848 --> 00:01:15.390
interpreting sequences of 0s and 1s as
something more interesting than that.

28
00:01:15.390 --> 00:01:19.040
The smallest unit of this is, usually,
what's called a byte, which is 8 bits.

29
00:01:19.040 --> 00:01:23.650
So, here we have the byte number 1 in this
example memory that I've written out here,

30
00:01:23.650 --> 00:01:25.304
and it's 11110011.

31
00:01:25.304 --> 00:01:33.537
And as it happens, sorry, then the next
8 bits are byte 2 is gonna be 01101011.

32
00:01:33.537 --> 00:01:37.110
And we've just decided that,
this is how I'm gonna organize it.

33
00:01:37.110 --> 00:01:39.100
We're gonna have one byte,
followed by another bite.

34
00:01:39.100 --> 00:01:41.940
Okay, sure, this is just a way
of interpreting these bits.

35
00:01:41.940 --> 00:01:46.280
And you can imagine there's a third byte,
and a fourth byte, and so on and so forth.

36
00:01:46.280 --> 00:01:49.454
So, as it happens, 11110011, in binary,

37
00:01:49.454 --> 00:01:54.539
translates to 243 in decimal, which is
the number that we're all familiar with.

38
00:01:54.539 --> 00:01:58.160
And these 1s and 0s translate 107.

39
00:01:58.160 --> 00:02:01.760
We're not gonna get into how to translate
binary numbers into decimal numbers.

40
00:02:01.760 --> 00:02:04.070
You can, read up about that
if you're curious about it.

41
00:02:04.070 --> 00:02:07.751
But the point is that, in memory, actually
what's there is a whole bunch of 1s and

42
00:02:07.751 --> 00:02:11.065
0s, but, we choose to interpret that
memory in different ways in order to

43
00:02:11.065 --> 00:02:12.655
get more useful values out of them.

44
00:02:12.655 --> 00:02:15.026
It's really just a way of
choosing to interpret that.

45
00:02:15.026 --> 00:02:18.514
If you imagine, we could just interpret
the first 16 bytes of something instead of

46
00:02:18.514 --> 00:02:21.459
separating the, I'm sorry,
the first 16 bits, those 1s and 0s,

47
00:02:21.459 --> 00:02:24.995
as something rather than chopping
them up into bytes like this.

48
00:02:24.995 --> 00:02:27.749
All of those are totally fair options.

49
00:02:27.749 --> 00:02:30.592
Okay, so, I've sort of extended this out.

50
00:02:30.592 --> 00:02:32.865
So this one's 243, then the next
eight bits are 107, then 117.

51
00:02:32.865 --> 00:02:36.080
I've basically written out, so
here's some bytes in memory.

52
00:02:36.080 --> 00:02:37.900
Just remember that,
it's backed by 1s and 0s.

53
00:02:37.900 --> 00:02:41.876
But, in this case, we're really only gonna
be concerned with these bytes, here,

54
00:02:41.876 --> 00:02:43.350
in memory.

55
00:02:43.350 --> 00:02:46.298
So, you can kinda think of this
bytes representation of memory,

56
00:02:46.298 --> 00:02:49.040
as it's something like a u8 array,
and like array of u8s.

57
00:02:49.040 --> 00:02:52.208
u8 being an 8-bit unsigned integer,
namely a byte.

58
00:02:52.208 --> 00:02:55.877
So, this would be the first element
in the array, the first byte,

59
00:02:55.877 --> 00:02:58.310
this is the next one,
and so on and so forth.

60
00:02:58.310 --> 00:03:02.168
And this is just a reasonable mental
model to have of, essentially,

61
00:03:02.168 --> 00:03:05.970
how memory is represented in terms
of just a long sequence of bytes.

62
00:03:07.060 --> 00:03:09.583
If you wanted to, though,
you could also say, you know what?

63
00:03:09.583 --> 00:03:11.039
I wanna treat this as a u16 array.

64
00:03:11.039 --> 00:03:15.743
And then, the first element is here, which
would actually be, if I took those same

65
00:03:15.743 --> 00:03:20.201
bits that we had before and interpreted
them as a 16-bit unsigned integer.

66
00:03:20.201 --> 00:03:25.107
That would be, instead of two
different numbers of 243 and 107,

67
00:03:25.107 --> 00:03:30.529
those same 1s and 0s could be
interpreted as 62,315, if we wanted to.

68
00:03:30.529 --> 00:03:35.385
Then, the next element in that u16 array,
would be over here, and then and so on and

69
00:03:35.385 --> 00:03:36.002
so forth.

70
00:03:36.002 --> 00:03:40.842
So, basically, this is just an example of,
we can look at the same 1s and 0s,

71
00:03:40.842 --> 00:03:45.326
and conceptualize them as different
types of numbers, or strings, or,

72
00:03:45.326 --> 00:03:47.452
basically, anything we want to.

73
00:03:47.452 --> 00:03:49.320
It's all 1s and 0s under the hood.

74
00:03:49.320 --> 00:03:52.905
And it's really a matter of just, how our
program chooses to interpret those 1s and

75
00:03:52.905 --> 00:03:55.180
0s, to do something useful.

76
00:03:55.180 --> 00:04:02.110
Okay, so, let's say that we have a u16
array that is exactly three elements long.

77
00:04:02.110 --> 00:04:04.260
So, we talked about arrays
have to have a fixed length.

78
00:04:04.260 --> 00:04:09.220
So, here we have u16; 3, and
here are the three numbers in there.

79
00:04:09.220 --> 00:04:11.430
So, here's our first element.

80
00:04:11.430 --> 00:04:12.220
Here's our second element.

81
00:04:12.220 --> 00:04:13.340
Here's our third element.

82
00:04:13.340 --> 00:04:15.340
This is a perfectly reasonable
thing that we could have in memory.

83
00:04:17.040 --> 00:04:21.420
Alternatively, we can also say,
I wanna have a u32, which is even bigger.

84
00:04:21.420 --> 00:04:23.927
So, this is like interpreting
four bytes at a time, now.

85
00:04:23.927 --> 00:04:26.210
And this would be the first on this,
and this would be the second one.

86
00:04:26.210 --> 00:04:30.280
But, for example, let's stick with
just u16 and kind of go with that.

87
00:04:30.280 --> 00:04:35.032
So, here's another thing that's
interesting about this, in memory,

88
00:04:35.032 --> 00:04:39.094
that three-element u16 array,
has exactly the same memory

89
00:04:39.094 --> 00:04:43.634
representation as a tuple with
three u16 sites, exactly the same.

90
00:04:43.634 --> 00:04:47.713
There is absolutely no difference
in the memory between these two.

91
00:04:47.713 --> 00:04:50.450
And you also notice that
there's no overhead.

92
00:04:50.450 --> 00:04:54.594
So, in a lot of languages, particularly,
object-oriented languages, when you have

93
00:04:54.594 --> 00:04:58.820
an object, let's say in memory, it's not
just storing the data about the object.

94
00:04:58.820 --> 00:05:01.066
There's extra memory being
used to store things like,

95
00:05:01.066 --> 00:05:02.512
what are the fields on this object?

96
00:05:02.512 --> 00:05:04.714
So, you can change them
at runtime if you want.

97
00:05:04.714 --> 00:05:07.880
Or metadata about,
what's the class of this object?

98
00:05:07.880 --> 00:05:10.790
So, you can ask, at runtime,
what's the class of this thing?

99
00:05:10.790 --> 00:05:14.357
Rust, really, as we talked about,
optimizes for performance, so

100
00:05:14.357 --> 00:05:16.210
there was no overhead here.

101
00:05:16.210 --> 00:05:18.746
Literally for either a tuple or an array,

102
00:05:18.746 --> 00:05:23.310
it's just the numbers themselves in
memory, in adjacent memory slots.

103
00:05:23.310 --> 00:05:25.499
That is it,
there is zero overhead to either of those.

104
00:05:26.670 --> 00:05:30.730
So, point.0, point.1, point.2,
instead of (0), (1), (2),

105
00:05:30.730 --> 00:05:34.848
from a memory perspective, they're exactly
the same thing, tuple versus array.

106
00:05:34.848 --> 00:05:37.760
And actually a struct,
exactly the same thing too.

107
00:05:37.760 --> 00:05:42.600
Because, really, a struct is, essentially,
just syntax sugar for a tuple, in Rust.

108
00:05:42.600 --> 00:05:46.740
It's a way of getting something
that works and, essentially,

109
00:05:46.740 --> 00:05:49.881
the same way, at runtime,
as a tuple, except,

110
00:05:49.881 --> 00:05:55.600
you're specifying the value is in terms
of labels, rather than in terms of slots.

111
00:05:55.600 --> 00:05:58.468
So, if we have this point here,
we say, pt.x is this first slot,

112
00:05:58.468 --> 00:06:01.110
y is the second one,
and z is the third one.

113
00:06:01.110 --> 00:06:05.490
And this is why, when you're using structs
in Rust, it always wants you to write out

114
00:06:05.490 --> 00:06:09.453
the word point when you're destructuring
it or when you're creating one.

115
00:06:09.453 --> 00:06:13.148
Is because, it needs to know which
order to put these in, in memory.

116
00:06:13.148 --> 00:06:16.882
Cuz this, actually, can have a very
subtle effect on performance, sometimes.

117
00:06:16.882 --> 00:06:19.856
It wants to know, hey, is x supposed to
be the first one, or the second one, or

118
00:06:19.856 --> 00:06:20.456
the third one?

119
00:06:20.456 --> 00:06:24.045
I know you've got three of these things,
but which order should they go in?

120
00:06:24.045 --> 00:06:26.985
And the order that you define them in
the struct is actually how they're

121
00:06:26.985 --> 00:06:28.409
going to be laid out in the memory.

122
00:06:28.409 --> 00:06:31.919
So, that's why the compiler asks you
to write out the word point, is so

123
00:06:31.919 --> 00:06:34.050
that it knows how to lay these things out.

124
00:06:34.050 --> 00:06:36.640
Cuz, again, Rust wants to have
as little overhead as possible.

125
00:06:36.640 --> 00:06:39.661
And, as we've seen, Rust tuples,
structs, and arrays,

126
00:06:39.661 --> 00:06:42.567
they're all represented exactly
the same way in memory,

127
00:06:42.567 --> 00:06:46.740
with exactly the same overhead,
which is to say, no overhead, at all.

128
00:06:46.740 --> 00:06:51.167
So, all three of these things,
the tuple version, the struct version, and

129
00:06:51.167 --> 00:06:53.959
the array version,
exactly the same overhead,

130
00:06:53.959 --> 00:06:57.650
exactly the same bytes in memory,
same 0s and 1s.

131
00:06:57.650 --> 00:07:00.590
They're really, totally,
indistinguishable to a running program.

132
00:07:00.590 --> 00:07:03.057
They just have different semantics
depending on how you wanna use them and

133
00:07:03.057 --> 00:07:05.340
what's convenient for you in your code.

134
00:07:05.340 --> 00:07:08.148
So, this is sort of our first
taste of memory in Rust, and

135
00:07:08.148 --> 00:07:10.470
just getting a sense of how things work.

136
00:07:10.470 --> 00:07:12.616
But this is gonna be
kind of an indication of,

137
00:07:12.616 --> 00:07:15.840
you can see how Rust is able to
be faster than other languages.

138
00:07:15.840 --> 00:07:17.458
It's not that Rust has, necessarily,

139
00:07:17.458 --> 00:07:20.440
some sort of magical thing that lets
it be faster than the hardware.

140
00:07:20.440 --> 00:07:21.500
It's actually the opposite.

141
00:07:21.500 --> 00:07:25.136
It's that, Rust tries to give you these
nice conveniences, at compile time, so,

142
00:07:25.136 --> 00:07:28.110
it feels like you have a lot of
different features in the language.

143
00:07:28.110 --> 00:07:32.768
But, at runtime, it's basically saying,
we want to have no overhead compared to if

144
00:07:32.768 --> 00:07:37.000
you were writing assembly language,
as little overhead as possible.

145
00:07:37.000 --> 00:07:40.640
We're not gonna store one single bit extra
than is necessary to represent these

146
00:07:40.640 --> 00:07:42.110
numbers in memory.

147
00:07:42.110 --> 00:07:44.092
And that's kind of Rust,
in a nutshell, and

148
00:07:44.092 --> 00:07:45.930
how it achieves the performance it does.

