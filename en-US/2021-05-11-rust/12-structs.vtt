WEBVTT

1
00:00:00.060 --> 00:00:02.543
So here we have that same point
that we've done previously.

2
00:00:02.543 --> 00:00:06.230
But now I'm defining it using the struct
keyword rather than using a tuple.

3
00:00:06.230 --> 00:00:08.640
So here I'm actually giving
names to each of these elements.

4
00:00:08.640 --> 00:00:09.950
I'm saying this one is named x.

5
00:00:09.950 --> 00:00:11.090
This one's named y.

6
00:00:11.090 --> 00:00:12.810
This one's named z.

7
00:00:12.810 --> 00:00:13.513
If I want too,

8
00:00:13.513 --> 00:00:17.628
I could construct one of these by making
a function called new point, for example.

9
00:00:17.628 --> 00:00:20.789
I don't necessarily need to do
a function but this is just an example.

10
00:00:20.789 --> 00:00:23.426
Let's say I take x, y and
z as i64 arguments.

11
00:00:23.426 --> 00:00:25.400
And this is actually
going to return a point.

12
00:00:26.690 --> 00:00:28.400
The way that I build one of these structs.

13
00:00:28.400 --> 00:00:31.888
Now with tuples, I would just use
parentheses there with a struct.

14
00:00:31.888 --> 00:00:35.625
You not only use curly braces
instead of parentheses, but

15
00:00:35.625 --> 00:00:38.683
you actually need to say
the name of the struct.

16
00:00:38.683 --> 00:00:42.514
So I actually have to write out point
saying that's basically saying I wanna use

17
00:00:42.514 --> 00:00:44.931
this point struct right here,
and curly braces.

18
00:00:44.931 --> 00:00:48.004
Here, I'm saying x colon x,
y colon y, z colon z.

19
00:00:48.004 --> 00:00:51.087
So that's to say that the x field
here is gonna come from this x.

20
00:00:51.087 --> 00:00:54.027
The y is gonna come from for
this argument.

21
00:00:54.027 --> 00:00:56.160
The z is gonna come from there.

22
00:00:56.160 --> 00:00:59.800
Also as a convenience,
you can also write it this way.

23
00:00:59.800 --> 00:01:04.309
So basically, if you just say x without
the colon, that's syntax show that

24
00:01:04.309 --> 00:01:09.360
x colon, x y, same thing with y colon y,
and z is syntax show for z colon z.

25
00:01:09.360 --> 00:01:12.603
So this is basically just
a convenience way to do exactly

26
00:01:12.603 --> 00:01:14.330
the same thing as what we did.

27
00:01:14.330 --> 00:01:17.170
So these two functions
doexactly the same thing.

28
00:01:17.170 --> 00:01:21.340
And both of them will give you back
a point struct with x, y, and z populated.

29
00:01:22.960 --> 00:01:25.730
So we can also get values out of a point.

30
00:01:25.730 --> 00:01:29.030
So let's say that I've
defined my point like this.

31
00:01:29.030 --> 00:01:31.350
I can say x equals point dot x.

32
00:01:31.350 --> 00:01:35.320
I can also destruct ructions,
similar to what we did with tuples.

33
00:01:35.320 --> 00:01:37.653
So that looks like this,
I say let and then again,

34
00:01:37.653 --> 00:01:39.217
I have to say the name of it point.

35
00:01:39.217 --> 00:01:40.624
And then x comma y, comma z.

36
00:01:40.624 --> 00:01:44.110
And now x, y and
z will be local variables in scope.

37
00:01:44.110 --> 00:01:47.739
And they'll correspond to point dot x,
point dot y, and point dot z.

38
00:01:47.739 --> 00:01:50.423
So you can see that we have a pretty
similar feature set between structs

39
00:01:50.423 --> 00:01:51.220
and tuples.

40
00:01:51.220 --> 00:01:54.540
The main difference is that with tuples,
they're anonymous.

41
00:01:54.540 --> 00:01:57.423
You don't have to pick a name for
them upfront, like you do a structs.

42
00:01:57.423 --> 00:01:59.951
With structs, you have to pick a name,
you have to use a struct keyword,

43
00:01:59.951 --> 00:02:00.930
to find the name.

44
00:02:00.930 --> 00:02:04.203
And when you're creating one of them, or
when you're destructuring one of them,

45
00:02:04.203 --> 00:02:06.400
you have to use that same name.

46
00:02:06.400 --> 00:02:12.300
And in the case of tuples, they're
accessed by position, rather than by name.

47
00:02:12.300 --> 00:02:14.751
So with a tuple, it's dot 0, dot 1, dot 2.

48
00:02:14.751 --> 00:02:17.390
Whereas in struct,
it's actually the fields are named.

49
00:02:19.350 --> 00:02:20.961
If we want to we can
also use underscore and

50
00:02:20.961 --> 00:02:22.670
restructuring just like we did with tuple.

51
00:02:22.670 --> 00:02:23.880
And that looks a bit like this.

52
00:02:23.880 --> 00:02:27.729
We say y colon underscore rather than just
having an underscore kind of hanging out

53
00:02:27.729 --> 00:02:28.413
there to say.

54
00:02:28.413 --> 00:02:31.830
Is basically saying,
I care about x and z, but not about y.

55
00:02:31.830 --> 00:02:35.328
And actually, if you want, there's also
a dot dot syntax which basically means

56
00:02:35.328 --> 00:02:37.650
all the other fields pretend
they're underscores.

57
00:02:37.650 --> 00:02:38.620
I don't care about them.

58
00:02:38.620 --> 00:02:40.185
I only care about x and z.

59
00:02:40.185 --> 00:02:41.733
However, many of the fields
are on the struct.

60
00:02:41.733 --> 00:02:45.548
I wanna completely ignore them and
make them be underscores.

61
00:02:45.548 --> 00:02:47.802
And if you want, you can go as
far as to just say, I only want,

62
00:02:47.802 --> 00:02:48.875
I only care about one field.

63
00:02:48.875 --> 00:02:52.116
And all the others are underscores.

64
00:02:53.142 --> 00:02:58.000
Okay, similarly to tuples,
we can also make mutable structs.

65
00:02:58.000 --> 00:03:00.009
So here we're saying that,
mut point equals and

66
00:03:00.009 --> 00:03:01.584
again defining point in the same way.

67
00:03:01.584 --> 00:03:03.270
And then saying point dot x equals 5.

68
00:03:03.270 --> 00:03:05.800
So setting, changing that x
after the fact mutating it.

69
00:03:05.800 --> 00:03:09.350
One other note about structs
is that much like with tuples,

70
00:03:09.350 --> 00:03:13.050
you cannot change the number of
fields in a struct at runtime.

71
00:03:13.050 --> 00:03:14.320
However many you've got in here.

72
00:03:14.320 --> 00:03:17.011
So in this case, 3, that's all you get for
the entire life of the program.

73
00:03:17.011 --> 00:03:19.471
It can never have 3, never more than 3.

74
00:03:19.471 --> 00:03:22.444
Because I've defined it to be exactly 3,
that's all that you get.

75
00:03:22.444 --> 00:03:23.895
Can't add any new fields,

76
00:03:23.895 --> 00:03:27.630
can't change the names of the fields
all of that is completely fixed.

77
00:03:27.630 --> 00:03:30.501
All I can do is just change the values
that are associated with fields,

78
00:03:30.501 --> 00:03:32.060
like I did here.

79
00:03:32.060 --> 00:03:33.850
Any questions on that before we move on?

80
00:03:33.850 --> 00:03:38.530
&gt;&gt; So in that latest example, are you
actually changing the original struct.

81
00:03:38.530 --> 00:03:40.894
&gt;&gt; Yes.
&gt;&gt; Or are you just creating a new,

82
00:03:40.894 --> 00:03:43.930
x with a value of 5 on this new point?

83
00:03:43.930 --> 00:03:45.710
&gt;&gt; Yeah, so that's a great question.

84
00:03:45.710 --> 00:03:48.840
In this example, we are actually
mutating the original point.

85
00:03:48.840 --> 00:03:51.014
So in this example,
there's only one point.

86
00:03:51.014 --> 00:03:55.090
And it initially has an x of 1 and
then we change that to be an x of 5.

87
00:03:55.090 --> 00:03:58.900
So we're not creating a new point when we
do this, we're mutating the existing one..

88
00:03:58.900 --> 00:04:03.157
&gt;&gt; Because these are named and
not positional, that means that you.

89
00:04:03.157 --> 00:04:06.625
If you were to like reverse
your destructuring syntax or

90
00:04:06.625 --> 00:04:10.919
your assignment syntax,
it still be applied to each variable here.

91
00:04:10.919 --> 00:04:14.631
Second to the last example
you kind of did that.

92
00:04:14.631 --> 00:04:18.964
Yeah, right, because these are based
on name rather than by order.

93
00:04:18.964 --> 00:04:21.740
Yeah, you can rearrange these however
you want when you're destructuring.

94
00:04:21.740 --> 00:04:23.980
And also when you're assigning,
you don't have to assign x first.

95
00:04:23.980 --> 00:04:26.379
I happen to here but
you can totally scramble these up,

96
00:04:26.379 --> 00:04:28.360
the order doesn't matter.

97
00:04:28.360 --> 00:04:31.590
At least as far as assigning and
reading things out of them.

98
00:04:31.590 --> 00:04:35.010
&gt;&gt; Can you make nested tuples or structs?

99
00:04:35.010 --> 00:04:37.082
&gt;&gt; Sure, yeah you can make
nested tuples and structs.

100
00:04:37.082 --> 00:04:39.391
You can nest a struct
inside another struct.

101
00:04:39.391 --> 00:04:40.646
You can nest a tuple inside a struct.

102
00:04:40.646 --> 00:04:42.510
The tuple inside a struct, inside a tuple.

103
00:04:42.510 --> 00:04:44.921
You can go totally as far
as you want with that.

