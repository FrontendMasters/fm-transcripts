WEBVTT

1
00:00:00.200 --> 00:00:03.220
Let's talk about floats briefly that
was a little bit about strings.

2
00:00:03.220 --> 00:00:07.480
You can see that string interpolation
works with not only strings, but

3
00:00:07.480 --> 00:00:09.610
also with things like floats.

4
00:00:09.610 --> 00:00:13.380
So here we have x is 1.1,
that's a float or a floating point number.

5
00:00:13.380 --> 00:00:15.060
We have y which is 2.2.

6
00:00:15.060 --> 00:00:17.350
Then I can say x times y is and
then multiply x by y and

7
00:00:17.350 --> 00:00:19.380
it'll just insert the answer right there.

8
00:00:20.750 --> 00:00:23.780
This will print out perhaps surprisingly,
x times y is 2.42.

9
00:00:23.780 --> 00:00:27.014
And then a bunch of zeros,
not a four, but it may or

10
00:00:27.014 --> 00:00:30.328
may not be surprising to
you depending on if you've

11
00:00:30.328 --> 00:00:34.970
encountered the traditional IEEE
binary floating point operations.

12
00:00:34.970 --> 00:00:40.530
So, basically this is done because
binary floats are very fast.

13
00:00:40.530 --> 00:00:44.824
So, if you wanted to have this to give
you the expected answer that we would

14
00:00:44.824 --> 00:00:49.470
expect from normal math, that would be
a significant performance cost because

15
00:00:49.470 --> 00:00:52.900
modern hardware can do this
in like one instruction.

16
00:00:52.900 --> 00:00:57.071
Whereas if you want to do decimal math, it
needs a lot more overhead than binary math

17
00:00:57.071 --> 00:01:00.260
does like this when it comes
to floating point numbers.

18
00:01:00.260 --> 00:01:04.729
So unfortunately, this is kinda what we're
stuck with weaving like the programming

19
00:01:04.729 --> 00:01:08.562
community, at least when we want
really high performance stuff.

20
00:01:08.562 --> 00:01:13.900
By the way, another thing to note is
that a difference between println and

21
00:01:13.900 --> 00:01:17.580
main, so main is a function,
println is a macro.

22
00:01:17.580 --> 00:01:20.690
So that's sorta what this
exclamation point means.

23
00:01:20.690 --> 00:01:23.323
We're not gonna really cover
macros in this course,

24
00:01:23.323 --> 00:01:27.183
but the main thing to know about them is
that macros are a way to do something that

25
00:01:27.183 --> 00:01:29.250
works a bit like a function call.

26
00:01:29.250 --> 00:01:31.631
But rather than calling the function,

27
00:01:31.631 --> 00:01:35.460
it's sorta doing some code
transformation instead.

28
00:01:35.460 --> 00:01:38.854
So what println is actually doing is it's
taking these arguments we're giving it

29
00:01:38.854 --> 00:01:40.040
the println macro.

30
00:01:40.040 --> 00:01:43.486
And it's going to translate them at
compile time into some number of other

31
00:01:43.486 --> 00:01:47.211
function calls, like, for example,
stapling together these strings taking

32
00:01:47.211 --> 00:01:50.602
the result of this multiplication and
then turning that into a string and

33
00:01:50.602 --> 00:01:53.550
then concatenating it with a string and
so forth.

34
00:01:53.550 --> 00:01:57.603
We're not

35
00:01:57.603 --> 00:02:02.557
gonna define

36
00:02:02.557 --> 00:02:07.961
our own macros

37
00:02:07.961 --> 00:02:14.270
in this course.

38
00:02:15.800 --> 00:02:19.400
Okay, let's talk about mutability briefly.

39
00:02:19.400 --> 00:02:25.108
So here I've said let x = 1.1, x = 2.2.

40
00:02:25.108 --> 00:02:29.045
Now this is a pretty normal looking piece
of code in a language like JavaScript,

41
00:02:29.045 --> 00:02:32.630
in fact, this could be JavaScript
code like valid JavaScript code, and

42
00:02:32.630 --> 00:02:33.890
it would work just fine.

43
00:02:33.890 --> 00:02:37.536
An x would start off being 1.1 and
then it would get assigned to 2.2.

44
00:02:37.536 --> 00:02:39.430
But in rust, that would not work.

45
00:02:39.430 --> 00:02:42.726
In fact, you would get this compile
error cannot assign twice to immutable

46
00:02:42.726 --> 00:02:43.310
variable x.

47
00:02:44.650 --> 00:02:48.878
So in rust let works somewhat
similarly to const in JavaScript,

48
00:02:48.878 --> 00:02:52.088
which is to say that once
you declare this value,

49
00:02:52.088 --> 00:02:56.102
you're not allowed to reassign
to it when you've used let.

50
00:02:56.102 --> 00:02:58.432
We'll see in a second a way
that you can make it so

51
00:02:58.432 --> 00:03:00.600
that it's allowed to be reassigned to you.

52
00:03:00.600 --> 00:03:02.730
But by default, you can't do that.

53
00:03:02.730 --> 00:03:05.440
Now worth noting that in this
error message rust refers to

54
00:03:05.440 --> 00:03:07.750
this as an immutable variable.

55
00:03:07.750 --> 00:03:10.415
And they mean that they don't
just mean that x is const,

56
00:03:10.415 --> 00:03:13.430
which in JavaScript means
that you can't assign to it.

57
00:03:13.430 --> 00:03:16.801
But it's also that x is immutable, which
means that if x were a more complicated

58
00:03:16.801 --> 00:03:19.264
type, like here,
we just have a floating point number but

59
00:03:19.264 --> 00:03:22.081
if we had some sorta structure that
had multiple values inside it,

60
00:03:22.081 --> 00:03:25.780
you would not be able to mutate that
structure like we would in JavaScript.

61
00:03:25.780 --> 00:03:29.183
So in a sense, if this were JavaScript,
it would be not only const x but

62
00:03:29.183 --> 00:03:32.880
also it would be assigned to something
like object.freeze where basically

63
00:03:32.880 --> 00:03:36.690
it's saying yeah, this value right here,
not only can we not really sign up,

64
00:03:36.690 --> 00:03:38.470
we also can't mutate it.

65
00:03:38.470 --> 00:03:41.920
So that's what let does in rust,
it does both of those things.

66
00:03:41.920 --> 00:03:45.344
Now, if you read the entire error
message you might have seen

67
00:03:45.344 --> 00:03:48.280
the clue to how you can
make this thing mutable.

68
00:03:48.280 --> 00:03:52.230
If you want, you can say let
mut being short for mutable x.

69
00:03:52.230 --> 00:03:54.596
And then now not only
can you reassign x but

70
00:03:54.596 --> 00:03:58.395
also you can mutate its contents
if it had a more complicated type.

71
00:03:58.395 --> 00:04:01.858
Then you can see there's a little help
right here, make this binding mutable,

72
00:04:01.858 --> 00:04:04.730
make it be mut x and
then it'll allow you to do that.

73
00:04:04.730 --> 00:04:08.921
So, to sum up, let and
rust means both const and immutable and

74
00:04:08.921 --> 00:04:12.840
let mut means neither const nor
immutable anymore.

75
00:04:12.840 --> 00:04:17.042
So rust likes to have things be immutable
by default, which is why you need to add

76
00:04:17.042 --> 00:04:20.572
this extra keyword if you want to
occasionally opt into mutation.

77
00:04:20.572 --> 00:04:22.483
So in practice in rust programs,

78
00:04:22.483 --> 00:04:26.579
it's way more common to use let than
to use let mut but from time to time,

79
00:04:26.579 --> 00:04:31.180
I do find myself using let mut if there's
something that I want to make mutable.

