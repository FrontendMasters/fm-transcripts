WEBVTT

1
00:00:00.270 --> 00:00:04.225
Basically, when people talk about
memory management in practice,

2
00:00:04.225 --> 00:00:06.690
what they tend to mean
is this question of.

3
00:00:06.690 --> 00:00:09.952
When is it safe to mark something
on the heap as no longer in use.

4
00:00:09.952 --> 00:00:15.610
Allocating stuff on the heap,
It's definitely non trivial.

5
00:00:15.610 --> 00:00:17.526
There's a good bit of
logic going on in there.

6
00:00:17.526 --> 00:00:19.319
But it's not particularly tricky.

7
00:00:19.319 --> 00:00:20.186
Generally speaking.

8
00:00:20.186 --> 00:00:23.725
Figuring out when it's safe to
free memory is a lot trickier.

9
00:00:23.725 --> 00:00:26.813
So, let's walk through an example of this.

10
00:00:26.813 --> 00:00:30.028
So, let's say I have a function
called get final orders and

11
00:00:30.028 --> 00:00:32.674
returns in i64 and
it makes this vec of orders.

12
00:00:32.674 --> 00:00:33.723
So 1, 2, 3, 4.

13
00:00:33.723 --> 00:00:35.918
Let's say,
these are counts of like different orders.

14
00:00:35.918 --> 00:00:39.786
Some sort of ordering system and
we've got total order is 0.

15
00:00:39.786 --> 00:00:41.582
That's defined as mutable.

16
00:00:41.582 --> 00:00:43.371
Then we iterate through
each of the orders and

17
00:00:43.371 --> 00:00:44.980
we say total orders plus equals orders.

18
00:00:44.980 --> 00:00:47.548
And then finally,
we call some function called finish,

19
00:00:47.548 --> 00:00:50.608
which does some sort of finishing
calculation on the total orders.

20
00:00:50.608 --> 00:00:52.713
And then we finally return that.

21
00:00:52.713 --> 00:00:54.072
Okay.

22
00:00:54.072 --> 00:00:56.911
So, this is a function where almost
everything that's happening here

23
00:00:56.911 --> 00:00:58.009
is happening on the stack.

24
00:00:58.009 --> 00:01:01.380
There's only one heap allocation
we're doing which is this vec macro.

25
00:01:01.380 --> 00:01:03.626
Everything else is just basic arithmetic.

26
00:01:03.626 --> 00:01:07.418
We're iterating over that thing and
we're calling finished passing an integer.

27
00:01:07.418 --> 00:01:11.364
So lots of stack stuff, but
only one particular heap interaction here.

28
00:01:11.364 --> 00:01:15.149
So this is our sort of one call
to alloc in the whole thing.

29
00:01:15.149 --> 00:01:20.847
And the question is, where if
anywhere do we want to that memory?

30
00:01:20.847 --> 00:01:24.269
Where is it safe for us to say,
hey, bookkeeping system.

31
00:01:24.269 --> 00:01:26.644
These four bytes,
they are no longer in use,

32
00:01:26.644 --> 00:01:29.781
you can totally feel free to use them for
whatever you want.

33
00:01:29.781 --> 00:01:32.486
Because, I'm not gonna
use them anymore and

34
00:01:32.486 --> 00:01:34.988
you can release them back to the program.

35
00:01:34.988 --> 00:01:37.676
Now importantly,
we do have the option of saying,

36
00:01:37.676 --> 00:01:40.627
hey, you know what,
just never deallocate anything.

37
00:01:40.627 --> 00:01:43.898
We're only gonna ever do alloc and
we're just going to forget about the whole

38
00:01:43.898 --> 00:01:45.820
freeing up once we're
done with that thing.

39
00:01:45.820 --> 00:01:47.699
Just alloc and
that's all we're gonna have.

40
00:01:47.699 --> 00:01:50.164
You can do this but this creates
what's known as a memory leak.

41
00:01:50.164 --> 00:01:53.278
where basically the longer your
program runs, it keeps doing more and

42
00:01:53.278 --> 00:01:54.184
more allocations.

43
00:01:54.184 --> 00:01:55.989
But it never actually freeze anything,

44
00:01:55.989 --> 00:01:58.067
even things that are no
longer in use anymore.

45
00:01:58.067 --> 00:02:01.524
Which means that your programs memory
usage goes up and up and then eventually,

46
00:02:01.524 --> 00:02:04.429
if you're unlucky, your program
runs completely out of memory.

47
00:02:04.429 --> 00:02:08.232
Or, as is more common, you just noticed
that your system starts getting really

48
00:02:08.232 --> 00:02:11.203
slow and you're like,
what's what's using all my memory?

49
00:02:11.203 --> 00:02:14.730
And you look in some program is
using a huge amount of memory.

50
00:02:14.730 --> 00:02:17.034
Maybe it's because it actually
needs all that memory but

51
00:02:17.034 --> 00:02:19.342
sometimes it could be because
of a memory leak like this.

52
00:02:19.342 --> 00:02:21.771
Where you allocate something and
don't deallocate it.

53
00:02:21.771 --> 00:02:24.753
So, we do want to deallocate things once
we're done with them to prevent memory

54
00:02:24.753 --> 00:02:26.498
leaks because memory
leaks are undesirable.

55
00:02:26.498 --> 00:02:32.533
So, the question then becomes, when,
when do we deallocate this vec.

56
00:02:32.533 --> 00:02:35.797
So, because it's not on the stack because
it's on the heap deallocation is not going

57
00:02:35.797 --> 00:02:36.850
to happen automatically.

58
00:02:36.850 --> 00:02:39.753
We actually need to and
by we, I mean rust,

59
00:02:39.753 --> 00:02:44.366
somebody needs to call a dealloc
function at the appropriate time.

60
00:02:44.366 --> 00:02:48.252
In the manual memory management world
like this is basically what's done in C,

61
00:02:48.252 --> 00:02:50.920
you actually literally call
this function yourself.

62
00:02:50.920 --> 00:02:53.645
In C the function is called malloc.

63
00:02:53.645 --> 00:02:55.211
Not alloc short for memory allocate.

64
00:02:55.211 --> 00:02:58.253
But basically in C, you actually
literally do call malloc yourself and

65
00:02:58.253 --> 00:03:00.800
then you call a function called
free which is like dealloc.

66
00:03:00.800 --> 00:03:03.894
Which basically says, okay, I'm done with
this memory, you can have it back now.

67
00:03:03.894 --> 00:03:07.179
And you actually have to decide on
your own where to put those things.

68
00:03:07.179 --> 00:03:09.918
So, let's say that I was
doing this in the C style.

69
00:03:09.918 --> 00:03:13.031
This is not how we do it in rust,
but just for the sake of example,

70
00:03:13.031 --> 00:03:15.816
let's say that I decided to
free those bytes right here.

71
00:03:15.816 --> 00:03:17.394
So I said, okay.

72
00:03:17.394 --> 00:03:18.916
We allocated the orders up here and

73
00:03:18.916 --> 00:03:22.024
then I de-allocated them right here
before returning final orders.

74
00:03:22.024 --> 00:03:23.041
That would work.

75
00:03:23.041 --> 00:03:23.817
Sure, no problem.

76
00:03:23.817 --> 00:03:26.239
Because at this point, I mean,
we're done with the orders.

77
00:03:26.239 --> 00:03:28.894
We, in fact, the last time we used them
was back up in here when we reiterated

78
00:03:28.894 --> 00:03:31.096
them, so, it's no problem if
we deallocate them right here.

79
00:03:31.096 --> 00:03:34.747
If this works like everything's good,
we allocate it, we deallocate it.

80
00:03:34.747 --> 00:03:37.888
When this function returns,
the heap is totally cleared out.

81
00:03:37.888 --> 00:03:42.369
All the new stuff we introduce has
been marked as no longer in use, and

82
00:03:42.369 --> 00:03:43.847
everybody's happy.

83
00:03:43.847 --> 00:03:44.543
Great.

84
00:03:44.543 --> 00:03:50.425
Now, let's say that instead,
I decided to deallocate it here.

85
00:03:50.425 --> 00:03:51.803
That's the thing you could do and see.

86
00:03:51.803 --> 00:03:55.267
So, I'm running through my
back here I allocated up here.

87
00:03:55.267 --> 00:03:57.844
And then I say, let my total reach 00 and

88
00:03:57.844 --> 00:04:01.684
I deallocate orders, and
then I iterate through the orders.

89
00:04:01.684 --> 00:04:03.412
That doesn't sound good.

90
00:04:03.412 --> 00:04:04.533
It allocated it.

91
00:04:04.533 --> 00:04:06.478
So, what bad things could happen there?

92
00:04:06.478 --> 00:04:11.353
Well, you remember back when we talked
about our sort of mental map of memory.

93
00:04:11.353 --> 00:04:12.916
Now we have all the ones and zeros and

94
00:04:12.916 --> 00:04:15.484
some of them are sort of marked
as in use and others are not.

95
00:04:15.484 --> 00:04:18.630
And we've seen both on the stack and
on the heap that basically,

96
00:04:18.630 --> 00:04:22.534
the memory management system is or the
bookkeeping system is just going to say,

97
00:04:22.534 --> 00:04:24.943
hey, this thing is available
this thing is not.

98
00:04:24.943 --> 00:04:27.000
So, if we've told it
this thing is available.

99
00:04:27.000 --> 00:04:30.638
There could be code
running in another thread.

100
00:04:30.638 --> 00:04:32.553
comes along and says, what?

101
00:04:32.553 --> 00:04:35.611
I just realized that
this is available memory.

102
00:04:35.611 --> 00:04:36.372
Great.

103
00:04:36.372 --> 00:04:37.376
I wanna I want to put it back there.

104
00:04:37.376 --> 00:04:40.781
I'm gonna write the numbers 7259 and
1200 into that.

105
00:04:40.781 --> 00:04:42.416
And then when I go through and

106
00:04:42.416 --> 00:04:46.173
iterate it instead of it being
1234 it's now like 5729.

107
00:04:46.173 --> 00:04:48.117
And you know, 2400 I'm like, What?

108
00:04:48.117 --> 00:04:49.191
What are these crazy numbers?

109
00:04:49.191 --> 00:04:53.315
I said 1234 and now I'm getting totally
bananas like ridiculous numbers that had

110
00:04:53.315 --> 00:04:55.155
nothing to do with what I put in there.

111
00:04:55.155 --> 00:04:56.451
Why is that happening?

112
00:04:56.451 --> 00:05:01.240
Well, what happened was that I
deallocated it which told the bookkeeping

113
00:05:01.240 --> 00:05:03.103
system this was available.

114
00:05:03.103 --> 00:05:06.800
And some other part of my program
that was running in parallel,

115
00:05:06.800 --> 00:05:09.608
wrote into that memory and
now I'm in trouble.

116
00:05:09.608 --> 00:05:12.123
It's not even necessarily
another part of my program.

117
00:05:12.123 --> 00:05:13.859
If I have like another
function call in here.

118
00:05:13.859 --> 00:05:15.060
That could also happen.

119
00:05:15.060 --> 00:05:19.269
So, this is what's called a use after
free which basically means using memory

120
00:05:19.269 --> 00:05:22.474
after it's been marked as free
in the bookkeeping system.

121
00:05:22.474 --> 00:05:23.704
That's to say available.

122
00:05:23.704 --> 00:05:26.404
And these are really nasty bugs.

123
00:05:26.404 --> 00:05:30.552
I remember a long time ago when
I was writing an RPG and in C,

124
00:05:30.552 --> 00:05:36.078
I had this symptom where sometimes you
would go into this one town in the game.

125
00:05:36.078 --> 00:05:40.024
And instead of having a menu of items
to be able to buy, the shopkeeper

126
00:05:40.024 --> 00:05:44.392
would just spewed gibberish at you just
like random got like ASCII garbage.

127
00:05:44.392 --> 00:05:47.757
And I eventually figured out that what had
happened was I've had to use after free

128
00:05:47.757 --> 00:05:48.311
somewhere.

129
00:05:48.311 --> 00:05:52.068
And so, contents of that store were
getting overwritten by random memory

130
00:05:52.068 --> 00:05:54.382
garbage from somewhere
else was really bad.

131
00:05:54.382 --> 00:05:56.633
And they're really,
really hard to track down.

132
00:05:56.633 --> 00:06:00.793
So, this is why people generally prefer
not to do manual memory management

133
00:06:00.793 --> 00:06:01.461
like this.

134
00:06:01.461 --> 00:06:03.578
If you put the dealloc in the wrong place,

135
00:06:03.578 --> 00:06:06.978
it can cause a use after free which
are really, really nasty bugs.

136
00:06:06.978 --> 00:06:08.046
Okay.

137
00:06:08.046 --> 00:06:10.739
So, this is a use after free bug.

138
00:06:10.739 --> 00:06:11.660
We don't want one.

139
00:06:11.660 --> 00:06:18.344
This is a kind of illustration
of what we just talked about.

140
00:06:18.344 --> 00:06:19.998
We allocate the thing and

141
00:06:19.998 --> 00:06:24.817
then somebody else writes into this
memory that we had marked as unused.

142
00:06:24.817 --> 00:06:26.971
And now when we iterate through it,
we're seeing the wrong stuff.

143
00:06:26.971 --> 00:06:31.646
So, however, if we deallocate down here,
again, not a problem,

144
00:06:31.646 --> 00:06:36.331
because we're past the point where
we're iterating over orders.

145
00:06:36.331 --> 00:06:40.325
So, the fact that it's free
now really has no downside.

146
00:06:40.325 --> 00:06:42.076
Now what if we did this?

147
00:06:42.076 --> 00:06:45.762
What if we said I'm gonna do it down here.

148
00:06:45.762 --> 00:06:47.711
And also I'm gonna do it up here as well.

149
00:06:47.711 --> 00:06:52.043
Why not just deallocate it more like
let's, if one is good, two must be better.

150
00:06:52.043 --> 00:06:52.663
Right?

151
00:06:52.663 --> 00:06:56.535
Well, this actually creates a different
type of bug known as a double free and

152
00:06:56.535 --> 00:07:00.006
believe it or not double frees can
be even worse than use after frees.

153
00:07:00.006 --> 00:07:02.368
So, here's what can
happen in a double free.

154
00:07:02.368 --> 00:07:05.018
First I say, deallocate these orders.

155
00:07:05.018 --> 00:07:09.306
Now what that means in practice is
what deallocate takes is it takes

156
00:07:09.306 --> 00:07:11.306
the particular memory index.

157
00:07:11.306 --> 00:07:15.090
Like from that vec metadata
struct of the first element

158
00:07:15.090 --> 00:07:17.812
of the the numbers that are in that vec.

159
00:07:17.812 --> 00:07:20.038
It says, yeah, make that memory address.

160
00:07:20.038 --> 00:07:21.678
Make that marked as free.

161
00:07:21.678 --> 00:07:23.088
Says, okay, no problem.

162
00:07:23.088 --> 00:07:26.456
And so, then it's going through and
saying, all right,

163
00:07:26.456 --> 00:07:28.118
I've marked those as free.

164
00:07:28.118 --> 00:07:30.834
Now let's go on let's
keep running our program.

165
00:07:30.834 --> 00:07:33.217
And somewhere inside finish,

166
00:07:33.217 --> 00:07:38.170
let's say that this finished
function call is asking for avec.

167
00:07:38.170 --> 00:07:40.714
And again, the bookkeeping system says,
good news.

168
00:07:40.714 --> 00:07:42.291
We have this thing called orders.

169
00:07:42.291 --> 00:07:44.326
I found some some nice space for your vec.

170
00:07:44.326 --> 00:07:47.238
I'm gonna assign you to
that indexing on the heap.

171
00:07:47.238 --> 00:07:48.074
So it's great.

172
00:07:48.074 --> 00:07:51.702
So, then finish goes and
populates that that vec that memory index.

173
00:07:51.702 --> 00:07:54.841
And then the next thing we
do after this as we go and

174
00:07:54.841 --> 00:07:59.756
mark that same memory index, which now
belongs to finish, as freed again.

175
00:07:59.756 --> 00:08:02.854
So now, we've created a use after free for
someone else.

176
00:08:02.854 --> 00:08:06.332
We've actually created accidentally
created a use after free for

177
00:08:06.332 --> 00:08:07.828
whatever finish was doing.

178
00:08:07.828 --> 00:08:11.336
And so, this is basically not only is it a
use after free but it's a use after free.

179
00:08:11.336 --> 00:08:15.594
That's even harder to diagnose than
a regular use after free which are already

180
00:08:15.594 --> 00:08:16.440
really nasty.

181
00:08:16.440 --> 00:08:20.063
Because the culprit for the cause of
use after free isn't actually even in

182
00:08:20.063 --> 00:08:23.168
the function that's allocating
the thing in the first place.

183
00:08:23.168 --> 00:08:27.825
So, double frees can be even worse even
nastier to debug than use after free.

184
00:08:27.825 --> 00:08:30.785
And definitely they can cause those
same kinds of symptoms where you just

185
00:08:30.785 --> 00:08:32.345
see random memory gibberish around.

186
00:08:32.345 --> 00:08:36.683
So, fortunately, rust does not ask
us to do manual memory management.

187
00:08:36.683 --> 00:08:39.491
That would be pretty unpleasant.

188
00:08:39.491 --> 00:08:44.336
Instead, rust is going to figure out
where to insert the dealloc just in

189
00:08:44.336 --> 00:08:45.560
the right place.

190
00:08:45.560 --> 00:08:49.572
So, that there's no chance of a use after
free and no chance of a double free.

191
00:08:49.572 --> 00:08:53.302
Really everything we've
been building up to,

192
00:08:53.302 --> 00:08:59.189
to this point is kind of building up to
how rust decides when to free memory.

193
00:08:59.189 --> 00:09:03.136
That's sort of this crucial question
that really separates a lot of different

194
00:09:03.136 --> 00:09:07.047
programming languages in terms of
performance and in terms of reliability.

195
00:09:07.047 --> 00:09:08.331
Okay.

196
00:09:08.331 --> 00:09:10.100
So.

197
00:09:10.100 --> 00:09:15.650
Note, manual memory management
like this is notorious for

198
00:09:15.650 --> 00:09:21.873
causing really serious not just bugs but
also security problems.

199
00:09:21.873 --> 00:09:27.088
So ,in 2018, Microsoft ran a study
of critical vulnerabilities and

200
00:09:27.088 --> 00:09:30.378
their causes over the past, like 12 years.

201
00:09:30.378 --> 00:09:31.819
So, this is going back to 2006.

202
00:09:31.819 --> 00:09:37.710
So, the dark blue line, that is to say
that most of this stuff that is about 70%,

203
00:09:37.710 --> 00:09:40.581
were caused by memory safety problems.

204
00:09:40.581 --> 00:09:43.968
Which is to say that things like
use after free or double free or,

205
00:09:43.968 --> 00:09:45.743
in other cases buffer overruns.

206
00:09:45.743 --> 00:09:50.173
But basically different problems
related to manual memory management and

207
00:09:50.173 --> 00:09:52.641
dealing with memory manually like this.

208
00:09:52.641 --> 00:09:57.078
And everything else put
together was around 30%.

209
00:09:57.078 --> 00:10:00.368
So, not all of these are used after frees.

210
00:10:00.368 --> 00:10:01.641
Not all these are double frees.

211
00:10:01.641 --> 00:10:04.943
But the point is that, manual memory
management and dealing with that stuff

212
00:10:04.943 --> 00:10:07.534
manually, like like people have done for
a very long time.

213
00:10:07.534 --> 00:10:10.978
And see, it's not just a matter
of performance and convenience.

214
00:10:10.978 --> 00:10:15.436
It's actually something that can really
seriously cause security problems for

215
00:10:15.436 --> 00:10:16.295
your program.

216
00:10:16.295 --> 00:10:20.009
So, it's error prone,
people make mistakes with it.

217
00:10:20.009 --> 00:10:22.721
And some of those errors
cause security problems.

218
00:10:22.721 --> 00:10:26.096
So this is one of the things
that rust advocates like

219
00:10:26.096 --> 00:10:29.326
to point to as a really
big selling point of rust.

220
00:10:29.326 --> 00:10:33.278
Is that, it's a way to get this same
level of performance is CNC plus plus.

221
00:10:33.278 --> 00:10:36.427
Without nearly the risk of
critical vulnerabilities.

222
00:10:36.427 --> 00:10:38.398
So, a lot of languages though,

223
00:10:38.398 --> 00:10:42.636
what they will do is they'll do
what's called garbage collection.

224
00:10:42.636 --> 00:10:44.051
You've probably heard this term.

225
00:10:44.051 --> 00:10:47.648
So, garbage collection is absolutely
a way of deciding when to free memory.

226
00:10:47.648 --> 00:10:50.874
So, here's how this is working
like a garbage collected language.

227
00:10:50.874 --> 00:10:54.898
So like, JavaScript is garbage collected,
Python, Ruby, Java.

228
00:10:54.898 --> 00:10:59.478
Basically all of the like top 10 most
popular languages, except for C and

229
00:10:59.478 --> 00:11:02.034
c++ are garbage collected languages.

230
00:11:02.034 --> 00:11:03.927
So, what they do is when they allocate,

231
00:11:03.927 --> 00:11:07.728
they actually go to the garbage collector
which has its own bookkeeping system.

232
00:11:07.728 --> 00:11:09.329
It has a little bit of extra overhead.

233
00:11:09.329 --> 00:11:12.169
So this is one of the downsides
of garbage collection is that,

234
00:11:12.169 --> 00:11:14.466
the allocation system
the bookkeeping system for

235
00:11:14.466 --> 00:11:17.484
garbage collectors tends to have
more overhead per allocation.

236
00:11:17.484 --> 00:11:19.743
Then the type that C and c++ and rust use.

237
00:11:19.743 --> 00:11:23.450
They both do have some overhead though.

238
00:11:23.450 --> 00:11:27.510
So, it says okay, hey, garbage collector,
I wanna allocate this thing.

239
00:11:27.510 --> 00:11:29.857
And then basically,
eventually you see this.

240
00:11:29.857 --> 00:11:32.663
A giant beach ball like your
program grinds to a halt and

241
00:11:32.663 --> 00:11:35.541
what's happening there is
what's known as a GC pause.

242
00:11:35.541 --> 00:11:37.019
Right, garbage collection pause.

243
00:11:37.019 --> 00:11:40.557
And what's happening is
basically that at some point,

244
00:11:40.557 --> 00:11:44.862
the garbage collector runs and
it says, I need to go and track down.

245
00:11:44.862 --> 00:11:47.281
It's like it's been a while
since we freed any memory.

246
00:11:47.281 --> 00:11:50.534
I need to go and track down all
the things that we've allocated and

247
00:11:50.534 --> 00:11:52.321
see if any of them are still usable.

248
00:11:52.321 --> 00:11:55.938
Or if they've just become totally
unreachable by all the stuff that's

249
00:11:55.938 --> 00:11:57.151
that's still usable.

250
00:11:57.151 --> 00:12:01.263
And this garbage collection sort
of pass processes like a GC pass.

251
00:12:01.263 --> 00:12:04.052
Is notorious for causing slowdowns and

252
00:12:04.052 --> 00:12:09.218
systems because it can have a lot of
like it can take a lot of performance.

253
00:12:09.218 --> 00:12:13.438
And also it can potentially take
a significant amount of extra memory,

254
00:12:13.438 --> 00:12:16.040
both in terms of
the allocation overhead and

255
00:12:16.040 --> 00:12:18.804
then also in terms of
like the GC pass running.

256
00:12:18.804 --> 00:12:22.034
Depending on the garbage
collection algorithm and how,

257
00:12:22.034 --> 00:12:24.330
like robust the the implementation is.

258
00:12:24.330 --> 00:12:27.734
Actually had a friend who was
working at a company where

259
00:12:27.734 --> 00:12:29.960
they had a really big Java back end.

260
00:12:29.960 --> 00:12:33.056
And their garbage
collection pauses were so

261
00:12:33.056 --> 00:12:36.912
bad that it would actually
take down the whole system.

262
00:12:36.912 --> 00:12:40.959
Because what would happen is,
the services would get so clogged down.

263
00:12:40.959 --> 00:12:43.668
Waiting for the garbage collector
to finish that the load

264
00:12:43.668 --> 00:12:45.992
balancer would conclude
that they must be dead.

265
00:12:45.992 --> 00:12:48.230
They must have gone down
because they was taking so

266
00:12:48.230 --> 00:12:51.980
long to respond to everything and it would
kick them out of the load balancing pool.

267
00:12:51.980 --> 00:12:53.984
And then, this would just happen.

268
00:12:53.984 --> 00:12:55.183
That would cause a cascading failure.

269
00:12:55.183 --> 00:12:57.383
The entire application would go down.

270
00:12:57.383 --> 00:12:58.797
So garbage collection,

271
00:12:58.797 --> 00:13:03.455
it is convenient in the sense that you
basically only worried about allocations.

272
00:13:03.455 --> 00:13:06.727
And then you just let the garbage
collector, take care of the deallocations.

273
00:13:06.727 --> 00:13:11.454
But, it does have this pretty serious
downside of performance which can in

274
00:13:11.454 --> 00:13:13.940
some cases actually lead to failures.

