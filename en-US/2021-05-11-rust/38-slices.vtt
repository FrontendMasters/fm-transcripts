WEBVTT

1
00:00:00.000 --> 00:00:01.559
So let's move on to slices.

2
00:00:01.559 --> 00:00:06.247
So we talked about like, here's a way
we can define our nums vec![1, 2, 3].

3
00:00:06.247 --> 00:00:10.803
And how on the stack this is represented
as vecMetadata and then the actual 1,

4
00:00:10.803 --> 00:00:12.673
2 and 3 are stored on the heap.

5
00:00:12.673 --> 00:00:13.637
So here's our heap.

6
00:00:13.637 --> 00:00:15.850
We've got our
first_elem_indexes right there.

7
00:00:15.850 --> 00:00:17.406
And then this has a.

8
00:00:17.406 --> 00:00:19.525
Let's say a capacitor sorry,

9
00:00:19.525 --> 00:00:24.343
I guess this should have had four
full length is four, but no big deal.

10
00:00:24.343 --> 00:00:27.728
So a slice is basically when you
say I wanna reuse that heat memory.

11
00:00:27.728 --> 00:00:32.507
I just wanna make a new thing on the stack
that just basically has different

12
00:00:32.507 --> 00:00:33.287
metadata.

13
00:00:33.287 --> 00:00:37.557
I just wanna like reference
these same pieces of data.

14
00:00:37.557 --> 00:00:40.170
Without like copying it without
cloning it without having to duplicate

15
00:00:40.170 --> 00:00:41.000
anything on the heap.

16
00:00:41.000 --> 00:00:44.003
I just wanna represent like
maybe a sub section of it,

17
00:00:44.003 --> 00:00:45.821
or maybe even the entire thing.

18
00:00:45.821 --> 00:00:50.769
So this slice says, ampersand nums,
bracket 0 dot dot 2.

19
00:00:50.769 --> 00:00:54.746
And basically what this does is it
makes something called sliceMetadata.

20
00:00:54.746 --> 00:00:57.981
Which looks a lot like vecMetadata except
that it's got the first element next

21
00:00:57.981 --> 00:01:00.446
that part's the same and
the length that part's the same.

22
00:01:00.446 --> 00:01:05.374
But it doesn't have a capacity because
slices always refer to some other

23
00:01:05.374 --> 00:01:06.998
existing allocation.

24
00:01:06.998 --> 00:01:10.046
That's where the ampersand comes from
is slices are actually reference types.

25
00:01:10.046 --> 00:01:11.966
They're basically saying, you know what?

26
00:01:11.966 --> 00:01:17.958
I want to look at some sub slice,
if you will, [LAUGH] Of an existing vec.

27
00:01:17.958 --> 00:01:21.670
So slices are never owned,
this is not ever going to be deallocated.

28
00:01:21.670 --> 00:01:25.757
It's basically saying, I'm just
referencing some data that's already been

29
00:01:25.757 --> 00:01:28.569
allocated on the heap,
in some other data structure.

30
00:01:28.569 --> 00:01:31.717
And when that data structure goes out
of scope, it's gonna get deallocated.

31
00:01:31.717 --> 00:01:34.456
But I never get deallocated because
I'm not responsible for anything.

32
00:01:34.456 --> 00:01:37.758
I'm just sort of piggybacking off
of somebody else's allocation.

33
00:01:37.758 --> 00:01:41.360
And remembering from earlier, we were
talking about how these allocations can be

34
00:01:41.360 --> 00:01:43.406
kind of expensive from
a normal perspective.

35
00:01:43.406 --> 00:01:47.439
So slices can be a really nice way to
avoid having to do a new allocation having

36
00:01:47.439 --> 00:01:49.467
to go back to the bookkeeping system.

37
00:01:49.467 --> 00:01:52.372
While still being able to access
sub slices of the data, or

38
00:01:52.372 --> 00:01:55.291
in some cases even just like
making kind of a lightweight.

39
00:01:55.291 --> 00:02:00.075
Quasi copy of it without actually
having to clone everything.

40
00:02:00.075 --> 00:02:03.966
So here we would say, okay, we've got
this data on the heap from our nums.

41
00:02:03.966 --> 00:02:08.619
And we're saying first_elem_index
is usize that's pointing to

42
00:02:08.619 --> 00:02:10.663
the same slot that we had for.

43
00:02:10.663 --> 00:02:15.407
And the length is 3 in this case,
if we're going from 0 to 3.

44
00:02:15.407 --> 00:02:19.730
And basically we're just saying,
yeah we're just referencing the same exact

45
00:02:19.730 --> 00:02:23.100
memory as what was already
allocated on the heap previously.

46
00:02:23.100 --> 00:02:25.981
So, importantly,
slices do not own the elements.

47
00:02:25.981 --> 00:02:28.993
They just reference the elements
since somebody else is the owner.

48
00:02:28.993 --> 00:02:33.044
So, actually, you can't really have
a slice that references heap memory.

49
00:02:33.044 --> 00:02:37.374
Without somebody else having
made that heap memory first,

50
00:02:37.374 --> 00:02:39.809
in this case our vector and nums.

51
00:02:39.809 --> 00:02:44.004
So, the way that these types look
is that nums is a vec of u8.

52
00:02:44.004 --> 00:02:46.914
And the slice is ampersand
square brackets u8.

53
00:02:46.914 --> 00:02:48.748
So slices have their own syntax.

54
00:02:48.748 --> 00:02:50.552
They're a language concept.

55
00:02:50.552 --> 00:02:53.931
And they're sort of like hard
coded into the rust compiler.

56
00:02:53.931 --> 00:02:57.962
So this will be the size type of
the slice is it's ampersand bracket u8.

57
00:02:57.962 --> 00:03:01.151
Whereas nums is vacuous just like before.

58
00:03:01.151 --> 00:03:02.916
You can also string slices.

59
00:03:02.916 --> 00:03:07.753
So you can basically say I wanna grab some
number of chars from within a string.

60
00:03:07.753 --> 00:03:08.584
Again, same rules,

61
00:03:08.584 --> 00:03:11.183
the string slice doesn't own
the elements just references them.

62
00:03:11.183 --> 00:03:14.819
You can take a string slice, which is
a sort of a sub slice of this string here.

63
00:03:14.819 --> 00:03:20.186
We're going from like just
a subset of the string here.

64
00:03:20.186 --> 00:03:23.333
And whereas previously, we saw that
the type of numbers would be a veck of u8.

65
00:03:23.333 --> 00:03:26.305
And a slice of numbers would be
ampersand square brackets u8.

66
00:03:26.305 --> 00:03:29.874
The type of a string slice
is just ampersand str.

67
00:03:29.874 --> 00:03:31.084
That's it.

68
00:03:31.084 --> 00:03:34.039
All the same rules apply a slice doesn't
own the elements just references them.

69
00:03:34.039 --> 00:03:37.202
Except in this case it's referencing
elements of characters within a string.

70
00:03:37.202 --> 00:03:41.801
Rather than u8 as a Vec or
whatever the heck might be holding.

71
00:03:41.801 --> 00:03:45.084
If you want to get all of
the contents of the Veck as a slice,

72
00:03:45.084 --> 00:03:47.098
you can just say nums.as_slice.

73
00:03:47.098 --> 00:03:52.216
Or if you wanna get a slice of
all the characters in the string,

74
00:03:52.216 --> 00:03:54.788
you can say string.as_str.

75
00:03:54.788 --> 00:03:59.277
Okay, let's let's review and
then we'll do the exercises.

76
00:03:59.277 --> 00:04:02.522
So let's review we started off
by talking about borrowing.

77
00:04:02.522 --> 00:04:06.362
So we said let years_ref
is ampersand Vec of i32,

78
00:04:06.362 --> 00:04:09.252
which is assigned to ampersand years.

79
00:04:09.252 --> 00:04:13.139
So this is an immutable borrow so
this right here is the borrow part.

80
00:04:13.139 --> 00:04:14.920
And in this right here
is the reference type.

81
00:04:14.920 --> 00:04:17.552
So the way to get a reference
type is to perform a borrow.

82
00:04:17.552 --> 00:04:21.052
We talked about how borrowing is
basically not transferring ownership.

83
00:04:21.052 --> 00:04:23.472
Instead, it's sort of
lending access to something.

84
00:04:23.472 --> 00:04:26.751
It's saying, hey, you can take a look
at this reference to my years.

85
00:04:26.751 --> 00:04:30.724
But you're not gonna deallocate
anything because I'm still owning it.

86
00:04:30.724 --> 00:04:34.306
I'm still in charge of cleaning it up
we talked about mutable references.

87
00:04:34.306 --> 00:04:37.772
Which are basically like references
except they allow you to mutate

88
00:04:37.772 --> 00:04:40.710
the contents of the thing
unlike immutable references.

89
00:04:40.710 --> 00:04:44.905
And we talked about why thanks to rusts
concurrency guarantees to try to rule out

90
00:04:44.905 --> 00:04:46.352
databases as a guarantee.

91
00:04:46.352 --> 00:04:49.738
Basically says,
you're allowed to have exactly one mutable

92
00:04:49.738 --> 00:04:52.809
reference active at one time
within the current scope.

93
00:04:52.809 --> 00:04:54.997
Or any number of immutable references.

94
00:04:54.997 --> 00:04:56.774
But if you have even
one mutable reference,

95
00:04:56.774 --> 00:04:59.185
you can't have any immutable
ones active at the same time.

96
00:04:59.185 --> 00:05:02.935
And you can't have any other mutable
ones ones active at the same time.

97
00:05:02.935 --> 00:05:05.496
Then we talked about slices, and

98
00:05:05.496 --> 00:05:09.254
how you can have a slice
of a years back like this.

99
00:05:09.254 --> 00:05:12.907
And say I wanna get just a sub slice of
that and how that's gonna give me back.

100
00:05:12.907 --> 00:05:16.948
A slice that has the same type of element
as the vec that we were talking about.

101
00:05:16.948 --> 00:05:19.413
And it's gonna in fact use
the same memory as that.

102
00:05:19.413 --> 00:05:20.990
But it's just gonna be
a reference to that memory.

103
00:05:20.990 --> 00:05:24.667
This is not actually gonna be something
owned, that's going to be deallocated,

104
00:05:24.667 --> 00:05:26.119
no deallocations will happen.

105
00:05:26.119 --> 00:05:30.383
The deallocations are all up to the
original thing that we're sort of making

106
00:05:30.383 --> 00:05:31.055
a slice of.

107
00:05:31.055 --> 00:05:34.128
And then finally,
we talked about string slices,

108
00:05:34.128 --> 00:05:37.848
how we have string slices which
can be exactly the same thing.

109
00:05:37.848 --> 00:05:40.120
But just for strings instead of Vex.

