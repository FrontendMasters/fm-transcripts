WEBVTT

1
00:00:00.000 --> 00:00:03.829
Now, what we could do is,
we could add these things,

2
00:00:03.829 --> 00:00:06.306
these are lifetime annotations.

3
00:00:06.306 --> 00:00:10.490
And what this says is basically,
I'm defining a new type parameter, but

4
00:00:10.490 --> 00:00:11.981
it's actually, sorry.

5
00:00:11.981 --> 00:00:16.452
Not a type parameter, a lifetime parameter
that is giving a name to that lifetime.

6
00:00:16.452 --> 00:00:19.141
That highlighted section,
we can now give it a name, and

7
00:00:19.141 --> 00:00:20.715
we can now refer to it in our code.

8
00:00:20.715 --> 00:00:26.448
The name that I've chosen is 'a, because
I just love the word 'a, just kidding.

9
00:00:26.448 --> 00:00:30.024
So the way that lifetime annotations
work is that they always begin with

10
00:00:30.024 --> 00:00:30.868
an apostrophe.

11
00:00:30.868 --> 00:00:33.148
And because apostrophe's
kind of a long word,

12
00:00:33.148 --> 00:00:35.258
we usually say tick instead of apostrophe.

13
00:00:35.258 --> 00:00:38.325
So the way that I would say
this out loud is tick-a.

14
00:00:38.325 --> 00:00:41.637
Now, like type parameters,
where we saw previously with option,

15
00:00:41.637 --> 00:00:42.635
we chose capital T.

16
00:00:42.635 --> 00:00:46.962
Or with Rust, we chose capital O, sorry,
with result, we chose capital O or

17
00:00:46.962 --> 00:00:47.641
capital E.

18
00:00:47.641 --> 00:00:48.969
You can choose any name you want for this.

19
00:00:48.969 --> 00:00:53.202
I could have said tick-a, I could have
said tick-b or tick-foo or tick-hamburger.

20
00:00:53.202 --> 00:00:57.350
Anything you wanna choose, you're totally
free to name it whatever you want.

21
00:00:57.350 --> 00:01:00.733
And once you've chosen that name, you
put it in these angle brackets in here.

22
00:01:00.733 --> 00:01:04.163
And then from then on,
you can reference that same tick-a or

23
00:01:04.163 --> 00:01:06.733
whatever else inside your type annotation.

24
00:01:06.733 --> 00:01:10.030
Well, right now, I'm only referencing
it once, so I could write this,

25
00:01:10.030 --> 00:01:11.531
this is legal Rust code to write.

26
00:01:11.531 --> 00:01:15.019
But really,
the whole point of defining this thing is,

27
00:01:15.019 --> 00:01:19.844
I wanna use it in multiple places,
in order to explicitly encode a dependency

28
00:01:19.844 --> 00:01:24.617
like the one that we have bent this
Releases struct and this years argument.

29
00:01:24.617 --> 00:01:29.949
So let's see, how can we make this
lifetime parameter named 'a more useful?

30
00:01:29.949 --> 00:01:33.827
Well, one way I can do this is,
when I've got my eighties and nineties,

31
00:01:33.827 --> 00:01:36.578
I can reuse this inside here to say,
you know what?

32
00:01:36.578 --> 00:01:38.288
I want to explicitly annotate and

33
00:01:38.288 --> 00:01:41.841
represent the fact that these things
have to have the same lifetime.

34
00:01:41.841 --> 00:01:43.713
And we know we have the same lifetime,

35
00:01:43.713 --> 00:01:47.576
because the lifetime refers to the time
between when an allocation happens and

36
00:01:47.576 --> 00:01:50.169
when a deallocation happens,
of that same memory.

37
00:01:50.169 --> 00:01:53.059
And all of these things,
because they're all slices,

38
00:01:53.059 --> 00:01:56.515
they're all referencing the same memory,
the same heap memory.

39
00:01:56.515 --> 00:01:59.715
And because of that, they all have
the same lifetime as that heap memory.

40
00:01:59.715 --> 00:02:00.887
That's just kind of a rule of slices.

41
00:02:00.887 --> 00:02:02.566
Whenever you slice some heap memory,

42
00:02:02.566 --> 00:02:04.671
you have the same lifetime
as that heap memory.

43
00:02:04.671 --> 00:02:07.905
Whatever goes out of scope and
gets deallocated,

44
00:02:07.905 --> 00:02:10.449
then the reference is no longer valid.

45
00:02:10.449 --> 00:02:12.977
Because if it were,
we would have a use-after-free.

46
00:02:12.977 --> 00:02:17.563
So now I've made that relationship
between them explicit in the code.

47
00:02:17.563 --> 00:02:18.568
This is saying,
all three of these have the same lifetime.

48
00:02:18.568 --> 00:02:20.370
And I've happened to
name that lifetime 'a,

49
00:02:20.370 --> 00:02:21.997
but I could have chosen a different name.

50
00:02:21.997 --> 00:02:27.770
Okay, so now, here's a way that I
can take that one step further and

51
00:02:27.770 --> 00:02:30.822
actually put it inside the struct.

52
00:02:30.822 --> 00:02:34.530
Here I've chosen 'y, again,
could have chosen anything.

53
00:02:34.530 --> 00:02:37.363
But I chose a different name to illustrate
the fact that you sort of choose it on

54
00:02:37.363 --> 00:02:38.336
a case-by-case basis.

55
00:02:38.336 --> 00:02:41.654
But now I've said something
different about this struct.

56
00:02:41.654 --> 00:02:44.949
I've introduced a lifetime
parameter to this struct.

57
00:02:44.949 --> 00:02:47.482
And I've said, inside this struct,

58
00:02:47.482 --> 00:02:50.893
Releases now has a lifetime
parameter called 'y.

59
00:02:50.893 --> 00:02:53.444
And inside that struct,
it has three fields, and

60
00:02:53.444 --> 00:02:55.337
each of them have the same lifetime.

61
00:02:55.337 --> 00:02:59.584
So I'm essentially saying that whenever
you make this release a struct,

62
00:02:59.584 --> 00:03:04.310
I don't care what the lifetime is that
you're gonna put in for years, eighties,

63
00:03:04.310 --> 00:03:05.218
and nineties.

64
00:03:05.218 --> 00:03:08.220
You can give whatever lifetime
you want for those things, but

65
00:03:08.220 --> 00:03:10.597
all three of them have to
have the same lifetime.

66
00:03:10.597 --> 00:03:15.606
Which means that either, most likely,
they all need to be referencing the same

67
00:03:15.606 --> 00:03:20.542
exact heap memory, or they all need to
be referencing heap memory allocations

68
00:03:20.542 --> 00:03:24.984
which happen to be, that are going
to be deallocated at the same time.

69
00:03:24.984 --> 00:03:26.687
They're going to live for
the same amount of time.

70
00:03:26.687 --> 00:03:31.893
So putting that back together with our
previous example, with all the 'a's,

71
00:03:31.893 --> 00:03:36.021
we can now incorporate this new
concept of Releases into this.

72
00:03:36.021 --> 00:03:39.728
And we can do that like so.

73
00:03:39.728 --> 00:03:43.264
So we can say jazz takes 'a
as its lifetime parameter.

74
00:03:43.264 --> 00:03:48.374
Years now has a lifetime annotation of 'a,
and Releases also does too.

75
00:03:48.374 --> 00:03:53.132
And now we've tied these
two together syntactically.

76
00:03:53.132 --> 00:03:56.285
Now when I look at this, this is telling
me more information than before.

77
00:03:56.285 --> 00:04:03.603
And it's saying, I'm taking this slice of
i64s, and I'm returning a Releases struct.

78
00:04:03.603 --> 00:04:06.263
And those slices inside that Releases

79
00:04:06.263 --> 00:04:10.927
struct all have the same lifetime
as this years slice does itself.

80
00:04:10.927 --> 00:04:15.137
And that's sort of propagated
through here by use of 'a's.

81
00:04:15.137 --> 00:04:19.820
And so basically, putting these
things together, I now have a way to

82
00:04:19.820 --> 00:04:24.771
express inside code the actual
relationship between these lifetimes.

83
00:04:24.771 --> 00:04:28.901
Okay, so let's zoom back out and
take a look our previous code,

84
00:04:28.901 --> 00:04:34.120
where we had the potential use-after-free
if we didn't get a compiler error.

85
00:04:34.120 --> 00:04:38.653
So here we have our all_years vec,
which is an i64, and

86
00:04:38.653 --> 00:04:41.622
it's got the same years inside of it.

87
00:04:41.622 --> 00:04:42.209
We're calling jazz, passing all_years.

88
00:04:42.209 --> 00:04:47.038
And remember, now we've changed our
jazz function so that it's taking

89
00:04:47.038 --> 00:04:52.276
an explicit lifetime here of 'a, and
our Releases also has a lifetime of 'a.

90
00:04:52.276 --> 00:04:56.576
So now, the lifetime of all_years,
which is the highlighted part in here,

91
00:04:56.576 --> 00:05:00.813
is going to be sort of threaded through
this function through the argument,

92
00:05:00.813 --> 00:05:04.586
because the argument has to have
that same lifetime as all_years,

93
00:05:04.586 --> 00:05:06.926
because that's what we're passing in.

94
00:05:06.926 --> 00:05:09.195
And then it makes it all the way into
the return value, such that now,

95
00:05:09.195 --> 00:05:10.660
when Releases comes back, we can see.

96
00:05:10.660 --> 00:05:12.253
This thing has to have a lifetime of 'a,
and

97
00:05:12.253 --> 00:05:14.855
that means that this thing can only
exist inside the highlighted part.

98
00:05:14.855 --> 00:05:20.557
Outside the highlighted part,
it's outside of its lifetime,

99
00:05:20.557 --> 00:05:24.685
and there's going to be a use-after-free.

100
00:05:24.685 --> 00:05:28.023
And so now, when we do reference
something from Releases,

101
00:05:28.023 --> 00:05:31.983
knowing that Releases has this
lifetime which has now already ended?

102
00:05:31.983 --> 00:05:35.349
We can actually see much more
clearly that we are, in effect,

103
00:05:35.349 --> 00:05:39.845
already referring to all_years after its
lifetime has ended by way of Releases.

104
00:05:39.845 --> 00:05:44.631
Because Releases has this same highlighted
lifetime, as we can see by having tracked

105
00:05:44.631 --> 00:05:48.033
it through all these different
steps of the function calls.

106
00:05:48.033 --> 00:05:52.665
And yet we're still trying to use
it outside of the highlighted area,

107
00:05:52.665 --> 00:05:57.394
after that lifetime which we've
named 'a in this function has ended.

108
00:05:57.394 --> 00:06:01.956
And that's exactly why this
thing is a use-after-free, and

109
00:06:01.956 --> 00:06:07.129
sort of the value of these lifetime
annotations is helping us see this.

110
00:06:07.129 --> 00:06:11.600
So lifetime annotations are something that
you don't necessarily need to use in your

111
00:06:11.600 --> 00:06:14.531
own code,
depending on the code that you're writing.

112
00:06:14.531 --> 00:06:16.146
But in some cases, they are required.

113
00:06:16.146 --> 00:06:19.761
One of the reasons that I use an example
that has a struct is that, actually,

114
00:06:19.761 --> 00:06:22.982
[LAUGH], you do always have to put
a lifetime annotation in a struct,

115
00:06:22.982 --> 00:06:25.211
if that struct is gonna
hold on to references.

116
00:06:25.211 --> 00:06:31.490
So previously, when I had the example of
Releases without a 'y inside of there?

117
00:06:31.490 --> 00:06:32.701
That actually would not have compiled.

118
00:06:32.701 --> 00:06:36.180
Because whenever you have
references inside of a struct,

119
00:06:36.180 --> 00:06:40.653
Rust will require that you put an explicit
lifetime annotation inside your

120
00:06:40.653 --> 00:06:45.566
struct that corresponds to every single
reference that you have inside of there.

121
00:06:45.566 --> 00:06:48.686
Now granted, you can have references
with different lifetimes if you want.

122
00:06:48.686 --> 00:06:51.480
I could say, this one's 'y, and
this one's 'a, and this one's 'b, or

123
00:06:51.480 --> 00:06:52.337
something like that.

124
00:06:52.337 --> 00:06:55.915
And then I'd have to define 'y and
'b and 'c, or

125
00:06:55.915 --> 00:06:59.001
whatever names you wanna choose for them.

126
00:06:59.001 --> 00:07:06.118
But every reference inside of a struct has
to have an explicit lifetime annotation.

127
00:07:06.118 --> 00:07:10.023
The compiler will tell you to add
them if you don't do them up-front.

128
00:07:10.023 --> 00:07:12.767
So that code I have previously,
that didn't have this angle brackets with

129
00:07:12.767 --> 00:07:15.749
the tick inside of it would not have
compiled, just because I didn't have that.

130
00:07:15.749 --> 00:07:18.130
It's the same thing with enums, same rule.

131
00:07:18.130 --> 00:07:21.518
If you wanna have an enum
with references inside of it,

132
00:07:21.518 --> 00:07:26.541
you have to reflect those in the type,
and explicitly define their annotation.

133
00:07:26.541 --> 00:07:30.129
The other case where this can come up is,
quote often,

134
00:07:30.129 --> 00:07:32.633
you'll find this in documentation.

135
00:07:32.633 --> 00:07:35.530
So this is one of the things that I think
it's important to include the concept of

136
00:07:35.530 --> 00:07:37.053
an lifetimes in an introductory course.

137
00:07:37.053 --> 00:07:40.890
Is when you're going out and
trying to write real Rust programs,

138
00:07:40.890 --> 00:07:45.914
you're gonna see things like this in type
annotations of packages that you'll use,

139
00:07:45.914 --> 00:07:48.027
or in the standard library, even.

140
00:07:48.027 --> 00:07:49.934
So it's pretty common to see these
things sort of floating around.

141
00:07:49.934 --> 00:07:52.885
And now can kind of hopefully
get a mental model for,

142
00:07:52.885 --> 00:07:56.723
what's the problem that these are solving,
and how do I read this?

143
00:07:56.723 --> 00:07:59.440
How do I read this 'a or this 'y, or

144
00:07:59.440 --> 00:08:03.900
whatever the case may be
between these different things?

