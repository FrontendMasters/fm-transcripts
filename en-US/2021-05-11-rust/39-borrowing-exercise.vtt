WEBVTT

1
00:00:00.108 --> 00:00:04.074
Let's move on to the exercise for
part six, which is going to look familiar.

2
00:00:04.074 --> 00:00:07.613
Because it's exactly the same
as the exercise for part five,

3
00:00:07.613 --> 00:00:09.586
except now we have some new tools,

4
00:00:09.586 --> 00:00:14.390
that we can use to solve it more
elegantly than before, as promised.

5
00:00:14.390 --> 00:00:18.007
So once again, we have sum of numbers,
product of norms, same setup as before,

6
00:00:18.007 --> 00:00:19.740
we have this vec of numbers.

7
00:00:19.740 --> 00:00:21.730
Same sum product and average functions.

8
00:00:21.730 --> 00:00:23.740
Everything's exactly
the same thing as before.

9
00:00:23.740 --> 00:00:27.740
Except, now we have two new
ways that we can do this.

10
00:00:27.740 --> 00:00:32.393
And one is to have, this thing
except a reference to a vac of i64,

11
00:00:32.393 --> 00:00:34.600
instead of vec of i64.

12
00:00:34.600 --> 00:00:37.508
That's straightforward but, as a bonus,

13
00:00:37.508 --> 00:00:40.818
I recommend trying to also
have it accept a slice.

14
00:00:40.818 --> 00:00:44.652
Using ampersand i64 and
the dot as slice method or you can say,

15
00:00:44.652 --> 00:00:49.010
use the like square brackets if you
want to just give it a sub slice.

16
00:00:49.010 --> 00:00:51.387
Whatever you prefer to do there.

17
00:00:51.387 --> 00:00:54.860
Basically the reason that I suggest doing
this is that in practice you'll actually

18
00:00:54.860 --> 00:00:57.455
encounter this quite a lot,
in Rust documentation because.

19
00:00:57.455 --> 00:01:01.634
Basically since, slices don't require
any heap allocations, it's pretty

20
00:01:01.634 --> 00:01:06.130
common practice the C functions, that
will say, give me a slice of this thing.

21
00:01:06.130 --> 00:01:08.728
And it's understood that most
likely what you have is a vec.

22
00:01:08.728 --> 00:01:11.277
But because converting between vec and
slice is so cheap.

23
00:01:11.277 --> 00:01:13.846
This is a little bit more flexible
to accept a slice because now,

24
00:01:13.846 --> 00:01:15.970
it works with either a slice or a vec.

25
00:01:15.970 --> 00:01:19.880
Whereas if you require, passing in
a reference to a vec, that means that,

26
00:01:19.880 --> 00:01:24.180
if all you've got is a slice,
you can't pass that to the function.

27
00:01:24.180 --> 00:01:27.220
So I recommend trying it both ways, that
definitely the quicker way is option one.

28
00:01:27.220 --> 00:01:30.910
Where you just add, change these two
reference types and then borrow.

29
00:01:30.910 --> 00:01:33.328
But option two where you accept a slice,

30
00:01:33.328 --> 00:01:37.320
is sort of the more involved way of
doing it, but not by a whole lot.

