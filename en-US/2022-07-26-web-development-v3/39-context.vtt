WEBVTT

1
00:00:00.450 --> 00:00:05.027
Wouldn't it be nice if you had
this big object here of me, right,

2
00:00:05.027 --> 00:00:09.035
that has my name, and location,
like a street address.

3
00:00:09.035 --> 00:00:13.361
I definitely do live on
500 Fakestreet in Seattle.

4
00:00:13.361 --> 00:00:17.754
If I could make a function
on there that would

5
00:00:17.754 --> 00:00:22.638
nicely print out the shipping address,
right?

6
00:00:22.638 --> 00:00:28.070
So that's what this get address
action will do for us, right?

7
00:00:28.070 --> 00:00:30.483
Let's actually make this
just a tiny bit clearer.

8
00:00:33.217 --> 00:00:38.698
So first name, last name,
right, street number,

9
00:00:38.698 --> 00:00:43.944
street, city, state, zipCode, and country.

10
00:00:43.944 --> 00:00:50.672
This is obviously very US centric,
but it's what I know.

11
00:00:50.672 --> 00:00:55.870
[LAUGH] I don't send too many
letters to Thailand, for example.

12
00:00:59.190 --> 00:01:05.120
So let's talk a second about,
I have this object, me, right?

13
00:01:05.120 --> 00:01:09.090
And I'm trying to write a function
that pulls out information

14
00:01:09.090 --> 00:01:12.767
that exists on the object that
it was created on, right?

15
00:01:12.767 --> 00:01:17.425
So I have this getAddress function, so
that I can call me.getAddress here, right?

16
00:01:17.425 --> 00:01:23.931
How do I refer to other parts of
the object of the object that I'm on.

17
00:01:23.931 --> 00:01:26.520
This, that's what this is right here.

18
00:01:26.520 --> 00:01:30.450
So I say this.name.first, right?

19
00:01:33.220 --> 00:01:36.270
This refers to me, right?

20
00:01:36.270 --> 00:01:40.221
So it would be like saying,
if I'm doing this.name.first,

21
00:01:40.221 --> 00:01:45.040
it would be like the same thing of
here is doing me.name.first, right?

22
00:01:45.040 --> 00:01:51.760
So that's what this does, is it refers to
the object that you're on at the moment.

23
00:01:51.760 --> 00:01:54.120
This is called context, right?

24
00:01:55.470 --> 00:02:00.592
In this case,
it's relatively straightforward that

25
00:02:00.592 --> 00:02:05.616
this.name comes from the same
object that it's on.

26
00:02:05.616 --> 00:02:08.438
But I will tell you that it's very
easy to muddy the waters here.

27
00:02:08.438 --> 00:02:14.301
[LAUGH] I don't really wanna get
into the crazy depth of how bent

28
00:02:14.301 --> 00:02:19.620
out of shape you can make this,
but yeah, this is good.

29
00:02:19.620 --> 00:02:20.760
Yeah, question.

30
00:02:20.760 --> 00:02:24.395
&gt;&gt; Yeah, are these classes
that you're creating, and

31
00:02:24.395 --> 00:02:28.130
then calling whenever you see the dots and
the colons?

32
00:02:28.130 --> 00:02:31.072
&gt;&gt; The dots and the colons.

33
00:02:31.072 --> 00:02:32.219
Okay, so-.

34
00:02:32.219 --> 00:02:33.611
&gt;&gt; If you're making a class, I don't know.

35
00:02:34.741 --> 00:02:38.190
&gt;&gt; You're on the right track for sure.

36
00:02:38.190 --> 00:02:44.279
We're in the same realm of information.

37
00:02:44.279 --> 00:02:46.207
So class is a really loaded word and

38
00:02:46.207 --> 00:02:49.210
it depends on which language
you're talking about.

39
00:02:49.210 --> 00:02:52.000
I'm assuming it's more like a Java
context that you're talking about,

40
00:02:52.000 --> 00:02:55.316
what class is with, but it can apply-
&gt;&gt; I think JavaScript has classes.

41
00:02:55.316 --> 00:02:59.394
&gt;&gt; It does, so you can do it
&gt;&gt; Maybe I am thinking about Java, okay.

42
00:02:59.394 --> 00:03:01.426
&gt;&gt; No, it's totally okay, and
we'll demystify it a little bit,

43
00:03:01.426 --> 00:03:03.965
cuz I'm sure someone else is wondering
the same thing, it's a good question.

44
00:03:03.965 --> 00:03:09.634
I don't really wanna get
too much into classes,

45
00:03:09.634 --> 00:03:13.650
but you can say class Car, right?

46
00:03:13.650 --> 00:03:16.999
And it can have a go function, right?

47
00:03:16.999 --> 00:03:20.300
You're creating a type of object,
it's like a blueprint for an object.

48
00:03:20.300 --> 00:03:25.115
And so if I wanted a car,
I would have to say const, I don't know,

49
00:03:25.115 --> 00:03:27.144
civic = new Car like this.

50
00:03:27.144 --> 00:03:32.538
And you have to use this new thing
here to get the actual civic.

51
00:03:32.538 --> 00:03:36.126
This would be now an object
that has a go function on it.

52
00:03:36.126 --> 00:03:40.492
&gt;&gt; Okay, got it, I think yeah, understand.

53
00:03:40.492 --> 00:03:43.377
&gt;&gt; So the civic that you would get would
end up being an object just like this

54
00:03:43.377 --> 00:03:43.964
one, right?

55
00:03:43.964 --> 00:03:47.099
This one, we're just directly creating
an object without creating a class in

56
00:03:47.099 --> 00:03:47.630
between it.

57
00:03:47.630 --> 00:03:49.208
&gt;&gt; Okay.

58
00:03:49.208 --> 00:03:53.334
&gt;&gt; Yeah, if all this was gibberish to you,
then I just said go on and ignore it,

59
00:03:53.334 --> 00:03:56.754
because JavaScript is not programmed
like you program Java and

60
00:03:56.754 --> 00:04:01.360
some of those other more, they're called
object-oriented programming models.

61
00:04:01.360 --> 00:04:03.933
You can, and I'm imploring you to not.

62
00:04:03.933 --> 00:04:06.328
It's not a good way to write JavaScript,

63
00:04:06.328 --> 00:04:11.135
unless that there's anything wrong with
doing that in Java or anything like that.

64
00:04:11.135 --> 00:04:14.135
It's just JavaScript is not built for

65
00:04:14.135 --> 00:04:18.358
object-oriented programming
the way that Java is.

66
00:04:18.358 --> 00:04:20.700
So very similar to a class,
it's just an instance of a class or

67
00:04:20.700 --> 00:04:21.565
it's just an object.

68
00:04:25.712 --> 00:04:28.159
Okay, back to this.

69
00:04:29.660 --> 00:04:34.392
Yeah, you can really
bend this out of shape.

70
00:04:34.392 --> 00:04:36.946
It becomes important of where you call.

71
00:04:36.946 --> 00:04:38.881
So here, I say me.getAddress.

72
00:04:38.881 --> 00:04:40.505
So I'm calling it off of me,

73
00:04:40.505 --> 00:04:43.835
which means that this here
ends up being correct, right?

74
00:04:43.835 --> 00:04:49.010
So you end up seeing here, I get
the correct address out here at the end.

75
00:04:50.410 --> 00:04:53.982
I just wanna show you how this can break.

76
00:04:53.982 --> 00:04:59.356
If I say const func, let's just call it,

77
00:04:59.356 --> 00:05:03.809
what do I call here, getAddress,

78
00:05:03.809 --> 00:05:09.507
pulledOutGetAddress = me.getAddress.

79
00:05:09.507 --> 00:05:12.339
So what I've done is I now have this
function here that I pulled out of

80
00:05:12.339 --> 00:05:12.894
it, right?

81
00:05:12.894 --> 00:05:19.337
I pulled it out of the me function here,
right?

82
00:05:19.337 --> 00:05:26.673
And now, I think if I call
console.log(pulledOutGetAddress) and

83
00:05:26.673 --> 00:05:32.389
I invoke that, undefined,
undefined, undefined,

84
00:05:32.389 --> 00:05:37.377
undefined, undefined, undefined, right?

85
00:05:37.377 --> 00:05:41.390
It's not bound to this me, right?

86
00:05:41.390 --> 00:05:45.421
So when you call this here, it doesn't
know what you're looking for, right?

87
00:05:45.421 --> 00:05:51.083
So it matters how you call the function,
Super weird.

88
00:05:51.083 --> 00:05:54.170
I don't really expect you to
remember this or know it, but

89
00:05:54.170 --> 00:05:56.880
I want you to know that
there are dangers with this.

90
00:05:56.880 --> 00:05:58.920
Again, there's entire
courses on the topic,

91
00:05:58.920 --> 00:06:02.084
definitely check out the JavaScript
Learning Path in Frontend Masters.

92
00:06:02.084 --> 00:06:05.190
This will get into a lot of
depth of what context can be.

93
00:06:05.190 --> 00:06:09.566
And they love to ask junior developers
these questions when they do job

94
00:06:09.566 --> 00:06:10.463
interviews.

95
00:06:10.463 --> 00:06:14.493
So it's worth your time to invest to
figuring out how contexts works in a bunch

96
00:06:14.493 --> 00:06:15.676
of different lights.

97
00:06:15.676 --> 00:06:18.924
I could spend the next two hours
explaining to you ways to bend this and

98
00:06:18.924 --> 00:06:19.543
break this.

99
00:06:19.543 --> 00:06:23.312
I don't think that's beneficial
to you right now in your journey.

100
00:06:23.312 --> 00:06:28.056
So I just want you to know it's out there,
it exists, it can break, but

101
00:06:28.056 --> 00:06:30.836
just know that it matters how you call it.

102
00:06:35.616 --> 00:06:39.667
Yeah, I'm gonna hand wave away
the rest of this conversation,

103
00:06:39.667 --> 00:06:43.959
cuz I don't think it's useful for
us to get into a lot of depth here.

104
00:06:43.959 --> 00:06:49.028
Because it's either we go way deep in
this and spend another hour on it or

105
00:06:49.028 --> 00:06:53.010
we keep going and
just accept that this is complicated.

106
00:06:53.010 --> 00:06:56.474
Is that okay?
I don't think it's useful to go any

107
00:06:56.474 --> 00:06:58.277
deeper than that.

108
00:06:58.277 --> 00:07:02.214
&gt;&gt; But you don't change
the me.getAddress to this,getAddress?

109
00:07:02.214 --> 00:07:03.820
Can it work then?

110
00:07:03.820 --> 00:07:05.780
Isn't that still calling me?

111
00:07:07.790 --> 00:07:09.616
&gt;&gt; If I say down-
&gt;&gt; Or

112
00:07:09.616 --> 00:07:14.845
where you have the pulledOutGetAdress
where it says me, if you just do this.

113
00:07:14.845 --> 00:07:15.723
&gt;&gt; So good question.

114
00:07:15.723 --> 00:07:16.966
What is this here?

115
00:07:16.966 --> 00:07:19.219
What does this refer to?

116
00:07:19.219 --> 00:07:20.701
&gt;&gt; It's outside of the bracket.

117
00:07:20.701 --> 00:07:23.247
&gt;&gt; Yeah, so question mark, all right?

118
00:07:23.247 --> 00:07:26.271
It's probably a window, I'm gonna guess.

119
00:07:33.197 --> 00:07:36.068
,yeah, we can get rid of this.

120
00:07:36.068 --> 00:07:41.680
Object window, What is window?

121
00:07:41.680 --> 00:07:46.850
Window is the overarching
context that everything runs in.

122
00:07:46.850 --> 00:07:48.330
So you can say,

123
00:07:55.722 --> 00:08:00.195
So for example,
when you call Math like this,

124
00:08:00.195 --> 00:08:05.367
it's actually technically
calling window.Math.

125
00:08:05.367 --> 00:08:10.457
So all those unprefixed,
globally available objects are technically

126
00:08:10.457 --> 00:08:14.796
on window, it's just implied
when you don't put it there.

127
00:08:14.796 --> 00:08:15.727
So that's what this is, right?

128
00:08:15.727 --> 00:08:20.154
If I say this here, it's window.

129
00:08:20.154 --> 00:08:20.840
&gt;&gt; Okay.

130
00:08:20.840 --> 00:08:25.953
&gt;&gt; So that's why it's called context,
super contextual about what you call this.

131
00:08:25.953 --> 00:08:28.504
And it's important that you know
that it's out there what this is,

132
00:08:28.504 --> 00:08:29.415
cuz it's everywhere.

133
00:08:29.415 --> 00:08:31.935
You're definitely gonna see it in lots and
lots of places.

134
00:08:31.935 --> 00:08:35.155
But you need to be super
careful about what this is.

135
00:08:35.155 --> 00:08:39.745
So anytime that you see this,
I want you to stare at it as,

136
00:08:39.745 --> 00:08:42.244
okay, what is this right now?

137
00:08:42.244 --> 00:08:45.640
And it's, well, I mean,
I made a really good point here.

138
00:08:49.330 --> 00:08:53.830
This is running the same code twice,
but this is different.

139
00:08:53.830 --> 00:08:56.215
And it's the exact same code, but

140
00:08:56.215 --> 00:09:00.913
where it's called makes this different,
which is weird, right?

141
00:09:00.913 --> 00:09:08.872
It's, It just matters
of where it's called.

142
00:09:08.872 --> 00:09:12.034
Yeah, cool, we'll leave it at that.

143
00:09:12.034 --> 00:09:16.140
You can actually fix this, so
it actually pulled out, it would work.

144
00:09:16.140 --> 00:09:23.216
I hesitate to show you, but
let's do it, .bind(me).

145
00:09:25.530 --> 00:09:27.450
And this would have to be me.

146
00:09:33.070 --> 00:09:36.874
Because I call this .bind, which is
a function built onto functions, which I

147
00:09:36.874 --> 00:09:41.100
understand sounds a little strange, but
functions have built-ins as well, right?

148
00:09:41.100 --> 00:09:45.969
By calling .bind on this, I am now
grafting these two together permanently,

149
00:09:45.969 --> 00:09:46.740
right?

150
00:09:46.740 --> 00:09:50.271
So now,
whenever you call pulledOutGetAdress,

151
00:09:50.271 --> 00:09:54.650
you're saying this is always
going to refer to the me object.

152
00:09:54.650 --> 00:09:58.060
And now, it works, continually, it's fine.

153
00:10:00.380 --> 00:10:01.430
That's what this bind thing does.

154
00:10:09.940 --> 00:10:13.362
There's other ways to fix it,
but we'll leave it at that.

155
00:10:13.362 --> 00:10:16.361
That's fine, that works for now.

156
00:10:16.361 --> 00:10:20.188
But yeah, that's what bind is for,
bind is for

157
00:10:20.188 --> 00:10:25.651
changing the context of something,
if you wanna change what me is.

158
00:10:25.651 --> 00:10:29.537
If you had something else where
you had a different object,

159
00:10:30.988 --> 00:10:34.590
You could actually use bind
to mess with what this is.

160
00:10:34.590 --> 00:10:37.664
At this point, you're in some sort of
meta level programming that I don't,

161
00:10:37.664 --> 00:10:41.140
you're in a special kinda hell that I do
not suggest you get yourself into, right?

162
00:10:41.140 --> 00:10:45.968
For the most part, it's just gonna be
avoided by just not relying on this and

163
00:10:45.968 --> 00:10:49.677
particularly on the changing
context of what this can be.

164
00:10:49.677 --> 00:10:53.426
This goes back to don't
write too clever of code.

165
00:10:55.722 --> 00:10:59.998
Just because you can
doesn't mean you should.

166
00:10:59.998 --> 00:11:03.142
Okay, questions about that?

167
00:11:03.142 --> 00:11:05.986
Does that make sense?

168
00:11:05.986 --> 00:11:11.096
I've kinda drawn a circle around this
context black box that if you wanna

169
00:11:11.096 --> 00:11:16.311
peek into Pandora's box, again,
check out Frondend Masters courses.

170
00:11:16.311 --> 00:11:20.451
I imagine it's probably one of
Kyle Simpson's courses that deals with

171
00:11:20.451 --> 00:11:21.626
context and depth.

172
00:11:21.626 --> 00:11:23.570
So definitely check that out.

173
00:11:23.570 --> 00:11:26.580
You'll get on it if you're on
the JavaScript learning path.

174
00:11:30.469 --> 00:11:34.395
And again, if you're trying to go out and
interview for junior developer jobs,

175
00:11:34.395 --> 00:11:38.165
just definitely one more studying,
because they love to ask that question.

176
00:11:41.970 --> 00:11:49.296
They'll do something like,
What is this log right here?

177
00:11:49.296 --> 00:11:51.868
They won't show you the results,
they'll just show you the code here.

178
00:11:51.868 --> 00:11:53.770
And what will you see if you do this?

179
00:11:53.770 --> 00:11:56.571
And you have to say, well,
it'll be a bunch of undefined.

180
00:11:56.571 --> 00:11:58.497
So they're like, okay,
how would you fix it, blah, blah, blah,

181
00:11:58.497 --> 00:11:59.343
all sorts of stuff like that.

182
00:12:02.002 --> 00:12:07.866
Okay, So this goes into what
we were talking about earlier.

183
00:12:07.866 --> 00:12:10.310
What is this outside of anything?

184
00:12:10.310 --> 00:12:12.110
It's this thing called window.

185
00:12:12.110 --> 00:12:16.070
Window is kind of like this overarching
context that everything executes in.

186
00:12:16.070 --> 00:12:18.440
If something doesn't have a context,
its context is window.

187
00:12:18.440 --> 00:12:24.594
So for example,
there's things onto window.

188
00:12:24.594 --> 00:12:30.381
We saw math, we saw console,
console's built under window as well.

189
00:12:30.381 --> 00:12:33.761
So when I say console.log, right,

190
00:12:33.761 --> 00:12:39.937
you're actually saying window.console.log,
right?

191
00:12:39.937 --> 00:12:45.306
Or there's scrollY.
So right now, all these code snippets

192
00:12:45.306 --> 00:12:51.770
execute immediately
when you load the page.

193
00:12:51.770 --> 00:12:56.579
So if I change this, this will actually be
what my scroll position is on the page,

194
00:12:56.579 --> 00:12:59.150
how far I scrolled down
in the y direction.

195
00:12:59.150 --> 00:13:03.447
So if I scroll up and change it again,
notice that it changes, or

196
00:13:03.447 --> 00:13:05.923
if I scroll down again, again, up.

197
00:13:05.923 --> 00:13:10.810
But if I don't scroll,
it just ends up being the same, right?

198
00:13:10.810 --> 00:13:12.590
There's lots of things on the window.

199
00:13:12.590 --> 00:13:16.780
There's also scrollX in my direction, but
as you probably imagine, I'm not scrolled

200
00:13:16.780 --> 00:13:20.250
in any direction, because of this page
just let you scroll side to side.

201
00:13:28.325 --> 00:13:33.495
You can also do totally,
I'm pretty sure, scrollY like this.

202
00:13:33.495 --> 00:13:36.065
So all of these three
things are exactly the same

203
00:13:44.340 --> 00:13:45.949
Question about window?

204
00:13:45.949 --> 00:13:47.414
Only applies in the browser, by the way.

205
00:13:47.414 --> 00:13:51.201
If you ever start working in Node-js,
which is JavaScript on the back end,

206
00:13:51.201 --> 00:13:55.480
whole course on that from Scott Moss from
Frontend Masters, window doesn't exist.

207
00:13:55.480 --> 00:13:58.876
For most of you taking this course,
you are focusing on frontend development,

208
00:13:58.876 --> 00:14:02.080
right, which means that you'll always
have a window available, right?

209
00:14:02.080 --> 00:14:05.370
But something to keep in
the back of your mind.

210
00:14:11.160 --> 00:14:15.380
So yeah, this is a good thing for
you to kinda keep in mind.

211
00:14:15.380 --> 00:14:20.074
A generally mostly applicable rule of
thumb of what this is going to be is if

212
00:14:20.074 --> 00:14:22.724
you're inside of an object of some sort,

213
00:14:22.724 --> 00:14:25.770
this will be the object
that you're inside of.

214
00:14:25.770 --> 00:14:29.442
If you're not inside of an object of any
sort, generally a good rule of thumb is

215
00:14:29.442 --> 00:14:33.338
that if you're inside of an object, and
if you're working on some sort of object,

216
00:14:33.338 --> 00:14:35.700
this will be the object
that you're working on.

217
00:14:35.700 --> 00:14:38.210
So a good example is
the me object up here.

218
00:14:38.210 --> 00:14:42.910
This is gonna generally refer to
the object that I'm working on,

219
00:14:42.910 --> 00:14:46.590
which will be the me object
at this moment, right?

220
00:14:46.590 --> 00:14:48.830
So that's one thing.

221
00:14:48.830 --> 00:14:53.449
If you're working outside of that,

222
00:14:53.449 --> 00:14:57.180
probably going to be window.

223
00:14:57.180 --> 00:15:00.996
Where it gets really dicey is where you're
invoking functions that you've pulled out

224
00:15:00.996 --> 00:15:02.680
of other objects or things like that.

225
00:15:02.680 --> 00:15:05.938
That can make the context
change kind of unexpectedly,

226
00:15:05.938 --> 00:15:08.029
would be a good way of putting that.

227
00:15:10.098 --> 00:15:12.846
Makes sense?

228
00:15:14.914 --> 00:15:17.603
Cool, I think I've given
you enough context for

229
00:15:17.603 --> 00:15:19.315
you to be aware of what this is.

230
00:15:19.315 --> 00:15:22.592
For the most part,
you don't really need to use it too much.

231
00:15:22.592 --> 00:15:26.382
But I do wanna introduce it to you
cuz you'll see it in code samples.

232
00:15:26.382 --> 00:15:31.032
Or if you start writing things like react,
which is like a framework for JavaScript,

233
00:15:31.032 --> 00:15:33.496
it'll use this in places and
you'll see it.

234
00:15:33.496 --> 00:15:37.510
So I just want you to be aware of what
it is and how to learn more about it.

235
00:15:37.510 --> 00:15:40.905
And I left a link here to one
of Kyle Simpson's courses,

236
00:15:40.905 --> 00:15:43.012
where he talks more in depth on it.

