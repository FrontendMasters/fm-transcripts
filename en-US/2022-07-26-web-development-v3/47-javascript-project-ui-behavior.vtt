WEBVTT

1
00:00:00.946 --> 00:00:04.399
Okay, I'm gonna need a couple of
functions to work with this, right,

2
00:00:04.399 --> 00:00:08.212
cuz I have all the different math symbols,
these all work similarly, right?

3
00:00:08.212 --> 00:00:11.543
I have a backspace function,
which is gonna do something different.

4
00:00:11.543 --> 00:00:13.086
I have a C symbol that's
gonna do something different.

5
00:00:13.086 --> 00:00:17.187
And I have an = symbol that's
gonna do something different.

6
00:00:17.187 --> 00:00:19.867
So I kinda have one, two, three,

7
00:00:19.867 --> 00:00:24.125
four kind of different use
cases that I have to handle.

8
00:00:24.125 --> 00:00:27.087
Let's just start with the easy one.

9
00:00:27.087 --> 00:00:30.808
I think the easiest one here is probably,

10
00:00:30.808 --> 00:00:35.497
I don't know,
there the = one's are the hard one.

11
00:00:35.497 --> 00:00:37.655
So we're gonna do = last.

12
00:00:37.655 --> 00:00:38.596
Which one did I do here?

13
00:00:42.644 --> 00:00:47.499
Let's do the clear, I think clear is
pretty easy, comparatively speaking.

14
00:00:47.499 --> 00:00:48.771
So what does C do?

15
00:00:48.771 --> 00:00:54.130
If I have numbers here, if I press C,
it'll clear it out, right?

16
00:00:54.130 --> 00:01:01.235
That's what C is supposed to do,
so I expect it to go back to 0.

17
00:01:01.235 --> 00:01:05.158
So let's do that.

18
00:01:08.169 --> 00:01:12.836
So here for handleSymbol,
we could do this with if statements.

19
00:01:12.836 --> 00:01:17.200
So if, (symbol === C),

20
00:01:17.200 --> 00:01:22.681
I'm gonna show you a different way
of doing this, called a switch,

21
00:01:22.681 --> 00:01:27.700
which is basically the same
thing as multiple if statements.

22
00:01:27.700 --> 00:01:30.269
So I'm gonna say switch, like this.

23
00:01:30.269 --> 00:01:34.922
I'm gonna put what I'm switching on,
which is the symbol.

24
00:01:35.964 --> 00:01:42.330
Okay, put that between curly braces, and
then you give it a bunch of cases, right?

25
00:01:42.330 --> 00:01:46.844
So I'm gonna say case of C,
and then you put a colon here.

26
00:01:48.574 --> 00:01:51.116
I'm gonna say buffer = '0', right?

27
00:01:51.116 --> 00:01:52.954
Cuz I clear that out.

28
00:01:55.757 --> 00:01:56.609
And then I'm gonna break.

29
00:02:00.766 --> 00:02:02.763
So this is the same thing as saying, if,

30
00:02:06.915 --> 00:02:13.243
(symbol === C), Then do this, right?

31
00:02:13.243 --> 00:02:16.670
So that's what it's asking here,
is symbol equal to C?

32
00:02:16.670 --> 00:02:18.807
And now I can have a bunch of cases here.

33
00:02:18.807 --> 00:02:21.261
So let's just go do all the cases.

34
00:02:21.261 --> 00:02:23.107
We'll do '='.

35
00:02:25.135 --> 00:02:29.701
We'll put our stub here,
console.log('equals').

36
00:02:29.701 --> 00:02:36.207
case, and then we'll have
to put break there as well.

37
00:02:36.207 --> 00:02:40.396
So you can think of break as
the closing curly brace here, right?

38
00:02:40.396 --> 00:02:43.972
It's basically saying that I'm
done with my switch statement.

39
00:02:43.972 --> 00:02:47.720
So at the end of your case,
you always have to put a break.

40
00:02:50.928 --> 00:02:53.221
Okay, we'll have a back arrow.

41
00:02:53.221 --> 00:02:56.290
I'm just gonna copy and
paste that from here.

42
00:02:56.290 --> 00:03:02.222
Inspect, to make sure
I get the same symbol.

43
00:03:03.483 --> 00:03:10.268
There we go, back arrow, let's say
console.log('back arrow'), break.

44
00:03:10.268 --> 00:03:16.143
We'll do case, and
then we'll do all of the math symbols.

45
00:03:16.143 --> 00:03:23.378
And we'll handle that all in
a math function of some variety.

46
00:03:23.378 --> 00:03:24.110
So, what you can do is,

47
00:03:24.110 --> 00:03:26.257
what's cool about this is that I can
just put multiple cases in a row.

48
00:03:30.265 --> 00:03:34.649
Case, and then I'll grab the correct
multiplication symbol as well,

49
00:03:34.649 --> 00:03:36.704
cuz I don't want to mess that up.

50
00:03:36.704 --> 00:03:41.018
We'll got the divide one in there as well.

51
00:03:42.334 --> 00:03:49.129
And then case, this one,
I want to get the multiplication one.

52
00:03:52.066 --> 00:03:53.143
Okay.

53
00:03:55.363 --> 00:03:58.540
And then now I can make some functions,

54
00:03:58.540 --> 00:04:04.714
like this is a console.log('math symbol'),
or something like that.

55
00:04:05.805 --> 00:04:07.562
And then break.

56
00:04:09.484 --> 00:04:11.052
And that should be good.

57
00:04:15.376 --> 00:04:16.590
Okay.

58
00:04:21.191 --> 00:04:29.654
So if I refresh now,
I need to look at my console here.

59
00:04:29.654 --> 00:04:35.330
So, if I do 58, and I hit C,
what do I expect to happen?

60
00:04:35.330 --> 00:04:37.761
Expect it to go back to 0, right?

61
00:04:37.761 --> 00:04:38.322
Which it does.

62
00:04:42.393 --> 00:04:46.572
Again, let's just follow through
to make sure people got it.

63
00:04:46.572 --> 00:04:50.252
Okay, I have my event listener,
that event happens,

64
00:04:50.252 --> 00:04:53.137
it calls buttonClick with the innerText.

65
00:04:53.137 --> 00:04:55.041
That goes to buttonClick.

66
00:04:55.041 --> 00:04:57.703
If it's a number, it goes to handleNumber.

67
00:04:57.703 --> 00:05:00.736
If it's a symbol,
it goes to handleSymbol, cool.

68
00:05:00.736 --> 00:05:06.923
Okay, so we went to handleSymbol,
I set the buffer = '0', okay?

69
00:05:06.923 --> 00:05:09.670
And then it goes back here to buttonClick,
remember, and

70
00:05:09.670 --> 00:05:11.534
at the very end of it it calls rerender.

71
00:05:11.534 --> 00:05:14.790
That's why all I have to do here
is set the buffer = '0', and

72
00:05:14.790 --> 00:05:19.087
then this rerender will handle
setting it to 0 on the screen as well.

73
00:05:19.087 --> 00:05:24.223
Cool, that's it.

74
00:05:24.223 --> 00:05:25.733
We just did C.

75
00:05:25.733 --> 00:05:27.176
So what I had here is I had,

76
00:05:27.176 --> 00:05:30.404
that's ironic that that kept
working the way that it did.

77
00:05:30.404 --> 00:05:35.689
I have this if statement up here,
and once you delete that,

78
00:05:35.689 --> 00:05:40.354
most of you probably
shouldn't have that in there.

79
00:05:40.354 --> 00:05:47.158
So, now if I go back in here, math symbol,
those all work, equal signs, back arrow.

80
00:05:47.158 --> 00:05:49.896
All that works, okay?

81
00:05:49.896 --> 00:05:56.323
So I can drop my console.log here,
which I did.

82
00:05:56.323 --> 00:05:57.818
It's gone.

83
00:05:57.818 --> 00:06:02.472
Hey, don't need that one anymore.

84
00:06:02.472 --> 00:06:07.074
Okay, console.log('equals'),
we're gonna do the back arrow next.

85
00:06:07.074 --> 00:06:10.362
Now you can make a function here that
goes out and handles a back arrow or

86
00:06:10.362 --> 00:06:12.950
something like that, but
it's a pretty short thing.

87
00:06:12.950 --> 00:06:15.682
So I'm just gonna do it
directly here in the switch.

88
00:06:15.682 --> 00:06:22.796
So I'm gonna say if buffer === '1', well,
let's talk maybe through the logic first.

89
00:06:26.222 --> 00:06:31.339
If I hit back arrow, now, on 99,
what do I expect to happen?

90
00:06:31.339 --> 00:06:33.261
It's gonna be 9, right?

91
00:06:33.261 --> 00:06:37.752
So I'm gonna lop one off, or
let's make it even more clear, 98, right?

92
00:06:37.752 --> 00:06:41.433
If I hit back arrow,
I'm going to cut off the 8, and

93
00:06:41.433 --> 00:06:44.045
then we'll be left with 9, right?

94
00:06:44.045 --> 00:06:47.484
I'm gonna delete the last
thing that was there, okay?

95
00:06:47.484 --> 00:06:50.839
If I have 9 and I hit back arrow,
what do I expect?

96
00:06:50.839 --> 00:06:51.950
It should be 0, right?

97
00:06:51.950 --> 00:06:58.026
And if it's 0, what do I expect it to be?

98
00:06:58.026 --> 00:06:59.945
0, right?

99
00:06:59.945 --> 00:07:03.691
It's unchanged if it's 0.

100
00:07:05.566 --> 00:07:12.001
Okay, so starting from the top there,

101
00:07:12.001 --> 00:07:17.851
if buffer.length === '1',

102
00:07:17.851 --> 00:07:23.311
then buffer is assigned '0',

103
00:07:23.311 --> 00:07:26.632
string 0, right?

104
00:07:26.632 --> 00:07:29.043
Now what happens if buffer
was '0' to begin with?

105
00:07:29.043 --> 00:07:31.688
Right, which is of length 1.

106
00:07:31.688 --> 00:07:35.052
This still works, I don't have
to make a special case for '0',

107
00:07:35.052 --> 00:07:39.096
because this will still work the way
that I anticipate, that's totally fine.

108
00:07:39.096 --> 00:07:48.584
else, buffer is assigned
buffer.substring(0,

109
00:07:48.584 --> 00:07:53.230
buffer.length- 1).

110
00:07:57.818 --> 00:08:04.429
Basically we're gonna take the string and
we're gonna lop off the last number.

111
00:08:04.429 --> 00:08:10.636
So if I have 954, it's gonna take 95 and
it's gonna cut off the 4.

112
00:08:13.022 --> 00:08:14.541
Okay, that's it.

113
00:08:14.541 --> 00:08:18.644
Again, remembering that our
rerender already happens.

114
00:08:20.435 --> 00:08:25.457
So If I do 98 and I hit back,
what do I expect to happen?

115
00:08:25.457 --> 00:08:28.181
It's gonna go to 9, cool.

116
00:08:28.181 --> 00:08:31.363
If I hit back again, it's gonna go to 0.

117
00:08:31.363 --> 00:08:40.058
And if I hit back again,
it's gonna stay at 0, Right?

