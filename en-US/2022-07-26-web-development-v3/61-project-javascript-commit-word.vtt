WEBVTT

1
00:00:00.200 --> 00:00:06.050
We are gonna do all of the marking
as correct, close, or wrong.

2
00:00:06.050 --> 00:00:11.210
Now, I'm just gonna forewarn you here that
I've already thought about this a lot.

3
00:00:11.210 --> 00:00:13.795
And so we're just gonna go
straight to my best solution, but

4
00:00:13.795 --> 00:00:16.733
it took me a couple of iterations
of trying it once, trying it twice,

5
00:00:16.733 --> 00:00:18.680
trying it a different way,
trying it again.

6
00:00:20.460 --> 00:00:25.367
And I have found that eventually,
the easiest way to do this was to go over

7
00:00:25.367 --> 00:00:30.830
the list or the word once mark,
everything is correct, that's correct.

8
00:00:30.830 --> 00:00:35.520
Then go back over it again and mark
everything that else as close or wrong.

9
00:00:35.520 --> 00:00:36.520
And I'll explain to you why.

10
00:00:37.920 --> 00:00:43.014
So again, remember the correct
word here is ivory, right?

11
00:00:43.014 --> 00:00:49.790
If I put pools here, notice that this
first o is marked as incorrect, right?

12
00:00:51.250 --> 00:00:55.285
Now if I was just doing like
a really naïve implementation,

13
00:00:55.285 --> 00:00:57.730
there is an o in this, right?

14
00:00:57.730 --> 00:01:01.159
There's this o, so
if I was just being naïve about it,

15
00:01:01.159 --> 00:01:03.630
this would be marked as close, right?

16
00:01:03.630 --> 00:01:05.130
It'd be marked as yellow.

17
00:01:06.490 --> 00:01:08.974
But we don't want that,
that's actually not correct.

18
00:01:08.974 --> 00:01:13.780
So we actually have to keep track of
how many of each letter is in the word.

19
00:01:13.780 --> 00:01:15.100
Does that make sense?

20
00:01:15.100 --> 00:01:18.164
Okay, so let me show you how I did that.

21
00:01:18.164 --> 00:01:22.115
There's definitely other
ways of doing that.

22
00:01:23.457 --> 00:01:28.402
So the first thing I'm gonna do is I'm

23
00:01:28.402 --> 00:01:33.044
gonna split our guess into pieces.

24
00:01:33.044 --> 00:01:39.191
Easy way to do that, Is we're gonna say,

25
00:01:39.191 --> 00:01:44.593
const guessParts or
whatever you wanna call it,

26
00:01:44.593 --> 00:01:48.162
equals currentGuess.split.

27
00:01:48.162 --> 00:01:52.425
And if you split on an empty string,
it'll rip it apart and

28
00:01:52.425 --> 00:01:56.130
make each character one entry in an array.

29
00:01:56.130 --> 00:01:58.370
Let me show you what I mean here.

30
00:01:58.370 --> 00:02:04.179
So if I go over here to the console,
and I say POOLS.

31
00:02:04.179 --> 00:02:07.403
Sorry, I have to make it a string.

32
00:02:07.403 --> 00:02:12.822
POOLS.split and I give it an empty string.

33
00:02:12.822 --> 00:02:18.675
Notice I get back an array of P-O-O-L-S,
right?

34
00:02:18.675 --> 00:02:20.900
That's what split does.

35
00:02:24.434 --> 00:02:27.606
Okay, so now I have this array of letters.

36
00:02:33.821 --> 00:02:37.720
The next thing I'm gonna do is,
I wanna go count how many of each letter.

37
00:02:37.720 --> 00:02:41.940
Well, before I even do that,
I have this word here.

38
00:02:41.940 --> 00:02:44.512
So I'm actually going to go up here,
again, this word doesn't change,

39
00:02:44.512 --> 00:02:45.766
so I can actually just do it up here.

40
00:02:45.766 --> 00:02:49.650
I'm gonna say const wordParts,

41
00:02:53.185 --> 00:02:57.649
= word.split, again, same way.

42
00:02:57.649 --> 00:03:01.290
So now I have two different part arrays,
right?

43
00:03:02.520 --> 00:03:05.127
This one is gonna be the correct answer,
and

44
00:03:05.127 --> 00:03:08.590
this is going to be what the user
is guessing at the moment.

45
00:03:14.654 --> 00:03:17.980
So even before we go and do all
the counting, let's just go ahead and,

46
00:03:17.980 --> 00:03:21.978
We're gonna say for,

47
00:03:27.002 --> 00:03:29.305
Let i = 0.

48
00:03:29.305 --> 00:03:32.585
i is less than,
you could say parts or .length or

49
00:03:32.585 --> 00:03:38.059
you can even just say ANSWER LENGTH,
they should all be the same thing.

50
00:03:38.059 --> 00:03:39.826
I ++, and we're gonna go through,

51
00:03:39.826 --> 00:03:42.933
all we're gonna do right now is
just mark things that are correct.

52
00:03:45.787 --> 00:03:48.110
So we're gonna say here this
is the mark as correct.

53
00:03:55.033 --> 00:03:57.938
And we're just gonna say, if,

54
00:04:00.188 --> 00:04:04.762
guessParts at I triple
equals wordParts at i,

55
00:04:06.126 --> 00:04:09.484
Then it's right, right,

56
00:04:09.484 --> 00:04:15.762
they got the right thing
in the right spot, right?

57
00:04:15.762 --> 00:04:19.796
So again, if we're over here at POOLS,
and we're on the this one here,

58
00:04:19.796 --> 00:04:20.869
the word is IVORY.

59
00:04:20.869 --> 00:04:23.563
On this one,
the O is going to triple equal to the O,

60
00:04:23.563 --> 00:04:25.149
they got something correct.

61
00:04:28.030 --> 00:04:34.082
So what we're gonna do there
is we're gonna say, letters,

62
00:04:36.779 --> 00:04:45.960
currentRow times ANSWER_LENGTH plus what?

63
00:04:46.960 --> 00:04:49.119
Plus i, right?

64
00:04:49.119 --> 00:04:54.139
So if we're on, the second one has to
be plus two, if we're on the zero with

65
00:04:54.139 --> 00:04:58.940
one that it's plus zero, so plus i there,
wherever this i is correct.

66
00:05:02.670 --> 00:05:09.575
We're just gonna say .classList
cuz they're all dom nodes,

67
00:05:09.575 --> 00:05:13.621
.add and they are correct, right?

68
00:05:13.621 --> 00:05:16.699
So we'll mark it is green.

69
00:05:22.573 --> 00:05:24.357
Cool, good so far?

70
00:05:28.238 --> 00:05:30.212
So let's actually try
that see if it works.

71
00:05:30.212 --> 00:05:31.950
We know what are word is it's IVORY.

72
00:05:33.620 --> 00:05:38.188
If I type in here POOLS,
I would expect this O to be green.

73
00:05:40.815 --> 00:05:43.121
Very cool.

74
00:05:43.121 --> 00:05:50.315
If I type in here IVORY, we haven't done
this yet but now all of them are correct.

75
00:05:50.315 --> 00:05:51.882
So far pretty good.

76
00:05:51.882 --> 00:05:53.980
PEARS, that one's right.

77
00:05:57.289 --> 00:05:59.121
Awesome.

78
00:06:02.271 --> 00:06:04.371
Okay, let's go do a second loop through.

79
00:06:06.310 --> 00:06:08.938
And we're gonna do on the second
loop everything's gonna be

80
00:06:08.938 --> 00:06:10.720
marked as incorrect or correct.

81
00:06:10.720 --> 00:06:14.812
Now, again,
you might be looking me like Brian,

82
00:06:14.812 --> 00:06:19.350
why can I just mark it as incorrect or
close in here?

83
00:06:19.350 --> 00:06:20.668
You could, but I promise you,

84
00:06:20.668 --> 00:06:23.886
you're gonna run into an issue that
you're gonna have to refactor later.

85
00:06:23.886 --> 00:06:26.825
We're gonna go for a second loop.

86
00:06:26.825 --> 00:06:28.167
Let i = 0.

87
00:06:28.167 --> 00:06:32.753
i is less than ANSWER_LENGTH i++.

88
00:06:34.418 --> 00:06:40.067
So we're gonna basically
take this first one.

89
00:06:40.067 --> 00:06:44.960
Since we already took care of this one,

90
00:06:44.960 --> 00:06:49.409
we're just gonna do nothing here,

91
00:06:49.409 --> 00:06:54.020
we don't need to do anything again.

92
00:06:54.020 --> 00:06:57.426
Do nothing we already did it.

93
00:06:57.426 --> 00:06:58.837
Else if,

94
00:07:08.165 --> 00:07:13.310
We have to do something here,
so I'm just gonna put like

95
00:07:13.310 --> 00:07:20.211
a little comment here to say that we're
gonna come back and get this right.

96
00:07:21.360 --> 00:07:25.370
TODO make this more accurate.

97
00:07:25.370 --> 00:07:32.680
For now,
what we're gonna say if a guest parts,

98
00:07:32.680 --> 00:07:37.674
sorry, wordParts.includes,

99
00:07:37.674 --> 00:07:42.859
so wordParts is an array, right?

100
00:07:42.859 --> 00:07:51.758
And, Includes is a function
that you can call to say,

101
00:07:51.758 --> 00:07:55.170
hey, does this array contain
this other thing anywhere?

102
00:07:55.170 --> 00:08:01.000
So let me give you an example of that.

103
00:08:01.000 --> 00:08:06.098
If I have, 1, 2, 3, 4, 5, and

104
00:08:06.098 --> 00:08:10.868
I say .includes(3), that's true, right?

105
00:08:10.868 --> 00:08:12.713
Because three is somewhere in this array.

106
00:08:12.713 --> 00:08:17.570
If I do 10, that's false because
there's no 10 in that array.

107
00:08:18.920 --> 00:08:24.781
So I'm gonna say does workParts.include

108
00:08:24.781 --> 00:08:28.853
anywhere guessParts(i),

109
00:08:28.853 --> 00:08:34.162
if it does, Then mark it is close, right?

110
00:08:36.890 --> 00:08:41.913
So we're gonna say, we're gonna just
take this exact same thing here.

111
00:08:44.982 --> 00:08:46.629
But instead of adding correct
we're gonna add close.

112
00:08:49.166 --> 00:08:50.915
And if it's not close or
correct, what is it?

113
00:08:53.380 --> 00:08:54.810
It's wrong.

114
00:09:06.827 --> 00:09:08.800
Okay, refresh the page.

115
00:09:12.695 --> 00:09:15.451
So how about POOLS?

116
00:09:19.624 --> 00:09:22.411
PEARS, or something like that, right?

117
00:09:22.411 --> 00:09:28.773
So, this is doing exactly what we
told it to do, or how about TOILS?

118
00:09:28.773 --> 00:09:32.960
So this one's actually right,
this would be correct.

119
00:09:32.960 --> 00:09:37.160
There is an O but it's in the wrong place,
there is an I but it's in the wrong place,

120
00:09:37.160 --> 00:09:40.160
this is exactly what it should be showing,
right?

121
00:09:40.160 --> 00:09:42.624
T is incorrect, it's not an IVORY at all.

122
00:09:42.624 --> 00:09:45.350
L is incorrect it's not an IVORY and
S is not in IVORY at all.

123
00:09:46.810 --> 00:09:49.980
Where we have a problem
now is we have this one.

124
00:09:49.980 --> 00:09:55.040
This O is being marked as close and
it's not, right?

125
00:09:55.040 --> 00:09:58.033
Because there is an O it's
in the correct place,

126
00:09:58.033 --> 00:10:02.347
this is informing the user there's
an O in here somewhere and we lied.

127
00:10:02.347 --> 00:10:03.284
It's a lie, everything's a lie.

128
00:10:06.464 --> 00:10:12.530
So that means we kind of have to keep
track of how many letters are in there?

129
00:10:13.720 --> 00:10:14.739
And I'll show you how I did it.

130
00:10:16.707 --> 00:10:22.910
First of all, any questions here before
we dive into making it even more correct?

131
00:10:22.910 --> 00:10:27.350
So we have to count for every letter
how many of them are in here, right?

132
00:10:27.350 --> 00:10:30.686
So we have to know that there's exactly
one O, and there's not two O's.

133
00:10:30.686 --> 00:10:33.547
So the way that I chose to
do this is before I even get

134
00:10:33.547 --> 00:10:38.352
started, I have a function here,
just down at

135
00:10:38.352 --> 00:10:41.991
the bottom it's kind of just like a little
utility function and I call it makeMap.

136
00:10:41.991 --> 00:10:46.784
And it takes in an array.

137
00:10:46.784 --> 00:10:48.560
It makes an object.

138
00:10:49.640 --> 00:10:53.155
And all it's gonna do is it's just
going to say, there's one P in here,

139
00:10:53.155 --> 00:10:55.534
there's one O, there's one I, there's two.

140
00:10:55.534 --> 00:10:59.631
And it's just gonna make
an object of that, right?

141
00:10:59.631 --> 00:11:04.010
So it's gonna say 4, let i = 0,

142
00:11:04.010 --> 00:11:08.997
i is less than array.length, i + +.

143
00:11:08.997 --> 00:11:15.046
And it's gonna say,
if you already have that object,

144
00:11:15.046 --> 00:11:21.588
so object, Of array i.

145
00:11:21.588 --> 00:11:25.749
So this might be a little bit more clear,
let's do it this way.

146
00:11:25.749 --> 00:11:34.205
const, letter, Equals array of i.

147
00:11:38.402 --> 00:11:42.221
So we talked a little about
this when we're doing objects.

148
00:11:44.489 --> 00:11:49.461
So this will be like P or O or L and
this will be setting either P or

149
00:11:49.461 --> 00:11:53.110
O or I or something like that,
on the object.

150
00:11:56.966 --> 00:12:01.808
So if I just say, if object of letter,
if I just say like that, if it exists,

151
00:12:01.808 --> 00:12:06.228
it'll return true, if it doesn't exist,
it will not return true.

152
00:12:11.026 --> 00:12:17.144
And if it does exist,
then we're just gonna say ++ or

153
00:12:17.144 --> 00:12:22.065
otherwise we're gonna say object of letter

154
00:12:22.065 --> 00:12:26.940
equals 1 and we will return the object.

155
00:12:26.940 --> 00:12:30.987
So let me show you an example of
using this and then we'll go back and

156
00:12:30.987 --> 00:12:32.159
dissect it again.

157
00:12:32.159 --> 00:12:37.367
So const map equals make map,
that function that we just wrote together,

158
00:12:37.367 --> 00:12:40.738
of guess, not just guessParts but
wordParts.

159
00:12:43.422 --> 00:12:50.861
And then just to show you what it is
we'll say console.log map, map now.

160
00:12:52.975 --> 00:12:59.678
Refresh the page and
I say POOLS here and I hit Enter.

161
00:12:59.678 --> 00:13:04.496
It's giving me IVORY which has
one of each letter, right?

162
00:13:04.496 --> 00:13:09.632
Which in this general case is
probably gonna be okay, but

163
00:13:09.632 --> 00:13:14.768
let's take a look at,
makeMap of something like POOLS,

164
00:13:14.768 --> 00:13:18.300
and we'll split that on empty string.

165
00:13:18.300 --> 00:13:21.925
Right, POOLS has two O's, right,
so it comes out back with two.

166
00:13:21.925 --> 00:13:25.940
And that's what we're looking for,
cuz then I can keep track of how many,

167
00:13:25.940 --> 00:13:28.577
of each letter I've marked as close or
correct.

168
00:13:28.577 --> 00:13:32.152
And then therefore at the end
of this I can make sure that

169
00:13:32.152 --> 00:13:36.914
I have exactly the correct amount of
things marked as correct and close.

170
00:13:36.914 --> 00:13:41.052
There are other ways you could
have done this for sure.

171
00:13:41.052 --> 00:13:45.282
You could have checked
the string every time of like,

172
00:13:45.282 --> 00:13:47.726
okay how many O's are in here?

173
00:13:47.726 --> 00:13:51.382
This is the way that made sense to me.

174
00:13:51.382 --> 00:13:56.286
Because now at the end of this,
if I go down to my commit, this part,

175
00:13:56.286 --> 00:13:59.747
if they get a correct
thing I can just say, map,

176
00:14:02.832 --> 00:14:07.440
Of the letter, right, the letter is gonna
be whatever the guess part was, right?

177
00:14:07.440 --> 00:14:12.974
So I can put that here and
I can just say --, right?

178
00:14:12.974 --> 00:14:19.027
So that means after I guess the O
correctly here it'll minus minus this,

179
00:14:19.027 --> 00:14:22.598
so that later I can check to say like,
hey,

180
00:14:22.598 --> 00:14:26.684
is there an O left for
me to mark as close, right?

181
00:14:30.895 --> 00:14:32.432
You can use this technique
to kind of do that.

182
00:14:34.861 --> 00:14:37.718
So again, guess parts here,
this will be like O, right?

183
00:14:37.718 --> 00:14:41.062
And inside of that map, if you
remember here, it'll just make this,

184
00:14:41.062 --> 00:14:42.319
O go minus minus, right?

185
00:14:44.320 --> 00:14:48.766
So if I do that again,
I will just say x equals,

186
00:14:48.766 --> 00:14:52.642
right, and when I say x.o, right, and

187
00:14:52.642 --> 00:14:57.966
I say --, Then x.o here now is 1.

188
00:14:57.966 --> 00:15:04.067
If I do it again, x.o --, then x.o oops.

189
00:15:04.067 --> 00:15:08.900
X.o is 0, right?

190
00:15:08.900 --> 00:15:11.522
And then now once it's 0,
then I can say, cool,

191
00:15:11.522 --> 00:15:13.778
there are no more O's left in this string.

192
00:15:13.778 --> 00:15:15.541
Does that follow make sense?

193
00:15:15.541 --> 00:15:17.458
Cool.

194
00:15:21.558 --> 00:15:22.905
All right.

195
00:15:22.905 --> 00:15:26.051
Why map?
That's probably a good question you could

196
00:15:26.051 --> 00:15:26.627
ask me.

197
00:15:26.627 --> 00:15:31.226
That kind of data structure that I showed
you where you were just making like

198
00:15:31.226 --> 00:15:36.129
a mapping basically, it's just called
a map, that's what you would call it.

199
00:15:36.129 --> 00:15:38.344
A map is, loosely an object.

200
00:15:38.344 --> 00:15:43.050
Now every time we mark something as
correct we're doing minus minus and

201
00:15:43.050 --> 00:15:47.755
this is why I split it apart, is I can
go mark all the correct things first

202
00:15:47.755 --> 00:15:51.926
cuz that's more important than
being close as being correct.

203
00:15:51.926 --> 00:15:55.143
Then on here,
now we can make this more correct, right,

204
00:15:55.143 --> 00:16:00.178
we can say, If this is true,

205
00:16:00.178 --> 00:16:05.420
if it includes it, and then we can do
what's called the compound condition.

206
00:16:05.420 --> 00:16:10.430
So if I put a double ampersand here,
now both of these things have to be true.

207
00:16:10.430 --> 00:16:14.147
So if I say and,

208
00:16:16.094 --> 00:16:21.160
Map, guessParts of i,

209
00:16:21.160 --> 00:16:28.694
right, that thing that we've
been decrementing up here.

210
00:16:30.363 --> 00:16:33.986
If that's greater than 0,

211
00:16:35.745 --> 00:16:40.538
Okay, then we can mark it as close.

212
00:16:44.360 --> 00:16:51.144
Right, so with this one now it's gonna
go find this first O on the first pass.

213
00:16:51.144 --> 00:16:53.779
It'll decrement that so
that there's no O's left for

214
00:16:53.779 --> 00:16:56.420
it to mark on the second pass through.

215
00:16:56.420 --> 00:17:01.415
And so this mapGuess parts of
O here is going to be what?

216
00:17:01.415 --> 00:17:06.056
0, right, because there's no O's left
here, so it's not gonna mark it as close,

217
00:17:06.056 --> 00:17:07.674
it's gonna mark it as wrong.

218
00:17:11.419 --> 00:17:15.716
Okay, and then important here you have
to also do decrement here as well.

219
00:17:19.003 --> 00:17:21.720
All right,
because now we've marked that many right.

220
00:17:21.720 --> 00:17:26.273
You can imagine a case where
there's three of one letter, right?

221
00:17:26.273 --> 00:17:29.226
In which case it would
become important here, or

222
00:17:29.226 --> 00:17:33.052
two if you just got them both close,
or one, doesn't matter.

223
00:17:33.052 --> 00:17:35.097
Anyway, important for
you to say that I've,

224
00:17:35.097 --> 00:17:38.304
you're basically counting how many
of these you're keeping track of.

225
00:17:42.438 --> 00:17:47.305
And now if we save this and come back
over here and refresh, if we say POOLS,

226
00:17:49.976 --> 00:17:53.233
Now this is not being counted
which is exactly what we wanted.

227
00:17:58.167 --> 00:18:03.171
Right, and now it'll only mark
the first one, not the other three.

