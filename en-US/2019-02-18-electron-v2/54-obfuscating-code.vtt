WEBVTT

1
00:00:00.020 --> 00:00:04.577
&gt;&gt; Steve Kinney: One thing I want to show
you, and this is best seen on MacOS,

2
00:00:04.577 --> 00:00:09.499
is that if we go to Show package contents,
and we go to Contents,

3
00:00:09.499 --> 00:00:11.706
I believe it's resources.

4
00:00:11.706 --> 00:00:13.026
And we see this app.

5
00:00:14.511 --> 00:00:15.535
&gt;&gt; Steve Kinney: Hey, look at that!

6
00:00:16.858 --> 00:00:21.136
&gt;&gt; Steve Kinney: It's my application,
right?

7
00:00:21.136 --> 00:00:22.330
It's all of my source code.

8
00:00:23.810 --> 00:00:26.523
If you want to truly
obfuscate your source code,

9
00:00:26.523 --> 00:00:29.310
Electron's not really a great choice for
you.

10
00:00:29.310 --> 00:00:33.119
It is built for open source apps
like Atom and Visual Studio Code.

11
00:00:33.119 --> 00:00:34.540
That's not a thing in there.

12
00:00:34.540 --> 00:00:38.430
However, you could theoretically write
native modules that are compiled, right?

13
00:00:38.430 --> 00:00:39.290
You can use them.

14
00:00:39.290 --> 00:00:42.340
So if there is company secret
code that you need to use,

15
00:00:42.340 --> 00:00:43.810
you just need to compile it.

16
00:00:43.810 --> 00:00:46.740
You probably need to compile it in
a way that you can include it as

17
00:00:46.740 --> 00:00:48.430
a native dependency in there.

18
00:00:48.430 --> 00:00:51.040
And then that would be obfuscated,
but like the UI code.

19
00:00:51.040 --> 00:00:53.310
In the same way if you send
JavaScript to the browser.

20
00:00:53.310 --> 00:00:55.170
Same basic idea.

21
00:00:55.170 --> 00:00:59.447
However, sending this file directory isn't
great either ,cuz there is like some file

22
00:00:59.447 --> 00:01:01.300
opening costs in there as well.

23
00:01:01.300 --> 00:01:06.702
So there is format called ASAR, A-S-A-R,
which is basically, it's like a tar like

24
00:01:06.702 --> 00:01:11.677
archive format that supports basically,
it's effectively a giant text file.

25
00:01:11.677 --> 00:01:14.580
But it makes random access reads and
writes really a lot faster.

26
00:01:14.580 --> 00:01:20.736
And to do that,
&gt;&gt; Steve Kinney: You

27
00:01:20.736 --> 00:01:22.639
simply add the asar flag there.

28
00:01:26.491 --> 00:01:28.005
&gt;&gt; Steve Kinney: Go ahead and
run build now.

29
00:01:34.736 --> 00:01:35.559
&gt;&gt; Steve Kinney: Cool.

30
00:01:39.962 --> 00:01:42.240
&gt;&gt; Steve Kinney: Now we can do
this Show package contents again.

31
00:01:42.240 --> 00:01:44.560
Contents, resources.

32
00:01:44.560 --> 00:01:45.930
Now it says app.asar file.

33
00:01:45.930 --> 00:01:49.250
You're like, totally, totally great.

34
00:01:49.250 --> 00:01:50.966
Not really.

35
00:01:50.966 --> 00:01:53.046
It's not gonna protect
your code from anything.

36
00:01:53.046 --> 00:01:58.750
You can kinda see in here that

37
00:01:58.750 --> 00:02:03.340
the asar command line tool, you can start
to see stuff that looks familiar in here.

38
00:02:03.340 --> 00:02:05.420
The asar command line tool is open source.

39
00:02:05.420 --> 00:02:08.520
You can basically un-asar
anything you want.

40
00:02:08.520 --> 00:02:13.691
Which means if one wanted to have fun,
they could take any

41
00:02:13.691 --> 00:02:19.630
Electron app on their computer,
go ahead, let's say, Slack.

42
00:02:19.630 --> 00:02:23.897
And go Show Package Contents
&gt; Contents &gt; Resources,

43
00:02:23.897 --> 00:02:28.980
grab that app.asar, use the command
line tool to unarchive it and

44
00:02:28.980 --> 00:02:32.092
go read all the client side source code.

45
00:02:32.092 --> 00:02:36.500
I say that cuz I think Atom and
Visual Studio Code are open source.

46
00:02:36.500 --> 00:02:40.190
But you could totally [LAUGH] take a look
at anything you want in there, as well.

47
00:02:40.190 --> 00:02:44.050
But yeah, that is the kind of quick and
easy way.

48
00:02:44.050 --> 00:02:46.610
Again, if you're using Electron Forge,
it's built in.

49
00:02:46.610 --> 00:02:49.270
This is all kind of set up for
you already, but

50
00:02:49.270 --> 00:02:51.170
it's using the same tools
as we just showed, right?

51
00:02:51.170 --> 00:02:53.100
So there's no different black magic.

52
00:02:53.100 --> 00:02:54.890
It's using Electron
package under the hood.

53
00:02:54.890 --> 00:02:57.930
Electron Forge is basically
a way of taking some of these

54
00:02:57.930 --> 00:03:00.230
other libraries I showed you,
and pulling them all together.

