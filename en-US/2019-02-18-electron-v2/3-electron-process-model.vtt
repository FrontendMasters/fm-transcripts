WEBVTT

1
00:00:00.200 --> 00:00:03.470
&gt;&gt; Steve Kinney: We talk a little bit
about the process model in Electron.

2
00:00:03.470 --> 00:00:06.070
How Electron kind of works and
how we can start to think about it.

3
00:00:09.540 --> 00:00:12.440
Basically, the way that we
start up an application

4
00:00:12.440 --> 00:00:15.580
is we have this main entry on
line five over there, right?

5
00:00:15.580 --> 00:00:17.610
And we just say where the main process is.

6
00:00:17.610 --> 00:00:20.000
This is kind of the entry point for
application.

7
00:00:20.000 --> 00:00:23.420
And there's two major kinds of processes
that we'll look at in a second.

8
00:00:23.420 --> 00:00:28.160
There is one main process and
then there are one or more, or

9
00:00:28.160 --> 00:00:30.800
zero or more renderer processes.

10
00:00:30.800 --> 00:00:35.500
So you can actually spend each one has if
you think about like in Chrome each tab is

11
00:00:35.500 --> 00:00:36.328
its own thread and

12
00:00:36.328 --> 00:00:39.210
its own process completely like
isolated from everything else.

13
00:00:39.210 --> 00:00:41.310
The same for every renderer process.

14
00:00:41.310 --> 00:00:43.976
You can spin up as many of these like
independent threads as you want.

15
00:00:43.976 --> 00:00:48.230
So you could do really cool stuff like
not have Windows for some of them and

16
00:00:48.230 --> 00:00:52.275
have a thread pool and all sorts of
crazy stuff and like mine Bitcoin or

17
00:00:52.275 --> 00:00:55.385
something on single
JavaScript threads possibly.

18
00:00:55.385 --> 00:00:59.780
But you have one main process,
spin up multiple renderer processes.

19
00:00:59.780 --> 00:01:02.670
And we define that main process

20
00:01:02.670 --> 00:01:06.920
in our package.json with
the very neat entry of main.

21
00:01:06.920 --> 00:01:09.127
That seems good, right?

22
00:01:09.127 --> 00:01:12.582
Once we have that main in there,
it's really just npm start.

23
00:01:12.582 --> 00:01:16.087
And what happens is
Electron will go ahead.

24
00:01:16.087 --> 00:01:21.173
If we look at that previous slide,
you can see over on 18 that we just call

25
00:01:21.173 --> 00:01:26.037
Electron and then the current directory,
and that will look at main.

26
00:01:26.037 --> 00:01:26.982
We call npm start.

27
00:01:26.982 --> 00:01:29.250
It'll spin up our main process for
our application.

28
00:01:29.250 --> 00:01:32.880
Once we have the main process right,

29
00:01:32.880 --> 00:01:37.800
which is our kind of like, it is,
there is no idea of a server and a client.

30
00:01:37.800 --> 00:01:40.720
But that's a useful metaphor for
us as web engineers.

31
00:01:40.720 --> 00:01:43.654
We're used to having our client
side code and our server side code.

32
00:01:43.654 --> 00:01:48.735
So the main process is not a server, and
the renderer process is not a client

33
00:01:48.735 --> 00:01:53.270
per se but it's not unhelpful to
think about it like that, right?

34
00:01:53.270 --> 00:01:56.480
And so you have one main
process that can spin up.

35
00:01:56.480 --> 00:01:59.860
Renderer processes are created through
this constructor called browser window,

36
00:01:59.860 --> 00:02:00.790
which we'll see in a little bit.

37
00:02:00.790 --> 00:02:02.649
So the metaphor of server and

38
00:02:02.649 --> 00:02:07.030
client side code holds true
even if it's not actually true.

39
00:02:07.030 --> 00:02:11.010
So we spin up one main process and
then it can create multiple

40
00:02:11.010 --> 00:02:16.630
renderer processes that we kind of create
and those all have user interfaces.

41
00:02:16.630 --> 00:02:18.223
So we can create one and for

42
00:02:18.223 --> 00:02:21.994
most applications like if you
didn't need a user interface,

43
00:02:21.994 --> 00:02:26.141
there are some serious questions
about why you are using Electron.

44
00:02:26.141 --> 00:02:30.852
Right, you could probably just
use a node application right?

45
00:02:30.852 --> 00:02:34.840
I guess you could double click it or
something, but you should think seriously.

46
00:02:34.840 --> 00:02:38.420
So we can assume that you're gonna
make one or more renderer processes.

47
00:02:38.420 --> 00:02:43.015
Right, the applications that we're going
to build today are gonna just be a single

48
00:02:43.015 --> 00:02:43.552
window.

49
00:02:43.552 --> 00:02:44.460
We did this course previously.

50
00:02:44.460 --> 00:02:47.570
We actually had to make
multiple of the same window.

51
00:02:47.570 --> 00:02:53.050
We can do that but it's just kind of a lot
of detail for not a lot of learning gain.

52
00:02:53.050 --> 00:02:56.430
But that's outlined in the book
if you wanna take a look at that.

53
00:02:56.430 --> 00:02:58.680
But we can spin up multiple
renderer processes.

54
00:02:58.680 --> 00:03:02.850
Each one is totally
isolated from each other.

55
00:03:02.850 --> 00:03:06.590
But we'll also learn in this workshop how
to facilitate communication between them.

56
00:03:06.590 --> 00:03:10.640
The main process can send
messages to any renderer process.

57
00:03:10.640 --> 00:03:14.560
Any renderer process can
actually reach back and

58
00:03:14.560 --> 00:03:18.300
utilize functions and
methods from the main process.

59
00:03:18.300 --> 00:03:21.460
And we'll learn all about this kind
of inter-process communication model

60
00:03:21.460 --> 00:03:23.240
as we build Electron applications as well.

61
00:03:26.020 --> 00:03:30.020
Most of the application that we're gonna
use kind of there is no standard like,

62
00:03:30.020 --> 00:03:32.140
this is the layout of
an Electron application.

63
00:03:32.140 --> 00:03:35.510
Cuz it's JavaScript and
there's no rules ever.

64
00:03:35.510 --> 00:03:39.320
We're gonna mostly follow this model
which is when we do an NPM start,

65
00:03:39.320 --> 00:03:41.070
it's gonna run main.js.

66
00:03:41.070 --> 00:03:44.240
That is going to load a new browser
window renderer process that's gonna

67
00:03:44.240 --> 00:03:45.900
have an index.html.

68
00:03:45.900 --> 00:03:50.690
And index.html is what you normally
think about in client side development.

69
00:03:50.690 --> 00:03:54.620
It's got some markup,
it's maybe got a link to a CSS file.

70
00:03:54.620 --> 00:04:00.770
And then it will fire up the JavaScript
for the renderer process, cool.

71
00:04:00.770 --> 00:04:05.280
The other thing that I think is really
kind of useful that I think about with

72
00:04:05.280 --> 00:04:10.340
Electron is it's one of the technologies
that I really like because

73
00:04:10.340 --> 00:04:15.030
you start by going, okay, yeah, I'm gonna
build a markdown text editor, cool.

74
00:04:15.030 --> 00:04:16.750
And then I'll build a clipboard manager.

75
00:04:16.750 --> 00:04:19.750
But then what happens is like one month
from now you're walking down the street

76
00:04:19.750 --> 00:04:21.630
like I could build this thing.

77
00:04:21.630 --> 00:04:24.772
Right, and the other like other
opportunity I think doesn't get like

78
00:04:24.772 --> 00:04:27.370
explored enough like a lot of people think
about like I'm gonna build an application

79
00:04:27.370 --> 00:04:28.930
for Linux and Windows and MacOS.

80
00:04:28.930 --> 00:04:30.250
Like totally do that.

81
00:04:30.250 --> 00:04:34.880
But the other really interesting
opportunity is, hey, I have this command

82
00:04:34.880 --> 00:04:40.680
line app that can't have as wide
of an audience as I wish, right?

83
00:04:40.680 --> 00:04:43.260
And so what I can do is that I
can take my command line app and

84
00:04:43.260 --> 00:04:46.260
I can build a user interface on top of it,
right?

85
00:04:46.260 --> 00:04:50.530
And be able to have a wider audience
use it, which I think is really cool.

