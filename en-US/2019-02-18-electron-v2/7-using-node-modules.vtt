WEBVTT

1
00:00:00.090 --> 00:00:04.213
&gt;&gt; Steve Kinney: So,
now we've got a user interface, but,

2
00:00:04.213 --> 00:00:09.349
here's the thing,
it doesn't do anything just yet.

3
00:00:09.349 --> 00:00:14.420
If you look at the HTML file,
we can see that it's a markup and

4
00:00:14.420 --> 00:00:17.409
there is no JavaScript happening.

5
00:00:17.409 --> 00:00:21.248
I have a renderer.js, and
it actually has some code in it.

6
00:00:21.248 --> 00:00:25.552
And let's actually take a tour of that
code first and then we'll go ahead and

7
00:00:25.552 --> 00:00:26.232
wire it up.

8
00:00:26.232 --> 00:00:28.362
So not a lot exciting happening,

9
00:00:28.362 --> 00:00:32.938
the most exciting is line one, but
I'm going to skip that for a second.

10
00:00:32.938 --> 00:00:37.531
And we'll just talk about the other parts,
which I have gone through

11
00:00:37.531 --> 00:00:41.583
the tedious labor of getting
you a bunch of query selectors.

12
00:00:41.583 --> 00:00:45.839
So, these are effectively all of the
different DOM elements that you will need

13
00:00:45.839 --> 00:00:48.691
to work with as we build
this application together.

14
00:00:48.691 --> 00:00:49.996
You can thank me later.

15
00:00:52.204 --> 00:00:55.448
&gt;&gt; Steve Kinney: We have this
function called renderMarkdownToHtml,

16
00:00:55.448 --> 00:00:59.263
which basically takes the HTML view,
that's that right side.

17
00:00:59.263 --> 00:01:03.976
And it takes the markdown content
that we pass in and it sets the,

18
00:01:03.976 --> 00:01:08.622
basically marked as a library
that converts markdown to HTML.

19
00:01:08.622 --> 00:01:13.577
We go ahead and we just assign it with
innerHTML in there, and we sanitize it.

20
00:01:13.577 --> 00:01:17.253
This is a desktop application,
if they want to go ahead and

21
00:01:17.253 --> 00:01:19.513
script inject themselves, fine.

22
00:01:19.513 --> 00:01:22.970
But we're being polite and
we're sanitizing the markup first, so

23
00:01:22.970 --> 00:01:25.950
that it doesn't actually do
anything along those lines.

24
00:01:25.950 --> 00:01:27.742
And then we have an event listener,

25
00:01:27.742 --> 00:01:30.803
which is, every time that user
lifts their finger off a key.

26
00:01:30.803 --> 00:01:35.285
We are going to get the value of
the text area that is the markdown,

27
00:01:35.285 --> 00:01:39.214
we will go ahead and
render it into the HTML view, right?

28
00:01:39.214 --> 00:01:43.332
So that's our entire application, right?

29
00:01:43.332 --> 00:01:48.940
Other than line 1, this application
would work in the browser, right?

30
00:01:48.940 --> 00:01:52.721
Like, hey, put some event listeners,
do some stuff,

31
00:01:52.721 --> 00:01:55.786
line 1 is where things become problematic.

32
00:01:55.786 --> 00:01:59.363
Which is,
we are pulling in this library for

33
00:01:59.363 --> 00:02:05.469
rendering markdown using require,
which doesn't exist in the browser.

34
00:02:05.469 --> 00:02:08.208
If you don't believe me, open up Chrome,
open up the dev tools, type require and

35
00:02:08.208 --> 00:02:09.054
see what happens to you.

36
00:02:09.054 --> 00:02:13.358
All right, so if we pasted this code,
it wouldn't work, right?

37
00:02:13.358 --> 00:02:17.904
We'd have to use something like Browserify
to go ahead and bundle our code for us, so

38
00:02:17.904 --> 00:02:18.811
on and so forth.

39
00:02:18.811 --> 00:02:21.309
And then it would work, but
this will actually blow up.

40
00:02:21.309 --> 00:02:27.326
But in Electron, we have access to all of
the browser APIs and all of the Node APIs.

41
00:02:27.326 --> 00:02:31.070
Together, it's not like, I write some
Node code and some browser code,

42
00:02:31.070 --> 00:02:33.928
they are legitimately together,
you have access to both.

43
00:02:33.928 --> 00:02:38.058
So I could theoretically use
require in here, at the same time,

44
00:02:38.058 --> 00:02:42.047
I could throw an alert,
which does not exist in Node, right?

45
00:02:42.047 --> 00:02:45.981
Or a document.eventlistener or
anything along those lines,

46
00:02:45.981 --> 00:02:50.966
all the stuff in Chrome is fair game,
all the stuff in Node is fair game, right?

47
00:02:50.966 --> 00:02:55.993
And so that takes a little bit of time
to wrap your head around, but it's okay.

48
00:02:55.993 --> 00:03:03.017
So we never called this file, and so
let's go ahead and let's fix that, cool.

49
00:03:03.017 --> 00:03:05.767
So let's go into index.html, and

50
00:03:05.767 --> 00:03:10.176
all we're going to do is we're
going to add a script tag.

51
00:03:10.176 --> 00:03:13.006
And you're like,
I know how to add a script tag,

52
00:03:13.006 --> 00:03:15.501
I'll just do a script source render.js.

53
00:03:15.501 --> 00:03:20.878
Turns out we don't even need to do that,
we can just make a script tag,

54
00:03:20.878 --> 00:03:24.171
and we say require./ renderer, right?

55
00:03:24.171 --> 00:03:28.702
Because again, all of Node works
just fine, I can go ahead and

56
00:03:28.702 --> 00:03:32.636
I can read and
write to the Filesystem in my HTML file.

57
00:03:32.636 --> 00:03:36.041
If that strikes you as a good idea,
you're welcome to do it, but

58
00:03:36.041 --> 00:03:37.881
you can pull in anything you want.

59
00:03:37.881 --> 00:03:41.494
Even from your HTML file,
it's all fair game, it all works.

60
00:03:43.168 --> 00:03:48.363
&gt;&gt; Steve Kinney: So if we go ahead now,
we will do an npm start.

61
00:03:54.383 --> 00:03:57.013
&gt;&gt; Steve Kinney: You see that our
application effectively works,

62
00:03:57.013 --> 00:03:59.647
we can type some markdown,
everything's cool.

