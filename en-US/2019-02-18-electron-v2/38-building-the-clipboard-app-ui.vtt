WEBVTT

1
00:00:00.720 --> 00:00:04.680
&gt;&gt; Steve Kinney: Let's start to build
the basics of the user interface here.

2
00:00:04.680 --> 00:00:11.131
So main.js is going to spin up
that index.jade, right here.

3
00:00:11.131 --> 00:00:15.960
Index.jade is going to
require('./renderer'), right?

4
00:00:15.960 --> 00:00:18.520
So we can go ahead and let's actually
just spin up the application.

5
00:00:18.520 --> 00:00:21.328
You'll actually see a bit of
command line fanciness, too.

6
00:00:31.213 --> 00:00:33.541
&gt;&gt; Steve Kinney: You see
the devtools are opened by default.

7
00:00:33.541 --> 00:00:35.799
And we get that console
log in there as well.

8
00:00:37.704 --> 00:00:38.927
&gt;&gt; Steve Kinney: All right, so that's fun.

9
00:00:38.927 --> 00:00:42.139
We're gonna work on the renderer process,
so we can keep this open for a little bit.

10
00:00:43.776 --> 00:00:47.290
&gt;&gt; Steve Kinney: In here we're just
gonna build out the UI real fast.

11
00:00:47.290 --> 00:00:53.125
We'll say import React From 'react'.

12
00:00:53.125 --> 00:00:57.214
Import, let's just get the render
method from react-dom.

13
00:01:03.697 --> 00:01:05.915
&gt;&gt; Steve Kinney: And we're gonna
create an application component.

14
00:01:12.157 --> 00:01:16.590
&gt;&gt; Steve Kinney: All right, and
that's gonna render the basics of our UI.

15
00:01:16.590 --> 00:01:22.280
Again, if you are familiar
with React you might be like,

16
00:01:22.280 --> 00:01:25.180
why doesn't he break out stuff
into a bunch of components?

17
00:01:25.180 --> 00:01:27.650
This is not a course on React.

18
00:01:27.650 --> 00:01:32.453
This is an accessible enough for
someone who's never seen React before,

19
00:01:32.453 --> 00:01:35.555
but proving that we have
translation in place.

20
00:01:38.168 --> 00:01:41.209
&gt;&gt; Steve Kinney: So the syntax I'm gonna
write is obviously not valid JavaScript.

21
00:01:41.209 --> 00:01:45.964
You can't just write HTML all willy-nilly,
but it is very much valid JSX,

22
00:01:45.964 --> 00:01:47.317
run through Babble.

23
00:01:50.718 --> 00:01:53.507
&gt;&gt; Steve Kinney: So we give it
a container class, which is CSS,

24
00:01:53.507 --> 00:01:55.945
that means something in the CSS I wrote.

25
00:02:01.250 --> 00:02:03.081
&gt;&gt; Steve Kinney: We'll give it
the control bar on top that we saw.

26
00:02:16.672 --> 00:02:20.509
&gt;&gt; Steve Kinney: Copy from Clipboard,
all right, we're halfway there.

27
00:02:23.296 --> 00:02:27.286
&gt;&gt; Steve Kinney: Give it a section
with the className of content.

28
00:02:31.452 --> 00:02:34.679
&gt;&gt; Steve Kinney: And a div that we'll
eventually put the clippings in called

29
00:02:42.515 --> 00:02:43.128
&gt;&gt; Steve Kinney: All right,

30
00:02:43.128 --> 00:02:47.570
and then finally, we'll just basically
mount that to the application component.

31
00:02:47.570 --> 00:02:50.340
If we look in the index.jade,

32
00:02:50.340 --> 00:02:54.709
there is this,
&gt;&gt; Steve Kinney: Div with a ID of

33
00:02:54.709 --> 00:02:56.630
application.

34
00:02:56.630 --> 00:02:57.774
So we'll say render.

35
00:03:12.950 --> 00:03:14.055
&gt;&gt; Steve Kinney: All right.

36
00:03:16.406 --> 00:03:19.272
&gt;&gt; Steve Kinney: And if we go ahead and
we refresh the application,

37
00:03:19.272 --> 00:03:22.650
you can see I've got
the basics of the UI in place.

38
00:03:22.650 --> 00:03:25.004
There's no clippings in it yet,

39
00:03:25.004 --> 00:03:30.805
cuz we haven't implemented that
functionality, but effectively it's there,

40
00:03:30.805 --> 00:03:36.297
we can go ahead and
&gt;&gt; Steve Kinney: See input is we

41
00:03:36.297 --> 00:03:40.225
have source maps, so we actually see it as
we wrote it, not as the compiled version.

42
00:03:41.335 --> 00:03:45.369
All JSX is, is instead of
calling react.createClass, and

43
00:03:45.369 --> 00:03:48.702
react.element, we write
what looks like HTML.

44
00:03:48.702 --> 00:03:56.055
Babble turns it under the hood into just
React.create class, React.element, right?

45
00:03:56.055 --> 00:03:59.805
If there are other fancy-pants brand new
future JavaScript things that you wanna

46
00:03:59.805 --> 00:04:03.020
use with Babble, this is also great,
even if you don't write React.

47
00:04:03.020 --> 00:04:04.945
You're like, yeah cool, but
I want the spread operator.

48
00:04:04.945 --> 00:04:06.914
Neat, use Electron compile.

49
00:04:06.914 --> 00:04:09.630
All right fine, I actually don't care
about React, I wanna do TypeScript.

50
00:04:09.630 --> 00:04:12.350
Okay, right,
this will all work just the same way.

51
00:04:12.350 --> 00:04:17.596
This just seemed to be kind of
a easy way to get that in place.

52
00:04:17.596 --> 00:04:22.392
The other thing we wanna do is
just have that clipping component.

53
00:04:22.392 --> 00:04:23.853
So, we're gonna have many clippings, so

54
00:04:23.853 --> 00:04:25.565
we'll just make that it
its own thing real quick.

55
00:04:29.257 --> 00:04:31.759
&gt;&gt; Steve Kinney: And the only thing
a clipping really needs is the content of

56
00:04:31.759 --> 00:04:32.430
the clipping.

57
00:04:35.215 --> 00:04:36.606
&gt;&gt; Steve Kinney: And, we'll just return

58
00:04:45.280 --> 00:04:46.352
&gt;&gt; Steve Kinney: Clippings-list-item,

59
00:04:51.534 --> 00:04:52.935
&gt;&gt; Steve Kinney: With the div className

60
00:05:11.570 --> 00:05:12.083
&gt;&gt; Steve Kinney: I'll put the

61
00:05:12.083 --> 00:05:12.833
content in there.

62
00:05:16.853 --> 00:05:19.196
&gt;&gt; Steve Kinney: Cool, and
we'll just give it some quick controls for

63
00:05:19.196 --> 00:05:20.716
copying it back to the clipboard.

64
00:05:36.348 --> 00:05:39.493
&gt;&gt; Steve Kinney: That rarr is not me
being angry, that's just a right arrow.

65
00:05:47.182 --> 00:05:48.270
&gt;&gt; Steve Kinney: Cool.

66
00:05:50.022 --> 00:05:52.281
&gt;&gt; Steve Kinney: Now we won't see anything
in there because we don't have any

67
00:05:52.281 --> 00:05:54.598
clippings, but just to make a point,
we could go ahead and say

68
00:06:20.049 --> 00:06:21.170
&gt;&gt; Steve Kinney: And let's see what we

69
00:06:21.170 --> 00:06:23.354
got, it's very angry with us right now.

70
00:06:23.354 --> 00:06:27.335
&gt;&gt; Speaker 2: Gotta close the div,
try closing div.

71
00:06:27.335 --> 00:06:27.899
&gt;&gt; Steve Kinney: Yeah.

72
00:06:27.899 --> 00:06:31.858
[CROSSTALK] Yep, thank you,
that's why you live code with friends.

73
00:06:35.114 --> 00:06:37.160
&gt;&gt; Steve Kinney: All right,
there they are.

74
00:06:37.160 --> 00:06:42.117
My CSS is a little off, so
let's just take a look, clipping-text.

75
00:06:44.984 --> 00:06:46.320
&gt;&gt; Steve Kinney: All right,
so we've got a UI.

76
00:06:47.470 --> 00:06:51.170
Doesn't do anything yet but
we have the basics of a UI in place.

77
00:06:51.170 --> 00:06:53.140
All transfiled,
we didn't set up any web pack,

78
00:06:53.140 --> 00:06:57.980
we didn't fuss with any of that kind of
stuff, so all kinda good to go and ready.

79
00:06:57.980 --> 00:06:59.310
The other thing we're gonna do is,

80
00:06:59.310 --> 00:07:03.060
we do wanna keep track of some amount
of clippings in application state.

81
00:07:03.060 --> 00:07:04.544
So let's just wire that up real fast.

82
00:07:43.242 --> 00:07:46.940
&gt;&gt; Steve Kinney: Clipping.content, and
we're actually gonna give it a key so

83
00:07:46.940 --> 00:07:52.885
we can keep track of
&gt;&gt; Steve Kinney: Cool,

84
00:07:52.885 --> 00:07:59.880
and we'll no longer see anything in the UI
anymore, cuz we went to that empty array.

85
00:07:59.880 --> 00:08:02.662
So it's iterating through
an empty array and doing that,

86
00:08:02.662 --> 00:08:05.008
we can put just a thing in
there to start out with.

87
00:08:17.582 --> 00:08:19.710
&gt;&gt; Steve Kinney: Whoop, unexpected token.

88
00:08:45.157 --> 00:08:46.740
&gt;&gt; Steve Kinney: Let's see
if that solves it for us.

89
00:08:47.910 --> 00:08:49.280
&gt;&gt; Speaker 2: You gotta call it super.

90
00:08:49.280 --> 00:08:50.190
&gt;&gt; Steve Kinney: What's that?

91
00:08:50.190 --> 00:08:51.140
&gt;&gt; Speaker 2: You gotta call it super.

92
00:08:52.610 --> 00:08:53.890
&gt;&gt; Steve Kinney: Have to is a strong word.

93
00:08:58.949 --> 00:09:01.940
&gt;&gt; Steve Kinney: All right, cool.

94
00:09:01.940 --> 00:09:04.940
So, now we've got the UI back in
place with some application state.

95
00:09:04.940 --> 00:09:08.720
The next thing we want to do is,
to go ahead and

96
00:09:08.720 --> 00:09:11.550
figure out a way to add
a new clipping in there.

97
00:09:11.550 --> 00:09:14.284
So, we need to give ourselves
a quick function for that, as well.

98
00:09:26.109 --> 00:09:29.149
&gt;&gt; Steve Kinney: AddClippings, so we'll
get whatever the current clippings are.

99
00:09:36.428 --> 00:09:39.053
&gt;&gt; Steve Kinney: And we'll say,
okay, we set the state,

100
00:09:39.053 --> 00:09:44.922
the clipping are gonna be,
&gt;&gt; Steve Kinney: All of the previous

101
00:09:44.922 --> 00:09:50.495
clippings, but first, we'll for
right now, add a string.

102
00:10:01.089 --> 00:10:03.921
&gt;&gt; Steve Kinney: My translation settings
are a little bit off, so give me a second

103
00:10:18.490 --> 00:10:20.449
&gt;&gt; Speaker 2: Does wow there perhaps wanna

104
00:10:20.449 --> 00:10:24.047
be a part of an object that
has both content and an id?

105
00:10:24.047 --> 00:10:24.664
&gt;&gt; Steve Kinney: It does.

106
00:10:34.082 --> 00:10:34.963
&gt;&gt; Steve Kinney: We'll cheat,

107
00:10:34.963 --> 00:10:38.157
Date.now seems like a good
way to handle this, right?

108
00:10:43.122 --> 00:10:44.286
&gt;&gt; Steve Kinney: And
now we're wired up, so

109
00:10:44.286 --> 00:10:50.548
that when I hit that button
&gt;&gt; Steve Kinney: OnClick

110
00:10:50.548 --> 00:10:54.460
will be [this.addClipping].

111
00:11:01.030 --> 00:11:02.340
&gt;&gt; Steve Kinney: Cool.

