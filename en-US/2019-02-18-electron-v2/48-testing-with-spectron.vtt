WEBVTT

1
00:00:00.000 --> 00:00:02.355
&gt;&gt; Steve Kinney: Let's talk about
everyone's favorite subject, testing,

2
00:00:02.355 --> 00:00:02.860
[LAUGH] yeah!

3
00:00:05.590 --> 00:00:08.898
So testing, you might imagine that, okay,

4
00:00:08.898 --> 00:00:13.961
I want to spin up a version of my
application and run tests against it.

5
00:00:13.961 --> 00:00:18.025
That would probably be hard, right?

6
00:00:18.025 --> 00:00:21.507
Turns out that there is libraries
officially supported by

7
00:00:21.507 --> 00:00:25.216
the Electron team for doing this,
and it is called Spectron.

8
00:00:25.216 --> 00:00:28.469
And Spectron is built on top of Webdriver.

9
00:00:28.469 --> 00:00:33.000
WebDriver is Node.js bindings for
Selenium.

10
00:00:33.000 --> 00:00:36.340
And so one way that you can think about
Spectron is all the way under the hood,

11
00:00:36.340 --> 00:00:38.300
there is Selenium.

12
00:00:38.300 --> 00:00:41.796
Above that, you have the Node.js
bindings in Webdriver.

13
00:00:41.796 --> 00:00:45.461
And then Spectron adds a bunch
of Electron-specific stuff.

14
00:00:45.461 --> 00:00:49.870
Because Webdriver, which is meant
mostly for go visit a webpage and

15
00:00:49.870 --> 00:00:51.194
poke at it, right?

16
00:00:51.194 --> 00:00:56.360
Is not necessarily super set up for
spinning up an application,

17
00:00:56.360 --> 00:01:00.005
and figuring out all
that other kinda stuff.

18
00:01:00.005 --> 00:01:05.273
So Spectron adds one more layer
on top of that that makes

19
00:01:05.273 --> 00:01:10.083
it easier to point Webdriver,
and by extension,

20
00:01:10.083 --> 00:01:14.449
Selenium tests at your actual application.

21
00:01:15.510 --> 00:01:20.510
And so with Spectron, we can basically
call new Application() which

22
00:01:20.510 --> 00:01:26.026
will basically create a bespoke version
of that app that we can kind of poke at.

23
00:01:26.026 --> 00:01:28.384
And there are a few methods on there,
right?

24
00:01:28.384 --> 00:01:32.623
So your application instance
that you create has a client,

25
00:01:32.623 --> 00:01:37.964
which is Webdriver, which is the thing
kinda poking at the application and

26
00:01:37.964 --> 00:01:40.187
putting it through its paces.

27
00:01:40.187 --> 00:01:45.056
A property called Electron,
which is the renderer process API, right?

28
00:01:45.056 --> 00:01:48.982
So anything when you do a require
Electron to render a process,

29
00:01:48.982 --> 00:01:51.062
you have available on Electron.

30
00:01:51.062 --> 00:01:54.860
And then browserWindow is
the currently focused browser window.

31
00:01:54.860 --> 00:01:55.974
So if you need to do anything or

32
00:01:55.974 --> 00:01:58.749
manipulate anything about the currently
active window, it can do that.

33
00:01:58.749 --> 00:02:03.716
Cuz again, Selenium, which is used to
visiting one page doesn't have this idea

34
00:02:03.716 --> 00:02:08.918
that you can have multiple windows open
and all sorts of Electron-specific stuff.

35
00:02:08.918 --> 00:02:10.952
webContents, we saw that with Ascend.

36
00:02:10.952 --> 00:02:14.195
You can look at the webContents
API in the docs, but

37
00:02:14.195 --> 00:02:19.186
it's basically just a way to get to all
of that as well for that browser window.

38
00:02:19.186 --> 00:02:24.027
mainProcess, which is the process object,
so when you did process.platform and

39
00:02:24.027 --> 00:02:28.132
stuff like that in the main process,
it is that node object.

40
00:02:28.132 --> 00:02:33.915
And rendererProcess, which is the process
object in the renderer, right?

41
00:02:33.915 --> 00:02:38.762
So basically, a bunch of different hooks
into some of the different processes

42
00:02:38.762 --> 00:02:43.096
that you wouldn't have if you were
just firing up a headless Chrome and

43
00:02:43.096 --> 00:02:44.799
pointing it at something.

44
00:02:44.799 --> 00:02:47.701
So that app.client,
that's the Webdriver, so

45
00:02:47.701 --> 00:02:50.540
it also has a few extra
things put onto it.

46
00:02:50.540 --> 00:02:53.120
Which is you can get the main
process logs, right?

47
00:02:53.120 --> 00:02:54.650
I think it logs with the console.

48
00:02:54.650 --> 00:02:57.206
You can get the renderer process logs.

49
00:02:57.206 --> 00:03:01.347
You can get the currently selected text,
window count.

50
00:03:01.347 --> 00:03:04.979
And again, this is stuff that
not normally exists in there.

51
00:03:04.979 --> 00:03:09.168
You can get wait until test exists, wait
until the window is loaded, which window,

52
00:03:09.168 --> 00:03:11.356
as well as all the rest
of the Webdriver API.

53
00:03:11.356 --> 00:03:15.111
So these are just things that Spectron
adds to the existing Webdriver API,

54
00:03:15.111 --> 00:03:18.521
which is again, an obstruction
around the existing Selenium API.

55
00:03:18.521 --> 00:03:24.045
This is just stuff for your Spectron app,
or your Electron app using Spectron.

56
00:03:25.310 --> 00:03:30.140
So that's all well and good, but
I think it makes a lot more sense if

57
00:03:30.140 --> 00:03:35.090
we actually write some tests
to see this in action.

