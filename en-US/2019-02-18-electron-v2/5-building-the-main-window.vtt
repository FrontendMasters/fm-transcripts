WEBVTT

1
00:00:00.210 --> 00:00:03.440
&gt;&gt; Steve Kinney: We've got this console
log, we don't really need that anymore.

2
00:00:03.440 --> 00:00:05.355
So we've gotten rid of
that console log and now,

3
00:00:05.355 --> 00:00:07.000
we need to figure out how to use Electron.

4
00:00:07.000 --> 00:00:11.460
If you looked in our package JSON there
was a module called Electron, right,

5
00:00:11.460 --> 00:00:14.880
I'm sure you're using all
start up the application.

6
00:00:14.880 --> 00:00:17.120
But it actually has everything
that we need in it.

7
00:00:17.120 --> 00:00:22.025
So we do something along the lines of
const electron equals require electron.

8
00:00:22.025 --> 00:00:24.841
And if we look at the electron object,

9
00:00:24.841 --> 00:00:29.770
we can see there's a whole bunch
of kind of sub-modules on there.

10
00:00:29.770 --> 00:00:34.293
They kind of give you a sense of some of
the things that you can do with electron.

11
00:00:34.293 --> 00:00:38.712
So a browser view on the previous slide
allows us create render a process,

12
00:00:38.712 --> 00:00:41.790
we have the ability to create menus and
menu items.

13
00:00:41.790 --> 00:00:45.922
I have a 2013 MacBook Pro in front of me,
but for those of you with fancy new

14
00:00:45.922 --> 00:00:50.390
MacBooks, there's obviously a bunch of
APIs for interacting with the TouchBar.

15
00:00:52.090 --> 00:00:56.170
The system tray we saw before we're gonna
put clip master up in the menu bar or

16
00:00:56.170 --> 00:00:57.320
system tray so.

17
00:00:57.320 --> 00:00:59.624
Up in the menu bar, if you're on a Mac,
down in the system tray,

18
00:00:59.624 --> 00:01:00.492
if you're on Windows.

19
00:01:00.492 --> 00:01:04.203
It's the same module either way, which
kind of falls into that write the code

20
00:01:04.203 --> 00:01:06.502
once, have something
that works everywhere.

21
00:01:06.502 --> 00:01:11.353
And that is always like, there's seven
asterisks after that which is code

22
00:01:11.353 --> 00:01:15.980
defensively, and things are weird,
but generally speaking, true.

23
00:01:15.980 --> 00:01:18.206
We're building a clipboard manager,

24
00:01:18.206 --> 00:01:23.060
so the fact that there's a clipboard
module here is not super surprising.

25
00:01:23.060 --> 00:01:26.245
AutoUpdater, crashReporter which we're
gonna play around with a little bit.

26
00:01:26.245 --> 00:01:30.273
Dialogue which allows us to create
native system dialogues for

27
00:01:30.273 --> 00:01:33.620
selecting a file or
stuff along those lines as well.

28
00:01:34.710 --> 00:01:36.247
In app purchases,
if that's your kind of thing for

29
00:01:36.247 --> 00:01:37.442
when you're ready to make some money.

30
00:01:37.442 --> 00:01:43.000
PowerSaveBlocker a bunch of very
interesting things that we can use.

31
00:01:43.000 --> 00:01:46.708
Now, those are all on the electron object,
I'm very lazy, and

32
00:01:46.708 --> 00:01:50.499
I'm not typing electron that many
times over the next few hours.

33
00:01:50.499 --> 00:01:53.239
So the other thing that
we can do is as we need

34
00:01:53.239 --> 00:01:57.832
stuff,
&gt;&gt; Steve Kinney: We can pull

35
00:01:57.832 --> 00:01:59.360
in just what we need.

36
00:01:59.360 --> 00:02:01.943
So this is the ES6 distructuring syntax,

37
00:02:01.943 --> 00:02:05.320
which is fun to say out
loud multiple times.

38
00:02:05.320 --> 00:02:08.750
And it allows us to just pull on
certain properties off of an object.

39
00:02:08.750 --> 00:02:12.550
So this is the same thing as type,
now, I'll just have app available and

40
00:02:12.550 --> 00:02:16.260
we'll have, that'll be the same
as if I had typed Electron.App.

41
00:02:16.260 --> 00:02:20.200
And the important thing to know
is there are different modules

42
00:02:20.200 --> 00:02:23.890
available between the main process,
and the renderer process.

43
00:02:23.890 --> 00:02:27.170
With the main process, it is,
there is one main process.

44
00:02:27.170 --> 00:02:30.780
So anything where concurrency could
be a problem like reading and

45
00:02:30.780 --> 00:02:33.220
writing to the file system,
so on and so forth.

46
00:02:33.220 --> 00:02:34.636
You could do that in the renderer process.

47
00:02:34.636 --> 00:02:38.780
But two renderer processes are writing
to the file system at the same time,

48
00:02:38.780 --> 00:02:40.500
that can be somewhat problematic.

49
00:02:40.500 --> 00:02:44.400
So most of the kind of like core, hey,

50
00:02:44.400 --> 00:02:47.339
this should happen in one place
is available to the main process.

51
00:02:48.450 --> 00:02:51.950
That said, you can always have a renderer
process talk to the main process.

52
00:02:51.950 --> 00:02:55.107
We'll kind of see that as things go along,
so

53
00:02:55.107 --> 00:03:01.190
desktop applications take a little bit of
time to start up, it's not instantaneous.

54
00:03:01.190 --> 00:03:04.966
So when you need some life cycle
events and the events are,

55
00:03:04.966 --> 00:03:09.900
if you're familiar with jQuery or
the DOM Like, we have event listeners for

56
00:03:09.900 --> 00:03:13.810
click events or mouse over events,
so on and so forth.

57
00:03:13.810 --> 00:03:15.910
In Node land, we have event emitter, and

58
00:03:15.910 --> 00:03:18.790
the kind of event pattern is
pretty common there as well.

59
00:03:18.790 --> 00:03:22.692
So we're actually gonna use that to
figure out when the application is ready.

60
00:03:22.692 --> 00:03:26.660
All right, because we can't show a browser
window until the application is ready.

61
00:03:26.660 --> 00:03:30.321
There is a lot of things we can not do,
until the application is ready for

62
00:03:30.321 --> 00:03:31.950
us to do those things.

63
00:03:31.950 --> 00:03:34.730
So how do know when
the application is ready?

64
00:03:34.730 --> 00:03:38.502
We just add an event listener, so

65
00:03:38.502 --> 00:03:44.870
we say appon('ready'),
&gt;&gt; Steve Kinney: And

66
00:03:44.870 --> 00:03:50.034
we'll go ahead and
just console.log('The application

67
00:03:50.034 --> 00:03:54.266
is ready.'), and
then after that just to make

68
00:03:54.266 --> 00:04:01.139
a point,
&gt;&gt; Steve Kinney: To

69
00:04:01.139 --> 00:04:04.889
prove to you that the application does
take a few seconds to start up or

70
00:04:04.889 --> 00:04:08.750
seconds is a strong word,
let's go with milliseconds to start up.

71
00:04:08.750 --> 00:04:09.636
Really depends on your computer, right?

72
00:04:09.636 --> 00:04:14.283
[LAUGH] But we'll go ahead and
we'll say that the ready event gets fired

73
00:04:14.283 --> 00:04:18.860
after this console.log,
after we evaluate the file.

74
00:04:18.860 --> 00:04:22.530
&gt;&gt; Steve Kinney: All right, so
starting up, the application's ready.

75
00:04:22.530 --> 00:04:27.125
Pretty soon there after, right, again,
I'm on a five year old Macbook Pro, so

76
00:04:27.125 --> 00:04:32.250
it might be almost instantaneous for
you because see the the order of events.

77
00:04:32.250 --> 00:04:34.950
So a lot of the kind of starting
up an application has to happen in

78
00:04:34.950 --> 00:04:35.720
this ready event.

79
00:04:35.720 --> 00:04:39.760
That will be where we create any of the
kind of browser window renderer processes

80
00:04:39.760 --> 00:04:40.640
that we need.

81
00:04:40.640 --> 00:04:43.990
If we need to set the application menu,
so on and so forth,

82
00:04:43.990 --> 00:04:46.980
that'll happen once the application
is started up and ready.

83
00:04:46.980 --> 00:04:50.040
So a lot of our kind of initial
code will live in here.

