WEBVTT

1
00:00:00.016 --> 00:00:05.526
&gt;&gt; Steve Kinney: All right, so this is in
a repo called clipmaster-spectron-fem-v2.

2
00:00:05.526 --> 00:00:09.782
And we're gonna pull just Node's
built-in assertion library,

3
00:00:09.782 --> 00:00:13.356
that path module, for
helping us out with a few things.

4
00:00:13.356 --> 00:00:17.536
That application constructor that I showed
you before is attached to Spectron.

5
00:00:17.536 --> 00:00:20.324
And when we use require('electron'),

6
00:00:20.324 --> 00:00:24.477
it's mostly to get the path of
our instance of Electron, right?

7
00:00:24.477 --> 00:00:28.793
This is going to be in Node
modules installed there.

8
00:00:28.793 --> 00:00:29.885
And so theoretically,

9
00:00:29.885 --> 00:00:33.604
if you wanted to test against the built
production version of your application?

10
00:00:33.604 --> 00:00:37.383
You could hard-code in a path to that
Electron instance, we're not doing that,

11
00:00:37.383 --> 00:00:38.824
we're testing development.

12
00:00:38.824 --> 00:00:42.840
And so we're gonna create an application
that is going to use a new

13
00:00:42.840 --> 00:00:44.603
Application constructor.

14
00:00:44.603 --> 00:00:48.297
We're gonna point to where
it can find Electron.

15
00:00:48.297 --> 00:00:53.055
And the arguments are actually gonna be,
we're in a test directory, so

16
00:00:53.055 --> 00:00:55.871
we just want to go up a directory,
as well.

17
00:00:55.871 --> 00:01:02.074
So before every test,
we're gonna start up the application.

18
00:01:02.074 --> 00:01:06.951
After every test,
we are going to stop the application, so

19
00:01:06.951 --> 00:01:11.254
we'll get a fresh app in
between every single test.

20
00:01:11.254 --> 00:01:16.879
I also turned up Mocha's timeout,
because starting up an application and

21
00:01:16.879 --> 00:01:21.714
tearing it down is not as fast
as comparing two strings, right?

22
00:01:21.714 --> 00:01:26.356
So I bought us a little more time with
that, and we have this very first test,

23
00:01:26.356 --> 00:01:29.860
which is basically,
does any of this even work, right?

24
00:01:29.860 --> 00:01:33.443
You'll be like, yeah, assert.ok(true),
that makes total sense, but

25
00:01:33.443 --> 00:01:36.267
that still involves spinning up
the app and tearing it down.

26
00:01:36.267 --> 00:01:38.527
So let's go ahead and
take that first spin,

27
00:01:38.527 --> 00:01:42.695
with npm test
&gt;&gt; Steve Kinney: And

28
00:01:42.695 --> 00:01:45.465
you could briefly see the application,
there

29
00:01:45.465 --> 00:01:49.878
wasn't a lot to do in the application,
but you saw it up here for a second.

30
00:01:49.878 --> 00:01:54.463
We asserted that true was in fact true,
and then we tore down the application,

31
00:01:54.463 --> 00:01:55.160
all right?

32
00:01:55.160 --> 00:01:58.059
We have bunch of skipped tests,
in this case, so

33
00:01:58.059 --> 00:02:01.121
I'm gonna kind of begin to
implement some of them.

34
00:02:01.121 --> 00:02:06.533
And we could get a good feel for
the API of WebDriver,

35
00:02:06.533 --> 00:02:09.732
and Spectron, by extension.

36
00:02:09.732 --> 00:02:16.180
So I don't really need this test anymore,
so we have, shows an initial window.

37
00:02:16.180 --> 00:02:20.883
Now we saw that, but again, this is,
we've got our training wheels on here,

38
00:02:20.883 --> 00:02:22.181
we're practicing.

39
00:02:22.181 --> 00:02:24.774
So one of the things we can do is, we
wanna figure how many windows there are.

40
00:02:24.774 --> 00:02:28.624
Now, we saw there was
a getWindowCount(1) in that slide, so

41
00:02:28.624 --> 00:02:31.133
we could say something like const count.

42
00:02:31.133 --> 00:02:36.061
Now, this is an async function, mostly,
everything in Spectron is promise-based.

43
00:02:36.061 --> 00:02:39.211
So you could .then, .then, .then,
and we'll do a little bit of that,

44
00:02:39.211 --> 00:02:40.162
where it makes sense.

45
00:02:40.162 --> 00:02:44.199
But we're gonna use a little
bit of the async await syntax,

46
00:02:44.199 --> 00:02:49.633
which will get count, and we say,
await app.client.getWindowCount().

47
00:02:49.633 --> 00:02:54.181
So this'll wait for that
getWindowCount promise to resolve, and

48
00:02:54.181 --> 00:02:56.626
assign that to the variable count.

49
00:02:56.626 --> 00:03:01.370
Now, when we implemented
Clipmaster before,

50
00:03:01.370 --> 00:03:06.001
we knew that it
was,effectively one window.

51
00:03:06.001 --> 00:03:10.226
So, we know when the application starts
out, that count should be 1, and

52
00:03:10.226 --> 00:03:11.981
we wanna assert.equal().

53
00:03:19.379 --> 00:03:21.610
&gt;&gt; Steve Kinney: All right, cool,
assert that, when this starts up,

54
00:03:21.610 --> 00:03:22.396
we got one window.

55
00:03:22.396 --> 00:03:26.510
So await, if we don't have await,
then the function will just end, so

56
00:03:26.510 --> 00:03:28.371
we'll wait for that to happen.

57
00:03:28.371 --> 00:03:31.971
And then in Mocha, the way it knows
that your test is actually over,

58
00:03:31.971 --> 00:03:35.521
cuz we're doing asynchronous stuff,
is we return that promise.

59
00:03:35.521 --> 00:03:38.125
And when the whole promise resolves,
we know the test is done.

60
00:03:38.125 --> 00:03:41.524
So take that, and we'll un-skip that test,
let's give it a shot.

61
00:03:47.015 --> 00:03:49.407
&gt;&gt; Steve Kinney: Cool,
shows an initial window, so

62
00:03:49.407 --> 00:03:54.532
when it started the application,
it counted one window, the test passed.

63
00:03:54.532 --> 00:03:58.121
All right,
does that window have the correct title?

64
00:04:00.310 --> 00:04:05.499
&gt;&gt; Steve Kinney: So
we can say const title = await app.client,

65
00:04:05.499 --> 00:04:10.182
wait until the window's loaded, right?

66
00:04:10.182 --> 00:04:12.528
Cuz we need that HTML
page to totally load,

67
00:04:12.528 --> 00:04:15.598
cuz it gets the title from
the title element in the HTML.

68
00:04:15.598 --> 00:04:20.301
So we'll say waitUntilWindowLoaded(), and

69
00:04:20.301 --> 00:04:23.403
then we'll say getTitle().

70
00:04:23.403 --> 00:04:28.897
And then we'll assert,
return assert.equal,

71
00:04:28.897 --> 00:04:34.650
the title is, in this case,
Clipmaster 9000,

72
00:04:34.650 --> 00:04:39.379
cuz I was feeling saucy
when I make the app.

73
00:04:39.379 --> 00:04:47.343
That test is still skipped,
&gt;&gt; Steve Kinney: Run an npm test,

74
00:04:47.343 --> 00:04:54.826
fire up the app once, fire up the app
twice, it has the correct title, right?

75
00:04:54.826 --> 00:04:58.833
So we're beginning to make assertions
about, even the window title,

76
00:04:58.833 --> 00:05:02.522
and stuff along those lines,
all right, what's our next test?

77
00:05:02.522 --> 00:05:07.075
Assert that we did not ship it
with the developer tools open,

78
00:05:07.075 --> 00:05:11.554
seems like a good test to run
before we build it, all right?

79
00:05:11.554 --> 00:05:18.037
I'm gonna say,
const devToolsAreOpen = await app.client,

80
00:05:18.037 --> 00:05:24.048
I'll give myself a little room here,
I've got a big font.

81
00:05:24.048 --> 00:05:31.134
Wait until the window is loaded,
get the browser window,

82
00:05:31.134 --> 00:05:36.194
that one browser window that we had open,

83
00:05:36.194 --> 00:05:40.834
and call the isDevToolsOpened().

84
00:05:44.448 --> 00:05:48.870
&gt;&gt; Steve Kinney: Cool, and
then we will return assert,

85
00:05:48.870 --> 00:05:52.357
I'll go with assert.equal.

86
00:06:00.671 --> 00:06:05.543
&gt;&gt; Steve Kinney: It should run three tests
this time, we'll show that other window,

87
00:06:05.543 --> 00:06:09.421
see it again, if you skip the tests,
they don't run.

88
00:06:09.421 --> 00:06:15.353
Someone needs to be on Steve,
you forgot to unskip the test duty.

89
00:06:15.353 --> 00:06:18.348
One, two, three,

90
00:06:18.348 --> 00:06:23.641
the dev tools are not open, right?

91
00:06:23.641 --> 00:06:27.425
So now, when we got the browser window
itself, you can actually call this,

92
00:06:27.425 --> 00:06:29.745
this is a method on
browser window instances.

93
00:06:29.745 --> 00:06:33.283
So we can actually directly reach
into some of the Electron APIs, and

94
00:06:33.283 --> 00:06:34.450
call that ourselves.

