WEBVTT

1
00:00:00.040 --> 00:00:02.650
&gt;&gt; Steve Kinney: Has a button with
the text copied from clipboard.

2
00:00:02.650 --> 00:00:04.290
All right, this is an interesting one.

3
00:00:04.290 --> 00:00:07.670
Now this is more like what we think about
a traditional selenium test, right?

4
00:00:07.670 --> 00:00:10.790
Like go ahead and
start like querying the dom, and

5
00:00:10.790 --> 00:00:13.230
see if elements that I expect
to be there are there.

6
00:00:14.370 --> 00:00:16.660
It's cool, so let's unskip this one first.

7
00:00:19.990 --> 00:00:27.231
All right, so we'll say cons buttonText,
I'll say, await app,

8
00:00:27.231 --> 00:00:32.480
let's give myself space there, app.client.

9
00:00:32.480 --> 00:00:39.348
So there is a getText method
that will take a selector.

10
00:00:42.412 --> 00:00:45.475
&gt;&gt; Steve Kinney: This
one's copy-from-clipboad,

11
00:00:45.475 --> 00:00:48.350
it should be the idea of that there.

12
00:00:48.350 --> 00:00:50.147
And we can say, return.

13
00:00:52.060 --> 00:00:57.943
&gt;&gt; Steve Kinney: Assert.equal
&gt;&gt; Steve Kinney: ButtonText.

14
00:01:00.023 --> 00:01:04.104
&gt;&gt; Steve Kinney: Copy from Clipboard.

15
00:01:04.104 --> 00:01:04.904
Let's take it for a spin.

16
00:01:11.789 --> 00:01:12.563
&gt;&gt; Steve Kinney: Two.

17
00:01:17.362 --> 00:01:19.570
&gt;&gt; Steve Kinney: Does not have
the text Copy from Clipboard.

18
00:01:19.570 --> 00:01:20.655
Interesting.

19
00:01:31.566 --> 00:01:39.001
&gt;&gt; Steve Kinney: Kind of curious,
&gt;&gt; Steve Kinney: Copy

20
00:01:39.001 --> 00:01:41.315
from Clipboard is the button ID.

21
00:01:45.944 --> 00:01:48.173
&gt;&gt; Steve Kinney: GetSelectedText,
auto complete error.

22
00:01:54.613 --> 00:01:55.507
&gt;&gt; Steve Kinney: Nope.

23
00:01:57.421 --> 00:02:06.597
&gt;&gt; Steve Kinney: Do an npm test there
&gt;&gt; Steve Kinney: We

24
00:02:06.597 --> 00:02:09.070
did get to see what a test
failure was at least.

25
00:02:09.070 --> 00:02:12.300
All right, cool, the test passed, awesome.

26
00:02:12.300 --> 00:02:13.930
All right,
let's see what our next test is.

27
00:02:15.280 --> 00:02:19.290
Should not have any clippings
when the application starts up.

28
00:02:20.370 --> 00:02:22.430
Interesting, so that makes senses, right?

29
00:02:23.910 --> 00:02:28.160
Basically, we can go ahead and
query, effectively a dom query for

30
00:02:28.160 --> 00:02:32.570
get me all of the clippings and make sure
that that's got a length of zero, right?

31
00:02:32.570 --> 00:02:36.060
And then ideally, we'll copy one from
the clipboard, so on and so forth, and

32
00:02:36.060 --> 00:02:37.240
see that change.

33
00:02:37.240 --> 00:02:38.180
That makes sense.

34
00:02:38.180 --> 00:02:41.180
Let's do that, all right.

35
00:02:41.180 --> 00:02:45.490
I'll just say await and it'll wait for

36
00:02:45.490 --> 00:02:48.120
a promise to resolve even if I
don't necessarily need it yet.

37
00:02:48.120 --> 00:02:54.420
So I'll say await
app.client.waitUntilWindowLoaded();.

38
00:02:54.420 --> 00:02:56.709
Listen, let's wait until
everything's loaded,

39
00:02:56.709 --> 00:02:59.215
because there won't be anything
on the page until then.

40
00:02:59.215 --> 00:03:05.939
And then we'll say const clippings
&gt;&gt; Steve Kinney: =

41
00:03:08.112 --> 00:03:08.901
&gt;&gt; Steve Kinney: App.client,

42
00:03:08.901 --> 00:03:12.781
now there isn't a, like getText was
a helper method, which will go ahead,

43
00:03:12.781 --> 00:03:15.930
query the dom for that node and
get me the text of that node.

44
00:03:15.930 --> 00:03:18.660
But this case I want to like,
go get a collection of nodes,

45
00:03:18.660 --> 00:03:20.750
effectively a document.querySelectorAll.

46
00:03:20.750 --> 00:03:22.950
And I want to go ahead and
count how many there are.

47
00:03:22.950 --> 00:03:26.321
So this might remind you
a little bit of jQuery.

48
00:03:26.321 --> 00:03:31.091
It's to get all of them,
we do $$ to get one, it's $.

49
00:03:31.091 --> 00:03:37.546
And we can say,
&gt;&gt; Steve Kinney: Which

50
00:03:37.546 --> 00:03:40.860
is what it was named in this
version of the application.

51
00:03:40.860 --> 00:03:43.790
So go ahead and
query the dom for all of them.

52
00:03:43.790 --> 00:03:49.634
And then return,
&gt;&gt; Steve Kinney: Assert.equal.

53
00:03:53.494 --> 00:03:56.032
&gt;&gt; Steve Kinney: Clippings.length
is equal to 0.

54
00:03:58.600 --> 00:04:01.805
&gt;&gt; Steve Kinney: And
let's not skip that test, yep, thank you.

55
00:04:03.400 --> 00:04:04.684
&gt;&gt; Steve Kinney: Cool, we'll run it.

56
00:04:12.670 --> 00:04:15.260
&gt;&gt; Steve Kinney: We don't have
to develop the tools open.

57
00:04:15.260 --> 00:04:16.380
We've got the right buttons.

58
00:04:17.420 --> 00:04:20.930
But no clippings when the application
starts up, all right.

59
00:04:20.930 --> 00:04:25.290
Our next one is, it should have one
clipping when the copy from clipboard

60
00:04:25.290 --> 00:04:29.280
button has been pressed that
makes total sense, right?

61
00:04:29.280 --> 00:04:30.080
Yeah?

62
00:04:30.080 --> 00:04:34.700
&gt;&gt; Speaker 2: So is solineum or something
here hooked in to sequel light to make

63
00:04:34.700 --> 00:04:37.210
sure we're always starting with a fresh
&gt;&gt; Steve Kinney: This one is just

64
00:04:37.210 --> 00:04:39.320
a regular down version of it.

65
00:04:39.320 --> 00:04:42.430
So you might wanna use a test database and
have transactions in there and

66
00:04:42.430 --> 00:04:44.060
stuff along those lines, right?

67
00:04:44.060 --> 00:04:47.070
Or have a version where you just bypass
the database in testing because you can

68
00:04:47.070 --> 00:04:49.640
use a process that node, right?

69
00:04:49.640 --> 00:04:52.590
And have a different code pass,
something along those lines, right?

70
00:04:52.590 --> 00:04:55.889
Same way, like in a web app you
might have a testing database.

71
00:04:55.889 --> 00:04:58.928
But yeah, totally makes sense.

72
00:04:58.928 --> 00:05:01.210
This is just basically taking the dom for
a spin.

73
00:05:02.390 --> 00:05:04.990
So it's like the earlier version
before we did the native modules.

74
00:05:08.800 --> 00:05:12.286
So it should have one clipping
when the clipboard is pressed.

75
00:05:12.286 --> 00:05:15.240
Any of that you would do kind of either
at the beginning of the test file or

76
00:05:15.240 --> 00:05:16.973
you can do that before each or after each.

77
00:05:16.973 --> 00:05:21.194
You can kinda prepare the database as it
would need to be, roll it back, so on and

78
00:05:21.194 --> 00:05:21.770
so forth.

79
00:05:23.330 --> 00:05:26.170
In fact, one thing I should
probably do after each test is

80
00:05:26.170 --> 00:05:28.090
I should set the clipboard and clear,

81
00:05:28.090 --> 00:05:32.600
I should store what previously was in the
clipboard in a variable and replace it.

82
00:05:32.600 --> 00:05:33.880
Like right now, when we start copying and

83
00:05:33.880 --> 00:05:35.810
pasting, that's gonna change
my system clipboard right now.

84
00:05:35.810 --> 00:05:40.199
All right, so you can do that stuff in the
before H and after H of set everything up,

85
00:05:40.199 --> 00:05:42.634
clean up after yourself,
so on and so forth.

86
00:05:44.753 --> 00:05:45.266
&gt;&gt; Steve Kinney: Cool,

87
00:05:45.266 --> 00:05:50.661
you should have a clipping when the copy
from clipboard button is pressed.

88
00:05:50.661 --> 00:05:54.101
All right, so
this is gonna be very similar.

89
00:05:54.101 --> 00:05:56.870
What I'm gonna do is I'm
gonna copy most of this test.

90
00:05:58.860 --> 00:05:59.680
We'll wait for it.

91
00:05:59.680 --> 00:06:06.792
And what we'll do first is we'll say,
await app.client.click,

92
00:06:06.792 --> 00:06:13.720
and that will actually getText
that'll take a selector.

93
00:06:13.720 --> 00:06:21.670
And so
we'll say copy-from-clipboard right,

94
00:06:21.670 --> 00:06:23.890
that was the one that we
got the text from earlier.

95
00:06:23.890 --> 00:06:25.760
Here we'll actually just click it.

96
00:06:25.760 --> 00:06:28.796
Then we'll go ahead,
query the dom and count them,

97
00:06:28.796 --> 00:06:30.941
and now we're expecting it to be 1.

98
00:06:34.202 --> 00:06:36.237
&gt;&gt; Steve Kinney: All right,
let's take it for a spin.

99
00:06:42.972 --> 00:06:46.309
&gt;&gt; Steve Kinney: I'm not super worried
about those times cuz we're building

100
00:06:46.309 --> 00:06:47.430
an application up.

101
00:06:49.670 --> 00:06:51.615
All right,

102
00:07:00.510 --> 00:07:02.032
&gt;&gt; Steve Kinney: Let's go ahead and

103
00:07:02.032 --> 00:07:04.323
take that for one more spin.

104
00:07:16.101 --> 00:07:19.220
&gt;&gt; Steve Kinney: All right,
now we need to remove a clipping.

105
00:07:19.220 --> 00:07:21.300
We gotta make sure
the right text is in there.

106
00:07:21.300 --> 00:07:24.850
And then we have to make sure the actual
write to text actually works correctly.

107
00:07:26.180 --> 00:07:30.066
Cool, so we're moving to clipping,
this should be somewhat similar.

108
00:07:38.982 --> 00:07:41.573
&gt;&gt; Steve Kinney: So
we'll successfully move the clipping,

109
00:07:41.573 --> 00:07:46.790
in this case
&gt;&gt; Steve Kinney: We need to go ahead and

110
00:07:46.790 --> 00:07:49.130
put a clip in there and
then we need to remove it.

111
00:07:49.130 --> 00:07:50.797
Now you might abstract some of that out.

112
00:07:56.552 --> 00:07:58.065
&gt;&gt; Steve Kinney: Wait until window loaded.

113
00:08:01.143 --> 00:08:05.377
&gt;&gt; Steve Kinney: Cool.

114
00:08:10.482 --> 00:08:12.050
&gt;&gt; Steve Kinney: We'll go ahead and
we'll click,

115
00:08:18.418 --> 00:08:20.127
&gt;&gt; Steve Kinney: Copy-from-clipboard and

116
00:08:20.127 --> 00:08:23.762
then we'll, now you remember
we had to hover over that one.

117
00:08:23.762 --> 00:08:28.478
So this case we can kind of move
our cursor over to the actual

118
00:08:28.478 --> 00:08:30.030
list item itself.

119
00:08:30.030 --> 00:08:32.768
So clippings-list-item.

120
00:08:32.768 --> 00:08:34.979
Click

121
00:08:34.979 --> 00:08:43.420
remove-clipping.

122
00:08:43.420 --> 00:08:45.300
All right, so then how many do we expect?

123
00:08:45.300 --> 00:08:47.850
We're back to really expecting 0,
so we can just grab this.

124
00:08:48.950 --> 00:08:53.917
We added one, then we moved to it and
we removed it.

125
00:08:57.758 --> 00:08:59.520
&gt;&gt; Steve Kinney: We can go ahead and
take it for a spin.

126
00:09:17.514 --> 00:09:22.260
&gt;&gt; Steve Kinney: Cool,
you see that deprecation warning there.

127
00:09:22.260 --> 00:09:26.140
So moveTo is deprecated, but
there's also no replacement for it yet.

128
00:09:26.140 --> 00:09:30.650
[LAUGH] So that's a thing,
there's an open issue on the,

129
00:09:30.650 --> 00:09:35.070
that's a web driver deprecation warning,
not a selenium one and

130
00:09:35.070 --> 00:09:38.320
the issue is still currently open, and
there is not actually a replacement.

131
00:09:38.320 --> 00:09:40.590
And so
there is this big discussion of like,

132
00:09:40.590 --> 00:09:44.495
why don't you remove the deprecation
warning if there's not a replacement yet?

133
00:09:44.495 --> 00:09:48.865
Again, we can actually,
if that really bothers you,

134
00:09:48.865 --> 00:09:52.855
we can actually go up to,
I tend not to do this, but

135
00:09:52.855 --> 00:09:57.894
if we're gonna look at this this
many times in the near future.

136
00:10:06.582 --> 00:10:07.320
&gt;&gt; Steve Kinney: Turn that off.

137
00:10:08.470 --> 00:10:11.460
The easiest way to deal with
problems is to make them go away.

138
00:10:13.650 --> 00:10:16.130
All right,
should have the correct text in there.

139
00:10:16.130 --> 00:10:21.540
So what we should do in this case is we
should set the text using electron's APIs.

140
00:10:21.540 --> 00:10:26.630
Then go ahead hit copy-from-clipboard and
make sure that the text that we

141
00:10:26.630 --> 00:10:31.990
set onto the clipboard is in fact
the text that ended up on the screen.

142
00:10:33.200 --> 00:10:34.016
All right, so let's try that out.

143
00:10:41.090 --> 00:10:44.013
&gt;&gt; Steve Kinney: We'll wait until
the window loaded, just as we did before.

144
00:10:50.007 --> 00:10:52.107
&gt;&gt; Steve Kinney: And we'll go ahead and
we'll write some text to the clipboard.

145
00:10:57.791 --> 00:11:02.257
&gt;&gt; Steve Kinney: Cool, now we'll take the
copy from clipboard that we did before,

146
00:11:02.257 --> 00:11:03.067
grab that.

147
00:11:06.859 --> 00:11:08.425
&gt;&gt; Steve Kinney: And let's go ahead and

148
00:11:08.425 --> 00:11:11.732
let's figure out what's
in that dom element.

149
00:11:11.732 --> 00:11:14.926
So we saw that get text earlier,
we can do that again.

150
00:11:14.926 --> 00:11:21.105
ClippingText equals await
app.client.getText,

151
00:11:21.105 --> 00:11:29.212
in this case, we're gonna grab
the very first .clipping-text'.

152
00:11:47.882 --> 00:11:51.895
&gt;&gt; Steve Kinney: Cool,
let's give it a shot,

153
00:11:51.895 --> 00:11:58.007
I didn't forget to skip it, that's great.

154
00:12:11.144 --> 00:12:13.102
&gt;&gt; Steve Kinney: No.

155
00:12:16.501 --> 00:12:17.352
&gt;&gt; Steve Kinney: Yeah, that matters.

156
00:12:20.222 --> 00:12:23.130
&gt;&gt; Steve Kinney: You gotta put
the same thing in both places.

157
00:12:23.130 --> 00:12:26.525
I'm gonna work under the impression
that that will solve that one.

158
00:12:26.525 --> 00:12:29.475
And if it doesn't, we'll round back to it
rather than run through all of them again.

159
00:12:29.475 --> 00:12:31.725
All right,
this one's a little trickier now.

160
00:12:31.725 --> 00:12:34.335
Should write the text of
the clipping to the clipboard.

161
00:12:34.335 --> 00:12:37.235
So there's probably a bunch of ways
you can think about doing this.

162
00:12:37.235 --> 00:12:39.315
Here's what I'm gonna do,
is I'm gonna wait for it to load,

163
00:12:39.315 --> 00:12:42.935
I'm gonna write some text in there,
right, I'm going to add it.

164
00:12:42.935 --> 00:12:44.965
I'm going to then put something
totally different on the clipboard.

165
00:12:44.965 --> 00:12:47.015
I'm gonna click copy from clipboard and

166
00:12:47.015 --> 00:12:50.340
hope that the original text is
back on there again, right?

167
00:12:50.340 --> 00:12:53.540
So ideally, we have something in
the clipboard, we make the clipping.

168
00:12:53.540 --> 00:12:57.830
We put something else in the clipboard,
we hit the copy to clipboard or

169
00:12:57.830 --> 00:12:59.770
the write text to clipboard button, and

170
00:12:59.770 --> 00:13:02.520
then we should have that
original text back on there.

171
00:13:02.520 --> 00:13:09.080
All right, so let's go ahead and we can
grab really these first few right here.

172
00:13:10.200 --> 00:13:11.482
All right, and
you can break it to a function.

173
00:13:11.482 --> 00:13:13.994
I actually like my test to
be super specific and so

174
00:13:13.994 --> 00:13:17.976
I don't have to like go find out what
this function does personally, but

175
00:13:17.976 --> 00:13:19.590
we're all different people.

176
00:13:19.590 --> 00:13:26.815
And then lets go ahead and
let put something,

177
00:13:26.815 --> 00:13:31.959
something totally different.

178
00:13:31.959 --> 00:13:36.240
Cool, and then we're gonna do await

179
00:13:36.240 --> 00:13:41.213
app.client.click at copy-clipping,

180
00:13:41.213 --> 00:13:45.217
the clipping button that we made,

181
00:13:45.217 --> 00:13:52.552
which will write it back to
the clipboard and we'll grab this.

182
00:13:56.583 --> 00:13:58.799
&gt;&gt; Steve Kinney: And hopefully those
last two test should now pass.

183
00:14:06.228 --> 00:14:08.535
&gt;&gt; Steve Kinney: So we can see we
can get pretty powerful here, right?

184
00:14:08.535 --> 00:14:10.175
We can, like, take the application out,

185
00:14:10.175 --> 00:14:13.155
we can kick the tires on it in
a lot of different ways, right?

186
00:14:13.155 --> 00:14:15.055
Would I get this granular for everything?

187
00:14:15.055 --> 00:14:16.325
Maybe not.
Maybe that's where some unit

188
00:14:16.325 --> 00:14:17.215
tests come in.

189
00:14:17.215 --> 00:14:20.597
But I think it demonstrates
the idea that like spinning.

190
00:14:20.597 --> 00:14:24.597
Getting this set up,
especially cuz it's not super easy for

191
00:14:24.597 --> 00:14:25.997
a web application either, right?

192
00:14:25.997 --> 00:14:29.397
Getting this set up is
pretty straightforward.

193
00:14:29.397 --> 00:14:34.353
And yeah, this is a simple application,
but we did write a pretty good

194
00:14:34.353 --> 00:14:39.061
test coverage for this application
relatively quickly, right?

195
00:14:39.061 --> 00:14:42.727
And so, what we'll do next is we'll
transition into our next thing which is

196
00:14:42.727 --> 00:14:44.807
what happens if you still mess up, right?

197
00:14:44.807 --> 00:14:48.148
And shift something out there like
how do you collect crash reports?

