WEBVTT

1
00:00:00.130 --> 00:00:02.580
&gt;&gt; Steve Kinney: So what are we going
to build, is the next question.

2
00:00:02.580 --> 00:00:06.590
We're gonna build two applications
in a few different forms.

3
00:00:06.590 --> 00:00:11.043
We're going to build a little mini
text editor which renders mark down.

4
00:00:11.043 --> 00:00:15.921
And you can kind of see the scope of
it from those buttons along the top.

5
00:00:15.921 --> 00:00:18.450
We'll be able to open, read,
and write from the file system.

6
00:00:18.450 --> 00:00:20.200
You can't do that in the browser.

7
00:00:20.200 --> 00:00:21.490
Or we'll write to the file system,

8
00:00:21.490 --> 00:00:24.690
that would be a terrible idea in
the browser, so on and so forth.

9
00:00:24.690 --> 00:00:28.610
We'll be able to trigger okay, open this
into whatever the default application is.

10
00:00:28.610 --> 00:00:31.630
And for you, that might be a very
different text editor than it is for

11
00:00:31.630 --> 00:00:32.420
me, but

12
00:00:32.420 --> 00:00:35.776
luckily your operating system knows what
you want to open up markdown files in.

13
00:00:35.776 --> 00:00:38.790
And so it'll basically just ask the OS,

14
00:00:38.790 --> 00:00:42.780
hey I want to open this in
whatever text editor you use.

15
00:00:42.780 --> 00:00:45.759
I'm probably the last Text Mate
user on the planet so

16
00:00:45.759 --> 00:00:47.934
it'll open in that on my file system.

17
00:00:47.934 --> 00:00:49.270
But you can also show
the file in your file system.

18
00:00:49.270 --> 00:00:52.590
A bunch of stuff that you
could not do in the browser.

19
00:00:52.590 --> 00:00:55.270
We're also gonna build this
application called Clip Master,

20
00:00:55.270 --> 00:00:57.350
which is gonna be a little
clipboard manager.

21
00:00:57.350 --> 00:01:00.320
So you can read and
write to the system clipboard.

22
00:01:00.320 --> 00:01:04.100
We'll actually be able to persist it
using a SQLite database that'll live

23
00:01:04.100 --> 00:01:06.470
on the file system that
we'll talk to directly.

24
00:01:06.470 --> 00:01:07.750
So that'll be a native module.

25
00:01:07.750 --> 00:01:11.890
And this'll also be done in just,
effectively,

26
00:01:11.890 --> 00:01:16.000
baby's first React app as well,
just to show how we can transpile SAS, and

27
00:01:16.000 --> 00:01:18.706
typescript, and
Babel in our Electron apps.

28
00:01:18.706 --> 00:01:21.720
And this is what I was talking about
earlier, we'll have a build process and

29
00:01:21.720 --> 00:01:23.610
you'll barely even notice.

30
00:01:23.610 --> 00:01:25.990
This will be application
that will do that.

31
00:01:25.990 --> 00:01:29.570
And then just for
kicks we'll take this application and

32
00:01:29.570 --> 00:01:33.210
we'll make it a menu bar application
that lives either in the system tray

33
00:01:33.210 --> 00:01:38.010
on Windows or Linux, or
up in the menu bar on Mac OS.

34
00:01:38.010 --> 00:01:41.020
So then you would have this clipboard
manager not have it be a full app that you

35
00:01:41.020 --> 00:01:42.480
have to command tab to.

36
00:01:42.480 --> 00:01:45.940
This also will support global shortcuts,
so you'll be able to hit just a keystroke

37
00:01:45.940 --> 00:01:48.890
on your computer from anywhere and
it will write to the clipboard manager.

38
00:01:48.890 --> 00:01:50.160
If you wanna take
the most recent thing and

39
00:01:50.160 --> 00:01:53.744
put it back on the clipboard,
we'll add a keystroke for that as well.

40
00:01:53.744 --> 00:01:56.310
So that'll just be, you can be
anywhere in your operating system,

41
00:01:56.310 --> 00:01:59.080
hit this keystroke and
interact with this application.

42
00:01:59.080 --> 00:02:02.750
It'll use native notifications,
so on and so forth.

43
00:02:04.110 --> 00:02:07.630
We'll also cover writing
integration tests.

44
00:02:07.630 --> 00:02:13.080
How can we fire up our application,
have Selenium go poke at it,

45
00:02:13.080 --> 00:02:16.490
press a bunch of buttons,
and see what's going on?

46
00:02:16.490 --> 00:02:18.998
We'll learn to then, at first,
when we're developing the application,

47
00:02:18.998 --> 00:02:20.830
we're gonna spin it up
from the command line.

48
00:02:20.830 --> 00:02:25.360
And that's neat, but eventually
we're gonna wanna give to humans.

49
00:02:25.360 --> 00:02:29.220
And to say, hey, mom, I made this really
great app, just open the command line and

50
00:02:29.220 --> 00:02:31.060
make sure you have Node installed.

51
00:02:31.060 --> 00:02:32.670
Cool.
[LAUGH]

52
00:02:32.670 --> 00:02:34.260
That's not a great user experience.

53
00:02:34.260 --> 00:02:38.070
So we'll talk a little bit about packaging
the application for distribution.

54
00:02:38.070 --> 00:02:42.692
We won't get into stuff like code
signing cuz that involves money and

55
00:02:42.692 --> 00:02:46.040
very operating system-specific things.

56
00:02:46.040 --> 00:02:49.082
So we'll have to kind of just
talk about that briefly,

57
00:02:49.082 --> 00:02:50.820
we won't go all the way into that.

58
00:02:50.820 --> 00:02:56.190
And then I think the scariest part
about distributing an application is

59
00:02:56.190 --> 00:02:59.280
once you install that
application I hope it works.

60
00:02:59.280 --> 00:03:01.240
And if it doesn't, we wanna know.

61
00:03:01.240 --> 00:03:04.670
So there are built in ways
of getting crash reports.

62
00:03:04.670 --> 00:03:06.650
So will look into how to tap into that.

63
00:03:06.650 --> 00:03:09.830
So once your application goes out
on the world you can be confident

64
00:03:09.830 --> 00:03:13.590
that it's doing the thing it's supposed
to do and not just falling over.

65
00:03:13.590 --> 00:03:17.457
Cuz it'd be better if you knew that the
application was crashing before you just

66
00:03:17.457 --> 00:03:20.182
find really,
really angry people who are telling you.

67
00:03:20.182 --> 00:03:22.406
One way or another,
crash reports are gonna get back to you.

68
00:03:22.406 --> 00:03:25.392
But ideally, if you can patch it first,
that's better.

69
00:03:25.392 --> 00:03:29.357
And then we'll write our own
custom way of tracking uncaught

70
00:03:29.357 --> 00:03:31.386
javascript exceptions as well

