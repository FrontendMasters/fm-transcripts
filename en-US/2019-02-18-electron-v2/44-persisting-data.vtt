WEBVTT

1
00:00:00.070 --> 00:00:01.910
&gt;&gt; Steve Kinney: If we
didn't have electron forge,

2
00:00:01.910 --> 00:00:07.490
we would need to install
electron rebuild and

3
00:00:07.490 --> 00:00:10.530
put it in the post install step like
we saw, but we do have it in place.

4
00:00:10.530 --> 00:00:14.851
So here we're gonna just do a npm install,
I probably already have in place for

5
00:00:14.851 --> 00:00:16.301
this one but just in case.

6
00:00:21.611 --> 00:00:23.830
&gt;&gt; Steve Kinney: SQLite again
is a compiled dependency.

7
00:00:27.632 --> 00:00:29.466
&gt;&gt; Steve Kinney: We'll go
ahead as that is loading,

8
00:00:29.466 --> 00:00:31.880
I'm gonna start writing some code.

9
00:00:31.880 --> 00:00:35.670
So I'm gonna make a new file hidden here
called database.js which is just going to

10
00:00:35.670 --> 00:00:39.350
be the abstraction for that so
I have to think about it anymore.

11
00:00:39.350 --> 00:00:41.100
And as I mentioned earlier,

12
00:00:41.100 --> 00:00:45.240
this is mostly to show that we can use
native databases in our application.

13
00:00:45.240 --> 00:00:49.310
You might be like clippings really
that involves a SQL database.

14
00:00:49.310 --> 00:00:54.670
Okay, I get it, but
we're making a point here cool.

15
00:00:54.670 --> 00:00:59.670
So in this case we gonna be using
this in the lender process so

16
00:00:59.670 --> 00:01:05.460
we gonna need to talk a little bit to the
main process with remote as well, mostly

17
00:01:05.460 --> 00:01:09.640
cuz we wanna get those app, remember
app.get path used for desktop earlier.

18
00:01:09.640 --> 00:01:12.730
We gonna want that for
the users data directory,

19
00:01:12.730 --> 00:01:17.470
right this is where given applications
can store stuff for a given user.

20
00:01:17.470 --> 00:01:19.600
So you can keep settings and
stuff along those lines.

21
00:01:19.600 --> 00:01:21.720
We don't wanna put it like in a desktop.

22
00:01:21.720 --> 00:01:24.000
We don't wanna put a SQL database there or
documents.

23
00:01:24.000 --> 00:01:26.620
We wanna put it in the place
that we're supposed to put it.

24
00:01:26.620 --> 00:01:29.570
Even though we're using this code
mostly from the render process.

25
00:01:29.570 --> 00:01:31.830
So we're gonna need to use
remote module slightly.

26
00:01:32.910 --> 00:01:38.710
So let's go ahead in here, and
we'll say, import path from path.

27
00:01:38.710 --> 00:01:43.363
This is the Node library and

28
00:01:43.363 --> 00:01:50.260
we'll do import remote from electron.

29
00:01:50.260 --> 00:01:51.836
And then we'll just import.

30
00:01:55.352 --> 00:01:57.320
&gt;&gt; Steve Kinney: Knex from knex.

31
00:01:58.350 --> 00:02:04.510
Knex is basically Node binding for
SQL and SQLite and Postgres.

32
00:02:04.510 --> 00:02:07.380
And so rather than writing strings of SQL,

33
00:02:07.380 --> 00:02:12.250
you get a premise based JavaScript API,
that will do that all for you.

34
00:02:14.000 --> 00:02:19.322
And then we'll do import SQLite3.

35
00:02:19.322 --> 00:02:21.850
All right, very cool.

36
00:02:23.330 --> 00:02:30.905
We'll get that app from the remote module
just so we can get that directory.

37
00:02:33.505 --> 00:02:35.230
&gt;&gt; Steve Kinney: And
we'll configure a database.

38
00:02:37.284 --> 00:02:42.024
&gt;&gt; Steve Kinney: We are going to do this
kind of a little fast and loose, right?

39
00:02:42.024 --> 00:02:44.943
We're not gonna write a whole set
of migrations and stuff like that,

40
00:02:44.943 --> 00:02:48.262
which means the very first time we use
this, it'll get very angry with us, but

41
00:02:48.262 --> 00:02:48.830
it's okay.

42
00:02:50.550 --> 00:02:53.050
All right, so we'll say that
the client that we wanna use for

43
00:02:53.050 --> 00:02:58.470
knex because knex will work with MariaDB,
MySQL, Postgres, and SQLite.

44
00:02:58.470 --> 00:03:04.330
So we're saying hey,
I'm gonna be using this with SQLite3.

45
00:03:04.330 --> 00:03:09.320
And with SQLite, SQLite just
uses a file not necessarily like

46
00:03:09.320 --> 00:03:11.840
a database server that
you'd connect to directly.

47
00:03:11.840 --> 00:03:17.361
So we'll say the connection
filename path.join,

48
00:03:17.361 --> 00:03:20.002
I'll do app.getpath.

49
00:03:20.002 --> 00:03:25.500
User data, I'll get ourself
our own directory in there.

50
00:03:25.500 --> 00:03:30.604
Our own file name will say
clipmaster-clippings.sqlite.

51
00:03:32.260 --> 00:03:35.540
So path.join basically
is useful rather like

52
00:03:35.540 --> 00:03:38.430
I put too many clashes because
it tried to concatenate strings.

53
00:03:38.430 --> 00:03:41.070
It's just basically a way to
put together a full path.

54
00:03:41.070 --> 00:03:43.680
So we're gonna get
the applications user data,

55
00:03:43.680 --> 00:03:46.516
and then we're gonna
make a SQLite database.

56
00:03:46.516 --> 00:03:51.794
No semicolon,
called clipmaster.clippings.sqlite.

57
00:03:54.141 --> 00:03:57.003
&gt;&gt; Steve Kinney: And
one other setting that we need for

58
00:03:57.003 --> 00:04:00.430
SQLite is use null as default, it's true.

59
00:04:03.430 --> 00:04:04.800
All right, so we've got a database.

60
00:04:04.800 --> 00:04:07.985
The only other thing we
need is to make a table.

61
00:04:07.985 --> 00:04:11.050
So we're gonna see if the table exists.

62
00:04:11.050 --> 00:04:12.810
If it doesn't we'll go ahead and

63
00:04:12.810 --> 00:04:17.760
make it, this means technically like
depending on how you run your code.

64
00:04:17.760 --> 00:04:20.682
It might blow up the first time and
we're refreshing,

65
00:04:20.682 --> 00:04:22.976
the table will exist because it's async.

66
00:04:22.976 --> 00:04:23.960
But we'll be okay with it.

67
00:04:26.060 --> 00:04:33.370
So we do a database schema,
has table, clippings.

68
00:04:33.370 --> 00:04:35.644
So check to see if the database
has a table called clippings.

69
00:04:37.563 --> 00:04:39.500
&gt;&gt; Steve Kinney: And
that we're trying to boolean on whether or

70
00:04:39.500 --> 00:04:41.370
not that table exists.

71
00:04:41.370 --> 00:04:43.930
Cuz everything is effectively
promise-based in knex.

72
00:04:43.930 --> 00:04:45.460
So we'll say, okay.

73
00:04:45.460 --> 00:04:50.796
If it doesn't exist,
we'll go ahead and make one.

74
00:04:56.724 --> 00:05:00.676
&gt;&gt; Steve Kinney: Go ahead and
create a table called clippings.

75
00:05:03.962 --> 00:05:07.387
&gt;&gt; Steve Kinney: And that'll give
us back the table where we're gonna

76
00:05:07.387 --> 00:05:09.069
have to make our columns.

77
00:05:12.810 --> 00:05:14.680
&gt;&gt; Steve Kinney: I got in
different engineering cuz I like

78
00:05:14.680 --> 00:05:15.780
database migrations.

79
00:05:17.540 --> 00:05:22.530
We'll give it that ID column
that we had in our react model.

80
00:05:22.530 --> 00:05:26.067
It will be the primary,
they'll increment every time.

81
00:05:26.067 --> 00:05:29.010
And we'll create a text
field called content, right?

82
00:05:29.010 --> 00:05:33.481
Very simple SQL table,
&gt;&gt; Steve Kinney: And

83
00:05:33.481 --> 00:05:36.410
then we'll export default
our new database.

84
00:05:37.570 --> 00:05:39.620
So this will create a SQLite database,

85
00:05:39.620 --> 00:05:44.070
which is a file based database, in
the user's application settings directory.

86
00:05:44.070 --> 00:05:48.700
So that's percent sign app
data percent sign on Windows.

87
00:05:48.700 --> 00:05:53.390
That is the hidden library directory
in their user directory on macOS.

88
00:05:53.390 --> 00:05:54.613
Somewhere on Linux.

89
00:05:56.999 --> 00:05:59.326
&gt;&gt; Steve Kinney: And
it will put that database there, and

90
00:05:59.326 --> 00:06:02.480
then we'll have access to
it once it's been created.

91
00:06:04.153 --> 00:06:07.081
&gt;&gt; Steve Kinney: So now we can go ahead
and we can pull that in in our renderer

92
00:06:07.081 --> 00:06:10.020
process, which is, yeah,
from the renderer process.

93
00:06:10.020 --> 00:06:14.180
From the same place we were writing react
code, we can directly write SQL queries.

94
00:06:14.180 --> 00:06:15.700
That seems safe and good, right?

95
00:06:15.700 --> 00:06:17.700
Saves what we're used to.

96
00:06:17.700 --> 00:06:19.770
Like who doesn't do that in
their normal web applications?

97
00:06:20.890 --> 00:06:21.613
All of us.

98
00:06:25.332 --> 00:06:28.007
&gt;&gt; Steve Kinney: Database from,

99
00:06:30.477 --> 00:06:34.590
&gt;&gt; Steve Kinney: ./database.

100
00:06:34.590 --> 00:06:36.980
All right, so

101
00:06:36.980 --> 00:06:42.470
things that we could is we're basically
gonna need to do some crowd actions here.

102
00:06:42.470 --> 00:06:46.530
We're going to want to get everything out
of the database so we can put in the UI.

103
00:06:46.530 --> 00:06:49.740
We are going to want to
add stuff to the database.

104
00:06:49.740 --> 00:06:55.900
And then theoretically, we might want to
at least delete stuff from the database.

105
00:06:55.900 --> 00:06:59.210
And possibly even update
stuff on the database, right?

106
00:06:59.210 --> 00:07:00.310
Maybe not, right?

107
00:07:00.310 --> 00:07:04.138
But we're doing it, so whatever.

108
00:07:04.138 --> 00:07:08.300
And so the first thing we
might choose to do is have

109
00:07:08.300 --> 00:07:13.285
the ability to fetch all of
the clippings in the database.

110
00:07:16.264 --> 00:07:20.462
&gt;&gt; Steve Kinney: So we could say something
along the lines of fetchClippings.

111
00:07:24.431 --> 00:07:28.825
&gt;&gt; Steve Kinney: And fetchClippings
will do basically say database,

112
00:07:28.825 --> 00:07:34.096
which table clippings and
if we can just call the select method,

113
00:07:34.096 --> 00:07:39.582
which is select star that will get
everything out of the database.

114
00:07:43.618 --> 00:07:45.082
&gt;&gt; Steve Kinney: And
once we have those clippings,

115
00:07:55.083 --> 00:07:56.450
&gt;&gt; Steve Kinney: We'll just go ahead and,

116
00:07:56.450 --> 00:07:58.129
update the application state,

117
00:07:58.129 --> 00:08:01.873
took everything out of the database,
put it into the component state.

118
00:08:06.783 --> 00:08:08.638
&gt;&gt; Steve Kinney: We'll just
bind that as well up here.

119
00:08:14.921 --> 00:08:17.360
&gt;&gt; Steve Kinney: We can do that
when the component mounts.

120
00:08:17.360 --> 00:08:20.720
Which point we'll see that the wall
will vanish because we'll replace

121
00:08:20.720 --> 00:08:22.000
it within the database.

122
00:08:22.000 --> 00:08:23.920
And what's in the database?

123
00:08:23.920 --> 00:08:26.574
Nothing [LAUGH] so
it'll be an empty array.

124
00:08:31.149 --> 00:08:34.504
&gt;&gt; Steve Kinney: All right, let's kill
it off and start it back up again.

125
00:08:41.206 --> 00:08:44.680
&gt;&gt; Steve Kinney: Preparing native
dependencies, zero out of one.

126
00:08:44.680 --> 00:08:49.230
Anyone want to venture a guess what that
one data dependency is SQLite, right?

127
00:08:49.230 --> 00:08:50.410
So at this point it's like hey,

128
00:08:50.410 --> 00:08:55.070
you have a compile dependency that is
not the right version for Electron.

129
00:08:55.070 --> 00:08:58.060
So what it's gonna do at this point
is it's going to go ahead and

130
00:08:58.060 --> 00:09:02.320
recompile that for the version of
Node that is bundled with Electron.

131
00:09:02.320 --> 00:09:06.570
This is very similar to if we ran
an Electron rebuild after installing it

132
00:09:06.570 --> 00:09:08.040
in the first place.

133
00:09:08.040 --> 00:09:13.860
But it is going ahead and getting that for
us with a really nice UI as well.

134
00:09:13.860 --> 00:09:16.570
I mean nice is a strong word.

135
00:09:16.570 --> 00:09:17.630
That thing entertains me.

136
00:09:17.630 --> 00:09:18.250
Let's put it that way.

137
00:09:18.250 --> 00:09:20.000
How about that.

138
00:09:20.000 --> 00:09:22.450
Then I'll go ahead and load right up.

139
00:09:22.450 --> 00:09:23.450
So let's just give that one second.

140
00:09:24.820 --> 00:09:26.524
Cuz our application will
not start until it's there.

141
00:09:33.195 --> 00:09:37.350
&gt;&gt; Steve Kinney: Okay, this stuff
fetchItems is not a function, all right?

142
00:09:37.350 --> 00:09:40.142
Cuz it's not called fetchItems,
it's called fetchClippings.

143
00:09:42.894 --> 00:09:48.255
&gt;&gt; Steve Kinney: Would have been
great to know before we waited for

144
00:09:48.255 --> 00:09:51.145
the database, but cool.

145
00:09:51.145 --> 00:09:56.450
At this point,
you can see that there's nothing there

146
00:09:56.450 --> 00:10:01.525
which is actually surprisingly
good since that lull

147
00:10:01.525 --> 00:10:07.638
was built in there by default
which means the fact that there's

148
00:10:07.638 --> 00:10:13.426
nothing on the screen means
that it's working [LAUGH] cool.

149
00:10:13.426 --> 00:10:18.370
Sweet so now we wanna be able to
put something into the database, so

150
00:10:18.370 --> 00:10:22.360
we're just gonna modify add
clippings a little bit.

151
00:10:22.360 --> 00:10:29.014
Where we'll say database,
look at that clippings table again.

152
00:10:32.671 --> 00:10:35.030
&gt;&gt; Steve Kinney: And
will insert the content.

153
00:10:35.030 --> 00:10:38.430
We don't have to make our own data
now ID because the database is gonna

154
00:10:38.430 --> 00:10:41.610
automatically increment for one for us.

155
00:10:41.610 --> 00:10:45.106
So we'll insert that in there,
and then we'll just go ahead and

156
00:10:45.106 --> 00:10:46.994
fetch all of the clippings again.

157
00:10:46.994 --> 00:10:49.020
Could we do optimistic updates?

158
00:10:49.020 --> 00:10:53.200
Yeah, totally, but
we're gonna keep this simple.

159
00:10:53.200 --> 00:10:54.886
So we get rid of all of this code here.

160
00:10:58.544 --> 00:10:59.620
&gt;&gt; Steve Kinney: And try it like that.

161
00:10:59.620 --> 00:11:05.200
I'm just gonna give this a quick refresh,
do a copy from clipboard.

162
00:11:06.440 --> 00:11:11.300
Content is not defined, that is true.

163
00:11:13.100 --> 00:11:14.587
I deleted a little bit too much.

164
00:11:18.830 --> 00:11:23.249
&gt;&gt; Steve Kinney: Do clipboard.readText.

165
00:11:23.249 --> 00:11:24.867
&gt;&gt; Speaker 2: Typo.

166
00:11:24.867 --> 00:11:25.375
&gt;&gt; Steve Kinney: Where?

167
00:11:25.375 --> 00:11:29.718
Read text, good catch.

168
00:11:33.493 --> 00:11:38.901
&gt;&gt; Steve Kinney: There it is, that's
the apparently the last thing I copied,

169
00:11:38.901 --> 00:11:40.152
seems right.

170
00:11:40.152 --> 00:11:42.012
What happens if I refresh the page now?

171
00:11:44.923 --> 00:11:46.600
&gt;&gt; Steve Kinney: Boom, still there.

172
00:11:46.600 --> 00:11:48.180
Persisted in the database.

173
00:11:48.180 --> 00:11:51.990
I could make a point and go ahead like
close the app and stuff like that.

174
00:11:51.990 --> 00:11:55.159
I can close the app, delete the app,
reinstall the app but

175
00:11:55.159 --> 00:11:59.364
it will still be there because I didn't
remove the database from my library,

176
00:11:59.364 --> 00:12:02.748
but now we have persistence
like a real application, right.

177
00:12:02.748 --> 00:12:06.343
It's not just like holding stuff in
the dom and hoping for the best,

178
00:12:06.343 --> 00:12:10.633
it is literally stored, this application,
we can survive a restart with it, so

179
00:12:10.633 --> 00:12:11.535
on and so forth.

