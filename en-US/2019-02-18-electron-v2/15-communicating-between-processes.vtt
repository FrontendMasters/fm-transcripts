WEBVTT

1
00:00:00.290 --> 00:00:03.590
&gt;&gt; Steve Kinney: We figured out how to

2
00:00:03.590 --> 00:00:06.960
talk from the renderer process
back to the main process.

3
00:00:06.960 --> 00:00:09.285
That was that remote module, right?

4
00:00:09.285 --> 00:00:13.035
It can call any of the modules
available to the main process.

5
00:00:13.035 --> 00:00:18.320
It can also require files in context
of the main process and run that code.

6
00:00:18.320 --> 00:00:20.113
When it does that, it's basically,

7
00:00:20.113 --> 00:00:23.709
you're not actually calling
getFileFromUser in that renderer.js file.

8
00:00:23.709 --> 00:00:28.160
You're telling main process to do it,
right, and it does it from there.

9
00:00:28.160 --> 00:00:33.160
The main process can send data
out to renderer processes.

10
00:00:33.160 --> 00:00:37.070
In this case, we have one renderer
process, but theoretically,

11
00:00:37.070 --> 00:00:41.040
any given renderer process could talk back
to the main process, and then the main

12
00:00:41.040 --> 00:00:47.350
process could send messages to any
given browser window instance, right?

13
00:00:47.350 --> 00:00:51.840
So for us, this is kind of our flow,
which is, we've got the renderer process,

14
00:00:51.840 --> 00:00:56.700
it uses remote to call getFileFromUser,
and then from there we're gonna send

15
00:00:56.700 --> 00:01:01.190
a message, right, we're gonna use an open
file to actually read it and send it off.

16
00:01:01.190 --> 00:01:04.630
And we'll send that data back
to the renderer process.

17
00:01:04.630 --> 00:01:07.386
Again, not a server, not a client, but

18
00:01:07.386 --> 00:01:11.935
kinda like what we're used to in
sending an AJAX request, right?

19
00:01:11.935 --> 00:01:15.848
You send a request to the server, server
does stuff, sends you the result, right?

20
00:01:15.848 --> 00:01:19.930
That's not what's happening here,
but it's a decent metaphor.

21
00:01:19.930 --> 00:01:21.600
So let's go ahead and
we'll implement that one.

22
00:01:23.010 --> 00:01:25.560
Cuz right now,
logging's a console, not great.

23
00:01:25.560 --> 00:01:27.200
So we'll quit this,

24
00:01:27.200 --> 00:01:32.330
we'll head back over to VS Code,
and we'll go ahead and try it out.

25
00:01:32.330 --> 00:01:39.540
So we now know that console logging
here is not gonna be good enough.

26
00:01:39.540 --> 00:01:45.289
I, personally, wanna separate the idea
of triggering the file dialogue

27
00:01:45.289 --> 00:01:50.402
from opening the file and
sending it to the main process, right?

28
00:01:50.402 --> 00:01:53.580
Which is, with the file dialogue,
let them pick the file,

29
00:01:53.580 --> 00:01:58.090
tell my other function which file, and
let that one handle everything else.

30
00:01:58.090 --> 00:02:04.997
So I'm gonna make a new function called,
&gt;&gt; Steve Kinney: OpenFile.

31
00:02:04.997 --> 00:02:09.680
OpenFile will go ahead and
take a file path.

32
00:02:11.785 --> 00:02:12.833
&gt;&gt; Steve Kinney: Say file.

33
00:02:14.783 --> 00:02:18.235
&gt;&gt; Steve Kinney: And
it's gonna go ahead and do this part,

34
00:02:18.235 --> 00:02:21.103
the reading from the file system.

35
00:02:21.103 --> 00:02:22.594
It can go ahead and do that.

36
00:02:25.271 --> 00:02:28.479
&gt;&gt; Steve Kinney: Right,
and so the console login,

37
00:02:28.479 --> 00:02:34.250
what we'll do is we'll say
openFile with that file.

38
00:02:34.250 --> 00:02:35.565
So, let's review.

39
00:02:35.565 --> 00:02:41.080
GetFileFromUser is going to
do what it says on the tin.

40
00:02:41.080 --> 00:02:45.432
It's gonna ask the user what file they
want, and its gonna get the file name, and

41
00:02:45.432 --> 00:02:48.696
it's gonna pass it to this
other function called openFile,

42
00:02:48.696 --> 00:02:50.950
which is gonna go ahead and read the file.

43
00:02:52.280 --> 00:02:54.230
So once we have the content of the file,

44
00:02:54.230 --> 00:02:58.300
what we're gonna do is we'll take the main
window and we're gonna send it a message.

45
00:02:58.300 --> 00:03:01.830
So mainWindow.webContents, which is
the kind of renderer process there,

46
00:03:01.830 --> 00:03:04.260
and we'll send it a message.

47
00:03:04.260 --> 00:03:08.846
And this will take,
&gt;&gt; Steve Kinney: N plus one number of

48
00:03:08.846 --> 00:03:09.920
arguments, right?

49
00:03:09.920 --> 00:03:13.880
The first one is what channel you wanna
send out, what kind of message, right?

50
00:03:13.880 --> 00:03:15.210
So this is an arbitrary string.

51
00:03:16.420 --> 00:03:19.910
This is basically saying,
what kind of thing just happened?

52
00:03:19.910 --> 00:03:23.240
Because on the renderer process, you're
gonna listen for messages from the main

53
00:03:23.240 --> 00:03:28.930
process, but depending on the message,
you're gonna do different things, right?

54
00:03:28.930 --> 00:03:33.720
What you do on a file opened message
is gonna be radically different

55
00:03:33.720 --> 00:03:36.350
than if it's gonna be on
a save file message, or

56
00:03:36.350 --> 00:03:39.800
on a open new window message,
or whatever, right?

57
00:03:39.800 --> 00:03:42.620
So this is just an arbitrary
string that identifies

58
00:03:42.620 --> 00:03:45.225
what kind of message you're
sending to the renderer process.

59
00:03:45.225 --> 00:03:50.430
So we'll say file-opened, and then you can
give it an arbitrary number of additional

60
00:03:50.430 --> 00:03:54.420
arguments which is just the extra stuff
that you wanna send along with it.

61
00:03:54.420 --> 00:03:58.710
So effectively,
this is the subject line of the email, and

62
00:03:58.710 --> 00:04:01.440
the rest of all the different
attachments that we wanna send.

63
00:04:01.440 --> 00:04:08.370
So we'll send them the name of
the file and the content, right?

64
00:04:08.370 --> 00:04:13.926
So hey, okay, here's
/users/stevekinney/desktop/grocerylist.md,

65
00:04:13.926 --> 00:04:17.530
and here's the contents of that file,
right?

66
00:04:17.530 --> 00:04:19.690
Have them both do what you need to do.

67
00:04:21.280 --> 00:04:24.400
So if you send a message and
no one is listening for

68
00:04:24.400 --> 00:04:28.500
it, does it really matter, right?

69
00:04:28.500 --> 00:04:30.070
Arguably, no.

70
00:04:30.070 --> 00:04:33.157
And so we need to use,
we need to listen for that.

71
00:04:33.157 --> 00:04:36.607
And there are two modules,
right, one is called ipcMain,

72
00:04:36.607 --> 00:04:39.060
the other one is called ipcRenderer.

73
00:04:39.060 --> 00:04:42.903
IPC stands for
Inter Process Communication, right?

74
00:04:42.903 --> 00:04:47.084
And so we are sending a message,
but now we need to listen for

75
00:04:47.084 --> 00:04:49.100
it in the renderer process.

76
00:04:50.270 --> 00:04:54.618
So in renderer in JS, I can go ahead and
say something along the lines of,

77
00:04:54.618 --> 00:04:59.492
let's actually require ipcRenderer,
so say remote, I'll say ipcRenderer.

78
00:05:01.805 --> 00:05:04.163
&gt;&gt; Steve Kinney: We'll
acquire that from Electron.

79
00:05:04.163 --> 00:05:06.350
You can guess which one is
available in the main process and

80
00:05:06.350 --> 00:05:08.189
which one is available
in the renderer process.

81
00:05:09.540 --> 00:05:14.335
IpcMain, main process, ipcRenderer,
renderer process, seem legit.

82
00:05:14.335 --> 00:05:19.570
So we'll say ipcRenderer, and that's an
event listener, or event emitter, right?

83
00:05:19.570 --> 00:05:23.210
Say on, and
then whatever the channel was, right?

84
00:05:23.210 --> 00:05:25.463
What did I make the channel
in my main process?

85
00:05:28.693 --> 00:05:32.720
&gt;&gt; Steve Kinney: I see lips parsing,
it's file-opened, file-opened, right?

86
00:05:32.720 --> 00:05:36.507
So whenever you get a message on the
file-opened channel, this is the function

87
00:05:36.507 --> 00:05:41.550
that I want you to call,
&gt;&gt; Steve Kinney: Right?

88
00:05:41.550 --> 00:05:45.681
And the first argument will
always be the event itself, and

89
00:05:45.681 --> 00:05:50.472
then there'll be an arbitrary number
of arguments that match up with

90
00:05:50.472 --> 00:05:52.760
what we had in the main process.

91
00:05:52.760 --> 00:05:56.680
So here, when we said send, we gave
it a channel as the first argument,

92
00:05:56.680 --> 00:06:01.590
and then we passed it the file name and
the string contents of the file.

93
00:06:01.590 --> 00:06:05.466
So on the listener,
it'll be the event, and

94
00:06:05.466 --> 00:06:12.105
then the argument after that will be
the file, and then the content, right?

95
00:06:13.475 --> 00:06:16.520
&gt;&gt; Steve Kinney: Cool, so
now I have all of these.

96
00:06:16.520 --> 00:06:22.088
I can even go ahead, and let's just start
off by console logging the file and

97
00:06:22.088 --> 00:06:25.050
content, just to verify that it works.

98
00:06:31.392 --> 00:06:32.754
&gt;&gt; Steve Kinney: I'd
also like to open file.

99
00:06:32.754 --> 00:06:35.997
Actually, hold on,
let me open up the dev tools now.

100
00:06:39.658 --> 00:06:42.480
&gt;&gt; Steve Kinney: Open File,
go to the the Grocery List, right?

101
00:06:42.480 --> 00:06:46.937
You can see I've got the file, which
is /Users/stevekinney/Desktop/Grocery

102
00:06:46.937 --> 00:06:48.828
List And then the content, right?

103
00:06:48.828 --> 00:06:53.087
So those are both being sent from the main
process, to the renderer process,

104
00:06:53.087 --> 00:06:57.100
and now we're ready to go ahead and
try to put it into our user interface.

105
00:07:00.450 --> 00:07:07.144
So instead of console logging it, what
we'll simply say is markdownView.value,

106
00:07:07.144 --> 00:07:11.530
cuz of the text area is the content, and

107
00:07:11.530 --> 00:07:17.010
we'll call renderMarkdownToHtml
with that content, as well.

108
00:07:17.010 --> 00:07:19.675
So we'll set that text
area with the content, and

109
00:07:19.675 --> 00:07:22.666
we'll also trigger the other
side to render it to HTML.

110
00:07:29.156 --> 00:07:34.619
&gt;&gt; Steve Kinney: Open the file, Grocery
list, and you see it render, right?

111
00:07:34.619 --> 00:07:37.448
So yeah, We're reading and writing,
well we're reading from the file system,

112
00:07:37.448 --> 00:07:38.683
let's not get ahead of ourselves.

113
00:07:38.683 --> 00:07:42.317
We're reading from the file system now,
we're displaying it in the UI,

114
00:07:42.317 --> 00:07:44.495
we're communicating between processes.

115
00:07:44.495 --> 00:07:47.845
We've got kind of the basics
of the application in place.

