WEBVTT

1
00:00:00.280 --> 00:00:02.790
&gt;&gt; Steve Kinney: Second application we're
going to build is clipboard manager which

2
00:00:02.790 --> 00:00:09.060
is going to integrate some new and
exciting terrain for us.

3
00:00:09.060 --> 00:00:13.410
One, it is going to listen to
global shortcuts, all this

4
00:00:13.410 --> 00:00:18.400
accelerators we put on those menu items,
those are from within the application.

5
00:00:18.400 --> 00:00:21.430
But, what if we wanted to
trigger stuff from anywhere?

6
00:00:21.430 --> 00:00:24.340
Right, so we can register at global
shortcuts with the operating system.

7
00:00:24.340 --> 00:00:26.160
It will be able to read and
write from the clipboard.

8
00:00:27.290 --> 00:00:32.100
A common question I get a lot is,
what if I wanna use Angular or

9
00:00:32.100 --> 00:00:35.600
Ember, or React or whatever, right?

10
00:00:35.600 --> 00:00:36.950
What if I wanna use TypeScript?

11
00:00:36.950 --> 00:00:39.300
What if I wanna use CoffeeScript?

12
00:00:39.300 --> 00:00:40.540
No one asks me anymore.

13
00:00:40.540 --> 00:00:43.690
What if I want to use Sass, or whatever.

14
00:00:43.690 --> 00:00:44.690
Right.
And those are all

15
00:00:44.690 --> 00:00:47.390
very easy things to do without
a complicated bell process.

16
00:00:47.390 --> 00:00:49.740
Yeah, I want to use Babel, so

17
00:00:49.740 --> 00:00:53.480
what I'm going to do is I'm going to set
up a web pack config, that's going to like

18
00:00:53.480 --> 00:00:58.410
on every file change, automatically
compile a new render JS, so on, so forth.

19
00:00:58.410 --> 00:01:03.250
That will work, you don't need
to do any of that, it'll work.

20
00:01:03.250 --> 00:01:06.630
So, this application is going to
read more from the clip board,

21
00:01:06.630 --> 00:01:09.130
it is gonna have global shortcuts, and

22
00:01:09.130 --> 00:01:14.264
also it's going to be able to support
either TypeScript or fancy pants

23
00:01:14.264 --> 00:01:19.890
JavaScript with Babel or a CoffeeScript or
any of those things as well.

24
00:01:19.890 --> 00:01:24.650
We're actually gonna build it as
the world's simplest React application.

25
00:01:24.650 --> 00:01:26.870
Even if you don't know any React,
that is totally fine.

26
00:01:26.870 --> 00:01:29.960
It's not gonna, you might learn a little
bit of React along the way, but

27
00:01:29.960 --> 00:01:32.980
there is is not React
prerequisite knowledge for this.

28
00:01:32.980 --> 00:01:36.010
It'll just be some of that by hand dom

29
00:01:36.010 --> 00:01:38.080
manipulation that we
were doing in the one.

30
00:01:38.080 --> 00:01:39.750
We just, we used React for that.

31
00:01:39.750 --> 00:01:43.500
Instead, and it's mostly to demonstrate
how easy it is to set up and

32
00:01:43.500 --> 00:01:46.830
the fact that you don't need to like set
up a Babel compiler step for JSX and

33
00:01:46.830 --> 00:01:50.170
things along that those lines, but
like I said, you could do this.

34
00:01:50.170 --> 00:01:53.510
There are also libraries,
like amber usually is a, has a,

35
00:01:53.510 --> 00:01:58.370
I think there is a amber electron which
will basically use embassy ally and

36
00:01:58.370 --> 00:02:02.370
an electron application together and
basically in sync for you.

37
00:02:02.370 --> 00:02:04.660
And this is very similar for
angular as well.

38
00:02:04.660 --> 00:02:09.850
So, for whatever your framework of
choice is, there is an option for that.

39
00:02:09.850 --> 00:02:14.250
I only worked with React because it is for
our purposes the lowest learning curve,

40
00:02:14.250 --> 00:02:16.200
if you didn't know any of them or
if you know a different one.

41
00:02:16.200 --> 00:02:17.770
So, we want that one.

42
00:02:17.770 --> 00:02:20.210
So, how do you do this
transpilation stuff?

43
00:02:20.210 --> 00:02:23.630
How do you do CoffeeScript to

44
00:02:23.630 --> 00:02:28.250
the version of JavaScript supported by
whatever version of V8 is in electron.

45
00:02:29.280 --> 00:02:31.960
You basically just pont on the problem.

46
00:02:31.960 --> 00:02:34.970
There is a library
called electron compile.

47
00:02:34.970 --> 00:02:40.210
Electron compile basically
built in the recompile step,

48
00:02:40.210 --> 00:02:45.350
so in our dependencies,
you might have seen that we had electron,

49
00:02:45.350 --> 00:02:49.700
now electron use to be
called electron pre-built,

50
00:02:49.700 --> 00:02:54.949
up until like i must say 2017, where i
just used electron library for that.

51
00:02:56.150 --> 00:02:58.720
There is a library called
electron pre-built compile,

52
00:02:58.720 --> 00:03:01.550
where you can use that instead of
electron and it will basically give

53
00:03:01.550 --> 00:03:05.650
you a version of electron that has all
the build process steps already built in.

54
00:03:05.650 --> 00:03:09.680
So basically use that instead, and
now all of a sudden you can use Babel, or

55
00:03:09.680 --> 00:03:14.640
TypeScript, or CoffeeScript, or
Sass, or Less or Stylus or Jade, or

56
00:03:14.640 --> 00:03:16.130
whatever you want.

57
00:03:16.130 --> 00:03:18.680
If even that is a little bit too much for
you,

58
00:03:18.680 --> 00:03:22.020
we'll talk about another really
great tool that I recommend.

59
00:03:22.020 --> 00:03:25.490
But let's just talk about what we
actually get from electron compile first.

60
00:03:26.720 --> 00:03:31.090
So as you're kind of compiled
to JavaScript languages,

61
00:03:31.090 --> 00:03:35.790
you get Babel, TypeScript,
CoffeeScript and GraphQL support.

62
00:03:35.790 --> 00:03:36.960
Just built in.

63
00:03:36.960 --> 00:03:38.450
How do you opt into these?

64
00:03:38.450 --> 00:03:43.330
Well, if you have a file that ends
in .js it's gonna run through Babel,

65
00:03:43.330 --> 00:03:47.710
if you have a file that ends in .ts it's
going to run through TypeScript, so on and

66
00:03:47.710 --> 00:03:48.420
so forth, right?

67
00:03:48.420 --> 00:03:52.920
The file extension will dictate
what pre-compiler runs through.

68
00:03:52.920 --> 00:03:54.140
You don't have to worry about it.

69
00:03:54.140 --> 00:03:59.660
If you're using electron pile, you get the
transpilation step completely for free.

70
00:03:59.660 --> 00:04:06.010
CSS, you can write Less, you can write
Sass or SCSS, Stylus, any of those.

71
00:04:06.010 --> 00:04:10.210
You just use the right file extension,
it will automatically transpile them and

72
00:04:10.210 --> 00:04:13.490
work for you,
you don't have to think about it.

73
00:04:13.490 --> 00:04:20.540
HTML, you can use Jade or you can use
Vue.js 2.0 Single-File Components.

74
00:04:20.540 --> 00:04:22.610
All right so, if you are into
that you can just use those.

75
00:04:22.610 --> 00:04:25.680
Again file extension dictates
which one we're working with.

76
00:04:25.680 --> 00:04:26.850
You don't think about it.

77
00:04:26.850 --> 00:04:28.310
You don't have to configure anything.

78
00:04:28.310 --> 00:04:29.790
There is a way to tweak and

79
00:04:29.790 --> 00:04:32.810
configure things,
that we will take a look at in a second,

80
00:04:32.810 --> 00:04:37.000
but out of the box the file extension
will go with some sensible defaults.

81
00:04:37.000 --> 00:04:40.810
The tweaking stuff is usually most
important for things like Babel because,

82
00:04:40.810 --> 00:04:44.252
as many of us know, Babel does nothing.

83
00:04:44.252 --> 00:04:46.420
Right, Bable is plug-in powered mostly,

84
00:04:46.420 --> 00:04:49.780
if you just run code through Bable,
you get the same code out the other end.

85
00:04:49.780 --> 00:04:50.980
It's all about Bable plug-ins.

86
00:04:50.980 --> 00:04:53.640
So if you're using Bable, there are some
things you might want to consider doing.

87
00:04:54.870 --> 00:05:02.261
And then JSON, you can use CSON instead,
which is CoffeeScript Object Notation.

88
00:05:04.620 --> 00:05:06.780
&gt;&gt; Steve Kinney: It's what Adam uses.

89
00:05:06.780 --> 00:05:10.550
I have never used it,
never occurred to me too, but

90
00:05:10.550 --> 00:05:13.920
it thing, and you can use that as well.

91
00:05:13.920 --> 00:05:17.600
And so like I said, instead of if you are
starting a brand new app like this case,

92
00:05:17.600 --> 00:05:22.820
because I wanted to not make you
watch me write CSS, You're welcome.

93
00:05:22.820 --> 00:05:24.320
I gave you repose and you pulled down.

94
00:05:24.320 --> 00:05:26.290
I had the dependencies in a packaged JSON.

95
00:05:26.290 --> 00:05:28.630
But instead of doing npm install electron,

96
00:05:28.630 --> 00:05:31.540
you would do an npm install
electron-prebuilt-compile.

97
00:05:31.540 --> 00:05:33.640
And you'd treat everything
exactly the same way,

98
00:05:33.640 --> 00:05:35.450
except now you have translation for free.

