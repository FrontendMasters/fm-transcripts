WEBVTT

1
00:00:00.300 --> 00:00:01.919
&gt;&gt; Steve Kinney: So
this is gonna be our application,

2
00:00:01.919 --> 00:00:03.809
we'll have a Copy from Clipboard button.

3
00:00:03.809 --> 00:00:05.689
Eventually we'll get
some global shortcuts,

4
00:00:05.689 --> 00:00:07.100
it'll be able to store clippings.

5
00:00:07.100 --> 00:00:08.825
First it will store them just in the DOM.

6
00:00:08.825 --> 00:00:12.179
And eventually we're gonna hook it up to
a SQLite database that lives in the file

7
00:00:12.179 --> 00:00:14.497
system so
it can persist in between sessions, right.

8
00:00:14.497 --> 00:00:18.179
And SQLite drivers are a compile
C++ binary, right,

9
00:00:18.179 --> 00:00:22.576
which we would not normally be able
to just use in a Web app, right?

10
00:00:22.576 --> 00:00:25.060
You can't just be like, yeah, yeah,
yeah, I wanna just use a SQLite, no,

11
00:00:25.060 --> 00:00:25.766
that doesn't work.

12
00:00:25.766 --> 00:00:29.055
You'd have to use some Web API, like
IndexedDB or something along those lines.

13
00:00:29.055 --> 00:00:33.545
Our localStorage persist data,
we're gonna use a SQL database,

14
00:00:33.545 --> 00:00:35.720
mostly because we can, right?

15
00:00:35.720 --> 00:00:40.886
It is going to be a single table, a SQLite
even might be a little heavy-handed.

16
00:00:40.886 --> 00:00:46.827
It's mostly to make the point of how do
we work with native modules in Electron?

17
00:00:46.827 --> 00:00:49.618
Cool, so this library is, or

18
00:00:49.618 --> 00:00:55.433
this repo is this
clipmaster-fem-v2 that's available.

19
00:00:55.433 --> 00:01:00.023
I'm going to kind of go on a tour
of what we have in the code base

20
00:01:00.023 --> 00:01:04.993
to buy you some time for an NPM
install but we can kinda take a look.

21
00:01:04.993 --> 00:01:09.141
So a few things you might notice is one,

22
00:01:09.141 --> 00:01:13.930
just for fun,
instead of HTML, I used Jade.

23
00:01:15.200 --> 00:01:17.827
And you can see,
I just gave it the .jade file extension.

24
00:01:17.827 --> 00:01:21.385
And that is all that I needed
to do in order to use Jade.

25
00:01:21.385 --> 00:01:23.219
I didn't have to put
anything else in place,

26
00:01:23.219 --> 00:01:25.140
I just gave it the right file extension.

27
00:01:25.140 --> 00:01:29.412
If I go to my main.js,
&gt;&gt; Steve Kinney: You can see

28
00:01:29.412 --> 00:01:33.609
that I'm just loading index.jade, and
it just knows what to do out of the box.

29
00:01:35.350 --> 00:01:40.839
Electron Forge is clearly a little bit
more generous with the comments here.

30
00:01:40.839 --> 00:01:43.085
But you can see,
this is actually really interesting.

31
00:01:43.085 --> 00:01:46.856
Electron-squirrel-startup is when
you create a Windows Installer,

32
00:01:46.856 --> 00:01:49.398
which we're not gonna be
able to get into today.

33
00:01:49.398 --> 00:01:52.206
You might wanna add stuff
into the Start menu or

34
00:01:52.206 --> 00:01:55.169
onto the desktop, and
stuff along those lines.

35
00:01:56.440 --> 00:02:00.023
This will actually do that for
you on Windows.

36
00:02:00.023 --> 00:02:02.250
And so
it is basically how I recommend doing it.

37
00:02:02.250 --> 00:02:04.990
Setting it up yourself
is also not very hard,

38
00:02:04.990 --> 00:02:09.280
it's effectively a dependency
that you require in line.

39
00:02:09.280 --> 00:02:12.955
And the function returns true if
it installed all the shortcuts and

40
00:02:12.955 --> 00:02:14.993
basically installed it on Windows.

41
00:02:14.993 --> 00:02:18.452
At which point you leave the app, and
then the next time they run the app,

42
00:02:18.452 --> 00:02:19.720
that will return false.

43
00:02:19.720 --> 00:02:23.263
And they'll do it out of the box,
so that's cool.

44
00:02:23.263 --> 00:02:27.695
I'm tending to shy a little bit from
the operating system-specific stuff today

45
00:02:27.695 --> 00:02:29.462
because I have a wide audience.

46
00:02:29.462 --> 00:02:32.114
But that is very cool,
and very there, you see,

47
00:02:32.114 --> 00:02:35.070
they do a very similar thing
with the let mainWindow.

48
00:02:35.070 --> 00:02:39.380
They are setting the height and the width
of the window, which you could do as well.

49
00:02:39.380 --> 00:02:43.497
I liked the default one last time, so
it didn't occur to me to change it.

50
00:02:43.497 --> 00:02:48.254
But you could set the height and
the width, they load in that Jade file.

51
00:02:48.254 --> 00:02:51.920
They're opening the DevTools by default,
so if that annoys you,

52
00:02:51.920 --> 00:02:53.496
just comment out that line.

53
00:02:53.496 --> 00:02:55.989
But that is a way programmatically
open the DevTools.

54
00:02:57.820 --> 00:03:00.850
They're kinda set up for a little bit
more of if you wanted to go multi-window.

55
00:03:00.850 --> 00:03:05.665
Which is when a window is closed, they
set mainWindow back to null instead of

56
00:03:05.665 --> 00:03:08.842
waiting for garbage collection,
that's cool.

57
00:03:08.842 --> 00:03:13.372
When they broke out the kind of app.on
ready into its own function that we just

58
00:03:13.372 --> 00:03:16.100
saw, they do a few other
OS-specific stuff.

59
00:03:16.100 --> 00:03:21.190
Which is if you closed that mainWindow
in FireCell, it would've quit the app.

60
00:03:21.190 --> 00:03:24.318
That's technically not Mac OS behavior,

61
00:03:24.318 --> 00:03:27.400
Mac OS, you can close all of the windows
and the application is still running.

62
00:03:27.400 --> 00:03:30.564
So here you can see,
if process.platform !== darwin,

63
00:03:30.564 --> 00:03:33.420
quit the application when
the last window is closed.

64
00:03:33.420 --> 00:03:37.623
But that means in Mac the application will
continue running even when the last window

65
00:03:37.623 --> 00:03:39.990
isn't closed, which makes sense.

66
00:03:39.990 --> 00:03:44.030
And similar for Mac OS because
it can run with no windows open.

67
00:03:44.030 --> 00:03:48.604
If they go to click on the dock icon and
there are no open windows,

68
00:03:48.604 --> 00:03:50.738
create a new window, right?

69
00:03:50.738 --> 00:03:52.418
And that's why it's broken
out into its own thing.

70
00:03:52.418 --> 00:03:57.886
So just a little bit, a lot of the same,
a little bit on top of that as well.

71
00:03:57.886 --> 00:04:01.480
And we've got the jade file, so on and
so forth, but pretty standard stuff.

72
00:04:01.480 --> 00:04:05.480
The other really important
one is this compilerc.

73
00:04:05.480 --> 00:04:09.646
If you look at compilerc and
it looks like a JSON configuration file,

74
00:04:09.646 --> 00:04:14.050
you're probably, or
Babel configuration file,

75
00:04:14.050 --> 00:04:17.130
then you're probably thinking correctly,
right?

76
00:04:18.300 --> 00:04:21.315
There is a way,
basically you have development, and

77
00:04:21.315 --> 00:04:24.669
then the only new thing here
is application/javascript.

78
00:04:24.669 --> 00:04:27.934
This means that you could also
configure settings for SaaS or

79
00:04:27.934 --> 00:04:30.760
Jade or anything else that
you wanted to do, right?

80
00:04:30.760 --> 00:04:36.389
But this is effectively using Babel and
env, Babel environment, to say, hey, don't

81
00:04:36.389 --> 00:04:41.807
transpile features that are supported by
the current version of Electron, right?

82
00:04:41.807 --> 00:04:46.660
Cuz Babel out of the box,
you might be having to target IE11, right?

83
00:04:46.660 --> 00:04:49.648
Electron, you're packaging your
own recent version of Chrome.

84
00:04:49.648 --> 00:04:54.176
So it doesn't have to transpile as much
stuff cuz a lot more stuff is natively

85
00:04:54.176 --> 00:04:55.330
supported.

86
00:04:55.330 --> 00:04:58.220
So this will basically transpile
only what it needs to transpile

87
00:04:58.220 --> 00:05:01.530
to run on Electron 3.0.

88
00:05:01.530 --> 00:05:04.140
And you can see that it's
also supporting React,

89
00:05:04.140 --> 00:05:08.234
so we'll get JSX, syntax,
and then some other things.

90
00:05:08.234 --> 00:05:11.014
So it gives sourceMaps
inline in development but

91
00:05:11.014 --> 00:05:12.852
not in production, all right?

92
00:05:12.852 --> 00:05:15.430
And so this is basically
a Babel configuration file.

93
00:05:15.430 --> 00:05:18.100
You can also configure SaaS,
Jade, all the other things.

94
00:05:18.100 --> 00:05:23.146
You can add more plugins here if
you want some other fancy syntax,

95
00:05:23.146 --> 00:05:24.900
all of that will work.

96
00:05:24.900 --> 00:05:29.217
Other than that, it's very similar to
the application that we built by hand.

97
00:05:29.217 --> 00:05:32.434
We've got a main.js and a renderer,
I think, out of the box,

98
00:05:32.434 --> 00:05:34.880
they called it index.js for
the main process.

99
00:05:34.880 --> 00:05:40.148
But for our sanity, I renamed it main.js,
but that doesn't really matter.

100
00:05:40.148 --> 00:05:43.610
And renderer.js, they don't actually
include a renderer file at all by default.

101
00:05:43.610 --> 00:05:50.043
So I gave us one, as you can see,
it's very advanced.

102
00:05:50.043 --> 00:05:55.110
Cool, we do have some dependencies
in place already, right?

103
00:05:55.110 --> 00:05:59.181
You can see there's some packaging stuff
that we'll get into in a little bit

104
00:05:59.181 --> 00:06:02.502
when we do some of this, but
I included react and react-dom.

105
00:06:02.502 --> 00:06:06.337
You can see,
it actually has electron-compile as well.

106
00:06:06.337 --> 00:06:09.096
As well as electron-prebuilt
composite devDependency,

107
00:06:09.096 --> 00:06:12.247
some of this Babel stuff in place,
and some eslint configuration.

