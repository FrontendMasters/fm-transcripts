WEBVTT

1
00:00:00.030 --> 00:00:01.780
&gt;&gt; Steve: So
we can actually wire that up ourselves.

2
00:00:01.780 --> 00:00:07.580
The server that we wrote earlier also just
has a way to receive these post requests

3
00:00:07.580 --> 00:00:14.540
and write a JSON file to
an exceptions directory as well.

4
00:00:14.540 --> 00:00:18.150
So let's go ahead and leave that
server running, and let's go ahead and

5
00:00:18.150 --> 00:00:25.411
just change a little bit of our code
&gt;&gt; Steve: All

6
00:00:25.411 --> 00:00:26.876
right,
&gt;&gt; Steve: So

7
00:00:26.876 --> 00:00:30.826
I wanna create a function
called send uncaught exception.

8
00:00:30.826 --> 00:00:33.040
And because we're doing this by hand,

9
00:00:33.040 --> 00:00:37.280
it's gonna be a little more gnarly than
what we got for free from electron.

10
00:00:43.246 --> 00:00:45.013
&gt;&gt; Steve: So it will take an error, and

11
00:00:45.013 --> 00:00:49.370
we basically want to just go ahead and
figure out a way to send it along.

12
00:00:49.370 --> 00:00:51.173
So we could,
let's grab that product name and

13
00:00:51.173 --> 00:00:53.080
company name from that
config we wrote earlier.

14
00:00:53.080 --> 00:00:58.878
So it'll say productName,
companyName from the config and

15
00:00:58.878 --> 00:01:07.630
then we'll do, we'll bring on the request
library which sends HTTP requests for us.

16
00:01:07.630 --> 00:01:10.320
You could use node fetch,
you can use whatever you want.

17
00:01:10.320 --> 00:01:17.591
I'm just gonna use request
because I want to.

18
00:01:17.591 --> 00:01:21.960
&gt;&gt; Steve: You can use the native HTTP
library if you don't like yourself.

19
00:01:21.960 --> 00:01:24.727
Go ahead and we'll say, console,

20
00:01:24.727 --> 00:01:30.054
info,
&gt;&gt; Steve: Catching error.

21
00:01:32.555 --> 00:01:33.285
&gt;&gt; Steve: Just to know that we caught it.

22
00:01:35.396 --> 00:01:38.180
&gt;&gt; Steve: Cool, and
then we're just gonna send a post request,

23
00:01:41.899 --> 00:01:49.530
&gt;&gt; Steve: To host +/uncaughtexceptions.

24
00:01:49.530 --> 00:01:52.280
And the body of that is gonna
be this JavaScript object.

25
00:01:53.290 --> 00:01:57.670
Which is anything that we would wanna know
about the system that it was running on.

26
00:01:57.670 --> 00:02:02.430
So we can say,
product name is product name,

27
00:02:06.350 --> 00:02:07.684
&gt;&gt; Steve: You might not care about this,

28
00:02:07.684 --> 00:02:09.180
but you don't have to include it.

29
00:02:09.180 --> 00:02:12.880
This is the spoke so it's really,
whatever we wanted in the properties, so

30
00:02:12.880 --> 00:02:14.410
on and so forth.

31
00:02:14.410 --> 00:02:16.180
So we can say the version.

32
00:02:16.180 --> 00:02:19.580
Now, the version, the best thing to do is
get that from the package JSON, right?

33
00:02:19.580 --> 00:02:20.810
You have likely been updating in there.

34
00:02:20.810 --> 00:02:24.446
You don't wanna have to manually
remember to do that, so

35
00:02:24.446 --> 00:02:27.340
in node you can actually
require JSON files.

36
00:02:33.220 --> 00:02:36.190
&gt;&gt; Steve: So go ahead and
we'll get that package JSON in there.

37
00:02:37.330 --> 00:02:39.140
That's a dot dot,
we need to go up in the directory.

38
00:02:40.580 --> 00:02:44.676
Cool, and so we can say that

39
00:02:44.676 --> 00:02:50.020
the version is manifest version cuz

40
00:02:50.020 --> 00:02:55.400
that'll be front of package JSON.

41
00:02:55.400 --> 00:02:58.667
Platform can be processed platform,
right, just so

42
00:02:58.667 --> 00:03:01.800
we know what kind of things
were your process type.

43
00:03:05.019 --> 00:03:07.230
&gt;&gt; Steve: And we'll actually see
what process type in a second.

44
00:03:07.230 --> 00:03:11.580
This is basically, did this happen in the
main process or the render process, right?

45
00:03:11.580 --> 00:03:13.670
That's what process type is gonna be.

46
00:03:13.670 --> 00:03:15.400
That is actually and
electronic specific thing.

47
00:03:15.400 --> 00:03:17.060
And you'll find out in a second,

48
00:03:17.060 --> 00:03:19.850
completely unintuitive to
what you might think it is.

49
00:03:19.850 --> 00:03:24.683
Cool, and then let's just send
some details about the error.

50
00:03:24.683 --> 00:03:31.090
So the error itself,
we'll say the name is error.name,

51
00:03:31.090 --> 00:03:35.159
the message is the error.message.

52
00:03:35.159 --> 00:03:37.960
We'll probably see if we can get
the file name that happened in.

53
00:03:42.014 --> 00:03:44.220
&gt;&gt; Steve: So that's useful and
then the call stack.

54
00:03:47.406 --> 00:03:50.105
&gt;&gt; Steve: Right,
we wanna know where it happened.

55
00:03:50.105 --> 00:03:51.859
Cuz if we get undefined,
it's not a function.

56
00:03:51.859 --> 00:03:53.900
Cool, that happened somewhere, neat.

57
00:03:53.900 --> 00:03:55.198
I'd like to know where it happened.

58
00:03:55.198 --> 00:04:02.271
And we can also get the line number
is error dot line number and

59
00:04:02.271 --> 00:04:09.832
column number,
&gt;&gt; Steve: Error dot column number, right?

60
00:04:09.832 --> 00:04:13.888
So this will send some pretty useful

61
00:04:13.888 --> 00:04:19.810
information to us whenever
an error is thrown.

62
00:04:19.810 --> 00:04:21.950
Now, we do need to trigger this, right?

63
00:04:21.950 --> 00:04:25.110
We wrote a function,
we need to actually trigger it as well.

64
00:04:25.110 --> 00:04:31.760
And so what we'll say is,
if process type- Cuz main is more

65
00:04:31.760 --> 00:04:37.260
of a node process, while the render
process is more of a browser process.

66
00:04:37.260 --> 00:04:42.070
Which is gonna be completely unintuitive
when you see what happens next, but

67
00:04:42.070 --> 00:04:43.750
let's go with it.

68
00:04:43.750 --> 00:04:45.700
In fact,
I'll actually show you real quick.

69
00:04:48.390 --> 00:04:53.880
In the main process, let's go ahead,
just when it starts,

70
00:04:53.880 --> 00:04:59.381
we'll say, console.log,
main process process.type.

71
00:04:59.381 --> 00:05:06.350
Anyone wanna take a lucky
guess what we're gonna get?

72
00:05:09.256 --> 00:05:11.810
&gt;&gt; Steve: That's right,
the main process, it's called browser.

73
00:05:18.892 --> 00:05:20.030
&gt;&gt; Steve: And renderer.

74
00:05:20.030 --> 00:05:24.365
So when you see me write the next line
of code, I'm not making a mistake.

75
00:05:24.365 --> 00:05:28.225
[LAUGH] Right, the main process,
the process type is browser and

76
00:05:28.225 --> 00:05:30.522
then the render process is renderer.

77
00:05:32.892 --> 00:05:33.880
&gt;&gt; Steve: All right, cool.

78
00:05:33.880 --> 00:05:37.388
So what we'll do is we'll go
back to that crash reporter and

79
00:05:37.388 --> 00:05:42.492
we'll say if process.type,
&gt;&gt; Steve: Browser,

80
00:05:42.492 --> 00:05:46.210
that means it's the main process,
we'll say process.on.

81
00:05:46.210 --> 00:05:49.530
We'll do the node way of
catching uncaught exceptions.

82
00:05:51.870 --> 00:05:53.680
Process on uncaught exception.

83
00:05:53.680 --> 00:05:55.217
We'll do that, send uncaught exception.

84
00:06:01.174 --> 00:06:04.522
&gt;&gt; Steve: Otherwise,
window.addEventListener for

85
00:06:04.522 --> 00:06:10.600
an error that bubbles all the way up
to the window, we'll also send that.

86
00:06:10.600 --> 00:06:15.230
So whether it happens in a kind of
node context, or if it happens in

87
00:06:15.230 --> 00:06:20.370
a browser context, we'll go ahead and
we will get it either way.

88
00:06:22.060 --> 00:06:27.854
Cool, and then we'll do module.exports.

89
00:06:32.999 --> 00:06:36.759
&gt;&gt; Steve: Sweet, now what we can
do is we already have it there,

90
00:06:36.759 --> 00:06:41.340
we can also ask for
it in the renderer process as well.

91
00:06:41.340 --> 00:06:41.871
So here, we'll do,

92
00:06:53.158 --> 00:06:54.400
&gt;&gt; Steve: We'll have it in both places.

93
00:07:01.438 --> 00:07:01.938
&gt;&gt; Steve: We'll go ahead,

94
00:07:14.217 --> 00:07:14.960
&gt;&gt; Steve: We'll throw an error.

95
00:07:16.340 --> 00:07:23.861
And then let's go check,
&gt;&gt; Steve: All right,

96
00:07:23.861 --> 00:07:26.000
we'll just see what's
going on here as well.

97
00:07:33.420 --> 00:07:35.069
&gt;&gt; Steve: All right, fire that up.

98
00:07:40.382 --> 00:07:41.950
&gt;&gt; Steve: We got an error there.

99
00:07:41.950 --> 00:07:44.632
Did catch the error this time, I think
I just couldn't do it in the console.

100
00:07:48.308 --> 00:07:52.788
&gt;&gt; Steve: You can see all of my uncaught
exceptions are being caught as well,

101
00:07:52.788 --> 00:07:54.230
which is super cool.

102
00:07:54.230 --> 00:07:56.900
It gives you a way to be
able to pull out stuff in.

103
00:07:56.900 --> 00:08:00.750
Now, and all that, writing it all
to the fault system, if you just.

104
00:08:00.750 --> 00:08:03.680
That's not gonna be scale over a company
like Slack as we're gonna write them to

105
00:08:03.680 --> 00:08:04.740
the and expressor.

106
00:08:04.740 --> 00:08:08.830
We're like what do you do on a server to
actually deal with those reports is going

107
00:08:08.830 --> 00:08:11.310
to be unique to how you
choose to handle it.

108
00:08:11.310 --> 00:08:15.450
But you can, theoretically, get crash
reports from an absolute meltdown and then

109
00:08:15.450 --> 00:08:19.790
you can also get any of the uncollected
exceptions, should you choose to.

110
00:08:19.790 --> 00:08:21.680
You can also do a little bit
of introspection of, like,

111
00:08:21.680 --> 00:08:24.370
is this one I care about, and
so on and so forth, right?

112
00:08:24.370 --> 00:08:26.500
This is just an approach to doing that,

113
00:08:26.500 --> 00:08:28.980
that you could choose to use,
or not to use, as well.

