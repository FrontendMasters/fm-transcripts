WEBVTT

1
00:00:00.290 --> 00:00:02.710
&gt;&gt; Steve Kinney: This whole time
we've had a menu up here, and

2
00:00:02.710 --> 00:00:03.920
it's done pretty well for us.

3
00:00:03.920 --> 00:00:08.650
It has most of the default things.

4
00:00:08.650 --> 00:00:12.650
On macOS it has this application menu.

5
00:00:12.650 --> 00:00:16.670
We've got an edit, a view,
where we can toggle the developer tools.

6
00:00:16.670 --> 00:00:18.560
You might not wanna have
the developer tools.

7
00:00:18.560 --> 00:00:22.092
You might wanna have any of
these buttons that are up here,

8
00:00:22.092 --> 00:00:26.146
you might wanna have just in
the actual application menu, right?

9
00:00:26.146 --> 00:00:30.430
On macOS it's along the top, on Windows
and Linux is part of the window itself.

10
00:00:30.430 --> 00:00:31.910
We open up Visual Studio code,

11
00:00:31.910 --> 00:00:36.930
you can see that we have custom menus here
that are very pertinent to Visual Studio.

12
00:00:36.930 --> 00:00:43.288
If we flip over to the GitHub app, there
is a GitHub specific application menu.

13
00:00:43.288 --> 00:00:47.914
If I switch over to Hyper,
it is slimmed down, but

14
00:00:47.914 --> 00:00:51.740
again, custom to that application.

15
00:00:51.740 --> 00:00:54.670
So clearly, we know this is something
that's possible to do an Electron,

16
00:00:54.670 --> 00:00:58.220
we just need to do it.

17
00:00:58.220 --> 00:01:02.430
So we have two modules,
you'll really only be using one of them.

18
00:01:02.430 --> 00:01:04.570
Menus are built out of menu items.

19
00:01:04.570 --> 00:01:08.010
You can theoretically extentiate
a whole bunch of these menu items and

20
00:01:08.010 --> 00:01:09.450
put them all together.

21
00:01:09.450 --> 00:01:12.240
That is really tedious and
I wouldn't necessarily recommend it.

22
00:01:12.240 --> 00:01:15.620
I would treat menu item as
a implementation detail.

23
00:01:15.620 --> 00:01:21.210
The one we care about is this menu module,
which we'll pull in in our main process.

24
00:01:22.980 --> 00:01:27.870
So bring in,
&gt;&gt; Steve Kinney: Menu, as well.

25
00:01:27.870 --> 00:01:31.070
So you can see there's menu and menu item.

26
00:01:31.070 --> 00:01:35.601
A menu has many menu items, right?

27
00:01:35.601 --> 00:01:40.643
But Electron gives a syntax where can
basically take objects in arrays to

28
00:01:40.643 --> 00:01:45.520
define the structure of our menus,
and then Electron will go ahead and

29
00:01:45.520 --> 00:01:50.200
create all the menu items on our behalf,
and wire it all up.

30
00:01:50.200 --> 00:01:52.870
So the one that we're gonna use in this
case, if we scroll down to the bottom.

31
00:01:54.370 --> 00:01:57.220
We can type menu and we can see
that there's a bunch of methods.

32
00:01:57.220 --> 00:02:01.760
The one that I'm kind of interested
in is buildFromTemplate.

33
00:02:01.760 --> 00:02:07.280
This is where you give it an object, or
an array objection of basic JavaScript

34
00:02:07.280 --> 00:02:10.990
data structures, and then it will go
ahead and build the menu out of that for

35
00:02:10.990 --> 00:02:14.765
you, and then you can set
an application menu, or whatever.

36
00:02:14.765 --> 00:02:18.660
Kinda you actually create context menus,
we'll see later with this as well.

37
00:02:18.660 --> 00:02:21.540
It's for creating any type of
menu that you wanna create,

38
00:02:21.540 --> 00:02:23.670
we can use this menu constructor.

39
00:02:23.670 --> 00:02:28.030
So let's make a really,
really, simple menu template,

40
00:02:28.030 --> 00:02:29.930
just to try it out for a spin.

41
00:02:29.930 --> 00:02:32.960
So we'll say, template.

42
00:02:32.960 --> 00:02:34.600
We could do this all inline.

43
00:02:34.600 --> 00:02:37.620
We'll see in a second why I'm
making it its own object.

44
00:02:37.620 --> 00:02:39.701
And we'll go ahead and
we'll make that an array.

45
00:02:41.882 --> 00:02:43.440
&gt;&gt; Steve Kinney: And
we'll put the first object in it.

46
00:02:43.440 --> 00:02:45.820
This is gonna be our
first kind of menu item.

47
00:02:45.820 --> 00:02:49.497
And we'll it give the label of file.

48
00:02:52.264 --> 00:02:53.438
&gt;&gt; Steve Kinney: And
then we could also give it,

49
00:02:53.438 --> 00:02:55.703
another property that it'll
take is the sub menu, right?

50
00:02:55.703 --> 00:02:59.627
Cuz we know we have the menus along the
top here, and then there's a sub menu, and

51
00:02:59.627 --> 00:03:02.450
sub menus can have more sub menus,
and so on and so forth.

52
00:03:02.450 --> 00:03:05.607
So I'll say submenu,
which is another array.

53
00:03:05.607 --> 00:03:13.501
And we'll give that one
a label of Open File.

54
00:03:13.501 --> 00:03:17.670
And they can take methods,
click in this case,

55
00:03:17.670 --> 00:03:22.580
and we'll just say console.log,
Open File, right?

56
00:03:22.580 --> 00:03:26.570
So a very simple menu, it's just a file
menu, which has one item on it that

57
00:03:26.570 --> 00:03:30.530
doesn't really do anything, and right now
it's just an array of JavaScript objects.

58
00:03:31.970 --> 00:03:36.884
To turn that into a menu,
we'll say, const applicationMenu =

59
00:03:36.884 --> 00:03:41.456
Menu.buildFromTemplate, I'll
pass it that template.

60
00:03:41.456 --> 00:03:44.880
Okay, So we've took a template,

61
00:03:44.880 --> 00:03:48.910
we turned that into a menu, but it doesn't
really know what that menu's for yet.

62
00:03:48.910 --> 00:03:51.360
Again, that could be a context
menu from when they right-click.

63
00:03:51.360 --> 00:03:55.520
There's various places we can put
menus in an Electron application.

64
00:03:55.520 --> 00:03:57.820
We wanna set it as an application menu.

65
00:03:57.820 --> 00:04:02.659
And,
&gt;&gt; Steve Kinney: You can see that there is

66
00:04:02.659 --> 00:04:05.520
a method called setApplicationMenu,
so that seems good.

67
00:04:05.520 --> 00:04:09.090
We have an application menu, we have
a method called setApplicationMenu,

68
00:04:09.090 --> 00:04:11.740
I can see where this is
gonna come together, right?

69
00:04:11.740 --> 00:04:14.980
We do need to wait for
the application to be ready.

70
00:04:14.980 --> 00:04:18.786
So we can do all this,
we can do the setup at the top level.

71
00:04:18.786 --> 00:04:22.690
What we'll wanna do is app.on ready.

72
00:04:22.690 --> 00:04:30.869
We'll say,
&gt;&gt; Steve Kinney: Menu.setApplicationMenu,

73
00:04:30.869 --> 00:04:33.971
applicationMenu, nope.

74
00:04:38.000 --> 00:04:40.284
&gt;&gt; Steve Kinney: Got a little carried
away with auto-complete there.

75
00:04:40.284 --> 00:04:44.260
Okay, this'll change the main process, so
I will need to kill it and restart it.

76
00:04:47.050 --> 00:04:50.120
So depending on what
operating system you're on,

77
00:04:50.120 --> 00:04:52.610
you're gonna see something
slightly different.

78
00:04:52.610 --> 00:04:59.350
If you look at the data structure that
we created, the first menu is File.

79
00:04:59.350 --> 00:05:03.090
If you're on Windows or Linux,
you're like, yeah looks good to me.

80
00:05:03.090 --> 00:05:03.820
I see a file menu.

81
00:05:03.820 --> 00:05:06.800
I don't see what your problem is
right now, everything's great.

82
00:05:06.800 --> 00:05:13.790
If I switch back over in macOS land,
you can see that it's called Electron.

83
00:05:13.790 --> 00:05:15.774
It does have the open file there, but

84
00:05:15.774 --> 00:05:19.358
it totally ignored the fact that
the first menu should be File, and

85
00:05:19.358 --> 00:05:23.267
this is because in macOS the first
menu is the application menu, right?

86
00:05:23.267 --> 00:05:25.490
So for everyone else this is great.

87
00:05:25.490 --> 00:05:31.270
For MacOS, we need to make a new first
menu that is the application menu.

88
00:05:31.270 --> 00:05:34.470
So that's slightly problematic, and
this comes the for the first time

89
00:05:34.470 --> 00:05:38.520
in this workshop where we're gonna have
to kind of have a diversion code path for

90
00:05:38.520 --> 00:05:40.720
one particular operating system.

91
00:05:40.720 --> 00:05:45.510
When we passed in main window into the
show open dialogue or show save dialog,

92
00:05:45.510 --> 00:05:50.020
right, Windows and Linux users were like,
it didn't matter, right?

93
00:05:50.020 --> 00:05:52.128
We didn't have to do
a conditional in there.

94
00:05:52.128 --> 00:05:56.087
When we set it, the represented file, or
set document edited, that didn't matter

95
00:05:56.087 --> 00:05:59.760
for Windows or Linux, it just was an extra
little bell and whistle for macOS.

96
00:05:59.760 --> 00:06:02.320
This is the first time where we
are going to have to write a conditional

97
00:06:02.320 --> 00:06:05.500
to see what platform am I on, and

98
00:06:05.500 --> 00:06:09.440
depending on that platform,
I need to do something slightly different.

99
00:06:09.440 --> 00:06:13.848
Cool, so the big question is,
what platform are we on?

100
00:06:13.848 --> 00:06:18.819
Luckily, Node already has a way of
telling what platform it's running on, so

101
00:06:18.819 --> 00:06:21.140
we can hook into that.

102
00:06:21.140 --> 00:06:25.193
So what we'll do is,
&gt;&gt; Steve Kinney: We'll write

103
00:06:25.193 --> 00:06:25.764
a conditional.

104
00:06:25.764 --> 00:06:31.330
If process.platform, and
this will give you, I think,

105
00:06:31.330 --> 00:06:36.490
either Win32, I don't remember all of
them, they're in the note documentation.

106
00:06:36.490 --> 00:06:43.063
The one we care about is Darwin,
which is the kind of underbelly of macOS.

107
00:06:43.063 --> 00:06:45.906
All right, so the platform will
be Darwin if we're on macOS,

108
00:06:45.906 --> 00:06:48.780
it will not be Darwin if
we're on Windows or Linux.

109
00:06:48.780 --> 00:06:51.430
At one point in my younger years,
I knew what the other two were, but

110
00:06:51.430 --> 00:06:53.920
that has long gone from my brain.

111
00:06:53.920 --> 00:06:58.490
So if that's true, then we're gonna need
to kind of put something at the beginning

112
00:06:58.490 --> 00:07:01.140
of the array, that's gonna be
that application menu, right?

113
00:07:01.140 --> 00:07:06.530
So we could say something like const
applicationName, I'll call it Fire Sale.

114
00:07:09.670 --> 00:07:11.750
This won't really matter right now.

115
00:07:11.750 --> 00:07:15.677
It'll only matter when we package the
application, because that's when we build.

116
00:07:15.677 --> 00:07:18.273
Right now we're using a version of
Electron that's kind of in our node

117
00:07:18.273 --> 00:07:19.470
modules folder.

118
00:07:19.470 --> 00:07:21.310
When we actually build the application,

119
00:07:21.310 --> 00:07:23.850
that'll be when we actually
re-brand Electron.

120
00:07:23.850 --> 00:07:25.850
That's why we've always
gotten the Electron icon.

121
00:07:25.850 --> 00:07:27.360
So you can call it whatever you want.

122
00:07:27.360 --> 00:07:29.940
It's still gonna say Electron up
in that menu until we actually

123
00:07:29.940 --> 00:07:31.600
build our own bespoke version.

124
00:07:31.600 --> 00:07:33.390
So we'll say const applicationName.

125
00:07:34.490 --> 00:07:36.890
And we'll take that template, unshift

126
00:07:38.540 --> 00:07:42.010
is the array method that puts something
on to the beginning of an array.

127
00:07:42.010 --> 00:07:43.710
Push we use all the time.

128
00:07:43.710 --> 00:07:45.650
Push puts stuff onto the end of the array,

129
00:07:45.650 --> 00:07:48.360
unshift will put something onto
the beginning of the array,

130
00:07:48.360 --> 00:07:51.374
shift will take it off the beginning
of the array, so on and so forth.

131
00:07:51.374 --> 00:07:56.280
So we'll actually push one
more item on there, and

132
00:07:56.280 --> 00:07:59.500
we'll go ahead and we'll just make
another menu item in this case.

133
00:07:59.500 --> 00:08:03.943
And this one will be a label
of that application name.

134
00:08:07.699 --> 00:08:11.047
&gt;&gt; Steve Kinney: Cool,
and that'll give us a sub

135
00:08:11.047 --> 00:08:15.859
menu,
&gt;&gt; Steve Kinney: And we can say,

136
00:08:15.859 --> 00:08:19.350
give another one of,with a label of.

137
00:08:19.350 --> 00:08:24.470
If I flip over to the general application,
it's About, and there's Quit.

138
00:08:24.470 --> 00:08:27.350
That has the name of the application
in there, so let's do that.

139
00:08:27.350 --> 00:08:34.921
We give it a label of
About applicationName.

140
00:08:38.886 --> 00:08:44.573
&gt;&gt; Steve Kinney: We're
gonna leave that for now,

141
00:08:44.573 --> 00:08:49.853
and then we'll add another one

142
00:08:49.853 --> 00:08:55.550
of label Quit applicationName.

143
00:08:58.982 --> 00:09:03.182
&gt;&gt; Steve Kinney: Cool, so
we'll push that on to the beginning of

144
00:09:03.182 --> 00:09:08.890
the array if we are on Darwin,
or macOS, in this case.

145
00:09:08.890 --> 00:09:13.430
Currently in macOS, what we'll do is
we'll put a new menu item before.

146
00:09:13.430 --> 00:09:16.140
That'll be some of the things we
normally find in this application menu.

147
00:09:16.140 --> 00:09:19.720
Right now, we're just gonna start
with About and Quit, but clearly,

148
00:09:19.720 --> 00:09:23.210
we could put the rest of
these in place as well.

149
00:09:24.230 --> 00:09:27.440
They don't do anything yet, and we'll talk
a little bit about how to wire them up,

150
00:09:27.440 --> 00:09:33.560
but let's actually go ahead and
just verify that they show up at all.

151
00:09:35.140 --> 00:09:38.730
So, we've got a menu, and you can
see now there is About and Quit, and

152
00:09:38.730 --> 00:09:40.430
the file menu shows up.

153
00:09:40.430 --> 00:09:42.510
If you're on Windows or Linux,

154
00:09:42.510 --> 00:09:44.580
you should see no change from
the previous thing that we did,

155
00:09:44.580 --> 00:09:50.780
because that was a conditional path only
from macOS to put that window in place.

156
00:09:50.780 --> 00:09:54.628
Now, you might choose to have a quit
menu in file whatever you wanna do.

157
00:09:54.628 --> 00:09:58.090
You might have to write more conditional
code for those other operating systems,

158
00:09:58.090 --> 00:10:01.400
if there was stuff in here that you want
somewhere else on Windows or Linux, but

159
00:10:01.400 --> 00:10:03.070
generally speaking, this'll work.

160
00:10:03.070 --> 00:10:05.350
Now, these menu items
don't do anything yet.

161
00:10:06.710 --> 00:10:11.503
Well, this one will console log, right,
you can see it in the window behind me.

162
00:10:11.503 --> 00:10:14.327
It will console log,
even though, is it really click?

163
00:10:14.327 --> 00:10:16.820
Cuz I'm dragging it,
releasing, I don't know.

164
00:10:16.820 --> 00:10:22.010
So we could, for instance,
add a click here, and

165
00:10:22.010 --> 00:10:27.085
we'll say when they do
that we'll say app.quit

166
00:10:34.980 --> 00:10:35.551
&gt;&gt; Steve Kinney: So now,

167
00:10:35.551 --> 00:10:37.930
we can quit the app with that menu.

168
00:10:39.250 --> 00:10:46.334
What I can't do however,
&gt;&gt; Steve Kinney: Is hit Cmd+Q or Ctrl+Q.

169
00:10:46.334 --> 00:10:48.540
No hot key works.

170
00:10:48.540 --> 00:10:49.960
In fact, it's even worse.

171
00:10:51.890 --> 00:10:53.730
I can't select all.

172
00:10:53.730 --> 00:10:57.290
If I do select all,
I can't copy and paste.

173
00:10:57.290 --> 00:10:59.100
Why can't I copy and paste?

174
00:10:59.100 --> 00:11:02.490
Because when I dismissed
Electron's default menu,

175
00:11:02.490 --> 00:11:04.090
I took away those menu items.

176
00:11:04.090 --> 00:11:08.490
I took away the keyboard shortcuts
associated with those menu items.

177
00:11:08.490 --> 00:11:12.060
So should you decide you're gonna build
your own custom application menu,

178
00:11:12.060 --> 00:11:16.320
this is a, unfortunately,
an all-in kinda endeavor, right?

179
00:11:16.320 --> 00:11:18.360
It's that you need to
effectively take over.

180
00:11:18.360 --> 00:11:21.320
They gave you one,
you said you didn't want it, so

181
00:11:21.320 --> 00:11:22.830
now it's on you to build your own.

