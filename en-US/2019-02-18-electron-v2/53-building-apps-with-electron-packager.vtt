WEBVTT

1
00:00:00.130 --> 00:00:01.850
&gt;&gt; Steve Kinney: We have one
final thing that we need to do

2
00:00:01.850 --> 00:00:04.720
is we need to build this application,
right.

3
00:00:04.720 --> 00:00:07.350
We want to package this application so

4
00:00:07.350 --> 00:00:10.200
that somebody does not need to
start it up from the command line.

5
00:00:10.200 --> 00:00:13.090
And there's kind of two
basic ways to do this.

6
00:00:14.150 --> 00:00:19.080
If you are using Electron Forge,
this is done for you, right.

7
00:00:19.080 --> 00:00:20.580
It's already wired together.

8
00:00:21.810 --> 00:00:26.550
If you are doing it by hand,
you do need to a little bit of work.

9
00:00:26.550 --> 00:00:31.440
There is a library called
Electron Packager, which just basically

10
00:00:31.440 --> 00:00:36.360
does the hard work of getting you
the right electron binary for your system.

11
00:00:36.360 --> 00:00:37.974
So let's take a look at
Electron Packager real quick.

12
00:00:43.355 --> 00:00:45.806
&gt;&gt; Steve Kinney: Let's look at
another Electron Userland package.

13
00:00:45.806 --> 00:00:50.250
Electron Packager basically finds the
version of Electron for the OS that you're

14
00:00:50.250 --> 00:00:55.460
building it for, does the branding for you
so you can get icons and stuff along those

15
00:00:55.460 --> 00:01:00.420
lines, and put them in place, and then
builds that binary for you to distribute.

16
00:01:01.590 --> 00:01:05.070
What we're not gonna talk about in this
workshop today for just a really practical

17
00:01:05.070 --> 00:01:09.890
reason is, code signing, which is
super important because most operating

18
00:01:09.890 --> 00:01:13.800
systems will not let you push out updates
unless you have code signing in place.

19
00:01:13.800 --> 00:01:15.080
What is code-signing?

20
00:01:15.080 --> 00:01:21.420
It's basically validating that the code
for the application is from you, right.

21
00:01:21.420 --> 00:01:23.970
Cuz otherwise someone can man in
the middle of your update server,

22
00:01:23.970 --> 00:01:27.070
push out malicious updates,
it's happened to applications before.

23
00:01:27.070 --> 00:01:30.870
So most operating systems have
some form of code signing

24
00:01:30.870 --> 00:01:35.480
to use a verified certificate to make sure
the code is from who it says it is, right.

25
00:01:35.480 --> 00:01:38.010
So unless they have your
private cert as well,

26
00:01:38.010 --> 00:01:40.430
they cannot push out a signed binary.

27
00:01:40.430 --> 00:01:42.590
The reason we're not gonna cover this is,
one, it's different for

28
00:01:42.590 --> 00:01:46.270
every operating system, and two, most of
the time it will cost you money, right.

29
00:01:46.270 --> 00:01:49.620
I think for Windows it's about $150.

30
00:01:49.620 --> 00:01:53.910
Apple has their developer program,
so on and so forth, right.

31
00:01:53.910 --> 00:01:57.340
Sign in application is again,
bespoke for every operating system.

32
00:01:57.340 --> 00:01:59.770
Likely if you want to distribute for
multiple operating systems,

33
00:01:59.770 --> 00:02:01.360
you're gonna need to do this for
each one of them.

34
00:02:01.360 --> 00:02:03.700
Like yeah, you can develop on a Mac or
you can develop on Windows,

35
00:02:03.700 --> 00:02:04.560
you can develop on Linux.

36
00:02:04.560 --> 00:02:07.340
But if you like to distribute, you're
gonna need to sign the application for

37
00:02:07.340 --> 00:02:09.240
each one of those platforms.

38
00:02:09.240 --> 00:02:10.340
So we're not gonna get totally in there.

39
00:02:10.340 --> 00:02:14.240
The documentation is pretty good on this
and there's also a book that has a chapter

40
00:02:14.240 --> 00:02:17.670
on it like plug plug,
if you wanna kind of get into it.

41
00:02:17.670 --> 00:02:19.780
There's different ways to
distribute the application.

42
00:02:19.780 --> 00:02:24.654
You could, theoretically, put it, if
it's open source and you can put online,

43
00:02:24.654 --> 00:02:27.550
GitHub actually has a auto update service.

44
00:02:27.550 --> 00:02:31.020
You can use stuff like the Mac app store,
stuff along those lines.

45
00:02:31.020 --> 00:02:34.810
All of that is very there, but
we're just gonna get it to the point,

46
00:02:34.810 --> 00:02:36.670
where we have an unsigned
application that we can bundle,

47
00:02:36.670 --> 00:02:40.170
that you can double click on, cuz I
feel like that's very validating, and

48
00:02:40.170 --> 00:02:43.690
a good way to kind of wrap
this all up together.

49
00:02:43.690 --> 00:02:51.550
So in every version of Firesale,
I've had this Electron Packager in there.

50
00:02:51.550 --> 00:02:56.720
And Electron Packager basically
gives you the ability to

51
00:02:56.720 --> 00:02:59.050
get the right Electron binary.

52
00:02:59.050 --> 00:03:01.860
We've just been using one that's
in our node modules folder.

53
00:03:01.860 --> 00:03:07.720
But here we wanna actually change the icon
from that Electron icon to our icon.

54
00:03:07.720 --> 00:03:12.230
We want to name it the application.

55
00:03:12.230 --> 00:03:16.690
Still to this day on MacOS, you can
still see that it says Electron up here.

56
00:03:16.690 --> 00:03:17.790
That's not great.

57
00:03:17.790 --> 00:03:21.870
What we wanna do is we wanna brand it
with the name of our application, so

58
00:03:21.870 --> 00:03:22.870
let's go ahead and do that.

59
00:03:22.870 --> 00:03:24.650
One thing I just wanna
point out real quick is,

60
00:03:24.650 --> 00:03:28.750
in this, maybe I should take
out some of the crashes.

61
00:03:28.750 --> 00:03:29.428
That seems good, right?

62
00:03:34.841 --> 00:03:36.053
&gt;&gt; Steve Kinney: Cool.

63
00:03:36.053 --> 00:03:44.092
I just wanna point out real quick that
in this Firebase packaging branch,

64
00:03:44.092 --> 00:03:49.590
the big difference is it's got icons,
right?

65
00:03:49.590 --> 00:03:53.762
You'll notice that there's three different
files, because nothing is easy in life and

66
00:03:53.762 --> 00:03:55.998
the three OSes all use
different icon formats.

67
00:03:55.998 --> 00:04:00.447
So sorry, cool.

68
00:04:00.447 --> 00:04:04.808
One of the things I will say is
while Electron Packager on the tin,

69
00:04:04.808 --> 00:04:09.964
likes to say that you can build for
all three operating systems, effectively

70
00:04:09.964 --> 00:04:15.038
assume that you will need a Mac for
building for Mac OS, a Windows machine for

71
00:04:15.038 --> 00:04:20.470
building for Windows, and a Linux
machine for building for Linux, right?

72
00:04:20.470 --> 00:04:25.287
It will try to build all of those,
it'll try to use WINE on Linux or

73
00:04:25.287 --> 00:04:28.270
a Mac to build a Windows binary.

74
00:04:28.270 --> 00:04:31.280
You can just guess how that's gonna go for
you.

75
00:04:31.280 --> 00:04:34.100
Even Electron Forge,
they use Electron Packager under the hood.

76
00:04:34.100 --> 00:04:37.260
They're like, yeah, you can only build for
the OS you're currently running on.

77
00:04:37.260 --> 00:04:41.200
So let's just assume that we're gonna
write a few lines of configuration that

78
00:04:41.200 --> 00:04:43.740
seems like we could do
all of those things.

79
00:04:43.740 --> 00:04:48.220
Assume that you can only build on
the platform you're currently running on.

80
00:04:48.220 --> 00:04:54.540
So if I just ran Electron Packager,
it would actually as a build script,

81
00:04:54.540 --> 00:04:58.560
it would actually go ahead and
get me one for my architecture and OS.

82
00:04:58.560 --> 00:05:01.285
So most of the code we're going to be
doing right now is actually going to be in

83
00:05:01.285 --> 00:05:01.870
package JSON.

84
00:05:01.870 --> 00:05:04.940
Because who doesn't like some
good package JSON coding.

85
00:05:06.600 --> 00:05:11.570
So we've got the start and test.

86
00:05:11.570 --> 00:05:13.720
Let's do a build.

87
00:05:13.720 --> 00:05:16.000
I'm actually gonna make three.

88
00:05:16.000 --> 00:05:16.660
And so for

89
00:05:16.660 --> 00:05:20.690
whatever operating system you're on,
follow the one that best suits you.

90
00:05:20.690 --> 00:05:23.570
I'm gonna run the Mac one, but I will,

91
00:05:23.570 --> 00:05:27.620
cuz the only major difference
is the icons, right?

92
00:05:27.620 --> 00:05:30.490
So I'll actually write all three
with some copy and paste action.

93
00:05:30.490 --> 00:05:36.002
But you will likely for
following along, only need one of them.

94
00:05:36.002 --> 00:05:41.280
Do build-mac, build-win, build-linux, and

95
00:05:41.280 --> 00:05:47.047
then I'm gonna cheat just so
I don't have to type a lot,

96
00:05:47.047 --> 00:05:51.604
and I'm gonna give
myself a build which is,

97
00:05:53.269 --> 00:05:57.712
&gt;&gt; Steve Kinney: Going to be npm run

98
00:05:57.712 --> 00:06:01.273
build-mac.

99
00:06:01.273 --> 00:06:01.792
Cool.

100
00:06:05.961 --> 00:06:06.535
&gt;&gt; Steve Kinney: All right.

101
00:06:06.535 --> 00:06:11.579
That works, and now what we're
gonna want to do is go ahead and

102
00:06:11.579 --> 00:06:14.670
we'll do electron-packager.

103
00:06:14.670 --> 00:06:17.125
The current directory dot,
so the current directory.

104
00:06:21.107 --> 00:06:22.889
&gt;&gt; Steve Kinney: And
let's take a look at the docs.

105
00:06:25.634 --> 00:06:28.168
&gt;&gt; Steve Kinney: So a lot of it is
kind of in there for us, right.

106
00:06:28.168 --> 00:06:32.581
So we can have the source,
that's that dot that we did.

107
00:06:32.581 --> 00:06:38.229
The app name, these will all be kind of
like filled in automatically depending on,

108
00:06:38.229 --> 00:06:40.811
if you don't specify them directly,

109
00:06:40.811 --> 00:06:46.070
they will be the platform and
architecture that you're currently on.

110
00:06:46.070 --> 00:06:52.010
Cool, so let's go ahead and we'll

111
00:06:52.010 --> 00:06:58.671
say,
&gt;&gt; Steve Kinney: Gonna

112
00:06:58.671 --> 00:07:01.127
be a little bit of backslash
action here for the quotes.

113
00:07:03.521 --> 00:07:04.475
&gt;&gt; Steve Kinney: Build.

114
00:07:06.721 --> 00:07:08.310
&gt;&gt; Steve Kinney: So
that's gonna go into our build directory.

115
00:07:08.310 --> 00:07:10.454
And I'm also gonna do --overwrite.

116
00:07:10.454 --> 00:07:16.130
And that's just basically,
Electron Packager will throw an error,

117
00:07:16.130 --> 00:07:18.750
if there's already something
in that directory.

118
00:07:18.750 --> 00:07:20.800
We don't necessarily want that, so

119
00:07:20.800 --> 00:07:22.900
what we're gonna do is simply say,
overwrite it.

120
00:07:24.250 --> 00:07:25.613
So then I'll do an npm run build.

121
00:07:30.839 --> 00:07:32.793
&gt;&gt; Steve Kinney: And you can see,
all right, packaging for Darwin,

122
00:07:32.793 --> 00:07:33.829
which we learned was Mac.

123
00:07:33.829 --> 00:07:37.630
It's actually going to prune
all the dev dependencies.

124
00:07:37.630 --> 00:07:40.722
So if you're using babble, none of that
is going to be included in your bundle.

125
00:07:40.722 --> 00:07:44.282
It's gonna move stuff over, so
only the stuff that are direct dependency.

126
00:07:44.282 --> 00:07:47.700
So if there are things that are not needed
in the run time of your application that

127
00:07:47.700 --> 00:07:50.913
you're using for a build process,
like eslint rules and stuff like that,

128
00:07:50.913 --> 00:07:52.725
make sure those are in dev dependencies.

129
00:07:52.725 --> 00:07:55.592
Otherwise you are shipping
them to your users.

130
00:07:55.592 --> 00:07:56.309
Cool.

131
00:07:56.309 --> 00:08:01.720
And you can see wrote a new app
to build firedsale-darwin.x64.

132
00:08:01.720 --> 00:08:05.661
So I can go to build,
&gt;&gt; Steve Kinney: And

133
00:08:05.661 --> 00:08:10.180
see that this one,
the one from today is a lowercase one.

134
00:08:10.180 --> 00:08:18.050
It's got this lowercase firesale name and
it's still got the overall like electron.

135
00:08:18.050 --> 00:08:21.901
But I can double click it and
I do have an application and

136
00:08:21.901 --> 00:08:24.730
it doesn't say electron here.

137
00:08:24.730 --> 00:08:26.375
We can make this a little bit better.

138
00:08:28.999 --> 00:08:31.000
&gt;&gt; Steve Kinney: Go ahead,
I'm just gonna delete one.

139
00:08:31.000 --> 00:08:35.150
Which in here, there is one special field
that we can use on top of this main one,

140
00:08:35.150 --> 00:08:40.680
which is product name,
which we saw earlier.

141
00:08:40.680 --> 00:08:44.380
This one will give it the way
we really want it formatted.

142
00:08:44.380 --> 00:08:45.732
Cool, so I'll run that again.

143
00:08:53.388 --> 00:08:57.230
&gt;&gt; Steve Kinney: All right, there it is.

144
00:08:57.230 --> 00:08:58.710
Now we can see it's named appropriately.

145
00:09:00.420 --> 00:09:04.330
And go ahead, it's got the right,
everything is in place.

146
00:09:04.330 --> 00:09:07.120
It's still got this Electron icon.

147
00:09:08.460 --> 00:09:10.636
Cool, so we can actually fix that as well.

148
00:09:19.598 --> 00:09:21.873
&gt;&gt; Steve Kinney: We'll actually say,

149
00:09:28.113 --> 00:09:29.956
&gt;&gt; Steve Kinney: Back slash those.

150
00:09:35.231 --> 00:09:37.821
&gt;&gt; Steve Kinney: If I can
remember what it was.

151
00:09:44.431 --> 00:09:48.456
&gt;&gt; Steve Kinney: I think I need the ICNS.

152
00:09:55.716 --> 00:09:58.690
&gt;&gt; Steve Kinney: Cool, that file has
the retina ones and everything in it.

153
00:10:00.610 --> 00:10:02.254
All right, let's give that a shot.

154
00:10:16.388 --> 00:10:18.895
&gt;&gt; Steve Kinney: So you can see,
I've now got my custom icon.

155
00:10:23.710 --> 00:10:28.060
&gt;&gt; Steve Kinney: Go over here, you can see
that icon is over here in my dock, right?

156
00:10:28.060 --> 00:10:30.790
With Windows, I believe you want
the .ico file, and with Linux,

157
00:10:30.790 --> 00:10:32.790
you want the .png in there.

158
00:10:32.790 --> 00:10:35.760
And so you set those depending on
which operating system you're running.

159
00:10:35.760 --> 00:10:39.410
And so you should actually get
a pretty fully branded one as well.

