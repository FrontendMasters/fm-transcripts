WEBVTT

1
00:00:00.280 --> 00:00:03.584
&gt;&gt; Steve Kinney: I still have the problem
that none of this persists, and

2
00:00:03.584 --> 00:00:04.858
maybe that's okay.

3
00:00:04.858 --> 00:00:06.480
Maybe this is a temporary application.

4
00:00:06.480 --> 00:00:09.820
It's not supposed to
hold on to that stuff.

5
00:00:09.820 --> 00:00:14.010
But it also seems like a really great
excuse to talk about using native modules.

6
00:00:14.010 --> 00:00:16.850
So [LAUGH], here we are.

7
00:00:16.850 --> 00:00:20.190
So let's talk a little bit about
the state of native modules in

8
00:00:20.190 --> 00:00:21.950
Electron applications in general.

9
00:00:21.950 --> 00:00:25.490
And then we'll talk about a little
bit in specific with Electron-Forge.

10
00:00:25.490 --> 00:00:28.860
Because some of that is taken care for
us already.

11
00:00:28.860 --> 00:00:31.435
But you might have an Electron application
that you're working with that doesn't use

12
00:00:31.435 --> 00:00:33.040
Electron-Forge and stuff like that.

13
00:00:33.040 --> 00:00:37.380
So it's good to talk about how it works
and how to understand what's going on.

14
00:00:37.380 --> 00:00:38.450
All right, cool.

15
00:00:40.675 --> 00:00:42.410
Talk a little bit about,
we saw electron compile,

16
00:00:42.410 --> 00:00:47.450
and electron compile was a library
that let you transpile Babble and

17
00:00:47.450 --> 00:00:51.530
TypeScript and SASS and
stuff to JavaScript and CSS respectively.

18
00:00:51.530 --> 00:00:54.770
Electron-rebuild solves
a slightly different problem.

19
00:00:54.770 --> 00:00:59.240
The problem is the version
of Node on your system

20
00:00:59.240 --> 00:01:03.390
is different than the version of
Node Electron that you're using.

21
00:01:03.390 --> 00:01:07.980
With Electron, one of the great
things is that we are taking our

22
00:01:07.980 --> 00:01:11.970
own version of Chrome and our own version
of Node and sending it to our users.

23
00:01:11.970 --> 00:01:15.330
They don't even, like somebody who
downloads Slack does not need to have

24
00:01:15.330 --> 00:01:17.010
Node installed on their computer, right?

25
00:01:17.010 --> 00:01:20.900
There is a version of Node bundled
with the Slack application, right?

26
00:01:20.900 --> 00:01:22.340
And that is really great.

27
00:01:22.340 --> 00:01:26.450
The problem is, when you do an MPM
install, if it is a compiled module,

28
00:01:26.450 --> 00:01:30.420
right, most modules are compiled
against a given version of V8 for

29
00:01:30.420 --> 00:01:32.090
a given architecture, right?

30
00:01:32.090 --> 00:01:34.940
But more importantly the given
version of V8, which is if you've ever

31
00:01:34.940 --> 00:01:37.830
like you have maybe,
Node Sass is usually the one bites me.

32
00:01:37.830 --> 00:01:42.829
You do an NPM install, then you NVM
to a different version of Node.

33
00:01:42.829 --> 00:01:47.078
You start up the application,
it blows up cuz Node Sass is very angry,

34
00:01:47.078 --> 00:01:51.120
cuz it's compiled for Node V8,
not Node V9, so on and so forth.

35
00:01:53.510 --> 00:01:55.850
Yeah, if you have a complied module
compiled against the wrong version of V8,

36
00:01:55.850 --> 00:01:56.740
it doesn't work.

37
00:01:57.780 --> 00:02:00.440
So this is a problem,
because if you do an NPM install,

38
00:02:00.440 --> 00:02:02.550
it's going to be the same
as the one on your system.

39
00:02:03.880 --> 00:02:08.090
Which would work if the version of
Electron that you happen to be using

40
00:02:08.090 --> 00:02:13.150
has the exact same version of Node as the
version of Node running on your system.

41
00:02:13.150 --> 00:02:14.238
Chances of that happening?

42
00:02:14.238 --> 00:02:17.676
Not great.

43
00:02:17.676 --> 00:02:19.980
So, that's our problem.

44
00:02:21.690 --> 00:02:27.100
The solution is we use electron-rebuild
which is over on line 19 in this

45
00:02:27.100 --> 00:02:29.950
package JSON as a post install step,
right?

46
00:02:29.950 --> 00:02:32.630
So after we do an NPM install for
whatever it is.

47
00:02:32.630 --> 00:02:33.988
Whether it's Node Sass,

48
00:02:33.988 --> 00:02:37.970
whether it's the SQLite driver that
we're gonna be using in a second.

49
00:02:37.970 --> 00:02:42.060
Whatever it is, go ahead and
recompile it for

50
00:02:42.060 --> 00:02:45.050
the version of Electron cuz that's
where we're gonna be using it.

51
00:02:45.050 --> 00:02:47.640
So what it does is, yeah,
you go ahead and install everything and

52
00:02:47.640 --> 00:02:49.870
then it actually builds
it against Electron.

53
00:02:51.210 --> 00:02:54.230
So that solves our problem of having the
version that we installed different from

54
00:02:54.230 --> 00:02:55.110
the version the Electron needs.

55
00:02:55.110 --> 00:02:58.640
It just gives us the version
that Electron needs.

56
00:02:58.640 --> 00:03:02.230
This is so useful and

57
00:03:02.230 --> 00:03:07.760
such a good idea that it is built
into Electron Forge by default.

58
00:03:07.760 --> 00:03:10.890
Right, and so if you watch those
little check boxes, as we started,

59
00:03:10.890 --> 00:03:12.700
it was like checking
native dependencies or

60
00:03:12.700 --> 00:03:16.980
something along those lines, it was doing
that when we started up the application.

61
00:03:16.980 --> 00:03:20.980
This is generally speaking a PSA
that I'm doing right now to

62
00:03:20.980 --> 00:03:25.180
basically just make the point of,
if you're not using Electron Forge,

63
00:03:25.180 --> 00:03:29.220
and you're like I watched this workshop,
I inherited this app, or I have an app,

64
00:03:29.220 --> 00:03:31.190
I'm just choosing not to use it, whatever.

65
00:03:31.190 --> 00:03:36.730
And now I went to go use SQLite, cuz Steve
told me I could, and everything blows up.

66
00:03:36.730 --> 00:03:40.220
This is the very useful PSA that I am

67
00:03:41.800 --> 00:03:44.920
cleared of all responsibility for
that, so that's better.

