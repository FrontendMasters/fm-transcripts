WEBVTT

1
00:00:00.130 --> 00:00:05.590
&gt;&gt; Steve Kinney: So in the event that your
epic test suite doesn't totally work,

2
00:00:05.590 --> 00:00:09.100
or doesn't catch something,
we want to know where.

3
00:00:10.330 --> 00:00:14.110
On one hand, Electron's great, because
you're shipping a version of Chrome, and

4
00:00:14.110 --> 00:00:17.200
a version of Node, which is better
than all the browsers out there and

5
00:00:17.200 --> 00:00:17.980
all the intricacies.

6
00:00:17.980 --> 00:00:23.130
On the other hand this is a desktop
application that you are distributing.

7
00:00:23.130 --> 00:00:26.490
It's not just like deploy a new version
of your client-side code and wait for

8
00:00:26.490 --> 00:00:28.250
the cdn cache to run out.

9
00:00:28.250 --> 00:00:32.860
It is very much this is an application,
like let's hope it

10
00:00:32.860 --> 00:00:37.310
works on whatever operating system
with whatever other things installed.

11
00:00:37.310 --> 00:00:39.360
So you might wanna collect crash reports.

12
00:00:40.360 --> 00:00:44.040
Collecting crash reports in
Electron is deceptively easy.

13
00:00:45.590 --> 00:00:50.010
There is a built-in mechanism for
doing that, right?

14
00:00:50.010 --> 00:00:54.740
How you collect those is gonna be
very specific to where you work.

15
00:00:54.740 --> 00:01:00.111
We're gonna make a very simple express
server that can collect the crash reports.

16
00:01:00.111 --> 00:01:02.981
But for
wherever you work it might go into,

17
00:01:02.981 --> 00:01:08.190
you could be using some tracking software
for this stuff, so on and so forth.

18
00:01:08.190 --> 00:01:12.090
I'm not gonna make any assumptions about
what you use and what you choose to use.

19
00:01:12.090 --> 00:01:16.170
I'm going to make a very simple server to
collect the crash reports that just writes

20
00:01:16.170 --> 00:01:19.440
them to the file system or
console logs them, right?

21
00:01:19.440 --> 00:01:21.830
Cuz we do need a server
that can go ahead and

22
00:01:21.830 --> 00:01:26.350
receive them in the event
that it does happen, right?

23
00:01:26.350 --> 00:01:27.880
So we'll spin that up.

24
00:01:27.880 --> 00:01:29.260
Let's take a look at the code real quick.

25
00:01:30.720 --> 00:01:31.614
I'll spell code correctly.

26
00:01:36.858 --> 00:01:38.371
&gt;&gt; Steve Kinney: So this is my server,

27
00:01:38.371 --> 00:01:44.084
it looks more complicated than it is,
&gt;&gt; Steve Kinney: This

28
00:01:44.084 --> 00:01:49.453
is basically an express server that
can take multi-part requests and

29
00:01:49.453 --> 00:01:52.920
it's going to write them
to the file system.

30
00:01:52.920 --> 00:01:57.770
So I've got one path for
where I'm gonna store crashes.

31
00:01:57.770 --> 00:02:01.990
I've got another path where I'm
gonna store uncaught exceptions.

32
00:02:01.990 --> 00:02:09.790
And basically it's gonna use this mini
dump file which is kind of a pain to read.

33
00:02:09.790 --> 00:02:14.600
So basically you need to have a server
that conforms to what the built-in

34
00:02:14.600 --> 00:02:17.280
crash reporter is going to send.

35
00:02:17.280 --> 00:02:19.460
So here I have,
it's gonna send a post request.

36
00:02:19.460 --> 00:02:21.090
I'm gonna let it send to this.

37
00:02:21.090 --> 00:02:23.130
Or it's gonna send to this crashreports.

38
00:02:23.130 --> 00:02:26.830
And when that happens,
I'm gonna grab the request.body.

39
00:02:26.830 --> 00:02:32.170
I'm gonna grab the filename that was
sent along with it in that mini-dump.

40
00:02:32.170 --> 00:02:35.930
And I'm going to create a new JSON file.

41
00:02:35.930 --> 00:02:39.470
And I'm gonna write to it with
the crash report itself, right?

42
00:02:39.470 --> 00:02:44.720
And so as long as you have a server that
can accept POST requests with attachments

43
00:02:44.720 --> 00:02:51.200
at a /crashreports end point you're
ready for crash reports in Electron.

44
00:02:51.200 --> 00:02:54.360
I also have a fun one here for
uncaught exceptions.

45
00:02:54.360 --> 00:02:55.950
This is not built into electron.

46
00:02:55.950 --> 00:02:58.360
This is one we're gonna
do just to find some.

47
00:02:58.360 --> 00:03:02.350
So let's talk about the difference between
a crash and an uncaught exception.

48
00:03:02.350 --> 00:03:05.942
A crash is like it literally melted down,
right?

49
00:03:05.942 --> 00:03:09.372
it completely, it crashed in a big way.

50
00:03:09.372 --> 00:03:15.376
Uncaught exception is like a JavaScript
error was thrown and you didn't catch it.

51
00:03:15.376 --> 00:03:17.200
Different, right?

52
00:03:17.200 --> 00:03:24.570
The built-in crash reporter is only
going to send you complete meltdowns.

53
00:03:24.570 --> 00:03:30.230
It is not going to send you the,
two string is not defined right?

54
00:03:30.230 --> 00:03:33.000
And so
we've kinda built this to take both.

55
00:03:33.000 --> 00:03:36.360
This is gonna be our own bespoke thing,
and

56
00:03:36.360 --> 00:03:39.130
the crash report Is
going to be very simple.

57
00:03:39.130 --> 00:03:42.560
So let me go ahead and start this up.

58
00:03:45.000 --> 00:03:48.180
And so
crash report server running on Port 3000.

59
00:03:48.180 --> 00:03:51.513
And we'll go ahead,
let me just check out master on this.

60
00:03:57.626 --> 00:04:01.090
&gt;&gt; Steve Kinney: As you can see there is
a crash reporting branch if you wanna.

61
00:04:05.731 --> 00:04:12.790
&gt;&gt; Steve Kinney: Cool and so
here we've got a main process.

62
00:04:12.790 --> 00:04:17.513
This is a version of Fire Sale
that we can take a look at,

63
00:04:17.513 --> 00:04:22.150
and what we are going to do is
we are making a file called

64
00:04:24.082 --> 00:04:26.376
&gt;&gt; Steve Kinney: Crash-reporter.js.

65
00:04:26.376 --> 00:04:28.310
It doesn't matter what you call it.

66
00:04:29.570 --> 00:04:33.610
We will require, no,
we don't need to do it just yet.

67
00:04:33.610 --> 00:04:37.800
So we've got the crash reporter, we want
to set up where we want to send these to.

68
00:04:37.800 --> 00:04:39.230
So I'll just store that in a variable.

69
00:04:39.230 --> 00:04:40.850
Now, ideally, you should have
some server on the internet.

70
00:04:43.970 --> 00:04:46.800
&gt;&gt; Steve Kinney: But we're not going to.

71
00:04:46.800 --> 00:04:48.126
We're just going to run locally.

72
00:04:48.126 --> 00:04:51.480
Cuz crash reporter running on just local
hosts are not going to collect too many

73
00:04:51.480 --> 00:04:52.890
crash reports.

74
00:04:52.890 --> 00:04:55.950
But this will be one so
we can kind of see it in action and

75
00:04:55.950 --> 00:04:56.970
we'll create a configuration.

76
00:04:59.440 --> 00:05:02.720
Cool, and so this is basically some of
the information that we want to include in

77
00:05:02.720 --> 00:05:03.390
the crash report.

78
00:05:03.390 --> 00:05:08.737
So let's say product name
&gt;&gt; Steve Kinney: Is Fire Sale,

79
00:05:08.737 --> 00:05:11.920
the company name.

80
00:05:11.920 --> 00:05:13.240
Let's blame other people for our errors.

81
00:05:19.186 --> 00:05:23.150
&gt;&gt; Steve Kinney: Cool, and
where to actually submit it to.

82
00:05:23.150 --> 00:05:26.360
So you saw we made that crash
reports endpoint before.

83
00:05:26.360 --> 00:05:29.320
This can really be anything you want,
but I'll say host.

84
00:05:34.900 --> 00:05:38.591
&gt;&gt; Steve Kinney: Put the trailing slash,
let's just do trailing slash here.

85
00:05:41.101 --> 00:05:46.612
&gt;&gt; Steve Kinney: /crashreports and
then we'll

86
00:05:46.612 --> 00:05:52.750
do uploadToServer: true, cool.

87
00:05:52.750 --> 00:05:56.302
And then really all we
need to do after that is

88
00:05:56.302 --> 00:06:00.820
crashReporter.start with
that (configuration).

89
00:06:03.840 --> 00:06:07.452
&gt;&gt; Steve Kinney: Now this file, all we'll
simply do is require it in main.js cause

90
00:06:07.452 --> 00:06:10.430
this will run the file and
start up the crash reporter.

91
00:06:11.520 --> 00:06:13.574
So we can go back in here and we say.

92
00:06:16.660 --> 00:06:22.028
&gt;&gt; Steve Kinney: Require
&gt;&gt; Steve Kinney: You might decide

93
00:06:22.028 --> 00:06:25.340
to say like okay only if you're running
in production or something like that.

94
00:06:25.340 --> 00:06:30.790
But we're not so we're just
going to run it right like this.

95
00:06:31.940 --> 00:06:37.860
And so let's go ahead and
I will start up this application.

96
00:06:40.950 --> 00:06:42.010
The server is still running.

97
00:06:43.970 --> 00:06:50.220
And the big question is,
how do you make your app crash?

98
00:06:50.220 --> 00:06:54.860
Right, cuz that's kind of important for
testing out a crash reporter.

99
00:06:54.860 --> 00:06:57.790
So we can say process.crash.

100
00:07:01.364 --> 00:07:03.310
&gt;&gt; Steve Kinney: Yeah,
cuz it took the entire app down.

101
00:07:06.080 --> 00:07:10.770
And hopefully,
let's go to the other one, no.

102
00:07:15.779 --> 00:07:24.470
&gt;&gt; Steve Kinney: Let me play with this one
second to figure out why its not working,

103
00:07:24.470 --> 00:07:28.684
and then we will, there it is.

104
00:07:28.684 --> 00:07:33.000
All right, let's make believe
that first part didn't happen.

105
00:07:33.000 --> 00:07:34.460
Mark loves it when I do that.

106
00:07:34.460 --> 00:07:36.762
That's his favorite.

107
00:07:36.762 --> 00:07:42.027
[LAUGH]
&gt;&gt; Steve Kinney: Okay,

108
00:07:42.027 --> 00:07:47.952
so we had one small issue which is
originally I got very secure and

109
00:07:47.952 --> 00:07:50.710
typed https instead of http.

110
00:07:50.710 --> 00:07:55.970
The problem with the crash reports is
that when it fails your app has crashed.

111
00:07:55.970 --> 00:07:59.760
So there's not really a great console
log that you can throw in there.

112
00:07:59.760 --> 00:08:02.370
So I took off the https just for

113
00:08:02.370 --> 00:08:05.570
http in this case,
cuz it's just running on localhost.

114
00:08:07.040 --> 00:08:09.560
And we fire up the application now.

115
00:08:14.490 --> 00:08:16.860
&gt;&gt; Steve Kinney: We can go ahead and
open up those developer tools.

116
00:08:22.070 --> 00:08:22.990
&gt;&gt; Steve Kinney: We'll crash the process.

117
00:08:25.886 --> 00:08:30.420
&gt;&gt; Steve Kinney: Oops, it's probably
important to have that server running.

118
00:08:33.230 --> 00:08:39.800
&gt;&gt; Steve Kinney: I'll crash
it one more time for our fun.

119
00:08:44.070 --> 00:08:48.007
&gt;&gt; Steve Kinney: Cool, you can see
that it received a crash report and

120
00:08:48.007 --> 00:08:52.560
it just wrote that one over
into the crashes folder.

121
00:08:52.560 --> 00:08:57.560
You can see that I have a JSON file
telling me about the crash report.

122
00:08:57.560 --> 00:09:02.900
And then I also have this mini dump file,
which is big and gnarly as well.

123
00:09:02.900 --> 00:09:05.170
You need custom software to open it.

124
00:09:05.170 --> 00:09:06.900
The crash reports in
my experience even for

125
00:09:06.900 --> 00:09:10.900
the applications I've shipped, is I don't
get necessarily a ton of crash reports.

126
00:09:10.900 --> 00:09:13.530
What I get It's stuff
like uncaught exceptions.

127
00:09:13.530 --> 00:09:16.320
And I wanna know about those more.

128
00:09:16.320 --> 00:09:19.540
If this application is truly crashing and

129
00:09:19.540 --> 00:09:23.250
burning on a particular operating system,
that's interesting to know.

130
00:09:23.250 --> 00:09:28.330
But generally speaking the level
of bugs that I'm causing

131
00:09:28.330 --> 00:09:31.634
are more like the level of
bugs while I was live coding.

132
00:09:31.634 --> 00:09:34.330
I misspelled a variable or
something along those lines.

133
00:09:34.330 --> 00:09:38.300
There are the ones that didn't generate
any errors, those are the worst kind.

134
00:09:38.300 --> 00:09:41.650
But for the ones that do, it'd be cool
if this error is completely uncaught.

135
00:09:41.650 --> 00:09:42.540
I'd like to know about it.

