WEBVTT

1
00:00:00.012 --> 00:00:02.672
&gt;&gt; Steve Kinney: All right,
let's talk a little bit about Electron.

2
00:00:02.672 --> 00:00:08.315
First, my name is Steve and
I am an engineer at SendGrid,

3
00:00:08.315 --> 00:00:14.440
I work on a large React application for
creating HTML emails.

4
00:00:14.440 --> 00:00:18.307
So I basically use modern day JavaScript
frameworks to write HTML from 1995.

5
00:00:18.307 --> 00:00:23.440
I know way too much about
Outlook conditional tags.

6
00:00:23.440 --> 00:00:26.963
I also wrote a book called Electron
In Action, which is super fitting,

7
00:00:26.963 --> 00:00:28.971
given what we're talking about today.

8
00:00:28.971 --> 00:00:32.646
I think last time we did this,
it was a very early draft of it.

9
00:00:32.646 --> 00:00:36.555
But now they're our physical paper copies
that are in a box in my house that I can't

10
00:00:36.555 --> 00:00:37.500
get rid of.

11
00:00:37.500 --> 00:00:40.098
And if I didn't just bring
a carry-on here today,

12
00:00:40.098 --> 00:00:43.550
I would have brought them all with
me to disperse them, but well.

13
00:00:43.550 --> 00:00:46.625
Let's talk a little bit
about what Electron is,

14
00:00:46.625 --> 00:00:51.810
since we're going to spend the next
six to eight hours talking about it.

15
00:00:51.810 --> 00:00:56.136
The kind of high level
is Electron is kind of

16
00:00:56.136 --> 00:01:00.950
a marriage between Chrome and
NodeJS, right?

17
00:01:00.950 --> 00:01:05.530
Chrome, obviously we think about
the browser, we think about HTML and

18
00:01:05.530 --> 00:01:07.910
CSS and the DOM and all those things.

19
00:01:07.910 --> 00:01:11.369
So from Chrome, we get HTML support,
GPU acceleration,

20
00:01:11.369 --> 00:01:15.756
because Node being a server side
framework, not so much on the graphics.

21
00:01:15.756 --> 00:01:20.160
We get Blink, the rendering engine,
and V8, and then from Node,

22
00:01:20.160 --> 00:01:23.497
we get a whole bunch of
stuff the browser can't do.

23
00:01:23.497 --> 00:01:25.433
We get Filesystem access,

24
00:01:25.433 --> 00:01:29.915
the ability to use Native modules
that are compiled C++ or C.

25
00:01:29.915 --> 00:01:32.878
So together, we can do a whole bunch
of really interesting things and

26
00:01:32.878 --> 00:01:35.956
create applications that you couldn't
create in either one, right?

27
00:01:35.956 --> 00:01:40.276
In Node, you can't create any kind of
user interface for your application.

28
00:01:40.276 --> 00:01:44.928
And in Chrome, you're in this very,
very safe browser sandbox,

29
00:01:44.928 --> 00:01:49.150
so both of those have their
very necessary limitations.

30
00:01:49.150 --> 00:01:51.049
Electron kind of combines the two.

31
00:01:51.049 --> 00:01:55.247
So we can use both and create real,
full desktop applications that can do all

32
00:01:55.247 --> 00:01:58.710
the stuff that we expect
desktop applications to do.

33
00:01:58.710 --> 00:02:02.330
And then also have really great UIs.

34
00:02:02.330 --> 00:02:05.978
Using the technologies that we
already know how to use for

35
00:02:05.978 --> 00:02:09.023
building sophisticated
web user interfaces.

36
00:02:09.023 --> 00:02:13.039
Awesome, so,
there's also some other advantages,

37
00:02:13.039 --> 00:02:18.205
in the browser, we have a problem where,
it's not really a problem.

38
00:02:18.205 --> 00:02:21.391
It's really for everyone's benefit,
that you can't, just like,

39
00:02:21.391 --> 00:02:23.503
willy nilly call any server you want,
right?

40
00:02:23.503 --> 00:02:24.394
We have cores and

41
00:02:24.394 --> 00:02:28.860
other security policies in place that
stop us from calling third-party servers.

42
00:02:28.860 --> 00:02:33.818
So if you wanted to write
a client-side Twitter client, right?

43
00:02:33.818 --> 00:02:38.337
You couldn't just hit the Twitter API
directly, right, that's not allowed.

44
00:02:38.337 --> 00:02:41.235
You'd have to talk to your own
server on the back end and

45
00:02:41.235 --> 00:02:44.400
then from there,
proxy those requests to the Twitter API.

46
00:02:44.400 --> 00:02:48.293
Get the results back from the Twitter API,
send them back to the client, so on and

47
00:02:48.293 --> 00:02:48.821
so forth.

48
00:02:48.821 --> 00:02:52.392
So you'd have to have both two
applications, a client side application,

49
00:02:52.392 --> 00:02:54.042
and a server-side application.

50
00:02:54.042 --> 00:02:57.117
With Electron applications,
they are effectively both together, so

51
00:02:57.117 --> 00:02:59.332
you can actually just call
whatever APIs you want.

52
00:02:59.332 --> 00:03:00.522
So it's stuff like cores and

53
00:03:00.522 --> 00:03:03.505
other restrictions like that don't
exist in Electron applications.

54
00:03:03.505 --> 00:03:07.808
You can just call it directly, which
really makes a lot of stuff a lot easier.

55
00:03:07.808 --> 00:03:12.684
With client side applications, we're very
used to using something like Webpack, or

56
00:03:12.684 --> 00:03:14.169
Rollup, or Browserify.

57
00:03:14.169 --> 00:03:18.327
To kind of put in a module system,
because CS module still hasn't really,

58
00:03:18.327 --> 00:03:20.330
officially shipped.

59
00:03:20.330 --> 00:03:24.785
And in Node applications,
we can use require(...), again,

60
00:03:24.785 --> 00:03:28.707
Electron is half Chrome,
half Node, best of both worlds.

61
00:03:28.707 --> 00:03:32.070
So there's no need to wire
up a whole big build system.

62
00:03:32.070 --> 00:03:34.376
We'll actually kind of use transpilers and

63
00:03:34.376 --> 00:03:36.939
a very subtle build system
later in this course.

64
00:03:36.939 --> 00:03:38.875
But it will be so subtle and

65
00:03:38.875 --> 00:03:44.421
easy that you will barely notice that
we're using a build system, right?

66
00:03:44.421 --> 00:03:46.260
Which will be really cool.

67
00:03:49.760 --> 00:03:52.889
&gt;&gt; Steve Kinney: So you can do a bunch
of things, so you can use require.

68
00:03:52.889 --> 00:03:56.355
In Node, we're used to being able to pull
in some of the Node Native modules like

69
00:03:56.355 --> 00:03:58.138
reading and writing to the Filesystem.

70
00:03:58.138 --> 00:04:03.503
In the browser, like I said before, we'd
use something like Webpack or Browserify.

71
00:04:03.503 --> 00:04:06.882
Or something along those lines,
to create one just giant JavaScript file.

72
00:04:06.882 --> 00:04:11.760
So we'd break stuff up in development, but
we'd have to have basically shipped one.

73
00:04:11.760 --> 00:04:14.547
Or if we get into code splitting and
lazy loading on the client,

74
00:04:14.547 --> 00:04:17.872
many JavaScript files that are loaded
synchronously, but effectively.

75
00:04:17.872 --> 00:04:22.660
Kind of putting it all together
into one or more files.

76
00:04:22.660 --> 00:04:23.375
In Electron,

77
00:04:23.375 --> 00:04:27.313
we can actually just use require, with
the common JS module system from Node.

78
00:04:27.313 --> 00:04:30.040
Even when we're writing
the user interface part.

79
00:04:30.040 --> 00:04:33.455
So we can bring in anything
from the Node standard library,

80
00:04:33.455 --> 00:04:36.338
we can bring in anything from NPM as well,
right?

81
00:04:36.338 --> 00:04:39.794
Even, again, like database drivers,
anything along those lines,

82
00:04:39.794 --> 00:04:41.000
are all fair game.

83
00:04:41.000 --> 00:04:43.862
Even if you're in a context where you
think you're writing browser code,

84
00:04:43.862 --> 00:04:44.733
you can still call it.

85
00:04:44.733 --> 00:04:46.640
And we'll do that later on
in this course as well.

86
00:04:48.058 --> 00:04:52.049
&gt;&gt; Steve Kinney: And so yeah, all sorts of
modules you can just pull them right in.

87
00:04:52.049 --> 00:04:55.641
Whether you're in more of a server-like
environment or a client-like environment,

88
00:04:55.641 --> 00:04:57.880
and we'll talk about those
two processes in a second.

