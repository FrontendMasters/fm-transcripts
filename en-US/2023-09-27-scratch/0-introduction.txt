[00:00:00]
>> So we're gonna learn how to code today using something called Scratch. Scratch is a project out of MIT and it is effectively, it's a programming language, but for the adults viewing, maybe not the same syntax that you're used to seeing. And yet a whole bunch of things that, will strike you as familiar.

[00:00:24]
Some of them I'll call out, some of them I won't, some you'll just suddenly know. It's got a lot of the kind of same principles but instead of having to like remember a bunch of squirrely syntax, you can snap together the pieces of your code like Lego blocks, I think there's a fair metaphor.

[00:00:40]
And begin to make all sorts of fun little things like games for example, at one point towards the end we'll look at making snake. Which is slightly trickier than it seems but we'll be ready by the end. Here's hoping, different kind of games. You could also do stuff like making interactive stories where it follows the script by kinda running through, like do this and then move this thing there, and then do the other things.

[00:01:05]
You can make an entire play if you want, instead of a game. And do interactive storytelling or something where maybe they choose an option and different things happen along those lines. You can also use it to make art, right? And so this is just simply making various different polygons until I run out of room.

[00:01:21]
I think we get to like a 20 sided polygon in this one. And so there's all sorts of different things you can do. A lot of what we'll look at today is some of the different kind of making game mechanics that as well as making some art as well.

[00:01:33]
And we'll kind of see all the steps kind of build up. And the idea is that we'll have a bunch of the fundamentals in place. And then towards the end, you should be able to kind of have a bunch of ideas and go forth to make a bunch of cool stuff that we'll all enjoy at a later date.

[00:01:49]
The one thing that I will say now, and I will probably repeat it about 15,000 times is like there's good news and bad news about computers. At the time of this workshop, computers do not think on their own, that could change at any given moment. But at this moment, computers don't think on their own.

[00:02:06]
Which means when your game or your art project or whatever, it's not behaving as expected, computers will always do what you tell them to do. This may not always be what you want them to do, but they're always gonna do what the code says to do, right? Sometimes that can be frustrating when you don't know exactly what you told them to do that was wrong.

[00:02:29]
But normally they're not acting on their own, if your games like network is something that you kind of have to sit down and solve for. I say that because at one point, I will forget that, we all forget that when we think it's the computer that was wrong, not me.

[00:02:43]
There's this various thing like when you're teaching programming, where it's like you ask everyone to write down the instructions for make a peanut butter and jelly sandwich, which, I'm not doing here for reasons. But they say, put the peanut butter on the bread. You take the jar of peanut butter, put it on the loaf of bread, right?

[00:03:02]
There's a bunch of series of things of how this can go entirely wrong to kind of teach that no, the computer will literally do what you tell it to do. It's not gonna assume that you meant this or figure out and take a context clue or something along those lines.

[00:03:16]
And that's, I think, an important thing to remember, as we kind of jump into this and we're about to jump into this. But keep that in mind as we go along. If something's not behaving properly, it's time to take a pause, take a deep breath, look at it again.

[00:03:31]
One of the greatest things I ever learned when I was first starting out was at the time my son was like a newborn or whatever, and I had this job where I had to go home, right? And sometimes I would sit in front of the computer and be like, this isn't working.

[00:03:44]
Computers are terrible, they were possibly a bad idea, and I would be frustrated, frustrated, frustrated, but I have to go home at some point at around five now because I was a dad. And the act of walking home, and getting away from the computer, and just thinking about the problem, I go, and then it would solve for it.

[00:04:01]
So sometimes there's a bunch of very human strategies for working with computers like taking a break, taking a deep breath, stopping and thinking for a moment because they will just run through the thing as you said they won't. Sometimes you'll get a little helpful like it'll blow up in a way.

[00:04:15]
The best possible thing when something's not doing what you want is that it does blow up because at least there's an error message. So the worst is when it's just subtly not doing what you want. In that art example you saw before, at one point I had a setup where after 10 it was broken.

[00:04:29]
What I forgot was it was hitting the top and bouncing off, but it took me a good 10 minutes to realize the error of my ways and just move it down. Little stuff like that will be the reason why stuff doesn't work so sometimes stopping and thinking, super important.

[00:04:43]
Everything we're gonna do today. You don't need to necessarily have this open at this moment, but all the notes that I'm going to kind of like, that I have for everything I'm saying is here with fun little pictures. I'll shows you, in a given point. So if you, there's something that isn't on my screen at a given moment, you can see that for the most part, I've tried to break this out into steps.

[00:05:06]
So at a given section, if there's something that you need, you can kind of see roughly where I am. Now, granted, this is interactive and we might get a great question and go off on a whim so I might deviate a little bit. But generally speaking a lot of the immediate steps and in a lot of cases there are built versions of different things you can kind of take a look at as well.

[00:05:30]
With that, what we're gonna do is just kind of just look and get a tour of our little Scratch editor in this case.

