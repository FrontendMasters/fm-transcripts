WEBVTT

1
00:00:00.494 --> 00:00:05.881
&gt;&gt; Mike: Mixins, which can be thought of
as abstract classes, this is a pattern for

2
00:00:05.881 --> 00:00:10.820
potentially decorating classes
with additional behavior.

3
00:00:10.820 --> 00:00:15.975
And this can lead to complexity,
which can lead to trouble, but

4
00:00:15.975 --> 00:00:21.430
I just wanted to point out that
this pattern exists, mixins exist.

5
00:00:21.430 --> 00:00:27.850
And what we have here is
a function called AsJSON.

6
00:00:27.850 --> 00:00:30.704
It takes it as an argument something, and

7
00:00:30.704 --> 00:00:34.626
what it returns is a subclass
of that something, right?

8
00:00:34.626 --> 00:00:37.870
So we basically, we pass in a type.

9
00:00:37.870 --> 00:00:42.867
And what we get is a new type that
extends from whatever we passed in,

10
00:00:42.867 --> 00:00:45.770
but this has an AsJSON method, right?

11
00:00:45.770 --> 00:00:50.483
And so, then down below,
we can use this mixin by basically saying,

12
00:00:50.483 --> 00:00:53.675
this person extends
the regular object type.

13
00:00:53.675 --> 00:00:59.278
Decorated by this AsJSON thing,
right, which, of course,

14
00:00:59.278 --> 00:01:04.797
means we're really getting
class extends object, right?

15
00:01:04.797 --> 00:01:07.430
We're getting a sub-class of object.

16
00:01:07.430 --> 00:01:11.376
So I just want you to know that class,
like class expressions and

17
00:01:11.376 --> 00:01:15.340
functions can be mixed together
to create something like this.

18
00:01:15.340 --> 00:01:18.240
So just be careful with
this kind of thing.

19
00:01:18.240 --> 00:01:21.682
Because you do have to be aware
of any potential collisions

20
00:01:21.682 --> 00:01:25.126
between different things that
are extended on top of other

21
00:01:25.126 --> 00:01:34.148
classes.
&gt;&gt; Mike: Okay,

22
00:01:34.148 --> 00:01:37.990
so now we are back in the TypeScript mode,
so we are looping back.

23
00:01:37.990 --> 00:01:41.009
One thing that we are going
to see is obvious here.

24
00:01:41.009 --> 00:01:44.966
And I already kind of showed
you this inadvertently as I was

25
00:01:44.966 --> 00:01:47.650
hacking around with the static stuff.

26
00:01:48.820 --> 00:01:53.479
We need to define the shape of this
upfront, the shape of this object upfront.

27
00:01:53.479 --> 00:01:59.650
So classes, just like interfaces, need
to have a very explicitly defined shape.

28
00:02:01.450 --> 00:02:04.582
So it starts to look a little bit
repetitive but looking at this,

29
00:02:04.582 --> 00:02:07.259
we can see, okay, car has a make,
model, and a year.

30
00:02:07.259 --> 00:02:11.620
And then we take these three arguments
in our constructor and we type them.

31
00:02:11.620 --> 00:02:16.479
And then we assign those to our member
data inside the constructor and

32
00:02:16.479 --> 00:02:19.431
then we can get a car
that looks like this.

33
00:02:19.431 --> 00:02:23.053
So just make sure that you,
in particular, type,

34
00:02:23.053 --> 00:02:27.027
you can let your editor give
you appropriate feedback.

35
00:02:27.027 --> 00:02:29.322
But you'll find in most cases,

36
00:02:29.322 --> 00:02:34.945
you have to type arguments that are passed
in and member function in the class.

37
00:02:34.945 --> 00:02:39.618
Just because, you have to know what
can be passed into the constructor.

38
00:02:39.618 --> 00:02:46.253
And then ensure that those are values
that can be assigned to the member data.

39
00:02:46.253 --> 00:02:49.609
Just follow the guidance
of the language service and

40
00:02:49.609 --> 00:02:52.357
you will get the hang of it.
&gt;&gt; Mike: But

41
00:02:52.357 --> 00:02:54.607
then we can create a new car like this.

