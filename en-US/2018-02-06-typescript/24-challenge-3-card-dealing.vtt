WEBVTT

1
00:00:00.008 --> 00:00:03.570
&gt;&gt; Mike North: Let's jump in to
the third exercise of the day.

2
00:00:03.570 --> 00:00:06.720
So our task here is to
build a card dealer.

3
00:00:06.720 --> 00:00:09.340
We gonna build a card dealing program.

4
00:00:09.340 --> 00:00:14.361
We're gonna using an enum to define suit,

5
00:00:14.361 --> 00:00:19.666
and likely an enum to
define the card number.

6
00:00:19.666 --> 00:00:24.686
Where ace is zero, got ace, two,
three, four, five, six, seven,

7
00:00:24.686 --> 00:00:29.400
eight, nine, ten, jack, queen,
king, but ace is the lowest.

8
00:00:31.070 --> 00:00:36.789
So cards should be represented as a tuple
of size two with the suit first and

9
00:00:36.789 --> 00:00:38.738
the card number second.

10
00:00:38.738 --> 00:00:43.440
For example 0, 6 is seven of clubs.

11
00:00:44.880 --> 00:00:51.400
The order of the suits, just so
you see there, is alphabetical.

12
00:00:51.400 --> 00:00:53.960
So don't make that mistake or
the test will fail.

13
00:00:53.960 --> 00:00:58.320
Alphabetical, which is,
that's not the right order is it?

14
00:00:58.320 --> 00:00:59.120
Let me fix that.

15
00:00:59.120 --> 00:01:00.260
Sorry y'all.

16
00:01:00.260 --> 00:01:00.760
There we go.

17
00:01:02.850 --> 00:01:04.700
So that's how I was getting
five of a kind earlier.

18
00:01:06.140 --> 00:01:08.880
So each dealer should have
its own deck of cards,

19
00:01:08.880 --> 00:01:12.700
by that you should look at the dealer
class, it should have member data, right?

20
00:01:12.700 --> 00:01:17.970
It should have an instance property
where the cards are stored.

21
00:01:17.970 --> 00:01:22.980
I've given you a shuffle method that you
can use to shuffle an array in place.

22
00:01:22.980 --> 00:01:24.360
So you can shuffle your cards.

23
00:01:25.420 --> 00:01:28.580
And your job is to pass all
currently failing tests.

24
00:01:28.580 --> 00:01:33.697
Just in case the tests are not enough to
give you an idea of what I'm looking for

25
00:01:33.697 --> 00:01:38.533
here, this is the kind of stuff I'm
looking for this dealer class to do.

26
00:01:38.533 --> 00:01:41.500
You should be able to deal
a hand of five cards.

27
00:01:43.200 --> 00:01:46.220
You should be able to tell me how
many cards are left in your deck.

28
00:01:46.220 --> 00:01:50.290
So when you deal cards, you should
lose cards out of your deck, right?

29
00:01:50.290 --> 00:01:52.490
So I should be able to ask for five cards.

30
00:01:52.490 --> 00:01:55.940
You go down from 52 to 47.

31
00:01:55.940 --> 00:01:59.110
You should be able to
tell me what card I have.

32
00:01:59.110 --> 00:02:02.283
So I should be able to pass you a tuple,
and you can send me back

33
00:02:02.283 --> 00:02:06.160
a string saying seven of spades or
three of hearts, something like that.

34
00:02:07.180 --> 00:02:12.185
And then you should use this shuffle
function which is already in the starting

35
00:02:12.185 --> 00:02:16.574
point for the exercise to,
after you create your deck shuffle it and

36
00:02:16.574 --> 00:02:19.903
then you should be dealing
out cards as requested.

37
00:02:19.903 --> 00:02:22.140
Does that make sense to everyone?

38
00:02:22.140 --> 00:02:26.540
Npm test dealer,
that's how you're gonna run this test.

39
00:02:26.540 --> 00:02:32.310
And make sure that you have no complaints
from the TypeScript compiler and

40
00:02:32.310 --> 00:02:35.190
no failing tests, and that's how you'll
know you're at the end of the exercise.

