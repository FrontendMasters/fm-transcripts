WEBVTT

1
00:00:00.570 --> 00:00:01.120
&gt;&gt; Mike North: Welcome back,

2
00:00:01.120 --> 00:00:05.750
we're going to go through the solution to
the functional shopping cart exercise.

3
00:00:05.750 --> 00:00:10.509
We're gonna run our MPM test,
functional cart, no,

4
00:00:10.509 --> 00:00:15.686
sorry, it's just cart, no,
it's cashier, isn't it?

5
00:00:18.435 --> 00:00:19.481
&gt;&gt; Mike North: Yes cashier,

6
00:00:19.481 --> 00:00:24.110
failure of a bunch of tests as
the world is before we do any work.

7
00:00:25.740 --> 00:00:29.190
So we'll open up our exercises folder, and

8
00:00:29.190 --> 00:00:33.520
look at the cashier exercise and
open up this type script file.

9
00:00:33.520 --> 00:00:40.140
So we've got a function here, and
it's doing nothing at all of interest.

10
00:00:40.140 --> 00:00:46.002
And so our job is to make it so
that this pass some of this test.

11
00:00:46.002 --> 00:00:51.290
We can start at the beginning, so
whatever this cashier function returns

12
00:00:51.290 --> 00:00:57.106
should have something on it and called
add, and that thing better be a function.

13
00:00:57.106 --> 00:01:00.211
But first,
we were given a couple interfaces.

14
00:01:04.570 --> 00:01:07.368
&gt;&gt; Mike North: And
I'm gonna define an interface for

15
00:01:07.368 --> 00:01:10.610
the thing that this returns, right?

16
00:01:10.610 --> 00:01:13.250
So cashier should return a cashier API.

17
00:01:16.275 --> 00:01:18.678
&gt;&gt; Mike North: So
surely it should have an add on it.

18
00:01:20.324 --> 00:01:24.543
&gt;&gt; Mike North: And let's actually
just look at the exercise here, so

19
00:01:24.543 --> 00:01:27.855
length and total, we can add those first.

20
00:01:31.519 --> 00:01:33.208
&gt;&gt; Mike North: I wonder if I
can copy that whole thing.

21
00:01:35.247 --> 00:01:39.172
&gt;&gt; Mike North: Nope wishful thinking,
so length is a number.

22
00:01:40.940 --> 00:01:44.565
&gt;&gt; Mike North: Total is a number,
add is going

23
00:01:44.565 --> 00:01:49.311
to take a cart item and return a cart API.

24
00:01:57.471 --> 00:02:00.930
&gt;&gt; Mike North: I may have misspelt that.

25
00:02:02.666 --> 00:02:03.858
I called that a cart API.

26
00:02:03.858 --> 00:02:05.859
I may as well keep it consistent.

27
00:02:08.754 --> 00:02:12.848
&gt;&gt; Mike North: Okay so that's add,
sorry if I'm flipping back and forth,

28
00:02:12.848 --> 00:02:13.740
my mistake.

29
00:02:13.740 --> 00:02:15.610
I'm gonna change that to add item, and

30
00:02:15.610 --> 00:02:21.220
then add is gonna take basically
the deconstructed cart item,

31
00:02:21.220 --> 00:02:24.390
name, price, and quantity and
also return of CartAPI.

32
00:02:25.660 --> 00:02:28.954
So, this will be addItem, and

33
00:02:28.954 --> 00:02:34.025
then we'll have add(name: string, price,

34
00:02:34.025 --> 00:02:41.216
number, qty: number)
&gt;&gt; Mike North: And

35
00:02:41.216 --> 00:02:43.120
now we need this CartItem.

36
00:02:48.231 --> 00:02:53.354
&gt;&gt; Mike North: Name:
string; price: number;

37
00:02:53.354 --> 00:02:58.304
qty: is gonna be number; okay.

38
00:03:00.119 --> 00:03:04.880
&gt;&gt; Mike North: So now we've sort of moved.

39
00:03:04.880 --> 00:03:07.460
We've got an appropriate
error here that's saying,

40
00:03:07.460 --> 00:03:12.860
we can't assign an empty object
literal to the type cart API,

41
00:03:12.860 --> 00:03:16.060
and that is cuz we are missing
a bunch of important things.

42
00:03:17.530 --> 00:03:22.504
So we need
&gt;&gt; Mike North: Length of,

43
00:03:22.504 --> 00:03:25.050
we will just say 0 for now.

44
00:03:27.942 --> 00:03:29.973
&gt;&gt; Mike North: 0 for now.

45
00:03:29.973 --> 00:03:34.508
And we'll have a function here add(name,
price,

46
00:03:34.508 --> 00:03:39.053
qty, and
we'll have the default value be set to 1.

47
00:03:47.898 --> 00:03:54.980
&gt;&gt; Mike North: And
what's the problem here?

48
00:03:54.980 --> 00:03:59.999
Return it zero, zero add item,
so we need to return a CartAPI.

49
00:04:04.673 --> 00:04:06.680
&gt;&gt; Mike North: Okay,
now it's quieting down.

50
00:04:06.680 --> 00:04:11.290
So we've stated our intent
to return this CartAPI.

51
00:04:11.290 --> 00:04:17.240
And so once we do this, you can see that
these are the complaints that are left.

52
00:04:19.688 --> 00:04:22.820
&gt;&gt; Mike North: So we ca take
advantage of the way closures work.

53
00:04:22.820 --> 00:04:25.020
And this is functions in JavaScript.

54
00:04:25.020 --> 00:04:26.730
This is not the special types of thing.

55
00:04:28.770 --> 00:04:30.890
So we'll have an items array here.

56
00:04:32.460 --> 00:04:36.320
And because we're using typescript, we
can put a type constraint on this array.

57
00:04:36.320 --> 00:04:38.460
We're not allowed to put anything into it,

58
00:04:38.460 --> 00:04:43.710
unless it matches the structure
that we refer to as CartItem.

59
00:04:43.710 --> 00:04:45.810
Only things matching that
structure can be pushed in.

60
00:04:47.670 --> 00:04:52.470
And so in this situation, addItem and
again like, because we have stated,

61
00:04:52.470 --> 00:04:53.890
we return a CartAPI.

62
00:04:53.890 --> 00:04:55.510
This is what we're returning.

63
00:04:55.510 --> 00:04:59.140
You'll note that like all of
the type information I have,

64
00:04:59.140 --> 00:05:02.640
it's already taken care of
because of that interface, right?

65
00:05:02.640 --> 00:05:07.014
This is TypeScript trying to give
me benefit of the doubt that it's

66
00:05:07.014 --> 00:05:10.919
found a way to make what I'm
returning conform to CartAPI,

67
00:05:10.919 --> 00:05:14.374
just by applying inferred
types to various things.

68
00:05:18.192 --> 00:05:23.608
&gt;&gt; Mike North: So we're gonna do that,
and then return this.

69
00:05:23.608 --> 00:05:26.080
And then, we can do that.

70
00:05:26.080 --> 00:05:30.720
Similar thing here, we're gonna push,

71
00:05:30.720 --> 00:05:35.765
name, price, quantity, and return this.

72
00:05:41.119 --> 00:05:43.470
&gt;&gt; Mike North: So
we're passing some more tests here.

73
00:05:43.470 --> 00:05:47.210
We've passed ten, still failing nine, and

74
00:05:47.210 --> 00:05:51.690
looks like many of them have
to do with length and total.

75
00:05:53.660 --> 00:05:55.980
Adding a few items by chaining,

76
00:05:55.980 --> 00:05:58.330
maybe that has something to
do with the total as well.

77
00:05:59.850 --> 00:06:02.510
So obviously we haven't
done anything there.

78
00:06:02.510 --> 00:06:07.300
What we're gonna do is our new
knowledge of the way getters work.

79
00:06:09.700 --> 00:06:15.518
So these become accessors, right?

80
00:06:15.518 --> 00:06:18.720
We can consume them as if
they're properties, but

81
00:06:18.720 --> 00:06:21.259
you can see they're sort of functions.

82
00:06:22.760 --> 00:06:27.654
They're accessor based properties,
not value based properties.

83
00:06:31.255 --> 00:06:34.517
&gt;&gt; Mike North: And, that's not right.

84
00:06:34.517 --> 00:06:37.911
Get length.

85
00:06:43.355 --> 00:06:45.610
&gt;&gt; Mike North: Read only length.

86
00:06:45.610 --> 00:06:49.040
Okay, so we can do that, that's fine.

87
00:06:52.463 --> 00:06:55.000
&gt;&gt; Mike North: See if
that'll make it happy, nope.

88
00:06:57.200 --> 00:06:59.520
I know,
we're not even calculating that correctly.

89
00:06:59.520 --> 00:07:04.060
We were meant to not even hit this
little snag, cuz I haven't talked about

90
00:07:05.360 --> 00:07:08.300
read only, or access modifier
keywords anything like that.

91
00:07:08.300 --> 00:07:12.720
So length is not just the number
of items in the array, but

92
00:07:12.720 --> 00:07:16.230
it is we have to count the quantities up.

93
00:07:16.230 --> 00:07:21.290
And we can do that any time we're trying
to derive a singular value from an array.

94
00:07:21.290 --> 00:07:23.190
There's a higher order
function we can use.

95
00:07:23.190 --> 00:07:24.810
Does anyone know what that is?

96
00:07:24.810 --> 00:07:25.710
&gt;&gt; Speaker 2: Reduce.

97
00:07:25.710 --> 00:07:29.430
&gt;&gt; Mike North: Reduce,
so we could say items

98
00:07:31.050 --> 00:07:36.670
reduce and the reducer is
gonna take two arguments and

99
00:07:36.670 --> 00:07:41.100
an accumulator, and the current item.

100
00:07:43.420 --> 00:07:44.730
It's our job to implement that.

101
00:07:44.730 --> 00:07:46.750
And we'll start counting from 0.

102
00:07:46.750 --> 00:07:49.481
This is the initial value
of that accumulator, so

103
00:07:49.481 --> 00:07:51.177
note that even in the reducer.

104
00:07:55.990 --> 00:07:59.112
&gt;&gt; Mike North: We can get
rid of this down here.

105
00:08:05.295 --> 00:08:06.344
&gt;&gt; Mike North: Let me cause it to,

106
00:08:06.344 --> 00:08:09.105
let me make it shut up
a little bit with the errors.

107
00:08:12.127 --> 00:08:17.068
&gt;&gt; Mike North: So here, the reducer is,
it has type imitations built into it, but

108
00:08:17.068 --> 00:08:21.080
let's see if we can
figure out what's wrong.

109
00:08:21.080 --> 00:08:25.078
Can someone read this and figure out
why this reduce is complaining to us,

110
00:08:25.078 --> 00:08:26.444
as it currently stands?

111
00:08:32.673 --> 00:08:34.480
&gt;&gt; Mike North: Someone
who knows what reduce is?

112
00:08:34.480 --> 00:08:36.750
&gt;&gt; Speaker 2: You're not returning.

113
00:08:36.750 --> 00:08:37.320
&gt;&gt; Mike North: I'm not returning.

114
00:08:37.320 --> 00:08:41.200
The initial value I've given it of 0,
it's basically saying,

115
00:08:41.200 --> 00:08:42.900
okay well that's a number.

116
00:08:42.900 --> 00:08:47.550
And so as a result, we see that right
up at the top says acc: number.

117
00:08:47.550 --> 00:08:51.030
It says, well now I can give this
to you with a type of number and

118
00:08:51.030 --> 00:08:54.360
you'll also, this reduce rate
better return the type of number.

119
00:08:54.360 --> 00:08:56.610
Because that's gonna be
the new value of the reducer,

120
00:08:56.610 --> 00:08:59.100
the next time we turn over
in this reduced function.

121
00:08:59.100 --> 00:09:01.750
So a lot of great type
information working for us, and

122
00:09:01.750 --> 00:09:05.300
it's busted us on not
returning like we should be.

123
00:09:05.300 --> 00:09:09.340
This is it saying, I expect
the function of this specific shape.

124
00:09:09.340 --> 00:09:13.290
And you have given me something
different and therefore fix it.

125
00:09:13.290 --> 00:09:18.090
So if we were the assembly say return 1,
it will go quiet.

126
00:09:18.090 --> 00:09:20.080
That's how exactly what
are those complaining about.

127
00:09:21.650 --> 00:09:26.420
In this case, we are gonna say return
the current value of the total

128
00:09:26.420 --> 00:09:31.990
plus the quantity of whatever
item we're looking at.

129
00:09:31.990 --> 00:09:35.903
So it's gonna just sum these
items up via quantity.

130
00:09:39.873 --> 00:09:43.701
&gt;&gt; Mike North: So now we can do
something similar with total, and

131
00:09:43.701 --> 00:09:49.900
in this case we're gonna say the total
is it's another reduced function.

132
00:09:49.900 --> 00:09:54.630
But it's quantity times cart item price.

133
00:09:56.620 --> 00:09:59.430
And at this point I expect we're
passing all our tests, and we are.

134
00:10:01.990 --> 00:10:06.126
So what we're seeing here, first off,

135
00:10:06.126 --> 00:10:14.412
is that we can use getters just as we
would use value-based properties, right?

136
00:10:14.412 --> 00:10:19.766
So we have satisfied, even though
we're doing something like this,

137
00:10:19.766 --> 00:10:24.590
it still satisfies this part of
the interface up here, right?

138
00:10:24.590 --> 00:10:27.260
Those line up just fine.

139
00:10:27.260 --> 00:10:29.700
So getters work just fine.

140
00:10:31.660 --> 00:10:32.368
And also,

141
00:10:32.368 --> 00:10:37.648
when we're working with higher order
functions especially like in this case,

142
00:10:37.648 --> 00:10:43.030
it seems that whatever type we pass in
that kinda dictates another type, right?

143
00:10:43.030 --> 00:10:44.800
There is a relationship
between these things.

144
00:10:44.800 --> 00:10:49.617
For example, if I were to write this
in quotes, this is gonna be complaining

145
00:10:49.617 --> 00:10:54.562
because
&gt;&gt; Mike North: It's a read only, sorry,

146
00:10:54.562 --> 00:10:57.508
it takes a little while to
decode these messages here.

147
00:11:02.373 --> 00:11:08.341
&gt;&gt; Mike North: Just know, see callback
just below line 11 on the right side,

148
00:11:08.341 --> 00:11:14.200
see where it says callback fn
previous value colon string?

149
00:11:14.200 --> 00:11:18.500
That's basically saying, okay,
well now your accumulator is a string.

150
00:11:18.500 --> 00:11:23.970
So I'm gonna pass you this as a string and
you better return a string.

151
00:11:23.970 --> 00:11:27.230
So it's almost like there's a relationship
between types that are use for

152
00:11:27.230 --> 00:11:31.820
various parameters here, and
that leads us up to our next topic,

153
00:11:31.820 --> 00:11:35.210
which is generics,
that is how this is defined, right?

154
00:11:35.210 --> 00:11:40.042
As soon as we do this, you'll see that

155
00:11:40.042 --> 00:11:44.125
the reduce function has this U.

156
00:11:44.125 --> 00:11:48.469
See how it says reduce and
then angle brackets number, so

157
00:11:48.469 --> 00:11:53.447
we're operating in a mode where
we're going to return a number,

158
00:11:53.447 --> 00:11:58.334
the initial value of the accumulator
had better be a number, and

159
00:11:58.334 --> 00:12:04.450
therefore our call back numbers first
argument needs also to be a number.

160
00:12:04.450 --> 00:12:06.450
All of these have to be the same type.

161
00:12:06.450 --> 00:12:09.830
There's no enforcement of those
three types, the return value,

162
00:12:09.830 --> 00:12:13.380
initial value of the accumulator, and
that part of the function structure.

163
00:12:13.380 --> 00:12:18.400
There's no way to ensure that all of that
works properly in regular JavaScript.

164
00:12:18.400 --> 00:12:22.840
But here, it's keeping up honest, and
it's ensuring that we're not going to

165
00:12:22.840 --> 00:12:26.800
accidentally performs string
concatenation as oppose to arithmetic.

166
00:12:27.970 --> 00:12:31.805
A really nice constraint to have.

167
00:12:31.805 --> 00:12:36.890
Let me make sure I'm passing the tests,
and I am, okay.

