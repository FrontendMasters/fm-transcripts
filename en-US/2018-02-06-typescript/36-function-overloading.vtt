WEBVTT

1
00:00:00.280 --> 00:00:01.590
&gt;&gt; Mike: All right, last concept here.

2
00:00:01.590 --> 00:00:04.020
This one's gonna throw people for
a little bit of a loop so

3
00:00:04.020 --> 00:00:07.420
we're gonna spend extra time
on it function overloading.

4
00:00:07.420 --> 00:00:12.390
So in JavaScript, because arguments are,
there's no such thing as disambiguating

5
00:00:12.390 --> 00:00:16.806
between functions having the same name
by argument signature, there's no

6
00:00:16.806 --> 00:00:21.154
such thing as that in JavaScript because
function arguments are really for

7
00:00:21.154 --> 00:00:25.916
our benefit only as developers, so that
we don't have to reach into the arguments

8
00:00:25.916 --> 00:00:29.741
object and grab the zero thing,
first thing, the second thing.

9
00:00:29.741 --> 00:00:34.295
They're just names that we can use in
our code, there's no enforcement of

10
00:00:34.295 --> 00:00:39.158
like passing all of this arguments along
and you must required parameter here.

11
00:00:39.158 --> 00:00:43.724
In TypeScript there is, and so
in TypeScript you can have multiple

12
00:00:43.724 --> 00:00:48.220
function heads and one implementation
that takes care of it all.

13
00:00:49.370 --> 00:00:55.380
So in this case, we've got the ability
to add two number together

14
00:00:55.380 --> 00:01:00.200
or add two strings together, and
we'll basically do the parsing for you.

15
00:01:00.200 --> 00:01:05.540
Along the way, so you provide arrayed
x and we will call percent internally.

16
00:01:07.630 --> 00:01:12.420
So you may ask like why on
earth would I want to do this?

17
00:01:12.420 --> 00:01:17.629
Well, I'm gonna paste that in so
we can play with it because

18
00:01:17.629 --> 00:01:24.209
it's a little more useful to once we
can see how typescript sees this code.

19
00:01:29.563 --> 00:01:31.536
&gt;&gt; Mike: Okay, so first off,

20
00:01:31.536 --> 00:01:36.472
you'll note that I have two
function heads here, and

21
00:01:36.472 --> 00:01:42.170
then I have a third one,
which is a full implementation.

22
00:01:42.170 --> 00:01:48.150
If I call add you know that I have
only two options to pick from,

23
00:01:48.150 --> 00:01:53.120
so that bottom implementation
although it is most flexible if you

24
00:01:53.120 --> 00:01:56.710
look at the shape there we
talk about union types, right?

25
00:01:56.710 --> 00:02:03.080
It almost like it's the union of
the function signatures above, right?

26
00:02:03.080 --> 00:02:07.350
It's almost like this shape here is what
you would get if you had to accommodate

27
00:02:07.350 --> 00:02:08.560
either of these two.

28
00:02:08.560 --> 00:02:12.608
That's not an accident, right,
this is flexible enough to accommodate

29
00:02:12.608 --> 00:02:15.611
either of these two, but
when I'm actually using it,

30
00:02:15.611 --> 00:02:19.222
I don't get access to that very
flexible implementation there.

31
00:02:19.222 --> 00:02:24.596
I just get the signatures
that are above what that

32
00:02:24.596 --> 00:02:32.737
means is unlike this signature here it
seems to indicate I cannot do this.

33
00:02:37.694 --> 00:02:38.997
&gt;&gt; Mike: Sorry I can do that,

34
00:02:38.997 --> 00:02:43.627
I cannot do this.
&gt;&gt; Mike: So, x and y,

35
00:02:43.627 --> 00:02:48.050
it would seem, right,
that does match this shape, right?

36
00:02:48.050 --> 00:02:52.680
I'll even pass the radix in so, take
the default parameter out of the picture.

37
00:02:53.850 --> 00:02:59.580
So, basically, without this,
it's saying you're trying to use the two

38
00:02:59.580 --> 00:03:05.440
argument thing, right, so I expect number
number that's two arguments number number.

39
00:03:05.440 --> 00:03:07.640
As soon as I add this third
argument in it's says,

40
00:03:07.640 --> 00:03:12.630
that's three argument variables well now
I want this first thing to be a string.

41
00:03:13.840 --> 00:03:18.830
So this let's us put additional
constraints up here that say

42
00:03:18.830 --> 00:03:23.030
look you can use it this one way or
the other way or this 3rd way.

43
00:03:23.030 --> 00:03:26.250
And now secretly I'm going to
implement something that can

44
00:03:26.250 --> 00:03:29.840
internally handle all those cases and
disambiguate between them.

45
00:03:29.840 --> 00:03:34.250
But when you consume this you're only
allowed to use those specific ways.

46
00:03:34.250 --> 00:03:38.120
So this in fact, this is not just
accounting for these two shapes.

47
00:03:38.120 --> 00:03:40.230
It accounts for shapes like this.

48
00:03:43.990 --> 00:03:46.210
Right, that shape that I just added,
this one,

49
00:03:46.210 --> 00:03:50.880
that was not there in the beginning,
bu that also would make this happy, right.

50
00:03:50.880 --> 00:03:53.770
So here like now it's gonna be fine,
that's fine.

51
00:03:53.770 --> 00:03:57.090
But if we say nope, you're not allowed
to pass me one number in one strain,

52
00:03:57.090 --> 00:04:01.310
even though down here it would seem
to allow it Now we're back to that.

53
00:04:03.010 --> 00:04:04.750
So here's how this works.

54
00:04:06.810 --> 00:04:14.090
You want to define function
heads from most specific

55
00:04:14.090 --> 00:04:18.860
to least specific, right,
most specific to least specific.

56
00:04:18.860 --> 00:04:23.530
Just think of it, like you were
to design almost a case switch.

57
00:04:23.530 --> 00:04:26.680
Basically imagine that the way this works
under the hood is that you're gonna go

58
00:04:26.680 --> 00:04:29.611
through and you're gonna basically
look like for the first one you find.

59
00:04:29.611 --> 00:04:34.850
Then you're gonna hit that most specific
first, then fall back to a generic one.

60
00:04:34.850 --> 00:04:36.550
That is the mental model here.

61
00:04:36.550 --> 00:04:40.680
If you follow that model
this will not surprise you.

62
00:04:40.680 --> 00:04:43.616
In here, let me make sure
I'm not skipping ahead of my

63
00:04:43.616 --> 00:04:49.513
slides.
&gt;&gt; Mike: Okay,

64
00:04:49.513 --> 00:04:53.890
so effectively, I've shown you
what I was about to animate there.

65
00:04:53.890 --> 00:04:55.980
I do want to show you one other thing now.

66
00:04:55.980 --> 00:04:56.958
We can do something like this

67
00:05:04.556 --> 00:05:06.600
&gt;&gt; Mike: So is anyone surprised by this?

68
00:05:07.850 --> 00:05:12.004
Versus
&gt;&gt; Mike: So

69
00:05:12.004 --> 00:05:18.384
this is the type of x over here string or
number obviously.

70
00:05:18.384 --> 00:05:21.705
Just string.

71
00:05:21.705 --> 00:05:27.110
Just number.

72
00:05:27.110 --> 00:05:30.990
So type of has this ability to work with

73
00:05:30.990 --> 00:05:35.360
whatever the type of an object is,
and sort of help you filter through.

74
00:05:35.360 --> 00:05:40.173
In fact, if we did something like this
&gt;&gt; Mike: Although

75
00:05:40.173 --> 00:05:42.630
this may make other things happy.

76
00:05:42.630 --> 00:05:44.260
Now it's gonna say number or object.

77
00:05:44.260 --> 00:05:48.750
It's almost like, you handled the string
case above and I'm in an else.

78
00:05:48.750 --> 00:05:54.860
And therefore in this branch of the code
You could only be one of these two types.

79
00:05:54.860 --> 00:05:57.200
This is really nice when
working with unit types.

80
00:05:57.200 --> 00:06:00.870
Cuz ultimately, particularly in
a case like this, where yeah,

81
00:06:00.870 --> 00:06:05.650
we have multiple function heads, but
inside this function here, were we not

82
00:06:05.650 --> 00:06:10.260
basically passing stringifying potential
integers and passing them into parseInt,

83
00:06:10.260 --> 00:06:13.840
we found one single code path
that will work for everything.

84
00:06:13.840 --> 00:06:19.380
But were we not doing this, we could
absolutely have done some branching.

85
00:06:19.380 --> 00:06:22.130
So I can re-implement this if we like and

86
00:06:22.130 --> 00:06:27.140
say, let's see if it's smart enough to
do this, I've never tried it before.

87
00:06:27.140 --> 00:06:34.509
So if typeof x is a string,
&gt;&gt; Mike: We can do something like this.

88
00:06:37.920 --> 00:06:41.920
We don't need to wrap that in a string
anymore even though parseInt wants,

89
00:06:41.920 --> 00:06:44.560
it wants a string
absolutely wants a string.

90
00:06:45.770 --> 00:06:46.940
We're giving it one.

91
00:06:46.940 --> 00:06:48.160
That's the only thing it can be.

92
00:06:49.790 --> 00:06:55.020
Yeah, it's not quite smart enough to know
that our function heads only allow for

93
00:06:55.020 --> 00:06:58.180
the case where they are both strings or
both numbers.

94
00:06:58.180 --> 00:06:59.078
So, but no worry,

95
00:06:59.078 --> 00:07:03.413
we can just do something like this
&gt;&gt; Mike: And

96
00:07:03.413 --> 00:07:09.378
that effectively, like,
within this block, we've basically cast,

97
00:07:09.378 --> 00:07:14.250
we've implicitly cast Y to
a string does that make sense?

98
00:07:14.250 --> 00:07:19.270
Without this, we've left open
the possibility that y is a number.

99
00:07:19.270 --> 00:07:23.070
So we're just working within
the context of this function here.

100
00:07:23.070 --> 00:07:26.970
It's not taking into account
that we have these heads.

101
00:07:26.970 --> 00:07:29.186
So if we had one number and one string,

102
00:07:29.186 --> 00:07:33.483
like parseInt could be unhappy here,
but now we're saying, all right,

103
00:07:33.483 --> 00:07:38.149
we're asserting both of those.
&gt;&gt; Speaker 2: The act of

104
00:07:38.149 --> 00:07:42.074
asking causes that to happen.
&gt;&gt; Mike: It knows it's in a branch of code

105
00:07:42.074 --> 00:07:45.646
that can only be run in the event
that Y is a string, and so

106
00:07:45.646 --> 00:07:48.390
Y is now a string within that plot.

107
00:07:48.390 --> 00:07:49.445
Pretty cool, right?

108
00:07:49.445 --> 00:07:55.203
[LAUGH] And now, down here X can
still be a string or number.

109
00:07:55.203 --> 00:07:56.864
Y can still be a string or number.

110
00:07:56.864 --> 00:08:00.684
So watch this, else if,
when we do something like this,

111
00:08:07.072 --> 00:08:09.754
&gt;&gt; Mike: And will return x plus y.

112
00:08:09.754 --> 00:08:14.711
See if that works.

113
00:08:14.711 --> 00:08:16.128
Nope.

114
00:08:16.128 --> 00:08:17.962
It's not going to want that.

115
00:08:17.962 --> 00:08:21.210
[SOUND] We need to return here.

116
00:08:27.316 --> 00:08:31.874
&gt;&gt; Mike: So we'll just leave it like That,

117
00:08:31.874 --> 00:08:35.495
no, how would we fix that,

118
00:08:45.446 --> 00:08:46.886
&gt;&gt; Mike: So that will work,

119
00:08:46.886 --> 00:08:48.986
this will work.
&gt;&gt; Speaker 2: So

120
00:08:48.986 --> 00:08:54.383
do you even need the f on line time,
because isn't that if technically taking

121
00:08:54.383 --> 00:08:59.540
cared by the top two decoration things.
&gt;&gt; Mike: If I did not let you

122
00:08:59.540 --> 00:09:03.120
look at those, so here's the rule,
like we have to design

123
00:09:03.120 --> 00:09:07.870
this function according to the constraints
of the arguments passed in.

124
00:09:07.870 --> 00:09:12.950
So here's how we could do it there's
another way we could do this.

125
00:09:12.950 --> 00:09:14.810
We could use generics.

126
00:09:14.810 --> 00:09:19.400
So what we need, what you're asking it for
here is a type constraint where x and

127
00:09:19.400 --> 00:09:21.090
y are the same thing, correct?

128
00:09:21.090 --> 00:09:23.540
So I can make this work, absolutely.

129
00:09:23.540 --> 00:09:24.210
Let's make it work.

130
00:09:25.540 --> 00:09:26.560
And here's how we would do it.

131
00:09:27.640 --> 00:09:31.592
We'd say the function, add,

132
00:09:31.592 --> 00:09:35.544
It has a template parameter and

133
00:09:35.544 --> 00:09:40.104
we need this template parameter and

134
00:09:40.104 --> 00:09:45.424
we could actually say, it is t where t is,

135
00:09:45.424 --> 00:09:49.230
all right this'll work.

136
00:09:49.230 --> 00:09:52.040
So, we would now say, this is a type T.

137
00:09:52.040 --> 00:09:55.000
This is of type T as well.

138
00:09:55.000 --> 00:10:00.590
And at this point, [SOUND] See,

139
00:10:00.590 --> 00:10:05.753
now it's going to say that.

140
00:10:05.753 --> 00:10:14.308
T
&gt;&gt; Mike: And

141
00:10:14.308 --> 00:10:16.470
then now down here.

142
00:10:16.470 --> 00:10:21.978
It doesn't like that.
&gt;&gt; Mike: So

143
00:10:21.978 --> 00:10:26.849
we can be assured that now x and
y have the same type.

144
00:10:31.029 --> 00:10:33.350
&gt;&gt; Mike: Yeah it would be hard to do that.

145
00:10:33.350 --> 00:10:36.610
So the reason that we're doing
this here essentially is that like

146
00:10:36.610 --> 00:10:39.450
yes we can be assured
without this other else here.

147
00:10:41.380 --> 00:10:45.185
We can be assured that
we are in a situation

148
00:10:45.185 --> 00:10:50.022
where
&gt;&gt; Mike: Where either x or y or

149
00:10:50.022 --> 00:10:52.022
both is not a type string, but

150
00:10:52.022 --> 00:10:56.350
that is because it's only taking
this into account up here.

151
00:10:56.350 --> 00:10:59.460
It does not take into account the function
heads that are used to ultimately

152
00:10:59.460 --> 00:11:00.040
call this thing.

153
00:11:01.850 --> 00:11:05.560
But the point is, there is gonna
be some branching in here unlike

154
00:11:05.560 --> 00:11:10.180
now you can control different
call signatures, and

155
00:11:10.180 --> 00:11:15.080
then this one that's gonna make you feel
uncomfortable, the implementation where it

156
00:11:15.080 --> 00:11:20.480
is an overly loose,
broad set of constraints,

157
00:11:20.480 --> 00:11:23.520
you'll have to write a function that
works in that set of constraints.

158
00:11:23.520 --> 00:11:31.470
However it'll be that is not actually
available for other code to consume.

159
00:11:31.470 --> 00:11:36.240
That is just designed to handle
things that will come in through

160
00:11:36.240 --> 00:11:40.748
the much more constrained
function heads that you design.

161
00:11:40.748 --> 00:11:47.503
This is known as function overloading.
&gt;&gt; Mike: So

162
00:11:47.503 --> 00:11:53.300
we could do like,
we'd have to do something like this.

163
00:11:53.300 --> 00:11:55.968
So if x and y are numbers why
is it complaining at me now?

164
00:11:55.968 --> 00:12:03.803
See else, I'd have to do that.
&gt;&gt; Mike: And

165
00:12:03.803 --> 00:12:09.358
then up here.
&gt;&gt; Mike: That'll work.

166
00:12:20.793 --> 00:12:22.427
&gt;&gt; Mike: Does everyone understand how

167
00:12:22.427 --> 00:12:23.150
that works?

168
00:12:23.150 --> 00:12:24.125
You ready to play with it?

169
00:12:24.125 --> 00:12:28.350
[LAUGH] Okay.

170
00:12:30.580 --> 00:12:33.257
So.

171
00:12:33.257 --> 00:12:35.659
One more thing, sorry.

172
00:12:35.659 --> 00:12:38.493
You could not do something like this.

173
00:12:45.610 --> 00:12:50.302
&gt;&gt; Mike: Or so in this situation, there is

174
00:12:50.302 --> 00:12:56.460
no way to disambiguate between those.

175
00:12:56.460 --> 00:12:59.863
So you have to, when you're picking
the multiple function heads,

176
00:12:59.863 --> 00:13:03.517
like how on earth would you know which
of these you were trying to invoke?

177
00:13:03.517 --> 00:13:05.037
&gt;&gt; Speaker 2: The one that returns,

178
00:13:05.037 --> 00:13:09.039
if you cast a variable that
you're defining it to as a string

179
00:13:10.390 --> 00:13:11.503
&gt;&gt; Mike: Yeah.

180
00:13:11.503 --> 00:13:15.140
You could, let's see, could we do it?

181
00:13:17.272 --> 00:13:20.694
My lord, there you go.

182
00:13:20.694 --> 00:13:22.580
It could return a number or string.

183
00:13:24.650 --> 00:13:27.470
All right, I guess you can't do that,
I don't know why you would.

184
00:13:27.470 --> 00:13:30.319
Let me express it as advice
them rather than a constraint.

185
00:13:32.421 --> 00:13:34.095
&gt;&gt; Mike: Make these distinct and

186
00:13:34.095 --> 00:13:36.939
you should treat these almost like, and

187
00:13:36.939 --> 00:13:40.430
the type system is
a constraint system right?

188
00:13:40.430 --> 00:13:44.960
We're saying you may only set
values of this particular type.

189
00:13:44.960 --> 00:13:49.130
You may only point this variable
to values of this particular type.

190
00:13:49.130 --> 00:13:53.810
This is another constraint in this type
system saying yes, I have this sort of

191
00:13:53.810 --> 00:13:58.550
broad function here, but you may only
invoke it in these specific ways.

192
00:13:58.550 --> 00:14:02.010
And you must pass three variables,
which the first two are strings and

193
00:14:02.010 --> 00:14:06.630
the last one is a number, or two numbers,
and no other combination will work,

194
00:14:06.630 --> 00:14:10.250
despite what you read into here
where you can mix and match.

