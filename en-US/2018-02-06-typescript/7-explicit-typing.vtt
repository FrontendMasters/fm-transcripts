WEBVTT

1
00:00:00.080 --> 00:00:05.200
&gt;&gt; Mike North: If we did want to provide
TypeScript within explicit indication

2
00:00:05.200 --> 00:00:11.130
of what type this is, we could provide
what is called a type annotation.

3
00:00:11.130 --> 00:00:14.390
And you'll see here, after the name
of the variable we have a colon and

4
00:00:14.390 --> 00:00:15.770
then the type of the variable.

5
00:00:15.770 --> 00:00:19.270
So you'll see that convention over and
over and over again.

6
00:00:19.270 --> 00:00:22.740
You'll get used to seeing
that very quickly.

7
00:00:24.670 --> 00:00:27.450
This can be used anywhere
variables declared,

8
00:00:27.450 --> 00:00:32.260
anywhere a function parameters is defined.

9
00:00:32.260 --> 00:00:33.530
We'll see it in a bunch of places.

10
00:00:35.650 --> 00:00:39.600
So in some situations
we run into cases where

11
00:00:39.600 --> 00:00:44.380
the type that something returns is
not what we're interested in, and

12
00:00:44.380 --> 00:00:47.070
to get around that,
we perform what is called casting.

13
00:00:47.070 --> 00:00:51.310
This is a form of explicitly converting
something from one type to another.

14
00:00:51.310 --> 00:00:54.380
You're basically telling typed script,
hey,

15
00:00:54.380 --> 00:00:56.570
I'm the developer I know what I'm doing.

16
00:00:56.570 --> 00:01:02.340
In this case, because querySelector has
the potential to return metatags and

17
00:01:02.340 --> 00:01:04.740
image tags, and dibs, and spans, and

18
00:01:04.740 --> 00:01:09.380
inputs, the type that it
actually returns is just element.

19
00:01:10.410 --> 00:01:14.510
But we know based on the argument we
passed in, this is definitely going to be,

20
00:01:14.510 --> 00:01:20.870
it'll be either undefined or
a html input element.

21
00:01:20.870 --> 00:01:24.150
It's going to be one or the other.

22
00:01:24.150 --> 00:01:27.750
We can say,
treat this as an html input element.

23
00:01:29.340 --> 00:01:30.931
I know that's what I'm getting at.

24
00:01:34.149 --> 00:01:35.580
&gt;&gt; Mike North: So.

25
00:01:35.580 --> 00:01:38.620
What we have on top here this
is the advised way to do it,

26
00:01:38.620 --> 00:01:40.370
to use this as keyword.

27
00:01:40.370 --> 00:01:45.390
Down low you'll see this
alternate way of casting.

28
00:01:45.390 --> 00:01:49.470
This as the advised way for
a long time, but as soon

29
00:01:49.470 --> 00:01:54.450
as JSX started becoming popular and
if you've been working with React at all.

30
00:01:54.450 --> 00:01:59.590
You may see that this could be interpreted
as something else in the React world.

31
00:01:59.590 --> 00:02:00.900
So that's why we have this,

32
00:02:00.900 --> 00:02:04.990
that's why the best practice
has changed to this as secured.

33
00:02:06.670 --> 00:02:10.760
You do still see the bottom
one in some cases.

34
00:02:13.434 --> 00:02:17.122
&gt;&gt; Mike North: So when we start working
with functions, you get those type

35
00:02:17.122 --> 00:02:22.080
annotations just as we did when we
were defining the types of variables.

36
00:02:22.080 --> 00:02:25.200
You see we've got argument types here,
and we've got a return type.

37
00:02:25.200 --> 00:02:28.830
And we're saying the log in function takes
in the user's name and the password,

38
00:02:28.830 --> 00:02:32.110
both strings, and
the return type is the user.

39
00:02:32.110 --> 00:02:35.910
Now we can also have
an arrow function style

40
00:02:37.600 --> 00:02:40.670
of defining a function, and
it is basically the same.

41
00:02:40.670 --> 00:02:43.287
Just note that the arrow
comes after the return type.

