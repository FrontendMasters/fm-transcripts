WEBVTT

1
00:00:00.040 --> 00:00:01.820
&gt;&gt; Mike North: This one
should be relatively easy.

2
00:00:01.820 --> 00:00:06.380
Our job is to build a place search
container component that wraps

3
00:00:06.380 --> 00:00:08.780
around our play search list.

4
00:00:08.780 --> 00:00:14.495
And its job is to manage state but
not trigger any of its own re-rendering.

5
00:00:14.495 --> 00:00:19.795
So basically, what I'm aiming that
we do here is, take away some of

6
00:00:19.795 --> 00:00:24.055
the responsibility from the app component
and move it into another component.

7
00:00:24.055 --> 00:00:27.145
And it's our job to implement
that in this phase.

8
00:00:27.145 --> 00:00:30.040
So we've gone from the presentation only.

9
00:00:30.040 --> 00:00:34.430
We had to implement that another list and
now the thing that's basically sending out

10
00:00:34.430 --> 00:00:38.010
the API calls and
then we're gonna go even one level deeper.

11
00:00:38.010 --> 00:00:40.440
So I'll show you what
this exercise looks like.

12
00:00:42.420 --> 00:00:45.230
How the starting point is a little
different from the last one.

13
00:00:53.852 --> 00:00:57.230
&gt;&gt; Mike North: All right, so our app.tsx.

14
00:00:57.230 --> 00:00:58.730
You see it right away.

15
00:00:58.730 --> 00:01:05.830
This is ultra minimal, there is nothing
going on here of interest, right?

16
00:01:05.830 --> 00:01:08.990
This should be a quicker
exercise by the way.

17
00:01:08.990 --> 00:01:12.810
So app.tsx,it was
previously doing some work.

18
00:01:12.810 --> 00:01:14.580
It previously had some state.

19
00:01:14.580 --> 00:01:18.950
Now it's a stateless functional component
that doesn't even have any props.

20
00:01:18.950 --> 00:01:23.900
Right and it's just its job is to
basically put this thing on the screen.

21
00:01:25.330 --> 00:01:32.140
This place search container, it has
a function here called begin search.

22
00:01:32.140 --> 00:01:36.320
Which think of that,
sorry I changed my convention slightly.

23
00:01:36.320 --> 00:01:38.970
Formally known as tri-search.

24
00:01:38.970 --> 00:01:42.040
I did this cause I didn't have
a tri-catch and I felt like,

25
00:01:42.040 --> 00:01:46.460
Try seems to imply that there is some
insulation from failure and there is not.

26
00:01:46.460 --> 00:01:48.580
So begin search, same thing as try search.

27
00:01:48.580 --> 00:01:53.900
So you are gonna want to have you placed

28
00:01:53.900 --> 00:01:58.840
search result list,
which is already set up for you, right?

29
00:01:58.840 --> 00:02:02.310
This is your play search result list,
the thing that we just solved.

30
00:02:02.310 --> 00:02:03.650
That's already here waiting for

31
00:02:03.650 --> 00:02:07.330
you, a version of it that's basically
the same that's what we built, right?

32
00:02:07.330 --> 00:02:11.420
So here's our search result and
you can see like the different items for

33
00:02:11.420 --> 00:02:12.710
the different scenarios.

34
00:02:12.710 --> 00:02:15.840
So like we've got that check mark there.

35
00:02:15.840 --> 00:02:20.040
Now, it's our job to basically
do the non-visual stuff

36
00:02:20.040 --> 00:02:21.990
that drives this component.

37
00:02:21.990 --> 00:02:27.200
And feel free to refer back to the app
component from the last exercise,

38
00:02:27.200 --> 00:02:31.370
but I want us to lay
the foundation out here.

39
00:02:31.370 --> 00:02:35.665
Now, we've got a new module in place.

40
00:02:35.665 --> 00:02:40.762
Called autocomplete.ts.
&gt;&gt; Mike North: And

41
00:02:40.762 --> 00:02:44.332
this is we've taken our async function and

42
00:02:44.332 --> 00:02:50.150
we've just refactored it out
into another file, that's all.

43
00:02:50.150 --> 00:02:54.480
Now, we're still awaiting,
we're logging some stuff out here just so

44
00:02:54.480 --> 00:02:58.710
that we can see like at different
phases what's happening.

45
00:02:58.710 --> 00:03:02.560
Just kind of keeping track of
how things are progressing.

46
00:03:02.560 --> 00:03:06.600
This still is a promise,
this async function store all

47
00:03:06.600 --> 00:03:10.200
kind of promise that resolves two
place details just as before.

48
00:03:10.200 --> 00:03:15.014
So your task now is to
leverage this autocomplete.js,

49
00:03:15.014 --> 00:03:23.020
flesh out the begin search function in
this place search container component.

50
00:03:23.020 --> 00:03:27.460
And basically hook it up in
some way to this ready made

51
00:03:27.460 --> 00:03:29.400
place search result component.

52
00:03:29.400 --> 00:03:34.800
So that it behaves just as it did as where
we left off in the previous solution.

53
00:03:34.800 --> 00:03:39.610
So you see, the theme here is, you kind
of get everything in the app except

54
00:03:39.610 --> 00:03:44.410
your target exercise and
now we've moved like one level upstream.

55
00:03:44.410 --> 00:03:48.480
And then finally, we're going to actually
take care of the async await stuff

56
00:03:48.480 --> 00:03:50.780
on our own in the exercise after this one.

57
00:03:50.780 --> 00:03:53.740
And then we will have like,
touched all areas and

58
00:03:53.740 --> 00:03:59.350
at some point have implemented each aspect
of this little autocomplete example.

59
00:03:59.350 --> 00:04:01.330
So everyone understand what
the instructions are here?

60
00:04:02.470 --> 00:04:06.150
So you shouldn't be doing much visual
stuff here you should just be sort of

61
00:04:06.150 --> 00:04:11.910
handling the asynchrony and the promises
and dealing with state manipulation.

62
00:04:11.910 --> 00:04:15.580
This is a container component that
it should not be doing, like for

63
00:04:15.580 --> 00:04:19.600
a container component, it's job is
basically to render something else.

64
00:04:19.600 --> 00:04:22.940
Let it take care of the complicated
visual presentation and

65
00:04:22.940 --> 00:04:24.660
its job is just to manage state.

66
00:04:25.770 --> 00:04:30.910
So let's take a half hour for that and,

67
00:04:30.910 --> 00:04:34.726
let's just do 20 minutes, this is one is
a little bit easier than the last one.

68
00:04:34.726 --> 00:04:38.420
So at 2:50 will go through the solution
and then will dive into this last one.

69
00:04:38.420 --> 00:04:43.090
Which should be a little bit more involved
but it's like the weight lifting for

70
00:04:43.090 --> 00:04:49.020
a single weight, where you will
understand how this works in depth.

71
00:04:49.020 --> 00:04:54.360
You have a very high chance of being able
to wrangle this in even complex scenarios

72
00:04:54.360 --> 00:04:55.960
once we implement our own version of it.

