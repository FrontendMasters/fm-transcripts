WEBVTT

1
00:00:00.040 --> 00:00:02.060
&gt;&gt; Mike North: The last thing we did was,

2
00:00:02.060 --> 00:00:07.340
we built a stateless functional
React component using TypeScript.

3
00:00:07.340 --> 00:00:10.860
And the benefit we saw that
TypeScript brought to the party

4
00:00:10.860 --> 00:00:15.030
was that we were able to use
an interface to describe

5
00:00:15.030 --> 00:00:19.460
the props object that this
component was looking to receive.

6
00:00:19.460 --> 00:00:25.700
And we saw that there were a bunch of
things where using regular JavaScript,

7
00:00:25.700 --> 00:00:30.440
we would get no warnings about,
we just rely on our testing or

8
00:00:30.440 --> 00:00:35.410
whatever other assurances we have to catch
that kind of problem before we shipped it.

9
00:00:35.410 --> 00:00:40.230
Whereas TypeScript was bringing
those errors up to compile time,

10
00:00:40.230 --> 00:00:45.260
where we saw that is was unhappy with
us until we provided it the data that

11
00:00:45.260 --> 00:00:51.820
it had stated was required by way
that interface for the prop's object.

12
00:00:53.460 --> 00:01:00.770
So where we're going with this is we're
gonna talk about a stateful component.

13
00:01:02.500 --> 00:01:08.460
So stateful components,
you'll recognize these as usually,

14
00:01:08.460 --> 00:01:12.790
classes, Java Script or
TypeScript classes.

15
00:01:12.790 --> 00:01:17.140
And you'll see that in this situation,
we've got props.

16
00:01:17.140 --> 00:01:24.580
So we bring in a prop of name, but this
component also has a time state, right?

17
00:01:24.580 --> 00:01:26.150
And when the component is mounted,

18
00:01:26.150 --> 00:01:31.830
when the components is inserted into
the HTML, it generates a new date value.

19
00:01:31.830 --> 00:01:34.280
And it sets it's state as like,

20
00:01:34.280 --> 00:01:38.710
the time property on that state object
is set to whatever that data is.

21
00:01:38.710 --> 00:01:42.000
And now when we're rendering this
component, we use something from props and

22
00:01:42.000 --> 00:01:43.410
we use something from state.

23
00:01:43.410 --> 00:01:47.540
So we render the isostring
from that data object and

24
00:01:47.540 --> 00:01:49.900
we render the name from the prop subject.

25
00:01:49.900 --> 00:01:53.905
You'll note that the React component
type definition here, we're not using

26
00:01:53.905 --> 00:01:59.150
react.sfc anymore because that is just for
stateless functional components.

27
00:01:59.150 --> 00:02:05.010
Now we're using this React
component type definition and

28
00:02:05.010 --> 00:02:09.500
we pass in two generic
type parameters there.

29
00:02:09.500 --> 00:02:13.910
The first one is props and
the second one is state.

30
00:02:13.910 --> 00:02:18.280
And you see here,
like a very common pattern here is to

31
00:02:18.280 --> 00:02:21.540
of course begin both interfaces
with the letter I for interface so,

32
00:02:21.540 --> 00:02:24.430
we that that's not a class for
working with.

33
00:02:24.430 --> 00:02:27.990
That is just a shape of some
data not an implementation.

34
00:02:29.180 --> 00:02:32.210
And then adding props and
state to these interfaces themselves, so

35
00:02:32.210 --> 00:02:35.910
there's no confusion whatsoever
in terms of which is which.

36
00:02:35.910 --> 00:02:40.160
I love this pattern because at least
when I was first learning React,

37
00:02:40.160 --> 00:02:45.340
I would lose track of what data lives
on props and what data lives on state.

38
00:02:45.340 --> 00:02:47.960
When you're working in
the internals of this component,

39
00:02:47.960 --> 00:02:50.800
sometimes it's not immediately
obvious what should be

40
00:02:50.800 --> 00:02:55.220
passed to you from the outside versus
what is your own private data, right?

41
00:02:55.220 --> 00:03:00.300
And now in this case, because there is
some structure around these two objects,

42
00:03:00.300 --> 00:03:02.440
it saves us from things like misspellings.

43
00:03:02.440 --> 00:03:07.600
Or it points out anytime
we've reached to props or

44
00:03:07.600 --> 00:03:11.190
when we should have reached to state and
vice-versa, because it will say, look,

45
00:03:11.190 --> 00:03:13.210
this property is not available there.

46
00:03:13.210 --> 00:03:16.740
For that reason I also try to make sure
that when I design React components with

47
00:03:16.740 --> 00:03:22.560
TypeScript, I tend to wanna
have these two interfaces for

48
00:03:22.560 --> 00:03:25.610
props and
state overlap as little as possible.

49
00:03:25.610 --> 00:03:31.773
So that you don't end up in a situation
where they both have name on them.

50
00:03:31.773 --> 00:03:37.250
If they both had a name property on each

51
00:03:37.250 --> 00:03:42.480
of those interfaces you start to lose some
of that clarity between props and state.

52
00:03:42.480 --> 00:03:46.920
Whereas if you have none intersecting
shapes with completely different property

53
00:03:46.920 --> 00:03:53.440
names, it becomes really nice and you can
avoid a lot of potential confusion there.

54
00:03:54.630 --> 00:03:58.930
Especially if you're dealing with
highly complex React components,

55
00:03:58.930 --> 00:04:00.530
where you weren't the original author,

56
00:04:00.530 --> 00:04:03.020
you don't have all of the context
of how this was built.

57
00:04:03.020 --> 00:04:07.460
Really, really nice to have up
front a definition of these

58
00:04:07.460 --> 00:04:09.990
are the things that belong to my state,
and this is for the props.

59
00:04:11.240 --> 00:04:19.670
With that, let's look a little deeper
into our little demo, the clock demo.

60
00:04:21.580 --> 00:04:22.180
Yes.

61
00:04:22.180 --> 00:04:24.770
&gt;&gt; Speaker 2: Could you just
maybe elaborate a little

62
00:04:24.770 --> 00:04:27.260
bit on how
&gt;&gt; Speaker 2: to implement

63
00:04:27.260 --> 00:04:29.130
TypeScript into a project?

64
00:04:29.130 --> 00:04:34.070
Like how to get it in to Webpack and Vega
kind of the best practices in that way?

65
00:04:34.070 --> 00:04:35.980
&gt;&gt; Mike North: Sure, absolutely.

66
00:04:35.980 --> 00:04:41.060
Let me just finish this little bit up,
and I'll jump right into that topic.

67
00:04:41.060 --> 00:04:46.290
So this component here is a clock,
it has a color that

68
00:04:46.290 --> 00:04:52.090
is passed in from the outside world and
it has a time, that's the current date.

69
00:04:52.090 --> 00:04:57.080
And you can see that when the components
mounts at every 20 milliseconds,

70
00:04:57.080 --> 00:05:00.680
it will basically begin pulling every
20 milliseconds in order to refresh its

71
00:05:00.680 --> 00:05:01.740
time, right?

72
00:05:03.060 --> 00:05:09.220
So when we call this .tick, it's going
to just set a new state down here.

73
00:05:09.220 --> 00:05:12.860
We see we've made that private,
no one else can use that function.

74
00:05:12.860 --> 00:05:17.120
Another great thing to get added to
React components like no one outside of

75
00:05:17.120 --> 00:05:21.510
this components definition
can refer to take here.

76
00:05:21.510 --> 00:05:26.410
And in fact if you try to overwrite
this property, you'd get a complaint

77
00:05:26.410 --> 00:05:30.270
from TypeScript saying, there's something
there and you're not allowed to access it.

78
00:05:31.570 --> 00:05:37.300
So, in this situation you're gonna
end up with some very clear idea of

79
00:05:39.240 --> 00:05:43.210
what's available there versus
what's available here,

80
00:05:43.210 --> 00:05:45.680
color, that's the only thing.

81
00:05:45.680 --> 00:05:48.240
All right, so that states for components.

82
00:05:48.240 --> 00:05:52.310
Now, answer your question
about mixing JavaScript and

83
00:05:52.310 --> 00:05:54.990
TypeScript together in an asset pipeline,
right?

84
00:05:54.990 --> 00:06:00.440
How do you end up with like modern
JavaScript and TypeScript side by side.

85
00:06:00.440 --> 00:06:04.390
So, we looked at yesterday
how classes were

86
00:06:04.390 --> 00:06:09.570
implemented differently in
Babble versus in TypeScript.

87
00:06:09.570 --> 00:06:13.620
Mainly that Babble has a central
definition of a function called create

88
00:06:13.620 --> 00:06:18.740
class, and it leans heavily on
that in order to define new types.

89
00:06:18.740 --> 00:06:21.190
TypeScript does not have that, right?

90
00:06:21.190 --> 00:06:25.730
It doesn't have this
sense of a polyfill that

91
00:06:26.940 --> 00:06:33.120
can be leveraged multiple times across
various things, I don't believe it does.

92
00:06:33.120 --> 00:06:36.320
In any sense, in this specific case,
it certainly does not.

93
00:06:38.130 --> 00:06:42.450
The consequence is, if you mix TypeScript,
like classes that were generated by

94
00:06:42.450 --> 00:06:46.590
the TypeScript compiler and
classes that were generated by Babble.

95
00:06:46.590 --> 00:06:50.430
You can end up with some issues in
terms of inheritance chains and

96
00:06:50.430 --> 00:06:53.450
supers working the way
you'd expect them to work.

97
00:06:53.450 --> 00:06:58.000
So my advice here is to basically have,
if you're using TypeScript and Babble side

98
00:06:58.000 --> 00:07:03.110
by side which is not only possible, but
they work really, really nicely together.

99
00:07:03.110 --> 00:07:07.190
The idea is you want TypeScript
to do as little work as possible.

100
00:07:07.190 --> 00:07:12.630
Just get it out of the TypesSript world
and into as modern a version of JavaScript

101
00:07:12.630 --> 00:07:17.910
as you possibly can, and then let Babble
take it the rest of the way from there.

102
00:07:17.910 --> 00:07:19.110
Here's how that would look.

103
00:07:19.110 --> 00:07:27.605
So the file that drives this in the root
of our project is this tsconfig.json,

104
00:07:27.605 --> 00:07:32.770
and this is where we also have
the rest of our compiler options.

105
00:07:32.770 --> 00:07:36.650
So, we can see that this target
property lets us specify the ecmascript

106
00:07:36.650 --> 00:07:41.710
target version, and
permitted values are all of those things.

107
00:07:41.710 --> 00:07:46.902
One of the nice things that Visual Studio
code adds to this developer

108
00:07:46.902 --> 00:07:52.080
experience, is there's even a schema for
the way this JSON object is structured.

109
00:07:52.080 --> 00:07:55.353
So this is not a plugin
I'm about to show you,

110
00:07:55.353 --> 00:08:00.798
it's the fact there's some site,
I think it's like JSONschemas.org.

111
00:08:03.544 --> 00:08:04.435
&gt;&gt; Mike North: Yep.

112
00:08:05.946 --> 00:08:10.854
&gt;&gt; Mike North: So
json-schema.org is a place where you can

113
00:08:10.854 --> 00:08:14.987
see there are many specifications for

114
00:08:14.987 --> 00:08:19.648
package JSON, and various other things.

115
00:08:21.690 --> 00:08:24.572
&gt;&gt; Mike North: Let me make sure that
I am looking at the right thing.

116
00:08:28.739 --> 00:08:30.066
&gt;&gt; Mike North: Let me do a quick Google.

117
00:08:41.829 --> 00:08:43.530
&gt;&gt; Mike North: Yep, it is correct.

118
00:08:43.530 --> 00:08:50.313
All right, so for example if we were
to look at Babble RC is JSON schema.

119
00:08:52.346 --> 00:08:54.110
&gt;&gt; Mike North: It looks like this.

120
00:08:54.110 --> 00:08:58.550
So we get nice auto-complete
right in our editor here.

121
00:08:58.550 --> 00:09:01.920
And that's what telling us that
those are the valid options here.

122
00:09:01.920 --> 00:09:07.430
So we would basically say we want
TypeScript to compile us ES2017, meaning

123
00:09:07.430 --> 00:09:13.790
it's gonna do things like leaving those
JavaScript classes completely in tact.

124
00:09:13.790 --> 00:09:17.950
It'll leave them intact, it's just
gonna do the type definition stuff.

125
00:09:17.950 --> 00:09:19.990
It won't even mess with
the generator functions.

126
00:09:19.990 --> 00:09:22.530
It'll let Babble handle
that kind of thing.

127
00:09:22.530 --> 00:09:26.880
It'll only take away very
TypeScript specific things and

128
00:09:26.880 --> 00:09:34.040
leave us with almost no
advanced modern JavaScript,

129
00:09:34.040 --> 00:09:39.090
having been boiled down into simpler
stuff that older browsers can understand.

130
00:09:39.090 --> 00:09:42.000
And then you would let Babbel
take everything from that point

131
00:09:42.000 --> 00:09:43.180
the rest of the way.

132
00:09:43.180 --> 00:09:48.900
The benefit being now that
all of your JavaScript and

133
00:09:48.900 --> 00:09:52.970
all of your TypeScript in terms of
classes, and generator functions, and

134
00:09:52.970 --> 00:09:56.950
things like that,
they were all processed by the same tool.

135
00:09:56.950 --> 00:10:00.550
And they're all going to work together
just as if you had been using

136
00:10:00.550 --> 00:10:03.300
Babble alone without TypeScript,
does that make sense?

137
00:10:03.300 --> 00:10:03.930
&gt;&gt; Speaker 2: Yep, thank you.

138
00:10:07.163 --> 00:10:08.271
&gt;&gt; Mike North: All right.

139
00:10:11.129 --> 00:10:15.397
&gt;&gt; Mike North: And by the way you would
also do this, you would say I want to

140
00:10:15.397 --> 00:10:20.300
generate ES 6 modules instead
of generating common JS modules.

141
00:10:20.300 --> 00:10:24.560
We're currently building
common JS modules just so that

142
00:10:25.880 --> 00:10:31.431
Node and our browser-base code can
kinda share that one API keys file.

