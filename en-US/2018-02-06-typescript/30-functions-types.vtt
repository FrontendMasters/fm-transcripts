WEBVTT

1
00:00:00.220 --> 00:00:02.170
&gt;&gt; Mike North: So
back into the world of TypeScript.

2
00:00:02.170 --> 00:00:07.070
So we talked about object literals,
rest and spread properties, getters and

3
00:00:07.070 --> 00:00:08.520
setters.

4
00:00:08.520 --> 00:00:13.360
We're gonna shift gears now,
move away from objects and into functions.

5
00:00:14.650 --> 00:00:18.960
So functions have types,
just like any other value in JavaScript.

6
00:00:20.890 --> 00:00:24.305
They have a first class value type in
JavaScript, or a first class value type in

7
00:00:24.305 --> 00:00:27.770
JavaScript, and
a first class value type in TypeScript.

8
00:00:27.770 --> 00:00:30.983
So on top we have a function type.

9
00:00:30.983 --> 00:00:35.603
And you can see like any other value,
we've got the name of a variable,

10
00:00:35.603 --> 00:00:38.300
a colon, and then something.

11
00:00:38.300 --> 00:00:40.472
And that something describes the type.

12
00:00:40.472 --> 00:00:44.164
And what we have here is the arrow
function notation here, and

13
00:00:44.164 --> 00:00:46.720
I advise that you always use this, right?

14
00:00:46.720 --> 00:00:49.294
There are other things
you may see out there but

15
00:00:49.294 --> 00:00:52.726
I advise that like this is the more
conventional thing to do for

16
00:00:52.726 --> 00:00:55.238
TypeScript that is
written from here on out.

17
00:00:55.238 --> 00:01:00.410
And what we have here are arguments having
particular names, and particular types.

18
00:01:00.410 --> 00:01:03.470
And a return type, and
that's what that fat arrow is used for.

19
00:01:03.470 --> 00:01:05.660
It almost looks like an arrow function,

20
00:01:05.660 --> 00:01:09.570
except what we're returning is
not an expression, it's a type.

21
00:01:11.340 --> 00:01:13.660
Below, we have the value of that function.

22
00:01:13.660 --> 00:01:17.540
So this up top,
you can call this a variable declaration.

23
00:01:17.540 --> 00:01:20.100
And on the bottom,
you can call this a variable assignment.

24
00:01:20.100 --> 00:01:21.760
They kind of look the same.

25
00:01:21.760 --> 00:01:28.030
Note that if we already know that like
this function has a particular type,

26
00:01:28.030 --> 00:01:34.015
we are freed from having to do any
type annotations on that second line.

27
00:01:34.015 --> 00:01:38.659
Because we already know it's
the same thing as like when we say,

28
00:01:38.659 --> 00:01:43.475
if we were to say we've got a card and
we define that this is a card and

29
00:01:43.475 --> 00:01:49.630
then we pass something in, it's gonna
figure out what's going on there.

30
00:01:49.630 --> 00:01:53.420
Or a better example would be if we say
we have a empty array of numbers and

31
00:01:53.420 --> 00:01:57.870
we've defined that this variable
is of type numbers square bracket.

32
00:01:57.870 --> 00:02:01.360
On the right hand side, we can just have
an empty array literal and we're fine.

33
00:02:01.360 --> 00:02:03.781
That's a numbered array.

34
00:02:03.781 --> 00:02:06.797
Typically, you only need types on
one side of the assignment operator.

35
00:02:09.005 --> 00:02:11.440
&gt;&gt; Mike North: So, that's pretty cool.

36
00:02:11.440 --> 00:02:17.070
And again, you can use this anywhere else
that you would use type annotations.

37
00:02:17.070 --> 00:02:21.830
Meaning if you had an array of functions.

38
00:02:21.830 --> 00:02:25.370
That may seem strange.

39
00:02:25.370 --> 00:02:27.760
But that's how listeners work, right?

40
00:02:27.760 --> 00:02:31.340
Add a mouse listener, so
we create an array of functions.

41
00:02:31.340 --> 00:02:34.086
And then we loop over that array and
then evoke each one of those functions.

42
00:02:34.086 --> 00:02:37.770
And you could define that
like probably wrapping

43
00:02:37.770 --> 00:02:40.380
that whole function type in parentheses.

44
00:02:40.380 --> 00:02:43.230
And adding square brackets to
the end of it and there you go.

45
00:02:43.230 --> 00:02:48.144
You've got an array of functions and
each one of those functions should take

46
00:02:48.144 --> 00:02:52.597
arguments of certain types and
have a return type that matches that,

47
00:02:52.597 --> 00:02:56.801
which is fantastic.
&gt;&gt; Mike North: So,

48
00:02:56.801 --> 00:02:59.880
we can use interfaces to
define function types as well.

49
00:02:59.880 --> 00:03:05.599
This is starting to get a little abstract.

50
00:03:05.599 --> 00:03:11.695
So you would call this an interface
that describes the call signature,

51
00:03:11.695 --> 00:03:16.480
right, the call signature
like a function call.

52
00:03:16.480 --> 00:03:20.674
So on the left side instead of the name
of a property, we have parentheses.

53
00:03:20.674 --> 00:03:25.780
Think of those as like the parentheses
that indicate you're invoking a function

54
00:03:25.780 --> 00:03:29.580
as opposed to getting
a value of off something.

55
00:03:29.580 --> 00:03:30.760
Does that make sense to everyone?

56
00:03:31.920 --> 00:03:34.230
And so what we're saying here for
this interface,

57
00:03:35.970 --> 00:03:39.766
we expect to receive as
an argument a mouse event.

58
00:03:40.850 --> 00:03:45.060
And the return type is void.

59
00:03:45.060 --> 00:03:49.830
So if we have a click listener here,
we can use that click listener,

60
00:03:49.830 --> 00:03:54.280
we can basically say, you're gonna receive
an event, and then you can console log.

61
00:03:54.280 --> 00:03:56.060
We don't have to return anything.

62
00:03:56.060 --> 00:04:00.450
And in fact, we can add this event
listener in the following way.

63
00:04:00.450 --> 00:04:05.581
So the way this works, and that works.
&gt;&gt; Mike North: So

64
00:04:05.581 --> 00:04:09.962
the way this works, it ensures that these

65
00:04:09.962 --> 00:04:15.760
functions are bound to
the appropriate context.

66
00:04:15.760 --> 00:04:19.069
So hopefully you should at least at some

67
00:04:20.460 --> 00:04:23.180
level where you kind of
know it when you see it.

68
00:04:23.180 --> 00:04:27.040
You should have an understanding for
how this works in JavaScript, right?

69
00:04:27.040 --> 00:04:29.680
It is the calling context of the function.

70
00:04:29.680 --> 00:04:33.280
In this case you might
have a click listener

71
00:04:33.280 --> 00:04:38.080
that really depends on being
called in a particular context.

72
00:04:38.080 --> 00:04:43.390
And what we're saying here is that,
click listeners, when you refer to this,

73
00:04:43.390 --> 00:04:47.580
it can only be referring to a window type.

74
00:04:47.580 --> 00:04:51.948
So this would be a situation where,
when you invoke these functions,

75
00:04:51.948 --> 00:04:55.291
you are going to invoke it
in a very specific context.

76
00:04:55.291 --> 00:04:58.338
And that prevents anyone who is
implementing one of these things.

77
00:04:58.338 --> 00:05:03.998
Right, if you implemented a different
click listener in this second part here,

78
00:05:03.998 --> 00:05:08.826
and you were saying like,
this.x = 57 like you expected some

79
00:05:08.826 --> 00:05:13.760
other thing there, you can't just go and
treat it like any old thing.

80
00:05:13.760 --> 00:05:17.260
You must treat it as a window object,
right.

81
00:05:17.260 --> 00:05:24.250
So if for example you were to try to
invoke it directly like this, right?

82
00:05:24.250 --> 00:05:30.690
Where undefined is the calling
context in strict mode,

83
00:05:30.690 --> 00:05:34.809
undefined is the calling context.

84
00:05:34.809 --> 00:05:37.495
Basically it's saying
the calling context is void,

85
00:05:37.495 --> 00:05:40.510
you can't just invoke
a mouseListener like this.

86
00:05:40.510 --> 00:05:44.945
You'd have to do myListener.apply

87
00:05:44.945 --> 00:05:49.990
window comma bracket new MouseEvent.

88
00:05:49.990 --> 00:05:51.470
Does that make sense?

89
00:05:51.470 --> 00:05:55.210
So this gives us type safety even on
the calling context, which is fantastic

