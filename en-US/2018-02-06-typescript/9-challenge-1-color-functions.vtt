WEBVTT

1
00:00:00.130 --> 00:00:02.300
&gt;&gt; Mike North: Let's look
at our first exercise here,

2
00:00:02.300 --> 00:00:04.370
we're just gonna do a little warmup.

3
00:00:04.370 --> 00:00:09.587
This is an exercise I give to just
JavaScript programmers a lot.

4
00:00:09.587 --> 00:00:14.746
And we're gonna do it with these
primitive type annotations, and

5
00:00:14.746 --> 00:00:19.640
we might get a chance to use a shape
as a type annotation as well.

6
00:00:21.330 --> 00:00:24.630
So, if you start up your project,
if you check your code out,

7
00:00:24.630 --> 00:00:28.707
install al of those dependencies,
follow the instructions in the read me.

8
00:00:28.707 --> 00:00:31.407
You'll see that in the exercises
folder there is a sub

9
00:00:31.407 --> 00:00:33.089
folder called color functions.

10
00:00:33.089 --> 00:00:36.490
And the sub folders have exercises, right,

11
00:00:36.490 --> 00:00:42.320
those are each individual projects that
we're gonna do throughout the day.

12
00:00:43.870 --> 00:00:48.161
And you'll see that in
this color-utils.ts file

13
00:00:48.161 --> 00:00:53.050
we're gonna need to create two functions,
rgbToHex and hexToRgb.

14
00:00:54.360 --> 00:00:58.980
rgbToHex should take three 8 bit
color channels, those are numbers

15
00:00:58.980 --> 00:01:03.970
having a value of between 0 and 255,
corresponding to red, green and blue.

16
00:01:03.970 --> 00:01:06.137
And it should return
the corresponding hex string.

17
00:01:06.137 --> 00:01:09.324
So if you have used any CSS colors before,

18
00:01:09.324 --> 00:01:13.162
this is the kind of hex
string we're looking for.

19
00:01:13.162 --> 00:01:17.413
hexToRgb should basically do
the conversion in the other direction it

20
00:01:17.413 --> 00:01:20.878
takes as an argument either a 3 or
6-digit hex string.

21
00:01:20.878 --> 00:01:23.991
And it returns an object with
the properties R, G and B,

22
00:01:23.991 --> 00:01:27.450
corresponding to the red,
green, and blue color channels.

23
00:01:28.640 --> 00:01:35.411
Both of these functions should be named
exports from the color-utils.ts module.

24
00:01:35.411 --> 00:01:38.827
If you have a question about what
a named export means, raise your hand,

25
00:01:38.827 --> 00:01:39.950
I'm happy to explain.

26
00:01:41.570 --> 00:01:46.250
If you're watching this video course, this
is probably one of the things you should

27
00:01:46.250 --> 00:01:51.180
look at some of like
Kyle Simpson's JavaScript videos for.

28
00:01:51.180 --> 00:01:55.972
But we wanna be able to bring these
functions individually by name

29
00:01:55.972 --> 00:02:00.676
into other files, named exports
are what we use in TypeScript,

30
00:02:00.676 --> 00:02:03.304
this is the advised best practice.

31
00:02:03.304 --> 00:02:07.375
I'm gonna give you some hints because the
point here is to work with TypeScript and

32
00:02:07.375 --> 00:02:10.750
not worry about the actual color or
conversion stuff.

33
00:02:10.750 --> 00:02:16.177
So converting a string to an integer,
of course you can use parseInt for

34
00:02:16.177 --> 00:02:21.523
that, converting an integer into
its hexadecimal representation.

35
00:02:21.523 --> 00:02:27.688
You will call on that number, you'll call
two string and pass it an argument of 16.

36
00:02:27.688 --> 00:02:33.005
So you're saying give me the string
representation of this number in base 16,

37
00:02:33.005 --> 00:02:33.560
right?

38
00:02:33.560 --> 00:02:38.624
So that would give you for
124 it will give you 7c.

39
00:02:38.624 --> 00:02:42.636
And then the third example here is in
the other direction it take 7c and

40
00:02:42.636 --> 00:02:44.749
give me the decimal version of this.

41
00:02:45.840 --> 00:02:50.992
So like the 124 in this case,
that's sort of from 0 to 255,

42
00:02:50.992 --> 00:02:57.984
7c, that would be from 00 through FF, two
different ways of representing that color.

43
00:02:57.984 --> 00:03:01.427
You should be able to run npm
test color-functions, and

44
00:03:01.427 --> 00:03:04.809
you should see a bunch of
failing tests waiting for you.

45
00:03:04.809 --> 00:03:08.965
Your job is to fill in those
functions that are missing and

46
00:03:08.965 --> 00:03:11.630
make those failing tests pass.

47
00:03:11.630 --> 00:03:16.056
And I'm just gonna give you since this
is the first exercise I wanna give you

48
00:03:16.056 --> 00:03:17.473
a little kick off here.

49
00:03:17.473 --> 00:03:22.028
So we'll go into our exercises folder,
we'll go into color functions,

50
00:03:22.028 --> 00:03:23.500
source, color utils.

51
00:03:23.500 --> 00:03:25.830
And you're gonna start with
something that looks like this.

52
00:03:36.186 --> 00:03:39.863
&gt;&gt; Mike North: And your job is to
fill in those functions using type

53
00:03:39.863 --> 00:03:44.970
annotations to make sure that only
the right stuff can be passed.

54
00:03:44.970 --> 00:03:50.850
The way we'd run the test is
mpm test color functions.

55
00:03:54.409 --> 00:03:59.180
&gt;&gt; Mike North: You should see,
&gt;&gt; Mike North: A bunch of failing tests.

56
00:03:59.180 --> 00:04:04.153
So let's take 20 minutes, make sure
we're all set up, and that the project's

57
00:04:04.153 --> 00:04:08.499
working for everyone, and make sure
you can get all these test to pass.

58
00:04:08.499 --> 00:04:12.017
Whenever we're talking about passing
tests, you also wanna make sure,

59
00:04:12.017 --> 00:04:16.620
particularly if you're using Visual Studio
code, that you see no problems down here.

60
00:04:16.620 --> 00:04:19.236
So when TypeScript complains about,

61
00:04:19.236 --> 00:04:23.730
like you're passing the wrong type
into this function and so on,

62
00:04:23.730 --> 00:04:28.878
that's separate from a test failure but
we also wanna make sure that part of

63
00:04:28.878 --> 00:04:34.372
our goal is to make sure the type system
is not complaining to us about anything.

64
00:04:34.372 --> 00:04:39.583
So you can check this little indication
down here, this area for problems and

65
00:04:39.583 --> 00:04:44.430
there's also a problems tab here,
or if I were to say, go tocopy.ts.

66
00:04:44.430 --> 00:04:48.573
And replace what I had in there
with something like this,

67
00:04:48.573 --> 00:04:52.884
let x = 15;
&gt;&gt; Mike North: You can see it's

68
00:04:52.884 --> 00:04:55.340
saying type a5 is not
assignable to number.

69
00:04:55.340 --> 00:04:58.370
So this is why I suggest
use Visual Studio Code or

70
00:04:58.370 --> 00:05:02.150
something that has rich
TypeScript support I don't

71
00:05:02.150 --> 00:05:06.700
know of anything better than Visual Studio
code for developing in TypeScript today.

72
00:05:06.700 --> 00:05:10.730
So let's take 20 minutes and
we'll see you then for the solution.

73
00:05:10.730 --> 00:05:16.163
I'm gonna show you a way that we can run
little snippets of TypeScript code and

74
00:05:16.163 --> 00:05:20.856
see what the output will be cuz
this is a new programming language.

75
00:05:20.856 --> 00:05:25.134
And we're using to being able to go into
a browser, or into Node or something, and

76
00:05:25.134 --> 00:05:28.680
just write a couple of lines of code and
see what the output might be.

77
00:05:28.680 --> 00:05:33.678
So there are two ways of doing that,
the first way I'm gonna show you,

78
00:05:33.678 --> 00:05:39.524
I'm gonna go to TypeScript,
&gt;&gt; Mike North: typescriptlang.org,

79
00:05:39.524 --> 00:05:42.361
this is the main TypeScript webpage.

80
00:05:42.361 --> 00:05:45.270
And what they've got here is a playground.

81
00:05:45.270 --> 00:05:49.830
And what you can do is on the left you can
write some TypeScript, and on the right,

82
00:05:49.830 --> 00:05:53.410
it'll show you what the resultant
JavaScript would be.

83
00:05:53.410 --> 00:05:55.360
And if you open up your console,

84
00:05:55.360 --> 00:05:58.550
you can actually see
the output of that TypeScript.

85
00:05:58.550 --> 00:06:03.838
All right, so
if we go to console clear that,

86
00:06:03.838 --> 00:06:07.330
if we go like, let x = hello.

87
00:06:12.477 --> 00:06:15.868
&gt;&gt; Mike North: Console log x and
we click run, well.

88
00:06:17.919 --> 00:06:21.906
&gt;&gt; Mike North: It's gonna pop it up in
a new window, but if we inspect there,

89
00:06:21.906 --> 00:06:25.750
we can see there's our hello,
so that's one way to do it.

90
00:06:25.750 --> 00:06:29.548
This is the way to do it if
you're on an iPad or something,

91
00:06:29.548 --> 00:06:34.394
or if you're sharing with someone
that doesn't have stuff installed.

92
00:06:34.394 --> 00:06:39.392
I'll show you a great way to do
it inside Visual Studio Code,

93
00:06:39.392 --> 00:06:43.323
so I have an extension
here called Code Runner.

94
00:06:43.323 --> 00:06:44.368
This is great for

95
00:06:44.368 --> 00:06:49.980
just running little bits of code like you
are basically going to say run this file.

96
00:06:49.980 --> 00:06:53.613
So if you we were working in color
functions, we can put something at

97
00:06:53.613 --> 00:06:57.583
the bottom that were gonna just test
the things out and just run this file.

98
00:06:57.583 --> 00:07:02.622
So I've got cold runner there and
I'm going to see that tab open.

99
00:07:05.167 --> 00:07:09.316
&gt;&gt; Mike North: I actually keep a little
scratch file just in a root of my project

100
00:07:09.316 --> 00:07:12.630
and I get ignore it, I call mine two copy.

101
00:07:12.630 --> 00:07:17.628
You can call yours the same actually
cuz it's in the get ignore two copy

102
00:07:17.628 --> 00:07:21.620
anything it's gonna be ignore,
it won't check it in.

103
00:07:21.620 --> 00:07:27.959
But I could do something like this
like let x = 15 console log x and what

104
00:07:27.959 --> 00:07:35.052
that extension is added is this little
play button on the top right of my screen.

105
00:07:35.052 --> 00:07:40.050
I can hit that and we can see, whoop,
I got an error, what's going on?

106
00:07:40.050 --> 00:07:43.431
There it goes, I must have like
saved it half way through or

107
00:07:43.431 --> 00:07:46.677
something, here's our 15
that was just logged out.

108
00:07:46.677 --> 00:07:51.822
So you can do this not just
with this one file obviously,

109
00:07:51.822 --> 00:07:59.169
but we could have gone to that exercise
we were using, we were writing with the.

110
00:07:59.169 --> 00:08:03.986
You could have used the file
that you were working on and

111
00:08:03.986 --> 00:08:07.232
basically run your own set of tests or

112
00:08:07.232 --> 00:08:13.300
attempted to use your functions and
seen the output directly.

113
00:08:13.300 --> 00:08:17.325
And then this gives you a way to
not have to just look at the test

114
00:08:17.325 --> 00:08:21.730
pass-fail situation, but you can kind
of see what's going on in the middle.

