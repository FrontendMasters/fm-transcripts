WEBVTT

1
00:00:00.500 --> 00:00:03.430
&gt;&gt; Mike North: We also have,
this has been around in JavaScript for

2
00:00:03.430 --> 00:00:05.230
ages, Getters and Setters.

3
00:00:05.230 --> 00:00:06.550
An underappreciated,

4
00:00:06.550 --> 00:00:11.790
underutilized way that we can have
properties that are not value based.

5
00:00:11.790 --> 00:00:15.440
But they are based on a getter and
a setter.

6
00:00:15.440 --> 00:00:20.180
Some people call these, the computer
science jargon is an accessor and

7
00:00:20.180 --> 00:00:21.230
a mutator.

8
00:00:21.230 --> 00:00:25.170
One is used to access state and
the other's used to mutate state.

9
00:00:25.170 --> 00:00:27.070
But effectively here what we can see,

10
00:00:27.070 --> 00:00:32.220
is the getters job is to return
the value of a property.

11
00:00:32.220 --> 00:00:36.510
The setters job is a function that
takes care of whatever it means

12
00:00:36.510 --> 00:00:38.470
to set that property.

13
00:00:38.470 --> 00:00:41.420
And from the outside world we don't
know the difference between this and

14
00:00:41.420 --> 00:00:42.860
a value based property.

15
00:00:44.370 --> 00:00:46.660
There are ways to figure it out, right?

16
00:00:46.660 --> 00:00:52.990
You can get into the world of object
property descriptors and things like that.

17
00:00:52.990 --> 00:00:57.535
But the way you use it conventionally,
as you see down here, is I can just call

18
00:00:57.535 --> 00:01:02.710
name.full and use assignment and
we're just gonna end up,

19
00:01:02.710 --> 00:01:07.290
that will have the consequence of
invoking the getter or the setter.

20
00:01:07.290 --> 00:01:11.130
So in this case, you can see I've
created a derived property for

21
00:01:11.130 --> 00:01:16.040
full name that is just based on value
based properties for first and last name.

22
00:01:16.040 --> 00:01:19.190
And when you say, give me your full name,
I assemble it together, and

23
00:01:19.190 --> 00:01:20.330
return it to you.

24
00:01:20.330 --> 00:01:23.020
And when you say,
here's your full name, I'm setting it.

25
00:01:23.020 --> 00:01:27.700
It splits it apart, and updates the value
based properties correspondingly.

26
00:01:27.700 --> 00:01:30.660
So you can use this in TypeScript,
no problem.

27
00:01:30.660 --> 00:01:33.690
Really, really powerful idea.

28
00:01:33.690 --> 00:01:38.994
Just be sure that you you don't

29
00:01:38.994 --> 00:01:46.348
want to surprise your fellow developers.

30
00:01:46.348 --> 00:01:51.822
Not many people expect that an assignment
operator could have some significant

31
00:01:51.822 --> 00:01:56.980
side effects that could cause functions
to be invoked, and so on, right?

32
00:01:56.980 --> 00:02:02.680
This is uncommon enough that it could
cause a little bit of confusion.

33
00:02:02.680 --> 00:02:08.170
So, something like this, I would say
is fair game but, I definitely wouldn't

34
00:02:08.170 --> 00:02:13.290
cause like a setter to send a fetch
request out and to do all sorts of stuff,

35
00:02:13.290 --> 00:02:17.380
that would be really unexpected for
anyone else that touches your code.

