WEBVTT

1
00:00:00.030 --> 00:00:01.690
&gt;&gt; Mike North: So arrays.

2
00:00:01.690 --> 00:00:05.210
I hinted at this going through
the solution to the last exercise.

3
00:00:05.210 --> 00:00:10.082
You could have left that users
property in the account manager

4
00:00:10.082 --> 00:00:14.304
as an array of anys and
I think it would have been okay.

5
00:00:14.304 --> 00:00:17.800
It would just asked you to
assign it a particular type.

6
00:00:19.600 --> 00:00:22.610
But the default is they work exactly
the same way as JavaScript and

7
00:00:22.610 --> 00:00:26.850
this is, basically gets
an implicit any in this situation.

8
00:00:26.850 --> 00:00:30.590
Adding the type constraint makes things
a lot more consistent, a lot better,

9
00:00:30.590 --> 00:00:32.680
that's what this would look like, right?

10
00:00:32.680 --> 00:00:36.660
Hopefully that's no surprise, it's just
the type and then square brackets.

11
00:00:38.290 --> 00:00:44.550
Just remember, when you initialize those
class properties with empty arrays,

12
00:00:44.550 --> 00:00:46.430
make sure you provide a type.

13
00:00:46.430 --> 00:00:50.240
You will find that in this situation,
you will run into trouble.

14
00:00:50.240 --> 00:00:54.360
Because the type of items
will be an array of nevers.

15
00:00:55.390 --> 00:01:00.920
An array of a type that would never be
happy if you try to do something with it.

16
00:01:00.920 --> 00:01:02.850
So the consequences like that,

17
00:01:02.850 --> 00:01:06.350
you will error when you try to
push the number five into it.

18
00:01:06.350 --> 00:01:10.380
So you would simply have to say like,
an array of numbers or

19
00:01:10.380 --> 00:01:14.850
an array of any, whatever it is that you
want, but be sure you give it a type.

20
00:01:14.850 --> 00:01:19.530
&gt;&gt; Speaker 2: A little default to nevers
and not to give you a warning or.

21
00:01:19.530 --> 00:01:21.020
&gt;&gt; Mike North: It'll default to nevers,
and

22
00:01:21.020 --> 00:01:24.072
be uncooperative if you ever start
trying to put stuff into it.

23
00:01:24.072 --> 00:01:24.853
&gt;&gt; Speaker 2: Yeah, okay.

24
00:01:24.853 --> 00:01:28.640
&gt;&gt; Mike North: It will let you know
that there's a problem, for sure.

25
00:01:28.640 --> 00:01:31.750
And that's the kind of
problem it'll give you.

26
00:01:31.750 --> 00:01:33.290
It can't map five to a never.

27
00:01:35.360 --> 00:01:37.510
And here's the solution,
just do something like that.

28
00:01:37.510 --> 00:01:39.220
This is a good practice anyway.

29
00:01:39.220 --> 00:01:44.700
And the reasoning here is,
at the time we define a class,

30
00:01:44.700 --> 00:01:50.160
remember we only have, we have like,
compile time type safety here.

31
00:01:50.160 --> 00:01:52.490
We don't have runtime type safety.

32
00:01:52.490 --> 00:01:55.330
And until you start creating
instances of this class,

33
00:01:55.330 --> 00:01:59.240
there's no way to really know exactly
what you aim to push into this.

34
00:01:59.240 --> 00:02:04.800
And so at least at that moment where
you just have that array property, it's

35
00:02:04.800 --> 00:02:09.010
tough to know like the orders of functions
that you're gonna call on this thing.

36
00:02:09.010 --> 00:02:12.225
So that's why you end up
with that array of nevers.

37
00:02:12.225 --> 00:02:13.440
Question in chat?

38
00:02:13.440 --> 00:02:16.990
&gt;&gt; Speaker 3: Yeah, he's just asking if
there's any way to set the maximum number

39
00:02:16.990 --> 00:02:18.980
of array elements in TypeScript.

40
00:02:18.980 --> 00:02:21.350
&gt;&gt; Mike North: Maximum, like on any array?

41
00:02:21.350 --> 00:02:23.479
The maximum number of-
&gt;&gt; Speaker 3: No, just like in an array,

42
00:02:23.479 --> 00:02:24.668
for instance-
&gt;&gt; Mike North: Yes.

43
00:02:24.668 --> 00:02:25.914
&gt;&gt; Speaker 3: Number array.

44
00:02:25.914 --> 00:02:31.870
&gt;&gt; Mike North: So there is a way to define
a specific number of array elements.

45
00:02:31.870 --> 00:02:35.080
And that is by way of
something called tuples.

46
00:02:35.080 --> 00:02:40.490
&gt;&gt; Speaker 3: But there is no way they
do it like a max or a minimum amount?

47
00:02:40.490 --> 00:02:41.890
&gt;&gt; Mike North: Not that I am aware of,
I don't think so.

48
00:02:44.170 --> 00:02:46.750
So tuples are an array of fixed length.

49
00:02:46.750 --> 00:02:51.910
So if you had a specific size of
array that you were interested in,

50
00:02:51.910 --> 00:02:54.150
you could do something like this.

51
00:02:54.150 --> 00:02:57.150
You could say, and
here we're able to mix types,

52
00:02:57.150 --> 00:03:00.750
we're basically saying that
this is an ordered collection.

53
00:03:00.750 --> 00:03:03.910
We would say that this is
a tuple of size two, right?

54
00:03:03.910 --> 00:03:05.496
There are two elements in it.

55
00:03:05.496 --> 00:03:08.670
The first one must be a string,
the second one must be a number and so

56
00:03:08.670 --> 00:03:10.320
we can do something like this.

57
00:03:10.320 --> 00:03:11.914
And we would be absolutely fine.

58
00:03:11.914 --> 00:03:15.207
So often

59
00:03:15.207 --> 00:03:19.880
like when we combine these
things into a value, it's

60
00:03:19.880 --> 00:03:24.780
because it's two pieces of information
that means something together, right.

61
00:03:24.780 --> 00:03:28.600
And any consumers of this information
need to know what this means,

62
00:03:28.600 --> 00:03:32.310
they need to expect the right
pattern coming out.

63
00:03:32.310 --> 00:03:36.510
TypeScript's not gonna help you except
in terms of defining the types.

64
00:03:36.510 --> 00:03:40.400
By that I mean, of course you
don't have property names here,

65
00:03:40.400 --> 00:03:43.010
you've got just the zeroth
element on the first element.

66
00:03:43.010 --> 00:03:46.980
And so you as a consumer need to know
you are going to receive a tuple, and

67
00:03:46.980 --> 00:03:50.890
here is where in the tuple you can
look for particular pieces of data and

68
00:03:50.890 --> 00:03:52.034
what that data means.

69
00:03:52.034 --> 00:03:57.900
So destructured assignment works really
nicely with this where you can sort of,

70
00:03:57.900 --> 00:04:01.220
you could say pluck off
the name of the dependency and

71
00:04:01.220 --> 00:04:05.570
its version and you can basically unpack
the tuple really, really, easily.

72
00:04:05.570 --> 00:04:08.602
Just cuz you know, like if you
have the information to use this,

73
00:04:08.602 --> 00:04:12.047
you have all the information you need
to destructure this and unpack it.

74
00:04:17.126 --> 00:04:21.292
&gt;&gt; Mike North: So if we were to create
an array of tuples like we can regardless,

75
00:04:21.292 --> 00:04:22.860
is just another type.

76
00:04:22.860 --> 00:04:25.480
Just as we could create
an array of numbers.

77
00:04:25.480 --> 00:04:29.570
A tuple type is equally well suited for
that kind of thing.

78
00:04:29.570 --> 00:04:32.500
We could push that dependency in and
everything would be fine.

79
00:04:32.500 --> 00:04:34.640
We could push in something literally that,

80
00:04:34.640 --> 00:04:39.080
like an array literal,
a tuple literal I guess.

81
00:04:39.080 --> 00:04:44.710
That would cooperate, and
here we'd run into an error.

82
00:04:44.710 --> 00:04:52.460
So the type checking works on members, of
members of the tuple within the array so

83
00:04:52.460 --> 00:04:57.650
you start to see that like that structure
that checking is done recursively.

84
00:04:57.650 --> 00:05:00.360
Right, it's not just like,
this is an array of arrays and

85
00:05:00.360 --> 00:05:03.050
make sure that only arrays are pushed in.

86
00:05:03.050 --> 00:05:07.250
It looks for that specific structure,
the elements in the correct order.

87
00:05:07.250 --> 00:05:10.250
In fact if we tried to reverse these and
push the number first and

88
00:05:10.250 --> 00:05:12.030
the string second,
of course it's gonna break as well.

89
00:05:13.600 --> 00:05:17.400
But this is nice cuz now you can
be assured that everything in this

90
00:05:17.400 --> 00:05:20.760
array is going to be of that same format.

