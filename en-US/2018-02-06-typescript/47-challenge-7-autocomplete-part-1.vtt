WEBVTT

1
00:00:00.566 --> 00:00:04.890
&gt;&gt; Mike North: So we're gonna build
step by step an auto complete,

2
00:00:04.890 --> 00:00:11.640
where we can type in something like that
and we will get some results coming back.

3
00:00:11.640 --> 00:00:15.080
Now this is,
anyone who's built one of these things is,

4
00:00:15.080 --> 00:00:20.030
they know it is more complex
than it initially seems.

5
00:00:20.030 --> 00:00:22.140
Even what I just showed you now,

6
00:00:22.140 --> 00:00:27.420
it has a pitfall where we saw all of
those previous requests kind of come in.

7
00:00:27.420 --> 00:00:30.040
We have a raised condition here

8
00:00:30.040 --> 00:00:32.790
even at the point where I'm gonna
have you finish your last exercise.

9
00:00:32.790 --> 00:00:36.420
And together, we're gonna take
that to a logical conclusion where

10
00:00:36.420 --> 00:00:37.864
we can get rid of that weird behavior.

11
00:00:37.864 --> 00:00:40.610
Here just again, if you look carefully,

12
00:00:40.610 --> 00:00:45.460
all of my intermediate results end
up hitting and replacing each other.

13
00:00:47.740 --> 00:00:49.820
See how we have got that flashing?

14
00:00:49.820 --> 00:00:56.868
Or if we do,
&gt;&gt; Mike North: We're

15
00:00:56.868 --> 00:01:00.810
failing to ignore intermediate results,
even as a new key is pressed on.

16
00:01:00.810 --> 00:01:04.210
So the first thing we're gonna do
is build one of these objects here,

17
00:01:04.210 --> 00:01:08.390
one of the search result rows.

18
00:01:08.390 --> 00:01:11.900
And we're gonna implement this as
a stateless, functional component.

19
00:01:13.190 --> 00:01:16.741
So just to show you the exercise here.

20
00:01:18.808 --> 00:01:21.720
&gt;&gt; Mike North: So
here is an interface for place details.

21
00:01:21.720 --> 00:01:24.850
I've given you some code that we're
gonna walk through in a moment.

22
00:01:24.850 --> 00:01:28.270
This is sort of your starting point for
the project.

23
00:01:28.270 --> 00:01:32.160
And we're gonna move through
four stages of this exercise.

24
00:01:32.160 --> 00:01:36.220
This first stage is just about
those result row components.

25
00:01:36.220 --> 00:01:40.280
The next exercise is gonna be for the list
of results treating that as an array where

26
00:01:40.280 --> 00:01:44.160
we're handling the situation where
like the search is in progress.

27
00:01:44.160 --> 00:01:47.970
So we'll add in this idea of state,
like search is currently in progress,

28
00:01:47.970 --> 00:01:52.190
or the user hasn't typed in anything yet,
or there are no results found.

29
00:01:52.190 --> 00:01:57.860
There are different sort of application
states you have to deal with.

30
00:01:57.860 --> 00:02:02.040
Then we'll deal with this concept of
a stateless, or a stateful container

31
00:02:02.040 --> 00:02:07.620
component wrapping presentation component,
this is a popular react design pattern.

32
00:02:07.620 --> 00:02:12.170
And then finally we will deal with
handling the asynchrony ourselves,

33
00:02:12.170 --> 00:02:15.730
the asynchronous work ourselves
instead of using async in a way.

34
00:02:15.730 --> 00:02:19.040
We will build our own async in
way in an effort to understand

35
00:02:19.040 --> 00:02:20.360
exactly what's going on here.

36
00:02:21.970 --> 00:02:23.540
So one of the things you're getting for

37
00:02:23.540 --> 00:02:28.970
free is interfaces that reflects the data
you're getting back from your API.

38
00:02:28.970 --> 00:02:35.100
This is great because now,
when you're receiving these objects,

39
00:02:35.100 --> 00:02:38.450
you basically already know what
properties you're allowed to use and

40
00:02:38.450 --> 00:02:41.070
the TypeScript compiler
will be happy with you.

41
00:02:41.070 --> 00:02:44.330
So, we want a stateless
functional react component for

42
00:02:44.330 --> 00:02:45.970
representing one of these items.

43
00:02:45.970 --> 00:02:49.090
And this is a row in that
list of search results.

44
00:02:49.090 --> 00:02:53.404
You're gonna wanna include at least
five pieces of data from this menu here.

45
00:02:53.404 --> 00:02:58.290
In it I've used just snapshots,
if you've used this before it takes

46
00:02:58.290 --> 00:03:03.510
HTML snapshots of a component in its
working state for various scenarios.

47
00:03:03.510 --> 00:03:06.380
So if you look in that folder
there is a file there that will

48
00:03:06.380 --> 00:03:09.240
give you some clues as
how to setup your HTML.

49
00:03:10.500 --> 00:03:15.710
If you're not clear as to how
to look at that, please ping me.

50
00:03:15.710 --> 00:03:17.900
And I will explain it to you.

51
00:03:17.900 --> 00:03:20.350
So we're gonna run npm test.

52
00:03:20.350 --> 00:03:21.060
Sorry.

53
00:03:21.060 --> 00:03:25.275
It's gonna be npm start autocomplete-sfc.

54
00:03:29.279 --> 00:03:30.512
&gt;&gt; Mike North: My mistake.

55
00:03:30.512 --> 00:03:33.330
npm start autocomplete-sfc.

56
00:03:33.330 --> 00:03:34.480
If you run npm test,

57
00:03:34.480 --> 00:03:38.600
it's gonna basically assert that your
HTML looks exactly like mine did.

58
00:03:39.640 --> 00:03:43.160
I care much less about your
passing that kind of test than

59
00:03:43.160 --> 00:03:45.580
getting some result
showing up on the screen.

60
00:03:45.580 --> 00:03:48.670
And know that as we progress
from exercise to exercise,

61
00:03:48.670 --> 00:03:51.320
you're gonna get a more
enriched starting point.

62
00:03:51.320 --> 00:03:53.870
So you're not carrying
your work along with you.

63
00:03:53.870 --> 00:03:56.480
We're gonna make sure we
all stay on the same path.

64
00:03:56.480 --> 00:04:00.480
And you will get my solution to
this problem in the next exercise

65
00:04:00.480 --> 00:04:05.500
instead of having to worry about getting
off track on this first step and

66
00:04:05.500 --> 00:04:06.790
that causing trouble downstream.

67
00:04:08.200 --> 00:04:11.077
So I'm gonna walk you through
the starting point for the code, so

68
00:04:11.077 --> 00:04:13.397
you know the ingredients
you have to work with here.

69
00:04:23.267 --> 00:04:26.802
&gt;&gt; Mike North: So here we're
starting up the stateless functional

70
00:04:26.802 --> 00:04:31.120
component exercise, and
this is what we get to start with.

71
00:04:31.120 --> 00:04:36.360
So you can see that I've given
you a hard-coded search already.

72
00:04:36.360 --> 00:04:40.230
So you are always searching for donuts, no
matter what you do, you're searching for

73
00:04:40.230 --> 00:04:41.300
donuts.

74
00:04:41.300 --> 00:04:44.170
And you don't have to worry
about how this data arrives.

75
00:04:44.170 --> 00:04:47.850
Your job is to turn these boring
components into something a little bit

76
00:04:47.850 --> 00:04:48.400
more rich.

77
00:04:50.360 --> 00:04:54.550
So if we look in the Autocomplete SFC,
which is Stateless Functional Components,

78
00:04:54.550 --> 00:04:56.440
we'll start with Index, and

79
00:04:56.440 --> 00:05:00.880
you can see we've got this app
component here, takes no props.

80
00:05:02.510 --> 00:05:09.830
Inside the app,
we've got a PlaceDetails state object.

81
00:05:09.830 --> 00:05:13.130
Don't worry about the state fullness here.

82
00:05:13.130 --> 00:05:18.986
Just understand that when we're rendering.

83
00:05:18.986 --> 00:05:23.595
So you're gonna wanna
have something like this,

84
00:05:23.595 --> 00:05:31.067
that passes in a place search result,
like these place result objects, right.

85
00:05:31.067 --> 00:05:32.993
You're gonna wanna make it so

86
00:05:32.993 --> 00:05:37.550
that you're passing that data into
a rich component that you define.

87
00:05:37.550 --> 00:05:41.048
You're gonna have to create your own file,
or maybe we have a starting point file.

88
00:05:46.599 --> 00:05:48.750
&gt;&gt; Mike North: Nope,
I'm on the solutions branch, whew.

89
00:05:48.750 --> 00:05:52.250
I thought I checked in the answer there.

90
00:05:54.500 --> 00:05:57.760
So there's your starting point,
[LAUGH] there's your starting point.

91
00:05:57.760 --> 00:05:59.460
We've got just a div here.

92
00:05:59.460 --> 00:06:03.320
So the file exists just to kind
of make this app work, and so

93
00:06:03.320 --> 00:06:05.210
it doesn't throw a bunch of errors.

94
00:06:05.210 --> 00:06:08.800
But your job is gonna basically be,
okay, instead of for

95
00:06:08.800 --> 00:06:12.220
each search result
rendering a paragraph tag.

96
00:06:12.220 --> 00:06:16.560
You're going to say, okay, well,
we're gonna create this rich component.

97
00:06:16.560 --> 00:06:20.270
And just use this idea of this place,
details,

98
00:06:20.270 --> 00:06:24.730
interface, and build that component out so

99
00:06:24.730 --> 00:06:29.510
that it looks kinda like
these snapshots here.

100
00:06:30.660 --> 00:06:34.870
Right, so if we get rid of some of that,
reclaim some space,

101
00:06:34.870 --> 00:06:39.490
you can see this would be
a good starting point for

102
00:06:39.490 --> 00:06:44.800
grabbing some HTML and seeing what
the desired end result might look like.

103
00:06:44.800 --> 00:06:47.800
So I'm gonna give you 20 minutes for this.

104
00:06:47.800 --> 00:06:52.220
And then we're gonna iteratively start
taking on more and more of this challenge,

105
00:06:52.220 --> 00:06:56.280
and we'll end up with that working
autocomplete by the end of the day.

