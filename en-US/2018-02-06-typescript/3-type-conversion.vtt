WEBVTT

1
00:00:00.025 --> 00:00:02.106
&gt;&gt; Mike North: So
we've talked about the types of data,

2
00:00:02.106 --> 00:00:04.909
we've talked about the ways
we can declare variables.

3
00:00:04.909 --> 00:00:08.709
And because Java Script's
a dynamically typed language,

4
00:00:08.709 --> 00:00:11.680
it's not an untyped language, types exist.

5
00:00:14.190 --> 00:00:18.540
As in most dynamically typed languages
things are converted as needed.

6
00:00:18.540 --> 00:00:23.145
So type conversion or type coercion,
that is this phenomenon where

7
00:00:23.145 --> 00:00:27.440
the language tries to basically
make sense of what you give it.

8
00:00:27.440 --> 00:00:29.610
So this one's pretty easy, 30 plus 7.

9
00:00:29.610 --> 00:00:31.730
There's no type conversion going on here.

10
00:00:33.480 --> 00:00:35.952
But if we were to do something like this,

11
00:00:35.952 --> 00:00:38.504
does anyone know what we might get?
&gt;&gt; Speaker 2: 44 of

12
00:00:38.504 --> 00:00:40.430
the string.
&gt;&gt; Mike North: Pardon?

13
00:00:40.430 --> 00:00:42.852
&gt;&gt; Speaker 2: A string of 44.

14
00:00:42.852 --> 00:00:46.700
It would have been a number.
&gt;&gt; Mike North: You're, you are half right.

15
00:00:46.700 --> 00:00:49.210
Do you have a guess?
&gt;&gt; Speaker 3: It's not gonna be 377,

16
00:00:49.210 --> 00:00:51.890
is it?
&gt;&gt; Mike North: It's gonna be 377, awesome.

17
00:00:53.280 --> 00:00:59.360
Yeah, so you're, the half was basically
whatever you use the addition operator.

18
00:00:59.360 --> 00:01:03.070
The plus operator, and
there's a string involved.

19
00:01:03.070 --> 00:01:05.400
JavaScript will try to treat
everything else as a string.

20
00:01:06.770 --> 00:01:08.200
Makes sense right?

21
00:01:08.200 --> 00:01:09.168
Not really.

22
00:01:09.168 --> 00:01:10.840
Do you have a question?
&gt;&gt; Speaker 3: Well, I was just gonna say,

23
00:01:10.840 --> 00:01:14.050
that plus always wants
to concatenate right?

24
00:01:14.050 --> 00:01:16.340
But if you did a minus
there it would do the math.

25
00:01:18.770 --> 00:01:19.630
&gt;&gt; Mike North: That's true,

26
00:01:19.630 --> 00:01:22.097
have you seen this before?
&gt;&gt; Speaker 3: No, no, sorry,

27
00:01:22.097 --> 00:01:26.330
I wasn't cheating.
&gt;&gt; Mike North: [LAUGH] All right,

28
00:01:26.330 --> 00:01:27.030
how about this one?

29
00:01:28.330 --> 00:01:33.398
What's gonna happen here?
&gt;&gt; Speaker 2: Number 37.

30
00:01:33.398 --> 00:01:34.990
&gt;&gt; Mike North: Number 37, so

31
00:01:34.990 --> 00:01:40.340
what we see here,
this is a different operator.

32
00:01:40.340 --> 00:01:43.030
It's the third use of the plus sign.

33
00:01:43.030 --> 00:01:46.020
So we've got arithmetic, addition, right.

34
00:01:46.020 --> 00:01:47.970
We've got string concatenation.

35
00:01:47.970 --> 00:01:50.870
This is called the unary + operator.

36
00:01:52.170 --> 00:01:55.923
And it just tries to convert
things into numbers, right.

37
00:01:55.923 --> 00:02:00.213
So the + operator here, when used with
strings it tries it converts all other

38
00:02:00.213 --> 00:02:05.250
operands, the things that the operator
is operating on, into strings.

39
00:02:05.250 --> 00:02:08.512
The unary plus operator tries
to convert things to a number.

40
00:02:11.547 --> 00:02:13.924
&gt;&gt; Mike North: Who's happy with this?

41
00:02:13.924 --> 00:02:15.730
There are no hands up in the room.

42
00:02:15.730 --> 00:02:17.600
This seems pretty confusing.

43
00:02:17.600 --> 00:02:23.250
This is like, people can be JavaScript
programmers for years and years and years.

44
00:02:23.250 --> 00:02:25.900
And this kind of thing still snags them,

45
00:02:25.900 --> 00:02:29.730
particularly when you're
dealing with the DOM.

46
00:02:29.730 --> 00:02:33.270
Has anyone ever gotten snagged by
an input with a number in an input, and

47
00:02:33.270 --> 00:02:36.587
you kind of forget that these
are always text values that come out.

48
00:02:36.587 --> 00:02:38.580
And now you're flip
flopping between things.

49
00:02:39.920 --> 00:02:42.634
Not having types holds us back, so

50
00:02:42.634 --> 00:02:46.948
TypeScript aims to address
some of this pain, right?

51
00:02:46.948 --> 00:02:51.679
To allow us to create JavaScript
that doesn't fall into any of those

52
00:02:51.679 --> 00:02:53.180
unintuitive traps.

