WEBVTT

1
00:00:00.130 --> 00:00:04.850
&gt;&gt; Mike North: We're going to add this
place search list component to this app so

2
00:00:04.850 --> 00:00:09.440
that we can start to see
different states of like

3
00:00:09.440 --> 00:00:13.010
having just type something in waiting for
results to come back and

4
00:00:13.010 --> 00:00:18.560
then seeing the results
themselves come through it.

5
00:00:18.560 --> 00:00:23.980
All right so and this is,
let me get my branches straight here.

6
00:00:23.980 --> 00:00:26.720
So that was previously exercise seven, so

7
00:00:26.720 --> 00:00:31.536
this is eight.
&gt;&gt; Mike North: So I've got a nice,

8
00:00:31.536 --> 00:00:34.080
clean branch here to work with.

9
00:00:34.080 --> 00:00:38.530
And we are working in autocomplete-2, so

10
00:00:38.530 --> 00:00:43.325
we're in this folder here.
&gt;&gt; Mike North: So

11
00:00:43.325 --> 00:00:46.910
the first thing we want to do is we
want to start running this app, right.

12
00:00:46.910 --> 00:00:52.391
So, we're going to say
NPM start autocomplete-2.

13
00:00:52.391 --> 00:00:55.086
And that'll fire the app up.

14
00:00:55.086 --> 00:00:59.120
And at this point it is
running on local host 3000, so

15
00:00:59.120 --> 00:01:02.240
if we refresh this is
what we see by default.

16
00:01:02.240 --> 00:01:03.500
This should be your starting point.

17
00:01:03.500 --> 00:01:08.250
I'm just gonna drop it in so
we can see that as we go.

18
00:01:08.250 --> 00:01:15.170
And what we're seeing here, so we'll start
with where the app sort is bootstrapped.

19
00:01:15.170 --> 00:01:18.610
And we can see we're rendering
an app inside the root element.

20
00:01:18.610 --> 00:01:22.710
This file doesn't really change
much from exercise to exercise

21
00:01:22.710 --> 00:01:24.530
the app component is different.

22
00:01:24.530 --> 00:01:28.610
We introduce this as we
kick this exercise off.

23
00:01:28.610 --> 00:01:30.570
And then the place search result list,

24
00:01:30.570 --> 00:01:35.140
this is where we're stringifying whatever
arguments are passed into this component.

25
00:01:36.300 --> 00:01:40.930
Now I could implement this as a sate list
component if I just let the outer app

26
00:01:40.930 --> 00:01:46.737
handle all of that state.
&gt;&gt; Mike North: I'm going to make this,

27
00:01:46.737 --> 00:01:50.350
well, I'll leave it stateless I guess.

28
00:01:50.350 --> 00:01:54.320
We can treat the outer component as
the thing that is dealing with the state.

29
00:01:54.320 --> 00:01:57.710
I'll just convert this
to an arrow function,

30
00:01:57.710 --> 00:02:00.610
obviously we've got an any
there that we wanna get rid of.

31
00:02:02.600 --> 00:02:05.210
So just for

32
00:02:05.210 --> 00:02:11.001
fun I'm gonna create a new interface here.
&gt;&gt; Mike North: And

33
00:02:11.001 --> 00:02:17.440
I'm gonna call this a result list props.

34
00:02:18.760 --> 00:02:21.589
And it's gonna look a lot
like the app state.

35
00:02:23.260 --> 00:02:24.118
&gt;&gt; Mike North: Right?

36
00:02:24.118 --> 00:02:29.070
We need to know whether, we basically need
all of these things plus something else.

37
00:02:30.110 --> 00:02:33.660
We need all of these things and

38
00:02:33.660 --> 00:02:39.860
we also want to have a search
function to pass in.

39
00:02:39.860 --> 00:02:42.480
So what I can is export this.

40
00:02:42.480 --> 00:02:45.754
And just extend the interface in here.

41
00:02:49.209 --> 00:02:52.783
&gt;&gt; Mike North: And vias code will let me,

42
00:02:52.783 --> 00:02:58.140
it'll resolve that import for me.

43
00:02:58.140 --> 00:03:00.900
So that's gonna be the interface
that I expect to be pass in.

44
00:03:00.900 --> 00:03:05.355
And the one thing that we're
looking to see here is,

45
00:03:05.355 --> 00:03:08.798
I wanna say it's an optional function,

46
00:03:08.798 --> 00:03:12.660
that can be used to handle
that type in there.

47
00:03:12.660 --> 00:03:15.479
I mean I make it optional
just because like for

48
00:03:15.479 --> 00:03:20.160
custom purposes maybe we just wanna
pass a term indirectly or resultless.

49
00:03:20.160 --> 00:03:26.220
And I don't want this to be like a hard
set thing that I absolutely must provide

50
00:03:26.220 --> 00:03:31.943
when I create this component.
&gt;&gt; Mike North: So

51
00:03:31.943 --> 00:03:39.750
this is going to be a function that takes
in a string and I don't care what it does.

52
00:03:39.750 --> 00:03:46.907
I don't care what it returns.
&gt;&gt; Mike North: Give

53
00:03:46.907 --> 00:03:49.000
ourselves some more space here.

54
00:03:49.000 --> 00:03:53.860
Okay, so now,
the benefit of having structure around our

55
00:03:53.860 --> 00:03:57.540
props here is I'm just gonna
call this low case p for props.

56
00:03:58.700 --> 00:04:00.719
And that lets me do something like this.

57
00:04:02.530 --> 00:04:05.900
Where I'm gonna see that
state come through, sorry,

58
00:04:05.900 --> 00:04:10.480
I'm gonna see those props come through
as soon as I make TypeScript happy.

59
00:04:10.480 --> 00:04:15.490
Now, where it is unhappy right now is,
I've now set this component

60
00:04:15.490 --> 00:04:19.950
must be past a certain number of things,
or you're not allowed to work.

61
00:04:21.770 --> 00:04:26.360
And down here obviously I'm
not following through on that.

62
00:04:26.360 --> 00:04:29.070
So the first thing I want to do
because the things that this

63
00:04:29.070 --> 00:04:31.520
place search result list needs.

64
00:04:31.520 --> 00:04:35.900
They are a super set of the state on
this component at least for right now.

65
00:04:35.900 --> 00:04:37.740
This kind of works.

66
00:04:37.740 --> 00:04:41.330
Now if we added state to
this app component that this

67
00:04:41.330 --> 00:04:43.180
place search result list needed.

68
00:04:43.180 --> 00:04:46.530
We'd probably have to have
another interface in here

69
00:04:46.530 --> 00:04:48.650
that was shared across these two things.

70
00:04:48.650 --> 00:04:50.190
And things would get more complicated.

71
00:04:50.190 --> 00:04:51.450
For right now it's pretty simple.

72
00:04:53.700 --> 00:04:57.900
So we'll first spread this state.

73
00:04:57.900 --> 00:05:01.700
So you're basically at everything
that's on the state object and

74
00:05:01.700 --> 00:05:03.520
in addition to that.

75
00:05:03.520 --> 00:05:08.290
We wanna provide this
handle search function and

76
00:05:08.290 --> 00:05:14.790
we'll put something there and
actually I can just

77
00:05:14.790 --> 00:05:22.209
pipe this right in this.trysearch
allright ,so now we're happy again.

78
00:05:26.070 --> 00:05:31.740
So, what we gonna do here is,
I forgot to do one last thing.

79
00:05:31.740 --> 00:05:35.030
So, when we pass a function
in like this and

80
00:05:35.030 --> 00:05:39.790
our intent is to hook it up to an input
element, we're gonna run in to a problem.

81
00:05:39.790 --> 00:05:44.640
And that is when, like you connect
a function to an input element,

82
00:05:44.640 --> 00:05:48.640
usually the domain in itself or
the window is the calling context of

83
00:05:48.640 --> 00:05:52.580
the function when it is invoked and
we want that,

84
00:05:52.580 --> 00:05:57.740
in this function here we refer to this,
we refer to the calling context.

85
00:05:57.740 --> 00:06:02.390
We can do something here to enforce
this to kind of make sure we set things

86
00:06:02.390 --> 00:06:06.922
properly.
&gt;&gt; Mike North: And

87
00:06:06.922 --> 00:06:12.840
say I the colon context here must be App,

88
00:06:12.840 --> 00:06:18.963
it is of type App.
&gt;&gt; Mike North: So

89
00:06:18.963 --> 00:06:22.536
now like as soon as I hook this up,
when I try to bind it here,

90
00:06:22.536 --> 00:06:27.700
I'll bring in the HTML, we'll run into the
error and I'll show you how we can fix it.

91
00:06:28.820 --> 00:06:31.640
So, the next thing I want is
the structure of my HTML.

92
00:06:31.640 --> 00:06:33.560
I'll get that from my snapshots.

93
00:06:34.670 --> 00:06:36.300
This looks reasonable.

94
00:06:41.800 --> 00:06:51.056
Oop, that was not a copy, was it?
&gt;&gt; Mike North: Come on clipboard,

95
00:06:51.056 --> 00:06:55.470
work for me.
&gt;&gt; Mike North: There we go.

96
00:06:55.470 --> 00:07:02.872
All right, so we can get away from that.
&gt;&gt; Mike North: And

97
00:07:02.872 --> 00:07:05.950
we're gonna hook up to
this on change event.

98
00:07:08.480 --> 00:07:12.050
Let me fix this up a little, so
it's not horrendous to read.

99
00:07:18.880 --> 00:07:20.463
&gt;&gt; Mike North: Snapshots are great but

100
00:07:20.463 --> 00:07:22.443
they don't make good copy and

101
00:07:22.443 --> 00:07:26.380
pasting I'm finding out.
&gt;&gt; Speaker 2: Can't you highlight it and

102
00:07:26.380 --> 00:07:30.100
do format selected whatever it is.
&gt;&gt; Mike North: Yeah,

103
00:07:30.100 --> 00:07:33.320
I probably can.
&gt;&gt; Speaker 2: It doesn't always work.

104
00:07:33.320 --> 00:07:37.110
&gt;&gt; Mike North: But, not quite.

105
00:07:37.110 --> 00:07:41.090
I can't do, there is key,
a key code that I've.

106
00:07:41.090 --> 00:07:43.610
So my key code of the week to
try to remember for [CROSSTALK]

107
00:07:43.610 --> 00:07:44.996
&gt;&gt; Speaker 2: Command J for

108
00:07:44.996 --> 00:07:46.310
me.
&gt;&gt; Mike North: For

109
00:07:46.310 --> 00:07:47.770
collapse into one line?
&gt;&gt; Speaker 2: Yeah.

110
00:07:47.770 --> 00:07:49.270
&gt;&gt; Mike North: Yeah, so if we do that.

111
00:07:51.110 --> 00:07:51.930
So beautiful!

112
00:07:53.250 --> 00:07:54.810
That's my tip of the week.

113
00:07:54.810 --> 00:07:58.210
Or what I'm trying to remember this week.

114
00:07:58.210 --> 00:08:02.680
All right so now we've got the Rough
structure of this component.

115
00:08:02.680 --> 00:08:04.410
And this is just an error message,

116
00:08:04.410 --> 00:08:07.200
we don't need to give it any more
space than it currently has.

117
00:08:07.200 --> 00:08:11.640
So onChange, we'll just hook up, and
we know that our props object has

118
00:08:11.640 --> 00:08:14.850
this handle search function,
and it's gonna complain to us.

119
00:08:14.850 --> 00:08:18.030
Because what it's basically telling me,

120
00:08:18.030 --> 00:08:22.820
if we were to read into all of this, and
why don't we read into it, by the way?

121
00:08:22.820 --> 00:08:24.880
We can see that a change event handler.

122
00:08:24.880 --> 00:08:30.100
Okay, so we're diving into what the value
of this unchanged thing is expected to be.

123
00:08:30.100 --> 00:08:32.000
So this is a change event handler,

124
00:08:32.000 --> 00:08:37.460
which is an event handler,
which handles a synthetic event.

125
00:08:37.460 --> 00:08:38.770
And basically,

126
00:08:38.770 --> 00:08:43.390
we're not guaranteed at any point that
we're gonna get the right calling context.

127
00:08:43.390 --> 00:08:49.376
There are no guarantees here.
&gt;&gt; Mike North: So,

128
00:08:49.376 --> 00:08:55.310
essentially, like, actually, let's see
if we can dive in a little deeper here.

129
00:08:55.310 --> 00:09:00.280
Is this gonna.
&gt;&gt; Mike North: Sometimes

130
00:09:00.280 --> 00:09:05.330
they'll even declare that they're
gonna be called in the window context.

131
00:09:05.330 --> 00:09:10.510
But I don't see that here.
&gt;&gt; Mike North: What I do see,

132
00:09:10.510 --> 00:09:14.970
though, is that handle search is not
going to work in this situation.

133
00:09:16.860 --> 00:09:20.520
And we would also need to do this,
event and

134
00:09:20.520 --> 00:09:30.090
then
&gt;&gt; Mike North: And

135
00:09:30.090 --> 00:09:32.760
this is possibly undefined,
so here's what we can do.

136
00:09:38.690 --> 00:09:41.374
&gt;&gt; Mike North: Up here, we'll just say,

137
00:09:41.374 --> 00:09:48.411
Let handler =.
&gt;&gt; Mike North: handleSearch

138
00:09:48.411 --> 00:09:53.807
or.
&gt;&gt; Mike North: Nothing.

139
00:09:57.070 --> 00:09:57.870
&gt;&gt; Mike North: And this is

140
00:09:57.870 --> 00:10:06.330
complaining
&gt;&gt; Mike North: There we go.

141
00:10:06.330 --> 00:10:07.730
It's too many parenthesis here.

142
00:10:07.730 --> 00:10:10.758
So essentially, and
I can optimize this more and say like.

143
00:10:10.758 --> 00:10:16.070
Const NO_OP = that.

144
00:10:16.070 --> 00:10:16.735
Just say.

145
00:10:16.735 --> 00:10:18.560
NO_OP.

146
00:10:18.560 --> 00:10:20.000
we fall back to NO_OP.

147
00:10:20.000 --> 00:10:22.660
So basically, we're gonna bind
a function to it either way.

148
00:10:23.670 --> 00:10:25.690
Only in the event that we actually,

149
00:10:25.690 --> 00:10:28.810
like, had something there,
could we make that work.

150
00:10:28.810 --> 00:10:32.930
There is another way to do it, you could
have basically built an object on it, so

151
00:10:32.930 --> 00:10:33.940
here's the other way.

152
00:10:33.940 --> 00:10:38.740
We could have said handler equals this,
and

153
00:10:38.740 --> 00:10:43.880
then if, handleSearch,

154
00:10:45.360 --> 00:10:52.900
then we will say handler.onChange equals.

155
00:11:00.110 --> 00:11:01.250
&gt;&gt; Mike North: I'll make this happen in

156
00:11:01.250 --> 00:11:08.831
a second.
&gt;&gt; Mike North: So

157
00:11:08.831 --> 00:11:14.019
we could have done something like this.

158
00:11:17.540 --> 00:11:23.750
onChange is gonna be a, whatever this is,
reaction change event html input element.

159
00:11:40.480 --> 00:11:41.560
&gt;&gt; Mike North: It's not letting me

160
00:11:41.560 --> 00:11:42.470
have access to that.

161
00:11:42.470 --> 00:11:46.470
So, we could just do, we'd have to,
so here's the overall strategy.

162
00:11:46.470 --> 00:11:50.510
Build an object and spread it, and like,
if there's no, if it's an empty object

163
00:11:50.510 --> 00:11:53.200
spreading it does nothing,
if there's a property on that object,

164
00:11:53.200 --> 00:11:58.480
it'll add that key value paired to
whatever you're passing it into the input.

165
00:11:59.720 --> 00:12:04.380
As you can see, this is complicated enough
that it's like, getting pretty fugly here.

166
00:12:04.380 --> 00:12:07.210
So, what we're gonna do is just
go back to the original one.

167
00:12:07.210 --> 00:12:11.590
Handler equals this or NO_OP.

168
00:12:11.590 --> 00:12:15.480
We fall back to the NO_OP like this, so

169
00:12:15.480 --> 00:12:20.170
no matter what,
this is a function, and now

170
00:12:21.270 --> 00:12:26.340
we're saying the calling context avoid
is not assignable to this of type app.

171
00:12:26.340 --> 00:12:29.980
Finally, we've run into a situation,
where we've been reminded of,

172
00:12:29.980 --> 00:12:35.530
one of these things about react is when
we bind functions to dom elements,

173
00:12:35.530 --> 00:12:38.340
or when we connect functions to
dom elements, we have to make sure

174
00:12:38.340 --> 00:12:42.080
that in the component, the context in
which they're supposed to be called,

175
00:12:42.080 --> 00:12:46.740
we have to take care of packaging
it with its calling context.

176
00:12:46.740 --> 00:12:49.010
So this is the typical
pattern you see over and

177
00:12:49.010 --> 00:12:55.530
over.
&gt;&gt; Mike North: And now it should be happy,

178
00:12:57.600 --> 00:13:06.510
come on.
&gt;&gt; Mike North: No,

179
00:13:06.510 --> 00:13:11.290
you're not happy?
&gt;&gt; Mike North: This calling context of

180
00:13:11.290 --> 00:13:17.080
void.
&gt;&gt; Mike North: Hm.

181
00:13:18.240 --> 00:13:19.850
All right, we'll let that go for a moment.

182
00:13:21.880 --> 00:13:23.630
I'll see if I can get that working,
when we come back.

183
00:13:25.350 --> 00:13:30.370
So in any case,
what we should now see is that we

184
00:13:30.370 --> 00:13:36.240
can type something in, and we should
see that this function gets called,

185
00:13:36.240 --> 00:13:40.140
and we will.
&gt;&gt; Mike North: My

186
00:13:40.140 --> 00:13:42.050
dev tools hooked up to the browser again.

187
00:13:43.260 --> 00:13:46.460
So we should see that
if I type something in,

188
00:13:46.460 --> 00:13:48.400
there are some fetches going out, right?

189
00:13:48.400 --> 00:13:51.290
And we see some data coming back,
and this, you know,

190
00:13:51.290 --> 00:13:54.850
conceivably is businesses
that start with the letter A.

191
00:13:54.850 --> 00:13:56.539
So great, that's fantastic.

192
00:13:58.470 --> 00:14:04.120
So now it's time for us to deal with
the various scenarios that we could be in.

193
00:14:05.660 --> 00:14:10.380
So really, like, it is the contents here
that are probably gonna end up changing.

194
00:14:10.380 --> 00:14:14.620
We have a list of search results, and
you can see that in this first scenario,

195
00:14:14.620 --> 00:14:18.210
we've got like an indication that
we're searching for something.

196
00:14:19.390 --> 00:14:22.130
It's possible that we can
kind of abstract away,

197
00:14:22.130 --> 00:14:26.510
like whatever this list of things is,
into a variable, and

198
00:14:26.510 --> 00:14:30.910
do some switching based on state, and then
ultimately render that variable in there.

199
00:14:30.910 --> 00:14:39.916
Something like this.

200
00:14:39.916 --> 00:14:45.870
Let result set equal that, right?

201
00:14:45.870 --> 00:14:50.650
So in this situation, like and
this will, sorry it's so narrow here.

202
00:14:50.650 --> 00:14:53.970
This will work just as it has been, right?

203
00:14:53.970 --> 00:14:56.132
It's the same exact thing
that we're seeing here.

204
00:14:56.132 --> 00:15:01.000
But the difference is now,

205
00:15:01.000 --> 00:15:04.590
based on whatever we want, we can put
different things in this result set.

206
00:15:05.950 --> 00:15:11.459
So, for example, and we've got everything
that's available on this list of props,

207
00:15:13.860 --> 00:15:17.560
whether we are in progress or
the search term is empty or whatever.

208
00:15:17.560 --> 00:15:20.130
We've got that in order to make this work.

209
00:15:20.130 --> 00:15:24.090
So we can just say, let result say equal.

210
00:15:25.760 --> 00:15:27.250
Let's look at its type.

211
00:15:27.250 --> 00:15:28.530
JSX element.

212
00:15:28.530 --> 00:15:32.570
So result set, we'll

213
00:15:32.570 --> 00:15:37.460
create an empty array, and

214
00:15:37.460 --> 00:15:43.414
then if the search term is empty,

215
00:15:43.414 --> 00:15:47.454
we can say result set,

216
00:15:47.454 --> 00:15:52.346
push, and we'll just copy

217
00:15:52.346 --> 00:15:57.454
this.
&gt;&gt; Mike North: We'll

218
00:15:57.454 --> 00:16:01.640
say
&gt;&gt; Mike North: please enter something.

219
00:16:07.249 --> 00:16:07.828
&gt;&gt; Mike North: Now,

220
00:16:07.828 --> 00:16:14.310
else if (p.inProgress),
we could do something similar here.

221
00:16:17.585 --> 00:16:20.249
&gt;&gt; Mike North: Saying this time searching

222
00:16:20.249 --> 00:16:25.160
for,
&gt;&gt; Mike North: p.term, so

223
00:16:25.160 --> 00:16:27.940
let's see if just those
two things work for now.

224
00:16:30.590 --> 00:16:32.210
Please enter a search term above.

225
00:16:32.210 --> 00:16:35.592
Thanks automatic, well,
that wasn't automatic semicolon,

226
00:16:35.592 --> 00:16:37.290
that was developer semicolon.

227
00:16:37.290 --> 00:16:42.223
So coffee, awesome, so now we're in
the third state that we failed to

228
00:16:42.223 --> 00:16:47.188
handle which is we're no longer in
progress and we have some results.

229
00:16:47.188 --> 00:16:50.599
So else, we,

230
00:16:50.599 --> 00:16:56.170
I'm gonna be paranoid here and say

231
00:16:56.170 --> 00:17:00.240
I don't wanna assume that this is the only
other possible state that we could be in.

232
00:17:00.240 --> 00:17:03.898
So else if p.results,

233
00:17:09.266 --> 00:17:13.130
&gt;&gt; Mike North: length &gt; 0, now we can say

234
00:17:13.130 --> 00:17:18.171
results.map and here we'll say,

235
00:17:18.171 --> 00:17:25.910
what's the name of this other
component that we have?

236
00:17:25.910 --> 00:17:34.301
It's a PlaceSearchResult.
&gt;&gt; Mike North: So

237
00:17:34.301 --> 00:17:35.970
there's our PlaceSearchResult.

238
00:17:37.130 --> 00:17:39.829
We can tell it to import for us, and now-

239
00:17:47.264 --> 00:17:50.294
&gt;&gt; Mike North: We have an error,

240
00:17:50.294 --> 00:17:55.330
what's going on?
&gt;&gt; Mike North: I need a key.

241
00:17:55.330 --> 00:18:00.264
So any time you're dealing with React
arrays, you have to basically tell it.

242
00:18:00.264 --> 00:18:03.750
You have to give it a unique identifier
for each item in the list, so that it can

243
00:18:03.750 --> 00:18:09.460
know which one to re-render in the event
that the size of the list changes.

244
00:18:09.460 --> 00:18:15.545
All we have to do here is say key=,
what would a good property be,

245
00:18:15.545 --> 00:18:18.955
r.id, that seems like it might be unique.

246
00:18:25.873 --> 00:18:27.315
&gt;&gt; Mike North: And it's not rendering.

247
00:18:27.315 --> 00:18:34.332
I wonder why, you know why?
&gt;&gt; Mike North: We'll

248
00:18:34.332 --> 00:18:43.235
just say the results that equals those.
&gt;&gt; Mike North: And

249
00:18:43.235 --> 00:18:49.214
apparently it's gonna want,
because it's in array,

250
00:18:49.214 --> 00:18:57.107
we'll call this one nothing.
&gt;&gt; Mike North: Sorry,

251
00:18:57.107 --> 00:19:02.301
nothing and this one's in progress.
&gt;&gt; Mike North: So

252
00:19:02.301 --> 00:19:05.340
even those that are in an array,
those'll make it happy.

253
00:19:05.340 --> 00:19:08.190
Great, no more errors, and

254
00:19:08.190 --> 00:19:11.518
there we have coffee or,
&gt;&gt; Mike North: So

255
00:19:11.518 --> 00:19:14.020
now we see our results coming in.

256
00:19:15.630 --> 00:19:20.950
So in essence, we have used typescript to
basically ensure that all along the way,

257
00:19:20.950 --> 00:19:25.898
we're attaching the correct types of
functions to the correct dumb events.

258
00:19:25.898 --> 00:19:30.772
We have assurances around these components
to get in the data that they state that

259
00:19:30.772 --> 00:19:31.857
they need to get.

260
00:19:31.857 --> 00:19:36.586
We even have this idea of an optional
like event handler that we pass in.

261
00:19:36.586 --> 00:19:41.418
Where we're not obligated to
continually pass a no-op functions into

262
00:19:41.418 --> 00:19:44.571
this just to run test,
or anything like that.

263
00:19:44.571 --> 00:19:46.448
So this can work with or without it.

264
00:19:46.448 --> 00:19:48.484
So this is really, really nice,

265
00:19:48.484 --> 00:19:52.650
and it's super clear when
working with these components.

266
00:19:52.650 --> 00:19:54.400
You know exactly what
it needs up front and

267
00:19:54.400 --> 00:19:58.340
you're busted when you
don't play by the rules.

268
00:19:58.340 --> 00:20:03.980
So this is state for components and
if there any questions online or

269
00:20:03.980 --> 00:20:07.380
here, I'm happy to answer them
before we go with the next.

270
00:20:07.380 --> 00:20:14.330
One more inception deeper into this thing.
&gt;&gt; Mike North: How do people feel,

271
00:20:14.330 --> 00:20:17.180
for those of you who have used
React without typescript?

272
00:20:18.390 --> 00:20:20.044
What are your thoughts on this?

273
00:20:20.044 --> 00:20:24.760
Is it annoying extra bookkeeping or
is this additional safety?

274
00:20:25.900 --> 00:20:28.350
How does this, how does this feel?

275
00:20:29.420 --> 00:20:34.516
Yeah, I think so I like it,

276
00:20:34.516 --> 00:20:38.281
all right-
&gt;&gt; Speaker 2: It helps you comment into it

277
00:20:38.281 --> 00:20:42.372
and to see what you need in order to
render that template like new coders,

278
00:20:42.372 --> 00:20:45.980
new programmers who didn't
necessarily write it.

279
00:20:45.980 --> 00:20:50.360
You come and you're like,
this prop requires this interface.

280
00:20:50.360 --> 00:20:52.630
And so
if I want to use this component somewhere,

281
00:20:52.630 --> 00:20:56.860
I'm gonna have to hand it these keys.
&gt;&gt; Mike North: Absolutely, absolutely,

282
00:20:56.860 --> 00:21:01.450
not just the type, but also the
requiredness of the arguments by default.

283
00:21:01.450 --> 00:21:07.058
And so you're not worrying about
multiple error ID functions that,

284
00:21:07.058 --> 00:21:10.645
it feels like the rules
are stated up front.

285
00:21:10.645 --> 00:21:12.905
And the more experienced I get,

286
00:21:12.905 --> 00:21:17.820
the more I appreciate constrained
programming environments.

287
00:21:17.820 --> 00:21:20.370
I want to know what my constraints are so

288
00:21:20.370 --> 00:21:21.608
I can design a good solution.
&gt;&gt; Speaker 2: So

289
00:21:21.608 --> 00:21:23.857
much better than the PropTypes thing, so

290
00:21:23.857 --> 00:21:27.100
much more articulate.
&gt;&gt; Mike North: Not only is it more

291
00:21:27.100 --> 00:21:29.065
articulate, but it's more performant.

292
00:21:29.065 --> 00:21:32.900
PropTypes, which solve the problem in a
similar way, that's that run time, right?

293
00:21:32.900 --> 00:21:36.170
That's extra weight that you're
sending to your users, and

294
00:21:36.170 --> 00:21:40.010
it's gonna slow your app down,
potentially.

295
00:21:43.050 --> 00:21:46.200
And I don't feel like the feedback
you get is quite as nice.

296
00:21:46.200 --> 00:21:47.278
&gt;&gt; Speaker 2: Well if it's rich at all,

297
00:21:47.278 --> 00:21:48.805
it's really hard to write the code.

298
00:21:48.805 --> 00:21:52.110
Sometimes they're very
hard to collaborate.

299
00:21:52.110 --> 00:21:53.243
&gt;&gt; Mike North: Yes, any time you're

300
00:21:53.243 --> 00:21:54.822
wrestling-
&gt;&gt; Speaker 2: Any graph of objects,

301
00:21:54.822 --> 00:21:56.483
it's really
&gt;&gt; Mike North: [LAUGH]

302
00:21:56.483 --> 00:21:57.541
&gt;&gt; Speaker 2: [LAUGH] Yeah,

303
00:21:57.541 --> 00:21:59.760
I have been there for sure.

304
00:22:01.710 --> 00:22:05.469
All right, so let me commit this so anyone
who wishes to use it can take a look.

305
00:22:12.306 --> 00:22:15.094
&gt;&gt; Speaker 2: 8,

306
00:22:21.930 --> 00:22:26.770
&gt;&gt; Speaker 2: Okay, exercise 9, second to

307
00:22:26.770 --> 00:22:32.130
last one.
&gt;&gt; Speaker 2: So

308
00:22:32.130 --> 00:22:36.816
you can if you so choose,
check out femasters/9-begin and

309
00:22:36.816 --> 00:22:41.020
you will get the solution
that I just checked in.

310
00:22:41.020 --> 00:22:45.420
And this will serve as the starting
point for this next phase of the project

