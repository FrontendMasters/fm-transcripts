WEBVTT

1
00:00:00.220 --> 00:00:05.340
&gt;&gt; Mike North: Iterables are objects
that you can ask for an iterator.

2
00:00:05.340 --> 00:00:10.100
And several of the objects you're used
to working with in the JavaScript world,

3
00:00:10.100 --> 00:00:12.010
they are already iterables.

4
00:00:13.990 --> 00:00:18.608
The name of the function
that you use to retrieve

5
00:00:18.608 --> 00:00:24.638
an iterator from an iterable
is symbol.iterator.

6
00:00:24.638 --> 00:00:27.010
&gt;&gt; Mike North: And Array and
Map already support this.

7
00:00:27.010 --> 00:00:30.910
So I want to kick out, and
start working in Chrome here,

8
00:00:30.910 --> 00:00:35.870
just because symbols are a little hard for
people to wrap their heads around.

9
00:00:35.870 --> 00:00:39.577
It's a simple concept, and
I just wanna have something dynamic,

10
00:00:39.577 --> 00:00:41.772
where we can see the output right away.

11
00:00:41.772 --> 00:00:45.650
But this is what we're gonna
end up getting, right?

12
00:00:45.650 --> 00:00:49.510
Where we have an array,
we grab an iterator off of it, and

13
00:00:49.510 --> 00:00:53.380
as we pull those three items off,
we'll get values, and

14
00:00:53.380 --> 00:00:59.086
then the last time we pull something off,
we'll get an indication that we're done.

15
00:00:59.086 --> 00:01:03.150
We've basically, like, this array
has given us all it has to give.

16
00:01:03.150 --> 00:01:05.630
All right, so here's my console.

17
00:01:05.630 --> 00:01:06.713
So if I've got an array,

18
00:01:17.296 --> 00:01:19.130
&gt;&gt; Mike North: Like this.

19
00:01:19.130 --> 00:01:24.360
So we wanna invoke a function on
this object to get the iterator out,

20
00:01:24.360 --> 00:01:29.270
and we know that we can use dot notation
to access properties on objects

21
00:01:29.270 --> 00:01:33.910
like this, or
we can use bracket notation, right?

22
00:01:33.910 --> 00:01:37.000
We could do this, and
it means exactly the same thing.

23
00:01:39.400 --> 00:01:43.990
So when we have,
does anyone think of reasons, one,

24
00:01:43.990 --> 00:01:46.640
we might want to use bracket notation?

25
00:01:46.640 --> 00:01:49.620
Like when dot notation
might not be possible.

26
00:01:49.620 --> 00:01:52.360
Yes?
&gt;&gt; Speaker 2: If you're trying to access

27
00:01:53.360 --> 00:01:58.000
a key that's saved as
a value of a variable.

28
00:01:58.000 --> 00:02:01.018
&gt;&gt; Speaker 3: So
like if I had bar L equals length,

29
00:02:01.018 --> 00:02:03.650
I could go r bracket L bracket.

30
00:02:03.650 --> 00:02:04.790
&gt;&gt; Mike North: Absolutely, absolutely.

31
00:02:04.790 --> 00:02:07.920
So that would be a dynamic property key,

32
00:02:07.920 --> 00:02:14.010
where the name of the property we
wish to ask for is a variable.

33
00:02:14.010 --> 00:02:19.850
Another common example would be something
like this, where we have a dash and

34
00:02:19.850 --> 00:02:25.480
the name of the property, and
that makes this, and that makes it so

35
00:02:25.480 --> 00:02:30.700
we have to use bracket notation to
avoid this looking like arithmetic, or

36
00:02:30.700 --> 00:02:35.480
the subtraction of my-values to variables.

37
00:02:35.480 --> 00:02:40.420
So, there are certain types of values
that we must use bracket notation for,

38
00:02:40.420 --> 00:02:41.590
in order to get stuff out.

39
00:02:42.700 --> 00:02:48.870
So we've got our array here,
and the name of.

40
00:02:48.870 --> 00:02:51.876
If I were to say I'm gonna get the value,
I'll do just what you said.

41
00:02:51.876 --> 00:02:57.730
Let prop equals.

42
00:02:57.730 --> 00:02:59.170
That's the name of our property.

43
00:02:59.170 --> 00:03:00.590
It's a legal property key.

44
00:03:00.590 --> 00:03:02.100
Right, we're talking
about symbols here and

45
00:03:02.100 --> 00:03:07.470
that this, you may have properties
whose keys are symbols.

46
00:03:07.470 --> 00:03:10.900
And if we look at this, the value of
this property, it looks just like that.

47
00:03:10.900 --> 00:03:14.270
So all you need to know is that
when we say Symbol.iterator,

48
00:03:14.270 --> 00:03:20.820
it's almost like the variable name and
the value are the same, right?

49
00:03:20.820 --> 00:03:22.699
That is what makes a symbol a symbol.

50
00:03:25.390 --> 00:03:30.390
Like we don't get to, you can create
new symbols if you want, like this.

51
00:03:33.670 --> 00:03:35.430
So that would be a symbol of hello.

52
00:03:35.430 --> 00:03:38.970
But it's just sort of a very standard.

53
00:03:40.360 --> 00:03:45.750
It's a string like thing, except it's
not really used for dynamic data.

54
00:03:45.750 --> 00:03:49.360
It's for reserved special words,
think of it that way.

55
00:03:52.370 --> 00:03:59.177
So we've got our array, and
we've got our name of our property.

56
00:04:03.228 --> 00:04:05.577
&gt;&gt; Mike North: And
what we've just retrieved is an iterator.

57
00:04:11.827 --> 00:04:12.941
&gt;&gt; Mike North: And you can see that, oops.

58
00:04:16.381 --> 00:04:17.224
&gt;&gt; Mike North: Did I just do this wrong?

59
00:04:21.774 --> 00:04:22.343
&gt;&gt; Mike North: Come on now.

60
00:04:28.170 --> 00:04:30.157
&gt;&gt; Mike North: Yeah, that should be fine.

61
00:04:30.157 --> 00:04:31.199
Frontend masters.

62
00:04:38.756 --> 00:04:43.178
&gt;&gt; Mike North: So that's gonna give us,
this is what makes this iterable.

63
00:04:53.968 --> 00:04:56.830
&gt;&gt; Mike North: Yeah.

64
00:04:56.830 --> 00:04:57.480
Sorry.

65
00:04:57.480 --> 00:04:59.250
I'm crazy.

66
00:04:59.250 --> 00:05:00.860
All right, here it is.

67
00:05:00.860 --> 00:05:03.850
Sorry.
This is me before my first cup of coffee.

68
00:05:03.850 --> 00:05:05.390
It's a function that we have to invoke.

69
00:05:05.390 --> 00:05:11.770
We're not simply interested in
pulling that function off as a value.

70
00:05:11.770 --> 00:05:13.340
We want to invoke the function.

71
00:05:14.610 --> 00:05:19.800
And now we've got our iterator,
which has a next property on it.

72
00:05:19.800 --> 00:05:20.870
That's also a function.

73
00:05:22.770 --> 00:05:23.930
That's what we're getting off of it.

74
00:05:23.930 --> 00:05:27.140
I want to show you that this
is built into JavaScript.

75
00:05:28.260 --> 00:05:30.930
However, we can define our own iterators.

76
00:05:30.930 --> 00:05:32.916
Does anyone have any
questions about symbol?

77
00:05:32.916 --> 00:05:37.821
Or about,
&gt;&gt; Mike North: Is

78
00:05:37.821 --> 00:05:41.070
anyone unclear as to
what I've just done here?

79
00:05:41.070 --> 00:05:44.916
I know I took us on a roundabout path,
but just to recap, here's an array.

80
00:05:48.917 --> 00:05:51.665
&gt;&gt; Mike North: And
we have established that,

81
00:05:51.665 --> 00:05:57.170
all I'm doing is I'm grabbing
a property off of this array.

82
00:05:57.170 --> 00:06:01.668
The name of that property is not like
the property keys we're used to,

83
00:06:01.668 --> 00:06:04.360
where we can use dot notation.

84
00:06:04.360 --> 00:06:08.400
It is a symbol, and
that property happens to be a function.

85
00:06:08.400 --> 00:06:10.290
And I'm evoking that function.

86
00:06:10.290 --> 00:06:14.440
So we would just say the name of this
function that's on this array is

87
00:06:14.440 --> 00:06:15.730
the symbol iterator.

88
00:06:16.810 --> 00:06:19.722
And now, I've got an iterator.

89
00:06:23.222 --> 00:06:30.423
&gt;&gt; Mike North: Okay, so, so
we would say that what we've done here,

90
00:06:30.423 --> 00:06:36.230
is we've stated that arrays are iterable.

91
00:06:37.720 --> 00:06:39.300
And in the typescript world,

92
00:06:39.300 --> 00:06:42.760
you could almost think of
this as an interface, right.

93
00:06:42.760 --> 00:06:48.110
When we say something is iterable, it's
not that it has a special parent class.

94
00:06:48.110 --> 00:06:53.430
It's just that it has
a particular standard structure.

95
00:06:53.430 --> 00:06:56.900
And the standard structure is,
when we invoke this function,

96
00:06:56.900 --> 00:07:02.810
whose name is Symbol.iterator,
we get an iterator out.

97
00:07:02.810 --> 00:07:05.280
And we know exactly what
this iterator looks like.

98
00:07:05.280 --> 00:07:09.050
It has a function on it called next, and

99
00:07:09.050 --> 00:07:12.430
that next returns those
very specific things.

100
00:07:12.430 --> 00:07:17.650
So it is something that we can implement
on our own, as we've done here.

101
00:07:17.650 --> 00:07:22.000
Right, we just created an object
that meets all of those criteria.

102
00:07:22.000 --> 00:07:26.268
And now, what we can do is use
this in a new type of for loop.

103
00:07:26.268 --> 00:07:28.560
It's a for-of loop.

104
00:07:28.560 --> 00:07:34.070
So you've seen, probably, a for-in loop,
which lets you iterate over objects or

105
00:07:34.070 --> 00:07:38.620
arrays, this lets you
iterate over any iterable.

106
00:07:38.620 --> 00:07:42.205
And it uses this concept of
an iterator behind the scenes,

107
00:07:42.205 --> 00:07:44.413
to get from value to value to value.

108
00:07:50.579 --> 00:07:54.985
&gt;&gt; Mike North: So in this case, just
because of how this iterator works, and

109
00:07:54.985 --> 00:07:59.170
because the value inside
that next function there.

110
00:07:59.170 --> 00:08:03.960
It's just using an index, and it's
incrementing each letter one by one, for

111
00:08:03.960 --> 00:08:06.990
basically when you go through the for
loop and print something like this out.

112
00:08:06.990 --> 00:08:10.720
So at this point, you should be thinking,
that seems like a really involved

113
00:08:10.720 --> 00:08:14.010
way of doing something I could have done
with regular functions, and closers.

114
00:08:14.010 --> 00:08:18.480
And even our functional shopping cart
seemed to be a little bit simpler than

115
00:08:18.480 --> 00:08:21.190
this, certainly easier for
fellow developers to read.

116
00:08:22.470 --> 00:08:27.000
But it is important that we be able
to define patterns like this, so

117
00:08:27.000 --> 00:08:30.840
that we can build some cooler
things on top of them.

