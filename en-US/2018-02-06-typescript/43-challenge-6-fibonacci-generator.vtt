WEBVTT

1
00:00:00.100 --> 00:00:02.673
&gt;&gt; Mike North: This should be a really
easy exercise because the solution's

2
00:00:02.673 --> 00:00:03.618
already in the slide.

3
00:00:03.618 --> 00:00:07.982
But I do wanna give you an opportunity
to try your hand at working with

4
00:00:07.982 --> 00:00:09.600
iterators yourselves.

5
00:00:10.870 --> 00:00:13.730
So we're going to build
a Fibonacci Generator.

6
00:00:13.730 --> 00:00:16.280
Now we've already seen
what that looks like, but

7
00:00:16.280 --> 00:00:21.530
this is a good ice-breaker exercise for
the day.

8
00:00:23.100 --> 00:00:30.710
So what I wanna do is take 15 minutes to
just kind of wrap your head around this.

9
00:00:30.710 --> 00:00:37.399
Particularly if you're still a little
bit hung up on the pausing execution and

10
00:00:37.399 --> 00:00:42.800
if this still feels like
a really puzzling concept to you.

11
00:00:42.800 --> 00:00:46.490
I would advise that you
do most of this exercise

12
00:00:46.490 --> 00:00:50.470
inside Chrome devtools with a snippet,
like I was just doing.

13
00:00:50.470 --> 00:00:52.260
So if you go to the sources tab,

14
00:00:52.260 --> 00:00:55.200
on the left side one of the little
sidebar things says snippets.

15
00:00:55.200 --> 00:00:56.650
You can create a new snippet.

16
00:00:56.650 --> 00:00:57.980
Do your code in there.

17
00:00:57.980 --> 00:01:00.610
The benefit is you can set breakpoints.

18
00:01:00.610 --> 00:01:05.470
You're basically working within
a debuggable environment already.

19
00:01:05.470 --> 00:01:07.560
And so
that'll help you step through things.

20
00:01:08.770 --> 00:01:09.620
That being said,

21
00:01:09.620 --> 00:01:15.690
we have an exercise with tests that assert
that your generator works properly.

22
00:01:15.690 --> 00:01:18.310
And you're gonna run npm test fib.

23
00:01:18.310 --> 00:01:21.350
Now I'm gonna give you
a suggested implementation

24
00:01:21.350 --> 00:01:25.740
here because this is not
a big tech company interview.

25
00:01:25.740 --> 00:01:29.210
We're not trying to quiz people and

26
00:01:29.210 --> 00:01:34.470
figure out if they know the easy special
way to implement a Fibonacci algorithm.

27
00:01:34.470 --> 00:01:39.230
What I do want you to see is if we look
at how things would look if we were

28
00:01:39.230 --> 00:01:44.420
tracking two numbers ago, one number ago
in order to calculate the next value.

29
00:01:44.420 --> 00:01:47.250
Because that's what the Fibonacci
sequence is, right?

30
00:01:47.250 --> 00:01:50.290
The sum of the two previous
values is the next value.

31
00:01:50.290 --> 00:01:54.820
If you look, you see diagonal lines
from the bottom left to the top right.

32
00:01:54.820 --> 00:01:57.480
Those are all the same, right?

33
00:01:57.480 --> 00:02:03.644
So the diagonal lines, if we start,
you see 1, 1, 1, 2, 2, 2, 3, 3, 3, 5, 5.

34
00:02:03.644 --> 00:02:07.410
And it would continue like that.

35
00:02:07.410 --> 00:02:10.960
So sometimes people get stuck
on this starting condition,

36
00:02:10.960 --> 00:02:13.770
where you pick the right initial
values for those variables,

37
00:02:13.770 --> 00:02:16.240
such that you get those first two ones.

38
00:02:16.240 --> 00:02:19.400
And this should give you some help as
to figuring out what those should be.

39
00:02:21.250 --> 00:02:24.720
I don't want people to get stuck
on the Fibonacciness here.

40
00:02:24.720 --> 00:02:26.700
This is about the generator function.

