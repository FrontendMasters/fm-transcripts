WEBVTT

1
00:00:00.280 --> 00:00:02.790
&gt;&gt; Mike North: So
we're gonna create a typed stack,

2
00:00:02.790 --> 00:00:07.810
if you don't know what a stack is,
it is a data structure where you

3
00:00:07.810 --> 00:00:11.760
push a bunch of stuff on and then you peel
them off almost like a stack of paper, so

4
00:00:11.760 --> 00:00:17.174
its the first on is the last off,
first on, last off.

5
00:00:19.310 --> 00:00:24.240
So you're gonna build those Stack data
structure that uses generics to constrain

6
00:00:24.240 --> 00:00:26.140
the types that it accepts.

7
00:00:26.140 --> 00:00:29.570
Overload the push functions, so
it can take either a single item or

8
00:00:29.570 --> 00:00:35.620
an array of items, so you'll probably
have a type of fifth type of array.

9
00:00:35.620 --> 00:00:38.744
Iterator of those things and
push each one of them in a sequence.

10
00:00:40.100 --> 00:00:44.290
So as you can see here, I can push
this array, cherry apple grape and

11
00:00:44.290 --> 00:00:45.020
then push a lemon.

12
00:00:45.020 --> 00:00:46.940
And then, when I pull them off,
one by one,

13
00:00:46.940 --> 00:00:50.140
it's clear that the array
was not one thing pushed in.

14
00:00:50.140 --> 00:00:55.330
And for that matter, like I'm allowed to
push in an array of strings like that,

15
00:00:55.330 --> 00:00:58.880
despite the fact that
stacks type is string.

16
00:00:58.880 --> 00:01:00.640
Normally that would be a type error,
right,

17
00:01:00.640 --> 00:01:04.510
if it were trying to use the individual
push, this is another case where

18
00:01:04.510 --> 00:01:08.280
type safety is gonna help us really
express our intent very well here.

19
00:01:08.280 --> 00:01:11.340
We can take both of them, but
it's very clear what one means or

20
00:01:11.340 --> 00:01:12.150
what the other means.

21
00:01:13.210 --> 00:01:15.790
Pop should return the object
of the appropriate type,

22
00:01:15.790 --> 00:01:21.550
keep the internal data structure private,
using your access modifier keywords and

23
00:01:21.550 --> 00:01:26.720
my advice here if you want to implement
things the way I implemented this just for

24
00:01:26.720 --> 00:01:33.180
fun, just for extra practice with types,
I implemented this with a linked list.

25
00:01:33.180 --> 00:01:36.840
Where you basically hold onto the head and
you chain these things together,

26
00:01:36.840 --> 00:01:39.970
I did this because there's no
data structure in JavaScript,

27
00:01:39.970 --> 00:01:42.910
that really lends itself
well to that kind of thing.

28
00:01:42.910 --> 00:01:47.150
So it forces you to actually work with
types and have a type and an interface for

29
00:01:47.150 --> 00:01:52.210
your node for your linked list and
make that work.

30
00:01:52.210 --> 00:01:56.670
Here is the stack interface it should
be already in the starting point for

31
00:01:56.670 --> 00:01:58.290
your exercise.

32
00:01:58.290 --> 00:02:03.684
So to pass the test you basically
must satisfy this interface here.

33
00:02:03.684 --> 00:02:09.580
Which you can see is expressed
in terms of a generic.

34
00:02:10.840 --> 00:02:15.910
The I in front of stack, this is
a convention that I'm teaching you now.

35
00:02:15.910 --> 00:02:20.550
This is what, like large scale type
script applications typically do.

36
00:02:20.550 --> 00:02:25.220
It lets you know when you grab, when
you see that I something in your code,

37
00:02:25.220 --> 00:02:28.240
you know it's an interface,
I for interface.

38
00:02:28.240 --> 00:02:32.720
Whereas if we just saw a stack, you don't
really know if that's class or what.

39
00:02:32.720 --> 00:02:36.060
So this makes it extremely easy to
know what is just an expression,

40
00:02:36.060 --> 00:02:40.350
a description of structure
versus a constructor.

41
00:02:40.350 --> 00:02:44.990
So if you like TS length which is the
common, it is the type script variant of

42
00:02:44.990 --> 00:02:49.061
ES length think of it that way,
it is a static code analysis tool.

43
00:02:49.061 --> 00:02:55.060
The default set of rules will have you
like interfaces always begin with I.

44
00:02:55.060 --> 00:03:00.340
So starting now, I'm going to ask that you
like start working with that convention.

45
00:03:02.050 --> 00:03:06.226
&gt;&gt; Speaker 2: And do they follow the,
all generics or t, or t something as well?

46
00:03:06.226 --> 00:03:09.590
&gt;&gt; Mike North: It's usually single
capital letters starting with t.

47
00:03:09.590 --> 00:03:15.460
So your first word would be t if you
takes two it would be t and u and so on.

48
00:03:15.460 --> 00:03:17.220
That being said you can
do whatever you want.

49
00:03:17.220 --> 00:03:20.900
But I developed those habits with C++ and
so I do it that way too.

50
00:03:20.900 --> 00:03:25.130
T-U-V or S and T,
it's usually stuff around T.

51
00:03:26.400 --> 00:03:28.600
It's not very important but
that's what you see a lot [LAUGH].

52
00:03:28.600 --> 00:03:30.820
You can do whatever you want.

53
00:03:32.300 --> 00:03:35.190
But like here,
if you show this to a type script person,

54
00:03:35.190 --> 00:03:39.160
they'll say like " hu type parameter,
absolutely, It is definitely what that is.

