WEBVTT

1
00:00:00.080 --> 00:00:03.750
&gt;&gt; Mike North: We're going to go through
the solution to the third exercise where

2
00:00:03.750 --> 00:00:06.699
we're making a card
dealer with TypeScript.

3
00:00:06.699 --> 00:00:11.483
And I've just copied the hints at what
the structure of this class should look

4
00:00:11.483 --> 00:00:15.989
like from the slides, so that's what
were seeing here in the comments.

5
00:00:15.989 --> 00:00:20.523
So the first thing we wanna do is
collapse this since I don't need this

6
00:00:20.523 --> 00:00:22.250
shuffle array quite yet.

7
00:00:24.160 --> 00:00:28.205
So, I wanna create enums for
suit and number.

8
00:00:30.391 --> 00:00:34.271
&gt;&gt; Mike North: And
these are alphabetical, so

9
00:00:34.271 --> 00:00:39.739
it would be Club, Diamond, Heart, Spade.

10
00:00:39.739 --> 00:00:45.750
Or, we'll do it like this, Spades, Clubs.

11
00:00:45.750 --> 00:00:48.699
And then we've got enum CardNumber.

12
00:00:50.539 --> 00:00:57.638
&gt;&gt; Mike North: We do Ace,
Two, Three, Four, Five, Six.

13
00:01:03.922 --> 00:01:08.390
&gt;&gt; Mike North: Jack, Queen, King.

14
00:01:09.620 --> 00:01:12.690
So these are sort of,
they belong as members of each other.

15
00:01:12.690 --> 00:01:17.373
This is a common example to
use when working enums cuz

16
00:01:17.373 --> 00:01:19.827
there's a fixed size set.

17
00:01:19.827 --> 00:01:23.883
And we can represent these as numbers but
it's more convenient for

18
00:01:23.883 --> 00:01:26.284
us to represent them as words, right?

19
00:01:26.284 --> 00:01:31.548
So we could represent a card as something
that is more human readable than say,

20
00:01:31.548 --> 00:01:33.079
zero, comma, four.

21
00:01:33.079 --> 00:01:36.869
And speaking of a card,
&gt;&gt; Mike North: We can represent

22
00:01:36.869 --> 00:01:37.584
it like this.

23
00:01:41.536 --> 00:01:45.959
&gt;&gt; Mike North: So if I wanted
to have an object of type card,

24
00:01:45.959 --> 00:01:49.196
I could do something like this.

25
00:01:53.079 --> 00:01:54.124
&gt;&gt; Mike North: Sorry.

26
00:01:58.072 --> 00:02:00.348
&gt;&gt; Mike North: Something like that.

27
00:02:00.348 --> 00:02:04.589
So, that is easier to read than
what the value of it really is.

28
00:02:09.063 --> 00:02:09.984
&gt;&gt; Mike North: Which is,

29
00:02:18.150 --> 00:02:20.779
&gt;&gt; Mike North: There it is, 06, right, so

30
00:02:20.779 --> 00:02:24.724
that's what this really is,
seven of clubs,

31
00:02:24.724 --> 00:02:30.810
it is nice to be able to refer to this,
in our code in a more semantic way.

32
00:02:30.810 --> 00:02:37.903
So, now that we got that straightened out
we can define some of these functions.

33
00:02:39.672 --> 00:02:46.206
&gt;&gt; Mike North: So I have dealhand,
&gt;&gt; Mike North: And

34
00:02:46.206 --> 00:02:50.903
that's gonna be a member function
that'll take in a number.

35
00:02:54.767 --> 00:02:58.431
&gt;&gt; Mike North: And
it will return an array of cards.

36
00:03:11.003 --> 00:03:13.141
&gt;&gt; Mike North: And
we'll just leave that there,

37
00:03:13.141 --> 00:03:17.029
getLength,
&gt;&gt; Mike North: Is gonna be

38
00:03:17.029 --> 00:03:20.170
another function that's
gonna return a number.

39
00:03:20.170 --> 00:03:23.082
And right now I'm just
thinking like we'll have,

40
00:03:27.300 --> 00:03:28.678
&gt;&gt; Mike North: Something like this.

41
00:03:28.678 --> 00:03:32.330
So card() = a new array.

42
00:03:32.330 --> 00:03:37.874
And here we can just right away say,
&gt;&gt; Mike North: Something like that,

43
00:03:37.874 --> 00:03:39.241
so we've finished that right away.

44
00:03:43.966 --> 00:03:47.567
&gt;&gt; Mike North: readCard,
it's gonna take as an argument.

45
00:03:51.212 --> 00:03:57.327
&gt;&gt; Mike North: A card,
&gt;&gt; Mike North: Like that,

46
00:03:57.327 --> 00:03:59.047
and it's gonna return a string.

47
00:04:03.316 --> 00:04:05.284
&gt;&gt; Mike North: And that's basically it.

48
00:04:05.284 --> 00:04:08.217
So if we've done that,
we will have, hopefully,

49
00:04:08.217 --> 00:04:11.090
we've done some way to pass our test.

50
00:04:11.090 --> 00:04:14.260
And lastly,
I believe I was supposed to export these.

51
00:04:14.260 --> 00:04:21.009
And we can export enums, so these do
turn into JavaScript as we were seeing.

52
00:04:21.009 --> 00:04:23.573
And we can export them like we
would export anything else.

53
00:04:23.573 --> 00:04:28.925
So you could have a file in an app, like
often times you wanna collect a couple

54
00:04:28.925 --> 00:04:33.961
different inumes and have them all in
one place so there's a go to spot.

55
00:04:33.961 --> 00:04:36.922
Kinda like the way you treat, constants or

56
00:04:36.922 --> 00:04:40.882
collections of constants that
are meant to go together.

57
00:04:40.882 --> 00:04:46.986
So let's run our tests,
&gt;&gt; Mike North: And

58
00:04:46.986 --> 00:04:49.615
see the state we're in.

59
00:04:49.615 --> 00:04:53.088
All right, five passed, eight failed.

60
00:04:53.088 --> 00:04:59.405
So we've got the correct number of
members in the enums, that's good.

61
00:04:59.405 --> 00:05:02.251
We are exporting things as we should,
that's good.

62
00:05:02.251 --> 00:05:09.759
And now it's time for us to kind of
go through the main work at hand.

63
00:05:09.759 --> 00:05:14.246
So the first thing I need is, we obviously
need to create our deck of cards.

64
00:05:16.777 --> 00:05:23.007
&gt;&gt; Mike North: So we can create a
constructor here that is going to just for

65
00:05:23.007 --> 00:05:28.994
fun I'm gonna say,
set upDeck that's done function.

66
00:05:28.994 --> 00:05:31.079
So this.setupDeck.

67
00:05:33.954 --> 00:05:37.160
&gt;&gt; Mike North: And we can have this
be actually just for fun, just for

68
00:05:37.160 --> 00:05:38.877
a good code structure here.

69
00:05:38.877 --> 00:05:40.418
Why do we have that be out here?

70
00:05:43.618 --> 00:05:47.653
&gt;&gt; Mike North: I did not solve it this way
when I did my solutions that are already

71
00:05:47.653 --> 00:05:49.910
checked in there, but I like this.

72
00:05:51.180 --> 00:05:52.762
So we're gonna create deck, and

73
00:05:52.762 --> 00:05:56.733
this is gonna just be a pure function that
exists outside the context of this class.

74
00:05:56.733 --> 00:05:59.120
Benefit here is we could
unitest it by itself,

75
00:05:59.120 --> 00:06:03.116
and make sure that it's always creating
what it's supposed to be creating.

76
00:06:03.116 --> 00:06:08.550
This is going to return an array of cards.

77
00:06:08.550 --> 00:06:15.427
It's not returning it yet, but
you'll note that we got a complaint here,

78
00:06:15.427 --> 00:06:20.135
cuz by default,
function's return type is void.

79
00:06:20.135 --> 00:06:24.621
And as soon as we add this
information that our intent is to

80
00:06:24.621 --> 00:06:27.350
return an array of cards.

81
00:06:27.350 --> 00:06:31.592
Now this is happy, but we've basically
pushed the work upstream, and

82
00:06:31.592 --> 00:06:35.991
it’s saying you said you’d return this,
we need to go about doing that.

83
00:06:35.991 --> 00:06:39.025
I love that I’m getting all of
this feedback as we go along,

84
00:06:39.025 --> 00:06:42.847
we kind of define the structure and
we’re sort of moving errors up stream,

85
00:06:42.847 --> 00:06:44.990
up stream, up stream until we're done.

86
00:06:44.990 --> 00:06:50.502
This is fantastic and like in a language
like Java, you've got all this indexing

87
00:06:50.502 --> 00:06:55.463
that's going on behind the scenes and
it's kinda figuring things out.

88
00:06:55.463 --> 00:07:00.844
TypeScript is I think faster in terms of
delivering this feedback to me almost

89
00:07:00.844 --> 00:07:05.744
immediately because it's able to
analyze very small trunks of code.

90
00:07:05.744 --> 00:07:10.199
Really sticking within this file and
do incremental work to evaluate like based

91
00:07:10.199 --> 00:07:15.020
on what I've just changed, how is the type
constraint situation being satisfied.

92
00:07:15.020 --> 00:07:17.050
What's the new feedback to
deliver to the developer.

93
00:07:18.820 --> 00:07:24.125
So for createDeck let's worry about that,
actually we can do

94
00:07:24.125 --> 00:07:31.020
here we can say shuffleArray(this.icards),
so we're good there.

95
00:07:31.020 --> 00:07:33.126
Note that we can shuffle
an array of anything,

96
00:07:33.126 --> 00:07:35.988
we don't care the contents we
are just moving stuff around, so

97
00:07:35.988 --> 00:07:39.190
this will operate on whatever we want,
shuffles it in place, right.

98
00:07:41.380 --> 00:07:46.723
So now, if we create a deck we just
want to iterate over the length of,

99
00:07:46.723 --> 00:07:50.230
we wanna iterate over these enums.

100
00:07:50.230 --> 00:07:53.198
So we could do it this way, for,

101
00:07:55.617 --> 00:08:00.710
&gt;&gt; Mike North: s for suit, = 0, s is less

102
00:08:00.710 --> 00:08:05.866
than,
&gt;&gt; Mike North: We

103
00:08:05.866 --> 00:08:10.582
could do it this way,
&gt;&gt; Mike North: Suit.length.

104
00:08:13.929 --> 00:08:16.140
&gt;&gt; Speaker 2: Because you
need to do Object.keys here?

105
00:08:16.140 --> 00:08:16.697
&gt;&gt; Mike North: What's that?
&gt;&gt; Speaker 2: Do

106
00:08:16.697 --> 00:08:18.458
you need to do Object.keys?

107
00:08:18.458 --> 00:08:19.137
&gt;&gt; Mike North: Sorry, you're right.

108
00:08:22.642 --> 00:08:25.193
&gt;&gt; Mike North: It's almost like
I just ate a bunch of tacos, and

109
00:08:25.193 --> 00:08:27.070
I'm about to slip into a food coma.

110
00:08:28.650 --> 00:08:35.434
Suit.length okay and then I'm gonna
do s+=1 so I'm gonna skip by 2s here.

111
00:08:39.181 --> 00:08:42.830
&gt;&gt; Mike North: Essentially saving me the
trouble of having to half it each time.

112
00:08:42.830 --> 00:08:46.994
I'm gonna have something
similar in here another for

113
00:08:46.994 --> 00:08:53.231
loop where I'm going to start at,
&gt;&gt; Mike North: We'll call this n for

114
00:08:53.231 --> 00:08:56.117
number and this is gonna be Object.keys,

115
00:08:56.117 --> 00:09:01.018
actually I don't want this fancy code
thing that it's doing right now.

116
00:09:03.418 --> 00:09:09.346
&gt;&gt; Mike North: Let n is 0 I'll do
the same things up here, more or less.

117
00:09:10.907 --> 00:09:18.339
&gt;&gt; Mike North: n is less than
the length of the cardNumber, enum.

118
00:09:21.232 --> 00:09:25.979
&gt;&gt; Mike North: n++ okay, so
now effectively I should be inside this n

119
00:09:25.979 --> 00:09:32.451
squared thing, and there's no way
around the n squared in this situation.

120
00:09:32.451 --> 00:09:36.268
We should hit this 52 times, 13 times 4.

121
00:09:36.268 --> 00:09:43.967
So now, I want to create a Card array.

122
00:09:43.967 --> 00:09:46.992
So we could say, let cards =,

123
00:09:58.002 --> 00:09:59.607
&gt;&gt; Mike North: And we'll pre-allocate 52

124
00:09:59.607 --> 00:10:02.105
spots since we know we'll
need them at the end.

125
00:10:02.105 --> 00:10:05.422
We'll return the cards so
this is happy now,

126
00:10:05.422 --> 00:10:11.284
there are gonna be look no cards in
this array, it's gonna be 52 undefineds.

127
00:10:11.284 --> 00:10:14.675
So it's our job now to go through and
define it.

128
00:10:16.754 --> 00:10:19.262
&gt;&gt; Mike North: Actually, it'll be
easier if we do it this way, frankly.

129
00:10:21.449 --> 00:10:23.805
&gt;&gt; Mike North: Just so we don't have
to compute the index every time,

130
00:10:23.805 --> 00:10:26.430
we'll be resizing the array potentially,
but no worries.

131
00:10:28.010 --> 00:10:34.830
So now, this card is going to
be suit first, and then number.

132
00:10:36.330 --> 00:10:39.398
And we don't really need to hold
the reference to it, so we can just say,

133
00:10:39.398 --> 00:10:44.380
cards.push that in, and we're good.

134
00:10:44.380 --> 00:10:46.250
So that should create our deck of cards.

135
00:10:47.740 --> 00:10:49.014
Let's test it out.

136
00:10:58.812 --> 00:11:00.163
&gt;&gt; Mike North: Should see 52.

137
00:11:04.485 --> 00:11:08.990
&gt;&gt; Mike North: And,
&gt;&gt; Mike North: It's unhappy with some of

138
00:11:08.990 --> 00:11:10.120
my other functions here.

139
00:11:11.820 --> 00:11:15.264
We can give it temporary stuff to
return to stop from complaining.

140
00:11:24.169 --> 00:11:26.103
&gt;&gt; Mike North: 104,
there's something wrong here.

141
00:11:28.956 --> 00:11:31.283
&gt;&gt; Mike North: There it is.

142
00:11:38.471 --> 00:11:40.980
&gt;&gt; Mike North: 52, okay.

143
00:11:40.980 --> 00:11:44.021
And if we wanted to see the cards
themselves we can just take a look here.

144
00:11:49.528 --> 00:11:51.025
&gt;&gt; Mike North: So this looks about right.

145
00:11:53.297 --> 00:11:59.215
&gt;&gt; Mike North: Actually, maybe not okay,
we're doing something wrong here.

146
00:11:59.215 --> 00:12:02.246
So cuz of the way I've done this,

147
00:12:02.246 --> 00:12:07.882
we're gonna have to do like,
&gt;&gt; Mike North: That,

148
00:12:07.882 --> 00:12:11.320
cuz we're skipping by 2s.

149
00:12:11.320 --> 00:12:14.313
Anyhoo, now we've got it,
so the thing to scan for

150
00:12:14.313 --> 00:12:18.915
here is the numbers in the left column
never get above 3, 0, 1, 2, or 3.

151
00:12:18.915 --> 00:12:22.620
And the numbers in the right
column go up to 12, 0 through 12.

152
00:12:22.620 --> 00:12:25.954
So in this case,
we could have gone through the enum and

153
00:12:25.954 --> 00:12:27.919
seen the values of these enums.

154
00:12:27.919 --> 00:12:30.554
But we can actually just
use the counter as well,

155
00:12:30.554 --> 00:12:32.751
which is what we happen to be using here.

156
00:12:32.751 --> 00:12:35.190
Okay, so now we've got our cards.

157
00:12:36.230 --> 00:12:40.204
And we can remove our little
temporary fixes here, so

158
00:12:40.204 --> 00:12:42.690
we get back to our useful errors.

159
00:12:42.690 --> 00:12:45.822
And now we've got to deal a hand and

160
00:12:45.822 --> 00:12:50.683
we can do this by saying this.cards and
then splice,

161
00:12:50.683 --> 00:12:56.422
splice is what we use to remove
a chunk of element from an array.

162
00:12:56.422 --> 00:13:00.872
We're gonna start from a particular
number and that will be this,

163
00:13:00.872 --> 00:13:03.335
we could do this.card's length but

164
00:13:03.335 --> 00:13:08.270
we already have a length property on
this dealer, so I'm gonna use that.

165
00:13:10.020 --> 00:13:14.749
And maybe some other type of dealer like,
would have six decks,

166
00:13:14.749 --> 00:13:20.021
the casino style dealing where they
mix it all together for blackjack.

167
00:13:20.021 --> 00:13:22.842
And getLength()- number, so

168
00:13:22.842 --> 00:13:28.083
we're gonna pop starting from there and
then delete number,

169
00:13:28.083 --> 00:13:33.240
oops, sorry, numCards,
I'm reading this incorrectly.

170
00:13:35.155 --> 00:13:38.400
&gt;&gt; Mike North: And the last argument
here is optional that would be what

171
00:13:38.400 --> 00:13:42.974
we want to put back into the cards array
and we're not gonna do anything there.

172
00:13:42.974 --> 00:13:44.988
So, we if we return this, oop.

173
00:13:48.957 --> 00:13:52.990
&gt;&gt; Mike North: Now,
we’ve satisfied that ask there.

174
00:13:52.990 --> 00:13:57.746
So, now we’re actually down to it
looks like we still have a couple of

175
00:13:57.746 --> 00:14:00.217
edge cases that we haven’t handled.

176
00:14:00.217 --> 00:14:03.772
We should throw an error if I ask for
too many cards, and

177
00:14:03.772 --> 00:14:07.263
throw an error if I ask for
a negative number of cards.

178
00:14:07.263 --> 00:14:12.312
So that's pretty easy, there are just

179
00:14:12.312 --> 00:14:16.903
some runtime assertions there, so

180
00:14:16.903 --> 00:14:25.027
if (numCards &gt; getLength())
then we can throw new Error.

181
00:14:30.897 --> 00:14:34.494
&gt;&gt; Mike North: Anyone know why I'm using
the arrow constructor here instead of just

182
00:14:34.494 --> 00:14:35.557
throwing a string?

183
00:14:35.557 --> 00:14:37.425
&gt;&gt; Speaker 2: Cuz it keeps the stack.

184
00:14:37.425 --> 00:14:38.533
&gt;&gt; Mike North: Very good.

185
00:14:41.108 --> 00:14:43.437
&gt;&gt; Mike North: If we just throw a string,
it does not keep the stack.

186
00:14:45.072 --> 00:14:52.027
&gt;&gt; Mike North: So that's less than 0
we'll say, please give me YOUR cards.

187
00:14:56.859 --> 00:15:00.460
&gt;&gt; Mike North: Okay,
one test left, reading the card.

188
00:15:00.460 --> 00:15:06.840
So now, we have to use the way
this enum works to get from,

189
00:15:06.840 --> 00:15:12.080
well we know the value of each of this
members of the enum is, that's a number.

190
00:15:12.080 --> 00:15:15.569
We see that as we were logging those
topples out, we have to get to the string.

191
00:15:17.378 --> 00:15:19.874
&gt;&gt; Mike North: So in this case we can say,

192
00:15:19.874 --> 00:15:24.533
we're gonna return template literal and
here.

193
00:15:24.533 --> 00:15:29.189
It's gonna basically this form so
we've got the card here I made the claim

194
00:15:29.189 --> 00:15:33.260
that these structured assignment
works really nice with this.

195
00:15:33.260 --> 00:15:34.765
Here's how that works.

196
00:15:40.568 --> 00:15:44.839
&gt;&gt; Mike North: So if I hover over these
types it turns out that the typing has

197
00:15:44.839 --> 00:15:47.780
worked in the other direction, right.

198
00:15:47.780 --> 00:15:51.550
Because I know what's on the right-hand
of the assignment operator.

199
00:15:51.550 --> 00:15:54.674
Is there's a tuple of that form,
the first thing is the suit,

200
00:15:54.674 --> 00:15:56.550
the second thing is the card number.

201
00:15:56.550 --> 00:15:57.973
Now on the left-hand side,

202
00:15:57.973 --> 00:16:02.070
these things that I'm destructuring
out of it they get the correct types.

203
00:16:02.070 --> 00:16:05.901
So these are ready to go,
ready to put into the respective enums.

204
00:16:19.014 --> 00:16:22.691
&gt;&gt; Mike North: And
it looks like what's going on?

205
00:16:22.691 --> 00:16:25.080
Let's see what we returned and said.

206
00:16:25.080 --> 00:16:25.968
&gt;&gt; Speaker 3: They're reversed.

207
00:16:29.234 --> 00:16:30.470
&gt;&gt; Mike North: The clubs of seven.

208
00:16:32.290 --> 00:16:36.788
The seven of clubs, okay so
just to recap how this works,

209
00:16:36.788 --> 00:16:41.850
up top we have this really nice
easy to understand collections of

210
00:16:41.850 --> 00:16:48.627
related values think of them like they're
all members of a particular type, right.

211
00:16:48.627 --> 00:16:51.776
Things that fit into a category.

212
00:16:51.776 --> 00:16:56.970
We have type safety around these so
if I try to reverse these

213
00:16:56.970 --> 00:17:03.440
even though their both integers this
is not gonna make your tuple happy.

214
00:17:03.440 --> 00:17:05.401
So this is the benefit here,

215
00:17:05.401 --> 00:17:11.062
it's not just like constants if we were
to use just const number equals whatever.

216
00:17:11.062 --> 00:17:14.040
We could reverse those around,
we don't get the type safety.

217
00:17:14.040 --> 00:17:15.930
So this is its own type,

218
00:17:15.930 --> 00:17:19.720
even though when we log them out they
all kinda boil down to the same thing.

219
00:17:19.720 --> 00:17:23.940
That's one of the main benefits of
using enums here, that you're assured

220
00:17:23.940 --> 00:17:27.890
to not have the right value, but
to belong to the correct collection.

221
00:17:27.890 --> 00:17:32.422
So then we looked at how we
might like get the length,

222
00:17:32.422 --> 00:17:36.855
the number of members in
a particular collection.

223
00:17:36.855 --> 00:17:41.894
We,
&gt;&gt; Mike North: Then used these enum

224
00:17:41.894 --> 00:17:48.652
values, which are numeric, to sort of
get the human readable string out.

225
00:17:48.652 --> 00:17:53.853
So like we refer to these things by
name and now we can log them out.

226
00:17:53.853 --> 00:17:58.565
Unlike variables like if you have var x
equals something there's no way when you

227
00:17:58.565 --> 00:18:02.855
have this thing you're referring to
in your program called x to print out

228
00:18:02.855 --> 00:18:04.209
the string x, right?

229
00:18:04.209 --> 00:18:09.697
So these things have a string value and
a numeric value and

230
00:18:09.697 --> 00:18:13.940
both can be useful in
a situation like this.

231
00:18:15.000 --> 00:18:19.140
So hopefully that's a good
crash course in enum types.

