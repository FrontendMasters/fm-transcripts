WEBVTT

1
00:00:00.200 --> 00:00:01.480
&gt;&gt; Mike North: More on Functions.

2
00:00:01.480 --> 00:00:06.750
Unlike in JavaScript, where there's
a lot of flexibility around arguments,

3
00:00:06.750 --> 00:00:12.620
TypeScript by default requires that
you pass a value for every argument.

4
00:00:12.620 --> 00:00:15.910
So in this situation, where we're
gonna create a Twitter post saying,

5
00:00:15.910 --> 00:00:17.270
I ate a ham sandwich today.

6
00:00:17.270 --> 00:00:20.370
And we're gonna post it with
like this particular username.

7
00:00:20.370 --> 00:00:24.570
But we failed to provide that
third argument, an image url.

8
00:00:24.570 --> 00:00:28.896
We will say,
I expected three arguments, we got two,

9
00:00:28.896 --> 00:00:34.290
full stop, and I cannot validate this.

10
00:00:34.290 --> 00:00:35.250
I'm not signing off on it.

11
00:00:36.640 --> 00:00:41.070
So we could fix this by making imageurl,
what is called an optional parameter.

12
00:00:41.070 --> 00:00:42.750
That's what an optional
parameter looks like.

13
00:00:42.750 --> 00:00:45.490
The question is there,
any time you have this,

14
00:00:45.490 --> 00:00:52.450
what you will see is that the type of
this value is not going to just be URL.

15
00:00:52.450 --> 00:00:54.750
Let me actually paste it
into some code here for

16
00:00:54.750 --> 00:00:59.840
you to see.
&gt;&gt; Mike North: Where are you, slides?

17
00:01:12.606 --> 00:01:13.930
&gt;&gt; Mike North: And this is complaining

18
00:01:13.930 --> 00:01:22.140
because I'm in a JavaScript file.
&gt;&gt; Mike North: So

19
00:01:22.140 --> 00:01:27.700
note that the type of this,
is a url or undefined.

20
00:01:27.700 --> 00:01:32.530
This is really cool because imagine if
we had something up here that was like.

21
00:01:33.750 --> 00:01:39.660
We had a tag like that and

22
00:01:39.660 --> 00:01:46.120
we said, okay, critical url,
equals imageurl.

23
00:01:46.120 --> 00:01:51.560
It's gonna say hold up, like when you
defined this you did not indicate that

24
00:01:51.560 --> 00:01:57.490
it was acceptable for undefined to be
set here, like it's undefined currently.

25
00:01:57.490 --> 00:02:02.510
But if you're performing an assignment
operation, it basically says whenever

26
00:02:02.510 --> 00:02:08.390
you have this optional here, you must
kind of percolate that potential for

27
00:02:08.390 --> 00:02:13.660
it to be set to an undefined
value wherever,

28
00:02:13.660 --> 00:02:16.390
like you have to percolate
that through all assignments.

29
00:02:16.390 --> 00:02:20.770
You would have no safety like this in
JavaScript, it was just carry on and

30
00:02:20.770 --> 00:02:25.060
if it's not parsed, it will be really
easy for this code to slip through.

31
00:02:25.060 --> 00:02:30.560
If you had a lot of complexity,
a lot of conditionals in here, so

32
00:02:30.560 --> 00:02:32.980
here it's basically saying right,

33
00:02:32.980 --> 00:02:37.383
either up here you have to say,
&gt;&gt; Mike North: I'm okay

34
00:02:37.383 --> 00:02:41.654
with this being undefined,
this by the way is called a union type,

35
00:02:41.654 --> 00:02:43.950
think of it as the or operator.

36
00:02:43.950 --> 00:02:50.746
You know how we can do like,
&gt;&gt; Mike North: Something like that,

37
00:02:50.746 --> 00:02:55.170
ujst think of it,
it is a bit wise or but in types.

38
00:02:55.170 --> 00:02:59.570
Just think of it as the union type,
it's any of these things, right.

39
00:03:01.060 --> 00:03:02.950
Could do like that, any of those three.

40
00:03:04.120 --> 00:03:07.570
But we either have to do that or
down here we'd have to say,

41
00:03:21.151 --> 00:03:21.713
&gt;&gt; Mike North: Something

42
00:03:21.713 --> 00:03:26.640
like this.
&gt;&gt; Mike North: And

43
00:03:26.640 --> 00:03:33.830
why is it complaining now?
&gt;&gt; Mike North: It

44
00:03:33.830 --> 00:03:38.922
wants a string,
&gt;&gt; Mike North: Sorry,

45
00:03:38.922 --> 00:03:43.868
that's not JavaScript
&gt;&gt; Mike North: That's

46
00:03:43.868 --> 00:03:45.050
what I was trying to do.

47
00:03:45.050 --> 00:03:47.390
So here, now it forces that decision,

48
00:03:47.390 --> 00:03:50.300
it forces us to have that
extra layer of robustness.

49
00:03:50.300 --> 00:03:54.310
It's basically saying, look,
you either have to make a decision.

50
00:03:54.310 --> 00:03:58.020
Tolerate the potential for
this to be undefined, or handle it, and

51
00:03:58.020 --> 00:04:00.970
I will go along with that
URL being a critical URL.

52
00:04:00.970 --> 00:04:03.760
And it can never be undefined,
and you can't assign it.

53
00:04:03.760 --> 00:04:07.790
To any other type, where you could
possibly not pass something in, so

54
00:04:07.790 --> 00:04:11.470
this insulates you,
combined with the fact that like,

55
00:04:11.470 --> 00:04:14.730
without that maybe this
would have been required.

56
00:04:15.810 --> 00:04:17.570
Now, we can be sure that like,

57
00:04:17.570 --> 00:04:20.830
our functions would be called with
the right number of arguments.

58
00:04:20.830 --> 00:04:25.250
And in the event that we say things
are optional, that potential for

59
00:04:25.250 --> 00:04:28.290
things to not have a defined value.

60
00:04:28.290 --> 00:04:31.210
That's something we have to deal with and
sort of go all the way back

61
00:04:31.210 --> 00:04:34.560
through code that might depend on it,
and eventually let things shake out.

62
00:04:36.270 --> 00:04:37.790
Really, really, really powerful idea.

63
00:04:40.550 --> 00:04:48.717
Okay, that was worth a little side trip.
&gt;&gt; Mike North: All right,

64
00:04:48.717 --> 00:04:52.410
so, option value, optional parameter.

65
00:04:52.410 --> 00:04:58.500
We can also do, we can have a default
value to use with a parameter.

66
00:04:58.500 --> 00:05:02.260
I have types here, I'm indicating that
it's JavaScript in the top right corner,

67
00:05:02.260 --> 00:05:06.650
because we can Take the types away we can
totally do this with modern JavaScript.

68
00:05:06.650 --> 00:05:09.880
You can do this in Chrome we'll understand
it if you do it right in the console,

69
00:05:09.880 --> 00:05:12.594
you can have a default value.

70
00:05:12.594 --> 00:05:18.460
So defaults like arguments with
the default value or perimeters

71
00:05:18.460 --> 00:05:24.310
with the default value for obvious
reasons, or hopefully obvious reasons.

72
00:05:24.310 --> 00:05:28.350
They are required, because you're
basically saying here's your fallback

73
00:05:28.350 --> 00:05:31.270
to use in the event that I don't
explicitly pass you something.

74
00:05:31.270 --> 00:05:34.350
So when you're consuming that you
can depend on it being there.

75
00:05:34.350 --> 00:05:39.850
With this default value here,
if I go back to pasting that into this

76
00:05:39.850 --> 00:05:46.009
little environment here we can see that.
&gt;&gt; Mike North: I'm already one

77
00:05:46.009 --> 00:05:51.736
slide ahead, we can see that we've got.
&gt;&gt; Mike North: This

78
00:05:51.736 --> 00:05:53.390
user name is still just a string.

79
00:05:55.020 --> 00:05:56.120
Is it clipping off the top up there?

80
00:05:56.120 --> 00:05:58.170
Yes see parameter user name string.

81
00:05:58.170 --> 00:06:02.820
So that doesn't end up turning into
that potentially undefined thing.

82
00:06:02.820 --> 00:06:06.190
So this is required, rest parameters.

83
00:06:06.190 --> 00:06:09.820
So we talked about using rest
when we were doing destructuring.

84
00:06:09.820 --> 00:06:14.280
It sort of captures anything else
that you didn't explicitly name.

85
00:06:14.280 --> 00:06:16.480
Same concept up here, so

86
00:06:16.480 --> 00:06:20.810
this allows us to have like a,
as people call these variatic arguments.

87
00:06:20.810 --> 00:06:23.640
Right, you can have any number of
arguments you pass to this function.

88
00:06:24.680 --> 00:06:27.950
When we order a sandwich,
you must provide a bread,

89
00:06:27.950 --> 00:06:31.490
you must provide the name of
the sandwich type that you're ordering.

90
00:06:31.490 --> 00:06:35.150
And then anything after that
will be regarded as a topping.

91
00:06:35.150 --> 00:06:38.670
And like that will be captured
In this toppings array, and

92
00:06:38.670 --> 00:06:41.210
you treat that as an array in
the body of the body of the function.

93
00:06:41.210 --> 00:06:42.610
But when you're invoking the function,

94
00:06:42.610 --> 00:06:46.210
those are the final
arguments that are passed.

95
00:06:46.210 --> 00:06:48.580
This can only go at the end, like,

96
00:06:48.580 --> 00:06:54.170
you can only have one rest parameter per
function signature, and it always goes

97
00:06:54.170 --> 00:06:56.980
at the end because it kind of captures
anything else that might be there.

