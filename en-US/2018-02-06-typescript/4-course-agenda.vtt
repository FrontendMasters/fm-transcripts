WEBVTT

1
00:00:00.410 --> 00:00:03.430
&gt;&gt; Mike North: Over the next
two days we're going to learn

2
00:00:03.430 --> 00:00:06.440
exactly where the line between
Typescript and JavaScript is.

3
00:00:06.440 --> 00:00:09.670
At least right now, and I will try to
give you an idea of where it's moving.

4
00:00:11.080 --> 00:00:15.960
Even going so far as to help you
understand various proposals to change

5
00:00:15.960 --> 00:00:20.515
the JavaScript language like standard.

6
00:00:22.160 --> 00:00:25.860
You're gonna see repeated use of these
little icons, the TypeScript and

7
00:00:25.860 --> 00:00:27.070
JavaScript icons.

8
00:00:27.070 --> 00:00:35.150
So TypeScript is, as we said, a strict,
or sorry, a typed superset of JavaScript.

9
00:00:35.150 --> 00:00:38.285
So you can assume anything I'm
showing you in JavaScript,

10
00:00:38.285 --> 00:00:43.916
it can be used in at least
in some form in TypeScript.

11
00:00:43.916 --> 00:00:49.320
I do wanna show it to you in the regular
JavaScript way so that even if you're

12
00:00:49.320 --> 00:00:53.500
watching this and you might want to use
something like Visual Studio code which

13
00:00:53.500 --> 00:00:57.740
can use TypeScript to analyze your regular
JavaScript, I want you to know that.

14
00:00:57.740 --> 00:01:01.860
This is not something you need TypeScript
for, it is a modern JavaScript language

15
00:01:01.860 --> 00:01:06.380
feature and
then we'll go back to TypeScript only for

16
00:01:06.380 --> 00:01:10.770
the types and for things that have no or

17
00:01:10.770 --> 00:01:16.310
there is no signs the regular JavaScript
language will take on that feature.

18
00:01:16.310 --> 00:01:19.320
So you should have a very good
understanding by the end of this, for

19
00:01:19.320 --> 00:01:23.380
example that like, a sync and
wait, or generator functions,

20
00:01:23.380 --> 00:01:26.580
or iterators, let and conts.

21
00:01:26.580 --> 00:01:30.300
Those at one time were sort
of TypeScript things, and

22
00:01:30.300 --> 00:01:34.820
now the JavaScript language
spec has those as well.

23
00:01:34.820 --> 00:01:38.460
So by the end of this class,
you should have a good understanding for

24
00:01:38.460 --> 00:01:42.160
exactly where the line is for
between modern JavaScript and TypeScript.

25
00:01:42.160 --> 00:01:46.650
Over time, we're seeing that what used
to be TypeScript specific features,

26
00:01:46.650 --> 00:01:50.920
they're making their way into
the JavaScript language specification.

27
00:01:50.920 --> 00:01:52.420
This is happening more and more, and

28
00:01:52.420 --> 00:01:58.630
there are even some proposals to
add things to the JavaScript spec

29
00:01:58.630 --> 00:02:03.080
that seemed to be directly aligned with
stuff you can already do in TypeScript.

30
00:02:03.080 --> 00:02:08.100
So that's when I was learning this
language a couple of years back,

31
00:02:08.100 --> 00:02:10.740
this is something that I missed.

32
00:02:10.740 --> 00:02:14.280
You'd read a TypeScript book or
you'd go through a tutorial and

33
00:02:14.280 --> 00:02:19.130
there would be no sense of this is
where the regular language ends and

34
00:02:19.130 --> 00:02:21.130
this is where the typed stuff begins.

35
00:02:21.130 --> 00:02:27.390
So, I'm going to aim to help you
understand exactly where that line is.

36
00:02:27.390 --> 00:02:33.970
Whenever you see a JS, little yellow
square in the upper right corner here.

37
00:02:33.970 --> 00:02:37.871
That indicates that this could
be used both in TypeScript and

38
00:02:37.871 --> 00:02:40.018
in regular JavaScript, right?

39
00:02:40.018 --> 00:02:42.264
Or the most modern version of the spec,

40
00:02:42.264 --> 00:02:46.910
not necessarily stuff that every browser
will understand, but one day it will.

41
00:02:48.040 --> 00:02:51.780
If you see the blue TS logo in the top
right corner, that's something that you

42
00:02:51.780 --> 00:02:55.500
have to run to the TypeScript
compiler in order to get new JS or

43
00:02:55.500 --> 00:02:58.160
browser to understand,
usually that will involve types.

44
00:02:58.160 --> 00:03:02.380
So today, we are going to do a couple of

45
00:03:02.380 --> 00:03:07.720
isolated exercises that aim
to kinda get our feet wet.

46
00:03:07.720 --> 00:03:09.390
Right?
Help us tackle a few

47
00:03:09.390 --> 00:03:14.390
challenges where types can really make
things simpler and more expressive.

48
00:03:14.390 --> 00:03:19.666
Tomorrow, weâ€™re going to deal with
a larger project that involves handling

49
00:03:19.666 --> 00:03:25.390
a synchronous code flow and
React components.

50
00:03:25.390 --> 00:03:28.170
So we're gonna work with TypeScript and
React.

51
00:03:28.170 --> 00:03:30.590
Don't worry if you don't know React yet.

52
00:03:30.590 --> 00:03:33.470
We're gonna be using it
in a very simple way, but

53
00:03:33.470 --> 00:03:38.630
it is a great example of a library
that has used the concept of types to

54
00:03:38.630 --> 00:03:43.610
add some structural where previously,
you know it was sort of a free for all.

55
00:03:43.610 --> 00:03:46.510
At least the way I wrote React,

56
00:03:46.510 --> 00:03:51.220
it turned out I would add something
to props, or something to state.

57
00:03:51.220 --> 00:03:56.210
And I would add it as needed and
the rest of

58
00:03:56.210 --> 00:04:01.050
my code would not be aware that, hey this
new property is available, because there's

59
00:04:01.050 --> 00:04:04.680
no clearly defined structure.
&gt;&gt; Speaker 2: The type definitions used

60
00:04:04.680 --> 00:04:09.800
for TypeScript, are there similar
definitions using flow or

61
00:04:09.800 --> 00:04:12.730
some of these paradigms could
they be translated into flow?

62
00:04:12.730 --> 00:04:13.874
&gt;&gt; Mike North: Conceptually,

63
00:04:13.874 --> 00:04:17.059
all of these should carry over,
one of the, so

64
00:04:17.059 --> 00:04:21.961
something you can check out if you
choose there's a video visual studio

65
00:04:21.961 --> 00:04:27.050
code course I taught earlier this week and
the video should be online now.

66
00:04:27.050 --> 00:04:31.018
You can even use JS Doc comments to use

67
00:04:31.018 --> 00:04:36.160
TypeScript looking types
in inert comments.

68
00:04:36.160 --> 00:04:41.550
All comments are inert to provide type
information for regular JavaScript.

69
00:04:41.550 --> 00:04:45.620
But it is great to see that all of these
different ways of expressing types

70
00:04:45.620 --> 00:04:47.480
are very, very closely aligned.

71
00:04:47.480 --> 00:04:51.960
And so, once you learn one,
it's a matter of kind of figuring

72
00:04:51.960 --> 00:04:56.040
out what's the syntax for this other one?

73
00:04:56.040 --> 00:04:59.450
The difference here, of course is,
this is not inert code.

74
00:05:00.890 --> 00:05:04.050
This is a different language, right, and

75
00:05:04.050 --> 00:05:07.850
as a result I think personally,
given the choice,

76
00:05:07.850 --> 00:05:12.710
someone said write me some code for
a browser that has type information.

77
00:05:12.710 --> 00:05:16.909
I would choose TypeScripts simply because
with comments you're limited to sort of

78
00:05:17.930 --> 00:05:20.790
wrapping your types around
the code as best you can.

79
00:05:20.790 --> 00:05:24.680
Whereas here, you can put it into the code
and it reads a little bit more better,

80
00:05:24.680 --> 00:05:25.430
if that makes sense.

81
00:05:27.260 --> 00:05:28.890
Reads a little bit better,
not more better.

82
00:05:31.780 --> 00:05:36.390
So we will, we will very quickly see that
one of the things we've been missing

83
00:05:36.390 --> 00:05:41.320
out on in the JavaScript world is the
ability to express our intent with types.

84
00:05:41.320 --> 00:05:45.300
Anytime you've written a function
that takes in, like, as arguments,

85
00:05:45.300 --> 00:05:49.100
two objects, that's not,
that is not expressive.

86
00:05:49.100 --> 00:05:50.060
What are those objects?

87
00:05:50.060 --> 00:05:52.560
What properties are allowed
on those objects?

88
00:05:52.560 --> 00:05:54.680
What's optional and what's required?

89
00:05:54.680 --> 00:05:58.870
And so now, we can say,
we can basically say upfront,

90
00:05:58.870 --> 00:06:01.960
what's the form of this
objects that I wish?

91
00:06:01.960 --> 00:06:04.090
What's the form I want them to take?

92
00:06:04.090 --> 00:06:08.360
And we can catch that at compile time,
right?

93
00:06:08.360 --> 00:06:13.276
Rather than catching it up run time feel
via bug report we'll get a build time,

94
00:06:13.276 --> 00:06:15.450
red squiggle under a line of code.

95
00:06:17.800 --> 00:06:21.780
One of the common mistakes people run into
when starting out with TypeScript is they

96
00:06:21.780 --> 00:06:23.480
kinda add types everywhere.

97
00:06:23.480 --> 00:06:27.912
And it's important to understand that
a type system is designed around,

98
00:06:27.912 --> 00:06:30.710
it is a way of expressing constraints.

99
00:06:30.710 --> 00:06:32.840
And there is a way to go to far.

100
00:06:32.840 --> 00:06:37.700
It's like I would say the defaults path
will lead you to going too far and

101
00:06:37.700 --> 00:06:40.310
you basically can sort
of lock yourself in and

102
00:06:40.310 --> 00:06:44.860
find that you're wrestling against
these types rather than letting them

103
00:06:44.860 --> 00:06:49.810
you know help you put guard
rails in the right places.

104
00:06:49.810 --> 00:06:51.200
You know?
You don't wanna box yourself in.

105
00:06:51.200 --> 00:06:53.070
You don't wanna over constrain your code.

106
00:06:53.070 --> 00:06:57.950
So we will learn how to have a light
touch, and to basically only apply

107
00:06:57.950 --> 00:07:02.780
type definitions where TypeScript can
figure things out for us automatically.

108
00:07:02.780 --> 00:07:07.600
Finally, one of the core tenants
of the TypeScript project is,

109
00:07:07.600 --> 00:07:11.750
you should be able to take
some regular JavaScript and

110
00:07:11.750 --> 00:07:15.080
migrate to TypeScript relatively easily,
right?

111
00:07:15.080 --> 00:07:19.840
So we will see how we can
incrementally start shifting

112
00:07:19.840 --> 00:07:21.560
towards a Type Script code base.

113
00:07:21.560 --> 00:07:26.100
This isn't, I don't want you to think of
this as, we're going to rewrite everything

114
00:07:26.100 --> 00:07:32.220
in something like CoffeeScript,
which is a totally different syntax.

115
00:07:32.220 --> 00:07:34.300
Coffee Script is not really
a super set of anything.

116
00:07:35.890 --> 00:07:39.800
So we will hopefully get to see
how we can mix JavaScript and

117
00:07:39.800 --> 00:07:44.830
TypeScript and
start with some flexible type definitions,

118
00:07:44.830 --> 00:07:48.580
and then basically pay down tech debt by
tightening it up and tightening it up and

119
00:07:48.580 --> 00:07:51.770
tightening it up and
then we'll end up with something that is

120
00:07:51.770 --> 00:07:55.220
where we'd want it to be had we written
it in TypeScript from the beginning.

