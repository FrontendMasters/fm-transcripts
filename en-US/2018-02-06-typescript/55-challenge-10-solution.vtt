WEBVTT

1
00:00:00.080 --> 00:00:03.510
&gt;&gt; Mike North: We're going to go through
the solution to the last exercise,

2
00:00:03.510 --> 00:00:07.730
whereby we implement this task function

3
00:00:07.730 --> 00:00:12.310
that will treat the contents of
a generator function in such a way

4
00:00:12.310 --> 00:00:16.680
that we have something that looks looks
almost exactly like async and await.

5
00:00:19.200 --> 00:00:27.020
So we can run npm start autocomplete-4.

6
00:00:27.020 --> 00:00:30.090
And we've got our task function here.

7
00:00:30.090 --> 00:00:36.870
Before we actually start this exercise up,
I recommend that when we kick this

8
00:00:36.870 --> 00:00:42.200
last one off, that we try a couple of
smaller examples that would give us signs

9
00:00:42.200 --> 00:00:47.763
we're on the right track before we went
for the full blown async and await.

10
00:00:47.763 --> 00:00:52.820
The first step I'm going to go
through here is an effort to

11
00:00:52.820 --> 00:00:58.150
show that promises are being chained
in sequence together instead

12
00:00:58.150 --> 00:01:03.350
of sent off in parallel, as they would
were we just writing synchronous code.

13
00:01:03.350 --> 00:01:07.920
And if you have a couple of fetches
that aren't chained together,

14
00:01:07.920 --> 00:01:12.970
those will just all go off, and
they'll come back whenever they come back.

15
00:01:12.970 --> 00:01:18.083
An easy way to do that is to
have something like this,

16
00:01:18.083 --> 00:01:22.969
where we have await for
600 milliseconds, and

17
00:01:22.969 --> 00:01:27.157
then await shortly thereafter with 300

18
00:01:27.157 --> 00:01:32.553
milliseconds.
&gt;&gt; Mike North: Something

19
00:01:32.553 --> 00:01:38.049
like this.
&gt;&gt; Mike North: So

20
00:01:38.049 --> 00:01:43.920
effectively what we expect to see is,
if we were to do these in serial,

21
00:01:43.920 --> 00:01:49.592
right, chain them together,
we'll see the 600 finish first,

22
00:01:49.592 --> 00:01:53.620
and then the 300 will happen after it.

23
00:01:53.620 --> 00:01:57.820
If we were to run them, start them
both off at nearly the same time,

24
00:01:57.820 --> 00:02:00.050
because the 300 is gonna wait for

25
00:02:00.050 --> 00:02:03.750
a shorter period of time it will
be the one that finishes first.

26
00:02:03.750 --> 00:02:06.556
So this gives us our first sign that
we're chaining things together.

27
00:02:06.556 --> 00:02:10.450
Now, we're not worried about passing
anything into the iterator at this

28
00:02:10.450 --> 00:02:11.640
point in time.

29
00:02:11.640 --> 00:02:13.240
We will tackle that as the next step.

30
00:02:13.240 --> 00:02:16.680
We'll worry about the values of
these promises is in the next step.

31
00:02:16.680 --> 00:02:18.930
We're just worried about
sequential order and

32
00:02:18.930 --> 00:02:20.970
that we're assembling
this chain correctly.

33
00:02:22.660 --> 00:02:26.830
So first,
we're gonna implement our solution here.

34
00:02:26.830 --> 00:02:31.400
And let me see if I can
make this even clearer.

35
00:02:31.400 --> 00:02:35.490
Wonderful, so what we're gonna do is,

36
00:02:35.490 --> 00:02:38.780
we've got this iterator, and
the easiest way to do this,

37
00:02:38.780 --> 00:02:43.110
we could do a looping approach, or
we could do a recursive approach.

38
00:02:43.110 --> 00:02:48.920
The benefit of recursion is I can
use things like return to control,

39
00:02:48.920 --> 00:02:54.028
an early termination of a particular
branch of code as opposed to

40
00:02:54.028 --> 00:02:58.830
having to worry about a lot of
very controlled branching and

41
00:02:58.830 --> 00:03:02.420
use of something like the continue
statement inside a loop.

42
00:03:02.420 --> 00:03:04.380
So I'm gonna opt for recursion here.

43
00:03:06.100 --> 00:03:13.490
So I'm just gonna have a function
here called nextStep().

44
00:03:13.490 --> 00:03:14.690
We'll just call it that.

45
00:03:14.690 --> 00:03:20.580
And this basically indicates an attempt
to grab something off of the iterator and

46
00:03:20.580 --> 00:03:21.400
deal with that.

47
00:03:23.610 --> 00:03:28.460
And we'll begin, so we'll define it,
and then we'll basically invoke it for

48
00:03:28.460 --> 00:03:29.150
the first time.

49
00:03:30.350 --> 00:03:33.680
And so let's make sure that we
can get that first function out,

50
00:03:35.480 --> 00:03:36.750
the first promise out, sorry.

51
00:03:36.750 --> 00:03:41.120
And let me rename this
to just iterate it for

52
00:03:43.010 --> 00:03:46.360
ease of typing and ease of reading.

53
00:03:46.360 --> 00:03:52.680
So, we'll say, p = it.next().

54
00:03:52.680 --> 00:03:54.934
Or actually, let's say,

55
00:03:54.934 --> 00:04:00.636
we call this an iterator item.
&gt;&gt; Mike North: And

56
00:04:00.636 --> 00:04:03.450
so, we need to worry about two things.

57
00:04:03.450 --> 00:04:05.715
Number one, this has a value.

58
00:04:05.715 --> 00:04:12.430
This has a value and it has an indication
of whether it's done or not.

59
00:04:12.430 --> 00:04:16.550
So if it's done we'll return.

60
00:04:18.500 --> 00:04:19.930
And let me just log
something out in the time

61
00:04:19.930 --> 00:04:27.479
being.
&gt;&gt; Mike North: And

62
00:04:27.479 --> 00:04:29.374
we can rename this actually, itResult.

63
00:04:31.000 --> 00:04:35.805
Just to align with the type.
&gt;&gt; Mike North: Okay,

64
00:04:35.805 --> 00:04:38.500
and this point next step is done.

65
00:04:38.500 --> 00:04:43.539
So basically if we pull something off and
we indicate that we have overshot and

66
00:04:43.539 --> 00:04:48.808
let's pretend, for now we're just dealing
with yields, we did see that when we

67
00:04:48.808 --> 00:04:54.027
used return in a generator function,
done and a value came and the same object.

68
00:04:54.027 --> 00:04:58.036
In this case we know that,
when done is true that's

69
00:04:58.036 --> 00:05:02.889
an indication that we've already
dealt with our last value,

70
00:05:02.889 --> 00:05:07.863
so this ensures that say if we
have an iterator of size 0 right?

71
00:05:07.863 --> 00:05:12.820
There's no items in here,
we're done immediately.

72
00:05:12.820 --> 00:05:15.290
We're not going to infinitely recourse, so

73
00:05:15.290 --> 00:05:17.200
this is sort of our
stopping condition here.

74
00:05:19.190 --> 00:05:22.633
In this block of code we know
that we're not done yet.

75
00:05:22.633 --> 00:05:30.640
So we have a value.
&gt;&gt; Mike North: So, there is our value.

76
00:05:32.620 --> 00:05:36.800
And I'm not gonna actually,
sorry, changing my mind here.

77
00:05:38.230 --> 00:05:40.870
I'm not going to presume
that it's a promise.

78
00:05:40.870 --> 00:05:43.534
I've got an,

79
00:05:43.534 --> 00:05:49.086
izPromise function up here,

80
00:05:49.086 --> 00:05:53.535
that should be useful.

81
00:06:01.231 --> 00:06:02.023
&gt;&gt; Mike North: Great, so

82
00:06:02.023 --> 00:06:04.690
the value is not a promise.

83
00:06:04.690 --> 00:06:08.444
We're not gonna worry about it for
the time being.

84
00:06:12.916 --> 00:06:14.644
&gt;&gt; Mike North: If the value is a promise.

85
00:06:18.412 --> 00:06:26.150
&gt;&gt; Mike North: We're gonna say value.then.

86
00:06:26.150 --> 00:06:27.480
There's my promise result.

87
00:06:28.660 --> 00:06:33.576
And we're gonna then call nextStep.

88
00:06:41.273 --> 00:06:43.090
&gt;&gt; Mike North: We actually are not
even gonna worry about this for now.

89
00:06:44.730 --> 00:06:47.510
We don't need to worry
about what it resolves to.

90
00:06:47.510 --> 00:06:54.076
So let's see how this works.
&gt;&gt; Mike North: Okay,

91
00:06:54.076 --> 00:06:56.464
so here's what's happening.

92
00:06:56.464 --> 00:07:04.510
First off, we did see that the 300 did
not beat the 600 to the finish line.

93
00:07:04.510 --> 00:07:07.970
This indicates that we're chaining
things together in a sequence.

94
00:07:07.970 --> 00:07:10.850
So the first thing that
was yielded is a promise.

95
00:07:10.850 --> 00:07:13.870
The second thing that was
yielded is also a promise, and

96
00:07:13.870 --> 00:07:16.080
then finally we hit this done branch.

97
00:07:16.080 --> 00:07:18.590
So this is our first thing
that we want to see.

98
00:07:18.590 --> 00:07:23.440
That we've got this sequential chain
of things working for us here.

99
00:07:25.320 --> 00:07:30.480
So then the next thing we wanna
worry about is a value, right?

100
00:07:30.480 --> 00:07:33.340
So for this, I'm gonna deal with fetch.

101
00:07:33.340 --> 00:07:34.730
Fetch gives us a nice,

102
00:07:34.730 --> 00:07:39.020
if you've ever worked with this, gives us
a sort of two step asynchronous process of

103
00:07:39.020 --> 00:07:44.010
getting from a URL to get some
JSON to the actual JSON itself.

104
00:07:44.010 --> 00:07:45.610
So that's great, cuz it's two steps and

105
00:07:45.610 --> 00:07:48.339
this will help me ensure that I
can do one and then the other.

106
00:07:49.660 --> 00:07:54.600
But this is a nice value base thing
that will help me experiment with

107
00:07:54.600 --> 00:07:57.750
that.
&gt;&gt; Mike North: And

108
00:07:57.750 --> 00:08:01.030
I'm actually gonna borrow.

109
00:08:01.030 --> 00:08:03.199
Sorry, I'm jumping around here.

110
00:08:12.445 --> 00:08:13.587
&gt;&gt; Mike North: Okay, so,

111
00:08:13.587 --> 00:08:18.497
I gotta start my app up here,
but I'm gonna use this

112
00:08:18.497 --> 00:08:25.556
Google Places API.
&gt;&gt; Mike North: As a means for

113
00:08:25.556 --> 00:08:31.111
testing this app, so
just making sure this URL works.

114
00:08:31.111 --> 00:08:35.470
And in fact it does, so this is
the same thing that we've been using.

115
00:08:35.470 --> 00:08:39.730
But I'm just going to
paste that URL in here.

116
00:08:39.730 --> 00:08:44.622
We're proxying it through

117
00:08:44.622 --> 00:08:49.088
local host currently and

118
00:08:49.088 --> 00:08:54.192
that should give a result and

119
00:08:54.192 --> 00:08:59.729
that should give us some json.

120
00:09:11.877 --> 00:09:12.584
&gt;&gt; Mike North: Alright,

121
00:09:12.584 --> 00:09:16.592
so now it's time for
us to deal with this data part of things.

122
00:09:16.592 --> 00:09:20.022
Now let's see what our existing code,
how it handles that.

123
00:09:20.022 --> 00:09:22.367
Okay, so fetch is not defined,
interesting.

124
00:09:28.460 --> 00:09:30.726
&gt;&gt; Mike North: Because I'm running it in

125
00:09:30.726 --> 00:09:31.345
node.

126
00:09:31.345 --> 00:09:36.653
Okay, no worries, we can do it

127
00:09:36.653 --> 00:09:42.304
some other way.
&gt;&gt; Mike North: No

128
00:09:42.304 --> 00:09:46.413
problem.
&gt;&gt; Mike North: So

129
00:09:46.413 --> 00:09:50.428
you could've added node fetch here,

130
00:09:50.428 --> 00:09:56.199
I'm just gonna create a new
thing here like function,

131
00:09:56.199 --> 00:10:00.479
valuesoon and then return new promise.

132
00:10:03.730 --> 00:10:08.470
Or we can even do this, wait,
I can just use wait in fact.

133
00:10:09.970 --> 00:10:16.606
Wait for
500 milliseconds then return first,

134
00:10:16.606 --> 00:10:23.137
so that should be first.
&gt;&gt; Mike North: If we see that,

135
00:10:23.137 --> 00:10:25.880
we know we've captured it effectively.

136
00:10:25.880 --> 00:10:29.520
And this we'll just do a second wait for
exactly the same amount.

137
00:10:29.520 --> 00:10:30.970
This will be second-
&gt;&gt; Speaker 2: You

138
00:10:30.970 --> 00:10:33.300
have to yield those [INAUDIBLE]
&gt;&gt; Mike North: Yes we do,

139
00:10:33.300 --> 00:10:41.763
thank you.
&gt;&gt; Mike North: Great,

140
00:10:41.763 --> 00:10:44.693
okay, everyone agreed that
this will give me some

141
00:10:44.693 --> 00:10:49.105
indication that I am effectively
completing that assignment operation.

142
00:10:49.105 --> 00:10:52.056
This will make it start to look
a lot more like it's syncing

143
00:10:52.056 --> 00:10:55.563
away.
&gt;&gt; Mike North: I

144
00:10:55.563 --> 00:11:00.296
disagree.
&gt;&gt; Mike North: Okay, so

145
00:11:00.296 --> 00:11:04.680
first undefined, second undefined,
we're not seeing what we want yet.

146
00:11:04.680 --> 00:11:08.020
All we have to do here is
deal with this promiseResult.

147
00:11:08.020 --> 00:11:13.490
And we know that ultimately, we want when
we call this iterator here, we want to

148
00:11:13.490 --> 00:11:19.890
push the value in of the previous
promise as we pull the next promise out.

149
00:11:19.890 --> 00:11:22.820
Think of it that way,
it's almost like a trade.

150
00:11:22.820 --> 00:11:30.635
I will give you what just resolved and
then you chew on that.

151
00:11:30.635 --> 00:11:35.442
Run your code then give me back the next
promise once you hit a yield, so

152
00:11:35.442 --> 00:11:36.923
think of it that way.

153
00:11:36.923 --> 00:11:41.466
I push something into next and then that's
almost like a function and location.

154
00:11:41.466 --> 00:11:43.963
But it's just gonna run and
tumble into the next yield and

155
00:11:43.963 --> 00:11:46.370
what I get out is the next
promised to wait for, right?

156
00:11:47.640 --> 00:11:52.577
So, I have to put a value in here..
&gt;&gt; Mike North: LastPromiseVal and

157
00:11:52.577 --> 00:11:56.359
ultimately that has to come
into this function and

158
00:11:56.359 --> 00:12:00.740
the good news is we can pass
it in like that, right.

159
00:12:00.740 --> 00:12:03.430
PromiseResult is implicitly of any type.

160
00:12:03.430 --> 00:12:06.530
So, here's where type script it
does a little bit of a better job

161
00:12:06.530 --> 00:12:10.800
than we're able to do right now without
going nuts with the type definitions.

162
00:12:10.800 --> 00:12:13.750
I don't have any particular
knowledge of the types that

163
00:12:13.750 --> 00:12:16.390
these different types that these
different promises resolve to.

164
00:12:16.390 --> 00:12:21.152
You could use generics and constraints,
I'm sure there's a way to do it.

165
00:12:21.152 --> 00:12:27.520
In fact a wait operating the way it does
is probably proof there's a way to do it.

166
00:12:27.520 --> 00:12:33.050
That is like type definition back
flips that I'm not prepared to do for

167
00:12:33.050 --> 00:12:34.640
us right now.

168
00:12:34.640 --> 00:12:39.620
So for the time being, we're gonna say
it's okay for this to be in any type.

169
00:12:42.000 --> 00:12:47.226
All we really want to worry about in
terms of the type is the last value,

170
00:12:47.226 --> 00:12:53.657
it's the last value
&gt;&gt; Mike North: So

171
00:12:53.657 --> 00:12:58.777
now if you run this in this,
we're gonna pass in

172
00:12:58.777 --> 00:13:03.784
undefined.
&gt;&gt; Mike North: The reason we do that,

173
00:13:03.784 --> 00:13:08.060
think of that as like that's
the first time we kick things off.

174
00:13:08.060 --> 00:13:14.490
So it's a little bit of an edge case, but
it's the first time we pull this iterator.

175
00:13:14.490 --> 00:13:17.290
We're not completing
an assignment operation.

176
00:13:17.290 --> 00:13:22.360
We're not paused immediately on
the right hand side of an equal sign and

177
00:13:22.360 --> 00:13:26.110
providing a value to complete
that assignment operation.

178
00:13:26.110 --> 00:13:31.081
This is just the first time.
&gt;&gt; Mike North: And

179
00:13:31.081 --> 00:13:39.875
it's okay to pass that in.
&gt;&gt; Mike North: Looking good,

180
00:13:39.875 --> 00:13:42.920
so we've got first first, second second.

181
00:13:42.920 --> 00:13:45.360
We're recognizing that there are promise.

182
00:13:45.360 --> 00:13:48.250
I'm actually going to handle this here,
so that in theory,

183
00:13:48.250 --> 00:13:49.909
let's say we were using this.

184
00:13:51.380 --> 00:13:55.140
We wanted to gather these items and
sequence for some reason.

185
00:13:55.140 --> 00:13:58.190
We wanted to yield a synchronous value.

186
00:13:58.190 --> 00:14:02.261
We can handle that, we can make it so
if you accidentally yield something and

187
00:14:02.261 --> 00:14:03.030
it's there.

188
00:14:06.330 --> 00:14:08.960
We'll just yield the value right away,
it's not problem.

189
00:14:08.960 --> 00:14:12.210
Oops, sorry, it popped up tot he top.

190
00:14:12.210 --> 00:14:15.750
Yielding the value right away
as opposed to waiting for

191
00:14:15.750 --> 00:14:18.500
the promise to resolve like we have
nothing to wait for in this case.

192
00:14:18.500 --> 00:14:21.490
So if you just yield six,
that's totally fine.

193
00:14:22.960 --> 00:14:31.778
So if we did something like this-
&gt;&gt; Mike North: This

194
00:14:31.778 --> 00:14:33.290
should not throw us for a loop.

195
00:14:33.290 --> 00:14:36.734
Now, I didn't ask you to do this, but
this is just a good complete solution.

196
00:14:44.814 --> 00:14:45.316
&gt;&gt; Mike North: Well,

197
00:14:45.316 --> 00:14:47.825
I should really pass in\g third and

198
00:14:47.825 --> 00:14:52.870
we should see that values basically
pass straight through yield.

199
00:14:52.870 --> 00:14:55.150
Let the sticks\g pass through.

200
00:14:55.150 --> 00:14:59.220
In any case,
looking pretty good in this situation.

201
00:14:59.220 --> 00:15:02.380
So let's remove our console logs and
run our

202
00:15:03.960 --> 00:15:07.970
generator function here,
we left out one thing here.

203
00:15:07.970 --> 00:15:12.440
Ultimately, we want this to resolve
with the last thing that was yielded, so

204
00:15:12.440 --> 00:15:13.820
let's do that.

205
00:15:16.540 --> 00:15:22.741
LastVal and we're gonna say, console.log,

206
00:15:22.741 --> 00:15:30.650
lastVal, we'll just say
that's what we ended up with.

207
00:15:30.650 --> 00:15:36.010
So essentially,
the use case here is in an async function.

208
00:15:36.010 --> 00:15:37.780
You're gonna return
something at the end or

209
00:15:37.780 --> 00:15:42.290
you're gonna yield one final value and
that's what you're interested in.

210
00:15:42.290 --> 00:15:44.420
That's sort of what you
were building up to.

211
00:15:44.420 --> 00:15:49.130
It's the same way that ultimately
our arrays\g and functions work.

212
00:15:49.130 --> 00:15:52.720
And in this case we're currently
gonna return undefined.

213
00:15:55.020 --> 00:15:59.884
Should be undefined.
&gt;&gt; Mike North: It never even resolves,

214
00:15:59.884 --> 00:16:00.900
interesting.

215
00:16:00.900 --> 00:16:04.791
So there's our resolve,
we've never invoked it here yet.

216
00:16:04.791 --> 00:16:08.871
So now, it's our job here,
instead of just saying return,

217
00:16:08.871 --> 00:16:13.847
we have to resolve the function.
&gt;&gt; Mike North: But

218
00:16:13.847 --> 00:16:15.308
we're not passing anything in.

219
00:16:15.308 --> 00:16:19.145
So I'm not gonna bother running it
again in to show you that like we need

220
00:16:19.145 --> 00:16:20.132
something here.

221
00:16:20.132 --> 00:16:25.041
What we can do is something like this.

222
00:16:25.041 --> 00:16:28.616
We can outside the disclosure say let

223
00:16:28.616 --> 00:16:33.860
value-
&gt;&gt; Mike North: And

224
00:16:33.860 --> 00:16:42.248
then in here-
&gt;&gt; Mike North: So

225
00:16:42.248 --> 00:16:47.145
basically by the time we invoke this
again we will still be holding on to

226
00:16:47.145 --> 00:16:50.891
the previous value that was
most recently admitted.

227
00:16:50.891 --> 00:16:53.573
Is that make sense that
what the change does?

228
00:16:53.573 --> 00:16:56.279
I pulled it outside in to the outer scope,
so

229
00:16:56.279 --> 00:16:59.646
that when we turn around,
when we come back through and

230
00:16:59.646 --> 00:17:04.569
execute this function one more time,
value will still be there waiting for us.

231
00:17:04.569 --> 00:17:08.325
This is one of the benefits of
dealing with the generator function.

232
00:17:08.325 --> 00:17:11.974
Our execution context is preserved.

233
00:17:17.899 --> 00:17:20.583
&gt;&gt; Mike North: So this has an implicit any

234
00:17:20.583 --> 00:17:25.711
type, we really want this
to have a value of type.

235
00:17:25.711 --> 00:17:31.503
So we don't have the type
safety we're looking for.

236
00:17:33.040 --> 00:17:36.290
&gt;&gt; Mike North: We'll just do it like this?

237
00:17:39.087 --> 00:17:44.399
&gt;&gt; Mike North: That's coming implicitly.

238
00:17:47.030 --> 00:17:50.076
&gt;&gt; Mike North: It wants a st.

239
00:17:54.266 --> 00:17:57.430
&gt;&gt; Mike North: There we

240
00:17:57.430 --> 00:18:02.206
go.
&gt;&gt; Mike North: Some ugly stuff going on

241
00:18:02.206 --> 00:18:06.862
here, and again, the goal here is
not to use this piece of code, but

242
00:18:06.862 --> 00:18:11.132
to prove that generator functions
lead up to async and await.

243
00:18:11.132 --> 00:18:15.555
When we run this,
we should see that the most recent thing,

244
00:18:15.555 --> 00:18:21.495
which should be third, that is in fact
what is omitted from this giant promise.

245
00:18:21.495 --> 00:18:22.552
So effectively,

246
00:18:22.552 --> 00:18:27.137
we've been able to say, here's some
asynchronous steps we can go through.

247
00:18:27.137 --> 00:18:33.084
And then at the end, like, we can
return this last thing and it works.

248
00:18:33.084 --> 00:18:35.067
The last thing we wanna check is this

249
00:18:35.067 --> 00:18:40.553
case.
&gt;&gt; Mike North: I

250
00:18:40.553 --> 00:18:42.826
wanna make sure I got third out.

251
00:18:42.826 --> 00:18:46.120
All right,
I wanna be able to return as well.

252
00:18:46.120 --> 00:18:47.489
Let's see what happens.

253
00:18:47.489 --> 00:18:52.659
We're just seeing that
because of an add-on book.

254
00:18:52.659 --> 00:18:54.961
So I think I may get second, and I do.

255
00:18:54.961 --> 00:19:01.298
So the reason is we basically
handle the done case first.

256
00:19:01.298 --> 00:19:02.927
We handle the done case first.

257
00:19:02.927 --> 00:19:09.320
So what I can do is say, if we're done and

258
00:19:09.320 --> 00:19:15.043
yes.
&gt;&gt; Mike North: And

259
00:19:15.043 --> 00:19:24.233
the value is-
&gt;&gt; Mike North: Undefined.

260
00:19:24.233 --> 00:19:28.970
So basically, we're taking advantage of
the fact that subsequent pulls on this

261
00:19:28.970 --> 00:19:31.627
iterator will give me
done undefined again.

262
00:19:31.627 --> 00:19:38.790
So we're saying like, look I'm willing
to tolerate done and term one more time.

263
00:19:38.790 --> 00:19:43.426
Or at least until you give me
that undefined value there.

264
00:19:43.426 --> 00:19:47.441
This would also save us in the situation
where we yield undefined but

265
00:19:47.441 --> 00:19:48.716
we're not done yet.

266
00:19:48.716 --> 00:19:52.360
So we do need both of these
conditions here, right?

267
00:19:52.360 --> 00:19:56.168
Not that I can explain why you've

268
00:19:56.168 --> 00:19:59.620
wanna do that but-
&gt;&gt; Mike North: Now,

269
00:19:59.620 --> 00:20:02.507
we handle the return case as well.

270
00:20:02.507 --> 00:20:04.550
This makes sense to everyone?

271
00:20:04.550 --> 00:20:06.469
It's a little bit involved,

272
00:20:06.469 --> 00:20:11.165
I definitely took a couple of more
lines than 20 just for clarity sake.

273
00:20:11.165 --> 00:20:14.835
Let me remove this, and
let's drive our code and see how it works.

274
00:20:16.584 --> 00:20:20.433
&gt;&gt; Mike North: And it works exactly as it

275
00:20:20.433 --> 00:20:25.572
did before with async and await.

276
00:20:25.572 --> 00:20:27.226
However, this time,

277
00:20:27.226 --> 00:20:33.330
we've implemented basically the exact same
thing by way of a generator function.

278
00:20:33.330 --> 00:20:38.783
So know that when you're using async and
await and you're in an async function,

279
00:20:38.783 --> 00:20:43.114
you're really under the hood
yielding promises and waiting for

280
00:20:43.114 --> 00:20:48.186
those promises to resolve and then
pulling the next thing in the iterator.

281
00:20:48.186 --> 00:20:55.102
That helps you understand the nature
of this pausing local execution,

282
00:20:55.102 --> 00:20:59.835
and then entering back
into this function here.

283
00:20:59.835 --> 00:21:04.702
So I'm now gonna take this
one step further, and

284
00:21:04.702 --> 00:21:10.884
now that we have our own guts of
this async in a wait apparatus.

285
00:21:10.884 --> 00:21:15.804
I have the ability to fix something
that has been bugging me here,

286
00:21:15.804 --> 00:21:20.723
and that is that if I type, like this,
you see we get a little flash

287
00:21:20.723 --> 00:21:25.751
of the previous results first and
then the next results coming in.

288
00:21:25.751 --> 00:21:31.728
Really, all we need to do here in order to
make this a little bit better is first,

289
00:21:31.728 --> 00:21:34.597
let me state what we're seeing here.

290
00:21:34.597 --> 00:21:36.671
When a key stroke is hit, and

291
00:21:36.671 --> 00:21:40.740
we begin a new search,
we basically send a request out.

292
00:21:40.740 --> 00:21:44.234
And say when this response comes back,
your instructions are,

293
00:21:44.234 --> 00:21:46.762
update the state of this
reactive component.

294
00:21:46.762 --> 00:21:51.609
And it so happens that we're lucky
that this is a consistent API, and

295
00:21:51.609 --> 00:21:56.385
usually the last one that we dispatch
is the last one to come back in.

296
00:21:56.385 --> 00:21:59.775
And so now we're seeing, like,
that this was the last to land, and so

297
00:21:59.775 --> 00:22:01.452
it's what remains on our screen.

298
00:22:01.452 --> 00:22:05.648
We really have no guarantee
that would be always true.

299
00:22:05.648 --> 00:22:10.555
So what we want effectively to do is
when we see that there's something

300
00:22:10.555 --> 00:22:15.711
already in progress and we're about
ready to dispatch another request,

301
00:22:15.711 --> 00:22:21.549
we want to say I'm not interested in any
responses from whatever was just pending.

302
00:22:21.549 --> 00:22:26.266
So let's add that in.
&gt;&gt; Mike North: What we wanna do is

303
00:22:26.266 --> 00:22:29.554
define a new interface here called-

304
00:22:33.809 --> 00:22:37.812
&gt;&gt; Mike North: CancellablePromise.

305
00:22:41.492 --> 00:22:43.879
&gt;&gt; Mike North: And there's a promise like

306
00:22:43.879 --> 00:22:49.793
type which basically if we peek at
the definition of what this it just

307
00:22:49.793 --> 00:22:55.321
says it has a dot then but
that's about it, that's all it has.

308
00:22:55.321 --> 00:23:01.759
It has the right constructor and
dot then, so there is not much to it,

309
00:23:01.759 --> 00:23:06.535
we're just gonna add one
thing to this interface.

310
00:23:10.320 --> 00:23:15.043
&gt;&gt; Mike North: A cancelled property.

311
00:23:15.043 --> 00:23:20.383
And our task functions now going
to return CancellablePromise,

312
00:23:20.383 --> 00:23:25.817
and that means that in our, down here,
when we return this promise

313
00:23:25.817 --> 00:23:32.099
we have to say-
&gt;&gt; Mike North: P.cancelled

314
00:23:32.099 --> 00:23:36.255
= false.
&gt;&gt; Mike North: Or sorry,

315
00:23:36.255 --> 00:23:41.571
we'd have to do something like this,
p as, no,

316
00:23:41.571 --> 00:23:50.147
doesn't like that
&gt;&gt; Mike North: New promise,

317
00:23:50.147 --> 00:23:51.860
we can go down here as-

318
00:24:01.786 --> 00:24:02.298
&gt;&gt; Mike North: All right,

319
00:24:02.298 --> 00:24:07.191
we can do our little two line thing.
&gt;&gt; Mike North: I don't believe we can

320
00:24:07.191 --> 00:24:08.528
just unpack this object.

321
00:24:19.728 --> 00:24:23.129
&gt;&gt; Mike North: Cannot be converted
because cancelled is not there.

322
00:24:24.150 --> 00:24:24.910
Hmm.

323
00:24:24.910 --> 00:24:33.015
How are we going to do this?
&gt;&gt; Mike North: We can do a,

324
00:24:33.015 --> 00:24:36.399
&gt;&gt; Speaker 3: [INAUDIBLE] Object ...P

325
00:24:36.399 --> 00:24:40.650
canceled to S.
&gt;&gt; Mike North: We could try.

326
00:24:40.650 --> 00:24:41.666
I'm not sure that will work.

327
00:24:41.666 --> 00:24:49.430
...p.
&gt;&gt; Mike North: Is that gonna be?

328
00:24:51.680 --> 00:24:52.950
That might work.

329
00:24:52.950 --> 00:24:57.578
Lets see.
&gt;&gt; Mike North: Wow,

330
00:24:57.578 --> 00:24:59.970
if that works,
then I love the structure aside.

331
00:24:59.970 --> 00:25:03.683
I love that spread even more than before.

332
00:25:03.683 --> 00:25:09.326
Canceled,
&gt;&gt; Mike North: Yeah,

333
00:25:09.326 --> 00:25:15.470
that's not assignable because
it wants to catch, there.

334
00:25:15.470 --> 00:25:17.465
All right, some shenanigans required,

335
00:25:17.465 --> 00:25:23.570
brace yourselves.
&gt;&gt; Mike North: I know

336
00:25:23.570 --> 00:25:30.317
what I can do.
&gt;&gt; Mike North: That might work.

337
00:25:42.838 --> 00:25:43.538
&gt;&gt; Mike North: Yes, so

338
00:25:43.538 --> 00:25:47.045
momentarily it's not gonna have that but

339
00:25:47.045 --> 00:25:52.840
we're gonna say cancellable promise,
canceled equals false.

340
00:25:52.840 --> 00:25:58.323
All right, so the benefit here and
this is actually the better way to do it,

341
00:25:58.323 --> 00:26:04.730
I can do it right up here.
&gt;&gt; Mike North: Perfect.

342
00:26:06.090 --> 00:26:11.320
Okay, so, now this cancelable promise, if

343
00:26:11.320 --> 00:26:15.300
we receive this as a cancelable promise,
we can assume it is a cancelable promise.

344
00:26:15.300 --> 00:26:20.540
We have to kinda push it up stream here,
I'll save this task,

345
00:26:20.540 --> 00:26:23.460
autocomplete that's where were going next.

346
00:26:23.460 --> 00:26:26.470
So the task is gonna return a cancelable

347
00:26:27.710 --> 00:26:32.010
promise and hopefully,
I need to export it from task.

348
00:26:33.490 --> 00:26:37.351
Export the interface.
&gt;&gt; Mike North: So now,

349
00:26:37.351 --> 00:26:43.538
it's gonna say import.
&gt;&gt; Mike North: Okay, and

350
00:26:43.538 --> 00:26:48.540
this returns the correct kind of promise.

351
00:26:48.540 --> 00:26:49.760
What is this complaining about?

352
00:26:51.480 --> 00:26:52.911
It's not a valid function.

353
00:27:01.408 --> 00:27:02.112
&gt;&gt; Mike North: [SOUND] That's fine.

354
00:27:02.112 --> 00:27:04.510
We can just do that.

355
00:27:05.850 --> 00:27:07.260
Make that happy.

356
00:27:07.260 --> 00:27:11.430
So now this returns the cancelled promise,
and then we can go to auto.

357
00:27:11.430 --> 00:27:15.510
We can go to where this is used,
which is our PlaceSearchContainer,

358
00:27:16.980 --> 00:27:20.650
and this is gonna use
our autocomplete here.

359
00:27:22.500 --> 00:27:26.540
Await is still fair game because
anything that returns a promise can

360
00:27:26.540 --> 00:27:27.690
be awaited, right?

361
00:27:29.020 --> 00:27:33.870
Except what this returns is
that cancellable promise.

362
00:27:33.870 --> 00:27:39.143
Why is this still.
&gt;&gt; Mike North: I'm

363
00:27:39.143 --> 00:27:42.100
in the wrong exercise version here.

364
00:27:42.100 --> 00:27:42.600
Sorry.

365
00:27:43.640 --> 00:27:48.050
Four, there we go.

366
00:27:49.300 --> 00:27:50.111
This makes more sense now.

367
00:27:50.111 --> 00:27:58.850
So here,
&gt;&gt; Mike North: Okay.

368
00:27:58.850 --> 00:28:00.659
So now down here we can
do something interesting.

369
00:28:00.659 --> 00:28:04.801
In the event that this thing is called,

370
00:28:04.801 --> 00:28:09.455
let's make sure our app still works first.

371
00:28:13.561 --> 00:28:15.240
&gt;&gt; Mike North: Good, still works.

372
00:28:15.240 --> 00:28:20.490
So in the event that we
call begin search and

373
00:28:20.490 --> 00:28:24.540
there's an existing search underway,
and we can tell because

374
00:28:24.540 --> 00:28:28.740
we set existing search back to
undefined once the problem resolves.

375
00:28:28.740 --> 00:28:34.620
Like if existing search on this
state of this component is defined.

376
00:28:35.790 --> 00:28:39.720
Because we only ever set it to a promise
and we have type safety around it.

377
00:28:39.720 --> 00:28:43.840
We can basically cancel it
as we kick off the next one.

378
00:28:43.840 --> 00:28:46.430
And then once we do that,
now we'll go back to task and

379
00:28:46.430 --> 00:28:48.060
we'll figure out what
to do about that data.

380
00:28:48.060 --> 00:28:52.777
But we're sending in a signal
where basically that promise has

381
00:28:52.777 --> 00:28:57.227
a property on it now,
that we can use to determine whether we

382
00:28:57.227 --> 00:29:00.531
should care about any subsequent results.

383
00:29:00.531 --> 00:29:07.437
So here,
we'll say if this state existing search,

384
00:29:15.284 --> 00:29:16.026
&gt;&gt; Mike North: Just something like that.

385
00:29:16.026 --> 00:29:21.119
We're basically like flipping a bit,
saying, let here be known

386
00:29:21.119 --> 00:29:27.065
that we don't give a damn about what you
have to say from this point on [LAUGH].

387
00:29:27.065 --> 00:29:29.690
All right, last step.

388
00:29:29.690 --> 00:29:31.330
Going back into task.

389
00:29:31.330 --> 00:29:34.890
So now, we turned out the value,
what type is P?

390
00:29:34.890 --> 00:29:37.070
It's a CancellablePromise.

391
00:29:37.070 --> 00:29:42.990
And so in here, when we're deciding
whether or not to go to the next step or

392
00:29:42.990 --> 00:29:50.420
not, we can just simply say,
if, if you're not cancelled.

393
00:29:50.420 --> 00:29:51.220
Go to the next step.

394
00:29:52.810 --> 00:29:56.530
If you are cancelled, we don't care.

395
00:29:56.530 --> 00:30:00.050
The iterator will never get another
thing out of this iterator.

396
00:30:00.050 --> 00:30:03.590
Or this, actually this function just
runs to completion and you're done.

397
00:30:03.590 --> 00:30:05.370
So how this affects?

398
00:30:05.370 --> 00:30:12.683
The way this works.
&gt;&gt; Mike North: You

399
00:30:12.683 --> 00:30:16.963
note that we don't see that subsequent
flashing coming in anymore,

400
00:30:16.963 --> 00:30:21.832
it's only that last result that will ever
have a chance at updating the current

401
00:30:21.832 --> 00:30:24.210
state on this component.

402
00:30:24.210 --> 00:30:29.080
Everything else, we would describe this by
saying we are black holing this promise.

403
00:30:29.080 --> 00:30:31.890
We say black hole because it's
like the signal goes in and

404
00:30:31.890 --> 00:30:34.470
we never hear from it again, right?

405
00:30:34.470 --> 00:30:37.250
We can't truly cancel the fetch.

406
00:30:37.250 --> 00:30:41.550
We can't say it like to the browser,
I no longer care about this data.

407
00:30:41.550 --> 00:30:46.380
But what we can do is say, the handler
that typically would do its job and

408
00:30:46.380 --> 00:30:51.560
continue the sequence of events,
ultimately resulting in like,

409
00:30:51.560 --> 00:30:54.610
sets date being called,
that updating what's on the screen.

410
00:30:55.970 --> 00:31:00.790
At the nearest possible convenience
when you pop up between promises,

411
00:31:00.790 --> 00:31:02.880
just don't go any farther.

412
00:31:02.880 --> 00:31:04.390
It's almost like we went to a yield and

413
00:31:04.390 --> 00:31:08.470
then we just say drop it,
you're done, just drop it.

414
00:31:08.470 --> 00:31:12.180
So that's pretty cool,
that's like enhanced async await.

415
00:31:12.180 --> 00:31:15.040
You could do the same thing
with regular async and await.

416
00:31:15.040 --> 00:31:20.740
You would just have to check in
between promises that you await and

417
00:31:20.740 --> 00:31:26.240
just early return from an async function
in the event that you're canceled, right?

418
00:31:26.240 --> 00:31:30.440
But with generator functions we
can implement it in a generic way

419
00:31:30.440 --> 00:31:32.980
that anything can consume now,

420
00:31:32.980 --> 00:31:37.380
like this cancellable thing that's
built into the task function.

421
00:31:37.380 --> 00:31:41.300
Anyone who uses this,
who passes in the generator function.

422
00:31:41.300 --> 00:31:44.240
That is setup to behave like async and
await.

423
00:31:44.240 --> 00:31:47.680
Will be able to take advantage
of the cancelability feature

424
00:31:47.680 --> 00:31:49.330
with the way we've implemented this.

