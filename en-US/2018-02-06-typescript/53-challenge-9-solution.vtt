WEBVTT

1
00:00:00.410 --> 00:00:04.470
&gt;&gt; Mike North: We're gonna go through
the solution to this ninth exercise where

2
00:00:04.470 --> 00:00:09.770
having already tackled the task of
a stateless functional component for

3
00:00:09.770 --> 00:00:12.220
the placed search result item.

4
00:00:12.220 --> 00:00:16.730
And having already handled some
switching in the render function,

5
00:00:16.730 --> 00:00:22.080
based on props passed in to that
list component we just finished.

6
00:00:22.080 --> 00:00:27.100
Now we are going to take on
the task of dealing with this

7
00:00:27.100 --> 00:00:33.080
state management ourselves, right in
this place search container component.

8
00:00:33.080 --> 00:00:37.330
This is a very common pattern that the
container presentation component pattern.

9
00:00:38.530 --> 00:00:43.660
Very common for the purpose of
making sure that you separate

10
00:00:43.660 --> 00:00:46.630
state management from
things that render state.

11
00:00:46.630 --> 00:00:52.640
In order to reduce potential
causing of oneself to re-render.

12
00:00:52.640 --> 00:00:54.245
So the first thing I'm gonna do here.

13
00:00:54.245 --> 00:01:00.061
No, actually let me before I do that make
sure that I am running the correct app.

14
00:01:05.907 --> 00:01:08.960
&gt;&gt; Mike North: This is autocomplete 3,
that's the name of this exercise.

15
00:01:10.420 --> 00:01:12.250
Let's refresh and see where we're at.

16
00:01:12.250 --> 00:01:15.230
It says replace this with
the search result list, we'll do.

17
00:01:16.780 --> 00:01:20.255
And we're getting yelled at here for

18
00:01:20.255 --> 00:01:25.530
not passing in the correct result,
the correct props.

19
00:01:25.530 --> 00:01:28.780
If we look at the props that this expects,
there it is.

20
00:01:28.780 --> 00:01:33.816
It wants us to pass in results
in progress, a search term, and

21
00:01:33.816 --> 00:01:37.470
an un-search term changed.

22
00:01:37.470 --> 00:01:44.350
So some of that we have available, or
we had available in our last exercise.

23
00:01:44.350 --> 00:01:47.080
But let's see where we're at,

24
00:01:47.080 --> 00:01:50.280
I'm just gonna leave myself
a little bit of a note here.

25
00:01:50.280 --> 00:01:55.009
So we need, actually, yeah,
this is a fine place to put it.

26
00:01:57.747 --> 00:02:01.956
&gt;&gt; Mike North: Just gonna copy this so
that we will be able to come back and

27
00:02:01.956 --> 00:02:03.490
address that.

28
00:02:03.490 --> 00:02:07.540
So a list of results whether
the search is in progress,

29
00:02:07.540 --> 00:02:11.410
the search term itself, and
this function whether it's changed or not.

30
00:02:11.410 --> 00:02:14.710
Let me grab that function type just for
completeness.

31
00:02:14.710 --> 00:02:19.410
It takes in a string as an argument and
returns, we don't care.

32
00:02:19.410 --> 00:02:21.260
That's what void means,
it returns we don't care.

33
00:02:22.860 --> 00:02:28.720
So note that this place search
container has empty object

34
00:02:28.720 --> 00:02:34.870
types as both its state and
its prop's interfaces.

35
00:02:34.870 --> 00:02:39.530
We are going to not worry about props for
this particular component, but

36
00:02:39.530 --> 00:02:42.469
we do need to worry about state
which is this first one here.

37
00:02:44.270 --> 00:02:48.344
I'm just gonna call this
IPlaceSearchContainerState, and

38
00:02:48.344 --> 00:02:50.232
we'll define that up here.

39
00:03:01.125 --> 00:03:05.150
&gt;&gt; Mike North: And I'm just gonna
basically make it these first three terms.

40
00:03:05.150 --> 00:03:08.500
Similar to what we had in
the last exercise, right?

41
00:03:08.500 --> 00:03:12.620
What that'll let me do is make
this component happy by doing

42
00:03:12.620 --> 00:03:14.260
the same thing we were doing before.

43
00:03:14.260 --> 00:03:16.981
This state, need one more dot, and

44
00:03:16.981 --> 00:03:20.986
then this last thing we can
handle more explicitly.

45
00:03:23.718 --> 00:03:27.170
&gt;&gt; Mike North: On search
term changed equals this.

46
00:03:27.170 --> 00:03:31.000
Begin search, and
let's see do we take care of binding it?

47
00:03:31.000 --> 00:03:32.310
We did in this case.

48
00:03:32.310 --> 00:03:37.030
We bound that to this component so
that whenever it's invoked,

49
00:03:37.030 --> 00:03:39.630
we will get the calling context we expect.

50
00:03:39.630 --> 00:03:43.150
We can treat it as executing in
the context of this component.

51
00:03:46.081 --> 00:03:48.618
&gt;&gt; Mike North: And let's see,
what is it complaining about now?

52
00:03:49.914 --> 00:03:52.940
&gt;&gt; Mike North: So that's optional,
those are passed in, okay.

53
00:03:52.940 --> 00:03:57.560
So now, we don't have anything for
this .state.

54
00:03:57.560 --> 00:03:58.700
That's what it's complaining about.

55
00:03:59.700 --> 00:04:00.959
This is an empty object here.

56
00:04:04.033 --> 00:04:06.060
&gt;&gt; Mike North: Sorry,
I've got this reversed.

57
00:04:06.060 --> 00:04:13.720
Props comes first, state comes second, now
this will complain and this will be happy.

58
00:04:13.720 --> 00:04:15.710
So our place search results list is happy.

59
00:04:15.710 --> 00:04:18.170
We've sort of moved the error up too.

60
00:04:18.170 --> 00:04:22.670
Now the component we're looking at right
now says when you initialized your state,

61
00:04:22.670 --> 00:04:24.970
you gave me something
that was not allowed.

62
00:04:24.970 --> 00:04:28.030
You can't just pass an empty object,
these things are required.

63
00:04:28.030 --> 00:04:30.740
You have to give me something
that matches this shape.

64
00:04:30.740 --> 00:04:37.240
So we'll say results is
new array in progress.

65
00:04:37.240 --> 00:04:39.140
We start out not being in progress.

66
00:04:40.710 --> 00:04:43.940
And the search term is an empty string.

67
00:04:43.940 --> 00:04:48.870
So now we've satisfied the minimum
conditions for making this work.

68
00:04:48.870 --> 00:04:54.030
And if we type something in,
nothing happens.

69
00:04:55.200 --> 00:04:58.626
The reason being nothing
is in this function.

70
00:05:08.899 --> 00:05:11.190
&gt;&gt; Mike North: But
the function is being called so

71
00:05:11.190 --> 00:05:14.250
now all we have to do is
sort of wire this up.

72
00:05:14.250 --> 00:05:16.030
This is gonna be an async function.

73
00:05:16.030 --> 00:05:19.290
You could either call it an async
function or have it return a promise.

74
00:05:20.490 --> 00:05:25.010
If I call it an async function,
I can use a weight inside it.

75
00:05:25.010 --> 00:05:26.360
So I'm going to choose to do that.

76
00:05:27.920 --> 00:05:31.110
So first thing, we're gonna setState.

77
00:05:32.530 --> 00:05:36.280
Our search term is gonna be set updated,
right?

78
00:05:36.280 --> 00:05:39.850
Based on this event that comes in,
we will update the current search term.

79
00:05:39.850 --> 00:05:42.039
And we will say inProgress is true.

80
00:05:43.856 --> 00:05:47.675
&gt;&gt; Mike North: So now we should start to
see a more interesting message coming

81
00:05:47.675 --> 00:05:48.854
through already.

82
00:05:52.001 --> 00:05:55.513
&gt;&gt; Mike North: Great, so now we sort
of switched into this other mode,

83
00:05:55.513 --> 00:06:00.320
where we're saying this component
knows that there's a search underway.

84
00:06:00.320 --> 00:06:04.610
And if we delete everything, we're back
into the empty search term case, so

85
00:06:04.610 --> 00:06:05.290
that's handled.

86
00:06:06.380 --> 00:06:11.410
The next thing we want to do is
leverage this auto complete module.

87
00:06:11.410 --> 00:06:18.040
So, we've got this thing, it returns a set
of place details from a given search term.

88
00:06:19.490 --> 00:06:22.481
So, we're gonna pass the term in there,
and

89
00:06:22.481 --> 00:06:28.301
we'll say,
&gt;&gt; Mike North: Let results

90
00:06:28.301 --> 00:06:33.057
equal await autocomplete.

91
00:06:33.057 --> 00:06:35.720
So just looking at this here,

92
00:06:35.720 --> 00:06:40.810
one of the things I hope you take away
from this workshop is a lot of the code

93
00:06:40.810 --> 00:06:45.020
you write does not have to have explicit
type definitions all over the place.

94
00:06:45.020 --> 00:06:48.380
There is nothing on this line
that is a type definition.

95
00:06:49.630 --> 00:06:52.730
In fact, there's nothing in the line
above that's a type definition.

96
00:06:52.730 --> 00:06:55.430
We sort of define some types up front,
some structure, and

97
00:06:55.430 --> 00:06:58.880
then wherever type script can infer,
it does infer.

98
00:06:58.880 --> 00:07:04.240
And we get the benefit of knowing that
this function returns a particular thing.

99
00:07:04.240 --> 00:07:09.980
And in here, we say we return a promise
that resolves to PlaceDetails.

100
00:07:09.980 --> 00:07:15.920
But if we got rid of that,
it would still work.

101
00:07:15.920 --> 00:07:17.582
Particularly with return values,

102
00:07:17.582 --> 00:07:22.670
TypeScript is pretty good at figuring
out what you're returning, right?

103
00:07:24.120 --> 00:07:29.150
So even in here, there's not, I mean we
say we need an argument to be passed in.

104
00:07:29.150 --> 00:07:32.960
Arguments are sort of there you
do need to set up some structure.

105
00:07:32.960 --> 00:07:37.190
But the rest of this, I mean, it looks
kinda like of like regular java script.

106
00:07:37.190 --> 00:07:43.140
Even this, we don't need this, that's
just for your benefit here as developers,

107
00:07:43.140 --> 00:07:45.500
so you can look at this file and
know that's what it is.

108
00:07:45.500 --> 00:07:49.330
But the fact that this already returns
that thing, cuz it was cast here,

109
00:07:49.330 --> 00:07:53.900
so that's gonna give us the exact
same types throughout our system.

110
00:07:53.900 --> 00:07:58.630
So I want you to just not litter
these type annotations everywhere.

111
00:07:58.630 --> 00:08:01.980
That is a common mistake when people
start jumping into TypeScript,

112
00:08:01.980 --> 00:08:04.010
to just go nuts with these things.

113
00:08:04.010 --> 00:08:09.690
If you can remove a type annotation, and
your editor still says yeah, I can still

114
00:08:09.690 --> 00:08:15.180
tell you that that’s the same type, it’s
better to omit it than to have it there.

115
00:08:15.180 --> 00:08:19.170
Having it there doesn’t really give
you all that much additional safety in

116
00:08:19.170 --> 00:08:21.160
a situation like this.

117
00:08:21.160 --> 00:08:24.620
But it does kind of make the code
a little more difficult to read.

118
00:08:24.620 --> 00:08:28.050
And makes it harder for
other people who are more experienced

119
00:08:28.050 --> 00:08:32.290
in JavaScript than in TypeScript to sort
of jump in and reason about this code.

120
00:08:32.290 --> 00:08:36.650
But here like we have as much
type safety as we ever could

121
00:08:37.850 --> 00:08:40.680
and we're not littering
annotations all over the place.

122
00:08:42.590 --> 00:08:45.500
So then what we can do is now
that we'll have the results

123
00:08:45.500 --> 00:08:47.890
we're basically gonna pause here.

124
00:08:47.890 --> 00:08:51.740
And even within the atuocomplete
there are other awaits, right.

125
00:08:51.740 --> 00:08:54.620
So we're gonna await for
this async function to resolve.

126
00:08:54.620 --> 00:09:01.316
We'll get that result sent back and
then we can do this setState,

127
00:09:01.316 --> 00:09:05.351
results, and then in progress false.

128
00:09:10.003 --> 00:09:13.283
&gt;&gt; Mike North: So I'm just gonna
move these comments around so

129
00:09:13.283 --> 00:09:17.300
they correspond to the appropriate lines.

130
00:09:17.300 --> 00:09:19.910
So initiate a search using
the autocomplete module.

131
00:09:19.910 --> 00:09:23.568
When the problems resolves,
update your state accordingly.

132
00:09:28.730 --> 00:09:30.210
&gt;&gt; Mike North: What
are we doing wrong here?

133
00:09:30.210 --> 00:09:36.870
SetState, maybe we didn't save or
didn't refresh.

134
00:09:38.740 --> 00:09:41.480
There it is coffee coming through.

135
00:09:43.470 --> 00:09:44.378
Any questions about this?

136
00:09:46.735 --> 00:09:51.950
&gt;&gt; Mike North: All right, cuz this was
the slow pitch right before the fast ball.

137
00:09:51.950 --> 00:09:57.288
We're about to hit the hardest
exercise in the whole course,

138
00:09:57.288 --> 00:10:00.171
but it is a pretty rewarding one.

139
00:10:02.995 --> 00:10:04.800
&gt;&gt; Mike North: So,
let's close this stuff down.

140
00:10:04.800 --> 00:10:05.758
Let me make a quick commit.

141
00:10:12.922 --> 00:10:16.200
&gt;&gt; Speaker 2: I have a question but
I don't want to derail us.

142
00:10:16.200 --> 00:10:16.750
&gt;&gt; Mike North: Ask away.

143
00:10:16.750 --> 00:10:21.010
&gt;&gt; Speaker 2: So, I just noticed
that if I type one letter and

144
00:10:21.010 --> 00:10:25.280
delete it, in the search bar it
still actually did the search.

145
00:10:25.280 --> 00:10:26.390
&gt;&gt; Mike North: Yes.

146
00:10:26.390 --> 00:10:31.075
&gt;&gt; Speaker 2: How could, and
I think I understand why.

147
00:10:31.075 --> 00:10:32.710
&gt;&gt; Mike North: Mm-hm.
&gt;&gt; Speaker 2: Because the async

148
00:10:32.710 --> 00:10:37.222
is resolving after I have set my
search result state, all right?

149
00:10:39.340 --> 00:10:43.830
&gt;&gt; Mike North: So,
what's happening is a race condition.

150
00:10:43.830 --> 00:10:44.930
&gt;&gt; Speaker 2: Right.

151
00:10:44.930 --> 00:10:49.490
&gt;&gt; Mike North: Where with each letter,
each letter that goes out, right?

152
00:10:49.490 --> 00:10:50.683
When we type a few keys,

153
00:10:50.683 --> 00:10:54.103
we're basically saying go and
fetch some updated search results.

154
00:10:54.103 --> 00:11:00.024
And we pass it a callback and say, when
you arrive back update your page, right?

155
00:11:00.024 --> 00:11:02.534
And so if we send out four of these,

156
00:11:02.534 --> 00:11:06.353
you actually see four
refreshes on the page happen.

157
00:11:06.353 --> 00:11:13.232
This is a typical challenge people
run into when working with promises,

158
00:11:13.232 --> 00:11:18.020
where they're not cancelable, right?

159
00:11:18.020 --> 00:11:20.800
So, it's almost like we wish
there was a way where, for

160
00:11:20.800 --> 00:11:26.180
the next event, we can kind of disregard
anything that's currently in progress.

161
00:11:26.180 --> 00:11:28.720
So once we complete this next exercise I

162
00:11:28.720 --> 00:11:31.932
will be able to show you how we
can logically take that next step.

163
00:11:31.932 --> 00:11:36.150
And essentially baked into

164
00:11:36.150 --> 00:11:39.920
areas that our app doesn't need to
worry about on a case by case basis.

165
00:11:39.920 --> 00:11:45.040
Set up a cancellable asynchronous chain
of events where basically between

166
00:11:45.040 --> 00:11:49.683
every promise we examine to see
whether we've been cancelled yet.

167
00:11:49.683 --> 00:11:54.758
And if we have we just stop, that's one of

168
00:11:54.758 --> 00:12:01.284
the great powerful aspects
of generator functions.

169
00:12:05.875 --> 00:12:07.360
&gt;&gt; Mike North: That's not a side track.

170
00:12:07.360 --> 00:12:08.384
That's exactly where we're going.

171
00:12:31.483 --> 00:12:33.322
&gt;&gt; Mike North: Sorry,
there are a lot of branches, but

172
00:12:33.322 --> 00:12:35.116
video watchers will appreciate this.

173
00:12:41.708 --> 00:12:42.625
&gt;&gt; Mike North: All right.

