WEBVTT

1
00:00:00.082 --> 00:00:02.800
&gt;&gt; Mike North: We are going
to go through one of many

2
00:00:02.800 --> 00:00:07.421
possible implementations of
a typed stack data structure,

3
00:00:07.421 --> 00:00:13.146
where we have a type constraint in terms
of what we can push into this stack.

4
00:00:13.146 --> 00:00:17.402
What we have in the screen now is the
interface that the stack must implement,

5
00:00:17.402 --> 00:00:19.900
that's how we would describe this, right?

6
00:00:21.010 --> 00:00:23.980
Whatever we make must
conform to this shape.

7
00:00:23.980 --> 00:00:27.410
So just to recap,
we have to be able to push one item.

8
00:00:27.410 --> 00:00:31.870
And we get the stack back out so
that we can chain these things together.

9
00:00:31.870 --> 00:00:37.230
We can push many items at once,
using also a function called push.

10
00:00:37.230 --> 00:00:41.674
So we have some overloading going on here,
right, two function signatures.

11
00:00:41.674 --> 00:00:45.139
We can pop an item out, and
we have to be prepared for the situation

12
00:00:45.139 --> 00:00:50.050
where we may get undefined, for example,
if there is nothing in the stack, right?

13
00:00:50.050 --> 00:00:53.550
We might get undefined out.

14
00:00:53.550 --> 00:00:59.400
We began today talking about
how types let us express

15
00:00:59.400 --> 00:01:04.910
our intent better, and here it's very
clear that whoever receives this must

16
00:01:04.910 --> 00:01:09.470
be prepared to potentially receive nothing
at all, right, receive an undefined.

17
00:01:10.970 --> 00:01:15.700
And then we need functions
that return length and

18
00:01:15.700 --> 00:01:18.110
print the contents of the stack out.

19
00:01:19.660 --> 00:01:23.276
I did not define what print had to do,
but it's for

20
00:01:23.276 --> 00:01:28.379
your debugging pleasure, you could
have taken that any way you wish.

21
00:01:28.379 --> 00:01:31.025
And now we're gonna do npm test stack.

22
00:01:35.990 --> 00:01:37.940
&gt;&gt; Mike North: All right,
seven failing tests.

23
00:01:37.940 --> 00:01:42.184
So the stack's available,
new stack should have a size of zero,

24
00:01:42.184 --> 00:01:45.363
pushing an item should
increase its size by one.

25
00:01:45.363 --> 00:01:49.780
Pushing a few items in to the stack one
by one increases its size appropriately.

26
00:01:49.780 --> 00:01:54.160
Pushing a few items into the stack at
once increases its size appropriately.

27
00:01:54.160 --> 00:01:57.604
Apparently, I didn't rename
one of my tests here,

28
00:01:57.604 --> 00:02:01.530
this is one of the things I
guess I forgot to double-check.

29
00:02:04.424 --> 00:02:07.974
&gt;&gt; Mike North: Yep, actually,
it is a similar test, it's just in,

30
00:02:07.974 --> 00:02:10.070
nope, it is not a similar test.

31
00:02:10.070 --> 00:02:14.774
One by one, at once,
that is exactly the same assertion.

32
00:02:17.800 --> 00:02:18.765
&gt;&gt; Mike North: Guess we don't need that.

33
00:02:23.492 --> 00:02:24.230
&gt;&gt; Mike North: Okay, and

34
00:02:24.230 --> 00:02:28.990
then finally the last items pushed
on are the first to pop off.

35
00:02:28.990 --> 00:02:31.350
Last on, first off, right?

36
00:02:31.350 --> 00:02:34.210
So we're pulling stuff off
of the top of the stack, and

37
00:02:34.210 --> 00:02:37.600
then pop returns undefined
if the list is empty.

38
00:02:37.600 --> 00:02:41.683
So that is our target, let's aim for it.

39
00:02:44.410 --> 00:02:48.760
&gt;&gt; Mike North: So here's the stack,
and the first thing we do is

40
00:02:48.760 --> 00:02:53.229
we'll say this class
implements the interface.

41
00:02:53.229 --> 00:02:55.810
Oops, sorry, implements IStack.

42
00:02:57.090 --> 00:03:02.695
And we're gonna say the Stack
receives a template parameter T, and

43
00:03:02.695 --> 00:03:10.920
implements the IStack interface passing
the same template parameter along.

44
00:03:10.920 --> 00:03:12.690
The complaint we're getting
at now is it saying,

45
00:03:12.690 --> 00:03:17.230
well, now go ahead, implement this stuff.

46
00:03:17.230 --> 00:03:18.730
So I'll just paste that down here.

47
00:03:18.730 --> 00:03:22.820
And now we've kind of like, we've made
this interface part of the equation happy.

48
00:03:22.820 --> 00:03:26.150
It's saying, well, okay,
we have some stuff, but now

49
00:03:27.640 --> 00:03:31.370
the implementation is missing, and it's
not immediately following the declaration.

50
00:03:33.340 --> 00:03:37.010
And by the way, in a situation where you
have, remember we had like red lines all

51
00:03:37.010 --> 00:03:40.200
over the place when we were sort of
midway through some of these solutions?

52
00:03:40.200 --> 00:03:45.610
This is a nice way to sort of get
a small error, to not bombard

53
00:03:45.610 --> 00:03:50.810
yourself with indications as you
flush this kind of thing out.

54
00:03:50.810 --> 00:03:56.061
This is sort if a more subdued
situation we got going on here.

55
00:03:56.061 --> 00:04:01.476
So I'm going to implement this
as a linked list based stack,

56
00:04:01.476 --> 00:04:04.668
just for more excuses to use types.

57
00:04:07.662 --> 00:04:10.760
&gt;&gt; Mike North: And we'll call this
an interface that's a StackNode.

58
00:04:10.760 --> 00:04:12.540
I could create a new class,

59
00:04:12.540 --> 00:04:17.990
I don't really need to because
this is really just about data.

60
00:04:17.990 --> 00:04:23.229
And I can just look with object literals,
I don't really get

61
00:04:23.229 --> 00:04:28.687
benefits of a class other than
being able to refer to it by name.

62
00:04:28.687 --> 00:04:35.471
So we'll say that this is gonna
have a property data called T,

63
00:04:35.471 --> 00:04:40.168
and it's gonna have basically a pointer or

64
00:04:40.168 --> 00:04:45.180
a reference to another
node of the same name.

65
00:04:45.180 --> 00:04:50.090
So this is basically like it
has the thing of interest,

66
00:04:50.090 --> 00:04:55.640
the value of interest, and an edge
to the next item in the linked list.

67
00:04:55.640 --> 00:04:57.000
So we can kinda chain these together.

68
00:04:58.390 --> 00:05:03.832
So within the stack I can
have my data stored as so,

69
00:05:03.832 --> 00:05:08.635
private IStackNode, or sorry, private,

70
00:05:13.267 --> 00:05:16.882
&gt;&gt; Mike North: Head of type IStackNode.

71
00:05:20.207 --> 00:05:23.530
&gt;&gt; Mike North: And we'll just
leave it undefined there, right?

72
00:05:23.530 --> 00:05:27.780
So here, only within this function,
can we access this.

73
00:05:27.780 --> 00:05:32.480
The world of prepending underscores
before variable names to indicate

74
00:05:32.480 --> 00:05:36.970
privateness is a thing of the past,
we don't have to do that TypeScript.

75
00:05:36.970 --> 00:05:43.230
This is actually private,
not just improper to touch.

76
00:05:43.230 --> 00:05:47.654
I guess, is that the right way to
describe the way we treat underscores?

77
00:05:47.654 --> 00:05:52.574
So now,
this puts us in an okay state here where

78
00:05:52.574 --> 00:05:56.620
we can start working with this stuff.

79
00:05:56.620 --> 00:06:03.720
So let's do print first because I feel
that'll be something useful as we

80
00:06:03.720 --> 00:06:10.820
start flushing out this class,
we'll need to see what this looks like.

81
00:06:10.820 --> 00:06:13.150
So what I'm gonna do is I'll say,

82
00:06:13.150 --> 00:06:17.990
we'll grab the head node,
which we can do because it's private.

83
00:06:19.560 --> 00:06:25.115
And then while the node is still truthy,
&gt;&gt; Mike North: Log

84
00:06:25.115 --> 00:06:29.905
out the data,
&gt;&gt; Mike North: And

85
00:06:29.905 --> 00:06:31.780
traverse to the next node.

86
00:06:31.780 --> 00:06:35.810
So we're gonna walk along from the head
node all the way until we get basically

87
00:06:35.810 --> 00:06:40.660
an undefined for that next value, which
means we're at the tail of the link list.

88
00:06:42.230 --> 00:06:47.203
And,
&gt;&gt; Mike North: We'll

89
00:06:47.203 --> 00:06:51.570
just change all these to functions,
just to quiet some more complaints there.

90
00:06:51.570 --> 00:06:53.600
Okay, so now print works.

91
00:06:53.600 --> 00:06:58.114
So length, length is gonna actually
operate in a very similar way.

92
00:07:08.309 --> 00:07:10.440
&gt;&gt; Mike North: That's fine, right?

93
00:07:10.440 --> 00:07:12.985
So we're gonna walk along the list and
count our steps.

94
00:07:14.634 --> 00:07:16.594
&gt;&gt; Mike North: So you don't get
rid of that, collapse that down,

95
00:07:16.594 --> 00:07:17.420
collapse this down.

96
00:07:18.670 --> 00:07:21.460
Okay, pop, pop is pretty easy.

97
00:07:21.460 --> 00:07:27.081
So we can say,
&gt;&gt; Mike North: We'll

98
00:07:27.081 --> 00:07:33.057
say,
&gt;&gt; Mike North: So

99
00:07:33.057 --> 00:07:37.388
we're gonna get the node,
&gt;&gt; Mike North: And

100
00:07:37.388 --> 00:07:42.935
then the new head equals next.

101
00:07:48.293 --> 00:07:49.793
&gt;&gt; Mike North: We'll
come back to that later,

102
00:07:49.793 --> 00:07:52.858
we still have to handle the case
where the node might not be there.

103
00:07:52.858 --> 00:08:02.780
And in fact, we can just do this,
&gt;&gt; Mike North: Good enough, right?

104
00:08:02.780 --> 00:08:04.320
Early termination there.

105
00:08:04.320 --> 00:08:06.260
So pop looks okay.

106
00:08:08.290 --> 00:08:10.300
All right, now it's time for push.

107
00:08:10.300 --> 00:08:15.288
I wanna handle this one first,
and we'll say items.forEach, and

108
00:08:15.288 --> 00:08:18.628
we'll pass in a nice
little error function.

109
00:08:24.041 --> 00:08:28.217
&gt;&gt; Mike North: I'm just gonna lean on
the existing function that I have, right?

110
00:08:28.217 --> 00:08:37.250
I'm gonna route everything through
the original push method up here.

111
00:08:37.250 --> 00:08:39.560
This is complaining, why?

112
00:08:39.560 --> 00:08:41.240
Duplicate function implementation.

113
00:08:42.420 --> 00:08:47.560
Okay, so now we're at a point where we
have to tackle this overloading issue.

114
00:08:47.560 --> 00:08:48.470
Here's how we're gonna do it.

115
00:08:50.530 --> 00:08:57.980
One, two, so these are our two
usable heads, this is the third one.

116
00:08:59.110 --> 00:09:01.300
And we'll use this union type here.

117
00:09:01.300 --> 00:09:06.540
It's a T or a T array, it's one or
the other, only those two types will work.

118
00:09:06.540 --> 00:09:10.645
And again, this is the unaccessible one,

119
00:09:10.645 --> 00:09:15.216
the implementation not
accessible directly.

120
00:09:17.349 --> 00:09:19.258
&gt;&gt; Mike North: And
in here we can say if, so

121
00:09:19.258 --> 00:09:24.238
we need a way to detect whether this
is an array, and we're not gonna get

122
00:09:24.238 --> 00:09:29.630
instance of does not return a string
array, it's gonna give us an object.

123
00:09:29.630 --> 00:09:34.394
But we can use an indirect method to

124
00:09:34.394 --> 00:09:39.006
do this like if, we can try this.

125
00:09:42.124 --> 00:09:43.283
&gt;&gt; Mike North: Let's see if that works.

126
00:09:45.974 --> 00:09:48.710
&gt;&gt; Mike North: Yep,
looks like the type card works there.

127
00:09:48.710 --> 00:09:50.096
So instance of works as well.

128
00:09:52.922 --> 00:09:55.817
&gt;&gt; Mike North: So in this situation,
actually we'll need to return this in

129
00:09:55.817 --> 00:09:59.450
either case no matter what,
so we'll leave that in place.

130
00:09:59.450 --> 00:10:02.990
Here we are going to
push each of the items,

131
00:10:02.990 --> 00:10:05.560
and then down here our job
is to push a single item.

132
00:10:05.560 --> 00:10:09.210
And once we implement this, I think we
are probably gonna pass all of our tests.

133
00:10:10.260 --> 00:10:14.537
In this situation we're gonna say, so

134
00:10:14.537 --> 00:10:19.461
we've got a current head node, we'll say,

135
00:10:19.461 --> 00:10:23.098
create a new node, data: item.

136
00:10:23.098 --> 00:10:30.191
Actually, let's call this,
&gt;&gt; Mike North: Just

137
00:10:30.191 --> 00:10:35.020
to be really clear about it,
item or array.

138
00:10:35.020 --> 00:10:40.232
So in this situation it's not smart enough

139
00:10:40.232 --> 00:10:45.878
to understand that
the only other situation,

140
00:10:45.878 --> 00:10:50.089
it must be a single type T, right?

141
00:10:50.089 --> 00:10:52.036
Type of, it was able to figure it out.

142
00:10:52.036 --> 00:10:55.530
Here, instance of,
it's a little bit more vague of a request,

143
00:10:55.530 --> 00:10:58.230
simply because there's so
many prototypes out there.

144
00:10:58.230 --> 00:11:01.840
When we're saying type of,
it knows that this is a union type,

145
00:11:01.840 --> 00:11:05.090
these are the two things it can be, and
it can basically cross one thing out.

146
00:11:05.090 --> 00:11:06.674
So that's something
that it can figure out.

147
00:11:06.674 --> 00:11:09.670
Instance of is a much
harder question to ask.

148
00:11:09.670 --> 00:11:13.610
What if it's a sub-class of my array,
right?

149
00:11:13.610 --> 00:11:19.910
If I had a subclass of my array,
&gt;&gt; Mike North: This would not work.

150
00:11:22.330 --> 00:11:28.730
So here we go, we're gonna have to say
itemOrArray as T, we can do our past here.

151
00:11:30.650 --> 00:11:35.402
And then next is going
to be the current head.

152
00:11:40.513 --> 00:11:44.484
&gt;&gt; Mike North: And then now we make
this node that we just created the head.

153
00:11:48.968 --> 00:11:50.784
&gt;&gt; Mike North: And
we end up passing all of the tests.

154
00:11:54.609 --> 00:11:58.170
&gt;&gt; Mike North: So in summary,
let's expand all of this out.

155
00:12:01.232 --> 00:12:07.500
&gt;&gt; Mike North: So just starting from the
bottom, we walked our linked list, right?

156
00:12:07.500 --> 00:12:09.380
We've got just a very
simple linked list node.

157
00:12:09.380 --> 00:12:12.700
It's got the data of interest and

158
00:12:12.700 --> 00:12:16.610
an edge to the next node that
we can use to traverse the list.

159
00:12:18.450 --> 00:12:23.070
Getting the length of a linked list
is an expensive operation compared to

160
00:12:23.070 --> 00:12:26.020
an array cuz we don't know its length.

161
00:12:26.020 --> 00:12:27.290
This is the price we pay for

162
00:12:27.290 --> 00:12:31.670
the ability to add things in the middle
really quickly with that reallocating.

163
00:12:33.120 --> 00:12:36.540
Popping a linked list is relatively easy.

164
00:12:36.540 --> 00:12:41.480
And here we see that the undefined
situation is pretty simple to handle.

165
00:12:41.480 --> 00:12:46.850
We just we return a union type, and
any one who pops must be prepared, right?

166
00:12:46.850 --> 00:12:49.740
You can't simply say, I've got a new list.

167
00:12:51.080 --> 00:12:58.235
Let so l equals new Stack of type number,

168
00:12:58.235 --> 00:13:05.607
and then say let x:number equal l.pop.

169
00:13:05.607 --> 00:13:10.663
It's basically gonna say, hey,
be advised, TypeScript is telling you,

170
00:13:10.663 --> 00:13:14.376
remember this is not guaranteed
to give you something,

171
00:13:14.376 --> 00:13:18.014
there are scenarios where
this might be empty.

172
00:13:18.014 --> 00:13:23.760
And so now you have to handle that or
you have to say I take the risk, right?

173
00:13:23.760 --> 00:13:28.090
I take the risk looks like this, look,

174
00:13:28.090 --> 00:13:31.680
because of how I'm using this,
I know I'm always going to have something.

175
00:13:31.680 --> 00:13:37.090
But now you got some feedback telling you,
reminding you that technically

176
00:13:37.090 --> 00:13:42.182
this can return undefined, and it's up to
us to kind of handle that in some way.

177
00:13:42.182 --> 00:13:45.162
In JavaScript there's nothing
to tell you this, there's so

178
00:13:45.162 --> 00:13:47.123
much of this kinda stuff that we forget.

179
00:13:47.123 --> 00:13:50.525
When I tell you TypeScript will
help you write more robust code,

180
00:13:50.525 --> 00:13:52.040
this is exactly what I mean.

181
00:13:53.640 --> 00:13:58.510
And then we implemented using
function overloading here.

182
00:13:58.510 --> 00:14:02.110
We have two heads, one for
pushing a single item, one for

183
00:14:02.110 --> 00:14:04.590
pushing multiple items at once.

184
00:14:04.590 --> 00:14:09.370
And then we have a union type here where
we're saying, take either of these.

185
00:14:09.370 --> 00:14:16.090
So that is a broad enough type of argument
to handle both of these cases here.

186
00:14:16.090 --> 00:14:22.640
And within the single function, we handle
both of those cases using a condition.

187
00:14:22.640 --> 00:14:27.492
And instance of turns out to be
a type guard that allows us,

188
00:14:27.492 --> 00:14:31.651
within this block statement,
we know that item or

189
00:14:31.651 --> 00:14:35.840
array is definitely
an instance of an array.

190
00:14:35.840 --> 00:14:38.892
Unfortunately, I don't think we can do,
yeah,

191
00:14:38.892 --> 00:14:42.902
we can't do that cuz that would
require some serious backflips.

192
00:14:42.902 --> 00:14:45.596
Cuz that's not something
JavaScript can do,

193
00:14:45.596 --> 00:14:48.730
TypeScript would have to handle it for us.

194
00:14:48.730 --> 00:14:49.720
Any questions about this?

195
00:14:51.720 --> 00:14:55.790
Did this exercise help you kind of play
with the overloading a little bit?

196
00:14:55.790 --> 00:15:00.559
And are we starting to
see that this structure

197
00:15:00.559 --> 00:15:04.450
gives us a safer class to play with and

198
00:15:04.450 --> 00:15:08.990
would never be possible with JavaScript?

199
00:15:08.990 --> 00:15:12.480
I love this, this is the kinda stuff I've
been missing from front-end development.

200
00:15:12.480 --> 00:15:18.458
So tomorrow what we're gonna do is
a series of exercises based on a single

201
00:15:18.458 --> 00:15:24.926
project, and that is a React component
that we'll build using TypeScript for

202
00:15:24.926 --> 00:15:30.050
an auto-complete that hits
the Google Places API.

203
00:15:30.050 --> 00:15:34.350
And so it'll give you relevant
location-based data about restaurants and

204
00:15:34.350 --> 00:15:37.760
things around wherever you happen to be.

205
00:15:37.760 --> 00:15:42.710
We're going to build the React component.

206
00:15:42.710 --> 00:15:48.500
And we're going to handle the asynchronous
work that goes on using async and

207
00:15:48.500 --> 00:15:52.600
await, which is a way of
writing asynchronous code

208
00:15:52.600 --> 00:15:55.280
in such a way that it almost
looks like synchronous code.

209
00:15:55.280 --> 00:16:00.490
Before we use it,
I'm going to help us get to the point

210
00:16:00.490 --> 00:16:04.030
where we can build something that's
almost like our own async and

211
00:16:04.030 --> 00:16:06.400
await using something called
the generator function,

212
00:16:07.440 --> 00:16:12.010
where we can pause execution at various
points and wait for promises to resolve.

213
00:16:12.010 --> 00:16:16.590
By the end of that, you will all
understand fundamentally how this looks.

214
00:16:16.590 --> 00:16:22.020
And it belongs in a TypeScript course
because this has been in TypeScript for

215
00:16:22.020 --> 00:16:22.610
ages.

216
00:16:22.610 --> 00:16:28.349
And while it is a relatively new thing in
the JavaScript world, async and await,

217
00:16:28.349 --> 00:16:33.650
they've been in TypeScript
applications for ages.

218
00:16:35.400 --> 00:16:39.050
So it is much more of a common
practice to use there.

219
00:16:39.050 --> 00:16:40.730
So i'll see you tomorrow, and

220
00:16:40.730 --> 00:16:44.394
look forward to that,
a bigger project in four or five stages.

