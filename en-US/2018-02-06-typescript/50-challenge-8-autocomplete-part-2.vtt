WEBVTT

1
00:00:00.270 --> 00:00:04.875
&gt;&gt; Mike North: Let's think about what we
can do with these stateful components and

2
00:00:04.875 --> 00:00:08.281
channel it toward enhancing
our app a little bit.

3
00:00:08.281 --> 00:00:13.020
So let me go through the instructions,
and I'm gonna take you to the code and

4
00:00:13.020 --> 00:00:15.772
show you what's been added to the picture.

5
00:00:15.772 --> 00:00:20.228
It's gonna look like, the last
exercise we've just completed with my

6
00:00:20.228 --> 00:00:23.680
solution in place for
what you've just built.

7
00:00:23.680 --> 00:00:27.100
And your job is gonna be to
go upstream one level and

8
00:00:27.100 --> 00:00:30.368
to address a different
part of the problem now.

9
00:00:30.368 --> 00:00:36.106
So there's a PlaceSearchResultList,
right, that contains,

10
00:00:36.106 --> 00:00:43.005
think of this as the UL that contains all
of the LIs which you just made, right?

11
00:00:43.005 --> 00:00:45.023
You made that component.

12
00:00:45.023 --> 00:00:49.891
And we've got a function now that
kicks off the search process,

13
00:00:49.891 --> 00:00:51.525
given the strength.

14
00:00:51.525 --> 00:00:55.952
So, now we have an input and
we're wiring up a function there, so

15
00:00:55.952 --> 00:00:59.184
we're gonna have to deal
with a function type.

16
00:00:59.184 --> 00:01:04.510
The app owns the process of
calculating those search results.

17
00:01:04.510 --> 00:01:10.699
So that is a job for
the outer component outside this thing.

18
00:01:10.699 --> 00:01:13.376
When that search completes, or in fact,

19
00:01:13.376 --> 00:01:18.352
when any state changes in that app
causing everything to rerender.

20
00:01:18.352 --> 00:01:22.056
This ResultList will rerender,
and that can happen,

21
00:01:22.056 --> 00:01:26.884
as you type a new letter in or it could
happen as we kick off the process for

22
00:01:26.884 --> 00:01:31.635
going to fetch data and now we're in
progress and we might wanna render

23
00:01:31.635 --> 00:01:36.174
something different on the screen for
whether we're in process.

24
00:01:36.174 --> 00:01:40.520
So, I want us to focus on handling
all of those different states.

25
00:01:40.520 --> 00:01:47.300
Whether we have, we haven't kicked search
off yet, or we're currently in progress or

26
00:01:47.300 --> 00:01:52.429
we have some results that we wanna
display using a component that is

27
00:01:52.429 --> 00:01:57.856
very very similar and possibly even
identical to what you just built.

28
00:01:57.856 --> 00:02:00.940
We're gonna see some use
of async/await here.

29
00:02:00.940 --> 00:02:05.064
So, we're gonna lean on that and I'm
gonna explain how async/wait gonna work,

30
00:02:05.064 --> 00:02:07.052
just in case this is new to some people.

31
00:02:07.052 --> 00:02:10.020
But, it is fine to leave this in place.

32
00:02:10.020 --> 00:02:14.847
We're going to outlook in the last
exercise that I'll have you do

33
00:02:14.847 --> 00:02:19.587
because our job is gonna be to
create similar behavior using only

34
00:02:19.587 --> 00:02:22.944
a generator function and
code that we write.

35
00:02:22.944 --> 00:02:25.498
The name of the exercise here
is called autocomplete-2,

36
00:02:25.498 --> 00:02:27.550
if you wanna open it up
in your editor right now.

37
00:02:29.500 --> 00:02:38.120
So, if we open that folder up
&gt;&gt; Mike North: And look at the app,

38
00:02:38.120 --> 00:02:42.817
so there's some additional behavior
here that we were not seeing before.

39
00:02:42.817 --> 00:02:45.589
First off, the app has some state,

40
00:02:45.589 --> 00:02:50.488
this is a proper stateful component and
it's got a result set,

41
00:02:50.488 --> 00:02:55.401
a boolean indicating whether
a search is currently underway.

42
00:02:55.401 --> 00:02:58.863
So this would be like there's
a pending promise that has not yet

43
00:02:58.863 --> 00:03:01.160
resolved, and the current search term.

44
00:03:03.460 --> 00:03:06.033
So when we initialize that state,

45
00:03:06.033 --> 00:03:10.469
type scripts helping us here,
if we were to leave this out,

46
00:03:10.469 --> 00:03:15.281
we would get a complaint saying,
you gotta these are required.

47
00:03:15.281 --> 00:03:18.700
You have to do that or you have to
declare something as optional, right?

48
00:03:18.700 --> 00:03:20.353
So we get type safety there.

49
00:03:20.353 --> 00:03:23.376
Note that we have no props
being passed into the app, so

50
00:03:23.376 --> 00:03:26.880
it's fine for us to use an empty
object as the interface there.

51
00:03:28.030 --> 00:03:31.644
I would in fact prefer and
empty object over any,

52
00:03:31.644 --> 00:03:37.102
can anyone guess why.
&gt;&gt; Mike North: What's

53
00:03:37.102 --> 00:03:39.474
the difference between them?
&gt;&gt; Speaker 2: Cuz then you know you have

54
00:03:39.474 --> 00:03:41.695
nothing.
&gt;&gt; Mike North: Yep, exactly.

55
00:03:41.695 --> 00:03:46.351
So here if I try,
&gt;&gt; Mike North: This is wrong,

56
00:03:46.351 --> 00:03:49.910
it's saying,
you're giving me something I didn't need.

57
00:03:49.910 --> 00:03:57.130
So it is a way,
the shape of an empty object, empty props.

58
00:03:57.130 --> 00:04:00.530
And so now, there's no way for my fellow
developer to put something there,

59
00:04:00.530 --> 00:04:02.630
thinking it's gonna do something.

60
00:04:02.630 --> 00:04:07.746
And maybe they keep going down that wrong
road for a while before they realize, wait

61
00:04:07.746 --> 00:04:12.045
a minute, it's not asking me for anything.
&gt;&gt; Speaker 3: Couldn't they even put any

62
00:04:12.045 --> 00:04:15.980
there, pass something in, and
then actually get it as a prop too?

63
00:04:15.980 --> 00:04:18.799
So then you're not even
using any structures?

64
00:04:18.799 --> 00:04:20.007
&gt;&gt; Mike North: You could and in the code

65
00:04:20.007 --> 00:04:22.843
review you'd say what's with this any?
&gt;&gt; Speaker 3: Exactly,

66
00:04:22.843 --> 00:04:25.225
yeah totally totally.
&gt;&gt; Mike North: In fact here's

67
00:04:25.225 --> 00:04:26.694
something else we could do.

68
00:04:42.823 --> 00:04:47.742
&gt;&gt; Mike North: There's
&gt;&gt; Mike North: I forget whether it's

69
00:04:47.742 --> 00:04:49.819
a typescript configuration or an ES lin.

70
00:04:51.450 --> 00:04:56.623
Option here, but
&gt;&gt; Speaker 3: Just

71
00:04:56.623 --> 00:04:58.991
makes an easy legal.
&gt;&gt; Mike North: Yeah, or

72
00:04:58.991 --> 00:05:04.635
basically like at least make it a warning.
&gt;&gt; Speaker 4: It's a tslint,

73
00:05:04.635 --> 00:05:05.943
a tslint.
&gt;&gt; Mike North: Yep, so

74
00:05:05.943 --> 00:05:08.810
let me try that, do you know what
the name of the rule is by any chance?

75
00:05:08.810 --> 00:05:09.719
&gt;&gt; Speaker 4: No dash

76
00:05:09.719 --> 00:05:11.020
any.
&gt;&gt; Mike North: Great.

77
00:05:11.020 --> 00:05:12.350
Yes, so we would go down here.

78
00:05:12.350 --> 00:05:15.470
And again,
this one else says JSON configuration.

79
00:05:15.470 --> 00:05:19.321
So there you go, no any,
disallows any use of any.

80
00:05:19.321 --> 00:05:26.186
[LAUGH] And at that point now
like here we can actually do it.

81
00:05:26.186 --> 00:05:27.630
Can we do like a 1 here?

82
00:05:27.630 --> 00:05:32.627
Is it gonna let us warn, so
we won't do that because our code is not

83
00:05:32.627 --> 00:05:36.350
tightened up enough yet
where that would even be okay.

84
00:05:36.350 --> 00:05:43.292
But if you're, if you're building like
a library, I mentioned yesterday,

85
00:05:43.292 --> 00:05:48.441
which is an incredibly complicated,
very type heavy project.

86
00:05:48.441 --> 00:05:51.069
There I can totally imagine
that they would say.

87
00:05:52.840 --> 00:05:57.751
Any's are a liability,
wherever they are, that's dangerous.

88
00:05:57.751 --> 00:05:59.870
We forbid it in this code base.

89
00:05:59.870 --> 00:06:03.375
Maybe not the best idea for
an app because the whole point is,

90
00:06:03.375 --> 00:06:05.867
this is supposed to be light and flexible.

91
00:06:05.867 --> 00:06:09.442
Especially if you're migrating
to TypeScript from JavaScript,

92
00:06:09.442 --> 00:06:11.560
that would redline the whole project.

93
00:06:12.990 --> 00:06:15.793
All right, so
let's look at this function here.

94
00:06:15.793 --> 00:06:17.710
Does anyone know what
an async function is?

95
00:06:18.990 --> 00:06:24.516
What's an async function?
&gt;&gt; Speaker 5: Async function.

96
00:06:24.516 --> 00:06:27.863
[CROSSTALK] What?
&gt;&gt; Mike North: Do you know

97
00:06:27.863 --> 00:06:30.524
what it returns?
&gt;&gt; Speaker 5: It doesn't

98
00:06:30.524 --> 00:06:34.003
return a generator.
&gt;&gt; Speaker 6: Uses promises in

99
00:06:34.003 --> 00:06:35.125
a synchronous way?
&gt;&gt; Mike North: Yeah so

100
00:06:35.125 --> 00:06:39.640
you see it returns a promise,
async functions return a promise.

101
00:06:40.656 --> 00:06:47.827
You're almost correct, it is sort of an
abstraction around a generator function.

102
00:06:47.827 --> 00:06:51.995
You can pause the execution in
the same way that you can with

103
00:06:51.995 --> 00:06:53.879
the generator function.

104
00:06:53.879 --> 00:06:58.027
And when we define a function
as async like this, and for

105
00:06:58.027 --> 00:07:03.763
any of your own functions, or in fact,
any function that returns a promise,

106
00:07:03.763 --> 00:07:07.060
it's fair game to put
async in front of it.

107
00:07:07.060 --> 00:07:11.432
Then we can use the await keyword,
and what the await keyword does

108
00:07:11.432 --> 00:07:15.423
is it pauses execution locally
just within that function.

109
00:07:15.423 --> 00:07:19.926
Waits for a promise to resolve and
then completes the assignment with

110
00:07:19.926 --> 00:07:25.040
the resolved value of that promise,
which is really, really cool.

111
00:07:25.040 --> 00:07:29.599
For one,
it lets us do something like this,

112
00:07:29.599 --> 00:07:36.025
which this is unheard of in
the dealing with async code world.

113
00:07:36.025 --> 00:07:40.561
And as of TypeScript 2.5 we can
even have catch here that doesn't

114
00:07:40.561 --> 00:07:43.130
require arguments like this.

115
00:07:43.130 --> 00:07:47.508
So that just dropped earlier this month.

116
00:07:47.508 --> 00:07:54.900
Oops we're not allowed to do that.
&gt;&gt; Mike North: Something

117
00:07:54.900 --> 00:07:56.613
like that would be totally fine.

118
00:07:56.613 --> 00:08:01.360
We can try catch, we don't have to
.catch all of our promises, right?

119
00:08:01.360 --> 00:08:03.004
Async in a way is fantastic.

120
00:08:03.004 --> 00:08:07.521
So just know that this is asynchronous
code that is written very much like

121
00:08:07.521 --> 00:08:09.710
synchronous code.

122
00:08:09.710 --> 00:08:11.830
So if we just focus on this here,

123
00:08:11.830 --> 00:08:16.240
I don't expect that the set state
to cause something to be thrown.

124
00:08:16.240 --> 00:08:20.292
But just normally this would be suspect
right where we're setting inProgress to

125
00:08:20.292 --> 00:08:23.582
true and then inProgress to false
both within the same function.

126
00:08:23.582 --> 00:08:26.350
Well you're thinking like well this
is gonna run really quickly right?

127
00:08:26.350 --> 00:08:29.496
Like why would you flip flop
like within the same function.

128
00:08:29.496 --> 00:08:32.570
Just know, this is an Ajax request here.

129
00:08:32.570 --> 00:08:36.042
Oops, well that's an Ajax request or
fetch.

130
00:08:36.042 --> 00:08:37.330
This is a fetch.

131
00:08:37.330 --> 00:08:41.340
And so it may be a full second before
you actually reach this line here.

132
00:08:41.340 --> 00:08:47.456
So in the same way that the while true
looked funky in our generator function,

133
00:08:47.456 --> 00:08:52.725
this also looks funky, but
we have to remember that we're pausing

134
00:08:52.725 --> 00:08:57.456
execution and
re-entering the function at those awaits.

135
00:08:57.456 --> 00:09:00.018
So hopefully you're
starting to see that this,

136
00:09:00.018 --> 00:09:04.390
a lot of what I'm talking about here seems
conceptionally similar to the generator

137
00:09:04.390 --> 00:09:08.160
functions we were just talking about,
and this is no accident.

138
00:09:08.160 --> 00:09:11.866
Generator functions and
yield are the basis for

139
00:09:11.866 --> 00:09:14.928
the async/await and the way it works.

140
00:09:14.928 --> 00:09:19.710
It's not an accident that most of the time
once a browser launches support for

141
00:09:19.710 --> 00:09:24.273
a generator function, async and
await comes either in the same release or

142
00:09:24.273 --> 00:09:29.171
very shortly thereafter.
&gt;&gt; Mike North: I wanna show you one

143
00:09:29.171 --> 00:09:30.343
last cool thing.

144
00:09:30.343 --> 00:09:33.680
It is just as it’s relates to async and
await.

145
00:09:36.860 --> 00:09:38.859
Hopefully, this is the right
version of Chrome.

146
00:09:51.020 --> 00:09:52.718
&gt;&gt; Mike North: Nope.

147
00:09:52.718 --> 00:09:57.010
Unexpected identifier,
okay let me try something else.

148
00:09:58.240 --> 00:10:04.150
So this here,
&gt;&gt; Mike North: Is

149
00:10:04.150 --> 00:10:05.956
it gonna cooperate with me?

150
00:10:05.956 --> 00:10:07.756
Nope, I have one version
of Chrome open and

151
00:10:07.756 --> 00:10:13.870
it doesn't wanna let me do another one.
&gt;&gt; Mike North: Fine,

152
00:10:13.870 --> 00:10:15.792
I'll kill all the Chromes.

153
00:10:15.792 --> 00:10:18.652
All right, so now we're looking at,
this is the nightly build of

154
00:10:18.652 --> 00:10:28.338
Chrome.
&gt;&gt; Mike North: So

155
00:10:28.338 --> 00:10:33.801
forget all the notifications and
stuff here cuz I'm on the Google homepage.

156
00:10:33.801 --> 00:10:40.304
But I do want you to see.
&gt;&gt; Mike North: I have to use https,

157
00:10:40.304 --> 00:10:46.546
mixed content.
&gt;&gt; Mike North: Fine I'll use something

158
00:10:46.546 --> 00:10:48.329
with improperly set course headers.

159
00:10:58.410 --> 00:10:59.919
&gt;&gt; Mike North: So that,
that was a promise.

160
00:10:59.919 --> 00:11:03.050
Fetch returns a promise that
resolves to a response.

161
00:11:03.050 --> 00:11:07.719
So in this next version of Chrome,
starting with Chrome 62, you can even use

162
00:11:07.719 --> 00:11:12.960
await in your console without having to
wrap it in an async function or anything.

163
00:11:12.960 --> 00:11:17.928
It's almost like you're already inside
the context of a generator function when

164
00:11:17.928 --> 00:11:20.387
you're within your dev tools, right?

165
00:11:20.387 --> 00:11:25.514
I could do something like this, .then
response, it's gonna complain at me about

166
00:11:25.514 --> 00:11:34.555
redefining resp.
&gt;&gt; Mike North: And

167
00:11:34.555 --> 00:11:37.361
that's actually the JSON from my API,

168
00:11:37.361 --> 00:11:40.685
available basically on
the next line of code.

169
00:11:40.685 --> 00:11:43.190
All right when I ask for that variable.

170
00:11:43.190 --> 00:11:48.874
So that's the essence of async and
await, the fact that it lets us write

171
00:11:48.874 --> 00:11:55.344
asynchronous code that returns a promise
almost as if it's asynchronous code.

172
00:11:55.344 --> 00:11:57.093
So feel free to leave this in place, but

173
00:11:57.093 --> 00:12:01.320
just know that you're gonna wanna pass
a string into this search function.

174
00:12:01.320 --> 00:12:06.316
And that will ultimately kick
off the process by which

175
00:12:06.316 --> 00:12:10.986
inProgress and results and
term end up changing.

176
00:12:10.986 --> 00:12:14.456
So if you're gonna wanna basically pass
a function into this component that has

177
00:12:14.456 --> 00:12:17.305
the input, unlike whenever
there's a keystroke or something,

178
00:12:17.305 --> 00:12:20.550
it's gonna trigger a new search which
will do the appropriate rerender.

179
00:12:21.740 --> 00:12:24.319
The place search, yes?
&gt;&gt; Speaker 3: So then with async,

180
00:12:24.319 --> 00:12:28.498
if you call, if you have, if you're
trying to a variable definition and

181
00:12:28.498 --> 00:12:32.310
you call an async method,
they return something.

182
00:12:32.310 --> 00:12:37.248
Does that variable definition type, it's
not a feature or something, it's actually

183
00:12:37.248 --> 00:12:40.592
just gonna be whatever type is returned?
&gt;&gt; Mike North: Can you give me a line of

184
00:12:40.592 --> 00:12:43.810
code to write, cuz it could mean
a couple of different things there?

185
00:12:43.810 --> 00:12:45.863
&gt;&gt; Speaker 3: Definitely so,

186
00:12:45.863 --> 00:12:50.871
if try search returned the response.
&gt;&gt; Mike North: Like

187
00:12:50.871 --> 00:12:54.867
this?
&gt;&gt; Speaker 3: Perfect,

188
00:12:54.867 --> 00:12:55.781
yeah.
&gt;&gt; Mike North: Okay, and

189
00:12:55.781 --> 00:12:58.094
you're saying what is the type of X?
&gt;&gt; Speaker 3: Yes, sir.

190
00:12:58.094 --> 00:12:59.080
&gt;&gt; Mike North: It's a promise.

191
00:12:59.080 --> 00:13:00.892
&gt;&gt; Speaker 3: It is, okay.

192
00:13:00.892 --> 00:13:01.810
&gt;&gt; Mike North: But what about this?

193
00:13:05.650 --> 00:13:10.799
Sorry.
&gt;&gt; Speaker 3: What?

194
00:13:10.799 --> 00:13:15.621
So even if you had returned on line 26

195
00:13:15.621 --> 00:13:18.457
results?
&gt;&gt; Mike North: Line

196
00:13:18.457 --> 00:13:20.838
26.
&gt;&gt; Speaker 3: So

197
00:13:20.838 --> 00:13:24.688
if you'd returned something
that all ready awaited,

198
00:13:24.688 --> 00:13:27.783
would it still be a promise?
&gt;&gt; Mike North: If you returned something

199
00:13:27.783 --> 00:13:28.819
that all ready awaited?

200
00:13:28.819 --> 00:13:31.340
So let's try it.

201
00:13:31.340 --> 00:13:32.869
So try search is type,

202
00:13:32.869 --> 00:13:37.701
what it returns is a promise that
resolves to an array of place details.

203
00:13:37.701 --> 00:13:40.999
In this case,
trySearch did not return anything, but

204
00:13:40.999 --> 00:13:44.880
it returns a promise that resolves
to an array of place details.

205
00:13:44.880 --> 00:13:48.560
So if I add this one back in or

206
00:13:48.560 --> 00:13:54.964
places.
&gt;&gt; Mike North: Something like this,

207
00:13:54.964 --> 00:13:59.749
the type of places is a promise that
resolves to place details, add this.

208
00:13:59.749 --> 00:14:02.014
&gt;&gt; Speaker 3: Cool.

209
00:14:02.014 --> 00:14:03.168
&gt;&gt; Mike North: And now the error here is,

210
00:14:03.168 --> 00:14:05.163
I'm not in the context
of an async function,

211
00:14:05.163 --> 00:14:07.820
and so
it's not gonna be able to pause execution.

212
00:14:07.820 --> 00:14:12.902
But TypeScript is smart enough to know
that basically a way it's gonna cause,

213
00:14:12.902 --> 00:14:16.521
it's gonna make it so
that that promised is resolved and

214
00:14:16.521 --> 00:14:20.321
it's the resolved value that we get back.
&gt;&gt; Speaker 3: Well,

215
00:14:20.321 --> 00:14:24.084
also 25 is not locking.

216
00:14:24.084 --> 00:14:29.545
It's not stopping the code.
&gt;&gt; Mike North: Aside from whacky

217
00:14:29.545 --> 00:14:34.565
stuff such as alert and prompt,
we don't have alert in Windows prompt,

218
00:14:34.565 --> 00:14:37.466
there is no blocking code in JavaScript.

219
00:14:37.466 --> 00:14:38.900
We don't write blocking code.

220
00:14:38.900 --> 00:14:43.918
Like we want our functions to run
in like 12 milliseconds or less,

221
00:14:43.918 --> 00:14:48.508
or we can't really render fast
enough to create smooth apps.

222
00:14:48.508 --> 00:14:49.769
It's not blocking.

223
00:14:51.530 --> 00:14:55.648
Think of this,
remember the case switch statement and

224
00:14:55.648 --> 00:14:58.701
just think of it as like this is one case.

225
00:14:58.701 --> 00:15:03.019
Sorry, I can't highlight it correctly,
but one case does all of the lines above

226
00:15:03.019 --> 00:15:07.400
the selected content, stops where
the selection stops on its left side.

227
00:15:07.400 --> 00:15:12.101
The next case basically does,
goes here and it runs,

228
00:15:12.101 --> 00:15:15.761
finishes the assignment goes over here.

229
00:15:15.761 --> 00:15:20.360
So this should give you a little sneak
peek into where we're eventually gonna go.

230
00:15:20.360 --> 00:15:23.628
Imagine an iterator that
returned promises, and

231
00:15:23.628 --> 00:15:27.451
remember when we fed that
stuff into the .next function?

232
00:15:27.451 --> 00:15:29.440
It completed the assignment.

233
00:15:29.440 --> 00:15:32.104
So imagine if we called iterator.next and

234
00:15:32.104 --> 00:15:36.988
when the promise resolves we put that
resolve value back into the iterator back

235
00:15:36.988 --> 00:15:40.324
into the next function it
completes the assignment.

236
00:15:40.324 --> 00:15:42.740
And then we pull off the next
promise in the chain.

237
00:15:42.740 --> 00:15:45.768
This is how async and await works.

238
00:15:45.768 --> 00:15:48.610
We kind of saw it in action already.

239
00:15:48.610 --> 00:15:51.727
And we are going to
implement our own async and

240
00:15:51.727 --> 00:15:57.060
await using this idea of an iterator,
but promises other thing that controls

241
00:15:57.060 --> 00:16:01.923
how fast we're looping through that
iterable collection of things.

242
00:16:01.923 --> 00:16:03.007
Got it?
&gt;&gt; Speaker 3: Totally.

243
00:16:03.007 --> 00:16:04.395
Thank you.
&gt;&gt; Mike North: Sweet.

244
00:16:04.395 --> 00:16:06.763
Okay, so your job in this challenge,

245
00:16:06.763 --> 00:16:10.270
we're gonna implement this
PlaceSearchResultList.

246
00:16:10.270 --> 00:16:14.886
What I have it doing currently
is logging some stuff out,

247
00:16:14.886 --> 00:16:17.194
I just attempted to make it so

248
00:16:17.194 --> 00:16:21.917
that you use it in its current
form to kind of debug things.

249
00:16:21.917 --> 00:16:26.860
It should just JSON stringify
whatever props you pass it.

250
00:16:28.860 --> 00:16:34.321
The PlaceSearchResultList can remain
a stateless functional component,

251
00:16:34.321 --> 00:16:38.842
and this is where you typically
wanna separate any complicated

252
00:16:38.842 --> 00:16:42.352
rendering from complicated
state management.

253
00:16:42.352 --> 00:16:47.597
So the app's job, it's basically
like you could argue this is what

254
00:16:47.597 --> 00:16:52.475
we would call a container component,
and its job is just sort of

255
00:16:52.475 --> 00:16:57.551
kick off this request and
rerender its children when necessary.

256
00:16:57.551 --> 00:17:03.003
But, it's never gonna cause
itself to rerender, right?

257
00:17:03.003 --> 00:17:08.047
Cuz it has no statefulness in and
out itself, that it depends on.

258
00:17:08.047 --> 00:17:11.554
It's just gonna basically change
any props that it's passing to this

259
00:17:11.554 --> 00:17:12.926
PlaceSearchResultList.

260
00:17:12.926 --> 00:17:18.045
So this is a good pattern to use with
react, that it keeps you from accidentally

261
00:17:18.045 --> 00:17:23.160
double or triple rendering through
manipulating one's own state.

262
00:17:23.160 --> 00:17:27.631
So you separate those concerns,
you either own state, or you render,

263
00:17:27.631 --> 00:17:31.147
you're either a container or
your presentation only.

264
00:17:31.147 --> 00:17:34.129
So implement this PlaceSearchResultList,
and

265
00:17:34.129 --> 00:17:38.790
I can show you what your target looks
like and I'll add it to the slides here.

266
00:17:38.790 --> 00:17:42.696
[SOUND] Sorry, get my terminal,

267
00:17:44.830 --> 00:17:48.518
&gt;&gt; Mike North: What did I change?

268
00:17:48.518 --> 00:17:49.732
I did the tryCatch,

269
00:18:02.469 --> 00:18:06.830
&gt;&gt; Mike North: So you're gonna
start up autocomplete-2, MPM start,

270
00:18:06.830 --> 00:18:11.868
not MPM test and over here,
&gt;&gt; Mike North: When we look at

271
00:18:11.868 --> 00:18:18.209
our browser,
&gt;&gt; Mike North: Now

272
00:18:18.209 --> 00:18:23.075
we should be able to typing
something like coffee,

273
00:18:23.075 --> 00:18:27.828
so note that we have three
situations we can be in,

274
00:18:27.828 --> 00:18:31.807
number one, nothing's been typed yet.

275
00:18:31.807 --> 00:18:38.090
You could use a search term of length 0
to figure out you're in this situation.

276
00:18:38.090 --> 00:18:42.675
Once we type something in,
we're showing results and

277
00:18:42.675 --> 00:18:47.368
those were probably cashed
they came back really fast.

278
00:18:47.368 --> 00:18:50.977
Let's search for something I haven't
searched for yet and you'll see

279
00:18:50.977 --> 00:18:56.720
a currently inProgress indicator.
&gt;&gt; Mike North: Right?

280
00:18:56.720 --> 00:18:59.570
So we saw that we were waiting for
that promise to come back.

281
00:18:59.570 --> 00:19:03.347
So this is the state that we're keeping
track of, this is what our state full

282
00:19:03.347 --> 00:19:07.836
container component's all about, showing
while we don't have results yet, something

283
00:19:07.836 --> 00:19:11.754
in the meantime, or telling the user to
write something in the text box above.

284
00:19:11.754 --> 00:19:14.456
So let's take a half hour for this and

285
00:19:14.456 --> 00:19:19.590
by the end your solution should look and
work something like this.

286
00:19:19.590 --> 00:19:24.729
If you want to, I wouldn't advice you
cheat yourself out of this exercise,

287
00:19:24.729 --> 00:19:28.586
but you could certainly switch
to the solutions branch,

288
00:19:28.586 --> 00:19:30.594
start up the same exercise and

289
00:19:30.594 --> 00:19:35.603
drive it just to see kind of the behavior
that you're aiming for as a goal.

290
00:19:35.603 --> 00:19:38.908
And again, don't worry about
passing those tests exactly,

291
00:19:38.908 --> 00:19:41.690
they depend on that
exact structure of HTML.

292
00:19:41.690 --> 00:19:46.112
But just in concept, you should be able
to show no search term has been entered,

293
00:19:46.112 --> 00:19:50.023
a search is currently underway,
meaning you have a pending promise.

294
00:19:50.023 --> 00:19:54.093
And then finally, here's a list
of results and the components we

295
00:19:54.093 --> 00:19:58.320
just built there's a form of it there
that you can use to render out.

