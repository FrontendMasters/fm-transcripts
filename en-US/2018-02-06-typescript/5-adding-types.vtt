WEBVTT

1
00:00:00.280 --> 00:00:01.720
&gt;&gt; Mike North: Why would
we want to add types?

2
00:00:01.720 --> 00:00:06.360
We saw that JavaScript does some
potentially unintuitive things

3
00:00:06.360 --> 00:00:09.040
to convert primitive types
just with operators.

4
00:00:09.040 --> 00:00:13.890
And when we think about checking for

5
00:00:13.890 --> 00:00:19.730
equivalents and other things like that,
there is often no effort to convert or

6
00:00:19.730 --> 00:00:23.010
even define the type of things, right?

7
00:00:23.010 --> 00:00:26.681
There's no effort to define whether the
structure of an object is equivalent to

8
00:00:26.681 --> 00:00:29.744
the structure of another object.
&gt;&gt; Mike North: So

9
00:00:29.744 --> 00:00:33.856
one of the things we hope that types will
help us do is take some run time errors

10
00:00:33.856 --> 00:00:36.580
and move them upstream
into compile time errors.

11
00:00:36.580 --> 00:00:37.950
This is always a good thing.

12
00:00:37.950 --> 00:00:41.150
You'll always want to be the one that
catches the error on the devbox,

13
00:00:41.150 --> 00:00:43.220
not to get a bug report from your user.

14
00:00:43.220 --> 00:00:48.230
Types serve as the basis for excellent
documentation to your fellow developers.

15
00:00:48.230 --> 00:00:50.750
So has anyone here tried to
write a Webpack configuration?

16
00:00:52.350 --> 00:00:55.370
Right, so it's a pretty involved object,
is it not?

17
00:00:56.370 --> 00:01:02.930
And when you say, export this object from
your Webpack config JavaScript file.

18
00:01:02.930 --> 00:01:06.080
You have to go to the documentation and
you have to read,

19
00:01:06.080 --> 00:01:09.990
here are the various properties and these
are the values those properties can have.

20
00:01:09.990 --> 00:01:12.220
And eventually,
you end up having this thing that works.

21
00:01:13.480 --> 00:01:15.290
In the Typescript world, we would say,

22
00:01:15.290 --> 00:01:19.230
well no, that's not just a regular object,
it's an object of this type.

23
00:01:19.230 --> 00:01:24.280
And we have upfront defined the valid
properties you can define and

24
00:01:24.280 --> 00:01:28.550
the valid types of values that
those things can have and

25
00:01:28.550 --> 00:01:32.050
as a result, that is right there,
right in your editor.

26
00:01:32.050 --> 00:01:34.513
It's not something that you
have to go flip back and

27
00:01:34.513 --> 00:01:40.516
forth between documentation and code form.
&gt;&gt; Mike North: So,

28
00:01:40.516 --> 00:01:44.419
[LAUGH] this fourth point here,
clever abstractions that you're so

29
00:01:44.419 --> 00:01:46.750
excited about are now safer to use.

30
00:01:46.750 --> 00:01:50.910
So I am fortunate enough to work with some

31
00:01:50.910 --> 00:01:55.330
really amazing programmers
in the Ember ecosystem.

32
00:01:56.350 --> 00:02:00.760
And some of these programmers
like Yehuda Katz and Tom Dale,

33
00:02:00.760 --> 00:02:07.210
they're involved with TC 39 where they
define the JavaScript language standard.

34
00:02:07.210 --> 00:02:08.860
That's the standard body there.

35
00:02:08.860 --> 00:02:12.490
So these are good JavaScript programmers.

36
00:02:13.660 --> 00:02:17.760
They have been working on a project
called Glimmer for a while now, and

37
00:02:17.760 --> 00:02:20.460
this is the rendering engine for Ember.

38
00:02:20.460 --> 00:02:26.220
And I don't think they would have
a problem with me, say they ended up

39
00:02:26.220 --> 00:02:31.330
before writing it in Typescript, tripping
over their own shoelaces several times.

40
00:02:31.330 --> 00:02:35.720
It's an extremely complicated task
that they're trying to perform.

41
00:02:35.720 --> 00:02:39.700
It's a very involve project that involves

42
00:02:41.160 --> 00:02:47.420
virtual machine style architecture and
Typescript is what let them actually,

43
00:02:47.420 --> 00:02:51.860
on like the third attempt or
something, get it working.

44
00:02:51.860 --> 00:02:56.410
Because even for those expert programmers,
the loosely typed

45
00:02:56.410 --> 00:03:00.760
nature of JavaScript just kept snagging
them again, and again, and again.

46
00:03:00.760 --> 00:03:04.590
We can only do so much, we're humans,
right, we can only remember so much.

47
00:03:04.590 --> 00:03:11.150
We can only keep so much straight,
and these are not training wheels,

48
00:03:13.240 --> 00:03:18.610
these are tools for kind of taking
on more ambitious challenges,

49
00:03:18.610 --> 00:03:22.560
and being able to get
past that point where.

50
00:03:22.560 --> 00:03:26.790
And I think we've all been there or
we all will be there one day, but

51
00:03:26.790 --> 00:03:31.740
that point where things are so complex
that a project is basically starting to

52
00:03:31.740 --> 00:03:34.990
collapse under its own weight or
under its own complexity.

53
00:03:34.990 --> 00:03:39.640
So Glimmer is a great example there
of something that due to Typescript

54
00:03:39.640 --> 00:03:42.580
now is going very well.

55
00:03:42.580 --> 00:03:44.010
And previous attempts,

56
00:03:44.010 --> 00:03:48.770
which involved regular JavaScript,
they basically fell flat again and again.

57
00:03:51.970 --> 00:03:57.290
Last reason, not the last reason, but
my final reason here to add types.

58
00:03:57.290 --> 00:04:01.927
We have to take into account that modern
JavaScript run types are written in typed

59
00:04:01.927 --> 00:04:03.300
languages like C++.

60
00:04:03.300 --> 00:04:07.629
So, if we just to give
you a sneak pick here,

61
00:04:07.629 --> 00:04:13.128
I don't think we'll talk
about this in too much depth,

62
00:04:13.128 --> 00:04:16.755
but the idea of how Chrome works under

63
00:04:16.755 --> 00:04:22.160
the hood is there an interpreter and
a compiler.

64
00:04:22.160 --> 00:04:25.160
The interpreter starts running your code,
right?

65
00:04:25.160 --> 00:04:27.830
Runs, say a function that you've defined.

66
00:04:27.830 --> 00:04:31.830
And if you are very consistent about
the way you use that function and

67
00:04:31.830 --> 00:04:34.600
you start to use it over and
over and over and over again.

68
00:04:35.770 --> 00:04:36.730
Chrome will say,

69
00:04:36.730 --> 00:04:42.070
well hey, we've got some information
about the use of this function.

70
00:04:42.070 --> 00:04:46.080
And it seems that the same number
of arguments are being passed in,

71
00:04:46.080 --> 00:04:48.300
the types of those arguments are the same,

72
00:04:48.300 --> 00:04:51.990
I wonder if we could start to
kind of optimize this a bit.

73
00:04:51.990 --> 00:04:54.210
And it will promote it
from the interpreter and

74
00:04:54.210 --> 00:04:59.210
it'll let the optimizing
compiler handle it.

75
00:05:00.380 --> 00:05:03.440
If you hear the name Ignition
that's the name of the interpreter,

76
00:05:03.440 --> 00:05:05.910
TurboFan is the name of the compiler.

77
00:05:05.910 --> 00:05:11.100
And at that point it's basically gonna
turn your JavaScript into assembly code

78
00:05:11.100 --> 00:05:16.180
for the architecture that your
machine's using and cache some portion

79
00:05:16.180 --> 00:05:21.550
of that assembly code for
reuse on the subsequent function calls.

80
00:05:21.550 --> 00:05:22.250
So if you,

81
00:05:22.250 --> 00:05:27.780
the term a lot of people use here is
that function just became hot code.

82
00:05:29.300 --> 00:05:33.110
Meaning it's running fast and
it's in this optimized mode.

83
00:05:33.110 --> 00:05:36.630
As soon as you mess with the types,
as soon as you break the rules of

84
00:05:38.940 --> 00:05:44.684
the strongly typed world,
that code goes back into slow mode again.

85
00:05:44.684 --> 00:05:48.560
So Typescript gives us some
constraints that help us

86
00:05:48.560 --> 00:05:50.620
get into that hot mode and stay there.

