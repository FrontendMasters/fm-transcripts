WEBVTT

1
00:00:00.000 --> 00:00:03.321
&gt;&gt; Mike North: So I'm gonna show you this,
which is the next level.

2
00:00:03.321 --> 00:00:07.053
We have the ability because
next is a function,

3
00:00:07.053 --> 00:00:12.296
functions take arguments,
we can push things into the iterator.

4
00:00:12.296 --> 00:00:17.894
So the ability to pass
values in is important.

5
00:00:17.894 --> 00:00:22.159
And has anyone here used RX before,
RXJS and observables?

6
00:00:22.159 --> 00:00:26.696
So it's the idea of being able to
push things in and get things out.

7
00:00:26.696 --> 00:00:30.817
This two-way communication
provides the foundation for

8
00:00:30.817 --> 00:00:34.103
a lot of cool reactive
programming patterns.

9
00:00:34.103 --> 00:00:39.237
And the way we have to think of this is,
in this situation we have.

10
00:00:39.237 --> 00:00:42.365
Sorry, I need my Presenter view
to talk through animations.

11
00:00:44.023 --> 00:00:46.069
&gt;&gt; Mike North: So in this situation we

12
00:00:46.069 --> 00:00:50.701
pull an iterator off of
this generator function and

13
00:00:50.701 --> 00:00:54.264
as we know, nothing happens, right.

14
00:00:54.264 --> 00:00:58.106
We have not even begin to execute
the lines of code inside this generator

15
00:00:58.106 --> 00:00:58.755
function.

16
00:00:58.755 --> 00:01:03.542
That doesn't happen until we ask
the iterator for its first value.

17
00:01:03.542 --> 00:01:07.293
That this is the same as when we had that
break point on the first line of that

18
00:01:07.293 --> 00:01:10.390
generator function and
we invoked the generator function.

19
00:01:10.390 --> 00:01:14.074
It returned its iterator, but
we did not stop at that break point.

20
00:01:14.074 --> 00:01:18.398
The game has not started yet, just think
of this as a wrapper around that code.

21
00:01:18.398 --> 00:01:19.789
And when we call next,

22
00:01:19.789 --> 00:01:24.702
that generator function is gonna start
executing code until we hit a point where

23
00:01:24.702 --> 00:01:29.571
we yield out a value.
&gt;&gt; Mike North: So in this case we're

24
00:01:29.571 --> 00:01:34.645
gonna call next and what's gonna
happen is we're going to emit 5.

25
00:01:34.645 --> 00:01:38.259
So and
the reason is we've got last result as 0.

26
00:01:38.259 --> 00:01:42.312
And then think of what's happening here.

27
00:01:42.312 --> 00:01:46.631
This is the first line inside
the block following the while, right.

28
00:01:46.631 --> 00:01:50.053
Last result equals yield
last result plus 5.

29
00:01:50.053 --> 00:01:54.527
So think of it as we're still on the right
hand side of that assignment operation.

30
00:01:54.527 --> 00:01:59.772
And I told you when we pause execution,
imagine as if we're pausing

31
00:01:59.772 --> 00:02:05.306
immediately to the left of the y in yield,
we're pausing right there.

32
00:02:05.306 --> 00:02:08.097
We're sort of caught in
the middle of that assignment

33
00:02:08.097 --> 00:02:11.849
operation.
&gt;&gt; Mike North: And so

34
00:02:11.849 --> 00:02:14.808
that is how we're going to get this 5 out.

35
00:02:14.808 --> 00:02:18.566
So think of it as the yield sucks
in the value to its right and

36
00:02:18.566 --> 00:02:23.639
you're pausing right at the yield.
&gt;&gt; Mike North: So

37
00:02:23.639 --> 00:02:28.370
then we're still paused,
what we're gonna do is

38
00:02:28.370 --> 00:02:32.663
pass the number 35 in
to the next function.

39
00:02:32.663 --> 00:02:37.371
And think of yield as almost
like a portal where we can

40
00:02:37.371 --> 00:02:41.224
push something in to
that next function and

41
00:02:41.224 --> 00:02:46.159
it's gonna pop-out out of
the left side of the yield.

42
00:02:46.159 --> 00:02:50.328
So when we take 35 and
we push it in to the next function.

43
00:02:50.328 --> 00:02:54.510
That 35 is gonna be,
that value is gonna finish

44
00:02:54.510 --> 00:02:59.107
the assignment operation
we paused in the middle of.

45
00:02:59.107 --> 00:03:02.880
And so now last result is gonna be 35.

46
00:03:02.880 --> 00:03:07.521
So when I talk about it like a portal
imagine it like whatever we put into

47
00:03:07.521 --> 00:03:10.117
next is gonna come out of the left side of

48
00:03:10.117 --> 00:03:13.788
yield.
&gt;&gt; Mike North: And so

49
00:03:13.788 --> 00:03:18.995
that'll be the new value of this variable.
&gt;&gt; Mike North: And

50
00:03:18.995 --> 00:03:25.936
then we're going to.
&gt;&gt; Mike North: Print

51
00:03:25.936 --> 00:03:29.811
out last result as 35 because,
as we saw, we're gonna

52
00:03:29.811 --> 00:03:34.521
basically finish the assignment operation,
log the next line out.

53
00:03:34.521 --> 00:03:37.729
Turn around,
go through the y loop again, and

54
00:03:37.729 --> 00:03:42.761
then log out 35+5 is 40, and
now we're paused at the yield again.

55
00:03:42.761 --> 00:03:45.921
And so now we're gonna put 100 in and so

56
00:03:45.921 --> 00:03:49.544
that's what we're feeding
into last result.

57
00:03:49.544 --> 00:03:51.912
And then when we run this,
when we hit play,

58
00:03:51.912 --> 00:03:55.762
what's gonna happen?
&gt;&gt; Mike North: What's the next thing

59
00:03:55.762 --> 00:03:57.695
that's popping up on
the bottom right corner?

60
00:03:57.695 --> 00:03:59.007
&gt;&gt; Speaker 2: Last result equals 100.

61
00:03:59.007 --> 00:04:00.827
&gt;&gt; Mike North: Last result equals 100 and

62
00:04:00.827 --> 00:04:03.927
the new result is?
&gt;&gt; Speaker 2: 105.

63
00:04:03.927 --> 00:04:04.863
&gt;&gt; Mike North: 105.

64
00:04:07.054 --> 00:04:08.026
&gt;&gt; Mike North: It's a very,

65
00:04:08.026 --> 00:04:13.951
very new concept, but this starts to get
really, really, really powerful later on.

66
00:04:17.105 --> 00:04:19.613
&gt;&gt; Mike North: Any questions about this?

67
00:04:19.613 --> 00:04:23.881
I mean,
I had tons of questions about this.

68
00:04:23.881 --> 00:04:27.301
If your question is, why on earth
would I need to do things this way,

69
00:04:27.301 --> 00:04:32.166
Iâ€™m getting there.
&gt;&gt; Speaker 3: Is the generator

70
00:04:32.166 --> 00:04:36.390
stuff supported by a dabble polyfill or,
yeah, how?

71
00:04:36.390 --> 00:04:37.547
It is, okay.
&gt;&gt; Mike North: So

72
00:04:37.547 --> 00:04:41.748
the polyfill that is most popular.

73
00:04:41.748 --> 00:04:45.766
Well, first let me say
TypeScript has its own polyfill,

74
00:04:45.766 --> 00:04:49.878
TypeScript has its own support for
generator functions.

75
00:04:49.878 --> 00:04:56.205
Babel brings in a Facebook library
that is called Regenerator.

76
00:04:56.205 --> 00:05:00.640
Regenerator is the polyfill of choice for
this.

77
00:05:00.640 --> 00:05:05.174
Do you wanna see what it looks
like when we transpile a code?

78
00:05:05.174 --> 00:05:06.193
&gt;&gt; Speaker 3: Not really,

79
00:05:06.193 --> 00:05:10.372
[LAUGH] I'm assuming it's
really difficult to read.

80
00:05:10.372 --> 00:05:14.891
[LAUGH]
&gt;&gt; Mike North: Keep in mind the search

81
00:05:14.891 --> 00:05:22.244
maps work pretty well so don't panic.
&gt;&gt; Mike North: Okay.

82
00:05:27.319 --> 00:05:30.133
&gt;&gt; Mike North: We'll just do our simple

83
00:05:30.133 --> 00:05:37.511
one, let my grab the front end
masters snippet that we just made.

84
00:05:37.511 --> 00:05:45.375
So think of it like a closure
wrapped around a case switch where,

85
00:05:45.375 --> 00:05:49.892
essentially, we keep re-entering

86
00:05:49.892 --> 00:05:55.573
the same.
&gt;&gt; Mike North: Switch statement,

87
00:05:55.573 --> 00:06:00.557
but at a different case and
that represents different pieces

88
00:06:00.557 --> 00:06:04.963
of code between yields.
&gt;&gt; Speaker 4: So when Babel does its work,

89
00:06:04.963 --> 00:06:09.664
it's hard coding every possible case for
the sequence.

90
00:06:09.664 --> 00:06:12.607
I mean, it's literally-
&gt;&gt; Mike North: Only because this is a very

91
00:06:12.607 --> 00:06:14.730
literal generator function.

92
00:06:14.730 --> 00:06:21.037
What if I did this?
&gt;&gt; Mike North: Oop, that's gonna throw,

93
00:06:21.037 --> 00:06:25.642
now I've frozen that.
&gt;&gt; Group: [LAUGH]

94
00:06:25.642 --> 00:06:30.659
&gt;&gt; Mike North: This is why, no, no.

95
00:06:30.659 --> 00:06:34.642
So this is why having a direct
fill is sometimes dangerous here.

96
00:06:34.642 --> 00:06:38.239
Okay, I don't,
do not finish that URL for me.

97
00:06:38.239 --> 00:06:41.819
Whew, it's just storing
that in local storage here.

98
00:06:41.819 --> 00:06:44.976
So if we've got,

99
00:06:44.976 --> 00:06:49.815
let x equals one while false

100
00:06:49.815 --> 00:06:55.006
[LAUGH].
&gt;&gt; Mike North: Yield x++.

101
00:06:55.006 --> 00:06:57.933
So we'll agree that this x is changing,

102
00:06:57.933 --> 00:07:02.529
this is not every possible value.
&gt;&gt; Mike North: So

103
00:07:02.529 --> 00:07:07.675
what I just want you to see here is,
let's see,

104
00:07:07.675 --> 00:07:12.434
so we begin in case 0
with x is defined by 1,

105
00:07:12.434 --> 00:07:15.669
and then we fall into case 1.

106
00:07:15.669 --> 00:07:20.261
So this would be, basically,
case 0 is the entering case.

107
00:07:20.261 --> 00:07:22.076
That makes sense, right?

108
00:07:22.076 --> 00:07:26.862
And then we fall into case 1.
&gt;&gt; Mike North: This

109
00:07:26.862 --> 00:07:29.832
is our general situation for

110
00:07:29.832 --> 00:07:35.285
how y loops are transfiled
in generator functions.

111
00:07:35.285 --> 00:07:42.389
So this would be the condition where
true is false, think of it that way.

112
00:07:42.389 --> 00:07:45.420
It doesn't make sense right now
because true is never false, but

113
00:07:45.420 --> 00:07:47.303
imagine that this were a dynamic value.

114
00:07:47.303 --> 00:07:48.695
This is, basically,

115
00:07:48.695 --> 00:07:53.401
saying if in this situation that
the condition is no longer met we're done.

116
00:07:53.401 --> 00:07:59.564
So here is the other one that we're
interested in we're returning x++, right.

117
00:07:59.564 --> 00:08:03.742
And the next context is 4,
that, basically,

118
00:08:03.742 --> 00:08:09.598
sends us back into 1, and then x++,
and the next context is 4.

119
00:08:09.598 --> 00:08:13.461
And so the next time we call
the iterator we'll enter here and

120
00:08:13.461 --> 00:08:14.992
then we go back up here.

121
00:08:14.992 --> 00:08:20.867
So we're basically going from 4 to 1,
4 to 1, 4 to 1 and

122
00:08:20.867 --> 00:08:27.693
this is the way it looks like to have
this sequence of infinite length.

123
00:08:27.693 --> 00:08:31.984
If this all looks like tough to
understand code on the right side,

124
00:08:31.984 --> 00:08:33.557
don't worry about it.

125
00:08:33.557 --> 00:08:38.158
But I just want you to understand there's
reason to this and that this is a pretty

126
00:08:38.158 --> 00:08:41.045
ingenious way to do it.
&gt;&gt; Speaker 6: Its actually really clever.

127
00:08:41.045 --> 00:08:43.218
&gt;&gt; Mike North: It's super clever.

128
00:08:43.218 --> 00:08:45.497
It is ridiculously clever.

129
00:08:45.497 --> 00:08:50.849
So and source maps make it so
that you're still stepping through,

130
00:08:50.849 --> 00:08:56.788
you, basically, can do something
called black box the script, right.

131
00:08:56.788 --> 00:09:01.523
You can black box the Babel polyfill and
you'll end up just stepping through your

132
00:09:01.523 --> 00:09:05.783
generator function as we were in
the prompt snippet which is fantastic.

133
00:09:05.783 --> 00:09:07.309
&gt;&gt; Speaker 4: One quick question in chat,

134
00:09:07.309 --> 00:09:09.798
so it does not store
the previous next values?

135
00:09:09.798 --> 00:09:15.705
So the final one would be 145?
&gt;&gt; Mike North: The final one would be 140-

136
00:09:15.705 --> 00:09:17.536
&gt;&gt; Speaker 4: The final.

137
00:09:17.536 --> 00:09:18.338
&gt;&gt; Mike North: There's no final value in

138
00:09:18.338 --> 00:09:20.064
this situation.
&gt;&gt; Speaker 4: All right.

139
00:09:28.213 --> 00:09:28.751
&gt;&gt; Speaker 4: Yeah,

140
00:09:28.751 --> 00:09:31.805
you might have already covered it so.
&gt;&gt; Mike North: So

141
00:09:31.805 --> 00:09:36.469
it does not start,
that's four minutes ago, so maybe it was.

142
00:09:36.469 --> 00:09:38.787
Okay, so I think we were looking at this,

143
00:09:38.787 --> 00:09:43.077
there we go.
&gt;&gt; Mike North: So, let's see,

144
00:09:43.077 --> 00:09:47.804
it does not store
the previous next value so

145
00:09:47.804 --> 00:09:51.494
the final value would be 145.

146
00:09:51.494 --> 00:09:56.222
We could keep, because we have a while
true here, a yield inside a while true.

147
00:09:56.222 --> 00:10:01.961
There's nothing here,
Rob, that would make this

148
00:10:01.961 --> 00:10:07.303
sequence stop,
there's no final value here.

149
00:10:07.303 --> 00:10:09.614
One thing that is interesting though,

150
00:10:09.614 --> 00:10:13.745
as soon as we stop providing things
to next we're gonna end up with some

151
00:10:13.745 --> 00:10:17.918
unpredictable results.
&gt;&gt; Mike North: Well,

152
00:10:17.918 --> 00:10:22.099
actually it is predictable, but TypeScript
certainly wouldn't be happy with us.

153
00:10:22.099 --> 00:10:27.632
So if we've just called next here without
an argument that would be undefined,

154
00:10:27.632 --> 00:10:31.523
last result would be undefined,
undefined plus five.

155
00:10:31.523 --> 00:10:33.558
Let's see what JavaScript does for that.

156
00:10:33.558 --> 00:10:35.638
I have to actually check
cuz that's a weird one.

157
00:10:35.638 --> 00:10:39.146
&gt;&gt; Group: [LAUGH]

158
00:10:39.146 --> 00:10:40.235
&gt;&gt; Mike North: I'm taking bets.

159
00:10:42.119 --> 00:10:42.677
&gt;&gt; Speaker 2: Five.

160
00:10:42.677 --> 00:10:44.392
&gt;&gt; Mike North: Five?

161
00:10:44.392 --> 00:10:49.275
Yeah, so
things we would have to consider now we

162
00:10:49.275 --> 00:10:53.193
absolutely need to pass the value in.

163
00:10:53.193 --> 00:10:56.939
Good news is, we can define an iterator
that looks like that, right.

164
00:10:56.939 --> 00:11:01.201
With TypeScript we can say,
when you call next give me something.

165
00:11:01.201 --> 00:11:04.109
And now we could get
a compiler error if for

166
00:11:04.109 --> 00:11:08.526
that specific type of iterator we
fail to give it what it needs.

167
00:11:08.526 --> 00:11:10.786
So, hopefully,
that answers your question, Rob.

168
00:11:10.786 --> 00:11:15.521
There is no final value here and
we know that because we, basically,

169
00:11:15.521 --> 00:11:19.126
have a single yield that
is inside an infinite loop.

170
00:11:19.126 --> 00:11:24.231
Where we'll just, as often as you
call next, we will get whatever

171
00:11:24.231 --> 00:11:31.417
we're gonna get.
&gt;&gt; Mike North: Okay.

172
00:11:33.945 --> 00:11:35.132
&gt;&gt; Mike North: My fancy animations,

173
00:11:35.132 --> 00:11:39.792
we get a rerun.
&gt;&gt; Mike North: Okay, so

174
00:11:39.792 --> 00:11:43.518
we can define our own iterable.

175
00:11:43.518 --> 00:11:48.192
Sorry, there we go.
&gt;&gt; Mike North: And

176
00:11:48.192 --> 00:11:55.315
now because a generator
function returns an iterator.

177
00:11:55.315 --> 00:11:57.970
Before we had to do some backflips, right.

178
00:11:57.970 --> 00:12:02.157
Before our defining,
our own iterable looked like this.

179
00:12:04.090 --> 00:12:06.634
&gt;&gt; Mike North: Where we had to say,

180
00:12:06.634 --> 00:12:13.981
we're returning an object that
has a next function on it.

181
00:12:13.981 --> 00:12:17.867
We actually had to really explicitly
define what our iterator looks like.

182
00:12:17.867 --> 00:12:22.794
When we go back to our generator function
case because the generator function,

183
00:12:22.794 --> 00:12:26.927
the value it returns is an iterable,
this looks much cleaner now.

184
00:12:26.927 --> 00:12:31.035
This is much more reasonable,
where we can yield things one by one.

185
00:12:31.035 --> 00:12:34.274
We yield M, I, K,
E if we use the for, of loop and

186
00:12:34.274 --> 00:12:39.187
we get this.
&gt;&gt; Mike North: So now, like I told you,

187
00:12:39.187 --> 00:12:43.303
we were going in the weeds, things look
way more difficult than they need be.

188
00:12:43.303 --> 00:12:47.669
But now we're starting to see, hey,
this is the way it's meant to be done.

189
00:12:47.669 --> 00:12:52.266
This makes a lot more sense,
this is code that's not tangled up

190
00:12:52.266 --> 00:12:57.499
spaghetti.
&gt;&gt; Mike North: And let's

191
00:12:57.499 --> 00:13:03.259
say that we were trying to yield something
that is in and of itself, iterable, right.

192
00:13:03.259 --> 00:13:08.031
I told you arrays, we can already
pull an iterator off of an array,

193
00:13:08.031 --> 00:13:09.747
we demonstrated that.

194
00:13:09.747 --> 00:13:12.669
Strings are like arrays in many ways,
right.

195
00:13:12.669 --> 00:13:17.080
We can use bracket notation to get
an individual character out of a string.

196
00:13:17.080 --> 00:13:18.374
They have a length.

197
00:13:18.374 --> 00:13:23.580
So we can use this syntax yield* and,
basically, you're saying when

198
00:13:23.580 --> 00:13:28.464
you say yield* you're gonna get
the same result as we did before.

199
00:13:28.464 --> 00:13:35.318
In the essence we're saying,
I'm going to give you an iterable and

200
00:13:35.318 --> 00:13:41.931
yield this iterable out one by one by one.
&gt;&gt; Mike North: So

201
00:13:41.931 --> 00:13:45.764
if we were to make this
a little more meaningful,

202
00:13:45.764 --> 00:13:48.663
imagine we had a sequence like this.

203
00:13:48.663 --> 00:13:52.793
Where we have a couple things that
are iterable in and of themselves and

204
00:13:52.793 --> 00:13:56.506
we're sort of stitching together
a few different sequences.

205
00:13:56.506 --> 00:13:59.819
In this case we're gonna just see 1,
2, 3, 4, 5, 6.

206
00:13:59.819 --> 00:14:06.364
Because we're saying first, I've got this
array, one by one yield these values out.

207
00:14:06.364 --> 00:14:08.512
And then here's a single value,
yield that out.

208
00:14:08.512 --> 00:14:15.988
And then finish with these things here.
&gt;&gt; Mike North: This

209
00:14:15.988 --> 00:14:18.694
is super cool stuff,
I get really excited talking about

210
00:14:18.694 --> 00:14:25.272
this.
&gt;&gt; Mike North: This

211
00:14:25.272 --> 00:14:31.005
opens up new possibilities for
a clean easy to understand implementations

212
00:14:31.005 --> 00:14:36.470
of things that previously were really,
really hard and really messy.

