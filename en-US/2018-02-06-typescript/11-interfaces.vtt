WEBVTT

1
00:00:00.730 --> 00:00:04.870
&gt;&gt; Mike North: So some of you
may have run into an interesting

2
00:00:04.870 --> 00:00:08.420
additional constraint that we deal with
when we are working with Typescript and

3
00:00:08.420 --> 00:00:10.880
that is, excess property checking..

4
00:00:11.990 --> 00:00:16.045
So when we are working with object literal
the type checking is a little more strict

5
00:00:16.045 --> 00:00:21.340
than when we pass things
into functions for example.

6
00:00:21.340 --> 00:00:24.160
If we define a variable called myCar and

7
00:00:24.160 --> 00:00:28.080
we say that its type is that it
has a make, model, and year.

8
00:00:28.080 --> 00:00:32.320
And then we try to give that
variable a value, right, so

9
00:00:32.320 --> 00:00:36.740
the top is just the declaration,
the bottom is the assignment.

10
00:00:37.990 --> 00:00:42.160
We're gonna get an error
saying that the type, and

11
00:00:42.160 --> 00:00:44.970
then it will describe the value
we just tried to assign,

12
00:00:44.970 --> 00:00:50.430
is not compatible with the type
that we used when we declared this.

13
00:00:50.430 --> 00:00:51.920
It's not assignable to that type.

14
00:00:53.530 --> 00:00:58.530
So normally you would say,
it seems like we've said that

15
00:00:58.530 --> 00:01:01.650
excess properties are fine when
we pass them into functions.

16
00:01:01.650 --> 00:01:04.050
And the reason is that when
you have object literals,

17
00:01:04.050 --> 00:01:08.770
you can only specify their
properties that are known.

18
00:01:08.770 --> 00:01:14.790
And this is one of the great strengths
when we deal with things like React,

19
00:01:14.790 --> 00:01:17.109
where it saves us from things like typos.

20
00:01:18.470 --> 00:01:20.490
Where even if we have
optional properties and

21
00:01:20.490 --> 00:01:22.670
we'll look at how those are represented,.

22
00:01:23.740 --> 00:01:27.240
We still have to define upfront
the set of things that are allowed and

23
00:01:27.240 --> 00:01:30.240
expected when we're working
with object literals.

24
00:01:30.240 --> 00:01:34.460
This helps us make sure that we're
creating, when we say this is an object of

25
00:01:34.460 --> 00:01:38.140
a particular shape we wanna create
something that aligns with that shape.

26
00:01:38.140 --> 00:01:41.060
We could have fixed this
in a couple of ways,

27
00:01:41.060 --> 00:01:43.570
one is we haven't learned
how to do it yet, but

28
00:01:43.570 --> 00:01:48.040
we could have figured out a way to make
color an optional property on this type.

29
00:01:50.200 --> 00:01:56.590
There's another way though and we could
have done it via what's called casting.

30
00:01:56.590 --> 00:01:57.970
Well, we already talked about casting.

31
00:01:57.970 --> 00:02:05.072
Well, we could say I'm gonna
initialize myCar with this value as and

32
00:02:05.072 --> 00:02:09.510
state the structure that it expects.

33
00:02:09.510 --> 00:02:14.110
This would allow it to
have that value there.

34
00:02:14.110 --> 00:02:19.640
But whatever is like treating it as
the above type here that is lacking color,

35
00:02:19.640 --> 00:02:23.350
that will not be able to access that color
property without getting a complaint from

36
00:02:23.350 --> 00:02:25.460
the Typescript compiler, right?

37
00:02:25.460 --> 00:02:28.350
So if you say, I take an object
of the following structure,

38
00:02:28.350 --> 00:02:33.880
you're not allowed to reach in there and
grab any arbitrary property off of it.

39
00:02:33.880 --> 00:02:38.800
Because you're saying, I want a guarantee,
give me a compile time guarantee

40
00:02:38.800 --> 00:02:41.530
that the object I'm gonna get
looks like the following, and

41
00:02:41.530 --> 00:02:43.399
you have to operate
within those constraints.

42
00:02:45.930 --> 00:02:48.850
So if we wanted to do
something like that and

43
00:02:48.850 --> 00:02:51.220
let's say we had multiple cars involved.

44
00:02:51.220 --> 00:02:55.380
We could write something like this and
you can see it's starting to get really

45
00:02:55.380 --> 00:03:00.760
verbose and repetitive and
we're bound to make a typo somewhere and

46
00:03:00.760 --> 00:03:05.490
if we had to add a property to this shape.

47
00:03:05.490 --> 00:03:07.960
We'd have to add it in a bunch of places.

48
00:03:07.960 --> 00:03:12.000
So this is where something is coming
along to address this pain, and

49
00:03:12.000 --> 00:03:13.930
it's called interfaces.

50
00:03:13.930 --> 00:03:18.840
We can define an interface,
which it is simply a shape of an object.

51
00:03:18.840 --> 00:03:23.180
Names of properties, types that
the values of those properties can have.

52
00:03:24.250 --> 00:03:29.100
And we can refer to it by name and so
the same code will look kinda like this.

53
00:03:29.100 --> 00:03:30.100
Where we can say okay,

54
00:03:30.100 --> 00:03:33.720
I've got this conceptually
I've got a concept of the car.

55
00:03:33.720 --> 00:03:36.964
And it's gotta make which is a string,
a model which a string,

56
00:03:36.964 --> 00:03:38.610
a year which is a number.

57
00:03:38.610 --> 00:03:41.920
And now we can use Car where we
were using that structure before,

58
00:03:41.920 --> 00:03:43.950
we can go around and replace it.

59
00:03:43.950 --> 00:03:48.026
This is great because now if we
wanted to alter Car we've got it one

60
00:03:48.026 --> 00:03:51.611
place.
&gt;&gt; Mike North: So

61
00:03:51.611 --> 00:03:55.458
interfaces just are,
they just have structure,

62
00:03:55.458 --> 00:04:00.300
if you are used to Java this is
the same as a Java interface.

63
00:04:00.300 --> 00:04:05.840
If you are used to a C-type language,
this is a pure abstract class,

64
00:04:05.840 --> 00:04:08.220
where it has zero implementation.

65
00:04:08.220 --> 00:04:13.680
It describes what an object looks like.

66
00:04:13.680 --> 00:04:15.080
It describes its shape alone.

67
00:04:16.580 --> 00:04:18.460
These don't compile to
any JavaScript code,

68
00:04:18.460 --> 00:04:24.350
at all and this allows for
much easier refactoring later.

69
00:04:24.350 --> 00:04:28.600
So by default, interfaces are open,
meaning that even if we define three

70
00:04:28.600 --> 00:04:33.910
properties on Car, we could then go back
and add another property to it later on.

71
00:04:35.050 --> 00:04:39.313
And then, that property would be fair game
to use across all things that declared

72
00:04:39.313 --> 00:04:46.348
themselves to be that type.
&gt;&gt; Mike North: Interfaces are sort of for

73
00:04:46.348 --> 00:04:48.822
the compiler only, for
the Typescript compiler any,

74
00:04:48.822 --> 00:04:51.460
they don't compile to any JavaScript code.

75
00:04:51.460 --> 00:04:55.410
And they can be exported just like
we were exporting functions and

76
00:04:55.410 --> 00:04:57.350
consumed in other modules.

77
00:04:57.350 --> 00:04:59.525
Yes?
&gt;&gt; Speaker 2: What would be the different

78
00:04:59.525 --> 00:05:03.430
use cases for an interface versus a class
where you'd actually instatiate an object

79
00:05:03.430 --> 00:05:06.303
on that class?
&gt;&gt; Mike North: Good question, use case for

80
00:05:06.303 --> 00:05:08.369
interface versus a class.

81
00:05:08.369 --> 00:05:13.276
So when you define that's a class
you're kind of limited in

82
00:05:13.276 --> 00:05:17.740
terms of how you can mix and
match that behavior.

83
00:05:17.740 --> 00:05:26.290
So, for example, if I were to say, I wanna
describe things that have a length and

84
00:05:26.290 --> 00:05:32.240
where I can use bracket notation to
access an individual item in that thing.

85
00:05:32.240 --> 00:05:37.520
So that describes both a string and
an array, right?

86
00:05:37.520 --> 00:05:41.400
I can say string bracket zero,
or I can say array bracket zero.

87
00:05:41.400 --> 00:05:44.070
In order for me to be able to say,
I'm a function and

88
00:05:44.070 --> 00:05:48.610
I wish to take as an argument,
something that meets that criteria.

89
00:05:48.610 --> 00:05:52.690
If I were to express that in terms of
a class, I'd have to kind of go around and

90
00:05:54.950 --> 00:05:58.440
insert that as a super class of some
of those different types of objects.

91
00:05:58.440 --> 00:06:04.230
So that's where we would get basically
into a nominal-type system there.

92
00:06:04.230 --> 00:06:07.480
Their complexities run
multiple inheritance,

93
00:06:07.480 --> 00:06:11.900
which we cannot use in JavaScript
with JavaScript classes.

94
00:06:11.900 --> 00:06:14.860
But you can implement any
number of interfaces you want.

95
00:06:14.860 --> 00:06:17.960
So we'll see as we learn
to use these interfaces.

96
00:06:17.960 --> 00:06:22.000
Particularly when describing arguments
that functions want to receive.

97
00:06:22.000 --> 00:06:28.180
You wanna sort of describe only what you
need and that may be a interface that

98
00:06:30.910 --> 00:06:35.740
it is not expressly implemented by
whatever it is being passed into you.

99
00:06:35.740 --> 00:06:39.170
It just is a description of shape, right?

100
00:06:39.170 --> 00:06:42.490
When you say,
I'm a function and I take this,

101
00:06:42.490 --> 00:06:46.736
you don't wanna talk about what is
your parent class and give this to me.

102
00:06:46.736 --> 00:06:49.800
You more wanna say, I expect you to
have the following properties and

103
00:06:49.800 --> 00:06:52.050
I am going to treat them as
having the following values.

104
00:06:52.050 --> 00:06:57.390
And when you state that up front now
TypeScript will yell at you if you ever

105
00:06:57.390 --> 00:07:02.200
break that convention as we
all are likely to do, right?

106
00:07:02.200 --> 00:07:04.610
If you pass the wrong variable in,
it'll let you know.

