WEBVTT

1
00:00:00.180 --> 00:00:03.210
&gt;&gt; Mike North: When we talk about
how we can store values and

2
00:00:03.210 --> 00:00:05.090
use them in our programs,
we need variables, and

3
00:00:05.090 --> 00:00:08.870
there are three different ways to declare
variables in a modern JavaScript program.

4
00:00:08.870 --> 00:00:11.700
We've got var, let and const.

5
00:00:13.250 --> 00:00:19.520
So with var declarations,
there is a phenomenon called hoisting, and

6
00:00:19.520 --> 00:00:23.910
that basically means that even if
we declare a variable low down,

7
00:00:23.910 --> 00:00:28.760
and they function scope or
within a block inside a function scope.

8
00:00:28.760 --> 00:00:31.180
That variable declaration is hoisted,

9
00:00:31.180 --> 00:00:36.260
it's brought up to the top of whatever
function scope it belongs to.

10
00:00:36.260 --> 00:00:40.310
So, even if this were inside an if which
will see I think on the next slide,

11
00:00:40.310 --> 00:00:41.800
it gets brought up.

12
00:00:41.800 --> 00:00:44.970
We have, so
the convention here is on the left.

13
00:00:44.970 --> 00:00:47.960
We've got code that you write in your app.

14
00:00:47.960 --> 00:00:51.940
And on the right,
this is a code that the browser sees,

15
00:00:51.940 --> 00:00:53.600
that's why we've put it in the browser.

16
00:00:53.600 --> 00:00:56.910
This is how a run-time understands it.

17
00:00:56.910 --> 00:00:59.860
This why we have a bunch of linting,
like static analysis,

18
00:00:59.860 --> 00:01:04.710
rules that will say, please make
sure that you declare your variables

19
00:01:04.710 --> 00:01:06.320
at the top of your function scope.

20
00:01:06.320 --> 00:01:10.600
We've basically said, make sure your code
looks like what we have on the right, so

21
00:01:10.600 --> 00:01:13.630
there's no misalignment between left and
right.

22
00:01:13.630 --> 00:01:19.032
So we've solved this by basically
conforming to the way the language or

23
00:01:19.032 --> 00:01:20.929
the way runtime thinks.

24
00:01:22.170 --> 00:01:26.220
And bent our code to meet that,
so there's no miss alignment.

25
00:01:28.010 --> 00:01:32.880
Var declarations are not block scoped,
meaning that this

26
00:01:32.880 --> 00:01:37.660
y that we have here,
that's actually gonna have the value even

27
00:01:37.660 --> 00:01:43.340
outside of the condition that it is
used in, that it is set in, right?

28
00:01:43.340 --> 00:01:47.530
So this can lead to some strange problems
where sometimes we'll pass through

29
00:01:47.530 --> 00:01:50.040
a particular block and sometimes we won't.

30
00:01:50.040 --> 00:01:56.760
And you can end up with side effects
that linger on in ways you don't expect.

31
00:01:56.760 --> 00:01:58.970
So they are function scoped,
not block scoped.

32
00:02:01.510 --> 00:02:04.360
And this is unintuitive for
a lot of developers, like most.

33
00:02:04.360 --> 00:02:07.438
If you're coming to JavaScript
from another language,

34
00:02:07.438 --> 00:02:10.963
you would expect y to only have
any meaning, or significance, or

35
00:02:10.963 --> 00:02:17.010
value within that condition.
&gt;&gt; Mike North: With

36
00:02:17.010 --> 00:02:21.240
the 2015 version of the JavaScript
language spec we got let.

37
00:02:22.320 --> 00:02:28.250
Let declarations are not hoisted,
and there are some tricks that

38
00:02:29.290 --> 00:02:33.970
compilers and transpilers like Babel or
Typescripts do to enforce this for

39
00:02:33.970 --> 00:02:38.260
us even we're building Javascript for
IE6, right?

40
00:02:38.260 --> 00:02:41.920
Even if we're building
really like old Javascript.

41
00:02:41.920 --> 00:02:45.460
We accomplish this by creating what's
called the Temporal Dead Zone,

42
00:02:45.460 --> 00:02:50.140
it is a fancy term for
basically renaming variables so

43
00:02:50.140 --> 00:02:56.500
that we can be assured, x will have
no meaning before that line of code.

44
00:02:58.430 --> 00:03:02.820
In a moment we'll show you how this is
converted and how we accomplished this.

45
00:03:02.820 --> 00:03:08.840
The end result is, in this situation,
we're trying to use x before it's defined

46
00:03:08.840 --> 00:03:14.630
and we get an error instead of, but
we would've gotten where there's a var or

47
00:03:14.630 --> 00:03:19.040
you would've seen the value undefined,
long to the console, right?

48
00:03:23.120 --> 00:03:26.910
So let decorations are block scopes,
meaning down here we're also going to get

49
00:03:26.910 --> 00:03:29.390
a similar error because
we're trying to use y.

50
00:03:29.390 --> 00:03:32.961
Y has no meaning outside of the block
that's attached to that condition.

51
00:03:36.106 --> 00:03:38.697
&gt;&gt; Mike North: Const behave similarly,

52
00:03:38.697 --> 00:03:46.030
it behaves in terms of scope and
hoisting, it behaves very much like let.

53
00:03:46.030 --> 00:03:51.240
The twist here is that once you assign,
like once you

54
00:03:51.240 --> 00:03:57.300
set a value to a variable that's declared
with const, you cannot reassign it, right?

55
00:03:57.300 --> 00:04:02.300
So if you say const x equals 15,
you can't point x to anything else.

56
00:04:03.830 --> 00:04:08.770
It's important to understand that when
we talk about not being able to change

57
00:04:08.770 --> 00:04:14.180
things, the ability to re-assign
something is a separate

58
00:04:14.180 --> 00:04:19.080
Idea from whether the value of
something is mutable or immutable.

59
00:04:20.230 --> 00:04:22.320
Does that make sense to everyone?

60
00:04:22.320 --> 00:04:23.990
So for example, if we have,

61
00:04:23.990 --> 00:04:28.460
we talked about how a string, that's
an immutable value type in JavaScript.

62
00:04:28.460 --> 00:04:32.860
We can't change a string if we split a
string, we're really creating new strings.

63
00:04:32.860 --> 00:04:36.430
So if we say, const x equals Mike,

64
00:04:38.010 --> 00:04:42.420
that's an immutable string value,
and we can't point

65
00:04:42.420 --> 00:04:46.450
X to anything other than the string
that we pointed to in the first place.

66
00:04:46.450 --> 00:04:49.831
Now if we havd something like an object or
an array,

67
00:04:49.831 --> 00:04:54.460
we can't point to a different object
to an array, but we can certainly

68
00:04:54.460 --> 00:04:58.710
change the contents of that object to
an array, we'll see more of this later on.

69
00:05:00.190 --> 00:05:06.720
If you want to have something that
is like both not reassignable

70
00:05:06.720 --> 00:05:11.670
and the value is not changeable,
you can use something like object.freeze.

71
00:05:11.670 --> 00:05:15.940
What that does is effectively it
will return a copy of an object

72
00:05:15.940 --> 00:05:18.820
that is sort of locked in place.

73
00:05:18.820 --> 00:05:23.570
You can't add any new properties to it and
you can't change any existing properties.

74
00:05:23.570 --> 00:05:26.560
So if you've ever heard of
something like immutable js,

75
00:05:26.560 --> 00:05:30.290
this is gonna give you
something akin to that, right?

76
00:05:30.290 --> 00:05:33.410
It will give you for
example a read-only array, and

77
00:05:33.410 --> 00:05:36.190
there now you're both immutable and
constant.

78
00:05:38.010 --> 00:05:43.390
So in summary,
we can think of our declaration,

79
00:05:43.390 --> 00:05:49.410
ability to declare things as
having 3-dimensions here.

80
00:05:49.410 --> 00:05:53.890
Everything except const can be reassigned,
so if you have let x = 17,

81
00:05:53.890 --> 00:05:57.260
you can set x equals to other things,
same with the var.

82
00:05:58.540 --> 00:06:00.660
Const, you cannot do that with.

83
00:06:00.660 --> 00:06:03.050
Var is function scope, right?

84
00:06:03.050 --> 00:06:05.260
That's the one that gets,

85
00:06:05.260 --> 00:06:10.680
that'll sort of bleed out of
the blocks where they're defined in.

86
00:06:10.680 --> 00:06:14.650
Whereas let and const, they're the ones
that'll throw those errors if we try to

87
00:06:14.650 --> 00:06:16.320
use them outside the block
where they're defined.

88
00:06:16.320 --> 00:06:21.380
And then finally there's that strange
hoisting phenomenon that happens with Var,

89
00:06:21.380 --> 00:06:23.519
and that does not happen with let and

90
00:06:23.519 --> 00:06:28.602
const.
&gt;&gt; Mike North: So

91
00:06:28.602 --> 00:06:31.831
most of the day today, we're gonna
be working with let and const, but

92
00:06:31.831 --> 00:06:35.050
I do want you to understand how
var works because you may see it.

93
00:06:35.050 --> 00:06:40.980
And what we try to do Is the use
of var if we must use it,

94
00:06:40.980 --> 00:06:45.450
we use it in ways where it aligns with

95
00:06:45.450 --> 00:06:49.300
like basically our code shows
it is already hoisted, right?

96
00:06:49.300 --> 00:06:52.565
Our variable declarations are always
at the top of our function scope.

