WEBVTT

1
00:00:00.400 --> 00:00:03.064
&gt;&gt; Mike North: With that,
I wanna sort of set the stage and

2
00:00:03.064 --> 00:00:05.359
talk about JavaScript for a moment.

3
00:00:05.359 --> 00:00:07.879
Just so we know what we're starting with,

4
00:00:07.879 --> 00:00:11.105
because this TypeScript is
a superset of JavaScript.

5
00:00:11.105 --> 00:00:13.795
We should know kinda
what we're dealing with,

6
00:00:13.795 --> 00:00:16.762
at least as it pertains to typing and
how types work.

7
00:00:16.762 --> 00:00:20.411
So we have a set of primitive values,

8
00:00:20.411 --> 00:00:26.437
we define primitive values as
things that aren't objects.

9
00:00:26.437 --> 00:00:31.925
Things that don't have any methods,
and we've got six primitive types.

10
00:00:31.925 --> 00:00:36.420
Five you're used to seeing and
a new one that came with the 2015

11
00:00:36.420 --> 00:00:41.086
version of the JavaScript language
standard, it is called symbol.

12
00:00:41.086 --> 00:00:45.443
We'll learn a little bit about
specific uses of symbol later.

13
00:00:45.443 --> 00:00:50.904
Just know that it is something where the
name of the symbol is equal to its value.

14
00:00:50.904 --> 00:00:57.075
So, think of it like you can
kinda treat them like strings.

15
00:00:57.075 --> 00:01:01.593
Imagine if it's like a string where
variable name in this string the contents

16
00:01:01.593 --> 00:01:03.689
of the string had to match, right.

17
00:01:05.913 --> 00:01:09.273
&gt;&gt; Mike North: Everything else in
the language extends from Object,

18
00:01:09.273 --> 00:01:11.691
an array extends from Object, right.

19
00:01:11.691 --> 00:01:19.460
And that Object, we'll see later
that that is sort of the basis for

20
00:01:19.460 --> 00:01:25.306
mutable values,
everything else is immutable.

21
00:01:25.306 --> 00:01:31.797
So when necessary these primitive types
are wrapped in a more rich object.

22
00:01:31.797 --> 00:01:35.830
And you'll recognize these richer
objects because they start

23
00:01:35.830 --> 00:01:39.415
with a capital letter instead
of the lower case letter.

24
00:01:39.415 --> 00:01:44.215
We can see the effect of this if we
have something like this where we

25
00:01:44.215 --> 00:01:47.551
say the variable x has
a value of JavaScript.

26
00:01:47.551 --> 00:01:51.354
And then we log out the type of x,
and then we create a variable y,

27
00:01:51.354 --> 00:01:54.037
we use the string constructor here, right.

28
00:01:54.037 --> 00:01:58.929
Capital S,
we're not witnessing autoboxing here,

29
00:01:58.929 --> 00:02:05.572
we're directly opting into the richer
type via using the constructor.

30
00:02:05.572 --> 00:02:08.742
The output we'll end up seeing is this,
right, so

31
00:02:08.742 --> 00:02:11.263
clearly these are not exactly the same.

32
00:02:11.263 --> 00:02:17.992
Now if we were to compare these two,
they would be different in this case.

33
00:02:17.992 --> 00:02:22.492
So what we're gonna do is we
can look at the fact that it's,

34
00:02:22.492 --> 00:02:26.367
that this idea of Carries
over to Booleans as well.

35
00:02:29.378 --> 00:02:32.726
&gt;&gt; Mike North: I showed this to you so
you'd know the difference between

36
00:02:32.726 --> 00:02:35.456
lowercase s string, and
uppercase S string.

37
00:02:35.456 --> 00:02:41.402
And the fact that we can say these have
no methods, but they're sort of promoted

38
00:02:41.402 --> 00:02:47.198
automatically into things that have
methods, like as soon as you need them.

39
00:02:47.198 --> 00:02:50.096
So most of the time this
doesn't matter to us, but

40
00:02:50.096 --> 00:02:53.753
you just need to know that
the primitive types, like a string,

41
00:02:53.753 --> 00:02:56.654
a number, a Boolean,
these values are mutable.

42
00:02:56.654 --> 00:03:01.744
Meaning when we split a string,
we are not mutating that

43
00:03:01.744 --> 00:03:06.961
string in place,
we're creating new strings, right.

44
00:03:10.608 --> 00:03:13.484
&gt;&gt; Mike North: Never,
well I'm not gonna say never but

45
00:03:13.484 --> 00:03:19.421
it is nearly always incorrect to refer to
the boxed variant of the primitive types.

46
00:03:19.421 --> 00:03:23.056
So when we start getting into
things like type annotations,

47
00:03:23.056 --> 00:03:26.278
just make sure it gonna look for
a lowercase s string.

48
00:03:26.278 --> 00:03:28.639
And call me out if you see
something on the slides.

49
00:03:28.639 --> 00:03:33.479
I hope that I have wrestled
the auto-capitalization of QNote

50
00:03:33.479 --> 00:03:35.349
back into submission.

51
00:03:35.349 --> 00:03:39.680
But just know the differences
between those.

