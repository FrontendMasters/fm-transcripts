WEBVTT

1
00:00:00.020 --> 00:00:02.920
&gt;&gt; Mike North: The fourth
step of autocomplete.

2
00:00:02.920 --> 00:00:05.842
So we have a new file that
has entered the picture here.

3
00:00:05.842 --> 00:00:10.891
The autocomplete file is still there from
the last one that we just worked on,

4
00:00:10.891 --> 00:00:14.398
what's been added is a new
file called the task.ts.

5
00:00:14.398 --> 00:00:18.614
It takes a generator
function as an argument.

6
00:00:18.614 --> 00:00:23.630
And then the job of this
task.js is to allow the yield

7
00:00:23.630 --> 00:00:28.646
within the generator function
that is passed to this

8
00:00:28.646 --> 00:00:34.930
task thing to behave exactly as
await would in an async function.

9
00:00:34.930 --> 00:00:39.210
Tasks should return a promise that
resolves to the last value yielded or

10
00:00:39.210 --> 00:00:41.760
the value returned by
the generator function.

11
00:00:41.760 --> 00:00:48.830
So let me show you how things have
slightly changed in the autocomplete file.

12
00:00:48.830 --> 00:00:51.410
I've kind of lead us right up
to an interesting point here.

13
00:00:59.959 --> 00:01:05.014
&gt;&gt; Mike North: So if we say,
&gt;&gt; Mike North: Diff

14
00:01:05.014 --> 00:01:09.606
exercises autocomplete

15
00:01:09.606 --> 00:01:16.350
4,
&gt;&gt; Mike North: Diffing

16
00:01:16.350 --> 00:01:20.650
the one we have now
against the previous one.

17
00:01:27.174 --> 00:01:28.917
&gt;&gt; Mike North: It's not gonna
show me a nice inline diff.

18
00:01:28.917 --> 00:01:29.925
Can I do this?

19
00:01:32.311 --> 00:01:37.400
&gt;&gt; Mike North: Nope,
&gt;&gt; Mike North: Well,

20
00:01:37.400 --> 00:01:41.208
okay, we'll just do it this way.

21
00:01:49.703 --> 00:01:53.180
&gt;&gt; Mike North: I assumed that that
would work, and now it's not, so well.

22
00:01:54.810 --> 00:01:55.510
We'll just toggle.

23
00:01:57.060 --> 00:02:00.350
So this is the one we
were just working with.

24
00:02:00.350 --> 00:02:03.690
Scroll all the way to the top,
scrolled all the way to the top.

25
00:02:03.690 --> 00:02:05.080
And we'll compress this.

26
00:02:05.080 --> 00:02:11.350
So we've got await fetchPlaceSumaries,
await fetchPlaceDetials.

27
00:02:11.350 --> 00:02:14.760
What has changed here, and
note it's an async function.

28
00:02:14.760 --> 00:02:19.487
In this exercise we're doing right now,
it is an async

29
00:02:19.487 --> 00:02:24.880
function that returns a generator

30
00:02:24.880 --> 00:02:30.190
function that has passed into this task
thing, which is our job to define.

31
00:02:30.190 --> 00:02:35.644
So we don't have awaits here,
we have yields, we have yields.

32
00:02:35.644 --> 00:02:39.680
Now, this still pauses execution,
we've seen how yield works.

33
00:02:39.680 --> 00:02:44.590
We've seen that as we pull things
off of an iterator, we get a value,

34
00:02:44.590 --> 00:02:47.970
and then we can push something into
the next function onto the iterator,

35
00:02:47.970 --> 00:02:50.166
and that will completely assignment here.

36
00:02:50.166 --> 00:02:55.510
So at its core, what we're gonna
do is in this task function,

37
00:02:55.510 --> 00:02:58.260
we're going to be passed
a generator function.

38
00:03:00.420 --> 00:03:02.880
This is your generator function
that you're gonna get.

39
00:03:02.880 --> 00:03:07.303
You're gonna grab an iterator, and
what you're gonna pull off of this

40
00:03:07.303 --> 00:03:11.889
iterator when you call iterator.next,
you're going to get what type?

41
00:03:11.889 --> 00:03:12.780
&gt;&gt; Speaker 2: Promise.

42
00:03:12.780 --> 00:03:15.520
&gt;&gt; Mike North: A promise,
you're gonna get a promise.

43
00:03:15.520 --> 00:03:20.100
When that promise resolves, you're gonna
pull the next promise off the iterator and

44
00:03:20.100 --> 00:03:23.739
push the result of the previous
one in to complete the assignment.

45
00:03:25.200 --> 00:03:30.030
So I just wanna direct you back to
this exercise we looked at here,

46
00:03:31.580 --> 00:03:36.770
sorry, right here, this one.

47
00:03:36.770 --> 00:03:38.950
So remember this iterator.

48
00:03:38.950 --> 00:03:41.360
This would be, if instead of numbers,

49
00:03:41.360 --> 00:03:45.610
let's imagine that these are promises
that we're yielding out, right?

50
00:03:45.610 --> 00:03:49.600
So we get the number 5, but
imagine that's a promise.

51
00:03:49.600 --> 00:03:54.130
And instead of in the next line of code,
calling it.next,

52
00:03:54.130 --> 00:03:57.550
imagine we waited for
that promise to first resolve.

53
00:03:57.550 --> 00:04:00.940
Once it resolves, we have the value
that that promise resolves to.

54
00:04:00.940 --> 00:04:05.400
And instead of pushing 35 in,
we can push in that resolved value.

55
00:04:05.400 --> 00:04:08.870
And that is going to complete
this assignment operation, right?

56
00:04:08.870 --> 00:04:10.880
So on the left side of yield,

57
00:04:10.880 --> 00:04:14.650
whatever that is, now we can write
that almost as synchronous code.

58
00:04:14.650 --> 00:04:18.130
We can say yield a promise,
and when we come back and

59
00:04:18.130 --> 00:04:22.650
resume execution, I will have
whatever you resolve to, right?

60
00:04:22.650 --> 00:04:26.080
So you're gonna do this over and over
again, and walk through the whole promise

61
00:04:26.080 --> 00:04:29.340
chain, until your iterator
indicates that you're done.

62
00:04:29.340 --> 00:04:34.270
And just remember whatever the last result
is that you yielded, and basically,

63
00:04:34.270 --> 00:04:38.370
this will create something that
is exactly like async await.

64
00:04:38.370 --> 00:04:42.232
It'll work just the same way.

65
00:04:42.232 --> 00:04:45.216
&gt;&gt; Speaker 3: It'll be like chained,
right?

66
00:04:45.216 --> 00:04:46.336
&gt;&gt; Mike North: What will be chained?

67
00:04:46.336 --> 00:04:47.872
&gt;&gt; Speaker 3: The awaits?

68
00:04:47.872 --> 00:04:53.246
&gt;&gt; Mike North: The awaits, so awaits,
the behavior we're describing here,

69
00:04:53.246 --> 00:04:57.430
await makes this work
right out of the box.

70
00:04:57.430 --> 00:05:00.920
But I just want you to note if
we look at it side by side,

71
00:05:00.920 --> 00:05:04.060
let me get rid of this temporarily.

72
00:05:04.060 --> 00:05:09.316
If we look at autocomplete from
the last exercise on the left and

73
00:05:09.316 --> 00:05:14.276
from this exercise on the right,
note that they're very,

74
00:05:14.276 --> 00:05:19.332
let me delete the excess type
annotations like I did before,

75
00:05:19.332 --> 00:05:22.126
just to line it up really nicely.

76
00:05:22.126 --> 00:05:24.270
This is pretty lined up here.

77
00:05:24.270 --> 00:05:29.040
So note we've got fetchPlaceSummaries
on this line here, right?

78
00:05:29.040 --> 00:05:33.442
Both sides, fetchPlaceSummaries, the only
difference is we have a yield, and

79
00:05:33.442 --> 00:05:37.667
then it's the same log and then the next
is the map operation and then a yield.

80
00:05:37.667 --> 00:05:43.798
So the body of this generator function
allows up to use a yield in the exact

81
00:05:43.798 --> 00:05:49.170
same way that we were able to
use await in the last exercise.

82
00:05:49.170 --> 00:05:52.580
And that's what let us write something
that under the hood is really a promise

83
00:05:52.580 --> 00:05:55.510
chain as if it's synchronous code.

84
00:05:55.510 --> 00:05:58.250
So we're gonna use this,
we're gonna build this task function,

85
00:05:58.250 --> 00:06:03.044
which is, it's gonna operate this
iterator in such a way that what

86
00:06:03.044 --> 00:06:06.540
we're looking at here kinda just works.

87
00:06:06.540 --> 00:06:09.880
And I'll tell you, it's not that
complicated, you just have to take it step

88
00:06:09.880 --> 00:06:15.820
by step, start by grabbing promises and
waiting for them to resolve.

89
00:06:15.820 --> 00:06:18.430
And sort of iterate through
the promises and sequence and

90
00:06:18.430 --> 00:06:21.080
just pluck a new thing off
the iterator each time.

91
00:06:21.080 --> 00:06:24.466
And then worry about passing
the resolved values back in.

92
00:06:24.466 --> 00:06:31.180
And the solution's about 20 lines of code
or even less, if you're clever, right?

93
00:06:31.180 --> 00:06:33.100
So this is not all that involved.

94
00:06:33.100 --> 00:06:34.460
But when you do this,

95
00:06:35.460 --> 00:06:40.156
you really understand in depth how
generator functions and, how async and

96
00:06:40.156 --> 00:06:44.850
await, and how async functions are all
kind of connected to this idea of

97
00:06:44.850 --> 00:06:49.398
pausing local execution context,
picking back up where you left off.

98
00:06:49.398 --> 00:06:55.540
And you will understand this at a deeper
level than most people end up reaching.

99
00:06:56.610 --> 00:07:01.390
So let's take a full 30 minutes for
this one, and

100
00:07:01.390 --> 00:07:05.550
in particular, this is a great for
this task.js file.

101
00:07:05.550 --> 00:07:09.276
It's a great one to sort of play around,
use your code runner and

102
00:07:09.276 --> 00:07:12.440
write your own little thing down here.

103
00:07:12.440 --> 00:07:17.110
It might be that the way
the autocomplete is

104
00:07:17.110 --> 00:07:22.090
using this task function does not serve
you well until you're mostly finished.

105
00:07:22.090 --> 00:07:26.337
So you could just write your
own thing down here like task,

106
00:07:26.337 --> 00:07:30.939
function, and I'll leave this
on the screen, don't worry.

107
00:07:30.939 --> 00:07:34.624
We can say like yield.

108
00:07:34.624 --> 00:07:37.229
I actually gave you a little helper here.

109
00:07:41.409 --> 00:07:44.240
&gt;&gt; Mike North: That's actually
in this one, in the same module.

110
00:07:44.240 --> 00:07:48.260
So all wait does,
it's a promise around a set timeout.

111
00:07:48.260 --> 00:07:56.445
So you could say yield wait(300)
milliseconds, then console.log.

112
00:07:56.445 --> 00:08:00.547
And you should see these things are done
in order, you're not just plowing straight

113
00:08:00.547 --> 00:08:03.390
through and setting all of
your set timeouts in parallel.

114
00:08:03.390 --> 00:08:04.860
They're going in sequence, one,

115
00:08:04.860 --> 00:08:09.394
two, three, with a proper, you should be
able to witness the promise chaining.

116
00:08:09.394 --> 00:08:11.671
So if you were to save this and run it,

117
00:08:11.671 --> 00:08:16.851
you should be able to see,
&gt;&gt; Mike North: [SOUND] Let's see,

118
00:08:16.851 --> 00:08:20.100
that's the task, this is not running.

119
00:08:22.643 --> 00:08:25.510
&gt;&gt; Mike North: Of course,
it is not implemented yet.

120
00:08:25.510 --> 00:08:28.470
But you should be able to
use this to drive your code.

121
00:08:28.470 --> 00:08:31.160
And I would recommend start
here with something simple,

122
00:08:31.160 --> 00:08:35.690
just using this wait helper to sort
of pause and write something out.

123
00:08:35.690 --> 00:08:38.780
Anything that returns a promise
is fair game to yield.

124
00:08:38.780 --> 00:08:42.470
And that'll help you get some intermediate
steps before you try to just plug it

125
00:08:42.470 --> 00:08:45.090
in as an async await solution.

126
00:08:45.090 --> 00:08:47.560
Cuz you have to be kind of mostly done for

127
00:08:47.560 --> 00:08:50.520
that to give you signals
that you're working out.

128
00:08:50.520 --> 00:08:56.960
So half hour, and
we will go through the solution then.

129
00:08:56.960 --> 00:09:00.010
And I will then take it
the next logical step

130
00:09:00.010 --> 00:09:03.040
forward where we will address
some of the issues you brought

131
00:09:03.040 --> 00:09:07.720
up with each new key stroke canceling any
pending things that might be coming in.

132
00:09:07.720 --> 00:09:08.660
So see you in a half hour.

133
00:09:10.960 --> 00:09:14.900
&gt;&gt; Speaker 3: So with this solution,
it won't cancel it,

134
00:09:14.900 --> 00:09:17.790
but the end state will still be correct?

135
00:09:19.120 --> 00:09:20.800
&gt;&gt; Mike North: By the time
we're done with this solution,

136
00:09:20.800 --> 00:09:25.030
it should work exactly as the end
of the previous solution.

137
00:09:25.030 --> 00:09:30.090
We will have just implemented our
own async and await as an exercise.

138
00:09:30.090 --> 00:09:36.430
And it will open the door for us to
potentially cancel it in the near future.

