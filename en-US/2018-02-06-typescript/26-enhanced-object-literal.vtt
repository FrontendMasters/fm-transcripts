WEBVTT

1
00:00:00.330 --> 00:00:04.230
&gt;&gt; Mike North: The next thing we're gonna
talk about following the pattern of kinda

2
00:00:04.230 --> 00:00:10.560
going back into JavaScript looking at how
the language specification has evolved.

3
00:00:10.560 --> 00:00:14.730
And then, connecting back to Type Script
we're gonna look at object literals.

4
00:00:16.620 --> 00:00:21.200
So as hopefully you know Cuz that
would create an object literal.

5
00:00:21.200 --> 00:00:23.746
We can have properties on
an object literal like this.

6
00:00:23.746 --> 00:00:27.230
Functions are first-class
values in JavaScript,

7
00:00:27.230 --> 00:00:31.160
so a function is a value,
just like a string or a number is a value.

8
00:00:31.160 --> 00:00:33.790
We can use them pretty
much interchangeably.

9
00:00:33.790 --> 00:00:37.530
There are limitations around what
we can use as property keys but

10
00:00:37.530 --> 00:00:42.870
other than that, it's pretty
much Do whatever you need to do.

11
00:00:42.870 --> 00:00:46.390
So this is the way things were for
a while.

12
00:00:46.390 --> 00:00:51.110
The 2015 version of the language spec had

13
00:00:51.110 --> 00:00:56.860
a category of features that fit into
this idea of an enhanced object literal.

14
00:00:56.860 --> 00:01:00.070
I wanna walk you through
what's going on here.

15
00:01:00.070 --> 00:01:00.680
So first off,

16
00:01:00.680 --> 00:01:05.330
you've got the ability to specify
the prototype in an object literal, right.

17
00:01:05.330 --> 00:01:10.930
So normally, you'd have to do
this in a couple of steps.

18
00:01:10.930 --> 00:01:16.730
You'd have to use the new operator and
then assign a bunch of properties,

19
00:01:16.730 --> 00:01:22.020
depending on what that object allows
that might take a couple of steps to do.

20
00:01:22.020 --> 00:01:25.217
Here you can use double underscore

21
00:01:25.217 --> 00:01:29.966
specify the prototype just in
the middle of an object literal.

22
00:01:29.966 --> 00:01:32.430
Here we've got what's called
the dynamic property name.

23
00:01:32.430 --> 00:01:34.380
So using square brackets,

24
00:01:34.380 --> 00:01:38.680
you can see that company is something that
maybe we know about only at run time.

25
00:01:38.680 --> 00:01:42.760
Maybe it's not that like
it's linked in up there but

26
00:01:42.760 --> 00:01:46.460
What if we used prompt and
asked the user for that value?

27
00:01:46.460 --> 00:01:49.640
So like at build time,
we don't necessarily know what that is.

28
00:01:49.640 --> 00:01:51.240
That's why it's dynamic.

29
00:01:51.240 --> 00:01:56.490
So in square brackets, we can use that
to have a dynamic property name here.

30
00:01:56.490 --> 00:02:02.400
That was a bit difficult
to do in other ways.

31
00:02:02.400 --> 00:02:05.658
So that was difficult to do in one pass
like this before we had this feature.

32
00:02:06.807 --> 00:02:11.212
&gt;&gt; Mike North: All right, we have
a shorthand for one of the variable,

33
00:02:11.212 --> 00:02:17.520
where value is stored and the property key
where we want to store it are the same.

34
00:02:17.520 --> 00:02:20.789
We have a shorthand where we do not
have to do company, colon, company.

35
00:02:20.789 --> 00:02:25.980
We, as you see on the left can just
do company, and then continue on.

36
00:02:25.980 --> 00:02:31.329
So we don't have to the key in
the value being identical their.

37
00:02:31.329 --> 00:02:34.584
And then,
finally there's this idea of methods,

38
00:02:34.584 --> 00:02:38.594
this is just a short hand for
just as we were doing with classes,

39
00:02:38.594 --> 00:02:41.788
you don't have to say two
string colon function.

40
00:02:41.788 --> 00:02:45.520
You can just say, toString, and then ().

41
00:02:45.520 --> 00:02:50.040
Finally, we already talked about this, but
we have super calls, not just in classes,

42
00:02:50.040 --> 00:02:55.330
but in object liberals as well
that goes up the prototype chain

43
00:02:55.330 --> 00:02:58.530
just as it does under the hood in classes.

