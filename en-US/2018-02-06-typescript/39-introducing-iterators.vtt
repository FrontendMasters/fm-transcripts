WEBVTT

1
00:00:00.030 --> 00:00:03.540
&gt;&gt; Mike North: There are some abstract
constructs we're gonna talk about.

2
00:00:03.540 --> 00:00:06.930
This is gonna look like we're doing
things in a way that's harder

3
00:00:06.930 --> 00:00:09.880
than some obviously simpler paths.

4
00:00:09.880 --> 00:00:12.220
But I'm taking you somewhere
that's worth going to.

5
00:00:12.220 --> 00:00:13.510
So follow along with me.

6
00:00:15.160 --> 00:00:19.970
So iterators, and the point of
an iterator is it allows us to

7
00:00:21.410 --> 00:00:26.510
kind of walk through a linear
data structure of sorts, right?

8
00:00:26.510 --> 00:00:30.550
A sequence of values.

9
00:00:30.550 --> 00:00:33.520
We can access one at
a time from a collection.

10
00:00:33.520 --> 00:00:36.750
And you can think of the iterator as
something that has a little bit of

11
00:00:36.750 --> 00:00:37.610
state in it.

12
00:00:37.610 --> 00:00:40.740
It keeps track of our current position.

13
00:00:40.740 --> 00:00:43.700
And this is similar to how
a four loop would work, and

14
00:00:43.700 --> 00:00:46.260
you can see here we're actually
using one in a four loop.

15
00:00:47.760 --> 00:00:52.760
But when we talk about an iterator,
it is simply an object that has a function

16
00:00:53.900 --> 00:00:58.230
on it, and
that function is called next, and

17
00:00:58.230 --> 00:01:02.590
the value of this function
returns has two properties on it.

18
00:01:02.590 --> 00:01:06.390
One is value and the other is done.

19
00:01:06.390 --> 00:01:12.014
So you can see in this case,
we have, this is a Fibonacci

20
00:01:12.014 --> 00:01:18.253
based iterator where we return
an object from this function.

21
00:01:18.253 --> 00:01:22.983
And when we call next on the object
returned from this function, we're going

22
00:01:22.983 --> 00:01:27.712
to compute the next Fibonacci value in
the sequence and we will stop when we hit

23
00:01:27.712 --> 00:01:32.700
that termination condition, right,
as soon as we go past ten we will stop.

24
00:01:32.700 --> 00:01:37.790
At that point we know we're done, but
otherwise we are returning a little

25
00:01:37.790 --> 00:01:41.019
object that says, we are not done yet
and here's your current value.

26
00:01:43.030 --> 00:01:44.270
So this is what that would look like.

27
00:01:45.280 --> 00:01:48.485
And you get the Fibonacci sequence
where each number is the sum of the two

28
00:01:48.485 --> 00:01:49.400
previous numbers.

