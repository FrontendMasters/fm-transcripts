WEBVTT

1
00:00:00.570 --> 00:00:03.760
&gt;&gt; Mike North: So
the next topic we're going to jump into

2
00:00:03.760 --> 00:00:07.000
is using React with TypeScript.

3
00:00:07.000 --> 00:00:11.655
This is really cool, and this is why we're
going to sort of get away from the slides

4
00:00:11.655 --> 00:00:13.342
and into practical demos, so

5
00:00:13.342 --> 00:00:18.218
you should make sure you've pulled in the
latest changes from master into your code.

6
00:00:18.218 --> 00:00:20.273
There's some new stuff
I've pushed last night.

7
00:00:20.273 --> 00:00:24.990
We're gonna look at that exercise
that is underscore first.

8
00:00:24.990 --> 00:00:27.570
So we have some react
component in that in there.

9
00:00:27.570 --> 00:00:34.590
And the first thing I wanted to say is
react works well with JSX reasonably well.

10
00:00:34.590 --> 00:00:38.580
There are some things just because
those angle brackets are used,

11
00:00:38.580 --> 00:00:45.450
there some things that tend to crash
with JSX, but there are workarounds

12
00:00:45.450 --> 00:00:50.590
such as casting with the as keyword
that allow us to kind of get by.

13
00:00:51.760 --> 00:00:56.820
So the first thing I want us to look at
is a state list functional component.

14
00:00:56.820 --> 00:01:01.340
So this, you may recognize
this as like the flavor of

15
00:01:01.340 --> 00:01:05.960
React component that is not a class right,
this does not have any state.

16
00:01:07.180 --> 00:01:12.350
And you'll see we have a variable
Like const my component,

17
00:01:13.460 --> 00:01:19.650
the type of this variable is React.SFC
that's stateless functional component.

18
00:01:19.650 --> 00:01:23.560
And these are the kinds of components
that basically consist of only the render

19
00:01:23.560 --> 00:01:24.080
function.

20
00:01:25.360 --> 00:01:29.400
The type we're passing in
here is the structure of

21
00:01:29.400 --> 00:01:32.910
allowed props on this react component.

22
00:01:32.910 --> 00:01:34.770
This is really, really cool.

23
00:01:37.040 --> 00:01:41.420
The interface here is what we're
using to describe the props.

24
00:01:41.420 --> 00:01:43.140
And so
when we're consuming this component,

25
00:01:43.140 --> 00:01:45.290
I'll just get rid of
the interface here temporarily.

26
00:01:45.290 --> 00:01:48.900
When we're consuming our component,
say, in our app,

27
00:01:48.900 --> 00:01:53.580
which is a component where we're,
so if that the root component for

28
00:01:53.580 --> 00:01:58.110
our app,
if we were missing that name attribute,

29
00:01:59.540 --> 00:02:02.190
we would get a complaint from
the typescript compiler.

30
00:02:02.190 --> 00:02:03.390
It would say,

31
00:02:03.390 --> 00:02:07.220
look when you use this you have to provide
me with the information that I need.

32
00:02:07.220 --> 00:02:12.650
So this is where the idea of required and
optional parameters like that.

33
00:02:12.650 --> 00:02:15.640
That is really,
really powerful here in terms of

34
00:02:15.640 --> 00:02:20.310
having some enforcement on the API
surface of a react component.

35
00:02:22.210 --> 00:02:26.290
I'm sure I'm not the only
one that has repeatedly

36
00:02:26.290 --> 00:02:30.940
lost track of exactly what you're
supposed to pass into these things.

37
00:02:30.940 --> 00:02:36.050
Just because it's sort of, you kind of
have to look through like where are all

38
00:02:36.050 --> 00:02:39.810
of my props being consumed throughout
the implementation of this component.

39
00:02:39.810 --> 00:02:46.790
You kind of have to search around and
here the developer is encouraged

40
00:02:46.790 --> 00:02:52.340
to define that up front as a structure and
give it some degree of formality.

41
00:02:52.340 --> 00:02:55.910
And what that means is now,
we know what the rules are, and thus,

42
00:02:55.910 --> 00:02:57.100
we can play by these rules.

