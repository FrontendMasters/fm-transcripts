WEBVTT

1
00:00:00.670 --> 00:00:04.780
&gt;&gt; Mike North: So when we talk about type
equivalence, imagine we have a function

2
00:00:04.780 --> 00:00:09.670
called validate input field and
we pass it an input field or

3
00:00:09.670 --> 00:00:14.430
I should say, we expect to receive
an input field in this function.

4
00:00:15.430 --> 00:00:17.550
And then when we're trying to use this,

5
00:00:17.550 --> 00:00:22.220
we have some variable x that we're
trying to invoke this function.

6
00:00:22.220 --> 00:00:26.580
And then in a strongly typed
programming language, we're

7
00:00:26.580 --> 00:00:31.050
basically trying to answer a question
that has to do with type equivalents.

8
00:00:31.050 --> 00:00:35.030
Can we regard this thing that you
have tried to pass to this function

9
00:00:35.030 --> 00:00:37.004
as an html input element?

10
00:00:37.004 --> 00:00:41.805
In a nominal type system like C++ or

11
00:00:41.805 --> 00:00:47.020
Java, we would answer this
question based on whether this

12
00:00:47.020 --> 00:00:52.530
X is an instance of the class
that we have named, right?

13
00:00:52.530 --> 00:00:56.740
Is this an instance of that class?

14
00:00:56.740 --> 00:00:59.480
Did we call new HTML input element or

15
00:00:59.480 --> 00:01:01.510
did something do something
equivalent somewhere?

16
00:01:03.100 --> 00:01:05.240
So that is a nominal type system.

17
00:01:05.240 --> 00:01:07.980
You have to have the right name.

18
00:01:09.150 --> 00:01:12.630
Structural type systems only care
about the shape of the object.

19
00:01:12.630 --> 00:01:14.330
This is how typescript works.

20
00:01:14.330 --> 00:01:19.366
It is extremely convenient for
us in the JavaScript world

21
00:01:19.366 --> 00:01:24.960
because when we talk about this
name here HTMLInputElement,

22
00:01:24.960 --> 00:01:30.220
we're really just talking about a name for
a particular structure.

23
00:01:30.220 --> 00:01:32.453
Anything that matches
that structure should be

24
00:01:32.453 --> 00:01:36.350
fine.
&gt;&gt; Mike North: So

25
00:01:36.350 --> 00:01:39.013
in thinking about the shapes of objects,

26
00:01:39.013 --> 00:01:43.651
we just mean the names of their properties
and the types of the values that

27
00:01:43.651 --> 00:01:48.470
those properties can have, not the values
themselves but just the types.

28
00:01:48.470 --> 00:01:51.130
So in this case,
it we've got a car with make, model, and

29
00:01:51.130 --> 00:01:54.530
year, make is a string,
model's a string, year is a number,

30
00:01:54.530 --> 00:01:56.480
we would say that is
the shape of this object.

31
00:01:56.480 --> 00:02:00.730
And we can use this shape

32
00:02:00.730 --> 00:02:05.860
in the same way that we've been using
primitive types in the type annotation.

33
00:02:05.860 --> 00:02:07.159
So we can do something like this.

34
00:02:08.350 --> 00:02:11.340
Let's imagine for
visual purposes that that's a star.

35
00:02:13.720 --> 00:02:18.430
And what we want is to make something
that will sort of, like fully,

36
00:02:18.430 --> 00:02:22.500
imagine that this is sort of like a hole,
and we want to fully cover the hole.

37
00:02:22.500 --> 00:02:24.750
We wanna plug the hole appropriately.

38
00:02:26.060 --> 00:02:29.060
So if we've got a hole
that looks like this,

39
00:02:29.060 --> 00:02:32.760
we can create something that
exactly plugs that hole, right?

40
00:02:32.760 --> 00:02:34.120
The make is a string.

41
00:02:34.120 --> 00:02:35.230
The model is a string.

42
00:02:35.230 --> 00:02:36.199
The year is a number and

43
00:02:36.199 --> 00:02:42.549
that's gonna work just perfectly.
&gt;&gt; Mike North: So

44
00:02:42.549 --> 00:02:47.394
we can think of the shape as a set of
minimum requirements for structure or

45
00:02:47.394 --> 00:02:50.140
requirements for structure.

46
00:02:50.140 --> 00:02:54.140
And if the properties are missing, the
compiler's going to be unhappy with you.

47
00:02:54.140 --> 00:02:58.092
So in this case, we are missing
the year of property, and so

48
00:02:58.092 --> 00:03:03.233
our shape does not quite cover the whole,
and so you'll end up with an error of

49
00:03:03.233 --> 00:03:08.732
sorts.
&gt;&gt; Mike North: Excess properties are fine,

50
00:03:08.732 --> 00:03:11.790
think about this as covering the whole,
and then some.

51
00:03:13.360 --> 00:03:17.230
So in this case, we've added color in
addition to all of the things that

52
00:03:17.230 --> 00:03:19.580
are being asked for, and that's fine.

53
00:03:19.580 --> 00:03:20.160
That'll cover it.

