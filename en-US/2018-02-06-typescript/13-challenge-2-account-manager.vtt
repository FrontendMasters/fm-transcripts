WEBVTT

1
00:00:00.280 --> 00:00:03.650
&gt;&gt; Mike North: All right.
So, this is our second exercise here.

2
00:00:03.650 --> 00:00:08.690
And in this exercise we're
going to really be working with

3
00:00:08.690 --> 00:00:13.890
interfaces more than just those
explicit type annotations.

4
00:00:13.890 --> 00:00:16.370
So, you're gonna open
up the exercise folder.

5
00:00:16.370 --> 00:00:18.960
There's a sub-folder in
there called accounts.

6
00:00:18.960 --> 00:00:22.896
You're gonna run npn test accounts and
that'll start your tests up.

7
00:00:22.896 --> 00:00:29.780
And what you've got here think of it as
the, a like authentication system for

8
00:00:31.160 --> 00:00:34.480
like a blog or something like that,
where you can register a new user,

9
00:00:34.480 --> 00:00:38.350
you can try to log a user in and
you've got two concepts.

10
00:00:38.350 --> 00:00:40.510
You've got a user and an admin.

11
00:00:40.510 --> 00:00:43.810
So you're gonna want to design
interfaces as appropriate for

12
00:00:43.810 --> 00:00:51.310
structures that represent what various,
accounts in certain states look like.

13
00:00:52.390 --> 00:00:54.410
So users have an email and a password.

14
00:00:55.850 --> 00:01:00.010
When a user is activated it
gets an is active property and

15
00:01:00.010 --> 00:01:02.710
that will have a value of true.

16
00:01:02.710 --> 00:01:07.870
Admins additionally have an admin since
property which is a type of date.

17
00:01:07.870 --> 00:01:09.900
So I'll let you figure out how to do that.

18
00:01:09.900 --> 00:01:10.800
You can experiment.

19
00:01:12.200 --> 00:01:18.530
Export the interfaces from the account
manager file as IUser and IAdmin.

20
00:01:18.530 --> 00:01:21.560
So you can export an interface the same
way you can export anything else.

21
00:01:22.980 --> 00:01:25.870
Update the account manager class
that has been started for you such

22
00:01:25.870 --> 00:01:30.450
that any type mismatching is caught by
the typescript compiler at build time.

23
00:01:30.450 --> 00:01:33.460
And you should see a bunch of red
squiggles in that file if you

24
00:01:33.460 --> 00:01:34.380
look right now.

25
00:01:34.380 --> 00:01:35.368
It should be complaining.

26
00:01:38.092 --> 00:01:42.277
&gt;&gt; Mike North: And so just to be clear
like a new user registers for an account

27
00:01:42.277 --> 00:01:47.284
and administrator has to activate them,
at which point they can log in,

28
00:01:47.284 --> 00:01:51.717
and an administrator can also
promote a user to admin status, so

29
00:01:51.717 --> 00:01:56.559
you sort of got a couple different states,
a user that just signed up,

30
00:01:56.559 --> 00:02:00.702
a user that is confirmed, and
then a user that's an admin.

31
00:02:00.702 --> 00:02:04.060
So there are three potential
structures you have to think about.

32
00:02:04.060 --> 00:02:09.271
So apply interfaces and snuff out all of
the complaints in this file that you're

33
00:02:09.271 --> 00:02:14.435
getting from TypeScript which should
largely be based around implicit anys.

34
00:02:14.435 --> 00:02:14.975
Yes?

35
00:02:14.975 --> 00:02:18.914
&gt;&gt; Speaker 2: [INAUDIBLE]
&gt;&gt; Mike North: All right questions online?

36
00:02:18.914 --> 00:02:26.680
So I see one saying we can have
multiple interfaces with the same name.

37
00:02:28.020 --> 00:02:30.010
So Rob was asking that online.

38
00:02:30.010 --> 00:02:33.700
You can't have, when you refer
to an interface of a given name.

39
00:02:33.700 --> 00:02:36.690
You're basically referring to
the same interface over and over.

40
00:02:36.690 --> 00:02:40.040
So you can think of that as us
modifying the same interface and

41
00:02:40.040 --> 00:02:42.280
adding additional properties to it.

42
00:02:42.280 --> 00:02:46.520
When we talk about interfaces being open,
that means we can extend it,

43
00:02:46.520 --> 00:02:51.470
we can describe additional
fields by sort of having

44
00:02:52.720 --> 00:02:56.610
another interface declaration there.

45
00:02:56.610 --> 00:02:59.475
It's not a declaration but
an interface expression.

46
00:03:02.273 --> 00:03:05.737
&gt;&gt; Mike North: So, if we find out
that the interface page, wait,

47
00:03:05.737 --> 00:03:10.655
can we find out about the interface
page having multiple interfaces with

48
00:03:10.655 --> 00:03:13.570
the same name before we start this?

49
00:03:13.570 --> 00:03:16.160
So Liz pointed out rightly.

50
00:03:16.160 --> 00:03:20.480
This is not the same as a Java
interface in that here we can have

51
00:03:20.480 --> 00:03:25.300
property names whereas in Java you
can only have method signatures.

52
00:03:25.300 --> 00:03:27.280
So that is that rightly so.

53
00:03:27.280 --> 00:03:29.250
It's been a while since I wrote Java.

54
00:03:29.250 --> 00:03:30.090
Years and years.

55
00:03:30.090 --> 00:03:31.280
You have a question.

56
00:03:31.280 --> 00:03:33.630
&gt;&gt; Speaker 3: Can interfaces
extend other interfaces?

57
00:03:33.630 --> 00:03:34.130
&gt;&gt; Mike North: Yes.

58
00:03:36.850 --> 00:03:38.130
Feel free to use that in this.

59
00:03:38.130 --> 00:03:39.620
&gt;&gt; Speaker 3: Syntax for that would be?

60
00:03:39.620 --> 00:03:42.970
&gt;&gt; Mike North: Extend,
like interface foo extends bar.

61
00:03:42.970 --> 00:03:44.390
Same thing with classes.

62
00:03:44.390 --> 00:03:48.260
You don't have to use that for this,
cuz remember it's just about structure.

63
00:03:48.260 --> 00:03:53.550
So if you define another structure that
happens to be a super set that we would

64
00:03:53.550 --> 00:04:00.140
say that like yes, that is like, one is
assignable to the other in the same way.

65
00:04:00.140 --> 00:04:00.810
&gt;&gt; Speaker 3: Right, right.

66
00:04:00.810 --> 00:04:01.920
&gt;&gt; Mike North: Does that make sense?

67
00:04:01.920 --> 00:04:02.420
All right.

