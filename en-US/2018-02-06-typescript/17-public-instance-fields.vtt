WEBVTT

1
00:00:00.660 --> 00:00:03.340
&gt;&gt; Mike North: So
under consideration right now.

2
00:00:03.340 --> 00:00:08.690
So when we say this is an ES
2018 stage 2 proposal here,

3
00:00:08.690 --> 00:00:12.780
that means that there's
discussion going on about adding

4
00:00:12.780 --> 00:00:18.020
the ability to have public and instance
fields on classes in regular JavaScript.

5
00:00:18.020 --> 00:00:22.130
The hope is,
when I say ES2018 I'm not promising or

6
00:00:22.130 --> 00:00:27.570
indicating that it will be ready
in the 2018 version of the draft.

7
00:00:27.570 --> 00:00:31.770
I should really probably just say stage 2
because there's no guarantee when it'll be

8
00:00:31.770 --> 00:00:32.750
finalized.

9
00:00:32.750 --> 00:00:37.320
But this is the proposed syntax here,
where instance fields like this

10
00:00:37.320 --> 00:00:41.840
planet Earth I have as
an instance property of person.

11
00:00:43.260 --> 00:00:48.530
That will be treated just like, that

12
00:00:48.530 --> 00:00:51.820
is the equivalent to putting a property
on an instance in the constructor.

13
00:00:51.820 --> 00:00:53.240
So planet Earth here,

14
00:00:53.240 --> 00:00:57.020
that is being treated the same way
we are treating name more or less.

15
00:00:57.020 --> 00:01:02.290
Think of it as in the constructor for each
instance we are saying This.planet=earth.

16
00:01:02.290 --> 00:01:04.750
It is not the same as
placing it on the prototype.

17
00:01:05.990 --> 00:01:07.990
Static fields do not
require an instance and

18
00:01:07.990 --> 00:01:10.870
it’s the equivalent of just tacking
something onto a constructor.

19
00:01:10.870 --> 00:01:13.400
So we should be able to do something

20
00:01:13.400 --> 00:01:18.890
like Person._counter and
we’d be able to get this value.

21
00:01:18.890 --> 00:01:23.312
In this case, we can see that as we create
new instances of person that counter is

22
00:01:23.312 --> 00:01:27.008
incremented and so that is state
that is attached to the whole class

23
00:01:27.008 --> 00:01:28.931
as opposed to any given instance.

24
00:01:33.750 --> 00:01:35.866
&gt;&gt; Mike North: I just want to draw
a distinction between classes and

25
00:01:35.866 --> 00:01:36.700
prototypes.

26
00:01:36.700 --> 00:01:41.040
If we did this here, a very common

27
00:01:41.040 --> 00:01:45.370
snag that particularly people who come
at JavaScript from other languages, and

28
00:01:45.370 --> 00:01:49.040
who sort of learn what they
need to learn as they go along.

29
00:01:49.040 --> 00:01:54.967
They never really are forced to come to
terms with what prototypes mean here.

30
00:01:54.967 --> 00:01:59.420
In this case, we have a property
tags on the prototype of Person.

31
00:01:59.420 --> 00:02:05.470
The value of tags is an array and
that is a mutable value JavaScript, right?

32
00:02:05.470 --> 00:02:11.650
Like we, we can alter that array and
it is in fact shared across all instances.

33
00:02:11.650 --> 00:02:20.190
So here we can see we create two
instances of Person and we go from.

34
00:02:20.190 --> 00:02:25.090
We push a tag into the array going
through p1, person number 1.

35
00:02:25.090 --> 00:02:30.310
And we observe that person number 2
also like seems to have this tag on it.

36
00:02:30.310 --> 00:02:35.050
And the reason is, in this situation, we
are sharing that same instance of an array

37
00:02:35.050 --> 00:02:38.800
tags across all persons that we create.

38
00:02:38.800 --> 00:02:40.940
It's one array they're all point to it.

39
00:02:40.940 --> 00:02:43.960
Because there's only one copy
of this prototype in memory.

40
00:02:43.960 --> 00:02:47.730
It's sort of the fallback whenever
we're asking for properties

41
00:02:47.730 --> 00:02:52.830
on an instance of person, and those
instances don't have anything for us.

42
00:02:52.830 --> 00:02:55.200
We go to the prototype and
we see what's there, right?

43
00:02:55.200 --> 00:02:58.607
And in this case that's mutable data,
and so that's gonna create.

44
00:02:58.607 --> 00:03:00.570
This is unintuitive for
a lot of developers.

45
00:03:00.570 --> 00:03:03.270
If you're coming to
JavaScript from Java and

46
00:03:03.270 --> 00:03:08.200
you think that prototype is like a class
you're gonna be surprised by this.

47
00:03:08.200 --> 00:03:10.710
I just wanna clarify that
if we change that and

48
00:03:10.710 --> 00:03:15.510
now we have class person with tags like
this, now this is in the constructor and

49
00:03:15.510 --> 00:03:21.002
that tags value, that array will be
cleared on a per instance basis,

50
00:03:21.002 --> 00:03:25.900
and in fact, we will not see that
leaking across incidences anymore.

51
00:03:25.900 --> 00:03:29.510
So when I say the classes have a way of
sending down some of the sharp edges and

52
00:03:29.510 --> 00:03:34.420
corners around prototypes,
that's what I'm referring to here, right?

53
00:03:34.420 --> 00:03:38.440
We don't really have,
unless we use the starter keyword,

54
00:03:38.440 --> 00:03:43.160
we kinda have to opine to shared
multiple state across instances.

55
00:03:43.160 --> 00:03:46.340
And sort of that being the default.

