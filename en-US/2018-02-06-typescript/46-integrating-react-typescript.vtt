WEBVTT

1
00:00:00.000 --> 00:00:03.827
&gt;&gt; Mike North: Let's all
together go over to our project.

2
00:00:09.763 --> 00:00:16.329
&gt;&gt; Mike North: We're going to,
&gt;&gt; Mike North: Run a command like this,

3
00:00:16.329 --> 00:00:20.478
npm start_first with
an underscore before it.

4
00:00:20.478 --> 00:00:25.400
The underscore just means,
this is not an exercise for

5
00:00:25.400 --> 00:00:32.044
us to do as like a challenge, but this
is just an area for us to play around.

6
00:00:35.605 --> 00:00:37.637
&gt;&gt; Mike North: Is anyone getting
any errors when they do that?

7
00:00:37.637 --> 00:00:38.396
&gt;&gt; Speaker 2: Yeah.

8
00:00:38.396 --> 00:00:42.179
&gt;&gt; Mike North: Are you getting an error
about the stack type definitions,

9
00:00:42.179 --> 00:00:43.626
something like that?

10
00:00:43.626 --> 00:00:47.158
Or the user account,
an admin not aligning with correct type?

11
00:00:47.158 --> 00:00:49.721
&gt;&gt; Speaker 2: Cannot
find module API keys JS.

12
00:00:49.721 --> 00:00:56.196
&gt;&gt; Mike North: Okay, [NOISE] so
I will check that in, but

13
00:00:56.196 --> 00:01:01.536
I'll give you my API key for now.

14
00:01:01.536 --> 00:01:05.000
So let me just paste that in the chat.

15
00:01:05.000 --> 00:01:06.408
This is just a Google API key.

16
00:01:06.408 --> 00:01:08.133
Let me see if I can show
you how to get one.

17
00:01:17.658 --> 00:01:24.775
&gt;&gt; Mike North: So you're gonna just
search for Google places API key.

18
00:01:24.775 --> 00:01:28.723
This is free by the way,
no credit card required or whatever.

19
00:01:28.723 --> 00:01:31.524
So as long as you're signed
into a Google account,

20
00:01:31.524 --> 00:01:34.400
you should be able to get
an API key at this page here.

21
00:01:34.400 --> 00:01:40.091
I'm gonna share that link in the chat for
everyone else who's doing it remotely.

22
00:01:52.968 --> 00:01:54.777
&gt;&gt; Mike North: So
it's in the chart there, and

23
00:01:54.777 --> 00:01:57.868
you're just gonna basically
go down here to get a key.

24
00:01:57.868 --> 00:02:01.401
And you're going to like
create a new projects,

25
00:02:01.401 --> 00:02:05.979
and we'll say, something like that,
create and enable API.

26
00:02:05.979 --> 00:02:10.861
And it should give you a key here,
after a moment.

27
00:02:16.875 --> 00:02:21.779
&gt;&gt; Mike North: So in your project,
you should see that you've got a file

28
00:02:21.779 --> 00:02:26.687
that's called something
like apikeys.js.default,

29
00:02:26.687 --> 00:02:30.279
that defines the structure of this file.

30
00:02:30.279 --> 00:02:35.432
So just remove the .default,
and paste your key here.

31
00:02:35.432 --> 00:02:40.478
And rest assured that you're not
going to commit your version of

32
00:02:40.478 --> 00:02:46.179
this file with your API key in it,
that will not get committed to GitHub,

33
00:02:46.179 --> 00:02:48.994
or if you just push this somewhere.

34
00:02:48.994 --> 00:02:55.170
So once you do that,
I'll let everyone kinda catch up there.

35
00:02:55.170 --> 00:02:57.326
You should be able to start up.

36
00:03:02.754 --> 00:03:04.673
&gt;&gt; Speaker 2: [INAUDIBLE].

37
00:03:04.673 --> 00:03:08.545
&gt;&gt; Mike North: Are you getting error
about the type definition of stack?

38
00:03:16.310 --> 00:03:19.175
&gt;&gt; Mike North: So there were two
things that I did yesterday.

39
00:03:19.175 --> 00:03:21.343
&gt;&gt; Speaker 2: API keys file.

40
00:03:21.343 --> 00:03:26.199
&gt;&gt; Mike North: So
that should be here apikeys.js.default.

41
00:03:28.286 --> 00:03:32.525
&gt;&gt; Mike North: And you basically just
remove this default extension and

42
00:03:32.525 --> 00:03:36.239
put your API key here, so
that it looks like this.

43
00:03:44.605 --> 00:03:47.977
&gt;&gt; Mike North: This is important because
otherwise we would probably get rate

44
00:03:47.977 --> 00:03:50.277
limited on a single key within this class.

45
00:03:57.576 --> 00:03:58.352
&gt;&gt; Mike North: All right, so

46
00:03:58.352 --> 00:04:02.116
do we have a couple of people in
the room that are able to start this up?

47
00:04:05.615 --> 00:04:10.240
&gt;&gt; Speaker 2: Does that need
a variable name to export?

48
00:04:10.240 --> 00:04:13.867
&gt;&gt; Mike North: Just export.default,
so it should look just like this,

49
00:04:13.867 --> 00:04:17.278
except your API key should
be in place instead of mine.

50
00:04:17.278 --> 00:04:18.805
&gt;&gt; Speaker 2: Okay.

51
00:04:18.805 --> 00:04:22.120
&gt;&gt; Mike North: By the time you watch
this video, this will be a dead API key,

52
00:04:22.120 --> 00:04:24.007
by the way, so don't even try it.

53
00:04:24.007 --> 00:04:27.908
&gt;&gt; Speaker 2: [LAUGH] I just have
one test that's 1 plus 2 equals 3.

54
00:04:27.908 --> 00:04:29.597
&gt;&gt; Mike North: Yes.
&gt;&gt; Speaker 2: Okay.

55
00:04:29.597 --> 00:04:32.904
&gt;&gt; Mike North: Did you do npm start or
npm test?

56
00:04:32.904 --> 00:04:34.144
&gt;&gt; Speaker 2: npm test.

57
00:04:34.144 --> 00:04:35.801
&gt;&gt; Mike North: Okay, try npm start.

58
00:04:42.078 --> 00:04:46.059
&gt;&gt; Mike North: And
then you can go to local host 3,000 and

59
00:04:46.059 --> 00:04:48.315
we should see something.

60
00:04:48.315 --> 00:04:49.891
You should see something
that looks like this.

61
00:04:52.922 --> 00:04:54.001
&gt;&gt; Mike North: That's the current time.

62
00:04:59.055 --> 00:05:04.652
&gt;&gt; Mike North: We were testing Chrome's
frame rate, immediately after resizing.

63
00:05:04.652 --> 00:05:09.088
So once we see this,
just know that this is a React component.

64
00:05:09.088 --> 00:05:16.270
So I'm going to pop this out,
and bring it next to our code,

65
00:05:16.270 --> 00:05:21.595
just so
that we can look at them side by side.

66
00:05:26.564 --> 00:05:27.915
&gt;&gt; Mike North: Anyone else seen this yet?

67
00:05:30.823 --> 00:05:33.150
&gt;&gt; Mike North: All right,
I'm gonna proceed anyway here.

68
00:05:33.150 --> 00:05:37.819
So if we open this first exercise here,

69
00:05:37.819 --> 00:05:43.623
the root of this project is index.tsx,
right?

70
00:05:43.623 --> 00:05:48.310
TSX is like JSX but with TypeScript.

71
00:05:48.310 --> 00:05:54.481
So you can use the same JSX like
things such as this stuff here,

72
00:05:54.481 --> 00:06:01.375
the HTML, looking stuff that it
compiles into function locations.

73
00:06:01.375 --> 00:06:02.799
So just bit by bit,

74
00:06:02.799 --> 00:06:08.851
what we've got here is a root element
which we can find in this index.html file.

75
00:06:08.851 --> 00:06:11.019
There's our root right there.

76
00:06:12.800 --> 00:06:17.277
&gt;&gt; Mike North: And we're gonna render
this thing called an app component into

77
00:06:17.277 --> 00:06:18.045
the root.

78
00:06:18.045 --> 00:06:21.325
This stuff here just has to
do with hot module loading.

79
00:06:21.325 --> 00:06:26.120
So that as we save our files,
as we save our React component,

80
00:06:26.120 --> 00:06:30.083
we should see that things
update automatically.

81
00:06:30.083 --> 00:06:36.430
So if we look at this App component here.

82
00:06:36.430 --> 00:06:40.313
Those of you who have written
a little bit of React before,

83
00:06:40.313 --> 00:06:45.559
would note that this component should
probably not be implemented as a class.

84
00:06:47.870 --> 00:06:52.451
When you have only a render of function,
no reference to anything stateful,

85
00:06:52.451 --> 00:06:54.922
there is an easier way to represent this.

86
00:06:54.922 --> 00:06:58.310
That is through a stateless,
functional component.

87
00:06:58.310 --> 00:07:01.534
Now, you'll see that I've
got two things here, right?

88
00:07:01.534 --> 00:07:06.752
When we deal wth stateful components,
we will figure out what those mean.

89
00:07:06.752 --> 00:07:12.064
But in a case where we have no props,
we need to worry about,

90
00:07:12.064 --> 00:07:16.754
we can actually say,
we want a variable of type SFC.

91
00:07:31.573 --> 00:07:35.147
&gt;&gt; Mike North: And refactor things around,
so it looks like this.

92
00:07:35.147 --> 00:07:39.287
And if we save that,
&gt;&gt; Mike North: Let's make

93
00:07:39.287 --> 00:07:43.164
sure hot module loading works,
it looks like it does.

94
00:07:43.164 --> 00:07:45.381
So effectively what we've done here,

95
00:07:45.381 --> 00:07:49.010
if we look at what the stateless
functional component is.

96
00:07:49.010 --> 00:07:52.747
It takes in a type parameter,
and it's calling that p,

97
00:07:52.747 --> 00:07:55.939
and that's how you remember it's p for
props.

98
00:07:55.939 --> 00:08:01.009
P for props, so
if we had some requirement for props.

99
00:08:01.009 --> 00:08:08.434
Let's say that we're gonna turn
this word time into some variable,

100
00:08:08.434 --> 00:08:12.928
like props thing, naming stuff is hard.

101
00:08:12.928 --> 00:08:19.778
So right away, we're seeing that
we get an error message saying,

102
00:08:19.778 --> 00:08:23.804
sorry, that's not the way this works.

103
00:08:23.804 --> 00:08:28.343
It would be like that,
first stateless functional component,

104
00:08:28.343 --> 00:08:30.875
you get these props as an argument.

105
00:08:30.875 --> 00:08:35.705
So in this situation,
we could define an interface and

106
00:08:35.705 --> 00:08:38.440
we should get undefined here.

107
00:08:38.440 --> 00:08:39.894
What thing is it?

108
00:08:48.941 --> 00:08:50.478
&gt;&gt; Mike North: And
are we getting a complaint?

109
00:08:52.244 --> 00:08:58.495
&gt;&gt; Mike North: Okay,
objects are not valid as a React child.

110
00:08:58.495 --> 00:09:02.319
So what we're seeing
here is a side effect of,

111
00:09:04.361 --> 00:09:05.673
&gt;&gt; Mike North: Not having,

112
00:09:07.940 --> 00:09:09.986
&gt;&gt; Mike North: Yes, there it is.

113
00:09:09.986 --> 00:09:11.826
That was just me being improper here.

114
00:09:11.826 --> 00:09:17.018
We didn't have this
wrapped around our props.

115
00:09:17.018 --> 00:09:21.488
And now we're getting errors that indicate
that we haven't defined a props type

116
00:09:21.488 --> 00:09:23.734
definition, so we could do it this way.

117
00:09:23.734 --> 00:09:27.761
Import, sorry, interface IAppProps,

118
00:09:27.761 --> 00:09:33.396
thing is a string, and
once we say that that is the type that

119
00:09:33.396 --> 00:09:38.474
we're working with,
now our complaint goes away.

120
00:09:38.474 --> 00:09:44.470
So it's saying, this is sort of
the default for React props.

121
00:09:44.470 --> 00:09:46.742
You always can have children, right?

122
00:09:46.742 --> 00:09:49.567
That is just sort of a core
concept of a React component.

123
00:09:49.567 --> 00:09:56.568
That's how we nest list item
React components inside a list.

124
00:09:56.568 --> 00:10:00.470
But in this case, we're saying
thing is something we wish to add.

125
00:10:00.470 --> 00:10:05.593
And so once we pass that in here,
sorry, IAppProps.

126
00:10:05.593 --> 00:10:08.827
Now this is for a game,
and if we go upstream,

127
00:10:08.827 --> 00:10:14.124
if we go a little back to our index file,
we're gonna get a complain here.

128
00:10:14.124 --> 00:10:16.084
This is really cool.

129
00:10:16.084 --> 00:10:23.140
So now it's saying, you're not allowed
to just use this component as is, right?

130
00:10:23.140 --> 00:10:26.410
You have not given it
the information it needs.

131
00:10:26.410 --> 00:10:29.340
You're giving it basically,
an empty object as its properties.

132
00:10:29.340 --> 00:10:34.488
And so now, we have to say,
&gt;&gt; Mike North: Something

133
00:10:34.488 --> 00:10:36.692
like that to quiet it down.

134
00:10:39.350 --> 00:10:40.855
&gt;&gt; Mike North: What's going on here?

135
00:10:40.855 --> 00:10:45.225
[NOISE] Maybe my
distruction is screwed up.

136
00:10:48.525 --> 00:10:56.118
&gt;&gt; Mike North: Nope,
&gt;&gt; Mike North: Intrinsic attributes,

137
00:10:56.118 --> 00:10:57.658
what's happening here?

138
00:11:01.008 --> 00:11:02.198
&gt;&gt; Mike North: Property thing is missing.

139
00:11:02.198 --> 00:11:02.710
You know what?

140
00:11:02.710 --> 00:11:06.293
Maybe I just didn't save this file.

141
00:11:06.293 --> 00:11:07.489
There's the problem.

142
00:11:11.079 --> 00:11:15.744
&gt;&gt; Mike North: So I'm re-rendering
in my hot module loading thing.

143
00:11:15.744 --> 00:11:19.673
So that was the problem,
I had collapsed this and there it was.

144
00:11:19.673 --> 00:11:24.944
So what we have now is some enforcement
around things that you pass a component.

145
00:11:24.944 --> 00:11:28.047
We can do something like that, and

146
00:11:28.047 --> 00:11:32.387
now it's our option,
&gt;&gt; Mike North: To pass in

147
00:11:32.387 --> 00:11:34.100
something or not.

148
00:11:34.100 --> 00:11:35.690
So what hour is it?

149
00:11:35.690 --> 00:11:39.663
We could basically say, now we're free
to leave this out, which is fine.

150
00:11:39.663 --> 00:11:43.147
It's happy with it,
it's happy without it, right?

151
00:11:43.147 --> 00:11:46.303
So in this case,
it's gonna say what time is it?

152
00:11:46.303 --> 00:11:51.955
And then it should be as soon as I save a
file, the hot module load path should run.

153
00:11:51.955 --> 00:11:53.957
So just the fact that I saved this,

154
00:11:53.957 --> 00:11:57.907
should result in this code here
running which is gonna pass in ours.

155
00:11:57.907 --> 00:11:59.538
So we should see this switch over.

156
00:12:01.900 --> 00:12:02.877
&gt;&gt; Mike North: Maybe not.

157
00:12:10.989 --> 00:12:11.565
&gt;&gt; Mike North: Nope,

158
00:12:11.565 --> 00:12:16.950
I think it's re-rendering the whole
thing to the original path.

159
00:12:16.950 --> 00:12:23.073
And you'll hopefully get the idea there,
I'm trying to do crazy backflips here.

160
00:12:23.073 --> 00:12:26.396
So what I do wanna point
out is there's way more

161
00:12:26.396 --> 00:12:31.183
structure around a component
requiring things to be passed to it.

162
00:12:31.183 --> 00:12:34.775
Optional parameters are super useful here.

163
00:12:34.775 --> 00:12:38.804
I do wanna show you one last thing and
that is the spread operator that is

164
00:12:38.804 --> 00:12:42.236
really, really useful when it
comes to React components.

165
00:12:42.236 --> 00:12:46.953
So let's say we have an object
that already has the stuff that

166
00:12:46.953 --> 00:12:49.740
a component is asking for, right?

167
00:12:49.740 --> 00:12:52.578
So it would a situation
where we have something like

168
00:12:52.578 --> 00:12:58.873
this,
&gt;&gt; Mike North: Right?

169
00:12:58.873 --> 00:13:05.038
We've already got that, and let's go
back to this being a required property.

170
00:13:05.038 --> 00:13:06.366
Thing is a required property.

171
00:13:06.366 --> 00:13:08.668
This component needs it in order to work.

172
00:13:08.668 --> 00:13:15.565
And we're seeing right here,
it's giving you some great feedback here.

173
00:13:15.565 --> 00:13:19.878
It's saying, property thing is missing,
that's awesome.

174
00:13:19.878 --> 00:13:22.832
It's telling us just what it needs.

175
00:13:22.832 --> 00:13:27.600
Now, we've got this data here and
if we had multiple properties on it,

176
00:13:27.600 --> 00:13:31.414
yes, we could say this fu = whatever,
bar = whatever,

177
00:13:31.414 --> 00:13:34.529
baz = whatever, data.this, data.that.

178
00:13:34.529 --> 00:13:40.372
We can also do this,
&gt;&gt; Mike North: And basically spread

179
00:13:40.372 --> 00:13:46.837
that data object out satisfying all the
props that this component is asking for.

180
00:13:46.837 --> 00:13:48.785
So that's really cool,

181
00:13:48.785 --> 00:13:55.200
that is something that TypeScript can
uniquely bring to the party here.

182
00:13:55.200 --> 00:13:58.260
JavaScript will soon have this, but
this is one of those features that we were

183
00:13:58.260 --> 00:14:01.730
talking about where TypeScript
has had it for a while.

184
00:14:01.730 --> 00:14:07.341
JavaScript has it under consideration as
a proposed feature to add to the language.

185
00:14:07.341 --> 00:14:12.909
But this is an object and
we're effectively making a function call,

186
00:14:12.909 --> 00:14:17.133
spreading this out as
the things that we're passing

187
00:14:17.133 --> 00:14:21.560
along as key value pairs to
the component in question.

