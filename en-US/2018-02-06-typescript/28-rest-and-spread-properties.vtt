WEBVTT

1
00:00:00.270 --> 00:00:05.260
&gt;&gt; Mike North: In addition to this, so in
TypeScript, this has existed for a while.

2
00:00:05.260 --> 00:00:08.930
I showed this up here cuz it's not
technically in JavaScript yet,

3
00:00:08.930 --> 00:00:10.530
it is progressing along nicely.

4
00:00:10.530 --> 00:00:15.080
TypeScript has enjoyed this for a long
time, object rest and spread properties.

5
00:00:16.470 --> 00:00:21.450
And in both cases,
we're looking at ellipses, right?

6
00:00:21.450 --> 00:00:23.320
This dot, dot, dot.

7
00:00:23.320 --> 00:00:28.750
So the way I think about rest and the way
I remember which is rest versus spread,

8
00:00:28.750 --> 00:00:32.430
I just remember the phrase,
and the rest go here.

9
00:00:34.040 --> 00:00:39.320
So in this case, if we've got a variable
called data and it's got X, Y, and Z.

10
00:00:40.370 --> 00:00:43.930
And then on the left side of
the assignment operator, and

11
00:00:43.930 --> 00:00:47.029
say let x =, sorry.

12
00:00:47.029 --> 00:00:50.280
Let, and
then we're destructuring we're saying,

13
00:00:50.280 --> 00:00:53.620
we wanna grab x and then the rest go here.

14
00:00:55.050 --> 00:00:58.710
Right, so
in that situation when we log that out.

15
00:00:58.710 --> 00:01:02.200
We're gonna see that on that
first line here, we get y and z.

16
00:01:02.200 --> 00:01:07.220
So we're basically saying all right, this
data thing on the right I wanna capture x

17
00:01:07.220 --> 00:01:11.070
by name and then put the rest in others.

18
00:01:11.070 --> 00:01:13.180
So, everyone understand how that works?

19
00:01:13.180 --> 00:01:15.550
It's almost like a catch all,
catch the rest here.

20
00:01:17.050 --> 00:01:18.960
Spread, you know that, so

21
00:01:18.960 --> 00:01:21.780
that's gonna be on the right
side of the assignment operator.

22
00:01:21.780 --> 00:01:24.710
And you've gotta think of that as
almost like taking the object, and

23
00:01:24.710 --> 00:01:26.530
spreading it out.

24
00:01:26.530 --> 00:01:31.170
So we've got others, and
we're gonna add to it, a and b.

25
00:01:31.170 --> 00:01:34.320
And you can see that, that's the second
line that gets logged out here.

26
00:01:34.320 --> 00:01:37.960
And it's sort of like unpacking
the object, like unzipping it and

27
00:01:37.960 --> 00:01:39.210
spreading it out.

28
00:01:39.210 --> 00:01:44.960
So no, we do not have it's not like
we have this object others with y and

29
00:01:44.960 --> 00:01:47.840
z, nested inside this second line.

30
00:01:47.840 --> 00:01:51.880
It is unpacked and it's property has
become the properties of the enclosing

31
00:01:51.880 --> 00:01:53.490
object in which it is spread.

32
00:01:53.490 --> 00:01:55.150
Does that make sense to everyone?

33
00:01:56.380 --> 00:02:02.420
So this can be done in regular
JavaScript now with arrays.

34
00:02:02.420 --> 00:02:06.720
This stage three proposal is and
current type script feature

35
00:02:08.270 --> 00:02:11.370
pertains to working with objects
as well in exactly the same way.

36
00:02:13.600 --> 00:02:17.220
So, in particular when
we deal with arrays,

37
00:02:17.220 --> 00:02:21.000
this is kinda nice cuz you can have
arguments, like an arguments object.

38
00:02:21.000 --> 00:02:26.290
And when you're using apply you can
just do like dot dot dot argument.

39
00:02:26.290 --> 00:02:30.670
Instead of having to pass it in, and it
will spread that array out into the very

40
00:02:30.670 --> 00:02:34.349
slots of arguments for that function, and
sort of passing the array as one value.

41
00:02:36.030 --> 00:02:38.200
Pretty cool stuff, and
you will know it, so

42
00:02:38.200 --> 00:02:42.680
now that we've seen this, I wanna go
back to one of the solution I just did.

43
00:02:42.680 --> 00:02:46.480
To show you how we can get away from
some evil type casting that we did.

44
00:02:46.480 --> 00:02:51.070
So type casting is something you want to
avoid because you're basically saying,

45
00:02:51.070 --> 00:02:54.550
you're like type scripts
trying to tell you something.

46
00:02:55.650 --> 00:02:58.960
She said, type casting,
you should only do it when necessary.

47
00:02:58.960 --> 00:03:01.310
And you're basically saying,

48
00:03:01.310 --> 00:03:05.980
I wish to disregard the warning
that you're giving me type system.

49
00:03:05.980 --> 00:03:08.520
I am over ruling you.

50
00:03:08.520 --> 00:03:11.230
And in this case, we had to do stuff like

51
00:03:13.130 --> 00:03:16.890
creating a new value as
a confirmed user here.

52
00:03:16.890 --> 00:03:18.030
I showed you this before, but

53
00:03:18.030 --> 00:03:21.080
now that we know what spread does,
I just wanna show you.

54
00:03:21.080 --> 00:03:26.730
This should be something that you
try to get rid of if you can, right.

55
00:03:26.730 --> 00:03:29.670
You try to try to not have to do this.

56
00:03:29.670 --> 00:03:31.089
So if we were to say,

57
00:03:31.089 --> 00:03:36.696
i'm gonna change toConfirm
&gt;&gt; Mike North: Move

58
00:03:36.696 --> 00:03:40.776
it back to userToApprove.
&gt;&gt; Mike North: And

59
00:03:40.776 --> 00:03:43.269
now it's gonna be complaining that like

60
00:03:43.269 --> 00:03:47.540
you told me you'd return a confirmed
user and this is just a user.

61
00:03:47.540 --> 00:03:50.980
And we can get rid of this,
it adds no value at this point.

62
00:03:50.980 --> 00:03:56.634
We can simply say, here,
I wanna take the userToApprove.

63
00:04:01.332 --> 00:04:02.412
&gt;&gt; Mike North: And give it,

64
00:04:02.412 --> 00:04:07.719
I want to return an object that
contains the properties of that,

65
00:04:07.719 --> 00:04:11.480
but also is active, and now it's happy.

66
00:04:11.480 --> 00:04:13.590
Now I have all the properties I need.

67
00:04:13.590 --> 00:04:20.090
I am not casting, which means, there isn't
any chance I am going to get a value and

68
00:04:20.090 --> 00:04:23.590
basically you are just sort of beating
typescript into submission now.

69
00:04:23.590 --> 00:04:26.180
Typescript and I agree that this is okay.

70
00:04:27.260 --> 00:04:30.366
And same down here,
I could say, new Admin.

71
00:04:30.366 --> 00:04:35.650
When you hit F2 to change it back to user,
that means we don't need this, and

72
00:04:35.650 --> 00:04:36.456
same goes here.

73
00:04:36.456 --> 00:04:40.750
User, adminSince, new Date,

74
00:04:40.750 --> 00:04:45.810
and this will be happy with me.

75
00:04:45.810 --> 00:04:50.006
So we got rid of those two casts and

76
00:04:50.006 --> 00:04:59.340
now we have no type casting in
this whole file, which is great.

77
00:04:59.340 --> 00:05:01.170
What that means is,

78
00:05:01.170 --> 00:05:05.660
we have to find out types and
those pertain to certain structures.

79
00:05:05.660 --> 00:05:08.010
And we're just simply returning
the right structures and

80
00:05:08.010 --> 00:05:09.670
type scripts saying thumbs up.

81
00:05:09.670 --> 00:05:11.790
Yes you are, good job.

82
00:05:11.790 --> 00:05:18.470
And we're not simply saying,
whatever this is could be a string.

83
00:05:18.470 --> 00:05:22.330
Whatever it is,
you must regard it as this other thing.

84
00:05:22.330 --> 00:05:25.040
Anytime we do that,
we're taking on a risk.

85
00:05:25.040 --> 00:05:26.530
We have to be sure that we're right.

86
00:05:26.530 --> 00:05:27.730
Now we don't have to be sure.

87
00:05:27.730 --> 00:05:29.930
Now Type Script is telling
us that we're fine.

88
00:05:29.930 --> 00:05:32.850
So everyone understand how this is
a step up from what we did before.

89
00:05:32.850 --> 00:05:36.990
The thing of type casting almost as
like the equivalent of in CSS using

90
00:05:38.130 --> 00:05:44.950
bang important where you're just saying,
no damn it, like you are displaying none.

91
00:05:44.950 --> 00:05:49.590
Whatever rules you have
like I hereby supercede, so

92
00:05:49.590 --> 00:05:52.320
that is the better approach to take.

93
00:05:52.320 --> 00:05:57.500
And this is great, particularly when
you're dealing with structural typing,

94
00:05:57.500 --> 00:06:01.290
where you have like one
type that extends another.

95
00:06:01.290 --> 00:06:06.240
You can sort of just spread the smaller
shape out into the bigger shape and

96
00:06:06.240 --> 00:06:08.240
define other properties.

97
00:06:08.240 --> 00:06:11.190
Does everyone understand what I
mean by smaller and bigger shape?

98
00:06:11.190 --> 00:06:16.080
Bigger shape has more properties than the
smaller one, superset of the smaller one.

