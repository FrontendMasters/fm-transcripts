WEBVTT

1
00:00:00.000 --> 00:00:01.978
&gt;&gt; Mike North: Generics
only usable in TypeScript,

2
00:00:01.978 --> 00:00:04.210
cuz this has everything to do with types.

3
00:00:04.210 --> 00:00:10.110
The purpose of generics is we want to be
able to reuse code across many types,

4
00:00:10.110 --> 00:00:11.470
interfaces, functions.

5
00:00:11.470 --> 00:00:16.220
We wanna be able to leverage
it multiple times and

6
00:00:16.220 --> 00:00:21.830
we need to express a relationship between,
types a constraint

7
00:00:21.830 --> 00:00:25.410
like you're going to give me an argument
of a particular type and I'm going to

8
00:00:25.410 --> 00:00:30.300
return a particular type that depends
on the type of argument you passed me.

9
00:00:30.300 --> 00:00:33.980
So in this case we've got
something that is exactly that.

10
00:00:33.980 --> 00:00:36.290
It's a function called gimmieFive and

11
00:00:36.290 --> 00:00:40.560
whatever you give it it'll return
an array with five of that thing in it.

12
00:00:41.620 --> 00:00:42.990
Right, so

13
00:00:42.990 --> 00:00:47.630
in the case where we pass it three
the type it returns is a number array.

14
00:00:47.630 --> 00:00:53.750
If we give it the string egg then
the value of eggs is gonna be an array,

15
00:00:55.030 --> 00:00:58.970
with five of the string egg in it.

16
00:00:58.970 --> 00:01:01.410
So here's how it works,

17
00:01:01.410 --> 00:01:04.670
you see after the name of the function we
have what is called the type parameter.

18
00:01:04.670 --> 00:01:10.000
That needs to go in angle brackets,
T is a convention you'll see.

19
00:01:10.000 --> 00:01:13.095
Usually it's a single
letter that people use for

20
00:01:13.095 --> 00:01:16.507
this which is a convention
left over from C++ days.

21
00:01:16.507 --> 00:01:21.027
These were known as template parameters in
C++, they are known as generics in Java

22
00:01:21.027 --> 00:01:24.258
and also generics here.
&gt;&gt; Mike North: And so

23
00:01:24.258 --> 00:01:28.138
we define a type parameter and
now that's sort of a placeholder for

24
00:01:28.138 --> 00:01:30.520
a type to be determined later.

25
00:01:30.520 --> 00:01:34.130
And then we say you're going to give me x,
which is of a certain type and

26
00:01:34.130 --> 00:01:37.250
I'm going to return an array
of that certain type.

27
00:01:37.250 --> 00:01:42.050
So this function here is sort of defined
in an abstract way, but as soon as we pass

28
00:01:42.050 --> 00:01:46.550
a value into it, now we know exactly
what that's going to be, right?

29
00:01:46.550 --> 00:01:51.560
We pass it a number and so, yes,
T is a number for that first invocation.

30
00:01:51.560 --> 00:01:53.470
And for the second one, T is string for

31
00:01:53.470 --> 00:01:58.540
that second invocation.
&gt;&gt; Mike North: So

32
00:01:58.540 --> 00:02:01.302
this takes a little getting used to and

33
00:02:01.302 --> 00:02:05.630
particularly designing good
functions around generics.

34
00:02:07.460 --> 00:02:14.520
It is something that can certainly
be done very poorly if you don't

35
00:02:14.520 --> 00:02:20.130
feel like overly constraining things or
if you're not using the generic properly.

36
00:02:21.950 --> 00:02:25.770
In this case, it's useful because we
don't have to return an array of any,

37
00:02:25.770 --> 00:02:27.660
like we could've expressed this.

38
00:02:27.660 --> 00:02:32.130
As gimmieFive and I take an any and
I return an array of any's.

39
00:02:32.130 --> 00:02:36.120
But we would've basically had to
cast that immediately thereafter,

40
00:02:36.120 --> 00:02:42.530
in order to use that array in something
that would want an array of numbers.

41
00:02:42.530 --> 00:02:45.920
So we don't get that type safety
because we would have to cast.

42
00:02:45.920 --> 00:02:51.970
Now it's sort of we took responsibility,
for knowing about the types of things

43
00:02:51.970 --> 00:02:56.910
as opposed to, this taking responsibility
and taking that off of our plate.

44
00:02:58.230 --> 00:03:03.270
So we can express arrays this way too
we've been expressing arrays until now

45
00:03:03.270 --> 00:03:08.517
using some type and then square brackets,
so now I'm showing you we can pass

46
00:03:08.517 --> 00:03:15.250
it into, a type parameter of
the capital A array type.

47
00:03:15.250 --> 00:03:18.619
So this would be an array
of 52 undefined's but

48
00:03:18.619 --> 00:03:24.059
the type of that array is that tuple
there, just like a card dealing exercise.

49
00:03:24.059 --> 00:03:29.683
Promises, we can pass
a promise a generic parameter.

50
00:03:29.683 --> 00:03:34.459
And that will be the type of value that
that promise resolves to, which is really,

51
00:03:34.459 --> 00:03:35.300
really nice.

52
00:03:35.300 --> 00:03:38.104
If you've been working with promises for
a while,

53
00:03:38.104 --> 00:03:41.234
it's most JavaScript building
web applications to do,

54
00:03:41.234 --> 00:03:45.660
you kinda lose a lot of information
about what this promise is all about.

55
00:03:45.660 --> 00:03:48.315
And especially with functions
that take arguments as Promises

56
00:03:50.362 --> 00:03:51.586
&gt;&gt; Mike North: You need some context and

57
00:03:51.586 --> 00:03:55.210
you basically need to trace backwards,
like, where did this come from?

58
00:03:55.210 --> 00:03:56.380
What were you asking for?

59
00:03:56.380 --> 00:03:58.150
What can I expect as a response?

60
00:03:58.150 --> 00:03:59.887
Is there a fetch somewhere inside that?

61
00:03:59.887 --> 00:04:02.660
Then it's probably
a response you're gonna get.

62
00:04:02.660 --> 00:04:05.170
So now we have type
safety around promises,

63
00:04:05.170 --> 00:04:09.950
not just about it being a promise but
it resolving to something reasonable.

64
00:04:12.120 --> 00:04:17.120
Finally tomorrow, when we dig into
react components we can take in two

65
00:04:17.120 --> 00:04:22.730
template parameters, one which represents
props and one which represents state.

66
00:04:22.730 --> 00:04:26.772
So props are the things that you can
pass a reactive component as attributes

67
00:04:26.772 --> 00:04:28.449
almost like HTML attributes.

68
00:04:28.449 --> 00:04:34.580
State is sort of the internal
things that have to be tracked by

69
00:04:34.580 --> 00:04:39.883
that component in order for
it to operate normally.

70
00:04:39.883 --> 00:04:43.468
So that might be like if it's an accordion
you know whether it's open or

71
00:04:43.468 --> 00:04:45.820
closed, that could be
considered the state.

72
00:04:47.220 --> 00:04:49.306
The benefit here is if you then,

73
00:04:49.306 --> 00:04:54.021
add something to the react component
if you pass something in that was not

74
00:04:54.021 --> 00:04:58.735
listed as one of the props, that you
should be passing to the component or

75
00:04:58.735 --> 00:05:02.321
say you misspell it,
type descriptor will catch you.

76
00:05:02.321 --> 00:05:07.132
Or if that component, if you say okay,
well we're gonna enhance this and

77
00:05:07.132 --> 00:05:10.186
now I need this value and
you add that to props.

78
00:05:10.186 --> 00:05:14.778
Now you're gonna get problems showing up
in your problems tab, there will say,

79
00:05:14.778 --> 00:05:17.884
okay, well,
all these consumers of this component,

80
00:05:17.884 --> 00:05:20.199
now you must give me something for that.

81
00:05:20.199 --> 00:05:25.291
You are no longer given me an object that
I can assign to this propâ€™s interface,

82
00:05:25.291 --> 00:05:25.831
right?

83
00:05:25.831 --> 00:05:29.720
It is not of correct type, and so
now you have a list of things to do.

84
00:05:29.720 --> 00:05:35.488
As opposed to, what are the alternatives?,
like a git grab through your code base and

85
00:05:35.488 --> 00:05:39.675
try to do it the way we were doing
it in 1992, this is a better

86
00:05:39.675 --> 00:05:46.733
way.
&gt;&gt; Mike North: In

87
00:05:46.733 --> 00:05:50.289
addition to just taking
in a type parameter t,

88
00:05:50.289 --> 00:05:54.110
you can describe
a constraint on a generic.

89
00:05:54.110 --> 00:05:58.500
So this would take any type
that can be assigned to, or

90
00:05:58.500 --> 00:06:01.800
that is at least structure of point two d.

91
00:06:01.800 --> 00:06:05.790
So this would be able to, for example,
depending on the implementation of this

92
00:06:05.790 --> 00:06:11.940
algorithm here, you could say, look,
I will calculate the mid point of two,

93
00:06:11.940 --> 00:06:15.870
two dimensional points or two,
three dimensional points.

94
00:06:15.870 --> 00:06:22.450
Or if you can find a way to represent
time as a number in this point things,

95
00:06:22.450 --> 00:06:26.130
something where I can treat at
the same way as I treat distance.

96
00:06:26.130 --> 00:06:30.670
I can even do like a four dimensional
point, space and time and

97
00:06:30.670 --> 00:06:33.310
find like the midpoint of your flight

98
00:06:33.310 --> 00:06:37.420
from one place at one time to
another place at another time.

99
00:06:37.420 --> 00:06:41.240
And you would get back the correct type,

100
00:06:41.240 --> 00:06:44.950
you would not get just a Point2D back,
you would not get an any back.

101
00:06:44.950 --> 00:06:48.920
You get back something that represents
the same thing that you put in, right?

102
00:06:48.920 --> 00:06:52.910
But this type constraint here, what you're
doing here is you're saying first of don't

103
00:06:52.910 --> 00:06:57.530
just give me any type, don't give me
a string, I want a Point 2D at least.

104
00:06:57.530 --> 00:07:02.030
And then from within this function,
you're gonna get on,

105
00:07:02.030 --> 00:07:05.142
as far as properties you'll
allowed to access at p1 and p2,

106
00:07:05.142 --> 00:07:11.270
you will be able to refer to things
that are at least what point2D has.

107
00:07:11.270 --> 00:07:13.640
Right, as long as you can do
whatever work you need to do.

108
00:07:13.640 --> 00:07:17.660
Say there's like a property on
there called chords and for

109
00:07:17.660 --> 00:07:22.594
points in higher dimensions you might
have more numbers in that array.

110
00:07:22.594 --> 00:07:25.464
It is possible that you have
the information you need and

111
00:07:25.464 --> 00:07:28.020
you can return the appropriate type.

112
00:07:28.020 --> 00:07:32.983
There are even ways that you
can instantiate a new object of

113
00:07:32.983 --> 00:07:37.642
type T providing that part
of the Point2D interface is

114
00:07:37.642 --> 00:07:42.732
a constructor.
&gt;&gt; Mike North: And

115
00:07:42.732 --> 00:07:47.160
then down low, you can see we can
use it with an interface as well.

116
00:07:47.160 --> 00:07:49.480
So we've used it with a function and
with an interface and

117
00:07:49.480 --> 00:07:53.740
this interface basically says to be
a file reader, you must have a function.

118
00:07:55.370 --> 00:08:00.300
So file reader is expressed in terms of
a file type and say T extends File, so

119
00:08:00.300 --> 00:08:02.830
we might have like JPEGFile.

120
00:08:02.830 --> 00:08:07.840
Right, so if you implemented the interface
IFileReader and then pass in

121
00:08:07.840 --> 00:08:13.260
JPEGFile as the template parameter there,
now you must have a function

122
00:08:13.260 --> 00:08:18.709
that takes a single argument which is
a JPEGFile type and it returns a blob.

123
00:08:20.370 --> 00:08:23.334
So this is, is sort of one more
layer of abstraction out and

124
00:08:23.334 --> 00:08:26.390
you can take multiple template parameters,
if you wish.

125
00:08:26.390 --> 00:08:30.440
You just need to separate them by commas,
before you close the angle brackets.

