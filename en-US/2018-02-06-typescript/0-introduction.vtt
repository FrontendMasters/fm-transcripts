WEBVTT

1
00:00:00.060 --> 00:00:01.540
&gt;&gt; Mike North: Welcome everybody.

2
00:00:01.540 --> 00:00:06.348
This is fun for me because I have
bounced around between a bunch of

3
00:00:06.348 --> 00:00:11.570
programming languages, and
JavaScript has always got for the browser.

4
00:00:11.570 --> 00:00:16.440
But I really appreciate the aspects
of other languages that have

5
00:00:16.440 --> 00:00:21.430
helped me kind of have fewer
surprises at run time.

6
00:00:21.430 --> 00:00:24.240
Fewer surprises that my
users tell me about.

7
00:00:24.240 --> 00:00:28.860
And I am so excited that technologies,

8
00:00:28.860 --> 00:00:34.840
that bring that kind of thing to browser
programming and to ecosystems like Node,

9
00:00:34.840 --> 00:00:38.360
they are becoming more popular and
more mature and ever better.

10
00:00:40.250 --> 00:00:43.980
So on the off chance that you don't
know what you're getting into yet,

11
00:00:43.980 --> 00:00:47.220
TypeScript is a typed
super set of JavaScript.

12
00:00:48.550 --> 00:00:53.490
What you should read into that is that
most of your JavaScript will work,

13
00:00:53.490 --> 00:00:57.890
at least in some mode, when run through

14
00:00:57.890 --> 00:01:02.960
TypeScript's apparatus,
which we will talk about in a moment.

15
00:01:02.960 --> 00:01:05.980
It is maintained by Microsoft.

16
00:01:05.980 --> 00:01:10.560
It compiles down to a variety of
different versions of JavaScript.

17
00:01:10.560 --> 00:01:15.140
So many things can compile down to
even ES3, ECMAScript version 3,

18
00:01:15.140 --> 00:01:18.000
which is the kind of JavaScript
that even IE6 can read.

19
00:01:19.280 --> 00:01:24.220
So you might think of it as
over lapping a little bit

20
00:01:24.220 --> 00:01:29.800
conceptually with software like Babel
except this adds a type system to that.

21
00:01:29.800 --> 00:01:32.520
So not only does TypeScript add types, but

22
00:01:32.520 --> 00:01:37.630
we will see that it adds kind of modern
language features that JavaScript

23
00:01:37.630 --> 00:01:42.170
at least in the way that older
browsers understand is lacking.

24
00:01:43.870 --> 00:01:45.550
There are three parts to TypeScript.

25
00:01:46.830 --> 00:01:50.250
There's the language itself,
the language service,

26
00:01:50.250 --> 00:01:53.510
which is what's gonna give us
a great developer experience, right?

27
00:01:54.980 --> 00:01:56.070
As we're coding,

28
00:01:56.070 --> 00:02:01.490
it helps us understand what are the valid
functions that are on this type of object.

29
00:02:01.490 --> 00:02:03.050
And then finally, there's the compiler.

30
00:02:03.050 --> 00:02:08.030
And that is what's responsible for parsing
our code, building up a syntax tree,

31
00:02:08.030 --> 00:02:12.480
and eventually boiling that down into
whatever we want our output to be,

32
00:02:12.480 --> 00:02:16.330
whatever level of JavaScript
we are interested in.

33
00:02:17.890 --> 00:02:20.620
And finally,
I think the theme we will see here and

34
00:02:20.620 --> 00:02:26.680
this wasn't as obvious several years back,
but it is certainly obvious now.

35
00:02:26.680 --> 00:02:31.270
A lot of things that previously were
type script features now seem to be

36
00:02:31.270 --> 00:02:35.000
becoming regular JavaScript features,
right?

37
00:02:35.000 --> 00:02:40.024
So this is exciting stuff, and
I hope that throughout the day, I can

38
00:02:40.024 --> 00:02:46.120
make it really clear where the line is
between modern JavaScript and TypeScript.

39
00:02:46.120 --> 00:02:50.023
Because if you tread some of
the best books out there,

40
00:02:50.023 --> 00:02:53.233
just because of the time
they were written,

41
00:02:53.233 --> 00:02:57.947
it was not as obvious that things
were moving in this direction.

42
00:02:57.947 --> 00:03:02.574
Where we could say that really it's
just the types theTypeScript brings,

43
00:03:02.574 --> 00:03:06.990
the rest is kind of JavaScript it's
borrowing these ideas for itself.

