WEBVTT

1
00:00:00.560 --> 00:00:03.440
&gt;&gt; Mike North: So the next layer up here,
and this is where things start to

2
00:00:03.440 --> 00:00:07.670
look cool, is something called
a generator function, or generators.

3
00:00:09.380 --> 00:00:13.530
So generators are great for
defining recursive algorithms.

4
00:00:13.530 --> 00:00:18.710
And they can be thought
of almost as functions

5
00:00:18.710 --> 00:00:24.120
that return more than once You can
think of it that way so generator

6
00:00:24.120 --> 00:00:28.970
is this function star syntax that's not
a footnote, that's not like an asterisks

7
00:00:30.530 --> 00:00:34.860
function star is not the same
as our JavaScript functions.

8
00:00:34.860 --> 00:00:37.630
The way normal JavaScript
functions work is

9
00:00:37.630 --> 00:00:41.410
you basically guarantee that
they will run to completion.

10
00:00:41.410 --> 00:00:46.650
So most JavaScript programs
run using only one thread and

11
00:00:46.650 --> 00:00:50.460
it could be argued that,
you could say all JavaScript programs run

12
00:00:50.460 --> 00:00:55.130
using only one thread and some programs
involve launching other programs.

13
00:00:55.130 --> 00:00:58.260
Like if you're using a web
worker that's a separate script.

14
00:00:58.260 --> 00:01:04.429
You might argue those are like two
separate things talking to each other.

15
00:01:04.429 --> 00:01:09.366
The coolest thing about these
generator functions is that,

16
00:01:09.366 --> 00:01:13.528
we can pause local execution
within the function,

17
00:01:13.528 --> 00:01:17.220
leave it and
then come back later and resume.

18
00:01:18.270 --> 00:01:23.580
And that is what's happening potentially,
when we call yield.

19
00:01:23.580 --> 00:01:25.890
Now, it's not happening here.

20
00:01:25.890 --> 00:01:32.510
Well, no, it is happening here,
in that basically when we yield,

21
00:01:32.510 --> 00:01:36.240
we are returning a value
out of an iterator.

22
00:01:37.350 --> 00:01:39.220
And then when we're asked for
our next value,

23
00:01:39.220 --> 00:01:42.020
we sort of pick back off
where we last yielded.

24
00:01:42.020 --> 00:01:43.660
And resume execution again.

25
00:01:43.660 --> 00:01:48.330
So I'm going to demonstrate
this again in Chrome,

26
00:01:48.330 --> 00:01:52.830
but, I just want to make it clear.

27
00:01:52.830 --> 00:01:55.990
Generator functions
returns an iterator and

28
00:01:55.990 --> 00:01:59.300
the state of the closure is
preserved between next calls.

29
00:01:59.300 --> 00:02:03.417
So for example,
in this Fibonacci sequence.

30
00:02:03.417 --> 00:02:08.144
Generator functions and I'm actually gonna
give you this exercise to play with for

31
00:02:08.144 --> 00:02:09.370
about 10 minutes.

32
00:02:09.370 --> 00:02:14.120
The answer is right here, but I want you
to like have a chance to get your hands on

33
00:02:14.120 --> 00:02:19.550
this and have tests that you can pass and
ya know experience

34
00:02:19.550 --> 00:02:27.110
working with it first hand but
last my terribly named variables there.

35
00:02:27.110 --> 00:02:31.974
Those will, that closure and
the value of those

36
00:02:31.974 --> 00:02:37.811
variables will be preserved
as we leave this function and

37
00:02:37.811 --> 00:02:41.475
come back into it, back to Chrome.

38
00:02:49.106 --> 00:02:52.282
&gt;&gt; Mike North: I'm gonna use this handy

39
00:02:52.282 --> 00:02:58.188
little snippets thing, which is fantastic.

40
00:02:58.188 --> 00:03:05.220
It's snippets Let us write a little
bit of code, and then run it below.

41
00:03:06.950 --> 00:03:13.257
Just hitting this little.
&gt;&gt; Mike North: This play button here.

42
00:03:13.257 --> 00:03:16.779
So generator functions are much easier to
teach these days now that Chrome supports

43
00:03:16.779 --> 00:03:19.960
them natively and we can sort
of just step right through them.

44
00:03:19.960 --> 00:03:25.520
So let's say that we've got our,
we've got an iterative sequence of sorts.

45
00:03:25.520 --> 00:03:29.780
So we can say function* mySequence.

46
00:03:32.710 --> 00:03:37.600
And we're gonna say, so x is,

47
00:03:37.600 --> 00:03:43.180
we'll just have it like, we'll have
it Emits successive powers of two.

48
00:03:43.180 --> 00:03:46.395
Two to the one, two squared,
two cubed, etc.

49
00:03:46.395 --> 00:03:50.426
So we'll call this exponent or power.

50
00:03:50.426 --> 00:03:51.350
I'll start with one.

51
00:03:53.260 --> 00:03:55.940
So this might look like an infinite loop,

52
00:03:55.940 --> 00:04:00.090
but as long as we pause
execution in the middle.

53
00:04:00.090 --> 00:04:03.197
It basically just finds in
a sequence of infinite length.

54
00:04:10.570 --> 00:04:12.655
&gt;&gt; Mike North: Yeah I thought it was

55
00:04:12.655 --> 00:04:14.280
Math.power.

56
00:04:14.280 --> 00:04:18.370
My other complete here
is trying to trick me.

57
00:04:20.450 --> 00:04:25.670
Okay, so if we've got this,
and we run that, so

58
00:04:25.670 --> 00:04:30.400
now this generator function
mySequence is available to us below.

59
00:04:30.400 --> 00:04:34.654
And I wanna set a break point,
actually sorry, let me refresh the page

60
00:04:34.654 --> 00:04:40.491
here.
&gt;&gt; Mike North: So

61
00:04:40.491 --> 00:04:49.154
if I've got,
&gt;&gt; Mike North: I

62
00:04:49.154 --> 00:04:52.860
just wanna make execution
a little bit more clear.

63
00:04:52.860 --> 00:04:56.845
Give myself some indications of stuff

64
00:04:56.845 --> 00:05:03.877
happening.
&gt;&gt; Mike North: Actually I

65
00:05:03.877 --> 00:05:08.340
shouldn't need all of that, but
we will, we'll just do that.

66
00:05:08.340 --> 00:05:09.510
That's great.

67
00:05:09.510 --> 00:05:11.480
So I'll run this.

68
00:05:11.480 --> 00:05:13.290
My sequence has been defined.

69
00:05:13.290 --> 00:05:21.000
So we'll say, let it equals my sequence.
&gt;&gt; Mike North: So

70
00:05:21.000 --> 00:05:25.192
it may be surprising to some,
if these were a normal function,

71
00:05:25.192 --> 00:05:28.310
what would happen if I did this?

72
00:05:28.310 --> 00:05:31.680
I guess that's probably the fact
that may be a surprise here.

73
00:05:32.810 --> 00:05:35.435
Most would expect that I
would hit this break point.

74
00:05:35.435 --> 00:05:40.105
[SOUND] But I don't.

75
00:05:40.105 --> 00:05:43.496
And the idea here is we've basically,

76
00:05:43.496 --> 00:05:49.510
we've got the interator that
this generator function returns.

77
00:05:49.510 --> 00:05:52.280
But until we ask it for its first value

78
00:05:52.280 --> 00:05:55.760
it's not going to begin executing
code within the generator function.

79
00:05:56.890 --> 00:06:02.440
If we call it next, now we're gonna
hit that break point, and we're

80
00:06:02.440 --> 00:06:06.550
basically gonna keep going, keep executing
code until we hit that first yield.

81
00:06:08.420 --> 00:06:10.640
We're gonna go execute that,

82
00:06:10.640 --> 00:06:16.300
we're in this a while through,
basically we set up some initial Stuff.

83
00:06:16.300 --> 00:06:21.690
And then we enter this loop that will
infinitely keep emitting values.

84
00:06:21.690 --> 00:06:25.538
So we're gonna console log before yield
and we'll see that pop out in the bottom

85
00:06:25.538 --> 00:06:32.121
of our console here.
&gt;&gt; Mike North: So,

86
00:06:32.121 --> 00:06:35.210
I had my buttons, so that's perfect.

87
00:06:36.910 --> 00:06:40.070
So I'll hit next function call.

88
00:06:40.070 --> 00:06:42.030
So there's our before yield popping out.

89
00:06:43.400 --> 00:06:47.220
And now if we're gonna say
step over next function call,

90
00:06:49.100 --> 00:06:53.140
now you see the value just popped out and
we're no longer frozen at a break point.

91
00:06:53.140 --> 00:06:56.030
So think of it as we've
stopped right there,

92
00:06:56.030 --> 00:06:59.410
right where my cursor is to
the left of the y and yield.

93
00:06:59.410 --> 00:07:06.030
We've frozen there and we are paused and
like I should do this sorry,

94
00:07:06.030 --> 00:07:09.912
this is a more meaningful example here,

95
00:07:09.912 --> 00:07:16.209
it's not gonna change anything
we've done up until this point,

96
00:07:23.191 --> 00:07:24.420
&gt;&gt; Mike North: So there's our value.

97
00:07:25.420 --> 00:07:28.140
And now, when we ask for the next value,

98
00:07:28.140 --> 00:07:32.480
we're basically going to
begin execution on line six.

99
00:07:32.480 --> 00:07:34.230
We're going to pick up where we left off.

100
00:07:36.000 --> 00:07:36.700
And we'll be there.

101
00:07:37.760 --> 00:07:42.550
And if keep stepping, we're gonna turn
around and go through the why loop again,

102
00:07:42.550 --> 00:07:47.630
basically running until we hit the next
yield and then we've emitted a new value.

103
00:07:47.630 --> 00:07:51.690
So this is a much nicer way of
defining an iterative algorithm.

104
00:07:51.690 --> 00:07:56.000
And we have the potential here to
define infinitely long sequences, or

105
00:07:56.000 --> 00:07:58.230
things that you couldn't
represent as a list.

106
00:07:58.230 --> 00:08:03.014
Where maybe it's like 360 degrees
when then you turn back around and

107
00:08:03.014 --> 00:08:08.194
go to zero again and it's sort of like
a ring sequence that you can go around and

108
00:08:08.194 --> 00:08:14.550
round and round, right.
&gt;&gt; Mike North: So does everyone like?

109
00:08:14.550 --> 00:08:17.471
This is pretty new to most people,

110
00:08:17.471 --> 00:08:20.460
Python has a similar concept,
it have generators in Python.

111
00:08:21.770 --> 00:08:26.960
But the point here is when I talk
about execution being paused,

112
00:08:26.960 --> 00:08:31.710
basically we run in the generator
function up until we yield something,

113
00:08:32.990 --> 00:08:36.590
right, and then, we paused.

114
00:08:36.590 --> 00:08:41.779
Because we've just like reached
our first value and rekindled out.

115
00:08:41.779 --> 00:08:44.240
And then when you ask the iterator for
the next value,

116
00:08:44.240 --> 00:08:46.160
you go back in exactly where you left off.

117
00:08:47.260 --> 00:08:50.950
And you emit your next value,
until you hit or and

118
00:08:50.950 --> 00:08:54.100
you play forward until
you hit your next yield.

119
00:08:54.100 --> 00:08:59.455
And that’s your next value.And you keep
doing that again and again and again.

120
00:08:59.455 --> 00:09:00.400
Yes.
&gt;&gt; Speaker 2: So

121
00:09:00.400 --> 00:09:02.990
when you,
second time around when you hit line 2 and

122
00:09:02.990 --> 00:09:06.420
you have that variable assignment.
&gt;&gt; Mike North: That happens once, only for

123
00:09:06.420 --> 00:09:09.200
the first.
&gt;&gt; Speaker 2: So all the signs only happen

124
00:09:09.200 --> 00:09:14.177
the first time, period.
&gt;&gt; Mike North: Only because of the way

125
00:09:14.177 --> 00:09:17.512
I've defined this function here.
&gt;&gt; Speaker 2: It's only because

126
00:09:17.512 --> 00:09:20.850
[INAUDIBLE] in the while loop, basically?
&gt;&gt; Mike North: Yes, cuz when I ask for

127
00:09:20.850 --> 00:09:24.490
my first, let's restart here,
when I ask for my first value,

128
00:09:30.090 --> 00:09:32.920
grab my iterator, grab my first value.

129
00:09:32.920 --> 00:09:35.930
So basically the rule here is,

130
00:09:35.930 --> 00:09:39.510
you start executing lines of
code until you hit a yield.

131
00:09:39.510 --> 00:09:43.540
And in this case, we're starting at the
very top of the generator function right?

132
00:09:43.540 --> 00:09:47.350
And so, we're going to grow
through that first step there and

133
00:09:47.350 --> 00:09:50.550
we're gonna go like that and
then yield and there's our value.

134
00:09:50.550 --> 00:09:52.190
And the next time we do it again,

135
00:09:52.190 --> 00:09:55.960
we're basically caught in this loop
that we're forever gonna be caught in.

136
00:09:55.960 --> 00:09:59.920
And that has more to do with the fact
that we're in a wild through,

137
00:09:59.920 --> 00:10:02.934
than the nature of the generator function.
&gt;&gt; Speaker 2: Got

138
00:10:02.934 --> 00:10:03.615
it.
&gt;&gt; Mike North: But

139
00:10:03.615 --> 00:10:08.940
this would look like a funky function for
sure, this would seize your browser up.

140
00:10:08.940 --> 00:10:13.610
Except for the fact that, at every yield
that indicates that were sort of releasing

141
00:10:13.610 --> 00:10:18.480
the value and we can just ask for as many
things of this as we want, until we run

142
00:10:18.480 --> 00:10:23.790
out of the ability to represent powers
of tools as JavaScript numbers.

143
00:10:23.790 --> 00:10:25.394
If I did something like this

144
00:10:40.511 --> 00:10:45.118
&gt;&gt; Mike North: And we first.
&gt;&gt; Mike North: I'm

145
00:10:45.118 --> 00:10:47.809
just gonna set break point everywhere so
we can see really easily.

146
00:10:50.410 --> 00:10:51.610
So we grab our iterator.

147
00:10:53.150 --> 00:10:55.480
Next is going to be frontend.

148
00:10:55.480 --> 00:10:57.020
There it is.

149
00:10:57.020 --> 00:11:03.350
Masters, workshop, and now we're done.

150
00:11:03.350 --> 00:11:10.510
So the iterator is done once we reach
the end of this generator functions block.

151
00:11:10.510 --> 00:11:13.490
For the end of the function scope.

152
00:11:13.490 --> 00:11:16.957
And it is regarded as like,
we have finished, or you can return,

153
00:11:16.957 --> 00:11:22.690
you can also return.
&gt;&gt; Mike North: Sorry,

154
00:11:22.690 --> 00:11:30.130
and my linter would probably say,
what is that last yield doing there?

155
00:11:30.130 --> 00:11:32.806
Like or in this case,

156
00:11:32.806 --> 00:11:37.862
there is sorry I have to run the snippet,

157
00:11:37.862 --> 00:11:43.216
there is our iterator I'm gonna hit next,

158
00:11:43.216 --> 00:11:47.975
we can hit there is front end masters,

159
00:11:47.975 --> 00:11:52.993
website
&gt;&gt; Mike North: And

160
00:11:52.993 --> 00:11:55.180
then see how it says done true?

161
00:11:55.180 --> 00:11:58.120
I wanna jut let it play,
but does that make sense?

162
00:11:58.120 --> 00:12:01.530
So now, we said, when you hit return,
it's basically saying,

163
00:12:01.530 --> 00:12:04.330
here's your last value and
by the way, I know that I'm finished.

164
00:12:04.330 --> 00:12:07.845
Like if I ask for
the next value here, it's gonna say

165
00:12:09.705 --> 00:12:14.770
&gt;&gt; Mike North: Well, it is not defined.

166
00:12:14.770 --> 00:12:21.100
I might be in a different scope here,
cuz that's where my last debug of this.

167
00:12:21.100 --> 00:12:24.170
So now it's saying,
as many times as I ask for

168
00:12:24.170 --> 00:12:29.080
it here, I'm not clearing,
just See that I keep going there.

169
00:12:29.080 --> 00:12:31.480
It's just gonna say look,
I got nothing for you.

170
00:12:31.480 --> 00:12:37.450
It's almost like, it's just sort of a dead
end at this point because we've returned.

171
00:12:37.450 --> 00:12:42.387
So those are the two situations within a
generator function where the iterator that

172
00:12:42.387 --> 00:12:47.188
it returns says I got nothing for you.
&gt;&gt; Mike North: Does that

173
00:12:47.188 --> 00:12:48.869
make more sense now?
&gt;&gt; Speaker 2: Yeah it totally does.

174
00:12:48.869 --> 00:12:52.744
So one thing that was really nice
about the return though was that

175
00:12:52.744 --> 00:12:57.620
the last object, the last time you called
next, it actually gave you a value.

176
00:12:57.620 --> 00:13:03.809
And done was true whereas with the yields
you had to get that extra object with

177
00:13:03.809 --> 00:13:08.310
the value undefined, and the done true.
&gt;&gt; Mike North: That's true.

178
00:13:09.530 --> 00:13:13.951
So let me see if I can shed some light
as to why it works the way it does.

179
00:13:24.852 --> 00:13:25.830
&gt;&gt; Mike North: Okay, so if we have

180
00:13:25.830 --> 00:13:27.230
a situation like this.

181
00:13:27.230 --> 00:13:33.110
So I'm gonna refresh Grab my function,
all right, there is our iterator.

182
00:13:33.110 --> 00:13:37.618
So the first thing we're gonna say is,
obviously we're gonna say Frontend,

183
00:13:41.035 --> 00:13:45.040
&gt;&gt; Mike North: Masters, workshop.

184
00:13:45.040 --> 00:13:50.610
Now at the time I return this
next value here, True or false?

185
00:13:50.610 --> 00:13:54.153
There is more code to run?
&gt;&gt; Speaker 2: True.

186
00:13:54.153 --> 00:13:54.678
&gt;&gt; Mike North: Right, true, there

187
00:13:54.678 --> 00:13:55.620
is more code to run.

188
00:13:55.620 --> 00:13:59.370
So I'm gonna play this through,
and honestly,

189
00:13:59.370 --> 00:14:01.610
we're still in JavaScript, right?

190
00:14:01.610 --> 00:14:05.730
We don't know whether potentially
several lines below this line of code.

191
00:14:05.730 --> 00:14:07.480
There may be another yield.

192
00:14:07.480 --> 00:14:11.848
We do know we're not the last
line of code In this scope.

193
00:14:11.848 --> 00:14:13.172
&gt;&gt; Speaker 2: Nice.

194
00:14:13.172 --> 00:14:13.718
&gt;&gt; Mike North: Right,

195
00:14:13.718 --> 00:14:18.242
or we don't even know that, but,
there is no way to know necessarily

196
00:14:18.242 --> 00:14:20.230
whether after this.
&gt;&gt; Speaker 2: Yeah.

197
00:14:20.230 --> 00:14:21.410
&gt;&gt; Mike North: So, at this point now we're

198
00:14:21.410 --> 00:14:24.310
gonna see no value returned.

199
00:14:24.310 --> 00:14:27.060
But that last little bit
of code's gonna run.

200
00:14:27.060 --> 00:14:28.900
And it's still gonna return undefined.

201
00:14:28.900 --> 00:14:31.290
Or it's still gonna emit undefined.
&gt;&gt; Speaker 2: Awesome, thank you.

202
00:14:31.290 --> 00:14:31.990
&gt;&gt; Mike North: Does that make more sense?

203
00:14:31.990 --> 00:14:33.030
&gt;&gt; Speaker 2: It makes a lot more sense,

204
00:14:33.030 --> 00:14:34.750
yeah.
&gt;&gt; Mike North: Because at a return,

205
00:14:34.750 --> 00:14:36.060
you know you're done.

206
00:14:36.060 --> 00:14:38.330
That is what a return means.

207
00:14:38.330 --> 00:14:42.390
Returns, it still works in the way
you would expect it to work in this

208
00:14:42.390 --> 00:14:44.460
generator function, meaning.

209
00:14:44.460 --> 00:14:50.470
Within that function scope,
like you are calling it, the game's over.

210
00:14:50.470 --> 00:14:53.860
Yield makes no such assumption.

211
00:14:53.860 --> 00:14:56.210
In fact, it has to assume the opposite,

212
00:14:56.210 --> 00:15:00.920
it has to assume there's a possibility
that there may be other stuff there.

213
00:15:00.920 --> 00:15:05.470
Now a for
of loop will take care of that for you.

214
00:15:05.470 --> 00:15:10.358
It will basically handle both

215
00:15:10.358 --> 00:15:16.220
cases the way you would hope it would

216
00:15:16.220 --> 00:15:22.280
handle both cases, so in this case,

217
00:15:22.280 --> 00:15:27.168
if we do something like this,

218
00:15:27.168 --> 00:15:32.641
then we do little more space so for

219
00:15:32.641 --> 00:15:37.740
let v for value of mySequence.

220
00:15:46.478 --> 00:15:50.650
&gt;&gt; Mike North: So
I know it's a little confusing here.

221
00:15:50.650 --> 00:15:55.424
Let me see if I can make
it a little bit more

222
00:15:55.424 --> 00:15:59.877
obvious,
&gt;&gt; Mike North: Cuz console

223
00:15:59.877 --> 00:16:03.670
logs from within the function
versus from the outside.

224
00:16:03.670 --> 00:16:08.896
So these are the ones here front end,
masters, workshop,

225
00:16:08.896 --> 00:16:14.869
those are yielded out, and
that is being logged as a result of this.

226
00:16:14.869 --> 00:16:19.750
You'll note that it did not attempt
to log that last value with this

227
00:16:19.750 --> 00:16:21.830
little caret here.

228
00:16:21.830 --> 00:16:27.199
It did finish the iterator,
it just basically finish the iterator and

229
00:16:27.199 --> 00:16:31.840
decided that it does not need
to invoke that block expression

230
00:16:31.840 --> 00:16:34.572
that is attached to that foreloop.

231
00:16:34.572 --> 00:16:38.418
It will get the next thing and
it will basically say, all right, and

232
00:16:38.418 --> 00:16:42.280
I ran this iterator and the values
are undefined and we are now done.

233
00:16:42.280 --> 00:16:45.320
So you do not really get
another turn of this loop.

234
00:16:45.320 --> 00:16:46.700
&gt;&gt; Speaker 2: Is that because it was

235
00:16:46.700 --> 00:16:53.140
undefined or because it was done?
&gt;&gt; Mike North: So let me

236
00:16:53.140 --> 00:16:58.550
see if I can express it a different way,
to make sure we're 100% clear on this.

237
00:16:58.550 --> 00:17:04.020
So the second to last value here
workshop Right for the second

238
00:17:04.020 --> 00:17:10.050
to last thing it pulled off of the
iterator was value of workshop done false.

239
00:17:10.050 --> 00:17:13.520
So think of it as internally
within the implementation of for

240
00:17:13.520 --> 00:17:16.530
of, it's gonna pull the next
value on the iterator.

241
00:17:16.530 --> 00:17:19.570
And recognize that it is not in fact,

242
00:17:19.570 --> 00:17:24.250
we're not yielding undefined,
that doesn't really make any sense.

243
00:17:24.250 --> 00:17:28.080
So it will finish the iterator, but

244
00:17:28.080 --> 00:17:31.250
you don't get another turn of the for
loop, right?

245
00:17:33.280 --> 00:17:37.171
The interesting thing is if we do this

246
00:17:44.334 --> 00:17:45.267
&gt;&gt; Mike North: Interesting.

247
00:17:47.230 --> 00:17:51.650
Okay, so now we're seeing it expects
the iteration to behave the same way.

248
00:17:51.650 --> 00:17:57.475
It expects the iteration to behave as it
does in the yield case, and it return

249
00:17:57.475 --> 00:18:02.846
as regarded as like, so it basically
says when it see it's done, it is

250
00:18:02.846 --> 00:18:06.780
saying [CROSSTALK] value was the last one.
&gt;&gt; Speaker 2: Right.

251
00:18:06.780 --> 00:18:11.350
So the only way to really,
it's yield is really my iteration

252
00:18:11.350 --> 00:18:13.910
functionality, not, yeah.
&gt;&gt; Mike North: You may want to use

253
00:18:13.910 --> 00:18:16.850
return as a tool for as early termination

254
00:18:16.850 --> 00:18:20.531
because that is a way to sort of say.
&gt;&gt; Speaker 2: But that's not my way to get

255
00:18:20.531 --> 00:18:22.391
back to the function.
&gt;&gt; Mike North: Yeah,

256
00:18:22.391 --> 00:18:27.017
so this hopefully gives some
clarity around this now, sweet,

257
00:18:27.017 --> 00:18:32.513
because we are going to be playing with
this today And this is, this is a cool

258
00:18:32.513 --> 00:18:38.390
new JavaScript language construct that
opens a lot of interesting doors here.

259
00:18:39.670 --> 00:18:43.660
So as we saw, execution is paused, right?

260
00:18:43.660 --> 00:18:48.100
Between times that we pull
items out of that iterator.

261
00:18:48.100 --> 00:18:52.570
And generator functions and
iterators they are very closely related.

262
00:18:52.570 --> 00:18:57.430
So this is great for defining
an iterative algorithm, especially ones

263
00:18:57.430 --> 00:19:01.440
that maybe we don't necessarily know the,
they don't have a well defined length

