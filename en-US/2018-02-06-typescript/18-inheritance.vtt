WEBVTT

1
00:00:00.530 --> 00:00:04.080
&gt;&gt; Mike North: So
in terms of how inheritance works, if we

2
00:00:04.080 --> 00:00:09.720
have a class like this, we can create
a subclass by using the extend keyword.

3
00:00:09.720 --> 00:00:15.410
And in addition to that,
we get a super keyword that can be

4
00:00:15.410 --> 00:00:19.410
used to call methods on the parent class,
or to call parent class's constructor.

5
00:00:19.410 --> 00:00:23.500
I say it's a keyword just because it
can be used in two different ways.

6
00:00:23.500 --> 00:00:26.671
So here is our subclass of Employee, and

7
00:00:26.671 --> 00:00:30.414
you can see that Employee takes an id and
a name.

8
00:00:30.414 --> 00:00:34.000
It makes sure,
using this parent constructor here.

9
00:00:34.000 --> 00:00:38.017
It makes sure that when
Employee's constructor says,

10
00:00:38.017 --> 00:00:40.756
Person constructor, do your thing.

11
00:00:40.756 --> 00:00:43.983
Make sure you store this
name I'm giving you,

12
00:00:43.983 --> 00:00:48.634
as member data on this object,
it just has to pass that name along.

13
00:00:48.634 --> 00:00:52.030
And we're treating super
like a function here, and

14
00:00:52.030 --> 00:00:54.355
then we can do whatever we wanna do.

15
00:00:54.355 --> 00:00:57.587
Later on, we can use super
a different way, and here,

16
00:00:57.587 --> 00:01:02.540
we are getting a parent prototype's
method, we're saying super to JSON.

17
00:01:02.540 --> 00:01:07.690
So essentially,
we're basically extending the result of

18
00:01:07.690 --> 00:01:12.290
what Person was doing for this function,
and adding something to it.

19
00:01:12.290 --> 00:01:14.810
We'll worry about what those
three dots mean later.

20
00:01:14.810 --> 00:01:17.619
But I just want you to see that
in a constructor, typically,

21
00:01:17.619 --> 00:01:19.505
you invoke super as if it's a function.

22
00:01:19.505 --> 00:01:24.403
In other member functions,
you use super as a reference to sort of

23
00:01:24.403 --> 00:01:29.940
the parent class version of,
typically, one's own function, right?

24
00:01:29.940 --> 00:01:32.413
So often, you see this pattern
where you're into JSON,

25
00:01:32.413 --> 00:01:34.898
you're implementing it there and
you would call super.

26
00:01:34.898 --> 00:01:38.516
Which would be like, do what your
parent class was gonna do, and

27
00:01:38.516 --> 00:01:42.280
then we can incorporate that into
whatever the subclass is doing.

28
00:01:44.200 --> 00:01:48.891
So in this case, if we did something like
this, we would end up with not only name

29
00:01:48.891 --> 00:01:51.919
being in the JSON, but
the Employee's id as well.

30
00:01:55.254 --> 00:01:57.925
&gt;&gt; Mike North: So earlier,
I mentioned this concept of species,

31
00:01:57.925 --> 00:02:00.700
I'm not gonna give you
an exercise on species.

32
00:02:00.700 --> 00:02:04.040
I do want you to kind
of understand this as

33
00:02:04.040 --> 00:02:07.520
one of two examples we're gonna see over
this course, of how symbols are used.

