WEBVTT

1
00:00:00.610 --> 00:00:04.302
&gt;&gt; Mike North: So
we're going to build a functional cashier.

2
00:00:04.302 --> 00:00:09.130
So this is gonna illustrate the power
of functions and closures and

3
00:00:09.130 --> 00:00:14.230
give us a little bit more
practice around interfaces,

4
00:00:14.230 --> 00:00:15.990
and types, and
how they play with functions.

5
00:00:17.510 --> 00:00:21.864
So what we wanna do is we can invoke
a function called cashier and

6
00:00:21.864 --> 00:00:27.190
this should be stabbed out in
the starting point for the exercise.

7
00:00:27.190 --> 00:00:29.470
And whatever value we capture there,
it's gonna

8
00:00:30.510 --> 00:00:35.360
have sort of an API on it that we can
use to add things to a shopping cart.

9
00:00:35.360 --> 00:00:37.290
So you can see we can add one apple.

10
00:00:37.290 --> 00:00:40.130
Note that we're not passing
a third parameter there.

11
00:00:40.130 --> 00:00:45.120
So sort of, unless you specify quantity
as we did when we are adding pears,

12
00:00:45.120 --> 00:00:47.290
the assumption is,
just add one to my cart.

13
00:00:48.490 --> 00:00:51.865
We should also be able to add
an item in that following way.

14
00:00:51.865 --> 00:00:55.840
Right, where we're passing an object
of that particular structure.

15
00:00:55.840 --> 00:00:59.790
When I say structure,
you should be thinking interface, maybe.

16
00:00:59.790 --> 00:01:02.589
And then, finally, the cart.length and

17
00:01:02.589 --> 00:01:06.740
cart.total properties,
I advise you use a getter there.

18
00:01:06.740 --> 00:01:08.760
So that when we access
that property value,

19
00:01:08.760 --> 00:01:11.830
you can sort of iterate over
your array of items and

20
00:01:11.830 --> 00:01:17.090
you can figure out how many items you
have or how much your total bill is.

21
00:01:17.090 --> 00:01:21.660
Keep in mind, I'm sorry that I did
not get this into the slide, and

22
00:01:21.660 --> 00:01:24.120
I just realized there's ambiguity.

23
00:01:24.120 --> 00:01:28.630
In terms of the count of items,
we would regard it as how many

24
00:01:28.630 --> 00:01:33.000
individual things are in your cart, not
how many types of items are in your cart.

25
00:01:33.000 --> 00:01:36.675
So, two pairs count as two items.

26
00:01:36.675 --> 00:01:39.195
So when you're returning cart.length,

27
00:01:39.195 --> 00:01:42.350
in this case it would be two
plus three plus one is six.

28
00:01:43.650 --> 00:01:44.189
Makes sense?

29
00:01:46.020 --> 00:01:49.420
All right, I gave you some shapes

30
00:01:50.460 --> 00:01:54.330
to use as the basis for
designing your interfaces.

31
00:01:54.330 --> 00:01:57.880
So items that can be added to the cart
should look kind of like this.

32
00:01:57.880 --> 00:02:02.960
And an object that is returned by
the cashier function, and add, and

33
00:02:02.960 --> 00:02:06.450
addItem, it should look like this, right?

34
00:02:06.450 --> 00:02:11.720
And the reason we return it from add and
addItem is so that, as demonstrated by

35
00:02:11.720 --> 00:02:17.343
this slide here, we should be able to kind
of just keep chaining .add, .add, .add.

36
00:02:17.343 --> 00:02:21.630
If youâ€™ve used promises before,
.then, .then, same concept.

37
00:02:21.630 --> 00:02:24.740
So you wanna kinda keep returning
the same API so that you can chain, and

38
00:02:24.740 --> 00:02:25.270
chain, and chain.

