WEBVTT

1
00:00:00.660 --> 00:00:04.840
&gt;&gt; Mike North: So let's look at
the solution for this first exercise.

2
00:00:04.840 --> 00:00:08.969
We're just gonna be working
in color-utils, and

3
00:00:08.969 --> 00:00:11.470
I'll bring the tests up here.

4
00:00:12.780 --> 00:00:14.160
Actually they're still running.

5
00:00:14.160 --> 00:00:18.460
So just complete the story here.

6
00:00:18.460 --> 00:00:20.160
Npm test color functions.

7
00:00:22.570 --> 00:00:27.511
And when this pops up, if you hit Enter,
you'll get rid of that little message,

8
00:00:27.511 --> 00:00:30.853
and we can see that we're
passing the first two tests,

9
00:00:30.853 --> 00:00:35.506
which assert that the correct functions
are exported from this module, and

10
00:00:35.506 --> 00:00:38.290
basically failing almost everything else.

11
00:00:40.510 --> 00:00:42.490
So hex to RGB,

12
00:00:42.490 --> 00:00:47.440
we want that, just if we look at
this situation here, and that these,

13
00:00:47.440 --> 00:00:52.980
we can kind of understand what types
these functions are designed to receive.

14
00:00:52.980 --> 00:00:57.309
So hex to RGB should take in a string
called hex, or whatever we want to

15
00:00:57.309 --> 00:01:01.727
call it, and there's our type
annotation and it's going to return.

16
00:01:01.727 --> 00:01:08.234
Anyone want to tell me what type
this function's gonna return?

17
00:01:08.234 --> 00:01:08.902
&gt;&gt; Speaker 2: An object?

18
00:01:08.902 --> 00:01:11.141
An object, yeah.

19
00:01:11.141 --> 00:01:13.390
Three numbers.

20
00:01:13.390 --> 00:01:17.039
&gt;&gt; Mike North: Okay, so it's an object
with three numbers but I'm still missing

21
00:01:17.039 --> 00:01:20.751
some information that I need to-
&gt;&gt; Speaker 2: R number, g number,

22
00:01:20.751 --> 00:01:27.419
b number:
&gt;&gt; Mike North: Great.

23
00:01:27.419 --> 00:01:31.023
And so now the type script is telling us,

24
00:01:31.023 --> 00:01:35.793
you have not returned a value
that matches this type.

25
00:01:35.793 --> 00:01:38.920
So we've stated that this
must return this thing.

26
00:01:38.920 --> 00:01:42.610
And basically every path
through this function.

27
00:01:42.610 --> 00:01:47.010
For example if we had a condition that in
some situation was not returning this,

28
00:01:47.010 --> 00:01:48.560
we would get yelled at.

29
00:01:48.560 --> 00:01:53.122
It is ensuring that we've made
a guarantee, we've stated our intent, and

30
00:01:53.122 --> 00:01:57.468
now we have to follow through on it and
make sure that whatever this does,

31
00:01:57.468 --> 00:02:00.710
it eventually is going
to return that thing.

32
00:02:00.710 --> 00:02:05.624
Here we are going to take in R,
G and B, and those,

33
00:02:05.624 --> 00:02:12.182
all three of them, are numbers,
and it's gonna return a string.

34
00:02:12.182 --> 00:02:17.370
And we're getting yelled at for
a similar reason here.

35
00:02:18.640 --> 00:02:22.640
So it's saying, a function whose
declared type is neither void nor

36
00:02:22.640 --> 00:02:24.530
any must return a value.

37
00:02:24.530 --> 00:02:29.240
Void would indicate this function does
not, it basically returns undefined.

38
00:02:29.240 --> 00:02:31.060
Right, there's no value to be captured.

39
00:02:34.190 --> 00:02:36.120
So let's proceed.

40
00:02:36.120 --> 00:02:39.420
So for hexToRgb, we've basically got,

41
00:02:39.420 --> 00:02:41.890
if you think about our string,
it looks like this.

42
00:02:41.890 --> 00:02:46.892
FF0000, something like that,
and if we break it up, it's

43
00:02:46.892 --> 00:02:53.113
almost like we've got pairs of numbers
that correspond to each color channel.

44
00:02:53.113 --> 00:02:59.984
And we have to prepared for the case
where we've got something like this too.

45
00:02:59.984 --> 00:03:06.810
So I'm gonna do, I'm just gonna
have a hacky type solution to this.

46
00:03:06.810 --> 00:03:09.743
And we can say something like this.

47
00:03:09.743 --> 00:03:15.504
Let RGB equal string, oops,

48
00:03:15.504 --> 00:03:21.265
equal hex, and this is,

49
00:03:21.265 --> 00:03:26.830
I guess we can't do that.

50
00:03:26.830 --> 00:03:28.600
So we'll do it like this.

51
00:03:30.350 --> 00:03:35.359
So if hex length is 3,

52
00:03:35.359 --> 00:03:42.489
then we're going to hextoRgb.

53
00:03:53.009 --> 00:03:57.704
&gt;&gt; Mike North: Sorry,
it's tough to talk and

54
00:03:57.704 --> 00:04:03.310
type at the same time, hr, hg, hb.

55
00:04:05.040 --> 00:04:09.837
So now effectively we've got those three
variables representing those characters.

56
00:04:12.599 --> 00:04:16.274
&gt;&gt; Mike North: And we're just gonna
basically double each character and

57
00:04:16.274 --> 00:04:17.180
pass that in.

58
00:04:19.120 --> 00:04:23.418
So now from this point on we can know

59
00:04:23.418 --> 00:04:26.757
that,
&gt;&gt; Mike North: Our

60
00:04:26.757 --> 00:04:30.130
string is gonna be six characters long.

61
00:04:30.130 --> 00:04:32.620
We've taken care of
the three character case and

62
00:04:32.620 --> 00:04:35.170
sort of merged it with
the six character case.

63
00:04:35.170 --> 00:04:39.620
If I hover over this hexToRgb,
you can see in this lower part.

64
00:04:41.480 --> 00:04:46.889
There we go, you can see that there is
there is awareness in this editor, okay?

65
00:04:46.889 --> 00:04:51.780
Visual Studio Code knows that this
is the function that takes a string,

66
00:04:51.780 --> 00:04:55.384
and it returns an object with r,
g and b properties.

67
00:04:55.384 --> 00:04:58.550
So if I were to pass in something
that's not a string, it would complain.

68
00:04:58.550 --> 00:05:00.680
This is type safety working for us.

69
00:05:00.680 --> 00:05:04.800
So down here, I know hat am gonna
have a six character hex string.

70
00:05:04.800 --> 00:05:09.420
Or assuming I get reasonable input here,
right?

71
00:05:09.420 --> 00:05:11.530
I guess we could pass in undefined or
something, but

72
00:05:11.530 --> 00:05:12.670
we won't worry about that for now.

73
00:05:14.220 --> 00:05:19.130
So what we're gonna do then is, we want
to basically break this up into color

74
00:05:19.130 --> 00:05:23.750
channels, and we could think of that
as two character offsets, right?

75
00:05:23.750 --> 00:05:26.818
Pairs of characters starting at 0,
2 and 4.

76
00:05:29.668 --> 00:05:34.349
&gt;&gt; Mike North: So let's say0,
2, 4, map(offset, and

77
00:05:34.349 --> 00:05:40.360
we'll then say hex.substring,
starting at the offset.

78
00:05:41.700 --> 00:05:44.188
And leave it up to offset plus 2.

79
00:05:44.188 --> 00:05:48.024
So this will give us something
that looks like this.

80
00:05:53.732 --> 00:05:56.680
&gt;&gt; Mike North: Okay, so that's step one.

81
00:05:56.680 --> 00:05:59.970
And of course, we can merge
a couple things together here and

82
00:05:59.970 --> 00:06:00.840
make this more efficient.

83
00:06:00.840 --> 00:06:04.230
I like to optimize for readability here.

84
00:06:04.230 --> 00:06:09.270
So now we've got individual
hex color channels, and

85
00:06:09.270 --> 00:06:13.974
basically we want to get
to them into integers, so

86
00:06:13.974 --> 00:06:19.350
hex channel,
we're gonna parse in knowing it's 16,

87
00:06:19.350 --> 00:06:23.735
and that should gives
us something like that.

88
00:06:27.669 --> 00:06:29.920
&gt;&gt; Mike North: We should be
able to return that right away.

89
00:06:29.920 --> 00:06:34.770
So we've got our hexToRgb working,
I think in all cases now.

90
00:06:34.770 --> 00:06:37.590
At least a bunch of them.

91
00:06:37.590 --> 00:06:39.500
So this is gonna end up
with something like.

92
00:06:42.008 --> 00:06:43.384
&gt;&gt; Mike North: And this down here is.

93
00:06:48.174 --> 00:06:51.450
&gt;&gt; Mike North: So those were our
stages of transformation there.

94
00:06:53.030 --> 00:06:53.960
Sorry I have a typo.

95
00:06:55.170 --> 00:06:55.980
Great.

96
00:06:55.980 --> 00:07:00.340
Now note that,
that was that allowing it to compile.

97
00:07:00.340 --> 00:07:00.840
Interesting.

98
00:07:03.020 --> 00:07:06.760
So down here, and by the way,
now this is not complaining anymore,

99
00:07:06.760 --> 00:07:11.704
this function's done,
the type script compiler's happy.

100
00:07:11.704 --> 00:07:17.030
For rgbToHex, ultimately,
we wanna look at this as, we've got r,

101
00:07:17.030 --> 00:07:21.110
g and b values, we need them to be
converted to their hex presentation and

102
00:07:21.110 --> 00:07:23.190
then sort of smooshed
together in a string.

103
00:07:23.190 --> 00:07:27.800
So I expect we're gonna start with r,
g and b like this, and

104
00:07:27.800 --> 00:07:32.090
eventually we'll join them
together in a string like that.

105
00:07:32.090 --> 00:07:35.916
But obviously we have to do
some stuff in the middle.

106
00:07:35.916 --> 00:07:38.669
The first thing we wanna do is convert,

107
00:07:38.669 --> 00:07:44.090
we'll call this a decimal channel,
we'll convert that to hex.

108
00:07:44.090 --> 00:07:51.188
So we can say,
&gt;&gt; Mike North: Convert it like that,

109
00:07:51.188 --> 00:07:53.190
and then we'll hit save.

110
00:07:53.190 --> 00:07:54.880
And we're still failing four tests.

111
00:07:56.450 --> 00:07:57.960
Let's see up here.

112
00:07:57.960 --> 00:08:03.810
So if we look up here,
we can see the tests that we're failing.

113
00:08:03.810 --> 00:08:05.070
This is an interesting one, and

114
00:08:05.070 --> 00:08:09.610
we'll come back to it later,
this one's telling us something here.

115
00:08:09.610 --> 00:08:12.992
Can anyone guess what's
going on with this test?

116
00:08:17.961 --> 00:08:21.416
&gt;&gt; Mike North: So
what's the hex presentation of 2,5,5?

117
00:08:21.416 --> 00:08:24.430
&gt;&gt; Speaker 3: [INAUDIBLE]
&gt;&gt; Mike North: Right.

118
00:08:24.430 --> 00:08:26.278
And what's hex representation of 0?

119
00:08:26.278 --> 00:08:27.809
&gt;&gt; Speaker 3: 00.

120
00:08:29.160 --> 00:08:30.792
&gt;&gt; Mike North: Well, we want it to be 00,

121
00:08:30.792 --> 00:08:33.450
but I think it's just 0 in this case,
right?

122
00:08:33.450 --> 00:08:37.870
We don't have that double-digit value.

123
00:08:37.870 --> 00:08:44.880
So we can just add another map in here,
saying, hexCh.length,

124
00:08:44.880 --> 00:08:52.080
if it's 1,
then we'll just pad it with a 0.

125
00:08:52.080 --> 00:08:53.090
Otherwise leave it alone.

126
00:08:56.170 --> 00:08:58.800
That should do it, with one exception.

127
00:08:58.800 --> 00:09:01.750
So here we can see we're passing in 299.

128
00:09:01.750 --> 00:09:05.579
We're basically over-shooting the value

129
00:09:05.579 --> 00:09:10.776
of,
&gt;&gt; Mike North: Well,

130
00:09:10.776 --> 00:09:13.590
we've got two failing actually let's see,
both failing.

131
00:09:13.590 --> 00:09:18.260
Okay, so in this case we're overshooting
our maximum allowed value for r, and

132
00:09:18.260 --> 00:09:23.190
we're got 12b, that's the representation
of the red channel, and

133
00:09:23.190 --> 00:09:26.900
down here we've got -1e.

134
00:09:26.900 --> 00:09:28.880
That is the representation of -30.

135
00:09:28.880 --> 00:09:31.800
So basically out of bounds values
are not being treated well,

136
00:09:33.380 --> 00:09:37.250
when we're taking in r, g and b values.

137
00:09:37.250 --> 00:09:42.180
So what we can do here is kind of
box this value in between 0 and

138
00:09:42.180 --> 00:09:46.769
255, and MathMax and
MathMin are great for this.

139
00:09:48.500 --> 00:09:54.670
So we're gonna take the maximum of 0, or
the color channel, whichever is greater.

140
00:09:56.100 --> 00:09:58.405
Now we took care of one case and
here's the other one.

141
00:10:03.111 --> 00:10:04.500
&gt;&gt; Mike North: And
now we're passing everything.

142
00:10:06.260 --> 00:10:10.826
So just to show you how you could use this
code runner to test this kind of thing.

143
00:10:20.525 --> 00:10:22.210
&gt;&gt; Mike North: You just
do something like this.

144
00:10:22.210 --> 00:10:22.945
Hit run.

145
00:10:28.923 --> 00:10:31.040
&gt;&gt; Mike North: And there it is.

146
00:10:31.040 --> 00:10:33.930
So code runner is a great tool to have
in here, especially if you just wanna

147
00:10:33.930 --> 00:10:38.720
experiment, like what would happen if
I tried this and does this is work?

148
00:10:38.720 --> 00:10:40.560
So that's the solution
to the first exercise,

149
00:10:40.560 --> 00:10:45.230
really just intended as warmup and
to get us used to annotations here, and

150
00:10:45.230 --> 00:10:49.830
to hopefully to help you
understand that it keeps us

151
00:10:49.830 --> 00:10:55.120
honest where if we pass something,
for example, into this parse int,

152
00:10:55.120 --> 00:10:59.490
which takes as an argument a string.

153
00:11:00.870 --> 00:11:03.610
If we pass something else into it,
like this,

154
00:11:03.610 --> 00:11:06.200
we would have gotten an error, right.

155
00:11:06.200 --> 00:11:08.630
And so even as we map over things,

156
00:11:08.630 --> 00:11:12.480
basically the types we define when we
take arguments into this function,

157
00:11:12.480 --> 00:11:15.460
they trickle through all of these
functions that we're using.

158
00:11:15.460 --> 00:11:20.997
And the reason is,
TypeScript has baked into it typed

159
00:11:20.997 --> 00:11:25.760
definitions that all of
the JavaScript core functionality for

160
00:11:25.760 --> 00:11:29.444
the DOM API for a lot of stuff.

161
00:11:29.444 --> 00:11:37.200
So it's more than just our code
that has types along with it.

162
00:11:37.200 --> 00:11:41.110
It is all of the code around ours as well.

