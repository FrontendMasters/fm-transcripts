WEBVTT

1
00:00:00.166 --> 00:00:05.754
&gt;&gt; Mike North: Enums are, this is another
concept borrowed from other languages,

2
00:00:05.754 --> 00:00:09.893
so it is an ordered set of items,
members, right,

3
00:00:09.893 --> 00:00:13.460
that all belong in sort of a category.

4
00:00:13.460 --> 00:00:14.940
So we have here an account type,

5
00:00:14.940 --> 00:00:17.730
it could be a checking, a savings,
or a money market account.

6
00:00:18.790 --> 00:00:20.586
Each has a name and a value.

7
00:00:20.586 --> 00:00:27.810
So if you console logged these out,
you might see 0, 1, and 2.

8
00:00:27.810 --> 00:00:30.660
The benefit is they're, at least

9
00:00:30.660 --> 00:00:35.090
from type script's perspective when it's
checking things, it's not just a 0, a 1,

10
00:00:35.090 --> 00:00:39.660
or a 2, it's actually regarded as
a member of that set of items.

11
00:00:39.660 --> 00:00:42.041
So if you had five or six different enums.

12
00:00:42.041 --> 00:00:49.240
You can be assured that this number two
came from the right collection, right?

13
00:00:49.240 --> 00:00:52.280
It sort of has that metadata
associated with it.

14
00:00:52.280 --> 00:00:56.660
Like, this is a two in
the context of account type.

15
00:00:56.660 --> 00:01:01.709
And so now, that has to match in order for
that type equivalence to be happy.

16
00:01:02.950 --> 00:01:05.260
Often, we don't care about the value.

17
00:01:05.260 --> 00:01:09.390
We just want to know that we're capturing
something that belongs to the right

18
00:01:09.390 --> 00:01:12.350
enum type or compare two things.

19
00:01:13.380 --> 00:01:16.820
Getting the number of members
in a type is interesting.

20
00:01:16.820 --> 00:01:23.441
So I'm gonna actually show you what this
translates to in regular job script.

21
00:01:23.441 --> 00:01:29.264
So if we have something like this and this
pertains to the exercise you're gonna do.

22
00:01:29.264 --> 00:01:32.130
I'm gonna have you do
a card dealing thing.

23
00:01:33.480 --> 00:01:36.320
You see we have clubs,
diamonds, hearts, and spades.

24
00:01:36.320 --> 00:01:40.919
And what we have on the right is what this
turns into when we you know build our

25
00:01:40.919 --> 00:01:41.800
JavaScript.

26
00:01:41.800 --> 00:01:43.094
And that is pretty cluttered.

27
00:01:43.094 --> 00:01:45.842
So let's kinda unzip it a little bit.

28
00:01:45.842 --> 00:01:51.253
You can see that this is sort of,
it's an array where,

29
00:01:51.253 --> 00:01:57.015
or it's an object I should say
where if we pass in a number,

30
00:01:57.015 --> 00:02:00.400
we got the name of the enum out.

31
00:02:00.400 --> 00:02:04.580
And if we pass in the name of the enum,
we get the number out.

32
00:02:04.580 --> 00:02:07.820
So it serves as a mapping
in both directions.

33
00:02:07.820 --> 00:02:12.520
The consequence of this is, if we want to
find the number of members in this thing,

34
00:02:12.520 --> 00:02:14.920
we just get the length and divide it by 2.

35
00:02:14.920 --> 00:02:17.988
Hopefully, it should be
pretty clear as to why.

36
00:02:17.988 --> 00:02:23.300
Because, yeah, you're storing
two pieces of data per member.

37
00:02:23.300 --> 00:02:26.660
So if you want to iterate over
these things for example, like say,

38
00:02:26.660 --> 00:02:31.370
to build a deck of cards,
you might want to remember this.

39
00:02:31.370 --> 00:02:33.090
I'm the least sneaky instructor ever.

