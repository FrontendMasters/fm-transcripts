WEBVTT

1
00:00:00.450 --> 00:00:03.110
&gt;&gt; Mike North: So we're gonna go
through the process of building

2
00:00:03.110 --> 00:00:05.220
a Fibonacci generator.

3
00:00:05.220 --> 00:00:07.600
So we're gonna be working
within this function here,

4
00:00:07.600 --> 00:00:13.910
it's generator function that it is meant
to implement the Fibonacci sequence.

5
00:00:13.910 --> 00:00:15.286
So if we run our tests,

6
00:00:23.894 --> 00:00:25.294
&gt;&gt; Mike North: We can see that only one

7
00:00:25.294 --> 00:00:28.920
thing is exported from the module,
so this test is happy.

8
00:00:31.100 --> 00:00:33.300
Get fib sequence returns in iterator,

9
00:00:33.300 --> 00:00:36.380
we really have no other option when
working with generator functions.

10
00:00:36.380 --> 00:00:38.300
We also return an interator.

11
00:00:38.300 --> 00:00:42.614
But then you can see that things sort
of break down from there in that we're

12
00:00:42.614 --> 00:00:46.096
basically, we're getting
undefined as values off of this

13
00:00:46.096 --> 00:00:50.084
iterator meaning it is done to begin with,
there's nothing here.

14
00:00:52.253 --> 00:00:55.400
&gt;&gt; Mike North: So let's get started.

15
00:00:55.400 --> 00:01:00.590
So using this idea of the diagonals
convention that I explained before,

16
00:01:00.590 --> 00:01:05.250
we can say twoAgo.

17
00:01:05.250 --> 00:01:07.860
This is a better name than last class.

18
00:01:07.860 --> 00:01:09.727
TwoAgo equals one.

19
00:01:14.094 --> 00:01:19.572
&gt;&gt; Mike North: oneAgo = 0; while(true)

20
00:01:19.572 --> 00:01:27.466
next value is gonna be twoAgo plus oneAgo.

21
00:01:31.364 --> 00:01:34.544
&gt;&gt; Mike North: And then,
we can yield that out.

22
00:01:34.544 --> 00:01:40.233
And then, our job is basically to
because this closure is preserved.

23
00:01:40.233 --> 00:01:45.603
When we ask for the next number,
we kind of have to update things based

24
00:01:45.603 --> 00:01:50.604
on like we have to shuffle our
numbers around till we are ready for

25
00:01:50.604 --> 00:01:56.437
the next item in the sequence so
in this case, we'll say twoago = oneago,

26
00:01:56.437 --> 00:02:01.437
oneago = nextValue, and
we are ready to turn over the loop again

27
00:02:01.437 --> 00:02:05.996
right so,
&gt;&gt; Mike North: Just thinking through this

28
00:02:05.996 --> 00:02:10.280
It would be and
I could say if I can just pass, great.

29
00:02:10.280 --> 00:02:11.210
So the tests pass.

30
00:02:14.180 --> 00:02:18.570
If we just walk through this
code we start with zero and

31
00:02:18.570 --> 00:02:22.470
one, right, and then we're going to

32
00:02:23.860 --> 00:02:27.690
calculate the next value and
in this case it's going to be one.

33
00:02:27.690 --> 00:02:30.180
Zero plus one is one,
we'll yield that out.

34
00:02:30.180 --> 00:02:31.628
So it's our first number in the sequence.

35
00:02:34.376 --> 00:02:35.089
&gt;&gt; Mike North: Right?

36
00:02:35.089 --> 00:02:38.460
Then the next time we pull something off
of the iterator, we're gonna go down here.

37
00:02:38.460 --> 00:02:40.620
This will still be one, right?

38
00:02:40.620 --> 00:02:46.667
So we'll say,
&gt;&gt; Mike North: We'll

39
00:02:46.667 --> 00:02:50.370
basically say that the old.

40
00:02:50.370 --> 00:02:54.060
All right, so
twoAgo gets the previous value for oneAgo.

41
00:02:54.060 --> 00:02:57.780
This will get the one that
we just returned, right.

42
00:02:58.860 --> 00:03:03.415
And then, we'll turn around the loop and
go back up here, an 0 + 1 is also 1.

43
00:03:07.062 --> 00:03:07.837
&gt;&gt; Mike North: And then,

44
00:03:07.837 --> 00:03:12.500
the next time we pull the iterator
around Twoago is gonna be one.

45
00:03:13.900 --> 00:03:15.280
Oneago is gonna be one.

46
00:03:15.280 --> 00:03:20.020
Cause that's what we just returned,
and then,

47
00:03:20.020 --> 00:03:23.960
we're gonna get two and so on.

48
00:03:23.960 --> 00:03:29.110
So this is like in terms of
making your code more expressive,

49
00:03:29.110 --> 00:03:33.440
this is a pretty expressive way
to describe the nudgy algorithm.

50
00:03:33.440 --> 00:03:34.050
Right.

51
00:03:34.050 --> 00:03:38.060
It doesn't involve explicitly
creating additional closures.

52
00:03:39.410 --> 00:03:44.456
This construct of being able to emit

53
00:03:44.456 --> 00:03:50.083
numbers one by one gives us
a new way to represent this.

54
00:03:50.083 --> 00:03:54.863
Once you understand the way yield works
and the way this generator function pauses

55
00:03:54.863 --> 00:03:59.693
execution at yield, it is a convenient
tool to use for this kind of thing.

