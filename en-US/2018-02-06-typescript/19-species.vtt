WEBVTT

1
00:00:00.350 --> 00:00:03.380
&gt;&gt; Mike North: So
there's a special property on some

2
00:00:03.380 --> 00:00:08.700
classes that is called species and
it's used when we build derived objects.

3
00:00:08.700 --> 00:00:15.040
And in this example we have
below where we're sort of using

4
00:00:15.040 --> 00:00:20.390
species is at work behind the scenes
doing what it does by default.

5
00:00:20.390 --> 00:00:23.915
And we have an array that doesn't
print private information whenever we

6
00:00:23.915 --> 00:00:26.880
console.log.

7
00:00:26.880 --> 00:00:29.330
And we want map and

8
00:00:29.330 --> 00:00:33.830
filter to return regular arrays
that don't have this restriction.

9
00:00:33.830 --> 00:00:38.006
So what happens right now,
if you're familiar with map and filter,

10
00:00:38.006 --> 00:00:40.742
map will return a new
array of equal length and

11
00:00:40.742 --> 00:00:45.153
you specify a function that's used
to transform each element, right.

12
00:00:45.153 --> 00:00:50.128
Filter will return a new array of equal or
less length with a subset of

13
00:00:50.128 --> 00:00:55.400
the elements that pass a test
that you provide, more or less.

14
00:00:55.400 --> 00:00:58.480
So in both of those cases a new
array is being created, so

15
00:00:58.480 --> 00:01:02.420
the question is,
when I pass a subclass of array in.

16
00:01:02.420 --> 00:01:04.780
What am I getting, and the default is,

17
00:01:04.780 --> 00:01:08.220
you're going to be getting an object
of the same type that you passed in.

18
00:01:09.230 --> 00:01:11.130
Think of it like we're going
to grab that instance,

19
00:01:11.130 --> 00:01:14.060
we're going to grab the instructor
off of that instance and

20
00:01:14.060 --> 00:01:18.170
we will use that as the mechanism for
creating a new ray.

21
00:01:18.170 --> 00:01:25.260
Now we can use the symbol species and
just think of it as it is like a different

22
00:01:25.260 --> 00:01:29.220
type of string that will never collide
with real strings, think of it that way.

23
00:01:29.220 --> 00:01:34.640
So it is the value of that
symbol is species, not I'm

24
00:01:34.640 --> 00:01:39.340
using figurative quotes here, there are no
quotes around there cuz it's no a string.

25
00:01:39.340 --> 00:01:44.030
But it is a legal property name, but

26
00:01:44.030 --> 00:01:47.890
it's not a string, so
it will never collide with like a function

27
00:01:47.890 --> 00:01:51.920
whose property name is just species
having nothing to do with symbols.

28
00:01:51.920 --> 00:01:53.650
Does that make sense to everyone?

29
00:01:53.650 --> 00:01:57.070
That's all it is, and
it looks fancy, it looks confusing.

30
00:01:57.070 --> 00:02:00.900
Just think of it as like
another type of string.

31
00:02:00.900 --> 00:02:02.370
Question?
&gt;&gt; Speaker 2: Yeah.

32
00:02:02.370 --> 00:02:02.890
Thank you.

33
00:02:02.890 --> 00:02:05.670
Just asking about the static keyword.

34
00:02:05.670 --> 00:02:09.560
Still doesn't understand that.
&gt;&gt; Mike North: So static calls directly on

35
00:02:09.560 --> 00:02:15.770
the class, but
not available to on instances of a class.

36
00:02:15.770 --> 00:02:21.420
So static keyword would be,
when something is not static,

37
00:02:21.420 --> 00:02:24.540
when something is an instance function.

38
00:02:24.540 --> 00:02:26.300
You have to create a new instance and

39
00:02:26.300 --> 00:02:30.590
then you can call, like,
you can call functions on that instance.

40
00:02:30.590 --> 00:02:34.450
An example would be array to create, like,

41
00:02:34.450 --> 00:02:38.550
you would get the index of a particular
element on an instance of an array.

42
00:02:42.860 --> 00:02:49.145
So a static key word would be like
a static function would be like,

43
00:02:49.145 --> 00:02:53.717
trying to think of a good
one that's familiar to

44
00:02:53.717 --> 00:03:00.879
everyone.
&gt;&gt; Mike North: It

45
00:03:00.879 --> 00:03:03.350
would just be pinned
directly to the constructor.

46
00:03:03.350 --> 00:03:08.220
So let me take a pause here and let me
kick out to show exactly what I mean here.

47
00:03:08.220 --> 00:03:15.893
So if we have a class like this.
&gt;&gt; Mike North: And

48
00:03:15.893 --> 00:03:20.965
we have a member function,
that's called learn.

49
00:03:27.798 --> 00:03:28.798
&gt;&gt; Mike North: I am learning, so

50
00:03:28.798 --> 00:03:33.289
in order to invoke this function, we need
to invoke it on an instance of person.

51
00:03:37.153 --> 00:03:39.210
&gt;&gt; Mike North: Right, so that'll work.

52
00:03:39.210 --> 00:03:42.930
Its type script is happy with that.

53
00:03:42.930 --> 00:03:45.410
A static function would be like this.

54
00:03:56.005 --> 00:03:58.055
&gt;&gt; Mike North: And there if we did this.

55
00:04:00.157 --> 00:04:01.870
&gt;&gt; Mike North: We have a problem.

56
00:04:01.870 --> 00:04:03.800
That function is not
available on the instance.

57
00:04:03.800 --> 00:04:09.920
The reason is,
it's available on the constructor.

58
00:04:09.920 --> 00:04:13.720
So in this situation,
there is no new person.

59
00:04:13.720 --> 00:04:16.800
These are functions that are,

60
00:04:16.800 --> 00:04:21.440
think of them as just functions that
are name spaced based on the class itself.

61
00:04:21.440 --> 00:04:23.650
But they had nothing to do
with a particular instance,

62
00:04:23.650 --> 00:04:28.970
they are not on the prototype because the
prototype has to do with instances, right.

63
00:04:28.970 --> 00:04:32.010
That's the fallback when an instance
doesn't have any data directly.

64
00:04:35.210 --> 00:04:40.260
What this is, it will be something that
is conceptually related to person,

65
00:04:41.930 --> 00:04:45.740
but it does not require a particular
instance in order to work.

66
00:04:46.820 --> 00:04:52.207
You get the exact same thing if
you did something like this.

67
00:04:52.207 --> 00:04:55.657
Up here if we comment this out.

68
00:05:03.303 --> 00:05:05.842
&gt;&gt; Mike North: And here it's gonna be

69
00:05:05.842 --> 00:05:14.397
unhappy with me because I didn't say that
I was gonna have a function here and

70
00:05:14.397 --> 00:05:18.820
really have to do something like this.

71
00:05:18.820 --> 00:05:20.658
We'll talk about function
types in a moment.

72
00:05:26.882 --> 00:05:28.510
&gt;&gt; Mike North: Now it's gonna be happy.

73
00:05:28.510 --> 00:05:31.420
It's only cuz it's type script that it was
complaining to me about those kinds of

74
00:05:31.420 --> 00:05:32.870
things, right?

75
00:05:32.870 --> 00:05:36.159
This is just,
this here is necessary only because

76
00:05:37.170 --> 00:05:39.820
the violation I was getting
down here had to do with.

77
00:05:41.090 --> 00:05:45.070
I'm putting something on it and
the shape did not have

78
00:05:45.070 --> 00:05:48.680
information about that like I'm adding
a value and the shape is not there

79
00:05:48.680 --> 00:05:51.500
if this were JavaScript that would be
fine so that is a static function.

80
00:05:51.500 --> 00:05:55.380
It's just it has nothing
to do with an instance and

81
00:05:55.380 --> 00:05:58.730
it is directly available on
the constructor or on the class.

82
00:06:01.330 --> 00:06:07.770
All right, so in this situation,
so this is where we were to begin.

83
00:06:07.770 --> 00:06:12.430
And what we see is when we log the array
out initially, before passing,

84
00:06:12.430 --> 00:06:16.340
before like doing anything with filter.

85
00:06:16.340 --> 00:06:17.590
We see that we get private and

86
00:06:17.590 --> 00:06:20.380
that's because two string
has been implemented as so.

87
00:06:21.440 --> 00:06:25.340
When we get the result of a filter and
log that out, it turns out that we see

88
00:06:25.340 --> 00:06:30.150
evidence, it has created a new MyArray,
right?

89
00:06:30.150 --> 00:06:34.110
It has created a new instance
that matches what I passed in.

90
00:06:34.110 --> 00:06:39.220
If we wanted to change that, we could
create this static function that says when

91
00:06:39.220 --> 00:06:45.460
you access the species of this object,
you get a regular array.

92
00:06:45.460 --> 00:06:49.190
So whenever you're
deciding you wanna create

93
00:06:49.190 --> 00:06:52.260
a new similar object through
something like map or filter,

94
00:06:53.600 --> 00:06:58.390
you'll get something like this
don't worry about this too much.

95
00:06:58.390 --> 00:07:01.720
Tomorrow I'm gonna start talking about
iterators, this will make a lot more

96
00:07:01.720 --> 00:07:07.920
sense, because it comes by way of
a little bit simpler of an example.

97
00:07:07.920 --> 00:07:12.780
So I'm just planting a seed to
make a mental bookmark later and

98
00:07:12.780 --> 00:07:14.519
we'll close that loop, I promise.

99
00:07:15.770 --> 00:07:19.700
All right, so if you've dealt
with this concept of mix ins.

100
00:07:22.590 --> 00:07:27.618
So someone's asking me to describe
what looks like an arrow function.

101
00:07:27.618 --> 00:07:30.631
So this is just a regular Java Script,

102
00:07:30.631 --> 00:07:36.199
let me create a Java Script file here.
&gt;&gt; Mike North: New

103
00:07:36.199 --> 00:07:40.992
file.
&gt;&gt; Mike North: I just

104
00:07:40.992 --> 00:07:45.083
don't want it to enforce all
that type tracking stuff.

105
00:07:51.758 --> 00:07:52.483
&gt;&gt; Mike North: Good.

106
00:07:52.483 --> 00:07:53.288
All right, so

107
00:07:53.288 --> 00:08:00.379
we can define a function like this.
&gt;&gt; Mike North: All

108
00:08:00.379 --> 00:08:05.401
this is a new way of defining
a function from the 2015 version of

109
00:08:05.401 --> 00:08:14.920
the JavaScript language spec.
&gt;&gt; Mike North: These are both functions.

110
00:08:14.920 --> 00:08:19.910
These are both, both work in terms
of saying a similar thing and

111
00:08:19.910 --> 00:08:22.990
we call this an arrow function.

112
00:08:22.990 --> 00:08:26.960
Some languages call this kinda thing
a lambda expression and it's just sort of

113
00:08:26.960 --> 00:08:32.080
a shorthand that lets you without
having to write this word function.

114
00:08:33.400 --> 00:08:39.450
Express arguments that are passed in and
the output in a distinct way.

115
00:08:39.450 --> 00:08:42.850
The additional thing that arrow
functions bring along for the ride, is

116
00:08:43.860 --> 00:08:48.860
when we create a function like this,
there's this calling context.

117
00:08:48.860 --> 00:08:53.494
If you've dealt with the,
this, keyword here.

118
00:08:53.494 --> 00:09:00.110
And typically,
a function wherever it's defined

119
00:09:01.600 --> 00:09:05.040
like, so
whatever this error function is defined,

120
00:09:06.040 --> 00:09:10.330
it will carry along its calling
context into that function.

121
00:09:10.330 --> 00:09:12.699
So for
example if I did something like this,

122
00:09:15.681 --> 00:09:19.201
&gt;&gt; Mike North: And I did something like We

123
00:09:19.201 --> 00:09:25.167
did.
&gt;&gt; Mike North: Or

124
00:09:25.167 --> 00:09:30.101
getClickListener, and that returns a new

125
00:09:30.101 --> 00:09:35.156
function,
&gt;&gt; Mike North: That will

126
00:09:35.156 --> 00:09:40.090
have like a mass event here.
&gt;&gt; Mike North: This in here is gonna be,

127
00:09:40.090 --> 00:09:43.605
as you can see,
I've got this getClickListener,

128
00:09:43.605 --> 00:09:45.910
it's auto completing it for me.

129
00:09:46.930 --> 00:09:53.290
It is giving me, the context is
the instance of person, right?

130
00:09:53.290 --> 00:09:59.290
If I were to just do this as so.
&gt;&gt; Mike North: It's

131
00:09:59.290 --> 00:10:00.922
not going to give me anything like that.

132
00:10:00.922 --> 00:10:04.380
So, I did not get that calling
context passed along for the ride.

133
00:10:04.380 --> 00:10:10.410
And if you are familiar with this kind of
thing, it is basically the same as binding

134
00:10:10.410 --> 00:10:15.880
that calling context at the time that
you have that aerofunction expression.

