WEBVTT

1
00:00:00.220 --> 00:00:02.170
&gt;&gt; Mike North: So
we're going to go through the solution for

2
00:00:02.170 --> 00:00:05.430
this second exercise and
what you'll get into the habit of doing

3
00:00:05.430 --> 00:00:09.450
as we start working with a type
script editing environment.

4
00:00:09.450 --> 00:00:14.930
You'll start to learn to look at
these problems that pop up and I'm

5
00:00:14.930 --> 00:00:20.330
using visual studio code, it's what a lot
of people use to work with Type Script.

6
00:00:20.330 --> 00:00:24.846
I'm sure you can set other
editors up to do a similar thing.

7
00:00:24.846 --> 00:00:28.440
But what it's complaining about
is all of these implecent any's.

8
00:00:28.440 --> 00:00:30.700
So I'm hovering over this
register function and

9
00:00:30.700 --> 00:00:36.280
this tool keeps popping up telling me
that email and password, there's no way,

10
00:00:36.280 --> 00:00:41.210
since I'm not really doing anything with
this data other than sort of placing it

11
00:00:41.210 --> 00:00:45.470
into an object down here on line 14 and
pushing it then to an array.

12
00:00:45.470 --> 00:00:49.530
There's no way for
me to know what type those are, right?

13
00:00:49.530 --> 00:00:54.870
There's no tail tale sign that like
those values are of any particular type.

14
00:00:54.870 --> 00:00:59.820
So all I can do in order to make
sense of the situation is say I wanna

15
00:00:59.820 --> 00:01:03.490
give it the most flexible type
that exists and that is any.

16
00:01:05.250 --> 00:01:09.349
In our Type Script configuration and
we will learn about this file bit by

17
00:01:09.349 --> 00:01:14.445
bit.
&gt;&gt; Mike North: So this tsconfigjson

18
00:01:14.445 --> 00:01:20.709
this setting here is what's leading it
to complain about our complicit anys.

19
00:01:22.150 --> 00:01:27.810
So we will learn about different things
you can do in this compiler options

20
00:01:27.810 --> 00:01:29.340
object bit by bit.

21
00:01:29.340 --> 00:01:31.130
But that is where this is coming from.

22
00:01:33.010 --> 00:01:34.450
So let's begin.

23
00:01:34.450 --> 00:01:36.880
So we're gonna define what
it means to be a user.

24
00:01:39.530 --> 00:01:45.950
And for that, we're going to build
an interface called user, all right.

25
00:01:45.950 --> 00:01:47.930
It's complaining about an empty interface.

26
00:01:47.930 --> 00:01:51.980
This doesn't do us any good to define
an interface that has no properties.

27
00:01:51.980 --> 00:01:56.182
That would be the same as basically
an interface that looks like

28
00:01:56.182 --> 00:01:58.097
an object literal, right?

29
00:01:58.097 --> 00:02:00.247
But we know here we've got an email.

30
00:02:00.247 --> 00:02:01.584
That's a string.

31
00:02:01.584 --> 00:02:04.243
And a password that's a string.

32
00:02:06.860 --> 00:02:14.150
And now we can actually take
this users object here and

33
00:02:14.150 --> 00:02:18.590
we will talk about arrays
a little bit later on.

34
00:02:18.590 --> 00:02:20.255
Now you didn't have to do this but

35
00:02:20.255 --> 00:02:25.699
you could do something like this
&gt;&gt; Mike North: So

36
00:02:25.699 --> 00:02:31.520
now we know that users is an array of
objects that conform to that structure.

37
00:02:31.520 --> 00:02:36.090
They could have additional properties,
they don't necessarily have to.

38
00:02:38.090 --> 00:02:42.190
So down here, I'm gonna say I'm taking
in an email, which is a string and

39
00:02:42.190 --> 00:02:44.130
a password, which is a string.

40
00:02:44.130 --> 00:02:48.920
And I am returning an object
that looks like this.

41
00:02:48.920 --> 00:02:53.510
Now it says it's returning an object
that has an email and a password here.

42
00:02:53.510 --> 00:02:57.410
That is, that conforms to
the same structure as a user.

43
00:02:57.410 --> 00:03:00.990
But you note that I didn't have to
explicitly define the return type here.

44
00:03:00.990 --> 00:03:04.020
Transcripts pretty good at figuring
out what you're returning.

45
00:03:05.550 --> 00:03:11.470
And, in this case I just want it
to refer to it by the name, user.

46
00:03:13.580 --> 00:03:17.830
It's got a semantic name for it now.

47
00:03:17.830 --> 00:03:21.300
That's the only reason I
had to add that there.

48
00:03:21.300 --> 00:03:28.720
Everything would've been happy,
except me the developer.

49
00:03:28.720 --> 00:03:31.250
So activate new user and
I've got user to approve.

50
00:03:31.250 --> 00:03:36.420
So, if I were to say this user
to approve is type user, and

51
00:03:36.420 --> 00:03:39.250
the approver is type user.

52
00:03:39.250 --> 00:03:41.790
We're gonna get a little
bit of a problem here.

53
00:03:41.790 --> 00:03:46.670
So is active is not on user
Admin since is not on type user.

54
00:03:46.670 --> 00:03:51.260
So what we can do here is,
we can do something like this.

55
00:03:51.260 --> 00:03:53.088
There are many approaches
you could've taken.

56
00:03:57.761 --> 00:03:59.120
&gt;&gt; Mike North: And then deliberately,

57
00:03:59.120 --> 00:04:02.554
I'm trying to avoid things that
we haven't talked about yet.

58
00:04:10.005 --> 00:04:13.763
&gt;&gt; Mike North: So there's a confirmed user

59
00:04:13.763 --> 00:04:21.750
and then we can have an admin
that goes one step farther.

60
00:04:21.750 --> 00:04:28.255
Oops one click poured brook for me.
&gt;&gt; Mike North: And

61
00:04:28.255 --> 00:04:31.020
adminSince is the last
thing that's missing here.

62
00:04:32.740 --> 00:04:35.500
And what should I put for the type here?
&gt;&gt; Student: Date.

63
00:04:36.530 --> 00:04:37.743
&gt;&gt; Mike North: So you can use any

64
00:04:37.743 --> 00:04:42.430
constructor as the type in addition
to those primitive types and

65
00:04:42.430 --> 00:04:46.137
interfaces.
&gt;&gt; Mike North: And

66
00:04:46.137 --> 00:04:50.500
here the approver must be an admin,
so now this is great, I've got some

67
00:04:50.500 --> 00:04:55.570
nice constraints that describe
exactly what I'm looking for here.

68
00:04:55.570 --> 00:05:00.410
Registering creates a new user,
activating a new user.

69
00:05:00.410 --> 00:05:04.260
Actually this is gonna
take in a regular user.

70
00:05:04.260 --> 00:05:07.130
But it's gonna return a ConfirmedUser.

71
00:05:08.620 --> 00:05:11.390
And what we can do here to make, so

72
00:05:11.390 --> 00:05:16.370
what it's complaining about is
essentially we are mutating in place.

73
00:05:16.370 --> 00:05:18.950
Think about that,
I mean we are mutating in place this user.

74
00:05:18.950 --> 00:05:23.080
We're gonna do that anyway,
but we have to define it.

75
00:05:23.080 --> 00:05:26.860
We have to kind of get
a new reference to it

76
00:05:26.860 --> 00:05:30.790
with a type as we transition
it into this confirmed user.

77
00:05:30.790 --> 00:05:35.350
So we could do something like

78
00:05:35.350 --> 00:05:40.430
this.
&gt;&gt; Mike North: And

79
00:05:40.430 --> 00:05:42.310
now TypeScript will be happy.

80
00:05:42.310 --> 00:05:47.370
So it's an extra line of code, but it does
serve the purpose of helping us understand

81
00:05:47.370 --> 00:05:51.800
we're being very deliberate
about stepping over this line.

82
00:05:51.800 --> 00:06:01.495
We could even do something like this.
&gt;&gt; Mike North: And

83
00:06:01.495 --> 00:06:07.571
avoid the one line.
&gt;&gt; Mike North: Well,

84
00:06:07.571 --> 00:06:10.243
no, we're still gonna
have to do it that way.

85
00:06:10.243 --> 00:06:12.620
Anyway, better to have it be explicit.

86
00:06:12.620 --> 00:06:15.449
But in some cases,
you can do it in two steps.

87
00:06:16.520 --> 00:06:17.470
Doing it in one step.

88
00:06:17.470 --> 00:06:17.970
Sorry.

89
00:06:19.584 --> 00:06:24.800
All right we're returning a confirmed
user, promoting to admin.

90
00:06:24.800 --> 00:06:29.900
So we'll say in order for a user to
be promoted to admin it has to be

91
00:06:29.900 --> 00:06:34.900
confirmed and only and
admin user can do the confirming.

92
00:06:36.500 --> 00:06:45.017
And so again here we're gonna say
let newadmin = user as Admin.

93
00:06:53.975 --> 00:06:54.980
&gt;&gt; Mike North: Something like that.

94
00:06:56.660 --> 00:06:58.870
Now we might be going overboard and
being so

95
00:06:58.870 --> 00:07:01.710
explicit about defining all
of these different states.

96
00:07:01.710 --> 00:07:06.438
But the end result here is if we were
to say, I've got a new user down

97
00:07:06.438 --> 00:07:10.924
here.
&gt;&gt; Mike North: E-mail.

98
00:07:16.351 --> 00:07:16.944
&gt;&gt; Mike North: So that's our

99
00:07:16.944 --> 00:07:20.414
user.
&gt;&gt; Mike North: And

100
00:07:20.414 --> 00:07:28.352
we're to say.
&gt;&gt; Mike North: Sorry AM.

101
00:07:36.757 --> 00:07:37.561
&gt;&gt; Mike North: Lets make ourselves

102
00:07:37.561 --> 00:07:38.132
an admin too.

103
00:07:49.935 --> 00:07:51.020
&gt;&gt; Mike North: Just became an admin.

104
00:07:52.130 --> 00:07:59.060
So promoteToAdmin and we're gonna pass in,
&gt;&gt; Mike North: Pass in our admin.

105
00:08:01.990 --> 00:08:04.810
And passing that user,
it's basically in the complaint and

106
00:08:04.810 --> 00:08:08.110
say, this is an unconfirmed user.

107
00:08:08.110 --> 00:08:13.070
So this kind of thing like because
we've defined these types, now imagine

108
00:08:13.070 --> 00:08:16.710
how this might work, like effectively
we got a little bit of state machine or

109
00:08:16.710 --> 00:08:21.070
the makings of it now where, you know,
we take in an object of one type and

110
00:08:21.070 --> 00:08:23.390
we add a field,
then it becomes another type.

111
00:08:23.390 --> 00:08:25.650
And as we have references to these things,

112
00:08:25.650 --> 00:08:30.140
we're catching something now where this
was potentially a not confirmed user, and

113
00:08:30.140 --> 00:08:34.090
this would have been something where we'd
depend on dynamic validation in order to

114
00:08:34.090 --> 00:08:40.430
catch it, and we have to be lucky that we
have the right test in place to nail this.

115
00:08:40.430 --> 00:08:42.210
But now, at build time,

116
00:08:42.210 --> 00:08:45.980
we get some feedback saying hey,
this user wasn't confirmed yet.

117
00:08:48.320 --> 00:08:49.340
You can even go up here.

118
00:08:49.340 --> 00:08:52.070
We'll learn about this
a little more later.

119
00:08:52.070 --> 00:08:54.570
We can say, this isn't just a boolean.

120
00:08:54.570 --> 00:08:56.460
It is what's called a literal type.

121
00:08:58.960 --> 00:09:01.170
So the value of this property is true.

122
00:09:01.170 --> 00:09:05.040
And what that means is if
I go down here and I say,

123
00:09:07.390 --> 00:09:13.760
false, even if this guy is confirmed.

124
00:09:20.150 --> 00:09:22.380
Sorry.

125
00:09:22.380 --> 00:09:26.754
Confirm user, let's see.

126
00:09:26.754 --> 00:09:31.915
[SOUND] Interesting, is active site.

127
00:09:31.915 --> 00:09:39.184
Sorry, I have to do it down here as well.
&gt;&gt; Mike North: So

128
00:09:39.184 --> 00:09:43.593
now down here it's complaining to
me that like, that flag there,

129
00:09:43.593 --> 00:09:46.770
[LAUGH] it's either absent or it's true.

130
00:09:46.770 --> 00:09:48.670
and so
we've left a marker on there that says,

131
00:09:48.670 --> 00:09:54.000
look, you have to have this thing and
it has to be of that specific value, or

132
00:09:54.000 --> 00:09:56.750
I'm not going to regard you
as that particular type.

133
00:09:56.750 --> 00:10:00.590
So there's a whole lot more feedback
we're getting here instantly

134
00:10:00.590 --> 00:10:06.100
right in our editor than we'd be able to
get with or dynamically typed JavaScript.

135
00:10:06.100 --> 00:10:10.370
It's really cool to do this, really
cool to be able to get this so early and

136
00:10:10.370 --> 00:10:11.480
so quickly.

137
00:10:11.480 --> 00:10:14.880
Last thing I wanna show you is we've
done this in sort of a silly way.

138
00:10:14.880 --> 00:10:16.720
There's a lot of redundancy up here,

139
00:10:16.720 --> 00:10:21.000
you can treat interfaces in a similar
way that you would treat classes.

140
00:10:21.000 --> 00:10:24.216
We'll dive into this a little bit more
later, but I'm just gonna commit this as

141
00:10:24.216 --> 00:10:27.148
the solution.
&gt;&gt; Mike North: So

142
00:10:27.148 --> 00:10:32.088
with say that this confirmed user has
everything user has except that also has

143
00:10:32.088 --> 00:10:35.360
that active property on and
that's got to be true.

144
00:10:37.960 --> 00:10:42.150
And admin has all of that and
adds admin since.

145
00:10:42.150 --> 00:10:46.220
So now, this is a much more reasonable
way to define the different states that

146
00:10:46.220 --> 00:10:49.740
a user could be in,
with different structures, right.

147
00:10:49.740 --> 00:10:55.740
These are three different shapes that
describe different things our code needs.

148
00:10:55.740 --> 00:11:02.130
And if we draw outside the lines in here,
where like we're in JavaScript, we would

149
00:11:02.130 --> 00:11:07.980
risk potentially creating incompatibility
with objects that are in other states.

150
00:11:07.980 --> 00:11:09.500
Here, we'll get some feedback.

151
00:11:09.500 --> 00:11:12.650
For example,
if when it use a registers, or

152
00:11:12.650 --> 00:11:17.990
like we say here is, we'll just
change the surround a little bit.

153
00:11:17.990 --> 00:11:19.900
Because we define this as a user now.

154
00:11:21.210 --> 00:11:22.900
We don't need that annotation at the end,

155
00:11:22.900 --> 00:11:27.020
it's basically gonna infer that
this is the value you're returning.

156
00:11:27.020 --> 00:11:30.310
And it's not simply this structure here,
it has a name, you've given it one.

157
00:11:30.310 --> 00:11:32.440
That's all I did by moving that down.

158
00:11:32.440 --> 00:11:41.879
But if I were to do something like this.
&gt;&gt; Mike North: I'm not allowed to do this.

159
00:11:43.350 --> 00:11:48.000
Now and this ensures that this function
here, where I'm registering or

160
00:11:48.000 --> 00:11:51.610
whatever I'm doing here with this user,
it stays generic.

161
00:11:51.610 --> 00:11:55.580
It stays in a state where I'm working
with things that work across all users,

162
00:11:55.580 --> 00:11:58.010
regardless of whether they're confirmed or
whether they're an admin.

163
00:11:58.010 --> 00:12:02.080
This would be tough to do, tough to get
this kind of compile time feedback.

164
00:12:03.810 --> 00:12:08.755
With lose objects that don't have
that rigidity of structure that

165
00:12:08.755 --> 00:12:10.797
we have to define up front.

166
00:12:10.797 --> 00:12:13.565
All right so, yes question.
&gt;&gt; Student: Yeah,

167
00:12:13.565 --> 00:12:19.820
around line 56 you have the new
user as admin right there.

168
00:12:19.820 --> 00:12:24.920
So, new admin,
there's no way you can ask type script

169
00:12:24.920 --> 00:12:28.650
what type is this variable out of here,
right?

170
00:12:28.650 --> 00:12:29.880
Cuz it doesn't really have a type.

171
00:12:29.880 --> 00:12:33.820
It just has properties.
&gt;&gt; Mike North: So yes, that's right.

172
00:12:33.820 --> 00:12:37.850
That's where we're talking about
structural typing instead of nominal type.

173
00:12:37.850 --> 00:12:40.740
So you would say, what's your structure.
&gt;&gt; Student: Yeah.

174
00:12:40.740 --> 00:12:41.400
&gt;&gt; Mike North: And it would say,

175
00:12:41.400 --> 00:12:45.460
I have these properties, and the
properties can have the following types.

176
00:12:45.460 --> 00:12:49.280
And on top of that, there's no way to
write that in code because you have to

177
00:12:49.280 --> 00:12:53.710
remember this is almost like linting plus.
&gt;&gt; Student: Right.

178
00:12:53.710 --> 00:12:55.940
&gt;&gt; Mike North: So there's no run time

179
00:12:55.940 --> 00:13:01.910
reflection API or anything that would say
are you an instance of this interface?

180
00:13:01.910 --> 00:13:03.800
&gt;&gt; Student: So then on line 56 too,

181
00:13:03.800 --> 00:13:09.930
since you haven't defined adminSince,
if you returned newAdmin but

182
00:13:09.930 --> 00:13:14.030
promote expecting admin to return,
would it err because you'd actually

183
00:13:14.030 --> 00:13:15.800
have it in front of that property?
&gt;&gt; Mike North: Can

184
00:13:15.800 --> 00:13:17.680
you try to ask that a different way?
&gt;&gt; Student: Definitely,

185
00:13:17.680 --> 00:13:22.670
so right now, newAdmin on line 56,
doesn't have all the properties,

186
00:13:22.670 --> 00:13:25.020
this of admin interface.
&gt;&gt; Mike North: Correct.

187
00:13:25.020 --> 00:13:25.750
&gt;&gt; Student: It doesn't have admin

188
00:13:25.750 --> 00:13:27.090
sets.
&gt;&gt; Mike North: Correct.

189
00:13:27.090 --> 00:13:28.650
&gt;&gt; Student: So if you try to return it

190
00:13:28.650 --> 00:13:34.120
online 58 without 57 would you
get some sort of type error?

191
00:13:34.120 --> 00:13:35.350
&gt;&gt; Mike North: The value of that property

192
00:13:35.350 --> 00:13:36.310
would be undefined.

193
00:13:37.850 --> 00:13:41.016
In the same way that if I
were to do something like

194
00:13:41.016 --> 00:13:45.648
this
&gt;&gt; Mike North: All values of this

195
00:13:45.648 --> 00:13:49.328
property are undefined.
&gt;&gt; Student: Umm, got it, so it's adding

196
00:13:49.328 --> 00:13:52.210
the property, just giving it no value.

197
00:13:53.240 --> 00:13:53.800
&gt;&gt; Mike North: Yes.
&gt;&gt; Student: Cool.

198
00:13:53.800 --> 00:13:55.380
&gt;&gt; Mike North: It has the shape, and

199
00:13:55.380 --> 00:14:01.750
we can mutate values, right, but undefined
is still a thing that can happen there.

200
00:14:01.750 --> 00:14:05.810
Now what we could have done, there would
have been a way to do this in one shot,

201
00:14:05.810 --> 00:14:10.050
but I would have looked something like,
we don't know these operators yet.

202
00:14:13.020 --> 00:14:21.636
User.
&gt;&gt; Mike North: So

203
00:14:21.636 --> 00:14:24.270
that also makes typescript happy.

204
00:14:24.270 --> 00:14:26.410
This is basically saying,
take everything on user,

205
00:14:26.410 --> 00:14:30.630
unpack it into an object in addition to
that add this property called adminSince.

206
00:14:30.630 --> 00:14:32.400
And let's regard that
whole thing as admin.

207
00:14:32.400 --> 00:14:36.910
And in fact I don't even need this,
simply because all that did for

208
00:14:36.910 --> 00:14:39.890
me was give this structure a name.

209
00:14:39.890 --> 00:14:43.810
We'll learn about that later, I just want
you to know that this extra line of code,

210
00:14:43.810 --> 00:14:47.890
which is rightly potentially bugging some
people like why did we have to have this

211
00:14:47.890 --> 00:14:48.910
extra line.

212
00:14:48.910 --> 00:14:51.400
It's just x=y.

213
00:14:51.400 --> 00:14:56.370
We will get rid of it but
we have to learn more about operators and

214
00:14:56.370 --> 00:14:59.589
enhanced object literals and
things like that in order to get there.

215
00:15:01.300 --> 00:15:04.695
But a hopefully you see the benefit
of types here, where we have so

216
00:15:04.695 --> 00:15:05.931
much more structure and

217
00:15:05.931 --> 00:15:09.910
compile time assurance to run this code
than we ever could with java script.

218
00:15:09.910 --> 00:15:13.030
I've changed the format of
the branches a little bit so

219
00:15:13.030 --> 00:15:15.580
there's a per excercise completion branch.

220
00:15:15.580 --> 00:15:20.860
I have to catch up and do the next
exercise, it will be no problem, but

221
00:15:20.860 --> 00:15:25.650
it's gonna follow this form femasters/ and
then the exercise number slash complete.

222
00:15:25.650 --> 00:15:28.510
So if you wanna jump in and
out of this course later on and you know,

223
00:15:28.510 --> 00:15:31.840
just try one exercise,
you can check out the begin branch and

224
00:15:31.840 --> 00:15:35.800
that will get you queued up for
the right exercise and then the complete.

225
00:15:35.800 --> 00:15:36.890
Branch will have this solution.

226
00:15:38.890 --> 00:15:43.210
So, with that let's keep diving in to

227
00:15:44.280 --> 00:15:47.990
some modern TypeScript,

228
00:15:47.990 --> 00:15:52.160
JavaScript concepts, and what we're going
to touch on next, we're actually going

229
00:15:52.160 --> 00:15:55.640
back to the JavaScript world and
we're going to talk about classes.

230
00:15:55.640 --> 00:15:57.130
So first of in the room.

231
00:15:57.130 --> 00:16:03.330
Who is using ES 2015 classes,
who is using a class in JavaScript?

232
00:16:03.330 --> 00:16:09.260
Great, most everyone yeah this is
starting to become the new norm for

233
00:16:09.260 --> 00:16:11.210
object oriented JavaScript programming.

234
00:16:11.210 --> 00:16:14.762
So we're gonna be in
the JavaScript world for now,

235
00:16:14.762 --> 00:16:20.060
classes are the go to thing
in type script as well,

236
00:16:20.060 --> 00:16:24.440
there are some subtle differences
that we're going to cover so

237
00:16:24.440 --> 00:16:26.410
we're going to be talking
about JavaScript now.

238
00:16:27.440 --> 00:16:29.700
Don't panic if you see some code and for

239
00:16:29.700 --> 00:16:32.860
some reason you're testing it out on
your machine and you see some errors,

240
00:16:32.860 --> 00:16:37.290
we will clarify all of those errors and
get aligned with type script in a moment.

