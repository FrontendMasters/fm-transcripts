WEBVTT

1
00:00:00.020 --> 00:00:04.790
&gt;&gt; Mike North: We're going to look
at how to use React with TypeScript

2
00:00:04.790 --> 00:00:07.500
to build a stateless functional component.

3
00:00:07.500 --> 00:00:10.750
This is a component that
has none of its own state.

4
00:00:10.750 --> 00:00:15.468
Its job is basically to
receive data via props that

5
00:00:15.468 --> 00:00:20.974
are passed by whoever's
extentiating this component and

6
00:00:20.974 --> 00:00:27.174
then provide some nice HTML
rendering of whatever it's passed.

7
00:00:27.174 --> 00:00:31.141
So we're going to first look
at our starting point here,

8
00:00:31.141 --> 00:00:34.117
we've got the app, the app being rendered

9
00:00:34.117 --> 00:00:38.680
by this index.tsx file that's
just sort of bootstraps our app.

10
00:00:38.680 --> 00:00:43.500
Here we can see if you were to study this,
this is a stateful component and

11
00:00:43.500 --> 00:00:49.045
this is the next stage that we're gonna
tackle after we get through this exercise.

12
00:00:49.045 --> 00:00:54.168
But what I want you to
see is eventually we get

13
00:00:54.168 --> 00:00:59.291
the set of results in
our render function and

14
00:00:59.291 --> 00:01:05.125
if this array of results
is of type PlaceDetails.

15
00:01:05.125 --> 00:01:08.782
And if we look at PlaceDetails,
we can actually say,

16
00:01:08.782 --> 00:01:13.345
here I'll give you a little
Visual Studio code back flip here.

17
00:01:13.345 --> 00:01:14.760
We can say Peak Definition.

18
00:01:16.540 --> 00:01:19.420
And it'll tell you where
this is coming from.

19
00:01:19.420 --> 00:01:19.920
Right?

20
00:01:21.520 --> 00:01:26.442
I think we can also do,
up here we can do Peak type definition.

21
00:01:29.090 --> 00:01:31.300
So this is what a PlaceDetails looks like.

22
00:01:31.300 --> 00:01:37.000
This seemed to opened up
in the middle of my editor.

23
00:01:37.000 --> 00:01:41.610
So this I've created to match
the json that we expect to get

24
00:01:41.610 --> 00:01:45.857
back from the Google Places API
that we're hitting.

25
00:01:45.857 --> 00:01:48.904
We're proxying it through local hosts but
that's what we're hitting and

26
00:01:48.904 --> 00:01:51.080
that's why you needed that API key.

27
00:01:51.080 --> 00:01:59.370
So whenever I'm building one of these
simple components that has no state and

28
00:01:59.370 --> 00:02:04.140
its job is to render a particular record,

29
00:02:04.140 --> 00:02:09.860
as in some visual way on the screen,
I typically like to just pass that

30
00:02:09.860 --> 00:02:14.880
entire object along so that in the event
that I add a new property to that object,

31
00:02:14.880 --> 00:02:16.970
I don't really have to go and
touch a whole lot of code.

32
00:02:16.970 --> 00:02:19.020
I've sort of passed it as a unit.

33
00:02:19.020 --> 00:02:22.680
And that way,
the refactoring is a little bit easier.

34
00:02:22.680 --> 00:02:23.870
So I'm gonna get rid of this.

35
00:02:23.870 --> 00:02:25.440
This is a sort of our starting point here.

36
00:02:25.440 --> 00:02:30.470
And if I were to save, we should see all
this stuff disappears on the next refresh

37
00:02:30.470 --> 00:02:32.390
and then if I replace it with this,

38
00:02:32.390 --> 00:02:38.200
you see that I've got this PlaceDetails
value here, so we're taking this array and

39
00:02:38.200 --> 00:02:42.640
we're basically turning it into
an array of these React components.

40
00:02:43.720 --> 00:02:46.230
I'm spreading this PlaceDetails out.

41
00:02:46.230 --> 00:02:51.350
So each property on this object
is being passed as a prop.

42
00:02:51.350 --> 00:02:56.980
So the whole collection of props, it
aligns with this PlaceDetails interface.

43
00:02:56.980 --> 00:02:59.710
That's gonna work out really nicely
when we start to define what this

44
00:02:59.710 --> 00:03:00.570
component looks like.

45
00:03:01.900 --> 00:03:05.880
So if I click in here,
well, I can save this.

46
00:03:05.880 --> 00:03:12.450
And if I click in here to define what this
looks like and refresh, so you can see

47
00:03:12.450 --> 00:03:17.800
we begin with this stateless functional
component that takes any as props.

48
00:03:17.800 --> 00:03:21.860
So we're sort of back to
regular JavaScript land here.

49
00:03:21.860 --> 00:03:26.290
Regular React with JavaScript where we
could have passed anything we want and

50
00:03:26.290 --> 00:03:28.110
there is no type checking, right?

51
00:03:28.110 --> 00:03:30.445
This basically will tolerate anything or

52
00:03:30.445 --> 00:03:33.700
nothing being passed as
props to this object.

53
00:03:33.700 --> 00:03:35.938
Instead, I want a little more rigidity.

54
00:03:40.316 --> 00:03:43.797
&gt;&gt; Mike North: So PlaceDetails.

55
00:03:45.627 --> 00:03:48.130
&gt;&gt; Mike North: And let's see if
it's smart enough to know, yep.

56
00:03:48.130 --> 00:03:53.990
Visual Studio code can even say,
I've found something called PlaceDetails.

57
00:03:53.990 --> 00:03:57.290
Let's import it from this particular spot,
that's slick.

58
00:03:58.590 --> 00:03:59.460
I saved that.

59
00:03:59.460 --> 00:04:04.950
Okay, so now I have some structure and
really now this component is

60
00:04:04.950 --> 00:04:11.323
basically saying you will get a compile
error, TypeScript will object if you

61
00:04:11.323 --> 00:04:16.639
try to pass it something other
than props that match this shape.

62
00:04:16.639 --> 00:04:20.921
So here,
&gt;&gt; Mike North: I'm gonna get a value

63
00:04:20.921 --> 00:04:21.460
passed in.

64
00:04:21.460 --> 00:04:23.770
Now note, we're not destructuring this.

65
00:04:23.770 --> 00:04:28.755
A lot of times you end up destructuring
props as you receive them

66
00:04:28.755 --> 00:04:31.962
in one of these functional components.

67
00:04:31.962 --> 00:04:36.625
Keep in mind that the whole set of props
themselves conforms to this interface

68
00:04:36.625 --> 00:04:38.067
we're interested in.

69
00:04:38.067 --> 00:04:42.300
And in this situation, it's really
convenient to be able to sort of treat

70
00:04:42.300 --> 00:04:46.139
them as an entire object cuz now
it's not just little bits of data.

71
00:04:46.139 --> 00:04:49.978
It's a collection of things and
there's some cohesive structure to it.

72
00:04:49.978 --> 00:04:55.110
For that matter, I wanna be able to,
again, add something to PlaceDetails and

73
00:04:55.110 --> 00:04:58.020
later on be able to use
it in this component and

74
00:04:58.020 --> 00:05:02.799
not have to worry about adding another
thing to what I'm destructuring.

75
00:05:02.799 --> 00:05:08.520
I'm actually gonna rename this just
to pd for ease of use later on.

76
00:05:08.520 --> 00:05:14.570
So if in here then I did something
like this, pd., it is really easy

77
00:05:14.570 --> 00:05:20.760
to see the various things that I can use
off of this object that's passed in.

78
00:05:20.760 --> 00:05:22.350
So I can write the name.

79
00:05:22.350 --> 00:05:26.049
And if we refresh,
we should see a bunch of donut shops here.

80
00:05:26.049 --> 00:05:33.970
So we got a lot of extra compile time
assurance around this thing to make sure

81
00:05:33.970 --> 00:05:38.550
the component right up front says, these
are the things I want, pass these to me.

82
00:05:38.550 --> 00:05:42.350
We don't have to go around and try to
like eyeball a big React component and

83
00:05:42.350 --> 00:05:45.579
see where we're pulling
something off of this .props.

84
00:05:47.320 --> 00:05:49.450
In terms of the HTML
structure we're looking for,

85
00:05:49.450 --> 00:05:53.420
I mentioned that you can use this
snapshots thing as guidance.

86
00:05:53.420 --> 00:05:56.190
I'm gonna flagrantly rip it off.

87
00:05:59.108 --> 00:06:00.972
&gt;&gt; Mike North: That's correct, let's see.

88
00:06:03.467 --> 00:06:05.868
&gt;&gt; Mike North: Let's try this.

89
00:06:05.868 --> 00:06:06.436
Paste.

90
00:06:10.769 --> 00:06:12.785
&gt;&gt; Mike North: And Save and
let's see if that works.

91
00:06:15.600 --> 00:06:17.354
&gt;&gt; Mike North: Hey, it looks like it does.

92
00:06:17.354 --> 00:06:19.967
It's a little horrifyingly spaced out.

93
00:06:19.967 --> 00:06:22.636
Let's see if we can clean
it up just a little bit.

94
00:06:28.005 --> 00:06:30.558
&gt;&gt; Mike North: If you haven't
used React much before,

95
00:06:30.558 --> 00:06:35.064
class name is their workaround for
not being able to use the word class in

96
00:06:35.064 --> 00:06:39.140
a JavaScript file without it
having that very special meaning.

97
00:06:40.540 --> 00:06:42.310
So here's our Donut Hut.

98
00:06:42.310 --> 00:06:45.300
See, it's like Donut Hut over and
over again.

99
00:06:45.300 --> 00:06:47.640
Obviously, we have to
place our values in here.

100
00:06:50.450 --> 00:06:54.436
We will do that in just a moment,
once I bring some sanity to this world,

101
00:07:02.559 --> 00:07:03.146
&gt;&gt; Mike North: All right,

102
00:07:03.146 --> 00:07:05.259
there's our link and the close, okay, so

103
00:07:05.259 --> 00:07:07.739
this looks a little less
wacky than it did before.

104
00:07:07.739 --> 00:07:12.618
And just to make sure it still works,
it does, so

105
00:07:12.618 --> 00:07:17.570
here we can say I wanna put PlaceDetails,
name.

106
00:07:17.570 --> 00:07:22.340
And this looks like a map URL,
we'll try this one.

107
00:07:22.340 --> 00:07:24.640
I think it's URL as opposed to website.

108
00:07:25.820 --> 00:07:27.560
Let's see how that works.

109
00:07:27.560 --> 00:07:33.320
Okay, it looks like two Donuts Huts, at
least we're seeing some other stuff here.

110
00:07:33.320 --> 00:07:36.297
The addresses are all the same,
that's cuz that's still hardcoded.

111
00:07:39.438 --> 00:07:44.089
&gt;&gt; Mike North: Vicinity seems
like an addressy thing.

112
00:07:44.089 --> 00:07:47.341
Okay, now things are starting
to look a little different.

113
00:07:47.341 --> 00:07:52.444
This URL here,
I think that's the website field.

114
00:07:56.465 --> 00:08:00.113
&gt;&gt; Mike North: Now,
we might get a situation where we

115
00:08:00.113 --> 00:08:04.564
have something that
doesn't have a website.

116
00:08:09.354 --> 00:08:11.430
&gt;&gt; Mike North: Let's make sure,
there's a restaurant here.

117
00:08:11.430 --> 00:08:13.210
I think that's the icon field.

118
00:08:13.210 --> 00:08:15.277
We should be able to see some other icons.

119
00:08:19.350 --> 00:08:22.699
&gt;&gt; Mike North: Although,
in this particular scenario,

120
00:08:22.699 --> 00:08:27.535
I don't believe we'll see
anything other than donut shops,

121
00:08:27.535 --> 00:08:33.874
we could change this search term here from
donut to bank and see different icons.

122
00:08:33.874 --> 00:08:37.718
Okay, so now we're sort of at a point
where we have some reasonable search

123
00:08:37.718 --> 00:08:38.527
results here.

124
00:08:38.527 --> 00:08:42.604
So if you're taking stuff away from this,
just from this first step here,

125
00:08:42.604 --> 00:08:46.423
number one, know that when we were
defining our stateless functional

126
00:08:46.423 --> 00:08:48.960
component with React,
we have an interface.

127
00:08:48.960 --> 00:08:54.050
So anyone who's looking at this knows
exactly what they need to pass.

128
00:08:54.050 --> 00:08:57.430
And if we were to leave this out,
we would get an objection from TypeScript.

129
00:08:57.430 --> 00:08:57.952
Yes?

130
00:08:57.952 --> 00:09:01.413
&gt;&gt; Speaker 2: Yeah, I interrupt you
here cuz this is where my question is.

131
00:09:01.413 --> 00:09:03.605
So what is the effective
difference between?

132
00:09:03.605 --> 00:09:04.699
Cuz you saw my code.

133
00:09:04.699 --> 00:09:09.692
I put the interface to describe
the params that are passed in, so

134
00:09:09.692 --> 00:09:12.942
after the PD, there are your arguments.

135
00:09:12.942 --> 00:09:16.892
&gt;&gt; Mike North: Like this?

136
00:09:16.892 --> 00:09:17.431
&gt;&gt; Speaker 2: Yeah.

137
00:09:18.587 --> 00:09:20.727
&gt;&gt; Mike North: Right.

138
00:09:20.727 --> 00:09:25.510
So what's happening here is
&gt;&gt; Speaker 2: It

139
00:09:25.510 --> 00:09:30.201
still had the NA after the FSC, I still
got all the completion and whatnot.

140
00:09:30.201 --> 00:09:31.312
&gt;&gt; Mike North: This is what you had.

141
00:09:31.312 --> 00:09:31.854
&gt;&gt; Speaker 2: Yes.

142
00:09:31.854 --> 00:09:36.090
&gt;&gt; Mike North: So I actually want you
kind of pay attention to this here.

143
00:09:36.090 --> 00:09:37.710
So this is what you had.

144
00:09:37.710 --> 00:09:44.800
This is TypeScript saying well, I can make
no guarantees that things will line up.

145
00:09:46.310 --> 00:09:51.480
This here is you saying tolerate anything.

146
00:09:51.480 --> 00:09:53.720
And let me prove it to you.

147
00:09:53.720 --> 00:09:58.640
Remember when we spread and object,
we can add other properties.

148
00:09:58.640 --> 00:10:04.020
I can put this here and
I get no objections from TypeScript.

149
00:10:05.020 --> 00:10:10.540
So in essence, what you're effectively
doing there, it is similar to casting.

150
00:10:10.540 --> 00:10:14.700
If we have this here, we're basically
saying in terms of the type of

151
00:10:14.700 --> 00:10:21.320
PlaceSearchResult that we're exporting,
we're

152
00:10:21.320 --> 00:10:26.680
saying here that you can give me whatever
you want as props, whatever you want.

153
00:10:26.680 --> 00:10:28.030
You'll get no complaints.

154
00:10:28.030 --> 00:10:32.340
Anything or nothing, they're all assigned,
they’re all assignable to an any.

155
00:10:32.340 --> 00:10:35.500
And then here you’re saying,

156
00:10:35.500 --> 00:10:41.170
because you have that great flexibility,
you can then here say, okay, well, now,

157
00:10:41.170 --> 00:10:46.730
let’s treat this object
as a PlaceDetails type.

158
00:10:46.730 --> 00:10:48.839
And you’re going to use it that way.

159
00:10:48.839 --> 00:10:54.007
But I could do something like this and
cause some problems where basically

160
00:10:54.007 --> 00:10:59.109
TypeScript has found it has not
protected you from this situation here.

161
00:10:59.109 --> 00:11:01.524
Right?
So I did not get that enforcement from

162
00:11:01.524 --> 00:11:06.086
the TypeScript compiler saying you've
gotta give me what I'm asking for,

163
00:11:06.086 --> 00:11:09.166
cuz here you're saying I'm asking for
anything.

164
00:11:09.166 --> 00:11:11.116
Does that make sense?

165
00:11:11.116 --> 00:11:12.270
It's almost like casting.

166
00:11:12.270 --> 00:11:13.960
So that's why we do it this way.

167
00:11:15.280 --> 00:11:17.520
Whereas in this situation here,

168
00:11:17.520 --> 00:11:23.908
if we tried those shenanigans,
&gt;&gt; Mike North: like this

169
00:11:26.961 --> 00:11:30.242
&gt;&gt; Mike North: It's gonna say this object

170
00:11:30.242 --> 00:11:37.980
here, name = 'foo' is not
assignable to type PlaceDetails.

171
00:11:37.980 --> 00:11:41.250
It's flat out telling you,
you gave me this.

172
00:11:41.250 --> 00:11:42.650
I need that.

173
00:11:42.650 --> 00:11:46.560
I can't make these line up,
and this is super actionable.

174
00:11:46.560 --> 00:11:48.460
You, as a developer say, well wait,

175
00:11:48.460 --> 00:11:52.000
clearly I need to look at what
PlaceDetails the shape is.

176
00:11:52.000 --> 00:11:53.480
And we need to line up with that.

177
00:11:53.480 --> 00:11:56.730
Because until I do that,
this thing is gonna keep yelling at me.

178
00:11:59.440 --> 00:12:03.290
So this is why I wanted to spend
some time working with react today.

179
00:12:03.290 --> 00:12:07.480
Because like this, I love this
about working with type script and

180
00:12:07.480 --> 00:12:08.140
react together.

181
00:12:08.140 --> 00:12:12.560
Because now you really,
you can catch so many things.

182
00:12:12.560 --> 00:12:17.120
At compile time that had
a tendency to be stuff that you

183
00:12:17.120 --> 00:12:21.290
really need a thorough code review for
in order to get assurance about that.

184
00:12:21.290 --> 00:12:24.750
And now, we just basically,
in code reviews, have to look for

185
00:12:24.750 --> 00:12:29.670
stuff like this and recognize that,
you're being overly tolerant here.

186
00:12:29.670 --> 00:12:34.149
You're saying you're okay with anything,
but clearly the code below is not.

187
00:12:36.414 --> 00:12:37.870
&gt;&gt; Mike North: So that is PlaceDetails.

188
00:12:39.250 --> 00:12:41.432
And that it state its
functional components.

