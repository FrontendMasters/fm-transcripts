WEBVTT

1
00:00:00.400 --> 00:00:00.990
&gt;&gt; Mike North: So

2
00:00:00.990 --> 00:00:06.060
let me add one more interesting thing here
before we jump in to our next exercise.

3
00:00:06.060 --> 00:00:08.030
There's something called the any type.

4
00:00:08.030 --> 00:00:12.570
And think of this as a wild card type,
right.

5
00:00:13.570 --> 00:00:19.380
Anything could be assigned to
a variable that is of the any type.

6
00:00:19.380 --> 00:00:22.860
So in this example we say age = 34.

7
00:00:22.860 --> 00:00:24.720
So age's type is a what?

8
00:00:26.070 --> 00:00:26.860
&gt;&gt; Speaker 2: Number.
&gt;&gt; Mike North: Number.

9
00:00:27.920 --> 00:00:31.045
And then we have myAge,
and we say age as any.

10
00:00:31.045 --> 00:00:33.520
So we're casting this to the any type.

11
00:00:33.520 --> 00:00:35.920
myAge's type is now any.

12
00:00:36.980 --> 00:00:41.670
And so now we're able to assign myAge.

13
00:00:41.670 --> 00:00:44.600
We can give it values of whatever we want.

14
00:00:44.600 --> 00:00:48.060
Booleans, strings, anything like that.

15
00:00:48.060 --> 00:00:50.050
Anything is assignable to an any.

16
00:00:51.830 --> 00:00:54.180
It is easy to remember there.

17
00:00:54.180 --> 00:00:57.780
The way you can think of this is,
you're back to regular JavaScript.

18
00:00:57.780 --> 00:01:02.510
This is the way a non
typescript world treats

19
00:01:04.010 --> 00:01:06.900
things like any variable
that's defined with let.

20
00:01:06.900 --> 00:01:10.670
You can reassign it whatever you want.

21
00:01:10.670 --> 00:01:14.718
And I talked about how you could have
typescript to kind of chew on regular

22
00:01:14.718 --> 00:01:18.360
JavaScript code and make sense of it,
and give you some information.

23
00:01:18.360 --> 00:01:21.220
This is a big part of how
it's able to do that.

24
00:01:21.220 --> 00:01:25.520
Where it can't infer
the type of a variable.

25
00:01:25.520 --> 00:01:32.310
It'll just give it the any type and
it'll allow things to play out from there.

26
00:01:32.310 --> 00:01:38.820
And as you tighten things up, you can sort
of make that constraint more accurate and

27
00:01:38.820 --> 00:01:42.850
more tightened up to what you actually
expect the range of those values to be.

28
00:01:45.880 --> 00:01:49.889
Typically what you do is,
say we have a JavaScript piece of code and

29
00:01:49.889 --> 00:01:52.670
we're converting it to TypeScript.

30
00:01:52.670 --> 00:01:58.962
You would say anything goes, we're
just gonna change this JS file to TS.

31
00:01:58.962 --> 00:02:02.040
You would end up with
a lot of implicit any's.

32
00:02:02.040 --> 00:02:04.710
Right, where it's gonna go through
your code and it's gonna say,

33
00:02:04.710 --> 00:02:10.320
all right, this is a function that
takes two arguments, and it's a and b.

34
00:02:10.320 --> 00:02:13.210
And you return a + b,
those could be strings,

35
00:02:13.210 --> 00:02:15.110
those could be numbers, I don't know.

36
00:02:15.110 --> 00:02:20.820
I can't figure it out, I don't have enough
information in order to make a call here.

37
00:02:20.820 --> 00:02:23.280
See those would be implicit any's.

38
00:02:23.280 --> 00:02:28.674
So then, you would at some point,
forbid implicit any's.

39
00:02:28.674 --> 00:02:33.494
And you'd go through and say, okay,
well where we really wanna be flexible,

40
00:02:33.494 --> 00:02:38.790
we will have explicit any's, or
we'll give it a type, a proper type.

41
00:02:38.790 --> 00:02:43.260
And then, you would try to purge
explicit any's from your code base, and

42
00:02:43.260 --> 00:02:48.150
end up with things having a well defined
type instead of sort of the catchall.

43
00:02:50.300 --> 00:02:54.240
The opposite of the any
type is a never type.

44
00:02:54.240 --> 00:02:58.210
And nothing can be assigned to a never.

45
00:02:58.210 --> 00:03:00.381
So if we did like let.

46
00:03:00.381 --> 00:03:02.878
Let me take you to a code here.

47
00:03:02.878 --> 00:03:04.207
Our little scratch pad.

48
00:03:12.100 --> 00:03:13.948
&gt;&gt; Mike North: So
if we had something like this,

49
00:03:20.432 --> 00:03:21.556
&gt;&gt; Mike North: That's fair game.

50
00:03:31.814 --> 00:03:35.820
&gt;&gt; Mike North: This is not,
nothing can be assignable to a never.

51
00:03:35.820 --> 00:03:38.900
You might ask, why would you do this?

52
00:03:38.900 --> 00:03:46.330
We'll dig into it a little bit tomorrow
as we talk about types in a deeper way.

53
00:03:46.330 --> 00:03:50.741
But just think of it as
something you would want in

54
00:03:50.741 --> 00:03:54.838
potentially unreachable sections of code.

55
00:03:54.838 --> 00:03:59.140
You can almost think of it like a throw
except for the typescript compiler.

56
00:03:59.140 --> 00:04:03.797
Where if somehow you have a function
that in some situation returns a never,

57
00:04:03.797 --> 00:04:07.580
now as the compiler is analyzing
your code, it's gonna say,

58
00:04:07.580 --> 00:04:11.470
well okay based on the argument
types that are passed in.

59
00:04:11.470 --> 00:04:14.100
I expect that you're gonna
end up with a never here.

60
00:04:14.100 --> 00:04:16.625
And so
this function is gonna return a never and

61
00:04:16.625 --> 00:04:20.394
you're trying to capture the result,
and that's gonna be a never.

62
00:04:20.394 --> 00:04:23.331
That error will percolate up through.

63
00:04:23.331 --> 00:04:27.450
It is the compile time
you think of it that way.

64
00:04:27.450 --> 00:04:32.250
So you wanna, it's for scenarios
you're deliberately trying to avoid.

65
00:04:33.300 --> 00:04:39.471
In our case for the RGB staff,
we might use a never in a situation where

66
00:04:39.471 --> 00:04:45.654
you're passing in like a string that
is neither of size 3 or size 6.

67
00:04:45.654 --> 00:04:47.510
You might use a never type there.

68
00:04:47.510 --> 00:04:54.490
Basically now, we have a better shot of
picking up on that problem at build time.

