WEBVTT

1
00:00:00.130 --> 00:00:02.280
Hi everyone, feel good about those.

2
00:00:02.280 --> 00:00:06.180
Right, I assumed set value remove value
probably shouldn't print anything.

3
00:00:06.180 --> 00:00:09.735
We don't want them to, we could
technically make it like set value

4
00:00:09.735 --> 00:00:12.476
could return the old value
that it's overriding.

5
00:00:12.476 --> 00:00:15.870
Remove value could return the value
that it's removing, right?

6
00:00:15.870 --> 00:00:17.564
We could do those we could print them out,
but

7
00:00:17.564 --> 00:00:19.980
I'm not sure how useful
those kinds of things are.

8
00:00:19.980 --> 00:00:22.580
Which one do we wanna start with?

9
00:00:22.580 --> 00:00:23.879
Get value or get value all?

10
00:00:25.090 --> 00:00:28.520
I think getValue is probably
a little bit more fun.

11
00:00:28.520 --> 00:00:29.630
It's a little tricky.

12
00:00:29.630 --> 00:00:30.530
So let's do that one.

13
00:00:31.590 --> 00:00:33.230
What are some things
we're gonna have to use?

14
00:00:33.230 --> 00:00:35.476
Well, if you're not familiar,

15
00:00:35.476 --> 00:00:40.460
there is definitely going to be
some kind of file popping going on.

16
00:00:40.460 --> 00:00:43.360
And how does node handle this?

17
00:00:43.360 --> 00:00:45.390
Well, there's a variety
of ways we can do right?

18
00:00:45.390 --> 00:00:49.350
We could technically use something
like path.join and do that, right?

19
00:00:49.350 --> 00:00:51.588
We could join with debug and

20
00:00:51.588 --> 00:00:57.210
that would produce a new path that
is effectively walking up it.

21
00:00:57.210 --> 00:01:02.087
A kind of, here, I'm gonna have to
go up here and paste that in and

22
00:01:02.087 --> 00:01:04.140
go fs path g, there you go.

23
00:01:05.800 --> 00:01:11.330
Another method that's just already on
path is called a base name, and dirname.

24
00:01:11.330 --> 00:01:12.912
So if you're not familiar with those ones,

25
00:01:12.912 --> 00:01:14.730
those are kind of Unix II
style items here.

26
00:01:14.730 --> 00:01:16.110
We can actually just
check this out right now.

27
00:01:16.110 --> 00:01:21.570
So I can go like this,
dirname/foo/bar/baz will produce foo bar.

28
00:01:21.570 --> 00:01:23.390
So that's really what we're looking for.

29
00:01:23.390 --> 00:01:26.945
And base name of course,
if you did the exact same thing,

30
00:01:26.945 --> 00:01:29.700
foo/bar/baz just produces baz, right?

31
00:01:29.700 --> 00:01:30.870
So these are cool little utilities.

32
00:01:30.870 --> 00:01:33.850
If you don't know about them, you should
know about them, they're fantastic.

33
00:01:33.850 --> 00:01:36.542
I find that you end up using them a lot
if you're just trying to get something

34
00:01:36.542 --> 00:01:37.690
quick done, so there we go.

35
00:01:37.690 --> 00:01:40.220
So we can use dirname
as a way to walk this.

36
00:01:40.220 --> 00:01:44.030
But what happens what's dirname,
how exactly does dirname work?

37
00:01:44.030 --> 00:01:48.860
And my guess is it probably works
a lot like the Unix Kind of style.

38
00:01:48.860 --> 00:01:51.970
So we can just discover what
happens at the very end, right?

39
00:01:51.970 --> 00:01:54.260
What is the dirname of slash?

40
00:01:54.260 --> 00:01:56.030
Well it's just slash, right?

41
00:01:56.030 --> 00:02:00.032
So that means we're gonna run into
a case where at the end of using this,

42
00:02:00.032 --> 00:02:04.790
the next directory we need to check is
the directory we've already checked.

43
00:02:04.790 --> 00:02:07.030
So we just kind of need to make
sure we keep track of that.

44
00:02:08.200 --> 00:02:09.732
And that's it, awesome.

45
00:02:09.732 --> 00:02:14.912
So let's go like this,
let curr = this.config.pwd, awesome.

46
00:02:14.912 --> 00:02:21.477
And now we're gonna use the greatest loop
of all time known as the do while loop.

47
00:02:21.477 --> 00:02:27.060
All right, I think that this is
just the most beautiful ever.

48
00:02:27.060 --> 00:02:30.635
And I'm gonna do this,
I'm gonna have a previous just

49
00:02:30.635 --> 00:02:35.075
because I want to be able to just
have it inside the while condition.

50
00:02:35.075 --> 00:02:38.761
I could do a next right here and
do a break inside of it but

51
00:02:38.761 --> 00:02:42.380
why not just have while curr
does not equal previous?

52
00:02:43.840 --> 00:02:45.490
Does that look good?

53
00:02:45.490 --> 00:02:46.330
Yeah.

54
00:02:46.330 --> 00:02:50.090
So, let's do this, it should be
pretty straightforward, right?

55
00:02:50.090 --> 00:02:53.913
One thing I do love about JavaScript
is that their recent addition of these,

56
00:02:53.913 --> 00:02:57.198
the nollie, coalescing operator,
whatever you wanna call it,

57
00:02:57.198 --> 00:02:59.950
I think I call it
the Elvis operator at 1.0.

58
00:02:59.950 --> 00:03:05.140
I can do something like this,
value equals this.data.projector.

59
00:03:05.140 --> 00:03:09.892
And then we're gonna use, obviously we
start off with our path so I can curr and

60
00:03:09.892 --> 00:03:13.018
then I can give it that sweet,
question dot.

61
00:03:13.018 --> 00:03:14.700
I love it.
It's fantastic.

62
00:03:14.700 --> 00:03:16.400
And then give it a key, right?

63
00:03:16.400 --> 00:03:20.727
So if there's a value here,
we should probably use that value, right?

64
00:03:20.727 --> 00:03:26.639
So if value, well, we'll go like
this let out equals undefined and

65
00:03:26.639 --> 00:03:30.697
it can also be a string and
go out equals value.

66
00:03:30.697 --> 00:03:35.830
By the way just kind of a personal thing
I never, I don't like to return in

67
00:03:35.830 --> 00:03:41.680
the middle of things I find that it
often leads to harder to debug problems.

68
00:03:41.680 --> 00:03:45.584
So I just do that hit with a nice little
break cuz that's the end of that and

69
00:03:45.584 --> 00:03:46.290
return out.

70
00:03:47.400 --> 00:03:50.760
Personal building, kind of thing.

71
00:03:50.760 --> 00:03:55.132
So, now we go like this,
const next = path.dirname,

72
00:03:55.132 --> 00:03:59.317
passing the current and
then go previous = current,

73
00:03:59.317 --> 00:04:03.422
actually we don't even need
to do the next, right?

74
00:04:03.422 --> 00:04:05.862
And then current equals,
paste that in, sorry,

75
00:04:05.862 --> 00:04:07.790
that was from a previous testing time.

76
00:04:07.790 --> 00:04:09.120
There we go.

77
00:04:09.120 --> 00:04:11.330
We just move everything forward.

78
00:04:11.330 --> 00:04:14.240
If we've done this all correct, we
should hopefully break out of this loop.

79
00:04:14.240 --> 00:04:17.539
If I haven't done this correct,
we're gonna be spinning in circles for

80
00:04:17.539 --> 00:04:18.250
a long time.

81
00:04:18.250 --> 00:04:20.470
And then maybe I'll have to do
some sort of print debugging.

82
00:04:20.470 --> 00:04:21.285
It'll be a lot of fun.

83
00:04:21.285 --> 00:04:22.639
Great times.

84
00:04:22.639 --> 00:04:24.172
Let's see.

85
00:04:25.652 --> 00:04:26.700
Awesome.

86
00:04:26.700 --> 00:04:27.640
So there we go.

87
00:04:27.640 --> 00:04:29.550
We have everything we
kind of want right here.

88
00:04:29.550 --> 00:04:33.550
I think that's good,
everyone good with this one?

89
00:04:33.550 --> 00:04:34.700
Shall we move on?

90
00:04:34.700 --> 00:04:35.730
I think we shall.

91
00:04:35.730 --> 00:04:39.080
All right, so I'm just gonna copy
this code and let's do get value all.

92
00:04:39.080 --> 00:04:44.702
Now, theoretically we could create some
sort of containing, some sort of almost

93
00:04:44.702 --> 00:04:49.840
iterator like method to be able to walk
these paths and do all of this for us.

94
00:04:49.840 --> 00:04:52.930
And so that way, we don't have to
duplicate this logic, but it's just

95
00:04:52.930 --> 00:04:56.450
different enough that it's kind of painful
to try to make all these things work.

96
00:04:56.450 --> 00:04:57.950
You kind of get into goofy interfaces.

97
00:04:57.950 --> 00:05:02.790
So we're just gonna do this nice,
the old fashioned way.

98
00:05:02.790 --> 00:05:08.598
So I wanna do out equals that,
out will be returned to down here,

99
00:05:08.598 --> 00:05:11.517
but there is one small problem.

100
00:05:11.517 --> 00:05:16.529
Now remember, the present working
directory is our most specific directory,

101
00:05:16.529 --> 00:05:19.613
that's the values we
definitely want the most.

102
00:05:19.613 --> 00:05:21.098
The slash directory or

103
00:05:21.098 --> 00:05:25.879
Windows is C colon slash something
like that the other direction slash.

104
00:05:27.380 --> 00:05:29.120
That is our least specific values.

105
00:05:29.120 --> 00:05:32.672
So we wanna make sure we always have
the most specific values being used,

106
00:05:32.672 --> 00:05:34.780
not the least specific values being used.

107
00:05:34.780 --> 00:05:38.952
So if I were to simply walk this
directory and just merge the map over and

108
00:05:38.952 --> 00:05:41.580
over again we'd get a, what would that be?

109
00:05:41.580 --> 00:05:43.390
That'd be like a leftmost merge.

110
00:05:43.390 --> 00:05:44.510
We want a rightmost.

111
00:05:44.510 --> 00:05:46.070
Merge, we want to go the other direction.

112
00:05:46.070 --> 00:05:47.130
And this is backwards for you.

113
00:05:47.130 --> 00:05:50.139
So I just did backwards hand gestures for
both for you guys, you know,

114
00:05:50.139 --> 00:05:51.510
you get the idea.

115
00:05:51.510 --> 00:05:54.160
So let's walk the path.

116
00:05:54.160 --> 00:05:56.850
We'll put it all together,
and then we'll produce,

117
00:05:56.850 --> 00:05:58.770
then we'll just reverse the array.

118
00:05:58.770 --> 00:06:02.784
We'll keep it simple,
very procedural, very easy so

119
00:06:02.784 --> 00:06:08.700
we go like this const paths equals
an array, seems pretty simple, right?

120
00:06:08.700 --> 00:06:12.291
We'll do a nice, I will again,
we'll use the greatest loop known to man,

121
00:06:12.291 --> 00:06:14.639
do while loop I don't know
if you know this Past.

122
00:06:14.639 --> 00:06:17.238
Push current, fantastic and
we'll just do that and

123
00:06:17.238 --> 00:06:20.145
then at the end we can use
the old paths.reverse, right?

124
00:06:20.145 --> 00:06:24.051
And now we have all these, I'm sure we
could have done this in a more clever

125
00:06:24.051 --> 00:06:28.146
fashion but no need to be clever around
here we're just trying to program it so

126
00:06:28.146 --> 00:06:32.430
it's the most obvious I'll try to do
something similar in the other languages.

127
00:06:32.430 --> 00:06:37.090
So you can just see,
obvious as opposed to, too clever.

128
00:06:37.090 --> 00:06:41.483
All right, so reverse we're gonna just
do a nice little forEach right here, or

129
00:06:41.483 --> 00:06:46.430
we can use the greatest thing of all time,
that always leaves the bug a nice reduce.

130
00:06:46.430 --> 00:06:50.168
So let's do an accumulator and
of course the current path and

131
00:06:50.168 --> 00:06:53.926
we can do that erase then that thing and
just return this.

132
00:06:53.926 --> 00:06:55.086
Nothing is better.

133
00:06:55.086 --> 00:06:57.605
Don't you just love debugging these ones,
I just love it.

134
00:06:57.605 --> 00:07:01.385
It's just so fantastic because you don't
even know when it's going to return out

135
00:07:01.385 --> 00:07:05.296
the value, you don't know when it's going
to be the final value, just so much fun.

136
00:07:05.296 --> 00:07:07.790
So let's do that let's go return acc.

137
00:07:07.790 --> 00:07:11.225
And now what we need is just simply
check to see if there is an object

138
00:07:11.225 --> 00:07:14.847
in this location, and then we just
simply can merge it into the map and

139
00:07:14.847 --> 00:07:15.735
we call it a day.

140
00:07:15.735 --> 00:07:18.115
So, there's some different
ways we could do this.

141
00:07:18.115 --> 00:07:21.532
We can go const value =
this.data.projector and

142
00:07:21.532 --> 00:07:25.753
we can use the path to check if
there is a value at this location.

143
00:07:25.753 --> 00:07:30.420
We could just simply do a object.assign
and we could pass in our acc and

144
00:07:30.420 --> 00:07:32.409
then have our value, right?

145
00:07:32.409 --> 00:07:35.639
That's just simply gonna
assign it on top and

146
00:07:35.639 --> 00:07:40.880
we're going from left to right in
our directory structure, right?

147
00:07:40.880 --> 00:07:43.550
So we know that we're gonna get
the least specific to the most specific.

148
00:07:43.550 --> 00:07:47.010
So if we override something
not a big deal, right?

149
00:07:47.010 --> 00:07:48.720
And of course,
I'm in the wrong language here.

150
00:07:50.450 --> 00:07:51.960
Wait, what language is this?

151
00:07:51.960 --> 00:07:53.030
There we go, that's the language.

152
00:07:54.060 --> 00:07:55.430
There we go.

153
00:07:55.430 --> 00:07:57.480
We have it, awesome.

154
00:07:57.480 --> 00:08:01.120
So theoretically,
our get all value should work.

155
00:08:01.120 --> 00:08:04.841
Now we can start testing this, but
I'm just gonna finish this off and

156
00:08:04.841 --> 00:08:06.540
go all the way to the end.

157
00:08:06.540 --> 00:08:09.734
So let's do set value, set value should
be pretty straightforward set and

158
00:08:09.734 --> 00:08:11.470
delete a really, really fast, right?

159
00:08:12.620 --> 00:08:14.030
So let's just do that.

160
00:08:14.030 --> 00:08:20.383
If I can just do a simple let dir
= equals this.data.projector,

161
00:08:20.383 --> 00:08:26.290
and then pass in this.config.present
working directory.

162
00:08:27.470 --> 00:08:31.740
If directory doesn't exist,
well we can just take this.

163
00:08:33.200 --> 00:08:34.670
Put it over here?

164
00:08:34.670 --> 00:08:37.704
And I can just create a new object,
fantastic and

165
00:08:37.704 --> 00:08:40.148
of course set dir equal to that as well.

166
00:08:40.148 --> 00:08:42.873
And just do a nice dir key = value,
fantastic,

167
00:08:42.873 --> 00:08:45.269
that's really all we need to do, right?

168
00:08:45.269 --> 00:08:49.270
Cuz at this point the data
is kept within our object.

169
00:08:49.270 --> 00:08:51.533
We know it, so when we call save later on,

170
00:08:51.533 --> 00:08:55.111
it's going to already have all
this data they're, fantastic.

171
00:08:55.111 --> 00:08:57.101
I'm positive there's
a nicer way to do this but

172
00:08:57.101 --> 00:08:58.557
this is what I always end up doing.

173
00:08:58.557 --> 00:09:02.637
Though it has a really nice convention for
this, I think that is really slick Russ

174
00:09:02.637 --> 00:09:06.540
has a really slick convention for working
with maps or this types of objects.

175
00:09:06.540 --> 00:09:07.840
I know we're just using a simple object.

176
00:09:07.840 --> 00:09:08.700
We could have used a map.

177
00:09:08.700 --> 00:09:10.580
Is there any benefit to using a map?

178
00:09:10.580 --> 00:09:13.230
I'm not sure if we're gonna get much
benefit, same operations, right?

179
00:09:13.230 --> 00:09:14.310
I'm gonna have to do a get on it.

180
00:09:14.310 --> 00:09:15.380
It'll be undefined.

181
00:09:15.380 --> 00:09:17.405
Do a set on it.

182
00:09:17.405 --> 00:09:18.317
You really save anything?

183
00:09:18.317 --> 00:09:19.790
I don't know.

184
00:09:19.790 --> 00:09:20.440
So there we go.

185
00:09:21.540 --> 00:09:25.217
Let's grab that and we'll do pretty
much the exact same thing here except

186
00:09:25.217 --> 00:09:28.850
the only difference is that if it
exists we need to do something, right?

187
00:09:28.850 --> 00:09:31.430
So I'll just take that out, grab the key,

188
00:09:31.430 --> 00:09:35.316
grab the present working directory,
if this thing does exist.

189
00:09:35.316 --> 00:09:40.021
Well then, let's delete.

190
00:09:40.021 --> 00:09:42.747
We can even const this one, right?

191
00:09:42.747 --> 00:09:43.802
So let's just delete out dir key.

192
00:09:43.802 --> 00:09:45.960
There we go.

193
00:09:45.960 --> 00:09:48.890
We're gonna just remove
this entry from our object.

194
00:09:48.890 --> 00:09:50.630
Fantastic, we've done it.

195
00:09:50.630 --> 00:09:55.720
We now pretty much have our entire
API in TypeScript done at this point.

196
00:09:55.720 --> 00:09:57.836
And a few tests are probably in order.

197
00:09:57.836 --> 00:10:02.062
So we can jump on that now and make sure
everything works before we finish off

198
00:10:02.062 --> 00:10:05.551
the program by doing the printing out,
by doing the saving and

199
00:10:05.551 --> 00:10:07.580
kind of the rest of the operations.

