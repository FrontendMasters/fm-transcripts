WEBVTT

1
00:00:00.000 --> 00:00:01.195
So let's keep on going.

2
00:00:01.195 --> 00:00:05.958
Let's do these three operations,
we have print, add and remove.

3
00:00:05.958 --> 00:00:09.008
We're not gonna be doing the displaying
and the saving in this case yet,

4
00:00:09.008 --> 00:00:12.258
we're just gonna kind of take care of
each one of those operations cuz they all

5
00:00:12.258 --> 00:00:13.458
really build on each other.

6
00:00:13.458 --> 00:00:15.853
And each language will
kind of do its own way,

7
00:00:15.853 --> 00:00:19.082
Go being the language in which
you look upon stack overflow.

8
00:00:19.082 --> 00:00:22.344
And the answer is always,
it's not hard to just write that yourself,

9
00:00:22.344 --> 00:00:24.179
that's Go's answer for everything.

10
00:00:24.179 --> 00:00:28.225
TypeScript I'm sure there's an NPM package
we can import, we're not gonna do that and

11
00:00:28.225 --> 00:00:31.135
Rust, there'll be a macro that
you can import, it will do it.

12
00:00:31.135 --> 00:00:34.480
That's pretty much how I've kind
of figured out life at this point,

13
00:00:34.480 --> 00:00:36.333
we'll see what happens, all right?

14
00:00:36.333 --> 00:00:39.415
So let's jump back out, let's go back
to TypeScript because TypeScript is our

15
00:00:39.415 --> 00:00:42.925
foundational language, it's the language
I assume everyone's fairly familiar with.

16
00:00:42.925 --> 00:00:47.401
All right, so let's start by creating
a file called projector, right?

17
00:00:47.401 --> 00:00:51.268
This should be our main file, this will
be the one in which does the projecting,

18
00:00:51.268 --> 00:00:53.187
right, if that's what it's called.

19
00:00:53.187 --> 00:00:56.817
I don't believe that is the correct term,
but this is JavaScript.

20
00:00:56.817 --> 00:01:00.645
You can conflate whatever physical or
mathematical phenomenon you want

21
00:01:00.645 --> 00:01:03.542
with something in TypeScript,
such as transducing.

22
00:01:03.542 --> 00:01:06.755
That's the thing that we use,
which is definitely not changing from one

23
00:01:06.755 --> 00:01:09.716
energy form to another so
what do we need to do with this projector?

24
00:01:09.716 --> 00:01:13.688
Well, we need to be able to take in
a config and create a projector.

25
00:01:13.688 --> 00:01:19.327
The projector should be able to take its
values and walk the tree, get a value,

26
00:01:19.327 --> 00:01:24.207
set a value at that location, or
remove the value at that location.

27
00:01:24.207 --> 00:01:27.744
That sounds about like the right
three set of operations and so

28
00:01:27.744 --> 00:01:31.906
I'm gonna kind of separate out two things,
I kind of want a data object.

29
00:01:31.906 --> 00:01:34.727
So I'm gonna go like this,
export type data with a capital D,

30
00:01:34.727 --> 00:01:38.171
I'm sure you can really call this
projector data or whatever you wanna do.

31
00:01:38.171 --> 00:01:40.692
We'll just keep our type
short while we're typing.

32
00:01:40.692 --> 00:01:44.515
And this is just gonna have
a simple single key projector and

33
00:01:44.515 --> 00:01:48.949
that is going to be a key string,
remember, cuz this right here is our

34
00:01:48.949 --> 00:01:53.711
present working directory, or
it's our directory structure, right?

35
00:01:53.711 --> 00:01:56.887
Cuz we need to represent
this underneath the hood and

36
00:01:56.887 --> 00:01:59.931
then this one will be a key string string,
right?

37
00:01:59.931 --> 00:02:05.015
So as you can see,
this is our key and our value, right?

38
00:02:05.015 --> 00:02:08.554
So that makes sense, right, because that
way if we have multiple directories,

39
00:02:08.554 --> 00:02:11.223
they all are kind of stored on
the same level, we can jump in.

40
00:02:11.223 --> 00:02:13.321
You're probably asking, why did I do this?

41
00:02:13.321 --> 00:02:16.627
Well, in the actual projector
program that I built,

42
00:02:16.627 --> 00:02:21.253
I also have another top level item called
links in which I can link all values

43
00:02:21.253 --> 00:02:24.062
from one directory into another directory.

44
00:02:24.062 --> 00:02:27.764
And so that was kind of why I kept these
top level items cuz that way I can add

45
00:02:27.764 --> 00:02:31.358
an options, we could do other things
we may want to expand upon later.

46
00:02:31.358 --> 00:02:35.365
But for the sake of this, we're just
gonna keep it simple, keep it like that,

47
00:02:35.365 --> 00:02:37.578
always able to add more things, awesome.

48
00:02:37.578 --> 00:02:41.065
So there we go, I feel like that's a good
type and the reason why it kind of kept it

49
00:02:41.065 --> 00:02:44.839
as its own type is that ultimately I just
wanna be able to go JSON.stringify, right?

50
00:02:44.839 --> 00:02:48.040
And so long as I have that as
its own thing off to the side,

51
00:02:48.040 --> 00:02:50.084
this should be really easy to do, or

52
00:02:50.084 --> 00:02:54.739
else I'm gonna have some other experience
that I don't want to have, awesome.

53
00:02:54.739 --> 00:02:59.812
So now we're gonna do it,
we're gonna create a class, why?

54
00:02:59.812 --> 00:03:02.832
Well, sometimes you gotta create a class,
it just feels good to create a class.

55
00:03:02.832 --> 00:03:04.578
I said we're gonna do that,
we're gonna do that now.

56
00:03:04.578 --> 00:03:07.229
Now, I know there's a lot of people
out there in the TypeScript world

57
00:03:07.229 --> 00:03:08.018
that just threw up.

58
00:03:08.018 --> 00:03:10.753
It's okay,
we're gonna get through this together,

59
00:03:10.753 --> 00:03:13.973
we're gonna new with the best of them,
and yeah, I'll be fun.

60
00:03:13.973 --> 00:03:19.453
All right, so let's create a static method
called static fromFile or from config.

61
00:03:19.453 --> 00:03:21.674
And this thing is gonna
just take in a config,

62
00:03:21.674 --> 00:03:24.898
you can see these beautiful auto
completes for me, right there.

63
00:03:24.898 --> 00:03:27.135
This seems like the most
reasonable one yet.

64
00:03:27.135 --> 00:03:30.583
I'm just gonna take in a config and
I'm gonna produce a projector.

65
00:03:30.583 --> 00:03:33.867
The reason why I'm doing this is
that I don't wanna put a bunch

66
00:03:33.867 --> 00:03:37.857
of file operations, or things that
could fail inside of the constructor.

67
00:03:37.857 --> 00:03:39.911
Instead I have this nice
little method over here.

68
00:03:39.911 --> 00:03:41.216
So if I'm doing some testing,

69
00:03:41.216 --> 00:03:43.891
I could just potentially nude
up if I really wanted to, right?

70
00:03:43.891 --> 00:03:45.876
I can kind of get around
any of the problems,

71
00:03:45.876 --> 00:03:47.496
makes testing a little bit easier.

72
00:03:47.496 --> 00:03:50.579
So let's go like this.

73
00:03:50.579 --> 00:03:51.997
Apparently that's an unused declaration.

74
00:03:51.997 --> 00:03:54.970
Let's go over here,
let's import in the config, awesome.

75
00:03:54.970 --> 00:03:56.848
Now we just need to return a projector.

76
00:03:56.848 --> 00:04:01.613
So how do we think about this operation?

77
00:04:01.613 --> 00:04:05.146
Effectively, we have to use the path for
the config to go and

78
00:04:05.146 --> 00:04:07.844
find it if it exists on
our operating system.

79
00:04:07.844 --> 00:04:12.839
If it doesn't exist, I should just return
some sort of default set of data, right?

80
00:04:12.839 --> 00:04:15.469
But if it does exist,
I have to JSON parse that.

81
00:04:15.469 --> 00:04:20.134
If it fails I should just return the
default data or should I fail the program?

82
00:04:20.134 --> 00:04:22.710
I think to keep this thing
running smooth at all times,

83
00:04:22.710 --> 00:04:26.024
I'll just simply return a default config,
one that doesn't exist.

84
00:04:26.024 --> 00:04:27.527
We could throw an error,

85
00:04:27.527 --> 00:04:31.183
that's really up to how do you
feel if somehow you have JSON?

86
00:04:31.183 --> 00:04:34.030
If you were hand editing,
would you want all of your projector

87
00:04:34.030 --> 00:04:37.205
values just to disappear cuz I decided,
you have a parsing error,

88
00:04:37.205 --> 00:04:40.915
therefore this is an invalid file,
therefore you should get a new one, right?

89
00:04:40.915 --> 00:04:42.717
You could kind of debate
how this will work.

90
00:04:42.717 --> 00:04:47.442
But I think the easiest form is just
any error produces a default config,

91
00:04:49.499 --> 00:04:51.295
Or we read it from a file successfully.

92
00:04:51.295 --> 00:04:55.520
So let's do that, so the first thing
I'm gonna do is I'm gonna go like this,

93
00:04:55.520 --> 00:04:57.021
constant default config.

94
00:04:57.021 --> 00:05:01.339
Create a nice little one that's
very easy to do, projector and

95
00:05:01.339 --> 00:05:03.954
have that as an empty string, right?

96
00:05:03.954 --> 00:05:08.543
There you go, that is literally just
the default config, right, the empty one.

97
00:05:08.543 --> 00:05:09.521
Awesome and so

98
00:05:09.521 --> 00:05:14.826
now what we should be able to do is just
go through this thing one step at a time.

99
00:05:14.826 --> 00:05:18.732
The first thing is if the config
which has the thing config,

100
00:05:18.732 --> 00:05:21.239
maybe we should rename that, right?

101
00:05:21.239 --> 00:05:23.248
Does this file exist?

102
00:05:23.248 --> 00:05:24.899
So I can use something called Fs.

103
00:05:24.899 --> 00:05:28.617
If you're familiar with Fs,
has a bunch of file system operations,

104
00:05:28.617 --> 00:05:31.387
l they're gonna look very similar to Go or
to Rust.

105
00:05:31.387 --> 00:05:34.016
And this one already has existsSync.

106
00:05:34.016 --> 00:05:37.034
Since we don't necessarily
care about performance,

107
00:05:37.034 --> 00:05:40.780
I'm perfectly fine using sync operations,
simplifies the code.

108
00:05:40.780 --> 00:05:43.832
We don't even have to have anything async,
we don't have to have

109
00:05:43.832 --> 00:05:47.780
the wrapping function in the main file and
just makes makes life a little bit easier.

110
00:05:47.780 --> 00:05:52.535
So remember, we're gonna do this whole as
Fs thing, we could just fix our TS config,

111
00:05:52.535 --> 00:05:55.350
but we're gonna keep on going with it.

112
00:05:55.350 --> 00:06:00.567
There we go, so let's go existsSync,
which by the way,

113
00:06:00.567 --> 00:06:06.437
I am 100% positive if I went exist,
sync NPM, look at that,

114
00:06:06.437 --> 00:06:11.901
you can even install a package
in case you really want it to.

115
00:06:11.901 --> 00:06:16.028
Look at that, even was downloaded almost
1.3 million times just this last week.

116
00:06:16.028 --> 00:06:20.156
Kind of funny that something that exists
inside of node, yes, right, anyway.

117
00:06:20.156 --> 00:06:23.799
So now that we have this beautiful
piece of code, we can say, hey,

118
00:06:23.799 --> 00:06:27.490
if this thing exists,
we should just read this file, right?

119
00:06:27.490 --> 00:06:31.601
So I'm gonna do a little try catch,
of course and

120
00:06:31.601 --> 00:06:37.336
we're gonna have a nice conf- let's
see a data object right here.

121
00:06:37.336 --> 00:06:40.200
I'll just have like that for now,
this thing will be a data object.

122
00:06:40.200 --> 00:06:43.275
I think you have to use the word undefined
or else you can get in some weird

123
00:06:43.275 --> 00:06:45.852
black hole issues if you don't
get things correctly done.

124
00:06:45.852 --> 00:06:48.118
So we'll have this nice data object.

125
00:06:48.118 --> 00:06:50.187
We're gonna just figure out
which one it's supposed to be.

126
00:06:50.187 --> 00:06:55.794
I will now do an Fs read file sync,
of course, pass in the config config.

127
00:06:55.794 --> 00:07:00.157
So we're gonna go like this,
toString and then of course,

128
00:07:00.157 --> 00:07:05.677
I'm going to do JSON.parse, awesome and
do data equals that, perfect.

129
00:07:05.677 --> 00:07:09.366
So long as this thing is excess,
we have our data object.

130
00:07:09.366 --> 00:07:13.033
Else I'll do a data
equals the default data.

131
00:07:13.033 --> 00:07:15.902
I don't know why I called it config,
it actually should be called the default

132
00:07:15.902 --> 00:07:17.857
data, it's probably a little bit better,
right?

133
00:07:17.857 --> 00:07:21.032
And we can just return data, awesome.

134
00:07:21.032 --> 00:07:25.007
So we've done it, we've successfully did
the harder part, which is if the thing

135
00:07:25.007 --> 00:07:29.115
exists, let's read it out, let's make
sure it's parsed, it's all fantastic.

136
00:07:29.115 --> 00:07:33.529
Else, we can just return a default data,
right?

137
00:07:33.529 --> 00:07:37.014
Beautiful, I'm sure we can make
this function a little bit cleaner,

138
00:07:37.014 --> 00:07:40.558
move some things up here and there and
have ourselves a nice function but

139
00:07:40.558 --> 00:07:41.937
this is good enough for us.

140
00:07:41.937 --> 00:07:45.520
There we go, we have it but
what am I doing?

141
00:07:45.520 --> 00:07:48.532
We don't wanna return this,
sorry, mistake right here.

142
00:07:48.532 --> 00:07:50.408
We need to create a constructor now,
right?

143
00:07:50.408 --> 00:07:53.304
Constructor, what should we take in for
the constructor?

144
00:07:53.304 --> 00:07:57.904
Well, at the end of this operation,
who should be responsible for

145
00:07:57.904 --> 00:07:59.641
saving the data object?

146
00:07:59.641 --> 00:08:02.932
I'm gonna make the projector the one
that has the safe operation,

147
00:08:02.932 --> 00:08:04.767
that's just how we're gonna do it.

148
00:08:04.767 --> 00:08:06.741
You could do it any other way really,

149
00:08:06.741 --> 00:08:11.330
I can't really make a strong argument why
it should be one way versus the other.

150
00:08:11.330 --> 00:08:14.987
The only thing that's nice about this is I
can actually have the underlying data be

151
00:08:14.987 --> 00:08:17.478
private versus it being public and
you have to grab it and

152
00:08:17.478 --> 00:08:18.967
stringify it yourself, right?

153
00:08:18.967 --> 00:08:21.290
Kinda hide some of
the implementation details.

154
00:08:21.290 --> 00:08:23.415
So let's just have
the config passed in here so

155
00:08:23.415 --> 00:08:27.190
we have both the present working
directory and the path to the config.

156
00:08:27.190 --> 00:08:31.050
And let's also have the data which is
gonna be the data object passed in,

157
00:08:31.050 --> 00:08:31.629
awesome.

158
00:08:31.629 --> 00:08:36.030
And then of course I'm not sure if this is
good or bad TypeScript but I do like this.

159
00:08:36.030 --> 00:08:40.147
There we go, make those two private,
we have them accessible, awesome.

160
00:08:40.147 --> 00:08:43.369
We're good to go,
go down to this thing and

161
00:08:43.369 --> 00:08:47.854
let's just go new projector and
do the config and the data.

162
00:08:50.011 --> 00:08:53.978
And of course this is default data, right?

163
00:08:53.978 --> 00:08:58.857
Perfect, so we now have our two
projectors that can happen, correct?

164
00:08:58.857 --> 00:09:03.219
Awesome, jump up here,
let's probably export default this so

165
00:09:03.219 --> 00:09:05.576
we have this as an available item.

166
00:09:05.576 --> 00:09:09.155
And now we're pretty much done with
the creation of the projector.

167
00:09:09.155 --> 00:09:10.297
We could test this.

168
00:09:10.297 --> 00:09:14.922
Personally, I tend to avoid testing
anything that touches kind of external

169
00:09:14.922 --> 00:09:18.114
items such as the file system,
anything like that.

170
00:09:18.114 --> 00:09:20.041
I always find that there's
a lot of pain and so

171
00:09:20.041 --> 00:09:23.136
often what I'll end up doing is finding
a way to abstract this thing out so

172
00:09:23.136 --> 00:09:26.360
I can just provide like, hey,
here's the string you're supposed to be.

173
00:09:26.360 --> 00:09:29.254
If it throws I expect this but
we don't need to go to that for

174
00:09:29.254 --> 00:09:32.459
Bossier when it comes to testing this,
fairly simple program.

175
00:09:32.459 --> 00:09:35.163
I think we're fine just
kind of avoiding it.

176
00:09:35.163 --> 00:09:38.053
So we need to move on and if you remember,

177
00:09:38.053 --> 00:09:41.204
what are the three
operations we need to do?

178
00:09:41.204 --> 00:09:43.860
Print, add, remove, awesome.

179
00:09:43.860 --> 00:09:45.119
So let's do all those three right now.

180
00:09:45.119 --> 00:09:48.189
Now remember,
print does have two modes, right?

181
00:09:48.189 --> 00:09:53.070
It has print the key that you provided and
print the entire directory.

182
00:09:53.070 --> 00:09:55.030
So in case you wanted to use JQL.

183
00:09:55.030 --> 00:09:57.715
If you've never used JQL,
great little command line utility.

184
00:09:57.715 --> 00:10:01.045
You could cat out all of
your values from projector,

185
00:10:01.045 --> 00:10:04.536
then pass it to JQL and
see what values have available.

186
00:10:04.536 --> 00:10:07.072
Pluck it out,
do whatever else you wanna do, fun times.

187
00:10:07.072 --> 00:10:12.070
All right, so
let's do the four methods, right?

188
00:10:12.070 --> 00:10:19.089
So our first method of course is gonna be,
we'll say get get value, all right.

189
00:10:19.089 --> 00:10:24.164
We'll have a get value,
we'll have a set value, right?

190
00:10:24.164 --> 00:10:27.466
And we'll have a remove value.

191
00:10:27.466 --> 00:10:30.911
That seems like a pretty reasonable
interface for all this, right?

192
00:10:30.911 --> 00:10:34.074
I just realized I made
this in the Rust style so

193
00:10:34.074 --> 00:10:37.916
I should probably do all
these nice things right here.

194
00:10:37.916 --> 00:10:42.216
It's really hard having to switch back and
forth between pascal or

195
00:10:42.216 --> 00:10:44.980
camel case and snake case.

196
00:10:44.980 --> 00:10:48.547
All right, I'm willing to settle in the
middle and just do screaming snake case,

197
00:10:48.547 --> 00:10:50.318
maybe everyone will be happy with that.

198
00:10:50.318 --> 00:10:52.420
All right, so what's our out here?

199
00:10:52.420 --> 00:10:57.727
I would say that our out should be
the exact same thing as this right here,

200
00:10:57.727 --> 00:10:58.515
correct?

201
00:10:58.515 --> 00:11:01.860
That should be the out here or should it?

202
00:11:01.860 --> 00:11:03.812
No, I think that this should
probably be our out, right?

203
00:11:03.812 --> 00:11:04.772
That makes more sense,

204
00:11:04.772 --> 00:11:07.324
we don't wanna include where each
one of the values came from.

205
00:11:07.324 --> 00:11:10.462
We just simply want to include
all the values you find.

206
00:11:10.462 --> 00:11:13.746
So we'll just use this one right here,
awesome.

207
00:11:13.746 --> 00:11:16.480
Go right here, paste that in.

208
00:11:20.157 --> 00:11:23.822
And of course that should be a,
what is that?

209
00:11:23.822 --> 00:11:26.821
I think that's it, right?

210
00:11:26.821 --> 00:11:29.707
Beautiful, all right, so
we have the correct return type here.

211
00:11:29.707 --> 00:11:31.202
We'll do the exact same
thing with get value.

212
00:11:31.202 --> 00:11:35.897
Get value really should be either a string
or if the thing's not found, an undefined.

213
00:11:35.897 --> 00:11:38.260
Right, that seems about correct.

214
00:11:38.260 --> 00:11:41.878
And it should also take in a key,
which should be a string.

215
00:11:41.878 --> 00:11:44.827
So we've kind of made
a definitive thing here.

216
00:11:44.827 --> 00:11:48.681
We wanna separate out these two methods.

217
00:11:48.681 --> 00:11:51.986
And as you can probably see, pattern
matching in Rust will make this very,

218
00:11:51.986 --> 00:11:53.613
very easy whereas with TypeScript,

219
00:11:53.613 --> 00:11:57.090
it's still a really easy operation,
it's just an additional if statement.

220
00:11:57.090 --> 00:12:01.044
But nonetheless, you can't make
the decisions based on types.

221
00:12:01.044 --> 00:12:05.063
You're making it based on
runtime checking of these datas.

222
00:12:05.063 --> 00:12:10.402
Those are those small decisions that
slowly add up over time that can make,

223
00:12:10.402 --> 00:12:12.784
I think, easy problems happen.

224
00:12:12.784 --> 00:12:17.736
All right, set value, exact same thing, we
should have a key, we should have a value.

225
00:12:17.736 --> 00:12:22.019
And of course removing a key or removing
a value, should be string, there we go.

