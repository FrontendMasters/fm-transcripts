WEBVTT

1
00:00:00.230 --> 00:00:01.150
Everyone feeling pretty good?

2
00:00:01.150 --> 00:00:03.925
Do you feel like we're starting
to get the language a little bit?

3
00:00:03.925 --> 00:00:07.040
Notice that we never really ran
into ownership problems, right?

4
00:00:07.040 --> 00:00:11.536
The reason being is that ownership
problems are easier to avoid sometimes and

5
00:00:11.536 --> 00:00:14.110
that last problem was pretty easy, right?

6
00:00:14.110 --> 00:00:18.070
We had a static string, we refer to that
static string, something else owns it.

7
00:00:18.070 --> 00:00:20.930
We're never going to own that string,
whatever we don't care.

8
00:00:20.930 --> 00:00:23.310
We could have cloned it out and
then owned the string.

9
00:00:23.310 --> 00:00:24.310
But why would you do that?

10
00:00:24.310 --> 00:00:25.234
Right?
Why would you clone

11
00:00:25.234 --> 00:00:26.251
something when it exists?

12
00:00:26.251 --> 00:00:28.518
Always, so we refer to it,
it gave us each line.

13
00:00:28.518 --> 00:00:32.658
Again we're just keep passing them along
as you just always treat your variable

14
00:00:32.658 --> 00:00:36.698
as if only one person can have this thing
because even if you have a reference.

15
00:00:36.698 --> 00:00:40.615
If you hand it to someone else they have
the reference just to always think of it

16
00:00:40.615 --> 00:00:43.870
that way is that one person gets
to hold the thing, and that's,

17
00:00:43.870 --> 00:00:45.840
it just makes it really easy.

18
00:00:45.840 --> 00:00:47.790
So let's go on, let's do problem two.

19
00:00:47.790 --> 00:00:50.490
So again, advent of code, yes.

20
00:00:50.490 --> 00:00:53.860
But let's do something
with a bit more parsing.

21
00:00:53.860 --> 00:00:57.762
I feel like it would be a little bit
more fun that last one is very trivial.

22
00:00:57.762 --> 00:01:01.390
So thank you again, Mr. Santa advent
of code, check it out, great time.

23
00:01:01.390 --> 00:01:04.203
So problem two, of course,
I dropped all the festivities and

24
00:01:04.203 --> 00:01:07.930
we're not gonna actually solve
the problem cuz it's fairly verbose.

25
00:01:07.930 --> 00:01:09.211
And you end up finding yourself,

26
00:01:09.211 --> 00:01:12.410
just programming a whole bunch about
checking for undefines and all that.

27
00:01:12.410 --> 00:01:14.690
We're just gonna parse the string.

28
00:01:14.690 --> 00:01:16.770
I feel like that is a good thing to do.

29
00:01:16.770 --> 00:01:20.448
So you're given these lines,
x1 x2, .2, x2, y2.

30
00:01:20.448 --> 00:01:26.564
I say that I think I said the right x1 y1
I think I threw a two in the beginning but

31
00:01:26.564 --> 00:01:29.638
either way, you get what I'm saying.

32
00:01:29.638 --> 00:01:30.434
.1 points the .2.

33
00:01:30.434 --> 00:01:33.650
You should only consider vertical or
horizontal lines.

34
00:01:33.650 --> 00:01:34.600
So what does that mean?

35
00:01:34.600 --> 00:01:38.371
That means either x1 equals y1, or

36
00:01:38.371 --> 00:01:42.394
I mean x1 equals x2 or y1 equals y2.

37
00:01:42.394 --> 00:01:43.610
And so here you go.

38
00:01:43.610 --> 00:01:44.490
Here's the example output.

39
00:01:44.490 --> 00:01:47.750
So we're gonna actually parse this
output and then we're gonna use it.

40
00:01:47.750 --> 00:01:49.360
So this is a little bit more effort.

41
00:01:49.360 --> 00:01:52.700
As you can see, we are gonna probably
use split once multiple times.

42
00:01:52.700 --> 00:01:54.240
Does that sound about right?

43
00:01:54.240 --> 00:01:58.868
And then while we're doing rust I'm also
gonna include some more trade operations.

44
00:01:58.868 --> 00:02:03.402
And we're gonna actually start using
the language in a more idiomatic way

45
00:02:03.402 --> 00:02:07.730
canonical way restasis way I'm not
really sure what the proper term is

