WEBVTT

1
00:00:01.040 --> 00:00:07.095
Let's go do this,
man that pun will never get old, right?

2
00:00:07.095 --> 00:00:10.636
All right, so I'm gonna go back
into my projector folder, so

3
00:00:10.636 --> 00:00:12.826
remember I'm in package projector.

4
00:00:12.826 --> 00:00:15.147
A little bit different than
the typescript world and

5
00:00:15.147 --> 00:00:16.792
I'm gonna add the word config.go.

6
00:00:16.792 --> 00:00:18.881
Now, something that's kind
of interesting in here is,

7
00:00:18.881 --> 00:00:21.067
notice that I'll use the term
package projector, right?

8
00:00:21.067 --> 00:00:23.410
Because that is my containing folder,
right?

9
00:00:23.410 --> 00:00:27.913
It is projector but look at what's kind of
neat about that is I like this type Foo

10
00:00:27.913 --> 00:00:32.232
struct and just do that really quickly
I'm gonna jump back to my main file.

11
00:00:32.232 --> 00:00:38.020
Noticed that my projector file now
also has Foo but it also has the Opts.

12
00:00:38.020 --> 00:00:43.191
So all files underneath the same
kind of sub package of package,

13
00:00:43.191 --> 00:00:46.640
they will share all of their exports.

14
00:00:46.640 --> 00:00:50.024
But it also means you get access to some
private things, which is kind of neat so

15
00:00:50.024 --> 00:00:53.355
you can kind of do some nice splitting up
of code things is a little bit easier to

16
00:00:53.355 --> 00:00:54.900
manage within a package.

17
00:00:54.900 --> 00:00:57.013
I'm trying to think of the correct,

18
00:00:57.013 --> 00:01:00.160
I think it's equivalent to
the Java no scope, right?

19
00:01:00.160 --> 00:01:02.013
Everything within your
package can share it, but

20
00:01:02.013 --> 00:01:04.540
everything on the outside can
only be access to the public.

21
00:01:04.540 --> 00:01:07.590
I believe that is what it is,
it's a weird scope, right?

22
00:01:07.590 --> 00:01:10.710
It's not a easy scope to kind of reason
about but that's effectively it.

23
00:01:10.710 --> 00:01:16.390
So, let's jump back, I'm gonna remove
that really quickly and remove that.

24
00:01:16.390 --> 00:01:18.360
So let's do the exact same thing.

25
00:01:18.360 --> 00:01:23.096
We're gonna create a operation enum, and
then we're gonna create a config struct,

26
00:01:23.096 --> 00:01:26.910
and then we're gonna fill in
all those values that we need.

27
00:01:26.910 --> 00:01:29.150
So exact same principle right here.

28
00:01:29.150 --> 00:01:34.362
So let's go type Operation equals int,

29
00:01:34.362 --> 00:01:40.199
and then const
Print Operation equals iota.

30
00:01:40.199 --> 00:01:41.850
Have you ever seen Ace Ventura?

31
00:01:43.470 --> 00:01:48.440
When nature calls, when Ace Ventura
has the spear in his leg and he says,

32
00:01:48.440 --> 00:01:51.630
iota don't just stand
there throw me a spear.

33
00:01:51.630 --> 00:01:53.100
That's what I think of
every single time I do.

34
00:01:53.100 --> 00:01:54.677
I know this is a Greek word but for

35
00:01:54.677 --> 00:01:58.430
me, it's just like that scene pops up
in my mind every single time I do that.

36
00:01:59.970 --> 00:02:02.940
Don't just stand there, throw me as beer,
it's just the greatest lie, okay?

37
00:02:02.940 --> 00:02:04.480
Anyways, that was weird.

38
00:02:04.480 --> 00:02:09.298
So now, that we got that done let's
do the config as well, and so

39
00:02:09.298 --> 00:02:12.623
let's create another type Config struct.

40
00:02:12.623 --> 00:02:17.527
And so we'll do the exact same kind of
setup because go doesn't allow you to do

41
00:02:17.527 --> 00:02:19.042
something different.

42
00:02:19.042 --> 00:02:23.007
Now, if you're thinking about Rust we
could probably do something a little bit

43
00:02:23.007 --> 00:02:24.500
different here, right?

44
00:02:24.500 --> 00:02:26.495
Because we have access
to these some types.

45
00:02:26.495 --> 00:02:30.647
So, we can be a lot more clever about
how we store information whereas

46
00:02:30.647 --> 00:02:35.096
with this one right, we have to kind
of go with this whole array approach.

47
00:02:35.096 --> 00:02:39.233
But the array has multiple or
single values or no values so we'll see,

48
00:02:39.233 --> 00:02:43.723
that's why I feel like Rust is less error
prone cuz you can be a little bit more

49
00:02:43.723 --> 00:02:46.205
specific with your types, all right?

50
00:02:46.205 --> 00:02:50.440
So let's go here, type Config struct,
we'll have Operation,

51
00:02:50.440 --> 00:02:55.457
remember always have to be capitalized,
which is an operation odd looking.

52
00:02:55.457 --> 00:03:00.455
Let's do a present working directory,
which will be a string lowercase,

53
00:03:00.455 --> 00:03:04.276
and we'll have a Config which
will be string lowercase.

54
00:03:04.276 --> 00:03:08.920
And let's also have at the top
a string array, so there you go.

55
00:03:08.920 --> 00:03:13.700
That's what we need, of course,
proper indenting is always desired by go.

56
00:03:13.700 --> 00:03:15.890
So there you go, they like to align those.

57
00:03:15.890 --> 00:03:19.237
If you don't like the alignment, you
can always add an extra space in there,

58
00:03:19.237 --> 00:03:21.720
re-execute it and
then it'll align various groups.

59
00:03:21.720 --> 00:03:26.612
Because every now and then you'll get
just some silly one that just goes on for

60
00:03:26.612 --> 00:03:27.380
a while.

61
00:03:27.380 --> 00:03:31.400
And then you try to do that and you're
like, gosh, I hate this, I hate that.

62
00:03:31.400 --> 00:03:35.190
And so put a space if you need a space.

63
00:03:35.190 --> 00:03:38.520
All right, so there we go,
we have the exact same thing.

64
00:03:38.520 --> 00:03:41.550
Now, we have to build the same methods,
we already know the same methods we need.

65
00:03:41.550 --> 00:03:44.624
So I'm just gonna write them all
out in order, do the export and

66
00:03:44.624 --> 00:03:47.130
then we'll work our way backwards, right?

67
00:03:47.130 --> 00:03:50.155
So we need a first,
we need to get present working directory,

68
00:03:50.155 --> 00:03:52.260
which is gonna return a string or
an error.

69
00:03:52.260 --> 00:03:56.578
Because remember everything in go just
always assume there's probably going to be

70
00:03:56.578 --> 00:03:57.490
an error.

71
00:03:57.490 --> 00:03:59.830
You'll be a lot happier in your life.

72
00:03:59.830 --> 00:04:05.271
Let's do the exact same thing,
Config but we also need the opts

73
00:04:05.271 --> 00:04:10.519
what is called, opts there we go,
we want that one, right?

74
00:04:10.519 --> 00:04:15.080
There we go,
we'll do that with ConfiggetOperation.

75
00:04:15.080 --> 00:04:19.440
We'll assume that this one
is probably no error, right?

76
00:04:19.440 --> 00:04:20.490
That's just seems right.

77
00:04:20.490 --> 00:04:25.040
And then we already know that getArgs
will definitely have an error, right?

78
00:04:25.040 --> 00:04:29.203
We've already pre-planned it,
it should be a string, array, or

79
00:04:29.203 --> 00:04:30.918
wrong side for the array.

80
00:04:30.918 --> 00:04:37.493
Remember it's, Error, there we go.

81
00:04:37.493 --> 00:04:40.031
That seems about right those
are the same methods we had before, so

82
00:04:40.031 --> 00:04:42.358
hopefully we can just go through now,
and just do it easily.

83
00:04:42.358 --> 00:04:47.367
So I'll go like this func NewConfig and
that's gonna

84
00:04:47.367 --> 00:04:52.499
return out a pointer to a Config or
an error, awesome.

85
00:04:52.499 --> 00:04:56.679
I'm getting no LSP answers, when I see
nothing's getting any LSP problems,

86
00:04:56.679 --> 00:05:00.745
I just assume there's a problem, and
of course, I added all these colons.

87
00:05:00.745 --> 00:05:06.160
Don't add colons, they're not good for
your health, there we go, fantastic.

88
00:05:06.160 --> 00:05:09.123
Always a good identifier, you mess
something up is when the LSP stops working

89
00:05:09.123 --> 00:05:11.856
that's why I got so worried when
Rust wasn't working, I was like man,

90
00:05:11.856 --> 00:05:14.180
I'm screwing something up but
I don't see it.

91
00:05:14.180 --> 00:05:18.400
All right, so let's just start
from present working directory.

92
00:05:18.400 --> 00:05:21.456
We'll work our way down because we're
gonna have a lot of errors down here,

93
00:05:21.456 --> 00:05:23.960
and I don't want to try to guess
what that's gonna look like.

94
00:05:23.960 --> 00:05:26.250
Let's just get it all done up here first.

95
00:05:26.250 --> 00:05:27.559
All right, so of course,

96
00:05:27.559 --> 00:05:31.260
standard thing if opts present working
directory is not an empty string.

97
00:05:32.960 --> 00:05:36.110
Just like before, right,
we do that and a nil.

98
00:05:36.110 --> 00:05:38.720
Fantastic, pretty easy to do.

99
00:05:38.720 --> 00:05:40.809
The other one was just not empty or
didn't exist,

100
00:05:40.809 --> 00:05:42.562
this one's just simply an empty string.

101
00:05:42.562 --> 00:05:45.710
So, if it is an empty string,
we need the present working directory.

102
00:05:45.710 --> 00:05:51.294
Now, we have this package called
OS that has, I wanna say,

103
00:05:51.294 --> 00:05:56.429
it has the word Dir in it,
current, my goodness,

104
00:05:56.429 --> 00:06:01.480
present Get working directory,
that's what it is.

105
00:06:01.480 --> 00:06:05.440
So you just have to remember what
these things are, there we go.

106
00:06:05.440 --> 00:06:09.710
Spend a little time letting your
brain remember what it could be.

107
00:06:09.710 --> 00:06:12.120
So we're gonna have present
working directory and an error.

108
00:06:12.120 --> 00:06:16.691
So I was right,
of course there's always an error.

109
00:06:16.691 --> 00:06:18.324
So let's do this except for

110
00:06:18.324 --> 00:06:22.303
we don't return nil we can just
return an empty string, awesome.

111
00:06:22.303 --> 00:06:27.448
Else we have our present working directory
let's return present working directory and

112
00:06:27.448 --> 00:06:28.940
of course nil.

113
00:06:28.940 --> 00:06:31.080
Now, if you look at this thing though,
what does it return?

114
00:06:31.080 --> 00:06:33.980
It actually returns the exact
interface we're returning.

115
00:06:33.980 --> 00:06:37.598
So we can kinda shortcut
this whole process and

116
00:06:37.598 --> 00:06:41.970
use its two arguments it returns for
our two arguments.

117
00:06:41.970 --> 00:06:44.230
So someone else can handle it,
kinda like a nice little shortcut.

118
00:06:44.230 --> 00:06:46.820
So if something returns two arguments,
you return two arguments.

119
00:06:46.820 --> 00:06:49.787
They can kind of flow through,
it feels good, right, feels good.

120
00:06:49.787 --> 00:06:52.847
So I'm actually gonna just
take this whole thing and

121
00:06:52.847 --> 00:06:57.715
I'm gonna go down to getConfig, replace
present working directory with Config,

122
00:06:57.715 --> 00:07:00.579
if a Configs there we'll
just use their Config.

123
00:07:00.579 --> 00:07:04.740
But at this point we have to do
something a little different, let's go.

124
00:07:05.980 --> 00:07:11.260
I'm gonna call this XDG, and
of course, we're gonna have err and

125
00:07:11.260 --> 00:07:16.360
we're gonna go OS.GetUser,
there we go, UserConfiDir.

126
00:07:16.360 --> 00:07:19.230
So this actually has a nice little
strategy where they actually have their

127
00:07:19.230 --> 00:07:21.830
own method for you so
you don't have to know a lot about it.

128
00:07:21.830 --> 00:07:24.010
I find this to actually be pretty nice,
right?

129
00:07:24.010 --> 00:07:25.230
That they provide this for you.

130
00:07:25.230 --> 00:07:27.949
I think this is why go is often
used in a lot of tooling,

131
00:07:27.949 --> 00:07:32.270
is that it has a lot of nice little
functions for handling these differences.

132
00:07:32.270 --> 00:07:36.550
It also has a really powerful add parser,
the one we use is really simple.

133
00:07:36.550 --> 00:07:40.148
But if you ever wondered how docker has
like all these different positional ones

134
00:07:40.148 --> 00:07:41.759
with different flags and all that,

135
00:07:41.759 --> 00:07:44.760
they have ufav-CLI parser I
think is what it's called.

136
00:07:44.760 --> 00:07:50.380
Ufav, yeah, ufav-CLI something,
it actually has it, it's really amazing.

137
00:07:50.380 --> 00:07:54.330
So I really appreciate a lot
of the go kind of CLI stuff.

138
00:07:54.330 --> 00:07:55.610
So anyway, so we have this.

139
00:07:55.610 --> 00:07:59.830
We obviously have the ConfigDir here,
we'll call it just Config for now.

140
00:07:59.830 --> 00:08:04.480
And we have the err if there is an err,
we do need to return an empty string.

141
00:08:04.480 --> 00:08:07.470
If there's not an error,
now we can do something with it.

142
00:08:07.470 --> 00:08:10.710
Remember we have to mutate it,
we have to add in extra stuff.

143
00:08:10.710 --> 00:08:17.008
So I'm gonna return a path,
this looks really familiar, right?

144
00:08:17.008 --> 00:08:18.068
Is it Join?

145
00:08:18.068 --> 00:08:20.193
Look at that, it's the same thing.

146
00:08:20.193 --> 00:08:23.320
So we can go Config projector, right?

147
00:08:24.360 --> 00:08:27.058
Projector.json, right?

148
00:08:27.058 --> 00:08:29.380
So I didn't add nil.

149
00:08:29.380 --> 00:08:33.490
So notice that I did not do the home one,
we could do the home one right here.

150
00:08:33.490 --> 00:08:36.960
That is an option, but
we can just also cut it right here.

151
00:08:36.960 --> 00:08:39.610
However, you guys want to do it,
add in the things you want.

152
00:08:39.610 --> 00:08:44.455
I don't think there's a lot of value in me
showing you, yes, you do an else here and

153
00:08:44.455 --> 00:08:46.560
then do this again, right?

154
00:08:46.560 --> 00:08:47.670
All right, awesome.

155
00:08:47.670 --> 00:08:55.150
Exact same thing with operation we do
pretty much the exact same code, right?

156
00:08:55.150 --> 00:08:59.382
So I'm gonna go len opts,Args,

157
00:08:59.382 --> 00:09:04.528
if it equals 0 return print, awesome.

158
00:09:04.528 --> 00:09:09.890
Else we need to kinda do that
same kind of error checking,

159
00:09:09.890 --> 00:09:14.804
so I'm gonna go if opts.Args 0 equals add,
well,

160
00:09:14.804 --> 00:09:17.931
then we need to do if opts.args,

161
00:09:17.931 --> 00:09:23.204
length does not equal 3 then
we got do some stuff right.

162
00:09:23.204 --> 00:09:26.129
Here's the confusing part, no, wait,

163
00:09:26.129 --> 00:09:29.879
that's I'm doing the wrong one return,
not yet, sorry,

164
00:09:29.879 --> 00:09:34.764
not yet, I'm doing the wrong one there
let's go like that print this and go.

165
00:09:34.764 --> 00:09:42.350
If it's RM do remove, else,
return Print, there we go, awesome.

166
00:09:42.350 --> 00:09:45.005
This is the operation I was
doing the Args and all that.

167
00:09:45.005 --> 00:09:47.270
Awesome, so let's pretty much grab.

168
00:09:47.270 --> 00:09:51.380
I'm gonna grab that whole thing and
go down to Args and paste it in here.

169
00:09:51.380 --> 00:09:56.255
If it is an empty one, well, I just simply
need to return back out an empty array,

170
00:09:56.255 --> 00:09:56.770
right?

171
00:09:58.410 --> 00:09:59.200
Awesome.

172
00:09:59.200 --> 00:10:01.250
But this one wants to have an error.

173
00:10:01.250 --> 00:10:04.460
So, I'll throw a little error in there,
fantastic.

174
00:10:04.460 --> 00:10:07.760
Now, let's do the exact same approach
we did in the typescript one.

175
00:10:07.760 --> 00:10:13.270
If the Args is 0, and it's an add,
then we need to go if Len opts,

176
00:10:13.270 --> 00:10:17.380
hey, no, Args up,
I've lost autocomplete for

177
00:10:17.380 --> 00:10:23.220
whatever reason does not equal 3,
well, what do we need to do?

178
00:10:23.220 --> 00:10:27.849
Well, we can return a nil, and
then now we need to return an errors.

179
00:10:27.849 --> 00:10:28.860
There's two types of errors.

180
00:10:28.860 --> 00:10:33.307
I kind of showed you one earlier,
we either format a new error right here or

181
00:10:33.307 --> 00:10:37.556
we can use the errors package,
right, we can use the errors package.

182
00:10:37.556 --> 00:10:41.848
Is there one that I strongly prefer
look even tab nine is just telling

183
00:10:41.848 --> 00:10:44.497
me right there this is what you should do.

184
00:10:44.497 --> 00:10:49.158
And so we could use this, hey, that's
really nice look at how add requires 2

185
00:10:49.158 --> 00:10:52.833
arguments but got, and
then we could go through and do this.

186
00:10:52.833 --> 00:10:57.540
But for this one, let's just use a format
F because it's really easy, it's nice.

187
00:10:57.540 --> 00:11:03.116
So ErrorF, add requires 2 arguments,

188
00:11:03.116 --> 00:11:10.340
but received that len opts.Args, awesome.

189
00:11:10.340 --> 00:11:13.380
So now,
we just simply need to return this.

190
00:11:13.380 --> 00:11:18.230
So we just need to take
the slice of the remaining Args.

191
00:11:18.230 --> 00:11:22.390
Go has an amazing thing
that I wish typescript had.

192
00:11:22.390 --> 00:11:24.750
We can just say, hey, I want that, right?

193
00:11:24.750 --> 00:11:28.690
I like that they have these things
available, I think it's really clever.

194
00:11:28.690 --> 00:11:30.546
It's just something I've
grown to appreciate is

195
00:11:30.546 --> 00:11:31.790
having these slices available.

196
00:11:31.790 --> 00:11:34.402
There you go,
you just take that you just have it.

197
00:11:34.402 --> 00:11:36.880
We need to do this exact same
thing now with remove, right?

198
00:11:36.880 --> 00:11:42.630
So let's just turn it to remove decrement
it wants decrement at once, same code.

199
00:11:42.630 --> 00:11:43.770
Now, we remove that.

200
00:11:43.770 --> 00:11:47.250
Wow, all right,
as it's about as easy as it gets, right?

201
00:11:47.250 --> 00:11:49.130
We could probably be open,
we don't wanna do that.

202
00:11:49.130 --> 00:11:51.655
We could make this a little
bit more clever and

203
00:11:51.655 --> 00:11:55.909
I'm sure I could produce this into some
sort of length checking type item and

204
00:11:55.909 --> 00:11:58.242
then we don't have such duplicate code.

205
00:11:58.242 --> 00:12:01.443
But rule of three, Martin Fowler,
I'm only doing this twice so

206
00:12:01.443 --> 00:12:04.659
I'm not gonna refactor it into
something smart, there you go.

207
00:12:04.659 --> 00:12:06.615
You can be smart though if you need to and

208
00:12:06.615 --> 00:12:09.059
so the last one we'll just use is Print,
right?

209
00:12:09.059 --> 00:12:11.178
Last time I think we
had RM as the last one,

210
00:12:11.178 --> 00:12:13.491
we'll just do print as
the last one this one.

211
00:12:13.491 --> 00:12:18.106
So if length of opts.Args
doesn't is greater than 1

212
00:12:18.106 --> 00:12:22.421
then we have ourselves a bit of a problem,
right?

213
00:12:22.421 --> 00:12:27.614
And print this out, all right, so if the
length of our Args is greater than 1 we

214
00:12:27.614 --> 00:12:33.950
have a problem, we expect print requires
0 or 1 arguments, but received this much.

215
00:12:33.950 --> 00:12:37.395
And I realized up here that we forgot
to do the minus one, that'd be very,

216
00:12:37.395 --> 00:12:39.620
very confusing for any of err users here.

217
00:12:39.620 --> 00:12:43.872
And we're way over 80 characters,
which is considered a mortal sin of mine,

218
00:12:43.872 --> 00:12:44.511
all right.

219
00:12:44.511 --> 00:12:47.943
So there we go, we've done that now one
thing I noticed that we're doing in this

220
00:12:47.943 --> 00:12:50.762
one that I just kind of blazed
through not really thinking about,

221
00:12:50.762 --> 00:12:53.859
is that I'm actually checking what
type of operation is going on here.

222
00:12:53.859 --> 00:12:58.099
So I could use this instead we could grab
that out probably is a bit better just

223
00:12:58.099 --> 00:13:03.020
because you don't really want to be in the
business of doing the same logic twice.

224
00:13:03.020 --> 00:13:04.160
It just feels a little bit cleaner.

225
00:13:04.160 --> 00:13:05.972
So I'm just gonna do that right now,

226
00:13:05.972 --> 00:13:09.830
operation just cuz it makes me
feel better about my life, okay?

227
00:13:09.830 --> 00:13:17.137
All right, and so let's go,
operation equals Add, there you go

228
00:13:22.363 --> 00:13:25.729
Remove and there we go, awesome.

229
00:13:25.729 --> 00:13:28.987
So we have everything we need, return and

230
00:13:28.987 --> 00:13:34.212
then of course we're just gonna
say opts.Args nil, fantastic.

231
00:13:34.212 --> 00:13:36.936
So that did everything we needed to do and

232
00:13:36.936 --> 00:13:40.313
all we have to do now is
just fill in the new Config.

233
00:13:40.313 --> 00:13:44.012
And so just like I told you if we have
a bunch of errors we really have to think

234
00:13:44.012 --> 00:13:48.194
about that beforehand, that's why we're
just gonna have this pretty consistent

235
00:13:48.194 --> 00:13:49.825
interface across everything.

236
00:13:50.945 --> 00:13:53.635
Which is gonna just look,
let's just do them one at a time, right?

237
00:13:53.635 --> 00:13:59.757
So present working directory, err equals
get present working directory, and

238
00:13:59.757 --> 00:14:06.590
just pass in of course the opts in which
we forgot right here and handle the err.

239
00:14:06.590 --> 00:14:13.640
Config, err equals getConfig opts,
handle the err, right?

240
00:14:13.640 --> 00:14:15.420
Look at this,
we're just flying through this.

241
00:14:15.420 --> 00:14:17.220
It's like it's just so easy.

242
00:14:17.220 --> 00:14:23.710
Print it again, let's have Args ,getArgs.

243
00:14:23.710 --> 00:14:25.740
There we go, handle the err.

244
00:14:25.740 --> 00:14:28.910
Now, all we need now is just
simply to return a Config.

245
00:14:28.910 --> 00:14:32.470
Remember don't forget the pointer
parts and of course a nil for err and

246
00:14:32.470 --> 00:14:35.766
do present working directory,
present working directory.

247
00:14:35.766 --> 00:14:40.595
Config as config,
operation as getOperation

248
00:14:40.595 --> 00:14:45.423
because we don't actually
need to worry about

249
00:14:45.423 --> 00:14:50.516
an error on that one, and
of course Args as Args.

250
00:14:50.516 --> 00:14:52.634
Put that in there and there we go.

251
00:14:52.634 --> 00:14:57.666
We've actually done it, we've written the
entire thing a little bit more boilerplate

252
00:14:57.666 --> 00:15:01.952
but I also liked the fact that we're
not doing exceptions as control flow.

253
00:15:01.952 --> 00:15:04.157
&gt;&gt; For
me I've never been a big fan of that but

254
00:15:04.157 --> 00:15:07.623
this feels pretty nice right we
got everything we need to do done.

255
00:15:07.623 --> 00:15:14.314
And if we go back to our main file,
we can obviously go config,

256
00:15:14.314 --> 00:15:19.205
err projector, NewConfig pass in the opts,

257
00:15:19.205 --> 00:15:23.212
yanked out thing paste it down here.

258
00:15:23.212 --> 00:15:24.998
What is this one?

259
00:15:24.998 --> 00:15:28.460
Err, yeah, okay.

260
00:15:28.460 --> 00:15:33.110
Well, I didn't put pointers everywhere
people, I forgot the pointer part here.

261
00:15:33.110 --> 00:15:35.110
So, let's get that done really quickly.

262
00:15:35.110 --> 00:15:37.882
Everyone, I hope you've done pointers
maybe you guys are better at paying

263
00:15:37.882 --> 00:15:38.745
attention than I was.

264
00:15:38.745 --> 00:15:44.026
[SOUND] There we go, awesome,
exact same error pops up again,

265
00:15:44.026 --> 00:15:48.100
unable to get the option
unable to get the config

266
00:15:50.981 --> 00:15:53.422
There we go,
we have this beautiful little config now.

267
00:15:53.422 --> 00:15:57.492
Now, we can even print this out just to
make sure everything is working let's do

268
00:15:57.492 --> 00:16:01.528
a nice little go run do this and it says,
hey, you have an unused import error.

269
00:16:01.528 --> 00:16:05.503
So there's something about go that's
pretty interesting which is if you don't

270
00:16:05.503 --> 00:16:07.495
use something it will always add error.

271
00:16:07.495 --> 00:16:09.085
And so let's go back to our config,

272
00:16:09.085 --> 00:16:12.370
remember when I was showing you
the errors package, I imported it.

273
00:16:12.370 --> 00:16:15.626
I'm no longer using it,
you may not compile.

274
00:16:15.626 --> 00:16:19.440
All right, there we go,
we got a beautiful thing.

275
00:16:19.440 --> 00:16:22.643
Hey, we received,
print requires 0 or 1 arguments, but

276
00:16:22.643 --> 00:16:24.830
we received two that's exactly right.

277
00:16:24.830 --> 00:16:26.880
I did test foo, I did all that.

278
00:16:26.880 --> 00:16:29.550
So this is perfect,
we exactly what we wanted to see.

279
00:16:29.550 --> 00:16:33.822
So if I reduce this down, we should see
this beautiful Args that operation print

280
00:16:33.822 --> 00:16:37.420
present working directory bass config bar,
fantastic, right?

281
00:16:38.670 --> 00:16:40.220
How does everyone feel about that?

282
00:16:40.220 --> 00:16:41.621
Feeling good?
What do you feel about go,

283
00:16:41.621 --> 00:16:43.250
cuz it's kind of it's different, right?

284
00:16:43.250 --> 00:16:48.150
It's not, I'd say it as easy or
as loosey goosey as typescript.

285
00:16:48.150 --> 00:16:54.066
Definitely not as academic or difficult as
Rust but it's still fairly fast, right?

286
00:16:54.066 --> 00:16:56.938
Maybe the error handling
you don't like and

287
00:16:56.938 --> 00:17:00.830
it's kind of like everywhere
at all times I don't know.

288
00:17:00.830 --> 00:17:04.920
I don't really mind the error handling, I
know people get really worked up about it.

289
00:17:04.920 --> 00:17:08.853
But just like, I personally would rather
have everything show me it has an error,

290
00:17:08.853 --> 00:17:10.563
and I don't have to think about it,

291
00:17:10.563 --> 00:17:14.610
then something just like, it turns out
that breaks every now and then, right?

292
00:17:14.610 --> 00:17:17.400
Like that kind of sucks, like JSON.parse.

293
00:17:17.400 --> 00:17:20.740
It just doesn't tell you an error, but it
can certainly error and take things down.

294
00:17:20.740 --> 00:17:23.868
So you should just know that it can error,
I'd rather have it come out.

295
00:17:23.868 --> 00:17:29.050
Personal feeling, maybe people
don't share the same sentiment.

296
00:17:29.050 --> 00:17:32.021
How do you feel about go,
any any positives?

297
00:17:32.021 --> 00:17:36.903
Cuz I feel like people rag on go a lot for
this exact reason,

298
00:17:36.903 --> 00:17:41.080
but I don't look at it as a as a negative,
right?

299
00:17:41.080 --> 00:17:42.180
I am fine with this.

300
00:17:42.180 --> 00:17:45.056
&gt;&gt; It seems like there's
a lot of boilerplate but

301
00:17:45.056 --> 00:17:47.750
that it's the syntax is pretty tight.

302
00:17:47.750 --> 00:17:53.610
It's like pretty concise
&gt;&gt; Yeah, that's how I feel, right?

303
00:17:53.610 --> 00:17:57.775
It's very simple syntax, you have to
memorize just a little bit to be able to

304
00:17:57.775 --> 00:17:59.987
make the jump from typescript to go, and

305
00:17:59.987 --> 00:18:03.870
work go really wins which we're
not even seeing is concurrency.

306
00:18:03.870 --> 00:18:08.447
It is just, you cannot use four
letter words on front and master but

307
00:18:08.447 --> 00:18:11.350
it is amazing how easy it is to do that.

308
00:18:11.350 --> 00:18:16.108
If you had some long running thing that
was gonna be operationally intensive,

309
00:18:16.108 --> 00:18:19.925
the fact that I can just go,
go func and go do something, boom,

310
00:18:19.925 --> 00:18:22.470
I'm concurrent all of a sudden, right?

311
00:18:22.470 --> 00:18:24.580
I'm doing things, that's amazing.

312
00:18:24.580 --> 00:18:29.204
And if you do it in Rust,
you're like installing packages,

313
00:18:29.204 --> 00:18:33.020
your main has to be different It's hard,
right?

314
00:18:33.020 --> 00:18:36.367
It's really easy to screw up and deadlock
yourself, go is pretty straight forward as

315
00:18:36.367 --> 00:18:39.682
long as you're not doing mutes you're
pretty much never gonna deadlock yourself.

316
00:18:39.682 --> 00:18:43.854
The moment you do mutases that's multiple
mutexes not to be confused with mutalist

317
00:18:43.854 --> 00:18:44.873
from Starcraft2.

318
00:18:44.873 --> 00:18:49.310
But if you do mutases you
can also deadlock yourself.

319
00:18:49.310 --> 00:18:53.180
It's a lot of fun,
it's good times anyways.

320
00:18:53.180 --> 00:18:57.258
So onto my favorite of them all,
which is beautiful Rust.

321
00:18:57.258 --> 00:18:59.330
Is everybody ready for
some beautiful rust?

322
00:19:00.690 --> 00:19:04.615
I really didn't feel that, but
I'm just gonna say you guys were a static.

323
00:19:04.615 --> 00:19:06.401
Twitch chat you're not here right now, but

324
00:19:06.401 --> 00:19:08.340
you should have saw them
front end master chat.

325
00:19:08.340 --> 00:19:12.110
You're not here right now, but one person
even fist pumped, it was incredible.

326
00:19:12.110 --> 00:19:15.220
It was amazing moment of life, all right.

327
00:19:15.220 --> 00:19:18.390
So we're gonna go to our lib.rs,
that we always do.

328
00:19:18.390 --> 00:19:21.960
And we first need to say, hey,
this is a new module we'll be using.

329
00:19:21.960 --> 00:19:24.785
So I'm gonna copy and paste that, and
I'm gonna throw in the word config.

330
00:19:24.785 --> 00:19:28.311
And I'm gonna say, hey, that doesn't exist
I know we're lying to it at the moment.

331
00:19:28.311 --> 00:19:31.836
So let's create a config.rs, beautiful.

332
00:19:31.836 --> 00:19:36.245
Now, it should exist notice that
it's saying, hey, it does exist,

333
00:19:36.245 --> 00:19:39.930
we're not getting that weird
file not existing problem.

