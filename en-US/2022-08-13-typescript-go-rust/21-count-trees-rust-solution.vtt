WEBVTT

1
00:00:00.170 --> 00:00:03.121
And let's create a p3.rs.

2
00:00:03.121 --> 00:00:07.053
And now all we have to do is simply grab
our input and we can do the exact thing

3
00:00:07.053 --> 00:00:11.385
that we just didn't go, but let's use the
more iterator kind of fun way to do it.

4
00:00:11.385 --> 00:00:13.547
And it will yield a slightly
different answer.

5
00:00:13.547 --> 00:00:15.805
So I'm gonna jump back to go for
a quick second.

6
00:00:15.805 --> 00:00:19.818
I'm gonna yap that and
then paste in the wrong thing and

7
00:00:19.818 --> 00:00:22.095
then paste in the right thing.

8
00:00:22.095 --> 00:00:24.563
It's how I assert dominance really.

9
00:00:24.563 --> 00:00:29.353
Do that, make sure I have that and
of course, return string.arrow.

10
00:00:29.353 --> 00:00:32.779
Again, it's an ampersand static string,
right?

11
00:00:32.779 --> 00:00:36.147
Cuz this reference lives forever because
this is a string that's compiled into

12
00:00:36.147 --> 00:00:36.757
our program.

13
00:00:36.757 --> 00:00:40.303
Going here make that into a double quote
this is where I wish I had that surrounds

14
00:00:40.303 --> 00:00:41.656
that you're talking about.

15
00:00:41.656 --> 00:00:45.736
And there we go, we have this beautiful
working function always create a main

16
00:00:45.736 --> 00:00:47.953
function because that's what it wants.

17
00:00:47.953 --> 00:00:50.731
And so
let's just solve it with this right here.

18
00:00:50.731 --> 00:00:53.462
So we're gonna go get input.

19
00:00:53.462 --> 00:00:56.132
Okay, so remember,
everything always think iterators.

20
00:00:56.132 --> 00:00:59.646
What is the thing we always call on
this block of text as the first thing,

21
00:00:59.646 --> 00:01:00.943
was the first thing we do.

22
00:01:00.943 --> 00:01:05.502
We got to convert it from
a string into an iterator.

23
00:01:05.502 --> 00:01:10.165
Anyone know what the first method is?

24
00:01:10.165 --> 00:01:12.286
Lines, we got to get each line, right?

25
00:01:12.286 --> 00:01:14.404
I was like come on I do this I knew this,
right?

26
00:01:14.404 --> 00:01:14.932
Okay, so

27
00:01:14.932 --> 00:01:19.298
now we're into iterator zone which is it
which I know is obviously much nicer.

28
00:01:19.298 --> 00:01:22.172
So here's where we're gonna get
something kind of interesting.

29
00:01:22.172 --> 00:01:24.202
So iterators do not give you your index,

30
00:01:24.202 --> 00:01:28.321
unlike the one in JavaScript where I just
simply need to add the second parameter,

31
00:01:28.321 --> 00:01:30.605
which is actually your
index into the array.

32
00:01:30.605 --> 00:01:33.071
And even the third one
is the array itself.

33
00:01:33.071 --> 00:01:37.085
I think there's some fun
problem with parse int.

34
00:01:37.085 --> 00:01:39.651
And using it over a map because it
actually passes in a bunch of things.

35
00:01:39.651 --> 00:01:41.069
You'll get a bunch of crazy answers.

36
00:01:41.069 --> 00:01:42.360
But anyways, let's go here.

37
00:01:42.360 --> 00:01:46.670
So there's another thing called a
numerate, which will take an iterator and

38
00:01:46.670 --> 00:01:48.205
then attach an index to it.

39
00:01:48.205 --> 00:01:53.153
And so now I can have the same thing that
I had with for each where I have the I or

40
00:01:53.153 --> 00:01:56.939
the for range and
go Lang I can now just have it right here.

41
00:01:56.939 --> 00:01:59.986
Again, it's not creating
copies of an entire array.

42
00:01:59.986 --> 00:02:05.420
It's just adding one value, turning it
into a tuple and adding an index to it.

43
00:02:05.420 --> 00:02:06.050
So it's quite nice.

44
00:02:06.050 --> 00:02:09.317
So there we go.
So the numerate very fantastic this thing.

45
00:02:09.317 --> 00:02:12.905
Man, again, having a great
library to manipulate strings or

46
00:02:12.905 --> 00:02:16.365
work with iterators makes using
a language really simple.

47
00:02:16.365 --> 00:02:18.258
I think that this actually really helps.

48
00:02:18.258 --> 00:02:22.469
So now that we have the string
line plus its index,

49
00:02:22.469 --> 00:02:26.894
we can just do that simple,
multiply by three yada.

50
00:02:26.894 --> 00:02:28.759
So let's go like this.

51
00:02:28.759 --> 00:02:29.444
Let's filter.

52
00:02:29.444 --> 00:02:33.543
Let's use a filter this time
cuz filters feel more exciting.

53
00:02:33.543 --> 00:02:35.978
And what is coming into here so
we can destructure.

54
00:02:35.978 --> 00:02:38.850
Remember rust allows destructuring
inside the argument.

55
00:02:38.850 --> 00:02:44.780
So we have a, I believe it should
be a reference to a tuple of index.

56
00:02:44.780 --> 00:02:48.614
And of course line.

57
00:02:48.614 --> 00:02:51.520
I wanna say I'm pretty
correct on this one.

58
00:02:51.520 --> 00:02:53.018
Let's find out.

59
00:02:53.018 --> 00:02:55.006
It looks like I am correct on this one.

60
00:02:55.006 --> 00:02:56.155
Okay, awesome.

61
00:02:56.155 --> 00:02:59.056
So now that we have this,
we need to do something with it.

62
00:02:59.056 --> 00:03:00.084
So let's go like this.

63
00:03:00.084 --> 00:03:02.080
Let's go line.

64
00:03:02.080 --> 00:03:06.067
I'm gonna return because, remember,
I do not use implicit returns, chars.

65
00:03:06.067 --> 00:03:09.022
So that goes over every
single UTF-8 character.

66
00:03:09.022 --> 00:03:11.029
This is actually gonna
properly treat the string so

67
00:03:11.029 --> 00:03:13.092
you won't have these weird
byte problems going on.

68
00:03:13.092 --> 00:03:16.995
And then we need the nth item, right?

69
00:03:16.995 --> 00:03:21.537
I want the nth item in this array or
in this iterator.

70
00:03:21.537 --> 00:03:23.264
It's kind of a cool trick, right?

71
00:03:23.264 --> 00:03:28.329
So now I can say, okay, the nth one,
of course is gonna be the index

72
00:03:28.329 --> 00:03:34.142
multiplied by three module load by
line.length, just like we did before.

73
00:03:34.142 --> 00:03:36.284
But what does nth return?

74
00:03:36.284 --> 00:03:38.340
So let's take a look at it.

75
00:03:38.340 --> 00:03:41.077
Let's just we can just
jump to its definition.

76
00:03:41.077 --> 00:03:44.375
It is an option because it may not exist.

77
00:03:44.375 --> 00:03:48.092
So now we kind of have a we have a small
problem it's not a big problem but

78
00:03:48.092 --> 00:03:50.429
we definitely have a smaller problem here.

79
00:03:50.429 --> 00:03:52.254
So what can we do here?

80
00:03:52.254 --> 00:03:54.650
Well we can return.

81
00:03:54.650 --> 00:03:58.401
We could technically do like is sum.

82
00:03:58.401 --> 00:03:58.999
So, I mean, that would work.

83
00:03:58.999 --> 00:04:02.129
We could turn this into
a nice if statement, right?

84
00:04:02.129 --> 00:04:04.640
So I could go let char at equals this and

85
00:04:04.640 --> 00:04:08.422
then convert it into snake
case because that'd be rude.

86
00:04:08.422 --> 00:04:13.740
And then go if let sum char at

87
00:04:13.740 --> 00:04:18.603
equals char at and go if.

88
00:04:18.603 --> 00:04:20.946
This is a lot stuff right here, right?

89
00:04:20.946 --> 00:04:26.122
If char-at equals that, well,
then what happens, right?

90
00:04:26.122 --> 00:04:28.543
We should be able to do this, but

91
00:04:28.543 --> 00:04:33.590
then let's see we should be able
to go return true or return false.

92
00:04:33.590 --> 00:04:35.564
Yeah, I guess you could do that and
saying, hey,

93
00:04:35.564 --> 00:04:37.304
this is incorrect because you forgot that.

94
00:04:37.304 --> 00:04:39.982
And then I'm saying this little next
thing this character is actually not

95
00:04:39.982 --> 00:04:40.552
even a string.

96
00:04:40.552 --> 00:04:41.826
What are you doing?

97
00:04:41.826 --> 00:04:42.595
Okay, you're right.

98
00:04:42.595 --> 00:04:45.016
So let's make sure we use
a character not a string.

99
00:04:45.016 --> 00:04:47.514
And there we go.
This actually technically works.

100
00:04:47.514 --> 00:04:50.071
We will be getting that character,
but honestly,

101
00:04:50.071 --> 00:04:52.337
this doesn't necessarily feel that great.

102
00:04:52.337 --> 00:04:54.609
Can we all agree this
does not feel that great?

103
00:04:54.609 --> 00:04:55.279
Okay, good.

104
00:04:55.279 --> 00:04:57.054
I'm happy you guys feel the same way.

105
00:04:57.054 --> 00:04:59.616
So let's do a flat map instead.

106
00:04:59.616 --> 00:05:01.095
Remember, flat maps.

107
00:05:01.095 --> 00:05:02.785
If you're seeing maps,
what can you do to it?

108
00:05:02.785 --> 00:05:05.117
You can squash it in and
just make it work.

109
00:05:05.117 --> 00:05:06.247
It feels so great.

110
00:05:06.247 --> 00:05:09.388
And remember if the thing is none,
well guess what?

111
00:05:09.388 --> 00:05:11.290
That's okay.
It will just ignore it, right?

112
00:05:11.290 --> 00:05:14.967
So if we're off the beaten path,
it's perfectly fine.

113
00:05:14.967 --> 00:05:20.206
So let's return this thing right here.

114
00:05:20.206 --> 00:05:21.825
And let's get rid of this for now.

115
00:05:21.825 --> 00:05:25.169
So now we have this beautiful
thing that is screwed up

116
00:05:25.169 --> 00:05:27.073
because I was using a filter.

117
00:05:27.073 --> 00:05:27.800
There we go.

118
00:05:27.800 --> 00:05:31.347
So now we have this so
now the next time we call map,

119
00:05:31.347 --> 00:05:35.756
it will have the value from
the option because it mapped it in.

120
00:05:35.756 --> 00:05:38.981
Which we can also do a filter now.

121
00:05:38.981 --> 00:05:43.285
If we do a filter now, what do you
think the thing is inside this closure?

122
00:05:43.285 --> 00:05:44.258
What type?

123
00:05:44.258 --> 00:05:45.465
Can anyone take a wild guess?

124
00:05:49.307 --> 00:05:53.227
&gt;&gt; It's areference to the string or

125
00:05:53.227 --> 00:05:56.356
something
&gt;&gt; Man, good job.

126
00:05:56.356 --> 00:05:58.052
It's a reference to the character right?

127
00:05:58.052 --> 00:06:00.939
That we've just pulled out it's
a reference to the nth character cuz

128
00:06:00.939 --> 00:06:02.449
remember filters are references.

129
00:06:02.449 --> 00:06:04.727
So if I just put an X right here, go this.

130
00:06:04.727 --> 00:06:05.870
It's a reference to the character.

131
00:06:05.870 --> 00:06:08.199
Great job.
That was a really good.

132
00:06:08.199 --> 00:06:09.408
You weren't writing any code.

133
00:06:09.408 --> 00:06:10.595
So you're like killing it.

134
00:06:10.595 --> 00:06:11.471
Does that right?

135
00:06:11.471 --> 00:06:13.357
Yeah, all right.

136
00:06:13.357 --> 00:06:14.148
So awesome.

137
00:06:14.148 --> 00:06:15.171
So we actually have that.

138
00:06:15.171 --> 00:06:16.627
So this is good.

139
00:06:16.627 --> 00:06:18.555
So I can do something like this.

140
00:06:18.555 --> 00:06:24.484
Filter where x equals the octothorpe,
right?

141
00:06:24.484 --> 00:06:26.501
And there we go so
we still have one problem.

142
00:06:26.501 --> 00:06:28.059
Of course, we have this thing so

143
00:06:28.059 --> 00:06:30.611
we'll just pattern match
away the ampersand sign.

144
00:06:30.611 --> 00:06:32.827
It's like hey,
this thing is unused still, right?

145
00:06:32.827 --> 00:06:37.420
We haven't made it, we haven't changed it
from an iterator into something that can

146
00:06:37.420 --> 00:06:39.434
actually use the iterator, right?

147
00:06:39.434 --> 00:06:42.033
So let's go like this.

148
00:06:42.033 --> 00:06:46.915
Count, tell me that's not pretty great,
right?

149
00:06:46.915 --> 00:06:48.117
We just simply need to count the items.

150
00:06:48.117 --> 00:06:49.872
We don't need any of the memory, right?

151
00:06:49.872 --> 00:06:52.599
We don't need to know.
We just need to know that hey, were these

152
00:06:52.599 --> 00:06:57.275
ant characters where they pound signs
how many nth characters for pound signs.

153
00:06:57.275 --> 00:07:01.382
And so there's like a really kind
of clever way to get around this.

154
00:07:01.382 --> 00:07:04.686
And so let's do a little print LN and
do one of these.

155
00:07:04.686 --> 00:07:08.106
Go all the way down here and do that.

156
00:07:08.106 --> 00:07:10.086
And for fun, let's cargo run this bad boy.

157
00:07:10.086 --> 00:07:12.031
P3 we hit a seven.

158
00:07:12.031 --> 00:07:14.166
So that's exactly what
we were looking for.

159
00:07:14.166 --> 00:07:18.752
My goodness,
it worked first try, feels good.

160
00:07:18.752 --> 00:07:23.007
But I think this probably leads to at
least one or two questions because this is

161
00:07:23.007 --> 00:07:27.658
very functional, this is very different
probably If you're used to the TypeScript

162
00:07:27.658 --> 00:07:31.737
world because this certainly does not
just exist in regular TypeScript.

163
00:07:31.737 --> 00:07:36.293
It's just a count doesn't this whole
notion of an iterator needing to

164
00:07:36.293 --> 00:07:38.388
convert into a concrete value.

165
00:07:38.388 --> 00:07:40.897
I do see some of my functional
friends there in chat.

166
00:07:40.897 --> 00:07:42.381
I believe they can
correct me if I'm wrong.

167
00:07:42.381 --> 00:07:44.695
This is called a cat amorphic operation,

168
00:07:44.695 --> 00:07:48.277
converting from this kind of
iterator type into a single value.

169
00:07:48.277 --> 00:07:51.961
I believe I might be correct on that,
but I'm not I don't wear a tie dye

170
00:07:51.961 --> 00:07:55.100
T-shirts and I'm not ready for
the functional world yet.

