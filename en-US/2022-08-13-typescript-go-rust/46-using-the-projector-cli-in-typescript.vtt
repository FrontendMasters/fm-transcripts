WEBVTT

1
00:00:00.000 --> 00:00:02.974
So let's keep on going with
the delicious presentation right now,

2
00:00:02.974 --> 00:00:05.283
which is we're gonna tie
everything all together.

3
00:00:05.283 --> 00:00:08.828
We've created the get,
the set, the remove, and

4
00:00:08.828 --> 00:00:11.311
the get all in all three languages.

5
00:00:11.311 --> 00:00:12.622
We have our main file.

6
00:00:12.622 --> 00:00:15.164
Now, all we need to do
is just one at a time,

7
00:00:15.164 --> 00:00:17.940
do that simple tying of
everything together.

8
00:00:17.940 --> 00:00:19.024
So let's do that.

9
00:00:19.024 --> 00:00:21.772
It should be pretty easy,
we'll start off with TypeScript.

10
00:00:21.772 --> 00:00:23.590
And we're gonna go to our index.html.

11
00:00:23.590 --> 00:00:27.000
So right now, all we do in this
file is just get the options.

12
00:00:27.000 --> 00:00:29.019
So let's fix that, right?

13
00:00:29.019 --> 00:00:35.043
Let's go const-opts =,
get those delicious options, right?

14
00:00:35.043 --> 00:00:41.253
Config, of course, is getConfig,
I believe is what it's called.

15
00:00:41.253 --> 00:00:44.402
getConfig, yeah, it is,
it's definitely called that.

16
00:00:44.402 --> 00:00:48.035
Awesome, and
we're also gonna need the projector.

17
00:00:48.035 --> 00:00:51.932
And we're also from the config
gonna want Operation,

18
00:00:51.932 --> 00:00:57.109
I'm just kinda filling in things
ahead of time, projector, awesome.

19
00:00:57.109 --> 00:01:00.449
So we kinda have all the things we
need right now, we got the config, but

20
00:01:00.449 --> 00:01:03.528
the config, of course,
takes in the options, we now have that.

21
00:01:03.528 --> 00:01:07.773
Everything's only been unit tested, so
we actually haven't ran this program yet.

22
00:01:07.773 --> 00:01:12.221
So will we successfully do this?

23
00:01:12.221 --> 00:01:15.519
This is real first try territory here.

24
00:01:15.519 --> 00:01:17.617
All right, so of course,
what is our config?

25
00:01:17.617 --> 00:01:18.901
Capital C Config.

26
00:01:18.901 --> 00:01:25.170
So let's create a projector const
proj = Projector.fromConfig.

27
00:01:25.170 --> 00:01:27.760
So now we're actually using
the thing we didn't test,

28
00:01:27.760 --> 00:01:29.255
which is reading it from a file.

29
00:01:29.255 --> 00:01:32.010
And so let's pass in our config,
beautiful.

30
00:01:32.010 --> 00:01:34.435
And now, we have a type projector,
awesome.

31
00:01:34.435 --> 00:01:38.142
So now we can do the operation on it,
I'm not gonna get too clever for

32
00:01:38.142 --> 00:01:41.474
this operation,
we only have three operations available.

33
00:01:41.474 --> 00:01:43.638
So we can either use a switch or
if statements,

34
00:01:43.638 --> 00:01:45.815
I don't think we need to
get much beyond that.

35
00:01:45.815 --> 00:01:49.219
So let's of course just go like this,
if(config).

36
00:01:49.219 --> 00:01:54.473
Hopefully, by the way, have you guys
spotted where Rust is gonna blow up yet?

37
00:01:54.473 --> 00:01:58.055
Is your Rust power starting to get better?

38
00:02:01.259 --> 00:02:04.561
The Rust power, the power of Rust.

39
00:02:04.561 --> 00:02:08.412
It's kind of like the power of friendship,
just less awesome.

40
00:02:08.412 --> 00:02:14.086
All right, here we go,
Operation, let's go Print.

41
00:02:14.086 --> 00:02:15.146
There we go, all right?.

42
00:02:15.146 --> 00:02:19.435
So let's see, if we have a print operation
there's two modes we have to do,

43
00:02:19.435 --> 00:02:22.798
are there arguments or
they're not arguments, correct?

44
00:02:22.798 --> 00:02:26.413
If there's arguments, we do get value,
if there isn't arguments,

45
00:02:26.413 --> 00:02:27.465
we do get value all.

46
00:02:27.465 --> 00:02:33.329
So let's go like this, config.args = 0.

47
00:02:33.329 --> 00:02:36.332
That's a seven,
that's definitely not the number we want.

48
00:02:36.332 --> 00:02:42.000
So if it equals 0,
we can do something simple and

49
00:02:42.000 --> 00:02:49.165
go console.log(JSON.stringify
proj.getValueAll.

50
00:02:49.165 --> 00:02:51.997
My goodness,
got all the correct amount of parentheses.

51
00:02:51.997 --> 00:02:56.053
Else, I really hate if-elses by the way,

52
00:02:56.053 --> 00:03:00.569
else we have to log out if
there is a value found.

53
00:03:00.569 --> 00:03:05.525
So of course, value =proj.getValue,
pass in the key,

54
00:03:05.525 --> 00:03:09.786
which is gonna of course
be config.args[0].

55
00:03:09.786 --> 00:03:15.733
if(value), cuz remember,
value could be a string or undefined.

56
00:03:15.733 --> 00:03:19.061
I don't know I didn't say or
undefined there, fantastic.

57
00:03:19.061 --> 00:03:23.277
So it could be undefined,
let's make sure that it's not undefined,

58
00:03:23.277 --> 00:03:25.282
and go console.log(value).

59
00:03:25.282 --> 00:03:29.465
Perfect, so we've done the official
first operation, print.

60
00:03:29.465 --> 00:03:32.540
Let's do the next operation,

61
00:03:32.540 --> 00:03:37.632
(config.operation === Operation.Add).

62
00:03:37.632 --> 00:03:39.852
Move out into the middle, so
what do we have to do here?

63
00:03:39.852 --> 00:03:43.055
We have to call that simple method,
projector.setValue.

64
00:03:43.055 --> 00:03:46.089
And then afterwards, we need to
save up the file, we haven't yet

65
00:03:46.089 --> 00:03:47.425
written the save function.

66
00:03:47.425 --> 00:03:49.738
That should be pretty easy to
do in all three languages.

67
00:03:49.738 --> 00:03:54.320
So let's first start off
with setting the value.

68
00:03:54.320 --> 00:03:59.356
So we're gonna go, proj.setValue,
and then we're gonna

69
00:03:59.356 --> 00:04:04.204
go config.args[0], config.args[1], right?

70
00:04:04.204 --> 00:04:08.444
Beautiful, we've now set the value, so
now I ideally like to just call like this,

71
00:04:08.444 --> 00:04:09.362
projector save.

72
00:04:09.362 --> 00:04:10.966
So we'll write that here in a moment.

73
00:04:10.966 --> 00:04:15.555
For now, let's move on to remove,
yank all that.

74
00:04:15.555 --> 00:04:18.089
Actually I'm gonna undo that,
cuz I should have yarped it.

75
00:04:18.089 --> 00:04:21.350
We all know you should have yarped it,
it was a beautiful time to do it.

76
00:04:21.350 --> 00:04:26.369
The only thing we need to do
different now is to go removeValue,

77
00:04:26.369 --> 00:04:29.509
remove, and of course, remove that.

78
00:04:29.509 --> 00:04:33.570
There we go, we have it done,
we now have all three operations done.

79
00:04:33.570 --> 00:04:35.566
So what's the last thing we need to do?

80
00:04:35.566 --> 00:04:36.789
Write the save function.

81
00:04:36.789 --> 00:04:39.862
I feel like the save function
is gonna to be pretty darn easy.

82
00:04:39.862 --> 00:04:43.508
So let's jump down here and create Save.

83
00:04:43.508 --> 00:04:45.377
All right, so let's discuss this.

84
00:04:45.377 --> 00:04:48.342
We need to be able to take your config and
save it.

85
00:04:48.342 --> 00:04:50.657
But there's multiple
problems that can happen.

86
00:04:50.657 --> 00:04:54.441
Now, if you remember in the beginning
when we were doing this yesterday,

87
00:04:54.441 --> 00:04:56.707
we did use or
at least I used the SDG pathing.

88
00:04:56.707 --> 00:05:01.644
Which means that I need to do a folder
projector and then a JSON projector,

89
00:05:01.644 --> 00:05:05.322
which means that the folder
that it is in may not exist.

90
00:05:05.322 --> 00:05:06.410
So we need to create.

91
00:05:06.410 --> 00:05:08.441
And I could give you just a random path,

92
00:05:08.441 --> 00:05:11.900
which means it's gonna need to
create a lot of paths potentially.

93
00:05:11.900 --> 00:05:14.198
So we can't just simply
try to read the file,

94
00:05:14.198 --> 00:05:17.830
we're going to have to create all
the way there, plus create the file.

95
00:05:17.830 --> 00:05:21.069
So couple things there,
should be pretty straightforward.

96
00:05:21.069 --> 00:05:24.994
So first, we're gonna go like this.

97
00:05:24.994 --> 00:05:27.976
We're gonna get the path, or
we shouldn't call it a path,

98
00:05:27.976 --> 00:05:30.076
because there's a library called path.

99
00:05:30.076 --> 00:05:33.127
We'll call it configPath = path,

100
00:05:33.127 --> 00:05:37.713
which is the one we want to use,
right, dot dirname.

101
00:05:37.713 --> 00:05:40.281
So this is the directory name of our file.

102
00:05:40.281 --> 00:05:46.650
And we're gonna go like this, we're gonna
go dirname(this.config.config, right?

103
00:05:46.650 --> 00:05:50.288
I love when it's config.config,
nothing is better than that.

104
00:05:50.288 --> 00:05:50.829
So there we go.

105
00:05:50.829 --> 00:05:55.078
We have everything but
the actual projector.JSON here.

106
00:05:55.078 --> 00:05:58.744
And we're gonna go like this,

107
00:05:58.744 --> 00:06:02.976
if fs existsSync(configPath).

108
00:06:02.976 --> 00:06:07.002
Or if it doesn't exist synchronously,
then we need to create it.

109
00:06:07.002 --> 00:06:09.932
Luckily, fs comes with mkdirSync, and

110
00:06:09.932 --> 00:06:14.683
then it has an extra option,
you can actually see it right there.

111
00:06:14.683 --> 00:06:18.548
Recursive equals true, so
it will actually do a mkdir-p.

112
00:06:18.548 --> 00:06:20.499
That's what that option is, so fantastic.

113
00:06:20.499 --> 00:06:23.283
We can just use this,

114
00:06:23.283 --> 00:06:28.707
we can go configPath and recurse: true.

115
00:06:28.707 --> 00:06:31.504
There we go, we've created it
all the way to that point.

116
00:06:31.504 --> 00:06:35.620
And so now, we should probably also
do the other way, which is if,

117
00:06:35.620 --> 00:06:38.648
we don't have to check to
see if the file exists.

118
00:06:38.648 --> 00:06:40.295
We can overwrite the file,

119
00:06:40.295 --> 00:06:44.885
cuz our new contents is a modified form
of our previous contents, correct?

120
00:06:44.885 --> 00:06:49.757
So now, all we have to do
is go fs.writeFileSync and

121
00:06:49.757 --> 00:06:53.193
just do this.config.config, and

122
00:06:53.193 --> 00:06:58.311
of course JSON.stringify (this.data),
right?

123
00:07:01.852 --> 00:07:04.717
And so if we wanted,
we could also pretty write it.

124
00:07:04.717 --> 00:07:07.214
But in my opinion,
you don't really need the pretty right it,

125
00:07:07.214 --> 00:07:09.255
cuz you have something like
JQ on the command line.

126
00:07:09.255 --> 00:07:13.830
So you can just simply grab out your file,
pass this to JQ, right?

127
00:07:13.830 --> 00:07:16.687
That's good enough, you don't need
to actually have it pretty printed.

128
00:07:16.687 --> 00:07:19.185
And it's also weird if you're
editing things by hand.

129
00:07:19.185 --> 00:07:21.116
Got to ask yourself,
why am I doing such things?

130
00:07:21.116 --> 00:07:21.672
There we go.

131
00:07:21.672 --> 00:07:25.345
So now I'm gonna go back here,
everything is working, it is looking good.

132
00:07:25.345 --> 00:07:29.765
We have finished up our application,
let's give it a shot,

133
00:07:29.765 --> 00:07:32.549
let's do a little projecting?

134
00:07:32.549 --> 00:07:35.580
All right, are you guys a little nervous?

135
00:07:35.580 --> 00:07:37.417
I'm a little [INAUDIBLE].

136
00:07:37.417 --> 00:07:38.713
Let's find out what happens here.

137
00:07:38.713 --> 00:07:44.911
So let's run index.ts and let's start off
by just simply doing an empty projector.

138
00:07:44.911 --> 00:07:49.134
It should return us some squirrely braces,
and what happens here,

139
00:07:49.134 --> 00:07:51.442
we actually completely destroyed.

140
00:07:51.442 --> 00:07:53.806
But my guess is it's because
we did something silly.

141
00:07:53.806 --> 00:07:57.967
We forgot to do,
my guess is it's yarn add,

142
00:07:57.967 --> 00:08:04.388
I don't even really read the error,
types/command-line args.

143
00:08:08.082 --> 00:08:10.718
Okay, we have some sort
of TypeScript error here.

144
00:08:10.718 --> 00:08:14.716
This module is declared using export
equal and can only, let's see,

145
00:08:14.716 --> 00:08:19.351
it can only be used as the default import
when using es Interop flag, fantastic.

146
00:08:19.351 --> 00:08:23.063
Okay, so we have this problem,
we're doing a default import,

147
00:08:23.063 --> 00:08:24.936
we don't have es Interop flag.

148
00:08:24.936 --> 00:08:29.352
We've been doing star for the previous
one, we should probably just keep on doing

149
00:08:29.352 --> 00:08:33.452
star, though it probably at this point
would be a better idea not to do that.

150
00:08:33.452 --> 00:08:37.878
But, well, sometimes you live
with the decisions you've made.

151
00:08:37.878 --> 00:08:40.659
There you go, we see the empty thing.

152
00:08:40.659 --> 00:08:42.858
[SOUND] Did everyone take a deep breath?

153
00:08:42.858 --> 00:08:45.401
We've successfully done it,
my goodness, I'm so excited.

154
00:08:45.401 --> 00:08:47.498
What about foo?

155
00:08:47.498 --> 00:08:49.177
It printed nothing, perfect, right?

156
00:08:49.177 --> 00:08:51.275
Because there is no foo right now.

157
00:08:51.275 --> 00:08:55.058
Let's add foo bar.

158
00:08:55.058 --> 00:08:57.114
It printed nothing, fantastic.

159
00:08:57.114 --> 00:08:59.028
That's kind of what we were hoping to see,

160
00:08:59.028 --> 00:09:01.857
but I did notice something that's
gonna make it hard to check.

161
00:09:01.857 --> 00:09:02.773
Where's that file?

162
00:09:02.773 --> 00:09:10.116
Well, it's technically in
/.config/projector/project.json.

163
00:09:10.116 --> 00:09:11.552
And there it is, right?

164
00:09:11.552 --> 00:09:13.531
This is my previous file.

165
00:09:13.531 --> 00:09:16.513
So we had some issues
probably going on with this.

166
00:09:16.513 --> 00:09:18.351
So hold on, let me erase that.

167
00:09:18.351 --> 00:09:19.570
Let's not use that thing.

168
00:09:19.570 --> 00:09:24.913
Let's pass in a config and just go present

169
00:09:24.913 --> 00:09:29.499
working directory, conf.json.

170
00:09:29.499 --> 00:09:32.944
All right, cat conf.json,
there we go, beautiful.

171
00:09:32.944 --> 00:09:35.301
Look at that,
look at how wonderful that looks.

172
00:09:35.301 --> 00:09:39.510
That's exactly what I was hoping to see,

173
00:09:39.510 --> 00:09:44.333
which means that I should
be able to do a foo now.

174
00:09:44.333 --> 00:09:46.138
We see bar, fantastic.

175
00:09:46.138 --> 00:09:49.318
We should be able to do an empty one and
see it again.

176
00:09:49.318 --> 00:09:55.336
Oopsies, My goodness,

177
00:09:55.336 --> 00:09:58.148
it just feels so good, right?

178
00:09:58.148 --> 00:10:00.564
One last test,
we're gonna do the ultimate test here.

179
00:10:00.564 --> 00:10:04.503
We're gonna take our present
working directory and we're gonna

180
00:10:04.503 --> 00:10:09.309
go present working directory tab,
expand that, present working directory.

181
00:10:09.309 --> 00:10:14.234
And I'm gonna go one back on my directory,
and

182
00:10:14.234 --> 00:10:20.059
I'm going to add the same thing,
add foo baz, right?

183
00:10:20.059 --> 00:10:23.132
So now, what do we get here?

184
00:10:23.132 --> 00:10:26.808
We see foo bar [SOUND].

185
00:10:26.808 --> 00:10:32.414
Remove foo, see it again.

186
00:10:32.414 --> 00:10:36.073
My goodness, it worked, we've done it,
we've built the program, first try,

187
00:10:36.073 --> 00:10:37.040
all the way through.

188
00:10:37.040 --> 00:10:40.104
Look how great unit tests are,
everyone should be happy.

189
00:10:40.104 --> 00:10:41.675
Yeah, thank you, thank you.

190
00:10:41.675 --> 00:10:42.721
[APPLAUSE] My goodness,
I can't believe I'm clapping.

191
00:10:42.721 --> 00:10:44.982
&gt;&gt; [APPLAUSE]
&gt;&gt; Yeah, okay.

192
00:10:44.982 --> 00:10:46.820
[SOUND] All right, we did it.

