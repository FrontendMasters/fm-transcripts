WEBVTT

1
00:00:00.140 --> 00:00:03.540
So let's do the config again.

2
00:00:03.540 --> 00:00:06.084
But this time let's try to do
it a little bit more rusty,

3
00:00:06.084 --> 00:00:07.994
get a little rusty with
it as they call it.

4
00:00:07.994 --> 00:00:11.820
Actually I don't think anyone calls it
that way, I think only I call it that.

5
00:00:11.820 --> 00:00:13.960
So let's create of course the enum.

6
00:00:13.960 --> 00:00:15.811
So first off,
this is where we're starting,

7
00:00:15.811 --> 00:00:17.478
this is where the magic happens, right?

8
00:00:17.478 --> 00:00:21.032
Grab a public enum and
we're gonna call it an operation.

9
00:00:21.032 --> 00:00:27.996
Now before we had Print, Add, Remove,
correct, but hey this is rust, okay?

10
00:00:27.996 --> 00:00:30.710
Let's do something a little
bit more exciting here, okay.

11
00:00:30.710 --> 00:00:34.050
So first off,
let's have an option for a string.

12
00:00:34.050 --> 00:00:36.971
Now right away that should
be pretty awesome, right?

13
00:00:36.971 --> 00:00:41.320
Print may or may not have the string, and
we can handle those cases differently.

14
00:00:41.320 --> 00:00:44.973
We don't have to have an array
that has 0 or 1 items in it,

15
00:00:44.973 --> 00:00:46.851
we have a much more concrete.

16
00:00:46.851 --> 00:00:50.777
Obviously if you just look
at this it's much more

17
00:00:50.777 --> 00:00:54.720
understandable exactly
what's going on here.

18
00:00:54.720 --> 00:00:56.647
Add is gonna be a tuple of String String
that also makes a lot of sense, right?

19
00:00:56.647 --> 00:01:01.050
You can just look at that and go okay it
should only have two values ever whereas

20
00:01:01.050 --> 00:01:04.045
an array does not give you
that kind of information.

21
00:01:04.045 --> 00:01:07.803
And of course a remove, we can just
simply put it as a string like that,

22
00:01:07.803 --> 00:01:10.110
you always have to have a single argument.

23
00:01:10.110 --> 00:01:14.798
So now it already just shows us
right away what our constraints are,

24
00:01:14.798 --> 00:01:18.760
whereas the other one you
didn't feel it nearly as much.

25
00:01:18.760 --> 00:01:23.671
So again singing the praises, praise,
praise, praise, praise, praise, awesome.

26
00:01:23.671 --> 00:01:26.043
So how should we do this?

27
00:01:26.043 --> 00:01:30.714
Well, there's a lot of things we could do
we could do the exact same method we did

28
00:01:30.714 --> 00:01:35.036
before where we have all those methods and
kind of do them one at a time, but

29
00:01:35.036 --> 00:01:37.373
let's do it slightly different here.

30
00:01:37.373 --> 00:01:40.173
The first one I wanna
do is let's do a trait.

31
00:01:40.173 --> 00:01:43.339
So we're gonna like this,

32
00:01:43.339 --> 00:01:48.027
impl from a Vec of string for operation.

33
00:01:48.027 --> 00:01:52.776
But we don't want just a from
cuz there could be errors,

34
00:01:52.776 --> 00:01:56.860
right, we're gonna want a TryFrom.

35
00:01:56.860 --> 00:02:02.400
So this allows us to have an error but
have all the conveniences of from.

36
00:02:02.400 --> 00:02:04.500
So I'm gonna implement its members.

37
00:02:04.500 --> 00:02:06.023
If you have that, fantastic.

38
00:02:06.023 --> 00:02:08.280
If you don't, it is what it is.

39
00:02:08.280 --> 00:02:09.380
I think we have one question.

40
00:02:11.080 --> 00:02:14.880
&gt;&gt; Why not two values and
add string string instead of a tuple?

41
00:02:17.692 --> 00:02:22.503
&gt;&gt; Doing, is he asking this?

42
00:02:22.503 --> 00:02:23.509
We could do that as well.

43
00:02:26.616 --> 00:02:27.747
That's fine with me.

44
00:02:27.747 --> 00:02:30.656
Yeah, I mean, there we go,
we'll just do it.

45
00:02:30.656 --> 00:02:36.020
You know what, had, we'll do that for
you, because I love you, okay?

46
00:02:37.140 --> 00:02:39.420
This is sponsored by me and
my love for you.

47
00:02:39.420 --> 00:02:41.298
All right, let's move forward.

48
00:02:41.298 --> 00:02:43.818
So, what type of error
we're gonna have here?

49
00:02:43.818 --> 00:02:48.114
Remember anyhow,
let's set the anyhow error.

50
00:02:48.114 --> 00:02:51.804
Let's go anyhow:: Error.

51
00:02:51.804 --> 00:02:55.834
There we go, so we've defined
the error type on this, fantastic.

52
00:02:58.472 --> 00:03:00.450
And so now we need to do the try_from.

53
00:03:00.450 --> 00:03:02.920
So remember, when we do try_from,
what do we see right here?

54
00:03:02.920 --> 00:03:06.170
I want you to kind of
think about this mentally.

55
00:03:06.170 --> 00:03:07.592
What's gonna happen to
this vector of string?

56
00:03:12.210 --> 00:03:14.860
Well, when we call a method on this,

57
00:03:14.860 --> 00:03:19.550
that vector of string can
never be used again, correct?

58
00:03:19.550 --> 00:03:20.063
Cuz we're going to consume it.

59
00:03:20.063 --> 00:03:24.584
Notice it's not a reference,
it is the thing itself.

60
00:03:24.584 --> 00:03:28.670
We've been handed the value so we're
doing the rust way of thinking right now.

61
00:03:28.670 --> 00:03:33.480
We are taking something in and
we're gonna create it into something else.

62
00:03:33.480 --> 00:03:36.890
There's a good side of that because that
means we don't have to copy everything out

63
00:03:36.890 --> 00:03:39.910
and create something new we're just
simply kind of shifting around where

64
00:03:39.910 --> 00:03:40.800
everything points.

65
00:03:41.880 --> 00:03:45.290
So always good to kind of keep that
in mind and to think about that.

66
00:03:45.290 --> 00:03:48.330
So much like all of our previous ones,
let's kind of work through it.

67
00:03:48.330 --> 00:03:52.138
So if our value.length is equivalent to 0,
well,

68
00:03:52.138 --> 00:03:55.954
this should be pretty easy
to do right here, right?

69
00:03:55.954 --> 00:03:57.759
We're gonna return an Ok,

70
00:03:57.759 --> 00:04:02.869
remember Ok is the I have a value in my
function that could be an error, right?

71
00:04:02.869 --> 00:04:06.189
So this is that special enum,
the results enum.

72
00:04:06.189 --> 00:04:10.206
And also let's make sure I do that and
make sure we use the anyhow,

73
00:04:10.206 --> 00:04:11.536
I forgot about that.

74
00:04:11.536 --> 00:04:14.336
Always use the anyhow:: Result, fantastic.

75
00:04:14.336 --> 00:04:15.820
Look how beautiful that is.

76
00:04:15.820 --> 00:04:16.559
There we go.

77
00:04:16.559 --> 00:04:21.243
So we have the anyhow::Result,
now we just are returning a result self.

78
00:04:21.243 --> 00:04:24.295
The error property is already an error.

79
00:04:24.295 --> 00:04:26.469
Fantastic, so let's do an Ok.

80
00:04:26.469 --> 00:04:27.781
And what do we need to return here?

81
00:04:27.781 --> 00:04:31.435
Well, let's do an Operation::Print.

82
00:04:31.435 --> 00:04:33.113
And what should Print be?

83
00:04:33.113 --> 00:04:35.057
Well, Print should be a None, right?

84
00:04:35.057 --> 00:04:35.896
There's nothing here.

85
00:04:35.896 --> 00:04:37.764
There's nothing we have to worry about.

86
00:04:37.764 --> 00:04:38.989
Fantastic, right?

87
00:04:38.989 --> 00:04:44.077
For me, I'm in love, right,
I love that, that's fantastic.

88
00:04:44.077 --> 00:04:48.627
And then of course we should also add
the word 0 cuz that was actually really,

89
00:04:48.627 --> 00:04:50.660
really impossible if condition.

90
00:04:50.660 --> 00:04:56.225
So now if we have a term, we need to start
doing something with this term, right?

91
00:04:56.225 --> 00:04:58.334
So let's go like this.

92
00:04:58.334 --> 00:05:03.250
Let's go, if value or
how do we wanna do this?

93
00:05:03.250 --> 00:05:08.450
Let's grab out the value, I think that
probably be the best way to do that.

94
00:05:08.450 --> 00:05:11.249
Let's go v equal or I guess arg,
we can call this term.

95
00:05:11.249 --> 00:05:14.607
Term might be the first one,
right, value.get.

96
00:05:14.607 --> 00:05:19.496
And for the sake of this get(0 ),
we expect this to be here, right?

97
00:05:19.496 --> 00:05:23.345
We've already checked that there's not a
length there, we don't need to do anything

98
00:05:23.345 --> 00:05:26.577
magical, right, we've already
checked the length, it should work.

99
00:05:26.577 --> 00:05:28.666
If this doesn't work,
something horrible is gone wrong.

100
00:05:28.666 --> 00:05:35.228
So expect it to exist, right,
it has to exist, fantastic.

101
00:05:35.228 --> 00:05:39.746
Now, let's go if term= add.

102
00:05:39.746 --> 00:05:44.711
By the way for anyone that comes from
the C++ world, tell me this is not just

103
00:05:44.711 --> 00:05:49.075
super fantastic that you can just
do string comparisons, right?

104
00:05:49.075 --> 00:05:52.730
They're the C world, you can just like,
hey, is this string, this string, right,

105
00:05:52.730 --> 00:05:53.865
it's fantastic.

106
00:05:53.865 --> 00:05:54.455
I just love that.

107
00:05:54.455 --> 00:05:55.789
It always feels so good,

108
00:05:55.789 --> 00:06:00.236
Rust always feels like a really high level
language despite it being much lower than

109
00:06:00.236 --> 00:06:04.698
you realize which also is perhaps that's
where the biggest foot comes comes from.

110
00:06:04.698 --> 00:06:08.865
Is that it's much dumber and
it does exactly what you want it to do.

111
00:06:08.865 --> 00:06:13.460
All right, so if we have a term add,
now we need to do something with it.

112
00:06:13.460 --> 00:06:17.855
We need to take, let's go if term or

113
00:06:17.855 --> 00:06:24.293
if value.length,
I don't know where I got le there.

114
00:06:24.293 --> 00:06:28.680
I wanna get, if length does not equal 3
we have that exact same error, right?

115
00:06:28.680 --> 00:06:31.242
So let's create that exact same error.

116
00:06:31.242 --> 00:06:35.653
So I'm gonna go return error anyhow.

117
00:06:35.653 --> 00:06:39.995
Bang it's gonna say,
hey you don't have that thing in there.

118
00:06:39.995 --> 00:06:43.160
And let's create an error from this.

119
00:06:43.160 --> 00:06:44.449
Can we import it in?

120
00:06:44.449 --> 00:06:51.920
Now let's see it always gets
confused by somethings, right?

121
00:06:51.920 --> 00:06:57.306
Anyhow there's that nice
little macro right there.

122
00:06:57.306 --> 00:07:03.030
And let's go, expected 2 arguments for
[INAUDIBLE] let's go,

123
00:07:03.030 --> 00:07:09.709
operation add expects 2 arguments,
but got percent or this guy, right?

124
00:07:09.709 --> 00:07:16.749
And then we can pass them the length of,
wrong language, a value.length, weird.

125
00:07:16.749 --> 00:07:20.535
I don't know what just happened there.

126
00:07:20.535 --> 00:07:22.370
Length minus 1, right?

127
00:07:22.370 --> 00:07:25.160
So I probably have at
least one parentheses off.

128
00:07:25.160 --> 00:07:26.652
I really wanna reduce these parentheses.

129
00:07:26.652 --> 00:07:31.199
I really hate going off the site,
and it also is hard at this site.

130
00:07:31.199 --> 00:07:32.935
So it looks like this.

131
00:07:32.935 --> 00:07:36.841
Let err=,
paste all that beautiful stuff in.

132
00:07:42.600 --> 00:07:44.794
There we go, and we can go err, right?

133
00:07:44.794 --> 00:07:46.400
Little bit less terrible.

134
00:07:46.400 --> 00:07:49.912
It's gonna keep giving you these errors,
because what's happening is that the rust

135
00:07:49.912 --> 00:07:52.411
analyzer, remember that whole
if thing returning values.

136
00:07:52.411 --> 00:07:55.650
It's, hey, you've got to the end, but
I still haven't seen all my errors yet.

137
00:07:55.650 --> 00:07:57.340
So you're gonna constantly
get this update.

138
00:07:57.340 --> 00:07:59.173
If you have this in VS code,
or if you have it in Vim,

139
00:07:59.173 --> 00:08:02.084
you're gonna constantly be getting these
updates letting you know you haven't

140
00:08:02.084 --> 00:08:04.170
quite successfully written your function.

141
00:08:04.170 --> 00:08:07.720
So try not to be too
distracted by that stuff.

142
00:08:07.720 --> 00:08:11.711
All right, so
now let's do the proper value.

143
00:08:11.711 --> 00:08:13.881
So, if we've gotten this,
we need to return something out of this.

144
00:08:13.881 --> 00:08:16.428
So this is where things are gonna
get a little bit interesting.

145
00:08:16.428 --> 00:08:18.362
One thing I'm gonna do,
is I'm gonna go like this.

146
00:08:18.362 --> 00:08:22.432
Let mut value=value.

147
00:08:22.432 --> 00:08:25.236
I'm gonna make this thing beautiful,
right?

148
00:08:25.236 --> 00:08:30.883
And I'm gonna go let
mut drain=value.drain.

149
00:08:30.883 --> 00:08:33.469
And I'm gonna drain out
two things from this.

150
00:08:33.469 --> 00:08:35.114
That means I don't have to copy them out,

151
00:08:35.114 --> 00:08:37.276
I'm just gonna literally
remove them from the array.

152
00:08:37.276 --> 00:08:39.809
So that's one way I could do that or
I could pop them.

153
00:08:39.809 --> 00:08:42.470
If you pop them you have to do
it in like reverse order or

154
00:08:42.470 --> 00:08:44.137
I can drain them in proper order.

155
00:08:44.137 --> 00:08:47.303
So that's really the whatever
way you wanna do it.

156
00:08:47.303 --> 00:08:50.111
So I'll use drain for one of them and
then we'll use pop for

157
00:08:50.111 --> 00:08:53.223
the other one just so
you can see both of them, and that's that.

158
00:08:53.223 --> 00:08:56.395
All right, so
we have a range from 0 to 2, right?

159
00:08:56.395 --> 00:09:01.870
Sorry, from 1 to 2, correct, right?

160
00:09:01.870 --> 00:09:05.410
Drain is an unusual item to use It can
kind of be a little bit tricky, but

161
00:09:05.410 --> 00:09:09.220
it's also, I don't know,
it's kind of fun at the exact same time.

162
00:09:09.220 --> 00:09:13.690
So, we already know for
a fact that it has to equal size 3, right?

163
00:09:14.710 --> 00:09:18.135
So we already know that position 0 exists,
position 1 exists, and

164
00:09:18.135 --> 00:09:19.870
position 2 exists, right?

165
00:09:19.870 --> 00:09:22.980
So we shouldn't have any worry
about these things working.

166
00:09:22.980 --> 00:09:27.870
So I'm just go like this, return Ok and
I will do a new operation.

167
00:09:27.870 --> 00:09:30.696
We'll do an add right here and
we need to add in these two values.

168
00:09:30.696 --> 00:09:38.269
So I can literally just go drain-next and
then do an expect to exist, right?

169
00:09:38.269 --> 00:09:40.891
We already know what should exist,
there's nothing,

170
00:09:40.891 --> 00:09:42.856
we should not be surprised at this point.

171
00:09:42.856 --> 00:09:44.973
Again I'd be very surprised if we were.

172
00:09:44.973 --> 00:09:49.109
Let's go like that, take that,
do that one more time and there we go.

173
00:09:49.109 --> 00:09:53.601
We have this beautiful little thing.

174
00:09:53.601 --> 00:09:58.046
Remember again, it's telling me, this
if statement isn't returning anything,

175
00:09:58.046 --> 00:09:59.241
something's wrong.

176
00:09:59.241 --> 00:10:03.749
Return, I got to figure out
something to just put down here, so

177
00:10:03.749 --> 00:10:05.288
it stops doing that.

178
00:10:05.288 --> 00:10:07.626
I'm just gonna like this for now.

179
00:10:07.626 --> 00:10:10.280
So that way we just stopped getting
bothered with such nonsense.

180
00:10:10.280 --> 00:10:11.430
There we go, beautiful.

181
00:10:11.430 --> 00:10:15.030
All right, so let's do the exact
same thing but with term remove.

182
00:10:15.030 --> 00:10:22.281
Now remove is a little bit easier because
it only expects a single argument.

183
00:10:22.281 --> 00:10:25.737
So pop is even easier to use right here
too, right, cuz we just simple need to

184
00:10:25.737 --> 00:10:29.693
remove only one argument, we don't need to
pop two things and then flip the ordering.

185
00:10:29.693 --> 00:10:33.855
So a little bit easier to use,
though drain is a fun one to use.

186
00:10:33.855 --> 00:10:37.807
Let's just go like this arg= value.pop,
which of course,

187
00:10:37.807 --> 00:10:42.747
what's the first thing we're popping
are popping from the end of the array,

188
00:10:42.747 --> 00:10:45.869
which means we're popping
out the term we want.

189
00:10:45.869 --> 00:10:49.920
So we're gonna pop it and we're gonna
expect it, right, to exist right now.

190
00:10:49.920 --> 00:10:53.325
We already know what it should exist,
everything about this should exist.

191
00:10:53.325 --> 00:10:56.882
We are safe to do these things, we're not
worried about anything going wrong here.

192
00:11:01.759 --> 00:11:03.870
And let's just go like this arg,
fantastic.

193
00:11:03.870 --> 00:11:08.583
Now something we could also
do is we could do some math.

194
00:11:08.583 --> 00:11:12.232
We could do this a bit more clever
to really take advantage of some of

195
00:11:12.232 --> 00:11:15.359
the options, but
I think ultimately this is just a nice,

196
00:11:15.359 --> 00:11:19.789
very straightforward way you kind of see
exactly what the intent of the code is and

197
00:11:19.789 --> 00:11:22.094
you're not gonna run into any problems.

198
00:11:22.094 --> 00:11:25.789
All right, so our last one of course,
which is if value dot.

199
00:11:25.789 --> 00:11:30.070
Well, actually at this point, we already
know we're probably pretty good, right?

200
00:11:30.070 --> 00:11:31.741
Except for one thing,
we don't know if the length is too long.

201
00:11:31.741 --> 00:11:37.436
So if value.length is greater than 1.

202
00:11:37.436 --> 00:11:42.912
Well, this is our real only possible
problem here, right, it's this thing.

203
00:11:42.912 --> 00:11:46.770
So I'm gonna copy these two,
I wanna paste them down here.

204
00:11:46.770 --> 00:11:49.460
I'm gonna go to the Remove,
turn it into Print.

205
00:11:49.460 --> 00:11:52.932
This is a beautiful and go Some,
remember because it's an option.

206
00:11:52.932 --> 00:11:55.033
So we're gonna return out of that thing.

207
00:11:55.033 --> 00:12:02.031
If it's greater than one, well,
we only expect one term into Print.

208
00:12:02.031 --> 00:12:07.765
So let's just do that no,
operation print expects 0 or

209
00:12:07.765 --> 00:12:11.350
1 arguments, but got that.

210
00:12:11.350 --> 00:12:12.578
And let's remove that thing.

211
00:12:12.578 --> 00:12:14.020
There we go, perfect.

212
00:12:14.020 --> 00:12:16.308
This is identical code to
the previous one except for

213
00:12:16.308 --> 00:12:19.940
now we're taking advantage of some of
Rust's interesting things, traits.

214
00:12:19.940 --> 00:12:23.205
So now we can take a vector of strings,

215
00:12:23.205 --> 00:12:27.091
call into and
transform it into a operation.

216
00:12:27.091 --> 00:12:32.771
I like this a lot, I think this is a great
way to go about it, I like using into's,

217
00:12:32.771 --> 00:12:37.559
I like this whole from trait thing,
it just feels really fun to use.

218
00:12:37.559 --> 00:12:38.680
And so there we go.

