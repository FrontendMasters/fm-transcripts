WEBVTT

1
00:00:00.440 --> 00:00:02.866
So, let's create a nice test and
do projector.ts.

2
00:00:02.866 --> 00:00:03.895
We're almost there.

3
00:00:03.895 --> 00:00:05.905
I know we're writing a lot of code.

4
00:00:05.905 --> 00:00:08.252
I feel like we're kinda crushing that out.

5
00:00:08.252 --> 00:00:12.786
Hopefully this feels good, I like nothing
like a good code crashing time, right?

6
00:00:12.786 --> 00:00:14.515
My goodness, it's just the greatest.

7
00:00:14.515 --> 00:00:17.656
Hopefully all my ranting about
not googling everything and

8
00:00:17.656 --> 00:00:20.686
memorizing everything is
really showing here, right?

9
00:00:20.686 --> 00:00:24.586
The more you just remember to do,
the faster you get to move and

10
00:00:24.586 --> 00:00:26.617
the less flow you have to break.

11
00:00:26.617 --> 00:00:31.013
I feel like that's just what makes it,
or at least what gives me a lot of speed

12
00:00:31.013 --> 00:00:35.224
advantage, is just simply I don't
ever Google a lot of the basic stuff.

13
00:00:35.224 --> 00:00:38.933
Cuz I took the time once,
memorized a bunch of stuff,

14
00:00:38.933 --> 00:00:41.659
and now you can just kinda flow with it.

15
00:00:41.659 --> 00:00:45.618
And your LSP kind of can help fill in
the gaps in the little places where

16
00:00:45.618 --> 00:00:49.589
you're like, is it strings or
is it string, is it this or is it this?

17
00:00:49.589 --> 00:00:52.244
And it just kinda does the rest for you.

18
00:00:52.244 --> 00:00:55.698
Anyways, enough of that nonsense,
so let's do the testing,

19
00:00:55.698 --> 00:00:59.034
testing of course is gonna be
pretty easy on this one I think.

20
00:00:59.034 --> 00:01:03.716
We'll import projector from, if you wanna
guess, or form from projector, awesome.

21
00:01:03.716 --> 00:01:08.212
And so now we're just gonna create
a series of tests that do this for us.

22
00:01:08.212 --> 00:01:12.584
I am gonna do a little bit of
abstraction because one thing I don't

23
00:01:12.584 --> 00:01:17.051
wanna have to do is create the same
data object over and over again.

24
00:01:17.051 --> 00:01:19.733
So let's just do function createData, and

25
00:01:19.733 --> 00:01:22.782
this thing is just simply
gonna return a padding.

26
00:01:22.782 --> 00:01:26.760
So we'll do slash, and
this will have foo and bar1, awesome.

27
00:01:26.760 --> 00:01:31.247
And we're gonna highlight this over here,

28
00:01:31.247 --> 00:01:34.771
add that, paste it in, over foo.

29
00:01:34.771 --> 00:01:37.639
I think this is gonna break but,
yeah, it's definitely gonna break but

30
00:01:37.639 --> 00:01:39.110
it's kinda fun to see what happens.

31
00:01:40.370 --> 00:01:41.250
Now, let's just see what happens.

32
00:01:42.330 --> 00:01:43.260
Okay, nothing happened.

33
00:01:44.360 --> 00:01:46.130
Nothing happened.
Okay, whatever, it doesn't matter.

34
00:01:46.130 --> 00:01:48.890
I was gonna try to macro this output but
then I realized you can't really do that.

35
00:01:48.890 --> 00:01:52.968
Let's also get rid of these leading
slashes and just have three directories,

36
00:01:52.968 --> 00:01:53.658
there we go.

37
00:01:53.658 --> 00:01:55.390
We have /foo and foo bar.

38
00:01:55.390 --> 00:01:59.731
They each have one key and
then we're gonna have one more.

39
00:01:59.731 --> 00:02:00.650
We'll have fem : is_great.

40
00:02:00.650 --> 00:02:04.540
[LAUGH] Frontend Masters is great, look
at that, it's right there on the roofs.

41
00:02:04.540 --> 00:02:07.162
Awesome, so
we should be able to see these values, and

42
00:02:07.162 --> 00:02:10.824
we should be able to test that we can
not only grab values from our directory.

43
00:02:10.824 --> 00:02:13.233
We can also grab values
a few directories behind us,

44
00:02:13.233 --> 00:02:15.210
kind of set up all the possibilities.

45
00:02:15.210 --> 00:02:18.728
I shouldn't be able to delete
them if I'm in directory foo bar.

46
00:02:18.728 --> 00:02:21.263
I should be able to set the value,
fem, in foo bar but

47
00:02:21.263 --> 00:02:22.945
not overwrite it in root, right?

48
00:02:22.945 --> 00:02:28.315
We should be able to have all these
nice tests kinda pretty easy to do here.

49
00:02:28.315 --> 00:02:32.396
And of course, we should be able to
have a function getProjector which

50
00:02:32.396 --> 00:02:36.615
simply should be returning,
based on your present working directory,

51
00:02:36.615 --> 00:02:40.220
which is a string,
should return out a projector, right?

52
00:02:40.220 --> 00:02:42.970
So we'll just have that right away,
should be pretty easy.

53
00:02:42.970 --> 00:02:47.239
New Projector, it's gonna take in
a config, and it's gonna take in,

54
00:02:47.239 --> 00:02:48.461
of course, a data.

55
00:02:48.461 --> 00:02:50.091
So I can go getData, awesome,

56
00:02:50.091 --> 00:02:53.428
we'll just use that same generic
data that we've been using.

57
00:02:53.428 --> 00:02:57.300
And so the config, of course,
is gonna have args, right?

58
00:02:57.300 --> 00:02:58.730
So what is the args?

59
00:02:58.730 --> 00:03:01.559
Well, it's not gonna matter to us
because the args are how we're

60
00:03:01.559 --> 00:03:03.440
going to operate on the projector.

61
00:03:03.440 --> 00:03:05.540
So we don't actually need anything for
the args.

62
00:03:05.540 --> 00:03:10.654
The operation, we don't need anything for
the operation, right?

63
00:03:10.654 --> 00:03:16.244
The only thing that's really mattering is
the present working directory right now.

64
00:03:16.244 --> 00:03:20.564
If we actually somehow use the config,
that would be bad.

65
00:03:20.564 --> 00:03:22.245
So the config, of course,

66
00:03:22.245 --> 00:03:26.272
we can also do hello Frontend Masters
with the e not capitalized.

67
00:03:26.272 --> 00:03:28.239
They specifically told
me they don't do that.

68
00:03:28.239 --> 00:03:30.085
There we go, it's not two words.

69
00:03:30.085 --> 00:03:34.499
Awesome, so now we have everything we need
to do, apparently getData, createData.

70
00:03:34.499 --> 00:03:39.847
I mean, it's technically more correct,

71
00:03:39.847 --> 00:03:42.823
but we'll do getData.

72
00:03:44.594 --> 00:03:50.780
All right, fantastic argument of this.

73
00:03:50.780 --> 00:03:52.410
Is not, yeah, of course not.

74
00:03:52.410 --> 00:03:53.010
It's really not.

75
00:03:53.010 --> 00:03:56.290
We forgot to do the top
level key of projector.

76
00:03:56.290 --> 00:03:58.635
So let's just make sure we do that now.

77
00:04:01.314 --> 00:04:03.720
Awesome, so now we have the top level key.

78
00:04:03.720 --> 00:04:06.120
We forgot to do that cuz it's
not a data object, right?

79
00:04:06.120 --> 00:04:11.208
That thing was quacking like a duck,
but it wasn't locked in like one.

80
00:04:11.208 --> 00:04:12.901
Classic draft problem right there.

81
00:04:12.901 --> 00:04:15.696
So let's start doing
some testing right now.

82
00:04:15.696 --> 00:04:17.074
Should be pretty easy.

83
00:04:17.074 --> 00:04:22.126
We'll start with the getValueAll function,
yeah, that seems right.

84
00:04:22.126 --> 00:04:24.840
And let's do a quick function,
do one of these.

85
00:04:24.840 --> 00:04:28.008
And now we just need to create
the projector, add a specific path, and

86
00:04:28.008 --> 00:04:31.640
try to get all the values and make sure
it gets the values we would expect.

87
00:04:31.640 --> 00:04:34.358
So of course const proj = getProjector,
and

88
00:04:34.358 --> 00:04:39.522
I just want the present working directory
of, let's do all the way in, /foo/bar.

89
00:04:39.522 --> 00:04:43.868
Cuz we know for
a fact /foo/bar should give us bar3, and

90
00:04:43.868 --> 00:04:47.821
it should also give us, fem: is_great.

91
00:04:47.821 --> 00:04:50.932
So let's go,
expect(proj.getValueAll()).toEqual,

92
00:04:50.932 --> 00:04:52.030
is there a deepEqual?

93
00:04:52.030 --> 00:04:54.371
I think this this works, right?

94
00:04:54.371 --> 00:04:58.199
No longer needs that
whole deepEqual thing.

95
00:04:58.199 --> 00:05:02.535
We should have fem which is_great and
we should also have foo and

96
00:05:02.535 --> 00:05:05.276
should be bar3, if I'm not mistaken.

97
00:05:05.276 --> 00:05:08.538
Yeah, I would say it's gonna be bar3,
it's the third one.

98
00:05:08.538 --> 00:05:11.582
So if this works,
everything should be great.

99
00:05:11.582 --> 00:05:15.672
Let's just run this test right
now to make sure everything

100
00:05:15.672 --> 00:05:20.110
operates how we expect it to,
we don't have any bugs.

101
00:05:20.110 --> 00:05:21.910
Awesome, we've done it.

102
00:05:21.910 --> 00:05:25.000
It turns out I have first tried this,
we're gonna keep on going.

103
00:05:25.000 --> 00:05:28.384
We're gonna keep first trying
this all the way through the sky,

104
00:05:28.384 --> 00:05:29.833
it's gonna be fantastic.

105
00:05:29.833 --> 00:05:33.140
All right, so
I'm gonna just copy that whole getValue.

106
00:05:33.140 --> 00:05:35.580
Let's do the exact same thing right here.

107
00:05:35.580 --> 00:05:36.384
Let's do getValue, but

108
00:05:36.384 --> 00:05:38.310
this time we're gonna have to
do it a little bit different.

109
00:05:38.310 --> 00:05:41.006
Let's go getValue, and
I wanna test out foo,

110
00:05:41.006 --> 00:05:43.716
which should just return to me bar3,
right?

111
00:05:48.769 --> 00:05:50.921
Awesome, so it should do that.

112
00:05:50.921 --> 00:05:56.158
And I'm gonna change this to a let,
which means that, oopsies,

113
00:05:56.158 --> 00:06:03.510
that I should be able to reassign this at
a different path and see bar2, correct?

114
00:06:03.510 --> 00:06:08.800
I should also be able to get fem, and
get this from our root directory, right?

115
00:06:08.800 --> 00:06:12.536
I should be able to kinda move
ourselves around and do this and

116
00:06:12.536 --> 00:06:14.231
get all the correct stuff.

117
00:06:14.231 --> 00:06:17.223
Correct, everyone's kind
of on board with that?

118
00:06:17.223 --> 00:06:21.895
That shows really the power that we're
doing all the operations we want.

119
00:06:21.895 --> 00:06:24.938
I feel like this is a fairly good test for
this.

120
00:06:24.938 --> 00:06:26.883
All right, so let's set a value.

121
00:06:26.883 --> 00:06:30.857
Let's prove that we can set a value
without overriding anything.

122
00:06:30.857 --> 00:06:35.765
So I'm gonna actually upgrade this
little testing method to include data,

123
00:06:35.765 --> 00:06:38.990
and it's just gonna equal getData.

124
00:06:38.990 --> 00:06:41.928
So that way,
I can provide the same data twice and

125
00:06:41.928 --> 00:06:46.671
see that I'm not mutating it in any sort
of way that should not happen, right?

126
00:06:46.671 --> 00:06:49.043
So let's just do data right here,
fantastic.

127
00:06:49.043 --> 00:06:53.246
We are now passing in a data, and
all of our previous ones won't break,

128
00:06:53.246 --> 00:06:55.640
due to the beauty of default arguments.

129
00:06:55.640 --> 00:06:57.650
All right, so let's set a value.

130
00:06:57.650 --> 00:07:00.848
We're gonna grab out
a projector at foo bar.

131
00:07:00.848 --> 00:07:03.042
Let's go proj.setValue.

132
00:07:03.042 --> 00:07:07.624
And let's first override a value,
let's do foo baz, yeah.

133
00:07:07.624 --> 00:07:12.498
Hopefully everyone still is always
okay with foo, bar, and baz.

134
00:07:12.498 --> 00:07:16.649
I like those values,
I just find that they're pleasant to use.

135
00:07:16.649 --> 00:07:21.252
All right, so when I get this,
I should expect to see baz, correct?

136
00:07:21.252 --> 00:07:25.199
I think that's the value we should expect,
fantastic.

137
00:07:25.199 --> 00:07:29.371
So let's just run this one more time,
see how we're doing.

138
00:07:29.371 --> 00:07:32.468
My goodness,
it just keeps on being a first try.

139
00:07:32.468 --> 00:07:34.871
It's the greatest moment of my life.

140
00:07:34.871 --> 00:07:37.613
And so that's better than my wedding
day to be able to do this first try.

141
00:07:37.613 --> 00:07:38.752
So let's see if this happens.

142
00:07:38.752 --> 00:07:42.146
Hopefully, my wife will
never listen to this.

143
00:07:42.146 --> 00:07:44.206
All right, so let's do that,
everything's great.

144
00:07:44.206 --> 00:07:47.163
And now what I should be able to do
is also set one more value, right?

145
00:07:47.163 --> 00:07:52.457
I should be able to set, fem,

146
00:07:52.457 --> 00:07:56.422
is_better_than_great, right?

147
00:07:56.422 --> 00:08:00.974
And that should overwrite it at
this location of /foo/bar, but

148
00:08:00.974 --> 00:08:04.540
shouldn't overwrite it
at the root directory.

149
00:08:04.540 --> 00:08:06.470
And so
we're going to kind of test that out.

150
00:08:06.470 --> 00:08:11.381
So when I add one more data = getData,
so I can hold on to this,

151
00:08:11.381 --> 00:08:15.071
pass in that data,
set this value, awesome.

152
00:08:15.071 --> 00:08:19.086
I should be able to get that value and
have it come right out, right,

153
00:08:19.086 --> 00:08:21.620
is_better_than_great, right?

154
00:08:21.620 --> 00:08:25.412
Prove that even though we have
a value deeper in the tree or

155
00:08:25.412 --> 00:08:28.501
higher up in the tree,
shallower in the tree.

156
00:08:28.501 --> 00:08:30.263
I'm not sure which direction,

157
00:08:30.263 --> 00:08:34.974
depending on how you view what is upstream
and downstream, should exist, awesome.

158
00:08:34.974 --> 00:08:39.259
So I'm just gonna recreate projector,
proj = getProjector.

159
00:08:39.259 --> 00:08:42.709
And we're just gonna use slash,
pass in data, and

160
00:08:42.709 --> 00:08:46.920
I should be able to expect
this value is_great, correct.

161
00:08:46.920 --> 00:08:48.910
We did not overwrite anything.

162
00:08:48.910 --> 00:08:52.028
We've properly kept
the structure of this projector.

163
00:08:55.421 --> 00:08:56.903
Do this one last time.

164
00:08:56.903 --> 00:09:00.360
All right, let's do removeValue, awesome.

165
00:09:00.360 --> 00:09:04.802
So this should do the exact same thing, we
should only remove from our directory and

166
00:09:04.802 --> 00:09:06.270
not directories below us.

167
00:09:06.270 --> 00:09:09.256
And this one can be done
pretty straightforward,

168
00:09:09.256 --> 00:09:11.682
it should be pretty easy to be able to do.

169
00:09:11.682 --> 00:09:14.710
So I'm just gonna go, const proj.

170
00:09:14.710 --> 00:09:20.729
And the first thing I'm gonna do is
go proj.deleteValue, no, it's remove.

171
00:09:20.729 --> 00:09:22.543
It's removedValue,
did I call it removeValue?

172
00:09:22.543 --> 00:09:23.727
I thought I had called it deleteValue.

173
00:09:23.727 --> 00:09:25.171
Anyway, it doesn't really matter.

174
00:09:25.171 --> 00:09:26.450
Let's remove fem.

175
00:09:26.450 --> 00:09:29.148
Now remember,
fem is at the root directory or

176
00:09:29.148 --> 00:09:32.774
at /foo/bar,
this should effectively produce nothing.

177
00:09:32.774 --> 00:09:37.515
I should be able to get the value, and
it should still be is_great, correct?

178
00:09:37.515 --> 00:09:41.047
Cuz we shouldn't be removing
anything at our level.

179
00:09:41.047 --> 00:09:46.263
But we should be able to remove foo and
grab foo, which will now become bar2.

180
00:09:46.263 --> 00:09:51.129
Because we have removed bar3 from
our level, it should fall back.

181
00:09:51.129 --> 00:09:55.173
I believe this will pretty much test most
conditions that can happen inside of our

182
00:09:55.173 --> 00:09:56.560
projector program.

183
00:09:56.560 --> 00:10:00.436
And we've kept the state consistent cuz
there is almost nothing worse than if you

184
00:10:00.436 --> 00:10:03.610
have a bunch of configuration and
state gets messed up.

185
00:10:03.610 --> 00:10:05.900
It can be an emotionally challenging time.

186
00:10:05.900 --> 00:10:09.130
So I feel like it's very good to have
some pretty strong tests around this.

187
00:10:09.130 --> 00:10:10.020
Let's run the test.

188
00:10:11.940 --> 00:10:14.096
My goodness, my gracious, first time.

189
00:10:14.096 --> 00:10:15.793
Are we gonna do back-to-back first times?

190
00:10:15.793 --> 00:10:17.327
Now that's the real question.

191
00:10:17.327 --> 00:10:19.474
Will we get Go correct also?

192
00:10:21.478 --> 00:10:22.263
Jury's out.
We don't know.

193
00:10:22.263 --> 00:10:23.350
Well, let's find out.

