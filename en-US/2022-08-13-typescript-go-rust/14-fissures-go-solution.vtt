WEBVTT

1
00:00:00.070 --> 00:00:01.340
Are you ready to move on to go?

2
00:00:02.380 --> 00:00:03.981
Yeah, awesome.

3
00:00:03.981 --> 00:00:07.178
Let's move on to the go.

4
00:00:07.178 --> 00:00:10.649
So we're gonna do the exact same thing
is that I'm gonna go to my go package.

5
00:00:10.649 --> 00:00:14.463
I'm gonna go in the command folder and
I'm gonna create a p2.

6
00:00:14.463 --> 00:00:19.196
In here I'll do my main.go
package.main just like we are all

7
00:00:19.196 --> 00:00:20.930
kind of used to right?

8
00:00:20.930 --> 00:00:21.630
All right so

9
00:00:21.630 --> 00:00:26.115
let's do the exact same thing I'm going
to hop back to my previous project.

10
00:00:26.115 --> 00:00:28.618
I am going to find my nice input here.

11
00:00:28.618 --> 00:00:29.999
I'm gonna yap that is what that's called.

12
00:00:29.999 --> 00:00:34.902
So in vim if you go Y-A-P it actually
yanks a paragraph of code or contiguous

13
00:00:34.902 --> 00:00:40.100
code and if I do a space it yanks it to
of course my clipboard beautiful luck.

14
00:00:40.100 --> 00:00:42.658
Use tmux paste it in we're looking good.

15
00:00:42.658 --> 00:00:47.571
All right so func getInput exact same
thing right we don't pretty much have to

16
00:00:47.571 --> 00:00:51.368
change anything with go we
don't say function we say funk.

17
00:00:51.368 --> 00:00:56.222
You don't use colons to denote when
the types coming in you just simply say

18
00:00:56.222 --> 00:00:58.501
the type, simple right awesome.

19
00:00:58.501 --> 00:01:00.422
All right, so
let's do the exact same thing.

20
00:01:00.422 --> 00:01:05.783
I'm gonna go type point struct, right.

21
00:01:05.783 --> 00:01:12.175
And then from here we'll do x int,
y int awesome.

22
00:01:12.175 --> 00:01:17.725
Now let's do type Line struct which is
gonna have p1 point up I just added a,

23
00:01:17.725 --> 00:01:23.103
don't do that doesn't like him there
we go we just did it right there right

24
00:01:23.103 --> 00:01:28.612
we just put it all in we're creating
the exact same thing again but with go.

25
00:01:28.612 --> 00:01:30.631
So now let's go funk parsePoint and

26
00:01:30.631 --> 00:01:33.806
we're going to take in a line
that's gonna be a string.

27
00:01:33.806 --> 00:01:35.716
And we're gonna return out a point.

28
00:01:35.716 --> 00:01:38.223
But of course remember we have error, so

29
00:01:38.223 --> 00:01:40.888
in this one do we want
to handle the errors?

30
00:01:40.888 --> 00:01:43.172
Or do we want to just
simply error program?

31
00:01:43.172 --> 00:01:46.898
I'll let you guys decide.

32
00:01:46.898 --> 00:01:47.791
&gt;&gt; Handle.
&gt;&gt; Handle, you guys wanna handle?

33
00:01:47.791 --> 00:01:49.407
Okay, so let's handle our errors.

34
00:01:49.407 --> 00:01:54.288
Now remember, as I told you earlier, when
we handle our errors, lets always return

35
00:01:54.288 --> 00:01:58.434
a pointer to the struct and then return
an error as our second argument.

36
00:01:58.434 --> 00:02:02.504
A beautiful thing about go multiple return
values I remember I was doing an interview

37
00:02:02.504 --> 00:02:06.170
at Facebook a few years back, and I made
such a fool of myself because all I was

38
00:02:06.170 --> 00:02:10.095
doing was go during that period as just
learning the language for the first time.

39
00:02:10.095 --> 00:02:13.599
And the interview was in JavaScript,
and the person was just like, well,

40
00:02:13.599 --> 00:02:16.558
how do you return multiple values
from a function JavaScript?

41
00:02:16.558 --> 00:02:20.671
I was like, you can't, cuz I'm in the go
world where there's literal multiple

42
00:02:20.671 --> 00:02:25.144
values and the person like, yes, you can,
no, you can't, you can return one value,

43
00:02:25.144 --> 00:02:25.830
that's it.

44
00:02:25.830 --> 00:02:30.073
I'm sitting here arguing over semantics,
they were right past each other.

45
00:02:30.073 --> 00:02:34.062
So one problem about doing a lot of
languages is you end up forgetting or

46
00:02:34.062 --> 00:02:37.791
you argue over in you're both
saying the same thing it's funny.

47
00:02:37.791 --> 00:02:39.809
Anyways so let's parse the point.

48
00:02:39.809 --> 00:02:44.182
So we're gonna go like this line or we're
gonna go I always do this parts that's

49
00:02:44.182 --> 00:02:47.528
I don't know why it's always
been kind of a word I've used.

50
00:02:47.528 --> 00:02:52.576
Again strings has friendly operations for
strings and let's do Split passing

51
00:02:52.576 --> 00:02:57.548
the string we want to split on because
remember they don't have those methods

52
00:02:57.548 --> 00:03:02.383
on the strings they have this nice little
library and let's do a what is it?

53
00:03:02.383 --> 00:03:04.111
Yeah, let's do a little comma right here.

54
00:03:04.111 --> 00:03:05.012
Fantastic.

55
00:03:05.012 --> 00:03:10.565
So now we have x and y, so we're gonna go
like this x, err equals string convert

56
00:03:10.565 --> 00:03:16.475
remember, exact same thing this converts
the string Atoi let's pass in parts 0.

57
00:03:16.475 --> 00:03:20.112
Now we need to handle the err so
what I'm going to do is I have my nice

58
00:03:20.112 --> 00:03:23.289
little convenient function
if error does not equal nil,

59
00:03:23.289 --> 00:03:27.020
meaning there's an error here,
then return nothing and the err.

60
00:03:27.020 --> 00:03:30.973
So my since I did this nice little pointer
right here that means I can return nothing

61
00:03:30.973 --> 00:03:33.451
I don't have to create
anything it's fantastic.

62
00:03:33.451 --> 00:03:38.244
Then I'm just going to copy this
entire thing paste it in hit it

63
00:03:38.244 --> 00:03:43.052
with a y increment that number,
again there we go fantastic.

64
00:03:43.052 --> 00:03:46.880
By the way for those that are wondering
how did you just increment that number in

65
00:03:46.880 --> 00:03:50.882
this beautiful program called vim if you
hit CTRL A it actually increments the next

66
00:03:50.882 --> 00:03:54.538
occurring number on your line it's
pretty fantastic I use it all the time.

67
00:03:54.538 --> 00:03:58.004
There we go so now I have x and y they're
both gonna be numbers we've handled

68
00:03:58.004 --> 00:04:00.437
the air conditioning and so
now we can return point.

69
00:04:00.437 --> 00:04:05.929
Remember do not specify them as a list
initializer, use the more explicit form or

70
00:04:05.929 --> 00:04:10.045
else you're gonna be a sad panda
when you screw it all up and so

71
00:04:10.045 --> 00:04:13.792
now we need to return nil for
error, there is no error.

72
00:04:13.792 --> 00:04:18.206
And of course we have to turn our
point into a pointer because that's

73
00:04:18.206 --> 00:04:22.620
the reason why we can return nil up
here is because pointers can be nil

74
00:04:22.620 --> 00:04:24.261
right that makes sense.

75
00:04:24.261 --> 00:04:27.190
And of course you can always
execute a go format and

76
00:04:27.190 --> 00:04:31.373
it puts this thing right here as they
once said that no one is happy with go

77
00:04:31.373 --> 00:04:35.798
formatting which is why everyone's
happy it's the way no one would do it.

78
00:04:35.798 --> 00:04:40.146
And so I don't like that but you should
always use go for matter to do your code.

79
00:04:40.146 --> 00:04:43.204
There you go anyways have this beautiful
piece of code we've parsed the point.

80
00:04:43.204 --> 00:04:44.683
Now let's parse the line.

81
00:04:44.683 --> 00:04:48.349
So I'm gonna like this funk parse line,
I bet you a bit a lot of you can start

82
00:04:48.349 --> 00:04:52.850
writing this without even me doing it
because it's that simple at this point.

83
00:04:52.850 --> 00:04:56.894
We'll do that of course, what are we
returning a pointer to a line and

84
00:04:56.894 --> 00:04:57.816
then an error.

85
00:04:57.816 --> 00:05:01.178
Now, we need to do the exact
same stuff as we did up here, so

86
00:05:01.178 --> 00:05:05.794
we can literally just grab that line bring
it down, paste it in and then do what?

87
00:05:05.794 --> 00:05:09.623
Well, instead of that,
we do a dash, there we go.

88
00:05:09.623 --> 00:05:14.687
We've now parsed out each point so
we now have a right hand in

89
00:05:14.687 --> 00:05:19.854
the left hand and
we're gonna do the exact same thing again,

90
00:05:19.854 --> 00:05:24.732
p1, err parsePoint, parts,
0, what do we do again?

91
00:05:24.732 --> 00:05:31.155
Everyone's favorite thing err does not
equal nil, return nil and the err.

92
00:05:31.155 --> 00:05:33.135
Awesome, I'm gonna highlight it.

93
00:05:33.135 --> 00:05:33.969
I'm gonna paste it.

94
00:05:33.969 --> 00:05:39.642
I'm gonna increment it, and boom,
we have ourselves part twoawesome.

95
00:05:39.642 --> 00:05:45.447
Now I'll return line as a pointer and

96
00:05:45.447 --> 00:05:49.386
p1 as p1 and p2 as p2.

97
00:05:49.386 --> 00:05:54.117
So we have this final problem right
here right which is what just happened

98
00:05:54.117 --> 00:05:58.540
right here well, we specified
the points as pointers, right?

99
00:05:58.540 --> 00:06:01.033
When we returned it, but
our line did not take pointer so

100
00:06:01.033 --> 00:06:03.170
we have a couple ways we could solve this.

101
00:06:03.170 --> 00:06:06.415
But I'd say the easiest way
is just to simply say, hey,

102
00:06:06.415 --> 00:06:09.332
a line consists of two points and
their pointers.

103
00:06:09.332 --> 00:06:13.726
For you it doesn't make any difference,
right, this is not like C++ where you have

104
00:06:13.726 --> 00:06:16.550
to use that caret function
to access members, right?

105
00:06:16.550 --> 00:06:20.388
During just regular programming you don't
really notice the difference between

106
00:06:20.388 --> 00:06:22.020
a pointer and a non pointer.

107
00:06:22.020 --> 00:06:23.847
The reason why pointers
are very important,

108
00:06:23.847 --> 00:06:27.175
I'll go over here after we finish this
problem section, why it's so important.

109
00:06:27.175 --> 00:06:29.825
But for now, this just makes it easy,
right, there we go,

110
00:06:29.825 --> 00:06:31.920
we've solved our problem.

111
00:06:31.920 --> 00:06:37.187
When I hop back down here, you will
see everything is fantastic, awesome.

112
00:06:37.187 --> 00:06:40.435
So now all we need to do is create the
main function do what we did before and

113
00:06:40.435 --> 00:06:41.930
we should be good to go.

114
00:06:41.930 --> 00:06:46.977
So func main, I'm gonna bring this up,
cuz it's annoying to be

115
00:06:46.977 --> 00:06:52.117
at the bottom of the screen and
we will do of course our getInput and

116
00:06:52.117 --> 00:06:56.470
then we'll do strings split
just like we did before.

117
00:06:56.470 --> 00:07:01.447
What we've been doing is that we just
got done converting line from just two

118
00:07:01.447 --> 00:07:05.680
points to references,
two points, pointers to points.

119
00:07:05.680 --> 00:07:09.721
And so now when we return points as
pointers from parsePoint because there's

120
00:07:09.721 --> 00:07:12.468
an error,
it just keeps on flowing through nicely.

121
00:07:12.468 --> 00:07:15.609
If you don't use pointers with errors, you
run to all those weird things where you're

122
00:07:15.609 --> 00:07:17.345
creating these empty structs and
everything.

123
00:07:17.345 --> 00:07:20.677
This makes 100 times more sense, just
a lot more pointers in your lifetime but

124
00:07:20.677 --> 00:07:22.780
what does that practically mean for you?

125
00:07:22.780 --> 00:07:27.654
Virtually nothing, it just means it just
programming doesn't change because go does

126
00:07:27.654 --> 00:07:32.207
not have different ways to access members
if it is a pointer versus a non pointer.

127
00:07:32.207 --> 00:07:34.070
So anyways, so
let's continue on right here.

128
00:07:34.070 --> 00:07:37.677
We're gonna take our input,
we're going to split it on the new line,

129
00:07:37.677 --> 00:07:41.610
now we can have this we can call this
thing parts if we really want to or lines.

130
00:07:43.270 --> 00:07:48.184
But what we can also do, which I think is
probably the nicer way, exactly like this,

131
00:07:48.184 --> 00:07:52.145
for, we don't care about the index for
line in range of this thing.

132
00:07:52.145 --> 00:07:56.070
There we go so same thing we did last
time, but now we just kind of inlined it.

133
00:07:56.070 --> 00:08:01.023
A little bit nicer probably feels a little
bit easier and so now I'm gonna create one

134
00:08:01.023 --> 00:08:05.339
last thing I'm going to call something
lines the reason why I did this for

135
00:08:05.339 --> 00:08:09.399
this exact reason is I'm going to
create an array of line pointers.

136
00:08:10.940 --> 00:08:15.260
Here we go and so in go of course,
raise put the brackets in the beginning,

137
00:08:15.260 --> 00:08:16.529
not at the end, why?

138
00:08:16.529 --> 00:08:19.420
I don't know cries and
difference is just a part of it all.

139
00:08:19.420 --> 00:08:22.886
So there we go and this of course is just
like, hey, I'm an initializer of lines,

140
00:08:22.886 --> 00:08:24.330
but there's nothing there.

141
00:08:24.330 --> 00:08:27.867
So we just created a empty or
empty array, if you will.

142
00:08:27.867 --> 00:08:32.310
So now, I have a line and
now I want to parse out that line.

143
00:08:32.310 --> 00:08:37.332
So I'm running out of the word because
I have lines I have line I'll call

144
00:08:37.332 --> 00:08:42.287
that an L and then call this thing a line,
line err parseline, right?

145
00:08:42.287 --> 00:08:48.290
And passing the L and there we go we now
have the pointer line out and the err.

146
00:08:48.290 --> 00:08:52.020
So if I see that that's a pointer line,
if I look at that, that's an err.

147
00:08:52.020 --> 00:08:54.991
Awesome, I can handle the err but
of course, we're now in the main function.

148
00:08:54.991 --> 00:08:58.450
So we can't use this we
can't just return nil error.

149
00:08:58.450 --> 00:09:01.941
Here I can use something
like log fatal for

150
00:09:01.941 --> 00:09:06.147
now just say, hey,
we couldn't parse the line.

151
00:09:06.147 --> 00:09:09.204
And then even if we wanted to,
we could even include the line as well,

152
00:09:09.204 --> 00:09:12.809
that make it nice and easy, but we'll
just do that because it's not gonna fail.

153
00:09:12.809 --> 00:09:16.360
We cut and paste this code,
it should be all fantastic.

154
00:09:16.360 --> 00:09:19.252
One last thing that's a little bit weird
about go is that if you use the LSP

155
00:09:19.252 --> 00:09:21.790
it actually comes with this
as you can see right there.

156
00:09:21.790 --> 00:09:26.255
Use a pen to bank, if you accept that what
it's going to do is it convert your line

157
00:09:26.255 --> 00:09:28.810
into this lines equals append lines.

158
00:09:28.810 --> 00:09:32.868
And it's kind of one of those weird things
about go, is when you append to a list,

159
00:09:32.868 --> 00:09:35.120
it actually hands you back a new list.

160
00:09:35.120 --> 00:09:37.924
And effectively things can be resized,

161
00:09:37.924 --> 00:09:41.450
things can be moved,
things can be different.

162
00:09:41.450 --> 00:09:43.578
So it's just as this and
this is an easy way for

163
00:09:43.578 --> 00:09:45.599
you to always just have the correct thing.

164
00:09:45.599 --> 00:09:50.024
So if you just append you don't
actually you're not gonna get what you

165
00:09:50.024 --> 00:09:54.220
think you're gonna get and so
I would just stay like this.

166
00:09:54.220 --> 00:09:57.220
There's some reasoning why,
how it's represented memory, all that but

167
00:09:57.220 --> 00:09:58.897
it's really irrelevant at this moment.

168
00:09:58.897 --> 00:10:00.620
And so there we go, we have that.

169
00:10:00.620 --> 00:10:03.152
And now of course,
we use the standard format print again,

170
00:10:03.152 --> 00:10:06.512
someone's angry about the fact that I
have both log and print in the same file.

171
00:10:06.512 --> 00:10:09.855
We're just gonna be okay with this and

172
00:10:09.855 --> 00:10:14.037
we're gonna go printf plus v and
pass in lines.

173
00:10:14.037 --> 00:10:16.189
And now do the whole go run p2 main and

174
00:10:16.189 --> 00:10:19.665
what we should see are these
beautiful beautiful numbers we

175
00:10:19.665 --> 00:10:24.208
have a pointer which is very unfortunate
so you don't get the nice inlining.

176
00:10:24.208 --> 00:10:28.160
If we didn't have that then
we'd have something nice so

177
00:10:28.160 --> 00:10:33.121
let's just jump up here go to
the pointer remove that dereference that

178
00:10:33.121 --> 00:10:36.761
pointer rerun it and
look at how beautiful that is.

179
00:10:36.761 --> 00:10:40.665
But again the points are pointers so
you don't get a very beautiful printing so

180
00:10:40.665 --> 00:10:44.749
that's one downfall of course to using
pointers is that the standard format print

181
00:10:44.749 --> 00:10:45.539
is not as nice.

182
00:10:45.539 --> 00:10:49.247
There is actually a string function that
you can implement that will do all this

183
00:10:49.247 --> 00:10:52.740
for you so long as you implement the
string method and just use a percent V.

184
00:10:52.740 --> 00:10:58.093
I believe it should print it out how you
specify which makes it a little bit nicer.

185
00:10:58.093 --> 00:10:59.712
So there you go we saw that and
go, fantastic.

