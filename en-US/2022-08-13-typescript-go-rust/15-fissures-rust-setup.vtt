WEBVTT

1
00:00:00.150 --> 00:00:02.663
All right, we'll go to rust,
we'll go to projects.

2
00:00:02.663 --> 00:00:04.109
Now, there's a problem here.

3
00:00:04.109 --> 00:00:07.641
This is my old main file,
this is the only entry into our binary.

4
00:00:07.641 --> 00:00:11.473
So to allow multiple entries,
we create a folder called bin and

5
00:00:11.473 --> 00:00:13.872
then we have to move main into that bin.

6
00:00:13.872 --> 00:00:16.653
So I'm gonna move main and
I'm just gonna call p1.rs.

7
00:00:16.653 --> 00:00:19.729
So now when I run it,
instead of doing cargo run,

8
00:00:19.729 --> 00:00:23.290
I'm gonna go bin p1 and
it will run that one, right?

9
00:00:23.290 --> 00:00:27.700
Nice way to be able to have multiple
entries into your program, so src/bin.

10
00:00:28.860 --> 00:00:32.356
So there we go, we're in src/bin,
you can see that right down here,

11
00:00:32.356 --> 00:00:36.290
if you don't know how to see those things
src/bin down here, I have one file.

12
00:00:36.290 --> 00:00:39.430
Let's create a p2.rs.
And we're gonna do the exact same thing.

13
00:00:39.430 --> 00:00:42.571
I'm gonna hop back to my previous project,
and

14
00:00:42.571 --> 00:00:48.010
I'm going to grab this thing,
put it in my clipboard, paste it in.

15
00:00:48.010 --> 00:00:52.892
Function goes to fn, colon goes to dash
over, string goes of course to ampersand,

16
00:00:52.892 --> 00:00:55.628
that, static cuz it lives forever,
do that.

17
00:00:55.628 --> 00:01:00.177
Grave, as we've all learned, goes to here,
go down, and of course grave right here,

18
00:01:00.177 --> 00:01:00.800
does that.

19
00:01:00.800 --> 00:01:01.794
There we go.

20
00:01:01.794 --> 00:01:06.096
We now have this beautiful
piece of getting input and

21
00:01:06.096 --> 00:01:12.180
it's still complaining because we
forgot to rename this as get_input.

22
00:01:12.180 --> 00:01:14.707
It will always complain until
you have a main function, so

23
00:01:14.707 --> 00:01:17.170
don't forget to get
a main function in there.

24
00:01:17.170 --> 00:01:17.910
There we go.

25
00:01:17.910 --> 00:01:20.840
So now let's create our structs, right?

26
00:01:20.840 --> 00:01:24.941
So do the exact same thing,
we're gonna do struct point,

27
00:01:24.941 --> 00:01:27.881
we'll have x as an i32, a y as an i32.

28
00:01:27.881 --> 00:01:35.500
We will have a line as a p1 and a p2.

29
00:01:35.500 --> 00:01:38.506
And that will be a point and
a point, there we go, right.

30
00:01:38.506 --> 00:01:41.141
We've done this a couple times now,
we're pretty much familiar.

31
00:01:41.141 --> 00:01:45.098
You could have copied and pasted the
TypeScript code, removed the equal sign,

32
00:01:45.098 --> 00:01:47.533
and it almost have been
exactly how it should be.

33
00:01:47.533 --> 00:01:49.098
So it's pretty straightforward.

34
00:01:49.098 --> 00:01:52.802
Now, this is where we're gonna do
something that I think is pretty cool.

35
00:01:52.802 --> 00:01:56.429
We're gonna implement a trait, a trait,
remember, is just an interface.

36
00:01:56.429 --> 00:01:59.936
If you implement interfaces,
you can actually interact with a lot of

37
00:01:59.936 --> 00:02:02.969
the standard functions that
are available inside of Rust.

38
00:02:02.969 --> 00:02:07.770
So we're gonna do FromString,
now this is a beautiful, beautiful thing.

39
00:02:07.770 --> 00:02:10.732
So we're wanna go FromString and
we're gonna pass in a point.

40
00:02:10.732 --> 00:02:12.535
Let's see.

41
00:02:12.535 --> 00:02:16.100
Four point, I believe that is.

42
00:02:16.100 --> 00:02:18.830
So there we go.

43
00:02:18.830 --> 00:02:22.420
Now we have this, so it's wanna give us
this error, not everything's implemented,

44
00:02:22.420 --> 00:02:25.350
just like any interface,
you have to implement all the items.

45
00:02:25.350 --> 00:02:31.270
So you can use code actions to give you
the bare bones kind of implementation.

46
00:02:31.270 --> 00:02:33.510
So we were on using our first trait.

47
00:02:33.510 --> 00:02:35.360
This is something we haven't seen yet.

48
00:02:35.360 --> 00:02:36.610
Traits are fantastic.

49
00:02:36.610 --> 00:02:40.292
Like I said, they are just like
interfaces from, say, TypeScript.

50
00:02:40.292 --> 00:02:44.152
If you do an interface foo and
then you allow a class to implement it,

51
00:02:44.152 --> 00:02:46.605
you have to add those methods to it.

52
00:02:46.605 --> 00:02:51.403
It's backwards in Rust in the sense
that you create your struct like I did

53
00:02:51.403 --> 00:02:53.458
right here for, say, point.

54
00:02:53.458 --> 00:02:58.860
And then I say, endpoint also implements
this interface or this trait.

55
00:02:58.860 --> 00:03:02.557
And by implementing this trait,
there's other functions that just

56
00:03:02.557 --> 00:03:05.870
take in trait objects or
they're generic on trait objects and

57
00:03:05.870 --> 00:03:09.199
they're able to do operations
based on these trait methods.

58
00:03:09.199 --> 00:03:11.310
And so that is actually pretty cool.

59
00:03:11.310 --> 00:03:13.420
It allows some pretty
radical stuff to be done.

60
00:03:13.420 --> 00:03:15.090
So let's just get started right here.

61
00:03:15.090 --> 00:03:18.370
So, make sure you do
a cargo install cargo-edit.

62
00:03:18.370 --> 00:03:20.954
This gives you the ability
to do a cargo add and

63
00:03:20.954 --> 00:03:24.180
you can just simply add
libraries to your cargo.toml.

64
00:03:24.180 --> 00:03:28.760
You can hand edit your
package.json in TypeScript.

65
00:03:28.760 --> 00:03:31.494
You can hand edit your cargo.toml in Rust.

66
00:03:31.494 --> 00:03:32.750
Should you do it?

67
00:03:32.750 --> 00:03:35.894
Well, I mean, if something already does
it for you, gets the correct version,

68
00:03:35.894 --> 00:03:37.992
all that,
why would you ever want to do it, correct?

69
00:03:37.992 --> 00:03:40.120
That's at least how I personally feel.

70
00:03:40.120 --> 00:03:44.449
So just install this thing, it might take
a moment and then afterwards you'll be

71
00:03:44.449 --> 00:03:47.710
able to do what I did,
which of course is cargo add anyhow.

72
00:03:47.710 --> 00:03:50.819
Anyhow is the error handler
that we did talk about earlier,

73
00:03:50.819 --> 00:03:53.400
it's pretty darn good at handling errors.

74
00:03:53.400 --> 00:03:57.905
And since we're now starting to get into
the more error prone aspects of Rust,

75
00:03:57.905 --> 00:04:00.180
it's good to have this.

76
00:04:00.180 --> 00:04:04.517
I also made a distinction earlier, this
error, which is another error handling

77
00:04:04.517 --> 00:04:09.264
library, is really great if you're writing
a library that someone else will consume.

78
00:04:09.264 --> 00:04:14.104
Anyhow is if you're writing an application
that you want to execute, anyhow kind of,

79
00:04:14.104 --> 00:04:16.210
it's just a little different.

80
00:04:16.210 --> 00:04:19.493
This error produces you concrete
types of errors in which you can have

81
00:04:19.493 --> 00:04:23.400
certain responses and certain values to
be produced back out, which makes it very

82
00:04:23.400 --> 00:04:26.690
nice for a library, because then
there's an expected error type.

83
00:04:26.690 --> 00:04:30.539
Everything's great, and it's not a this
error, it's like the error you've created.

84
00:04:30.539 --> 00:04:34.362
And so it's just a little bit nicer, of
course, it uses enums, all the fun stuff,

85
00:04:34.362 --> 00:04:36.170
but we're gonna be using anyhow.

86
00:04:36.170 --> 00:04:38.800
I strongly recommend checking out this
error if you're building a library

