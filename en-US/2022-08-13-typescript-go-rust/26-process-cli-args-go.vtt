WEBVTT

1
00:00:00.000 --> 00:00:03.594
Awesome, so we've kind of finished
the old TypeScript side of things, right?

2
00:00:03.594 --> 00:00:05.714
We've already flown right through it.

3
00:00:05.714 --> 00:00:07.324
How do you feel about this?

4
00:00:07.324 --> 00:00:08.091
You guys liked this?

5
00:00:08.091 --> 00:00:09.606
Pretty good, right?

6
00:00:09.606 --> 00:00:11.141
Nothing too bad here.

7
00:00:11.141 --> 00:00:13.409
The Go version is, I'd say.

8
00:00:13.409 --> 00:00:18.143
Less and More boilerplate at the exact
same time, so let's look at that one.

9
00:00:18.143 --> 00:00:19.441
Let's do the do the exact same thing.

10
00:00:19.441 --> 00:00:21.647
Now I'll just navigate to your Go project.

11
00:00:21.647 --> 00:00:23.417
I'm just gonna reuse the same one so

12
00:00:23.417 --> 00:00:26.441
I don't have to do the whole go
mod net here are some long URL.

13
00:00:26.441 --> 00:00:31.040
I'm just going to reuse this one it has
everything I need in it anyways and so

14
00:00:31.040 --> 00:00:33.670
let's delete this, yeah let's delete.

15
00:00:33.670 --> 00:00:39.195
That in fact I can I mean I guess I could
have kept these I'll just keep p2 and

16
00:00:39.195 --> 00:00:42.636
we'll call this one
projector there we go Op.

17
00:00:42.636 --> 00:00:44.886
Projector, awesome.

18
00:00:44.886 --> 00:00:49.095
And then let's create main.go.

19
00:00:49.095 --> 00:00:52.222
So now we have this nice main.go,
you can see right here.

20
00:00:52.222 --> 00:00:56.620
So I have my go project inside my command
because remember that's where all of

21
00:00:56.620 --> 00:01:00.353
your binaries should be inside
a sub folder projector main.go.

22
00:01:00.353 --> 00:01:04.118
Of course you always in the main package
you should specify you are the main

23
00:01:04.118 --> 00:01:06.910
package to identify the compiler
exactly what to do and

24
00:01:06.910 --> 00:01:10.494
of course you should have the main
function available right there, so

25
00:01:10.494 --> 00:01:12.763
there you go,
it knows exactly where to go.

26
00:01:12.763 --> 00:01:16.222
So now, just like the project
structure I showed you earlier,

27
00:01:16.222 --> 00:01:19.941
we're going to jump out of command and
we're going to create a pkg,

28
00:01:19.941 --> 00:01:23.415
the package folder, and
in there let's create a sub package.

29
00:01:23.415 --> 00:01:26.098
Now, we have a bunch of different
options in which we could do this.

30
00:01:26.098 --> 00:01:29.563
We could do this, let's just call this sub
package, let's just call it the config.

31
00:01:29.563 --> 00:01:32.894
I'm gonna do something probably
different than my code is online, but

32
00:01:32.894 --> 00:01:34.234
it's good to mix things up.

33
00:01:34.234 --> 00:01:35.386
Try different stuff.

34
00:01:35.386 --> 00:01:38.365
So let's have a subdirectory
called config.

35
00:01:38.365 --> 00:01:41.632
And in here, let's create an ops doc go.

36
00:01:41.632 --> 00:01:45.160
And of course you give it the package
name of config, right here.

37
00:01:45.160 --> 00:01:49.747
So just to make sure we can kind of test
these things out and you can understand

38
00:01:49.747 --> 00:01:54.063
how these communication works,
let's create a just a simple struct.

39
00:01:54.063 --> 00:01:56.590
I'm just going to literally call struct,
struct.

40
00:01:56.590 --> 00:02:00.717
And let's go back to our main doc go here.

41
00:02:00.717 --> 00:02:04.569
And what I can do is I can go like this,
I can go config.

42
00:02:04.569 --> 00:02:08.554
And you'll notice that this one is
actually the Go Delve package config.

43
00:02:08.554 --> 00:02:09.941
So that's not that good.

44
00:02:09.941 --> 00:02:12.405
And if I go down one,
this is another config and so

45
00:02:12.405 --> 00:02:14.570
there looks to be some
configs out there and

46
00:02:14.570 --> 00:02:18.015
it's not picking up my config which
is a little upsetting, right?

47
00:02:18.015 --> 00:02:24.629
So I should have a config myself and
I should be able to do struct.

48
00:02:24.629 --> 00:02:27.092
Why are you not doing that?

49
00:02:27.092 --> 00:02:28.342
Let's not call it config then.

50
00:02:28.342 --> 00:02:32.700
Maybe there's too many collisions here,
we'll just call projector.

51
00:02:32.700 --> 00:02:36.586
Keep it nice and plus it's just little
honestly it's a little bit nicer there we

52
00:02:36.586 --> 00:02:38.679
go we have this nice beautiful projector.

53
00:02:38.679 --> 00:02:41.373
We have a single struct being XR exported.

54
00:02:45.540 --> 00:02:48.904
And now we have our main file and
we have our package file, right, so,

55
00:02:48.904 --> 00:02:52.497
we main file of course is where we do
all our main execution packages where we

56
00:02:52.497 --> 00:02:53.886
put all of our library code.

57
00:02:53.886 --> 00:02:57.957
All right, awesome, so
now long as everything's working nicely,

58
00:02:57.957 --> 00:03:00.552
which my LSP is still not working nicely,
so

59
00:03:00.552 --> 00:03:04.012
I'm just gonna quit it out for
a second, restart backup.

60
00:03:04.012 --> 00:03:08.114
Give it a moment to breathe
the effervescence we talked about them

61
00:03:08.114 --> 00:03:08.792
earlier.

62
00:03:08.792 --> 00:03:11.299
All right, so
now I should be able to get projector.

63
00:03:11.299 --> 00:03:13.703
There you go, now can find it just fine.

64
00:03:13.703 --> 00:03:15.260
You can see how it's even done, so

65
00:03:15.260 --> 00:03:17.362
remember the go mod a knit
was this right here.

66
00:03:17.362 --> 00:03:20.318
Remember when I did this I called it AOC,
okay, adventive of code.

67
00:03:20.318 --> 00:03:24.089
We have to call it ad vented code,
could have been called projector,

68
00:03:24.089 --> 00:03:28.509
whatever your go mod a knit call all is,
this is it right here, subpage package,

69
00:03:28.509 --> 00:03:30.737
subpage of that projector, all right.

70
00:03:30.737 --> 00:03:33.601
So now I've even given it a name,
projector that was the top line,

71
00:03:33.601 --> 00:03:36.007
package projector and
everything, and when I do this,

72
00:03:36.007 --> 00:03:38.022
you can see there's
a single exported truck.

73
00:03:38.022 --> 00:03:41.887
Just like we told you, and if you go back
here and you have some sort of function

74
00:03:41.887 --> 00:03:45.820
that is lowercase, right, you will not
see this function of course, right?

75
00:03:45.820 --> 00:03:48.386
So when I do this lowercase
just does not exist.

76
00:03:48.386 --> 00:03:50.453
Remember, you always have to capitalize.

77
00:03:50.453 --> 00:03:52.785
Don't forget that, all right?

78
00:03:52.785 --> 00:03:54.507
Pretty easy, pretty straightforward.

79
00:03:54.507 --> 00:03:56.906
So let's start right now and
start doing this.

80
00:03:56.906 --> 00:03:59.620
So we do need that extra
additional library.

81
00:03:59.620 --> 00:04:04.880
So, let's go grab that command from
this page right here which is gonna be,

82
00:04:04.880 --> 00:04:09.990
we're gonna do go get this, right,
let's see if I did I paste it in here.

83
00:04:09.990 --> 00:04:13.534
I talked about how I use Vim and
Dvorak and how about awesome it is, but

84
00:04:13.534 --> 00:04:14.895
we're not gonna do that.

85
00:04:14.895 --> 00:04:18.463
So we're gonna do go get, right.

86
00:04:18.463 --> 00:04:19.545
All right, awesome.

87
00:04:19.545 --> 00:04:24.916
So don't forget to use this and
go go get GitHub hell flame argparse.

88
00:04:24.916 --> 00:04:31.891
Awesome, it got it we're at one point 8.0,
hopefully you guys get the same experience

89
00:04:36.368 --> 00:04:37.953
Give everyone a second everyone get it.

90
00:04:37.953 --> 00:04:38.551
We're good.

91
00:04:38.551 --> 00:04:40.300
Everyone follow along, awesome.

92
00:04:40.300 --> 00:04:44.134
All right, so I wanna do
effectively the exact same thing.

93
00:04:44.134 --> 00:04:46.622
Let's create a struct that is the opts.

94
00:04:46.622 --> 00:04:50.111
And then let's we're gonna transform
that into the config and a little bit.

95
00:04:50.111 --> 00:04:53.128
So let's create a type opts struct and

96
00:04:53.128 --> 00:04:57.099
it's gonna have effectively
similar item on it.

97
00:04:57.099 --> 00:05:01.890
So we also want Args, now remember we have
to capitalize it if you wish to export it.

98
00:05:01.890 --> 00:05:04.450
So this is one of the unfortunate
parts but it is, right?

99
00:05:04.450 --> 00:05:07.943
And we're gonna call this
thing a string array, right?

100
00:05:07.943 --> 00:05:11.666
So this thing is an array of strings and
we're just gonna keep it this way.

101
00:05:11.666 --> 00:05:14.891
It's not gonna be nullable
like the previous one.

102
00:05:14.891 --> 00:05:18.345
And so then we also need the config,
which of course is gonna be a string.

103
00:05:18.345 --> 00:05:21.587
And we're also gonna have the present
working directory, which is gonna be

104
00:05:21.587 --> 00:05:24.285
the string and go prefers it if
they're all lined up like that.

105
00:05:24.285 --> 00:05:25.098
So there you go.

106
00:05:25.098 --> 00:05:27.312
We have this beautiful nice struct.

107
00:05:27.312 --> 00:05:32.479
It's almost one to one the exact
same as the previous one.

108
00:05:32.479 --> 00:05:33.459
Let's go right here.

109
00:05:33.459 --> 00:05:35.303
As you can see, it's almost one to one.

110
00:05:35.303 --> 00:05:37.714
This one,
obviously this library had novels.

111
00:05:37.714 --> 00:05:39.807
The other one,
we're not gonna have novels.

112
00:05:39.807 --> 00:05:41.444
We'll just have empty strings.

113
00:05:41.444 --> 00:05:42.877
So similar feel.

114
00:05:42.877 --> 00:05:46.572
So now let's go like this,
funk get ops, right?

115
00:05:46.572 --> 00:05:50.793
It's gonna return and ops, so likely
there's only I always feel like there's

116
00:05:50.793 --> 00:05:54.951
almost always errors when dealing with
stuff so I'm just gonna pre prepare for

117
00:05:54.951 --> 00:05:55.644
it, right.

118
00:05:55.644 --> 00:06:00.098
I'm just gonna assume we're gonna
return a pointer to ops and

119
00:06:00.098 --> 00:06:04.477
an error, this is probably
the safest way to go, honestly.

120
00:06:04.477 --> 00:06:10.201
So, the first thing we need to do is
actually create a parser for the CLI ops.

121
00:06:10.201 --> 00:06:14.298
So I'm gonna go like this parser,
a parser equals new.

122
00:06:14.298 --> 00:06:16.305
Now remember our thing
was called argh parse.

123
00:06:16.305 --> 00:06:17.314
As you start typing it.

124
00:06:17.314 --> 00:06:18.797
You'll see right away.

125
00:06:18.797 --> 00:06:21.423
You can see it right here, argh, parse.

126
00:06:21.423 --> 00:06:22.878
Awesome, right?

127
00:06:22.878 --> 00:06:24.492
So I'm gonna press yes on this thing.

128
00:06:24.492 --> 00:06:26.763
Hopefully you have auto import and
everything set up.

129
00:06:26.763 --> 00:06:28.720
And now we have a couple
of different options here.

130
00:06:28.720 --> 00:06:30.088
The LSP by the way for girls,

131
00:06:30.088 --> 00:06:33.682
one of the best LSPs out there almost
always give you the right things to do.

132
00:06:33.682 --> 00:06:37.698
And you'll see right here,
right as I inevitably do parser when I

133
00:06:37.698 --> 00:06:40.691
open this up as I start,
if I start doing things,

134
00:06:40.691 --> 00:06:45.165
it's gonna give me all the right stuff
to do, right, for the most part.

135
00:06:45.165 --> 00:06:46.706
Now let's see.

136
00:06:46.706 --> 00:06:47.620
Did I create it right?

137
00:06:47.620 --> 00:06:48.358
Is it new per se?

138
00:06:48.358 --> 00:06:49.023
It's a new person.

139
00:06:49.023 --> 00:06:50.285
Am I bad on that one?

140
00:06:50.285 --> 00:06:51.551
So let's do this.

141
00:06:51.551 --> 00:06:52.221
And what is new parser?

142
00:06:52.221 --> 00:06:53.509
Take layer yell.

143
00:06:53.509 --> 00:06:57.856
So it takes in the name of your program,
a description of your program, and

144
00:06:57.856 --> 00:07:01.375
a parser config, a pointer to
a parser config and of course,

145
00:07:01.375 --> 00:07:04.768
what does it return to you
a pointer of a parser, awesome.

146
00:07:04.768 --> 00:07:06.334
So, let's go back and let's just do that.

147
00:07:06.334 --> 00:07:07.771
What is the name of our program?

148
00:07:07.771 --> 00:07:12.625
Projector, what is the description
gets all the values, right?

149
00:07:12.625 --> 00:07:14.368
It's just the greatest at these things.

150
00:07:14.368 --> 00:07:16.516
And so now we need that parser config.

151
00:07:16.516 --> 00:07:18.921
Of course the LSP is like I said,
it's really good look at that.

152
00:07:18.921 --> 00:07:20.679
It even has given you everything you need.

153
00:07:20.679 --> 00:07:22.477
I'm gonna give you
an ampersand to this thing.

154
00:07:22.477 --> 00:07:23.523
It does it all for you.

155
00:07:23.523 --> 00:07:25.572
Very, very wonderful.

156
00:07:25.572 --> 00:07:28.394
There is one option we need,
you wouldn't know about this option unless

157
00:07:28.394 --> 00:07:30.257
if If you've played
around with this library.

158
00:07:30.257 --> 00:07:32.451
But it's called it starts
with a capital D and

159
00:07:32.451 --> 00:07:36.379
I know I will see it right away disabled
default show help whenever you execute for

160
00:07:36.379 --> 00:07:38.370
whatever reason it shows the Help menu.

161
00:07:38.370 --> 00:07:41.909
And that kind of ruins this
whole idea of if you ask for

162
00:07:41.909 --> 00:07:46.424
a value you don't wanna help menu,
right you [LAUGH] Really hurts.

163
00:07:46.424 --> 00:07:49.203
Really just painful
experience right there.

164
00:07:49.203 --> 00:07:51.843
All right, so
we need to set up our items, now,

165
00:07:51.843 --> 00:07:54.228
remember how we can pass pointers around?

166
00:07:54.228 --> 00:07:58.372
Well, you can't technically pass pointers
to strings or string arrays, and

167
00:07:58.372 --> 00:08:02.137
then the other side of the application
can go and fill in those values and

168
00:08:02.137 --> 00:08:05.310
give you the correct stuff and
then you'll just have them.

169
00:08:05.310 --> 00:08:06.997
So we're gonna do that now.

170
00:08:06.997 --> 00:08:10.994
With this, it kind of does it for you,
but it will I'll show you what it means

171
00:08:10.994 --> 00:08:14.813
when we're actually inside of or
when we're returning the ops object.

172
00:08:14.813 --> 00:08:18.156
So first, let's do arcs right
because that's like the first one.

173
00:08:18.156 --> 00:08:21.931
So arcs have is gonna be
the parser dot strings, right?

174
00:08:21.931 --> 00:08:26.155
They kind of already have it set up for
you and it's saying right here,

175
00:08:26.155 --> 00:08:30.109
it takes in a short string,
a full string and a arc parse options.

176
00:08:30.109 --> 00:08:32.148
And returns to a pointer
to a string array,

177
00:08:32.148 --> 00:08:35.905
which means they're probably gonna do
something to that string array for us.

178
00:08:35.905 --> 00:08:39.799
Or we're just gonna have access to it,
so let's do that right now.

179
00:08:39.799 --> 00:08:44.300
So if it wasn't short first, yes,
short first, so let's go like this.

180
00:08:44.300 --> 00:08:47.787
It doesn't really matter, but
we'll go args full args, right,

181
00:08:47.787 --> 00:08:50.543
because this is gonna be
the positional arguments.

182
00:08:50.543 --> 00:08:55.356
So there is no way to refer to them
as a dash-dash or we don't want that.

183
00:08:55.356 --> 00:08:58.473
And so the last thing is gonna
be this Option business.

184
00:08:58.473 --> 00:09:01.195
So we need to make sure we go through
the option and get the correct things.

185
00:09:01.195 --> 00:09:02.943
Now, you would think that it's positional.

186
00:09:02.943 --> 00:09:06.532
I've actually tried it on positional,
it doesn't seem to be positional.

187
00:09:06.532 --> 00:09:09.258
Let's just go back and
let's just make it happen.

188
00:09:09.258 --> 00:09:11.802
All right, so
I'm gonna add in positional just,

189
00:09:11.802 --> 00:09:14.173
you it should be the positional ones,
right?

190
00:09:14.173 --> 00:09:15.231
I read through the documentation.

191
00:09:15.231 --> 00:09:17.791
I couldn't find all the answers for
myself.

192
00:09:17.791 --> 00:09:21.189
Is it required,
no it's not required, right.

193
00:09:21.189 --> 00:09:23.478
So let's just do that and

194
00:09:23.478 --> 00:09:29.264
go false we don't actually need
this one 100% of the time.

195
00:09:29.264 --> 00:09:33.344
And anything else we need I
think there's at least one more,

196
00:09:33.344 --> 00:09:38.144
I think there's a default value one
is in multiple let's see default,

197
00:09:38.144 --> 00:09:40.718
there you go default argument value.

198
00:09:40.718 --> 00:09:41.678
Is that the one?

199
00:09:41.678 --> 00:09:42.277
Let's see.

200
00:09:42.277 --> 00:09:43.773
If not given now,
it's definitely not that.

201
00:09:43.773 --> 00:09:45.246
We don't want that one.

202
00:09:45.246 --> 00:09:49.941
So I'm trying to remember what it was
because is it Multi takes more than one

203
00:09:49.941 --> 00:09:52.774
argument, Hint, Groove, my goodness,

204
00:09:52.774 --> 00:09:57.339
I may have forgotten I think I just put
it right here just in case I forget.

205
00:09:57.339 --> 00:09:58.857
Default is this okay?

206
00:09:58.857 --> 00:09:59.720
So it was this, okay?

207
00:09:59.720 --> 00:10:00.851
It was default.

208
00:10:00.851 --> 00:10:03.415
All right, there it is.

209
00:10:03.415 --> 00:10:06.806
Sorry I knew I forget using some
of these libraries, all right.

210
00:10:06.806 --> 00:10:11.347
Default, there we go, awesome, so we have
the Args, we've parsed them out, this is

211
00:10:11.347 --> 00:10:15.533
what it's gonna be and so now we need to
just do the same thing for the other ones.

212
00:10:15.533 --> 00:10:19.588
So config is gonna be a parser ,and
it's just gonna be a string, and

213
00:10:19.588 --> 00:10:22.804
we should name this one
definitely correct, right.

214
00:10:22.804 --> 00:10:27.536
Config and do we need any options, yes,
we don't want it to be required, right.

215
00:10:27.536 --> 00:10:30.466
We should not fail the application if
they do not provide us a config because

216
00:10:30.466 --> 00:10:33.060
we should have a default location for
a config Okay, so

217
00:10:33.060 --> 00:10:36.776
I'm gonna go like this required,
no false and

218
00:10:36.776 --> 00:10:42.398
of course the default value,
I'm just gonna have as an empty string,

219
00:10:42.398 --> 00:10:47.768
right, that's perfectly fine for
me, I'm happy with it, yay.

220
00:10:47.768 --> 00:10:50.762
And let's do one more,
present working directory, P for

221
00:10:50.762 --> 00:10:54.381
present working directory and
of course present working directory.

222
00:10:54.381 --> 00:10:56.440
So that should be everything we need.

223
00:10:56.440 --> 00:11:01.754
And now we just simply need to let this
program parse the command line for us,

224
00:11:01.754 --> 00:11:06.835
and so if we do parser.Parse,
it will do that and guess what it returns.

225
00:11:06.835 --> 00:11:10.782
Well, everyone's favorite An error,
right, you can see right here?

226
00:11:10.782 --> 00:11:13.764
It can take in a string array and
it returns out an error so

227
00:11:13.764 --> 00:11:18.145
we don't need to pass anything in we'll
do that and we'll do the classic handling

228
00:11:18.145 --> 00:11:21.085
of the air that's why you
should have this on a hot key.

229
00:11:21.085 --> 00:11:23.048
So you can just make it happen right away.

230
00:11:23.048 --> 00:11:26.311
So if you're programming go,
it's straightforward.

231
00:11:26.311 --> 00:11:27.746
And at that point,

232
00:11:27.746 --> 00:11:32.867
all we need to do now is just return
the reference to an ops and a nail.

233
00:11:32.867 --> 00:11:36.864
And of course, what do we have in the ops,
we have the args, which is gonna be args.

234
00:11:36.864 --> 00:11:40.813
But we need to do that we need to
dereference that we're actually gonna copy

235
00:11:40.813 --> 00:11:43.329
out and get out those values and
hand them back.

236
00:11:43.329 --> 00:11:46.241
And do the exact same thing with config,

237
00:11:46.241 --> 00:11:51.305
we're gonna do the exact same thing
with present working directory.

238
00:11:51.305 --> 00:11:52.518
Awesome, there we go.

239
00:11:52.518 --> 00:11:55.153
We have everything we need.

240
00:11:55.153 --> 00:11:57.485
Everyone's feeling good about this
one kind of a lot of work, right?

241
00:11:57.485 --> 00:12:02.305
Like I said, Gil just always feels
like it has a lot of boilerplate.

242
00:12:02.305 --> 00:12:04.242
But, when everyone has
to program the same way,

243
00:12:04.242 --> 00:12:06.236
there's also something
kind of nice about that.

244
00:12:06.236 --> 00:12:10.076
I don't know if you've ever gotten deep
into the JavaScript metaprogramming where

245
00:12:10.076 --> 00:12:13.224
you just have stuff doing stuff about and
just gets super confusing.

246
00:12:13.224 --> 00:12:14.895
Go just doesn't allow you to do that.

247
00:12:14.895 --> 00:12:20.176
So its simplicity hurts it and
is really awesome at the exact same time.

248
00:12:20.176 --> 00:12:22.852
So there we go, we should be
able to take this function now.

249
00:12:22.852 --> 00:12:23.953
Did I add any semicolons?

250
00:12:23.953 --> 00:12:26.523
Let's see if I did, Nice.

251
00:12:26.523 --> 00:12:28.026
That is a victory right there.

252
00:12:28.026 --> 00:12:33.335
All right, so now we can go back to Maine
and we can just call get Ops, right?

253
00:12:33.335 --> 00:12:38.302
And of course, we need the opts and the
err, and we should handle this correctly.

254
00:12:38.302 --> 00:12:41.661
So, to me, it seems, like if there's an
error, we should just print this out and

255
00:12:41.661 --> 00:12:43.040
terminate the program, right?

256
00:12:43.040 --> 00:12:47.831
So, this would actually be a very good
case for using log right here, right?

257
00:12:47.831 --> 00:12:52.001
So I'm gonna use log and
just fatal printed all out and

258
00:12:52.001 --> 00:12:57.004
we'll use fatal F and we'll just say,
unable to get options and

259
00:12:57.004 --> 00:13:00.540
use V and
then just pass in the error, right?

260
00:13:00.540 --> 00:13:02.889
To me,
that is a pretty nice way of doing things.

261
00:13:02.889 --> 00:13:05.553
Now we're not gonna actually use
the options other than printing

262
00:13:05.553 --> 00:13:06.238
them right now.

263
00:13:06.238 --> 00:13:09.124
So let's just print them out right now so
we can just see what's happening.

264
00:13:09.124 --> 00:13:13.880
Do a little print f like this opts,

265
00:13:13.880 --> 00:13:17.003
and +V opts awesome.

266
00:13:17.003 --> 00:13:20.423
So let's jump back here and
go run projector that and

267
00:13:20.423 --> 00:13:25.243
what you'll see is, we've effectively
got an array with nothing in it,

268
00:13:25.243 --> 00:13:28.140
a config, and a present working director.

269
00:13:28.140 --> 00:13:30.222
So it's almost identical
to our other program,

270
00:13:30.222 --> 00:13:31.906
this is just how they use it, awesome.

271
00:13:31.906 --> 00:13:35.553
So, we can definitely take this and
convert it into what we need it to be.

272
00:13:35.553 --> 00:13:40.977
Let's do a quick testing test,
you can see that awesome foo,

273
00:13:40.977 --> 00:13:43.805
great, config bar, awesome.

274
00:13:43.805 --> 00:13:46.553
It looks like it's just exactly
kind of what we wanted it to be.

275
00:13:46.553 --> 00:13:51.051
And just for the completeness, let's do
present working directory bass, awesome.

276
00:13:51.051 --> 00:13:53.810
So everything's passable, everything works

