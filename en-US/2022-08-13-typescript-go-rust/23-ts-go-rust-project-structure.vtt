WEBVTT

1
00:00:00.140 --> 00:00:01.495
So one quick thing on structures,

2
00:00:01.495 --> 00:00:04.640
I think everyone's pretty much familiar
with TypeScript structure, right?

3
00:00:04.640 --> 00:00:06.803
You have your node modules,
the weight of the universe.

4
00:00:06.803 --> 00:00:09.843
You have your source folder pretty
much where everyone keeps it,

5
00:00:09.843 --> 00:00:12.175
I think some of the older
projects on JavaScript.

6
00:00:12.175 --> 00:00:15.698
I'm thinking of the Bunyan Logger
that uses lib, but

7
00:00:15.698 --> 00:00:18.451
lib's kind of out of fashion these days.

8
00:00:18.451 --> 00:00:21.553
And of course, you have package.json,
and then a bunch of other files.

9
00:00:21.553 --> 00:00:23.280
You get that, a bunch of configuration.

10
00:00:23.280 --> 00:00:25.188
Golang, we kind of went
over this a little bit.

11
00:00:25.188 --> 00:00:26.391
You have a command folder.

12
00:00:26.391 --> 00:00:28.230
This is where your main functions go.

13
00:00:28.230 --> 00:00:30.874
If you have subfolders
in your command folder,

14
00:00:30.874 --> 00:00:34.390
you can have multiple kind of
binaries with main entry points.

15
00:00:34.390 --> 00:00:36.391
And so
that tends to be the canonical structure.

16
00:00:36.391 --> 00:00:41.426
I believe there is even something called
the canonical Go project structure.

17
00:00:41.426 --> 00:00:44.623
And they're still arguing over
what you should be doing.

18
00:00:44.623 --> 00:00:48.396
Standard Go Project Layout,
that's what I'm getting most of this from.

19
00:00:48.396 --> 00:00:52.382
And so in my kind of reality,
this is what I tend to use,

20
00:00:52.382 --> 00:00:55.177
which is command, and then package.

21
00:00:55.177 --> 00:00:57.613
And then I have subfolders, and
those are the export names.

22
00:00:57.613 --> 00:01:01.917
You'll notice that we did strings
lowercase, and then some functions on it.

23
00:01:01.917 --> 00:01:07.127
So if we had package strings with some
functions, we could refer to that package

24
00:01:07.127 --> 00:01:11.813
strings as opposed to the standard
definition strings if we wanted to.

25
00:01:11.813 --> 00:01:16.250
So this will show up in your
project as an importable name.

26
00:01:16.250 --> 00:01:18.270
So just something to think about.

27
00:01:18.270 --> 00:01:20.507
And it'll use your LSP to
type it all out for you.

28
00:01:20.507 --> 00:01:24.046
And go.mod kinda tells you what your
project relies on, your basic bookkeeping.

29
00:01:24.046 --> 00:01:27.856
You can think of it like a package.json,
very, very similar.

30
00:01:27.856 --> 00:01:34.838
Rustlang, exact same kind of, it's like
a mixture of Go versus TypeScript.

31
00:01:34.838 --> 00:01:37.992
You have your source folder,
which contains all your source.

32
00:01:37.992 --> 00:01:41.821
Often, how I structure all my
projects is I'll have a lib.rs.

33
00:01:41.821 --> 00:01:46.743
This is how you can export a bunch
of different files with all their

34
00:01:46.743 --> 00:01:48.810
stuff into your binaries.

35
00:01:48.810 --> 00:01:51.313
So I simply will have a lib.rs and
I'll have a bunch of,

36
00:01:51.313 --> 00:01:52.496
did I put an example here?

37
00:01:52.496 --> 00:01:56.940
Yeah, I'll have pub mod file_1,
pub mod errors.

38
00:01:56.940 --> 00:01:59.546
And you can see it right here and
it just all works out.

39
00:01:59.546 --> 00:02:01.088
I think I typed this by hand.

40
00:02:01.088 --> 00:02:02.960
It shouldn't have .rs.

41
00:02:02.960 --> 00:02:06.659
I actually put .rs on there and I think I
typed it by hand, my bad on that one, but

42
00:02:06.659 --> 00:02:07.502
you get the idea.

43
00:02:07.502 --> 00:02:11.510
You can see file_1 right here, and
then we export it from the library.

44
00:02:11.510 --> 00:02:16.367
That means our binary can then
include our package name,

45
00:02:16.367 --> 00:02:21.770
::file_1:: whatever structs
stuff you have on there.

46
00:02:21.770 --> 00:02:26.930
So very, very similar, they all
effectively accomplish the same thing.

47
00:02:26.930 --> 00:02:30.787
I always use the bin folder cuz
often I'll have multiple binaries.

48
00:02:30.787 --> 00:02:34.201
If I wanna test something, just like
a manual test to see how this thing works,

49
00:02:34.201 --> 00:02:36.609
it's always nice to have your
project set up that way.

50
00:02:36.609 --> 00:02:39.527
So that way, if you need to do that,
you're not, crap,

51
00:02:39.527 --> 00:02:40.890
I gotta restructure stuff.

