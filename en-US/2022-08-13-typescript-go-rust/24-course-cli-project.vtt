WEBVTT

1
00:00:00.042 --> 00:00:05.209
The name of the CLI application we're
gonna be building is called projector.

2
00:00:05.209 --> 00:00:08.840
It's a simple CLI application that stores,
deletes, and

3
00:00:08.840 --> 00:00:13.717
presents variables based on the current
working directory or a path provided.

4
00:00:13.717 --> 00:00:16.853
The reason why I built this is I
actually use it a whole bunch for

5
00:00:16.853 --> 00:00:21.075
building the Netflix application at my job
cuz we have a C++ based application for

6
00:00:21.075 --> 00:00:24.660
the television And I often need to go, I
need to build this first specific device,

7
00:00:24.660 --> 00:00:27.364
I need to build this as a debug one,
I need to build it as a release one.

8
00:00:27.364 --> 00:00:30.740
And if you know anything about you know
CMake flags and all that they get long and

9
00:00:30.740 --> 00:00:33.007
there's a ton of them and
I can never remember them.

10
00:00:33.007 --> 00:00:36.297
So I just need to go for,
projector odroid and

11
00:00:36.297 --> 00:00:40.201
it gives me all the flags in
this specific path for me.

12
00:00:40.201 --> 00:00:44.061
And so that way, even if I have
different like say a release build and

13
00:00:44.061 --> 00:00:47.066
a debug build I can actually
make it path dependent.

14
00:00:47.066 --> 00:00:51.265
So, odroid means, release plus odroid.

15
00:00:51.265 --> 00:00:53.352
And the other side means
debug plus odroid, so

16
00:00:53.352 --> 00:00:55.396
I never have to remember
those flags as much.

17
00:00:55.396 --> 00:00:58.682
So I kind of built this tool as
something that solves my own problem.

18
00:00:58.682 --> 00:01:00.976
And I think that is pretty fantastic for
us now.

19
00:01:00.976 --> 00:01:04.864
And so we just got done describing the
idea that we're going to build which of

20
00:01:04.864 --> 00:01:07.192
course is gonna be
a simple CLI application.

21
00:01:07.192 --> 00:01:08.575
That store, deletes, and

22
00:01:08.575 --> 00:01:12.676
presents variables based on your current
working directory or a path provided.

23
00:01:12.676 --> 00:01:14.176
So pretty straight forward.

24
00:01:14.176 --> 00:01:19.424
So, here's a pretty example,
I cd /foo/bar and I call projector.

25
00:01:19.424 --> 00:01:21.367
It all prints an empty, right?

26
00:01:21.367 --> 00:01:24.449
We've never used it before,
there's nothing there to store.

27
00:01:24.449 --> 00:01:28.308
And so, it just prints empty brackets.

28
00:01:28.308 --> 00:01:29.921
So let's add and get a value.

29
00:01:29.921 --> 00:01:33.019
I have no idea how those things
are green but they are green.

30
00:01:33.019 --> 00:01:35.222
So let's just go with it
cuz that seems exciting.

31
00:01:35.222 --> 00:01:39.937
So I can go projector add foo bar,
then call projector, and

32
00:01:39.937 --> 00:01:44.652
it'll have a key foo and
a value bar If I call projector foo,

33
00:01:44.652 --> 00:01:47.218
it will just print bar, right?

34
00:01:47.218 --> 00:01:51.861
So this kinda like you can imagine this
is like path based environment variables,

35
00:01:51.861 --> 00:01:53.824
kind of NixOS just without NixOS.

36
00:01:53.824 --> 00:01:54.877
So, very, very exciting.

37
00:01:54.877 --> 00:01:59.423
All right, so
we also have merging data, right?

38
00:01:59.423 --> 00:02:05.154
So I can be inside of foo bar I can
cd into bass and then call projector.

39
00:02:05.154 --> 00:02:08.435
It still has foo bar from
my parent directory, but

40
00:02:08.435 --> 00:02:10.715
it has nothing in this directory.

41
00:02:10.715 --> 00:02:14.045
So then, if I call foo,
it still prints out bar,

42
00:02:14.045 --> 00:02:19.413
if I add in foo/bar/baz projector add
foo twitch, and then call projector,

43
00:02:19.413 --> 00:02:23.347
I get food twitch because that
is the deepest directory.

44
00:02:23.347 --> 00:02:26.101
Therefore it gets the most precedent for
having that value,

45
00:02:26.101 --> 00:02:27.780
as you can kind of see how this works.

46
00:02:27.780 --> 00:02:32.022
Effectively a series of merging maps
starting with the root routes being

47
00:02:32.022 --> 00:02:36.416
the least precedent to your furthest
directory being the most precedent.

48
00:02:36.416 --> 00:02:38.942
If I cd back and
then call projector again,

49
00:02:38.942 --> 00:02:43.150
you will notice that I get foo bar
because that directory foo bar does not

50
00:02:43.150 --> 00:02:46.534
actually change whereas foo
bar baz did have foo twitch.

51
00:02:46.534 --> 00:02:49.554
.So depending on your location,
where you're calling it,

52
00:02:49.554 --> 00:02:53.285
it's going to make sure that it's
returning the correct set of variables.

53
00:02:53.285 --> 00:02:58.046
In foo bar I can call projector
ad bar baz, another one.

54
00:02:58.046 --> 00:03:01.599
.Then I can cd into baz,
a deeper directory, call it, and

55
00:03:01.599 --> 00:03:04.598
then we'll get this entire object back,
right?

56
00:03:04.598 --> 00:03:08.632
Because it is every value
that's at this directory or

57
00:03:08.632 --> 00:03:11.150
higher up in my directory chain.

58
00:03:11.150 --> 00:03:14.045
Or, I can call a specific value,
bar, and I'll get baz out,

59
00:03:14.045 --> 00:03:16.407
even though that is from
one directory behind me.

60
00:03:16.407 --> 00:03:18.321
I know I didn't need to do the motion but

61
00:03:18.321 --> 00:03:20.933
it just feels like it describes
exactly how it feels.

62
00:03:20.933 --> 00:03:23.314
The dot dots back there somewhere.

63
00:03:23.314 --> 00:03:25.336
And so, let's kinda break up the problem.

64
00:03:25.336 --> 00:03:26.722
It's a pretty straightforward problem,
right?

65
00:03:26.722 --> 00:03:30.236
We have CLI options,
cuz there can be a bunch of things there,

66
00:03:30.236 --> 00:03:33.763
we have the actual config for
what we're going to do, right?

67
00:03:33.763 --> 00:03:38.338
This is going to be the operations of
adding, removing, printing all that.

68
00:03:38.338 --> 00:03:43.376
We are breaking up the problem right now,
which of course is the CLI options.

69
00:03:43.376 --> 00:03:45.341
So, we're gonna break up
this problem to four steps.

70
00:03:45.341 --> 00:03:50.114
And that's kind of how we're gonna solve
this is also via these four steps.

71
00:03:50.114 --> 00:03:52.545
So, we're gonna parsing the CLI options.

72
00:03:52.545 --> 00:03:55.575
So, you can imagine that if we
call projector with nothing.

73
00:03:55.575 --> 00:03:58.326
Well, I didn't specify
a path to go look into.

74
00:03:58.326 --> 00:04:01.926
I didn't specify a config to use,
I didn't specify any operation.

75
00:04:01.926 --> 00:04:06.240
So there's gonna be the options of it,
then there's gonna be the config,

76
00:04:06.240 --> 00:04:08.648
based on the options
what do we need to do?

77
00:04:08.648 --> 00:04:10.742
And what are the key Here's the values,
what are we doing?

78
00:04:10.742 --> 00:04:12.063
Where's the config stored?

79
00:04:12.063 --> 00:04:13.222
How do we get the values?

80
00:04:13.222 --> 00:04:13.986
All that, right?

81
00:04:13.986 --> 00:04:17.642
We have to get that, then we're
gonna have to print, add or remove,

82
00:04:17.642 --> 00:04:21.064
then we have to save in two cases,
or display results in a third.

83
00:04:21.064 --> 00:04:23.736
So, there we go kind of broke
down the problem, pretty simple.

84
00:04:23.736 --> 00:04:28.730
And we'll kind of do each one
of these columns one at a time.

85
00:04:28.730 --> 00:04:33.571
So, CLI ArgParsing, we're gonna use
three different libraries here.

86
00:04:33.571 --> 00:04:36.030
The first one of course is
NodeJS's command line args.

87
00:04:36.030 --> 00:04:37.970
I just randomly pulled one from a hat.

88
00:04:37.970 --> 00:04:43.229
There is at least 500 of these, right?

89
00:04:43.229 --> 00:04:46.201
So there's just so many different ones.

90
00:04:46.201 --> 00:04:49.210
We're gonna use clap for
rust, clap is fantastic.

91
00:04:49.210 --> 00:04:53.933
If you haven't use clap,
it is by far the greatest using one.

92
00:04:53.933 --> 00:04:56.041
And of course Golang,
we're gonna use argparse.

93
00:04:56.041 --> 00:05:02.400
It's just like the rest of go, a little
verbose, but also pretty darn easy to use.

94
00:05:02.400 --> 00:05:06.725
And so, we'll see what happens here.

95
00:05:06.725 --> 00:05:08.608
I liked it at least.

96
00:05:08.608 --> 00:05:14.204
All right, and then, let let's talk
about like the algorithm side of things.

97
00:05:14.204 --> 00:05:17.375
So, finding the key,
of course, is the fun part.

98
00:05:17.375 --> 00:05:19.928
We start off here, right?

99
00:05:19.928 --> 00:05:26.427
That means we're gonna need to check here,
here, here, here, here, here, here, here.

100
00:05:26.427 --> 00:05:30.828
And depending on the type of operation,
this operation we've specified nothing.

101
00:05:30.828 --> 00:05:35.702
Therefore we the merge all the values
we find along the way into a map.

102
00:05:35.702 --> 00:05:39.704
If we do it with this, we're gonna keep
on walking up the path until we find

103
00:05:39.704 --> 00:05:43.075
the first occurrence,
the one with the highest precedence.

104
00:05:43.075 --> 00:05:47.851
Adding and deleting, should only be
done in the directory you've specified,

105
00:05:47.851 --> 00:05:51.130
either the directory you
execute a projector from, or

106
00:05:51.130 --> 00:05:55.353
if you provided a path to add it to,
it should add it or delete it there.

107
00:05:55.353 --> 00:05:58.126
Let's seems to make sense, right?

108
00:05:58.126 --> 00:05:59.211
I was also wondering,

109
00:05:59.211 --> 00:06:03.106
is anyone a little upset at the fact that
I used a deleting before the word adding?

110
00:06:03.106 --> 00:06:06.182
Does that kinda feel just frustrating?

111
00:06:06.182 --> 00:06:07.296
I think it's just fantastic.

112
00:06:07.296 --> 00:06:09.124
I like doing those kind of things.

113
00:06:09.124 --> 00:06:10.218
There you go, deleting or adding.

