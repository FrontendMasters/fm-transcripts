WEBVTT

1
00:00:00.230 --> 00:00:02.160
I hope everybody's ready
to jump back in this.

2
00:00:02.160 --> 00:00:05.836
Hopefully this all made sense I
just got done explaining that I do

3
00:00:05.836 --> 00:00:10.397
want to make sure that the problems that
we're doing are not complex in nature,

4
00:00:10.397 --> 00:00:12.051
they're actually simple.

5
00:00:12.051 --> 00:00:15.852
They're more fun to understand how to
parse strings in these various languages

6
00:00:15.852 --> 00:00:19.709
than it is to solve some specific math
trick like the Chinese remainder theorem,

7
00:00:19.709 --> 00:00:22.849
which did catch me for quite some
time on advent of code last year.

8
00:00:22.849 --> 00:00:27.446
But so let's do this exact same problem,
but let's do it and go.

9
00:00:27.446 --> 00:00:30.487
All right, so this is we're
gonna get kind of crazy here.

10
00:00:30.487 --> 00:00:34.700
So I'm gonna go back to my projects folder
and I'm gonna make a directory called go.

11
00:00:34.700 --> 00:00:38.313
Why not?
Right that seems pretty good we're going

12
00:00:38.313 --> 00:00:39.311
to go learn.

13
00:00:39.311 --> 00:00:43.244
Okay, so I'm gonna go go mod init,
you always have to do this,

14
00:00:43.244 --> 00:00:47.428
this is just you have to give it
a name and the names are always URLs.

15
00:00:47.428 --> 00:00:50.640
So there we go the primeagen,
we're just gonna call it aoc, there we go.

16
00:00:50.640 --> 00:00:54.372
So you're gonna do the exact same thing
if you're going to Go go mod init,

17
00:00:54.372 --> 00:00:56.050
here you go do this thing.

18
00:00:56.050 --> 00:00:58.963
It's gonna create a new Go module and
then of course,

19
00:00:58.963 --> 00:01:03.367
I'm gonna do get init because I like to
have proper fuzzy finding with ignoring,

20
00:01:03.367 --> 00:01:05.343
say node modules and other things.

21
00:01:05.343 --> 00:01:10.010
There we go and so now I'm gonna open
up that beautiful editor known as Vim.

22
00:01:10.010 --> 00:01:14.202
So if you guys are using VS Code, you're
probably still clicking your way there,

23
00:01:14.202 --> 00:01:16.098
but I'm just kidding, it's okay.

24
00:01:16.098 --> 00:01:19.040
In Go, a standard project kind of setup

25
00:01:19.040 --> 00:01:24.031
is that you have CMD command as where
you put your main files in, and

26
00:01:24.031 --> 00:01:29.398
then you have PKG package where you
put kind of like your library files.

27
00:01:29.398 --> 00:01:31.862
There's also internal and
other things but in general,

28
00:01:31.862 --> 00:01:35.159
that's kind of the two main things you're
going to see in a lot of packages.

29
00:01:35.159 --> 00:01:37.668
There's a few other packages
that have specific meanings, but

30
00:01:37.668 --> 00:01:39.340
we're just going to rely on that.

31
00:01:39.340 --> 00:01:44.224
So I'm gonna create a directory called
CMD, inside there, I'll create another

32
00:01:44.224 --> 00:01:49.780
directory called p1 because any directory
can only have at max one main file, right?

33
00:01:49.780 --> 00:01:54.337
And so we'll create p1 and in here you
can call it whatever you want to call it,

34
00:01:54.337 --> 00:01:57.258
I just call it main.go
just out of just whatever.

35
00:01:57.258 --> 00:02:01.481
So the first thing you put at the top of
all Go files of course is what package

36
00:02:01.481 --> 00:02:05.505
does it belong to, when it belongs
to the main package you're telling

37
00:02:05.505 --> 00:02:10.171
the compiler that this file will also
contain the entry point into your program.

38
00:02:10.171 --> 00:02:14.119
And of course, the entry point is main,
pretty simple.

39
00:02:16.440 --> 00:02:21.442
And so I'll give you a quick second so
me personally, I'm gonna

40
00:02:21.442 --> 00:02:27.652
hop back to this thing and I'm gonna grab
this nice little function right here,

41
00:02:27.652 --> 00:02:32.398
and I'm gonna hop back and
I'm gonna get this thing in here.

42
00:02:32.398 --> 00:02:37.047
All right, so however you guys need to do
that just get the input into this program.

43
00:02:37.047 --> 00:02:40.065
And I'm going to translate
this from TypeScript

44
00:02:40.065 --> 00:02:42.502
into Go which is actually pretty easy.

45
00:02:42.502 --> 00:02:46.968
The first thing you do is just take off
the tion on func so now it's just func and

46
00:02:46.968 --> 00:02:49.169
then of course remove the semicolon or

47
00:02:49.169 --> 00:02:53.610
remove the colon because you don't use
that as identifying a return value.

48
00:02:53.610 --> 00:02:58.360
And there we go, we've now just written
successful go and pretty easily, right?

49
00:02:58.360 --> 00:03:04.667
Go and TypeScript are actually rather
similar in most cases, shockingly similar.

50
00:03:04.667 --> 00:03:08.902
Now it might even feel a little bit
shocking that it was that easy, but

51
00:03:08.902 --> 00:03:09.934
it is that easy.

52
00:03:09.934 --> 00:03:14.453
All right so, unfortunately Go does not
really favor the functional approach to

53
00:03:14.453 --> 00:03:17.112
things and
when it comes to string processing,

54
00:03:17.112 --> 00:03:20.580
I've always felt like that was
kind of a nice paradigm to use.

55
00:03:20.580 --> 00:03:24.126
So we're gonna use the non fun
paradigm we're going like this,

56
00:03:24.126 --> 00:03:28.001
parts equals string so there's this
library called strings which has

57
00:03:28.001 --> 00:03:30.972
a bunch of Helper functions,
to be able to do things.

58
00:03:30.972 --> 00:03:35.977
So if you have an LSP active,
when you use it, it should auto

59
00:03:35.977 --> 00:03:42.605
import it up here if you don't have it
you need to make sure it imports strings.

60
00:03:42.605 --> 00:03:45.660
I would definitely make sure you get
used to having those things auto

61
00:03:45.660 --> 00:03:47.170
imported it's just way easier.

62
00:03:47.170 --> 00:03:51.402
We're gonna call the method Split remember
capital letters identify things that

63
00:03:51.402 --> 00:03:54.969
are exported so this string module
exports something called Split.

64
00:03:54.969 --> 00:04:00.345
And I'm going to split my input getInput
via the new line all right actually

65
00:04:00.345 --> 00:04:05.048
we can call this thing lines all
right look how beautiful that is.

66
00:04:05.048 --> 00:04:09.113
So now Go, one nice thing about Go is
that it kind of has the liner built into

67
00:04:09.113 --> 00:04:13.575
the LSP I'm not using lines therefore I
cannot even compile this project right if

68
00:04:13.575 --> 00:04:17.273
you're not using all your variables
it does not compile, right?

69
00:04:17.273 --> 00:04:19.833
It just wants to make sure you
don't make stupid mistakes.

70
00:04:19.833 --> 00:04:23.967
Go is inherently written for the new
graduate that's even part of the design

71
00:04:23.967 --> 00:04:26.885
goal that I forget the person's
name who created it.

72
00:04:26.885 --> 00:04:30.612
That was one of his design goals was
to make this as easy of a language as

73
00:04:30.612 --> 00:04:34.100
possible while maintaining
the most performance as possible.

74
00:04:34.100 --> 00:04:37.321
So let's do a little for,
so whenever you do,

75
00:04:37.321 --> 00:04:42.532
by the way the underscore denotes this
is a variable, but I will not use it.

76
00:04:42.532 --> 00:04:44.336
So I'm gonna do a little quick for loop.

77
00:04:44.336 --> 00:04:48.043
And of course the colon equals
means this is a new variable,

78
00:04:48.043 --> 00:04:52.937
whereas the equal is assigning, just so
you know, I'm gonna do there you go so

79
00:04:52.937 --> 00:04:56.750
this is a quick for
loop I'm gonna range over the lines.

80
00:04:56.750 --> 00:04:59.499
And this right here is the index, right?

81
00:04:59.499 --> 00:05:01.523
And this right here is the thing.

82
00:05:01.523 --> 00:05:03.977
So there we go we have those two things.

83
00:05:03.977 --> 00:05:06.815
And so now I need to do
something with those two things.

84
00:05:06.815 --> 00:05:10.703
So much like the previous one, where
we did this like parse line let's build

85
00:05:10.703 --> 00:05:13.430
the same function, but let's do it in Go.

86
00:05:13.430 --> 00:05:15.074
So I'm gonna jump back and

87
00:05:15.074 --> 00:05:19.784
we're gonna go like this func parseLine
we're gonna take a line string and

88
00:05:19.784 --> 00:05:24.288
what we need to return out is going
to be something now we can't do this.

89
00:05:24.288 --> 00:05:28.881
Now obviously, this would be great I would
like to do that we can do an array of two,

90
00:05:28.881 --> 00:05:31.961
that is an option but
let's just use a struct, right?

91
00:05:31.961 --> 00:05:35.740
Let's use some structs, let's kind of get
used to more kind of GUIism type thing.

92
00:05:35.740 --> 00:05:40.545
So we're gonna go like this, type, we'll
call it Point I'm not sure if it's really

93
00:05:40.545 --> 00:05:43.882
a point it's kind of more of
technically like a vector, but

94
00:05:43.882 --> 00:05:49.000
we're just gonna call it whatever right
a tuple, it doesn't really matter.

95
00:05:49.000 --> 00:05:55.250
Type Point struct and we're gonna have an
x that is an int and a y that is an int.

96
00:05:55.250 --> 00:05:59.504
Now notice you don't put any commas
you don't put in any semi colons so

97
00:05:59.504 --> 00:06:03.342
what you do and of course,
let's return that point from this.

98
00:06:03.342 --> 00:06:07.375
All right, so now let's start parsing
the line, I'm gonna just copy this line,

99
00:06:07.375 --> 00:06:10.040
bring it up here, and
I'm gonna call it parts.

100
00:06:10.040 --> 00:06:13.265
And I'm gonna split of course
the line on whitespace,

101
00:06:13.265 --> 00:06:16.922
just like we did in our previous
program on our other version.

102
00:06:16.922 --> 00:06:21.542
We're just simply splitting now each line
by the whitespace so now we're gonna have

103
00:06:21.542 --> 00:06:25.592
ford up down on one side, and we're
gonna have a number on the other side.

104
00:06:25.592 --> 00:06:30.648
So let's first, let's get the amount out,
let's get that number out, right?

105
00:06:30.648 --> 00:06:35.636
So I'm gonna go like this amount equals
again you can use strcon which is another

106
00:06:35.636 --> 00:06:39.507
one of these libraries out there
that is just provided to you,

107
00:06:39.507 --> 00:06:43.015
this will convert strings
into some other set of types.

108
00:06:43.015 --> 00:06:44.635
So I'm gonna press yes on this thing,

109
00:06:44.635 --> 00:06:46.670
which obviously means
that I'm importing it.

110
00:06:46.670 --> 00:06:48.723
If you don't have it imported it breaks,

111
00:06:48.723 --> 00:06:52.304
make sure you have that thing auto
imported and I'm gonna like this Ato,

112
00:06:52.304 --> 00:06:54.778
now this is a kind of a call
back to an old function.

113
00:06:54.778 --> 00:06:58.057
I think it stands for ASCII to integer or
ArrayBuffer to integer,

114
00:06:58.057 --> 00:07:00.442
I cannot remember exactly
what it stands for but

115
00:07:00.442 --> 00:07:03.974
it's gonna effectively take in
a string and convert it into a number.

116
00:07:03.974 --> 00:07:06.568
So I'm gonna go like this
parts 1 like this but

117
00:07:06.568 --> 00:07:10.626
you're gonna see something right right
away what is the error it says you

118
00:07:10.626 --> 00:07:14.635
cannot initialize one variable with
two values, what does that mean?

119
00:07:14.635 --> 00:07:18.786
Well if we jump to the definition
it returns an int and an error.

120
00:07:18.786 --> 00:07:22.309
All right we're already into the error
land with girl so let's do this so

121
00:07:22.309 --> 00:07:25.326
I'm gonna add the word err,
what should we do if we hit an err?

122
00:07:25.326 --> 00:07:29.134
Well, for the sake of this program,
we should never hit an err ever.

123
00:07:29.134 --> 00:07:33.460
So I'm just gonna just ruin the program
right here this thing doesn't work out.

124
00:07:33.460 --> 00:07:36.221
So I'm gonna do my standard
little if err does not equal nil,

125
00:07:36.221 --> 00:07:38.680
I'm gonna import something called log.

126
00:07:38.680 --> 00:07:42.610
When you do log you can add a fatal and
I'm just going to be like this should

127
00:07:42.610 --> 00:07:46.414
never ever happen I'm going to just
destroy this program immediately

128
00:07:46.414 --> 00:07:50.106
right this should just never happen and
that's just a fact of life.

129
00:07:50.106 --> 00:07:53.392
All right awesome so
now we have this beautiful amount int,

130
00:07:53.392 --> 00:07:57.284
we have our parts, which still has
part zero which has the direction.

131
00:07:57.284 --> 00:08:00.681
So now we just do the old,
amount equals oops,

132
00:08:00.681 --> 00:08:04.604
double equals doesn't have
a strong of equal signs,

133
00:08:04.604 --> 00:08:10.100
forward, my goodness do the exact
same thing return point.

134
00:08:10.100 --> 00:08:15.072
Go actually, will auto format when
I hit a nil, it'll auto format it

135
00:08:15.072 --> 00:08:19.559
to look a little differently but
x will be like do I use amount?

136
00:08:19.559 --> 00:08:24.251
Parts 0 that's silly of me,
amount y of course is 0 correct,

137
00:08:24.251 --> 00:08:30.003
does that makes sense, Go also make you
put what's called commas at the end,

138
00:08:30.003 --> 00:08:33.555
it's considered an actual parsing error.

139
00:08:33.555 --> 00:08:35.626
It's one of the things that makes Go so

140
00:08:35.626 --> 00:08:39.068
fast that compiling is that it
enforces a super strict syntax.

141
00:08:39.068 --> 00:08:42.265
And so that just means that
the language is way less complex.

142
00:08:42.265 --> 00:08:45.264
If you always,
every there's no checking to see,

143
00:08:45.264 --> 00:08:47.299
is there an extra comma at the end?

144
00:08:47.299 --> 00:08:50.770
No, there's always a comma at the end
we always expect at the end right?

145
00:08:50.770 --> 00:08:55.604
So that's part of the reason what makes Go
really fun is that it just parses super

146
00:08:55.604 --> 00:08:59.285
fast so I'm gonna copy that whole
thing do a little else if and

147
00:08:59.285 --> 00:09:03.110
change this to up right if it's
up let's move this thing down,

148
00:09:03.110 --> 00:09:07.030
call this thing x,
call that thing y and put a minus sign.

149
00:09:07.030 --> 00:09:11.218
Good so now we're dealing
the upper portion and of course,

150
00:09:11.218 --> 00:09:16.425
we can copy it again, align it, and
this would be the downforce, right?

151
00:09:16.425 --> 00:09:17.508
Does that all make sense?

152
00:09:23.468 --> 00:09:27.022
I'll give you guys a moment to look
at this I think the problem is fairly

153
00:09:27.022 --> 00:09:29.869
straightforward it's just
more learning the syntax.

154
00:09:29.869 --> 00:09:31.723
Yeah we got a question.

155
00:09:31.723 --> 00:09:35.077
&gt;&gt; Is underscore reserved
variable name for

156
00:09:35.077 --> 00:09:40.264
which the Go compiler skips checking
if it is declared not used?

157
00:09:40.264 --> 00:09:46.531
&gt;&gt; Yes, it identifies to the compiler
that you will not be using this.

158
00:09:46.531 --> 00:09:48.590
And so that's kind of how,
it's just like Rust,

159
00:09:48.590 --> 00:09:50.270
Rust also gives you the same semantics.

160
00:09:50.270 --> 00:09:53.121
Rust just says start anything
with an underscore and

161
00:09:53.121 --> 00:09:55.274
we know it will not be a warning for you.

162
00:09:55.274 --> 00:09:57.958
We already know that you're
planning on using it, it's just or

163
00:09:57.958 --> 00:09:59.408
you're not planning on using it.

164
00:09:59.408 --> 00:10:04.306
It doesn't matter, we just won't
consider it Go is just a little bit more

165
00:10:04.306 --> 00:10:09.283
strict about these things, in Rust you
get a warning during build time in Go

166
00:10:09.283 --> 00:10:11.977
you get a hard error you may not proceed.

167
00:10:11.977 --> 00:10:13.786
And so of course the underscore
is built for that.

168
00:10:13.786 --> 00:10:18.862
All right so long as we've done
everything mostly correct I should be

169
00:10:18.862 --> 00:10:23.861
able to do the following I'll go
like this position equals a point.

170
00:10:23.861 --> 00:10:27.807
Now this is called a list initializer
this can be very painful and

171
00:10:27.807 --> 00:10:32.628
very good at the exact same time let me
give you a fun error that took me about 30

172
00:10:32.628 --> 00:10:35.358
minutes to figure out
what was going wrong.

173
00:10:35.358 --> 00:10:39.299
All right if we go up to our
definition and I go like that and

174
00:10:39.299 --> 00:10:44.309
I have I think I may put this in my
presentation I may not so we'll find out I

175
00:10:44.309 --> 00:10:49.510
have x equals 0 have I put that myself
semicolon there you don't need it y.

176
00:10:49.510 --> 00:10:55.220
If I were to do x, y in other languages,
you might go the x gets assigned to the x,

177
00:10:55.220 --> 00:10:59.414
the y gets assigned to the y,
wrong it's a list initializer.

178
00:10:59.414 --> 00:11:03.363
It's gonna go in order of
the properties that are in the struct,

179
00:11:03.363 --> 00:11:06.960
this is just like a hard gotcha
be very careful about this.

180
00:11:06.960 --> 00:11:10.144
So in this example,
if x was 1 and y was 0,

181
00:11:10.144 --> 00:11:16.266
my actual definition would have y as 1 and
x is 0 so careful, careful, careful.

182
00:11:16.266 --> 00:11:21.535
Just really, I don't know why but
I don't understand that one but

183
00:11:21.535 --> 00:11:25.123
it is what it is, so
let's just deal with it.

184
00:11:25.123 --> 00:11:29.592
So there we go we have our position
we're gonna create our amount

185
00:11:29.592 --> 00:11:34.081
we're gonna go up here and
what do we call this thing parseLine?

186
00:11:34.081 --> 00:11:39.738
ParseLine and let's just parse in
our line this thing is going to

187
00:11:39.738 --> 00:11:45.079
return back out a point we can
see right there it's a point and

188
00:11:45.079 --> 00:11:50.314
of course pos x plus equals amount
x copy it replace x with y,

189
00:11:50.314 --> 00:11:53.279
boom, you got it, we're done.

190
00:11:53.279 --> 00:11:55.989
Now long as we've done
everything correctly,

191
00:11:55.989 --> 00:11:58.570
we should be able to do
a little format print.

192
00:11:58.570 --> 00:12:02.169
We can use log printing we already have
log in here now we're like mixing log

193
00:12:02.169 --> 00:12:03.710
versus format.

194
00:12:03.710 --> 00:12:07.262
Don't worry about it at this point in your
Go development life you don't you know,

195
00:12:07.262 --> 00:12:10.000
you don't need to know
the finer points of logging.

196
00:12:10.000 --> 00:12:15.270
Though I'm positive someone out there
will be like, don't worry about it.

197
00:12:15.270 --> 00:12:19.244
All right point and so we can use this fun
little operator called the +v this will

198
00:12:19.244 --> 00:12:21.812
kind of give us a more
debugged print of our values.

199
00:12:21.812 --> 00:12:28.110
So if I've done this correctly, we
should see ourselves with a 15 and a 10.

200
00:12:28.110 --> 00:12:35.659
So I'm going to go go run, and I gotta
go to the location, command p1 main.go.

201
00:12:35.659 --> 00:12:39.985
And there we go 15, 10 just like our
previous one obviously I didn't multiply

202
00:12:39.985 --> 00:12:43.680
them together to get 150 but
as you can see, not too bad, right?

203
00:12:43.680 --> 00:12:47.797
That was a shockingly some simple language
here, I'm gonna zoom it out a little bit.

204
00:12:47.797 --> 00:12:51.021
Kind of verbose a little bit long,
but at the exact same time,

205
00:12:51.021 --> 00:12:55.175
like nothing in here happened, that I
think anyone was shocked about if you've

206
00:12:55.175 --> 00:12:59.347
never even seen Go until this moment
it's a pretty straightforward language.

207
00:12:59.347 --> 00:13:02.380
And that's one thing I've just grown to
really appreciate about the language is

208
00:13:02.380 --> 00:13:03.950
that you get speed without the complexity

