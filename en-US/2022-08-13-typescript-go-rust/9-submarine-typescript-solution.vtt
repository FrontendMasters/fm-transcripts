WEBVTT

1
00:00:00.300 --> 00:00:05.002
So let's first write this in TypeScript
it should be very easy I think everybody

2
00:00:05.002 --> 00:00:08.721
should be able to do this if you
want to type along with type along

3
00:00:08.721 --> 00:00:11.614
I'll make a little bit of time for
you at the end.

4
00:00:11.614 --> 00:00:16.511
So I am going to go back to projects I'm
gonna make a direct call to TypeScript and

5
00:00:16.511 --> 00:00:18.412
I'm gonna go to Typescript and

6
00:00:18.412 --> 00:00:21.798
I am going to what do we do We
yarn a knit why we get a knit.

7
00:00:21.798 --> 00:00:26.950
We yarn add ts- node
typeScript types node.

8
00:00:26.950 --> 00:00:28.650
Don't forget all those things, right?

9
00:00:28.650 --> 00:00:32.668
Start a new quick little typescript
project to get everything in there and so

10
00:00:32.668 --> 00:00:35.010
I'll give you guys one
second to get ready.

11
00:00:35.010 --> 00:00:39.056
You're probably also asking yourself how
did he move between those folders so fast

12
00:00:39.056 --> 00:00:43.012
well it's this beautiful thing I called
T mux sessioniser and it's fantastic.

13
00:00:43.012 --> 00:00:47.092
Where could you find out information
about that dev productivity on front

14
00:00:47.092 --> 00:00:50.198
end masters.com/courses/found
I'm proud heavy.

15
00:00:50.198 --> 00:00:53.964
So we can create a directory of course
called source that's pretty much how

16
00:00:53.964 --> 00:00:56.716
everything's always done
in the TypeScript world and

17
00:00:56.716 --> 00:00:59.017
let's create a nice little file called P1.

18
00:00:59.017 --> 00:01:00.882
You can call it what you want it can
be in the main file doesn't really

19
00:01:00.882 --> 00:01:01.389
matter, right?

20
00:01:01.389 --> 00:01:03.900
We're not too concerned
about all those things.

21
00:01:03.900 --> 00:01:05.640
So let's jump back to our input.

22
00:01:05.640 --> 00:01:09.150
By the way, if you aren't following along,
it's the primary and God GitHub Pages.

23
00:01:09.150 --> 00:01:11.110
You may want to be copying this input.

24
00:01:11.110 --> 00:01:15.283
It will be a little bit difficult if you
don't, so obviously the prime mission can

25
00:01:15.283 --> 00:01:19.334
have IOTS go rust it's under a section
lessons cuz you can just click into it, so

26
00:01:19.334 --> 00:01:22.377
just go to this top part right up here and
we're right here.

27
00:01:22.377 --> 00:01:25.479
So everyone go here grab
your input [SOUND] right,

28
00:01:25.479 --> 00:01:30.029
cuz that's what we're gonna need to
do to do the basic testing of this.

29
00:01:30.029 --> 00:01:33.613
We're gonna go back here, I'm gonna
zoom this out just a little bit and

30
00:01:33.613 --> 00:01:37.738
let's create a quick function get input
that's going to of course return a string

31
00:01:37.738 --> 00:01:39.789
and return with those beautiful ticks.

32
00:01:39.789 --> 00:01:41.927
All of that data right?

33
00:01:41.927 --> 00:01:46.481
Now, we're gonna just do this in a very
procedural way just make it easy we'll

34
00:01:46.481 --> 00:01:49.931
do something a little bit more
functional coming up here but

35
00:01:49.931 --> 00:01:53.322
let's just start procedural and
we'll move from there.

36
00:01:53.322 --> 00:01:58.473
So let's create a function parse
line it's gonna take in a line.

37
00:01:58.473 --> 00:02:03.520
And it's gonna return out a number
of effectively a tuple right,

38
00:02:03.520 --> 00:02:08.675
cuz it's what do I need to change
up never forget that there you go.

39
00:02:08.675 --> 00:02:10.908
How do I need to change my direction?

40
00:02:10.908 --> 00:02:15.052
So pretty straightforward when it comes to
JavaScript, JavaScript has lLovely string

41
00:02:15.052 --> 00:02:18.638
parsing little dangerous when it comes
to numbers but overall very lovely.

42
00:02:18.638 --> 00:02:25.627
So I can go like this const direction
amount I'm gonna call this thing a and

43
00:02:25.627 --> 00:02:30.615
go line dot split The whitespace
of course, right?

44
00:02:30.615 --> 00:02:35.463
That makes pretty much most sense then
of course const amount equals plus

45
00:02:35.463 --> 00:02:37.933
a that just converted into a number.

46
00:02:37.933 --> 00:02:40.817
If you don't know that one that's
always a great one it's just so

47
00:02:40.817 --> 00:02:44.385
people always get confused like what's
the plus side mean well it's actually,

48
00:02:44.385 --> 00:02:45.493
All right, there we go.

49
00:02:45.493 --> 00:02:51.460
Of course, if dirt equals forward,
don't forget all three equal signs.

50
00:02:51.460 --> 00:02:56.470
Because in this language you need
to be very equal, all right?

51
00:02:56.470 --> 00:03:00.120
If it's this, if it's that then of
course we return amount and zero.

52
00:03:01.210 --> 00:03:05.757
Else if dirt equals up,
then let's just return zero and

53
00:03:05.757 --> 00:03:08.178
negative amount remember and

54
00:03:08.178 --> 00:03:13.430
of course at the end there's only
one more condition we return.

55
00:03:13.430 --> 00:03:16.070
And we've pretty much solved
the problem at this point, right?

56
00:03:16.070 --> 00:03:20.948
I mean this is not a very complex problem
but I want to make sure you guys type

57
00:03:20.948 --> 00:03:25.051
this feel it you really understand
the point of this problem.

58
00:03:25.051 --> 00:03:31.445
Because when we do it and go, it's just
gonna enough different if you don't have

59
00:03:31.445 --> 00:03:37.855
your ID setup hopefully I mean easiest to
use something like IntelliJ or VS code.

60
00:03:37.855 --> 00:03:42.675
I hate I know I have to say this VS code,
but Yu can also use VIm, but

61
00:03:42.675 --> 00:03:45.260
you have to have your LSP setup.

62
00:03:45.260 --> 00:03:47.908
If you use a COC, it's just COC install,

63
00:03:47.908 --> 00:03:52.920
I think go really easy to do if you use
neovim LSP takes a little bit more effort.

64
00:03:55.570 --> 00:03:56.160
Alright, there we go.

65
00:03:56.160 --> 00:03:59.258
And so we have this beautiful parse line,
which means really,

66
00:03:59.258 --> 00:04:01.889
all we need to do at this point
is we just need to have our

67
00:04:01.889 --> 00:04:05.760
initial starting point and
then just add those values into it, right?

68
00:04:05.760 --> 00:04:08.820
So I can go get input.

69
00:04:08.820 --> 00:04:14.508
I can split on the new line right so
every line is something

70
00:04:14.508 --> 00:04:19.380
I want read from there I
can map x into parse line.

71
00:04:20.560 --> 00:04:21.930
All right, and take out x.

72
00:04:21.930 --> 00:04:23.100
So there you go.

73
00:04:23.100 --> 00:04:23.990
This is looking pretty good.

74
00:04:23.990 --> 00:04:25.120
We're like mostly there.

75
00:04:25.120 --> 00:04:28.660
And if we were to just simply
go like this items, right?

76
00:04:28.660 --> 00:04:32.520
We could see the it's just an array
of tuples of numbers, right?

77
00:04:32.520 --> 00:04:33.060
Okay, good.

78
00:04:33.060 --> 00:04:35.270
So we are going the right direction.

79
00:04:35.270 --> 00:04:37.320
We have done what we're
supposed to be doing.

80
00:04:37.320 --> 00:04:40.865
Thank you TS server for
being actually a part pretty great.

81
00:04:40.865 --> 00:04:44.770
TFS server for all of its things it
actually has an amazing LSP on it

82
00:04:44.770 --> 00:04:49.172
the fact that it's doing this all nice
I just really appreciate that and so

83
00:04:49.172 --> 00:04:51.662
then I guess we can use my least favorite.

84
00:04:51.662 --> 00:04:58.095
First construct, which is a reduce I just
met, I never made a reduce that I like,

85
00:04:58.095 --> 00:05:04.836
I always find that I end up getting upset
at these things, but we'll use it anyways.

86
00:05:04.836 --> 00:05:08.026
And our initial position is 00 of course,
because remember,

87
00:05:08.026 --> 00:05:10.810
we're trying to be cool like
the cool TypeScript kids.

88
00:05:10.810 --> 00:05:12.100
We got to use functional nature.

89
00:05:12.100 --> 00:05:15.280
Nobody's uses for loops anymore.

90
00:05:15.280 --> 00:05:19.792
So we're gonna use this and
of course acc zero plus equals

91
00:05:19.792 --> 00:05:24.840
my goodness plus equals dir
actually is just, where are you?

92
00:05:24.840 --> 00:05:29.892
You're really just amount at this point
amount zero paste that in get those

93
00:05:29.892 --> 00:05:34.780
two and of course return x as you can see,
x is just the number number.

94
00:05:34.780 --> 00:05:37.593
We're just adding them all
together walking through and

95
00:05:37.593 --> 00:05:41.108
if I've done this correctly,
I believe my two values should be 15 and

96
00:05:41.108 --> 00:05:43.880
10 multiplied together of course,
would be 150.

97
00:05:43.880 --> 00:05:48.380
And so we gotta go const out equals this.

98
00:05:48.380 --> 00:05:51.860
You'll see that it's just a tuple awesome.

99
00:05:51.860 --> 00:05:55.069
We've maintained our correct
type at the end, and

100
00:05:55.069 --> 00:06:00.003
now we should be able to console.log out
and then we can go out to 0 out [1].

101
00:06:00.003 --> 00:06:04.523
So long as I didn't mess anything up,
which I'm really hoping I didn't,

102
00:06:04.523 --> 00:06:05.970
this should just work.

103
00:06:05.970 --> 00:06:10.969
Put a trademark on it at this point,
normally what we would be doing

104
00:06:10.969 --> 00:06:15.627
is taking a twitch prediction and
did I get it right first try.

105
00:06:15.627 --> 00:06:17.288
I believe I did.

106
00:06:17.288 --> 00:06:21.679
All right, so I'm gonna go a little
npx ts node and go source p 1, right?

107
00:06:21.679 --> 00:06:23.477
I'm just gonna execute ts node and

108
00:06:23.477 --> 00:06:27.640
run this thing and if we've done it
all correctly we see it Yay 1510 150.

109
00:06:27.640 --> 00:06:33.140
Yes I knew the answer ahead of time
it's almost as if I've done this before.

110
00:06:33.140 --> 00:06:36.517
Are you guys excited to do
the rust side of things?

111
00:06:36.517 --> 00:06:40.987
Yeah, I'm pretty excited Go
we're doing go because go

112
00:06:40.987 --> 00:06:45.754
honestly just let just a side
note if you came to me and said.

113
00:06:45.754 --> 00:06:50.094
All right Brian, I'm obviously paying
you seven figure salary to come here and

114
00:06:50.094 --> 00:06:51.538
help us with our startup.

115
00:06:51.538 --> 00:06:53.030
What language do we choose?

116
00:06:53.030 --> 00:06:54.550
We need to get this out
as soon as possible.

117
00:06:54.550 --> 00:06:55.500
I'm gonna say go.

118
00:06:55.500 --> 00:06:57.820
Go is just The work and man's language.

119
00:06:57.820 --> 00:07:00.570
You can get through stuff so fast.

120
00:07:00.570 --> 00:07:04.453
It just is so simple and I find that I
have the least complications with mess up

121
00:07:04.453 --> 00:07:06.710
in logic while maintaining the most speed.

