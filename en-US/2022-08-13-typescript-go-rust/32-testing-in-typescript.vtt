WEBVTT

1
00:00:00.210 --> 00:00:03.318
I know we kind of blazed through
that last part right at the ending,

2
00:00:03.318 --> 00:00:04.661
blazingly fast as they say.

3
00:00:04.661 --> 00:00:08.435
And so we're gonna kinda go back and we're
gonna test each version of the config we

4
00:00:08.435 --> 00:00:11.935
created cuz there's a little bit of tricky
logic there plus you get to see how

5
00:00:11.935 --> 00:00:14.476
testing works in every single
one of these languages.

6
00:00:14.476 --> 00:00:18.237
I will be trying to use just the most
vanilla version of the testing available

7
00:00:18.237 --> 00:00:21.589
which means that I won't be doing
any additional installations for

8
00:00:21.589 --> 00:00:25.502
TypeScript other than jest as or
TypeScript doesn't have testing inherent.

9
00:00:25.502 --> 00:00:27.153
So you have to install something.

10
00:00:27.153 --> 00:00:31.040
For Go there are good assertion libraries,
that make things a lot easier.

11
00:00:31.040 --> 00:00:34.608
We're just simply not going to use those,
and of course, for

12
00:00:34.608 --> 00:00:38.724
Rust there is some like pretty print
assertion macros that you can use,

13
00:00:38.724 --> 00:00:41.070
we'll just be using what is available.

14
00:00:42.100 --> 00:00:45.620
All right, so let's just get started.

15
00:00:45.620 --> 00:00:46.770
I think it'll be a great time.

16
00:00:46.770 --> 00:00:50.567
So let's jump back over into,
we're gonna start off with Typescript,

17
00:00:50.567 --> 00:00:52.090
should be pretty easy.

18
00:00:52.090 --> 00:00:53.470
All right, so let's add some tests.

19
00:00:53.470 --> 00:00:58.212
So we do need to do this first,
so let's start with this.

20
00:00:58.212 --> 00:01:01.426
By the way, I did have some errors when
I was doing this just like a week and

21
00:01:01.426 --> 00:01:01.967
a half ago.

22
00:01:01.967 --> 00:01:04.979
There's this whole just 28 vs TSGs.

23
00:01:04.979 --> 00:01:06.330
And there are some problems.

24
00:01:06.330 --> 00:01:09.786
So if for whatever reason you're
running into a goofy problem,

25
00:01:09.786 --> 00:01:14.394
just try going into your package.JSON and
turning 28 into 27 reinstall stuff and

26
00:01:14.394 --> 00:01:16.380
see if that works out for you.

27
00:01:16.380 --> 00:01:21.810
So I'm just gonna start off with this
of course, jump over to TypeScript.

28
00:01:21.810 --> 00:01:23.320
Add an extra one of these.

29
00:01:23.320 --> 00:01:24.460
Paste in, there we go.

30
00:01:27.310 --> 00:01:28.080
Should take a moment.

31
00:01:29.610 --> 00:01:31.440
See, you can tell this is real things.

32
00:01:31.440 --> 00:01:32.160
It took a moment.

33
00:01:32.160 --> 00:01:35.200
All right, and it's just init.

34
00:01:35.200 --> 00:01:37.840
And of course, let's see,
do you want to do this?

35
00:01:37.840 --> 00:01:39.230
Yes, I do want testing.

36
00:01:39.230 --> 00:01:42.660
Yes, I do want TypeScript,
yes, it'll be for node.

37
00:01:42.660 --> 00:01:44.200
I don't care about coverage.

38
00:01:44.200 --> 00:01:45.970
Make sure you use Babel.

39
00:01:45.970 --> 00:01:49.060
Sure, why not clear all the mocks,
I don't think that's gonna hurt us at all.

40
00:01:49.060 --> 00:01:51.330
So there we go,
we're not gonna use mocks awesome.

41
00:01:51.330 --> 00:01:55.550
We have everything done and now created
a nice little testing config for us.

42
00:01:55.550 --> 00:01:59.365
So let's just make sure that
everything worked swell and

43
00:01:59.365 --> 00:02:04.052
let's create a test subdirectory
that's kinda the shape you want for

44
00:02:04.052 --> 00:02:08.430
jest, that's kinda the convention,
right now in JavaScript.

45
00:02:08.430 --> 00:02:12.690
I've seen some other conventions recently
where they've been putting the testing

46
00:02:12.690 --> 00:02:15.938
files adjacent to these files
just having a.jest.ts in them.

47
00:02:15.938 --> 00:02:18.232
I'm not sure if that's gaining traction or

48
00:02:18.232 --> 00:02:21.190
not JavaScript standards
change all the time.

49
00:02:21.190 --> 00:02:24.476
Very hard to keep up but
let's go config.ts and

50
00:02:24.476 --> 00:02:27.770
let's just make sure we can do,
this is a test.

51
00:02:29.990 --> 00:02:31.706
Awesome, so this should work.

52
00:02:31.706 --> 00:02:39.540
Expect true to equal false.

53
00:02:39.540 --> 00:02:41.320
Let's have a nice failing test.

54
00:02:41.320 --> 00:02:44.404
Make sure everything's working.,npx jest.

55
00:02:44.404 --> 00:02:46.630
And what do we get out here?

56
00:02:46.630 --> 00:02:49.280
Okay, awesome,
everything worked out first try.

57
00:02:49.280 --> 00:02:53.580
Our init must have been successful, so
I believe we are good to go, right?

58
00:02:53.580 --> 00:02:56.490
So long as everyone got to here, awesome.

59
00:02:56.490 --> 00:02:58.900
So let's get started,
we'll just import our previous config.

60
00:02:58.900 --> 00:03:01.775
And the only things I'd really
cover in this kind of testing,

61
00:03:01.775 --> 00:03:05.950
kind of a quick note on testing, I think
unit testing is always a good idea to do.

62
00:03:05.950 --> 00:03:08.404
You got to be careful about over testing,

63
00:03:08.404 --> 00:03:11.740
be careful about testing
implementation details.

64
00:03:11.740 --> 00:03:14.245
I tried to always just test
public interfaces, and

65
00:03:14.245 --> 00:03:18.320
I tried to pretend to be dumb about
what's happening underneath the hood.

66
00:03:18.320 --> 00:03:22.822
Because once you start getting a little
too, once you get too clever by half,

67
00:03:22.822 --> 00:03:27.461
you start getting into the point of once
you make some sort of private refactor,

68
00:03:27.461 --> 00:03:30.391
you start breaking unit
tests all over the place.

69
00:03:30.391 --> 00:03:33.964
Because they they expect some underlying
shape and can be a bit dangerous.

70
00:03:33.964 --> 00:03:38.698
So let's go import, config or,
I wonder if it can be auto imported,

71
00:03:38.698 --> 00:03:43.939
anyways who cares, config, are we I
guess we call this get config, right?

72
00:03:43.939 --> 00:03:47.983
Well get config and we also have to handle
the options and if I'm not mistaken,

73
00:03:47.983 --> 00:03:50.448
the options can just
simply be an empty object.

74
00:03:50.448 --> 00:03:55.205
So we don't really need to get
all that information in there,

75
00:03:55.205 --> 00:03:59.238
so let's start off with
a simple print all, right?

76
00:03:59.238 --> 00:04:03.143
So that's all I'm gonna do, now of course
testing, we generate these special pass

77
00:04:03.143 --> 00:04:07.158
config and present working directory, I'm
not gonna check on those ones because that

78
00:04:07.158 --> 00:04:10.750
means my testing has to go and
like look up environment variables.

79
00:04:10.750 --> 00:04:13.320
And eventually I write my own program for
testing.

80
00:04:13.320 --> 00:04:15.824
Little dangerous, we're just gonna
make sure that the operations and

81
00:04:15.824 --> 00:04:17.920
the arguments are exactly what I think.

82
00:04:17.920 --> 00:04:22.240
So we'll start off with config and
go get config.

83
00:04:22.240 --> 00:04:28.177
Start off with a nice little empty object,
I should be able to expect,

84
00:04:28.177 --> 00:04:32.922
config, operation,
ellipses toEqual, Operation.

85
00:04:32.922 --> 00:04:37.040
See if we can get it nice it's
not getting imported in for me.

86
00:04:39.060 --> 00:04:41.098
No we're making fun of
my LSP today by the way,

87
00:04:41.098 --> 00:04:43.817
everybody we're gonna have no
LSP problems, I can feel it and

88
00:04:43.817 --> 00:04:47.240
of course you're gonna want to go
in here and just prove that right?

89
00:04:47.240 --> 00:04:50.494
Pretty simple test, I think we
can kind of all expect like yeah,

90
00:04:50.494 --> 00:04:54.474
this is like our most basic operation
which is just the print everything at your

91
00:04:54.474 --> 00:04:56.570
current directory operation.

92
00:04:56.570 --> 00:05:02.427
I'm gonna just take that paste
it do the exact same thing,

93
00:05:02.427 --> 00:05:06.380
print key, pass in an argument, foo.

94
00:05:07.440 --> 00:05:08.933
I believe it should be one of these,
right?

95
00:05:08.933 --> 00:05:09.930
There we go.

96
00:05:09.930 --> 00:05:14.759
This should do the exact same thing,
we should have the argument f print and

97
00:05:14.759 --> 00:05:16.610
of course of foo, awesome.

98
00:05:18.727 --> 00:05:19.600
And we'll do it again.

99
00:05:19.600 --> 00:05:21.709
We'll do something with add, and
we'll do something with remove and

100
00:05:21.709 --> 00:05:22.920
we'll kind of call that good.

101
00:05:22.920 --> 00:05:25.930
We're not gonna go into
error expectations.

102
00:05:25.930 --> 00:05:27.968
We could do some error testing as well,
but for

103
00:05:27.968 --> 00:05:31.261
me this is probably good enough because
really the goal right here is just to

104
00:05:31.261 --> 00:05:34.474
kind of make sure everyone is a familiar
what's available for testing.

105
00:05:34.474 --> 00:05:39.444
But also be to just always reinforce
a good habit of at least put

106
00:05:39.444 --> 00:05:42.896
up a little bit of
guardrails in your life.

107
00:05:42.896 --> 00:05:46.400
Now I have had people argue that you
shouldn't put up any guardrails.

108
00:05:46.400 --> 00:05:49.360
And it's an interesting approach to life.

109
00:05:49.360 --> 00:05:54.220
For me, I don't think I could emotionally
handle that because I have dealt with too

110
00:05:54.220 --> 00:05:58.248
many code bases that are covered in
no tests and finding bugs is very,

111
00:05:58.248 --> 00:05:59.590
very difficult.

112
00:05:59.590 --> 00:06:02.460
So there we go,
just did the whole ad operation.

113
00:06:04.070 --> 00:06:06.610
These are all obviously
just happy path ones.

114
00:06:06.610 --> 00:06:09.550
Just like little happy test
cases out there in the forest.

115
00:06:09.550 --> 00:06:13.902
I'm pretty sure Bob Ross would be
very happy at this moment that we're

116
00:06:13.902 --> 00:06:14.720
doing that.

117
00:06:14.720 --> 00:06:16.209
There we go.
And of course,

118
00:06:16.209 --> 00:06:18.852
removing only requires a single key.

119
00:06:18.852 --> 00:06:23.840
So let's make sure we can remove the key,
and this should end with a remove.

120
00:06:26.748 --> 00:06:30.100
I assume none of these
things are kind of too wild.

121
00:06:30.100 --> 00:06:32.667
Let's make sure everything
actually worked out,

122
00:06:32.667 --> 00:06:35.660
so I'll do an npx jest,
added in a little extra character.

123
00:06:36.880 --> 00:06:39.800
There we go, we actually got
a failed test, what happened?

124
00:06:40.870 --> 00:06:42.850
Yes, this fun test right here.

125
00:06:42.850 --> 00:06:46.715
So what ended up happening is that,
though we did init,

126
00:06:46.715 --> 00:06:51.690
jest config with TypeScript,
I believe the preset did not do that.

127
00:06:51.690 --> 00:06:53.760
And I forget what you had to put here.

128
00:06:53.760 --> 00:06:56.295
But I wanna say you say ts jest.

129
00:06:56.295 --> 00:06:57.840
I wanna say that's what you have to do.

130
00:06:57.840 --> 00:06:59.770
So, I think that's correct.

131
00:07:01.440 --> 00:07:02.210
I may have to Google it.

132
00:07:02.210 --> 00:07:03.359
Okay, there we go.

133
00:07:03.359 --> 00:07:07.905
We did actually [LAUGH] do the right
thing which is kind of painful that

134
00:07:07.905 --> 00:07:12.551
though setting up jest and
all that it doesn't actually quite do it.

135
00:07:12.551 --> 00:07:14.935
And so there we go, so
we have a couple of errors right here,

136
00:07:14.935 --> 00:07:17.500
it looks like we actually
did find a real bug, right?

137
00:07:17.500 --> 00:07:21.812
I must have redefined path or something
because it can't do this correctly.

138
00:07:21.812 --> 00:07:24.587
So let's jump back into our code,
go back into so

139
00:07:24.587 --> 00:07:28.998
whoever bet on first try working clearly
feels a little bit robbed right now.

140
00:07:28.998 --> 00:07:30.780
So did I have other paths out?

141
00:07:32.520 --> 00:07:36.984
Yes, so of course,
this is just more crying in configuration,

142
00:07:36.984 --> 00:07:40.538
which is,
if you don't have es module interrupt,

143
00:07:40.538 --> 00:07:44.110
I think is what the things
called in your TS config.

144
00:07:44.110 --> 00:07:46.970
You can't import one of these like that.

145
00:07:46.970 --> 00:07:51.540
So I have two ways of fixing it, either
fix it in my ts config or just do that.

146
00:07:51.540 --> 00:07:53.309
So, let's just do that, why not?

147
00:07:53.309 --> 00:07:55.350
Just feels good, right?

148
00:07:55.350 --> 00:07:58.760
Just do a nice quick hack and everything
should hopefully work out better.

149
00:07:58.760 --> 00:07:59.930
We'll look at that.

150
00:07:59.930 --> 00:08:02.560
We found out that we
have messed something up.

151
00:08:02.560 --> 00:08:04.282
So this is very, very excited.

152
00:08:04.282 --> 00:08:05.880
At least I'm very excited.

153
00:08:05.880 --> 00:08:07.880
So what have we messed up here?

154
00:08:07.880 --> 00:08:12.722
So let's go up and let's look at this
adding key, removing key, awesome,

155
00:08:12.722 --> 00:08:17.500
as you can see right here,
it looks like kinda goofed this up, right?

156
00:08:17.500 --> 00:08:20.790
Obviously, our cases aren't
quite catching everything and

157
00:08:20.790 --> 00:08:23.840
we are not doing an add
operation when we expect it.

158
00:08:23.840 --> 00:08:26.410
So for whatever reason,
we need to figure that out right now.

159
00:08:26.410 --> 00:08:28.270
So let's first just jump back in here.

160
00:08:28.270 --> 00:08:30.120
See if we can just spot
it with a quick look.

161
00:08:30.120 --> 00:08:34.218
Good operation, this all looks kind
of like what I would expect it to,

162
00:08:34.218 --> 00:08:35.790
opts 0 is, here you go.

163
00:08:35.790 --> 00:08:36.710
There's the problem.

164
00:08:36.710 --> 00:08:38.470
I can't believe you guys
didn't catch this yesterday.

165
00:08:38.470 --> 00:08:40.670
I feel like you should have caught this.

166
00:08:40.670 --> 00:08:44.570
I'm also a little surprised that
TypeScript didn't throw an error here.

167
00:08:44.570 --> 00:08:49.100
All right, I would expect it to throw
a little bit more of upsetness here.

168
00:08:49.100 --> 00:08:52.085
I wonder if it has to do with the fact
that I don't think I actually have

169
00:08:52.085 --> 00:08:52.970
a tsconfig.json.

170
00:08:53.990 --> 00:08:55.880
Let's just put an empty one right there.

171
00:08:55.880 --> 00:08:58.220
And we'll that's solve our problem.

172
00:08:58.220 --> 00:09:00.180
Cuz it's actually kind of funny
that that didn't get shown up.

173
00:09:00.180 --> 00:09:03.090
I usually program just
expecting things to work.

174
00:09:03.090 --> 00:09:06.070
Yeah, so
really I should be having args, right?

175
00:09:07.790 --> 00:09:11.610
I'm indexing 0 into an object
which does not have that key.

176
00:09:11.610 --> 00:09:14.710
I must have done something
in my config set up there.

177
00:09:14.710 --> 00:09:18.080
There we go, so that should make it so
that we have the correct item.

178
00:09:18.080 --> 00:09:21.100
We spotted the problem
without doing anything.

179
00:09:21.100 --> 00:09:22.734
Everything else looks good.

180
00:09:22.734 --> 00:09:27.250
I'm a little skeptical at this point that
everything is gonna work out fantastic.

181
00:09:27.250 --> 00:09:30.095
I was hoping that TypeScript
would save me here and

182
00:09:30.095 --> 00:09:32.410
normally I feel like it does a great job.

183
00:09:32.410 --> 00:09:36.020
I must have something slightly off,
but anyways, there we go, we got it.

184
00:09:37.420 --> 00:09:38.360
Yeah, everyone happy?

185
00:09:38.360 --> 00:09:39.870
Everyone get it?.

186
00:09:39.870 --> 00:09:43.548
Everyone has the test going, I assume that
the people in the audience here in front

187
00:09:43.548 --> 00:09:47.520
of Masters by the way, I'm not talking to
random people, there's people right here.

188
00:09:47.520 --> 00:09:51.609
I assume you guys at least
you're all familiar with jest so

189
00:09:51.609 --> 00:09:54.704
none of this stuff is too wild,
right, okay

