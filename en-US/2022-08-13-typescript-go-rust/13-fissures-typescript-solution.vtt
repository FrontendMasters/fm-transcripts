WEBVTT

1
00:00:00.000 --> 00:00:01.457
All right, so
let's start off with TypeScript.

2
00:00:01.457 --> 00:00:05.665
But before we do, everybody if you're
joining along, grab the input.

3
00:00:05.665 --> 00:00:09.744
Obviously, quintessential for
solving the problem is input.

4
00:00:09.744 --> 00:00:13.055
All right, so I'm gonna go back
to TypeScript, go to project, and

5
00:00:13.055 --> 00:00:15.507
I'm gonna create a p2 in
my TypeScript project.

6
00:00:15.507 --> 00:00:20.010
I'll let everyone get there for a moment,
and we're gonna do the exact same thing,

7
00:00:20.010 --> 00:00:22.240
of course, which is function getInput.

8
00:00:22.240 --> 00:00:24.562
Is that a Pinterest input?

9
00:00:24.562 --> 00:00:29.048
A string, return, paste that all in.

10
00:00:29.048 --> 00:00:30.633
What is the thing called?

11
00:00:30.633 --> 00:00:33.374
The grave, that's called the grave, right?

12
00:00:33.374 --> 00:00:34.958
What do you guys call that symbol?

13
00:00:34.958 --> 00:00:37.721
Yeah, look at that, it's a grave.

14
00:00:37.721 --> 00:00:39.857
Cuz that just sounds super exciting.

15
00:00:39.857 --> 00:00:41.315
They call me the grave-digger.

16
00:00:41.315 --> 00:00:42.494
I'm just out here just putting graves in.

17
00:00:42.494 --> 00:00:46.700
All right, so
hopefully everyone is about right here.

18
00:00:46.700 --> 00:00:50.732
At this moment, I'll give you guys
just one more second to get here.

19
00:00:50.732 --> 00:00:53.832
And we're gonna try to do
this again in a fun way,

20
00:00:53.832 --> 00:00:58.234
kind of taking advantage of some more
of the TypeScript ways to do it.

21
00:00:58.234 --> 00:01:03.990
So, let's first create a struct
that represents a point, right?

22
00:01:03.990 --> 00:01:05.278
Cuz that's really what we have,
we have two points.

23
00:01:05.278 --> 00:01:08.096
So I'm just gonna go type
point with an equal sign,

24
00:01:08.096 --> 00:01:10.335
that always just emotionally hurts me.

25
00:01:10.335 --> 00:01:12.336
Does that hurt anybody else?

26
00:01:12.336 --> 00:01:14.318
Why is interface no equal sign?

27
00:01:14.318 --> 00:01:21.385
Why is inter, then type just,
it has Okay, we can get back into this.

28
00:01:21.385 --> 00:01:23.348
Here we go.

29
00:01:23.348 --> 00:01:28.755
All right, so let's have an x,
it's just a number, y, it's just a number.

30
00:01:28.755 --> 00:01:30.108
So there we go, we have our point.

31
00:01:30.108 --> 00:01:33.791
So, let's create a function
called isStraight right?

32
00:01:33.791 --> 00:01:37.360
Our function is up wrong language,
Straight, right?

33
00:01:37.360 --> 00:01:43.347
And it's gonna take in simply a point,
and a point, right?

34
00:01:43.347 --> 00:01:44.688
We could do that, right?

35
00:01:44.688 --> 00:01:45.940
We can say, hey, is this thing Straight?

36
00:01:45.940 --> 00:01:46.960
Well, let's not do that.

37
00:01:46.960 --> 00:01:49.958
Let's actually create another type,
and we'll call it Line.

38
00:01:49.958 --> 00:01:53.113
And a Line consists of two points, right?

39
00:01:53.113 --> 00:01:53.902
Does that make sense?

40
00:01:53.902 --> 00:01:57.005
And then so our isStraight will
literally just have a line.

41
00:01:57.005 --> 00:01:58.305
Is this line straight?

42
00:01:58.305 --> 00:02:01.910
All right, so we're kind of creating
the types for what we're about to parse.

43
00:02:01.910 --> 00:02:05.037
I think that that's probably a pretty
straightforward way to approach this.

44
00:02:05.037 --> 00:02:06.477
First think of your types.

45
00:02:06.477 --> 00:02:11.537
Then we're gonna just jump back in and
solve this damn problem.

46
00:02:11.537 --> 00:02:13.837
All right, so some people are asking,
[LAUGH] which I did see,

47
00:02:13.837 --> 00:02:15.086
which is actually kind of thing.

48
00:02:15.086 --> 00:02:17.108
When I say isStraight,
What do I mean by that?

49
00:02:17.108 --> 00:02:18.792
Is it horizontal or vertical?

50
00:02:18.792 --> 00:02:20.296
So you actually are correct.

51
00:02:20.296 --> 00:02:24.454
I should probably say something more like,
is Horizontal or Vertical.

52
00:02:24.454 --> 00:02:27.119
It's just there's so many letters there.

53
00:02:27.119 --> 00:02:31.440
So, if everyone just can be okay
with this, we could do that as well.

54
00:02:31.440 --> 00:02:34.409
There you go.
I'm just not gonna have a function that's

55
00:02:34.409 --> 00:02:36.690
30 characters long, okay?

56
00:02:36.690 --> 00:02:40.090
Yes, anything between two points
is Straight, technically.

57
00:02:40.090 --> 00:02:42.396
So it needs to be Horizontal or Vertical.

58
00:02:42.396 --> 00:02:45.088
All right, so let's just program that
up really quickly, should be easy.

59
00:02:45.088 --> 00:02:48.778
A p1.x = = = line.

60
00:02:48.778 --> 00:02:52.359
[LAUGH] Almost hit that,
that double equals there.

61
00:02:52.359 --> 00:02:54.445
That's pretty dangerous.

62
00:02:54.445 --> 00:02:56.748
So let's put a little o sign,
copy that over.

63
00:02:56.748 --> 00:03:00.450
Of course do the old x/y, put that.

64
00:03:00.450 --> 00:03:02.698
Put it in all,
can fit on one line, beautiful.

65
00:03:02.698 --> 00:03:03.546
So there we go.

66
00:03:03.546 --> 00:03:09.355
We have this nice, either,
that actually wasn't beautiful.

67
00:03:09.355 --> 00:03:15.306
So either p1x equals p2x,
or p1y equals p2y.

68
00:03:15.306 --> 00:03:18.700
There we go, wonderful, right?

69
00:03:18.700 --> 00:03:21.002
So now, let's do the next thing.

70
00:03:21.002 --> 00:03:23.047
Let's parse a point, right?

71
00:03:23.047 --> 00:03:25.285
So I want it like this, ParsePoint.

72
00:03:25.285 --> 00:03:30.290
And this thing is simply gonna
take a line that is a string.

73
00:03:30.290 --> 00:03:31.490
Do we wanna call it line?

74
00:03:31.490 --> 00:03:33.816
I mean,
we can technically call it a point.

75
00:03:33.816 --> 00:03:35.126
I think we're real with ourselves.

76
00:03:35.126 --> 00:03:36.400
But then I can't use that term.

77
00:03:36.400 --> 00:03:37.299
So I'm gonna call it p.

78
00:03:37.299 --> 00:03:39.946
So I can call this thing a point, right?

79
00:03:39.946 --> 00:03:41.187
And I can create it.

80
00:03:41.187 --> 00:03:41.700
Actually, I don't need to do that.

81
00:03:41.700 --> 00:03:45.320
But either way, so I'm getting russ mixed
up, I'd have to create some things.

82
00:03:45.320 --> 00:03:48.367
All right, so,
let's take this and let's split.

83
00:03:48.367 --> 00:03:49.802
And I believe it's just this.

84
00:03:49.802 --> 00:03:50.951
So what comes out of this?

85
00:03:50.951 --> 00:03:52.484
Well, two items.

86
00:03:52.484 --> 00:03:56.921
So we should be able to like this,
const (x.y) = this.

87
00:03:56.921 --> 00:04:01.674
And then of course we have
to do this whole fun thing,

88
00:04:01.674 --> 00:04:06.226
where we have to do x is +x,
and y of course is +y.

89
00:04:06.226 --> 00:04:07.082
So there we go.

90
00:04:07.082 --> 00:04:09.278
We've created ourselves a point.

91
00:04:09.278 --> 00:04:13.178
Again, JavaScript, very wonderful
when it comes to string parsing.

92
00:04:13.178 --> 00:04:17.988
But, if this was like more of a production
situation in which input may vary,

93
00:04:17.988 --> 00:04:21.688
this obviously fails and
you get an answer out your system.

94
00:04:21.688 --> 00:04:24.901
So it can be more of a pain because you
don't address the errors upfront, or

95
00:04:24.901 --> 00:04:27.280
at least the errors can
be hidden from you.

96
00:04:27.280 --> 00:04:29.001
So let's copy this exact same thing.

97
00:04:29.001 --> 00:04:31.744
And let's parse the line, right?

98
00:04:31.744 --> 00:04:34.549
So, I'm gonna have a nice
little line string in here.

99
00:04:34.549 --> 00:04:38.247
We're going to simply split it with that,
right,

100
00:04:38.247 --> 00:04:41.430
cuz that's the thing that should be split.

101
00:04:41.430 --> 00:04:44.552
Now we're gonna do a p1 and a p2.

102
00:04:44.552 --> 00:04:49.814
And we'll of course
return p1 as parsePoint.

103
00:04:49.814 --> 00:04:53.727
P1 and parsePoint p2.

104
00:04:53.727 --> 00:04:54.953
So there we go.

105
00:04:54.953 --> 00:04:56.830
How nice is that?

106
00:04:56.830 --> 00:04:58.245
Very simple operations, right?

107
00:04:58.245 --> 00:05:00.999
We kind of created this nice little
thing that goes through and,

108
00:05:00.999 --> 00:05:02.131
does each step of the way.

109
00:05:02.131 --> 00:05:03.094
So we're pretty much done.

110
00:05:03.094 --> 00:05:04.428
So this would be like, or

111
00:05:04.428 --> 00:05:08.636
at least I would consider this a fairly
canonical way to do this in JavaScript.

112
00:05:08.636 --> 00:05:15.417
Cuz now I just can perform all that sweet
functional nature that we all love.

113
00:05:15.417 --> 00:05:16.446
It's just so good.

114
00:05:16.446 --> 00:05:21.847
So we can go getInput, and now I can go

115
00:05:21.847 --> 00:05:29.165
split on the new line
map x as parse line(x).

116
00:05:29.165 --> 00:05:31.480
And so now we have the lines, awesome.

117
00:05:31.480 --> 00:05:33.501
So now we need to do
a filter on this thing.

118
00:05:33.501 --> 00:05:39.314
Filter is, what is it, is screwing me
up with this whole non-straight thing.

119
00:05:39.314 --> 00:05:40.480
There we go.

120
00:05:40.480 --> 00:05:41.713
So now we have this, and

121
00:05:41.713 --> 00:05:45.810
we've even filtered out the ones
that are gonna be a diagonal lines.

122
00:05:45.810 --> 00:05:46.320
So there we go.

123
00:05:47.580 --> 00:05:48.877
And now we have everything, and

124
00:05:48.877 --> 00:05:51.002
that is all we need to do to
be able to get those lines.

125
00:05:51.002 --> 00:05:52.861
Cuz that's all I wanted to do for this.

126
00:05:52.861 --> 00:05:59.327
So let's just take this, and
let's console, log the lines,

127
00:05:59.327 --> 00:06:04.823
and npx ts.node src/p2.ts,
and print that out.

128
00:06:04.823 --> 00:06:05.451
It's gonna run.

129
00:06:05.451 --> 00:06:07.564
And as you can see,
we're gonna get a set of lines.

130
00:06:07.564 --> 00:06:12.208
And y is equal in this case,
y is equal in this case,

131
00:06:12.208 --> 00:06:15.452
x is equal in this case, x, y and y.

132
00:06:15.452 --> 00:06:15.990
There you go.

133
00:06:15.990 --> 00:06:17.990
So you can see, we got them all out.

134
00:06:17.990 --> 00:06:21.330
Pretty straightforward I'd say,
kind of a nice way to do this, right?

135
00:06:21.330 --> 00:06:24.110
We define our functions ahead of time,
then we do this.

136
00:06:24.110 --> 00:06:27.253
I think this is pretty much how
a lot of people would like to

137
00:06:27.253 --> 00:06:29.100
solve it in the JavaScripty way.

