WEBVTT

1
00:00:00.100 --> 00:00:03.376
So let's go on and
let's do some testing, so

2
00:00:03.376 --> 00:00:08.134
standard we'll do the whole config (test),
and do a mod test.

3
00:00:08.134 --> 00:00:10.428
There we go we have our module down here,
and

4
00:00:10.428 --> 00:00:13.210
now we're gonna try to
test out these values.

5
00:00:13.210 --> 00:00:17.470
But again, testing is gonna be
pretty annoying, and why is that?

6
00:00:17.470 --> 00:00:19.857
It's because we're gonna have
to create all these HashMaps.

7
00:00:19.857 --> 00:00:24.172
And as you saw those HashMaps, well you
can guess it'd be a lot of types and

8
00:00:24.172 --> 00:00:26.692
code and putting everything everywhere.

9
00:00:26.692 --> 00:00:30.251
So of course,
what's likely gonna be the solution to it,

10
00:00:30.251 --> 00:00:32.732
to removing all this boilerplate code?

11
00:00:34.850 --> 00:00:38.800
Starts with an M, It's awful in

12
00:00:38.800 --> 00:00:43.852
C++, Macros.

13
00:00:43.852 --> 00:00:46.809
I bet you there's a macro out
there that's fantastic, right?

14
00:00:46.809 --> 00:00:48.709
It's just gonna be beautiful, thank you.

15
00:00:48.709 --> 00:00:52.696
Trust me, there are people here and
they did say things such as macros, but

16
00:00:52.696 --> 00:00:56.321
not limited to macros all right,
yeah, of course macros, right?

17
00:00:56.321 --> 00:01:02.927
So, if you look right here, blah, blah,
blah, blah, blah, Forgot the anniversary?

18
00:01:02.927 --> 00:01:04.410
Testing Time, right?

19
00:01:04.410 --> 00:01:06.731
So here we go,
cargo add collection_macros,

20
00:01:06.731 --> 00:01:10.564
this thing is actually pretty incredible
because it has a lot of useful stuff.

21
00:01:10.564 --> 00:01:15.381
I'm not sure if any of the newer
versions I haven't checked of recent if

22
00:01:15.381 --> 00:01:18.445
they've included any
of this into the core.

23
00:01:18.445 --> 00:01:20.134
But, I've just been using this for

24
00:01:20.134 --> 00:01:23.074
the last little bit
collection_macros is amazing, right?

25
00:01:23.074 --> 00:01:26.134
Because in the core you have something
like here I'm just gonna create this

26
00:01:26.134 --> 00:01:27.945
really quickly, it does have vec, right?

27
00:01:27.945 --> 00:01:32.253
And so that's just shorthand, for creating
a vector I can put in elements into it and

28
00:01:32.253 --> 00:01:33.477
it creates the vector.

29
00:01:33.477 --> 00:01:36.021
But it doesn't have something like map![],
right?

30
00:01:36.021 --> 00:01:39.573
That's just not gonna happen it'd be
sweet if it did, but collection_macros,

31
00:01:39.573 --> 00:01:40.353
does that for us.

32
00:01:40.353 --> 00:01:45.388
So, cargo add collection_macros,
boom it's beautiful,

33
00:01:47.880 --> 00:01:52.536
So, that is beautiful, I love that,

34
00:01:52.536 --> 00:01:57.780
I'm very, very, very happy about that.

35
00:01:57.780 --> 00:02:01.988
I guess the nice part about Rust is cuz
it provides this really rich macro system

36
00:02:01.988 --> 00:02:03.723
which we won't be using today.

37
00:02:03.723 --> 00:02:07.605
It allows you to be able to create
these really incredible pieces, right?

38
00:02:07.605 --> 00:02:11.599
So the fact that we're just about to go
from really handwritten boilerplate code.

39
00:02:11.599 --> 00:02:14.660
To something super simple and
looks like what you would normally write,

40
00:02:14.660 --> 00:02:15.680
it's awesome.

41
00:02:15.680 --> 00:02:19.572
So, we can go check of course the docs for
collections_macro,

42
00:02:19.572 --> 00:02:23.330
there we go collection_macros,
it's gonna be beautiful.

43
00:02:23.330 --> 00:02:26.088
It has these beautiful little hash trees,
so look at that,

44
00:02:26.088 --> 00:02:27.920
look at how wonderful that is, right?

45
00:02:27.920 --> 00:02:30.588
You're pretty much just writing
what you'd already be writing, so

46
00:02:30.588 --> 00:02:33.080
we're gonna be using that you can
even see the rules right here.

47
00:02:33.080 --> 00:02:37.002
So this is effectively the rules they
hide the implementation details here,

48
00:02:37.002 --> 00:02:38.038
Rust just awesome.

49
00:02:38.038 --> 00:02:41.393
Once you get used to creating macros
I'm not very good at of them yet but,

50
00:02:41.393 --> 00:02:43.043
you can do some pretty fancy stuff.

51
00:02:43.043 --> 00:02:45.092
Including parsing HTML and all that,

52
00:02:45.092 --> 00:02:49.810
which almost looks like a RegEx which
almost looks like a Stack Overflow joke.

53
00:02:49.810 --> 00:02:53.378
Which is parsing HTML with RegEx is,
anyways, so there we go.

54
00:02:53.378 --> 00:02:57.819
So let's use this let's use hashmap!,
bang, and create our HashMaps out for

55
00:02:57.819 --> 00:02:58.423
testing.

56
00:02:58.423 --> 00:03:02.487
So I'll do the exact same thing
we did inside of typescript.

57
00:03:02.487 --> 00:03:04.386
If you remember inside of our projector,

58
00:03:04.386 --> 00:03:06.728
we had this beautiful little
test data right here.

59
00:03:06.728 --> 00:03:11.054
We can just copy paste this thing over,
jump into here, didn't copy it.

60
00:03:11.054 --> 00:03:14.658
Actually only did it to the non-system
clipboard, go back here boom,

61
00:03:14.658 --> 00:03:16.260
get in the clipboard.

62
00:03:16.260 --> 00:03:19.202
And now this is obviously
not in Rust language but

63
00:03:19.202 --> 00:03:23.962
let's just kinda take this one by one and
make it into the boot delicious Rust.

64
00:03:23.962 --> 00:03:30.120
So, get_data(), and we need to
return out a HashMap of &lt;PathBuf.

65
00:03:30.120 --> 00:03:36.165
Oop, it wants us to use that there
we go of HashMap keep going,

66
00:03:36.165 --> 00:03:40.366
String, String&gt; holy cow, there we go.

67
00:03:40.366 --> 00:03:43.672
So we got that right so
we have the return type correct.

68
00:03:43.672 --> 00:03:46.060
Probably be pretty nice to
kind of alias that out but,

69
00:03:46.060 --> 00:03:49.330
we're gonna keep on typing it again,
it's good for your health.

70
00:03:49.330 --> 00:03:53.174
So now we just need to simply
return a hashmap!, bang, right?

71
00:03:53.174 --> 00:03:54.427
That's what we saw, and

72
00:03:54.427 --> 00:03:58.200
it should do that hopefully of course
Rust analyzer needs to restart.

73
00:03:58.200 --> 00:04:03.661
So I'm just gonna quit, relaunch vim,
and look at that, we'll just

74
00:04:03.661 --> 00:04:09.420
go back to projector I think I actually
yeah I have it on that there we go.

75
00:04:09.420 --> 00:04:12.088
We're gonna take a second
we're gonna wait for

76
00:04:12.088 --> 00:04:15.968
a moment sometimes Rust analyzer
just needs, some breathing room.

77
00:04:15.968 --> 00:04:16.732
There we go, look at how beautiful
that is, we're already halfway there.

78
00:04:16.732 --> 00:04:21.174
So, what does the doc say?

79
00:04:21.174 --> 00:04:25.963
All right,
it's type fat arrow other type, right?

80
00:04:25.963 --> 00:04:28.852
So we can just go back and forth,
create that pretty easily.

81
00:04:28.852 --> 00:04:30.657
So let's start right here,

82
00:04:30.657 --> 00:04:35.409
we obviously are going to need this
wonderful HashMap let's go like that.

83
00:04:35.409 --> 00:04:40.376
I'm gonna reduce this down a little bit,
and I'm gonna wanna go,

84
00:04:40.376 --> 00:04:44.025
PathBuf:: from, we can do PathBuf:: from.

85
00:04:46.219 --> 00:04:49.919
And do this, awesome,
but what do we do here?

86
00:04:49.919 --> 00:04:53.740
Well we just do it again hashmap!, right?

87
00:04:53.740 --> 00:04:57.196
And so now we can do this one at a time
and it'll create this value out,

88
00:04:57.196 --> 00:04:59.415
one at a time so
this is pretty good, right?

89
00:04:59.415 --> 00:05:03.639
This is about what we'd expect it to be
yeah, about where we expect it to be.

90
00:05:03.639 --> 00:05:08.515
So I can paste that in and do a little
("/foo"), and then do it again, and

91
00:05:08.515 --> 00:05:11.454
put a little ("/foo/bar") fantastic.

92
00:05:11.454 --> 00:05:14.147
But of course what's
the problem right here?

93
00:05:14.147 --> 00:05:17.622
Again, what are we using and
what is it expecting?

94
00:05:17.622 --> 00:05:20.459
Well first, it's saying hey,
there's no such thing as colons here,

95
00:05:20.459 --> 00:05:23.335
can you please get rid of those,
so we'll get rid of the colons.

96
00:05:23.335 --> 00:05:27.121
That's gonna do a lot of replacing,
let's just do this,

97
00:05:27.121 --> 00:05:30.925
let's get rid of the colon and
replace it with a fat arrow.

98
00:05:30.925 --> 00:05:34.489
Awesome, so, let's do it again, and

99
00:05:34.489 --> 00:05:40.430
let's do it again there we go,
so what's the next problem here?

100
00:05:40.430 --> 00:05:43.709
Well, you can see right away it's
complaining a whole bunch to us.

101
00:05:43.709 --> 00:05:46.394
I don't know why it doesn't
wanna open right here,

102
00:05:46.394 --> 00:05:48.172
it doesn't want open right here.

103
00:05:48.172 --> 00:05:52.998
It's expecting HashMap of HashMap,
standard string, right?

104
00:05:52.998 --> 00:05:57.088
Instead it's receiving a HashMap
of HashMap references string,

105
00:05:57.088 --> 00:05:59.873
that's a stir this is problematic, right?

106
00:05:59.873 --> 00:06:01.439
So let's fix that right now, so

107
00:06:01.439 --> 00:06:04.687
one thing we could do is before we
would just call the constructor.

108
00:06:04.687 --> 00:06:07.058
We can technically call into,

109
00:06:07.058 --> 00:06:11.809
this should work in these locations,
I wanna say this works.

110
00:06:11.809 --> 00:06:14.312
Let's see it we're gonna
have to do the whole,

111
00:06:14.312 --> 00:06:17.895
we might have to just call the
constructor, I wanna say that does work.

112
00:06:17.895 --> 00:06:22.120
But I can't quite remember
yeah there we go it does work.

113
00:06:22.120 --> 00:06:25.980
Awesome, we just called into on a bunch
of them instead of doing string:: colon

114
00:06:25.980 --> 00:06:26.619
colon from.

115
00:06:26.619 --> 00:06:29.727
Into just works because
underneath the hood,

116
00:06:29.727 --> 00:06:33.720
it implements that into the from
trait that we did earlier.

117
00:06:33.720 --> 00:06:37.170
How we did from and
then morphed it over fantastic great, so

118
00:06:37.170 --> 00:06:40.352
this is looking really really good,
we have our data.

119
00:06:40.352 --> 00:06:43.792
Now we just need to create our
projector from something simple,

120
00:06:43.792 --> 00:06:47.437
which is just a present working directory,
get_projector().

121
00:06:47.437 --> 00:06:53.334
And so let's return out a -&gt; Projector{,
awesome, and so how are we gonna do this?

122
00:06:53.334 --> 00:06:55.882
Of course it's saying hey I
don't even know what this is,

123
00:06:55.882 --> 00:06:58.859
we need to import it from the super,
and now we can just return this.

124
00:06:58.859 --> 00:07:02.992
So if I remember correctly a projector
which I don't remember correctly,

125
00:07:02.992 --> 00:07:05.828
takes in two items,
a config, and a data, right?

126
00:07:07.638 --> 00:07:09.642
My goodness, so what's the data?

127
00:07:09.642 --> 00:07:11.088
We can just use get_data(), right?

128
00:07:11.088 --> 00:07:14.210
That's more than good enough, correct?

129
00:07:14.210 --> 00:07:19.663
Awesome, And then, the hard part though,

130
00:07:19.663 --> 00:07:22.800
is what's the config,
how are we gonna create the config?

131
00:07:22.800 --> 00:07:25.458
Well we can use config,
we can import it in, and

132
00:07:25.458 --> 00:07:27.924
we're just gonna have
to define it in line.

133
00:07:27.924 --> 00:07:30.530
And what's the thing that I
want to make sure that we did?

134
00:07:30.530 --> 00:07:33.176
We have to provide the present
working directory, correct?

135
00:07:33.176 --> 00:07:37.399
Yeah, yeah, so
let's go present working directory, and

136
00:07:37.399 --> 00:07:40.698
this thing is gonna be a PathBuf,
fantastic.

137
00:07:40.698 --> 00:07:43.723
So present working directory is a PathBuf,
a config,

138
00:07:43.723 --> 00:07:45.708
which needs to be another PathBuf.

139
00:07:45.708 --> 00:07:51.752
We can just simply go PathBuf::,
from empty, doesn't really matter, right?

140
00:07:51.752 --> 00:07:54.105
Cuz these ones aren't used
inside these algorithms.

141
00:07:54.105 --> 00:07:58.998
Of course the operation, which is
the last one, should be an operation, And

142
00:07:58.998 --> 00:08:01.991
let's make it a print of none, right.

143
00:08:01.991 --> 00:08:06.276
Again doesn't matter at that point and
what is this thing?

144
00:08:06.276 --> 00:08:09.110
That returns a hashmap, that is roid.

145
00:08:09.110 --> 00:08:10.348
So let's go like this.

146
00:08:10.348 --> 00:08:12.482
Let's go a data.

147
00:08:17.298 --> 00:08:18.110
I didn't include it.

148
00:08:18.110 --> 00:08:25.700
No wonder, grab the data object, grab
the projector and go get data, awesome.

149
00:08:25.700 --> 00:08:27.450
So now we have that thing filled out.

150
00:08:27.450 --> 00:08:29.650
It's a lot like our previous test.

151
00:08:29.650 --> 00:08:31.970
Our previous test did
the exact same thing.

152
00:08:31.970 --> 00:08:34.460
It just grabbed out all this information,
bing bing bing.

153
00:08:34.460 --> 00:08:37.340
Now we should be able to just
simply create a couple quick tests.

154
00:08:37.340 --> 00:08:42.225
Let's create the quick test of course
of get_value and add in the proc macro,

155
00:08:42.225 --> 00:08:43.570
correct.

156
00:08:43.570 --> 00:08:46.010
And now let's create the projector.

157
00:08:46.010 --> 00:08:53.061
And then let's just validate,
we can get bar three and fem is great.

158
00:08:53.061 --> 00:08:58.261
All right, so let's go .const,
let projector=get_projector.

159
00:08:58.261 --> 00:09:04.900
Our present working directory will
be PathBuf from foo bar, awesome.

160
00:09:04.900 --> 00:09:11.450
And so now we can just go assert
equals bang projector get value.

161
00:09:11.450 --> 00:09:12.880
Why isn't it doing any autocomplete?

162
00:09:12.880 --> 00:09:15.590
Always worries me that I got some
sort of error that I'm not realizing.

163
00:09:15.590 --> 00:09:19.087
Let's do a get value and
what value should we get?

164
00:09:19.087 --> 00:09:23.278
Well if you remember, my goodness,
why is it not letting me jump?

165
00:09:23.278 --> 00:09:24.914
Remember how we did this?

166
00:09:24.914 --> 00:09:28.290
We did a capital S string,
we don't need to do that.

167
00:09:28.290 --> 00:09:31.735
Because we don't need to hand it that
official thing cuz we don't actually do

168
00:09:31.735 --> 00:09:34.100
anything other than
using a reference to it.

169
00:09:34.100 --> 00:09:37.140
So to make it a little bit easier on our
test, just like I was talking about,

170
00:09:37.140 --> 00:09:40.540
always good to remember these things,
make it a reference to a string.

171
00:09:40.540 --> 00:09:43.687
Beautiful, and
then we can drop this reference.

172
00:09:43.687 --> 00:09:46.740
So now our testing is getting
a little bit easier and

173
00:09:46.740 --> 00:09:51.213
we never needed it to be its own capital
S string anyways, it's wasteful,

174
00:09:51.213 --> 00:09:54.481
likely will cause an extra clone so
let's not do that.

175
00:09:54.481 --> 00:09:57.165
So now let's get a value,
we can just go foo.

176
00:09:57.165 --> 00:10:00.418
Now that does make it a little bit easy?

177
00:10:00.418 --> 00:10:01.018
So what are we comparing it to?

178
00:10:01.018 --> 00:10:03.552
Or remember, what comes out of get value?

179
00:10:03.552 --> 00:10:05.279
An option of string, correct?

180
00:10:05.279 --> 00:10:10.207
So we're gonna have to go like this,
some and then we can go string from and

181
00:10:10.207 --> 00:10:11.410
we'll go bar3.

182
00:10:13.000 --> 00:10:15.956
I think that's all correct, awesome.

183
00:10:15.956 --> 00:10:17.931
Well it's not all all correct apparently.

184
00:10:17.931 --> 00:10:22.198
Let's see, mismatched types,
expected enum reference to string,

185
00:10:22.198 --> 00:10:23.727
what we got out was that.

186
00:10:23.727 --> 00:10:26.715
All right, well, we'll get,
[SOUND] there we go.

187
00:10:26.715 --> 00:10:30.693
Now that we have that, fantastic,
awesome, we can use this and

188
00:10:30.693 --> 00:10:34.460
let's just test,
make sure everything's working.

189
00:10:34.460 --> 00:10:37.280
Cargo test.

190
00:10:37.280 --> 00:10:38.974
If everything's great,

191
00:10:38.974 --> 00:10:43.680
it might take a moment to compile,
my goodness, we got issues.

192
00:10:43.680 --> 00:10:47.439
Well, first off,
probably we have a bad include.

193
00:10:47.439 --> 00:10:48.008
We should probably get
rid of that include.

194
00:10:48.008 --> 00:10:49.410
We're not even using that include.

195
00:10:49.410 --> 00:10:50.940
I must have accidentally included it.

196
00:10:50.940 --> 00:10:54.940
And second off, it's just silly
of me to have that in there.

197
00:10:54.940 --> 00:10:57.860
So it's a knightly item or
an unstable item.

198
00:10:59.530 --> 00:11:02.280
There we go,
jump back in here, cargo test.

199
00:11:02.280 --> 00:11:03.540
So what happened here?

200
00:11:03.540 --> 00:11:06.990
We obviously have something went wrong.

201
00:11:06.990 --> 00:11:09.029
And we probably will see
this inside of our analyzer.

202
00:11:09.029 --> 00:11:10.139
My goodness.

203
00:11:10.139 --> 00:11:11.864
My goodness, so many things are happening.

204
00:11:11.864 --> 00:11:13.232
Don't worry, don't panic,

205
00:11:13.232 --> 00:11:16.026
it's actually usually not as
hard as you think it's gonna be.

206
00:11:16.026 --> 00:11:18.535
So let's just start at the top line 29.

207
00:11:18.535 --> 00:11:22.890
We forgot to make it immutable or mutable.

208
00:11:22.890 --> 00:11:27.196
So, luckily all the errors are right
in line now so let's just like that,

209
00:11:27.196 --> 00:11:28.450
let's make it mute.

210
00:11:28.450 --> 00:11:31.210
The next thing, consider changing
this into mutable, awesome.

211
00:11:31.210 --> 00:11:33.750
That's not too bad, anything else?

212
00:11:33.750 --> 00:11:36.260
I don't know, look at that,
that wasn't too bad.

213
00:11:36.260 --> 00:11:37.750
No, what happened here?

214
00:11:37.750 --> 00:11:41.896
Cannot borrow projector as mutable.

215
00:11:41.896 --> 00:11:43.989
What happened here?
Does anyone know what happened here?

216
00:11:52.980 --> 00:11:56.490
Look at how we're passing self in,
we're passing a reference to self.

217
00:11:56.490 --> 00:12:00.309
Can we edit self if it's just a reference?

218
00:12:00.309 --> 00:12:03.312
No, so it's a mutable self, correct?

219
00:12:03.312 --> 00:12:10.020
This makes much more sense but
now we have a new problem.

220
00:12:10.020 --> 00:12:13.155
So this is like the classic
Rust problems that you'll see,

221
00:12:13.155 --> 00:12:16.970
makes everybody super kind of upset,
which is this right here.

222
00:12:16.970 --> 00:12:18.670
Okay, so what happened right here?

223
00:12:18.670 --> 00:12:22.450
Well, when you use the entry API you're
actually creating an entry into the item.

224
00:12:22.450 --> 00:12:27.410
And so, it's gonna need this value
since our HashMap is of type path buff,

225
00:12:27.410 --> 00:12:30.180
this thing will move it out of our config.

226
00:12:30.180 --> 00:12:32.450
We can't move that value
out of our config.

227
00:12:32.450 --> 00:12:35.601
So for the sake of this course and
now reworking all of our Structs,

228
00:12:35.601 --> 00:12:38.200
we're simply gonna do the forbidden clone.

229
00:12:38.200 --> 00:12:39.090
Look at that.

230
00:12:39.090 --> 00:12:43.460
We just cloned it out, [LAUGH] made
a copy, I know and there we go.

231
00:12:43.460 --> 00:12:48.212
So we are now consuming that or instead
of consuming it or using it or moving it,

232
00:12:48.212 --> 00:12:51.172
we are now just creating a copy to it,
all right.

233
00:12:51.172 --> 00:12:55.408
So exact same problem here, of course,
what's wrong with remove value?

234
00:12:58.810 --> 00:13:00.640
Exactly, we don't have a mutable self.

235
00:13:02.070 --> 00:13:06.490
So let's go here and let's go clone again.

236
00:13:06.490 --> 00:13:11.500
I know, we're just trying to
keep it nice and easy here.

237
00:13:11.500 --> 00:13:15.960
So we now have another borrow
checker problem, holy cow.

238
00:13:15.960 --> 00:13:17.540
Why is Rust so noisy?

239
00:13:17.540 --> 00:13:23.840
Well, this one's pretty easy, it's saying,
hey value moved here and value used here.

240
00:13:23.840 --> 00:13:26.280
So we're using something
that's already been moved.

241
00:13:26.280 --> 00:13:27.750
We moved it back up here.

242
00:13:27.750 --> 00:13:30.650
So we don't technically
need to pass the thing in.

243
00:13:30.650 --> 00:13:33.200
We can just pass a reference to the thing,
correct?

244
00:13:33.200 --> 00:13:35.500
Yeah, let's just pass
a reference to the thing.

245
00:13:35.500 --> 00:13:40.578
Why are we giving it a string when
we can just pass a string reference?

246
00:13:40.578 --> 00:13:41.963
Or path reference.

247
00:13:41.963 --> 00:13:42.728
Awesome, so

248
00:13:42.728 --> 00:13:47.430
I think that has effectively taken care
of all of them if I'm not mistaken.

249
00:13:47.430 --> 00:13:51.230
And now we have an official fail,
which is awesome.

250
00:13:51.230 --> 00:13:52.130
We've finally done it.

251
00:13:52.130 --> 00:13:53.480
We finally fail the test.

252
00:13:53.480 --> 00:13:55.860
I believe Mark will now kick me out,
but he's out of the room.

253
00:13:55.860 --> 00:13:58.180
So let's fix this before he gets back.

254
00:13:58.180 --> 00:14:01.023
And we should be able to
[SOUND] get this done.

255
00:14:01.023 --> 00:14:02.040
So let's go down to our tests.

256
00:14:02.040 --> 00:14:04.137
What happened here?

257
00:14:04.137 --> 00:14:07.082
So we have a path foo bar,
should be three.

258
00:14:07.082 --> 00:14:12.057
What is our present working directory?

259
00:14:12.057 --> 00:14:13.340
Our present working directory is that.

260
00:14:13.340 --> 00:14:14.546
So you know what that means?

261
00:14:14.546 --> 00:14:15.660
Our get value's wrong.

262
00:14:15.660 --> 00:14:18.570
Now, what did it get,
did it get foo bar one?

263
00:14:18.570 --> 00:14:20.845
And where is foo bar1?

264
00:14:20.845 --> 00:14:23.280
It's at the top, you know what that means?

265
00:14:23.280 --> 00:14:23.820
Know 100% what that means?

266
00:14:23.820 --> 00:14:26.182
That means we're not
using the keyword break.

267
00:14:26.182 --> 00:14:28.671
Guarantee you we're not
using the keyword break.

268
00:14:28.671 --> 00:14:31.090
Right here, forgot the keyword break.

269
00:14:31.090 --> 00:14:32.456
It's that simple.

270
00:14:32.456 --> 00:14:35.054
We're not breaking out of the while
loop once we find the value, our bad.

271
00:14:38.082 --> 00:14:39.830
Now we got it, now we're happy.

272
00:14:39.830 --> 00:14:41.526
I think everyone's relieved.

273
00:14:41.526 --> 00:14:45.329
[SOUND] No one want a bar one,
no one's liked bar one.

274
00:14:45.329 --> 00:14:49.050
My grandmother used to talk about bar one,
never liked them.

275
00:14:49.050 --> 00:14:52.553
There we go, get value,
you can see it's okay, it passed.

276
00:14:52.553 --> 00:14:57.108
Let's add in the fall through case that
we did talk about earlier which of

277
00:14:57.108 --> 00:14:58.760
course is going to be fem.

278
00:14:58.760 --> 00:15:01.270
We should be able to see is great,
correct?

279
00:15:02.770 --> 00:15:05.230
Correct, yeah, yes, say yes.

280
00:15:05.230 --> 00:15:05.750
Thank you.

281
00:15:06.790 --> 00:15:09.540
By the way,
the slouch right now is worrying me.

282
00:15:09.540 --> 00:15:13.588
I like a nice good
ergonomics sitting position.

283
00:15:13.588 --> 00:15:15.370
[LAUGH] There we go.

284
00:15:15.370 --> 00:15:16.540
It's still passing.

285
00:15:16.540 --> 00:15:17.670
This is fantastic.

286
00:15:17.670 --> 00:15:18.580
Yes, that did just happen.

287
00:15:18.580 --> 00:15:22.537
I did tell someone from the audience
here that they need to sit up.

288
00:15:22.537 --> 00:15:25.006
I'm sorry, I shouldn't have said that
to you, you can sit how you want to.

289
00:15:25.006 --> 00:15:31.130
Perfect, so definitely first try,
over here no problems, no errors.

290
00:15:31.130 --> 00:15:34.240
First tries all the way through for sure.

291
00:15:34.240 --> 00:15:36.030
Let's do a little set value.

292
00:15:36.030 --> 00:15:38.940
And let's do the exact same test.

293
00:15:38.940 --> 00:15:40.790
But let's do a set value on it.

294
00:15:40.790 --> 00:15:45.327
So let's go projector.set value and

295
00:15:45.327 --> 00:15:53.270
let's set [INAUDIBLE] foo and
we could do technically call into

296
00:15:53.270 --> 00:15:56.940
I'm just trying to make it very explicit,
so you know what's happening here.

297
00:15:56.940 --> 00:15:59.483
Let's go bar 4,
just like our previous test, right?

298
00:15:59.483 --> 00:16:01.780
All right fantastic,
but what happened here?

299
00:16:01.780 --> 00:16:06.510
Borrow checker again, very angry,
what happened, was not mutable.

300
00:16:06.510 --> 00:16:08.115
Remember, why is that?

301
00:16:08.115 --> 00:16:11.160
Cuz we require a mutable self reference.

302
00:16:11.160 --> 00:16:13.461
So therefore when we call this,

303
00:16:13.461 --> 00:16:17.820
it has to be initialized as
being able to be changed, right?

304
00:16:17.820 --> 00:16:21.230
Rust really makes you kind of
identify when those things happen.

305
00:16:21.230 --> 00:16:24.634
So I personally think it's actually
a pretty good mantra to have

306
00:16:24.634 --> 00:16:27.030
as part of the programming language.

307
00:16:27.030 --> 00:16:31.150
And then sense that it just forces
you not to screw easy things up.

308
00:16:31.150 --> 00:16:32.850
So there we go, do that.

309
00:16:33.920 --> 00:16:38.042
And of course we could also
do a nice fem here and

310
00:16:38.042 --> 00:16:42.379
we'll set both values just
one after another and

311
00:16:42.379 --> 00:16:46.100
we'll go is better then great, yeah.

312
00:16:47.590 --> 00:16:51.230
And do that put in one of those,
and bar 4, awesome.

313
00:16:52.450 --> 00:16:58.015
Let's test this, if we've done everything
correct, which we did, by the way.

314
00:16:58.015 --> 00:17:00.760
Awesome set value, again a first try.

315
00:17:02.000 --> 00:17:04.780
All right, so let's go remove value.

316
00:17:04.780 --> 00:17:08.499
And let's do the exact same thing, let's
just remove foo and it should work out and

317
00:17:08.499 --> 00:17:11.157
we'll also remove fem which does
not exist at this level and

318
00:17:11.157 --> 00:17:12.397
fem should still be there.

319
00:17:12.397 --> 00:17:16.060
So luckily frontend masters is gonna
make it longer than this remove.

320
00:17:16.060 --> 00:17:19.937
So let's delete, let's delete,
jump back here and

321
00:17:19.937 --> 00:17:23.737
let's replace set with remove,
enter, awesome.

322
00:17:23.737 --> 00:17:25.550
Let's see, my goodness, what happened?

323
00:17:25.550 --> 00:17:29.026
Remember, we were smart about this api or
smarter,

324
00:17:29.026 --> 00:17:31.800
we can just simply pass in these, right?

325
00:17:31.800 --> 00:17:36.426
Isn't it nice when you think
about your API a little bit more?

326
00:17:36.426 --> 00:17:38.940
Doesn't that just feel way better
to be able to do that, yeah.

327
00:17:38.940 --> 00:17:40.020
So take some time.

328
00:17:40.020 --> 00:17:42.949
You can avoid cloning,
avoid creating new objects, and

329
00:17:42.949 --> 00:17:45.670
it looks beautiful like that and
so there we go.

330
00:17:45.670 --> 00:17:49.160
So if we get foo, we should see bar two.

331
00:17:49.160 --> 00:17:51.751
And if we get femme watched,
it should still be there and

332
00:17:51.751 --> 00:17:53.970
it shouldn't be the default
value of is great.

333
00:17:55.930 --> 00:17:59.970
And so we test this,
my goodness, we've done it all.

334
00:17:59.970 --> 00:18:03.150
We are geniuses, okay,
we've done everything.

335
00:18:03.150 --> 00:18:08.735
It's finished, I would be high fiving
you guys if you weren't so far away.

336
00:18:08.735 --> 00:18:13.795
All right, I wanted everyone to stew and
just feel just frustrated by

337
00:18:13.795 --> 00:18:18.683
the fact that we are cloning out
this present working directory and

338
00:18:18.683 --> 00:18:22.360
it should just bother you like why clone,
right?

339
00:18:22.360 --> 00:18:23.890
We shouldn't have to do that.

340
00:18:23.890 --> 00:18:25.525
We're gonna do a quick
little fix on there.

341
00:18:25.525 --> 00:18:26.721
So what can we do differently?

342
00:18:26.721 --> 00:18:28.262
What does the entry API do?

343
00:18:28.262 --> 00:18:29.980
Actually creates the entry, right?

344
00:18:29.980 --> 00:18:33.896
So it needs this thing to be the same type
as the HashMap, which means we can't be

345
00:18:33.896 --> 00:18:37.150
giving it a reference we need
to give it the thing itself.

346
00:18:37.150 --> 00:18:40.130
So what we can do is use get.

347
00:18:40.130 --> 00:18:42.253
Now get takes a reference to the type.

348
00:18:42.253 --> 00:18:45.130
All right, so
are the references of the key type.

349
00:18:45.130 --> 00:18:47.820
So, I can paste this out do that.

350
00:18:47.820 --> 00:18:49.591
And now what do I get out of it get?

351
00:18:49.591 --> 00:18:51.410
It, of course is an option.

352
00:18:51.410 --> 00:18:56.258
What have I been telling you to want
to use a ton of to use .map because

353
00:18:56.258 --> 00:19:00.683
what comes into the .map,
of course, a reference to it, but

354
00:19:00.683 --> 00:19:03.740
we can't just have a reference to it.

355
00:19:03.740 --> 00:19:06.290
We need a mutable reference to this.

356
00:19:06.290 --> 00:19:07.728
So of course we do a get_mut.

357
00:19:07.728 --> 00:19:09.330
What do we have here?

358
00:19:09.330 --> 00:19:11.890
We have a mutable
reference to the HashMap.

359
00:19:11.890 --> 00:19:13.809
That means if the thing doesn't exist,

360
00:19:13.809 --> 00:19:17.240
we don't need to create it cuz
there's nothing to be removed.

361
00:19:17.240 --> 00:19:21.080
But if it does exist,
let's just remove it.

362
00:19:21.080 --> 00:19:24.944
So as you can see right here,
we just have ourselves a very, very,

363
00:19:24.944 --> 00:19:27.230
very beautiful thing right here.

364
00:19:27.230 --> 00:19:30.700
We've just created it without
needing to clone that out.

365
00:19:30.700 --> 00:19:33.737
I think that's pretty dang fantastic,
awesome,

366
00:19:33.737 --> 00:19:36.501
we could do something
different with the set.

367
00:19:36.501 --> 00:19:41.215
Right now if I were to get rid of that,
I would do have to do like a contains.

368
00:19:41.215 --> 00:19:42.812
I don't know the API yet.

369
00:19:42.812 --> 00:19:45.930
How to do that without that,
being able to have the or defaults.

370
00:19:45.930 --> 00:19:48.841
So I'd have to do a contains,
if it doesn't contain any of the created,

371
00:19:48.841 --> 00:19:51.950
then I'd have to consume or
clone out my present working directory.

372
00:19:51.950 --> 00:19:55.350
But if it doesn't exist, you do have to
clone something out because it needs its

373
00:19:55.350 --> 00:19:57.950
own version or
I could solve it at a higher level.

374
00:19:57.950 --> 00:20:01.924
And that's when the things could get more
tricky with some lifetimes where I have to

375
00:20:01.924 --> 00:20:04.040
create a struct that has references.

376
00:20:04.040 --> 00:20:06.990
And if a struct has references,
you start getting into that

