WEBVTT

1
00:00:00.170 --> 00:00:01.180
So let's get back to here.

2
00:00:01.180 --> 00:00:04.270
So how do we specify the type
error from a from string?

3
00:00:04.270 --> 00:00:07.230
It makes sense also that there
is a potential for error.

4
00:00:07.230 --> 00:00:10.690
Cuz if you parse something from a string,
what if the string does not match?

5
00:00:10.690 --> 00:00:12.930
Of course,
there has to be some sort of error.

6
00:00:12.930 --> 00:00:17.710
And so the other option would be to use
an option return nothing or something.

7
00:00:17.710 --> 00:00:22.103
But I think an error is probably more
appropriate cuz you can give some context

8
00:00:22.103 --> 00:00:24.749
around it as well,
makes sense at least to me.

9
00:00:24.749 --> 00:00:26.736
So we'll go like this, anyhow::Error.

10
00:00:26.736 --> 00:00:31.109
So we're referring to this thing right off
the package as this is the error type,

11
00:00:31.109 --> 00:00:35.560
the anyhow::Error, which means we
can also use the anyhow::Result.

12
00:00:35.560 --> 00:00:38.177
So what I'm gonna do is
I'm gonna go use anyhow.

13
00:00:38.177 --> 00:00:39.275
For whatever reason,

14
00:00:39.275 --> 00:00:43.204
it always has a really hard time dealing
autocompletion and just grabbing it from

15
00:00:43.204 --> 00:00:46.970
the LSP using result cuz there's
already a result object globally.

16
00:00:46.970 --> 00:00:52.760
So I'll just go grab the anyhow::Result,
jump down here, and simply return that.

17
00:00:52.760 --> 00:00:53.440
There we go.

18
00:00:53.440 --> 00:00:56.834
So now we're using the anyhow::Result,
and just in case if you don't believe me,

19
00:00:56.834 --> 00:00:58.660
you can always jump to definition.

20
00:00:58.660 --> 00:00:59.570
And where are we at?

21
00:00:59.570 --> 00:01:01.240
We are actually in the Rust lib.

22
00:01:01.240 --> 00:01:03.590
That is sad,
that's not what I wanted to see.

23
00:01:03.590 --> 00:01:04.900
But that's okay.

24
00:01:04.900 --> 00:01:07.800
It's probably still using the correct
thing anyhow, just decorates it, and so

25
00:01:07.800 --> 00:01:09.360
probably it still works out just fine.

26
00:01:09.360 --> 00:01:11.650
All right, anyways, so there we go.

27
00:01:11.650 --> 00:01:13.580
So now we have a from string.

28
00:01:13.580 --> 00:01:16.466
It's gonna give us a reference
to a string, meaning,

29
00:01:16.466 --> 00:01:20.630
it doesn't consume the string, it just
simply needs a reference to a string.

30
00:01:20.630 --> 00:01:22.598
And then I need to produce
out a result of self.

31
00:01:22.598 --> 00:01:25.507
Self is just a nice way of saying,
what is the info on?

32
00:01:25.507 --> 00:01:26.810
So it's actually point.

33
00:01:26.810 --> 00:01:30.100
People use this a lot as a way
to do that because that way,

34
00:01:30.100 --> 00:01:33.962
if you make slight changes,
self still just universally works.

35
00:01:33.962 --> 00:01:37.617
All right, so once I take away the todo,
it's gonna say, hey,

36
00:01:37.617 --> 00:01:40.880
you're returning nothing,
but I expect a result.

37
00:01:40.880 --> 00:01:41.630
So let's start doing that.

38
00:01:41.630 --> 00:01:47.430
So if you remember from last time,
we did have a and b, right?

39
00:01:47.430 --> 00:01:49.920
So we could split once on this string.

40
00:01:51.190 --> 00:01:52.780
And there we go.
So we have this once.

41
00:01:52.780 --> 00:01:57.616
That's how it's split, but this thing
doesn't return an error, unfortunately,

42
00:01:57.616 --> 00:01:59.290
it returns an option.

43
00:01:59.290 --> 00:02:01.420
So we have to handle the option case.

44
00:02:01.420 --> 00:02:03.840
If there is nothing, what should we do?

45
00:02:03.840 --> 00:02:07.147
To me, kinda seems like we should probably
almost return an error like, hey,

46
00:02:07.147 --> 00:02:08.070
this is a bad line.

47
00:02:08.070 --> 00:02:09.410
We should have handled this better.

48
00:02:09.410 --> 00:02:10.770
So let's just do that now.

49
00:02:10.770 --> 00:02:15.207
So I'm gonna go like this, let result,

50
00:02:15.207 --> 00:02:20.306
I can just do that and
go if result.is_none.

51
00:02:20.306 --> 00:02:27.689
I can just do something as
simple as anyhow!("expected

52
00:02:27.689 --> 00:02:32.820
a point to contain a comma"), right?

53
00:02:34.350 --> 00:02:38.300
Beautiful, and of course,
it wants Err because it is a result.

54
00:02:38.300 --> 00:02:40.731
And we have to import this anyhow macro.

55
00:02:40.731 --> 00:02:44.900
So you should be able to just simply use,
I can use a code action for it.

56
00:02:44.900 --> 00:02:46.241
So it's located right here.

57
00:02:46.241 --> 00:02:49.339
So you can just change your import
statement to look like this.

58
00:02:49.339 --> 00:02:52.097
If your LSP was behaving,
which mine is not,

59
00:02:52.097 --> 00:02:54.935
it should have just auto done that all for
you.

60
00:02:54.935 --> 00:02:58.064
A year of them, I'm telling you,
it's gonna work out.

61
00:02:58.064 --> 00:03:00.472
So there we go, we've handled this case.

62
00:03:00.472 --> 00:03:04.330
We can now safely unwrap it cuz we
do know that it does exist here.

63
00:03:04.330 --> 00:03:07.498
We could also have done an if
statement right here and

64
00:03:07.498 --> 00:03:10.350
just pulled it out via pattern matching.

65
00:03:10.350 --> 00:03:12.310
We could have done a couple
different approaches.

66
00:03:12.310 --> 00:03:13.140
Let's just do this one.

67
00:03:13.140 --> 00:03:14.780
It's the simplest form of it.

68
00:03:14.780 --> 00:03:16.989
So I'll go (x, y) = result.unwrap.

69
00:03:16.989 --> 00:03:21.305
The nice part about doing this,
though, is that if we used expect,

70
00:03:21.305 --> 00:03:25.187
it would have hard crashed our
program if there's an error.

71
00:03:25.187 --> 00:03:30.256
Instead, we're bubbling up some error with
a little bit of context on it, should

72
00:03:30.256 --> 00:03:35.264
be kinda nice, just kinda get us a little
bit more familiar with error handling.

73
00:03:35.264 --> 00:03:35.859
There we go.

74
00:03:35.859 --> 00:03:40.708
So we have these nice x's and y's,
which of course, are references to string

75
00:03:40.708 --> 00:03:45.205
because we just split once on a reference
to a string, so what comes out?

76
00:03:45.205 --> 00:03:46.147
Reference to a string.

77
00:03:46.147 --> 00:03:48.391
It also makes sense if you
had a capitalized string,

78
00:03:48.391 --> 00:03:51.880
it would still be a reference because
it doesn't need to create copies.

79
00:03:51.880 --> 00:03:55.040
It just needs to refer to these
two little points in time.

80
00:03:55.040 --> 00:03:57.660
And so you can kind of guess
what a reference to a string is.

81
00:03:57.660 --> 00:04:01.075
It's just a point in the memory and
the length, right?

82
00:04:01.075 --> 00:04:04.380
It just can tell you how much there is.

83
00:04:04.380 --> 00:04:05.820
And so there we go.

84
00:04:05.820 --> 00:04:10.312
So now that we have that, we now take x
and we need to turn it into a number.

85
00:04:10.312 --> 00:04:13.084
So we can do that pretty easily by doing,
well, let's do i32.

86
00:04:13.084 --> 00:04:15.080
Is that what we did up here?

87
00:04:15.080 --> 00:04:16.709
Yeah, we did i32, it's awesome.

88
00:04:16.709 --> 00:04:21.160
We can do i32 and we can actually do
a str::parse, and we can provide x.

89
00:04:21.160 --> 00:04:24.393
Now, remember,
since we have the anyhow library,

90
00:04:24.393 --> 00:04:28.410
we should be able to do .context,
and it's not showing up.

91
00:04:28.410 --> 00:04:30.730
Isn't that what this thing returns?

92
00:04:30.730 --> 00:04:36.380
Yeah, it should return, okay,
we can at least do that.

93
00:04:36.380 --> 00:04:39.504
I was hoping to put a little context on
it, but I mean, do we really need context?

94
00:04:39.504 --> 00:04:40.620
Do we really need context?

95
00:04:40.620 --> 00:04:41.706
It's probably just not showing up.

96
00:04:41.706 --> 00:04:43.216
I've been having a little
bit of problems here.

97
00:04:43.216 --> 00:04:48.366
I probably just add in the word context,
all right?

98
00:04:48.366 --> 00:04:52.153
And now I should be able to go context.

99
00:04:52.153 --> 00:04:56.440
Something tells me that
my LSP is struggling.

100
00:04:56.440 --> 00:04:57.307
We'll just continue on this later.

101
00:04:57.307 --> 00:04:58.250
There we go.

102
00:04:58.250 --> 00:05:02.880
And now we can return a Ok,
a point, and of course, x and y.

103
00:05:02.880 --> 00:05:07.024
Remember, we do not have to specify them
in the proper order because Rust will

104
00:05:07.024 --> 00:05:10.167
break it down into variables
matching named properties.

105
00:05:10.167 --> 00:05:11.100
So there we go.

106
00:05:11.100 --> 00:05:12.519
We have now done this.

107
00:05:12.519 --> 00:05:14.870
We have now created a from string for
point.

108
00:05:14.870 --> 00:05:17.437
Here's the error it emits,
here's how you do it.

109
00:05:17.437 --> 00:05:21.025
Let's just do that again, but
let's do it for line, right?

110
00:05:21.025 --> 00:05:23.090
So now notice that I just changed line and

111
00:05:23.090 --> 00:05:25.960
I don't have to change
anything about this statement.

112
00:05:25.960 --> 00:05:27.201
We use that self, so

113
00:05:27.201 --> 00:05:31.364
this is another reason why self can
kinda be useful as you do things.

114
00:05:31.364 --> 00:05:34.346
Self just makes a little bit
easier to work with this.

115
00:05:34.346 --> 00:05:35.520
There we go.

116
00:05:35.520 --> 00:05:38.980
So now we're just gonna
simply split once on this.

117
00:05:38.980 --> 00:05:42.145
Now remember,
this will give us out two points.

118
00:05:42.145 --> 00:05:47.285
We can do the exact same thing right here,
expected a line to contain this, why not?

119
00:05:47.285 --> 00:05:48.630
This is easy, right?

120
00:05:48.630 --> 00:05:50.441
We'll unwrap it again.

121
00:05:50.441 --> 00:05:52.291
We'll just do all the same things.

122
00:05:52.291 --> 00:05:54.436
And now we can just string one.

123
00:05:54.436 --> 00:05:57.768
We can just parse this thing
out as a p1 and as a point.

124
00:05:57.768 --> 00:05:59.728
And look at that, it works.

125
00:05:59.728 --> 00:06:02.633
We were able to just
simply call str::parse.

126
00:06:02.633 --> 00:06:05.760
We gave our variable a type and
it knew it.

127
00:06:05.760 --> 00:06:08.453
And Rust is really good
at understanding types.

128
00:06:08.453 --> 00:06:11.609
So we can even not give it a type,
like that.

129
00:06:11.609 --> 00:06:17.575
Increment this, increment this, and
then do a simple line and go p1, p2.

130
00:06:17.575 --> 00:06:23.751
And it's going to be able to infer
if lines p1 is of type point.

131
00:06:23.751 --> 00:06:30.199
So therefore, when I call str::parse,
it's gonna need to return out a point,

132
00:06:30.199 --> 00:06:34.420
and the point's
implementation is right here.

133
00:06:34.420 --> 00:06:37.300
So it actually does a lot
of inference pretty well.

134
00:06:37.300 --> 00:06:39.190
I actually really like this part.

135
00:06:39.190 --> 00:06:43.420
It's because, especially if you come
from a C++ background, there's just so

136
00:06:43.420 --> 00:06:47.770
much type specification constantly,
and then to get around, they use auto.

137
00:06:47.770 --> 00:06:51.676
But auto just doesn't quite give you
that same good amount of information,

138
00:06:51.676 --> 00:06:53.579
whereas this, I can see right away.

139
00:06:53.579 --> 00:06:59.007
It correctly identified exactly what that
type was because of this return statement.

140
00:06:59.007 --> 00:07:03.821
Now if I didn't have that return
statement, and instead, it did, say,

141
00:07:03.821 --> 00:07:09.426
return Ok(Line) and I'm not sure if I can
do that, p1 0, 0, can I just use that?

142
00:07:09.426 --> 00:07:10.460
No, I have to do that.

143
00:07:10.460 --> 00:07:14.210
Okay, we could show you, but whatever,
it's too much work at this point.

144
00:07:14.210 --> 00:07:15.690
Let's just move forward.

145
00:07:15.690 --> 00:07:17.988
If it doesn't have the type,
if it cannot infer,

146
00:07:17.988 --> 00:07:20.198
then it's gonna give you
that nice hard error.

147
00:07:20.198 --> 00:07:23.022
But if it does have that information,
it will gladly do it for you.

148
00:07:23.022 --> 00:07:24.961
So there we go, we have everything.

149
00:07:24.961 --> 00:07:28.410
I think we need to be able to solve
this problem, except for one thing.

150
00:07:28.410 --> 00:07:31.629
How do we know if the line is
horizontal slash vertical?

151
00:07:31.629 --> 00:07:33.085
So we can do one of two methods.

152
00:07:33.085 --> 00:07:36.709
We can either have a function that is
kinda free floating like we did in

153
00:07:36.709 --> 00:07:41.149
TypeScript is, everyone's favorite word,
horv, is horizontal or vertical, or

154
00:07:41.149 --> 00:07:42.666
we can attach it to the line.

155
00:07:42.666 --> 00:07:47.135
Which one, since we did it the other way,
and you guys are unfamiliar with Rust,

156
00:07:47.135 --> 00:07:48.801
let's attach it to the line.

157
00:07:48.801 --> 00:07:52.488
Even though it probably is not as
convenient as simply just having it as

158
00:07:52.488 --> 00:07:56.048
a free floating function cuz then I
can just pass this into filter and

159
00:07:56.048 --> 00:07:57.499
it'll do the right thing.

160
00:07:57.499 --> 00:07:59.691
So instead,
let's just attach it to the line.

161
00:07:59.691 --> 00:08:00.591
So I'm gonna go impl.

162
00:08:00.591 --> 00:08:02.466
Remember, impl is how we say, hey,

163
00:08:02.466 --> 00:08:05.810
these are implementations
that exist on this struct.

164
00:08:05.810 --> 00:08:09.384
impl Line, and now I can go fn is_horv.

165
00:08:09.384 --> 00:08:12.687
And of course, the only thing it takes

166
00:08:12.687 --> 00:08:17.520
a reference to is a non-mutable
version of itself.

167
00:08:17.520 --> 00:08:22.284
So if you're wondering what this
means right here, this just means,

168
00:08:22.284 --> 00:08:26.417
hey, I need to be on an instance and
I cannot mutate the data.

169
00:08:26.417 --> 00:08:31.260
So if you wanted to mutate the data,
you could do something like this, right?

170
00:08:31.260 --> 00:08:33.138
You could do a mutable reference.

171
00:08:33.138 --> 00:08:37.446
Now this would require that your
variable is mutable when you create it.

172
00:08:37.446 --> 00:08:41.340
Or you can have something that's
more like a static member.

173
00:08:41.340 --> 00:08:45.352
So if I had the exact same thing,
I could take in a (line: Line), right,

174
00:08:45.352 --> 00:08:47.853
a reference to a line and
return out a Boolean.

175
00:08:47.853 --> 00:08:50.726
And each one of these
would be able to be used.

176
00:08:50.726 --> 00:08:54.507
Here, let's just get rid of this
one cuz we don't need that one.

177
00:08:54.507 --> 00:08:58.660
We'd be able to do something
along the lines of Line::is this.

178
00:08:58.660 --> 00:09:03.159
And then I have to pass in the line
because I'm not doing a self right here.

179
00:09:03.159 --> 00:09:05.114
Or if I use the self, well,

180
00:09:05.114 --> 00:09:09.114
then I'd have to have a line
object in which I call it on.

181
00:09:09.114 --> 00:09:12.974
So that's kinda the two differences,
but that makes sense.

182
00:09:12.974 --> 00:09:17.316
That's kind of just like how it
is on a class on TypeScript.

183
00:09:17.316 --> 00:09:19.211
Exact same constructs exist.

184
00:09:19.211 --> 00:09:22.300
So let's make sure if it's horizontal or
vertical.

185
00:09:22.300 --> 00:09:28.274
So let's return self.p1.x == self.p2.x,
or copy paste, erase, erase, move.

186
00:09:28.274 --> 00:09:33.467
My goodness, I forgot where x is,
x/y, there we go.

187
00:09:38.486 --> 00:09:39.842
That's why it wasn't working.

188
00:09:39.842 --> 00:09:40.494
I was like, where is it going?

189
00:09:40.494 --> 00:09:41.840
All right, there we go.

190
00:09:41.840 --> 00:09:46.546
So long as point 1x equals point 2x or
point 1y equals point 2y,

191
00:09:46.546 --> 00:09:50.780
we have ourselves a horizontal or
vertical line.

192
00:09:50.780 --> 00:09:53.887
And of course, if we exported this thing,
we would need to make this thing public.

193
00:09:53.887 --> 00:09:56.104
We're not exporting it,
we're just using it right here.

194
00:09:56.104 --> 00:09:58.570
Awesome, there we go, we've done it.

195
00:09:58.570 --> 00:10:02.733
Another thing to take notice is that Rust
is really great at identifying things that

196
00:10:02.733 --> 00:10:03.820
aren't used.

197
00:10:03.820 --> 00:10:06.489
So when it says this,
this is actually unused,

198
00:10:06.489 --> 00:10:09.505
you can pretty much rely
on this 100% of the time.

199
00:10:09.505 --> 00:10:14.238
Sometimes it's a little dangerous to use
static analysis tools that erase code cuz

200
00:10:14.238 --> 00:10:18.810
not all code is actually not used,
and then your life is very, very sad.

201
00:10:18.810 --> 00:10:21.536
And so we don't have to worry about that.

202
00:10:21.536 --> 00:10:23.054
So we have everything we need.

203
00:10:23.054 --> 00:10:26.461
We have the input,
we have our point, we have our line,

204
00:10:26.461 --> 00:10:30.102
we have our from string,
we have our line method is_horv.

205
00:10:30.102 --> 00:10:31.845
And so let's actually use this.

206
00:10:31.845 --> 00:10:34.160
So I'm gonna go get_input.

207
00:10:34.160 --> 00:10:35.004
Now this is the fun part.

208
00:10:35.004 --> 00:10:36.037
We're gonna do this again.

209
00:10:36.037 --> 00:10:38.240
Let's use all the fun iterator stuff.

210
00:10:38.240 --> 00:10:41.553
So we can call lines on it,
you remember that?

211
00:10:41.553 --> 00:10:44.998
And so
now we need to take our string line and

212
00:10:44.998 --> 00:10:48.844
convert it into a line,
right, a line struct.

213
00:10:48.844 --> 00:10:53.644
So can anyone out here right now kinda
take a guess, if you're following along,

214
00:10:53.644 --> 00:10:58.245
what should be the next method I should
call on this nice beautiful iterator?

215
00:10:58.245 --> 00:10:59.072
&gt;&gt; Map.

216
00:10:59.072 --> 00:11:00.117
&gt;&gt; Map, so check this out.

217
00:11:00.117 --> 00:11:05.017
So let's call map, and let's take an x,
right, x is just, as you can see,

218
00:11:05.017 --> 00:11:10.171
it's just gonna be a reference to a
string, cuz we haven't done anything yet.

219
00:11:10.171 --> 00:11:12.322
And let's go str::parse(x).

220
00:11:12.322 --> 00:11:14.867
All right, so
what do you think the next, oop,

221
00:11:14.867 --> 00:11:18.000
I realized that Rust hates it this way,
never do this way.

222
00:11:18.000 --> 00:11:20.902
Remember, Rust prefers it this way always.

223
00:11:20.902 --> 00:11:23.919
All right,
what do you think the next value of x?

224
00:11:23.919 --> 00:11:27.159
What do you think the type
is gonna be on this one?

225
00:11:29.589 --> 00:11:32.972
Anyone wanna take a guess
what it could be?

226
00:11:32.972 --> 00:11:34.220
&gt;&gt; Point.

227
00:11:34.220 --> 00:11:38.193
&gt;&gt; Well, right now it's unknown because it
doesn't know, but it does know one thing,

228
00:11:38.193 --> 00:11:39.255
it is a result object.

229
00:11:39.255 --> 00:11:42.600
So that means it still
potentially contains an error.

230
00:11:42.600 --> 00:11:44.652
Now, remember earlier,

231
00:11:44.652 --> 00:11:49.884
I did tell you about that result
in options have that .map method.

232
00:11:49.884 --> 00:11:52.890
Remember, what does a flat_map do?

233
00:11:52.890 --> 00:11:57.275
Well, flat_map takes in something that can
be mapped, and then pretty much flattens

234
00:11:57.275 --> 00:12:00.894
it, kinda like array.concat,
will bring it into the same iterator.

235
00:12:00.894 --> 00:12:02.720
So every subvalue will be pumped out.

236
00:12:02.720 --> 00:12:05.130
So I can actually go like this, flat_map.

237
00:12:05.130 --> 00:12:09.856
And it will only on the results
that aren't errors continue on.

238
00:12:09.856 --> 00:12:11.260
So that's pretty cool.

239
00:12:11.260 --> 00:12:14.580
So now if I look at the value of x,
it's now just an unknown.

240
00:12:14.580 --> 00:12:17.138
It doesn't know what it is quite yet
cuz we haven't given it

241
00:12:17.138 --> 00:12:20.431
enough type information, but it does
know it's no longer a result object.

242
00:12:20.431 --> 00:12:21.827
That's actually pretty cool, right?

243
00:12:21.827 --> 00:12:23.670
That makes handling errors super slick.

244
00:12:23.670 --> 00:12:27.980
If you just don't care about the errors,
just ignore them, flat_map them.

245
00:12:27.980 --> 00:12:29.050
We're ready to rock.

246
00:12:29.050 --> 00:12:31.700
I love that, fantastic.

247
00:12:31.700 --> 00:12:34.080
So let's call a nice filter method.

248
00:12:34.080 --> 00:12:38.750
And of course,
we're gonna go like this, is_horv.

249
00:12:38.750 --> 00:12:39.765
It doesn't know it quite yet

250
00:12:39.765 --> 00:12:43.590
because it still hasn't quite figured out
what it's supposed to be at this point.

251
00:12:43.590 --> 00:12:47.560
And so at that point, we can then
call a collect, if we want to, which

252
00:12:47.560 --> 00:12:52.590
a collect will take something and turn it
into a vector or a string of something.

253
00:12:52.590 --> 00:12:55.360
And so we wanna turn this
thing into a Vec of Line.

254
00:12:56.820 --> 00:12:59.188
And so when I do that,
it now should have everything.

255
00:12:59.188 --> 00:13:02.117
And this one still complaining for
it, so we can give it a type,

256
00:13:02.117 --> 00:13:04.293
which it'll be a reference to a line,
right?

257
00:13:04.293 --> 00:13:06.392
There we go.
It's a reference to a line.

258
00:13:06.392 --> 00:13:07.600
It now knows its type.

259
00:13:07.600 --> 00:13:11.011
Everything is good, and
we can go lines right here.

260
00:13:11.011 --> 00:13:14.460
And everything is beautiful,
quick println.

261
00:13:14.460 --> 00:13:18.624
And of course, put in one,
remember the man smoking the pipe.

262
00:13:18.624 --> 00:13:20.820
Now, what are we gonna do here?

263
00:13:20.820 --> 00:13:22.821
We have the same error,
does anyone remember,

264
00:13:22.821 --> 00:13:25.382
what do we need to attach to
a struct to make this successful?

265
00:13:28.577 --> 00:13:30.240
&gt;&gt; The macro thing.

266
00:13:30.240 --> 00:13:32.950
&gt;&gt; Boom, the procedural macro,
the proc macro.

267
00:13:32.950 --> 00:13:34.072
Actually, I might be wrong.

268
00:13:34.072 --> 00:13:36.084
I assume it stands for proc, procedural.

269
00:13:36.084 --> 00:13:39.612
I mean, I guess it could stand for
proctologist, but that'd be weird.

270
00:13:39.612 --> 00:13:42.600
derive(Debug), there we go, take that.

271
00:13:42.600 --> 00:13:45.774
But even though I do that here,
I still need to do it here, right?

272
00:13:45.774 --> 00:13:48.270
Cuz the line doesn't
know how to debug itself.

273
00:13:48.270 --> 00:13:51.902
Same thing this way, it would go, hey,
you are doing debug implementation, but

274
00:13:51.902 --> 00:13:54.325
your subcomponents cannot be debugged,
therefore,

275
00:13:54.325 --> 00:13:56.025
you cannot implement this like that.

276
00:13:56.025 --> 00:13:57.842
So I'd have to do this.

277
00:13:57.842 --> 00:14:00.256
There we go, we now have everything.

278
00:14:00.256 --> 00:14:02.908
And of course, it prints out just fine.

279
00:14:02.908 --> 00:14:08.513
We can do a nice cargo run --bin p2, and
we should see these beautiful nice lines.

280
00:14:08.513 --> 00:14:11.897
Again, these are all our horizontal or
straight lines.

281
00:14:11.897 --> 00:14:15.596
You can see yy, it's yy again,
yy, then it's xx, xx,

282
00:14:15.596 --> 00:14:20.955
then it's xx again, 77, then it's yy for
the last, yy, yy, perfect.

283
00:14:20.955 --> 00:14:22.255
Look at that.

284
00:14:22.255 --> 00:14:24.346
We only got horizontal or straight lines.

285
00:14:24.346 --> 00:14:26.075
And so that's all we have to do.

286
00:14:26.075 --> 00:14:28.718
So that's pretty nice, right?

287
00:14:28.718 --> 00:14:32.732
Once we've created these nice
implementation details on the structs,

288
00:14:32.732 --> 00:14:36.761
working with them in a more standardized
way becomes very easy, right?

289
00:14:36.761 --> 00:14:38.415
This was very, very nice.

290
00:14:38.415 --> 00:14:40.865
I just have to call str::parse,
just parse the damn thing, right?

291
00:14:40.865 --> 00:14:41.874
I don't have to know about it.

292
00:14:41.874 --> 00:14:45.352
Now I think I might be wrong on this one,
so let's just try it out.

293
00:14:45.352 --> 00:14:46.941
It's always good to be wrong.

294
00:14:46.941 --> 00:14:49.015
I believe you can just do this, too.

295
00:14:49.015 --> 00:14:52.140
I'm just gonna pass in this function and
it's gonna know what to do.

296
00:14:52.140 --> 00:14:55.535
Because it can know what to do because
someone wrote some very magical

297
00:14:55.535 --> 00:14:56.890
compiler magic out there.

298
00:14:56.890 --> 00:14:58.338
And there we go, right?

299
00:14:58.338 --> 00:15:00.761
Because str::parse obviously
takes a single argument.

300
00:15:00.761 --> 00:15:02.109
This thing gives a single argument.

301
00:15:02.109 --> 00:15:03.249
It is parsable.

302
00:15:03.249 --> 00:15:07.339
There we go, and so that is problem two.

