WEBVTT

1
00:00:00.100 --> 00:00:04.900
So error handling is the exact same
way they're solving it, except for

2
00:00:04.900 --> 00:00:07.540
instead of having a one value generic or

3
00:00:07.540 --> 00:00:11.221
one type generic,
it actually has a two type generic.

4
00:00:11.221 --> 00:00:15.938
So with JavaScript it does this thing
called effectively exceptions as

5
00:00:15.938 --> 00:00:20.746
control flow, but it also handles
it via returns, returning an error.

6
00:00:20.746 --> 00:00:24.565
Classic JavaScript conflating issues
as always, right, null, undefined,

7
00:00:24.565 --> 00:00:26.907
right, it has all these
fun things that it does.

8
00:00:26.907 --> 00:00:29.980
So in JavaScript before promises,
before you use promises,

9
00:00:29.980 --> 00:00:34.055
often it was just a callback, a callback
to return an error as the first argument,

10
00:00:34.055 --> 00:00:35.786
the value as the second argument.

11
00:00:35.786 --> 00:00:37.308
But if the function threw an error,

12
00:00:37.308 --> 00:00:40.560
it meant something different than
if it returned an error, right?

13
00:00:40.560 --> 00:00:44.964
JavaScript has always had this kind of
conflation problem where throwing as

14
00:00:44.964 --> 00:00:48.000
a control flow plus returning
is also part of it.

15
00:00:48.000 --> 00:00:50.387
So it's kind of a harder thing I'd say,

16
00:00:50.387 --> 00:00:54.010
to grapple with errors in
TypeScript in general.

17
00:00:54.010 --> 00:00:57.242
They feel more easy now cuz everyone
kind of agrees that promises or

18
00:00:57.242 --> 00:01:01.056
things that contain the error and then
return it out to you isn't much easier.

19
00:01:01.056 --> 00:01:04.442
But you can still get into this weird
state where, say, you had some a sync call

20
00:01:04.442 --> 00:01:07.700
that goes off on the Internet and
grabs a value and brings it back in.

21
00:01:07.700 --> 00:01:09.982
If you bring it back in and
throw an exception,

22
00:01:09.982 --> 00:01:14.050
if no one's listening to your exception,
does anyone hear it in the woods?

23
00:01:14.050 --> 00:01:17.505
No, of course not, right, because it just
gets thrown and now you have this error

24
00:01:17.505 --> 00:01:20.127
popped up in the console but
there's not anyone handling it.

25
00:01:20.127 --> 00:01:23.886
And so it's always harder,
I would say, with JavaScript.

26
00:01:23.886 --> 00:01:26.093
I was gonna go over this
great example right here,

27
00:01:26.093 --> 00:01:29.773
I think everyone kinda gets it, Goodbye,
World, you call foo, you console log,

28
00:01:29.773 --> 00:01:32.536
we had a problem but we are okay,
then great success, right?

29
00:01:32.536 --> 00:01:37.200
And we have .catch,
we kinda know those things.

30
00:01:37.200 --> 00:01:39.015
I'm just kinda speeding along
a little bit right here.

31
00:01:39.015 --> 00:01:44.300
So Go, it's different.

32
00:01:44.300 --> 00:01:47.254
It's both an argument for and
against Go at the exact same time,

33
00:01:47.254 --> 00:01:48.411
how they handle errors.

34
00:01:48.411 --> 00:01:51.851
People hate them, but at the same time
I still think they're better than how

35
00:01:51.851 --> 00:01:53.680
they're done in JavaScript.

36
00:01:53.680 --> 00:01:56.820
Effectively let's kind of,
let's see, do I just, okay, good.

37
00:01:56.820 --> 00:01:57.975
I go over the code right there.

38
00:01:57.975 --> 00:02:01.312
So I'm just gonna go over the code really
kinda quickly here cuz I feel like Go,

39
00:02:01.312 --> 00:02:05.120
since there's less familiarity here,
we should probably kinda go over that.

40
00:02:05.120 --> 00:02:08.160
So in this world,
we can do things like this.

41
00:02:08.160 --> 00:02:09.443
And we just half that.

42
00:02:09.443 --> 00:02:12.300
I can create a function
that's like returnsError.

43
00:02:14.320 --> 00:02:16.770
And this thing is gonna
return a type error.

44
00:02:16.770 --> 00:02:22.864
So I can return a new format, and
go Errorf(This is an error with value),

45
00:02:22.864 --> 00:02:26.755
and I'll make this thing,
say, take in a int.

46
00:02:29.815 --> 00:02:31.680
And we'll do that.

47
00:02:31.680 --> 00:02:33.350
And I'll take in the value and
look at that,

48
00:02:33.350 --> 00:02:36.210
we have this beautiful little error
that's returned from this function.

49
00:02:36.210 --> 00:02:39.502
Now Go treats all errors like values,
right?

50
00:02:39.502 --> 00:02:40.330
There are panics,

51
00:02:40.330 --> 00:02:43.763
you don't wanna panic to happen cuz
panics just destroy the program, right?

52
00:02:43.763 --> 00:02:46.044
It's where you cannot
handle the error at all.

53
00:02:46.044 --> 00:02:50.347
It would be equivalent to the case of an
error being thrown in some async callback

54
00:02:50.347 --> 00:02:53.127
in which nobody handles,
right, in JavaScript.

55
00:02:53.127 --> 00:02:56.190
It just terminates the programs and
that's terrible.

56
00:02:56.190 --> 00:02:59.813
There is apparently some way to
avoid some level of termination, but

57
00:02:59.813 --> 00:03:02.680
we're never gonna be
getting into that today.

58
00:03:02.680 --> 00:03:08.800
So if I were to do this, I could do
something like this, err := returnsError.

59
00:03:08.800 --> 00:03:10.930
And I can give it a value, say 5.

60
00:03:10.930 --> 00:03:14.292
Now I have this error,
I actually have the error.

61
00:03:14.292 --> 00:03:17.738
So this means that if we were to have
something that looks like this struct

62
00:03:17.738 --> 00:03:18.423
Foo, right?

63
00:03:18.423 --> 00:03:23.462
So some class, right, some struct out
there that has some basic variables,

64
00:03:23.462 --> 00:03:27.118
oop sorry, type struct,
can't get those backwards.

65
00:03:27.118 --> 00:03:30.256
So in Go that's how you specify struct.

66
00:03:30.256 --> 00:03:32.578
But I had some sorta struct
that had some values and

67
00:03:32.578 --> 00:03:34.133
it had a function on that struct.

68
00:03:34.133 --> 00:03:40.265
So in TypeScript you put it on the class,
in Rust you do that input call,

69
00:03:40.265 --> 00:03:44.370
in Go it's even a little
bit more kind of goofy.

70
00:03:44.370 --> 00:03:49.500
You can say something like this, go
function then you can add it on there and

71
00:03:49.500 --> 00:03:51.869
then you go thisIsOnFoo, right?

72
00:03:51.869 --> 00:03:55.080
And this can return also an error and
do the exact same thing here.

73
00:03:55.080 --> 00:03:58.032
Let me just grab that 6 down and
paste that up there.

74
00:03:58.032 --> 00:04:02.389
And so I could do the exact same thing,
err =, or actually foo := foo and

75
00:04:02.389 --> 00:04:06.255
then go foo, and as you can see
there's an error right there, and

76
00:04:06.255 --> 00:04:10.713
I could actually get the error out and
this thing would be an error, right?

77
00:04:10.713 --> 00:04:14.743
More so when you're creating structs and
there is a potential for error.

78
00:04:14.743 --> 00:04:17.197
Let's kinda go over that cuz
I feel like this is very,

79
00:04:17.197 --> 00:04:18.680
very important to understand.

80
00:04:18.680 --> 00:04:20.486
How about this one, CreateFoo.

81
00:04:20.486 --> 00:04:23.762
By the way, if it starts with
a capital letter, it's exported in Go.

82
00:04:23.762 --> 00:04:26.178
I think it's one of
the tragically best and

83
00:04:26.178 --> 00:04:30.940
worst concepts ever cuz it feels nice but
at the same time, man, there's something

84
00:04:30.940 --> 00:04:35.200
that just kills me on the inside
when I don't wanna export a type.

85
00:04:35.200 --> 00:04:39.161
I have to have a lowercase and it just,
I'm emotionally bruised by that, right?

86
00:04:39.161 --> 00:04:41.062
Some people get emotionally
bruised by other things,

87
00:04:41.062 --> 00:04:43.305
I get it with capital letters,
right, it just really hurts me.

88
00:04:43.305 --> 00:04:45.947
So let's say we're just
gonna create a foo and

89
00:04:45.947 --> 00:04:48.667
there's a chance that
this thing could error.

90
00:04:48.667 --> 00:04:50.370
So how do we return this?

91
00:04:50.370 --> 00:04:55.377
Well, if we did this, (Foo, error),
let's go over what would happen.

92
00:04:55.377 --> 00:05:00.293
Let's say that if, we'll add a little
number here (bool, fail), right,

93
00:05:00.293 --> 00:05:03.887
oop, the other way round (fail,
bool), there we go.

94
00:05:03.887 --> 00:05:07.870
So if we were to fail,
we should return the error.

95
00:05:07.870 --> 00:05:13.000
So that means we have to return a foo
object and then the error, right?

96
00:05:13.000 --> 00:05:15.744
So then I could just go up here and I
could just grab this thing really quickly.

97
00:05:17.853 --> 00:05:19.657
There we go, right,
how beautiful was that?

98
00:05:22.296 --> 00:05:23.210
Oopsies.

99
00:05:25.890 --> 00:05:28.251
Hey, where are you?

100
00:05:28.251 --> 00:05:30.228
Errorf, we just use Errorf, whatever.

101
00:05:30.228 --> 00:05:33.105
There we go, it's good enough,
but there we go.

102
00:05:33.105 --> 00:05:35.065
So that returns an error but
what's the problem?

103
00:05:35.065 --> 00:05:37.525
We have to create this
thing every single time.

104
00:05:37.525 --> 00:05:42.756
So what you'll often see, In the Go

105
00:05:42.756 --> 00:05:48.048
world is anything that throws an error
always comes as a pointer, right?

106
00:05:48.048 --> 00:05:51.824
And what this means is I have
the magical ability to call it nil, but

107
00:05:51.824 --> 00:05:54.326
I have to turn it into
a pointer on this side.

108
00:05:54.326 --> 00:05:57.621
And so this is pretty much error
handling in Go, you see it all the time.

109
00:05:57.621 --> 00:06:00.330
Because you don't wanna have to create
the object every single time there's

110
00:06:00.330 --> 00:06:01.060
an error, right?

111
00:06:01.060 --> 00:06:04.070
You just wanna return the error and
that is it.

112
00:06:04.070 --> 00:06:06.142
There's also an errors
package that I could use and

113
00:06:06.142 --> 00:06:08.410
just go errors.new if I
didn't wanna do this.

114
00:06:08.410 --> 00:06:13.162
But either way, it's the same kind of
concept, is that we have this ability to

115
00:06:13.162 --> 00:06:17.640
return either an error or the value,
and Go always makes you handle this.

116
00:06:17.640 --> 00:06:20.220
And I think this is actually
a pretty good construct.

117
00:06:20.220 --> 00:06:22.630
So I do something that looks like this,
right?

118
00:06:22.630 --> 00:06:27.048
CreateFoo(false), right, and
then I do something that looks like this.

119
00:06:27.048 --> 00:06:28.963
Don't use semicolons.

120
00:06:28.963 --> 00:06:32.640
Is that I have this actually
built on a hotkey for me.

121
00:06:32.640 --> 00:06:35.660
So if I just go like that,
it just makes one happen.

122
00:06:35.660 --> 00:06:37.557
Cuz I just use this that often, right?

123
00:06:37.557 --> 00:06:42.437
And then I also have one for
the main function, which of course is,

124
00:06:42.437 --> 00:06:44.061
oopsie, space ef.

125
00:06:44.061 --> 00:06:47.869
No, that's on my other VMRC,
I didn't commit it, dang it, but

126
00:06:47.869 --> 00:06:50.918
I have it so,
I didn't commit it from my other machine.

127
00:06:50.918 --> 00:06:52.768
But either way, you'll see this so

128
00:06:52.768 --> 00:06:55.720
often that I actually just
have this hotkeyed out.

129
00:06:55.720 --> 00:06:56.480
Is it annoying?

130
00:06:56.480 --> 00:07:00.198
Yeah, it's annoying because every three
lines you have this if error does not

131
00:07:00.198 --> 00:07:02.056
equal nil, handle the error case, but

132
00:07:02.056 --> 00:07:06.240
the nice part is is that you constantly
have to think about errors ahead of time.

133
00:07:06.240 --> 00:07:09.850
There's no like, this method throws
an error, I should handle this.

134
00:07:09.850 --> 00:07:11.910
It's like no, you have to do it.

135
00:07:11.910 --> 00:07:12.752
There is no getting out of it.

136
00:07:12.752 --> 00:07:17.365
I do think that it's a nicer
construct to have values errors.

137
00:07:17.365 --> 00:07:19.956
Personal opinion, hashtag hate me for it.

138
00:07:19.956 --> 00:07:21.040
There you go.

139
00:07:21.040 --> 00:07:22.375
So we got this.

140
00:07:22.375 --> 00:07:24.918
Does that all make sense with Go?

141
00:07:24.918 --> 00:07:28.237
Go is really simple, so I'm not gonna
spend a huge time kind of arguing.

142
00:07:28.237 --> 00:07:31.891
I think everybody,
if you're familiar enough with TypeScript,

143
00:07:31.891 --> 00:07:34.903
nothing in here is confusing
other than this, right?

144
00:07:34.903 --> 00:07:38.704
So Go is a magic place, you can return
pointers and it still works out,

145
00:07:38.704 --> 00:07:39.936
kind of a weird world.

146
00:07:39.936 --> 00:07:42.886
If you come from C, you'd never
create something in a function and

147
00:07:42.886 --> 00:07:44.160
then return a pointer to it.

148
00:07:44.160 --> 00:07:47.690
Cuz it gets destroyed in that function and
then you're still pointing to it and

149
00:07:47.690 --> 00:07:48.928
that's considerably no.

150
00:07:48.928 --> 00:07:51.530
That's bad news bearers,
things always go wrong that way.

151
00:07:51.530 --> 00:07:55.230
But in Go you can do that cuz it actually
has an underlying engine underneath that,

152
00:07:55.230 --> 00:07:57.610
make sure everything's living correctly.

153
00:07:57.610 --> 00:07:59.120
So it just simplifies programming.

154
00:07:59.120 --> 00:08:01.540
All right, so
that that makes sense, right?

155
00:08:01.540 --> 00:08:02.190
Here you go.

156
00:08:02.190 --> 00:08:05.381
Here's all me doing those things,
right, we talked about that.

157
00:08:05.381 --> 00:08:07.370
Nice try, guy, it's a great phrase.

158
00:08:07.370 --> 00:08:08.480
There we go.

159
00:08:08.480 --> 00:08:13.473
So now with Rust we're gonna use an enum
for error handling, and I think this is

160
00:08:13.473 --> 00:08:18.636
where it gets super cool, which is that
we already understand the enum, right?

161
00:08:18.636 --> 00:08:21.971
It has two generic parameters,
a value and an error.

162
00:08:21.971 --> 00:08:26.456
And it has a type error for error or
err for the error, right, err, and ok for

163
00:08:26.456 --> 00:08:27.610
the value.

164
00:08:27.610 --> 00:08:31.871
That means if your function has
a possibility of throwing an error,

165
00:08:31.871 --> 00:08:34.330
it should return a result.

166
00:08:34.330 --> 00:08:37.090
The result would then either
be an error or not an error.

167
00:08:37.090 --> 00:08:39.915
So you always have to
handle it at that point.

168
00:08:39.915 --> 00:08:43.083
But Rust became so,
obviously errors are so often,

169
00:08:43.083 --> 00:08:46.700
that it even added syntax
to make this a lot easier.

170
00:08:46.700 --> 00:08:49.820
And the result object implements
the dot map function.

171
00:08:49.820 --> 00:08:52.864
And that's very important because we'll
see why here shortly, why that's so

172
00:08:52.864 --> 00:08:53.860
awesome with options.

173
00:08:53.860 --> 00:08:55.937
Same thing with errors is you
can use flat maps with them.

174
00:08:55.937 --> 00:08:57.287
I'm gonna jump back here really quickly.

175
00:08:57.287 --> 00:09:03.326
And let's just do a little
fun function called error_me.

176
00:09:03.326 --> 00:09:08.232
By the way, Rust also forces you to write
camel case, all right not camel case,

177
00:09:08.232 --> 00:09:09.810
snake case.

178
00:09:09.810 --> 00:09:14.290
I hated it, I absolutely hate it,
and and now I love it.

179
00:09:14.290 --> 00:09:17.080
It's funny how you change your
style then you think it's better.

180
00:09:17.080 --> 00:09:18.100
I don't know how that happens.

181
00:09:18.100 --> 00:09:21.086
But I'm easily manipulatable apparently,
all right.

182
00:09:21.086 --> 00:09:26.026
So we're gonna go like this,
we'll have throw as a bool, and

183
00:09:26.026 --> 00:09:30.691
we are gonna return a result of,
we either choose a value.

184
00:09:30.691 --> 00:09:32.428
So this is the empty value.

185
00:09:32.428 --> 00:09:36.772
This just means, hey, there's a thing
there, it's just nothing, it's a unit,

186
00:09:36.772 --> 00:09:39.786
it's just what it is, or
we may return some sort of error.

187
00:09:39.786 --> 00:09:43.013
Let's, for whatever reason, we're gonna
return a type of usize as an error.

188
00:09:43.013 --> 00:09:47.421
usize is just a,
all it simply is, oopsies,

189
00:09:47.421 --> 00:09:53.570
a usize is just unsigned integer,
the width of your computer.

190
00:09:53.570 --> 00:09:56.691
So if you have a 64-bit computer,
it's likely 64 bits.

191
00:09:56.691 --> 00:09:59.833
Depends on the architecture,
if you're running on 16-bits, 16 bit.

192
00:09:59.833 --> 00:10:01.764
A usize is just the width
of your computer.

193
00:10:01.764 --> 00:10:05.650
64 bits,
that means you get a 64-bit integer.

194
00:10:05.650 --> 00:10:08.170
So it's used for
indexing arrays and all that.

195
00:10:08.170 --> 00:10:10.060
So right now I'm just
simply getting a result.

196
00:10:10.060 --> 00:10:12.242
Now it's kinda weird returning
a value as an error,

197
00:10:12.242 --> 00:10:14.335
something that you wouldn't
consider an error.

198
00:10:14.335 --> 00:10:19.048
But remember, the error object is simply,
it's just a type, right?

199
00:10:19.048 --> 00:10:21.580
It doesn't have any
specific constraints on it,

200
00:10:21.580 --> 00:10:24.363
there is an actual error
trait that you can implement.

201
00:10:24.363 --> 00:10:26.913
A trait is just an interface,
is how you can think of it.

202
00:10:26.913 --> 00:10:28.372
So there is actual error errors but

203
00:10:28.372 --> 00:10:30.798
in this case we're just using
something really simple.

204
00:10:30.798 --> 00:10:32.640
I'm just returning a value, right?

205
00:10:32.640 --> 00:10:39.747
So if throw, then return an error of,
I don't know, 7, right?

206
00:10:39.747 --> 00:10:44.463
Else return an Ok of nothing, right?

207
00:10:44.463 --> 00:10:45.530
And so there you go.

208
00:10:45.530 --> 00:10:50.000
I actually just had an error and here's
the error case, here's the good case.

209
00:10:50.000 --> 00:10:53.260
And so when I call this, this is where
things kinda get a little bit neat.

210
00:10:53.260 --> 00:10:56.800
So what I'm gonna do is I'm
also gonna return a result.

211
00:10:56.800 --> 00:10:59.534
And for the sake of this,
I'm gonna keep it the exact same.

212
00:10:59.534 --> 00:11:02.306
You can make errors better and
they can be more generic, and

213
00:11:02.306 --> 00:11:05.240
then you can be able to handle
all sorts of different errors.

214
00:11:05.240 --> 00:11:06.431
Right now we're just gonna handle this.

215
00:11:06.431 --> 00:11:07.460
Now, this is the cool part.

216
00:11:07.460 --> 00:11:11.840
So at the very bottom, I'm first
gonna go like this, return Ok, boom.

217
00:11:11.840 --> 00:11:13.410
And so there we go, everything's happy.

218
00:11:13.410 --> 00:11:16.100
I can call error_ me, right?

219
00:11:16.100 --> 00:11:19.590
And say I provide false,
I can do this little thing right there.

220
00:11:19.590 --> 00:11:21.246
I can add in a question mark,

221
00:11:21.246 --> 00:11:25.960
this question mark effectively
attempts to unwrap your error.

222
00:11:25.960 --> 00:11:30.440
But if it is an error and
not a value, it will return that.

223
00:11:30.440 --> 00:11:34.474
So you can effectively think of
this right here as the following.

224
00:11:34.474 --> 00:11:38.613
It's like let value = match, and

225
00:11:38.613 --> 00:11:43.331
then I'll just take that whole thing.

226
00:11:43.331 --> 00:11:48.402
An Err(e),
then we're gonna simply return Err(e) or

227
00:11:48.402 --> 00:11:52.400
we're gonna give out the value, right?

228
00:11:52.400 --> 00:11:53.490
Or we're gonna have, what is it?

229
00:11:53.490 --> 00:11:57.243
Ok(v), there we go.

230
00:11:57.243 --> 00:11:59.446
And this thing now is the value.

231
00:11:59.446 --> 00:12:02.679
If there was a value, it does it,
else it returns it out, and so

232
00:12:02.679 --> 00:12:06.416
it stops your control flow and
hands it up to the next handling function.

233
00:12:06.416 --> 00:12:07.357
And so this is actually pretty.

234
00:12:07.357 --> 00:12:10.956
I mean, this is a very nice thing cuz
it gets rid of that if error that you

235
00:12:10.956 --> 00:12:14.382
constantly have to do, so
long as your errors are kind of planned.

236
00:12:14.382 --> 00:12:17.505
Anyhow, we'll be going over the anyhow
crate here in just one second.

237
00:12:17.505 --> 00:12:20.141
You can always just keep on using
this question mark operator, and

238
00:12:20.141 --> 00:12:23.435
as long as your function also returns the
same type as your question mark operator,

239
00:12:23.435 --> 00:12:24.025
it will work.

240
00:12:24.025 --> 00:12:25.490
So this also works with options.

241
00:12:25.490 --> 00:12:27.880
If you return an option
from your function,

242
00:12:27.880 --> 00:12:31.325
you can also question mark it and
get that same option out.

243
00:12:31.325 --> 00:12:32.045
And so it's pretty cool.

244
00:12:32.045 --> 00:12:33.194
It's like an easy way of handling it.

245
00:12:33.194 --> 00:12:34.964
I've never used it with the option side,
but

246
00:12:34.964 --> 00:12:37.212
I've definitely use it all
the time with the error side.

247
00:12:37.212 --> 00:12:38.711
This makes a ton of sense,
makes it really simple.

248
00:12:38.711 --> 00:12:40.403
So I can literally just go add value.

249
00:12:40.403 --> 00:12:41.914
And as you can see right here,

250
00:12:41.914 --> 00:12:45.430
it's just the empty one that
we said right here, right?

251
00:12:45.430 --> 00:12:46.480
That's what it is.

252
00:12:46.480 --> 00:12:47.970
And so that's pretty awesome.

253
00:12:47.970 --> 00:12:51.000
And it's a really great way I think of
handling errors, makes it straightforward.

254
00:12:51.000 --> 00:12:52.652
So Rust does the same thing as Go,

255
00:12:52.652 --> 00:12:55.460
just adds a little bit of
syntax to make it easier.

256
00:12:55.460 --> 00:12:57.450
And of course,
it has all the other things, right?

257
00:12:57.450 --> 00:13:01.048
So if error_me(true).is_ok.

258
00:13:01.048 --> 00:13:02.820
I will now okay.

259
00:13:02.820 --> 00:13:05.390
Only do something if it's ok, right?

260
00:13:05.390 --> 00:13:08.140
So this is good for, say,
checking if a file exists or not.

261
00:13:08.140 --> 00:13:09.070
I can do something right here.

262
00:13:09.070 --> 00:13:13.270
I can say, hey, Go,
does the file exist and is it ok?

263
00:13:13.270 --> 00:13:14.262
Is it not an error?

264
00:13:14.262 --> 00:13:16.410
It is an error, so
that means it doesn't exist.

265
00:13:16.410 --> 00:13:18.230
And so
we can kinda do those type of things.

266
00:13:18.230 --> 00:13:19.410
There we go.

267
00:13:19.410 --> 00:13:21.810
Pretty straightforward.
Everyone's fine with that.

268
00:13:21.810 --> 00:13:23.220
Was there anything else
I was gonna show you?

269
00:13:23.220 --> 00:13:24.420
I don't think there was.

270
00:13:24.420 --> 00:13:27.868
Obviously, there's all the other things,
there's unwrap, there's expect.

271
00:13:27.868 --> 00:13:31.804
Expect is kind of like a way you put into
your program where if this is an error,

272
00:13:31.804 --> 00:13:33.790
your program has to crash.

273
00:13:33.790 --> 00:13:37.207
And you can give a little bit of context
on it, like hey, it's gonna crash, but

274
00:13:37.207 --> 00:13:38.285
here's why it crashed.

275
00:13:38.285 --> 00:13:42.316
Say you take a CLI program that expects
you to provide at least two parameters for

276
00:13:42.316 --> 00:13:44.797
a specific operation and
you only provided one.

277
00:13:44.797 --> 00:13:46.001
Well, you can expect it, right?

278
00:13:46.001 --> 00:13:50.181
You can just say, hey, this should
have happened, you didn't do it,

279
00:13:50.181 --> 00:13:52.561
I cannot proceed, so program's done.

280
00:13:52.561 --> 00:13:53.605
There you go.

281
00:13:53.605 --> 00:13:55.910
There's this really nice
library called Anyhow.

282
00:13:55.910 --> 00:13:58.980
I did not know about Anyhow for
a while, I use this error for a while.

283
00:14:00.120 --> 00:14:03.460
Anyhow is fantastic if
you're writing a program.

284
00:14:03.460 --> 00:14:04.122
This error should

285
00:14:04.122 --> 00:14:06.920
be used if you're writing a library
other people will consume.

286
00:14:06.920 --> 00:14:09.173
Anyhow is if you're trying
to just write a program.

287
00:14:09.173 --> 00:14:11.764
So let me just show you a quick
little thing with Anyhow.

288
00:14:11.764 --> 00:14:14.790
cargo add anyhow.

289
00:14:14.790 --> 00:14:17.807
It is beautiful.

290
00:14:17.807 --> 00:14:24.753
So Anyhow, let's see, use anyhow, oop,
you always have to do this, LspRestart.

291
00:14:24.753 --> 00:14:29.626
Now we wait a moment of time
because the Rust analyzer

292
00:14:29.626 --> 00:14:34.738
takes a while,
it has has a lot of things it needs to do.

293
00:14:34.738 --> 00:14:37.324
So anyways, we have the anyhow and
it has its own result type.

294
00:14:37.324 --> 00:14:39.342
So you can actually redefine result.

295
00:14:39.342 --> 00:14:42.396
We can even do that ourselves
if we have the same return type.

296
00:14:42.396 --> 00:14:44.580
They do it for us.

297
00:14:44.580 --> 00:14:46.410
So I can do something like this.

298
00:14:46.410 --> 00:14:48.840
So instead of returning that,
I can go like this.

299
00:14:48.840 --> 00:14:52.290
Anyhow, let's see.

300
00:14:52.290 --> 00:14:59.865
I can do like,
("this should never be true"), right?

301
00:14:59.865 --> 00:15:03.659
Yay, we have this and of course I believe
that is because this thing is anyhow.

302
00:15:03.659 --> 00:15:04.370
There we go.

303
00:15:06.300 --> 00:15:08.940
It's the macro, there we go.

304
00:15:08.940 --> 00:15:10.410
And what is its problem here?

305
00:15:13.026 --> 00:15:15.760
Err, there we go.

306
00:15:15.760 --> 00:15:17.910
I created an anyhow error right here.

307
00:15:17.910 --> 00:15:19.540
Or let's just say you throw an error.

308
00:15:19.540 --> 00:15:21.790
There are operations
in which throw errors.

309
00:15:21.790 --> 00:15:24.820
So if I do fs, this is just a file system.

310
00:15:24.820 --> 00:15:28.826
And, I don't know, let's see,
can I just do a simple read?

311
00:15:28.826 --> 00:15:36.747
Let's go, PathBuf, I'm just gonna read
something really quickly, from foo, right?

312
00:15:36.747 --> 00:15:39.850
This thing is likely to be an error
because it doesn't exist, so

313
00:15:39.850 --> 00:15:41.467
it returns an error out, right?

314
00:15:41.467 --> 00:15:42.955
It returns this result object out for

315
00:15:42.955 --> 00:15:45.123
you to be able to interact
with in case it's an error.

316
00:15:45.123 --> 00:15:49.988
So I can use this thing called context
from anyhow where if this is an error,

317
00:15:49.988 --> 00:15:52.241
I can go, hey, unable to do this.

318
00:15:52.241 --> 00:15:56.333
So now I added a little additional context
to it so that when my program errors,

319
00:15:56.333 --> 00:16:00.182
I have this nice little message that I
put in there and then I can unwrap it.

320
00:16:00.182 --> 00:16:03.230
And boom, it still acts the same,
doesn't throw the errors.

321
00:16:03.230 --> 00:16:07.209
Everything works nicely, and it has this
really complex error type that I don't

322
00:16:07.209 --> 00:16:09.360
have to worry about how complex it is.

323
00:16:09.360 --> 00:16:10.610
It just does it all for me.

324
00:16:10.610 --> 00:16:12.590
So anyhow is just magical, right?

325
00:16:12.590 --> 00:16:16.139
It's just like, it makes error handling
super easy in a typed language.

326
00:16:16.139 --> 00:16:20.868
So this almost feels as loosey-goosey as
something like JavaScript without all

327
00:16:20.868 --> 00:16:22.894
the painfulness in a type system.

328
00:16:22.894 --> 00:16:24.750
So, pretty fantastic.

329
00:16:24.750 --> 00:16:25.600
Absolutely love it.

