WEBVTT

1
00:00:00.280 --> 00:00:01.410
So let's keep on going.

2
00:00:01.410 --> 00:00:05.870
Let's do a little func (p projector) and
do set up.

3
00:00:05.870 --> 00:00:08.980
Let me put this in the middle for
you and do SetValue.

4
00:00:08.980 --> 00:00:10.350
So I'm trying to keep the names the same.

5
00:00:10.350 --> 00:00:13.300
So I'm gonna keep on using
remove value at the end.

6
00:00:13.300 --> 00:00:14.919
And these of course
are gonna be very easy.

7
00:00:14.919 --> 00:00:18.190
So let's go set value string.

8
00:00:18.190 --> 00:00:21.320
One nice part about Go, I mean,
I don't know if it's really that great.

9
00:00:21.320 --> 00:00:24.060
But if you have multiple
arguments of the same type,

10
00:00:24.060 --> 00:00:26.120
you can just save the type to the end.

11
00:00:26.120 --> 00:00:29.633
So you don't have to be like key string
value, string this, string that, string,

12
00:00:29.633 --> 00:00:31.610
you can just go [INAUDIBLE] string.

13
00:00:31.610 --> 00:00:32.427
Makes it really nice.

14
00:00:32.427 --> 00:00:33.710
Nice to let you know.

15
00:00:33.710 --> 00:00:34.870
Well, nice little shorthand right there.

16
00:00:34.870 --> 00:00:36.770
All right, so we're gonna set the value.

17
00:00:36.770 --> 00:00:41.044
All we need to do is go if,
let's see, we're gonna see,

18
00:00:41.044 --> 00:00:43.370
how do we wanna approach this?

19
00:00:43.370 --> 00:00:45.980
Well, we have a couple of
ways we can approach this.

20
00:00:45.980 --> 00:00:49.842
We can do, ok := p.data.Projector, and

21
00:00:49.842 --> 00:00:54.730
then we can use p.config.present
working directory.

22
00:00:56.740 --> 00:01:00.540
And we can say if it's not okay,
what do we do here?

23
00:01:00.540 --> 00:01:03.328
Or if it's not okay,
we need to do something, right?

24
00:01:03.328 --> 00:01:06.327
We need to actually set this value in.

25
00:01:06.327 --> 00:01:10.350
So, I can go
p.data.Projector[p.config.Pwd] but

26
00:01:10.350 --> 00:01:15.108
at that point I've probably done it
too many times I want to go present

27
00:01:15.108 --> 00:01:18.620
working directory equals p.config.Pwd.

28
00:01:18.620 --> 00:01:24.008
Boom, go over here see in there
present working directory.

29
00:01:24.008 --> 00:01:28.377
And we'll set it to
a new map[string]string.

30
00:01:28.377 --> 00:01:30.500
All right,
that looks pretty good, correct.

31
00:01:31.830 --> 00:01:32.490
Awesome.

32
00:01:32.490 --> 00:01:34.990
And I use the semicolon,
so we won't do that.

33
00:01:34.990 --> 00:01:39.724
And we have to do two write those two
effectively denote creating the object,

34
00:01:39.724 --> 00:01:42.690
but there's nothing inside the object.

35
00:01:42.690 --> 00:01:47.615
Awesome, so at that point we can just
yank this beautiful piece of code,

36
00:01:47.615 --> 00:01:52.890
and go [pwd] [key] = value, and
we're done with setting the value.

37
00:01:52.890 --> 00:01:56.967
So not much more code than typescript
actually pretty similar code I'd say to

38
00:01:56.967 --> 00:01:57.728
TypeScript.

39
00:01:59.181 --> 00:02:02.962
And let's do the exact same thing for
deleting.

40
00:02:02.962 --> 00:02:08.030
RemoveValue should just have a key string.

41
00:02:08.030 --> 00:02:08.830
That is it.

42
00:02:08.830 --> 00:02:10.860
We should be able to do
the exact same check.

43
00:02:10.860 --> 00:02:12.817
We grab out the present working directory.

44
00:02:12.817 --> 00:02:14.845
And then we have a dir, right,

45
00:02:14.845 --> 00:02:20.087
because at this point we only do something
if it exists not the other way around.

46
00:02:20.087 --> 00:02:23.670
So I'm gonna delete out that line,
bring this thing back up in here and

47
00:02:23.670 --> 00:02:24.961
call the delete method.

48
00:02:24.961 --> 00:02:28.004
So the delete method is just
like the append method.

49
00:02:28.004 --> 00:02:32.005
It's one of these magic methods that
exist and as you can see right on there,

50
00:02:32.005 --> 00:02:34.756
it takes the map that you're
gonna be deleting on and

51
00:02:34.756 --> 00:02:36.208
the key you wish to delete.

52
00:02:36.208 --> 00:02:39.641
So slightly different than TypeScript,
TypeScript you actually access the key and

53
00:02:39.641 --> 00:02:42.251
then you delete the entry whereas
this one you just say the key and

54
00:02:42.251 --> 00:02:43.190
it deletes the entry.

55
00:02:44.550 --> 00:02:47.407
Awesome.
So let's go all the way up to here and

56
00:02:47.407 --> 00:02:48.960
just go key.

57
00:02:48.960 --> 00:02:50.000
And there we go.

58
00:02:50.000 --> 00:02:54.170
We pretty much have
the whole thing right there.

59
00:02:54.170 --> 00:02:56.120
We use the dir, we use the return value.

60
00:02:56.120 --> 00:02:58.219
We have everything, it's looking good,

61
00:02:58.219 --> 00:03:00.990
which means we should be
able to test all of this.

62
00:03:00.990 --> 00:03:05.650
One thing we haven't done yet,
is do the from file operation.

63
00:03:05.650 --> 00:03:06.760
So we will probably do that now.

64
00:03:06.760 --> 00:03:10.413
Now remember the from file operation
wants to throw zero errors.

65
00:03:10.413 --> 00:03:14.687
We just simply want to return a projector
because if the config doesn't exist

66
00:03:14.687 --> 00:03:15.880
that's okay.

67
00:03:15.880 --> 00:03:18.679
If it's bad JSON we've
already decided that's okay.

68
00:03:18.679 --> 00:03:20.910
We're just gonna have no errors at all.

69
00:03:20.910 --> 00:03:24.442
So let's do that now while we're kind of
already here and then we'll go to testing.

70
00:03:27.623 --> 00:03:30.947
All right, we're gonna go like this,
NewProjector and

71
00:03:30.947 --> 00:03:34.628
of course we need to take in
a config that is a config, correct?

72
00:03:34.628 --> 00:03:40.189
We need to return out, so I can read my
mind a pointer to a projector, correct?

73
00:03:40.189 --> 00:03:43.563
Awesome, we don't need to worry about an
error in this case because we've already

74
00:03:43.563 --> 00:03:45.090
decided no errors.

75
00:03:45.090 --> 00:03:49.963
So we'll do the exact same thing we need
to check, does the config file exists or

76
00:03:49.963 --> 00:03:54.130
have you handed me a path to a config
that does not exist yet, right?

77
00:03:54.130 --> 00:03:57.054
That is a possibility, because the first
time you run projector there's just no

78
00:03:57.054 --> 00:03:59.070
config file, it just hasn't happened yet.

79
00:03:59.070 --> 00:04:03.860
So we'll go like this, now this is where
it gets a little more tricky if you will.

80
00:04:03.860 --> 00:04:05.876
We can use the fs package and

81
00:04:05.876 --> 00:04:11.460
we have to effectively come up
with the equivalent of fs exists.

82
00:04:11.460 --> 00:04:12.690
So let's do that.

83
00:04:12.690 --> 00:04:15.810
And so what they have I believe
this one is it Stat, yep.

84
00:04:15.810 --> 00:04:19.400
So Stat will give you the Stat
about a file, we're gonna do that.

85
00:04:19.400 --> 00:04:21.926
And of course what does it return?

86
00:04:21.926 --> 00:04:25.397
It returns two item,
the FileInfo and an error.

87
00:04:25.397 --> 00:04:29.459
If the error is a not found
error then we have no file.

88
00:04:29.459 --> 00:04:32.224
So let's do all this fun stuff, right?

89
00:04:32.224 --> 00:04:33.825
So we'll go like this.

90
00:04:33.825 --> 00:04:34.780
We'll go.

91
00:04:34.780 --> 00:04:36.850
We don't care about the Stat
object because we don't need it.

92
00:04:36.850 --> 00:04:38.600
We only need the error.

93
00:04:38.600 --> 00:04:43.570
If there is an error while stating
then we have ourselves a problem.

94
00:04:43.570 --> 00:04:44.630
So we'll use that.

95
00:04:44.630 --> 00:04:47.066
And we'll go like this
err does not equal nil,

96
00:04:47.066 --> 00:04:49.570
is like a classic blunder right there.

97
00:04:49.570 --> 00:04:52.770
So use os, not fs map.

98
00:04:52.770 --> 00:04:53.630
Got me so good.

99
00:04:55.870 --> 00:04:56.500
There we go.

100
00:04:56.500 --> 00:04:57.700
So we're gonna do that.

101
00:04:57.700 --> 00:05:00.270
We're gonna just simply get the error,
make sure that there's no error.

102
00:05:00.270 --> 00:05:03.019
And if that's the case,
our file does exist.

103
00:05:03.019 --> 00:05:07.220
Let's read it the file, and
then let's JSON parse the file and

104
00:05:07.220 --> 00:05:11.111
then let's return a projector
if all that is successful.

105
00:05:11.111 --> 00:05:14.976
So this is gonna be a few more steps,
I think than the normal one.

106
00:05:14.976 --> 00:05:17.701
So let's first go.

107
00:05:17.701 --> 00:05:20.623
If, we can erase this.

108
00:05:20.623 --> 00:05:22.655
And so we have to read the file, right?

109
00:05:22.655 --> 00:05:25.450
So again,
how much do you wanna bet it's on the os.

110
00:05:25.450 --> 00:05:27.913
We can go os, look at that, read file,

111
00:05:27.913 --> 00:05:32.108
it just simply reads the name of
the file and returns the contents.

112
00:05:32.108 --> 00:05:35.224
So it's just gonna read the whole file,
that's the one we need,

113
00:05:35.224 --> 00:05:39.133
we don't need any sort of reader in, we
don't need to do anything hyper efficient

114
00:05:39.133 --> 00:05:42.820
here because it's just not a program
that's based on performance.

115
00:05:42.820 --> 00:05:46.130
So there we go.
Let's read the file, go config.Config.

116
00:05:46.130 --> 00:05:46.760
Awesome.

117
00:05:46.760 --> 00:05:50.060
And this is gonna return of course
the contents and an error, correct.

118
00:05:52.440 --> 00:05:53.690
Great.

119
00:05:53.690 --> 00:05:56.380
So if there is an error,
we need to do something, right?

120
00:05:56.380 --> 00:06:00.898
We can't return nil because well
we don't wanna return that.

121
00:06:00.898 --> 00:06:04.092
So what we're going to do here is,
I'm gonna add a nice little convenient

122
00:06:04.092 --> 00:06:06.207
function right here
called defaultProjector,

123
00:06:06.207 --> 00:06:08.799
we'll do it a little bit
differently than we did it before.

124
00:06:08.799 --> 00:06:12.426
That's gonna return a projector that's
just the empty projector, right,

125
00:06:12.426 --> 00:06:13.554
it doesn't have a lot.

126
00:06:13.554 --> 00:06:17.235
And so we only need to take
in a config and that is it.

127
00:06:17.235 --> 00:06:21.442
So I'll return &amp;Projector and

128
00:06:21.442 --> 00:06:26.739
of course we'll have config: config,

129
00:06:26.739 --> 00:06:30.788
we'll do a data of Projector,

130
00:06:30.788 --> 00:06:38.294
that is gonna be a map[string]
map[string] string.

131
00:06:38.294 --> 00:06:43.262
You're also supposed to go string whenever
you do that it really does help program

132
00:06:43.262 --> 00:06:44.351
go effectively.

133
00:06:44.351 --> 00:06:46.504
It's a part of the effective Go book too.

134
00:06:46.504 --> 00:06:51.354
So let's hop on our projector because
obviously what did I do here I made config

135
00:06:51.354 --> 00:06:54.013
a non pointer we're parsing in a pointer.

136
00:06:54.013 --> 00:06:56.963
Let's just go over here and just make
that thing a pointer to be easy and

137
00:06:56.963 --> 00:07:00.464
we can also make that one a pointer if we
really wanted to, doesn't really matter at

138
00:07:00.464 --> 00:07:04.100
this point, well it should matter because
we're gonna be doing some stuff with it.

139
00:07:04.100 --> 00:07:06.669
We don't have any methods
hanging off of it, but

140
00:07:06.669 --> 00:07:10.382
we could imagine we could actually
move the get value, the set value.

141
00:07:10.382 --> 00:07:14.551
We could actually move some of it to
the data if we wanted it there, or

142
00:07:14.551 --> 00:07:17.051
we can move the save to the data and, so.

143
00:07:17.051 --> 00:07:21.063
We could do all that, we'll just keep
everything as a pointer, we're not gonna

144
00:07:21.063 --> 00:07:24.780
attach any methods to it but if you wanted
to get a little bit clever with it,

145
00:07:24.780 --> 00:07:26.677
mutated from there you could do that.

146
00:07:26.677 --> 00:07:27.367
All right.

147
00:07:27.367 --> 00:07:31.160
If you think about set value remove value
can really be internal to the data.

148
00:07:31.160 --> 00:07:32.141
All right.

149
00:07:32.141 --> 00:07:34.400
So there we go,
we have the default projector.

150
00:07:34.400 --> 00:07:38.196
Which means we can actually just go right
over here and go defaultProjector and

151
00:07:38.196 --> 00:07:40.170
just parse in the config.

152
00:07:40.170 --> 00:07:40.800
Awesome.

153
00:07:40.800 --> 00:07:45.428
So anytime we encounter an error we'll
just do the defaultProjector which means

154
00:07:45.428 --> 00:07:47.819
down here at the bottom we'll also do it.

155
00:07:47.819 --> 00:07:51.680
Now that we have the contents
we now create the data object.

156
00:07:51.680 --> 00:07:56.620
So JSON is not as easy to handle in Go
as it is in Rust or TypeScript, but

157
00:07:56.620 --> 00:07:58.510
it's still pretty easy.

158
00:07:58.510 --> 00:08:03.389
So we're gonna do this thing,
we're gonna go var data Data.

159
00:08:03.389 --> 00:08:05.232
So what I'm saying here is, hey,

160
00:08:05.232 --> 00:08:08.293
I wanna create a variable
called data with the type Data.

161
00:08:08.293 --> 00:08:10.886
And then I'm gonna use err = json,

162
00:08:10.886 --> 00:08:15.480
of course this is one of
the libraries that's provided.

163
00:08:15.480 --> 00:08:17.450
And I'm gonna do,
I believe it's Unmarshal.

164
00:08:17.450 --> 00:08:23.690
Yeah, Unmarshal takes in a byte array and
an object that I can write into.

165
00:08:23.690 --> 00:08:26.557
And so that's why we did this
whole declaring a variable, and

166
00:08:26.557 --> 00:08:28.380
then we're gonna parse it in.

167
00:08:28.380 --> 00:08:31.770
So we'll do Unmarshal,
we parse in the contents of the file.

168
00:08:31.770 --> 00:08:33.999
And we're gonna pass in
a reference to data,

169
00:08:33.999 --> 00:08:36.480
really it's a pointer
to data at this point.

170
00:08:36.480 --> 00:08:39.860
And so it's gonna be able to write
into that object everything,

171
00:08:39.860 --> 00:08:42.340
it's gonna Unmarshal the JSON for you.

172
00:08:42.340 --> 00:08:48.480
So if there is an error, well, we probably
need to again return the defaultProjector.

173
00:08:48.480 --> 00:08:53.135
If there's none,
we can just return the actual projector

174
00:08:53.135 --> 00:08:57.131
itself with all the juicy,
delicious contents.

175
00:08:57.131 --> 00:08:58.430
So let's just do it like that, right?

176
00:08:59.930 --> 00:09:03.610
And go data is,
of course gonna be the data.

177
00:09:05.050 --> 00:09:08.620
And config, of course,
is going to be config.

178
00:09:11.390 --> 00:09:12.050
Awesome.

179
00:09:12.050 --> 00:09:12.700
There we go.

180
00:09:12.700 --> 00:09:13.673
We've just done it.

181
00:09:13.673 --> 00:09:16.170
We've created our beautiful projector.

182
00:09:16.170 --> 00:09:17.392
How nice is this?

183
00:09:23.070 --> 00:09:24.268
So there we go.

184
00:09:24.268 --> 00:09:28.670
Now I think we have pretty much
everything done for our Go version.

185
00:09:28.670 --> 00:09:31.320
Now let's actually just do a little
fun little count right here.

186
00:09:31.320 --> 00:09:35.211
All right.
So our get value, get all value and

187
00:09:35.211 --> 00:09:41.903
set value and remove value starts
at line 18 and ends at line 83.

188
00:09:41.903 --> 00:09:42.823
So what is that?

189
00:09:42.823 --> 00:09:44.003
That's 65, right?

190
00:09:44.003 --> 00:09:45.736
Did I do my math correct, 65.

191
00:09:45.736 --> 00:09:48.792
Let's go back to our TypeScript one.

192
00:09:48.792 --> 00:09:53.767
Start here, it goes at 23 and ends at 79.

193
00:09:53.767 --> 00:09:58.340
So as you can see, TypeScript a little bit
less, little bit kind of higher level,

194
00:09:58.340 --> 00:10:01.070
you can do things a little bit faster.

195
00:10:01.070 --> 00:10:03.286
Go still it's not actually
all that much more, right?

196
00:10:03.286 --> 00:10:08.415
A few extra lines of code are a bit
more explicit, is that a win or lose?

197
00:10:08.415 --> 00:10:09.048
Up to you.

198
00:10:09.048 --> 00:10:10.474
Last time I did this I believe my Go and

199
00:10:10.474 --> 00:10:12.782
TypeScript won't actually have
the same amount of lines.

200
00:10:12.782 --> 00:10:15.564
So I'm curious how did I add
some extra lines in this?

201
00:10:15.564 --> 00:10:18.310
Who knows, right, this is just
the beauty of writing code line

