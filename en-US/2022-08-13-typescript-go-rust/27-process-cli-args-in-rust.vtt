WEBVTT

1
00:00:00.710 --> 00:00:04.210
So we can now, I'd say we're done here,
this is fantastic.

2
00:00:04.210 --> 00:00:07.670
We're blazing through these programs,
it's almost like the pre-planned.

3
00:00:07.670 --> 00:00:08.654
And so let's do the Rust version.

4
00:00:08.654 --> 00:00:10.560
Is everyone ready to do the Rust version?

5
00:00:10.560 --> 00:00:13.062
Awesome, I'm very excited
about this because, man,

6
00:00:13.062 --> 00:00:15.270
this is gonna just blow your mind.

7
00:00:15.270 --> 00:00:18.000
At least I feel like it blew my mind and
it was awesome.

8
00:00:18.000 --> 00:00:21.036
All right, so let's go to Rust projects.

9
00:00:21.036 --> 00:00:23.752
And of course, we have these in
our bin file, so that's okay,

10
00:00:23.752 --> 00:00:25.822
we can keep them there,
we don't really care.

11
00:00:25.822 --> 00:00:28.301
So right now we're inside of
our source folder, right?

12
00:00:28.301 --> 00:00:31.276
So everyone's still using the previous
one, we're inside the source folder.

13
00:00:31.276 --> 00:00:35.049
So let's create a lib.rs as
the first thing we're gonna do.

14
00:00:35.049 --> 00:00:39.479
Now remember, I told you this is where we
actually put all the files that we want to

15
00:00:39.479 --> 00:00:41.290
use inside of our library.

16
00:00:41.290 --> 00:00:44.709
The name of our library depends,
of course, on where and

17
00:00:44.709 --> 00:00:46.380
how we did cargo in it.

18
00:00:46.380 --> 00:00:50.764
You can change the things, but for
us its literal name is just Rust right

19
00:00:50.764 --> 00:00:55.167
now because we created it in a folder
called rust, right, fantastic.

20
00:00:55.167 --> 00:01:00.590
Now, we're gonna do one thing that has
screwed me up many times in the past.

21
00:01:00.590 --> 00:01:04.648
We're gonna go like this, cargo add clap,
see I don't even have it.

22
00:01:04.648 --> 00:01:07.511
So that means if I mistyped this,
we'll be sitting here debugging for

23
00:01:07.511 --> 00:01:09.122
five minutes because it's terrible.

24
00:01:09.122 --> 00:01:13.936
So there's this idea of feature flags in
Rust where you can actually, it's kinda

25
00:01:13.936 --> 00:01:18.260
like a C preprocessor macro where you're
able to remove out sets of code so

26
00:01:18.260 --> 00:01:19.674
it's not compiled in.

27
00:01:19.674 --> 00:01:23.040
Rust has the same idea, except for
they call them feature flags.

28
00:01:23.040 --> 00:01:29.562
And so for this one specifically,
it's called derive, if I'm not mistaken.

29
00:01:29.562 --> 00:01:32.619
I bet you I have it on
the Rust side of things.

30
00:01:32.619 --> 00:01:35.470
Just because it's, by the way,
I'm still using all these things.

31
00:01:35.470 --> 00:01:36.200
So there you go.

32
00:01:36.200 --> 00:01:38.630
features=derive, just as we thought,
right?

33
00:01:40.070 --> 00:01:42.119
Cannot forget that, Holy cow.

34
00:01:42.119 --> 00:01:44.965
Whenever you're using Rust,
just like a little fun thing.

35
00:01:44.965 --> 00:01:48.244
So if I go like this rustlang clap, right?

36
00:01:48.244 --> 00:01:52.330
I go here and I go to the docs,
always check the feature flags right here.

37
00:01:52.330 --> 00:01:56.274
This is gonna give you that information
off the rip that you're gonna be like,

38
00:01:56.274 --> 00:01:57.340
my goodness.

39
00:01:57.340 --> 00:02:02.268
Because if you didn't know about derive,
it's gonna give you this clap derive, and

40
00:02:02.268 --> 00:02:05.690
it's emotionally painful when
your stuff is not working,

41
00:02:05.690 --> 00:02:07.482
all the example says it works.

42
00:02:07.482 --> 00:02:09.287
And it's just like that
stuff doesn't exist.

43
00:02:09.287 --> 00:02:13.085
And so if you ever run into that,
look at the feature flags, make sure

44
00:02:13.085 --> 00:02:17.225
you have them enabled, cuz that's
likely why your stuff doesn't exist.

45
00:02:17.225 --> 00:02:20.923
I mean, it's great but it's also
emotionally painful when you run into it.

46
00:02:20.923 --> 00:02:23.194
All right, let's see, okay, let's see.

47
00:02:23.194 --> 00:02:24.239
Okay, we already have all that.

48
00:02:24.239 --> 00:02:26.436
I just wanna make sure we
don't have any option.

49
00:02:26.436 --> 00:02:28.127
Okay, I don't wanna show
you guys anything yet.

50
00:02:28.127 --> 00:02:30.430
All right, so
let's do the exact same thing.

51
00:02:30.430 --> 00:02:32.100
Let's hit Enter, let's install it.

52
00:02:32.100 --> 00:02:33.480
It should take a moment.

53
00:02:33.480 --> 00:02:37.715
Apparently all of those things happen,
I don't know what exactly happened there.

54
00:02:37.715 --> 00:02:38.554
Let's see, no.

55
00:02:38.554 --> 00:02:42.818
And so you should see in your cargo.toml
that you now have a dependency on both

56
00:02:42.818 --> 00:02:47.556
anyhow and clap, if you're still using the
same Rust project we were using earlier.

57
00:02:47.556 --> 00:02:51.011
If you don't, you can always throw in
anyhow right now if you'd like to,

58
00:02:51.011 --> 00:02:51.750
that's fine.

59
00:02:51.750 --> 00:02:53.530
We'll be using it here in a little bit.

60
00:02:53.530 --> 00:02:56.682
So now let's go back to our lib.rs,
I'm gonna save this out right here, and

61
00:02:56.682 --> 00:02:58.390
I'm just gonna like this, pub mod opts.

62
00:02:59.650 --> 00:03:02.090
And then I'm gonna go in here and
create opts.rs.

63
00:03:02.090 --> 00:03:05.769
And then it's gonna say for a moment,
file not included in module tree.

64
00:03:05.769 --> 00:03:09.090
That means this thing just doesn't
exist within your project.

65
00:03:09.090 --> 00:03:11.730
And so your lib.rs needs to
make sure that it's updated.

66
00:03:11.730 --> 00:03:16.890
I'm sure as things go, you'll see
that it'll disappear here shortly.

67
00:03:18.600 --> 00:03:20.340
And then let's create one more file.

68
00:03:20.340 --> 00:03:23.980
Let's create projector.rs
inside of our bin folder.

69
00:03:23.980 --> 00:03:26.370
So this is our main entry point.

70
00:03:26.370 --> 00:03:29.590
So let's go fn main(), there we go.

71
00:03:29.590 --> 00:03:32.420
So we have our main, awesome.

72
00:03:32.420 --> 00:03:34.449
When we call --bin projector,

73
00:03:34.449 --> 00:03:39.990
this is hopefully the function that will
be executing right here, most excellent.

74
00:03:39.990 --> 00:03:42.510
So let's go back to this, awesome.

75
00:03:42.510 --> 00:03:45.770
My LSP is now called back up,
I can jump to the file.

76
00:03:45.770 --> 00:03:49.069
Everything's there, so my stall
tactic actually worked quite well.

77
00:03:49.069 --> 00:03:53.791
Let's do this, so remember how we had
these structures that existed, right?

78
00:03:53.791 --> 00:03:56.799
So we could do struct Opts,
and if I could just build it,

79
00:03:56.799 --> 00:03:58.340
I would build it using this.

80
00:03:58.340 --> 00:04:01.824
I'm gonna go, well, I want an args, right?

81
00:04:01.824 --> 00:04:02.967
But we don't need to
make a clap like that.

82
00:04:02.967 --> 00:04:05.151
So I'm just gonna go like this,
pub args, and

83
00:04:05.151 --> 00:04:08.030
I want this thing to be
a vector of string, right?

84
00:04:08.030 --> 00:04:10.555
That makes sense.
That's one of the things we want inside of

85
00:04:10.555 --> 00:04:11.540
our structure.

86
00:04:11.540 --> 00:04:14.010
A vector of string, of course,

87
00:04:14.010 --> 00:04:18.504
is the same thing as a string
list in Golang or TypeScript.

88
00:04:18.504 --> 00:04:22.893
After that, we're gonna want a config, and
now normally it'd be something like this,

89
00:04:22.893 --> 00:04:25.529
OptionString is probably
what you're thinking of,

90
00:04:25.529 --> 00:04:28.823
something we're grabbing from
the command line, but it's not.

91
00:04:28.823 --> 00:04:31.281
We're gonna use OptionPathBuf.

92
00:04:31.281 --> 00:04:34.335
So this is one of the claimed fames for
why Rust is better.

93
00:04:34.335 --> 00:04:40.550
Is that you may not know this, but
paths aren't necessarily UTF-8.

94
00:04:40.550 --> 00:04:45.162
So there are a certain set of paths
in which can break Go because

95
00:04:45.162 --> 00:04:49.257
you've broken a UTF-8 string and
so can't do that.

96
00:04:49.257 --> 00:04:52.803
So, all of that, so
super superior, there we go.

97
00:04:52.803 --> 00:04:54.296
And we can also do this, right?

98
00:04:54.296 --> 00:04:57.621
You may or may not provide me
a present working directory.

99
00:04:57.621 --> 00:05:02.425
You may or may not provide me a config,
and there will just be a list of strings.

100
00:05:02.425 --> 00:05:07.490
Now, obviously, we could technically
wrap this with an option of Vec, but

101
00:05:07.490 --> 00:05:12.396
if we did this, it would tell us as
we're using clap, option of Vec is kind

102
00:05:12.396 --> 00:05:17.303
of redundant because an empty vector
is already telling you it's empty,

103
00:05:17.303 --> 00:05:21.209
why would you want even more
signals that it's not there?

104
00:05:21.209 --> 00:05:24.692
So we'll do that, and
now let's start using clap.

105
00:05:24.692 --> 00:05:28.159
So clap comes with a couple things, I've
noticed that I've just had a really hard

106
00:05:28.159 --> 00:05:30.582
time getting the ELCP to autocomplete for
me on this one.

107
00:05:30.582 --> 00:05:33.925
So what I'm gonna do is I'm gonna do like
this, derive, and I'm gonna do Parser.

108
00:05:35.195 --> 00:05:37.169
Now, it's gonna say,
I don't know what Parser is, and

109
00:05:37.169 --> 00:05:38.419
you're gonna try to include it.

110
00:05:38.419 --> 00:05:39.435
Nice, it worked this time.

111
00:05:39.435 --> 00:05:41.795
There you go,
you can see Import 'clap::Parser'.

112
00:05:41.795 --> 00:05:46.685
So make sure you get this from
clap::Parser, this is really, really good.

113
00:05:46.685 --> 00:05:48.935
After that,
I'm gonna just type in the word clap.

114
00:05:50.105 --> 00:05:53.490
And this is gonna give us all
sorts of great stuff right here.

115
00:05:53.490 --> 00:05:58.388
And then I also need to do a little pub
right here, and now we need to kind

116
00:05:58.388 --> 00:06:02.974
of take each one of our properties and
do something to it, right?

117
00:06:02.974 --> 00:06:08.365
So one thing I wanna do is I'm gonna
take this config right here and

118
00:06:08.365 --> 00:06:13.970
I'm gonna go clap and I'm gonna
type in short = c, long = config.

119
00:06:18.407 --> 00:06:20.087
Take that out, there we go.

120
00:06:20.087 --> 00:06:22.676
And I'm gonna do the exact
same thing right here.

121
00:06:22.676 --> 00:06:24.943
Oop, I think I need to reverse those.

122
00:06:28.806 --> 00:06:32.027
Why is it saying proc macro not expanded?

123
00:06:32.027 --> 00:06:34.990
I have never seen that error before.

124
00:06:34.990 --> 00:06:37.778
All right, let's just keep on going,
we'll see what happens as we compile it.

125
00:06:37.778 --> 00:06:39.947
Maybe who knows what's happening there?

126
00:06:39.947 --> 00:06:43.150
All right,
last one is present working directory.

127
00:06:43.150 --> 00:06:46.670
And so there we go,
we're deriving our parser.

128
00:06:46.670 --> 00:06:51.183
We have our clap, we have our opts, we
have our config, we have this, we've kinda

129
00:06:51.183 --> 00:06:55.520
just defined it on a structure, which
is kinda nice to be able to have that.

130
00:06:55.520 --> 00:06:58.806
So we need no function to parse this
because clap does the parsing for us and

131
00:06:58.806 --> 00:07:01.350
it'll just put it inside
this opts structure.

132
00:07:01.350 --> 00:07:07.430
So let's jump back into this and go Opts,
which should show up, which it's not.

133
00:07:07.430 --> 00:07:10.177
So remember, the name of our project,
I believe was rust.

134
00:07:10.177 --> 00:07:17.555
My goodness, I've just had the greatest
time with, The LSP working.

135
00:07:19.970 --> 00:07:22.674
And it's gonna say, hey,
can't find this method, why?

136
00:07:22.674 --> 00:07:28.580
Well, remember how traits exist,
traits are things that you can implement.

137
00:07:28.580 --> 00:07:33.316
Rust isn't able to tell what
traits this object implements if

138
00:07:33.316 --> 00:07:36.170
the traits are not in scope.

139
00:07:36.170 --> 00:07:40.120
So, that's why it's saying, hey, there's
no function called parse on this thing.

140
00:07:40.120 --> 00:07:44.393
So if I implement or
if I use clap::Parser,

141
00:07:44.393 --> 00:07:51.230
that should bring it about and
nowit can tell, hey, you have this.

142
00:07:51.230 --> 00:07:53.700
Now it's like, okay, I can see this trait.

143
00:07:53.700 --> 00:07:59.480
I see what method this has,
your opts implements this, awesome.

144
00:07:59.480 --> 00:08:02.545
Let's do that, so let's go println,
I'm gonna print out the opts just, so

145
00:08:02.545 --> 00:08:04.380
we can all see it happening.

146
00:08:04.380 --> 00:08:07.540
And let's also do the guy smoking a pipe.

147
00:08:07.540 --> 00:08:11.805
We don't implement debugs, so
let's just jump over here and

148
00:08:11.805 --> 00:08:14.192
implement debug really quickly.

149
00:08:14.192 --> 00:08:18.106
There must be something wrong because
I'm not getting any autocomplete.

150
00:08:19.266 --> 00:08:21.114
All right, cargo build, let's see,

151
00:08:21.114 --> 00:08:24.543
I'm just gonna execute the cargo build,
make sure everything builds.

152
00:08:24.543 --> 00:08:27.400
It's like, hey, everything built, right?

153
00:08:27.400 --> 00:08:33.690
Cargo run --bin projector, there we go.

154
00:08:33.690 --> 00:08:36.247
Okay, everything runs,
I don't know what's going on with my LSP,

155
00:08:36.247 --> 00:08:37.800
something must be going crazy.

156
00:08:37.800 --> 00:08:39.200
So let's just try a couple items.

157
00:08:39.200 --> 00:08:42.430
Let's try foo, awesome, bar, awesome.

158
00:08:42.430 --> 00:08:47.420
Exactly what we wanted,
path/to/thing, great.

159
00:08:47.420 --> 00:08:50.640
So, you can see,
it went from a none value to a some value.

160
00:08:50.640 --> 00:08:54.000
So this is everything we kind
of wanted right here, right?

161
00:08:54.000 --> 00:08:56.557
We now have this nice kind of arg parsing.

162
00:08:56.557 --> 00:08:58.368
Out of all three of them,

163
00:08:58.368 --> 00:09:02.955
which kinda feels like the easiest
parsing of the CLI options?

164
00:09:02.955 --> 00:09:06.057
&gt;&gt; Rust.
&gt;&gt; Yeah, it's a sweet macro system,

165
00:09:06.057 --> 00:09:09.228
whatever is going on, it is awesome.

166
00:09:09.228 --> 00:09:12.247
I wish I understood why my LSP was
breaking so often cuz I feel like it's

167
00:09:12.247 --> 00:09:14.977
even better especially if you don't,
I mean, look at those.

168
00:09:14.977 --> 00:09:16.789
It looks terrible.

169
00:09:16.789 --> 00:09:20.798
Here, I'll reopen it back up just in case.

170
00:09:20.798 --> 00:09:22.608
And so quite nice, right?

171
00:09:22.608 --> 00:09:25.898
It is really, really nice to be able
to have something like that, and

172
00:09:25.898 --> 00:09:29.702
that's actually one of the reasons why
just [LAUGH] I absolutely just love Rust,

173
00:09:29.702 --> 00:09:31.726
it's these procedural macros, right?

174
00:09:31.726 --> 00:09:36.662
These proc macros just allow for code to
be generated, that is kind of complex, but

175
00:09:36.662 --> 00:09:38.366
it feels very simple to you.

176
00:09:38.366 --> 00:09:42.510
You can just go, yeah, okay,
I just defined them right here.

177
00:09:42.510 --> 00:09:44.100
Everything's beautiful, awesome.

178
00:09:45.540 --> 00:09:47.180
And so there we go,
we now have the options.

179
00:09:47.180 --> 00:09:49.580
Let's see if at least my
LSP is sort of working.

180
00:09:49.580 --> 00:09:53.020
Let opts = Opts, yay.

181
00:09:53.020 --> 00:09:56.340
Okay, at least that's working still,
okay, fantastic.

182
00:09:56.340 --> 00:09:57.292
So we got this.

183
00:09:57.292 --> 00:09:59.830
So we can now move on to the next stage.

184
00:09:59.830 --> 00:10:04.320
Is there any questions while we're here,
cuz we kind of did the whole thing?

185
00:10:04.320 --> 00:10:06.680
Here's what I said we should do, nice.

186
00:10:06.680 --> 00:10:09.660
It's identical, right,
I put these in different order.

187
00:10:09.660 --> 00:10:12.640
I can even put a default value
in there if you really want to.

188
00:10:12.640 --> 00:10:14.319
It looks like you don't have to.

189
00:10:14.319 --> 00:10:18.691
&gt;&gt; On your main, for example, you have to
declare the use of every library you use

190
00:10:18.691 --> 00:10:21.791
so that if you have like-
&gt;&gt; Yeah, right here,

191
00:10:21.791 --> 00:10:23.130
you're talking about
this thing right here.

192
00:10:23.130 --> 00:10:27.675
&gt;&gt; Yeah, so if you were using a bunch
of different files that use different

193
00:10:27.675 --> 00:10:31.335
libraries, you have to use them all here?

194
00:10:31.335 --> 00:10:34.865
&gt;&gt; So each file can import what they need.

195
00:10:34.865 --> 00:10:38.734
And so you only import kind of what
you need, if anything is not used,

196
00:10:38.734 --> 00:10:39.949
it will let you know.

197
00:10:39.949 --> 00:10:43.835
And so if opts relies on something
that you don't need to rely on,

198
00:10:43.835 --> 00:10:48.700
you can see right away that if I go back
to Opts, it relies on PathBuf, right?

199
00:10:48.700 --> 00:10:51.210
I have no mention of PathBuf in here.

200
00:10:51.210 --> 00:10:54.359
So it's just like Node or
just like any other module system,

201
00:10:54.359 --> 00:10:57.090
each file just has its own
right to be able to do that.

