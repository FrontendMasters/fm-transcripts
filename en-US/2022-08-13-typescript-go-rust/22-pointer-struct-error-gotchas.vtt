WEBVTT

1
00:00:00.000 --> 00:00:01.680
I mean, I don't know,
rust was pretty cool, all right?

2
00:00:01.680 --> 00:00:06.550
Once those methods exist, it's actually
a fairly trivial problem to solve.

3
00:00:06.550 --> 00:00:08.950
But if you didn't know those
methods exist or what they do,

4
00:00:08.950 --> 00:00:10.490
it's a really hard problem to solve.

5
00:00:10.490 --> 00:00:14.146
So it's an either or.

6
00:00:14.146 --> 00:00:17.733
And so of course the whole goal of
that last section was just to get us

7
00:00:17.733 --> 00:00:19.540
a little bit familiar with rust.

8
00:00:19.540 --> 00:00:24.227
So okay, we ran into pretty much
virtually no ownership problems because

9
00:00:24.227 --> 00:00:26.880
we're just passing values, all right?

10
00:00:26.880 --> 00:00:28.620
We wouldn't ever hold on to things.

11
00:00:28.620 --> 00:00:30.828
So as we program, our little CLI app,

12
00:00:30.828 --> 00:00:34.217
there will be times in which we
are going to run into these.

13
00:00:34.217 --> 00:00:38.338
And I've even pre-planned it as long as I
don't screw it up and program it correctly

14
00:00:38.338 --> 00:00:41.485
like a massive ownership problem
that should happen at the end.

15
00:00:41.485 --> 00:00:46.045
And so we should see how these things
really play out in practical rust as

16
00:00:46.045 --> 00:00:50.909
opposed to these simple operations
which often you don't actually run into

17
00:00:50.909 --> 00:00:52.815
problems in the simple ones.

18
00:00:52.815 --> 00:00:57.262
All right, so
I did wanna also go over some like, hey,

19
00:00:57.262 --> 00:01:02.119
here are some language gotchas
that I think are important.

20
00:01:02.119 --> 00:01:04.290
So let's first talk with go.

21
00:01:04.290 --> 00:01:06.136
I did mention this earlier, all right?

22
00:01:06.136 --> 00:01:08.539
So if you have a struct foo,
and you have a thing,

23
00:01:08.539 --> 00:01:12.190
you can have what is referred to as
a value receiver or a pointer receiver.

24
00:01:12.190 --> 00:01:16.570
A value receiver does not do
anything with the statement.

25
00:01:16.570 --> 00:01:22.020
So when I have f.thing equals five,
your f does not get changed.

26
00:01:22.020 --> 00:01:23.460
So that is a value receiver.

27
00:01:23.460 --> 00:01:26.594
So that is just something you
should always keep in your head.

28
00:01:26.594 --> 00:01:30.452
This can just massively screw you up,
so just be careful.

29
00:01:30.452 --> 00:01:35.250
Instead, a pointer receiver on
the other hand will change that answer

30
00:01:35.250 --> 00:01:39.074
because you are manipulating
the thing that is pointing

31
00:01:39.074 --> 00:01:42.105
to yours as opposed to
a copy of what you had.

32
00:01:42.105 --> 00:01:47.627
As I just a good thing to remember
I've been bit by this multiple times.

33
00:01:47.627 --> 00:01:51.615
So I tend I know there's like 17 rules to
why you should use a pointer and go and

34
00:01:51.615 --> 00:01:53.439
when you shouldn't use a pointer.

35
00:01:53.439 --> 00:01:58.409
More often than not, I think that an easy
answer is default a locks to a pointer.

36
00:01:58.409 --> 00:02:00.858
Unless if you really know
why you don't need one.

37
00:02:00.858 --> 00:02:04.740
If you're gonna be having errors,
you pretty much need one or

38
00:02:04.740 --> 00:02:09.006
else you have to return blank
versions of it, empty versions of it.

39
00:02:09.006 --> 00:02:14.036
If you need the mutated
[INAUDIBLE] you gonna want some

40
00:02:14.036 --> 00:02:18.733
things here so
don't get confused, all right?

41
00:02:18.733 --> 00:02:22.984
There we go there is perf wins I've
read at least read articles I've never

42
00:02:22.984 --> 00:02:27.371
personally tested myself but apparently
using value receivers even though

43
00:02:27.371 --> 00:02:31.362
the struct is copied can actually
have some set of performance wins.

44
00:02:31.362 --> 00:02:34.207
Again, I haven't investigated
any level to it,

45
00:02:34.207 --> 00:02:38.560
so I can't tell you exactly why or
how that's happening, but it does, so.

46
00:02:38.560 --> 00:02:43.838
Alright, so one more on go versus
rock struct or rust structs.

47
00:02:47.847 --> 00:02:51.850
So I did actually go over this I believe
in yeah, okay I did talk about this.

48
00:02:51.850 --> 00:02:56.638
So if you have a GoLangstruct and has y
than x we actually talked about this,

49
00:02:56.638 --> 00:02:57.404
all right?

50
00:02:57.404 --> 00:03:00.330
And then you have a constructor
method called new struct.

51
00:03:00.330 --> 00:03:04.531
This is a list initializer,
y will be equal to x, and

52
00:03:04.531 --> 00:03:10.180
x will be equal to y because it goes
in order of your struct properties.

53
00:03:10.180 --> 00:03:12.247
This is backwards compared to rust.

54
00:03:12.247 --> 00:03:15.110
Just remember that,
I know I've said it multiple times today.

55
00:03:15.110 --> 00:03:19.903
It's just such an easy way to get owned
right like you just don't you just

56
00:03:19.903 --> 00:03:22.511
don't want that, it's just not fun.

57
00:03:22.511 --> 00:03:26.419
Whereas with rust this does work even
though these properties are backwards

58
00:03:26.419 --> 00:03:29.730
because of course it uses the name
of the variable To map it over.

59
00:03:29.730 --> 00:03:33.539
If the name does not match then you
will have to use a little coal and

60
00:03:33.539 --> 00:03:35.351
do that just like Typescript.

61
00:03:35.351 --> 00:03:39.115
And you can even enter mix them just like
TypeScript where you have named ones and

62
00:03:39.115 --> 00:03:42.786
unnamed ones or implicit ones I'm not
sure what the technical name for it is.

63
00:03:42.786 --> 00:03:44.751
But you get the idea, so

64
00:03:44.751 --> 00:03:50.457
this is beautiful this is hurts my
emotions a little bit, all right?

65
00:03:50.457 --> 00:03:54.730
Now that we got that errors, you may
encounter errors remember whenever we have

66
00:03:54.730 --> 00:03:58.427
errors and things like that in Go,
just remember if you have a pointer

67
00:03:58.427 --> 00:04:01.843
it's really easy to do this whole
return nil error situation.

68
00:04:01.843 --> 00:04:04.598
If you don't have that it just
simply makes it harder, all right?

69
00:04:04.598 --> 00:04:08.588
Because you have to construct
an empty foo to return it back and

70
00:04:08.588 --> 00:04:11.286
that's probably not what you want to do.

71
00:04:11.286 --> 00:04:14.962
This is, of course, where this comes
from you've seen this if you've reviewed

72
00:04:14.962 --> 00:04:18.710
anyone's Go code, you've probably seen
this 1000 times in your lifetime.

73
00:04:18.710 --> 00:04:23.465
It almost feels like they should add maybe
a small piece of syntax just to do this

74
00:04:23.465 --> 00:04:27.445
for you, it'd be very fantastic,
but it hasn't happened yet.

75
00:04:27.445 --> 00:04:33.234
So I feel like rust once you have
the basics down, it is slower.

76
00:04:33.234 --> 00:04:35.088
But I feel like it's just less foot gantt,

77
00:04:35.088 --> 00:04:37.470
all right,
everything is a little bit more on tracks.

78
00:04:37.470 --> 00:04:41.584
Obviously, we did find that weird foo
bar function depending on the order plus

79
00:04:41.584 --> 00:04:42.343
trade thing.

80
00:04:42.343 --> 00:04:44.551
But that's probably a rarity.

81
00:04:44.551 --> 00:04:48.578
Traits, make sure you're always thinking
about traits if you're working with

82
00:04:48.578 --> 00:04:52.247
anything with the standard library,
if you look up what traits it needs,

83
00:04:52.247 --> 00:04:56.290
if you implement those, you'll get a whole
set of methods that are really nice.

84
00:04:56.290 --> 00:04:57.730
And so always take some time.

85
00:04:57.730 --> 00:04:59.970
So you know how we use the From.String.

86
00:04:59.970 --> 00:05:04.844
You can also use the just From.String,
and then you can call into on something.

87
00:05:04.844 --> 00:05:08.770
If you don't think it's not
gonna cause any errors but

88
00:05:08.770 --> 00:05:13.376
into consumes the thing, so
we'll go over that we'll actually

89
00:05:13.376 --> 00:05:18.170
use from instead of From.String and
our little CLI application.

90
00:05:18.170 --> 00:05:23.113
But, you always have to balance this idea
of consuming the value versus simply just

91
00:05:23.113 --> 00:05:26.518
referencing the value and
building a new object from it.

92
00:05:26.518 --> 00:05:29.084
So it's just like a little bit more
overhead that you'd normally don't have to

93
00:05:29.084 --> 00:05:30.550
think about in other languages, all right?

94
00:05:30.550 --> 00:05:32.320
When you use something and
go or TypeScript.

95
00:05:32.320 --> 00:05:35.447
If I hand you something, I don't
expect that thing to forever be gone.

96
00:05:35.447 --> 00:05:38.200
It's still in my possession as
much as is in your possession.

97
00:05:38.200 --> 00:05:42.082
So it's nice iterators are really
powerful, they're awesome.

98
00:05:42.082 --> 00:05:46.721
Don't forget about the dot map function as
I showed you multiple times today how much

99
00:05:46.721 --> 00:05:50.247
better it is to use the dot map
instead of like this whole handling

100
00:05:50.247 --> 00:05:51.969
error thinking about errors.

101
00:05:51.969 --> 00:05:55.634
You can just flat map it if
you're working with iterators,

102
00:05:55.634 --> 00:05:59.459
fantastic if your function returns
an option you can dot map.

103
00:05:59.459 --> 00:06:03.678
On an option and return that and so
that way you actually get the map option.

104
00:06:03.678 --> 00:06:04.560
It's pretty cool stuff.

