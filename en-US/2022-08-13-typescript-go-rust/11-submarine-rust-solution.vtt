WEBVTT

1
00:00:00.530 --> 00:00:03.270
All right, everybody ready for
the greatest of them all, rust?

2
00:00:04.770 --> 00:00:07.061
Yeah, yeah, yeah, okay, so
I'm gonna do the exact same thing.

3
00:00:07.061 --> 00:00:09.929
I'm gonna go to projects,
I'm gonna make my dir rust.

4
00:00:09.929 --> 00:00:13.815
We're going to keep these three dirs for
as we're building the CLI program as well.

5
00:00:13.815 --> 00:00:16.224
We're just kinda pre-setting them up.

6
00:00:16.224 --> 00:00:21.060
And of course, I'm gonna go into the rust
projects and I'm gonna go cargo init.

7
00:00:21.060 --> 00:00:23.688
This'll just create it for you,
it also git inits for you.

8
00:00:23.688 --> 00:00:27.210
Beautiful, wonderful, fantastic.

9
00:00:27.210 --> 00:00:30.402
And let's open up your favorite editor,
which should be them, but

10
00:00:30.402 --> 00:00:31.865
we'll find out what happens.

11
00:00:31.865 --> 00:00:32.612
All right, so there we go.

12
00:00:32.612 --> 00:00:34.740
We have our main function, awesome.

13
00:00:34.740 --> 00:00:37.180
So let's do the exact same
thing that we've been doing.

14
00:00:37.180 --> 00:00:41.948
I'm gonna open up my previous project,
I'm gonna yank that line and

15
00:00:41.948 --> 00:00:43.682
I'm gonna go back here.

16
00:00:43.682 --> 00:00:45.706
There we go, awesome.

17
00:00:45.706 --> 00:00:51.596
And so now let's start the conversion
from typescript into rust.

18
00:00:51.596 --> 00:00:53.690
So rust is just slightly different, right?

19
00:00:53.690 --> 00:00:56.437
They have an fn and
instead of function, okay,

20
00:00:56.437 --> 00:01:01.116
that's pretty straight forward instead
of colon, well, dash, arrow, why?

21
00:01:01.116 --> 00:01:02.270
I don't know.

22
00:01:02.270 --> 00:01:04.950
Now the return types are a little
bit more complicated.

23
00:01:04.950 --> 00:01:09.410
For this specific one,
we have a string in the code.

24
00:01:09.410 --> 00:01:11.542
What do you think happens when
you compile a program and

25
00:01:11.542 --> 00:01:13.160
you have a string in the code?

26
00:01:13.160 --> 00:01:16.060
If you had to do this yourself,
what would you do with that string?

27
00:01:17.610 --> 00:01:21.390
Well, you would probably have to store
that literal string in the binary,

28
00:01:21.390 --> 00:01:23.740
correct, because it has to be there.

29
00:01:23.740 --> 00:01:26.780
So there is a special
little thing called static.

30
00:01:26.780 --> 00:01:28.230
I know, this is just so great.

31
00:01:28.230 --> 00:01:29.942
Really, what I'm saying is, hey,

32
00:01:29.942 --> 00:01:33.330
I'm gonna pass back to you a reference
to something that lives forever.

33
00:01:34.520 --> 00:01:37.066
So this is a static string reference.

34
00:01:37.066 --> 00:01:39.170
This is something that lives forever,
and that's what it is.

35
00:01:39.170 --> 00:01:41.602
So this is our only time we're
gonna be touching a lifetime,

36
00:01:41.602 --> 00:01:45.570
but it's the easiest lifetime of them all,
the static lifetime, it lives forever.

37
00:01:45.570 --> 00:01:50.440
And then I'm just gonna simply
convert it into that, and there we go.

38
00:01:50.440 --> 00:01:51.675
We are now referring to the string that's
been compiled into your binary and

39
00:01:51.675 --> 00:01:52.185
we're gonna return it to you.

40
00:01:58.099 --> 00:02:00.673
And so keeping up with kind
of our procedural way,

41
00:02:00.673 --> 00:02:03.120
we're going to do the exact same thing.

42
00:02:03.120 --> 00:02:07.700
We are going to create a parse
line function that takes a line.

43
00:02:07.700 --> 00:02:12.624
It's going to split it, and
then it's going to return out its value.

44
00:02:12.624 --> 00:02:14.755
And we can kinda handle it
however we want to, but lastly,

45
00:02:14.755 --> 00:02:16.200
you will notice something right away.

46
00:02:16.200 --> 00:02:17.586
Hold on, I'm gonna go like this.

47
00:02:17.586 --> 00:02:18.860
I wanna keep on going with this.

48
00:02:18.860 --> 00:02:22.800
Again, you'll notice that I
have an underline here, why?

49
00:02:22.800 --> 00:02:27.800
It wants that delicious snake case,
the greatest casing of all time, why?

50
00:02:28.820 --> 00:02:30.084
Just does, all right, and so

51
00:02:30.084 --> 00:02:32.829
let's have the exact same thing
that we did in the previous one.

52
00:02:32.829 --> 00:02:35.492
We'll have a point again,
even though it's kind of a terrible name.

53
00:02:35.492 --> 00:02:38.722
And we'll have an x: i32,
y: i32, all right?

54
00:02:38.722 --> 00:02:43.454
So in rust land i32,
32 bit number and it's signed,

55
00:02:43.454 --> 00:02:47.702
meaning that it can be both negative and
positive.

56
00:02:47.702 --> 00:02:49.809
A u means unsigned,
it can only be positive.

57
00:02:49.809 --> 00:02:53.230
Just in case you don't know those things,
there we go.

58
00:02:53.230 --> 00:02:59.318
We are gonna return a point and
we're gonna take in a line, correct.

59
00:02:59.318 --> 00:03:03.210
That is also gonna be part of that
delicious static lifetime, right?

60
00:03:03.210 --> 00:03:05.891
Because we're already
specifying it right here,

61
00:03:05.891 --> 00:03:08.883
we're going to take in the exact
same thing right here.

62
00:03:08.883 --> 00:03:11.227
We technically,
I believe we don't actually have to.

63
00:03:11.227 --> 00:03:14.037
We can also just say, hey,
it's a reference string,

64
00:03:14.037 --> 00:03:17.841
I don't know how long it lives but
it lives as long as my function, right?

65
00:03:17.841 --> 00:03:20.119
So we can also say that too,
so there we go.

66
00:03:20.119 --> 00:03:22.123
So now let's start
breaking apart this line.

67
00:03:22.123 --> 00:03:24.840
So there are some pretty
great tools in rust.

68
00:03:24.840 --> 00:03:27.320
One of them is split_once.

69
00:03:27.320 --> 00:03:32.850
What this effectively does is it's gonna
return an option of string string.

70
00:03:32.850 --> 00:03:37.374
So if this character exists that I'm going
to split upon, it will return it to me,

71
00:03:37.374 --> 00:03:40.476
if it doesn't,
it's not going to return me anything.

72
00:03:40.476 --> 00:03:41.810
So this is actually
kind of a cool concept.

73
00:03:41.810 --> 00:03:45.530
So let's go like this,
let's put the delimiter space.

74
00:03:45.530 --> 00:03:48.580
And let's go like this, let a,
right, just for now, whatever.

75
00:03:48.580 --> 00:03:49.170
What is it?

76
00:03:49.170 --> 00:03:51.010
It's an option string string.

77
00:03:51.010 --> 00:03:53.600
So what can we do with this?

78
00:03:53.600 --> 00:03:56.080
Well, we can actually do
some pretty neat things.

79
00:03:56.080 --> 00:03:59.908
So one thing we could do right
here is instead of using

80
00:03:59.908 --> 00:04:04.529
a hard value point to return,
we could use an option to return.

81
00:04:04.529 --> 00:04:07.290
That would be nice because that
means I can do a .map on this.

82
00:04:07.290 --> 00:04:11.490
If there is a value there, then I can
mutate that value into what I want.

83
00:04:11.490 --> 00:04:14.683
If there is no value there,
then I will simply have to say, hey,

84
00:04:14.683 --> 00:04:16.116
sorry it doesn't work out.

85
00:04:16.116 --> 00:04:20.101
But for our sake, we're just gonna kinda
keep it a little bit different cuz we're

86
00:04:20.101 --> 00:04:22.487
gonna run into some more
problems here shortly.

87
00:04:22.487 --> 00:04:27.701
So we'll just unwrap or we'll expect,
right, cuz expect tells us, hey,

88
00:04:27.701 --> 00:04:32.512
if this thing doesn't work out,
we have to halt the program, right?

89
00:04:32.512 --> 00:04:33.630
And that would make sense.

90
00:04:33.630 --> 00:04:34.884
We're doing test input.

91
00:04:34.884 --> 00:04:40.565
Let's just do that here and let's go like
this, expect must contain a whitespace,

92
00:04:40.565 --> 00:04:44.017
right, makes total sense,
we would expect that.

93
00:04:44.017 --> 00:04:46.280
Now here's the best part about doing that,

94
00:04:46.280 --> 00:04:50.205
remember that whole sweet pattern
matching that we have available in rust?

95
00:04:50.205 --> 00:04:52.961
Well, it extends here, so
I'd like this dir and the mount,

96
00:04:52.961 --> 00:04:56.113
it looks wonderful, you can see
amount is a string, dir is a string.

97
00:04:56.113 --> 00:05:00.395
It has tuples in this language which
a tuple is simply something that looks

98
00:05:00.395 --> 00:05:03.088
like this, right, I can go String, String,

99
00:05:03.088 --> 00:05:07.112
that means there's two values and
they're both capital S strings.

100
00:05:07.112 --> 00:05:11.171
Obviously a reference to a string just
points to a string, it's just a smaller

101
00:05:11.171 --> 00:05:14.700
type, and it allows you to create
these things without copying.

102
00:05:14.700 --> 00:05:16.380
So that just means,
I didn't copy the string,

103
00:05:16.380 --> 00:05:17.894
I'm just simply referring to the string.

104
00:05:17.894 --> 00:05:21.244
All right, so we have these but
we do have one more problem,

105
00:05:21.244 --> 00:05:25.276
which is now we have to convert
the amount from a string into an integer.

106
00:05:25.276 --> 00:05:27.813
Now remember rust is Mr Safety, right, so

107
00:05:27.813 --> 00:05:31.412
that means when we do this what
do you think's gonna happen?

108
00:05:31.412 --> 00:05:33.273
Come on, it's gonna throw an error, right?

109
00:05:33.273 --> 00:05:37.055
It's gonna be like, there's an error here,
so we should get a result out of this.

110
00:05:37.055 --> 00:05:40.345
So what I'm gonna do is I'm gonna
say my type, I expect an i32.

111
00:05:40.345 --> 00:05:43.261
And I'm gonna go like this,
string parse and

112
00:05:43.261 --> 00:05:45.964
now I need to hand it something, amount.

113
00:05:45.964 --> 00:05:50.460
So it can tell what it needs to parse
to because I have an identified type

114
00:05:50.460 --> 00:05:51.710
right here.

115
00:05:51.710 --> 00:05:55.111
There's other ways you can do that,
I believe parse also takes what they

116
00:05:55.111 --> 00:05:58.780
refer to as the turbo fish operator,
which will do the exact same thing.

117
00:05:58.780 --> 00:06:04.525
And so now you can see I am
a result of i32 or a ParseIntError.

118
00:06:04.525 --> 00:06:07.537
That makes sense, right, cuz we don't
know what it's going to be quite yet.

119
00:06:07.537 --> 00:06:14.161
Of course, again, since we are making
a little test program, let's use expect,

120
00:06:14.161 --> 00:06:20.130
and just say, second arg, my goodness,
must be an integer, right?

121
00:06:20.130 --> 00:06:22.490
That just totally makes sense.

122
00:06:22.490 --> 00:06:26.442
There we go, it's probably the actually
the nicest way to do this program,

123
00:06:26.442 --> 00:06:30.413
cuz you do want these hard errors if
you're expecting something like that.

124
00:06:30.413 --> 00:06:31.470
All right, there we go.

125
00:06:31.470 --> 00:06:34.160
So now we have, did I forget a semicolon?

126
00:06:34.160 --> 00:06:35.275
There we go.

127
00:06:35.275 --> 00:06:36.006
Rust requires semicolons.

128
00:06:36.006 --> 00:06:39.231
All right, so now we have the direction,
we have the amount,

129
00:06:39.231 --> 00:06:41.680
we just simply need to return the points.

130
00:06:41.680 --> 00:06:47.632
I will say one cool thing about rust,
s that if you do have x = to 0 and y = 1,

131
00:06:47.632 --> 00:06:52.655
and these things are backwards,
you can return a point with x and

132
00:06:52.655 --> 00:06:57.610
y and it correctly assigns them
to what they are expected to be.

133
00:06:57.610 --> 00:07:00.101
So it behaves what I
consider more normally.

134
00:07:00.101 --> 00:07:03.451
Let's get rid of that,
exact same code as before.

135
00:07:03.451 --> 00:07:07.138
In fact, it's such similar code,
I can technically jump back here and

136
00:07:07.138 --> 00:07:10.762
I could just copy all of this and
paste it in and it's gonna, oopsies,

137
00:07:10.762 --> 00:07:12.559
I didn't actually cut and paste.

138
00:07:12.559 --> 00:07:14.657
It will do almost identically
the same thing here.

139
00:07:14.657 --> 00:07:15.636
Hold on, let me go.

140
00:07:19.588 --> 00:07:24.640
There we go, look at that, just so you can
see how similar these two languages are.

141
00:07:24.640 --> 00:07:27.687
Just simply make it
obviously from one to two.

142
00:07:27.687 --> 00:07:30.310
It also does not like
parentheses around things, and

143
00:07:30.310 --> 00:07:32.240
then we just have to change our amount.

144
00:07:32.240 --> 00:07:38.726
So I'm just gonna go Point, and
go x = amount, y = 0, right?

145
00:07:38.726 --> 00:07:40.860
Beautiful, right,
that was actually pretty straightforward.

146
00:07:40.860 --> 00:07:45.310
We can do the exact same thing here, call
this thing y, make it a negative sign.

147
00:07:46.370 --> 00:07:51.383
For some odd reason erased it,
X0, do that, beautiful,

148
00:07:51.383 --> 00:07:55.411
reduce that down,
take away the parentheses.

149
00:07:55.411 --> 00:08:01.860
And of course take that paste it in,
go here, erase that, there we go.

150
00:08:01.860 --> 00:08:04.010
It's like the exact same code, right?

151
00:08:04.010 --> 00:08:06.223
This looks the same, feels the same.

152
00:08:06.223 --> 00:08:09.300
We're not dealing with errors,
we're hard halting our program.

153
00:08:09.300 --> 00:08:11.810
If we're wrong,
everything else should be the same.

154
00:08:12.970 --> 00:08:17.760
So now we can do the exact same thing down
here, we can go like this, get input.

155
00:08:17.760 --> 00:08:19.710
We have our nice input right now.

156
00:08:19.710 --> 00:08:25.142
From there, we can do a lines.

157
00:08:25.142 --> 00:08:28.803
Lines will simply do that whole
splitting on the new line for you.

158
00:08:28.803 --> 00:08:30.196
It's actually a really
convenient function.

159
00:08:30.196 --> 00:08:32.664
I love the fact that they
just have this on here,

160
00:08:32.664 --> 00:08:34.659
cuz we all split new line all the time.

161
00:08:34.659 --> 00:08:36.970
Why not just give us a function to do it.

162
00:08:36.970 --> 00:08:39.418
And it feels like it
makes it pretty readable.

163
00:08:39.418 --> 00:08:42.318
Another thing is rust really
prefers you to put the period on

164
00:08:42.318 --> 00:08:43.480
the new line like this.

165
00:08:43.480 --> 00:08:45.840
If you were to break it down,
it's just what they like.

166
00:08:45.840 --> 00:08:48.368
So now I can do something like this,
which I think is pretty cool.

167
00:08:48.368 --> 00:08:51.807
I can now take a map and do a nice x and

168
00:08:51.807 --> 00:08:56.810
just simply do this line right here,
parse line.

169
00:08:56.810 --> 00:08:59.678
We can do this even better soon, but
we're not gonna do it better right now.

170
00:08:59.678 --> 00:09:02.225
And just take a parse line and do an x.

171
00:09:02.225 --> 00:09:06.384
We can even more so
just take parsed line, pass it in.

172
00:09:06.384 --> 00:09:09.050
Fantastic, this is looking great, right?

173
00:09:09.050 --> 00:09:10.720
We're just saying hey, parse this line.

174
00:09:10.720 --> 00:09:13.997
And so
now our next item should be a point.

175
00:09:13.997 --> 00:09:18.103
And so just like with JavaScript,
they have reduce,

176
00:09:18.103 --> 00:09:22.219
rust has fold,
fold is gonna be the exact same thing.

177
00:09:22.219 --> 00:09:24.125
So let's use that same method,

178
00:09:24.125 --> 00:09:28.793
I'm gonna have to first start off with
my initial value of, of course, 00.

179
00:09:28.793 --> 00:09:32.962
And from there, I need a function
which is gonna be a mutable,

180
00:09:32.962 --> 00:09:36.730
cuz remember we're gonna
mutate this thing coming in,

181
00:09:36.730 --> 00:09:40.598
our mutable accumulator, and
then of course our point.

182
00:09:40.598 --> 00:09:44.348
Fantastic, did I make this not,
I was just hoping you could do that.

183
00:09:44.348 --> 00:09:49.380
Sometimes I do things out there and I just
really hope that it's gonna work out and

184
00:09:49.380 --> 00:09:51.822
let's make sure we always return acc.

185
00:09:51.822 --> 00:09:56.754
This is fantastic, and what are you trying
to say, I expected this but found that,

186
00:09:56.754 --> 00:09:57.892
okay, calm down.

187
00:09:57.892 --> 00:10:02.025
The reason why it's saying that, is that,
what is the return type of main?

188
00:10:02.025 --> 00:10:04.549
Nothing, right, it's the empty object.

189
00:10:04.549 --> 00:10:09.210
So something about rust, and people love
this, I hate this, and you're gonna see me

190
00:10:09.210 --> 00:10:12.990
not use it at all is implicit returns,
everything is an expression.

191
00:10:12.990 --> 00:10:16.952
If you do an if statement and
that's the last line of your function,

192
00:10:16.952 --> 00:10:18.274
whatever it returns or

193
00:10:18.274 --> 00:10:22.950
whatever is the final value in that if
statement is the thing that's returned.

194
00:10:22.950 --> 00:10:26.628
So, if you use a semicolon at the end,
the semicolon delimits the end of

195
00:10:26.628 --> 00:10:30.270
the expression and then an empty
thing is returned afterwards.

196
00:10:30.270 --> 00:10:33.252
So, me personally, so if we just do this,
you'll notice that gets rid of the air and

197
00:10:33.252 --> 00:10:35.200
you're like,
how did that get rid of the air?

198
00:10:35.200 --> 00:10:39.090
It's because this thing was expecting me
to return nothing from this function.

199
00:10:39.090 --> 00:10:41.040
And so now,
I'm preventing it from returning by adding

200
00:10:41.040 --> 00:10:42.410
the semicolon at the end.

201
00:10:42.410 --> 00:10:45.655
I don't like to have to look forward to
know if this is the return statement, so

202
00:10:45.655 --> 00:10:46.850
I just don't use those.

203
00:10:46.850 --> 00:10:48.630
That's my argument against it.

204
00:10:48.630 --> 00:10:49.960
Hate me for it.

205
00:10:49.960 --> 00:10:52.187
I bet Twitch chat is
just losing it right now.

206
00:10:52.187 --> 00:10:56.932
All right, so let's just do this,
acc.x+=, my goodness,

207
00:10:56.932 --> 00:11:04.140
that's like the third time I've done that,
+= point.x, there we go, exact same thing.

208
00:11:04.140 --> 00:11:06.204
We've seen this how many times now?

209
00:11:06.204 --> 00:11:09.737
X/y, why are you not auto completing?

210
00:11:09.737 --> 00:11:10.960
I figured it'd be auto completing by now.

211
00:11:10.960 --> 00:11:11.962
All right, there we go.

212
00:11:11.962 --> 00:11:13.730
So we have this beautiful
thing right here.

213
00:11:13.730 --> 00:11:20.299
And now we have that, so I can go
like this, let result equals this.

214
00:11:20.299 --> 00:11:21.408
And I can do that beautiful thing.

215
00:11:21.408 --> 00:11:25.069
And if I hit Edit,
it's not running, that's too bad,

216
00:11:25.069 --> 00:11:29.263
rust analyzer will often put in ghost
texts into your editor to tell you what

217
00:11:29.263 --> 00:11:32.214
type is on each line if you
set up your code like this.

218
00:11:32.214 --> 00:11:35.537
For whatever reason,
it's not running, which is just sad.

219
00:11:35.537 --> 00:11:40.755
But yeah, so that way you would see that
this thing was a reference to a string,

220
00:11:40.755 --> 00:11:45.737
this was a iterator of reference to
string, this was an iterator of point,

221
00:11:45.737 --> 00:11:48.290
this returns a single point, right?

222
00:11:48.290 --> 00:11:50.623
So you can watch it do its
translation step by step,

223
00:11:50.623 --> 00:11:53.190
which makes it super easy to
look through these things.

224
00:11:53.190 --> 00:11:55.640
Now, hopefully, does this all make sense?

225
00:11:55.640 --> 00:11:57.620
This looks just like JavaScript, right?

226
00:11:57.620 --> 00:12:01.385
But let me tell you a reason why it's
better than what JavaScript does,

227
00:12:01.385 --> 00:12:04.360
when you use .map on an array,
what actually happens?

228
00:12:05.830 --> 00:12:07.413
Anyone, just throw out an answer.

229
00:12:07.413 --> 00:12:13.550
&gt;&gt; Iterates through and
returns each element.

230
00:12:13.550 --> 00:12:18.580
&gt;&gt; Yes, exactly, it iterates through and
returns each element into a new array.

231
00:12:19.670 --> 00:12:21.470
Filter, what does filter do?

232
00:12:21.470 --> 00:12:24.104
It goes through each elements,
does a test, and

233
00:12:24.104 --> 00:12:26.170
returns a new array with those items.

234
00:12:27.230 --> 00:12:30.909
This is not creating new arrays,
this is creating a new iterator,

235
00:12:30.909 --> 00:12:32.947
that simply when the value comes in,

236
00:12:32.947 --> 00:12:37.176
it performs the next step of the operation
and hands it off to the next place.

237
00:12:37.176 --> 00:12:40.570
So that way no new temporary
allocations are created.

238
00:12:40.570 --> 00:12:42.858
So if you do .map, .filter, .reduce,

239
00:12:42.858 --> 00:12:46.169
you've just created three
temporary arrays in JavaScript.

240
00:12:46.169 --> 00:12:46.730
You're creating nothing here.

241
00:12:46.730 --> 00:12:51.286
So it is inherently gonna be more
performant just by simple standards

242
00:12:51.286 --> 00:12:52.705
of it just does less.

243
00:12:52.705 --> 00:12:56.449
Now, V8's super clever,
they might do something, I don't know.

244
00:12:56.449 --> 00:13:01.130
But never discount V8, those
are the smartest people in the universe.

245
00:13:01.130 --> 00:13:03.085
They made JavaScript into a fast language.

246
00:13:03.085 --> 00:13:05.830
And so,
they could be doing something smart.

247
00:13:05.830 --> 00:13:10.735
So if I erase this just for fun, you'll
notice what I'll get here is they'll say,

248
00:13:10.735 --> 00:13:11.870
hey, let's see.

249
00:13:11.870 --> 00:13:16.104
I'm gonna paste this back in for
a second and

250
00:13:16.104 --> 00:13:22.140
just comment this thing out,
and go 9 up, and there you go.

251
00:13:22.140 --> 00:13:26.032
You'll notice that it says, hey, this
thing's not used, you're not using it,

252
00:13:26.032 --> 00:13:28.883
cuz we never did anything with
the iterator to consumes its.

253
00:13:28.883 --> 00:13:32.975
So a fold consumes the value, cuz it takes
it from a something that's waiting to be

254
00:13:32.975 --> 00:13:35.898
pulled on to the point of turning
it into a singular value.

255
00:13:35.898 --> 00:13:39.094
So .ForEach goes through each item,
that's a consuming item.

256
00:13:39.094 --> 00:13:43.079
You can also call .collect to turn
your iterator into say a vector.

257
00:13:43.079 --> 00:13:47.217
And so that's kind of like how, it's
a small little difference with rust but

258
00:13:47.217 --> 00:13:49.327
I think that that thing's fantastic.

259
00:13:49.327 --> 00:13:52.170
It's just one of my favorite
parts of all time, right?

260
00:13:52.170 --> 00:13:57.432
So let result = this,
fantastic, remove that.

261
00:13:57.432 --> 00:14:01.007
Now we have this, if we look at result,
let's just jump up here,

262
00:14:01.007 --> 00:14:03.290
look at it, it is Point, so awesome.

263
00:14:03.290 --> 00:14:04.553
We have everything we need.

264
00:14:04.553 --> 00:14:08.489
And now, here comes one of
the best worst parts about rust,

265
00:14:08.489 --> 00:14:12.290
all at the exact same time,
let's print out the result.

266
00:14:12.290 --> 00:14:16.457
All right, it says, hey, Point does
not implement the display trait,

267
00:14:16.457 --> 00:14:20.508
therefore we cannot print it,
you're like, okay, but I'm smart.

268
00:14:20.508 --> 00:14:24.376
I am gonna use the special print,
now this one is gonna, say, well,

269
00:14:24.376 --> 00:14:27.941
it doesn't implement the debug trait,
so you can't do that.

270
00:14:27.941 --> 00:14:30.304
But if you go up to your struct,
you can do,

271
00:14:30.304 --> 00:14:35.850
remember that macro business I was talking
about, I'm gonna say, hey, you know what?

272
00:14:35.850 --> 00:14:38.920
This struct is filled with
a bunch of very printable items.

273
00:14:38.920 --> 00:14:41.640
I want you to just go derive
how to print this for me.

274
00:14:41.640 --> 00:14:44.490
I don't wanna have to figure it out,
you just figure it out for me.

275
00:14:44.490 --> 00:14:46.360
So it's gonna go through and
it's gonna do this.

276
00:14:46.360 --> 00:14:49.069
Now, this is one of the most
powerful concepts out there,

277
00:14:49.069 --> 00:14:51.220
right now it just kind of looks silly.

278
00:14:51.220 --> 00:14:55.080
But when we do that, you'll notice,
boom, we can now print this thing out.

279
00:14:55.080 --> 00:14:58.330
And so of course,
I don't know what to call this operator,

280
00:14:58.330 --> 00:15:00.087
other than a guy smoking a pipe.

281
00:15:00.087 --> 00:15:02.545
I don't know what that thing, I'm sure
they have some sandwich, the burger,

282
00:15:02.545 --> 00:15:03.949
I think they call it a burger,
I don't know.

283
00:15:03.949 --> 00:15:06.230
I like the guy smoking a pipe,
I think that's more funny.

284
00:15:06.230 --> 00:15:08.270
All right, so
we're gonna do a little cargo run.

285
00:15:08.270 --> 00:15:12.710
Of course, let's see, how do we do this,
where do we create this thing at?

286
00:15:12.710 --> 00:15:17.450
Since this is just our main file inside of
our source, we can just call cargo run.

287
00:15:17.450 --> 00:15:19.581
So there is a way to have
separate binaries, but

288
00:15:19.581 --> 00:15:22.000
right now we're just doing this.

289
00:15:22.000 --> 00:15:24.440
So, let's go cargo run, it should compile.

290
00:15:24.440 --> 00:15:28.730
And what you'll see is that,
point has y, 10 and x has 15.

291
00:15:28.730 --> 00:15:32.010
Now, remember I flipped x and y,
that's why they're backwards right here.

292
00:15:32.010 --> 00:15:34.890
The bug procedurally goes
through your structure and

293
00:15:34.890 --> 00:15:37.400
actually prints it out in order of fields.

294
00:15:37.400 --> 00:15:38.470
Pretty cool, right?

295
00:15:38.470 --> 00:15:39.090
You get that for free.

296
00:15:39.090 --> 00:15:43.988
So, you get the speed of C++ without
me having to write that for loop and

297
00:15:43.988 --> 00:15:44.966
all that fun.

