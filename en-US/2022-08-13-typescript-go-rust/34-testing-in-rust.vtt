WEBVTT

1
00:00:00.110 --> 00:00:02.950
Time for the greatest, time to do rust.

2
00:00:02.950 --> 00:00:07.400
You wanna guess how I
feel about rust testing?

3
00:00:07.400 --> 00:00:08.100
&gt;&gt; Terrible.

4
00:00:08.100 --> 00:00:09.913
&gt;&gt; I feel terrible.

5
00:00:09.913 --> 00:00:13.320
Wait, fantastic, I feel fantastic,
that's how I feel.

6
00:00:13.320 --> 00:00:15.583
All right, so I'm not gonna let
you see the code quite yet.

7
00:00:15.583 --> 00:00:19.832
Let's jump on to rust, I feel like
we're all gonna have a great time.

8
00:00:19.832 --> 00:00:22.764
Rust or bust is the phrase we like to say.

9
00:00:22.764 --> 00:00:26.229
So let's do this,
I'm definitely not a rustacian at heart.

10
00:00:26.229 --> 00:00:27.846
The funny thing is that I hated rust.

11
00:00:27.846 --> 00:00:29.104
So before we go on,

12
00:00:29.104 --> 00:00:34.082
I would like to say that I was the biggest
hater of rust, I have great memes.

13
00:00:34.082 --> 00:00:38.410
The Spider Man crying meme,
where you have to say something tough and

14
00:00:38.410 --> 00:00:39.985
then she cries, right?

15
00:00:39.985 --> 00:00:44.225
She's ready to hear it, I had one
with Peter Parker saying, rust is not

16
00:00:44.225 --> 00:00:48.881
a feature, cuz every single library
that uses rust listed as a feature.

17
00:00:48.881 --> 00:00:50.655
It's built in rust so it's fast, right?

18
00:00:50.655 --> 00:00:54.970
And I just thought it was
just such a stupid language.

19
00:00:54.970 --> 00:00:56.516
Now look at me,
now I think it's the greatest language.

20
00:00:56.516 --> 00:00:59.340
So you can, too, trust me.

21
00:00:59.340 --> 00:01:02.190
It's a pretty good time,
I think you'll enjoy it.

22
00:01:02.190 --> 00:01:04.578
So let's do that,
let's jump over to config and

23
00:01:04.578 --> 00:01:07.395
do exactly what I said we're
going to do which is, test.

24
00:01:07.395 --> 00:01:13.070
So one thing that I do find a little bit,
wait did we not finish this yesterday?

25
00:01:13.070 --> 00:01:17.868
There was a bug right there,
no one even noticed.

26
00:01:17.868 --> 00:01:19.480
Guys, come on.

27
00:01:19.480 --> 00:01:21.328
I feel like we should have
been there saying things,

28
00:01:21.328 --> 00:01:22.847
why didn't we read our warnings, right?

29
00:01:22.847 --> 00:01:26.607
This is why you read warnings because
they're very very positive for your life.

30
00:01:26.607 --> 00:01:30.904
Also really good thing is that if
you come from a C++ background,

31
00:01:30.904 --> 00:01:33.370
how many warnings do you get, right?

32
00:01:33.370 --> 00:01:37.703
You get all sorts of warnings for a lot of
things or you get no warnings at all or

33
00:01:37.703 --> 00:01:40.980
there's actual warnings that
should really be errors.

34
00:01:40.980 --> 00:01:43.617
Such as if you have a function that
returns an int and you return nothing.

35
00:01:43.617 --> 00:01:46.123
It's just like, hey,
I hate to bother you but

36
00:01:46.123 --> 00:01:48.450
your function is not returning anything.

37
00:01:48.450 --> 00:01:51.030
But don't worry, I compiled your
program here, you can run it anyways.

38
00:01:51.030 --> 00:01:53.430
Right, I've had plenty of problems
like that where it's Rust.

39
00:01:53.430 --> 00:01:56.327
Every time you see a warning,
besides for import statements,

40
00:01:56.327 --> 00:01:59.388
it's actually usually a pretty
good thing you should look at, and

41
00:01:59.388 --> 00:02:01.647
make sure when you compile
you have no warnings.

42
00:02:01.647 --> 00:02:06.512
So and the nice part about the import
statement warnings you can just execute

43
00:02:06.512 --> 00:02:08.497
cargo cleanup or cargo clean.

44
00:02:08.497 --> 00:02:12.685
And it will just clean it all for you and
you don't have to worry about that, so

45
00:02:12.685 --> 00:02:13.340
very nice.

46
00:02:13.340 --> 00:02:16.040
All right, so let's do some testing.

47
00:02:16.040 --> 00:02:19.492
So to start off a test, we're gonna
be using one of these proc macros,

48
00:02:19.492 --> 00:02:20.940
and to do cfg(test).

49
00:02:20.940 --> 00:02:24.680
A config is effectively, you can go look
it up, it's just this thing that exists

50
00:02:24.680 --> 00:02:27.480
that helps you have some key values and
do some other stuff.

51
00:02:27.480 --> 00:02:30.081
And obviously this macro does a lot
of things in which I have no idea

52
00:02:30.081 --> 00:02:31.000
what it does.

53
00:02:31.000 --> 00:02:32.734
And I'm sure if we go look at that macro,

54
00:02:32.734 --> 00:02:35.442
it will be disgusting which my
jump to definition did not work.

55
00:02:35.442 --> 00:02:38.872
So let's just go mod test so
we're creating a new module,

56
00:02:38.872 --> 00:02:43.432
mod stands for module, it does not stand
for modulo which is a math operator.

57
00:02:43.432 --> 00:02:48.143
And in here we can create functions that
as long as we have the proc macro test on

58
00:02:48.143 --> 00:02:50.970
him, they will be executed as a test.

59
00:02:50.970 --> 00:02:53.069
So I can just go in here and
go test, right?

60
00:02:53.069 --> 00:02:57.192
And this is a test, right, there you go.

61
00:02:57.192 --> 00:03:00.158
So anything that runs in here,
will be ran.

62
00:03:00.158 --> 00:03:04.919
If we jump over here and go cargo test,
it will go through, run all the files,

63
00:03:04.919 --> 00:03:06.552
looking for everything.

64
00:03:06.552 --> 00:03:10.460
And, ultimately, just say hey there was
one test it was called, this is a test,

65
00:03:10.460 --> 00:03:11.221
and it passed.

66
00:03:11.221 --> 00:03:14.677
I do really like the output here,
I feel like it's nice and clean, right?

67
00:03:14.677 --> 00:03:17.784
You have exact knowledge
of where everything was,

68
00:03:17.784 --> 00:03:21.904
nothing happened in this file
because there's nothing to happen,

69
00:03:21.904 --> 00:03:25.101
it just gives you the full printout,
I like it a lot.

70
00:03:25.101 --> 00:03:30.033
All right, so let's go back in here and
let's create the add, and the remove,

71
00:03:30.033 --> 00:03:31.515
and all that fun stuff.

72
00:03:31.515 --> 00:03:37.879
So let's go test print, right, test print
all, let's do a little test print all.

73
00:03:37.879 --> 00:03:39.959
And so we gotta do the exact
same thing that we did before.

74
00:03:39.959 --> 00:03:44.166
We need to be able to create an options
and convert it into a config,

75
00:03:44.166 --> 00:03:48.916
and then ensure that it's actually
doing what it's supposed to be doing.

76
00:03:48.916 --> 00:03:51.440
Now, remember that conversion
does throw an error.

77
00:03:51.440 --> 00:03:53.339
So if that's the case,
what can we do here?

78
00:03:53.339 --> 00:03:56.463
Well, we can definitely
return an error here.

79
00:03:56.463 --> 00:03:59.434
And then we can use all those nice
question mark operators if we want to use

80
00:03:59.434 --> 00:03:59.980
it, right?

81
00:03:59.980 --> 00:04:00.959
We don't expect an error.

82
00:04:00.959 --> 00:04:02.869
Well, I don't need to
test if there's an error,

83
00:04:02.869 --> 00:04:04.333
I simply throw in that question mark.

84
00:04:04.333 --> 00:04:07.664
If there's an error, it'll surface it to
me, else I'll just get the value out.

85
00:04:07.664 --> 00:04:11.661
So kind of a nicer way to go about it and
make sure you use the anyhow result,

86
00:04:11.661 --> 00:04:15.920
cuz that's the one that's gonna have
all of our errors, our anyhow errors.

87
00:04:15.920 --> 00:04:18.000
It'll make this error a lot easier to use.

88
00:04:18.000 --> 00:04:20.270
And of course,
we're gonna return the empty nothing.

89
00:04:20.270 --> 00:04:23.950
So at the bottom, you can do this,
and if you're super functional,

90
00:04:23.950 --> 00:04:27.610
erase the semicolon and do this and
then you can laugh and elixir.

91
00:04:27.610 --> 00:04:30.525
Everything's great and
you're just much better than me, but

92
00:04:30.525 --> 00:04:33.350
I'm gonna keep doing this, there we go.

93
00:04:33.350 --> 00:04:35.698
So let's create our ops object ops.

94
00:04:35.698 --> 00:04:40.980
Yeah, lets, opts =, we need a opt, right?

95
00:04:40.980 --> 00:04:41.920
So, where are you?

96
00:04:41.920 --> 00:04:44.760
You're right here, and
we just need to create this thing, right?

97
00:04:44.760 --> 00:04:47.913
So, we can do something like this, and we
just need to add in all the fields, it's

98
00:04:47.913 --> 00:04:51.360
still having this really weird problem
over here, but we'll just ignore it.

99
00:04:51.360 --> 00:04:54.040
args, config, present working directory.

100
00:04:54.040 --> 00:04:55.332
So, those are the three things we need.

101
00:04:55.332 --> 00:04:59.675
So, args, of course, is gonna be a vector,
so I can just go vec bang.

102
00:04:59.675 --> 00:05:02.693
It knows its type,
therefore it can kinda fill itself in,

103
00:05:02.693 --> 00:05:05.970
we don't have to think about it,
it just does the right thing.

104
00:05:06.980 --> 00:05:11.041
We have present working directory, I'll
just put none because it's going to go and

105
00:05:11.041 --> 00:05:12.750
do the right thing for me.

106
00:05:12.750 --> 00:05:16.487
It's the non type,
it's the equivalent of null if you will.

107
00:05:16.487 --> 00:05:20.950
The only difference is that you get
beautiful methods on your null versus

108
00:05:20.950 --> 00:05:22.129
nothing, right?

109
00:05:22.129 --> 00:05:25.393
Look at that, it can be an iterator,
it can be a map,

110
00:05:25.393 --> 00:05:27.340
it has all these great things.

111
00:05:28.781 --> 00:05:31.714
There we go, so
now we have our opts object, so

112
00:05:31.714 --> 00:05:34.330
now we can convert it into a config.

113
00:05:34.330 --> 00:05:39.700
So now I can just do a quick into and
call it a config.

114
00:05:39.700 --> 00:05:42.470
Now you'll notice something, I don't know
why it's not doing that, there you go.

115
00:05:42.470 --> 00:05:44.374
You'll notice that we actually
have to import it in.

116
00:05:44.374 --> 00:05:49.222
So despite having a submodule inside of
here, we still have to import the thing

117
00:05:49.222 --> 00:05:52.600
in, that's just part of
how Rust kind of works.

118
00:05:52.600 --> 00:05:55.469
So there we go, so
now we've imported it in,

119
00:05:55.469 --> 00:05:59.707
into is not the one we should be using,
we should be using try into.

120
00:05:59.707 --> 00:06:01.492
That's right because ours was an error,

121
00:06:01.492 --> 00:06:03.482
and then of course throw
nice one of these out.

122
00:06:03.482 --> 00:06:07.402
Now we have our unwrapped error, if there
was an error, it'll just automatically

123
00:06:07.402 --> 00:06:11.130
surface it to us, we'll know what
happened, and we have these options.

124
00:06:11.130 --> 00:06:14.261
So now we can do a nice little assert_eql,
and

125
00:06:14.261 --> 00:06:19.820
we can do something like opts.operation,
and we can do some sort of equals on it.

126
00:06:19.820 --> 00:06:24.621
So I would expect this
thing to be an Operation,

127
00:06:24.621 --> 00:06:28.109
Print, with a None type, right?

128
00:06:28.109 --> 00:06:31.437
That is my expectation, but it's saying
hey, I don't know this thing, so

129
00:06:31.437 --> 00:06:32.689
we got to import that thing.

130
00:06:32.689 --> 00:06:34.730
And again, what's going on here?

131
00:06:34.730 --> 00:06:36.760
We have a new error.

132
00:06:36.760 --> 00:06:37.780
So what is this error?

133
00:06:37.780 --> 00:06:40.360
Effectively it just says hey,
we cannot compare.

134
00:06:40.360 --> 00:06:44.015
So a beautiful part about Rust is there
are ways you could actually do operator

135
00:06:44.015 --> 00:06:45.093
overloading in Rust.

136
00:06:45.093 --> 00:06:47.788
And most of it is just kind
of supported out of the box.

137
00:06:47.788 --> 00:06:51.320
You can even overload the plus sign and
other things.

138
00:06:51.320 --> 00:06:53.700
But for us,
we need to overload the double equal sign.

139
00:06:53.700 --> 00:06:55.470
Well, how do you do that?

140
00:06:55.470 --> 00:06:59.592
We can jump to our operation, and we can
just automatically have a derive how to

141
00:06:59.592 --> 00:07:02.663
do that because if you look at
all of our types, what is it?

142
00:07:02.663 --> 00:07:03.785
It's an option string.

143
00:07:03.785 --> 00:07:06.484
Those things are very
obviously easy comparable

144
00:07:06.484 --> 00:07:09.455
you already know that the system
has built it for you.

145
00:07:09.455 --> 00:07:11.850
The other one's two strings,
should be very easy.

146
00:07:11.850 --> 00:07:14.725
The last one is just a string, should
be very easy, none of our custom types.

147
00:07:14.725 --> 00:07:20.068
So I should just be able to go PartialEq,
and that's it, by doing a PartialEq on it,

148
00:07:20.068 --> 00:07:24.200
that just means it can compare it,
it can jump over to this.

149
00:07:24.200 --> 00:07:28.399
And now our search just works out of
the box, and this is pretty nice, right?

150
00:07:28.399 --> 00:07:31.420
I like that, because there's a lot
of complexity going on here, but

151
00:07:31.420 --> 00:07:34.091
it's actually testing the right
thing at the right moment.

152
00:07:34.091 --> 00:07:41.130
Copy, paste it, do args, isn't it args?

153
00:07:41.130 --> 00:07:42.363
Why is it saying arc?

154
00:07:42.363 --> 00:07:43.770
What did we call it?

155
00:07:43.770 --> 00:07:45.527
Yeah, we only have an operation.

156
00:07:45.527 --> 00:07:48.498
We don't even have to test
the args because it is a part of

157
00:07:48.498 --> 00:07:49.838
the operation, right?

158
00:07:49.838 --> 00:07:52.885
We use the enum type,
boom, it's beautiful.

159
00:07:52.885 --> 00:07:54.365
Let's grab that again, do it again.

160
00:07:54.365 --> 00:07:57.426
We're not gonna abstract this one
out because I always just find

161
00:07:57.426 --> 00:08:00.385
abstracting things out often can
lead to some amount of pain.

162
00:08:00.385 --> 00:08:02.140
So let's go print key.

163
00:08:02.140 --> 00:08:04.499
Let's have a nice vector of foo,

164
00:08:04.499 --> 00:08:09.823
which means we should be getting
an operation print with some foo, right?

165
00:08:09.823 --> 00:08:11.701
Only a single key should be happening.

166
00:08:11.701 --> 00:08:15.875
Of course, whenever you do this,
notice what it's telling us to do here,

167
00:08:15.875 --> 00:08:19.013
is that we aren't providing a string,
remember that.

168
00:08:19.013 --> 00:08:22.937
What are we providing,
does anyone remember the exact type?

169
00:08:22.937 --> 00:08:27.172
It is an ampersand static,
it's a static lifetime string,

170
00:08:27.172 --> 00:08:31.085
it's a static lifetime
reference to a string, right?

171
00:08:31.085 --> 00:08:35.331
So we can just do a nice little to_string,
all right, if you wanna get rid of that.

172
00:08:35.331 --> 00:08:39.563
There we go, it's now a string, I've made
a copy, it's beautiful, it's now ours.

173
00:08:39.563 --> 00:08:44.506
We can also do something as wonderful
as into that should also work.

174
00:08:44.506 --> 00:08:49.074
And we can also use a constructor
string from, look at that,

175
00:08:49.074 --> 00:08:52.309
all of it, wonderful, they all work out.

176
00:08:52.309 --> 00:08:55.459
You can kinda choose the level
in which you want to do this.

177
00:08:55.459 --> 00:08:59.670
We can just use the constructor for
this one cuz hey, why not, right?

178
00:08:59.670 --> 00:09:03.900
Let's yank that thing, and you'll notice
down here exact same problem, right?

179
00:09:03.900 --> 00:09:06.631
We have a ampersand reference.

180
00:09:06.631 --> 00:09:10.883
It's a reference to a string,
not the string itself, so I can do that.

181
00:09:10.883 --> 00:09:15.022
And we can paste in this nice yarn
command for a quick second, ignore it.

182
00:09:15.022 --> 00:09:19.668
Since I overrode my yank,
I'm gonna have to go register.

183
00:09:19.668 --> 00:09:21.280
Where are you at?
You're at zero.

184
00:09:21.280 --> 00:09:24.991
Okay, so I can go zero paste,
there we go, beautiful.

185
00:09:27.928 --> 00:09:34.600
One more, yes, and of course, a comma.

186
00:09:34.600 --> 00:09:35.930
Now what did I do here?

187
00:09:35.930 --> 00:09:38.090
I've done something wrong here, let's see.

188
00:09:39.828 --> 00:09:43.457
Yeah, look at that, there's even one more
parenthesis, a lot of parentheses there,

189
00:09:43.457 --> 00:09:46.360
it's almost turning into Lisp
at this point, but we got it.

190
00:09:46.360 --> 00:09:49.660
Look at that and now notice we get
a warning, why are we getting the warning?

191
00:09:49.660 --> 00:09:50.920
What did we forget to do?

192
00:09:52.170 --> 00:09:53.380
&gt;&gt; The test tree.

193
00:09:53.380 --> 00:09:55.210
&gt;&gt; Boom, yes, the test.

194
00:09:55.210 --> 00:09:58.785
That's why it was unused is because
no one's calling this function,

195
00:09:58.785 --> 00:10:00.187
therefore it's not done.

196
00:10:00.187 --> 00:10:02.460
This testing ensures that
it's gonna get called.

197
00:10:02.460 --> 00:10:04.209
And so it will warn you.

198
00:10:04.209 --> 00:10:06.688
So it gives you some nice
like warnings along the way.

199
00:10:06.688 --> 00:10:08.340
This is a very nice one because honestly,

200
00:10:08.340 --> 00:10:10.565
I would have just personally
missed it myself.

201
00:10:10.565 --> 00:10:14.620
That may have looked like it was planned,
but it was unplanned, and

202
00:10:14.620 --> 00:10:17.196
it's part of it, key value, there we go.

203
00:10:17.196 --> 00:10:20.435
We're gonna add a key value, and
do the exact same thing here.

204
00:10:21.520 --> 00:10:25.474
I'm gonna do bar, and of course, add.

205
00:10:25.474 --> 00:10:28.467
So as long as I do these things I
should be able to now go down low,

206
00:10:28.467 --> 00:10:31.531
change my operation to add,
have two strings, see how it goes.

207
00:10:31.531 --> 00:10:34.346
I'm gonna keep on using the string
constructor for now, it's very,

208
00:10:34.346 --> 00:10:35.451
very clear for everybody.

209
00:10:35.451 --> 00:10:38.553
And you can see that you
are creating something.

210
00:10:38.553 --> 00:10:42.116
So when you do into or to_string,
you're creating something, right,

211
00:10:42.116 --> 00:10:44.306
you're not just simply getting it for
free.

212
00:10:44.306 --> 00:10:46.450
So let's yank that.

213
00:10:46.450 --> 00:10:50.010
I'm gonna jump over here and so
we're no longer in print land, so

214
00:10:50.010 --> 00:10:52.610
let's jump over to add,
and what did add take?

215
00:10:52.610 --> 00:10:55.126
Well add took two strings, right?

216
00:10:55.126 --> 00:11:00.094
So let's jump up here, I'll grab those
two strings, paste them right here, and

217
00:11:00.094 --> 00:11:01.470
that is the end of add.

218
00:11:01.470 --> 00:11:03.160
That should be the end of opts.

219
00:11:03.160 --> 00:11:05.419
That should be the semicolon
it's always wanted.

220
00:11:05.419 --> 00:11:06.395
There we go.

221
00:11:06.395 --> 00:11:07.291
That is our add operation.

222
00:11:07.291 --> 00:11:10.415
And it's also really convenient because
now we're not working with this weird list

223
00:11:10.415 --> 00:11:13.068
of strings, we actually have a very
concrete type for each one of them.

224
00:11:13.068 --> 00:11:16.092
And all of our methods can just
take in this operation, so

225
00:11:16.092 --> 00:11:18.305
it's actually pretty clean right here.

226
00:11:18.305 --> 00:11:24.618
Awesome, let's do the exact same thing for
remove, don't forget to test.

227
00:11:24.618 --> 00:11:28.008
There we go fa, do a little remove.

228
00:11:28.008 --> 00:11:31.626
For whatever reason,
I did all that, remove that.

229
00:11:31.626 --> 00:11:35.937
Classic remove that one,
jump over here, fa remove.

230
00:11:35.937 --> 00:11:40.517
There we go, remove is just a single
string, it doesn't have a key value,

231
00:11:40.517 --> 00:11:41.183
awesome.

232
00:11:41.183 --> 00:11:43.742
We've now done all
the testing we need to do.

233
00:11:43.742 --> 00:11:46.799
And if I've done everything beautifully,
it should just run.

234
00:11:46.799 --> 00:11:50.137
But I did not do everything beautifully,
so what happened here?

235
00:11:50.137 --> 00:11:51.948
Well we should be able to find out, right?

236
00:11:51.948 --> 00:11:55.075
So we can actually tell right
here that this happened.

237
00:11:55.075 --> 00:11:57.999
So let's go look at what happened here.

238
00:11:57.999 --> 00:12:00.334
I look right up here and
I'll see, it's an add.

239
00:12:00.334 --> 00:12:03.889
But let's look at the stack trace cuz I
do actually wanna see did we actually

240
00:12:03.889 --> 00:12:04.634
get a good one.

241
00:12:04.634 --> 00:12:07.204
Well notice that we only get
a very small one, right?

242
00:12:07.204 --> 00:12:09.724
It doesn't give us a huge
amount of information, but

243
00:12:09.724 --> 00:12:12.240
there is a nice little
back trace we can add..

244
00:12:12.240 --> 00:12:19.192
So if you were to execute this, you could
also add RUST_BACKTRACE=1, and do that.

245
00:12:19.192 --> 00:12:22.356
And you're just gonna get
a much larger back trace.

246
00:12:22.356 --> 00:12:25.273
As you can see, there's quite
a bit of things happening here.

247
00:12:25.273 --> 00:12:29.415
But for you, it probably doesn't matter
all that much, because your errors

248
00:12:29.415 --> 00:12:33.190
right here, and it's pretty clear
what's happening at that point.

249
00:12:33.190 --> 00:12:36.974
Since we're doing an inline asserted
error, you're gonna get just a huge stack

250
00:12:36.974 --> 00:12:40.730
of just macro calls and things that
are happening underneath the hood.

251
00:12:40.730 --> 00:12:42.840
That shouldn't be too concerning for you.

252
00:12:42.840 --> 00:12:46.649
So there we go, that should be
fixed at this point, I believe.

253
00:12:46.649 --> 00:12:49.351
I'm just gonna have to jump up here and
do rm foo.

254
00:12:49.351 --> 00:12:52.870
That should turn it into that beautiful
one, I'll keep the back trace on.

255
00:12:52.870 --> 00:12:56.580
Hey, look at that, is that a first try,
that's pretty much a first try.

256
00:12:56.580 --> 00:12:59.280
I don't know who's counting,
but I feel like that is one.

