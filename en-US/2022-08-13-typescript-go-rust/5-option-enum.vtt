WEBVTT

1
00:00:00.000 --> 00:00:01.742
I'm gonna do something really quick,

2
00:00:01.742 --> 00:00:04.288
cuz I do need to kind of speed
this section up a little bit.

3
00:00:04.288 --> 00:00:06.937
I don't know, I always underestimate
how much time things take.

4
00:00:06.937 --> 00:00:11.466
But I'm gonna implement the option
enough in a small fashion right now.

5
00:00:11.466 --> 00:00:14.663
So we can kinda see that there's
nothing actually magical happening.

6
00:00:14.663 --> 00:00:17.112
And you can do this yourself in rust.

7
00:00:17.112 --> 00:00:19.715
And so I'm even try to do
something that I didn't practice,

8
00:00:19.715 --> 00:00:21.203
just to see what happens, right?

9
00:00:21.203 --> 00:00:26.927
So we're gonna go like this, enum Option2
and it's gonna take in a generic.

10
00:00:26.927 --> 00:00:28.697
And I'm simply gonna have a None.

11
00:00:28.697 --> 00:00:31.817
There's a reason why you always
put your empty value up the top.

12
00:00:31.817 --> 00:00:35.564
There's like this special memory
optimization that when you read too many

13
00:00:35.564 --> 00:00:37.172
lists, you can learn about it.

14
00:00:37.172 --> 00:00:40.461
But when you're learning a language,
don't care about the optimizations.

15
00:00:40.461 --> 00:00:44.248
You're just trying to learn the language,
then learn the environment then get good

16
00:00:44.248 --> 00:00:46.559
at using the language in
a speedy practical sense.

17
00:00:46.559 --> 00:00:50.187
And then we'll have Sone,
which will take a T, there we go.

18
00:00:50.187 --> 00:00:52.562
All right, so we have this very
beautiful option right here.

19
00:00:52.562 --> 00:00:56.792
Now here's one thing that
makes rust super awesome,

20
00:00:56.792 --> 00:01:02.903
is that I can use the keyword impl and
then I can actually impl on the option2.

21
00:01:02.903 --> 00:01:05.863
Now this is pretty great,
hold on the impl,

22
00:01:05.863 --> 00:01:09.873
needs to have a generic and
the generic exists right there.

23
00:01:09.873 --> 00:01:14.324
So how you read this is effectively
there's an implementation that takes in

24
00:01:14.324 --> 00:01:16.837
a generic and
the generic rest on the type.

25
00:01:16.837 --> 00:01:21.985
And so look at this, that means I can
actually add functions to my enum.

26
00:01:21.985 --> 00:01:27.023
Now this is like my favorite part about
rust and it also exists in go as well but

27
00:01:27.023 --> 00:01:32.488
you can't do with enums, is that functions
are added after you declare the type.

28
00:01:32.488 --> 00:01:35.784
And this is kinda different
versus classes in JavaScript.

29
00:01:35.784 --> 00:01:38.276
You define your class once,
and that's what it is.

30
00:01:38.276 --> 00:01:43.035
So if you need to add additional behavior,
you're either doing inheritance or

31
00:01:43.035 --> 00:01:44.675
making your class bigger.

32
00:01:44.675 --> 00:01:47.203
Whereas with rust you don't do it
that way, it's it's different.

33
00:01:47.203 --> 00:01:50.848
I have now specified my type,
now I'm specifying my functions.

34
00:01:50.848 --> 00:01:54.036
And this doesn't sound like it's
the greatest thing ever, but

35
00:01:54.036 --> 00:01:56.574
when we start working with strings or
iterators and

36
00:01:56.574 --> 00:02:00.706
think like that I actually becomes super
cool because you can start specifying this

37
00:02:00.706 --> 00:02:03.147
additional behavior on
top of the of your class.

38
00:02:03.147 --> 00:02:09.362
It reminds me lot the goal of react
with user effect use state know this,

39
00:02:09.362 --> 00:02:14.869
is that you gonna attach behaviors
to your component, right?

40
00:02:14.869 --> 00:02:17.582
In reality,
it's kind of like here's my class, and

41
00:02:17.582 --> 00:02:20.899
then here's all my extra
properties coming in afterwards or

42
00:02:20.899 --> 00:02:23.329
my extra methods of how
I get these properties.

43
00:02:23.329 --> 00:02:25.067
So it's very composable.

44
00:02:25.067 --> 00:02:29.100
And so this allows what I feel like is
a bit more composability to your types,

45
00:02:29.100 --> 00:02:32.128
that's something like
TypeScript just doesn't have or

46
00:02:32.128 --> 00:02:34.350
Java if you're more familiar with that.

47
00:02:34.350 --> 00:02:35.598
I don't know about C sharp,

48
00:02:35.598 --> 00:02:38.200
C sharp is a magical language
I haven't seen in a long time.

49
00:02:38.200 --> 00:02:42.504
So let's go like this I'm gonna create
the exact same function that we had before

50
00:02:42.504 --> 00:02:44.668
which is, how about this one, is some.

51
00:02:44.668 --> 00:02:50.295
Now that will tell us is this option
does it have a value cuz in regular

52
00:02:50.295 --> 00:02:56.542
land if I go like this let foo equals
some 5, I can go if foo is some, right?

53
00:02:56.542 --> 00:03:02.960
Is it a value, then I know for
a fact that it's safe to call unwrap.

54
00:03:02.960 --> 00:03:05.144
Now usually it's not
the best way to do this,

55
00:03:05.144 --> 00:03:08.895
you can obviously pattern match the value
out as opposed to doing it this way.

56
00:03:08.895 --> 00:03:11.327
But there you go,
you also have this option.

57
00:03:11.327 --> 00:03:14.012
So I can create the exact
same thing on mine,

58
00:03:14.012 --> 00:03:16.706
where what I need to
return out is a Boolean.

59
00:03:16.706 --> 00:03:21.972
so what I'll do is I'll return
a match of myself, right?

60
00:03:21.972 --> 00:03:25.401
This just means this function
takes a reference to myself or

61
00:03:25.401 --> 00:03:26.715
have the type option.

62
00:03:26.715 --> 00:03:30.594
I'm gonna take a reference to myself,
and I'm going to match on it.

63
00:03:30.594 --> 00:03:34.900
And if I am a None, I'll return false.

64
00:03:34.900 --> 00:03:39.716
And if I am a some of
doesn't matter of anything,

65
00:03:39.716 --> 00:03:42.898
I return burn true, all right?

66
00:03:42.898 --> 00:03:44.657
Mitch match types, no.

67
00:03:44.657 --> 00:03:46.185
What is it?

68
00:03:46.185 --> 00:03:50.078
Okay, so that means I believe it do this.

69
00:03:50.078 --> 00:03:53.918
I have to do this or there's always these
things you got to play around with.

70
00:03:53.918 --> 00:03:57.448
My goodness right here right now,
this expression is this.

71
00:03:57.448 --> 00:04:00.525
Found this, found emum option T type.

72
00:04:00.525 --> 00:04:03.217
We can just do it in a more
simple fashion, right?

73
00:04:03.217 --> 00:04:04.662
We can do this in a more simple fashion.

74
00:04:04.662 --> 00:04:09.689
I can go if let's,
I know exactly why, I'm such a fool.

75
00:04:09.689 --> 00:04:16.455
Option2, right,
remember cuz we've specified our own.

76
00:04:16.455 --> 00:04:20.084
Using the same words sometimes causes
your brain to make silly mistakes,

77
00:04:20.084 --> 00:04:21.143
there we go anyways.

78
00:04:21.143 --> 00:04:27.273
So now my special some2, that right here,
I now have the exact same thing.

79
00:04:27.273 --> 00:04:28.535
Look at that, it works just the same.

80
00:04:28.535 --> 00:04:32.714
This is effectively all options are
underneath the hood is something just like

81
00:04:32.714 --> 00:04:36.464
this, or they just simply have some
sort of enum that looks like this.

82
00:04:36.464 --> 00:04:38.760
And then they have a bunch of
implementations hanging off it.

83
00:04:38.760 --> 00:04:40.111
So you can kind of visualize what it is.

84
00:04:40.111 --> 00:04:43.888
Now, is it exactly this underneath
the hood, probably not.

85
00:04:43.888 --> 00:04:46.462
But can you guess what it looks like?

86
00:04:46.462 --> 00:04:47.459
Yeah, pretty simple.

87
00:04:47.459 --> 00:04:53.747
And if we go like this, some, I can take
this and jump to what it looks like.

88
00:04:53.747 --> 00:04:57.271
Obviously it has a bunch of like
compile time stuff added on top of it.

89
00:04:57.271 --> 00:05:00.691
But as you can see,
it's just an enum, takes type T,

90
00:05:00.691 --> 00:05:04.348
none first cuz remember
the memory optimization some T.

91
00:05:04.348 --> 00:05:07.808
So it's like literally the same thing
that we just built right there.

92
00:05:07.808 --> 00:05:11.415
And I bet you if you look around
you're gonna find a very similar

93
00:05:11.415 --> 00:05:12.922
looking item right here.

94
00:05:12.922 --> 00:05:15.656
And is some, let's see if we can find it.

95
00:05:15.656 --> 00:05:17.791
Look at that,
I don't even know what this thing means.

96
00:05:17.791 --> 00:05:21.136
It has some sort of sweet macro
that does this and there we go.

97
00:05:21.136 --> 00:05:23.988
And so it's almost the exact same thing.

98
00:05:23.988 --> 00:05:25.744
Now you can guess what matches does right?

99
00:05:25.744 --> 00:05:29.475
Matches just simply take self and
is it a some with some?

100
00:05:29.475 --> 00:05:31.287
It just does a pattern match on it, right?

101
00:05:31.287 --> 00:05:31.883
Okay, easy,

102
00:05:31.883 --> 00:05:34.926
we could actually probably even write
that if I could write macros fast.

103
00:05:34.926 --> 00:05:40.106
But that's sweet, right,
none of that should be too hard, right?

104
00:05:40.106 --> 00:05:42.629
Let's see I mean I'm just gonna put a new
main there so we don't have any errors.

105
00:05:42.629 --> 00:05:43.416
So there we go,

106
00:05:43.416 --> 00:05:47.183
we just implemented something that
looks like the option inside of rust.

107
00:05:47.183 --> 00:05:48.274
That's pretty cool, right?

108
00:05:48.274 --> 00:05:50.440
It was super cool being
able to attach methods.

109
00:05:50.440 --> 00:05:52.175
We're gonna do the exact
same concept here.

110
00:05:52.175 --> 00:05:54.494
You guys can program along and
we'll do it.

111
00:05:54.494 --> 00:05:57.747
I'm going to not program this, yeah.

112
00:05:57.747 --> 00:06:02.074
&gt;&gt; Yeah, so
is it impl basically on Java interface?

113
00:06:02.074 --> 00:06:04.867
&gt;&gt; Let's see so,
info would be more like so

114
00:06:04.867 --> 00:06:10.629
to write this equivalent thing in say
TypeScript if this wasn't say this, right?

115
00:06:10.629 --> 00:06:13.048
Because we can't do enums with types.

116
00:06:13.048 --> 00:06:18.932
Impl is a lot the same as doing class
Option2 with a generic on it and

117
00:06:18.932 --> 00:06:22.400
then actually having public is some and

118
00:06:22.400 --> 00:06:26.412
actually having
the concrete value in here.

119
00:06:26.412 --> 00:06:29.950
Impl is just the implementation
of these functions.

120
00:06:29.950 --> 00:06:33.761
And if you want the outside world to
be able to see it outside of your file,

121
00:06:33.761 --> 00:06:36.960
you had the word pub to it cuz
that means that makes it public.

122
00:06:36.960 --> 00:06:41.412
Obviously, It'd be really silly to have
a public function on something that's not

123
00:06:41.412 --> 00:06:42.299
public itself.

124
00:06:42.299 --> 00:06:44.661
So if somebody else wanted to
use yours and import it in,

125
00:06:44.661 --> 00:06:46.234
you'd have to specify it as public.

126
00:06:46.234 --> 00:06:49.466
But there you go, exact same concept.

127
00:06:49.466 --> 00:06:52.001
Results are here you go, here's all this.

128
00:06:52.001 --> 00:06:53.544
We've kind of went over all that.

129
00:06:53.544 --> 00:06:54.424
So pretty radical stuff.

130
00:06:54.424 --> 00:06:55.687
We've already kind of done some questions.

131
00:06:55.687 --> 00:06:57.515
We're gonna keep on moving on.

