WEBVTT

1
00:00:00.000 --> 00:00:01.912
Does it feel overwhelming right now?

2
00:00:01.912 --> 00:00:05.824
Or does it feel like, because most
of these concepts you can derive.

3
00:00:05.824 --> 00:00:12.561
So if I were to do the exact same thing,
this is just class line, is_hory.

4
00:00:12.561 --> 00:00:14.917
And then I just do this .p1.

5
00:00:14.917 --> 00:00:19.137
It's like the same thing, except for
it's split in two locations.

6
00:00:19.137 --> 00:00:25.109
This on the other hand, there's not really
a great version of this in JavaScript.

7
00:00:25.109 --> 00:00:27.896
Because JavaScript I guess
you could have to string.

8
00:00:27.896 --> 00:00:32.532
So if you're from string, there's not
really like a from string method in

9
00:00:32.532 --> 00:00:35.705
the JavaScript world, so
how would I derive that?

10
00:00:35.705 --> 00:00:38.157
I don't know if there's a great
analogous version of this.

11
00:00:38.157 --> 00:00:42.284
But that is effectively if you could parse
in JavaScript and just call.parse or

12
00:00:42.284 --> 00:00:43.893
something, it would be this.

13
00:00:45.230 --> 00:00:47.994
And so, if there are any questions,
great time to do it,

14
00:00:47.994 --> 00:00:49.560
I'm trying to give extra time.

15
00:00:49.560 --> 00:00:52.537
Just because I want to make sure everyone.

16
00:00:52.537 --> 00:00:55.876
There's at least one question
I can feel it deep down.

17
00:00:55.876 --> 00:00:58.935
I can feel it deep down, we got something.

18
00:00:58.935 --> 00:01:04.526
&gt;&gt; Do you have to be aware or take care of
any possible name collisions with traits?

19
00:01:06.881 --> 00:01:10.846
&gt;&gt; No, I don't believe you do.

20
00:01:10.846 --> 00:01:14.731
I do not believe you do cuz they're
actually well, I bet you yes.

21
00:01:14.731 --> 00:01:16.146
You probably do but
you probably don't at the same time.

22
00:01:16.146 --> 00:01:20.865
It depends on what you mean by
name as far as this type of name.

23
00:01:20.865 --> 00:01:21.843
No, I don't believe you do.

24
00:01:21.843 --> 00:01:23.412
I've never actually had a name collision.

25
00:01:23.412 --> 00:01:27.058
But we could pretty much try
to create one pretty easily.

26
00:01:27.058 --> 00:01:31.448
You could have a trait Foo, okay.

27
00:01:31.448 --> 00:01:35.782
I haven't implemented a trait in a long
time so I might actually get this wrong.

28
00:01:35.782 --> 00:01:37.119
And let's go like that.

29
00:01:38.729 --> 00:01:39.765
And so there we go.

30
00:01:42.334 --> 00:01:44.568
And let's have this thing do a usize.

31
00:01:44.568 --> 00:01:48.003
So my guess is that you shouldn't be
able to implement both these things.

32
00:01:48.003 --> 00:01:52.421
So if I did a imple for Foo for Point.

33
00:01:53.800 --> 00:01:55.339
Take that implement this.

34
00:01:58.088 --> 00:02:03.673
Bar for Point and then use usize,

35
00:02:03.673 --> 00:02:08.071
return 5, return true.

36
00:02:08.071 --> 00:02:11.128
Maybe you can't,
I've never actually tried this condition.

37
00:02:11.128 --> 00:02:15.311
This is actually neat I'm trying to
reason about my head of how you would or

38
00:02:15.311 --> 00:02:16.598
what you do with this?

39
00:02:16.598 --> 00:02:22.426
You can make a generic values,
you can actually constrain them to traits.

40
00:02:22.426 --> 00:02:26.466
So theoretically, it would know which
traits to call if you constrain your

41
00:02:26.466 --> 00:02:28.529
function to take in a specific trait.

42
00:02:28.529 --> 00:02:32.927
And so maybe that's why collisions just
simply don't exist in this context,

43
00:02:32.927 --> 00:02:33.801
I don't know.

44
00:02:33.801 --> 00:02:36.679
Personally, that just blew my
mind that you could do that.

45
00:02:36.679 --> 00:02:39.551
But I say fantastic.

46
00:02:39.551 --> 00:02:42.558
&gt;&gt; Can you import traits in enums.

47
00:02:42.558 --> 00:02:46.457
&gt;&gt; Yes, so traits can be on, I believe
they can be on anything you want.

48
00:02:46.457 --> 00:02:50.860
And you can derive that
without looking anything up.

49
00:02:50.860 --> 00:02:55.964
Here's an easy way to understand how you
can derive it there a little pun there.

50
00:02:55.964 --> 00:03:00.330
So I just opened up a new one of these
that happens every now and then.

51
00:03:00.330 --> 00:03:04.089
So Debug is a trait.

52
00:03:04.089 --> 00:03:06.330
I just derived my Debug.

53
00:03:06.330 --> 00:03:08.282
There's traits PartialEq, right.

54
00:03:08.282 --> 00:03:12.575
You can derive these things and
it works just fine on enums

55
00:03:12.575 --> 00:03:17.059
which means just by pure
empirical evidence, yes you can.

56
00:03:17.059 --> 00:03:18.246
And the answer is yes again.

57
00:03:18.246 --> 00:03:20.369
Enums instructs you can
have methods on them,

58
00:03:20.369 --> 00:03:23.317
I've shown you how to do impose on
enums you can also do it there.

59
00:03:23.317 --> 00:03:26.662
So I can create my own
personalized display for an enum.

60
00:03:26.662 --> 00:03:30.628
Just because if you're printing it out,
you may want it to look really nice.

61
00:03:30.628 --> 00:03:33.416
And so it'd be silly if I was
constrained to not be able to do that,

62
00:03:33.416 --> 00:03:35.518
because then I could never
actually display it.

63
00:03:37.165 --> 00:03:40.785
So this whole trait,
struct enum dance is pretty cool.

64
00:03:40.785 --> 00:03:45.530
At least I personally think this actually
makes it a really convenient language.

65
00:03:45.530 --> 00:03:48.625
It makes it really easy to implement
things that are just kind of a little

66
00:03:48.625 --> 00:03:49.204
different.

67
00:03:50.773 --> 00:03:53.800
&gt;&gt; What if you parse
ampersand self to Foo and

68
00:03:53.800 --> 00:03:57.875
bar because right now those are Foo,
Foo and bar, bar?

69
00:03:57.875 --> 00:04:00.274
&gt;&gt; I like it, let's find out.

70
00:04:00.274 --> 00:04:03.421
Like I said, I've never tried this method,
but this seems exciting, so yes.

71
00:04:03.421 --> 00:04:09.241
So in other words, if this thing
existed on the instance if you will.

72
00:04:11.307 --> 00:04:13.640
I still don't think it's gonna
make much of a difference.

73
00:04:17.618 --> 00:04:20.982
So it doesn't appear to make
much of the difference.

74
00:04:20.982 --> 00:04:22.759
Because there you go,
you have these two things.

75
00:04:22.759 --> 00:04:24.993
I'm curious how this actually plays out.

76
00:04:24.993 --> 00:04:27.418
But my guess is you'd want
to do something like this.

77
00:04:27.418 --> 00:04:31.816
If you were to do this, let's go T,

78
00:04:31.816 --> 00:04:35.197
I believe I can just go Bar.

79
00:04:35.197 --> 00:04:37.307
I haven't written one of these in a while,

80
00:04:37.307 --> 00:04:40.724
so doing this on the spot can be
a little interesting let's find out.

81
00:04:40.724 --> 00:04:43.527
So I should be able to go with foo.

82
00:04:43.527 --> 00:04:47.951
And it will know,
foo returns usize, so there you go.

83
00:04:47.951 --> 00:04:51.550
And it can tell it's
calling the correct method.

84
00:04:51.550 --> 00:04:57.168
And so if I were to change this
into a foo, foo now returns a bool.

85
00:04:57.168 --> 00:04:59.625
Because I've constrained
it to the specific type.

86
00:04:59.625 --> 00:05:01.061
So I think that's why it works.

87
00:05:01.061 --> 00:05:03.341
I've to actually go read why that?

88
00:05:03.341 --> 00:05:04.754
It just seems like such a funny condition.

89
00:05:06.192 --> 00:05:07.668
It's actually a really great question.

90
00:05:08.919 --> 00:05:11.794
I would have never thought to ever
make my methods the same name ever,

91
00:05:11.794 --> 00:05:13.793
because that sounds like
it's gonna collide.

92
00:05:13.793 --> 00:05:17.880
&gt;&gt; Can you overwrite a trait that
already exists like a system library?

93
00:05:17.880 --> 00:05:22.703
And if so, what trait will be
called from the system then?

94
00:05:22.703 --> 00:05:26.601
That I don't know the specifics,
I know that there's rules around traits.

95
00:05:26.601 --> 00:05:29.663
Foreign types foreign trait
you can't do those things.

96
00:05:29.663 --> 00:05:32.066
But as far as if it already
had implementation,

97
00:05:32.066 --> 00:05:36.164
you are implementing a trait on a foreign
object which I do not believe you can do.

98
00:05:36.164 --> 00:05:40.118
I don't believe you can do that
foreign trait on a foreign object.

99
00:05:40.118 --> 00:05:41.668
And so that's like the constraint.

100
00:05:41.668 --> 00:05:44.967
And so just reasoning about what I do
know about Russ, I don't think you can.

101
00:05:44.967 --> 00:05:52.426
I couldn't implement because you
can't impl on what is it thing if it?

102
00:05:52.426 --> 00:05:56.691
Lets say std::f ::File,

103
00:05:56.691 --> 00:06:02.325
ipml Display for this and there you go.

104
00:06:02.325 --> 00:06:07.027
Because we neither own Display nor
do we own File.

105
00:06:07.027 --> 00:06:08.900
And so, we cannot do that.

106
00:06:10.593 --> 00:06:14.576
If I'm not mistaken you cannot do that.

107
00:06:14.576 --> 00:06:18.303
Only the trait defining the current
crate can be implemented for

108
00:06:18.303 --> 00:06:20.104
types to find out of the crate.

109
00:06:20.104 --> 00:06:22.553
And so my guess is no.

110
00:06:22.553 --> 00:06:25.176
But I'd have to think more,
I haven't gotten into that kind of stuff.

111
00:06:25.176 --> 00:06:28.670
Plus I think in general programming speak,

112
00:06:28.670 --> 00:06:32.826
you should never reimplement
standard behaviors,

113
00:06:32.826 --> 00:06:36.709
that's always considered such a no,
no [LAUGH].

114
00:06:36.709 --> 00:06:39.699
If printing a number changed
from one system to the next,

115
00:06:39.699 --> 00:06:41.833
that would just be an awful experience.

116
00:06:43.622 --> 00:06:46.182
What a very fun bug to debug?

117
00:06:46.182 --> 00:06:47.854
Really good somebody.

118
00:06:47.854 --> 00:06:52.147
&gt;&gt; What about bar plus foo?

119
00:06:52.147 --> 00:06:54.161
&gt;&gt; I wonder if that would do it?

120
00:06:54.161 --> 00:06:54.991
You could potentially do it.

121
00:06:54.991 --> 00:07:00.402
So what he's saying there is that, I like
all these, these are great questions.

122
00:07:00.402 --> 00:07:03.353
We may have to move on just for
time time sake at this point but

123
00:07:03.353 --> 00:07:04.490
actually am curious.

124
00:07:08.589 --> 00:07:09.842
What does this thing do?

125
00:07:18.990 --> 00:07:22.010
Looks like it's grabbing the first one.

126
00:07:22.010 --> 00:07:23.063
Cuz I just switched.

127
00:07:23.063 --> 00:07:27.177
So what this means is that this
can be a trait object that is

128
00:07:27.177 --> 00:07:30.363
constrained that has to be both Bar and
foo.

129
00:07:31.480 --> 00:07:35.023
And so that's what the plus sign means,
very weird syntax.

130
00:07:35.023 --> 00:07:39.066
But it looks like it's constraining it to
Bar first because Bar was the first one

131
00:07:39.066 --> 00:07:41.067
mentioned when I swapped them around.

132
00:07:42.871 --> 00:07:46.555
This is such Twitch chat,
just ask every last potential question.

133
00:07:46.555 --> 00:07:48.912
We got to move on but this is awesome.

134
00:07:48.912 --> 00:07:52.829
I never played around with this area but
it looks like you can still do it.

135
00:07:52.829 --> 00:07:55.519
At least it appears you can still do it.

136
00:07:55.519 --> 00:07:59.156
&gt;&gt; The Bar plus foo was from Twitch chat.

137
00:07:59.156 --> 00:07:59.926
&gt;&gt; Yea.

138
00:07:59.926 --> 00:08:01.924
But the rest were from
the Frontend Masters chat,

139
00:08:01.924 --> 00:08:02.516
&gt;&gt; Okay,

140
00:08:02.516 --> 00:08:03.942
&gt;&gt; Just letting me know that.

141
00:08:03.942 --> 00:08:06.181
&gt;&gt; Frontend Masters,
you guys are great, I like you guys.

142
00:08:06.181 --> 00:08:09.514
Twitch chat, I'm still jury's still out
on you guys, I don't know about that.

