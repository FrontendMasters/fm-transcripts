WEBVTT

1
00:00:00.000 --> 00:00:01.976
Do you guys wanna do Go?

2
00:00:01.976 --> 00:00:03.046
You wanna move on?

3
00:00:03.046 --> 00:00:05.178
I'll let you guys decide.

4
00:00:05.178 --> 00:00:07.018
It's totally okay if you want to,
don't feel bad.

5
00:00:07.018 --> 00:00:07.747
&gt;&gt; Yes.

6
00:00:07.747 --> 00:00:08.887
&gt;&gt; Yeah, let's go.

7
00:00:08.887 --> 00:00:10.355
Let's go.

8
00:00:12.729 --> 00:00:15.158
That was the closest Tom Cruise
moment I'll ever have.

9
00:00:15.158 --> 00:00:16.413
All right, here we go.

10
00:00:16.413 --> 00:00:18.706
I'm not even sure what that actually
technically means but you can imagine.

11
00:00:18.706 --> 00:00:22.307
All right, p3 let's go and
let's do main.go.

12
00:00:22.307 --> 00:00:25.933
And so we're gonna do the exact
same thing again, package.main.

13
00:00:25.933 --> 00:00:27.836
And now we need to create the same enum,
right?

14
00:00:27.836 --> 00:00:30.747
Let's create the exact same
enum that we were doing before.

15
00:00:30.747 --> 00:00:36.737
And so we'll do a type Thing = int,

16
00:00:36.737 --> 00:00:43.541
const, tree, snow thing equals iota.

17
00:00:43.541 --> 00:00:45.832
And of course,
get rid of that, there we go.

18
00:00:45.832 --> 00:00:48.960
So we now have our enum,
tree is 0, snow is 1.

19
00:00:48.960 --> 00:00:54.762
We can now do our func getInput,
pass back the string and

20
00:00:54.762 --> 00:00:58.228
go back to our previous project.

21
00:00:58.228 --> 00:01:02.720
Make sure we have this beautiful piece
of code right there and redo it, but

22
00:01:02.720 --> 00:01:05.047
this time actually copy and paste it.

23
00:01:07.189 --> 00:01:07.969
There we go.

24
00:01:07.969 --> 00:01:10.182
We have this beautiful
piece of code right here.

25
00:01:12.225 --> 00:01:15.865
And now we just need to take this, split
it by line, and then we can do the exact

26
00:01:15.865 --> 00:01:18.735
same thing or we can just look
at the individual characters.

27
00:01:18.735 --> 00:01:20.591
So first, let's go like this.

28
00:01:20.591 --> 00:01:24.187
Func main, do that,
brings us into the middle,

29
00:01:24.187 --> 00:01:27.270
go lines =, actually we can just go for.

30
00:01:27.270 --> 00:01:29.938
We do want our row, remember,
we want our row this time.

31
00:01:29.938 --> 00:01:34.528
So let's include the index
into our getInput array.

32
00:01:34.528 --> 00:01:39.794
So for row line = range getInput, right?

33
00:01:39.794 --> 00:01:41.394
And then now, that's not quite it,

34
00:01:41.394 --> 00:01:43.784
because that's gonna walk
over every single character.

35
00:01:43.784 --> 00:01:46.781
And you can tell right here,
it's a rune or a character, right?

36
00:01:46.781 --> 00:01:49.520
That's what they call a character.

37
00:01:49.520 --> 00:01:54.159
So we're gonna go strings
just like before,

38
00:01:54.159 --> 00:01:57.706
Split getInput newline, right?

39
00:01:57.706 --> 00:01:59.429
There we go, awesome.

40
00:02:01.830 --> 00:02:04.597
So now it's gonna let us know we're
not using these two characters, so

41
00:02:04.597 --> 00:02:05.758
let's make sure we use them.

42
00:02:05.758 --> 00:02:09.283
But now we're gonna go over each single
line and what do we need on the outside?

43
00:02:09.283 --> 00:02:11.474
We probably need a tree count, right?

44
00:02:11.474 --> 00:02:14.148
Let's make sure we have a tree count so
we can keep track of this.

45
00:02:14.148 --> 00:02:16.994
And do we need a column length?

46
00:02:16.994 --> 00:02:21.846
I mean, technically we don't since
we have each line right here.

47
00:02:21.846 --> 00:02:25.072
We actually already have
the column length right there, so

48
00:02:25.072 --> 00:02:29.393
we can just call length on that thing and
use that as our modular operator instead

49
00:02:29.393 --> 00:02:33.024
of doing this little bit of extra
bookkeeping right here, right?

50
00:02:33.024 --> 00:02:35.527
We don't actually technically need that.

51
00:02:35.527 --> 00:02:39.952
Again, another just little technical
trick about this, but it works out.

52
00:02:39.952 --> 00:02:45.274
So let's do the exact same
thing that we were gonna do.

53
00:02:45.274 --> 00:02:49.697
Let's take the line, the current line, and
now what are we gonna do with this thing?

54
00:02:49.697 --> 00:02:50.474
What is this thing?

55
00:02:50.474 --> 00:02:52.509
It is a string, so
can we get the character?

56
00:02:52.509 --> 00:02:54.846
Can we index in our, can we do that?

57
00:02:54.846 --> 00:02:57.847
So let's just try it out, right?

58
00:02:57.847 --> 00:03:00.122
A is declared not used, awesome,
so we can actually use that.

59
00:03:00.122 --> 00:03:02.627
So I was right,
I must have just been misreading my error.

60
00:03:02.627 --> 00:03:09.482
Fantastic, so let's go this times 3,
modulo length of line.

61
00:03:09.482 --> 00:03:13.622
So unfortunately in Go,
it doesn't have a .length property.

62
00:03:13.622 --> 00:03:15.895
Remember we always call
functions on everything.

63
00:03:15.895 --> 00:03:18.152
So length is the function you call.

64
00:03:18.152 --> 00:03:20.313
It should be very reminiscent of Python,
right?

65
00:03:20.313 --> 00:03:21.396
This looks like Python.

66
00:03:21.396 --> 00:03:25.429
Even if you don't know Python you kind
of actually know a little bit of Python.

67
00:03:25.429 --> 00:03:28.602
I always find that I struggle with it but
at the same time I can still do things.

68
00:03:28.602 --> 00:03:33.584
All right, so
now we know this character at this point,

69
00:03:33.584 --> 00:03:40.156
which means that we should be able to
just go, if this thing equals pound.

70
00:03:40.156 --> 00:03:43.213
Well, what do we do here and
then of course can't do that, right?

71
00:03:43.213 --> 00:03:45.088
So what is this thing asking us?

72
00:03:45.088 --> 00:03:46.565
I already know the problem,

73
00:03:46.565 --> 00:03:50.083
can convert this thing to a byte is
what we're kind of arguing with.

74
00:03:50.083 --> 00:03:51.554
So let's go like this.

75
00:03:51.554 --> 00:03:54.963
Since we are using ASCII and
we know it's ASCII,

76
00:03:54.963 --> 00:03:58.883
we can convert this and
this should all work out nicely.

77
00:03:58.883 --> 00:04:01.813
And so
we should be able to go treeCount += 1.

78
00:04:01.813 --> 00:04:08.183
Awesome, format, Printf treeCount %v,

79
00:04:08.183 --> 00:04:11.290
on those treeCount.

80
00:04:11.290 --> 00:04:15.114
Awesome, so theoretically this should all
effectively do what we're trying to do.

81
00:04:15.114 --> 00:04:18.007
We're just walking this simple array and
that is it.

82
00:04:18.007 --> 00:04:20.469
So we've kind of reduced
the problem quite a bit and

83
00:04:20.469 --> 00:04:22.541
it's something actually rather simple.

84
00:04:22.541 --> 00:04:26.722
So long as I didn't just
completely screw up something,

85
00:04:26.722 --> 00:04:28.994
we should be able to go run p3.

86
00:04:28.994 --> 00:04:33.250
There you go, never leave room for
yourself screwing something up, but

87
00:04:33.250 --> 00:04:35.642
there we go, very very simple, right?

88
00:04:35.642 --> 00:04:39.847
It was shockingly simple so the problems
again, I didn't wanna use too many tricks

89
00:04:39.847 --> 00:04:43.767
but it gets progressively easier as you
know the tricks to do these problems.

90
00:04:43.767 --> 00:04:46.163
And so there you go,
very simple, very nice.

91
00:04:46.163 --> 00:04:49.218
This thing is just because
when you index into a string,

92
00:04:49.218 --> 00:04:52.350
you're indexing into a byte
because strings are UTF8.

93
00:04:52.350 --> 00:04:56.075
And you can imagine that if you
have a multi-width character,

94
00:04:56.075 --> 00:04:59.165
such as one of the characters
in this one right here,

95
00:04:59.165 --> 00:05:03.536
this is not an 8-bit character as
I assume this is 16-bit character.

96
00:05:03.536 --> 00:05:06.316
Therefore, if you index into the fifth
byte, what are you gonna get?

97
00:05:06.316 --> 00:05:08.702
You're gonna get a half a character,
so it's totally screwed up.

98
00:05:08.702 --> 00:05:11.224
So that's why it's always
dangerous to work with these.

99
00:05:11.224 --> 00:05:13.860
Often people use runes as
a way to work with them.

100
00:05:13.860 --> 00:05:17.086
A rune is the thing that
encompasses the entire character.

101
00:05:17.086 --> 00:05:20.624
There we go, it sounds really weird,
sounds like Runescape,

102
00:05:20.624 --> 00:05:22.041
I don't trust it at all.

103
00:05:22.041 --> 00:05:24.064
And there we go, so
let's go over to Rust and

104
00:05:24.064 --> 00:05:26.100
let's solve this last problem using Rust.

