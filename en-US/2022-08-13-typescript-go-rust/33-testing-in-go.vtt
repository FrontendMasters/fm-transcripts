WEBVTT

1
00:00:00.350 --> 00:00:02.863
Let's keep on going,
let's jump over to go testing.

2
00:00:02.863 --> 00:00:05.441
Let's see if I put anything,
anything a little special,

3
00:00:05.441 --> 00:00:08.662
I think I'm not sure, look that,
I even put in this error right here.

4
00:00:08.662 --> 00:00:11.664
Look at that, I was smart enough
to catch myself, awesome.

5
00:00:11.664 --> 00:00:12.816
So let's go next.

6
00:00:12.816 --> 00:00:15.418
And we're gonna do the exact same thing.

7
00:00:15.418 --> 00:00:19.019
Let's see, why did I add in go compare?

8
00:00:19.019 --> 00:00:21.465
Here we go,
I actually added in one you could go get.

9
00:00:21.465 --> 00:00:26.604
Here's a nice one, go compare, you could
use that or not gonna be using that.

10
00:00:26.604 --> 00:00:31.276
Remember go has its own testing kind
of harness put into the gocode.

11
00:00:31.276 --> 00:00:35.034
But it's pretty cumbersome
like the rest of Go,

12
00:00:35.034 --> 00:00:40.821
there whole not equal nil error problem,
all that a lot more boilerplate.

13
00:00:40.821 --> 00:00:43.476
This just makes it a lot nicer,
we're just not gonna use it.

14
00:00:43.476 --> 00:00:46.842
So let's create another config file,
or yeah,

15
00:00:46.842 --> 00:00:50.956
another test file called config_test for
the go project.

16
00:00:50.956 --> 00:00:54.620
I know that transition was
a little abrupt, sorry about that.

17
00:00:54.620 --> 00:00:55.740
We're now in go run, right.

18
00:00:57.070 --> 00:01:02.939
All right, so let's go over to package,
projector, create a file, config.

19
00:01:02.939 --> 00:01:05.647
Test.go, awesome.

20
00:01:05.647 --> 00:01:07.460
Of course, so
now what is your package name?

21
00:01:07.460 --> 00:01:09.100
Well, you have two options here.

22
00:01:09.100 --> 00:01:12.290
And I think this is kinda
like a philosophy problem.

23
00:01:12.290 --> 00:01:16.098
I personally always do the name of
the package underscore test, the LSP will

24
00:01:16.098 --> 00:01:20.560
automatically kind of let you know that
that's one of your two main options here.

25
00:01:20.560 --> 00:01:25.272
The reason why you should do that is that
it prevents you from being able to test

26
00:01:25.272 --> 00:01:26.080
internals.

27
00:01:26.080 --> 00:01:30.194
Once again, I just got done giving
this whole soliloquy about this but

28
00:01:30.194 --> 00:01:33.480
I'm blackbox tester,
I just think it's the way to go.

29
00:01:33.480 --> 00:01:37.654
And some people like more of that
gray box, white box kind of approach,

30
00:01:37.654 --> 00:01:40.415
I always feel like it's just dangerous.

31
00:01:40.415 --> 00:01:41.955
So for me, always do that.

32
00:01:41.955 --> 00:01:45.849
It's very obvious what I'm trying to test
in this file because already I'm naming it

33
00:01:45.849 --> 00:01:47.645
the same as the file.

34
00:01:47.645 --> 00:01:49.411
But I can only do public interfaces.

35
00:01:49.411 --> 00:01:52.081
&gt;&gt; Can you explain what you
mean by black box testing?

36
00:01:52.081 --> 00:01:53.437
&gt;&gt; Black box testing effectively,

37
00:01:53.437 --> 00:01:56.641
I believe it's named after the airplane
which I think black boxes are orange.

38
00:01:56.641 --> 00:02:00.658
But there's just this device on airplane
that gathers data when the airplane

39
00:02:00.658 --> 00:02:04.290
crashes and everybody is killed,
nobody knows what happened.

40
00:02:04.290 --> 00:02:09.035
They grab out the black box and they can
effectively see what data comes out and

41
00:02:09.035 --> 00:02:12.340
goes, this must have happened over here.

42
00:02:12.340 --> 00:02:17.340
And so, it's kinda named after that where,
I don't know what's going on internally.

43
00:02:17.340 --> 00:02:19.092
I just know what I can
put into the system and

44
00:02:19.092 --> 00:02:20.900
what I expect to come
back out of the system.

45
00:02:20.900 --> 00:02:23.900
So, I don't really know,
it's just a void area.

46
00:02:23.900 --> 00:02:25.500
You don't have to know what it is.

47
00:02:25.500 --> 00:02:28.080
And so white box obviously is
like the opposite of black box.

48
00:02:28.080 --> 00:02:31.695
So you can see into the system, is
generally how it's been explained at least

49
00:02:31.695 --> 00:02:34.933
to me and those were for my college years,
we were using those terms.

50
00:02:34.933 --> 00:02:39.705
So that's ten years ago, so I don't
know if new suite testing terms have

51
00:02:39.705 --> 00:02:42.916
even better things that
are more descriptive but

52
00:02:42.916 --> 00:02:46.700
that's how we talked about airplanes and
great stuff.

53
00:02:46.700 --> 00:02:48.170
Orange is the new black box testing.

54
00:02:48.170 --> 00:02:48.880
This is true.

55
00:02:48.880 --> 00:02:50.850
This is an actual fact.

56
00:02:50.850 --> 00:02:53.526
All right, so let's write the config test.

57
00:02:53.526 --> 00:02:57.144
Now again, go is a bit more verbose
if you don't use a library, but

58
00:02:57.144 --> 00:03:00.240
we're gonna deal with it
because we are champions.

59
00:03:00.240 --> 00:03:02.743
So all of your functions
to start off with test.

60
00:03:02.743 --> 00:03:06.467
You'll even see that tab 9, great
auto complete product will go off and

61
00:03:06.467 --> 00:03:09.930
say, hey, this is probably
what you're trying to type.

62
00:03:09.930 --> 00:03:11.640
I'm just gonna say yes on it.

63
00:03:11.640 --> 00:03:14.510
And let's just, hey, why not?

64
00:03:14.510 --> 00:03:15.290
That seems good.

65
00:03:15.290 --> 00:03:19.204
So let's go TestConfigPrint, right?

66
00:03:19.204 --> 00:03:22.410
Awesome, of course,
you have to include the testing library.

67
00:03:22.410 --> 00:03:27.165
Effectively this is just a library that
is part of the STD that they provide,

68
00:03:27.165 --> 00:03:30.358
you will be able to run this
project via Go test, and

69
00:03:30.358 --> 00:03:34.002
you just provide a path or
you can test everything.

70
00:03:34.002 --> 00:03:36.492
And there you go, now we're ready
to start testing this function.

71
00:03:36.492 --> 00:03:41.130
So a little bit better than I'd say the
TypeScript experience in the sense that

72
00:03:41.130 --> 00:03:43.379
testing is inherent to TypeScripts or

73
00:03:43.379 --> 00:03:47.330
to go as opposed to testing is
something you add on to TypeScripts.

74
00:03:47.330 --> 00:03:52.080
So I like that approach, I like a language
that's thought about it that supports it.

75
00:03:52.080 --> 00:03:54.321
So we have a lot of things we can do, but

76
00:03:54.321 --> 00:03:58.190
really the most useful thing
is gonna be Error or Errorf.

77
00:03:58.190 --> 00:04:02.612
Effectively this will break your program
and say, hey, this line failed right here,

78
00:04:02.612 --> 00:04:06.322
go check it out, and you can put it
in a nice little message, fantastic.

79
00:04:06.322 --> 00:04:07.730
So let's do that right now.

80
00:04:07.730 --> 00:04:12.102
So if you remember, GoLang duck
typing just like TypeScript walks

81
00:04:12.102 --> 00:04:16.340
like a duck quacks like a duck,
it obviously is a giraffe.

82
00:04:16.340 --> 00:04:18.850
And so,
that is how GoLang does all these things.

83
00:04:18.850 --> 00:04:21.843
So we don't need to actually to create
the same type as long as we have

84
00:04:21.843 --> 00:04:23.910
the same shape, it should all work out.

85
00:04:23.910 --> 00:04:27.730
But since we're not dealing with any
methods, we can just import.type,

86
00:04:27.730 --> 00:04:29.900
create one, and we should be good to go.

87
00:04:29.900 --> 00:04:33.005
So I'll do that right now, I'll go
projector, it's gonna say hey, yes,

88
00:04:33.005 --> 00:04:34.740
we probably should be using that.

89
00:04:34.740 --> 00:04:37.618
And I can just simply go to a ops, right?

90
00:04:37.618 --> 00:04:40.670
Cuz we need to create an ops
to pass into our config.

91
00:04:40.670 --> 00:04:41.557
So let's create that.

92
00:04:43.893 --> 00:04:46.811
I assume everybody love my really
great joke about a giraffe,

93
00:04:46.811 --> 00:04:49.177
made it up on the spot,
feel pretty good about it.

94
00:04:49.177 --> 00:04:50.970
Let's paste that in.

95
00:04:50.970 --> 00:04:54.320
So let's create a simple empty object,
right?

96
00:04:54.320 --> 00:04:58.220
So I'm just gonna go args
is empty string array.

97
00:04:58.220 --> 00:05:01.150
A config is gonna be just an empty string.

98
00:05:01.150 --> 00:05:04.753
And present working directory
is just an empty string.

99
00:05:04.753 --> 00:05:08.112
There we go, we've done it, we've created
this thing, I just kinda copied it over,

100
00:05:08.112 --> 00:05:14.616
so it's very obvious how
I got to this point So

101
00:05:14.616 --> 00:05:19.357
let's just do the very simple test,
we'll go config =, I believe there's gonna

102
00:05:19.357 --> 00:05:22.960
be an error as well if I
remember our interface correctly.

103
00:05:22.960 --> 00:05:26.410
We'll just go projector
NewConfig pass in ops.

104
00:05:26.410 --> 00:05:29.780
And of course we need to
pass it in as a reference.

105
00:05:29.780 --> 00:05:31.300
Please remember it takes in a pointer.

106
00:05:31.300 --> 00:05:33.183
We didn't create it this pointer,

107
00:05:33.183 --> 00:05:37.260
we could have easily created that
as a pointer by putting it up here.

108
00:05:37.260 --> 00:05:38.903
Honestly, does it really matter?

109
00:05:38.903 --> 00:05:39.570
Probably not.

110
00:05:40.850 --> 00:05:45.896
To make things a little bit nicer, I'll
see if my refactoring tool actually works,

111
00:05:45.896 --> 00:05:49.060
getOpts, it didn't work, that just hurts.

112
00:05:49.060 --> 00:05:50.120
Okay, well, it sort of worked.

113
00:05:50.120 --> 00:05:55.298
I go in, we'll put it in here,

114
00:05:55.298 --> 00:06:01.283
opts, projector., there we go.

115
00:06:01.283 --> 00:06:05.057
Fantastic, so now I'm just gonna use this
and one last thing we're gonna do is I'll

116
00:06:05.057 --> 00:06:07.710
just pass in arg cuz we're
gonna type this a few times.

117
00:06:07.710 --> 00:06:09.866
So we might as well just
abstract it out a little bit,

118
00:06:09.866 --> 00:06:13.500
so we don't have to keep typing the same
thing over and over and over again, right?

119
00:06:13.500 --> 00:06:14.077
So there we go.

120
00:06:17.094 --> 00:06:21.920
Now I can simply just do the old
string that, there we go.

121
00:06:21.920 --> 00:06:22.675
Beautiful, right?

122
00:06:22.675 --> 00:06:24.890
A little abstraction in
your tests are fine.

123
00:06:24.890 --> 00:06:26.590
I try to keep it always to a minimum.

124
00:06:28.160 --> 00:06:31.322
Anytime I find myself doing an if
statement in my test, I have

125
00:06:31.322 --> 00:06:35.290
to slow down for a second go like am I
making the right decisions with my life or

126
00:06:35.290 --> 00:06:38.824
have I now added in something that
needs to be tested that's a test?

127
00:06:38.824 --> 00:06:41.657
And you never wanna be in that spot.

128
00:06:41.657 --> 00:06:46.170
All right, so let's do pretty much
everything you'd expect it to do, right?

129
00:06:46.170 --> 00:06:48.820
We gotta do a little error checking.

130
00:06:48.820 --> 00:06:54.588
If there is an error, and we didn't expect
an error, we need to do a t.rrorf and

131
00:06:54.588 --> 00:06:58.950
I can just simply do a,
I expected to get no error, right?

132
00:06:58.950 --> 00:07:04.030
Very great English everything is
fantastic, everyone should understand.

133
00:07:04.030 --> 00:07:07.311
So unfortunately again like I said,
it's just more verbose, and

134
00:07:07.311 --> 00:07:10.137
you can kinda see the verbosity
about to happen, right?

135
00:07:10.137 --> 00:07:14.715
So now when I do config I'll
have to do something like this,

136
00:07:14.715 --> 00:07:18.012
if config.Args there is a deep equals, so

137
00:07:18.012 --> 00:07:22.979
this is actually pretty cool,
reflect.DeepEquals, right?

138
00:07:22.979 --> 00:07:26.637
So I can do a deep equals
on this thing to say, hey,

139
00:07:26.637 --> 00:07:31.185
does this array have the same
shape as the one I'm providing?

140
00:07:31.185 --> 00:07:35.585
If you look at the deep equals
it has a xy any awesome.

141
00:07:35.585 --> 00:07:40.805
And so I can do something along
the lines of I expect my config to have,

142
00:07:40.805 --> 00:07:46.838
let's see, config.Args, I don't know
where that went wrong, there we go.

143
00:07:46.838 --> 00:07:48.790
And it should return that, awesome.

144
00:07:48.790 --> 00:07:52.391
So if that's not the case,
then we got ourselves something wrong.

145
00:07:52.391 --> 00:07:56.988
All right, expected args to be
an empty string array, but got,

146
00:07:56.988 --> 00:07:59.410
and will do little +v in there.

147
00:07:59.410 --> 00:08:03.080
So that way we get that nice,
beautiful print, config.Args.

148
00:08:03.080 --> 00:08:06.607
So now that we've written a single test,
let's see how this goes, right?

149
00:08:06.607 --> 00:08:09.700
Let's actually see if
this will be successful.

150
00:08:09.700 --> 00:08:14.070
So I'm gonna erase that,
jump over here and go go test.

151
00:08:14.070 --> 00:08:17.075
Now, this is effectively
the syntax to say,

152
00:08:17.075 --> 00:08:20.570
go find everything that has a test and
run it.

153
00:08:20.570 --> 00:08:24.740
I can point it to something directly or
I can just say run all the tests.

154
00:08:24.740 --> 00:08:27.410
Hit Enter,
if I've done everything correct, awesome.

155
00:08:27.410 --> 00:08:31.411
So I just said, hey, there's no test files
inside of P2 which is a problem from

156
00:08:31.411 --> 00:08:34.882
yesterday, there's no test
files inside of projector.

157
00:08:34.882 --> 00:08:38.840
There is a test file here, we've ran it,
took very, very little time, awesome.

158
00:08:38.840 --> 00:08:41.887
You'll also notice that go did compile
everything while we did that, and

159
00:08:41.887 --> 00:08:43.125
it ran really, really fast.

160
00:08:43.125 --> 00:08:47.886
And that's because, Go again, weird
syntax makes super fast compilation, and

161
00:08:47.886 --> 00:08:52.440
often tests and all this other extra
infrastructure that you're waiting on,

162
00:08:52.440 --> 00:08:56.030
just go so fast, and
I just think it's pretty awesome.

163
00:08:56.030 --> 00:08:56.730
There we go.

164
00:08:56.730 --> 00:08:58.117
So we have something that works,

165
00:08:58.117 --> 00:09:01.280
we could abstract this out to make
the rest of testing pretty easy.

166
00:09:01.280 --> 00:09:06.191
If you can kinda see, really all I'm
gonna be testing is this string array,

167
00:09:06.191 --> 00:09:09.568
all I'm gonna be testing
is don't throw an error and

168
00:09:09.568 --> 00:09:14.630
we could effectively just go through and
make a pretty simple meta test.

169
00:09:14.630 --> 00:09:16.880
For the sake of this,
we're just gonna kinda keep it simple and

170
00:09:16.880 --> 00:09:17.958
I'll just cut and paste it.

171
00:09:17.958 --> 00:09:21.612
All right, let's go print key and

172
00:09:21.612 --> 00:09:25.644
I'm gonna go over here and go foo, and

173
00:09:25.644 --> 00:09:31.329
I should be able to see in here foo,
right, awesome.

174
00:09:31.329 --> 00:09:33.980
We'll abstract out,
there we go, run it again.

175
00:09:33.980 --> 00:09:38.900
We'll abstract out the next testing
we'll do, and that'll be great.

176
00:09:38.900 --> 00:09:41.850
But for this one,
I just wanna kinda keep it simple.

177
00:09:41.850 --> 00:09:45.759
There we go,
let's go Add key value, right?

178
00:09:45.759 --> 00:09:47.270
Exact same thing.

179
00:09:47.270 --> 00:09:53.580
Add foo, bar, awesome.

180
00:09:53.580 --> 00:09:56.400
I also noticed that I did not
test see problem by copying and

181
00:09:56.400 --> 00:09:57.950
pasting code, right?

182
00:09:57.950 --> 00:09:59.680
If okay, you know what,
I'm gonna abstract it.

183
00:09:59.680 --> 00:10:00.710
I can't do it anymore.

184
00:10:00.710 --> 00:10:04.227
It always hurts me emotionally to cut
copy and paste too many things and so

185
00:10:04.227 --> 00:10:06.025
I'm just gonna do this testConfig.

186
00:10:06.025 --> 00:10:10.068
So we'll do something simple we'll
go args which is a string or

187
00:10:10.068 --> 00:10:13.594
an array of strings
the operation you expect, right?

188
00:10:13.594 --> 00:10:19.821
Operation which is gonna be
an op projector.Operation.

189
00:10:19.821 --> 00:10:20.490
There we go.

190
00:10:20.490 --> 00:10:24.336
I tried to hold out cuz I don't
want to do too much of that.

191
00:10:24.336 --> 00:10:27.610
And of course,
we need to do a testing.t, there we go.

192
00:10:27.610 --> 00:10:30.779
So as long as we do that,
we should be able to effectively copy and

193
00:10:30.779 --> 00:10:31.850
paste all this code.

194
00:10:32.900 --> 00:10:38.364
So I'm just gonna go like this, delete
all that, put it right here, fantastic.

195
00:10:38.364 --> 00:10:43.172
Take that paste it, I don't know
why did that and make sure that

196
00:10:43.172 --> 00:10:49.464
the config.Operation equals the operation
that I expected which is operation.

197
00:10:49.464 --> 00:10:53.534
Operation expected was this but

198
00:10:53.534 --> 00:10:57.308
got that fantastic, right?

199
00:10:57.308 --> 00:11:01.570
Config.Operation and operation, right?

200
00:11:01.570 --> 00:11:02.670
Wrong way.

201
00:11:02.670 --> 00:11:05.750
You definitely don't wanna do that,
that will lead to a lot of confusion.

202
00:11:05.750 --> 00:11:06.830
Awesome, right?

203
00:11:06.830 --> 00:11:09.969
So now I should just go
to go testConfig and

204
00:11:09.969 --> 00:11:14.648
pass in t an empty string array,
and of course print, right?

205
00:11:14.648 --> 00:11:19.687
Projector print.

206
00:11:19.687 --> 00:11:22.429
Awesome, that's what I wanted to do.

207
00:11:22.429 --> 00:11:29.290
Erase this, Foo,
let's just erase that for a second.

208
00:11:29.290 --> 00:11:31.130
Let's make sure everything's going great,
awesome.

209
00:11:31.130 --> 00:11:32.530
We got a fail.

210
00:11:32.530 --> 00:11:35.210
What is our fail?
No test file, no test files.

211
00:11:35.210 --> 00:11:38.609
Wait, missing this,
of course, classic really.

212
00:11:38.609 --> 00:11:40.822
Really just a classic right there.

213
00:11:40.822 --> 00:11:45.967
It's somewhere in here,
it's right there, there we go.

214
00:11:45.967 --> 00:11:48.736
That's what I was missing, had a colon.

215
00:11:48.736 --> 00:11:52.264
And now we have a fail test 32 expected 0,
but got 0, so

216
00:11:52.264 --> 00:11:56.374
that does feel a little emotionally
difficult to handle right now.

217
00:11:56.374 --> 00:12:00.020
And I think the main problem was is
that I was doing an equal sign there.

218
00:12:00.020 --> 00:12:02.330
And so you don't wanna do that.

219
00:12:02.330 --> 00:12:07.265
When you're testing, you don't want to
be so positive and then throw an error,

220
00:12:07.265 --> 00:12:08.872
it just feels wrong to do.

221
00:12:08.872 --> 00:12:11.422
For those that didn't just catch up
because they're looking at their code,

222
00:12:11.422 --> 00:12:12.140
it was double equal.

223
00:12:12.140 --> 00:12:16.010
So I was actually testing for what I
wanted to see and then throwing an error.

224
00:12:16.010 --> 00:12:18.850
All right, fantastic,
TestConfig, TestConfig.

225
00:12:18.850 --> 00:12:23.160
YAP, that Y-A-P, I always say, yap but if
you're wondering what I mean, Y stands for

226
00:12:23.160 --> 00:12:26.360
Yank, A stands for Around,
P stands for Paragraph.

227
00:12:26.360 --> 00:12:27.781
YAP, I just copied that.

228
00:12:27.781 --> 00:12:29.560
Now I can just paste with P, fantastic.

229
00:12:29.560 --> 00:12:33.553
YAP but you can also DAP it, you can DAP
on the haters, delete around paragraph,

230
00:12:33.553 --> 00:12:35.630
there we go, fp do a little AddKeyValue.

231
00:12:36.740 --> 00:12:40.230
Yes, my wife is exhausted
of me at some times.

232
00:12:40.230 --> 00:12:43.990
All right bar, FP Add awesome.

233
00:12:43.990 --> 00:12:47.003
Once, I've done everything correctly,
we should be able to see it, but

234
00:12:47.003 --> 00:12:47.740
we did not see it.

235
00:12:47.740 --> 00:12:49.200
So what just happened there?

236
00:12:49.200 --> 00:12:53.521
I think we have ourselves
potentially an actual issue, right?

237
00:12:53.521 --> 00:12:58.130
Because I would've expected to see this,
but you know what we didn't do.

238
00:12:58.130 --> 00:12:58.695
We have this.

239
00:13:00.716 --> 00:13:04.571
Uh-oh, we might have ourselves a little
bit of an interesting problem going on

240
00:13:04.571 --> 00:13:07.345
right here, is that I didn't
do the args throw out here.

241
00:13:07.345 --> 00:13:08.827
So, we're actually testing nothing.

242
00:13:08.827 --> 00:13:13.425
Again, danger of doing
meta type programming.

243
00:13:13.425 --> 00:13:15.455
There we go, everything's good.

244
00:13:15.455 --> 00:13:20.418
We rerun it, now we have a new one
expected args to be an empty string but

245
00:13:20.418 --> 00:13:22.027
dot foo bar line 28.

246
00:13:22.027 --> 00:13:24.258
All right, so
we don't expect it to be an empty string.

247
00:13:24.258 --> 00:13:30.530
Expected args to be % plus v but
got that, there we go.

248
00:13:31.900 --> 00:13:34.540
All right, so let's see what we did,
let's see what we got went wrong here.

249
00:13:34.540 --> 00:13:37.587
We expected add foo bar but got foo bar.

250
00:13:37.587 --> 00:13:42.252
No, so part of the problems of abstracting
you always find these things in, right?

251
00:13:42.252 --> 00:13:50.229
So now we are gonna have to do something
even more annoying, args, there we go.

252
00:13:50.229 --> 00:13:54.791
Now we have the expected and
there we go we can do that.

253
00:13:54.791 --> 00:13:56.729
Shockingly, I did effectively plan for

254
00:13:56.729 --> 00:14:00.377
this to be part of the course because I
did wanna show really the reason why you

255
00:14:00.377 --> 00:14:03.968
should be using Go copy is that you end
up doing this kind of stuff all the time

256
00:14:03.968 --> 00:14:06.430
in Go test if you don't
use an additional library.

257
00:14:06.430 --> 00:14:10.491
Strongly recommend using an additional
library, but I just feel like it's really

258
00:14:10.491 --> 00:14:14.333
good to see kinda what the language itself
offers before you go off and do that.

259
00:14:14.333 --> 00:14:20.507
So I'd expect the same thing,
awesome, expect the same thing here.

260
00:14:26.552 --> 00:14:27.360
All right, there we go.

261
00:14:27.360 --> 00:14:29.060
And of course remove that.

262
00:14:29.060 --> 00:14:32.620
Awesome, so
everything should now be fantastic.

263
00:14:32.620 --> 00:14:33.810
We're good to go.

264
00:14:33.810 --> 00:14:39.823
We've just created our own slightly
verbose testing library here fa,

265
00:14:39.823 --> 00:14:46.045
do the exact same thing remove key,
rm, oopsies, dt that, there we go.

266
00:14:46.045 --> 00:14:49.430
And of course that means we
should just have foo, right?

267
00:14:49.430 --> 00:14:50.423
And it should be an ad.

268
00:14:51.838 --> 00:14:55.810
So long as everyone followed along,
we all have effectively the same code.

269
00:14:55.810 --> 00:14:56.990
I could have in lined all this.

270
00:14:58.330 --> 00:14:59.220
Which one's better?

271
00:14:59.220 --> 00:15:00.620
Is this better to have?

272
00:15:00.620 --> 00:15:03.820
Well, one thing that kind of stinks with
these libraries that don't give you a full

273
00:15:03.820 --> 00:15:05.130
stack trace right away.

274
00:15:05.130 --> 00:15:11.070
When we had an error, you kind of had to
deduce where did this failure come from?

275
00:15:11.070 --> 00:15:13.669
Now, if you're doing something
that's checking multiple times,

276
00:15:13.669 --> 00:15:16.680
you're just simply gonna get
this single line failure.

277
00:15:16.680 --> 00:15:18.770
But it could have been checked
three times in your function.

278
00:15:18.770 --> 00:15:20.086
So now you're off to, well,

279
00:15:20.086 --> 00:15:23.450
I guess I'm gonna print to find
which one's the actual failing one.

280
00:15:23.450 --> 00:15:25.252
If you can't figure out why.

281
00:15:25.252 --> 00:15:28.129
If you can't figure out from this, right?

282
00:15:28.129 --> 00:15:30.649
I just happen to be able to figure
that out cuz we only call it one, so

283
00:15:30.649 --> 00:15:32.100
it's pretty easy to figure that out.

284
00:15:32.100 --> 00:15:36.147
So always kind of a danger, one nice part
about Jess is that Jess gives you that

285
00:15:36.147 --> 00:15:40.410
full kinda stack trace so you know exactly
where and how these things went wrong.

286
00:15:43.090 --> 00:15:45.270
Overall though,
pretty good experience, right?

287
00:15:45.270 --> 00:15:47.900
Happy to have this, I'm very happy
to have a language that supports it.

288
00:15:47.900 --> 00:15:48.540
It's fast.

289
00:15:48.540 --> 00:15:50.385
I don't have to wait a long time, and

290
00:15:50.385 --> 00:15:53.020
it kind of drives you to
make your stuff really fast.

291
00:15:54.230 --> 00:15:58.687
All right, let's move on to rust and
do some beautiful rust testing.

292
00:15:58.687 --> 00:16:01.483
Let's see, I'm on look at this one,
did I do this?

293
00:16:01.483 --> 00:16:04.828
No, nice look in my other version,
I only did two tests and

294
00:16:04.828 --> 00:16:06.619
I didn't obstruct anything.

295
00:16:06.619 --> 00:16:07.510
Okay fantastic.

