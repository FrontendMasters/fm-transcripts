WEBVTT

1
00:00:00.085 --> 00:00:00.751
So there we go.

2
00:00:00.751 --> 00:00:03.810
We've just seen testing
in all three languages.

3
00:00:03.810 --> 00:00:07.713
How does everyone feel about testing and
all three languages?

4
00:00:07.713 --> 00:00:09.271
Brant, I want you to answer right now.

5
00:00:09.271 --> 00:00:11.888
How do you feel about TypeScript?

6
00:00:11.888 --> 00:00:14.801
&gt;&gt; Yeah, that's TypeScript
is not enjoyable [LAUGH].

7
00:00:14.801 --> 00:00:18.705
&gt;&gt; All right, is testing enjoyable?

8
00:00:18.705 --> 00:00:20.713
&gt;&gt; Yes.

9
00:00:20.713 --> 00:00:23.857
&gt;&gt; Is this the greatest AI generated
speech of all time everybody like look at

10
00:00:23.857 --> 00:00:25.285
that it's interacting with me.

11
00:00:25.285 --> 00:00:26.182
&gt;&gt; Very realistic.

12
00:00:26.182 --> 00:00:29.873
&gt;&gt; Yeah, but what about Rust,
how do you feel about that one?

13
00:00:29.873 --> 00:00:30.652
&gt;&gt; Rust it's pretty awesome.

14
00:00:30.652 --> 00:00:33.404
I like that being like in
file seems very concise and

15
00:00:33.404 --> 00:00:36.733
straightforward to read the test,
and that's the problem,

16
00:00:36.733 --> 00:00:40.656
I guess with like with TypeScript,
that is not super straightforward.

17
00:00:40.656 --> 00:00:44.076
Using Jest is just challenging.

18
00:00:44.076 --> 00:00:46.494
&gt;&gt; Yeah, there's some rough edges.

19
00:00:46.494 --> 00:00:48.141
Obviously, we're doing very
simple testing, right?

20
00:00:48.141 --> 00:00:50.409
We don't have any mocks
going on right now.

21
00:00:50.409 --> 00:00:52.120
That's a big thing.

22
00:00:52.120 --> 00:00:52.912
We have a question.

23
00:00:52.912 --> 00:00:57.339
&gt;&gt; Someone mentioned that Node
18 now includes a test runner.

24
00:00:57.339 --> 00:01:01.450
&gt;&gt; Nice, Node 18 has a new test,
look at that.

25
00:01:01.450 --> 00:01:02.340
That's pretty awesome.

26
00:01:02.340 --> 00:01:08.442
I'm very happy to see that Node is
almost 2012, or starting to get there.

27
00:01:08.442 --> 00:01:12.503
I'm really proud of them,
I know they're gonna nail it.

28
00:01:12.503 --> 00:01:16.782
By the way my views do not reflect that
of my employer or Frontend Masters.

29
00:01:16.782 --> 00:01:19.468
[LAUGH] Is that pretty good?

30
00:01:19.468 --> 00:01:22.905
I don't put that in my, people always
have that in their Twitter bio,

31
00:01:22.905 --> 00:01:23.966
opinions are my own.

32
00:01:23.966 --> 00:01:28.832
I always find that kind of funny because
why aren't they should just be your own,

33
00:01:28.832 --> 00:01:31.063
you're not a corporation anyways.

34
00:01:31.063 --> 00:01:35.162
&gt;&gt; Do Rust files get really huge, like
all the tests are also in the same file?

35
00:01:35.162 --> 00:01:36.536
&gt;&gt; So they can get larger.

36
00:01:36.536 --> 00:01:38.200
I tend to put all my
tests at the bottom so

37
00:01:38.200 --> 00:01:40.430
it's pretty clear what's
happening up at the top.

38
00:01:40.430 --> 00:01:43.926
And then you have this kinda like
nice little demarcation right here,

39
00:01:43.926 --> 00:01:46.068
just say, hey, this is what's going on.

40
00:01:46.068 --> 00:01:47.234
You could probably fold this.

41
00:01:47.234 --> 00:01:48.711
I don't often use folds.

42
00:01:48.711 --> 00:01:53.473
I'm not even exactly sure how to fold,
but you could just fold this away, right?

43
00:01:53.473 --> 00:01:56.656
So it's kind of gone so you don't
really see it if you really want to.

44
00:01:56.656 --> 00:01:57.716
I think it's pretty.

45
00:01:57.716 --> 00:02:00.559
I actually like it in the same file
because then I don't have to hunt for

46
00:02:00.559 --> 00:02:01.339
where the test is.

47
00:02:01.339 --> 00:02:03.719
I feel like it's right here.

48
00:02:03.719 --> 00:02:05.352
One more question.

49
00:02:05.352 --> 00:02:09.881
&gt;&gt; Is naming the functions test
underscore only a convention?

50
00:02:09.881 --> 00:02:12.874
&gt;&gt; Yeah, so let's go foo bar.

51
00:02:12.874 --> 00:02:15.792
Let's just find out why not, right?

52
00:02:15.792 --> 00:02:19.314
&gt;&gt; Let's go up here and it looks like we
had both test and a foo_bar, pass, and

53
00:02:19.314 --> 00:02:19.987
that so yeah.

54
00:02:19.987 --> 00:02:24.815
It's just kind of like a holdover of
that I guess from my previous go life

55
00:02:24.815 --> 00:02:27.395
that I throw in the word test on there.

56
00:02:27.395 --> 00:02:28.446
I don't know why.

57
00:02:28.446 --> 00:02:31.196
It's like one of those silly things you
do where you add the word list at the end

58
00:02:31.196 --> 00:02:32.732
of a variable that has a type list, right?

59
00:02:32.732 --> 00:02:33.562
Like, do you really need to do that?

60
00:02:33.562 --> 00:02:34.741
I don't know.

61
00:02:34.741 --> 00:02:36.982
Old habits die hard.

62
00:02:36.982 --> 00:02:37.536
We got one more question.

63
00:02:37.536 --> 00:02:42.148
&gt;&gt; Is only the macro test irrelevant?

64
00:02:42.148 --> 00:02:43.927
&gt;&gt; You mean this?

65
00:02:43.927 --> 00:02:45.863
&gt;&gt; The pound bracket?

66
00:02:45.863 --> 00:02:48.504
&gt;&gt; Yes.
So yes, that is the thing that identifies

67
00:02:48.504 --> 00:02:52.085
this function is something that
should be ran when you do a test.

68
00:02:52.085 --> 00:02:56.604
I don't know what happens underneath
the hood when you do this,

69
00:02:56.604 --> 00:03:01.301
as you can see you can't even look
at what is its compiler built in.

70
00:03:01.301 --> 00:03:06.217
Macros are very impressive, but they're
also very hard to read sometimes, and

71
00:03:06.217 --> 00:03:10.916
so I don't know exactly what happens it
just does what it's supposed to do and

72
00:03:10.916 --> 00:03:12.673
I'm very happy about that.

73
00:03:12.673 --> 00:03:15.269
All right, we got one more question
&gt;&gt; Yeah, so

74
00:03:15.269 --> 00:03:19.589
we mentioned having the tests in file.

75
00:03:19.589 --> 00:03:22.208
That seems like a design choice
from the creators of Rust.

76
00:03:22.208 --> 00:03:25.955
What do you think the trade-offs are of
having an end file versus another language

77
00:03:25.955 --> 00:03:28.888
or most other language which is
where it's in a separate file and

78
00:03:28.888 --> 00:03:30.533
maybe even a different directory?

79
00:03:30.533 --> 00:03:34.672
&gt;&gt; Yeah, so I feel I've mentioned it or
at least alluded to it.

80
00:03:34.672 --> 00:03:38.976
One, I think file size is a great call out
which is that sometimes these things can

81
00:03:38.976 --> 00:03:40.318
become unwieldy large.

82
00:03:40.318 --> 00:03:44.035
But two, I think we're really,
I find it dangerous is the fact that so

83
00:03:44.035 --> 00:03:48.579
if you look right here, present working
directory, we don't export this, right?

84
00:03:48.579 --> 00:03:49.213
No one can use it.

85
00:03:49.213 --> 00:03:50.301
It's not public.

86
00:03:50.301 --> 00:03:55.360
But down here, I can do pwd equals
get present working directory and

87
00:03:55.360 --> 00:03:58.483
I can literally just bring it in, right?

88
00:03:58.483 --> 00:04:02.142
I can test internals that may or may not.

89
00:04:02.142 --> 00:04:03.235
How do you feel about that?

90
00:04:03.235 --> 00:04:05.121
Is it really a good idea?

91
00:04:05.121 --> 00:04:08.281
That's more of a testing debate,
than anything else.

92
00:04:08.281 --> 00:04:10.241
Some people don't believe you
should write tests at all,

93
00:04:10.241 --> 00:04:12.482
some people believe you should
only write public interface test,

94
00:04:12.482 --> 00:04:14.259
some people believe you can
test whatever you want.

95
00:04:14.259 --> 00:04:18.823
I'm on the public interface train
that's where I've landed, so yeah.

96
00:04:18.823 --> 00:04:22.856
I don't like that about Rust
is that you can do that.

97
00:04:22.856 --> 00:04:27.171
I would like to I mean, personally I'm I
would just like that not to be an option,

98
00:04:27.171 --> 00:04:31.245
but I'm sure there's a good reason
there's always a test that does exist.

99
00:04:31.245 --> 00:04:34.166
That's why if only I could just reach
in and test this one thing because

100
00:04:34.166 --> 00:04:36.554
it's very important,
I don't want it to be screwed up.

101
00:04:36.554 --> 00:04:40.070
I totally get that and
I wouldn't argue with it, right?

102
00:04:40.070 --> 00:04:43.942
Yeah, so I can think of like
RTP header parsing, right?

103
00:04:43.942 --> 00:04:46.368
To be able to do header parsing,
you speak to any of these things.

104
00:04:46.368 --> 00:04:49.262
I'm sure there's a bunch of private
functions you don't need to know about.

105
00:04:49.262 --> 00:04:52.597
But you also don't want to have to
construct a stream of data coming in,

106
00:04:52.597 --> 00:04:55.335
just to test it so and
you don't wanna export it as public.

107
00:04:55.335 --> 00:05:00.511
I'm sure there's good reasons to
have that type of stuff existing.

108
00:05:00.511 --> 00:05:01.479
All right, so there we go.

109
00:05:01.479 --> 00:05:06.396
We finished really the section that
part 2 of the four parts of our building

110
00:05:06.396 --> 00:05:11.390
of a CLI application, so it's time to
move on to the greatest part of it which

111
00:05:11.390 --> 00:05:13.592
is the actual meat and potatoes.

112
00:05:13.592 --> 00:05:15.615
All right, so
at least that's how I feel, right?

113
00:05:15.615 --> 00:05:17.378
It's time to do some real programming.

114
00:05:17.378 --> 00:05:21.001
This is where we're at, where we're gonna
have to program these three operations,

115
00:05:21.001 --> 00:05:22.170
print, add, and remove.

