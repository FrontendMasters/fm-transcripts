WEBVTT

1
00:00:00.000 --> 00:00:03.513
All right, well, we're back and
we're gonna continue on.

2
00:00:03.513 --> 00:00:08.199
I'm gonna make a slight modification
to the operations and orderings.

3
00:00:08.199 --> 00:00:13.129
We're gonna go into part two right here,
which is gonna be converting the options

4
00:00:13.129 --> 00:00:17.856
into something that we can use to get
everything to make project work, right?

5
00:00:17.856 --> 00:00:20.686
So we did the first part, which is
just simply getting this thing out.

6
00:00:20.686 --> 00:00:23.160
Now, we're gonna create
the projector config.

7
00:00:23.160 --> 00:00:27.591
I kinda like this like I said, I keep
things really simple, makes it easy for

8
00:00:27.591 --> 00:00:28.708
me to understand.

9
00:00:28.708 --> 00:00:30.175
And so we are right here.

10
00:00:30.175 --> 00:00:34.009
If there was a URL right here,
it would be right there.

11
00:00:34.009 --> 00:00:36.993
And so we're gonna first do
the course in TypeScript.

12
00:00:36.993 --> 00:00:39.937
After we do in TypeScript,
we'll do it in Go, after we do it in Go,

13
00:00:39.937 --> 00:00:40.897
we will do it in Rust.

14
00:00:40.897 --> 00:00:43.890
And then we'll kinda discuss how does
it feel, what do we think about it?

15
00:00:43.890 --> 00:00:47.257
And depending on how fast we fly
to this will add tests or not,

16
00:00:47.257 --> 00:00:49.448
cuz I think testing, very important.

17
00:00:49.448 --> 00:00:53.271
If you're not unit testing, I don't
know what kinda crazy life you live.

18
00:00:53.271 --> 00:00:58.007
But I can't believe that I can keep
making changes to products that doesn't

19
00:00:58.007 --> 00:01:01.715
ultimately end with me being sad and
production being out.

20
00:01:01.715 --> 00:01:04.477
So I believe in the unit test lifestyle,
but

21
00:01:04.477 --> 00:01:07.695
I'm not one that writes
tests before I write code.

22
00:01:07.695 --> 00:01:10.960
I write the code, write the test,
and when I'm exploring,

23
00:01:10.960 --> 00:01:13.729
I don't even write tests
until I'm really ready.

24
00:01:13.729 --> 00:01:16.058
I am gonna use classes from time to time,

25
00:01:16.058 --> 00:01:20.523
I know that people are horrified about
classes in the TypeScript community.

26
00:01:20.523 --> 00:01:26.115
But there is ways to make JavaScript
super-duper faster by using classes.

27
00:01:26.115 --> 00:01:30.210
So I even have a little sweet YouTube
video right here, which I thought had

28
00:01:30.210 --> 00:01:33.926
the greatest boxer of all time,
but we won't look at it right now.

29
00:01:33.926 --> 00:01:38.144
But just effectively, you can do some neat
things if you have access to classes that

30
00:01:38.144 --> 00:01:40.686
you can't quite do when
you only have functions.

31
00:01:40.686 --> 00:01:42.467
And so we'll see how this goes.

32
00:01:42.467 --> 00:01:47.200
All right, so let me just make sure, let's
see, yep, right now we do have, of course,

33
00:01:47.200 --> 00:01:50.817
the arguments, the present working
directory, the config path.

34
00:01:50.817 --> 00:01:52.939
And so now,
we need to do something with it.

35
00:01:52.939 --> 00:01:57.572
So effectively what I think we need to
do is we need to create a struct that

36
00:01:57.572 --> 00:02:02.458
takes a config, a defined config,
exactly where we want to look, right?

37
00:02:02.458 --> 00:02:04.363
Cuz there may or may not be one provided.

38
00:02:04.363 --> 00:02:07.769
We need a present working directory,
there may or may not be one provided.

39
00:02:07.769 --> 00:02:11.537
We're definitely gonna want the operation
we're gonna do, and then, of course,

40
00:02:11.537 --> 00:02:13.141
any additional arguments as well.

41
00:02:13.141 --> 00:02:16.753
So there is some manipulation to what was
passed that then needs to happen now.

42
00:02:16.753 --> 00:02:21.781
So we're gonna do each one of those,
and let's start with config.ts.

43
00:02:21.781 --> 00:02:24.452
Everyone loves a little TypeScript,
don't we?

44
00:02:24.452 --> 00:02:29.141
All right, so let's go to TypeScript,
let's jump in here, and

45
00:02:29.141 --> 00:02:31.291
let's create a config.ts.

46
00:02:31.291 --> 00:02:36.479
Awesome, right, actually I wanna put
this one as index.ts, there we go.

47
00:02:39.295 --> 00:02:43.875
All right, awesome, hopefully everyone's
there, I know I'm moving fast, remember,

48
00:02:43.875 --> 00:02:46.838
dev, productivity on Frontend Masters.

49
00:02:46.838 --> 00:02:50.668
[LAUGH] Sorry, guys, slightly weird.

50
00:02:50.668 --> 00:02:51.779
Well, let's keep on going.

51
00:02:51.779 --> 00:02:55.754
So let's first create the enum, cuz I feel
like that's probably a good plan, right?

52
00:02:55.754 --> 00:02:58.336
We needed a probably an Operation enum.

53
00:02:58.336 --> 00:03:00.155
Let's export this.

54
00:03:00.155 --> 00:03:02.871
And this represent what type
of operations are we doing?

55
00:03:02.871 --> 00:03:06.988
We of course have a Print,
an Add, and a Remove, right?

56
00:03:06.988 --> 00:03:10.374
That's pretty much all we're really
needing to do with this library.

57
00:03:10.374 --> 00:03:13.651
We add stuff ,we remove stuff,
or we print out stuff.

58
00:03:13.651 --> 00:03:17.521
All right,
let's create the actual config now.

59
00:03:17.521 --> 00:03:21.386
So let's export type,
we'll just call config.

60
00:03:21.386 --> 00:03:24.773
We could call it projector config,
but it's a lot of words and

61
00:03:24.773 --> 00:03:27.327
then the word projector
shows up everywhere.

62
00:03:27.327 --> 00:03:31.237
Then you'll have visual or
auditorial sensation or satiation,

63
00:03:31.237 --> 00:03:32.737
terrible thing to have.

64
00:03:32.737 --> 00:03:35.352
So let's do this, let's have args, and

65
00:03:35.352 --> 00:03:38.724
this will be a concrete
string of arguments, right?

66
00:03:38.724 --> 00:03:42.281
These are things that are gonna
be used In our operation.

67
00:03:42.281 --> 00:03:46.110
We should have an operation,
which is gonna be an operation.

68
00:03:49.046 --> 00:03:53.598
We're gonna need a config,
which will be an actual string path.

69
00:03:53.598 --> 00:03:55.419
This is the actual path to the item.

70
00:03:55.419 --> 00:03:58.565
Let's not hydrate it yet,
let's not go out and get it.

71
00:03:58.565 --> 00:04:01.845
Let's just first make sure
we have the correct place.

72
00:04:01.845 --> 00:04:05.627
And then lastly, we're also gonna
need the present working directory,

73
00:04:05.627 --> 00:04:09.723
which will also be a string, cuz before we
may or may not have any of those items.

74
00:04:09.723 --> 00:04:11.346
So the first thing I'm gonna do is,

75
00:04:11.346 --> 00:04:14.872
I'll like to create the actual function
that we're gonna be using for this.

76
00:04:14.872 --> 00:04:21.583
So export, default function and getConfig,
and this is gonna take in an Opts,.

77
00:04:21.583 --> 00:04:25.117
And of course, I don't know,
my autocomplete, is it off the screen?

78
00:04:25.117 --> 00:04:26.521
Do you guys see it?

79
00:04:26.521 --> 00:04:28.767
All right, we'll just say yes to that one.

80
00:04:28.767 --> 00:04:29.935
Where did it go?

81
00:04:29.935 --> 00:04:31.198
That was funny.

82
00:04:31.198 --> 00:04:34.468
Anyways, so I'll just go like this and
we'll figure it out.

83
00:04:34.468 --> 00:04:40.936
And so boom, and import {Opts} from,
I think I can just do this, right?

84
00:04:40.936 --> 00:04:45.805
I don't know, everyone's gonna be just
making fun of my LSP all night, okay?

85
00:04:45.805 --> 00:04:48.052
I swear it's not me.

86
00:04:48.052 --> 00:04:52.597
And let's return a config, awesome.

87
00:04:52.597 --> 00:04:55.074
So there we go,
this all looks to be pretty normal.

88
00:04:55.074 --> 00:04:59.188
So in reality,
we only need a couple items here, right?

89
00:04:59.188 --> 00:05:04.165
We need to return a present
working directory.

90
00:05:04.165 --> 00:05:06.904
And so I'll just create the function
get present working directory, and

91
00:05:06.904 --> 00:05:08.152
I'm just gonna pass in the opts.

92
00:05:08.152 --> 00:05:12.825
Exact same thing with config,
exact same thing with args,

93
00:05:12.825 --> 00:05:17.324
getArgs, and
exact same thing with operation, right?

94
00:05:17.324 --> 00:05:18.586
Just make it real simple.

95
00:05:20.456 --> 00:05:22.038
There you go, we have these four things.

96
00:05:22.038 --> 00:05:24.402
They're each gonna go out and
do what they need to do, and

97
00:05:24.402 --> 00:05:25.645
we'll return it right here.

98
00:05:25.645 --> 00:05:27.710
So as long as these things all work out,

99
00:05:27.710 --> 00:05:30.909
we're actually gonna be
building something that's good.

100
00:05:30.909 --> 00:05:34.874
All right, so
let's do function, getConfig.

101
00:05:34.874 --> 00:05:38.118
Let's start with present working
directory first, cuz it's in order.

102
00:05:38.118 --> 00:05:40.646
If it wasn't in order,
it would be a little bit frustrating.

103
00:05:40.646 --> 00:05:41.573
So let's start here.

104
00:05:41.573 --> 00:05:43.701
All right, so what do we need to do here?

105
00:05:43.701 --> 00:05:48.265
Well, the first thing we have to do
is go like this, if (opts.pwd), well,

106
00:05:48.265 --> 00:05:50.285
let's just return that, right?

107
00:05:50.285 --> 00:05:51.503
It's already there.

108
00:05:51.503 --> 00:05:53.700
There's nothing we need to do, right?

109
00:05:53.700 --> 00:05:55.242
We just simply need to return it.

110
00:05:55.242 --> 00:06:00.033
We're gonna trust that they provide
us something that makes sense.

111
00:06:00.033 --> 00:06:03.082
If it's not there, how do we get
the present working directory?

112
00:06:03.082 --> 00:06:07.504
Well, if I'm not mistaken,
our process has current working directory.

113
00:06:07.504 --> 00:06:09.139
Yeah, there we go.

114
00:06:09.139 --> 00:06:13.369
So this thing simply returns your
current working directory, right?

115
00:06:13.369 --> 00:06:16.395
And so that's where node
was executed from, awesome.

116
00:06:16.395 --> 00:06:19.471
That's it, that's all we have to do,
simple, easy win.

117
00:06:19.471 --> 00:06:21.870
Let's do another one, function, getConfig.

118
00:06:21.870 --> 00:06:25.709
Now, I feel like this is gonna
be more about how do you

119
00:06:25.709 --> 00:06:30.007
properly place configs than
it is about getting configs.

120
00:06:30.007 --> 00:06:33.150
So let's go opts, and
I'm not gonna use a library.

121
00:06:33.150 --> 00:06:34.462
There is a library to do this.

122
00:06:34.462 --> 00:06:36.367
We're not gonna use a library
to accomplish this.

123
00:06:36.367 --> 00:06:39.853
We're just going to
write it out ourselves.

124
00:06:39.853 --> 00:06:42.694
So exact same thing, let's jump up here.

125
00:06:42.694 --> 00:06:46.082
Let's paste those things in,
let's take present working directory,

126
00:06:46.082 --> 00:06:47.644
replace it with config, right?

127
00:06:47.644 --> 00:06:48.692
If there is a config,

128
00:06:48.692 --> 00:06:52.261
we're gonna trust that they've
handed us the correct config, right?

129
00:06:52.261 --> 00:06:58.496
Now, when it comes to configuration,
Macs have a specific location, right?

130
00:06:58.496 --> 00:07:01.202
It's like /applications/ something else.

131
00:07:01.202 --> 00:07:04.190
It has a location that you
should probably be using.

132
00:07:04.190 --> 00:07:08.297
I assume there's even some sort of XDG
config home or something like that on

133
00:07:08.297 --> 00:07:12.545
Macs, that's like an environment
variable that gives you that exact path.

134
00:07:12.545 --> 00:07:15.342
So here would probably be
a pretty good place to use that,

135
00:07:15.342 --> 00:07:16.932
is at least how I think about it.

136
00:07:16.932 --> 00:07:19.871
So I'm on Ubuntu,
I'm just gonna program for Ubuntu.

137
00:07:19.871 --> 00:07:23.531
So if you have Windows,
I think it's /users username.

138
00:07:23.531 --> 00:07:25.580
Each one has kind of their own location.

139
00:07:25.580 --> 00:07:31.142
So just follow along using your operating
system's best to find location.

140
00:07:31.142 --> 00:07:34.549
If I'm not mistaken,
though, I believe it's xdg.

141
00:07:34.549 --> 00:07:39.158
Yeah, there is an npm package called
xdg-basedir, which just goes through and

142
00:07:39.158 --> 00:07:40.459
make sure this works.

143
00:07:40.459 --> 00:07:42.353
You should not use this on Mac OS or
Windows.

144
00:07:42.353 --> 00:07:44.678
Okay, so this only works for
me, now even for you guys.

145
00:07:44.678 --> 00:07:50.371
But you can imagine that there's this
whole, there you go, end of the paths.

146
00:07:50.371 --> 00:07:53.361
There we go, this would be the one
that you'd want to do that goes and

147
00:07:53.361 --> 00:07:54.626
gets the correct location.

148
00:07:54.626 --> 00:07:58.406
But we're just gonna program our own
little one right here cuz I feel like it's

149
00:07:58.406 --> 00:08:01.440
a little bit more, I don't know,
it's a little bit more fun,

150
00:08:01.440 --> 00:08:04.376
plus you don't need to always
have a module for everything.

151
00:08:04.376 --> 00:08:05.807
So let's do it right here.

152
00:08:05.807 --> 00:08:12.374
I'm gonna go const config = process.env.

153
00:08:12.374 --> 00:08:15.489
And I'm gonna do XDG_CONFIG_HOME.

154
00:08:15.489 --> 00:08:19.114
And so if this thing exists,
well, that's where I want to be.

155
00:08:19.114 --> 00:08:20.387
And so we'll set that right now.

156
00:08:20.387 --> 00:08:21.353
So I'll go like this.

157
00:08:21.353 --> 00:08:22.022
I have the word config.

158
00:08:22.022 --> 00:08:24.505
I should stop using the word config.

159
00:08:24.505 --> 00:08:30.047
We'll use location, if there is
a location, then we're gonna return that.

160
00:08:30.047 --> 00:08:31.779
We'll do that here in one second.

161
00:08:31.779 --> 00:08:34.437
Or we can technically use home, right?

162
00:08:34.437 --> 00:08:40.362
So I could use something like const
home = process.env [HOME], correct?

163
00:08:40.362 --> 00:08:43.019
That does work out, right?

164
00:08:43.019 --> 00:08:44.657
So we could do these two things.

165
00:08:44.657 --> 00:08:48.108
So what I'm gonna do is I'm
just gonna take this and

166
00:08:48.108 --> 00:08:53.181
do something that I didn't do in practice,
which is just do this, right?

167
00:08:53.181 --> 00:08:55.385
So I'm gonna grab one of these two.

168
00:08:55.385 --> 00:08:57.770
So hopefully, one of them should exist.

169
00:08:57.770 --> 00:09:01.503
If nothing exists, we probably actually
have an unrecoverable error, right?

170
00:09:01.503 --> 00:09:02.719
So I'm gonna do something like this.

171
00:09:02.719 --> 00:09:05.384
If there is no location, well,

172
00:09:05.384 --> 00:09:11.128
then throw new Error ("unable
to determine config location").

173
00:09:11.128 --> 00:09:13.273
All right, that's pretty nice.

174
00:09:13.273 --> 00:09:15.201
Else, I have these two locations,

175
00:09:15.201 --> 00:09:19.071
but we're gonna need to do something
a little bit unique with this one.

176
00:09:19.071 --> 00:09:24.449
So I'm gonna first like this,
const home = f over here, grab that,

177
00:09:26.896 --> 00:09:30.453
Do this and go, all right, I might as
well just have broken it up into two.

178
00:09:30.453 --> 00:09:33.935
There's a reason why I broke it up into
two, I know, I now remember, right?

179
00:09:33.935 --> 00:09:40.852
But we'll go like this, if loc === home,
well we should return a path.join.

180
00:09:40.852 --> 00:09:42.209
So if you don't know path,

181
00:09:42.209 --> 00:09:45.108
path is the pathing utility
that's available in Node js.

182
00:09:45.108 --> 00:09:46.331
It just has a bunch of convenient things.

183
00:09:46.331 --> 00:09:49.789
You should never create your own paths,
let the operating system do it,

184
00:09:49.789 --> 00:09:52.183
let the environment do it,
let the runtime do it.

185
00:09:52.183 --> 00:09:54.015
It is just really annoying to do it.

186
00:09:54.015 --> 00:09:57.133
So I'm gonna import it then,
there you go, import path from "path".

187
00:09:57.133 --> 00:10:00.113
Go back down here, and
I'm gonna go path.join.

188
00:10:00.113 --> 00:10:04.475
Now, go location and
projector.json, right?

189
00:10:04.475 --> 00:10:08.018
So this looks pretty close to what you
would expect in your home directory,

190
00:10:08.018 --> 00:10:09.940
a hidden file called projector.json.

191
00:10:11.120 --> 00:10:15.060
All right, else, if you're in xdg,
usually you have a little bit more, so

192
00:10:15.060 --> 00:10:16.979
we'll do the exact same thing here.

193
00:10:16.979 --> 00:10:23.665
I'll go location,
"projector", projector.json.

194
00:10:23.665 --> 00:10:28.251
So if you don't know what xdg is,
let me just give you

195
00:10:28.251 --> 00:10:32.851
a quick example of it,
echo $XDG_CONFIG_HOME.

196
00:10:32.851 --> 00:10:35.127
So for me, it's my .config folder.

197
00:10:35.127 --> 00:10:37.929
So that's where I have all
my editors configuration.

198
00:10:37.929 --> 00:10:42.847
It's likely if you're using Ubuntu, that's
likely where most of your configuration is

199
00:10:42.847 --> 00:10:47.004
actually under .config or .local,
depending on where you're using it.

200
00:10:47.004 --> 00:10:49.570
Or there's also like a dot something else,
I forget what it is.

201
00:10:49.570 --> 00:10:51.999
But there's a lot of
little XDGs type items.

202
00:10:51.999 --> 00:10:54.303
So there we go, this looks really good.

203
00:10:54.303 --> 00:10:56.872
I mean, I think this looks pretty good,
everything we need to do.

204
00:10:56.872 --> 00:11:01.545
We have a get config duplicate item,
so this is problematic.

205
00:11:01.545 --> 00:11:05.855
So let's call this,
what should we call this thing?

206
00:11:05.855 --> 00:11:07.956
It's gonna call config.

207
00:11:07.956 --> 00:11:09.452
Now, look how beautiful that is.

208
00:11:09.452 --> 00:11:10.856
There we go, we produced the config.

209
00:11:10.856 --> 00:11:15.056
So we have the present working directory,
we now have get config working,

210
00:11:15.056 --> 00:11:16.731
let's get the args, right?

211
00:11:16.731 --> 00:11:22.219
One at the time,
function [SOUND] getArgs (opts: Opts) and

212
00:11:22.219 --> 00:11:25.238
we're gonna want this, right?

213
00:11:25.238 --> 00:11:26.129
This makes sense.

214
00:11:26.129 --> 00:11:30.579
So if opts.args, if there is no args, or

215
00:11:30.579 --> 00:11:34.906
opts.args.length === 0, well,

216
00:11:34.906 --> 00:11:38.483
we can just return that, right?

217
00:11:38.483 --> 00:11:42.136
There's nothing there, there's no
arguments that we're gonna be using,

218
00:11:42.136 --> 00:11:42.649
awesome.

219
00:11:42.649 --> 00:11:47.675
But if there is something, we actually
kinda need to think about this.

220
00:11:47.675 --> 00:11:52.550
Now, it makes sense, if you were to add
a key, how many arguments do we need?

221
00:11:52.550 --> 00:11:55.117
Or if we're gonna add a key and
a value, how many arguments?

222
00:12:00.344 --> 00:12:01.134
Yeah, two, yeah.

223
00:12:01.134 --> 00:12:02.497
&gt;&gt; Two
&gt;&gt; Key and a value, right?

224
00:12:02.497 --> 00:12:05.280
You need to add it, and
if you're gonna add a key and a value,

225
00:12:05.280 --> 00:12:09.495
you need two arguments, key and value, cuz
remember, we go, projector add, foo, bar.

226
00:12:09.495 --> 00:12:11.364
Now, foo is the key, bar is the value.

227
00:12:11.364 --> 00:12:15.094
We can also print it out by doing
projector foo, it will grab that and

228
00:12:15.094 --> 00:12:16.540
go print out bar, right?

229
00:12:16.540 --> 00:12:18.455
So it is a key value type system.

230
00:12:18.455 --> 00:12:22.369
So that means we're gonna need to
do a little kind of stuff here.

231
00:12:22.369 --> 00:12:24.826
So we need to know what type
of operation we're having.

232
00:12:24.826 --> 00:12:30.015
So before we finish this one,
let's go and do getOperation, right?

233
00:12:30.015 --> 00:12:32.880
And so we'll return that.

234
00:12:32.880 --> 00:12:36.954
And so if opts.args, right,
if there is no args, or

235
00:12:36.954 --> 00:12:41.662
let's just yank that whole line honestly,
or it's empty for

236
00:12:41.662 --> 00:12:47.657
whatever reason, let's return,
operation.print, there we go, right?

237
00:12:47.657 --> 00:12:49.294
It's a print operation, correct?

238
00:12:49.294 --> 00:12:51.390
So how do we know we're
doing an add operation?

239
00:12:51.390 --> 00:12:56.445
Well, the first argument into our
system is just literally the word add.

240
00:12:56.445 --> 00:13:01.090
So if opts, oop, wrong language [0]=add,

241
00:13:01.090 --> 00:13:07.226
return Operation, Add, and
then, of course, fix your typo.

242
00:13:07.226 --> 00:13:11.058
There we go, that's pretty much
as straightforward as it gets.

243
00:13:11.058 --> 00:13:14.607
I think we all get this, I can do
the exact same thing again, right?

244
00:13:14.607 --> 00:13:18.996
I could do, if it's rm,
it's a remove operation, right?

245
00:13:18.996 --> 00:13:21.919
There we go, calling it rm might
be a little bit dangerous,

246
00:13:21.919 --> 00:13:24.491
because if you forgot the type
the word projector and

247
00:13:24.491 --> 00:13:28.191
then you access the key that's actually
a file, you're gonna delete it.

248
00:13:28.191 --> 00:13:31.323
So should you actually use
something with the word rm in it?

249
00:13:31.323 --> 00:13:32.304
Probably not.

250
00:13:32.304 --> 00:13:35.140
But you know what,
we live risky lives out here.

251
00:13:35.140 --> 00:13:36.917
So we're gonna keep it going, there we go.

252
00:13:36.917 --> 00:13:39.035
So this seems straightforward.

253
00:13:39.035 --> 00:13:42.854
We could use a switch, default,
whatever good enough for me.

254
00:13:42.854 --> 00:13:45.123
I hope everyone's happy with it.

255
00:13:45.123 --> 00:13:46.524
So there we go.

256
00:13:46.524 --> 00:13:47.634
This should be your operation.

257
00:13:47.634 --> 00:13:49.978
So now, we can go back to our args.

258
00:13:49.978 --> 00:13:53.122
And we probably need to make sure
we're doing a bit of error checking,

259
00:13:53.122 --> 00:13:55.692
cuz this seems like a good
place to do the error checking.

260
00:13:55.692 --> 00:14:00.393
If you say projector add, foo, bar,
bass, well, that's three things.

261
00:14:00.393 --> 00:14:02.533
I don't know how to add three things.

262
00:14:02.533 --> 00:14:05.338
I do know how to add two things,
right, a key and a value,

263
00:14:05.338 --> 00:14:08.749
which means you've messed up and
you haven't included the quotes.

264
00:14:08.749 --> 00:14:11.723
And so I wanna make sure that
you are doing the correct thing,

265
00:14:11.723 --> 00:14:13.367
not me trying to be super clever.

266
00:14:13.367 --> 00:14:15.985
For those that have ever
built any CLI applications,

267
00:14:15.985 --> 00:14:19.360
being dumb with nice error messages
is way better than being clever,

268
00:14:19.360 --> 00:14:22.167
cuz people usually get upset and
disappointed anyways.

269
00:14:22.167 --> 00:14:27.301
So let's go like this,
let's go const operation

270
00:14:27.301 --> 00:14:31.956
= getOperation, and just pass in the opts.

271
00:14:31.956 --> 00:14:34.102
Fantastic, so now we know what we have.

272
00:14:34.102 --> 00:14:36.504
At this point,
you can use whatever you want to use,

273
00:14:36.504 --> 00:14:38.148
I'm just gonna use if statements.

274
00:14:38.148 --> 00:14:41.763
I've never liked switch
statements in C based languages.

275
00:14:41.763 --> 00:14:45.149
They always, I don't know,
they always just never feel that great.

276
00:14:45.149 --> 00:14:48.240
I always feel like they're just
cumbersome if else operations.

277
00:14:48.240 --> 00:14:52.678
All right, so
if (operation === Operation.Print),

278
00:14:52.678 --> 00:14:57.294
well, I need to do some bounds
checking at this point, right?

279
00:14:57.294 --> 00:15:02.408
If opts.args, let's see,
if( opts.args length)

280
00:15:02.408 --> 00:15:07.863
is greater than 1, well,
that's problematic, right?

281
00:15:07.863 --> 00:15:10.219
I've said you either
can have no arguments,

282
00:15:10.219 --> 00:15:14.566
which I'll print all the values, or one
argument and I'll print just that value.

283
00:15:14.566 --> 00:15:16.166
I've never specified any other uses.

284
00:15:16.166 --> 00:15:20.027
Now, we could say, well, ergonomically
weapon if you want multiple, yeah.

285
00:15:20.027 --> 00:15:22.271
We're not gonna do that right now,
we only have two operations.

286
00:15:22.271 --> 00:15:25.534
So we're gonna throw an error in here,
plus I just think it's kinda nice.

287
00:15:25.534 --> 00:15:31.251
So let's just throw a new error,
let's see, expected 0 or

288
00:15:31.251 --> 00:15:37.441
1 arguments but got, oop,
wrong language, don't do that.

289
00:15:37.441 --> 00:15:38.847
Yeah, I forgot about that.

290
00:15:38.847 --> 00:15:44.048
Wrong language altogether,
I should be using this,

291
00:15:44.048 --> 00:15:48.797
but got $(.opts.args.length), right?

292
00:15:48.797 --> 00:15:51.846
That's what we got, and
that was very disappointing.

293
00:15:51.846 --> 00:15:55.821
And I'm also over 80 characters,
also very disappointing right now.

294
00:15:55.821 --> 00:15:58.625
I feel very upset at myself, but
we're just gonna have to deal with it.

295
00:15:58.625 --> 00:16:01.669
All right, so if this is the case,
then it should be pretty simple.

296
00:16:01.669 --> 00:16:04.575
I should just be able to return opts.args,
right?

297
00:16:04.575 --> 00:16:08.852
So whatever it is,
that's the arguments you need.

298
00:16:08.852 --> 00:16:14.785
Awesome, so let's do it again, fp Add.

299
00:16:14.785 --> 00:16:19.266
So if it equals add, and
our length do not equals 3, cuz remember,

300
00:16:19.266 --> 00:16:21.397
it's add, foo, bar, right?

301
00:16:21.397 --> 00:16:25.574
So it's actually three terms,
add being one of them, all right?

302
00:16:25.574 --> 00:16:26.929
Then what do we need to do?

303
00:16:26.929 --> 00:16:32.790
Well, we can say, expected 2 arguments but
got length- 1, right?

304
00:16:32.790 --> 00:16:35.815
You don't wanna say expected three
arguments, it'll be very confused,

305
00:16:35.815 --> 00:16:38.805
people are like, I only provided two,
it'll be very, very confusing.

306
00:16:38.805 --> 00:16:39.658
So there you go.

307
00:16:39.658 --> 00:16:43.306
If that's the case, then we need a slice,
starting at 1, right?

308
00:16:43.306 --> 00:16:44.574
We're gonna copy this array out.

309
00:16:44.574 --> 00:16:47.041
We're gonna pull out that, so
we no longer have add there.

310
00:16:47.041 --> 00:16:50.058
Our operation contains the term add,
we don't need it.

311
00:16:50.058 --> 00:16:55.692
Let's copy that one last time cuz this
is gonna be pretty much the last one.

312
00:16:55.692 --> 00:16:58.894
So I'll say reduce it down to 2,
expected 1.

313
00:16:58.894 --> 00:17:02.606
Fantastic, so if our length does not
equal to, we should have expected 1,

314
00:17:02.606 --> 00:17:03.652
else we slice it off.

315
00:17:03.652 --> 00:17:06.196
That'd be the remove,
we only remove one key.

316
00:17:06.196 --> 00:17:07.646
There we go, fantastic.

317
00:17:07.646 --> 00:17:09.649
Everyone kinda followed along with that?

318
00:17:09.649 --> 00:17:13.161
It's just some nice
little error throwing and

319
00:17:13.161 --> 00:17:17.315
it just feels great,
it's just does the right thing.

320
00:17:17.315 --> 00:17:19.616
So hopefully args does all
the bounce checking and

321
00:17:19.616 --> 00:17:21.587
we don't have to put that somewhere else,

322
00:17:21.587 --> 00:17:24.901
cuz it just seems a little silly to me
to create a config that is invalid.

323
00:17:24.901 --> 00:17:28.234
I'd rather just have the config at least
say it's valid, and then from there,

324
00:17:28.234 --> 00:17:29.095
I can do the things.

325
00:17:29.095 --> 00:17:32.613
We will do the testing for all this,
make sure everything's working, so

326
00:17:32.613 --> 00:17:35.522
we're not bamboozled with a lot
of bugs getting here early.

327
00:17:35.522 --> 00:17:39.337
Plus you get to kinda feel out how
testing would work in this crazy world.

328
00:17:39.337 --> 00:17:42.020
And yeah, all right, so
everyone ready for some Go?

329
00:17:42.020 --> 00:17:42.582
&gt;&gt; Yeah.

330
00:17:42.582 --> 00:17:43.910
&gt;&gt; Yeah, awesome.

