WEBVTT

1
00:00:00.000 --> 00:00:01.773
So now we need to get
the other parts of it,

2
00:00:01.773 --> 00:00:03.869
right, we need the present
working directory.

3
00:00:03.869 --> 00:00:05.479
And we also need the config.

4
00:00:05.479 --> 00:00:08.131
So these should hopefully
be pretty easy to code up.

5
00:00:08.131 --> 00:00:13.450
So let's go function, get config,
and we're gonna take in a,

6
00:00:13.450 --> 00:00:18.966
instead of taking in the ops object,
we're just going to take in,

7
00:00:18.966 --> 00:00:22.511
lets just take in the option
to a file buff or

8
00:00:22.511 --> 00:00:25.789
a path buff that is a part of our struct.

9
00:00:25.789 --> 00:00:28.784
And the reason being remember with
Rust when you pass an object,

10
00:00:28.784 --> 00:00:29.902
you don't get it back.

11
00:00:29.902 --> 00:00:34.768
So we gonna think a little bit
more about what we have available.

12
00:00:34.768 --> 00:00:40.352
So let's go like this, config which
is gonna be an option of file or

13
00:00:40.352 --> 00:00:42.456
file path buff awesome.

14
00:00:42.456 --> 00:00:44.520
So I'm gonna go all the way up here,
where are you?

15
00:00:44.520 --> 00:00:47.661
There you're, that's what you are, and

16
00:00:47.661 --> 00:00:51.507
we're gonna return back out a path buff,
awesome.

17
00:00:51.507 --> 00:00:55.911
So exact same thing we're supposed to do
if let some, we'll just call this V for

18
00:00:55.911 --> 00:01:00.316
value equals config, so if it is if you've
provided me one then I'm just simply

19
00:01:00.316 --> 00:01:02.129
gonna return that one, right?

20
00:01:02.129 --> 00:01:07.047
I'm just gonna echo right back out to you,
return V, right?

21
00:01:07.047 --> 00:01:11.359
Fantastic, but if you didn't provide
me one I now need to go out and

22
00:01:11.359 --> 00:01:13.902
do the exact same thing I didn't note.

23
00:01:13.902 --> 00:01:18.428
So we can go back and we can look
at node for just one quick second.

24
00:01:18.428 --> 00:01:19.154
Where did we do this?

25
00:01:19.154 --> 00:01:20.546
We did this right here, right?

26
00:01:20.546 --> 00:01:24.373
I grabbed something from the environment
I just said hey what's your config

27
00:01:24.373 --> 00:01:25.163
home, right?

28
00:01:25.163 --> 00:01:28.094
So we can do almost this exact
that same thing right here, right?

29
00:01:28.094 --> 00:01:35.522
So, I'm gonna jump back using effectively
that code up [SOUND] There we go, right?

30
00:01:35.522 --> 00:01:37.762
Look at that we have pretty much
the exact same code right here.

31
00:01:37.762 --> 00:01:39.989
So how do we translate
this in the Rust world?

32
00:01:39.989 --> 00:01:41.378
Everything is a lead, right?

33
00:01:41.378 --> 00:01:46.498
This is a constant, and
instead of using process we go standard.

34
00:01:46.498 --> 00:01:49.304
And var right?

35
00:01:49.304 --> 00:01:53.162
And so, now I can just simply take in this
beautiful little item right here, right?

36
00:01:53.162 --> 00:01:56.288
So there we go,
we have this nice location.

37
00:01:56.288 --> 00:01:57.213
So what is this?

38
00:01:57.213 --> 00:02:01.733
Well, let's first go in here and
let's kinda jump to this thing.

39
00:02:01.733 --> 00:02:04.621
And of course, the jump to
definition awesome, it's working.

40
00:02:04.621 --> 00:02:08.715
So it actually returns a result of string,
or there's a VAR error.

41
00:02:08.715 --> 00:02:09.574
So this is good to know.

42
00:02:09.574 --> 00:02:13.872
So that means if we take advantage
of the error throwing stuff, and

43
00:02:13.872 --> 00:02:17.500
anyhow we can make this function really,
really nice.

44
00:02:17.500 --> 00:02:19.796
Yeah, we have a question.

45
00:02:19.796 --> 00:02:23.603
&gt;&gt; Can you get rid of the length
check because of the pop expect?

46
00:02:25.600 --> 00:02:28.827
&gt;&gt; No, we can't get rid of that
because you could always provide more

47
00:02:28.827 --> 00:02:29.699
arguments here.

48
00:02:29.699 --> 00:02:31.955
I could provide two arguments to print.

49
00:02:31.955 --> 00:02:35.168
And so pop would actually
pop off the second argument.

50
00:02:35.168 --> 00:02:37.846
It might be a bit confusing, we
definitely got to keep that right there.

51
00:02:37.846 --> 00:02:41.038
So I'm using the exact same stuff
right here we have our location,

52
00:02:41.038 --> 00:02:41.897
we have an error.

53
00:02:41.897 --> 00:02:46.077
So instead of returning a pathBuff,
let's return an anyhow result and

54
00:02:46.077 --> 00:02:50.342
this is where the magic really happens
with Rust and its error handling.

55
00:02:50.342 --> 00:02:54.627
So the exact same error handling
was on the other side of go,right?

56
00:02:54.627 --> 00:02:59.361
We had every single line with if
error not equal to nil do this.

57
00:02:59.361 --> 00:03:01.438
Now we don't have to worry about that.

58
00:03:01.438 --> 00:03:04.372
Since I've just returned
this into a result,

59
00:03:04.372 --> 00:03:06.561
we have to turn it into an okay now.

60
00:03:06.561 --> 00:03:10.574
So, hey this function did not fail and
I can just do this beautiful thing and

61
00:03:10.574 --> 00:03:11.798
now the word context.

62
00:03:11.798 --> 00:03:16.117
Now context allows me to add a little
bit of information to the air,

63
00:03:16.117 --> 00:03:17.441
not like an expect.

64
00:03:17.441 --> 00:03:19.679
When an expect fails your program fails.

65
00:03:19.679 --> 00:03:23.720
Context on the other hand is when an error
happens, I can just add some words

66
00:03:23.720 --> 00:03:27.968
to it and then somewhere else the program
can fail or give me that information.

67
00:03:27.968 --> 00:03:29.881
So, I'm just gonna do that right here.

68
00:03:29.881 --> 00:03:34.856
Unable to get xtg_config_home, yeah,

69
00:03:34.856 --> 00:03:40.797
awesome, and
then I'm gonna give it the old gUiw,

70
00:03:40.797 --> 00:03:45.925
beautiful little vim command right there.

71
00:03:45.925 --> 00:03:49.259
And then toss on the end,
a wonderful little question mark.

72
00:03:49.259 --> 00:03:51.425
Now, what that question mark
does is it unwraps the result,

73
00:03:51.425 --> 00:03:52.534
we already went through that.

74
00:03:52.534 --> 00:03:57.352
It doesn't match on the result, and
if there was an air, returns the air.

75
00:03:57.352 --> 00:03:59.710
If there's not an air just
gives me up the value.

76
00:03:59.710 --> 00:04:03.481
And look at that we now have the string so
fantastic, right?

77
00:04:03.481 --> 00:04:08.304
So I'm just gonna use this and
the promise is we have a string here.

78
00:04:08.304 --> 00:04:12.991
We don't want a string right
we want a path buff, so

79
00:04:12.991 --> 00:04:17.467
let's do this let Lok
equals path buff From Oak.

80
00:04:17.467 --> 00:04:19.939
All right, so
now what does it look it's a path buff.

81
00:04:19.939 --> 00:04:22.054
Awesome, we have exactly what we want.

82
00:04:22.054 --> 00:04:26.507
And so we're gonna make it mutable path
buff because we want to do a couple

83
00:04:26.507 --> 00:04:27.684
operations on it.

84
00:04:27.684 --> 00:04:32.512
Let's go loc.push, and
I'm wanna push in projector.

85
00:04:32.512 --> 00:04:36.603
And then I'm gonna push in projector.json.

86
00:04:36.603 --> 00:04:43.299
So this is exactly kind of what you
would expect from xtg.config.home.

87
00:04:43.299 --> 00:04:46.765
So I'm kind of using this method I'm not
concerned too much about home anymore just

88
00:04:46.765 --> 00:04:49.784
like I wasn't on go we're just going
to kind of stick to one of them you can

89
00:04:49.784 --> 00:04:50.543
pick one of them.

90
00:04:50.543 --> 00:04:55.967
However you want to but there you go,
I now have my location pretty good, right?

91
00:04:55.967 --> 00:05:01.082
And so now I just need the return and
Ok(loc) fantastic.

92
00:05:01.082 --> 00:05:05.555
We've just done it and it really made that
error handling right here pretty dang easy

93
00:05:05.555 --> 00:05:09.476
I could make it a little bit more
readable throw that right there awesome.

94
00:05:09.476 --> 00:05:11.270
I'm gonna copy this entire thing.

95
00:05:11.270 --> 00:05:17.831
Go down here and we're gonna do one more
function, get present working directory.

96
00:05:17.831 --> 00:05:22.210
And again, remember with Rust,
we wanna pass in the value we want to use.

97
00:05:22.210 --> 00:05:27.208
We don't want to just pass in the entire
config or the entire options because then

98
00:05:27.208 --> 00:05:32.059
we run into this huge problem, with me
converting one thing from a vector, and

99
00:05:32.059 --> 00:05:37.299
me having these references, and now I'm
using this and this, and we got problems.

100
00:05:37.299 --> 00:05:41.443
So let's just stick with this because or
else we don't want to clone out.

101
00:05:41.443 --> 00:05:45.973
So they will make more sense, the more you
play with rest, sticking with values and

102
00:05:45.973 --> 00:05:46.694
using them.

103
00:05:46.694 --> 00:05:51.223
So let's go let's do
what do we do right here?

104
00:05:51.223 --> 00:05:54.789
That's right,
we did a present working directory and

105
00:05:54.789 --> 00:05:57.669
did this as an option of a path buff,
right?

106
00:05:57.669 --> 00:05:59.151
And let's have the exact same thing,

107
00:05:59.151 --> 00:06:02.363
cuz how much do you wanna bet that present
working directory might throw an error?

108
00:06:02.363 --> 00:06:05.163
So I'm just gonna pre
assume that it is and

109
00:06:05.163 --> 00:06:08.283
I'm gonna return out a path buff,
all right?

110
00:06:08.283 --> 00:06:12.804
If present working directory,
we can also do is_some and

111
00:06:12.804 --> 00:06:17.893
then unwrap it, but
might as well use pattern matching, right?

112
00:06:17.893 --> 00:06:25.823
Present working directory,return some
present working directory, right?

113
00:06:25.823 --> 00:06:28.543
If it is some, awesome, let's return it.

114
00:06:28.543 --> 00:06:31.884
If it's not some,
let's do something different.

115
00:06:31.884 --> 00:06:36.128
Let's do exactly this stuff, but
how do we do present working directory?

116
00:06:36.128 --> 00:06:37.834
Well, how much do you wanna bet?

117
00:06:37.834 --> 00:06:42.177
There's yet another one of these
type of things that exist.

118
00:06:42.177 --> 00:06:47.873
Now I'm not 100% sure if this thing
exists but let's figure this out.

119
00:06:47.873 --> 00:06:50.319
So let's go to the standard
let's go to end.

120
00:06:50.319 --> 00:06:53.344
And I bet you there is current dir.

121
00:06:53.344 --> 00:06:57.773
There you go that's the one the current
directory it's in a path buff awesome but

122
00:06:57.773 --> 00:06:59.023
it does have an error.

123
00:06:59.023 --> 00:07:03.306
So, I'm happy that we did put this
on here, so let's execute that.

124
00:07:03.306 --> 00:07:06.973
Let's put a nice little
bit of context on this and

125
00:07:06.973 --> 00:07:11.625
went aired getting current directory
I look nice that is we add

126
00:07:11.625 --> 00:07:15.756
a little bit of context for
our future selves, right?

127
00:07:15.756 --> 00:07:21.603
Let's see present working directory equals
that So what is present working directory?

128
00:07:21.603 --> 00:07:23.785
It is a path buff, awesome.

129
00:07:23.785 --> 00:07:28.376
Which means we can really just simply,
we can just return this out, right?

130
00:07:28.376 --> 00:07:32.985
No need to do anything, else we got
exactly what we wanted to get, fantastic.

131
00:07:32.985 --> 00:07:34.764
Let's just use that.

132
00:07:34.764 --> 00:07:37.698
And, of course, it's okay It's not some,

133
00:07:37.698 --> 00:07:40.878
we're not using options
we're using results.

134
00:07:40.878 --> 00:07:42.043
My fault on that one.

135
00:07:42.043 --> 00:07:45.484
There we go, so
we now have everything we kind of want.

136
00:07:45.484 --> 00:07:50.137
And so now we should just be able
to build that simple method,

137
00:07:50.137 --> 00:07:53.249
to be able to convert a opt into a config.

138
00:07:53.249 --> 00:07:55.034
So let's do that.

139
00:07:55.034 --> 00:07:58.083
So we have a couple of
different ways we can do that.

140
00:07:58.083 --> 00:08:02.773
We can either do a function that exists a
public function that's like git config and

141
00:08:02.773 --> 00:08:04.057
you pass in an option.

142
00:08:04.057 --> 00:08:09.764
Or the options from those CLI, or we could
just do an intel, intel is are pretty fun.

143
00:08:09.764 --> 00:08:13.706
I like those, so let's do a let's
I'm gonna put it way up here,

144
00:08:13.706 --> 00:08:16.963
cuz it just feels weird being down there,
right?

145
00:08:16.963 --> 00:08:18.685
And we also haven't even described it yet.

146
00:08:18.685 --> 00:08:21.265
Let's do a struct config.

147
00:08:21.265 --> 00:08:24.403
We haven't, we haven't even done that yet.

148
00:08:24.403 --> 00:08:29.265
How'd you guys forget,
operation: which is gonna be,

149
00:08:29.265 --> 00:08:34.432
a present working directory,
which is gonna be a pathBuff,

150
00:08:34.432 --> 00:08:37.995
and a config which is gonna be a pathBuff.

151
00:08:37.995 --> 00:08:42.751
Remember, we do need to make these public,
so, don't forget to make things public,

152
00:08:42.751 --> 00:08:46.335
cuz we need someone to be able to
import all this information in and

153
00:08:46.335 --> 00:08:48.509
to be able to use all these properties.

154
00:08:48.509 --> 00:08:53.244
And so now we can do our final little bit,
which is gonna say, impl From.

155
00:08:53.244 --> 00:08:55.454
Actually, we're gonna wanna do a TryFrom,
right?

156
00:08:55.454 --> 00:09:01.781
TryFrom a Opts for config.

157
00:09:01.781 --> 00:09:05.781
All right, so we're gonna convert
our options into a config fantastic.

158
00:09:05.781 --> 00:09:10.244
This should be pretty easy to do again
implement the members we get our type err

159
00:09:10.244 --> 00:09:12.039
and we have retry for a method.

160
00:09:12.039 --> 00:09:17.222
Well let's do that let's go and
anyhow air.

161
00:09:17.222 --> 00:09:18.513
Hopefully none of this is too surprising.

162
00:09:18.513 --> 00:09:19.679
Ooh, love Ws.

163
00:09:19.679 --> 00:09:22.813
Didn't quite make it out of insert mode.

164
00:09:22.813 --> 00:09:24.290
There we go, we have it.

165
00:09:24.290 --> 00:09:26.329
Now we have the value that's ops again.

166
00:09:26.329 --> 00:09:28.355
What is happening to the ops right here?

167
00:09:29.475 --> 00:09:31.534
It's being consumed, right?

168
00:09:31.534 --> 00:09:34.746
So that means our main
program cannot reference Opts

169
00:09:34.746 --> 00:09:36.942
after we pass it into this TryFrom.

170
00:09:36.942 --> 00:09:39.389
That makes sense though,
we don't really need it again.

171
00:09:39.389 --> 00:09:41.419
I think we're all okay with that.

172
00:09:41.419 --> 00:09:45.758
Again, don't need that air because we're
gonna be using the anyhow results type.

173
00:09:45.758 --> 00:09:47.173
It's just a simple shorthand.

174
00:09:47.173 --> 00:09:48.400
You can redefine things,

175
00:09:48.400 --> 00:09:51.762
you can effectively do these like
little type redefinitions, right?

176
00:09:51.762 --> 00:09:56.440
So I can go foo equals a result
of you usize that, right?

177
00:09:56.440 --> 00:09:57.912
And you're like, Cool.

178
00:09:57.912 --> 00:10:02.129
So now if I were to refer to foo,
it has a specific value, right?

179
00:10:02.129 --> 00:10:04.637
So that's all that any house really
doing underneath the hood if

180
00:10:04.637 --> 00:10:07.014
you're wondering why their
result only takes in one value.

181
00:10:07.014 --> 00:10:09.403
They just defined the air,
to be a special type of air.

182
00:10:09.403 --> 00:10:10.823
So that they can handle.

183
00:10:10.823 --> 00:10:11.636
All right, awesome.

184
00:10:11.636 --> 00:10:15.885
So we have this try from and now we just
need to convert this one thing at a time.

185
00:10:15.885 --> 00:10:19.123
So let's do all the fun stuff.

186
00:10:19.123 --> 00:10:22.844
Value we do have is it args?

187
00:10:22.844 --> 00:10:25.488
Yep, we have this nice beautiful
vector string right here.

188
00:10:25.488 --> 00:10:29.229
And now I can call try into, right?

189
00:10:29.229 --> 00:10:34.048
And I can go let operation equals this and

190
00:10:34.048 --> 00:10:37.321
do one of those fantastic.

191
00:10:37.321 --> 00:10:41.234
We have the operation because we already
defined how it does its morphing and

192
00:10:41.234 --> 00:10:42.530
everything down below.

193
00:10:42.530 --> 00:10:50.721
Fantastic I can go config because I'm
gonna go valued I'm gonna go get config So

194
00:10:50.721 --> 00:10:55.132
from of course value.config fantastic.

195
00:10:55.132 --> 00:11:00.162
And of course present working directory
for present working directory, right?

196
00:11:00.162 --> 00:11:01.558
We have all three of those,

197
00:11:01.558 --> 00:11:05.035
now I could have in lined each one
of these when I created the struct.

198
00:11:05.035 --> 00:11:07.883
But I just kinda wanna throw it out
here so you could see each step.

199
00:11:07.883 --> 00:11:12.102
But in the reality is I could have
just done a simple one of these and

200
00:11:12.102 --> 00:11:15.108
just had them nicely defined in here,
right?

201
00:11:15.108 --> 00:11:19.176
I could just move them all down in here,
but we'll do operation, config,

202
00:11:19.176 --> 00:11:20.801
present working directory.

203
00:11:20.801 --> 00:11:24.568
And of course it's gonna say hey
you're wrong I expect a result object,

204
00:11:24.568 --> 00:11:28.039
If you're absolutely right,
let me give you that result object.

205
00:11:28.039 --> 00:11:32.728
Okay, boom, and
this thing has mismatch thing.

206
00:11:32.728 --> 00:11:33.626
I forgot to do.

207
00:11:33.626 --> 00:11:35.979
[LAUGH] It's not funny.

208
00:11:35.979 --> 00:11:37.895
It's not funny at all.

209
00:11:37.895 --> 00:11:42.407
There we go,
nice error handling it feels very simple,

210
00:11:42.407 --> 00:11:45.104
it just passes this up the chain.

211
00:11:45.104 --> 00:11:47.014
Does this all feel pretty good,

212
00:11:47.014 --> 00:11:51.834
the air handling.I know you guys are
probably rapidly typing trying to keep up.

213
00:11:51.834 --> 00:11:55.418
It's very familiar for me,
so it feels very easy to do.

214
00:11:55.418 --> 00:11:58.461
I know it feels foreign for
you, it's like the first

215
00:11:58.461 --> 00:12:03.252
time seeing a lot of these kinda concepts,
but it becomes progressively easier.

216
00:12:03.252 --> 00:12:06.157
You just little bit of time
always makes things easier.

217
00:12:06.157 --> 00:12:09.640
Does this all make sense is everyone
kind of on the same board with this

218
00:12:09.640 --> 00:12:12.058
does that make sense
what just happened there.

219
00:12:12.058 --> 00:12:12.914
What about this?

220
00:12:12.914 --> 00:12:14.775
Try_into, do you like that?

221
00:12:14.775 --> 00:12:17.574
What happened when I did that try_into?

222
00:12:19.190 --> 00:12:21.158
Does anyone know?

223
00:12:21.158 --> 00:12:22.542
How did it know what it was?

224
00:12:24.255 --> 00:12:26.400
Or two things happened, right?

225
00:12:26.400 --> 00:12:29.409
Well first off, how did I use operation?

226
00:12:29.409 --> 00:12:32.525
I used operation down here and config.

227
00:12:32.525 --> 00:12:36.253
So knew for
a fact it was of type operation.

228
00:12:36.253 --> 00:12:37.906
Second, what is try into?

229
00:12:37.906 --> 00:12:43.520
Try into is a method that exists if
you implement the try from trait.

230
00:12:43.520 --> 00:12:47.435
So when I go down here and I had this nice
little try from trait right here I said

231
00:12:47.435 --> 00:12:50.185
hey if you're a vector string and
I called try into you

232
00:12:50.185 --> 00:12:53.261
can become an operation if you
need to become an operation.

233
00:12:53.261 --> 00:12:57.483
And so that's how it was able to do
all those transformations the compiler

234
00:12:57.483 --> 00:13:01.313
figured it out, from how I used to
Operation what needs to happen.

235
00:13:01.313 --> 00:13:05.198
So it's pretty clever, pretty awesome and
knows exactly where to call it and

236
00:13:05.198 --> 00:13:07.481
now all the airs are nicely
flowing through.

237
00:13:07.481 --> 00:13:13.444
And so when we go to our main file,
what do we call it, projector.rs.

238
00:13:13.444 --> 00:13:17.510
I can then, I can like this config.

239
00:13:17.510 --> 00:13:21.074
Up, I probably need to
import in config and

240
00:13:21.074 --> 00:13:26.821
I can go try into do one of those
beautiful little things right there.

241
00:13:26.821 --> 00:13:32.791
And then of course I need to
return a result of nothing, right?

242
00:13:32.791 --> 00:13:34.961
Cuz we don't do anything
out of the main function so

243
00:13:34.961 --> 00:13:37.082
I'm gonna do this nice
little okay over here, and

244
00:13:37.082 --> 00:13:39.978
of course it's gonna say I don't
know what this result is, right?

245
00:13:39.978 --> 00:13:48.245
I don't recognize it
anyhow use anyhow result.

246
00:13:48.245 --> 00:13:51.185
And then I got this really beautiful
nice little thing that worked

247
00:13:51.185 --> 00:13:53.921
all the way through except for
the darn debug which I forgot.

248
00:13:53.921 --> 00:13:58.903
So of course do the old derive debug and
then it's gonna say well

249
00:13:58.903 --> 00:14:03.895
I don't know if you know this but
operation doesn't do debug.

250
00:14:03.895 --> 00:14:07.959
Okay, so that's pretty rude and so
we're gonna throw that on there since all

251
00:14:07.959 --> 00:14:12.146
the subtypes and operation do derive debug
we should be good to go jump back to our

252
00:14:12.146 --> 00:14:16.165
main file and as you can see everything's
working let's go cargo run blah.

253
00:14:16.165 --> 00:14:20.420
Blah, blah, blah, blah, blah and it's
gonna say your print is wrong you gave

254
00:14:20.420 --> 00:14:23.670
me two again but I expected one so
it all worked out in the end.

255
00:14:23.670 --> 00:14:28.310
I hope it's not too overwhelming is
kind of an ambitious project cuz I

256
00:14:28.310 --> 00:14:32.317
do a lot of these three languages
on Twitch and for YouTube.

257
00:14:32.317 --> 00:14:35.712
And I don't wanna overwhelm because they
all feel more trivial to me because I do

258
00:14:35.712 --> 00:14:36.228
them a lot.

259
00:14:36.228 --> 00:14:41.080
But I feel like I had to learn rust
by doing things reading things and

260
00:14:41.080 --> 00:14:43.085
doing it a bunch over time.

261
00:14:43.085 --> 00:14:46.571
But if I could have just saw someone one
to one translate something really fast.

262
00:14:46.571 --> 00:14:50.013
I feel like that would have been
I would have been like, okay?

263
00:14:50.013 --> 00:14:51.196
Yeah, this makes more sense.

264
00:14:51.196 --> 00:14:54.256
Okay, but
the hard part I think about rust is just,

265
00:14:54.256 --> 00:14:57.111
knowing more about what
traits are available.

266
00:14:57.111 --> 00:15:01.120
A lot of what makes something idiomatic
is just knowing what is available.

267
00:15:01.120 --> 00:15:03.636
And I feel like that's
just a function of time.

268
00:15:03.636 --> 00:15:05.780
And how good you are at
reading documentation and

269
00:15:05.780 --> 00:15:07.980
remembering specific things and
how to use them.

