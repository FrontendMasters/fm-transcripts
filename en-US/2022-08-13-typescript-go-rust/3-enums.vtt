WEBVTT

1
00:00:00.160 --> 00:00:05.580
So I'm gonna cover one more thing that
I think is pretty fun which is Enums.

2
00:00:05.580 --> 00:00:08.779
Now you're probably thinking
Enums those are fairly boring,

3
00:00:08.779 --> 00:00:12.274
well rust makes them way more fun,
in fact it's so much fun that it did

4
00:00:12.274 --> 00:00:16.125
actually change you can do just
the greatest things in the universe.

5
00:00:16.125 --> 00:00:19.960
And it's really why rust has become my
personal like my favourite language is

6
00:00:19.960 --> 00:00:22.143
because of this one concept right here,
and

7
00:00:22.143 --> 00:00:24.455
also the awesome libraries and
other things.

8
00:00:26.175 --> 00:00:31.161
So first we're gonna go through and I'll
just show them in all three languages.

9
00:00:31.161 --> 00:00:33.940
Go having the least
awesome Enum support and

10
00:00:33.940 --> 00:00:37.520
rust having the most
awesomeness Enum support.

11
00:00:37.520 --> 00:00:40.630
So let's go back to my TS file,
what did I call it?

12
00:00:40.630 --> 00:00:41.810
TS, Yeah.
All right.

13
00:00:42.870 --> 00:00:46.610
And so, for this one,
this is TypeScript TS Enum, right.

14
00:00:46.610 --> 00:00:50.590
Don't do that you only do that with types.

15
00:00:50.590 --> 00:00:53.744
And so I can have like foo,
bar and baz right?

16
00:00:53.744 --> 00:00:58.020
And of course, it has a concrete
value to when it's compiled.

17
00:00:58.020 --> 00:01:00.340
I assume it becomes a two and
TypeScript land.

18
00:01:00.340 --> 00:01:02.450
I only assume that I
don't actually know that.

19
00:01:02.450 --> 00:01:05.310
But I assume they do things to
make it very, very nice, right?

20
00:01:05.310 --> 00:01:06.360
So this, this all makes sense.

21
00:01:06.360 --> 00:01:08.450
I assume everybody understands the Enums.

22
00:01:08.450 --> 00:01:09.680
Okay, awesome.

23
00:01:09.680 --> 00:01:12.570
All right, and I'm gonna,
let's go to go for just a second.

24
00:01:12.570 --> 00:01:16.520
Even though I think this it just makes me
a little bit sad about their Enum support.

25
00:01:16.520 --> 00:01:18.840
So I'm gonna just create a main dot go.

26
00:01:18.840 --> 00:01:22.613
You always have to go package main,
cannot do that func main.

27
00:01:22.613 --> 00:01:27.571
Also just quick side note rust and go have
a main function whereas TypeScript has

28
00:01:27.571 --> 00:01:31.863
just a main file so, if you ever see
why have main functions on rust but

29
00:01:31.863 --> 00:01:37.260
not on TypeScript good speakers well,
they don't have an entry point the same.

30
00:01:37.260 --> 00:01:38.300
All right?

31
00:01:38.300 --> 00:01:42.426
So anyways, we take this and
we can go like this type,

32
00:01:42.426 --> 00:01:45.177
we'll call it GoEnum is an int, and

33
00:01:45.177 --> 00:01:50.300
then I can give it the old const
to I know this is gonna be great.

34
00:01:50.300 --> 00:01:53.880
Foo is a GoEnum iota.

35
00:01:53.880 --> 00:01:57.220
You're thinking iota what a great name?

36
00:01:57.220 --> 00:01:59.430
Iota is just this auto incrementing item.

37
00:01:59.430 --> 00:02:01.090
This is how you specify it.

38
00:02:01.090 --> 00:02:02.960
I know it's absolutely ridiculous.

39
00:02:02.960 --> 00:02:03.968
But as you can see,

40
00:02:03.968 --> 00:02:07.870
it's an int value two just like
the other one was an anti value two.

41
00:02:07.870 --> 00:02:12.440
Okay, we're gonna, use an Enum and Go
when we're building the CLI application.

42
00:02:12.440 --> 00:02:16.620
But it just emotionally hurts me
that this is what they gave us.

43
00:02:16.620 --> 00:02:17.590
But that's okay.

44
00:02:17.590 --> 00:02:19.120
Enums aren't a huge part of programming.

45
00:02:19.120 --> 00:02:21.300
I don't think anyone's like to
upset about it except for me.

46
00:02:22.620 --> 00:02:23.600
So let's go back here.

47
00:02:23.600 --> 00:02:27.400
I'm gonna copy this TSC Enum, and
I'm going to go to that main RS file.

48
00:02:28.450 --> 00:02:31.030
And we're gonna just
paste it right in here.

49
00:02:31.030 --> 00:02:32.730
And I'm gonna call it Rs.

50
00:02:32.730 --> 00:02:34.310
There you go look at RSENums.

51
00:02:34.310 --> 00:02:35.970
How great is that?

52
00:02:35.970 --> 00:02:36.590
All right, so

53
00:02:36.590 --> 00:02:39.650
they're pretty much identical to
TypeScript at this current point.

54
00:02:41.010 --> 00:02:42.090
But they get a lot better.

55
00:02:42.090 --> 00:02:44.190
They get so much better.

56
00:02:44.190 --> 00:02:45.430
So I don't want to ruin it.

57
00:02:45.430 --> 00:02:47.030
And I know I've already
skipped ahead a little bit.

58
00:02:47.030 --> 00:02:49.090
You could also assign values, right?

59
00:02:49.090 --> 00:02:53.614
Foo equals 123, if you didn't want that,
you can also use strings in TypeScript

60
00:02:53.614 --> 00:02:57.691
if you really, really want it to Go,
ridiculous, now rust it's awesome,

61
00:02:57.691 --> 00:03:01.387
ours is TypeScript see I already pre
planned all these great jokes and

62
00:03:01.387 --> 00:03:04.861
observations I was making,
it's like I've done this before.

63
00:03:04.861 --> 00:03:06.415
All right, so why go over enums?

64
00:03:06.415 --> 00:03:08.804
They're very very simple, but

65
00:03:08.804 --> 00:03:13.496
this is where it gets awesome you
can add types to Enums in rust.

66
00:03:13.496 --> 00:03:16.130
Now yeah, I don't want I
don't want to look at it yet.

67
00:03:16.130 --> 00:03:20.250
Okay, so let's,
let's just add some types here.

68
00:03:20.250 --> 00:03:21.110
Are you ready for this?

69
00:03:22.590 --> 00:03:24.000
Okay, I see everyone's ready for it.

70
00:03:24.000 --> 00:03:26.403
All right, so I'm gonna add an i32 right?

71
00:03:26.403 --> 00:03:28.120
So that's just an integer.

72
00:03:28.120 --> 00:03:30.130
Now notice something right away.

73
00:03:30.130 --> 00:03:32.170
Did I specify type on bar?

74
00:03:32.170 --> 00:03:34.203
No.
Did I specify one on bass?

75
00:03:34.203 --> 00:03:36.550
No.
But I did put one here on Foo,

76
00:03:36.550 --> 00:03:39.170
let's go even further.

77
00:03:39.170 --> 00:03:42.380
I'm gonna put this one as a string,

78
00:03:42.380 --> 00:03:46.981
you don't have to have
the same types on the Enums.

79
00:03:46.981 --> 00:03:49.998
So they call this a some type I believe
is the functional properness of it,

80
00:03:49.998 --> 00:03:51.371
I don't wear tie dye t-shirts.

81
00:03:51.371 --> 00:03:54.487
So I am not the best
functional person out there,

82
00:03:54.487 --> 00:03:57.375
my neck beard just never seems to come in,
but

83
00:03:57.375 --> 00:04:01.708
I hear these are called Functional Tests
sorts of stuff here right?

84
00:04:01.708 --> 00:04:05.960
And this allows you to create things
that are very hard in traditional

85
00:04:05.960 --> 00:04:10.450
typed languages, very obvious
example is heterogenous list, right?

86
00:04:10.450 --> 00:04:15.291
A list that contains, okay, first item
is NRA, the second item is a string,

87
00:04:15.291 --> 00:04:20.508
the third item is a number, that's very
easy in JavaScript planned that's very,

88
00:04:20.508 --> 00:04:25.105
very hard and most typed languages,
because those aren't there.

89
00:04:25.105 --> 00:04:27.585
They're like non overlapping
values at all right?

90
00:04:27.585 --> 00:04:30.345
Once a string ones a number you don't,
they just don't overlap.

91
00:04:30.345 --> 00:04:35.357
Whereas with rust,
I can create a vector of this RSEnum, and

92
00:04:35.357 --> 00:04:41.240
now I have a list that can be
contained of strings of sub vectors.

93
00:04:41.240 --> 00:04:44.340
I have I 30 twos and it becomes this
really kind of I what I think is a pretty

94
00:04:44.340 --> 00:04:46.040
powerful construct right here.

95
00:04:46.040 --> 00:04:46.770
So I love this.

96
00:04:46.770 --> 00:04:48.650
I just think this is
the greatest thing ever.

97
00:04:48.650 --> 00:04:51.675
And at first this doesn't seem
like it's that big of a deal, but

98
00:04:51.675 --> 00:04:54.540
man, you can make some pretty
awesome stuff with this.

99
00:04:54.540 --> 00:04:57.600
And it's always been the thing that
I hate the most about type languages.

100
00:04:57.600 --> 00:05:00.850
And so there we go, let's see,
where did I wanna go with this?

101
00:05:00.850 --> 00:05:02.030
Just so I know what I wanna do.

102
00:05:03.070 --> 00:05:05.330
All right, yeah,
we can I can even show you how to here.

103
00:05:05.330 --> 00:05:07.940
Well do a little example
of using them too.

104
00:05:07.940 --> 00:05:10.444
So I'll go like this
let Foo equals RSEnum,

105
00:05:10.444 --> 00:05:13.500
and then I can create a Foo and
give it the number five.

106
00:05:13.500 --> 00:05:18.710
All right, so
how do I get that number five out of here?

107
00:05:18.710 --> 00:05:20.280
Well, there's a couple things I can do.

108
00:05:20.280 --> 00:05:22.410
The first thing I can do is I
can do an if statement, right?

109
00:05:22.410 --> 00:05:27.240
So I can go if, let, now this is what
what is referred to as pattern matching.

110
00:05:28.440 --> 00:05:32.240
If foo value equals foo, right?

111
00:05:32.240 --> 00:05:36.660
So I literally am pattern matching this if
statement creating a variable on the if

112
00:05:36.660 --> 00:05:37.380
statement.

113
00:05:37.380 --> 00:05:44.850
So if Foo is an is a subtype of
Foo I plucked out the value.

114
00:05:44.850 --> 00:05:47.974
So when I look at this type,
it's an RSEnum,

115
00:05:47.974 --> 00:05:51.360
when I look at the value
right here it is an i32.

116
00:05:51.360 --> 00:05:54.035
So I've actually plucked out the value.

117
00:05:54.035 --> 00:05:58.987
You can do the same thing in a less
kind of specific context you can do

118
00:05:58.987 --> 00:06:01.120
something called a match.

119
00:06:01.120 --> 00:06:04.640
So this also does pattern matching,
which pattern matching is pretty awesome.

120
00:06:04.640 --> 00:06:08.157
One thing that's super cool about it,
is that it can tell you right away,

121
00:06:08.157 --> 00:06:10.260
you have a non exhaustive pattern match.

122
00:06:10.260 --> 00:06:12.759
So if you're trying to match
on all the different values,

123
00:06:12.759 --> 00:06:16.330
rust can right away tell you hey,
you haven't done everything yet.

124
00:06:16.330 --> 00:06:18.720
You need to go and
make sure that this thing is working.

125
00:06:18.720 --> 00:06:21.720
You can't even compile this
program when it's not like that.

126
00:06:21.720 --> 00:06:25.477
So then I can put in Foo, and
I can put in the value and

127
00:06:25.477 --> 00:06:29.072
now I have access,
to the value of RSEnum right?

128
00:06:29.072 --> 00:06:32.564
And so now I have access to that value,
but of course it's still telling me hey

129
00:06:32.564 --> 00:06:36.381
you're still missing bar and baz and so if
I were to do pattern matching I'd actually

130
00:06:36.381 --> 00:06:38.735
have to do the whole nine yards for
each one of them.

131
00:06:38.735 --> 00:06:43.364
You can also cheat and do this which
I think probably isn't the best

132
00:06:43.364 --> 00:06:47.993
practice because if you add a new value or
a new type to your Enum this

133
00:06:47.993 --> 00:06:53.370
won't let you know that you haven't
covered it in all the other cases.

134
00:06:53.370 --> 00:06:55.910
And so, it can be dangerous to use that.

135
00:06:55.910 --> 00:06:58.321
But nonetheless, this is super cool or

136
00:06:58.321 --> 00:07:02.633
at least I think pattern matching
is like that's pretty magical, and

137
00:07:02.633 --> 00:07:07.840
it can even keep on going pretty deep, you
can keep on matching further and further.

138
00:07:07.840 --> 00:07:11.040
So if I had say Foo 2 that is an option,

139
00:07:11.040 --> 00:07:15.920
which is another option's
just another Enum.

140
00:07:15.920 --> 00:07:20.010
It's a generic Enum, meaning that you
provide, it's the type you want it to be.

141
00:07:20.010 --> 00:07:21.610
And that's the type it is.

142
00:07:21.610 --> 00:07:24.427
I can now jump in here and go Foo2, and

143
00:07:24.427 --> 00:07:27.875
then I can even grab out
the options some type.

144
00:07:27.875 --> 00:07:34.022
And then grab the value from that so now
I'm handling the specific case of my Enum

145
00:07:34.022 --> 00:07:40.188
that is a Foo2 that has the inside type
that is a specific value of some, right?

146
00:07:40.188 --> 00:07:44.289
Which me means I can also
handle the other case of none,

147
00:07:44.289 --> 00:07:47.065
which is the other value of a option.

148
00:07:47.065 --> 00:07:49.641
So options we'll go over
options in just one second but

149
00:07:49.641 --> 00:07:52.161
as you can see I can keep on
pattern matching deeper and

150
00:07:52.161 --> 00:07:56.030
deeper so if your types are super huge
You can pattern match unlimitedly, right?

151
00:07:56.030 --> 00:07:59.050
And this thing will let you know,
what cases you've missed.

152
00:07:59.050 --> 00:08:01.760
So one more thing, and
then I'll answer that question.

153
00:08:01.760 --> 00:08:02.734
If you look right here,

154
00:08:02.734 --> 00:08:06.720
it's letting me know that I'm missing
some things that need to be covered.

155
00:08:06.720 --> 00:08:09.580
Which I think it's pretty radical,
that it can tell these things.

156
00:08:09.580 --> 00:08:11.515
So, all right, Question?

157
00:08:11.515 --> 00:08:13.369
&gt;&gt; Can you Enum functions?

158
00:08:14.410 --> 00:08:18.769
&gt;&gt; I think I wonder if he can I've
never tried that let's let's just try

159
00:08:18.769 --> 00:08:27.470
a Well, it kind of seems like it
will kind of looks like he can.

160
00:08:27.470 --> 00:08:32.499
So I've never tried throwing
in one of these but let's see,

161
00:08:32.499 --> 00:08:36.541
a bar and
I'm gonna return an i32 return five,

162
00:08:36.541 --> 00:08:42.270
that's an ampersand sign, and
three up and let's just pass in bar.

163
00:08:43.510 --> 00:08:44.590
What is value?

164
00:08:44.590 --> 00:08:47.570
Is a function and hey,
look at that it works.

165
00:08:47.570 --> 00:08:49.560
That's kind of a fun idea.

166
00:08:49.560 --> 00:08:50.830
Never thought about joining that up.

167
00:08:50.830 --> 00:08:54.040
Also, one thing I really do like
is that the function syntax,

168
00:08:54.040 --> 00:08:58.330
matches function syntax, TypeScript,
it's like, you can create a function.

169
00:08:58.330 --> 00:09:01.240
But if you want to say it as what
it's just like slightly off.

170
00:09:01.240 --> 00:09:02.500
And it's kinda bothersome.

171
00:09:02.500 --> 00:09:06.943
For those that don't know what I'm saying,
is that if you wanted to create a type it

172
00:09:06.943 --> 00:09:09.970
would be this and
then this is the return value, right?

173
00:09:09.970 --> 00:09:12.820
That it's not that's not quite
how you specify a function.

174
00:09:12.820 --> 00:09:14.960
That's how you inline a function.

175
00:09:14.960 --> 00:09:19.070
So it's like a little bit of a I'm
sorry it's just such a pedantic point,

176
00:09:19.070 --> 00:09:22.252
I'm sure nobody actually cares,
I care deeply though so

177
00:09:22.252 --> 00:09:26.198
there you go so yes so you can these
are pretty advanced types, right?

178
00:09:26.198 --> 00:09:29.872
So this thing could be something
that could return another RSEnum,

179
00:09:29.872 --> 00:09:32.132
the mind is being blown right here right?

180
00:09:32.132 --> 00:09:34.420
So you can create some fun stuff.

181
00:09:34.420 --> 00:09:38.836
So why don't I show you Enums right,
a, pretty cool right but, b,

182
00:09:38.836 --> 00:09:40.241
there's more to it.

183
00:09:40.241 --> 00:09:43.937
There's actually a very specific reason so
here skip through all

184
00:09:43.937 --> 00:09:48.446
this we've already talked about that,
so we can also do generics on him right?

185
00:09:48.446 --> 00:09:52.550
So I can say Enum foo,
has the generic type t, and

186
00:09:52.550 --> 00:09:56.590
it's only member bar has a subtype t,
right?

187
00:09:56.590 --> 00:09:57.600
Anyway, so you can see.

188
00:09:57.600 --> 00:09:59.660
And that means you can also
have multiple values, right?

189
00:09:59.660 --> 00:10:03.539
I could have t and v and have two
different subtypes with those, each one so

190
00:10:03.539 --> 00:10:06.416
that way on the outside I can
specify what types I want,

191
00:10:06.416 --> 00:10:09.160
than the Enums just
naturally work that way.

192
00:10:09.160 --> 00:10:10.920
Fantastic, right?

193
00:10:10.920 --> 00:10:12.570
So how's this practically useful?

194
00:10:12.570 --> 00:10:16.615
Well, it lists with many types we already
talked about that heterogeneous list and

195
00:10:16.615 --> 00:10:18.210
Enums beautiful, right?

196
00:10:18.210 --> 00:10:21.570
But more so nullable and error handling.

197
00:10:21.570 --> 00:10:23.490
So let me show you what
I mean by Nullable.

198
00:10:23.490 --> 00:10:28.075
So I'm just gonna program this up really
quickly I always like programming

199
00:10:28.075 --> 00:10:32.657
things more than I do like that, I just
like programming them more than just

200
00:10:32.657 --> 00:10:36.801
simply showing them on a whiteboard so
if I do it like this type Foo and

201
00:10:36.801 --> 00:10:41.360
it has some type bar and
this thing is potensly string, right?

202
00:10:41.360 --> 00:10:44.170
It might be a string so
what actually is bar?

203
00:10:44.170 --> 00:10:47.505
If I had a function
called do something and

204
00:10:47.505 --> 00:10:51.920
inside of do something I take a foo,
right?

205
00:10:51.920 --> 00:10:56.030
And let's just say I return a boolean.

206
00:10:56.030 --> 00:10:57.570
Don't get your languages mixed up.

207
00:10:57.570 --> 00:11:00.378
I could do something like if foo.bar.

208
00:11:00.378 --> 00:11:02.730
Do something right here, right?

209
00:11:02.730 --> 00:11:03.790
We'll just return true.

210
00:11:03.790 --> 00:11:05.540
Yeah, don't ever do this
kind of programming.

211
00:11:05.540 --> 00:11:07.170
You should just not do that.

212
00:11:07.170 --> 00:11:09.470
Else, you could have other things in here,
right?

213
00:11:09.470 --> 00:11:11.320
And then return false right?

214
00:11:12.650 --> 00:11:14.158
So there you go, we have this beautiful,

215
00:11:14.158 --> 00:11:16.010
nice thing that does
one thing on one side.

216
00:11:16.010 --> 00:11:19.690
And the reason why that is is because
bar actually has two types, right?

217
00:11:19.690 --> 00:11:23.690
It has the type of undefined,
and it has the type of string.

218
00:11:24.860 --> 00:11:27.320
So you get two for the price of one.

219
00:11:27.320 --> 00:11:29.970
Now, most people feel like
this is really great.

220
00:11:29.970 --> 00:11:31.640
I actually think this is kind of crappy.

221
00:11:31.640 --> 00:11:34.120
And there's good reasons why I
think this is kind of crappy.

222
00:11:34.120 --> 00:11:38.341
It's just that you always find
yourself doing all these checks, and

223
00:11:38.341 --> 00:11:39.806
it can be a bit painful.

224
00:11:39.806 --> 00:11:42.735
And the reality is life is a little
bit worse than your types and so

225
00:11:42.735 --> 00:11:46.099
sometimes your types are actually
undefined, then you have to go back and

226
00:11:46.099 --> 00:11:49.519
find out what the heck happened because
people don't keep up the contracts

227
00:11:49.519 --> 00:11:51.488
bla bla bla bla It can
be a little bit rough.

228
00:11:51.488 --> 00:11:54.388
Rust takes a different kind
of approach to this so

229
00:11:54.388 --> 00:11:58.278
I kind of alluded to it right here
it's called an option type, and

230
00:11:58.278 --> 00:12:02.664
to make sure that I'm actually on board
with this let's go right here, so

231
00:12:02.664 --> 00:12:07.401
here we go this is what is referred to as
the Nullable in rust, it is an Enum called

232
00:12:07.401 --> 00:12:12.340
an option, it has a generic parameter t
and it has the none and it has a sum.

233
00:12:12.340 --> 00:12:17.122
And the sum obviously has the generic
type, as its type that it has underneath.

234
00:12:17.122 --> 00:12:21.299
So it's the exact same thing as that
question mark operator effectively

235
00:12:21.299 --> 00:12:24.870
either there's nothing there or
there's something there.

236
00:12:24.870 --> 00:12:29.752
But it's a little bit more fun than that,
so let's let's actually do that really

237
00:12:29.752 --> 00:12:33.219
quickly so I'm gonna just take
this away take that away and

238
00:12:33.219 --> 00:12:35.939
let's go like this let
foo equals some five.

239
00:12:35.939 --> 00:12:40.691
So just like Enums, we can do this, so
one nice thing about options is that

240
00:12:40.691 --> 00:12:45.366
it actually in lines the types right here,
so notice that I don't have to

241
00:12:45.366 --> 00:12:50.042
say option colon colon some, I can
just say some because it's such a used

242
00:12:50.042 --> 00:12:54.131
Enum there just gonna make a kind
of like a first class citizen.

243
00:12:54.131 --> 00:12:58.595
So you just have this nice little
reference right here, so I have some.

244
00:12:58.595 --> 00:13:02.519
All right that means I can do
this exact same if let some,

245
00:13:02.519 --> 00:13:07.460
so I go if let some you know value equals
foo and what do I get out of here?

246
00:13:07.460 --> 00:13:09.910
I get out and i32 exact same thing.

247
00:13:09.910 --> 00:13:15.341
I can pattern match my way through via
either the match or an if statement so

248
00:13:15.341 --> 00:13:20.950
I can do some value here and do stuff here
or the nun case and do it right here.

249
00:13:20.950 --> 00:13:24.578
So it's a bit more explicit it kind of
makes you always program those things

250
00:13:24.578 --> 00:13:25.680
in but there's more.

251
00:13:25.680 --> 00:13:29.627
There's actually what I consider
more awesome ways to handle options,

252
00:13:29.627 --> 00:13:32.290
is that I can also like this,
foo.map, right?

253
00:13:33.470 --> 00:13:36.830
And in here,
let's just have our variable x.

254
00:13:36.830 --> 00:13:38.590
By the way this is a closure.

255
00:13:38.590 --> 00:13:42.970
This is equivalent to, so
a foo.map if we can do this in TypeScript,

256
00:13:42.970 --> 00:13:46.152
these two statements would
be equivalent right?

257
00:13:46.152 --> 00:13:52.198
One just uses two bars and no fat arrow,
pretty much the same thing right?

258
00:13:52.198 --> 00:13:56.884
And so as you can see I can actually do
something only when there's a value which

259
00:13:56.884 --> 00:14:01.783
also makes it really awesome which we'll
see here shortly using these things with

260
00:14:01.783 --> 00:14:04.210
iterators because we can use a flat map.

261
00:14:04.210 --> 00:14:07.561
Flat maps are just they're beautiful
constructs we'll see here in a moment but

262
00:14:07.561 --> 00:14:09.020
this is pretty dang cool, right?

263
00:14:09.020 --> 00:14:12.046
So now you can actually use
these dot maps, and for

264
00:14:12.046 --> 00:14:17.250
the first three months of using rust,
I never used the dot map on options.

265
00:14:17.250 --> 00:14:21.026
But it's actually quite fantastic
once you start using it what you can

266
00:14:21.026 --> 00:14:24.310
do with options in the dot map,
it also has a filter.

267
00:14:24.310 --> 00:14:30.150
So if it is a value,
you only want some of those values, right?

268
00:14:30.150 --> 00:14:34.490
So you can imagine a situation
where you have a Nullable type.

269
00:14:34.490 --> 00:14:38.120
And you only wants some set
of values less than 10.

270
00:14:38.120 --> 00:14:43.119
I can put in here as long as x
is less than 10 as my beautiful

271
00:14:43.119 --> 00:14:46.240
little item here, my goodness.

272
00:14:46.240 --> 00:14:49.600
If you look at this, whenever you do
filters, it's always a reference.

273
00:14:49.600 --> 00:14:51.380
So you can do one of two things.

274
00:14:51.380 --> 00:14:54.060
You can do a little dereference here.

275
00:14:54.060 --> 00:14:58.434
You can make this into a reference or you
can pattern match away the reference and

276
00:14:58.434 --> 00:14:59.550
now it's an i32.

277
00:14:59.550 --> 00:15:02.630
Don't worry about, those are just all
the things you have to learn, right?

278
00:15:02.630 --> 00:15:07.570
It's very obvious once you look at this
error, found it has a unknown type cuz

279
00:15:07.570 --> 00:15:12.510
we haven't given it a concrete type yet,
found in i32 can't obviously you

280
00:15:12.510 --> 00:15:16.620
cannot compare a reference to
a non reference that makes sense.

281
00:15:16.620 --> 00:15:18.300
You have to compare
them at the same level.

282
00:15:18.300 --> 00:15:19.760
So there we go.

283
00:15:19.760 --> 00:15:21.380
We've compared them at the same level.

284
00:15:21.380 --> 00:15:22.250
We'll look at that.

285
00:15:22.250 --> 00:15:24.450
As you can see,
we can now filter out this value.

286
00:15:24.450 --> 00:15:29.048
So if I had a foo, that will say value
11 and I did a dot filter on it, and

287
00:15:29.048 --> 00:15:34.730
I returned it, it would return a nun, so
it actually keeps the same outer type.

288
00:15:34.730 --> 00:15:36.730
And we can keep passing this thing around.

289
00:15:36.730 --> 00:15:37.813
But the inner type,

290
00:15:37.813 --> 00:15:42.290
the value would get removed because we
we don't want to deal with that case.

291
00:15:42.290 --> 00:15:44.480
And so
these are like super cool constructs.

292
00:15:44.480 --> 00:15:47.556
And at first this probably
feels a touch overwhelming, but

293
00:15:47.556 --> 00:15:51.124
it's a pretty cool construct and
I'm going over these things just so

294
00:15:51.124 --> 00:15:53.100
you have this kind of in your mind?

295
00:15:53.100 --> 00:15:55.090
So I kind of went around all these
things that I forget any of them.

296
00:15:55.090 --> 00:15:57.353
Yeah, there's also like unwrap, so

297
00:15:57.353 --> 00:16:00.190
unwrapped just forces you
to get the value out.

298
00:16:00.190 --> 00:16:03.510
But if there's no underlying value,
your program panics and terminates.

299
00:16:03.510 --> 00:16:04.730
So unwraps kind of dangerous.

300
00:16:04.730 --> 00:16:07.389
There's unwrap, or
where you can pass in the value,

301
00:16:07.389 --> 00:16:09.054
the default value if you want it.

302
00:16:09.054 --> 00:16:12.309
There's unwrap or else,
which sounds ominous, but all it is,

303
00:16:12.309 --> 00:16:16.600
is that like say you have a value that
you wanna create that costs a lot, right?

304
00:16:16.600 --> 00:16:19.978
Say you have a buffer that contains
a megabyte worth of data, or

305
00:16:19.978 --> 00:16:23.210
you're gonna return a empty
megabyte worth of data.

306
00:16:23.210 --> 00:16:26.277
Obviously you wouldn't want to keep on
creating that megabyte worth of data over

307
00:16:26.277 --> 00:16:29.930
and over again, you'd only want that to
execute when there's nothing available.

308
00:16:29.930 --> 00:16:34.850
And so that's why this obviously creates
it versus this will create it lazily.

309
00:16:34.850 --> 00:16:38.130
Cheap to create closures,
expensive to create the underlying type.

310
00:16:38.130 --> 00:16:40.250
You can also map them, we saw that.

311
00:16:40.250 --> 00:16:43.230
So you can even see here I'm adding
five to it, pretty fantastic

