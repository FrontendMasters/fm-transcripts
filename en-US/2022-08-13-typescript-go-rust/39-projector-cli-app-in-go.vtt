WEBVTT

1
00:00:00.188 --> 00:00:01.931
We'll go back in, let's get back start.

2
00:00:01.931 --> 00:00:05.407
Let's go to Go Lang, again,
we're still here but now we're a gopher.

3
00:00:05.407 --> 00:00:07.256
So it feels a little bit different.

4
00:00:07.256 --> 00:00:09.734
I think how Go handles maps and values,

5
00:00:09.734 --> 00:00:13.262
I do like it a bit better than
how TypeScript does it, but

6
00:00:13.262 --> 00:00:18.461
it doesn't have that nully coalescing
operator that makes it really fantastic.

7
00:00:18.461 --> 00:00:22.990
So it's kinda like a trade off there,
both really great, both okay.

8
00:00:22.990 --> 00:00:26.645
So we're gonna do the exact same
thin,g we'll create a projector.go and

9
00:00:26.645 --> 00:00:27.640
it's gopher time.

10
00:00:30.438 --> 00:00:32.125
In my head I heard it's hammer time.

11
00:00:32.125 --> 00:00:33.976
And it was fantastic.

12
00:00:33.976 --> 00:00:36.991
So let's jump over to Go.

13
00:00:36.991 --> 00:00:40.229
Inside of projector,
let's create projector.go.

14
00:00:40.229 --> 00:00:41.988
All right, exact same thing.

15
00:00:41.988 --> 00:00:45.653
We have to set the package name,
of course, to be package projector and

16
00:00:45.653 --> 00:00:47.316
now we can start adding things.

17
00:00:47.316 --> 00:00:50.614
So we already kinda have something in
our mind that we want to build right.

18
00:00:50.614 --> 00:00:53.906
We should be having a data object,
so let's just do that now.

19
00:00:53.906 --> 00:01:00.599
type Data struct, and
it has one key, projector, correct?

20
00:01:00.599 --> 00:01:05.988
So I'm gonna keep it uppercase,
and you'll see why here shortly.

21
00:01:05.988 --> 00:01:06.907
I'm gonna go Projector.

22
00:01:06.907 --> 00:01:09.964
So we're exporting this,
why would we export this, right?

23
00:01:09.964 --> 00:01:14.632
We don't have to export this, it's kind of
is the implementation details of our item.

24
00:01:14.632 --> 00:01:18.143
Well, the reason why after we
do map[string], so, by the way,

25
00:01:18.143 --> 00:01:19.413
this is the map syntax.

26
00:01:19.413 --> 00:01:22.153
It's a lot like, oop,

27
00:01:22.153 --> 00:01:27.087
not this one, projector, where are you?

28
00:01:27.087 --> 00:01:28.382
It's a lot like this, right?

29
00:01:28.382 --> 00:01:31.787
It's gonna look very,
very familiar to this, but

30
00:01:31.787 --> 00:01:36.307
instead it's map key string and
then you put your value right here.

31
00:01:36.307 --> 00:01:40.170
And so we're gonna do another map
cuz our value is another map, right?

32
00:01:40.170 --> 00:01:42.468
And so that'll be a map[string]string.

33
00:01:42.468 --> 00:01:44.450
There we go.

34
00:01:44.450 --> 00:01:46.720
It's actually not that hard,
but it looks funny.

35
00:01:46.720 --> 00:01:48.426
The first time you look at it,
you're like, gosh,

36
00:01:48.426 --> 00:01:49.682
there's a lot of mapping going on there.

37
00:01:49.682 --> 00:01:50.926
But it's actually pretty straightforward.

38
00:01:50.926 --> 00:01:53.792
And then we're gonna add
in one more piece of item,

39
00:01:53.792 --> 00:01:58.471
we're actually gonna go like this, json,
and then we'll go projector, right?

40
00:01:58.471 --> 00:02:02.612
Meaning that, hey,
when you serialize this to JSON,

41
00:02:02.612 --> 00:02:05.861
the key is lowercase p projector, right?

42
00:02:05.861 --> 00:02:07.997
Because it can't do
a one-to-one translation and

43
00:02:07.997 --> 00:02:10.630
you can even have them non
one-to-one translations, right?

44
00:02:10.630 --> 00:02:13.413
I don't actually have to have
this key perfectly match up.

45
00:02:13.413 --> 00:02:19.232
I'm just telling it what key
to grab out of the JSON.

46
00:02:19.232 --> 00:02:21.506
All right, so
now that we have that struct,

47
00:02:21.506 --> 00:02:25.514
we should also have a second struct
which is gonna be your projector, right?

48
00:02:25.514 --> 00:02:31.354
Now remember, in Go we don't have classes,
we have structs.

49
00:02:31.354 --> 00:02:32.869
And then we can attach methods to structs.

50
00:02:32.869 --> 00:02:35.296
So always, it's just thought
about a little bit different.

51
00:02:35.296 --> 00:02:37.961
But this really lines up with
what we wrote in TypeScript.

52
00:02:37.961 --> 00:02:40.628
So what were the properties we had,
we had two properties, right?

53
00:02:40.628 --> 00:02:43.252
We had config, and we had data.

54
00:02:43.252 --> 00:02:44.933
So we'll just create the exact same ones.

55
00:02:44.933 --> 00:02:48.681
We have config,
which is gonna be a Config, and

56
00:02:48.681 --> 00:02:53.014
then we're gonna have data,
which is gonna be a Data.

57
00:02:53.014 --> 00:02:54.696
There we go,
we're done with our projector.

58
00:02:54.696 --> 00:02:57.148
So we're moving along pretty fast already.

59
00:02:57.148 --> 00:03:01.637
So we have the exact same set
of five methods, is it five?

60
00:03:01.637 --> 00:03:05.665
Four methods that we want to do on
our projector from the previous one,

61
00:03:05.665 --> 00:03:07.044
which is gonna be func.

62
00:03:07.044 --> 00:03:07.580
Now, remember,

63
00:03:07.580 --> 00:03:09.561
we have to do what is referred to
as the pointer receiver, right?

64
00:03:09.561 --> 00:03:11.099
So this is how you attach something.

65
00:03:11.099 --> 00:03:15.743
I want a pointer to projector to
effectively be the this variable.

66
00:03:15.743 --> 00:03:17.134
That's what you're saying right there.

67
00:03:17.134 --> 00:03:23.148
And so
I can refer to the this variable with p.

68
00:03:23.148 --> 00:03:26.046
There's way to call these functions
without calling them directly on

69
00:03:26.046 --> 00:03:27.923
the object,
we're not gonna do any of that.

70
00:03:27.923 --> 00:03:32.590
But that's all it's saying right there,
it's just I expect this to be a pointer p,

71
00:03:32.590 --> 00:03:35.767
which also allows us to mutate
the object when we need to.

72
00:03:35.767 --> 00:03:37.211
So, very important do.

73
00:03:37.211 --> 00:03:42.158
So let's just do GetValue,
also remember uppercase is important here.

74
00:03:42.158 --> 00:03:43.197
We have to do that.

75
00:03:43.197 --> 00:03:44.623
So now what do we return?

76
00:03:44.623 --> 00:03:47.507
Well, we're gonna have to
return something, correct?

77
00:03:47.507 --> 00:03:50.539
We have to return some
value out of GetValue.

78
00:03:50.539 --> 00:03:55.019
Now this is kind of a design decision
we're gonna need to do with Go because

79
00:03:55.019 --> 00:03:57.346
we could return a pointer to a string.

80
00:03:57.346 --> 00:03:59.903
And it could be nil if there's no string,
or

81
00:03:59.903 --> 00:04:02.199
it could be a string if there is a value.

82
00:04:02.199 --> 00:04:04.350
Not, I think, the greatest version.

83
00:04:04.350 --> 00:04:07.905
So what we're gonna do is we're actually
gonna take a little note from map.

84
00:04:07.905 --> 00:04:11.623
Whenever you access a value in map,
it actually returns two values, not one.

85
00:04:11.623 --> 00:04:17.403
It returns the value you're looking for
or it returns an ok.

86
00:04:17.403 --> 00:04:21.490
And it returns an ok that is a boolean
that, hey, if we found the value and

87
00:04:21.490 --> 00:04:23.110
this is actually the value.

88
00:04:23.110 --> 00:04:24.556
So we can do the exact same thing.

89
00:04:24.556 --> 00:04:28.564
That means we can just return a simple
empty string and a boolean to say, hey,

90
00:04:28.564 --> 00:04:31.293
this is actually it or no,
we didn't find it at all.

91
00:04:31.293 --> 00:04:33.996
So let's go string, and bool, awesome.

92
00:04:33.996 --> 00:04:36.048
So now we're actually gonna do that,
right?

93
00:04:36.048 --> 00:04:41.824
So that means if we didn't find it,
we effectively do false, right?

94
00:04:41.824 --> 00:04:46.127
That would say, hey, we didn't find it,
it's an empty string, whatever.

95
00:04:46.127 --> 00:04:47.712
I think that's a pretty
good way to go about it.

96
00:04:47.712 --> 00:04:51.005
So, of course, we need a key,
which is gonna be a string.

97
00:04:51.005 --> 00:04:54.964
Remember, if you're from TypeScript land,
you're gonna be adding in a lot of colons.

98
00:04:54.964 --> 00:04:57.428
And it's just a battle,
you just gotta remember,

99
00:04:57.428 --> 00:04:59.792
it's just gonna take
a little bit to get used to.

100
00:04:59.792 --> 00:05:02.047
And if you have an LSP,
it tends to crash pretty hard,

101
00:05:02.047 --> 00:05:04.824
it won't give you a lot of other
errors if you have a syntax error.

102
00:05:04.824 --> 00:05:10.142
So you kinda have to get over the syntax
hump before you get the LSP errors.

103
00:05:10.142 --> 00:05:12.379
All right, so exact same thing.

104
00:05:12.379 --> 00:05:16.137
We're gonna go to our data,
we're gonna see if it has this value.

105
00:05:16.137 --> 00:05:22.572
And then we're gonna also have to walk
up the tree until we hit the end.

106
00:05:22.572 --> 00:05:24.379
And so this is probably gonna be very,

107
00:05:24.379 --> 00:05:28.111
very similar, cuz my guess is that Go is
gonna operate in largely the same way.

108
00:05:28.111 --> 00:05:32.068
So we have one or two places we can kinda
check for any path in utilities, right?

109
00:05:32.068 --> 00:05:36.133
We have path, right, this tends to have a
lot of nice things when it comes to that.

110
00:05:36.133 --> 00:05:39.468
So we have Base,
you wanna guess what base does?

111
00:05:39.468 --> 00:05:42.058
I mean, besides what the documentation
it's saying right there,

112
00:05:42.058 --> 00:05:43.610
it's equivalent to base name, right?

113
00:05:43.610 --> 00:05:45.703
You wanna guess what Dlr does?

114
00:05:45.703 --> 00:05:49.521
Well, it's the equivalent of dirname
which means it probably even operates

115
00:05:49.521 --> 00:05:50.468
identical as Dlr.

116
00:05:50.468 --> 00:05:54.411
And you can kinda tell right here,
this really gives away the game.

117
00:05:54.411 --> 00:05:56.091
It's gonna keep on returning a slash.

118
00:05:56.091 --> 00:05:59.588
And so I'm just gonna make the guess
that it's gonna keep returning a slash.

119
00:05:59.588 --> 00:06:01.467
If we're wrong, we're gonna loop forever.

120
00:06:01.467 --> 00:06:04.859
If we're not wrong, we'll be successful.

121
00:06:04.859 --> 00:06:07.225
It's really great, first tries,
you can only do this first time.

122
00:06:07.225 --> 00:06:11.526
So the first thing we're gonna
do is we're gonna do, of course,

123
00:06:11.526 --> 00:06:17.103
curr :=P.config., let's see,
present working directory, that's right.

124
00:06:17.103 --> 00:06:20.581
And so we have to do a little prev,
it's just gonna be an empty string.

125
00:06:20.581 --> 00:06:22.977
And now we're gonna do
the exact same kind of loop.

126
00:06:22.977 --> 00:06:27.077
But with Go, there's some things.

127
00:06:27.077 --> 00:06:31.296
You'll notice that while doesn't work out,
which means they definitely don't have

128
00:06:31.296 --> 00:06:34.602
the log loop do while, while which
is the greatest loop of all time.

129
00:06:34.602 --> 00:06:42.397
That means we're gonna have to either do
an infinite loop which is done via for.

130
00:06:42.397 --> 00:06:44.463
Or we can do a little trick, right?

131
00:06:44.463 --> 00:06:47.606
There's no initialization, correct?

132
00:06:47.606 --> 00:06:53.162
Current should not equal previous,
and there is no incremental operation.

133
00:06:53.162 --> 00:06:56.953
Well, look at that,
we kind of just did it, right?

134
00:06:56.953 --> 00:07:01.077
We just created a while loop effectively,
couple extra semicolons in there and

135
00:07:01.077 --> 00:07:02.562
boom, we have a while loop.

136
00:07:02.562 --> 00:07:06.223
Awesome, so let's just take care
of the exit condition first.

137
00:07:06.223 --> 00:07:13.196
prev = curr, curr = path.Dir(curr).

138
00:07:13.196 --> 00:07:16.622
Awesome, so we now have the exit
conditioning happening,

139
00:07:16.622 --> 00:07:18.341
we're feeling pretty good.

140
00:07:18.341 --> 00:07:19.946
And now we just need an out variable.

141
00:07:19.946 --> 00:07:25.282
So I'm gonna go like this,
out equals this, and

142
00:07:25.282 --> 00:07:30.627
found := false, return out, found, right?

143
00:07:30.627 --> 00:07:32.876
Awesome, we have it kind of all set up.

144
00:07:32.876 --> 00:07:37.041
Now it's really just checking the map,
getting each value out at this point.

145
00:07:37.041 --> 00:07:38.665
This would be pretty straightforward.

146
00:07:38.665 --> 00:07:41.179
Well, remember I said that Go actually,
I think,

147
00:07:41.179 --> 00:07:43.115
does a pretty good job handling these.

148
00:07:43.115 --> 00:07:44.188
Let me show you how it looks.

149
00:07:44.188 --> 00:07:46.302
So we're gonna do an if statement.

150
00:07:46.302 --> 00:07:48.162
And we're gonna do this, we're gonna go,

151
00:07:48.162 --> 00:07:50.629
here's the directory that we
wanna get out cuz remember,

152
00:07:50.629 --> 00:07:53.567
we first start with the directory and
then we look for the key values.

153
00:07:53.567 --> 00:07:59.208
And we're gonna do this ok, and
then I'm gonna go p.config, oop,

154
00:07:59.208 --> 00:08:05.158
not config, wrong one, data.Projector,
and then I can pass in curr.

155
00:08:05.158 --> 00:08:08.356
And then I'll do a semicolon and say ok.

156
00:08:08.356 --> 00:08:13.306
Effectively what this allows you to do is
it allows you to make an assignment and

157
00:08:13.306 --> 00:08:14.811
then test a condition.

158
00:08:14.811 --> 00:08:18.557
And this is really nice when it comes to a
lot of these operations because now I have

159
00:08:18.557 --> 00:08:20.829
dlr available only within
the scope right here.

160
00:08:20.829 --> 00:08:23.591
And it happens to be the value
that we're looking for.

161
00:08:23.591 --> 00:08:26.474
So we have confidence, we can just
move forward, so I can do it again.

162
00:08:26.474 --> 00:08:31.557
If value, ok := p.data,
we don't have to do any of that.

163
00:08:31.557 --> 00:08:36.475
We can just go like this, dir[key]; ok.

164
00:08:36.475 --> 00:08:38.272
So if we do this, awesome.

165
00:08:38.272 --> 00:08:42.890
If we're within this second if statement,
we have found the value, we're good to go.

166
00:08:42.890 --> 00:08:47.106
So we'll do this, let's see, out = value,

167
00:08:47.106 --> 00:08:51.009
found = true, and, of course, a break.

168
00:08:51.009 --> 00:08:51.903
If you don't do that,

169
00:08:51.903 --> 00:08:54.547
you'll get the leftmost value as
opposed to the rightmost value.

170
00:08:54.547 --> 00:08:56.862
Little painful,
did that when I was practicing once.

171
00:08:56.862 --> 00:09:00.570
Awesome, we now have everything done,
we've done GetValue.

172
00:09:00.570 --> 00:09:01.594
That was pretty easy, right?

173
00:09:01.594 --> 00:09:03.639
That wasn't too hard, I don't think.

174
00:09:06.088 --> 00:09:09.981
All right, let's do GetValueAll,
have we done that one yet?

175
00:09:09.981 --> 00:09:10.737
No, we haven't.

176
00:09:10.737 --> 00:09:13.893
So let's just do the exact same thing but
let's do a nice func.

177
00:09:13.893 --> 00:09:15.679
Look at that,
it even gives me all this beautiful stuff.

178
00:09:15.679 --> 00:09:21.164
GetValueAll, and this thing needs to
return back out something, correct?

179
00:09:21.164 --> 00:09:25.309
It needs to return out, take a moment,
try to remember the syntax,

180
00:09:25.309 --> 00:09:26.779
we did it once up above.

181
00:09:26.779 --> 00:09:29.011
Try to recall with your brain,
let it set in.

182
00:09:29.011 --> 00:09:31.509
I think it's always good to take
that time to try to remember it,

183
00:09:31.509 --> 00:09:33.936
not just go straight up for
the answer which is right above me.

184
00:09:33.936 --> 00:09:35.438
For those that don't know,

185
00:09:35.438 --> 00:09:38.892
we obviously have to return out
a map[string]string, right?

186
00:09:38.892 --> 00:09:41.344
We're returning out the merged data.

187
00:09:41.344 --> 00:09:42.874
So let's do that now.

188
00:09:42.874 --> 00:09:47.861
Of course, out is gonna have to
equal a map[string]string, and

189
00:09:47.861 --> 00:09:50.542
we'll just create it right there.

190
00:09:50.542 --> 00:09:52.798
Awesome, and
then we'll just return this thing,

191
00:09:52.798 --> 00:09:56.160
because if there's no values to be found,
we still return an empty object.

192
00:09:58.615 --> 00:10:02.933
Great, at this point, we need to do the
exact same thing we did before, which is

193
00:10:02.933 --> 00:10:07.135
we need to walk the directory path and
then we need to go backwards through it.

194
00:10:07.135 --> 00:10:11.068
Because we want the least important
values to be grabbed first, and

195
00:10:11.068 --> 00:10:14.173
we want the most important
values to be grabbed last.

196
00:10:14.173 --> 00:10:15.364
So let's do the exact same thing.

197
00:10:15.364 --> 00:10:21.810
So I'm gonna go like this,
paths equals a string array.

198
00:10:21.810 --> 00:10:24.111
And then I can just jump up here.

199
00:10:24.111 --> 00:10:25.971
I can just grab this whole thing.

200
00:10:25.971 --> 00:10:29.488
Again, we could be too clever by half and

201
00:10:29.488 --> 00:10:34.983
come up with a great way to kinda
reduce this duplicated logic.

202
00:10:34.983 --> 00:10:38.431
Come up with some sort of sweet iterator,
but

203
00:10:38.431 --> 00:10:42.169
we're just not gonna do that,
paths.append.

204
00:10:42.169 --> 00:10:43.965
Of course, remember, it's not .append.

205
00:10:43.965 --> 00:10:46.313
I say that in my head cuz
that's what it reminds me of.

206
00:10:46.313 --> 00:10:51.036
And we're just simply going to take paths,
append current to it, reassign it, and

207
00:10:51.036 --> 00:10:52.844
just walk up until we're done.

208
00:10:52.844 --> 00:10:56.506
And then afterwards we just need to
walk backwards through this list,

209
00:10:56.506 --> 00:10:57.820
shouldn't be too hard.

210
00:10:57.820 --> 00:11:02.262
So we can do something as
simple as i := len(paths),

211
00:11:02.262 --> 00:11:06.901
there may even be a way to do
this using the range operator.

212
00:11:06.901 --> 00:11:12.337
Awesome, so let's walk backwards through,
we get the length, -1 from it.

213
00:11:12.337 --> 00:11:14.751
i has to be greater than or equal to 0.

214
00:11:14.751 --> 00:11:19.009
There's also a sweet kind of CPU
optimization if you ever compare something

215
00:11:19.009 --> 00:11:21.683
to 0,
because 0 is a special register value.

216
00:11:21.683 --> 00:11:26.487
Anyways, fun fact, and then of course,
we're gonna wanna do i --, and

217
00:11:26.487 --> 00:11:29.100
now we have a beautiful walk right here.

218
00:11:29.100 --> 00:11:33.583
And all we have to do is grab
the value out at that location, and

219
00:11:33.583 --> 00:11:37.907
merge it into the map, and
then do that over and over again.

220
00:11:37.907 --> 00:11:42.362
Now remember, if you Stackoverflow this
question, what are you gonna find?

221
00:11:42.362 --> 00:11:44.223
Well, it's really easy to merge a map.

222
00:11:44.223 --> 00:11:45.453
You just write it yourself.

223
00:11:45.453 --> 00:11:47.625
Most of Go is just write it yourself.

224
00:11:47.625 --> 00:11:52.007
That's why I defaulted to not even really
looking up if range could walk backwards.

225
00:11:52.007 --> 00:11:55.042
That sounds like a just write it
yourself kind of mantra of Go, and so

226
00:11:55.042 --> 00:11:56.440
that's what we're gonna do.

227
00:11:56.440 --> 00:11:59.337
We're gonna write a quick
little map merging,

228
00:11:59.337 --> 00:12:01.663
it's pretty straightforward to do.

229
00:12:01.663 --> 00:12:03.656
Let's go here and do that.

230
00:12:03.656 --> 00:12:07.374
So, of course, the first thing we
need to do is, does this value exist?

231
00:12:07.374 --> 00:12:10.482
So again, dir,

232
00:12:10.482 --> 00:12:16.258
ok := p.data.Projector.

233
00:12:16.258 --> 00:12:18.641
And then we're gonna use,
let's see, what is it?

234
00:12:18.641 --> 00:12:21.207
paths[i], right, there we go.

235
00:12:21.207 --> 00:12:22.427
Does this thing exist?

236
00:12:22.427 --> 00:12:23.657
Well, I hope it does.

237
00:12:23.657 --> 00:12:27.913
If it does exist, we now have
this beautiful map[string]string.

238
00:12:27.913 --> 00:12:31.885
We just need to walk through that thing
and merge the values into our out.

239
00:12:31.885 --> 00:12:34.111
So it's actually pretty easy to do.

240
00:12:34.111 --> 00:12:38.945
So we can have our key,
our value equals range dir, and

241
00:12:38.945 --> 00:12:42.111
just go out[k] = v, there we go.

242
00:12:42.111 --> 00:12:45.217
That's all you have to do to merge a map,
it's really not all that bad.

243
00:12:45.217 --> 00:12:46.959
Pretty clean syntax right there.

244
00:12:46.959 --> 00:12:52.105
And so that is no different than
the old object assign, right?

245
00:12:52.105 --> 00:12:53.908
It's just slightly less.

246
00:12:53.908 --> 00:12:56.535
This for me, pretty nice right here.

247
00:12:56.535 --> 00:12:58.526
But is that really that hard?

248
00:12:58.526 --> 00:13:00.545
No, but it is the Go mantra.

249
00:13:00.545 --> 00:13:05.597
You'll always see this about Go is that
they don't include a ton of helper items.

250
00:13:05.597 --> 00:13:06.306
Is that bad?

251
00:13:06.306 --> 00:13:07.021
Is that good?

252
00:13:07.021 --> 00:13:11.384
I think that's kind of, the argument that
I've heard is that it's geared towards

253
00:13:11.384 --> 00:13:12.958
people that are more junior.

254
00:13:12.958 --> 00:13:16.921
And so therefore they want you to
understand the cost of every operation.

255
00:13:16.921 --> 00:13:20.933
So if you did a merge map, do you realize
that you have to walk through every single

256
00:13:20.933 --> 00:13:22.240
key and value and do that?

257
00:13:22.240 --> 00:13:24.915
That's kind of what I've heard
to be the general argument for

258
00:13:24.915 --> 00:13:25.952
why they do it that way.

259
00:13:25.952 --> 00:13:28.957
Is that a good mantra,
is that the right one?

260
00:13:28.957 --> 00:13:30.752
That's up to you to decide, not me.

261
00:13:30.752 --> 00:13:32.531
So there we go,
we have this beautiful code.

262
00:13:32.531 --> 00:13:35.765
And we should be able to just return out,
and this should just work.

263
00:13:35.765 --> 00:13:37.460
Fantastic, we're looking good.

