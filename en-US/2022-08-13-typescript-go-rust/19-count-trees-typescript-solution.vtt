WEBVTT

1
00:00:00.140 --> 00:00:04.415
So let's copy and paste this and
let's do this first in TypeScript.

2
00:00:04.415 --> 00:00:08.425
Now I did add this question at the very,
very, very end, and so

3
00:00:08.425 --> 00:00:11.317
let's see if I successfully
do it first try.

4
00:00:11.317 --> 00:00:15.805
I assume I'll do this first try, if I have
a mod in the chat you can even do a bet,

5
00:00:15.805 --> 00:00:16.760
will I get this?

6
00:00:16.760 --> 00:00:18.994
First try, I will not be upset.

7
00:00:18.994 --> 00:00:23.726
All right, so let's do a quick
function getInput, string,

8
00:00:23.726 --> 00:00:26.736
return, grave, paste, there we go.

9
00:00:26.736 --> 00:00:31.006
Yes, I do not, okay, so fun,
little side note, I do not do this.

10
00:00:33.403 --> 00:00:36.004
Okay, you're just not gonna
see me do that, I'm sorry.

11
00:00:36.004 --> 00:00:41.068
I know there's some people out there like,
well, you should man.

12
00:00:41.068 --> 00:00:48.208
First off, you're not actually technically
saving any amount of space here, right?

13
00:00:48.208 --> 00:00:51.728
It's pretty much the same, but
there's lexical binding to this and

14
00:00:51.728 --> 00:00:56.051
I don't need this, so why would I include
a feature I'm not gonna use when writing?

15
00:00:56.051 --> 00:01:00.769
Okay, maybe that's a little too pedantic
for most people writing JavaScript, for

16
00:01:00.769 --> 00:01:04.830
me personally, if I'm not gonna use this,
I don't want to include it.

17
00:01:04.830 --> 00:01:08.209
Okay, anyways, weird conversation,
okay, we can go on.

18
00:01:08.209 --> 00:01:10.297
So how should we go about doing this?

19
00:01:10.297 --> 00:01:13.364
Does anyone have any ideas that they
think would be a good idea here?

20
00:01:13.364 --> 00:01:15.892
Cuz I have some pretty fun tricks, but

21
00:01:15.892 --> 00:01:18.976
it would be kind of good
to hear what you think.

22
00:01:18.976 --> 00:01:21.687
Should we create any new structs,
should we create any enums?

23
00:01:21.687 --> 00:01:23.088
How should we do this?

24
00:01:23.088 --> 00:01:26.622
&gt;&gt; At least an enum for the tree and snow.

25
00:01:28.391 --> 00:01:31.112
&gt;&gt; Okay, let's do that right now.

26
00:01:31.112 --> 00:01:32.083
I don't know what, let's see.

27
00:01:32.083 --> 00:01:33.546
Thing, we'll just call a thing,

28
00:01:33.546 --> 00:01:36.578
cuz honestly, who knows what this
thing's called, a place, right?

29
00:01:36.578 --> 00:01:38.394
There we go, we'll call it a thing,
make it easy, right?

30
00:01:38.394 --> 00:01:41.037
There we go, we have Tree and
Snow, that makes sense.

31
00:01:41.037 --> 00:01:42.595
So that means if we're gonna do that,

32
00:01:42.595 --> 00:01:44.797
we're gonna have to first
parse the string, right?

33
00:01:44.797 --> 00:01:51.970
So getInput, and let's split as we
always do on the new line, correct?

34
00:01:51.970 --> 00:01:53.882
Everyone's kinda with me there, and

35
00:01:53.882 --> 00:01:56.639
then now I need to do something
a little bit different.

36
00:01:56.639 --> 00:02:01.165
I need to do a map, And again,

37
00:02:01.165 --> 00:02:05.484
split on the empty string,
this will just simply blow our string into

38
00:02:05.484 --> 00:02:09.963
individual characters, kind of a nice
little trick to do right there.

39
00:02:09.963 --> 00:02:15.371
And then we can map that and
we can say if x equals

40
00:02:15.371 --> 00:02:20.519
that return a Thing Snow, else Thing Tree.

41
00:02:23.339 --> 00:02:26.440
Is that about looking good, const things?

42
00:02:29.989 --> 00:02:32.729
There we go, so now we have
this double thing array, right?

43
00:02:32.729 --> 00:02:37.333
And so now we really need to take this and
actually start from 00, and

44
00:02:37.333 --> 00:02:41.562
walk our way through and
make sure that we're always wrapping.

45
00:02:41.562 --> 00:02:44.779
And so wrapping of course, whenever you
hear this, you should always think modulo.

46
00:02:44.779 --> 00:02:48.721
I know this is not a course on interview
questions, but it's actually a really good

47
00:02:48.721 --> 00:02:51.838
thing to always remember,
always use modulo when this happens.

48
00:02:51.838 --> 00:02:55.413
So that means we need to find out first,
what is the length of our columns, right?

49
00:02:55.413 --> 00:02:56.798
How many columns do we have?

50
00:02:56.798 --> 00:03:02.987
It is a square, so I can do something like
this, collen = things(0).length, right?

51
00:03:02.987 --> 00:03:05.257
That is really the length of our columns,
correct?

52
00:03:05.257 --> 00:03:07.076
Awesome.

53
00:03:07.076 --> 00:03:11.693
After that, we can start walking through
this and count how many trees we hit.

54
00:03:11.693 --> 00:03:17.319
So I'm gonna go like this,
treeCount = 0, and now we can do a nice,

55
00:03:17.319 --> 00:03:21.684
let's just use a delicious
closure to capture this.

56
00:03:21.684 --> 00:03:26.547
And so we can go things,
(, that's terrible name,

57
00:03:26.547 --> 00:03:30.686
thingRow, this of course
is a list of this, and

58
00:03:30.686 --> 00:03:36.802
one kind of neat aspect about this
is that what information do we know?

59
00:03:36.802 --> 00:03:42.819
We know that every single time we go down,
we also need to go three over.

60
00:03:42.819 --> 00:03:44.960
So let's do a little fun trick here.

61
00:03:44.960 --> 00:03:48.699
Let's go like this,
let's also include our position, right?

62
00:03:48.699 --> 00:03:51.179
Cuz this is our row that
we're currently at,

63
00:03:51.179 --> 00:03:53.799
which means that we can
do something like this.

64
00:03:53.799 --> 00:03:59.481
thingRow(i * 3 % collen), right?

65
00:03:59.481 --> 00:04:05.597
So starting at the 0 throw,
i * 3 is still 0.

66
00:04:05.597 --> 00:04:08.883
At the first row, we're over 3,
at the second row we're over 6,

67
00:04:08.883 --> 00:04:10.453
at the third row we're over 9.

68
00:04:10.453 --> 00:04:13.412
And you can see how that works, and
then we're just always wrapping around.

69
00:04:13.412 --> 00:04:17.263
So we're always just walking to the side
and going through them, all right?

70
00:04:17.263 --> 00:04:19.617
Awesome, and now we can go like this.

71
00:04:19.617 --> 00:04:24.603
If this thing equals Thing.Tree, well,

72
00:04:24.603 --> 00:04:29.450
we can go treeCount++; and of course,

73
00:04:29.450 --> 00:04:35.268
I'm on that semicolon camp, ("TreeCount",

74
00:04:35.268 --> 00:04:39.433
treeCount), boom, there we go.

75
00:04:39.433 --> 00:04:44.206
So we have that right there,
we've walked through, we've grabbed them,

76
00:04:44.206 --> 00:04:48.547
did the sweet modulo right there,
everything seems about correct.

77
00:04:48.547 --> 00:04:51.722
If you're worried about order of
operations, you can always look up how

78
00:04:51.722 --> 00:04:54.806
it executes, or you can just do this
just to guarantee it in your head.

79
00:04:54.806 --> 00:04:56.680
If it's easier to read you can do that.

80
00:04:56.680 --> 00:05:00.568
But it should have the same precedent as
multiplication so that should come first.

81
00:05:00.568 --> 00:05:05.443
And now if we do, do an MPX TS node part
three, it should show us hopefully 7,

82
00:05:05.443 --> 00:05:06.794
yep, it shows us 7.

83
00:05:06.794 --> 00:05:09.289
Okay, so
that's how many trees we should hit is 7.

84
00:05:09.289 --> 00:05:13.507
So there we go, we've done it,
we've correctly done this.

85
00:05:13.507 --> 00:05:17.899
We don't actually technically have to do
an enum if you really think about it,

86
00:05:17.899 --> 00:05:20.306
we actually only need
to go over each line.

87
00:05:20.306 --> 00:05:25.709
Since we already have this, we can grab
the string character at that position.

88
00:05:25.709 --> 00:05:28.937
And then from there we can just
do the little modulo math,

89
00:05:28.937 --> 00:05:32.651
if it's a pound sign count them
all together, we're good to go.

90
00:05:32.651 --> 00:05:36.727
And so it's kind of a little
clever way we could do this.

91
00:05:36.727 --> 00:05:39.090
Anyways, just thought I'd throw that out
there, sounds like a little fun thing,

92
00:05:39.090 --> 00:05:40.695
I don't know, I think it's kinda fun,
I don't know.

