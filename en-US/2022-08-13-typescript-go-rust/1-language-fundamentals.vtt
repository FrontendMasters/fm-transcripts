WEBVTT

1
00:00:00.052 --> 00:00:01.900
So yeah,
we're gonna be moving pretty fast.

2
00:00:01.900 --> 00:00:05.531
So can I mean if you know
Vim you can also move fast.

3
00:00:05.531 --> 00:00:10.928
[SOUND] Okay, anyways, so I'm also not
gonna try to go over a lot of syntax for.

4
00:00:10.928 --> 00:00:14.583
So for those that don't know rust if
you know rust, don't say anything but

5
00:00:14.583 --> 00:00:16.450
what do you think happens right here?

6
00:00:16.450 --> 00:00:18.976
&gt;&gt; You return either a zero or one.

7
00:00:18.976 --> 00:00:21.260
&gt;&gt; Yes, it's assigning it to food correct.

8
00:00:21.260 --> 00:00:26.086
And so if you've programmed before you can
kinda mostly deduce what is happening.

9
00:00:26.086 --> 00:00:30.963
So I'm going to rely on your skills to be
able to do that like I'm not gonna explain

10
00:00:30.963 --> 00:00:32.485
what an if statement is.

11
00:00:32.485 --> 00:00:35.214
I'm not gonna explain any syntax for
the most part.

12
00:00:35.214 --> 00:00:39.585
I will explain a small part about Rust
that I think are the more confusing parts

13
00:00:39.585 --> 00:00:42.621
or the different parts from
other C based languages.

14
00:00:42.621 --> 00:00:45.943
And same with go I'll kinda go okay these
are pointers these aren't pointers.

15
00:00:45.943 --> 00:00:50.159
We're not gonna go too deep into them
because it's just not that valuable

16
00:00:50.159 --> 00:00:54.511
knowing how to use it versus what is
actually going on you don't necessarily

17
00:00:54.511 --> 00:00:58.795
need to know these as much in these
languages versus this is not C where it's

18
00:00:58.795 --> 00:01:02.284
it feels dramatically more
important to know these things.

19
00:01:02.284 --> 00:01:05.139
And so, exact same thing
TypeScript version, right?

20
00:01:05.139 --> 00:01:06.990
Boolean statement ternary operator.

21
00:01:06.990 --> 00:01:11.132
I couldn't use the Add on or OR or
but I still feel disgusted by that but

22
00:01:11.132 --> 00:01:12.211
even to this day.

23
00:01:12.211 --> 00:01:15.900
All right and I think actually
did I put the logic backwards?

24
00:01:15.900 --> 00:01:16.425
No I didn't.

25
00:01:16.425 --> 00:01:18.475
Okay good.
It would actually be very hard to do

26
00:01:18.475 --> 00:01:19.468
the and on or or here.

27
00:01:19.468 --> 00:01:22.348
So the first thing that we're gonna
kinda talk a little bit about is

28
00:01:22.348 --> 00:01:23.284
the Borrow Checker.

29
00:01:23.284 --> 00:01:27.235
Now this is obviously the most kinda
famous thing about rust that makes it

30
00:01:27.235 --> 00:01:28.606
super duper difficult.

31
00:01:28.606 --> 00:01:30.685
And we're just gonna go
over this a little bit.

32
00:01:30.685 --> 00:01:32.339
Just enough for you to understand it.

33
00:01:32.339 --> 00:01:37.385
And there's some few simple rules that as
long as you keep those rules in your head.

34
00:01:37.385 --> 00:01:42.024
Rust is just it almost feels really
simple looking in the rearview mirror but

35
00:01:42.024 --> 00:01:45.660
when I was first learning it it
felt really obtuse and hard.

36
00:01:45.660 --> 00:01:48.660
And so just like all things,
simplicity comes after you know it, and

37
00:01:48.660 --> 00:01:52.091
then you look back, and you're like,
how do people did not get this, right?

38
00:01:52.091 --> 00:01:54.550
It just feels so
simple once you look back.

39
00:01:54.550 --> 00:01:56.489
So don't feel bad in it.

40
00:01:56.489 --> 00:02:00.542
So I'm gonna jump over here, and I'm just
actually gonna program a little something,

41
00:02:00.542 --> 00:02:03.496
just so that we can all feel it's
all here, we'll go like this,

42
00:02:03.496 --> 00:02:05.114
we'll call it playground?

43
00:02:05.114 --> 00:02:07.922
That seems about right, playground
project, yeah, let's go in here.

44
00:02:07.922 --> 00:02:09.094
All right.

45
00:02:09.094 --> 00:02:13.410
Before we do that,
always remember whenever you're doing

46
00:02:13.410 --> 00:02:18.172
anything's a net why gotta get
these things going cargo and net.

47
00:02:18.172 --> 00:02:19.732
We'll go over all this
a little bit more in a moment.

48
00:02:19.732 --> 00:02:26.828
I'm just kinda creating some things to
show you a little bit how it feels,

49
00:02:26.828 --> 00:02:34.162
cargo init and go mod init
github.com/theprimeagen/doesn't matter.

50
00:02:34.162 --> 00:02:35.153
There we go.

51
00:02:35.153 --> 00:02:37.647
All right.
Perfect, we have all three up and running.

52
00:02:37.647 --> 00:02:38.936
Everything looks good.

53
00:02:38.936 --> 00:02:45.659
And I'm gonna go yarn add
ts-node typescript @types/node.

54
00:02:45.659 --> 00:02:48.132
Gosh.

55
00:02:48.132 --> 00:02:51.870
All right, now I can officially
program and TypeScript, I'm ready.

56
00:02:51.870 --> 00:02:55.757
All right, so let's just do a little quick
like little just we're just gonna look at

57
00:02:55.757 --> 00:02:56.543
how this looks.

58
00:02:56.543 --> 00:03:00.986
So if I were to write a little function or
if I were just to execute some code I

59
00:03:00.986 --> 00:03:04.589
said const a equals an array and
then I said const b equals a.

60
00:03:04.589 --> 00:03:11.634
And then I did b d.push.1 and
I logged out console.log a.

61
00:03:11.634 --> 00:03:14.424
What's gonna happen here?

62
00:03:14.424 --> 00:03:15.242
What am I logging out?

63
00:03:15.242 --> 00:03:17.919
What's gonna log out with a?

64
00:03:17.919 --> 00:03:19.509
&gt;&gt; One.
&gt;&gt; Yeah an array of one, right?

65
00:03:19.509 --> 00:03:21.064
&gt;&gt; Yeah.
&gt;&gt; An array of one.

66
00:03:21.064 --> 00:03:23.413
And why is that?

67
00:03:23.413 --> 00:03:26.907
Because b points to a underneath the hood,
these are actually they're technically

68
00:03:26.907 --> 00:03:30.498
containers underneath, like va has these
little boxed values, that point to stuff,

69
00:03:30.498 --> 00:03:31.848
and that's how they manage it.

70
00:03:31.848 --> 00:03:34.212
And there's a bunch of management
that goes on and blah, blah, blah.

71
00:03:34.212 --> 00:03:35.484
You don't really care about it.

72
00:03:35.484 --> 00:03:39.354
But what you care about is
that a refers to a value.

73
00:03:39.354 --> 00:03:40.619
That's an array.

74
00:03:40.619 --> 00:03:45.953
B refers to a, and
can manipulate what a's value is, right?

75
00:03:45.953 --> 00:03:47.226
And so that's what happens here.

76
00:03:47.226 --> 00:03:51.449
So when I log out a I should see
whatever b did to manipulate it.

77
00:03:51.449 --> 00:03:54.574
And now we do this implicitly all the time
we don't really think about it but

78
00:03:54.574 --> 00:03:57.249
underneath the hood if you know if
you come from a c world this just

79
00:03:57.249 --> 00:03:58.107
pointers, right?

80
00:03:58.107 --> 00:04:01.301
You're just kinda handing out pointers and
people can manipulate it and

81
00:04:01.301 --> 00:04:02.199
that's what it is.

82
00:04:02.199 --> 00:04:06.452
That's why JavaScript is both so
fun, and also so annoying.

83
00:04:06.452 --> 00:04:10.763
Because even though I've declared this
thing, as you cannot change, you can

84
00:04:10.763 --> 00:04:15.228
change this, not changeable because
sometimes not changing is unreasonable.

85
00:04:15.228 --> 00:04:18.152
And so
,that's just how JavaScript decided to go.

86
00:04:18.152 --> 00:04:20.329
So let's do that again,
but let's do it with CPP.

87
00:04:20.329 --> 00:04:23.875
Everyone's favorite language of all time,
right?

88
00:04:23.875 --> 00:04:26.605
And apparently I can't spa a language
server, don't worry about that.

89
00:04:26.605 --> 00:04:28.184
We don't need that language server anyway.

90
00:04:28.184 --> 00:04:34.284
So we're gonna go into main and
we're gonna jump in here and

91
00:04:34.284 --> 00:04:38.438
I'm gonna go include vector and stdio.

92
00:04:38.438 --> 00:04:42.444
Can I just do this I always forget
we'll find out when we compile.

93
00:04:42.444 --> 00:04:47.443
So there we go we have our includes and
now I'm gonna go like this vector

94
00:04:47.443 --> 00:04:52.047
we'll put in and we'll go a will
do the exact same thing and go b.

95
00:04:52.047 --> 00:04:54.501
And b will equal a.

96
00:04:54.501 --> 00:04:59.154
And I'm gonna go b push_back 1.

97
00:04:59.154 --> 00:05:03.444
And now of course because this is
beautiful C++ you can't just pass that and

98
00:05:03.444 --> 00:05:04.373
print a vector.

99
00:05:04.373 --> 00:05:07.372
What is that you can't do that?

100
00:05:07.372 --> 00:05:13.459
So we're gonna just do this nice little
const auto our cansado we won't do that,

101
00:05:13.459 --> 00:05:16.512
std vector, a int and a reference to it.

102
00:05:16.512 --> 00:05:20.935
And we'll just call it a and for

103
00:05:20.935 --> 00:05:26.731
consnt auto item in a and we'll printf,

104
00:05:29.695 --> 00:05:35.404
Item sorry,
just give it a second printf vector.

105
00:05:35.404 --> 00:05:36.005
There we go.

106
00:05:36.005 --> 00:05:38.876
And of course print f and a new line.

107
00:05:38.876 --> 00:05:40.130
Look at how beautiful that is.

108
00:05:40.130 --> 00:05:41.324
See, this language is simple.

109
00:05:41.324 --> 00:05:45.941
All those people saying that C++ isn't
simple, they just don't understand it.

110
00:05:45.941 --> 00:05:51.575
All right, print f a,
and of course print a.

111
00:05:51.575 --> 00:05:53.725
So what do you think is gonna happen here?

112
00:05:53.725 --> 00:05:55.534
Probably the same stuff, right?

113
00:05:55.534 --> 00:05:57.013
So let's go over here.

114
00:05:57.013 --> 00:06:00.068
And go, I never actually tested it.

115
00:06:00.068 --> 00:06:01.178
Okay, good.

116
00:06:01.178 --> 00:06:03.929
I just realized that I might not know up.

117
00:06:03.929 --> 00:06:05.380
Yep.
Okay, go in here.

118
00:06:07.904 --> 00:06:08.956
Perfect.

119
00:06:08.956 --> 00:06:09.659
What is it?

120
00:06:09.659 --> 00:06:10.330
./a.out.

121
00:06:10.330 --> 00:06:11.405
Yeah.

122
00:06:11.405 --> 00:06:14.109
So a vector, it has nothing in it.

123
00:06:14.109 --> 00:06:15.665
Well, let's try would b,

124
00:06:15.665 --> 00:06:20.008
that seems a little weird because we just
said b equals a and then we did that.

125
00:06:20.008 --> 00:06:25.018
So for fun, let's put b in here.

126
00:06:25.018 --> 00:06:28.619
There we go, and recompile and re execute.

127
00:06:28.619 --> 00:06:30.213
So look at what happened here.

128
00:06:30.213 --> 00:06:31.443
Is that a little strange?

129
00:06:31.443 --> 00:06:35.254
For a lot of people that have only
ever worked in the JavaScript world,

130
00:06:35.254 --> 00:06:36.943
this may seem a touch strange.

131
00:06:36.943 --> 00:06:41.023
Well, what's actually happening
is that when you do this,

132
00:06:41.023 --> 00:06:43.343
the vector is copied from a into b.

133
00:06:43.343 --> 00:06:49.144
There are two separate vectors which
means that I could come here and

134
00:06:49.144 --> 00:06:54.652
create a vector c, put that in here,
go here and do another one.

135
00:06:54.652 --> 00:07:00.364
Take this, take b, turn into c,
and execute it again.

136
00:07:00.364 --> 00:07:03.468
And now, as you can see,
that's a little bit different, right?

137
00:07:03.468 --> 00:07:05.333
You may or
may not expected that to happen.

138
00:07:05.333 --> 00:07:08.566
So this is a different way you
can think about programing.

139
00:07:08.566 --> 00:07:12.707
Obviously, C++ gives you the ability
to do different operations.

140
00:07:12.707 --> 00:07:15.267
There's move constructors,
there's copy constructors,

141
00:07:15.267 --> 00:07:17.144
they have a bunch of
ampersand signs in them.

142
00:07:17.144 --> 00:07:21.444
I don't remember exactly even how to
do them because I rarely do them but

143
00:07:21.444 --> 00:07:22.958
there's a lot to C++.

144
00:07:22.958 --> 00:07:26.539
There's a lot of ways to shoot yourself in
the foot and this is one of the many ways

145
00:07:26.539 --> 00:07:29.592
that I have personally shot myself
in the foot and it's fantastic.

146
00:07:29.592 --> 00:07:34.426
But the reason why I bring this up is that
we often don't think about variables if

147
00:07:34.426 --> 00:07:37.532
you've come from the TypeScript
world like this,

148
00:07:37.532 --> 00:07:41.888
where there's actually different
behaviors based on the equal sign.

149
00:07:41.888 --> 00:07:45.111
And so Rust has its own behavior
based on the equal sign.

150
00:07:45.111 --> 00:07:47.876
So let's kinda check that out.

151
00:07:47.876 --> 00:07:50.550
Yep, we're not the I did
a shorter example here.

152
00:07:50.550 --> 00:07:54.156
I gave you guys the premium
version of this example.

153
00:07:54.156 --> 00:07:57.108
All right, so while you come here,
so let's do this again.

154
00:07:57.108 --> 00:08:00.147
Except for this time, let's do it in Rust.

155
00:08:00.147 --> 00:08:03.665
Now I'm gonna get this nice long air for
a second and then it's gonna go away.

156
00:08:03.665 --> 00:08:09.604
And I'm gonna go,
let a equals vec bang this, all right?

157
00:08:09.604 --> 00:08:12.237
And then I'm gonna go b equals a.

158
00:08:12.237 --> 00:08:15.963
Here I'll even define a,
we don't even need to define a.

159
00:08:15.963 --> 00:08:20.504
And go.
We'll call it mute, b.push, and

160
00:08:20.504 --> 00:08:24.070
we'll put in the number one.

161
00:08:24.070 --> 00:08:24.867
There we go.

162
00:08:24.867 --> 00:08:27.060
Now a has been defined,
b has been defined.

163
00:08:27.060 --> 00:08:28.492
It's a vector of i 32.

164
00:08:28.492 --> 00:08:31.654
For those that don't know vector,
you can just think of it as like a list,

165
00:08:31.654 --> 00:08:34.565
a linked list, an array list,
whatever it is underneath the hood.

166
00:08:34.565 --> 00:08:36.397
You don't have to know what it is.

167
00:08:36.397 --> 00:08:39.298
It's just a list of some sort, all right?

168
00:08:39.298 --> 00:08:43.887
And so now of course we can go print ln in
the sense if this language is better we

169
00:08:43.887 --> 00:08:48.367
can do this beautiful greater operator and
we can print this out, right?

170
00:08:48.367 --> 00:08:49.809
This makes.

171
00:08:49.809 --> 00:08:52.180
We probably all can guess
what's about to happen.

172
00:08:52.180 --> 00:08:55.449
So I'm gonna go cargo run
we see an array of one.

173
00:08:55.449 --> 00:08:59.071
Awesome.
I'm gonna also make obviously a mutable

174
00:08:59.071 --> 00:09:04.297
and it says hey you don't have to
do that well let's go a.push1.

175
00:09:04.297 --> 00:09:05.455
What happened here?

176
00:09:05.455 --> 00:09:08.229
It's saying you can't do that, right?

177
00:09:08.229 --> 00:09:09.530
Why is that?

178
00:09:09.530 --> 00:09:12.524
Well, there's a very
specific reason in rust and

179
00:09:12.524 --> 00:09:17.176
once you get this mental model in,
Rust become significantly easier to use.

180
00:09:17.176 --> 00:09:19.473
It just takes a little bit of time.

