WEBVTT

1
00:00:00.120 --> 00:00:01.170
So let's jump down here.

2
00:00:01.170 --> 00:00:05.020
There's three types that you gotta think
about at least overall which is a value.

3
00:00:05.020 --> 00:00:06.710
So what is a value?

4
00:00:06.710 --> 00:00:09.570
This is the value, right?

5
00:00:09.570 --> 00:00:12.850
That is the vector,
that is the thing itself.

6
00:00:12.850 --> 00:00:17.218
Second, there are references,
I can create a reference to this value,

7
00:00:17.218 --> 00:00:20.310
which means that you can
read data from that value.

8
00:00:21.370 --> 00:00:24.456
And third, I can create a mutable
reference to that value,

9
00:00:24.456 --> 00:00:28.800
meaning that it is a reference to
a thing in which I can also mutate.

10
00:00:28.800 --> 00:00:32.915
And so unlike JavaScript, you cannot
mutate a vector unless if you say,

11
00:00:32.915 --> 00:00:34.610
hey, this thing is mutable.

12
00:00:34.610 --> 00:00:38.394
And I think that's a very important
difference between the two because it

13
00:00:38.394 --> 00:00:40.640
allows a much more kinda strict paradigm.

14
00:00:40.640 --> 00:00:43.225
You won't get things off getting
mutated somewhere else and

15
00:00:43.225 --> 00:00:45.130
then being surprised about it.

16
00:00:45.130 --> 00:00:47.150
It also allows for some other cool things.

17
00:00:47.150 --> 00:00:50.530
So obviously I already went over this,
you can only have one value.

18
00:00:50.530 --> 00:00:54.945
Now there is a small exception to
the rule, which just like in C++ when we

19
00:00:54.945 --> 00:00:59.450
assigned, it copied, you can also
implement the copy trait on your type.

20
00:00:59.450 --> 00:01:02.350
So if you create a struct,
you implement the copy trait.

21
00:01:02.350 --> 00:01:06.086
When you assign, you'll actually get
it to implicitly copy which could or

22
00:01:06.086 --> 00:01:07.520
which could be great or bad.

23
00:01:07.520 --> 00:01:11.480
And so numbers as you can imagine,
they just copy, that makes perfect sense,

24
00:01:11.480 --> 00:01:15.260
it makes no sense if you could only
have a number that you cannot copy.

25
00:01:15.260 --> 00:01:18.397
So fairly easy, doesn't matter,
we can do that.

26
00:01:18.397 --> 00:01:22.530
Two, references, you can have as
many references as you would like.

27
00:01:22.530 --> 00:01:23.730
Everything can be a reference.

28
00:01:23.730 --> 00:01:27.430
So as you can see here, x equals five,
y is a reference to it.

29
00:01:27.430 --> 00:01:29.379
There we go.
So let's just do that really quickly so

30
00:01:29.379 --> 00:01:32.870
we can kinda see how that looks cuz I
feel like it's always better to program.

31
00:01:32.870 --> 00:01:36.300
So x equals that,
y equals a reference to x.

32
00:01:36.300 --> 00:01:38.344
And then we can go x plus y.

33
00:01:38.344 --> 00:01:44.796
Now if we look at x, it is a type
of an integer that is 32 bits long.

34
00:01:44.796 --> 00:01:49.578
For those that don't know what 32 is,
that's how many bits are in a number,

35
00:01:49.578 --> 00:01:54.587
approximately 4 billion is the highest
number you can represent with 32 bits.

36
00:01:54.587 --> 00:01:58.470
And y is a reference to a 32.

37
00:01:58.470 --> 00:02:03.250
Which also means that I cannot do things
like this, I cannot go y equals six.

38
00:02:03.250 --> 00:02:03.890
And why not?

39
00:02:03.890 --> 00:02:07.385
Well, you can't do that.

40
00:02:07.385 --> 00:02:11.210
You cannot mutate this thing cuz it
is not a mutable reference, right?

41
00:02:11.210 --> 00:02:12.790
You cannot change it.

42
00:02:12.790 --> 00:02:14.900
But I can certainly use its value.

43
00:02:14.900 --> 00:02:18.345
So x plus y is the same
thing as doing x times two,

44
00:02:18.345 --> 00:02:23.530
whatever you wanna call it because
this is okay, you can have that out.

45
00:02:23.530 --> 00:02:28.318
But what you cannot do is have
a reference to something and

46
00:02:28.318 --> 00:02:33.250
a mutable reference to something
at the exact same time.

47
00:02:33.250 --> 00:02:34.950
This is a very important part about rust.

48
00:02:34.950 --> 00:02:39.173
And this is actually where it guarantees
a lot of its safety is because you cannot

49
00:02:39.173 --> 00:02:43.205
have things that can read at the same time
where things can write to cuz that is

50
00:02:43.205 --> 00:02:45.430
gonna cause some fundamental problems.

51
00:02:45.430 --> 00:02:46.310
We've all seen this, and

52
00:02:46.310 --> 00:02:49.610
JavaScript doesn't quite have this because
JavaScript doesn't quite have threads.

53
00:02:49.610 --> 00:02:52.689
But you've seen problems where
you're expecting one vote,

54
00:02:52.689 --> 00:02:53.940
we call them data races.

55
00:02:53.940 --> 00:02:55.831
I think still in JavaScript,
it's kinda funny, but

56
00:02:55.831 --> 00:02:57.820
you have race conditions
still in JavaScript.

57
00:02:57.820 --> 00:02:59.260
And that is a lot of
it comes down to this.

58
00:02:59.260 --> 00:03:01.510
You're waiting for something to change.

59
00:03:01.510 --> 00:03:03.919
And you shouldn't be passing
all these things and

60
00:03:03.919 --> 00:03:06.950
things just become convoluted and
very, very hard.

61
00:03:06.950 --> 00:03:10.509
Cuz everyone's kinda pointing at each
other, hoping someone's gonna do it

62
00:03:10.509 --> 00:03:13.670
whereas with rust,
you just can't really do that as easily.

63
00:03:13.670 --> 00:03:17.750
I'm sure there's a way with unsafe mode
where you could cause some similar

64
00:03:17.750 --> 00:03:21.895
problems but we're just not gonna touch
unsafe mode and unsafe mode is still

65
00:03:21.895 --> 00:03:25.410
fairly safe in comparison, but
with this, you cannot do that.

66
00:03:25.410 --> 00:03:28.320
So if I just had this,
this is totally fine.

67
00:03:28.320 --> 00:03:30.204
Now I can go z equals seven, right?

68
00:03:30.204 --> 00:03:32.940
I can do some fun things here, right?

69
00:03:32.940 --> 00:03:33.930
Or I gotta dereference this.

70
00:03:35.340 --> 00:03:35.860
There we go.

71
00:03:35.860 --> 00:03:40.687
And so now I can do this which,
what do you think the answer is gonna be?

72
00:03:40.687 --> 00:03:42.640
Cannot do these fun things, right?

73
00:03:42.640 --> 00:03:44.025
What are we gonna get here?

74
00:03:44.025 --> 00:03:45.570
My goodness, can I borrow x's mutable?

75
00:03:45.570 --> 00:03:47.437
Can't forget all these things,

76
00:03:47.437 --> 00:03:52.220
can't obviously borrow a mutable version
of x if x is not mutable itself, right?

77
00:03:52.220 --> 00:03:54.250
So you're gonna get a lot of
complaints from the compiler.

78
00:03:54.250 --> 00:03:57.872
It's gonna tell you a lot of things,
that small simple changes just did just

79
00:03:57.872 --> 00:04:00.490
inundated you with like,
here's this is wrong.

80
00:04:00.490 --> 00:04:01.190
Hey, that's wrong.

81
00:04:01.190 --> 00:04:02.116
Hey, this is wrong.

82
00:04:02.116 --> 00:04:03.270
Look that's wrong.

83
00:04:03.270 --> 00:04:05.640
And, of course, when you print it out,
you can see that it's seven.

84
00:04:05.640 --> 00:04:07.390
It's just something to always remember.

85
00:04:07.390 --> 00:04:11.420
So in the C++ land, which is not important
JavaScript, you can do things like this.

86
00:04:11.420 --> 00:04:13.170
This gives you obviously, scope control.

87
00:04:14.520 --> 00:04:17.708
Because what it's saying here
is that z is going to live, but

88
00:04:17.708 --> 00:04:19.530
it lives up until this point.

89
00:04:19.530 --> 00:04:20.940
Now this is not technically true.

90
00:04:20.940 --> 00:04:25.233
There's actually a better explanation
of how things live in rust in the book

91
00:04:25.233 --> 00:04:26.516
Rust for Rustaceans.

92
00:04:26.516 --> 00:04:27.662
But for our sake,

93
00:04:27.662 --> 00:04:32.342
just think of it at the end of every
scope is how long something lives for.

94
00:04:32.342 --> 00:04:38.519
So how rust guarantees safety is that
rust can go as an agony like this, right?

95
00:04:38.519 --> 00:04:39.355
Why does this work?

96
00:04:39.355 --> 00:04:43.613
How come this works when I have two
things that I'm manipulating, right?

97
00:04:43.613 --> 00:04:45.929
I have a mutable and immutable here.

98
00:04:45.929 --> 00:04:49.624
Well, x is not manipulated
inside of here and

99
00:04:49.624 --> 00:04:54.301
it only has a single reference x or
z to x that's mutable.

100
00:04:54.301 --> 00:04:57.350
And then we do something with it and
then we drop z.

101
00:04:57.350 --> 00:05:01.829
Z no longer lives, therefore x can
be remutable again and so now, boom,

102
00:05:01.829 --> 00:05:03.602
we're doing it right here.

103
00:05:03.602 --> 00:05:07.829
And so that's kind of how rust works is
that it kinda lives on these lifetime

104
00:05:07.829 --> 00:05:11.921
edges and you can just use swirlies as
your general kinda cut off point for

105
00:05:11.921 --> 00:05:14.470
where do you think these things happen.

106
00:05:14.470 --> 00:05:16.990
Like I said, there is actually
a much more detailed version of it.

107
00:05:16.990 --> 00:05:20.570
It's just irrelevant for our case and
you only run into it very rarely.

108
00:05:20.570 --> 00:05:21.120
But there you go.

109
00:05:21.120 --> 00:05:23.050
So now we have that beautiful
little thing right there.

110
00:05:24.660 --> 00:05:26.250
Just obviously can't do that.

111
00:05:26.250 --> 00:05:27.560
Not gonna work.

112
00:05:27.560 --> 00:05:29.180
All right, so do we have any questions?

113
00:05:29.180 --> 00:05:30.110
It's kinda stopped here.

114
00:05:30.110 --> 00:05:32.810
We can kinda go over some
more examples if you need to,

115
00:05:32.810 --> 00:05:36.710
cuz It's important just to have a basic
understanding that you have a value.

116
00:05:37.760 --> 00:05:40.030
The value only exists in one spot.

117
00:05:40.030 --> 00:05:41.638
When you assign it to somewhere else,

118
00:05:41.638 --> 00:05:43.980
it literally moves that
value into the new one.

119
00:05:43.980 --> 00:05:46.500
You cannot reference it to the old one.

120
00:05:46.500 --> 00:05:51.860
So just like I did before with
the vectors, well, where was it?

121
00:05:51.860 --> 00:05:53.380
Where were you?

122
00:05:53.380 --> 00:05:54.890
Right, right here.

123
00:05:54.890 --> 00:05:56.893
You cannot reference a anymore.

124
00:05:56.893 --> 00:06:00.109
A has been moved,
I cannot push right here, right?

125
00:06:00.109 --> 00:06:02.553
If I try to push, what is it gonna do?

126
00:06:02.553 --> 00:06:04.874
A's already been moved, right?

127
00:06:04.874 --> 00:06:08.863
And so in rust world,
everything gets moved as you assign it so

128
00:06:08.863 --> 00:06:12.716
if I hand a value to a function,
do I have the value anymore?

129
00:06:12.716 --> 00:06:15.440
No, the function has the value.

130
00:06:15.440 --> 00:06:19.020
If the function doesn't return me
the value, then that value is gone.

131
00:06:19.020 --> 00:06:22.557
So if it's a vector filled with a bunch
of items, and you don't get it back,

132
00:06:22.557 --> 00:06:23.570
it's gone forever.

133
00:06:23.570 --> 00:06:25.850
So you can hand in references to it.

134
00:06:25.850 --> 00:06:27.565
So that way,
you still retain the value but

135
00:06:27.565 --> 00:06:29.630
they have a reference to it to read it.

136
00:06:29.630 --> 00:06:32.680
If they need to mutate it,
you can hand it a mutable reference.

137
00:06:32.680 --> 00:06:36.235
They can mutate it, then the lifetime
of that mutable reference is done, and

138
00:06:36.235 --> 00:06:40.110
then you can do and go on your merry way
and do the things you need to do with it.

139
00:06:40.110 --> 00:06:41.993
So long as you keep those
things in your head,

140
00:06:41.993 --> 00:06:44.120
I really don't think rust is that hard.

141
00:06:44.120 --> 00:06:47.003
That's like the hardest part and then you
go into async world and then you cry and

142
00:06:47.003 --> 00:06:48.660
async and everything's terrible.

143
00:06:48.660 --> 00:06:50.884
So we won't go there like I said but

144
00:06:50.884 --> 00:06:54.730
I just wanna say that one more
time any questions feel free.

145
00:06:56.090 --> 00:07:00.123
&gt;&gt; So just to clarify,
if you declare a variable as mutable and

146
00:07:00.123 --> 00:07:05.446
then you borrow it using the ampersand,
it becomes immutable at that point and

147
00:07:05.446 --> 00:07:08.990
then you can't reference
it again as mutable.

148
00:07:08.990 --> 00:07:10.750
&gt;&gt; So let's do that again.

149
00:07:10.750 --> 00:07:14.560
Okay, so you're saying, hey,
I have a, it's mutable, right?

150
00:07:14.560 --> 00:07:17.520
I'm gonna give it a type just so
it quits complaining.

151
00:07:17.520 --> 00:07:20.245
This will be a vec of i32, right?

152
00:07:20.245 --> 00:07:22.628
So that's what it's
complaining about saying, hey,

153
00:07:22.628 --> 00:07:25.224
I don't know what I am because
I haven't given it a type yet.

154
00:07:25.224 --> 00:07:28.470
And so if I hand it to B, and
this is fine, this is perfectly fine,

155
00:07:28.470 --> 00:07:32.200
these are just warning saying,
hey, it's an unused variable.

156
00:07:32.200 --> 00:07:34.330
It put a underscore so
don't worry about that.

157
00:07:34.330 --> 00:07:39.500
So yes, I can have a reference out to
this thing that is mutable, that is fine.

158
00:07:39.500 --> 00:07:44.262
But what I cannot do is
I cannot have a mutable

159
00:07:44.262 --> 00:07:48.520
reference along with a reference out.

160
00:07:48.520 --> 00:07:51.888
Once you start going into this land,
you start getting into the very dangerous

161
00:07:51.888 --> 00:07:54.560
land of, hey,
you're not allowed to do these things.

162
00:07:54.560 --> 00:07:57.997
It's gonna start causing a bunch of
problems because if I start passing things

163
00:07:57.997 --> 00:08:01.695
around, you start getting into the borrow
checker, losing its mind saying, hey,

164
00:08:01.695 --> 00:08:04.740
stop doing that,
you're not allowed to do that.

165
00:08:04.740 --> 00:08:06.060
But that's pretty much it.

166
00:08:06.060 --> 00:08:08.682
So long as you keep things,
just think of it as steps and

167
00:08:08.682 --> 00:08:11.532
be a little bit more precise as
you walk through when you want

168
00:08:11.532 --> 00:08:14.870
things to mutate when you
don't want things to mutate.

169
00:08:14.870 --> 00:08:18.699
Most people always talk about you should
never have mute unless if you really need

170
00:08:18.699 --> 00:08:19.680
it as a keyword.

171
00:08:19.680 --> 00:08:20.600
It's a rare word you need.

172
00:08:20.600 --> 00:08:22.850
All right, we got a question.

173
00:08:22.850 --> 00:08:24.651
&gt;&gt; What if you actually have two owners,

174
00:08:24.651 --> 00:08:27.600
I'm thinking about double linked lists,
etc.?

175
00:08:27.600 --> 00:08:29.140
&gt;&gt; So you cannot simply.

176
00:08:29.140 --> 00:08:33.462
One does not simply create a double
linked list in Russ that is

177
00:08:33.462 --> 00:08:37.460
because there's this whole thing,
what is it called?

178
00:08:37.460 --> 00:08:39.550
It's called too many lists.

179
00:08:40.620 --> 00:08:42.270
I believe it's what it's called
learning rust with too many link

180
00:08:42.270 --> 00:08:43.110
lists, there we go.

181
00:08:43.110 --> 00:08:45.317
This is actually gonna go over a lot,

182
00:08:45.317 --> 00:08:49.820
this is like what I consider one of
the best places to learn rust from.

183
00:08:49.820 --> 00:08:54.917
The sad part about this really awesome
content here is that it's geared towards

184
00:08:54.917 --> 00:08:59.557
very new people to rust, which
convoluted its explanations with like,

185
00:08:59.557 --> 00:09:02.190
hey, this is what a reference is.

186
00:09:02.190 --> 00:09:05.512
When I was hoping it'd be like the more
kinda like you already know what

187
00:09:05.512 --> 00:09:08.740
references are,
references just point to something, right?

188
00:09:08.740 --> 00:09:11.637
But this is a very, very good thing
to kind of understand linkless.

189
00:09:11.637 --> 00:09:14.550
So only one thing can ever own a value.

190
00:09:14.550 --> 00:09:19.018
And so often what people do is they
create reference counters are an RCA

191
00:09:19.018 --> 00:09:20.510
reference count.

192
00:09:20.510 --> 00:09:23.610
That's a way you can pass out
multiple reference to this.

193
00:09:23.610 --> 00:09:25.430
You can guard it with
what is called a mutex.

194
00:09:25.430 --> 00:09:27.540
So that way multiple people can edit it.

195
00:09:27.540 --> 00:09:29.770
There's a bunch of there's
interior mutability.

196
00:09:29.770 --> 00:09:34.242
There's all these confusing
things eventually that go on for

197
00:09:34.242 --> 00:09:40.010
allowing better maintaining this but it
just takes a bit more time to do things.

198
00:09:41.140 --> 00:09:46.570
Whereas with, Go or TypeScript,
you just don't ever think about it.

199
00:09:46.570 --> 00:09:49.490
Just everybody has access to
everything and everyone can change it.

200
00:09:49.490 --> 00:09:50.900
And that's just the way it is.

201
00:09:50.900 --> 00:09:53.793
And so rust is just gonna make
you go a little bit slower and

202
00:09:53.793 --> 00:09:55.130
think about a few things.

203
00:09:56.790 --> 00:09:59.790
So, nice try though on
the doubly linked lists.

204
00:09:59.790 --> 00:10:01.730
Okay, you're not gonna
catch me on that one.

205
00:10:01.730 --> 00:10:04.280
Well, let me just program one up
really quickly for you in that way.

206
00:10:06.380 --> 00:10:08.175
&gt;&gt; Here.
&gt;&gt; I guess I'm not understanding what's

207
00:10:08.175 --> 00:10:11.550
the difference between a reference and
a mutable reference.

208
00:10:11.550 --> 00:10:15.780
&gt;&gt; A mmutable reference allows you
to mutate the underlying item.

209
00:10:15.780 --> 00:10:18.180
Whereas a reference only
allows you to read the data.

210
00:10:19.640 --> 00:10:21.050
So they make a distinction there.

211
00:10:23.250 --> 00:10:27.853
You can only have one mutable reference
out, cuz two things cannot both read and

212
00:10:27.853 --> 00:10:29.509
write data at the same time.

213
00:10:29.509 --> 00:10:32.332
And they just put it some of
these concrete rules in so

214
00:10:32.332 --> 00:10:34.010
that way it's easier for you.

215
00:10:35.652 --> 00:10:37.450
It's really easier for
the compiler to tell you you're wrong.

216
00:10:38.780 --> 00:10:40.628
&gt;&gt; Kinda weird question here, so like,

217
00:10:40.628 --> 00:10:44.034
how it's happening is kinda seems
it's well if you have a value for a,

218
00:10:44.034 --> 00:10:47.963
it's pointing to memory in the soil into
therapy to actually move the value there

219
00:10:47.963 --> 00:10:51.810
but does a still point to that location
and memory and there's nothing there?

220
00:10:51.810 --> 00:10:56.611
&gt;&gt; So I mean, I can't speak to the exact
specifics of what a is actually

221
00:10:56.611 --> 00:10:58.900
pointing to at that point.

222
00:10:58.900 --> 00:11:02.370
But the compiler will simply
not let you run that program.

223
00:11:02.370 --> 00:11:05.997
So it's because it's a valueless item and
they can pre-compute that it's

224
00:11:05.997 --> 00:11:09.580
a valueless item there for this program
is doing something wrong, right?

225
00:11:09.580 --> 00:11:14.587
It's effectively like a use after free
air in C++ and so it's just like this

226
00:11:14.587 --> 00:11:20.001
thing is a dangling pointer now, you may
never ever use this this construct again.

227
00:11:20.001 --> 00:11:23.373
But one cool thing about rust,
just to throw this out here so

228
00:11:23.373 --> 00:11:27.554
if B equals A there, there is this
thing called shadowing which I really,

229
00:11:27.554 --> 00:11:31.220
really like,
is you can read declare variables, right?

230
00:11:31.220 --> 00:11:35.951
So a is a vector of i32, l can now
make a into a string but I have to use

231
00:11:35.951 --> 00:11:41.014
the keyword let, which is really
convenient especially in like loops or

232
00:11:41.014 --> 00:11:46.800
things where you want to go, I need to
change the type from one to another.

233
00:11:46.800 --> 00:11:48.433
This is kind of more annoying and

234
00:11:48.433 --> 00:11:51.240
something like go pick is
go does not allow this.

235
00:11:51.240 --> 00:11:53.730
And so you have to come up like,
okay, I have a config,

236
00:11:53.730 --> 00:11:57.251
I have a thing that has a config and
you start getting this config or whatever,

237
00:11:57.251 --> 00:12:01.098
the word problem becomes new, like, I just
need to change from one type to another,

238
00:12:01.098 --> 00:12:03.020
and then it just is very painful.

239
00:12:03.020 --> 00:12:08.791
Whereas if I try to reassign a,
I'm not gonna let me obviously the whole,

240
00:12:08.791 --> 00:12:13.150
you can't assign
an immutable variable twice.

241
00:12:13.150 --> 00:12:14.880
It's just not allowed, right?

242
00:12:14.880 --> 00:12:18.620
It's gonna try to catch everything
you're doing all the time.

243
00:12:18.620 --> 00:12:19.800
It's very good at doing it too.

244
00:12:19.800 --> 00:12:21.710
It's gonna make you feel bad and
frustrated.

245
00:12:21.710 --> 00:12:25.355
And so don't feel upset if you're
frustrated, just long as you can keep

246
00:12:25.355 --> 00:12:28.990
that one thing in mind,
you have a value it points to something.

247
00:12:28.990 --> 00:12:31.510
Whenever you pass the value,
it has gone from you.

248
00:12:31.510 --> 00:12:32.627
You no longer have it.

249
00:12:32.627 --> 00:12:36.530
There's only one owner,
there's only one owner of the ring, right?

250
00:12:36.530 --> 00:12:41.469
And whoever has it is, the Lord, say,
of the ring, perhaps all the rings

251
00:12:41.469 --> 00:12:45.230
if there's references out we
can keep going with this.

252
00:12:45.230 --> 00:12:47.850
I don't think we should though.

253
00:12:47.850 --> 00:12:49.575
You'd be surprised to know that
I made that up on the spot.

254
00:12:49.575 --> 00:12:51.624
All right, let's keep on going.

