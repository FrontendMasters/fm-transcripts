WEBVTT

1
00:00:00.110 --> 00:00:02.000
We have now crushed out go.

2
00:00:02.000 --> 00:00:05.407
So let's move on to rust, right?

3
00:00:05.407 --> 00:00:08.462
Very excited about this.

4
00:00:08.462 --> 00:00:10.511
It's the final moments man.

5
00:00:16.458 --> 00:00:22.852
All right, so ,let's go to bin projector,
so that's where we're gonna go.

6
00:00:22.852 --> 00:00:25.331
I would've used a sweet,
sweet harpoon to jump there, but

7
00:00:25.331 --> 00:00:28.255
I feel like that might be a bit
disorienting, for you guys to see that,

8
00:00:28.255 --> 00:00:31.852
yes, that was a self promotion, harpoon
greatest plug I ever written, there we go.

9
00:00:31.852 --> 00:00:35.080
So, source bin projector, right?

10
00:00:35.080 --> 00:00:37.240
Now all we have is a config.

11
00:00:37.240 --> 00:00:39.890
So now we need to create the projector,
right?

12
00:00:41.600 --> 00:00:46.090
Let projector equals well
how do we do this one again?

13
00:00:46.090 --> 00:00:48.022
I can't quite remember.

14
00:00:48.022 --> 00:00:49.767
Did we do a new projector?

15
00:00:49.767 --> 00:00:50.901
So what did we do?

16
00:00:52.650 --> 00:00:55.990
Was the way we decided to create it,
from config.

17
00:00:55.990 --> 00:01:02.426
Okay so we're having it as a static
method let's use that from config,

18
00:01:02.426 --> 00:01:07.162
so first we need to import
it from config right here.

19
00:01:07.162 --> 00:01:11.049
So it's gonna take in our opts,
which is terribly named.

20
00:01:11.049 --> 00:01:15.590
Let's rename that from opts to config,
fantastic.

21
00:01:15.590 --> 00:01:17.420
There we go, we have our projector.

22
00:01:17.420 --> 00:01:20.840
Now all we need to do, is go through each
one of the operations, we should do that.

23
00:01:20.840 --> 00:01:24.144
So we should use the match operator
because now we can do all those sweet

24
00:01:24.144 --> 00:01:27.330
pattern matches, which I'm very,
very excited about.

25
00:01:27.330 --> 00:01:33.340
So, let's go config, let's go operation
and let's match on missing arm.

26
00:01:33.340 --> 00:01:34.920
Okay, let's fix up the arms.

27
00:01:34.920 --> 00:01:36.410
So, we have an operation.

28
00:01:38.618 --> 00:01:42.020
Can we just get it to,
there we go, and let's do print.

29
00:01:42.020 --> 00:01:44.450
And let's we can deal
with just the none arm.

30
00:01:44.450 --> 00:01:48.380
Now that's actually pretty cool because
now our good value is this, right?

31
00:01:48.380 --> 00:01:50.250
That's exactly what we wanted to see.

32
00:01:50.250 --> 00:01:51.170
I really liked that.

33
00:01:51.170 --> 00:01:52.840
It makes it feel so much better.

34
00:01:52.840 --> 00:01:56.351
Let's just hop back for
one quick second to our other one.

35
00:01:56.351 --> 00:01:59.486
Notice that on our other one,
what do we have to do?

36
00:01:59.486 --> 00:02:03.806
We had to, if it is a print and
there's nothing there, then we do this,

37
00:02:03.806 --> 00:02:07.697
else we got to do that,
whereas in this one it's very specific.

38
00:02:07.697 --> 00:02:10.718
When it's this one it's this type,
I operate like this.

39
00:02:10.718 --> 00:02:13.890
I think that's just really clean,
really appreciative.

40
00:02:13.890 --> 00:02:17.210
And so that means I can also
do print some value, right?

41
00:02:17.210 --> 00:02:20.390
So now we also have the value that
we're gonna be doing something with.

42
00:02:20.390 --> 00:02:23.617
Awesome, let's do it again,

43
00:02:23.617 --> 00:02:29.336
let's also have Add which is
gonna have key and value.

44
00:02:29.336 --> 00:02:31.380
And then of course,
ensure all possible, yep.

45
00:02:31.380 --> 00:02:34.630
And then we also need remove,
which is just key.

46
00:02:34.630 --> 00:02:37.990
Fantastic, well, we have it, but
I want you to notice something.

47
00:02:37.990 --> 00:02:42.490
There is an error cropping up that doesn't
look like an error I was expecting.

48
00:02:42.490 --> 00:02:44.120
So what is this error?

49
00:02:44.120 --> 00:02:46.490
This error of course is unused variable.

50
00:02:46.490 --> 00:02:49.850
We should prefix it and
then use have moved value.

51
00:02:51.040 --> 00:02:53.270
No, the borrow checker.

52
00:02:53.270 --> 00:02:55.790
It's ready, it's hurting our feelings.

53
00:02:55.790 --> 00:02:57.190
What happened here?

54
00:02:57.190 --> 00:02:58.900
Why are we running into this?

55
00:03:00.590 --> 00:03:04.645
Well, this is why, we pass the config in,

56
00:03:04.645 --> 00:03:08.475
what happens if we are the value owner and

57
00:03:08.475 --> 00:03:13.448
we hand the value to a function,
who owns the value.

58
00:03:13.448 --> 00:03:17.210
We don't own the value anymore,
it's been moved out of our hands,

59
00:03:17.210 --> 00:03:21.909
so how could we possibly ever access this
value again, it's gone, it's not ours.

60
00:03:21.909 --> 00:03:23.650
So that is what just happened there.

61
00:03:23.650 --> 00:03:27.249
We moved it all the way to the projector,
which means unfortunately,

62
00:03:27.249 --> 00:03:30.482
all of our great ideas to make
these three programs identical,

63
00:03:30.482 --> 00:03:33.120
actually have just completely fallen flat.

64
00:03:33.120 --> 00:03:35.170
And now we need to do a bit of a refactor,
don't we?

65
00:03:36.420 --> 00:03:37.790
Yeah, it hurts.

66
00:03:37.790 --> 00:03:42.140
So we could just clone it if we were lazy,
but we're not lazy here, people.

67
00:03:42.140 --> 00:03:46.000
Besides that other time we were lazy,
we are gonna be really non lazy here.

68
00:03:46.000 --> 00:03:47.710
We're gonna actually do
the right thing here.

69
00:03:47.710 --> 00:03:52.580
So, to me, what are we even
using inside this config object?

70
00:03:52.580 --> 00:03:57.297
Well, we need a reference to
some contents that required

71
00:03:57.297 --> 00:04:01.140
a reference to the config path, okay?

72
00:04:01.140 --> 00:04:03.570
That's not that bad, right?

73
00:04:03.570 --> 00:04:04.270
What else do we need?

74
00:04:06.070 --> 00:04:10.319
I guess on the projector itself,
we need to present working directory.

75
00:04:10.319 --> 00:04:14.744
And then we also need that same config
path such that we can save this thing

76
00:04:14.744 --> 00:04:16.138
off again, correct?

77
00:04:16.138 --> 00:04:19.238
Yeah, but do we need the operation?

78
00:04:19.238 --> 00:04:20.911
Now we don't need the operation.

79
00:04:20.911 --> 00:04:24.967
The projector itself does not run
the operation, it's the outside of

80
00:04:24.967 --> 00:04:29.365
the file that runs the operation,
therefore, we should just be able to kind

81
00:04:29.365 --> 00:04:33.930
of reduce what we pass in here and just
let it only use a certain amount of items.

82
00:04:33.930 --> 00:04:35.828
So let's try this out.

83
00:04:35.828 --> 00:04:38.458
Let's go in here and
let's change this up a little bit.

84
00:04:38.458 --> 00:04:41.005
Let's change config to a path buff and

85
00:04:41.005 --> 00:04:44.907
let's change present working
directory to a path buff and

86
00:04:44.907 --> 00:04:49.779
get a couple errors, just Rust analyzer
still trying to assert itself.

87
00:04:49.779 --> 00:04:53.840
We obviously dominated it and so now
we can go here and we can erase this or

88
00:04:53.840 --> 00:04:57.581
still gonna want to use this whole
referencing thing right here.

89
00:04:57.581 --> 00:04:59.547
But, this is wrong, right?

90
00:04:59.547 --> 00:05:02.740
So now let's do a slight refactor,
jump up here.

91
00:05:02.740 --> 00:05:05.771
And let's have config be a path buff,

92
00:05:05.771 --> 00:05:10.580
and also a present working directory,
jump back here.

93
00:05:10.580 --> 00:05:14.750
And now we also need the present working
directory to present working directory,

94
00:05:14.750 --> 00:05:18.150
beautiful present working directory again,
beautiful.

95
00:05:18.150 --> 00:05:22.806
Now our projector is mostly fixed except
for all the references that we have to

96
00:05:22.806 --> 00:05:26.510
config in which we do config.pwd or
config.config.

97
00:05:26.510 --> 00:05:28.660
So let's go config slash that.

98
00:05:28.660 --> 00:05:31.210
And so I can just delete that, right?

99
00:05:31.210 --> 00:05:34.679
I don't need that cuz now,
look at this, it works, right?

100
00:05:34.679 --> 00:05:39.156
All right, awesome, do it again,
there's our shame right there.

101
00:05:39.156 --> 00:05:40.240
The shame is so painful.

102
00:05:41.510 --> 00:05:43.220
All right, there we go.

103
00:05:43.220 --> 00:05:45.830
We don't have any other
references right here.

104
00:05:45.830 --> 00:05:47.170
We have a small little error right here.

105
00:05:47.170 --> 00:05:48.420
This is a highlighting error.

106
00:05:48.420 --> 00:05:50.750
All it's saying is, hey,
that associated function defined here.

107
00:05:50.750 --> 00:05:54.720
You're like, wow,
that's an amazing diagnostic.

108
00:05:54.720 --> 00:05:57.990
I'm really happy that I read that,
I know exactly what that means.

109
00:05:57.990 --> 00:06:01.715
What this means when you see this just
means that there's an error somewhere else

110
00:06:01.715 --> 00:06:04.950
in which this is kind of like
the root cause of the problem.

111
00:06:04.950 --> 00:06:07.733
So, of course, if we go back here,
you can see right here,

112
00:06:07.733 --> 00:06:09.990
that's the root cause of the problem.

113
00:06:09.990 --> 00:06:12.860
So what I'm gonna do,
is I'm gonna take my beautiful config, and

114
00:06:12.860 --> 00:06:17.400
I'm gonna move the config and the present
working directory into that function.

115
00:06:17.400 --> 00:06:22.100
Now I still own the config myself,
I at least own the operation.

116
00:06:22.100 --> 00:06:24.900
I moved out the other two parts,
I have that.

117
00:06:24.900 --> 00:06:30.189
I do not believe that I
should be able to go and do,

118
00:06:30.189 --> 00:06:35.994
if config.pwd equals let's
see PathBuf from that,

119
00:06:35.994 --> 00:06:41.290
it's going to complain
about some things here.

120
00:06:41.290 --> 00:06:43.448
I'm just going to make it happen, right?

121
00:06:43.448 --> 00:06:47.019
Sorry that value has already been moved,
you've used it, it's gone,

122
00:06:47.019 --> 00:06:47.963
stop touching it.

123
00:06:47.963 --> 00:06:51.040
Awesome, so I'm gonna remove that.

124
00:06:51.040 --> 00:06:55.239
There we go, we did our small refactor,
everything appears to keep working,

125
00:06:55.239 --> 00:06:58.158
just to make sure we can
run a quick cargo test.

126
00:06:58.158 --> 00:07:00.870
My goodness, we have a couple of small
little errors of course because that's how

127
00:07:00.870 --> 00:07:02.340
we are creating our projector.

128
00:07:02.340 --> 00:07:07.880
So let's go back to projector and
go down to the bottom and go right here.

129
00:07:07.880 --> 00:07:10.075
Obviously, we're creating
a projector using a config,

130
00:07:10.075 --> 00:07:12.290
we actually don't even
need to do that anymore.

131
00:07:12.290 --> 00:07:16.610
We can just simply take that.

132
00:07:16.610 --> 00:07:18.940
And of course do a present
working directory.

133
00:07:18.940 --> 00:07:22.550
Boom, our life has been resolved.

134
00:07:22.550 --> 00:07:23.920
Awesome, we had some warnings.

135
00:07:25.950 --> 00:07:29.172
We'll deal with those warnings at some
points because they are currently in our

136
00:07:29.172 --> 00:07:30.590
main file all right here.

137
00:07:30.590 --> 00:07:31.585
Awesome, so we've done it.

138
00:07:31.585 --> 00:07:35.667
We have created everything back to it, we
have avoided the borrow checker problem.

139
00:07:35.667 --> 00:07:38.460
We can now hopefully next time if
you're programming something for

140
00:07:38.460 --> 00:07:41.890
whatever reason the same thing and two
different language, you can see it coming.

141
00:07:41.890 --> 00:07:43.553
Cuz you like, yes, the moving,

142
00:07:43.553 --> 00:07:47.620
early I was hoping that this is kinda
like the thing that really sets in Rust.

143
00:07:47.620 --> 00:07:50.474
And why you need to think about
your types a little bit more,

144
00:07:50.474 --> 00:07:53.860
why values are very important
to understand what happened.

145
00:07:53.860 --> 00:07:56.570
So, now that we have that let's
just do the printing, right?

146
00:07:56.570 --> 00:07:59.920
So if we have none, we need to get
them all, we need to print them.

147
00:07:59.920 --> 00:08:02.150
So let's go like this
const wrong language.

148
00:08:02.150 --> 00:08:04.600
Asserting that we know TypeScript just for
a moment.

149
00:08:04.600 --> 00:08:11.690
So let's have the value that comes
out of the proj.get_value_all, right?

150
00:08:11.690 --> 00:08:13.784
So of course, what is this thing?

151
00:08:13.784 --> 00:08:17.730
Is a reference or
it is a HashMap of reference string.

152
00:08:17.730 --> 00:08:21.670
And we should just be able to
simply encode that, right?

153
00:08:21.670 --> 00:08:28.523
So we can go serde- json to string.

154
00:08:28.523 --> 00:08:31.958
And we're not going to do pretty we don't
want anything pretty about this, but

155
00:08:31.958 --> 00:08:34.125
of course what comes out of this thing,
an error.

156
00:08:34.125 --> 00:08:36.284
So we should probably
start handling errors,

157
00:08:36.284 --> 00:08:39.496
look at that we already did handle
the error, we haven't anyhow error,

158
00:08:39.496 --> 00:08:42.197
already coming out we can use,
anyhow, this is fantastic.

159
00:08:42.197 --> 00:08:46.455
So, just throwing a little question
mark there, and I'll reassign value.

160
00:08:46.455 --> 00:08:49.675
So value goes from a hash
map string into a string.

161
00:08:49.675 --> 00:08:52.596
Fantastic, transfer that and

162
00:08:52.596 --> 00:08:57.660
then do a beautiful println bang,
and do that value.

163
00:08:59.120 --> 00:09:01.460
Look at that, what's the last thing?

164
00:09:01.460 --> 00:09:04.230
Consider a borrow, of course,
awesome, we've done it.

165
00:09:04.230 --> 00:09:08.622
We've now borrowed out that, cuz remember
Serde Json does not need the type itself,

166
00:09:08.622 --> 00:09:10.520
or it does not need the value itself.

167
00:09:10.520 --> 00:09:13.753
It just needs the reference to the value
to read adult and produce the JSON,

168
00:09:13.753 --> 00:09:15.460
fantastic, look at what we have done.

169
00:09:15.460 --> 00:09:17.550
We have done amazing things here.

170
00:09:17.550 --> 00:09:20.510
And I also really liked this because,
again, there's no if elses here.

171
00:09:20.510 --> 00:09:22.880
We're working on types,
it makes it beautiful.

172
00:09:22.880 --> 00:09:27.558
So, let's do a get_value and
we'll pass in v,

173
00:09:27.558 --> 00:09:32.008
which really should be renamed k,
get that and

174
00:09:32.008 --> 00:09:38.873
of course what happens with k, well k
is a map and so what does that mean?

175
00:09:40.409 --> 00:09:42.526
That means we don't know if it exists,
right?

176
00:09:42.526 --> 00:09:46.070
So let's use a beautiful and then, right.

177
00:09:47.120 --> 00:09:48.680
And so we can use an and then or

178
00:09:48.680 --> 00:09:51.674
we can use a map,
if we wanted to do something, right?

179
00:09:51.674 --> 00:09:54.376
So maps pretty good one, we can actually
just use this as I'm add things.

180
00:09:54.376 --> 00:09:55.380
It's pretty great.

181
00:09:55.380 --> 00:09:57.848
We can just provide a simple
function that takes this and

182
00:09:57.848 --> 00:09:59.329
does something with it, right?

183
00:09:59.329 --> 00:10:01.250
So what does it need to do with it?

184
00:10:01.250 --> 00:10:04.900
Well, we really just need to go in
here and doesn't print that thing out.

185
00:10:04.900 --> 00:10:05.490
Do we not?

186
00:10:05.490 --> 00:10:06.400
Yeah, it's fantastic.

187
00:10:07.980 --> 00:10:10.202
And of course,
we need to just borrow okay.

188
00:10:10.202 --> 00:10:12.630
Well that, was printed it out,
that's all we did.

189
00:10:13.840 --> 00:10:15.310
It's beautiful, right?

190
00:10:15.310 --> 00:10:16.699
I like it, all right.

191
00:10:16.699 --> 00:10:22.028
So now we need to do the adding,
so what is adding of course,

192
00:10:22.028 --> 00:10:27.678
well it's projector set value
Passing the k, pass and the v and

193
00:10:27.678 --> 00:10:32.583
all that's pretty much it but
no it's not mutable,

194
00:10:32.583 --> 00:10:38.047
classic blunder thrown the mute,
do that, we'll do them.

195
00:10:38.047 --> 00:10:41.008
For both of these,
we need to do a save just like before,

196
00:10:41.008 --> 00:10:44.553
pretty much everything else is kind
of just moving by motions now.

197
00:10:44.553 --> 00:10:48.640
I'm gonna throw on a question mark cuz
know for a fact it's gonna return a result

198
00:10:48.640 --> 00:10:52.789
object, let's make sure that it throws
an error if things aren't successful,

199
00:10:52.789 --> 00:10:54.329
do the exact same thing here.

200
00:10:54.329 --> 00:11:00.217
Let's do a remove value, only it's passing
the k and of course it wants to borrow it.

201
00:11:00.217 --> 00:11:04.341
All right, beautiful,
We're pretty much 99.5% done.

202
00:11:04.341 --> 00:11:07.845
If you consider this last thing,
0.5% in complexity.

203
00:11:07.845 --> 00:11:14.742
All right, save my guess let's just
do a result of nothing, return, okay.

204
00:11:14.742 --> 00:11:17.901
Yes, I still use explicit returns during
the entire duration of this course.

205
00:11:17.901 --> 00:11:22.476
So, all we have to do now is
import anyhow because this thing

206
00:11:22.476 --> 00:11:26.776
saying this does not exist,
you need two types on here,

207
00:11:26.776 --> 00:11:31.834
use anyhow result little bit of even now,
that was intentional.

208
00:11:31.834 --> 00:11:35.340
There we go, so
we have the anyhow result fantastic.

209
00:11:35.340 --> 00:11:39.620
We just simply have to go,
does the thing exists right?

210
00:11:39.620 --> 00:11:42.740
We've done this so many times now,
it should almost feel monotonous.

211
00:11:42.740 --> 00:11:47.271
All right so let's go dir and
we're gonna need a reference to self,

212
00:11:47.271 --> 00:11:52.853
does not need to be mutable because we're
not actually changing any data, right?

213
00:11:52.853 --> 00:11:58.822
So you can go self.data or
not data, they config path, right?

214
00:11:58.822 --> 00:12:04.907
So now that we have that,
now we can technically do parent,

215
00:12:04.907 --> 00:12:08.935
to get rid of what's currently there.

216
00:12:08.935 --> 00:12:10.665
That is one way in which we can do that.

217
00:12:10.665 --> 00:12:12.815
And so we're gonna just try this out,
right?

218
00:12:12.815 --> 00:12:16.440
that that seems fairly sensible.

219
00:12:16.440 --> 00:12:21.528
And we'll do a little if
some path equals this, so

220
00:12:21.528 --> 00:12:27.117
we're gonna just grab the value out,
forgot the let.

221
00:12:27.117 --> 00:12:30.291
Awesome so this will just represent
our dirname at this point.

222
00:12:30.291 --> 00:12:32.741
So all we need to do is just make
sure that this thing exists.

223
00:12:32.741 --> 00:12:36.184
Again we did this earlier right down here,
right?

224
00:12:36.184 --> 00:12:39.770
We do this whole metadata call is okay,
if it's not okay,

225
00:12:39.770 --> 00:12:43.081
then we clearly need to do
something with it, right?

226
00:12:43.081 --> 00:12:49.794
So if this path is not okay,
then we need to do a creation of it.

227
00:12:49.794 --> 00:12:55.424
So I believe it's an fs that
there's some sort of maker, okay,

228
00:12:55.424 --> 00:13:01.073
wrong one creator.all recursively
creates the directories.

229
00:13:01.073 --> 00:13:03.090
There we go,
that's the one we're looking for.

230
00:13:03.090 --> 00:13:04.150
So let's do it.

231
00:13:04.150 --> 00:13:08.610
And let's pass in the p and of course,
we're not handling the result.

232
00:13:08.610 --> 00:13:12.520
So awesome, we were correct, great
assumption from everybody in the class.

233
00:13:12.520 --> 00:13:14.910
Make sure we always use a result object.

234
00:13:14.910 --> 00:13:17.462
Perfect, we can just hit
it with the question mark,

235
00:13:17.462 --> 00:13:21.520
return it if it's bad and now, oops,
I just may have deleted something.

236
00:13:21.520 --> 00:13:22.870
I'm not exactly sure.

237
00:13:22.870 --> 00:13:23.580
No, I don't think I did.

238
00:13:25.430 --> 00:13:26.700
All right, awesome.

239
00:13:26.700 --> 00:13:29.230
So now all we have to do,
is just write the file out.

240
00:13:29.230 --> 00:13:31.806
So let's go std::fs::write, and

241
00:13:31.806 --> 00:13:35.810
this will write a slice as
the entire contents of a file.

242
00:13:35.810 --> 00:13:38.890
Perfect, documentation in
hand makes life a lot easier.

243
00:13:38.890 --> 00:13:43.280
Let's use simply the past self config and
of course the contents.

244
00:13:43.280 --> 00:13:44.060
What is the contents?

245
00:13:44.060 --> 00:13:46.070
Well, it's gonna be
the JSON encoded stuff.

246
00:13:46.070 --> 00:13:50.430
So again, much like go,
we have to do this kind of dance, right?

247
00:13:50.430 --> 00:13:53.782
So I'm gonna grab the contents,

248
00:13:53.782 --> 00:14:00.080
let contents = serde_json
to string self data, right?

249
00:14:00.080 --> 00:14:04.150
And throw in one of those, so
why does this work so well?

250
00:14:04.150 --> 00:14:07.433
Well again, we added the serialize,
deserialize.

251
00:14:07.433 --> 00:14:09.122
So everything just works behind the hood.

252
00:14:09.122 --> 00:14:12.070
We don't even have to
know what's going on.

253
00:14:12.070 --> 00:14:15.540
Awesome, and
then of course throw in the contents.

254
00:14:15.540 --> 00:14:18.634
This thing is probably gonna say, hey,
use this whole borrowing thing, and

255
00:14:18.634 --> 00:14:20.330
we have results that are unused.

256
00:14:20.330 --> 00:14:22.169
Fantastic, again you should see it,

257
00:14:22.169 --> 00:14:25.684
I mean this should make sense you should
be able to reason about this now.

258
00:14:25.684 --> 00:14:28.458
Especially now that we've had
these value issues come up.

259
00:14:28.458 --> 00:14:30.784
Why would I need to give
this thing the value?

260
00:14:30.784 --> 00:14:33.530
I should just give it a reference, it can
read the reference, it doesn't need to do

261
00:14:33.530 --> 00:14:35.942
anything with the reference,
it doesn't need to store the reference.

262
00:14:35.942 --> 00:14:38.703
It just needs it while it's
doing the single operation.

263
00:14:38.703 --> 00:14:43.512
So hopefully now this makes a lot more
sense why sometimes you'll see me throwing

264
00:14:43.512 --> 00:14:47.474
out an ampersand sign because we've
now experienced the full Baro

265
00:14:47.474 --> 00:14:50.674
checkers evil and
how painful it can be, fantastic.

266
00:14:50.674 --> 00:14:51.449
We've done it.

267
00:14:51.449 --> 00:14:52.528
We've written save.

268
00:14:52.528 --> 00:14:53.807
I think we've done everything.

269
00:14:53.807 --> 00:14:57.228
Once again, just let's just
do like a quick cargo build.

270
00:14:57.228 --> 00:15:01.683
[SOUND] All right, let's find out.

271
00:15:01.683 --> 00:15:04.035
Did we do this one, first try.

272
00:15:04.035 --> 00:15:07.448
So of course, let's go here,
let's go projector config.

273
00:15:07.448 --> 00:15:10.530
Let's use our present
working directory again.

274
00:15:10.530 --> 00:15:13.060
And let's call it conf.json.

275
00:15:14.330 --> 00:15:15.990
And let's just do an empty one.

276
00:15:15.990 --> 00:15:17.550
Of course, what do we get?

277
00:15:17.550 --> 00:15:18.710
Well, it says you can't do that.

278
00:15:18.710 --> 00:15:19.900
It's very, very smart.

279
00:15:19.900 --> 00:15:22.719
So, in a lot of CLI programs,
you have to do this double dash,

280
00:15:22.719 --> 00:15:25.950
which means that the parser will
quit parsing at that point.

281
00:15:25.950 --> 00:15:29.990
And all further things will be passed
into the child program that's being ran.

282
00:15:29.990 --> 00:15:31.430
Because obviously we're not running cargo.

283
00:15:31.430 --> 00:15:35.290
We're actually running the binary
projector, so there we go.

284
00:15:35.290 --> 00:15:39.265
It printed out this beautiful empty
object along with a bunch of it,

285
00:15:39.265 --> 00:15:41.929
warnings we're gonna ignore the warnings.

286
00:15:41.929 --> 00:15:46.042
And so now we can go like this,
a foo, nothing, awesome.

287
00:15:46.042 --> 00:15:48.430
I mean now I kind of
want to get rid of them.

288
00:15:48.430 --> 00:15:50.850
Cargo clean, can we do that?

289
00:15:50.850 --> 00:15:54.288
Cargo, I think it's fix, right?

290
00:15:54.288 --> 00:15:56.346
Is it fix?

291
00:15:56.346 --> 00:15:58.391
There's like this thing that
will remove all the warnings.

292
00:15:58.391 --> 00:16:00.560
You have to do dash dash dirty.

293
00:16:00.560 --> 00:16:03.750
But my guess is it's,
I didn't do the right thing.

294
00:16:04.820 --> 00:16:06.175
Let's see.

295
00:16:08.774 --> 00:16:10.557
Okay, thank you for all that.

296
00:16:10.557 --> 00:16:12.870
All right, so let's run this thing.

297
00:16:12.870 --> 00:16:15.970
Perfect, it didn't print anything out,
awesome.

298
00:16:15.970 --> 00:16:19.040
Let's try to do add foo bar.

299
00:16:19.040 --> 00:16:20.500
So we've added foo bar.

300
00:16:20.500 --> 00:16:23.530
And now let's try again and
let's look at foo.

301
00:16:23.530 --> 00:16:24.580
There it is.

302
00:16:24.580 --> 00:16:25.790
It's beautiful.

303
00:16:25.790 --> 00:16:27.100
It's wonderful.

304
00:16:27.100 --> 00:16:28.490
It's fantastic.

305
00:16:28.490 --> 00:16:33.510
Let's take std error and
redirect it to dev, null.

306
00:16:33.510 --> 00:16:36.530
And now look it's just bar,
it's fantastic.

307
00:16:36.530 --> 00:16:38.100
It's beautiful, all right.

308
00:16:38.100 --> 00:16:38.980
I feel I already said that

