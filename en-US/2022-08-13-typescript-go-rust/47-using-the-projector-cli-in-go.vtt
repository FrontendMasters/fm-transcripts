WEBVTT

1
00:00:00.510 --> 00:00:02.480
It should feel very exciting here.

2
00:00:02.480 --> 00:00:04.890
We have finished off
the TypeScript version,

3
00:00:04.890 --> 00:00:07.190
now it's time to do the same thing but
in Go.

4
00:00:07.190 --> 00:00:09.610
Again, this should go pretty dang quick.

5
00:00:09.610 --> 00:00:14.030
No pun, actually intentional there.

6
00:00:14.030 --> 00:00:16.626
It just works out, that's how good Go is,

7
00:00:16.626 --> 00:00:20.020
it just naturally can be
a pun without even trying.

8
00:00:20.020 --> 00:00:22.710
All right, so
let's go to our projector main.

9
00:00:22.710 --> 00:00:25.803
It looks like we actually went
a little bit further in this file,

10
00:00:25.803 --> 00:00:28.160
we at least have up to
the config being used.

11
00:00:28.160 --> 00:00:29.390
So let's do the same thing.

12
00:00:29.390 --> 00:00:31.630
Let's create the projector.

13
00:00:31.630 --> 00:00:35.820
After creating the projector,
let's do the one of the three operations.

14
00:00:35.820 --> 00:00:36.956
And then that's it.

15
00:00:36.956 --> 00:00:38.540
We're gonna have to
create the little save.

16
00:00:38.540 --> 00:00:40.755
So proj equals, of course,
projector, at this point,

17
00:00:40.755 --> 00:00:42.680
I've already forgot what it was called.

18
00:00:42.680 --> 00:00:43.250
There it is.

19
00:00:43.250 --> 00:00:45.140
It's called the config, perfect.

20
00:00:45.140 --> 00:00:47.745
And now we can go like this,
if config, by the way,

21
00:00:47.745 --> 00:00:50.240
have you spotted where
Rust is gonna blow up yet?

22
00:00:52.400 --> 00:00:55.033
I've asked about the exact
same point twice now.

23
00:00:55.033 --> 00:00:56.455
So just think about this,

24
00:00:56.455 --> 00:01:00.440
we've programmed them all the same
way using all the same types.

25
00:01:00.440 --> 00:01:02.230
Do you see where Rust
is gonna blow up yet?

26
00:01:03.760 --> 00:01:06.920
If you do, if you even think you might,
try to take a guess.

27
00:01:06.920 --> 00:01:09.972
So I wanted to add this in because I
actually think it's a pretty fun game,

28
00:01:09.972 --> 00:01:11.840
you're exercising your thought.

29
00:01:11.840 --> 00:01:15.842
Remember, what makes Rust hard,
it's about who owns a value, correct?

30
00:01:17.988 --> 00:01:22.943
So, look at how we're
passing around values.

31
00:01:22.943 --> 00:01:25.229
&gt;&gt; Config and the borrowed checker.

32
00:01:25.229 --> 00:01:26.650
&gt;&gt; [SOUND] All right, so yes,

33
00:01:26.650 --> 00:01:30.861
the config is gonna become a very high
point of contention when we get to Rust.

34
00:01:30.861 --> 00:01:32.882
So let's find out what
happens at the very end.

35
00:01:32.882 --> 00:01:33.764
Very, very exciting.

36
00:01:33.764 --> 00:01:36.897
All right, for now, let's pretend
like our problems don't exist,

37
00:01:36.897 --> 00:01:39.350
that's how I live my personal life,
let's do it now.

38
00:01:39.350 --> 00:01:43.108
All right, projector,
if it's projector.Print, or remember,

39
00:01:43.108 --> 00:01:46.520
we kinda have this two-stage operation,
right?

40
00:01:46.520 --> 00:01:54.110
If length(config.args) == 0, well,
we need to print out everything.

41
00:01:54.110 --> 00:01:57.330
So let's just use our beautiful fmt.Print.

42
00:01:57.330 --> 00:02:00.544
Not even newline,
just a straight up print,

43
00:02:00.544 --> 00:02:03.431
print a beautiful s here, do a little v.

44
00:02:03.431 --> 00:02:06.320
And of course, we need to do
something more than this, right?

45
00:02:06.320 --> 00:02:09.630
We can't just print it out,
we can't just JSON stringify it.

46
00:02:09.630 --> 00:02:13.680
So unfortunately,
we have to do this whole thing here,

47
00:02:13.680 --> 00:02:19.021
where we actually get out the value,
then we have to marshal it into JSON or

48
00:02:19.021 --> 00:02:22.830
into byte array and
then convert that into a string.

49
00:02:22.830 --> 00:02:24.290
So let's just do that right now.

50
00:02:24.290 --> 00:02:29.710
Let's first start off with data :=,
of course, proj.getValueAll.

51
00:02:29.710 --> 00:02:33.503
Now that we have that,
we need to do a little error, and

52
00:02:33.503 --> 00:02:37.469
I believe it's json.Marshal,
right, is Marshaler?

53
00:02:37.469 --> 00:02:39.287
Whoops, it's not Marshaler.

54
00:02:39.287 --> 00:02:41.480
My neighbor's name is Marshall.

55
00:02:41.480 --> 00:02:45.727
Let's me see, Marshal returns
that JSON encoding of v, right?

56
00:02:45.727 --> 00:02:48.081
Okay, good, so we're gonna go D.

57
00:02:48.081 --> 00:02:52.811
And of course, it returns an error, so
we do need to handle this error, right?

58
00:02:52.811 --> 00:02:58.602
So we're gonna have the JSON string
right here, and there we go.

59
00:02:58.602 --> 00:03:00.992
So if we have an error,
what should we do here?

60
00:03:00.992 --> 00:03:05.626
My guess is we should probably fatal,
cuz how else?

61
00:03:05.626 --> 00:03:09.155
If that happens,
which it should never happen.

62
00:03:09.155 --> 00:03:12.785
Really, if this was Rust, we could
put some sort of unreachable, there's

63
00:03:12.785 --> 00:03:16.601
an unreachable macro that just says this
line of coach should never be reached.

64
00:03:16.601 --> 00:03:18.165
Cuz that's effectively what it is.

65
00:03:21.153 --> 00:03:25.750
It's just like, this line should
never be reached, all right.

66
00:03:25.750 --> 00:03:27.275
I'm sure there's a version of this in Go.

67
00:03:27.275 --> 00:03:29.501
I just don't know it off the top
of my head, so there we go.

68
00:03:29.501 --> 00:03:33.138
So let's go like this,
string(jsonString), beautiful.

69
00:03:33.138 --> 00:03:35.950
Because if you don't know,
jsonString, of course,

70
00:03:35.950 --> 00:03:39.632
is a byte array, it's a UTF-8
encoded byte array or likely UTF-8.

71
00:03:39.632 --> 00:03:46.280
I assume JSON can't have non UTF-8, I
assume it has to be UTF-8 stuff in there.

72
00:03:46.280 --> 00:03:48.030
And so that should just work out.

73
00:03:48.030 --> 00:03:49.540
Awesome, we've just crushed it.

74
00:03:50.770 --> 00:03:51.950
We're done with that side of the print.

75
00:03:53.140 --> 00:03:56.318
Again, this whole if else thing,
I don't really like if elses.

76
00:03:56.318 --> 00:03:58.944
Let's go proj.GetValue.

77
00:03:58.944 --> 00:04:04.222
And then let's just simply
get the config.Args[0],

78
00:04:04.222 --> 00:04:07.930
value and ok, remember that?

79
00:04:07.930 --> 00:04:11.508
Fantastic, right,
which means we can actually just go if,

80
00:04:11.508 --> 00:04:12.990
pop that thing up there.

81
00:04:14.260 --> 00:04:16.800
Do a little semicolon,
hit the ok on there.

82
00:04:16.800 --> 00:04:19.160
And so
now we also have our other condition.

83
00:04:19.160 --> 00:04:22.474
Very nice, we don't have to have yet more
if statements flying around everywhere.

84
00:04:22.474 --> 00:04:27.470
If that's the case, let's just yank that,
paste that, and of course,

85
00:04:27.470 --> 00:04:29.577
do a little value right there.

86
00:04:29.577 --> 00:04:32.990
Yes, all right, there we go.

87
00:04:32.990 --> 00:04:35.470
Operation print, fantastic.

88
00:04:35.470 --> 00:04:36.923
Else if, they don't like that.

89
00:04:36.923 --> 00:04:38.780
They do not like that.

90
00:04:38.780 --> 00:04:41.350
I think last time I just used
a series of if statements.

91
00:04:41.350 --> 00:04:45.050
I don't know why I don't like else if, it
just feels sometimes really frustrating.

92
00:04:45.050 --> 00:04:47.470
So we're just gonna keep
on just not using it.

93
00:04:47.470 --> 00:04:48.070
Why not?
I don't know.

94
00:04:48.070 --> 00:04:49.995
It's one of those weird things.

95
00:04:49.995 --> 00:04:50.763
Let's see, there we go.

96
00:04:50.763 --> 00:04:51.663
Let's have an Add.

97
00:04:51.663 --> 00:04:54.920
So again, we're gonna have to write
the save operation here shortly.

98
00:04:54.920 --> 00:04:58.150
It should be pretty much as
simple as the TypeScript version.

99
00:04:58.150 --> 00:05:05.358
So let's jump in here and go,
let's see, proj.SetValue and

100
00:05:05.358 --> 00:05:11.880
then go config.Args[0], config.Args[1].

101
00:05:11.880 --> 00:05:14.890
Fantastic, right,
we have now set the value.

102
00:05:14.890 --> 00:05:17.130
Now we just simply need to save.

103
00:05:17.130 --> 00:05:18.820
Save is not currently in operation.

104
00:05:18.820 --> 00:05:21.210
I think we're all okay with that.

105
00:05:21.210 --> 00:05:22.330
Exact same thing here.

106
00:05:22.330 --> 00:05:28.590
Remove that fv up, RemoveValue.

107
00:05:28.590 --> 00:05:33.439
Awesome, so now let's just write
the final thing we're gonna have to write

108
00:05:33.439 --> 00:05:35.657
today in Go, the save operation.

109
00:05:35.657 --> 00:05:38.761
(p *Projector), Save().

110
00:05:38.761 --> 00:05:42.370
Now, what are the chances
Save's gonna return an error?

111
00:05:42.370 --> 00:05:44.960
Well, it's actually gonna be pretty high.

112
00:05:44.960 --> 00:05:46.920
So let's just throw
the word error in there.

113
00:05:46.920 --> 00:05:50.032
I just would assume that an error can be
returned at any moment here because it's

114
00:05:50.032 --> 00:05:52.220
Go and we're working with the file system.

115
00:05:52.220 --> 00:05:53.650
So let's first go like this.

116
00:05:54.770 --> 00:06:00.880
Will go base or dir, of course,
is gonna be p.config.config and

117
00:06:00.880 --> 00:06:06.580
then we're gonna go path,
just like earlier, and do Dir.

118
00:06:06.580 --> 00:06:12.520
Remember that, that just gives
us the directory to our config.

119
00:06:12.520 --> 00:06:15.050
Once we have that, we need to see,
does this thing exist?

120
00:06:15.050 --> 00:06:18.000
Now with Go, of course,

121
00:06:18.000 --> 00:06:23.343
it's going to be err := os.Stat, right?

122
00:06:23.343 --> 00:06:24.403
Yeah, stat.

123
00:06:24.403 --> 00:06:27.160
And then we're gonna pass in,
of course, the dir.

124
00:06:28.480 --> 00:06:30.840
And now we need to find out,
does this thing not exist?

125
00:06:30.840 --> 00:06:33.946
Well, there's a function
called os.IsNotExist,

126
00:06:33.946 --> 00:06:35.675
[LAUGH] it's beautiful name.

127
00:06:35.675 --> 00:06:37.048
Tell me that is not a beautiful name.

128
00:06:37.048 --> 00:06:41.712
IsNotExist, there we go, we have it,
it even has the bang inside of the name,

129
00:06:41.712 --> 00:06:42.360
awesome.

130
00:06:42.360 --> 00:06:45.790
So we've now found this thing
doesn't exist, let's create it.

131
00:06:45.790 --> 00:06:50.075
os.Mkdir, and those they have two
have them, Mkdir and MkdirAll.

132
00:06:50.075 --> 00:06:54.644
This one simply makes all the directories
recursively, that's the one we want.

133
00:06:54.644 --> 00:06:58.339
And so let's do that and
we're gonna go dir, and of course we

134
00:06:58.339 --> 00:07:02.556
need the permissions, a permission
of course is gonna be use octal.

135
00:07:02.556 --> 00:07:06.124
In coding, if you don't know what octal
encoding is, it just works in, I believe,

136
00:07:06.124 --> 00:07:08.260
TypeScript as well, and
in fact most languages.

137
00:07:08.260 --> 00:07:12.930
If you start a number with 0, a leading 0,
it's actually a base 8 number.

138
00:07:12.930 --> 00:07:15.500
Just like if you do 0x,
it's a base 16 number.

139
00:07:15.500 --> 00:07:18.528
This one's a base 8 number,
so I'm just gonna go 755,

140
00:07:18.528 --> 00:07:20.901
let's give some great permissions, right?

141
00:07:20.901 --> 00:07:22.170
That's just great permissions.

142
00:07:22.170 --> 00:07:24.350
Everyone's really happy
about those permissions.

143
00:07:24.350 --> 00:07:26.880
I know plenty of permissions and
those are great permissions.

144
00:07:26.880 --> 00:07:27.876
All right, so let's do this.

145
00:07:29.821 --> 00:07:35.870
If there is an error, well, we need
the return error, right, cuz this is bad.

146
00:07:35.870 --> 00:07:38.790
Non-boolean, does not equal nil, right?

147
00:07:38.790 --> 00:07:42.225
So, if we found a problem,
we couldn't make the directory,

148
00:07:42.225 --> 00:07:44.018
that's just all there is to it.

149
00:07:44.018 --> 00:07:47.268
Notice that we don't even really, I'm not
sure if we really even get the chance.

150
00:07:47.268 --> 00:07:51.973
I assume path.MakedirSync will just
throw an error if it can't do it.

151
00:07:51.973 --> 00:07:54.453
That's my assumption, so
we're just gonna assume that's true.

152
00:07:54.453 --> 00:07:56.795
Here we have to handle it right away.

153
00:07:56.795 --> 00:07:58.445
Awesome, so we have the directory.

154
00:07:58.445 --> 00:07:59.395
It has been made.

155
00:07:59.395 --> 00:08:00.805
Let's just simply write out the file.

156
00:08:00.805 --> 00:08:02.545
We don't need to do anything fancy here.

157
00:08:02.545 --> 00:08:06.187
We can just simply do a WriteFile,
which takes the path, the bytes, and

158
00:08:06.187 --> 00:08:07.962
of course the permissions.

159
00:08:07.962 --> 00:08:12.567
So let's do this again, which means
we need the JSON encode, correct?

160
00:08:12.567 --> 00:08:16.033
Correct, so let's go like this,

161
00:08:16.033 --> 00:08:21.060
jsonString, err := json, is it Marshall?

162
00:08:21.060 --> 00:08:23.860
Yeah, it is Marshal,
always gets me every time.

163
00:08:23.860 --> 00:08:28.705
I don't know why that confuses me,
the difference between Marshal and,

164
00:08:28.705 --> 00:08:29.731
anyways I'm.

165
00:08:33.786 --> 00:08:35.223
There we go, beautiful.

166
00:08:35.223 --> 00:08:40.523
We have the error handled, we handled the
error if we can't do that, p.config.Config

167
00:08:40.523 --> 00:08:45.840
and of course pass in the jsonString, and
everybody's favorite permission, 755.

168
00:08:45.840 --> 00:08:51.349
I was gonna make it 420, but I feel like
that's not a very useful permission set,

169
00:08:51.349 --> 00:08:53.614
so we're gonna keep it as 755.

170
00:08:54.680 --> 00:08:59.790
Awesome, and of course,
whoopsies, return nil.

171
00:08:59.790 --> 00:09:01.160
Awesome, we have done it.

172
00:09:01.160 --> 00:09:02.950
We've written the save method.

173
00:09:02.950 --> 00:09:04.340
It's very simple to do.

174
00:09:04.340 --> 00:09:10.278
And now we need to do, of course,
the [SOUND] part that's gonna be,

175
00:09:10.278 --> 00:09:16.659
it feels like we got a lot of pressure
here to perform, so let's get it.

176
00:09:16.659 --> 00:09:19.930
So the first thing you wanna do
is let's provide a config and

177
00:09:19.930 --> 00:09:24.790
let's use our present working directory
and let's just do conf.json, right?

178
00:09:24.790 --> 00:09:27.431
And so after that,
let's just print everything out.

179
00:09:27.431 --> 00:09:29.020
Okay, awesome.

180
00:09:29.020 --> 00:09:30.410
By the way, that was really fast.

181
00:09:30.410 --> 00:09:33.900
Notice that it just both compiled it and
ran it, very impressive.

182
00:09:33.900 --> 00:09:36.470
So let's do a foo, nothing.

183
00:09:36.470 --> 00:09:39.619
Awesome, let's do an add foo bar.

184
00:09:39.619 --> 00:09:42.476
I think that's just a new line, yeah.

185
00:09:42.476 --> 00:09:45.420
Okay, that's just a new line, luckily
that was just new line by my cursor,

186
00:09:45.420 --> 00:09:47.171
not by the program, or
else I'd be very sad.

187
00:09:47.171 --> 00:09:48.436
Here, let's just do it right there.

188
00:09:48.436 --> 00:09:50.498
Perfect, okay.

189
00:09:50.498 --> 00:09:53.073
Go run again.

190
00:09:55.029 --> 00:09:57.363
All right, we're geniuses,
we've done this.

