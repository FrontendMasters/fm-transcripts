WEBVTT

1
00:00:00.000 --> 00:00:02.940
All right, so now, of course,
what's the vegetables in this case?

2
00:00:02.940 --> 00:00:05.430
Well, it's testing, let's do some testing.

3
00:00:05.430 --> 00:00:06.810
We're gonna do something very,
very similar.

4
00:00:06.810 --> 00:00:12.050
We'll do projector_test.go, and we're
gonna do the whole package projector_test.

5
00:00:12.050 --> 00:00:15.224
Remember, we don't want
to test private stuff,

6
00:00:15.224 --> 00:00:19.314
we just wanna test the public stuff,
make sure it all works out.

7
00:00:19.314 --> 00:00:23.360
And we already know ahead of time
that we're gonna do something very,

8
00:00:23.360 --> 00:00:27.062
very similar that we did in JavaScript,
which is to create a easy

9
00:00:27.062 --> 00:00:30.991
way to create a projector and
an easy way to create the data, right?

10
00:00:30.991 --> 00:00:33.250
Just make that part pretty fast.

11
00:00:33.250 --> 00:00:34.232
So let's do that now.

12
00:00:34.232 --> 00:00:37.823
Let's go func getData.

13
00:00:37.823 --> 00:00:41.339
And this thing's just gonna return a data,
right?

14
00:00:41.339 --> 00:00:45.478
And we'll do one of those, and we have
to go projector.Data, cuz remember,

15
00:00:45.478 --> 00:00:47.815
we don't exist in the same file, correct?

16
00:00:47.815 --> 00:00:49.850
And it's not an ampersand sign.

17
00:00:49.850 --> 00:00:51.269
It's that, because it's a pointer.

18
00:00:51.269 --> 00:00:54.010
There we go, importing your file,
we're looking good.

19
00:00:54.010 --> 00:00:55.492
We're gonna be doing testing.

20
00:00:55.492 --> 00:00:59.730
So to catch everyone back up, I'm gonna
jump over to my previous project,

21
00:00:59.730 --> 00:01:02.961
the TypeScript one, and
go to projector right here, and

22
00:01:02.961 --> 00:01:04.600
look at what I do right here.

23
00:01:04.600 --> 00:01:06.272
I create a projector.

24
00:01:06.272 --> 00:01:10.236
I create the data and
then I can create the projector itself,

25
00:01:10.236 --> 00:01:14.995
makes it really simple, because then
my testing logic looks like this.

26
00:01:14.995 --> 00:01:16.378
That's pretty nice, right?

27
00:01:16.378 --> 00:01:21.259
I like that, that's kind of what I want
to see, so we'll do the same thing.

28
00:01:21.259 --> 00:01:24.898
All right, we're gonna jump in here and
we're gonna create a piece of data.

29
00:01:24.898 --> 00:01:30.235
So let's go like this,
let's return a projector data.

30
00:01:30.235 --> 00:01:33.367
And inside of here, we need a projector,

31
00:01:33.367 --> 00:01:37.138
because any JSON encoded
field must be exported.

32
00:01:37.138 --> 00:01:38.197
That's just a requirement,

33
00:01:38.197 --> 00:01:40.325
that's why we can just directly
manipulate it right here.

34
00:01:40.325 --> 00:01:41.597
So we need to do, of course,

35
00:01:41.597 --> 00:01:45.045
that good old fashioned
map[string]map[string][string], right?

36
00:01:45.045 --> 00:01:47.980
Very classic,
I almost named my kid that, in fact,

37
00:01:47.980 --> 00:01:50.193
it's such a standard operation here.

38
00:01:50.193 --> 00:01:55.265
So the nice part about this is that Go,
I think, does a really great job for being

39
00:01:55.265 --> 00:02:00.589
a strict kinda type language, being able
to handle these things, cuz watch this.

40
00:02:00.589 --> 00:02:04.247
I can go like this, that,
and then I can just do this.

41
00:02:04.247 --> 00:02:08.599
And the reason why that works out is it's
able to infer that this thing is supposed

42
00:02:08.599 --> 00:02:10.397
to be a map of [string]string.

43
00:02:10.397 --> 00:02:15.186
So I could explicitly do [string]string
and then do that, but it's gonna say, hey,

44
00:02:15.186 --> 00:02:18.615
we already know,
we already know what you're talking about,

45
00:02:18.615 --> 00:02:20.120
you don't need to do that.

46
00:02:20.120 --> 00:02:24.009
I'm also surprised it doesn't just had
error on you because that just seems like

47
00:02:24.009 --> 00:02:25.676
a more Go type way of doing things.

48
00:02:25.676 --> 00:02:27.075
So let's do the exact same thing.

49
00:02:27.075 --> 00:02:28.701
In fact,
we're gonna do such the exact same thing.

50
00:02:28.701 --> 00:02:32.254
I'm actually gonna hop over to
my previous project here and

51
00:02:32.254 --> 00:02:35.734
just make sure that all the data
is effectively one to one,

52
00:02:35.734 --> 00:02:38.380
because I don't want to
mess any of that up.

53
00:02:38.380 --> 00:02:40.517
Awesome, so I'm gonna hop back.

54
00:02:40.517 --> 00:02:43.578
Delete that and paste it in.

55
00:02:43.578 --> 00:02:44.380
There we go.

56
00:02:44.380 --> 00:02:46.904
We have the same data, and
look how awesome that was also.

57
00:02:46.904 --> 00:02:48.816
I was able to just directly copy and
paste it.

58
00:02:48.816 --> 00:02:51.966
So syntax, not too much different,
I can really get behind that.

59
00:02:51.966 --> 00:02:54.979
I like anything that has ease of creation,
cuz I feel like,

60
00:02:54.979 --> 00:02:59.273
especially when it comes to testing, it's
just such a pain if you don't have this.

61
00:02:59.273 --> 00:03:02.738
All right, so
let's create the old getProjector.

62
00:03:02.738 --> 00:03:04.989
It's gonna return a projector back out.

63
00:03:04.989 --> 00:03:07.906
And of course, we need to provide
a present working directory,

64
00:03:07.906 --> 00:03:11.699
which will be a string, cuz remember, just
like our previous one, what did we do?

65
00:03:11.699 --> 00:03:15.053
Well, we went down here and
we just inlined a config,

66
00:03:15.053 --> 00:03:19.692
cuz during these operations,
we only need a present working directory.

67
00:03:19.692 --> 00:03:22.294
We don't care about the args,
we don't care about the operation,

68
00:03:22.294 --> 00:03:25.320
we don't care about the present working
directory, or we do care about that.

69
00:03:25.320 --> 00:03:26.735
We don't care about the config.

70
00:03:26.735 --> 00:03:29.543
So we could create effectively
the identical thing.

71
00:03:29.543 --> 00:03:34.282
In fact, I could even yank this entire
thing, bring it in here, paste it in, and

72
00:03:34.282 --> 00:03:37.657
just do a slight modification,
and it's going to work.

73
00:03:37.657 --> 00:03:42.311
Projector dot that, awesome, and

74
00:03:42.311 --> 00:03:48.215
then let's do a projector.Config is this.

75
00:03:48.215 --> 00:03:55.474
And so, of course, Args is gonna be
an empty string array, so string that.

76
00:03:57.026 --> 00:04:02.105
Operation, of course,
is just gonna be projector.print.

77
00:04:02.105 --> 00:04:06.930
Present working directory, of course,
can be present working directory, pwd, and

78
00:04:06.930 --> 00:04:08.722
config can pretty much be that.

79
00:04:08.722 --> 00:04:10.098
And so what do we have left?

80
00:04:10.098 --> 00:04:11.708
Just capitalizing these things.

81
00:04:11.708 --> 00:04:16.098
And now, the data, the last part,
if you remember from our previous one,

82
00:04:16.098 --> 00:04:18.276
we also allowed parsing in the data.

83
00:04:18.276 --> 00:04:23.176
So we'll just do that here,
we'll go data is,

84
00:04:23.176 --> 00:04:28.081
of course a data, a projector.Data, right?

85
00:04:28.081 --> 00:04:31.020
And there we go,
too many arguments in this projector.

86
00:04:31.020 --> 00:04:36.850
Interesting, must have messed that up,
because I don't have little right here.

87
00:04:36.850 --> 00:04:39.930
And so that means this data is data,
right?

88
00:04:39.930 --> 00:04:42.196
I just realized I was trying
to new it up an object.

89
00:04:42.196 --> 00:04:45.064
You can't really new this
up like an object, right,

90
00:04:45.064 --> 00:04:47.179
because it's actually just a config.

91
00:04:47.179 --> 00:04:50.250
There we go, my bad on that one.

92
00:04:50.250 --> 00:04:53.980
And of course, yep, just standard.

93
00:04:53.980 --> 00:04:55.860
Is it that?

94
00:04:55.860 --> 00:04:58.470
We can't just new this up,
what do we do wrong here?

95
00:04:58.470 --> 00:05:00.098
Well, look at what we did wrong.

96
00:05:00.098 --> 00:05:02.058
This is a classic Go problem, right?

97
00:05:02.058 --> 00:05:04.001
You'll want to be able to
new these things up, but

98
00:05:04.001 --> 00:05:06.566
if you don't have access to these
privates, you can't do that.

99
00:05:06.566 --> 00:05:09.251
So we have one of two ways
in which we can solve this.

100
00:05:09.251 --> 00:05:12.490
I can either solve this by
making these things public.

101
00:05:12.490 --> 00:05:17.370
But if you really don't wanna do that,
another simple way is just simply,

102
00:05:17.370 --> 00:05:19.545
just createProjector, right?

103
00:05:19.545 --> 00:05:23.163
And this thing can take in a config,
and it can take in a data, and

104
00:05:23.163 --> 00:05:25.178
it can return back out a projector.

105
00:05:25.178 --> 00:05:30.402
So much like our little default one down
here, we can also have one that takes in

106
00:05:30.402 --> 00:05:35.640
a data, which means our default one could
actually use this exact same thing.

107
00:05:35.640 --> 00:05:39.834
So let me go, oopsies,
I'll actually changed files.

108
00:05:39.834 --> 00:05:43.970
So our default one could actually just
use this method if we really wanted to.

109
00:05:43.970 --> 00:05:47.917
And so
that just will simply return a projector,

110
00:05:47.917 --> 00:05:54.955
which needs to be this thing with config:
config and data: data, and always do that.

111
00:05:54.955 --> 00:05:56.446
And so now, we have this nice clean thing.

112
00:05:56.446 --> 00:06:00.037
So the thing we built over in our
test file, we just can't do, right?

113
00:06:00.037 --> 00:06:03.230
We're not able to access these variables,
and we kinda wanna keep it that way.

114
00:06:03.230 --> 00:06:05.680
We really wanna try to keep
this a little bit more clean.

115
00:06:05.680 --> 00:06:10.870
And so instead of doing a projector,
we'll just do CreateProjector.

116
00:06:10.870 --> 00:06:13.590
And we don't need an ampersand sign.

117
00:06:13.590 --> 00:06:17.170
And so from here,
we can just pass in a config, right?

118
00:06:17.170 --> 00:06:20.446
And then we can just pass in a data.

119
00:06:20.446 --> 00:06:23.590
And so now, we just used
a method to do it instead, right?

120
00:06:23.590 --> 00:06:24.674
So that feels pretty good.

121
00:06:24.674 --> 00:06:29.139
Hopefully everyone kinda followed
along with that transformation.

122
00:06:29.139 --> 00:06:32.450
I wanted everyone to kinda feel some
of the pain when it comes to creating

123
00:06:32.450 --> 00:06:33.175
these things.

124
00:06:33.175 --> 00:06:35.560
If you goof up on the parameters,
how can you get around it?

125
00:06:35.560 --> 00:06:39.638
And I do think it's probably best to keep
those private if we were to build this

126
00:06:39.638 --> 00:06:41.332
properly or in a larger system,

127
00:06:41.332 --> 00:06:44.505
cuz we don't really want
people accessing those, right?

128
00:06:44.505 --> 00:06:47.271
It's just not how our program
was intended to be designed.

129
00:06:47.271 --> 00:06:48.120
So there we go.

130
00:06:48.120 --> 00:06:51.115
So now,
it's just time to do our actual testing.

131
00:06:51.115 --> 00:06:53.928
So luckily, our LSP is gonna help us here.

132
00:06:53.928 --> 00:06:55.610
I'm gonna start it off with the word test.

133
00:06:55.610 --> 00:06:58.740
And it's gonna be like, yeah, don't worry,

134
00:06:58.740 --> 00:07:02.456
I know what you want,
you want this type of method, awesome.

135
00:07:02.456 --> 00:07:04.479
So we need to start testing our projector.

136
00:07:04.479 --> 00:07:07.889
So we're gonna do a little bit
less testing just because it's so

137
00:07:07.889 --> 00:07:08.971
very verbose in Go.

138
00:07:08.971 --> 00:07:12.557
We could create more meta methods if we
wanted to, but again, using a library to

139
00:07:12.557 --> 00:07:15.606
help you, there's plenty of
different libraries you can try out,

140
00:07:15.606 --> 00:07:17.659
lots of cool assertion
libraries out there.

141
00:07:17.659 --> 00:07:20.329
So we're just gonna go like this,
TestGetValue.

142
00:07:20.329 --> 00:07:24.720
We'll just do a get value test, we'll do
a set value test, and a remove value test.

143
00:07:24.720 --> 00:07:29.910
We'll just kinda keep it pretty light just
for the sake of time, speed, and momentum.

144
00:07:29.910 --> 00:07:33.985
So let's start off by
creating a projector.

145
00:07:33.985 --> 00:07:38.105
So projector equals,
did I call getProjector?

146
00:07:38.105 --> 00:07:39.405
I think I did.

147
00:07:39.405 --> 00:07:44.397
And here, all we have to
provide on this one, of course,

148
00:07:44.397 --> 00:07:47.528
is a string and the projector data.

149
00:07:47.528 --> 00:07:50.145
So let's go data and go getData.

150
00:07:50.145 --> 00:07:53.943
Awesome, and so now all we have to do
is do our present working directory

151
00:07:53.943 --> 00:07:57.950
of /foo/bar, cuz that's kind of what
we did, and then pass in our data.

152
00:07:57.950 --> 00:08:00.530
And now,
we actually have a projector, right?

153
00:08:00.530 --> 00:08:03.210
So now, we can do the test itself.

154
00:08:03.210 --> 00:08:06.546
So we could abstract this out pretty
easily, but we're just not going to.

155
00:08:06.546 --> 00:08:12.250
So we're gonna go like this, value,
ok:= proj.GetValue, and let's pass in foo.

156
00:08:12.250 --> 00:08:16.199
So we should expect bar, which means
we should be able to like this.

157
00:08:16.199 --> 00:08:25.317
If not okay, we can t.Error(expected
to find value\ foo).

158
00:08:25.317 --> 00:08:29.067
There's actually a way to quote these, I
know there's an operation that do a quick

159
00:08:29.067 --> 00:08:31.497
quoting, I just don't know
it off the top of my head.

160
00:08:31.497 --> 00:08:37.700
If value does not equal bar 3, well,
we have the exact same thing, right?

161
00:08:37.700 --> 00:08:44.767
Expected to find bar 3 but received %v,
which is gonna just be value, right?

162
00:08:44.767 --> 00:08:47.146
Beautiful, right,
we did exactly what we wanted to do.

163
00:08:47.146 --> 00:08:51.294
Now, again, we could probably just turn
this into a method, make it a little bit

164
00:08:51.294 --> 00:08:54.664
easier, but we're gonna keep
the testing somewhat light here.

165
00:08:54.664 --> 00:08:55.519
Let's do one more.

166
00:08:55.519 --> 00:08:58.580
I can already feel myself wanting to
abstract it, I can't even help it.

167
00:08:58.580 --> 00:09:01.611
I just have this just constant
desire to abstract things, and

168
00:09:01.611 --> 00:09:04.420
I try to fight it, and
I usually don't make it that long.

169
00:09:04.420 --> 00:09:05.028
So let's just abstract it.

170
00:09:05.028 --> 00:09:07.134
Let's just do it, we gotta do it.

171
00:09:07.134 --> 00:09:09.050
So let's go like this.

172
00:09:09.050 --> 00:09:12.001
We'll just call it a test,
that's gonna take in a t testing, T,

173
00:09:12.001 --> 00:09:15.458
I know I say we're not gonna do it, and
then look at me now, we're doing it.

174
00:09:15.458 --> 00:09:19.664
We're gonna have a projector,

175
00:09:19.664 --> 00:09:26.060
we can call proj,
which is gonna be a projector.

176
00:09:26.060 --> 00:09:31.777
Awesome, and then we need to grab
out the key that we expect, right?

177
00:09:31.777 --> 00:09:37.427
We have a key we want, we have a value we
expect out of it, and so let's do that.

178
00:09:37.427 --> 00:09:40.232
We won't build in the negative
test case into here,

179
00:09:40.232 --> 00:09:44.629
cuz then it gets super confusing if we
also consider, okay, then all of a sudden,

180
00:09:44.629 --> 00:09:48.685
you're just building such a complex
function, we're not gonna do that.

181
00:09:48.685 --> 00:09:52.996
So let's just grab this,
delete it out of here,

182
00:09:52.996 --> 00:09:57.006
bring it up to test,
and we're gonna go key.

183
00:09:57.006 --> 00:10:01.309
For those that are wondering how did I
just do that sweet text editing move,

184
00:10:01.309 --> 00:10:05.149
well, first off we do cover it in
the VIM Front End Masters course.

185
00:10:05.149 --> 00:10:09.164
But what I just did there is my cursor
is on the same line as the string,

186
00:10:09.164 --> 00:10:14.101
I hit a little c, meaning change, a little
a, for around, and then double quotes.

187
00:10:14.101 --> 00:10:16.804
So deleted the double quotes and
everything inside of it,

188
00:10:16.804 --> 00:10:19.797
and then put me into insert mode,
and now I can just type freely.

189
00:10:19.797 --> 00:10:21.350
Man, just great times, right?

190
00:10:21.350 --> 00:10:24.977
All right, so let's do that,
I know that no one really actually cares,

191
00:10:24.977 --> 00:10:25.760
I care, okay?

192
00:10:25.760 --> 00:10:26.934
I care deeply.

193
00:10:26.934 --> 00:10:28.732
Let's call this thing v.

194
00:10:28.732 --> 00:10:30.432
There we go.
So if it's not okay,

195
00:10:30.432 --> 00:10:33.710
we expected to find value,
it's a little percent sign.

196
00:10:33.710 --> 00:10:36.218
I know there is something that does that.

197
00:10:36.218 --> 00:10:38.750
Let's do that, awesome.

198
00:10:38.750 --> 00:10:43.984
And then of course, if value does not
equal v, then we have another problem.

199
00:10:43.984 --> 00:10:47.080
We expected to find this,
but we received that.

200
00:10:47.080 --> 00:10:49.338
So we expected to find value,
but we received this.

201
00:10:49.338 --> 00:10:53.515
There we go, pretty simple little
test function right there.

202
00:10:53.515 --> 00:10:57.597
Let's do that, and so
now we can go like this,

203
00:10:57.597 --> 00:11:01.274
test(t, proj, "foo", "bar 3".

204
00:11:01.274 --> 00:11:03.280
Beautiful, people.

205
00:11:03.280 --> 00:11:04.986
And so let's do a quick little test.

206
00:11:04.986 --> 00:11:07.815
Ooh, Go make Rust, knows my heart.

207
00:11:07.815 --> 00:11:09.021
It just knows I wanna be there.

208
00:11:09.021 --> 00:11:09.848
We are not gonna be there.

209
00:11:09.848 --> 00:11:12.169
My goodness, what has happened?

210
00:11:12.169 --> 00:11:17.750
Well, my friends,
we did not get this first try.

211
00:11:17.750 --> 00:11:18.886
Okay, if you have a water bottle
next to you, please pour one out.

212
00:11:18.886 --> 00:11:24.046
I'm sorry, we didn't quite get it.

213
00:11:24.046 --> 00:11:25.680
So there we go.

214
00:11:25.680 --> 00:11:28.400
We actually didn't put the f in there,
it could not format the string.

215
00:11:28.400 --> 00:11:30.303
It was just expecting an error.

216
00:11:30.303 --> 00:11:32.262
I know, sad day,
worst way to go out really.

217
00:11:32.262 --> 00:11:34.780
That's like forgetting to
shut the door all the way and

218
00:11:34.780 --> 00:11:38.790
start driving just to realize one of your
doors is slightly ajar, it's just painful.

219
00:11:38.790 --> 00:11:42.763
Let's just verify that we can fall back,
like our previous one.

220
00:11:42.763 --> 00:11:46.136
So I'll bring this more up into
the middle, cuz honestly, it's pretty

221
00:11:46.136 --> 00:11:49.972
uncomfortable probably for people looking
down at the very bottom of the screen.

222
00:11:49.972 --> 00:11:54.277
So let's do, I believe, it's fem,
and I believe it is is_great,

223
00:11:54.277 --> 00:11:56.074
Frontend Masters is great.

224
00:11:56.074 --> 00:11:58.580
There it is, look at that, it is great.

225
00:11:58.580 --> 00:12:02.310
And let's just do one more test
to make sure that all works out.

226
00:12:02.310 --> 00:12:06.630
Boom, my goodness, but
at least the logic was done first try.

227
00:12:06.630 --> 00:12:13.412
All right, so let's just do
a quick set value, TestSetValue.

228
00:12:13.412 --> 00:12:16.439
Now, we're gonna do this, we're gonna
grab this beautiful, wait, don't do that.

229
00:12:16.439 --> 00:12:18.289
We're gonna grab this
beautiful piece of code or

230
00:12:18.289 --> 00:12:20.058
we're gonna grab this beautiful projector.

231
00:12:20.058 --> 00:12:23.444
We're gonna test to make
sure foo is bar 3, right?

232
00:12:23.444 --> 00:12:30.963
We'll do a little proj.SetValue,
"foo", "bar 4".

233
00:12:30.963 --> 00:12:33.774
I'm not naming it and
apparently adding semicolons.

234
00:12:33.774 --> 00:12:38.732
Man, Reddit is gonna be just so upset
if I leave those semicolons in there,

235
00:12:38.732 --> 00:12:40.160
we don't want that.

236
00:12:40.160 --> 00:12:41.870
So there we go.

237
00:12:41.870 --> 00:12:45.100
Look at that,
that's all we really need to do.

238
00:12:45.100 --> 00:12:45.900
Did we do this correctly?

239
00:12:45.900 --> 00:12:50.854
I'm hoping that we have this all correct.

240
00:12:50.854 --> 00:12:51.991
Let's do one more set value that I
think is gonna be pretty clever.

241
00:12:51.991 --> 00:12:57.829
Let's do a fem, is_super_great.

242
00:12:57.829 --> 00:13:00.782
We're supposed to be able to
override values at this level, but

243
00:13:00.782 --> 00:13:02.598
not override values that are above us.

244
00:13:02.598 --> 00:13:04.589
That's what we did in TypeScript.

245
00:13:04.589 --> 00:13:06.119
If we jump back over to TypeScript,

246
00:13:06.119 --> 00:13:08.912
you'll see that our set value
does the exact same thing.

247
00:13:08.912 --> 00:13:10.983
They did better than great.

248
00:13:10.983 --> 00:13:11.906
I should have been better than that.

249
00:13:11.906 --> 00:13:14.948
All right, so is_super_great,
slight deviation in code, but

250
00:13:14.948 --> 00:13:16.427
this should work out just fine.

251
00:13:16.427 --> 00:13:22.972
I should go to grab that and
go fem and is_super_great.

252
00:13:22.972 --> 00:13:25.349
Go in here, and
did we get it, my goodness.

253
00:13:25.349 --> 00:13:27.686
That is so
much first trying happening right now.

254
00:13:27.686 --> 00:13:31.339
We're gonna pretend that one little
not first try didn't happen.

255
00:13:31.339 --> 00:13:35.289
Just to really triple check this and
make sure I'm not crazy here and

256
00:13:35.289 --> 00:13:37.035
caused any sort of problems.

257
00:13:37.035 --> 00:13:42.546
Let's go into here, use the same data,
this is mutated data object right now.

258
00:13:42.546 --> 00:13:47.128
And let's take that and do one quick test,
and make sure that fem just

259
00:13:47.128 --> 00:13:52.280
contains is_great, cuz that's what
it originally contained at the root.

260
00:13:52.280 --> 00:13:55.440
Just making sure we didn't somehow
overwrite something silly.

261
00:13:55.440 --> 00:13:59.317
We know we didn't, but, hey,
just in case someone new comes along,

262
00:13:59.317 --> 00:14:02.625
goes, this is a bug, no,
it's an intended feature.

263
00:14:02.625 --> 00:14:08.041
I'd go right here and go RemoveValue,
exact same thing, foo, bar.

264
00:14:08.041 --> 00:14:12.214
We can test it for its existence,
we don't actually really need to do that.

265
00:14:12.214 --> 00:14:13.444
Why test the test?

266
00:14:13.444 --> 00:14:17.260
But we're gonna do it, it feels good,
it feels right, just is what it is.

267
00:14:17.260 --> 00:14:20.045
All right, so we're gonna do that and
we're gonna reduce this down to two.

268
00:14:22.301 --> 00:14:24.572
Fantastic, that should work out.

269
00:14:24.572 --> 00:14:28.505
Then we'll do our other very nice test,
which we're gonna try to delete fem,

270
00:14:28.505 --> 00:14:32.736
which should actually delete the fem
at this level, cuz it's this thing, no,

271
00:14:32.736 --> 00:14:36.160
never mind, I was thinking we still
have the same object from this.

272
00:14:36.160 --> 00:14:39.316
There is no fem at this level,
so it should delete nothing,

273
00:14:39.316 --> 00:14:43.816
which means that if I test it for Frontend
Masters, I should see is_great, right?

274
00:14:43.816 --> 00:14:47.696
Everyone's on board,
that seems about right.

275
00:14:47.696 --> 00:14:53.433
So let's give this a nice
good testing My goodness.

276
00:14:56.701 --> 00:15:01.360
It's actually really hard to
be this good at programming.

277
00:15:01.360 --> 00:15:03.800
[LAUGH] Just what happens.

