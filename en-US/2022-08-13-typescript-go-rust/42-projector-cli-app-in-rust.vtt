WEBVTT

1
00:00:00.220 --> 00:00:03.755
We get to move on to rust at this point,
so if you've completely

2
00:00:03.755 --> 00:00:07.692
forgotten where we were, we just got
done building the four project or

3
00:00:07.692 --> 00:00:12.324
operations in go which is get value, get
all values, set value and remove value.

4
00:00:12.324 --> 00:00:16.423
We try to be a little bit more idiomatic
about it in the sense that when you get

5
00:00:16.423 --> 00:00:20.540
a value, if the value is missing,
it returns a false plus an empty string.

6
00:00:20.540 --> 00:00:24.776
If there is a value returns true plus
the string itself, so feels pretty good.

7
00:00:24.776 --> 00:00:29.673
Now we're gonna go to rust, obviously,
the greatest language of all time.

8
00:00:29.673 --> 00:00:32.714
If you use rust you get to tell
other people you use rust,

9
00:00:32.714 --> 00:00:36.530
it is one of the big benefits of doing it,
so make sure you really want to

10
00:00:36.530 --> 00:00:40.436
pay attention to this next part cuz
then you get to tell people about it.

11
00:00:40.436 --> 00:00:44.916
And really, what's the point of all this
programming if you can't tell the people

12
00:00:44.916 --> 00:00:47.291
why their language isn't as good as yours?

13
00:00:47.291 --> 00:00:54.100
So let's go over to our projector rust,
go in here and let's build our projector.

14
00:00:54.100 --> 00:00:56.571
So exact same file structure,
that we have.

15
00:00:56.571 --> 00:00:59.954
Remember, when you add a file to rust,
what do we got to do,

16
00:00:59.954 --> 00:01:01.601
well we can create the file.

17
00:01:01.601 --> 00:01:03.305
Then we got to go over to lib,

18
00:01:03.305 --> 00:01:08.670
we got to make sure it's publicly
available projector, there we go, awesome.

19
00:01:08.670 --> 00:01:11.500
It's gonna say hey,
I did not find this file.

20
00:01:11.500 --> 00:01:14.492
That's because we did save
the file protector rs.

21
00:01:14.492 --> 00:01:15.630
I'm gonna save the file.

22
00:01:15.630 --> 00:01:16.870
Now the file is there.

23
00:01:16.870 --> 00:01:20.524
And that's my list of fast jumps
[INAUDIBLE] put there just like that,

24
00:01:20.524 --> 00:01:21.220
there we go.

25
00:01:21.220 --> 00:01:25.100
And it's available awesome, there we go.

26
00:01:25.100 --> 00:01:27.550
We're ready to actually
do the programming.

27
00:01:27.550 --> 00:01:30.950
So let's just do this kind of one step at
a time, just like we've been doing before.

28
00:01:30.950 --> 00:01:36.198
So for the TypeScript version and for
the go one we read from file obviously,

29
00:01:36.198 --> 00:01:40.298
I did the reading from file at the end for
the go version, but

30
00:01:40.298 --> 00:01:42.920
at the beginning of TypeScript.

31
00:01:42.920 --> 00:01:45.092
So, let's just do it
the TypeScript way and

32
00:01:45.092 --> 00:01:47.509
start off by creating
a projector from a config.

33
00:01:47.509 --> 00:01:52.261
So of course, before we can even do that,
we probably need to create something

34
00:01:52.261 --> 00:01:56.150
pretty darn similar to what we
have in both go and in TypeScript.

35
00:01:56.150 --> 00:02:01.996
So I'm gonna create a struct data and
this is gonna have a projector property.

36
00:02:01.996 --> 00:02:06.779
Let's make it a pub, right, and
this needs to be a map path buff

37
00:02:06.779 --> 00:02:11.586
because remember they use path
buffs have a map string string.

38
00:02:11.586 --> 00:02:15.553
So let's create that now, in rust,
they have something called a hash map.

39
00:02:15.553 --> 00:02:20.065
Now, hash maps are,
the API can be a bit wonky at first,

40
00:02:20.065 --> 00:02:24.397
I still feel like I haven't
quite mastered this API.

41
00:02:24.397 --> 00:02:27.484
Which is kind of weird to say
because usually hash are well,

42
00:02:27.484 --> 00:02:31.265
you only have three methods, get set and
remove, what do you mean mass.

43
00:02:31.265 --> 00:02:33.115
[INAUDIBLE] This is a little different,

44
00:02:33.115 --> 00:02:35.362
a little different than
your traditional map.

45
00:02:35.362 --> 00:02:40.441
This isn't your grandmother Grace Hoppers
map, okay, this is a different map here.

46
00:02:40.441 --> 00:02:42.865
So let's kind of play around with it.

47
00:02:42.865 --> 00:02:47.606
So of course we got to do
path buff as the item and

48
00:02:47.606 --> 00:02:52.965
then a HashMap of string string,
right, awesome.

49
00:02:52.965 --> 00:02:56.220
This makes sense,
I think everybody's happy with that.

50
00:02:56.220 --> 00:02:58.230
We can even do something
that's kind of nice.

51
00:02:58.230 --> 00:03:02.800
We could technically create this as a
types we don't have the type all this out.

52
00:03:02.800 --> 00:03:08.104
We could just have ourselves have a type
HashMap equals a HashMap of string string,

53
00:03:08.104 --> 00:03:12.450
right because we know we're
gonna return that at some point.

54
00:03:12.450 --> 00:03:14.700
So we could have that right there.

55
00:03:14.700 --> 00:03:18.558
Always kind of like a fun thing to be able
to use in rust that you can kind of do

56
00:03:18.558 --> 00:03:20.303
these little type aliasing out,

57
00:03:20.303 --> 00:03:23.197
add some things that are a little
bit more convenient.

58
00:03:23.197 --> 00:03:26.515
We're not gonna do that, we're going to
just type it all out great for your brain.

59
00:03:26.515 --> 00:03:29.662
It's like eating your vegetables when
you're first learning all these things.

60
00:03:29.662 --> 00:03:30.398
So there we go.

61
00:03:30.398 --> 00:03:33.670
We have our HashMap,
we have our path buff, we have our data.

62
00:03:33.670 --> 00:03:35.560
This is the thing we want to be saving.

63
00:03:35.560 --> 00:03:41.210
But we're gonna run into a bit of a
problem here in about a minute and a half.

64
00:03:41.210 --> 00:03:47.330
And so we're just gonna solve it now
which is how do you handle JSON in Rust.

65
00:03:47.330 --> 00:03:48.937
Well, it's actually quite simple.

66
00:03:48.937 --> 00:03:51.947
So first let me just skip past all
this cuz this is all the Go stuff.

67
00:03:51.947 --> 00:03:55.355
Avert your eyes if you can't look at
Go and you can, yeah, look at that.

68
00:03:55.355 --> 00:03:57.350
I created that meme.

69
00:03:57.350 --> 00:04:00.180
This was what I meant to not skip over.

70
00:04:00.180 --> 00:04:02.620
It's Python mixed with Rust,
mixed with Go.

71
00:04:02.620 --> 00:04:03.920
It's very cursed.

72
00:04:03.920 --> 00:04:06.290
It's very terrifying.

73
00:04:06.290 --> 00:04:07.120
All right, there we go.

74
00:04:07.120 --> 00:04:08.280
We're gonna get rusty.

75
00:04:08.280 --> 00:04:11.621
We're right here, of course,
we need to install one program.

76
00:04:11.621 --> 00:04:13.421
It's very, very important or one library.

77
00:04:13.421 --> 00:04:14.735
It's very, very important.

78
00:04:14.735 --> 00:04:17.500
It's technically two libraries,
so we're going to do that.

79
00:04:17.500 --> 00:04:21.060
So let's go to the command line and
let's do a cargo add.

80
00:04:21.060 --> 00:04:24.150
We're gonna do ser'de,
that's how I pronounced it.

81
00:04:24.150 --> 00:04:29.314
It means serialize de serialize and
we also need a features right and

82
00:04:29.314 --> 00:04:35.668
the features will equal derive, that means
we can use the derive macro on structs.

83
00:04:35.668 --> 00:04:38.980
So much like how our clap
one had a derived macro.

84
00:04:38.980 --> 00:04:43.835
Which allowed it to be able to add
a little proc macro at the top of our

85
00:04:43.835 --> 00:04:46.631
struct, we can do it again with this.

86
00:04:46.631 --> 00:04:50.935
Now on top of it, we need to add one
more thing, serde is just a serialized

87
00:04:50.935 --> 00:04:55.892
deserialized library, so we need to add
a subtype library for the serialization.

88
00:04:55.892 --> 00:04:59.258
Which means serde just allows you to
create your own serialization if you want

89
00:04:59.258 --> 00:05:01.730
to, boom, we're gonna add serde.json.

90
00:05:01.730 --> 00:05:08.220
This will allow us to do all
that fun serialization via JSON.

91
00:05:08.220 --> 00:05:11.281
So at the top of our struct,
let's add a drive.

92
00:05:11.281 --> 00:05:13.520
We're gonna just add debug,
just in case we need to print this out.

93
00:05:13.520 --> 00:05:15.890
I always usually end up adding debug.

94
00:05:15.890 --> 00:05:18.840
It doesn't really have
much impact in your life,

95
00:05:18.840 --> 00:05:21.518
it's fantastic, we'll just do that here.

96
00:05:21.518 --> 00:05:25.591
And so, we'll do derive debug and
then we'll do serialize deserialize.

97
00:05:25.591 --> 00:05:30.181
And so all this is gonna do is
just gonna send a note, let's see,

98
00:05:30.181 --> 00:05:32.995
whoa we need to do a little LSP restart.

99
00:05:32.995 --> 00:05:37.372
Whenever you install a new library rust
analyzer needs to restart, it's going to

100
00:05:37.372 --> 00:05:41.192
do a couple things or at least I find
that it's better if you restart it.

101
00:05:41.192 --> 00:05:45.449
There we go we can import serde serialize
and deserialize, now we have the power to

102
00:05:45.449 --> 00:05:49.530
serialize and deserialize this structure
for you, which is pretty cool.

103
00:05:49.530 --> 00:05:54.199
There's a lot of things you can add on top
of this, you can even use enums and say,

104
00:05:54.199 --> 00:05:57.702
hey, this enum is based off the tag and
if the names match up,

105
00:05:57.702 --> 00:06:00.430
I'll leave in select the correct enum.

106
00:06:00.430 --> 00:06:04.195
So if you have like some sort of type
on your heterogeneous list and JSON,

107
00:06:04.195 --> 00:06:05.690
it will do that for you.

108
00:06:05.690 --> 00:06:08.731
It's pretty cool, it's actually
a really powerful library or not,

109
00:06:08.731 --> 00:06:12.608
we don't have anything very powerful we'll
be doing, so we'll just keep it like this.

110
00:06:12.608 --> 00:06:16.807
All right, so next we need to
create our struct projector, right?

111
00:06:16.807 --> 00:06:21.881
So this is the same thing, we're gonna
wanna do the config, so config which

112
00:06:21.881 --> 00:06:26.637
is gonna be a config from our config
great and of course we want our data,

113
00:06:26.637 --> 00:06:31.114
which is gonna be our data,
which is straight above us, awesome.

114
00:06:31.114 --> 00:06:35.887
We have our projector, so let's implement
a method that exists on the stet

115
00:06:35.887 --> 00:06:40.205
like on the static side of the struct
if you're familiar with Java or

116
00:06:40.205 --> 00:06:43.346
even TypeScript like
a static method on struct.

117
00:06:43.346 --> 00:06:46.530
So go like this info,
actually, I forgot one thing.

118
00:06:46.530 --> 00:06:50.550
We should probably make this public,
other people are gonna wanna see that.

119
00:06:50.550 --> 00:06:54.560
So let's have an info projector.

120
00:06:54.560 --> 00:06:59.890
And if we don't include self,
the function is quote unquote static.

121
00:06:59.890 --> 00:07:02.539
I'm using the term correctly
from TypeScript that way,

122
00:07:02.539 --> 00:07:04.533
it hopefully has a good
one to one mapping.

123
00:07:04.533 --> 00:07:08.535
So we'll just say this,
we're gonna go from config, right,

124
00:07:08.535 --> 00:07:11.493
let's take in a config and
we can return self.

125
00:07:11.493 --> 00:07:16.634
Self of course being the projector object
and so just like before we had to do

126
00:07:16.634 --> 00:07:22.111
all the same operations, now we can either
do it this way, or we can use a trait.

127
00:07:22.111 --> 00:07:24.320
Now I always am a huge
fan of using traits.

128
00:07:24.320 --> 00:07:26.540
I think it's a ton of fun to use traits.

129
00:07:26.540 --> 00:07:30.026
So we could also do a TryFrom, right, or

130
00:07:30.026 --> 00:07:34.643
just really we're only gonna
be using FromConfig for

131
00:07:34.643 --> 00:07:39.479
projector, right, so
this is another option we have.

132
00:07:39.479 --> 00:07:43.471
And so, I tend to just favor using traits
as opposed to these type of methods just

133
00:07:43.471 --> 00:07:45.990
because I don't know,
I just really liked that.

134
00:07:45.990 --> 00:07:48.872
For this time,
we're actually gonna keep it here.

135
00:07:48.872 --> 00:07:50.488
Just to know,
do it a little bit different,

136
00:07:50.488 --> 00:07:53.520
you can kind of experience something a bit
different, and we'll do it from here.

137
00:07:53.520 --> 00:07:55.070
All right, so what are we gotta do here?

138
00:07:55.070 --> 00:07:58.320
We're gonna do the exact same set of
operations that we've done before.

139
00:07:58.320 --> 00:08:02.607
With need to get everything,
we need to get the config file,

140
00:08:02.607 --> 00:08:07.330
deserialize it, use it else return
a default projector, right.

141
00:08:07.330 --> 00:08:08.339
All right, so

142
00:08:08.339 --> 00:08:13.316
from config will do the exact same
check does this file exist already?

143
00:08:13.316 --> 00:08:15.060
If it does we can just do that.

144
00:08:15.060 --> 00:08:18.316
Now, I believe this is still
a nightly feature, but

145
00:08:18.316 --> 00:08:21.520
there is this beautiful tri exists, right?

146
00:08:21.520 --> 00:08:23.040
This is fantastic.

147
00:08:23.040 --> 00:08:28.011
And so, if we were to do this,
we can go config, config,

148
00:08:28.011 --> 00:08:31.532
but if I'm not mistaken, if it is okay,

149
00:08:31.532 --> 00:08:36.330
that means this thing is,
it exists, awesome.

150
00:08:36.330 --> 00:08:39.744
But if I'm not mistaken,
use of unstable feature, so

151
00:08:39.744 --> 00:08:45.027
we're not going to use that feature, for
now we'll be using just the stable items.

152
00:08:45.027 --> 00:08:48.323
This is fantastic though,
I would be very happy to use this.

153
00:08:48.323 --> 00:08:52.817
But just to make everything simple because
I only told you guys to install stable but

154
00:08:52.817 --> 00:08:57.393
if you want you could use nightly, let's
do something a little bit different here.

155
00:08:57.393 --> 00:09:01.640
Let's go, sdfs and then there is
something I believe it's called metadata.

156
00:09:01.640 --> 00:09:03.240
Yeah, yeah, all right, we got it.

157
00:09:03.240 --> 00:09:07.900
And so, metadata is equivalent to the stat
operation that you saw us do and go.

158
00:09:07.900 --> 00:09:12.310
So we'll do the exact same thing,
config config and do an is okay.

159
00:09:12.310 --> 00:09:16.433
So if there is metadata, well, guess what?

160
00:09:16.433 --> 00:09:18.090
We're gonna use it right, awesome.

161
00:09:18.090 --> 00:09:20.004
We're all happy about that.

162
00:09:20.004 --> 00:09:24.304
So if there is metadata, let's read
the file and then on top of that,

163
00:09:24.304 --> 00:09:26.022
let's then serialize it.

164
00:09:26.022 --> 00:09:29.486
So we're just going to do it in these

165
00:09:29.486 --> 00:09:34.344
nice little steps right
here one at a time, okay?

166
00:09:34.344 --> 00:09:39.428
So let's go let contents equals
standard fs, read the string,

167
00:09:39.428 --> 00:09:44.620
we're gonna pass in obviously,
the file path config,config.

168
00:09:45.740 --> 00:09:48.965
And now we have this,
we do have one problem of course,

169
00:09:48.965 --> 00:09:52.963
which is if contents isn't a risk or
if it is a result object, well,

170
00:09:52.963 --> 00:09:56.892
we need to somehow unwrap this
without throwing an error because we

171
00:09:56.892 --> 00:09:59.792
are doing a non error version of this,
correct.

172
00:09:59.792 --> 00:10:03.328
That's what we didn't the other languages,
we actually ignored all the other, here,

173
00:10:03.328 --> 00:10:04.330
we'll go to projector.

174
00:10:04.330 --> 00:10:07.483
If you notice in this one, when we did it,

175
00:10:07.483 --> 00:10:11.189
where are you from new projector,
there you go.

176
00:10:11.189 --> 00:10:13.089
Yeah, we avoided all errors.

177
00:10:13.089 --> 00:10:16.370
We just want this thing to be an error
free method, for this exact case.

178
00:10:16.370 --> 00:10:17.610
So we'll do the exact same thing here.

179
00:10:17.610 --> 00:10:19.464
So it does make it
a little bit more tricky.

180
00:10:19.464 --> 00:10:21.210
There's a lot of operations we could do.

181
00:10:21.210 --> 00:10:23.440
We could figure out a way to do a map.

182
00:10:23.440 --> 00:10:26.126
I believe there isn't and then,
we can kind of work this in and

183
00:10:26.126 --> 00:10:29.433
we could probably do something that's
pretty good and functional, but for

184
00:10:29.433 --> 00:10:31.360
now we'll just kind of keep it procedural.

185
00:10:31.360 --> 00:10:34.812
Very good time to just
definitely take some time and

186
00:10:34.812 --> 00:10:39.549
do some more of the functional stuff but
for the sake of just learning,

187
00:10:39.549 --> 00:10:42.134
let's just keep it right here and go.

188
00:10:42.134 --> 00:10:45.183
If this thing is okay,
we could unwrap this or

189
00:10:45.183 --> 00:10:49.217
we could just provide something
a little bit smarter here.

190
00:10:49.217 --> 00:10:50.890
So what I'm gonna do is,
I'm gonna do this.

191
00:10:50.890 --> 00:10:54.782
Let's go like this,
let's contents equals contents, unwrap or

192
00:10:54.782 --> 00:10:58.047
so what the or is,
is that I'm gonna unwrap this thing,

193
00:10:58.047 --> 00:11:01.947
but if there is an error,
I'm just gonna provide a default value.

194
00:11:01.947 --> 00:11:03.070
So what is our default value?

195
00:11:03.070 --> 00:11:05.340
Well, we can make this pretty clever,
right?

196
00:11:05.340 --> 00:11:07.162
I could go projector.

197
00:11:09.852 --> 00:11:16.016
All right, and give really just the proper
JSON that we're kind of expecting to get.

198
00:11:16.016 --> 00:11:18.100
And so now, we're almost there.

199
00:11:18.100 --> 00:11:25.360
So now all we need to do is just simply,
we can go data = serde_json from string.

200
00:11:25.360 --> 00:11:29.220
I believe that thing is the one that
we want to use, and just use contents.

201
00:11:29.220 --> 00:11:32.022
And I believe at this point,
it's gonna say, hey,

202
00:11:32.022 --> 00:11:36.177
use a borrow because of course from string
it expects a reference to a string.

203
00:11:36.177 --> 00:11:40.337
Now this is obviously a much harder thing
to read than you're probably used to but

204
00:11:40.337 --> 00:11:44.312
effectively all this is saying is that,
this is the lifetime a that exists and

205
00:11:44.312 --> 00:11:46.086
it's gonna live as long as this and

206
00:11:46.086 --> 00:11:48.980
it's gonna return out to
the objects you want, right.

207
00:11:48.980 --> 00:11:51.109
It's just defining how long
these things can live.

208
00:11:51.109 --> 00:11:54.092
You don't really,
we're not gonna go over lifetimes, but

209
00:11:54.092 --> 00:11:58.144
I'm gonna try to make something with it,
we're just trying to keep things easy.

210
00:11:58.144 --> 00:12:02.324
But that's why it works and that's
also reason why it's very efficient,

211
00:12:02.324 --> 00:12:06.031
is that I don't have to give it a copy
of my string, I can just hand it

212
00:12:06.031 --> 00:12:09.912
a reference to my string and
it can produce out for me the JSON object.

213
00:12:09.912 --> 00:12:12.556
All right, so there we go we
have this beautiful data and

214
00:12:12.556 --> 00:12:16.155
if there is an error well then we need to
do something if there is not an error If

215
00:12:16.155 --> 00:12:17.700
we don't need to do something.

216
00:12:17.700 --> 00:12:21.972
So let's go like this,
we can do another unwrap or

217
00:12:21.972 --> 00:12:25.939
so let's go let data
equals data unwrap or, so

218
00:12:25.939 --> 00:12:30.020
remember again, there was a serde issue.

219
00:12:30.020 --> 00:12:33.550
So we can just create a data right
in line if we really want to.

220
00:12:33.550 --> 00:12:37.297
All right,
here up being very go about it and

221
00:12:37.297 --> 00:12:41.530
let's go projector and
we can go Hashmap new.

222
00:12:41.530 --> 00:12:47.146
We can also use like HashMap default up,
we do default.

223
00:12:47.146 --> 00:12:50.184
Failed to resolve,
what is the thing that we're doing?

224
00:12:50.184 --> 00:12:51.529
My goodness, that's why.

225
00:12:51.529 --> 00:12:53.625
Let's see, what is happening here?

226
00:12:53.625 --> 00:12:57.954
I didn't spell HashMap very well, so
fantastic put it one of those here.

227
00:12:57.954 --> 00:13:00.965
We're still getting, of course,
one error this entire time,

228
00:13:00.965 --> 00:13:04.084
which is kind of a annoying error but
what it is is it's like, hey,

229
00:13:04.084 --> 00:13:07.408
you're you're not returning anything,
please return something.

230
00:13:07.408 --> 00:13:12.705
The rest analyzer has no, cuz it's just
always wanting to let you need to return

231
00:13:12.705 --> 00:13:18.177
something, maybe a little too in your face
about it but this works out there we go.

232
00:13:18.177 --> 00:13:21.503
So we've kind of removed all
of the potential problems,

233
00:13:21.503 --> 00:13:25.727
it's just the default data and so
now we can just return a OK, open on OK,

234
00:13:25.727 --> 00:13:30.190
just a projector, with of course
the config and of course the data, right?

235
00:13:30.190 --> 00:13:35.158
Beautiful, it's just absolutely beautiful
but now all sudden we have this weird

236
00:13:35.158 --> 00:13:38.550
thing, where there's multiple
errors going on here.

237
00:13:38.550 --> 00:13:41.540
You may not really realize that
there's multiple errors going on here.

238
00:13:41.540 --> 00:13:45.473
The first arrow here is that, it's
trying to still get us to return that.

239
00:13:45.473 --> 00:13:46.604
So we're not going to do that.

240
00:13:46.604 --> 00:13:50.511
So let's just let's just get
over that really quickly.

241
00:13:50.511 --> 00:13:56.237
I'm going to just do this right here and

242
00:13:56.237 --> 00:13:59.533
move that down here and

243
00:13:59.533 --> 00:14:04.670
I'm gonna create one default.

244
00:14:04.670 --> 00:14:09.268
All right, now for this and
we'll just yank this thing out right here.

245
00:14:09.268 --> 00:14:11.630
All right,
cuz we're gonna use this a couple times.

246
00:14:11.630 --> 00:14:15.220
So let's just yank it out, awesome.

247
00:14:15.220 --> 00:14:17.520
There is something called default,
it's actually a nice little trade.

248
00:14:17.520 --> 00:14:22.695
It might have taken the exact
same amount of time,

249
00:14:22.695 --> 00:14:27.265
but we'll just go default data, awesome.

250
00:14:27.265 --> 00:14:31.544
So we have this beautiful default data up,
cannot find, what did I call it?

251
00:14:31.544 --> 00:14:35.697
Default projector evidently wrong.

252
00:14:35.697 --> 00:14:37.460
There we go.

253
00:14:37.460 --> 00:14:40.436
And of course, data default_data, so
let's get rid of that first error so

254
00:14:40.436 --> 00:14:42.260
we can kind of see what's happening here.

255
00:14:42.260 --> 00:14:43.790
So we got another error right here.

256
00:14:43.790 --> 00:14:44.800
What is this?

257
00:14:44.800 --> 00:14:48.932
I bet we can all guess from
our earlier time in rust.

258
00:14:48.932 --> 00:14:51.559
It expected a string, but
what did you hand it?

259
00:14:51.559 --> 00:14:52.960
You handed it a reference.

260
00:14:52.960 --> 00:14:57.150
So now we know, so we need to turn
this thing into an actual string.

261
00:14:57.150 --> 00:14:59.086
Again, we'll just use the string from.

262
00:14:59.086 --> 00:15:03.250
We can use obviously into,
to string we can use a lot of things.

263
00:15:03.250 --> 00:15:05.120
I'll just use the constructor,
there we go.

264
00:15:05.120 --> 00:15:06.790
This is looking pretty good though, right?

265
00:15:06.790 --> 00:15:10.290
I feel like we've kind of got
everything we need to have here.

266
00:15:10.290 --> 00:15:12.830
And so, awesome, there we go.

267
00:15:12.830 --> 00:15:16.437
That's all it's gonna take to correctly
read from a file, prevent all errors,

268
00:15:16.437 --> 00:15:18.730
make sure it's defaulted,
and it's beautiful.

269
00:15:19.770 --> 00:15:24.300
So, let's move on and start
implementing the methods on projector.

