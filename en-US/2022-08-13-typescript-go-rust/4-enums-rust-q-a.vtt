WEBVTT

1
00:00:00.070 --> 00:00:04.727
Can you exception an email so
an email them pointing to itself

2
00:00:04.727 --> 00:00:07.594
&gt;&gt; No because there is, I think you can,

3
00:00:07.594 --> 00:00:13.242
I want to say you can't do that but
the reality is is that I don't believe you

4
00:00:13.242 --> 00:00:18.466
can do that so let's just try it out and
so I'm gonna go bar with a foo.

5
00:00:18.466 --> 00:00:22.978
Yeah you cannot pick as it has this
whole problem where how big is

6
00:00:22.978 --> 00:00:27.674
the underlying type well it has to
be as big as its biggest member.

7
00:00:27.674 --> 00:00:30.500
So if it has anyone here
worked with C unions?

8
00:00:30.500 --> 00:00:34.091
C unions effectively, if you have
something that's eight bits long, and

9
00:00:34.091 --> 00:00:37.910
something that's 64 bits long, it always
has to take up 64 bits in memory,

10
00:00:37.910 --> 00:00:40.319
because it does not know
how big it's going to be.

11
00:00:40.319 --> 00:00:42.187
Is it gonna be eight or is it gonna be 64?

12
00:00:42.187 --> 00:00:46.976
Well, this thing has to do the same thing,
so if you have an enum that has a type

13
00:00:46.976 --> 00:00:50.531
bar that has a subtype foo,
well, what can foo contain?

14
00:00:50.531 --> 00:00:54.056
Well, foo can be a bar that contains
itself that contains another version of

15
00:00:54.056 --> 00:00:55.332
itself or what can that be?

16
00:00:55.332 --> 00:00:57.507
So how big is that thing,

17
00:00:57.507 --> 00:01:02.799
well it's obviously infinitely big so
cannot create this.

18
00:01:02.799 --> 00:01:04.483
That's what I thought was gonna happen but

19
00:01:04.483 --> 00:01:06.455
I just wanted to make sure
just in case I was wrong.

20
00:01:06.455 --> 00:01:12.049
I've been wrong before and
I know [LAUGH] It happens.

21
00:01:12.049 --> 00:01:14.538
All right any other questions?

22
00:01:14.538 --> 00:01:15.978
This feels a bit confusing, right?

23
00:01:15.978 --> 00:01:18.565
This feels like a little bit
overwhelming I assume it does,

24
00:01:18.565 --> 00:01:20.960
that's because you're not doing anything,
right?

25
00:01:20.960 --> 00:01:24.716
Or any of you programming doing stuff, no,
it's not setting in right it's not setting

26
00:01:24.716 --> 00:01:27.589
into your heart I just wanted to
cover these things so you see them.

27
00:01:27.589 --> 00:01:31.487
So when we actually do them,
it becomes a lot easier to go okay,

28
00:01:31.487 --> 00:01:33.190
yeah, there's options.

29
00:01:33.190 --> 00:01:36.973
Okay, I remember at least remember
hearing these words, let's see it.

30
00:01:36.973 --> 00:01:39.805
&gt;&gt; So I can think of match as
kind of a switch statement.

31
00:01:39.805 --> 00:01:43.875
&gt;&gt; Match is a switch statement that's
just a little bit more aggressive, right?

32
00:01:43.875 --> 00:01:47.529
A switch statement usually,
which in traditionally a switch

33
00:01:47.529 --> 00:01:51.894
statement only contains constants,
because it's some sort of offset.

34
00:01:51.894 --> 00:01:55.317
That's why like in the JVM,
if you run a switch statement,

35
00:01:55.317 --> 00:01:57.729
it consumes a finite amount of bytecode.

36
00:01:57.729 --> 00:02:00.567
Like if you actually measure how many byte
codes are executed no matter how many

37
00:02:00.567 --> 00:02:03.288
match statements you have, it only
executes the same amount of bytecode.

38
00:02:03.288 --> 00:02:06.685
And that's because it's not doing any
processing, it's just doing like a jump,

39
00:02:06.685 --> 00:02:09.322
it's like the same cost as an F
cuz it's kind of pre computed in.

40
00:02:09.322 --> 00:02:11.450
I think with JavaScript you can be
a little bit more loosey goosey,

41
00:02:11.450 --> 00:02:12.745
I think you can have variables in there.

42
00:02:12.745 --> 00:02:16.169
I can't remember I don't think,
I want to say you can't but

43
00:02:16.169 --> 00:02:18.194
I don't know JavaScript, crazy.

44
00:02:18.194 --> 00:02:21.385
Whereas match statements,
they only, they work on types, so

45
00:02:21.385 --> 00:02:23.927
you're kind of typing
off what's inside there.

46
00:02:23.927 --> 00:02:27.670
And so that's kind of different, so
that means you still get that really fast

47
00:02:27.670 --> 00:02:31.195
jumping cuz every enum is stored with
what is called the discriminator.

48
00:02:31.195 --> 00:02:34.977
So it knows its type in memory, so
when it does this nice match statement,

49
00:02:34.977 --> 00:02:39.438
it doesn't have to do this really complex
breaking down, very expensive operation.

50
00:02:39.438 --> 00:02:44.322
It's just like, I'm third offset in,
this thing has a subtype this, okay,

51
00:02:44.322 --> 00:02:46.114
I'm fourth offset in, right?

52
00:02:46.114 --> 00:02:47.605
So it can go pretty fast.

53
00:02:47.605 --> 00:02:52.740
&gt;&gt; [INAUDIBLE] I noticed
the map you didn't have

54
00:02:52.740 --> 00:02:57.403
to reference, right [INAUDIBLE]
&gt;&gt; Yes.

55
00:02:57.403 --> 00:03:00.097
&gt;&gt; But for
the filter you do have to reference.

56
00:03:00.097 --> 00:03:03.653
&gt;&gt; Exactly, so think about this,
I wish JavaScript was a little bit better

57
00:03:03.653 --> 00:03:06.508
with this, but if you think
about it when you are mapping,

58
00:03:06.508 --> 00:03:09.560
you are taking a value and
you are converting into a new value.

59
00:03:09.560 --> 00:03:14.283
Now with Rust what happens if I hand
you the value, do I own it anymore?

60
00:03:14.283 --> 00:03:17.777
No, you have the value but your
responsibility in the map is to give me

61
00:03:17.777 --> 00:03:20.564
a new value at that point,
so that's how Rust does it.

62
00:03:20.564 --> 00:03:23.950
Whereas a filter, I'm saying,
do you even wanna keep this value?

63
00:03:23.950 --> 00:03:27.590
That means I must retain it but
you tell me a yes or no and so

64
00:03:27.590 --> 00:03:32.103
that's why filter has a reference and
map will not have a reference.

65
00:03:32.103 --> 00:03:36.000
So if you're doing say,
there's there's ways to do iterators or

66
00:03:36.000 --> 00:03:40.953
we'll just do something really quickly in
let's see I'll mark this do you want to.

67
00:03:40.953 --> 00:03:46.729
Those there we go, so if I do this, you'll
notice that the type is a char, right?

68
00:03:46.729 --> 00:03:49.674
Because I'm creating an iterator but
if I do this,

69
00:03:49.674 --> 00:03:52.355
the type it's going to
say you can't do that.

70
00:03:52.355 --> 00:03:55.977
But it's going to be a we'll
deal with another one but

71
00:03:55.977 --> 00:03:58.404
you can do things in which I do this.

72
00:03:58.404 --> 00:04:02.391
No, that'd be sweet thing,
either way you'll be able to do maps

73
00:04:02.391 --> 00:04:05.516
over references versus
maps consuming the value.

74
00:04:05.516 --> 00:04:10.282
And so there's this concept called
iterator or dot iterator, so on a vector.

75
00:04:10.282 --> 00:04:15.281
If I go Let a = a veck, this is probably
a better example anyways, I can call it or

76
00:04:15.281 --> 00:04:19.854
on it, and this creates an iterator,
but I can also call into iterator.

77
00:04:19.854 --> 00:04:24.834
Now this returns to different values
in Iter Hanzi references to itself

78
00:04:24.834 --> 00:04:29.399
where as a into iterator converts
your vector into an iterator and

79
00:04:29.399 --> 00:04:34.213
now you cannot reference that vector
anymore because you've handed

80
00:04:34.213 --> 00:04:37.886
off the value and
it's handed you back an iterator.

81
00:04:37.886 --> 00:04:42.595
And so it converts the values, so if you
do an iter, and then you do a filter,

82
00:04:42.595 --> 00:04:46.359
obviously, that is a find,
a filter, and let's just go x.

83
00:04:46.359 --> 00:04:51.584
Now let's just give this a quick type,
i32, you'll notice that

84
00:04:51.584 --> 00:04:57.097
since I did an iterator, remember,
this is a reference to your items.

85
00:04:57.097 --> 00:05:01.585
That means it's going to be a reference
to your referenced items is my guess and

86
00:05:01.585 --> 00:05:04.719
as you can see it's a reference,
reference, right?

87
00:05:04.719 --> 00:05:07.848
That makes sense once you kind of
understand the outer concept which is

88
00:05:07.848 --> 00:05:10.990
just, when you do an iterator,
it's referencing all of your items.

89
00:05:10.990 --> 00:05:14.497
If you do a filter it always references
whatever items are being done via

90
00:05:14.497 --> 00:05:15.267
the iterator.

91
00:05:15.267 --> 00:05:19.370
Because the filter doesn't have
the context to know, it's fine for

92
00:05:19.370 --> 00:05:22.812
me to hand you back this reference
because I know it's right,

93
00:05:22.812 --> 00:05:25.482
it just it just operates on,
you know, types.

94
00:05:25.482 --> 00:05:29.446
So, of course,
then there's more to it but all right,

95
00:05:29.446 --> 00:05:32.952
&gt;&gt; So mute of value is the owner, correct?

96
00:05:32.952 --> 00:05:36.997
&gt;&gt; Well, the owner is the thing
that's not a reference, so

97
00:05:36.997 --> 00:05:40.295
a owns the vector right here, right?

98
00:05:40.295 --> 00:05:43.419
A owns that right there,
A owns the vector,

99
00:05:43.419 --> 00:05:48.570
I can hand out references to that vector
I can hand out mutable references

100
00:05:48.570 --> 00:05:54.334
to that vector if A is mutable itself, but
I cannot have two owners of that value.

101
00:05:54.334 --> 00:05:58.888
Hence the reason why when we did this,
the value of a gets moved

102
00:05:58.888 --> 00:06:03.459
to be you can no longer refer to
a anymore within your program.

103
00:06:03.459 --> 00:06:06.157
That seems very trivial and
almost annoying but

104
00:06:06.157 --> 00:06:10.339
it's actually quite fantastic as time
goes on and the funny part is is that

105
00:06:10.339 --> 00:06:13.793
I do this contest all the time
on my stream which is first try.

106
00:06:13.793 --> 00:06:15.691
Can I build something first try?

107
00:06:15.691 --> 00:06:20.789
And with TypeScript, I'm about a 20%
success rate, with Rust I'm a 75%

108
00:06:20.789 --> 00:06:26.361
success rate despite writing more code and
I'd argue it's definitely more complex.

109
00:06:26.361 --> 00:06:28.606
I just feel I get it right more often,

110
00:06:28.606 --> 00:06:33.176
like the pit of success is just easier
to fall into despite it being harder.

111
00:06:33.176 --> 00:06:36.028
And how I kind of like to think
about it my head is in people

112
00:06:36.028 --> 00:06:37.800
because you get this all the time.

113
00:06:37.800 --> 00:06:42.789
Well, developer ergonomics type scripts so
much faster my argument is okay, let's say

114
00:06:42.789 --> 00:06:46.859
you had the run a lap on the track,
Typescript runs at 10 miles an hour.

115
00:06:46.859 --> 00:06:49.147
Rust runs at seven and
a half miles an hour, well if,

116
00:06:49.147 --> 00:06:52.270
you get it wrong you're running
another lap with TypeScript, right?

117
00:06:52.270 --> 00:06:57.051
So yeah, I may not finish as fast but
I often don't have to run that second lap,

118
00:06:57.051 --> 00:07:00.182
.that call costs a lot more
ultimately in the end.

119
00:07:00.182 --> 00:07:03.241
And that's kind of one of the reasons why
I've been enjoying using this language for

120
00:07:03.241 --> 00:07:04.331
tooling for various things.

121
00:07:04.331 --> 00:07:08.119
I've even played around
with it on one with wasum,

122
00:07:08.119 --> 00:07:11.645
it's super outrageously
radical with wasum so

123
00:07:11.645 --> 00:07:16.592
Rust has this thing called macros,
I just want to find the syntax.

124
00:07:16.592 --> 00:07:21.153
Macros are usually considered the devil
and I totally am on board with

125
00:07:21.153 --> 00:07:25.490
it being the devil but
starter templates examples, there we go.

126
00:07:25.490 --> 00:07:26.680
Edit this page, awesome.

127
00:07:26.680 --> 00:07:28.260
That's exactly what you wanted to see.

128
00:07:28.260 --> 00:07:32.649
And so let's just do, look at that
game of life, what do we want to do?

129
00:07:32.649 --> 00:07:35.937
Simple SSR to do MVC, why not?

130
00:07:35.937 --> 00:07:41.944
That seems pretty reasonable, let's just
look at does this have some HTML in it?

131
00:07:41.944 --> 00:07:47.018
HTML, all right, look at this,

132
00:07:47.018 --> 00:07:51.196
does that look like React?

133
00:07:51.196 --> 00:07:54.586
Yeah, pretty much you're doing very, very
similar things as you would do in React.

134
00:07:54.586 --> 00:07:58.534
So Rust has a super powerful macro system
and people make the coolest stuff.

135
00:07:58.534 --> 00:08:01.348
You'll see it we'll be using a macro or
two coming up and so

136
00:08:01.348 --> 00:08:05.198
you have things that look just like
something you're already familiar with and

137
00:08:05.198 --> 00:08:07.394
even has hooks and everything else, right?

138
00:08:07.394 --> 00:08:08.969
It has a good state all that so

139
00:08:08.969 --> 00:08:13.050
you can get these pretty fun concepts
because of how powerful rust can be.

140
00:08:13.050 --> 00:08:16.202
Now I personally don't write any macros
because I've never not shot myself in

141
00:08:16.202 --> 00:08:17.786
the foot but I do know they're useful.

142
00:08:17.786 --> 00:08:19.542
I do know that you can do things of them,

143
00:08:19.542 --> 00:08:21.475
I just always end up
doing the wrong thing.

144
00:08:21.475 --> 00:08:24.803
It seems like-
&gt;&gt; Will two references to the same

145
00:08:24.803 --> 00:08:27.559
constant number in Rust be equal?

146
00:08:27.559 --> 00:08:33.426
&gt;&gt; Yes, I wanna say yes, so you're
saying like this alright, B equals 5,

147
00:08:33.426 --> 00:08:38.555
C equals A reference to B,
D equals A reference to B if C equals D.

148
00:08:38.555 --> 00:08:39.997
First off there are types the same, right?

149
00:08:39.997 --> 00:08:42.629
And a reference to an I 32 and
a reference to an I 32,

150
00:08:42.629 --> 00:08:44.356
You can always have the same types.

151
00:08:44.356 --> 00:08:47.863
Now if I did this,
they wouldn't be the same because

152
00:08:47.863 --> 00:08:52.423
what is the problem you you have,
of course D is a double reference.

153
00:08:52.423 --> 00:08:54.204
C is a singular reference,

154
00:08:54.204 --> 00:08:58.003
now I can strip one of the references
off of D by doing this.

155
00:08:58.003 --> 00:09:02.491
There you go, or I can add a reference to
C by doing that and so it's just reference

156
00:09:02.491 --> 00:09:07.455
playing now, you don't really deal with
pointers in Rust, there's just references.

157
00:09:07.455 --> 00:09:10.344
I know that's like such a subtle
difference but the difference with

158
00:09:10.344 --> 00:09:13.850
the pointer is that you can kind of move
a pointer around whereas with a reference.

159
00:09:13.850 --> 00:09:18.584
I can't really move a reference around
I either dereference the thing or

160
00:09:18.584 --> 00:09:20.144
reference it, right?

161
00:09:20.144 --> 00:09:22.184
There, eight pointers you
can plus one to it and

162
00:09:22.184 --> 00:09:24.175
boom you've just moved
the width of the item.

163
00:09:24.175 --> 00:09:27.215
And now you're often magical stack
smashing land which by the way I've

164
00:09:27.215 --> 00:09:30.204
smashed many, a stack in my day
pointer arithmetic does take place but

165
00:09:30.204 --> 00:09:31.182
it's in unsafe mode.

166
00:09:31.182 --> 00:09:32.861
I believe you can do it in unsafe mode so

167
00:09:32.861 --> 00:09:36.390
if you get really adventurous which I've
still not even used on safe mode once.

168
00:09:36.390 --> 00:09:40.034
I've never needed to use it I believe
you can do pointer arithmetic but

169
00:09:40.034 --> 00:09:43.863
then you leave the bounds of safety
the strong Rust won't hold you at night

170
00:09:43.863 --> 00:09:46.924
telling you everything will be okay,
you're off doing.

171
00:09:46.924 --> 00:09:49.150
Who knows what and it's dangerous-

