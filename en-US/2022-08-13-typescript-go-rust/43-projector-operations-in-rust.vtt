WEBVTT

1
00:00:00.060 --> 00:00:03.140
Let's start with good value, is that fine?

2
00:00:03.140 --> 00:00:05.080
And of course, I just realized
I forgot to add the word pub.

3
00:00:05.080 --> 00:00:07.770
You can't be doing much without that.

4
00:00:07.770 --> 00:00:09.780
And I just did this and go style.

5
00:00:09.780 --> 00:00:11.400
And I did it and go style twice.

6
00:00:11.400 --> 00:00:15.180
You know too much go and
you forget how to write code, there we go.

7
00:00:15.180 --> 00:00:17.311
All right, you should be using snake case,

8
00:00:17.311 --> 00:00:20.360
it was gonna yell at me about
snake case at any moment.

9
00:00:20.360 --> 00:00:22.260
There we go, beautiful.

10
00:00:22.260 --> 00:00:24.167
So, we're gonna do get value now and
get values pretty simple.

11
00:00:24.167 --> 00:00:28.815
Remember is of course it takes in
a key which is gonna be a string and

12
00:00:28.815 --> 00:00:32.970
it's gonna return out an option
that is a string, right?

13
00:00:32.970 --> 00:00:37.574
Because we may or
may not find this value correct?

14
00:00:37.574 --> 00:00:38.488
Correct, all right.

15
00:00:39.884 --> 00:00:43.097
So this currently exists in
the static space we gotta

16
00:00:43.097 --> 00:00:44.931
go like this itself awesome.

17
00:00:44.931 --> 00:00:47.031
So now we're actually on the instance or

18
00:00:47.031 --> 00:00:50.690
on the struct instance itself and
we have reference to that item.

19
00:00:50.690 --> 00:00:54.144
So now I can do this simple
like self.data.projector and

20
00:00:54.144 --> 00:00:57.250
now start doing
the operations we need to do.

21
00:00:57.250 --> 00:01:01.988
So if you remember we have to go through
all of our directories starting with where

22
00:01:01.988 --> 00:01:06.850
we're at, and walk all the way up the tree
until we get to the root directory.

23
00:01:06.850 --> 00:01:09.670
Now Russ does this a little bit
different than the other two?

24
00:01:09.670 --> 00:01:11.830
And some would argue it's nicer.

25
00:01:11.830 --> 00:01:14.240
But it's gonna take a little bit
of playing around with types.

26
00:01:14.240 --> 00:01:17.564
So let's kind of work our way there,
we're gonna run into a couple errors but

27
00:01:17.564 --> 00:01:19.065
overall we're gonna get it done.

28
00:01:27.455 --> 00:01:28.747
All right, beautiful.

29
00:01:28.747 --> 00:01:33.535
So let's first start
with how do we do this?

30
00:01:33.535 --> 00:01:38.853
Well, if you look at our present
working directory something like this,

31
00:01:38.853 --> 00:01:43.790
let mute current equals
self.present working directory.

32
00:01:43.790 --> 00:01:46.900
Oops sorry,
config.present working directory.

33
00:01:46.900 --> 00:01:48.470
So what is present working directory?

34
00:01:48.470 --> 00:01:49.870
It's a path buff.

35
00:01:49.870 --> 00:01:52.739
So in the other languages we
use a method like dirt or

36
00:01:52.739 --> 00:01:55.960
dirname kind of really mapping
to the Unix style in rust.

37
00:01:55.960 --> 00:01:58.330
We don't have that,
instead what do we have?

38
00:01:58.330 --> 00:02:02.244
We actually have parent right there
on there but what does it return?

39
00:02:02.244 --> 00:02:07.124
A returns an option of path which is
pretty nice because that will technically

40
00:02:07.124 --> 00:02:11.190
return an option to a reference path and
what is nice about that?

41
00:02:11.190 --> 00:02:14.389
Is that allows us to know
when we've hit the limit.

42
00:02:14.389 --> 00:02:17.039
Meaning that it actually says,
hey, there's nothing left,

43
00:02:17.039 --> 00:02:18.970
there's no more parents at the root.

44
00:02:18.970 --> 00:02:24.360
Whereas dirname just keeps on returning,
the slash directory over and over again.

45
00:02:24.360 --> 00:02:26.894
So a little bit nicer API,
I would say, but

46
00:02:26.894 --> 00:02:29.940
we now have an option we have to handle.

47
00:02:29.940 --> 00:02:32.250
So let's try to kind of do
this one step at a time.

48
00:02:32.250 --> 00:02:35.905
So that means if we're clever
about what current is,

49
00:02:35.905 --> 00:02:39.977
we could probably have a really
nice little walking style.

50
00:02:39.977 --> 00:02:40.986
So let's try to think about that.

51
00:02:40.986 --> 00:02:45.374
What I ideally want to do is
to be able to like this while

52
00:02:45.374 --> 00:02:50.557
curr.is_some right it's like it
is a value while is a value.

53
00:02:50.557 --> 00:02:52.080
We should do this.

54
00:02:52.080 --> 00:02:56.492
Now we could also get real clever,
I believe, and do this,

55
00:02:56.492 --> 00:03:02.070
while path = curr, right, and
really get super duper clever right here.

56
00:03:02.070 --> 00:03:06.707
And while we can still get a value
out of our current directory,

57
00:03:06.707 --> 00:03:08.770
we'll keep on going.

58
00:03:08.770 --> 00:03:11.640
So I think this is pretty nice,
pretty clever.

59
00:03:11.640 --> 00:03:13.710
But that means we need
to do something here.

60
00:03:13.710 --> 00:03:16.540
So we can go okay,
well I can turn this into a sum right?

61
00:03:17.920 --> 00:03:20.350
And so
now this is sort of working correct?

62
00:03:20.350 --> 00:03:22.532
We are now grabbing out that value and
doing something.

63
00:03:22.532 --> 00:03:25.110
At the very bottom of this just
to kind of get rid of that error.

64
00:03:25.110 --> 00:03:26.350
I'm just gonna return down really quickly.

65
00:03:26.350 --> 00:03:29.220
So rust analyzer doesn't
keep harassing me like this.

66
00:03:29.220 --> 00:03:33.000
But as you can see we're now kind of in a
good place I like how the code is looking,

67
00:03:33.000 --> 00:03:34.980
it's feeling good what is p?

68
00:03:34.980 --> 00:03:36.943
P is a path buff fantastic.

69
00:03:36.943 --> 00:03:41.524
So that means I should be able
to like this cur=p.parent right?

70
00:03:41.524 --> 00:03:44.640
Well we have a slight problem here.

71
00:03:44.640 --> 00:03:46.460
What is the slight problem?

72
00:03:46.460 --> 00:03:48.060
Well what is parents return?

73
00:03:48.060 --> 00:03:54.077
It returns an option to a reference path
whereas what we have is a path buff,

74
00:03:54.077 --> 00:03:54.750
right?

75
00:03:54.750 --> 00:03:57.688
Like we're so close yet
we're just so dang far.

76
00:03:57.688 --> 00:04:01.500
So what happened if we jump up here and
we go to or as path.

77
00:04:03.580 --> 00:04:06.950
What just happened there as
path is a lot like as stir.

78
00:04:06.950 --> 00:04:08.830
It's a reference to the thing.

79
00:04:08.830 --> 00:04:12.427
The path buff is obviously the thing.

80
00:04:12.427 --> 00:04:15.840
As path is the reference to it.

81
00:04:15.840 --> 00:04:18.220
So now that I've done that I
can do this nice little loop.

82
00:04:18.220 --> 00:04:21.950
I'm literally gonna walk the whole
thing and we're pretty much good to go.

83
00:04:21.950 --> 00:04:22.940
Right?
This is fantastic.

84
00:04:22.940 --> 00:04:24.770
This looks really nice to me at least.

85
00:04:24.770 --> 00:04:26.530
I'm happy about it.

86
00:04:26.530 --> 00:04:31.406
And so that means we can now start
trying to grab values out to see does it

87
00:04:31.406 --> 00:04:33.153
exist on our projector.

88
00:04:33.153 --> 00:04:34.680
So let's go self.

89
00:04:34.680 --> 00:04:37.370
And of course it's on the data projector.

90
00:04:37.370 --> 00:04:40.340
So now we're into
the whole HashMap working.

91
00:04:40.340 --> 00:04:43.041
So in our head without
looking at any documentation,

92
00:04:43.041 --> 00:04:47.070
I bet you there's probably like a get
an insert, a remove something like that.

93
00:04:47.070 --> 00:04:52.330
Right you can see a get, you can see
a remove, you can see an insert, right?

94
00:04:52.330 --> 00:04:55.100
It has pretty much all
the things you would expect.

95
00:04:55.100 --> 00:04:56.090
It has a contains.

96
00:04:56.090 --> 00:04:59.540
If you really want to
go about this method.

97
00:04:59.540 --> 00:05:00.720
So we can start there.

98
00:05:00.720 --> 00:05:04.102
We can kind of just play with something
that's a bit more procedural.

99
00:05:04.102 --> 00:05:05.571
We can try different things so

100
00:05:05.571 --> 00:05:09.000
we can start with this right
now contains key right?

101
00:05:09.000 --> 00:05:10.113
We may change it here shortly.

102
00:05:10.113 --> 00:05:13.636
So I can go if projector
contains key P well,

103
00:05:13.636 --> 00:05:18.150
then we know that there's
something there right?

104
00:05:18.150 --> 00:05:21.280
But I'm not gonna lie to you that's
it's a little annoying, right?

105
00:05:21.280 --> 00:05:24.814
Can we at least agree that's kind
of like now I have to ask for

106
00:05:24.814 --> 00:05:29.008
the value out of projector and
then it's probably gonna be an option.

107
00:05:29.008 --> 00:05:30.900
And then [INAUDIBLE].

108
00:05:30.900 --> 00:05:32.660
So let's try something maybe
a little bit different.

109
00:05:32.660 --> 00:05:34.420
Can we get something
different out of here?

110
00:05:34.420 --> 00:05:36.010
So let's try go like this.

111
00:05:36.010 --> 00:05:38.840
How about sum, I don't know
what the value is going to be.

112
00:05:38.840 --> 00:05:39.838
And let's try self.

113
00:05:39.838 --> 00:05:46.334
Data, projector get and
then let's pass in peak all right.

114
00:05:46.334 --> 00:05:50.504
So, what do we get out of here
well it's gonna say hey mismatch,

115
00:05:50.504 --> 00:05:54.983
types right what is key return it
should return an option of value,

116
00:05:54.983 --> 00:05:58.360
I forgot the word let there we go,
so what is V?

117
00:05:58.360 --> 00:06:00.960
Well V is a reference to the HashMap so
this is good.

118
00:06:00.960 --> 00:06:02.966
This is kind of what we
wanted anyways right?

119
00:06:02.966 --> 00:06:04.240
We got the thing we wanted.

120
00:06:04.240 --> 00:06:06.800
It's already unwrapped for
us this feels really nice.

121
00:06:06.800 --> 00:06:08.949
Now obviously,
we could have used in an event or

122
00:06:08.949 --> 00:06:12.444
map on the options object that's another
option we could have gone with, but

123
00:06:12.444 --> 00:06:14.910
we'll keep going pretty
procedural on this.

124
00:06:14.910 --> 00:06:16.650
So we have the HashMap.

125
00:06:16.650 --> 00:06:20.057
So I'm gonna just like in go,
we'll just call this thing dirt.

126
00:06:20.057 --> 00:06:22.900
And now we can do something with this,
right?

127
00:06:22.900 --> 00:06:25.640
We can say hey do you have this value,
right?

128
00:06:25.640 --> 00:06:29.760
So we're gonna program this
identical to how we did it in Go.

129
00:06:29.760 --> 00:06:37.960
So we can go let sum value Do dirt.gets
and then we can use the key, right?

130
00:06:37.960 --> 00:06:41.483
The key that is passed in but
now of course what does it saying hey,

131
00:06:41.483 --> 00:06:42.584
what does get need?

132
00:06:42.584 --> 00:06:46.459
Get does not need the concrete
object string cuz that means every

133
00:06:46.459 --> 00:06:50.702
single time you called get you'd
have to clone off your string right?

134
00:06:50.702 --> 00:06:55.139
It only needs a reference to the left
hand side right or the key value so

135
00:06:55.139 --> 00:06:56.591
I can go like this hey,

136
00:06:56.591 --> 00:07:01.583
are the key type again have a reference
to the string awesome I have the value.

137
00:07:01.583 --> 00:07:07.790
So if statement does happen really I found
what I need to find, and what is value?

138
00:07:07.790 --> 00:07:10.500
Well, value is an ampersand string.

139
00:07:10.500 --> 00:07:15.432
Okay, we could probably do this,
why don't we just try jumping up

140
00:07:15.432 --> 00:07:19.770
here turn it into one of those and
then have let out = none.

141
00:07:19.770 --> 00:07:24.242
Down here, do a little out down here and
just do five up,

142
00:07:24.242 --> 00:07:27.390
we've got to make this thing mutable.

143
00:07:27.390 --> 00:07:30.600
Always make it mutable, right?

144
00:07:30.600 --> 00:07:32.700
Go out = sum value right?

145
00:07:34.300 --> 00:07:35.841
There we go.
This is what we would expect,

146
00:07:35.841 --> 00:07:37.900
that means the outside of our
program couldn't call in.

147
00:07:37.900 --> 00:07:40.950
If this happens, awesome, we have a value.

148
00:07:40.950 --> 00:07:43.180
So this is one way of just doing it.

149
00:07:43.180 --> 00:07:46.232
Obviously, when you have options,
you have functional things,

150
00:07:46.232 --> 00:07:49.000
there's a lot of different
ways we could do this.

151
00:07:49.000 --> 00:07:52.207
This just feels like a very if
you're familiar with typescript or

152
00:07:52.207 --> 00:07:55.957
go this feels like a very similar
approach and we're gonna stick with this.

153
00:07:55.957 --> 00:07:58.190
So awesome We've done it, hurray.

154
00:08:00.630 --> 00:08:01.981
Let's do the next method,

155
00:08:01.981 --> 00:08:05.500
which I think is probably arguably
the hardest of the methods.

156
00:08:05.500 --> 00:08:08.540
But I think rust is gonna
really help us out on this.

157
00:08:08.540 --> 00:08:12.093
So let's do public function get value all,
right.

158
00:08:12.093 --> 00:08:15.662
So this is the one where we
take nothing in except for

159
00:08:15.662 --> 00:08:21.520
of course a reference to self, and we the
produce out a HashMap of string string.

160
00:08:21.520 --> 00:08:25.245
Now there's going to be some copying
here and that's okay, right,

161
00:08:25.245 --> 00:08:26.991
we're gonna be okay with this.

162
00:08:26.991 --> 00:08:30.517
We're not trying to go with the most
performance driven piece of code,

163
00:08:30.517 --> 00:08:34.120
we're just gonna do what we have to
do to get things done, it'll be fun.

164
00:08:35.470 --> 00:08:37.540
So let's erase pretty much most of this.

165
00:08:37.540 --> 00:08:39.800
Now remember, what do we need to do first?

166
00:08:39.800 --> 00:08:43.574
Well we need to get the list of paths, but

167
00:08:43.574 --> 00:08:49.580
we need to walk it backwards afterwards,
so let's do that now.

168
00:08:49.580 --> 00:08:54.390
So what I'm gonna do is I'm gonna like
this, I'm gonna go pass equals a vector.

169
00:08:54.390 --> 00:08:57.098
Now I don't have to give it
a type because rust is just gonna

170
00:08:57.098 --> 00:08:58.770
figure out what the type should be.

171
00:09:00.140 --> 00:09:04.777
And then in here I'm
just gonna go like this,

172
00:09:04.777 --> 00:09:08.328
path.push current, all right.

173
00:09:08.328 --> 00:09:10.842
And so what's happening here,
it says, hey, can't find current,

174
00:09:10.842 --> 00:09:12.943
I must have accidentally
deleted current from down here.

175
00:09:12.943 --> 00:09:15.010
Let's just paste it right here, beautiful.

176
00:09:15.010 --> 00:09:18.534
So it figured out what paths it's supposed
to be based on how it's being used.

177
00:09:18.534 --> 00:09:21.847
You can see right here it's
a vector of option path,

178
00:09:21.847 --> 00:09:25.849
we kind of we know enough that
this it's better than that here.

179
00:09:25.849 --> 00:09:29.363
Actually let's go like this, p,
sorry, wrong one, there we go.

180
00:09:29.363 --> 00:09:31.494
It's a vector of reference path.

181
00:09:31.494 --> 00:09:34.330
Awesome, so we have the references
to each one of these paths.

182
00:09:34.330 --> 00:09:40.691
So now all we really need to do Is
walk backwards through this vector.

183
00:09:40.691 --> 00:09:45.410
And each one of the paths, check to see
if there's a HashMap available, and

184
00:09:45.410 --> 00:09:49.268
then merge the HashMap into some
greater hash map and be done.

185
00:09:49.268 --> 00:09:51.381
Everyone good with that?

186
00:09:51.381 --> 00:09:53.300
All right, so let's do that.

187
00:09:53.300 --> 00:09:54.370
Let's go like this.

188
00:09:54.370 --> 00:09:57.900
We're gonna use a for loop this time,
it makes it a little bit more fun.

189
00:09:57.900 --> 00:09:58.794
So let's go like this.

190
00:09:58.794 --> 00:10:06.510
For path in pass itter reverse.

191
00:10:06.510 --> 00:10:08.580
Awesome, so now we're just gonna
walk backwards through this.

192
00:10:08.580 --> 00:10:10.349
And so what is each path, of course?

193
00:10:10.349 --> 00:10:15.342
It is a reference to
a reference to a path.

194
00:10:15.342 --> 00:10:18.392
And that makes sense because
I didn't do into iterator,

195
00:10:18.392 --> 00:10:20.944
if I did into iterator
what happens to my paths?

196
00:10:20.944 --> 00:10:22.030
We consume it.

197
00:10:22.030 --> 00:10:25.587
So we could do that,
we could go into iter, fantastic, and

198
00:10:25.587 --> 00:10:28.600
now we just have a simple
reference to a path.

199
00:10:28.600 --> 00:10:33.520
This also works out,
we'll just do it this way, why not?

200
00:10:33.520 --> 00:10:34.310
Let's just consume that.

201
00:10:34.310 --> 00:10:36.608
We don't need that vector afterwards,
let's just destroy it,

202
00:10:36.608 --> 00:10:37.890
we don't want it, right.

203
00:10:37.890 --> 00:10:41.796
And you can tell right away that if you
tried to do get 0 it should say, hey,

204
00:10:41.796 --> 00:10:44.840
you can't do that,
let A equals this, right.

205
00:10:44.840 --> 00:10:50.191
It should say you're not supposed
to be able to do that, my goodness,

206
00:10:50.191 --> 00:10:56.175
rust analyzer only operates in steps so
won't actually give me that error.

207
00:10:56.175 --> 00:10:57.775
All right, whatever, I'm not going
to make that force the error.

208
00:10:57.775 --> 00:11:01.285
Okay, so we have it here,
we have the path.

209
00:11:01.285 --> 00:11:04.765
Let's go and
see do we have this in our hash map?

210
00:11:04.765 --> 00:11:10.353
So self data projector, and then we can
do a get and we can provide our path,

211
00:11:10.353 --> 00:11:15.355
right, cuz it is a reference so
it uses that niceness right there.

212
00:11:15.355 --> 00:11:16.245
Everything's looking good.

213
00:11:16.245 --> 00:11:23.818
We have our beautiful item,
here, returned on.

214
00:11:23.818 --> 00:11:25.707
There we go, just it needs to be quiet.

215
00:11:25.707 --> 00:11:26.558
All right, there we go.

216
00:11:26.558 --> 00:11:28.815
So we now have the value out.

217
00:11:28.815 --> 00:11:30.260
What does it return though?

218
00:11:30.260 --> 00:11:34.410
It of course returns an option
of HashMap string string.

219
00:11:34.410 --> 00:11:37.207
So let's kind of use a little
bit more optional stuff on here.

220
00:11:37.207 --> 00:11:39.157
We can map this thing, right,

221
00:11:39.157 --> 00:11:42.916
we can actually do an operation
if this thing is something.

222
00:11:42.916 --> 00:11:50.006
So we have two different options here, we
can either do an if some map equals this,

223
00:11:54.475 --> 00:11:57.490
Or we could do the exact same thing.

224
00:11:57.490 --> 00:12:02.303
I'm just kind of showing you guys some
of the options that are available, and

225
00:12:02.303 --> 00:12:04.620
do a map and provide a x right here.

226
00:12:04.620 --> 00:12:08.148
As you can see, this is a reference
to a HashMap string string, and

227
00:12:08.148 --> 00:12:12.840
of course as you can see right here, this
is the same reference to the same thing.

228
00:12:12.840 --> 00:12:15.190
So how do you want to do it, right?

229
00:12:15.190 --> 00:12:16.470
It's kind of up to you.

230
00:12:16.470 --> 00:12:19.540
There's benefits to always staying in
options, which is really, really nice.

231
00:12:19.540 --> 00:12:22.578
This is just a simple and explicit so
you get to choose what kind of stick and

232
00:12:22.578 --> 00:12:24.500
a little bit more procedural for
these parts.

233
00:12:24.500 --> 00:12:27.000
So we'll just keep on going
down that path right now.

234
00:12:27.000 --> 00:12:28.553
But now we need to return something, and

235
00:12:28.553 --> 00:12:31.230
we needed a way to be able to
merge all this stuff together.

236
00:12:31.230 --> 00:12:37.430
So let's create a let out and
make it equal a hash map niil, all right.

237
00:12:37.430 --> 00:12:41.305
No need to give it any types because
we're just gonna go out, it'll be able

238
00:12:41.305 --> 00:12:45.320
to assume it's types, fantastic, and
it's gonna be a type string string.

239
00:12:46.430 --> 00:12:48.734
So we now have a string string one, and

240
00:12:48.734 --> 00:12:52.320
now we need to just merge
that into our new HashMap.

241
00:12:52.320 --> 00:12:53.530
So how are we gonna do that?

242
00:12:53.530 --> 00:12:56.250
Well hash maps come with this
beautiful method called extend.

243
00:12:57.630 --> 00:12:59.820
Extend, let's see, where are you?

244
00:12:59.820 --> 00:13:02.220
There we go.
And what does extend do?

245
00:13:02.220 --> 00:13:03.260
Okay, I'm gonna zoom it out one bit.

246
00:13:06.080 --> 00:13:07.660
Effectively what is extend do?

247
00:13:07.660 --> 00:13:10.820
It extends a collection with
the contents of an iterator.

248
00:13:12.190 --> 00:13:17.080
Awesome, so that means I should
be able to go map dot iterator.

249
00:13:18.690 --> 00:13:22.110
So I've just extended this thing out.

250
00:13:22.110 --> 00:13:22.680
But what happened?

251
00:13:22.680 --> 00:13:24.680
We're seeing some issues, right.

252
00:13:24.680 --> 00:13:28.376
You can see right up here on top, I can't
use my, I'm trying to use the touchscreen.

253
00:13:28.376 --> 00:13:30.823
Yeah, look at that touchscreen,
go, it's way off.

254
00:13:30.823 --> 00:13:35.500
Anyways, you can see right there
that it's expecting something.

255
00:13:35.500 --> 00:13:36.830
Get down here we have the error.

256
00:13:36.830 --> 00:13:39.122
So this is rust analyzer trying to
give you the full nine yards of

257
00:13:39.122 --> 00:13:40.240
what's happening.

258
00:13:40.240 --> 00:13:42.507
So it's saying, hey,
this is where the error started, and

259
00:13:42.507 --> 00:13:44.380
this is where the error is resulting in.

260
00:13:44.380 --> 00:13:46.661
So let's go down here,
let's look at the error.

261
00:13:46.661 --> 00:13:50.591
Mismatched types,
expected a HashMap of string string but

262
00:13:50.591 --> 00:13:54.766
found a HashMap of reference to string,
reference to string.

263
00:13:54.766 --> 00:13:59.830
This would probably work out, so let's
just hop back up here, do that, right,

264
00:13:59.830 --> 00:14:04.870
because we are just referring to these
string objects inside this HashMap.

265
00:14:04.870 --> 00:14:08.780
That's probably fine, right,
we should probably be okay with that.

266
00:14:08.780 --> 00:14:09.410
And so we'll do that.

267
00:14:10.550 --> 00:14:12.150
Awesome, that's exactly what happened.

268
00:14:12.150 --> 00:14:15.290
Now look, that's it,
we're pretty much done with this method.

269
00:14:15.290 --> 00:14:17.381
We wrote it in a fairly
straightforward and easy way,

270
00:14:17.381 --> 00:14:18.643
I didn't think it was too hard.

271
00:14:18.643 --> 00:14:21.912
I'd say it's pretty much no different
than what you'd see in something like

272
00:14:21.912 --> 00:14:24.650
JavaScript if you're
familiar enough with rust.

273
00:14:24.650 --> 00:14:29.386
And so let's go down and let's do the last
two of the greatest methods ever,

274
00:14:29.386 --> 00:14:31.310
which of course are set value.

275
00:14:31.310 --> 00:14:34.300
Look at that,
it even gives me all the way up to here.

276
00:14:34.300 --> 00:14:36.652
We're gonna set value key string string or

277
00:14:36.652 --> 00:14:40.300
key value string string, and
then we need to remove value.

278
00:14:40.300 --> 00:14:43.040
So setting value shouldn't be too hard.

279
00:14:43.040 --> 00:14:44.890
Again, we're using the HashMap.

280
00:14:44.890 --> 00:14:47.090
It can be a little bit goofy,
so let's go like this.

281
00:14:47.090 --> 00:14:50.126
Let's see what we have available cuz maybe
there's a better method we could use to

282
00:14:50.126 --> 00:14:51.810
make this a little bit more fun.

283
00:14:51.810 --> 00:14:56.188
All right, data projector,
so we could get mutable, so

284
00:14:56.188 --> 00:15:02.133
this means it returns a mutable reference
for us instead of just a reference.

285
00:15:02.133 --> 00:15:05.576
Obviously a mutable reference would be
very good cuz if there is something

286
00:15:05.576 --> 00:15:08.590
underneath, we need to be able
to do something to it, correct?

287
00:15:09.980 --> 00:15:12.320
Correct, but we can try something
a little bit different.

288
00:15:12.320 --> 00:15:16.870
Let's try, how about entry.

289
00:15:16.870 --> 00:15:21.417
So entry is fantastic, so given a key
corresponding entry right here.

290
00:15:21.417 --> 00:15:25.283
So we can actually go, hey,
I need an entry into this hash map, and

291
00:15:25.283 --> 00:15:29.653
we'll pass in, I believe we'll pass
in the key, it will consume the key.

292
00:15:29.653 --> 00:15:33.121
And so now we can go, or Insert, and

293
00:15:33.121 --> 00:15:39.090
now we can actually grab and
create something right here.

294
00:15:39.090 --> 00:15:40.011
I've never tried or

295
00:15:40.011 --> 00:15:43.106
default but right away I have a very
good idea probably what it does.

296
00:15:43.106 --> 00:15:46.605
My guess is that it does it calls the
default trait on the object, as long as it

297
00:15:46.605 --> 00:15:49.925
has the default trait implemented
it should just be able to do that.

298
00:15:49.925 --> 00:15:54.283
So ensure the value is in the entry by
inserting the default value if empty.

299
00:15:54.283 --> 00:15:54.966
Awesome.

300
00:15:54.966 --> 00:15:58.117
So by doing this, let's just go like this,

301
00:15:58.117 --> 00:16:01.962
let's just see what type
what do we got here, right?

302
00:16:01.962 --> 00:16:02.512
All right,

303
00:16:02.512 --> 00:16:06.534
now it's saying we actually have a mutable
reference to the HashMap string, string.

304
00:16:06.534 --> 00:16:07.136
So this is good.

305
00:16:07.136 --> 00:16:09.977
We could actually do something to that.

306
00:16:09.977 --> 00:16:10.920
So let's erase that.

307
00:16:10.920 --> 00:16:12.688
We don't really need to look at that.

308
00:16:12.688 --> 00:16:14.666
Now obviously,
something's going wrong here.

309
00:16:14.666 --> 00:16:18.337
Found a struct path buff,
but we provided a string.

310
00:16:18.337 --> 00:16:24.353
So my bad on that one, self.config.pdw.

311
00:16:24.353 --> 00:16:25.077
All right, there we go.

312
00:16:25.077 --> 00:16:29.782
So if there is a present working,
grab the present working directory.

313
00:16:29.782 --> 00:16:32.417
If there's nothing there,
put them into default value.

314
00:16:32.417 --> 00:16:33.594
Let's back this thing up a little bit.

315
00:16:36.441 --> 00:16:40.386
Awesome, so now we have something
we need to insert into, right?

316
00:16:40.386 --> 00:16:45.818
We have either an empty HashMap or we
have one that is already existing there.

317
00:16:45.818 --> 00:16:47.701
Something like this.
I'm gonna use insert and

318
00:16:47.701 --> 00:16:49.174
let's just pass in key.

319
00:16:49.174 --> 00:16:50.747
Let's just pass in value.

320
00:16:50.747 --> 00:16:52.137
And guess what?

321
00:16:52.137 --> 00:16:53.631
What do we got here?

322
00:16:53.631 --> 00:16:56.803
[LAUGH] Well, I guess we're done.

323
00:16:56.803 --> 00:17:00.417
How great is that?

324
00:17:00.417 --> 00:17:03.904
So, pretty fantastic.

325
00:17:03.904 --> 00:17:05.737
I'm happy about that.

326
00:17:05.737 --> 00:17:09.884
It actually is a bit easier than
both Go and TypeScript, right?

327
00:17:09.884 --> 00:17:12.598
Because we are actually,
we can do both the getting and

328
00:17:12.598 --> 00:17:16.144
inserting operation at the same time,
and so it's pretty fantastic.

329
00:17:16.144 --> 00:17:16.699
I like it.

330
00:17:16.699 --> 00:17:18.614
I think it's actually
pretty fun to play with.

331
00:17:18.614 --> 00:17:21.509
The hash like I said,
the HashMap interface is pretty extensive.

332
00:17:21.509 --> 00:17:24.113
It's a little bit more than
what you would expect.

333
00:17:24.113 --> 00:17:27.398
Definitely takes a little bit
more time to master, but I'd say,

334
00:17:27.398 --> 00:17:29.139
other ones from other languages.

335
00:17:29.139 --> 00:17:31.022
Other languages are really dirt simple.

336
00:17:31.022 --> 00:17:34.228
So, last thing we want to
do is do a remove value,

337
00:17:34.228 --> 00:17:36.437
which is just gonna take in a key.

338
00:17:36.437 --> 00:17:38.198
And now we're just gonna
do the exact same thing.

339
00:17:38.198 --> 00:17:40.559
We're go have to get and to delete.

340
00:17:40.559 --> 00:17:45.253
So, we could this where we
do the exact same thing,

341
00:17:45.253 --> 00:17:51.494
where we actually grab the entry,
or we default it and we remove it.

342
00:17:51.494 --> 00:17:54.063
So to keep things simple,
we could do that, but

343
00:17:54.063 --> 00:17:56.325
there is one problem of course with that.

344
00:17:56.325 --> 00:17:59.151
That means if this entry
didn't exist before,

345
00:17:59.151 --> 00:18:02.553
we would create the entry as
an empty object inside of it.

346
00:18:02.553 --> 00:18:03.780
Is that a problem?

347
00:18:03.780 --> 00:18:05.599
I'd say probably not a problem.

348
00:18:05.599 --> 00:18:08.809
But why not?

349
00:18:08.809 --> 00:18:11.002
Right?
I personally don't think it's a big deal.

350
00:18:11.002 --> 00:18:14.704
So let's just throw in this, and of course
what happens here, it's saying, hey,

351
00:18:14.704 --> 00:18:16.073
you want to remove something.

352
00:18:16.073 --> 00:18:21.650
I don't need the value itself I just
need a reference to that value.

353
00:18:21.650 --> 00:18:25.676
So a lot of the times how you choose
to do these interfaces are gonna affect

354
00:18:25.676 --> 00:18:27.726
especially in testing and all that.

355
00:18:27.726 --> 00:18:33.677
So, I mean, in some sense, it almost would
be a lot easier to have this correct.

356
00:18:33.677 --> 00:18:36.691
Because if we had that,
what do we have right here?

357
00:18:36.691 --> 00:18:38.451
Well, it just it just kind of works out.

358
00:18:38.451 --> 00:18:42.478
And you can imagine when we're testing,
I can just pass the string in,

359
00:18:42.478 --> 00:18:45.499
as opposed to having to call
the string constructor or

360
00:18:45.499 --> 00:18:48.808
do to string clone it out into
a different object, right?

361
00:18:48.808 --> 00:18:52.978
So there is a some value in kind of
thinking about how you keep your

362
00:18:52.978 --> 00:18:53.838
signature.

363
00:18:53.838 --> 00:18:56.556
So for remove value,
we'll keep it as an ampersand stir or

364
00:18:56.556 --> 00:18:58.560
just what they just
call it a stir usually.

365
00:18:58.560 --> 00:19:01.491
So that's just a string reference,
there you go.

366
00:19:01.491 --> 00:19:02.574
Fantastic, right?

367
00:19:02.574 --> 00:19:05.400
Now, we either do
the testing portion of this.

368
00:19:05.400 --> 00:19:09.761
I believe we got everything we've been,
I think we got everything here.

369
00:19:09.761 --> 00:19:11.967
I think we're gonna win, right?

370
00:19:11.967 --> 00:19:15.378
I think we're gonna do first try
every time all the languages, so

371
00:19:15.378 --> 00:19:18.059
let's do exactly what we'd normally do for
Rust.

372
00:19:18.059 --> 00:19:20.330
We go down to the bottom of the file,
so bring it up.

373
00:19:20.330 --> 00:19:24.570
Actually, before we do that, let's test
how many lines did it take us to do that?

374
00:19:24.570 --> 00:19:30.728
Starting at 72, or that's our ending at,
and our starting at is at 24.

375
00:19:30.728 --> 00:19:34.376
So that might have even been shorter
than the TypeScript version.

376
00:19:34.376 --> 00:19:36.061
And I believe we could
actually make it even shorter.

377
00:19:36.061 --> 00:19:38.691
So here, let's go to TypeScript,
jump into here.

378
00:19:38.691 --> 00:19:39.225
What are we at?

379
00:19:39.225 --> 00:19:44.777
79 to 23 versus 2472 or

380
00:19:44.777 --> 00:19:48.770
70 was that 72?

381
00:19:48.770 --> 00:19:49.387
Yeah.

382
00:19:49.387 --> 00:19:50.104
Yeah, look at that.

383
00:19:50.104 --> 00:19:51.659
It's like six seven lines sorter and

384
00:19:51.659 --> 00:19:53.976
look they way I did a lot of
things right there, right?

385
00:19:53.976 --> 00:19:56.216
We could whoa,
it's way shorter now, right?

386
00:19:56.216 --> 00:19:58.767
We gotta you know,
we can really do some great things there.

387
00:19:58.767 --> 00:19:59.841
But that's pretty cool, right?

388
00:19:59.841 --> 00:20:02.491
This is a very hard language.

389
00:20:02.491 --> 00:20:05.073
And we did it very procedurally,
very straightforward and

390
00:20:05.073 --> 00:20:06.786
it's actually fairly terse, right?

391
00:20:06.786 --> 00:20:09.299
That's very impressive for
language like this.

392
00:20:09.299 --> 00:20:12.261
If you were to do this in C++ it might
take a few 1000 lines of code, but

393
00:20:12.261 --> 00:20:15.556
that's pretty standard because I'd still
be defining all the way variables, but

394
00:20:15.556 --> 00:20:16.560
we're doing it in Rust.

395
00:20:16.560 --> 00:20:19.806
It's fantastic I love the implicit
nature of being able to figure out these

396
00:20:19.806 --> 00:20:21.931
types like I've been
showing you along the way.

397
00:20:21.931 --> 00:20:24.465
How we can kind of inspect the types,
know what they are, and

398
00:20:24.465 --> 00:20:25.667
make decisions based on it.

