WEBVTT

1
00:00:00.000 --> 00:00:02.457
&gt;&gt; Scott Moss: Now we're gonna,
basically, do some CRUD, right?

2
00:00:02.457 --> 00:00:03.984
We're gonna use a server action,

3
00:00:03.984 --> 00:00:07.159
very similar to kind of what we did
with the form, but outside of a form.

4
00:00:07.159 --> 00:00:10.499
With a form action,
we let the form kind of handle everything,

5
00:00:10.499 --> 00:00:14.167
what we now need to do, we need to
cause some mutations on the server.

6
00:00:14.167 --> 00:00:18.602
In this case, we wanna create an event,
and we need that to come back full circle.

7
00:00:18.602 --> 00:00:21.857
We wanna see the event pop up
on the page after we create it,

8
00:00:21.857 --> 00:00:26.643
without having to go through some type of
client implementation, which is fine, but

9
00:00:26.643 --> 00:00:29.310
we're gonna show you how
to do it without that.

10
00:00:29.310 --> 00:00:33.755
So that's what we're gonna do, but
first, let's kinda talk about it, so

11
00:00:33.755 --> 00:00:35.916
you can use server actions onClick.

12
00:00:35.916 --> 00:00:40.380
So far, we've only used them
on an action prop on a form,

13
00:00:40.380 --> 00:00:43.179
but you can pass them to an onClick.

14
00:00:43.179 --> 00:00:45.854
And if you're using it onClick, that means
you're inside of a client component.

15
00:00:45.854 --> 00:00:49.695
So that means yes, you can use server
actions inside of client components.

16
00:00:49.695 --> 00:00:52.211
That's one of their best use cases,
in fact,

17
00:00:52.211 --> 00:00:54.928
I think we had to do that
with the form regardless.

18
00:00:54.928 --> 00:01:01.295
So, an example of that is having
a button that has a click.

19
00:01:01.295 --> 00:01:04.981
And instead of calling
some function that you

20
00:01:04.981 --> 00:01:09.444
created in that component
that does an awaited fetch,

21
00:01:09.444 --> 00:01:14.406
you can just import that server
action file, and call that.

22
00:01:14.406 --> 00:01:19.046
And it'll do the thing on the server,
you can also await the result of

23
00:01:19.046 --> 00:01:22.898
that server action call and
get the result from it, too.

24
00:01:22.898 --> 00:01:27.536
So the result can be passed back to
the client as long as it's serializable,

25
00:01:27.536 --> 00:01:30.880
because it has to pass through
the network threshold.

26
00:01:30.880 --> 00:01:34.869
But that's that's not unique to server
actions, that's just HTTP in general.

27
00:01:34.869 --> 00:01:39.248
So trying to serialize something circular,
or

28
00:01:39.248 --> 00:01:42.753
dates, serializing dates are hard.

29
00:01:42.753 --> 00:01:47.154
So that might feel they're trying to,
I think I saw a POST request,

30
00:01:47.154 --> 00:01:52.098
I can't remember who's trying,
React is trying to patch the date object,

31
00:01:52.098 --> 00:01:53.812
so it better serializes.

32
00:01:53.812 --> 00:01:57.380
Because people keep running into
this issue of trying to send dates

33
00:01:57.380 --> 00:01:59.492
over the network, and it just breaks.

34
00:01:59.492 --> 00:02:04.233
But a lot of people are downvoting it,
so maybe never.

35
00:02:04.233 --> 00:02:08.576
You can also use server
actions inside of useEffects.

36
00:02:08.576 --> 00:02:12.612
So if you have a useEffects, where you
would typically call your API function to

37
00:02:12.612 --> 00:02:15.519
do something,
you can call your server action instead.

38
00:02:15.519 --> 00:02:17.047
It also works there as well.

39
00:02:17.047 --> 00:02:20.955
It pretty much works everywhere you would
have called some asynchronous function in

40
00:02:20.955 --> 00:02:21.625
your client.

41
00:02:21.625 --> 00:02:25.566
It's gonna work there, for the most part.

42
00:02:28.717 --> 00:02:33.472
&gt;&gt; Scott Moss: Now,
we had some stuff with the form, when,

43
00:02:33.472 --> 00:02:38.240
basically, we can use useFormStatus hook.

44
00:02:38.240 --> 00:02:43.073
That as long as the component that had
that hook was a child of a form that used

45
00:02:43.073 --> 00:02:47.063
the form state, we would get
a property that told us whether or

46
00:02:47.063 --> 00:02:50.480
not it was pending, so
we can get the status of that.

47
00:02:50.480 --> 00:02:55.510
So how do we get the status of a server
action that's not part of a form?

48
00:02:55.510 --> 00:02:57.157
Well, that's where
useTransition comes from.

49
00:02:57.157 --> 00:03:02.732
So useTransition,
the best way I can describe useTransition

50
00:03:02.732 --> 00:03:07.054
is,
&gt;&gt; Scott Moss: It's kinda like useState,

51
00:03:07.054 --> 00:03:11.332
except useState, when you call it,
it will re-render.

52
00:03:11.332 --> 00:03:13.469
useState is basically saying,
hey, re-render this component.

53
00:03:13.469 --> 00:03:15.270
That's what useState is saying, right?

54
00:03:15.270 --> 00:03:17.946
When you call, for instance,
if I call setTab here,

55
00:03:17.946 --> 00:03:21.759
that's gonna re-render this whole
component, that's the whole point.

56
00:03:21.759 --> 00:03:26.832
But with useTransition,
when you call startTransition,

57
00:03:26.832 --> 00:03:31.195
it basically is saying,
hey, I don't want this,

58
00:03:31.195 --> 00:03:35.465
which normally does call
some blocking on the UI.

59
00:03:35.465 --> 00:03:38.902
I don't want that to
actually affect the UI.

60
00:03:38.902 --> 00:03:44.453
Still update the state, still do the
thing, just don't mess with the UI, right?

61
00:03:44.453 --> 00:03:47.325
I still want the user to be able
to click around and do stuff,

62
00:03:47.325 --> 00:03:49.578
I don't want the UI to
be interrupted by this.

63
00:03:49.578 --> 00:03:53.146
So in some examples, you would want that,
in this example, I talk about tabs.

64
00:03:53.146 --> 00:03:55.126
I actually ripped this straight
from the documentations,

65
00:03:55.126 --> 00:03:56.124
I thought it was pretty good.

66
00:03:56.124 --> 00:04:00.752
So in a tab interface, switching tabs
might fetch new data for each tab.

67
00:04:00.752 --> 00:04:03.989
Using the useTransition ensures
that the UI remains responsive,

68
00:04:03.989 --> 00:04:05.501
even if the data fetch is slow.

69
00:04:05.501 --> 00:04:09.927
So if you hit another tab, and
it takes forever to get the data back,

70
00:04:09.927 --> 00:04:12.969
your user won't be able
to click on anything.

71
00:04:12.969 --> 00:04:16.822
[LAUGH] They have to wait for it to
come back, but with the useTransition,

72
00:04:16.822 --> 00:04:18.413
they can still click around.

73
00:04:18.413 --> 00:04:21.028
They can go back to another tab,
they can keep going, and

74
00:04:21.028 --> 00:04:24.476
it's still loading in the background,
it's not gonna affect anything.

75
00:04:24.476 --> 00:04:27.945
So it's quite useful.

76
00:04:27.945 --> 00:04:32.553
So it's pretty cool, so
we will be using that to make some

77
00:04:32.553 --> 00:04:37.176
non-blocking updates on our event,
so let's do that.

