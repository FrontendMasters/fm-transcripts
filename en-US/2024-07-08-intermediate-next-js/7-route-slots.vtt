WEBVTT

1
00:00:00.000 --> 00:00:04.135
&gt;&gt; Scott Moss: So route slots or
AKA parallel routes.

2
00:00:04.135 --> 00:00:06.512
I think route slots just
makes more sense to me.

3
00:00:06.512 --> 00:00:09.847
Parallel, if I said, hey,
you could do parallel routes.

4
00:00:09.847 --> 00:00:14.525
What do you think that would mean?

5
00:00:14.525 --> 00:00:16.176
&gt;&gt; Speaker 2: It's only two.

6
00:00:16.176 --> 00:00:19.712
&gt;&gt; Scott Moss: Yeah, you could do two,
but like visually on the app.

7
00:00:19.712 --> 00:00:20.504
&gt;&gt; Speaker 2: Always happened.

8
00:00:20.504 --> 00:00:21.920
Side by Side.

9
00:00:21.920 --> 00:00:23.355
&gt;&gt; Scott Moss: Side by side, yeah.

10
00:00:23.355 --> 00:00:27.008
What does the URL look like?

11
00:00:27.008 --> 00:00:30.631
Exactly, yeah [LAUGH] that's
the part that I'm talking about.

12
00:00:30.631 --> 00:00:32.116
It's like, okay, so

13
00:00:32.116 --> 00:00:36.344
I always just call them route
slots instead of parallel routes.

14
00:00:36.344 --> 00:00:40.949
It's basically where you
can have different sections

15
00:00:40.949 --> 00:00:43.960
of a layout be an individual route.

16
00:00:43.960 --> 00:00:47.589
We'll dive into that a little bit and
index.js isn't the first framework to do

17
00:00:47.589 --> 00:00:50.687
this or every framework I'll ever
use has had some concept of this.

18
00:00:50.687 --> 00:00:54.359
If you ever use like OG Angler,
I think this was called,

19
00:00:54.359 --> 00:00:58.513
actually I don't know what it was called,
I can't remember.

20
00:00:58.513 --> 00:01:02.079
In view, it was actually called slots,
which is why I call them slots here,

21
00:01:02.079 --> 00:01:03.830
because that's what it was called.

22
00:01:03.830 --> 00:01:07.377
In fact,
you've actually already been using slots.

23
00:01:07.377 --> 00:01:12.096
If you have a layout,
let's go to our main layout here.

24
00:01:12.096 --> 00:01:13.558
We're using children, okay?

25
00:01:13.558 --> 00:01:16.977
Children is actually the default slot.

26
00:01:16.977 --> 00:01:19.959
It's the slot that you don't
have to configure yourself.

27
00:01:19.959 --> 00:01:21.169
It's given to you for free.

28
00:01:21.169 --> 00:01:24.698
In the case of a layout index.js
children is the current page,

29
00:01:24.698 --> 00:01:26.906
the child page of this layout, right?

30
00:01:26.906 --> 00:01:28.741
That's a slot.

31
00:01:28.741 --> 00:01:32.535
What we're gonna be doing, parallel
routes or route slots are named slots.

32
00:01:32.535 --> 00:01:37.098
Slots that we create ourselves and
we can put them in a layout and

33
00:01:37.098 --> 00:01:40.296
we can put them wherever
we want in a layout.

34
00:01:40.296 --> 00:01:42.024
That's basically the difference.

35
00:01:42.024 --> 00:01:47.149
So, there are some benefits you
get simultaneous rendering.

36
00:01:47.149 --> 00:01:51.061
So multiple components or pages can be
rendered at the same time within the same

37
00:01:51.061 --> 00:01:52.851
layout, which can be really cool.

38
00:01:52.851 --> 00:01:56.958
This is very similar to what we
talked about with the Astro Islands.

39
00:01:56.958 --> 00:02:01.950
So if you have multiple components on
a page, each one of those is like its own

40
00:02:01.950 --> 00:02:07.020
page, then they have their own caching
strategies, their own loading UIs,

41
00:02:07.020 --> 00:02:11.154
their own error UIs,
whatever you wanna do on a per page basis,

42
00:02:11.154 --> 00:02:14.044
now think of that only
per component basis.

43
00:02:14.044 --> 00:02:19.031
That's basically what you get and then
you can do like conditional rendering.

44
00:02:19.031 --> 00:02:26.442
So you might be able to say, I wanna show
this slot if the user's level is admin.

45
00:02:26.442 --> 00:02:28.432
If they're not admin, show this slot.

46
00:02:28.432 --> 00:02:32.452
So you can dynamically show different
slots depending on some logic and

47
00:02:32.452 --> 00:02:36.007
then because it's server side,
you can access the database.

48
00:02:36.007 --> 00:02:39.280
So there's some interesting
things you can do there that you

49
00:02:39.280 --> 00:02:42.231
could not have done before index.js but
to be honest,

50
00:02:42.231 --> 00:02:46.403
a lot of frameworks already really had
this if you've ever built a react app,

51
00:02:46.403 --> 00:02:50.546
using like react router, like you're
able to do this pretty much already.

52
00:02:50.546 --> 00:02:53.639
So it's just bringing
it over to index.js and

53
00:02:53.639 --> 00:02:57.449
because index.js does routing
with folders and files,

54
00:02:57.449 --> 00:03:02.306
they have to create a new syntax and
it looks like this, it has an at sign.

55
00:03:02.306 --> 00:03:05.443
There's only so
many characters they can use and

56
00:03:05.443 --> 00:03:10.278
[LAUGH] they chose the at sign, which
I'm starting to like it a little more.

57
00:03:10.278 --> 00:03:11.759
I think I have some better opinions on it.

58
00:03:11.759 --> 00:03:15.662
I might reach out to them and like,
hey, maybe we should try this but

59
00:03:15.662 --> 00:03:16.838
I think it's good.

60
00:03:16.838 --> 00:03:21.112
But basically when you make a folder
with an at sign in front of it,

61
00:03:21.112 --> 00:03:25.719
you're telling index.js that,
hey, this is a slot, it's not us.

62
00:03:25.719 --> 00:03:30.549
And again, a slot is a page
that's meant to be rendered

63
00:03:30.549 --> 00:03:33.180
in a layout with a given name.

64
00:03:33.180 --> 00:03:35.865
Maybe they should even just
call them slots, I don't know.

65
00:03:35.865 --> 00:03:39.764
But you make a folder with
an at sign in front of it.

66
00:03:39.764 --> 00:03:43.324
What this does, it's very similar
to a grouping where when you have

67
00:03:43.324 --> 00:03:45.260
the parentheses around the folder,

68
00:03:45.260 --> 00:03:47.952
that name does not get
included in the URL segment.

69
00:03:47.952 --> 00:03:50.917
So does this if you have
a at sign in front of it,

70
00:03:50.917 --> 00:03:54.111
the name does not get
included in the URL segment,

71
00:03:54.111 --> 00:03:58.697
that it does not change the URL at all,
and because it doesn't need to.

72
00:03:58.697 --> 00:04:03.766
And I'll show you what I
mean when we get into it.

73
00:04:03.766 --> 00:04:08.844
But whenever you do this,
you make the folder, you now then have to

74
00:04:08.844 --> 00:04:13.921
go into your layout, that is
the nearest parent of those folders,

75
00:04:13.921 --> 00:04:18.922
and that layout will have as its props,
the names of those slots.

76
00:04:18.922 --> 00:04:22.367
So if I had a folder called Team and
a folder called Analytics and

77
00:04:22.367 --> 00:04:25.097
Slots in its parent layout,
inside of the props,

78
00:04:25.097 --> 00:04:28.415
I'll have a prop called Team I
have a prop called Analytics.

79
00:04:28.415 --> 00:04:32.191
And it's literally the same thing
as children with just those names.

80
00:04:32.191 --> 00:04:34.044
I can put it wherever
I want it to lay out.

81
00:04:34.044 --> 00:04:38.142
There are some caveats with this we'll
see in a little bit but so first,

82
00:04:38.142 --> 00:04:42.786
we need to talk about two different types
of navigation just to preamble on that,

83
00:04:42.786 --> 00:04:46.641
you have hard navigation, or
I call like server side navigation.

84
00:04:46.641 --> 00:04:50.290
That's when you make a request, it goes
to the server, there's no caching, or

85
00:04:50.290 --> 00:04:53.904
there might be caching, but you're
basically not using a client side router.

86
00:04:53.904 --> 00:04:57.590
It's as if I went to your website,
typed it in the URL and hit enter.

87
00:04:57.590 --> 00:04:59.754
It's gonna do a hard navigation, right?

88
00:04:59.754 --> 00:05:04.114
But when you use the link component within
index.js, that's a client site router.

89
00:05:04.114 --> 00:05:05.242
It doesn't go to the service.

90
00:05:05.242 --> 00:05:06.556
That's soft navigation.

91
00:05:06.556 --> 00:05:10.213
So when doing soft navigation,
index.js keeps track of what

92
00:05:10.213 --> 00:05:14.381
the active slots are because again,
they're not bound to a URL path.

93
00:05:14.381 --> 00:05:18.458
So the URL doesn't tell you what slot
you're on index.js has to keep track

94
00:05:18.458 --> 00:05:19.374
of that for you.

95
00:05:19.374 --> 00:05:23.860
But when you do a hard navigation,
it's impossible to know until your

96
00:05:23.860 --> 00:05:28.202
layout starts to render and
that logic kicks in, it doesn't know.

97
00:05:28.202 --> 00:05:32.846
And because those slots
are technically routes, they'll 404.

98
00:05:32.846 --> 00:05:36.828
So you don't want like random 404 is
on your dashboard if you have like

99
00:05:36.828 --> 00:05:37.821
multiple slots.

100
00:05:37.821 --> 00:05:39.810
So what you have to do is make a default.

101
00:05:39.810 --> 00:05:43.239
You make a default file in
the slot to say, hey, basically,

102
00:05:43.239 --> 00:05:46.737
until you can figure out what slot
needs to get rendered here or

103
00:05:46.737 --> 00:05:51.400
if it ever gets rendered, here's the
default component to render for this slot.

104
00:05:51.400 --> 00:05:53.727
Most of the time it's
always just gonna be null.

105
00:05:53.727 --> 00:05:56.131
It's just gonna return null,
which is actually a valid component.

106
00:05:56.131 --> 00:05:58.726
You can return the index.js,
you could just say no.

107
00:05:58.726 --> 00:06:01.105
At least from my experience,
I've always just returned null.

108
00:06:01.105 --> 00:06:06.939
But if you don't use get a 404 and
you don't want that so.

