WEBVTT

1
00:00:00.000 --> 00:00:03.193
&gt;&gt; Scott Moss: There is another page to be
done, but I'm gonna leave that page for

2
00:00:03.193 --> 00:00:05.945
you guys to do for extra credit,
to get some more reps in.

3
00:00:05.945 --> 00:00:11.958
So the other page is gonna be, I mean,
the code is here in the notes,

4
00:00:11.958 --> 00:00:16.718
but it's basically the attendees page,
I believe.

5
00:00:16.718 --> 00:00:21.750
So, yeah, need to make a getGuestList
function that does this super

6
00:00:21.750 --> 00:00:27.154
complicated SQL query that I don't
even think it works the way it should.

7
00:00:27.154 --> 00:00:31.301
But do that and make a page for it and

8
00:00:31.301 --> 00:00:35.890
then add that query, pretty simple.

9
00:00:35.890 --> 00:00:38.841
But I figured you can
always get more reps.

10
00:00:38.841 --> 00:00:42.512
Yeah, as far as I wanted to cover here,
this was it.

11
00:00:42.512 --> 00:00:45.947
I think, if you know how to
take advantage of these things,

12
00:00:45.947 --> 00:00:49.121
these are things that I use
all the time in production.

13
00:00:49.121 --> 00:00:51.646
I think you're gonna have
a pleasant experience,

14
00:00:51.646 --> 00:00:54.417
you're gonna be getting
the best out of the framework.

15
00:00:54.417 --> 00:00:56.299
There are other things in
here that I did not touch.

16
00:00:56.299 --> 00:01:00.555
I talked about intercepting routes and
combining them with route or

17
00:01:00.555 --> 00:01:03.926
parallel routes to make modals and
things like that.

18
00:01:03.926 --> 00:01:08.648
But I'll be honest, I just never did that,
I've built it before just to see how it

19
00:01:08.648 --> 00:01:11.400
works, but
I've always had problems with it.

20
00:01:11.400 --> 00:01:14.833
There was always gotchas and
I didn't really seem to care about

21
00:01:14.833 --> 00:01:17.698
having a modal be bound to a URL,
which makes sense.

22
00:01:17.698 --> 00:01:21.476
It's great, you can go back and forth and
close it and open it, it's great.

23
00:01:21.476 --> 00:01:24.223
But, I don't know, I never really did it.

24
00:01:24.223 --> 00:01:29.294
I also use state machines for my UI,
which kinda solves a lot of that anyway.

25
00:01:29.294 --> 00:01:31.870
So, didn't really think about that,

26
00:01:31.870 --> 00:01:36.877
there was a lot that goes on with
the fetch function in Next.js and caching.

27
00:01:36.877 --> 00:01:39.777
I didn't talk about that as
much because like I said,

28
00:01:39.777 --> 00:01:43.974
I don't really use the fetch function
that much directly on the server side.

29
00:01:43.974 --> 00:01:50.869
On the client side, maybe a little bit,
but I don't really use it as much anymore.

30
00:01:50.869 --> 00:01:52.936
So I didn't really feel
the need to talk about it.

31
00:01:52.936 --> 00:01:55.651
And if I don't use it in production,
if I'm not building with it,

32
00:01:55.651 --> 00:01:57.214
I'm not really gonna teach about it.

33
00:01:57.214 --> 00:02:02.384
So, the other things that might
be interesting in Next.js that

34
00:02:02.384 --> 00:02:07.375
I didn't really talk about,
that you might wanna go look at.

35
00:02:07.375 --> 00:02:11.049
This piece right here talks
about different patterns and

36
00:02:11.049 --> 00:02:15.944
best practices around getting data,
like, how do you actually get data and

37
00:02:15.944 --> 00:02:17.948
what are different patterns?

38
00:02:17.948 --> 00:02:22.620
So they talk about loading things in
parallel, they talk about streaming,

39
00:02:22.620 --> 00:02:25.324
they talk about sequential data fetching.

40
00:02:25.324 --> 00:02:30.647
Here's an example where they preload
the data so you export a function that

41
00:02:30.647 --> 00:02:35.981
calls the thing that you need,
you just don't await it, you just call it.

42
00:02:35.981 --> 00:02:39.382
And then you can preload it before
someone actually goes to that route,

43
00:02:39.382 --> 00:02:42.113
and then you can can just check
to see if it's available.

44
00:02:42.113 --> 00:02:44.419
So you could really speed things up.

45
00:02:44.419 --> 00:02:47.178
There's some really cool stuff there.

46
00:02:47.178 --> 00:02:50.398
There's some scenarios where they
talk about, yeah, here we go,

47
00:02:50.398 --> 00:02:52.385
you can run these two things in parallel.

48
00:02:52.385 --> 00:02:55.077
These are both functions
that return promises, but

49
00:02:55.077 --> 00:02:57.412
you don't have to wait on them here,
right?

50
00:02:57.412 --> 00:03:00.156
So you just kinda resolve them together.

51
00:03:00.156 --> 00:03:03.644
So there's a couple of cool concepts
in here that you might wanna check out,

52
00:03:03.644 --> 00:03:04.799
that are quite helpful.

53
00:03:04.799 --> 00:03:07.597
I don't use any of this stuff in
production, so I didn't talk about it, but

54
00:03:07.597 --> 00:03:08.624
I did think it was helpful.

55
00:03:08.624 --> 00:03:11.099
It did help me figure out what
I wanted to do in my app, but

56
00:03:11.099 --> 00:03:13.491
I don't actually use these
patterns in production.

57
00:03:13.491 --> 00:03:18.876
We have another best practices
question with regards to performance.

58
00:03:18.876 --> 00:03:23.580
As your application grows, any kind of
like gotchas or things you should look out

59
00:03:23.580 --> 00:03:28.372
for to make sure your bundle doesn't get
really, really big or things like that.

60
00:03:28.372 --> 00:03:30.374
Yeah, for the most part,

61
00:03:30.374 --> 00:03:35.658
Next.js does a really good job of
optimizing your bundles, right?

62
00:03:35.658 --> 00:03:39.128
It basically starts with splitting
on the routes, it starts from there.

63
00:03:39.128 --> 00:03:46.701
So you can think of every single page you
have in here is it's its own route, right?

64
00:03:46.701 --> 00:03:48.361
Because that's kind of where it starts.

65
00:03:48.361 --> 00:03:52.230
So it won't load up any of its parents or
anything like that, so

66
00:03:52.230 --> 00:03:53.840
every page is its own app.

67
00:03:53.840 --> 00:03:57.479
From there, what you might find out
is that, cuz at the end of the day,

68
00:03:57.479 --> 00:04:01.556
you're just trying to protect the client,
so you gotta start thinking like,

69
00:04:01.556 --> 00:04:04.806
okay, I'm importing these
client components everywhere.

70
00:04:04.806 --> 00:04:08.072
Do these client components
have to be inside, like,

71
00:04:08.072 --> 00:04:12.730
do these client components have to be
loaded before the file is downloaded?

72
00:04:12.730 --> 00:04:16.921
And if that's, it's probably not the case,

73
00:04:16.921 --> 00:04:22.508
what you could do is you can use
the next dynamic, right here,

74
00:04:22.508 --> 00:04:29.513
which basically uses suspense and
lazy loading from react.lazy together.

75
00:04:29.513 --> 00:04:35.044
To basically stream in that client
component inside of another component.

76
00:04:35.044 --> 00:04:38.106
So you could do things like
that to speed things up,

77
00:04:38.106 --> 00:04:41.181
it'd be very situational
when you would use that.

78
00:04:41.181 --> 00:04:43.741
I haven't had the issue where I'm like,
if I didn't have this,

79
00:04:43.741 --> 00:04:45.058
this would have been really bad.

80
00:04:45.058 --> 00:04:46.425
So, I mean, it's cool.

81
00:04:46.425 --> 00:04:50.619
For the most part, people use this
function to bypass server-side rendering.

82
00:04:50.619 --> 00:04:54.060
Like, if you have a client component that
you don't want to be server-side rendered,

83
00:04:54.060 --> 00:04:56.433
because remember everything
gets server-side rendered,

84
00:04:56.433 --> 00:04:57.794
even if it's a client component.

85
00:04:57.794 --> 00:05:01.226
But if you don't want that client
component being rendered server-side

86
00:05:01.226 --> 00:05:04.603
rendered, because maybe it's using
some library that you installed,

87
00:05:04.603 --> 00:05:07.168
that internally uses Window and
you can't change it.

88
00:05:07.168 --> 00:05:08.997
So that's breaking on the server.

89
00:05:08.997 --> 00:05:14.330
So you would dynamically import that and
through here, you can tell it SSR false.

90
00:05:14.330 --> 00:05:17.695
So don't render this on the server,
and it'll bypass that.

91
00:05:17.695 --> 00:05:18.702
So that's the thing.

92
00:05:18.702 --> 00:05:23.922
I would say, other than that,
I would try to, what I found out is

93
00:05:23.922 --> 00:05:30.436
it's best practices to like take out code
that you reuse and put it into its own.

94
00:05:30.436 --> 00:05:36.401
That's why I make multiple files like this
and utils, because it helps the compiler,

95
00:05:36.401 --> 00:05:41.076
like understand what code needs to
go where and help it de-dupe it.

96
00:05:41.076 --> 00:05:46.878
Versus, if it's all stuck in one file or
one place, it's hard to split,

97
00:05:46.878 --> 00:05:51.854
it can't split within a file,
but it can split on a file basis.

98
00:05:51.854 --> 00:05:56.233
So if I have all these other files, it
can just like, all right, you know what,

99
00:05:56.233 --> 00:05:59.965
this isn't being used in this module tree,
so just don't even add it.

100
00:05:59.965 --> 00:06:04.736
Whereas, If I have all this code in the
file, let's say I have 20 functions being

101
00:06:04.736 --> 00:06:09.576
exported and one of those functions I use
somewhere else, it's gotta get that whole

102
00:06:09.576 --> 00:06:13.144
file now, even though I'm only
using one function in there.

103
00:06:13.144 --> 00:06:18.394
So, it's like doing things
like that helps out a lot.

104
00:06:18.394 --> 00:06:21.405
Yeah, for the most part,
I would say, that's it,

105
00:06:21.405 --> 00:06:25.041
and then I would say,
try to get as close to static as possible.

106
00:06:25.041 --> 00:06:29.344
So if your app doesn't need to be dynamic,
as far as like the data that it gets,

107
00:06:29.344 --> 00:06:31.709
then don't make it dynamic for no reason.

108
00:06:31.709 --> 00:06:35.526
So try to get the static,
push everything down to the client.

109
00:06:35.526 --> 00:06:39.844
So your client components are super small,
they handle one interaction,

110
00:06:39.844 --> 00:06:42.734
that's it, and
you'll probably go really far.

111
00:06:42.734 --> 00:06:47.834
So what I recommend as far as what
you should do next, go pick some app

112
00:06:47.834 --> 00:06:53.212
that you like, you use, it could be
a web app, it could be a mobile app.

113
00:06:53.212 --> 00:06:56.300
Something that probably
seems impossible or

114
00:06:56.300 --> 00:07:01.753
at least extremely complicated to build,
and then try to build it in Node.js.

115
00:07:01.753 --> 00:07:08.064
That's gonna force you to use
things you've never used before.

116
00:07:08.064 --> 00:07:12.306
If you pick something that's easy,
you probably won't finish it, or 2,

117
00:07:12.306 --> 00:07:15.642
you won't reach for
tools you've never had to use before.

118
00:07:15.642 --> 00:07:19.668
So I would say, try to do something that's
a little outside of your skill set or

119
00:07:19.668 --> 00:07:22.170
your capability, and
use Next.js to build it.

120
00:07:22.170 --> 00:07:24.727
Just struggle, even if this is
like something you do, like,

121
00:07:24.727 --> 00:07:27.333
I'm just gonna work on this on my
lunch break to do some stuff and

122
00:07:27.333 --> 00:07:30.750
it takes you three months to do, you're
gonna learn a lot through that struggle.

123
00:07:30.750 --> 00:07:32.332
That's really how I learned this stuff.

124
00:07:32.332 --> 00:07:35.582
I'll just pick something that I have no
business trying to build and I'm like,

125
00:07:35.582 --> 00:07:37.435
cool, that's how I'm gonna learn Python.

126
00:07:37.435 --> 00:07:41.098
[LAUGH] It'd be like the craziest thing
and I'm like, okay, I learned it.

127
00:07:41.098 --> 00:07:44.033
That was terrible, but now I know it.

128
00:07:44.033 --> 00:07:45.572
Whereas I realized if I just like,

129
00:07:45.572 --> 00:07:49.184
I'm just gonna go build it to do up right
quick, I don't really learn anything or

130
00:07:49.184 --> 00:07:51.540
I never finish it because
I'm not interested in it.

131
00:07:51.540 --> 00:07:55.332
I have to be interested, so
how do I recommend doing that?

132
00:07:55.332 --> 00:08:00.180
And then, once you do that once or twice,
you'll be comfortable, you can teach

133
00:08:00.180 --> 00:08:05.125
anybody this stuff when it comes to folks
at your company that might need to use it.

134
00:08:05.125 --> 00:08:08.561
Yeah, other than that, that's it,
that's what I wanted to cover,

135
00:08:08.561 --> 00:08:10.558
I hope you guys got a lot from the course.

136
00:08:10.558 --> 00:08:14.022
I try my best to fit everything
that I think was valuable and

137
00:08:14.022 --> 00:08:18.209
useful from my own perspective but
also how other people might see it.

138
00:08:18.209 --> 00:08:21.315
But then also take into account what
Next.js is putting out there in

139
00:08:21.315 --> 00:08:25.292
the community, and trying to align what
they're saying, I don't want to be saying,

140
00:08:25.292 --> 00:08:28.687
they're not saying the right thing,
or I'm not saying the right thing.

141
00:08:28.687 --> 00:08:32.163
I'm just trying to make sure everybody's
benefiting from all this content.

142
00:08:32.163 --> 00:08:35.665
So that was really the most difficult
part, but I'm glad we got it out, and

143
00:08:35.665 --> 00:08:38.570
I hope you guys got some value from it,
and thanks for coming.

144
00:08:38.570 --> 00:08:43.706
&gt;&gt; Student: [APPLAUSE]

