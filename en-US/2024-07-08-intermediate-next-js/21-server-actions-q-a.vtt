WEBVTT

1
00:00:00.310 --> 00:00:04.023
&gt;&gt; Student: So I have a question,
when using TRPC,

2
00:00:04.023 --> 00:00:08.646
how would you combine
the two of those together?

3
00:00:08.646 --> 00:00:11.393
&gt;&gt; Scott Moss: That's a great question.
So, it's tough [LAUGH],

4
00:00:11.393 --> 00:00:15.295
because I'm doing that in production.

5
00:00:15.295 --> 00:00:19.764
And the question you just asked me is
something I ask myself every single day,

6
00:00:19.764 --> 00:00:20.745
how do I do this?

7
00:00:20.745 --> 00:00:22.063
Why am I doing this?

8
00:00:22.063 --> 00:00:23.490
I'll just tell you how I'm doing it.

9
00:00:23.490 --> 00:00:24.236
&gt;&gt; Student: Okay.

10
00:00:24.236 --> 00:00:26.512
&gt;&gt; Scott Moss: And
you can decide if it's valuable for you.

11
00:00:26.512 --> 00:00:33.485
So what we do is, let's pick a page,
I'll pick this page here, okay?

12
00:00:33.485 --> 00:00:37.668
So here, I have the data, right?

13
00:00:37.668 --> 00:00:39.934
This is literally what I do on my app,
I do an initial request.

14
00:00:39.934 --> 00:00:44.040
I'll get the user,
I'll get the initial data for this.

15
00:00:44.040 --> 00:00:46.281
I'll immediately do something like this.

16
00:00:46.281 --> 00:00:50.141
I'll have something here that's home.

17
00:00:50.141 --> 00:00:54.028
This is the actual home right here.

18
00:00:54.028 --> 00:00:59.563
And this is gonna be from components,
slash, the actual home component.

19
00:00:59.563 --> 00:01:01.804
That's not what I call it,
but you get the point.

20
00:01:01.804 --> 00:01:04.027
And then there's nothing here.

21
00:01:04.027 --> 00:01:04.977
There's absolutely nothing here.

22
00:01:04.977 --> 00:01:09.336
And what I do instead, is I'll say
actual home, and I'll pass in that data.

23
00:01:09.336 --> 00:01:12.795
So whatever data I got here,
I'm passing it directly in here.

24
00:01:12.795 --> 00:01:15.434
So in this case, it'll be that.

25
00:01:15.434 --> 00:01:18.897
This component is a client component.

26
00:01:18.897 --> 00:01:22.313
It's a client component
that takes this prop.

27
00:01:22.313 --> 00:01:25.956
And in the case of TRPC,
which uses react-query,

28
00:01:25.956 --> 00:01:30.361
in that hook where you do the use-query,
or in TRPC's case,

29
00:01:30.361 --> 00:01:34.688
it's trpc.the-name-of-your-query.use-query
or

30
00:01:34.688 --> 00:01:40.308
something like that, you can pass
the options object that says initial data.

31
00:01:40.308 --> 00:01:43.757
Which is like,
what is the initial data for this query?

32
00:01:43.757 --> 00:01:48.842
Before it even makes the query,
I pass this into it.

33
00:01:48.842 --> 00:01:55.739
So what I'm doing is I'm making sure
whatever my server component queries,

34
00:01:55.739 --> 00:02:02.016
returns the exact same thing that
the TRPC query in here would return.

35
00:02:02.016 --> 00:02:06.715
So I can just populate the TRPC's cache
with whatever the initial render of

36
00:02:06.715 --> 00:02:07.319
this is.

37
00:02:07.319 --> 00:02:10.260
And then from there, it's all TRPC,
whether it's mutations,

38
00:02:10.260 --> 00:02:12.356
whether it's queries, it's all just TRPC.

39
00:02:12.356 --> 00:02:15.659
I don't use what I just showed you guys.

40
00:02:15.659 --> 00:02:16.900
&gt;&gt; Student: Got it.
&gt;&gt; Scott Moss: For a few reasons.

41
00:02:16.900 --> 00:02:18.614
I didn't know how to do it
when I first made the app.

42
00:02:18.614 --> 00:02:21.315
[LAUGH] That's the biggest one.

43
00:02:21.315 --> 00:02:27.790
Two, it's just a lot more work,
in my opinion.

44
00:02:27.790 --> 00:02:33.196
Right now, when it comes to
things that are very hyperactive,

45
00:02:33.196 --> 00:02:36.460
are hyper interactive, so polling,

46
00:02:36.460 --> 00:02:41.263
infinite scrolling,
WebSockets, things like that.

47
00:02:41.263 --> 00:02:47.679
It's just a lot harder to do
in this world of caching,

48
00:02:47.679 --> 00:02:52.254
mutating, invalidating the cache.

49
00:02:52.254 --> 00:02:54.906
That process is just a lot
more to think about,

50
00:02:54.906 --> 00:02:57.221
the more interactive your app becomes.

51
00:02:57.221 --> 00:03:03.089
But when it's a form, or a simple create
like we just did, yeah, pretty simple.

52
00:03:03.089 --> 00:03:04.637
So because of that,

53
00:03:04.637 --> 00:03:10.750
we don't want everyone on the team to be
an expert on when to make that decision.

54
00:03:10.750 --> 00:03:15.471
We just decided just use TRPC for
everything because that works.

55
00:03:15.471 --> 00:03:17.955
It's fine, it's not that big of a deal.

56
00:03:17.955 --> 00:03:22.285
And also, we're an app, we're a dashboard,
it doesn't really matter.

57
00:03:22.285 --> 00:03:24.944
But if we were more of a static
site with some interaction,

58
00:03:24.944 --> 00:03:28.168
I would probably lean towards more
doing all the server-side stuff.

59
00:03:28.168 --> 00:03:32.128
Because if I'm New York Times,
I'm not doing TRPC, I'm doing this,

60
00:03:32.128 --> 00:03:34.116
because this is all server-side.

61
00:03:34.116 --> 00:03:37.116
TRPC is very client-side, it's very heavy.

62
00:03:37.116 --> 00:03:40.336
That's gonna be slow on people's phones,
compared to doing something server-side.

63
00:03:40.336 --> 00:03:43.550
Whereas none of that JavaScript gets
loaded up because it's all on a server.

64
00:03:43.550 --> 00:03:47.413
So it really just depends
on the experience, I think.

65
00:03:47.413 --> 00:03:51.581
What's the relationship between
useTransition and suspense, or

66
00:03:51.581 --> 00:03:52.463
is there one?

67
00:03:52.463 --> 00:03:54.040
I don't think they have any relation.

68
00:03:54.040 --> 00:03:58.524
I don't think there's any relation
between what a transition does and

69
00:03:58.524 --> 00:03:59.878
what suspense does.

70
00:03:59.878 --> 00:04:03.291
Because you don't have to use
a promise inside of a transition.

71
00:04:03.291 --> 00:04:04.237
You can do whatever you want.

72
00:04:04.237 --> 00:04:08.807
A transition is just saying, this is
something that normally affects the UI,

73
00:04:08.807 --> 00:04:12.408
which typically is a state change or
something like that, and

74
00:04:12.408 --> 00:04:15.961
I don't want it to,
that doesn't have to be asynchronous.

75
00:04:15.961 --> 00:04:22.601
A suspense is like, here's a promise, I
want to wait for this promise to resolve.

76
00:04:22.601 --> 00:04:27.552
In the meantime, show this thing,
that's a suspense, and

77
00:04:27.552 --> 00:04:31.739
that is more of something
to do with network layer.

78
00:04:31.739 --> 00:04:35.058
It's more aware of what's actually
happening, it's more purposefully built.

79
00:04:35.058 --> 00:04:42.570
startTransition is a generic function that
just opts you out of locking down the UI.

80
00:04:42.570 --> 00:04:49.242
The best way I can describe it is
request animation frame for state.

81
00:04:49.242 --> 00:04:51.009
That's the best way I can describe it,
request animation frame.

82
00:04:51.009 --> 00:04:53.633
If you don't know what that is, it's like,

83
00:04:53.633 --> 00:04:56.548
you would use that to make
your animation smooth.

84
00:04:56.548 --> 00:05:02.571
Do that 60 milliseconds to get 60 frames
per second, it's like that, but for state.

85
00:05:02.571 --> 00:05:04.806
So that's the best way I can describe it.

86
00:05:04.806 --> 00:05:08.591
But right now, Next.js is using,
and it's not their fault,

87
00:05:08.591 --> 00:05:10.455
React just came out with this.

88
00:05:10.455 --> 00:05:15.208
And it has a useTransition, but

89
00:05:15.208 --> 00:05:19.438
now you can do async things.

90
00:05:19.438 --> 00:05:20.615
So now you can't await that.

91
00:05:20.615 --> 00:05:22.306
So we can't do that right now.

92
00:05:22.306 --> 00:05:28.754
So earlier, when I was like, yeah, you
probably want to be able to, where was it?

93
00:05:28.754 --> 00:05:32.042
Here, I was like, you probably
want to be able to return this and

94
00:05:32.042 --> 00:05:33.875
get the results of it to do something.

95
00:05:33.875 --> 00:05:37.719
Well, we can't in our
current implementation,

96
00:05:37.719 --> 00:05:41.895
because I can't await
this in a transition.

97
00:05:41.895 --> 00:05:46.388
Where's that happening now?

98
00:05:46.388 --> 00:05:50.364
As far as I know, this is not async yet,
unless they updated it,

99
00:05:50.364 --> 00:05:51.699
I don't think it is.

100
00:05:51.699 --> 00:05:52.976
And if it is, I haven't used it yet.

101
00:05:52.976 --> 00:05:55.451
So I don't feel comfortable teaching it,
but

102
00:05:55.451 --> 00:05:59.138
I do feel comfortable talking about it,
and this is what's coming.

103
00:05:59.138 --> 00:06:02.577
You can async to startTransmission,
you can await a promise, and

104
00:06:02.577 --> 00:06:06.212
you can get whatever you want back,
and you can do all the things here.

105
00:06:06.212 --> 00:06:10.184
So I think that closes the loop for
a lot of things as well.

106
00:06:10.184 --> 00:06:14.729
These are the things that I'm talking
about that makes it a lot easier to use

107
00:06:14.729 --> 00:06:19.075
this technique now, this cache
server-side query, bust the cache.

108
00:06:19.075 --> 00:06:23.842
Now, these are cool,
cuz I'm inside of a client component,

109
00:06:23.842 --> 00:06:26.052
this is a client component.

110
00:06:26.052 --> 00:06:28.806
I'm using a server mutation,
a server action, and

111
00:06:28.806 --> 00:06:31.698
I'm getting the result right back here for
my client.

112
00:06:31.698 --> 00:06:35.160
I can bound it to a state,
so now my JSX can see it.

113
00:06:35.160 --> 00:06:36.907
Yeah, this kind of closes the loop, right?

114
00:06:36.907 --> 00:06:39.127
So this does a lot of things for you,

115
00:06:39.127 --> 00:06:43.869
as far as being able to use this without
having to go through all these hoops.

116
00:06:43.869 --> 00:06:46.349
So it's getting better, but, like I said,

117
00:06:46.349 --> 00:06:49.501
Next.js was waiting on React
to do a lot of these things.

118
00:06:49.501 --> 00:06:51.356
I really like the approach
that they're taking.

119
00:06:51.356 --> 00:06:55.386
They're like, we just want to make
what React is doing easier, but

120
00:06:55.386 --> 00:06:59.005
we're not gonna introduce all
this crazy stuff to you guys.

121
00:06:59.005 --> 00:07:02.486
We're just gonna build opinions on
the foundations that they built.

122
00:07:02.486 --> 00:07:04.435
And I think that's the great way to do it.

123
00:07:04.435 --> 00:07:09.434
But sometimes that just means Next.js
ends up releasing things super early,

124
00:07:09.434 --> 00:07:12.320
and people are just like, what's going on?

125
00:07:12.320 --> 00:07:14.498
But reality is, they can't do anything,

126
00:07:14.498 --> 00:07:16.804
they have to wait until
React fix this stuff.

