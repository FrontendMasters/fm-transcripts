WEBVTT

1
00:00:00.006 --> 00:00:01.521
&gt;&gt; Scott Moss: Let's
dive into our first one.

2
00:00:01.521 --> 00:00:06.836
So, form actions,
there's a lot to say here.

3
00:00:06.836 --> 00:00:11.911
There's a lot of pain on my side that I
went through [LAUGH] using these when they

4
00:00:11.911 --> 00:00:17.002
first came out, but now we're on the other
side and everything looks great.

5
00:00:17.002 --> 00:00:20.376
And API's have been formalized and
settled, and there's tons

6
00:00:20.376 --> 00:00:24.636
of different use cases and patterns, and
still more evolving every single day.

7
00:00:24.636 --> 00:00:29.063
So, I'm more than excited to
talk about form actions and

8
00:00:29.063 --> 00:00:31.284
how they work and next year.

9
00:00:31.284 --> 00:00:33.285
So, first, in order to understand that,

10
00:00:33.285 --> 00:00:36.243
you got to know what server
components the server actions are.

11
00:00:36.243 --> 00:00:39.889
If you don't know what server components
are from the intro course, or

12
00:00:39.889 --> 00:00:41.912
never really kind of thought about it.

13
00:00:41.912 --> 00:00:44.064
There's a difference between
a server component and

14
00:00:44.064 --> 00:00:45.413
server side rendering, right?

15
00:00:45.413 --> 00:00:49.491
Server side rendering is for,
in the case of Next.js, it's literally for

16
00:00:49.491 --> 00:00:50.906
every single component.

17
00:00:50.906 --> 00:00:53.842
Every component is gonna
be a server side rendered,

18
00:00:53.842 --> 00:00:58.248
whether it's a client component or
a server component, it's always gonna be

19
00:00:58.248 --> 00:01:01.938
server side rendered unless you
import it with the next dynamic.

20
00:01:01.938 --> 00:01:04.880
Unless you lazy load it, basically,
if you don't lazy load it,

21
00:01:04.880 --> 00:01:07.832
it's gonna be imported,
it's gonna be rendered on the server.

22
00:01:07.832 --> 00:01:13.923
A server component is a component that
gets executed on a server per route.

23
00:01:13.923 --> 00:01:18.244
So it's a slight difference, so rendering
is basically like, I'm gonna take this,

24
00:01:18.244 --> 00:01:20.983
I'm gonna see if I can create
a static version of this.

25
00:01:20.983 --> 00:01:22.943
As in,
I'm gonna see if I can output some HTML,

26
00:01:22.943 --> 00:01:24.953
let me see if I can create
an HTML string for this.

27
00:01:24.953 --> 00:01:27.967
There's like a whole hydration step and
things like that.

28
00:01:27.967 --> 00:01:31.372
Server component is basically like,
every time someone hits this route,

29
00:01:31.372 --> 00:01:32.679
run this function, right?

30
00:01:32.679 --> 00:01:34.501
That function just happens
to be a component,

31
00:01:34.501 --> 00:01:35.959
that's what a server component is.

32
00:01:35.959 --> 00:01:39.028
So it's slightly different than
server side rendering, which,

33
00:01:39.028 --> 00:01:41.712
depending on the component,
could be an initial render,

34
00:01:41.712 --> 00:01:44.316
could be something that
revalidates things like that.

35
00:01:44.316 --> 00:01:48.291
So, that's the difference there, I think
people get confused about that because

36
00:01:48.291 --> 00:01:51.092
the naming, server component,
server side rendering.

37
00:01:51.092 --> 00:01:53.340
Maybe to figure it out,
the naming is really confusing.

38
00:01:53.340 --> 00:01:58.074
Server action, so with a server component,
you're able to, if you've used the app

39
00:01:58.074 --> 00:02:02.439
directory before, you know that you
can make your components asynchronous.

40
00:02:02.439 --> 00:02:06.483
And you can do anything that you can do on
the backend inside the component, so this

41
00:02:06.483 --> 00:02:10.541
means, like, accessing a database directly
without having to go over the wire.

42
00:02:10.541 --> 00:02:13.105
Literally accessing the file
system if you wanted to,

43
00:02:13.105 --> 00:02:16.856
anything you can do on the back end you
can do in that component asynchronously.

44
00:02:16.856 --> 00:02:19.686
And then, so they kind of just
built that a little further and

45
00:02:19.686 --> 00:02:23.085
made another abstraction,
which is something called a server action.

46
00:02:23.085 --> 00:02:26.502
You can think of a server action as like
the equivalent of what you would have done

47
00:02:26.502 --> 00:02:27.376
for a post request.

48
00:02:27.376 --> 00:02:30.229
So, typically like on a form,
you unsubmit,

49
00:02:30.229 --> 00:02:34.472
you make a fetch to do a post request
to some server to send the data up,

50
00:02:34.472 --> 00:02:38.153
you get the data back, and
that's how you submit the form.

51
00:02:38.153 --> 00:02:42.709
Well, it's kinda eliminating that process
of having to go over the wire, and

52
00:02:42.709 --> 00:02:47.542
instead, we can create a function on the
server that gets executed when some action

53
00:02:47.542 --> 00:02:48.457
is triggered.

54
00:02:48.457 --> 00:02:50.987
In this case,
it'll be when a form is submitted.

55
00:02:50.987 --> 00:02:54.568
And that way we don't have to go over the
wire, I mean, technically it's still going

56
00:02:54.568 --> 00:02:56.836
over the wire, but
you'd have to make a route for it.

57
00:02:56.836 --> 00:03:00.625
So that's basically what a server
action is, it's a function that runs

58
00:03:00.625 --> 00:03:04.802
on the server, that can be called on the
client and it would trigger some logic.

59
00:03:04.802 --> 00:03:07.587
And then there's like different ways
to like handle it or stuff like that.

60
00:03:07.587 --> 00:03:10.909
We'll get into it,
this is just the high level.

61
00:03:10.909 --> 00:03:15.677
Some of the other cool things about form
actions is that it really simplifies how

62
00:03:15.677 --> 00:03:17.536
we manage each form's field.

63
00:03:17.536 --> 00:03:20.827
So, before you had to like,
make a state for this field,

64
00:03:20.827 --> 00:03:24.892
eventually you probably just like
made one object state and did that.

65
00:03:24.892 --> 00:03:28.753
Eventually from there you would go install
some form hook that someone made, and

66
00:03:28.753 --> 00:03:30.284
you would use that, and it's,

67
00:03:30.284 --> 00:03:33.206
cuz it's like managing state
reform is quite complicated.

68
00:03:33.206 --> 00:03:35.143
Now we don't have to do that,

69
00:03:35.143 --> 00:03:40.259
I can't remember the last time I actually
made a controlled input using this.

70
00:03:40.259 --> 00:03:43.440
A controlled input is when you
add the value of an input, and

71
00:03:43.440 --> 00:03:46.954
then you do like an on change, and
then you feed that back into it.

72
00:03:46.954 --> 00:03:51.179
That's just the standard, but
I don't remember the last time I did that,

73
00:03:51.179 --> 00:03:55.822
which feels great because it's so tedious
setting that up, and you'll see why.

74
00:03:55.822 --> 00:03:58.432
And then there's some other stuff in
here that it doesn't really matter

75
00:03:58.432 --> 00:03:59.044
talking about.

76
00:03:59.044 --> 00:04:03.074
It's better just to show you, but
basically there's some hooks in here that

77
00:04:03.074 --> 00:04:06.050
help us do what I just said as
far as like, the form state,

78
00:04:06.050 --> 00:04:09.771
do optimistic updates, keeping
track of changes, things like that.

