WEBVTT

1
00:00:01.396 --> 00:00:04.257
&gt;&gt; Scott Moss: We're just gonna build
on top of that and to add more or

2
00:00:04.257 --> 00:00:07.001
our first attempt at
server-side data fetching.

3
00:00:07.001 --> 00:00:11.461
So with React 18 and
now 19 and Next.js 13, now 14,

4
00:00:11.461 --> 00:00:15.837
we have the ability to do
asynchronous server components,

5
00:00:15.837 --> 00:00:19.337
which allows us to access
database resources,

6
00:00:19.337 --> 00:00:23.556
back-end resources,
directly inside of a component.

7
00:00:23.556 --> 00:00:27.445
So we can do initial renders for
components completely server-side without

8
00:00:27.445 --> 00:00:30.151
having to wait for
the client to bootstrap, load up.

9
00:00:30.151 --> 00:00:33.568
Download JavaScript, do all that stuff,
and then make a query probably inside

10
00:00:33.568 --> 00:00:36.332
a use effect or something,
which is what you would normally do.

11
00:00:36.332 --> 00:00:39.508
So that's not news and
it's not really advanced.

12
00:00:39.508 --> 00:00:44.521
I talked about that in the intro course,
but we're gonna talk about more advanced

13
00:00:44.521 --> 00:00:49.772
patterns specifically around caching and
things like that, and how all that works.

14
00:00:49.772 --> 00:00:53.230
So server-side, data fetching,
the best way I can describe it,

15
00:00:53.230 --> 00:00:57.395
I've been talking about it for a little
bit now but it's really like Next.js.

16
00:00:57.395 --> 00:01:02.223
It's creating a route for you for every
function that you make, and then you just

17
00:01:02.223 --> 00:01:06.712
call the function, and you don't have
to worry about managing the route.

18
00:01:06.712 --> 00:01:10.222
So that's the best way I can describe it,
and in that function,

19
00:01:10.222 --> 00:01:13.288
you can do anything that you
could do in a Route Handler.

20
00:01:13.288 --> 00:01:19.146
So the runtime is gonna be whatever
runtime that your environment supports.

21
00:01:19.146 --> 00:01:23.399
If you deployed Vercel or something, you
could pick a runtime whether it's edge or

22
00:01:23.399 --> 00:01:24.016
just node.

23
00:01:24.016 --> 00:01:27.788
So it's really just gonna be
a Route Handler, but a component.

24
00:01:31.464 --> 00:01:32.345
&gt;&gt; Scott Moss: Basically,

25
00:01:32.345 --> 00:01:37.625
some of the things here that you have to
think about though, when you're doing

26
00:01:37.625 --> 00:01:43.084
these server-side calls are gonna be
optimizations around redundant things.

27
00:01:43.084 --> 00:01:47.823
Or for instance, if you are loading
up slots like we are and

28
00:01:47.823 --> 00:01:53.362
each one of those slots needs to make
sure that the user is signed in.

29
00:01:53.362 --> 00:01:57.653
So you need to make a call to the database
to check to see if the user is signed in,

30
00:01:57.653 --> 00:01:59.159
in our case, three times.

31
00:01:59.159 --> 00:02:02.142
That'd be very wasteful
to have to do that, so

32
00:02:02.142 --> 00:02:06.126
you probably wanna minimalize that or
cache that in some way.

33
00:02:06.126 --> 00:02:10.542
So these are some of the type
of things that you wanna think

34
00:02:10.542 --> 00:02:13.302
about when you make these calls, so

35
00:02:13.302 --> 00:02:18.655
it's really like you have to plan it
out [LAUGH] cuz it's not obvious.

36
00:02:18.655 --> 00:02:22.817
So mostly, here, I'm just talking
about a lot of that stuff, memoizing,

37
00:02:22.817 --> 00:02:27.322
things like that, but it's so much easier
if I just walk you through and show you.

38
00:02:27.322 --> 00:02:32.035
But some of the things here,
in addition to doing memoization of

39
00:02:32.035 --> 00:02:36.677
some of the fetch requests,
are gonna be persistent caching.

40
00:02:36.677 --> 00:02:40.709
So persistent caching is,
the way I can describe that is,

41
00:02:40.709 --> 00:02:43.671
it's even though we go in between routes,

42
00:02:43.671 --> 00:02:48.777
whereas a memoization is a per request,
a persistent cache would be it's

43
00:02:48.777 --> 00:02:53.589
always gonna be there until you do
a hard refresh basically, right?

44
00:02:53.589 --> 00:02:55.498
So we're gonna talk about
how do we activate that?

45
00:02:55.498 --> 00:02:56.341
How do we turn that off?

46
00:02:56.341 --> 00:02:57.721
How do we opt into it?

47
00:02:57.721 --> 00:03:00.204
Different things like that.

48
00:03:00.204 --> 00:03:03.780
The other cool thing is gonna
be streaming and suspense.

49
00:03:03.780 --> 00:03:08.297
Again, this is not new to React or
Next.js, but we're gonna talk about how to

50
00:03:08.297 --> 00:03:11.936
actually use that in a way where
it's practical, it's nice.

51
00:03:11.936 --> 00:03:18.004
It's not something that's hypothetical,
but it's something that's actually useful.

52
00:03:18.004 --> 00:03:19.828
I'll talk to you about how I do it.

53
00:03:19.828 --> 00:03:27.576
So for this one, we are going to make
a couple server-side functions here.

54
00:03:27.576 --> 00:03:31.499
So one, we wanna lock down our application
cuz now since we created auth,

55
00:03:31.499 --> 00:03:35.819
we don't want people to be able to access
pages unless they're authenticated.

56
00:03:35.819 --> 00:03:39.709
So we're gonna make a helper function that
gets the current user based off the token,

57
00:03:39.709 --> 00:03:40.584
so we'll do that.

58
00:03:40.584 --> 00:03:46.311
And then we're gonna go make our functions
that get the data for those route slots.

59
00:03:46.311 --> 00:03:47.588
We have those three route slots, right?

60
00:03:47.588 --> 00:03:49.900
We have one that shows
the attendees count, so

61
00:03:49.900 --> 00:03:52.700
we can make a function that
gets the attendees' count.

62
00:03:52.700 --> 00:03:56.799
We have one that's the homepage this one,
which one?

63
00:03:56.799 --> 00:03:58.472
Yeah, this one actually
gets the attendees counts.

64
00:03:58.472 --> 00:03:59.522
We have the one that gets the events.

65
00:03:59.522 --> 00:04:01.916
So all the events, so
we gotta make that, and

66
00:04:01.916 --> 00:04:05.836
then we have one that gets all the RSVP,
so we have to make that one as well.

67
00:04:05.836 --> 00:04:08.224
So we're gonna make all of those and

68
00:04:08.224 --> 00:04:12.132
then we're going to put them
in their appropriate slots.

69
00:04:12.132 --> 00:04:15.923
We'll explore all the different
caching scenarios and gotchas and

70
00:04:15.923 --> 00:04:19.726
then we'll figure out how we might
cache those, so let's do that.

71
00:04:19.726 --> 00:04:24.065
So first things first is let's go make
our function that we're gonna use to get

72
00:04:24.065 --> 00:04:25.183
the current user and

73
00:04:25.183 --> 00:04:29.210
pretty much every single one of these
routes that needs to be protected.

74
00:04:29.210 --> 00:04:33.366
And the way that I did this, I typically
make a utils folder on the root of my app,

75
00:04:33.366 --> 00:04:37.169
and I kind of just scope it based of
the type of work is gonna be done there.

76
00:04:37.169 --> 00:04:40.758
So in this case,
I'm gonna make a users.ts file at the top.

77
00:04:40.758 --> 00:04:46.447
I talked about this earlier, but I'm gonna
import this server only module here.

78
00:04:46.447 --> 00:04:52.390
All this does is, it will throw an error
if the file is ran in the browser.

79
00:04:52.390 --> 00:04:56.128
So if it detects window or any DOM
related stuff, it'll throw an error.

80
00:04:56.128 --> 00:04:59.745
This is actually very important
because you're gonna find out and

81
00:04:59.745 --> 00:05:04.263
I've done this by accident so many times,
it's like you're gonna make a file like

82
00:05:04.263 --> 00:05:06.802
this that has a lot of
utility functions in it.

83
00:05:06.802 --> 00:05:09.125
Some of those functions
operate on the server,

84
00:05:09.125 --> 00:05:11.281
and then some of them
operate on the ground.

85
00:05:11.281 --> 00:05:15.323
You might have two functions in here,
one is using cookies and

86
00:05:15.323 --> 00:05:17.823
another one's using local storage.

87
00:05:17.823 --> 00:05:20.941
Those two functions cannot
exist in the same file,

88
00:05:20.941 --> 00:05:25.002
because one of them uses something
that only works in the browser,

89
00:05:25.002 --> 00:05:29.369
the other one uses something that only
works on the server on a request.

90
00:05:29.369 --> 00:05:33.739
So by putting server only,
not only am I saying, hey,

91
00:05:33.739 --> 00:05:36.399
this can only work on the server,

92
00:05:36.399 --> 00:05:41.244
I'm also saying I have access
to everything in the server and

93
00:05:41.244 --> 00:05:45.723
I shouldn't be putting
browser stuff in here, right?

94
00:05:45.723 --> 00:05:48.367
So let's do that, so
I'm gonna go to utils.

95
00:05:50.902 --> 00:05:53.273
&gt;&gt; Scott Moss: And actually, if you open
this up, there's a few files in here.

96
00:05:53.273 --> 00:05:55.743
You won't touch these, but
I can kinda talk about them.

97
00:05:55.743 --> 00:05:57.425
I talked a little bit
about the auth tools.

98
00:05:57.425 --> 00:06:02.191
This is just some helper functions to
sign us in, sign us up, hash passwords,

99
00:06:02.191 --> 00:06:03.365
things like that.

100
00:06:03.365 --> 00:06:07.481
Constants, I always make a follow on my
app called constants where I just put

101
00:06:07.481 --> 00:06:08.588
constant strings.

102
00:06:08.588 --> 00:06:12.436
This delay function, since now we're
getting into data fetching and things like

103
00:06:12.436 --> 00:06:16.577
that, we're gonna simulate a delay, cuz
otherwise, it'll just come back too fast.

104
00:06:16.577 --> 00:06:19.000
Even tussle being hosted
actually comes back so fast, so

105
00:06:19.000 --> 00:06:20.774
you won't actually get to see anything.

106
00:06:20.774 --> 00:06:24.172
So we're gonna delay
a lot of our requests, so

107
00:06:24.172 --> 00:06:27.322
we can actually see what's gonna happen.

108
00:06:27.322 --> 00:06:29.783
You can get the benefit of that,
so there's a delay function here.

109
00:06:29.783 --> 00:06:34.183
So I'm gonna get new file, call it users.

110
00:06:34.183 --> 00:06:38.719
&gt;&gt; Scott Moss: And then I'm gonna get
my imports, so we got our COOKIE_NAME,

111
00:06:38.719 --> 00:06:43.927
we got our cookies redirect and
our dysfunction called getUserFromToken

112
00:06:43.927 --> 00:06:48.301
from our auth tools,
which sounds exactly like what it says.

113
00:06:48.301 --> 00:06:49.691
It does exactly what it sounds like.

114
00:06:51.956 --> 00:06:55.905
&gt;&gt; Scott Moss: And from here,
we're gonna say export const getUser or

115
00:06:55.905 --> 00:06:58.520
what do I call it, getCurrentUser.

116
00:07:05.513 --> 00:07:09.531
&gt;&gt; Scott Moss: So getCurrentUser, it
doesn't have any arguments because it can

117
00:07:09.531 --> 00:07:12.197
access the cookies because it's running.

118
00:07:12.197 --> 00:07:17.307
We're gonna be using it on React
Server Components, which when you use

119
00:07:17.307 --> 00:07:22.758
the cookie's function inside of a React
Server Component or even in a server

120
00:07:22.758 --> 00:07:28.153
mutation, you have access to the current
request and cookies needs that.

121
00:07:28.153 --> 00:07:32.773
So this will work as long as
we use it inside of a request.

122
00:07:32.773 --> 00:07:36.684
Now if I were to go to use this,
where would this not work?

123
00:07:36.684 --> 00:07:40.206
If I were to just run a script and
just run this, this would not work.

124
00:07:40.206 --> 00:07:41.523
There'd be no concept of cookies.

125
00:07:41.523 --> 00:07:43.420
It's the same thing I
said earlier about tests.

126
00:07:43.420 --> 00:07:47.113
If I were to try to test this, yeah,
it's node and it'll operate but

127
00:07:47.113 --> 00:07:50.822
you probably wouldn't get what you
thought you were gonna get here.

128
00:07:50.822 --> 00:07:56.284
Unless this is mocked out, but you still
wouldn't get the value because there's

129
00:07:56.284 --> 00:08:01.373
no concept of cookies if there's no
request, so something to keep note of.

130
00:08:01.373 --> 00:08:05.221
So we're gonna get our token,

131
00:08:05.221 --> 00:08:11.149
which is gonna be cookies.get COOKIE_NAME.

132
00:08:11.149 --> 00:08:16.661
So once we get that, the next thing we
wanna do is get our user from token.

133
00:08:16.661 --> 00:08:20.927
Well, first what we wanna do is if
we see that you don't have a token,

134
00:08:20.927 --> 00:08:24.994
we'll just redirect you to sign in,
so let's actually do that.

135
00:08:27.277 --> 00:08:32.161
&gt;&gt; Scott Moss: So if no token,
then redirect to sign in, and

136
00:08:32.161 --> 00:08:36.154
you don't have to put a return here.

137
00:08:36.154 --> 00:08:42.457
This is interesting because,
&gt;&gt; Scott Moss: What's

138
00:08:42.457 --> 00:08:44.071
the word I'm looking for?

139
00:08:44.071 --> 00:08:48.656
It returns a type never which is the same
thing as return as in nothing can happen

140
00:08:48.656 --> 00:08:53.466
after this if this is called, so it will
terminate here if this actually happens.

141
00:08:53.466 --> 00:08:54.990
So you don't actually have
to put a return there.

142
00:08:54.990 --> 00:08:57.992
You can if you want but you don't have to.

143
00:08:57.992 --> 00:09:02.739
So we have that, and
then we wanna get the user,

144
00:09:02.739 --> 00:09:06.321
which is await getUserFromToken.

145
00:09:06.321 --> 00:09:10.353
It needs to take in a cookie.

146
00:09:10.353 --> 00:09:14.535
A cookie is actually an object that
has a name and a value on it, so

147
00:09:14.535 --> 00:09:16.712
that's what this is expecting.

148
00:09:16.712 --> 00:09:20.408
And then same thing, if not user,

149
00:09:20.408 --> 00:09:26.276
then go back to sign in,
otherwise, return the user.

150
00:09:26.276 --> 00:09:35.005
So now we can use this on any page
that needs authentication protection.

151
00:09:35.005 --> 00:09:38.638
Later on, we're gonna do a global way
that just locks it down for us for

152
00:09:38.638 --> 00:09:41.729
free, then we'll be just using
this on server mutations.

153
00:09:41.729 --> 00:09:44.755
Whenever someone wants to do
something on the server or

154
00:09:44.755 --> 00:09:47.596
access some data on the server,
we would use this.

155
00:09:47.596 --> 00:09:51.320
But as far as locking down the page,
we'll do that somewhere else globally.

