WEBVTT

1
00:00:00.274 --> 00:00:00.800
&gt;&gt; Scott Moss: This one's pretty cool.

2
00:00:00.800 --> 00:00:05.527
So, suspense loading states,
if you don't know what suspense is,

3
00:00:05.527 --> 00:00:10.091
it's basically, it allows your
component to wait until some data

4
00:00:10.091 --> 00:00:12.958
comes back before you render something.

5
00:00:12.958 --> 00:00:14.903
It's the best way I can describe it.

6
00:00:14.903 --> 00:00:19.196
And then you can show like
a fallback while it's waiting.

7
00:00:19.196 --> 00:00:23.144
So perfect place for
loading indicator, that's suspense.

8
00:00:23.144 --> 00:00:27.551
What's actually happening is that
components being streamed down,

9
00:00:27.551 --> 00:00:28.601
chunk by chunk.

10
00:00:28.601 --> 00:00:32.152
So, that way you're not blocking a whole
page while something is loading.

11
00:00:32.152 --> 00:00:37.871
So, that's suspense, we're gonna get
that for free by doing one thing.

12
00:00:37.871 --> 00:00:41.962
The other thing is going to be the error
handling, so, react introduces this thing

13
00:00:41.962 --> 00:00:45.600
called an error boundary, which is
like a try catch for a component tree.

14
00:00:45.600 --> 00:00:48.726
So if you can wrap a component
tree inside of error boundary,

15
00:00:48.726 --> 00:00:52.668
it'll try catch that and show a certain
page when the error bubbles up to it.

16
00:00:52.668 --> 00:00:57.704
Okay, we get that for free too,
by just making a file, so we'll be doing

17
00:00:57.704 --> 00:01:03.420
both of those and we'll be able to see in
more detail how the caching works as well.

18
00:01:03.420 --> 00:01:06.620
So, what we're gonna do is we're
just gonna make some loading files.

19
00:01:06.620 --> 00:01:11.646
So all you really have to do is everywhere
you have a page if you add a loading file

20
00:01:11.646 --> 00:01:16.617
next to it, that will show while that
page is waiting for its data to resolve.

21
00:01:16.617 --> 00:01:20.736
You can also put an error
file next to that page and

22
00:01:20.736 --> 00:01:27.286
that will show If an error was thrown
while that page was trying to fetch data.

23
00:01:27.286 --> 00:01:32.443
So let's do that, the only caveat
here is that the error file must be

24
00:01:32.443 --> 00:01:37.601
a client component because the error
gets caught during runtime and

25
00:01:37.601 --> 00:01:40.782
the error boundaries happen at runtime.

26
00:01:40.782 --> 00:01:43.416
And also you can do
things like on click and

27
00:01:43.416 --> 00:01:47.488
you can reset them back to a previous
state and things like that.

28
00:01:47.488 --> 00:01:50.949
The server, the, I'm sorry,
the loading component can be server or

29
00:01:50.949 --> 00:01:52.602
client doesn't really matter.

30
00:01:52.602 --> 00:01:56.763
But the error one has to be client,
you'll get an error if you don't.

31
00:01:56.763 --> 00:02:02.115
So let's do that, so I'm gonna go
right down the route of dashboard,

32
00:02:02.115 --> 00:02:07.289
and I'm gonna make a loading.tsx for
the homepage which the bottom

33
00:02:07.289 --> 00:02:12.213
right on the grid, so
loading.tsx I'm gonna say home loader.

34
00:02:19.286 --> 00:02:19.818
&gt;&gt; Scott Moss: And for

35
00:02:19.818 --> 00:02:25.693
now I'm just gonna pass in
&gt;&gt; Scott Moss: Something like that.

36
00:02:25.693 --> 00:02:28.326
Actually the component library that
we have has some really good loaders.

37
00:02:28.326 --> 00:02:30.474
You know what?
Let's just leverage one of those,

38
00:02:30.474 --> 00:02:31.446
why am I being lazy?

39
00:02:31.446 --> 00:02:34.062
They have a spinner,
this is not even the best one.

40
00:02:34.062 --> 00:02:36.973
The best one is the skeleton, but
I don't feel like making that.

41
00:02:36.973 --> 00:02:42.461
So, all this spinner, I think,
because this is a server component,

42
00:02:42.461 --> 00:02:47.031
you have to import directly
from the component like that.

43
00:02:47.031 --> 00:02:52.053
So, I have to import directly from spinner
and not the slash react, which will import

44
00:02:52.053 --> 00:02:56.893
some client side stuff, which might throw
an error in the server side component.

45
00:02:56.893 --> 00:02:59.420
So I'll do a spinner here,
I'm gonna copy this.

46
00:03:01.526 --> 00:03:05.895
&gt;&gt; Scott Moss: I'm gonna go into our
RSVPs folder, make a loading.tsx.

47
00:03:05.895 --> 00:03:12.450
Do the same thing,
just change the name from home to RSVPs.

48
00:03:14.701 --> 00:03:19.614
&gt;&gt; Scott Moss: Going to my events,
do the same thing, loading.tsx,

49
00:03:19.614 --> 00:03:23.697
paste that,
change this from home to events.

50
00:03:23.697 --> 00:03:25.691
Now we got some loaders.

51
00:03:27.272 --> 00:03:32.491
&gt;&gt; Scott Moss: So if I go back
&gt;&gt; Scott Moss: And I refresh,

52
00:03:32.491 --> 00:03:38.049
now you can see the caching, so
I'm just doing a regular refresh.

53
00:03:38.049 --> 00:03:41.564
Look how quick those things come in,
you barely see the loaders, okay?

54
00:03:41.564 --> 00:03:44.380
Barely see the loaders,
I'll do a hard refresh and

55
00:03:44.380 --> 00:03:47.408
you can see this is what it
looks like without caching.

56
00:03:47.408 --> 00:03:52.118
So, without caching, with caching.

57
00:03:56.544 --> 00:03:58.455
&gt;&gt; Scott Moss: All right,
and also just notice how,

58
00:03:58.455 --> 00:04:01.991
because these are all their own pages,
they come in at their own time.

59
00:04:01.991 --> 00:04:06.009
And because we're using the loading file,
which is suspense, they're being streamed.

60
00:04:06.009 --> 00:04:10.169
So the rest of the UI is good to go,
these things are being loaded in.

61
00:04:10.169 --> 00:04:14.257
Whenever they feel they're ready,
they all have random delays, so

62
00:04:14.257 --> 00:04:15.955
they pop in at random times.

63
00:04:15.955 --> 00:04:19.560
And you can control their independent
states without having to figure out like

64
00:04:19.560 --> 00:04:22.025
the whole route, the whole page or
the whole layout.

65
00:04:22.025 --> 00:04:23.579
They're all independent.

66
00:04:27.720 --> 00:04:29.743
&gt;&gt; Scott Moss: So I think this is
something, a lot of frameworks,

67
00:04:29.743 --> 00:04:31.635
I think something like
this is what Astro does.

68
00:04:31.635 --> 00:04:35.061
Or you might have built something
like this, cuz this is not new.

69
00:04:35.061 --> 00:04:39.754
Like, for sure it's not new, but you would
have, it wasn't on the framework level.

70
00:04:39.754 --> 00:04:42.221
It was like, cool, react suspense.

71
00:04:42.221 --> 00:04:43.328
Now, how do we actually
take advantage of that?

72
00:04:43.328 --> 00:04:45.541
You had to build a bunch
of stuff to enable this, so

73
00:04:45.541 --> 00:04:47.984
really only the most elite
companies probably did it.

74
00:04:47.984 --> 00:04:53.280
Now it's just, you add a file
called loading and you're done,

75
00:04:53.280 --> 00:04:58.748
which to me is kinda crazy
&gt;&gt; Scott Moss: Cuz really

76
00:04:58.748 --> 00:05:05.513
when you add the loading file,
what it's doing is it's taking,

77
00:05:05.513 --> 00:05:10.187
it's going into the layout, I believe, and

78
00:05:10.187 --> 00:05:14.372
it's wrapping a suspense around this.

79
00:05:14.372 --> 00:05:19.150
It's saying suspense,
it's like doing this, and

80
00:05:19.150 --> 00:05:22.198
then suspense takes a fallback.

81
00:05:22.198 --> 00:05:24.204
And that's the loader that you wanna show,
so

82
00:05:24.204 --> 00:05:27.251
it takes whatever you put in that file and
puts it in his file back here.

83
00:05:27.251 --> 00:05:29.620
That's what it's done.

84
00:05:29.620 --> 00:05:33.184
So you can even do that too, and in fact,
you would if you wanted to suspend some

85
00:05:33.184 --> 00:05:35.678
client components,
you would have to right suspend.

86
00:05:35.678 --> 00:05:42.335
So,
&gt;&gt; Scott Moss: Okay, let's do the Erawan,

87
00:05:42.335 --> 00:05:47.952
so, I'll make a error file
on the root of dashboard.

88
00:05:47.952 --> 00:05:54.969
Error.tsx, and then we'll throw
an error so you can see it.

89
00:05:54.969 --> 00:06:00.326
So error.tsx has to be client, use client,
and I think I have some code here.

90
00:06:00.326 --> 00:06:02.788
I hit Save so it broke.

91
00:06:02.788 --> 00:06:06.451
Let me go back to the notes,
let's get, yeah,

92
00:06:06.451 --> 00:06:09.669
I'm just gonna take this one right here.

93
00:06:13.184 --> 00:06:21.496
&gt;&gt; Scott Moss: Do that, it's gonna
rename this to home error like that.

94
00:06:21.496 --> 00:06:24.699
This thing is not syntactically correct,
is it?

95
00:06:24.699 --> 00:06:25.296
There we go.

96
00:06:29.418 --> 00:06:34.070
&gt;&gt; Scott Moss: So we have that,
let's go back to our page here.

97
00:06:34.070 --> 00:06:37.044
So, everything still should work,
it's cash, everything's great.

98
00:06:37.044 --> 00:06:40.014
So now I'm gonna go down here to
the home one, which is this one,

99
00:06:40.014 --> 00:06:41.676
I'm gonna throw an error, right?

100
00:06:41.676 --> 00:06:45.264
So I'm gonna go here, and
I can throw an error anywhere in here,

101
00:06:45.264 --> 00:06:48.602
but I'm gonna throw an error
right in the function itself.

102
00:06:48.602 --> 00:06:54.097
So I'm gonna go in here, I'm gonna say,

103
00:06:54.097 --> 00:06:57.395
throw new error, oops.

104
00:06:57.395 --> 00:07:01.541
So I'll do that.

105
00:07:01.541 --> 00:07:03.904
What do you know?

106
00:07:03.904 --> 00:07:05.772
Only that I'm gonna errors out, but

107
00:07:05.772 --> 00:07:08.310
the rest of them load in
just fine independently.

108
00:07:08.310 --> 00:07:10.061
They don't even care,
they don't even know.

109
00:07:11.959 --> 00:07:13.857
&gt;&gt; Scott Moss: And
to me this is powerful because,

110
00:07:13.857 --> 00:07:16.020
I would say most apps aren't like this.

111
00:07:16.020 --> 00:07:18.590
Most apps, this whole page is gonna die.

112
00:07:18.590 --> 00:07:23.010
[LAUGH] Like you're gonna see like a,
yeah, you're not gonna see anything,

113
00:07:23.010 --> 00:07:24.642
the whole page is gonna die.

114
00:07:24.642 --> 00:07:27.561
But now it's just that
little thing over there.

115
00:07:27.561 --> 00:07:30.417
You can easily put a reset
button right there that says,

116
00:07:30.417 --> 00:07:33.620
click that button to load this one
again which is exactly what I put.

117
00:07:33.620 --> 00:07:36.644
That's what this button is, this button
is supposed to load it again but

118
00:07:36.644 --> 00:07:39.137
it's just gonna keep throwing
an error cuz I hard coded it so

119
00:07:43.284 --> 00:07:45.552
&gt;&gt; Scott Moss: Every, error file,

120
00:07:45.552 --> 00:07:51.479
every error boundary file comes with a,
where is it at?

121
00:07:51.479 --> 00:07:58.363
Here we go,
it comes with a reset as a fun, as a prop.

122
00:07:58.363 --> 00:08:00.573
When you call this again,

123
00:08:00.573 --> 00:08:05.902
it will try to re-render the page
in which it is a boundary for.

124
00:08:05.902 --> 00:08:08.497
It's just a re-render, it's like
re-render this again, try this again,

125
00:08:08.497 --> 00:08:09.054
try this again.

126
00:08:09.054 --> 00:08:12.777
So yeah, you can just build a really cool
UI and it's like, something happened,

127
00:08:12.777 --> 00:08:13.701
let me do that again.

128
00:08:13.701 --> 00:08:19.640
You also should have access to the error
message, I believe, let's see.

129
00:08:25.504 --> 00:08:27.099
&gt;&gt; Scott Moss: Yeah, oops, there you go.

130
00:08:27.099 --> 00:08:29.536
So it's like whatever error you threw,
you could put there too.

