WEBVTT

1
00:00:00.380 --> 00:00:03.137
&gt;&gt; Scott Moss: For our middleware,
we're gonna import these two types,

2
00:00:03.137 --> 00:00:04.635
next response, next request.

3
00:00:04.635 --> 00:00:07.473
Well, they're not types actually.

4
00:00:07.473 --> 00:00:12.814
They're light wrappers
around the native request

5
00:00:12.814 --> 00:00:19.281
object that's built into the browser and
the edge function.

6
00:00:19.281 --> 00:00:22.569
So if you didn't know that
there is a native request.

7
00:00:22.569 --> 00:00:24.093
There's also a native response.

8
00:00:24.093 --> 00:00:28.028
Those are part of the JavaScript spec.

9
00:00:28.028 --> 00:00:31.629
The next versions are just wrappers
around them to have type safety and

10
00:00:31.629 --> 00:00:32.798
some helper methods.

11
00:00:32.798 --> 00:00:35.737
But that's it, you have to pretty
much use these on the edge as well.

12
00:00:37.836 --> 00:00:38.818
&gt;&gt; Scott Moss: They're
just wrappers around that.

13
00:00:38.818 --> 00:00:40.483
So let's do that,
let's get our middleware,

14
00:00:40.483 --> 00:00:43.697
let's get our cookie name since we'll
be doing some cookie stuff in here.

15
00:00:43.697 --> 00:00:48.665
And first thing is I always like to just
figure out where I'm matching, so for us,

16
00:00:48.665 --> 00:00:51.115
we're gonna be matching on two things.

17
00:00:51.115 --> 00:00:55.960
We're gonna be matching on anywhere
that's a child of dashboard,

18
00:00:55.960 --> 00:00:59.203
that's what we wanna lock down.

19
00:00:59.203 --> 00:01:03.833
And then also I wanna match on
the route because if you notice we

20
00:01:03.833 --> 00:01:07.393
don't actually have a page on the route.

21
00:01:07.393 --> 00:01:11.912
If you just try to go to Logos 3000
to enter your browser, it'll 404,

22
00:01:11.912 --> 00:01:13.521
there's no page, right?

23
00:01:13.521 --> 00:01:15.713
And I don't wanna make one
'cuz I don't need one.

24
00:01:15.713 --> 00:01:19.230
So I wanna redirect any attempt to that
to actually go to slash dashboard.

25
00:01:21.675 --> 00:01:22.814
&gt;&gt; Scott Moss: That's the actual page.

26
00:01:25.050 --> 00:01:27.174
&gt;&gt; Scott Moss: So
I could just make a page here.

27
00:01:27.174 --> 00:01:29.746
And all it does is call it
redirect to slash dashboard.

28
00:01:29.746 --> 00:01:34.289
That'd be fine too, but the net page
would have had loaded up first and

29
00:01:34.289 --> 00:01:35.521
then redirect it.

30
00:01:35.521 --> 00:01:38.494
Or I could just do it here and never
have to make a page in the first place.

31
00:01:38.494 --> 00:01:41.942
So, I'm gonna do here.

32
00:01:41.942 --> 00:01:43.338
You can also set up redirects and

33
00:01:43.338 --> 00:01:45.983
the next config as well you can
put redirects in here as well.

34
00:01:46.993 --> 00:01:51.953
There's a handy graph in the next day's
docs that shows you in the order in

35
00:01:51.953 --> 00:01:54.201
which one has a higher priority.

36
00:01:54.201 --> 00:01:55.593
Is it the redirects in this file?

37
00:01:55.593 --> 00:01:57.073
Is it middleware?

38
00:01:57.073 --> 00:02:00.235
Is it something else,
I'll walk you through that?

39
00:02:00.235 --> 00:02:04.112
But middleware pretty much has one of the
highest priorities cuz it happens before

40
00:02:04.112 --> 00:02:05.416
your app is even executed.

41
00:02:07.420 --> 00:02:12.563
&gt;&gt; Scott Moss: So what we wanna do here,
at least for the AUTH, we wanna check to

42
00:02:12.563 --> 00:02:18.683
see if the request out next URL and
next URL I've always thought about this.

43
00:02:18.683 --> 00:02:22.334
Is it the next URL that
it's trying to go to or

44
00:02:22.334 --> 00:02:26.699
is it next URL as in the URL on next JS,
I don't know.

45
00:02:28.439 --> 00:02:30.849
But that's the URL that we want.

46
00:02:30.849 --> 00:02:32.559
It's one of those, okay?

47
00:02:32.559 --> 00:02:35.039
That's the URL that this
request is attempting to go to.

48
00:02:35.039 --> 00:02:38.821
So we're gonna check the path name of
that URL to see if it starts with slash

49
00:02:38.821 --> 00:02:39.542
dashboard.

50
00:02:39.542 --> 00:02:42.746
If it does, you better be authenticated.

51
00:02:42.746 --> 00:02:43.872
So let's check that.

52
00:02:43.872 --> 00:02:46.950
So we'll say, first let's
export our middleware function.

53
00:02:55.284 --> 00:02:57.602
&gt;&gt; Scott Moss: And
it just receives the request.

54
00:02:57.602 --> 00:03:05.235
So request as next request.

55
00:03:05.235 --> 00:03:09.576
And then I'll say if
the request.nextUrl.pathname starts with

56
00:03:09.576 --> 00:03:10.435
dashboard.

57
00:03:10.435 --> 00:03:14.914
So request.nextUrl.pathname starts

58
00:03:14.914 --> 00:03:19.259
with select /dashboard, if it does,

59
00:03:19.259 --> 00:03:24.931
then basically what I wanna
do here is like, cool.

60
00:03:24.931 --> 00:03:28.157
Okay, cool, if you went to /dashboard,
you better have a cookie.

61
00:03:28.157 --> 00:03:29.586
Otherwise I'm gonna redirect you.

62
00:03:29.586 --> 00:03:38.912
So I'm gonna say,
if not request.cookies.has(COOKIE_NAME).

63
00:03:40.068 --> 00:03:44.890
Then I want to return

64
00:03:44.890 --> 00:03:51.699
NextResponse.redirect to

65
00:03:51.699 --> 00:03:57.098
a new URL of /sign in.

66
00:03:57.098 --> 00:04:04.218
And then I have to pass in the,
request.url,

67
00:04:04.218 --> 00:04:10.126
so it can understand the full path.

68
00:04:10.126 --> 00:04:16.232
Or wait, I'm sorry,
the request dot URL goes to here.

69
00:04:16.232 --> 00:04:16.852
There we go.

70
00:04:19.555 --> 00:04:23.140
&gt;&gt; Scott Moss: So because I pass in
a relative path to the URL instance,

71
00:04:23.140 --> 00:04:27.887
I have to give it this so it's basically
gonna create a full path for this.

72
00:04:27.887 --> 00:04:33.292
It's gonna take the domain,
cool, but you want this, got it.

73
00:04:33.292 --> 00:04:35.465
I guess I should have spelled that right.

74
00:04:35.465 --> 00:04:36.005
There we go.

75
00:04:39.562 --> 00:04:43.452
&gt;&gt; Scott Moss: Okay, so that's what
happens if you try your dashboard.

76
00:04:43.452 --> 00:04:49.641
And then for the home page,
it's pretty simple.

77
00:04:49.641 --> 00:04:51.072
I'm just gonna copy it.

78
00:04:51.072 --> 00:04:56.615
This one's simple, it's just saying, hey,
if you go here, we're gonna see you here.

79
00:04:56.615 --> 00:04:58.795
That's it and
we wanna redirect, not rewrite.

80
00:04:58.795 --> 00:04:59.671
Anybody know the difference?

81
00:05:02.374 --> 00:05:04.628
&gt;&gt; Scott Moss: Is a redirect
on the client side and

82
00:05:04.628 --> 00:05:10.545
the rewrite something that happens
before the user even visits the page or?

83
00:05:10.545 --> 00:05:13.225
All of this happens before
you visit the page.

84
00:05:13.225 --> 00:05:15.352
Okay.
This, you can think of this as,

85
00:05:15.352 --> 00:05:17.125
here's the client.

86
00:05:17.125 --> 00:05:21.756
Client makes a request, it hits the
middleware, the middleware does its thing,

87
00:05:21.756 --> 00:05:23.241
and then it hits your app.

88
00:05:23.241 --> 00:05:24.552
Your app is a whole other thing.

89
00:05:24.552 --> 00:05:27.991
It's in the same repo, so
it feels it's part of the app, but

90
00:05:27.991 --> 00:05:30.087
this gets deployed somewhere else.

91
00:05:30.087 --> 00:05:35.026
This is sitting on every single server and
whatever deployment provider's

92
00:05:35.026 --> 00:05:39.358
platform that you hosted this on and
it's the gateway to your app.

93
00:05:43.571 --> 00:05:48.702
&gt;&gt; Scott Moss: But a redirect
will redirect you to this route,

94
00:05:48.702 --> 00:05:56.755
whereas a rewrite will send you to
the route that you tried to go to.

95
00:05:56.755 --> 00:06:01.347
But the value of it will
be this routes value.

96
00:06:03.061 --> 00:06:04.294
&gt;&gt; Scott Moss: It's the best
way I could describe it.

97
00:06:04.294 --> 00:06:08.955
So it was friends if I tried to go to
home, it was still similar to slash,

98
00:06:08.955 --> 00:06:11.544
but what I would see what would be here.

99
00:06:13.434 --> 00:06:20.494
&gt;&gt; Student: It actually substitutes, slash
dashboard for whatever your target is.

100
00:06:20.494 --> 00:06:23.643
&gt;&gt; Scott Moss: Yes.
&gt;&gt; Student: In that URL that's passed.

101
00:06:23.643 --> 00:06:24.893
&gt;&gt; Scott Moss: Yes, it substitutes it.

102
00:06:24.893 --> 00:06:26.364
That's a great way to say it.

103
00:06:26.364 --> 00:06:27.861
It does, it substitutes it.

104
00:06:27.861 --> 00:06:29.630
So we don't want that in this case.

105
00:06:29.630 --> 00:06:30.446
But in some cases, you might want that.

106
00:06:30.446 --> 00:06:31.213
&gt;&gt; Student: Yeah, right.

107
00:06:31.213 --> 00:06:32.037
&gt;&gt; Scott Moss: Yeah.

108
00:06:32.037 --> 00:06:33.109
&gt;&gt; Student: Proxies.

109
00:06:33.109 --> 00:06:33.961
&gt;&gt; Scott Moss: Yes.

110
00:06:33.961 --> 00:06:35.451
Proxies, yes.

111
00:06:35.451 --> 00:06:37.208
Cool, okay, let's give it a try.

112
00:06:37.208 --> 00:06:41.278
Let me get rid of that error
that I had in my users, so

113
00:06:41.278 --> 00:06:44.134
that's not breaking all the time.

114
00:06:44.134 --> 00:06:46.329
Okay, so we got that.

115
00:06:46.329 --> 00:06:50.917
We can put a log in here in our
middleware to check it out,

116
00:06:50.917 --> 00:06:54.151
we'll see if we're gonna dashboard.

117
00:06:57.376 --> 00:06:59.255
&gt;&gt; Scott Moss: Go to dashboard here and
then we'll try to go home and

118
00:06:59.255 --> 00:06:59.949
see what happens.

119
00:06:59.949 --> 00:07:01.039
So let me make sure I'm still running.

120
00:07:01.039 --> 00:07:02.092
I'm still good.

121
00:07:04.962 --> 00:07:10.615
&gt;&gt; Scott Moss: I'll go to dashboard.

122
00:07:10.615 --> 00:07:11.790
And go look at the logs.

123
00:07:14.085 --> 00:07:16.899
&gt;&gt; Scott Moss: You see you went
to dashboard and logged it there.

124
00:07:16.899 --> 00:07:19.135
And then if I try to go to home,

125
00:07:19.135 --> 00:07:23.349
it should just redirect me to
the dashboard and it does.

126
00:07:24.974 --> 00:07:25.631
&gt;&gt; Scott Moss: It's quite powerful.

127
00:07:25.631 --> 00:07:27.849
You can do some pretty
crazy stuff in there.

128
00:07:27.849 --> 00:07:31.832
Cuz you can send any request to anywhere.

129
00:07:33.818 --> 00:07:36.004
&gt;&gt; Scott Moss: This is great for
like AB testing.

130
00:07:36.004 --> 00:07:39.476
It's great for.

131
00:07:39.476 --> 00:07:41.809
There's really just, you can do so much.

132
00:07:41.809 --> 00:07:45.636
You can even run LLMs on Edge now.

133
00:07:45.636 --> 00:07:47.159
So you can do AI there if you want.

134
00:07:47.159 --> 00:07:52.129
You could determine what
company is trying to

135
00:07:52.129 --> 00:07:56.324
hit your website by their IP address.

136
00:07:56.324 --> 00:07:58.155
You can look it up with some service.

137
00:07:58.155 --> 00:08:02.563
Come back, get the name of the company or
the size of the company.

138
00:08:02.563 --> 00:08:04.435
Depending on the size of the company,

139
00:08:04.435 --> 00:08:08.996
you can rewrite the HTML on your website
to reflect that size of the company.

140
00:08:08.996 --> 00:08:11.838
So what they see is way different
than what someone else would see,

141
00:08:11.838 --> 00:08:13.071
and it's all SEO friendly.

