WEBVTT

1
00:00:00.000 --> 00:00:04.708
&gt;&gt; Scott Moss: Caching in Next.js is one
is way different than a pages directory,

2
00:00:04.708 --> 00:00:05.208
okay?

3
00:00:05.208 --> 00:00:12.042
So caching in Next.js the way it works
is by default on the server component.

4
00:00:12.042 --> 00:00:16.033
Everything's cached by default.

5
00:00:16.033 --> 00:00:20.600
There are different things that you
can put in your code that will turn

6
00:00:20.600 --> 00:00:23.366
the caching off, so let me explain that.

7
00:00:23.366 --> 00:00:25.626
Let's go to some of our slots,
for example.

8
00:00:25.626 --> 00:00:26.595
Let's do some things.

9
00:00:26.595 --> 00:00:32.220
So for instance,
what's a good thing I can do here?

10
00:00:32.220 --> 00:00:35.790
So let's do this,
I'm gonna go into my current user.

11
00:00:35.790 --> 00:00:42.523
I'm going to, we're gonna make a log here,
console log get user.

12
00:00:42.523 --> 00:00:47.608
So this is gonna this is gonna say get
user, and then I'm just gonna like just

13
00:00:47.608 --> 00:00:52.376
turn this off for, or actually we'll
just leave it we'll just see it,

14
00:00:52.376 --> 00:00:56.925
we'll see a number so let's see,
let's run this or refresh this.

15
00:00:56.925 --> 00:01:02.079
I'm gonna do a hard refresh
actually let me clear my console.

16
00:01:02.079 --> 00:01:04.953
I'll do a heart refresh.

17
00:01:04.953 --> 00:01:07.357
Okay, we saw get user three times.

18
00:01:07.357 --> 00:01:10.593
That makes sense because we have
three slots that each do it once.

19
00:01:10.593 --> 00:01:13.472
So we saw it three times, right?

20
00:01:13.472 --> 00:01:16.828
If I refresh it again,
we see it again three times.

21
00:01:16.828 --> 00:01:20.275
So it's clear that in this
case is not cashing, right?

22
00:01:20.275 --> 00:01:25.020
We're not caching by default
with this scenario, and

23
00:01:25.020 --> 00:01:29.767
that's because we're using
something that Next.js

24
00:01:29.767 --> 00:01:34.525
has determined, is dynamic and
should not be cached.

25
00:01:34.525 --> 00:01:36.207
And that's gonna be cookies.

26
00:01:36.207 --> 00:01:41.633
Because we're using cookies in this
function, which is per request, Next.js

27
00:01:41.633 --> 00:01:46.976
is smart enough to know like, I should
not cache this because this function

28
00:01:46.976 --> 00:01:52.344
depends on a dynamic value like cookies
which can change every single request.

29
00:01:52.344 --> 00:01:54.139
So therefore, it should not be cached.

30
00:01:54.139 --> 00:01:55.887
It's just gonna get the same user though.

31
00:01:55.887 --> 00:01:59.173
It's gonna hit the database and
get the same user three different times or

32
00:01:59.173 --> 00:02:02.949
in amount of times or however many times
I'm calling this function and one request.

33
00:02:02.949 --> 00:02:04.417
It's gonna get it that many times.

34
00:02:04.417 --> 00:02:05.417
That's kind of redundant.

35
00:02:05.417 --> 00:02:11.527
So, in this case we don't want to do
a persistent cache because in that way,

36
00:02:11.527 --> 00:02:16.396
it will always read the same
cookie that I read last time, and

37
00:02:16.396 --> 00:02:20.320
if someone logged out,
we would never catch it.

38
00:02:20.320 --> 00:02:24.433
But what we do wanna do
is a per request cache.

39
00:02:24.433 --> 00:02:26.225
We wanna memorize this.

40
00:02:26.225 --> 00:02:33.239
So on the same request, it won't do
the same function more than once.

41
00:02:33.239 --> 00:02:35.160
So that's what we would
want in this scenario.

42
00:02:35.160 --> 00:02:42.464
So the best way to do that is gonna be
with the cache function from React.

43
00:02:42.464 --> 00:02:45.536
So if you get the cache
function from React,

44
00:02:45.536 --> 00:02:49.033
you can just wrap it around this,
pretty simple.

45
00:02:49.033 --> 00:02:51.019
Okay, how was it doing that?

46
00:02:51.019 --> 00:02:53.979
And then we'll just say cache this.

47
00:02:53.979 --> 00:02:57.832
This is a per request memorization.

48
00:02:57.832 --> 00:02:59.650
So now if I put the log in here.

49
00:03:02.033 --> 00:03:04.035
&gt;&gt; Scott Moss: Let's see what happens.

50
00:03:04.035 --> 00:03:07.687
We're gonna go back, we're gonna refresh,

51
00:03:07.687 --> 00:03:11.631
and I see user one time now
instead of three times.

52
00:03:11.631 --> 00:03:12.879
So that's great.

53
00:03:12.879 --> 00:03:16.119
We want that, that solved that problem.

54
00:03:16.119 --> 00:03:21.877
But there are other scenarios
where we might want to cache,

55
00:03:21.877 --> 00:03:24.538
we might not want to cache.

56
00:03:24.538 --> 00:03:32.592
So let's go look at the other functions
that we call to see their behaviors.

