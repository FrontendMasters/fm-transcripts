WEBVTT

1
00:00:00.160 --> 00:00:04.010
&gt;&gt; Scott Moss: First thing we need to do
is we need to make a new actions file.

2
00:00:04.010 --> 00:00:05.201
We gotta call it events and

3
00:00:05.201 --> 00:00:08.430
that's where we got to create
a function called CreateNewEvents.

4
00:00:08.430 --> 00:00:10.779
So, let's do that.

5
00:00:10.779 --> 00:00:12.919
In our actions folder at the top,

6
00:00:12.919 --> 00:00:18.699
we're gonna say events,
&gt;&gt; Scott Moss: Like that.

7
00:00:23.336 --> 00:00:25.100
&gt;&gt; Scott Moss: Is gonna
bring in my imports.

8
00:00:25.100 --> 00:00:27.760
There's really nothing here
that you haven't seen yet.

9
00:00:27.760 --> 00:00:31.144
I think the only one that's a little
different is his randomName thing.

10
00:00:31.144 --> 00:00:32.540
I didn't feel like making a mode.

11
00:00:32.540 --> 00:00:36.553
I was gonna do the whole modal route
intercepting thing, but I'm just like,

12
00:00:36.553 --> 00:00:39.040
honestly, I just don't
use this production.

13
00:00:39.040 --> 00:00:42.020
I can't fake it, it's a cool feature,
but I just never use it.

14
00:00:42.020 --> 00:00:45.620
So I didn't make a modal where you can
type in an event name and do all that.

15
00:00:45.620 --> 00:00:47.270
Instead, we're just gonna
default to some stuff.

16
00:00:47.270 --> 00:00:49.683
So all you do is click the button and
the event gets created for

17
00:00:49.683 --> 00:00:50.685
you with good defaults.

18
00:00:50.685 --> 00:00:53.995
But I could talk about
the route intercepting,

19
00:00:53.995 --> 00:00:59.787
parallel routes combination and make a URL
bound model, which is great in theory,

20
00:00:59.787 --> 00:01:04.850
but I just don't use it in production,
so I just didn't wanna teach it.

21
00:01:04.850 --> 00:01:06.943
But yeah,
this thing creates a random name.

22
00:01:06.943 --> 00:01:10.608
So yeah, let's make this function
export cons, CreateNewEvents.

23
00:01:14.438 --> 00:01:16.299
&gt;&gt; Scott Moss: It's gonna be async.

24
00:01:16.299 --> 00:01:17.428
I'm just going to await this.

25
00:01:17.428 --> 00:01:20.904
I'm just gonna delay it cuz
it really moves so quick.

26
00:01:20.904 --> 00:01:24.702
I'll say at most make this two seconds,
you pass a number to delay.

27
00:01:24.702 --> 00:01:28.040
That's the upper bound of
how long it should wait.

28
00:01:30.019 --> 00:01:31.893
&gt;&gt; Scott Moss: We want to get the user,
we need the user,

29
00:01:31.893 --> 00:01:33.992
because we need to know
who created the event.

30
00:01:33.992 --> 00:01:39.475
So we'll say user equals
await getCurrentUser.

31
00:01:41.077 --> 00:01:41.914
&gt;&gt; Scott Moss: Like that,

32
00:01:41.914 --> 00:01:46.029
don't forget we need to put our
use server at the top here.

33
00:01:48.874 --> 00:01:49.919
&gt;&gt; Scott Moss: So we got that.

34
00:01:49.919 --> 00:01:53.999
And then we just want to go ahead and

35
00:01:53.999 --> 00:01:58.800
insert the new event into the database.

36
00:01:58.800 --> 00:02:05.440
So I'm actually just gonna copy this
part right here, and I'll say this.

37
00:02:05.440 --> 00:02:10.502
There we go, db.insert:events.

38
00:02:14.403 --> 00:02:17.780
&gt;&gt; Scott Moss: Added a new one, set
private defaults, gave it a random name,

39
00:02:17.780 --> 00:02:20.919
gave it a start date of Now,
and we said it's this user ID.

40
00:02:20.919 --> 00:02:22.684
So you notice we're not
returning anything right now.

41
00:02:22.684 --> 00:02:23.430
We'll talk about that.

42
00:02:23.430 --> 00:02:27.073
You might be thinking like, don't you
wanna get this new event that you created

43
00:02:27.073 --> 00:02:29.230
and return it so you can get access to it?

44
00:02:29.230 --> 00:02:34.209
Maybe I'll talk about what we're gonna
do instead, how you would do this, and

45
00:02:34.209 --> 00:02:36.903
why you probably ,can't do it right now.

46
00:02:36.903 --> 00:02:40.949
[LAUGH] And even,
why you don't really need to.

47
00:02:40.949 --> 00:02:41.958
It's kind of crazy.

48
00:02:44.457 --> 00:02:45.605
&gt;&gt; Scott Moss: Okay, so we got that.

49
00:02:47.704 --> 00:02:50.345
&gt;&gt; Scott Moss: The next thing
is we have a nav component.

50
00:02:50.345 --> 00:02:55.443
That nav component is where we're going
to add a button that when you click it,

51
00:02:55.443 --> 00:02:57.541
will create a new event for you.

52
00:02:57.541 --> 00:02:58.256
It's pretty simple.

53
00:02:58.256 --> 00:03:00.210
So let's go do that.

54
00:03:00.210 --> 00:03:06.505
Let's go to our nav component up here.

55
00:03:06.505 --> 00:03:13.860
I'm gonna import our
createNewEvent function, like so.

56
00:03:13.860 --> 00:03:20.750
I'm gonna import our use
transition hook from React.

57
00:03:20.750 --> 00:03:26.690
It's not React,
not Next.js it's React like so.

58
00:03:26.690 --> 00:03:28.658
And then we need to make our transition.

59
00:03:28.658 --> 00:03:33.685
So we're gonna here I'm gonna say
this use transition like this.

60
00:03:33.685 --> 00:03:36.761
And you get back a tuple.

61
00:03:36.761 --> 00:03:42.155
You get back a pending state, this is
true if the transition has started,

62
00:03:42.155 --> 00:03:45.557
and then start transition
is how you started.

63
00:03:45.557 --> 00:03:48.292
So it's pending start transition.

64
00:03:51.653 --> 00:03:53.724
&gt;&gt; Scott Moss: Like that, there we go.

65
00:03:58.350 --> 00:04:02.392
&gt;&gt; Scott Moss: The next thing is, I I'm
just gonna make a simple function for

66
00:04:02.392 --> 00:04:06.048
the onClick handler that just
call start transition and

67
00:04:06.048 --> 00:04:08.553
then it creates the new event, okay?

68
00:04:08.553 --> 00:04:15.452
So I'll say handleClick.

69
00:04:15.452 --> 00:04:20.218
It's just going to start the transition,
which takes a call back.

70
00:04:20.218 --> 00:04:25.884
And then I'm just gonna say,
go ahead and createNewEvent.

71
00:04:25.884 --> 00:04:27.405
Notice I'm not awaiting it.

72
00:04:29.869 --> 00:04:32.841
&gt;&gt; Scott Moss: This is
not an async function.

73
00:04:32.841 --> 00:04:34.559
At least not right now, it's not.

74
00:04:35.859 --> 00:04:41.365
It will be, we'll talk about that later,
but now it's not.

75
00:04:41.365 --> 00:04:47.389
And then lastly, we just need to
add in this little tool tip thing,

76
00:04:47.389 --> 00:04:49.877
and it should be good to go.

77
00:04:49.877 --> 00:04:55.708
So I'm gonna add in this
tooltip button component.

78
00:04:55.708 --> 00:05:00.814
Just make sure that the onClick is mapped
to this onClick function we just made,

79
00:05:00.814 --> 00:05:03.251
and isLoading is bound to pending, so

80
00:05:03.251 --> 00:05:07.075
it'll show a loader when it's
actually trying to create.

81
00:05:15.664 --> 00:05:19.849
&gt;&gt; Scott Moss: I think that's it for
that part, right there.

82
00:05:19.849 --> 00:05:24.699
So now what we wanna do
is test this out and

83
00:05:24.699 --> 00:05:29.559
let's see where it kind of falls apart.

84
00:05:29.559 --> 00:05:32.463
So now, I gotta start this again.

85
00:05:32.463 --> 00:05:33.783
I keep forgetting I stopped it.

86
00:05:35.774 --> 00:05:36.940
You see I keep typing button.

87
00:05:36.940 --> 00:05:37.996
I use button a lot.

88
00:05:42.821 --> 00:05:43.766
&gt;&gt; Scott Moss: It's just faster.

89
00:05:43.766 --> 00:05:45.121
It's like way faster.

90
00:05:45.121 --> 00:05:46.119
It's crazy.

91
00:05:49.322 --> 00:05:53.831
&gt;&gt; Scott Moss: Okay, so now you have this
button up here, it says New Event, okay?

92
00:05:53.831 --> 00:05:57.541
Let's add some logs so
we can actually see what's going on,

93
00:05:57.541 --> 00:06:00.031
otherwise it'd be really hard to know.

94
00:06:00.031 --> 00:06:07.312
So I'll just say a log event saved.

95
00:06:08.550 --> 00:06:14.591
&gt;&gt; Scott Moss: Saving of it,
I guess you could do a trace here,

96
00:06:14.591 --> 00:06:18.376
but she's got time for that.

97
00:06:18.376 --> 00:06:20.743
So do that.

98
00:06:20.743 --> 00:06:23.610
Click this button, it loaded.

99
00:06:23.610 --> 00:06:26.082
Something happened, we can go look.

100
00:06:26.082 --> 00:06:28.162
It says saving event, event saved.

101
00:06:28.162 --> 00:06:31.718
So it did, it went ahead and
did all of that.

102
00:06:31.718 --> 00:06:37.409
Before I go and do anything, did
anybody expect anything else to happen?

103
00:06:37.409 --> 00:06:39.336
If you just look at this dashboard,

104
00:06:39.336 --> 00:06:43.269
did anybody expect one of these things
to have some new thing on it maybe?

105
00:06:43.269 --> 00:06:44.076
&gt;&gt; Student: Yeah.

106
00:06:44.076 --> 00:06:45.469
&gt;&gt; Scott Moss: All right, latest events.

107
00:06:45.469 --> 00:06:46.970
Maybe there should be another one here,
right?

108
00:06:46.970 --> 00:06:50.350
Okay, here's a question.

109
00:06:50.350 --> 00:06:55.256
If I do a refresh, not a hard refresh, if
I do a regular refresh, assuming the event

110
00:06:55.256 --> 00:07:00.109
got saved and assuming the query picks it
up, will that show on the latest events?

111
00:07:00.109 --> 00:07:00.826
&gt;&gt; Student: I don't believe so
during the cache out.

112
00:07:00.826 --> 00:07:02.370
No.

113
00:07:02.370 --> 00:07:04.105
&gt;&gt; Scott Moss: Let's see,
I'm not doing a hard refresh.

114
00:07:04.105 --> 00:07:05.660
&gt;&gt; Student: Yep.

115
00:07:05.660 --> 00:07:06.321
&gt;&gt; Scott Moss: It's cache.

116
00:07:06.321 --> 00:07:07.038
&gt;&gt; Student: It's cache.

117
00:07:07.038 --> 00:07:12.587
&gt;&gt; Scott Moss: If I do refresh,
it's there, right?

118
00:07:12.587 --> 00:07:16.245
Caching, it's crazy, but we don't
want either one of those behaviors,

119
00:07:16.245 --> 00:07:19.685
we want it to show up after click
the button that's what want, right?

120
00:07:19.685 --> 00:07:22.527
Okay, let's fix that.

121
00:07:22.527 --> 00:07:28.877
So to fix that,
we need to revalidate some tags, right?

122
00:07:28.877 --> 00:07:34.130
So first what tag is this?

123
00:07:34.130 --> 00:07:36.671
Let's go figure out what tag this is.

124
00:07:36.671 --> 00:07:43.554
So if we go to that slot,
that slot is for events.

125
00:07:43.554 --> 00:07:47.843
That page uses
the getEventsForDashboard function,

126
00:07:47.843 --> 00:07:50.926
that uses the dashboard:events tag.

127
00:07:50.926 --> 00:07:53.832
So we're gonna revalidate this tag.

128
00:07:53.832 --> 00:07:56.876
So I'm gonna go back to
our events function.

129
00:07:56.876 --> 00:08:01.762
I'm gonna go down here,
I'm gonna import something

130
00:08:01.762 --> 00:08:05.465
called revalidate tag from next cache.

131
00:08:05.465 --> 00:08:11.290
And then I'm gonna say revalidate
that dashboard events, okay?

132
00:08:11.290 --> 00:08:14.925
This might work or it won't [LAUGH].

133
00:08:14.925 --> 00:08:18.039
Let me just do a heart
refresh just in case.

134
00:08:18.039 --> 00:08:22.336
And now I'm gonna create one,
And it shows up,

135
00:08:22.336 --> 00:08:27.496
because we revalidated the cache,
which triggered this

136
00:08:27.496 --> 00:08:32.992
to run the query again,
therefore getting the latest data.

