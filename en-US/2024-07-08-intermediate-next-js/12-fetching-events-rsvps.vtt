WEBVTT

1
00:00:00.000 --> 00:00:01.166
&gt;&gt; Scott Moss: Let's see the same for
events.

2
00:00:01.166 --> 00:00:02.980
So let's go make our events one.

3
00:00:02.980 --> 00:00:06.932
I'm gonna make its own file
inside the utils folder.

4
00:00:06.932 --> 00:00:09.522
I like to keep all these things separate.

5
00:00:09.522 --> 00:00:14.428
I rather have one file with one function
in it than, I rather have many files,

6
00:00:14.428 --> 00:00:18.748
each with one function in it than
one file with five functions in it.

7
00:00:18.748 --> 00:00:22.648
Maybe there's people feel differently but
that's just me.

8
00:00:22.648 --> 00:00:24.078
So we have our events.

9
00:00:26.997 --> 00:00:29.201
&gt;&gt; Scott Moss: Same thing here.

10
00:00:29.201 --> 00:00:32.759
Well actually, we're not gonna
use this memoized thing yet.

11
00:00:32.759 --> 00:00:33.535
I like you didn't see this.

12
00:00:33.535 --> 00:00:34.806
We're not gonna use it right now.

13
00:00:34.806 --> 00:00:36.008
We'll use it later.

14
00:00:36.008 --> 00:00:37.108
Don't look at that.

15
00:00:41.195 --> 00:00:48.070
&gt;&gt; Scott Moss: So,
we're gonna export getEventsForDashboard.

16
00:00:48.070 --> 00:00:49.854
That's an async function.

17
00:00:49.854 --> 00:00:54.016
Takes in a userId, I think.

18
00:00:54.016 --> 00:00:54.935
Yes, it does.

19
00:00:54.935 --> 00:00:56.601
We're gonna simulate a delay here.

20
00:00:59.440 --> 00:01:03.650
&gt;&gt; Scott Moss: And then this query is a
lot simpler, so I'm just gonna copy this,

21
00:01:03.650 --> 00:01:05.390
but I'll walk through it.

22
00:01:05.390 --> 00:01:13.878
This query is using drizzles query syntax
versus more than native dot select syntax.

23
00:01:13.878 --> 00:01:16.908
So this is actually a lot
closer to what Prisma does.

24
00:01:16.908 --> 00:01:18.798
So I'm querying the events table.

25
00:01:18.798 --> 00:01:24.274
I wanna find many where the createdById
equals the given userId and

26
00:01:24.274 --> 00:01:29.064
I wanna select these columns and
I wanna join this table and

27
00:01:29.064 --> 00:01:35.551
I wanna limit to five and I wanna order
by the ascending events.startOndate.

28
00:01:35.551 --> 00:01:42.624
So it will show me the oldest ones first
down to the newest ones on the start date,

29
00:01:42.624 --> 00:01:46.741
because if this is the start
date of the event,

30
00:01:46.741 --> 00:01:51.282
that means the older one at
the top is the one that's

31
00:01:51.282 --> 00:01:55.318
about to show that's
the most upcoming one.

32
00:01:55.318 --> 00:01:59.483
That's the one that's about to
start sooner than the rest,

33
00:01:59.483 --> 00:02:02.597
because its date is older, therefore less.

34
00:02:02.597 --> 00:02:05.899
Okay, so
we got that same concept server only.

35
00:02:05.899 --> 00:02:07.512
Everything's the same
here we've got our delay.

36
00:02:07.512 --> 00:02:12.184
Let's go add this to our events page.

37
00:02:12.184 --> 00:02:16.764
So we'll go here, have our event slot.

38
00:02:16.764 --> 00:02:22.576
We're going to add I have async here.

39
00:02:22.576 --> 00:02:23.812
Wait, did I do that in the page?

40
00:02:23.812 --> 00:02:25.300
Did I do async?

41
00:02:25.300 --> 00:02:26.645
I just realized that.

42
00:02:29.649 --> 00:02:30.789
&gt;&gt; Scott Moss: Okay, I did, I'm perfect.

43
00:02:30.789 --> 00:02:35.277
All right, so we'll do async here,
and then we'll get our user.

44
00:02:42.106 --> 00:02:45.690
&gt;&gt; Scott Moss: Okay, and
then we'll get the data.

45
00:02:45.690 --> 00:02:50.226
So that'll be await,
getEventsForDashboard,

46
00:02:50.226 --> 00:02:55.626
take some user.id, and
then let's get the JSX for that.

47
00:02:55.626 --> 00:02:57.725
Wait, I guess I need to return the data?

48
00:02:57.725 --> 00:02:58.935
Sorry about that.

49
00:03:02.475 --> 00:03:05.027
&gt;&gt; Scott Moss: I'm just going to
return the data or empty array.

50
00:03:05.027 --> 00:03:10.532
That way it won't break my map inside
of my page, so it's always an array.

51
00:03:13.002 --> 00:03:14.493
&gt;&gt; Scott Moss: Just in case this does it.

52
00:03:14.493 --> 00:03:16.320
So we got that.

53
00:03:18.915 --> 00:03:23.313
&gt;&gt; Scott Moss: And then the JSX is
a little more complicated here.

54
00:03:23.313 --> 00:03:28.741
This is not a UI course, so
not really gonna talk too much about it.

55
00:03:28.741 --> 00:03:33.125
So I'm just gonna grab these

56
00:03:33.125 --> 00:03:37.515
imports and the wrong file.

57
00:03:37.515 --> 00:03:38.611
There we go.

58
00:03:44.166 --> 00:03:51.916
&gt;&gt; Scott Moss: And then let's get our JSX.

59
00:03:53.088 --> 00:03:54.846
Okay.

60
00:03:54.846 --> 00:03:56.187
There we go.

61
00:04:03.394 --> 00:04:08.224
&gt;&gt; Scott Moss: Cool, okay, so
I'm gonna change this to events.

62
00:04:08.224 --> 00:04:10.340
There we go.

63
00:04:10.340 --> 00:04:16.004
This is really just like making like
a table with some columns in it.

64
00:04:16.004 --> 00:04:20.064
And you can click on one of the events,
we'll make that page later.

65
00:04:20.064 --> 00:04:22.896
Nothing too specific, using some of
the components from the component library,

66
00:04:22.896 --> 00:04:23.807
feel free to check it out.

67
00:04:23.807 --> 00:04:26.385
If you don't react,
it'll make sense to you.

68
00:04:26.385 --> 00:04:27.488
It's nothing crazy.

69
00:04:27.488 --> 00:04:30.803
So let's see if that loads up.

70
00:04:34.179 --> 00:04:37.597
&gt;&gt; Scott Moss: There we go,
so latest events, loads up.

71
00:04:37.597 --> 00:04:39.591
If you hover over this or this,

72
00:04:39.591 --> 00:04:43.980
you'll see it'll try to link to
some page we haven't created yet.

73
00:04:43.980 --> 00:04:50.362
You'll get a 404 if you try to go there,
probably, yep.

74
00:04:50.362 --> 00:04:51.410
Loads up pretty good.

75
00:04:51.410 --> 00:04:53.457
If we refresh, it's still there.

76
00:04:53.457 --> 00:04:57.855
I do a hard refresh, it's still there.

77
00:04:57.855 --> 00:04:59.820
Maybe you want that,
maybe you don't want that.

78
00:04:59.820 --> 00:05:00.967
What if a new event came in?

79
00:05:00.967 --> 00:05:03.992
Does it get it, who knows?

80
00:05:08.417 --> 00:05:11.096
&gt;&gt; Scott Moss: And then for
the last one, we'll do the RSVPs.

81
00:05:11.096 --> 00:05:18.471
So RSVPs is a little more difficult
query because the schema's bad.

82
00:05:18.471 --> 00:05:20.376
So let's do that.

83
00:05:20.376 --> 00:05:22.573
We'll go to utils.

84
00:05:22.573 --> 00:05:25.604
Make another one, rsvps.

85
00:05:29.743 --> 00:05:34.683
&gt;&gt; Scott Moss: And we call this function
getRsvpsForDashboard, so let's do that.

86
00:05:41.654 --> 00:05:44.310
&gt;&gt; Scott Moss: And
this one takes in a userId.

87
00:05:47.687 --> 00:05:49.591
&gt;&gt; Scott Moss: There we go.

88
00:05:49.591 --> 00:05:52.624
Wait, our delay.

89
00:05:52.624 --> 00:05:56.783
And then I'm just going to
bring in this query logic.

90
00:05:56.783 --> 00:05:57.892
So I'll talk about this a little bit.

91
00:05:57.892 --> 00:06:02.836
Basically what I'm doing here,
using the query builder from Grizz.

92
00:06:02.836 --> 00:06:07.658
I wanna find many events where
the createdById equals the current

93
00:06:07.658 --> 00:06:11.792
userId select the ID of all
those events only continue.

94
00:06:11.792 --> 00:06:16.146
There's actually if this
user has events if they do,

95
00:06:16.146 --> 00:06:22.533
then I want to select from the attendees
table, make sure they're distinct,

96
00:06:22.533 --> 00:06:28.269
so d dupe them where in rsvp.eventId
is one of these usersEventsIds.

97
00:06:28.269 --> 00:06:32.825
And I can get rsvp cuz I'm
joining it to an attendee cuz

98
00:06:32.825 --> 00:06:37.492
an attendee has a one to many
relationship with rsvps.

99
00:06:37.492 --> 00:06:41.147
So one attendee can have many rsvps so
I can join on here.

100
00:06:41.147 --> 00:06:45.890
And then I can join the events on the rsvp
because the rsvp knows what event it

101
00:06:45.890 --> 00:06:46.425
is for.

102
00:06:46.425 --> 00:06:49.756
And that's how I'm able
to access those and

103
00:06:49.756 --> 00:06:53.268
then just order by
the createdAt descending so

104
00:06:53.268 --> 00:06:58.595
I can show the latest rsvp at the top
with the oldest ones at the bottom.

105
00:06:58.595 --> 00:06:59.499
And that's what this is.

106
00:06:59.499 --> 00:07:02.746
So I get back, actually get back
an array that looks It's kind of weird.

107
00:07:02.746 --> 00:07:06.031
It has like an events object,
which is just one event.

108
00:07:06.031 --> 00:07:11.833
It gets back rsvp object or
rsvps object, which is just one.

109
00:07:11.833 --> 00:07:14.463
And attendees, which is just one,
it's like an array of all of those.

110
00:07:14.463 --> 00:07:20.977
So it's kind of weird how it's formatted,
but there it is.

111
00:07:20.977 --> 00:07:23.827
And then the JSX for that.

112
00:07:23.827 --> 00:07:25.473
I'm just gonna copy this right quick.

113
00:07:27.965 --> 00:07:33.971
&gt;&gt; Scott Moss: And
we'll go into the RSVPs or

114
00:07:33.971 --> 00:07:38.061
RSVPs, here we go.

115
00:07:38.061 --> 00:07:41.533
So for this one, we get our imports in,
and then for the JSX,

116
00:07:41.533 --> 00:07:44.685
we first, let's get the user and
let's get the data.

117
00:07:44.685 --> 00:07:51.909
So async user awaits, getCurrentUser.

118
00:07:51.909 --> 00:07:57.089
And then what do I call it events =

119
00:07:57.089 --> 00:08:01.906
await get, what did I call it?

120
00:08:03.908 --> 00:08:06.150
&gt;&gt; Scott Moss: RsvpsForDashboard.

121
00:08:06.150 --> 00:08:10.260
I don't know why I'm calling them events,
but

122
00:08:10.260 --> 00:08:13.873
rsvpsForDashboard takes in a user.id.

123
00:08:13.873 --> 00:08:16.873
There we go.

124
00:08:16.873 --> 00:08:21.065
And then from here, all of this JSX,

125
00:08:21.065 --> 00:08:27.168
which is not innovative or
important but necessary.

126
00:08:29.762 --> 00:08:33.913
&gt;&gt; Scott Moss: So I'll just loop over
those, and it's gonna be another table

127
00:08:33.913 --> 00:08:38.080
similar to the one that we just did,
just slightly different.

128
00:08:38.080 --> 00:08:41.838
Put those on the page really like I said,
nothing special, just, JSX.

129
00:08:41.838 --> 00:08:44.320
The important part is
what's going on here.

130
00:08:44.320 --> 00:08:45.943
So let's see if that loads up.

131
00:08:49.101 --> 00:08:54.954
&gt;&gt; Scott Moss: And it does, but does it?

132
00:08:54.954 --> 00:08:58.545
[LAUGH] Let's see, so.

133
00:08:58.545 --> 00:09:03.573
&gt;&gt; Student: The notion doc is
importing events again there,

134
00:09:03.573 --> 00:09:07.005
the GitHub is different then.

135
00:09:07.005 --> 00:09:08.652
&gt;&gt; Scott Moss: Okay,
yeah, that makes sense.

136
00:09:08.652 --> 00:09:10.013
I might have wrote it wrong in notion.

137
00:09:10.013 --> 00:09:11.114
That's okay.

138
00:09:11.114 --> 00:09:13.318
Let's go to GitHub and get it and
I'll fix it in the notion.

139
00:09:13.318 --> 00:09:19.815
So let me go to GitHub, go to my app,

140
00:09:19.815 --> 00:09:25.888
go to dashboard, RSVPs, page.

141
00:09:25.888 --> 00:09:27.852
Yeah, it's way different.

142
00:09:27.852 --> 00:09:33.363
That's why I was looking at it,
I don't know if that's the same.

143
00:09:33.363 --> 00:09:37.987
So let's try this,

144
00:09:37.987 --> 00:09:42.070
data and do that.

145
00:09:42.070 --> 00:09:43.214
There we go.

146
00:09:47.643 --> 00:09:50.447
&gt;&gt; Scott Moss: Okay, so
now let's see if this loads.

147
00:09:50.447 --> 00:09:51.697
There we go.

148
00:09:54.926 --> 00:09:59.609
&gt;&gt; Scott Moss: So now we have our three
slots loading data independently from

149
00:09:59.609 --> 00:10:00.608
each other.

150
00:10:03.279 --> 00:10:05.791
&gt;&gt; Scott Moss: And they're all
their own pages, but they're yet

151
00:10:05.791 --> 00:10:07.086
still in the same layout.

152
00:10:07.086 --> 00:10:11.846
And if we go to, well, I guess we'll have
to wait to make this route to go to it,

153
00:10:11.846 --> 00:10:14.027
but we only wanna show this layout.

154
00:10:14.027 --> 00:10:18.947
If the path name, eco/dashboard, if we go
somewhere else, we don't want this layout,

155
00:10:18.947 --> 00:10:22.402
but we'll wait till we make some
more pages for that to happen.

156
00:10:22.402 --> 00:10:23.946
The way I think about it is like,

157
00:10:23.946 --> 00:10:27.049
it actually works the way you
think a React component will work.

158
00:10:27.049 --> 00:10:30.026
Like who here, the first time they
ever used React was like, yeah,

159
00:10:30.026 --> 00:10:32.720
I'm just gonna call a promise
at the top of this component.

160
00:10:32.720 --> 00:10:33.675
Wait, that doesn't work.

161
00:10:33.675 --> 00:10:38.149
I got to put it in a,
well back then a life cycle method.

162
00:10:38.149 --> 00:10:40.699
And then now it's like a use effect, but

163
00:10:40.699 --> 00:10:44.300
it works the way you think
a regular function would work.

164
00:10:44.300 --> 00:10:45.975
So to me, it's easier to understand.

165
00:10:45.975 --> 00:10:47.219
Yeah, you got a question.

166
00:10:47.219 --> 00:10:52.012
&gt;&gt; Student: Yeah, I was curious, so
with the interactions between a server

167
00:10:52.012 --> 00:10:56.628
component and a server action,
one of the benefits then being

168
00:10:56.628 --> 00:11:00.648
able to keep the server state
in sync with the client.

169
00:11:00.648 --> 00:11:05.250
If you were to perform a server action
that maybe updates a user as an RSVP,

170
00:11:05.250 --> 00:11:09.866
how would that behave within the React
server component in this context?

171
00:11:09.866 --> 00:11:12.428
&gt;&gt; Scott Moss: So if you wanted to
take one of these and like update it,

172
00:11:12.428 --> 00:11:13.840
is that what you're saying?

173
00:11:13.840 --> 00:11:15.174
&gt;&gt; Student: Yeah, exactly.

174
00:11:15.174 --> 00:11:17.657
&gt;&gt; Scott Moss: Yes, well,
in this example, so

175
00:11:17.657 --> 00:11:22.895
if you wanted to stay within like
the whole server actions ecosystem,

176
00:11:22.895 --> 00:11:28.695
you'd have to go make a client component
that you would bring inside of here.

177
00:11:28.695 --> 00:11:32.656
And then that client component would
import a server action that did

178
00:11:32.656 --> 00:11:33.428
the update.

179
00:11:33.428 --> 00:11:36.893
And then you can pass in as a prop,
whatever you want into that component.

180
00:11:36.893 --> 00:11:41.183
So in this case, like a rsvp id,
the things you wanna update, and

181
00:11:41.183 --> 00:11:44.935
then that component can render
that because you won't.

182
00:11:44.935 --> 00:11:50.034
You won't be using the server actions
inside this server component because

183
00:11:50.034 --> 00:11:55.545
there's no way to capture an interaction
like an on click or something like that.

184
00:11:55.545 --> 00:11:58.496
So how would it know when you
want it to run the server action?

185
00:11:58.496 --> 00:12:01.985
So the server action has to
run on some client component.

186
00:12:01.985 --> 00:12:03.954
So that's how that would work.

