WEBVTT

1
00:00:00.264 --> 00:00:04.981
&gt;&gt; Scott Moss: Caching on other
server-side data that doesn't

2
00:00:04.981 --> 00:00:09.032
use request-based access like cookies.

3
00:00:09.032 --> 00:00:14.073
By default, what React tries
to do is it tries to pretty

4
00:00:14.073 --> 00:00:20.883
much cache everything according to
the page that the data is rendered on.

5
00:00:20.883 --> 00:00:24.945
So in the case of a home,
like this home right here,

6
00:00:24.945 --> 00:00:30.907
it's gonna try to cache it if I try
to navigate with client-side routing.

7
00:00:30.907 --> 00:00:35.865
So what I'm gonna have to
do here is I'm gonna go to

8
00:00:35.865 --> 00:00:40.483
our dashboard,
I'm gonna make a new folder.

9
00:00:40.483 --> 00:00:42.399
I'm gonna call it events,
without the @ sign.

10
00:00:42.399 --> 00:00:47.126
Since we have a route called events,
I'm gonna put a page in here, right quick,

11
00:00:47.126 --> 00:00:47.902
page.tsx.

12
00:00:47.902 --> 00:00:50.374
And I'm just gonna just put something
in here so we can route to it.

13
00:00:54.181 --> 00:00:56.548
&gt;&gt; Scott Moss: We'll actually
be building this out later, so

14
00:00:56.548 --> 00:00:58.509
it's fine if you get a head start on it.

15
00:00:58.509 --> 00:01:00.694
Just gonna return null.

16
00:01:08.098 --> 00:01:08.873
&gt;&gt; Scott Moss: There we go.

17
00:01:12.444 --> 00:01:19.927
&gt;&gt; Scott Moss: So we have that, so if I
go here, there we go, that routes, okay.

18
00:01:19.927 --> 00:01:23.827
So, yeah,
caching with non-request-based access,

19
00:01:23.827 --> 00:01:28.958
things like cookies and headers,
everything's gonna get cached there.

20
00:01:28.958 --> 00:01:33.731
But the other thing to note
is that Next.js behaves

21
00:01:33.731 --> 00:01:39.625
differently when you do a dev
build versus a production build.

22
00:01:39.625 --> 00:01:43.948
When you build it in production
versus doing it locally,

23
00:01:43.948 --> 00:01:46.208
the caching is more extreme.

24
00:01:46.208 --> 00:01:50.463
So on development, you're gonna
have a way different behavior.

25
00:01:50.463 --> 00:01:55.919
So what you end up having to do a lot
of the times, is you end up having

26
00:01:55.919 --> 00:02:01.874
to do a npm run build, which is a Next
build, and then do an npm run start.

27
00:02:01.874 --> 00:02:07.385
So you can build it and then start it,
which is what would happen on production.

28
00:02:07.385 --> 00:02:11.035
This will give you a better simulation
of what caching will look like when you

29
00:02:11.035 --> 00:02:11.558
build it.

30
00:02:11.558 --> 00:02:13.025
It's just not a good developer experience.

31
00:02:13.025 --> 00:02:15.848
So I'm not gonna develop like this.

32
00:02:15.848 --> 00:02:20.491
But just note that once you start
implementing cache strategies, do that.

33
00:02:20.491 --> 00:02:24.207
Build it first, then start it,
check it there.

34
00:02:24.207 --> 00:02:26.110
Make sure the behavior is
the way that you want.

35
00:02:26.110 --> 00:02:29.306
Because on development,
the caching strategies are way different.

36
00:02:29.306 --> 00:02:34.176
Because the cache function that we
use from React doesn't allow you

37
00:02:34.176 --> 00:02:35.550
to invalidate it.

38
00:02:35.550 --> 00:02:38.282
It's only a per-request memoization.

39
00:02:38.282 --> 00:02:41.887
We need a cache to persist across
many different routes, and

40
00:02:41.887 --> 00:02:45.362
we need the ability to invalidate
it when we do a mutation.

41
00:02:45.362 --> 00:02:49.552
As in when I wanna update an event or
update RSVP, I wanna say, cool,

42
00:02:49.552 --> 00:02:53.310
this thing is, I updated one,
so therefore it is invalid, so

43
00:02:53.310 --> 00:02:55.289
I need you to run again, right?

44
00:02:55.289 --> 00:03:02.119
So we need things like that to happen, and
the cache from React does not allow that.

45
00:03:02.119 --> 00:03:08.542
It's a per-request memoization,
it does not persist across routes.

46
00:03:08.542 --> 00:03:11.261
So Next.js knows this, and

47
00:03:11.261 --> 00:03:16.255
they came up with something
called unstable cache.

48
00:03:16.255 --> 00:03:19.023
Now, I don't know about you, [LAUGH] but

49
00:03:19.023 --> 00:03:22.862
I don't wanna use something
in my app called unstable.

50
00:03:22.862 --> 00:03:27.249
I feel like they kinda knew
that it didn't work well,

51
00:03:27.249 --> 00:03:29.889
so their PR team got ahead of it.

52
00:03:29.889 --> 00:03:33.524
And was just like,
put the word unstable in front of it, and

53
00:03:33.524 --> 00:03:35.358
then nobody could complain.

54
00:03:35.358 --> 00:03:37.621
I get what it's supposed to do,
but it doesn't really work.

55
00:03:37.621 --> 00:03:41.170
So if you go read the docs, they'll say,
use it, and things like that, but

56
00:03:41.170 --> 00:03:43.455
it doesn't work the way
that it's supposed to.

57
00:03:43.455 --> 00:03:46.175
So instead, I actually made one, and

58
00:03:46.175 --> 00:03:50.514
then I realized someone made one better,
someone smarter.

59
00:03:50.514 --> 00:03:54.564
And they made this package right here
called nextjs-better-unstable-cache

60
00:03:54.564 --> 00:03:55.582
[LAUGH], as a troll.

61
00:03:55.582 --> 00:03:57.086
So that's what I use.

62
00:03:57.086 --> 00:04:01.592
And to even confuse you even more,
they call their caching function memoize,

63
00:04:01.592 --> 00:04:04.953
like the cache function that
actually does memoization.

64
00:04:04.953 --> 00:04:07.966
Because actually what this
memoize function does,

65
00:04:07.966 --> 00:04:10.918
it does use the React cache
memoization function.

66
00:04:10.918 --> 00:04:16.013
But it also uses the unstable cache
from Next.js, but in a better way.

67
00:04:16.013 --> 00:04:17.998
So it kinda combines them both.

68
00:04:17.998 --> 00:04:22.442
Because one of the gotchas I found out
with the unstable cache is that it

69
00:04:22.442 --> 00:04:24.866
will run multiple times per request.

70
00:04:24.866 --> 00:04:27.649
So you did wanna memoize it.

71
00:04:27.649 --> 00:04:29.194
So it's a combination of all that.

72
00:04:29.194 --> 00:04:33.891
So that's what we're gonna use to
cache all of our non-request-based

73
00:04:33.891 --> 00:04:38.748
server functions that don't use cookies or
headers and things like that.

74
00:04:38.748 --> 00:04:43.832
So I'm gonna go here, I'm gonna say,

75
00:04:43.832 --> 00:04:47.231
memoize from this thing.

76
00:04:47.231 --> 00:04:51.901
And just gonna wrap this whole function,
and I memoize.

77
00:04:51.901 --> 00:04:53.233
Takes a second argument here,

78
00:04:53.233 --> 00:04:55.599
the second argument is just
an options that you can do.

79
00:04:55.599 --> 00:05:00.629
So I'm gonna say persist: true, like this.

80
00:05:02.869 --> 00:05:04.753
&gt;&gt; Scott Moss: This means
persist it across route changes.

81
00:05:04.753 --> 00:05:08.140
So even if I change routes,
it's never gonna run this function again,

82
00:05:08.140 --> 00:05:09.111
it's persistent.

83
00:05:09.111 --> 00:05:11.943
Until I do a hard refresh,
it's never gonna change.

84
00:05:15.895 --> 00:05:20.060
&gt;&gt; Scott Moss: revalidateTags is
important, whatever you return here,

85
00:05:20.060 --> 00:05:25.237
these are the tags you have to call
when you want to invalidate this cache.

86
00:05:25.237 --> 00:05:29.333
So on a mutation, when you change
something in the back, and you wanna say,

87
00:05:29.333 --> 00:05:32.789
this cache is no longer valid
because I just changed something,

88
00:05:32.789 --> 00:05:36.821
these are the tags you would have to
pass to the other cache busting function

89
00:05:36.821 --> 00:05:38.623
that we'll talk about later on.

90
00:05:38.623 --> 00:05:41.563
So it's usually an array,
you can put whatever you want.

91
00:05:41.563 --> 00:05:43.886
You can put mini keys, things like that.

92
00:05:43.886 --> 00:05:48.225
If your function takes in an argument like
ours does, it takes a user ID, you'll have

93
00:05:48.225 --> 00:05:51.989
access to that here through the user ID,
that'll be the first argument.

94
00:05:51.989 --> 00:05:57.194
But I don't actually need it here,
cuz none of our queries are bound by that.

95
00:05:57.194 --> 00:06:01.559
So I'm just gonna put something
like dashboards, what is this?

96
00:06:01.559 --> 00:06:04.753
Attendees, something like that.

97
00:06:04.753 --> 00:06:07.008
There's really no wrong answer,
you just have to remember what this is.

98
00:06:07.008 --> 00:06:10.700
So you probably wanna put these like in
a constants file or something like that so

99
00:06:10.700 --> 00:06:13.748
you can reuse them, so
you're not hard coding them everywhere.

100
00:06:13.748 --> 00:06:18.844
So we have a revalidateTags,
I usually put suppressedWarnings,

101
00:06:18.844 --> 00:06:22.396
cuz it gets noisy as hell
if you don't do that.

102
00:06:22.396 --> 00:06:25.347
suppressWarnings, these are warnings for

103
00:06:25.347 --> 00:06:29.901
when you try to use this function
on a client or something like that.

104
00:06:29.901 --> 00:06:34.199
But we kinda already handled that,
so it's not a big deal.

105
00:06:38.070 --> 00:06:41.598
&gt;&gt; Scott Moss: This log is just telling
it what to log, so this is useful for

106
00:06:41.598 --> 00:06:42.381
debugging.

107
00:06:42.381 --> 00:06:44.997
So when I say, hey,
build it first and then start it, so

108
00:06:44.997 --> 00:06:48.173
you can see how the caching works,
make sure you turn these logs on,

109
00:06:48.173 --> 00:06:50.261
this will tell you when something happens.

110
00:06:50.261 --> 00:06:55.652
So this is saying,
show me a log when the cache is hit.

111
00:06:55.652 --> 00:06:59.188
Verbose is like any other logging thing,
that's to show me everything.

112
00:06:59.188 --> 00:07:04.260
There's another one here called dedupe,
this is, show me a log when you

113
00:07:04.260 --> 00:07:09.848
deduped it with the cache function from
React, when you dedupe this function.

114
00:07:09.848 --> 00:07:16.272
So this is, you hit the cache,
you did not call the function again,

115
00:07:16.272 --> 00:07:20.460
and this is, you deduped the cache lookup.

116
00:07:20.460 --> 00:07:27.475
[LAUGH] It's complicated, I know, it
gets deep, but that's why it's unstable.

117
00:07:27.475 --> 00:07:29.347
And this is the only package I
found that actually solves it.

118
00:07:29.347 --> 00:07:32.906
So for the most part, you should probably
log these while you're in development.

119
00:07:32.906 --> 00:07:37.131
You can even put up
process.env development,

120
00:07:37.131 --> 00:07:42.209
show this, if not, don't show it,
but I would do that.

121
00:07:42.209 --> 00:07:46.444
And then logid is just a trace for
your log.

122
00:07:46.444 --> 00:07:48.225
So we look at it,
you know it came from here.

123
00:07:48.225 --> 00:07:49.321
You're gonna have a lot of these.

124
00:07:49.321 --> 00:07:52.092
So this is gonna help you with your logs.

125
00:07:52.092 --> 00:07:55.456
Okay, so we did that for
the getAttendeesCountForDashboard,

126
00:07:55.456 --> 00:07:56.335
let's go back.

127
00:07:56.335 --> 00:07:58.010
It's already doing it.

128
00:07:58.010 --> 00:08:04.370
So let me just do a refresh on the actual
app so we can see where the vibe is.

129
00:08:04.370 --> 00:08:08.101
So let me clear the console.

130
00:08:08.101 --> 00:08:14.194
Refresh, let me do a hard refresh,
hold on, hard refresh.

131
00:08:14.194 --> 00:08:15.470
So we did a hard refresh.

132
00:08:15.470 --> 00:08:19.916
You can see it said cache
MISS on-demand revalidation,

133
00:08:19.916 --> 00:08:22.889
that's because of the hard refresh.

134
00:08:22.889 --> 00:08:26.039
A hard refresh is like me saying,
revalidate everything,

135
00:08:26.039 --> 00:08:28.563
do not hit the cache,
that's the whole point.

136
00:08:28.563 --> 00:08:33.088
And then you can see,
during that one request,

137
00:08:33.088 --> 00:08:37.969
it already tried to run it
again on the one request.

138
00:08:37.969 --> 00:08:40.617
And you can see
the memoization caught that.

139
00:08:40.617 --> 00:08:44.357
And the memoization was like,
no, since this one request,

140
00:08:44.357 --> 00:08:48.853
this function was already called, so
therefore I'm not gonna call it again.

141
00:08:48.853 --> 00:08:51.883
I'm just gonna return what
the memoized version of that was,

142
00:08:51.883 --> 00:08:54.749
which is exactly what the cache
function from React does.

143
00:08:56.946 --> 00:09:01.705
&gt;&gt; Scott Moss: Okay, so,
we did that, and then,

144
00:09:01.705 --> 00:09:07.267
if I kind of like navigate, go back here.

145
00:09:07.267 --> 00:09:10.479
You can see now it says cache HIT.

146
00:09:10.479 --> 00:09:13.426
So it didn't run that function again.

147
00:09:13.426 --> 00:09:18.665
Here it missed the cache, and it had to
go get it, and it took 1.116 seconds.

148
00:09:18.665 --> 00:09:23.757
Here the cache hit, it took way less than
one second, it got it back immediately.

149
00:09:23.757 --> 00:09:25.723
And that was after me changing routes, and

150
00:09:25.723 --> 00:09:27.970
still the memoization
thing still is a problem.

151
00:09:27.970 --> 00:09:30.105
This is a gotcha from Next.js.

152
00:09:30.105 --> 00:09:33.141
Okay, let's add some caches
to our other things.

153
00:09:33.141 --> 00:09:36.307
And once we add in a loading state for
suspense,

154
00:09:36.307 --> 00:09:40.582
it's gonna become a lot more
dramatic around how these things,

155
00:09:40.582 --> 00:09:46.227
you'll be able to visually see the caching
and stuff, it'll make a lot more sense.

156
00:09:46.227 --> 00:09:51.035
But right now we're not streaming
anything, so you can't really tell.

157
00:09:51.035 --> 00:09:52.753
But once we do that,
it'll make a big difference.

158
00:09:52.753 --> 00:09:56.009
So let's add in the rest of our caches.

159
00:09:56.009 --> 00:10:00.255
So we'll go to events.

160
00:10:00.255 --> 00:10:08.280
We'll add in our memoize here,
&gt;&gt; Scott Moss: From that thing,

161
00:10:16.675 --> 00:10:18.782
&gt;&gt; Speaker 2: Where did those tags get

162
00:10:18.782 --> 00:10:19.733
defined?

163
00:10:19.733 --> 00:10:23.823
&gt;&gt; Scott Moss: The tags, so are you
specifically talking about these tags?

164
00:10:23.823 --> 00:10:25.575
&gt;&gt; Speaker 2: Your revalidation tags,
yeah.

165
00:10:25.575 --> 00:10:27.181
&gt;&gt; Scott Moss: They get defined here.

166
00:10:27.181 --> 00:10:33.355
This is where you define them, they
could be whatever you want them to be.

167
00:10:33.355 --> 00:10:34.787
You can think of them as cache case.

168
00:10:34.787 --> 00:10:40.571
&gt;&gt; Speaker 2: So the dashboard,
those are components?

169
00:10:40.571 --> 00:10:42.599
&gt;&gt; Scott Moss: I see what you're saying,
yes, I see.

170
00:10:42.599 --> 00:10:46.504
&gt;&gt; Speaker 2: How does it know
that that's associated with-

171
00:10:46.504 --> 00:10:47.056
&gt;&gt; Scott Moss: Great point.

172
00:10:47.056 --> 00:10:47.583
&gt;&gt; Speaker 2: Something.

173
00:10:47.583 --> 00:10:51.224
&gt;&gt; Scott Moss: It doesn't, this has no
correlation with anything in the app.

174
00:10:51.224 --> 00:10:52.790
You can put whatever you want here.

175
00:10:52.790 --> 00:10:57.183
We haven't done the other side
to do a validation ourselves.

176
00:10:57.183 --> 00:10:59.310
There's a whole another side of this.

177
00:10:59.310 --> 00:11:03.041
So basically, what's the word for it?

178
00:11:03.041 --> 00:11:07.044
It's on-demand, so this is for
on-demand revalidation, as in,

179
00:11:07.044 --> 00:11:09.743
you wrote some code to say,
invalidate this.

180
00:11:09.743 --> 00:11:11.119
Here's the tag that I
want you to revalidate.

181
00:11:11.119 --> 00:11:12.256
&gt;&gt; Speaker 2: I see.

182
00:11:12.256 --> 00:11:16.459
&gt;&gt; Scott Moss: But there is also
automatic invalidation through Next.js,

183
00:11:16.459 --> 00:11:19.055
which is the part that's quite hard.

184
00:11:19.055 --> 00:11:22.846
So basically, the strategy that I'm
showing you is like opting out of

185
00:11:22.846 --> 00:11:27.025
all the automatic revalidation and
only using on-demand revalidation, so

186
00:11:27.025 --> 00:11:29.670
that way you have more
control over everything.

187
00:11:29.670 --> 00:11:33.310
So it's like, yeah, you gotta write
more code, but you have more control and

188
00:11:33.310 --> 00:11:35.582
it's consistent and
you know what's going on.

189
00:11:35.582 --> 00:11:38.479
Whereas if you don't do this stuff,
honestly,

190
00:11:38.479 --> 00:11:40.819
I couldn't tell you how it would work.

191
00:11:40.819 --> 00:11:45.745
I have not been able to consistently
have a good experience out of the box.

192
00:11:45.745 --> 00:11:48.727
And scenarios in which I thought
things would happen, they didn't.

193
00:11:48.727 --> 00:11:51.944
As you saw, I was like, okay,
this is not how I thought,

194
00:11:51.944 --> 00:11:55.649
cuz I forgot it works different on
production than it does on dev.

195
00:11:55.649 --> 00:11:58.837
But wait, this thing has cookies and
this thing doesn't, it's really hard.

196
00:11:58.837 --> 00:12:01.285
&gt;&gt; Speaker 2: And all of a sudden,
you have a revalidation storm.

197
00:12:01.285 --> 00:12:02.969
[LAUGH]
&gt;&gt; Scott Moss: Yeah, exactly.

198
00:12:02.969 --> 00:12:03.730
It gets very tough.

199
00:12:03.730 --> 00:12:07.880
So this is just like, all right,
turn that off, use this.

200
00:12:07.880 --> 00:12:12.591
Cool, so
I need to write my revalidate tags.

201
00:12:12.591 --> 00:12:13.941
Does this one take in something specific?

202
00:12:13.941 --> 00:12:14.676
It does not.

203
00:12:14.676 --> 00:12:20.881
So, I'm just gonna say this
one is dashboard:events.

204
00:12:20.881 --> 00:12:26.414
And then I want to, I don't really
care about the logs for this one.

205
00:12:26.414 --> 00:12:27.902
So I show you guys those logs.

206
00:12:27.902 --> 00:12:30.361
And then, the one that I
really care about is persist.

207
00:12:30.361 --> 00:12:36.870
So, I want this to persist across.

208
00:12:36.870 --> 00:12:40.791
Basically, persist means cache infinity,
that's what persist means.

209
00:12:40.791 --> 00:12:43.571
It's never stale, it's always good,

210
00:12:43.571 --> 00:12:46.688
because I want to
manually revalidate this.

211
00:12:46.688 --> 00:12:51.031
I don't want it to ever be some
interval or some random thing,

212
00:12:51.031 --> 00:12:55.389
no, keep this thing cached until
I tell you it's not cached.

213
00:12:55.389 --> 00:12:56.878
That's it, I want full control over it.

214
00:12:56.878 --> 00:13:01.342
I'd rather just do that than come up with
some number that causes race conditions or

215
00:13:01.342 --> 00:13:03.847
something like that,
I don't wanna do that.

216
00:13:03.847 --> 00:13:06.575
So, okay, same thing here.

217
00:13:08.260 --> 00:13:14.503
&gt;&gt; Scott Moss: Memoize,
&gt;&gt; Scott Moss: Do that.

218
00:13:16.764 --> 00:13:21.629
&gt;&gt; Scott Moss: persist:true,
&gt;&gt; Scott Moss: And

219
00:13:21.629 --> 00:13:27.139
revalidateTags, this

220
00:13:27.139 --> 00:13:34.854
will just be dashboard:rsvps.

221
00:13:34.854 --> 00:13:37.878
And again, you can put whatever you
want there, that really doesn't matter.

222
00:13:37.878 --> 00:13:41.548
This is what you have to use
when you go and say, cool,

223
00:13:41.548 --> 00:13:44.987
this tag,
invalidate everything with this tag.

224
00:13:44.987 --> 00:13:46.659
So it's whatever you want.

225
00:13:46.659 --> 00:13:49.694
Okay, so we got all of those cached,
hence, I mean,

226
00:13:49.694 --> 00:13:53.066
you're not really gonna notice
the difference in the app,

227
00:13:53.066 --> 00:13:56.518
because we don't have any fallbacks or
anything like that.

228
00:13:56.518 --> 00:14:01.484
But trust me,
the app is faster now, it's better.

229
00:14:04.697 --> 00:14:08.221
&gt;&gt; Scott Moss: All right, you do notice
that, when you switch client-side,

230
00:14:08.221 --> 00:14:11.758
it's immediately there,
whereas before, it did not do that.

231
00:14:11.758 --> 00:14:16.481
So, there's an immediate loading
there because it's persisted

232
00:14:16.481 --> 00:14:18.260
across the render, so.

