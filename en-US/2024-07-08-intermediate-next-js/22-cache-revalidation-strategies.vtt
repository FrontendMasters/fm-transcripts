WEBVTT

1
00:00:00.180 --> 00:00:04.444
&gt;&gt; Scott Moss: We talked about
revalidating the cache on the initial

2
00:00:04.444 --> 00:00:09.180
server queries or the server
actions that we did on the react

3
00:00:09.180 --> 00:00:13.330
server components for our pages and slots.

4
00:00:13.330 --> 00:00:16.980
Now I just wanna kind of cover all
the different ways you can revalidate, and

5
00:00:16.980 --> 00:00:20.760
some of the other ways in which your
data might automatically be revalidated.

6
00:00:20.760 --> 00:00:22.550
So just wanna kind of cover some of that.

7
00:00:22.550 --> 00:00:25.796
So one of the first ones
is time-based revalidation.

8
00:00:25.796 --> 00:00:30.116
Time-based revalidation occurs
automatically after a specific time

9
00:00:30.116 --> 00:00:31.170
interval.

10
00:00:31.170 --> 00:00:35.699
So there's a way you can do that, I don't
really use fetch a lot on the server side,

11
00:00:35.699 --> 00:00:38.940
but if you look at the next ASDOCS,
they use it a lot.

12
00:00:38.940 --> 00:00:43.335
You can tell they've obviously patched
fetch to be able to do things like this,

13
00:00:43.335 --> 00:00:46.221
but you can give it a time
if you're using the fetch,

14
00:00:46.221 --> 00:00:48.599
in which you want this to revalidate.

15
00:00:48.599 --> 00:00:51.294
Otherwise, it'll always when you
call it again within that time,

16
00:00:51.294 --> 00:00:52.249
it'll just be cached.

17
00:00:52.249 --> 00:00:56.548
So that's something you can do,
I've just never had good

18
00:00:56.548 --> 00:01:00.860
experience with time based caching for
a front-end app.

19
00:01:00.860 --> 00:01:04.460
I feel like that's better for
something network layer,

20
00:01:04.460 --> 00:01:07.385
something that you can
actually use a TTL on and

21
00:01:07.385 --> 00:01:11.890
do something on a network level,
maybe like Redis, but I don't know.

22
00:01:11.890 --> 00:01:14.476
I just never figure out, well,
what time do I put here?

23
00:01:14.476 --> 00:01:19.703
How often should this be, because it's
like the unpredictable nature of a user,

24
00:01:19.703 --> 00:01:22.824
who knows how long they're
gonna be somewhere?

25
00:01:22.824 --> 00:01:27.882
So I guess it's like a combination
of give it a validate time,

26
00:01:27.882 --> 00:01:32.857
but then also at the same time,
you revalidate it yourself.

27
00:01:32.857 --> 00:01:37.126
So maybe it's a combination, but by
itself, I feel like it's not too useful,

28
00:01:37.126 --> 00:01:39.307
what number do you know what to put here?

29
00:01:41.147 --> 00:01:45.713
You can also do this, so that's like if
you're using fetch on the server side, but

30
00:01:45.713 --> 00:01:48.582
if you're just like in our case,
the pages, well,

31
00:01:48.582 --> 00:01:50.751
not our case cuz we're using cookies.

32
00:01:50.751 --> 00:01:55.139
But in places where the cookies were
not being used, you could say, cool,

33
00:01:55.139 --> 00:01:59.132
you can export a variable called
revalidate in a page or a layout, you can

34
00:01:59.132 --> 00:02:03.613
give it a time in seconds, and that's
how long that page will be re-validated.

35
00:02:03.613 --> 00:02:05.647
If you wanted to do that, but again,

36
00:02:05.647 --> 00:02:10.577
this doesn't really matter to us because
all of our pages and slots use cookies.

37
00:02:10.577 --> 00:02:14.849
So it's never cached
until we cached it with

38
00:02:14.849 --> 00:02:19.817
the memoize function, so
that's how you do that.

39
00:02:19.817 --> 00:02:22.523
Again, I will probably never do that,

40
00:02:22.523 --> 00:02:27.531
I don't know when I would do that, or
why, or what would that look like.

41
00:02:27.531 --> 00:02:30.896
If someone's on your app,
they're just sitting on the screen and

42
00:02:30.896 --> 00:02:35.404
then it re-validated and like 30 things is
popped up like a jumpscare, I don't know,

43
00:02:35.404 --> 00:02:37.249
that'd be kind of weird.

44
00:02:37.249 --> 00:02:39.510
It's like I want more control
when that happens, but

45
00:02:39.510 --> 00:02:40.926
maybe I'm thinking about Iran.

46
00:02:45.495 --> 00:02:47.901
&gt;&gt; Scott Moss: A couple other things here,
so on demand revalidation,

47
00:02:47.901 --> 00:02:48.761
this is what we did.

48
00:02:48.761 --> 00:02:53.253
So, you could do a revalidate path, which
is something we didn't have to do, again,

49
00:02:53.253 --> 00:02:57.361
because really none of our pages were
cached because they had cookies.

50
00:02:57.361 --> 00:03:01.568
If they didn't use something on the
header, a revalidate path is pretty much

51
00:03:01.568 --> 00:03:05.872
you can think of it as every page
gets its own tag, its tag is its URL.

52
00:03:05.872 --> 00:03:10.545
So you can say revalidate this path,
so this whole page revalidate it and

53
00:03:10.545 --> 00:03:12.752
it'll get cleaned out.

54
00:03:12.752 --> 00:03:17.532
We use tag base, which is like exactly
what it sounds like, we give it a tag,

55
00:03:17.532 --> 00:03:21.351
we can revalidate it when we
call revalidate with that tag.

56
00:03:21.351 --> 00:03:26.343
So you can also do that with fetch,
again, I rarely use fetch inside

57
00:03:26.343 --> 00:03:31.811
of server components, maybe I just
haven't hit that use case yet.

58
00:03:31.811 --> 00:03:37.865
One of the things I have done though,
is use third party APIs to have STKs,

59
00:03:37.865 --> 00:03:43.490
for instance stripe or
something like that on the service side.

60
00:03:43.490 --> 00:03:48.470
And obviously those things are making http
calls, but you don't have access to, or

61
00:03:48.470 --> 00:03:50.730
even know if they're using fetch.

62
00:03:50.730 --> 00:03:53.664
So the caching strategy to that is,
I don't know,

63
00:03:53.664 --> 00:03:55.790
I don't really know how that works.

64
00:03:55.790 --> 00:03:59.270
Bt at the same time,
do I want that to be cached?

65
00:03:59.270 --> 00:04:03.302
So there's still a lot to think about on
the server side in my opinion, and I don't

66
00:04:03.302 --> 00:04:08.297
think a lot of people actually do fetch on
the server side like this, though they do.

67
00:04:08.297 --> 00:04:13.524
I'm writing code wrong, I don't really do
a lot of server side fetch calls, I guess.

68
00:04:13.524 --> 00:04:18.282
If there's an API that I need to hit
on the server side is probably through

69
00:04:18.282 --> 00:04:21.159
some SDK that I installed most likely.

70
00:04:21.159 --> 00:04:24.907
It's like very rare where I'll do
that if that's the case busted or

71
00:04:24.907 --> 00:04:26.169
something like that.

72
00:04:26.169 --> 00:04:30.540
But I guess if you like microservices and
we're talking across your microservices,

73
00:04:30.540 --> 00:04:32.199
I can see that.

74
00:04:32.199 --> 00:04:34.419
So maybe it's useful there,
I don't have microservices.

75
00:04:36.369 --> 00:04:40.018
Yep, V Valley tag,
that's what we did here, so

76
00:04:40.018 --> 00:04:43.764
we know about that one,
this one's really nice.

77
00:04:43.764 --> 00:04:46.844
So basically, if the revalidation fails,

78
00:04:46.844 --> 00:04:52.091
when you call revalidation tag or
the time expires or revalidation path and

79
00:04:52.091 --> 00:04:57.154
the revalidation fails, it'll just
serve the last one that was good.

80
00:04:57.154 --> 00:05:00.324
So it won't be in a broken state,
that's actually quite useful.

81
00:05:00.324 --> 00:05:03.411
So, opting out of some
of the data cachings or

82
00:05:03.411 --> 00:05:06.836
here's some of the things
you can do on the fetch.

83
00:05:06.836 --> 00:05:09.484
You can say no store like this, or

84
00:05:09.484 --> 00:05:14.576
you can say re-validate to zero,
that works as well.

85
00:05:14.576 --> 00:05:18.486
Route handler requests, we don't have
any route handlers in this course.

86
00:05:18.486 --> 00:05:21.418
There really isn't much more advanced
stuff to them other than what I covered in

87
00:05:21.418 --> 00:05:23.718
the intro, so
I didn't feel the need to cover it.

88
00:05:23.718 --> 00:05:25.087
But if you use headers or

89
00:05:25.087 --> 00:05:29.816
cookies, that route handler won't be
cached because those things are dynamic,

90
00:05:29.816 --> 00:05:33.528
anything attached to the request object,
it won't be cached.

91
00:05:35.078 --> 00:05:39.768
If you're not using those things, and you
just wanna force that route handler to be

92
00:05:39.768 --> 00:05:44.513
not cached, you can say dynamic
equals force and you can export that.

93
00:05:44.513 --> 00:05:49.317
I guess like do you recommend
using no cache at all or

94
00:05:49.317 --> 00:05:53.470
would you recommend to
try to always cache?

95
00:05:53.470 --> 00:05:57.050
The way that I think about it is I'm
shooting to always get cache, but

96
00:05:57.050 --> 00:05:59.473
I wanna be in control of the cache.

97
00:05:59.473 --> 00:06:04.330
I don't like the automatic caching, and
I don't like if you use this function

98
00:06:04.330 --> 00:06:07.945
anywhere, cuz the problem
is it's not obvious, right?

99
00:06:07.945 --> 00:06:11.344
Sometimes you'll be in a react server
component that uses a function,

100
00:06:11.344 --> 00:06:14.745
that uses a function, that uses
a function, that uses a function, and

101
00:06:14.745 --> 00:06:16.955
that function uses a cookie.

102
00:06:16.955 --> 00:06:19.974
So then it's like,
how do you know if this is caching or not?

103
00:06:19.974 --> 00:06:21.464
That's where it starts to get complicated.

104
00:06:21.464 --> 00:06:26.534
So for me, I would just rather
turn off the automatic caching,

105
00:06:26.534 --> 00:06:32.466
and then opt into caching manually by
doing the thing that I showed you guys

106
00:06:32.466 --> 00:06:39.404
how to do, and then just do, on demand
revalidation by calling revalidate tag.

107
00:06:39.404 --> 00:06:43.594
That way at least I know what I cache and
when I revalidate it,

108
00:06:43.594 --> 00:06:48.275
versus it depends on the time or
the dev environment or production or

109
00:06:48.275 --> 00:06:53.706
what method you use, to me that's just so
complicated to keep track of.

110
00:06:53.706 --> 00:06:57.226
So you definitely want cache, but
you want it to be predictable.

