WEBVTT

1
00:00:00.315 --> 00:00:03.453
&gt;&gt; Scott Moss: We're gonna talk about
protecting our routes with middleware.

2
00:00:03.453 --> 00:00:08.831
So right now, we protect our routes only
if the route causes Git current user.

3
00:00:08.831 --> 00:00:11.582
So if Git currentuser is
called inside of a page,

4
00:00:11.582 --> 00:00:14.611
then yeah,
that'll redirect us to sign in, right?

5
00:00:14.611 --> 00:00:19.510
So if I go to, let's try to go,
I guess any one of these,

6
00:00:19.510 --> 00:00:23.469
cuz they're like, they're parallel routes.

7
00:00:23.469 --> 00:00:28.379
So let's just go to the users and
the utils,

8
00:00:28.379 --> 00:00:32.226
and then I will just say, if true,

9
00:00:32.226 --> 00:00:37.296
all right, so
this will always go to signin.

10
00:00:37.296 --> 00:00:42.077
So now, if I go back to our project,
I'm already there, so

11
00:00:42.077 --> 00:00:45.137
it doesn't really matter where I go,

12
00:00:45.137 --> 00:00:49.457
it's always going to redirect
me back here, right?

13
00:00:49.457 --> 00:00:51.308
But you saw what just happened, right?

14
00:00:51.308 --> 00:00:58.100
The fact that it had to load the page up,
and then it sent me here.

15
00:00:58.100 --> 00:01:00.573
That's gross, who wants to see that?

16
00:01:00.573 --> 00:01:01.630
I don't wanna see that.

17
00:01:01.630 --> 00:01:04.330
You don't wanna like,
you try to get in here psych, like,

18
00:01:04.330 --> 00:01:05.932
you don't want them to see anything.

19
00:01:05.932 --> 00:01:09.297
Because if they're not signed in,
none of that data's gonna load anyway,

20
00:01:09.297 --> 00:01:11.097
cuz it's all segmented off of a user ID.

21
00:01:11.097 --> 00:01:12.557
So, what's the point of even going there?

22
00:01:12.557 --> 00:01:16.909
We can prevent that from even
transitioning in the first place by adding

23
00:01:16.909 --> 00:01:17.787
middleware.

24
00:01:17.787 --> 00:01:22.668
So we're gonna add middleware to
protect our app from users who aren't

25
00:01:22.668 --> 00:01:27.221
signed in versus waiting for
the page to attempt to load the user and

26
00:01:27.221 --> 00:01:30.246
then if not,
redirect them back to Sign in.

27
00:01:30.246 --> 00:01:33.685
How about we just don't even
let you go to that page at all?

28
00:01:33.685 --> 00:01:35.241
So let's do that.

29
00:01:35.241 --> 00:01:37.554
Best way is to make a file on the root,
well,

30
00:01:37.554 --> 00:01:40.700
the only way is to make a file
on the root called middleware.

31
00:01:45.109 --> 00:01:48.706
&gt;&gt; Scott Moss: And
it's not really difficult at all,

32
00:01:48.706 --> 00:01:54.703
I have a little slide on it that
kinda goes through some use cases.

33
00:01:54.703 --> 00:01:58.581
But the only thing you really
know about middleware,

34
00:01:58.581 --> 00:02:01.597
it's a function that runs on the Edge, so

35
00:02:01.597 --> 00:02:06.354
it runs before your routes are accessed,
it's an Edge runtime.

36
00:02:06.354 --> 00:02:10.750
So it's not node runtime, so
you can't do node things.

37
00:02:10.750 --> 00:02:15.468
So you can't connect to
a database that isn't serverless,

38
00:02:15.468 --> 00:02:21.295
you can't connect to a database that
isn't HTTPS and make calls that way,

39
00:02:21.295 --> 00:02:25.753
you can't do anything you
can't do in the Edge, right?

40
00:02:25.753 --> 00:02:29.301
It's an Edge environment, which is very
limited, but still JavaScript, obviously.

41
00:02:29.301 --> 00:02:32.015
So some of the use cases
are authentication and authorization,

42
00:02:32.015 --> 00:02:33.328
that's what we're gonna do.

43
00:02:33.328 --> 00:02:37.213
This is why I stored the JSON Web Token
in a cookie, because you

44
00:02:37.213 --> 00:02:42.020
can access cookies on the Edge, because
you can access headers on the Edge.

45
00:02:42.020 --> 00:02:44.670
Server, server, redirects,
we'll be doing that too,

46
00:02:44.670 --> 00:02:48.576
this allows you to dynamically redirect or
even rewrite, which is a big difference.

47
00:02:48.576 --> 00:02:53.025
Redirect and rewrite are two
different things on the Edge.

48
00:02:53.025 --> 00:02:57.885
Bot detection, so you can detect IP
addresses that are coming in at some

49
00:02:57.885 --> 00:03:02.826
interval, use some HTTP-based Redis
instance to keep track of how many

50
00:03:02.826 --> 00:03:06.728
times this IP address is hitting
you over a certain time.

51
00:03:06.728 --> 00:03:07.596
And then you can block them.

52
00:03:07.596 --> 00:03:12.542
So that's a rate limit and
things like that.

53
00:03:12.542 --> 00:03:13.988
Logging analytics, that's great.

54
00:03:13.988 --> 00:03:17.704
You can literally just,
if you have some HTTP-based analytics that

55
00:03:17.704 --> 00:03:21.164
you want to send information to,
so whatever someone comes in,

56
00:03:21.164 --> 00:03:24.643
you can look at the request they're
asking for and send that up.

57
00:03:24.643 --> 00:03:27.083
Feature flagging is also a really good,

58
00:03:27.083 --> 00:03:30.472
in combination with some
type of Edge-based storage.

59
00:03:30.472 --> 00:03:33.178
Again, like ACP base or
Redis, or whatever like that.

60
00:03:33.178 --> 00:03:38.668
You can store user's ID with some objects
on what features they're allowed to use,

61
00:03:38.668 --> 00:03:43.557
and then you can change that on the fly
without having to redeploy your app.

62
00:03:43.557 --> 00:03:45.558
So that's feature flagging.

63
00:03:45.558 --> 00:03:49.066
So you can do a lot of stuff with that,
it's pretty cool.

64
00:03:49.066 --> 00:03:52.627
Yeah, just basically don't do heavy
stuff there, it's on the Edge.

65
00:03:52.627 --> 00:03:57.090
So don't try to solve in Queens inside of

66
00:03:57.090 --> 00:04:02.879
a middleware function,
don't do stuff like that.

67
00:04:02.879 --> 00:04:07.227
Don't try to make
complicated fetching calls,

68
00:04:07.227 --> 00:04:11.796
I mean, you can, but
you probably don't want to.

69
00:04:11.796 --> 00:04:13.611
The whole point of the Edge
is it's supposed to be fast.

70
00:04:13.611 --> 00:04:17.427
You kind of defeat the purpose if you're
like, I'm gonna make ten calls to

71
00:04:17.427 --> 00:04:20.772
the Reddit API right here on the Edge,
and then get the data back.

72
00:04:20.772 --> 00:04:24.749
Okay, I don't know why, a lot of the Edge
computes also have limits on how long

73
00:04:24.749 --> 00:04:26.457
those functions can run anyway.

74
00:04:26.457 --> 00:04:28.950
So you'll hit them long
before you even see results.

75
00:04:28.950 --> 00:04:31.875
Anyway, pretty simple,
you make a middleware file,

76
00:04:31.875 --> 00:04:34.173
you export a function called middleware.

77
00:04:34.173 --> 00:04:37.599
It takes in a request, and
you can do whatever hell you want.

78
00:04:37.599 --> 00:04:40.663
The other thing is this
config option right here.

79
00:04:40.663 --> 00:04:42.797
So this config is the matcher.

80
00:04:42.797 --> 00:04:44.945
There's a lot of different
ways you can make a matcher.

81
00:04:44.945 --> 00:04:51.018
You can pass a string like this
that uses this glob syntax.

82
00:04:51.018 --> 00:04:54.536
You can pass an array
that matches like this,

83
00:04:54.536 --> 00:04:57.881
we'll probably use something like that.

84
00:04:57.881 --> 00:05:00.399
You can get pretty advanced with this.

85
00:05:00.399 --> 00:05:03.663
As far as like rewriting, so
you can check if URL comes in,

86
00:05:03.663 --> 00:05:05.740
you wanna rewrite it to another URL.

87
00:05:05.740 --> 00:05:09.676
This is how you might handle things
like cookies, so you can set cookies,

88
00:05:09.676 --> 00:05:13.437
is how you might handle something
like CORS, if you wanna allow that.

89
00:05:13.437 --> 00:05:17.051
So, there's really a lot going on here,
yes.

90
00:05:17.051 --> 00:05:20.491
Which one of these
methods will be good for

91
00:05:20.491 --> 00:05:25.515
implementing route-based
protection based on user role?

92
00:05:25.515 --> 00:05:28.518
Route-based protection based on user role.

93
00:05:28.518 --> 00:05:35.186
Well, first, it comes down to,
where are you storing the user role?

94
00:05:35.186 --> 00:05:38.547
So, are you storing the user role
in a cookie that you can access?

95
00:05:38.547 --> 00:05:44.919
Are you storing the user role in
a HTTP-based storage that you can access?

96
00:05:44.919 --> 00:05:49.437
So, first you got to figure out where
that is stored, 2, how do you associate

97
00:05:49.437 --> 00:05:53.905
the incoming request with that user role,
if it's not stored on the cookie?

98
00:05:53.905 --> 00:05:58.519
So once you solve that, and
there's many ways to solve that,

99
00:05:58.519 --> 00:06:01.113
then, how do you control access?

100
00:06:01.113 --> 00:06:05.413
Well, you would only wanna
control access here, I guess,

101
00:06:05.413 --> 00:06:10.143
if there were different segments
of your app that were completely

102
00:06:10.143 --> 00:06:13.759
segmented off depending on role,
like by route.

103
00:06:13.759 --> 00:06:17.779
Like for instance, if there was a slash
admin for your app and you only wanna show

104
00:06:17.779 --> 00:06:21.212
that if the user is at the admin role,
yeah, that would make sense.

105
00:06:21.212 --> 00:06:25.831
But if you had an app where it wasn't
segmented clearly by a route, like,

106
00:06:25.831 --> 00:06:30.523
you might have one route, but within
that route anybody can see the page but

107
00:06:30.523 --> 00:06:32.850
only an admin can see this one thing.

108
00:06:32.850 --> 00:06:35.803
And this wouldn't be that useful,
cuz this is route level.

109
00:06:35.803 --> 00:06:37.642
So you probably wanna do that in the app.

110
00:06:37.642 --> 00:06:41.270
So if it's route level, yeah,
figure out where you wanna store the role,

111
00:06:41.270 --> 00:06:45.130
figure out how you associate the request
with the role if it's not a cookie, and

112
00:06:45.130 --> 00:06:46.824
then you do your redirects.

113
00:06:46.824 --> 00:06:51.669
I saw this user who came in from this
request, does not have the role of admin,

114
00:06:51.669 --> 00:06:55.846
but they're requesting slash admin
redirect them or block them or

115
00:06:55.846 --> 00:06:59.598
whatever you wanna,
go delete their account from strike.

116
00:06:59.598 --> 00:07:00.672
Whatever you wanna do,

117
00:07:00.672 --> 00:07:04.378
you can do whatever you want, but I would
say it probably needs to fall within those

118
00:07:04.378 --> 00:07:08.054
realms because the middleware doesn't
know about the components on your page.

119
00:07:08.054 --> 00:07:09.615
It only knows about routes.

120
00:07:09.615 --> 00:07:12.976
So yeah, the actual methods,
we're gonna use some of them right now.

121
00:07:12.976 --> 00:07:16.372
Rewrite, redirect,
cookies get, cookies set, yeah.

