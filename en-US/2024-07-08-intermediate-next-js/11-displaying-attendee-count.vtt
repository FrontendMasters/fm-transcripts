WEBVTT

1
00:00:00.100 --> 00:00:02.185
&gt;&gt; Scott Moss: Let's get in here and
do some database stuff.

2
00:00:02.185 --> 00:00:06.658
So now we're going to make
some attendees data, so

3
00:00:06.658 --> 00:00:12.067
what I'm gonna do here is,
in utils I'll make another file,

4
00:00:12.067 --> 00:00:17.287
I'm gonna call it attendees.ts,
I'll grab my imports.

5
00:00:17.287 --> 00:00:22.027
I'll talk a little bit about them since
you will be using this database stuff, so,

6
00:00:22.027 --> 00:00:26.172
db from at db, that's the actual ORM
from Drizzle that we'll be using.

7
00:00:26.172 --> 00:00:30.396
Don't worry, you never use Drizzle,
if you've used any ORM in your life,

8
00:00:30.396 --> 00:00:35.029
you'll be fine, if you've never used
an ORM, it's an SDK for a SQLite database.

9
00:00:35.029 --> 00:00:38.917
So, it's pretty simple, it's type-checked.

10
00:00:38.917 --> 00:00:43.001
You'll figure it out, it's not too
difficult, and you'll be falling along.

11
00:00:43.001 --> 00:00:46.892
These imports from the schema are the
tables themselves, we can use them to

12
00:00:46.892 --> 00:00:51.119
reference different fields and things
like that, we need them for our queries.

13
00:00:51.119 --> 00:00:57.995
These imports are filters for our query,
so eq stands for equal, sql is actually

14
00:00:57.995 --> 00:01:03.576
a function that lets you write raw
SQL in our queries if we need to.

15
00:01:03.576 --> 00:01:07.322
And then delays the function I talked
about, it's just going to delay a random

16
00:01:07.322 --> 00:01:10.970
time so we can simulate a delay from
an actual database and things like that.

17
00:01:10.970 --> 00:01:16.091
So, or an actual, we do have actual
database, but from like a slower database.

18
00:01:16.091 --> 00:01:19.099
So we're gonna make a function called
get attendees count for dashboard, so

19
00:01:19.099 --> 00:01:19.756
let's do that.

20
00:01:26.541 --> 00:01:31.026
&gt;&gt; Scott Moss: Long name but
at least you know what it does, right?

21
00:01:31.026 --> 00:01:35.917
This is async function,
this is gonna take in a user ID,

22
00:01:35.917 --> 00:01:40.824
so I could take any user ID or
I could actually just pass.

23
00:01:40.824 --> 00:01:44.104
I could just call our function,
get current user inside of here and

24
00:01:44.104 --> 00:01:45.694
actually had that at one point.

25
00:01:45.694 --> 00:01:48.459
But it completely changes the behavior
of the whole app when I do that and

26
00:01:48.459 --> 00:01:50.132
I'll tell you why when you get to caching.

27
00:01:52.608 --> 00:01:54.834
&gt;&gt; Scott Moss: So first,
I'm just gonna simulate a delay here,

28
00:01:54.834 --> 00:01:59.766
obviously you won't do this in production
&gt;&gt; Scott Moss: Unless you wanna keep your

29
00:01:59.766 --> 00:02:00.796
job, so you had a delay.

30
00:02:00.796 --> 00:02:02.976
And you're like, hey, I can speed it up,
and you took away the delay.

31
00:02:02.976 --> 00:02:06.793
And they're like, wow, you're really good,
you need to act twice as fast.

32
00:02:06.793 --> 00:02:09.387
But other than that,
don't put that in [LAUGH] production.

33
00:02:09.387 --> 00:02:13.270
And then from here, we're going to,
I'm just gonna copy this query.

34
00:02:13.270 --> 00:02:17.432
This is not a database course, I don't
wanna go on and write all this, but

35
00:02:17.432 --> 00:02:19.932
I will explain it for
those who are curious.

36
00:02:19.932 --> 00:02:25.250
Basically what we are doing here is we
are saying, we wanna select this field.

37
00:02:25.250 --> 00:02:29.749
We created a field called totalAttendees,
which runs a SQL query that

38
00:02:29.749 --> 00:02:33.486
does a distinct,
if you don't know what distinct means,

39
00:02:33.486 --> 00:02:38.159
it just means like dedupe, just dedupe
all these attendees by their ID.

40
00:02:38.159 --> 00:02:44.572
From the events table, the events
table has a join on it for RSVPs.

41
00:02:44.572 --> 00:02:47.923
The RSVPs table has a join on it for
attendees.

42
00:02:47.923 --> 00:02:51.369
And I just wanna find all
the events who's created by

43
00:02:51.369 --> 00:02:54.904
ID equals this current user ID and
group by events ID.

44
00:02:54.904 --> 00:02:59.631
So this is just gonna return
something that looks like this,

45
00:02:59.631 --> 00:03:04.183
an object with, I'm sorry,
an array with objects on it.

46
00:03:04.183 --> 00:03:06.086
That's a totalAttendees with a number.

47
00:03:09.996 --> 00:03:13.237
&gt;&gt; Scott Moss: And then from there,
because my schema is not good and

48
00:03:13.237 --> 00:03:15.615
my querying skills aren't that good,

49
00:03:15.615 --> 00:03:20.099
we're gonna have to do some JavaScript
to reduce that down to one number.

50
00:03:20.099 --> 00:03:24.828
Now, if you put this on a PR, I would
approve it, I'd say, figure out how to do

51
00:03:24.828 --> 00:03:29.810
that with a SQL query and get that out of
here, but we're not doing that right now.

52
00:03:29.810 --> 00:03:33.470
So, here we go, we got the total.

53
00:03:33.470 --> 00:03:38.144
This is again just gonna reduce the array
of objects with these numbers down to just

54
00:03:38.144 --> 00:03:38.897
one number.

55
00:03:38.897 --> 00:03:42.511
So we just have one number that
says here's attendees you have.

56
00:03:42.511 --> 00:03:45.702
So we got that and
then we can just return that total.

57
00:03:52.483 --> 00:03:54.998
&gt;&gt; Scott Moss: Again, you can do whatever
you want inside these server functions.

58
00:03:54.998 --> 00:03:56.822
So we have our attendees here.

59
00:04:00.187 --> 00:04:03.966
&gt;&gt; Scott Moss: Now we want to go add that
to the page that shows the attendees, and

60
00:04:03.966 --> 00:04:08.597
for us that's gonna be the home page,
which is the children inside the layout.

61
00:04:08.597 --> 00:04:14.063
So, we're gonna go there, so
let's go back to dashboard.

62
00:04:14.063 --> 00:04:16.599
Let's go to page TSX on
the root of dashboard,

63
00:04:16.599 --> 00:04:19.013
make sure you're on the root of dashboard.

64
00:04:19.013 --> 00:04:22.872
Go to that page, this is where
the attendees count is gonna show,

65
00:04:22.872 --> 00:04:24.986
that's gonna be the bottom right.

66
00:04:24.986 --> 00:04:28.018
I mean, I guess I should just show,
I should just go there and show you,

67
00:04:28.018 --> 00:04:30.870
it's gonna be the bottom right
part of the dashboard, this part.

68
00:04:34.516 --> 00:04:38.227
&gt;&gt; Scott Moss: Okay, so let's do that,

69
00:04:38.227 --> 00:04:42.781
so first get current user, so,

70
00:04:42.781 --> 00:04:47.179
user = wait getCurrentUser.

71
00:04:47.179 --> 00:04:51.935
There we go, and
then we can get the data from wait

72
00:04:51.935 --> 00:04:57.864
getAttendeesCountForDashboard and
we can pass in user ID.

73
00:04:57.864 --> 00:05:00.591
And I know for sure that line,
if line six runs there is a user,

74
00:05:00.591 --> 00:05:04.274
because if there isn't a user, it would've
redirected inside of this function.

75
00:05:10.162 --> 00:05:14.383
&gt;&gt; Scott Moss: So now we have our data,
&gt;&gt; Scott Moss: And

76
00:05:14.383 --> 00:05:20.900
then I think I have some JSX for
this, so let's go and get that.

77
00:05:25.259 --> 00:05:28.014
&gt;&gt; Scott Moss: It's pretty simple,
so, yeah,

78
00:05:28.014 --> 00:05:32.577
I was gonna return a big number
in the middle of that cell.

79
00:05:32.577 --> 00:05:37.706
So nothing crazy,
let's just get rid of this.

80
00:05:37.706 --> 00:05:38.288
Oops.

81
00:05:40.771 --> 00:05:45.629
&gt;&gt; Scott Moss: There we go, I'll just
call this count like it is there.

82
00:05:45.629 --> 00:05:50.292
Okay, so now we have that you might not
have anything here because you don't have

83
00:05:50.292 --> 00:05:51.949
anything in your database.

84
00:05:51.949 --> 00:05:54.096
That's totally fine, I thought of that.

85
00:05:54.096 --> 00:05:55.348
So in another tab,

86
00:05:55.348 --> 00:06:00.530
you could run the seed script that's
going to put some stuff in your database.

87
00:06:00.530 --> 00:06:04.667
You have to have a user in your database
though, so make sure you sign up first.

88
00:06:04.667 --> 00:06:08.366
The C script will not work if you
don't have a user in your database, so

89
00:06:08.366 --> 00:06:11.330
sign up with the sign up form just so
a user gets created.

90
00:06:11.330 --> 00:06:15.389
Again, if you need to check if the user
is created, you can go to the studio and

91
00:06:15.389 --> 00:06:17.213
you can see if the user is created.

92
00:06:17.213 --> 00:06:20.366
Make sure there is a user signed up.

93
00:06:20.366 --> 00:06:22.654
As long as there's one user
database the C script will work.

94
00:06:22.654 --> 00:06:26.907
So now once you have a user in
your database, you can run npm.

95
00:06:26.907 --> 00:06:29.313
Wait, actually you have more
than one user in a database, so

96
00:06:29.313 --> 00:06:32.633
I'm gonna [LAUGH] delete one of them right
quick, cause it just picks the first one.

97
00:06:32.633 --> 00:06:36.596
So give me a second while I do that,

98
00:06:36.596 --> 00:06:41.256
I'm a delete, I'm a delete this one.

99
00:06:41.256 --> 00:06:42.289
You know what?
No, no, no,

100
00:06:42.289 --> 00:06:43.775
I'm going to delete the other one.

101
00:06:43.775 --> 00:06:48.072
This one already has so much on it,
so I'll delete this one, and

102
00:06:48.072 --> 00:06:49.750
then I'm gonna delete.

103
00:06:49.750 --> 00:06:52.464
I'm deleting all the other stuff
that already seeded in my database,

104
00:06:52.464 --> 00:06:55.280
you don't probably have any of this stuff,
but I already did it so much.

105
00:06:55.280 --> 00:06:59.295
So I'm just gonna start fresh,
so we're on the same page.

106
00:06:59.295 --> 00:07:02.172
Okay, so all I have right now
is one user in my database,

107
00:07:02.172 --> 00:07:04.636
this is probably where
you are if you signed up.

108
00:07:04.636 --> 00:07:07.468
You only have it using your database and
nothing else.

109
00:07:07.468 --> 00:07:14.899
Okay, if you are here,
then you can do npm run db seed.

110
00:07:14.899 --> 00:07:19.604
And that'll do this,
you can see it created two attendees and

111
00:07:19.604 --> 00:07:23.691
some rsvps, and
it also created some events for you.

112
00:07:23.691 --> 00:07:27.994
So if I go back to my studio, I refresh
this, I'll see there's some events,

113
00:07:27.994 --> 00:07:30.792
there's some rsvps,
there's some attendees.

114
00:07:35.546 --> 00:07:36.794
&gt;&gt; Scott Moss: Yes.

115
00:07:36.794 --> 00:07:39.638
&gt;&gt; Student: How do you add types
to the data from the DB so

116
00:07:39.638 --> 00:07:43.907
that something like
count.totalAttendees is not an unknown.

117
00:07:43.907 --> 00:07:49.563
&gt;&gt; Scott Moss: That's a great question, so
it is in fact already typed by default.

118
00:07:49.563 --> 00:07:54.871
I broke it because it can't infer this
custom SQL statement that I made,

119
00:07:54.871 --> 00:07:59.932
but I'm pretty sure this custom
SQL statement takes in, lemme see.

120
00:07:59.932 --> 00:08:05.234
Yes, it takes the, custom SQL
statement here takes in a generic,

121
00:08:05.234 --> 00:08:10.266
so I guess I could just say number,
and then now it's a number.

122
00:08:12.193 --> 00:08:14.455
&gt;&gt; Scott Moss: So, but by default,
it already is tight, but

123
00:08:14.455 --> 00:08:16.318
it just couldn't infer this string.

124
00:08:16.318 --> 00:08:18.864
It has no idea what the string is,
it could be anything.

125
00:08:18.864 --> 00:08:19.877
So yeah.

126
00:08:19.877 --> 00:08:23.145
&gt;&gt; Student: And what do you
like about Drizzle over Prisma?

127
00:08:23.145 --> 00:08:23.795
&gt;&gt; Scott Moss: It's a great question.

128
00:08:23.795 --> 00:08:26.583
I actually just started using
Drizzle a couple weeks ago and

129
00:08:26.583 --> 00:08:28.152
I'm using it in production now.

130
00:08:28.152 --> 00:08:31.984
And I didn't switch because I didn't
like Prisma, actually I like Prisma.

131
00:08:31.984 --> 00:08:35.762
I switched because the database
that we were using at the time,

132
00:08:35.762 --> 00:08:40.695
I don't remember which one it was, didn't
have really good support for Prisma.

133
00:08:40.695 --> 00:08:45.324
So we had to switch and
Drizzle was like the second best one.

134
00:08:45.324 --> 00:08:48.376
I mean, that's all an opinion, but
it was pretty good, so I was like, okay,

135
00:08:48.376 --> 00:08:48.949
I'll try it.

136
00:08:48.949 --> 00:08:52.234
And then once I started using it,
I realized it's just so

137
00:08:52.234 --> 00:08:56.069
much better to have a schema in
a JavaScript TypeScript file than it

138
00:08:56.069 --> 00:08:58.405
is in a non JavaScript TypeScript file.

139
00:08:58.405 --> 00:09:03.295
Prisma is a Prisma file,
which you can't do things like this,

140
00:09:03.295 --> 00:09:05.797
I can't make dynamic schemas.

141
00:09:05.797 --> 00:09:11.256
I can't have functions, it's static
in nature, so that's one thing.

142
00:09:11.256 --> 00:09:15.369
And then with Prisma, you have to generate
the client to output the TypeScript,

143
00:09:15.369 --> 00:09:19.438
whereas with Drizzle, it's just
TypeScript, it's just a TypeScript file.

144
00:09:19.438 --> 00:09:22.000
So the types are just there
as soon as you hit save,

145
00:09:22.000 --> 00:09:24.811
you don't have to generate anything,
it just knows.

146
00:09:24.811 --> 00:09:29.462
So, I do like that, it is a little
learning curve to like use the querying

147
00:09:29.462 --> 00:09:33.981
language with Drizzle, but
I've come to like prefer it over Prisma.

148
00:09:33.981 --> 00:09:34.901
Like Prisma seen,

149
00:09:34.901 --> 00:09:38.875
Prisma like, took a different approach of
like, how do we make this really easy.

150
00:09:38.875 --> 00:09:41.778
And for me, it became less
powerful whereas Drizzle's like,

151
00:09:41.778 --> 00:09:45.033
we want it to be extremely powerful,
but we still want it to be simple.

152
00:09:45.033 --> 00:09:50.549
We'll let you pick, so I prefer that, but
also the biggest thing was migrations.

153
00:09:50.549 --> 00:09:55.058
Handling migrations with Prisma was cool
when it came to schema migrations, but

154
00:09:55.058 --> 00:09:58.705
when it came to like backfilling
columns from breaking changes,

155
00:09:58.705 --> 00:10:00.317
that was really difficult.

156
00:10:00.317 --> 00:10:03.409
They had like no solution for
that because the way that Prisma works,

157
00:10:03.409 --> 00:10:06.516
whenever you make a schema change,
you gotta generate a new client.

158
00:10:06.516 --> 00:10:08.043
So if you have a new client and

159
00:10:08.043 --> 00:10:12.183
you're trying to back fill some data
from a previous version of your schema,

160
00:10:12.183 --> 00:10:15.384
the client isn't aware of that
because the types changed.

161
00:10:15.384 --> 00:10:16.900
So [LAUGH] it was really hard and

162
00:10:16.900 --> 00:10:19.700
I don't think they really
have a good solution for it.

163
00:10:19.700 --> 00:10:21.236
So, that was like the biggest push,

164
00:10:21.236 --> 00:10:23.825
was like we had a different
database that didn't support it.

165
00:10:23.825 --> 00:10:28.108
Because it was a serverless database
over HTTP and Prisma's support for

166
00:10:28.108 --> 00:10:31.337
that is like always like
experimental usage on risk and

167
00:10:31.337 --> 00:10:34.230
migrations were just
really tough with Prisma.

168
00:10:34.230 --> 00:10:38.900
I'm sure there's a way to get around the
use case that we had, but with Drizzle,

169
00:10:38.900 --> 00:10:43.176
the migrations are programmatic,
you literally make a migration file.

170
00:10:43.176 --> 00:10:47.380
In TypeScript JavaScript and you run that,
whereas with Prisma it's a CLI that you

171
00:10:47.380 --> 00:10:49.918
have to run and
it was just a lot more complicated.

172
00:10:49.918 --> 00:10:53.171
But I like them both, but Drizzle for now.

173
00:10:53.171 --> 00:11:00.816
Okay, so yeah, let's see if this
actually shows something on a page.

174
00:11:00.816 --> 00:11:02.915
There we go, yeah, so it works.

