WEBVTT

1
00:00:00.180 --> 00:00:01.336
&gt;&gt; Scott Moss: And
just to get some more reps,

2
00:00:01.336 --> 00:00:03.210
let's just go do the same thing for
sign in.

3
00:00:03.210 --> 00:00:04.431
So it's mostly the same thing,

4
00:00:04.431 --> 00:00:07.702
it's literally just changing the word from
sign up to sign in, so it's a duplicate.

5
00:00:07.702 --> 00:00:10.444
So I'm not gonna walk through it,
I'll just kind of space it in there.

6
00:00:10.444 --> 00:00:14.690
But just make sure our app works and
our users can sign in, we wanna do that.

7
00:00:14.690 --> 00:00:18.490
So let's just go ahead and do that,
I'm just gonna go to the sign in form.

8
00:00:18.490 --> 00:00:20.353
I'm gonna add my submit button here.

9
00:00:23.044 --> 00:00:24.565
&gt;&gt; Scott Moss: I'm gonna make a label.

10
00:00:25.576 --> 00:00:27.051
&gt;&gt; Scott Moss: It's gonna say Sign in.

11
00:00:30.142 --> 00:00:35.813
&gt;&gt; Scott Moss: Just like that, and
then I'm going to import the signinUser,

12
00:00:35.813 --> 00:00:38.812
I think that's what I called it.

13
00:00:38.812 --> 00:00:43.338
Sign in, maybe I didn't export it,
let me go check.

14
00:00:43.338 --> 00:00:45.601
We didn't make it yet,
let's go make it, cool.

15
00:00:45.601 --> 00:00:50.761
So if we go back to the actions auth file,
let's make the one for sign in.

16
00:00:50.761 --> 00:00:55.986
So, export signinUser,

17
00:00:58.969 --> 00:01:00.934
&gt;&gt; Scott Moss: It's gonna be
the same thing, previous date.

18
00:01:03.396 --> 00:01:07.389
&gt;&gt; Scott Moss: Just gonna any that,
formData.

19
00:01:07.389 --> 00:01:12.393
And that's gonna be type FormData,
nothing crazy.

20
00:01:12.393 --> 00:01:16.753
Why did I put that there, I don't know.

21
00:01:16.753 --> 00:01:21.863
I'm trying to do something crazy,
here we go, all right.

22
00:01:21.863 --> 00:01:28.225
So we got that, same thing,
we want to validate the input,

23
00:01:28.225 --> 00:01:32.317
because, can't trust these users.

24
00:01:32.317 --> 00:01:34.903
Do that, and then we just wanna try-catch.

25
00:01:34.903 --> 00:01:38.990
And the only difference with this one is,
is the function that it calls in

26
00:01:38.990 --> 00:01:42.212
the try-catch, so
we won't call the signup function.

27
00:01:42.212 --> 00:01:48.068
We'll call the signin function
from the same import,

28
00:01:48.068 --> 00:01:51.133
from @utils/authTools.

29
00:01:53.117 --> 00:01:54.479
&gt;&gt; Scott Moss: But
everything else is the same.

30
00:01:54.479 --> 00:01:58.151
You set the cookie, we show you failed to,

31
00:01:58.151 --> 00:02:03.161
I guess we'll change the message
to failed to sign you in.

32
00:02:03.161 --> 00:02:07.450
We should actually test this, so,
I want you to see the error message,

33
00:02:07.450 --> 00:02:08.819
so we'll do that too.

34
00:02:08.819 --> 00:02:10.246
So there we got that.

35
00:02:10.246 --> 00:02:15.544
Now I can import my signinUser like so.

36
00:02:15.544 --> 00:02:21.353
I can get my hook going,
which is gonna useFormState,

37
00:02:21.353 --> 00:02:27.917
pass in my signinUser, like that,
pass in my initial state,

38
00:02:27.917 --> 00:02:31.851
which is gonna be the same as signup.

39
00:02:40.175 --> 00:02:43.344
&gt;&gt; Scott Moss: And
then I'll have my formState here, and

40
00:02:43.344 --> 00:02:48.547
then I have my action here, and
then, on the form, action, action.

41
00:02:55.252 --> 00:02:58.170
&gt;&gt; Scott Moss: And then,
as far as showing some errors, I mean,

42
00:02:58.170 --> 00:03:02.418
there's no wrong way to do this, but
I'll just do something like this.

43
00:03:02.418 --> 00:03:07.699
I'll say formState.message,
if that's there,

44
00:03:07.699 --> 00:03:11.664
I'm gonna just do this, just in case.

45
00:03:11.664 --> 00:03:15.960
If that's there,
then just show this message right quick.

46
00:03:18.065 --> 00:03:19.477
&gt;&gt; Scott Moss: Which will
just be formState.message.

47
00:03:19.477 --> 00:03:22.198
I'm just gonna show exactly what
the server actually returned.

48
00:03:24.541 --> 00:03:25.253
&gt;&gt; Scott Moss: I'll just do that.

49
00:03:28.559 --> 00:03:31.808
&gt;&gt; Scott Moss: You can also hook this up,
if you're worried about accessibility,

50
00:03:31.808 --> 00:03:35.056
this is where you can take this message
and feed it to a screen reader or

51
00:03:35.056 --> 00:03:36.133
something like that.

52
00:03:36.133 --> 00:03:40.404
Okay, so let's try to sign in, I'm gonna
actually just break it, and hopefully,

53
00:03:40.404 --> 00:03:41.561
we can see that error.

54
00:03:41.561 --> 00:03:45.762
So let's go back to sign in,

55
00:03:45.762 --> 00:03:51.196
that renders, give it a real email.

56
00:03:53.056 --> 00:03:55.050
&gt;&gt; Scott Moss: Sorry about that.

57
00:03:55.050 --> 00:03:57.817
Then we can do that, and then,
boom, you can see right here,

58
00:03:57.817 --> 00:03:58.948
it failed to sign you in.

59
00:03:58.948 --> 00:04:01.813
You might notice that
the form didn't clear, right?

60
00:04:01.813 --> 00:04:05.674
If that bothers you as much as it bothers
me, then we're the same type of people.

61
00:04:05.674 --> 00:04:08.543
Yeah, there really is
no easy way to do this.

62
00:04:08.543 --> 00:04:13.797
There is a way, and I didn't wanna
put it in here, cuz it's a hack.

63
00:04:13.797 --> 00:04:18.085
The recommended way that I saw people do
this on the server side is actually to

64
00:04:18.085 --> 00:04:18.757
pass a ref.

65
00:04:18.757 --> 00:04:23.322
Cuz once you pass a ref to the form, you
can just do form.clear inside the server

66
00:04:23.322 --> 00:04:26.248
action, and that works totally fine.

67
00:04:26.248 --> 00:04:30.438
But I didn't feel like writing,
I didn't feel like doing this.

68
00:04:30.438 --> 00:04:34.003
Or you gotta do this, and
then you pass in the ref, and

69
00:04:34.003 --> 00:04:37.024
then you make a ref, and
then you add the ref.

70
00:04:37.024 --> 00:04:40.288
I didn't feel like doing that,
so that's how you would do it.

71
00:04:40.288 --> 00:04:43.936
So once you pass in that form
ref inside of this function,

72
00:04:43.936 --> 00:04:48.356
you would have, I don't know,
maybe that's your third argument.

73
00:04:48.356 --> 00:04:53.126
I don't know, wherever you pass it in, you
could come down here and say ref.current,

74
00:04:53.126 --> 00:04:56.686
which will be the form, and
all forms have a clear method on them.

75
00:04:56.686 --> 00:04:59.814
You could do that, and
that's how you would clear.

76
00:04:59.814 --> 00:05:04.014
But that's so much work,
I'm not doing that.

77
00:05:04.014 --> 00:05:07.618
Also, I want them to do better.

78
00:05:07.618 --> 00:05:10.528
I want them to make a better one,
so I refuse to do it that way.

79
00:05:10.528 --> 00:05:14.751
Make that better,
I'm not using that, that's gross.

80
00:05:14.751 --> 00:05:19.507
And I know that they don't
want you to do that.

81
00:05:19.507 --> 00:05:22.428
Or not that they don't want you to, I know
that they haven't thought about it yet,

82
00:05:22.428 --> 00:05:24.789
because there's nothing in their docs,
I had to figure that out.

83
00:05:24.789 --> 00:05:26.425
I was like, that's just how you do it,

84
00:05:26.425 --> 00:05:28.300
there's nothing in their
docs talks about that.

85
00:05:28.300 --> 00:05:32.609
So I think this is one of those things
where they're waiting, I mean, Next.js,

86
00:05:32.609 --> 00:05:36.070
they're waiting for
the React team to do something about it.

87
00:05:36.070 --> 00:05:39.398
So they're just like, I don't know,
we'll see what the React team does,

88
00:05:39.398 --> 00:05:41.481
I don't know, but
that's how you would do it.

89
00:05:41.481 --> 00:05:46.364
If you are dependent on a response from
a server action that calls an external

90
00:05:46.364 --> 00:05:51.170
API to change the UI, how can that
response be taken care of when it's being

91
00:05:51.170 --> 00:05:54.935
inserted directly into the action
attribute of the form?

92
00:05:54.935 --> 00:05:58.013
I'm guessing when they say taken care of,

93
00:05:58.013 --> 00:06:03.583
they actually wanna get the result of
that response and do something with it.

94
00:06:03.583 --> 00:06:05.509
Yes, that's a great question.

95
00:06:05.509 --> 00:06:11.209
And that example, you probably
wouldn't use the action in the form.

96
00:06:11.209 --> 00:06:13.281
You would do what I'm
gonna show you later,

97
00:06:13.281 --> 00:06:16.999
which is to use a transition where
you can get the result of the data.

98
00:06:16.999 --> 00:06:21.194
But in the example that we do have,
just to kinda fit it in, right now,

99
00:06:21.194 --> 00:06:23.931
we're just returning a message, right?

100
00:06:23.931 --> 00:06:29.085
But there's nothing stopping you from,
if I go here,

101
00:06:29.085 --> 00:06:34.248
right now,
I can return whatever I want here, right?

102
00:06:34.248 --> 00:06:37.654
I could put the token here if I want,
and it's there.

103
00:06:37.654 --> 00:06:42.633
So now, on the form, if there is
a formState.token, that's the result.

104
00:06:42.633 --> 00:06:44.195
So you can check for it there.

105
00:06:44.195 --> 00:06:45.974
We had a question about,

106
00:06:45.974 --> 00:06:50.483
can you take these exported server
actions and unit test them?

107
00:06:50.483 --> 00:06:52.618
Yes, but with some caveats.

108
00:06:52.618 --> 00:06:56.662
Whenever you have this directive at the
top of a file, not only is it expected to

109
00:06:56.662 --> 00:07:00.242
run in Node, which is fine for
any unit testing framework like Jest.

110
00:07:00.242 --> 00:07:02.191
Jest runs in Node, it's great.

111
00:07:02.191 --> 00:07:09.616
But it's also expected that these
functions are running on a request.

112
00:07:09.616 --> 00:07:12.080
That's why we're able to access
things like the cookies,

113
00:07:12.080 --> 00:07:14.246
and we can do things like the headers.

114
00:07:14.246 --> 00:07:17.157
So, with that being said,
if you were to test these,

115
00:07:17.157 --> 00:07:19.638
you would most likely
have to mock these out.

116
00:07:19.638 --> 00:07:24.202
Because, again, it's expected that these
functions are running on some type

117
00:07:24.202 --> 00:07:27.758
of request, because that's
really what a server action is.

118
00:07:27.758 --> 00:07:32.440
They only get called when they need to
cross the threshold from a client to

119
00:07:32.440 --> 00:07:35.143
a server, which is basically a request.

120
00:07:35.143 --> 00:07:37.580
So you just need to mock those out.

121
00:07:37.580 --> 00:07:41.502
Whatever framework you wanna use just
lets you mock out entire modules,

122
00:07:41.502 --> 00:07:44.662
things like that,
you most likely have to mock those out.

123
00:07:44.662 --> 00:07:48.252
So, you can build an abstraction around
this, do some dependency injection if you

124
00:07:48.252 --> 00:07:50.780
want, but for the most part,
yeah, it's totally fine.

