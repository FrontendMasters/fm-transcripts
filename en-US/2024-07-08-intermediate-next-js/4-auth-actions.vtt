WEBVTT

1
00:00:00.000 --> 00:00:01.659
&gt;&gt; Scott Moss: But we're just gonna
hop into it, cuz that's the fun part.

2
00:00:01.659 --> 00:00:03.219
So if you click on implementation,

3
00:00:03.219 --> 00:00:06.444
basically implementation is all
the code we're about to write for this.

4
00:00:06.444 --> 00:00:10.885
What we need to do, the goal is to,
if you saw when I did the demo of the app,

5
00:00:10.885 --> 00:00:13.345
I had the sign in form, the sign up form.

6
00:00:13.345 --> 00:00:14.505
We need to make that work.

7
00:00:14.505 --> 00:00:17.852
It doesn't do anything
until we hook this up.

8
00:00:17.852 --> 00:00:21.254
So first what you need to do is, you
need to check out to a different branch.

9
00:00:21.254 --> 00:00:25.451
You check out to the step/0 branch.

10
00:00:25.451 --> 00:00:28.397
This branch has, it doesn't work.

11
00:00:28.397 --> 00:00:31.196
There's nothing in here, [LAUGH]
there's only the bare minimum in here.

12
00:00:31.196 --> 00:00:32.838
Our goal is to get this to work.

13
00:00:32.838 --> 00:00:36.379
Right, we're gonna go in and
start making these things work together.

14
00:00:36.379 --> 00:00:38.855
The main branch is where
everything is completed.

15
00:00:38.855 --> 00:00:40.313
So that's what I showed
you at the beginning.

16
00:00:40.313 --> 00:00:44.439
But we're gonna start on step 0 with
pretty much everything stripped out,

17
00:00:44.439 --> 00:00:46.252
and we need to go in and enable it.

18
00:00:46.252 --> 00:00:50.298
The first thing we're gonna do is getting
those authentication forms to work using

19
00:00:50.298 --> 00:00:51.063
form actions.

20
00:00:51.063 --> 00:00:54.352
So the first thing we need to do is,
so again,

21
00:00:54.352 --> 00:01:00.078
I'm gonna tell you what my opinion of it
is while also telling you what I think.

22
00:01:00.078 --> 00:01:04.060
NextJS want you to do is not,
[LAUGH] they don't always match.

23
00:01:04.060 --> 00:01:06.285
What I like to do with my actions is,

24
00:01:06.285 --> 00:01:09.489
I like to put them in
an actions folder on the route.

25
00:01:09.489 --> 00:01:12.984
There's many ways to make actions.

26
00:01:12.984 --> 00:01:14.919
You can make them directly
inside of a server component and

27
00:01:14.919 --> 00:01:15.919
different things like that.

28
00:01:15.919 --> 00:01:18.050
I prefer to put them on the routes.

29
00:01:18.050 --> 00:01:20.544
You can even make them
inside of client components.

30
00:01:20.544 --> 00:01:23.706
When you do that, it's just really
hard to test them, move them around,

31
00:01:23.706 --> 00:01:25.195
just like any other piece of code.

32
00:01:25.195 --> 00:01:27.119
So I just put them all in a folder.

33
00:01:27.119 --> 00:01:29.498
So that's what we're gonna do,
we're gonna make a folder called actions.

34
00:01:29.498 --> 00:01:32.818
And for our actions, as far as
being able to sign in and sign up,

35
00:01:32.818 --> 00:01:34.832
we're gonna make a file called auth.

36
00:01:34.832 --> 00:01:37.370
These are gonna be all the actions
we use for authentication.

37
00:01:37.370 --> 00:01:38.856
So let's do that.

38
00:01:43.118 --> 00:01:47.290
&gt;&gt; Scott Moss: So on the route,
not inside the app directory, but

39
00:01:47.290 --> 00:01:53.898
literally on the route of the repo, I'm
gonna make a new folder called actions.

40
00:01:53.898 --> 00:01:57.138
And inside of there,
a new file called auth.ts.

41
00:01:57.138 --> 00:02:00.483
So yeah, please follow along if you can.

42
00:02:03.398 --> 00:02:07.404
&gt;&gt; Scott Moss: And then from there,
there are a few imports,

43
00:02:07.404 --> 00:02:10.913
get back to my notes, that we wanna use.

44
00:02:10.913 --> 00:02:13.179
Talk about the use server directive and

45
00:02:13.179 --> 00:02:16.001
why we need this outside of a component,
right?

46
00:02:16.001 --> 00:02:18.651
So use server.

47
00:02:18.651 --> 00:02:19.842
Anybody know what this does?

48
00:02:19.842 --> 00:02:22.285
This directive does, or wanna guess?

49
00:02:25.218 --> 00:02:32.016
&gt;&gt; Speaker 2: Or says that this page
should be processed on the server.

50
00:02:32.016 --> 00:02:35.599
&gt;&gt; Scott Moss: Yeah,
you would think so, [LAUGH].

51
00:02:35.599 --> 00:02:37.203
There's actually.

52
00:02:37.203 --> 00:02:40.012
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Scott Moss: There's actually a,

53
00:02:40.012 --> 00:02:41.382
where is it?

54
00:02:41.382 --> 00:02:42.976
Server only, there we go.

55
00:02:42.976 --> 00:02:44.654
That's what this does.

56
00:02:44.654 --> 00:02:47.019
Yeah, that makes sense.

57
00:02:47.019 --> 00:02:49.224
Use server should force it, right?

58
00:02:49.224 --> 00:02:55.476
Yeah, this use server is a hint
to the React compiler that this

59
00:02:55.476 --> 00:03:01.259
file should be ran in a NodeJS
environment, basically.

60
00:03:01.259 --> 00:03:04.370
It's like, this should be
ran in a NodeJS environment.

61
00:03:04.370 --> 00:03:09.070
It also hints at how, when you
start composing components together

62
00:03:09.070 --> 00:03:12.533
like a client component
with a server component,

63
00:03:12.533 --> 00:03:17.991
it hints to the compiler that,
these things can't belong in this order.

64
00:03:17.991 --> 00:03:21.204
You can't import a server component into a
client component, or something like that.

65
00:03:21.204 --> 00:03:23.028
So it gives the compiler hints and

66
00:03:23.028 --> 00:03:26.885
it tells it what environment it should
run in and what it has access to.

67
00:03:26.885 --> 00:03:31.324
Also, just from a human perspective,
it's just something you can look at and

68
00:03:31.324 --> 00:03:34.886
be like, okay, I know this file
has the context of a server, so

69
00:03:34.886 --> 00:03:36.316
therefore we're good.

70
00:03:36.316 --> 00:03:40.158
But in the case of Next.js and
React, you have to add this.

71
00:03:40.158 --> 00:03:44.525
You cannot use an action, a server action
without that server action being scoped

72
00:03:44.525 --> 00:03:46.368
inside of a use server directive.

73
00:03:46.368 --> 00:03:49.137
Either globally in the page or
in a component,

74
00:03:49.137 --> 00:03:53.113
you could put use server at the top
of the function you're making,

75
00:03:53.113 --> 00:03:58.090
which I think is a gross UI and you should
pretty much always do this, in my opinion.

76
00:03:58.090 --> 00:04:02.129
I don't know why they even show you
the other one, but you can do it.

77
00:04:02.129 --> 00:04:07.139
As far as these imports,
cookies, nothing special here.

78
00:04:07.139 --> 00:04:12.309
I will talk about how this is
used because it's kinda cool.

79
00:04:12.309 --> 00:04:14.658
I already have some pre-made signin,
signup functions.

80
00:04:14.658 --> 00:04:16.474
You can go check those out,
we won't be working on those.

81
00:04:16.474 --> 00:04:19.306
It's just being able to take a email,
password, hash it,

82
00:04:19.306 --> 00:04:22.887
sign in, take the email password,
hash it, sign up, that type of thing.

83
00:04:22.887 --> 00:04:25.566
Typical email password sign up,
nothing crazy.

84
00:04:25.566 --> 00:04:29.792
Zod, we're gonna use this for schema
validation so we can validate our inputs.

85
00:04:29.792 --> 00:04:34.138
Redirect, so we can redirect to
the dashboard once someone signs in or

86
00:04:34.138 --> 00:04:37.906
signs up, and the name of
the cookie that we'll be setting.

87
00:04:37.906 --> 00:04:42.295
So what we need to do, the objective, is
we need to create a function in which we

88
00:04:42.295 --> 00:04:45.101
can call when someone
completes the sign up form.

89
00:04:45.101 --> 00:04:46.847
We're gonna call that registerUser.

90
00:04:46.847 --> 00:04:50.972
And we need to create a function which we
can call when someone creates the sign in

91
00:04:50.972 --> 00:04:52.956
form, we'll call that signinUser.

92
00:04:52.956 --> 00:04:54.022
So let's do that.

93
00:04:54.022 --> 00:04:58.317
So for registerUser,
we go back to my code.

94
00:04:58.317 --> 00:04:59.014
Let's do that.

95
00:04:59.014 --> 00:05:04.786
I'll say, const registerUser equals async.

96
00:05:04.786 --> 00:05:05.907
And I'll talk about these arguments.

97
00:05:05.907 --> 00:05:10.331
So the first argument is gonna
be the previous state of

98
00:05:10.331 --> 00:05:14.178
the form that this action
is gonna be bound to.

99
00:05:14.178 --> 00:05:16.992
That's gonna make more sense
when we go make the JSX.

100
00:05:16.992 --> 00:05:21.838
But we're gonna be using this special
hook that basically provides the previous

101
00:05:21.838 --> 00:05:25.899
state of the form as the first argument
into which the action that you

102
00:05:25.899 --> 00:05:29.696
give it is part of this special
hook that we're gonna be using.

103
00:05:29.696 --> 00:05:35.072
So we won't be using this example, but
that's always gonna be the first argument.

104
00:05:35.072 --> 00:05:39.471
And then the second argument is
actually gonna be the form data,

105
00:05:39.471 --> 00:05:41.760
which is gonna be type formData.

106
00:05:41.760 --> 00:05:44.850
If you don't know what formData type is,
it's just a map.

107
00:05:44.850 --> 00:05:48.245
It's a map of all the input fields by
the name that you gave them in the form.

108
00:05:51.065 --> 00:05:52.696
&gt;&gt; Scott Moss: So we have that.

109
00:05:52.696 --> 00:05:54.698
Like always, never trust a client.

110
00:05:54.698 --> 00:05:57.937
Probably wanna validate these
inputs before you do anything.

111
00:05:57.937 --> 00:06:02.682
So I'm using Zod here to make a schema for
that, so I just created a schema.

112
00:06:02.682 --> 00:06:07.193
If you don't know what Zod is, it's just
a runtime schema validation library.

113
00:06:07.193 --> 00:06:10.693
You can create a schema,
pass it an object, and try to validate it.

114
00:06:10.693 --> 00:06:15.131
It'll throw an error if it doesn't match,
it'll succeed if it does.

115
00:06:15.131 --> 00:06:17.962
It's a very popular
schema validation tool.

116
00:06:17.962 --> 00:06:19.761
So we have our authSchema here.

117
00:06:19.761 --> 00:06:23.607
It's just checking to make sure
that this object has a email and

118
00:06:23.607 --> 00:06:26.741
it has a password, and
they're both type string.

119
00:06:26.741 --> 00:06:30.171
So once we do that, what we wanna do is
we want to try to validate that schema.

120
00:06:30.171 --> 00:06:32.238
We can do the parse function.

121
00:06:32.238 --> 00:06:33.723
By default, this is gonna throw an error.

122
00:06:33.723 --> 00:06:36.815
If it fails, that's fine, we'll talk
about how we might wanna handle that.

123
00:06:36.815 --> 00:06:38.359
So let's do that.

124
00:06:38.359 --> 00:06:45.248
We'll say, data = authSchema.parse.

125
00:06:45.248 --> 00:06:48.740
And we wanna pass in the email here.

126
00:06:48.740 --> 00:06:52.662
That's gonna be formData.get
because it's a map, and

127
00:06:52.662 --> 00:06:55.941
the field on that form is
gonna be called email.

128
00:06:55.941 --> 00:07:01.806
And then for password,
it's the same thing, just password.

129
00:07:01.806 --> 00:07:03.609
You have to call the get method on maps.

130
00:07:06.420 --> 00:07:08.350
&gt;&gt; Scott Moss: Okay, assuming that's good,

131
00:07:08.350 --> 00:07:12.789
we're gonna wrap the next part in
a try-catch, the actual sign up part.

132
00:07:12.789 --> 00:07:15.428
And the reason we wanna do that is so

133
00:07:15.428 --> 00:07:19.442
we can show a message on
the form if the sign up fails.

134
00:07:19.442 --> 00:07:21.785
So we're gonna try-catch that.

135
00:07:21.785 --> 00:07:23.211
So let's do that.

136
00:07:23.211 --> 00:07:28.307
So we'll say, let's try and
get a token from

137
00:07:28.307 --> 00:07:35.025
awaiting the signup function
that's imported at the top.

138
00:07:35.025 --> 00:07:36.322
This just takes in data.

139
00:07:36.322 --> 00:07:38.533
It takes in an object with the email and
password,

140
00:07:38.533 --> 00:07:41.969
which is what this schema returns if
it's valid, cuz it's email password.

141
00:07:41.969 --> 00:07:43.444
So that's that object.

142
00:07:43.444 --> 00:07:45.457
It returns an object with the user and
a token.

143
00:07:45.457 --> 00:07:47.126
We're just gonna destructure and
get the token.

144
00:07:55.481 --> 00:07:59.815
&gt;&gt; Scott Moss: And then if it succeeds,
what we need to do is, we're using

145
00:07:59.815 --> 00:08:05.728
JSON Web Tokens for authentication, and
I'm just gonna set them in the cookie.

146
00:08:05.728 --> 00:08:09.859
The reason I'm setting them in
the cookie is because I want to

147
00:08:09.859 --> 00:08:14.558
be able to access the JSON Web Token
on all of my server-side calls and

148
00:08:14.558 --> 00:08:17.650
functions which have
access to the cookies.

149
00:08:17.650 --> 00:08:21.908
If I store the JSON Web Token in
a local storage or something like that,

150
00:08:21.908 --> 00:08:25.748
I would not be able to access
that JSON Web Token server-side.

151
00:08:25.748 --> 00:08:29.242
There's no way to access
local storage from a server.

152
00:08:29.242 --> 00:08:33.186
And because we're not sending any
requests on a lot of these things,

153
00:08:33.186 --> 00:08:37.067
I can't just take it out the local
storage and send it to the server.

154
00:08:37.067 --> 00:08:39.424
It's possible, it's just a lot more work.

155
00:08:39.424 --> 00:08:41.148
I just inflate doing it.

156
00:08:41.148 --> 00:08:44.044
Honestly, you should be storing
JSON Web Tokens in secure cookies anyway.

157
00:08:44.044 --> 00:08:45.227
You should be storing them in local store.

158
00:08:45.227 --> 00:08:48.015
So we need to set it,
you can use the cookies.

159
00:08:48.015 --> 00:08:51.725
We're able to use cookies here
on the server because, again,

160
00:08:51.725 --> 00:08:53.485
we didn't make the request.

161
00:08:53.485 --> 00:08:55.428
But essentially what's
happening here is a request.

162
00:08:55.428 --> 00:09:00.334
So just like any request handler,
we have access to the request.

163
00:09:00.334 --> 00:09:05.290
So by just importing the cookies,
it already knows what current

164
00:09:05.290 --> 00:09:10.078
request is happening right now,
so we don't have to tell it.

165
00:09:10.078 --> 00:09:12.642
So we can just call cookies and
it knows what to do.

166
00:09:12.642 --> 00:09:18.167
So in this case,
I'm just gonna say cookies.set,

167
00:09:18.167 --> 00:09:21.567
the cookie name with the token.

168
00:09:21.567 --> 00:09:23.745
And then if there's any error,
just log the error,

169
00:09:23.745 --> 00:09:25.538
and then we're gonna send back a message.

170
00:09:25.538 --> 00:09:26.772
So let's do that.

171
00:09:26.772 --> 00:09:31.343
So we'll log the error, we'll send
back a message, fill to sign up.

172
00:09:31.343 --> 00:09:35.574
And at the end, if everything works,

173
00:09:35.574 --> 00:09:39.816
we'll do a redirect to /dashboard.

174
00:09:39.816 --> 00:09:43.918
You might be asking why I don't just put
the redirect here and the try after here.

175
00:09:43.918 --> 00:09:46.352
There is a bug for
some reason on this redirect.

176
00:09:46.352 --> 00:09:50.249
I had to go deep into the Next.js
issues to figure this out.

177
00:09:50.249 --> 00:09:55.333
If you put this in a try-catch,
it actually catches an error somehow.

178
00:09:55.333 --> 00:09:58.835
[LAUGH] I guess there's an error being
thrown here, even though it works.

179
00:09:58.835 --> 00:10:01.998
And that your try-catch will catch it and
it will land here,

180
00:10:01.998 --> 00:10:03.618
it won't actually redirect.

181
00:10:03.618 --> 00:10:06.698
So don't put a redirect in a try-catch.

182
00:10:06.698 --> 00:10:09.380
I don't know if that's a bug,
if that's intentional.

183
00:10:09.380 --> 00:10:14.281
But yeah, I was stuck on this for
two days, about three months ago, and

184
00:10:14.281 --> 00:10:16.090
that's what I found out.

185
00:10:16.090 --> 00:10:17.092
Don't put it in a try-catch.

186
00:10:19.616 --> 00:10:21.220
&gt;&gt; Scott Moss: Cool, so we have that.

187
00:10:21.220 --> 00:10:24.096
Export this, registerUser.

188
00:10:24.096 --> 00:10:27.153
Now we want to hook this up to the form.

189
00:10:27.153 --> 00:10:28.699
So let's do that.

190
00:10:28.699 --> 00:10:31.532
We go back to our notes.

191
00:10:31.532 --> 00:10:36.872
Couple things we need to do is, one,
we're gonna create a Submit button.

192
00:10:36.872 --> 00:10:39.899
I'll talk about why the button is
separate from the rest of the form.

193
00:10:39.899 --> 00:10:43.517
And then we need to add all
that stuff to the form,

194
00:10:43.517 --> 00:10:46.798
which should be mostly built out, I think.

195
00:10:46.798 --> 00:10:49.545
I can't remember what stale left it in,
but let's go check it out.

196
00:10:49.545 --> 00:10:55.814
So if we go to app, you should see
a auth folder for the season it.

197
00:10:55.814 --> 00:11:00.939
Quick refresher,
parentheses around a folder in Next.js

198
00:11:00.939 --> 00:11:06.175
app directory means this route
segment won't have a route.

199
00:11:06.175 --> 00:11:07.931
There won't be a slash auth, but

200
00:11:07.931 --> 00:11:12.033
you want a folder because you want all
these child segments to share a layout.

201
00:11:12.033 --> 00:11:13.019
So it's like a group.

202
00:11:13.019 --> 00:11:14.007
It's called a route group.

203
00:11:14.007 --> 00:11:18.308
It's like, I wanna group all these routes
together so they can share this layout,

204
00:11:18.308 --> 00:11:21.206
but I don't wanna make a new
route segment called auth.

205
00:11:21.206 --> 00:11:25.786
So in this case, I can still go
to slash signup and slash signin.

206
00:11:25.786 --> 00:11:29.311
Whereas if I didn't have these
parentheses to be slash auth signup,

207
00:11:29.311 --> 00:11:31.213
slash auth signin, which is gross.

208
00:11:31.213 --> 00:11:33.023
So I put this parentheses here,

209
00:11:33.023 --> 00:11:37.447
which allows me to not have that in the
route segment, but still get the benefit

210
00:11:37.447 --> 00:11:41.355
of sharing a layout here because
they're basically the same thing.

211
00:11:41.355 --> 00:11:44.975
So that's what that is.

212
00:11:44.975 --> 00:11:48.239
Okay, so let's go to,
actually we're gonna go to the components.

213
00:11:48.239 --> 00:11:51.735
We're gonna go to signupForm, and
this is where we wanna do our work.

214
00:11:51.735 --> 00:11:55.251
So in the signupForm, notice,
it's a client component.

215
00:11:55.251 --> 00:11:58.270
This is important, this is very important.

216
00:11:58.270 --> 00:12:00.183
This is a client component.

217
00:12:00.183 --> 00:12:04.626
You can import server actions and
client components.

218
00:12:04.626 --> 00:12:06.414
That's the whole point of them, actually.

219
00:12:06.414 --> 00:12:09.907
Because most of the time,
if you think about it,

220
00:12:09.907 --> 00:12:14.425
you probably wanna call some
action on some user interaction,

221
00:12:14.425 --> 00:12:18.022
on a click, on a submit,
on something a user did.

222
00:12:18.022 --> 00:12:21.614
You can think of it as the same case
where you would have made a post request,

223
00:12:21.614 --> 00:12:24.766
you would have made any type of
request when a user did something.

224
00:12:24.766 --> 00:12:27.362
Okay, replace that request
with a server action.

225
00:12:27.362 --> 00:12:29.762
Now I wanna do a server action
when a user does something.

226
00:12:29.762 --> 00:12:33.361
Right now we're specifically talking about
forms, but later we'll talk about how you

227
00:12:33.361 --> 00:12:35.852
can use server actions on any interaction,
not just forms.

228
00:12:38.137 --> 00:12:41.115
&gt;&gt; Scott Moss: Okay,
any questions on that?

229
00:12:41.115 --> 00:12:46.191
I think the Next.js docs just over
explains that, but it's really

230
00:12:46.191 --> 00:12:52.262
just a function that gets executed on a
server, but you can call it on the client.

231
00:12:52.262 --> 00:12:55.995
The best way I can describe it is,
imagine if you had some code gin,

232
00:12:55.995 --> 00:12:59.729
whereas if you made a functional server,
you run this script, and

233
00:12:59.729 --> 00:13:03.866
it automatically creates a route for
you and abstracts that route away and

234
00:13:03.866 --> 00:13:06.096
a function that you can call anywhere.

235
00:13:06.096 --> 00:13:07.890
That's the best way I can describe it.

236
00:13:07.890 --> 00:13:12.497
It's just an abstracted route that you
didn't have to configure yourself.

237
00:13:12.497 --> 00:13:19.714
Okay, cool, so first thing is, we need to
useFormState hook to set up our state.

238
00:13:19.714 --> 00:13:24.989
And then we need to bind that to our form,
and then we can kinda use

239
00:13:24.989 --> 00:13:30.675
the message here to show an error message,
and we'll go from there.

240
00:13:30.675 --> 00:13:34.429
So first what we want is to useFormState.

241
00:13:34.429 --> 00:13:36.313
Notice, that comes from react-dom.

242
00:13:36.313 --> 00:13:38.420
That does not come from Next.js.

243
00:13:38.420 --> 00:13:41.050
That is a React thing.

244
00:13:41.050 --> 00:13:42.297
So we got that.

245
00:13:42.297 --> 00:13:44.537
We're gonna create an initial state.

246
00:13:44.537 --> 00:13:46.177
Since we're only passing a message,

247
00:13:46.177 --> 00:13:49.363
we're just gonna have our initial state
just be a null message like this.

248
00:13:49.363 --> 00:13:54.526
I'm gonna create our hook, useFormState.

249
00:13:54.526 --> 00:13:56.311
useFormState takes in two arguments.

250
00:13:56.311 --> 00:14:00.806
It's gonna take in the actual action you
want to run when the form is submitted

251
00:14:00.806 --> 00:14:05.185
as the first argument, and then
the initial state as the second argument.

252
00:14:05.185 --> 00:14:08.237
So the action we wanna run is gonna be
the registerUser one that we just made.

253
00:14:08.237 --> 00:14:09.806
So I'm gonna say registerUser.

254
00:14:09.806 --> 00:14:13.420
And then the initial state
is the initial state here.

255
00:14:13.420 --> 00:14:15.315
My TypeScript is freaking out.

256
00:14:15.315 --> 00:14:18.002
This thing freaks out if you
don't give it a generic.

257
00:14:18.002 --> 00:14:20.284
You don't have to, it's just TypeScript,
but if you want to,

258
00:14:20.284 --> 00:14:21.187
I do have it in the notes.

259
00:14:21.187 --> 00:14:24.736
You basically just type out the initial
state if you wanna do that.

260
00:14:24.736 --> 00:14:29.223
I'll just do it right now for
all the TypeScript stamps out there.

261
00:14:29.223 --> 00:14:32.466
So message would be string or null.

262
00:14:35.904 --> 00:14:40.422
&gt;&gt; Scott Moss: This is just gonna
freak out, don't worry about that.

263
00:14:40.422 --> 00:14:45.745
And then here what it returns is gonna
be a tuple, like most hooks in React.

264
00:14:45.745 --> 00:14:49.551
The first one's gonna be
the actual form state.

265
00:14:49.551 --> 00:14:52.715
In this case, it's gonna be
a object with a message on it.

266
00:14:52.715 --> 00:14:55.582
And then the action that you can call,

267
00:14:55.582 --> 00:14:59.533
in this case we're gonna
bind it to the form action.

268
00:14:59.533 --> 00:15:02.287
So let's do that.
So we have our formState,

269
00:15:02.287 --> 00:15:04.840
and then we have our action.

270
00:15:11.431 --> 00:15:15.497
&gt;&gt; Scott Moss: And then on the form,
it's not on submit.

271
00:15:15.497 --> 00:15:17.149
No longer are you doing on submit.

272
00:15:17.149 --> 00:15:19.887
On submit is a client-side thing.

273
00:15:19.887 --> 00:15:27.257
A form action, if you're OG,
you typically give it a URL, right?

274
00:15:27.257 --> 00:15:31.762
You'd be like,
I wanna go to this route here,

275
00:15:31.762 --> 00:15:34.887
.php, or something, right?

276
00:15:34.887 --> 00:15:37.095
You do something like that, right?

277
00:15:37.095 --> 00:15:38.986
That's OG right there.

278
00:15:38.986 --> 00:15:42.656
So it's the same thing,
except for it's like, well,

279
00:15:42.656 --> 00:15:47.902
I just wanna run this action, which is,
again, it's like a concealed route.

280
00:15:47.902 --> 00:15:50.758
It's like a route that was made for
you, concealed as a function.

281
00:15:50.758 --> 00:15:52.929
So it's very similar to
just putting a route there.

282
00:15:52.929 --> 00:15:55.934
You just don't know what that route is,
it's a generator route.

283
00:16:00.147 --> 00:16:01.872
&gt;&gt; Scott Moss: Any question so far?

284
00:16:01.872 --> 00:16:03.113
&gt;&gt; Speaker 2: I do have one question.

285
00:16:03.113 --> 00:16:05.073
Out of curiosity,
I know this is a client component.

286
00:16:05.073 --> 00:16:05.729
&gt;&gt; Scott Moss: Yes.

287
00:16:05.729 --> 00:16:08.228
&gt;&gt; Speaker 2: And I'm assuming because
some of the components that we're

288
00:16:08.228 --> 00:16:09.895
importing are also client components.

289
00:16:09.895 --> 00:16:11.425
But I'm just curious,

290
00:16:11.425 --> 00:16:16.563
would it be possible to maybe duplicate
this form purely as a server component?

291
00:16:16.563 --> 00:16:19.566
&gt;&gt; Scott Moss: If you replicate
this form as a server component,

292
00:16:19.566 --> 00:16:22.712
then you couldn't handle
any of the interactions,

293
00:16:22.712 --> 00:16:26.086
because interactions are only
possible on the client.

294
00:16:26.086 --> 00:16:29.028
So as soon as you go server component,
you have no interactions.

295
00:16:29.028 --> 00:16:32.416
&gt;&gt; Speaker 2: So
server components are typically read-only.

296
00:16:32.416 --> 00:16:34.679
&gt;&gt; Scott Moss: Yeah, so a forum,
I would imagine if you added a forum,

297
00:16:34.679 --> 00:16:36.134
you want some type of interaction.

298
00:16:36.134 --> 00:16:40.319
So yeah,
it wouldn't be a simple way to do that.

