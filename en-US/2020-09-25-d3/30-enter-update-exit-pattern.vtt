WEBVTT

1
00:00:00.000 --> 00:00:02.970
We just finished creating our flowers.

2
00:00:02.970 --> 00:00:08.479
And now we want to add
in this functionality

3
00:00:08.479 --> 00:00:14.298
of filtering these flowers, these movies.

4
00:00:14.298 --> 00:00:18.303
So we want to be able to filter by
the genre or parental guidance rating.

5
00:00:18.303 --> 00:00:22.720
So let's build up to the point
that we can do that together.

6
00:00:24.800 --> 00:00:29.680
So in this lesson,
we're going to learn how to not only

7
00:00:29.680 --> 00:00:35.090
create DOM elements from scratch based on
the data, but what if our data changes and

8
00:00:35.090 --> 00:00:40.130
updates and
we want the DOM to update to match that.

9
00:00:40.130 --> 00:00:44.978
So let's take a look at our
simple bar chart again.

10
00:00:44.978 --> 00:00:47.325
Here's the current data we have.

11
00:00:47.325 --> 00:00:52.574
And let's say that this is already

12
00:00:52.574 --> 00:00:56.741
being rendered to the DOM.

13
00:00:56.741 --> 00:01:02.100
And it's already being bound to
the five rectangles in the SVG.

14
00:01:02.100 --> 00:01:06.242
And let's say this is
the new data that we want

15
00:01:06.242 --> 00:01:10.500
to update to inthis kind
of a rray of integers.

16
00:01:12.400 --> 00:01:16.790
And so this is where you might have
heard of this before the enter update

17
00:01:16.790 --> 00:01:18.070
exit pattern.

18
00:01:18.070 --> 00:01:21.586
And this is where that pattern comes in.

19
00:01:21.586 --> 00:01:26.262
And so the very first thing that we
need to do is actually the .data

20
00:01:26.262 --> 00:01:27.545
function again.

21
00:01:27.545 --> 00:01:32.719
The .data is really powerful
because it not only binds our data

22
00:01:32.719 --> 00:01:38.480
to our selection and also calculates
our enter selection for us.

23
00:01:38.480 --> 00:01:42.790
It also calculates our update and
exit selection as well.

24
00:01:42.790 --> 00:01:47.710
And to help with that, we'll oftentimes
use this thing called a key function.

25
00:01:49.180 --> 00:01:56.171
So, previously, we had our svg and
we've selected all of our rectangles.

26
00:01:56.171 --> 00:02:01.954
And actually now what we have
in our svg is these five

27
00:02:01.954 --> 00:02:08.460
rectangles with all of our
previous data bound to it.

28
00:02:08.460 --> 00:02:12.190
So this part should return,
this .selectAll rectangles

29
00:02:12.190 --> 00:02:16.460
should return a selection of
these five rectangle elements.

30
00:02:16.460 --> 00:02:20.911
And we'll call .data on that and
you can see, like before,

31
00:02:20.911 --> 00:02:23.278
we'll pass in an array of data.

32
00:02:23.278 --> 00:02:28.929
So we'll pass in that new
data of the eight integers.

33
00:02:28.929 --> 00:02:34.231
And then the new thing that
we're learning is this part,

34
00:02:34.231 --> 00:02:37.510
this thing called a key function.

35
00:02:37.510 --> 00:02:43.107
And what a key function is that is,
we tell D3 what to

36
00:02:43.107 --> 00:02:48.196
access in the bound data
to control which data,

37
00:02:48.196 --> 00:02:56.101
so which of these new data is assigned
to which elements in the selection.

38
00:02:56.101 --> 00:03:00.870
And I wanna make a note that currently
this example that we're showing is

39
00:03:00.870 --> 00:03:05.560
quite trivial because we're using
just the boundary integer on each of

40
00:03:05.560 --> 00:03:07.450
these rectangle elements.

41
00:03:07.450 --> 00:03:13.110
But usually in the charts or
virtualizations that we might make,

42
00:03:14.130 --> 00:03:20.310
usually we'll be passing in and binding
an object to each of our DOM elements.

43
00:03:20.310 --> 00:03:23.590
And them in that object,
we'll you usually have a unique ID.

44
00:03:23.590 --> 00:03:27.920
And that unique ID is what we should
be returning in our key function so

45
00:03:27.920 --> 00:03:31.680
that D3 knows how to match up
the new data with our DOM.

46
00:03:33.790 --> 00:03:39.990
Let's take a look at what .data is
actually doing for us underneath the hood.

47
00:03:39.990 --> 00:03:44.970
So with the key function,
now D3 can calculate our exit,

48
00:03:44.970 --> 00:03:47.410
update, and enter selections.

49
00:03:47.410 --> 00:03:55.730
And so the way that it does that is first,
actually yeah,

50
00:03:55.730 --> 00:04:02.990
so the first way that it
calculates the update selection

51
00:04:04.350 --> 00:04:08.750
is that it takes a look
at the new dataset.

52
00:04:08.750 --> 00:04:14.292
And it takes a look at our
rectangle elements and it says,

53
00:04:14.292 --> 00:04:19.634
hey, 84 and 45 is already in
our DOM in the rectangles.

54
00:04:19.634 --> 00:04:21.910
And it's in the new data set too.

55
00:04:21.910 --> 00:04:25.140
So we're going to call
that the update selection.

56
00:04:25.140 --> 00:04:30.510
So those are the two rectangle
elements that match the new data.

57
00:04:30.510 --> 00:04:34.660
So they'll remain on the screen and
that's the update selection.

58
00:04:37.590 --> 00:04:39.692
It will also calculate the exit selection.

59
00:04:39.692 --> 00:04:46.220
And so those are the three currently
existing three rectangle elements.

60
00:04:46.220 --> 00:04:53.938
So these three that have datum
bound not in the new data array,

61
00:04:53.938 --> 00:04:58.404
so we must remove them from the DOM.

62
00:05:00.782 --> 00:05:03.570
And finally, we have the enter selection.

63
00:05:03.570 --> 00:05:08.726
And the enter selection is D3
takes a look at the new data and

64
00:05:08.726 --> 00:05:12.749
it sees these six data
elements that are new and

65
00:05:12.749 --> 00:05:16.272
not currently existing in the DOM here.

66
00:05:16.272 --> 00:05:20.244
So it makes a note that
it needs to be created.

67
00:05:22.510 --> 00:05:27.796
And just a little bit of
a small note that if we haven't

68
00:05:27.796 --> 00:05:32.847
provided a key function,
D3 actually defaults to

69
00:05:32.847 --> 00:05:38.271
using the integer of our data
array as the key instead.

70
00:05:41.403 --> 00:05:46.923
So here's what the D3 selection
looks like with the new data bound.

71
00:05:46.923 --> 00:05:49.070
I also find this one really interesting.

72
00:05:49.070 --> 00:05:55.140
So first of all, _groups which is what
we've been looking at all along and

73
00:05:55.140 --> 00:06:02.940
it is kind of what the selection is.

74
00:06:02.940 --> 00:06:06.950
In this case, when .data returns it,

75
00:06:06.950 --> 00:06:11.577
_groups represents our update selection.

76
00:06:11.577 --> 00:06:16.909
And if you open that up,
you can see that it is consisting

77
00:06:16.909 --> 00:06:22.253
of three empty slots and
two of the rectangle elements.

78
00:06:22.253 --> 00:06:29.244
And those two rectangle
elements are the ones 84 and

79
00:06:29.244 --> 00:06:34.582
45 that also exist in the new data.

80
00:06:34.582 --> 00:06:41.631
So .data keeps track of
the update selection in this way.

81
00:06:41.631 --> 00:06:48.557
And then if we take a look at the exit
selection, you can see that it is,

82
00:06:52.724 --> 00:06:57.802
The other three of our rectangles

83
00:06:57.802 --> 00:07:02.884
that aren't in the new data set.

84
00:07:02.884 --> 00:07:04.124
And it's very interesting.

85
00:07:04.124 --> 00:07:08.837
I think it's really interesting
how they keep track of it.

86
00:07:08.837 --> 00:07:13.808
And finally, for the intersection,
here is the enter selection.

87
00:07:13.808 --> 00:07:18.956
And it's very similar to what we
saw before where we have these

88
00:07:18.956 --> 00:07:24.055
place holder elements for
each of the new data elements.

89
00:07:24.055 --> 00:07:29.739
And then where these
two existing rectangle

90
00:07:29.739 --> 00:07:34.197
elements should go remain empty.

91
00:07:34.197 --> 00:07:39.521
And actually it is the update
selection already puts

92
00:07:39.521 --> 00:07:45.459
our existing elements in
the order that they should go in.

93
00:07:45.459 --> 00:07:50.345
So you can see thatit already says
there's two empty at the beginning,

94
00:07:50.345 --> 00:07:55.490
because there's two placeholder items
elements that need to be created.

95
00:07:55.490 --> 00:08:00.502
Then it's the current
existing element empty,

96
00:08:00.502 --> 00:08:04.120
and then it kinda maps that way.

97
00:08:04.120 --> 00:08:09.922
So by the time .data returns this,
we've actually also reordered

98
00:08:09.922 --> 00:08:15.641
the existing DOM elements to match
the order of the new data array.

99
00:08:15.641 --> 00:08:21.023
Because if you noticed
in the update selection,

100
00:08:21.023 --> 00:08:25.618
45 and 84 were at different places and

101
00:08:25.618 --> 00:08:32.327
then they've kind of switched
around in the new data array.

