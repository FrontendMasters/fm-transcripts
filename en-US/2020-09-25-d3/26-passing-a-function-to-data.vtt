WEBVTT

1
00:00:00.221 --> 00:00:04.882
And so here, the next part is what I
think is the most interesting part.

2
00:00:04.882 --> 00:00:08.600
And this is what we call
a nested selection in D3.

3
00:00:09.680 --> 00:00:14.404
And so, for each film flower,
we have a different number of

4
00:00:14.404 --> 00:00:19.050
petal path elements depending
on the data for that movie.

5
00:00:19.050 --> 00:00:25.309
So to be able to dynamically create
the correct number of path elements,

6
00:00:25.309 --> 00:00:31.590
we use the same select all data
enter append pattern as before.

7
00:00:31.590 --> 00:00:33.172
So this is what it looks like.

8
00:00:33.172 --> 00:00:39.270
We again have our group selection up here.

9
00:00:39.270 --> 00:00:44.041
And we say, take that selection
of groups and within each group,

10
00:00:44.041 --> 00:00:48.314
we want to select all the paths
with that don't yet exist.

11
00:00:48.314 --> 00:00:54.450
We are going to bind data to that
empty selection of paths and

12
00:00:54.450 --> 00:01:00.343
we are going to create the correct
number of path elements

13
00:01:00.343 --> 00:01:07.483
with the correct data bound depending
on whatever we return in here.

14
00:01:07.483 --> 00:01:12.418
So, what goes inside in this data binding

15
00:01:12.418 --> 00:01:17.782
part is what I think is
the most interesting.

16
00:01:17.782 --> 00:01:25.040
So it turns out the .data function also
accepts functions, not just arrays.

17
00:01:25.040 --> 00:01:30.210
And so the key is to write a function
that returns an array of objects.

18
00:01:30.210 --> 00:01:34.638
Because remember again,
at the end of the day,

19
00:01:34.638 --> 00:01:39.178
.data needs to have an array
to know how many data

20
00:01:39.178 --> 00:01:43.070
elements to match how many DOM elements.

21
00:01:43.070 --> 00:01:45.050
And so let's take a look at this.

22
00:01:46.560 --> 00:01:54.340
So we have select all paths in our group
elements, which is currently empty.

23
00:01:54.340 --> 00:01:57.570
And then what we're going
to do is we're going to

24
00:02:00.710 --> 00:02:03.260
pass in a function and that function will

25
00:02:04.730 --> 00:02:08.660
be passed in the data that's been
bound on that parent group element.

26
00:02:08.660 --> 00:02:14.580
So you can see that here, we'll pass that
data in, and we can use that data to say,

27
00:02:14.580 --> 00:02:21.290
okay, so this first group element, the
data says the number of petals is five.

28
00:02:21.290 --> 00:02:23.626
So we can say d.numPetals.

29
00:02:23.626 --> 00:02:28.209
And in this _times is a kind of utility

30
00:02:28.209 --> 00:02:33.804
function that I use
really often with Lodash.

31
00:02:33.804 --> 00:02:39.187
And this _times just says,
whatever the number

32
00:02:39.187 --> 00:02:44.840
is passed in here,
create an array of that length.

33
00:02:46.270 --> 00:02:51.108
In this case,
a length of the number of petals and

34
00:02:51.108 --> 00:02:57.954
the array should have whatever is
returned in this second function.

35
00:02:57.954 --> 00:03:03.344
And so for example, in the first

36
00:03:03.344 --> 00:03:08.334
group with our minions data,

37
00:03:08.334 --> 00:03:16.328
we're going to create
an array of length five.

38
00:03:16.328 --> 00:03:21.670
And within there,
what we want is to be able to say, okay,

39
00:03:21.670 --> 00:03:26.795
so the first petal we want to
rotate at zero degrees, and

40
00:03:26.795 --> 00:03:32.358
then the second petal,
we want to rotate it by 360 degrees

41
00:03:32.358 --> 00:03:37.184
divided by whatever the number
of petals there are.

42
00:03:37.184 --> 00:03:42.623
So then, for example, so that's the index

43
00:03:42.623 --> 00:03:49.532
times 360 degrees divided
by the number of petals and

44
00:03:49.532 --> 00:03:57.470
what that gives us is the first
path will have a rotation of zero,

45
00:03:57.470 --> 00:04:03.062
the second path will
have a rotation of 75.

46
00:04:03.062 --> 00:04:07.296
The third one will have 144, and etc.

47
00:04:07.296 --> 00:04:13.782
And for the second group, the data that's
been bound is the movie inception.

48
00:04:13.782 --> 00:04:17.390
And in that case,
there's a lot more IMDB votes.

49
00:04:17.390 --> 00:04:21.250
So the number of petals that
we calculated was nine.

50
00:04:21.250 --> 00:04:24.933
And so if we invoke this function,

51
00:04:24.933 --> 00:04:28.997
this _times function on inception,

52
00:04:28.997 --> 00:04:33.071
what we get is an array of length nine.

53
00:04:33.071 --> 00:04:37.218
And within it,
is objects that include a rotation,

54
00:04:37.218 --> 00:04:42.970
where the first rotation is zero,
the second rotation is 40 degrees,

55
00:04:42.970 --> 00:04:46.290
the third one is 80 degrees, and so on.

56
00:04:47.420 --> 00:04:51.357
And so this will evaluate again
to the array of objects, and

57
00:04:51.357 --> 00:04:53.730
then we're going to enter append.

58
00:04:53.730 --> 00:04:59.346
So what we end up with
is a set of five paths,

59
00:04:59.346 --> 00:05:05.431
[COUGH] for
minions with the data bound to them.

60
00:05:05.431 --> 00:05:10.733
And for this one, a set of nine
paths with the data bound on them.

61
00:05:13.039 --> 00:05:18.720
So, if we toggle to see
the resulting D3 selection,

62
00:05:18.720 --> 00:05:24.276
I actually think this is
the most interesting part,

63
00:05:24.276 --> 00:05:29.090
which is you can see it's an array of 135.

64
00:05:29.090 --> 00:05:33.301
And so it has 135 movie,
so it's an array of 135.

65
00:05:33.301 --> 00:05:39.462
But within each of that
is an array of five,

66
00:05:39.462 --> 00:05:44.263
array of seven, or array of six.

67
00:05:44.263 --> 00:05:48.677
So the structure it really is kind
of a group parent element, and

68
00:05:48.677 --> 00:05:52.866
then all of the children elements
in this nested structure.

69
00:05:52.866 --> 00:05:58.621
And you can see that we have
the rotation in here as well as,

70
00:05:58.621 --> 00:06:03.092
I kind of copy and
paste over the parent data.

71
00:06:05.911 --> 00:06:10.996
So you can see this one is rotation 72,
and

72
00:06:10.996 --> 00:06:16.633
the actual what I'm
returning within the .data

73
00:06:16.633 --> 00:06:21.930
is the number of times and
I create a copy.

74
00:06:21.930 --> 00:06:25.566
So here what I'm doing is
I have a new object and

75
00:06:25.566 --> 00:06:28.281
I create a copy of the parent data.

76
00:06:28.281 --> 00:06:33.035
And I also add in that rotation
to get the data that's

77
00:06:33.035 --> 00:06:37.587
been bound to each of our
children path elements.

