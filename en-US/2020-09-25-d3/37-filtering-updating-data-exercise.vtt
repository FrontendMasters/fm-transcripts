WEBVTT

1
00:00:00.310 --> 00:00:06.255
Let's go to the final exercise for

2
00:00:06.255 --> 00:00:09.125
this notebook.

3
00:00:09.125 --> 00:00:14.195
So the final exercise is
we are going to actually

4
00:00:14.195 --> 00:00:19.661
think this is pretty cool and
so we are going to write

5
00:00:21.898 --> 00:00:29.801
We're going to update our film flowers
such that when we click on any of these,

6
00:00:29.801 --> 00:00:34.232
and our film flowers
are going to animate and

7
00:00:34.232 --> 00:00:39.530
they're going to update and
animate accordingly.

8
00:00:39.530 --> 00:00:42.590
So actually, you can't quite see
the animation right now because they're so

9
00:00:42.590 --> 00:00:43.580
far down.

10
00:00:43.580 --> 00:00:46.541
So let me bring it up here so
that you can see it.

11
00:00:46.541 --> 00:00:51.851
So as we kind of filter around.

12
00:00:56.163 --> 00:01:00.520
Our film flowers animate in or
animate out.

13
00:01:01.840 --> 00:01:05.255
So we can filter, maybe we only

14
00:01:05.255 --> 00:01:09.880
wanna see the PG 13 films and
then so we filter down by this.

15
00:01:09.880 --> 00:01:14.820
And then, maybe we're only curious
about the action films and

16
00:01:14.820 --> 00:01:17.170
so we filter everything else out.

17
00:01:18.700 --> 00:01:22.680
And that's what it looks like, so

18
00:01:22.680 --> 00:01:28.630
I think hopefully,
it will be quite a fun exercise.

19
00:01:29.910 --> 00:01:35.390
And in terms of like practical
application, I actually think this and

20
00:01:35.390 --> 00:01:40.330
filtering I'm is very much
very kind of practical

21
00:01:40.330 --> 00:01:43.644
in our data visualizations
because that means,

22
00:01:43.644 --> 00:01:48.870
and you probably won't have flowers in
your data visualizations or charts.

23
00:01:48.870 --> 00:01:51.920
And but if you imagine these
as like a line chart or

24
00:01:51.920 --> 00:01:57.520
you would have a scatterplot or
maybe even something more exotic, but

25
00:01:57.520 --> 00:02:03.150
whatever your visualization is being
able to handle these sort of filtering.

26
00:02:04.340 --> 00:02:09.240
Will really help with whatever data
exploration tool you're trying

27
00:02:09.240 --> 00:02:14.110
to provide or maybe some,
whatever story you're trying to tell.

28
00:02:14.110 --> 00:02:17.840
And so

29
00:02:17.840 --> 00:02:24.260
to be able to do this and we're going
to do the exercise in two parts.

30
00:02:24.260 --> 00:02:27.970
The first part being that we're
going to use the new way with join

31
00:02:27.970 --> 00:02:33.100
to update all of our flowers every
time the movies are filtered, and

32
00:02:33.100 --> 00:02:39.280
in the second is that once we have that
will break off into that exercise.

33
00:02:39.280 --> 00:02:44.910
And then we'll come back and
we'll do part two where we add animations.

34
00:02:44.910 --> 00:02:49.957
So that on every update you see
the flowers fading in when they're

35
00:02:49.957 --> 00:02:55.374
entering and moving to their new
positions when they're updating and

36
00:02:55.374 --> 00:02:58.155
fading out if they're an exiting.

37
00:03:00.764 --> 00:03:06.302
And a few notes about some of the things
that are happening within the observable

38
00:03:06.302 --> 00:03:11.592
notebook outside of the scope of the cell
that we're going to be working in,

39
00:03:11.592 --> 00:03:13.740
but important to know.

40
00:03:13.740 --> 00:03:15.160
So let me bring this back.

41
00:03:17.030 --> 00:03:21.140
And so this is the cell we'll be working
in and we'll have our code here.

42
00:03:22.220 --> 00:03:25.150
But I wanted to show you some of
the things that are happening.

43
00:03:25.150 --> 00:03:30.970
So every time we click on
one of these checkboxes,

44
00:03:30.970 --> 00:03:36.680
I have this filter function running and

45
00:03:36.680 --> 00:03:41.750
this one says to only keep the movies that

46
00:03:42.990 --> 00:03:48.260
we have the genres checked for,

47
00:03:48.260 --> 00:03:51.330
and the Parental Guidance Rating
is checked for.

48
00:03:51.330 --> 00:03:54.070
So this is what this
big function is doing.

49
00:03:54.070 --> 00:03:59.993
And I am as of right now with these
filters we have 109 of the movies and

50
00:03:59.993 --> 00:04:00.895
a 135.

51
00:04:00.895 --> 00:04:03.683
If we do that, we have 34 of the movies.

52
00:04:03.683 --> 00:04:11.303
And then here we're saying okay and
then take that set of filtered movies and

53
00:04:11.303 --> 00:04:16.542
run that through our function,
the function that we

54
00:04:16.542 --> 00:04:22.380
created to calculate all of
our flowers using scales.

55
00:04:22.380 --> 00:04:27.208
And so
then we get the corresponding kind of,

56
00:04:27.208 --> 00:04:31.536
array objects for drawing our flowers.

57
00:04:36.420 --> 00:04:43.059
And then finally we're going
to use that filteredFlowers

58
00:04:43.059 --> 00:04:49.420
array in our cell when
we're creating our flowers.

59
00:04:49.420 --> 00:04:54.435
And I'm not sure if I explained this
before, but there's a lot of heavy

60
00:04:54.435 --> 00:04:59.294
lifting that observable is doing for
us to make this filtering work.

61
00:04:59.294 --> 00:05:03.728
And primarily that it is reactive and

62
00:05:03.728 --> 00:05:11.022
in that each of these cells
are dependent on these cells every

63
00:05:11.022 --> 00:05:16.755
time these cells change,
these cells update.

64
00:05:16.755 --> 00:05:21.271
So here for our exercise is also

65
00:05:21.271 --> 00:05:26.656
dependent on the filteredFlowers,

66
00:05:26.656 --> 00:05:35.351
so every time filteredFlowers update and
our cell reruns.

67
00:05:35.351 --> 00:05:40.842
And if anytime this dependency
chain confuses you,

68
00:05:40.842 --> 00:05:44.458
and then you can take a look here and

69
00:05:44.458 --> 00:05:49.448
it shows you the current
cell that you're in and

70
00:05:49.448 --> 00:05:56.580
all of the things that it's
dependent on or is dependent on it.

71
00:05:56.580 --> 00:06:03.480
So I wanted to mention that and
before you get started on the exercise and

72
00:06:03.480 --> 00:06:08.890
because I wanted to put that little
bit into say that if we were to

73
00:06:08.890 --> 00:06:14.306
implement this ourselves, I'm in maybe
like a separate index HTML file.

74
00:06:14.306 --> 00:06:18.190
And it's going to take a little bit
more work to hook it up together and

75
00:06:18.190 --> 00:06:20.700
it's outside of the scope
of this workshop.

76
00:06:20.700 --> 00:06:27.462
And, but because we're in
observable we get to do this.

77
00:06:27.462 --> 00:06:32.511
So, and that I'm mentioning because
at the very end of this workshop,

78
00:06:32.511 --> 00:06:37.899
we'll figure we'll kind of translate
everything that we've been doing in

79
00:06:37.899 --> 00:06:42.948
observable notebooks into an index
HTML file, so that you can see how,

80
00:06:42.948 --> 00:06:47.096
that might work if you want to,
create a web page but that.

81
00:06:47.096 --> 00:06:52.356
And so this is the disclaimer to say that
when we do that, we won't be able to

82
00:06:52.356 --> 00:06:59.280
do kind of this filtering update, and but
we'll do everything up until this point.

83
00:06:59.280 --> 00:07:04.180
&gt;&gt; Since exit and enter correspond
to different rec elements.

84
00:07:04.180 --> 00:07:08.175
Shouldn't the order of
execution the irrelevant?

85
00:07:08.175 --> 00:07:13.175
&gt;&gt; Yes, so,
the order of execution is irrelevant when

86
00:07:13.175 --> 00:07:20.650
it is simply a rectangle elements and
there's nothing nested in there.

87
00:07:20.650 --> 00:07:25.780
But, it was that I had

88
00:07:25.780 --> 00:07:29.860
worked out this logic a long time ago,
and I can't quite remember it anymore.

89
00:07:29.860 --> 00:07:35.080
But I think there's a few edge
cases where the order does matter,

90
00:07:35.080 --> 00:07:38.000
like what gets removed.

91
00:07:39.080 --> 00:07:45.188
And I think that edge case was if
you have like group elements and

92
00:07:45.188 --> 00:07:52.001
then things within those group
elements but I can't quite remember.

93
00:07:52.001 --> 00:07:57.406
And so that one is a gentle suggestion
of having it in that order and

94
00:07:57.406 --> 00:08:00.846
you can certainly do
it in other orders and

95
00:08:00.846 --> 00:08:05.290
I just can't remember exactly
the bugs that come up.

96
00:08:05.290 --> 00:08:10.414
But I do feel like there are bugs I
came up and that's why I have this like,

97
00:08:10.414 --> 00:08:14.279
best practice for
myself because I run into the bugs and

98
00:08:14.279 --> 00:08:18.920
I've wiped the bugs from memory,
but just remember the lesson.

99
00:08:18.920 --> 00:08:22.380
[LAUGH] Yeah so,

100
00:08:22.380 --> 00:08:28.507
that was a great question.

101
00:08:28.507 --> 00:08:33.796
&gt;&gt; Then do you have any advice for
D3 and react?

102
00:08:33.796 --> 00:08:40.927
&gt;&gt; Yes, okay, so I was going to mention
this briefly at the end of our workshop,

103
00:08:40.927 --> 00:08:45.777
but I do have another workshop
on front end masters.

104
00:08:45.777 --> 00:08:52.040
And that is a very gentle introduction
to D3 for react developers.

105
00:08:52.040 --> 00:08:53.780
And for that one, and

106
00:08:53.780 --> 00:08:57.890
we cover there's some overlap
in the materials that we cover.

107
00:08:59.670 --> 00:09:05.920
But I do talk a lot more about how
you can use react and D3 together.

108
00:09:05.920 --> 00:09:10.144
And so the short answer is
check that workshop out and

109
00:09:10.144 --> 00:09:15.810
maybe you can skip around the parts
that we've already covered here.

110
00:09:15.810 --> 00:09:20.963
And but yes, you can definitely
use react and D3 together and

111
00:09:20.963 --> 00:09:28.460
it does fight each other a little bit and
I think I cover that in the workshop also.

112
00:09:28.460 --> 00:09:33.530
And I'll have a little
bit of bonus content for

113
00:09:33.530 --> 00:09:40.750
this workshop at the very end, where I
talk about using Vue and D3 together.

114
00:09:40.750 --> 00:09:45.050
And because I actually haven't
used react with D3, and

115
00:09:45.050 --> 00:09:48.910
like two years,
because I started picking up Vue.

116
00:09:48.910 --> 00:09:54.657
And I find that with Vue it plays

117
00:09:54.657 --> 00:09:59.751
with D3 a lot more nicely.

118
00:09:59.751 --> 00:10:01.761
And it makes much more sense for

119
00:10:01.761 --> 00:10:06.634
the data visualizations I build because
Vue has a lot of the same reactivity

120
00:10:06.634 --> 00:10:11.460
that we've been seeing in these
observable notebooks built in.

121
00:10:11.460 --> 00:10:15.500
So it makes kind of data updates and

122
00:10:15.500 --> 00:10:19.730
user interaction that manipulates
data updates really much simpler.

123
00:10:21.650 --> 00:10:27.880
And I view also treats animations
as a first class citizen and

124
00:10:27.880 --> 00:10:31.740
has a lot of really good built in support
for it which is really important for.

125
00:10:31.740 --> 00:10:36.180
When I'm making visualizations, and
so that's why I tend to prefer Vue.

126
00:10:36.180 --> 00:10:40.140
And again, the disclaimer is that I
haven't used react in about two years.

127
00:10:40.140 --> 00:10:43.578
So maybe there's a lot of things
that have updated since then and

128
00:10:43.578 --> 00:10:47.475
have made it much friendlier to use for
with D3 and data visualization.

