WEBVTT

1
00:00:00.250 --> 00:00:05.230
So let's go on to our next notebook where

2
00:00:05.230 --> 00:00:09.450
we create a, so right now we've
only created five pedals and

3
00:00:09.450 --> 00:00:14.460
the next step we want to make is create
a pedal for each of the 135 movies.

4
00:00:15.570 --> 00:00:20.700
So thus far you might have noticed
that we've been binding our data to

5
00:00:20.700 --> 00:00:24.940
existing DOM elements and
setting attributes and styles on them.

6
00:00:24.940 --> 00:00:28.981
But we can't possibly go around
creating SVG elements for

7
00:00:28.981 --> 00:00:32.037
every single data point
that we might have.

8
00:00:32.037 --> 00:00:36.761
We're now going to copy and paste 135 path

9
00:00:36.761 --> 00:00:41.620
elements into our HTML document or
anything.

10
00:00:42.980 --> 00:00:47.640
And so here's how we're going
to go about it with d3 instead.

11
00:00:47.640 --> 00:00:52.570
So let's go back to our kind of simple
data or simple bar chart that we

12
00:00:52.570 --> 00:00:57.510
have before and
we have the same array of five numbers.

13
00:00:59.080 --> 00:01:03.688
And we also have our SVG element with,

14
00:01:03.688 --> 00:01:07.040
rectangle width,

15
00:01:07.040 --> 00:01:12.320
the width is set the same way and
our height and

16
00:01:12.320 --> 00:01:17.630
the difference is that now we don't have
our five rectangle elements anymore.

17
00:01:17.630 --> 00:01:23.916
But, with this code,
we're rendering the same exact thing.

18
00:01:23.916 --> 00:01:26.544
So how are we doing that?

19
00:01:26.544 --> 00:01:27.570
Let's take a look.

20
00:01:31.801 --> 00:01:39.145
So, here are the magic lines it
is select all the rectangles,

21
00:01:39.145 --> 00:01:44.110
bind data.enter.append rectangles.

22
00:01:44.110 --> 00:01:46.830
And let's break down those lines together.

23
00:01:46.830 --> 00:01:53.370
So let's first take a look at select all
rectangles and we have this empty SVG.

24
00:01:53.370 --> 00:01:59.250
So if there are no rectangles
elements in the SVG.

25
00:01:59.250 --> 00:02:01.060
What are we even selecting?

26
00:02:01.060 --> 00:02:03.420
And the answer is it's an empty selection.

27
00:02:05.130 --> 00:02:09.599
So, then we might wonder,
how are those bars appearing?

28
00:02:13.422 --> 00:02:17.198
And the way that they're appearing is,

29
00:02:17.198 --> 00:02:21.610
first that we're again, binding data.

30
00:02:21.610 --> 00:02:26.810
In this case, we are binding

31
00:02:26.810 --> 00:02:32.010
our array of five numbers to this
empty selection of rectangles.

32
00:02:32.010 --> 00:02:38.370
And so what d3 is doing in this .data
function is that it's going ahead and

33
00:02:38.370 --> 00:02:45.880
calculating and figuring out that to

34
00:02:45.880 --> 00:02:51.125
match our data,
we need to create five rectangle elements.

35
00:02:51.125 --> 00:02:55.595
So that's the first thing that d3 does,
it says, for our data and

36
00:02:55.595 --> 00:02:59.885
our DOM to sync up,
we need to create five rectangle elements.

37
00:03:03.265 --> 00:03:10.440
And so this is what d3 returns .data,
you can see that there is the groups

38
00:03:12.210 --> 00:03:17.850
that we've been looking at as before.

39
00:03:17.850 --> 00:03:23.070
But interestingly enough
it is an empty selection.

40
00:03:24.170 --> 00:03:29.135
So it says empty x 5 and if we look now

41
00:03:29.135 --> 00:03:34.480
at this thing that's called _enter,
and it actually has

42
00:03:34.480 --> 00:03:40.310
these five elements within it.

43
00:03:44.110 --> 00:03:49.620
So what happens next is we call .enter and
what .enter does

44
00:03:49.620 --> 00:03:56.190
is it basically just gonna plugs out
this array of the five, essentially

45
00:03:57.420 --> 00:04:03.020
placeholder elements and these placeholder
elements, they're not DOM elements yet.

46
00:04:03.020 --> 00:04:08.186
They're just placeholders but
they do you have the data bound on them.

47
00:04:08.186 --> 00:04:13.321
And so .enter just says, okay,
let me just get that we call

48
00:04:13.321 --> 00:04:19.710
this the enter selection all of
the elements that need to be created.

49
00:04:19.710 --> 00:04:21.080
We call this the enter selection.

50
00:04:21.080 --> 00:04:25.766
So let me get that array of all
the placeholders put that out, and

51
00:04:25.766 --> 00:04:28.790
that's what .enter returns.

52
00:04:28.790 --> 00:04:34.160
So what's happening is,
.enter is basically this

53
00:04:34.160 --> 00:04:39.690
five rectangle placeholders with
the data already bound on them.

54
00:04:41.770 --> 00:04:48.080
So this is what .enter returns and
if you look up in the _groups,

55
00:04:48.080 --> 00:04:53.245
it's that kind of RT,
the placeholder elements that

56
00:04:53.245 --> 00:04:59.211
we saw earlier in, In here.

57
00:04:59.211 --> 00:05:03.590
And finally, with .append, we're saying,

58
00:05:03.590 --> 00:05:07.968
okay, insert a rectangle
element in the DOM for

59
00:05:07.968 --> 00:05:11.909
each of the placeholders that we have, and

60
00:05:11.909 --> 00:05:19.261
each of these rectangle elements also
have the appropriate data bound on them.

61
00:05:19.261 --> 00:05:21.557
And this is what that looks
like underneath groups.

62
00:05:21.557 --> 00:05:22.987
Finally in the groups,

63
00:05:22.987 --> 00:05:27.000
we have these SVG rectangle elements
with the data already bound.

64
00:05:29.276 --> 00:05:34.601
And so this is one of the first
big I guess key concepts for

65
00:05:34.601 --> 00:05:39.357
d3, this kind of .data, .enter, .append,

66
00:05:39.357 --> 00:05:43.908
where we create DOM
elements based on the data.

67
00:05:43.908 --> 00:05:48.007
I guess this is the the lightning
bolt key concepts,

68
00:05:48.007 --> 00:05:53.688
the first one of the first key concepts,
which is that d3 stands for data

69
00:05:53.688 --> 00:06:00.600
driven documents because we're letting our
data drive what is created in the DOM.

70
00:06:00.600 --> 00:06:07.490
This is if you take nothing away today,
please take this one away.

71
00:06:07.490 --> 00:06:11.810
In d3, we let the data drive
what's created in the DOM.

72
00:06:14.630 --> 00:06:19.770
And some things to look out for again,
like kind of like places where I've had,

73
00:06:19.770 --> 00:06:23.120
bugs come up and confusion come up.

74
00:06:23.120 --> 00:06:28.540
So some key things to look out for
when we're entering and appending.

75
00:06:28.540 --> 00:06:32.940
The first is that data
when we bind the data.

76
00:06:34.960 --> 00:06:38.490
So right here when we bind the data,
the data that we pass in

77
00:06:40.230 --> 00:06:44.800
when we're trying to create these
elements, it must be an array.

78
00:06:44.800 --> 00:06:48.950
It cannot be an object,
it cannot be like a string or an integer.

79
00:06:48.950 --> 00:06:51.140
It must be an array.

80
00:06:51.140 --> 00:06:55.839
And it must be an array because
d3 needs to be able to know like

81
00:06:57.240 --> 00:07:01.320
each element in this array will
get mapped to a DOM element.

82
00:07:01.320 --> 00:07:02.880
So it must be an array.

83
00:07:02.880 --> 00:07:07.661
If it's not an array d3 will like air out.

84
00:07:07.661 --> 00:07:12.453
So thus far we've had the select all

85
00:07:12.453 --> 00:07:16.766
be whatever the SVG element is,

86
00:07:16.766 --> 00:07:25.530
whether it's select all rectangles or
select all paths.

87
00:07:25.530 --> 00:07:31.060
But sometimes you want the selector in
your select all to be something else

88
00:07:31.060 --> 00:07:37.580
because maybe in your DOM you now have
multiple different kinds of paths.

89
00:07:37.580 --> 00:07:39.650
And some paths might
be doing one thing and

90
00:07:39.650 --> 00:07:41.870
another set of paths
might be doing another.

91
00:07:41.870 --> 00:07:47.090
So maybe you want to only
select a subset of these paths.

92
00:07:47.090 --> 00:07:53.880
And so when you want to do that you might
want to select by the paths with like

93
00:07:53.880 --> 00:07:59.810
specific class names or rectangles,
in this case, with the class name bar.

94
00:07:59.810 --> 00:08:05.130
So if you do that, you must make
sure that the selector that you pass

95
00:08:05.130 --> 00:08:10.640
into selectAll matches what gets appended.

96
00:08:10.640 --> 00:08:16.703
So for example, if the selector is a class
name instead of that element tag, and

97
00:08:16.703 --> 00:08:22.043
that class name is bar, then we must
append whatever we still append,

98
00:08:22.043 --> 00:08:26.025
whatever SVG element,
in this case rectangle, but

99
00:08:26.025 --> 00:08:30.212
we must then follow it up
with that .class bar is true.

100
00:08:30.212 --> 00:08:35.099
And this is a d3 function that basically
sets the class name bar on our

101
00:08:35.099 --> 00:08:37.760
newly created rectangle elements.

102
00:08:37.760 --> 00:08:42.660
So, please keep these
two in mind cuz I think

103
00:08:42.660 --> 00:08:47.400
these two are also places
where people might see bugs.

104
00:08:47.400 --> 00:08:48.900
So very important.

