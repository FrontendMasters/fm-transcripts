WEBVTT

1
00:00:00.518 --> 00:00:06.266
And so finally, what I want to
talk to you about is D3 force.

2
00:00:06.266 --> 00:00:11.699
So the D3 force layout is
a slight bit different from

3
00:00:11.699 --> 00:00:17.255
what we had talked through
just now with the shapes and

4
00:00:17.255 --> 00:00:20.837
hierarchies in that it's, one,

5
00:00:20.837 --> 00:00:25.672
it directly mutates
the original data array.

6
00:00:25.672 --> 00:00:28.436
And you'll see in a little bit why.

7
00:00:28.436 --> 00:00:35.660
And also, that it requires upwards
of thousands of calculations

8
00:00:35.660 --> 00:00:42.530
to arrive at its final position, instead

9
00:00:42.530 --> 00:00:47.050
of just that one single calculation
that we saw with the shape in hierarchy.

10
00:00:48.570 --> 00:00:51.800
But it's probably one of my
most favorite layout modules,

11
00:00:51.800 --> 00:00:56.740
my favorite layout tool,
because of how powerful it is.

12
00:00:56.740 --> 00:01:02.930
It's most traditionally used
to calculate positions for

13
00:01:02.930 --> 00:01:07.450
a node and link graph, but
because of all of the different

14
00:01:12.040 --> 00:01:13.080
functionality it has,

15
00:01:13.080 --> 00:01:18.290
you can actually get quite creative
with how you apply the force layout.

16
00:01:18.290 --> 00:01:23.995
So this is actually a very classic example

17
00:01:23.995 --> 00:01:30.841
of a D3 force layout, and
the dataset is Les Mis,

18
00:01:30.841 --> 00:01:35.568
and each of these are characters,

19
00:01:35.568 --> 00:01:40.621
each of these nodes are characters in

20
00:01:40.621 --> 00:01:45.683
the play or musical and school play.

21
00:01:45.683 --> 00:01:51.939
And then each of the links
are the characters' co-occurrence

22
00:01:51.939 --> 00:01:57.142
with each other, and
I believe after each chapter.

23
00:01:57.142 --> 00:02:02.515
And I think they're colored by the family.

24
00:02:02.515 --> 00:02:07.320
What you can see is that with the nodes,

25
00:02:07.320 --> 00:02:11.890
the first layout asks for
an array of nodes.

26
00:02:12.950 --> 00:02:15.490
And so this is with ID.

27
00:02:15.490 --> 00:02:18.355
And these objects have just the ID,

28
00:02:18.355 --> 00:02:22.470
which is their name, and
the group they belong to.

29
00:02:22.470 --> 00:02:26.670
And optionally, the force layout asks for
an array of links.

30
00:02:27.962 --> 00:02:35.970
And so in the array of links,
it says the source, and

31
00:02:35.970 --> 00:02:41.510
that source ties directly back to
the ID attribute in the nodes.

32
00:02:41.510 --> 00:02:47.130
And target similarly ties directly
back to the ID element and some value.

33
00:02:48.750 --> 00:02:51.780
And so the way that we use
the force layout is we say,

34
00:02:53.400 --> 00:02:57.169
this is the relevant piece of
code from that Les Mis example.

35
00:02:58.470 --> 00:03:03.970
Which is that we create force
simulation and pass in our nodes,

36
00:03:03.970 --> 00:03:08.185
and we say,
the first force that I want to apply.

37
00:03:08.185 --> 00:03:12.595
Actually, I don't think
it matters as much,

38
00:03:12.595 --> 00:03:16.740
the order for these forces.

39
00:03:20.380 --> 00:03:24.190
And if it does matter,

40
00:03:24.190 --> 00:03:29.542
I haven't quite noticed that big of
a difference in how to order them.

41
00:03:29.542 --> 00:03:33.782
But certainly, if things are not
turning out the way you expect,

42
00:03:33.782 --> 00:03:36.493
just try moving them around a little bit.

43
00:03:36.493 --> 00:03:41.946
But to my knowledge,
from all of my experience,

44
00:03:41.946 --> 00:03:50.600
I don't think the order of the forces
that you specify in this chain matters.

45
00:03:51.780 --> 00:03:54.527
And I'm saying that take that with
a grain of salt, please [LAUGH].

46
00:03:54.527 --> 00:03:59.010
But anyways,
we're saying that we want to first apply

47
00:03:59.010 --> 00:04:02.990
a force of link and
we're passing our array of links.

48
00:04:02.990 --> 00:04:07.070
And we're telling D3 that
in this array of links,

49
00:04:07.070 --> 00:04:12.089
the way that it maps to our nodes is
through this ID attribute in our nodes.

50
00:04:13.400 --> 00:04:18.408
And alternatively, if you pass in
an array of links that already

51
00:04:18.408 --> 00:04:24.173
directly references the nodes,
then you don't have to specify this ID.

52
00:04:24.173 --> 00:04:26.050
And you'll see that in our example below.

53
00:04:28.375 --> 00:04:36.181
So then we can say we want to put
some charge in this particular force.

54
00:04:36.181 --> 00:04:38.001
Charge is called forceManyBody.

55
00:04:38.001 --> 00:04:43.623
The way that I think about
forceManyBody is you can either,

56
00:04:43.623 --> 00:04:48.260
I think it defaults to
a negative 30 strength.

57
00:04:48.260 --> 00:04:51.762
And so a negative value for

58
00:04:51.762 --> 00:04:58.440
forceManyBody makes each of
the nodes repel from each other,

59
00:04:58.440 --> 00:05:03.280
and if you specify a positive charge,
it attracts the nodes to each other.

60
00:05:03.280 --> 00:05:07.337
So I think of forceManyBody
as like planets or

61
00:05:07.337 --> 00:05:10.769
like stars or just like the universe.

62
00:05:10.769 --> 00:05:14.809
And then I just think of
it like the planets, and

63
00:05:14.809 --> 00:05:21.274
the closer they get to each other,
the more, I think, attracted they are,

64
00:05:21.274 --> 00:05:26.949
and the farther apart they are,
the weaker the attractive force.

65
00:05:26.949 --> 00:05:32.010
And that's how I think of forceManyBody
and how it's been implemented.

66
00:05:33.290 --> 00:05:38.628
But for what we need,
you can just remember it as by default,

67
00:05:38.628 --> 00:05:44.293
it's a negative charge that repels
nodes away from each other.

68
00:05:44.293 --> 00:05:48.318
And then it has this force that just says,

69
00:05:48.318 --> 00:05:53.940
we want each of our nodes to
be attracted to the center.

70
00:05:53.940 --> 00:06:00.467
And this is only a subset of the forces
that are available with D3 force,

71
00:06:00.467 --> 00:06:05.823
and you can see the rest of it
in the force module reference.

72
00:06:05.823 --> 00:06:10.440
And you can actually also write your
own force, your own custom force.

73
00:06:10.440 --> 00:06:17.920
So I think they detail how to do
that in the module reference also.

74
00:06:17.920 --> 00:06:20.780
And finally, the most important part is

75
00:06:24.430 --> 00:06:29.010
being able to update the node and
link positions on each tick.

76
00:06:29.010 --> 00:06:33.340
So what does all of this mean, and
what is D3 doing underneath the hood?

77
00:06:35.090 --> 00:06:41.090
So what it's doing is once it's
passed the array of nodes and links,

78
00:06:41.090 --> 00:06:47.830
it first goes and assigns a random
x,y position to each of those nodes.

79
00:06:47.830 --> 00:06:50.950
Then it loops through
each of the nodes and

80
00:06:50.950 --> 00:06:55.340
applies the series of forces
that we specified up here.

81
00:06:56.700 --> 00:06:57.660
There's three of them here.

82
00:06:57.660 --> 00:06:59.850
You can have more or less.

83
00:06:59.850 --> 00:07:03.580
And we apply the series of forces so

84
00:07:03.580 --> 00:07:09.130
that with attractive forces, the nodes
pull together, pull towards each other.

85
00:07:10.300 --> 00:07:15.390
So it actually kinda loops
through each node, and

86
00:07:15.390 --> 00:07:20.842
it then loops through all of
the other nodes close by,

87
00:07:20.842 --> 00:07:26.431
and then it applies the force
on that particular node.

88
00:07:26.431 --> 00:07:32.350
And so the most common attractive
force is when nodes are linked.

89
00:07:32.350 --> 00:07:36.488
And so that will make them get
positioned closer to each other,

90
00:07:36.488 --> 00:07:38.453
nudged closer to each other.

91
00:07:38.453 --> 00:07:44.300
Negative forces are those that push
the nodes apart to avoid overlap.

92
00:07:44.300 --> 00:07:47.861
And so that's what I had mentioned
earlier with the negative charge.

93
00:07:47.861 --> 00:07:55.490
Or there is another force called
collision that also helps with that.

94
00:07:56.740 --> 00:08:01.925
And all of these forces are applied
to each individual node, and

95
00:08:01.925 --> 00:08:06.917
nudges them, slightly nudges
the x,y positions slightly,

96
00:08:06.917 --> 00:08:10.964
and it loops through each
of the nodes doing that.

97
00:08:10.964 --> 00:08:18.411
And this series of calculations happen
in what D3 calls one tick and each tick.

98
00:08:18.411 --> 00:08:23.093
And D3 underneath the hood runs
thousands of ticks until all of

99
00:08:23.093 --> 00:08:28.236
the nodes are nudged to their quote,
unquote, optimal positions.

100
00:08:28.236 --> 00:08:32.669
And there's some other
settings you can toggle and

101
00:08:32.669 --> 00:08:38.647
play with with the force layout that
we won't really go into in here,

102
00:08:38.647 --> 00:08:43.800
but will kind of help you get
closer to the quote, unquote,

103
00:08:43.800 --> 00:08:49.187
optimal layout, and
that you can also read in the reference.

104
00:08:52.873 --> 00:08:58.141
And finally, to use the calculated
node and link positions,

105
00:08:58.141 --> 00:09:03.510
we update the corresponding DOM
elements either on each tick,

106
00:09:03.510 --> 00:09:08.876
so we do that in .on tick, or
on the whole simulation ending and

107
00:09:08.876 --> 00:09:12.958
we have that be a callback
function on .on end.

108
00:09:12.958 --> 00:09:17.667
And so this is what I mentioned
earlier about the force

109
00:09:17.667 --> 00:09:22.586
layout is a little bit different,
because not only does

110
00:09:22.586 --> 00:09:26.876
it calculate the positions
thousands of times,

111
00:09:26.876 --> 00:09:30.873
it also mutates
the original data directly.

112
00:09:30.873 --> 00:09:34.867
Because it takes the original
data set you passed in,

113
00:09:34.867 --> 00:09:39.656
and then on each tick, it mutates it,
and then on the next tick,

114
00:09:39.656 --> 00:09:45.470
it uses that mutated one as reference and
then calculates new positions.

115
00:09:45.470 --> 00:09:51.580
And then our next tick uses those
positions, calculates new positions, and

116
00:09:51.580 --> 00:09:57.600
it kinda goes in that series of ticks.

117
00:09:57.600 --> 00:10:03.180
And that's why it mutates
the data array directly.

