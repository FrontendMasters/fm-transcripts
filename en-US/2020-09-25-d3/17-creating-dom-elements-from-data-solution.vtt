WEBVTT

1
00:00:00.510 --> 00:00:03.700
Let's do this exercise together.

2
00:00:03.700 --> 00:00:06.890
Hopefully you're able
to make some headway.

3
00:00:06.890 --> 00:00:09.830
But before we get started
on this exercise,

4
00:00:09.830 --> 00:00:14.650
I wanted to address two questions,
one from the classroom and one from chat.

5
00:00:14.650 --> 00:00:17.920
And the first question
was actually about this

6
00:00:19.290 --> 00:00:22.650
rule about the data
passing must be an array.

7
00:00:22.650 --> 00:00:25.480
So the question was,

8
00:00:25.480 --> 00:00:31.310
within the array does it matter what's
in the array, can it be text or?

9
00:00:31.310 --> 00:00:35.110
And so
the answer is as long as it's an array,

10
00:00:35.110 --> 00:00:38.817
what's inside could be anything you want.

11
00:00:38.817 --> 00:00:41.800
It could be objects, it could be text,
it could be numbers.

12
00:00:42.990 --> 00:00:48.000
As long as it's an array that's wrapping
around it, and then what's going to happen

13
00:00:48.000 --> 00:00:53.150
is that every element in the array is
going to get bound to your DOM element.

14
00:00:53.150 --> 00:00:57.560
So as long as that's what you intend
to get bound to your DOM element,

15
00:00:57.560 --> 00:00:59.230
it should all work fine.

16
00:00:59.230 --> 00:01:04.530
And it just occurred to me an interesting
scenario of, what if you have an array and

17
00:01:04.530 --> 00:01:10.285
some of them are objects and some of them
are text, I think d3 still should work.

18
00:01:10.285 --> 00:01:14.110
It should just bind all
of that no problem.

19
00:01:15.110 --> 00:01:19.940
I wanna know a use case for
that though if you have different types

20
00:01:22.440 --> 00:01:27.260
of data structures in there,
I don't know but, it should be.

21
00:01:27.260 --> 00:01:30.760
I'm sure there's edge cases but
from my experience,

22
00:01:30.760 --> 00:01:34.800
as long as it's an array,
what's inside doesn't matter.

23
00:01:34.800 --> 00:01:40.600
As long as what's inside is what you
intend to get bound to that DOM element.

24
00:01:40.600 --> 00:01:42.500
So that was the first question.

25
00:01:42.500 --> 00:01:46.560
The second question was
about the width and

26
00:01:46.560 --> 00:01:49.560
the height that we're setting on our SVG.

27
00:01:49.560 --> 00:01:54.543
So in the previous example, we kind of
hard coded the width and height setting.

28
00:01:54.543 --> 00:02:00.030
We hard coded it to like 250
pixels wide and 100 pixels tall.

29
00:02:00.030 --> 00:02:03.539
And the question was
about how to dynamically,

30
00:02:03.539 --> 00:02:07.672
if we want to make it responsive
how do we deal with that.

31
00:02:07.672 --> 00:02:12.760
And so I know that Mark had answered and

32
00:02:12.760 --> 00:02:16.110
that we should have it.

33
00:02:16.110 --> 00:02:21.211
So the first step is if we're
trying to make it responsive

34
00:02:21.211 --> 00:02:26.310
on window resize,
then what we want to do is in JavaScript

35
00:02:26.310 --> 00:02:30.902
bind an event listener to
the window resize event.

36
00:02:30.902 --> 00:02:36.004
And then we want to be updating our,
usually we'll have when

37
00:02:36.004 --> 00:02:43.380
we're creating data visualization and
we want the container to be responsive.

38
00:02:43.380 --> 00:02:46.490
We'll have a variable width, or

39
00:02:46.490 --> 00:02:52.330
we'll have a width defined and
then we'll have a height variable defined.

40
00:02:52.330 --> 00:02:57.122
And then within that kind of like resize
callback we'll just update the width and

41
00:02:57.122 --> 00:02:57.692
height.

42
00:02:57.692 --> 00:03:06.560
And then we'll also set that variable
width and height on to the SVG.

43
00:03:06.560 --> 00:03:11.320
And then, depending on what you're trying
to do within the SVG, how you're trying to

44
00:03:11.320 --> 00:03:17.570
position everything, then we can use
these width and height variables to,

45
00:03:21.490 --> 00:03:28.350
we can kind of rerun the position
calculation every time a resize happens.

46
00:03:28.350 --> 00:03:32.632
So I'm just going to kind of show
you really quickly before we get on

47
00:03:32.632 --> 00:03:34.926
with the rest of the exercise code,

48
00:03:34.926 --> 00:03:39.831
kind of that function I mentioned
earlier about calculate a grid position.

49
00:03:39.831 --> 00:03:44.102
So that's a kind of utility
function I created.

50
00:03:48.746 --> 00:03:55.392
And what that function is doing is
taking the index of our element.

51
00:03:55.392 --> 00:04:00.076
And we're just saying that depending on,
and

52
00:04:00.076 --> 00:04:05.481
actually what we're also doing is and
depending on,

53
00:04:05.481 --> 00:04:11.870
I've hard coded in how wide I want
each of our petal paths to be.

54
00:04:11.870 --> 00:04:17.528
And then we're saying depending
on the width of our container,

55
00:04:17.528 --> 00:04:22.344
I want to divide that by
the width of our SVG element, or

56
00:04:22.344 --> 00:04:25.822
sorry, the width of our path element.

57
00:04:25.822 --> 00:04:31.290
And that's how many of the petals
that we'll have per row.

58
00:04:31.290 --> 00:04:32.730
So in this case,

59
00:04:32.730 --> 00:04:37.530
it seems that our container width divided
by our petal width is going to be seven.

60
00:04:37.530 --> 00:04:42.441
And then given that per row number,
I go and

61
00:04:42.441 --> 00:04:47.087
calculate the position for each petal.

62
00:04:47.087 --> 00:04:52.415
And that is the x position is basically

63
00:04:52.415 --> 00:04:56.411
the index modular perRow and

64
00:04:56.411 --> 00:05:02.940
then multiplied by the width of the path.

65
00:05:02.940 --> 00:05:07.760
And the y position is
the index divided by per row.

66
00:05:07.760 --> 00:05:14.060
So it's kind of like which row it's on and
times the size of the path.

67
00:05:14.060 --> 00:05:16.890
And that's how we're kind of
doing the xy positioning.

68
00:05:19.210 --> 00:05:25.060
And that's how we can also potentially
make our SVG container and

69
00:05:25.060 --> 00:05:30.500
also the position of everything
within that SVG dynamic based and

70
00:05:30.500 --> 00:05:32.600
responsive based on window size.

71
00:05:34.330 --> 00:05:41.690
Yeah, so having said that, let's go and
and create all of these petals together.

72
00:05:41.690 --> 00:05:46.870
So what we're gonna do is the very

73
00:05:46.870 --> 00:05:52.420
first thing is we're going to go and

74
00:05:52.420 --> 00:05:56.121
grab or select the SVG.

75
00:05:56.121 --> 00:05:59.826
So d3.select(svg), and

76
00:05:59.826 --> 00:06:05.930
let's then create a path for each movie.

77
00:06:05.930 --> 00:06:12.170
So select all the path right now that
should return an empty selection.

78
00:06:12.170 --> 00:06:15.400
We're going to bind the movies data.

79
00:06:15.400 --> 00:06:21.104
And if you go up and take a look,
the movies is an array of objects.

80
00:06:21.104 --> 00:06:26.624
And then we're going to say,
insert a path element for

81
00:06:26.624 --> 00:06:29.874
each movie in our movies array.

82
00:06:29.874 --> 00:06:37.462
And so if you go and inspect this SVG and
if you go and kind of open it up.

83
00:06:42.272 --> 00:06:46.303
Can never, all right, if you open it up,

84
00:06:46.303 --> 00:06:50.568
then you can see that
a lot of path elements,

85
00:06:50.568 --> 00:06:55.550
specifically 135 of them,
have been created.

86
00:06:55.550 --> 00:07:01.040
And then what we want to do is now
that we have a path for each movie.

87
00:07:01.040 --> 00:07:07.490
We want to basically do the same thing
that we did in the last exercise, which

88
00:07:07.490 --> 00:07:13.620
is we're going to use the data that's been
bound up and set attributes with them.

89
00:07:13.620 --> 00:07:19.772
So let's the first one that we can set
is our define attribute on our path.

90
00:07:19.772 --> 00:07:22.770
And so

91
00:07:22.770 --> 00:07:28.280
we have our lookup is I
think called a path object.

92
00:07:28.280 --> 00:07:32.790
And so what we're gonna do is
we're going to do path object and

93
00:07:32.790 --> 00:07:37.390
we're going to, sorry,
that shouldn't be a string, yes, okay.

94
00:07:37.390 --> 00:07:40.940
So and we're being passed
in the data that's bound.

95
00:07:40.940 --> 00:07:45.501
And in that bound data, we have so
this is our bound data.

96
00:07:45.501 --> 00:07:50.322
In here we have something called rated and
that's our PG rating.

97
00:07:50.322 --> 00:07:55.140
And that's going to determine
our define attribute.

98
00:07:55.140 --> 00:07:56.780
And so let's go back in and do that.

99
00:07:58.630 --> 00:08:03.035
And so that's path object and
we're going to use d.rated.

100
00:08:04.060 --> 00:08:10.100
So if we do that, if we did that
correctly, we should be seeing

101
00:08:11.840 --> 00:08:16.940
some paths.

102
00:08:16.940 --> 00:08:20.263
But we are not, so let's debug that.

103
00:08:20.263 --> 00:08:22.954
That's because I was silly.

104
00:08:22.954 --> 00:08:28.338
So we need to be able to say
that the attribute we're setting

105
00:08:28.338 --> 00:08:33.506
is the d attribute, and
then we're passing in the data,

106
00:08:33.506 --> 00:08:38.692
calling the data that's been bound d,
passing that in.

107
00:08:38.692 --> 00:08:47.290
And then using that to get the d string
that we want, that's there we go.

108
00:08:47.290 --> 00:08:53.670
So there's an all of these petals
are being rendered up here,

109
00:08:53.670 --> 00:08:54.670
overlapping each other.

110
00:08:56.530 --> 00:09:00.310
And obviously, that's not what we want,
we want them in a nice grid.

111
00:09:02.100 --> 00:09:06.050
So we're going to use
an attribute called transform.

112
00:09:07.600 --> 00:09:11.620
And within transform,
we're going to use translate.

113
00:09:12.800 --> 00:09:17.535
So again, let's pass in a function and
that function we

114
00:09:17.535 --> 00:09:22.573
want both the data that's been
bound on that DOM element and

115
00:09:22.573 --> 00:09:26.932
the index of that DOM element or
that path element.

116
00:09:26.932 --> 00:09:32.159
And so in this case,
we're going to use index and

117
00:09:32.159 --> 00:09:37.142
we're going to write a string and
translate.

118
00:09:37.142 --> 00:09:45.720
And in here, we are going to
call calculateGridPosition.

119
00:09:45.720 --> 00:09:47.690
It's the function that
I had shown earlier.

120
00:09:49.550 --> 00:09:57.560
And let's pass in the index for
each of these path elements.

121
00:09:57.560 --> 00:10:05.153
And this right here will
evaluate to an array of x and y.

122
00:10:05.153 --> 00:10:12.034
And so if we pass that in
to those translate string,

123
00:10:12.034 --> 00:10:20.230
it should give us back a string
that looks like translate xy.

124
00:10:20.230 --> 00:10:23.699
So this is what we ultimately want.

125
00:10:23.699 --> 00:10:25.900
And if we go and
evaluate that, there we go.

126
00:10:25.900 --> 00:10:30.752
We have all of our 135 petals in a grid.

127
00:10:30.752 --> 00:10:36.037
&gt;&gt; People in the chat room are asking
if there's a way to fork it and

128
00:10:36.037 --> 00:10:37.647
share the code or?

129
00:10:37.647 --> 00:10:40.521
&gt;&gt; Yes, so I believe if you can see,

130
00:10:40.521 --> 00:10:45.363
that'd be really cool to
see everybody's notebooks.

131
00:10:45.363 --> 00:10:50.044
So you should be able to
if you go up to the top

132
00:10:50.044 --> 00:10:54.605
right next to maybe you'll see publish.

133
00:10:54.605 --> 00:10:59.023
But right up here, you'll see these
three dots and you can click on fork.

134
00:10:59.023 --> 00:11:03.577
And as long as you're signed in, and
you can sign in with your GitHub account,

135
00:11:03.577 --> 00:11:07.460
then you should be able to fork it and
have your own notebook.

136
00:11:07.460 --> 00:11:12.983
The only thing that I'm
not 100% sure about is if

137
00:11:12.983 --> 00:11:19.238
the, currently I'm saving your
petal paths in local storage.

138
00:11:19.238 --> 00:11:22.761
I'm not 100% sure if that
will persist if you fork.

139
00:11:22.761 --> 00:11:27.694
If it does not persist, what you

140
00:11:27.694 --> 00:11:32.627
can do is again go to the workshop

141
00:11:32.627 --> 00:11:37.380
utility notebook down here and

142
00:11:37.380 --> 00:11:41.969
then update I think the path.

143
00:11:41.969 --> 00:11:45.216
So update the, let's see,

144
00:11:49.081 --> 00:11:54.254
Yes, update the petal paths and
with your custom petal.

145
00:11:54.254 --> 00:11:57.498
So, that should be once you've done that,

146
00:11:57.498 --> 00:12:01.889
then it should persist through
the rest of your notebooks.

147
00:12:04.842 --> 00:12:06.401
But hopefully it will just work.

148
00:12:06.401 --> 00:12:08.223
Hopefully the local
storage will just work.

149
00:12:10.185 --> 00:12:15.909
Okay, so
now that we've translated our petals,

150
00:12:15.909 --> 00:12:20.272
and we've also defined our string for

151
00:12:20.272 --> 00:12:24.600
what each petal should look like.

152
00:12:24.600 --> 00:12:27.570
Let's go ahead and color that again.

153
00:12:27.570 --> 00:12:34.790
And we'll do this quickly together
again just so repetition I think helps.

154
00:12:34.790 --> 00:12:38.580
But if you don't want to, you can just
copy it over from the previous notebook.

155
00:12:38.580 --> 00:12:44.170
So let's go and use the color object and

156
00:12:44.170 --> 00:12:49.050
use the first genre as lookup or
if that doesn't exist,

157
00:12:49.050 --> 00:12:54.890
then we can just use the other color and
color object.

158
00:12:54.890 --> 00:12:59.508
Same thing for stroke, so
I'm just gonna copy that over.

159
00:13:03.254 --> 00:13:04.780
And there we go.

160
00:13:04.780 --> 00:13:10.303
We have all of our paths colored now.

161
00:13:10.303 --> 00:13:16.734
Then let's just go in and
put in a fill opacity for fun.

162
00:13:16.734 --> 00:13:22.562
And we'll put in a stroke width,
you can do whatever stroke width you want.

163
00:13:22.562 --> 00:13:27.926
I'm gonna do 2 and there we go.

164
00:13:27.926 --> 00:13:32.872
So this is our, now we have a petal for

165
00:13:32.872 --> 00:13:36.551
each of the 135 movies.

