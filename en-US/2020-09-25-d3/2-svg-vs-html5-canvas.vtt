WEBVTT

1
00:00:00.150 --> 00:00:03.225
So we have our first lesson,
and the goal for

2
00:00:03.225 --> 00:00:06.813
this lesson is to draw
a flower petal on the screen.

3
00:00:06.813 --> 00:00:11.719
So, in the browser, we have two main
web technologies to draw shapes

4
00:00:11.719 --> 00:00:16.719
onto the screen and thus to be able
to create our data visualizations.

5
00:00:16.719 --> 00:00:20.860
And the two are SVG and HTML5 Canvas.

6
00:00:22.900 --> 00:00:24.980
Today, we're going to be using SVG.

7
00:00:24.980 --> 00:00:30.530
But I want to give kind of a really quick
overview of these two technologies and

8
00:00:30.530 --> 00:00:32.810
why you might choose one over the other.

9
00:00:32.810 --> 00:00:39.640
And so with SVG or scalar vector graphics,
it is an XML syntax.

10
00:00:39.640 --> 00:00:44.590
So it's kind of you work with it very
similarly to how you might already

11
00:00:44.590 --> 00:00:46.040
be working in HTML.

12
00:00:47.480 --> 00:00:51.567
So each shape,
each rectangle, each circle,

13
00:00:51.567 --> 00:00:57.593
each path is a DOM element that you
can kind of set attributes on style or

14
00:00:57.593 --> 00:01:02.106
interact with,
very similarly to an HTML element.

15
00:01:02.106 --> 00:01:07.584
And there's really sound
differences in syntax.

16
00:01:07.584 --> 00:01:12.142
And sometimes, it's the subtle
differences always gets me,

17
00:01:12.142 --> 00:01:17.044
so then I get tiny bugs when I go from
SVG to HTML, cuz the attribute is

18
00:01:17.044 --> 00:01:22.080
called the same thing but
then the syntax is slightly different.

19
00:01:22.080 --> 00:01:26.970
So just watch out for those and
pay attention to the SVG docs.

20
00:01:26.970 --> 00:01:32.200
I always use MDN,
Mozilla Developer Network,

21
00:01:32.200 --> 00:01:35.180
and just pay attention to those syntax.

22
00:01:35.180 --> 00:01:40.150
But the reason why we're using SVG today
is because it's so similar to HTML.

23
00:01:40.150 --> 00:01:45.255
So I think it's going
to be hopefully natural

24
00:01:45.255 --> 00:01:53.463
flow from what you might be already
doing in the web to using SVG with D3.

25
00:01:53.463 --> 00:01:58.578
And so, the Pro 2 SVG, like I mentioned,
is that it's easier to

26
00:01:58.578 --> 00:02:03.512
get started and interact with
because each shape is a element.

27
00:02:03.512 --> 00:02:07.210
You can bind event listeners onto them.

28
00:02:07.210 --> 00:02:10.671
The con is that it's not very
performant at large scale.

29
00:02:10.671 --> 00:02:17.063
So from my personal experience with SVG,
I've had issues.

30
00:02:17.063 --> 00:02:21.207
I guess this was a few years ago though,
so I'm sure laptops or

31
00:02:21.207 --> 00:02:24.329
computers have gotten
slightly a bit better.

32
00:02:24.329 --> 00:02:30.417
But I think it's still good rule of thumb,
which is that with SVG,

33
00:02:30.417 --> 00:02:37.713
I've had trouble rendering maybe two or
3000 SVG elements in the browser.

34
00:02:37.713 --> 00:02:42.180
So anything above that,
I wouldn't use SVG for.

35
00:02:42.180 --> 00:02:47.300
And any time I'm trying to
animate more than 1,000 elements,

36
00:02:47.300 --> 00:02:50.628
I definitely would not be using SVG.

37
00:02:50.628 --> 00:02:55.630
And those seem really big numbers for
the DOM, but when you have

38
00:02:55.630 --> 00:03:01.660
datasets with thousands of rows or tens of
thousands of rows, or millions of rows,

39
00:03:01.660 --> 00:03:06.920
that's actually not that big of a number,
right, for data visualization.

40
00:03:06.920 --> 00:03:09.674
So that's one thing to look out for.

41
00:03:09.674 --> 00:03:14.712
And the reason why it's not performant
of those large scales is because,

42
00:03:14.712 --> 00:03:19.992
as you can probably imagine, if the DOM
has to keep track of thousands of these

43
00:03:19.992 --> 00:03:25.130
elements and be updating, be able to
update them at the individual level.

44
00:03:25.130 --> 00:03:29.753
And potentially have to animate
them by updating the attributes or

45
00:03:29.753 --> 00:03:31.990
styles on them really quickly.

46
00:03:31.990 --> 00:03:38.810
You can probably imagine how
computationally intensive it would get.

47
00:03:38.810 --> 00:03:43.880
So on the other side is HTML5 Canvas.

48
00:03:43.880 --> 00:03:48.922
It is instead of being kind
of like a DOM XML syntax,

49
00:03:48.922 --> 00:03:55.140
or a DOM element, it's instead
one Canvas element in the DOM,

50
00:03:55.140 --> 00:03:59.268
and we draw shapes with a JavaScript API.

51
00:03:59.268 --> 00:04:05.443
So we'll have kind of these
lines that will say, a Canvas,

52
00:04:05.443 --> 00:04:11.259
draw rectangle, or Canvas arc or
something like that.

53
00:04:11.259 --> 00:04:15.803
And what that does is it will draw to

54
00:04:15.803 --> 00:04:21.120
let's say a rectangle to the Canvas.

55
00:04:21.120 --> 00:04:26.660
And underneath the hood, it's storing that
as kind of rows of pixel information.

56
00:04:26.660 --> 00:04:31.160
So once you've drawn it,
these shapes are inaccessible because it's

57
00:04:31.160 --> 00:04:36.350
just kind of arrays of pixels,
position and pixel information.

58
00:04:36.350 --> 00:04:38.630
And so, and because of that,

59
00:04:38.630 --> 00:04:43.480
you can probably imagine that the pro of
it is that it's extremely performant.

60
00:04:43.480 --> 00:04:50.365
Unless you have a Canvas
element that's with a 10,000

61
00:04:50.365 --> 00:04:54.570
by height of 10,000 pixels or something
in which you'll just have a really large,

62
00:04:54.570 --> 00:04:58.995
like you'll be storing a lot of pixels.

63
00:04:58.995 --> 00:05:03.950
So unless it's huge,
you can probably imagine that scaling up

64
00:05:03.950 --> 00:05:08.541
the number of data elements is
not going to impact Canvas.

65
00:05:08.541 --> 00:05:12.621
So if you want to,
though it's not advisable,

66
00:05:12.621 --> 00:05:17.925
if you want to, you can definitely
render tens of thousands or

67
00:05:17.925 --> 00:05:22.317
hundreds of thousands of
data points with Canvas.

68
00:05:22.317 --> 00:05:27.593
Because at the end of the day is stored
as kind of those rows of pixel data.

69
00:05:27.593 --> 00:05:32.522
But again, not all advisable to
be rendering tens of thousands of

70
00:05:32.522 --> 00:05:36.822
data points because even if
it's technically capable,

71
00:05:36.822 --> 00:05:42.510
our human brains are going to have
a really hard time comprehending it.

72
00:05:42.510 --> 00:05:47.650
So we're not going to touch up
on this in this workshop, but

73
00:05:47.650 --> 00:05:52.670
there is a very very
important part of data.

74
00:05:52.670 --> 00:05:57.172
I almost think it's even more important
the design side of data visualization than

75
00:05:57.172 --> 00:05:59.563
the technical side of data visualization.

76
00:05:59.563 --> 00:06:04.699
But today in this workshop, we'll only
be covering kind of the coding side.

77
00:06:04.699 --> 00:06:11.636
But there is, I think, even more
importantly the design side where we

78
00:06:11.636 --> 00:06:17.046
make sure that our visualizations
are comprehensible

79
00:06:17.046 --> 00:06:22.240
by the end person consuming and
are not misleading.

80
00:06:22.240 --> 00:06:26.179
So, all of that,
there's a different workshop for

81
00:06:26.179 --> 00:06:30.936
that all kind of touch up,
touch on at the end of this workshop.

82
00:06:30.936 --> 00:06:35.548
And then, the con for
HTML5 Canvas is that it really is

83
00:06:35.548 --> 00:06:39.471
quite hard to create any
interaction with it.

84
00:06:39.471 --> 00:06:48.755
Because once you've drawn the shape,
You don't have any access.

85
00:06:48.755 --> 00:06:52.820
Canvas doesn't know that there's a
specific shape at this specific position.

86
00:06:52.820 --> 00:06:58.660
So, if you can imagine, if you try to
do a click event or a drag event or

87
00:06:58.660 --> 00:07:04.590
a hover event, there's no native
browser support for that.

88
00:07:04.590 --> 00:07:10.560
So you have to kind of build your custom,
your own custom events for it.

89
00:07:10.560 --> 00:07:12.420
And that's kind of the con.

90
00:07:13.650 --> 00:07:16.797
It's a little bit harder
to get started with Canvas.

91
00:07:16.797 --> 00:07:18.997
But I still wanted to cover these.

92
00:07:18.997 --> 00:07:24.214
And the way that I always like
to think about it if you use

93
00:07:24.214 --> 00:07:29.889
kind of Adobe products,
is SVG is like illustrator because

94
00:07:29.889 --> 00:07:37.070
all of the shapes is stored with kind
of these positions and vector format.

95
00:07:37.070 --> 00:07:40.530
SVG is like illustrator and
Canvas is like photoshop.

96
00:07:42.410 --> 00:07:47.220
And, yeah, so
I wanted to cover these two as

97
00:07:48.630 --> 00:07:52.790
the options that we usually have to
create data visualizations on the web.

98
00:07:53.890 --> 00:07:57.142
And I also want to hear,
make a small disclaimer that with D3,

99
00:07:57.142 --> 00:08:03.660
I think people oftentimes
think that D3 is only for SVG.

100
00:08:03.660 --> 00:08:08.608
And I want to give a disclaimer
that D3 is actually,

101
00:08:08.608 --> 00:08:15.701
you can use D3 with any, I want to say
anything that the browser supports.

102
00:08:15.701 --> 00:08:20.555
You can use D3 to interact with SVG.

103
00:08:20.555 --> 00:08:22.263
You can use it for HTML.

104
00:08:22.263 --> 00:08:24.750
It actually also has Canvas support.

105
00:08:24.750 --> 00:08:29.480
So, I want to say it's
pretty web tech agnostic.

106
00:08:30.750 --> 00:08:31.250
Yeah.

107
00:08:32.330 --> 00:08:34.190
&gt;&gt; There's a couple of
questions from chat.

108
00:08:34.190 --> 00:08:34.690
&gt;&gt; Great.

109
00:08:37.302 --> 00:08:41.782
&gt;&gt; If I have Illustrator
file that I export to SVG,

110
00:08:41.782 --> 00:08:44.880
can I work with SVG with D3?

111
00:08:44.880 --> 00:08:46.750
&gt;&gt; Yeah, great question.

112
00:08:46.750 --> 00:08:48.607
Yes, most definitely.

113
00:08:48.607 --> 00:08:53.089
We won't cover that in this workshop,
but what you can do is, oftentimes,

114
00:08:53.089 --> 00:08:55.763
if you export it,
there's the DOT SVG file.

115
00:08:55.763 --> 00:08:59.127
And then you can either just copy and

116
00:08:59.127 --> 00:09:04.621
paste that as SVG string over and
then use D3 to select it,

117
00:09:04.621 --> 00:09:08.897
and we'll talk about D3 selections later.

118
00:09:08.897 --> 00:09:13.190
That's one option I can think of, or

119
00:09:13.190 --> 00:09:21.235
another option I can think of is
recreating that SVG string with D3.

120
00:09:21.235 --> 00:09:24.070
But the sure answer is, yes,
you can definitely do that and

121
00:09:24.070 --> 00:09:25.720
that's a great idea.

122
00:09:25.720 --> 00:09:31.380
If you have some shape that you want to
draw that is a little bit more complex,

123
00:09:31.380 --> 00:09:34.145
then you can definitely do it in SVG.

124
00:09:34.145 --> 00:09:38.012
Usually, you can definitely
do it in illustrator.

125
00:09:38.012 --> 00:09:42.494
And usually,
usually it will export as SVG paths, and

126
00:09:42.494 --> 00:09:48.452
then there's a string that you can
take two, then use it in the browser.

