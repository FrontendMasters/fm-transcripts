WEBVTT

1
00:00:00.050 --> 00:00:05.229
The very first thing we're
going to draw is the links,

2
00:00:05.229 --> 00:00:10.535
because the links we want to
be all the way at the bottom.

3
00:00:10.535 --> 00:00:15.608
So let's go and make our link =

4
00:00:15.608 --> 00:00:23.230
d3.select.svg.selectAll of the links.

5
00:00:25.190 --> 00:00:30.503
And in this case,
we're going to use a line element.

6
00:00:30.503 --> 00:00:37.099
We're going to pass in our data, and
our data is our graph object and

7
00:00:37.099 --> 00:00:42.230
the links array within
the graphs of graph.links.

8
00:00:42.230 --> 00:00:44.690
And then for the key function,

9
00:00:44.690 --> 00:00:49.760
we're going to pass back
the id on each of these links.

10
00:00:49.760 --> 00:00:54.922
Use our join to create the lines.

11
00:00:54.922 --> 00:00:59.351
And actually,
what I need to do is I think actually,

12
00:00:59.351 --> 00:01:06.420
I'm going to say select all of the links,
select all the elements with class link.

13
00:01:08.490 --> 00:01:13.060
And then once we've created and updated,

14
00:01:14.450 --> 00:01:19.710
created the line element then that we're
going to say let's have that as class

15
00:01:19.710 --> 00:01:24.740
is link is true.

16
00:01:24.740 --> 00:01:29.253
And then we're going
to have our attribute,

17
00:01:29.253 --> 00:01:33.052
we wanna stroke that and a light gray,

18
00:01:33.052 --> 00:01:37.943
let's say, and let's give opacity of 0.5.

19
00:01:37.943 --> 00:01:41.564
So that because there'll be a lot
of lines, a lot of links and

20
00:01:41.564 --> 00:01:45.902
that you can kind of see them even
when they're overlapping each other.

21
00:01:45.902 --> 00:01:50.988
And now if we inspect the SVG,
what we should see is

22
00:01:50.988 --> 00:01:56.870
all of the lines created,
but not yet showing up.

23
00:01:56.870 --> 00:02:00.850
It's not being rendered yet
because we haven't

24
00:02:00.850 --> 00:02:06.230
used D3 force layout to calculate
the positions of the nodes yet.

25
00:02:06.230 --> 00:02:10.700
So let's go ahead and create our flowers.

26
00:02:10.700 --> 00:02:16.396
And for the sake of time, I'm just gonna
go back to our previous notebook and

27
00:02:16.396 --> 00:02:19.700
just like grab our
flowers code from there.

28
00:02:22.629 --> 00:02:28.720
And copy and paste that,
sorry for all the scroll.

29
00:02:30.280 --> 00:02:35.620
Okay, so I'm going to grab

30
00:02:35.620 --> 00:02:44.400
our flowers code, const flower.

31
00:02:44.400 --> 00:02:48.104
And actually, I don't need to
do any of the animation, so

32
00:02:48.104 --> 00:02:50.380
I'm gonna just take that part out.

33
00:02:52.030 --> 00:02:56.005
So thus I don't need the update and
exit either.

34
00:02:56.005 --> 00:02:57.587
I don't need the transition.

35
00:03:03.680 --> 00:03:08.036
And what we should see
now with our flowers

36
00:03:08.036 --> 00:03:12.642
created is we should
see all of the flowers,

37
00:03:12.642 --> 00:03:16.848
all the way, Gosh!

38
00:03:19.165 --> 00:03:23.558
Ooh, svg.selectAll, yes.

39
00:03:23.558 --> 00:03:26.639
Copied and pasted too blindly.

40
00:03:26.639 --> 00:03:32.800
Okay, so d3.select, and and we're not
supposed to be citing the attribute.

41
00:03:34.950 --> 00:03:38.150
So we've copied and pasted the flowers
from our previous notebook,

42
00:03:38.150 --> 00:03:40.350
took out all of the animation things and

43
00:03:40.350 --> 00:03:46.640
took out the translate positioning for
now.

44
00:03:46.640 --> 00:03:50.686
So we should be able to
see all of our flowers,

45
00:03:50.686 --> 00:03:55.478
perfect, all the way up
here is clustered up at 00,

46
00:03:55.478 --> 00:04:01.245
which is the default because we
haven't set the positions yet.

47
00:04:01.245 --> 00:04:09.897
And then, Let's finally go ahead and
make our genres.

48
00:04:09.897 --> 00:04:13.607
And so for our genres,

49
00:04:13.607 --> 00:04:18.489
we're gonna call that genres

50
00:04:18.489 --> 00:04:22.800
= d3.select(svg).

51
00:04:22.800 --> 00:04:26.993
And we're going to call that,

52
00:04:26.993 --> 00:04:31.510
let's select all of the elements

53
00:04:31.510 --> 00:04:35.881
that have the class genre on it.

54
00:04:35.881 --> 00:04:38.310
We're going to bind the data.

55
00:04:38.310 --> 00:04:43.440
And actually, another thing I have done
incorrectly is for the flowers, and

56
00:04:43.440 --> 00:04:48.940
you want to be binding the graph.nodes,

57
00:04:48.940 --> 00:04:52.030
and we're going to use
a key function d.title.

58
00:04:52.030 --> 00:04:57.136
So that should be the final change
we need to do on the flowers.

59
00:04:59.316 --> 00:05:05.028
And then we are going to do,

60
00:05:08.259 --> 00:05:11.637
The data we want is graph.genres.

61
00:05:11.637 --> 00:05:19.379
And for the key function,
let's use the label, Join.

62
00:05:19.379 --> 00:05:22.843
We're going to make these texts elements,
and

63
00:05:22.843 --> 00:05:26.400
let's make sure to add
the class genre on there.

64
00:05:27.480 --> 00:05:31.940
So that our selection matches true.

65
00:05:31.940 --> 00:05:38.801
And let's put the text, and
that should be the title.

66
00:05:38.801 --> 00:05:46.530
And let's just go ahead and
center that text.

67
00:05:46.530 --> 00:05:51.780
So now, we should have all of
the elements we need rendered.

68
00:05:53.450 --> 00:05:58.000
And then this is where we're
going to use force simulation.

69
00:05:58.000 --> 00:06:01.817
And so let's go and
call it const simulation.

70
00:06:03.310 --> 00:06:08.671
And we're going to call
d3.forceSimulation.

71
00:06:08.671 --> 00:06:11.198
And we're going to pass in nodes.

72
00:06:11.198 --> 00:06:15.530
And the nodes that we want is
we actually want the combination

73
00:06:15.530 --> 00:06:20.111
of the flower nodes and
the genres together as

74
00:06:20.111 --> 00:06:25.830
the nodes that we use to
calculate all of the positions.

75
00:06:25.830 --> 00:06:30.679
So let's go ahead and
use low dash to union our

76
00:06:30.679 --> 00:06:35.151
array of nodes, and our array of genres.

77
00:06:38.655 --> 00:06:41.870
We're going to pass that
into the force simulation.

78
00:06:43.710 --> 00:06:49.580
We're going to tell the force simulation
that one of the first forces that

79
00:06:49.580 --> 00:06:55.080
we want to apply is the link,
d3.forceLink.

80
00:06:55.080 --> 00:07:00.040
So we want to have an attractive
force between any nodes that

81
00:07:01.160 --> 00:07:02.530
are linked to each other.

82
00:07:02.530 --> 00:07:04.990
So that's passing graph.links.

83
00:07:04.990 --> 00:07:10.060
And again because graph.links,
its source and target are already

84
00:07:10.060 --> 00:07:16.230
directly referencing our node objects.

85
00:07:16.230 --> 00:07:21.158
We don't need to specify any sort
of identifier to connect them

86
00:07:21.158 --> 00:07:26.470
to the .id function that we
saw earlier in the example.

87
00:07:27.890 --> 00:07:33.660
And I'm going to say that
I want to avoid collision

88
00:07:33.660 --> 00:07:38.950
between each of the each of the nodes.

89
00:07:38.950 --> 00:07:45.670
So what I'm going to do is I'm
going to say forceCollide.

90
00:07:45.670 --> 00:07:49.212
And I'm going to pass in radius, and

91
00:07:49.212 --> 00:07:54.253
that radius will be dependent
on the size of my node.

92
00:07:54.253 --> 00:08:00.109
So for my flowers,
I want it to be I think d.scale.

93
00:08:00.109 --> 00:08:04.629
And then remember that our

94
00:08:04.629 --> 00:08:09.561
d.scale is dependent on our

95
00:08:09.561 --> 00:08:15.519
petals being I think 100 byte,

96
00:08:15.519 --> 00:08:19.640
100 pixels in size.

97
00:08:21.260 --> 00:08:26.105
And then finally, I want to center our,

98
00:08:28.552 --> 00:08:33.376
Nodes on the midpoint of
our SVG containers, so

99
00:08:33.376 --> 00:08:36.396
that's width divided by 2.

100
00:08:36.396 --> 00:08:40.090
And for the height I'm actually
using width divided by 2.

101
00:08:40.090 --> 00:08:45.140
So in that case the center
would be width divided by 4.

102
00:08:45.140 --> 00:08:51.128
And a small note about collide,
so I'm using collide and

103
00:08:51.128 --> 00:08:55.992
the other example I gave
is force many body, so

104
00:08:55.992 --> 00:08:59.636
the negative or positive charge.

105
00:08:59.636 --> 00:09:03.506
And I find oftentimes that
now I use them together,

106
00:09:03.506 --> 00:09:07.290
they kinda like end up
doing very similar things.

107
00:09:07.290 --> 00:09:10.755
So I usually just use one or the other.

108
00:09:10.755 --> 00:09:13.390
And in this case, I chose to use collide.

109
00:09:15.070 --> 00:09:18.996
And then finally, we're going to say
what should happen on each tick.

110
00:09:21.783 --> 00:09:26.291
So on each tick the positions update, so

111
00:09:26.291 --> 00:09:32.930
then we want to go and
update the positions for our flowers.

112
00:09:34.270 --> 00:09:39.070
And so let's transform translate that with

113
00:09:39.070 --> 00:09:43.358
the newly calculated x,y positions.

114
00:09:43.358 --> 00:09:51.520
And this again is a reason why the
original data array is directly mutated.

115
00:09:51.520 --> 00:09:57.574
Because we bound that original
data array to our DOM elements,

116
00:09:57.574 --> 00:10:02.942
and then we need to be able
to access those DOM elements,

117
00:10:02.942 --> 00:10:07.760
the bound data on those
DOM elements on each tick.

118
00:10:07.760 --> 00:10:14.191
And then we expect the x,y positions
to be in that bound data element.

119
00:10:14.191 --> 00:10:18.050
And that's why it gets mutated directly.

120
00:10:21.149 --> 00:10:23.354
Do the same thing for the genres.

121
00:10:27.486 --> 00:10:32.894
And then finally, for our links, for

122
00:10:32.894 --> 00:10:40.100
our line elements, the attributes are x1.

123
00:10:40.100 --> 00:10:44.840
And so
x1 should be the x position of the source.

124
00:10:44.840 --> 00:10:51.360
And I'm just gonna copy and
paste, These over.

125
00:10:51.360 --> 00:10:58.360
So that's y1, x2, y2, source.y,

126
00:10:58.360 --> 00:11:04.166
then target.x, and target.y.

127
00:11:06.353 --> 00:11:12.091
And if we've done this part correctly,

128
00:11:12.091 --> 00:11:17.337
a big if, then if we run this up here,

129
00:11:19.721 --> 00:11:25.351
It should hopefully be,

130
00:11:25.351 --> 00:11:29.186
there we go, yeah.

131
00:11:29.186 --> 00:11:34.932
I'm still struggling a little bit
to get to the final layout at once.

132
00:11:34.932 --> 00:11:40.065
And there's definitely settings,
and toggles, and levers,

133
00:11:40.065 --> 00:11:45.112
that we can pull to get it to
arrive to an optimal layout faster.

134
00:11:45.112 --> 00:11:50.992
But for the purposes of this exercise,
I think we've gotten it to a good point.

135
00:11:50.992 --> 00:11:55.508
And if we filter the R movies back in,

136
00:11:55.508 --> 00:12:01.355
then we can see that
it's updating correctly.

137
00:12:04.024 --> 00:12:08.073
Yeah, so there we go.

138
00:12:08.073 --> 00:12:13.493
[LAUGH] We got the, wait,
no, the genres are not

139
00:12:13.493 --> 00:12:18.152
being, The genre texts are not showing up.

140
00:12:18.152 --> 00:12:23.276
So let me go ahead and debug that
really quickly, hopefully quickly.

141
00:12:23.276 --> 00:12:26.753
selectAll genres, classed('genre', true),

142
00:12:26.753 --> 00:12:30.857
join( 'text'), d.label, yes,
label, we want it label

143
00:12:36.610 --> 00:12:41.202
And again,
if you weren't able to get all of

144
00:12:41.202 --> 00:12:45.673
the code because my laptop is struggling,

145
00:12:45.673 --> 00:12:52.523
then you can find the solution to
all of the code in the other cell.

