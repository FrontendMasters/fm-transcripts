WEBVTT

1
00:00:00.260 --> 00:00:05.400
And so through D3 transitions are how
we animate our attributes and

2
00:00:05.400 --> 00:00:12.060
styles on our development from one state,
a state A to the next state, a state B.

3
00:00:13.710 --> 00:00:19.670
And this animation, this transition from
state A to state B, is really important

4
00:00:19.670 --> 00:00:25.850
for us in data visualization to maintain
what we call object constancy so that

5
00:00:25.850 --> 00:00:31.130
we can visually keep track of all of the
updates that are happening on the screen.

6
00:00:31.130 --> 00:00:36.360
All of the updates that are happening
between the first data set,

7
00:00:36.360 --> 00:00:39.180
our old data set to the new data set.

8
00:00:39.180 --> 00:00:45.250
So I actually got an interesting question
from a classroom earlier about how

9
00:00:46.820 --> 00:00:52.160
if you remember when we were
talking about, you know,

10
00:00:52.160 --> 00:00:58.080
original data for
a bar chart with the five integers,

11
00:00:58.080 --> 00:01:03.310
and then we had the new data
array with the eight integers,

12
00:01:03.310 --> 00:01:08.240
and there was a part where
we were talking about how,

13
00:01:08.240 --> 00:01:12.630
the two integers in

14
00:01:12.630 --> 00:01:17.480
the original data had switched and

15
00:01:17.480 --> 00:01:23.470
changed positions in the new data array.

16
00:01:23.470 --> 00:01:28.420
The question was whether D3 keeps track
of that like switch from the original to

17
00:01:30.180 --> 00:01:31.380
this new data array.

18
00:01:32.770 --> 00:01:37.790
And the answer the simple answer is
that D3 does not keep track of that

19
00:01:37.790 --> 00:01:39.110
once we give it.

20
00:01:39.110 --> 00:01:44.700
The new data array D3 kind of just like
forgets about the previous data arrays and

21
00:01:44.700 --> 00:01:46.270
it just concentrates on the new one.

22
00:01:46.270 --> 00:01:47.810
It just kind of calculates,

23
00:01:47.810 --> 00:01:51.100
you know what the differences
are between the old one and the new one.

24
00:01:51.100 --> 00:01:55.687
And it just tell us what we need to do to
get to that new one and then D3 itself,

25
00:01:55.687 --> 00:01:58.143
just kinda work, forgets all about it.

26
00:01:58.143 --> 00:02:02.308
&gt;&gt; But
One interesting place that it does and

27
00:02:02.308 --> 00:02:07.782
can persist,
is with if we decide to put transitions or

28
00:02:07.782 --> 00:02:12.780
animations on this update,
because once we put in

29
00:02:12.780 --> 00:02:18.492
the animations where we're
going to see is very clear and

30
00:02:18.492 --> 00:02:23.014
the bars In the previous state,
the state A,

31
00:02:23.014 --> 00:02:27.320
they're going to be shifting around.

32
00:02:27.320 --> 00:02:30.930
And you're going to see the animation
of them kinda like swapping around

33
00:02:32.280 --> 00:02:36.750
when we go from that original
data array to the new data array.

34
00:02:36.750 --> 00:02:43.770
So from the first kind of state A to state
B so you'll see that animation happen.

35
00:02:43.770 --> 00:02:49.040
So D3 itself has a whole module
dedicated to transitions and

36
00:02:49.040 --> 00:02:51.590
it has a lot of support for and

37
00:02:51.590 --> 00:02:56.470
how the timing of these animations
work and how they ease.

38
00:02:56.470 --> 00:03:01.820
So the easing is like how the animation
kind of like, guess the best way

39
00:03:02.850 --> 00:03:09.020
I can describe it as like how
the animation kinda like bounces and

40
00:03:09.020 --> 00:03:13.420
or we can potentially chain
our animation so we can have

41
00:03:14.870 --> 00:03:20.398
bars do one animation, maybe it fades
in and then like it can we can chain a.

42
00:03:20.398 --> 00:03:24.400
Non of the animation right after and maybe
it slides over or something like that.

43
00:03:24.400 --> 00:03:26.380
So we can chain animations.

44
00:03:26.380 --> 00:03:29.050
And we can even create
custom animations with D3.

45
00:03:29.050 --> 00:03:33.682
So there's a lot of ways to
work with D3 transitions.

46
00:03:33.682 --> 00:03:39.550
Although note if you're trying
to do anything beyond kind of,

47
00:03:39.550 --> 00:03:42.242
transitioning from one state to the next,

48
00:03:42.242 --> 00:03:47.820
the chaining of transitions
does get a little bit

49
00:03:49.940 --> 00:03:54.020
cumbersome in D3 if you're trying
to like chain a lot of animations.

50
00:03:54.020 --> 00:03:59.210
So if you have a lot of animations that
you're trying to do with like, where

51
00:03:59.210 --> 00:04:03.930
you want very specific timing control, I
would actually recommend using Greenstock.

52
00:04:03.930 --> 00:04:06.310
Greensock is an animation platform.

53
00:04:06.310 --> 00:04:11.290
And I find that that one pairs
quite nicely with SVG, and

54
00:04:11.290 --> 00:04:13.000
I use it a lot with D3.

55
00:04:13.000 --> 00:04:17.550
And I would recommend that for if you
want to do really advanced animation,

56
00:04:17.550 --> 00:04:20.510
so use greensock for
very advanced animations.

57
00:04:20.510 --> 00:04:26.340
But certainly D3 is really great for
if you're doing some simple transitions.

58
00:04:26.340 --> 00:04:29.350
For our DOM elements to go
from one place to the next.

59
00:04:30.980 --> 00:04:34.670
And today,
we're going to cover just the simplest but

60
00:04:34.670 --> 00:04:38.740
still quite powerful way to
use these three transitions.

61
00:04:38.740 --> 00:04:44.410
And the way that we do it is and
we first define our transition.

62
00:04:44.410 --> 00:04:46.540
So we call it d3.transition.

63
00:04:46.540 --> 00:04:52.010
And I'm just gonna set a duration of one
second so duration accepts milliseconds.

64
00:04:52.010 --> 00:04:56.740
So, in this case,
I'm passing in 1000 milliseconds and

65
00:04:58.100 --> 00:05:01.620
then we're gonna store
that in this variable t.

66
00:05:01.620 --> 00:05:07.502
So that we can if we have multiple
different selections that we want

67
00:05:07.502 --> 00:05:14.550
to animate then and using this t will make
sure that all of those sinks together.

68
00:05:14.550 --> 00:05:20.347
The other way we're using
is we have a selection,

69
00:05:20.347 --> 00:05:27.544
and we have a we call transition and
we pass in this t into here.

70
00:05:27.544 --> 00:05:34.935
And whatever attributes come
after the start of transition t,

71
00:05:34.935 --> 00:05:40.514
is kind of that state B
that will transition to,

72
00:05:40.514 --> 00:05:47.920
and D3 will kind of rely on
everything after that transition.

73
00:05:49.510 --> 00:05:52.555
To know what attributes or
styles to animate,

74
00:05:52.555 --> 00:05:58.470
and then it will look at

75
00:05:58.470 --> 00:06:03.830
kind of the attributes or
styles that we've set before transition

76
00:06:03.830 --> 00:06:08.960
to figure out if there's a state either
we should be transitioning from.

77
00:06:08.960 --> 00:06:12.526
And if you cannot find any of the like,

78
00:06:12.526 --> 00:06:18.661
corresponding attributes being
set before the dot transition,

79
00:06:18.661 --> 00:06:26.265
it will just default to the SVG elements
or it will use the SVG elements defaults.

