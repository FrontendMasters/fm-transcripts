WEBVTT

1
00:00:00.370 --> 00:00:04.480
Let's do this exercise together now, and

2
00:00:04.480 --> 00:00:08.944
let's do the updating
bar charts the old way.

3
00:00:10.205 --> 00:00:16.896
So we will start, By creating,

4
00:00:21.208 --> 00:00:25.100
So for this one,
I passed in the svg element.

5
00:00:25.100 --> 00:00:27.040
So let's select that.

6
00:00:27.040 --> 00:00:34.370
And we're going to select all
of the rectangles in that svg.

7
00:00:34.370 --> 00:00:37.660
And then we're going to bind our new data.

8
00:00:37.660 --> 00:00:43.340
And for the key function again, we'll
pass in, we just use the datum itself.

9
00:00:43.340 --> 00:00:48.000
So we have our rectangles
with our data bound.

10
00:00:49.090 --> 00:00:54.640
Now, let's exit any of
the extraneous rectangle elements,

11
00:00:54.640 --> 00:00:57.480
that are no longer in the new data, right?

12
00:00:58.978 --> 00:01:04.230
So we're gonna take our
rectangle selection,

13
00:01:04.230 --> 00:01:07.160
and we're gonna get the exit selection.

14
00:01:07.160 --> 00:01:09.360
And we're going to remove
that from the DOM.

15
00:01:11.100 --> 00:01:14.950
Then we're gonna get our enter.

16
00:01:14.950 --> 00:01:20.300
So we're gonna say enter the append,

17
00:01:20.300 --> 00:01:24.200
and we want to append a rectangle,
like here.

18
00:01:26.300 --> 00:01:28.640
And for the enter,

19
00:01:28.640 --> 00:01:33.050
we're going to set some of the attributes
that do not depend on data.

20
00:01:33.050 --> 00:01:36.909
So that would be width,
we're going to use rectangle width.

21
00:01:36.909 --> 00:01:39.725
I believe I also do a fill,

22
00:01:39.725 --> 00:01:45.150
I think I do a pink fill,
and I do I believe a stroke.

23
00:01:45.150 --> 00:01:52.370
And I think I use plumb, and
I think I used stroke width.

24
00:01:52.370 --> 00:01:54.940
And I think I set this stroke width to 2.

25
00:01:54.940 --> 00:01:58.080
So that's our enter selection,
and let's go ahead and

26
00:01:58.080 --> 00:02:01.900
save our enter selection
in this variable enter.

27
00:02:01.900 --> 00:02:08.799
And finally, let's merge our enter and
update selection together.

28
00:02:08.799 --> 00:02:13.448
So we're going to do
enter.merge rectangle.

29
00:02:13.448 --> 00:02:16.720
And we're going to do now,

30
00:02:16.720 --> 00:02:21.940
the attributes that depend on our data.

31
00:02:21.940 --> 00:02:26.120
So that was our exposition,

32
00:02:28.190 --> 00:02:33.990
because our exposition we've gone back to
using the simpler way before the scales.

33
00:02:33.990 --> 00:02:39.529
And so we're going to just say,
what our index is multiplied

34
00:02:39.529 --> 00:02:45.295
by our rectangle width as our x
position and for our y position.

35
00:02:45.295 --> 00:02:50.706
We're gonna use, for
this example hard coded

36
00:02:50.706 --> 00:02:55.570
the height of the container to be 100.

37
00:02:55.570 --> 00:02:59.440
So we're just gonna do 100 minus our data.

38
00:02:59.440 --> 00:03:06.797
And finally we're going to set the height
of our bars, to be the bound data is self.

39
00:03:06.797 --> 00:03:11.133
So here is our data binding,

40
00:03:11.133 --> 00:03:16.561
our exit, enter and enter update.

41
00:03:16.561 --> 00:03:20.161
And I received a question and

42
00:03:20.161 --> 00:03:25.111
in a previous workshop along time ago,

43
00:03:25.111 --> 00:03:31.120
about if the if the order
of all of these matter.

44
00:03:31.120 --> 00:03:34.638
And I remember that the answer,

45
00:03:34.638 --> 00:03:40.370
the conclusion we arrived
to is that in this old way,

46
00:03:40.370 --> 00:03:43.385
and the order does matter.

47
00:03:43.385 --> 00:03:50.282
And it's that it's quite important for
us to remove everything first.

48
00:03:50.282 --> 00:03:59.180
And then we want to be able to
create all of our new elements.

49
00:03:59.180 --> 00:04:04.190
So that those new elements can be merged
together with the existing elements.

50
00:04:04.190 --> 00:04:07.160
So it's a very specific order.

51
00:04:07.160 --> 00:04:11.160
And I think they know about whether
the exit needs to come first.

52
00:04:11.160 --> 00:04:16.010
I believe that,
that was because there was an edge case.

53
00:04:16.010 --> 00:04:19.190
I think if you had nested selections or

54
00:04:19.190 --> 00:04:23.410
nested elements,
then I think this order starts to matter.

55
00:04:23.410 --> 00:04:27.223
So, I now just kind of
default to this order, and

56
00:04:27.223 --> 00:04:31.512
then just think of it as like
a personal best practice.

57
00:04:33.591 --> 00:04:40.440
So now, that we've done that, let's
go down here and see if it's working.

58
00:04:40.440 --> 00:04:43.650
So if we click new data, there we go.

59
00:04:43.650 --> 00:04:52.240
So it is drawing the new data,
every time we click on the button.

60
00:04:54.000 --> 00:04:56.360
So it is working as we expect.

61
00:04:57.660 --> 00:05:04.200
Let's recreate our simple bar chart
with the new way, with the join.

62
00:05:05.760 --> 00:05:11.537
So, let's start with
selecting the svg again, and

63
00:05:11.537 --> 00:05:18.660
.select all rectangles.

64
00:05:18.660 --> 00:05:25.340
And binding that data in the same way,
with the same key function of the data.

65
00:05:26.500 --> 00:05:32.836
This time around exciting part
is to do just the .join for

66
00:05:32.836 --> 00:05:37.192
the rectangles, and this should now,

67
00:05:39.687 --> 00:05:45.446
Create all of the rectangle elements we
need, nothing will show up in our svg yet.

68
00:05:45.446 --> 00:05:49.250
But if we inspect it,
we should be able to see it in the DOM.

69
00:05:49.250 --> 00:05:55.550
So let's take a look,
and the new way indeed,

70
00:05:55.550 --> 00:05:59.590
we have all of the rectangle elements and
then if we do a console.

71
00:06:01.160 --> 00:06:05.920
And take a look at the rectangles, and
scroll all the way down to the bottom and

72
00:06:05.920 --> 00:06:08.480
we see that we have the data being bound.

73
00:06:09.630 --> 00:06:12.270
And so this dot join this one line,

74
00:06:12.270 --> 00:06:18.340
replaced all of the lines of enter and
update and exit in the old way.

75
00:06:18.340 --> 00:06:21.650
And so now, we can go ahead and

76
00:06:21.650 --> 00:06:26.259
because that join is giving us
now all of these rectangles.

77
00:06:27.440 --> 00:06:30.880
With all of these data bound,
let's go ahead and

78
00:06:30.880 --> 00:06:33.650
set all of the attributes
that we did before.

79
00:06:33.650 --> 00:06:40.604
And so just so you don't have to sit
through it, I'm gonna copy and paste it.

80
00:06:40.604 --> 00:06:44.880
So I'm gonna go ahead and copy and

81
00:06:44.880 --> 00:06:49.772
paste all of the dynamic attributes.

82
00:06:49.772 --> 00:06:54.109
And then I'm gonna go ahead and
go back up, and

83
00:06:54.109 --> 00:06:57.458
copy all of the static attributes.

84
00:07:01.192 --> 00:07:06.280
And with this just have this one book.

85
00:07:06.280 --> 00:07:08.940
And that should take care of
all of our enter, update exit.

86
00:07:08.940 --> 00:07:12.480
So let's take a look, and there we go.

87
00:07:12.480 --> 00:07:16.760
It's both creating the exact same things.

88
00:07:16.760 --> 00:07:21.180
But the new way with join is just,
so much more convenient and

89
00:07:21.180 --> 00:07:26.170
much less verbose than the old
way with our enter, update, exit.

90
00:07:30.190 --> 00:07:34.190
So this is what it looks like, but

91
00:07:35.250 --> 00:07:40.715
you might be, after all of this work
that we did with these different ways.

92
00:07:40.715 --> 00:07:43.265
You might be feeling
a little bit dissatisfied,

93
00:07:43.265 --> 00:07:45.935
or at least I'm feeling
a little bit dissatisfied.

94
00:07:45.935 --> 00:07:51.285
Because as we can see here,
every time we update sure they both work,

95
00:07:51.285 --> 00:07:54.355
but this looks like the same effect.

96
00:07:54.355 --> 00:08:00.235
As if we had just completely emptied out,
our svg on every update.

97
00:08:00.235 --> 00:08:05.520
So every time we got new data, like if
we chucked out all of the svg elements,

98
00:08:05.520 --> 00:08:08.200
I mean, we just like redrew
everything from scratch.

99
00:08:08.200 --> 00:08:12.000
And this looks exactly the same as that.

100
00:08:12.000 --> 00:08:15.830
So why are we going through
all of this trouble?

101
00:08:15.830 --> 00:08:21.870
And the answer is this whole enter,
update, exit pattern, or this join.

102
00:08:21.870 --> 00:08:29.400
Whichever way you decide to use, this
is extremely powerful and really nice.

103
00:08:29.400 --> 00:08:36.860
When we combine it with D3 transitions,
if we combine it with some animations

