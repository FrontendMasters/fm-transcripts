WEBVTT

1
00:00:00.180 --> 00:00:06.680
This is how I d3 scales,
look and practice and so

2
00:00:06.680 --> 00:00:11.830
let's say we're trying to use scale linear
to map from continuous to continuous, and

3
00:00:11.830 --> 00:00:17.410
then we want to set the domain,
which is our input our raw data.

4
00:00:17.410 --> 00:00:23.130
And then we want to specify The range,
which is

5
00:00:23.130 --> 00:00:27.500
the visual channel that it should map to,
and so the way that I think about it is we

6
00:00:30.490 --> 00:00:34.380
specify the minimum value in our raw data.

7
00:00:34.380 --> 00:00:39.350
And then we'll get mapped to the minimum
value in our visual channel and

8
00:00:39.350 --> 00:00:41.320
the maximum value that we specify for

9
00:00:41.320 --> 00:00:47.240
the raw data will get mapped to
the maximum value in our visual channel.

10
00:00:48.880 --> 00:00:55.860
And the way that we use it
is that then this function,

11
00:00:55.860 --> 00:01:04.380
or this series of code will give back
a function and we then pass some value.

12
00:01:04.380 --> 00:01:11.110
Some raw data value into the scale to
get the translated visual channel value.

13
00:01:12.170 --> 00:01:17.690
So that's how we use scales, and
then d3 also has some helper functions for

14
00:01:17.690 --> 00:01:22.900
us to help calculate the min and
max from our raw data, and

15
00:01:22.900 --> 00:01:26.262
so we can use d3.min,

16
00:01:26.262 --> 00:01:31.630
pass in the data and then specify how.

17
00:01:31.630 --> 00:01:35.600
And then we want to specify like
whatever attribute we're trying to get

18
00:01:35.600 --> 00:01:40.440
the minimum for,
same thing for the max and

19
00:01:40.440 --> 00:01:44.200
the one that I find the most useful
that I use a lot is dot extent.

20
00:01:44.200 --> 00:01:49.090
And what dot extent will do is if
you pass in your data, and if you

21
00:01:49.090 --> 00:01:53.430
specify like the attribute and the data
that you want to get the min and max for.

22
00:01:53.430 --> 00:01:56.710
It will return an array of min and

23
00:01:56.710 --> 00:02:02.260
max that you can plot directly into
the dot domain call right here,

24
00:02:02.260 --> 00:02:08.240
because dot domain and dot range will
always ask for an array of min and max.

25
00:02:09.640 --> 00:02:14.800
So that's how we'll use scales, and

26
00:02:14.800 --> 00:02:20.570
let's see how that works with our
bar chart that we currently have.

27
00:02:20.570 --> 00:02:26.510
So, and so far our bar chart
has had a fixed dimension of,

28
00:02:26.510 --> 00:02:30.700
you know,
250 pixels by 100 pixels because that

29
00:02:30.700 --> 00:02:35.580
perfectly perfectly fit our very
simple data array with five numbers.

30
00:02:35.580 --> 00:02:40.030
And with those five numbers ranging from
only 0 to 100, very predictable and so

31
00:02:40.030 --> 00:02:41.950
that's why we were able to hard code it.

32
00:02:41.950 --> 00:02:46.090
But, as you can probably imagine, for a
lot of the visualizations you're going to

33
00:02:46.090 --> 00:02:49.420
do, it's not, you probably won't
be able to hard code much.

34
00:02:49.420 --> 00:02:54.680
And you want to be able to have
the flexibility of fitting any number of,

35
00:02:54.680 --> 00:02:58.910
you know, data elements to
any sort of width and height.

36
00:03:00.130 --> 00:03:08.770
So, and let's use d3 to kind
of apply that flexibility and

37
00:03:08.770 --> 00:03:14.590
also you might have noticed
that our bar chart this far,

38
00:03:14.590 --> 00:03:19.940
except for that one time,
when we do something with the y attribute.

39
00:03:19.940 --> 00:03:24.675
Our bar chart is currently upside down,
so let's fix that with d3 scales too,

40
00:03:24.675 --> 00:03:29.440
and actually calculating the y value,

41
00:03:29.440 --> 00:03:33.500
it's probably the most common
way that I use d3 scales.

42
00:03:33.500 --> 00:03:37.650
Because I'm trying to,
you know, map from my lowest

43
00:03:38.890 --> 00:03:44.100
value in the data to,
you know the bottom of my container

44
00:03:44.100 --> 00:03:48.980
which is like oftentimes, like,
whatever the height of the container is.

45
00:03:48.980 --> 00:03:53.470
And my highest value to the top of my
container, which is actually zero,

46
00:03:53.470 --> 00:03:56.440
so it's kind of like this reverse
thing that's going on and

47
00:03:56.440 --> 00:03:59.220
you'll see what I mean
when we get into the code.

48
00:04:00.280 --> 00:04:05.666
But I have this little example where and
we can just like dynamically just

49
00:04:05.666 --> 00:04:11.420
create different number of bars and
then we can have any like width or height.

50
00:04:14.246 --> 00:04:19.513
And we can kind of specify
whatever padding between the bars

51
00:04:19.513 --> 00:04:24.353
that we want, and so
this example is kind of just to show

52
00:04:24.353 --> 00:04:29.431
that d3 scales gives us all
these kinds of flexibility.

53
00:04:29.431 --> 00:04:33.784
And so let's kind of

54
00:04:33.784 --> 00:04:38.270
dig in to the code to see
how this is happening,

55
00:04:42.010 --> 00:04:45.200
so here's the most relevant
parts of the code, so

56
00:04:45.200 --> 00:04:49.390
this is a data array that's
being randomly generated.

57
00:04:49.390 --> 00:04:54.250
And by we specify
the number of bars we want,

58
00:04:54.250 --> 00:05:01.290
this is a lodash function that I
also use a lot, that basically given

59
00:05:01.290 --> 00:05:07.620
a number here just creates
an array with length.

60
00:05:07.620 --> 00:05:12.800
The same length that as we specify here,
so this is out data array

61
00:05:12.800 --> 00:05:17.270
of in this case,
eight randomly generated numbers.

62
00:05:19.040 --> 00:05:23.570
And for the x scale,
this is where we're using scale band, and

63
00:05:23.570 --> 00:05:29.463
scale band as you might remember,
is a mapping from a discrete

64
00:05:29.463 --> 00:05:36.440
input to a discrete,
raw data to a continuous visual channel.

65
00:05:36.440 --> 00:05:41.280
And so in this case,
what we want is to be able to position

66
00:05:42.280 --> 00:05:47.240
each of these bars and so
the discrete domain that we're passing in

67
00:05:47.240 --> 00:05:52.140
is just the key store data, so it sets
the domain to these discrete 01234567.

68
00:05:52.140 --> 00:05:59.980
And we're saying that we want to
map that to this continuous range

69
00:05:59.980 --> 00:06:05.598
of our width of going from
all the way to from our left,

70
00:06:05.598 --> 00:06:12.510
zero pixels all the way to our right,
which is the width of 613 pixels.

71
00:06:12.510 --> 00:06:16.981
And so, we're saying that, you know,
we want to map this zeroth

72
00:06:16.981 --> 00:06:21.940
element to zero pixels and our final

73
00:06:23.560 --> 00:06:29.080
seventh or
eighth bar to all the way to the right.

74
00:06:29.080 --> 00:06:33.420
And everything in between,
d3 do your magic and

75
00:06:33.420 --> 00:06:35.960
figure out what the exposition for
that should be.

76
00:06:37.370 --> 00:06:43.310
And that's the x scale right here, and for

77
00:06:43.310 --> 00:06:47.790
the y scale, we're using a scale linear,
so that's continuous to continuous.

78
00:06:47.790 --> 00:06:52.890
And we're saying that first of all,
I want the maximum value in our data,

79
00:06:52.890 --> 00:06:55.440
which right now just so happens to be 90,

80
00:06:55.440 --> 00:07:00.770
if I play around, rolling,
if I play around with the number of bars.

81
00:07:01.840 --> 00:07:06.650
That could change, so
right now the maximum value is 62, and

82
00:07:06.650 --> 00:07:08.750
then now the maximum value is 79.

83
00:07:08.750 --> 00:07:13.590
And so what I want to do is, I want to map

84
00:07:14.770 --> 00:07:20.400
the lowest number, and in this case
I'm gonna just hard code it to 0.

85
00:07:20.400 --> 00:07:25.390
To the bottom of the container and
the bottom of the container is

86
00:07:25.390 --> 00:07:29.830
this height of the container
that I've set, so I want to map

87
00:07:31.020 --> 00:07:37.910
the bars with height 02, the bottom.

88
00:07:37.910 --> 00:07:44.520
And I want to map the bars
with the maximum but the most,

89
00:07:46.470 --> 00:07:51.880
the highest number to
the top of my container,

90
00:07:51.880 --> 00:07:56.200
in this case the top is zero pixels,
the Y is equal to zero.

91
00:07:58.040 --> 00:08:04.830
And then here how we use it is, this
is probably really familiar now it is,

92
00:08:04.830 --> 00:08:09.410
we're saying, let's go and
create the number

93
00:08:09.410 --> 00:08:15.000
of rectangle elements as in the data,
so right now we're creating six.

94
00:08:15.000 --> 00:08:20.850
And we're binding those data and
to each of our six rectangle elements,

95
00:08:20.850 --> 00:08:23.620
and we're passing in an attribute of x.

96
00:08:24.710 --> 00:08:31.160
And for the x, what we're doing
is we are passing in the index

97
00:08:31.160 --> 00:08:37.030
to the x scale, and
then getting back some number.

98
00:08:38.810 --> 00:08:44.250
And for the y, we're going to
pass our data to the y scale and

99
00:08:44.250 --> 00:08:48.770
we'll get back some number that
we can use for the y position.

100
00:08:48.770 --> 00:08:55.136
And indeed, you can see that these are
the things that are being calculated with

101
00:08:55.136 --> 00:09:00.469
our x and y scales, so this is how
we can use d3 scales in practice.

