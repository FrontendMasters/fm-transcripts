WEBVTT

1
00:00:00.810 --> 00:00:04.070
Another module that I really
like in D3 is D3 hierarchy.

2
00:00:05.420 --> 00:00:10.250
And this one helps us calculate
the positions for, let's say, trees,

3
00:00:10.250 --> 00:00:14.910
tree maps, and circle packs.

4
00:00:14.910 --> 00:00:19.961
So you can see circle packs, and again,
there's examples that you can click and

5
00:00:19.961 --> 00:00:24.879
it will link to usually in the observable
notebook that explains how to use it.

6
00:00:29.411 --> 00:00:34.195
And so for D3 hierarchy,
it helps us calculate the x,

7
00:00:34.195 --> 00:00:40.539
y-positions and where applicable
the dimensions the width, height,

8
00:00:40.539 --> 00:00:45.751
radius for our tree layout or
a tree maps, or circle packs.

9
00:00:45.751 --> 00:00:50.566
And just like with D3 shapes,
they take in our raw data and

10
00:00:50.566 --> 00:00:55.490
returns a new object without
mutating that original data.

11
00:00:56.920 --> 00:00:59.713
So here's an example nested data set.

12
00:00:59.713 --> 00:01:05.538
And in this case, it's the label is clear,
it has 10 children.

13
00:01:05.538 --> 00:01:09.580
And those 10 children have their
own children, goes down and down.

14
00:01:10.810 --> 00:01:15.450
And once we pass that in to D3 tree,

15
00:01:15.450 --> 00:01:21.793
what we get back is this
new nested object with x,

16
00:01:21.793 --> 00:01:28.783
y-positions and
a few other pieces of information.

17
00:01:28.783 --> 00:01:33.100
And you can see that it maintains,
sorry, not this one.

18
00:01:33.100 --> 00:01:35.671
It maintains right here a similar,

19
00:01:35.671 --> 00:01:39.452
the same nested structure
as our original raw data.

20
00:01:39.452 --> 00:01:45.140
But you can expand this raw data
to see that it remains untouched.

21
00:01:45.140 --> 00:01:50.006
And you can use this
object to then create each

22
00:01:50.006 --> 00:01:54.884
of these nodes,
each of these nested nodes.

23
00:01:54.884 --> 00:01:59.253
And position each of
the nodes in this tree, and

24
00:01:59.253 --> 00:02:06.210
these links that were drawn in
between you can actually use D3 shape.

25
00:02:06.210 --> 00:02:11.112
D3 shape has a function called
link that will help you calculate

26
00:02:11.112 --> 00:02:16.103
the path string so that you get
these kind of nice little bit curved

27
00:02:16.103 --> 00:02:19.026
links between each of the tree nodes.

28
00:02:19.026 --> 00:02:21.810
And so
this is how we're getting this tree.

