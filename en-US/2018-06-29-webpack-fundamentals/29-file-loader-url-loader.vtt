WEBVTT

1
00:00:00.470 --> 00:00:05.555
&gt;&gt; Sean Larkin: So before we dive in
to presets, I think there is a couple

2
00:00:05.555 --> 00:00:11.600
other,
&gt;&gt; Sean Larkin: Any, how would I say this?

3
00:00:11.600 --> 00:00:15.200
Must haves or common loaders
that you're gonna come across.

4
00:00:15.200 --> 00:00:18.150
I have a list here that I like to
keep track of so I don't forget.

5
00:00:18.150 --> 00:00:20.280
Or what are some other
dev tool capabilities?

6
00:00:20.280 --> 00:00:27.420
A lot of them we're able to just provide
out-of-the-box with webpack with v4,

7
00:00:27.420 --> 00:00:31.810
because we could make distinctions between
your development environment and not.

8
00:00:32.940 --> 00:00:39.210
So two great examples that we're
gonna add to our basic configuration

9
00:00:39.210 --> 00:00:44.250
is gonna be CSS, or not CSS loader,
URL loader and file loader.

10
00:00:44.250 --> 00:00:48.277
So why don't we install
those dependencies,

11
00:00:48.277 --> 00:00:52.220
npm install file-loader and url-loader.

12
00:00:52.220 --> 00:00:55.083
So go ahead and do that, let me do -dev.

13
00:01:11.953 --> 00:01:12.944
&gt;&gt; Sean Larkin: All right.

14
00:01:15.143 --> 00:01:18.593
&gt;&gt; Sean Larkin: So,
there's a couple applications or

15
00:01:18.593 --> 00:01:21.631
reasons you would wanna use this.

16
00:01:21.631 --> 00:01:27.700
I'm gonna try and
give you some of the easiest or

17
00:01:27.700 --> 00:01:31.053
the most pragmatic ways.

18
00:01:33.494 --> 00:01:36.714
&gt;&gt; Sean Larkin: But really, at least
just try and show you the simplest

19
00:01:36.714 --> 00:01:41.334
functionality and then you'll have
the confidence to kind of be like, well,

20
00:01:41.334 --> 00:01:46.040
wait we could do this as well or
we could apply it to other scenarios.

21
00:01:46.040 --> 00:01:50.771
So the idea is that,
let's add them to our configuration first.

22
00:01:56.150 --> 00:02:00.253
&gt;&gt; Sean Larkin: All right, so, now,
we're on our base configuration,

23
00:02:00.253 --> 00:02:04.377
we have module, and
we'll add two rules or two rule sets.

24
00:02:08.721 --> 00:02:12.181
&gt;&gt; Sean Larkin: So, the test property
is the part that may change or

25
00:02:12.181 --> 00:02:16.080
may depend based on what kind
of assets you're loading.

26
00:02:16.080 --> 00:02:20.450
So this is kind of like an all
around fallback to say,

27
00:02:20.450 --> 00:02:25.210
what if I have something that
doesn't map to a browser API, or

28
00:02:25.210 --> 00:02:31.600
is a source like an image, or
let's say a video, or some type of audio.

29
00:02:33.420 --> 00:02:36.526
I think for me,
the pretty basic one is JPEG.

30
00:02:38.571 --> 00:02:41.801
&gt;&gt; Sean Larkin: And so
what we would wanna do is take and,

31
00:02:41.801 --> 00:02:45.506
we would either wanna base 64 and
line this or

32
00:02:45.506 --> 00:02:51.060
we would just wanna emit this
to our output directory, right?

33
00:02:51.060 --> 00:02:55.800
And that's what URL loader does for you.

34
00:02:55.800 --> 00:02:59.068
So you could say use url-loader.

35
00:03:02.045 --> 00:03:05.675
&gt;&gt; Sean Larkin: And I would encourage
you to, let's grab just any image,

36
00:03:05.675 --> 00:03:08.500
I don't think it really even matters.

37
00:03:08.500 --> 00:03:12.510
If we all wanted to grab the same
one which I always think is fun

38
00:03:12.510 --> 00:03:16.340
we could go to webpack.js.org/branding.

39
00:03:16.340 --> 00:03:19.400
And so we have a branding guide for
webpack or

40
00:03:19.400 --> 00:03:23.600
if you are ever gonna reference our logos.

41
00:03:23.600 --> 00:03:25.310
One, check the license that governs it.

42
00:03:25.310 --> 00:03:30.110
And then also, we have a bunch of
different assets that correspond and

43
00:03:30.110 --> 00:03:33.060
also our style color pallets, etc.

44
00:03:33.060 --> 00:03:36.300
And so, let's see,

45
00:03:36.300 --> 00:03:42.630
why don't we pull down something
like this single JPG file.

46
00:03:42.630 --> 00:03:51.670
We can just download it,
&gt;&gt; Sean Larkin: Let's save image, cool.

47
00:03:51.670 --> 00:03:55.785
I'm just gonna save it
directly to that repo.

48
00:03:55.785 --> 00:03:58.902
Cuz that's easier way, right?

49
00:04:02.397 --> 00:04:08.147
&gt;&gt; Sean Larkin: Webpack logo dot,
there we go, well, be .jpeg.

50
00:04:08.147 --> 00:04:14.584
Cool,
&gt;&gt; Sean Larkin: So now

51
00:04:14.584 --> 00:04:20.773
I guess since it's a regular expression
and sometimes you get .jpeg and .jpg.

52
00:04:20.773 --> 00:04:24.710
Regular expressions are really nice
because it helps you match a variety of

53
00:04:24.710 --> 00:04:26.029
different extensions.

54
00:04:29.204 --> 00:04:31.250
&gt;&gt; Speaker 2: For that, you use string?

55
00:04:33.470 --> 00:04:36.560
That one seemed pretty self apparent
that it would be URL loader, but

56
00:04:36.560 --> 00:04:40.190
are they just gonna match
the NPM module names?

57
00:04:40.190 --> 00:04:41.560
Generally.
&gt;&gt; Sean Larkin: Correct, yes.

58
00:04:43.030 --> 00:04:47.270
So that's a really good question and
we can talk about that.

59
00:04:47.270 --> 00:04:52.990
So you might say,
Sean why do we import plugins,

60
00:04:52.990 --> 00:05:01.225
but why do we only pass node module
references for these loaders, right?

61
00:05:01.225 --> 00:05:06.130
[LAUGH]
The short hand reason is because,

62
00:05:07.940 --> 00:05:09.650
so loaders are serialized.

63
00:05:09.650 --> 00:05:14.550
Basically, the first premise
with Webpack is that

64
00:05:14.550 --> 00:05:19.410
when loaders were originally invented,
the way that you were

65
00:05:19.410 --> 00:05:24.490
using them actually was doing
something like this, css-loader!.

66
00:05:24.490 --> 00:05:28.090
And this syntax still
works today technically.

67
00:05:28.090 --> 00:05:31.820
But we heavily encourage people
not to because it's not valid.

68
00:05:31.820 --> 00:05:36.860
I mean sure,
I know this is not really a valid CSS or

69
00:05:36.860 --> 00:05:41.969
JavaScript, but this way,
&gt;&gt; Sean Larkin: Essentially,

70
00:05:41.969 --> 00:05:46.909
what happens is that we stringify and
we serialize this entire request, but

71
00:05:46.909 --> 00:05:51.153
sometimes you can add options and
even functions as options, and

72
00:05:51.153 --> 00:05:53.930
those aren't serializable.

73
00:05:53.930 --> 00:05:55.980
And so we have to get really crafty,

74
00:05:55.980 --> 00:06:01.085
we couldn't just pass a function itself
in the config, or a function object

75
00:06:01.085 --> 00:06:05.590
cuz we need to be able to serialize that
information, and then we parallelize it.

76
00:06:05.590 --> 00:06:08.260
And so it's kind of like
an architecture constraint.

77
00:06:09.900 --> 00:06:13.790
We've considered trying to
normalize it into just all plugins.

78
00:06:13.790 --> 00:06:16.259
I think now that we've added this

79
00:06:17.360 --> 00:06:21.760
X as module type where we cannot
create new module types in Webpack 4.

80
00:06:21.760 --> 00:06:26.000
We may see the usage of loaders for
things like CSS maybe less common and

81
00:06:26.000 --> 00:06:31.630
maybe more like for
pre-processing and stuff like that.

82
00:06:31.630 --> 00:06:34.975
So that's kind of the short reason
if that kinda answers your question.

83
00:06:34.975 --> 00:06:39.106
&gt;&gt; Speaker 2: Yeah, but the rule of thumb
is, it will always be the NPM module.

84
00:06:39.106 --> 00:06:39.708
&gt;&gt; Sean Larkin: Exactly.

85
00:06:39.708 --> 00:06:40.990
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Sean Larkin: Absolutely.

86
00:06:40.990 --> 00:06:42.674
&gt;&gt; Speaker 2: I've run into some
confusion with that before I said.

87
00:06:42.674 --> 00:06:47.236
&gt;&gt; Sean Larkin: Yes, now you can customize
this because the resolver uses our same

88
00:06:47.236 --> 00:06:48.630
Webpack resolver.

89
00:06:50.600 --> 00:06:53.370
If you are going to write a custom loader,
and we'll learn that tomorrow,

90
00:06:53.370 --> 00:06:55.800
if that's what people wanna learn about.

91
00:06:55.800 --> 00:07:00.540
Is that you have to if you wanna have
your function locally, you can do so but

92
00:07:00.540 --> 00:07:03.180
you have to have a special
resolution pattern for it.

93
00:07:03.180 --> 00:07:06.220
Just set up an alias essentially,
but yeah.

94
00:07:06.220 --> 00:07:10.493
So this is always referencing
the path to that inner module.

95
00:07:13.135 --> 00:07:16.820
&gt;&gt; Sean Larkin: So nice, if we go ahead
and just run, we could run our dev mode.

96
00:07:16.820 --> 00:07:18.750
We haven't done anything yet, technically.

97
00:07:18.750 --> 00:07:22.380
So, we shouldn't see
anything too fancy and

