WEBVTT

1
00:00:00.160 --> 00:00:01.060
&gt;&gt; Sean Larkin: And so

2
00:00:01.060 --> 00:00:05.290
now we can actually just continue
to add modules to our graph here.

3
00:00:05.290 --> 00:00:08.900
We're creating this graph of relationships
between what is used in your app and

4
00:00:08.900 --> 00:00:10.610
what is actually compiled.

5
00:00:10.610 --> 00:00:13.320
So let's create, what's it good?

6
00:00:13.320 --> 00:00:15.370
So we get a nav.

7
00:00:15.370 --> 00:00:17.200
What do we have, we could say footer.

8
00:00:17.200 --> 00:00:20.100
Let me say, footer.js, all right?

9
00:00:20.100 --> 00:00:20.600
Okay.

10
00:00:21.750 --> 00:00:27.630
And we can start out simple again,

11
00:00:27.630 --> 00:00:33.890
but let's just say our footer is gonna
have two parts, a top and a bottom.

12
00:00:35.380 --> 00:00:39.064
And for now we can just use top and
bottom as strings.

13
00:00:42.475 --> 00:00:47.040
&gt;&gt; Sean Larkin: And so you can't really
default export multiple values like this.

14
00:00:47.040 --> 00:00:52.264
I mean sure you could put it in an object,

15
00:00:52.264 --> 00:00:55.620
but that doesn't drill me too much.

16
00:00:55.620 --> 00:00:59.300
What if I only wanna reuse
the top part of the footer?

17
00:00:59.300 --> 00:01:02.040
Like that doesn't seem likely, but
then we've all come across that

18
00:01:02.040 --> 00:01:07.060
scenario when you're like, I don't
need to really encapsulate these two.

19
00:01:07.060 --> 00:01:09.210
And then you end up pulling it out anyway.

20
00:01:09.210 --> 00:01:11.990
So we have these two pieces.

21
00:01:11.990 --> 00:01:15.730
And so we wanna provide both of them
individually to other files, right?

22
00:01:15.730 --> 00:01:18.819
So,
&gt;&gt; Sean Larkin: There's two ways that you

23
00:01:18.819 --> 00:01:19.760
can define this.

24
00:01:19.760 --> 00:01:21.210
The syntax is really flexible.

25
00:01:21.210 --> 00:01:24.090
So since this is already
an expression right here,

26
00:01:25.910 --> 00:01:29.330
you could one, my gosh,
I could learn to type.

27
00:01:29.330 --> 00:01:34.020
Export in front of them both, okay?

28
00:01:34.020 --> 00:01:35.670
So that's cool.

29
00:01:35.670 --> 00:01:40.161
So go ahead and add export to
the front of them, the expressions.

30
00:01:43.113 --> 00:01:43.913
&gt;&gt; Sean Larkin: Now you'll notice,

31
00:01:43.913 --> 00:01:47.320
Webpack didn't rebuild, right, because
we haven't added anything to the graph.

32
00:01:47.320 --> 00:01:49.243
It's not connected to our entry point.

33
00:01:52.695 --> 00:01:57.087
&gt;&gt; Sean Larkin: So
we want to actually access this behavior.

34
00:01:57.087 --> 00:02:00.477
So the syntax is just slightly different,

35
00:02:00.477 --> 00:02:05.477
now we can use this object
destructuring syntax, and pull in.

36
00:02:05.477 --> 00:02:10.304
And you'll even see, actually if you
just have an empty object there,

37
00:02:10.304 --> 00:02:14.085
and you'll like from, and
then you'll provide like,

38
00:02:14.085 --> 00:02:19.575
let's say the path when you go back, so
webpack actually consumes it that time.

39
00:02:19.575 --> 00:02:25.046
And you'll see a rebuild, and
you'll actually see footer there.

40
00:02:25.046 --> 00:02:27.496
But if you're using DS code,

41
00:02:27.496 --> 00:02:32.830
you'll actually get the names
of the exports that are there.

42
00:02:32.830 --> 00:02:34.720
That's super valuable.

43
00:02:34.720 --> 00:02:38.106
I know the Angular community was super
huge on showing people that because

44
00:02:38.106 --> 00:02:44.190
Angular basically super re-exports from
a billion packages into a top level.

45
00:02:44.190 --> 00:02:47.147
So, it's like you have a billion things
that you could choose to pull from

46
00:02:47.147 --> 00:02:48.430
a single package.

47
00:02:48.430 --> 00:02:50.040
That's kind of the same thing with Lodash,
right?

48
00:02:54.220 --> 00:02:55.180
So, awesome.

49
00:02:55.180 --> 00:02:57.640
Now we probably want to,
like, log it also.

50
00:02:57.640 --> 00:03:01.740
So cool.
Top, bottom, great.

51
00:03:01.740 --> 00:03:03.140
We'll cancel our watch mode.

52
00:03:03.140 --> 00:03:05.220
You know I use Ctrl+C on here.

53
00:03:06.520 --> 00:03:09.590
And so we'll just, npm run prod.

54
00:03:13.060 --> 00:03:13.685
&gt;&gt; Sean Larkin: Great.

55
00:03:16.690 --> 00:03:20.557
&gt;&gt; Sean Larkin: So now, and you can always
see in the feedback that we generate,

56
00:03:20.557 --> 00:03:24.880
at least I think we stop at 20 modules or
something like that.

57
00:03:24.880 --> 00:03:29.028
You can see a very clear graph
of here's your entry point.

58
00:03:31.309 --> 00:03:34.477
&gt;&gt; Sean Larkin: It has
a dependency on index.js,

59
00:03:34.477 --> 00:03:37.654
which is your entry point itself.

60
00:03:37.654 --> 00:03:40.751
And it depends on nav.js and footer.

61
00:03:40.751 --> 00:03:45.316
And so you're kind of seeing there's
a graph that's being built here, and

62
00:03:45.316 --> 00:03:48.110
we call this the dependency
graph in webpack.

63
00:03:48.110 --> 00:03:55.218
So if we go and just run this code
in Node again, like the same script,

64
00:03:55.218 --> 00:04:00.136
we can run so like, node ./dist/main.js.

65
00:04:00.136 --> 00:04:01.240
There we go.

66
00:04:01.240 --> 00:04:03.234
We get all the strings there, right?

67
00:04:06.710 --> 00:04:08.815
&gt;&gt; Sean Larkin: And so
I do wanna talk about like,

68
00:04:08.815 --> 00:04:12.280
how do you write to clear
the browser code in modules?

69
00:04:12.280 --> 00:04:15.890
One of the things that early on at first
like I kinda struggle with because it's

70
00:04:15.890 --> 00:04:19.660
like, in modules, you don't want
to have side effects, right?

71
00:04:19.660 --> 00:04:24.280
You want to have everything that's,
anything that you access from another file

72
00:04:24.280 --> 00:04:27.520
should just be through exports or
a default export.

73
00:04:27.520 --> 00:04:29.750
Instead of just, like,
running a script and

74
00:04:29.750 --> 00:04:34.548
evaluating what kind of things
are happening inside of it.

75
00:04:34.548 --> 00:04:38.348
And so we're gonna slowly maybe
transition this over to something that is

76
00:04:38.348 --> 00:04:42.028
a nav element that we're
gonna attach to the dom, and

77
00:04:42.028 --> 00:04:45.098
then we'll have a dev
server that we'll spin up.

