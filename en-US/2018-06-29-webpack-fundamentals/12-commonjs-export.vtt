WEBVTT

1
00:00:00.070 --> 00:00:04.540
&gt;&gt; Sean Larkin: There was a request,
yes, I read those feedbacks.

2
00:00:04.540 --> 00:00:08.880
Somebody said, well,
how do I use CommonJS modules, Sean?

3
00:00:08.880 --> 00:00:11.700
So there are gonna be times when
you're forced against your will,

4
00:00:11.700 --> 00:00:13.280
you have to use CommonJS.

5
00:00:15.740 --> 00:00:16.694
A good example is the React.

6
00:00:16.694 --> 00:00:21.561
It frustrates me so
much that they're still in CommonJS, but

7
00:00:21.561 --> 00:00:27.681
they don't really care, cuz they have
their own module system internally.

8
00:00:27.681 --> 00:00:33.180
Anyways, so yes,
if we wanted to use a CommonJS module,

9
00:00:33.180 --> 00:00:35.850
why don't we just define one so
that we can actually consume it?

10
00:00:35.850 --> 00:00:43.240
So maybe I'll pop back into our dev mode
to get our nice looking incremental build.

11
00:00:44.990 --> 00:00:50.550
And so for CommonJS,
the format is kind of similar.

12
00:00:50.550 --> 00:00:56.300
This is something that I always confused
myself though from time to time.

13
00:00:56.300 --> 00:01:01.658
So let's just say we have something
called, I don't know, let's say, button.

14
00:01:01.658 --> 00:01:04.940
All right, and

15
00:01:04.940 --> 00:01:09.490
we have two options.

16
00:01:09.490 --> 00:01:14.420
So we can do a default export,
or we can do named exports.

17
00:01:14.420 --> 00:01:19.320
Now, I think about my button, if I wanted
to describe what I want my button to do.

18
00:01:19.320 --> 00:01:22.850
Let's say, I want to take a name or

19
00:01:22.850 --> 00:01:27.160
a string, and then that's gonna
be the label, the button label.

20
00:01:28.300 --> 00:01:32.290
The label, and return a element, right?

21
00:01:32.290 --> 00:01:34.055
Okay, that's cool.

22
00:01:34.055 --> 00:01:40.390
So now, I won't use the dom APIs yet,
but we can kinda think about this still.

23
00:01:40.390 --> 00:01:47.060
So module.exports.

24
00:01:47.060 --> 00:01:51.630
See, I'm even questioning myself right
now just thinking about module.exports.

25
00:01:51.630 --> 00:01:56.590
So, with CommonJS,
exports is with an S, not without an S.

26
00:01:56.590 --> 00:02:01.680
So, that's where I always confuse, but
module.exports is your default export.

27
00:02:01.680 --> 00:02:06.810
So, what we're seeing here is
I wanna provide a function

28
00:02:06.810 --> 00:02:13.150
that takes a button name and
then returns something.

29
00:02:13.150 --> 00:02:18.281
So return, why don't we just return,

30
00:02:18.281 --> 00:02:25.592
Button, and
then buttonName as a string for right now?

31
00:02:29.339 --> 00:02:30.426
&gt;&gt; Sean Larkin: Why am
I getting yelled at?

32
00:02:30.426 --> 00:02:33.760
&gt;&gt; [INAUDIBLE]
&gt;&gt; Sean Larkin: Tell me

33
00:02:33.760 --> 00:02:34.590
why you're mad at me.

34
00:02:35.740 --> 00:02:38.030
&gt;&gt; Speaker 2: Parentheses on the end,
around the brackets.

35
00:02:38.030 --> 00:02:39.270
&gt;&gt; Sean Larkin: Thank you.

36
00:02:39.270 --> 00:02:39.890
See?

37
00:02:39.890 --> 00:02:43.575
Crowd-driven development is my favorite.

38
00:02:43.575 --> 00:02:48.367
[LAUGH] Now, of course,
our dev build hasn't recompiled.

39
00:02:48.367 --> 00:02:50.250
We haven't seen anything different, right?

40
00:02:52.670 --> 00:02:54.370
So why don't we go ahead and
consume this, right?

41
00:02:54.370 --> 00:02:59.850
Cuz this would be nice if we take a name,
and then we return something.

42
00:02:59.850 --> 00:03:03.940
And so let's go ahead and pull it in.

43
00:03:03.940 --> 00:03:08.791
Now, we have some rules
in Webpack that just say,

44
00:03:08.791 --> 00:03:14.115
you cannot use CommonJS and
ES syntax in the same file.

45
00:03:14.115 --> 00:03:16.670
It would throw an error.

46
00:03:16.670 --> 00:03:22.644
Or you can't use an export, and then
a default exports, or a module.exports.

47
00:03:24.440 --> 00:03:29.240
So what I tend to do is usually just
use the ESM syntax at the top level.

48
00:03:29.240 --> 00:03:33.380
Webpack supports using require, but

49
00:03:34.560 --> 00:03:39.380
what we'll do is we actually have
interrupt to support using both and

50
00:03:39.380 --> 00:03:42.730
have it work accurately with the correct
cyclical dependencies and light binding.

51
00:03:42.730 --> 00:03:48.572
So since we know this is a default export,
we can actually call this like,

52
00:03:48.572 --> 00:03:54.480
makeButton from, and
now we see button here.

53
00:03:56.750 --> 00:03:59.421
And there we go,
we have Webpack recompiling.

54
00:04:03.029 --> 00:04:07.770
&gt;&gt; Sean Larkin: And sure,
I could call makeButton, and

55
00:04:07.770 --> 00:04:11.275
them pass, My first button.

56
00:04:11.275 --> 00:04:16.862
[LAUGH] Okay, so now,
if you wanted to use,

57
00:04:16.862 --> 00:04:22.152
let's say, what would be a great idea?

58
00:04:22.152 --> 00:04:27.727
We're gonna get that element and pull
it in here, but maybe we have a couple

59
00:04:27.727 --> 00:04:33.020
different styles we wanna apply to it,
or would we style strings?

60
00:04:33.020 --> 00:04:34.030
I think that's fair.

61
00:04:34.030 --> 00:04:37.610
So why don't we create another file?

62
00:04:37.610 --> 00:04:42.320
Let's just say we wanna button-styles.js.

63
00:04:42.320 --> 00:04:47.820
I'm just gonna try and
show you the CommonJS named exports.

64
00:04:47.820 --> 00:04:54.300
Again though, I heavily endorse not
to use CommonJS as much as possible,

65
00:04:56.240 --> 00:05:01.140
and sometimes you might be using it and
you don't even know it on accident.

66
00:05:01.140 --> 00:05:04.810
There are tools like Babble and
Typescript that safely default to

67
00:05:04.810 --> 00:05:09.720
converting your ESM to CommonJS behind
the scenes and then passing it to Webpack.

68
00:05:09.720 --> 00:05:11.980
But Webpack supports ESM out of the box,
and

69
00:05:11.980 --> 00:05:15.820
that's makes it possible to tree shake, to
code eliminate, and all the optimizations.

