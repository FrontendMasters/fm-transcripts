WEBVTT

1
00:00:00.020 --> 00:00:01.880
&gt;&gt; Sean Larkin: And now,
I wanna talk about chaining loaders.

2
00:00:01.880 --> 00:00:05.340
So, what's cool is that,
like I said, you can apply an array.

3
00:00:05.340 --> 00:00:10.030
And so, since the anatomy of a loader

4
00:00:10.030 --> 00:00:14.550
is just a function that takes a source and
it returns a new source.

5
00:00:14.550 --> 00:00:15.050
That's it.

6
00:00:17.300 --> 00:00:22.310
And so, in this specific case,
loaders always execute from right to left.

7
00:00:22.310 --> 00:00:26.020
Now technically under the hood
they actually go right left right.

8
00:00:27.040 --> 00:00:31.630
But the first pass going from left
to right is actually just to collect

9
00:00:31.630 --> 00:00:34.030
metadata, and
it's not really that important.

10
00:00:34.030 --> 00:00:37.070
The important thing is that,
they are going from right to left.

11
00:00:37.070 --> 00:00:41.740
And I'm just going to show you
an example in the editor really quick.

12
00:00:41.740 --> 00:00:43.210
You can think about it like this.

13
00:00:43.210 --> 00:00:48.906
Instead of, let's just say you had,

14
00:00:48.906 --> 00:00:54.250
so that was, style, css and less.

15
00:00:55.370 --> 00:01:00.111
That's how you should kind
of think about it when you

16
00:01:00.111 --> 00:01:03.573
read it inside of the configuration.

17
00:01:03.573 --> 00:01:05.860
It's like you are calling each function.

18
00:01:05.860 --> 00:01:07.090
Yes?
&gt;&gt; Speaker 2: Yeah,

19
00:01:07.090 --> 00:01:11.210
can you have a module matched
multiple rules in a rule set?

20
00:01:11.210 --> 00:01:15.290
Or does the only the first match count?
&gt;&gt; Sean Larkin: No,

21
00:01:15.290 --> 00:01:20.480
it's gonna apply against any rule and

22
00:01:20.480 --> 00:01:25.360
you can choose to have it only apply
against one, like we have a way to do it

23
00:01:26.950 --> 00:01:32.690
There's a key called one of or
any of and you can do either but, yeah.

24
00:01:32.690 --> 00:01:34.320
So it's super flexible.

25
00:01:34.320 --> 00:01:36.530
So you could choose to have
it apply against both or

26
00:01:36.530 --> 00:01:38.260
it can be against just one.

27
00:01:38.260 --> 00:01:39.430
So the answer is yes.

28
00:01:41.030 --> 00:01:44.540
But just remember when it comes to
the ordering, I think this throws people

29
00:01:44.540 --> 00:01:47.560
off because they're usually used to
seeing things from left to right and

30
00:01:47.560 --> 00:01:48.670
going in order.

31
00:01:48.670 --> 00:01:50.510
But I always just remember this pattern.

32
00:01:50.510 --> 00:01:51.890
It's just like calling
a bunch of functions.

33
00:01:51.890 --> 00:01:54.020
That's what they are, and
they return new source values.

34
00:01:55.170 --> 00:01:58.930
Or you could do chaining style
if that's what you like seeing.

35
00:02:01.570 --> 00:02:02.100
Where is it?

36
00:02:02.100 --> 00:02:03.300
There we go.

37
00:02:03.300 --> 00:02:07.230
So if you look at this little
conveyor belt here, we have this.

38
00:02:07.230 --> 00:02:12.114
Let's just say your entry point
was importing style.less, right?

39
00:02:12.114 --> 00:02:19.270
And so as just before WebPack
is about to parse this file,

40
00:02:21.610 --> 00:02:24.860
we look to see if any rule sets
match against this file, right.

41
00:02:24.860 --> 00:02:32.170
So style.less does in fact match this
regular expression cuz it ends in .less.

42
00:02:32.170 --> 00:02:37.190
And so what we do is we're gonna apply
the less-loader first which takes

43
00:02:38.270 --> 00:02:45.380
a, basically it just consumes the source
and converts it to a CSS file.

44
00:02:46.390 --> 00:02:50.080
And then we're gonna take that CSS file
now and pass it to the CSS loader.

45
00:02:50.080 --> 00:02:54.820
And what that does behind the scenes
is it converts it to the style rules in

46
00:02:54.820 --> 00:02:56.550
memory as an array.

47
00:02:56.550 --> 00:03:01.390
That style-loader is equipped to consume.

48
00:03:01.390 --> 00:03:04.370
And then you'll see that once
you pass that to style-loader,

49
00:03:04.370 --> 00:03:08.710
actually what happens is it converts it to
a JavaScript module that says, all right.

50
00:03:08.710 --> 00:03:12.160
Take these styles, slap it in
a script tag on the browser, right?

51
00:03:13.320 --> 00:03:15.490
So, and you might be thinking
to yourself well Shaun,

52
00:03:15.490 --> 00:03:19.400
that doesn't really seem like best
practice for performance, right?

53
00:03:19.400 --> 00:03:20.820
And it's true.

54
00:03:20.820 --> 00:03:23.197
Maybe for
your critical styles you could use this.

55
00:03:23.197 --> 00:03:27.070
But there is lots of different ways
of handling assets in Webpack.

56
00:03:28.130 --> 00:03:32.470
And so for example we have plugins
that will extract this out into

57
00:03:32.470 --> 00:03:35.820
single bundles instead of trying
to load it through JavaScript.

58
00:03:35.820 --> 00:03:38.070
But this is really just a showcase.

59
00:03:38.070 --> 00:03:41.450
Like, chaining,
you can chain multiple loaders together.

60
00:03:41.450 --> 00:03:45.320
Like CSS loader and
style loader are used together.

61
00:03:45.320 --> 00:03:48.590
But, they are separate loaders because
they are meant to be one kind of single

62
00:03:48.590 --> 00:03:49.320
purpose.

63
00:03:49.320 --> 00:03:52.700
Single purpose modules that
do one transform really well.

64
00:03:54.460 --> 00:03:57.120
And there are just a crazy
amount of loaders.

65
00:03:57.120 --> 00:04:00.910
I tried to do a regx search for
-loader and

66
00:04:00.910 --> 00:04:05.100
web pack on mpm registry and
I found a crazy amount of stuff.

67
00:04:05.100 --> 00:04:07.940
Everything from collecting code coverage.

68
00:04:07.940 --> 00:04:10.280
You don't have to apply a transformation.

69
00:04:10.280 --> 00:04:13.810
A loader could just collect metadata and
emit a file on disk, right?

70
00:04:13.810 --> 00:04:16.460
So the code coverage or

71
00:04:16.460 --> 00:04:21.960
like there's all sorts of stuff,
things like responsive image handling.

72
00:04:21.960 --> 00:04:25.380
Like you could inject special JavaScript
for images as you process them.

73
00:04:25.380 --> 00:04:27.360
You could compress images on the fly.

74
00:04:27.360 --> 00:04:34.915
You can handle typescript, and it enables
you to use Babel, like everything.

75
00:04:34.915 --> 00:04:40.643
Pug, Hamill, like for
me being from the Rails ecosystem.

76
00:04:40.643 --> 00:04:43.923
[LAUGH] And you can even,

77
00:04:43.923 --> 00:04:49.012
using Babble, preset PHP, right?

78
00:04:49.012 --> 00:04:52.640
PHP that runs and
is converted to JavaScript.

79
00:04:54.710 --> 00:04:55.210
Yes.

80
00:04:56.610 --> 00:04:59.088
And as Tom Dale said,
where is your god now?

81
00:04:59.088 --> 00:05:02.138
[LAUGH] Yes.

82
00:05:02.138 --> 00:05:06.870
And the possibilities are endless, because
it's super easy to create a loader if it

83
00:05:06.870 --> 00:05:10.750
just takes a source and converts it to
whatever you want and returns that source.

84
00:05:12.540 --> 00:05:18.370
And so like loaders really it tells
Webpack how to interpret files.

85
00:05:18.370 --> 00:05:21.870
How are you gonna process
certain types of files?

86
00:05:21.870 --> 00:05:26.600
And it matches and applies
transformations on a per-file basis,

87
00:05:26.600 --> 00:05:29.312
based on the result path of that file.

88
00:05:29.312 --> 00:05:31.130
And before it gets added
to the dependency graph.

