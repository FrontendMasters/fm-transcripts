WEBVTT

1
00:00:00.210 --> 00:00:01.510
&gt;&gt; Sean Larkin: Let's
add our first module.

2
00:00:01.510 --> 00:00:03.190
We're gonna experience modules now.

3
00:00:03.190 --> 00:00:08.450
I know I talked about it a little bit,
but let's get a taste for how it feels.

4
00:00:08.450 --> 00:00:10.890
Let's actually just
write our first module.

5
00:00:10.890 --> 00:00:14.380
So we should have just an index.js and
it does nothing, right?

6
00:00:14.380 --> 00:00:19.750
[COUGH]
So, why don't we go ahead and

7
00:00:19.750 --> 00:00:21.570
create a new file in our source folder?

8
00:00:23.230 --> 00:00:27.161
And,
&gt;&gt; Sean Larkin: I'm tempted to let you

9
00:00:27.161 --> 00:00:31.720
name it anything you want, but why don't
we start out with just something the same?

10
00:00:31.720 --> 00:00:32.940
We can follow it with the same name.

11
00:00:32.940 --> 00:00:35.630
So we could say nav.

12
00:00:35.630 --> 00:00:39.860
We can call it nav.js, right?

13
00:00:39.860 --> 00:00:44.576
And what we wanna do is let's say we wanna
write a nav element and put it on the dom.

14
00:00:44.576 --> 00:00:46.640
That would be kinda cool, right?

15
00:00:49.170 --> 00:00:55.000
So if we we'll start really small,
and just console log some things,

16
00:00:55.000 --> 00:00:58.250
and then we'll maybe transform the snap
to be something that's more useful.

17
00:00:59.270 --> 00:01:02.990
So the syntax,
we have two things that we could do.

18
00:01:02.990 --> 00:01:06.560
If this is a file that we wanted to
provide lots of different functionality,

19
00:01:07.750 --> 00:01:10.510
we might use the export syntax, and

20
00:01:10.510 --> 00:01:14.773
then whatever variables or expressions
we wanna provide, we would do so.

21
00:01:15.810 --> 00:01:20.480
Or if it's just a single
utility function or

22
00:01:20.480 --> 00:01:23.660
a single primitive,
we wanna use export default.

23
00:01:24.810 --> 00:01:29.350
Now, nobody's gonna stop
you from doing one or

24
00:01:29.350 --> 00:01:32.640
the other, but I wanna just start
out with export defaults, so

25
00:01:32.640 --> 00:01:35.800
we can understand how to use
it on the consumption side.

26
00:01:35.800 --> 00:01:39.010
So let's just start off by saying nav.

27
00:01:39.010 --> 00:01:39.950
That's cool.

28
00:01:39.950 --> 00:01:41.440
Hey, it's a nav.

29
00:01:41.440 --> 00:01:44.430
It's actually what it says it is,
export default nav.

30
00:01:44.430 --> 00:01:48.327
You've written your first module [LAUGH].

31
00:01:48.327 --> 00:01:54.181
Now, what we wanna do is we want this
entry point to have access to this code,

32
00:01:54.181 --> 00:01:57.870
cuz we're gonna do something with it.

33
00:01:57.870 --> 00:02:01.530
So we're gonna use import, and

34
00:02:01.530 --> 00:02:04.640
because it's default,
we can name it anything we want.

35
00:02:04.640 --> 00:02:10.230
So I'm just gonna call it nav,
cuz that's like not surprising to anybody.

36
00:02:11.286 --> 00:02:16.550
From, and
then we're gonna use the relative path

37
00:02:16.550 --> 00:02:19.670
to the index file for that file nav.

38
00:02:20.980 --> 00:02:24.624
And I'm gonna take a moment
to kinda describe,

39
00:02:24.624 --> 00:02:28.280
once we build Webpack here, or we run it.

40
00:02:28.280 --> 00:02:33.050
How this kind of relative pathing works,
because this is actually a CommonJS

41
00:02:33.050 --> 00:02:40.210
pattern that was adopted, but
is super helpful to understand.

42
00:02:40.210 --> 00:02:43.870
So that trying to find out where a certain
file is doesn't become frustrating.

43
00:02:45.010 --> 00:02:46.590
All right, and

44
00:02:46.590 --> 00:02:51.220
we should probably use it, so
the uglify js doesn't strip out our code.

45
00:02:51.220 --> 00:02:55.590
So why don't we just console.log it and
pass pass nav in, right?

46
00:02:55.590 --> 00:02:57.060
Great.

47
00:02:57.060 --> 00:02:59.510
And once we're there, why don't we
just run our build command again?

48
00:02:59.510 --> 00:03:03.030
So let's just run it in production mode.

49
00:03:03.030 --> 00:03:09.881
So mpmrunprod.
&gt;&gt; Sean Larkin: Well, look at that,

50
00:03:09.881 --> 00:03:16.135
I'll give you a second, okay.
&gt;&gt; Sean Larkin: So

51
00:03:16.135 --> 00:03:21.402
you have literally from scratch
not only used an ESM module,

52
00:03:21.402 --> 00:03:27.760
but we've leveraged Webpack's
ability to bundle it up and use it.

53
00:03:27.760 --> 00:03:31.570
What's so cool is that we haven't really
done any browsers specific stuff yet.

54
00:03:31.570 --> 00:03:33.760
So has everybody gotten
as far as building it?

55
00:03:33.760 --> 00:03:37.870
At least everybody here can, okay.

56
00:03:37.870 --> 00:03:42.940
So technically, if we wanted to
see how this code works in action,

57
00:03:42.940 --> 00:03:44.420
we can just run it from node, right?

58
00:03:44.420 --> 00:03:50.180
We don't have any browser specific stuff,
so you might see a dist folder up here.

59
00:03:50.180 --> 00:03:52.830
You maybe like, what's this?

60
00:03:52.830 --> 00:03:56.990
By defaults, so the second default
that we added was the output property.

61
00:03:56.990 --> 00:04:00.440
Basically, just saying,
where does this file get created?

62
00:04:00.440 --> 00:04:04.050
What is the output that Webpack takes and
where does it go?

63
00:04:04.050 --> 00:04:08.860
So by default, it was kinda
canonical in our ecosystem that dist

64
00:04:08.860 --> 00:04:12.266
was where your built web assets will go.

65
00:04:12.266 --> 00:04:13.605
It might be public.

66
00:04:13.605 --> 00:04:16.791
It might be whatever, and
I'll show you how to change that, but

67
00:04:16.791 --> 00:04:17.860
dist is the default.

68
00:04:17.860 --> 00:04:23.700
And I think it's just main.js when
you just have a single entry.

69
00:04:23.700 --> 00:04:25.766
So if we look at this code,
you're like, Sean, it's minimized,

70
00:04:25.766 --> 00:04:26.727
I don't understand any of it.

71
00:04:26.727 --> 00:04:30.229
And it's a lot of code for
some tiny modules, but

72
00:04:30.229 --> 00:04:33.410
there's our console log, right?

73
00:04:33.410 --> 00:04:35.460
So why don't we just run this in node now?

74
00:04:35.460 --> 00:04:40.528
So if I go back into the terminal,

75
00:04:40.528 --> 00:04:49.515
node/ dist/main.js.
&gt;&gt; Sean Larkin: Wow!

76
00:04:49.515 --> 00:04:51.750
That looks pretty cool.

77
00:04:51.750 --> 00:04:54.630
We now have been able
to have that completed.

78
00:04:54.630 --> 00:04:56.570
We took two modules.

79
00:04:56.570 --> 00:04:58.340
We put them together.

80
00:04:58.340 --> 00:05:03.110
And now, its functionality is executed in
the same way that we wrote the modules.

