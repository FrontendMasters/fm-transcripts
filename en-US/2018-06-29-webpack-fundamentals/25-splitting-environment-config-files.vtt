WEBVTT

1
00:00:00.250 --> 00:00:04.640
&gt;&gt; Sean Larkin: So what we wanna do is
we want a way to conditionally load

2
00:00:04.640 --> 00:00:09.170
an extra JavaScript module that's going
to kind of merge in with our base set

3
00:00:09.170 --> 00:00:10.560
of configuration items, right?

4
00:00:11.690 --> 00:00:15.440
And so the best way that

5
00:00:15.440 --> 00:00:21.000
I like to do it is I actually
like to just declare a variable.

6
00:00:21.000 --> 00:00:26.130
So what I want you to do, out of the lines
that are right here, is just pull

7
00:00:27.580 --> 00:00:32.030
in this line right here, modeConfig.

8
00:00:32.030 --> 00:00:36.607
So modeConfig, we'll jump into our main

9
00:00:36.607 --> 00:00:41.590
configuration, hide the bar, there we go.

10
00:00:42.710 --> 00:00:51.430
So we'll say const modeConfig equals
a function that takes an argument.

11
00:00:51.430 --> 00:00:56.087
And it returns the require that apparently

12
00:00:56.087 --> 00:01:01.142
returns a function that you can call,
right?

13
00:01:01.142 --> 00:01:03.950
So let's break down what this is doing.

14
00:01:03.950 --> 00:01:07.280
So remember how I said
CommonJS can be abused, right?

15
00:01:07.280 --> 00:01:10.940
You can abuse CommonJS because
require is just a function.

16
00:01:10.940 --> 00:01:18.037
And so in this case, what we're doing
here is we are just calling require.

17
00:01:18.037 --> 00:01:22.371
And based on what we pass
into this argument here,

18
00:01:22.371 --> 00:01:27.118
it's either gonna go look for
webpack.production or

19
00:01:27.118 --> 00:01:30.130
webpack.development, right?

20
00:01:30.130 --> 00:01:37.320
So we're just leveraging the Node or
the env.mode, we're passing it in.

21
00:01:38.530 --> 00:01:44.465
And so let's jump back over.
&gt;&gt; Sean Larkin: So

22
00:01:44.465 --> 00:01:49.406
if we also look here, I've kind of
added some interesting defaults to

23
00:01:49.406 --> 00:01:53.650
our arguments, and
this is just kind like a safety net.

24
00:01:53.650 --> 00:02:00.690
I think this allows us to be able to,
let's say if somebody just jumped in for

25
00:02:00.690 --> 00:02:04.820
the first time, and
wasn't sure what they were doing.

26
00:02:04.820 --> 00:02:08.160
And just wanted to run and
have an experience, by adding.

27
00:02:08.160 --> 00:02:11.358
So I'll kind of explain
syntactically what it's doing.

28
00:02:11.358 --> 00:02:15.821
So what we're doing is
we're actually providing a,

29
00:02:15.821 --> 00:02:19.225
let's see, where is it, equals mode.

30
00:02:19.225 --> 00:02:23.709
[SOUND] There we go.

31
00:02:23.709 --> 00:02:26.850
So this syntax right here
is just the one argument.

32
00:02:26.850 --> 00:02:29.570
But with ES6,
you can provide defaults, right?

33
00:02:29.570 --> 00:02:36.655
So if an object isn't even passed in,
we're gonna default it to,

34
00:02:36.655 --> 00:02:41.717
so env would essentially
be mode in presets with

35
00:02:41.717 --> 00:02:47.705
like an empty array.
&gt;&gt; Sean Larkin: And

36
00:02:47.705 --> 00:02:52.849
so that way if somebody just went and run,
like for example, just went yarn webpack

37
00:02:52.849 --> 00:02:58.340
or ran webpack, it would still work and
just load the basic configuration.

38
00:02:58.340 --> 00:03:00.910
So it's just kind of a fallback and
a nice pattern to have.

39
00:03:02.230 --> 00:03:06.030
So now we're kinda building
up a little bit into this.

40
00:03:06.030 --> 00:03:11.980
We're able to have the mode, but
how are we going to compose this object?

41
00:03:11.980 --> 00:03:15.080
We have this common configuration, but

42
00:03:15.080 --> 00:03:20.220
we need a way to merge in
other configurations, right?

43
00:03:20.220 --> 00:03:24.393
And in a way that's safe,
because this config has arrays, and

44
00:03:24.393 --> 00:03:28.976
so just object assign is not gonna
be really valuable to you, right?

45
00:03:28.976 --> 00:03:33.248
And it's not gonna respect different
things like array orders or

46
00:03:33.248 --> 00:03:36.670
other sorts of properties
in your webpack config.

47
00:03:36.670 --> 00:03:41.960
So one of our maintainers actually wrote a
really great library called webpack-merge,

48
00:03:41.960 --> 00:03:44.790
has anybody used it here, webpack-merge?

49
00:03:44.790 --> 00:03:48.990
I love it, cuz it's essentially just
object assign for webpack-configs.

50
00:03:48.990 --> 00:03:55.045
And so you can add it just by saying,
npm install webpack-merge -d or

51
00:03:55.045 --> 00:03:58.210
whatever, if you wanna add the d flag,
that's fine.

52
00:04:00.010 --> 00:04:04.921
Or for me, yarn add webpack-merge.
&gt;&gt; Sean Larkin: Woah,

53
00:04:04.921 --> 00:04:08.948
it got angry.
&gt;&gt; Sean Larkin: I'm still hiding in

54
00:04:08.948 --> 00:04:11.951
the bin folder, that was weird,

55
00:04:11.951 --> 00:04:16.930
yarn add webpack-merge.
&gt;&gt; Sean Larkin: So

56
00:04:16.930 --> 00:04:23.135
why don't we go ahead and
pull in that module?

57
00:04:23.135 --> 00:04:26.769
Now, there we go.
&gt;&gt; Sean Larkin: So I'd like to say

58
00:04:26.769 --> 00:04:32.303
something like const webpackMerge
= require and then webpack-merge.

59
00:04:32.303 --> 00:04:34.294
And so there are many other options,

60
00:04:34.294 --> 00:04:37.390
but by default it's really
just doing object assign.

61
00:04:37.390 --> 00:04:41.300
So if you've used object assign before,
it's the exact same behavior.

62
00:04:41.300 --> 00:04:45.860
You can pass a simple default, and
then you can add whatever other thing you

63
00:04:45.860 --> 00:04:50.370
want to compose in the same
manner on top of it.

64
00:04:50.370 --> 00:04:55.540
And so you can kinda see here,
what I've done is, I return webpackMerge,

65
00:04:55.540 --> 00:04:58.110
and our base configuration
is just the first argument.

66
00:04:59.810 --> 00:05:03.730
And then you'll see modeConfig,
which returns either a production or

67
00:05:03.730 --> 00:05:06.435
development configuration,
is added on second.

68
00:05:06.435 --> 00:05:09.810
So I'll just add this
code in together here.

69
00:05:09.810 --> 00:05:15.165
So webpackMerge, so
now we're just returning a function

70
00:05:15.165 --> 00:05:20.318
that will return our composed
configuration, right?

71
00:05:20.318 --> 00:05:26.326
And the second argument to
it will be our modeConfig.

72
00:05:26.326 --> 00:05:30.310
Now I try to chunk this out so
it's a little easier to read.

73
00:05:30.310 --> 00:05:35.050
I know prettier doesn't always make it
the best, but we can totally try it here.

74
00:05:35.050 --> 00:05:38.985
So modeConfig.
&gt;&gt; Sean Larkin: And

75
00:05:38.985 --> 00:05:45.508
we can just pass in,
&gt;&gt; Sean Larkin: Mode presets,

76
00:05:45.508 --> 00:05:46.575
that's kind of just passing

77
00:05:46.575 --> 00:05:51.266
the env to the other configuration.
&gt;&gt; Sean Larkin: I kind of like

78
00:05:51.266 --> 00:05:53.853
making available,
I know that's just set mode,

79
00:05:53.853 --> 00:05:59.088
let's just set mode I think that's fine.
&gt;&gt; Sean Larkin: There we go,

80
00:05:59.088 --> 00:06:02.232
so why don't we just try running like,

81
00:06:02.232 --> 00:06:06.772
will our code run?
&gt;&gt; Sean Larkin: I'll give you

82
00:06:06.772 --> 00:06:07.375
just a second.

83
00:06:21.252 --> 00:06:25.138
&gt;&gt; Sean Larkin: Now where did I break

84
00:06:25.138 --> 00:06:33.137
it?
&gt;&gt; Sean Larkin: Wait,

85
00:06:33.137 --> 00:06:36.485
/build-utils/webpack, did
I spell it wrong?

86
00:06:36.485 --> 00:06:41.639
build-utils/, I know why,

87
00:06:41.639 --> 00:06:46.264
oops.
&gt;&gt; Sean Larkin: There

88
00:06:46.264 --> 00:06:49.733
we go.
&gt;&gt; Sean Larkin: Here we

89
00:06:49.733 --> 00:06:54.432
go.
&gt;&gt; Sean Larkin: Did anybody have

90
00:06:54.432 --> 00:06:56.290
any troubles building?

91
00:06:56.290 --> 00:06:58.400
We're adding a little bit more complexity,
and so

92
00:06:58.400 --> 00:07:02.240
this may, I wanna take time on it,
this is super important.

93
00:07:02.240 --> 00:07:06.600
This is something where you could adopt a
pattern like this, and you could reuse it

94
00:07:06.600 --> 00:07:13.010
across any work environment that you want,
cuz it's incredible generic.

95
00:07:13.010 --> 00:07:15.850
But I think having these
patterns make it really easy to

96
00:07:16.890 --> 00:07:19.900
kind of isolate configuration details.

97
00:07:19.900 --> 00:07:23.155
Especially when we get into
kind of my pattern of presets.

98
00:07:23.155 --> 00:07:27.314
&gt;&gt; Sean Larkin: Looks like when I ran here

99
00:07:27.314 --> 00:07:32.670
we did have a successful build.

100
00:07:32.670 --> 00:07:36.383
And really nothing's changed, right,
because we haven't added anything into

101
00:07:36.383 --> 00:07:42.946
those development and production configs.
&gt;&gt; Speaker 2: And

102
00:07:42.946 --> 00:07:47.248
right now we can trust that behind the
scenes the merge is happening, even though

103
00:07:47.248 --> 00:07:51.990
we're not seeing the result of that yet.
&gt;&gt; Sean Larkin: Yeah, we can try it.

104
00:07:51.990 --> 00:07:55.170
Technically we could say our
mode is something that we.

105
00:07:55.170 --> 00:07:58.229
Well, yeah, absolutely, so

106
00:07:58.229 --> 00:08:04.112
why don't we change the name of
the bundle in our production

107
00:08:04.112 --> 00:08:09.289
mode to,
&gt;&gt; Sean Larkin: We

108
00:08:09.289 --> 00:08:13.393
could jump into webpack.production,
we could say output, and

109
00:08:13.393 --> 00:08:17.524
say filename, and let's,
&gt;&gt; Sean Larkin: We have

110
00:08:17.524 --> 00:08:22.150
special string interpolate.

111
00:08:23.250 --> 00:08:26.679
We can use these string helpers that
webpack provides out of the box.

112
00:08:28.070 --> 00:08:33.160
And this allows us to have hashing for
JavaScript modules when they're created.

113
00:08:33.160 --> 00:08:35.070
So technically in theory,

114
00:08:35.070 --> 00:08:40.100
we can just add this tiny partial
that is this partial config here.

115
00:08:40.100 --> 00:08:44.569
So output, filename, etc
&gt;&gt; Speaker 2: Just adding the array chunk,

116
00:08:44.569 --> 00:08:47.410
or I guess it's not an array,
but whatever, right?

117
00:08:47.410 --> 00:08:50.410
It's chunk, it patches it, that's it?
&gt;&gt; Sean Larkin: Yep,

118
00:08:50.410 --> 00:08:52.070
that's how you get hashing
support with webpack.

119
00:08:52.070 --> 00:08:53.458
Now there is like a bunch of
different string helpers.

120
00:08:53.458 --> 00:08:56.920
I think one of name, one is chuckhash.

121
00:08:56.920 --> 00:09:01.440
Or no, I'm sorry, it's not chunk,
it's hash, I apologize.

122
00:09:01.440 --> 00:09:03.320
Do I have chunkhash there originally?

123
00:09:03.320 --> 00:09:04.380
I meant to say chunckhash.

124
00:09:08.200 --> 00:09:11.450
And I can,
if you remind me later on day two,

125
00:09:11.450 --> 00:09:13.380
I can show you where all the options are.

126
00:09:13.380 --> 00:09:18.790
You can actually provide emojis.
&gt;&gt; Speaker 2: Sounds useful.

127
00:09:18.790 --> 00:09:19.320
&gt;&gt; Sean Larkin: Yeah, well,

128
00:09:19.320 --> 00:09:22.680
some people, they wanna have that feature.

129
00:09:22.680 --> 00:09:26.578
So if I run yarn prod again.
&gt;&gt; Sean Larkin: Let's see,

130
00:09:26.578 --> 00:09:27.592
what do we get now?

131
00:09:27.592 --> 00:09:31.969
Hey.
&gt;&gt; Sean Larkin: So

132
00:09:31.969 --> 00:09:34.610
there you go, that's in a separate file.

133
00:09:34.610 --> 00:09:36.570
You look in your dist folder,
there's that.

134
00:09:36.570 --> 00:09:39.020
What's awesome is that hey guess what?

135
00:09:39.020 --> 00:09:43.860
This is super about html-webpack-plugin,

136
00:09:43.860 --> 00:09:45.880
it just reads the hash and
put it in for you.

137
00:09:45.880 --> 00:09:48.740
If hash has changed think of how
tedious that would be to have to

138
00:09:48.740 --> 00:09:50.080
write a script that does this for you.

