WEBVTT

1
00:00:00.110 --> 00:00:03.230
&gt;&gt; Speaker 1: So can you use
webpack-dev-server for server side

2
00:00:03.230 --> 00:00:07.049
development, or is it only client side?
&gt;&gt; Sean Larkin: Heck yes, you can.

3
00:00:07.049 --> 00:00:11.700
Well, okay, so you can use it,
but you actually use a piece

4
00:00:11.700 --> 00:00:16.110
that abstracts it called
webpack-dev-middleware.

5
00:00:16.110 --> 00:00:22.370
So webpack-dev-server is just made up
of webpack-dev-middleware and express.

6
00:00:22.370 --> 00:00:25.043
And it's essentially an express plugin.

7
00:00:25.043 --> 00:00:27.858
So you can actually,
we have the package itself standalone,

8
00:00:27.858 --> 00:00:30.010
so I believe it's under webpack.

9
00:00:30.010 --> 00:00:34.440
But you can just do npm install,
webpack-dev-middleware, and

10
00:00:34.440 --> 00:00:37.244
you add it to your express application,
just like any other plugin.

11
00:00:39.470 --> 00:00:43.750
The only difference is you're gonna
pass your config object to it and

12
00:00:43.750 --> 00:00:47.370
require your config manually
cuz there's no CLI around it.

13
00:00:47.370 --> 00:00:52.025
And you just add that as part of your
dev middleware plugin configuration

14
00:00:52.025 --> 00:00:55.388
option.
&gt;&gt; Sean Larkin: But that's really nice cuz

15
00:00:55.388 --> 00:00:59.180
once you have things like hot module
replacement on the server side, it's like.

16
00:00:59.180 --> 00:01:03.278
So nice, I love that.
&gt;&gt; Sean Larkin: And it's great for

17
00:01:03.278 --> 00:01:06.150
API developments,
like reloading your server instantly.

18
00:01:07.330 --> 00:01:11.480
I used to write Ruby with Sinatra for
APIs,

19
00:01:11.480 --> 00:01:16.300
and it would just pain me how much I'd
have to kill it, start up webrick again.

20
00:01:18.570 --> 00:01:21.211
It's like the little things
which provide a lot of value.

21
00:01:23.263 --> 00:01:24.573
&gt;&gt; Speaker 1: Is there a way to utilize

22
00:01:24.573 --> 00:01:27.399
the HTML webpack plugin
with multiple templates?

23
00:01:27.399 --> 00:01:32.135
And if it is possible to have it check
all the HTML files in a certain folder

24
00:01:32.135 --> 00:01:36.951
automatically instead of having to
define a new HTML webpack plugin every

25
00:01:36.951 --> 00:01:40.311
single time?
&gt;&gt; Sean Larkin: So yes and no, so for

26
00:01:40.311 --> 00:01:44.947
each instance, so
it sounds like this person has

27
00:01:44.947 --> 00:01:49.823
a multi-page app architecture,
I'm guessing.

28
00:01:49.823 --> 00:01:52.742
And it gets a little bit more complicated,
where yes,

29
00:01:52.742 --> 00:01:56.680
you do actually have to have
a new instance of this plugin.

30
00:01:56.680 --> 00:02:00.554
But you can just pass the template a path,
so

31
00:02:00.554 --> 00:02:05.491
much that I wrote a plugin
while I was at Mutual of Omaha.

32
00:02:05.491 --> 00:02:07.263
Now they're maintaining it still, so

33
00:02:07.263 --> 00:02:10.280
I don't know if they've gotten it
to webpack for compatible yet.

34
00:02:10.280 --> 00:02:16.256
Github.com, so
there is actually an open source plugin,

35
00:02:16.256 --> 00:02:21.430
mutualofomaha/multipage-webpack-plugin.

36
00:02:21.430 --> 00:02:26.091
And this kind of aims to simplify
kind of what they're experiencing,

37
00:02:26.091 --> 00:02:28.929
where essentially,
&gt;&gt; Sean Larkin: Yeah,

38
00:02:28.929 --> 00:02:32.238
it looks like it hasn't updated yet
to webpack 4.

39
00:02:32.238 --> 00:02:37.344
But I was working in a Laravel shop,
Laravel PHP, and so

40
00:02:37.344 --> 00:02:44.101
they had lots of crazy nested folder
conventions, it's so ridiculous.

41
00:02:44.101 --> 00:02:48.857
But essentially, we wanted to make a new
entry point, and we actually took and

42
00:02:48.857 --> 00:02:51.248
compiled it to a custom twig template.

43
00:02:51.248 --> 00:02:55.840
And so that's just
the html-webpack-plugin capability.

44
00:02:55.840 --> 00:03:01.390
But all we're doing here is, here's
kind of what some of the underlying.

45
00:03:03.050 --> 00:03:07.490
What you could do if you didn't wanna use
this plugin is you could literally just

46
00:03:07.490 --> 00:03:11.680
access your entries, and
then for each entry,

47
00:03:11.680 --> 00:03:14.130
create a new instance of the plugin.

48
00:03:14.130 --> 00:03:18.420
And you just have to make sure that
you're filtering down what chunks

49
00:03:18.420 --> 00:03:23.300
html-webpack-plugin is
injecting into the file, right?

50
00:03:23.300 --> 00:03:26.980
Because if you had a multi-page app,
and you have multiple entry points,

51
00:03:27.980 --> 00:03:32.400
when you have multiple entry points,
those are meant to be one per page.

52
00:03:32.400 --> 00:03:36.190
And so you wouldn't want
html-webpack-plugin to inject them all

53
00:03:36.190 --> 00:03:40.150
into each template, you would just want
the one you need for each template.

54
00:03:40.150 --> 00:03:43.670
So yes, there is a way to do it.

55
00:03:43.670 --> 00:03:46.269
It's not as eloquent.

56
00:03:46.269 --> 00:03:48.950
And that's kind of the motivation for
creating this plugin.

57
00:03:48.950 --> 00:03:50.120
You can look in the examples.

58
00:03:51.300 --> 00:03:56.010
Essentially, the simplest example would
just look at the three entry points.

59
00:03:56.010 --> 00:04:01.140
And then it just generates,
&gt;&gt; Sean Larkin: Let's see,

60
00:04:01.140 --> 00:04:02.756
simple, and the config,

61
00:04:02.756 --> 00:04:07.400
what's nice is all you'd have to do is
pass this in as your configuration.

62
00:04:08.460 --> 00:04:10.810
So you could look at that, take a look,

63
00:04:10.810 --> 00:04:15.140
maybe your first open source opportunity
to convert it to v4 [LAUGH].

64
00:04:15.140 --> 00:04:17.460
I know the devs at Mutual,
so they're helpful.

65
00:04:17.460 --> 00:04:19.820
Yes?
&gt;&gt; Speaker 1: Are there situations where

66
00:04:19.820 --> 00:04:25.170
webpack, the process runs into
an out of memory error, and

67
00:04:25.170 --> 00:04:29.020
where would you capture that exception?
&gt;&gt; Sean Larkin: So essentially,

68
00:04:29.020 --> 00:04:32.950
yeah, when you think about in just
programmatic complexity, right,

69
00:04:32.950 --> 00:04:38.120
so, webpack has to create an entire
graph of all of your source files.

70
00:04:38.120 --> 00:04:40.950
And store it in memory before
it creates a bundle, right?

71
00:04:40.950 --> 00:04:46.950
So who here has taken computer science or
knows big o complexity?

72
00:04:46.950 --> 00:04:50.639
Anybody?
Okay, so your space complexity for

73
00:04:50.639 --> 00:04:54.571
webpack, or webpack space complexity,

74
00:04:54.571 --> 00:05:00.543
will be linear in terms of how
many modules you have in your app.

75
00:05:00.543 --> 00:05:04.750
So you will end up consuming more and
more memory because it needs more memory.

76
00:05:04.750 --> 00:05:09.617
So if it's for a production build and
it's just a build and

77
00:05:09.617 --> 00:05:15.187
not dev server, I would say
increasing the memory limit for Node.

78
00:05:15.187 --> 00:05:21.065
And Airbnb has gone all the way up to,
they have a 32 gig.

79
00:05:21.065 --> 00:05:26.533
32 GIGs are allocated to Node,
because they're just so huge.

80
00:05:26.533 --> 00:05:29.335
But we have some caching for webpack 5.

81
00:05:29.335 --> 00:05:32.740
We have a whole caching store
that's aiming to solve this.

82
00:05:32.740 --> 00:05:34.260
So that would be one way to cache it.

83
00:05:34.260 --> 00:05:38.021
The other one would be,
if you're seeing it in webpack-dev-server,

84
00:05:38.021 --> 00:05:39.633
then it might be a memory leak.

85
00:05:39.633 --> 00:05:44.180
Or you might be doing
something like adding a hash,

86
00:05:44.180 --> 00:05:46.836
but still doing a dev server.

87
00:05:46.836 --> 00:05:52.710
If you're creating hash in memory that's
unique every time you change a file,

88
00:05:52.710 --> 00:05:56.492
then it's keeping all of
that in memory over time.

89
00:05:56.492 --> 00:05:59.492
And so
it could just be you're using dev-server,

90
00:05:59.492 --> 00:06:01.840
but using prog features like hashing.

91
00:06:01.840 --> 00:06:04.490
And so you should probably turn
that off for your dev mode.

