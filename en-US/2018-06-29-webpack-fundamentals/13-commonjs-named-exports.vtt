WEBVTT

1
00:00:00.030 --> 00:00:02.510
&gt;&gt; Sean Larkin: If you want to
actually do a named export, so

2
00:00:02.510 --> 00:00:08.340
let's just say we want a couple styles and
man, I'm so bad at CSS.

3
00:00:08.340 --> 00:00:12.885
So const, let's say redButton,

4
00:00:12.885 --> 00:00:17.437
let's just say const redButton.

5
00:00:17.437 --> 00:00:20.105
Maybe I'll just call it red =, so

6
00:00:20.105 --> 00:00:25.440
we would pass this into the style and
we would say color red, right?

7
00:00:25.440 --> 00:00:29.324
I'm pretty sure that's valid, and

8
00:00:29.324 --> 00:00:34.344
then let's say we want
to be blue = color blue.

9
00:00:34.344 --> 00:00:36.098
And then if we really wanna be,

10
00:00:36.098 --> 00:00:40.050
since all of us with JavaScript
are masters of abstraction, right?

11
00:00:40.050 --> 00:00:45.570
[LAUGH]
makecolorstyle

12
00:00:45.570 --> 00:00:52.290
= the function that takes a color,
and then returns,

13
00:00:52.290 --> 00:00:57.220
or even avoid the return cuz we could
just do a string right here, right?

14
00:00:57.220 --> 00:01:01.080
So we could say color

15
00:01:03.320 --> 00:01:06.990
learning the little es6 as we go,
we could say color.

16
00:01:08.510 --> 00:01:12.100
Great, and then I'm using prettier
which is auto format set but,

17
00:01:12.100 --> 00:01:14.250
it's the same syntax.

18
00:01:14.250 --> 00:01:16.471
Cool so now we have three named
exports that we could pull.

19
00:01:19.105 --> 00:01:19.998
&gt;&gt; Sean Larkin: I'll keep it there for

20
00:01:19.998 --> 00:01:23.956
a second.
&gt;&gt; Speaker 2: Do you need

21
00:01:23.956 --> 00:01:26.676
actually export?
&gt;&gt; Sean Larkin: I was just about to get

22
00:01:26.676 --> 00:01:29.780
there, yes so,
now we wanna actually export these values.

23
00:01:29.780 --> 00:01:31.125
So we're gonna say,

24
00:01:31.125 --> 00:01:36.553
instead of module.exports,
&gt;&gt; Sean Larkin: We will do exports.red,

25
00:01:36.553 --> 00:01:40.830
and now in this case,
you can just say red = red.

26
00:01:40.830 --> 00:01:42.750
Now this is the preferred way, so

27
00:01:42.750 --> 00:01:46.760
like when I'm ever writing
modules in whatever syntax,

28
00:01:46.760 --> 00:01:51.540
because webpack is run on node, and so
all of the webpack code is common JS.

29
00:01:53.320 --> 00:01:57.540
And so like I prefer almost always,
there's no rule.

30
00:01:57.540 --> 00:02:01.270
You could have it right above the
declaration top of a file, just has to be

31
00:02:01.270 --> 00:02:06.806
in the right execution order.
&gt;&gt; Sean Larkin: This

32
00:02:06.806 --> 00:02:10.940
could be named whatever you want,
as long as its equal to makecolorstyle.

33
00:02:10.940 --> 00:02:17.500
So I could say that, I just I always
name them the same thing, S-T-Y-L-E.

34
00:02:17.500 --> 00:02:21.120
So for me, and
I recommend you adopt this practice,

35
00:02:21.120 --> 00:02:24.370
which is leave your exports
at the bottom of the file.

36
00:02:24.370 --> 00:02:29.765
Contextually if you're just some other
person you're diving into a code base for

37
00:02:29.765 --> 00:02:30.866
the first time.

38
00:02:30.866 --> 00:02:33.585
Do you wanna have to search around
through a bunch of different exports

39
00:02:33.585 --> 00:02:34.514
throughout your file?

40
00:02:34.514 --> 00:02:37.947
Or do you just wanna go to the bottom and
see exactly what's provided?

41
00:02:37.947 --> 00:02:42.664
I think that's super helpful for
context, for readability,

42
00:02:42.664 --> 00:02:46.758
and in the same way if you see
where was it the header, or

43
00:02:46.758 --> 00:02:49.527
the footer jump back to footer.js.

44
00:02:49.527 --> 00:02:54.210
There's actually an easier syntax, you can
actually use destructuring with export.

45
00:02:54.210 --> 00:02:59.320
So if I said export, and I do object,
I can just pass top bottom like this.

46
00:02:59.320 --> 00:03:03.812
Oops, except spelled right.
&gt;&gt; Sean Larkin: There we go,

47
00:03:03.812 --> 00:03:08.380
it's great cuz if you spell the wrong
export name, when it's ESM webpack knows.

48
00:03:08.380 --> 00:03:11.901
It's like,
&gt;&gt; Sean Larkin: Yeah,

49
00:03:11.901 --> 00:03:14.659
I can't find that export that's
used in the entry point.

50
00:03:14.659 --> 00:03:17.716
It'll complain to you,
&gt;&gt; Sean Larkin: Which I love that,

51
00:03:17.716 --> 00:03:20.760
that was a new feature
we've just added for v4.

52
00:03:20.760 --> 00:03:21.980
So I always say,

53
00:03:21.980 --> 00:03:26.710
put them all at the bottom I mean,
your codes not gonna break if you don't,

54
00:03:26.710 --> 00:03:32.770
but I think this is a great pattern
that you can start adopting right away.

55
00:03:32.770 --> 00:03:38.110
So I guess even in the same way,
we can do, let's refactor this one.

56
00:03:38.110 --> 00:03:43.630
So here, I'll jump back to button-styles,
so is everybody good on that one?

57
00:03:43.630 --> 00:03:50.040
Cool, and move the export down
to the bottom, with footer.js.

58
00:03:50.040 --> 00:03:53.950
Go ahead and do that,
gonna get you used to doing this kind of

59
00:03:53.950 --> 00:03:59.802
pattern.
&gt;&gt; Sean Larkin: And

60
00:03:59.802 --> 00:04:05.180
then also, like you may be like well
Shawn, you got module exports here.

61
00:04:05.180 --> 00:04:06.800
And you're right, that's kinda weird.

62
00:04:06.800 --> 00:04:09.080
And we don't get a named
function out of it.

63
00:04:09.080 --> 00:04:12.930
So or at least just a variable,
so let's do the same thing.

64
00:04:12.930 --> 00:04:16.399
So we could just remove
this module to exports, and

65
00:04:16.399 --> 00:04:23.758
just say const,
&gt;&gt; Sean Larkin: MakeButton

66
00:04:23.758 --> 00:04:29.581
is equal to a function that returns and
we could just say module.exports

67
00:04:29.581 --> 00:04:36.601
= makeButton.
&gt;&gt; Sean Larkin: And

68
00:04:36.601 --> 00:04:39.982
what I like about this is that
having module that exports at

69
00:04:39.982 --> 00:04:42.640
the top is kinda hard
to do js documentation.

70
00:04:42.640 --> 00:04:47.930
So if you follow me on Twitter
you've been noticing as a recent,

71
00:04:47.930 --> 00:04:52.010
I've been extremely passionate about
adding js docs on the webpack source code.

72
00:04:52.010 --> 00:04:56.141
And the reason why is because type script,
you can actually get full

73
00:04:56.141 --> 00:05:00.148
type script checking on your
application by just adding js docs.

74
00:05:00.148 --> 00:05:05.428
And so, when you are using, utilities
work way better to have the named

75
00:05:05.428 --> 00:05:10.740
parameter instead of just the module or
the module dot exports.

76
00:05:10.740 --> 00:05:12.215
So I could say something like this,

77
00:05:12.215 --> 00:05:15.824
takes a string,
&gt;&gt; Sean Larkin: Button name returns,

78
00:05:15.824 --> 00:05:18.470
I can probably say, element.

79
00:05:18.470 --> 00:05:23.920
Yeah, anyways but then you get
instant TypeScript typing out of it.

80
00:05:23.920 --> 00:05:28.100
It's kind of a neat feature but,
I digress, okay.

81
00:05:28.100 --> 00:05:32.760
So now let's see where
we I wanted to actually

82
00:05:32.760 --> 00:05:38.170
consume the common JS file and
its individual exports right?

83
00:05:38.170 --> 00:05:41.810
So we still just have webpack running and
that's the best part.

84
00:05:41.810 --> 00:05:46.600
So now we want to take and
import from button

85
00:05:46.600 --> 00:05:51.634
styles,
&gt;&gt; Sean Larkin: And

86
00:05:51.634 --> 00:05:56.575
now you have access to red,
&gt;&gt; Sean Larkin: And blue,

87
00:05:56.575 --> 00:05:59.020
and even makeColorStyle.

88
00:05:59.020 --> 00:06:02.960
You don't always have to,
you don't have to pull every export.

89
00:06:02.960 --> 00:06:08.073
Like that's the beautiful
thing like let's say like,

90
00:06:08.073 --> 00:06:13.092
I don't use red and
blue because I love mustard color.

91
00:06:13.092 --> 00:06:16.899
And so
I'm gonna just only need this function.

92
00:06:16.899 --> 00:06:20.132
And so what's beautiful about this
syntax is that you should only

93
00:06:20.132 --> 00:06:22.990
actually pull in what you're using.

94
00:06:22.990 --> 00:06:26.860
And the reason why is because
webpack leverages this information

95
00:06:26.860 --> 00:06:29.420
to only bundle what you're using.

96
00:06:29.420 --> 00:06:37.496
So let's just say makeColorStyle,
&gt;&gt; Sean Larkin: Look I love it,

97
00:06:37.496 --> 00:06:41.746
you get all the intellicents right out
of the box, and I didn't even type it

98
00:06:41.746 --> 00:06:45.679
just uses automatic inference of
the typescript language service.

99
00:06:45.679 --> 00:06:48.240
Is mustard actually valid CSS style?

100
00:06:49.290 --> 00:06:52.520
Marigold is, i know that, but
I can't spell marigold, so

101
00:06:52.520 --> 00:06:55.548
let's just do cyan or yes cyan.

102
00:06:55.548 --> 00:07:02.526
[COUGH]
&gt;&gt; Sean Larkin: So if you

103
00:07:02.526 --> 00:07:07.357
code autoformats, my just auto formated
because I added too many parameters.

