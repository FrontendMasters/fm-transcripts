WEBVTT

1
00:00:00.177 --> 00:00:02.862
&gt;&gt; Sean Larkin: The goal for
you is to now understand.

2
00:00:02.862 --> 00:00:05.519
So once we're done with this section,

3
00:00:05.519 --> 00:00:10.671
we're gonna dive into actually building
up the config, adding features,

4
00:00:10.671 --> 00:00:15.841
adding loaders, adding support for
things, and maybe talking about why.

5
00:00:15.841 --> 00:00:19.801
And it's gonna be a lot more comfortable
once you understand what these things

6
00:00:19.801 --> 00:00:20.407
are doing.

7
00:00:20.407 --> 00:00:22.954
I find that more useful
than just having you

8
00:00:22.954 --> 00:00:27.285
arbitrarily code with me a bunch of
stuff that you're like what is this?

9
00:00:27.285 --> 00:00:30.942
So there's four core concepts.

10
00:00:30.942 --> 00:00:33.925
So the first one is called entry, and

11
00:00:33.925 --> 00:00:37.785
we kind of had an introduction
to this already.

12
00:00:37.785 --> 00:00:42.666
The entry point, really, it's not like
the entry property on the config.

13
00:00:42.666 --> 00:00:44.170
We're talking about more as the concept.

14
00:00:44.170 --> 00:00:48.586
So say you have this diagram,
and you have some code, and

15
00:00:48.586 --> 00:00:52.092
some modules, and
you have a toppable file.

16
00:00:52.092 --> 00:00:55.587
I think I was writing angular at
the time when I created this and so

17
00:00:55.587 --> 00:00:57.152
there was a bootstrap file.

18
00:00:57.152 --> 00:01:01.883
And it imports a component, and
that component imports some lib and

19
00:01:01.883 --> 00:01:03.960
also some other components.

20
00:01:03.960 --> 00:01:07.089
And that lib has a dependency.

21
00:01:07.089 --> 00:01:09.161
This is how JavaScript works.

22
00:01:09.161 --> 00:01:11.713
And let's say we get really weird and

23
00:01:11.713 --> 00:01:15.673
sometimes your dependencies
aren't just JavaScript.

24
00:01:15.673 --> 00:01:19.371
Sometimes for a component library,

25
00:01:19.371 --> 00:01:24.032
you might rely on some SaaS or
CSS or whatever.

26
00:01:24.032 --> 00:01:27.740
But the point is that that top file,
that is your entry point.

27
00:01:27.740 --> 00:01:28.996
That is the entry.

28
00:01:28.996 --> 00:01:33.811
It is the root of what is now
kind of a graph here, right?

29
00:01:33.811 --> 00:01:41.090
And it's the first JavaScript file to
kinda kick off your functionality.

30
00:01:41.090 --> 00:01:46.476
And so we define this using an entry
property in the configuration.

31
00:01:46.476 --> 00:01:47.740
There's a couple ways or

32
00:01:47.740 --> 00:01:51.841
a couple different types of data types
that you can pass into the entry property.

33
00:01:51.841 --> 00:01:55.301
But the simplest is just a string,
which is just a relative path.

34
00:01:55.301 --> 00:01:59.846
And you can even see here,
you can step through the code,

35
00:01:59.846 --> 00:02:04.213
webpack is gonna trace through
each of these imports.

36
00:02:04.213 --> 00:02:06.133
And then recursively look for

37
00:02:06.133 --> 00:02:09.910
other dependencies in those
files until creates a graph.

38
00:02:12.017 --> 00:02:15.426
&gt;&gt; Sean Larkin: And that's the entry
point, that's what the entry is.

39
00:02:15.426 --> 00:02:22.691
It's very simple, it's not complex in what
is happening behind the scenes either.

40
00:02:22.691 --> 00:02:26.665
We just passed that string to webpack's
compiler and then it goes and

41
00:02:26.665 --> 00:02:29.008
resolves it and tries to create a graph.

42
00:02:29.008 --> 00:02:33.195
So when you think about entry as
the concept, the entrypoint or

43
00:02:33.195 --> 00:02:37.935
the entry property, the entry concept
is really about telling webpack

44
00:02:37.935 --> 00:02:40.632
what you want to include in the browser.

45
00:02:40.632 --> 00:02:44.334
What do you want your code to
be bundled in its contents?

46
00:02:44.334 --> 00:02:47.431
And it works together
with the output property.

