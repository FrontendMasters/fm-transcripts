WEBVTT

1
00:00:00.008 --> 00:00:03.702
&gt;&gt; Sean Larkin: So the last thing that I
think is gonna be really fun to talk about

2
00:00:03.702 --> 00:00:08.599
is,
&gt;&gt; Sean Larkin: Is going to be like,

3
00:00:08.599 --> 00:00:09.940
presets.

4
00:00:09.940 --> 00:00:14.434
And it's gonna kinda tie around why
we would add a preset system, and

5
00:00:14.434 --> 00:00:19.242
it's kinda related to some experimentation
that I'm doing in our source

6
00:00:19.242 --> 00:00:22.963
code right now to implement
a feature that would look like

7
00:00:22.963 --> 00:00:28.480
this.
&gt;&gt; Sean Larkin: I do wanna pull this up.

8
00:00:28.480 --> 00:00:33.985
I wanna look at the repo
I had open before.

9
00:00:43.784 --> 00:00:44.829
&gt;&gt; Sean Larkin: I'm gonna jump to that

10
00:00:44.829 --> 00:00:53.579
branch I was in.
&gt;&gt; Sean Larkin: And

11
00:00:53.579 --> 00:00:57.983
so, if we are ready, so I wanna talk
about this code really quick and

12
00:00:57.983 --> 00:01:03.102
just explain it.
&gt;&gt; Sean Larkin: And

13
00:01:03.102 --> 00:01:06.991
so, think of,
when I started using Webpack,

14
00:01:06.991 --> 00:01:10.880
one of the things that
frustrated me was that,

15
00:01:10.880 --> 00:01:14.967
I would add something to
see if it would work, and

16
00:01:14.967 --> 00:01:21.230
then I'd either forget to remove it,
or I'd irrevocably break things.

17
00:01:21.230 --> 00:01:23.744
I'd be like, what did I do?

18
00:01:23.744 --> 00:01:27.522
And I don't think that's really,
that's not a great experience,

19
00:01:27.522 --> 00:01:30.069
it doesn't leave people feeling confident.

20
00:01:30.069 --> 00:01:35.077
And although we've solved
a lot of that just by making

21
00:01:35.077 --> 00:01:40.751
defaults of the mode property,
the idea of presets is that,

22
00:01:40.751 --> 00:01:45.630
there are gonna be more than just dev and
prod.

23
00:01:45.630 --> 00:01:48.450
You're gonna have some different
scenarios that might just be like,

24
00:01:48.450 --> 00:01:54.760
I wanna try this feature, or I wanna
analyze my build just this one time,

25
00:01:54.760 --> 00:01:58.440
so it could be ad hoc or it could
maybe be something your CI just runs.

26
00:01:58.440 --> 00:02:02.710
But you don't want it like shipped
right in your prog, config,

27
00:02:02.710 --> 00:02:06.602
because it's not relevant
every time you run it, right?

28
00:02:06.602 --> 00:02:09.530
Now, that's kind of
where presets came from.

29
00:02:09.530 --> 00:02:12.180
Sometimes, I call them add-ons.

30
00:02:12.180 --> 00:02:14.807
You can call it whatever you want really.

31
00:02:14.807 --> 00:02:19.140
But if you look at this code here and
this is what we'll be writing is,

32
00:02:19.140 --> 00:02:23.178
we're taking and we're defining
a function that takes an env,

33
00:02:23.178 --> 00:02:27.586
takes the whole, I guess, env that
we would get from the main config,

34
00:02:27.586 --> 00:02:30.390
now we're pulling out the presets option.

35
00:02:31.670 --> 00:02:36.330
Now, these little syntax here is just
saying, it's just doing a flatten.

36
00:02:36.330 --> 00:02:41.900
So we might get one preset in an array or
we might get an array of array presets,

37
00:02:41.900 --> 00:02:45.350
but it's just saying like,
flatten these into a list of strings.

38
00:02:47.000 --> 00:02:51.530
And then, we're gonna map these into
a require function that takes that

39
00:02:51.530 --> 00:02:55.616
preset name,
just as we did the webpack.prod or

40
00:02:55.616 --> 00:03:00.120
webpack.dev, or development,
and it's gonna call them.

41
00:03:00.120 --> 00:03:03.150
And so that way,
we essentially have one or two or

42
00:03:03.150 --> 00:03:06.140
three, or if we have four strings in here,

43
00:03:06.140 --> 00:03:09.989
we're gonna get four objects that
might be little configs, right?

44
00:03:11.040 --> 00:03:13.630
And then, what we do is,
we just merge them up, and then we return.

45
00:03:15.180 --> 00:03:18.422
So why don't we implement this?

46
00:03:18.422 --> 00:03:21.920
And then, I'll show you kinda how
it relates in our code itself.

47
00:03:24.300 --> 00:03:27.740
Always nice to have this one side by side,

48
00:03:27.740 --> 00:03:30.030
cuz sometimes I write it
a little different every time.

49
00:03:31.290 --> 00:03:35.860
Or maybe, I should just publish
it to a node module, right?

50
00:03:35.860 --> 00:03:36.850
That would be kind of useful.

51
00:03:38.750 --> 00:03:41.750
So what you can do,
actually that's a great idea.

52
00:03:44.130 --> 00:03:48.039
Let's go into our load presets file,
I had you create it early on.

53
00:03:50.410 --> 00:03:52.410
And let's go ahead and
implement this code.

54
00:03:52.410 --> 00:03:56.432
So first thing is, we're gonna
eventually need webpack-merge, so

55
00:03:56.432 --> 00:04:03.052
we'll require it.
&gt;&gt; Sean Larkin: Okay,

56
00:04:03.052 --> 00:04:08.521
and then,
&gt;&gt; Sean Larkin: I think,

57
00:04:08.521 --> 00:04:11.450
maybe, I'm just gonna see,
I do wanna change it slightly.

58
00:04:11.450 --> 00:04:16.750
I'll say, applyPresets equals a function.

59
00:04:18.140 --> 00:04:19.868
I think that just looks nicer and

60
00:04:19.868 --> 00:04:23.710
I was just preaching you should have
moduled out exports at the bottom.

61
00:04:23.710 --> 00:04:25.730
So, applyPresets.

62
00:04:25.730 --> 00:04:29.151
I don't know, I like that a little better.
&gt;&gt; Sean Larkin: And

63
00:04:29.151 --> 00:04:36.580
it's gonna take env.
&gt;&gt; Sean Larkin: Now, the reason why I

64
00:04:36.580 --> 00:04:41.483
think I said I want to pull the whole env
in here, was because you wanna pass them

65
00:04:41.483 --> 00:04:47.240
down to these other configs in case you
wanted to have individual behavior.

66
00:04:47.240 --> 00:04:49.870
Now remember,
this is just convention, right?

67
00:04:50.990 --> 00:04:54.836
This is just convention that's
gonna help you understand, hey,

68
00:04:54.836 --> 00:04:57.787
I can compose these things
as many ways as I want to,

69
00:04:57.787 --> 00:05:02.570
and the options are almost limitless.
&gt;&gt; Sean Larkin: So

70
00:05:02.570 --> 00:05:08.323
presents equals env, so we're just doing
a de-structure to grab that property,

71
00:05:08.323 --> 00:05:12.020
and then I'm gonna say,
const mergedPresets =, so

72
00:05:12.020 --> 00:05:17.047
essentially just flattening them,
I could say flattened the presets.

73
00:05:19.110 --> 00:05:24.798
So concat, I could pull down Andre Stalz's

74
00:05:24.798 --> 00:05:29.545
dot smoosh.
&gt;&gt; Sean Larkin: For

75
00:05:29.545 --> 00:05:31.347
any of those who are in
Twitter actively and

76
00:05:31.347 --> 00:05:37.148
know about this smoosh gig.
&gt;&gt; Sean Larkin: And

77
00:05:37.148 --> 00:05:40.260
the, what we're gonna do is, this is just
gonna be an array of strings, right?

78
00:05:40.260 --> 00:05:44.016
So we're gonna take and say,

79
00:05:44.016 --> 00:05:48.500
let's see, this is kinda fun.

80
00:05:48.500 --> 00:05:50.152
I'm just gonna, really quick,

81
00:05:50.152 --> 00:05:53.849
you don't have to do this.
&gt;&gt; Sean Larkin: But

82
00:05:53.849 --> 00:06:00.017
it helps with the IntelliSense.
&gt;&gt; Sean Larkin: There

83
00:06:00.017 --> 00:06:04.277
we go.
&gt;&gt; Sean Larkin: So I can say,

84
00:06:04.277 --> 00:06:10.710
mergedConfigs = merged Presets.map.

85
00:06:10.710 --> 00:06:13.360
See now, I get an array string,
string and everything.

86
00:06:13.360 --> 00:06:18.087
So nice.

87
00:06:18.087 --> 00:06:22.689
And I'm gonna say,
preset name, we're just gonna

88
00:06:22.689 --> 00:06:27.768
return a require,
&gt;&gt; Sean Larkin: And

89
00:06:27.768 --> 00:06:32.507
a template string inside of it.
&gt;&gt; Sean Larkin: That's just

90
00:06:32.507 --> 00:06:35.809
pulling the old presets/webpack., and

91
00:06:35.809 --> 00:06:42.436
then preset name.
&gt;&gt; Sean Larkin: And then, we

92
00:06:42.436 --> 00:06:52.360
wanna call it and pass the env in there.
&gt;&gt; Sean Larkin: Here we go.

93
00:06:52.360 --> 00:06:53.690
That looks nice and formatted.

94
00:06:53.690 --> 00:06:59.938
Okay, so now, we're just gonna return
just a webpack-merged version of that.

95
00:06:59.938 --> 00:07:05.967
So return webpack-merged, and
we start with an empty object,

96
00:07:05.967 --> 00:07:09.875
just as if you're doing object assign and

97
00:07:09.875 --> 00:07:14.342
just use the rest parameter
to pipe them all in as

98
00:07:14.342 --> 00:07:19.719
individual parameters.
&gt;&gt; Sean Larkin: Does anybody have any

99
00:07:19.719 --> 00:07:24.186
question about what this code is doing?
&gt;&gt; Sean Larkin: Or

100
00:07:24.186 --> 00:07:30.750
need any clarification?
&gt;&gt; Sean Larkin: Do

101
00:07:30.750 --> 00:07:34.716
you think this will be useful if it
was just a standalone module, and

102
00:07:34.716 --> 00:07:37.230
you could just add your own preset system?

103
00:07:38.320 --> 00:07:38.860
Maybe?

104
00:07:38.860 --> 00:07:41.410
Okay, we've been thinking
about this a lot.

105
00:07:43.280 --> 00:07:48.190
So why don't we jump into our
regular config, and so now,

106
00:07:48.190 --> 00:07:53.630
we just need to add a little bit of extra
code here to implement the merge presets.

107
00:07:53.630 --> 00:07:57.524
So if we jumped in the root of the repo,
just gonna verify,

108
00:07:57.524 --> 00:08:00.472
it's just adding it to the bottom, right?

109
00:08:00.472 --> 00:08:05.493
Yep, so
what you can do is essentially add,

110
00:08:05.493 --> 00:08:12.662
we wanna import this module,
&gt;&gt; Sean Larkin: And

111
00:08:12.662 --> 00:08:21.071
I call it const presetConfig.
&gt;&gt; Sean Larkin: Build-utils,

112
00:08:21.071 --> 00:08:27.659
think that was right, right?
&gt;&gt; Sean Larkin: I'm so

113
00:08:27.659 --> 00:08:29.987
spoiled and I look for
the IntelliSense there.

114
00:08:31.120 --> 00:08:37.380
Load,
&gt;&gt; Sean Larkin: Now, all we have to do is,

115
00:08:37.380 --> 00:08:41.329
we're gonna get presets passed to
us from the env parameter, right?

116
00:08:42.740 --> 00:08:45.190
So we can now just go ahead and
add it at the bottom.

117
00:08:46.230 --> 00:08:50.452
So we could say presetsConfig, and
it look like the way that I passed

118
00:08:50.452 --> 00:08:55.173
it in just to make sure,
&gt;&gt; Sean Larkin: I'm

119
00:08:55.173 --> 00:08:57.650
keeping track of doing
it consistently here.

120
00:08:59.560 --> 00:09:04.575
Where did I just have that?
&gt;&gt; Sean Larkin: Then close it.

121
00:09:10.935 --> 00:09:11.908
&gt;&gt; Sean Larkin: Yeah, okay, so

122
00:09:11.908 --> 00:09:13.436
we did destructor code and

123
00:09:13.436 --> 00:09:18.295
presets back into it.
&gt;&gt; Sean Larkin: So in theory,

124
00:09:18.295 --> 00:09:23.302
what does this mean you can do now?
&gt;&gt; Sean Larkin: Now,

125
00:09:23.302 --> 00:09:27.649
we can actually take and
create tiny configs, or smaller configs,

126
00:09:27.649 --> 00:09:31.860
that just have one-off features
that we would wanna implement.

127
00:09:32.960 --> 00:09:34.468
So we could create a new preset, and

128
00:09:34.468 --> 00:09:37.485
it just has to follow the same naming
pattern that we've been doing, so

129
00:09:37.485 --> 00:09:43.243
like webpack.typescript.
&gt;&gt; Sean Larkin: Typescript.config.

130
00:09:45.266 --> 00:09:46.871
&gt;&gt; Sean Larkin: Or, I'm sorry,

131
00:09:46.871 --> 00:09:48.610
typescript.js.

132
00:09:48.610 --> 00:09:53.392
So now, on a whim,
I can go ahead and say like,

133
00:09:53.392 --> 00:10:02.661
oops,
&gt;&gt; Sean Larkin: And

134
00:10:02.661 --> 00:10:08.061
I could add a single rule,
like module, rules,

135
00:10:08.061 --> 00:10:14.254
in the same way that we would
wanna support TypeScript,

136
00:10:14.254 --> 00:10:22.042
ts, use ts-loader,
&gt;&gt; Sean Larkin: Except making an object.

137
00:10:24.719 --> 00:10:27.590
&gt;&gt; Sean Larkin: There we go.

138
00:10:27.590 --> 00:10:32.210
And, of course we would
wanna add TypeScript.

139
00:10:32.210 --> 00:10:37.380
Like, yarn add ts-loader TypeScript,
I just use that

140
00:10:37.380 --> 00:10:44.241
next.
&gt;&gt; Sean Larkin: But

141
00:10:44.241 --> 00:10:48.534
what's super cool now is that,
I can add this capability just by

142
00:10:48.534 --> 00:10:52.682
adding a parameter,
like a command line parameter, right?

143
00:10:52.682 --> 00:10:58.138
So we know that you can pass in
other properties on this env.

144
00:10:58.138 --> 00:11:02.564
So let's say, if I wanted to say it like,

145
00:11:02.564 --> 00:11:06.868
I wanna run prod typescript, you know?

146
00:11:06.868 --> 00:11:11.943
So I would run, npm run prod,
I get everything I get

147
00:11:11.943 --> 00:11:16.781
out of the box with prod,
but now I'm gonna say,

148
00:11:16.781 --> 00:11:21.495
env.presets.
&gt;&gt; Sean Larkin: And then,

149
00:11:21.495 --> 00:11:26.940
typescript.
&gt;&gt; Sean Larkin: So if we were to try and

150
00:11:26.940 --> 00:11:31.978
run this,
&gt;&gt; Sean Larkin: npm run,

151
00:11:31.978 --> 00:11:36.700
yarn run prod typescript,

152
00:11:40.640 --> 00:11:41.517
&gt;&gt; Sean Larkin: What did I miss?

153
00:11:47.818 --> 00:11:51.182
&gt;&gt; Sean Larkin: Oops, I know.

154
00:11:51.182 --> 00:11:53.450
This file should be up a level,

155
00:11:53.450 --> 00:11:58.534
in build-utils.
&gt;&gt; Sean Larkin: And,

156
00:12:08.787 --> 00:12:10.075
&gt;&gt; Sean Larkin: Cannot find module

157
00:12:10.075 --> 00:12:14.320
presets.webpack.undefined.
&gt;&gt; Speaker 2: Do you need the double dash

158
00:12:14.320 --> 00:12:21.398
in the scripts?
&gt;&gt; Sean Larkin: Double dash.

159
00:12:21.398 --> 00:12:24.438
&gt;&gt; Speaker 2: The package.json scripts.

160
00:12:24.438 --> 00:12:27.167
&gt;&gt; Sean Larkin: My gosh, yes, I absolutely

161
00:12:27.167 --> 00:12:32.590
do.
&gt;&gt; Sean Larkin: You saved me today, Kayla.

162
00:12:32.590 --> 00:12:34.782
Kayla's got me.

163
00:12:34.782 --> 00:12:36.550
So of course,
we just added TypeScript support.

164
00:12:36.550 --> 00:12:39.333
But you're like, Sean, how do I really
know there's typescript support?

165
00:12:39.333 --> 00:12:41.152
Like, let's write some typescript.

166
00:12:41.152 --> 00:12:42.236
Let's do it.

167
00:12:42.236 --> 00:12:45.892
Like this is the power of having
an add-on is that, at any time,

168
00:12:45.892 --> 00:12:48.076
you can just pilot whatever you want.

169
00:12:48.076 --> 00:12:51.732
So like, I don't know, we could just say,
I'm just going to do foo.ts in this case.

170
00:12:51.732 --> 00:12:55.685
So, I could say like, export.

171
00:12:55.685 --> 00:12:57.822
I'll do something really typescript-y.

172
00:12:57.822 --> 00:13:06.565
Export default class something, like foo.

173
00:13:06.565 --> 00:13:13.795
And then like, let's use some illegal
syntax that wouldn't be correct.

174
00:13:13.795 --> 00:13:18.706
I could just say like, public readonly.

175
00:13:18.706 --> 00:13:23.930
I'm so out, public bar,
right, and constructor.

176
00:13:23.930 --> 00:13:27.499
This should throw instantly, right,
if this was just JavaScript.

177
00:13:27.499 --> 00:13:31.065
And then, this.bar equals,
I don't know, like hi.

178
00:13:31.065 --> 00:13:34.354
Like really, the content doesn't matter,
it's just the fact that we're writing

179
00:13:34.354 --> 00:13:36.874
TypeScript d syntax, and
we're getting TypeScript out of it.

180
00:13:36.874 --> 00:13:42.775
So like, if I ran it again,
&gt;&gt; Sean Larkin: There we go,

181
00:13:42.775 --> 00:13:45.964
it builds just like JavaScript.

182
00:13:45.964 --> 00:13:51.428
Wait, well,
I should import it just to make, import,

183
00:13:56.371 --> 00:13:59.318
&gt;&gt; Sean Larkin: Import foo from,

184
00:13:59.318 --> 00:14:01.482
there we go.

185
00:14:01.482 --> 00:14:04.329
Now, I really feel, we have our case here.

186
00:14:07.787 --> 00:14:12.126
&gt;&gt; Sean Larkin: We got an error, foo.ts.

187
00:14:12.126 --> 00:14:16.308
And we'll talk about this a little more, I
just wanna focus on the preset itself and

188
00:14:16.308 --> 00:14:18.053
not like the typescript support.

189
00:14:18.053 --> 00:14:22.061
I know what's missing but, there we go,
so there is an actual typescript error.

190
00:14:22.061 --> 00:14:25.164
Like, if they compile and
run, it was like, hey dude,

191
00:14:25.164 --> 00:14:28.946
if you wanna use typescripts,
you have to have a ts config, right?

192
00:14:28.946 --> 00:14:33.405
So we can go into the ad
hoc typescript case itself,

193
00:14:33.405 --> 00:14:38.386
tomorrow, if that's something
you think is valuable or

194
00:14:38.386 --> 00:14:42.327
supporting it,
the main point here is that,

195
00:14:42.327 --> 00:14:48.579
we just like on the whim of a flag,
just made it possible to add a preset.

196
00:14:48.579 --> 00:14:52.366
So one preset that I think is really
valuable that you should all add,

197
00:14:52.366 --> 00:14:56.233
do we have any questions about
the preset or the code that was written?

198
00:14:56.233 --> 00:15:01.405
Has anybody struggled with adding
the support or, and we'll create one

199
00:15:01.405 --> 00:15:06.661
that you can actually use, I'm just
gonna remove this typescript one and

200
00:15:06.661 --> 00:15:12.564
save the branch,
&gt;&gt; Sean Larkin: And

201
00:15:12.564 --> 00:15:17.445
delete the texture file, and
that reference, there we go.

202
00:15:17.445 --> 00:15:18.934
Because, we'll spend some time on it.

203
00:15:26.941 --> 00:15:27.828
&gt;&gt; Sean Larkin: Get checkout,

204
00:15:30.236 --> 00:15:34.888
&gt;&gt; Sean Larkin: 4013-adding-presets.

205
00:15:47.409 --> 00:15:48.352
&gt;&gt; Sean Larkin: 04013.

206
00:15:50.601 --> 00:15:51.561
&gt;&gt; Sean Larkin: Awesome.

