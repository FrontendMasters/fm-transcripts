WEBVTT

1
00:00:00.100 --> 00:00:06.130
&gt;&gt; Sean Larkin: So now you'll see here,
&gt;&gt; Sean Larkin: We took it a step further.

2
00:00:06.130 --> 00:00:11.363
So if you want to debug a Node application
or a Node script, you can do so

3
00:00:11.363 --> 00:00:15.915
simply by running Node and
then passing a couple arguments.

4
00:00:15.915 --> 00:00:21.094
And I'll just show you
the inline version here,

5
00:00:21.094 --> 00:00:27.422
so for example, debug,
debug this, debug this, right.

6
00:00:27.422 --> 00:00:32.835
Let's just say for any script,
you would have to run node --inspect

7
00:00:32.835 --> 00:00:37.680
--debug-brk, which just says
break on the first line.

8
00:00:37.680 --> 00:00:42.604
I think it's now inspect break,
sorry, inspect-brk,

9
00:00:42.604 --> 00:00:44.830
and then it'll just be
the path to your file.

10
00:00:45.860 --> 00:00:50.460
So of course, you're like, well, Sean,
we're just calling a CLI command, and so

11
00:00:50.460 --> 00:00:55.470
how do we debug that webpack or
whatever, like foo.js?

12
00:00:55.470 --> 00:01:02.060
So if you have a debugger statement, what
happens is, you can actually load this.

13
00:01:02.060 --> 00:01:04.160
Let's see what's script
files we have in here now.

14
00:01:04.160 --> 00:01:07.080
So does this have a module or anything?

15
00:01:07.080 --> 00:01:09.600
We should just dive in and
understand how the debugger works.

16
00:01:09.600 --> 00:01:15.040
So actually, go ahead and
write this command,

17
00:01:15.040 --> 00:01:19.256
so debug this and then index.js, so

18
00:01:19.256 --> 00:01:26.600
node --inspect --inspect-brk and
then src/index.js.

19
00:01:27.770 --> 00:01:31.130
Now do we all have, at the least,

20
00:01:31.130 --> 00:01:34.750
Chrome running on your computer maybe,
or if you have VS code?

21
00:01:34.750 --> 00:01:36.710
I'll show you the way
to do it with Chrome.

22
00:01:36.710 --> 00:01:39.319
You can actually do it
inside of VS code too, but

23
00:01:39.319 --> 00:01:43.048
I don't wanna derail too much cuz
I know not everybody's using it.

24
00:01:43.048 --> 00:01:46.290
And so,
what happens when we run this, right?

25
00:01:46.290 --> 00:01:55.460
So npm run debugthis,
&gt;&gt; Sean Larkin: Wow, what happens?

26
00:01:55.460 --> 00:01:57.520
We now get this fancy URL, right?

27
00:01:59.420 --> 00:02:03.190
But what's super cool, and we're gonna be
adding this feature for Microsoft Edge.

28
00:02:03.190 --> 00:02:05.653
You might be like, Sean,
why are you on Chrome?

29
00:02:05.653 --> 00:02:08.578
[LAUGH] In the URL,

30
00:02:08.578 --> 00:02:14.460
you just type chrome//inspect.

31
00:02:14.460 --> 00:02:16.160
You'll notice that you'll actually see,

32
00:02:16.160 --> 00:02:19.170
so I'm on a little bit earlier
version of Chrome here.

33
00:02:19.170 --> 00:02:23.145
You might even see a little note icon
that you can click on, or if you go to

34
00:02:23.145 --> 00:02:29.490
chrome://inspect, it'll show remote
targets and you'll see this target here.

35
00:02:29.490 --> 00:02:33.360
And there's even a place that says
Open dedicated dev tools for Node.

36
00:02:33.360 --> 00:02:39.219
So if you click on that, look,
it's actually broken in the module.

37
00:02:39.219 --> 00:02:40.630
There's your break point.

38
00:02:40.630 --> 00:02:42.610
That's your module scope.

39
00:02:42.610 --> 00:02:44.980
This is how Node loads files.

40
00:02:44.980 --> 00:02:48.390
And it's ironic, you're like,
well, it's an iffy.

41
00:02:49.400 --> 00:02:51.024
My goodness.

42
00:02:51.024 --> 00:02:55.966
And so you can even open up a console,
and you could say just global,

43
00:02:55.966 --> 00:02:59.280
I think is the version of window in Node.

44
00:02:59.280 --> 00:03:02.220
Oops,
&gt;&gt; Sean Larkin: There you go.

45
00:03:02.220 --> 00:03:06.654
Or process, it's like process.emv.

46
00:03:06.654 --> 00:03:08.760
Look, you know exactly what
version you're running.

47
00:03:08.760 --> 00:03:11.189
It might be eight,
it might be ten with the architecture.

48
00:03:11.189 --> 00:03:14.460
You're inside of Node right now, and
you're stopped at a break point.

49
00:03:14.460 --> 00:03:17.098
It just turns out we don't have any code.

50
00:03:17.098 --> 00:03:21.787
So if you wrote a debugger statement,
you can actually break into it and

51
00:03:21.787 --> 00:03:23.833
see what that code looks like.

52
00:03:23.833 --> 00:03:26.001
So keep this context in mind.

53
00:03:26.001 --> 00:03:33.294
So this is the value for this, especially
when you're working with Node tools.

54
00:03:33.294 --> 00:03:37.257
It's really nice to be able to
debug through this kind of stuff.

55
00:03:37.257 --> 00:03:42.683
[COUGH] And so therefore,
we kinda have to reformat our scripts if

56
00:03:42.683 --> 00:03:52.412
we want to be able to debug webpack.
&gt;&gt; Sean Larkin: And

57
00:03:52.412 --> 00:03:56.084
if you have those dedicated Node tools,
you instantly get,

58
00:03:56.084 --> 00:03:58.320
it actually switches context over.

59
00:03:58.320 --> 00:04:03.140
Sometimes it can be annoying, but
I think there's a configuration for it.

60
00:04:03.140 --> 00:04:07.218
But now you're literally in webpack
right now, when you run this.

61
00:04:07.218 --> 00:04:11.180
Here and I'll go back to the script so
you can see and follow along.

62
00:04:11.180 --> 00:04:15.586
So now we're literally inside
of the Node process, and

63
00:04:15.586 --> 00:04:21.506
actually what you'll see is we're
in the webpack.js, the binary file.

64
00:04:21.506 --> 00:04:25.038
We could even peruse this code and
be like, well, what's webpack doing here?

65
00:04:25.038 --> 00:04:27.030
And it just requires the webpack CLI.

66
00:04:27.030 --> 00:04:31.834
[LAUGH] And you can step through it, just
as if you were stepping through anything

67
00:04:31.834 --> 00:04:38.777
else.
&gt;&gt; Sean Larkin: And

68
00:04:38.777 --> 00:04:43.359
that's super nice if you ever wanted
to write your own custom plugin or

69
00:04:43.359 --> 00:04:47.290
custom loader or
find out why something is failing.

70
00:04:47.290 --> 00:04:49.509
This is super valuable.

71
00:04:49.509 --> 00:04:55.987
I think even you get the context,
so if I wanted to say webpack,

72
00:04:55.987 --> 00:05:00.397
what's a good place where a webpack runs?

73
00:05:00.397 --> 00:05:02.989
We could go to the lib webpack.js.

74
00:05:04.280 --> 00:05:05.625
So if you hit Command or

75
00:05:05.625 --> 00:05:10.480
Ctrl+P, you get basically a file
picker while you're in this state.

76
00:05:10.480 --> 00:05:15.157
So lib, oops, why can't I type i's today?

77
00:05:15.157 --> 00:05:23.189
lib/webpack, so
here is the webpack lib or Node API file.

78
00:05:23.189 --> 00:05:25.360
And you'll see like, Sean,
wow, that's a lot of plugins.

79
00:05:25.360 --> 00:05:27.130
I don't understand.

80
00:05:27.130 --> 00:05:30.748
And I'll teach you more about this.
&gt;&gt; Sean Larkin: But

81
00:05:30.748 --> 00:05:35.483
you can set a break point almost anywhere,
and I believe it'll just stop, depending

82
00:05:35.483 --> 00:05:42.628
on how far I've gotten.
&gt;&gt; Sean Larkin: I

83
00:05:42.628 --> 00:05:46.162
think maybe I stopped at the wrong point.

84
00:05:46.162 --> 00:05:49.356
Yeah, it looked like it did.

85
00:05:49.356 --> 00:05:55.304
But adding break points to critical
pieces, custom plugins, custom loaders,

86
00:05:55.304 --> 00:06:01.260
if we get as far as custom loaders,
we can talk about why this is valuable.

87
00:06:01.260 --> 00:06:04.590
And I kinda joke, but I'm dead serious.

88
00:06:04.590 --> 00:06:07.520
It's kind of debug driven development,
you're

89
00:06:07.520 --> 00:06:11.305
literally just trying to step through
to understand the order of operations.

90
00:06:11.305 --> 00:06:16.970
Async is hard a lot of times, and so
it provides really valuable context.

91
00:06:19.500 --> 00:06:23.360
So these are probably gonna be
the scripts that we run with.

92
00:06:24.840 --> 00:06:29.830
And I think we've kind of
beat scripts to death here.

93
00:06:29.830 --> 00:06:36.276
But does anybody have any questions about
the composition or have any concerns or

94
00:06:36.276 --> 00:06:41.802
about how specifically to use them?
&gt;&gt; Sean Larkin: Because I

95
00:06:41.802 --> 00:06:45.930
want you feeling comfortable with
adding this kind of composition.

96
00:06:45.930 --> 00:06:48.530
Everything we do, we're really
focused around composition and

97
00:06:48.530 --> 00:06:49.900
separation of concerns.

98
00:06:51.290 --> 00:06:55.134
Most people find that they have problems
using webpack because they shove

99
00:06:55.134 --> 00:06:57.810
everything into one script,
into one build file.

100
00:06:57.810 --> 00:06:59.483
And so it becomes fragile,

101
00:06:59.483 --> 00:07:04.440
just like having a 10,000 line JavaScript
file and trying to maintain it.

