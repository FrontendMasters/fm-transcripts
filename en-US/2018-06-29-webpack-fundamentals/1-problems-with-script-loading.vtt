WEBVTT

1
00:00:00.160 --> 00:00:03.416
&gt;&gt; Sean: And so really that,
I just wanna talk about why.

2
00:00:03.416 --> 00:00:09.840
So, I don't think I really have a great
document on our Github yet, on our docs.

3
00:00:09.840 --> 00:00:11.025
Why Webpack?

4
00:00:11.025 --> 00:00:12.140
What is it solving?

5
00:00:13.470 --> 00:00:17.126
And to really understand that you
kinda need to know the origins of how

6
00:00:17.126 --> 00:00:19.470
we've used JavaScript on the web, right?

7
00:00:22.679 --> 00:00:28.016
&gt;&gt; Sean: So I mean,
how do you use JavaScript in the browser?

8
00:00:28.016 --> 00:00:31.050
There's really only two ways, that's it.

9
00:00:31.050 --> 00:00:34.083
There's only two ways that you can use
JavaScript and load it in the browser.

10
00:00:37.320 --> 00:00:39.200
&gt;&gt; Sean: And I mean,
JavaScript is just a script.

11
00:00:39.200 --> 00:00:42.130
It's just top down bottom execution.

12
00:00:42.130 --> 00:00:46.984
And as you can see here,
this is JavaScript.

13
00:00:46.984 --> 00:00:52.618
It's just a script format,
it always has been up until lately.

14
00:00:52.618 --> 00:00:56.254
Like I said, there's only two ways that
you can actually get this functionality

15
00:00:56.254 --> 00:00:57.730
to work in the browser.

16
00:00:57.730 --> 00:01:02.961
The first way is adding a script tag for
passing a source

17
00:01:02.961 --> 00:01:07.975
attribute and
a reference to that JavaScript file.

18
00:01:07.975 --> 00:01:13.310
And this is great, this is how we
leverage when were using Webpack today.

19
00:01:15.200 --> 00:01:20.842
And the second way is actually this
write your job description to HTML,

20
00:01:20.842 --> 00:01:24.707
JS and HTML that new thing,
have you heard of it?

21
00:01:24.707 --> 00:01:29.078
No [LAUGH] It's been around forever but
you can do this.

22
00:01:29.078 --> 00:01:33.488
But I mean, when you break it down,
so those are the only two ways.

23
00:01:33.488 --> 00:01:36.394
What is a problem for these things?

24
00:01:36.394 --> 00:01:38.937
It doesn't scale, whatsoever.

25
00:01:38.937 --> 00:01:42.791
I mean, you're either gonna
have too many scripts that

26
00:01:42.791 --> 00:01:46.410
you're trying to load from
script tags in the HTML.

27
00:01:47.520 --> 00:01:50.701
And each browser actually has bottlenecks.

28
00:01:50.701 --> 00:01:52.150
This creates a bottleneck.

29
00:01:52.150 --> 00:01:56.633
There's only a certain amount of
concurrent requests that can fetch data at

30
00:01:56.633 --> 00:01:57.550
a single time.

31
00:01:57.550 --> 00:02:03.406
And so like breaking your application
into a 100 JavaScript files and

32
00:02:03.406 --> 00:02:08.207
loading them in the browser is
a huge performance problem.

33
00:02:08.207 --> 00:02:13.920
And some people might say, but Sean,
HTTP 2 will help, and not really.

34
00:02:13.920 --> 00:02:19.726
Even if you had, let's say, 2,000,
the concurrent requests usually they say,

35
00:02:19.726 --> 00:02:24.520
30 to 50, your application is
thousands and thousands of modules.

36
00:02:24.520 --> 00:02:26.840
We're talking 3,000.

37
00:02:26.840 --> 00:02:30.099
Companies like Airbnb and
Microsoft's Outlook web app,

38
00:02:30.099 --> 00:02:34.034
they're talking 30,000 modules
to build their application.

39
00:02:34.034 --> 00:02:37.220
And so it's just wild.

40
00:02:37.220 --> 00:02:41.874
There is no way that you can have
a performance experience by trying to load

41
00:02:41.874 --> 00:02:43.310
individual scripts.

42
00:02:43.310 --> 00:02:45.380
I could beat that horse dead for days.

43
00:02:45.380 --> 00:02:49.990
But then, you're like, well, Sean,
I'll just write one big one, right.

44
00:02:49.990 --> 00:02:55.730
Who's worked on the 10,000 line global
back JS file that ships on every page?

45
00:02:55.730 --> 00:02:56.862
Yeah, yeah!

46
00:02:56.862 --> 00:03:00.100
So, I worked for
an eCommerce company called Hayneedle, and

47
00:03:00.100 --> 00:03:03.350
that was my first
experience with JavaScript.

48
00:03:03.350 --> 00:03:09.619
It was a single 10,000 plus
line file called global dot JS.

49
00:03:09.619 --> 00:03:12.370
And of course,
these are all the things I struggle with.

50
00:03:12.370 --> 00:03:16.306
Like endless, I remember
spending nights trying to debug,

51
00:03:16.306 --> 00:03:21.320
why one function wasn't working to only
find out it was because I was knocking

52
00:03:21.320 --> 00:03:26.666
out another variable that was at line
10 while I was working in line 9,000.

53
00:03:26.666 --> 00:03:31.748
One of the quirks of JavaScript that
I think erks people coming from

54
00:03:31.748 --> 00:03:37.570
different language ecosystems is that
we have this crazy idea for scoping.

55
00:03:37.570 --> 00:03:40.154
Everything is global in its scope, but

56
00:03:40.154 --> 00:03:45.489
you can also have things like first class
functions and so everything is global.

57
00:03:45.489 --> 00:03:47.807
Your functions, your objects, and so

58
00:03:47.807 --> 00:03:51.680
there's a lot of issues with just
scope and variable conflicts.

59
00:03:52.780 --> 00:03:57.561
But this,
we solve things in the web ecosystem.

60
00:03:57.561 --> 00:03:59.160
So what do we do?

61
00:03:59.160 --> 00:04:02.726
Who knows what an IIFE is, IIFE?

62
00:04:02.726 --> 00:04:05.246
Cool, that's a good start.

63
00:04:05.246 --> 00:04:09.190
So an IIFE stands for
Immediately Invoked Function Expression.

64
00:04:10.300 --> 00:04:12.864
Now what does this mean?

65
00:04:12.864 --> 00:04:15.560
So take this code example here.

66
00:04:15.560 --> 00:04:21.944
Now, essentially what's happening, is that
we have this function that's defined,

67
00:04:21.944 --> 00:04:27.826
but it's wrapped in parentheses and
then, you'll see at the end it's called.

68
00:04:27.826 --> 00:04:31.457
And so, what this does is
that when you have an IFFE,

69
00:04:31.457 --> 00:04:35.434
it's treated as an expression and
instantly executed.

70
00:04:35.434 --> 00:04:39.463
But it also allows us to provide
data from an outside scope and then,

71
00:04:39.463 --> 00:04:42.040
return scoped information.

72
00:04:42.040 --> 00:04:47.216
So in this case, if you were to write
this code in like your node terminal or

73
00:04:47.216 --> 00:04:52.390
whatever in dev tools, you're gonna
see that whatever actually returns

74
00:04:52.390 --> 00:04:57.414
properties on some, just like if it
was a module or some sort of object.

75
00:04:57.414 --> 00:04:59.390
And that was the kinda goal here, right?

76
00:04:59.390 --> 00:05:04.859
We want to be able to weigh to
encapsulate and that's what IFFES do.

77
00:05:04.859 --> 00:05:10.071
So if you took this and you removed
the IFFE pieces, you would notice that,

78
00:05:10.071 --> 00:05:14.310
if you ran this code,
you had a variable declared at the top.

79
00:05:14.310 --> 00:05:19.130
So outer scope is equal to one, and
let's just pretend the IFFES not there.

80
00:05:19.130 --> 00:05:24.581
Well, then you would define outer scope
inside of the function, which gives its

81
00:05:24.581 --> 00:05:30.292
own function scope but then, that actually
knocks out the value in the outerScope.

82
00:05:30.292 --> 00:05:36.968
So if I run console.log(outerScope),
I would find out that it returns 1.

83
00:05:36.968 --> 00:05:42.670
So instantly,
you can see why if he solve big problems.

84
00:05:42.670 --> 00:05:47.152
Now we can have the enterScope of that
variable with the same name as the outer

85
00:05:47.152 --> 00:05:47.653
scope.

86
00:05:47.653 --> 00:05:51.770
And it's all about having encapsulation.

87
00:05:52.830 --> 00:05:57.129
So people started to,
instead shift their JavaScript,

88
00:05:57.129 --> 00:06:01.886
but have individual files that
were wrapped in IIFEs, right.

89
00:06:01.886 --> 00:06:04.880
And so that way, they could do things.

90
00:06:04.880 --> 00:06:07.670
And this is not the only module pattern.

91
00:06:07.670 --> 00:06:10.862
The revealing module pattern is just
one of a bajillion if you've ever read

92
00:06:10.862 --> 00:06:12.339
the JavaScript design patterns.

93
00:06:12.339 --> 00:06:15.920
There's me and Addie hanging out,
he's a good friend of mine.

94
00:06:17.220 --> 00:06:19.762
And he's the author of this book, but

95
00:06:19.762 --> 00:06:24.530
you'll notice that most of them are just
surrounded by the idea of using

96
00:06:24.530 --> 00:06:29.629
encapsulation primitives of immediately
invoked function expressions.

97
00:06:29.629 --> 00:06:31.900
But this let's us concatenate.

98
00:06:31.900 --> 00:06:37.469
Now, we can take and write a hundred
files and we can squish them together

99
00:06:37.469 --> 00:06:42.766
without concerns that we're gonna
knock out a bunch of variables and

100
00:06:42.766 --> 00:06:47.438
scopes, and I put a star there
cuz there's always caveats.

101
00:06:47.438 --> 00:06:53.007
However, and this really led to
the explosion of these toolings.

102
00:06:53.007 --> 00:06:56.010
So we started seeing tools like Make.

103
00:06:56.010 --> 00:06:57.804
Who's used Make on a JavaScript project?

104
00:06:57.804 --> 00:07:00.976
I did that for
the first time in Microsoft Edge.

105
00:07:00.976 --> 00:07:05.693
Edge is part of the operating system,
and so

106
00:07:05.693 --> 00:07:10.430
our OS code base is
a 24 terabyte git repo.

107
00:07:10.430 --> 00:07:13.897
And it used end make which is
our custom windows version but

108
00:07:13.897 --> 00:07:18.017
I had that first experience with
trying to use make with JavaScript.

109
00:07:18.017 --> 00:07:19.274
Boy, it was frustrating.

110
00:07:19.274 --> 00:07:22.140
Really frustrating but
some people love it.

111
00:07:22.140 --> 00:07:25.512
And really, all the purpose is is just
to concatenate the files together.

112
00:07:25.512 --> 00:07:30.780
And that's what Grunt and Gulp and
Broccoli, like all these things.

113
00:07:30.780 --> 00:07:33.212
That's where these tools
started cropping up.

114
00:07:33.212 --> 00:07:34.827
It's trying to solve problems.

115
00:07:34.827 --> 00:07:37.890
However, there's still problems with this.

116
00:07:37.890 --> 00:07:42.909
What you're gonna notice that,
anytime you want to change one file,

117
00:07:42.909 --> 00:07:45.556
you have to rebuild the whole thing.

118
00:07:45.556 --> 00:07:48.860
We're just concatenating
all of these module.

119
00:07:48.860 --> 00:07:52.889
They are not modules but
these scripts together.

120
00:07:52.889 --> 00:07:57.615
And then, more importantly,
when you concat,

121
00:07:57.615 --> 00:08:02.620
let's say, who uses Lodash here or
Moment JS?

122
00:08:02.620 --> 00:08:04.463
All right, that's a huge library.

123
00:08:04.463 --> 00:08:07.253
That's like one meg,
two megs of JavaScript,

124
00:08:07.253 --> 00:08:09.540
maybe even three I can't remember.

125
00:08:09.540 --> 00:08:12.605
JD will tell me when I get back to work.

126
00:08:12.605 --> 00:08:16.018
But if you're just
concatenating files together,

127
00:08:16.018 --> 00:08:19.960
how do you remove code that
you're actually not using?

128
00:08:19.960 --> 00:08:22.889
How do you even know there's
code you're not using.

129
00:08:22.889 --> 00:08:25.640
When you are in script there is no way.

130
00:08:25.640 --> 00:08:29.565
You essentially fear only using
one function from Lodash or

131
00:08:29.565 --> 00:08:31.772
one data utility from Moment JS.

132
00:08:31.772 --> 00:08:36.713
You're literally adding
the entire library and

133
00:08:36.713 --> 00:08:41.780
just crushing it together,
that turns out that.

134
00:08:43.040 --> 00:08:46.403
Immediately both function
expressions are kinda slow.

135
00:08:46.403 --> 00:08:48.610
So what happened, no one lost the news.

136
00:08:48.610 --> 00:08:53.090
One of my coworkers and
author of Couch DB or

137
00:08:53.090 --> 00:08:56.331
Couch TV, I can't remember.

138
00:08:56.331 --> 00:09:00.637
He did a study and found out that
bundlers, this was specific to bundlers

139
00:09:00.637 --> 00:09:04.800
early on, we're creating lots of
IFFE in using a similar pattern, or

140
00:09:04.800 --> 00:09:08.980
people were writing in IIFE's and
concatenating together.

141
00:09:08.980 --> 00:09:14.088
But what this does is,
it forces JavaScript engines to eager

142
00:09:14.088 --> 00:09:18.695
parse the code, and so
you incur much more intensive or

143
00:09:18.695 --> 00:09:23.604
costly parsing time when your
JavaScript's loading, so

144
00:09:23.604 --> 00:09:26.426
it leads to slower loading apps.

145
00:09:26.426 --> 00:09:31.340
And how do you lazy load
with a task runner?

146
00:09:31.340 --> 00:09:34.384
You don't, well there is no way,
whatever you're building.

147
00:09:34.384 --> 00:09:38.396
Your shipping all that
code down the pipeline,

148
00:09:38.396 --> 00:09:45.539
even if your app maybe only uses 10% of it
to load and get your initial experience.

149
00:09:45.539 --> 00:09:48.632
You can just kinda see there's
a lot of problems here.

150
00:09:48.632 --> 00:09:50.480
We're just showing scripts together.

