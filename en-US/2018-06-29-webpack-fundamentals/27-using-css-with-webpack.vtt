WEBVTT

1
00:00:02.463 --> 00:00:06.608
&gt;&gt; Sean Larkin: Let's take a scenario, I
think actually a really great scenario is

2
00:00:06.608 --> 00:00:10.070
that when we were working
in button styles, right?

3
00:00:10.070 --> 00:00:14.974
It would be way more manageable
if this was just like CSS, right,

4
00:00:14.974 --> 00:00:16.500
at least I think so.

5
00:00:18.634 --> 00:00:21.570
&gt;&gt; Sean Larkin: Or
why don't we load up our dev build?

6
00:00:21.570 --> 00:00:23.718
So npm run dev, or your dev.

7
00:00:27.794 --> 00:00:30.020
&gt;&gt; Sean Larkin: And so
we have our dev server running, and

8
00:00:30.020 --> 00:00:33.370
I'll just put the browsers
side by side again.

9
00:00:33.370 --> 00:00:35.700
No Java, there we go.

10
00:00:36.920 --> 00:00:40.940
Let's see, okay.

11
00:00:44.610 --> 00:00:48.410
Here we go, let's clear our log.

12
00:00:48.410 --> 00:00:48.910
Awesome.

13
00:00:50.430 --> 00:00:55.410
So we wanna be able to have
a more holistic style sheet.

14
00:00:57.190 --> 00:01:00.600
Let's say we wanna take a footer, and we
actually wanna give it some real styles.

15
00:01:02.572 --> 00:01:06.530
So you would think that maybe the kind of
typical approach should be to actually

16
00:01:06.530 --> 00:01:12.460
create a CSS file like footer.css, and
we could just write some styles for it.

17
00:01:12.460 --> 00:01:16.880
So we know that this is a footer element,
and it has two divs inside of it.

18
00:01:16.880 --> 00:01:21.950
Maybe we can just make it something
a little bit nicer looking.

19
00:01:21.950 --> 00:01:26.330
So footer element, and I don't know.

20
00:01:26.330 --> 00:01:29.145
Let's say, now my CSS skill,

21
00:01:29.145 --> 00:01:34.300
you think just my general
JavaScript APIs or damn APIs.

22
00:01:34.300 --> 00:01:37.620
This is a little bit of a struggle.

23
00:01:37.620 --> 00:01:40.558
So let's see, I'll try my best here.

24
00:01:40.558 --> 00:01:46.529
100px and width is just a,
I wonder if it even respects 100%.

25
00:01:46.529 --> 00:01:48.280
I'm sure there's something I'm forgetting.

26
00:01:52.310 --> 00:01:57.740
Now, just in case, I always love
the classic background red, or

27
00:01:57.740 --> 00:02:00.380
we'll just do background yellow.

28
00:02:02.920 --> 00:02:04.910
Yellow-green looks nice, okay.

29
00:02:06.230 --> 00:02:12.030
And that way, we know when we actually
include the CSS file into our build,

30
00:02:12.030 --> 00:02:13.870
that we're seeing our
background correctly.

31
00:02:14.880 --> 00:02:19.510
Now, the traditional way of doing this is
by just serving it in a disk folder and

32
00:02:19.510 --> 00:02:21.410
referencing in a style tag.

33
00:02:21.410 --> 00:02:23.844
But if we change this and
it's affecting our code,

34
00:02:23.844 --> 00:02:27.423
we would want to have it tied in with
our build like an incremental rebuild.

35
00:02:27.423 --> 00:02:31.540
Or, wouldn't it be cool if you could
have it changed without even reloading?

36
00:02:31.540 --> 00:02:32.810
That would be incredible.

37
00:02:33.830 --> 00:02:39.310
So, what we could do is we can
actually jump into the footer module.

38
00:02:41.890 --> 00:02:48.532
And even though we're not gonna
apply anything that we import,

39
00:02:48.532 --> 00:02:53.710
we can actually take and
say import footer.css.

40
00:02:53.710 --> 00:02:55.364
Now, you may say, Shawn,
this is a side effect.

41
00:02:55.364 --> 00:03:00.090
I thought you said,
don't do side effect the imports.

42
00:03:00.090 --> 00:03:05.100
When it comes to things like CSS,
you can get away with it.

43
00:03:05.100 --> 00:03:10.100
You may actually be more familiar with
using CSS with CSS modules or with React.

44
00:03:11.930 --> 00:03:15.220
This is just the more vanilla approach
to show you the capabilities,

45
00:03:15.220 --> 00:03:15.810
the why, and how.

46
00:03:18.080 --> 00:03:22.820
And so, of course, if we look at our
build though now, we're gonna see a fail.

47
00:03:23.860 --> 00:03:27.302
It says, you need an appropriate
loader to handle this file,

48
00:03:27.302 --> 00:03:29.240
cuz webpack can't parse this standalone.

49
00:03:31.340 --> 00:03:34.350
Luckily, we've installed
the dependencies that we need.

50
00:03:34.350 --> 00:03:37.272
And why don't we jump back
into our configuration now?

51
00:03:39.639 --> 00:03:44.552
&gt;&gt; Sean Larkin: Now, instead of adding it
into our kind of our common config here,

52
00:03:44.552 --> 00:03:50.460
or kind of the base, we can just jump into
our build utils and go to development.

53
00:03:52.610 --> 00:03:55.282
And now, we have a really nice,
isolated way of adding this.

54
00:03:55.282 --> 00:04:00.700
So we could say module, and then we're
gonna add a new rule set, right?

55
00:04:02.730 --> 00:04:06.730
And we're gonna say, so
the two base properties,

56
00:04:06.730 --> 00:04:11.720
remember the two minimum
properties are test and use.

57
00:04:11.720 --> 00:04:17.360
So basically, how we wanna match this
file and how we wanna transform it.

58
00:04:19.180 --> 00:04:25.070
So test is always gonna be, by default, or

59
00:04:25.070 --> 00:04:28.920
at least the most common way that you'll
see it being used is a regular expression.

60
00:04:28.920 --> 00:04:30.243
And so we can just say,

61
00:04:30.243 --> 00:04:35.655
when we come across a CSS file,
&gt;&gt; Sean Larkin: Then

62
00:04:35.655 --> 00:04:38.210
we want to apply a loader to it.

63
00:04:39.230 --> 00:04:43.720
Now, in this case,
the CSS loader stand alone,

64
00:04:43.720 --> 00:04:46.150
if we just used that, we can try it.

65
00:04:46.150 --> 00:04:47.188
Let's just see what happens.

66
00:04:47.188 --> 00:04:53.045
CSS loader,
&gt;&gt; Sean Larkin: Oops, no, no semicolon.

67
00:04:53.045 --> 00:04:55.330
&gt;&gt; [INAUDIBLE]
&gt;&gt; Sean Larkin: Yeah, sorry.

68
00:04:55.330 --> 00:04:56.175
Thank you very much.

69
00:04:56.175 --> 00:04:57.420
How's that?

70
00:05:02.329 --> 00:05:05.322
&gt;&gt; Sean Larkin: Okay, so
if you just add CSS loader and we run it,

71
00:05:05.322 --> 00:05:08.105
let's see what happens when you're in dev.

72
00:05:14.102 --> 00:05:14.820
&gt;&gt; Sean Larkin: We get nothing.

73
00:05:18.180 --> 00:05:19.620
It is still transforming it though.

74
00:05:19.620 --> 00:05:21.610
We don't see an error anymore.

75
00:05:21.610 --> 00:05:25.814
What I think is cool,
if we go back to our photo.js,

76
00:05:25.814 --> 00:05:29.552
what happens if we did just like,
let's see.

77
00:05:29.552 --> 00:05:35.450
If we say import css from footer.css,

78
00:05:35.450 --> 00:05:39.390
and we console logged it.

79
00:05:39.390 --> 00:05:42.920
I love this, because then we can
see what the value is, right?

80
00:05:42.920 --> 00:05:45.640
Technically, it must be something
that's JavaScript maybe.

81
00:05:47.840 --> 00:05:52.320
So if we console log it,
look what we see here.

82
00:05:53.767 --> 00:05:58.450
&gt;&gt; Sean Larkin: We see just an array
of those styles with some metadata.

83
00:05:58.450 --> 00:06:01.710
Here's some metadata, and
then here's the string version.

84
00:06:01.710 --> 00:06:05.460
And looks like there's
some other features,

85
00:06:05.460 --> 00:06:07.300
if you wanted to use CSS modules.

86
00:06:07.300 --> 00:06:11.910
But, in this case, we're not, so
we just get the raw source in a string.

87
00:06:12.940 --> 00:06:15.790
I mean, technically, you could leverage
this if you wanna do stand alone, but

88
00:06:15.790 --> 00:06:17.000
it's not very practical, right?

89
00:06:17.000 --> 00:06:20.681
So,
&gt;&gt; Sean Larkin: Instead,

90
00:06:20.681 --> 00:06:24.410
what we would do,
I'm just gonna change this back to import.

91
00:06:24.410 --> 00:06:27.150
So why don't we jump back into
our development and config it?

92
00:06:27.150 --> 00:06:29.770
So this is what style
loader actually does for

93
00:06:29.770 --> 00:06:34.870
us, it's that it adds
the script tag in the browser.

94
00:06:34.870 --> 00:06:38.885
It consumes that array that
css loader passes to it.

95
00:06:41.552 --> 00:06:43.732
&gt;&gt; Sean Larkin: Oops,
accidentally zooming.

96
00:06:46.562 --> 00:06:50.180
&gt;&gt; Sean Larkin: So why don't we
go ahead now and reload again?

97
00:06:50.180 --> 00:06:52.980
So any time you make changes to your
config, you do have to do a reload.

98
00:06:54.610 --> 00:06:55.539
We'll jump in the dev server.

99
00:06:58.982 --> 00:07:00.037
&gt;&gt; Sean Larkin: Let's see what happens.

100
00:07:02.536 --> 00:07:06.110
&gt;&gt; Sean Larkin: Oops, I forgot to remove
that console, we don't have to rebuild.

101
00:07:07.980 --> 00:07:09.080
Hey, there we go.

102
00:07:10.660 --> 00:07:19.390
We just applied the CSS to
the selectors that it matched against.

103
00:07:19.390 --> 00:07:25.375
So, what's really awesome about
this is jump back into your

104
00:07:25.375 --> 00:07:30.680
footer.css, and you can go ahead make
whatever stylistic changes you want.

105
00:07:30.680 --> 00:07:35.317
I might do something
like border solid black.

106
00:07:38.667 --> 00:07:39.694
&gt;&gt; Sean Larkin: And boom, there you go.

