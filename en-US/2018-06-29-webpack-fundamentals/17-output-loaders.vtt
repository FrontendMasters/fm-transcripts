WEBVTT

1
00:00:00.130 --> 00:00:05.490
&gt;&gt; Sean: So output, that's the second one.

2
00:00:05.490 --> 00:00:09.040
And we all kind of understand IO,
and input output.

3
00:00:09.040 --> 00:00:13.770
And so like the output is kind of like,
let's say you take that graph.

4
00:00:13.770 --> 00:00:18.730
Now that webpack has this graph internally
in memory, it needs to actually

5
00:00:18.730 --> 00:00:22.499
create the bundle and we even explored
kind of what the output looks like.

6
00:00:24.040 --> 00:00:26.860
But the output here is really
talking about where and

7
00:00:26.860 --> 00:00:28.060
how we're gonna name the file.

8
00:00:29.800 --> 00:00:31.230
And as you dive deeper,

9
00:00:31.230 --> 00:00:37.130
there are more configuration options for
just output here.

10
00:00:37.130 --> 00:00:38.520
This is just one example.

11
00:00:38.520 --> 00:00:40.430
And it's scratching the surface really.

12
00:00:40.430 --> 00:00:44.580
But in this case, we're just providing
a path that we want it to go,

13
00:00:44.580 --> 00:00:46.560
as well as a name for the bundle.

14
00:00:46.560 --> 00:00:52.710
Now you saw in webpack 4, by default,
actually file name is set to main.js.

15
00:00:52.710 --> 00:00:54.080
And the path is dist.

16
00:00:55.330 --> 00:01:00.030
So this will create a bundle and
generate in a js folder called bundle.js.

17
00:01:00.030 --> 00:01:04.410
But the high level idea is that the output

18
00:01:04.410 --> 00:01:09.950
concept is really about telling Webpack
where and how to distribute these files.

19
00:01:09.950 --> 00:01:13.590
We sometimes call them compilations
internally in our source code.

20
00:01:13.590 --> 00:01:15.580
And it works directly
with the entry property.

21
00:01:19.690 --> 00:01:24.450
And so, the next concept is something that
really stands apart from any other tool

22
00:01:24.450 --> 00:01:26.120
that you probably used.

23
00:01:27.580 --> 00:01:30.910
So loaders and rules.

24
00:01:30.910 --> 00:01:34.390
So like the concept of what a rule is,

25
00:01:34.390 --> 00:01:39.000
is that right now, or
at least just right up until webpack 4,

26
00:01:39.000 --> 00:01:44.710
we have always treated every
dependency as a JavaScript module.

27
00:01:44.710 --> 00:01:50.167
And so what we've kinda created in
the configuration here is like we're

28
00:01:50.167 --> 00:01:55.355
defining rules for how we want to
treat files that are on JavaScript,

29
00:01:55.355 --> 00:02:00.466
or how we wanna treat files that
match against one of these loaders.

30
00:02:00.466 --> 00:02:05.287
So like in kind of our terminology,
we call this like a rule set.

31
00:02:05.287 --> 00:02:08.259
And a rule set basically
has two minimum criteria.

32
00:02:08.259 --> 00:02:12.850
One, which is, as webpack's
creating this dependency graph,

33
00:02:12.850 --> 00:02:15.350
it's adding files to it, right?

34
00:02:15.350 --> 00:02:20.350
And so if webpack comes across
something that matches one of these

35
00:02:20.350 --> 00:02:26.200
regular expressions here,
this rules set basically says,

36
00:02:26.200 --> 00:02:30.649
okay, apply this node module, which
is just a function behind the scenes.

37
00:02:31.770 --> 00:02:36.770
And transform whatever file that
comes across, as it's being resolved.

38
00:02:36.770 --> 00:02:41.920
And I'll show you in more detail how
this would work behind the scenes.

39
00:02:41.920 --> 00:02:46.450
But essentially, what it's doing is it's
transforming files that are being added to

40
00:02:46.450 --> 00:02:52.330
your dependency graph, and based on
one of the loaders that are provided.

41
00:02:52.330 --> 00:02:57.980
So you can think, when you're adding a
different behavior to your configuration,

42
00:02:57.980 --> 00:03:03.360
you're adding a rule set and applying
basically just a pattern to match.

43
00:03:03.360 --> 00:03:05.330
You're pattern matching the extension and

44
00:03:05.330 --> 00:03:08.050
applying a different
type of transform to it.

45
00:03:09.430 --> 00:03:11.840
And this is a per file process.

46
00:03:11.840 --> 00:03:13.990
So, it's not something
that just happens in bulk,

47
00:03:13.990 --> 00:03:18.700
and there's a very specific reason for
that.

48
00:03:18.700 --> 00:03:21.150
I tried to diagram it here, but
you can kind of think about it like this.

49
00:03:21.150 --> 00:03:23.890
So, this is our same graph, but

50
00:03:23.890 --> 00:03:28.370
you'll notice that each of these maybe
has a different behavior about it.

51
00:03:28.370 --> 00:03:33.260
This entry file might be
importing a .ts file.

52
00:03:33.260 --> 00:03:36.395
Well, webpack's not gonna understand
typescript out of the box,

53
00:03:36.395 --> 00:03:38.995
and it would throw out errors
trying to parse that file.

54
00:03:38.995 --> 00:03:43.879
And so what this ruleset does is,
it basically says any time

55
00:03:43.879 --> 00:03:48.273
that you're trying to add
a dependency to the graph,

56
00:03:48.273 --> 00:03:52.780
if it matches this extension,
apply this transform.

57
00:03:52.780 --> 00:03:57.758
And so as it's going, it finds this
file is transformed to JavaScript,

58
00:03:57.758 --> 00:04:00.790
it might also have dependency statements.

59
00:04:00.790 --> 00:04:05.481
So as webpack continues to traverse,
it might come across

60
00:04:05.481 --> 00:04:10.185
something like, I don't know,
has specific ES syntax.

61
00:04:10.185 --> 00:04:13.757
And even though Webpack could parse this,
you probably don't support a specific

62
00:04:13.757 --> 00:04:16.690
syntax in the browser, so
you'd wanna transform it.

63
00:04:16.690 --> 00:04:19.700
So there is a very specific use case for
why we even use Babble.

64
00:04:21.690 --> 00:04:23.952
And so we basically say,

65
00:04:23.952 --> 00:04:27.930
any time we come across a JavaScript file,
apply this transformation to it.

66
00:04:27.930 --> 00:04:30.860
So on a per file basis.

67
00:04:30.860 --> 00:04:38.619
And in the same way, let's say this
dependency is importing a CSS file.

68
00:04:38.619 --> 00:04:43.501
You can do that with webpack and
if that happens, it's going to once again

69
00:04:43.501 --> 00:04:48.240
match against one of these rule sets and
apply a transformation.

70
00:04:48.240 --> 00:04:52.500
And that's kind of what like
the rule set is at a top level.

71
00:04:54.910 --> 00:05:00.450
And there are different types of features
that help you filter and include or

72
00:05:00.450 --> 00:05:06.520
choose to ignore when you want
to transform a file or not.

73
00:05:06.520 --> 00:05:10.063
There's things like include and
exclude which are like,

74
00:05:10.063 --> 00:05:13.978
ignore any files that are coming
from the known modules folder.

75
00:05:13.978 --> 00:05:18.626
Or let's say, use itself is where you

76
00:05:18.626 --> 00:05:24.940
actually pass the loader
node module string.

77
00:05:24.940 --> 00:05:27.710
And so you could choose to
do it conditionally, or

78
00:05:27.710 --> 00:05:29.310
you can apply a chain of loaders.

79
00:05:29.310 --> 00:05:32.660
Or you could say I want it enforce.

80
00:05:32.660 --> 00:05:37.060
You could say I want this to run
before every other loader or

81
00:05:37.060 --> 00:05:38.150
after every other loader.

82
00:05:38.150 --> 00:05:41.726
So there's lots of different behaviors and
ways that you can configure.

83
00:05:41.726 --> 00:05:46.130
But really this is the minimal,
like this is the minimum use.

84
00:05:48.141 --> 00:05:50.501
&gt;&gt; Sean: And so
thereà½ s lots of different options and

85
00:05:50.501 --> 00:05:53.400
they're really kind of
like used case based.

86
00:05:53.400 --> 00:05:55.420
So knowing about them is helpful.

87
00:05:55.420 --> 00:06:02.089
But you won't have to memorize
any of these specific properties.

88
00:06:02.089 --> 00:06:06.860
I think I kinda used this example early
on where it was like, if I want to

89
00:06:06.860 --> 00:06:12.030
import some of my tests but
I don't wanna actually import,

90
00:06:12.030 --> 00:06:15.910
I don't wanna use them or
transform them In like production mode.

91
00:06:15.910 --> 00:06:20.291
And so, I'll exclude any of my
spec files and things like that.

92
00:06:20.291 --> 00:06:23.685
And that's kind of how include and
exclude might work.

