WEBVTT

1
00:00:00.190 --> 00:00:03.700
&gt;&gt; Sean Larkin: And you'll notice that
actually, Webpack ran successfully.

2
00:00:03.700 --> 00:00:07.450
And so but there's no config!

3
00:00:07.450 --> 00:00:08.300
There's no config.

4
00:00:10.190 --> 00:00:16.040
So Webpack by default,
before Webpack 4, you

5
00:00:16.040 --> 00:00:19.820
really were only required to specify two
properties, your input and your output.

6
00:00:19.820 --> 00:00:21.840
And we were like,
we don't need to do that.

7
00:00:21.840 --> 00:00:22.970
People don't need to do that.

8
00:00:22.970 --> 00:00:27.730
If we do it by default, then people
don't even have to use a config.

9
00:00:27.730 --> 00:00:30.860
And they can get started really easily,
like you all have done today,

10
00:00:30.860 --> 00:00:34.420
just using Webpack for
the first time, literally, just now.

11
00:00:35.430 --> 00:00:38.620
Webpack looks for an entry property and

12
00:00:38.620 --> 00:00:43.090
we default to source and then index.js.

13
00:00:43.090 --> 00:00:46.410
And actually,
we don't even specify that much.

14
00:00:46.410 --> 00:00:50.850
We just say,
I think that is all we provide there.

15
00:00:50.850 --> 00:00:54.230
So let's say down the road, you add a
config and you wanna support type script.

16
00:00:54.230 --> 00:01:02.612
It could just be index.ts and you'd never
have to provide that entry property.

17
00:01:02.612 --> 00:01:06.740
So but
you do see this really helpful warning and

18
00:01:06.740 --> 00:01:09.710
we say hey, you didn't set a mod option.

19
00:01:09.710 --> 00:01:11.640
You really should.

20
00:01:11.640 --> 00:01:16.320
We fell back to production mode anyway but
here's where you can learn some more.

21
00:01:16.320 --> 00:01:18.510
And we'll cover what mode is.

22
00:01:18.510 --> 00:01:24.170
But so now, we can actually
run Webpack from our scripts.

23
00:01:24.170 --> 00:01:26.010
We have access to run it now.

24
00:01:26.010 --> 00:01:29.373
This is what we would
pass to our CI system.

25
00:01:29.373 --> 00:01:31.455
We'd have node installed and

26
00:01:31.455 --> 00:01:35.541
we would just run this command
after doing an mpm install.

27
00:01:35.541 --> 00:01:38.490
And so, but we can take it a step further.

28
00:01:38.490 --> 00:01:43.200
mpm has this awesome
capability to compose scripts.

29
00:01:43.200 --> 00:01:48.090
So or I guess I should say it started
with mpm and yarn supports it as well.

30
00:01:49.600 --> 00:01:52.350
So let's say running just npm webpack,

31
00:01:52.350 --> 00:01:56.210
there might be different environments
that you wanna build in.

32
00:01:56.210 --> 00:02:00.250
And so much that we're enforcing
you now to think about that,

33
00:02:00.250 --> 00:02:04.660
that we have a mode property that
specifies development or production.

34
00:02:06.416 --> 00:02:09.080
If you can provide that
like that information like

35
00:02:09.080 --> 00:02:11.840
I'm just my local div
environment until webpack that.

36
00:02:11.840 --> 00:02:15.640
We created this property, so
we could optimize for build speed over

37
00:02:15.640 --> 00:02:19.780
production quality or vice versa
depending on what mode you're in.

38
00:02:19.780 --> 00:02:24.210
And so,
you have the ability to compose scripts.

39
00:02:24.210 --> 00:02:27.380
So if you wanted to pass let's say a mode,

40
00:02:27.380 --> 00:02:31.660
like the mode property to webpack without
the config, you can still do so but

41
00:02:31.660 --> 00:02:35.540
we don't wanna have to basically write
out this command every single time and

42
00:02:35.540 --> 00:02:39.920
we can just call the original command but
just add on to it, so

43
00:02:39.920 --> 00:02:45.670
add a dev property nd

44
00:02:45.670 --> 00:02:49.560
you can actually call an existing command,
so npm run webpack.

45
00:02:50.810 --> 00:02:54.910
And then, with this syntax here,
so this --, this

46
00:02:56.070 --> 00:03:00.820
basically says pipe in the next
arguments onto the original commands.

47
00:03:00.820 --> 00:03:05.010
So I can say this --mode development.

48
00:03:07.350 --> 00:03:11.790
So now, you can compose without
having to basically rewrite like,

49
00:03:11.790 --> 00:03:14.600
when these get pretty large or

50
00:03:14.600 --> 00:03:19.100
over the top, you're gonna start noticing
that like you have a billion scripts here.

51
00:03:19.100 --> 00:03:23.550
And so, you, if you need to make a change,
you wanna make a change once and

52
00:03:23.550 --> 00:03:28.030
it affects the other commands as desired.

53
00:03:28.030 --> 00:03:31.350
And so, why don't we just try running
this and see what it gives us.

54
00:03:31.350 --> 00:03:34.520
So, npm run dev.

55
00:03:34.520 --> 00:03:39.840
And you could even see, it

56
00:03:39.840 --> 00:03:44.260
even tells you hey, it took this and then
now we just converted it to this here.

57
00:03:46.490 --> 00:03:48.750
And there we go,
even the feedback has changed.

58
00:03:48.750 --> 00:03:51.420
Like if you look at the top,

59
00:03:51.420 --> 00:03:55.750
you get some slightly different
reporting information, instead now,

60
00:03:55.750 --> 00:04:00.070
we show instead of ID's for the modules,
we show the source path to the module.

61
00:04:00.070 --> 00:04:03.689
We even formated in a way that like if
you're using, whose using VS code here?

62
00:04:05.050 --> 00:04:10.430
If you haven't tried yet,
dip yourself into the water and try it for

63
00:04:10.430 --> 00:04:13.850
the first time and you'll never go back
to anything else, I'll just say that.

64
00:04:13.850 --> 00:04:17.120
[LAUGH] Unless like you're
working on java all day and

65
00:04:17.120 --> 00:04:18.880
you might need Intel ja or whatever.

66
00:04:18.880 --> 00:04:23.930
But vs code is so nice, it's like it can
provide you with this whole string and

67
00:04:23.930 --> 00:04:27.200
I can click command and boom,
instantly into the module.

68
00:04:27.200 --> 00:04:29.240
And you'll see here,
like I don't even have anything in here.

69
00:04:29.240 --> 00:04:30.810
Web pack can still consume that though.

70
00:04:32.310 --> 00:04:35.100
It's just looking for that results
file and it collects the source.

71
00:04:36.896 --> 00:04:40.390
So, why don't we, now dev is not
gonna be your only environment.

72
00:04:40.390 --> 00:04:42.720
Why don't we add a prod script as well?

73
00:04:44.430 --> 00:04:51.357
So, prod and we'll do the same thing
expect our mode is gonna be production.

74
00:04:57.021 --> 00:04:59.468
&gt;&gt; Sean Larkin: And let's run it.

75
00:04:59.468 --> 00:05:01.714
I keep forgetting, npm run prod.

76
00:05:04.058 --> 00:05:04.660
&gt;&gt; Sean Larkin: There we go.

77
00:05:04.660 --> 00:05:08.070
So this is back to the original
default that Webpack falls back

78
00:05:08.070 --> 00:05:10.180
to if you're not providing a mode.

79
00:05:10.180 --> 00:05:13.500
But we really feel the obligation
to encourage you to

80
00:05:13.500 --> 00:05:16.700
think about having two different
environments for your build.

81
00:05:16.700 --> 00:05:20.543
It's super important, it's what can
allow you to have faster builds or

82
00:05:20.543 --> 00:05:21.866
more optimized builds.

83
00:05:25.339 --> 00:05:29.853
&gt;&gt; Sean Larkin: So let's see here,
we could probably take this code.

84
00:05:29.853 --> 00:05:36.336
[SOUND] Why don't we just
commit it to our, well,

85
00:05:36.336 --> 00:05:41.406
I don't wanna commit to this branch.

86
00:05:41.406 --> 00:05:44.350
Maybe I'll just jump to the next one here.

87
00:05:44.350 --> 00:05:48.400
So we have a bunch of branches and
I kinda have little micro steps.

88
00:05:48.400 --> 00:05:52.690
So the next one is debug scripts.

89
00:05:52.690 --> 00:05:56.160
So essentially,
I love providing escape hatches.

90
00:05:56.160 --> 00:06:00.806
Who has ever even debugged
a node process before?

91
00:06:00.806 --> 00:06:04.745
One of the most painful things is
trying to console log your way

92
00:06:04.745 --> 00:06:07.092
through a node app or a node script and

93
00:06:07.092 --> 00:06:12.200
it's no different if you're wanting to
debug why webpack is doing something.

94
00:06:12.200 --> 00:06:15.080
And so, let's see if we can check it out.

95
00:06:15.080 --> 00:06:18.600
git checkout feature/0,
what did I call it?

96
00:06:18.600 --> 00:06:19.275
Zero three?

97
00:06:19.275 --> 00:06:22.166
Let's try it.

98
00:06:22.166 --> 00:06:22.911
Okay.

99
00:06:28.396 --> 00:06:30.070
&gt;&gt; Sean Larkin: Yeah,
why don't we just jump straight to it?

100
00:06:30.070 --> 00:06:33.080
And then, I'm just gonna use force
because it's probably gonna be like but

101
00:06:33.080 --> 00:06:34.910
you have unstaged changes.

102
00:06:34.910 --> 00:06:35.667
There we go.

