WEBVTT

1
00:00:00.400 --> 00:00:03.550
&gt;&gt; Sean Larkin: One that I think is like
really valuable that is kinda ad-hoc

2
00:00:03.550 --> 00:00:05.840
that you may only add sometimes.

3
00:00:05.840 --> 00:00:09.820
Like I know some of our team at Microsoft,
we use this plugin, like we deploy it with

4
00:00:09.820 --> 00:00:15.990
production as well, because I can
explain why as we talk about the plugin.

5
00:00:15.990 --> 00:00:21.650
So, one of the most really valuable
things is that webpack by default,

6
00:00:21.650 --> 00:00:25.380
when it builds,
it emits this stats object.

7
00:00:25.380 --> 00:00:29.290
And the stats object either gets
converted to a string or to JSON,

8
00:00:29.290 --> 00:00:30.580
which is printed in the terminal.

9
00:00:30.580 --> 00:00:34.380
Which is kind of like this information
you see anytime a build happens.

10
00:00:35.890 --> 00:00:39.120
Or you can plug into it,
and consume it, and

11
00:00:39.120 --> 00:00:40.990
do some pretty interesting stuff with it.

12
00:00:42.106 --> 00:00:50.060
And so, analyzing why did this certain
dependency get pulled into my application?

13
00:00:50.060 --> 00:00:53.710
Why is this file so large?

14
00:00:54.750 --> 00:01:00.280
And so, we're gonna add a plugin now
called the Webpack Plugin Analyzer.

15
00:01:01.530 --> 00:01:04.710
Mpm install webpack bundle analyzer.

16
00:01:06.670 --> 00:01:09.070
Hands down one of my favorite,

17
00:01:09.070 --> 00:01:12.590
probably one of the most valuable
visualization tools for the graph itself.

18
00:01:13.670 --> 00:01:14.673
So go ahead and install that.

19
00:01:32.592 --> 00:01:38.910
&gt;&gt; Sean Larkin: Awesome.
So, why do we add a new preset?

20
00:01:38.910 --> 00:01:43.064
Well, so if you have a couple of options,

21
00:01:43.064 --> 00:01:48.063
I think one you could add
a script if you wanted to.

22
00:01:48.063 --> 00:01:49.450
But it's optional.

23
00:01:49.450 --> 00:01:53.137
Like the cool thing about presets is you
could just write whatever command you want

24
00:01:53.137 --> 00:01:54.426
and compose it on on the fly.

25
00:01:54.426 --> 00:01:59.380
I think I'm just gonna do it just for the
sake of having it here, and easy to call.

26
00:01:59.380 --> 00:02:01.776
So, I'm just gonna call it analyze.

27
00:02:04.254 --> 00:02:08.369
&gt;&gt; Sean Larkin: And I promise Kayla,
I won't forget it this time, so

28
00:02:08.369 --> 00:02:12.160
MPM one prod dash, dash space, dash, dash.

29
00:02:12.160 --> 00:02:14.560
ENV preset.

30
00:02:14.560 --> 00:02:19.160
So I'm so spoiled with yarn because they
don't make you do the extra dash, dash.

31
00:02:19.160 --> 00:02:21.360
That's my fault, analyze.

32
00:02:22.910 --> 00:02:27.859
So we can add a new script
called prod:analyze that

33
00:02:27.859 --> 00:02:32.934
just composes and
adds a new preset called analyze.

34
00:02:32.934 --> 00:02:37.621
And,
&gt;&gt; Sean Larkin: Now for this to work,

35
00:02:37.621 --> 00:02:40.170
we'd actually have to have
the preset available, right?

36
00:02:40.170 --> 00:02:40.950
We need t create it.

37
00:02:40.950 --> 00:02:43.980
So, we're gonna create a new configure.

38
00:02:43.980 --> 00:02:46.460
So webpack.analyze.

39
00:02:46.460 --> 00:02:49.400
That's the only rule with
this convention is that,

40
00:02:49.400 --> 00:02:54.579
whatever your preset name is
needs to match webpack.name.js.

41
00:02:56.090 --> 00:02:57.207
That's kind of
the convention they created.

42
00:03:04.934 --> 00:03:09.471
&gt;&gt; Sean Larkin: And essentially we wanna
add this bundle analyzer this plugin and

43
00:03:09.471 --> 00:03:12.699
only apply it when we use this preset,
right?

44
00:03:15.461 --> 00:03:17.126
&gt;&gt; Sean Larkin: Here we go.

45
00:03:19.822 --> 00:03:23.190
&gt;&gt; Sean Larkin: So
we know we have a config right here.

46
00:03:23.190 --> 00:03:24.620
So we can add a plugins array, right?

47
00:03:24.620 --> 00:03:29.530
And we'll just require that module now.

48
00:03:29.530 --> 00:03:34.470
So WebpackBundleAnalyzer.

49
00:03:34.470 --> 00:03:43.400
Now, we just pulled this
repo into our organization.

50
00:03:43.400 --> 00:03:47.000
We have a separate org that we own,
called webpack contrib.

51
00:03:48.240 --> 00:03:53.560
And it houses all of our are owned or
managed loaders and plugins.

52
00:03:53.560 --> 00:03:57.390
And this one we just added in but there's
a slight convention when you're using

53
00:03:57.390 --> 00:04:01.240
Webpack Bundle Analyzer that's not
really the same as most plugins.

54
00:04:01.240 --> 00:04:05.770
And it's that, you have to access a named
export called Bundle Analyzer Plugin

55
00:04:05.770 --> 00:04:07.280
to use this.

56
00:04:07.280 --> 00:04:10.380
I think it's so weird but,
we should fix it now that we own it.

57
00:04:12.460 --> 00:04:17.240
But like we do anything else,
we just call new WebpackBundleAnalyzer.

58
00:04:17.240 --> 00:04:21.050
And why do we put this to practice now?

59
00:04:21.050 --> 00:04:26.340
So, our script was called prod analyze.

60
00:04:28.040 --> 00:04:29.747
So, yarn prod-analyze.

61
00:04:36.507 --> 00:04:38.080
&gt;&gt; Sean Larkin: Whoa, whats happening?

62
00:04:38.080 --> 00:04:40.380
[LAUGH] This is the exciting part.

63
00:04:41.520 --> 00:04:45.420
So this is what webpack
bundle analyzer does.

64
00:04:45.420 --> 00:04:50.710
So out of the box, it creates a separate
dev server that you could open up.

65
00:04:50.710 --> 00:04:55.600
And it gives you a tree map visualization
of what is in your bundle, right?

66
00:04:56.620 --> 00:05:00.230
And so, this is incredibly,
incredibly valued for

67
00:05:00.230 --> 00:05:03.990
identifying like, why do I have
duplication across these bundles?

68
00:05:03.990 --> 00:05:07.820
Or why is this file not
getting separated out?

69
00:05:07.820 --> 00:05:10.170
Or why is this not being tree shaken?

70
00:05:13.520 --> 00:05:19.000
And so that is super, super valuable for
identifying that kind of stuff.

71
00:05:19.000 --> 00:05:25.990
And even if you had a bigger application,
I think what I wanna do in here tomorrow,

72
00:05:25.990 --> 00:05:30.390
we'll use this preset and we'll use it for
identifying performance issues.

73
00:05:30.390 --> 00:05:33.780
Like, I want to use load ash, but for

74
00:05:33.780 --> 00:05:37.740
some reason I'm getting three gigs,
or three meg in my bundle.

75
00:05:37.740 --> 00:05:39.110
And I don't know why.

76
00:05:39.110 --> 00:05:40.970
I'm only using one function.

77
00:05:40.970 --> 00:05:42.080
Why is webpack broken?

78
00:05:42.080 --> 00:05:42.790
Or whatever.

79
00:05:44.660 --> 00:05:48.360
And so this is super viable to help
identify like, why did this happen?

