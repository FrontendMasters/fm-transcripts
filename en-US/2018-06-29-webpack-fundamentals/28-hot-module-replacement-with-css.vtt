WEBVTT

1
00:00:00.030 --> 00:00:03.545
&gt;&gt; Sean Larkin: Now what's
really cool is that by default,

2
00:00:03.545 --> 00:00:08.675
if we were to look at this generated code,
you're gonna see some

3
00:00:08.675 --> 00:00:13.720
special annotations wrapped
around this JavaScript module.

4
00:00:13.720 --> 00:00:20.200
And the reason why is, is because see
it there, loaders are really useful for

5
00:00:20.200 --> 00:00:25.460
helping support a unique webpack
feature called hot module replacement.

6
00:00:25.460 --> 00:00:29.070
And I think it's easier to show you,
or for

7
00:00:29.070 --> 00:00:33.070
you to experience what it is,
instead of trying to explain how it works.

8
00:00:33.070 --> 00:00:38.833
So to experience it, all I want you to
do is jump into your package.json and

9
00:00:38.833 --> 00:00:41.309
where you have your dev script.

10
00:00:41.309 --> 00:00:46.557
I want you to add another flag
at the end that says --hot.

11
00:00:48.811 --> 00:00:50.339
&gt;&gt; Sean Larkin: Let me zoom
out on that just a little bit.

12
00:00:54.067 --> 00:00:57.070
&gt;&gt; Sean Larkin: And I'm not really going
to dive into what hot module replacement

13
00:00:57.070 --> 00:00:58.770
is beyond like what it provides you.

14
00:01:00.240 --> 00:01:04.375
So if we look now and
we restart our build.

15
00:01:09.335 --> 00:01:12.398
&gt;&gt; Sean Larkin: Why don't we take that
import that we imported into footer?

16
00:01:12.398 --> 00:01:18.239
I know why, and
let's move this into the entry point.

17
00:01:25.447 --> 00:01:26.504
&gt;&gt; Sean Larkin: Let's see.

18
00:01:30.197 --> 00:01:34.214
&gt;&gt; Sean Larkin: So jump to index and
let's add it right here.

19
00:01:38.792 --> 00:01:42.160
&gt;&gt; Sean Larkin: Let's see,
that should still work.

20
00:01:42.160 --> 00:01:42.780
Yeah, it does, okay.

21
00:01:43.810 --> 00:01:47.990
If you wanted to even use import
CSS from whatever, it still works.

22
00:01:47.990 --> 00:01:52.740
But really that code is just
declarative or it creates side effects.

23
00:01:53.970 --> 00:01:58.060
So let's try and
see if we get that feature again.

24
00:01:58.060 --> 00:02:00.180
If not, I'll leave it alone,
and we can keep going and

25
00:02:00.180 --> 00:02:02.592
talk about how we're gonna change this for
production mode.

26
00:02:08.904 --> 00:02:09.630
&gt;&gt; Sean Larkin: There you go.

27
00:02:09.630 --> 00:02:11.980
Now, did you notice that?

28
00:02:11.980 --> 00:02:18.204
So, if you change a property now,
&gt;&gt; Sean Larkin: Instantly,

29
00:02:18.204 --> 00:02:23.108
you're seeing changes before your eyes,
and we're not reloading the browser.

30
00:02:27.165 --> 00:02:28.280
&gt;&gt; Sean Larkin: We do nothing.

31
00:02:28.280 --> 00:02:31.130
So this is how module replacement is.

32
00:02:31.130 --> 00:02:36.410
Webpack has this capability of being
able to patch changes that are made

33
00:02:36.410 --> 00:02:40.270
incrementally and apply them without
you ever having to reload the browser.

34
00:02:40.270 --> 00:02:44.850
It's just super valuable when you have
capabilities, like something that

35
00:02:44.850 --> 00:02:48.935
has a lot of complex state and refreshing
the browser would be a real pain to debug.

36
00:02:50.130 --> 00:02:53.450
And it's also just a really
cool development experience.

37
00:02:53.450 --> 00:02:58.150
You can essentially like, as like this I
think is really cool for designers to go

38
00:02:58.150 --> 00:03:02.020
through and they could get live feedback
without having to mess with anything.

39
00:03:04.730 --> 00:03:09.650
Now let's also go ahead, now this wouldn't
be something that we would wanna do.

40
00:03:10.990 --> 00:03:15.800
So the CSS that we have now,
it's just adding a module and

41
00:03:15.800 --> 00:03:17.510
it's blocking the main thread, right?

42
00:03:17.510 --> 00:03:20.970
Because you're relying on
JavaScript to attach a style tag.

43
00:03:22.080 --> 00:03:26.220
And so instead what we would wanna do,
is we would wanna extract it out and

44
00:03:26.220 --> 00:03:27.810
have it in a separate tag, right?

45
00:03:28.950 --> 00:03:34.050
So, we can do this by adding
the mini CSS extract plug-in.

46
00:03:34.050 --> 00:03:39.300
But we're gonna apply it to our,
so close others, let's see.

47
00:03:40.720 --> 00:03:43.557
We're gonna apply this
our production config.

48
00:03:45.844 --> 00:03:50.450
&gt;&gt; Sean Larkin: Now I always forget
the order, so I'm just gonna pull it up.

49
00:03:50.450 --> 00:03:53.080
And this is kind of the same thing.

50
00:03:53.080 --> 00:03:57.660
If there's a plugin you want to use,
we stress really importantly the ability

51
00:03:57.660 --> 00:04:02.220
to have these options documented.

52
00:04:02.220 --> 00:04:06.140
But there's two pieces that
you're gonna add for this.

53
00:04:06.140 --> 00:04:09.060
The first one is going
to be the plugin itself,

54
00:04:09.060 --> 00:04:12.390
and then we're also gonna
add kinda the module rules.

55
00:04:12.390 --> 00:04:15.610
And we're gonna leverage that plugin
a special loader that extracts these

56
00:04:15.610 --> 00:04:16.300
pieces out.

57
00:04:18.620 --> 00:04:21.226
So, why don't we go ahead and
just add that information?

58
00:04:21.226 --> 00:04:24.461
So first things first is that we'll
go ahead and require that plugin.

59
00:04:24.461 --> 00:04:29.544
So const MiniCssExtractPlugin = require,
here,

60
00:04:29.544 --> 00:04:34.632
I'll hide the window,
we don't need it right now.

61
00:04:41.069 --> 00:04:41.870
&gt;&gt; Sean Larkin: Here we go.

62
00:04:41.870 --> 00:04:45.690
And then we can just add that plugin

63
00:04:47.360 --> 00:04:51.800
in a plugins array,
[COUGH] just as we see here.

64
00:04:51.800 --> 00:04:53.730
Now, these are just
options that you can use.

65
00:04:53.730 --> 00:04:57.440
But, and they use the same name
helpers like you're used to seeing for

66
00:04:57.440 --> 00:04:59.000
the output property.

67
00:04:59.000 --> 00:05:01.050
But by default, these are all set.

68
00:05:01.050 --> 00:05:03.470
So you can just pass a new reference.

69
00:05:03.470 --> 00:05:04.890
I think that's really nice.

70
00:05:04.890 --> 00:05:06.260
Good defaults are really important.

71
00:05:07.890 --> 00:05:10.645
So now,
we also wanna add the module property.

72
00:05:15.221 --> 00:05:18.819
&gt;&gt; Sean Larkin: So yeah, module and rules.

73
00:05:20.490 --> 00:05:25.226
Then in the same way we have to
basically create an array of, or

74
00:05:25.226 --> 00:05:30.750
like we're defining when we want
to apply these capabilities.

75
00:05:30.750 --> 00:05:34.170
So I'm pretty comfortable with copy pasta,

76
00:05:35.930 --> 00:05:38.470
only appropriate place
number two to do it.

77
00:05:41.010 --> 00:05:44.880
So, we'll just add this inside
ofthe rules array, right?

78
00:05:44.880 --> 00:05:48.090
Now there's a little difference that's
gonna happen now, instead of using style

79
00:05:48.090 --> 00:05:54.012
loader, we're actually gonna use
this MiniCssExtractPlugin.loader.

80
00:05:54.012 --> 00:05:58.373
So it'll be whatever name you give it
here, .loader instead of style loader.

81
00:06:01.765 --> 00:06:02.390
&gt;&gt; Sean Larkin: There we go.

82
00:06:03.700 --> 00:06:07.170
So why don't we go ahead and
actually run our production config and

83
00:06:07.170 --> 00:06:08.163
see what happens.

84
00:06:08.163 --> 00:06:11.413
So yarn prod, or

85
00:06:11.413 --> 00:06:15.840
mpm run prod run prod.

86
00:06:15.840 --> 00:06:16.439
We get a build.

87
00:06:19.223 --> 00:06:21.349
&gt;&gt; Sean Larkin: And
if we look in the feedback, hey,

88
00:06:21.349 --> 00:06:26.231
we have now a completely separate CSS file
that has been admitted to our dist folder.

89
00:06:29.599 --> 00:06:33.847
&gt;&gt; Sean Larkin: Now, maybe for the ease
of seeing what's in your dist, you can,

90
00:06:33.847 --> 00:06:39.140
it's always well, let's make one change
here and that is in your production.

91
00:06:39.140 --> 00:06:42.890
Just so you don't get a new hash
every time, just go ahead and

92
00:06:42.890 --> 00:06:44.330
change this back to bundle.

93
00:06:44.330 --> 00:06:46.867
That way this folder
doesn't keep piling up.

94
00:06:46.867 --> 00:06:49.970
[COUGH]
I just like deleting it.

95
00:06:49.970 --> 00:06:53.080
You can always get it back,
webpack creates it.

96
00:06:53.080 --> 00:06:54.024
Yarn prod.

97
00:06:58.158 --> 00:07:00.380
&gt;&gt; Sean Larkin: There you go.

98
00:07:00.380 --> 00:07:02.210
Nice and clean.

99
00:07:02.210 --> 00:07:03.970
So there is the styles that we wrote.

100
00:07:05.170 --> 00:07:12.188
In addition to, the CSS is actually put
in the right location inside of the HTML.

101
00:07:15.420 --> 00:07:17.436
&gt;&gt; Sean Larkin: So
this is really the best practice for

102
00:07:17.436 --> 00:07:19.490
how you're trying to load CSS.

103
00:07:19.490 --> 00:07:23.820
Now, when we talk about
code splitting tomorrow,

104
00:07:23.820 --> 00:07:29.200
I'm gonna go over how MiniCssExtractPlugin
is really valuable to us.

105
00:07:29.200 --> 00:07:32.920
We just added this plugin and
it's only webpack 4 compatible.

106
00:07:32.920 --> 00:07:37.630
But we added it because it has support for
lazy loading CSS.

107
00:07:37.630 --> 00:07:38.710
I think that's really cool,

108
00:07:38.710 --> 00:07:43.990
because it's nothing that any build tools
have been able to generate so far for us.

109
00:07:43.990 --> 00:07:48.672
And so really makes performance possible,
especially in the realms of CSS.

110
00:07:51.640 --> 00:07:54.300
&gt;&gt; Sean Larkin: Does anybody have
any questions so far about this?

111
00:07:54.300 --> 00:08:01.210
We could even, if you wanted to preview
it, you could, like an HTTP server.

112
00:08:01.210 --> 00:08:06.440
But the behavior will be identical in
terms of what will show on the page, yeah?

113
00:08:06.440 --> 00:08:10.734
&gt;&gt; Speaker 2: If you import multiple CSS
files, will it inject multiple link tags?

114
00:08:10.734 --> 00:08:11.631
&gt;&gt; Sean Larkin: Mm-hm, it will.

115
00:08:11.631 --> 00:08:14.750
I don't believe multiple link,
well let's find out.

116
00:08:14.750 --> 00:08:18.500
I don't believe it's multiple link tags,
it will be kind of in the same CSS file.

117
00:08:18.500 --> 00:08:19.588
&gt;&gt; Speaker 2: So it could concatenate it?

118
00:08:19.588 --> 00:08:24.357
&gt;&gt; Sean Larkin: Yep, and you can actually,
I think there's even through

119
00:08:24.357 --> 00:08:29.240
the CSS loader, you can minify and
do other capabilities.

120
00:08:29.240 --> 00:08:32.730
As long as it's in the loader chain,
you can really apply any changes you want.

121
00:08:32.730 --> 00:08:33.790
And yeah, let's do that.

122
00:08:33.790 --> 00:08:36.510
We want to add another CSS file.

123
00:08:36.510 --> 00:08:38.030
We should, it makes sense.

124
00:08:38.030 --> 00:08:41.750
Let's just do one for
the old button, right?

125
00:08:43.750 --> 00:08:50.794
So let's create
&gt;&gt; Sean Larkin: button.css.

126
00:08:51.930 --> 00:08:53.310
What's a good button attribute?

127
00:08:56.227 --> 00:08:58.780
&gt;&gt; Sean Larkin: Background
attachment button image outset.

128
00:08:58.780 --> 00:09:01.900
I'm not even sure what a great one is.

129
00:09:01.900 --> 00:09:03.950
&gt;&gt; Speaker 3: Font family fantasy?

130
00:09:03.950 --> 00:09:06.420
&gt;&gt; Sean Larkin: I like it,
font family fantasy.

131
00:09:07.750 --> 00:09:09.550
Is it just like fantasy?

132
00:09:10.810 --> 00:09:12.065
Like that?

133
00:09:12.065 --> 00:09:16.789
Cool, ship it,
let's run our production build.

134
00:09:19.883 --> 00:09:22.763
&gt;&gt; Speaker 3: Actually I think it's a name
value, you don't have to put it in quotes.

135
00:09:22.763 --> 00:09:27.320
&gt;&gt; [CROSSTALK]
&gt;&gt; Sean Larkin: Nice, and lowercase?

136
00:09:27.320 --> 00:09:27.820
&gt;&gt; Speaker 3: Yeah.

137
00:09:29.910 --> 00:09:31.375
&gt;&gt; Sean Larkin: See,
this is where I rely on you all.

138
00:09:31.375 --> 00:09:34.780
[LAUGH] Awesome.

139
00:09:34.780 --> 00:09:36.850
So let's take a look, yeah, and
it looks like it's just one.

140
00:09:36.850 --> 00:09:39.720
So or unless we rebuild and
we see multiples.

141
00:09:41.860 --> 00:09:44.470
Well, of course, we haven't
actually imported this anywhere.

142
00:09:44.470 --> 00:09:46.640
So we don't see the extra one created.

143
00:09:46.640 --> 00:09:49.080
Let's jump to our entry point and
actually import it.

144
00:09:50.110 --> 00:09:51.896
I always jump ahead of myself.

145
00:09:51.896 --> 00:09:58.490
New button from button.css.

146
00:09:58.490 --> 00:09:58.990
There we go.

147
00:10:03.403 --> 00:10:04.502
&gt;&gt; Sean Larkin: Uh-oh, what happened?

148
00:10:10.940 --> 00:10:13.290
&gt;&gt; Speaker 3: Button is already declared.

149
00:10:13.290 --> 00:10:14.034
&gt;&gt; Sean Larkin: Thank you very much.

150
00:10:17.037 --> 00:10:17.677
&gt;&gt; Sean Larkin: I love it.

151
00:10:20.930 --> 00:10:23.710
&gt;&gt; Sean Larkin: That wasn't a very
friendly error message, though.

152
00:10:23.710 --> 00:10:25.140
It was, okay.

153
00:10:25.140 --> 00:10:26.450
There we go.

154
00:10:26.450 --> 00:10:29.370
That's pretty helpful,
though, for identifying that.

155
00:10:29.370 --> 00:10:31.120
Okay, so let's look at what the output is.

156
00:10:32.330 --> 00:10:33.310
So it's still a single.

157
00:10:34.480 --> 00:10:39.078
And we have both of our styles there.

158
00:10:39.078 --> 00:10:42.281
&gt;&gt; Sean Larkin: Now what'd be cool in
a perfect world is if it optimized it in

159
00:10:42.281 --> 00:10:43.120
the right way.

160
00:10:44.170 --> 00:10:45.810
We're hoping to work
with the LinkedIn team,

161
00:10:45.810 --> 00:10:49.530
who kind of created this
new tool called CSS Blocks.

162
00:10:49.530 --> 00:10:52.510
And that optimizing compiler
really does things like that.

163
00:10:52.510 --> 00:10:53.880
How cool would that be?

164
00:10:53.880 --> 00:10:56.340
That seems like a core tenet that
would make sense for webpack.

165
00:10:57.370 --> 00:10:58.398
&gt;&gt; Speaker 4: So what's that,

166
00:10:58.398 --> 00:11:01.771
you're importing those to
the top-level module there.

167
00:11:01.771 --> 00:11:02.340
&gt;&gt; Sean Larkin: Mm-hm.

168
00:11:02.340 --> 00:11:08.300
&gt;&gt; Speaker 4: And then it's just gonna be
putting those all in the same scope there.

169
00:11:08.300 --> 00:11:10.600
So the CSS wouldn't be
scoped to the module?

170
00:11:10.600 --> 00:11:12.564
&gt;&gt; Sean Larkin: So
that is a caveat to think about.

171
00:11:12.564 --> 00:11:17.210
And that's why, when we talk about,
let's say, Code splitting CSS,

172
00:11:17.210 --> 00:11:22.340
it becomes valuable to then separate
those into asynchronous applications.

173
00:11:22.340 --> 00:11:26.825
So you can, in real time,
dynamically force

174
00:11:26.825 --> 00:11:31.647
a scope change by applying
a new style sheet.

175
00:11:31.647 --> 00:11:34.673
&gt;&gt; Sean Larkin: This is a very
vanilla way of doing it,

176
00:11:34.673 --> 00:11:40.780
a lot of people will end up using CSS
modules to have the scope capabilities.

177
00:11:40.780 --> 00:11:43.720
Or they'll use their
framework's recommended way

178
00:11:44.790 --> 00:11:46.580
that webpack powers behind the scenes.

179
00:11:48.250 --> 00:11:51.593
But just from its primitive,
yeah, exactly,

180
00:11:51.593 --> 00:11:55.365
from the simplest use case,
that's what it will do.

181
00:11:57.596 --> 00:12:00.680
&gt;&gt; Sean Larkin: So, I'm just gonna
check this out really quick.

182
00:12:00.680 --> 00:12:03.837
So, if you want to play with the styles or
launch the dev server,

183
00:12:03.837 --> 00:12:06.715
see how everything looks,
feel free to go ahead and do so.

184
00:12:06.715 --> 00:12:07.215
I'm just gonna create a branch.

