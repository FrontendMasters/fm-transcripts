WEBVTT

1
00:00:02.494 --> 00:00:04.361
&gt;&gt; Sean Larkin: Yeah, go ahead,
this is the perfect time.

2
00:00:04.361 --> 00:00:09.432
Cuz really I think this kinda rounds out,
now, you should,

3
00:00:09.432 --> 00:00:15.810
by default at least, have everything,
understanding how to use a loader.

4
00:00:15.810 --> 00:00:18.032
Understanding how to apply it,

5
00:00:18.032 --> 00:00:23.805
understanding where it is composed to
isolate behaviors in your configurations.

6
00:00:23.805 --> 00:00:29.570
How really to use ESM and
even common JS if you have to.

7
00:00:29.570 --> 00:00:34.337
But I mean hopefully you feel a lot more
confident about what Webpack is that it's

8
00:00:34.337 --> 00:00:35.751
doing and how it works.

9
00:00:35.751 --> 00:00:38.981
Tomorrow, before we learn about plugins,

10
00:00:38.981 --> 00:00:43.608
I have a special deep dive section
which actually talks about,

11
00:00:43.608 --> 00:00:47.640
what is Webpack doing under the hood,
specifically?

12
00:00:49.020 --> 00:00:52.840
But yeah, I think, rounded out wise,
this is a good place to stop in terms of

13
00:00:52.840 --> 00:00:59.299
content, what were the other questions?
&gt;&gt; Speaker 2: If

14
00:00:59.299 --> 00:01:03.538
you split your JavaScript files into main,

15
00:01:03.538 --> 00:01:08.360
vendor and manifest,
as per the docs on caching.

16
00:01:08.360 --> 00:01:14.151
And your vendor files getting too big,
what are some of the step

17
00:01:14.151 --> 00:01:19.122
you'd take to reduce the file size?
&gt;&gt; Sean Larkin: That guide that we talk

18
00:01:19.122 --> 00:01:23.875
about there, I don't think it's
been upgraded to Webpack 4 yet.

19
00:01:23.875 --> 00:01:27.636
And we'll talk about
caching tomorrow as well.

20
00:01:27.636 --> 00:01:30.328
But If you're still on Webpack 3,

21
00:01:30.328 --> 00:01:34.230
I'll just say remove
the comments chunks plugin.

22
00:01:34.230 --> 00:01:39.047
Basically caching is way less
important than being able to minimize

23
00:01:39.047 --> 00:01:43.366
the amount of JavaScript you
have on your initial download.

24
00:01:43.366 --> 00:01:50.080
So you can still split out the manifest,
that's valuable.

25
00:01:50.080 --> 00:01:53.055
When they say manifest it's really
the run time, the bootstrap code.

26
00:01:53.055 --> 00:01:58.452
But I would say focus more on
actually splitting your code

27
00:01:58.452 --> 00:02:04.879
with like the dynamic import statement
&gt;&gt; Sean Larkin: Instead

28
00:02:04.879 --> 00:02:08.727
of trying to force or
synthetically create this spender bundle.

29
00:02:08.727 --> 00:02:14.846
Because at the end of the day, caching
really only solves the time it takes for

30
00:02:14.846 --> 00:02:17.590
the network to retrieve an asset.

31
00:02:18.600 --> 00:02:22.465
But the number one cost of a page loading
slowly is the amount of JavaScript you

32
00:02:22.465 --> 00:02:24.321
have to parse evaluate and execute.

33
00:02:24.321 --> 00:02:28.636
So you don't get any winds there
by creating these vendor bundles.

34
00:02:28.636 --> 00:02:33.569
So I would say like long answer short,
turn the caching off,

35
00:02:33.569 --> 00:02:36.310
turn the caching features off.

36
00:02:36.310 --> 00:02:39.623
And then just focus on trying to
asynchronously load code that you don't

37
00:02:39.623 --> 00:02:44.364
need upfront.
&gt;&gt; Sean Larkin: Any other

38
00:02:44.364 --> 00:02:49.364
questions?
&gt;&gt; Speaker 3: Is

39
00:02:49.364 --> 00:02:53.638
there a lazy load plugin you'd recommend?
&gt;&gt; Sean Larkin: So lazy loading is code

40
00:02:53.638 --> 00:02:59.675
splitting in Webpack, and
we have a plan to clear up these.

41
00:02:59.675 --> 00:03:04.380
So I'll give you a preview
of what it looks like.

42
00:03:04.380 --> 00:03:08.820
So let's say for example,
we don't need this footer code.

43
00:03:10.000 --> 00:03:13.224
We'll make it as a scenario, and so

44
00:03:13.224 --> 00:03:18.924
it's kind of contrived here,
but I'm just in our dev server.

45
00:03:18.924 --> 00:03:24.094
But let's just say,
I would only want to load the footer

46
00:03:24.094 --> 00:03:28.398
when somebody clicks on that button,
right?

47
00:03:28.398 --> 00:03:32.248
So the first question you would ask is,
well,

48
00:03:32.248 --> 00:03:37.680
if I'm going to load the footer
only when the button's clicked,

49
00:03:37.680 --> 00:03:40.768
why would I load it up front, right?

50
00:03:40.768 --> 00:03:43.666
So this was the main reason
Webpack was created,

51
00:03:43.666 --> 00:03:48.420
was to be able to support this case
of lazy loading or code splitting.

52
00:03:48.420 --> 00:03:54.182
So what we can do is we can
just remove that footer and

53
00:03:54.182 --> 00:03:58.604
instead we just need to basically say,

54
00:03:58.604 --> 00:04:05.981
button.addEventListener, click,
and now we have the event.

55
00:04:05.981 --> 00:04:09.719
So this call back is only gonna
trigger when this event happens.

56
00:04:10.810 --> 00:04:13.375
And instead of having
this footer statement,

57
00:04:13.375 --> 00:04:16.408
we can actually say something
like const loadFooter.

58
00:04:16.408 --> 00:04:18.978
So there's two ways to do it.

59
00:04:18.978 --> 00:04:21.476
I'd like to obstruct it
out because it's easier to

60
00:04:21.476 --> 00:04:24.631
understand.
&gt;&gt; Sean Larkin: So

61
00:04:24.631 --> 00:04:27.665
this is called
the Dynamic Important Statement.

62
00:04:27.665 --> 00:04:29.855
Webpack supports it out of the box,

63
00:04:29.855 --> 00:04:34.607
if you're using Babble you have to add
another plugin to support the syntax.

64
00:04:34.607 --> 00:04:38.240
But typescript can handle it, so
you don't need to do anything extra.

65
00:04:38.240 --> 00:04:42.666
But stand alone without Babble or
Typescript Webpack can read this and

66
00:04:42.666 --> 00:04:44.400
it handles the statement.

67
00:04:44.400 --> 00:04:49.700
So I would just pass the exact same,
the footer.

68
00:04:51.260 --> 00:04:52.492
And I think what I'll do, let's see.

69
00:04:52.492 --> 00:04:57.088
Was that a default export?
&gt;&gt; Sean Larkin: No, it's not.

70
00:04:57.088 --> 00:05:04.479
Okay, so I'm just gonna say m,
no, this is fine.

71
00:05:04.479 --> 00:05:12.640
So all I've done is I've changed what
was import footer from footer, right?

72
00:05:12.640 --> 00:05:16.571
So that's where we started, and
I changed it to actually be this.

73
00:05:16.571 --> 00:05:21.821
Now, what we can do here is we
will probably move this code,

74
00:05:21.821 --> 00:05:27.823
this document.appendChild-
&gt;&gt; Sean Larkin: Up inside of,

75
00:05:27.823 --> 00:05:30.420
is that the right way to do it?

76
00:05:30.420 --> 00:05:31.400
Yeah, it is.
Okay,

77
00:05:31.400 --> 00:05:36.391
I would add it inside this event listener,
right?

78
00:05:36.391 --> 00:05:38.840
We'll need that eventually.

79
00:05:38.840 --> 00:05:43.755
But all we're doing is we're taking, we're
actually gonna call this inside the event.

80
00:05:43.755 --> 00:05:47.400
So loadFooter and it returns a promise.

81
00:05:47.400 --> 00:05:51.956
So Webpack converts this statement
into a promise itself that

82
00:05:51.956 --> 00:05:54.067
lazy loads a separate file.

83
00:05:54.067 --> 00:05:58.567
So what I'm doing here is
just saying I get the module

84
00:05:58.567 --> 00:06:01.228
and then I think it's probably

85
00:06:01.228 --> 00:06:07.933
end.footer.
&gt;&gt; Sean Larkin: We'll pull it up

86
00:06:07.933 --> 00:06:14.264
inside of the dev server here in a second.
&gt;&gt; Sean Larkin: So

87
00:06:14.264 --> 00:06:16.645
let's take a look and see if it worked.

88
00:06:16.645 --> 00:06:21.467
I usually console log or set a break
point to make sure I know what it

89
00:06:21.467 --> 00:06:25.443
looks like.
&gt;&gt; Sean Larkin: All right, so

90
00:06:25.443 --> 00:06:28.530
we don't have a footer,
and we do have a footer.

91
00:06:28.530 --> 00:06:31.807
So you can see,
if we look at our bundles now,

92
00:06:31.807 --> 00:06:35.536
we've actually created a separate file,
right?

93
00:06:35.536 --> 00:06:37.316
It's a completely separate bundle.

94
00:06:37.316 --> 00:06:44.961
And let's see.
&gt;&gt; Sean Larkin: We'll just load it again.

95
00:06:44.961 --> 00:06:49.668
So only when, so now, we're not
incurring any of that code that's

96
00:06:49.668 --> 00:06:54.058
only needed until that user
actually does something, right?

97
00:06:54.058 --> 00:06:58.070
Or until some sort of
asynchronous process happens.

98
00:06:58.070 --> 00:06:59.978
And so in this case it's a call back.

99
00:06:59.978 --> 00:07:03.526
So only when that happen does
this code actually load.

100
00:07:03.526 --> 00:07:06.781
This is what's called,
when we say code splitting or any Webpack

101
00:07:06.781 --> 00:07:11.760
maintenance to this code splitting, this
is the process that we're referring to.

102
00:07:11.760 --> 00:07:13.521
And so you don't need a plug in,

103
00:07:13.521 --> 00:07:16.928
it's actually just imperative
as part of the code you write.

104
00:07:16.928 --> 00:07:22.580
That's what makes it so, I guess, I think
it's so expressive and really powerful.

105
00:07:22.580 --> 00:07:27.530
Because literally all we've changed is
just, we took the static import out,

106
00:07:27.530 --> 00:07:30.605
which would force you to
have that code upfront,

107
00:07:30.605 --> 00:07:33.613
into a function that
returns a dynamic import.

108
00:07:33.613 --> 00:07:40.391
And so we just call that, and then we
grab the export we need which is .footer,

109
00:07:40.391 --> 00:07:48.690
and we can just use it the exact same way.
&gt;&gt; Sean Larkin: Yep?

110
00:07:48.690 --> 00:07:50.240
&gt;&gt; Speaker 4: Any tree shaking benefit

111
00:07:50.240 --> 00:07:53.265
over exporting individual
functions instead of

112
00:07:53.265 --> 00:07:58.237
the class?
&gt;&gt; Sean Larkin: So

113
00:07:58.237 --> 00:08:02.635
this I'll definitely talk about tomorrow.

114
00:08:02.635 --> 00:08:07.194
We have the first part of the day
is all about web performance and

115
00:08:07.194 --> 00:08:10.040
the constraints and the limitations.

116
00:08:10.040 --> 00:08:12.654
So I'll give you the-
&gt;&gt; Speaker 4: Let's

117
00:08:12.654 --> 00:08:15.257
just defer it to tomorrow?
&gt;&gt; Sean Larkin: Yeah, I'll cover it

118
00:08:15.257 --> 00:08:19.050
tomorrow but I'll give the short answer
now and we'll dive into it more tomorrow.

119
00:08:19.050 --> 00:08:20.837
The short answer is, yes,

120
00:08:20.837 --> 00:08:25.209
methods on classes cannot be tree
shaken even if they are not used.

121
00:08:25.209 --> 00:08:28.809
So I typically tend,
when I'm writing for a web scenario,

122
00:08:28.809 --> 00:08:33.110
you can kinda see everything
I write is a function, right?

123
00:08:33.110 --> 00:08:37.636
I'm either writing functions or
just individual exports of values.

124
00:08:37.636 --> 00:08:42.240
The reason why is because those can
actually be statically tree shaken.

125
00:08:42.240 --> 00:08:47.583
So I usually tell people, I know
the object-oriented folks are like, why?

126
00:08:47.583 --> 00:08:52.317
But, I usually say, either have classes
with very small amount of methods where

127
00:08:52.317 --> 00:08:56.840
you can incur a little overhead of
something that doesn't get used.

128
00:08:56.840 --> 00:09:00.116
Or just switch to using a function.

129
00:09:00.116 --> 00:09:05.500
When you think about scope and object
oriented, like modules are your scope.

130
00:09:05.500 --> 00:09:08.149
People used to create
classes to scope things, but

131
00:09:08.149 --> 00:09:11.669
now you have this beautiful
primitive that's literally a module.

132
00:09:11.669 --> 00:09:16.301
And so you can get dependency
injection just using ESM.

133
00:09:16.301 --> 00:09:21.653
You could export, you don't even need
a custom dependency injection system

134
00:09:21.653 --> 00:09:27.105
because you could have singletons or
new instances any time using importing.

135
00:09:27.105 --> 00:09:30.010
So the short answer is yes.

136
00:09:30.010 --> 00:09:35.000
You would be better off exporting
individual functions and

137
00:09:35.000 --> 00:09:39.900
values and primitives,
versus exporting a whole class.

138
00:09:39.900 --> 00:09:40.659
&gt;&gt; Speaker 5: I just have one

139
00:09:40.659 --> 00:09:42.782
quick question if that's okay.
&gt;&gt; Sean Larkin: Yeah.

140
00:09:42.782 --> 00:09:44.650
&gt;&gt; Speaker 5: So it's the same problem as

141
00:09:44.650 --> 00:09:50.350
npm in general, but, how do you go about
finding good plugins versus bad plugins?

142
00:09:50.350 --> 00:09:51.859
I mean is there a curated list or

143
00:09:51.859 --> 00:09:53.038
is there like-
&gt;&gt; Sean Larkin: Yeah.

144
00:09:53.038 --> 00:09:53.693
&gt;&gt; Speaker 5: How would you go

145
00:09:53.693 --> 00:09:54.238
about it?
&gt;&gt; Sean Larkin: So

146
00:09:54.238 --> 00:09:55.268
that's a great question.

147
00:09:55.268 --> 00:10:00.286
So really we have a couple resources.

148
00:10:00.286 --> 00:10:05.374
Well, one, Webpack-Contrib hosts,
we go out of our

149
00:10:05.374 --> 00:10:12.906
way to ensure we at some time eventually
own a really popular third party plugin.

150
00:10:12.906 --> 00:10:18.230
There are very few that I know of
besides what the Chrome team manages.

151
00:10:18.230 --> 00:10:21.818
And that's for
like their service worker stuff or

152
00:10:21.818 --> 00:10:25.755
like fire base or whatever or
like Angular and theres.

153
00:10:25.755 --> 00:10:31.655
So we essentially house, Webpack-contrib
is 90 repositories of loaders,

154
00:10:31.655 --> 00:10:34.568
and plugins, and some utility stuff.

155
00:10:34.568 --> 00:10:38.771
But we own most of them,
almost all of them.

156
00:10:38.771 --> 00:10:45.142
And so I would just say the best.
&gt;&gt; Sean Larkin: I

157
00:10:45.142 --> 00:10:49.180
would say the best way is just to look and
see, kind of like, how maintained is it?

158
00:10:50.310 --> 00:10:52.880
What version of Webpack is in their tests?

159
00:10:52.880 --> 00:10:55.360
Is it 4 or is it like 1?

160
00:10:58.990 --> 00:11:01.860
A good example is I was looking up
a loader, I was trying to find a loader.

161
00:11:01.860 --> 00:11:09.870
So I was GLSL is for using 3js and
I was like GLS loader.

162
00:11:09.870 --> 00:11:15.189
And I stumbled across this
webpack-glsl-loader of course,

163
00:11:15.189 --> 00:11:18.713
you're like, there's 40 over them.

164
00:11:18.713 --> 00:11:23.614
So I think with the one I stumbled across
that I really liked was the Webpack 1.

165
00:11:23.614 --> 00:11:27.412
But it definitely wasn't maintained,
so much that like a PR

166
00:11:27.412 --> 00:11:32.100
that I've been trying to submit
has not been, like, even resolved.

167
00:11:32.100 --> 00:11:34.321
This one is pretty old too, right?

168
00:11:34.321 --> 00:11:39.698
If you look at it.
&gt;&gt; Sean Larkin: Yeah,

169
00:11:39.698 --> 00:11:42.917
and it's using like the old
she-bang in here, too.

170
00:11:42.917 --> 00:11:45.068
To go grab raw-loader.

171
00:11:45.068 --> 00:11:49.634
So I think the best way is like glslfy,

172
00:11:49.634 --> 00:11:54.632
this is probably an old browserify plugin

173
00:11:54.632 --> 00:11:59.530
that got converted to a loader too.

174
00:11:59.530 --> 00:12:03.601
So really the best way is kinda just like
the same way you would approach anything

175
00:12:03.601 --> 00:12:05.444
else, how much is it contributed?

176
00:12:05.444 --> 00:12:07.960
How active are its commits?

177
00:12:07.960 --> 00:12:10.001
And it may just be,
it's a finished module.

178
00:12:10.001 --> 00:12:14.582
There's some out there that are like that,
but you can always tweet us and be like,

179
00:12:14.582 --> 00:12:16.430
Sean, is this legit or not?

180
00:12:16.430 --> 00:12:21.293
And if you have issues, like we actively
try to reach out the maintainers

181
00:12:21.293 --> 00:12:25.855
themselves, we're like hey,
can we take this over, do you mind?

182
00:12:25.855 --> 00:12:28.563
Like we would love to get
this off your back, and

183
00:12:28.563 --> 00:12:31.813
then it's like, we can curate it,
standardize it, and

184
00:12:31.813 --> 00:12:37.805
make it consistent like the rest of them.
&gt;&gt; Sean Larkin: That would

185
00:12:37.805 --> 00:12:42.456
be probably the best way to find out.
&gt;&gt; Sean Larkin: Otherwise

186
00:12:42.456 --> 00:12:44.796
thank you guys for joining Day 1 and

187
00:12:44.796 --> 00:12:49.370
I will see you tomorrow.
&gt;&gt; Speaker 2: [APPLAUSE]

188
00:12:49.370 --> 00:12:51.300
&gt;&gt; Sean Larkin: That's a wrap.

189
00:12:51.300 --> 00:12:51.898
[LAUGH]

