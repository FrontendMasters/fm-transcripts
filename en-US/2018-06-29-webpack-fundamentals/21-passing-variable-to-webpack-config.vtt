WEBVTT

1
00:00:00.040 --> 00:00:01.850
&gt;&gt; Sean Larkin: I think, the first
thing I want to start off doing is

2
00:00:01.850 --> 00:00:02.870
just showing you

3
00:00:02.870 --> 00:00:06.370
how you can actually access environment
variables from the command line, right?

4
00:00:07.540 --> 00:00:11.460
And the first thing that we're gonna
do is jump into our scripts and

5
00:00:11.460 --> 00:00:13.773
we're just gonna modify it slightly.

6
00:00:13.773 --> 00:00:20.431
So [COUGH] instead of just passing
a mode flag which is acceptable,

7
00:00:20.431 --> 00:00:25.757
instead, what we're gonna do,
is anywhere we have

8
00:00:25.757 --> 00:00:30.857
mode specified,
let's change it to env.mode.

9
00:00:33.027 --> 00:00:35.611
&gt;&gt; Sean Larkin: So
when you pass the env flag to webpack,

10
00:00:35.611 --> 00:00:39.563
what it does is it takes whatever
value that is, in this case,

11
00:00:39.563 --> 00:00:43.290
it's like we're passing
an object with a mode property.

12
00:00:44.820 --> 00:00:50.250
And it's gonna provide that to the config
for you, in the inside of the function.

13
00:00:52.430 --> 00:00:56.520
So I'm gonna make this a little easier and
not use the functional programming syntax

14
00:00:56.520 --> 00:01:00.730
and instead I'll just say,
return an object.

15
00:01:00.730 --> 00:01:02.670
So something like this.

16
00:01:04.660 --> 00:01:05.670
And it'll reformat here.

17
00:01:07.270 --> 00:01:11.190
Take that, there we go.

18
00:01:11.190 --> 00:01:12.604
That looks similar, okay.

19
00:01:15.468 --> 00:01:18.495
&gt;&gt; Sean Larkin: So we can actually see
what the env value is just by console

20
00:01:18.495 --> 00:01:20.310
logging it, right?

21
00:01:20.310 --> 00:01:23.050
This is just a JavaScript module,
console should work in Node.

22
00:01:24.080 --> 00:01:25.690
And we're requiring it,
so we should see it.

23
00:01:25.690 --> 00:01:29.260
So if I ran npm run prod,
doesn't even matter.

24
00:01:31.570 --> 00:01:32.160
There we go.

25
00:01:34.540 --> 00:01:39.020
We actually had,
it logs the whole object, right?

26
00:01:41.340 --> 00:01:43.290
Does that make sense so far?

27
00:01:43.290 --> 00:01:47.390
Okay, so you can also just
pass single primitives also so

28
00:01:47.390 --> 00:01:55.880
if you just passed in env production,
when I ran this again.

29
00:01:55.880 --> 00:01:59.510
We're gonna see the value
is just production.

30
00:01:59.510 --> 00:02:00.690
Now, I always opt for

31
00:02:00.690 --> 00:02:04.305
having it be an object because there could
be lots of things that you wanna pass in,

32
00:02:04.305 --> 00:02:09.070
could be test parameters,
it could be environment variables.

33
00:02:09.070 --> 00:02:15.232
If you're using it from another build
process like Make or Cradle, or whatever,

34
00:02:15.232 --> 00:02:21.460
you can actually, whatever the term is for
that, sum, env, var or whatever.

35
00:02:21.460 --> 00:02:23.410
You could pass it in like that and
interpolate.

36
00:02:23.410 --> 00:02:24.989
So I always find that valuable.

37
00:02:26.900 --> 00:02:28.710
So now, we get a warning again though.

38
00:02:28.710 --> 00:02:31.510
So the mode option is not set anymore,
right?

39
00:02:31.510 --> 00:02:34.940
We're just passing an env
into the function.

40
00:02:35.990 --> 00:02:39.110
So we're just gonna leverage
this information now and

41
00:02:39.110 --> 00:02:41.570
pass it directly into the mode property.

42
00:02:41.570 --> 00:02:45.024
Like we defined earlier when
we set it to none, right?

43
00:02:45.024 --> 00:02:49.699
So mode: env.mode.

44
00:02:54.074 --> 00:02:55.424
&gt;&gt; Sean Larkin: So now,
if we run it again,

45
00:02:58.106 --> 00:02:58.750
&gt;&gt; Sean Larkin: There we go,

46
00:02:58.750 --> 00:03:00.920
back to kind of where
we started before him.

47
00:03:02.030 --> 00:03:05.310
So now that we're able to actually
get different behaviors inside of

48
00:03:05.310 --> 00:03:09.100
the function, we can actually start
doing some conditional stuff, right?

49
00:03:09.100 --> 00:03:12.460
We can change the behavior of
this object conditionally,

50
00:03:12.460 --> 00:03:13.750
based on that env parameter.

51
00:03:15.520 --> 00:03:20.200
I might even do something like this and
say, so I can tell right away, mode.

52
00:03:21.600 --> 00:03:23.767
Makes it easier to see.

53
00:03:23.767 --> 00:03:26.585
I think that would still work, too.

54
00:03:26.585 --> 00:03:30.423
npm run prod, let's see.

55
00:03:32.126 --> 00:03:32.870
&gt;&gt; Sean Larkin: Where did I fail?

56
00:03:35.485 --> 00:03:36.070
&gt;&gt; Sean Larkin: That's why.

57
00:03:36.070 --> 00:03:39.745
[LAUGH] Of course,
you have to update your variables, Shaun.

58
00:03:45.836 --> 00:03:47.184
&gt;&gt; Sean Larkin: And
since we're destructuring,

59
00:03:47.184 --> 00:03:48.930
you can actually make it look like that.

60
00:03:48.930 --> 00:03:49.913
It makes it a little bit easier.

61
00:03:59.347 --> 00:04:04.123
&gt;&gt; Sean Larkin: So now, we're kind of
at a point where it's, we're gonna have

62
00:04:04.123 --> 00:04:09.130
three different kind of configurations,
if you think about it.

63
00:04:09.130 --> 00:04:12.070
One is gonna be,
there are gonna be properties or

64
00:04:12.070 --> 00:04:17.380
essential plugins that you wanna have
across your whole build system, right?

65
00:04:17.380 --> 00:04:20.775
And then there are gonna be some that
work with your mode development and

66
00:04:20.775 --> 00:04:22.600
some that work with mode production.

67
00:04:22.600 --> 00:04:26.705
And there could be more, I think that
these are probably gonna be the best,

68
00:04:26.705 --> 00:04:29.257
this will be kind of a baseline or
foundation.

69
00:04:29.257 --> 00:04:33.899
And this is not something you
may find that maybe you don't

70
00:04:33.899 --> 00:04:37.130
even need to have this much broke apart.

71
00:04:37.130 --> 00:04:41.406
But it makes it easier to maintain and
a little bit easier to manage and

72
00:04:41.406 --> 00:04:42.300
understand.

