WEBVTT

1
00:00:00.000 --> 00:00:02.280
&gt;&gt; Sean Larkin: I'm gonna step
through this code really quickly.

2
00:00:02.280 --> 00:00:05.830
So what's the first thing that you
see here that's glaring obvious?

3
00:00:05.830 --> 00:00:08.430
You're like, whoa,
this is a common pattern

4
00:00:08.430 --> 00:00:13.010
I see anywhere dealing with bundling or
shipping code of the web in encapsulation.

5
00:00:14.260 --> 00:00:17.530
It's one of the first things we
talked about, do you guys see that?

6
00:00:17.530 --> 00:00:19.570
It is an IIFE, right?

7
00:00:19.570 --> 00:00:20.380
We have an IIFE.

8
00:00:20.380 --> 00:00:23.970
Okay so, when I read IIFEs, contextually,

9
00:00:23.970 --> 00:00:28.270
what I wanna see is, where's the end,
and what's being passed into it, right?

10
00:00:28.270 --> 00:00:31.410
Because that's our state,
that's our scope,

11
00:00:31.410 --> 00:00:35.070
that's all the data that's
gonna be used inside this IIFE.

12
00:00:35.070 --> 00:00:37.534
So, we know that we have an IIFE, and

13
00:00:37.534 --> 00:00:41.351
what's passed into it is
the variables called modules.

14
00:00:41.351 --> 00:00:45.040
We don't know what it looks like yet
though, so let's just dive to the bottom.

15
00:00:46.090 --> 00:00:48.640
Yeah that's right, I forget,
we decorate this on purpose.

16
00:00:48.640 --> 00:00:54.180
So the ending of these bar comments,
that's where the end of the IIFE is.

17
00:00:54.180 --> 00:00:54.780
Well okay, so

18
00:00:54.780 --> 00:00:58.690
here's the end of our IIFE, and
we know the variable is called modules.

19
00:00:58.690 --> 00:00:59.620
So what do we have here?

20
00:00:59.620 --> 00:01:02.440
Inside of it, is passed an array, right?

21
00:01:02.440 --> 00:01:04.629
So we have an array and
here's the end of the array.

22
00:01:05.790 --> 00:01:07.080
And what do we have here?

23
00:01:07.080 --> 00:01:09.515
An array of?
&gt;&gt; Speaker 2: IIFEs.

24
00:01:09.515 --> 00:01:10.952
&gt;&gt; Sean Larkin: [LAUGH] Look at that,

25
00:01:10.952 --> 00:01:12.840
we have an array of IIFEs.

26
00:01:12.840 --> 00:01:13.430
Okay, cool.

27
00:01:15.080 --> 00:01:15.720
What do we have?

28
00:01:15.720 --> 00:01:17.240
It's our actual code, right?

29
00:01:18.290 --> 00:01:21.830
We even use these decorations to try to
make it easier for you to understand.

30
00:01:21.830 --> 00:01:27.520
So if I was to just pop a console really
quick, we have 0, 1, 2, 3 as our IDs.

31
00:01:27.520 --> 00:01:31.580
Well look, 0,

32
00:01:31.580 --> 00:01:35.940
1, 2, and 3.

33
00:01:35.940 --> 00:01:40.430
So we get an array of IIFEs that is
passed into this code right here.

34
00:01:40.430 --> 00:01:44.590
So we call this the web pack bootstrap,
some people call it the runtime.

35
00:01:44.590 --> 00:01:46.190
I've heard people call it the manifest.

36
00:01:46.190 --> 00:01:49.390
I would not recommend thinking of
a manifest like this because it confuses

37
00:01:49.390 --> 00:01:54.350
the whole PWA manifest, and all that kind
of stuff, I don't think that's helpful.

38
00:01:54.350 --> 00:01:59.516
So I usually call it the runtime code,
cuz our internal APIs basically say,

39
00:01:59.516 --> 00:02:04.250
chunk.hasRuntime, and
this is what the runtime is, okay?

40
00:02:04.250 --> 00:02:09.250
So let's just understand
exactly what this code does.

41
00:02:09.250 --> 00:02:10.730
We can just take it step by step.

42
00:02:10.730 --> 00:02:13.270
So if we're starting at the top, so

43
00:02:13.270 --> 00:02:17.560
we have a variable called installedModules
and it's just equal to an object, right?

44
00:02:19.210 --> 00:02:21.250
And so what do we think this does?

45
00:02:21.250 --> 00:02:22.930
And the comment even helps us.

46
00:02:22.930 --> 00:02:25.790
It's a?
&gt;&gt; Speaker 3: Cache.

47
00:02:25.790 --> 00:02:26.660
&gt;&gt; Sean Larkin: It's a cache,

48
00:02:26.660 --> 00:02:28.400
it's a cache, it's a module cache.

49
00:02:28.400 --> 00:02:32.060
We don't really know how it works yet,
but we're gonna find out.

50
00:02:32.060 --> 00:02:36.410
Okay, and now we have, at the top level,
a function called webpack_require.

51
00:02:38.030 --> 00:02:41.250
And so this is the require function.

52
00:02:43.450 --> 00:02:45.116
So let's just look at this.

53
00:02:45.116 --> 00:02:46.470
I'm even gonna zoom in, so

54
00:02:46.470 --> 00:02:50.130
contextually we're only focusing
on just chunks at a time, right?

55
00:02:51.240 --> 00:02:56.140
So it's gonna be hyper large, super large.

56
00:02:56.140 --> 00:02:57.400
There we go.

57
00:02:57.400 --> 00:03:01.000
All right, so

58
00:03:01.000 --> 00:03:04.440
what is this code doing right here?
&gt;&gt; Speaker 4: Checking whether or

59
00:03:04.440 --> 00:03:07.081
not a module exists in the cache.
&gt;&gt; Sean Larkin: That's right,

60
00:03:07.081 --> 00:03:08.420
that's right, exactly.

61
00:03:08.420 --> 00:03:12.910
And you'll see that webpack_require
takes a module ID parameter, right?

62
00:03:12.910 --> 00:03:17.880
So when this function's called it's
gonna have some sort of ID passed to it.

63
00:03:17.880 --> 00:03:18.580
And that's where we get this.

64
00:03:18.580 --> 00:03:21.150
So basically we're checking in the object,

65
00:03:21.150 --> 00:03:22.888
which of course we know
right now has nothing in it.

66
00:03:22.888 --> 00:03:26.839
And then if it already exists, right,

67
00:03:26.839 --> 00:03:31.632
we're gonna return that
existing reference,

68
00:03:31.632 --> 00:03:34.524
right, and its .exports.

69
00:03:34.524 --> 00:03:36.396
It's exports.

70
00:03:36.396 --> 00:03:39.310
Don't confuse this with
the real module semantics.

71
00:03:39.310 --> 00:03:41.540
This is how we're making
it work in the browser.

72
00:03:41.540 --> 00:03:43.870
So we have defined .exports, kind of.

73
00:03:43.870 --> 00:03:46.000
And you'll see this here in a second.

74
00:03:46.000 --> 00:03:50.440
So .exports, so it's gonna return
a property called .exports

75
00:03:50.440 --> 00:03:52.590
from whatever is inside
of this module cache.

76
00:03:53.970 --> 00:03:58.250
So now if we look down below, so
of course that was an if statement,

77
00:03:58.250 --> 00:04:00.820
so if the module if doesn't exist
that doesn't happen, right?

78
00:04:02.010 --> 00:04:05.810
So you can forget,
nothing there's yet technically.

79
00:04:05.810 --> 00:04:10.300
So we see module equals installed modules,
and

80
00:04:10.300 --> 00:04:14.010
then we actually put it in the cache
at the exact same time as we declare,

81
00:04:15.740 --> 00:04:21.794
is equal to the module ID that we passed,
right, from here.

82
00:04:23.690 --> 00:04:29.470
And then, I can't remember what
the false means, I can go find out.

83
00:04:29.470 --> 00:04:33.805
And then there's a property called
exports, which is an object, right?

84
00:04:35.010 --> 00:04:37.860
Okay, so that's a good start.

85
00:04:40.010 --> 00:04:42.150
So, then, I'll zoom out just for

86
00:04:42.150 --> 00:04:45.650
the sake of seeing the entire
context here, just for this line.

87
00:04:47.380 --> 00:04:50.510
So now, we actually need to call
the code that we've required, right,

88
00:04:50.510 --> 00:04:53.040
cuz we're still just inside
this one require function.

89
00:04:54.750 --> 00:04:56.719
So, we go and find that module.

90
00:04:57.930 --> 00:04:59.350
Right, so we'll go pick it out.

91
00:04:59.350 --> 00:05:00.440
We'll do a .call.

92
00:05:01.800 --> 00:05:05.290
We take the exports, and

93
00:05:05.290 --> 00:05:09.450
then we're also gonna pass some other
things inside of this IIFE, cuz right?

94
00:05:09.450 --> 00:05:11.230
Our models are an array of IIFEs.

95
00:05:13.820 --> 00:05:18.130
We'll pass the existing required function
so that in case that module is using other

96
00:05:18.130 --> 00:05:22.740
modules, and then we are also gonna
provide whether default or named exports.

97
00:05:23.970 --> 00:05:26.690
That's right,
L means the module has been loaded, right?

98
00:05:28.400 --> 00:05:30.990
So it's set to false by default but

99
00:05:30.990 --> 00:05:33.340
then once it's actually executed
we're gonna set to true.

100
00:05:34.800 --> 00:05:38.470
And then we return the .exports

101
00:05:38.470 --> 00:05:41.285
property from this synthetic
module that we're creating.

102
00:05:42.810 --> 00:05:44.710
So that's what web pack required us.

103
00:05:44.710 --> 00:05:48.700
So keep that in your mind, it takes an ID,
and it actually calls the module and

104
00:05:48.700 --> 00:05:50.600
then returns any exports
if it's available.

105
00:05:52.820 --> 00:05:54.975
So, and
then we also have some other stuff here.

106
00:05:54.975 --> 00:06:01.097
Now, so
ESM uses what's called live bindings.

107
00:06:01.097 --> 00:06:07.837
And that means that it's basically a
feature supporting cyclical dependencies,

108
00:06:07.837 --> 00:06:13.540
so natively it's gonna be
implemented inside the browser.

109
00:06:13.540 --> 00:06:18.010
This is the code required to be able to
implement it in just JavaScript print.

110
00:06:18.010 --> 00:06:23.840
So basically what we're doing
is we're freezing the object so

111
00:06:23.840 --> 00:06:25.610
that it can't be reassigned or changed.

112
00:06:27.430 --> 00:06:29.740
That's why we wrap it in
an object defining property.

113
00:06:29.740 --> 00:06:35.750
If you need to support IE8, you need to
have the object.define property shim.

114
00:06:35.750 --> 00:06:39.059
You'd find that out pretty quickly.

115
00:06:39.059 --> 00:06:41.760
And then this is for
common JS interop, right?

116
00:06:41.760 --> 00:06:45.120
So, common just technically
doesn't have a default export,

117
00:06:45.120 --> 00:06:46.650
it has modules that export.

118
00:06:46.650 --> 00:06:49.115
So what we do is we aligned
with TypeScript and

119
00:06:49.115 --> 00:06:51.480
Babbel to provide this pattern so
it's consistent.

120
00:06:52.600 --> 00:06:57.530
And then there's some
other getting different,

121
00:06:57.530 --> 00:07:00.910
also compatibility, for
non harmony modules.

122
00:07:00.910 --> 00:07:05.360
But the meat in the potatoes that are
super important is the webpack_require.

123
00:07:05.360 --> 00:07:07.880
So if we go down to the bottom
of the this code now,

124
00:07:07.880 --> 00:07:11.730
the last line that gets executed,
what is happening here technically?

125
00:07:14.800 --> 00:07:18.354
So if we look, now that we know
what webpack_require does,

126
00:07:18.354 --> 00:07:20.590
somebody tell me what that line does?

127
00:07:20.590 --> 00:07:24.516
[COUGH] Ignoring the .s.

128
00:07:24.516 --> 00:07:29.560
The webpack_require .s
is not as important, but

129
00:07:29.560 --> 00:07:34.650
what's the ID getting passed through?
&gt;&gt; Speaker 4: The first module.

130
00:07:34.650 --> 00:07:35.500
&gt;&gt; Sean Larkin: That's right.

131
00:07:35.500 --> 00:07:37.080
That's our entry point, executing.

132
00:07:37.080 --> 00:07:39.340
We're executing our entry point.

133
00:07:39.340 --> 00:07:42.290
The first module in
the bundle itself as well.

134
00:07:42.290 --> 00:07:46.378
So if we look at the IIFE we know now, so

135
00:07:46.378 --> 00:07:52.110
modules is actually
modules that gets called,

136
00:07:52.110 --> 00:07:56.130
we're calling this function
here which isn't IIFE.

137
00:07:56.130 --> 00:08:00.010
We've passed this information in, which is
like scope and state, and then the require

138
00:08:00.010 --> 00:08:06.170
function and now what's happening is that
it's calling it on the other things.

139
00:08:06.170 --> 00:08:10.730
So you can kind of see how your
code resembles the userlang code,

140
00:08:10.730 --> 00:08:15.110
if I compare the index up next to it,
it's not quite the same.

141
00:08:16.170 --> 00:08:17.780
But you can kinda see, right?

142
00:08:17.780 --> 00:08:21.940
Cuz we're pulling out the nerve,
the footer, the button and the styles.

143
00:08:21.940 --> 00:08:25.110
And we try to give it some
sort of understandable name.

144
00:08:26.320 --> 00:08:28.376
And you can see here that's
why we're pulling it.

145
00:08:28.376 --> 00:08:32.150
And since they're different modules in
different locations we actually have

146
00:08:32.150 --> 00:08:33.054
different IDs.

147
00:08:33.054 --> 00:08:38.579
So, webpack_require 1 is just
jumping down here and calling this.

148
00:08:39.690 --> 00:08:42.780
And in the same way,
require 2, webpack_require 4.

149
00:08:42.780 --> 00:08:50.230
So how it works is that webpack_require is
just replacing these import statements,

150
00:08:50.230 --> 00:08:53.400
the require statements, to something
that actually works in the browser.

151
00:08:53.400 --> 00:08:56.320
Execute and
behaves the same in the right order.

152
00:08:57.570 --> 00:08:58.540
Does that make sense so far?

153
00:08:58.540 --> 00:09:00.360
Do you have any questions?

154
00:09:00.360 --> 00:09:04.760
I know this code at first, the generated
code can be a little intimidating, because

155
00:09:04.760 --> 00:09:09.870
it's like how is this only five files and
I have this ginormous, what is this?

156
00:09:09.870 --> 00:09:12.815
And I get some people who just try it for
the first time and

157
00:09:12.815 --> 00:09:16.900
they're scoffing, they're like this
is way bigger than my original code.

158
00:09:16.900 --> 00:09:21.420
But of course you know thousands of
modules, tens of thousands of modules,

159
00:09:21.420 --> 00:09:22.770
much more optimized.

160
00:09:24.880 --> 00:09:29.570
So this is really the minimum overhead
that you incur from using webpack, but

161
00:09:29.570 --> 00:09:32.180
everything is done at build time, right?

162
00:09:32.180 --> 00:09:35.683
So this is is the only runtime
code that exists from webpack,

163
00:09:35.683 --> 00:09:38.439
everything else is just
a product of the build.

164
00:09:39.670 --> 00:09:42.547
But yeah, any other questions or

165
00:09:42.547 --> 00:09:48.766
anything?
&gt;&gt; Sean Larkin: I would always recommend,

166
00:09:48.766 --> 00:09:53.770
this is a great place if you just
wanna learn how things are working.

167
00:09:53.770 --> 00:09:58.060
It's nice even debugging the set mode
none because you can actually see,

168
00:09:58.060 --> 00:10:00.980
we even identify hey,
this is a harmony import.

169
00:10:00.980 --> 00:10:03.300
Hey, this is a default export.

170
00:10:03.300 --> 00:10:09.200
Hey, this is a harmony binding,
because we're binding a function, right?

171
00:10:09.200 --> 00:10:11.140
So it shows.

172
00:10:11.140 --> 00:10:12.980
It shows you all this just in comments.

173
00:10:12.980 --> 00:10:15.039
We can identify that.

174
00:10:15.039 --> 00:10:20.030
And it's kind of using the same heuristics
that we used to do tree shaking.

