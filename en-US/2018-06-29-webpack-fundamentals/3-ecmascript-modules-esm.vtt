WEBVTT

1
00:00:00.220 --> 00:00:03.008
&gt;&gt; Sean Larkin: And so
like what's, was there a solution?

2
00:00:03.008 --> 00:00:10.110
There was, [LAUGH] ESM, so, then came
along, after 10 year of being developed.

3
00:00:11.820 --> 00:00:17.700
I even saw references to this syntax
in a document from like 1998.

4
00:00:17.700 --> 00:00:20.140
When they were originally working on it.

5
00:00:20.140 --> 00:00:23.765
So this was like 10 to 20
years in the making in design.

6
00:00:23.765 --> 00:00:26.650
[COUGH].

7
00:00:26.650 --> 00:00:29.760
And so, this is the equiscript
module format or ESM.

8
00:00:29.760 --> 00:00:32.750
You might even all call it ES modules ESM.

9
00:00:34.290 --> 00:00:38.160
What you shouldn't call it is 2015
modules or anything like that.

10
00:00:38.160 --> 00:00:45.520
It's the, the ES 2015 specification is
completely separate from the module spec.

11
00:00:46.530 --> 00:00:51.740
The original spec was called
the harmony modules specification and

12
00:00:51.740 --> 00:00:57.110
so, I think even that little detail right
there is something that trips people up,

13
00:00:57.110 --> 00:01:00.000
ES modules,
completely separate from ES2015.

14
00:01:00.000 --> 00:01:03.400
You could write ES3 syntax and

15
00:01:03.400 --> 00:01:08.630
still use modules and
there's no problem with that.

16
00:01:08.630 --> 00:01:15.510
It's just specifically ESM defines
the import, the syntax here, the export,

17
00:01:15.510 --> 00:01:19.960
the static behavior, the module loading,
how the browsers are supposed to load it.

18
00:01:19.960 --> 00:01:24.190
And so, there's two ways that
you can load modules for ESM.

19
00:01:24.190 --> 00:01:25.910
You have named it.

20
00:01:25.910 --> 00:01:30.340
So, there were many things that were
taken in inspiration for common JS.

21
00:01:30.340 --> 00:01:35.130
So, for example,
you have the named exports and

22
00:01:35.130 --> 00:01:36.560
then you also have a default export.

23
00:01:38.160 --> 00:01:42.252
Or you can use a namespace specifier,
which is like the import * as,

24
00:01:42.252 --> 00:01:46.040
it takes a collection of named exports and
just groups it into one object.

25
00:01:47.410 --> 00:01:53.230
And then if you wanted to provide
something another file or module,

26
00:01:53.230 --> 00:01:58.380
you'd do so using the export default
syntax or export and then any expression.

27
00:01:58.380 --> 00:02:02.179
Or export conts, whatever and
then whatever the value is.

28
00:02:04.030 --> 00:02:08.940
And there's a lot of like, there's lots
of incredible things now that we have.

29
00:02:08.940 --> 00:02:14.010
We have reusability,
we now have true encapsulation.

30
00:02:14.010 --> 00:02:17.310
And this is for most modules in general.

31
00:02:17.310 --> 00:02:21.490
It's why we started writing this, coming
from the pure loosey goosey spaghetti

32
00:02:21.490 --> 00:02:27.000
JavaScript ecosystem where it started,
what?

33
00:02:27.000 --> 00:02:28.170
There's problems with the ESM.

34
00:02:29.220 --> 00:02:31.540
So there are kinda some issues.

35
00:02:31.540 --> 00:02:33.338
Whats the status for ESM for
Node, do you guys know?

36
00:02:33.338 --> 00:02:34.613
&gt;&gt; Speaker 2: MJS.

37
00:02:34.613 --> 00:02:38.440
&gt;&gt; Sean Larkin: I mean that's
not even fully in stone either.

38
00:02:40.270 --> 00:02:46.120
They had to create an entire task
force of over 20 open source teams.

39
00:02:46.120 --> 00:02:48.340
Just to try to settle on semantics and

40
00:02:48.340 --> 00:02:51.067
it's still in process
as we speak right now.

41
00:02:51.067 --> 00:02:56.009
And so, yes, ESM for
node is kind of up in the air.

42
00:02:56.009 --> 00:02:59.013
How they work in the browser?

43
00:02:59.013 --> 00:03:02.590
Have you guys tried using
modules natively in the browser?

44
00:03:03.880 --> 00:03:05.360
They're incredibly slow.

45
00:03:05.360 --> 00:03:09.920
I would say slow to a point
that they're basically broken.

46
00:03:11.370 --> 00:03:14.770
It's completely unusable past 10 modules.

47
00:03:14.770 --> 00:03:17.740
Or even that takes forever.

48
00:03:17.740 --> 00:03:21.130
When you think about it,

49
00:03:21.130 --> 00:03:25.540
when you're using that syntax, the browser
has to basically read top down.

50
00:03:25.540 --> 00:03:27.800
It needs to start at import statement.

51
00:03:27.800 --> 00:03:30.950
It needs to look at that specifier,
where that package is.

52
00:03:30.950 --> 00:03:32.600
It needs to go resolve it.

53
00:03:32.600 --> 00:03:36.760
It needs to then figure out all those
exports actually there invalid?

54
00:03:36.760 --> 00:03:41.160
Then it needs to read that file and do
the exact same thing until it finds every

55
00:03:41.160 --> 00:03:47.380
other module that it's referencing at
run time, when you load your page.

56
00:03:47.380 --> 00:03:52.530
ESM for the browser is not an option
I would ever recommend to anyone,

57
00:03:52.530 --> 00:03:54.440
under any scenario.

58
00:03:54.440 --> 00:04:00.190
I don't care if it's, you're just using
one module, it's still incredibly slow.

59
00:04:00.190 --> 00:04:01.860
It's a huge bottleneck for performance.

