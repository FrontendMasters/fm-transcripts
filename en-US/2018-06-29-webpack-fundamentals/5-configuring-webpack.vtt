WEBVTT

1
00:00:00.080 --> 00:00:01.910
&gt;&gt; Sean Larkin: There's three
ways that you can use Webpack.

2
00:00:01.910 --> 00:00:06.660
I know you've probably heard
of the config, the config.

3
00:00:07.730 --> 00:00:11.150
What's unique about it is that
like most tools that are,

4
00:00:11.150 --> 00:00:15.000
you use through your JavaScript apps in
your friend and applications, they're all

5
00:00:15.000 --> 00:00:21.450
written in node js, and so Webpack
config is just a common JS module right?

6
00:00:21.450 --> 00:00:23.430
You see the module.exports?

7
00:00:23.430 --> 00:00:26.580
It's just an object that has a bunch
of properties that just describes

8
00:00:26.580 --> 00:00:27.610
the Webpack.

9
00:00:27.610 --> 00:00:31.590
What should I be doing with this code?

10
00:00:31.590 --> 00:00:36.450
And the we have a CLI,
basically you could if you wanted to.

11
00:00:36.450 --> 00:00:40.923
Almost every single property is bound
to CLI arguments and parameters, so

12
00:00:40.923 --> 00:00:44.339
you can use it in this way
without even touching a config.

13
00:00:44.339 --> 00:00:48.455
And especially now with Webpack 4,
the mode property, and

14
00:00:48.455 --> 00:00:53.230
not even needing a config out of the box,
it's considerably easier.

15
00:00:54.840 --> 00:00:56.560
And then we have a Node API.

16
00:00:56.560 --> 00:01:00.360
So have you ever wanted to
make your own Webpack wrapper?

17
00:01:01.750 --> 00:01:05.690
There's lots of things like Neutrino and
joy,

18
00:01:05.690 --> 00:01:08.430
and there's a whole bunch
that are out there, but

19
00:01:08.430 --> 00:01:13.900
they leverage the Webpack node API,
basically doing the exact same thing.

20
00:01:13.900 --> 00:01:17.620
The caveat is that you basically have
to bring your own stats, feedback, and

21
00:01:17.620 --> 00:01:20.470
reporter, and console information.

22
00:01:21.700 --> 00:01:27.023
All of that doesn't happen out of the box.
&gt;&gt; Sean Larkin: So

23
00:01:27.023 --> 00:01:33.220
do you have any questions so far about the
ecosystem, about kind of the evolution?

24
00:01:33.220 --> 00:01:35.240
Does it maybe frame
things a little better?

25
00:01:36.390 --> 00:01:38.690
Why are we using bundlers today?

26
00:01:38.690 --> 00:01:43.060
Why are they still considered
the canonical standard for

27
00:01:43.060 --> 00:01:45.350
building web applications?

28
00:01:45.350 --> 00:01:49.870
And hopefully that kind
of puts more context.

29
00:01:49.870 --> 00:01:53.670
Really when you think about where we came
from to why we're trying to do these

30
00:01:53.670 --> 00:01:55.780
things are all about performance and

31
00:01:55.780 --> 00:01:58.730
being able to scale it, but
also being able to maintain it.

32
00:02:00.110 --> 00:02:03.110
And having this module system,
especially ESM,

33
00:02:03.110 --> 00:02:07.380
has really transformed the opportunities
that are possible with bundlers.

34
00:02:07.380 --> 00:02:14.700
And there is no other syntax that
is as unique as the ES module spec,

35
00:02:14.700 --> 00:02:22.565
so much so that it is now being adopted
by other programming languages.

36
00:02:22.565 --> 00:02:27.159
C++ has RFCs right now to consider
adopting this module syntax,

37
00:02:27.159 --> 00:02:32.090
because it's so profound and so
powerful for stack analysis.

38
00:02:32.090 --> 00:02:36.820
You think back to,
I worked on objective C, so I think of,

39
00:02:36.820 --> 00:02:40.370
you gotta include a bunch of headers and
you just include crap.

40
00:02:40.370 --> 00:02:43.420
And you don't care,
like how much it costs you, but

41
00:02:43.420 --> 00:02:46.670
we don't have that luxury in the web,
right?

42
00:02:46.670 --> 00:02:49.420
We have to care how much code
we're compiling and shipping.

43
00:02:50.750 --> 00:02:56.690
And so even the WebAssembly
specification is now modeled exactly,

44
00:02:56.690 --> 00:03:00.840
almost identically in the same way
from the ES Module specification.

45
00:03:00.840 --> 00:03:04.920
So, I don't know why Rust decided
to do their own thing, but

46
00:03:04.920 --> 00:03:08.050
I love Rust and
they have a weird extern thing.

47
00:03:08.050 --> 00:03:11.060
I'm hoping that they
change that in the future.

48
00:03:11.060 --> 00:03:11.620
Let's hope so.

