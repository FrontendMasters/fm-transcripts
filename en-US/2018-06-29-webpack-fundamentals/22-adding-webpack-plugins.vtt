WEBVTT

1
00:00:00.000 --> 00:00:04.500
&gt;&gt; Sean Larkin: The first thing that I
love to do is take and add, so I would say

2
00:00:04.500 --> 00:00:10.934
the first essential plugin that I would
add is called the html-webpack-plugin.

3
00:00:10.934 --> 00:00:14.210
And so just in case if you don't
already have it installed,

4
00:00:14.210 --> 00:00:17.700
you should already in your cache, and
so it should be a pretty fast install.

5
00:00:17.700 --> 00:00:21.733
So you can run npm install
html-webpack-plugin

6
00:00:21.733 --> 00:00:26.120
--dev.
&gt;&gt; Sean Larkin: And I'm just gonna do it

7
00:00:26.120 --> 00:00:32.215
myself here in yarn.
&gt;&gt; Sean Larkin: Or

8
00:00:32.215 --> 00:00:38.621
--save -dev, I'm sorry.
&gt;&gt; Sean Larkin: Okay,

9
00:00:38.621 --> 00:00:45.210
but we want that to kind of exist across
all of our configurations, right?

10
00:00:45.210 --> 00:00:52.000
So there's gonna be things that we
can add locally in this object.

11
00:00:52.000 --> 00:00:56.244
But we may wanna separate out other
things into separate config files.

12
00:00:56.244 --> 00:01:01.430
So kinda the way that I like to approach
this is actually by creating a new folder,

13
00:01:01.430 --> 00:01:05.600
and I like to call it build-utils.

14
00:01:05.600 --> 00:01:09.222
I mean, you could call it
whatever you want, but for me,

15
00:01:09.222 --> 00:01:11.559
this is a really nice indicator.

16
00:01:11.559 --> 00:01:14.550
This is kind of where the build happens,
right?

17
00:01:14.550 --> 00:01:16.880
And this is gonna where
all of our supplemental,

18
00:01:18.040 --> 00:01:22.600
let's say partial configurations,
or other utilities might end up.

19
00:01:22.600 --> 00:01:26.060
You're gonna have some utils or scripts or
other things that you wanna apply, and

20
00:01:26.060 --> 00:01:28.910
usually ends up that's a great place for
you to add them.

21
00:01:30.010 --> 00:01:34.540
Now what's super nice is that since we're
just in, this is our config right here,

22
00:01:34.540 --> 00:01:37.970
right, it's just a function
that's returning it.

23
00:01:37.970 --> 00:01:43.264
And we wanna actually use
this html-webpack-plugin,

24
00:01:43.264 --> 00:01:48.787
we can do so just by adding or
requiring it into this module.

25
00:01:48.787 --> 00:01:52.350
So HtmlWebpackPlugin =

26
00:01:52.350 --> 00:02:02.161
require("html-webpack-plugin").
&gt;&gt; Sean Larkin: And

27
00:02:02.161 --> 00:02:08.550
then to add a plugin into your webpack
configuration, we just have an array.

28
00:02:08.550 --> 00:02:13.740
And you can pass a new instance,
so new HtmlWebpackPlugin,

29
00:02:13.740 --> 00:02:17.357
and that's it.
&gt;&gt; Sean Larkin: And

30
00:02:17.357 --> 00:02:22.381
I guess while we're at it, since we're
adding some plugins, I kinda wanna provide

31
00:02:22.381 --> 00:02:27.280
one more that's gonna give you a little
bit more interactive terminal progress.

32
00:02:27.280 --> 00:02:29.430
And this is one that comes
out of the box from webpack.

33
00:02:29.430 --> 00:02:32.654
So we can just say,
const webpack = require("webpack").

34
00:02:37.498 --> 00:02:38.969
&gt;&gt; Sean Larkin: And then we can add, so

35
00:02:38.969 --> 00:02:42.456
any of the plugins that
are on the webpack namespace,

36
00:02:42.456 --> 00:02:45.120
you can access with like the dot syntax.

37
00:02:45.120 --> 00:02:50.511
So I believe it is webpack.ProgressPlugin,

38
00:02:50.511 --> 00:02:55.218
yeah.
&gt;&gt; Sean Larkin: Then prettier is a making

39
00:02:55.218 --> 00:03:02.541
easier to read I suppose.
&gt;&gt; Sean Larkin: So

40
00:03:02.541 --> 00:03:05.760
why don't we go ahead and
just build and see what happens, right?

41
00:03:06.770 --> 00:03:09.350
We should still be able to run npm run

42
00:03:09.350 --> 00:03:14.087
prod.
&gt;&gt; Sean Larkin: Let's see,

43
00:03:14.087 --> 00:03:16.800
we get an error?
&gt;&gt; Speaker 2: Do you need a new instance

44
00:03:16.800 --> 00:03:18.500
on that?
&gt;&gt; Sean Larkin: Did I forget the new?

45
00:03:18.500 --> 00:03:19.690
&gt;&gt; Speaker 2: On the webpack.

46
00:03:19.690 --> 00:03:20.750
&gt;&gt; Sean Larkin: Look, nice job, yes,

47
00:03:20.750 --> 00:03:21.971
you definitely need a new,

48
00:03:21.971 --> 00:03:26.832
anytime you pass a plugin.
&gt;&gt; Sean Larkin: So

49
00:03:26.832 --> 00:03:29.187
you get a little terminal
feedback which is kinda nice.

50
00:03:29.187 --> 00:03:33.820
I like it, cuz then I can see
what's taking the longest.

51
00:03:33.820 --> 00:03:36.180
It's better than just kinda waiting
there for something to happen.

52
00:03:37.370 --> 00:03:42.000
But you'll notice now,
two assets have been emitted.

53
00:03:43.200 --> 00:03:46.160
This is new for us, what's going on?

54
00:03:46.160 --> 00:03:49.890
So why don't we take a look inside
our dist folder and see what we have?

55
00:03:51.190 --> 00:03:55.412
So of course, there's our old main.js,
we can just remove that,

56
00:03:55.412 --> 00:03:57.571
since we've got bundle.js now.

57
00:03:57.571 --> 00:04:01.240
But let's look at the contents
of the index.html file.

58
00:04:01.240 --> 00:04:06.151
So I consider html-webpack-plugin
an essential, specifically for

59
00:04:06.151 --> 00:04:08.124
single page applications.

60
00:04:08.124 --> 00:04:12.370
Even multi-page applications,
you can adapt this plugin to work.

61
00:04:12.370 --> 00:04:17.650
But why is it so valuable is
because it injects whatever output

62
00:04:17.650 --> 00:04:22.624
assets are there into this file for you.

63
00:04:22.624 --> 00:04:27.668
Even let's say if you add some caching
feature, or if you change the name,

64
00:04:27.668 --> 00:04:31.269
it reads that data as part of
the webpack life cycle and

65
00:04:31.269 --> 00:04:35.540
then creates an index.html file and
injects into the output.

66
00:04:35.540 --> 00:04:39.268
Now what's super nice is
now if I really wanted to,

67
00:04:39.268 --> 00:04:43.790
I could load an HTTP server and
I could check this out locally.

68
00:04:43.790 --> 00:04:46.960
But I think we can take it a step further,
right?

