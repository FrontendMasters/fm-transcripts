WEBVTT

1
00:00:01.215 --> 00:00:05.894
&gt;&gt; Sean: So, let's jump on our
dove server, local host 8080,

2
00:00:05.894 --> 00:00:10.610
great.
&gt;&gt; Sean: So, if we were going to

3
00:00:10.610 --> 00:00:15.520
load this image and we wanna use it,
we can now technically import it, right?

4
00:00:15.520 --> 00:00:19.620
Because that's what the loaders really
enable Webpack treats everything like

5
00:00:19.620 --> 00:00:24.360
JavaScript when it comes to loaders so
now you can use it like it's JavaScript.

6
00:00:24.360 --> 00:00:30.140
So if we start in our entry point here,
Index.js.

7
00:00:30.140 --> 00:00:35.500
We could technically now
say like import image from,

8
00:00:36.900 --> 00:00:44.100
I think I call that Webpack logo,
yep, .Jpg.

9
00:00:44.100 --> 00:00:49.390
Now, if I was to console log this,
what we should inspect what it looks like.

10
00:00:49.390 --> 00:00:51.550
I think this is really
what the most valuable is,

11
00:00:51.550 --> 00:00:53.570
cuz you actually get to see
what it converts it to, right?

12
00:00:54.580 --> 00:00:59.719
So if we look at our console,
&gt;&gt; Sean: Whoa, what is this?

13
00:01:00.760 --> 00:01:07.612
It is a base 64 data URI of the image.
&gt;&gt; Sean: So

14
00:01:07.612 --> 00:01:11.580
technically, we've created this image and
stored it in the JavaScript itself.

15
00:01:13.580 --> 00:01:17.890
And like if we wanted to actually apply
this now, I think what's really cool that

16
00:01:17.890 --> 00:01:23.250
we should do is we could take and
let's write another module that takes

17
00:01:23.250 --> 00:01:29.040
a image URL and then adds it to and
returns like an element, right?

18
00:01:29.040 --> 00:01:29.750
So that's kind of cool.

19
00:01:31.290 --> 00:01:35.384
This is what's beautiful about modules so

20
00:01:35.384 --> 00:01:42.093
I could make a make image function or
we could just call it image.js and

21
00:01:42.093 --> 00:01:48.504
we could say const makeImage = (url),
&gt;&gt; Sean: Or

22
00:01:48.504 --> 00:01:53.155
a function that takes a URL and
does document.

23
00:01:53.155 --> 00:02:00.914
Then we can take image =
document.createElement("img").

24
00:02:02.030 --> 00:02:06.900
Let's do this, there you go, okay?

25
00:02:08.080 --> 00:02:14.956
And then we'll say, image.src = url and

26
00:02:14.956 --> 00:02:19.162
then we return the image.

27
00:02:24.481 --> 00:02:25.620
&gt;&gt; Sean: Make sense so far?

28
00:02:25.620 --> 00:02:27.560
Now of course we need to export this.

29
00:02:27.560 --> 00:02:33.417
So export default makeImage.
&gt;&gt; Sean: And

30
00:02:33.417 --> 00:02:36.504
let's jump back into our entry point and
we'll leverage it.

31
00:02:36.504 --> 00:02:40.086
So import,

32
00:02:43.701 --> 00:02:48.484
&gt;&gt; Sean: MakeImage from image.js cool,

33
00:02:48.484 --> 00:02:53.000
so now it did a reload for us.

34
00:02:53.000 --> 00:02:55.200
Haven't used it yet so

35
00:02:55.200 --> 00:03:00.995
let's actually declare this element or
actually append it now.

36
00:03:00.995 --> 00:03:05.586
So we could say,
&gt;&gt; Sean: Const

37
00:03:05.586 --> 00:03:10.342
image = makeImage and then maybe instead,

38
00:03:10.342 --> 00:03:15.180
we'll rename this to imageUrl, right?

39
00:03:15.180 --> 00:03:17.143
Cuz that's really what
we're getting out of it.

40
00:03:23.074 --> 00:03:24.470
&gt;&gt; Sean: And let's append it.

41
00:03:24.470 --> 00:03:26.441
Maybe I'll do it between, I'm just gonna.

42
00:03:36.021 --> 00:03:38.282
&gt;&gt; Sean: [LAUGH] Whoa that's huge.

43
00:03:38.282 --> 00:03:44.190
[LAUGH] Let's see.
&gt;&gt; Sean: I

44
00:03:44.190 --> 00:03:46.406
kind of expected it to
be a little bit large.

45
00:03:46.406 --> 00:03:54.960
I mean, not that large.
&gt;&gt; Sean: See,

46
00:03:54.960 --> 00:03:58.010
I think you can set height and width
directly on the image property, right?

47
00:03:58.010 --> 00:04:04.362
So we could say like, image.height,

48
00:04:04.362 --> 00:04:09.780
100 pixels, image.width.

49
00:04:09.780 --> 00:04:13.010
Now of course, this isn't very reusable
code if you wanted to created images of

50
00:04:13.010 --> 00:04:13.600
many sizes.

51
00:04:15.702 --> 00:04:23.297
What, is it just 100?
&gt;&gt; Sean: There we go,

52
00:04:23.297 --> 00:04:28.648
cool, I like it.
&gt;&gt; Male: Can

53
00:04:28.648 --> 00:04:31.280
you go back to image.js for a second?

54
00:04:31.280 --> 00:04:33.006
I didn't get a chance to-
&gt;&gt; Sean: Yeah, so

55
00:04:33.006 --> 00:04:38.005
that's where I'm at right now.
&gt;&gt; Sean: So

56
00:04:38.005 --> 00:04:43.752
if we wanted to, let's say,
we could get creative,

57
00:04:43.752 --> 00:04:48.095
we could do something like this and say,

58
00:04:48.095 --> 00:04:52.077
height = 100, width = 100.

59
00:04:52.077 --> 00:04:59.590
There we go and then that way we
can just take height and width.

60
00:05:01.680 --> 00:05:05.190
Cool, now we're like,
now we have some reusable.

61
00:05:05.190 --> 00:05:10.736
I love this about modules because it's
like we can instantly make things really

62
00:05:10.736 --> 00:05:16.120
compostable and powerful.
&gt;&gt; Sean: Awesome.

63
00:05:17.220 --> 00:05:18.559
&gt;&gt; Male 2: Quick question about the hot

64
00:05:18.559 --> 00:05:20.652
module reloading?
&gt;&gt; Sean: Yes.

65
00:05:20.652 --> 00:05:22.166
&gt;&gt; Male 2: I was noticing when I was

66
00:05:22.166 --> 00:05:25.347
changing things like I
changed the text in a file,

67
00:05:25.347 --> 00:05:26.279
in a JS file-
&gt;&gt; Sean: Yep.

68
00:05:26.279 --> 00:05:27.637
&gt;&gt; Male 2: It was refreshing the page

69
00:05:27.637 --> 00:05:29.630
rather and then just [INAUDIBLE]
&gt;&gt; Sean: Correct.

70
00:05:29.630 --> 00:05:30.880
&gt;&gt; Male 2: That's suppose to happen.

71
00:05:30.880 --> 00:05:32.470
&gt;&gt; Sean: Yeah, absolutely, so

72
00:05:32.470 --> 00:05:36.570
essentially to use Hub, and I don't dive
into it too deep because it's kind of,

73
00:05:37.750 --> 00:05:42.110
it's more of something like if you
really wanna use it standalone,

74
00:05:42.110 --> 00:05:45.450
you come at a little cost
of some overhead API's.

75
00:05:45.450 --> 00:05:49.310
It's usually applied through a loader,
like react-hot-loader or

76
00:05:49.310 --> 00:05:50.200
view loader does it.

77
00:05:51.480 --> 00:05:56.498
But essentially to do so
you'd have to have something

78
00:05:56.498 --> 00:06:00.633
like if hot.module.expects or accepts.

79
00:06:00.633 --> 00:06:05.748
And then the path of the module that
is in relation and then what happens

80
00:06:05.748 --> 00:06:11.300
is that the surface API just basically
says you reimport that file.

81
00:06:11.300 --> 00:06:13.855
And so, that's how you're
patching in the new change.

82
00:06:13.855 --> 00:06:17.490
But you have to do it at a per module
level when it comes to your JavaScript.

83
00:06:17.490 --> 00:06:20.490
So, this is something that's
usually abstracted with a loader.

84
00:06:22.880 --> 00:06:24.945
But, yes, that behavior is expected.

