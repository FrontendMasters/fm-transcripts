WEBVTT

1
00:00:00.100 --> 00:00:04.110
&gt;&gt; Sean Larkin: And so you know the birth
of JavaScript modules happened kind of

2
00:00:04.110 --> 00:00:07.170
around this early period
thanks to Node.js.

3
00:00:07.170 --> 00:00:12.130
Who uses Node.js as like I mean,
we all use it everyday.

4
00:00:12.130 --> 00:00:15.600
If you're using webpack,
you're using node, you rely on node.

5
00:00:15.600 --> 00:00:20.400
Node is the canonical
like you will find and

6
00:00:20.400 --> 00:00:23.380
maybe some, I know some .NET
people don't like hearing this but

7
00:00:23.380 --> 00:00:29.500
if you want to build a canonical web
application, be prepared to install node.

8
00:00:29.500 --> 00:00:33.114
It is foundational for
not only how we get packages,

9
00:00:33.114 --> 00:00:38.306
how we share packages, how we run our
tools, our linters, our commands.

10
00:00:38.306 --> 00:00:39.675
And so Node.js,

11
00:00:39.675 --> 00:00:45.799
you have a problem here like node is
JavaScript that runs on the server, right?

12
00:00:45.799 --> 00:00:51.577
They took theV8 engine and shove it in
a like a binary and give it a runtime for

13
00:00:51.577 --> 00:00:58.340
the server side, but how do you load
JavaScript if there's no DOM, right?

14
00:00:58.340 --> 00:01:02.990
How do you add a script tag
if there is no HTML in node,

15
00:01:02.990 --> 00:01:05.570
right, so that was the issue.

16
00:01:05.570 --> 00:01:08.318
And that is when the birth
of CommonJS came

17
00:01:08.318 --> 00:01:12.566
about.
&gt;&gt; Sean Larkin: And so, what you'll see

18
00:01:12.566 --> 00:01:17.950
here is just a little example where
you have three separate files.

19
00:01:17.950 --> 00:01:21.420
And to be able to actually
include other files,

20
00:01:21.420 --> 00:01:24.060
they created the CommonJS module format.

21
00:01:24.060 --> 00:01:28.990
The use a syntax called require,
which allows you to

22
00:01:28.990 --> 00:01:33.880
inject other pieces of a module
into the current module.

23
00:01:33.880 --> 00:01:38.102
So in here, we just we see I just broken
it up into three separate files, but

24
00:01:38.102 --> 00:01:39.386
we had division.js.

25
00:01:39.386 --> 00:01:44.283
And so the syntax is used for CommonJS,
you can have a default export or

26
00:01:44.283 --> 00:01:46.730
you can have named exports.

27
00:01:46.730 --> 00:01:50.742
And so we're looking at a default
export here which allows you to,

28
00:01:50.742 --> 00:01:52.975
and the syntax is module.exports.

29
00:01:52.975 --> 00:01:57.670
And it's just a function that takes two
arguments, and returns the division for

30
00:01:57.670 --> 00:02:01.064
it, or the modulus,
I can't remember which one that is.

31
00:02:01.064 --> 00:02:05.465
And then, we have another file that's
pulling in the division, and you can see

32
00:02:05.465 --> 00:02:09.688
since it's just a default export,
we can name it whatever the heck we want.

33
00:02:09.688 --> 00:02:13.590
And, this module is defining
some named exports.

34
00:02:13.590 --> 00:02:20.754
So this is saying exports.add,
exports.subtract, exports.divide.

35
00:02:20.754 --> 00:02:25.150
And so that is this module's
way of providing that scope or

36
00:02:25.150 --> 00:02:30.110
those values to another file
if it wants to request it.

37
00:02:30.110 --> 00:02:32.980
So if we go up to our index.js here,

38
00:02:32.980 --> 00:02:38.153
we're actually pulling in these
named exports, which all just

39
00:02:38.153 --> 00:02:43.826
get put under an object called
the default export, and get required.

40
00:02:43.826 --> 00:02:47.710
And then this way, so
now we've just solved some scope.

41
00:02:47.710 --> 00:02:51.290
We just solved scope here
without iffies or anything.

42
00:02:51.290 --> 00:02:56.708
We now can pull in pieces of values,
assign them to variables in a different

43
00:02:56.708 --> 00:03:01.525
module without having problems
with scope or anything like that.

44
00:03:01.525 --> 00:03:04.773
And actually kinda gave us
a little static analysis, right,

45
00:03:04.773 --> 00:03:08.390
we can tell right here exactly
what is used for the most part.

46
00:03:08.390 --> 00:03:11.855
This is when the explosion
of JavaScript starts.

47
00:03:11.855 --> 00:03:16.789
Like you may hear people,
you may hear me say like JavaScript

48
00:03:16.789 --> 00:03:21.046
is taking over the world
as a programming language,

49
00:03:21.046 --> 00:03:26.367
as a platform, as a way to rapidly
develop and create fast running

50
00:03:26.367 --> 00:03:31.302
applications.
&gt;&gt; Sean Larkin: And it still boggles me

51
00:03:31.302 --> 00:03:36.390
today, like how new programming languages
that get created don't adapt these models.

52
00:03:36.390 --> 00:03:40.497
But like you think about it there is NPM,
it is so

53
00:03:40.497 --> 00:03:43.898
easy to ship whatever module you want.

54
00:03:43.898 --> 00:03:49.355
And so NPM was created as a package
registry to be able to share

55
00:03:49.355 --> 00:03:56.080
CommonJS node modules across
an entire ecosystem and registry.

56
00:03:56.080 --> 00:03:57.869
And it's super easy to get started,

57
00:03:57.869 --> 00:04:02.824
NPM install whatever the heck I want.
&gt;&gt; Sean Larkin: And so, like the hyper

58
00:04:02.824 --> 00:04:08.012
mass distribution, everybody's
starting to write all of their tools,

59
00:04:08.012 --> 00:04:12.883
all of their scripts, all of their
utilities in JavaScript on node.

60
00:04:12.883 --> 00:04:17.684
And the module system really
cause this pre-Cambrian just

61
00:04:17.684 --> 00:04:21.480
explosion of the evolving ecosystem.

62
00:04:21.480 --> 00:04:24.691
And even today it's even faster.

63
00:04:24.691 --> 00:04:26.530
But what are these problems?

64
00:04:26.530 --> 00:04:27.570
There's still problems here.

65
00:04:28.630 --> 00:04:31.300
There is no browser support for CommonJS.

66
00:04:31.300 --> 00:04:34.320
You can't just go write a CommonJS
module and load it in the browser.

67
00:04:37.770 --> 00:04:42.750
There's no live bindings, and this is
specifically with circular references.

68
00:04:42.750 --> 00:04:46.750
So, as more modules
started to be created and

69
00:04:46.750 --> 00:04:49.150
the ecosystem keeps rapidly developing,

70
00:04:49.150 --> 00:04:53.540
we started finding out like people are
using modules in very interesting ways.

71
00:04:53.540 --> 00:04:56.276
Trying to self-referral and
having circular dependencies and

72
00:04:56.276 --> 00:04:57.800
things like that.

73
00:04:57.800 --> 00:05:00.219
And this really starts to
show itself through CommonJS.

74
00:05:02.291 --> 00:05:03.945
&gt;&gt; Sean Larkin: And the resolution

75
00:05:03.945 --> 00:05:09.121
algorithm for CommonJS is kinda slow,
it's really slow.

76
00:05:09.121 --> 00:05:13.970
And it's built in to know, but it's still
really, really slow cuz it's synchronous.

77
00:05:15.036 --> 00:05:17.380
By the way,
did I say there's no browser support for

78
00:05:17.380 --> 00:05:20.950
CommonJS.
&gt;&gt; Sean Larkin: But

79
00:05:20.950 --> 00:05:25.297
is there a solution?
&gt;&gt; Sean Larkin: So, you'll start noticing

80
00:05:25.297 --> 00:05:30.576
that also people started wanting to
ship their web modules through NPM.

81
00:05:30.576 --> 00:05:33.180
Like NPM was this huge instant.

82
00:05:33.180 --> 00:05:35.978
Like think of the time when you're
writing web development three years ago.

83
00:05:35.978 --> 00:05:39.781
It was like, you had to go to a CDM or
a GitHub distro,

84
00:05:39.781 --> 00:05:43.427
pull something down,
concatenate it together.

85
00:05:43.427 --> 00:05:45.656
And to a lot of people,
that was unacceptable,

86
00:05:45.656 --> 00:05:47.510
especially those who were using Node.

87
00:05:47.510 --> 00:05:51.360
They were like, why don't we just ship
these libraries out of Node.js, right,

88
00:05:51.360 --> 00:05:52.800
or NPM?

89
00:05:52.800 --> 00:05:56.704
And so people started doing that,
but they would find out, crap,

90
00:05:56.704 --> 00:05:58.411
this CommonJS doesn't work.

91
00:05:58.411 --> 00:06:03.049
And so this is when bundlers and
linkers we're really starting to take

92
00:06:03.049 --> 00:06:07.905
a popularity.
&gt;&gt; Sean Larkin: Who's heard of Browserify?

93
00:06:07.905 --> 00:06:11.146
Yep, who's heard of modules WebMake?

94
00:06:11.146 --> 00:06:15.700
[LAUGH] No, it's not very popular, but
you'll find out why it's super important.

95
00:06:15.700 --> 00:06:18.300
But these bundlers started to be created,
what they do,

96
00:06:18.300 --> 00:06:22.570
their main premise is to allow
you to write CommonJS modules.

97
00:06:22.570 --> 00:06:26.990
But then it get bundled, and
stripping those statements, and

98
00:06:26.990 --> 00:06:30.050
then executed in the same orders so
that it works in the web

99
00:06:30.050 --> 00:06:34.560
exactly as it might work or
you would expected to work in your code.

100
00:06:34.560 --> 00:06:38.316
We all started to see different
approaches like loaders, or

101
00:06:38.316 --> 00:06:43.472
things that like JavaScripts that executes
in the browser that's responsible for

102
00:06:43.472 --> 00:06:46.123
going in dynamically realtime fetching,

103
00:06:46.123 --> 00:06:49.789
different module formats.
&gt;&gt; Sean Larkin: But

104
00:06:49.789 --> 00:06:55.005
there's also problems with this.
&gt;&gt; Sean Larkin: CommonJS is,

105
00:06:55.005 --> 00:07:00.906
when you look at it here,
it doesn't look too harmful.

106
00:07:00.906 --> 00:07:03.248
But the problem is that require is
actually a function that you can

107
00:07:03.248 --> 00:07:04.520
pass anywhere.

108
00:07:04.520 --> 00:07:09.084
And so, we started seeing
people abuse the crap out of

109
00:07:09.084 --> 00:07:13.510
CommonJS syntax, like I love Sindre Sorhus.

110
00:07:13.510 --> 00:07:15.610
Does anybody know who Sindre Sorhus is?

111
00:07:15.610 --> 00:07:22.660
He's probably the author of every,
you use a package that he wrote for sure.

112
00:07:22.660 --> 00:07:26.960
He's responsible for
300 billion downloads a year on NPM,

113
00:07:26.960 --> 00:07:31.758
or a month, I can't remember what it is,
it's a staggering amount.

114
00:07:31.758 --> 00:07:33.725
But he writes these tiny packages.

115
00:07:33.725 --> 00:07:36.717
Like he'll write ones though
that take require and

116
00:07:36.717 --> 00:07:41.040
you pass a require function in, and
then you call it a different require.

117
00:07:41.040 --> 00:07:45.758
And there's no way for bundlers to be
able to statically analyze this stuff.

118
00:07:45.758 --> 00:07:49.784
We can't know without evaluating the code
what's happening with this function.

119
00:07:49.784 --> 00:07:53.620
And so,
&gt;&gt; Sean Larkin: You end up with a lot of

120
00:07:53.620 --> 00:07:56.822
problems with getting
really bloated bundles.

121
00:07:56.822 --> 00:08:01.660
And then there's no support for lazy
loading in a way that we would expect.

122
00:08:01.660 --> 00:08:06.974
Require sure it is kind of dynamic, but
there's no way to asynchronously load

123
00:08:06.974 --> 00:08:12.704
something, especially for the web.
&gt;&gt; Sean Larkin: And like i said,

124
00:08:12.704 --> 00:08:18.041
CommonJS is just too dynamic of
a module format to be able to have

125
00:08:18.041 --> 00:08:23.200
really optimized code.
&gt;&gt; Sean Larkin: And

126
00:08:23.200 --> 00:08:25.948
then the scary thing was not
everybody was shipping CommonJS.

127
00:08:25.948 --> 00:08:29.800
Like we had AMD which cropped up.

128
00:08:29.800 --> 00:08:32.010
So who's seen the AMD module pattern?

129
00:08:32.010 --> 00:08:33.979
You can thank Dojo for that I think or

130
00:08:33.979 --> 00:08:38.520
I think it came out of Dojo.
&gt;&gt; Sean Larkin: Even we had some libraries

131
00:08:38.520 --> 00:08:42.280
at Microsoft who use AMD today and
it just kills me.

132
00:08:42.280 --> 00:08:45.210
Who has tried to bundle
Moment.js with webpack and

133
00:08:45.210 --> 00:08:48.720
notice they end up with like
3 billion megabytes of code?

134
00:08:48.720 --> 00:08:52.120
That's because they're using AMD and
they're doing it too dynamic.

135
00:08:52.120 --> 00:08:55.850
They're using some dynamic
capabilities of AMD that

136
00:08:55.850 --> 00:08:57.660
cause you to pull in every locale.

137
00:08:58.920 --> 00:09:04.370
If moment was just shipped in ESM,
you wouldn't have any issues,

138
00:09:04.370 --> 00:09:07.730
but with legacy code,
we all struggle with legacy things.

139
00:09:07.730 --> 00:09:10.970
Even Monaco in VS Code
is written entirely AMD.

140
00:09:10.970 --> 00:09:14.496
And one of the things I'm working
right now with them is trying to

141
00:09:14.496 --> 00:09:17.042
push them as far away as
possible from using AMD

142
00:09:17.042 --> 00:09:19.753
anymore.
&gt;&gt; Sean Larkin: And so,

143
00:09:19.753 --> 00:09:21.499
this is also like a design pattern,

144
00:09:21.499 --> 00:09:25.660
the angular kind of tough day like
we want dependency injections.

145
00:09:25.660 --> 00:09:29.064
And this was before modules were a thing,
right, and so

146
00:09:29.064 --> 00:09:30.953
it's seemed like a good idea.

147
00:09:30.953 --> 00:09:36.957
And then there's also AMD + CommonJS, this
is a thing, I would never write this but

148
00:09:36.957 --> 00:09:41.473
I've seen it done before.
&gt;&gt; Sean Larkin: But

149
00:09:41.473 --> 00:09:46.851
there's problems, like it's too dynamic,
the MomentJS scenario.

150
00:09:46.851 --> 00:09:51.490
And it's more than just that, if you try
to run the Monaco Editor, which is like so

151
00:09:51.490 --> 00:09:54.599
it's what gives you the VS Code
like IEEE experience.

152
00:09:54.599 --> 00:09:58.933
Basically, code Sandbox in stacklets
basically just took Monaco Editor and

153
00:09:58.933 --> 00:10:02.331
threw it up in a browser where
it originally started to like,

154
00:10:02.331 --> 00:10:03.613
it's the same thing.

155
00:10:03.613 --> 00:10:07.392
But you'll find out very quickly
that that's five megs of code,

156
00:10:07.392 --> 00:10:10.489
if you tried to bundle it.
&gt;&gt; Sean Larkin: And,

157
00:10:10.489 --> 00:10:12.470
the syntax is really awkward.

158
00:10:12.470 --> 00:10:17.960
It's non-standard, not even node,
nor the browser supports it.

159
00:10:17.960 --> 00:10:19.320
So it's not even a real module system.
