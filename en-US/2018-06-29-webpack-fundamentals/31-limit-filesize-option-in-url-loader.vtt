WEBVTT

1
00:00:00.740 --> 00:00:02.700
&gt;&gt; Sean Larkin: So now, you might say,

2
00:00:02.700 --> 00:00:05.848
Shawn.
&gt;&gt; Sean Larkin: I don't want

3
00:00:05.848 --> 00:00:09.350
to load literally,
like this probably just bloated our Java.

4
00:00:09.350 --> 00:00:11.380
Let's see what the size
of our JavaScript is.

5
00:00:12.430 --> 00:00:14.250
It bloated the bundle by like 500K,

6
00:00:14.250 --> 00:00:19.650
because you added a ginormous data URI,
and that's not good for performance.

7
00:00:19.650 --> 00:00:21.430
And you're absolutely right.

8
00:00:21.430 --> 00:00:22.445
I completely agree.

9
00:00:22.445 --> 00:00:24.410
Here I'm like trying to fidget with this.

10
00:00:24.410 --> 00:00:29.930
Okay so what's really awesome
is that the file loader or

11
00:00:29.930 --> 00:00:34.440
I'm sorry, the URL loader actually
has an option that's called limit.

12
00:00:34.440 --> 00:00:36.790
And so we can jump to our config.

13
00:00:38.730 --> 00:00:44.250
And we'll modify this slightly so
that we can pass options into it.

14
00:00:44.250 --> 00:00:48.180
This is kind of a shorthand for
this right here.

15
00:00:49.480 --> 00:00:52.980
It's the same thing but some people
just like having the shorthand and

16
00:00:52.980 --> 00:00:57.670
it's kind of a legacy syntax as well so
we keep it backwards compatible.

17
00:00:57.670 --> 00:01:02.800
But, If you change this to
actually be an array of objects

18
00:01:02.800 --> 00:01:07.920
we call these loader objects or
use objects.

19
00:01:07.920 --> 00:01:12.780
You can now pass options to it.

20
00:01:12.780 --> 00:01:17.980
And so the option in this case is
called limit and we can say only if

21
00:01:17.980 --> 00:01:26.020
the image is 5,000 bytes will we be okay
with inlining it as a base, a base 64 URL.

22
00:01:26.020 --> 00:01:26.940
All right?

23
00:01:28.510 --> 00:01:32.857
Otherwise, take that file and
admit it to our disk directory and

24
00:01:32.857 --> 00:01:37.790
instead just return the hashed
URL of where that file will be.

25
00:01:37.790 --> 00:01:42.087
So if we quit out of this build and
we do our production build,

26
00:01:42.087 --> 00:01:46.133
actually no I'm sorry,
we could even do our dev build and

27
00:01:46.133 --> 00:01:53.560
we'll see this.
&gt;&gt; Sean Larkin: So if

28
00:01:53.560 --> 00:01:59.720
we look at the assets that are output, you
actually see a hashed image now, right.

29
00:02:01.710 --> 00:02:04.350
Now we don't see it in our disk
folder because we're in depth server.

30
00:02:04.350 --> 00:02:04.950
It's in memory.

31
00:02:06.050 --> 00:02:11.430
But what's awesome is that this is
now actually being passed into,

32
00:02:12.570 --> 00:02:15.370
that's why I call it image URL,
because you get both essentially.

33
00:02:16.640 --> 00:02:20.940
And so when you see here, it gives you
exactly where that file's gonna be placed.

34
00:02:20.940 --> 00:02:22.190
Super convenient.

35
00:02:22.190 --> 00:02:29.290
I would say even if you don't even care
about inlining, I love this capability

36
00:02:29.290 --> 00:02:34.720
because it's like I never have to manage
injecting how that URL is gonna be placed.

37
00:02:36.690 --> 00:02:39.880
There is still, so there is always
gonna be trade-offs to think about.

38
00:02:39.880 --> 00:02:44.620
So things are, If you don't use
just an image tag in the HTML,

39
00:02:44.620 --> 00:02:48.490
then you're kind of waiting on
JavaScript to get your images.

40
00:02:48.490 --> 00:02:50.850
So it's important to profile for
performance and

41
00:02:50.850 --> 00:02:55.160
make sure it's worth
this kind of technique.

42
00:02:55.160 --> 00:02:59.670
But in a lot of ways people are usually
cramming like 40 image tags

43
00:02:59.670 --> 00:03:04.070
down the browser and
this ends up being a lot more optimized.

44
00:03:04.070 --> 00:03:09.160
And you can also use things
like link URL preload and

45
00:03:09.160 --> 00:03:12.810
for even having a service worker
cache this information ahead of time

46
00:03:12.810 --> 00:03:16.080
which is really valuable for performance.

47
00:03:16.080 --> 00:03:21.160
So yeah, this is really and
behind the scenes

48
00:03:21.160 --> 00:03:27.200
what URL loader is actually
calling to do the take this image,

49
00:03:27.200 --> 00:03:31.030
put it in the disk directory,
return it to disk URL.

50
00:03:31.030 --> 00:03:35.090
That's what file loader
does out of the box.

51
00:03:35.090 --> 00:03:38.590
And so all it's doing is it's calling
another loader behind the scenes.

52
00:03:38.590 --> 00:03:40.330
That's why we installed both of them.

53
00:03:42.760 --> 00:03:46.690
And so this is great, and its options
really handle your production case and

54
00:03:46.690 --> 00:03:48.260
your development case.

55
00:03:48.260 --> 00:03:51.600
If you found other reasons,
like you wanted to have,

56
00:03:51.600 --> 00:03:54.310
maybe you could set the limit super-high,
and you're like I don't care.

57
00:03:54.310 --> 00:03:56.090
Just put it all on memory.

58
00:03:56.090 --> 00:03:59.780
Maybe then you could move
this to your dev config and

59
00:03:59.780 --> 00:04:02.960
then set the limit way
lower in your prod config.

60
00:04:02.960 --> 00:04:07.485
That's also an option.
&gt;&gt; Sean Larkin: Does anybody

61
00:04:07.485 --> 00:04:09.970
have questions so
far about URL loader or file loader?

62
00:04:11.150 --> 00:04:19.940
Anybody in chat as well?
&gt;&gt; Sean Larkin: If not,

63
00:04:19.940 --> 00:04:24.240
so, I think, like this is exciting
cuz we're getting to the time.

64
00:04:24.240 --> 00:04:26.070
Yeah, go ahead.
&gt;&gt; Speaker 2: Does that work with SVG

65
00:04:26.070 --> 00:04:26.960
as well?
&gt;&gt; Sean Larkin: It does!

66
00:04:26.960 --> 00:04:29.280
It works.
So, like what's cool is that it's agnostic

67
00:04:29.280 --> 00:04:31.310
to anything.

68
00:04:31.310 --> 00:04:37.240
So, like, if it can be, So, so
I don't know if can an SVG a URL?

69
00:04:38.280 --> 00:04:38.960
It can.

70
00:04:38.960 --> 00:04:41.440
So yes, absolutely it can.

71
00:04:41.440 --> 00:04:43.820
So it can do that.

72
00:04:43.820 --> 00:04:47.170
There's also special SVG loaders too.

73
00:04:47.170 --> 00:04:51.380
Some people are like I want an SVG
to write it in the normal type.

74
00:04:51.380 --> 00:04:55.028
But then I want it in a react component,
or I want to go the other way,

75
00:04:55.028 --> 00:04:58.990
take a react component and
then compile it to an SVG statically.

76
00:04:58.990 --> 00:05:02.390
Like there is some really interesting
stuff that you can do because you're doing

77
00:05:02.390 --> 00:05:06.490
it ahead of time and
you have access to all of your assets and

78
00:05:06.490 --> 00:05:08.120
they are all tied together
in the same graph.

