WEBVTT

1
00:00:00.070 --> 00:00:03.990
&gt;&gt; Sean: And then finally,
the last core concept is plugins.

2
00:00:03.990 --> 00:00:05.330
This is my favorite.

3
00:00:05.330 --> 00:00:10.020
When I found out about this,
I think I truly my love deepened for

4
00:00:10.020 --> 00:00:13.050
Webpack at a much more foundational level.

5
00:00:14.600 --> 00:00:19.050
But first, I like talking
about it just as it's anatomy.

6
00:00:19.050 --> 00:00:22.020
So what is a plugin for Webpack?

7
00:00:22.020 --> 00:00:24.370
All it is is an instance.

8
00:00:24.370 --> 00:00:29.530
I usually say class but
to be specific, it's just an instance.

9
00:00:29.530 --> 00:00:34.890
It's a JavaScript object that has
an apply property in the prototype chain.

10
00:00:34.890 --> 00:00:40.950
And it allows you to hook into
the entire Webpack life cycle of events.

11
00:00:42.300 --> 00:00:45.910
And we have a bunch that are built out of
the box that are meant to be able to make

12
00:00:45.910 --> 00:00:46.980
things way easier for you.

13
00:00:48.220 --> 00:00:54.100
So for example, here's a plugin
here just like the source of it and

14
00:00:54.100 --> 00:00:56.410
I'll kinda talk about how
what's happening here.

15
00:00:56.410 --> 00:01:01.610
So just like I said, there's a object
where it's gonna create an instance

16
00:01:01.610 --> 00:01:07.550
of an object that has an apply method on
the prototype chain and that apply method.

17
00:01:07.550 --> 00:01:12.230
When you pass this plugin to Webpack,
and I'll show you next how to add one.

18
00:01:12.230 --> 00:01:15.030
It's gonna pass itself as an instance so

19
00:01:15.030 --> 00:01:18.120
that this plugin can hook
into different events.

20
00:01:18.120 --> 00:01:24.470
Now, this is using the Webpack 3 API for
the plugin system, but tomorrow we'll

21
00:01:24.470 --> 00:01:29.000
probably about how we can either upgrade
or how to write plugins for Webpack 4.

22
00:01:29.000 --> 00:01:31.300
But the concepts are the same.

23
00:01:31.300 --> 00:01:34.980
So we're plugging in to the compiler and
listening to a done event.

24
00:01:34.980 --> 00:01:38.820
And that event is gonna pass us some data.

25
00:01:38.820 --> 00:01:43.000
And then we're just going to have
behavior based on what that data is.

26
00:01:43.000 --> 00:01:45.640
So, in this case, it looks like we're
plugging into both the done and

27
00:01:45.640 --> 00:01:46.960
the failed event.

28
00:01:46.960 --> 00:01:52.600
And we're writing to the stderr,

29
00:01:52.600 --> 00:01:57.010
like a specific character, which is
actually a dinging noise in terminal.

30
00:01:57.010 --> 00:02:01.540
So, of course, that's why this is
called BellOnBundlerErrorPlugin.

31
00:02:01.540 --> 00:02:03.629
We try to be pretty verbose
about what it does.

32
00:02:04.670 --> 00:02:10.700
But yeah, this is a pretty simple plugin,
from the highest level.

33
00:02:12.540 --> 00:02:15.470
And so of course since it is
something that's instantiable, right?

34
00:02:17.340 --> 00:02:20.430
We're gonna pass a new instance
of it into our configuration.

35
00:02:21.510 --> 00:02:26.130
And so to do that we just have to require
that plugin for wherever we installed it

36
00:02:26.130 --> 00:02:30.195
or maybe it's a custom plug in relative
to where it is in your source.

37
00:02:30.195 --> 00:02:35.756
And just provide new and we wanted to make
it instantiable one because you should

38
00:02:35.756 --> 00:02:41.245
be able to apply the same plugin multiple
times if you want to or if it's valid.

39
00:02:41.245 --> 00:02:45.385
And also be able to pass
different types of arguments,

40
00:02:45.385 --> 00:02:48.360
options into the plugins themselves.

41
00:02:50.670 --> 00:02:53.340
So let's see here.

42
00:02:53.340 --> 00:02:54.710
And then my favorite part.

43
00:02:54.710 --> 00:03:01.520
Did you know 80% of the Webpack source
code is made up of these plugins.

44
00:03:01.520 --> 00:03:07.510
Webpack itself is a completely
event driven architecture.

45
00:03:07.510 --> 00:03:12.160
And so all of our source code is
literally all of these plugins,

46
00:03:14.070 --> 00:03:18.660
and we love the architecture
cuz it let's us dog food,

47
00:03:18.660 --> 00:03:23.560
not only this experience for you all, but
it allows us to pivot really quickly.

48
00:03:23.560 --> 00:03:27.920
We could instantly adopt a new
feature without breaking anything.

49
00:03:27.920 --> 00:03:32.090
Or we could drop a feature really easily,
and we could slowly deal with just

50
00:03:32.090 --> 00:03:36.420
a deprecation and barely have to
manage it without breaking changes.

51
00:03:36.420 --> 00:03:40.870
And so yeah, that was my favorite part.

52
00:03:40.870 --> 00:03:45.560
I love the fact that it is built of that
exact same plugin system that you use.

53
00:03:48.110 --> 00:03:51.700
And so plugins really adds
additional functionality.

54
00:03:51.700 --> 00:03:56.950
You could even say plugins let you do
anything you can't do with a loader.

55
00:03:56.950 --> 00:04:02.200
Loaders are only applied on
a profile basis, but with plugins,

56
00:04:02.200 --> 00:04:04.075
you can access a whole bundle, right?

57
00:04:04.075 --> 00:04:08.161
And so, things like UglifyJS.

58
00:04:08.161 --> 00:04:12.083
You wouldn't wanna run that through a
loader because then you get less optimized

59
00:04:12.083 --> 00:04:13.301
minification, right.

60
00:04:13.301 --> 00:04:17.359
Because the minifier doesn't know what
other things are in the scope and

61
00:04:17.359 --> 00:04:20.633
whether it's used,
it's only knowing about that file.

62
00:04:20.633 --> 00:04:25.619
And so therefore plugins are great,
that's why we have UglifyJS plugin, or

63
00:04:25.619 --> 00:04:27.703
even compression or whatever.

64
00:04:27.703 --> 00:04:29.480
And so, you can think about it.

65
00:04:29.480 --> 00:04:34.290
When you wanna interact more
with the compiler runtime,

66
00:04:34.290 --> 00:04:37.960
or the event lifecycle, or

67
00:04:37.960 --> 00:04:42.380
even just apply functionality at the
bundle level, plugins are the way to go.

68
00:04:43.840 --> 00:04:45.310
And I was, what?

