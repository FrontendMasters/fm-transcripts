WEBVTT

1
00:00:00.040 --> 00:00:03.350
&gt;&gt; Steve Kinney: Getting this
done is effectively the same,

2
00:00:03.350 --> 00:00:04.240
as what we did last time.

3
00:00:04.240 --> 00:00:07.780
We'll make a loadable note view component.

4
00:00:18.067 --> 00:00:19.840
&gt;&gt; Steve Kinney: At JS.

5
00:00:19.840 --> 00:00:23.370
I'm actually gonna do a little cut and
paste action from the previous one.

6
00:00:25.620 --> 00:00:27.390
And so, import react and loadable.

7
00:00:27.390 --> 00:00:28.860
We're gonna use the same
loading component.

8
00:00:28.860 --> 00:00:32.800
Like I said before, you're not
limited to one loading component.

9
00:00:32.800 --> 00:00:34.820
Different pieces of UI
have different shape.

10
00:00:34.820 --> 00:00:37.490
Maybe it's a spinner,
maybe it's a skeleton of a thing.

11
00:00:37.490 --> 00:00:41.740
I would be a little bit more
customized with my loading ones.

12
00:00:41.740 --> 00:00:44.480
But for this, I think it'll work.

13
00:00:44.480 --> 00:00:49.585
In this case, we're actually gonna

14
00:00:49.585 --> 00:00:53.873
bring in the NoteView, cool.

15
00:00:53.873 --> 00:00:56.983
And then, in the NoteView container,
I'm just gonna swap this out for the,

16
00:01:00.831 --> 00:01:05.730
&gt;&gt; Steve Kinney: LoadableNoteView, cool.

17
00:01:05.730 --> 00:01:08.670
Let's take a look at
that in action over here.

18
00:01:09.770 --> 00:01:13.120
I'm actually gonna go
back to the initial page.

19
00:01:15.540 --> 00:01:17.190
And, we can go ahead.

20
00:01:18.400 --> 00:01:19.670
I briefly see loading.

21
00:01:19.670 --> 00:01:21.500
I get the next component.

22
00:01:21.500 --> 00:01:25.920
And then, I hit Edit, I load each
component progressively, as I need it.

23
00:01:25.920 --> 00:01:32.320
Kinda thing I mentioned earlier, but
I wanna highlight a little bit, is that

24
00:01:32.320 --> 00:01:36.430
the import syntax is not react-specific,
it's not anything-specific.

25
00:01:36.430 --> 00:01:39.980
I could have used the import for
loading, just load-dash, or

26
00:01:39.980 --> 00:01:41.250
anything along those lines.

27
00:01:41.250 --> 00:01:43.120
You say what file you want to import.

28
00:01:43.120 --> 00:01:46.750
You get back a promise that resolves
with whatever the default is, or

29
00:01:46.750 --> 00:01:48.220
the entire package is there.

30
00:01:48.220 --> 00:01:50.370
So this could be,
these are reaction components.

31
00:01:50.370 --> 00:01:52.140
This could be anything.

32
00:01:52.140 --> 00:01:54.630
And you don't have to use react-loadable.

33
00:01:54.630 --> 00:01:57.120
You can use this code wherever you want.

34
00:01:57.120 --> 00:02:00.530
So I could, for instance,
implement a feature which is like,

35
00:02:00.530 --> 00:02:05.110
hey, listen,
I know that if they went to the note view,

36
00:02:05.110 --> 00:02:07.790
that they're probably gonna
wanna go to the editor next.

37
00:02:07.790 --> 00:02:12.170
So when that component does mount,
I can say component did mount,

38
00:02:12.170 --> 00:02:14.810
import the next file,
kick that off beforehand.

39
00:02:14.810 --> 00:02:17.567
Effectively prefetching
any of those assets.

40
00:02:17.567 --> 00:02:19.619
Let's actually take that for
a spin real quick.

41
00:02:21.490 --> 00:02:23.270
So we'll go to the note view.

42
00:02:23.270 --> 00:02:27.170
I'm going to just slight a refactoring,

43
00:02:27.170 --> 00:02:29.270
cuz this is one of those
stateless functional components.

44
00:02:31.670 --> 00:02:35.270
We'll grab all of this right here.

45
00:02:36.820 --> 00:02:39.940
And we'll say, actually hold on.

46
00:02:39.940 --> 00:02:43.089
Give me one second, Class NoteView.

47
00:02:46.030 --> 00:02:49.937
&gt;&gt; Steve Kinney: Extends React.Component.

48
00:02:52.800 --> 00:02:54.983
&gt;&gt; Steve Kinney: Put back
in the render method.

49
00:03:03.129 --> 00:03:05.253
&gt;&gt; Steve Kinney: Yeah, this is why
I turned into a stateless function,

50
00:03:05.253 --> 00:03:08.360
cuz every [INAUDIBLE], you should make
that a stateless functional component.

51
00:03:08.360 --> 00:03:10.896
I'm like, you leave me alone.

52
00:03:10.896 --> 00:03:15.750
We'll say, component DidMount.

53
00:03:15.750 --> 00:03:20.190
And in here, this is where we can actually
begin to load the editor, in this case.

54
00:03:20.190 --> 00:03:27.589
So we'll say,
&gt;&gt; Steve Kinney: Now,

55
00:03:27.589 --> 00:03:32.496
if I needed the editor code immediately,
I could say then, and I could have,

56
00:03:32.496 --> 00:03:37.350
if is a regular file, begin to use it,
and here, I can even use async await.

57
00:03:37.350 --> 00:03:40.600
So I can say async load whatever,
and begin to use it.

58
00:03:40.600 --> 00:03:41.990
In this case, I really don't.

59
00:03:41.990 --> 00:03:46.130
This is basically just a prefetch queue,
which is, I'm saying, hey,

60
00:03:46.130 --> 00:03:49.140
if they loaded this note view, they're
probably gonna wanna load the editor next.

61
00:03:49.140 --> 00:03:50.980
So why don't you kick off that load?

62
00:03:50.980 --> 00:03:54.750
So now, hopefully, they won't see
any load times, what so ever,

63
00:03:54.750 --> 00:03:57.793
when it comes from going from
the no view to the editor,

64
00:03:57.793 --> 00:04:00.860
cuz we will in fact have kicked that off,
beforehand.

65
00:04:00.860 --> 00:04:03.048
So let's go ahead, and try that out.

66
00:04:09.528 --> 00:04:11.254
&gt;&gt; Steve Kinney: We'll
actually go back one.

67
00:04:11.254 --> 00:04:12.855
Cool.

68
00:04:18.203 --> 00:04:21.280
&gt;&gt; Steve Kinney: Oops,
something is angry with me.

69
00:04:23.680 --> 00:04:26.810
If you don't export stuff every file,
you'll get in trouble.

70
00:04:29.099 --> 00:04:32.668
&gt;&gt; Steve Kinney: Support
default Note view.

71
00:04:35.857 --> 00:04:36.750
&gt;&gt; Steve Kinney: Cool.

72
00:04:36.750 --> 00:04:39.150
So I'm actually go back to the beginning,

73
00:04:39.150 --> 00:04:42.830
and will highlight some extra
tools while we're doing this.

74
00:04:42.830 --> 00:04:45.640
I mentioned in the beginning that,
yeah cool,

75
00:04:45.640 --> 00:04:49.365
you're on an expensive computer with a
fast Internet connection, and you're like,

76
00:04:49.365 --> 00:04:53.210
it'd be great to be heavy in 150 for
my users, and see what any of that's like.

77
00:04:53.210 --> 00:04:57.330
So what you can do in the network pane,

78
00:04:57.330 --> 00:05:01.430
is you can actually simulate
different network connections.

79
00:05:01.430 --> 00:05:06.092
Like fast 3G, slow 3G, and offline, and
add a bunch of stuff along those lines.

80
00:05:06.092 --> 00:05:08.549
And there's actually another
one in the performance section,

81
00:05:08.549 --> 00:05:09.876
which I think is really powerful.

82
00:05:09.876 --> 00:05:12.750
You can also throttle the CPU.

83
00:05:12.750 --> 00:05:15.574
So you wanna imagine what it's
like on a slower mobile device,

84
00:05:15.574 --> 00:05:19.130
you can go to 4x slower or
6x slower, which is incredibly cool.

85
00:05:19.130 --> 00:05:21.810
And those will only be true
when the dev tools are open, so

86
00:05:21.810 --> 00:05:24.080
if you forget to turn it off,
it's gonna be okay.

87
00:05:24.080 --> 00:05:29.105
But just to make a point, what I
wanna do here, is I wanna change this

88
00:05:29.105 --> 00:05:34.234
to maybe just a little bit more,
slow the Internet down a little bit.

89
00:05:36.078 --> 00:05:37.391
&gt;&gt; Steve Kinney: Cool, so we're loading.

90
00:05:37.391 --> 00:05:40.380
You can see when I click on this,
it's a little bit slower.

91
00:05:40.380 --> 00:05:41.240
We loaded it.

92
00:05:41.240 --> 00:05:43.180
We can see,
I've also loaded some additional bundles.

93
00:05:43.180 --> 00:05:45.367
When I hit Edit, it's instantly there.

94
00:05:45.367 --> 00:05:47.620
I prefetched the editor.

95
00:05:47.620 --> 00:05:50.710
Now, is that the right thing to do and
should you do it, in every component?

96
00:05:50.710 --> 00:05:53.622
Well, if you do it in every single
component while [INAUDIBLE] amounts,

97
00:05:53.622 --> 00:05:57.250
you will effective loaded the entire
Africa [INAUDIBLE] where they're going.

98
00:05:57.250 --> 00:05:59.600
So you have to be a little
[INAUDIBLE] about it, but

99
00:05:59.600 --> 00:06:05.050
you can theoretically reduce some of that
loading time, by prefetching those assets.

100
00:06:05.050 --> 00:06:06.590
This is not a react specific thing.

101
00:06:06.590 --> 00:06:10.620
This is a JavaScript thing that you can do
with Webpack, and a lot of other loaders.

102
00:06:10.620 --> 00:06:13.840
But yeah, you can get stuff as you need
it, which is not in the initial bundle.

103
00:06:13.840 --> 00:06:18.060
But you can then kick off, prefetching, so
that it seems like you're not doing that.

104
00:06:18.060 --> 00:06:21.440
So effectively, you get to have your cake,
and eat it too.

105
00:06:21.440 --> 00:06:24.400
Because I do it, it's the same thing
as world change did for us, right.

106
00:06:24.400 --> 00:06:27.569
Going and getting the thing, and
getting ready for it, before we need it,

107
00:06:27.569 --> 00:06:29.850
gives that kind of
an instantaneous feel to the user.

108
00:06:29.850 --> 00:06:33.277
Where they don't have to, we cut down
on the low time, by getting the initial

109
00:06:33.277 --> 00:06:37.540
bundle smaller, but we originally pay the
price, which is response time to an app.

110
00:06:37.540 --> 00:06:40.570
Cuz now I have to go get it,
especially on a slower connection.

111
00:06:40.570 --> 00:06:45.260
But in this case, with prefetching,
we can both shrink our load times and

112
00:06:45.260 --> 00:06:48.600
shrink our response times,
which is really, really cool.

113
00:06:48.600 --> 00:06:50.696
Let's go take a look at the bundle
that we ended up producing.

114
00:07:00.348 --> 00:07:03.801
&gt;&gt; Steve Kinney: And what we hope to see,
is yet another bundle created, and

115
00:07:03.801 --> 00:07:07.340
we'll kind of get some statistics
on what we ended up doing.

116
00:07:07.340 --> 00:07:12.390
But simply, we actually didn't,
if you also include me saying words,

117
00:07:12.390 --> 00:07:14.660
we didn't spend a lot of
time implementing this.

118
00:07:14.660 --> 00:07:18.260
Yet, we initially cut down a third of
our bundle after cutting down a tenth of

119
00:07:18.260 --> 00:07:19.164
our bundle.

120
00:07:19.164 --> 00:07:24.720
Using a codemirror, and the components
that use it, become their own bundle.

121
00:07:24.720 --> 00:07:30.430
My actual main bundle that I'm sending
over the wire now, is 187 kilobytes.

122
00:07:30.430 --> 00:07:34.420
Right, that is a fraction
of the initial amount.

123
00:07:34.420 --> 00:07:39.410
Somebody that tried to ask me for like,
what is the purpose of that 300 kilobytes,

124
00:07:39.410 --> 00:07:41.230
it's just a line in the sand.

125
00:07:41.230 --> 00:07:44.350
It's just a goal to get each
chunk under 300 kilobytes.

126
00:07:44.350 --> 00:07:48.850
Aria Osmani, actually has his
goal set at 100 kilobytes.

127
00:07:48.850 --> 00:07:52.930
Right, which seems undoable,
but we've got pretty close.

128
00:07:52.930 --> 00:07:56.186
Now granted, there's not like
a lot left to cut out here.

129
00:07:56.186 --> 00:07:59.610
I could do it,
I could do something like trigger it.

130
00:07:59.610 --> 00:08:03.960
I probably get reaction about our
lazy load, but we're trying now.

131
00:08:03.960 --> 00:08:06.650
But it is kind of really cool.

132
00:08:06.650 --> 00:08:12.940
We're able to see significant gains
relatively quickly, and fairly easily.

133
00:08:12.940 --> 00:08:16.218
And then, see how we could preload and
prefresh assets,

134
00:08:16.218 --> 00:08:19.098
to make this effectively
invisible to our users.

135
00:08:29.123 --> 00:08:30.470
&gt;&gt; Steve Kinney: One moment.
Got a little ahead of myself in

136
00:08:30.470 --> 00:08:31.120
the slides there.

137
00:08:32.790 --> 00:08:34.120
All right, we're back.

138
00:08:34.120 --> 00:08:37.970
So I do wanna drive this point home,
a little bit more.

139
00:08:37.970 --> 00:08:39.410
Which is okay, cool.

140
00:08:39.410 --> 00:08:40.580
It's a react app.

141
00:08:40.580 --> 00:08:45.020
But I have a big angular app,
or anything along those lines.

142
00:08:45.020 --> 00:08:48.492
Or an amber app or a backbone app.

143
00:08:48.492 --> 00:08:53.085
And so, I feel like the first few times
I heard about all this lazy load and

144
00:08:53.085 --> 00:08:58.068
code splitting, I was like, I'm
overwhelmed, this is never gonna happen.

145
00:08:58.068 --> 00:09:01.210
We do a rewrite,
I'll totally implement all of this.

146
00:09:01.210 --> 00:09:04.670
But, we can see that all we need
to do is take a given component,

147
00:09:04.670 --> 00:09:07.130
use something like react loadable,
and swap it out, right?

148
00:09:07.130 --> 00:09:10.320
This is something you can go, and
you can do tomorrow in your application.

149
00:09:10.320 --> 00:09:12.690
And start figuring out,
do the bundle, visualize it.

150
00:09:12.690 --> 00:09:16.530
What are the biggest pieces of pain,
where's the most agony, right?

151
00:09:16.530 --> 00:09:19.540
It may not be the biggest one in there,
but if you know that that is a frequently

152
00:09:19.540 --> 00:09:22.390
loaded one or low hanging fruit,
you could implement this tomorrow.

153
00:09:22.390 --> 00:09:24.840
And it's not just react specific.

154
00:09:24.840 --> 00:09:27.350
This is another [INAUDIBLE] grid.

155
00:09:27.350 --> 00:09:32.110
This is their split out code base,
after they've implemented this.

156
00:09:32.110 --> 00:09:33.990
And there are a backbone app.

157
00:09:33.990 --> 00:09:37.165
Right, it's back on a marionette mostly.

158
00:09:37.165 --> 00:09:41.450
Backbone comes from a time before
any of these fancy tools existed.

159
00:09:41.450 --> 00:09:43.650
So if they can do this with
their application, and

160
00:09:43.650 --> 00:09:45.780
it did not take them very long.

161
00:09:45.780 --> 00:09:49.270
So you can see that they
still have an initial bundle.

162
00:09:49.270 --> 00:09:54.390
The main bundle is, actually that
second from the left at along the top.

163
00:09:54.390 --> 00:09:56.200
And so they're now loading D3,
immediately.

164
00:09:56.200 --> 00:09:59.130
They're now loading jQuery immediately,
right.

165
00:09:59.130 --> 00:10:02.340
They're just loading the pieces they need
to get the initial page up, and then as

166
00:10:02.340 --> 00:10:05.580
you navigate around, they can get you all
the different things that they might need,

167
00:10:05.580 --> 00:10:08.620
all the different, like SCSS files.

168
00:10:08.620 --> 00:10:12.190
If they do need jQuery or
D3 that can get those.

169
00:10:12.190 --> 00:10:15.450
And if another bundle requires the same
one, you've already loaded it.

170
00:10:15.450 --> 00:10:18.120
So it's not like you pay this
tax of getting it every time,

171
00:10:18.120 --> 00:10:19.780
it's just progressively loading the app.

172
00:10:19.780 --> 00:10:22.660
Everything you have in memory, stays, so

173
00:10:22.660 --> 00:10:25.010
you don't have to pay
that network load cost.

174
00:10:25.010 --> 00:10:27.280
You get to cut down on
your initial load cost,

175
00:10:27.280 --> 00:10:29.980
and you get to cut down on
your initial parsing cost.

176
00:10:29.980 --> 00:10:33.521
So all of the kinda things we were trying
to solve for, over the course today.

177
00:10:33.521 --> 00:10:35.773
Like rendering, can still be
a thing that you need to deal with,

178
00:10:35.773 --> 00:10:37.520
cuz that's you changing the world.

179
00:10:37.520 --> 00:10:42.730
But, by shifting less code,
our code is faster, right,

180
00:10:42.730 --> 00:10:45.100
cuz we're doing less of something.

181
00:10:45.100 --> 00:10:48.150
So this is the kind of the visualization.

182
00:10:48.150 --> 00:10:52.589
You can see that their main
bundle is 39 kilobytes.

183
00:10:53.870 --> 00:10:57.600
Right, that's it for the initial bit
of code that they ship over the wire.

184
00:10:57.600 --> 00:11:02.090
And then they get pieces as they
need them, slowly but surely.

