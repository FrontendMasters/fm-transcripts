WEBVTT

1
00:00:00.360 --> 00:00:03.470
&gt;&gt; Steve Kinney: All right, cool, so
let's take a look, what do we find?

2
00:00:03.470 --> 00:00:06.720
Do we have any first noticings
from running some of the tests?

3
00:00:08.400 --> 00:00:14.030
&gt;&gt; Steve Kinney: Anything we noticed,
we can do some of it together.

4
00:00:14.030 --> 00:00:20.988
We saw that when we deleted point x,
it was way slower than deleting point y.

5
00:00:20.988 --> 00:00:23.512
It was kinda hard to triangulate whyy,

6
00:00:23.512 --> 00:00:26.960
cuz why is one of these
slower than the other, right?

7
00:00:26.960 --> 00:00:31.811
But when we do it with three,
we can kinda like figure out,

8
00:00:31.811 --> 00:00:34.880
one of this is not like the other, and

9
00:00:34.880 --> 00:00:38.681
figure out which of
the three is the oddball.

10
00:00:38.681 --> 00:00:41.600
Is deleting x, the first one,

11
00:00:41.600 --> 00:00:44.136
the oddball, or is deleting y,
the second one, the oddball?

12
00:00:44.136 --> 00:00:48.170
But we don't know, but when we have three,
you can figure out who's wrong.

13
00:00:48.170 --> 00:00:51.860
So let's go ahead,
let's try it out, let me go ahead.

14
00:00:51.860 --> 00:00:55.720
I have Point (2, 4, 6),
I've got my constructor.

15
00:00:55.720 --> 00:00:58.600
Let me go ahead and save it and run it.

16
00:01:00.910 --> 00:01:06.884
&gt;&gt; Steve Kinney: All right, so
deleting x was definitely still slow,

17
00:01:06.884 --> 00:01:09.550
that hasn't changed.

18
00:01:14.178 --> 00:01:21.090
&gt;&gt; Steve Kinney: Deleting y was
fast before, it's now slow.

19
00:01:23.468 --> 00:01:28.523
&gt;&gt; Steve Kinney: Deleting z,
&gt;&gt; Steve Kinney: Is,

20
00:01:28.523 --> 00:01:31.660
again, fast again,right?

21
00:01:31.660 --> 00:01:38.841
So before, when we only had x and y,
&gt;&gt; Steve Kinney: x was slow,

22
00:01:38.841 --> 00:01:42.280
y was about the same as everything else.

23
00:01:42.280 --> 00:01:45.100
When we added z, z was fast and
the other two were slow.

24
00:01:45.100 --> 00:01:48.980
Are we ready to make a hypothesis yet?

25
00:01:48.980 --> 00:01:51.478
Which is it, that x was slow, or

26
00:01:51.478 --> 00:01:56.860
that y was suspiciously fast when we
first looked at it, and now z is?

27
00:01:56.860 --> 00:02:02.180
Right, seems to me that if we
delete the last one, we're okay.

28
00:02:02.180 --> 00:02:05.037
If we delete any of the first or
second ones,

29
00:02:05.037 --> 00:02:08.680
we all of sudden have gotten a lot slower,
is that fair?

30
00:02:08.680 --> 00:02:12.400
Right, interesting, right,
it shouldn't really matter.

31
00:02:12.400 --> 00:02:17.092
It actually, just fun historical fact, it
used to be, never delete anything because

32
00:02:17.092 --> 00:02:20.710
deleting any of the properties
would have slowed the object down.

33
00:02:20.710 --> 00:02:24.688
Right, and that was true, before Turbofan,
there was Crankshaft, and

34
00:02:24.688 --> 00:02:28.300
Crankshaft would get slower if you
deleted any of the properties.

35
00:02:28.300 --> 00:02:31.830
Turbofan is slightly smart enough
to know if you delete the last one,

36
00:02:31.830 --> 00:02:35.380
which a lot of times is the one you're
deleting, it's optimized for that case.

37
00:02:35.380 --> 00:02:39.075
But deleting properties is slow,
which is like, who cares?

38
00:02:39.075 --> 00:02:42.110
JavaScript's a dynamic language,
right, it shouldn't really matter.

39
00:02:42.110 --> 00:02:45.609
We have some amount of insight
to know that strings and

40
00:02:45.609 --> 00:02:48.270
numbers definitely made a difference.

41
00:02:48.270 --> 00:02:51.496
We saw Turbofan be able to mark
something for optimization, and

42
00:02:51.496 --> 00:02:53.360
then have to deoptimize it, right?

43
00:02:53.360 --> 00:02:57.200
So it's almost like there's
a type system in place.

44
00:02:57.200 --> 00:03:02.620
I don't see a type system, right, I'm not
writing flow or reason ML or typescript.

45
00:03:02.620 --> 00:03:06.010
But I'm definitely feeling
some of the effects of this.

46
00:03:06.010 --> 00:03:10.040
But an object that could have all
these different properties on

47
00:03:10.040 --> 00:03:13.928
it is different than something
that's a string or a number.

48
00:03:13.928 --> 00:03:17.266
Right, so I'm sensing this from
doing some of the science,

49
00:03:17.266 --> 00:03:20.020
but I don't totally know
what's happening yet.

50
00:03:20.020 --> 00:03:26.840
Let me do another little experiment, and
we're gonna take a bunch of objects.

51
00:03:28.010 --> 00:03:31.100
We're gonna go back to
addition a little bit,

52
00:03:31.100 --> 00:03:34.410
cuz who doesn't like some
good old fashioned addition?

53
00:03:34.410 --> 00:03:36.050
We'll go ahead,
we'll take a bunch of objects.

54
00:03:36.050 --> 00:03:40.780
We'll say const objects, and I'm just
gonna make a bunch of the same objects.

55
00:03:40.780 --> 00:03:45.189
I'll say a is 1, a is 2,

56
00:03:45.189 --> 00:03:50.801
a is 3, a is 4, so these are very

57
00:03:50.801 --> 00:03:55.420
similar looking objects.

58
00:03:55.420 --> 00:03:59.990
Right, they all have an a property,
that a property is always a number.

59
00:03:59.990 --> 00:04:02.968
Right, hopefully you're making some
assumptions about what's gonna

60
00:04:02.968 --> 00:04:03.560
happen here.

61
00:04:03.560 --> 00:04:08.910
Right, it's like, similar things good,
different things bad.

62
00:04:08.910 --> 00:04:12.994
Right, so take that and

63
00:04:12.994 --> 00:04:19.740
we'll go ahead and say, let sum = 0.

64
00:04:19.740 --> 00:04:21.550
We'll get one of the objects.

65
00:04:31.740 --> 00:04:35.630
&gt;&gt; Steve Kinney: This will effectively
just, iterations move through it.

66
00:04:35.630 --> 00:04:38.500
It'll effectively end up being 0,
1, 2, 3, which'll be the indices.

67
00:04:38.500 --> 00:04:41.340
So we're just gonna rotate
through the objects with this.

68
00:04:41.340 --> 00:04:46.292
&gt;&gt; Steve Kinney: And
we'll say sum equals sum

69
00:04:46.292 --> 00:04:51.952
plus,
&gt;&gt; Steve Kinney: The a property

70
00:04:51.952 --> 00:04:53.760
of that object.

71
00:04:53.760 --> 00:04:56.238
Right, so go through, for
however many times, right,

72
00:04:56.238 --> 00:04:57.900
we're gonna go through the objects.

73
00:04:57.900 --> 00:05:00.556
We're gonna add the a property,
we're gonna add the a property,

74
00:05:00.556 --> 00:05:03.085
we're gonna add the a property,
over and over and over again.

75
00:05:03.085 --> 00:05:04.626
Let's see what we get.

76
00:05:06.371 --> 00:05:08.877
&gt;&gt; Steve Kinney: All right,
took about nine milliseconds,

77
00:05:08.877 --> 00:05:11.322
I feel confident we can go back up to 1E7.

78
00:05:13.888 --> 00:05:16.408
&gt;&gt; Steve Kinney: All right, 26, right,

79
00:05:16.408 --> 00:05:21.250
clearly scaling pretty well here,
okay, not bad.

80
00:05:21.250 --> 00:05:23.495
Let's go ahead, we're gonna keep
an a property on all of them,

81
00:05:23.495 --> 00:05:26.300
cuz this code would theoretically,
I don't even know what happens if we lose.

82
00:05:26.300 --> 00:05:31.290
I guess undefined gets coerced into NAN,
nobody wants to go down that road.

83
00:05:31.290 --> 00:05:33.240
So we'll keep an a property
on all of them.

84
00:05:33.240 --> 00:05:36.720
But maybe sometimes we added
some stuff to an object,

85
00:05:36.720 --> 00:05:40.256
sometimes we deleted some stuff from
an object, things happen in JavaScript.

86
00:05:40.256 --> 00:05:44.158
Right, our code's a wild, wild place,
things are changing all the time.

87
00:05:44.158 --> 00:05:46.847
We've got back different
data from the database, and

88
00:05:46.847 --> 00:05:49.720
some of them have these properties,
some of them don't.

89
00:05:49.720 --> 00:05:53.130
So we'll go ahead and say,
give this one a b property.

90
00:05:55.372 --> 00:06:01.749
&gt;&gt; Steve Kinney: Here we'll say,
&gt;&gt; Steve Kinney: Let's

91
00:06:01.749 --> 00:06:02.760
make them different.

92
00:06:07.430 --> 00:06:08.766
&gt;&gt; Steve Kinney: All right,
we'll run this code again.

93
00:06:11.681 --> 00:06:14.488
&gt;&gt; Steve Kinney: All right, that's,
again, a few milliseconds, but

94
00:06:14.488 --> 00:06:18.568
that's definitely a noticeable difference,
that's 20% longer, right?

