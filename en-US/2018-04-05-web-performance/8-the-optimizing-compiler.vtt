WEBVTT

1
00:00:00.110 --> 00:00:02.120
&gt;&gt; Steve Kinney: It runs okay, right,

2
00:00:02.120 --> 00:00:05.160
not great that's not what
makes JavaScript really fast.

3
00:00:05.160 --> 00:00:07.960
What makes JavaScript really
fast is that green arrow.

4
00:00:07.960 --> 00:00:12.643
Anything we can get across that green
arrow to turbo fan is good, right?

5
00:00:12.643 --> 00:00:15.881
[LAUGH] Whenever we can do that,
that is a thing that we want to do.

6
00:00:15.881 --> 00:00:17.065
That is a good thing.

7
00:00:17.065 --> 00:00:20.750
So then it raises the question,
how do we do that?

8
00:00:21.760 --> 00:00:26.906
There is a lot of the,
&gt;&gt; Steve Kinney: Turbo Fan and

9
00:00:26.906 --> 00:00:31.450
V8 as a whole is mostly made in Germany,
[LAUGH] particularly Munich.

10
00:00:31.450 --> 00:00:34.390
Most of the teamwork's there, and
it's a bunch of really nice and

11
00:00:34.390 --> 00:00:38.580
smart people, friends of mine that
work there, and they have PhDs and

12
00:00:38.580 --> 00:00:40.780
they're doing some very technical stuff.

13
00:00:40.780 --> 00:00:44.270
We're gonna do it like a high-level
version of that because I

14
00:00:44.270 --> 00:00:45.850
aspire to teach you a lot
of web performance.

15
00:00:45.850 --> 00:00:48.170
If we could all leave here with
PhDs I would totally do that, but

16
00:00:48.170 --> 00:00:49.410
that's probably not gonna happen.

17
00:00:49.410 --> 00:00:54.632
So we're gonna look at a few of the things
that TurboFan does and how it works.

18
00:00:54.632 --> 00:00:58.385
The three things that we're
gonna look at are speculative.

19
00:00:58.385 --> 00:01:00.113
I can't wait to say that
a bunch of times in front of

20
00:01:00.113 --> 00:01:01.439
a room full of people being recorded.

21
00:01:01.439 --> 00:01:06.618
Speculative optimization,
hidden classes for

22
00:01:06.618 --> 00:01:11.045
dynamic lookups and function inlining.

23
00:01:11.045 --> 00:01:15.570
Because the reason that what makes
the optimizing compiler faster is

24
00:01:15.570 --> 00:01:19.871
the like removal of the things
that make the interpreter slower.

25
00:01:19.871 --> 00:01:25.952
Cuz JavaScript is hard and JavaScript is
dynamic and JavaScript has a lot of rules.

26
00:01:25.952 --> 00:01:30.700
So let's say we get an add function,
right, add x and y it returns x plus y.

27
00:01:30.700 --> 00:01:33.290
You're like yeah, why is that hard?

28
00:01:33.290 --> 00:01:35.802
Well, what does a plus operator do?

29
00:01:35.802 --> 00:01:39.810
You're like it adds numbers, I'm like,
yeah, what if I give it strings?

30
00:01:39.810 --> 00:01:44.359
It concatenates them, okay,
what if I give it a string and an object?

31
00:01:44.359 --> 00:01:46.566
Well, it calls two string on the object,
and

32
00:01:46.566 --> 00:01:48.726
then concatenates that with the first one.

33
00:01:48.726 --> 00:01:51.211
What if I give it a number and
a string of numbers?

34
00:01:51.211 --> 00:01:55.267
There's a lot of rules, right,
in the JavaScript spec, and

35
00:01:55.267 --> 00:02:00.030
the interpreter has no idea,
[LAUGH] what's gonna happen here, right?

36
00:02:00.030 --> 00:02:04.196
It knows it has to add x and y, it doesn't
necessarily know what x and y are yet,

37
00:02:04.196 --> 00:02:08.769
until the program's actually running, so
it basically has to follow the rule book.

38
00:02:08.769 --> 00:02:13.588
But the hope is that,
if we are writing the same function, 1000,

39
00:02:13.588 --> 00:02:18.242
10000, a million times,
that we can start to do like make some

40
00:02:18.242 --> 00:02:23.242
guesses on what's happening here,
and maybe skip some rules, right?

41
00:02:23.242 --> 00:02:26.319
Because, what is faster than doing stuff?

42
00:02:27.800 --> 00:02:31.397
Not doing stuff, right, and if we can
skip all of those kinda crazy rules and

43
00:02:31.397 --> 00:02:34.562
concatenation and do I need to throw
an error and be ready for that.

44
00:02:34.562 --> 00:02:36.843
If we can eliminate all of that,

45
00:02:36.843 --> 00:02:41.582
we can execute the JavaScript way faster,
all right, very cool.

46
00:02:41.582 --> 00:02:44.960
So, we're gonna go ahead and
look at some code.

47
00:02:44.960 --> 00:02:47.930
In the,
just that we've send out earlier for

48
00:02:47.930 --> 00:02:51.320
watching this then it should be
like a link below the video.

49
00:02:51.320 --> 00:02:54.814
There is a repo called web-performance
with a bunch of code in it.

50
00:02:54.814 --> 00:02:56.372
We're gonna play around with that for

51
00:02:56.372 --> 00:03:04.215
a second.
&gt;&gt; Steve Kinney: Here,

52
00:03:04.215 --> 00:03:10.227
I have a little file this is in
the benchmarks directory in that repo.

53
00:03:10.227 --> 00:03:11.923
This is a file called benchmark.js,

54
00:03:11.923 --> 00:03:14.910
I'm very good with naming
things as you can tell.

55
00:03:14.910 --> 00:03:20.120
And we're gonna actually look at some
code, so what's going on in this code?

56
00:03:20.120 --> 00:03:23.657
The first thing is we're gonna
pull in this performance object,

57
00:03:23.657 --> 00:03:26.694
this is not an MPM module or
anything along those lines.

58
00:03:26.694 --> 00:03:30.534
If you have for
the LTS's node 8.5 and later,

59
00:03:30.534 --> 00:03:35.227
you have this, I'm running 9.8,
I have this, right.

60
00:03:35.227 --> 00:03:38.712
So 8.5 and later should have this
if you have an earlier version,

61
00:03:38.712 --> 00:03:40.007
you might not have this.

62
00:03:40.007 --> 00:03:43.424
And you might need to update during
the break and we'll do it together and

63
00:03:43.424 --> 00:03:44.500
it'll be a lot of fun.

64
00:03:44.500 --> 00:03:48.703
But this performance object gives us
a whole bunch, it's basically implementing

65
00:03:48.703 --> 00:03:52.379
what's called the user timing API,
which is also supported in Chrome.

66
00:03:52.379 --> 00:03:55.679
So yeah this is version is specific to
Node if you have a modern version of

67
00:03:55.679 --> 00:03:57.879
Chrome you also have these
available as well and

68
00:03:57.879 --> 00:04:00.079
you can run some of these
maybe in your console.

69
00:04:01.770 --> 00:04:05.540
Cool, so we gonna pull that in, then I
have a little setup phase in my benchmark

70
00:04:05.540 --> 00:04:10.740
here where I'm gonna do one
some scientific notation a lot.

71
00:04:10.740 --> 00:04:14.653
I'm a liberal arts major as you just found
out from the fact that I can translate

72
00:04:14.653 --> 00:04:16.326
scientific notation on the fly.

73
00:04:16.326 --> 00:04:21.202
We did this a bunch of times and
we're just gonna add 1 and 2.

74
00:04:21.202 --> 00:04:24.585
And we'll kinda go through in a loop,
add them together,

75
00:04:24.585 --> 00:04:28.797
we'll end the performance benchmark,
and then we'll measure it, and

76
00:04:28.797 --> 00:04:32.130
then we'll console log that measurement,
sound good?

77
00:04:33.457 --> 00:04:42.065
Cool.
&gt;&gt; Steve Kinney: So

78
00:04:42.065 --> 00:04:45.339
I'll go ahead and I'll run node,
and I'll just run the benchmarks.

79
00:04:45.339 --> 00:04:49.300
Cool, so I did all of that
in about 33 milliseconds.

80
00:04:49.300 --> 00:04:54.056
I'm gonna do a little kinda quick PSA for
the user timing API and

81
00:04:54.056 --> 00:04:55.864
why it's really cool.

82
00:04:55.864 --> 00:04:59.678
Which I'm gonna take this code,
other than the common js required,

83
00:04:59.678 --> 00:05:02.480
cuz we know that's not
supported in the browser.

84
00:05:02.480 --> 00:05:06.066
I'm gonna take the rest of it.
&gt;&gt; Steve Kinney: And

85
00:05:06.066 --> 00:05:08.365
I'm gonna go ahead into Chrome.

86
00:05:08.365 --> 00:05:14.093
Go to about blank.
&gt;&gt; Steve Kinney: I'll

87
00:05:14.093 --> 00:05:18.893
open up the tools here,
and I could paste it in,

88
00:05:18.893 --> 00:05:22.855
it runs, same amount of time, great.

89
00:05:22.855 --> 00:05:25.911
But what I wanna show you is,
I'm gonna go to the Performance tab,

90
00:05:25.911 --> 00:05:27.339
I'm gonna start a recording.

91
00:05:27.339 --> 00:05:29.929
This is gonna be our friend today,
we're gonna spend a lot of time in

92
00:05:29.929 --> 00:05:31.853
the Performance tab this
is our first taste of it.

93
00:05:31.853 --> 00:05:35.419
I'm gonna record,
then I'm gonna go to Console.

94
00:05:35.419 --> 00:05:38.922
No I actually you know pick
the console here, I'm gonna record,

95
00:05:38.922 --> 00:05:43.606
I'm gonna paste this in.
&gt;&gt; Steve Kinney: I'm gonna

96
00:05:43.606 --> 00:05:47.810
refresh the page because I used constance
and it doesn't like that, one more try.

97
00:05:49.790 --> 00:05:54.728
So we'll record,
&gt;&gt; Steve Kinney: We'll paste it in

98
00:05:54.728 --> 00:05:56.801
hit Run we'll stop.

99
00:05:56.801 --> 00:06:00.310
Cool, so you can see I have this spike
of JavaScript that I'm doing here.

100
00:06:00.310 --> 00:06:03.946
You can see it's evaluating a script
that's cuz I just pasted it into

101
00:06:03.946 --> 00:06:07.157
the console, so
it doesn't really know where it came from.

102
00:06:07.157 --> 00:06:12.089
But what I want to draw your
attention to is right here, right?

103
00:06:12.089 --> 00:06:14.717
I can put my own entries
into what's called

104
00:06:14.717 --> 00:06:18.524
the user timing portion of
the co-developer tools, right?

105
00:06:18.524 --> 00:06:23.035
So remember when I was hammering home
this, hey, let's measure things,

106
00:06:23.035 --> 00:06:26.916
you're like, great, yeah,
I don't know how to do that neat.

107
00:06:26.916 --> 00:06:28.548
Use the timing if it has really useful for

108
00:06:28.548 --> 00:06:31.572
this cuz you can basically set your
mark a start time, you mark an end time,

109
00:06:31.572 --> 00:06:34.645
and then you can do this measure where
you can give it whatever name you want.

110
00:06:34.645 --> 00:06:38.109
I called it my special benchmark to
have you believed me that I put this in

111
00:06:38.109 --> 00:06:40.470
there and this was not a Chrome thing.

112
00:06:40.470 --> 00:06:45.364
But you can actually put in all of these
benchmarks to see exactly how long a given

113
00:06:45.364 --> 00:06:47.787
action of your application is taking.

114
00:06:47.787 --> 00:06:51.113
So I wanna know like, hey, I think some
of the hurt is here, you can put a,

115
00:06:51.113 --> 00:06:54.100
you can mark the start time of
the thing that you think is hurting.

116
00:06:54.100 --> 00:06:57.570
You can mark the end time and
you can actually put that into the Chrome

117
00:06:57.570 --> 00:07:01.680
developer tools, do a performance
recording and then see when those things

118
00:07:01.680 --> 00:07:05.105
are happening and how long they are
taking, right, which is super interesting.

119
00:07:05.105 --> 00:07:06.663
And a really great way to debug,

120
00:07:06.663 --> 00:07:10.664
we'll see later that react actually in
development mode uses this out of the box.

121
00:07:10.664 --> 00:07:14.431
So you can actually see when a component
started mounting, when it finally mounted,

122
00:07:14.431 --> 00:07:17.167
all those thing, it will actually
log those all here as well.

123
00:07:17.167 --> 00:07:18.409
Which is super useful for

124
00:07:18.409 --> 00:07:22.023
figuring out if it's something in
your reacticode that's doing this.

125
00:07:22.023 --> 00:07:26.783
But yeah this is a really great tool for
figuring out why something that's taking

126
00:07:26.783 --> 00:07:31.344
as long as it is, if it's the thing taking
a long time, and so on and so forth.

127
00:07:31.344 --> 00:07:35.763
But back to our main event,
so here, we ran it,

128
00:07:35.763 --> 00:07:43.290
it'd be really great if we knew like what
was happening here, like is this code?

129
00:07:43.290 --> 00:07:45.276
I mean, one would argue this code,

130
00:07:45.276 --> 00:07:49.980
that we're just running the same function
with the same variables, a lot of times,

131
00:07:49.980 --> 00:07:54.634
it feels like it's a good candidate for
going to the optimizing compiler, right.

132
00:07:54.634 --> 00:07:58.238
How do we know if it's going to
the optimizing compiler, do we know?

133
00:07:58.238 --> 00:08:01.301
Is it just like,
Steve told us that things go there and

134
00:08:01.301 --> 00:08:04.037
he seems confident,
thereby it must, right.

135
00:08:04.037 --> 00:08:08.231
Or how can we tell if something's
going to the optimizing compiler?

136
00:08:08.231 --> 00:08:11.615
It turns out that V8 has
a bunch of flags that you can

137
00:08:11.615 --> 00:08:15.530
set to get more information
about what's going on.

138
00:08:15.530 --> 00:08:19.304
So for instance we could do node and
get this flag trace opy,

139
00:08:19.304 --> 00:08:24.654
anyone guessed what traced opt stands for?
&gt;&gt; Steve Kinney: Trace

140
00:08:24.654 --> 00:08:29.024
optimizations.
&gt;&gt; Steve Kinney: There will be an easier

141
00:08:29.024 --> 00:08:32.350
question later that you can all
like redeem yourselves with.

142
00:08:33.580 --> 00:08:39.850
Cool, and you can see there's some
stuff being logged to the console here.

143
00:08:39.850 --> 00:08:43.052
I'm kind of interested
in this first one which

144
00:08:43.052 --> 00:08:46.427
is the JavaScript function
add is being marked.

145
00:08:46.427 --> 00:08:50.555
We're marking the add function for
optimized recompilation, reasons?

146
00:08:50.555 --> 00:08:53.696
It's a small function,
there's in-line caching,

147
00:08:53.696 --> 00:08:56.530
which we'll talk about in a second.

148
00:08:56.530 --> 00:09:00.548
So yeah, we do it,
we compile it with Turbo Fan,

149
00:09:00.548 --> 00:09:03.882
it completes the optimizing very cool.

150
00:09:03.882 --> 00:09:04.903
There's some other things.

151
00:09:04.903 --> 00:09:12.148
There is a debugging tool called D8
which is used for debugging V8, cute.

152
00:09:12.148 --> 00:09:16.710
That it was much more specialized but you
have to download it, compile Chrome and

153
00:09:16.710 --> 00:09:17.420
a bunch of stuff.

154
00:09:17.420 --> 00:09:20.707
If you get really into this that's
definitely the way you wanna go,

155
00:09:20.707 --> 00:09:23.195
because Node is not just V8,
but it's also Node.

156
00:09:23.195 --> 00:09:26.655
So this other stuff here
is actually Node happening.

157
00:09:26.655 --> 00:09:30.154
So a useful thing to do, if we're
command-line wizards, is to run it.

158
00:09:30.154 --> 00:09:34.166
And we can do grep add, which will find
every line with the name of the function

159
00:09:34.166 --> 00:09:37.060
in it, and
we'll get a little bit less noise.

160
00:09:37.060 --> 00:09:41.388
So here you can see the Subset of
the previous information, okay?

161
00:09:41.388 --> 00:09:46.019
We optimized add for recompilation,
we now know that it went to TurboFan,

162
00:09:46.019 --> 00:09:47.204
it got optimized.

163
00:09:47.204 --> 00:09:49.970
It went to to the optimizing
compiler good, rock and roll.

