WEBVTT

1
00:00:00.000 --> 00:00:04.799
&gt;&gt; Steve: So our goal was to then just
give a shout out like using FastDOM to

2
00:00:04.799 --> 00:00:06.892
like speed up these boxes.

3
00:00:06.892 --> 00:00:11.521
Before we saw we had a big problem,
we solved it by separating everything.

4
00:00:11.521 --> 00:00:13.939
What wanna do is kind of go back to
our original code because, again,

5
00:00:13.939 --> 00:00:15.648
the problem that we're
trying to solve here is,

6
00:00:15.648 --> 00:00:17.543
yeah, if you could separate it cool,
do it, right.

7
00:00:17.543 --> 00:00:20.876
But if you have one
function that's being very

8
00:00:20.876 --> 00:00:25.245
responsible about doing all of
its reading and its writing.

9
00:00:25.245 --> 00:00:29.008
And then you have another function and
they get called after each other,

10
00:00:29.008 --> 00:00:30.124
what did you just do?

11
00:00:30.124 --> 00:00:32.380
You read a bunch, you wrote a bunch, you
read a bunch, you wrote a bunch, right?

12
00:00:32.380 --> 00:00:34.646
In a given function,
you could totally optimize this, but

13
00:00:34.646 --> 00:00:36.082
across your application?

14
00:00:36.082 --> 00:00:38.901
It's gonna happen unless
you are purposely,

15
00:00:38.901 --> 00:00:42.378
unless you have some kind of
abstraction managing this.

16
00:00:42.378 --> 00:00:45.140
So we'll go back to something
a little closer to our original code.

17
00:00:47.650 --> 00:00:53.468
So let's get rid of this,

18
00:00:53.468 --> 00:01:00.882
go ahead and put that back there.

19
00:01:00.882 --> 00:01:02.920
Actually grab that line as well.

20
00:01:04.530 --> 00:01:06.844
I could keep that all on
the double width as well.

21
00:01:06.844 --> 00:01:12.614
I just, was easier to change it like this.

22
00:01:12.614 --> 00:01:18.052
So here we can go ahead and we could say

23
00:01:18.052 --> 00:01:23.322
fastdom.measure, eventually.

24
00:01:23.322 --> 00:01:24.867
Give it a function to measure it.

25
00:01:31.054 --> 00:01:35.725
&gt;&gt; Steve: And
then we could schedule a write by saying

26
00:01:35.725 --> 00:01:39.893
fastdom.write, or mutate rather.

27
00:01:52.852 --> 00:01:54.312
&gt;&gt; Steve: Cool, go ahead and do it.

28
00:01:54.312 --> 00:01:55.492
See if it works.

29
00:01:55.492 --> 00:01:58.632
Didn't make any mistakes
which is a welcome change.

30
00:02:03.351 --> 00:02:05.280
&gt;&gt; Steve: We'll open it up,
go to performance.

31
00:02:05.280 --> 00:02:06.203
We're going to measure it.

32
00:02:10.298 --> 00:02:12.041
&gt;&gt; Steve: And it will stop.

33
00:02:12.041 --> 00:02:16.028
And you can see like first thing
I notice is there's a little,

34
00:02:16.028 --> 00:02:18.262
some little bumps there, right?

35
00:02:18.262 --> 00:02:20.513
It's not that big spike.

36
00:02:20.513 --> 00:02:23.553
But the animation, yeah,
we can lock up the entire thread there.

37
00:02:23.553 --> 00:02:25.372
With hitting a button multiple times,

38
00:02:25.372 --> 00:02:29.190
the simple fact that I am not hitting
it 60 frames per second is helpful.

39
00:02:29.190 --> 00:02:36.732
But we go ahead, grab one of these here,
take a look at it.

40
00:02:36.732 --> 00:02:39.492
And we are definitely not
thrashing the dom anymore.

41
00:02:39.492 --> 00:02:41.122
All right, so it's a useful way to,

42
00:02:41.122 --> 00:02:43.396
we have a problem we can
kind of apply the solution.

43
00:02:43.396 --> 00:02:47.431
Cuz yeah, going and figuring out every
code path that your code can take and

44
00:02:47.431 --> 00:02:50.574
making sure two functions
aren't doing their own thing in

45
00:02:50.574 --> 00:02:52.260
isolation is going to be hard.

46
00:02:52.260 --> 00:02:56.481
But we have an abstraction where we
just record all of our measurements and

47
00:02:56.481 --> 00:03:01.330
then we batch all of our mutates together,
we can solve this problem fairly easily.

