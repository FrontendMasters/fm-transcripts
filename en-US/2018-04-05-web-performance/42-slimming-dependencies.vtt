WEBVTT

1
00:00:00.030 --> 00:00:04.481
&gt;&gt; Steve: But the first thing I'm thinking
about, is the lodash over here, right.

2
00:00:04.481 --> 00:00:07.586
Even gzip it's 23 kilobytes, right.

3
00:00:07.586 --> 00:00:10.263
I happen to know having written the app,

4
00:00:10.263 --> 00:00:13.980
that I am using exactly one
method from lodash, right.

5
00:00:15.484 --> 00:00:18.680
And so
because I included one method from lodash,

6
00:00:18.680 --> 00:00:24.220
I have to get all of lodash and
pay that cost.

7
00:00:24.220 --> 00:00:27.350
So then there's an argument
of do use lodash?

8
00:00:27.350 --> 00:00:28.710
Do you write yourself?

9
00:00:28.710 --> 00:00:32.790
Like, how long do you wanna start walking
on that path before you proven lodash?

10
00:00:32.790 --> 00:00:36.180
Slowly but surely,
if only there was a better way.

11
00:00:36.180 --> 00:00:37.854
There are some libraries,

12
00:00:37.854 --> 00:00:42.084
that will allow you to be more specific
about what you need from them.

13
00:00:42.084 --> 00:00:47.557
So what I can do here, is I can go into
the code, and let's take a look for

14
00:00:47.557 --> 00:00:52.497
where it is, I believe it's in
the note view container, nope.

15
00:00:54.102 --> 00:00:57.169
&gt;&gt; Steve: There it is, bring it in,
the underscore from lodash,

16
00:00:57.169 --> 00:01:00.250
which has got all the methods
that lodash does, right?

17
00:01:00.250 --> 00:01:03.120
Like, I don't know how many
methods lodash has these days, but

18
00:01:03.120 --> 00:01:06.296
it's enough to take up a large
chunk in my bundle of visualizer.

19
00:01:07.925 --> 00:01:10.705
Cool, so it turns out with lodash
you can do this really cool thing,

20
00:01:10.705 --> 00:01:14.215
where all I'm using is
the transform method.

21
00:01:14.215 --> 00:01:18.155
Cuz I have an object with keys and
values, I need an array, so

22
00:01:18.155 --> 00:01:21.165
I'm using the transform method and
I'm turning it into that.

23
00:01:21.165 --> 00:01:28.090
But what I can do is I can
type lodash/transform,

24
00:01:28.090 --> 00:01:31.760
now we'll just call this transform.

25
00:01:31.760 --> 00:01:32.290
We'll get rid of that.

26
00:01:32.290 --> 00:01:36.425
First of all, it means I don't have to
type that lame underscore all the time,

27
00:01:36.425 --> 00:01:37.374
so that's a win.

28
00:01:37.374 --> 00:01:42.032
Let's go ahead, and
rebuild and see what happens.

29
00:01:51.510 --> 00:01:52.071
&gt;&gt; Steve: Building is fun.

30
00:01:57.011 --> 00:02:01.785
&gt;&gt; Steve: My suspicion,
is that I'm going to get a smaller bundle.

31
00:02:01.785 --> 00:02:03.106
We will see this together.

32
00:02:06.612 --> 00:02:11.750
&gt;&gt; Steve: Cool, so before,
this is what we had, right.

33
00:02:11.750 --> 00:02:16.630
Now, code mirror still large and
in charge, but

34
00:02:16.630 --> 00:02:21.220
lodash we're using lodash that is equal.

35
00:02:21.220 --> 00:02:24.380
Transform is not just transform,
it uses some other lodash methods, so

36
00:02:24.380 --> 00:02:26.970
not totally out of the woods here.

37
00:02:26.970 --> 00:02:32.979
But, I went from 500 kilobytes
that's not my 300 kilobyte goal,

38
00:02:32.979 --> 00:02:38.002
and like think about how simple
this app is I already blew past

39
00:02:38.002 --> 00:02:42.949
300 with like aside bar,
a mark down note and an editor.

40
00:02:42.949 --> 00:02:46.136
It means the 500 we're now down to 450, so

41
00:02:46.136 --> 00:02:51.129
it's shaved 10% of he size of our
bundle by typing like 10 characters.

42
00:02:53.490 --> 00:02:55.410
I'll call that a win, right?

43
00:02:55.410 --> 00:02:58.340
And you might be like,
listen I use a lot of lodash,

44
00:02:58.340 --> 00:03:02.350
I'm not going through the files and
doing that for every single thing.

45
00:03:02.350 --> 00:03:07.325
Luckily, you can cheat which is
kind of great, there is a babel

46
00:03:07.325 --> 00:03:12.660
plugin that when it compiles your
code will automatically switch out.

47
00:03:12.660 --> 00:03:14.844
Every time you use lodash for

48
00:03:14.844 --> 00:03:19.671
the require lodash slash whatever,
and just do it all for you.

49
00:03:19.671 --> 00:03:24.555
We can turn this code back,
&gt;&gt; Steve: The way it was,

50
00:03:24.555 --> 00:03:29.510
so again,
incurring that 50 kilobyte tax again.

51
00:03:29.510 --> 00:03:31.727
And I have it in this package json, so

52
00:03:31.727 --> 00:03:37.941
you can see it
&gt;&gt; Steve: Babel-plugin-lodash, and its

53
00:03:37.941 --> 00:03:42.430
sole job is to do what I did, in all the
files of your application for you, right?

54
00:03:42.430 --> 00:03:45.270
And so, if you have a large
application and you're like, I

55
00:03:45.270 --> 00:03:49.370
don't want to do this by hand because I'm
to good for that and it's very nice out.

56
00:03:49.370 --> 00:03:51.210
You can install this plugin and
you can be done.

57
00:03:51.210 --> 00:03:55.422
So we'll go to the babelrc,
and we'll say plugins,

58
00:03:55.422 --> 00:03:58.800
I would also like to
use the lodash plugin.

59
00:04:02.761 --> 00:04:05.943
&gt;&gt; Steve: So remember I turned
the code back to the way it was,

60
00:04:05.943 --> 00:04:07.942
I originally started out with.

61
00:04:07.942 --> 00:04:12.480
And so my hope is that it will basically
rewriting my code for me at compile time.

62
00:04:12.480 --> 00:04:16.087
I think one of the really interesting
things that's going to happen to the web

63
00:04:16.087 --> 00:04:19.585
over the next kinda few years, which
is before everything was happening in

64
00:04:19.585 --> 00:04:22.660
the browser, like how much stuff
can we do in the build pipeline?

65
00:04:22.660 --> 00:04:24.520
How many things,
how many optimizations can we make?

66
00:04:24.520 --> 00:04:29.630
We saw optimized JS earlier,
you can see it again now.

67
00:04:29.630 --> 00:04:33.680
You can see these are effectively
indistinguishable.

68
00:04:33.680 --> 00:04:36.930
The code is slightly different
because like we rewrote it.

69
00:04:36.930 --> 00:04:40.866
But I started with the original code,
I used the babel plugin,

70
00:04:40.866 --> 00:04:44.600
I still get to have my 50
kilobyte savings, right great.

71
00:04:44.600 --> 00:04:47.940
All right, but
there are some other culprits in here,

72
00:04:47.940 --> 00:04:51.190
like we can all see
the elephant in the room here.

73
00:04:51.190 --> 00:04:52.110
Who's the problem right now?

74
00:04:53.470 --> 00:04:58.335
Codemirror is the problem,
codemirror is accounting for

75
00:04:58.335 --> 00:05:04.210
of my par size, or
even my js size, the lions share.

76
00:05:04.210 --> 00:05:08.100
It's pars 162 kilobytes, gzip 53, right.

77
00:05:08.100 --> 00:05:13.309
That is again, effectively like
a third of my bundle, right.

78
00:05:13.309 --> 00:05:18.070
And again, if they never click on edit
they will never even use this code.

79
00:05:18.070 --> 00:05:21.630
They will pay the tax to parson it,
they will pay the tax of downloading it,

80
00:05:21.630 --> 00:05:25.630
they will never actually use it, and
my app would be a lot snappier and

81
00:05:25.630 --> 00:05:27.520
quicker to load if I just didn't do this.

