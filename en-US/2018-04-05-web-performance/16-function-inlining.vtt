WEBVTT

1
00:00:00.070 --> 00:00:03.020
&gt;&gt; Steve Kinney: First one we talk
about is thisFunction Inlining.

2
00:00:03.020 --> 00:00:06.522
And this is one of the ones where I want
to make the point that sometimes you can

3
00:00:06.522 --> 00:00:09.398
go around moving around code and
it doesn't matter, right?

4
00:00:09.398 --> 00:00:12.742
Because one of the things we've learned
from the optimizing compiler is just turn

5
00:00:12.742 --> 00:00:14.251
yourself into machine code anyway.

6
00:00:14.251 --> 00:00:17.740
The code you write is not always
the code that V8 executes.

7
00:00:17.740 --> 00:00:21.650
Sometime V8 will go ahead and
rewrite your code for you, right?

8
00:00:21.650 --> 00:00:26.061
So your job is to make the most readable,
human-friendly code possible.

9
00:00:26.061 --> 00:00:32.100
V8's job, and the Chrome team's job, is to
make that code run as fast as possible.

10
00:00:32.100 --> 00:00:34.100
So we'll just look at
one other quick example,

11
00:00:34.100 --> 00:00:37.040
and then we're done with compiler
land after that, I promise you.

12
00:00:38.080 --> 00:00:41.255
You're like, I love compiler land,
I live here now.

13
00:00:41.255 --> 00:00:44.590
[LAUGH] Cool.

14
00:00:44.590 --> 00:00:51.551
All right, so
let's just make a code square,

15
00:00:51.551 --> 00:00:55.655
and it will take a number and

16
00:00:55.655 --> 00:00:59.418
it will return x times x.

17
00:00:59.418 --> 00:01:02.375
We'll make another one
called sumOfSquares.

18
00:01:04.302 --> 00:01:10.390
&gt;&gt; Steve Kinney: That will take an a and
a b, and say like square a,

19
00:01:14.508 --> 00:01:18.226
&gt;&gt; Steve Kinney: plus square of b,

20
00:01:22.410 --> 00:01:23.526
&gt;&gt; Steve Kinney: sumOfSquares,

21
00:01:23.526 --> 00:01:26.400
grammatically correct, yeah.

22
00:01:26.400 --> 00:01:32.415
&gt;&gt; Steve Kinney: I will say iteration,

23
00:01:32.415 --> 00:01:37.486
iterations + 1.

24
00:01:37.486 --> 00:01:43.203
Okay, we'll go ahead and
we'll say node and

25
00:01:43.203 --> 00:01:46.520
we'll say, benchmark.

26
00:01:48.699 --> 00:01:50.180
&gt;&gt; Steve Kinney: Took
about eight milliseconds.

27
00:01:52.380 --> 00:01:57.143
Now, you'll be like, hey, I had to make
this function, I gotta call this function,

28
00:01:57.143 --> 00:02:01.584
which means the compiler has to go ahead
and look up what's the square function,

29
00:02:01.584 --> 00:02:02.848
and pass the thing in.

30
00:02:02.848 --> 00:02:06.470
I've been listening to the golden rules,

31
00:02:06.470 --> 00:02:11.814
I understand that doing that
should be slower than doing this.

32
00:02:11.814 --> 00:02:15.493
a times a, b times b, look at that.

33
00:02:15.493 --> 00:02:16.950
Boom, I'm gonna measure it now.

34
00:02:19.540 --> 00:02:21.400
It's like around the same.

35
00:02:21.400 --> 00:02:23.200
Right, like we ran them both a few times.

36
00:02:23.200 --> 00:02:26.230
They're hovering around eight to ten.

37
00:02:26.230 --> 00:02:26.940
It's no different.

38
00:02:28.150 --> 00:02:29.570
That's weird.

39
00:02:29.570 --> 00:02:32.780
Shouldn't it be like,
Beckett's was technically slower.

40
00:02:34.230 --> 00:02:37.240
Turns out we have this
thing called Inlining.

41
00:02:37.240 --> 00:02:40.850
So you do trace-turbo-inlining.

42
00:02:40.850 --> 00:02:43.520
You're like what is turbo inlining?

43
00:02:43.520 --> 00:02:46.710
Well crank shaft did it one way,
turbo fan does it another way.

44
00:02:46.710 --> 00:02:48.234
So it's just turbo fans inlining.

45
00:02:48.234 --> 00:02:51.554
You'll see nothing if you go looking for
trace inlining so

46
00:02:51.554 --> 00:02:53.990
we traced turbo-inlining now.

47
00:02:53.990 --> 00:02:55.520
I for one, I'm signed up.

48
00:02:57.690 --> 00:03:02.850
Look it's inlining square
into sumOfSquares.

49
00:03:02.850 --> 00:03:06.550
So you know that cool
optimization I did before, right?

50
00:03:06.550 --> 00:03:09.010
Before it was like 8, this time it was 12,
and the last time it was 10.

51
00:03:09.010 --> 00:03:12.900
It looks like it's roughly the same, like
the needle goes back and forth like this.

52
00:03:12.900 --> 00:03:18.970
So what happened was Chrome is like, hey,
I have to keep calling this function.

53
00:03:18.970 --> 00:03:23.410
What if I just rewrote what we had the
first time to what we had the second time?

54
00:03:23.410 --> 00:03:24.997
And it does that for you on your behalf.

55
00:03:24.997 --> 00:03:28.174
Right, so it'll go and it sees you're
calling the same function over and

56
00:03:28.174 --> 00:03:30.993
over and over again, it'll basically
go and rewrite your code so

57
00:03:30.993 --> 00:03:32.600
you're not calling that function.

58
00:03:33.620 --> 00:03:36.070
Right, you don't have to worry about this,
it'll just do it, you get it for

59
00:03:36.070 --> 00:03:37.900
free, happy day.

60
00:03:37.900 --> 00:03:40.850
You can thank Benedict and
Francisca about that later.

