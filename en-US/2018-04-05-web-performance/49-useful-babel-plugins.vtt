WEBVTT

1
00:00:00.080 --> 00:00:01.847
&gt;&gt; Steve: Luckily there
are some solutions for

2
00:00:01.847 --> 00:00:06.663
this.
&gt;&gt; Steve: So

3
00:00:06.663 --> 00:00:12.836
what I was using was called the ES
2015 syntax or the ES 2015 preset,

4
00:00:12.836 --> 00:00:18.830
which basically supports all of ES 2015,
for browsers that don't.

5
00:00:20.410 --> 00:00:26.107
Which means like all versions of Internet
Explorermso on and so forth, right.

6
00:00:26.107 --> 00:00:29.300
And so we're gonna look a bunch of tools,
all these fall under maybe use.

7
00:00:29.300 --> 00:00:33.360
But the first one is probably the most
likely to use under all of those, right.

8
00:00:33.360 --> 00:00:37.440
Which is you need to look at what
browsers are your users are using,

9
00:00:37.440 --> 00:00:42.490
because like Chrome, Firefox, Safari,
Edge, they all support that class syntax.

10
00:00:42.490 --> 00:00:44.510
They all support that syntax.

11
00:00:44.510 --> 00:00:45.910
Does that mean you need to transpile it?

12
00:00:46.950 --> 00:00:47.700
You probably don't.

13
00:00:47.700 --> 00:00:53.020
You just not pay that tax,
which is better than paying it, right.

14
00:00:53.020 --> 00:00:57.460
And so what babel-preset-env does,
it it effectively,

15
00:00:57.460 --> 00:01:00.670
you use it instead of AS2015 or whatever.

16
00:01:00.670 --> 00:01:03.340
And you can basically get
specific about what you support.

17
00:01:04.620 --> 00:01:08.590
This will support the last two versions of
every browser, and whatever they support,

18
00:01:08.590 --> 00:01:11.810
which means it won't transpile the class,
the last two browsers.

19
00:01:11.810 --> 00:01:12.730
I mean, Safari 7,

20
00:01:12.730 --> 00:01:15.340
you're basically transpiling everything,
Safari's currently at 11.

21
00:01:15.340 --> 00:01:18.570
And they usually update on a yearly basis.

22
00:01:18.570 --> 00:01:23.860
So that gets you to 2014 by my math, 2013
maybe, depends on where we draw that line.

23
00:01:23.860 --> 00:01:26.690
But if you said like, last two versions,
if you look at your metrics,

24
00:01:26.690 --> 00:01:31.310
figure what browser your users are using,
you can begin to say like, I don't need to

25
00:01:31.310 --> 00:01:36.390
support, I don't need to transpile
syntax used by all of my customers,

26
00:01:36.390 --> 00:01:38.920
right, And
some of that is like looking at the data.

27
00:01:38.920 --> 00:01:40.460
Some of that is driven by product,

28
00:01:40.460 --> 00:01:44.060
at like product keeps a list
of what browsers they support.

29
00:01:44.060 --> 00:01:46.930
That means I don't need
to pay the babble tax for

30
00:01:46.930 --> 00:01:49.410
browsers that we don't officially support,
right.

31
00:01:50.610 --> 00:01:52.280
So it's useful thinking
about those things.

32
00:01:52.280 --> 00:01:55.434
And a lot of times we can solve
this problem with better tooling.

33
00:01:55.434 --> 00:01:56.000
And alot of times,

34
00:01:56.000 --> 00:01:59.230
if your tooling is failing you, there is
probably a solution out there for it.

35
00:01:59.230 --> 00:02:00.830
You don't have to accept that as a fate.

36
00:02:00.830 --> 00:02:04.020
But it's important to think about what
costs you're willing to take on and

37
00:02:04.020 --> 00:02:05.510
what trade offs you're willing to make.

38
00:02:05.510 --> 00:02:09.050
So let's look at just a few other babel
plug ins that are kind of, I think,

39
00:02:09.050 --> 00:02:12.150
interesting, useful considering what
we've talked about a little bit today.

40
00:02:13.170 --> 00:02:17.680
So this is babel
plugin-transform-react-remove-prop-types.

41
00:02:17.680 --> 00:02:24.110
React suggests, highly recommends that
you use prop types to make sure that

42
00:02:24.110 --> 00:02:27.390
the property is going to your component
are what you think they're gonna be?

43
00:02:27.390 --> 00:02:30.800
It's effectively a type system for
your react components, right.

44
00:02:30.800 --> 00:02:32.020
And it only works in development.

45
00:02:32.020 --> 00:02:35.600
When you go into production mode, react is
not gonna spend the time checking, right.

46
00:02:35.600 --> 00:02:36.730
It's only as you're developing.

47
00:02:36.730 --> 00:02:41.590
We don't wanna waste time on your users
computers to check all the stuff,

48
00:02:41.590 --> 00:02:43.630
and so it just gets totally skipped.

49
00:02:43.630 --> 00:02:46.500
But you're still sending that code, right.

50
00:02:46.500 --> 00:02:50.500
You know what would be faster than having
to parse and execute that code and

51
00:02:50.500 --> 00:02:51.246
then never use it?

52
00:02:51.246 --> 00:02:52.789
Not doing it.

53
00:02:52.789 --> 00:02:54.810
[LAUGH] Right?

54
00:02:54.810 --> 00:02:58.360
So what it does is it basically
goes through your code and

55
00:02:58.360 --> 00:03:00.710
strips it all out, right.

56
00:03:00.710 --> 00:03:03.840
And you can even say remove
the import statement, and

57
00:03:03.840 --> 00:03:09.270
it will remove that import
prop types from prop-types.

58
00:03:09.270 --> 00:03:12.820
Some libraries do need to use it, so
you can do this other weird stuff,

59
00:03:12.820 --> 00:03:15.860
which is like, hey, if we're not in
production than do these other things.

60
00:03:15.860 --> 00:03:17.740
But I have never needed that setting.

61
00:03:17.740 --> 00:03:19.490
And honestly,
this slide stresses me out, so

62
00:03:19.490 --> 00:03:21.617
I'm moving to the next one.

63
00:03:21.617 --> 00:03:25.591
&gt;&gt; Speaker 2:
babel-plugin-transform-react-pure-class-t-

64
00:03:25.591 --> 00:03:28.860
o-function
&gt;&gt; Steve: Which will take reaction

65
00:03:28.860 --> 00:03:32.360
components that are not
holding on to any state and

66
00:03:32.360 --> 00:03:34.530
turn them into that smaller syntax.

67
00:03:34.530 --> 00:03:38.280
Which in react 15 wasn't
any faster than react,

68
00:03:39.280 --> 00:03:43.630
than the class syntax, like class
whatever extends react duct component but

69
00:03:43.630 --> 00:03:46.520
may be faster in the future to execute,
because you don't have to go

70
00:03:46.520 --> 00:03:49.700
through the process of creating
a class and a prototype chain.

71
00:03:49.700 --> 00:03:53.120
Last I checked and
this will not always be true.

72
00:03:53.120 --> 00:03:55.710
Is that if you use a special
like shorter syntax for

73
00:03:55.710 --> 00:03:58.720
the functions, they just turned
it into classes under the hood.

74
00:03:58.720 --> 00:04:00.100
But that is not like a long term thing.

75
00:04:00.100 --> 00:04:02.260
Eventually they will be faster.

76
00:04:02.260 --> 00:04:05.700
And so what this does, is find some
component that only has a render method

77
00:04:05.700 --> 00:04:06.840
and doesn't hold onto any state.

78
00:04:08.380 --> 00:04:11.350
And turns it into one
that does not go ahead

79
00:04:11.350 --> 00:04:13.820
create a whole new class
of the prototype chain.

80
00:04:13.820 --> 00:04:17.050
We saw in that one example earlier
that that can be problematic,

81
00:04:17.050 --> 00:04:19.530
because remember when we had that
point and it was inside of a function,

82
00:04:19.530 --> 00:04:22.740
and we had these prototype chains and
things didn't go well?

83
00:04:22.740 --> 00:04:26.004
Right, we ended up shooting
up to 800 milliseconds or

84
00:04:26.004 --> 00:04:28.730
something like that compared to nine.

85
00:04:28.730 --> 00:04:32.364
Right, this will help you avoid
some of that some of the time.

86
00:04:32.364 --> 00:04:36.070
Right now,I don't think it'll have a big
effect but that's why you measure.

87
00:04:36.070 --> 00:04:38.300
But react 16 lays the foundation for

88
00:04:38.300 --> 00:04:43.080
this actually to be faster, I just don't
know if that is actually shipped yet.

89
00:04:43.080 --> 00:04:46.390
But if you're watching this later, this
could all be true, everything I'm saying.

90
00:04:46.390 --> 00:04:53.820
And if a component has state like the
Babble plugin does, absolutely nothing.

91
00:04:53.820 --> 00:04:55.690
So it's safe on your existing code.

92
00:04:55.690 --> 00:04:57.480
I used one transition.

93
00:04:57.480 --> 00:04:59.060
So it's cool,

94
00:04:59.060 --> 00:05:03.790
because again your code could potentially
become faster at execution time, right.

95
00:05:03.790 --> 00:05:06.570
We always think about compile time,
the size of sending over a wire, but

96
00:05:06.570 --> 00:05:09.940
also that code has to be parsed and
compiled and executed.

97
00:05:09.940 --> 00:05:11.510
And if we can make that code faster,

98
00:05:11.510 --> 00:05:13.800
that's not even a JavaScript
thing that will make it faster.

99
00:05:13.800 --> 00:05:17.940
That's a react thing
that will make it faster.

100
00:05:17.940 --> 00:05:21.600
Another one, this is kind of near and
dear to our hearts is transform or

101
00:05:21.600 --> 00:05:23.670
react inline elements.

102
00:05:23.670 --> 00:05:26.410
So what is this and why is it fast?

103
00:05:26.410 --> 00:05:30.020
It'll take something along those lines,
and this is what happens.

104
00:05:30.020 --> 00:05:33.500
You type this, because jsx isn't real,
I hit to break it to you, it's fake.

105
00:05:33.500 --> 00:05:36.470
You run it through babble and
this comes out the other end.

106
00:05:36.470 --> 00:05:40.510
It has a function that we call,
we pass it at div, className important and

107
00:05:40.510 --> 00:05:41.510
Hello World.

108
00:05:41.510 --> 00:05:44.110
None of these are dynamic, right.

109
00:05:44.110 --> 00:05:46.240
I don't need to call this
function repeatedly and

110
00:05:46.240 --> 00:05:49.510
pass it in a div with the same object and

111
00:05:49.510 --> 00:05:52.790
the same string in it, right,
if we're just making it h1 or whatever.

112
00:05:52.790 --> 00:05:56.380
So what would be faster than
calling this function repeatedly.

113
00:05:57.740 --> 00:05:58.540
All together now.

114
00:06:00.200 --> 00:06:01.440
What's faster than calling a function?

115
00:06:02.670 --> 00:06:03.690
Not calling a function, right.

116
00:06:03.690 --> 00:06:07.160
So I'll actually just turn it into
these very stressful objects.

117
00:06:07.160 --> 00:06:08.570
But this is not a function.

118
00:06:08.570 --> 00:06:10.240
And not calling a function is faster.

119
00:06:10.240 --> 00:06:13.090
Even if the object stresses you out,
this is your complied output.

120
00:06:13.090 --> 00:06:16.500
You never have to look at it,
it's going to be okay.

121
00:06:16.500 --> 00:06:19.490
So we can avoid calling a bunch
of functions and just turn out.

122
00:06:19.490 --> 00:06:21.550
This is what would have come
out of the function anyway.

123
00:06:21.550 --> 00:06:24.520
Let's do a compile time on
our computers as we build,

124
00:06:24.520 --> 00:06:28.310
rather than sending the function to all of
our users to make them repeatedly do it.

125
00:06:28.310 --> 00:06:32.290
Right, we'll just do it once now, we'll
send it off to all of them, it's fine,

126
00:06:32.290 --> 00:06:33.470
everyone's happy.

127
00:06:33.470 --> 00:06:37.550
We pay on our fancy computers,
it's a nanosecond of time.

128
00:06:37.550 --> 00:06:40.730
They never pay that time as it
rerenders over and over again, right?

129
00:06:40.730 --> 00:06:42.450
A lot of times this build
wasn't thinking about the fact

130
00:06:42.450 --> 00:06:44.470
that we compile our JavaScript beforehand,

131
00:06:44.470 --> 00:06:48.140
allows us to do some really powerful
things that benefit our users.

132
00:06:48.140 --> 00:06:50.642
Cool.

133
00:06:50.642 --> 00:06:53.801
Not doing something is faster than
doing it, and if you have to do it,

134
00:06:53.801 --> 00:06:57.660
you might as well only do it once,
at build time, on your computer.

135
00:06:57.660 --> 00:07:02.260
What actually comes out of that plugin is
actually a little bit grosser than that.

136
00:07:02.260 --> 00:07:06.100
This is really what happens but it's fine.

137
00:07:08.600 --> 00:07:11.270
Like it happens once, it's cool,
don't worry, don't ever look at that slide

138
00:07:11.270 --> 00:07:13.502
again, we're just gonna make
you believe it didn't happen.

139
00:07:13.502 --> 00:07:14.030
&gt;&gt; [LAUGH]

140
00:07:14.030 --> 00:07:14.616
&gt;&gt; Steve: And finally

141
00:07:14.616 --> 00:07:18.897
plugin-transform-react-constant -elements,
and like these exist for react,

142
00:07:18.897 --> 00:07:23.481
if you're an Angular user, an user, there
are things that exist like this for you.

143
00:07:23.481 --> 00:07:25.800
I'm just not qualified
to speak about them,

144
00:07:25.800 --> 00:07:28.496
which is there are parts
in here that don't change.

145
00:07:28.496 --> 00:07:31.590
Remember how we saw scoping can
actually make a difference?

146
00:07:31.590 --> 00:07:34.280
We saw lazy parsing versus eager parsing.

147
00:07:34.280 --> 00:07:38.170
We saw that, yeah, just having stuff
in the wrong scope can cause these big

148
00:07:38.170 --> 00:07:40.500
problems and
like every time we call render.

149
00:07:40.500 --> 00:07:44.830
Again, remember that h1 isn't really
an h1, it's a react.create element h1,

150
00:07:44.830 --> 00:07:48.300
whatever properties are in there,
whatever the string is.

151
00:07:48.300 --> 00:07:52.480
And that's a function that we're calling
every single time we call render.

152
00:07:52.480 --> 00:07:53.230
Is it ever changing?

153
00:07:54.480 --> 00:07:55.760
Why are we doing this?

154
00:07:55.760 --> 00:07:56.260
Right?

155
00:07:56.260 --> 00:08:00.390
Because it's easy for us to write,
and sometimes code that is easily

156
00:08:00.390 --> 00:08:03.480
readable by you, future you who is
the most important developer ever.

157
00:08:03.480 --> 00:08:05.880
If you ever get blamed something,
it's always you six months ago.

158
00:08:05.880 --> 00:08:07.710
You know about the difference
between current you and

159
00:08:07.710 --> 00:08:09.670
future you, and
how important future you is.

160
00:08:09.670 --> 00:08:12.430
It's important to write writable code,
right.

161
00:08:12.430 --> 00:08:16.280
We could extract this and do a bunch of
micro-optimizations to make it faster, or

162
00:08:16.280 --> 00:08:18.960
we can have our tools just basically
hoist that stuff up for us at build time.

163
00:08:18.960 --> 00:08:23.310
All right so now we're just
gonna use ref and ref2, that

164
00:08:23.310 --> 00:08:27.048
will run those functions once, and if you
imagine you start combining all of these,

165
00:08:27.048 --> 00:08:32.440
they start to pile on top of each
other with their incremental gains.

166
00:08:32.440 --> 00:08:33.850
Okay, now we have these functions, but

167
00:08:33.850 --> 00:08:37.220
what if we turn those into the objects
with the other plugin, right?

168
00:08:37.220 --> 00:08:40.510
We could begin to do more, and
we don't actually have to do anything.

169
00:08:40.510 --> 00:08:43.940
We just install a bunch of plugins and
let other people's hard work do it for us.

170
00:08:43.940 --> 00:08:46.420
We benefit because we get
to keep readable code.

171
00:08:46.420 --> 00:08:49.410
Our users benefit because they're not
executing code they don't need to.

