WEBVTT

1
00:00:00.000 --> 00:00:02.296
&gt;&gt; Speaker 1: It's
called layout thrashing.

2
00:00:02.296 --> 00:00:06.418
The real term is forced
synchronous layout.

3
00:00:06.418 --> 00:00:08.811
We're gonna call it layout thrashing,
because let's see really cool.

4
00:00:08.811 --> 00:00:12.864
Let's be really honest like when you have
one thing called layout thrashing and

5
00:00:12.864 --> 00:00:15.346
another one called forced
synchronous layout,

6
00:00:15.346 --> 00:00:17.482
you choose layout thrashing every time.

7
00:00:17.482 --> 00:00:22.038
So there's a set of things you can do that
cause the browser to stop and calculate

8
00:00:22.038 --> 00:00:26.470
style, and layout, and as we saw like
asking about it is one of those things.

9
00:00:26.470 --> 00:00:29.955
This is some code from my
application where I just literally

10
00:00:29.955 --> 00:00:32.532
did the first possible
thing in the editor,

11
00:00:32.532 --> 00:00:36.420
which we have a button module
like the call to action button.

12
00:00:36.420 --> 00:00:40.413
And I hit a recording, I dragged it in and
I stopped the recording.

13
00:00:40.413 --> 00:00:44.198
Cuz my whole plan was to like kick around,
they have a lot to find an example and

14
00:00:44.198 --> 00:00:46.072
a real world application to show you.

15
00:00:46.072 --> 00:00:49.603
Turned out, it was literally
the first thing that I did.

16
00:00:49.603 --> 00:00:53.633
You can see that like if
Chrome can detect it,

17
00:00:53.633 --> 00:00:57.463
it will put a little
red triangle up there.

18
00:00:57.463 --> 00:00:59.443
And like basically tell you, hey,

19
00:00:59.443 --> 00:01:02.552
a fourth reflow is a likely
performance of bottle neck.

20
00:01:02.552 --> 00:01:04.211
It's like I caught you doing this.

21
00:01:04.211 --> 00:01:06.175
I think you should know about it and

22
00:01:06.175 --> 00:01:09.031
you can kind of like see
all of that stuff in place.

23
00:01:09.031 --> 00:01:12.834
So like even in a large application like
they was literally the first thing that I

24
00:01:12.834 --> 00:01:15.583
tried, it wasn't like I went looking for
a pagery flow.

25
00:01:15.583 --> 00:01:20.073
I did go looking for a pagery flow.

26
00:01:20.073 --> 00:01:23.550
It saved me a bunch of work [LAUGH]
by finding it immediately, but

27
00:01:23.550 --> 00:01:26.647
it didn't help my moral
authority talking about this.

28
00:01:26.647 --> 00:01:30.669
But it was the very first
thing that I found in there.

29
00:01:30.669 --> 00:01:32.371
So one of the kind of definitions,

30
00:01:32.371 --> 00:01:37.250
layout thrashing occurs when JavaScript
violently, that's why I picked this quote.

31
00:01:37.250 --> 00:01:41.490
Writes, then reads from the DOM multiple
times, causing document reflows.

32
00:01:41.490 --> 00:01:46.912
So yeah, every time we read like we have
to figure out the size of everything.

33
00:01:46.912 --> 00:01:51.581
And then once it gets the most up to date
information, maybe just reads it once.

34
00:01:51.581 --> 00:01:52.610
Cool, no big deal.

35
00:01:53.930 --> 00:01:58.862
The problem is the browser is smart,
you're like what kind of problem is that?

36
00:01:58.862 --> 00:02:00.284
If you change a bunch of stuff,

37
00:02:00.284 --> 00:02:04.293
the browser kind of like remember we
said like budging manipulation was good.

38
00:02:04.293 --> 00:02:07.552
The browsers effectively
trying to do that, as well.

39
00:02:07.552 --> 00:02:08.881
You can change a whole bunch of staff.

40
00:02:08.881 --> 00:02:13.743
The browsers like I don't make new frames
until like every 16 milliseconds like

41
00:02:13.743 --> 00:02:15.091
let them have that it.

42
00:02:15.091 --> 00:02:20.080
When I'm getting ready to draw the next
frame, I'm gonna forgot what change,

43
00:02:20.080 --> 00:02:21.722
then I relayout the page.

44
00:02:21.722 --> 00:02:24.180
The problem that you have
here is we changed something.

45
00:02:24.180 --> 00:02:27.141
And we measure it,
we change something and we measure it.

46
00:02:27.141 --> 00:02:30.259
Like the browser doesn't know,
it wants to get you,

47
00:02:30.259 --> 00:02:33.462
it doesn't want to give what
the width was of that bar.

48
00:02:33.462 --> 00:02:36.575
Last time it rendered,
you changed something.

49
00:02:36.575 --> 00:02:39.143
It wants to get you the most
up to date information,

50
00:02:39.143 --> 00:02:42.260
cuz that box might not be
where you think it is anymore.

51
00:02:42.260 --> 00:02:47.323
So every time you measure, if anything has
changed from the last time you measured,

52
00:02:47.323 --> 00:02:51.832
the browser has to go through and like
figure out the new state of the world.

53
00:02:51.832 --> 00:02:54.081
Sure, is that not great?

54
00:02:54.081 --> 00:02:58.573
Obviously, but
where it became a problem was in a loop.

55
00:02:58.573 --> 00:02:59.363
We checked, we changed.

56
00:02:59.363 --> 00:03:00.360
We checked, we changed.

57
00:03:00.360 --> 00:03:03.632
Which caused we recalculate style lay out,
recalculate style lay out.

58
00:03:03.632 --> 00:03:07.979
Whenever you kind of see that pattern in
there like sometimes you are iterating and

59
00:03:07.979 --> 00:03:11.705
it's natural, but you saw that for
h was like one long block in there.

60
00:03:11.705 --> 00:03:16.003
When you see those patterns and you notice
you're blowing through the 16 milliseconds

61
00:03:16.003 --> 00:03:17.617
for a frame, you have a problem.

62
00:03:17.617 --> 00:03:22.681
And if Chrome like goes as far as to give
you the little red thing in that case,

63
00:03:22.681 --> 00:03:25.056
you truly know you have a problem and

64
00:03:25.056 --> 00:03:28.402
this is kind of one of
the first things to look for.

65
00:03:28.402 --> 00:03:32.796
So yeah, the browser basically wants to
figure out if it has to get new updated

66
00:03:32.796 --> 00:03:36.253
layout information after every
time you change something.

67
00:03:36.253 --> 00:03:38.182
You asked it for stuff, it didn't know.

68
00:03:38.182 --> 00:03:39.053
It tried to figure it out.

69
00:03:39.053 --> 00:03:42.541
So it stopped, it reflowed the page and
got you the information.

70
00:03:42.541 --> 00:03:44.092
So how do we solve this?

71
00:03:44.092 --> 00:03:47.727
Well, we saw a solution
in the code before.

72
00:03:47.727 --> 00:03:51.015
If you separate all the reading
from all the writing,

73
00:03:51.015 --> 00:03:53.802
you should be good like
read a bunch of times.

74
00:03:53.802 --> 00:03:57.630
Don't change the page, get all of the
information you need, then go ahead and

75
00:03:57.630 --> 00:03:58.681
do the page changes.

76
00:03:58.681 --> 00:04:02.732
So like the first code in a loop
would've triggered layout threshing.

77
00:04:02.732 --> 00:04:04.647
The second one, we read a bunch and

78
00:04:04.647 --> 00:04:08.530
then we write a bunch like
based on that information.

79
00:04:08.530 --> 00:04:11.560
It is going to be performing for us.

