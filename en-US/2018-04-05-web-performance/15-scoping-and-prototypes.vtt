WEBVTT

1
00:00:00.048 --> 00:00:03.409
&gt;&gt; Steve: So let's do one other
thing to play around with.

2
00:00:03.409 --> 00:00:07.210
It'll be like our kind of second to last
science experiment just in the land of

3
00:00:07.210 --> 00:00:08.850
the JavaScript browser engine.

4
00:00:09.920 --> 00:00:11.560
Let's try something else.

5
00:00:14.860 --> 00:00:19.226
&gt;&gt; Steve: It turns out that how you scope
your JavaScript can have some important

6
00:00:19.226 --> 00:00:21.450
implications into how things run.

7
00:00:21.450 --> 00:00:24.570
Let’s go back to our
good friend benchmark.

8
00:00:27.230 --> 00:00:31.750
I’m gonna make a little test function just
cuz there’s a lot of stuff happening.

9
00:00:33.880 --> 00:00:39.360
We’ll have our test function,
all right, neat.

10
00:00:39.360 --> 00:00:44.691
We’ll say like it'll take a point and

11
00:00:44.691 --> 00:00:50.532
it'll add its x and its y, I don't know.

12
00:00:50.532 --> 00:00:55.684
point.x + point.y,

13
00:00:55.684 --> 00:01:00.321
and we'll go ahead,

14
00:01:00.321 --> 00:01:08.726
make that x and y, so this.x = x.

15
00:01:08.726 --> 00:01:14.610
This.y = y, very cool.

16
00:01:14.610 --> 00:01:19.950
And then in this function,
we'll make a new point.

17
00:01:27.000 --> 00:01:29.450
&gt;&gt; Steve: And we'll add the x and
y at the point.

18
00:01:29.450 --> 00:01:36.420
All right, make an object,
it's got an x and y, create one of them.

19
00:01:36.420 --> 00:01:37.130
We'll add them together.

20
00:01:38.980 --> 00:01:40.330
&gt;&gt; Steve: So we'll go in here.

21
00:01:41.690 --> 00:01:46.745
And we'll just say,
call that test function every time.

22
00:01:46.745 --> 00:01:50.060
I don't wanna measure me
making the whole thing.

23
00:01:50.060 --> 00:01:53.090
I'm just gonna run it
in the exercise part.

24
00:01:53.090 --> 00:01:56.209
And not to ruin the surprise, but I'm
gonna turn this number down a little bit.

25
00:02:02.235 --> 00:02:07.661
&gt;&gt; Steve: 800 milliseconds,
that seems like quite

26
00:02:07.661 --> 00:02:14.084
a bit considering I had that
much larger iteration for

27
00:02:14.084 --> 00:02:18.950
just adding 2 things, and it was 47.

28
00:02:18.950 --> 00:02:24.003
I think this would go for
about eight seconds,

29
00:02:24.003 --> 00:02:27.260
if I let it really go for it.

30
00:02:27.260 --> 00:02:28.830
That seems unacceptable.

31
00:02:28.830 --> 00:02:30.800
And it’s like weird to me, right?

32
00:02:30.800 --> 00:02:31.480
How is this that much different?

33
00:02:31.480 --> 00:02:33.830
I don’t know.

34
00:02:33.830 --> 00:02:34.590
I’ve measured.

35
00:02:34.590 --> 00:02:35.640
I know that it’s bad.

36
00:02:35.640 --> 00:02:36.630
I’m just gonna move some code around.

37
00:02:36.630 --> 00:02:37.130
Don’t mind me.

38
00:02:38.470 --> 00:02:41.460
Let's go ahead and
put this up here, right?

39
00:02:41.460 --> 00:02:43.360
I don't need to define
the class in every iteration.

40
00:02:46.330 --> 00:02:53.220
&gt;&gt; Steve: Nine milliseconds,
[LAUGH] that's a wee bit faster.

41
00:02:53.220 --> 00:03:00.980
Okay, now one would argue, well,
you are creating a class in every run.

42
00:03:00.980 --> 00:03:05.520
I don't think that's what got me
from 9 milliseconds to 800, right?

43
00:03:05.520 --> 00:03:10.650
It seems like there might be
something else going on here.

44
00:03:10.650 --> 00:03:14.130
And so I have some suspicions.

45
00:03:14.130 --> 00:03:16.520
So what I'm gonna do is I'm
gonna just try one more thing.

46
00:03:16.520 --> 00:03:18.980
Remember when I was
comparing all those types?

47
00:03:18.980 --> 00:03:21.297
I wanna try one other thing.

48
00:03:21.297 --> 00:03:25.896
I'm gonna go ahead and
I'm gonna grab this point and

49
00:03:25.896 --> 00:03:28.830
bring it back to the classes one.

50
00:03:28.830 --> 00:03:30.590
I'm gonna do some science here.

51
00:03:30.590 --> 00:03:32.300
I had it already, that's great.

52
00:03:32.300 --> 00:03:38.000
So in the other case,
I was making one of these

53
00:03:38.000 --> 00:03:40.960
inside the test function, and
the other one I had it up a scope.

54
00:03:40.960 --> 00:03:45.400
I had it the same point class,
I wasn't rewriting it all the time.

55
00:03:45.400 --> 00:03:48.870
So I've run this code,
I know that these are the same type.

56
00:03:48.870 --> 00:03:50.320
What if I had a,

57
00:03:58.622 --> 00:04:00.640
&gt;&gt; Steve: We'll return a new point.

58
00:04:05.963 --> 00:04:08.650
&gt;&gt; Steve: And we'll say make a point.

59
00:04:13.935 --> 00:04:15.410
&gt;&gt; Steve: And we'll say make a point.

60
00:04:19.920 --> 00:04:21.650
&gt;&gt; Steve: And
we'll see if they have the same map.

61
00:04:23.690 --> 00:04:28.061
&gt;&gt; Steve: They don't, but they were made
from the same infrastructure that worked

62
00:04:28.061 --> 00:04:29.780
last time, right?

63
00:04:29.780 --> 00:04:30.580
We saw it.

64
00:04:30.580 --> 00:04:32.010
I'm not losing it, right?

65
00:04:32.010 --> 00:04:37.570
We saw that when I used the point class
last time that they were the same.

66
00:04:39.110 --> 00:04:41.600
And now I'm doing it inside this
function and they're different.

67
00:04:41.600 --> 00:04:42.858
Also, it's way slower.

68
00:04:42.858 --> 00:04:44.910
Like 9 milliseconds versus 800.

69
00:04:44.910 --> 00:04:48.950
Any guesses?

70
00:04:48.950 --> 00:04:54.570
When we make the point inside of a
function, it's not parsing, theoretically.

71
00:04:54.570 --> 00:04:56.910
We are doing it every time, that is true.

72
00:04:56.910 --> 00:04:58.700
But it's not the parsing
making the big difference.

73
00:05:00.300 --> 00:05:04.020
We're making this class as a different
prototype chain every time, right,

74
00:05:04.020 --> 00:05:06.900
which means that each one of these
points that come out of here points to

75
00:05:06.900 --> 00:05:08.640
a different prototype object.

76
00:05:08.640 --> 00:05:12.880
We're making a fresh point function
every time, so on and so forth.

77
00:05:12.880 --> 00:05:16.560
And we can see that this little, tiny
difference in where I've put that code

78
00:05:18.280 --> 00:05:21.500
clearly had dramatic effects
on how slow my code was.

79
00:05:21.500 --> 00:05:24.910
9 milliseconds, 800 milliseconds, right?

80
00:05:24.910 --> 00:05:28.470
Now, does this mean that during lunch
today we go through our code bases and

81
00:05:28.470 --> 00:05:31.180
we look for every time I've got
a class inside another function?

82
00:05:31.180 --> 00:05:33.810
No, but it does notice you open up

83
00:05:33.810 --> 00:05:36.860
your web application while it's
running in production mode.

84
00:05:36.860 --> 00:05:39.880
You go later and see, you run
the performance thing, you're like, wow,

85
00:05:39.880 --> 00:05:42.930
that's taking a really long time, right?

86
00:05:42.930 --> 00:05:44.580
Then, you begin to spelunk in there.

87
00:05:44.580 --> 00:05:48.206
And at least you can have some hypotheses
about how this stuff actually works, so

88
00:05:48.206 --> 00:05:50.830
that you're not just throwing
stuff at the wall, right?

89
00:05:50.830 --> 00:05:54.420
I know that if I'm making stuff inside of
a function it can have a different chain,

90
00:05:54.420 --> 00:05:58.520
I know if they went through different
paths to get to the same object,

91
00:05:58.520 --> 00:06:00.110
that can be the problem, right?

92
00:06:00.110 --> 00:06:03.554
Do not speculatively go through your
code base and do this everywhere.

93
00:06:03.554 --> 00:06:06.590
But I'm like,
this is taking too long to load.

94
00:06:06.590 --> 00:06:09.060
Or like I see the little
red triangle there.

95
00:06:09.060 --> 00:06:11.970
Or I see that I'm pegging the CPU or
something along those lines.

96
00:06:11.970 --> 00:06:17.195
Now, yes, we have some hypotheses
on what's happening here, right?

97
00:06:17.195 --> 00:06:18.975
We haven't even touched
the browser land yet,

98
00:06:18.975 --> 00:06:20.995
which can have a whole bunch
of other implications.

99
00:06:20.995 --> 00:06:24.285
But we do know that not all
JavaScript is created equal.

100
00:06:24.285 --> 00:06:28.555
And we know that how our code is
structured can have some pretty dramatic

101
00:06:28.555 --> 00:06:29.990
impacts on that.

102
00:06:29.990 --> 00:06:36.625
We're gonna look at one more now,
one more thing that turbofan does to you.

103
00:06:36.625 --> 00:06:40.175
And the good news is it's like,
hey, it does this thing for

104
00:06:40.175 --> 00:06:44.507
me and it just works out most of
the time and everything is great, right?

105
00:06:44.507 --> 00:06:47.590
There's no action item for you,
which is big relief after,

106
00:06:47.590 --> 00:06:51.720
I have to worry about scoping and how my
objects are made and all that kinda stuff.

107
00:06:51.720 --> 00:06:54.740
So this next one'll be
a little bit more fun.

108
00:06:54.740 --> 00:06:57.040
Fun is a strong word when we're
talking about JavaScript compilers.

109
00:06:58.440 --> 00:07:02.260
So, yeah, but the takeaways from
the previous section, turbofan is able to

110
00:07:02.260 --> 00:07:06.080
optimize your code in substantial ways
if you pass it consistent values.

111
00:07:06.080 --> 00:07:08.420
So what does that really mean for us?

112
00:07:08.420 --> 00:07:11.270
If you can have a function that
creates the object, rather

113
00:07:11.270 --> 00:07:15.270
than you doing it by hand every time,
if you're always making a object literal,

114
00:07:15.270 --> 00:07:18.480
yes, you could type the curly braces and
the properties, right?

115
00:07:18.480 --> 00:07:21.634
But if you know if you're using a lot, it
might make sense to make a function that

116
00:07:21.634 --> 00:07:24.480
gives you a consistent object that
was created the same way every time.

117
00:07:24.480 --> 00:07:27.360
And that way,
you don't have to think about this.

118
00:07:27.360 --> 00:07:31.280
Every moment you're thinking about all
the stuff that we just kinda talked about,

119
00:07:31.280 --> 00:07:35.550
it's like you probably have some changes
you need to make in the architecture

120
00:07:35.550 --> 00:07:37.040
of your code.

121
00:07:37.040 --> 00:07:38.920
And try not to modify them after the fact.

122
00:07:38.920 --> 00:07:42.070
Maybe it makes sense to make a new
object that gets created the same way.

123
00:07:42.070 --> 00:07:46.070
Cuz that will have the same map as
all the other objects made that way.

124
00:07:46.070 --> 00:07:50.141
But probably the real easy way to do
this is we all get really happy about

125
00:07:50.141 --> 00:07:53.320
TypeScript or Flow and like,
yeah, I'm gonna do it.

126
00:07:53.320 --> 00:07:56.200
And then I have to make a type and
I don't understand TypeScript or Flow and

127
00:07:56.200 --> 00:07:57.460
I say to myself, you know what?

128
00:07:57.460 --> 00:07:58.440
I'm just writing this in JavaScript.

129
00:07:58.440 --> 00:08:01.220
It's not worth it for me, [LAUGH] right?

130
00:08:01.220 --> 00:08:05.800
There are certain advantages that these
systems above avoiding runtime errors and

131
00:08:05.800 --> 00:08:09.790
stuff like that, there are things to
do that the optimizer can get ready for

132
00:08:09.790 --> 00:08:15.164
if you follow this code of ethics by
having the same types all the time, right?

133
00:08:15.164 --> 00:08:19.690
So most of the answers here are either
measure and see what's happening and,

134
00:08:19.690 --> 00:08:22.270
hopefully, you're a little bit
better at making hypotheses now.

135
00:08:22.270 --> 00:08:24.843
Or, b, the point I'm gonna end
with at the end of the day is,

136
00:08:24.843 --> 00:08:27.600
be great if we could just have
tools do this stuff for us, right?

137
00:08:27.600 --> 00:08:29.480
That is ultimately the right answer.

