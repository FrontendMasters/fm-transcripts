WEBVTT

1
00:00:00.014 --> 00:00:03.620
&gt;&gt; Steve Kinney: So yeah, basically
optimize-js tries to figure out ways to do

2
00:00:03.620 --> 00:00:05.600
things that would have been lazy.

3
00:00:05.600 --> 00:00:07.956
And then eager parsed,
to just skip to the eager parsing,

4
00:00:07.956 --> 00:00:09.315
because doing it once is faster.

5
00:00:09.315 --> 00:00:12.142
So we can grab some different libraries,

6
00:00:12.142 --> 00:00:15.676
pull in jQuery.
&gt;&gt; Steve Kinney: And

7
00:00:15.676 --> 00:00:20.430
you can see that without optimize,
it took 16 milliseconds to parse.

8
00:00:20.430 --> 00:00:24.970
With optimize, we shaved a millisecond
off, or almost two milliseconds off.

9
00:00:24.970 --> 00:00:29.820
You can grab Lodash,
again two milliseconds.

10
00:00:29.820 --> 00:00:35.980
And if we're aiming for getting everything
on the screen, this is one library, right?

11
00:00:35.980 --> 00:00:38.940
It could be really useful to go ahead and

12
00:00:38.940 --> 00:00:41.080
every one of these milliseconds
that we shave off is important.

13
00:00:41.080 --> 00:00:47.537
This is not even our application code yet.
&gt;&gt; Steve Kinney: ThreeJS

14
00:00:47.537 --> 00:00:52.114
is 5 milliseconds faster, right?

15
00:00:52.114 --> 00:00:54.930
So you were like, yeah,
use it all the time, right?

16
00:00:54.930 --> 00:00:57.610
But these are, again,
contrived examples, right?

17
00:00:57.610 --> 00:00:59.110
Did anyone try it in other browsers?

18
00:01:00.110 --> 00:01:03.970
What was some of your findings?
&gt;&gt; Student: Chrome is way faster with

19
00:01:03.970 --> 00:01:06.870
jQuery than Firefox.
&gt;&gt; Steve Kinney: Yeah, each one is

20
00:01:06.870 --> 00:01:09.550
implemented differently, and there's some
different decisions that are made there.

21
00:01:10.790 --> 00:01:14.340
And so it's important to not be
the person only testing Chrome, but

22
00:01:14.340 --> 00:01:16.950
to look at other browsers as well.

23
00:01:16.950 --> 00:01:19.990
Because this is where some of
the performance stuff with the measuring

24
00:01:19.990 --> 00:01:22.120
becomes incredibly important.

25
00:01:22.120 --> 00:01:26.250
So if we take a bunch of libraries,
and we run it through,

26
00:01:26.250 --> 00:01:29.180
we can see that In Chrome 55.

27
00:01:29.180 --> 00:01:33.200
Generally speaking there is
a noticeable improvement across most of

28
00:01:33.200 --> 00:01:33.900
the applications.

29
00:01:33.900 --> 00:01:36.940
You're like, ship it, yeah, let's put
it in our Webpack build pipeline.

30
00:01:36.940 --> 00:01:39.283
Everything's great,
this is gonna be wonderful,

31
00:01:39.283 --> 00:01:42.271
use it everywhere.
&gt;&gt; Steve Kinney: But

32
00:01:42.271 --> 00:01:47.700
the story across libraries is not as
straightforward on Edge 14, right?

33
00:01:48.970 --> 00:01:55.575
We can see that, yeah, ImmutableJS,
there's a 30% improvement,

34
00:01:55.575 --> 00:02:01.650
but if you're using PouchDB,
well it's 32% slower, right?

35
00:02:01.650 --> 00:02:05.110
And if we just follow these rules,
put these parentheses everywhere.

36
00:02:05.110 --> 00:02:06.470
You could be making applications slower.

37
00:02:06.470 --> 00:02:07.960
You can be making applications faster,

38
00:02:07.960 --> 00:02:10.440
so that's why it's really
important to measure.

39
00:02:10.440 --> 00:02:15.207
We get a slightly different story if
we look in Safari where it's almost

40
00:02:15.207 --> 00:02:17.836
universally a bad idea, [LAUGH] right?

41
00:02:17.836 --> 00:02:20.760
In most cases it is making stuff slower.

42
00:02:20.760 --> 00:02:26.035
That comes down to the implementation
details of all of these browsers, right?

43
00:02:26.035 --> 00:02:26.907
And so again,

44
00:02:26.907 --> 00:02:32.120
the kind of moral of the story here is to
make sure that you're measuring, right?

45
00:02:32.120 --> 00:02:35.580
And looking to see what the actual impacts
and implications of these things are.

46
00:02:35.580 --> 00:02:39.590
Rather than just following
some rule that I told you, or

47
00:02:39.590 --> 00:02:40.790
something along those lines.

48
00:02:40.790 --> 00:02:42.940
Treat me with a healthy
dose of skepticism, and

49
00:02:42.940 --> 00:02:44.915
every word that's coming out of my mouth,
right?

50
00:02:44.915 --> 00:02:48.712
[LAUGH] Take those words,
measure them against your application,

51
00:02:48.712 --> 00:02:50.937
then make a decision.
&gt;&gt; Student2: Can I ask a quick question?

52
00:02:50.937 --> 00:02:51.826
&gt;&gt; Steve Kinney: Yeah.

53
00:02:51.826 --> 00:02:52.647
&gt;&gt; Student2: When we're doing

54
00:02:52.647 --> 00:02:55.140
function declarations and
wrapping them in parens.

55
00:02:55.140 --> 00:03:00.028
If you're using a function expression
instead does that make a difference here?

56
00:03:00.028 --> 00:03:00.560
&gt;&gt; Steve Kinney: I think,

57
00:03:00.560 --> 00:03:03.156
I reserve the right to
be wrong about this, but

58
00:03:03.156 --> 00:03:05.828
I believe that those
are also still lazy parts.

59
00:03:05.828 --> 00:03:08.785
But IFFEs, for instance, those
immediately invoked function expressions,

60
00:03:08.785 --> 00:03:11.093
we wrap them in the parentheses,
and immediately call them.

61
00:03:11.093 --> 00:03:14.519
Those, for instance, are eagerly
parsed right out of the box, right?

62
00:03:14.519 --> 00:03:17.269
So there is different use cases,
and the other kind of again

63
00:03:17.269 --> 00:03:20.736
disclaimer that I'm gonna make now is
a lot of these rules change, right?

64
00:03:20.736 --> 00:03:23.690
The Chrome team is working on
making this stuff better, right?

65
00:03:23.690 --> 00:03:26.390
Which is why measure early,
measure often, right?

66
00:03:26.390 --> 00:03:29.796
When we get to the actual
compiling engine and

67
00:03:29.796 --> 00:03:33.320
the optimizations that it makes, right?

68
00:03:33.320 --> 00:03:36.836
That's a moving target, right,
there are things that are slow now,

69
00:03:36.836 --> 00:03:38.452
when ES6 originally came out.

70
00:03:38.452 --> 00:03:42.250
All of the ES6 stuff that was for
the browser was slower than the ES5 stuff.

71
00:03:42.250 --> 00:03:46.040
So it would be very easy to
,read a blog post then and

72
00:03:46.040 --> 00:03:48.640
believe that ES6 was inherently slower.

73
00:03:48.640 --> 00:03:52.390
It was slower because browser
inventors had ten years to optimize.

74
00:03:52.390 --> 00:03:55.240
And figure out all the edge cases for
the ES5 stuff and

75
00:03:55.240 --> 00:03:57.560
the ES6 stuff was brand new, right?

76
00:03:57.560 --> 00:04:00.840
Three years later,
that is not true anymore right?

77
00:04:00.840 --> 00:04:03.710
Because the browser vendors
are attempting to get better and

78
00:04:03.710 --> 00:04:05.090
faster with these things.

79
00:04:05.090 --> 00:04:07.730
So generally speaking,
all these things are a moving target.

80
00:04:07.730 --> 00:04:11.820
And that's why I keep saying measure
almost a beat in between every slide.

81
00:04:13.090 --> 00:04:17.540
If you did want to use this,
if your research goes well.

82
00:04:17.540 --> 00:04:20.390
And you can see that you have
performance gains across the board.

83
00:04:20.390 --> 00:04:21.950
There are also Webpack plugins,

84
00:04:21.950 --> 00:04:25.020
we can just insert this into
your build pipeline as well.

85
00:04:26.620 --> 00:04:27.795
Just some other quick,

86
00:04:27.795 --> 00:04:32.552
tasty notes on parsing.
&gt;&gt; Steve Kinney: Whenever we have

87
00:04:32.552 --> 00:04:35.415
a function that is inside
of another function,

88
00:04:35.415 --> 00:04:39.400
that is effectively always going
to be lazily parsed, right?

89
00:04:39.400 --> 00:04:44.540
So if we move that out, it can get
parsed in a separate take on it,

90
00:04:44.540 --> 00:04:47.880
in this case it will get
better performance right?

91
00:04:47.880 --> 00:04:51.480
You can argue does that mean,
let's take a 15 minute break,

92
00:04:51.480 --> 00:04:55.210
you go through your giant code base and
refactor everything?

93
00:04:55.210 --> 00:04:57.240
Probably not, there are tools
that can help you with this,

94
00:04:57.240 --> 00:05:01.000
that we'll cover at the end, but again,
just something to kinda think about.

