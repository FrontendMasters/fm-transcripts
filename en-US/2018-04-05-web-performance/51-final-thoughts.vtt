WEBVTT

1
00:00:03.760 --> 00:00:07.885
&gt;&gt; Steve Kinney: Closing thoughts,
recommendations, and future research.

2
00:00:07.885 --> 00:00:11.515
[LAUGH] Hey, remember this tip, just
make sure your app is in production mode

3
00:00:11.515 --> 00:00:14.010
whatever that means for your framework.

4
00:00:14.010 --> 00:00:17.240
Cuz there's a lot of actual stuff
that happens in development mode that

5
00:00:17.240 --> 00:00:18.840
makes your life easier.

6
00:00:18.840 --> 00:00:22.250
That like there is no reason and I say
this cuz like I have accidentally shoot my

7
00:00:22.250 --> 00:00:24.338
own app and
development [INAUDIBLE] before.

8
00:00:24.338 --> 00:00:26.390
I've gone to visit a production going,
why is it orange?

9
00:00:27.510 --> 00:00:30.720
I got to him like order of
web pack flagging is wrong.

10
00:00:30.720 --> 00:00:32.920
Like I said to production
environment after I ran [INAUDIBLE].

11
00:00:32.920 --> 00:00:37.010
So it was already [INAUDIBLE] knows
all the checks were stripped out and

12
00:00:37.010 --> 00:00:40.110
then I set production mode right?

13
00:00:40.110 --> 00:00:44.140
So definitely, it matters so

14
00:00:44.140 --> 00:00:48.790
much, right,
that it's worth repeating one more time.

15
00:00:48.790 --> 00:00:50.170
So yeah, doesn't react.

16
00:00:50.170 --> 00:00:52.670
It takes up PropTypes,
takes all the helpful warnings,

17
00:00:52.670 --> 00:00:54.940
doesn't do performance metrics.

18
00:00:54.940 --> 00:00:56.170
It's just generally speaking.

19
00:00:56.170 --> 00:01:00.100
And if you think you have a performance
problem as you're developing code.

20
00:01:00.100 --> 00:01:03.900
Build it for production first, and
see if you still have a problem.

21
00:01:03.900 --> 00:01:07.840
I have lost days of my life,
that I will never get back,

22
00:01:07.840 --> 00:01:12.110
tracking down performance
problems that didn't exist.

23
00:01:12.110 --> 00:01:13.950
They only existed in development.

24
00:01:13.950 --> 00:01:16.530
You go and you look, and
they're not there, right?

25
00:01:16.530 --> 00:01:19.725
That's why I'm repeating this one, because
don't be like that, keep those days.

26
00:01:19.725 --> 00:01:22.120
[LAUGH] Don't go down.

27
00:01:22.120 --> 00:01:24.500
I have the scar tissue here for you.

28
00:01:24.500 --> 00:01:25.900
You don't have to do this.

29
00:01:25.900 --> 00:01:27.280
I'm saying this enough times so

30
00:01:27.280 --> 00:01:30.810
that 20 minutes into debugging you'll
be like, have I built for production?

31
00:01:30.810 --> 00:01:33.040
Let me built for production and
see if that's a thing.

32
00:01:33.040 --> 00:01:35.580
And if I can save one person
an hour at some point

33
00:01:35.580 --> 00:01:37.650
I'm going to call this entire thing a win.

34
00:01:37.650 --> 00:01:40.930
You see it's orange when
you're in production mode.

35
00:01:40.930 --> 00:01:45.260
It's black when you are in
orange in development mode,

36
00:01:45.260 --> 00:01:46.790
black in production mode.

37
00:01:46.790 --> 00:01:49.660
Like with this help for
error message if you click on it.

38
00:01:49.660 --> 00:01:51.350
Whatever your framework of choice is,

39
00:01:51.350 --> 00:01:55.125
likely has a different tool like this
just make sure that you're using it.

40
00:01:55.125 --> 00:02:00.355
Cool, so web performance is a giant topic,
like more than a one-day topic.

41
00:02:00.355 --> 00:02:04.500
And there's a lot of things that
we didn't get to talk about today.

42
00:02:04.500 --> 00:02:09.215
Server-side rendering is this idea that
your JavaScript takes time to parse.

43
00:02:09.215 --> 00:02:10.215
It takes time to leg load.

44
00:02:10.215 --> 00:02:11.785
What if you sent them a regular,

45
00:02:11.785 --> 00:02:15.315
old HTML page and
then you got everything else loaded?

46
00:02:15.315 --> 00:02:17.100
Now, depending on your application,

47
00:02:17.100 --> 00:02:20.200
if it's the New York Times you can
send them the content no problem.

48
00:02:20.200 --> 00:02:24.390
If it's Twitter, well you've got to
do some figuring out their timeline,

49
00:02:24.390 --> 00:02:27.300
you need to do all of that server-side.

50
00:02:27.300 --> 00:02:30.270
Different frameworks have
different level support for this.

51
00:02:30.270 --> 00:02:33.930
Ember was one of the first, I believe,
Angular and React both have support for

52
00:02:33.930 --> 00:02:36.870
it but Backbone, for instance, might not.

53
00:02:36.870 --> 00:02:40.200
So it might be something you can use or
might not use.

54
00:02:40.200 --> 00:02:44.370
Image performance, we joked that
taking out a megabyte of JPEGs is

55
00:02:44.370 --> 00:02:46.510
not as good as taking out
a megabyte of JavaScript.

56
00:02:46.510 --> 00:02:48.750
But also taking out
a megabyte of JPEGs is good.

57
00:02:48.750 --> 00:02:51.010
So you can see Medium does
really interesting things.

58
00:02:51.010 --> 00:02:54.600
Where they show you a blurred out
version that's really low res.

59
00:02:54.600 --> 00:02:57.100
And then when you scroll to that
part then they load the image.

60
00:02:57.100 --> 00:03:01.670
So you're not sending your images for like
six pages down the article immediately.

61
00:03:01.670 --> 00:03:05.810
They wait until your scroll event gets
that image and then they load it.

62
00:03:05.810 --> 00:03:07.910
There's a bunch of cool
stuff you can do there.

63
00:03:07.910 --> 00:03:10.910
One of the biggest bottlenecks
on performance is web fonts.

64
00:03:10.910 --> 00:03:13.210
Who doesn't love a good web font, right?

65
00:03:13.210 --> 00:03:18.370
But they can be, you've seen the page
where you're seeing nothing?

66
00:03:18.370 --> 00:03:20.780
Until the font loads, that's not great.

67
00:03:20.780 --> 00:03:23.680
Chrome actually has some really
interesting tools, where it's basically,

68
00:03:23.680 --> 00:03:27.510
you can actually have a setting where
you say, hey, this is the font I want.

69
00:03:27.510 --> 00:03:30.170
But if it takes too long,
just use this other font, like Georgia,

70
00:03:30.170 --> 00:03:31.910
or Helvetica, or whatever.

71
00:03:31.910 --> 00:03:36.040
And then finally, I kinda mentioned this
before about progressive web applications.

72
00:03:36.040 --> 00:03:39.950
I think it's definitely,
incredibly important and

73
00:03:39.950 --> 00:03:42.611
interesting field that's
still emerging in Safari.

74
00:03:42.611 --> 00:03:46.040
And then beta will now support
the service worker and so,

75
00:03:46.040 --> 00:03:49.130
yeah having upset work offline
that can sync in the background.

76
00:03:49.130 --> 00:03:51.876
And can show you a thing
immediately while I find more stuff

77
00:03:51.876 --> 00:03:54.486
is incredibly powerful as well.

78
00:03:54.486 --> 00:03:57.656
It was a two day topic in and
of itself, so

79
00:03:57.656 --> 00:04:02.496
like, hard to also squeeze
in amongst everything else.

80
00:04:02.496 --> 00:04:03.486
Thank you so much.

