WEBVTT

1
00:00:00.200 --> 00:00:02.016
&gt;&gt; Steve Kinney: All right, so we're
going to go through each part of this.

2
00:00:02.016 --> 00:00:07.100
Parsing, so it's team's belief
that the source code is the true

3
00:00:07.100 --> 00:00:12.611
intention of the application, but then
you need to figure out what that means.

4
00:00:12.611 --> 00:00:14.460
Parsing is slow.

5
00:00:14.460 --> 00:00:19.270
Parsing takes a lot of time to take your
like 10,000 line react application and

6
00:00:19.270 --> 00:00:20.974
figure out what it all means.

7
00:00:20.974 --> 00:00:25.340
If I mean you go look at some minified
code and see if you can figure it out.

8
00:00:25.340 --> 00:00:30.664
Parsing can be so slow it can be as slow
as one megabyte a second on mobile, right?

9
00:00:30.664 --> 00:00:33.556
So if you're aiming for
that one second load time like

10
00:00:33.556 --> 00:00:37.110
you've gotta get it to the user
you've gotta parse it all.

11
00:00:37.110 --> 00:00:39.300
Not gonna happen if you
have a giant application.

12
00:00:41.940 --> 00:00:44.840
So one way to reduce the parsing time,
again,

13
00:00:44.840 --> 00:00:46.337
this is the golden rule thing, right?

14
00:00:46.337 --> 00:00:49.648
Is [LAUGH] to have less code to parse.

15
00:00:49.648 --> 00:00:52.806
The other golden rule is to do
as much parsing as you need and

16
00:00:52.806 --> 00:00:54.680
as little as you can get away with.

17
00:00:54.680 --> 00:00:57.059
If there's things you can parse later,
what do we do?

18
00:00:58.380 --> 00:01:00.020
Parse it later, so,

19
00:01:00.020 --> 00:01:03.850
the way that V8 parsing works is
it's implemented in two phases.

20
00:01:03.850 --> 00:01:06.270
There's eager parsing,
which is what you think about.

21
00:01:06.270 --> 00:01:10.090
Like, take the code, turn it into the ST,
we're ready to rock, right?

22
00:01:11.280 --> 00:01:15.530
That's, anything you think about parsing,
if you think about parsing at all,

23
00:01:15.530 --> 00:01:18.130
like it's what you think of.

24
00:01:18.130 --> 00:01:22.545
Then there is lazy parsing, right,
and who doesn't like laziness right?

25
00:01:22.545 --> 00:01:26.823
Which is to do the misspelled word bare.

26
00:01:26.823 --> 00:01:30.450
When I was practicing I also
noticed that and never changed it.

27
00:01:30.450 --> 00:01:34.650
Misspelled word bare like do what you can,
like do this if you need now.

28
00:01:34.650 --> 00:01:36.630
Anything that you don't
need to parse right now.

29
00:01:36.630 --> 00:01:39.520
Don't parse it right now,
parse it later, right?

30
00:01:39.520 --> 00:01:43.240
Cuz that will make your application
faster, you have no control over this.

31
00:01:43.240 --> 00:01:46.020
This is effectively what

32
00:01:46.020 --> 00:01:49.880
Chrome is doing under the hood to try
make your application faster for you.

33
00:01:49.880 --> 00:01:53.330
With a lot of this performance stuff,
it's two people meeting in the middle.

34
00:01:53.330 --> 00:01:56.470
So you doing things that make
your application faster and

35
00:01:56.470 --> 00:02:00.690
it is the browser vendors doing things
to also make the browsers faster.

36
00:02:00.690 --> 00:02:04.800
And hopefully, together, we can keep
up with the rising cost of JAVA Script.

37
00:02:06.280 --> 00:02:09.420
Generally speaking,
lazy parsing is a good thing, right?

38
00:02:09.420 --> 00:02:13.310
It follows the golden rules,
it makes sense, it should be good.

39
00:02:13.310 --> 00:02:17.740
Cuz doing less work is faster,
so how does it work?

40
00:02:17.740 --> 00:02:19.170
We scan through the top level scope,

41
00:02:19.170 --> 00:02:20.990
we parse all the code that's
actually gonna do something.

42
00:02:20.990 --> 00:02:25.130
Like if there's a varx equals 2, yeah,
we need that we're in the top level.

43
00:02:25.130 --> 00:02:27.340
But if there's some function,
like that function,

44
00:02:27.340 --> 00:02:28.640
we don't know when it's gonna get called.

45
00:02:28.640 --> 00:02:30.530
It could get called after an ajax request.

46
00:02:30.530 --> 00:02:33.440
Do we need to know all the details
about what it does right now?

47
00:02:33.440 --> 00:02:38.846
No, skip it, we'll do it later, we'll
parse it when we need it, let's get to

48
00:02:38.846 --> 00:02:43.956
the critical stuff right now and
we'll worry about the other stuff later.

49
00:02:43.956 --> 00:02:46.330
But that could bite us, right?

50
00:02:46.330 --> 00:02:47.940
Here's an example.

51
00:02:47.940 --> 00:02:54.570
All right, super, yeah, it's naive but
const a is 1, b is 2, fine, right?

52
00:02:54.570 --> 00:02:56.971
Parse those, I'm gonna need those values.

53
00:02:56.971 --> 00:02:58.860
Then I come across this function.

54
00:02:58.860 --> 00:03:01.990
I'm like, that's a function declaration,
I'm gonna skip that.

55
00:03:01.990 --> 00:03:04.680
Then what happens directly afterwards?

56
00:03:04.680 --> 00:03:06.570
You need the function.

57
00:03:06.570 --> 00:03:11.980
So what really happens here is what?
&gt;&gt; Steve Kinney: We

58
00:03:11.980 --> 00:03:13.960
think about we lazy parse.

59
00:03:13.960 --> 00:03:16.480
And when we need a function
we eager parse it.

60
00:03:16.480 --> 00:03:20.194
So what's happening in that code?
&gt;&gt; Speaker 2: It's out of order

61
00:03:20.194 --> 00:03:21.611
&gt;&gt; Steve Kinney: It's out of order but

62
00:03:21.611 --> 00:03:27.129
we're also lazy parsing it and then we
have to immediately eager parse it, right?

63
00:03:27.129 --> 00:03:31.869
And if not doing stuff is
faster than doing stuff doing

64
00:03:31.869 --> 00:03:36.570
stuff twice is slower
than doing it once right.

65
00:03:36.570 --> 00:03:38.520
So the thing that makes
our code faster and

66
00:03:38.520 --> 00:03:42.820
granted is that like a contrived example,
absolutely right.

67
00:03:42.820 --> 00:03:47.840
But we'll see that every contrived example
has some amount of implication for

68
00:03:47.840 --> 00:03:49.620
real world applications, right?

69
00:03:49.620 --> 00:03:52.327
They are not the thing you should cite
next time you do a code review and

70
00:03:52.327 --> 00:03:54.437
you want somebody to add
parentheses around things.

71
00:03:54.437 --> 00:03:57.248
But they are definitely things
that are worth thinking

72
00:03:57.248 --> 00:03:58.942
about.
&gt;&gt; Steve Kinney: So,

73
00:03:58.942 --> 00:04:02.854
if we actually wrap something in
parentheses, as I mentioned a second ago,

74
00:04:02.854 --> 00:04:04.700
it will actually get eager parsed.

75
00:04:06.080 --> 00:04:08.520
Does that mean that you
should go ahead and

76
00:04:08.520 --> 00:04:10.839
wrap every function in your
application in parentheses?

77
00:04:13.220 --> 00:04:15.187
No right?

78
00:04:15.187 --> 00:04:17.140
It's helpful to know that happens.

79
00:04:17.140 --> 00:04:22.417
One that's we we call micro-optimatization
which is a long fancy word for

80
00:04:22.417 --> 00:04:26.020
saying I wanna get my
co-workers to hate me.

81
00:04:26.020 --> 00:04:30.222
But two, like these things add up
I'm like they totally do but two,

82
00:04:30.222 --> 00:04:33.836
there's an algorithm that's
trying to help you there and

83
00:04:33.836 --> 00:04:38.630
if you wrap every function in parentheses
you're basically opting out of all

84
00:04:38.630 --> 00:04:41.826
lazy parsing,
which kind of defeats the purpose.

85
00:04:41.826 --> 00:04:47.560
It works well most of the time if you
notice there is a problem, right?

86
00:04:47.560 --> 00:04:51.950
You could theoretically solve it this way,
better than that,

87
00:04:51.950 --> 00:04:53.480
there's usually libraries
that will help you.

88
00:04:53.480 --> 00:04:57.360
This one is called OptomizeJS,
you can imagine what it does,

89
00:04:57.360 --> 00:05:01.970
it optimizes JS with the help of parsing.

90
00:05:03.120 --> 00:05:08.360
And I think what's kind of interesting
here is that it will go through and

91
00:05:08.360 --> 00:05:11.040
try to figure out, not every time,
to wrap everything in parentheses,

92
00:05:11.040 --> 00:05:13.090
because that would be bad,
but like, known cases.

93
00:05:13.090 --> 00:05:14.840
What it does is it goes ahead and

94
00:05:14.840 --> 00:05:20.110
parses your code to figure out some of the
common cases where did I have to go and

95
00:05:20.110 --> 00:05:22.760
immediately eager parse it afterwards,
right?

96
00:05:22.760 --> 00:05:25.450
And it'll go and
fix some of these things for you.

