WEBVTT

1
00:00:00.160 --> 00:00:02.290
&gt;&gt; Steve Kinney: So the other problem,
or the other solution,

2
00:00:02.290 --> 00:00:06.980
to this is when we need to send something,
yes, have the browser go get it.

3
00:00:06.980 --> 00:00:10.530
But if we can have the browser
not ask us for stuff, and

4
00:00:10.530 --> 00:00:14.130
just use the stuff it already has,
that's gonna be faster, right?

5
00:00:14.130 --> 00:00:16.860
And so a way to do that is
to make use of HTTP caching.

6
00:00:18.280 --> 00:00:21.999
So imagine for
a second that the year is 1997.

7
00:00:23.700 --> 00:00:26.700
We received a lot of
great gifts that year.

8
00:00:26.700 --> 00:00:31.280
We received Puff Daddy and
the Family's No Way Out.

9
00:00:31.280 --> 00:00:35.250
We also received Cache-Control
response headers in HTTP/1.1.

10
00:00:35.250 --> 00:00:38.430
Arguably one of those had more
of an impact than the other.

11
00:00:38.430 --> 00:00:42.020
I'll leave it as an exercise to the viewer
to figure out which one of those was more

12
00:00:42.020 --> 00:00:44.260
important in my childhood development.

13
00:00:44.260 --> 00:00:48.700
But yeah, we've got these Cache-Control
response headers, that we put.

14
00:00:48.700 --> 00:00:50.900
You asked for something,
we sent it to you,

15
00:00:50.900 --> 00:00:55.260
we have some headers that give you a
little bit of extra information about it.

16
00:00:55.260 --> 00:00:57.200
And caching is not gonna do everything.

17
00:00:57.200 --> 00:01:00.640
You send a post or a put, those are like,
hey, change this data on the server.

18
00:01:00.640 --> 00:01:01.930
We don't cache those.

19
00:01:01.930 --> 00:01:03.120
But hey, you want this resource,

20
00:01:03.120 --> 00:01:06.360
you want this cat GIF,
you want this JavaScript file?

21
00:01:06.360 --> 00:01:07.610
The CSS file?

22
00:01:07.610 --> 00:01:10.150
Like, if you already have it just use
the one you have, don't ask me for

23
00:01:10.150 --> 00:01:10.920
another one.

24
00:01:10.920 --> 00:01:13.160
Cuz I gotta get the thing
half way around the world.

25
00:01:13.160 --> 00:01:16.660
This pipe is only so big,
it's leaking, it's problematic.

26
00:01:16.660 --> 00:01:20.860
So these HTTP methods can be cached,
Get, Options, and Head.

27
00:01:20.860 --> 00:01:23.020
A bunch of other ones that
change stuff on the server,

28
00:01:23.020 --> 00:01:26.250
you wouldn't want them cached, right,
like you wouldn't want them updating.

29
00:01:26.250 --> 00:01:30.670
Something like cache, you want that to
go to the server, so kinda makes sense.

30
00:01:30.670 --> 00:01:33.960
And there's a bunch of
difference settings.

31
00:01:33.960 --> 00:01:35.740
We're not gonna talk too
much about immutable,

32
00:01:35.740 --> 00:01:39.240
because I believe right now
it's only supported in Firefox,

33
00:01:39.240 --> 00:01:43.160
not the rest of the browsers, but
we will talk about these first four.

34
00:01:44.910 --> 00:01:47.650
So imagine with browser
cache that we're in one of

35
00:01:47.650 --> 00:01:49.820
three conditions at any given point.

36
00:01:49.820 --> 00:01:51.780
We don't have it in cache, that's easy.

37
00:01:51.780 --> 00:01:54.290
If you don't have it in cache,
go to the server and

38
00:01:54.290 --> 00:01:56.575
get it, right, that makes sense.

39
00:01:58.130 --> 00:02:02.830
Stale, which is check but
let's see if you have.

40
00:02:02.830 --> 00:02:05.550
You have something in cache but
it's out of date.

41
00:02:05.550 --> 00:02:06.650
Right, you need the new one.

42
00:02:06.650 --> 00:02:08.920
And valid which is you have this in cache.

43
00:02:08.920 --> 00:02:10.020
It's the right one.

44
00:02:10.020 --> 00:02:11.200
Don't talk to the network.

45
00:02:11.200 --> 00:02:12.190
Just use the one you have.

46
00:02:12.190 --> 00:02:14.770
And we all know that

47
00:02:14.770 --> 00:02:18.580
not talking to a server is going to
be faster than talking to a server.

48
00:02:18.580 --> 00:02:20.490
We understand the golden rules, right?

49
00:02:20.490 --> 00:02:22.910
Like skipping the entire,
let me ask the server.

50
00:02:22.910 --> 00:02:24.310
Let me get these TCP packets.

51
00:02:24.310 --> 00:02:26.370
All that stuff over and
over and over again.

52
00:02:26.370 --> 00:02:29.240
It is going to be faster to not do that.

53
00:02:29.240 --> 00:02:34.553
In a very simple express server
you could tweak each one of these,

54
00:02:34.553 --> 00:02:37.355
from no-store to cache missing or

55
00:02:37.355 --> 00:02:42.300
no-store to no-cache to max-age,
and so on and so forth.

56
00:02:42.300 --> 00:02:44.355
Try each of these out.

57
00:02:44.355 --> 00:02:47.190
No-store which is like don't store.

58
00:02:47.190 --> 00:02:48.660
It's exactly what you think it is, right?

59
00:02:48.660 --> 00:02:51.140
Like browser,
go get a new version every time.

60
00:02:51.140 --> 00:02:54.040
This could be, you might want this for
your HTML page, right?

61
00:02:54.040 --> 00:02:57.250
Especially if it's a client setup
that's just pointing at some bundles.

62
00:02:57.250 --> 00:03:00.420
No, I need you to see what
the new version of this one is.

63
00:03:00.420 --> 00:03:01.510
I updated this.

64
00:03:01.510 --> 00:03:03.975
Please go get the HTML page.

65
00:03:03.975 --> 00:03:08.000
No-cache means you can store a copy, but

66
00:03:08.000 --> 00:03:10.780
at least check with me to see if
you have the most recent version.

67
00:03:10.780 --> 00:03:12.900
It will do what we call a conditional get,

68
00:03:12.900 --> 00:03:16.260
hey, have this version,
is this the right version?

69
00:03:16.260 --> 00:03:18.480
Right, there's a cost to that,
because you still need to check.

70
00:03:18.480 --> 00:03:20.710
But if the server goes yeah,
that's the right version,

71
00:03:20.710 --> 00:03:22.768
then it doesn't need
to send you that file.

72
00:03:22.768 --> 00:03:27.750
And the other one is max-age, which you
say like, listen, this file I just sent

73
00:03:27.750 --> 00:03:33.650
you, for the next however many seconds
it's valid, just trust it, right.

74
00:03:33.650 --> 00:03:40.090
Don't ask me, like maybe in a ten minutes
you can ask me again, a year, whatever.

75
00:03:40.090 --> 00:03:43.110
We can do any of those things because
caching is great unless it messes

76
00:03:43.110 --> 00:03:44.350
up, right?

77
00:03:44.350 --> 00:03:50.160
We can say, cache this for a long time,
and then we ship some bad JavaScript file.

78
00:03:50.160 --> 00:03:53.070
We wanna have some kind
ofway of busting the cache.

79
00:03:53.070 --> 00:03:56.370
Because otherwise we can say, browser,
hold on to this broken JavaScript file and

80
00:03:56.370 --> 00:03:57.580
never ask me for another one.

81
00:03:59.070 --> 00:04:01.946
That's called no longer
a customer [LAUGH] right?

82
00:04:01.946 --> 00:04:04.170
That's called a user who
has given up on you.

83
00:04:04.170 --> 00:04:07.659
That's not great.

84
00:04:07.659 --> 00:04:09.796
And the user would have to do
what we call a hard refresh,

85
00:04:09.796 --> 00:04:11.730
which is a little bit
different in every browser.

86
00:04:11.730 --> 00:04:12.690
But it's not a refresh.

87
00:04:12.690 --> 00:04:14.040
It involves holding shift or

88
00:04:14.040 --> 00:04:18.870
hitting some other cocktail of keys
to clear out the cache and do stuff.

89
00:04:18.870 --> 00:04:19.950
And you know who's gonna do that?

90
00:04:21.400 --> 00:04:22.710
None of your users.

91
00:04:22.710 --> 00:04:24.310
None of your users are gonna be,
you know what?

92
00:04:24.310 --> 00:04:26.450
I've probably got some bunk cache assets.

93
00:04:26.450 --> 00:04:28.060
What if I do a hard refresh?

94
00:04:28.060 --> 00:04:29.790
[LAUGH] No one's going to do that.

95
00:04:29.790 --> 00:04:31.730
I'm not even going to do that, right?

96
00:04:31.730 --> 00:04:32.640
That is never a thought,

97
00:04:32.640 --> 00:04:35.520
when something has not worked,
that has ever crossed my mind.

98
00:04:35.520 --> 00:04:36.280
I just go,

99
00:04:36.280 --> 00:04:39.940
like, there's something else that can
give me a dopamine hit to go look at.

100
00:04:39.940 --> 00:04:41.030
I'm gonna go do that instead.

101
00:04:42.180 --> 00:04:43.490
So one solution for

102
00:04:43.490 --> 00:04:48.340
this is what we call Content-Addressable
Storage, which is a very fancy way

103
00:04:48.340 --> 00:04:52.470
of adding a bunch of garbage to
the end of our file name, right?

104
00:04:52.470 --> 00:04:56.804
What this does is effectively rebuild it,
we check some of the file,

105
00:04:56.804 --> 00:05:00.912
we give it a unique identifier,
and we say, go get that file, and

106
00:05:00.912 --> 00:05:05.204
if we build a new version of our
application, what has a new number?

107
00:05:05.204 --> 00:05:10.092
Right, you can tell the browser
if somebody asks you for

108
00:05:10.092 --> 00:05:17.594
main.567ee7aa72b3ee48649.js, hold
onto that for a year, right.

109
00:05:17.594 --> 00:05:20.138
We can put that on our index study
SMIL file and if we update our app,

110
00:05:20.138 --> 00:05:23.380
we updated the index study SMIL file,
we'd be like, okay here's the new version.

111
00:05:23.380 --> 00:05:27.880
So we effectively get cache-busting for
free with that.

112
00:05:27.880 --> 00:05:30.920
There's some interesting things you
can do with CDNs, as well, right?

113
00:05:30.920 --> 00:05:34.750
Because the CDN will also cache stuff,
which is normally, if a CDN,

114
00:05:34.750 --> 00:05:39.800
the way that it works is you put your
cool file on the internet, in the Cloud.

115
00:05:39.800 --> 00:05:43.580
That's either on your server, or
in an S3 bucket, or whatever.

116
00:05:43.580 --> 00:05:48.770
The user goes to the CDN, and
hey CDN, do you have name.567eea.

117
00:05:48.770 --> 00:05:53.210
I can't, my memory's not that good.

118
00:05:53.210 --> 00:05:55.290
And it will either have it or
it won't have it.

119
00:05:55.290 --> 00:05:57.280
If it doesn't have it,
it will go to your server and get it,

120
00:05:57.280 --> 00:06:01.550
and then it will keep a copy of that
in that region of the world, so

121
00:06:01.550 --> 00:06:06.540
the next person asks for it,
they get the fast version.

122
00:06:06.540 --> 00:06:11.530
So we can tell the CDN,
hey, hold on to this and

123
00:06:11.530 --> 00:06:13.540
give it a max-age and it will do that.

124
00:06:13.540 --> 00:06:16.040
The browser can then hold on to it,
so the browser won't ask.

125
00:06:16.040 --> 00:06:19.690
If the browser has to ask, it will go ask
the CDN which hopefully has a version.

126
00:06:21.386 --> 00:06:24.150
We don't wanna use this to hold on to
everything forever because if we send them

127
00:06:24.150 --> 00:06:26.108
a bad version we're kind of up the creek.

128
00:06:26.108 --> 00:06:31.182
But, this s-maxage is for CDNs only
because if we ship the CDN a bad version,

129
00:06:31.182 --> 00:06:34.226
we could reach out to that CDN and
be like, yo,

130
00:06:34.226 --> 00:06:37.375
lose that version,
clear it from your caches.

131
00:06:37.375 --> 00:06:42.220
So it's another way to have a different
max-age from what you set on the CDN.

132
00:06:42.220 --> 00:06:44.850
People only have to go as far
as the CDN versus what they keep

133
00:06:44.850 --> 00:06:45.364
in their browser, right.

134
00:06:46.610 --> 00:06:50.000
And getting these right is
a little bit of a fine art.

135
00:06:50.000 --> 00:06:53.020
Generally speaking, if you use web pack or

136
00:06:53.020 --> 00:06:59.100
a lot of the other build tools,
the file naming part is done for you.

137
00:06:59.100 --> 00:07:02.770
Right, it'll usually use that main and
that string afterwards.

138
00:07:02.770 --> 00:07:05.454
Right, and that is, generally speaking,

139
00:07:05.454 --> 00:07:11.030
with barring some cool new future
technologies, a great way of handling it.

140
00:07:11.030 --> 00:07:13.300
If the file changes,
it will have a different file name.

141
00:07:13.300 --> 00:07:16.960
So you can store,
you can set the max-age on the server, for

142
00:07:16.960 --> 00:07:19.050
that very long file name to a year.

143
00:07:19.050 --> 00:07:20.470
That is the maximum you can do.

144
00:07:20.470 --> 00:07:21.980
Listen if you are like still asking for

145
00:07:21.980 --> 00:07:24.920
this file, right, cuz that's unique
to that version of the file.

146
00:07:24.920 --> 00:07:26.700
Just use the one you have, right?

147
00:07:26.700 --> 00:07:31.360
And that is kind of the first step
in fixing your load performances,

148
00:07:31.360 --> 00:07:33.400
making sure you have cache headers set.

149
00:07:33.400 --> 00:07:34.790
Hold onto this, right?

150
00:07:34.790 --> 00:07:35.776
And don't ask me for it again.

151
00:07:35.776 --> 00:07:39.600
Now, for us as frontend engineers,
it's always up in the air, and whether or

152
00:07:39.600 --> 00:07:42.540
not we control that,
wherever I don't control those things,

153
00:07:42.540 --> 00:07:44.360
like the ops department
controls all of them.

154
00:07:44.360 --> 00:07:46.420
I ask them, it is done.

155
00:07:46.420 --> 00:07:49.450
Hopefully, or it's not done, or
something along those lines, right?

156
00:07:49.450 --> 00:07:52.877
But the frontend engineer we don't
always have control of those things.

157
00:07:52.877 --> 00:07:55.916
But there are other things
that we do have control over,

158
00:07:55.916 --> 00:08:00.260
that I'm gonna kinda spend a little bit
more time on, versus like those steps.

159
00:08:00.260 --> 00:08:04.365
So yep, we can reiterate I said before
we ship because there is a bad version,

160
00:08:04.365 --> 00:08:06.660
we don't really have a great choice.

161
00:08:06.660 --> 00:08:09.090
We ship the CDN a bad version,
we can't talk to the CDN.

162
00:08:09.090 --> 00:08:13.040
We can't however,
reach into all the browsers of everyone

163
00:08:13.040 --> 00:08:16.070
who has ever accessed our websites
as we push out the bad version.

164
00:08:16.070 --> 00:08:19.260
It'd be like, yo, browser, clear that out.

165
00:08:19.260 --> 00:08:20.574
That's not how the web works.

