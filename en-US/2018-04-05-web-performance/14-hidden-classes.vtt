WEBVTT

1
00:00:00.130 --> 00:00:01.560
&gt;&gt; Steve Kinney: So when we go and

2
00:00:01.560 --> 00:00:05.380
access a property on an object we do
this thing called Dynamic Lookup.

3
00:00:05.380 --> 00:00:09.750
Which is, okay,
I don't know if x is on this object.

4
00:00:09.750 --> 00:00:12.300
I don't know if it's on this prototype,
right?

5
00:00:12.300 --> 00:00:14.010
I don't know what anything is.

6
00:00:14.010 --> 00:00:16.030
I've gotta figure out all this stuff.

7
00:00:16.030 --> 00:00:17.763
And so the ignition goes and reads it.

8
00:00:17.763 --> 00:00:22.462
The ignition interpreter opens up
the spec reads through everything,

9
00:00:22.462 --> 00:00:26.240
does all this work and
tries to figure it out, right?

10
00:00:26.240 --> 00:00:28.620
Doing that is slow, right?

11
00:00:28.620 --> 00:00:32.610
And computers are good at doing repetitive
work that we don't wanna do but

12
00:00:32.610 --> 00:00:35.410
they're also good at remembering
things and not doing it.

13
00:00:35.410 --> 00:00:38.190
And again you can see where this is going,

14
00:00:38.190 --> 00:00:41.770
not doing stuff faster than doing stuff,
right?

15
00:00:41.770 --> 00:00:46.770
So what V8 does is it keeps
a secret type system that it

16
00:00:46.770 --> 00:00:49.370
doesn't tell you about behind your back.

17
00:00:49.370 --> 00:00:53.500
So it's like, listen, you asked me for
x on this object before.

18
00:00:53.500 --> 00:00:54.670
I have looked it up.

19
00:00:54.670 --> 00:00:55.430
I've read the rules.

20
00:00:55.430 --> 00:00:56.280
I know where it is.

21
00:00:56.280 --> 00:00:58.040
It's this many bits over in memory.

22
00:00:58.040 --> 00:00:59.890
Fine, I'm not doing this again.

23
00:00:59.890 --> 00:01:04.860
Right and that's fast,
it's also incredibly dangerous.

24
00:01:04.860 --> 00:01:08.120
All of the things that you see like giant

25
00:01:08.120 --> 00:01:10.640
system architectures being
compromised like Spectrum.

26
00:01:10.640 --> 00:01:14.310
It's like when we read memory we shouldn't
read from it's if it's bad right?

27
00:01:14.310 --> 00:01:18.390
So if you get that wrong that
could be a full crash, so

28
00:01:18.390 --> 00:01:23.190
you can guess that it's gonna be pretty
conservative in how it does that, right?

29
00:01:23.190 --> 00:01:27.070
So that's why we saw cases where
things went down different paths.

30
00:01:27.070 --> 00:01:31.070
It was like [LAUGH] I'll do the lookup,
it's fine.

31
00:01:31.070 --> 00:01:33.030
But things where everything
was exactly the same,

32
00:01:33.030 --> 00:01:34.230
it was like I know about this object.

33
00:01:34.230 --> 00:01:35.530
I've done this.
I've read the rulebook,

34
00:01:35.530 --> 00:01:37.300
I've seen this kind of object before.

35
00:01:37.300 --> 00:01:40.550
I know what to do,
I will do it faster for you.

36
00:01:40.550 --> 00:01:42.450
So let's actually look at some stuff.

37
00:01:42.450 --> 00:01:45.390
All right, so everything gets
this thing called a Hidden Class.

38
00:01:45.390 --> 00:01:48.120
That's what it's called in Chrome, it's
called something different in Firefox,

39
00:01:48.120 --> 00:01:49.430
it's called something different in Safari.

40
00:01:49.430 --> 00:01:52.390
We're going to use Hidden Class
right now because why not.

41
00:01:52.390 --> 00:01:56.160
Because its hidden, it seems like a little
cloak and dagger, who doesn't like that?

42
00:01:56.160 --> 00:01:59.580
All right, so we make an object, it's
got the hidden class, we'll call it C0.

43
00:01:59.580 --> 00:02:03.520
It's actually got some weird long
name that we're not gonna use.

44
00:02:03.520 --> 00:02:05.110
RIght?
C0 seems good for us.

45
00:02:06.340 --> 00:02:08.050
We add a y property to it.

46
00:02:08.050 --> 00:02:10.930
All right, now it's a different op,
like it's got a different shape to it.

47
00:02:10.930 --> 00:02:11.440
Right?

48
00:02:11.440 --> 00:02:13.710
It's now C1.

49
00:02:13.710 --> 00:02:15.770
And it went through this path.

50
00:02:15.770 --> 00:02:17.930
You can go from C0 to C1, right?

51
00:02:17.930 --> 00:02:19.420
But if we started off
like it has both x and

52
00:02:19.420 --> 00:02:23.200
y, that's it's own different hidden class.

53
00:02:23.200 --> 00:02:25.010
Like we don't know.

54
00:02:25.010 --> 00:02:27.170
The order matters.

55
00:02:27.170 --> 00:02:29.660
The order in which the properties
got added to the object

56
00:02:29.660 --> 00:02:32.560
matters when we look
up what a property is.

57
00:02:32.560 --> 00:02:36.115
So if the path that an object
went down to get to

58
00:02:36.115 --> 00:02:39.400
the properties that is has is different.

59
00:02:39.400 --> 00:02:41.700
We can't use the cached
version of the lookup.

60
00:02:41.700 --> 00:02:44.640
We have to go ahead and
go through the process every time.

61
00:02:46.260 --> 00:02:48.780
So like you can only move forward
in the chain, you can not,

62
00:02:48.780 --> 00:02:49.980
like we went from C0 to C1.

63
00:02:49.980 --> 00:02:51.372
You can't start at C1.

64
00:02:51.372 --> 00:02:54.040
If you start at C0 and

65
00:02:54.040 --> 00:02:58.540
you go to C1, if you start off somewhere
else, you got to go down your own path.

66
00:02:58.540 --> 00:03:00.940
You can only move forward in this chain.

67
00:03:02.040 --> 00:03:07.040
So you have C0,
we have the property, becomes C1.

68
00:03:07.040 --> 00:03:07.940
Ignore that.

69
00:03:07.940 --> 00:03:08.855
Yeah, fix the next slide.

70
00:03:08.855 --> 00:03:14.660
[LAUGH] If it's the same property
then we go directly to C2.

71
00:03:14.660 --> 00:03:19.610
Right and if we delete another property
then that moves to it's own versus if we

72
00:03:19.610 --> 00:03:23.690
deleted that same property from the above
object that's a different path, right?

73
00:03:23.690 --> 00:03:25.840
Unless things are created the same way,

74
00:03:25.840 --> 00:03:31.120
they go down the same path VA doesn't try
to imagine that they are the same thing.

75
00:03:31.120 --> 00:03:34.380
So that's useful when we try to think
about how we make our objects and

76
00:03:34.380 --> 00:03:36.320
what we do to our objects.

77
00:03:36.320 --> 00:03:39.470
If we can keep them going
along the same path and

78
00:03:39.470 --> 00:03:41.630
we do things in a very systematic way.

79
00:03:41.630 --> 00:03:42.680
So when we make functions for

80
00:03:42.680 --> 00:03:47.360
doing things vs the functions going to
run the same way every time vs here

81
00:03:47.360 --> 00:03:51.480
I'm gonna willy-nilly code it this way and
here I'm gonna do it this other way.

82
00:03:51.480 --> 00:03:55.190
You can opt yourself out
of some of these things.

83
00:03:55.190 --> 00:04:00.890
Cool, so we saw it with some code earlier.

84
00:04:00.890 --> 00:04:05.280
Remember how I had that 50 million and
it was a different type?

85
00:04:05.280 --> 00:04:08.030
That was weird, right?

86
00:04:08.030 --> 00:04:10.510
Let's actually talk about
the process that it goes through.

87
00:04:11.890 --> 00:04:13.260
When an object has never been created,

88
00:04:13.260 --> 00:04:18.000
we've never seen that property before,
where it both works for

89
00:04:18.000 --> 00:04:21.240
the speculative optimization as
well as these hidden classes.

90
00:04:21.240 --> 00:04:25.000
It's like, we don't know what x is,
I've never seen it before.

91
00:04:25.000 --> 00:04:27.370
It's like Schroedinger's type.

92
00:04:27.370 --> 00:04:30.460
It's None, because we've never seen it and
we have no information.

93
00:04:30.460 --> 00:04:33.340
The first time we see it,
we either see that it's a number.

94
00:04:33.340 --> 00:04:38.350
Which is either a really long number,
or what we call a SignedSmall,

95
00:04:38.350 --> 00:04:43.780
a small number, or it's a string or
this thing called a BigInt.

96
00:04:43.780 --> 00:04:45.490
Which is a stage two proposal for

97
00:04:45.490 --> 00:04:48.240
actually having large numbers
that make sense in JavaScript.

98
00:04:48.240 --> 00:04:51.010
Just imagine that one doesn't exist for
now.

99
00:04:52.160 --> 00:04:55.020
And so once you become either
a number assigned small or

100
00:04:55.020 --> 00:04:57.470
string in that speculative optimization,
cool.

101
00:04:57.470 --> 00:04:59.870
You can only move forward on this lattice.

102
00:04:59.870 --> 00:05:02.765
Number or oddball is basically,
you know those things,

103
00:05:02.765 --> 00:05:05.298
you ever read those blog posts and
they're like,

104
00:05:05.298 --> 00:05:08.393
JavaScript's messed up because
true plus true equals two.

105
00:05:08.393 --> 00:05:12.739
Right cuz true is technically 1 and
false is technically 0, right and

106
00:05:12.739 --> 00:05:14.558
all that kind of stiff right.

107
00:05:14.558 --> 00:05:19.279
If we saw the number one and
true a second time, it's a number or

108
00:05:19.279 --> 00:05:25.265
it's an oddball no undefined, any of these
all end up being kind of same thing.

109
00:05:25.265 --> 00:05:29.384
So yeah we see each of
those kind of in place.

110
00:05:29.384 --> 00:05:32.910
But if you saw the number once and
a string the second time,

111
00:05:32.910 --> 00:05:34.150
then we don't know what's going on.

112
00:05:34.150 --> 00:05:34.810
It's any.

113
00:05:34.810 --> 00:05:38.640
We can't, at this point, we get
either closer to that polymorphism or

114
00:05:38.640 --> 00:05:39.800
metamorphism, right?

115
00:05:39.800 --> 00:05:42.240
We can't keep track of what
these things are, right?

116
00:05:42.240 --> 00:05:44.700
So things kind of like
move through this process.

