WEBVTT

1
00:00:02.370 --> 00:00:05.046
&gt;&gt; Steve Kinney: The JavaScript code that
we write has to execute in the browser.

2
00:00:05.046 --> 00:00:09.250
In order that, we need to know a little
bit about how web pages are created and

3
00:00:09.250 --> 00:00:12.120
how they're actually rendered, and
how they use interface updates.

4
00:00:12.120 --> 00:00:14.600
So let's talk e a little bit
about how web pages are born.

5
00:00:16.630 --> 00:00:21.328
Again, the step one is the browser goes
ahead sends get request to a server,

6
00:00:21.328 --> 00:00:23.220
he says, hey, give me a webpage.

7
00:00:25.040 --> 00:00:27.580
We get back a response and
guess what it has in it?

8
00:00:27.580 --> 00:00:31.030
A webpage, like typically HTML.

9
00:00:31.030 --> 00:00:35.107
The HTML is just a big sting of text and
likely has other things that we need to

10
00:00:35.107 --> 00:00:39.021
get like Style Sheets, JavaScript files,
so on and so forth, right?

11
00:00:39.021 --> 00:00:42.500
Becomes the basis of the webpage
that we're creating.

12
00:00:42.500 --> 00:00:44.860
That HTML also needs to parsed and

13
00:00:44.860 --> 00:00:47.710
figure out like what is the actual
structure of this page, right?

14
00:00:47.710 --> 00:00:50.490
So we take the HTML and we pars it
into this thing called the document

15
00:00:50.490 --> 00:00:54.790
object model, the DOM if you will,
everyone's friend.

16
00:00:54.790 --> 00:00:58.060
Which is basically the representation
of the page starting with the document.

17
00:00:58.060 --> 00:01:01.640
We got the HTML tag, the head and
the body, so on and so forth.

18
00:01:01.640 --> 00:01:04.690
It's this big tree like structure

19
00:01:04.690 --> 00:01:06.940
that is a representation of
the webpage that we have.

20
00:01:08.070 --> 00:01:11.690
Now in the previous example,
we saw that link to go get some CSS.

21
00:01:11.690 --> 00:01:13.274
We need to go fetch that as well.

22
00:01:13.274 --> 00:01:16.032
That's obviously a different language,
if you will, right?

23
00:01:16.032 --> 00:01:18.213
And that needs to kind of get created,

24
00:01:18.213 --> 00:01:21.430
figure out what are all
the styling rules for this page?

25
00:01:21.430 --> 00:01:26.338
And that gets turned into this other very
similar archetype called the CSS object

26
00:01:26.338 --> 00:01:27.110
model.

27
00:01:27.110 --> 00:01:30.680
So the cascading style shape object model,
that's a mouthful.

28
00:01:30.680 --> 00:01:33.992
Which is just basically a giant
tree of all the rules for

29
00:01:33.992 --> 00:01:35.582
how our page should look.

30
00:01:35.582 --> 00:01:41.391
So we have in one case is we have
an entire structure of how the web page or

31
00:01:41.391 --> 00:01:43.856
web application is laid out.

32
00:01:43.856 --> 00:01:46.451
And we've got this other one for

33
00:01:46.451 --> 00:01:51.390
a set of rules on how different
things should look, right?

34
00:01:51.390 --> 00:01:54.590
That's not necessarily how
each particular element looks,

35
00:01:54.590 --> 00:01:56.937
but we're gonna go tell
all paragraph tags.

36
00:01:56.937 --> 00:01:59.770
All things with the class of cool, right?

37
00:01:59.770 --> 00:02:01.405
That's not semantic, but we'll go with it.

38
00:02:01.405 --> 00:02:04.010
And how we have all these rules.

39
00:02:04.010 --> 00:02:05.283
We have that state of the world, right?

40
00:02:05.283 --> 00:02:08.857
So in order to figure out what the page
looks like we have to take the state of

41
00:02:08.857 --> 00:02:10.874
the world and
the rules about the world and

42
00:02:10.874 --> 00:02:14.780
we put them together into this
thing called the render tree.

43
00:02:14.780 --> 00:02:17.457
Now the render tree you'll notice like,
we don't have that HTML anymore and

44
00:02:17.457 --> 00:02:18.620
we don't have the head, right?

45
00:02:18.620 --> 00:02:22.075
It's only the parts that will
actually show up on the page, right?

46
00:02:22.075 --> 00:02:27.323
Because we don't need to worry about how
to style things we're not going to show,

47
00:02:27.323 --> 00:02:27.866
right?

48
00:02:27.866 --> 00:02:33.623
So basically the structure of our
page along with the computive rules.

49
00:02:33.623 --> 00:02:36.974
It take all the CSS and
all the rules and figure it all out and

50
00:02:36.974 --> 00:02:41.287
tell me what this given element on this
part of the DOM should look like, and

51
00:02:41.287 --> 00:02:44.800
this other given element,
so on and so forth.

52
00:02:44.800 --> 00:02:45.993
So the render tree, again,

53
00:02:45.993 --> 00:02:48.742
has a one-to-one mapping with
the visible objects on the page.

54
00:02:48.742 --> 00:02:52.147
You can have multiple rules
applied to the same element.

55
00:02:52.147 --> 00:02:55.770
You could have one rule
applied to multiple elements.

56
00:02:55.770 --> 00:02:56.790
When it comes to the render tree,

57
00:02:56.790 --> 00:02:59.620
it's here are all the things that
are gonna show up on the page.

58
00:02:59.620 --> 00:03:02.050
Here's what they should look like,
very cool.

59
00:03:02.050 --> 00:03:07.010
Things that anything hidden is not
gonna show like if you do display none,

60
00:03:07.010 --> 00:03:10.230
that's not on the render tree,
cuz we're not displaying it.

61
00:03:10.230 --> 00:03:11.294
Things with the head are not gonna happen.

62
00:03:11.294 --> 00:03:14.870
But things like pseudo elements like,
hey, put this other element before

63
00:03:14.870 --> 00:03:18.060
this other one and we write that in CSS,
that is on the render tree.

64
00:03:18.060 --> 00:03:19.466
So it's a little bit different.

65
00:03:19.466 --> 00:03:21.166
And we need to figure that all out.

66
00:03:21.166 --> 00:03:24.910
And the process that we figure that
out is called style calculation.

67
00:03:24.910 --> 00:03:27.730
The browser looks at all the styles and
all of the elements.

68
00:03:27.730 --> 00:03:30.300
It figures out what styles
apply to this given element.

69
00:03:30.300 --> 00:03:31.630
What rules apply?

70
00:03:31.630 --> 00:03:34.037
Okay, two rules are changing
out the background color,

71
00:03:34.037 --> 00:03:35.400
which one of these win, right?

72
00:03:35.400 --> 00:03:38.540
And kind of figures out
everything about how it looks.

73
00:03:38.540 --> 00:03:41.329
So again,
this really results in two things.

74
00:03:41.329 --> 00:03:46.689
Like, which rules apply and if two rules
are defining the same property twice,

75
00:03:46.689 --> 00:03:50.222
which one wins,
which one has higher specificity?

76
00:03:50.222 --> 00:03:53.450
If they have the same specificity,
which one came later?

77
00:03:53.450 --> 00:03:54.540
So on and so forth.

78
00:03:54.540 --> 00:03:57.956
The browser will figure that all out,
you just basically give it a structure,

79
00:03:57.956 --> 00:04:00.152
give it some rules about that structure,
[SOUND].

80
00:04:00.152 --> 00:04:03.970
Out comes a render tray ready
to be shown onto the page.

81
00:04:03.970 --> 00:04:06.666
That doesn't necessarily
show it on the page, but

82
00:04:06.666 --> 00:04:09.747
that is like a set of instructions
on what's on this page?

83
00:04:09.747 --> 00:04:10.940
What does it look like?

84
00:04:10.940 --> 00:04:16.133
The other thing that we have to keep in
mind is figuring out which rules apply?

85
00:04:16.133 --> 00:04:18.870
Cuz it can be a little bit tricky, right?

86
00:04:18.870 --> 00:04:23.920
We could have stuff like all P rules
in CSS apply to the paragraphs, fine.

87
00:04:23.920 --> 00:04:28.373
We could also have some
a slightly more complicated one,

88
00:04:28.373 --> 00:04:31.000
like nth child 4n- 1, right?

89
00:04:31.000 --> 00:04:33.014
That takes a little more
work to figure out.

90
00:04:33.014 --> 00:04:35.740
[LAUGH] That's not as simple as like,
are you a paragraph or

91
00:04:35.740 --> 00:04:37.290
anything along those lines.

92
00:04:37.290 --> 00:04:39.474
We have to do work to figure that out,
right?

93
00:04:39.474 --> 00:04:41.694
You can almost see where
this is going here,

94
00:04:41.694 --> 00:04:46.080
which is things where we have to do more
work tend to take a little bit longer.

95
00:04:46.080 --> 00:04:48.609
So the more complicated you
end up making your selectors,

96
00:04:49.990 --> 00:04:52.400
the longer this whole
process is going to take.

97
00:04:52.400 --> 00:04:54.950
It seems like computers are fast and
everything is free,

98
00:04:54.950 --> 00:04:58.180
but that's not really the case.

99
00:04:58.180 --> 00:05:01.110
Everything we go ahead and
do is gonna take some amount of time,

100
00:05:01.110 --> 00:05:03.985
and the more work it takes to do it,
the more time it takes.

101
00:05:03.985 --> 00:05:06.732
So easy rule of thumb,
class names are super simple.

102
00:05:06.732 --> 00:05:11.364
Like, does this have the class of
header or footer, or whatever?

103
00:05:11.364 --> 00:05:12.915
That's a yes or no question.

104
00:05:12.915 --> 00:05:15.985
That's very easy to figure out.

105
00:05:15.985 --> 00:05:20.394
But when we get to the point where
it's going off the page of sidebar,

106
00:05:20.394 --> 00:05:25.580
the first descendant of menu-item,
the nth-child, that takes a lot longer.

107
00:05:25.580 --> 00:05:30.322
So when possible you can always speed up
the time of calculating all the styles and

108
00:05:30.322 --> 00:05:34.450
matching to the elements by keeping
it as simple as possible, right?

109
00:05:34.450 --> 00:05:38.197
Any kind of system where you define it
with class names would be BEM or CSS,

110
00:05:38.197 --> 00:05:40.078
it doesn't really matter, right?

111
00:05:40.078 --> 00:05:43.926
But if you can do this by defining
all those states and classes,

112
00:05:43.926 --> 00:05:47.570
it is always gonna be faster
than doing trickery, right?

113
00:05:47.570 --> 00:05:50.640
Because the browsers they read the
selectors, if there's one selector cool,

114
00:05:50.640 --> 00:05:51.240
they're ready to go.

115
00:05:51.240 --> 00:05:53.656
Otherwise, they have to
do more computation.

116
00:05:53.656 --> 00:05:57.120
The less selectors,
the faster is going to be, right?

117
00:05:57.120 --> 00:06:01.810
And it could be stuff like well,
I need every fourth row, right?

118
00:06:01.810 --> 00:06:04.560
Very cool, but it does raise the question.

119
00:06:04.560 --> 00:06:06.620
If you need to use it, use it.

120
00:06:06.620 --> 00:06:10.052
But if you're like, hey, I'm generating
this giant table from the server,

121
00:06:10.052 --> 00:06:13.184
can the server put the right class
name on for every fourth row, right?

122
00:06:13.184 --> 00:06:16.515
Cool, then you can speed up what
the user's browser has to do, or

123
00:06:16.515 --> 00:06:19.726
if you're shipping reactor,
angular, or ember anyway, and

124
00:06:19.726 --> 00:06:23.862
you have some logic in there and you can
put the class on every fourth row, right?

125
00:06:23.862 --> 00:06:25.550
You're already going through that process.

126
00:06:25.550 --> 00:06:28.150
You might as well do it there
than loading extra work

127
00:06:28.150 --> 00:06:29.950
onto the selector engine to figure it out.

128
00:06:31.150 --> 00:06:33.900
So we style,
we figure out what the rules apply, and

129
00:06:33.900 --> 00:06:36.222
then we kind of try to
put them all together.

130
00:06:36.222 --> 00:06:40.484
Selector matching just takes, okay, this
is the fourth row in the n plus 1 minus 4.

131
00:06:40.484 --> 00:06:45.775
It does have a class of very important
table row and figuring all that.

132
00:06:45.775 --> 00:06:47.425
When multiple selectors
apply to an element,

133
00:06:47.425 --> 00:06:49.415
the browser needs to figure out who wins.

134
00:06:49.415 --> 00:06:52.795
And obviously, the fastest way to
speed that up is not to do it.

135
00:06:54.270 --> 00:06:58.916
So again, if you can do this by having
some kind of way that you're naming your

136
00:06:58.916 --> 00:07:03.418
CSS classes that figures all that and
tests the actual state of the object,

137
00:07:03.418 --> 00:07:05.509
it's going to be faster, right?

138
00:07:05.509 --> 00:07:10.711
I'm gonna be really honest though like,
&gt;&gt; Steve Kinney: Style invalidation,

139
00:07:10.711 --> 00:07:12.560
taking stuff on or
off doesn't matter as much.

140
00:07:12.560 --> 00:07:15.322
And this will always be
a relatively short part.

141
00:07:15.322 --> 00:07:19.517
If you notice, if you measure that
calculating styles is a very big part,

142
00:07:19.517 --> 00:07:21.829
as you wait for the initial page to load.

143
00:07:21.829 --> 00:07:26.992
These are the places to look for,
my suspicion when we saw some of the other

144
00:07:26.992 --> 00:07:32.670
things going on is it's probably not
the longest for getting the initial page.

145
00:07:32.670 --> 00:07:36.483
Parsing the JavaScript is probably the
longest, but a lot of the kind of rules

146
00:07:36.483 --> 00:07:40.591
from rendering and how to optimize render
performance, has to do with the fact that

147
00:07:40.591 --> 00:07:44.129
JavaScript code is likely gonna change
the page after that first load.

148
00:07:44.129 --> 00:07:46.682
And how do we do stuff,
how do we do repeated stuff, right?

149
00:07:46.682 --> 00:07:48.251
If you think about an animation,

150
00:07:48.251 --> 00:07:52.250
an animation is like they're changing
the page many times possibly, right?

151
00:07:52.250 --> 00:07:55.946
And like a lot of it comes down to one
page has been loaded, but it's worthwhile

152
00:07:55.946 --> 00:07:59.816
measuring if you see on initial load,
calculating the styles is taking forever.

153
00:07:59.816 --> 00:08:03.480
These are the kind of paths to go down or
you do have very complicated selectors.

154
00:08:03.480 --> 00:08:06.260
Do you have a bunch of CSS
that you're not using, right?

155
00:08:06.260 --> 00:08:09.660
If you have a bunch of CSS that you're not
using, we still have to check that, right?

156
00:08:09.660 --> 00:08:14.320
Getting that code out of your code base
is going to help with that issue, right?

157
00:08:14.320 --> 00:08:17.600
And we'll look at some tools later for
like automating that, so

158
00:08:17.600 --> 00:08:20.600
you don't have to hand,
look, the CSS class.

159
00:08:20.600 --> 00:08:22.810
I wonder if it's on any elements, right?

160
00:08:22.810 --> 00:08:25.910
Like good luck not messing that up.

161
00:08:25.910 --> 00:08:30.535
So like having some kind of like automated
tool it does it is usually really useful.

162
00:08:30.535 --> 00:08:34.199
So the high level on stall calculation
part is reduce the amount of unused CSS

163
00:08:34.199 --> 00:08:35.351
the you're shipping.

164
00:08:35.351 --> 00:08:38.515
The less styles you have,
the less there is to check.

165
00:08:38.515 --> 00:08:41.486
And trying to reduce the number of
styles that effect a given element

166
00:08:41.486 --> 00:08:44.730
by using some kind of system that can
boil stuff down to one class, right?

167
00:08:44.730 --> 00:08:47.824
If you can pull those two things off,
those happen to be useful for

168
00:08:47.824 --> 00:08:49.633
a number of other things too, right?

169
00:08:49.633 --> 00:08:54.123
It happens to be useful, cuz like, not
only is that less for the browser to do,

170
00:08:54.123 --> 00:08:57.880
but it's also less stuff you're
sending over the wire, right?

171
00:08:59.330 --> 00:09:05.180
It's also, for a lot of the stuff,
easier to manage your own code base.

172
00:09:05.180 --> 00:09:09.970
These CSS systems, like BEM and CSS,
were not necessarily originally built for

173
00:09:09.970 --> 00:09:10.540
performance.

174
00:09:10.540 --> 00:09:13.090
They were built for
developer sanity, [LAUGH] right?

175
00:09:13.090 --> 00:09:15.230
It just happens to be that systems for

176
00:09:15.230 --> 00:09:19.690
developer sanity also
make your code faster.

177
00:09:19.690 --> 00:09:22.200
So definitely kind of look out for
one of those.

178
00:09:22.200 --> 00:09:25.160
All right, so after we figure out
the styles and the render tree, and

179
00:09:25.160 --> 00:09:27.880
we have this entire tree of
stuff ready to go, right?

180
00:09:27.880 --> 00:09:30.630
We know everything that's
gonna be on the page.

181
00:09:30.630 --> 00:09:33.690
We have some rules about what
everything should look like.

182
00:09:33.690 --> 00:09:37.054
It's time to actually put it on the page,
right?

183
00:09:37.054 --> 00:09:40.142
And we’re gonna go into this one
a little more in depth in a second.

184
00:09:40.142 --> 00:09:41.951
We’re gonna go through
all the other steps, and

185
00:09:41.951 --> 00:09:43.373
then we’re gonna round back to that.

186
00:09:43.373 --> 00:09:45.460
But this is trickier than it seems, right?

187
00:09:45.460 --> 00:09:47.971
You have to basically find out
the size of every element,

188
00:09:47.971 --> 00:09:51.654
when you would break to a new line, the
relationship between everything, right?

189
00:09:51.654 --> 00:09:56.220
It should be no surprise that this is
complicated, and it takes a while, right?

190
00:09:56.220 --> 00:09:57.695
We will round back to this
in a little bit though.

191
00:09:57.695 --> 00:10:00.362
So you know what the elements look like.

192
00:10:00.362 --> 00:10:02.489
You know where they go on the page.

193
00:10:02.489 --> 00:10:04.456
It's time to make them, right?

194
00:10:04.456 --> 00:10:08.833
So the process of painting, you take all
the information about what it looks like,

195
00:10:08.833 --> 00:10:13.022
you take the information about where it
goes which a lot of times affects the size

196
00:10:13.022 --> 00:10:13.880
of it, right?

197
00:10:13.880 --> 00:10:14.497
Like it's gonna be 50% of the width.

198
00:10:14.497 --> 00:10:19.130
Well, you gotta lay out the page before
you know how many pixels that is, right?

199
00:10:19.130 --> 00:10:22.520
Once you've figured out where everything
goes and have all the rules figured out,

200
00:10:22.520 --> 00:10:23.838
then you can go ahead and paint.

201
00:10:23.838 --> 00:10:28.271
Which basically means take this element,
right, which is a bunch of rules and

202
00:10:28.271 --> 00:10:32.450
location data, and turn it into
a picture that somebody can see, right?

203
00:10:32.450 --> 00:10:36.207
So that's the process of like turning
it into a bitmap image, right?

204
00:10:36.207 --> 00:10:39.120
So it goes from a tree and
all the stuff to like a picture.

205
00:10:39.120 --> 00:10:41.581
You're not totally done yet, right?

206
00:10:41.581 --> 00:10:42.910
You have pictures.

207
00:10:43.940 --> 00:10:48.208
Having pictures does not necessarily
get the job done, right?

208
00:10:48.208 --> 00:10:50.034
After you have the pictures,

209
00:10:50.034 --> 00:10:55.086
you need to actually send them to the GPU
in order to be put onto the screen, right?

210
00:10:55.086 --> 00:10:59.040
And there's some rules about this that
we'll kind of talk about in a little bit.

211
00:10:59.040 --> 00:11:02.820
And once that, then you're ready
to just make Internet millions and

212
00:11:02.820 --> 00:11:03.410
you're good to go.

