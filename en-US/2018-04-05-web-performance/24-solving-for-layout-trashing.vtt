WEBVTT

1
00:00:00.030 --> 00:00:03.110
&gt;&gt; Steve Kinney: All right, we're
gonna take a look at another example.

2
00:00:03.110 --> 00:00:08.040
Gonna go into that,
close activity monitor.

3
00:00:11.360 --> 00:00:13.850
&gt;&gt; Steve Kinney: I'm just
gonna do an MPM start.

4
00:00:16.820 --> 00:00:18.820
I got the server as this cool port name.

5
00:00:21.850 --> 00:00:23.070
We'll go ahead we'll take it for a spin.

6
00:00:26.170 --> 00:00:28.280
We're going to use layout fun.

7
00:00:28.280 --> 00:00:31.330
Because that's what we're
talking about right now.

8
00:00:31.330 --> 00:00:32.600
All right so here's an animation.

9
00:00:36.180 --> 00:00:38.940
And you can see it's pretty janky.

10
00:00:38.940 --> 00:00:41.030
Right, that's not a fluid animation.

11
00:00:41.030 --> 00:00:43.390
Things are kind of stuttering.

12
00:00:44.620 --> 00:00:51.190
&gt;&gt; Steve Kinney: Let's go ahead and
take a look at our tools.

13
00:00:51.190 --> 00:00:52.080
Let's do a recording.

14
00:00:55.950 --> 00:00:56.666
&gt;&gt; Steve Kinney: And you know,

15
00:00:56.666 --> 00:01:00.569
this is even more janky cuz the process
of recording takes a lot of bandwidth.

16
00:01:00.569 --> 00:01:03.059
Like I said before,
the act of measuring makes stuff worse.

17
00:01:08.300 --> 00:01:11.041
&gt;&gt; Steve Kinney: Especially if you're
on a little twelve-inch MacBook.

18
00:01:11.041 --> 00:01:15.460
Wow, that's not great, right?

19
00:01:16.720 --> 00:01:19.063
It's taking too long.
If we go in far enough,

20
00:01:19.063 --> 00:01:24.580
you can see that it is,
we are we're thrashing, right?

21
00:01:24.580 --> 00:01:26.370
We're recalculating.
We're recalculating.

22
00:01:27.800 --> 00:01:29.650
This is not good, right?

23
00:01:29.650 --> 00:01:34.108
A given frame took 205 milliseconds.

24
00:01:34.108 --> 00:01:36.390
Users are gonna notice that, right?

25
00:01:36.390 --> 00:01:39.550
That is going to look and
feel janky for us.

26
00:01:39.550 --> 00:01:43.300
Granted you're all flying around
a bunch of boxes, like totally.

27
00:01:45.320 --> 00:01:50.770
Cool, so the big question is
what do we do about it, right?

28
00:01:50.770 --> 00:01:55.171
So let's take a look at the code.

29
00:01:58.060 --> 00:02:00.390
&gt;&gt; Steve Kinney: Go into rendering.

30
00:02:00.390 --> 00:02:03.096
We go ahead to the moving boxes and
we’ll look at.

31
00:02:03.096 --> 00:02:05.670
So, I’ve got some setup code that we
don’t have to really worry about.

32
00:02:05.670 --> 00:02:08.750
It’s basically getting the buttons
working and starting and stopping.

33
00:02:08.750 --> 00:02:10.330
And, let’s make believe
that doesn’t exist.

34
00:02:10.330 --> 00:02:14.185
But, here it is in case you were curious.

35
00:02:14.185 --> 00:02:18.253
So, then what we have is we're gonna
get all the elements in array.

36
00:02:18.253 --> 00:02:20.256
And then, you guessed it,
we're going to read.

37
00:02:20.256 --> 00:02:24.413
We're going to do some fancy pants
math to just make it animatable and so

38
00:02:24.413 --> 00:02:26.364
that it recurs by using you know.

39
00:02:26.364 --> 00:02:30.728
And then we're going to change
their CSS transformation, right?

40
00:02:30.728 --> 00:02:37.970
And as we saw, that is definitely
causing some problems for us, right?

41
00:02:37.970 --> 00:02:42.461
So obviously we could just apply the same
thing we did last time which is do it

42
00:02:42.461 --> 00:02:43.830
in two steps, right?

43
00:02:43.830 --> 00:02:44.576
That would work.

44
00:02:44.576 --> 00:02:46.680
Let's try it out see
what the difference is.

45
00:02:48.110 --> 00:02:52.570
Cool, so let's go ahead and
figure out each one's next position.

46
00:02:52.570 --> 00:02:57.600
I think my spacing's a little off here.

47
00:02:57.600 --> 00:02:59.590
We'll figure out the next position for
each one.

48
00:02:59.590 --> 00:03:03.955
So we'll say const nextPositions plural.

49
00:03:03.955 --> 00:03:11.510
We'll do exactly the same
approach that we took last time.

50
00:03:21.830 --> 00:03:24.639
&gt;&gt; Steve Kinney: We'll go ahead and
we'll figure that all out here.

51
00:03:24.639 --> 00:03:27.590
A little bit of copy-paste action.

52
00:03:35.470 --> 00:03:37.790
&gt;&gt; Steve Kinney: And
here we'll just have const nextPosition.

53
00:03:42.788 --> 00:03:46.730
&gt;&gt; Steve Kinney: All right, so
we'll go ahead and do a lot of reading,

54
00:03:46.730 --> 00:03:49.983
then we'll go ahead and
do a lot of writing.

55
00:03:49.983 --> 00:03:51.089
And let's see what happens for us.

56
00:03:57.962 --> 00:04:02.132
&gt;&gt; Steve Kinney: Cool, so
let's go ahead, much better, right?

57
00:04:02.132 --> 00:04:03.155
Much smoother.

58
00:04:05.200 --> 00:04:08.370
&gt;&gt; Steve Kinney: Let's go ahead and
do another recording.

59
00:04:08.370 --> 00:04:11.000
Also, do you see what I did to
the CPU in that previous one?

60
00:04:11.000 --> 00:04:12.550
It was not happy with me.

61
00:04:22.030 --> 00:04:23.278
&gt;&gt; Steve Kinney: Let's go ahead in here.

62
00:04:23.278 --> 00:04:27.205
You see it looked a little bit jankier,

63
00:04:27.205 --> 00:04:30.225
but,
&gt;&gt; Steve Kinney: We do need to recalculate

64
00:04:30.225 --> 00:04:32.668
the style for every frame,
we're not getting out of that one, but

65
00:04:32.668 --> 00:04:33.900
we went from 200 down to 47.

66
00:04:33.900 --> 00:04:37.726
The other piece of ice don't have that
many boxes on the screen you're animating

67
00:04:37.726 --> 00:04:38.580
at the same time.

68
00:04:38.580 --> 00:04:41.953
We're never gonna get down to
the 16 in this case, right?

69
00:04:41.953 --> 00:04:45.720
But we did cut it by 80%
which will count as a win.

70
00:04:45.720 --> 00:04:48.630
And when you see it's not all
of those little boxes, right?

71
00:04:48.630 --> 00:04:49.941
Okay, that's what we expected.

72
00:04:49.941 --> 00:04:51.560
We saw it in the previous example.

73
00:04:52.940 --> 00:04:54.940
That's pretty cool but there's a problem.

74
00:04:54.940 --> 00:04:59.250
If I told you not to do this you'd just
be like, yeah, I'm not gonna do it.

75
00:04:59.250 --> 00:05:03.211
Remember that code I showed you
before in my application, right?

76
00:05:03.211 --> 00:05:05.430
It's happening.

77
00:05:05.430 --> 00:05:07.640
I didn't do it, I know better, right?

78
00:05:07.640 --> 00:05:09.710
But it's clearly happening.

79
00:05:09.710 --> 00:05:11.705
Because if we're doing our jobs well,

80
00:05:11.705 --> 00:05:15.700
a lot of times we like separating our
code out for different concerns, right?

81
00:05:15.700 --> 00:05:19.406
We're trying to make sure that,
okay, the stuff that matters here

82
00:05:19.406 --> 00:05:22.740
is separated from the code
that has a different concern.

83
00:05:22.740 --> 00:05:26.581
Which means that you could have some
layout thrashing happening from two very

84
00:05:26.581 --> 00:05:28.305
different ends of your code base.

85
00:05:28.305 --> 00:05:31.490
Where you don't see one
happening before the other.

86
00:05:31.490 --> 00:05:33.910
But it turns out that they are,
you are interspersing your reading and

87
00:05:33.910 --> 00:05:34.740
your writing, right?

88
00:05:34.740 --> 00:05:37.790
You didn't even know it because they're
in two totally different files.

89
00:05:37.790 --> 00:05:40.173
You haven't touched one
of them in forever, and

90
00:05:40.173 --> 00:05:41.928
it's clearly happening, right?

91
00:05:41.928 --> 00:05:43.820
That's how I had it in my code base.

92
00:05:43.820 --> 00:05:46.236
When I first went to go find the example,

93
00:05:46.236 --> 00:05:50.230
my plan was to do a Cmd+Shift +F
in the project, find in project.

94
00:05:50.230 --> 00:05:54.392
Search for some of the layout properties
that I knew were gonna be problematic.

95
00:05:54.392 --> 00:05:58.460
And then give blame to somebody and
make fun of them, right?

96
00:05:58.460 --> 00:06:01.640
There was no examples in the code where
you could see that happening, right?

97
00:06:01.640 --> 00:06:02.830
One after the other but

98
00:06:02.830 --> 00:06:06.221
clearly it is because this stuff
was just separated out and out.

99
00:06:06.221 --> 00:06:09.380
All right, so then what can you do, right?

100
00:06:09.380 --> 00:06:10.200
We can try some things.

101
00:06:10.200 --> 00:06:13.290
One would be to use requestAnimationFrame.

102
00:06:13.290 --> 00:06:16.909
RequestAnimationFrame basically tells the
browser, hey, when you're getting ready to

103
00:06:16.909 --> 00:06:19.560
render something again,
let me give you this function.

104
00:06:19.560 --> 00:06:21.020
And you can go ahead and call it, right?

105
00:06:21.020 --> 00:06:24.311
But by definition, that is later, right?

106
00:06:24.311 --> 00:06:27.209
And so what we can do is we can
do it off our reading now and

107
00:06:27.209 --> 00:06:29.162
then we can always just we can be hey,

108
00:06:29.162 --> 00:06:33.069
whenever am going to write to the DOM I'll
use a requestAnimationFrame so

109
00:06:33.069 --> 00:06:37.370
that I know that on this pass of running
all my code all my JaveScripts gonna read.

110
00:06:37.370 --> 00:06:40.149
And I know later when all
those requestAnimationFrames

111
00:06:40.149 --> 00:06:42.700
come back to roost all
the writing will be batched.

112
00:06:42.700 --> 00:06:45.578
I mean we can give it a shot, let's see.

113
00:06:45.578 --> 00:06:49.320
So this will involve effectively
undoing the change we did before.

114
00:06:51.860 --> 00:06:53.795
How many times can you hit Cmd+Z?

115
00:06:53.795 --> 00:06:58.980
All right, now, there we go.

116
00:06:58.980 --> 00:07:01.530
Cool, so let's grab this part
where we actually did the writing.

117
00:07:01.530 --> 00:07:03.620
And we'll just say requestAnimationFrame.

118
00:07:08.570 --> 00:07:13.160
&gt;&gt; Steve Kinney: And
we'll put it in there.

119
00:07:13.160 --> 00:07:15.731
All right, so now we know it's
not gonna happen immediately.

120
00:07:15.731 --> 00:07:18.701
Which means all the reads will happen and
then all the writes will happen.

121
00:07:21.280 --> 00:07:25.960
And we'll refresh the page,
I'm not gonna do recording yet?

122
00:07:25.960 --> 00:07:29.130
Seems pretty smooth, right?

123
00:07:29.130 --> 00:07:31.191
Seems good I'm into it.

124
00:07:31.191 --> 00:07:33.320
All right, let's do a recording.

125
00:07:42.533 --> 00:07:43.800
&gt;&gt; Steve Kinney: I should
probably stop that.

126
00:07:48.730 --> 00:07:51.020
&gt;&gt; Steve Kinney: So
we got this bigger flame chart right here.

127
00:07:51.020 --> 00:07:53.151
And part of it is that's
the Anonymous function

128
00:07:53.151 --> 00:07:55.130
from the requestAnimationFrame, right?

129
00:07:55.130 --> 00:07:58.010
Here's the frame, use Anonymous function.

130
00:07:58.010 --> 00:08:02.521
Then we are gonna forage but
look at that, we are calculating a lot of

131
00:08:02.521 --> 00:08:07.050
requestAnimationFrames cuz we
are doing it a whole bunch, right?

132
00:08:07.050 --> 00:08:12.690
We are only using requestAnimationFrame,
to make it happen this thing happen later.

133
00:08:12.690 --> 00:08:14.856
We didn't need these many
animation frames, right?

134
00:08:14.856 --> 00:08:19.692
It's actually stopping us
from animation framing.

135
00:08:19.692 --> 00:08:24.412
[LAUGH] It's stopping us from making that
frame in time for the animation, right?

136
00:08:24.412 --> 00:08:28.610
It's less bad than the previous version,
right?

137
00:08:28.610 --> 00:08:32.550
Twice as better of half as bad depending
on if you are an optimist or pessimist.

138
00:08:32.550 --> 00:08:37.530
But it's certainly not good because
we are doing a lot of repeated work.

139
00:08:37.530 --> 00:08:39.210
And that's not great.

