WEBVTT

1
00:00:00.340 --> 00:00:05.520
&gt;&gt; Steve Kinney: We're going to move
into what I think is the crown jewel

2
00:00:05.520 --> 00:00:07.740
of a lot of stuff we've
been talking about today.

3
00:00:07.740 --> 00:00:11.780
Imagine first the JavaScript performance
and the network performance.

4
00:00:11.780 --> 00:00:16.520
If I said, you can fix both dramatically
with one weird trick, right?

5
00:00:16.520 --> 00:00:19.960
You'd click that link bait article,
you totally would, right?

6
00:00:19.960 --> 00:00:21.160
So let's talk about that,

7
00:00:21.160 --> 00:00:24.980
which is lazy-loading and
pre-loading with React and webpack.

8
00:00:24.980 --> 00:00:27.240
We know that there's a cost to Javascript,
right?

9
00:00:27.240 --> 00:00:30.176
We know that there is a cost
to the network, right?

10
00:00:30.176 --> 00:00:34.310
It'd be cool if we could
reduce that a little bit.

11
00:00:34.310 --> 00:00:36.900
First, just to kinda make my
point I'm gonna go out for

12
00:00:36.900 --> 00:00:38.060
the two golden rules again.

13
00:00:39.140 --> 00:00:42.630
Not doing stuff is
faster than doing stuff.

14
00:00:42.630 --> 00:00:45.120
This is I think a reworded
version of the first one.

15
00:00:45.120 --> 00:00:50.680
Doing stuff later is a way to not do
it now, and is thereby faster, right?

16
00:00:50.680 --> 00:00:53.390
Cuz it's a version of not doing it now.

17
00:00:53.390 --> 00:00:57.290
So there's a tweet from Sean Larkin
who works in the Webpack team.

18
00:00:57.290 --> 00:01:01.010
It's kind of setting a goal of bundles,
all bundles,

19
00:01:01.010 --> 00:01:03.050
all JavaScript being
less than 300 kilobytes.

20
00:01:03.050 --> 00:01:06.570
You're like, but you showed me a graph,
and the graph is big, [LAUGH] right?

21
00:01:06.570 --> 00:01:10.200
My application when
fully loaded is I think

22
00:01:10.200 --> 00:01:15.660
like five megabytes of stuff,
the whole way through.

23
00:01:15.660 --> 00:01:18.990
But notice there,
there's a word kind of lazily or not.

24
00:01:18.990 --> 00:01:21.990
What if you don't need
everything all at once.

25
00:01:21.990 --> 00:01:25.150
So, I think about the app I
working on is InGrid, right?

26
00:01:25.150 --> 00:01:28.960
There's a full editor for manipulating
campaigns, and there's a code editor and

27
00:01:28.960 --> 00:01:30.340
there's all of these crazy things.

28
00:01:30.340 --> 00:01:33.260
There's a thing for
uploading your contacts and

29
00:01:33.260 --> 00:01:34.718
a bunch of different features.

30
00:01:34.718 --> 00:01:41.940
I don't know what the person came there
to do, so I send them everything, right?

31
00:01:41.940 --> 00:01:45.460
They might not need that
entire DragonDrop editor and

32
00:01:45.460 --> 00:01:47.790
the WizzyWig text editor like wake and
style stuff.

33
00:01:47.790 --> 00:01:50.220
They might not need the code
editor if they're using that.

34
00:01:50.220 --> 00:01:55.540
They might not need either of those if
they're just uploading some new context.

35
00:01:55.540 --> 00:01:59.450
They might not need even that if they are
just going and tweaking some settings or

36
00:01:59.450 --> 00:02:00.970
dealing with some alert that we sent them,
or

37
00:02:00.970 --> 00:02:04.290
checking on the stats of their
most recent campaign, right?

38
00:02:04.290 --> 00:02:05.620
But right now, and

39
00:02:05.620 --> 00:02:10.270
I'm working on fixing this, but right now,
we send them absolutely everything, right?

40
00:02:10.270 --> 00:02:13.710
And they receive all this code,
they have to parcel this code.

41
00:02:13.710 --> 00:02:15.530
Like they pay that cost,

42
00:02:15.530 --> 00:02:20.520
that's a giant yellow slug that I showed
you on the screen shot of our application.

43
00:02:20.520 --> 00:02:23.350
In fairness that is our drag and
drop editor on that page.

44
00:02:23.350 --> 00:02:26.080
But considering I said in
the same bundle no matter what,

45
00:02:26.080 --> 00:02:27.930
they're paying that cost regardless.

46
00:02:27.930 --> 00:02:32.040
So if I can send them less code,
they have to like,

47
00:02:32.040 --> 00:02:34.050
less code has to go through the tube.

48
00:02:34.050 --> 00:02:36.760
Less code shows up at the other side
of the tube which means they have to

49
00:02:36.760 --> 00:02:39.000
parse less code, all right?

50
00:02:39.000 --> 00:02:42.970
If they parse less code, that's gonna be
faster, cuz all the crazy stuff we saw

51
00:02:42.970 --> 00:02:48.310
earlier, not doing that is
faster than doing it, right?

52
00:02:48.310 --> 00:02:49.340
And then we can show them,

53
00:02:49.340 --> 00:02:53.110
then if they want to go to the editor,
I'll send them that code later, right?

54
00:02:53.110 --> 00:02:57.970
And I won't send them the model space
code editor, the context uploading thing.

55
00:02:57.970 --> 00:03:02.390
As they need stuff,
I will send them small bits more that they

56
00:03:02.390 --> 00:03:06.840
actually need as they go
through the application, right?

57
00:03:06.840 --> 00:03:11.240
Cuz doing it later is a way to not do
it now, and not doing it now is faster.

