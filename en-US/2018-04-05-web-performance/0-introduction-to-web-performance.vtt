WEBVTT

1
00:00:03.365 --> 00:00:06.000
&gt;&gt; Steve Kinney: Hello,
we're gonna talk about web performance.

2
00:00:07.470 --> 00:00:09.010
[COUGH] First thing's first.

3
00:00:09.010 --> 00:00:15.647
My name is Steve, and I am a principal
frontend engineer at SendGrid.

4
00:00:15.647 --> 00:00:17.854
We do a bunch of things at SendGrid,

5
00:00:17.854 --> 00:00:21.770
the main business is sending
out a billion emails a day.

6
00:00:21.770 --> 00:00:27.710
So if you've ever taken an Uber and gotten
an email receipt, we sent that to you.

7
00:00:27.710 --> 00:00:33.877
Or lost a bid on eBay,
we informed you of that unfortunate loss.

8
00:00:33.877 --> 00:00:34.805
Spotify, Pandora,

9
00:00:34.805 --> 00:00:38.340
all of those kind of emails basically go
through SendGrid to get to your inboxes.

10
00:00:38.340 --> 00:00:42.526
Easy way to think about it is
something like Twillio but for email.

11
00:00:42.526 --> 00:00:45.056
I don't work on that part,

12
00:00:45.056 --> 00:00:50.810
I work on a rich client side
application for building emails.

13
00:00:50.810 --> 00:00:55.082
Which is really great, you get all the
advantages of getting to work in React in

14
00:00:55.082 --> 00:00:59.051
the modern web and then build emails
that should render in ala 2007.

15
00:00:59.051 --> 00:01:03.971
Which is a lot of fun, just a fun trivia
fact is that Outlook, you're like,

16
00:01:03.971 --> 00:01:08.170
yeah that probably uses
Internet Explorer's rendering engine.

17
00:01:08.170 --> 00:01:12.071
No no, it uses Microsoft Word.

18
00:01:12.071 --> 00:01:15.853
So that's something we can talk
about later if you're interested.

19
00:01:15.853 --> 00:01:18.718
But yeah, and
the thing about a large client set up,

20
00:01:18.718 --> 00:01:23.650
cuz this is effectively a desktop app
that we're building the browser, right.

21
00:01:23.650 --> 00:01:26.670
And you come across some
interesting problems.

22
00:01:26.670 --> 00:01:30.760
I did a workshop a few months
ago on managing state,

23
00:01:30.760 --> 00:01:34.170
how do you manage all the things that
are happening in this application?

24
00:01:34.170 --> 00:01:38.378
The other question, and
kind of the theme of today,

25
00:01:38.378 --> 00:01:43.160
is how do you do it in a way that
actually stays performant for

26
00:01:43.160 --> 00:01:47.963
users both on a $3,000 MacBook
as well as an older PC?

27
00:01:47.963 --> 00:01:52.740
How do you have it working for people who
are a stone's throw from the data center

28
00:01:52.740 --> 00:01:56.961
that it's hosted from in Chicago as
well as across the world, right?

29
00:01:56.961 --> 00:02:01.132
And also how does the application
stay performant as it's alive for

30
00:02:01.132 --> 00:02:02.530
a long period of time?

31
00:02:02.530 --> 00:02:06.700
So we're gonna look at performance and
figure out how

32
00:02:06.700 --> 00:02:09.470
do we think about performance and what are
the trade offs that we are going to make?

33
00:02:09.470 --> 00:02:15.140
There are some totally do this thing and
performance is gonna be great, right.

34
00:02:15.140 --> 00:02:17.496
But a lot of times you have
to make a trade off or

35
00:02:17.496 --> 00:02:19.987
you have to give up
something to get something.

36
00:02:19.987 --> 00:02:23.402
And depending on the kind of
application that you're building,

37
00:02:23.402 --> 00:02:25.780
the answer to those
trade offs is different.

38
00:02:25.780 --> 00:02:29.060
So we'll kind of talk a little bit
about the theory, the trade offs,

39
00:02:29.060 --> 00:02:31.310
how stuff works under the hood.

40
00:02:31.310 --> 00:02:34.880
Because a lot of the performance advise
that you'll just read on the Internet

41
00:02:34.880 --> 00:02:37.290
could very well be outdated.

42
00:02:37.290 --> 00:02:41.350
And if you just kinda follow all those
things, just mandates that you have to do

43
00:02:41.350 --> 00:02:45.510
in your application, it's likely
that they're either not helping, or

44
00:02:45.510 --> 00:02:47.470
worse, hurting the performance
of your application.

