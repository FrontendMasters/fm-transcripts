WEBVTT

1
00:00:00.210 --> 00:00:01.480
&gt;&gt; Steve Kinney: So
how do we improve that?

2
00:00:01.480 --> 00:00:05.370
We have to measure.

3
00:00:05.370 --> 00:00:07.940
There's no point like I'm gonna
do this performance optimization.

4
00:00:07.940 --> 00:00:12.500
How do you know that A it worked or B you
didn't actually slow things down, right?

5
00:00:12.500 --> 00:00:15.520
Cuz that is sometimes possible if you
don't actually know what you're doing.

6
00:00:15.520 --> 00:00:16.868
So we always want to measure first.

7
00:00:16.868 --> 00:00:21.210
This is a quote from Rob Pike,
which is measure.

8
00:00:21.210 --> 00:00:23.670
Don't tune for
speed until you've measured, and

9
00:00:23.670 --> 00:00:27.270
even then don't unless one
part overwhelms the rest.

10
00:00:27.270 --> 00:00:31.655
It's easy to start with the first page,
and there's a performance bottle neck, but

11
00:00:31.655 --> 00:00:33.624
it might not be the most important one.

12
00:00:33.624 --> 00:00:38.271
There's this application called Skylight,
which is rails performance monitoring

13
00:00:38.271 --> 00:00:41.053
thing, and
what it does is it rates stuff by agony.

14
00:00:41.053 --> 00:00:44.807
The agony metric is how slow that page is,

15
00:00:44.807 --> 00:00:49.360
multiplied by how many
people visit that page.

16
00:00:49.360 --> 00:00:52.929
So if your terms of service
page is slow to load,

17
00:00:52.929 --> 00:00:57.503
is that the first thing you
should optimize vs the home page?

18
00:00:57.503 --> 00:01:00.480
The home page probably won't be.

19
00:01:00.480 --> 00:01:03.400
Like yeah the home page which gets all
this traffic versus the terms of service

20
00:01:03.400 --> 00:01:05.470
which nobody reads right?

21
00:01:05.470 --> 00:01:09.258
You should like optimize the things that
are kind of important and start there.

22
00:01:09.258 --> 00:01:13.594
So yeah we don't wanna go just blindly
like you can see this and go like I know

23
00:01:13.594 --> 00:01:18.620
all these things now I'm gonna go and
then implement it my application but like.

24
00:01:18.620 --> 00:01:21.510
We want to make sure we know
what's happening because every

25
00:01:21.510 --> 00:01:23.430
abstraction has some kind of trade-off.

26
00:01:23.430 --> 00:01:27.060
We'll see things in this course today
where it's like the Chrome team

27
00:01:27.060 --> 00:01:31.570
implemented this one feature to make
things faster most of the time, but

28
00:01:31.570 --> 00:01:35.090
it turns out that some of the time
it makes some of the things slower.

29
00:01:35.090 --> 00:01:38.580
Unless you're measuring you're
gonna have no way of knowing that.

30
00:01:38.580 --> 00:01:42.090
And you could be doing quote unquote
a bad thing to your application,

31
00:01:42.090 --> 00:01:44.410
in the name of doing a good thing, right?

32
00:01:44.410 --> 00:01:45.820
So it's important to measure because like,

33
00:01:45.820 --> 00:01:50.230
yeah, it gets really like easy to see the
very next pull request on your app, and

34
00:01:50.230 --> 00:01:54.020
start like dispensing advice that you
read on a blog post about performance,

35
00:01:54.020 --> 00:01:56.069
when we don't actually have
any real data to talk about.

36
00:01:58.020 --> 00:02:00.700
And it is one of those things where I do
think we do need to regularly be looking

37
00:02:00.700 --> 00:02:02.690
at performance,
because if we're not, yeah,

38
00:02:02.690 --> 00:02:06.730
yeah it's fast enough, until it's not,
and then it's usually not one big

39
00:02:06.730 --> 00:02:11.140
performance thing that is your problem,
but it's like death by a thousand cuts.

40
00:02:11.140 --> 00:02:15.260
It's a thousand things that take
about twice as long as they should,

41
00:02:15.260 --> 00:02:19.479
that end up bringing your application
to a crawl and I can testify to that.

42
00:02:21.050 --> 00:02:22.990
So, just some things to think about.

43
00:02:22.990 --> 00:02:27.340
Are we testing on fancy Macbook Pros or
consumer grade hardware?

44
00:02:27.340 --> 00:02:29.650
Are we simulating less than
perfect network conditions?

45
00:02:29.650 --> 00:02:34.400
We'll talk a little bit about how slow
wi-fi is actually phenomenally worse

46
00:02:34.400 --> 00:02:38.820
than like or inconsistent WiFi is even
worst than a consistent slow WiFi,

47
00:02:38.820 --> 00:02:41.380
but slow WiFi even for
users is just general.

48
00:02:41.380 --> 00:02:43.050
I'd rather have no WiFi than slow WiFi.

49
00:02:43.050 --> 00:02:46.513
I'd rather be okay, there's no Internet,
I'm gonna read a book.

50
00:02:46.513 --> 00:02:50.190
I can see the timeline loading.

51
00:02:52.700 --> 00:02:53.430
Like not cool.

52
00:02:53.430 --> 00:02:56.053
And then finally thinking
about performance budgets.

53
00:02:56.053 --> 00:02:58.435
I think this is a really
useful technique of like,

54
00:02:58.435 --> 00:03:00.510
this is the state of our application.

55
00:03:00.510 --> 00:03:02.090
We don't want it to get this much slower.

56
00:03:02.090 --> 00:03:03.640
We'd like it to get this much faster and

57
00:03:03.640 --> 00:03:06.810
starting there and then setting those
new budgets as you improve some stuff.

58
00:03:09.690 --> 00:03:14.530
So the one last thing to think about is,
measuring is not free.

59
00:03:14.530 --> 00:03:18.396
I'm gonna put a bunch of console logs in
my application, they're gonna log the time

60
00:03:18.396 --> 00:03:21.403
every second except those console
logs need to execute, right?

61
00:03:21.403 --> 00:03:23.800
And you are slowing down
your app by looking at it.

62
00:03:23.800 --> 00:03:26.360
And that's another kind of
important thing to keep in mind,

63
00:03:26.360 --> 00:03:30.370
is you can put all these
reporting matrix everywhere.

64
00:03:30.370 --> 00:03:35.012
But you will also slow down
the application by doing that, so

65
00:03:35.012 --> 00:03:37.023
don't get carried away.

66
00:03:37.023 --> 00:03:41.063
And one final piece of advice is a lot of
this stuff is gonna is thinking about what

67
00:03:41.063 --> 00:03:42.790
we call micro-optimizations.

68
00:03:42.790 --> 00:03:46.600
These tiny little things we would get
the this button to go just a little bit

69
00:03:46.600 --> 00:03:47.528
faster, right.

70
00:03:47.528 --> 00:03:51.736
In the state management course that we
have on Front End Masters we talk a little

71
00:03:51.736 --> 00:03:55.370
bit about the fact that sometimes
just the way you store your data and

72
00:03:55.370 --> 00:03:57.590
not doing a bunch of crazy stuff.

73
00:03:57.590 --> 00:04:02.250
And the way you architect the application,
itself, can make stuff faster

74
00:04:02.250 --> 00:04:05.960
before you even worry about the actual
parts and compilation performance.

75
00:04:05.960 --> 00:04:09.940
Sometimes it's like, hey, you actually
have a table with 1000 rows on the page.

76
00:04:09.940 --> 00:04:13.760
And having all those
rows in the DOM is slow.

77
00:04:13.760 --> 00:04:16.230
What if you just added pagination?

78
00:04:16.230 --> 00:04:19.269
Sometimes the answer is not some of
the stuff we're going to talk about today.

79
00:04:19.269 --> 00:04:21.394
I want to make that disclaimer now.

80
00:04:21.394 --> 00:04:24.779
Sometimes just thinking about
the design of your application,

81
00:04:24.779 --> 00:04:27.790
the way you manage the state
in your application.

82
00:04:27.790 --> 00:04:32.090
There's not one silver bullet that's going
to solve all your performance problems,

83
00:04:32.090 --> 00:04:36.670
which is why we all get paid Money, right.

84
00:04:36.670 --> 00:04:41.660
Cuz if was an easy, just apply this rule,
we'd have computers do it, right.

85
00:04:41.660 --> 00:04:45.180
Everything that we can automate to the
point where there's no critical thinking

86
00:04:45.180 --> 00:04:48.950
about it, we have put into algorithms,
and that's how the ones and

87
00:04:48.950 --> 00:04:53.070
zeroes that come over, the error
into my computer, make stuff happen.

88
00:04:53.070 --> 00:04:53.570
All right.

89
00:04:54.650 --> 00:04:58.460
Final disclaimer as we go through this
is that there are three tiers of advice,

90
00:04:58.460 --> 00:05:00.480
definitely do this.

91
00:05:00.480 --> 00:05:03.040
Maybe do this, but
measure before and after.

92
00:05:03.040 --> 00:05:06.550
And only do this if you have
a problem that needs solving, right?

93
00:05:06.550 --> 00:05:10.740
And so, we kind of use these as our three
benchmarks as we talk about different

94
00:05:10.740 --> 00:05:14.760
techniques cuz again I'll say this,
I'm going to say this 100 times today.

95
00:05:14.760 --> 00:05:20.810
Some things might make your application
faster in some cases or slower in another.

96
00:05:20.810 --> 00:05:24.220
And like, unless you know what the problem
is, you don't know what's going to happen.

97
00:05:26.490 --> 00:05:31.570
Now, I'm happy to unveil to you,
the TLDR of this course,

98
00:05:31.570 --> 00:05:33.570
which are my two golden
rules of performance.

99
00:05:33.570 --> 00:05:37.520
Are you all prepared for this?

100
00:05:38.520 --> 00:05:42.285
Rule number one,
doing less stuff takes less time.

101
00:05:42.285 --> 00:05:45.061
[LAUGH] You laugh but like literally,

102
00:05:45.061 --> 00:05:49.470
[LAUGH] this is all we're doing today,
is like how do we do less stuff?

103
00:05:49.470 --> 00:05:52.460
Cuz anytime you do less stuff it's faster.

104
00:05:52.460 --> 00:05:55.260
Not doing something is way
faster than doing something.

105
00:05:57.496 --> 00:05:58.060
&gt;&gt; Steve Kinney: Cool.

106
00:05:59.430 --> 00:06:00.520
I ruined this slide.

107
00:06:00.520 --> 00:06:01.376
We'll go on.

108
00:06:01.376 --> 00:06:06.630
[LAUGH] To the second one which is,
one would argue, this is a [INAUDIBLE] to

109
00:06:06.630 --> 00:06:12.610
the first one, which is, doing stuff
later is better than doing it now.

110
00:06:12.610 --> 00:06:14.450
Right?
But doing it later,

111
00:06:14.450 --> 00:06:16.720
you're not doing it now.

112
00:06:17.950 --> 00:06:19.330
And what's faster than doing stuff?

113
00:06:20.400 --> 00:06:21.790
Not doing stuff.

114
00:06:21.790 --> 00:06:25.690
So, when in doubt, if you can get
away with not doing it, don't do it.

115
00:06:25.690 --> 00:06:29.128
If you have to do it and
you can do it later, do it later.

116
00:06:29.128 --> 00:06:31.627
One would argue this
is performance advice,

117
00:06:31.627 --> 00:06:34.332
another person might argue
this is life advice.

118
00:06:34.332 --> 00:06:36.610
I'll let you be the judge of that.

119
00:06:36.610 --> 00:06:41.829
I'm not going to go down that road but
it's definitely true for web performance.

120
00:06:42.920 --> 00:06:44.350
All right, rough outline of the day.

121
00:06:44.350 --> 00:06:46.654
Talk about JavaScript performance.

122
00:06:46.654 --> 00:06:49.639
One would argue that if we were doing this
in chronological order we were going to

123
00:06:49.639 --> 00:06:51.154
talk about load performance first, but

124
00:06:51.154 --> 00:06:52.950
we're not doing this in
chronological order.

125
00:06:52.950 --> 00:06:54.040
We're doing this in my order,

126
00:06:54.040 --> 00:06:56.370
which is we're going to talk
about JavaScript performance.

127
00:06:56.370 --> 00:07:00.480
We wanna write code that runs faster,
later, or not at all, right?

128
00:07:00.480 --> 00:07:02.275
Cuz not doing stuff is faster.

129
00:07:02.275 --> 00:07:07.450
Got it, so we'll talk a little bit
about how your JavaScript is compiled.

130
00:07:07.450 --> 00:07:11.470
We send this text file over
to the browser, then what?

131
00:07:11.470 --> 00:07:13.820
We'll talk a little bit
about what happens there.

132
00:07:13.820 --> 00:07:17.426
Because if you just Google JavaScript
performance, half the stuff

133
00:07:17.426 --> 00:07:21.737
in those blog posts was true when the blog
post was written, is not true anymore.

134
00:07:21.737 --> 00:07:26.157
And it can become very difficult to
figure out like what actually is true,

135
00:07:26.157 --> 00:07:27.480
what's not true.

136
00:07:27.480 --> 00:07:30.350
What true in your application,
what's not true in your application, so

137
00:07:30.350 --> 00:07:34.170
actually we talk about how
JavaScript engine works.

138
00:07:34.170 --> 00:07:35.440
We'll look at V8 in specific.

139
00:07:36.540 --> 00:07:40.310
We'll actually see how the entire
process of, you sent code.

140
00:07:40.310 --> 00:07:43.780
There is code on page,
actually happens under the hood.

141
00:07:43.780 --> 00:07:47.620
And we'll actually benchmark it
ourselves and try to optimize and

142
00:07:47.620 --> 00:07:50.280
unoptimize stuff and see what happens.

143
00:07:50.280 --> 00:07:51.880
Then, okay, we've run code.

144
00:07:51.880 --> 00:07:54.080
We're ready to build app.

145
00:07:54.080 --> 00:07:55.500
We need to think about
rendering performance.

146
00:07:55.500 --> 00:07:59.280
Cuz that JavaScript code, as I said
earlier, does not exist in a vacuum.

147
00:07:59.280 --> 00:08:01.890
It has to interact with the.

148
00:08:01.890 --> 00:08:05.050
Unless you're just writing code that's
mining Bitcoin in their browser while

149
00:08:05.050 --> 00:08:10.440
they're doing something else, likely
you are changing the user interface.

150
00:08:10.440 --> 00:08:13.020
There are implications to that
that we need to think about.

151
00:08:14.050 --> 00:08:15.260
Lastly, load performance.

152
00:08:15.260 --> 00:08:18.840
If you do not get the application to
the user, the other two are irrelevant.

