WEBVTT

1
00:00:00.110 --> 00:00:01.290
&gt;&gt; Steve Kinney: There is a issue here,
right?

2
00:00:02.510 --> 00:00:08.930
I only had to solve this problem because
I was keeping my state in the dom, right?

3
00:00:08.930 --> 00:00:12.231
I had to go measure stuff
before I could mutate it.

4
00:00:12.231 --> 00:00:17.910
I don't keep my data in the dom anymore,
I write angular or ember or react.

5
00:00:17.910 --> 00:00:21.839
I keep things in state, right?

6
00:00:21.839 --> 00:00:27.221
So you could for instance put together
some kind of component like this which

7
00:00:27.221 --> 00:00:32.740
keeps track and this is a half component,
it's what I could fit on a screen.

8
00:00:32.740 --> 00:00:35.570
I'm gonna keep an array
of all of my width.

9
00:00:35.570 --> 00:00:38.370
I'm gonna shoot them under
the page over here and

10
00:00:38.370 --> 00:00:40.550
then I will just double those numbers and
re-render.

11
00:00:40.550 --> 00:00:43.299
Before you would not have
to read from the dom and

12
00:00:43.299 --> 00:00:46.748
if don't read from the dom you
can write as much as you want.

13
00:00:46.748 --> 00:00:50.074
You're never gonna have
a layout trashing issue,

14
00:00:50.074 --> 00:00:54.866
never is a strong word cuz I showed you
one, it was in react, but generally

15
00:00:54.866 --> 00:01:00.457
speaking this very isolated incident that
should solve all of our problems, right?

16
00:01:00.457 --> 00:01:05.229
So lets see what happens, it turns out I
have a React running with this React app

17
00:01:05.229 --> 00:01:07.702
running, with the same thing going on.

18
00:01:16.330 --> 00:01:19.889
&gt;&gt; Steve Kinney: And we can measure it,
we can compare the differences.

19
00:01:21.492 --> 00:01:28.422
&gt;&gt; Steve Kinney: So
go ahead, do a recording.

20
00:01:36.354 --> 00:01:40.390
&gt;&gt; Steve Kinney: And you can see that,
wow, this is kinda weird.

21
00:01:40.390 --> 00:01:43.150
There's a lot of stuff happening in here.

22
00:01:43.150 --> 00:01:43.890
That's not great.

23
00:01:43.890 --> 00:01:48.330
I told you you can get React
information in the user timing API.

24
00:01:48.330 --> 00:01:53.150
So you can see, this is reconciling
the React tree and an app update,

25
00:01:53.150 --> 00:01:54.540
so on and so forth, right?

26
00:01:54.540 --> 00:01:57.930
There's a lot of stuff happening here and
57 milliseconds isn't great for

27
00:01:57.930 --> 00:01:59.190
changing a bunch of bars.

28
00:02:00.840 --> 00:02:06.220
But it turns out that I am
committing one of the worst

29
00:02:06.220 --> 00:02:11.490
crimes in web performance which is,
I'm using React in development mode and

30
00:02:11.490 --> 00:02:15.230
expecting production level performance.

31
00:02:15.230 --> 00:02:16.620
React does a bunch of stuff.

32
00:02:16.620 --> 00:02:18.780
I told you before, measuring takes time.

33
00:02:18.780 --> 00:02:21.380
So React is doing a whole bunch
of stuff in development mode

34
00:02:21.380 --> 00:02:24.490
to give you these pretty things and
manage a whole bunch of stuff.

35
00:02:24.490 --> 00:02:28.342
And checking prop types and
all these things and that stuff is slow.

36
00:02:28.342 --> 00:02:33.027
And so if you have the React developer
tools sometimes you can see a page

37
00:02:33.027 --> 00:02:37.476
where this will be black if it's
using React in production mode and

38
00:02:37.476 --> 00:02:42.090
it will be this like scary orange
if it's used in development mode.

39
00:02:42.090 --> 00:02:43.300
As fun to like keep that going,

40
00:02:43.300 --> 00:02:46.650
just go visit sites that are still
running in development mode.

41
00:02:46.650 --> 00:02:49.620
I mean, and it's like one of
the things sometimes I think

42
00:02:50.631 --> 00:02:54.610
says they do it on purpose I mean if they
say it, that means they know about it and

43
00:02:54.610 --> 00:02:56.960
they've decided that that's
now their new state.

44
00:02:56.960 --> 00:03:01.970
Right, some websites are totally doing it
by accident sometimes it's like don't know

45
00:03:01.970 --> 00:03:05.450
about it and sometimes it's like somebody
tried to change the webpack build and

46
00:03:05.450 --> 00:03:07.870
now we're accidentally shipping
the development code, right?

47
00:03:07.870 --> 00:03:09.600
This has happened to my app a few times.

48
00:03:09.600 --> 00:03:11.360
So this is really helpful.

49
00:03:11.360 --> 00:03:15.030
So it turns out 57 milliseconds
we're doing all of this extra stuff.

50
00:03:16.500 --> 00:03:18.170
That's not great, right?

51
00:03:18.170 --> 00:03:20.400
So having it in development
mode is suboptimal.

52
00:03:21.430 --> 00:03:25.160
Let's actually compare what that looks
like though, because it turns out that I

53
00:03:25.160 --> 00:03:29.820
also have a version of this app in
that repository that is built for

54
00:03:29.820 --> 00:03:30.560
production mode.

55
00:03:30.560 --> 00:03:35.585
So let's go ahead and actually,

56
00:03:35.585 --> 00:03:39.716
I should have it over here.

57
00:03:39.716 --> 00:03:44.220
Same application, let's record it again.

58
00:03:49.490 --> 00:03:51.245
Wow, that's much better right?

59
00:03:51.245 --> 00:03:52.529
That's...let's compare and contrast.

60
00:03:54.060 --> 00:03:56.130
Giant spike of sad yellow.

61
00:03:58.870 --> 00:03:59.370
Little bump.

62
00:04:00.380 --> 00:04:04.480
Alright, the simple fact of
being in development mode

63
00:04:04.480 --> 00:04:08.830
is a huge difference
versus production mode.

64
00:04:08.830 --> 00:04:11.580
Right, now you can see there's still
a bunch of stuff happening here.

65
00:04:11.580 --> 00:04:13.690
And this is again the eternal trade for

66
00:04:13.690 --> 00:04:16.530
performance when it comes to
using a framework, right.

67
00:04:16.530 --> 00:04:19.530
The framework is gonna make
decisions a lot of the time for you.

68
00:04:19.530 --> 00:04:22.430
It make it easier to keep your state
out of the dump which like helps

69
00:04:22.430 --> 00:04:24.100
you avoid layout trashing.

70
00:04:24.100 --> 00:04:27.190
They like batch all your dump things for
you but they are JavaScript code and

71
00:04:27.190 --> 00:04:29.810
they take a certain
amount of overhead Right?

72
00:04:29.810 --> 00:04:31.800
And that is always
the tradeoff you need to make.

73
00:04:31.800 --> 00:04:36.310
I am of the belief system that generally,
especially if you have a team and

74
00:04:36.310 --> 00:04:39.200
you have a wide range of experiences and
you're trying to get product out

75
00:04:39.200 --> 00:04:43.350
the door that the cost of using
a framework is beneficial for you, right?

76
00:04:43.350 --> 00:04:44.670
But if you had a bunch of,

77
00:04:44.670 --> 00:04:48.165
if you sat there and really wanted
to fine tune your application,

78
00:04:48.165 --> 00:04:53.980
hand-crafted application will probably be
faster But like, probably not worth it.

79
00:04:53.980 --> 00:04:56.370
But yeah,
you can see there is some overhead.

80
00:04:56.370 --> 00:04:59.220
But you can see that we're still at like,
9.3 milaseconds.

81
00:04:59.220 --> 00:05:01.060
I'm gonna call this a win, right?

82
00:05:01.060 --> 00:05:03.233
It's just something to consider and
something to think about.

83
00:05:08.401 --> 00:05:09.580
&gt;&gt; Steve Kinney: So yeah.

84
00:05:09.580 --> 00:05:12.080
Friendly fact,
production mode is important in React.

85
00:05:12.080 --> 00:05:14.110
I have another slide that's
gonna say this again later,

86
00:05:14.110 --> 00:05:16.650
because I've literally made
this mistake multiple times.

87
00:05:16.650 --> 00:05:20.030
So I feel like if I keep repeating myself,
you will think about it.

88
00:05:20.030 --> 00:05:23.190
And if you don't write React,
there's probably a version of this for

89
00:05:23.190 --> 00:05:25.350
your application and
is definitely worth checking.

90
00:05:25.350 --> 00:05:28.700
Cuz there was a dramatic
change of 9.3 milliseconds.

91
00:05:28.700 --> 00:05:30.290
I figured what the first thing was, but

92
00:05:30.290 --> 00:05:33.950
it was a lot longer with a lot
more sadness in that graph.

93
00:05:33.950 --> 00:05:37.530
So definitely make sure you're using
production mode for whatever it is.

94
00:05:37.530 --> 00:05:39.190
All right, cool.

95
00:05:40.190 --> 00:05:46.518
So
&gt;&gt; Steve Kinney: So

96
00:05:46.518 --> 00:05:49.885
it doesn't,
does React solve your problems for you?

97
00:05:49.885 --> 00:05:51.180
Right?
Maybe, maybe not, right?

98
00:05:51.180 --> 00:05:55.000
You can still see that slide that
I showed earlier where I have

99
00:05:55.000 --> 00:05:57.110
a React app that still has this problem.

100
00:05:57.110 --> 00:05:58.810
It's not gonna get you all the way there.

101
00:05:58.810 --> 00:06:01.810
Having a framework is helpful,
you still need to be mindful.

102
00:06:01.810 --> 00:06:03.610
You still need to measure.

103
00:06:03.610 --> 00:06:05.680
Right and these things can still happen.

104
00:06:05.680 --> 00:06:08.440
I assume with your question you're
thinking about like what was

105
00:06:08.440 --> 00:06:09.700
the answer to this.

106
00:06:09.700 --> 00:06:10.220
I don't know yet.

107
00:06:10.220 --> 00:06:10.760
I haven't dug in.

108
00:06:10.760 --> 00:06:16.000
[LAUGHS] But looks like I've got a few
little issues here on the simple drag

109
00:06:16.000 --> 00:06:20.030
in and drop in button and like I measured
it and now I can go ahead and fix it.

110
00:06:21.530 --> 00:06:25.310
So kinda key takeaways here are don't mix
reading layout properties and write them,

111
00:06:25.310 --> 00:06:26.470
you'll do unnecessary work.

112
00:06:27.690 --> 00:06:30.430
Also, if you can just change
something by adding a CSS class,

113
00:06:30.430 --> 00:06:33.410
kinda going back to that style
calculation, we don't read that at all.

114
00:06:33.410 --> 00:06:35.990
This one, we want to double up
a bunch of individual bars.

115
00:06:35.990 --> 00:06:40.270
But with just adding a class,
you will cause one reflow, but

116
00:06:40.270 --> 00:06:43.290
there's no way that you can
get yourself into that loop.

117
00:06:43.290 --> 00:06:46.710
So, if you can handle this by just having
a CSS class that has the second state that

118
00:06:46.710 --> 00:06:51.360
you want versus trying to do it by hand
and calculating everything, go for that.

119
00:06:51.360 --> 00:06:56.530
That is always going to be
the safer option for you.

120
00:06:56.530 --> 00:07:00.900
In storing data and memory, whether
it's in react,2I stored it in the state,

121
00:07:00.900 --> 00:07:02.340
in that case I showed you earlier.

122
00:07:02.340 --> 00:07:05.760
But like, you know, you could easily just
keep it in array somewhere in memory if

123
00:07:05.760 --> 00:07:06.664
you were doing this by hand.

124
00:07:06.664 --> 00:07:11.310
There's nothing React, and Angular, and
Ember, all written in JavaScript, right?

125
00:07:11.310 --> 00:07:13.540
Anything you can do with those frameworks,
you could do on your own.

126
00:07:13.540 --> 00:07:16.000
Like, keeping all those widths in an array

127
00:07:16.000 --> 00:07:19.180
was probably smarter than keeping
them in the dom to begin with, right?

128
00:07:19.180 --> 00:07:21.610
That's not always an option that you have,
right?

129
00:07:21.610 --> 00:07:23.560
Like, when I'm editing user content,
right,

130
00:07:23.560 --> 00:07:26.950
I don't always have that luxury, right?

131
00:07:26.950 --> 00:07:28.590
So it's something to
keep in mind either way.

132
00:07:28.590 --> 00:07:29.599
You don't need a framework.

133
00:07:30.810 --> 00:07:33.640
You can do bad things still,
if you have a framework, as I showed you.

134
00:07:33.640 --> 00:07:35.340
I'm guilty of it.

135
00:07:35.340 --> 00:07:38.470
And finally, the major point is you
might not even know that you're layout

136
00:07:38.470 --> 00:07:41.700
thrashing, cuz I didn't until I
went to take that screenshot.

137
00:07:41.700 --> 00:07:43.030
That's kinda like the moral of the story.

