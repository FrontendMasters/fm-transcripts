WEBVTT

1
00:00:00.000 --> 00:00:02.060
&gt;&gt; Steve: So we talked a little
bit about style calculations.

2
00:00:02.060 --> 00:00:06.140
The next part of that chain
was layouts and reflows.

3
00:00:06.140 --> 00:00:10.660
Right, like a layout is effectively
ok a reflows is effectively a we

4
00:00:10.660 --> 00:00:12.720
layout of the page.

5
00:00:12.720 --> 00:00:15.500
You changed something with
JavaScript didn't you, right?

6
00:00:15.500 --> 00:00:19.250
Or by resizing the window because I don't
know if whenever you make a front end

7
00:00:19.250 --> 00:00:22.880
webpage, the first thing a nontechnical
person does is see if it's responsive by

8
00:00:22.880 --> 00:00:26.560
grabbing the side and making the window
small and large a bunch of times.

9
00:00:26.560 --> 00:00:27.880
Also technical people do that.

10
00:00:27.880 --> 00:00:28.460
I do that.

11
00:00:28.460 --> 00:00:32.065
I understand where all the responsive
design tools are in Chrome, I don't care.

12
00:00:32.065 --> 00:00:38.090
[LAUGH] So,
layout is the first time, a reflow

13
00:00:38.090 --> 00:00:43.710
is a word frequently used for, things have
changed, I need to update the layout.

14
00:00:43.710 --> 00:00:49.220
A layout can be really, really expensive
and they're usually one of the main causes

15
00:00:49.220 --> 00:00:54.100
of JavaScript,
that slow down rendering, right?

16
00:00:54.100 --> 00:00:57.330
Because, yeah, if you do it too much,
that's problematic.

17
00:00:57.330 --> 00:01:00.545
Again think about all of the elements
on the page, every list item,

18
00:01:00.545 --> 00:01:03.650
every text node, everything, every image.

19
00:01:03.650 --> 00:01:05.040
It's a lot of work.

20
00:01:05.040 --> 00:01:07.520
I don't even know how it gets it
done in the time that it does.

21
00:01:07.520 --> 00:01:08.550
It's kind of impressive, like,

22
00:01:08.550 --> 00:01:14.510
I think it's mostly that we've had like
29 years or now I think the web is,

23
00:01:14.510 --> 00:01:18.600
29 years of experience doing this,
has made it decently fast.

24
00:01:18.600 --> 00:01:19.500
But like it's incredible.

25
00:01:19.500 --> 00:01:23.504
You can actually, there are some
YouTube videos that show Wikipedia, or

26
00:01:23.504 --> 00:01:27.710
a few other pages effectively, the process
of Firefox goes through laying it out.

27
00:01:27.710 --> 00:01:29.740
It's like okay,
there's an H1 it's inside of a div.

28
00:01:29.740 --> 00:01:32.890
And it keeps having to move it around and
change the size and adjust stuff and

29
00:01:32.890 --> 00:01:33.689
it's fascinating.

30
00:01:35.340 --> 00:01:36.570
So kind of mentioned this before.

31
00:01:36.570 --> 00:01:39.690
Whenever the geometry of an element
changes the browser has to reflow

32
00:01:39.690 --> 00:01:41.160
the page, right?

33
00:01:43.310 --> 00:01:47.590
Like, how that actually happens like in
the browsers is very different, right.

34
00:01:47.590 --> 00:01:49.310
Like it doesn't really matter.

35
00:01:49.310 --> 00:01:52.900
The major points we're going to touch on
is not doing it when you don't need to,

36
00:01:54.420 --> 00:01:56.300
it's the largest one, right?

37
00:01:56.300 --> 00:02:00.210
But the actual process is very
different for every different engine.

38
00:02:00.210 --> 00:02:02.840
So, things that you need
to know about a reflow.

39
00:02:02.840 --> 00:02:05.280
A reflow is what we call
a blocking operation.

40
00:02:05.280 --> 00:02:07.499
Everything else stops when
we're relaying out the page.

41
00:02:07.499 --> 00:02:09.900
None of your JavaScript is running,
nothing, right?

42
00:02:09.900 --> 00:02:11.100
We are reflowing the page.

43
00:02:11.100 --> 00:02:12.920
That is the thing that
we are doing right now.

44
00:02:12.920 --> 00:02:15.100
Stop everything until that is done.

45
00:02:15.100 --> 00:02:18.340
And obviously if I haven't made
this clear enough, it's hard.

46
00:02:18.340 --> 00:02:22.935
And it takes a lot of resources and
it's not fast or easy.

47
00:02:22.935 --> 00:02:26.610
And if you do it a lot,
guess who's gonna notice, right.

48
00:02:26.610 --> 00:02:28.500
A lot of the stuff we're trying to do is,
for

49
00:02:28.500 --> 00:02:31.520
a lot of this web performance stuff,
if we're doing our jobs well,

50
00:02:31.520 --> 00:02:34.620
the user should never notice
that we're doing anything.

51
00:02:34.620 --> 00:02:41.153
Users never go, they implicitly in
their brains go like, I like this side.

52
00:02:41.153 --> 00:02:43.820
They don't know that
performance is the reason why.

53
00:02:43.820 --> 00:02:48.170
But, if performance on your side is
terrible, they know, [LAUGH] right?

54
00:02:48.170 --> 00:02:52.000
If users notice the performance, it's
usually that you're messing it up, right?

55
00:02:52.000 --> 00:02:53.310
So you end up doing this in a loop.

56
00:02:53.310 --> 00:02:55.530
It's gonna be noticeable,
it's gonna be bad.

57
00:02:55.530 --> 00:02:57.443
And we basically don't
want people to notice us.

58
00:02:59.690 --> 00:03:02.342
&gt;&gt; Steve: Coo,l the only thing to keep in

59
00:03:02.342 --> 00:03:05.370
mind is that reflow of an element.

60
00:03:05.370 --> 00:03:08.090
I'm very careful with these words, right.

61
00:03:08.090 --> 00:03:12.220
Reflow of an element causes the reflow
of its parents and children.

62
00:03:12.220 --> 00:03:13.765
Think about what you know about a tree.

63
00:03:13.765 --> 00:03:18.220
[LAUGH] If you reflow
all of the children and

64
00:03:18.220 --> 00:03:22.070
then you reflow the parents and
they reflow the children.

65
00:03:22.070 --> 00:03:25.250
Pure most the time, there are some edge
cases where you can get away with only

66
00:03:25.250 --> 00:03:28.960
having to reflow part of it and
we'll talk a little about some of those.

67
00:03:28.960 --> 00:03:32.280
But generally speaking that is code for
saying

68
00:03:32.280 --> 00:03:36.500
you touch one thing you touch everything,
right, this is technically the truth.

69
00:03:36.500 --> 00:03:41.260
But really more often I would say
95% of the time you reflow a thing,

70
00:03:41.260 --> 00:03:42.890
you're reflowing everything.

71
00:03:42.890 --> 00:03:44.520
Good luck.

72
00:03:44.520 --> 00:03:47.540
So, okay,
we know that reflows are expensive.

73
00:03:47.540 --> 00:03:52.055
Avoiding them is not necessarily fair
cuz sometimes you do need to change

74
00:03:52.055 --> 00:03:53.986
the layer of the page, right?

75
00:03:53.986 --> 00:03:57.980
So, it's as much as you need and as little
as can get away with kind of thing.

76
00:03:57.980 --> 00:04:00.000
So what causes a reflow?

77
00:04:00.000 --> 00:04:05.580
Here is a incomplete list and yes,
the small font is a joke, [LAUGH] right?

78
00:04:05.580 --> 00:04:09.150
It's a way to put as much on
this slide as possible, right?

79
00:04:09.150 --> 00:04:11.770
Resizing the window, changing the font,
changing the content, adding or

80
00:04:11.770 --> 00:04:14.620
removing a stylesheet, adding or removing
classes, adding or removing elements.

81
00:04:14.620 --> 00:04:18.110
Changing the orientation, like when you
take the phone from portrait to landscape,

82
00:04:18.110 --> 00:04:20.440
obviously, like that reflows the page.

83
00:04:20.440 --> 00:04:21.920
Calculating size or position.

84
00:04:21.920 --> 00:04:23.130
That one's interesting.

85
00:04:23.130 --> 00:04:25.050
The simple act of trying
to figure out the size or

86
00:04:25.050 --> 00:04:27.490
position of something, causes a reflow.

87
00:04:28.640 --> 00:04:29.640
Fascinating.

88
00:04:29.640 --> 00:04:33.510
Changing the size or position, like yeah,
of course that causes a reflow.

89
00:04:34.780 --> 00:04:37.655
And when you reflow and
you change the size of a bunch of stuff,

90
00:04:37.655 --> 00:04:39.047
guess what you got to do next?

91
00:04:39.047 --> 00:04:41.917
Right, you got to repaint,
because you now need

92
00:04:41.917 --> 00:04:46.470
to paint more pixels blue if it's a blue
element that you changed the size of.

93
00:04:46.470 --> 00:04:49.220
More or less, I'll give you a hint.

94
00:04:52.010 --> 00:04:54.810
Layout is the second most expensive
part of the rendering pipeline.

95
00:04:54.810 --> 00:04:57.792
Would you like to take a guess
at what the first one is?

96
00:04:57.792 --> 00:05:02.759
Painting,and for every time you reflow
every time you do a layout you have to do

97
00:05:02.759 --> 00:05:07.010
a paint, guess what, they always
come usually as a package deal.

98
00:05:07.010 --> 00:05:09.484
So questions how do we avoid this?

99
00:05:09.484 --> 00:05:13.570
Yeah,you can try like if can't get away
with it changing like the lowest levels of

100
00:05:13.570 --> 00:05:16.190
the DOM trees and
not get that whole page reflow,

101
00:05:16.190 --> 00:05:21.410
like give you change the container element
from 600 pixel wide to 800 pixels wide,

102
00:05:21.410 --> 00:05:23.900
everything inside of it is gonna change.

103
00:05:23.900 --> 00:05:26.840
There are times when you can get away
with changing a much smaller subset but

104
00:05:26.840 --> 00:05:31.050
keeping your changes as low
down the tree as possible.

105
00:05:31.050 --> 00:05:33.490
Stop modying in-line styles will do it,
right?

106
00:05:33.490 --> 00:05:36.559
The less you change,
the less you can trigger this stuff.

107
00:05:36.559 --> 00:05:39.607
I think a really interesting one
is the trade the smoothness for

108
00:05:39.607 --> 00:05:42.260
speed if you're doing
an animation in JavaScript.

109
00:05:42.260 --> 00:05:43.535
We'll talk later about how,

110
00:05:43.535 --> 00:05:47.263
you probably shouldn't be doing animations
in JavaScript but sometimes you need to.

111
00:05:47.263 --> 00:05:51.906
But the thing to think about is,
we talked a little bit before,

112
00:05:51.906 --> 00:05:56.480
the ideal you're aiming for
60 frames a second.

113
00:05:56.480 --> 00:05:58.340
At 16 milliseconds right?

114
00:05:58.340 --> 00:05:59.690
You're like yeah cool.

115
00:05:59.690 --> 00:06:05.000
So on every little pixel I want
this animation to be smooth.

116
00:06:05.000 --> 00:06:07.900
I want to animate every single pixel,
right?

117
00:06:07.900 --> 00:06:10.040
If that takes longer than
your 16 milliseconds and

118
00:06:10.040 --> 00:06:13.410
you're going to miss that frame, right?

119
00:06:13.410 --> 00:06:15.246
Because you're triggering all this reflow.

120
00:06:15.246 --> 00:06:19.620
You're better off moving that box
three pixels at a time, right?

121
00:06:19.620 --> 00:06:22.380
Because you wouldn't have
actually missed as many frames.

122
00:06:22.380 --> 00:06:26.681
So sometimes, writing the animation to
be a little bit jankier makes it faster

123
00:06:26.681 --> 00:06:30.282
because you don't miss the next
frame that's gonna be painted.

124
00:06:30.282 --> 00:06:34.280
The other one is avoiding table layouts,
that kinds of makes sense for

125
00:06:34.280 --> 00:06:38.102
a lot of reasons, one like I write
similar emails, just trust me.

126
00:06:38.102 --> 00:06:42.173
[LAUGH] All right, a table here is hard,
but the other part is like,

127
00:06:42.173 --> 00:06:44.281
if a column and a table gets wider,

128
00:06:44.281 --> 00:06:48.676
what do you think happens like every
other cell above it, and below it?

129
00:06:48.676 --> 00:06:50.694
It's got to give, you know reflowed.

130
00:06:50.694 --> 00:06:53.930
A table effects,
everything around it by definition.

131
00:06:53.930 --> 00:06:57.730
And then batting down manipulation,
this one, if you're using a framework,

132
00:06:57.730 --> 00:07:00.120
you effectively getting it for
free, right.

133
00:07:00.120 --> 00:07:02.970
This is what makes React, React, right?

134
00:07:02.970 --> 00:07:05.060
It's what makes Ember, Ember, and Angular,

135
00:07:05.060 --> 00:07:08.520
Angular, is that they figure out how
to take the state of your application.

136
00:07:08.520 --> 00:07:10.600
And do the bare minimum
of changing the page,

137
00:07:10.600 --> 00:07:13.140
and doing it as efficiently as possible,
right?

138
00:07:13.140 --> 00:07:15.779
So, rather than, I'm gonna add all these.

139
00:07:15.779 --> 00:07:17.580
Like, you'll change a bunch
of stuff in your application.

140
00:07:17.580 --> 00:07:19.930
It will figure out a pro
forma way to do that.

141
00:07:19.930 --> 00:07:23.200
That is like legitimately
what a lot of our frameworks

142
00:07:23.200 --> 00:07:25.030
are bringing to the table, right?

143
00:07:25.030 --> 00:07:28.320
Is the, we will let you make a bunch of
changes to the state of your application,

144
00:07:28.320 --> 00:07:30.040
we will figure out an efficient
way of rendering it.

145
00:07:30.040 --> 00:07:32.850
If you're not using a framework,
this is on you, right?

146
00:07:32.850 --> 00:07:35.280
And like not using a framework
is always a toss up.

147
00:07:35.280 --> 00:07:39.540
Like Frameworks come with a cost,
that we'll see in a little bit.

148
00:07:39.540 --> 00:07:41.010
Right, they're not free.

149
00:07:41.010 --> 00:07:43.673
You have to write like they
are built on JavaScript,

150
00:07:43.673 --> 00:07:47.132
we know that we have to part
JavaScript and execute the JavaScript.

151
00:07:47.132 --> 00:07:50.049
And that they make a lot of
assumptions that have to be general.

152
00:07:50.049 --> 00:07:52.553
A given framework has to be as good for
you as it is for

153
00:07:52.553 --> 00:07:54.140
the person sitting next to you.

154
00:07:54.140 --> 00:07:56.060
Which means that they're are kind
of like Jack of all trades,

155
00:07:56.060 --> 00:07:57.830
they're making best case assumptions.

156
00:07:57.830 --> 00:08:00.120
If you were going to fine tune stuff.

157
00:08:00.120 --> 00:08:03.320
Yeah, like you could probably make
it faster than if you used react but

158
00:08:03.320 --> 00:08:07.180
you'd have to do that for everything and
a lot of times we make the trade off of

159
00:08:07.180 --> 00:08:11.540
a framework making good decisions for
us most of the time right?

160
00:08:11.540 --> 00:08:15.471
So that like we make
them more often right?

161
00:08:15.471 --> 00:08:18.005
And then debouncing recess events,
which is, if you are,

162
00:08:18.005 --> 00:08:21.740
have an eventless scenario that's
listening for the window to resize.

163
00:08:21.740 --> 00:08:26.630
Typically for me, this happens if I'm
making a data visualization with an SVG

164
00:08:26.630 --> 00:08:31.560
and I want to change the width of
everything, like when the window resizes.

165
00:08:31.560 --> 00:08:32.980
They usually dragging it.

166
00:08:32.980 --> 00:08:35.192
So usually you dont want
to do it repeatedly.

167
00:08:35.192 --> 00:08:38.278
You say, okay, I have to drag it and
let me do this every so often,

168
00:08:38.278 --> 00:08:39.640
you'll have less reflows.

