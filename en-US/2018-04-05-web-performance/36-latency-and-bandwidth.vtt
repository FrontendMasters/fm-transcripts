WEBVTT

1
00:00:02.722 --> 00:00:07.116
&gt;&gt; Steve Kinney: Kinda move into our
next topic, which is the issue of,

2
00:00:07.116 --> 00:00:10.470
we now know a lot about making stuff fast.

3
00:00:10.470 --> 00:00:12.560
We know how to diagnose
things that are slow.

4
00:00:12.560 --> 00:00:14.390
We know how to adjust things, but

5
00:00:14.390 --> 00:00:18.290
what we need to do is get those things
to the browser in order to handle those.

6
00:00:18.290 --> 00:00:21.300
And that is a fine art in and of itself.

7
00:00:21.300 --> 00:00:26.540
First that we're gonna talk about
is Latency and Bandwidth, right?

8
00:00:28.810 --> 00:00:33.040
These are two important factors into
the speed in which you get a webpage.

9
00:00:33.040 --> 00:00:36.170
I guess the third factor is how
much webpage you're sending, right?

10
00:00:36.170 --> 00:00:39.320
We saw that bar keep going up and
up and up and up.

11
00:00:39.320 --> 00:00:42.210
So these become increasingly important.

12
00:00:42.210 --> 00:00:43.650
We think a lot about bandwidth.

13
00:00:43.650 --> 00:00:45.630
A lot of times,
we don't think a lot about latency.

14
00:00:45.630 --> 00:00:47.270
So we're gonna kinda explore both of them.

15
00:00:47.270 --> 00:00:49.910
But first, there's this quote from
Alex Russell that I really like.

16
00:00:49.910 --> 00:00:53.410
That effectively when we're working
on web applications, network CPUs and

17
00:00:53.410 --> 00:00:55.020
disks all hate you.

18
00:00:55.020 --> 00:00:59.320
On the client, you pay for what you
send in ways you can't easily see.

19
00:00:59.320 --> 00:01:01.250
We saw that with parsing, right?

20
00:01:02.560 --> 00:01:06.600
We saw the JPEG and a JavaScript
file aren't created equal, right?

21
00:01:06.600 --> 00:01:10.160
There's a whole bunch of other
factors to play into this.

22
00:01:10.160 --> 00:01:15.460
So for those of you who don't know,
that the Internet is a series of tubes.

23
00:01:15.460 --> 00:01:18.263
That basically,
a cat meme starts at one point.

24
00:01:18.263 --> 00:01:21.670
It goes through the tubes, and
ends up in your browser to be a cat meme.

25
00:01:21.670 --> 00:01:26.550
On your browser causing
an immeasurable amount of joy, right?

26
00:01:26.550 --> 00:01:30.172
And so that tube has two dimensions.

27
00:01:30.172 --> 00:01:33.290
Bandwidth is how wide the tube is.

28
00:01:33.290 --> 00:01:36.980
How much stuff can you fit through
the tube at a given moment.

29
00:01:36.980 --> 00:01:37.950
And obviously,

30
00:01:37.950 --> 00:01:42.090
the wider your tube, the more cat memes
that you can shove through the tube.

31
00:01:42.090 --> 00:01:44.320
This makes intuitive sense, right?

32
00:01:44.320 --> 00:01:47.510
Bigger tube, more cats, done.

33
00:01:47.510 --> 00:01:50.970
The other problem is how
long is your tube, right?

34
00:01:50.970 --> 00:01:53.212
If the tube has to go
halfway around the world,

35
00:01:53.212 --> 00:01:55.463
those cats are gonna take
longer to get to you.

36
00:01:55.463 --> 00:01:58.790
Sure, you can shove a whole lot of
cats in that tube and push them along.

37
00:01:58.790 --> 00:02:02.740
But the laws of cat physics dictate that
there is going to be a certain amount of

38
00:02:02.740 --> 00:02:05.640
time for
that first payload of cats to get to you.

39
00:02:05.640 --> 00:02:09.250
So this are both like factors that
we kinda need to think about.

40
00:02:09.250 --> 00:02:12.430
And there's this really
great video on center.

41
00:02:12.430 --> 00:02:15.000
Song it's like wild it and see matters.

42
00:02:15.000 --> 00:02:17.130
And the part that I really
like it's this visual.

43
00:02:17.130 --> 00:02:18.870
They did a bunch of metrics here.

44
00:02:18.870 --> 00:02:23.188
This is all, like you can see that Sidney
is the best, this is based out of my one.

45
00:02:23.188 --> 00:02:24.436
So that's an important testing note.

46
00:02:24.436 --> 00:02:27.680
And when I looking at it, wow,
Sidney's got some fast Internet.

47
00:02:27.680 --> 00:02:30.780
They've got very fast Internet
to Melbourne [LAUGH] as

48
00:02:30.780 --> 00:02:33.000
compared to San Jose and London.

49
00:02:33.000 --> 00:02:38.020
But, you can see that
as file size increases,

50
00:02:39.750 --> 00:02:43.340
download time isn't in
a linear fashion going up.

51
00:02:43.340 --> 00:02:45.800
It's not just, yeah,
the file size gets bigger.

52
00:02:45.800 --> 00:02:50.900
It's taking these massive steps
where it's taking longer and longer.

53
00:02:50.900 --> 00:02:55.410
For like every like,
as the file size grows, these like jumps.

54
00:02:55.410 --> 00:03:03.880
Which seems strange, but is actually like
a quote unquote feature of TCP, right?

55
00:03:03.880 --> 00:03:07.820
So TCP,
the transmission control protocol, right?

56
00:03:07.820 --> 00:03:11.560
Its job, it's not necessarily
to get you stuff fast.

57
00:03:11.560 --> 00:03:15.424
You'd be like, wow, why is one of the
major pipe beings of the Internet not in

58
00:03:15.424 --> 00:03:17.101
charge of getting me stuff fast?

59
00:03:17.101 --> 00:03:21.030
Cuz it's primarily focused with
getting you stuff reliably, right?

60
00:03:21.030 --> 00:03:24.470
Getting you all of the bits
in the right order, and

61
00:03:24.470 --> 00:03:26.130
it will sacrifice speed to do that.

62
00:03:26.130 --> 00:03:27.130
I said earlier,

63
00:03:27.130 --> 00:03:31.390
that basically most performance things
are some kind of trade off, right?

64
00:03:31.390 --> 00:03:35.790
Like layers, you're trading a certain
amount of memory complexity for

65
00:03:35.790 --> 00:03:37.603
faster paint times, right?

66
00:03:37.603 --> 00:03:43.047
All of these things, in some cases like,
your super cool JavaScript compiling and

67
00:03:43.047 --> 00:03:46.750
parsing hack is maybe
affecting readability, right?

68
00:03:46.750 --> 00:03:48.170
That's the thing you need to think of.

69
00:03:48.170 --> 00:03:50.382
There's always that
human element there too.

70
00:03:50.382 --> 00:03:51.444
The way TCP works is,

71
00:03:51.444 --> 00:03:55.461
it continues checking with the server
to make sure everything's working well.

72
00:03:55.461 --> 00:03:57.170
We're getting the packets
in the correct order.

73
00:03:57.170 --> 00:04:00.270
They're not getting corrupted in the tube.

74
00:04:00.270 --> 00:04:03.658
That the client has acknowledged
with receipt of each package.

75
00:04:03.658 --> 00:04:05.590
Unreliable connections are handled well.

76
00:04:05.590 --> 00:04:07.870
We're not overloading the network, right.

77
00:04:07.870 --> 00:04:12.280
And so it's like, very careful to make
sure everything's going incredibly well.

78
00:04:12.280 --> 00:04:15.590
That way we make sure we don't have
files that go missing, or get corrupted.

79
00:04:15.590 --> 00:04:20.040
Because if you receive
a corrupted cat gif.

80
00:04:20.040 --> 00:04:23.430
What is even the point of being
on the Internet at that point?

81
00:04:23.430 --> 00:04:26.482
I'm just gonna close my laptop and go
outside or something, maybe read a book?

82
00:04:26.482 --> 00:04:29.440
Like, who wants to do that?

83
00:04:29.440 --> 00:04:32.560
So TCP starts by sending
a small amount of data.

84
00:04:32.560 --> 00:04:34.750
If that goes well,
it starts sending more, and

85
00:04:34.750 --> 00:04:37.570
more, as it finds out things
are being successful.

86
00:04:37.570 --> 00:04:39.980
And that's why you saw those big jumps.

87
00:04:39.980 --> 00:04:42.540
So it starts out by not sending
as much data as it could.

88
00:04:42.540 --> 00:04:45.410
Like, let me send you a tiny
little packet of data.

89
00:04:45.410 --> 00:04:46.680
Did you get it?

90
00:04:46.680 --> 00:04:47.700
Cool.

91
00:04:47.700 --> 00:04:49.450
After I know you've gotten
it a bunch of times.

92
00:04:49.450 --> 00:04:51.520
It's almost like the optimizing compiler.

93
00:04:51.520 --> 00:04:52.750
Things are going well?

94
00:04:52.750 --> 00:04:55.110
I'll start kicking things into high gear,
right?

95
00:04:55.110 --> 00:04:57.200
But the also, the opposite is true.

96
00:04:57.200 --> 00:05:02.070
This is why things feel so
much worse on a slow connection.

97
00:05:02.070 --> 00:05:03.960
Because packets get lost.

98
00:05:03.960 --> 00:05:04.940
They get corrupted.

99
00:05:04.940 --> 00:05:07.860
So TCP starts by saying small metadata.

100
00:05:07.860 --> 00:05:09.950
Your connection is already unreliable.

101
00:05:09.950 --> 00:05:11.520
So already slow.

102
00:05:11.520 --> 00:05:13.940
So sends you a small packet of data.

103
00:05:13.940 --> 00:05:15.390
Some of those get corrupted.

104
00:05:15.390 --> 00:05:16.810
Sends them again.

105
00:05:16.810 --> 00:05:19.780
It's not like an Internet
connection that's like,

106
00:05:19.780 --> 00:05:23.220
half as reliable is half as fast.

107
00:05:23.220 --> 00:05:26.390
Exponentially slower because TCP is like,
I donâ€™t trust you.

108
00:05:26.390 --> 00:05:28.080
I am putting cats on YouTube.

109
00:05:28.080 --> 00:05:29.390
YouTube is leaking, right.

110
00:05:29.390 --> 00:05:35.140
You still have YouTube, and
then you get the cats you deserve.

111
00:05:35.140 --> 00:05:40.250
CCP will be worse under unreliable
connections like dramatic ways.

112
00:05:40.250 --> 00:05:42.080
So yeah, and we all know this.

113
00:05:42.080 --> 00:05:45.760
Unreliable internet is worse
than no internet, cool.

114
00:05:45.760 --> 00:05:49.280
So just a fun fact,
when we get to file sizes in a little bit.

115
00:05:49.280 --> 00:05:53.480
Is that the initial window
size of TCP is 14 kilobytes.

116
00:05:53.480 --> 00:05:57.300
Which means if you can get
whatever asset under 14 kilobytes.

117
00:05:57.300 --> 00:05:59.840
You can send it in one go.

118
00:05:59.840 --> 00:06:01.820
If it's 28,
then we got to start doing the handshake.

119
00:06:01.820 --> 00:06:02.750
Did you get the first 14?

120
00:06:02.750 --> 00:06:03.340
Cool.

121
00:06:03.340 --> 00:06:04.960
I'll send you the next 14.

122
00:06:04.960 --> 00:06:06.650
So on and so forth, right?

123
00:06:06.650 --> 00:06:09.800
And it's interesting because like our
JavaScript apps are growing, right?

124
00:06:09.800 --> 00:06:14.160
Like this seems like 14 kilobytes
[LAUGH] that's not gonna happen, right.

125
00:06:14.160 --> 00:06:16.420
Maybe.
We have some tricks up our sleeves.

126
00:06:16.420 --> 00:06:20.400
But yeah, if we could get that in
there it would be way better, right?

127
00:06:20.400 --> 00:06:24.990
This is just the nature of the plumbing
that the web is built upon.

128
00:06:24.990 --> 00:06:26.751
So let's actually kind
of see that in action.

129
00:06:26.751 --> 00:06:28.014
We're gonna go to

130
00:06:28.014 --> 00:06:34.770
http://www.cloudping.info/
&gt;&gt; Steve Kinney: And

131
00:06:34.770 --> 00:06:36.808
there's a bunch of different
tools that do this, and

132
00:06:36.808 --> 00:06:39.280
you should check out all of
them because they're very cool.

133
00:06:39.280 --> 00:06:41.310
Basically from where we are right now,
in Minnesota.

134
00:06:42.530 --> 00:06:45.080
We can hit a bunch of Amazon regions.

135
00:06:45.080 --> 00:06:49.760
All right, everywhere from US-East in
Virginia, to Ohio, all the way out to

136
00:06:49.760 --> 00:06:55.180
California, all the way out to
South America, India, so on and so forth.

137
00:06:55.180 --> 00:06:56.628
So we'll go ahead and ping.

138
00:06:59.961 --> 00:07:02.568
&gt;&gt; Steve Kinney: You can see
the simple laws of physics,

139
00:07:02.568 --> 00:07:05.887
that electrons can only
go through wires so fast,

140
00:07:05.887 --> 00:07:11.210
like the speed of light is a thing, and
yes, the Internet is bound by physics.

141
00:07:11.210 --> 00:07:14.420
Doesn't seem like it most of the time,
but it definitely is.

142
00:07:14.420 --> 00:07:18.060
And so the further away we get,
the slower our times are,

143
00:07:18.060 --> 00:07:20.020
which I think is fascinating, right?

144
00:07:20.020 --> 00:07:22.140
And we can talk a little bit
about how to solve this problem.

145
00:07:22.140 --> 00:07:25.570
It's actually both incredibly
complicated and naively simply.

146
00:07:25.570 --> 00:07:28.219
It's incredibly complicated to do and
naively simple for us to do,

147
00:07:28.219 --> 00:07:29.853
because we let somebody else do the work.

148
00:07:29.853 --> 00:07:32.733
That is also the way to get performances.

149
00:07:32.733 --> 00:07:35.363
Third rule, if work has to be done,

150
00:07:35.363 --> 00:07:39.588
can someone else do this work
is probably useful as well.

151
00:07:42.797 --> 00:07:47.610
&gt;&gt; Steve Kinney: So, you know like,
I work it's in Denver.

152
00:07:47.610 --> 00:07:50.700
I'm sure we place our assets in Denver,
right?

153
00:07:50.700 --> 00:07:52.610
Where are most of our customers?

154
00:07:52.610 --> 00:07:53.840
Are they in the United States?

155
00:07:53.840 --> 00:07:54.880
I don't know, like probably.

156
00:07:54.880 --> 00:07:59.930
Where do we put our assets if
we want people to get them fast?

157
00:07:59.930 --> 00:08:01.690
Knowing that if we put them in Denver,

158
00:08:01.690 --> 00:08:05.280
people trying to get them in Beijing
are going to have a hard time getting it.

159
00:08:05.280 --> 00:08:09.110
In Melbourne it's gonna be even worse,
so on and so forth.

160
00:08:09.110 --> 00:08:10.710
So where do we put them?

161
00:08:10.710 --> 00:08:12.620
The answer is everywhere.

162
00:08:12.620 --> 00:08:15.571
You're like that's unsatisfying.

163
00:08:15.571 --> 00:08:19.990
And usually the answer is using a CDN.

164
00:08:19.990 --> 00:08:24.536
This is cloud front and later on I'm gonna
talk about some easy ways to do this.

165
00:08:24.536 --> 00:08:25.920
Like there's both,

166
00:08:25.920 --> 00:08:30.200
it's one of those things where it's
not even on how difficult it is.

167
00:08:30.200 --> 00:08:33.710
But basically cloud front is that there
are a bunch of places to host DSS.

168
00:08:33.710 --> 00:08:37.340
There's a bunch of like we call
edge nodes all around the world.

169
00:08:37.340 --> 00:08:41.070
Each client talks to
their closest edge node,

170
00:08:41.070 --> 00:08:42.830
which ideally can get them stuff faster.

171
00:08:42.830 --> 00:08:46.740
So you just spread it around everywhere,
caching it all over the place.

172
00:08:46.740 --> 00:08:49.170
I'll talk about this a little, but
I'll ruin some of the surprise now.

173
00:08:50.880 --> 00:08:54.150
If it's, hey, I've been working on this
thing like my own side project, and

174
00:08:54.150 --> 00:08:55.100
it's a small application.

175
00:08:55.100 --> 00:08:58.250
There are a bunch of services that
will do this for you really easily.

176
00:08:58.250 --> 00:09:05.250
If you are a large company, actually,
Amazon will make it not hard, right?

177
00:09:05.250 --> 00:09:07.240
I'm gonna do a AWS class in a few months.

178
00:09:07.240 --> 00:09:09.120
Where we'll talk about
how to set that all up.

179
00:09:09.120 --> 00:09:11.880
But it's a slightly hard,
if you wanna build your own CDN,

180
00:09:11.880 --> 00:09:14.620
if you want to be Amazon or
CloudFlare, well that would be,

181
00:09:14.620 --> 00:09:17.640
you need to like do the setting up
of things all around the world.

182
00:09:17.640 --> 00:09:22.534
But for those of you in the room,
there's a picture of the world there.

183
00:09:22.534 --> 00:09:24.510
That just looks like dots
as I look at the screen.

184
00:09:24.510 --> 00:09:27.934
But imagine a grey
silhouette of the world.

185
00:09:27.934 --> 00:09:30.370
That big cluster over there
is the United States.

186
00:09:30.370 --> 00:09:34.692
Over there we have China,
and down below Australia.

187
00:09:34.692 --> 00:09:37.138
So yeah, for most of us we're either,

188
00:09:37.138 --> 00:09:41.977
it's leveraging somebody else's
content distribution network, right?

189
00:09:41.977 --> 00:09:43.300
And putting it in those places.

190
00:09:43.300 --> 00:09:46.530
But, the civil act of you
do need to do it, right?

191
00:09:46.530 --> 00:09:48.300
Some services will do it for you for free.

192
00:09:48.300 --> 00:09:51.850
Will automatically, but
not everyone out of the box.

193
00:09:51.850 --> 00:09:57.010
And if you just have a server and they're
serving your normal back-end services and

194
00:09:57.010 --> 00:09:59.927
you just put the files there,
you likely don't have a CDN.

