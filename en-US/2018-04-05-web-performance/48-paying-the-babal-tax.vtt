WEBVTT

1
00:00:00.000 --> 00:00:01.414
&gt;&gt; Steve Kinney: One of
the most powerful tools for

2
00:00:01.414 --> 00:00:03.140
a transformer code these days is Babel.

3
00:00:04.650 --> 00:00:07.680
And Babel has some ups and downsides.

4
00:00:07.680 --> 00:00:11.888
What I kind of wanna talk
about real quick is this

5
00:00:11.888 --> 00:00:16.630
idea sometimes called paying
the Babel tax, right?

6
00:00:16.630 --> 00:00:18.838
Babel, for those of you who don't know,

7
00:00:18.838 --> 00:00:22.942
is a tool that basically allows us to
write future JavaScript and transpile it

8
00:00:22.942 --> 00:00:27.316
into JavaScript that will work in older
browsers and sometimes modern browsers.

9
00:00:27.316 --> 00:00:30.857
We saw the import syntax before, it's
not technically in the language yet, but

10
00:00:30.857 --> 00:00:31.542
I could use it.

11
00:00:31.542 --> 00:00:34.919
Because Babel will let me
write future JavaScript,

12
00:00:34.919 --> 00:00:39.010
turn it into JavaScript that
will work in today's browsers.

13
00:00:39.010 --> 00:00:43.030
Or turn today's JavaScript into JavaScript
that'll work in previous browsers.

14
00:00:43.030 --> 00:00:47.641
When I was a kid, you couldn't use all
the cool JavaScript features cuz IE6

15
00:00:47.641 --> 00:00:49.597
didn't support them, right?

16
00:00:49.597 --> 00:00:54.124
You knew there was this better life that
you couldn't have [LAUGH] because of this.

17
00:00:54.124 --> 00:00:57.872
So that still is the case in a lot of
cases, but the fact that we can then,

18
00:00:57.872 --> 00:01:01.372
behind the scenes, turn it into
code that works is really great and

19
00:01:01.372 --> 00:01:05.780
lets us really kind of move quickly and
makes web development a lot better.

20
00:01:05.780 --> 00:01:10.970
But this isn't always free,
and it's sometimes a tradeoff.

21
00:01:10.970 --> 00:01:15.886
So what I wanna kinda show you is
I have this little repo in here.

22
00:01:15.886 --> 00:01:17.719
Let's actually kill this one.

23
00:01:28.234 --> 00:01:30.290
&gt;&gt; Steve Kinney: I'm actually
gonna pull it up in a browser.

24
00:01:31.390 --> 00:01:35.808
If you go to Babel,
&gt;&gt; Steve Kinney: And we say,

25
00:01:35.808 --> 00:01:40.535
try it out, you can see this little repl
where you can type in some code, and

26
00:01:40.535 --> 00:01:43.700
you'll see code that
pops out the other end.

27
00:01:43.700 --> 00:01:48.071
And so, we can see some relatively
simple things, like okay,

28
00:01:48.071 --> 00:01:51.011
I can have,
&gt;&gt; Steve Kinney: An array,

29
00:01:51.011 --> 00:01:54.260
let's make this font a little bigger,
not that big.

30
00:01:59.533 --> 00:02:03.465
&gt;&gt; Steve Kinney: And if we use a 4H,
we can say array.4H,

31
00:02:03.465 --> 00:02:08.319
I can use a fancy arrow syntax,
&gt;&gt; Steve Kinney: Which

32
00:02:08.319 --> 00:02:11.299
is not supported in some browsers.

33
00:02:11.299 --> 00:02:14.832
And you can see it turns it into
the more traditional syntax.

34
00:02:17.702 --> 00:02:22.382
&gt;&gt; Steve Kinney: I can also use a brand
new for of syntax, maybe like for

35
00:02:22.382 --> 00:02:24.676
(let number of array).

36
00:02:32.860 --> 00:02:34.770
&gt;&gt; Steve Kinney: What do you
notice on the other side?

37
00:02:34.770 --> 00:02:37.373
&gt;&gt; Speaker 2: A lot more code.

38
00:02:37.373 --> 00:02:39.750
&gt;&gt; Steve Kinney: It's a lot more code,
right?

39
00:02:39.750 --> 00:02:43.163
That is a lot more code.

40
00:02:43.163 --> 00:02:45.528
And that means this code has to be parsed,

41
00:02:45.528 --> 00:02:48.770
that means this code that
has to be shipped, right?

42
00:02:48.770 --> 00:02:52.493
And yes,
this syntax is pretty cool, right?

43
00:02:52.493 --> 00:02:56.312
And some of my other browsers can
support it, but there is a little

44
00:02:56.312 --> 00:03:00.560
bit of making that decision, right,
the old way that we could, right?

45
00:03:00.560 --> 00:03:03.740
Some classes in JavaScript was to say,
function point.

46
00:03:03.740 --> 00:03:04.994
Hey, it's that example again.

47
00:03:09.938 --> 00:03:13.800
&gt;&gt; Steve Kinney: Equals x, thus.

48
00:03:13.800 --> 00:03:16.649
I think that's gonna be a thing I wanna
start doing in my JavaScript, thus!

49
00:03:16.649 --> 00:03:19.918
[LAUGH] So let it be.

50
00:03:19.918 --> 00:03:24.642
So we could have a function like this,
and we could say new point.

51
00:03:27.391 --> 00:03:29.650
&gt;&gt; Steve Kinney: And this is like,
try it into your JavaScript,

52
00:03:29.650 --> 00:03:30.840
there's not a lot to do.

53
00:03:30.840 --> 00:03:34.630
All it really does is put
a ustrix statement on top.

54
00:03:34.630 --> 00:03:39.416
If I change this real quick though and
we say class

55
00:03:39.416 --> 00:03:44.856
point,
&gt;&gt; Steve Kinney: You

56
00:03:44.856 --> 00:03:47.999
can already see this is getting
a little out of hand here.

57
00:03:57.403 --> 00:04:01.372
&gt;&gt; Steve Kinney: Actually,
I think I copy and paste that code.

58
00:04:03.069 --> 00:04:06.873
&gt;&gt; Steve Kinney: We can see
this is multiple lines of code.

59
00:04:06.873 --> 00:04:10.542
And that repeats over and
over for every class that you do.

60
00:04:10.542 --> 00:04:11.955
You'll have this extra line.

61
00:04:11.955 --> 00:04:14.790
You'll add more to your files, right?

62
00:04:14.790 --> 00:04:16.010
So there's a bunch of ways to do this.

63
00:04:16.010 --> 00:04:18.440
One is kind of stuff like arrow functions,

64
00:04:18.440 --> 00:04:21.460
those are nice template strings that
aren't gonna create a lot of code.

65
00:04:21.460 --> 00:04:25.010
Things like async await use this
thing called regenerator runtime,

66
00:04:25.010 --> 00:04:28.573
which is pages of code that you're
gonna shift in addition, right?

67
00:04:28.573 --> 00:04:30.916
So sometimes,
you have to weigh the trade offs,

68
00:04:30.916 --> 00:04:32.983
what is it doing to
the size of your bundle?

69
00:04:32.983 --> 00:04:36.150
And how do you figure out whether or
not this is problematic?

70
00:04:36.150 --> 00:04:37.430
You measure it, right?

71
00:04:37.430 --> 00:04:41.480
But some of these tools, not everything
is free, and if you're not being mindful,

72
00:04:41.480 --> 00:04:45.890
you can theoretically end up paying
a tax on a lot of these things and

73
00:04:45.890 --> 00:04:48.780
having adverse effects on what
you were trying to do, right?

74
00:04:48.780 --> 00:04:51.070
So it's always important to
just kind of keep an eye and

75
00:04:51.070 --> 00:04:52.245
measure a lot of these things.

