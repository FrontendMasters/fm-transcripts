WEBVTT

1
00:00:00.774 --> 00:00:01.867
&gt;&gt; Steve: Let's play
with some other stuff.

2
00:00:04.880 --> 00:00:08.479
&gt;&gt; Steve: I'm gonna do all those,
and I'm gonna call one more time.

3
00:00:16.750 --> 00:00:19.220
&gt;&gt; Steve: Because like this thing
can do all sorts of things, right?

4
00:00:19.220 --> 00:00:21.150
The plus sign is versatile.

5
00:00:21.150 --> 00:00:23.527
I can add numbers and plant it in strings.

6
00:00:23.527 --> 00:00:27.600
This is the best function in JavaScript.

7
00:00:27.600 --> 00:00:28.795
We'll go ahead and we'll do that.

8
00:00:31.892 --> 00:00:36.300
&gt;&gt; Steve: All right, it was optimized, but
I feel like that wasn't the full story.

9
00:00:36.300 --> 00:00:39.667
Right, what would happen, all right,

10
00:00:39.667 --> 00:00:45.029
let me do another flag and
this is where we can all play together.

11
00:00:45.029 --> 00:00:47.267
Anyone wanna guess what trace deopt does?

12
00:00:47.267 --> 00:00:48.649
&gt;&gt; Speaker 2: No.

13
00:00:48.649 --> 00:00:52.100
&gt;&gt; [LAUGH].

14
00:00:52.100 --> 00:00:54.799
&gt;&gt; Steve: At one point you are all like,
this is how we all pay attention.

15
00:00:54.799 --> 00:00:58.852
At one point I am going to type
in like trace deopt, or depot.

16
00:00:58.852 --> 00:01:00.508
Because I have done it 1,000 times,

17
00:01:00.508 --> 00:01:02.983
there is no reason I wouldn't do
it in front of a lot of people.

18
00:01:02.983 --> 00:01:07.399
Someone has to call me on that one when
I look confused as to why things didn't

19
00:01:07.399 --> 00:01:08.231
work, okay.

20
00:01:08.231 --> 00:01:09.302
Cool, let's run that.

21
00:01:10.360 --> 00:01:12.804
&gt;&gt; Steve: There's a bunch of stuff here.

22
00:01:12.804 --> 00:01:17.620
Deoptimizing the function, interesting.

23
00:01:17.620 --> 00:01:21.796
So it optimized and then it deoptimized.

24
00:01:21.796 --> 00:01:23.340
What if I take out this line?

25
00:01:26.740 --> 00:01:29.055
It only optimized.

26
00:01:29.055 --> 00:01:31.790
I think we are ready to make a hypothesis.

27
00:01:31.790 --> 00:01:34.551
We're doing science by the way.

28
00:01:34.551 --> 00:01:38.570
Cool, so
we added two numbers a bunch of times.

29
00:01:38.570 --> 00:01:43.525
And then we added two strings and
that got us deoptimized.

30
00:01:43.525 --> 00:01:44.979
Anyone want a venture hypothesis?

31
00:01:46.900 --> 00:01:50.380
If not I have slides don't worry,
no pressure.

32
00:01:50.380 --> 00:01:54.936
I'm just gonna open the floor for
hypothesis.

33
00:01:54.936 --> 00:01:57.612
Anyone got one?

34
00:01:57.612 --> 00:02:00.691
All right, mentally,
like we have suspicions at least.

35
00:02:00.691 --> 00:02:01.456
May not be ready.

36
00:02:01.456 --> 00:02:05.433
I see people they've got their hands up
the mouth up but they're not fully ready.

37
00:02:05.433 --> 00:02:06.421
There's no wrong answers.

38
00:02:06.421 --> 00:02:09.359
I mean, there are wrong answers cuz this
is an algorithm, there's science here.

39
00:02:09.359 --> 00:02:13.241
But we're amongst friends, right?

40
00:02:13.241 --> 00:02:16.336
Both chat room and here.

41
00:02:16.336 --> 00:02:21.052
Cool, so we have some

42
00:02:21.052 --> 00:02:26.824
hypotheses, very nice.

43
00:02:26.824 --> 00:02:29.570
Yeah, for those you're in the chat,
I see the question.

44
00:02:29.570 --> 00:02:32.438
I got a slide, it's going to be good.

45
00:02:32.438 --> 00:02:36.675
All right, so we see that the two
different things we're getting out of

46
00:02:36.675 --> 00:02:40.700
de-optimization unclear
what's happening here.

47
00:02:40.700 --> 00:02:46.671
All right, so that's a problem, so
what happens, let's try something else up.

48
00:02:46.671 --> 00:02:47.863
I'm gonna do it twice.

49
00:02:51.721 --> 00:02:54.471
&gt;&gt; Steve: We don't need
this line right now,

50
00:02:54.471 --> 00:02:57.503
we know that that line is problematic.

51
00:02:57.503 --> 00:03:04.250
And we'll go ahead, and no benchmark.

52
00:03:04.250 --> 00:03:06.879
Let's not do anything with
the trace ops right now.

53
00:03:10.254 --> 00:03:13.879
&gt;&gt; Steve: It will take a little longer
cuz it's, we're doing it twice.

54
00:03:15.230 --> 00:03:16.997
It's taking suspiciously longer.

55
00:03:20.278 --> 00:03:22.009
&gt;&gt; Steve: I'm gonna go back over and
see what's going on here.

56
00:03:25.272 --> 00:03:26.119
&gt;&gt; Steve: We have to set.

57
00:03:32.705 --> 00:03:34.016
&gt;&gt; Steve: We'll set
the iterations back up.

58
00:03:38.581 --> 00:03:41.680
&gt;&gt; Steve: Cool, took 47,
just, mental note.

59
00:03:41.680 --> 00:03:43.778
47 milliseconds.

60
00:03:43.778 --> 00:03:45.650
Let's put that problematic line back in.

61
00:03:48.890 --> 00:03:52.920
Okay, almost, not double,
almost double the amount of time, right?

62
00:03:52.920 --> 00:03:57.145
So even somewhere in the middle there we
can see that like having different types

63
00:03:57.145 --> 00:03:59.605
of arguments past that
function definitely,

64
00:03:59.605 --> 00:04:01.701
there's definitely a problem there.

65
00:04:01.701 --> 00:04:04.340
It definitely caused some
kind of slow down, right?

66
00:04:04.340 --> 00:04:05.435
Talk more about this later.

67
00:04:05.435 --> 00:04:06.792
We're just taking mental notes right now.

68
00:04:06.792 --> 00:04:07.681
We're doing science.

69
00:04:07.681 --> 00:04:13.797
We're filling up our lab notebooks
underneath the golden rules and

70
00:04:13.797 --> 00:04:17.127
we'll make some test later, cool.

71
00:04:17.127 --> 00:04:21.066
All right, that was definitely,
definitely a problem.

72
00:04:21.066 --> 00:04:23.420
Let's also run the code one more time.

73
00:04:23.420 --> 00:04:28.205
We're gonna do another little
node trick is, we'll go ahead and

74
00:04:28.205 --> 00:04:33.261
we're gonna use some syntax you
might not seen before, maybe have.

75
00:04:33.261 --> 00:04:40.829
It's let's say NeverOptimizeFunction(add).

76
00:04:40.829 --> 00:04:42.910
Your like, why would I ever use this?

77
00:04:42.910 --> 00:04:47.275
Good news is that you can't,
it's It's not real, it's kind of real,

78
00:04:47.275 --> 00:04:48.932
but it's not really real.

79
00:04:48.932 --> 00:04:52.655
So we'll say node and
we'll say this allow natives syntax,

80
00:04:52.655 --> 00:04:55.287
which is basically this is for debugging.

81
00:04:55.287 --> 00:04:58.381
This lets you parse certain flags
to V8 that will go ahead and

82
00:04:58.381 --> 00:05:00.758
get you further like
debugging information.

83
00:05:00.758 --> 00:05:03.702
So here what we wanna do is,
we effectively,

84
00:05:03.702 --> 00:05:08.667
we're gonna use this, you saw it was
prefixed with a percent sign, right?

85
00:05:08.667 --> 00:05:12.571
This is cuz that's not valid JavaScript,
that will work with this flag on,

86
00:05:12.571 --> 00:05:16.780
the code will not run without the flag on,
it's basically a way to trigger stuff so

87
00:05:16.780 --> 00:05:19.130
you can kind of see the effects.

88
00:05:19.130 --> 00:05:23.343
So we'll go ahead, say that,

89
00:05:23.343 --> 00:05:29.510
I'll call benchmark 235 milliseconds.

90
00:05:29.510 --> 00:05:32.310
We ran it twice before at 41, right?

91
00:05:33.560 --> 00:05:38.883
Clearly, that optimization is useful and
we should totally keep it.

92
00:05:38.883 --> 00:05:42.426
Yeah, if we never optimize the function,
it is definitely way slower.

93
00:05:42.426 --> 00:05:45.078
So we know that there are some
things happening here even when I

94
00:05:45.078 --> 00:05:46.104
got deoptimized once.

95
00:05:46.104 --> 00:05:48.600
It seems like got reheated back up.

96
00:05:48.600 --> 00:05:51.711
We can see that non optimizing
it ever is not a great thing.

97
00:05:51.711 --> 00:05:54.020
And like that is also like a sales pitch.

98
00:05:54.020 --> 00:05:55.495
Like this is a simple add function.

99
00:05:55.495 --> 00:05:58.040
You can imagine what a much
more complicated function.

100
00:05:58.040 --> 00:05:59.367
If we can optimize those.

101
00:05:59.367 --> 00:06:04.135
You can see up to 100 X more performance.

102
00:06:04.135 --> 00:06:06.696
Cool.

103
00:06:06.696 --> 00:06:09.630
Let's look a little bit deeper.

104
00:06:09.630 --> 00:06:12.480
We're actually going to go to a different
file now, this one that's called add.

105
00:06:14.700 --> 00:06:17.571
And you see here we have a function.

106
00:06:17.571 --> 00:06:21.476
We're going to use another special native
syntax here called optimize function on

107
00:06:21.476 --> 00:06:22.800
next call.

108
00:06:22.800 --> 00:06:26.142
Anyone want to take a wild
guess what this function does?

109
00:06:26.142 --> 00:06:26.934
For the freebie.

110
00:06:26.934 --> 00:06:30.202
[LAUGH] Someone [LAUGH].

111
00:06:30.202 --> 00:06:32.575
&gt;&gt; Speaker 2: It doesn't
optimise the next fuinciton?

112
00:06:32.575 --> 00:06:34.655
&gt;&gt; Steve: Well the next
function on the next function?

113
00:06:34.655 --> 00:06:35.155
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Steve: Yeah.

114
00:06:35.155 --> 00:06:36.104
&gt;&gt; Speaker 2: The second call.

115
00:06:36.104 --> 00:06:36.744
&gt;&gt; Steve: Well on the next

116
00:06:36.744 --> 00:06:37.319
call.
&gt;&gt; Speaker 2: Okay.

117
00:06:37.319 --> 00:06:38.080
&gt;&gt; Steve: Right.

118
00:06:38.080 --> 00:06:41.232
It will be optimize at that point.

119
00:06:41.232 --> 00:06:45.334
Now we need that allow At one point I'll

120
00:06:45.334 --> 00:06:49.558
forget to pluralize natives as well, so

121
00:06:49.558 --> 00:06:55.132
somebody who's in charge of that one.
Had and

122
00:06:55.132 --> 00:07:00.236
will also,let's throw

123
00:07:00.236 --> 00:07:07.060
in the trace opt.
Cool, we can see that it was optimized.

124
00:07:07.060 --> 00:07:09.275
Which makes sense even
though we only ran it once.

125
00:07:09.275 --> 00:07:12.529
Like a function usually is not
optimized the first time it is run,

126
00:07:12.529 --> 00:07:15.206
because going to the optimizing
parlor isn't free.

127
00:07:15.206 --> 00:07:15.769
Right?

128
00:07:15.769 --> 00:07:16.890
There's work that happens there.

129
00:07:16.890 --> 00:07:20.096
And what happens when we do work?

130
00:07:20.096 --> 00:07:20.950
It takes some time.

131
00:07:20.950 --> 00:07:22.900
Right?
So we hope that if we're going to

132
00:07:22.900 --> 00:07:26.222
do work by sending it to
the optimizing parlor, it goes faster.

133
00:07:26.222 --> 00:07:29.433
And then what happens if we
turn this into a string per se.

134
00:07:32.180 --> 00:07:33.962
&gt;&gt; Steve: We'll also trace deopt.

135
00:07:36.600 --> 00:07:37.847
&gt;&gt; Steve: I guess i've
ruined it by telling you.

136
00:07:37.847 --> 00:07:41.787
We'll also trace
the deoptimizaion this time.

137
00:07:41.787 --> 00:07:46.005
You can see that we deoptimize that
function just after one time calling it

138
00:07:46.005 --> 00:07:48.520
with some different arguments.

139
00:07:48.520 --> 00:07:49.040
Right.

140
00:07:49.040 --> 00:07:50.390
We don't know what's happening again.

141
00:07:50.390 --> 00:07:54.200
But I think we are getting to
the point where we are ready to,

142
00:07:54.200 --> 00:07:56.653
like, think a little bit about this.

143
00:07:56.653 --> 00:07:57.634
Cool.

144
00:07:57.634 --> 00:07:59.430
Let's go back and
talk about what we just saw.

145
00:08:05.380 --> 00:08:08.926
So this function, we've seen it before.

146
00:08:08.926 --> 00:08:11.340
Except this one has a syntax error and
won't run.

147
00:08:11.340 --> 00:08:14.100
So don't look at that side.

148
00:08:14.100 --> 00:08:17.320
We still have it went to
the optimizing compiler.

149
00:08:17.320 --> 00:08:19.110
We got this faster version.

150
00:08:19.110 --> 00:08:26.650
A version that was you know the difference
between 47 milliseconds and 235.

151
00:08:26.650 --> 00:08:31.344
But like that's the stuff that is
happening is going to we saw that.

152
00:08:31.344 --> 00:08:35.007
This is using the thing
that we said before, and

153
00:08:35.007 --> 00:08:39.687
there's bullet points called
speculative optimization.

154
00:08:39.687 --> 00:08:42.190
We use the interpreter cuz
the interpreter is ready to go.

155
00:08:42.190 --> 00:08:48.296
But it doesn't know anything about our
code, so it's not as fast as Turbofan is.

156
00:08:48.296 --> 00:08:50.880
The optimizing compiler It needs to know.

157
00:08:50.880 --> 00:08:52.850
JavaScript is not a typed language.

158
00:08:52.850 --> 00:08:57.030
It doesn't know that it's gonna
get two numbers every time, right.

159
00:08:57.030 --> 00:08:59.890
So what happens is the interpreter
is like I would handle this.

160
00:08:59.890 --> 00:09:01.032
I would do a bunch of hard work.

161
00:09:01.032 --> 00:09:04.140
I will look everything up
It's all gonna be fine.

162
00:09:04.140 --> 00:09:06.960
It goes and it gets ahead and
it's doing it the slow way.

163
00:09:06.960 --> 00:09:10.200
Eventually it's like hey it's generating
these feedback objects that are going

164
00:09:10.200 --> 00:09:13.380
to turbofans like, I think I know enough
about how people are calling this

165
00:09:13.380 --> 00:09:16.030
add function that I think that
I'm ready to make the decision.

166
00:09:16.030 --> 00:09:18.323
It always gets two numbers, right?

167
00:09:18.323 --> 00:09:22.398
And once we know enough about it we can
assume that even this untyped wild west of

168
00:09:22.398 --> 00:09:26.043
a programming language That yeah
there's not type, no guarantees,

169
00:09:26.043 --> 00:09:30.120
but we're pretty certain that numbers
are going to get passed in every time and

170
00:09:30.120 --> 00:09:34.090
that's when it becomes a candidate for
being optimized.

171
00:09:34.090 --> 00:09:36.030
And if a string slips in there?

172
00:09:36.030 --> 00:09:38.138
All right what happens?

173
00:09:38.138 --> 00:09:43.420
As I [LAUGH] everything I
thought happens isn't true.

174
00:09:43.420 --> 00:09:43.920
Right?

175
00:09:45.330 --> 00:09:50.256
So, at that point, we get the red arrow.

176
00:09:50.256 --> 00:09:52.212
Right?
And at that point it's like, listen,

177
00:09:52.212 --> 00:09:55.194
I made all these assumptions,
I thought it was going to be numbers.

178
00:09:55.194 --> 00:09:56.426
I don't know what's happening any more.

179
00:09:56.426 --> 00:09:58.153
Ignition you take this back.

180
00:09:58.153 --> 00:10:00.578
I clearly can't handle this.

181
00:10:00.578 --> 00:10:03.113
Which when we go back to the byte code,
right?

182
00:10:03.113 --> 00:10:06.445
The optimizing compiler optimizes for
what it's seen but

183
00:10:06.445 --> 00:10:10.593
if it sees something new That's
problematic right it turns out that like

184
00:10:10.593 --> 00:10:14.945
a few times it will alright I'm ready
to re-optimize if that happens enough

185
00:10:14.945 --> 00:10:19.570
times cuz like that cost is expensive
the de-optimizing compiler which is like I

186
00:10:19.570 --> 00:10:22.970
don't touch this function
anymore right you get it?

187
00:10:22.970 --> 00:10:27.282
Then that number I'm not gonna say the
number right now because it changes but

188
00:10:27.282 --> 00:10:31.328
like after a certain number of times
of getting like Strings when you were

189
00:10:31.328 --> 00:10:35.838
expecting numbers like you would end up in
a basically a loop of like okay optimize

190
00:10:35.838 --> 00:10:40.284
the function cool it optimizes it alright
it's getting hot again like optimize

191
00:10:40.284 --> 00:10:44.727
the function know another string slipped
in it's only gonna play that game so

192
00:10:44.727 --> 00:10:45.832
many times right?

193
00:10:45.832 --> 00:10:49.490
And then eventually it's like I don't
optimize this function I've been down this

194
00:10:49.490 --> 00:10:53.080
road I'm not interested anymore
it's not the life I live anymore.

195
00:10:53.080 --> 00:10:56.239
Right.
So, like if our code has a wild number of

196
00:10:56.239 --> 00:11:01.270
different variables then it is totally
possible that it just gives up.

197
00:11:02.720 --> 00:11:03.604
Cool.

198
00:11:03.604 --> 00:11:08.990
So we now know, we know a little
about strings and numbers, right?

199
00:11:08.990 --> 00:11:12.639
But clearly there's more to
JavaScript than strings and

200
00:11:12.639 --> 00:11:17.361
numbers so we're going to jump in and
play around with a little more code.

201
00:11:17.361 --> 00:11:19.588
All right.
I'll answer one question and

202
00:11:19.588 --> 00:11:21.469
then we'll get back to it.

203
00:11:21.469 --> 00:11:22.161
Cool.

204
00:11:22.161 --> 00:11:25.798
So there was a question of like how
many times a function has to get called.

205
00:11:25.798 --> 00:11:27.118
That's not necessarily at all.

206
00:11:27.118 --> 00:11:30.365
It depends on how many times,
like, it's not, that changes.

207
00:11:30.365 --> 00:11:34.990
But of the, like, we don't personally
call a function a lot of times.

208
00:11:34.990 --> 00:11:35.705
Right?

209
00:11:35.705 --> 00:11:39.125
But we don't always, like just cuz we
don't write the function doesn't mean,

210
00:11:39.125 --> 00:11:41.150
like we don't know what it was called,
right?

211
00:11:41.150 --> 00:11:45.403
So for instance, we know in React
that render method is called "Anytime

212
00:11:45.403 --> 00:11:48.135
State Changes" in our application, right?

213
00:11:48.135 --> 00:11:52.529
So that render method could get
called "anytime", especially if

214
00:11:52.529 --> 00:11:57.770
it's stated in the application
component that's getting passed down.

215
00:11:57.770 --> 00:12:02.137
Right, render's getting called, even if
we never write render more than once.

216
00:12:02.137 --> 00:12:07.197
So there are parts of our code that
end up getting called a lot, right?

217
00:12:07.197 --> 00:12:11.660
If you think about that flame graph that
I showed earlier of my own application,

218
00:12:11.660 --> 00:12:15.338
that flame got down and deep and
there were a lot of little pieces.

219
00:12:15.338 --> 00:12:19.581
The top pieces were pretty big, but there
were a lot of little pieces that were

220
00:12:19.581 --> 00:12:23.692
getting called repeatedly That I was
actually surprised by when I went to do

221
00:12:23.692 --> 00:12:27.869
that investigating [INAUDIBLE] so
sometimes like code that we don't think is

222
00:12:27.869 --> 00:12:31.485
getting called a lot versus state
changes in our application do.

223
00:12:31.485 --> 00:12:32.387
All right, cool.

224
00:12:32.387 --> 00:12:35.232
So let's take a look at
some more code redo,

225
00:12:35.232 --> 00:12:36.410
&gt;&gt; [INAUDIBLE]

226
00:12:36.410 --> 00:12:37.072
&gt;&gt; Steve: Cool

227
00:12:37.072 --> 00:12:38.670
&gt;&gt; [INAUDIBLE]

228
00:12:38.670 --> 00:12:40.023
&gt;&gt; Steve: Yeah.

229
00:12:40.023 --> 00:12:42.650
&gt;&gt; Speaker 2: If you're using something
like flow where you're defining the types.

230
00:12:42.650 --> 00:12:46.491
Is that's something they optimize or
can like handle and like be aware of or?

231
00:12:46.491 --> 00:12:47.732
&gt;&gt; Steve: Yes.

232
00:12:47.732 --> 00:12:49.069
That was also a question like recent.

233
00:12:49.069 --> 00:12:50.628
Like anything where you can enforce.

234
00:12:50.628 --> 00:12:55.341
That you're always trying to hand the same
types in will effectively speed up It is

235
00:12:55.341 --> 00:13:00.050
less likely that you'll end up with
code that is not of that type, right?

236
00:13:00.050 --> 00:13:02.045
Yeah, like we write in TypeScript,
it get's compiled.

237
00:13:02.045 --> 00:13:03.080
It is JavaScript.

238
00:13:03.080 --> 00:13:05.687
Could something happen
where it gets down twice?

239
00:13:05.687 --> 00:13:06.607
Totally.

240
00:13:06.607 --> 00:13:11.132
Yeah, using TypeScript, Flow,
ReasonML will all definitely

241
00:13:11.132 --> 00:13:15.676
like You are helping turbo fan
help you at those points, right?

242
00:13:15.676 --> 00:13:22.548
So there are potential
performance gains in those cases.

243
00:13:22.548 --> 00:13:27.723
All right, so let's actually go ahead and
jump back in a little bit, we're gonna

244
00:13:27.723 --> 00:13:32.684
change this a little, so we're gonna
lose our good old fashion add function.

245
00:13:32.684 --> 00:13:33.740
We could always write it again.

246
00:13:33.740 --> 00:13:36.493
I feel confident that I know this
code like the back of my hand.

247
00:13:38.170 --> 00:13:40.352
&gt;&gt; Steve: All right, cool.

248
00:13:40.352 --> 00:13:44.946
So you could say
&gt;&gt; Steve: Let's make a JavaScript class.

249
00:13:51.748 --> 00:13:59.092
&gt;&gt; Steve: They'll take x and y
&gt;&gt; Steve: This.y = y.

250
00:13:59.092 --> 00:14:02.229
All right cool and
we're just gonna go ahead and

251
00:14:02.229 --> 00:14:06.036
we're gonna JSON a string of
[INAUDIBLE] a bunch of times.

252
00:14:06.036 --> 00:14:15.997
So while there are iterations we'll say
&gt;&gt; Steve: Equals the new point.

253
00:14:15.997 --> 00:14:17.488
2 and 4.

254
00:14:17.488 --> 00:14:18.393
We could use the iteration number.

255
00:14:18.393 --> 00:14:19.828
We could do whatever we want.

256
00:14:19.828 --> 00:14:20.634
It's code.

257
00:14:24.786 --> 00:14:28.303
&gt;&gt; Steve: All right let's go ahead and
let's run that.

258
00:14:35.730 --> 00:14:37.762
&gt;&gt; Steve: That's taking
a really long time.

259
00:14:37.762 --> 00:14:41.323
You can see it took about 5 seconds.

260
00:14:41.323 --> 00:14:43.390
In that case I think we've made our point.

261
00:14:43.390 --> 00:14:48.485
Let's go ahead with like slightly less.

262
00:14:48.485 --> 00:14:49.200
So, it's a million.

263
00:14:51.650 --> 00:14:53.729
Cool.

264
00:14:53.729 --> 00:14:57.593
So here we can see about
half a second to class.

265
00:14:57.593 --> 00:14:59.208
And is not easy.

266
00:14:59.208 --> 00:15:00.540
There's a lot of rules there.

267
00:15:00.540 --> 00:15:02.032
It's not the simplest thing in the world.

268
00:15:05.520 --> 00:15:10.873
&gt;&gt; Steve: But let's say that we set.

269
00:15:10.873 --> 00:15:15.657
It, as our exercise, and
we'll make a new point,

270
00:15:15.657 --> 00:15:19.566
and we'll set point y to be undefined.

271
00:15:19.566 --> 00:15:21.384
Right, mm-hm, okay.

272
00:15:21.384 --> 00:15:23.768
We'll try it again.

273
00:15:23.768 --> 00:15:24.648
About the same.

274
00:15:24.648 --> 00:15:26.410
Right, there's a like, it's a computer.

275
00:15:26.410 --> 00:15:28.573
There are things doing,
things happening on the computer.

276
00:15:28.573 --> 00:15:31.530
Your computer might be faster than mine,
see slightly different numbers.

277
00:15:31.530 --> 00:15:36.503
But generally speaking,
we're in the same ballpark, right.

278
00:15:36.503 --> 00:15:40.807
Okay, that's cool,
what happens when we delete that?

279
00:15:40.807 --> 00:15:45.480
Instead of setting it to undefined,
we'll go ahead and delete it.

280
00:15:47.220 --> 00:15:50.695
About the same, okay.

281
00:15:50.695 --> 00:15:53.320
So why we can delete it we
can set it to undefined.

282
00:15:54.570 --> 00:15:57.387
Seems pretty interesting.

283
00:15:57.387 --> 00:15:58.304
What about x?

284
00:16:02.465 --> 00:16:05.313
&gt;&gt; Steve: So that's undefined.

285
00:16:05.313 --> 00:16:09.210
Okay you're like great I'm watching
the same numbers over and over again.

286
00:16:09.210 --> 00:16:10.499
Let's go ahead and delete x.

287
00:16:16.152 --> 00:16:22.122
&gt;&gt; Steve: Wow,
&gt;&gt; Steve: That shot up.

288
00:16:22.122 --> 00:16:23.990
That's interesting right?

289
00:16:23.990 --> 00:16:24.509
Okay.

290
00:16:24.509 --> 00:16:25.449
We've measured something.

291
00:16:25.449 --> 00:16:27.227
We've noticed that thing has happened.

292
00:16:27.227 --> 00:16:29.160
Now we have to try to deal with it.

