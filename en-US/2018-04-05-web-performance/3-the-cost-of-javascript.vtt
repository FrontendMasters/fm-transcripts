WEBVTT

1
00:00:03.853 --> 00:00:04.656
&gt;&gt; Steve Kinney: So let's get into it.

2
00:00:04.656 --> 00:00:06.472
You ready?

3
00:00:06.472 --> 00:00:08.290
Very cool.

4
00:00:08.290 --> 00:00:11.690
So we're gonna talk about, first,
JavaScript performance, as I promised.

5
00:00:13.120 --> 00:00:15.920
So the Ruby On Rails philosophy,

6
00:00:15.920 --> 00:00:22.180
was that developers are more
expensive than faster server.

7
00:00:22.180 --> 00:00:25.040
So make a language that even
if it's a little slower.

8
00:00:25.040 --> 00:00:28.830
And a framework that even it's a little
slower, increases developer productivity.

9
00:00:29.970 --> 00:00:32.750
Because you can send the money you were
gonna spend on ten more engineers,

10
00:00:32.750 --> 00:00:35.250
to get this thing out the door,
and buy a beefier server.

11
00:00:37.200 --> 00:00:39.010
That's a philosophy.

12
00:00:39.010 --> 00:00:42.190
It doesn't work for
client-side applications,

13
00:00:42.190 --> 00:00:46.200
because we can't buy all of
our customers new computers.

14
00:00:46.200 --> 00:00:48.890
Like here, everyone,
here's a fancy Mac Book Pro.

15
00:00:48.890 --> 00:00:51.290
Here you go, I don't wanna solve
my own performance issues.

16
00:00:51.290 --> 00:00:54.873
I mean you could do that, but
that's probably not a good idea,

17
00:00:54.873 --> 00:00:57.450
that's probably not a way
to stay in business.

18
00:00:57.450 --> 00:01:00.960
So we have to think about these things.

19
00:01:00.960 --> 00:01:02.680
We can compress assets.

20
00:01:02.680 --> 00:01:04.150
We can reduce latency.

21
00:01:04.150 --> 00:01:07.940
But this application's eventually
going to need to be run and built, and

22
00:01:07.940 --> 00:01:10.822
you don't get to control,
the computer that it's run on.

23
00:01:10.822 --> 00:01:12.900
So we, as Front-End Engineers,

24
00:01:12.900 --> 00:01:16.390
unfortunately, have to bear this
burden of thinking about performance,

25
00:01:16.390 --> 00:01:19.780
because we can't buy faster servers and
beefier machines.

26
00:01:21.550 --> 00:01:25.180
So before I showed you just
the size of a webpage, as a whole,

27
00:01:25.180 --> 00:01:30.810
the size of the JavaScript that
we're sending, is also growing

28
00:01:30.810 --> 00:01:35.610
at a very large rate,
right, 500% on mobile.

29
00:01:35.610 --> 00:01:39.915
The problem is,
there's a philosophy, well,

30
00:01:39.915 --> 00:01:43.380
if I chip in an extra meg of JavaScript,

31
00:01:43.380 --> 00:01:48.742
if I include one less JPEG,
that should be the same, right?

32
00:01:48.742 --> 00:01:50.300
You just want some of those.

33
00:01:50.300 --> 00:01:53.500
The problem is, again,
JPEG, you show it onscreen.

34
00:01:53.500 --> 00:01:56.210
JavaScript, you need to parse and
compile it, and

35
00:01:56.210 --> 00:01:59.760
in a lot of applications,
that's actually the big culprit here.

36
00:01:59.760 --> 00:02:01.750
This is the application I work on.

37
00:02:01.750 --> 00:02:02.920
There's a few things to notice.

38
00:02:02.920 --> 00:02:06.720
This is loading the editor, that I
showed you in that screenshot earlier.

39
00:02:08.420 --> 00:02:11.100
Down in the lower left hand corner,

40
00:02:11.100 --> 00:02:15.610
you can see where the browser
spent most of the time.

41
00:02:15.610 --> 00:02:19.220
That thin little blue stripe is loading.

42
00:02:19.220 --> 00:02:21.160
Now, I was in Denver.

43
00:02:21.160 --> 00:02:25.070
The data center is in Chicago,
it's not that far to get.

44
00:02:25.070 --> 00:02:29.780
This would be very different if I was
in Australia, or Bangalore, or London.

45
00:02:29.780 --> 00:02:32.950
But I was not too far from the servers,
it would probably even be closer here.

46
00:02:32.950 --> 00:02:38.120
I spent the majority of the time
scripting, which is parsing and

47
00:02:38.120 --> 00:02:39.970
compiling the Java Script.

48
00:02:39.970 --> 00:02:44.940
And a little bit of rendering,
painting stuff along those lines.

49
00:02:44.940 --> 00:02:51.980
The other part at the top, is basically
what the CPU was doing at any given point.

50
00:02:51.980 --> 00:02:54.353
So you can see that the yellow
is parsing JavaScript,

51
00:02:54.353 --> 00:02:57.357
which if you look at the pie chart
down below it's not like, wow,

52
00:02:57.357 --> 00:02:59.540
I can't believe that
these are very different.

53
00:02:59.540 --> 00:03:01.450
They're relatively the same thing.

54
00:03:01.450 --> 00:03:05.344
And this is a lot of the times
called the big yellow slug.

55
00:03:05.344 --> 00:03:09.519
If you do it like a create react app,
and nothing in the application watch and

56
00:03:09.519 --> 00:03:10.750
see this later.

57
00:03:10.750 --> 00:03:12.640
Like you're still gonna get
a certain amount of this,

58
00:03:12.640 --> 00:03:14.250
cuz we're sending
a JavaScript application.

59
00:03:14.250 --> 00:03:16.530
There's nothing in the HTML, originally.

60
00:03:16.530 --> 00:03:19.610
We send this JavaScript application
has to figure out what to do.

61
00:03:19.610 --> 00:03:26.360
These little red bars at the top,
are when I literary pegged the CPU, right?

62
00:03:26.360 --> 00:03:30.110
I was using it at 100%
capacity to build this.

63
00:03:30.110 --> 00:03:34.670
You can also see there's this graph in the
middle, called a flame chart, which is,

64
00:03:34.670 --> 00:03:36.800
you've got at the top,
these top level functions.

65
00:03:36.800 --> 00:03:40.540
Then if that function calls a function,
it's one layer down in the flame chart,

66
00:03:40.540 --> 00:03:45.540
and you can see that I could scroll
[LAUGH], and more would happen here.

67
00:03:45.540 --> 00:03:47.910
Chrome is actually really nice,

68
00:03:47.910 --> 00:03:51.650
where those little red triangles on
the upper right, of any given thing in

69
00:03:51.650 --> 00:03:54.710
the flame chart, that is where Chrome has
figured out like you're doing a bad thing.

70
00:03:56.070 --> 00:03:58.452
Let me tell you about the bad
thing that you're doing.

71
00:03:58.452 --> 00:04:01.355
Sometimes, it can give you something
helpful, we'll see that later.

72
00:04:01.355 --> 00:04:03.955
Sometimes it's like, no,
this is just taking too long, and

73
00:04:03.955 --> 00:04:05.355
I think you should know about it.

74
00:04:05.355 --> 00:04:09.305
So you can kinda get a lot of
really useful information.

75
00:04:09.305 --> 00:04:13.077
But the point that I really
wanna make on this slide,

76
00:04:13.077 --> 00:04:18.332
is that most of the time that my
application is running, it's parsing.

77
00:04:18.332 --> 00:04:22.198
I can gzip some more assets, I can put
something on a faster, a better CDN, and

78
00:04:22.198 --> 00:04:23.750
stuff along those lines.

79
00:04:23.750 --> 00:04:29.860
But that's not gonna solve
the 2,800 milliseconds, the two,

80
00:04:29.860 --> 00:04:33.319
almost three seconds that I'm spending,
just parsing and compiling my JavaScript.

81
00:04:34.930 --> 00:04:38.120
So what is happening in that yellow part?

82
00:04:38.120 --> 00:04:43.175
Right, we feel like, yeah, that yellow
part, it's too big, it should be smaller.

83
00:04:43.175 --> 00:04:46.960
[LAUGH] Right, okay,
how does any of this stuff work?

84
00:04:46.960 --> 00:04:52.210
So it turns out that JavaScript
is a compiled language,

85
00:04:52.210 --> 00:04:56.190
just like C or Java, it is put
through a compiler, and out comes,

86
00:04:56.190 --> 00:04:58.000
some byte coder, some machine code, right.

87
00:04:58.000 --> 00:05:01.040
You have other languages that are
interpreted language where it runs through

88
00:05:01.040 --> 00:05:02.170
it, but JavaScript is compiled.

89
00:05:02.170 --> 00:05:04.930
You're like,
I've never compiled in JavaScript.

90
00:05:04.930 --> 00:05:09.030
I mean, you might've run it through Babel
to make more different JavaScript, but

91
00:05:09.030 --> 00:05:11.560
I have never produced
a binary of JavaScript.

92
00:05:12.900 --> 00:05:15.900
That's because it uses a thing
called just-in-time compilation.

93
00:05:15.900 --> 00:05:19.588
Which is, the JavaScript code is compiled,

94
00:05:19.588 --> 00:05:24.836
like moments before it's executed,
on your user's machine.

95
00:05:24.836 --> 00:05:29.860
And that's why we saw the big yellow slug,
if you will.

96
00:05:29.860 --> 00:05:34.000
So we're not compiling it,
it is getting compiled, just not by us.

97
00:05:35.530 --> 00:05:36.260
Cool.

98
00:05:36.260 --> 00:05:39.690
So just in time compilation.

99
00:05:39.690 --> 00:05:43.484
It means it is compiled, it means it's
compiled moments before execution.

100
00:05:43.484 --> 00:05:45.296
It means it's happening
in our client's machine.

101
00:05:45.296 --> 00:05:48.139
It means that they're paying the cost,
and doing the hard work for us.

102
00:05:49.760 --> 00:05:53.470
All right, so
what is happening in the compilation part?

103
00:05:53.470 --> 00:05:56.226
We've identified it as a problem.

104
00:05:56.226 --> 00:05:59.940
Were gonna focus,
each browser has a different engine.

105
00:05:59.940 --> 00:06:02.289
Chrome has an engine called V8.

106
00:06:02.289 --> 00:06:04.167
I believe that's what Oprah uses as well,

107
00:06:04.167 --> 00:06:06.260
these days,
that wasn't true a few years ago.

108
00:06:07.800 --> 00:06:10.164
Safari has one called JavaScript core, or

109
00:06:10.164 --> 00:06:13.589
when their talking about
marketing materials called Nitro.

110
00:06:13.589 --> 00:06:18.166
Firefox has one called Spider Monkey, and
there's a few other engines in there,

111
00:06:18.166 --> 00:06:20.103
Ion Monkey, and a few other ones.

112
00:06:21.360 --> 00:06:23.030
Has one called Chakra.

113
00:06:23.030 --> 00:06:26.600
So each one has a different engine,
they do work differently.

114
00:06:26.600 --> 00:06:30.390
We're gonna just focus on V8,
because getting really in the weeds on

115
00:06:30.390 --> 00:06:34.620
the differences between all of them,
is probably not the best use of our time.

116
00:06:34.620 --> 00:06:36.490
We're trying to get this
high level understanding.

117
00:06:36.490 --> 00:06:40.180
So I am going to do, not the best web
standards thing in the world, but

118
00:06:40.180 --> 00:06:43.290
make believe that V8 and
Chrome is the only browser right now.

119
00:06:43.290 --> 00:06:47.081
Don't do that, that's rude,
but, [LAUGH] I'm doing it.

120
00:06:47.081 --> 00:06:51.290
So our JavaScript lives in
this thing called, the cloud.

121
00:06:51.290 --> 00:06:52.800
I don't really understand what that is.

122
00:06:52.800 --> 00:06:57.960
But I understand that's where when I do
a web pack build, I put it in the cloud,

123
00:06:57.960 --> 00:07:00.130
and there it is, and
people get it from there.

124
00:07:00.130 --> 00:07:01.720
Beyond that,
that's the back end team's problem.

125
00:07:03.590 --> 00:07:05.520
I've heard it's an S3 bucket.

126
00:07:05.520 --> 00:07:06.710
I don't know.

127
00:07:06.710 --> 00:07:11.906
So we send the JavaScript to the browser,
and then we have to parse it.

128
00:07:11.906 --> 00:07:14.930
Okay, you've sent me those long
string of text, what does that mean?

129
00:07:14.930 --> 00:07:18.220
We turn that into what's called
an abstract syntax tree,

130
00:07:18.220 --> 00:07:23.330
which is an actual data structure that
represents what this code actually means.

131
00:07:23.330 --> 00:07:26.910
That then goes to a baseline compiler or
an interpreter.

132
00:07:26.910 --> 00:07:29.220
In Chrome,
these days is a thing called Ignition.

133
00:07:29.220 --> 00:07:32.749
Get it?
It's V8 Ignition.

134
00:07:32.749 --> 00:07:35.160
Mm hm, they're doing a thing here.

135
00:07:35.160 --> 00:07:40.310
Google's really good at making sure that
their technologies are un-Googleable.

136
00:07:40.310 --> 00:07:44.325
Go, as a programming language,
good luck, trying to Google that.

137
00:07:44.325 --> 00:07:47.369
Ignition and turbo fan, which we'll talk
talk about later, also impossible to

138
00:07:47.369 --> 00:07:50.160
Google for when you're doing research for
a workshop, I'm not better.

139
00:07:51.580 --> 00:07:55.248
That gets turned into byte code,
that gets executed by the browser.

140
00:07:55.248 --> 00:08:01.840
But wait, there's more, we'll talk
about later, JavaScript is really hard,

141
00:08:01.840 --> 00:08:05.400
it's this dynamic language, It'd be great,
if we could make some of it faster.

142
00:08:05.400 --> 00:08:07.500
So there's a second compiler in there.

143
00:08:07.500 --> 00:08:09.470
This one's called Turbofan.

144
00:08:09.470 --> 00:08:11.460
Get it?
It's the same, yeah.

145
00:08:11.460 --> 00:08:15.870
And it's an optimizing compiler,
that then looks at the code, and

146
00:08:15.870 --> 00:08:17.560
tries to make it even faster.

147
00:08:19.050 --> 00:08:22.146
That will spit out, well,
any code that can be optimized.

148
00:08:22.146 --> 00:08:25.290
Any code that can't be optimized, same
thing we saw before with the interpreter.

149
00:08:25.290 --> 00:08:27.301
Any code that can be optimized,

150
00:08:27.301 --> 00:08:32.600
goes to the optimizing compiler to get
optimized, whatever it does in there.

151
00:08:32.600 --> 00:08:37.490
And then, that's spits out highly
optimized machine code, unique to

152
00:08:37.490 --> 00:08:42.560
that whether it's RM, or X86, like Intel,
whatever, that shoots at the other end.

153
00:08:42.560 --> 00:08:49.584
Some cases though, you're super optimized
code, isn't gonna work out, right?

154
00:08:49.584 --> 00:08:52.950
It's not actually valid for
reasons that we'll talk about.

155
00:08:52.950 --> 00:08:55.920
At which point,
we go back to using the slow byte code.

156
00:08:55.920 --> 00:08:58.570
So it stands to reason,
that red arrow's bad.

157
00:08:58.570 --> 00:09:02.070
If you can get stuff on the green arrow,
that's good.

158
00:09:02.070 --> 00:09:04.180
And like, that's the goal.

159
00:09:04.180 --> 00:09:08.330
And any time we end with the red arrow,
that's not good, right?

160
00:09:08.330 --> 00:09:12.615
And so, one way to make your application
faster, is more green arrows,

161
00:09:12.615 --> 00:09:13.690
less red arrows.

162
00:09:13.690 --> 00:09:15.440
You can all write that down.

163
00:09:15.440 --> 00:09:20.110
[LAUGH] Doing less work,
more green arrows, less red arrows.

164
00:09:20.110 --> 00:09:21.720
Shorter yellow slugs.

165
00:09:21.720 --> 00:09:25.250
None of those notes will make any
sense to you, a week from now, but

166
00:09:25.250 --> 00:09:27.370
I think it's really important that
you capture them at this point.

