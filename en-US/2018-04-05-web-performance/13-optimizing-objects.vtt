WEBVTT

1
00:00:00.270 --> 00:00:02.380
&gt;&gt; Steve Kinney: So let's go back and
let's do a few more experiments.

2
00:00:04.220 --> 00:00:07.650
&gt;&gt; Steve Kinney: Let's take a look, I have
one called classes, that seems useful.

3
00:00:07.650 --> 00:00:13.190
And so you can see we have
another one of these hidden

4
00:00:13.190 --> 00:00:18.120
VA special functions, and
this one is called HaveSameMap.

5
00:00:18.120 --> 00:00:20.200
Right, which is,
do they have the same shape?

6
00:00:20.200 --> 00:00:25.590
Are the two of them monomorphic, right?

7
00:00:25.590 --> 00:00:27.930
So let's go ahead and let's try this code.

8
00:00:27.930 --> 00:00:31.880
And so it will crash if I don't use
that allow-natives-syntax thing.

9
00:00:31.880 --> 00:00:39.006
So I'll say node,
&gt;&gt; Steve Kinney: allow-natives-syntax

10
00:00:39.006 --> 00:00:43.050
Say classes.js And how did I get false?

11
00:00:43.050 --> 00:00:46.290
Which makes sense, one of them has an a
property, one of them has a b property,

12
00:00:46.290 --> 00:00:47.240
they are not the same.

13
00:00:47.240 --> 00:00:51.970
All right cool,
what if they were the same?

14
00:00:54.780 --> 00:00:57.770
True, all right,
like their sanity in the world,

15
00:00:57.770 --> 00:00:59.360
we know that everything is gonna be okay.

16
00:01:02.660 --> 00:01:05.108
All right, so does the value matter?

17
00:01:09.692 --> 00:01:10.330
&gt;&gt; Steve Kinney: Let's check it out.

18
00:01:12.790 --> 00:01:17.040
Right, that value clearly made
it something different but

19
00:01:17.040 --> 00:01:17.860
that's a pretty large number.

20
00:01:17.860 --> 00:01:22.310
Let's use use a more like fair number.

21
00:01:24.330 --> 00:01:25.830
Now it's true.

22
00:01:25.830 --> 00:01:27.190
I will spoil that one now just so

23
00:01:27.190 --> 00:01:31.050
you don't have to live with that lingering
doubt in you until I explain it later.

24
00:01:31.050 --> 00:01:36.590
Which is, after you pass a 32 bit integer,
it's not the same small number anymore.

25
00:01:36.590 --> 00:01:40.220
Like, after a certain size,
they are a different type.

26
00:01:40.220 --> 00:01:44.090
Right, but if you keep,
if you're under a 32 bit number like,

27
00:01:44.090 --> 00:01:45.840
if you keep your numbers small,
they are the same type.

28
00:01:45.840 --> 00:01:48.580
We'll look at a little chart and
it'll make a bunch of sense later.

29
00:01:48.580 --> 00:01:52.090
But, yeah, so generally speaking,
the values have to be the same,

30
00:01:52.090 --> 00:01:56.030
clearly if this was a string,
we can expect false, right?

31
00:01:57.130 --> 00:01:59.210
So, the center with a very long number but

32
00:01:59.210 --> 00:02:04.140
in the range of normal numbers like
five 50,000, it's true, right?

33
00:02:05.800 --> 00:02:07.830
They're the same.

34
00:02:07.830 --> 00:02:08.800
All right, cool.

35
00:02:08.800 --> 00:02:11.394
What happens if we give
this one like a x property?

36
00:02:15.634 --> 00:02:16.770
&gt;&gt; Steve Kinney: False, right?

37
00:02:16.770 --> 00:02:17.400
They're not the same.

38
00:02:17.400 --> 00:02:18.580
They don't have the same shape anymore.

39
00:02:18.580 --> 00:02:21.710
One of them has an x property,
one of the doesn't, right?

40
00:02:21.710 --> 00:02:27.850
So it seems like V8 has in some way
that it's keeping track of this cool.

41
00:02:27.850 --> 00:02:28.800
What if they had the same?

42
00:02:28.800 --> 00:02:30.865
So given X, an A and an X.

43
00:02:30.865 --> 00:02:35.823
[NOISE]
Okay.

44
00:02:35.823 --> 00:02:37.670
True that's what we would expect.

45
00:02:37.670 --> 00:02:39.250
They have the same properties.

46
00:02:39.250 --> 00:02:41.130
They are the same values right?

47
00:02:41.130 --> 00:02:42.620
Is some amount of sanity in the world.

48
00:02:45.740 --> 00:02:48.130
But what happens,
let's get to the same place.

49
00:02:48.130 --> 00:02:54.220
So the first one is gonna have an A and
an X, the second one is gonna have an A.

50
00:02:56.080 --> 00:02:57.720
We'll add an X to it.

51
00:02:57.720 --> 00:02:59.288
So that should be the same thing right?

52
00:03:02.636 --> 00:03:03.136
&gt;&gt; Steve Kinney: It's not.

53
00:03:04.940 --> 00:03:06.820
Interesting, so if they start the same,

54
00:03:06.820 --> 00:03:10.940
if I'm making the exact same way,
they're the same.

55
00:03:10.940 --> 00:03:16.020
But if I start differently,
they don't end up the same, interesting.

56
00:03:17.070 --> 00:03:22.566
What happens if I do the same thing,

57
00:03:22.566 --> 00:03:29.161
like what if I go ahead and
say like S [SOUND],

58
00:03:29.161 --> 00:03:33.391
they follow the same path.

59
00:03:33.391 --> 00:03:36.330
So, we’ll set the x property
on both them to numbers.

60
00:03:36.330 --> 00:03:37.890
They’ll start out as just an A property.

61
00:03:37.890 --> 00:03:40.330
We’ll set an x property on both of them,
right?

62
00:03:42.290 --> 00:03:43.389
Now they’re the same the map again.

63
00:03:44.570 --> 00:03:48.240
Okay so they start the same the same,
they start different and

64
00:03:48.240 --> 00:03:50.260
end up the same they are not the same.

65
00:03:50.260 --> 00:03:55.420
But if they go through the same
path together, they are the same.

66
00:03:55.420 --> 00:03:59.402
Okay, I don't understand how this works
yet, but I'm just doing some science.

67
00:03:59.402 --> 00:04:02.609
All right we'll one more thing

68
00:04:04.600 --> 00:04:08.600
We'll start out with this a and we'll
use our good friend object out assign.

69
00:04:08.600 --> 00:04:12.470
Object out assign is used for
making objects.

70
00:04:12.470 --> 00:04:16.810
And what we'll do is we'll just take
the a and we'll copy it, right?

71
00:04:16.810 --> 00:04:19.080
If you ever want to keep
immutable data structures and

72
00:04:19.080 --> 00:04:21.030
react you can use object out assign.

73
00:04:21.030 --> 00:04:23.980
Or if you ever used a spread operator,
like those three dots,

74
00:04:23.980 --> 00:04:29.150
that's to battle it's
object that assigned.

75
00:04:29.150 --> 00:04:31.960
It's a useful for cloning objects, right?

76
00:04:33.850 --> 00:04:36.740
False, isn't that a clone?

77
00:04:36.740 --> 00:04:38.320
I guess because we started
with this object and

78
00:04:38.320 --> 00:04:41.000
then we added all the properties,
it went down a different path.

79
00:04:41.000 --> 00:04:43.763
That's what I'm guessing, we'll see.

80
00:04:43.763 --> 00:04:47.435
All right, But what happens if did const

81
00:04:47.435 --> 00:04:52.236
c,
&gt;&gt; Steve Kinney: And we'll see are b and

82
00:04:52.236 --> 00:04:52.824
c the same?

83
00:04:56.944 --> 00:05:00.830
&gt;&gt; Steve Kinney: They are, cuz they
were created in the same way, right?

84
00:05:00.830 --> 00:05:03.370
So there's something
about how it was created,

85
00:05:03.370 --> 00:05:05.820
the path that it went
down as it was modified.

86
00:05:05.820 --> 00:05:07.590
The properties are added
in the same order.

87
00:05:07.590 --> 00:05:10.790
It seems like they do have the same map.

88
00:05:10.790 --> 00:05:14.570
The properties that end up the same but
they are put there in a different order,

89
00:05:14.570 --> 00:05:16.480
seems like they don't have the same map.

90
00:05:16.480 --> 00:05:19.410
Right, we don't have the words to
figure out why this is happening yet.

91
00:05:19.410 --> 00:05:21.760
But we're definitely
empirically noticing things.

92
00:05:22.980 --> 00:05:26.760
All right,
No more tricks with object assignment.

93
00:05:26.760 --> 00:05:30.500
I'll just show you one that should
be pretty straight forward.

94
00:05:30.500 --> 00:05:32.514
We'll make our point class from before.

95
00:05:41.430 --> 00:05:46.150
&gt;&gt; Steve Kinney: This.x-
x; this.y=y; Very cool.

96
00:05:46.150 --> 00:05:50.629
And we'll say A is new

97
00:05:50.629 --> 00:05:56.560
Point 1.2,

98
00:05:56.560 --> 00:06:00.620
and B is new Point, and
we'll take a lucky guess.

99
00:06:00.620 --> 00:06:01.400
Are these gonna be the same?

100
00:06:03.220 --> 00:06:04.228
You don't all have to answer at once.

101
00:06:07.135 --> 00:06:09.560
&gt;&gt; Steve Kinney: Lucky guesses.

102
00:06:09.560 --> 00:06:10.090
I see nodding.

103
00:06:10.090 --> 00:06:12.450
I'm gonna take the nodding as same,
I heard a same.

104
00:06:12.450 --> 00:06:14.610
We're ready,
we've voted this entire room same.

105
00:06:16.330 --> 00:06:18.340
We win, right?

106
00:06:18.340 --> 00:06:21.460
Yeah, they're constructed the same way,
they go through a constructor.

107
00:06:21.460 --> 00:06:22.670
Cool, right?

108
00:06:22.670 --> 00:06:25.880
So it looks like objects that
either start the same or

109
00:06:25.880 --> 00:06:28.230
go through the same process of
being made and not be the same.

110
00:06:28.230 --> 00:06:31.870
Even if they end up the same they
went through a different path.

111
00:06:31.870 --> 00:06:34.600
Like V8 doesn't seem to believe
they are the same object.

112
00:06:36.320 --> 00:06:39.020
Which is kind of interesting, cool.

113
00:06:39.020 --> 00:06:41.721
And if we were to set one of
these properties to undefined,

114
00:06:41.721 --> 00:06:42.722
like the same thing.

115
00:06:42.722 --> 00:06:44.666
They would no longer have the [INAUDIBLE].

116
00:06:44.666 --> 00:06:47.741
You modify either one of these they
end up not having the same map.

117
00:06:49.780 --> 00:06:50.680
Back and forth, right?

118
00:06:50.680 --> 00:06:53.400
But if you were to do the same thing
to both of them, they do, right?

119
00:06:53.400 --> 00:06:57.360
We could go through that,
I'll spare you the march of death

120
00:06:57.360 --> 00:07:01.810
through every kind of combination
of everything that we've seen.

121
00:07:01.810 --> 00:07:03.470
Okay, that's really interesting.

122
00:07:03.470 --> 00:07:05.920
If only we knew what was happening.

