WEBVTT

1
00:00:00.200 --> 00:00:02.330
&gt;&gt; Steve Kinney: So
our code is parsed, awesome,

2
00:00:02.330 --> 00:00:06.320
we've done it together,
we've parsed the code.

3
00:00:06.320 --> 00:00:07.600
Then what?

4
00:00:07.600 --> 00:00:11.170
You just turn it into
an abstract syntax tree,

5
00:00:11.170 --> 00:00:14.620
I'm gonna show you a quote from Wikipedia,
even though I understand that that is like

6
00:00:14.620 --> 00:00:18.240
a trope of people making presentations
just like quote Wikipedia, but

7
00:00:18.240 --> 00:00:20.750
this one is amazing and
I thought we should all share it.

8
00:00:22.120 --> 00:00:25.810
This is Wikipedia's definition
of an abstract syntax tree.

9
00:00:25.810 --> 00:00:30.890
In computer science, an abstract syntax
tree, AST, is a tree representation of

10
00:00:30.890 --> 00:00:35.280
the abstract syntactic structure of source
code written in a programming language.

11
00:00:35.280 --> 00:00:38.440
Are we all clear on what AST is now?

12
00:00:39.600 --> 00:00:42.460
Affectively what it is,
is like we took the string of text,

13
00:00:42.460 --> 00:00:45.090
we made a data structure
that basically shows

14
00:00:45.090 --> 00:00:48.130
the structure of the actual
code as it's gonna be executed.

15
00:00:48.130 --> 00:00:51.860
So this is what an AST for
an add function would be.

16
00:00:51.860 --> 00:00:55.020
In a simpler programming language,
you'd actually only see the blue and

17
00:00:55.020 --> 00:00:55.955
green parts, right.

18
00:00:55.955 --> 00:00:58.380
Cuz you've got a function,
it has a return statement,

19
00:00:58.380 --> 00:01:00.220
that's the first word that you saw there.

20
00:01:00.220 --> 00:01:03.640
Then it parses the rest of that line,
it sees two identifiers,

21
00:01:03.640 --> 00:01:05.450
it sees the addition symbol.

22
00:01:05.450 --> 00:01:09.710
So we know we're gonna add x and y, and
then the interpreter can go ahead and

23
00:01:09.710 --> 00:01:11.300
start doing all of that.

24
00:01:11.300 --> 00:01:15.190
The other yellow orange part over here,
is JavaScript is hard.

25
00:01:15.190 --> 00:01:17.438
And there's things like
variable hoisting and

26
00:01:17.438 --> 00:01:20.759
a whole bunch of other stuff that
the interpreter needs to be aware of.

27
00:01:20.759 --> 00:01:25.024
So that it also keeps track of the params
and the x and y in the function body,

28
00:01:25.024 --> 00:01:26.582
point to those params, and

29
00:01:26.582 --> 00:01:30.443
a whole bunch of stuff that if you
ever read the JavaScript spec, and

30
00:01:30.443 --> 00:01:34.690
wake up afterwards, it's documented
in there, don't worry about it.

31
00:01:34.690 --> 00:01:37.460
If you ever do choose to
read the JavaScript spec,

32
00:01:37.460 --> 00:01:40.120
the first part is incredibly
interesting and easy to read.

33
00:01:40.120 --> 00:01:42.720
But then it's all browser
implementation and all the rules and

34
00:01:42.720 --> 00:01:43.530
stuff along those lines.

35
00:01:43.530 --> 00:01:46.077
But I don't wanna dissuade you from
reading it, cuz the first part is actually

36
00:01:46.077 --> 00:01:49.706
incredibly well-written.
&gt;&gt; Steve Kinney: So we have the AST,

37
00:01:49.706 --> 00:01:52.480
we have everything we
need to make byte code.

38
00:01:52.480 --> 00:01:55.970
Great, right, let's pass it to ignition,
let's do the thing.

39
00:01:55.970 --> 00:02:00.270
Baseline compiler takes that AST,
translates it, it's this part right here.

40
00:02:00.270 --> 00:02:03.990
Ideally, right, the story ends,
and we can't optimize it.

41
00:02:03.990 --> 00:02:06.060
It goes to byte code, it runs

