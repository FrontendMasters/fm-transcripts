WEBVTT

1
00:00:00.270 --> 00:00:03.020
&gt;&gt; Will Sentance: Let's do our
checks people, let's do our checks.

2
00:00:03.020 --> 00:00:06.600
Do we have everything that we need?

3
00:00:06.600 --> 00:00:11.217
Do we have both our functions that
are specific to a paid user type and

4
00:00:11.217 --> 00:00:16.580
our function that's specific,
not specific but available to all users?

5
00:00:16.580 --> 00:00:17.874
Let's do our check.

6
00:00:17.874 --> 00:00:20.030
Raise your hand,
if you wanna do the lookup check.

7
00:00:20.030 --> 00:00:22.000
David, you're up man.

8
00:00:22.000 --> 00:00:25.039
Give me a second,

9
00:00:25.039 --> 00:00:31.124
paiduserone.increase balance.

10
00:00:32.886 --> 00:00:33.550
&gt;&gt; Will Sentance: Let's do it.

11
00:00:33.550 --> 00:00:34.730
Where's paid user one?

12
00:00:34.730 --> 00:00:35.700
&gt;&gt; Speaker 2: Global memory.

13
00:00:35.700 --> 00:00:37.902
&gt;&gt; Will Sentance: There it it.

14
00:00:37.902 --> 00:00:39.742
&gt;&gt; Speaker 2: And inside of it.

15
00:00:39.742 --> 00:00:41.124
&gt;&gt; Will Sentance: Is there
a property increase user balance?

16
00:00:41.124 --> 00:00:42.490
&gt;&gt; Speaker 2: No.
&gt;&gt; Will Sentance: Which is bad as note.

17
00:00:42.490 --> 00:00:46.481
&gt;&gt; Speaker 2: Go to proto which goes to
the paid user creator and the prototype.

18
00:00:46.481 --> 00:00:48.640
&gt;&gt; Will Sentance: Yeah,
the prototype which finds the, excellent.

19
00:00:48.640 --> 00:00:49.720
It's simple as that.

20
00:00:49.720 --> 00:00:54.360
Look, note all that all this code is all
just trying to get these objects to have

21
00:00:54.360 --> 00:00:58.230
access to a collection of functions, and
then those collection of functions have

22
00:00:58.230 --> 00:01:01.170
access to another collection of or
let's see if it does have access.

23
00:01:01.170 --> 00:01:06.593
Let's do paid user, so this was a success,

24
00:01:06.593 --> 00:01:11.578
lets do paiduserone.sayname, okay,

25
00:01:11.578 --> 00:01:15.280
David, take it away again.

26
00:01:15.280 --> 00:01:17.120
&gt;&gt; Speaker 3: Yep,
paid user one and global memory.

27
00:01:17.120 --> 00:01:18.410
&gt;&gt; Will Sentance: Perfect.

28
00:01:18.410 --> 00:01:20.820
&gt;&gt; Speaker 3: Checks for
sayname, it doesn't find it.

29
00:01:20.820 --> 00:01:22.142
&gt;&gt; Will Sentance: Yeah.
&gt;&gt; Speaker 3: Follows it's proto-

30
00:01:22.142 --> 00:01:22.910
&gt;&gt; Will Sentance: Just give me a second

31
00:01:22.910 --> 00:01:24.970
I'm gonna change color so use orange.

32
00:01:24.970 --> 00:01:26.620
So, yeah, doesn't find it.

33
00:01:26.620 --> 00:01:29.630
Follows the proto up to-
&gt;&gt; Speaker 3: Paid user creator's

34
00:01:29.630 --> 00:01:32.140
prototype is there, nothing.

35
00:01:32.140 --> 00:01:36.330
So then it goes through its proto up
to user creator, checks its proto for

36
00:01:36.330 --> 00:01:37.025
same name.

37
00:01:37.025 --> 00:01:39.761
&gt;&gt; Will Sentance: Not proto checks,
its prototype object.

38
00:01:39.761 --> 00:01:40.810
Does it find same name?

39
00:01:40.810 --> 00:01:41.430
&gt;&gt; Speaker 3: Yes, it does.

40
00:01:41.430 --> 00:01:42.409
&gt;&gt; Will Sentance: It does.

41
00:01:45.300 --> 00:01:50.700
We have access to functions that
are specific to a paid user one,

42
00:01:50.700 --> 00:01:55.350
a paid user two, a paid user ,100 and
we have access to functions that

43
00:01:55.350 --> 00:02:01.930
are available to all users, but also
still available through that chain up.

44
00:02:01.930 --> 00:02:05.084
As to our specific paid user one.

45
00:02:05.084 --> 00:02:05.760
Go ahead, Eric.

46
00:02:05.760 --> 00:02:09.660
&gt;&gt; Eric: So
we have lost reference to Paid Name.

47
00:02:09.660 --> 00:02:11.596
The parameter Paid Name is [CROSSTALK].

48
00:02:11.596 --> 00:02:13.958
&gt;&gt; Will Sentance: Yeah, yeah,
yeah, but that's not a problem.

49
00:02:13.958 --> 00:02:14.900
I called it Paid.

50
00:02:14.900 --> 00:02:19.736
We have the parameter,
which is used to temporarily hold.

51
00:02:19.736 --> 00:02:20.470
&gt;&gt; Eric: Right.
&gt;&gt; Will Sentance: A list.

52
00:02:21.960 --> 00:02:24.020
Before we stuck it on the object,
under the label name.

53
00:02:24.020 --> 00:02:24.578
&gt;&gt; Eric: Right.
&gt;&gt; Will Sentance: Yeah, yeah.

54
00:02:24.578 --> 00:02:26.080
&gt;&gt; Speaker 5: But
it's not part of the global anymore?

55
00:02:26.080 --> 00:02:27.410
&gt;&gt; Will Sentance: No, well,
it's definitely not available.

56
00:02:27.410 --> 00:02:27.910
No, no, no.
&gt;&gt; Speaker 5: Right.

57
00:02:27.910 --> 00:02:29.134
&gt;&gt; Will Sentance: Everything inside this

58
00:02:29.134 --> 00:02:31.336
execution cord has been deleted except for

59
00:02:31.336 --> 00:02:32.917
the object we return out.
&gt;&gt; Speaker 5: And

60
00:02:32.917 --> 00:02:36.141
it never got copied to this, so it's gone.
&gt;&gt; Will Sentance: Yeah,

61
00:02:36.141 --> 00:02:38.867
well, we held on to the list though,
cuz we stuck it on name.

62
00:02:38.867 --> 00:02:41.213
Remember, when we went through through

63
00:02:41.213 --> 00:02:46.480
music raise a call exactly, but
we don't care that it's called paid name.

64
00:02:46.480 --> 00:02:48.520
We wanted it's parameter to be named.

65
00:02:48.520 --> 00:02:54.750
I called it paid name to make sure it's
really clear that we have paid name here.

66
00:02:54.750 --> 00:02:57.970
But in the end it gets passed in and
becomes name.

67
00:02:57.970 --> 00:03:01.610
Inside userCreator and
stuck on the object as name.

68
00:03:01.610 --> 00:03:03.580
All right, here we go, people.

69
00:03:03.580 --> 00:03:07.150
We are almost there, final version.

