WEBVTT

1
00:00:00.030 --> 00:00:01.550
&gt;&gt; Will Sentance: Let's just
walk through this code here and

2
00:00:01.550 --> 00:00:04.590
it's a walkthrough our call
of the increment method.

3
00:00:04.590 --> 00:00:06.340
Let's see it actually play out.

4
00:00:06.340 --> 00:00:08.910
So we are calling user1.increment.

5
00:00:08.910 --> 00:00:12.090
Elliot taught me through the look up
process of this increment function, and

6
00:00:12.090 --> 00:00:13.080
let's see what actually happens.

7
00:00:13.080 --> 00:00:15.110
Taught me through the look up process,
Elliot.

8
00:00:15.110 --> 00:00:16.750
&gt;&gt; Elliot: We look in global memory for
User 1.

9
00:00:16.750 --> 00:00:18.110
&gt;&gt; Will Sentance: Find it.

10
00:00:18.110 --> 00:00:21.658
&gt;&gt; Elliot: Find it and
then we look for increment.

11
00:00:21.658 --> 00:00:22.560
&gt;&gt; Will Sentance: Do we find it?

12
00:00:22.560 --> 00:00:23.390
&gt;&gt; Elliot: No, we don't find it.

13
00:00:23.390 --> 00:00:24.310
&gt;&gt; Will Sentance: We do not.

14
00:00:24.310 --> 00:00:25.370
Do we panic?

15
00:00:25.370 --> 00:00:26.190
&gt;&gt; Elliot: Nope.

16
00:00:26.190 --> 00:00:27.110
&gt;&gt; Will Sentance: We do not.

17
00:00:27.110 --> 00:00:28.650
JavaScript looks on the?

18
00:00:28.650 --> 00:00:29.270
&gt;&gt; Elliot: Proto.

19
00:00:29.270 --> 00:00:31.310
&gt;&gt; Will Sentance: And
it finds a link up to?

20
00:00:31.310 --> 00:00:33.780
&gt;&gt; Elliot: The prototype object.

21
00:00:33.780 --> 00:00:38.470
&gt;&gt; Will Sentance: Object on the user
creator object, yep, and then we find?

22
00:00:38.470 --> 00:00:39.690
&gt;&gt; Elliot: Increment.
&gt;&gt; Will Sentance: Increment.

23
00:00:39.690 --> 00:00:43.592
Let's not just say, success,
we found the function we can call it,

24
00:00:43.592 --> 00:00:48.380
let's actually now execute that code and
letâ€™s see what happens.

25
00:00:48.380 --> 00:00:52.797
Recording the function increment,
let's create everybody a new?

26
00:00:52.797 --> 00:00:53.569
&gt;&gt; Elliot: Memory.

27
00:00:53.569 --> 00:00:55.790
&gt;&gt; Will Sentance: [LAUGH]
That's part of it.

28
00:00:55.790 --> 00:00:57.659
A new?
&gt;&gt; [CROSSTALK]

29
00:00:57.659 --> 00:00:58.641
&gt;&gt; Will Sentance: Let's create

30
00:00:58.641 --> 00:01:02.030
an execution context, there it is.

31
00:01:02.030 --> 00:01:05.910
What's the line of code inside of it?

32
00:01:06.950 --> 00:01:09.987
Seth, what is the line of code,
just literally give me the line of code.

33
00:01:09.987 --> 00:01:10.646
&gt;&gt; Seth: this.score-

34
00:01:10.646 --> 00:01:13.495
&gt;&gt; Will Sentance: this.score-
&gt;&gt; Seth: ++

35
00:01:13.495 --> 00:01:15.900
&gt;&gt; Will Sentance: ++, fantastic.

36
00:01:15.900 --> 00:01:21.200
Folk, they've got a portion name for
this, it's called an implicit parameter.

37
00:01:22.710 --> 00:01:24.550
I learned that name recently.

38
00:01:24.550 --> 00:01:26.510
Look, this increment function now,

39
00:01:26.510 --> 00:01:31.130
we don't have a unique copy of
it designed just for User 1.

40
00:01:31.130 --> 00:01:34.345
Nor do we have a unique copy of
it designed just for User 2.

41
00:01:34.345 --> 00:01:39.260
Let's actually just quickly create a User
2 so we can really, explicitly see this.

42
00:01:39.260 --> 00:01:43.178
There's a user 2 with, I don't know,

43
00:01:43.178 --> 00:01:47.000
let's say name, Jeff, a score of 8.

44
00:01:47.000 --> 00:01:52.972
And it too has a protobond up to.

45
00:01:52.972 --> 00:01:55.053
&gt;&gt; Will Sentance: So both User 2 and
what it says, it's User 20, actually.

46
00:01:55.053 --> 00:02:02.860
Both User 20 and User 1 are gonna be
using this same increment function.

47
00:02:02.860 --> 00:02:08.800
So how are we gonna make sure that
it explicitly targets User 1?

48
00:02:08.800 --> 00:02:15.110
Cuz if I wrote the code in here
instead to say user1.score++,

49
00:02:15.110 --> 00:02:18.680
such that I would go to User 1,
increment its score.

50
00:02:18.680 --> 00:02:21.251
Well now,
I'm using that same function on User 20.

51
00:02:21.251 --> 00:02:23.200
All I ever gonna do is
increase User 1's score.

52
00:02:24.480 --> 00:02:26.940
So I've got to make my function general,

53
00:02:26.940 --> 00:02:30.850
enough that it can work
on any of these objects.

54
00:02:30.850 --> 00:02:32.260
Now normally, when I want to be general,

55
00:02:32.260 --> 00:02:36.602
I use a parameter such as
when I call multiply by 2,

56
00:02:36.602 --> 00:02:40.650
it's not multiply 3 by 2 the function,
it's multiply something by 2.

57
00:02:40.650 --> 00:02:43.770
And when I call the function,
I determine what that thing is, and

58
00:02:43.770 --> 00:02:47.690
I replace the placeholder, let's say,
num with four or three, or whatever.

59
00:02:49.140 --> 00:02:54.380
Well, we got a problem here,
that this function similarly needs to be,

60
00:02:54.380 --> 00:02:59.830
when it's called,
applied to a particular object,

61
00:02:59.830 --> 00:03:01.710
the one that's pertinent to this moment.

62
00:03:03.040 --> 00:03:07.450
What placeholder, they call it actually,
I discovered, implicit parameter,

63
00:03:07.450 --> 00:03:08.080
it's implicit.

64
00:03:08.080 --> 00:03:11.680
It's one we don't explicitly state but
it's put in there for us.

65
00:03:11.680 --> 00:03:16.467
What implicit parameter, what placeholder,
this JavaScript give us,

66
00:03:16.467 --> 00:03:21.470
Terry, that allows us to refer
to the pertinent object at hand?

67
00:03:21.470 --> 00:03:22.760
&gt;&gt; Terry: This.
&gt;&gt; Will Sentance: This.

68
00:03:22.760 --> 00:03:25.290
And it is a totally different, this,

69
00:03:25.290 --> 00:03:27.580
to the one we have when
we created the objects.

70
00:03:27.580 --> 00:03:29.300
When the object was also created,
it got the label,

71
00:03:29.300 --> 00:03:31.780
this, and then the object was
returned out to use the one.

72
00:03:31.780 --> 00:03:35.180
And not, this,
because its execution context was deleted,

73
00:03:35.180 --> 00:03:37.320
though this was definitely lost.

74
00:03:37.320 --> 00:03:38.890
But the object was returned out.

75
00:03:38.890 --> 00:03:43.379
The, this,
here is a totally different this.

76
00:03:43.379 --> 00:03:45.440
And there is one simple rule for its use.

77
00:03:46.480 --> 00:03:50.796
Whenever I call a method, a method is
a function on an object, it always,

78
00:03:50.796 --> 00:03:54.421
when I call that clear
the execution context, immediately,

79
00:03:54.421 --> 00:03:57.371
in the local memory,
there is a this assignment.

80
00:03:57.371 --> 00:04:01.249
In fact, there is a this assignment,
a this declaration with a value,

81
00:04:01.249 --> 00:04:02.940
the whole time in JavaScript.

82
00:04:02.940 --> 00:04:04.860
Any execution context has a this.

83
00:04:04.860 --> 00:04:07.710
The global execution context has one.

84
00:04:07.710 --> 00:04:10.090
And the this there refers to
that global window thing.

85
00:04:11.600 --> 00:04:16.890
Regular functions, not cool with new, or
called on to the right-hand side of a dot.

86
00:04:16.890 --> 00:04:19.840
They also have a this inside of it,
but it's pretty useless.

87
00:04:19.840 --> 00:04:26.710
It always refer to that weird global
object thing, it's pretty useless.

88
00:04:26.710 --> 00:04:31.058
But there is a profound use when
I'm trying to call a function.

89
00:04:31.058 --> 00:04:34.187
When I'm trying to write a function,
like increment,

90
00:04:34.187 --> 00:04:37.660
that will refer to the right
object at the right moment.

91
00:04:37.660 --> 00:04:40.550
And there is one simple rule,
when I call a method,

92
00:04:40.550 --> 00:04:44.130
a function to the right-hand side
of the dot, it will automatically,

93
00:04:44.130 --> 00:04:48.410
as soon as that function gets called,
its execution context opens, the this

94
00:04:48.410 --> 00:04:53.520
will point to the object to
the left-hand side of the dot.

95
00:04:53.520 --> 00:04:59.041
So Nick, what, when we call increment,
will the this immediately be assigned to?

96
00:05:00.928 --> 00:05:02.570
&gt;&gt; Will Sentance: What's to
the left-hand side of the dot, Chris?

97
00:05:02.570 --> 00:05:07.730
&gt;&gt; Chris: User 1.
&gt;&gt; Will Sentance: To User 1, to User 1.

98
00:05:07.730 --> 00:05:12.560
And so, David, when we run
increment on User 1, there was no

99
00:05:12.560 --> 00:05:17.790
increment function on User 1 itself,
it was in this set of shared functions.

100
00:05:17.790 --> 00:05:20.166
We want to make sure it
can work on User 1 and

101
00:05:20.166 --> 00:05:23.300
User 20, well, we're running it on User 1.

102
00:05:23.300 --> 00:05:26.880
What does the this.score++ evaluate to?

103
00:05:26.880 --> 00:05:28.070
&gt;&gt; David: User 1's score.

104
00:05:28.070 --> 00:05:29.215
&gt;&gt; Will Sentance: Fantastic.

105
00:05:29.215 --> 00:05:35.373
User1.score++, let's
do our lookup journey.

106
00:05:35.373 --> 00:05:39.496
We look for User 1 in local memory,
it ain't there,

107
00:05:39.496 --> 00:05:43.539
we look out to go up There it is,
and we increment it.

108
00:05:43.539 --> 00:05:47.945
But what if it had been
on User20.increment?

109
00:05:47.945 --> 00:05:50.550
Let's do that journey, let's make sure
we're really, really clear on this and

110
00:05:50.550 --> 00:05:51.690
it's a bit repetitive.

111
00:05:51.690 --> 00:05:53.400
But let's make sure we're
really clear on this.

112
00:05:54.600 --> 00:05:57.560
Nick, User20.increment.

113
00:05:57.560 --> 00:05:58.659
We look up?

114
00:05:58.659 --> 00:06:03.947
&gt;&gt; Nick: User20.increment will look
to see if increment is in its object,

115
00:06:03.947 --> 00:06:05.140
and it's not.

116
00:06:05.140 --> 00:06:05.890
&gt;&gt; Will Sentance: Fantastic.

117
00:06:05.890 --> 00:06:08.550
&gt;&gt; Nick: It then doesn't give up,
and goes to proto.

118
00:06:08.550 --> 00:06:09.290
&gt;&gt; Will Sentance: Fantastic.

119
00:06:09.290 --> 00:06:10.170
&gt;&gt; Nick: And then-
&gt;&gt; Will Sentance: We're going to

120
00:06:10.170 --> 00:06:10.860
go to proto, sorry,

121
00:06:10.860 --> 00:06:14.220
which takes us to userCreator prototype-
&gt;&gt; Nick: And it finds increment there.

122
00:06:14.220 --> 00:06:15.434
&gt;&gt; Will Sentance: We grab its code.

123
00:06:15.434 --> 00:06:16.660
&gt;&gt; Nick: We grab that.

124
00:06:16.660 --> 00:06:17.997
&gt;&gt; Will Sentance: We create?

125
00:06:17.997 --> 00:06:19.201
&gt;&gt; Nick: Execution context.

126
00:06:19.201 --> 00:06:21.510
&gt;&gt; Will Sentance: Fantastic,
and into it we go.

127
00:06:21.510 --> 00:06:26.020
What's the immediate thing
that's assigned in local memory?

128
00:06:27.190 --> 00:06:27.860
&gt;&gt; Nick: This.

129
00:06:27.860 --> 00:06:31.580
&gt;&gt; Will Sentance: This, which is
automatically assigned to whatever is to

130
00:06:31.580 --> 00:06:34.440
the left-hand side of the dot on which
that execution call is being called.

131
00:06:34.440 --> 00:06:35.760
So Nick, what is a this?

132
00:06:35.760 --> 00:06:36.812
&gt;&gt; Nick: This is User 20.

133
00:06:36.812 --> 00:06:38.820
&gt;&gt; Will Sentance: User 20,
fantastic, Matt.

134
00:06:38.820 --> 00:06:40.240
Well, look at that.

135
00:06:40.240 --> 00:06:41.760
This is very helpful.

136
00:06:41.760 --> 00:06:46.590
Now, we've got a this.score++ that's
gonna actually have a meaning.

137
00:06:46.590 --> 00:06:51.990
And so, I have this.score++ is
going to evaluate to, Nick?

138
00:06:54.340 --> 00:06:56.850
&gt;&gt; Nick: User20.score.

139
00:06:56.850 --> 00:06:57.880
&gt;&gt; Will Sentance: Fantastic.

140
00:06:57.880 --> 00:07:01.621
We look for the User 20 locally,
it's not there,

141
00:07:01.621 --> 00:07:05.374
we look to global,
it's there and we increment it.

142
00:07:05.374 --> 00:07:06.363
Beautiful.

143
00:07:06.363 --> 00:07:09.809
Okay, this is a different
use of the keyword, this,

144
00:07:09.809 --> 00:07:12.040
to that use of the keyword, this.

145
00:07:12.040 --> 00:07:16.030
They are totally unrelated,
totally unrelated.

146
00:07:16.030 --> 00:07:20.020
One is the auto-assignment of this,
which, in other languages,

147
00:07:20.020 --> 00:07:22.550
that's not a crazy thing,
because these things are closer.

148
00:07:22.550 --> 00:07:26.670
But in JavaScript,
I really wish they'd called, I don't know,

149
00:07:26.670 --> 00:07:28.360
I really wish they'd given
them different labels.

150
00:07:28.360 --> 00:07:31.940
One is,
I call this one auto-create object.

151
00:07:33.460 --> 00:07:35.033
&gt;&gt; Nick: This and that, so.

152
00:07:35.033 --> 00:07:36.333
&gt;&gt; Will Sentance: Yeah,
I just wish it said, so

153
00:07:36.333 --> 00:07:39.310
you could then go auto-create
an object.name equals name.

154
00:07:39.310 --> 00:07:42.250
How much more clear would that be,
rather than this?

155
00:07:42.250 --> 00:07:43.990
What the hell does this mean?

156
00:07:43.990 --> 00:07:46.560
I always feel like language
designers get really familiar with

157
00:07:46.560 --> 00:07:48.790
things that become almost
intuitive to them.

158
00:07:48.790 --> 00:07:52.249
And therefore,
they design their new language as though

159
00:07:53.310 --> 00:07:58.176
this is a relevant, a sensible name for
an auto-create object.

160
00:07:58.176 --> 00:08:01.996
No, no, call it auto-creator object, and

161
00:08:01.996 --> 00:08:07.650
call this one the object at hand,
the objectathand.score++.

162
00:08:07.650 --> 00:08:11.069
My languages would be very
verbose if I created a language.

163
00:08:11.069 --> 00:08:13.150
It would be a very long form language.

164
00:08:13.150 --> 00:08:15.548
All right, so let's do this again.

165
00:08:15.548 --> 00:08:19.961
This time, the only thing that's changed
is our increment function now has a little

166
00:08:19.961 --> 00:08:21.702
function declared inside of it,

167
00:08:21.702 --> 00:08:26.640
whether this.score++ is being stored,
and then we're gonna run that.

168
00:08:26.640 --> 00:08:29.580
Now, in reality, we're never gonna
store and add one function that

169
00:08:29.580 --> 00:08:32.640
does one line of code and then call it,
we're just gonna do it directly.

170
00:08:32.640 --> 00:08:36.798
But, I'm doing this cuz I wanna reveal
something that is probably the biggest

171
00:08:36.798 --> 00:08:39.130
gotcha in object-oriented programming.

172
00:08:39.130 --> 00:08:43.567
This is the biggest gotcha in OOP, okay?

173
00:08:43.567 --> 00:08:47.527
And I was, I gave this talk a few days
ago and I asked someone who had been

174
00:08:47.527 --> 00:08:51.368
interviewed recently,
this question came up in their interview.

175
00:08:51.368 --> 00:08:54.275
It is a favorite gotcha bug in OOP.

176
00:08:54.275 --> 00:08:58.021
So we're gonna understand how to solve it,
and also why it happens.

