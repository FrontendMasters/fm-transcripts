WEBVTT

1
00:00:00.400 --> 00:00:02.480
&gt;&gt; Will: What are we doing in
our first line of code here,

2
00:00:02.480 --> 00:00:05.510
if you can just verbalize that for
me so I can then diagram it out and

3
00:00:05.510 --> 00:00:09.200
we can make sure we're continuing to
refine our technical communication.

4
00:00:09.200 --> 00:00:11.150
What do we do in that first
line of code there, Suzie?

5
00:00:11.150 --> 00:00:13.330
&gt;&gt; Suzie: We have a cons, obj.

6
00:00:13.330 --> 00:00:18.040
&gt;&gt; Will: Obj,
[LAUGH] we can pronounce it obj.

7
00:00:18.040 --> 00:00:18.542
&gt;&gt; Suzie: Or obj.

8
00:00:18.542 --> 00:00:19.470
&gt;&gt; Will: Obj.
&gt;&gt; Suzie: Object.

9
00:00:19.470 --> 00:00:22.490
&gt;&gt; Will: I don't know if that's allowed,
but yeah, obj, exactly.

10
00:00:22.490 --> 00:00:23.630
And it is?

11
00:00:23.630 --> 00:00:26.970
&gt;&gt; Suzie: An object.
&gt;&gt; Will: An object, fantastic.

12
00:00:26.970 --> 00:00:27.820
There it is.

13
00:00:29.500 --> 00:00:31.544
Okay, and what properties does it
have immediately assigned to it?

14
00:00:31.544 --> 00:00:32.206
&gt;&gt; Suzie: Num.
&gt;&gt; Will: Num.

15
00:00:32.206 --> 00:00:33.170
&gt;&gt; Suzie: Properties.

16
00:00:33.170 --> 00:00:34.010
&gt;&gt; Will: Yeah.
&gt;&gt; Suzie: Value of three.

17
00:00:34.010 --> 00:00:39.080
&gt;&gt; Will: Fantastic, well put,
okay, now, let's go and access it.

18
00:00:39.080 --> 00:00:42.980
And the very next line Michael,
talk me through accessing it.

19
00:00:42.980 --> 00:00:47.441
&gt;&gt; Michael: We are calling obj and-
&gt;&gt; Will: Careful using the word calling

20
00:00:47.441 --> 00:00:49.022
for an object, that's for functions.

21
00:00:49.022 --> 00:00:53.400
So I would guess we are looking up pbj or
we're referencing obj or

22
00:00:53.400 --> 00:00:58.080
we're, yeah, we're looking at memory for
obj and we find it.

23
00:00:58.080 --> 00:01:00.897
&gt;&gt; Michael: Yep,
we get the property name, num.

24
00:01:00.897 --> 00:01:03.696
&gt;&gt; Will: Yeah, exactly which is the value?

25
00:01:03.696 --> 00:01:05.230
&gt;&gt; Michael: a 3.
&gt;&gt; Will: 3, right.

26
00:01:05.230 --> 00:01:09.337
Easy, or maybe not, or maybe easy.

27
00:01:09.337 --> 00:01:11.505
It's uses next property.

28
00:01:11.505 --> 00:01:20.620
Obj.hasOwnProperty and

29
00:01:20.620 --> 00:01:26.120
it's a function that takes in
an argument the string num.

30
00:01:29.260 --> 00:01:30.040
Let's do the lookup.

31
00:01:31.220 --> 00:01:31.900
Michael.

32
00:01:31.900 --> 00:01:34.510
Where do we look for obj?

33
00:01:34.510 --> 00:01:35.040
&gt;&gt; Michael: In the memory.

34
00:01:35.040 --> 00:01:36.280
&gt;&gt; Will: In global memory, spot on, yeah.

35
00:01:36.280 --> 00:01:37.210
Do we find it?

36
00:01:37.210 --> 00:01:40.263
&gt;&gt; Michael: Yes
&gt;&gt; Will: Yes, where do we look for

37
00:01:40.263 --> 00:01:42.343
hasOwnProperty?

38
00:01:42.343 --> 00:01:47.310
We look for it on on the object right,
it's just like num, we're looking for it.

39
00:01:47.310 --> 00:01:51.094
We found num, it was there, we looked for
hasOwnProperty, is it on there?

40
00:01:51.094 --> 00:01:52.379
&gt;&gt; Michael: I don't see it.

41
00:01:52.379 --> 00:01:55.331
&gt;&gt; Will: It's definitely definitely
not but we do look on the object,

42
00:01:55.331 --> 00:01:58.560
because it's a property of obj,
which we're trying to access.

43
00:01:58.560 --> 00:01:59.690
Do we find it?

44
00:01:59.690 --> 00:02:02.125
&gt;&gt; Michael: No.
&gt;&gt; Will: No, do we give up?

45
00:02:02.125 --> 00:02:02.890
&gt;&gt; Michael: No.

46
00:02:02.890 --> 00:02:06.920
&gt;&gt; Will: No,
where do you think we might go and look?

47
00:02:08.260 --> 00:02:10.007
What hidden property?

48
00:02:10.007 --> 00:02:13.080
&gt;&gt; David: [INAUDIBLE]
&gt;&gt; Will: Yes, David.

49
00:02:13.080 --> 00:02:16.480
I meant to ask somebody, but
that is spot on, you're right.

50
00:02:16.480 --> 00:02:19.613
A hidden property proto.

51
00:02:19.613 --> 00:02:23.035
A hidden property proto, but
where's that linking to,

52
00:02:23.035 --> 00:02:25.814
okay, now we need to
know about something that

53
00:02:25.814 --> 00:02:29.326
is built into JavaScript as
soon as we turn on JavaScript.

54
00:02:29.326 --> 00:02:35.290
[INAUDIBLE] as soon as we start runtime,
our JavaScript engine up.

55
00:02:35.290 --> 00:02:39.880
As soon as we do so,
it automatically adds in

56
00:02:39.880 --> 00:02:44.481
the background this, that word is ruined.

57
00:02:44.481 --> 00:02:49.184
Automatically adds, wait for it,

58
00:02:49.184 --> 00:02:55.610
a function object combo
with the label object.

59
00:02:55.610 --> 00:02:57.350
Well, what would object be do we think?

60
00:02:57.350 --> 00:03:01.702
Well, probably an object, no,
it's a function object combo.

61
00:03:01.702 --> 00:03:07.044
It's a function,
how do I show these as being fundamental?

62
00:03:07.044 --> 00:03:10.389
They're built in, we don't assign these,
we don't declare these.

63
00:03:10.389 --> 00:03:16.180
I'm gonna use orange to sort of mark
off stuff that we're not assigning.

64
00:03:16.180 --> 00:03:19.150
It's there in JavaScript by default, okay?

65
00:03:20.470 --> 00:03:26.767
Not very clear though, I don't know.

66
00:03:26.767 --> 00:03:28.860
It's in memory, but
we're not putting there.

67
00:03:28.860 --> 00:03:31.202
And one of the first things
in there is called object.

68
00:03:31.202 --> 00:03:37.220
It is a function, it's actually
a function that by the way when called

69
00:03:39.910 --> 00:03:43.460
with a new keyword it's gonna
return us an object, but

70
00:03:43.460 --> 00:03:44.750
we don't need to worry about that for now.

71
00:03:44.750 --> 00:03:45.677
It's just an object.

72
00:03:45.677 --> 00:03:48.284
Is that right?
No, it's not, it's a function, but

73
00:03:48.284 --> 00:03:51.760
as a function therefore,
must also be an object.

74
00:03:51.760 --> 00:03:55.807
So it's a function and
also an object, okay?

75
00:03:57.943 --> 00:03:59.611
&gt;&gt; Will: There it is,
there's the object, there's the object.

76
00:04:01.589 --> 00:04:07.299
&gt;&gt; Will: That object by default as all
objects in function object combos have,

77
00:04:07.299 --> 00:04:10.298
has what property do we think Chris,

78
00:04:10.298 --> 00:04:16.340
what all objects in function object
combos have a property by default.

79
00:04:16.340 --> 00:04:17.870
&gt;&gt; Chris: Prototype?
&gt;&gt; Will: Fantastic, thank you Chris,

80
00:04:17.870 --> 00:04:18.800
yes, prototype.

81
00:04:20.630 --> 00:04:28.364
Which is itself a big old object,
&gt;&gt; Will: A sub-object I guess,

82
00:04:28.364 --> 00:04:34.357
and that object has,
&gt;&gt; Will: A function on it,

83
00:04:34.357 --> 00:04:39.610
a property on it called has own property.

84
00:04:39.610 --> 00:04:44.783
It has a few others like four or
five others, one's called, I don't know.

85
00:04:44.783 --> 00:04:46.773
What are they called?

86
00:04:46.773 --> 00:04:48.761
Two local strings,
is that a few others on there?

87
00:04:48.761 --> 00:04:52.507
There it is, has own property.

88
00:04:52.507 --> 00:04:58.134
And this object here
is what our underscore

89
00:04:58.134 --> 00:05:04.890
proto underscore points
to to this object here.

90
00:05:04.890 --> 00:05:05.920
The object.prototype.

91
00:05:05.920 --> 00:05:13.818
So we'd see in here
the word object.prototype.

92
00:05:13.818 --> 00:05:14.441
So Seth for

93
00:05:14.441 --> 00:05:19.390
me look at process on obj that has on
property that jobs will actually follow.

94
00:05:19.390 --> 00:05:22.410
&gt;&gt; Seth: So
it's gonna look on obj in government ring.

95
00:05:22.410 --> 00:05:25.410
It's not gonna find it there,
it's gonna freak out a little,

96
00:05:25.410 --> 00:05:30.010
then it's gonna look in the proto,
look in the object,

97
00:05:30.010 --> 00:05:34.000
look at its prototype,
find has own property, and then be happy.

98
00:05:34.000 --> 00:05:38.150
&gt;&gt; Will: Fantastic, excellent,
it's gonna call it, and

99
00:05:38.150 --> 00:05:43.510
check on obj that num exists,
and give us back true.

100
00:05:43.510 --> 00:05:47.710
Okay, folk this is to say,
I would call this dog fooding.

101
00:05:47.710 --> 00:05:51.610
JavaScript dog food, that's that
phrase meaning we use our own product.

102
00:05:51.610 --> 00:05:54.710
Dog foods, its own prototype or nature.

103
00:05:54.710 --> 00:05:58.760
It wants all of its things it creates,
that we create, but also any objects that

104
00:05:58.760 --> 00:06:02.820
it creates, any functions to all have
access to a bunch of bonus functionality.

105
00:06:02.820 --> 00:06:04.138
They could have used any language.

106
00:06:04.138 --> 00:06:07.487
An array in Ruby or
a dictionary in Python,

107
00:06:07.487 --> 00:06:11.310
they all have access to
certain functionality.

108
00:06:11.310 --> 00:06:12.214
But where's that coming from?

109
00:06:12.214 --> 00:06:16.220
Well, in JavaScript it's
coming from using its own very

110
00:06:16.220 --> 00:06:20.820
prototypal nature to give access
to a bunch of shared functions.

111
00:06:20.820 --> 00:06:24.340
They're not mysteriously under the hood,
hidden away.

112
00:06:24.340 --> 00:06:27.680
They're right there,
I can literally go console log.

113
00:06:27.680 --> 00:06:33.130
obj.dunder score per dunder
scorehasOwnProperty,

114
00:06:33.130 --> 00:06:35.790
and it will show me that
function that I can use.

115
00:06:35.790 --> 00:06:37.813
It is right there, these are not buried.

116
00:06:37.813 --> 00:06:41.295
These are not like implementations
in JavaScript under,

117
00:06:41.295 --> 00:06:46.330
in Machine code under the hood of Java,
so these are JavaScript implementations.

118
00:06:46.330 --> 00:06:48.964
Very interesting, okay.

119
00:06:48.964 --> 00:06:54.874
So what this means folk is
when we in our creation of

120
00:06:54.874 --> 00:07:00.644
user 1 get an object that
says name fill score for

121
00:07:00.644 --> 00:07:08.107
dunder score proto dunder score
is usercreator.prototype,

122
00:07:08.107 --> 00:07:12.530
go grab those functions there.

123
00:07:12.530 --> 00:07:16.740
Well, hold on,
do we lose access to hasOwnProperty?

124
00:07:16.740 --> 00:07:21.612
No, because that, we're gonna see in
a moment, don't worry, that object that

125
00:07:21.612 --> 00:07:25.477
has increment and log in on the prototype
object itself, is an object.

126
00:07:25.477 --> 00:07:28.081
So itself has a proto reference,

127
00:07:28.081 --> 00:07:32.480
a proto property which leads
up to object.prototype.

128
00:07:32.480 --> 00:07:38.750
It's a chain of links up and all what
we do is we intercede, in that chain.

129
00:07:38.750 --> 00:07:46.300
We say, okay, user one,
you're dunder proto dunder,

130
00:07:46.300 --> 00:07:51.220
is going to refer to
Usercreator.prototype which is an object.

131
00:07:51.220 --> 00:07:56.380
That object has its own dunder proto, so
if we don't find has our own property on

132
00:07:56.380 --> 00:07:59.160
that object, because we've only
got increment and login on there.

133
00:07:59.160 --> 00:08:02.790
We head up to the next one
object.prototype which

134
00:08:02.790 --> 00:08:04.570
is where it's at exactly.

