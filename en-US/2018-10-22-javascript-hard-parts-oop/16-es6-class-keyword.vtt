WEBVTT

1
00:00:00.160 --> 00:00:05.350
&gt;&gt; Will Sentance: We are writing, folk,
our increment function, our login function

2
00:00:05.350 --> 00:00:09.960
which we know I use the one is gonna have
access to through the proto reference.

3
00:00:09.960 --> 00:00:15.960
We are declaring them separately
from the function that when code

4
00:00:15.960 --> 00:00:20.660
gives us that object into user one that
has access to those shared functions.

5
00:00:22.430 --> 00:00:24.132
So what?

6
00:00:24.132 --> 00:00:25.330
It doesn't matter, it's fine.

7
00:00:25.330 --> 00:00:29.600
But in other languages,
you can do those first two parts,

8
00:00:29.600 --> 00:00:36.310
the function that they call it constructs
the object, the userCreator function here.

9
00:00:36.310 --> 00:00:42.260
And the methods, the functions that will
be available on that constructed object,

10
00:00:42.260 --> 00:00:44.750
not directly but
indirectly through the proto reference.

11
00:00:44.750 --> 00:00:48.420
You can do this assignment,
all bundled in one go.

12
00:00:48.420 --> 00:00:52.680
David, what's the construct that lets
us bundle this assignment in one go?

13
00:00:52.680 --> 00:00:54.690
&gt;&gt; David: Class.
&gt;&gt; Will Sentance: It's called a class.

14
00:00:54.690 --> 00:00:57.318
So now, JavaScript says, no, no, no.

15
00:00:57.318 --> 00:01:02.514
I wanna mask even more, I feel so ashamed
of my underlying prototype or nature.

16
00:01:02.514 --> 00:01:07.000
I'm gonna mask even more, and
I'm gonna allow you to rename what is

17
00:01:07.000 --> 00:01:11.750
clearly a function object combo
with a prototype property, a class.

18
00:01:11.750 --> 00:01:16.025
And I'm gonna allow you to
not even have to manually go

19
00:01:16.025 --> 00:01:20.398
usercreator.prototype.increment as
a function.

20
00:01:20.398 --> 00:01:23.877
But instead,
just literally list off any functions, and

21
00:01:23.877 --> 00:01:29.180
JavaScript's gonna take care of putting
them into this prototype object.

22
00:01:29.180 --> 00:01:32.960
So I'm just gonna list, I'm just gonna
say, and by the way, I'm gonna give this

23
00:01:32.960 --> 00:01:36.430
function, the one that constructs
the object, I'm gonna give it a subtitle.

24
00:01:36.430 --> 00:01:39.622
I don't know why, but
I'm gonna give it a subtitle, constructor.

25
00:01:41.142 --> 00:01:44.540
&gt;&gt; Will Sentance: And I declare that
bit first, inside the class structure.

26
00:01:44.540 --> 00:01:47.280
And then I'm gonna list off any functions,
any and

27
00:01:47.280 --> 00:01:49.670
all functions that I want
stuck in this object here.

28
00:01:49.670 --> 00:01:52.360
I don't even have to say,
put them in the prototype.

29
00:01:52.360 --> 00:01:56.130
JavaScript's so ashamed of it's
prototypal nature, but look.

30
00:01:56.130 --> 00:02:00.417
All right, we're writing our shared
methods separately from our object

31
00:02:00.417 --> 00:02:04.165
constructor itself,
the one that creates the object, right?

32
00:02:04.165 --> 00:02:06.810
We call user constructor, we don't run
this bit, we run the function bit.

33
00:02:07.980 --> 00:02:12.604
Well, that constructs
an object into user1.

34
00:02:12.604 --> 00:02:15.330
We're writing the constructor
bit separately.

35
00:02:17.700 --> 00:02:21.590
Other languages do this all in one place,
year 2015, that's a two sub two.

36
00:02:21.590 --> 00:02:25.188
When you get to subclassing,
I like this, here,

37
00:02:25.188 --> 00:02:28.366
I feel it's a little
bit masking the truth.

38
00:02:28.366 --> 00:02:29.390
Let's see it side by side.

39
00:02:29.390 --> 00:02:30.080
Here it is.

40
00:02:30.080 --> 00:02:32.420
So there's our solution three,
which we're now quite familiar with.

41
00:02:33.655 --> 00:02:35.355
UserCreator function is declared.

42
00:02:36.875 --> 00:02:38.925
It automatically gets
an object attached to it.

43
00:02:38.925 --> 00:02:40.995
Which we have a prototype
problem automatically.

44
00:02:40.995 --> 00:02:46.245
It's in there that we put
any functions that we want

45
00:02:46.245 --> 00:02:53.584
the returned object from calling
userCreator [SOUND] to have access to.

46
00:02:53.584 --> 00:02:55.280
Cool it again using 20.

47
00:02:55.280 --> 00:02:56.840
It will have access to and

48
00:02:56.840 --> 00:03:00.340
we put them in there using that
notation stick him in an object.

49
00:03:02.760 --> 00:03:06.550
Solution 4 says save yourself doing that.

50
00:03:06.550 --> 00:03:08.628
I'm gonna do it for you.

51
00:03:08.628 --> 00:03:10.740
So it's JavaScript.

52
00:03:10.740 --> 00:03:14.430
I'm going to grab any
functions that you list

53
00:03:14.430 --> 00:03:18.830
inside of this new
construct known as a class.

54
00:03:20.030 --> 00:03:26.202
Any functions you list, I'm gonna grab
them, and I'm gonna put them in there.

55
00:03:26.202 --> 00:03:30.725
But now you're not gonna put them manually
there yourself I'll put them there

56
00:03:30.725 --> 00:03:31.282
for you.

57
00:03:31.282 --> 00:03:37.570
Why can't we do it ourselves,
who knows, who knows?

58
00:03:37.570 --> 00:03:40.500
Actually, once I gave this talk, someone's
like please stop criticizing classes,

59
00:03:40.500 --> 00:03:42.530
they're very important best practices.

60
00:03:42.530 --> 00:03:46.810
So we'll see classes make our lives much,
much easier, especially in sub-classing.

61
00:03:46.810 --> 00:03:50.150
But it is a facade, it is a fake.

62
00:03:50.150 --> 00:03:53.660
If you know other languages that
are actually classical object oriented in

63
00:03:53.660 --> 00:03:57.100
their nature, traditional
object-oriented languages, they are not,

64
00:03:57.100 --> 00:04:02.640
under the hood, putting methods in
a prototype object, believe me.

65
00:04:02.640 --> 00:04:04.730
But that's exactly what we're doing here.

66
00:04:04.730 --> 00:04:10.560
So we rename the function bit
of the function-object combo,

67
00:04:10.560 --> 00:04:12.590
we rename it constructor.

68
00:04:12.590 --> 00:04:14.390
But that just means grab that bit, and

69
00:04:14.390 --> 00:04:16.710
put it in the function bit of
the function object combo.

70
00:04:16.710 --> 00:04:21.229
And then any functions which we were
manually putting in the object bit of

71
00:04:21.229 --> 00:04:26.356
the function object combo in the prototype
object well they're just listed off.

72
00:04:26.356 --> 00:04:27.370
We really need to put the word function.

73
00:04:28.810 --> 00:04:32.350
I think we can technically
put semi-colons after them,

74
00:04:32.350 --> 00:04:35.810
and that works but we don't put a comma,
we just list them off.

75
00:04:36.980 --> 00:04:39.014
And they'll all be grabbed
one-by-one as we go,

76
00:04:39.014 --> 00:04:41.392
when we declare the class these
bits are done immediately.

77
00:04:41.392 --> 00:04:43.230
They're not called,
they're just saved immediately.

78
00:04:43.230 --> 00:04:46.720
We grab the first bit just like we do
over here, store it as a function.

79
00:04:46.720 --> 00:04:50.170
It immediately gets a prototype
property on its object version, and

80
00:04:50.170 --> 00:04:52.589
then we grab these functions and
then we put them in that prototype object.

81
00:04:54.680 --> 00:04:57.980
I know I'm repeating myself here a bit,
but it really is just so

82
00:04:57.980 --> 00:05:00.290
astonishingly identical.

83
00:05:00.290 --> 00:05:07.340
We just now rename the function object
combo a clause, and we wrap it as such.

84
00:05:08.690 --> 00:05:12.310
All right folks, I'm not gonna walk
through this right hand side here.

85
00:05:12.310 --> 00:05:14.960
We're gonna see it much more in
subclassing, so do not fear.

86
00:05:14.960 --> 00:05:16.560
We will see it.

87
00:05:16.560 --> 00:05:20.200
Take a look at this,
it what's in syntactic sugar,

88
00:05:20.200 --> 00:05:22.710
that means nothing has
changed under the hood.

89
00:05:22.710 --> 00:05:28.470
Now we'll say this, when it comes to
subclassing, classes implements in

90
00:05:28.470 --> 00:05:32.630
things under the hood quite differently,
but there's nothing changed side by side.

91
00:05:32.630 --> 00:05:39.010
When I call userCreator, now I call
the function just as I did before,

92
00:05:39.010 --> 00:05:43.960
but now it's gonna subtitle constructor,
but it's not changed.

93
00:05:43.960 --> 00:05:47.860
When I call increment I look for
it on user1.

94
00:05:47.860 --> 00:05:48.610
It's not there.

95
00:05:48.610 --> 00:05:53.720
I reckon the proto I look up to
user-created.prototype where it is.

96
00:05:55.160 --> 00:05:56.370
Nothing's changed.

97
00:05:56.370 --> 00:05:58.300
Those increment log in,
look at it it's sitting there.

98
00:05:58.300 --> 00:06:00.310
They're not just sitting there,
they were grabbed and

99
00:06:00.310 --> 00:06:02.320
stuck in that prototype object.

100
00:06:02.320 --> 00:06:05.709
Line 1, declare class.

101
00:06:05.709 --> 00:06:08.840
Class it comprises a function and object.

102
00:06:08.840 --> 00:06:09.504
Line 2,

103
00:06:09.504 --> 00:06:15.074
put the function bit which knows it's
exactly the same as a previous function.

104
00:06:15.074 --> 00:06:17.180
Put it in and
give it the subtitle constructor.

105
00:06:17.180 --> 00:06:21.690
When you call userCreator,
run this bit, it's the same.

106
00:06:22.840 --> 00:06:27.040
Grab increment, put in
the userCreator.prototype, put it in.

107
00:06:27.040 --> 00:06:30.700
Grab login,
put it in userCreator.prototype login.

108
00:06:30.700 --> 00:06:35.660
Everyone see these are absolutely
identical under the hood.

109
00:06:35.660 --> 00:06:38.760
Okay, I'm leaving at that for now.

110
00:06:38.760 --> 00:06:41.600
And then after the break, after lunch,

111
00:06:41.600 --> 00:06:46.460
we will build out a full clause
diagram out from scratch.

112
00:06:46.460 --> 00:06:50.930
But we will do it in a more interesting
setting of using that to generate, or

113
00:06:50.930 --> 00:06:55.770
to be this sort o,
to save us doing some work of creating,

114
00:06:55.770 --> 00:06:58.270
what I think it was kind
of sub types of users.

115
00:06:58.270 --> 00:07:01.710
So we've got our uses here, after lunch
we're going to see, well hold on,

116
00:07:01.710 --> 00:07:07.700
what if I want to have users, user 1,
user 20, user 3, but also paid users?

117
00:07:07.700 --> 00:07:09.430
Paid users are gonna be a lot
like regular users, but

118
00:07:09.430 --> 00:07:12.340
they're going to have
some bonus properties and

119
00:07:12.340 --> 00:07:15.210
some bonus functionality that's
only applicable to them.

120
00:07:15.210 --> 00:07:17.890
Well, when we build those users,
paid users,

121
00:07:17.890 --> 00:07:22.654
we're gonna probably wanna use some of the
previous work that we did to build users.

122
00:07:22.654 --> 00:07:25.640
And that is known as subclassing, and

123
00:07:25.640 --> 00:07:32.460
there this new syntactic sugar of the
class does make our lives much cleaner.

124
00:07:32.460 --> 00:07:36.710
But also masks even more of
what's happening under the hood.

125
00:07:36.710 --> 00:07:39.747
But we are gonna understand it all.

