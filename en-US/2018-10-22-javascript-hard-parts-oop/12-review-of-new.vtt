WEBVTT

1
00:00:00.000 --> 00:00:04.200
&gt;&gt; Will Sentance: Benefits of this
approach, years for us to write.

2
00:00:04.200 --> 00:00:07.340
And still fairly typical practice
in professional engineering.

3
00:00:07.340 --> 00:00:12.070
And we're actually gonna see that when we
want to create what's called sub-classes,

4
00:00:12.070 --> 00:00:16.860
these approaches including solution
four are definitely cleaner to write.

5
00:00:16.860 --> 00:00:21.320
But the downsides 99% of
developers fail into whose because

6
00:00:21.320 --> 00:00:25.910
they have no idea how this
is working under the hood.

7
00:00:25.910 --> 00:00:30.070
And by the way, it's not a great design.

8
00:00:30.070 --> 00:00:31.650
We have to uppercase.

9
00:00:33.290 --> 00:00:36.800
That function up there to
let other developers know.

10
00:00:36.800 --> 00:00:40.340
You usually uppercase the first letter
to let other developers know, hey hey,

11
00:00:40.340 --> 00:00:45.670
this function needs the new
keyword to be run to work.

12
00:00:45.670 --> 00:00:48.094
Otherwise if I ran user creator
without the new keyword.

13
00:00:50.790 --> 00:00:54.670
&gt;&gt; Will Sentance: It's referring to
a this that hasn't been auto-created.

14
00:00:54.670 --> 00:00:58.090
It's referring to an object by the name
of this that hasn't been auto-created.

15
00:00:58.090 --> 00:01:00.259
So what would that this refer to, Terry?

16
00:01:02.010 --> 00:01:02.510
&gt;&gt; Terry: Don't know.

17
00:01:03.610 --> 00:01:04.750
&gt;&gt; Will Sentance: Basically exactly.

18
00:01:04.750 --> 00:01:07.116
That would be nice.

19
00:01:07.116 --> 00:01:09.725
But it doesn't anyone know
what it does refer to?

20
00:01:09.725 --> 00:01:10.680
&gt;&gt; Terry: Is it the global content?

21
00:01:10.680 --> 00:01:14.080
&gt;&gt; Will Sentance: It refers to this weird
old thing called the window object or

22
00:01:14.080 --> 00:01:20.970
the global object which,
has everything in JavaScript stored on it.

23
00:01:20.970 --> 00:01:27.250
So if you went to it, so this in global,
first the global window object, or

24
00:01:27.250 --> 00:01:31.940
what's called the global object, which has
every feature of JavaScript stored on it,

25
00:01:31.940 --> 00:01:34.850
and you suddenly now will have a name and
score property on it as well.

26
00:01:36.170 --> 00:01:39.890
That is a bad design decision, in my view.

27
00:01:39.890 --> 00:01:43.256
But functions could sit there and
fundamentally fail when someone else picks

28
00:01:43.256 --> 00:01:45.648
up the code if they don't
know to call the new keyword.

29
00:01:45.648 --> 00:01:49.081
Now, you might say, but
I can see the this, so

30
00:01:49.081 --> 00:01:52.352
I should probably know
I need to call renew.

31
00:01:52.352 --> 00:01:56.361
Yeah, but a lot of the time you
create sub-functions in these.

32
00:01:56.361 --> 00:02:01.130
User-created type functions that return
out objects, you create a sub-function on

33
00:02:01.130 --> 00:02:05.114
the top, and you don't see the first
this reference until way down, and

34
00:02:05.114 --> 00:02:08.509
you think your function's gonna work fine,
and you call it,

35
00:02:08.509 --> 00:02:12.540
it does nothing because you needed
to run it with a new keyword.

36
00:02:12.540 --> 00:02:17.080
So developers help each other out
by uppercasing the first letter

37
00:02:17.080 --> 00:02:21.490
as an indicator saying,
you better run me with a new keyword.

38
00:02:21.490 --> 00:02:24.240
But it doesn't change anything under the
hood, it's literally developers helping

39
00:02:24.240 --> 00:02:27.730
each other out, so
that we know to use a new keyword.

40
00:02:27.730 --> 00:02:29.210
Okay, that's changed in solution four,

41
00:02:29.210 --> 00:02:31.970
that's one of the benefits about solution
four is that solves that problem.

42
00:02:31.970 --> 00:02:33.640
&gt;&gt; Speaker 3: There was a quick question.

43
00:02:33.640 --> 00:02:35.290
&gt;&gt; Will Sentance: Yeah, go ahead.

44
00:02:35.290 --> 00:02:40.940
&gt;&gt; Speaker 3: Going back to that code,
or I guess the increment and login,

45
00:02:40.940 --> 00:02:46.230
those functions,
those are object prototype combos as well.

46
00:02:48.080 --> 00:02:49.270
&gt;&gt; Will Sentance: Yeah.

47
00:02:49.270 --> 00:02:53.060
Functions that are stored, they maybe
sort on objects, they maybe sort on

48
00:02:54.520 --> 00:03:00.650
a sub-object of an object, but if it's a
function, it has a function object combo.

49
00:03:00.650 --> 00:03:02.490
Now, all functions are.

50
00:03:02.490 --> 00:03:03.808
Do we care in this situation?

51
00:03:08.310 --> 00:03:10.320
&gt;&gt; Will Sentance: We do not, we're not
that bothered about it in this situation.

52
00:03:10.320 --> 00:03:12.680
We're gonna see we are always,

53
00:03:12.680 --> 00:03:16.460
because it's why we have the ability
to use call, apply and bind.

54
00:03:16.460 --> 00:03:21.930
We'll see that in a moment but
yes to our online friend,

55
00:03:21.930 --> 00:03:24.360
that is absolutely
a function object combo but

56
00:03:24.360 --> 00:03:26.420
it doesn't have any relevance
really particularly here.

57
00:03:26.420 --> 00:03:28.930
Yet all functions
are function object combos.

58
00:03:28.930 --> 00:03:31.230
And just remember when
you have thousands and

59
00:03:31.230 --> 00:03:35.780
thousands of lines of code,
having some organizing approach.

60
00:03:35.780 --> 00:03:39.770
If all we really do when we
write code is saving data.

61
00:03:39.770 --> 00:03:40.860
Like for user's score and

62
00:03:40.860 --> 00:03:44.270
name, saving functionality that
can then be applied to that data.

63
00:03:44.270 --> 00:03:47.630
Wouldn't it be a nice organizing approach
to put the right functionality with

64
00:03:47.630 --> 00:03:49.350
the right data, bundle it up?

65
00:03:49.350 --> 00:03:53.890
That you see how readable and how easy
that makes our lives as developers.

66
00:03:53.890 --> 00:03:57.922
No hunting for the right function, notice
like a massive laundry list of functions,

67
00:03:57.922 --> 00:04:00.224
and then a massive laundry
lists of data to save.

68
00:04:00.224 --> 00:04:04.419
But instead, kind of pass all them
off appropriately that is very,

69
00:04:04.419 --> 00:04:09.000
very nice allowing us to do, run our
functionality on our data directly.

70
00:04:09.000 --> 00:04:13.400
That is our dream, that is our dream.

71
00:04:13.400 --> 00:04:20.880
Now, we start off by putting the function
directly on the object, untenable.

72
00:04:20.880 --> 00:04:24.250
We couldn't have that because we've got
100 functions we want user one to have,

73
00:04:24.250 --> 00:04:26.390
but the same 100 functions
we want user two to have.

74
00:04:26.390 --> 00:04:28.210
So we got have them all copied
on every single object.

75
00:04:28.210 --> 00:04:29.880
That would be ridiculous.

76
00:04:29.880 --> 00:04:33.870
So we said okay,
use the prototypal nature of JavaScript,

77
00:04:33.870 --> 00:04:36.890
that prototypal feature,
such that when we don't find.

78
00:04:36.890 --> 00:04:38.939
We do not store it on the object itself.

79
00:04:38.939 --> 00:04:43.087
JavaScript looks in this little bound up
to what we called user function stored.

80
00:04:43.087 --> 00:04:47.191
We call it whatever we want, but
we hand crafted that bond for

81
00:04:47.191 --> 00:04:53.220
each of the objects that got returned out
of, if you remember, calling user creator.

82
00:04:53.220 --> 00:04:56.180
We hand crafted that each of
those objects that have a link,

83
00:04:56.180 --> 00:05:00.010
a reference up to a single object
where our functions were stored.

84
00:05:00.010 --> 00:05:03.390
We call it user function store, as long as
we called it the same thing we were fine.

85
00:05:03.390 --> 00:05:07.000
As long as we called it the same thing
as when we created the object and

86
00:05:07.000 --> 00:05:08.560
made that link we were fine.

87
00:05:08.560 --> 00:05:13.740
But this was a lot of hand crafting, hand
creating the object, hand making the bond,

88
00:05:13.740 --> 00:05:15.390
hand returning the object.

89
00:05:15.390 --> 00:05:20.410
So JavaScript's designers said don't
panic, we will save you that work,

90
00:05:20.410 --> 00:05:25.050
we will give you the new keyword such that
your function that creates the object

91
00:05:25.050 --> 00:05:26.590
will be much easier to make.

92
00:05:26.590 --> 00:05:28.040
You don't to make
the object yourself at all.

93
00:05:28.040 --> 00:05:32.060
You don't have to make the bond to
the set of functions yourself at all.

94
00:05:32.060 --> 00:05:36.640
We'll make a bond to an object where
you can put your functions, and

95
00:05:36.640 --> 00:05:39.790
that object will be on
the prototype property

96
00:05:39.790 --> 00:05:42.269
of the function that creates
the individual objects.

97
00:05:44.680 --> 00:05:47.190
You could imagine that this
object would be separate but

98
00:05:47.190 --> 00:05:50.880
it kind a make sense to put an own the
functional object combo of the function

99
00:05:50.880 --> 00:05:55.128
that creates the objects that need that,
need those functions.

100
00:05:55.128 --> 00:05:58.430
It may much easier.

101
00:05:58.430 --> 00:06:01.270
It is still fairly typical best practice,

102
00:06:01.270 --> 00:06:06.120
we're gonna see solution for,
says, you know what?

103
00:06:06.120 --> 00:06:09.530
This bit here is funny to call
it a functional object combo.

104
00:06:09.530 --> 00:06:11.400
It's funny to create it as a function and

105
00:06:11.400 --> 00:06:16.850
then use its prototype property to attach
the functions to that prototype object.

106
00:06:16.850 --> 00:06:18.380
Why don't we do it all in one go?

107
00:06:18.380 --> 00:06:20.730
And we call that a class.

108
00:06:20.730 --> 00:06:22.799
But under the hood, it's gonna be this.

109
00:06:22.799 --> 00:06:28.260
Before we get to that,
we are going to see it interlude.

110
00:06:28.260 --> 00:06:33.321
So here, our increment function is
attached to prototype object, so

111
00:06:33.321 --> 00:06:38.638
that when we call user1.increment,
we're not going to find user one,

112
00:06:38.638 --> 00:06:42.324
on, is it increment on user one object, so

113
00:06:42.324 --> 00:06:47.643
JavaScript is looking at the proto
reference up to the prototype object,

114
00:06:47.643 --> 00:06:52.830
we know that because the user one
object was created with a new keyword.

115
00:06:52.830 --> 00:06:58.990
Folk, nothing has changed between this
code that we just saw and this code here,

116
00:06:58.990 --> 00:07:03.630
except that I've slightly change how
the increment function is working.

117
00:07:03.630 --> 00:07:05.485
Let's go back.
Let's see that again.

118
00:07:05.485 --> 00:07:10.428
Nothing has change except there's
slightly change how the increment

119
00:07:10.428 --> 00:07:12.362
function is working here.

120
00:07:12.362 --> 00:07:17.670
Because I want you to see something
here that could often, what if we want

121
00:07:17.670 --> 00:07:22.805
to organize our code inside our
shared functions, increment login,

122
00:07:22.805 --> 00:07:28.540
perhaps, by defining a new inner
function inside the shared function.

123
00:07:28.540 --> 00:07:29.250
This often happens,

124
00:07:29.250 --> 00:07:33.430
so right here we have one line in
code this starts called plus plus.

125
00:07:33.430 --> 00:07:34.994
But of to me want much more than that.

