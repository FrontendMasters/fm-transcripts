WEBVTT

1
00:00:00.190 --> 00:00:01.430
&gt;&gt; Will: All right, here we go.

2
00:00:01.430 --> 00:00:03.100
Michael, take it away.

3
00:00:03.100 --> 00:00:05.570
Line one, what do we do, my friend?

4
00:00:05.570 --> 00:00:08.470
&gt;&gt; Michael: We're declaring a new
function called userCreator.

5
00:00:08.470 --> 00:00:09.630
&gt;&gt; Will: Talk really, really slowly,

6
00:00:09.630 --> 00:00:14.530
Michael, really,
really slowly while I erase my board.

7
00:00:14.530 --> 00:00:18.150
&gt;&gt; Michael: So we're declaring a new
function called userCreator and

8
00:00:18.150 --> 00:00:20.240
accepting arguments of name and score.

9
00:00:20.240 --> 00:00:20.900
&gt;&gt; Will: Perfect.

10
00:00:21.930 --> 00:00:23.790
Name and score.

11
00:00:23.790 --> 00:00:26.800
Well yeah exactly, well,
parameters of name and score, right?

12
00:00:26.800 --> 00:00:30.830
Arguments are the ones that we refer
to when we execute the function,

13
00:00:30.830 --> 00:00:33.450
the actual values we
pass in as our arguments.

14
00:00:33.450 --> 00:00:37.880
The placeholders,
the parameters receive the arguments.

15
00:00:37.880 --> 00:00:42.550
So the name and score parameter is
excellent, there it is stored in memory.

16
00:00:42.550 --> 00:00:45.970
Michael, next line of code,
tell me what the next line of code is.

17
00:00:45.970 --> 00:00:49.100
&gt;&gt; Michael: We're declaring
another variable called newUser,

18
00:00:49.100 --> 00:00:50.390
we're creating an object.

19
00:00:50.390 --> 00:00:55.140
&gt;&gt; Will: So, Michael, to go inside
of a function, we have to do what?

20
00:00:55.140 --> 00:00:58.150
For JavaScript to go inside of
a function's body, we have to do what?

21
00:00:58.150 --> 00:00:59.619
&gt;&gt; Michael: You have
to invoke [INAUDIBLE].

22
00:00:59.619 --> 00:01:01.520
&gt;&gt; Will: A-ha!
So this is a big tip.

23
00:01:01.520 --> 00:01:05.360
When you're reading through your code,
never let yourself look at function

24
00:01:05.360 --> 00:01:10.410
bodies, that means the innards of
a function, until you invoke it.

25
00:01:10.410 --> 00:01:14.580
Otherwise, you are dealing in
hypothetical, because there is no newUser.

26
00:01:14.580 --> 00:01:17.610
Because there is no name at this point,
there is no score.

27
00:01:17.610 --> 00:01:21.170
So we never go inside of
a function until we execute it.

28
00:01:21.170 --> 00:01:24.350
So the function store, there it is.

29
00:01:24.350 --> 00:01:26.970
And what is our next line there for
Michael?

30
00:01:26.970 --> 00:01:28.140
&gt;&gt; Michael: Within the function?

31
00:01:28.140 --> 00:01:29.050
Is that what you're asking?

32
00:01:29.050 --> 00:01:32.500
&gt;&gt; Will: Well we don't go inside
of a function until we call it.

33
00:01:32.500 --> 00:01:35.240
So in fact if we never
called user creator,

34
00:01:35.240 --> 00:01:36.550
we would never see any of that code.

35
00:01:36.550 --> 00:01:40.630
JavaScript would never interpret
any of that code and that function.

36
00:01:40.630 --> 00:01:44.350
So what therefore is actually
our next line of code.

37
00:01:44.350 --> 00:01:48.460
Nick,after we've declared you the creator,
&gt;&gt; Nick: Then we would go to,

38
00:01:48.460 --> 00:01:51.140
we'd declare the constant
user function store.

39
00:01:51.140 --> 00:01:51.660
&gt;&gt; Will: Exactly.

40
00:01:51.660 --> 00:01:52.260
Which is?

41
00:01:53.480 --> 00:01:54.460
&gt;&gt; Nick: An object.

42
00:01:54.460 --> 00:01:55.620
&gt;&gt; Will: An object, and

43
00:01:55.620 --> 00:01:59.190
what other properties we immediately
store on that object, Nick?

44
00:01:59.190 --> 00:02:03.850
&gt;&gt; Nick: The key name of
increment which is a function, and

45
00:02:03.850 --> 00:02:07.130
then another of login
which is also a function.

46
00:02:07.130 --> 00:02:09.600
&gt;&gt; Will: Perfect.
So our property increment and

47
00:02:09.600 --> 00:02:12.480
login are both functions.

48
00:02:12.480 --> 00:02:12.980
Okay.

49
00:02:14.560 --> 00:02:15.523
Beautiful.

50
00:02:15.523 --> 00:02:19.562
And now, note folks,
if you were to do what Michael was doing,

51
00:02:19.562 --> 00:02:22.613
have a little sneaky
look inside user creator,

52
00:02:22.613 --> 00:02:27.667
you'd see we're probably not gonna be
assigning any increment method to it.

53
00:02:27.667 --> 00:02:30.454
But we are gonna create an object,

54
00:02:30.454 --> 00:02:35.710
that somehow looks like it's
got some sort of connection.

55
00:02:35.710 --> 00:02:37.910
We're not sure how or what, but

56
00:02:37.910 --> 00:02:43.618
some sort of connection to user function
store which, look what it has on it.

57
00:02:43.618 --> 00:02:47.350
An increment method.

58
00:02:47.350 --> 00:02:50.770
All right, so Elliott,
we've saved user function store.

59
00:02:50.770 --> 00:02:54.480
it's got increment login, we've saved
user creator, we've done our setup.

60
00:02:54.480 --> 00:02:59.600
Now, Elliott, take me to the creation
of an actual user, user one.

61
00:02:59.600 --> 00:03:02.200
&gt;&gt; Elliott: So
a new constant is created, User 1.

62
00:03:02.200 --> 00:03:02.700
&gt;&gt; Will: Yep.

63
00:03:04.050 --> 00:03:09.910
So, User 1 is going to be the return
value Elliott, of calling what function?

64
00:03:09.910 --> 00:03:11.300
&gt;&gt; Elliott: User creator.

65
00:03:11.300 --> 00:03:16.560
&gt;&gt; Will: User creator with inputs Phil and
four.

66
00:03:16.560 --> 00:03:17.990
&gt;&gt; Elliott: Phil and four.

67
00:03:17.990 --> 00:03:20.650
&gt;&gt; Will: Let's create
that execution context,

68
00:03:20.650 --> 00:03:22.630
start talking me through it Elliott.

69
00:03:22.630 --> 00:03:23.730
Into it we go and

70
00:03:23.730 --> 00:03:27.710
in the local memory, what is the first
thing that we put in there, Elliott?

71
00:03:27.710 --> 00:03:29.430
&gt;&gt; Elliott: The first argument name.

72
00:03:29.430 --> 00:03:31.780
&gt;&gt; Will: The first argument which is?

73
00:03:31.780 --> 00:03:32.723
&gt;&gt; Elliott: The first parameter.

74
00:03:32.723 --> 00:03:35.937
&gt;&gt; Will: The first parameter which
is then assigned the argument what?

75
00:03:35.937 --> 00:03:37.026
&gt;&gt; Elliott: Phil.

76
00:03:37.026 --> 00:03:40.800
&gt;&gt; Will: "Phil", beautiful,
thank you Elliot.

77
00:03:40.800 --> 00:03:42.760
And now, Terry, next line.

78
00:03:42.760 --> 00:03:46.330
We're calling, we've passed in Phil's
name, and we're gonna pass in?

79
00:03:48.160 --> 00:03:48.760
&gt;&gt; Terry: A score of 4.

80
00:03:48.760 --> 00:03:50.790
&gt;&gt; Will: Score of 4, perfect.

81
00:03:50.790 --> 00:03:52.990
Now we hit the body of the function.

82
00:03:52.990 --> 00:03:55.890
We need to create our object.

83
00:03:55.890 --> 00:03:56.730
But ideally,

84
00:03:56.730 --> 00:04:01.520
we need our object to have a bond to
this user function store over here.

85
00:04:01.520 --> 00:04:06.420
So that, when it gets returned out and we
wanna use functions that are not directly

86
00:04:06.420 --> 00:04:09.850
on the object,
somehow we still have access to them.

87
00:04:09.850 --> 00:04:12.551
We're not gonna see exactly how
the bond is made quite yet.

88
00:04:12.551 --> 00:04:13.449
We're gonna see in a moment.

89
00:04:13.449 --> 00:04:17.194
But for now, that right hand side always,

90
00:04:17.194 --> 00:04:22.890
whatever we pass in,
it always returns an empty object.

91
00:04:22.890 --> 00:04:26.880
So, what do we have stored in new user

92
00:04:26.880 --> 00:04:30.070
at the point of the end of
that first line, David?

93
00:04:30.070 --> 00:04:30.930
&gt;&gt; David: An empty object.

94
00:04:30.930 --> 00:04:33.750
&gt;&gt; Will: A big old empty object.

95
00:04:33.750 --> 00:04:40.640
But an empty object, let's even say right
now, an empty object with somehow a bond

96
00:04:42.080 --> 00:04:46.650
to this function store,
user function store object.

97
00:04:46.650 --> 00:04:51.187
We're not sure how, we just know that
somehow this built-in function object dot

98
00:04:51.187 --> 00:04:53.434
create always returns an empty object.

99
00:04:53.434 --> 00:04:56.576
But that empty object sorta has a kinda
connection to user function, but

100
00:04:56.576 --> 00:04:57.615
we don't know how yet.

101
00:04:57.615 --> 00:05:03.100
But we'll see how, all right and into that
object we are going to add properties.

102
00:05:03.100 --> 00:05:04.357
Seth talk me through
adding the properties.

103
00:05:06.589 --> 00:05:11.130
&gt;&gt; Seth: A property called name contains
the value of the name variable.

104
00:05:11.130 --> 00:05:12.900
&gt;&gt; Will: Name parameter
&gt;&gt; Seth: Parameter.

105
00:05:12.900 --> 00:05:14.150
&gt;&gt; Will: Perfect.

106
00:05:14.150 --> 00:05:17.750
&gt;&gt; Seth: And a score property
that contains the value of score,

107
00:05:17.750 --> 00:05:18.620
which is four.

108
00:05:18.620 --> 00:05:21.130
&gt;&gt; Will: Perfect, and
do we add an increment function?

109
00:05:22.310 --> 00:05:23.480
I do not see it.

110
00:05:23.480 --> 00:05:24.620
But there's out object.

111
00:05:24.620 --> 00:05:26.930
Seth, how do I get it out into user one?

112
00:05:26.930 --> 00:05:27.590
&gt;&gt; Seth: Return it.

113
00:05:27.590 --> 00:05:33.677
&gt;&gt; Will: I return it out into User 1,

114
00:05:33.677 --> 00:05:36.726
into User 1.

115
00:05:36.726 --> 00:05:39.800
There it is.

116
00:05:39.800 --> 00:05:41.830
Out comes the object.

117
00:05:41.830 --> 00:05:46.490
Now note people, we return out new user.

118
00:05:46.490 --> 00:05:49.210
Well I prefer to say,
this is what Jarvis Word does.

119
00:05:49.210 --> 00:05:55.030
It goes, return newUser and
it says, what is newUser.

120
00:05:55.030 --> 00:05:56.470
It goes and looks in memory.

121
00:05:56.470 --> 00:05:58.070
It finds the object.

122
00:05:58.070 --> 00:06:02.590
We return now the object that is
currently designated as newUser.

123
00:06:02.590 --> 00:06:04.090
We don't return out its name.

124
00:06:04.090 --> 00:06:07.250
We just return out,
return use, is this object.

125
00:06:07.250 --> 00:06:08.710
Return out the object.

126
00:06:08.710 --> 00:06:10.210
Give it a new global label.

127
00:06:10.210 --> 00:06:13.890
Never, I don't like even like
the verbalization return new user,

128
00:06:13.890 --> 00:06:16.040
it implies somehow that new
user comes out as well,

129
00:06:16.040 --> 00:06:20.710
no no, just the value of new user,
which is the object.

130
00:06:20.710 --> 00:06:24.330
Return out the value of the new user,
which is the object in to the global

131
00:06:24.330 --> 00:06:31.440
constant User 1,
where we have name is Phil and score is 4.

132
00:06:31.440 --> 00:06:34.674
And still, this bond,

133
00:06:34.674 --> 00:06:39.590
somehow up to userFunctionStore.

134
00:06:39.590 --> 00:06:42.080
We don't know yet how,
but still, it's there.

135
00:06:42.080 --> 00:06:47.940
And folk, this is stuff we've seen before,
to our audience online, in hard parts.

136
00:06:47.940 --> 00:06:53.450
But this foundation is gonna give us
access to all the complexity in to come.

137
00:06:53.450 --> 00:06:55.020
All right, so there we go User 1.

138
00:06:55.020 --> 00:06:56.430
We have our object.

139
00:06:56.430 --> 00:06:59.610
It has a bond to User function, so
we're not sure how, but it has a bond.

140
00:07:01.410 --> 00:07:07.525
By analogy, Susie, User 2 just by analogy,
User 2 would have what?

141
00:07:07.525 --> 00:07:10.494
In it, Susie.

142
00:07:10.494 --> 00:07:13.790
&gt;&gt; Susie: The Julia?.

143
00:07:13.790 --> 00:07:17.650
&gt;&gt; Will: We have a property of
an object with a property name,

144
00:07:17.650 --> 00:07:19.438
which would be Julia.

145
00:07:19.438 --> 00:07:23.360
And then, David.

146
00:07:23.360 --> 00:07:24.542
&gt;&gt; David: A score of five.

147
00:07:24.542 --> 00:07:29.043
&gt;&gt; Will: Score of five,
and a hidden bond up

148
00:07:29.043 --> 00:07:34.570
to,
&gt;&gt; Will: User function store.

149
00:07:34.570 --> 00:07:37.060
We're not sure how, but
it's going up there.

