WEBVTT

1
00:00:00.000 --> 00:00:03.870
&gt;&gt; Will Sentance: So let's call our
increment function one more time.

2
00:00:03.870 --> 00:00:05.390
I'm gonna talk through it,
so that you don't have to.

3
00:00:06.780 --> 00:00:08.300
Okay, user1.increment.

4
00:00:08.300 --> 00:00:11.450
We call it, we look to user 1 for
the increment method.

5
00:00:11.450 --> 00:00:16.271
It's not there, so
we look to its dunder-proto,

6
00:00:16.271 --> 00:00:22.290
dunder-score, which links us up
to the object the label prototype

7
00:00:22.290 --> 00:00:27.560
that sits on the object of user creator,
that is user creator the function object

8
00:00:27.560 --> 00:00:32.930
combination, we grab the increment
function, we create an execution context.

9
00:00:32.930 --> 00:00:38.446
In it's local memory,
we immediately assign the implicit

10
00:00:38.446 --> 00:00:42.902
parameter
&gt;&gt; Will Sentance: This that means implicit

11
00:00:42.902 --> 00:00:47.210
because we don't pass it in, the argument
to fill it in, but it's always there.

12
00:00:48.300 --> 00:00:52.260
There it is this, and its argument,
I guess you could call it its implicit

13
00:00:52.260 --> 00:00:58.105
argument, I guess, is whatever is to the
left-hand side of the dot, user 1 okay?

14
00:00:59.300 --> 00:01:03.420
Beautiful, and
then we declare a function add 1.

15
00:01:03.420 --> 00:01:07.700
I'm not gonna go into exactly how
these arrow functions work, but

16
00:01:07.700 --> 00:01:09.780
you can sort of see
it's got no parameters.

17
00:01:09.780 --> 00:01:10.940
It's identical, basically.

18
00:01:10.940 --> 00:01:12.929
No parameters, no inputs.

19
00:01:12.929 --> 00:01:16.293
But its body says this.score++, okay?

20
00:01:16.293 --> 00:01:17.860
So we declare that arrow function.

21
00:01:19.160 --> 00:01:19.810
There it is.

22
00:01:19.810 --> 00:01:22.080
I'm gonna do a little arrow above.

23
00:01:22.080 --> 00:01:24.730
That's how I'm gonna direct
a special over function.

24
00:01:24.730 --> 00:01:27.890
It's an arrow function but
it looks exactly the same.

25
00:01:27.890 --> 00:01:33.210
You run it by calling add one but
it has one powerful difference.

26
00:01:34.240 --> 00:01:38.359
The this inside of its execution context.

27
00:01:39.810 --> 00:01:45.390
is going to refer to whatever
the this was when it was defined.

28
00:01:45.390 --> 00:01:48.470
I'm almost gonna do like this.

29
00:01:48.470 --> 00:01:53.420
It's got like a hidden property
that says my this later on will

30
00:01:54.730 --> 00:01:58.930
be what it was when I was defined.

31
00:01:58.930 --> 00:01:59.870
So let's call it now.

32
00:02:01.190 --> 00:02:04.030
Add 1, new execution context set.

33
00:02:05.030 --> 00:02:10.120
First thing in my local memory
of this new execution context.

34
00:02:10.120 --> 00:02:11.880
&gt;&gt; Seth: This is assigned to user one.

35
00:02:11.880 --> 00:02:14.370
&gt;&gt; Will Sentance: Excellent.
The this is assigned to

36
00:02:14.370 --> 00:02:17.370
what the this was when
this function was defined.

37
00:02:17.370 --> 00:02:18.610
When add1 was defined.

38
00:02:18.610 --> 00:02:21.010
And remember, when I say add1 was defined,
that means literally,

39
00:02:21.010 --> 00:02:22.540
add1, never lose sight of this.

40
00:02:22.540 --> 00:02:27.520
That means, add1 was saved as
a label in memory for that code.

41
00:02:27.520 --> 00:02:29.490
Which means,
you can certainly add hidden stuff to it,

42
00:02:29.490 --> 00:02:32.300
including a hidden property saying,
when you call me,

43
00:02:32.300 --> 00:02:36.840
make sure my this assignment is to
whatever this was when I was saved, okay?

44
00:02:38.100 --> 00:02:43.867
To user 1 and so
now as Seth rightly said our this.score++

45
00:02:43.867 --> 00:02:50.767
will evaluate to user1.score++
against all the odds because look,

46
00:02:50.767 --> 00:02:55.742
add1 is not called to the right
hand side of a dot, so

47
00:02:55.742 --> 00:03:00.360
how the hell is this
referring to the user1?

48
00:03:00.360 --> 00:03:04.230
Because it was defined
as an arrow function.

49
00:03:04.230 --> 00:03:04.900
All right, there it is.

50
00:03:04.900 --> 00:03:05.970
user1.score++.

51
00:03:05.970 --> 00:03:06.760
No user1 here.

52
00:03:06.760 --> 00:03:07.800
No user one here.

53
00:03:07.800 --> 00:03:09.790
User1 is out here.

54
00:03:09.790 --> 00:03:12.480
We increment it it's score.

55
00:03:12.480 --> 00:03:18.080
Okay folks, this is our new best practice
for how to handle what is the very,

56
00:03:18.080 --> 00:03:22.770
very standard procedure of defining
functions inside a method,

57
00:03:22.770 --> 00:03:25.620
calling them,
needing to refer to the object at hand.

58
00:03:25.620 --> 00:03:29.050
We're not running function inside of
here to not refer to the object, but

59
00:03:29.050 --> 00:03:31.590
now we can easily refer to that object.

60
00:03:31.590 --> 00:03:34.790
Okay, people, yeah let's have thumbs
on this, you lost me, I'm clear,

61
00:03:34.790 --> 00:03:36.580
I have clarifications.

62
00:03:36.580 --> 00:03:38.580
All thumbs up but yeah go ahead sir.

63
00:03:38.580 --> 00:03:41.538
&gt;&gt; Seth: Are we taking a performance
hit by declaring that function every

64
00:03:41.538 --> 00:03:42.807
time increment is called?

65
00:03:48.368 --> 00:03:52.340
&gt;&gt; Will Sentance: I mean sure, but-
&gt;&gt; Seth: Assuming that

66
00:03:52.340 --> 00:03:54.980
incrementing the story is more
difficult than it is here.

67
00:03:54.980 --> 00:03:59.110
&gt;&gt; Will Sentance: Yeah, but
you've got to balance always.

68
00:03:59.110 --> 00:04:02.000
First the performance here is going
to be very minor in this situation.

69
00:04:02.000 --> 00:04:07.440
So firstly we're doing this in a situation
where we would never put one line of code

70
00:04:07.440 --> 00:04:13.930
inside a function, but typically you may
have 100 lines of code in this function,

71
00:04:13.930 --> 00:04:17.590
you wanted to structure them in such
a way that they're easy to read.

72
00:04:17.590 --> 00:04:21.920
Now does that mean that you're
reassigning space and memory?

73
00:04:23.110 --> 00:04:24.540
Yeah.

74
00:04:24.540 --> 00:04:26.370
Does that make it more readable?

75
00:04:26.370 --> 00:04:28.240
Yeah.
So there's always a trade off on

76
00:04:28.240 --> 00:04:28.860
that basis.

77
00:04:28.860 --> 00:04:32.460
So it's perfectly fair to stay yes,
we're saving additional space for

78
00:04:32.460 --> 00:04:34.120
this new function definition.

79
00:04:34.120 --> 00:04:37.320
But if you go a hundred lines
of code in this function,

80
00:04:37.320 --> 00:04:39.110
now I can split into a few sub functions.

81
00:04:39.110 --> 00:04:41.360
Yes.
I'm saving you space in memory but

82
00:04:41.360 --> 00:04:42.697
is far more readable
&gt;&gt; Seth: And

83
00:04:42.697 --> 00:04:44.429
add one is getting trashed every time
&gt;&gt; Will Sentance: And

84
00:04:44.429 --> 00:04:48.000
of course add one is
absolutely being deleted.

85
00:04:48.000 --> 00:04:49.330
Once we leave this execution.

86
00:04:49.330 --> 00:04:51.160
Once we need is that
&gt;&gt; Seth: Unlike the first very first

87
00:04:51.160 --> 00:04:54.850
example where we kept those
functions around on every object.

88
00:04:54.850 --> 00:04:55.590
&gt;&gt; Will Sentance: Yeah, yeah, yeah, yeah.

89
00:04:55.590 --> 00:04:57.050
Totally different than that, absolutely.

90
00:04:57.050 --> 00:04:58.090
Absolutely.

91
00:04:58.090 --> 00:04:58.880
Absolutely.

92
00:04:58.880 --> 00:05:04.420
All right, good, good question from Seth,
that sort of finessing around performance.

93
00:05:04.420 --> 00:05:07.320
We need to introduce arrow functions
which bind this lexically.

94
00:05:07.320 --> 00:05:10.900
Lexical static scoping
means where I was born,

95
00:05:10.900 --> 00:05:15.760
where I'm saved, determines something
about me when I get called.

96
00:05:15.760 --> 00:05:16.900
Well what is the thing?

97
00:05:16.900 --> 00:05:19.050
It's what my this assignment is.

98
00:05:19.050 --> 00:05:21.640
Lexical static determines
where I was saved.

99
00:05:21.640 --> 00:05:25.850
Lexical means the positioning on the page,
so where I was positioned,

100
00:05:25.850 --> 00:05:29.490
where I was saved determines
something about me when I get called.

101
00:05:29.490 --> 00:05:30.340
Okay?

102
00:05:30.340 --> 00:05:33.317
All right, and that of course leads
to the beautiful concept of Closure,

103
00:05:33.317 --> 00:05:36.020
the most beautiful concept in JavaScript,
my favorite concept.

