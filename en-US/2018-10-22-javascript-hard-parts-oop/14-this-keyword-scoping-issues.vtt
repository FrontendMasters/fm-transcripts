WEBVTT

1
00:00:00.050 --> 00:00:01.630
&gt;&gt; Will Sentance: So let's do this again.

2
00:00:01.630 --> 00:00:04.020
We've had Nick and
Chris walk through this.

3
00:00:04.020 --> 00:00:06.650
We're doing it one more time.

4
00:00:06.650 --> 00:00:09.560
Here we go, so no code is changed,

5
00:00:09.560 --> 00:00:11.550
people, except for
the body of the increment function.

6
00:00:11.550 --> 00:00:14.004
Don't get confused,
everything is the same, except for

7
00:00:14.004 --> 00:00:15.565
the body of the increment function.

8
00:00:15.565 --> 00:00:20.088
So let's call,
let's go back to our final line of code,

9
00:00:20.088 --> 00:00:24.440
user1.increment(), user1.increment().

10
00:00:24.440 --> 00:00:26.420
Seth, talk me through the process.

11
00:00:26.420 --> 00:00:29.739
&gt;&gt; Seth: It's going to attempt to look for
increment on user1,

12
00:00:29.739 --> 00:00:31.229
it's not gonna find it.

13
00:00:31.229 --> 00:00:34.377
It's gonna freak out a little bit, but
then it's gonna say, [CROSSTALK], okay,

14
00:00:34.377 --> 00:00:35.485
I found it in the prototype.

15
00:00:35.485 --> 00:00:36.428
&gt;&gt; Will Sentance: Exactly.

16
00:00:36.428 --> 00:00:40.060
So you saw there that, Seth called it,
I found it on the prototype.

17
00:00:40.060 --> 00:00:43.180
People do colloquially say,
look to the prototype.

18
00:00:43.180 --> 00:00:44.850
Do you see why I don't like that?

19
00:00:44.850 --> 00:00:47.730
When it's referenced in the _proto_,

20
00:00:47.730 --> 00:00:51.110
that happens to be linking to an object
that happens to be called prototype.

21
00:00:51.110 --> 00:00:53.900
But we could redesign
the new keyword to say.

22
00:00:53.900 --> 00:00:56.580
Make it leak, call this instead,
I don't know, functionStore.

23
00:00:56.580 --> 00:01:00.490
And have the new keyword be redesigned to
reference user created .functionStore.

24
00:01:00.490 --> 00:01:02.240
Prototype is not a magic word.

25
00:01:02.240 --> 00:01:05.650
Proto is a more powerful word in my view,
and

26
00:01:05.650 --> 00:01:09.570
that's JavaScript automatically
looks at Proto when it doesn't find.

27
00:01:09.570 --> 00:01:10.640
And then it goes to this object,

28
00:01:10.640 --> 00:01:13.640
which happens to have the name Prototype,
because that's where the bond was made.

29
00:01:13.640 --> 00:01:17.710
But we're gonna write that, in fact,
we can literally overwrite that.

30
00:01:17.710 --> 00:01:22.710
We can manually later go user
creator.funtionStore equals

31
00:01:22.710 --> 00:01:24.590
this object full of functions.

32
00:01:24.590 --> 00:01:29.830
And then we could put in here user1.__ or
we can use separate type of.

33
00:01:29.830 --> 00:01:30.840
We'll see that later.

34
00:01:30.840 --> 00:01:33.750
And put a different object or
function here.

35
00:01:33.750 --> 00:01:35.610
There is nothing profound about prototype.

36
00:01:35.610 --> 00:01:39.270
It just happens to be
the autodesignated place

37
00:01:39.270 --> 00:01:41.970
with the new keyword the link is made to.

38
00:01:41.970 --> 00:01:44.190
Okay, a little aside there.

39
00:01:44.190 --> 00:01:44.884
But there we go.

40
00:01:44.884 --> 00:01:49.666
We find increment and we create
an execution context in which to run it.

41
00:01:49.666 --> 00:01:50.740
Gonna try to make this
a little bit bigger.

42
00:01:51.840 --> 00:01:54.170
Okay, there it is.

43
00:01:54.170 --> 00:01:56.600
And in it's local memory, Seth,

44
00:01:56.600 --> 00:01:59.080
what is the first assignment
that automatically happens?

45
00:01:59.080 --> 00:02:02.540
There's no argument parameters, but there
is a implicit parameter, as they're known.

46
00:02:02.540 --> 00:02:03.750
&gt;&gt; Seth: This becomes user1.

47
00:02:03.750 --> 00:02:07.520
&gt;&gt; Will Sentance: This becomes user1,
fantastic, next?

48
00:02:07.520 --> 00:02:09.540
&gt;&gt; Seth: There's a new
function called add one.

49
00:02:09.540 --> 00:02:15.650
&gt;&gt; Will Sentance: Fantastic yeah add one,
store it, and then we immediately call it.

50
00:02:15.650 --> 00:02:17.940
So give me a second, so add one.

51
00:02:17.940 --> 00:02:19.170
It creates a new.

52
00:02:19.170 --> 00:02:19.820
&gt;&gt; Seth: Execution context.

53
00:02:19.820 --> 00:02:22.400
&gt;&gt; Will Sentance: Fantastic Seth,
into it we go.

54
00:02:22.400 --> 00:02:23.700
&gt;&gt; Seth: This gets assigned to.

55
00:02:23.700 --> 00:02:27.620
&gt;&gt; Will Sentance: Okay excellent so
what does this get assigned to here?

56
00:02:28.800 --> 00:02:29.910
Michael?

57
00:02:29.910 --> 00:02:32.880
&gt;&gt; Michael: I mean the function is at
one so it's an anonymous function.

58
00:02:32.880 --> 00:02:34.490
&gt;&gt; Seth: It gets assigned
an increment window.

59
00:02:35.790 --> 00:02:38.010
&gt;&gt; Will Sentance: So
lots of nice suggestions.

60
00:02:38.010 --> 00:02:38.980
Susie?

61
00:02:40.390 --> 00:02:42.406
Yeah absolutely, who knows?

62
00:02:42.406 --> 00:02:46.147
Cuz I told you one simple rule, that this
is assigned to the object to the left hand

63
00:02:46.147 --> 00:02:49.667
side of the dot, I don't see any object
to the left hand side of the dot here,

64
00:02:49.667 --> 00:02:50.956
so what does it default to?

65
00:02:50.956 --> 00:02:51.834
&gt;&gt; David: Window.

66
00:02:51.834 --> 00:02:52.988
&gt;&gt; Will Sentance: Window as David says,

67
00:02:52.988 --> 00:02:56.570
all the way to this random
ass window object thing.

68
00:02:56.570 --> 00:03:01.545
So there it is, this is assigned
to Window, whatever that is.

69
00:03:01.545 --> 00:03:05.800
[INAUDIBLE] this is an object with
all the features of JavaScript in.

70
00:03:05.800 --> 00:03:12.120
So, let's see what I have, this.score++

71
00:03:12.120 --> 00:03:17.880
is actually gonna say window.score++,
we're gonna end up on our

72
00:03:17.880 --> 00:03:23.320
funny old window object thing, a property
called score with property not a number.

73
00:03:23.320 --> 00:03:25.100
Because this should be undefined right?

74
00:03:25.100 --> 00:03:27.170
And then you try to add one to it,
you get N A N.

75
00:03:29.700 --> 00:03:35.210
This is hopeless and yet for an object
already to programming having sub-methods.

76
00:03:35.210 --> 00:03:36.800
I don't know what you call them,

77
00:03:36.800 --> 00:03:41.600
sorry sub-functions with in a method
Is absolutely appropriate because

78
00:03:41.600 --> 00:03:45.310
this increment method has only got one
line, but often you've got 50, 100 lines.

79
00:03:45.310 --> 00:03:48.140
You want to organize
that into some functions.

80
00:03:48.140 --> 00:03:51.300
But if you do, and refer to the this,

81
00:03:51.300 --> 00:03:56.250
unlike any sane language,
I love JavaScript, but

82
00:03:56.250 --> 00:03:59.620
this, in traditional languages
would look at this and frown.

83
00:03:59.620 --> 00:04:03.610
The this does not point to the object

84
00:04:03.610 --> 00:04:08.360
which is obviously the pertinent object,
but it's by design.

85
00:04:08.360 --> 00:04:12.590
In JavaScript, the this is only assigned
to the object to the left of the dot.

86
00:04:12.590 --> 00:04:13.820
There ain't no left of the dot here.

87
00:04:15.890 --> 00:04:19.890
So there were old ways of solving this,
which some of you may be familiar with.

88
00:04:19.890 --> 00:04:25.287
People used to say okay,
well, here, that equals this.

89
00:04:25.287 --> 00:04:29.421
And then,
that would point to the user 1 object and

90
00:04:29.421 --> 00:04:35.427
then here we'd refer,
not to this .score++, but that .score++.

91
00:04:35.427 --> 00:04:37.880
Does anybody think that's
a good design decision?

92
00:04:37.880 --> 00:04:39.290
Apparently, it's quite efficient.

93
00:04:39.290 --> 00:04:41.560
Apparently, it's actually quite
efficient of a performance.

94
00:04:41.560 --> 00:04:42.390
I don't know why.

95
00:04:42.390 --> 00:04:47.180
But alternative would be to use bind,
core, apply.

96
00:04:47.180 --> 00:04:48.350
We'll see those in a moment.

97
00:04:48.350 --> 00:04:52.350
But I think now the standard
approach is to use.

98
00:04:52.350 --> 00:04:53.160
Well, who knows, Seth?

99
00:04:54.660 --> 00:04:56.720
&gt;&gt; Seth: Add on the prototype,
wouldn't you?

100
00:04:56.720 --> 00:04:58.960
&gt;&gt; Will Sentance: Anyone know what the,
Steve?

101
00:04:58.960 --> 00:04:59.470
&gt;&gt; Steve: I can't remember.

102
00:04:59.470 --> 00:05:01.390
&gt;&gt; Will Sentance: There's a new
way of declaring functions

103
00:05:01.390 --> 00:05:05.140
that when they're called,
they're this inside of them.

104
00:05:05.140 --> 00:05:06.400
&gt;&gt; Seth: Arrow function.

105
00:05:06.400 --> 00:05:07.620
&gt;&gt; Will Sentance: Arrow functions,
exactly.

106
00:05:07.620 --> 00:05:11.680
The reason they rebranded from fat arrow
functions just to arrow functions,

107
00:05:11.680 --> 00:05:15.500
because there was no need for them to be
called fat arrow functions apparently.

108
00:05:15.500 --> 00:05:19.220
So, before we see those I wanna make
really clear cause you never see me

109
00:05:19.220 --> 00:05:22.730
declare functions this way, I wanna make,
what are not sort of arrow functions but

110
00:05:22.730 --> 00:05:26.730
you'll never see me declare functions this
way, but I wanna make really clear that

111
00:05:26.730 --> 00:05:30.950
this line here, the blurred out
line add one is a function.

112
00:05:30.950 --> 00:05:34.930
I wanna make clear, that is an identical,
for our purposes it's a hoisting thing,

113
00:05:34.930 --> 00:05:35.890
but ignore that for now.

114
00:05:35.890 --> 00:05:38.790
It is an identical function
declaration to the one above.

115
00:05:38.790 --> 00:05:41.680
See function Add1,
store the function Add1.

116
00:05:41.680 --> 00:05:44.878
That next line there
says Add1 is a label for

117
00:05:44.878 --> 00:05:48.521
the function that has
the code this.score++.

118
00:05:48.521 --> 00:05:51.970
I just wanna make sure everyone
gets that is identical function.

119
00:05:51.970 --> 00:05:55.000
The one is called function expression and

120
00:05:55.000 --> 00:05:59.110
the one I always use is called function
declaration, but they're identical.

121
00:05:59.110 --> 00:05:59.890
Just because in a moment,

122
00:05:59.890 --> 00:06:02.950
you gonna see an arrow function,
which looks a lot like the second one, but

123
00:06:02.950 --> 00:06:05.980
I don't want you to think it's some
sort of special different function.

124
00:06:05.980 --> 00:06:10.630
So let's switch this up,
rather than declaring a function Add1,

125
00:06:10.630 --> 00:06:13.810
using the traditional
function declaration or

126
00:06:13.810 --> 00:06:18.480
expression, neither of which give us
the right this assignment inside, and

127
00:06:18.480 --> 00:06:22.670
leaves us doing silly stuff like
that equals this, which was really,

128
00:06:22.670 --> 00:06:26.580
really standard people, it was
absolutely standard and very strange.

129
00:06:26.580 --> 00:06:31.460
Instead we get a new way of declaring

130
00:06:31.460 --> 00:06:33.840
the add one function such
that when it's called,

131
00:06:33.840 --> 00:06:39.860
it's this assignment is automatically
what's called static or scoped.

132
00:06:39.860 --> 00:06:45.620
That means it's going to automatically
refer to the this from where it was born.

133
00:06:45.620 --> 00:06:49.270
If any of you have seen closure hard parts
you know how important where I save my

134
00:06:49.270 --> 00:06:51.420
function is in JavaScript.

135
00:06:51.420 --> 00:06:53.770
Well with these arrow function
it's super important.

136
00:06:53.770 --> 00:06:58.420
Where I call it, the this will be
the same as where the function was saved,

137
00:06:58.420 --> 00:07:02.220
where it was fined, and
that's gonna solve our whole problem.

138
00:07:02.220 --> 00:07:03.750
So let's just walk through it.

139
00:07:03.750 --> 00:07:05.270
And then we're gonna get solution four,
but

140
00:07:05.270 --> 00:07:09.800
as a nice little interlude I want to give
us to save us from the biggest gotcha

141
00:07:09.800 --> 00:07:13.830
in OOP, that was the biggest gotcha,
calling functions inside a method, and

142
00:07:13.830 --> 00:07:17.875
it referring to nothing that we wanted,
the this being miss assigned.

