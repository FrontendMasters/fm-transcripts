WEBVTT

1
00:00:00.360 --> 00:00:04.810
&gt;&gt; Will Sentance: Here we go, so
super refers to lets go run userCreator

2
00:00:04.810 --> 00:00:09.440
just like we did before, go run use
a creator, make the object, but before we

3
00:00:09.440 --> 00:00:13.540
use that previous work and applied it to
the local object in paid userCreator.

4
00:00:13.540 --> 00:00:17.460
Now we're gonna make the object
inside of userCreator,

5
00:00:17.460 --> 00:00:22.370
not inside of paid userCreator, and we're
gonna return it out into paid userCreator.

6
00:00:22.370 --> 00:00:24.210
Let's do it, and then we're done, people.

7
00:00:24.210 --> 00:00:27.309
So, calling super really
calls userCreator,

8
00:00:27.309 --> 00:00:32.180
constructor function,
let's have Nick, save me Nick.

9
00:00:32.180 --> 00:00:36.290
When calling super, it's really
userCreator with a new keyword in front of

10
00:00:36.290 --> 00:00:40.730
it, its output is gonna be stored
in our this, in paid userCreator,

11
00:00:40.730 --> 00:00:45.130
talk me through the execution context
of userCreator with a new keyword.

12
00:00:45.130 --> 00:00:46.590
Help me out, Nick.

13
00:00:46.590 --> 00:00:49.389
&gt;&gt; Nick: So the new keyword-
&gt;&gt; Will Sentance: Let's just do

14
00:00:49.389 --> 00:00:50.123
our arguments first.

15
00:00:50.123 --> 00:00:50.650
&gt;&gt; Nick: Argument, okay.

16
00:00:52.520 --> 00:00:53.850
&gt;&gt; Will Sentance: So our arguments are?

17
00:00:53.850 --> 00:00:55.810
&gt;&gt; Nick: Our arguments are name and score.

18
00:00:55.810 --> 00:00:58.106
&gt;&gt; Will Sentance: Those are our
parameters with the arguments.

19
00:00:58.106 --> 00:01:01.580
&gt;&gt; Nick: With the arguments, Alyssa at 8.

20
00:01:01.580 --> 00:01:06.310
&gt;&gt; Will Sentance: Alyssa is our argument,
assigned to a parameter name and score,

21
00:01:06.310 --> 00:01:07.593
and then scores 8.

22
00:01:07.593 --> 00:01:12.602
It's the being called with a new
keyword because super is really

23
00:01:12.602 --> 00:01:17.260
calling userCreator the construct a bit
with a new keyword to make the object, but

24
00:01:17.260 --> 00:01:20.790
note we making inside of here
this time not out here, okay?

25
00:01:20.790 --> 00:01:22.870
So let's do the new keyword stuff.

26
00:01:22.870 --> 00:01:23.680
Go ahead.

27
00:01:23.680 --> 00:01:26.806
&gt;&gt; Nick: So new creates this,
an empty this object.

28
00:01:26.806 --> 00:01:29.120
&gt;&gt; Will Sentance: Beautiful.

29
00:01:29.120 --> 00:01:33.870
&gt;&gt; Nick: Which gets set with a proto-
&gt;&gt; Will Sentance: To where?

30
00:01:36.650 --> 00:01:39.739
Normally, it would be to
userCreator.protoype,

31
00:01:39.739 --> 00:01:41.783
this object here, wouldn't it?

32
00:01:41.783 --> 00:01:43.620
&gt;&gt; Nick: Yes.
&gt;&gt; Will Sentance: But

33
00:01:43.620 --> 00:01:50.000
by the nature of the cost design,
the super sets this object's proto,

34
00:01:50.000 --> 00:01:54.934
not to the function
userCreator.prototypes object.

35
00:01:56.070 --> 00:01:57.960
Instead, it overrides it.

36
00:01:57.960 --> 00:01:59.630
And David, where does it set it to?

37
00:01:59.630 --> 00:02:00.370
&gt;&gt; Nick: Page userCreator.

38
00:02:00.370 --> 00:02:02.530
&gt;&gt; Will Sentance: Page
userCreator.prototype, fantastic.

39
00:02:02.530 --> 00:02:05.090
And that's what I was
regretting bringing up, but

40
00:02:05.090 --> 00:02:06.870
sort of showing you under
the hood what's happening.

41
00:02:06.870 --> 00:02:09.750
It says run userCreator
with a new keyword.

42
00:02:09.750 --> 00:02:10.910
Parse in these arguments and

43
00:02:10.910 --> 00:02:15.190
set the returned objects proto
to pageuserCreator.prototype.

44
00:02:15.190 --> 00:02:19.060
That's all this, this is a new way of
doing something in JavaScript in ES6 that

45
00:02:19.060 --> 00:02:22.970
allows you to manually control
more of what the new keyword does.

46
00:02:22.970 --> 00:02:27.350
That's all it was, but we can see without
bringing that up but forgive me for

47
00:02:27.350 --> 00:02:28.300
bringing that up.

48
00:02:28.300 --> 00:02:31.020
It's interesting thing to see there's
a new way of doing this stuff.

49
00:02:31.020 --> 00:02:34.710
But yeah, we now set our proto,
remind me again, Nick, to what?

50
00:02:34.710 --> 00:02:35.910
&gt;&gt; Nick: Paid userCreator.

51
00:02:35.910 --> 00:02:36.760
&gt;&gt; Will Sentance: Dot prototype.

52
00:02:36.760 --> 00:02:38.030
That object, yeah, exactly.

53
00:02:38.030 --> 00:02:39.420
Let's just draw the line through.

54
00:02:40.810 --> 00:02:42.210
It's a long way.

55
00:02:42.210 --> 00:02:44.593
Can I get my line?

56
00:02:44.593 --> 00:02:46.694
Almost, there it is, and

57
00:02:46.694 --> 00:02:51.670
that object is gonna have what
properties added to it, Nick?

58
00:02:51.670 --> 00:02:55.560
&gt;&gt; Nick: Name and
score set to the values of Alyssa, and 8.

59
00:02:55.560 --> 00:02:59.710
&gt;&gt; Will Sentance: Beautiful, name and
score, this is our final, final code.

60
00:02:59.710 --> 00:03:05.860
It's great but it's stuck inside of,
so 1 with this is the object,

61
00:03:05.860 --> 00:03:11.330
2 was proto was set, but
proto was set in a really interesting way.

62
00:03:13.050 --> 00:03:15.960
I don't know, all right,
and 3 is to do what, Nick?

63
00:03:15.960 --> 00:03:19.380
&gt;&gt; Nick: It's returned to
the constructor of paid userCreation.

64
00:03:19.380 --> 00:03:21.208
&gt;&gt; Will Sentance: Fantastic, so

65
00:03:21.208 --> 00:03:27.130
its execution context in what local-
&gt;&gt; Nick: In one this object.

66
00:03:27.130 --> 00:03:27.850
&gt;&gt; Will Sentance: In this, exactly.

67
00:03:27.850 --> 00:03:31.260
It goes and sticks in the this fantastic.

68
00:03:31.260 --> 00:03:34.300
But folk, it was even a revelation to me.

69
00:03:34.300 --> 00:03:37.880
I say even, but
probably especially a revelation to me.

70
00:03:37.880 --> 00:03:39.770
That is awful, I apologize.

71
00:03:39.770 --> 00:03:44.855
It was a revelation to me that
the construction of the object itself, is

72
00:03:44.855 --> 00:03:51.077
happening in the userCreator constructor,
and then getting returned out one level.

73
00:03:51.077 --> 00:03:56.209
Okay, where returned with name,

74
00:03:56.209 --> 00:04:01.624
Alyssa, score 8, and then proto is a bond,

75
00:04:01.624 --> 00:04:08.062
quite conveniently,
I'll just join it on there.

76
00:04:08.062 --> 00:04:09.460
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: [LAUGH] Okay,

77
00:04:09.460 --> 00:04:14.455
let's just get rid of it from here,
let's just say here it was up to here,

78
00:04:14.455 --> 00:04:18.240
there it is, and
now we can see where it actually links.

79
00:04:18.240 --> 00:04:21.259
No, this is getting horrible,
I regret this.

80
00:04:22.630 --> 00:04:23.848
Just gonna get my purple line.

81
00:04:26.043 --> 00:04:30.677
&gt;&gt; Will Sentance: There we go,
nice and tidy now.

82
00:04:30.677 --> 00:04:35.780
There we go, and
now what do we add to this object, Nick?

83
00:04:35.780 --> 00:04:39.352
&gt;&gt; Nick: Now, we add increase balance?

84
00:04:39.352 --> 00:04:42.382
&gt;&gt; Will Sentance: That was in
our prototype easy slip to make.

85
00:04:42.382 --> 00:04:43.840
&gt;&gt; Nick: Account balance.

86
00:04:43.840 --> 00:04:46.230
&gt;&gt; Will Sentance: Account balance
with what property value?

87
00:04:46.230 --> 00:04:47.030
&gt;&gt; Nick: 25.

88
00:04:47.030 --> 00:04:48.620
&gt;&gt; Will Sentance: 25, good.

89
00:04:51.160 --> 00:04:53.810
And to our last online
member who's still with us,

90
00:04:55.750 --> 00:04:57.550
cuz they can leave the room anytime.

91
00:04:57.550 --> 00:04:59.770
That is the blessing of
being the online audience.

92
00:04:59.770 --> 00:05:04.722
Anytime they can leave the room going,
it was good, next time.

93
00:05:04.722 --> 00:05:07.561
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: We grab this object,

94
00:05:07.561 --> 00:05:12.050
we're calling page userCreator
with a new keyword, so

95
00:05:12.050 --> 00:05:15.500
Nick, we've got our lovely object here.

96
00:05:15.500 --> 00:05:18.480
In the this,
what do we do to it automatically?

97
00:05:18.480 --> 00:05:20.530
&gt;&gt; Nick: We return it to paid user1.

98
00:05:20.530 --> 00:05:21.800
&gt;&gt; Will Sentance: To paid user1.

99
00:05:21.800 --> 00:05:23.900
Nick, I'm so impressed.

100
00:05:23.900 --> 00:05:27.007
Out it comes, there it is,

101
00:05:27.007 --> 00:05:31.980
into paid user1 where,
&gt;&gt; Will Sentance: We find,

102
00:05:31.980 --> 00:05:35.970
let me just get my handwriting
really neat for this final piece.

103
00:05:37.050 --> 00:05:41.967
Where we find name, Seth,
stop packing your stuff up.

104
00:05:41.967 --> 00:05:46.000
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: Shh,

105
00:05:46.000 --> 00:05:48.205
I can literally hear the zip of your bag,
Seth.

106
00:05:48.205 --> 00:05:50.110
&gt;&gt; Audience: [LAUGH]
&gt;&gt; Will Sentance: Okay?

107
00:05:51.770 --> 00:05:56.314
And the proto is conveniently
set to exactly what we want.

108
00:05:56.314 --> 00:05:57.730
So here we go.

109
00:05:57.730 --> 00:06:01.110
Our final lookups.

110
00:06:01.110 --> 00:06:04.981
Our final lookups.

111
00:06:04.981 --> 00:06:10.898
I'm actually out of breath from so
much excitement, excitement.

112
00:06:10.898 --> 00:06:14.406
All right, I really don't know why
I brought up this version, but

113
00:06:14.406 --> 00:06:18.292
it should show you what the new keyword
is really doing in this situation,

114
00:06:18.292 --> 00:06:20.064
it's slightly different here.

115
00:06:20.064 --> 00:06:21.840
It's making the bond to
a different portion, and

116
00:06:21.840 --> 00:06:23.880
that's actually what's
happening behind the scenes.

117
00:06:23.880 --> 00:06:24.679
Although it's very cool when I saw that.

118
00:06:24.679 --> 00:06:29.943
Okay, so let's do our final lookups,
remembering all we want is a paid

119
00:06:29.943 --> 00:06:34.947
user1 who has access to the paid
user specific functionality, but

120
00:06:34.947 --> 00:06:40.302
also to the user functionality, and
that paid user1 has the properties

121
00:06:40.302 --> 00:06:46.093
of a regular user, and we didn't have
to go and redo the property assignment,

122
00:06:46.093 --> 00:06:51.230
we just used the constructor that
made the regular user earlier.

123
00:06:51.230 --> 00:06:55.610
And finally with the class model in the
new ES6 version, you do the creation of

124
00:06:55.610 --> 00:06:59.140
that object in userCreator, and
then return it out to paid userCreator.

125
00:06:59.140 --> 00:07:02.570
Which seems reasonable, but
it is different to how we used to do it

126
00:07:02.570 --> 00:07:08.860
canonically in pre-ES6, pre-2015,
where we built it out here and

127
00:07:08.860 --> 00:07:13.444
then had side effects to change it,
using the previous constructor function.

128
00:07:13.444 --> 00:07:15.170
Paid user1,
you want that increased balance,

129
00:07:15.170 --> 00:07:18.880
let's call it, Elliot,
it is your moment man.

130
00:07:18.880 --> 00:07:20.170
&gt;&gt; Elliot: We look for a paid user1.

131
00:07:20.170 --> 00:07:27.790
&gt;&gt; Will Sentance: Hold on, hold on,
hold on, paid user1.increase balance,

132
00:07:27.790 --> 00:07:31.620
this is remember,
the paid user specific functionality.

133
00:07:31.620 --> 00:07:33.710
Let's go on that lookup, Elliot.

134
00:07:33.710 --> 00:07:37.030
&gt;&gt; Elliot: We look for
the increase balance method.

135
00:07:37.030 --> 00:07:37.600
&gt;&gt; Will Sentance: Yep.

136
00:07:37.600 --> 00:07:39.368
&gt;&gt; Elliot: It's not there, so-
&gt;&gt; Will Sentance: We wouldn't want it to

137
00:07:39.368 --> 00:07:39.914
be there would we,

138
00:07:39.914 --> 00:07:42.560
cuz that would mean it'd copy you on every
single object which would be ridiculous.

139
00:07:42.560 --> 00:07:43.300
So where do we look?

140
00:07:43.300 --> 00:07:47.940
&gt;&gt; Elliot: We follow the proto to paid
userCreator, prototype object and

141
00:07:47.940 --> 00:07:48.870
we find it there.

142
00:07:48.870 --> 00:07:52.360
&gt;&gt; Will Sentance: Beautiful, let's see
if he can do it for the other one.

143
00:07:52.360 --> 00:07:55.800
So that's the pages what and
by the way user1 if we went looking for

144
00:07:55.800 --> 00:07:56.990
increased balance.

145
00:07:56.990 --> 00:08:02.066
We wouldn't find it on user1, but nor
do we find on userCreated.prototype.

146
00:08:02.066 --> 00:08:03.640
So that's great, we don't want it.

147
00:08:03.640 --> 00:08:08.960
The regular user didn't pay, so we don't
want to have an increased balance.

148
00:08:08.960 --> 00:08:13.915
So, now let's check if our
paid user1 though still

149
00:08:13.915 --> 00:08:18.660
gets access to our user
specific functionality.

150
00:08:18.660 --> 00:08:21.310
Elliot, help me again on
that look up journey.

151
00:08:21.310 --> 00:08:23.570
&gt;&gt; Elliot: We look in the global memory,
again, paid user1.

152
00:08:23.570 --> 00:08:24.200
&gt;&gt; Will Sentance: Perfect there it is.

153
00:08:24.200 --> 00:08:26.640
&gt;&gt; Elliot: Look for
the method increase say name.

154
00:08:26.640 --> 00:08:27.280
&gt;&gt; Will Sentance: Say name.

155
00:08:27.280 --> 00:08:28.310
&gt;&gt; Elliot: It's not there so

156
00:08:28.310 --> 00:08:30.270
we follow the proto to-
&gt;&gt; Will Sentance: Hold up.

157
00:08:30.270 --> 00:08:34.586
Yep, so it's there, it's not there so
we follow the proto reference up.

158
00:08:34.586 --> 00:08:38.580
&gt;&gt; Elliot: To paid userCreator
prototype object and it's not there so

159
00:08:38.580 --> 00:08:39.660
we follow that.

160
00:08:39.660 --> 00:08:40.770
&gt;&gt; Will Sentance: Do we panic?

161
00:08:40.770 --> 00:08:41.320
&gt;&gt; Elliot: No.

162
00:08:41.320 --> 00:08:41.990
&gt;&gt; Will Sentance: A little bit.

163
00:08:41.990 --> 00:08:43.290
&gt;&gt; Elliot: A little bit.

164
00:08:43.290 --> 00:08:44.530
&gt;&gt; Will Sentance: But then no more and

165
00:08:44.530 --> 00:08:48.939
we follow it up to-
&gt;&gt; Elliot: The proto up to the userCreator

166
00:08:48.939 --> 00:08:50.583
prototype objects.

167
00:08:50.583 --> 00:08:52.463
&gt;&gt; Will Sentance: And
what do we find there?

168
00:08:52.463 --> 00:08:53.600
&gt;&gt; Elliot: We find the say name.

169
00:08:53.600 --> 00:08:55.310
&gt;&gt; Will Sentance: And
we can execute its code.

170
00:08:55.310 --> 00:08:57.305
Let's give Elliot a huge hand,
well done man.

171
00:08:57.305 --> 00:09:01.670
&gt;&gt; Audience: [APPLAUSE]
&gt;&gt; Will Sentance: That's it folk,

172
00:09:01.670 --> 00:09:02.920
that is it.

173
00:09:02.920 --> 00:09:10.180
We have implemented, from scratch, under
the hood, solution 2 of sub-classing.

174
00:09:10.180 --> 00:09:12.780
And you can see, is brutal.

175
00:09:12.780 --> 00:09:16.020
But we have the full
model of how it works.

176
00:09:16.020 --> 00:09:20.040
And we control every single
piece of it by hand.

177
00:09:20.040 --> 00:09:22.720
Which I like this.

178
00:09:22.720 --> 00:09:24.440
I know exactly what I'm doing here.

179
00:09:24.440 --> 00:09:28.350
I know what my functions are, I'm manually
setting bonds to them, no problem.

180
00:09:29.370 --> 00:09:31.070
Then we said new keyword.

181
00:09:31.070 --> 00:09:33.800
Do some of that connecting
up automatically.

182
00:09:33.800 --> 00:09:37.020
And you know what, we ended up doing
some sort of weird connecting up,

183
00:09:37.020 --> 00:09:41.580
meaning we had to kind of use that
function over there, userCreator.

184
00:09:41.580 --> 00:09:45.440
And we wanted to use it but
we had to kind of play with it

185
00:09:45.440 --> 00:09:49.570
by setting the this to be the this
one there out in paid userCreator,

186
00:09:49.570 --> 00:09:53.300
so that it referred to the right object
that we were making for a paid user.

187
00:09:53.300 --> 00:09:55.010
That was a little bit of a mess,
sorry David, go ahead.

188
00:09:55.010 --> 00:09:55.760
&gt;&gt; David: And then update proto.

189
00:09:55.760 --> 00:09:56.950
&gt;&gt; Will Sentance: And then update proto.

190
00:09:56.950 --> 00:10:02.410
That was a little bit mess,
well, we update proto,

191
00:10:02.410 --> 00:10:06.860
exactly, update proto on the paid
userCreator's set of functions so

192
00:10:06.860 --> 00:10:10.130
that they had a link to the userCreator's
set of functions, the user functions.

193
00:10:11.230 --> 00:10:16.471
It's a little bit, I mean this was
the emerging standard until ES 2015.

194
00:10:16.471 --> 00:10:21.209
And I can tell you it's a little
bit [SOUND], I don't know.

195
00:10:21.209 --> 00:10:24.191
It's a little bit, almost hackey,
not literally, but

196
00:10:24.191 --> 00:10:27.060
just it kinda gives you some stuff and
then takes away.

197
00:10:27.060 --> 00:10:30.662
It gives you some stuff and too much,
and you have to kinda do adjustments.

