WEBVTT

1
00:00:00.000 --> 00:00:04.646
&gt;&gt; Will Sentance: We were talking about
our solution before that was just

2
00:00:04.646 --> 00:00:06.060
a prettifying,

3
00:00:06.060 --> 00:00:11.922
a cleaning up of the sticking out
function that creates our objects.

4
00:00:11.922 --> 00:00:17.042
And those objects need to combine
all the data of user 1 or user 20,

5
00:00:17.042 --> 00:00:23.241
that is name Eva score 9, with all of
the functionality that's gonna be applied.

6
00:00:23.241 --> 00:00:27.148
So that user object, so we're not off on
a hunt every time, as we're writing our

7
00:00:27.148 --> 00:00:30.954
code, to say okay, we want to have
the user's score increase at this moment.

8
00:00:30.954 --> 00:00:32.617
Where's the increase score functionality?

9
00:00:32.617 --> 00:00:33.472
I can't even use it.

10
00:00:33.472 --> 00:00:34.855
No, no, don't worry.

11
00:00:34.855 --> 00:00:37.255
There it is on the right-hand side.

12
00:00:37.255 --> 00:00:39.974
It's not on the object, though,
cuz that'd be a disaster,

13
00:00:39.974 --> 00:00:41.402
copies on every single object.

14
00:00:41.402 --> 00:00:45.144
You've got 1,000 users, 1,000 copies
of the increment function complete.

15
00:00:48.171 --> 00:00:51.458
&gt;&gt; Will Sentance: Memorarily inefficient,
no, complete and

16
00:00:51.458 --> 00:00:53.713
efficient in terms of memory.

17
00:00:53.713 --> 00:00:58.285
And so we put them all in one place, all
those shared functions in one place, and

18
00:00:58.285 --> 00:01:02.380
then use this proto bond,
JavaScript's prototypal nature, to go and

19
00:01:02.380 --> 00:01:05.316
know that at the moment of
the interpreter looks for

20
00:01:05.316 --> 00:01:08.344
a function and doesn't find it,
doesn't give up.

21
00:01:08.344 --> 00:01:09.181
Goes and looks up there.

22
00:01:09.181 --> 00:01:11.713
Now, we then made some refinements.

23
00:01:11.713 --> 00:01:16.590
That is, we said, let's not do the whole
process of creating that object manually.

24
00:01:16.590 --> 00:01:20.909
Let's use a new keyword that's gonna do
all that inside automatically for us.

25
00:01:20.909 --> 00:01:23.626
Well, that also restricts a little bit
where we're gonna put the functions.

26
00:01:23.626 --> 00:01:24.637
So we put them in there now.

27
00:01:24.637 --> 00:01:27.171
In that function that creates
the object dot prototype,

28
00:01:27.171 --> 00:01:29.400
which is an object where
we put all the functions.

29
00:01:29.400 --> 00:01:33.684
Then we said, man, rather than putting
them in there manually, which to me does

30
00:01:33.684 --> 00:01:37.409
not feel that much work and
actually feels kind of explicit and clear.

31
00:01:37.409 --> 00:01:42.511
Well, other languages kind of give us,
other languages let

32
00:01:42.511 --> 00:01:47.612
us combine methods with the function
that creates the object

33
00:01:47.612 --> 00:01:53.531
that has access to those methods all
in one construct known as a class.

34
00:01:53.531 --> 00:01:57.288
But they are not implementing
under the hood the same way.

35
00:01:57.288 --> 00:02:02.328
So, it's debatable whether it's
a positive step to wrap all this up,

36
00:02:02.328 --> 00:02:06.864
because while Java Script
fundamentally is not a traditionally

37
00:02:06.864 --> 00:02:12.661
object-oriented language, it is
a prototypal language, cuz it's faking it.

38
00:02:12.661 --> 00:02:13.932
Under the hood it's doing this stuff.

39
00:02:13.932 --> 00:02:17.902
And I promise you if any of you use
Java or C++, any of these languages,

40
00:02:17.902 --> 00:02:21.616
their implementation of classes
in object-oriented design is not

41
00:02:21.616 --> 00:02:22.804
this under the hood.

42
00:02:22.804 --> 00:02:24.292
It's something quite different.

43
00:02:24.292 --> 00:02:25.595
Who knows what, I don't know.

44
00:02:25.595 --> 00:02:29.306
But I know it's different,
so it is maybe debatable.

45
00:02:29.306 --> 00:02:32.739
That's why we're building up
a true understanding of how,

46
00:02:32.739 --> 00:02:34.972
otherwise we just go straight to this.

47
00:02:34.972 --> 00:02:37.471
If you were in another language
you'd go straight to solution four,

48
00:02:37.471 --> 00:02:39.246
because there is nothing
under the hood on that.

49
00:02:39.246 --> 00:02:40.677
It is what it is.

50
00:02:40.677 --> 00:02:45.735
But here, solution four is a mask for
a bunch of under

51
00:02:45.735 --> 00:02:51.303
the hood that we need to understand
to properly use solution four.

52
00:02:51.303 --> 00:02:53.675
Okay, here we go.

53
00:02:53.675 --> 00:02:56.171
So solution for, mode is the new standard,

54
00:02:56.171 --> 00:02:59.755
feels more like the style of
other languages like Python Java.

55
00:02:59.755 --> 00:03:02.726
But nobody knows how it's
working under the hood.

56
00:03:02.726 --> 00:03:05.666
If solution three folk didn't know, but

57
00:03:05.666 --> 00:03:09.708
at least they saw the prototype word,
now nobody knows.

58
00:03:09.708 --> 00:03:11.132
But we do.

59
00:03:11.132 --> 00:03:14.000
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will Sentance: All right, so

60
00:03:14.000 --> 00:03:18.021
you will not be one of those folk,
you will be the special ones who know.

61
00:03:18.021 --> 00:03:23.557
Now that proto reference,
that little proto properties are,

62
00:03:23.557 --> 00:03:26.278
that refers to other objects.

63
00:03:26.278 --> 00:03:30.968
JavaScript decides, that allows us
to give an object like user1 or

64
00:03:30.968 --> 00:03:35.679
user20, bonus functionality
that's not on the object itself.

65
00:03:35.679 --> 00:03:40.483
Whereas that increment function is
not on the object itself, it's bonus.

66
00:03:40.483 --> 00:03:45.056
Well actually, in JavaScript,
all objects, and by the way,

67
00:03:45.056 --> 00:03:49.908
functions remember are also objects,
so objects are functions.

68
00:03:49.908 --> 00:03:55.894
And by the way arrays are definitely
just objects with property zero,

69
00:03:55.894 --> 00:03:57.627
one, two, three.

70
00:03:57.627 --> 00:04:00.139
Those are the keys that allow us to go and

71
00:04:00.139 --> 00:04:03.422
access things in arrays as
though they are arrays.

72
00:04:03.422 --> 00:04:06.107
They're not actually under the hood sort
of lists in the conventional sense of

73
00:04:06.107 --> 00:04:06.645
the language.

74
00:04:06.645 --> 00:04:08.475
They're just objects.

75
00:04:08.475 --> 00:04:13.439
They all actually get a bunch of
bonus functionality by default.

76
00:04:13.439 --> 00:04:19.036
That is to say they all, all objects
have a hidden underscore product

77
00:04:19.036 --> 00:04:24.168
underscore property,
that links off to a store of functions.

78
00:04:24.168 --> 00:04:27.610
Let's see this play out, but
it's gonna give you the preview,

79
00:04:27.610 --> 00:04:30.938
see that has own property,
I'm not sure that's on.

80
00:04:30.938 --> 00:04:32.183
So where the hell's it coming from?

81
00:04:32.183 --> 00:04:34.525
Now you may just think,
well I don't know, JavaScript.

82
00:04:34.525 --> 00:04:39.426
Well, actually, it's pretty explicit,
it's gonna follow this proto-path.

83
00:04:39.426 --> 00:04:39.926
All right.

