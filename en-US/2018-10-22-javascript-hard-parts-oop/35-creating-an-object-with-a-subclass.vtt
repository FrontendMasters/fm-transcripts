WEBVTT

1
00:00:00.080 --> 00:00:01.701
&gt;&gt; Will Sentance: Are you ready for this?

2
00:00:01.701 --> 00:00:02.370
I'm ready for this.

3
00:00:02.370 --> 00:00:06.752
This is our final code fork paidUser1,
it's actually getting dark,

4
00:00:06.752 --> 00:00:08.220
this is a very bad sign.

5
00:00:08.220 --> 00:00:13.831
Okay, this is our final code, we're
down to our final, final, final code.

6
00:00:13.831 --> 00:00:16.743
This is our final execution
concept we're gonna do tonight.

7
00:00:16.743 --> 00:00:21.481
Sorry, let's pretend today, all right?

8
00:00:21.481 --> 00:00:26.364
PaidUser1, let's pretend for
ourselves that it's still today.

9
00:00:26.364 --> 00:00:32.152
Code with that mutative, that powerful

10
00:00:32.152 --> 00:00:37.775
new keyword, call paidUserCreator.

11
00:00:37.775 --> 00:00:44.102
Pass in, Alyssa 8 and 25.

12
00:00:44.102 --> 00:00:48.751
Okay here it goes, big execution context.

13
00:00:52.782 --> 00:00:54.911
&gt;&gt; Will Sentance: There it is.

14
00:00:54.911 --> 00:00:58.766
Into it we go, and the first thing.

15
00:00:58.766 --> 00:01:00.806
Do I have enough room there?

16
00:01:00.806 --> 00:01:01.798
Hold up.

17
00:01:04.058 --> 00:01:06.513
&gt;&gt; Will Sentance: The first
thing in local memory,

18
00:01:08.048 --> 00:01:09.944
&gt;&gt; Will Sentance: Are our argument

19
00:01:09.944 --> 00:01:12.250
parameter combos.

20
00:01:12.250 --> 00:01:14.175
Let's have Michael help us out with those.

21
00:01:14.175 --> 00:01:18.380
We're calling pages creator, that means
we run the pages creator function,

22
00:01:18.380 --> 00:01:21.706
which happens to now be called
constructor as part of a class.

23
00:01:21.706 --> 00:01:23.994
But it is just the function here.

24
00:01:23.994 --> 00:01:27.647
And that says we're accepting paidName,
paidScore account balance.

25
00:01:27.647 --> 00:01:30.398
So talk me through the parameter
argument matching here.

26
00:01:30.398 --> 00:01:35.737
&gt;&gt; Speaker 2: Yeah, so
we're gonna have paidName equal to Allysa.

27
00:01:35.737 --> 00:01:37.064
&gt;&gt; Will Sentance: Beautiful.

28
00:01:37.064 --> 00:01:39.668
&gt;&gt; Speaker 2: And
then paidScore equal to 8.

29
00:01:39.668 --> 00:01:40.460
&gt;&gt; Will Sentance: Yeah.

30
00:01:40.460 --> 00:01:44.429
&gt;&gt; Speaker 2: And then accountBalance 25.

31
00:01:44.429 --> 00:01:47.777
&gt;&gt; Will Sentance: 25, okay.

32
00:01:47.777 --> 00:01:49.329
Michael thank you man.

33
00:01:49.329 --> 00:01:52.445
And now, we call it with the new keyword,

34
00:01:52.445 --> 00:01:57.569
Nick this is your specialty area,
what does this get us doing?

35
00:01:57.569 --> 00:01:59.132
I can help you out.

36
00:01:59.132 --> 00:02:01.075
I'm afraid this is not your
specialty are this time.

37
00:02:01.075 --> 00:02:06.016
Because now in a class it
does do something weird.

38
00:02:06.016 --> 00:02:12.653
So there is a this assignment, but
it is uninitialized, nothing there, okay?

39
00:02:16.037 --> 00:02:19.195
&gt;&gt; Will Sentance: And
we immediately must have a super call,

40
00:02:19.195 --> 00:02:21.924
before we want to refer to that this.

41
00:02:21.924 --> 00:02:25.846
It is there, it's uninitialized,
but we cannot refer to it.

42
00:02:25.846 --> 00:02:29.211
It's not undefined, it's not going
console.log above the super,

43
00:02:29.211 --> 00:02:30.694
which is hopefully gonna go and

44
00:02:30.694 --> 00:02:33.390
call the userCreator to
create our underlying object.

45
00:02:33.390 --> 00:02:37.024
We are not gonna run userCreator and
have it indirect,

46
00:02:37.024 --> 00:02:41.771
sorry, have a side effect on the this
we create with a new keyword here.

47
00:02:41.771 --> 00:02:46.327
No, this fundamentally changes,
the class structure, how and where,

48
00:02:46.327 --> 00:02:49.413
our pertinent object,
the one we're creating,

49
00:02:49.413 --> 00:02:53.987
the one that will eventually be sorting
pages one is actually being born.

50
00:02:53.987 --> 00:03:00.481
It is not being born in pagesCreator, it
is actually gonna be born in userCreator.

51
00:03:00.481 --> 00:03:03.485
And that is a design decision
of the JavaScript team,

52
00:03:03.485 --> 00:03:05.502
to make it be born in pagesCreator.

53
00:03:05.502 --> 00:03:09.629
Sorry, to make it be born in
userCreator constructor function.

54
00:03:09.629 --> 00:03:11.382
It is born in there.

55
00:03:11.382 --> 00:03:17.147
And then it is automatically returned
out and assigned to the this out here.

56
00:03:17.147 --> 00:03:19.133
Versus remember in the previous version,

57
00:03:19.133 --> 00:03:21.512
we have side effects on
the object we created here.

58
00:03:24.112 --> 00:03:25.898
&gt;&gt; Will Sentance: Okay so
let's start doing this.

59
00:03:25.898 --> 00:03:29.378
So it's unassigned or
uninitialized right now.

60
00:03:29.378 --> 00:03:34.185
We call super with what

61
00:03:34.185 --> 00:03:38.233
arguments Chris?

62
00:03:38.233 --> 00:03:39.033
&gt;&gt; Chris: PaidName parameter.

63
00:03:39.033 --> 00:03:41.003
&gt;&gt; Will Sentance: Which is?

64
00:03:41.003 --> 00:03:41.954
&gt;&gt; Chris: And paidScore.

65
00:03:41.954 --> 00:03:43.608
&gt;&gt; Will Sentance: Which have what values?

66
00:03:43.608 --> 00:03:45.201
&gt;&gt; Chris: Alyssa and 8.

67
00:03:45.201 --> 00:03:48.924
&gt;&gt; Will Sentance: 8 and there gonna go in
to as what parameter argument combos in

68
00:03:48.924 --> 00:03:50.077
the constructor?

69
00:03:50.077 --> 00:03:52.015
&gt;&gt; Chris: Name and score-
&gt;&gt; Will Sentance: Name is gonna be Alyssa,

70
00:03:52.015 --> 00:03:54.616
score is gonna be 8 inside
the execution context, okay.

71
00:03:56.457 --> 00:04:01.087
&gt;&gt; Will Sentance: Create the execution
context, I'm actually going to do this.

72
00:04:01.087 --> 00:04:05.253
This equals,
I almost wanna say pseudo equals.

73
00:04:05.253 --> 00:04:07.934
You can't assign to this and
behind the scenes is what's happening.

74
00:04:07.934 --> 00:04:11.693
This is gonna equal the return
value of calling super.

75
00:04:11.693 --> 00:04:14.604
Now I'm gonna actually show you
briefly what actually happens.

76
00:04:14.604 --> 00:04:15.402
It does this,

77
00:04:15.402 --> 00:04:20.063
there's a new thing in JavaScript that
allows you to call a constructor function.

78
00:04:20.063 --> 00:04:23.632
That's a function that should have
a new keyword in front of it,

79
00:04:23.632 --> 00:04:26.352
that allows you to do it
without the new keyword.

80
00:04:26.352 --> 00:04:31.973
It's called like Reflect.construct,
can someone type that into Google?

81
00:04:31.973 --> 00:04:35.020
I think it's called, Mark, do you mind to
tell me, reflect.construct it's in DNDM?

82
00:04:35.020 --> 00:04:36.765
Reflect.construct, so

83
00:04:36.765 --> 00:04:41.531
I'm actually gonna show you what
this exactly does behind the scenes.

84
00:04:41.531 --> 00:04:42.893
I'm gonna do it in red,

85
00:04:42.893 --> 00:04:46.655
cuz it really is about the extends
that makes this happen, okay?

86
00:04:46.655 --> 00:04:48.956
So it's gonna be reflect.

87
00:04:48.956 --> 00:04:50.812
Does it say reflect.contruct exits?

88
00:04:50.812 --> 00:04:51.332
&gt;&gt; Chris: Yeah.

89
00:04:51.332 --> 00:04:54.549
&gt;&gt; Will Sentance: Reflect.contruct, okay?

90
00:04:54.549 --> 00:05:03.050
It's first argument is the function
that's going to be creating the object.

91
00:05:03.050 --> 00:05:04.579
What is the function that's
gonna be creating the object?

92
00:05:04.579 --> 00:05:09.540
It is, userCreator because it goes to
look for Proto and its userCreator.

93
00:05:09.540 --> 00:05:16.216
This is what it's doing behind the scenes
userCreator, and then the arguments.

94
00:05:16.216 --> 00:05:19.677
Allysa I promised myself not to tell it
to not to do this bit but there we go.

95
00:05:19.677 --> 00:05:25.090
And then, the function who's
prototype object we want

96
00:05:25.090 --> 00:05:32.010
to have the returned objects that
comes out the quarter super point 2.

97
00:05:32.010 --> 00:05:35.285
Which is paidUserCreator,

98
00:05:35.285 --> 00:05:40.201
so paidUserCreator, paidUserCreator.

99
00:05:40.201 --> 00:05:45.323
And then that returns out
an object into the this.

100
00:05:45.323 --> 00:05:48.401
But for our purposes just
think of it as the super,

101
00:05:48.401 --> 00:05:50.389
we can write it a couple of ways.

102
00:05:50.389 --> 00:05:53.701
Think of it as the supper being.

103
00:05:53.701 --> 00:05:57.622
Super goes, no what do I want
to run to produce the object?

104
00:05:57.622 --> 00:06:00.424
While the object I want to
have is the user object, but

105
00:06:00.424 --> 00:06:02.240
we gonna add a bunch of stuff to it.

106
00:06:02.240 --> 00:06:05.589
So go run the user creator constructor.

107
00:06:05.589 --> 00:06:06.731
How do we know to go run that?

108
00:06:06.731 --> 00:06:14.282
Because extends put in the proto,
a reference to the user creator function.

109
00:06:14.282 --> 00:06:15.797
Or user create a constructor function.

110
00:06:15.797 --> 00:06:19.556
So super goes no what, so
you can almost think of it like this.

111
00:06:19.556 --> 00:06:24.011
That in local memory super is set
to user creator, not literally but

112
00:06:24.011 --> 00:06:27.779
you can almost think of it as
super is set to user creator.

113
00:06:27.779 --> 00:06:33.924
Okay so super is set to user creator.

114
00:06:35.724 --> 00:06:41.235
&gt;&gt; Will Sentance: Code with Alyssa and
8 and that's gonna be stored in this.

115
00:06:41.235 --> 00:06:43.620
These are the three different
ways of saying the same thing.

116
00:06:43.620 --> 00:06:46.445
Don't worry too much about
this reflect.construct thing.

117
00:06:46.445 --> 00:06:49.659
It's just a new way of allowing us to and
behind the scenes,

118
00:06:49.659 --> 00:06:51.597
this is really what's happening.

119
00:06:51.597 --> 00:06:58.654
We are running user creator with,
sorry, the new keyword in front of it.

120
00:06:58.654 --> 00:07:03.322
[LAUGH] It's gonna return out
the object that we know well and love.

121
00:07:03.322 --> 00:07:08.360
But, we're going to control
the returned out objects proto,

122
00:07:08.360 --> 00:07:11.982
to not beat a userCreator
prototype object.

123
00:07:11.982 --> 00:07:15.600
But instead to be to
pagesCreator prototype object.

124
00:07:15.600 --> 00:07:17.977
Okay, let's just do it.

125
00:07:17.977 --> 00:07:19.872
I regret bringing that
reflect.construct thing.

126
00:07:19.872 --> 00:07:24.802
But just know that what we pass in
last there,means that this running

127
00:07:24.802 --> 00:07:28.713
of superUserCreator is going
to set the prototype to be

128
00:07:28.713 --> 00:07:33.399
pageUserCreator.prototype, not
userCreator.prototype.

