WEBVTT

1
00:00:00.160 --> 00:00:04.230
&gt;&gt; Will Sentance: So,
here we are with our final approach.

2
00:00:04.230 --> 00:00:10.515
This is a mega standard approach now to
achieving object oriented programming,

3
00:00:10.515 --> 00:00:18.420
pretend style, in a language java script,
that is inherently a prototypal language.

4
00:00:18.420 --> 00:00:22.958
Not an object oriented one under
the hood but we are now able to really,

5
00:00:22.958 --> 00:00:27.282
seemingly emulate

6
00:00:27.282 --> 00:00:32.580
a object origin language within
a prototypal environment.

7
00:00:32.580 --> 00:00:33.840
And this is it.

8
00:00:34.980 --> 00:00:35.740
Wow, look at it.

9
00:00:35.740 --> 00:00:38.050
[LAUGH] Beautiful.

10
00:00:38.050 --> 00:00:40.230
Left hand side you've seen before.

11
00:00:40.230 --> 00:00:43.380
Note, and we're gonna walk
through it bit by bit now.

12
00:00:43.380 --> 00:00:45.190
This is our class version.

13
00:00:45.190 --> 00:00:48.238
We've got the function bit of
the function object combo.

14
00:00:48.238 --> 00:00:52.010
But when we run the function,
we'll create an object in user1.

15
00:00:52.010 --> 00:00:55.430
Now it's got a subtitle constructor.

16
00:00:55.430 --> 00:00:57.560
But it's still going to end up here.

17
00:00:59.770 --> 00:01:01.320
The same name in increment.

18
00:01:01.320 --> 00:01:03.830
Now look as though they're just there.

19
00:01:03.830 --> 00:01:07.400
No, no, no, behind the scenes,
how many noes is a?

20
00:01:08.460 --> 00:01:13.830
Behind the scenes they're being
stuck in the prototype object.

21
00:01:13.830 --> 00:01:14.350
No problem.

22
00:01:15.920 --> 00:01:20.080
So we're gonna do that left hand side
first and then the right hand side here.

23
00:01:20.080 --> 00:01:27.520
We're gonna lay out exactly how extends
and super are working under the hood.

24
00:01:29.770 --> 00:01:34.089
We'll figure it out together,
if it's the last thing we do.

25
00:01:34.089 --> 00:01:39.729
Okay, here we go, line one I
could almost leave this up here,

26
00:01:39.729 --> 00:01:46.220
cuz it's really the same, but
I want us to actually build it out.

27
00:01:46.220 --> 00:01:48.698
So line one, what are we doing?

28
00:01:48.698 --> 00:01:54.002
Let's have Chris, what is it say we're

29
00:01:54.002 --> 00:01:58.380
doing there Chris, in line one?

30
00:01:58.380 --> 00:01:59.500
&gt;&gt; Chris: Declaring.

31
00:01:59.500 --> 00:02:01.210
&gt;&gt; Will Sentance: Yeah,
it's already slowing.

32
00:02:01.210 --> 00:02:06.380
&gt;&gt; Chris: We declaring
a class called user creator.

33
00:02:07.590 --> 00:02:12.790
&gt;&gt; Will Sentance: User creator,
a class which we know,

34
00:02:12.790 --> 00:02:19.990
I'm gonna put it in pink, pretend it's
something special, but we know the truth.

35
00:02:19.990 --> 00:02:26.750
It's just a function object combo,
as they always are.

36
00:02:26.750 --> 00:02:31.750
And the function bit, yes,
now has a subtitle constructor.

37
00:02:31.750 --> 00:02:34.222
And the class is called what, Chris?

38
00:02:34.222 --> 00:02:35.973
&gt;&gt; Chris: UserCreator.

39
00:02:35.973 --> 00:02:41.950
&gt;&gt; Will Sentance: UserCreator,
it has a function which now,

40
00:02:41.950 --> 00:02:46.380
which when we call, we put UserCreator
parens, it's gonna run that function bit.

41
00:02:46.380 --> 00:02:51.180
But that function now,
when we wrap it we give it a subtitle.

42
00:02:51.180 --> 00:02:52.580
What's the subtitle we give it Elliott?

43
00:02:53.760 --> 00:02:54.280
&gt;&gt; Elliot: Constructor?

44
00:02:54.280 --> 00:02:56.430
&gt;&gt; Will Sentance: Constructor,
but it doesn't really mean much.

45
00:02:56.430 --> 00:02:59.710
It's just the function, and
the function object combo.

46
00:02:59.710 --> 00:03:03.180
But let's just call it constructor,
there it is.

47
00:03:03.180 --> 00:03:05.740
So if we run user created with parens.

48
00:03:05.740 --> 00:03:07.660
We run the constructed bit of it.

49
00:03:07.660 --> 00:03:10.890
That is we run the function
in the function object combo.

50
00:03:10.890 --> 00:03:13.380
Let's make sure we put
the object bit in as well.

51
00:03:13.380 --> 00:03:15.020
There's the object bit.

52
00:03:15.020 --> 00:03:17.770
Function plus object and there it is.

53
00:03:20.340 --> 00:03:21.510
There it is.

54
00:03:21.510 --> 00:03:26.710
That's the best object I've drawn and
JavaScript immediately grabs a function,

55
00:03:26.710 --> 00:03:31.020
the constructor bit, sticks it on the
function bit or the function object combo,

56
00:03:31.020 --> 00:03:34.790
and then it grabs, David, what just below?

57
00:03:34.790 --> 00:03:35.400
&gt;&gt; David: Same name?

58
00:03:35.400 --> 00:03:36.950
&gt;&gt; Will Sentance: Same name and
it puts it on what?

59
00:03:38.100 --> 00:03:41.990
&gt;&gt; David: On the prototype.

60
00:03:41.990 --> 00:03:48.370
&gt;&gt; Will Sentance: Prototype property of
the object in the function object combo.

61
00:03:48.370 --> 00:03:52.830
And there it is say name
is stored as a method for

62
00:03:52.830 --> 00:03:59.590
nothing has changed to the very point
that I could later add more functions

63
00:03:59.590 --> 00:04:03.560
directly use the created prototype and
put more functions in there, no problem.

64
00:04:03.560 --> 00:04:05.220
Okay, increments also added.

65
00:04:07.040 --> 00:04:12.940
Increment is also added to
our function object combo,

66
00:04:12.940 --> 00:04:16.900
and it's object portion under
the prototype property, there it is.

67
00:04:18.470 --> 00:04:21.640
Okay, our set up is done.

68
00:04:21.640 --> 00:04:26.510
Elliot, let's get making
our user one object.

69
00:04:26.510 --> 00:04:27.990
Take it away man.

70
00:04:27.990 --> 00:04:30.711
&gt;&gt; Elliot: New constant
is created user one.

71
00:04:30.711 --> 00:04:34.789
&gt;&gt; Will Sentance: Yeah,
initially uninitialized and

72
00:04:34.789 --> 00:04:38.608
we're gonna call what function?

73
00:04:38.608 --> 00:04:42.480
&gt;&gt; Elliot: The constructor or the-
&gt;&gt; Chris: Portion, yeah, the constructor

74
00:04:42.480 --> 00:04:47.420
portion of the class but let's be clear,
it's just the function, yeah.

75
00:04:47.420 --> 00:04:52.370
And the function object combo and
we're passing what arguments?

76
00:04:52.370 --> 00:04:54.602
&gt;&gt; Elliot: Fill, and for.

77
00:04:54.602 --> 00:04:58.869
&gt;&gt; Will Sentance: For,
we're gonna create a new.

78
00:04:58.869 --> 00:05:01.034
&gt;&gt; [LAUGH]
&gt;&gt; Will Sentance: A new-

79
00:05:01.034 --> 00:05:02.003
&gt;&gt; Execution.

80
00:05:02.003 --> 00:05:03.220
[LAUGH]
&gt;&gt; Will Sentance: Michael,

81
00:05:03.220 --> 00:05:05.500
you'd make me proud.

82
00:05:05.500 --> 00:05:06.958
Seth, of course, absolutely.

83
00:05:06.958 --> 00:05:10.560
With the mutator.

84
00:05:10.560 --> 00:05:16.660
That is the new keyword that changes up
how this execution context plays out.

85
00:05:16.660 --> 00:05:17.330
There it is.

86
00:05:18.370 --> 00:05:20.110
There it is.
There's our execution context.

87
00:05:23.060 --> 00:05:24.970
New keyword starts doing stuff.

88
00:05:24.970 --> 00:05:26.340
Nick, you did this well last time.

89
00:05:26.340 --> 00:05:27.420
Do you mind doing it again?

90
00:05:28.470 --> 00:05:31.462
Help me out first with
the parameter argument combos.

91
00:05:31.462 --> 00:05:35.499
&gt;&gt; Nick: The parameter name
gets the value fill and

92
00:05:35.499 --> 00:05:39.340
the score gets the value of [INAUDIBLE].

93
00:05:39.340 --> 00:05:40.780
&gt;&gt; Will Sentance: Yeah, four.

94
00:05:40.780 --> 00:05:45.160
Now, note people just be clear running
user creator runs the constructor portion.

95
00:05:45.160 --> 00:05:48.230
In other words using user
creator runs the function.

96
00:05:49.570 --> 00:05:50.430
That's all the class is.

97
00:05:50.430 --> 00:05:54.535
The function is now subtitle
constructor is what it is.

98
00:05:54.535 --> 00:05:57.789
Okay, now new keyword
starts doing its magic.

99
00:05:57.789 --> 00:05:59.300
Nick, help me out.

100
00:05:59.300 --> 00:06:02.740
&gt;&gt; Nick: This an empty
this object gets created.

101
00:06:02.740 --> 00:06:03.820
&gt;&gt; Will Sentance: Yes, hold on.

102
00:06:03.820 --> 00:06:08.400
This is an empty, big old empty object.

103
00:06:08.400 --> 00:06:09.276
Yeah, with?

104
00:06:09.276 --> 00:06:14.626
&gt;&gt; Nick: A proto set to the prototype

105
00:06:14.626 --> 00:06:19.310
of the user/creator.

106
00:06:19.310 --> 00:06:22.969
&gt;&gt; Will Sentance: Yeah, the prototype
object on the user/creator object in its

107
00:06:22.969 --> 00:06:24.842
function object combination.

108
00:06:27.202 --> 00:06:31.600
&gt;&gt; Will Sentance: Here it is,
here it is, off it goes.

109
00:06:31.600 --> 00:06:36.000
Not particularly nicely done but,
there we go.

110
00:06:36.000 --> 00:06:37.350
Yeah?
&gt;&gt; Nick: And then finally,

111
00:06:38.790 --> 00:06:43.690
in this object gets set
a property of name.

112
00:06:43.690 --> 00:06:45.013
&gt;&gt; Will Sentance: So now we take over.

113
00:06:45.013 --> 00:06:46.379
We're doing our bit here, yep.

114
00:06:47.730 --> 00:06:49.600
&gt;&gt; Nick: Phil and score of four.

115
00:06:49.600 --> 00:06:52.120
&gt;&gt; Will Sentance: Fantastic, but hold on.

116
00:06:52.120 --> 00:06:55.450
The object is stuck inside user creator,
we don't want it in there.

117
00:06:55.450 --> 00:07:00.890
&gt;&gt; Nick: It gets returned
to user one in this case.

118
00:07:00.890 --> 00:07:06.167
&gt;&gt; Will Sentance: It gets returned,
the object with the label this,

119
00:07:06.167 --> 00:07:13.912
the designation this gets returned
out to user1, and there folk, it is.

120
00:07:13.912 --> 00:07:18.306
With name Phil score four, and

121
00:07:18.306 --> 00:07:23.714
dunder proto dunder, as a nice little

122
00:07:23.714 --> 00:07:29.650
cheeky link up to our set of functions.

123
00:07:29.650 --> 00:07:34.230
Thank goodness, otherwise we wouldn't
have access to those functions.

124
00:07:34.230 --> 00:07:38.589
But nor do we wanna have those
functions on the object itself.

125
00:07:38.589 --> 00:07:41.333
Good, almost there.

126
00:07:41.333 --> 00:07:46.695
All right, so, user2, the same,
it would also have a bond to that object,

127
00:07:46.695 --> 00:07:49.760
we won't plat it out, let's do our check.

128
00:07:49.760 --> 00:07:51.940
By the way, look how fast we are now.

129
00:07:51.940 --> 00:07:56.690
Look how fast we get through the stuff
that was so demanding earlier, remarkable.

130
00:07:56.690 --> 00:07:57.436
Good job everybody.

131
00:07:57.436 --> 00:08:02.693
So user1.sayname,

132
00:08:02.693 --> 00:08:08.460
Michael, do you mind doing my
lookup journey here for JavaScript?

133
00:08:08.460 --> 00:08:11.160
&gt;&gt; Michael: So user1 is gonna be
looked upon and global memory?

134
00:08:11.160 --> 00:08:12.553
&gt;&gt; Will Sentance: Yep, there it is.

135
00:08:12.553 --> 00:08:16.469
&gt;&gt; Michael: And then say name
is going to be try to be found.

136
00:08:16.469 --> 00:08:17.382
&gt;&gt; Will Sentance: And it's not there.

137
00:08:17.382 --> 00:08:21.216
It's not there, so it's going to
go to proto and then crawl up and

138
00:08:21.216 --> 00:08:23.440
then find sayName under prototype.

139
00:08:23.440 --> 00:08:24.210
Beautiful.

140
00:08:24.210 --> 00:08:24.980
Beautiful.

