WEBVTT

1
00:00:00.340 --> 00:00:04.720
&gt;&gt; Will Sentance: And
now we come to object-oriented JavaScript.

2
00:00:04.720 --> 00:00:07.920
The new hard parts of OOP.

3
00:00:07.920 --> 00:00:11.120
We are used to seeing in hard parts,

4
00:00:11.120 --> 00:00:14.020
a whole bunch of functional
programming features.

5
00:00:14.020 --> 00:00:19.035
This has been the burgeoning paradigm for
the last few years, but

6
00:00:19.035 --> 00:00:24.240
nevertheless still remains a core

7
00:00:24.240 --> 00:00:29.060
way of thinking about code,
object-oriented programming.

8
00:00:29.060 --> 00:00:33.429
It makes up still a major part
of the react design pattern.

9
00:00:33.429 --> 00:00:39.416
And in today's session, we are gonna dive
deep in completeness into how object or

10
00:00:39.416 --> 00:00:41.710
into programming works.

11
00:00:41.710 --> 00:00:46.881
We're gonna lay out the number of
ways by which we can produce objects

12
00:00:46.881 --> 00:00:51.534
with their associated functionality
all bundled up nicely.

13
00:00:51.534 --> 00:00:55.105
We're gonna dive deep on call and apply.

14
00:00:55.105 --> 00:00:58.465
We're gonna see how
the prototype chain plays out.

15
00:00:58.465 --> 00:01:03.178
And the hardest part of all,
which is gonna take a bunch of time,

16
00:01:03.178 --> 00:01:07.476
maybe even a few minutes,
a bunch of time, subclassing.

17
00:01:07.476 --> 00:01:12.165
And we're gonna do that both in a,
what's called factory function style.

18
00:01:12.165 --> 00:01:15.503
We're gonna do it in
a new keyword style and

19
00:01:15.503 --> 00:01:21.600
we're gonna do it with the new ES
2015 classical, or class style.

20
00:01:21.600 --> 00:01:24.640
But it all begins with,
us asking ourselves,

21
00:01:24.640 --> 00:01:30.770
why do we have a paradigm,
a means of organizing code at all?

22
00:01:30.770 --> 00:01:31.910
It comes down to this.

23
00:01:31.910 --> 00:01:37.500
When you're writing out thousands of
lines of code, one after another,

24
00:01:37.500 --> 00:01:43.570
you do not want to just have do this,
then procedurally do this next command,

25
00:01:43.570 --> 00:01:46.110
then do this next command,
then do this next command.

26
00:01:46.110 --> 00:01:49.400
You wanna have some way of organizing it,

27
00:01:49.400 --> 00:01:53.330
such that,
well what do we do when we run code?

28
00:01:53.330 --> 00:01:55.102
We're essentially saving data,

29
00:01:55.102 --> 00:01:58.408
think a quiz game, as you're gonna
build out a quiz game today.

30
00:01:58.408 --> 00:02:03.097
Think of a quiz game, we're saving
data for the quiz, say user score,

31
00:02:03.097 --> 00:02:07.500
a user's name,
multiple users each with scores and names.

32
00:02:07.500 --> 00:02:14.250
Multiple quiz questions and then,
we're applying functionality to that data.

33
00:02:14.250 --> 00:02:16.890
We're saying, okay, here's,
I don't know, user one who's playing,

34
00:02:16.890 --> 00:02:18.100
user two who's playing.

35
00:02:18.100 --> 00:02:23.570
They both need to have the ability for
their score to be increased.

36
00:02:23.570 --> 00:02:26.920
But we've also got some
quiz question data.

37
00:02:26.920 --> 00:02:30.140
The description of the quiz question,
or the actual question itself.

38
00:02:30.140 --> 00:02:34.540
That quiz question data, that is, the
words of the quiz question, we don't wanna

39
00:02:34.540 --> 00:02:39.280
be applying functionality saying
increase score to the quiz question.

40
00:02:40.450 --> 00:02:45.780
But really all we're doing when we run
code or write code is saving data.

41
00:02:46.870 --> 00:02:50.980
Quiz questions, scores of players,
names of players, and

42
00:02:50.980 --> 00:02:55.814
then applying functionality to use
that data, or change that data, or

43
00:02:55.814 --> 00:02:58.326
render, that is display that data.

44
00:02:58.326 --> 00:03:00.776
So that's all we're doing,

45
00:03:00.776 --> 00:03:06.166
wouldn't it be nice if we could
combine up the appropriate data.

46
00:03:06.166 --> 00:03:10.066
Let's say, it's a user's data named Phil,

47
00:03:10.066 --> 00:03:14.967
score four in our quiz game,
with all of the functionality

48
00:03:14.967 --> 00:03:19.970
that we could ever want to
have applied to that data.

49
00:03:19.970 --> 00:03:23.740
So we don't have to go and
hunt, go run off to try and

50
00:03:23.740 --> 00:03:26.180
find what functionality's
applicable to this data.

51
00:03:26.180 --> 00:03:29.910
Don't worry, it's gonna be bundled
together somehow, kind of packaged up.

52
00:03:29.910 --> 00:03:31.450
And for our quiz question,

53
00:03:31.450 --> 00:03:36.010
we don't have to go and hunt after our
display quiz question functionality.

54
00:03:36.010 --> 00:03:40.290
Don't panic, it's all bundled
up there with the quiz question.

55
00:03:40.290 --> 00:03:43.530
It makes our life incredibly easy.

56
00:03:43.530 --> 00:03:45.310
So what is a paradigm?

57
00:03:45.310 --> 00:03:50.640
A paradigm means any approach
to organizing our code that,

58
00:03:50.640 --> 00:03:51.810
well, let's have a look.

59
00:03:51.810 --> 00:03:56.395
That hopefully makes it easy to
add features and functionality.

60
00:03:56.395 --> 00:04:01.211
That hopefully, if I want my users
in my app to now not only be able to

61
00:04:01.211 --> 00:04:04.919
increase their score, but
decrease their score.

62
00:04:04.919 --> 00:04:06.351
Hopefully, it's easy for

63
00:04:06.351 --> 00:04:09.810
me to have all my users the ability
to have their score decreased.

64
00:04:09.810 --> 00:04:15.200
But also, easy for us and
other developers to reason about.

65
00:04:15.200 --> 00:04:17.344
Not do this and do this and do this, and

66
00:04:17.344 --> 00:04:22.200
it's 40,000 lines of code one
after another, but instead.

67
00:04:22.200 --> 00:04:25.030
This is a good organizing method,
or organizing approach.

68
00:04:25.030 --> 00:04:28.910
We have our data that represents,
in this app, users.

69
00:04:28.910 --> 00:04:33.150
And then attached to it, the functionality
that applies to those users.

70
00:04:33.150 --> 00:04:35.700
We have our data that
represents a quiz question.

71
00:04:35.700 --> 00:04:40.010
And attached to it, the functionality
that says, display that quiz question.

72
00:04:40.010 --> 00:04:41.790
No hunting for it, it's right there.

73
00:04:43.260 --> 00:04:44.500
And hopefully, by the way,

74
00:04:44.500 --> 00:04:51.250
this organizing approach does not
come at the cost of performance.

75
00:04:51.250 --> 00:04:55.880
Doesn't say, well, it's made our lives
easier, but man, now it's really slow.

76
00:04:55.880 --> 00:04:57.800
Or now it's wasting a ton of memory.

77
00:04:57.800 --> 00:05:00.400
Yes, it's more organized, but
there's a ton of memory wasted.

78
00:05:00.400 --> 00:05:01.360
That's what we hope.

79
00:05:01.360 --> 00:05:04.950
A paradigm is an organizing structure for

80
00:05:04.950 --> 00:05:08.880
our code that hopefully
maintains these things.

81
00:05:08.880 --> 00:05:11.070
We need to organize our code
as it gets more complex so

82
00:05:11.070 --> 00:05:13.730
it's not just an endless
series of commands.

83
00:05:13.730 --> 00:05:18.270
So the question is,
how might we, I turn to Michael.

84
00:05:18.270 --> 00:05:21.970
How might we Michael, bundle up our data?

85
00:05:23.010 --> 00:05:27.829
Say, you use a score name with
the appropriate functionality that

86
00:05:27.829 --> 00:05:29.473
applies to that data.

87
00:05:29.473 --> 00:05:32.179
How might we bundle
those up would you say?

88
00:05:32.179 --> 00:05:37.581
&gt;&gt; Speaker 2: I usually would bind them
up with different separate classes and-

89
00:05:37.581 --> 00:05:38.154
&gt;&gt; Will Sentance: True, but

90
00:05:38.154 --> 00:05:39.872
in a very, very simple manner,

91
00:05:39.872 --> 00:05:41.957
we might just bind them in the-
&gt;&gt; Speaker 2: Object.

92
00:05:41.957 --> 00:05:43.541
&gt;&gt; Will Sentance: In an object, beautiful.

93
00:05:43.541 --> 00:05:44.906
Just put them in an object.

