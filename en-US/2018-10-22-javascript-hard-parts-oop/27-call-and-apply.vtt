WEBVTT

1
00:00:00.012 --> 00:00:06.466
&gt;&gt; Will Sentance: Line one,
what are we doing?

2
00:00:06.466 --> 00:00:08.135
What are we doing?

3
00:00:08.135 --> 00:00:14.320
Let's have, let's have, Susie,
my friend, what are we doing?

4
00:00:14.320 --> 00:00:17.550
&gt;&gt; Speaker 2: We're creating an object,
we have a const.

5
00:00:17.550 --> 00:00:20.460
&gt;&gt; Will Sentance: Fantastic,
we're declaring a const, its name is?

6
00:00:20.460 --> 00:00:21.140
Your favorite.

7
00:00:21.140 --> 00:00:25.450
&gt;&gt; Speaker 2: Obj.
&gt;&gt; Will Sentance: Obj, well named object.

8
00:00:25.450 --> 00:00:31.600
Obj which is yes, assigned an object,
with what properties?

9
00:00:31.600 --> 00:00:33.850
&gt;&gt; Speaker 2: The property of num and
increment.

10
00:00:33.850 --> 00:00:39.261
&gt;&gt; Will Sentance: Fantastic, num is 3,
increment is a function, spot-on.

11
00:00:40.680 --> 00:00:44.520
Okay, next line, Susie,
let's start with you.

12
00:00:44.520 --> 00:00:46.830
&gt;&gt; Speaker 2: So
now we have the other obj.

13
00:00:46.830 --> 00:00:49.920
&gt;&gt; Will Sentance: Fantastic.
What are it's properties?

14
00:00:49.920 --> 00:00:51.260
&gt;&gt; Speaker 2: A property of num.

15
00:00:51.260 --> 00:00:51.950
&gt;&gt; Will Sentance: Which is?

16
00:00:51.950 --> 00:00:52.850
&gt;&gt; Speaker 2: A value of 10.

17
00:00:52.850 --> 00:00:54.798
&gt;&gt; Will Sentance: 10,
does it get an increment property?

18
00:00:54.798 --> 00:00:57.397
Increment method?

19
00:00:57.397 --> 00:00:58.170
No.

20
00:00:58.170 --> 00:00:59.130
That's a shame.

21
00:00:59.130 --> 00:01:03.140
Cuz I kinda wanted to use
micro function on this object?

22
00:01:03.140 --> 00:01:04.050
What could I do?

23
00:01:04.050 --> 00:01:07.280
Let's see what his first try calling
object increment taught me through

24
00:01:07.280 --> 00:01:12.480
the lookup process, Elliott, of orbs
with the increment method call on it.

25
00:01:12.480 --> 00:01:14.690
It's not that fancy,
but told me through it.

26
00:01:14.690 --> 00:01:15.560
I look for orbit.

27
00:01:15.560 --> 00:01:17.870
Where in the global memory?

28
00:01:17.870 --> 00:01:18.930
I find it.

29
00:01:18.930 --> 00:01:20.850
Do I have an increment method on it?

30
00:01:20.850 --> 00:01:24.610
I do for once, [LAUGH] I was
still using my answers no voice.

31
00:01:24.610 --> 00:01:27.750
So some of you might actually
thought maybe it's not there but

32
00:01:27.750 --> 00:01:30.430
no it is indeed there, we execute it.

33
00:01:30.430 --> 00:01:34.980
Let's execute it and
let's do our, as our execution

34
00:01:34.980 --> 00:01:39.900
context there it is and into it we go.

35
00:01:41.000 --> 00:01:47.156
In the local memory,
we have a no parameter argument combo,

36
00:01:47.156 --> 00:01:51.155
[INAUDIBLE] but we do have what?

37
00:01:51.155 --> 00:01:53.036
&gt;&gt; Speaker 3: This.
&gt;&gt; Will Sentance: And this, excellent,

38
00:01:53.036 --> 00:01:55.491
an implicit parameter they call this.

39
00:01:55.491 --> 00:02:00.220
Implicit means something I didn't
implicitly state, it's just there.

40
00:02:00.220 --> 00:02:04.130
This which is assigned
automatically to what, Seth?

41
00:02:04.130 --> 00:02:04.900
&gt;&gt; Speaker 3: Obj.

42
00:02:04.900 --> 00:02:07.420
&gt;&gt; Will Sentance: Obj, in other words,
whatever is to the left-hand

43
00:02:07.420 --> 00:02:10.240
side of the dot on which that
function is being called.

44
00:02:10.240 --> 00:02:15.963
So it's obj, so when we do this .num ++,
we're really doing,

45
00:02:15.963 --> 00:02:20.358
obj x, and thank you,
Seth, .num ++ us look for

46
00:02:20.358 --> 00:02:25.899
obj not there, look for obj num,
perfect, there it is, four.

47
00:02:25.899 --> 00:02:29.470
But damn I wanna use that
increment function other obj.

48
00:02:31.120 --> 00:02:36.160
But I don't have an increment function
on it, and I can't do, what can I do?

49
00:02:37.190 --> 00:02:42.330
Well it turns out there's a way of running

50
00:02:42.330 --> 00:02:47.260
a function other than putting
parends on the end of its name.

51
00:02:48.310 --> 00:02:50.100
We're running a method or a function and

52
00:02:50.100 --> 00:02:52.950
putting parends on the end of its name,
if we use call.

53
00:02:54.840 --> 00:02:57.470
And then parsing is the first argument.

54
00:02:58.910 --> 00:03:04.290
Whatever we want the this inside
of that function to refer to.

55
00:03:04.290 --> 00:03:07.770
No more it just automatically referring
to the object left of the dot.

56
00:03:07.770 --> 00:03:11.810
No, no, no, no, that was,
you know, we couldn't control that.

57
00:03:11.810 --> 00:03:13.290
No more even with the arrow functions,

58
00:03:13.290 --> 00:03:17.590
it referring this to whatever this
was where the function was defined.

59
00:03:17.590 --> 00:03:20.370
Which, in this case,
would be global, a global object.

60
00:03:20.370 --> 00:03:26.220
Instead, we are gonna take control of
what the this assignment's gonna be.

61
00:03:26.220 --> 00:03:29.750
We're gonna manually
take control using call.

62
00:03:29.750 --> 00:03:31.330
By the way, any further arguments,

63
00:03:31.330 --> 00:03:36.090
we have to parse in, we'd put them
as after call as further arguments.

64
00:03:36.090 --> 00:03:38.230
The first one is gonna be
out of this assignment.

65
00:03:38.230 --> 00:03:40.150
Any further ones will follow after.

66
00:03:40.150 --> 00:03:41.970
Okay, let's see that for real.

67
00:03:41.970 --> 00:03:47.130
So let's hit that final line of code here,
let's have Nick

68
00:03:47.130 --> 00:03:51.610
give me the journey that's gonna
happen on this line of code here.

69
00:03:52.620 --> 00:03:59.130
&gt;&gt; Speaker 4: So obj, the obj object in
&gt;&gt; Will Sentance: The obj object, exactly.

70
00:03:59.130 --> 00:04:02.860
&gt;&gt; Speaker 4: in The global memory is hit.

71
00:04:02.860 --> 00:04:04.960
&gt;&gt; Will Sentance: Has
an increment method on it.

72
00:04:04.960 --> 00:04:06.340
&gt;&gt; Speaker 4: Yep.
&gt;&gt; Will Sentance: We're just gonna go and

73
00:04:06.340 --> 00:04:06.870
grab it dude.

74
00:04:06.870 --> 00:04:09.050
We're just gonna grab it okay?

75
00:04:09.050 --> 00:04:13.390
&gt;&gt; Speaker 4: And then we're gonna grab
call, but call isn't Not on increment.

76
00:04:13.390 --> 00:04:14.070
&gt;&gt; Will Sentance: Yeah yeah yeah.

77
00:04:14.070 --> 00:04:15.860
&gt;&gt; Speaker 4: So
we're gonna go to the protomethod.

78
00:04:15.860 --> 00:04:17.270
&gt;&gt; Will Sentance: Should we do
that just to remind ourselves?

79
00:04:17.270 --> 00:04:18.800
It's a little bit over complicated but
should we do it?

80
00:04:18.800 --> 00:04:21.220
Rather than to assume it's there,
let's take that journey.

81
00:04:21.220 --> 00:04:21.770
&gt;&gt; Speaker 4: Okay.
&gt;&gt; Will Sentance: Do you want to

82
00:04:21.770 --> 00:04:22.410
do that journey?

83
00:04:22.410 --> 00:04:23.680
&gt;&gt; Speaker 4: Sure.
&gt;&gt; Will Sentance: My god okay hold on.

84
00:04:23.680 --> 00:04:25.950
So by definition even though I can't.

85
00:04:25.950 --> 00:04:28.925
I wasn't gonna do this but
Nick you forced my hand.

86
00:04:28.925 --> 00:04:31.260
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Will Sentance: By definition it's

87
00:04:31.260 --> 00:04:32.040
a function.

88
00:04:32.040 --> 00:04:33.230
&gt;&gt; Speaker 4: By definition
it's a function.

89
00:04:33.230 --> 00:04:34.610
&gt;&gt; Will Sentance: Object combo.

90
00:04:34.610 --> 00:04:37.800
Even though it's on an object,
it is a function object combo,

91
00:04:37.800 --> 00:04:39.750
it may be a method,
it's a function object combo.

92
00:04:39.750 --> 00:04:44.340
And on that object, believe it,
it has what hidden property?

93
00:04:44.340 --> 00:04:46.390
&gt;&gt; Speaker 4: Proto.
&gt;&gt; Will Sentance: Proto, fantastic.

94
00:04:46.390 --> 00:04:49.340
Which is a link to?

95
00:04:49.340 --> 00:04:50.380
&gt;&gt; Speaker 4: Function.

96
00:04:50.380 --> 00:04:56.440
&gt;&gt; Will Sentance: To almost, to function,
because function is a Function

97
00:04:56.440 --> 00:04:59.530
object combo as well.

98
00:04:59.530 --> 00:05:04.120
Which has a property on its prototype,
which is an object, and

99
00:05:04.120 --> 00:05:05.860
it's turned that object.

100
00:05:05.860 --> 00:05:08.195
And that object has what on it?

101
00:05:08.195 --> 00:05:10.895
&gt;&gt; Speaker 4: Call.
&gt;&gt; Will Sentance: Call, fantastic.

102
00:05:10.895 --> 00:05:13.335
There it is, very, very nice by Nick.

103
00:05:13.335 --> 00:05:15.889
Let's give Nick another hand,
that was absolutely.

104
00:05:15.889 --> 00:05:17.405
&gt;&gt; [APPLAUSE] [APPLAUSE]
&gt;&gt; Will Sentance: Yeah,

105
00:05:17.405 --> 00:05:18.735
I was not even gonna bring that up.

106
00:05:18.735 --> 00:05:21.135
We just know it's there,
but that's where it is.

107
00:05:21.135 --> 00:05:23.825
It's not some mystery,
that's where it is, excellent Nick.

108
00:05:23.825 --> 00:05:28.655
And so we grab that function and
we create an execution context for it.

109
00:05:29.730 --> 00:05:33.580
With a local memory.

110
00:05:33.580 --> 00:05:38.160
And what did I say, Seth,
the assignment of this

111
00:05:38.160 --> 00:05:42.820
will be when I run a function
using the call approach.

112
00:05:42.820 --> 00:05:43.970
&gt;&gt; Speaker 5: The r will
be passed into call.

113
00:05:43.970 --> 00:05:44.900
&gt;&gt; Will Sentance: Fantastic.

114
00:05:44.900 --> 00:05:45.880
Which is?

115
00:05:45.880 --> 00:05:46.420
&gt;&gt; Speaker 5: Other options.

116
00:05:46.420 --> 00:05:47.800
&gt;&gt; Will Sentance: Other Opt.

117
00:05:47.800 --> 00:05:49.130
Excellent.

118
00:05:49.130 --> 00:05:52.960
Okay, and so we now run the body
of the increment function.

119
00:05:52.960 --> 00:05:56.390
And note, that kinda makes sense, cuz
we're not running increment directly, so

120
00:05:56.390 --> 00:05:57.968
it's not to the left of the dot, directly.

121
00:05:57.968 --> 00:06:03.055
So this .num++ is now gonna be other

122
00:06:03.055 --> 00:06:08.012
plus plus are the here it is,

123
00:06:08.012 --> 00:06:11.280
plus plus increment to 11.

124
00:06:11.280 --> 00:06:17.730
We got to take control of our functions,
execution context, this assignment.

125
00:06:17.730 --> 00:06:20.485
No more automatic,
we manually took control of it.

126
00:06:20.485 --> 00:06:24.120
Now apply very similarly.

127
00:06:24.120 --> 00:06:27.200
I could easily just switch this out For
apply,

128
00:06:27.200 --> 00:06:31.140
which is another function
available to all functions.

129
00:06:31.140 --> 00:06:33.860
I'm really impressed by Nick, you know?

130
00:06:33.860 --> 00:06:36.470
Working through that,
actually, this is identical.

131
00:06:36.470 --> 00:06:41.890
The only difference is if my
increment were expecting inputs,

132
00:06:41.890 --> 00:06:46.130
with call, I would just do comma,
next argument.

133
00:06:46.130 --> 00:06:47.610
Which would be first argument here.

134
00:06:47.610 --> 00:06:50.330
Comma, next item,
which would be second argument here.

135
00:06:50.330 --> 00:06:54.040
Whereas with Apply,
I put all those arguments,

136
00:06:54.040 --> 00:06:57.260
the inputs,
in square brackets as an array.

137
00:06:57.260 --> 00:07:00.590
So it's just basically one single argument
where I put all the arguments that

138
00:07:00.590 --> 00:07:04.560
are gonna be thrown into
increment in an array.

139
00:07:04.560 --> 00:07:05.920
The only slight difference.

140
00:07:05.920 --> 00:07:10.440
This always refers the older dot on which
the function or method is being called.

141
00:07:10.440 --> 00:07:12.080
I bet you the reason is
something to do with?

142
00:07:12.080 --> 00:07:15.670
&gt;&gt; Speaker 6: You don't have to know how
many arguments you're gonna be passing.

143
00:07:15.670 --> 00:07:16.380
&gt;&gt; Will Sentance: Probably.

144
00:07:16.380 --> 00:07:18.865
&gt;&gt; Speaker 6: But
you never have [INAUDIBLE]

145
00:07:18.865 --> 00:07:20.426
&gt;&gt; Will Sentance: No discussion.

146
00:07:20.426 --> 00:07:23.170
It's a mystery, and it's a mystery for

147
00:07:23.170 --> 00:07:25.290
good reason,
we should not know this sort of thing.

148
00:07:25.290 --> 00:07:26.900
Let's leave it like that.

149
00:07:26.900 --> 00:07:30.260
All right, to the left of the dot on which
the function method is being called,

150
00:07:30.260 --> 00:07:34.130
unless we override that by running
the function user .call() or .apply(),

151
00:07:34.130 --> 00:07:38.990
which lets us set the value of this Inside
the increment function manually, okay.

152
00:07:38.990 --> 00:07:44.550
This is gonna turn out to be
incredibly useful when on our next

153
00:07:44.550 --> 00:07:48.880
approach using new keyword, we really,
really need to take control.

154
00:07:48.880 --> 00:07:51.640
If we're gonna use that user
created function over here,

155
00:07:51.640 --> 00:07:57.160
we're gonna use it to create that
paid user Well our paid user creator

156
00:07:57.160 --> 00:08:01.240
has created an object to be the paid user,
so we need to make sure that's the object

157
00:08:01.240 --> 00:08:05.520
we use when we end up adding properties
using the user creator function.

158
00:08:06.810 --> 00:08:10.640
We need to make sure if we're
running paid user creator,

159
00:08:11.960 --> 00:08:17.180
we're running it with the new, it creates
automatically inside an object for

160
00:08:17.180 --> 00:08:20.428
us Which is going to end
up being a paid user 1.

161
00:08:20.428 --> 00:08:24.920
Well that object we want
to add properties to it

162
00:08:24.920 --> 00:08:29.510
using the pre-written code from user
Creator where it's called of this.

163
00:08:29.510 --> 00:08:32.950
Well, couldn't we make that
this refer to the object?

164
00:08:32.950 --> 00:08:35.290
We're making using pages of Creator.

165
00:08:35.290 --> 00:08:39.180
This is exactly what we're
going to do using our call.

166
00:08:39.180 --> 00:08:39.920
But it is brutal.

167
00:08:39.920 --> 00:08:43.200
That first line of code inside a paid
user create is really a toughy.

