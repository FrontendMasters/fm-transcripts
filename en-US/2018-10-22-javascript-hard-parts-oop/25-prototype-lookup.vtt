WEBVTT

1
00:00:00.290 --> 00:00:01.920
&gt;&gt; Will Sentance: Here's how
we're gonna important checks.

2
00:00:01.920 --> 00:00:03.030
So we're gonna do it over here.

3
00:00:04.466 --> 00:00:10.810
Does our paidUser1 have
access to its new or

4
00:00:10.810 --> 00:00:16.230
the functionality that's
specific to a paid user?

5
00:00:16.230 --> 00:00:17.440
Let's have a look.

6
00:00:17.440 --> 00:00:19.170
Let's have a look.

7
00:00:21.390 --> 00:00:22.480
Elliot, you're up man.

8
00:00:22.480 --> 00:00:27.380
paidUser1.increaseBalance(), give me
the lookup journey of JavaScript.

9
00:00:27.380 --> 00:00:30.810
I'm gonna go on this side and
kind of crouch down so you can see.

10
00:00:30.810 --> 00:00:32.135
So paidUser1, where do we look for it?

11
00:00:32.135 --> 00:00:34.100
&gt;&gt; Elliot: So we'll look to the right.

12
00:00:34.100 --> 00:00:36.030
&gt;&gt; Will Sentance: Well, we look for
paidUser1 in global memory.

13
00:00:36.030 --> 00:00:40.285
&gt;&gt; Elliot: And if it doesn't find it there
&gt;&gt; Will Sentance: Doesn't find what?

14
00:00:40.285 --> 00:00:41.810
&gt;&gt; Elliot: The increase.

15
00:00:41.810 --> 00:00:43.500
&gt;&gt; Will Sentance: Doesn't find
increased balance method is not there.

16
00:00:43.500 --> 00:00:44.970
You've got name, score, account, balance.

17
00:00:44.970 --> 00:00:46.770
Don't see any increased balance method.

18
00:00:46.770 --> 00:00:50.465
We wouldn't want to, would we, because
it means it would be a copy on user one,

19
00:00:50.465 --> 00:00:54.410
paidUser1, and then another copy on
paidUser2, and another copy on paidUser3.

20
00:00:54.410 --> 00:00:56.260
We don't want that.
We want to have a single place.

21
00:00:56.260 --> 00:00:58.490
How do we get to that single place,
Elliott?

22
00:00:58.490 --> 00:00:59.480
&gt;&gt; Elliot: Through proto?

23
00:00:59.480 --> 00:01:01.140
&gt;&gt; Will Sentance: Through proto.

24
00:01:01.140 --> 00:01:03.515
Up to
&gt;&gt; Elliot: Paid user functions.

25
00:01:03.515 --> 00:01:05.250
&gt;&gt; Will Sentance: Do we find
increased balance there?

26
00:01:05.250 --> 00:01:06.180
&gt;&gt; Elliot: Yes.
&gt;&gt; Will Sentance: We do.

27
00:01:06.180 --> 00:01:06.920
We grab it.

28
00:01:06.920 --> 00:01:08.370
We execute it.

29
00:01:08.370 --> 00:01:09.370
Fantastic.

30
00:01:09.370 --> 00:01:14.092
By the way, would user one have
access to paid user functions?

31
00:01:14.092 --> 00:01:16.380
User one dot increase balance.

32
00:01:16.380 --> 00:01:18.140
Is it on user one?

33
00:01:18.140 --> 00:01:19.970
No.
Looking proto.

34
00:01:19.970 --> 00:01:20.540
User functions.

35
00:01:20.540 --> 00:01:22.020
Is there increased balance there?

36
00:01:22.020 --> 00:01:25.970
No, because we don't want our user one to
have a increased balance functionality,

37
00:01:25.970 --> 00:01:27.250
that'd make no sense.

38
00:01:27.250 --> 00:01:29.670
So we kind of parcelled off functions.

39
00:01:29.670 --> 00:01:32.380
We get to choose which ones we want and
pass them, not pass them down but

40
00:01:32.380 --> 00:01:33.200
have them available.

41
00:01:33.200 --> 00:01:36.950
But also have objects
be generated at a level

42
00:01:36.950 --> 00:01:40.070
in that chain where they don't get
access to things further down.

43
00:01:40.070 --> 00:01:41.600
Very nice, it's very very nice.

44
00:01:41.600 --> 00:01:43.090
Okay.
This is the prototype for

45
00:01:43.090 --> 00:01:43.920
design of a language.

46
00:01:43.920 --> 00:01:45.870
It's not classical OP.

47
00:01:45.870 --> 00:01:49.470
It's a prototypal language structure,
which is I think very interesting.

48
00:01:49.470 --> 00:01:50.730
Okay.

49
00:01:50.730 --> 00:01:58.500
But now let's check whether you
can still give paidUser1 access to

50
00:01:58.500 --> 00:02:03.980
that sayName function that is
definitely not on its set of functions.

51
00:02:03.980 --> 00:02:05.890
Let's go through the journey.

52
00:02:05.890 --> 00:02:07.426
Seth, give me the lookup journey.

53
00:02:07.426 --> 00:02:12.474
&gt;&gt; Seth: PaidUser1 sayName is gonna
look in the paidUser1 in global memory.

54
00:02:12.474 --> 00:02:13.320
It's not gonna find it.
&gt;&gt; Will Sentance: One second,

55
00:02:13.320 --> 00:02:14.020
it's not gonna find it.

56
00:02:15.980 --> 00:02:17.680
Yep.
&gt;&gt; Seth: It's going to freak out briefly

57
00:02:17.680 --> 00:02:19.290
and then look in proto.

58
00:02:19.290 --> 00:02:21.780
&gt;&gt; Will Sentance: Where it's also-
&gt;&gt; Seth: Not gonna find it.

59
00:02:21.780 --> 00:02:24.110
And then it's gonna look in that proto,
where it will find it.

60
00:02:24.110 --> 00:02:27.350
&gt;&gt; Will Sentance: Where it
will find it and execute it.

61
00:02:27.350 --> 00:02:29.520
Very nice Seth, excellent.

62
00:02:29.520 --> 00:02:30.392
All right, folk.

63
00:02:30.392 --> 00:02:32.910
That's, this is solution two, done.

64
00:02:32.910 --> 00:02:37.740
This is the most fine grain,
this is the senior dev question,

65
00:02:37.740 --> 00:02:43.410
tell me how subclassing works under
the hood, because this is it.

66
00:02:43.410 --> 00:02:48.020
Now, we are going to mask this
with a new keyword implementation

67
00:02:48.020 --> 00:02:51.690
that still requires, honestly, a little
bit too much work to do in subclassing.

68
00:02:51.690 --> 00:02:55.500
Which is why it was reasonable for
solution four to emerge as the new

69
00:02:55.500 --> 00:03:00.570
standard, where this whole approach
is handled in a cleaner fashion

70
00:03:00.570 --> 00:03:05.280
through classes and through
the extends and the super keywords.

71
00:03:05.280 --> 00:03:07.160
And that's what we will see in a moment.

