WEBVTT

1
00:00:00.020 --> 00:00:00.709
&gt;&gt; Will Sentance: All right.

2
00:00:00.709 --> 00:00:06.908
Now let's do our all important check.

3
00:00:06.908 --> 00:00:08.796
Let's do our all important check.

4
00:00:08.796 --> 00:00:11.100
Here it is our vital check.

5
00:00:11.100 --> 00:00:19.811
Can we call our functionality on our
object that has the data of the user?

6
00:00:19.811 --> 00:00:23.138
User 1 here could be user 2.

7
00:00:23.138 --> 00:00:24.683
Can we do it?

8
00:00:24.683 --> 00:00:27.775
Because the function definitely
don't look like it's on user 1.

9
00:00:31.343 --> 00:00:33.260
&gt;&gt; Speaker 2: Yeah, that's your life then.

10
00:00:33.260 --> 00:00:37.560
&gt;&gt; Will Sentance: We got the pink line
the pink line makes it possible Seth.

11
00:00:37.560 --> 00:00:38.250
Tell me the journey.

12
00:00:38.250 --> 00:00:41.480
Tell me the lookup journey of
JavaScript where is user 1.

13
00:00:41.480 --> 00:00:43.400
&gt;&gt; Speaker 2: User 1 is in globals.

14
00:00:43.400 --> 00:00:45.890
&gt;&gt; Will Sentance: Global memory,
global memory, there it is, hooray.

15
00:00:45.890 --> 00:00:47.740
What are we looking for on it?

16
00:00:47.740 --> 00:00:48.320
&gt;&gt; Speaker 2: Increment.

17
00:00:48.320 --> 00:00:49.280
&gt;&gt; Will Sentance: Increment,
do we have it?

18
00:00:49.280 --> 00:00:50.700
&gt;&gt; Speaker 2: We're gonna
find it by reference.

19
00:00:51.784 --> 00:00:54.807
&gt;&gt; Will Sentance: But
do we have it on as a property direct?

20
00:00:54.807 --> 00:01:00.158
No, so JavaScript goes and
looks up the pink line to?

21
00:01:00.158 --> 00:01:01.102
&gt;&gt; Speaker 2: The user functions store.

22
00:01:01.102 --> 00:01:02.672
&gt;&gt; Will Sentance: User
functions store where it finds?

23
00:01:02.672 --> 00:01:03.559
&gt;&gt; Speaker 2: Increment.

24
00:01:03.559 --> 00:01:04.327
&gt;&gt; Will Sentance: Beautiful.

25
00:01:04.327 --> 00:01:09.800
Okay, folk, let's talk about how that
bond is made because it really would

26
00:01:09.800 --> 00:01:15.544
be the worse session on front end masters
ever if we just left it as the pink line.

27
00:01:15.544 --> 00:01:16.658
The pink line leads up.

28
00:01:16.658 --> 00:01:19.490
So how actually is made is this people.

29
00:01:19.490 --> 00:01:22.790
As soon as you declare new user and

30
00:01:22.790 --> 00:01:27.730
as soon as it returns on an object using
object.create, it sets a hidden property.

31
00:01:27.730 --> 00:01:30.100
I will stand by what I said.

32
00:01:30.100 --> 00:01:32.570
It is an empty object that
gets stored in new user.

33
00:01:32.570 --> 00:01:37.540
But you will see an empty object stored
in new user and then you add the name,

34
00:01:37.540 --> 00:01:38.760
score, property, return.

35
00:01:38.760 --> 00:01:40.674
There is no increment property on here.

36
00:01:40.674 --> 00:01:45.470
And if only these two properties that are
locked in but, there are hidden properties

37
00:01:45.470 --> 00:01:53.300
and objects that give them bonus features,
and you can see them.

38
00:01:53.300 --> 00:01:54.970
As soon as you declare a new user and

39
00:01:54.970 --> 00:01:58.700
you assign it that empty object,
you press that little down arrow.

40
00:01:58.700 --> 00:02:03.250
In the Chrome dev tools, you see
a bunch of kinda light gray properties.

41
00:02:03.250 --> 00:02:08.146
One of them-
&gt;&gt; Will Sentance: Is dunderscore,

42
00:02:08.146 --> 00:02:14.070
double underscore,
proto double underscore.

43
00:02:14.070 --> 00:02:17.200
Now in the spec actually of JavaScript.

44
00:02:17.200 --> 00:02:20.130
That means the underlying design of
JavaScript, the run time writing of Java,

45
00:02:20.130 --> 00:02:21.890
they call it square bracket,
square bracket,

46
00:02:21.890 --> 00:02:23.190
prototype, square bracket, square bracket.

47
00:02:23.190 --> 00:02:25.890
Which is even more badly named

48
00:02:25.890 --> 00:02:30.180
as we'll see later one when there is
actually a property called prototype.

49
00:02:30.180 --> 00:02:33.230
So this is a terrible name, proto.

50
00:02:33.230 --> 00:02:36.320
The spec name was even worse named.

51
00:02:36.320 --> 00:02:39.148
So,anyway, whatever.

52
00:02:39.148 --> 00:02:44.524
This is a hidden property,
the pink stuff is a hidden properties,

53
00:02:44.524 --> 00:02:50.773
and under score proto, dunder score
will have a little link to where, Seth?

54
00:02:50.773 --> 00:02:51.773
&gt;&gt; Speaker 3: The the user
function storage.

55
00:02:51.773 --> 00:02:55.532
&gt;&gt; Will Sentance: To user function storage
and what we passed into object.create that

56
00:02:55.532 --> 00:02:58.532
gave us the empty object with
the hidden reference up.

57
00:02:58.532 --> 00:03:03.520
And note people, yes,
it says user function store.

58
00:03:03.520 --> 00:03:07.170
Do not think that means we're copying
user function store onto here.

59
00:03:07.170 --> 00:03:08.940
We're just saying, make a link up to it.

60
00:03:08.940 --> 00:03:13.250
Make a reference to where this
object is stored in memory.

61
00:03:13.250 --> 00:03:20.270
Such that when we return out this object,
it brings with it its little hidden bond.

62
00:03:20.270 --> 00:03:21.230
Up to,

63
00:03:21.230 --> 00:03:26.530
through the dunderscore proto dunderscore
it's bond up to user function score.

64
00:03:26.530 --> 00:03:28.065
Same thing on this object.

65
00:03:29.564 --> 00:03:32.450
&gt;&gt; Will Sentance: It's dunderscore
proto dunderscore bond up.

66
00:03:33.730 --> 00:03:39.690
So who would like to talk through
the lookup process here now,

67
00:03:39.690 --> 00:03:42.000
in terms of our proto reference.

68
00:03:42.000 --> 00:03:48.540
David, I knew from the look in your eyes
that you wanted to user 1, where is it?

69
00:03:48.540 --> 00:03:49.266
&gt;&gt; Speaker 4: In the global skull.

70
00:03:49.266 --> 00:03:52.160
&gt;&gt; Will Sentance: In,
let's call it global memory,

71
00:03:52.160 --> 00:03:57.100
the reason is, scoping in JavaScript
has a slightly more complex

72
00:03:57.100 --> 00:04:02.540
aspect with it's static scoping,
I see hard parts.

73
00:04:02.540 --> 00:04:03.930
So I prefer to use the term,

74
00:04:03.930 --> 00:04:07.380
how many times am I allowed to
pitch other hard parts videos?

75
00:04:07.380 --> 00:04:08.270
&gt;&gt; Speaker 5: As many as you like.

76
00:04:08.270 --> 00:04:09.290
&gt;&gt; Will Sentance: As many as I like.

77
00:04:09.290 --> 00:04:10.700
See, hard parts closure.

78
00:04:12.010 --> 00:04:14.195
So I prefer to use memory,
where we're storing.

79
00:04:14.195 --> 00:04:17.134
And we'll find user 1.

80
00:04:17.134 --> 00:04:17.949
Beautiful.

81
00:04:17.949 --> 00:04:21.523
And then David,
what are we looking for in user 1?

82
00:04:21.523 --> 00:04:23.370
What does JavaScript look for in user 1?

83
00:04:23.370 --> 00:04:24.190
&gt;&gt; Speaker 6: Increments.

84
00:04:24.190 --> 00:04:24.770
&gt;&gt; Will Sentance: Does it find it?

85
00:04:24.770 --> 00:04:26.860
It does not.

86
00:04:26.860 --> 00:04:27.480
Does it panic?

87
00:04:27.480 --> 00:04:28.595
Does it error at this point?

88
00:04:28.595 --> 00:04:30.990
&gt;&gt; Speaker 6: In IE, yes.

89
00:04:30.990 --> 00:04:32.140
&gt;&gt; Will Sentance: Does it?
I don't know, maybe.

90
00:04:32.140 --> 00:04:32.830
Perhaps.

91
00:04:32.830 --> 00:04:35.890
That would be pretty
tragic if that were true.

92
00:04:35.890 --> 00:04:37.410
Fundamental feature of JavaScript.

93
00:04:37.410 --> 00:04:39.990
Instead, it uses JavaScript.

94
00:04:39.990 --> 00:04:43.480
And I want to call it this,
it's prototypal nature.

95
00:04:43.480 --> 00:04:45.870
It's prototypal feature.

96
00:04:45.870 --> 00:04:51.160
It is a feature of JavaScript that means
when JavaScript does not find the method

97
00:04:51.160 --> 00:04:54.080
on the object directly,
it does not immediately give up.

98
00:04:54.080 --> 00:04:56.780
Instead it goes and
looks on what hidden property, David?

99
00:04:56.780 --> 00:04:59.050
&gt;&gt; Speaker 7: Proto.
&gt;&gt; Will Sentance: The proto property.

100
00:04:59.050 --> 00:05:02.740
Not prototype, we'll see that later
on a totally different thing.

101
00:05:02.740 --> 00:05:04.870
The proto property.

102
00:05:04.870 --> 00:05:06.230
The dunder proto dunder.

103
00:05:06.230 --> 00:05:07.870
The dunderscore proto dunderscore.

104
00:05:07.870 --> 00:05:10.320
The double underscore
proto double underscore.

105
00:05:10.320 --> 00:05:13.040
And it sees there
a little link up to what?

106
00:05:13.040 --> 00:05:15.560
&gt;&gt; Speaker 7: User, user incriment store.

107
00:05:15.560 --> 00:05:18.649
&gt;&gt; Will Sentance: User function store,
where we find what?

108
00:05:18.649 --> 00:05:19.280
&gt;&gt; Speaker 7: Incriment.

109
00:05:19.280 --> 00:05:20.560
&gt;&gt; Will Sentance: The incriment function.

110
00:05:20.560 --> 00:05:25.170
We can then grab its code,
create an execution context to execute it.

111
00:05:26.300 --> 00:05:31.650
I mean, we're gonna see a ton of
complexity laid on top of this.

112
00:05:31.650 --> 00:05:35.090
But this is fundamentally a good solution.

113
00:05:35.090 --> 00:05:39.730
This hidden feature of JavaScript
known as its prototypal nature,

114
00:05:39.730 --> 00:05:44.040
that means we cannot give up when we don't
find something on an object directly, but

115
00:05:44.040 --> 00:05:49.060
instead go looking elsewhere,
turns out to be profoundly useful.

116
00:05:49.060 --> 00:05:54.440
And whereas other hard parts have lots of
new concepts, we're gonna see that really

117
00:05:54.440 --> 00:06:00.000
in OOP, hard parts, this is it,
this is the underlying feature.

118
00:06:00.000 --> 00:06:03.151
This is JavaScript's Prototypal nature.

119
00:06:03.151 --> 00:06:08.722
Now, it's gonna turn out, it gets super
complicated as we link more objects

120
00:06:08.722 --> 00:06:14.121
to more objects, as we want to save
ourselves manually making this bond and

121
00:06:14.121 --> 00:06:18.855
instead use some keywords that
automate the making of that bond.

122
00:06:18.855 --> 00:06:20.894
And then we got it to
the clean up that code and

123
00:06:20.894 --> 00:06:24.300
it gets pretty complicated around
the new or the class keywords.

124
00:06:24.300 --> 00:06:28.478
But fundamentally under the hood
it's kind of underwhelming almost.

125
00:06:28.478 --> 00:06:29.542
This is it.

126
00:06:29.542 --> 00:06:31.160
We're gonna see nothing else a day.

127
00:06:33.170 --> 00:06:37.340
Everything else we face today is gonna be
JavaScript trying to clean up this process

128
00:06:37.340 --> 00:06:42.500
and in doing so create more need for
understanding, if that makes sense.

129
00:06:42.500 --> 00:06:45.410
So that it looks cleaner, but
to actually use it effectively?

130
00:06:45.410 --> 00:06:48.290
We're gonna need to, they're gonna
add little bonus bits here and

131
00:06:48.290 --> 00:06:50.730
there which make it more complicated,
more and more complicated.

132
00:06:50.730 --> 00:06:53.700
It will look cleaner and cleaner,
but under the hood, it's more and

133
00:06:53.700 --> 00:06:54.700
more complicated.

134
00:06:54.700 --> 00:06:57.550
We're getting on that full journey Today.

135
00:06:57.550 --> 00:07:02.186
All right, so
we have successfully found our function

136
00:07:02.186 --> 00:07:05.220
even though it is not on our object.

137
00:07:06.650 --> 00:07:08.630
Lets have thumbs at this point.

138
00:07:08.630 --> 00:07:10.080
No idea what happened here.

139
00:07:10.080 --> 00:07:11.240
I am clear.

140
00:07:11.240 --> 00:07:12.200
I have clarifications.

141
00:07:12.200 --> 00:07:13.000
Everybody's thumbs out.

142
00:07:13.000 --> 00:07:15.750
It's absolutely okay to
have clarifications.

143
00:07:15.750 --> 00:07:16.870
Terry, is that a clarification?

144
00:07:18.190 --> 00:07:19.500
Or a weak thumb?

145
00:07:19.500 --> 00:07:21.648
&gt;&gt; Speaker 7: Weak thumb.
&gt;&gt; Will Sentance: Okay, all right,

146
00:07:21.648 --> 00:07:24.050
problems with this one.

147
00:07:24.050 --> 00:07:25.300
There are no problems.

148
00:07:25.300 --> 00:07:26.280
This is beautiful.

149
00:07:26.280 --> 00:07:28.660
Maybe it's a little bit long winded folk.

150
00:07:28.660 --> 00:07:32.960
Once you start thinking
about your application as

151
00:07:32.960 --> 00:07:35.650
objects that combine the relevant data.

152
00:07:37.420 --> 00:07:40.440
Name score of a user with
the relevant functionality,

153
00:07:41.510 --> 00:07:42.680
the increment module function.

154
00:07:42.680 --> 00:07:44.950
In reality, there's a lot of those.

155
00:07:44.950 --> 00:07:46.520
You start doing that for everything.

156
00:07:46.520 --> 00:07:51.310
Even if, for example, you had one, these

157
00:07:51.310 --> 00:07:55.440
instances I don't love that name is not
really in the classic sense of instance.

158
00:07:55.440 --> 00:08:00.900
Even if you have one object requires
of example or one of a thing.

159
00:08:00.900 --> 00:08:03.060
So suppose you have in your app.

160
00:08:03.060 --> 00:08:04.860
You have one app, right?

161
00:08:04.860 --> 00:08:07.500
One quiz game board.

162
00:08:07.500 --> 00:08:10.440
Even if you just doing that
you're probably still going to

163
00:08:10.440 --> 00:08:14.430
make it as an object to capture the data
over the dimensions of the board

164
00:08:14.430 --> 00:08:15.730
the color of the board, whatever.

165
00:08:17.050 --> 00:08:20.190
Some details of it, and
the associated functionality.

166
00:08:20.190 --> 00:08:21.490
Maybe render the board.

167
00:08:21.490 --> 00:08:25.100
You're still gonna capture
that as an object, and

168
00:08:25.100 --> 00:08:29.340
therefore create a function that will
return that object out with the data,

169
00:08:29.340 --> 00:08:32.070
and then the functionality off
in some shared function store.

170
00:08:32.070 --> 00:08:34.150
Even though you're only
gonna have one of them.

171
00:08:34.150 --> 00:08:37.220
Not like users where you may have 40
players at the same time, 1,000 players at

172
00:08:37.220 --> 00:08:41.820
the same time, you just may only have
one of them but you're still going to

173
00:08:41.820 --> 00:08:46.900
produce that object with it's data ar
functionality together from a function.

174
00:08:46.900 --> 00:08:53.040
So I guess this process of hand crafting

175
00:08:53.040 --> 00:08:59.610
an object,
hand returning it out from a function,

176
00:08:59.610 --> 00:09:04.120
hand making the bond to
a set of shared functions.

177
00:09:04.120 --> 00:09:07.540
I guess that becomes
a little bit repetitive.

178
00:09:07.540 --> 00:09:11.139
If you saw a thing about everything
you do is objects with right data and

179
00:09:11.139 --> 00:09:12.972
functionality bundled together.

180
00:09:12.972 --> 00:09:15.292
With the right data and
the right functionality bonded together.

181
00:09:15.292 --> 00:09:16.932
And you're gonna produce
them from functions,

182
00:09:16.932 --> 00:09:18.720
you're making a lot of objects by hand.

183
00:09:18.720 --> 00:09:23.960
You're making a lot, you're writing the
creation of the object with a local label,

184
00:09:23.960 --> 00:09:25.220
newUser in this case.

185
00:09:25.220 --> 00:09:29.430
The returning of that object out,
the bond to the shared functions.

186
00:09:29.430 --> 00:09:31.810
You're doing that by hand,
you're writing out a lot.

187
00:09:31.810 --> 00:09:34.000
Other languages say, ah-ah, no need.

188
00:09:34.000 --> 00:09:37.760
Other languages say, do not fear, we're
gonna give you functions that just make

189
00:09:37.760 --> 00:09:40.710
you objects that you can
then add properties to.

190
00:09:40.710 --> 00:09:44.160
JavaScript doesn't, well it does now,
didn't use to give us that.

191
00:09:44.160 --> 00:09:48.280
Instead it gave us a keyword
that did that for us.

192
00:09:48.280 --> 00:09:53.100
Very strange design decision,
but it is what it is.

193
00:09:53.100 --> 00:09:56.840
So there's no fundamental
problems with this approach.

194
00:09:56.840 --> 00:10:00.040
I feel like I've read some people
saying this is kind of like

195
00:10:00.040 --> 00:10:01.820
the sophisticated approach.

196
00:10:01.820 --> 00:10:06.170
And in reality, this is what we're
gonna discover one of those key words

197
00:10:06.170 --> 00:10:10.480
in JavaScript, a new key word,
actually is doing under the hood.

198
00:10:11.520 --> 00:10:13.240
But I guess maybe it's
a little long winded.

199
00:10:14.410 --> 00:10:18.660
You create an object every single time,
you hand craft it, a bond to some

200
00:10:18.660 --> 00:10:21.980
functions every single time, and
you return that object every time.

201
00:10:21.980 --> 00:10:23.560
But it's super sophisticated.

202
00:10:24.570 --> 00:10:26.930
But JavaScript's designers said, okay,

203
00:10:28.200 --> 00:10:32.410
we're gonna give you a tool that
will automate these pieces.

204
00:10:32.410 --> 00:10:37.450
The making of the object, the crafting
of the bond to the shared functions, and

205
00:10:37.450 --> 00:10:38.550
the returning of the object data.

206
00:10:38.550 --> 00:10:44.370
We're gonna give you a three letter word
that will automate that process for you.

207
00:10:45.420 --> 00:10:48.670
That three letter word is,
everyone together New.

208
00:10:48.670 --> 00:10:51.701
&gt;&gt; Speaker 8: New, that wasn't
everybody together, but nevertheless.

