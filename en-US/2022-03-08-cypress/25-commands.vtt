WEBVTT

1
00:00:00.190 --> 00:00:05.290
We can do this together but it is
basically taking some parts of your code

2
00:00:05.290 --> 00:00:10.650
out, and going through and just kinda
dropping it into this command file.

3
00:00:10.650 --> 00:00:13.780
So where does that live?

4
00:00:13.780 --> 00:00:16.984
So here's the default one that
Cypress generates for you,

5
00:00:16.984 --> 00:00:19.550
it's all just commented out.

6
00:00:19.550 --> 00:00:22.784
But you can see that the syntax
is kinda there for you as well,

7
00:00:22.784 --> 00:00:25.520
it's Cypress.commands.add.

8
00:00:25.520 --> 00:00:29.991
And then whatever you wanna do, you'll
see there's a bunch of arguments, right?

9
00:00:29.991 --> 00:00:33.004
Previous subject is like the chaining,
right?

10
00:00:33.004 --> 00:00:37.856
So if we look at the syntax here,
we can see that by default,

11
00:00:37.856 --> 00:00:41.070
the one we had simply takes a function.

12
00:00:41.070 --> 00:00:45.470
So we'd have, in this case they're calling
it login, we called it sign in, right?

13
00:00:45.470 --> 00:00:49.347
And that's expecting two arguments, an
email address and a password, we happen to

14
00:00:49.347 --> 00:00:53.010
have a user object cuz that was just
the dummy data that we had at the time.

15
00:00:53.010 --> 00:00:59.040
This previous subject element means
you could chain off a cy.get, right?

16
00:00:59.040 --> 00:01:04.224
The previous subject being
optional means that it's basically

17
00:01:04.224 --> 00:01:09.129
how it enforces your usage of it,
so on and so forth, right?

18
00:01:09.129 --> 00:01:14.831
And the ability to overwrite existing
commands as well for custom things, right?

19
00:01:14.831 --> 00:01:19.789
So you can drop them in, basically it's
taking the common places in your code,

20
00:01:19.789 --> 00:01:23.530
lifting them, and
then drying out your tests, right?

21
00:01:23.530 --> 00:01:26.230
And there's some philosophical
debate here, right?

22
00:01:26.230 --> 00:01:28.777
Like your test should be explicit, and

23
00:01:28.777 --> 00:01:33.270
sometimes explicitness comes
at the cost of dryness, right?

24
00:01:33.270 --> 00:01:37.206
You don't need clever abstractions
in your test code when things aren't

25
00:01:37.206 --> 00:01:38.226
working, right?

26
00:01:38.226 --> 00:01:39.724
You need to see things.

27
00:01:39.724 --> 00:01:44.559
That said,
I think we can come to the agreement that,

28
00:01:44.559 --> 00:01:49.501
if I have a command called signin,
I'm not losing a lot

29
00:01:49.501 --> 00:01:53.921
of explicitness for
what I'm gaining, right?

30
00:01:53.921 --> 00:01:55.406
It's pretty, pretty close.

31
00:01:55.406 --> 00:02:00.518
I would warn you not to get carried
away here, but train that sense of,

32
00:02:00.518 --> 00:02:05.820
yeah, I'm doing these three steps over and
over and over again as well.

33
00:02:05.820 --> 00:02:10.217
So let's just look at some commands
that we have in place, and

34
00:02:10.217 --> 00:02:13.700
kinda see, and
just kind of an example, right?

35
00:02:13.700 --> 00:02:18.794
So the signin, signup are literally
from that last set of tests that we had,

36
00:02:18.794 --> 00:02:22.854
just lifted, and
put in a command called signin and signup,

37
00:02:22.854 --> 00:02:26.990
effectively the same code,
just copy and pasted.

38
00:02:26.990 --> 00:02:30.030
Some of the things you
could do if you wanted to,

39
00:02:30.030 --> 00:02:33.691
this is a little too simple to
be totally honest with you.

40
00:02:33.691 --> 00:02:35.539
If you get tired of typing data-test,

41
00:02:35.539 --> 00:02:38.286
cuz that was a decision to call
a data-test we decided on.

42
00:02:38.286 --> 00:02:40.979
Some you can see it data-Cypress, data-cy,

43
00:02:40.979 --> 00:02:45.505
could be things that are existing in your
code based from previous test runner.

44
00:02:45.505 --> 00:02:51.036
But we could add getData where
we just pass in the attribute.

45
00:02:51.036 --> 00:02:55.387
A more sophisticated version might
take also additional selectors,

46
00:02:55.387 --> 00:02:58.640
like we had unpacked items and
then an ally, right?

47
00:02:58.640 --> 00:03:03.131
This isn't really,
you tack a .find onto it.

48
00:03:03.131 --> 00:03:07.630
I could rework the implementation here
to the point where it works better, but

49
00:03:07.630 --> 00:03:10.237
it was hard for
you to look at and understand.

50
00:03:10.237 --> 00:03:13.550
I decided I don't wanna do that to you.

51
00:03:13.550 --> 00:03:16.618
So but to show you the idea
that you can kind of create and

52
00:03:16.618 --> 00:03:20.556
put abstractions over other commands and
do stuff that you need to do,

53
00:03:20.556 --> 00:03:23.840
you can even override
it which I wouldn't do.

54
00:03:23.840 --> 00:03:25.900
But you can have
additional things as well.

55
00:03:27.180 --> 00:03:31.384
This is one, this is very specific to
whatever framework that you're using.

56
00:03:31.384 --> 00:03:36.111
This is one that I was using for a while
as I was developing, which is different

57
00:03:36.111 --> 00:03:40.648
frameworks that have a certain amount
of SSR, server-side rendering.

58
00:03:40.648 --> 00:03:44.590
They have a place where the page
loads some HTML, right?

59
00:03:44.590 --> 00:03:45.933
And I think echo chamber,

60
00:03:45.933 --> 00:03:49.480
a few of the apps totally work
with JavaScript disabled.

61
00:03:49.480 --> 00:03:54.410
But I think the secret menu item
where it's filtering on the fly, and

62
00:03:54.410 --> 00:03:58.830
not submitting a form or
anything like that didn't, right?

63
00:04:00.140 --> 00:04:05.470
So certain frameworks will, I think
next does it a little bit differently.

64
00:04:05.470 --> 00:04:10.080
A spell kit fires a spell kit:start
event when the JavaScript is loaded.

65
00:04:10.080 --> 00:04:15.028
So if you wanted to say, hey, for
this thing, I want to wrap this promise

66
00:04:15.028 --> 00:04:19.370
that will resolve when that event fires,
you could do that.

67
00:04:19.370 --> 00:04:20.433
I left this one in here,

68
00:04:20.433 --> 00:04:23.582
mostly cuz there's just a few other
things to kind of talk about here.

69
00:04:23.582 --> 00:04:27.982
And again, the chances that you'll
need any of these it's pretty low, but

70
00:04:27.982 --> 00:04:29.716
if you do, then I helped you.

71
00:04:29.716 --> 00:04:33.066
[LAUGH] So we can kind of talk
about them for a second which is,

72
00:04:33.066 --> 00:04:34.610
we wrap a promise, right?

73
00:04:34.610 --> 00:04:37.405
Which gives us a chaining ability, and

74
00:04:37.405 --> 00:04:42.670
then the idea that you have the window
object that you can access, right?

75
00:04:42.670 --> 00:04:45.048
And we're just putting an event
listener on the window, and

76
00:04:45.048 --> 00:04:46.634
then we're resolving the promise, and

77
00:04:46.634 --> 00:04:50.390
that's still giving us our Cypress
changes, so we can do like cy.waitforapp.

78
00:04:50.390 --> 00:04:53.410
And then whatever we want to do next,
right?

79
00:04:53.410 --> 00:04:57.845
That's really it, but the idea that you
have the window object available to you,

80
00:04:57.845 --> 00:05:00.608
the idea that you can wait for
a promise to resolve,

81
00:05:00.608 --> 00:05:04.996
and then move forward with your tests,
are all different things that you can do.

82
00:05:04.996 --> 00:05:09.500
&gt;&gt; All right, could you talk about or
show an example of how you might use this?

83
00:05:09.500 --> 00:05:12.685
Would this be like something you could,

84
00:05:12.685 --> 00:05:17.459
is there a way in before each to
await a promise to resolve, or

85
00:05:17.459 --> 00:05:21.037
would you wrap everything
in a then block or?

86
00:05:21.037 --> 00:05:26.890
&gt;&gt; Yeah, I think I deleted that code cuz
it's just one of things I cut preparing,

87
00:05:26.890 --> 00:05:32.211
but effectively, Mocha and just out
of the box, if you return a promise

88
00:05:32.211 --> 00:05:37.737
out of the before each, it will hold and
wait for that promise to resolve.

89
00:05:37.737 --> 00:05:39.951
So honestly, all I did when I was gonna,

90
00:05:39.951 --> 00:05:43.667
eventually just turned server-side
rendering off cuz that was not

91
00:05:43.667 --> 00:05:47.380
the situation that just to
deal with this workshop.

92
00:05:47.380 --> 00:05:54.458
But basically in the before each,
I basically returned cy.waitforapp, right?

93
00:05:54.458 --> 00:05:57.319
And so that would wait for
the JavaScript to load, and

94
00:05:57.319 --> 00:06:00.063
then it would do all the stuff
on that page, right?

95
00:06:00.063 --> 00:06:03.856
I eventually decided that was just
a little bit too much complexity for

96
00:06:03.856 --> 00:06:07.454
us right now, but I left it in here
because you can see the window and

97
00:06:07.454 --> 00:06:08.628
the stuff like that.

98
00:06:08.628 --> 00:06:12.020
But yeah, you could just return it and
then before each would kind of wait for

99
00:06:12.020 --> 00:06:15.044
the app to start before every test,
before it did everything else.

100
00:06:15.044 --> 00:06:17.226
&gt;&gt; [INAUDIBLE]
&gt;&gt; Yeah, no problem.

101
00:06:17.226 --> 00:06:20.535
It seems that I left it in, [LAUGH] cool.

102
00:06:20.535 --> 00:06:26.540
So yeah, we can have all of these kind
of in place and begin to refactor.

103
00:06:26.540 --> 00:06:28.673
So let's actually grab these,
especially the,

104
00:06:28.673 --> 00:06:32.000
I'm gonna grab these three
that were actually in use.

105
00:06:32.000 --> 00:06:35.536
Again, these are effectively just things
that we could have in our code base that

106
00:06:35.536 --> 00:06:36.940
we could just begin to pull out.

107
00:06:36.940 --> 00:06:37.712
So the act of copy and

108
00:06:37.712 --> 00:06:40.780
pasting is most likely the way that
they would end up in this file.

109
00:06:40.780 --> 00:06:45.892
Now, you can see that Cypress, this is
something available, the Cypress object,

110
00:06:45.892 --> 00:06:50.580
as opposed to just a lowercase cy, is
an object where you can read and change.

111
00:06:50.580 --> 00:06:54.841
There's a cypress.config,
where you can read the configuration and

112
00:06:54.841 --> 00:06:59.172
adjust it like, I need longer
timeouts longer than four seconds for

113
00:06:59.172 --> 00:07:03.942
this file, and then I need whatever you
need to do, you can change it on the fly.

114
00:07:03.942 --> 00:07:10.442
This file is not actually all that
special, support.index.js is loaded,

115
00:07:10.442 --> 00:07:14.947
and you can see that it's
loading commands, right?

116
00:07:14.947 --> 00:07:17.795
Which is just adding
the commands onto the object.

117
00:07:17.795 --> 00:07:20.684
There's not really any
secrets around this file,

118
00:07:20.684 --> 00:07:25.100
if there are other things that you
needed to do, this will get called.

119
00:07:25.100 --> 00:07:27.901
And then whatever other
files that you require,

120
00:07:27.901 --> 00:07:31.550
stuff along the way can kind
of be branched out from here.

121
00:07:31.550 --> 00:07:34.283
And if you need to change the support
file and the options to a different file,

122
00:07:34.283 --> 00:07:35.450
you can do all of that.

123
00:07:35.450 --> 00:07:40.099
This is just a file that kind of gets
loaded to add additional functionality,

124
00:07:40.099 --> 00:07:42.130
and it's pulling in commands.

125
00:07:42.130 --> 00:07:43.630
So we have these commands in place.

126
00:07:45.560 --> 00:07:51.886
So now, what we should be able to do,
is kind of go into this file,

127
00:07:51.886 --> 00:07:59.155
and begin to effectively refactor it
in my favorite style of refactoring.

128
00:07:59.155 --> 00:08:00.564
Watch.

129
00:08:04.095 --> 00:08:10.331
[LAUGH] Right,
this now becomes cy.signUp(user), right?

130
00:08:14.439 --> 00:08:14.939
Signup.

131
00:08:18.886 --> 00:08:21.160
SignUp with the user.

132
00:08:23.713 --> 00:08:25.725
SignIn with the user, right?

133
00:08:25.725 --> 00:08:29.523
Still, we're still gonna have the problem
where we go through the process of

134
00:08:29.523 --> 00:08:31.890
the test run and stuff doing all of this.

135
00:08:31.890 --> 00:08:35.245
But now we can basically take all
the times that we have these three

136
00:08:35.245 --> 00:08:36.038
lines of code,

137
00:08:36.038 --> 00:08:40.360
replace it with a simple function that is
arguably even more descriptive, right?

138
00:08:40.360 --> 00:08:43.906
And this we'll go ahead and
we'll visit the page, and do everything

139
00:08:43.906 --> 00:08:48.264
we need to do as well, and so our tests
become, they sign up, then they sign in.

140
00:08:48.264 --> 00:08:54.568
And maybe your process is like when they
sign up they get redirected totally.

141
00:08:54.568 --> 00:08:58.775
Mostly that does not happen
in this application, so

142
00:08:58.775 --> 00:09:03.281
that I could make exercises for
you to do, [LAUGH] right?

143
00:09:03.281 --> 00:09:06.362
So then we can make sure that it
has the right path name, right?

144
00:09:06.362 --> 00:09:10.650
And so we can kind of do each one of
these but we can basically start to cut

145
00:09:10.650 --> 00:09:14.161
down on that code, so
this becomes a lot simpler as well.

146
00:09:14.161 --> 00:09:15.278
In this case it's also,

147
00:09:22.011 --> 00:09:24.840
All right, so
now what was that long file before?

148
00:09:24.840 --> 00:09:29.241
That was like randomizing a username and
leaving the database a mess.

149
00:09:29.241 --> 00:09:33.243
And doing all these repetitive steps
is a lot simpler, it's easy to go like,

150
00:09:33.243 --> 00:09:37.021
they reset the database before you signup,
and they signup and they signin.

151
00:09:37.021 --> 00:09:39.428
And they should be at the page, and

152
00:09:39.428 --> 00:09:42.924
then email should be on the page right on,
right?

153
00:09:42.924 --> 00:09:45.645
You wanna get to the point
where your tests are readable.

154
00:09:45.645 --> 00:09:53.100
And so this is one of the ways that
help us get there as well, right?

155
00:09:53.100 --> 00:09:57.457
And like I said, even when we say like
getData, you can make any command that you

156
00:09:57.457 --> 00:10:00.600
need for anything you find
repetitive in your code base.

