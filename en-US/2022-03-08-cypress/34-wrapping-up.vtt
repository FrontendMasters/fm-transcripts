WEBVTT

1
00:00:00.000 --> 00:00:05.350
Questions, comments, concerns,
cause of outrage, deep meditations?

2
00:00:05.350 --> 00:00:08.670
&gt;&gt; Maybe worth asking
the question here for folks.

3
00:00:08.670 --> 00:00:13.066
But where have you found success
managing secrets for CI/CD processes for

4
00:00:13.066 --> 00:00:16.344
things where you have to store usernames,
passwords,

5
00:00:16.344 --> 00:00:19.779
credit cards, to do checkout flows,
or stuff like that?

6
00:00:19.779 --> 00:00:22.489
&gt;&gt; Yeah, I personally was fortunate

7
00:00:22.489 --> 00:00:26.699
enough not have to work on
the checkout process part.

8
00:00:26.699 --> 00:00:30.607
For us, all of it depends
on the company size, right?

9
00:00:30.607 --> 00:00:36.781
I think at SendGrid we used Amazon key,

10
00:00:36.781 --> 00:00:41.091
something or other, AKS.

11
00:00:41.091 --> 00:00:43.936
At Twilio it was, I think,
something bespoke.

12
00:00:43.936 --> 00:00:47.257
Right now with the parts in Temporal or
API keys,

13
00:00:47.257 --> 00:00:52.850
it is usually just encrypted environment
variables and stuff along those lines.

14
00:00:52.850 --> 00:00:57.273
Those are usually features managed by
the build processes themselves, right?

15
00:00:57.273 --> 00:00:59.788
Cypress is somewhat kinda
agnostic to them and

16
00:00:59.788 --> 00:01:03.528
just kinda pulls them in from
the environment variables, but yeah,

17
00:01:03.528 --> 00:01:06.056
I think making sure that
those are encrypted.

18
00:01:06.056 --> 00:01:10.248
And again, I think it all at a certain
scale, yeah, you have a team running it.

19
00:01:10.248 --> 00:01:15.339
But I think if it's your open source
project or something very small,

20
00:01:15.339 --> 00:01:21.050
Travis has them, I know that, GitHub
Actions has them, Buildkite has them.

21
00:01:21.050 --> 00:01:24.442
Where you put in the environment variable,
it's encrypted,

22
00:01:24.442 --> 00:01:28.543
you can never see it again, nobody can
ever see it, you can only replace it.

23
00:01:28.543 --> 00:01:32.508
And those are for
the kind of simpler use cases, right?

24
00:01:32.508 --> 00:01:35.393
Obviously, when you get
to enterprise scale,

25
00:01:35.393 --> 00:01:39.442
you're worrying about key rotation and
stuff along those lines.

26
00:01:39.442 --> 00:01:42.794
And ideally automating some of that as
well, so that individual teams are not

27
00:01:42.794 --> 00:01:47.080
doing it because we know what happens
when individual teams have to do that.

28
00:01:47.080 --> 00:01:48.900
They don't.

29
00:01:48.900 --> 00:01:51.160
So you have those things kind
of like in place like that.

30
00:01:51.160 --> 00:01:55.991
The question was, is there a way
to run a subset of the tests?

31
00:01:55.991 --> 00:01:58.640
I think that you can do a Matcher.

32
00:01:58.640 --> 00:02:00.921
But for the things that have changed,

33
00:02:00.921 --> 00:02:05.450
I don't really know the answer to
that question, to be totally honest.

34
00:02:05.450 --> 00:02:11.390
Because it's a tricky
philosophical question, right?

35
00:02:11.390 --> 00:02:13.398
Every time we've thought about,

36
00:02:13.398 --> 00:02:17.760
we should totally have that cuz our
test suite is running too long, right,

37
00:02:17.760 --> 00:02:21.790
ultimate we always decided, no,
we don't want to do that, right?

38
00:02:21.790 --> 00:02:27.627
Because at what level of confidence
do you trust a tool that is

39
00:02:27.627 --> 00:02:33.930
trying to guess what files changed and
then what routes changed?

40
00:02:33.930 --> 00:02:40.010
I know that it just has that for your unit
test, and I don't even trust it for that.

41
00:02:40.010 --> 00:02:43.600
I trust it for a pre-push hook, but

42
00:02:43.600 --> 00:02:48.519
I don't trust it for
our build process, right?

43
00:02:48.519 --> 00:02:53.868
Because the cost benefit isn't
really great at any kind of scale.

44
00:02:53.868 --> 00:02:55.102
Do you know what I mean?

45
00:02:55.102 --> 00:03:00.013
The cost of it not being correct for
the benefit of the saved time.

46
00:03:00.013 --> 00:03:02.704
Pre-push hook, yeah,
checks the stuff I changed.

47
00:03:02.704 --> 00:03:07.649
But while I'm waiting for
a code review anyway, I definitely,

48
00:03:07.649 --> 00:03:11.039
again, something, something Selenium,

49
00:03:11.039 --> 00:03:15.618
have seen situations where
the integration test suite is so

50
00:03:15.618 --> 00:03:20.765
long running that it's unbearable and
it's slows down the team.

51
00:03:20.765 --> 00:03:26.644
But with I think a lot of the site
processing in a lot of cases,

52
00:03:26.644 --> 00:03:31.488
I traditionally find that
the turnaround time for

53
00:03:31.488 --> 00:03:37.730
code review is longer than it
takes to run the pipeline, right?

54
00:03:37.730 --> 00:03:42.601
I think when that changes, then maybe it's
time to think about that kind of stuff.

55
00:03:42.601 --> 00:03:47.872
But I always ask myself that question, and
then I never go through with it, because

56
00:03:47.872 --> 00:03:52.558
of those reasons of, am I comfortable
with getting even slightly wrong?

57
00:03:52.558 --> 00:03:53.570
Yep?
&gt;&gt; On that note,

58
00:03:53.570 --> 00:03:58.549
especially as we're getting things
like videos and things dumped back,

59
00:03:58.549 --> 00:04:02.420
do you have any experience or
knowledge of team reviews?

60
00:04:02.420 --> 00:04:04.940
It would be analogous to a code review,
right?

61
00:04:04.940 --> 00:04:08.330
But we'd be actually reviewing the test.

62
00:04:08.330 --> 00:04:11.870
Testing results is part
of the code improvement.

63
00:04:11.870 --> 00:04:13.120
&gt;&gt; Yeah, that's interesting.

64
00:04:13.120 --> 00:04:17.420
I think it's a really great idea, right?

65
00:04:18.580 --> 00:04:21.520
I think about how it's always happened for
me,

66
00:04:21.520 --> 00:04:24.984
which is when the complaining gets high,
[LAUGH] right?

67
00:04:24.984 --> 00:04:25.894
The builds are always failing.

68
00:04:25.894 --> 00:04:28.755
And then you have that meeting and
then you have it, right?

69
00:04:28.755 --> 00:04:33.816
But I like the idea of it
as a purposeful mechanism

70
00:04:33.816 --> 00:04:39.870
rather than the complaint cuz
I don't know how about you.

71
00:04:39.870 --> 00:04:44.327
Somebody suggests, we should turn
off the tests [LAUGH] all right?

72
00:04:44.327 --> 00:04:46.449
And they have reactions.

73
00:04:46.449 --> 00:04:48.741
I've been there for that conversation.

74
00:04:48.741 --> 00:04:51.964
Someone goes,
I think we need to turn off the test.

75
00:04:51.964 --> 00:04:54.901
And that's usually when
those conversations happen.

76
00:04:54.901 --> 00:04:59.917
By that point, it's gotten like we're
talking about the length of the test,

77
00:04:59.917 --> 00:05:03.651
the flakiness,
cuz it's usually not the tests, right?

78
00:05:03.651 --> 00:05:07.616
It's usually some other like, okay,
how are we simulating the environments,

79
00:05:07.616 --> 00:05:09.844
are we running too many end-to-end tests?

80
00:05:09.844 --> 00:05:13.134
Did my test fail cuz I'm
running it in staging and

81
00:05:13.134 --> 00:05:18.206
another team broke their own API in
staging, and now my tests are failing?

82
00:05:18.206 --> 00:05:22.994
Right, that's where you kinda hear my
voice fall if someone's mocking at

83
00:05:22.994 --> 00:05:25.080
the APIs as the right choice.

84
00:05:25.080 --> 00:05:29.060
Cuz I have been burned by a team
who didn't even ship those changes.

85
00:05:29.060 --> 00:05:31.870
They were trying them on staging,
they broke their thing.

86
00:05:31.870 --> 00:05:35.070
Our tests are running against their
staging APIs and staging environment.

87
00:05:35.070 --> 00:05:38.320
Our tests are breaking, we don't know why,
we think our tests are flaky.

88
00:05:38.320 --> 00:05:41.170
People want to turn off the test, right?

89
00:05:41.170 --> 00:05:44.960
And that's the kind of interesting
piece around all of that.

90
00:05:44.960 --> 00:05:48.292
But I like the idea of,
we know these are common things, right?

91
00:05:48.292 --> 00:05:50.173
Again, with the Cypress dashboard,

92
00:05:50.173 --> 00:05:53.066
there's ability to see what
the flaky tests are, right?

93
00:05:53.066 --> 00:05:56.847
Having a periodic review or almost a
postmortem of sorts to kind of figure what

94
00:05:56.847 --> 00:06:00.115
the bottom of the issue is,
I think it's super interesting idea.

95
00:06:00.115 --> 00:06:03.502
&gt;&gt; Someone asked about the longest
test suite you've seen and

96
00:06:03.502 --> 00:06:06.760
what would the longest acceptable be,
in your opinion?

97
00:06:06.760 --> 00:06:10.522
&gt;&gt; I've think I've seen
ones that run 24 hours.

98
00:06:10.522 --> 00:06:11.893
[LAUGH] All right.

99
00:06:11.893 --> 00:06:13.047
&gt;&gt; Weekly build.
[LAUGH]

100
00:06:13.047 --> 00:06:16.321
&gt;&gt; Yeah, right, and I mean some things,

101
00:06:16.321 --> 00:06:22.091
like you can see a world where you
do a full integration test, right?

102
00:06:22.091 --> 00:06:26.179
What we typically do for
that is we will run it on a cron, right?

103
00:06:26.179 --> 00:06:29.316
I think other than that,
on the kind of PR level,

104
00:06:29.316 --> 00:06:32.845
when the tests are starting
to take longer than a code.

105
00:06:32.845 --> 00:06:35.336
When it is the blocker for you shipping,

106
00:06:35.336 --> 00:06:39.743
I think it's when you're dancing
on the threshold of acceptability.

107
00:06:39.743 --> 00:06:44.029
But you can imagine a world where you have
these more in-depth tests where you don't

108
00:06:44.029 --> 00:06:46.684
necessarily need them
running on every change, but

109
00:06:46.684 --> 00:06:49.841
maybe once a night, right, or
something along those lines.

110
00:06:49.841 --> 00:06:52.996
So that if it's kind of a major release or
something like that,

111
00:06:52.996 --> 00:06:55.628
that you're catching it
before it gets really bad.

112
00:06:55.628 --> 00:06:59.118
Cuz you're running or
staging or something like that.

113
00:06:59.118 --> 00:07:03.891
That will kind of get you most of
the benefit, I think, early on.

114
00:07:03.891 --> 00:07:07.636
&gt;&gt; That's where the benefit of
something like suites would be helpful.

115
00:07:07.636 --> 00:07:10.687
Where you have the PR suite,
that's the gut check.

116
00:07:10.687 --> 00:07:11.860
And then the staging suite, that's like,

117
00:07:11.860 --> 00:07:13.549
I don't want it in front of
customers until it does [CROSSTALK].

118
00:07:13.549 --> 00:07:15.211
&gt;&gt; Yeah, exactly.

119
00:07:15.211 --> 00:07:20.227
Cool, thank you all so much.

120
00:07:20.227 --> 00:07:21.920
&gt;&gt; [APPLAUSE]

