WEBVTT

1
00:00:00.100 --> 00:00:01.091
My name is Steve.

2
00:00:01.091 --> 00:00:04.740
I am the frontend architect
at a company called Temporal.

3
00:00:04.740 --> 00:00:09.715
Temporal does workflows as code, taking
anything from long running processes and

4
00:00:09.715 --> 00:00:13.906
kind of making sure that they will
actually run to completion as well as

5
00:00:13.906 --> 00:00:18.827
abstracting over some of the parts about
distributed systems and make them hard.

6
00:00:18.827 --> 00:00:21.951
So the idea that any given part can fail,
and

7
00:00:21.951 --> 00:00:27.285
you're able to basically abstract all
that away and build applications.

8
00:00:27.285 --> 00:00:31.577
Just thinking about the business logic
itself, and we'll take care of retries and

9
00:00:31.577 --> 00:00:34.950
queuing, and you can have effectively
a serverless function and

10
00:00:34.950 --> 00:00:39.199
still call sleep 30 days on it, or have
it like recur and surf along those lines.

11
00:00:39.199 --> 00:00:42.353
So it's at temporal.io,
you should totally check it out.

12
00:00:42.353 --> 00:00:46.732
But at Cypress IO,
is a tool called Cypress.

13
00:00:46.732 --> 00:00:53.332
And the kinda high level of what Cypress
is, is it's either end to end or

14
00:00:53.332 --> 00:00:58.622
integration testing tool for
testing web application.

15
00:00:58.622 --> 00:01:03.943
And I'm choosing the word web
application very purposely, right?

16
00:01:03.943 --> 00:01:06.931
You can kinda see that
subheading there of fast, easy,

17
00:01:06.931 --> 00:01:10.437
reliable testing for
anything that runs in the browser, right?

18
00:01:10.437 --> 00:01:14.899
And so yes, that means react
applications or angular applications or

19
00:01:14.899 --> 00:01:20.039
a jQuery application or even just a Ruby
on Rails server generate, like anything

20
00:01:20.039 --> 00:01:24.902
that appears in the browser, you're
able to kind of write tests around it.

21
00:01:24.902 --> 00:01:28.288
And the way that it does
this is both elegant and so

22
00:01:28.288 --> 00:01:32.670
far that didn't exist for
the large majority of my career.

23
00:01:32.670 --> 00:01:37.783
And also the straightforward way that you
would think that it should do that, which

24
00:01:37.783 --> 00:01:42.606
is it drives a browser using JavaScript,
the language that runs in the browser

25
00:01:42.606 --> 00:01:47.451
to kind of emulate what you might do
manually to make sure things work, right?

26
00:01:47.451 --> 00:01:53.383
One of my not jokes is that you
always are testing your application.

27
00:01:53.383 --> 00:01:56.388
It's whether or
not you're doing it by hand or

28
00:01:56.388 --> 00:01:59.713
if you have an automated
way to go about doing that.

29
00:01:59.713 --> 00:02:04.417
So yeah,
there have been other tools in the past,

30
00:02:04.417 --> 00:02:12.149
most popular were different obstructions
around selenium which weren't good.

31
00:02:12.149 --> 00:02:15.506
So this kind of gives you
the native power of JavaScript and

32
00:02:15.506 --> 00:02:17.983
the browser to test things in the browser.

33
00:02:17.983 --> 00:02:22.392
And we'll obviously, spend the next
several hours kinda getting into

34
00:02:22.392 --> 00:02:26.003
all the details of how it works and
kicking the tires on it.

35
00:02:26.003 --> 00:02:29.750
But you can kind of gain a lot
from this screenshot right here,

36
00:02:29.750 --> 00:02:33.139
which is you've got your
application in an iframe, and

37
00:02:33.139 --> 00:02:37.899
it's basically able to kind of take
a version of several different browsers,

38
00:02:37.899 --> 00:02:42.470
kind of in there, kind of headless mode,
to kinda like drive them.

39
00:02:42.470 --> 00:02:45.035
And just basically go
through a set of commands and

40
00:02:45.035 --> 00:02:47.551
basically exercise that application,
right?

41
00:02:47.551 --> 00:02:50.243
And the really cool part about this is,

42
00:02:50.243 --> 00:02:56.298
if you're in the middle of a refactor from
backbone and Marionette into React, right?

43
00:02:56.298 --> 00:02:59.603
You can theoretically, it doesn't matter.

44
00:02:59.603 --> 00:03:03.723
It's not like I need to mount this
component in a certain way, or

45
00:03:03.723 --> 00:03:08.553
anything along those lines, even if your
code is really hard to unit test because

46
00:03:08.553 --> 00:03:13.761
somebody who's definitely not you wrote it
in a way that makes it untestable, right?

47
00:03:13.761 --> 00:03:17.066
This is a way that, okay, but
when I go to the page, I should see this,

48
00:03:17.066 --> 00:03:18.092
I should click here.

49
00:03:18.092 --> 00:03:22.412
As I'm doing a large refactor, you can
have that confidence that you haven't

50
00:03:22.412 --> 00:03:26.476
broken some other far part of
the application unintentionally, right?

51
00:03:26.476 --> 00:03:29.748
Cuz anytime a code base gets
significantly large, yeah,

52
00:03:29.748 --> 00:03:34.623
that thing you're staring at, you probably
are focused on enough to make sure you're

53
00:03:34.623 --> 00:03:37.620
gonna ship the feature
you're sinking to ship.

54
00:03:37.620 --> 00:03:40.298
But sometimes what happens is
you implement one thing and

55
00:03:40.298 --> 00:03:43.699
something else pops off on the other
end of the code base somewhere else,

56
00:03:43.699 --> 00:03:46.220
you don't see it and
now you have a bug, right?

57
00:03:46.220 --> 00:03:49.816
So having the ability to automate
this in a way that is quick and

58
00:03:49.816 --> 00:03:52.180
easy is incredibly important, right?

59
00:03:52.180 --> 00:03:57.063
The quick and
easy part is super important as well.

60
00:03:57.063 --> 00:04:03.490
Because if this stuff isn't easy,
you're not going to do it, right?.

61
00:04:03.490 --> 00:04:08.907
See also any project that has run
any of the selenium based tools,

62
00:04:08.907 --> 00:04:15.410
which is a lot of times they
sometimes just, randomly don't work.

63
00:04:15.410 --> 00:04:19.248
They run slowly, they are a lot of times
in a programming language that someone

64
00:04:19.248 --> 00:04:21.236
working on the web is not using, right?

65
00:04:21.236 --> 00:04:24.630
And so
there's a lot of issues around that,

66
00:04:24.630 --> 00:04:30.706
what happens a lot of times when there's
a deadline, they tend to get messed.

67
00:04:30.706 --> 00:04:34.641
Cypress is so easy to use that it becomes
compelling to be like, all right,

68
00:04:34.641 --> 00:04:38.950
I'm gonna work on this thing, I can write
the test first, it doesn't take me that

69
00:04:38.950 --> 00:04:42.402
long, I can validate that it passes and
move on to the next thing.

70
00:04:42.402 --> 00:04:46.645
So we're gonna start basically from
the ground up and kinda go through all of

71
00:04:46.645 --> 00:04:50.506
the core concepts as we start to
learn them pretty much in isolation.

72
00:04:50.506 --> 00:04:54.935
And then kind of snap them
together into a few more

73
00:04:54.935 --> 00:05:00.670
sophisticated patterns over
the course of our time together.

74
00:05:00.670 --> 00:05:05.534
With that, let's go through a tour of
just some of the materials that we're

75
00:05:05.534 --> 00:05:06.834
gonna have on hand.

76
00:05:06.834 --> 00:05:10.758
So we can kind of get
comfortable with those as well.

77
00:05:10.758 --> 00:05:15.649
So we've got most of the action
is happening in this

78
00:05:15.649 --> 00:05:19.418
repository called Cypress examples.

79
00:05:19.418 --> 00:05:24.668
And everything I'm gonna talk about
is in this directory called Lessons,

80
00:05:24.668 --> 00:05:29.682
and you can kinda see the order of
operations over the course of the day.

81
00:05:29.682 --> 00:05:34.021
And there's also a folder which
Cyprus generated called Cyprus,

82
00:05:34.021 --> 00:05:38.512
which is where a lot of either where
I'm gonna be doing a live coding or

83
00:05:38.512 --> 00:05:42.404
the exercises are, so
it's in Cyprus and in Integration.

84
00:05:42.404 --> 00:05:46.378
And there's a lot of either the kind
of basis for where either I or

85
00:05:46.378 --> 00:05:51.307
you will start writing some code, as well
as a reference implementation to kind

86
00:05:51.307 --> 00:05:54.415
of compare and
contrast against as we go through.

87
00:05:54.415 --> 00:05:58.900
So one of the things to definitely do as
we kind of get started is to kinda just go

88
00:05:58.900 --> 00:06:01.869
through some of the initial
getting set up pieces.

89
00:06:01.869 --> 00:06:06.437
There's nothing particularly
out of the ordinary.

90
00:06:06.437 --> 00:06:10.622
We do for one example have a small SQL
light database, so I would definitely

91
00:06:10.622 --> 00:06:15.341
recommend kind of just going through that
step, kind of as we're getting started,

92
00:06:15.341 --> 00:06:19.545
that way if anyone has any problems,
we can go and triage it during a break.

93
00:06:19.545 --> 00:06:22.722
But beyond that it is an npm install and
npm start,

94
00:06:22.722 --> 00:06:26.817
we'll kinda get through how to
actually run the Cypress tests.

95
00:06:26.817 --> 00:06:30.896
But on one hand, it is great that
we have a repo kind of set up and

96
00:06:30.896 --> 00:06:35.774
ready to go with a bunch of test
boilerplate and templates in place for us.

97
00:06:35.774 --> 00:06:40.473
On the other hand that does rob us of
the opportunity to kind of see what

98
00:06:40.473 --> 00:06:45.427
the initial installation experience
of setting up cypress looks like.

99
00:06:45.427 --> 00:06:48.975
So we also have a second repo and

100
00:06:48.975 --> 00:06:54.350
honestly you can clone it down and use it.

101
00:06:54.350 --> 00:06:58.191
You could also just use Create React app,
or just grab an application.

102
00:06:58.191 --> 00:07:00.454
The app itself is not the important part,

103
00:07:00.454 --> 00:07:04.733
the important part is is an application
that presently does not have Cypress.

104
00:07:04.733 --> 00:07:09.846
It's like in package.json, but it has
not been set up for the first time, so

105
00:07:09.846 --> 00:07:14.816
it's more about just not the other repo
where all that stuff is ready to go.

106
00:07:14.816 --> 00:07:18.365
But one that is simply, like if we were
just spin up this app it's just like

107
00:07:18.365 --> 00:07:22.091
a sentence vertically and horizontally
center that says this is the world's

108
00:07:22.091 --> 00:07:24.804
simplest application or
something along those lines.

109
00:07:24.804 --> 00:07:29.410
What is actually happening there is
not important, it is more that this

110
00:07:29.410 --> 00:07:34.480
is a repo that presently at this
moment does not have Cypress setup.

111
00:07:34.480 --> 00:07:37.510
So, if you wanna use this one,
you're welcome to use it.

112
00:07:37.510 --> 00:07:40.234
If you have one in mind
that you would like to use,

113
00:07:40.234 --> 00:07:43.300
that is also fine as well,
you can go ahead and do that.

