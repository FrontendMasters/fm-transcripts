WEBVTT

1
00:00:00.070 --> 00:00:02.482
Let's look at something else real quick,

2
00:00:02.482 --> 00:00:05.706
which is this works because
we are seeding the database.

3
00:00:05.706 --> 00:00:09.239
And we're making real network
calls to the real database and

4
00:00:09.239 --> 00:00:12.504
we're just putting the database
back together again.

5
00:00:12.504 --> 00:00:14.884
Where are all the places
that this won't work?

6
00:00:16.657 --> 00:00:17.757
Anyone wanna take a guess?

7
00:00:21.163 --> 00:00:25.013
Well, one, things that I don't control,
[LAUGH] right?

8
00:00:25.013 --> 00:00:29.589
I can reset my database,
I can't reset a third party database.

9
00:00:29.589 --> 00:00:32.588
I might not even be able to
reset another team's database.

10
00:00:32.588 --> 00:00:36.059
Right, like when I worked at Twilio, yeah.

11
00:00:36.059 --> 00:00:41.425
I didn't have access to the user
store I couldn't make users,

12
00:00:41.425 --> 00:00:44.461
right, that was not a thing, and so

13
00:00:44.461 --> 00:00:49.523
there was a lot of cases where
even internally I didn't have

14
00:00:49.523 --> 00:00:54.309
the ability to do the things
that I wanted to do, right?

15
00:00:54.309 --> 00:00:58.389
Could you, so Cypress has this
limitation where it doesn't

16
00:00:58.389 --> 00:01:01.833
allow you to spawn new windows or
additional tabs.

17
00:01:01.833 --> 00:01:06.670
This is like an intentional design,
but even if you could,

18
00:01:06.670 --> 00:01:13.468
you don't want your test breaking, cuz
Google changed their OAuth page, right?

19
00:01:13.468 --> 00:01:15.232
Also, you just don't wanna do that.

20
00:01:15.232 --> 00:01:19.757
But also, even if you did pull it
off with a super command that, okay,

21
00:01:19.757 --> 00:01:22.386
we'll actually like move to that page.

22
00:01:22.386 --> 00:01:25.903
And we'll take,
the target new all that kind of stuff.

23
00:01:25.903 --> 00:01:31.022
The chance that Google changes the name
of a button or anything that you

24
00:01:31.022 --> 00:01:36.156
don't control is an area where
flakiness enters your tests, right?

25
00:01:36.156 --> 00:01:40.893
And so you really want is listen I need
depending on what it is like is it a job,

26
00:01:40.893 --> 00:01:42.979
a JSON Web token, is it a cookie?

27
00:01:42.979 --> 00:01:45.770
Like what did I need in place for
this to happen?

28
00:01:45.770 --> 00:01:48.927
Because again,
if I'm testing like filtering or

29
00:01:48.927 --> 00:01:51.933
sorting or
some interaction pattern, right,

30
00:01:51.933 --> 00:01:57.135
then I don't always want to do all those
things cuz yeah, those are all slow even.

31
00:01:57.135 --> 00:02:00.602
We have less code for
signing in and signing up,

32
00:02:00.602 --> 00:02:03.300
the act is still happening, right?

33
00:02:03.300 --> 00:02:07.529
So, yeah,
internal API's that we don't own,

34
00:02:07.529 --> 00:02:10.839
which is a large set of them in my case.

35
00:02:10.839 --> 00:02:17.471
Any kind of OAuth logic from Google auth
zero or what have you, that could change.

36
00:02:17.471 --> 00:02:22.101
API's that you just don't control like
you're pulling in from the GitHub API,

37
00:02:22.101 --> 00:02:26.048
you're not gonna see their data base,
their production database,

38
00:02:26.048 --> 00:02:29.335
it's not something,
you're welcome or invited to do.

39
00:02:29.335 --> 00:02:34.001
So you need to figure out what
you're gonna do along those lines.

40
00:02:34.001 --> 00:02:36.695
Also you might wanna create conditions,
right,

41
00:02:36.695 --> 00:02:39.974
like what happens if we get
a 500 from the server, right.

42
00:02:39.974 --> 00:02:44.424
The one thing I have learned from doing
these workshops I create bugs all

43
00:02:44.424 --> 00:02:45.099
the time.

44
00:02:45.099 --> 00:02:49.514
Have you ever intentionally
tried to create a bug?

45
00:02:49.514 --> 00:02:53.000
You ever tried to intentionally make
an app slow, or have something that shoots

46
00:02:53.000 --> 00:02:55.981
out five hundreds, like randomly or
on purpose when you want it to?

47
00:02:55.981 --> 00:02:57.319
It's not easy.

48
00:02:57.319 --> 00:03:01.414
And so the ability to just say like,
Listen, I'm going to hit that API,

49
00:03:01.414 --> 00:03:04.722
you're going to tell me that
things went poorly, right?

50
00:03:04.722 --> 00:03:09.551
It's a lot easier than trying to create
Fictitious cuz then you're writing more

51
00:03:09.551 --> 00:03:12.049
code to simulate failure, [LAUGH] Right?

52
00:03:12.049 --> 00:03:15.050
That you could get wrong
than anything else, so

53
00:03:15.050 --> 00:03:17.462
it becomes a kinda useful way to do it.

54
00:03:17.462 --> 00:03:22.092
So let's kind of look at
just kinda one example here.

55
00:03:22.092 --> 00:03:24.585
We've got this side dot intercept, and

56
00:03:24.585 --> 00:03:28.190
it's a whole bunch of different
API footprints, right.

57
00:03:28.190 --> 00:03:32.607
You can just pass it a URL or
you can pass a URL and a method or

58
00:03:32.607 --> 00:03:36.764
you can give an object that
has multiple things in it.

59
00:03:36.764 --> 00:03:40.314
This is a slightly more sophisticated one,
but

60
00:03:40.314 --> 00:03:44.855
It could just be a string,
it could just be get and then a URL.

61
00:03:44.855 --> 00:03:51.142
So the first part though is what kind of
HTTP requests do we want to intercept?

62
00:03:51.142 --> 00:03:56.182
Right, so this would be get to
anything from our base URL/users,

63
00:03:56.182 --> 00:03:59.336
after that you're welcome to use globs.

64
00:03:59.336 --> 00:04:02.475
So like a star will be
just one thing star,

65
00:04:02.475 --> 00:04:06.790
star/star will be sub directories and
a greedier glob.

66
00:04:06.790 --> 00:04:09.609
In that case, you want to use regex,
you can use regex.

67
00:04:09.609 --> 00:04:15.517
It's just what is the matching logic for
the URL that we want to intercept and

68
00:04:15.517 --> 00:04:18.858
also what methods do we want to intercept.

69
00:04:18.858 --> 00:04:22.032
And then effectively what do we want to F,

70
00:04:22.032 --> 00:04:26.851
sometimes you just wanna make
sure the API got called, right?

71
00:04:26.851 --> 00:04:31.237
As I'm working on the filter logic for
temporal, right, I trust

72
00:04:31.237 --> 00:04:36.423
the temporal server is going to filter
my workflows with their API contract,

73
00:04:36.423 --> 00:04:41.315
right, like, it's rock solid in
production use, I trust it, right?

74
00:04:41.315 --> 00:04:43.246
They have their tests, right?

75
00:04:43.246 --> 00:04:47.004
So I wanna make sure that with
all the fidgeting of slacks and

76
00:04:47.004 --> 00:04:51.300
radio buttons that I'm sending
the right set of parameters there.

77
00:04:51.300 --> 00:04:53.192
So in that case, I wanna intercept,

78
00:04:53.192 --> 00:04:56.800
I don't necessarily need to mock out
a response or stub in a response.

79
00:04:56.800 --> 00:05:00.917
I just wanna say when they
change that input field,

80
00:05:00.917 --> 00:05:04.953
I should fire off an Ajax
request appropriately.

81
00:05:04.953 --> 00:05:08.799
All right, but
if you did wanna mock out a response,

82
00:05:08.799 --> 00:05:12.219
that's the second argument, which is cool.

83
00:05:12.219 --> 00:05:14.895
What if we never talked to the server?

84
00:05:14.895 --> 00:05:20.358
And we just gave you back some JSON
that you could expect from the server?

85
00:05:20.358 --> 00:05:23.810
Right, and this is great because it now
means you want to run this in CI CD,

86
00:05:23.810 --> 00:05:25.659
right isolated from everything else.

87
00:05:25.659 --> 00:05:27.195
You can totally do that.

88
00:05:27.195 --> 00:05:31.995
You might also have a set of integration
tests, but like for your general kind of,

89
00:05:31.995 --> 00:05:34.234
fast tests you wanna run all the time.

90
00:05:34.234 --> 00:05:37.711
This is great, you might also have
the integration test running.

91
00:05:37.711 --> 00:05:42.193
And then most of the time,
we will give it an alias, right,

92
00:05:42.193 --> 00:05:46.061
because we might wanna need
to refer to this later.

93
00:05:46.061 --> 00:05:50.075
Did this get called, right, at all?

94
00:05:50.075 --> 00:05:54.610
Sometimes you wanna be like,
hey, they hit the fetch button.

95
00:05:54.610 --> 00:05:59.617
That I want don't this same way
that a times out after four seconds

96
00:05:59.617 --> 00:06:05.369
of a thing is on the page is if the API
never got called that's problematic.

97
00:06:05.369 --> 00:06:10.443
The other thing you have the four
folders that were created for

98
00:06:10.443 --> 00:06:15.235
us is a fixture which is you
can put in a JavaScript object.

99
00:06:15.235 --> 00:06:19.858
But if I think about the workflows
in 10 portal, it's like,

100
00:06:19.858 --> 00:06:24.497
I think Max says 1, 000, and
they all it's a big payload.

101
00:06:24.497 --> 00:06:25.256
I don't want that my test file.

102
00:06:25.256 --> 00:06:28.590
So I have a JSON file, which is literally,

103
00:06:28.590 --> 00:06:34.626
I went to the Network tab in Chrome,
copied the response, put in a JSON file.

104
00:06:34.626 --> 00:06:37.832
Now I run against those tests
which are real ish, right?

105
00:06:37.832 --> 00:06:41.022
But I don't have to have a Docker
retainer up and running with temporal and

106
00:06:41.022 --> 00:06:42.215
all those kinds of things.

107
00:06:42.215 --> 00:06:47.086
I just wanna make sure that the things
I expect on the page are there, so

108
00:06:47.086 --> 00:06:48.250
on and so forth.

109
00:06:48.250 --> 00:06:52.943
Right, cuz we had a bug last week where
the height wasn't big enough on the table,

110
00:06:52.943 --> 00:06:56.359
which made the Virtual lists
library not render anything.

111
00:06:56.359 --> 00:07:01.741
Tests would have caught that a lot faster,
right, there's a test for now, but yeah.

112
00:07:01.741 --> 00:07:05.750
I don't necessarily need
the responses to be real to make sure

113
00:07:05.750 --> 00:07:09.927
that my virtual list library
didn't eat some of the responses.

114
00:07:09.927 --> 00:07:14.925
So there's a bunch of different kinda
footprints, you can just give it a URL and

115
00:07:14.925 --> 00:07:18.822
then save it, that will be nice for
just, what's it called?

116
00:07:18.822 --> 00:07:23.448
You can give the method in the URL, I only
want put requests that I'm looking for

117
00:07:23.448 --> 00:07:25.329
to this URL or delete requests.

118
00:07:25.329 --> 00:07:30.713
A route matcher is effectively a function
where it gives you the request and

119
00:07:30.713 --> 00:07:35.772
you JavaScript things until you figure
out what you want in this case.

120
00:07:35.772 --> 00:07:38.743
And refer to the docs or
some of the stuff.

121
00:07:38.743 --> 00:07:42.015
Second argument can either be
a static response as well or

122
00:07:42.015 --> 00:07:46.188
another route handler where we're
gonna give you the response object.

123
00:07:46.188 --> 00:07:50.079
If you've ever written any matter
like express with like request and

124
00:07:50.079 --> 00:07:54.325
response objects and the bodies and
the prams and stuff along those lines.

125
00:07:54.325 --> 00:07:58.106
It's basically you can you can
either just given an object or

126
00:07:58.106 --> 00:08:02.054
you can play with those and
get all JavaScript as well, right?

127
00:08:02.054 --> 00:08:05.795
So here's the static responses,
we could just say a body.

128
00:08:05.795 --> 00:08:09.092
I can give it a status code, right,
as you need these different things,

129
00:08:09.092 --> 00:08:11.159
as you're creating different situations.

130
00:08:11.159 --> 00:08:13.223
You can say what headers you want,
what bar do you want?

131
00:08:13.223 --> 00:08:18.605
What status code basically simulate,
all of these different cases, as well.

132
00:08:18.605 --> 00:08:23.470
So if you make a post to greatest-bands,
you can maybe have it 500 if they

133
00:08:23.470 --> 00:08:27.511
have Oasis in there, right, or
something along those lines.

134
00:08:27.511 --> 00:08:32.937
Again, with the request and
the response you can also like reply

135
00:08:32.937 --> 00:08:37.861
to it the same way you would do
an express basically your own

136
00:08:37.861 --> 00:08:42.906
little mock server for
the purposes of writing your tests.

137
00:08:42.906 --> 00:08:45.607
And I'm not gonna go
through all of this but for

138
00:08:45.607 --> 00:08:50.317
the different things that you might need
you can do all sorts of different stuff to

139
00:08:50.317 --> 00:08:52.410
simulate whatever your API works.

140
00:08:52.410 --> 00:08:56.692
Could you theoretically there's
also side out requests that allows

141
00:08:56.692 --> 00:09:00.990
you to fire them could you theoretically
test your API with Cypress.

142
00:09:00.990 --> 00:09:06.143
Yes, I'm not sure, I don't,
there's a reason why you might want to,

143
00:09:06.143 --> 00:09:09.791
I don't think you need to,
but you could, right?

144
00:09:09.791 --> 00:09:15.847
With a lot of these pieces as well I
think it is more interesting to mock and

145
00:09:15.847 --> 00:09:22.426
stub and make sure that the right requests
are being made or stub in a response.

146
00:09:22.426 --> 00:09:25.784
So spying either on the requests or
stubbing in a response so

147
00:09:25.784 --> 00:09:30.437
that I can figure out is my app doing the
right things cuz that's if the API breaks.

148
00:09:30.437 --> 00:09:32.972
Yeah, I'm like, that's not good.

149
00:09:32.972 --> 00:09:35.173
I'm also not gonna be
the one that fixes it.

150
00:09:35.173 --> 00:09:37.843
All right, and I don't need my builds
breaking because of that, right?

151
00:09:37.843 --> 00:09:40.732
I need to know for
my things doesn't matter.

152
00:09:40.732 --> 00:09:43.594
All right, so let's jump into a file.

153
00:09:43.594 --> 00:09:46.589
We'll see some of these in action for
a little bit.

154
00:09:46.589 --> 00:09:48.561
We'll do the parts that
are interesting to us.

155
00:09:48.561 --> 00:09:52.812
And then there's a second app where
you can take a little bit of this for

156
00:09:52.812 --> 00:09:53.902
a spin your self.

157
00:09:53.902 --> 00:10:01.407
So in my collection of apps, I have this
other one here called Pokemon search, yes.

158
00:10:01.407 --> 00:10:06.298
&gt;&gt; In terms of to a socket communication,
would you use

159
00:10:06.298 --> 00:10:11.426
a mock server or
spin up to cyphers instances somehow?

160
00:10:11.426 --> 00:10:13.119
&gt;&gt; I would do the mock
server at that point.

161
00:10:13.119 --> 00:10:17.317
Right, the same way that I have my dev
server running that I'm hitting, right,

162
00:10:17.317 --> 00:10:20.118
like that dev server,
if I have sockets I'm likely.

163
00:10:20.118 --> 00:10:21.918
I'm probably not talking,

164
00:10:21.918 --> 00:10:26.121
I wanna know that the things show
up in the socket at the right time.

165
00:10:26.121 --> 00:10:30.367
Right, I might use tasks to kick off
different sockets from happening, but

166
00:10:30.367 --> 00:10:35.429
in the same way, this is again running at
localhost 3000 and serving my application.

167
00:10:35.429 --> 00:10:40.965
I technically have a server running
that Cypress is going to visit,

168
00:10:40.965 --> 00:10:47.290
I would do something very similar for
any kind of WebSocket like work as well.

169
00:10:47.290 --> 00:10:50.653
Yeah, you don't have to send
out your requests in Cyprus,

170
00:10:50.653 --> 00:10:54.577
you could have a fake server that is
serving the API requests as well.

171
00:10:54.577 --> 00:10:58.132
That is something we did at Sendgrid,
worked to great effect,

172
00:10:58.132 --> 00:10:59.684
my buddy Alex worked on it.

173
00:10:59.684 --> 00:11:03.566
The product was called Neko,
the mock server was called Mako.

174
00:11:03.566 --> 00:11:05.798
I'm just really proud of his
naming convention there.

175
00:11:05.798 --> 00:11:07.157
You can do that as well.

176
00:11:07.157 --> 00:11:10.543
You don't have to do any of this if
you don't want to if it is easy for

177
00:11:10.543 --> 00:11:14.110
you to have a mock API server that you
spin up concurrently with your web

178
00:11:14.110 --> 00:11:17.024
development server,
that is a total option that works.

179
00:11:17.024 --> 00:11:21.669
I just not gonna cover because it's
not necessary Cypress is setting up

180
00:11:21.669 --> 00:11:23.536
an express server, right.

181
00:11:23.536 --> 00:11:26.423
There are libraries where you can
like record network responses and

182
00:11:26.423 --> 00:11:29.067
like playback the last good ones and
stuff along those lines.

183
00:11:29.067 --> 00:11:31.184
There's a bunch of ways
that you can handle this.

184
00:11:31.184 --> 00:11:33.367
We're gonna talk about the Cypress ones.

185
00:11:33.367 --> 00:11:37.823
So few things that this app does,
I can type in this box.

186
00:11:37.823 --> 00:11:42.480
As I do that, you can see that fires off
a network request that shows loading,

187
00:11:42.480 --> 00:11:46.724
it updates the query frame like I
was talking about with temporals UI.

188
00:11:46.724 --> 00:11:51.359
It shows you the results, and
if I click on that one it routes

189
00:11:51.359 --> 00:11:56.202
me with the query frame intact
to send an additional request.

190
00:11:56.202 --> 00:12:00.384
Right, and
also shows it here cuz I got carried away.

191
00:12:00.384 --> 00:12:04.949
I don't know why I did that,
so effectively it's sending

192
00:12:04.949 --> 00:12:09.608
requests on every keystroke
showing a loading indicator,

193
00:12:09.608 --> 00:12:14.917
showing the results has some routing
string if I refresh this page or

194
00:12:14.917 --> 00:12:20.745
even Changes to char not
in actual ciphers or

195
00:12:20.745 --> 00:12:25.634
as I'll probably get me
in trouble you can see

196
00:12:25.634 --> 00:12:29.636
that pre populates the input field.

197
00:12:29.636 --> 00:12:34.111
So it's basically taking a pattern
that we have in our real world app and

198
00:12:34.111 --> 00:12:36.434
I'm making it slightly different.

199
00:12:36.434 --> 00:12:40.225
I work on an open source project now, so
I don't have to worry about lawyers if I

200
00:12:40.225 --> 00:12:42.408
pull out real code anymore,
but it was also,

201
00:12:42.408 --> 00:12:46.220
I didn't need to explain what workflow
executions were at this exact moment.

202
00:12:46.220 --> 00:12:50.130
Pokemon seemed easier at the time.

203
00:12:50.130 --> 00:12:52.400
So it fills all of that in for us.

