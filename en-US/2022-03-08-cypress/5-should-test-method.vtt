WEBVTT

1
00:00:00.330 --> 00:00:05.356
One of the really great things about
cypress though is not only we'll

2
00:00:05.356 --> 00:00:10.034
go look for these things but
it turns out a lot of times when we're

3
00:00:10.034 --> 00:00:15.083
writing JavaScript we're doing
stuff this asynchronous, right?

4
00:00:15.083 --> 00:00:19.520
Maybe we got to make some API calls so
on and so forth.

5
00:00:19.520 --> 00:00:25.710
So let's go ahead and let's make
this something that will not happen.

6
00:00:25.710 --> 00:00:28.350
So we kind of say like there's no
such thing as a form of two M's.

7
00:00:29.550 --> 00:00:34.348
So go ahead, you'll see that it's
trying for a little bit, right,

8
00:00:34.348 --> 00:00:38.370
and it timed out after retrying for
four seconds.

9
00:00:38.370 --> 00:00:40.600
You can adjust this, it's a configuration.

10
00:00:40.600 --> 00:00:43.375
You can adjust it overall for cypress,

11
00:00:43.375 --> 00:00:47.690
you can adjust it on a per test
at runtime so on and so forth.

12
00:00:47.690 --> 00:00:51.408
But the nice part is four seconds seems
reasonable especially if you're running on

13
00:00:51.408 --> 00:00:53.710
localhost for your API to get back to you.

14
00:00:53.710 --> 00:00:56.840
And if it's an API you don't control,
we will talk about that.

15
00:00:56.840 --> 00:00:59.673
It's fine, but like four seconds,
seems relatively good for

16
00:00:59.673 --> 00:01:02.100
any kind of animation
that was going to happen.

17
00:01:02.100 --> 00:01:06.779
So it will continue trying to look for
it or basically run that selector for

18
00:01:06.779 --> 00:01:11.609
about four seconds or whatever you
decide it should be and then eventually,

19
00:01:11.609 --> 00:01:13.880
then it will give up.

20
00:01:13.880 --> 00:01:17.340
So that's super,
super interesting as well.

21
00:01:17.340 --> 00:01:22.281
The other thing that we're gonna
learn about this is while not

22
00:01:22.281 --> 00:01:25.705
having any assertions counts as success,

23
00:01:25.705 --> 00:01:30.420
not finding something on
the page counts as failure.

24
00:01:30.420 --> 00:01:34.320
So if it retries and it gives up,
that is a failure case.

25
00:01:34.320 --> 00:01:38.156
So for instance, the should is super
interesting if you want to say like,

26
00:01:38.156 --> 00:01:41.020
I should have this class or
should have whatever, right?

27
00:01:41.020 --> 00:01:45.480
There's a should but
it should exist, right?

28
00:01:45.480 --> 00:01:48.350
If it fails to find it, that's a failure.

29
00:01:48.350 --> 00:01:51.930
You can just kind of go forward with that
not necessarily have to worry about it.

30
00:01:51.930 --> 00:01:55.030
So here we can save it,
it will still fail in the same way.

31
00:01:58.068 --> 00:02:02.192
All right expected to find that we
get the same basic fact in there.

32
00:02:02.192 --> 00:02:03.695
If you want to say that like the,

33
00:02:03.695 --> 00:02:07.590
the alternate like that you might want
to do say that it should not exist.

34
00:02:07.590 --> 00:02:10.753
And that's exactly as
you think it might be.

35
00:02:15.292 --> 00:02:17.112
Mark.

36
00:02:17.112 --> 00:02:22.380
&gt;&gt; Was something like contains is there a
good way to handle multiple languages or.

37
00:02:23.680 --> 00:02:27.567
&gt;&gt; So with that you probably like you have
access to all so the question was for

38
00:02:27.567 --> 00:02:28.830
something like 10s.

39
00:02:28.830 --> 00:02:30.934
What if we were doing
internationalization, or

40
00:02:30.934 --> 00:02:33.049
we have multiple languages so
on, and so forth.

41
00:02:34.620 --> 00:02:38.324
With Cypress and we'll kind of
explore this as we go through,

42
00:02:38.324 --> 00:02:42.970
you do have access to like the window
object, the document object, the URL.

43
00:02:42.970 --> 00:02:47.331
So if that is maybe the language
that the browser is set to or

44
00:02:47.331 --> 00:02:52.493
something along those lines,
you can both set that and then verify it

45
00:02:52.493 --> 00:02:58.112
to make sure that okay, it should say
Add item if they're in like, end us.

46
00:02:58.112 --> 00:03:01.757
But if it's the browsers
currently set to German,

47
00:03:01.757 --> 00:03:05.500
then we should see this
other thing as well, right?

48
00:03:05.500 --> 00:03:09.224
So you can kind of control all those like
some of that will matter what how you have

49
00:03:09.224 --> 00:03:11.283
implemented that internationalization,

50
00:03:11.283 --> 00:03:14.680
whether it's based on the language
preferences of the browser.

51
00:03:14.680 --> 00:03:18.900
Whether like you do it through local
store or something along those lines.

52
00:03:18.900 --> 00:03:22.856
However the details of the implementation
matter a lot around how you've

53
00:03:22.856 --> 00:03:26.493
implemented the feature itself,
but you have access to everything

54
00:03:26.493 --> 00:03:30.740
in the browser from the window object
to the document object to the URL bar.

55
00:03:30.740 --> 00:03:33.862
So everything that you
had access to implement

56
00:03:33.862 --> 00:03:36.510
that you have access to test it as well.

57
00:03:37.610 --> 00:03:42.098
The other quick thing that we should
point out is like contains for

58
00:03:42.098 --> 00:03:47.700
instance that's just gonna look for
the word Add Item somewhere, right?

59
00:03:47.700 --> 00:03:50.400
You can also chain these.

60
00:03:50.400 --> 00:03:54.650
So you could say that the Add Item
should only be in the form or

61
00:03:54.650 --> 00:03:57.300
something along those lines.

62
00:03:57.300 --> 00:04:02.140
You can also jQuery has a find method
which says go find this one thing.

63
00:04:02.140 --> 00:04:06.885
And then within that element go find
through as children go find another one so

64
00:04:06.885 --> 00:04:10.380
you can scope these a little bit better,
as well.

65
00:04:10.380 --> 00:04:14.206
And you can also say
like in your assertion.

66
00:04:18.860 --> 00:04:23.645
You can also assert that a given element
that you found with its selector

67
00:04:23.645 --> 00:04:27.709
has a text or in the case of input
field value, you can look for

68
00:04:27.709 --> 00:04:31.200
actual markup, so on and so forth, right?

69
00:04:31.200 --> 00:04:34.580
And so the other thing to point
out here is if you were worried,

70
00:04:34.580 --> 00:04:38.675
about the fact that the should take
a series of strings, and you're like,

71
00:04:38.675 --> 00:04:41.180
how am I ever going to get autocomplete?

72
00:04:41.180 --> 00:04:43.170
I'm not memorizing that.

73
00:04:43.170 --> 00:04:47.250
You don't have to that's what that
reference above is this pulling

74
00:04:47.250 --> 00:04:50.340
the type script definition as well and
doing that.

