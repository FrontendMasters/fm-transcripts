WEBVTT

1
00:00:00.030 --> 00:00:04.834
There are pieces of this that
we could probably pull back into

2
00:00:04.834 --> 00:00:07.800
that echo chamber application.

3
00:00:07.800 --> 00:00:12.187
That one was still even we got to
the point where using commands to simplify

4
00:00:12.187 --> 00:00:13.720
the login process.

5
00:00:13.720 --> 00:00:17.831
We were seen in the database
like things were good, right,

6
00:00:17.831 --> 00:00:22.920
like life was pretty sweet, but
we were still filling in that form.

7
00:00:22.920 --> 00:00:25.400
Like we hid it from ourselves
with those commands.

8
00:00:25.400 --> 00:00:29.270
If we're watching our tests,
we saw it happen, right?

9
00:00:29.270 --> 00:00:33.410
And so this comes down to, and
is this always the right approach for you?

10
00:00:33.410 --> 00:00:37.730
I don't necessarily know it
all kind of depends, right?

11
00:00:37.730 --> 00:00:41.260
Like the app that I worked
on at SendGrid for instance,

12
00:00:41.260 --> 00:00:46.632
the way we handle our authentication logic
was, if the first FEI request you made,

13
00:00:46.632 --> 00:00:51.030
if you got a 403 forbidden then we
redirect you to the log in page.

14
00:00:51.030 --> 00:00:52.998
It's like a 12 year old app.

15
00:00:52.998 --> 00:00:55.460
That point so
much infrastructure is built on top of it.

16
00:00:55.460 --> 00:01:00.057
So the act of having a mock server
that gave you back not 403s,

17
00:01:00.057 --> 00:01:02.740
did solve that problem for us.

18
00:01:02.740 --> 00:01:06.080
You can argue,
did we still have a root problem?

19
00:01:06.080 --> 00:01:07.594
Sure, right, but for

20
00:01:07.594 --> 00:01:12.479
the purposes of testing some of
the stuff in my case, it totally worked.

21
00:01:12.479 --> 00:01:16.772
Obviously the login
functionality in that echo

22
00:01:16.772 --> 00:01:20.959
chamber app basically
checks the database for

23
00:01:20.959 --> 00:01:26.123
a plain text encoded password and
sets a cookie, right?

24
00:01:26.123 --> 00:01:30.970
If they have the cookie, when they go to
the post page, they're allowed to see it,

25
00:01:30.970 --> 00:01:34.670
if they don't have the cookie,
they are not allowed to see it.

26
00:01:34.670 --> 00:01:39.372
So one of the cases where I
think that you can do is simply

27
00:01:39.372 --> 00:01:43.779
either request a user from your database,
right?

28
00:01:43.779 --> 00:01:48.770
And set the cookie where now you can
skip the login screen completely.

29
00:01:48.770 --> 00:01:51.080
Right, or just set a cookie
that were like it's a pencil.

30
00:01:51.080 --> 00:01:55.590
They're like gonna post stuff and all of
those things, right, you probably need.

31
00:01:55.590 --> 00:01:57.419
It all depends on the problem
you're trying to solve, right?

32
00:01:57.419 --> 00:02:02.021
Whether it needs to be a cookie based
on a real user, as it would happen or

33
00:02:02.021 --> 00:02:05.015
the ability to just set
the cookie yourself but

34
00:02:05.015 --> 00:02:09.621
like Cypress does give you the ability
to set cookies and get cookies and

35
00:02:09.621 --> 00:02:13.140
read their values and
stuff along those lines.

36
00:02:13.140 --> 00:02:18.348
So here we start off by
signing in with the user.

37
00:02:18.348 --> 00:02:25.150
And we wanna say that you know,
they should be able to log in.

38
00:02:25.150 --> 00:02:29.302
So here they signed in.

39
00:02:29.302 --> 00:02:34.050
Once they have signed in the path
should be the post page, right?

40
00:02:34.050 --> 00:02:37.348
Because we know that happened before part.

41
00:02:37.348 --> 00:02:42.103
And then this case it is
base 64 encoded cookie.

42
00:02:42.103 --> 00:02:43.769
We can actually look at the cookie and

43
00:02:43.769 --> 00:02:46.580
make sure that what is in the cookie
is what we expect, right?

44
00:02:46.580 --> 00:02:50.867
So with Cypress you have access
to the cookies in this case,

45
00:02:50.867 --> 00:02:54.222
right be like okay,
when they signed in neat.

46
00:02:54.222 --> 00:02:58.308
The other thing that we are kind of
able to do as well is if we wanna skip

47
00:02:58.308 --> 00:03:01.770
the whole idea of filling out the form,
right?

48
00:03:01.770 --> 00:03:05.830
You can also just manually set that cookie
with whatever the data that you need.

49
00:03:05.830 --> 00:03:08.576
Now, depending on what you're doing,

50
00:03:08.576 --> 00:03:12.628
right you might have to send
a request to a service, right?

51
00:03:12.628 --> 00:03:17.421
But if you're marking out all of the API's
right that might be a thing that you

52
00:03:17.421 --> 00:03:21.992
can do or a lot of times sending that
resulting JSON request to like an end to

53
00:03:21.992 --> 00:03:26.490
end like to a real server is still faster
than visiting a bunch of pages and

54
00:03:26.490 --> 00:03:28.884
filling in a bunch of forums, right?

55
00:03:28.884 --> 00:03:31.490
So it's simply you fill in that form, and

56
00:03:31.490 --> 00:03:35.820
then it sends a fetch request to
a server and then you get a cookie set.

57
00:03:35.820 --> 00:03:39.288
You could just do that
like with a request and

58
00:03:39.288 --> 00:03:45.287
not have to go through the rigmarole of
filling out the form if you wanna do and

59
00:03:45.287 --> 00:03:49.670
just set the cookie and
do that in a before each.

60
00:03:49.670 --> 00:03:51.410
There, I'm not gonna get
all the way into it.

61
00:03:51.410 --> 00:03:56.531
There is an accent experimental
feature in ciphers is the only reason

62
00:03:56.531 --> 00:04:01.402
not gonna dig all the way into it
which is sign up session, right.

63
00:04:01.402 --> 00:04:06.716
And that gives you the ability to,
the same way memorization works or

64
00:04:06.716 --> 00:04:09.382
kind of caching functions works.

65
00:04:09.382 --> 00:04:14.167
Basically, it'll lets you persist
a cookie, local storage and

66
00:04:14.167 --> 00:04:17.480
session storage between test runs, right?

67
00:04:17.480 --> 00:04:20.710
If we're looking for the same thing,
it'll use it over and over again.

68
00:04:20.710 --> 00:04:24.049
It is experimental,
you do have to turn on a flag.

69
00:04:24.049 --> 00:04:27.353
We'll drop a link to the part of
the docs about it, so I'm not gonna

70
00:04:27.353 --> 00:04:31.130
get all the way into because it could
change and all of those kinds of things.

71
00:04:31.130 --> 00:04:32.640
But there was a way to save that.

72
00:04:32.640 --> 00:04:36.627
But also depending on either, encoding
[INAUDIBLE] cookie if you just wanna make

73
00:04:36.627 --> 00:04:38.840
sure they don't hit the redirect, right?

74
00:04:38.840 --> 00:04:42.270
And then you're gonna mark out all
the rest of the data, that will work.

75
00:04:42.270 --> 00:04:47.119
If you do need a legit user in order to do
stuff, right, it could make sense instead

76
00:04:47.119 --> 00:04:51.621
of filling out the forms, we're gonna
send the resulting JSON requests And

77
00:04:51.621 --> 00:04:53.620
we'll set the cookie like that.

78
00:04:53.620 --> 00:04:56.290
And then we'll go through all
the pieces that we need to do.

79
00:04:56.290 --> 00:04:59.425
The point of the matter is like when
you truly need end to end test,

80
00:04:59.425 --> 00:05:01.210
you should do end to end tests.

81
00:05:01.210 --> 00:05:04.705
When you're just trying to do ancillary
stuff about how your UI works for that

82
00:05:04.705 --> 00:05:08.414
user is logged in, you've all ready tested
that all the login like logic works and

83
00:05:08.414 --> 00:05:09.617
account creation stuff.

84
00:05:09.617 --> 00:05:14.400
Just getting the pieces you need
in place also work as again.

85
00:05:14.400 --> 00:05:20.849
Yeah, like there's a compelling part
to purity but at the cost of like,

86
00:05:20.849 --> 00:05:25.625
no one runs the test suite
because it takes six hours.

87
00:05:25.625 --> 00:05:29.366
But yeah, I've worked enough big
company to know that once to test,

88
00:05:29.366 --> 00:05:33.755
we get either a unreliable because too
many other things can go down, right?

89
00:05:33.755 --> 00:05:37.412
If you need the whole company in a docker
container, in order for it to work,

90
00:05:37.412 --> 00:05:40.715
it's gonna go down and
everyone's going to stop writing tests.

91
00:05:40.715 --> 00:05:44.655
And that's the kinda careful balance you
need to think about, which is like, cool.

92
00:05:44.655 --> 00:05:46.613
Like, what do I really need to do here?

93
00:05:46.613 --> 00:05:50.290
So in this case, we can set a cookie,
it's just a key value.

94
00:05:50.290 --> 00:05:54.673
In this case, encode token all
that does is JSON stringify and

95
00:05:54.673 --> 00:05:58.100
then base 64 and reverse for decode.

96
00:05:58.100 --> 00:06:01.466
So we can set the cookie and
now that will be sent in the back and

97
00:06:01.466 --> 00:06:03.140
forth responses as well.

98
00:06:03.140 --> 00:06:07.278
You can avoid the redirects that is

99
00:06:07.278 --> 00:06:12.707
absolutely an option for
you to use, right?

100
00:06:12.707 --> 00:06:17.010
If the cookie has the username you just
wanna make sure it's displayed in page.

101
00:06:17.010 --> 00:06:20.426
Set the cookie, make sure username you
put in there almost like picture data is

102
00:06:20.426 --> 00:06:22.140
displayed on the page.

103
00:06:22.140 --> 00:06:24.710
Do you need to go fill out
a signup form for that?

104
00:06:24.710 --> 00:06:25.967
No.
Do you need to go through and

105
00:06:25.967 --> 00:06:26.940
see the database?

106
00:06:26.940 --> 00:06:28.420
Probably not, right?

107
00:06:28.420 --> 00:06:30.143
You're just trying to make
sure that what you think.

108
00:06:30.143 --> 00:06:33.774
But if you need to access real data and
relations and all that kind of stuff and

109
00:06:33.774 --> 00:06:36.613
you're testing to see if like,
access management works,

110
00:06:36.613 --> 00:06:40.570
you either need to probably see the
database or do something a little more.

111
00:06:40.570 --> 00:06:42.930
All these are various tools
to solve different problems.

112
00:06:42.930 --> 00:06:45.090
I'm not saying you don't
need this one all the time.

113
00:06:45.090 --> 00:06:48.700
You do need this other one,
I'm saying for different sets of tests,

114
00:06:48.700 --> 00:06:53.057
there are different things that you need,
and arguably whatever is going to be both

115
00:06:53.057 --> 00:06:57.497
getting you the reliability that you seek,
with the least cost of time, cuz again,

116
00:06:59.974 --> 00:07:04.538
No one's gonna run a six hour test suite,
I've been there.

117
00:07:04.538 --> 00:07:07.163
As well, and so this is a case where like,

118
00:07:07.163 --> 00:07:10.650
you could fire off the request yourself,
right?

119
00:07:10.650 --> 00:07:13.850
We're here you fire off the request,
you get the response.

120
00:07:13.850 --> 00:07:17.610
You are then setting the cookie yourself
instead of filling in the login form.

121
00:07:17.610 --> 00:07:20.198
So this is using a real
database data at this point,

122
00:07:20.198 --> 00:07:23.100
instead of me putting in
some fake stuff up here.

123
00:07:23.100 --> 00:07:25.217
So setting your fake is super easy.

124
00:07:25.217 --> 00:07:26.833
It's just side by side cookie.

125
00:07:26.833 --> 00:07:31.816
Getting the user info from the database
and putting the parts that you need into

126
00:07:31.816 --> 00:07:35.455
the cookie and
doing it yourself also an option, right.

127
00:07:35.455 --> 00:07:39.293
That way you can test out different users
with different sets of permissions without

128
00:07:39.293 --> 00:07:42.427
having to sign in and sign out every
single one of them over and over and

129
00:07:42.427 --> 00:07:43.040
over again.

130
00:07:43.040 --> 00:07:51.073
And like this is a really great
candidate for a command, right?

131
00:07:51.073 --> 00:07:54.613
We can just put in the user
you're looking to go get and

132
00:07:54.613 --> 00:08:00.133
it will do the rest of this and Mike could
be called, get user what have you, right.

133
00:08:00.133 --> 00:08:05.679
And breaking that out into a command
yourself and you can kind of just,

134
00:08:05.679 --> 00:08:10.105
you can alias this stuff,
so on and so forth as well.

135
00:08:10.105 --> 00:08:12.345
But yeah, the cookies make it really easy.

136
00:08:14.025 --> 00:08:18.008
And you could basically take this
application has a real database behind it.

137
00:08:18.008 --> 00:08:21.890
We've seen you can see the database
have full end to end tests.

138
00:08:21.890 --> 00:08:26.287
Or you can stub all this stuff out
depending on what you're trying to do,

139
00:08:26.287 --> 00:08:26.802
right?

140
00:08:26.802 --> 00:08:29.930
You will make sure the right requests
are made, like we can see that as well.

