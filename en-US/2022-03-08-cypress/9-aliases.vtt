WEBVTT

1
00:00:00.170 --> 00:00:04.841
Let's talk a little bit about what
I just mentioned, which is aliases

2
00:00:04.841 --> 00:00:09.286
which will take a little bit of
the tediousness out of this as well.

3
00:00:09.286 --> 00:00:12.640
So if I go over to this one,

4
00:00:12.640 --> 00:00:17.071
we can go back and look at aliases.

5
00:00:17.071 --> 00:00:20.233
Aliases basically give you a way to say,

6
00:00:20.233 --> 00:00:24.706
I wanna give this thing a name,
so I can refer to it later.

7
00:00:24.706 --> 00:00:28.713
Effectively, giving us a way to get
the basic idea of a variable, but

8
00:00:28.713 --> 00:00:31.977
something that works with
the program model in Cyprus.

9
00:00:31.977 --> 00:00:35.666
Now, what I should mention is,

10
00:00:35.666 --> 00:00:42.919
mocha has the ability to put any
value you want on this, right?

11
00:00:42.919 --> 00:00:47.649
So before each you can say this
dot whatever equals a value and

12
00:00:47.649 --> 00:00:50.816
you can reference it wherever you want.

13
00:00:50.816 --> 00:00:54.160
That works, right?

14
00:00:54.160 --> 00:00:58.824
There is a caveat, which it doesn't
work with arrow functions because arrow

15
00:00:58.824 --> 00:01:00.916
functions are lexically scoped.

16
00:01:00.916 --> 00:01:05.656
Which means you don't have
access to this or it's own this.

17
00:01:05.656 --> 00:01:10.914
So if you want to write just
regular function declarations,

18
00:01:10.914 --> 00:01:13.595
rather than arrow functions,

19
00:01:13.595 --> 00:01:18.763
you can just say this dot a value and
get access to it as well.

20
00:01:18.763 --> 00:01:22.984
But if you like to use arrow functions, or
somebody in your team like to use arrow

21
00:01:22.984 --> 00:01:27.016
functions, or maybe just the ES lint
configuration, that was installed by

22
00:01:27.016 --> 00:01:31.364
whatever framework prefers to use arrow
functions, this is another way to do it.

23
00:01:31.364 --> 00:01:34.832
I personally also like this one more.

24
00:01:34.832 --> 00:01:39.082
So I'm not gonna kinda oversell it,
but unpacked and

25
00:01:39.082 --> 00:01:44.664
packed items were things that we
were kinda doing fairly frequently.

26
00:01:44.664 --> 00:01:46.366
Like, is this on the unpacked item list?

27
00:01:46.366 --> 00:01:49.294
Is it on the packed item list,
so on and so forth.

28
00:01:49.294 --> 00:01:54.401
You can see that anytime I have
a value in that Cypress chain,

29
00:01:54.401 --> 00:01:57.116
I can use the as method, right?

30
00:01:57.116 --> 00:02:00.392
I say as and I give it a name, right?

31
00:02:00.392 --> 00:02:02.907
Now, Cyprus is holding onto it.

32
00:02:02.907 --> 00:02:06.418
So if you look right here,
you can see that now if I get, and

33
00:02:06.418 --> 00:02:10.884
I put an at symbol before it, it will
get that value that I stored, right?

34
00:02:10.884 --> 00:02:16.140
So storing these selections and variables
will not work with the programming model,

35
00:02:16.140 --> 00:02:21.107
but we can basically label those values
and effectively store them on an object.

36
00:02:21.107 --> 00:02:24.863
In this case of this and
get access to them later.

37
00:02:24.863 --> 00:02:28.356
One of the things I will point out even
though we're not totally there yet,

38
00:02:28.356 --> 00:02:29.977
is that this works for selectors.

39
00:02:29.977 --> 00:02:33.092
It also works for when you're mocking and

40
00:02:33.092 --> 00:02:38.079
stubbing network requests and
a few other places as well, right?

41
00:02:38.079 --> 00:02:42.589
So you can be like, hey,
here's the stub that I have made for

42
00:02:42.589 --> 00:02:47.642
this API call, you might want to be
able to use it somewhere as well.

43
00:02:47.642 --> 00:02:52.682
You would give it an alias, and
then you can reference it using side

44
00:02:52.682 --> 00:02:57.550
I get with that at symbol, and
it will work in this case, right?

45
00:02:57.550 --> 00:03:00.797
So you're gonna have an example
where it's gonna hold on to it.

46
00:03:00.797 --> 00:03:05.991
One of the things you saw before,
we went through the each block,

47
00:03:05.991 --> 00:03:10.911
and we called the .text method
on the jQuery object, right?

48
00:03:10.911 --> 00:03:14.921
But then we lost all that
Cypress chaining ability.

49
00:03:14.921 --> 00:03:19.517
So we had to like wrap stuff, and that
was weird and it felt a little bit wrong.

50
00:03:19.517 --> 00:03:22.276
The other option you have is invoke,

51
00:03:22.276 --> 00:03:26.293
which we'll call a method
on the underlying object.

52
00:03:26.293 --> 00:03:29.689
So instead of doing list item
.text you can say invoke text and

53
00:03:29.689 --> 00:03:34.215
we'll call that method but still put,
basically wraps it again for you, right?

54
00:03:34.215 --> 00:03:38.534
Before we wrapped it ourselves invoke will
call the method take as return value wrap

55
00:03:38.534 --> 00:03:40.274
it so you can continue chaining.

56
00:03:40.274 --> 00:03:46.048
So here we're saying like, hey go get
the first item I wish is apparently

57
00:03:46.048 --> 00:03:52.878
on unpacked items find the label, find the
first one, alias it first items, right?

58
00:03:52.878 --> 00:03:58.001
Now we can call it at first
item will get its actual text,

59
00:03:58.001 --> 00:04:04.547
not the actual jQuery element,
will store that as a value called text.

60
00:04:04.547 --> 00:04:09.046
Or you find the checkbox of
that first item and click it.

61
00:04:09.046 --> 00:04:13.050
So in this case, we can kinda go ahead and
basically get the value,

62
00:04:13.050 --> 00:04:15.852
wrap it and
continue everywhere in the chain.

63
00:04:15.852 --> 00:04:21.096
The other one that we'll see a little
bit later is invoke works for methods.

64
00:04:21.096 --> 00:04:23.718
But sometimes you have
an object that has properties,

65
00:04:23.718 --> 00:04:25.375
there's another one called ITs.

66
00:04:25.375 --> 00:04:28.512
So just to kinda put that like
mental bookmark in there,

67
00:04:28.512 --> 00:04:31.872
invoke is if you wanna call a method and
continue the chain.

68
00:04:31.872 --> 00:04:35.064
It's as if you just wanna get
a particular property off that object and

69
00:04:35.064 --> 00:04:36.427
continue the chain, right?

70
00:04:36.427 --> 00:04:40.379
So for instance, requests and
responses, maybe I just want the body.

71
00:04:40.379 --> 00:04:43.673
So it'd be like, get the request its body,
and then I wanna make

72
00:04:43.673 --> 00:04:47.896
a bunch of assertions on the request body
of the response body, so on and so forth.

73
00:04:47.896 --> 00:04:48.990
I'd use these methods as well.

