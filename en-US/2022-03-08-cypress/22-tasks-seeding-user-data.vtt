WEBVTT

1
00:00:00.930 --> 00:00:03.810
Cypress has these things called tasks.

2
00:00:03.810 --> 00:00:06.954
And what tasks allow us to do is,

3
00:00:06.954 --> 00:00:12.545
effectively define certain
things that are gonna go on,

4
00:00:12.545 --> 00:00:16.631
that are gonna happen in node js, right?

5
00:00:16.631 --> 00:00:21.215
So things that are happening for
setting up our server, anything we need to

6
00:00:21.215 --> 00:00:25.605
configure outside the browser itself,
is contained inside of a task.

7
00:00:25.605 --> 00:00:29.204
And then within our tasks,
we tell Cypress, l go do the task,

8
00:00:29.204 --> 00:00:32.470
you see the database for
me go to the task like whatever.

9
00:00:32.470 --> 00:00:35.753
It's not just about seeding
databases that is the,

10
00:00:35.753 --> 00:00:38.570
version that I had to deal with, right?

11
00:00:38.570 --> 00:00:39.310
Most commonly, but

12
00:00:39.310 --> 00:00:42.710
like there's probably something in
your application that needs to happen.

13
00:00:42.710 --> 00:00:44.951
Some other servers I might
need to get spun up,

14
00:00:44.951 --> 00:00:49.250
or something along those lines that
is not necessarily in the browser.

15
00:00:49.250 --> 00:00:56.418
And so before in that plugins
directory that there was kinda on and

16
00:00:56.418 --> 00:01:00.861
config, and we could do stuff in there.

17
00:01:00.861 --> 00:01:06.330
So one of the events that you can listen
for, is any time side that task is called.

18
00:01:06.330 --> 00:01:09.808
And that will be called
with some test name,

19
00:01:09.808 --> 00:01:15.550
which is gonna match up here, and
then possibly I don't have a use case.

20
00:01:15.550 --> 00:01:17.872
So in possibly some set of arguments or
whatever, right?

21
00:01:17.872 --> 00:01:19.430
That you would need to do.

22
00:01:19.430 --> 00:01:20.673
This could be like what?

23
00:01:20.673 --> 00:01:24.179
Environment with what kind of
things that you might pass towards,

24
00:01:24.179 --> 00:01:26.560
whatever node call that you were doing.

25
00:01:26.560 --> 00:01:29.120
You can pass those in as well.

26
00:01:29.120 --> 00:01:35.410
Now, I should talk about
a kind of edge case right now.

27
00:01:35.410 --> 00:01:39.311
My prediction is that this is
not a permanent edge case,

28
00:01:39.311 --> 00:01:41.391
but it is a current edge case.

29
00:01:41.391 --> 00:01:45.823
Which is for probably most
apps that have been around for

30
00:01:45.823 --> 00:01:49.328
a little bit, Cypress probably good to go.

31
00:01:49.328 --> 00:01:52.960
If you're using TypeScript,
you're probably good to go.

32
00:01:52.960 --> 00:01:56.678
The interesting edge case is,

33
00:01:56.678 --> 00:02:02.260
if you are using ESM
modules in a node project.

34
00:02:02.260 --> 00:02:07.214
So, if you have that type colon
module that you wanna use import,

35
00:02:07.214 --> 00:02:08.846
instead of require.

36
00:02:08.846 --> 00:02:16.991
Like right now, it gets very angry about
that it will restart a plugins.js,

37
00:02:16.991 --> 00:02:20.900
a plugins.ts or plugins.coffee.

38
00:02:20.900 --> 00:02:23.300
That's the life you wanna live.

39
00:02:23.300 --> 00:02:25.415
That is an option as well, but like the,

40
00:02:25.415 --> 00:02:29.233
normally the way it works with
the ECMAScript module settings and node.

41
00:02:29.233 --> 00:02:33.401
Which is if you opt in to ECMAScript
modules, like import whatever from file,

42
00:02:33.401 --> 00:02:38.590
then if you wanna use the old require our
module exports, you have to call it CJS.

43
00:02:38.590 --> 00:02:42.250
And if you opt to the CJS, you have
to use MJS for the modules, right?

44
00:02:42.250 --> 00:02:45.656
Right now,
if you're using ESM modules in node,

45
00:02:45.656 --> 00:02:51.130
it doesn't know how to deal with that
because it wants to use modules.export.

46
00:02:51.130 --> 00:02:53.689
That's the way it's all wired up because,

47
00:02:53.689 --> 00:02:57.089
it's using I think Webpack
under the hood for all of this.

48
00:02:57.089 --> 00:03:00.318
And then like,
the conflict between what node expects,

49
00:03:00.318 --> 00:03:03.320
and what Cypress expects gets very angry.

50
00:03:03.320 --> 00:03:07.145
So a few options, one is keep your
project using common js out of the box,

51
00:03:07.145 --> 00:03:08.600
you don't have a problem.

52
00:03:10.320 --> 00:03:13.262
The other option is, if you type Script,

53
00:03:13.262 --> 00:03:17.180
you can call the TS file
everything will work.

54
00:03:17.180 --> 00:03:21.255
The other option like is you can just
keep this file as TypeScript, and

55
00:03:21.255 --> 00:03:22.850
that'll work as well.

56
00:03:22.850 --> 00:03:25.341
My sense is there's an open issue,

57
00:03:25.341 --> 00:03:28.590
my sense is this will be
a thing that is solved.

58
00:03:28.590 --> 00:03:31.044
So when we work on this application,

59
00:03:31.044 --> 00:03:36.290
because Falcon uses ESM modules out of
the box, and so a lot of other things.

60
00:03:36.290 --> 00:03:38.390
We're gonna use TypeScript,
the app is also in TypeScript.

61
00:03:38.390 --> 00:03:40.745
Anyways, it was there to do,
but in an older app,

62
00:03:40.745 --> 00:03:42.900
we're just using common js will work.

63
00:03:42.900 --> 00:03:46.317
My hope is that in a short enough
period of time that this bug,

64
00:03:46.317 --> 00:03:48.000
will have been resolved.

65
00:03:48.000 --> 00:03:52.163
But at this moment, if you see me in
a TypeScript file, that is why that's,

66
00:03:52.163 --> 00:03:55.080
there's no other like
big reason around that.

67
00:03:55.080 --> 00:03:57.930
My sense is that it will resolve itself.

68
00:03:57.930 --> 00:04:00.397
So, if we look in here, we can register,

69
00:04:00.397 --> 00:04:04.140
there's basically one task
event that we're listening for.

70
00:04:04.140 --> 00:04:07.647
So, anytime someone calls side a task,
right?

71
00:04:07.647 --> 00:04:10.530
We have a bunch of keys on an object.

72
00:04:10.530 --> 00:04:15.376
They're gonna give me some string, reset,
seed, cases that we're gonna use and

73
00:04:15.376 --> 00:04:18.290
then, it will do something in this case.

74
00:04:18.290 --> 00:04:22.970
And so we can kinda look, I have it
in here already in the code base.

75
00:04:22.970 --> 00:04:27.841
So let's go actually take a look at how,
it is in practice here, and so

76
00:04:27.841 --> 00:04:32.815
just for the SQLite database,
I'm using this library called Prisma.

77
00:04:32.815 --> 00:04:36.246
Which is just an abstraction over SQL,
we can define a schema, it gives you

78
00:04:36.246 --> 00:04:39.853
migrations basically meant that I didn't
have to write a bunch of SQL myself.

79
00:04:39.853 --> 00:04:43.398
Which was the end goal because, it's not
a course in SQL, it's a course in Cypress,

80
00:04:43.398 --> 00:04:45.240
so I didn't do any of that.

81
00:04:45.240 --> 00:04:49.230
We'll look at those files in a second, but
basically I'm importing the two files.

82
00:04:49.230 --> 00:04:52.354
And I am saying that I wanna
have a task called reset,

83
00:04:52.354 --> 00:04:54.930
which is gonna reset the database.

84
00:04:54.930 --> 00:04:59.870
I wanna have a task called seed,
which is going to seed the database.

85
00:04:59.870 --> 00:05:05.050
Now in my task, I can say, hey,
wipe the database clean, right?

86
00:05:05.050 --> 00:05:06.916
Or wipe the database clean,

87
00:05:06.916 --> 00:05:11.950
and put a bunch of stuff in the database
get me to a known stable state.

88
00:05:11.950 --> 00:05:17.287
For all these things, as I kinda mentioned
in the preamble, if you're willing to mock

89
00:05:17.287 --> 00:05:22.220
and stub all of your network requests,
you don't have to do this, right?

90
00:05:22.220 --> 00:05:24.811
But if you are trying to do l,
effectively,

91
00:05:24.811 --> 00:05:28.252
like a true end to end test
where it's hitting a database.

92
00:05:28.252 --> 00:05:31.974
And I'm using SQLite, mostly cuz I didn't
wanna make, y'all fight with Docker for

93
00:05:31.974 --> 00:05:34.220
this course or
something along those lines.

94
00:05:34.220 --> 00:05:38.883
But, you could theoretically spin up for
a adoption like Docker environment,

95
00:05:38.883 --> 00:05:41.188
I think the Docker file is in this repo.

96
00:05:41.188 --> 00:05:43.119
If you wanna do that instead,

97
00:05:43.119 --> 00:05:47.767
there is a version of this that works
to Postgres just as easily SQLite.

98
00:05:47.767 --> 00:05:51.882
But basically, this is calling
the things that we are important,

99
00:05:51.882 --> 00:05:54.480
they happen to have the same name.

100
00:05:54.480 --> 00:05:56.580
Now, it does need to return a value.

101
00:05:56.580 --> 00:06:00.319
We'll go look at one of these files
in a second, but basically it's using

102
00:06:00.319 --> 00:06:03.776
Prisma's Syntax for either deleting
everything in the database.

103
00:06:03.776 --> 00:06:06.770
Or deleting everything to database and
adding some stuff.

104
00:06:06.770 --> 00:06:11.300
But you'll notice that I'm calling them,
they are returning a promise, right?

105
00:06:11.300 --> 00:06:13.627
Your tasks do not have
to return a promise, but

106
00:06:13.627 --> 00:06:17.223
if you want something to like resolve
before you move to the next thing.

107
00:06:17.223 --> 00:06:20.626
Which is important for
me seeding the database, right?

108
00:06:20.626 --> 00:06:24.125
If it returns a promise
Cypress await move on, for

109
00:06:24.125 --> 00:06:28.307
that promise to resolve and
then move through everything.

110
00:06:28.307 --> 00:06:34.640
These files themselves are kind of like
outside the, core part of this workshop.

111
00:06:34.640 --> 00:06:37.740
I'll just show them to you, so
they're not complete black boxes.

112
00:06:38.870 --> 00:06:41.776
So for seeding it,
I am deleting all the posts,

113
00:06:41.776 --> 00:06:46.008
I'm deleting all the users in one
transaction, so it goes through.

114
00:06:46.008 --> 00:06:50.210
And then, I am putting in a first
example.com with a password, and

115
00:06:50.210 --> 00:06:52.550
some posts attached to it.

116
00:06:52.550 --> 00:06:54.580
And I'm creating a second user, right?

117
00:06:54.580 --> 00:06:56.978
Nothing particularly interesting here, and

118
00:06:56.978 --> 00:07:01.440
if you're calling it directly from
the command line, run that function.

119
00:07:01.440 --> 00:07:02.622
Otherwise you can import it,

120
00:07:02.622 --> 00:07:05.085
as one that gives you a little
bit better error stuff, right?

121
00:07:05.085 --> 00:07:08.530
That's again, that's just the syntax,
I'm using to see the database.

122
00:07:08.530 --> 00:07:12.400
The details for the app you work in, are
obviously gonna be a little bit different.

123
00:07:12.400 --> 00:07:14.070
But whatever you need to do,

124
00:07:14.070 --> 00:07:18.461
to get that kind of environment set up
the way that's supposed to be set up.

125
00:07:18.461 --> 00:07:23.930
You can basically write those files, they
happen to be in this Prisma folder for me.

126
00:07:23.930 --> 00:07:29.710
And then the more important part
is in your Cypress directory,

127
00:07:29.710 --> 00:07:36.210
in that index file, you can register
them all on the task event.

128
00:07:36.210 --> 00:07:40.580
As I mentioned before, there's basically
three ish things that this does.

129
00:07:40.580 --> 00:07:44.120
You have task events, you have all
sorts of before we run a task.

130
00:07:44.120 --> 00:07:47.157
After we run them all if you needed,
like transpile stuff,

131
00:07:47.157 --> 00:07:50.148
because you were l writing
everything in closure script.

132
00:07:50.148 --> 00:07:53.350
And you needed to like go transpile it,
before you run it.

133
00:07:53.350 --> 00:07:55.650
This is where you would write
all that functionality,

134
00:07:55.650 --> 00:07:58.806
will also look like Cypress has like
a page with a bunch of plugins, right?

135
00:07:58.806 --> 00:08:01.331
For all sorts of different things
that you might want to do,

136
00:08:01.331 --> 00:08:03.350
if you want to write cucumber tests.

137
00:08:03.350 --> 00:08:06.930
And have them like translated
into site like whatever, right?

138
00:08:06.930 --> 00:08:12.061
That's all this all the functionality that
question we got earlier in the workshop,

139
00:08:12.061 --> 00:08:15.490
happens kinda in this file in
the things that you pull in.

140
00:08:15.490 --> 00:08:19.830
For us, we're just gonna register
a bunch of tasks in here, right now.

141
00:08:19.830 --> 00:08:24.693
And so we have those in place,
so if I go back over to my

142
00:08:24.693 --> 00:08:29.240
test in this case,
let's say I go integration.

143
00:08:30.920 --> 00:08:35.480
And let's do this with the task,
I want to replace this.

144
00:08:35.480 --> 00:08:41.303
What I wanna do is, put the database
in a known state seeded with the users,

145
00:08:41.303 --> 00:08:43.903
I believe should exist, right?

146
00:08:43.903 --> 00:08:48.641
And with those users in place,
then what I wanna do is,

147
00:08:48.641 --> 00:08:52.670
go ahead and log one in or
create them, right?

148
00:08:52.670 --> 00:08:56.851
And so that's why I have two,
there's one that I'm gonna do, and

149
00:08:56.851 --> 00:08:58.630
one that you can do.

150
00:08:58.630 --> 00:09:01.018
So for instance, if I want to sign up,

151
00:09:01.018 --> 00:09:04.386
well then I probably want
to just reset the database.

152
00:09:04.386 --> 00:09:08.719
I don't care if there's any users in there
because, I'm gonna go fill in some fields

153
00:09:08.719 --> 00:09:12.108
I really don't want even risk
colliding with one in the database.

154
00:09:12.108 --> 00:09:15.653
Just empty out the database, we'll go
create a user, so on and so forth and

155
00:09:15.653 --> 00:09:16.796
then you can do sign in.

156
00:09:16.796 --> 00:09:21.522
Or set or any reset, we'll run seed
we'll change this to one of the known

157
00:09:21.522 --> 00:09:24.094
users that we can see in that seed file.

158
00:09:24.094 --> 00:09:27.256
And we'll kind just see both of them, so

159
00:09:27.256 --> 00:09:31.909
sign up this is like once we
have that plugins file in place.

160
00:09:31.909 --> 00:09:37.090
It's super simple, and
what we'll do is before each.

161
00:09:45.165 --> 00:09:50.110
All that we need to do,
is do side task in this case,

162
00:09:50.110 --> 00:09:53.227
we're gonna do reset, right?

163
00:09:53.227 --> 00:09:56.727
So now knowing that
it's an empty database,

164
00:09:56.727 --> 00:10:01.805
I could theoretically just do
first@example.com every time.

165
00:10:01.805 --> 00:10:07.229
And I know that it will work,
the database will be completely emptied

166
00:10:07.229 --> 00:10:12.200
out each time and then,
we'll go ahead and we'll make a user.

167
00:10:12.200 --> 00:10:16.810
Now, I'm not doing weird stuff with data
now, it still feels a little bit tedious.

168
00:10:16.810 --> 00:10:23.340
But we have that as well,
let's just go verify that all that works.

169
00:10:23.340 --> 00:10:28.718
I didn't make a boo somewhere along
the way, so we'll go with task spec.

170
00:10:33.985 --> 00:10:34.512
Right?

171
00:10:34.512 --> 00:10:37.851
You can see that they are signed in
this case, so they signed up and

172
00:10:37.851 --> 00:10:39.446
then they signed in with that.

173
00:10:39.446 --> 00:10:41.881
I can go ahead and rerun this test.

174
00:10:44.253 --> 00:10:48.384
And the database will still
be in that known good state.

175
00:10:50.284 --> 00:10:52.340
It's a little frozen again.

176
00:10:52.340 --> 00:10:55.539
So I'll probably kill it in a second and
restart it, but

177
00:10:55.539 --> 00:10:59.430
we are clearing out the database and
we are resetting it every time.

