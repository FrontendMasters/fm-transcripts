WEBVTT

1
00:00:00.420 --> 00:00:05.514
All right, let's go back in
to that larger application.

2
00:00:05.514 --> 00:00:10.820
This is the Cypress-examples
application that we have here.

3
00:00:11.820 --> 00:00:17.660
And like I said, let's kind of
see where we're demoing today.

4
00:00:17.660 --> 00:00:21.569
And I'm gonna close the other
Cypress runner at this point and

5
00:00:21.569 --> 00:00:23.540
go back over here.

6
00:00:23.540 --> 00:00:28.140
And I can go ahead,
I have it running on localhost:3000.

7
00:00:28.140 --> 00:00:30.640
So let's just take a look at
what we have to work with here.

8
00:00:30.640 --> 00:00:33.530
And then we'll begin writing
some tests around it together.

9
00:00:34.630 --> 00:00:37.164
So this says it should be running at 3000.

10
00:00:39.190 --> 00:00:44.456
We have not one, not two,
but six example applications

11
00:00:44.456 --> 00:00:49.050
to kind of give us the ability
to try out different

12
00:00:49.050 --> 00:00:54.093
things like little toast
notifications popping up,

13
00:00:54.093 --> 00:00:58.930
or ones that have login and
off, so on and so forth.

14
00:00:58.930 --> 00:01:01.720
That's why there's that SQLite dependency.

15
00:01:01.720 --> 00:01:03.751
So it's not just all hard coded data.

16
00:01:03.751 --> 00:01:08.568
We have one that just has every kind
of input field that you might ever

17
00:01:08.568 --> 00:01:11.286
want to deal with, so on and so forth.

18
00:01:11.286 --> 00:01:13.914
So we'll be kind of testing
these applications.

19
00:01:13.914 --> 00:01:19.280
It doesn't matter what they're written
in because Cypress doesn't care.

20
00:01:20.290 --> 00:01:24.112
You tell it to click a button,
it's gonna click a button,

21
00:01:24.112 --> 00:01:29.870
it doesn't matter if it's just HTML or if
you wrote it in jQuery or what have you.

22
00:01:29.870 --> 00:01:34.004
So we won't actually be working
on any of these applications,

23
00:01:34.004 --> 00:01:38.770
they kind of exist for us to explore and
play around with as we go through.

24
00:01:39.960 --> 00:01:45.160
So let's go over,
we have this first file here, which is,

25
00:01:45.160 --> 00:01:49.425
let me to go back over
to the cypress-examples,

26
00:01:49.425 --> 00:01:53.190
where we have just a describe block.

27
00:01:53.190 --> 00:01:57.463
One of the interesting things
about Cypress versus Jest is,

28
00:01:57.463 --> 00:02:02.320
a lot of the unit testing frameworks
will get angry with you if you have

29
00:02:02.320 --> 00:02:06.040
a test that has no assertions in it,
right?

30
00:02:06.040 --> 00:02:08.234
And that seems reasonable, right?

31
00:02:08.234 --> 00:02:09.798
Like yeah, you made me run this test, but

32
00:02:09.798 --> 00:02:12.780
you didn't check anything that
you probably made a boo-boo.

33
00:02:12.780 --> 00:02:17.841
But as we talked about with Cypress
before, it is very likely that

34
00:02:17.841 --> 00:02:22.717
you might wanna have it go visit a page,
and then you might wanna

35
00:02:22.717 --> 00:02:27.801
use the selector playground to
figure out what that selector is.

36
00:02:27.801 --> 00:02:29.099
And then you might add
another piece of code, and

37
00:02:29.099 --> 00:02:30.175
then you might wanna do the next thing and

38
00:02:30.175 --> 00:02:31.423
kind of build up that larger workflow,
yeah.

39
00:02:31.423 --> 00:02:35.402
&gt;&gt; I think you answered this just now but
to clarify what we're essentially doing

40
00:02:35.402 --> 00:02:39.636
is we are telling the test framework that
it's okay if we don't get a return value?

41
00:02:39.636 --> 00:02:40.314
&gt;&gt; Yep.

42
00:02:40.314 --> 00:02:41.323
&gt;&gt; Is that right?

43
00:02:41.323 --> 00:02:43.955
&gt;&gt; Yep,
cuz it will just kind of pause and wait.

44
00:02:43.955 --> 00:02:47.610
It takes the absence of failure
as success, right, just like me.

45
00:02:48.790 --> 00:02:52.392
So the other piece that we have
here is if you look up here,

46
00:02:52.392 --> 00:02:54.730
this is a JavaScript file.

47
00:02:54.730 --> 00:02:57.986
JavaScript is a programming language
that came slightly before TypeScript.

48
00:02:57.986 --> 00:03:03.236
But this allows you to have
all of the IntelliSense

49
00:03:03.236 --> 00:03:06.986
goodness in your JavaScript file.

50
00:03:06.986 --> 00:03:10.541
So you get a lot of the autocomplete and
stuff like that for free.

51
00:03:10.541 --> 00:03:15.308
One of the things if you
use Visual Studio code

52
00:03:15.308 --> 00:03:19.449
that I do is you might just wanna make for

53
00:03:19.449 --> 00:03:24.864
some of these things you're
doing very commonly.

54
00:03:24.864 --> 00:03:27.616
And I have the thing you can copy and
paste in the guides here.

55
00:03:27.616 --> 00:03:30.155
I just call it cyref, and that way,

56
00:03:30.155 --> 00:03:33.467
I can just put that at
the top of any given file.

57
00:03:33.467 --> 00:03:36.471
Some of the selectors,
I also just have shortcuts for

58
00:03:36.471 --> 00:03:38.555
because I don't enjoy typing that.

59
00:03:38.555 --> 00:03:42.831
Yeah, you can get it from
the selector playground as well, but

60
00:03:42.831 --> 00:03:46.958
if you know what it is and
you don't wanna type in any of that.

61
00:03:46.958 --> 00:03:50.940
Let's talk about selectors for a moment.

62
00:03:50.940 --> 00:03:55.077
There's kind of like
a hierarchy of selectors and

63
00:03:55.077 --> 00:04:00.210
which ones are good and
which ones are less good, right?

64
00:04:00.210 --> 00:04:05.343
Saying that you wanna get the first
paragraph tag on the page is

65
00:04:05.343 --> 00:04:12.110
probably great right now and increasingly
less good as time goes on, right?

66
00:04:12.110 --> 00:04:16.995
Even class names like
a lot of modern frameworks

67
00:04:16.995 --> 00:04:22.246
are going to turn your very
descriptive class names

68
00:04:22.246 --> 00:04:27.024
into hashes and
garbage class names, right?

69
00:04:27.024 --> 00:04:31.256
This application is built, for instance,
in Svelte, which the Tailwind classes go

70
00:04:31.256 --> 00:04:35.311
through, but any of the kind of bespoke
ones get turned into unique identifiers so

71
00:04:35.311 --> 00:04:37.320
that code splitting works, right?

72
00:04:37.320 --> 00:04:40.010
The things that try to make
the web more performant, right?.

73
00:04:40.010 --> 00:04:43.894
So relying on class names or relying
on things that happened to be there for

74
00:04:43.894 --> 00:04:47.153
style purposes,
is probably also a little bit problematic,

75
00:04:47.153 --> 00:04:50.870
because they might get changed by
someone updating a design, right?

76
00:04:50.870 --> 00:04:55.504
So basically, yeah, just hoping that
it's the fourth paragraph on the page,

77
00:04:55.504 --> 00:04:57.430
probably not great.

78
00:04:57.430 --> 00:05:02.063
Hoping that it has a class of purple
border to find it, also probably not great

79
00:05:02.063 --> 00:05:07.001
because the purple will become blue,
your tests will break, and you'll be sad.

80
00:05:07.001 --> 00:05:09.170
And I'm not gonna feel that bad.

81
00:05:09.170 --> 00:05:12.922
So moving up, IDs, right?

82
00:05:12.922 --> 00:05:17.985
If you're styling based on IDs, again,
they could change cuz the style but

83
00:05:17.985 --> 00:05:22.176
IDs are if you're using them for
the purposes of testing work,

84
00:05:22.176 --> 00:05:26.392
the general kind of recommendation
is to use data attributes.

85
00:05:26.392 --> 00:05:33.701
So in HTML, you can do data dash
whatever you want and equals something.

86
00:05:33.701 --> 00:05:38.184
And the idea being that no one is going
to change a data-test when they're

87
00:05:38.184 --> 00:05:42.612
changing the style, right, or
data-cypress or something like that.

88
00:05:42.612 --> 00:05:47.685
Like it says, hey, this identifier
is on here because I'm using it

89
00:05:47.685 --> 00:05:52.767
to get a hook on that particular
element when I'm writing my tests.

90
00:05:52.767 --> 00:05:58.560
So that is kind of a way to
go about doing that as well.

91
00:05:58.560 --> 00:06:04.046
When we are writing our first test,
the very first thing that

92
00:06:04.046 --> 00:06:09.680
we need to do is we need to tell
Cypress where to go, right?

93
00:06:09.680 --> 00:06:16.830
It will poke any button or
change any input that you want on a page,

94
00:06:16.830 --> 00:06:24.730
but it can't acquiesce what page
it should go to to do that, right?

95
00:06:24.730 --> 00:06:27.480
So we do need to tell
Cypress to visit a page.

96
00:06:27.480 --> 00:06:32.195
Just real quick, if we go into the
cypress.json, you can see in this case,

97
00:06:32.195 --> 00:06:34.490
that I do have a baseUrl set, right?

98
00:06:34.490 --> 00:06:38.965
So I do not need to type in
the fully qualified domain, but

99
00:06:38.965 --> 00:06:45.121
if you were to spin up Cypress for
yourself and just type in /cats/whatever,

100
00:06:45.121 --> 00:06:51.020
right, it's not gonna necessarily
work cuz you didn't configure that.

101
00:06:51.020 --> 00:06:55.899
So that is one thing that I did
on your behalf in this case.

102
00:06:55.899 --> 00:06:58.063
So that's just kinda to point
it out as we go through.

103
00:06:58.063 --> 00:07:01.379
So the very first thing to do
is we need to go visit a page.

104
00:07:01.379 --> 00:07:07.304
Now we have describe, we have it blocks,
we also have beforeEach.

105
00:07:07.304 --> 00:07:09.946
I want you to take a wild
guess when beforeEach runs.

106
00:07:09.946 --> 00:07:12.064
&gt;&gt; Runs before each test.

107
00:07:12.064 --> 00:07:13.512
&gt;&gt; Runs before each test, perfect.

108
00:07:13.512 --> 00:07:16.685
So we've got beforeEach, and

109
00:07:16.685 --> 00:07:21.480
that will take a function
of what we wanna do.

110
00:07:21.480 --> 00:07:26.996
So generally speaking, in a lot of cases,
you want to visit probably in a given

111
00:07:26.996 --> 00:07:33.300
file, you're probably visiting the same
page, the same part of your application.

112
00:07:33.300 --> 00:07:38.607
So beforeEach is a really good place
to put that because it will go.

113
00:07:38.607 --> 00:07:41.653
Otherwise, you're gonna do
it in every test, right?

114
00:07:41.653 --> 00:07:46.119
The other interesting part is you
can nest these describe blocks,

115
00:07:46.119 --> 00:07:48.681
which we'll do a little bit later on.

116
00:07:48.681 --> 00:07:52.327
If you nest them, the beforeEach
will happen in the order of nesting.

117
00:07:52.327 --> 00:07:56.284
So beforeEach, we'll do cy.visit.

118
00:07:56.284 --> 00:08:01.048
And we're gonna go visit
that first application,

119
00:08:01.048 --> 00:08:07.826
which is ('/ jetsetter'),
which we'll take a look at in a second.

120
00:08:07.826 --> 00:08:09.534
And it will now go every time and

121
00:08:09.534 --> 00:08:12.772
it will visit that page when
this test suite runs, right?

122
00:08:12.772 --> 00:08:16.576
And we could say it should, right?

123
00:08:16.576 --> 00:08:21.747
We're gonna do the thing where we
don't necessarily know what we

124
00:08:21.747 --> 00:08:26.917
wanna do just yet but like go fire
up the page, pull it up in front of

125
00:08:26.917 --> 00:08:31.925
me with that selector playground and
stuff along those lines.

126
00:08:31.925 --> 00:08:33.572
And then we'll kind of figure out what the
first thing that we want to do is, right?

127
00:08:33.572 --> 00:08:36.210
Like, this could be ideally you're
writing this test maybe before

128
00:08:36.210 --> 00:08:38.073
you start even working on the feature,
right?

129
00:08:38.073 --> 00:08:41.193
Like, I have a bug that
I need to fix next week,

130
00:08:41.193 --> 00:08:45.920
where if there's a hash in the URL,
it doesn't render appropriately

131
00:08:45.920 --> 00:08:50.430
because it thinks it's a hash in
the URL versus the identifier.

132
00:08:50.430 --> 00:08:54.804
So I might just start with a test where
I put one of those links on the page and

133
00:08:54.804 --> 00:08:58.760
go visit it to make sure that
it works correctly, right?

134
00:08:58.760 --> 00:09:02.447
But this case,
we don't necessarily have a plan just yet,

135
00:09:02.447 --> 00:09:04.900
I mean we do but not that I've told you.

136
00:09:04.900 --> 00:09:06.807
So lets just get that kind of in place.

137
00:09:06.807 --> 00:09:09.480
We'll say that it should, and again,

138
00:09:09.480 --> 00:09:13.207
this should is just a pattern
you don't necessarily,

139
00:09:13.207 --> 00:09:18.733
if you don't care that you're test read
English, you can do whatever you want.

140
00:09:18.733 --> 00:09:23.503
So in this case, we'll do mpx cypress
open, just like we did before

141
00:09:29.217 --> 00:09:34.210
And we'll give it a second and there is
Cypress and is pulling up my entire file.

142
00:09:34.210 --> 00:09:39.073
Now if you really wanted to test me, you
could go run all 29, it will take a while.

143
00:09:39.073 --> 00:09:41.949
Someone's like, yeah, I'm doing it.

144
00:09:41.949 --> 00:09:46.542
They pass, some of them are skipped but
they pass.

145
00:09:46.542 --> 00:09:50.351
We'll go into this first-flight one,
which is the file that we had open.

146
00:09:50.351 --> 00:09:53.310
As you add files,
that list will automatically update.

147
00:09:53.310 --> 00:09:54.853
Everything is rocking and rolling.

148
00:09:54.853 --> 00:09:59.094
And you can see that the application
pulls up, and like that test,

149
00:09:59.094 --> 00:10:00.548
technically passed.

150
00:10:00.548 --> 00:10:03.869
Again, in the absence of failure,
it passes.

