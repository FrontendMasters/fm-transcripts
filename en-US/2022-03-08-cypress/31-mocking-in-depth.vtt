WEBVTT

1
00:00:00.120 --> 00:00:02.350
So he starts to pull everything
we've seen together.

2
00:00:02.350 --> 00:00:04.670
And then we'll kinda do
one little fun little,

3
00:00:04.670 --> 00:00:06.590
bonus thing that just has a wow factor.

4
00:00:08.390 --> 00:00:13.640
But in this file you can say that,
for post request, we yeah.

5
00:00:13.640 --> 00:00:18.950
For very simple, just getting the posts,
we might use a fixture that we saw.

6
00:00:18.950 --> 00:00:23.383
This is the same data that is
seated in the database that we have

7
00:00:23.383 --> 00:00:24.671
a fixture for it.

8
00:00:24.671 --> 00:00:28.628
This is all the stuff that we
see to the database with but

9
00:00:28.628 --> 00:00:31.980
in the case of just using JSON data.

10
00:00:31.980 --> 00:00:35.083
It all depends on what
you're trying to accomplish.

11
00:00:35.083 --> 00:00:38.413
If we wanna say, hey, take the posts
request and this is what we wanna send

12
00:00:38.413 --> 00:00:42.253
back without putting the database when we
don't have a reliability on that either.

13
00:00:42.253 --> 00:00:45.446
We wanna make sure they're cool.

14
00:00:45.446 --> 00:00:49.063
We get back a response we're supposed
to put it on in the DOM that will

15
00:00:49.063 --> 00:00:53.710
happen right because we're intercepting a
post request and putting in there as well.

16
00:00:53.710 --> 00:00:59.685
Kind of again we have some
aliases as we go through.

17
00:00:59.685 --> 00:01:04.435
This just grabs the first post and
aliases while using that side wrap

18
00:01:04.435 --> 00:01:09.117
that we saw right you might just
have your own fixture for that too.

19
00:01:09.117 --> 00:01:14.307
But showing you that you have that
programmability as we saw also earlier

20
00:01:14.307 --> 00:01:18.986
in the workshop looking down a little
bit cool we grab the posts and

21
00:01:18.986 --> 00:01:22.245
then we should see that
the previews happen.

22
00:01:22.245 --> 00:01:25.825
Have the number of posts that we think,
right?

23
00:01:25.825 --> 00:01:28.695
So we are going and visiting that page.

24
00:01:28.695 --> 00:01:37.285
We know that the getting all the posts
has been stubbed with this fixture,right?

25
00:01:37.285 --> 00:01:39.968
So however many posts
were in that fixture,

26
00:01:39.968 --> 00:01:43.455
make sure what you showed on
the page is the same, right?

27
00:01:43.455 --> 00:01:47.290
This gives you that programmability
around your fixtures Is right?

28
00:01:47.290 --> 00:01:51.397
So you can actually if you had it in
a JavaScript object towards the top,

29
00:01:51.397 --> 00:01:52.900
yeah what it is then?

30
00:01:52.900 --> 00:01:57.580
Is just side I get a previous should
have length posts.length, right?

31
00:01:57.580 --> 00:02:01.640
This is so if you need to get at that
underlying fixture Write that then will

32
00:02:01.640 --> 00:02:06.157
always drop you in to the real JavaScript
or jQuery, which is a JavaScript thing,

33
00:02:06.157 --> 00:02:09.056
I guess Cypress also real JavaScript,
what I mean?

34
00:02:09.056 --> 00:02:14.002
It'll drop you down those layers of
abstraction, as you kind of go through,

35
00:02:14.002 --> 00:02:17.654
right, kind of again pulling
the rest of this together,

36
00:02:17.654 --> 00:02:21.625
right, you can again drop in
towards that interception.

37
00:02:21.625 --> 00:02:25.488
You could also say this is
to get it separately so

38
00:02:25.488 --> 00:02:29.455
that we can check it against
the path name right.

39
00:02:29.455 --> 00:02:33.873
So go to the first one click on
it wait for something to hit

40
00:02:33.873 --> 00:02:38.985
the single posted API and
then make sure the path name, right?

41
00:02:38.985 --> 00:02:42.605
Is the one that we went to go search for
right?

42
00:02:44.115 --> 00:02:48.513
Again this is all things we've kind
of covered hitting Enter should also

43
00:02:48.513 --> 00:02:50.402
hit the create post API.

44
00:02:50.402 --> 00:02:54.842
This is not using about then it's
using its syntax that we saw before.

45
00:02:54.842 --> 00:03:00.358
And it should contain what
you typed in the box.

46
00:03:00.358 --> 00:03:07.942
All right, that's in the request if
you wanted the response as well.

47
00:03:09.630 --> 00:03:13.268
Making sure that the Delete
button sends a delete request and

48
00:03:13.268 --> 00:03:16.380
the patch button sends
a patch request right?

49
00:03:16.380 --> 00:03:19.677
So these things that you don't necessarily
need to test that the database is doing

50
00:03:19.677 --> 00:03:21.610
that ideally,
you have server tests, right?

51
00:03:21.610 --> 00:03:25.710
You're just saying did you do the thing
that that button was supposed to do?

52
00:03:25.710 --> 00:03:28.170
Let the server tests worry about
whether the server did it.

53
00:03:28.170 --> 00:03:32.601
Now you can also use Sign Up request to
send requests and then use site request to

54
00:03:32.601 --> 00:03:36.966
pull stuff back out and test your server
as well if that is something you own and

55
00:03:36.966 --> 00:03:39.070
control on your team, right?

56
00:03:39.070 --> 00:03:43.437
All of these kinds of features
are there again going through again so

57
00:03:43.437 --> 00:03:47.880
when I click the edit button right,
it should show me the form.

58
00:03:47.880 --> 00:03:54.000
When I hit the update button,
it should send a patch request right?

59
00:03:54.000 --> 00:03:57.410
When I hit the Delete button,
it should send a delete request.

60
00:03:57.410 --> 00:03:59.790
I don't necessarily, if I'm supposed
to wait for that response or

61
00:03:59.790 --> 00:04:02.100
remove it from the page,
that might be another test that I write.

62
00:04:02.100 --> 00:04:07.865
Right but I probably wouldn't reach in
with a task to check the database right,

63
00:04:07.865 --> 00:04:12.010
that, or that those are the tests for
my server, right.

64
00:04:12.010 --> 00:04:16.783
But again, you can kind of figure out
lots of things that are kind of not to

65
00:04:16.783 --> 00:04:21.321
say possible with unit tests,
right because you will again probably

66
00:04:21.321 --> 00:04:24.840
stumble out of stuff at
the unit test as well.

67
00:04:24.840 --> 00:04:29.645
But real tedious and
hope that you have almost perfect

68
00:04:29.645 --> 00:04:33.710
dependency injection in your code, right?

69
00:04:33.710 --> 00:04:39.008
Yes if you are if you and everyone on your
team writes perfect code all the time,

70
00:04:39.008 --> 00:04:41.669
maybe you could unit test it all right.

71
00:04:41.669 --> 00:04:46.599
But I think this is really also
a really great option if you don't have

72
00:04:46.599 --> 00:04:48.138
a perfect code base.

73
00:04:48.138 --> 00:04:51.020
But you'd to not have
it's one of those things,

74
00:04:51.020 --> 00:04:56.680
your tests find your bugs your customers
find your bugs, your choice, right?

75
00:04:56.680 --> 00:04:59.857
Yeah.
&gt;&gt; Would you say that this is also a good

76
00:04:59.857 --> 00:05:04.476
way to pull your testing into
an environment that better

77
00:05:04.476 --> 00:05:08.380
approximate It's
&gt;&gt; Yeah, because it's just driving

78
00:05:08.380 --> 00:05:14.221
the browser, right and again, some of that
kind of dropping to the JavaScript objects

79
00:05:14.221 --> 00:05:19.890
that we have is there when we need it,
but I would treat it with caution right?

80
00:05:19.890 --> 00:05:23.958
Because the more your tests have to
know about the underlying mechanics of

81
00:05:23.958 --> 00:05:24.623
your code.

82
00:05:24.623 --> 00:05:28.399
The more likely it is that you might
change as underlying mechanics and

83
00:05:28.399 --> 00:05:31.310
that might become problematic, Mark.

84
00:05:31.310 --> 00:05:34.899
&gt;&gt; So Cypress is good for
automating regression testing then?

85
00:05:34.899 --> 00:05:36.740
&gt;&gt; Yeah, yep.

86
00:05:36.740 --> 00:05:39.499
And there are tools Applitools and

87
00:05:39.499 --> 00:05:44.510
percy.io, which also do
visual regression testing.

88
00:05:44.510 --> 00:05:50.706
Right, which is basically we'll kind of
see in a little bit that you can run your

89
00:05:50.706 --> 00:05:56.480
CI/CD process it will take screenshots
when we use Cypress dot run.

90
00:05:56.480 --> 00:05:59.632
And it will you can basically
say cool compare this

91
00:05:59.632 --> 00:06:04.600
screenshot with the last time Cypress
itself isn't necessarily doing this.

92
00:06:04.600 --> 00:06:07.602
There are other tools you can use in
conjunction with Cypress that will not

93
00:06:07.602 --> 00:06:10.084
only be regression testing for
the functionality, right.

94
00:06:10.084 --> 00:06:13.993
But also literal visual regression
testing did you meaningfully

95
00:06:13.993 --> 00:06:16.700
change the way the layout
of this page was?

96
00:06:16.700 --> 00:06:19.880
Because you made a Flexbox booboo, right?

97
00:06:19.880 --> 00:06:23.940
Or something along those lines and
catching those things.

98
00:06:23.940 --> 00:06:29.728
And again with a regression testing
it's always good because there

99
00:06:29.728 --> 00:06:35.223
are places where you might decide
I wasn't even touching that.

100
00:06:35.223 --> 00:06:37.937
But I changed something somewhere and

101
00:06:37.937 --> 00:06:43.615
a change the layout of this nested view
that I didn't even think to look at having

102
00:06:43.615 --> 00:06:48.810
that test coverage basically stops
your paycheck from going off right?

103
00:06:48.810 --> 00:06:54.300
Which is the ultimate goal, [LAUGH] Is to
not be stressed out I'll be being on call.

104
00:06:54.300 --> 00:06:57.354
&gt;&gt; Yeah.
Are there also tools for what would be

105
00:06:57.354 --> 00:07:03.062
tagged text logging as it's going
through things if you wanted to capture,

106
00:07:03.062 --> 00:07:09.110
say the state of the test, and
this is very similar to taking pictures.

107
00:07:09.110 --> 00:07:10.590
&gt;&gt; Yeah.

108
00:07:10.590 --> 00:07:15.620
So Cypress actually has a tool around
that that's kind of similar so.

109
00:07:15.620 --> 00:07:18.510
Cypress also is a company, right?

110
00:07:18.510 --> 00:07:22.370
So the other part, if we kind of,
I'll show you real quick.

111
00:07:22.370 --> 00:07:26.340
And I think we can even set up
a quick CI/CD thing at some point.

112
00:07:26.340 --> 00:07:31.060
But you can actually
connect it to a dashboard.

113
00:07:31.060 --> 00:07:34.030
Will actually show you which
ones your tests are flaky,

114
00:07:34.030 --> 00:07:37.930
which ones pass all the time,
what the statistics around that are.

115
00:07:37.930 --> 00:07:39.272
All the kind of screenshots and

116
00:07:39.272 --> 00:07:42.110
kind of give you all
the analytics around those tests.

117
00:07:42.110 --> 00:07:43.910
There's a pretty generous free tier.

118
00:07:43.910 --> 00:07:48.624
We can set up that original app with
something as well and kind of see that in

119
00:07:48.624 --> 00:07:53.360
place in a few minutes as well, but
you can connect it and get a lot of that.

120
00:07:53.360 --> 00:07:54.900
Like I said for open source projects.

121
00:07:54.900 --> 00:07:57.753
I think there's a pretty
generous free tier for

122
00:07:57.753 --> 00:08:00.970
private repos I there's
a cost structure around it.

123
00:08:00.970 --> 00:08:04.510
That is how the company
seeks to make money.

124
00:08:05.890 --> 00:08:09.098
But yeah, they provide tooling
around that, which is kind,

125
00:08:09.098 --> 00:08:11.330
I think part of the business proposition.

