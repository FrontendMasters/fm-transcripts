WEBVTT

1
00:00:00.000 --> 00:00:04.789
Okay, so, your job now is to try
a slightly different app that kind of

2
00:00:04.789 --> 00:00:09.344
takes a few of the things that we
talked about and puts it in place.

3
00:00:09.344 --> 00:00:13.269
So we have another app that, again,
make some network requests to honestly,

4
00:00:13.269 --> 00:00:16.690
it's a JSON file under the hood
I'm not gonna lie to you.

5
00:00:16.690 --> 00:00:20.150
But you can say how many
facts that you want.

6
00:00:22.180 --> 00:00:27.850
I did not intend to make a pun,
that you hit Fetch to get dog facts.

7
00:00:29.800 --> 00:00:35.210
I'm sorry, but then when I realized that
I could have changed it, and I didn't.

8
00:00:35.210 --> 00:00:37.404
So, I guess I did intend to make a pun,

9
00:00:37.404 --> 00:00:41.540
depending on how you think
about the time space continuum.

10
00:00:41.540 --> 00:00:45.720
So you gotta go,
it will load in a certain number of facts.

11
00:00:45.720 --> 00:00:48.700
This one also changes
the title of the page.

12
00:00:48.700 --> 00:00:53.331
And so, if you wanna try the site title,
see if it changes appropriately,

13
00:00:53.331 --> 00:00:57.021
you can do that, as well, but
it pulls in a number of facts.

14
00:00:57.021 --> 00:01:00.844
Now, this is randomizing
it from a large JSON file.

15
00:01:00.844 --> 00:01:05.589
If you wanted to, you could theoretically
create a picture where you're always gonna

16
00:01:05.589 --> 00:01:08.061
get the same facts and
verify that your test.

17
00:01:08.061 --> 00:01:11.065
Always depends on the problem you're
trying to solve, it doesn't really matter.

18
00:01:11.065 --> 00:01:13.194
In this case, you wanna make
sure you got the right number,

19
00:01:13.194 --> 00:01:15.039
what the content is doesn't
necessarily matter.

20
00:01:15.039 --> 00:01:17.158
But maybe your current user, right?

21
00:01:17.158 --> 00:01:20.108
Is always the same user with the same kind
of preferences or stuff along those lines.

22
00:01:20.108 --> 00:01:27.085
But it's a chance to kinda go in and solve
some of the problems in there yourself.

23
00:01:27.085 --> 00:01:30.684
Ideally, when they click the button,
we should go and

24
00:01:30.684 --> 00:01:34.095
make sure that the API request was made,
right?

25
00:01:34.095 --> 00:01:36.525
That's we saw that version
of that in the last example.

26
00:01:36.525 --> 00:01:39.982
It's a little bit different this time, but

27
00:01:39.982 --> 00:01:45.060
we should adjust the amount
when the select is changed.

28
00:01:45.060 --> 00:01:50.730
So, anything along those lines should
show the correct number of facts, right?

29
00:01:50.730 --> 00:01:52.772
That could either be you
testing the response, or

30
00:01:52.772 --> 00:01:54.720
you testing what's rendered on the page.

31
00:01:54.720 --> 00:01:58.210
I'll kinda leave it to whichever one seems
like a more interesting challenge to you.

32
00:01:58.210 --> 00:02:00.872
And that we've changed the title,

33
00:02:00.872 --> 00:02:07.110
the Clear button puts us back into this
empty state that you can see, as well.

34
00:02:07.110 --> 00:02:11.334
Some different things to kinda try out
depending on which problems like to show

35
00:02:11.334 --> 00:02:12.742
up in your code base, so,

36
00:02:12.742 --> 00:02:16.085
you kinda wanna simplified
version to wrap your head around.

37
00:02:16.085 --> 00:02:19.340
So, why don't you spend about five
minutes playing around with that, and

38
00:02:19.340 --> 00:02:21.303
we'll do a few of the ones
that interest you,

39
00:02:21.303 --> 00:02:23.591
together we'll kinda look through them,
as well.

40
00:02:28.382 --> 00:02:33.027
So, a lot of these are kind of extended
practice around some things we saw

41
00:02:33.027 --> 00:02:33.949
previously.

42
00:02:33.949 --> 00:02:39.266
The biggest difference, instead of typing,
we are actively clicking

43
00:02:39.266 --> 00:02:43.884
to trigger the API fetch, but
the end result is same, right?

44
00:02:43.884 --> 00:02:48.858
We are stubbing it, or we're spying
on it and making sure that, in fact,

45
00:02:48.858 --> 00:02:50.476
it was called, right?

46
00:02:50.476 --> 00:02:56.927
The empty state should no longer exist as
soon as they've hit the button, right?

47
00:02:56.927 --> 00:03:04.327
These things that we're kinda trying
to make sure of as we go through.

48
00:03:04.327 --> 00:03:09.348
If they click for, we want to, and
there's I could probably simplify this

49
00:03:09.348 --> 00:03:15.023
one a little bit, too, with the its syntax
that we saw before that I typed, as well.

50
00:03:15.023 --> 00:03:18.770
Where we could even say,
cy.wait on that API.

51
00:03:18.770 --> 00:03:24.610
Then or its, exactly what I did before,
its('request.url').

52
00:03:24.610 --> 00:03:28.036
And you kinda see what's
really happening there.

53
00:03:28.036 --> 00:03:31.161
We know that the interception is
the thing getting passed through.

54
00:03:31.161 --> 00:03:33.770
Its is calling just basically
the same properties

55
00:03:33.770 --> 00:03:36.327
on a nested object that we
would see in this case.

56
00:03:36.327 --> 00:03:40.490
And we could say should contain,
include, match, whatever you want.

57
00:03:59.148 --> 00:03:59.669
Write, as well.

58
00:03:59.669 --> 00:04:04.222
All right, these are basically,
this is a little bit more explicit, but

59
00:04:04.222 --> 00:04:07.686
this is probably easier and
cleaner to write, as well.

60
00:04:07.686 --> 00:04:12.134
Let's set that one only and
see it kinda in action.

61
00:04:12.134 --> 00:04:19.288
So, we've got the dog facts in that case,
all right, cool.

62
00:04:19.288 --> 00:04:23.212
So, first one worked.

63
00:04:23.212 --> 00:04:26.840
Yeah, cuz it didn't fire again,
cuz we didn't click the button twice.

64
00:04:31.449 --> 00:04:35.646
Right, so, you can see that gets called
once, gets called the second time, but

65
00:04:35.646 --> 00:04:38.329
both things are effectively
testing the same way.

66
00:04:38.329 --> 00:04:43.279
One of the questions before is,
with selectors I know

67
00:04:43.279 --> 00:04:48.440
that contains will not pass
it if doesn't contain it.

68
00:04:48.440 --> 00:04:51.404
Actually I know that
works with DOM elements,

69
00:04:51.404 --> 00:04:55.070
I don't really know if that
works with just strings.

70
00:04:55.070 --> 00:04:55.984
So, let's find out together.

71
00:05:01.384 --> 00:05:05.717
Yeah, so, contains will kinda be
a terminal one that you don't have to

72
00:05:05.717 --> 00:05:07.896
necessarily have the showed on it.

73
00:05:07.896 --> 00:05:11.171
If it's a select, if you're testing the
DOM, but if we're getting an actual string

74
00:05:11.171 --> 00:05:13.958
going through, it's gonna go through
the regular assertion process.

75
00:05:13.958 --> 00:05:20.164
Which is, yeah, so
we've learned that one together.

76
00:05:20.164 --> 00:05:22.188
I was just like,
why do I always do it like this?

77
00:05:22.188 --> 00:05:24.720
Cuz I probably got bitten once
in the very beginning, and

78
00:05:24.720 --> 00:05:26.317
then developed the muscle memory.

79
00:05:26.317 --> 00:05:28.791
And then since I forgot
why I do it like I do it.

80
00:05:28.791 --> 00:05:30.562
But now I relearned it, so did you.

81
00:05:30.562 --> 00:05:37.026
Cool, so, yeah, we can change the amount,
we should get the right results.

82
00:05:37.026 --> 00:05:40.279
Again, testing the things that
are kind of under our control.

83
00:05:40.279 --> 00:05:44.474
If you needed to really get
the same logic as the server,

84
00:05:44.474 --> 00:05:48.858
I usually test the request to
make sure it was the request.

85
00:05:48.858 --> 00:05:50.486
I trust that the server
is doing the right thing.

86
00:05:50.486 --> 00:05:52.590
I wanna make sure that I'm
doing the right thing.

87
00:05:52.590 --> 00:05:56.029
Could you use that kind of function that
takes the request and the response, and

88
00:05:56.029 --> 00:06:00.030
then slices it and implement your
server logic again in your test suite?

89
00:06:00.030 --> 00:06:03.215
You could, all right, then is your
test suite gonna need a test suite?

90
00:06:03.215 --> 00:06:04.556
It is, right?

91
00:06:04.556 --> 00:06:09.157
And so, while there might
be a part of your job is to

92
00:06:09.157 --> 00:06:12.677
resist the urge to do stuff like that.

93
00:06:12.677 --> 00:06:17.239
Because it feels good,
but you're just moving

94
00:06:17.239 --> 00:06:22.256
the problem around in the sake
of just trying to get to

95
00:06:22.256 --> 00:06:27.060
what feels like purity but
might not actually be.

