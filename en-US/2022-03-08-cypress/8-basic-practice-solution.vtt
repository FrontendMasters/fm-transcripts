WEBVTT

1
00:00:00.000 --> 00:00:05.432
So we've got a bunch of empty tests and
I guess if I go over to this by via

2
00:00:05.432 --> 00:00:12.009
the rule that we talked about earlier they
will all pass because they will not fail.

3
00:00:12.009 --> 00:00:15.864
That is a good enough reason for
them to pass.

4
00:00:15.864 --> 00:00:22.098
That said they don't spiritually pass,
they only technically pass.

5
00:00:22.098 --> 00:00:25.788
So let's actually go ahead and
play around with some of this.

6
00:00:25.788 --> 00:00:29.864
I alluded to this before
which is out of the box

7
00:00:29.864 --> 00:00:33.848
right now this add item
button is disabled.

8
00:00:33.848 --> 00:00:37.553
But as soon as you put something
in there it becomes enabled and

9
00:00:37.553 --> 00:00:39.562
adds itself to the page, right?

10
00:00:39.562 --> 00:00:44.465
Again, the nice part about Cypress
pausing at the end of a given test run

11
00:00:44.465 --> 00:00:49.040
is you then get the page in that state and
you can kinda go visit it and

12
00:00:49.040 --> 00:00:51.450
figure out what you wanna do next.

13
00:00:51.450 --> 00:00:55.047
So if we tried to just click on
that button by ourselves, right?

14
00:00:55.047 --> 00:00:57.778
So let's go over or grab it.

15
00:00:57.778 --> 00:00:59.673
So stay test add item.

16
00:00:59.673 --> 00:01:02.968
You see there's only one of them on
the page which is super helpful.

17
00:01:02.968 --> 00:01:06.663
And we'll go ahead and
we'll just click on it.

18
00:01:10.193 --> 00:01:12.127
Right and
you can see it's trying to click on it.

19
00:01:12.127 --> 00:01:16.024
It's gonna try for
about four seconds to click on it, and

20
00:01:16.024 --> 00:01:20.099
then it gives up and
then runs through the rest of the tests.

21
00:01:20.099 --> 00:01:23.433
So you can force it if
you really wanted to,

22
00:01:23.433 --> 00:01:27.243
because again it is using
JavaScript to do this.

23
00:01:27.243 --> 00:01:32.012
But we don't want to because
we wanna test to make sure

24
00:01:32.012 --> 00:01:34.774
that it is in fact not working.

25
00:01:34.774 --> 00:01:35.944
So that's cool, but

26
00:01:35.944 --> 00:01:40.446
we know that if we type something in there
we should be able to make it pass, right?

27
00:01:40.446 --> 00:01:42.352
So let's go ahead and
grab that element again.

28
00:01:42.352 --> 00:01:43.919
That's the new item input.

29
00:01:43.919 --> 00:01:47.284
Just copy that over.

30
00:01:47.284 --> 00:01:48.968
And we can paste it in.

31
00:01:48.968 --> 00:01:54.355
And in here we're gonna
type recite good attitude.

32
00:01:54.355 --> 00:01:56.887
Good attitude.

33
00:01:56.887 --> 00:02:00.679
One of the things I could do in this test
I do a lot of my unit tests as well is

34
00:02:00.679 --> 00:02:04.949
like values like this that I want to like
type and then also verify those screen.

35
00:02:04.949 --> 00:02:08.948
That is a good argument for
something I should just store

36
00:02:08.948 --> 00:02:13.629
in a variable because I don't want
my ID the beginning of the day,

37
00:02:13.629 --> 00:02:16.797
I will spell all the words
right both times.

38
00:02:16.797 --> 00:02:20.130
Towards the end of my workday, I will
not spell one of those words, right.

39
00:02:20.130 --> 00:02:24.090
And I will think that my code is broken
because I spelled out a tude with

40
00:02:24.090 --> 00:02:29.027
like three T's, right or something along
those lines where my code works just fine.

41
00:02:29.027 --> 00:02:31.088
It's just my brain that doesn't.

42
00:02:31.088 --> 00:02:34.383
So we could say like this case item.

43
00:02:34.383 --> 00:02:40.187
And the reason I point this out is to kind
of point out that this will totally work.

44
00:02:40.187 --> 00:02:45.496
And I can verify that it's on the page,
so I could say,

45
00:02:45.496 --> 00:02:49.998
like, even item, and
that will go through and

46
00:02:49.998 --> 00:02:54.284
I can see that it passes
in this case as well.

47
00:02:54.284 --> 00:02:57.607
I can store values in variables.

48
00:02:57.607 --> 00:03:00.359
It's one of the other subtle ways.

49
00:03:00.359 --> 00:03:05.757
that the site I get is a little bit
different than just a jQuery selector.

50
00:03:05.757 --> 00:03:08.527
Because again,
all this code is a synchronous,

51
00:03:08.527 --> 00:03:10.632
it just looks synchronous, right?

52
00:03:10.632 --> 00:03:15.498
But effectively all of those Cy dot
whatever methods are effectively kind

53
00:03:15.498 --> 00:03:18.887
of going on to a stack and
be run one after the other.

54
00:03:18.887 --> 00:03:23.499
Which means what I can't do is that old
move where we do a jQuery selector and

55
00:03:23.499 --> 00:03:28.261
then we stored in a variable with like
dollar sign whatever I was looking for,

56
00:03:28.261 --> 00:03:28.787
right?

57
00:03:28.787 --> 00:03:33.112
Because in those cases you will not
have access to that value because these

58
00:03:33.112 --> 00:03:36.391
are really just getting put
on a stack somewhere else and

59
00:03:36.391 --> 00:03:40.257
executed yeah as it works the queue
as it runs through your tests.

60
00:03:40.257 --> 00:03:43.511
We will talk about how to
get around that in like

61
00:03:43.511 --> 00:03:46.354
literally the next section after this.

62
00:03:46.354 --> 00:03:51.366
But for now just know that you can store
regular primitive values in variables and

63
00:03:51.366 --> 00:03:56.674
they will have closure scope And that will
work, but the actual like Cypress chains,

64
00:03:56.674 --> 00:04:00.378
you kinda need to think about
the chain all the way through.

65
00:04:00.378 --> 00:04:04.939
The other thing that I will kinda we'll
see in a little bit as well is that,

66
00:04:04.939 --> 00:04:08.691
if I do need the underlying raw
value of like, for instance,

67
00:04:08.691 --> 00:04:13.254
this jQuery selector, or whatever,
or for the other things that we use,

68
00:04:13.254 --> 00:04:16.808
if it's the path name, and
I literally want the string.

69
00:04:16.808 --> 00:04:21.499
You can do a dot then where you'll,
I don't know what I

70
00:04:21.499 --> 00:04:26.504
would get after typing I think
I get the element this case.

71
00:04:26.504 --> 00:04:30.282
Where you'll actually get the underlying
value that's in that chain.

72
00:04:30.282 --> 00:04:32.857
It looks like a promise,
it feels like a promise.

73
00:04:32.857 --> 00:04:34.814
It's technically not a promise, right?

74
00:04:34.814 --> 00:04:38.567
Again, you'll notice that we're not
writing a wait before every single one of

75
00:04:38.567 --> 00:04:39.475
these sentences.

76
00:04:39.475 --> 00:04:41.712
As if we you know you might
see in like puppeteer or

77
00:04:41.712 --> 00:04:45.325
something along those lines because
Cypress is taking care of all that for us.

78
00:04:45.325 --> 00:04:50.425
And so that is once you get that mental
model in place very convenient it can be

79
00:04:50.425 --> 00:04:55.444
saving you a lot of extra typing and
a lot of headache, but there is that kind

80
00:04:55.444 --> 00:05:00.786
of just mental framework that you need to
have there to understand that anything

81
00:05:00.786 --> 00:05:06.078
that's in a chain that Cyprus is calling,
it needs to run through that chain.

82
00:05:06.078 --> 00:05:07.969
You can get to the underlying
value with it then,

83
00:05:07.969 --> 00:05:11.076
but it's not technically a promise,
it's why you don't need to use a weight.

84
00:05:11.076 --> 00:05:11.745
Yeah.

85
00:05:11.745 --> 00:05:16.432
&gt;&gt; When you say chain are you brings
to the seems like the Cy.methods.

86
00:05:16.432 --> 00:05:16.981
&gt;&gt; Yep.

87
00:05:16.981 --> 00:05:17.638
&gt;&gt; That scope.

88
00:05:17.638 --> 00:05:21.962
&gt;&gt; Yeah, get the input,
and we chain on, dot type.

89
00:05:21.962 --> 00:05:25.854
You could do additional things,
you could be, okay, go ahead and

90
00:05:25.854 --> 00:05:29.327
get all of the checkboxes, and
then go get me the first one or

91
00:05:29.327 --> 00:05:32.826
the last now you'll with that
chain begin to scope it down.

92
00:05:32.826 --> 00:05:35.857
&gt;&gt; And this execute something
like a promise dot all.

93
00:05:35.857 --> 00:05:39.102
&gt;&gt; With the shiny methods
where it it just grabs them

94
00:05:39.102 --> 00:05:39.974
and-
&gt;&gt; Like,

95
00:05:39.974 --> 00:05:41.694
spiritually yeah,
&gt;&gt; Yes.

96
00:05:41.694 --> 00:05:43.041
Okay.
&gt;&gt; Yeah, technically no.

97
00:05:43.041 --> 00:05:44.425
&gt;&gt; [LAUGH]
&gt;&gt; Right.

98
00:05:44.425 --> 00:05:46.903
Yeah, cool.

99
00:05:46.903 --> 00:05:51.089
So then we want to say not only
will it put it on the page, but

100
00:05:51.089 --> 00:05:56.480
we want to make sure that by default
one goes on the unpacked items, right?

101
00:05:56.480 --> 00:05:58.205
If I'm adding it on there as well so

102
00:05:58.205 --> 00:06:02.012
in this case we kind of can take pieces
of this and we'll talk about how to take

103
00:06:02.012 --> 00:06:06.139
common things that are happening in your
code and make abstractions around them.

104
00:06:06.139 --> 00:06:09.005
Like for
instance signing up a user we're login and

105
00:06:09.005 --> 00:06:12.473
user is something that maybe you
wanna like manually do once,

106
00:06:12.473 --> 00:06:16.622
but you might need to do it for
every test that's starting fresh, right?

107
00:06:16.622 --> 00:06:18.633
There's a way to go about doing that.

108
00:06:18.633 --> 00:06:23.978
We're just not totally there yet,
but we will get there as well.

109
00:06:23.978 --> 00:06:27.118
So before I clicked on that button,
which will submit the form.

110
00:06:27.118 --> 00:06:31.209
The other thing that I can also do is I
can just go get the form element in this

111
00:06:31.209 --> 00:06:33.462
case, there's one of them on the page.

112
00:06:33.462 --> 00:06:37.052
Might have a slider as well, but
I go ahead, I can just submit it.

113
00:06:39.471 --> 00:06:43.856
And then what I wanna do is
see that the unpacked items

114
00:06:43.856 --> 00:06:48.853
contains the word that I typed
into the text field, right?

115
00:06:48.853 --> 00:06:53.544
So it's a little, before we're just like,
does it appear on the page Now I'm like,

116
00:06:53.544 --> 00:06:56.494
did it appear inside of
a particular parent element?

117
00:06:56.494 --> 00:06:59.021
All right, so we're getting
a little bit more granular here.

118
00:07:01.962 --> 00:07:06.498
So here we'll say this one I happen
to know off the top my head is items

119
00:07:06.498 --> 00:07:07.306
unpacked.

120
00:07:07.306 --> 00:07:11.357
So go find that unpacked items list
kind of just to see this one over here.

121
00:07:11.357 --> 00:07:14.561
And we want to see that when they add
a new item and submit that form that

122
00:07:14.561 --> 00:07:18.167
appears there not just anywhere on
the page, but where it's supposed to go.

123
00:07:18.167 --> 00:07:20.719
You know, we can make additional
assertions about that as well.

124
00:07:20.719 --> 00:07:21.846
But you can see I can,

125
00:07:21.846 --> 00:07:25.878
I can chain that contains just like I
was alluding to earlier with that item.

126
00:07:25.878 --> 00:07:32.052
And then it runs through the remainder of
the test that don't really do anything.

127
00:07:32.052 --> 00:07:36.891
All right cool and
it should be the last item on the list.

128
00:07:36.891 --> 00:07:40.915
And this is where the question before
about the chaining stuff goes along.

129
00:07:40.915 --> 00:07:43.592
We're getting increasingly
granular about this so this.

130
00:07:43.592 --> 00:07:47.992
So I am going to do a little
bit of copy paste action here.

131
00:07:47.992 --> 00:07:54.033
And take what I have at this point and we
wanna make sure that it is the last one.

132
00:07:54.033 --> 00:07:56.881
So go ahead, get me.

133
00:07:59.090 --> 00:08:02.199
This data test and
find me the list items in there, right?

134
00:08:02.199 --> 00:08:05.079
So this is the same way jQuery
works where I can start to

135
00:08:05.079 --> 00:08:07.909
at any CSS selector
effectively works in this case.

136
00:08:07.909 --> 00:08:14.330
So go to the overall list of unpacked
items, get me all of the list items.

137
00:08:14.330 --> 00:08:19.610
Now we have multiple ones and this point,
I'm looking in that scope, right?

138
00:08:19.610 --> 00:08:22.388
And go get me the last one.

139
00:08:24.412 --> 00:08:26.241
Let me verify that chain is in there.

140
00:08:29.664 --> 00:08:32.784
And it passes, you can see it there for
a flash if I skipped or

141
00:08:32.784 --> 00:08:34.043
paused the other ones.

142
00:08:34.043 --> 00:08:37.620
One of the things you'll notice is I
have a Visual Studio Code extension.

143
00:08:37.620 --> 00:08:42.397
There's like three or four of them,
actually, if you want to see the most

144
00:08:42.397 --> 00:08:47.195
recommended ones, they're on the Cypress,
Doc's web page, as well.

145
00:08:48.600 --> 00:08:49.531
So you can see,

146
00:08:49.531 --> 00:08:54.130
but they're the same thing works in
a lot of other unit testing frameworks.

147
00:08:54.130 --> 00:08:57.990
Again, it's just smoke and shy,
where you can do it or describe that skip.

148
00:08:57.990 --> 00:09:02.284
Or it.only and
if you put it .only on an int or describe,

149
00:09:02.284 --> 00:09:06.590
it will only run that test or
only run that block of tests.

150
00:09:06.590 --> 00:09:09.280
If you put a skip,
it will skip those tests, right?

151
00:09:09.280 --> 00:09:13.446
So if you're working on one particular
test that's being problematic, and

152
00:09:13.446 --> 00:09:17.609
you don't want to run all the other ones,
you could theoretically, I mean,

153
00:09:17.609 --> 00:09:19.357
you should use an only or a skip.

154
00:09:19.357 --> 00:09:24.480
The only reason that I didn't do that in
this case is because we have so many empty

155
00:09:24.480 --> 00:09:30.040
tests like having you manually delete
skip on every single test felt rude.

156
00:09:30.040 --> 00:09:35.237
So I didn't do it, but in your own day to
day as you're writing one test at a time,

157
00:09:35.237 --> 00:09:38.383
you might definitely
find yourself doing that.

158
00:09:38.383 --> 00:09:39.770
All right, cool.

159
00:09:39.770 --> 00:09:42.560
So now we want to see with
this filter field, right?

160
00:09:42.560 --> 00:09:46.656
It's a different describe block and
describe blocks, they're useful for

161
00:09:46.656 --> 00:09:49.410
the before each and
stuff along those lines.

162
00:09:49.410 --> 00:09:56.410
But the major purpose for our case is they
sort and organize my tests for me, right?

163
00:09:56.410 --> 00:09:56.910
That's it.

164
00:09:58.400 --> 00:10:02.804
In this particular case, I could have
a different before each and here,

165
00:10:02.804 --> 00:10:07.079
you can see this is nested inside of
my major one as I alluded to before.

166
00:10:07.079 --> 00:10:09.772
So they're all still visit the page but

167
00:10:09.772 --> 00:10:14.762
then after that I'm using describe
blocks predominantly for sorting.

168
00:10:14.762 --> 00:10:20.148
All right, so we want to type
something into the filter field and

169
00:10:20.148 --> 00:10:26.040
then make sure that things that
match that are on the page.

170
00:10:26.040 --> 00:10:29.139
So again, what I would do
in this case is I would go,

171
00:10:29.139 --> 00:10:33.640
I would find the filter field where
we have data test filter items.

172
00:10:33.640 --> 00:10:34.900
Go ahead, copy that over.

173
00:10:38.020 --> 00:10:45.538
And now in here we'll type, .There

174
00:10:48.772 --> 00:10:52.599
Tooth, one other things I'm
well aware is that, yeah,

175
00:10:52.599 --> 00:10:57.332
I accidentally imported something
because I have auto import set up.

176
00:10:57.332 --> 00:11:01.471
So I just deleted that real quick so
I'll type in the word tooth.

177
00:11:01.471 --> 00:11:04.725
And then if I just look at
the dummy data on the page,

178
00:11:04.725 --> 00:11:09.345
I can see that there is toothbrush and
toothpaste, they go hand in hand,

179
00:11:09.345 --> 00:11:14.060
packing one without the other,
it's just not a good thing.

180
00:11:14.060 --> 00:11:17.253
All right, so I want to verify that
both of them are on the page and

181
00:11:17.253 --> 00:11:19.760
then we'll probably test
the opposite of that.

182
00:11:19.760 --> 00:11:21.880
But let's go and
this is what we talked about before.

183
00:11:21.880 --> 00:11:23.650
I don't need to make an assertion.

184
00:11:23.650 --> 00:11:28.560
I think that should be there because the
act of them being there is good enough.

185
00:11:28.560 --> 00:11:33.668
So here we'll say that side contains
toothbrush could I scope it

186
00:11:33.668 --> 00:11:40.022
to just the unpacking of the packed items
I guess, but the filter works on both.

187
00:11:40.022 --> 00:11:42.498
So you could scope it down
a little bit as well.

188
00:11:42.498 --> 00:11:46.469
Sometimes it's, yeah, you can get
super technical about how you want but

189
00:11:46.469 --> 00:11:48.108
if anything moves on the page,

190
00:11:48.108 --> 00:11:51.655
your tests gonna break while
the functionality didn't, right?

191
00:11:51.655 --> 00:11:56.423
So a lot of this is a game of loose
enough that things aren't breaking for

192
00:11:56.423 --> 00:12:01.443
silly reasons, but strict enough that
it's actually testing the thing.

193
00:12:01.443 --> 00:12:05.494
And that will be a recurring theme
that we talk about today as well.

194
00:12:05.494 --> 00:12:08.136
So we'll verify that that is on the page.

195
00:12:12.068 --> 00:12:14.599
You can see that one still passes.

196
00:12:14.599 --> 00:12:17.530
We'll run through real quick so
you can watch it all.

197
00:12:18.940 --> 00:12:21.630
Play through all of it, and
then the blank ones that go as well.

198
00:12:23.040 --> 00:12:26.130
So then we wanna verify
the thing that does not exist.

199
00:12:26.130 --> 00:12:28.870
So if I type in tooth,
I should not see a hoodie on that list.

200
00:12:28.870 --> 00:12:33.690
All right, I'm already wearing the hoodie,
it does not need to be taken care of.

201
00:12:33.690 --> 00:12:37.741
So here we'll honestly
we can grab this part.

202
00:12:37.741 --> 00:12:43.414
Because it's again, a similar piece and
I guess that there is a lot of shorthand,

203
00:12:43.414 --> 00:12:48.699
this feels tedious to type in the data
attribute or to keep doing every test.

204
00:12:48.699 --> 00:12:50.675
And I'd love to just give it a short name,

205
00:12:50.675 --> 00:12:53.630
or I'd love to do multiple
things in a single command.

206
00:12:53.630 --> 00:12:56.372
Those are all good feelings that
you should think a lot about and

207
00:12:56.372 --> 00:12:58.330
meditate on at some point.

208
00:12:58.330 --> 00:13:01.246
So we could say, cy.contains.

209
00:13:04.326 --> 00:13:10.420
Hoodie should not exist on the page,
right?

210
00:13:10.420 --> 00:13:14.132
It is still in the data structure
somewhere but it is not on the page,

211
00:13:14.132 --> 00:13:17.195
Cypress is only going to your
page as a user would do it and

212
00:13:17.195 --> 00:13:19.840
seeing if it is presently on the page.

213
00:13:19.840 --> 00:13:23.700
If it is hidden from CSS, it is not on
the page because your user wouldn't know.

214
00:13:23.700 --> 00:13:27.329
If it is in your Redux store,
but currently not being rendered,

215
00:13:27.329 --> 00:13:29.021
it is not on the page, right?

216
00:13:29.021 --> 00:13:35.010
For any effective things as far as a user
of your page is concerned, it's not there.

217
00:13:35.010 --> 00:13:39.097
So we can go ahead and we'll save those as
well, we'll check it in a second see so

218
00:13:39.097 --> 00:13:41.736
that we don't have to keep watching,
we'll see.

219
00:13:41.736 --> 00:13:45.372
If I made a boo boo, we'll find
out when we go look at the test.

220
00:13:45.372 --> 00:13:49.744
So then we want to go ahead and
remove all the items,

221
00:13:49.744 --> 00:13:54.727
right, in this case there's
a button that we would like to

222
00:13:54.727 --> 00:13:58.099
click on that we would go ahead as well.

223
00:13:58.099 --> 00:14:01.249
There are other ways to do this too,

224
00:14:01.249 --> 00:14:06.395
you could theoretically go ahead and
find a specific one.

225
00:14:06.395 --> 00:14:08.423
So one of the questions
Jesse asked before is,

226
00:14:08.423 --> 00:14:10.455
what if I wanted to iterate over them,
right?

227
00:14:11.665 --> 00:14:14.495
So here we're just saying,
does this page contain it, right?

228
00:14:14.495 --> 00:14:17.635
I could scope it to packed or
unpacked items.

229
00:14:17.635 --> 00:14:21.054
I could do a whole bunch of
things along those lines, right?

230
00:14:21.054 --> 00:14:25.892
I have these selected for unpacked but
there's also one that's just items

231
00:14:25.892 --> 00:14:30.515
which is both lists, it's the parent
element of both those two lists.

232
00:14:30.515 --> 00:14:34.921
So one of the things that I could do in
this case if I wanted to make this test

233
00:14:34.921 --> 00:14:37.957
a little bit better and
then we'll get to remove,

234
00:14:37.957 --> 00:14:42.223
just thinking about that question
a little bit, is I could go ahead and

235
00:14:42.223 --> 00:14:46.920
I could, So
I've got that little helper here.

236
00:14:48.160 --> 00:14:49.940
Right, we'll say items.

237
00:14:49.940 --> 00:14:52.868
And in there, go ahead and look at
all the list signs we did first and

238
00:14:52.868 --> 00:14:54.770
last before, right?

239
00:14:54.770 --> 00:14:59.870
So I could do also each which is going
to give me the underlying jQuery object.

240
00:14:59.870 --> 00:15:04.200
Or I could get each and every one
of them and work through it, right?

241
00:15:04.200 --> 00:15:07.687
And so it is not the underlying DOM node,
it is the jQuery collection,

242
00:15:07.687 --> 00:15:10.406
which a lot of times,
if you ever wanted the first one,

243
00:15:10.406 --> 00:15:13.740
you have to get the index zero out of it,
so on and so forth.

244
00:15:13.740 --> 00:15:19.409
So I'm gonna take the old jQuery thing
that we did which is put a dollar sign to

245
00:15:19.409 --> 00:15:25.631
simulate, to say this is not a string or
anything like that, it's a jQuery value.

246
00:15:25.631 --> 00:15:30.177
So tent I could also say the syntax
a little different should work for

247
00:15:30.177 --> 00:15:34.800
those chains if I want to actually just
take a value like I would do it in

248
00:15:34.800 --> 00:15:38.120
a unit test, in that case I'll use expect.

249
00:15:38.120 --> 00:15:40.931
The same effect in there but
should is useful for

250
00:15:40.931 --> 00:15:43.680
the change we're gonna
parse that string in.

251
00:15:43.680 --> 00:15:48.556
Expect is like, no, I'm basically writing
this as almost as if it was a unit test

252
00:15:48.556 --> 00:15:52.216
because now this isn't the,
when I'm working through it,

253
00:15:52.216 --> 00:15:56.400
I'm getting the jQuery object like
the JavaScript object, right?

254
00:15:56.400 --> 00:16:01.439
And I am going ahead and evaluating and
calling methods on that object.

255
00:16:01.439 --> 00:16:05.977
It's why I would still probably just make
sure that things were on the page where I

256
00:16:05.977 --> 00:16:10.448
thought they were, but this is mostly to
demonstrate how you might kinda go down

257
00:16:10.448 --> 00:16:13.672
one level deeper in the cases
that might necessitate it.

258
00:16:13.672 --> 00:16:18.703
So I could expect that items,
or item, really,

259
00:16:18.703 --> 00:16:23.131
right, cuz I'm iterating through them.

260
00:16:23.131 --> 00:16:26.524
Item, not in caps, not yelling it,

261
00:16:26.524 --> 00:16:31.238
item.txt which is the jQuery
method in this case,

262
00:16:33.957 --> 00:16:42.385
To, let's go with include ('Tooth'),
right?

263
00:16:42.385 --> 00:16:46.762
Let's verify that that works in this case,
right?

264
00:16:46.762 --> 00:16:48.740
It goes through, they all pass, right?

265
00:16:48.740 --> 00:16:51.545
So you can get a level
deeper if you need to.

266
00:16:51.545 --> 00:16:54.262
That's what we're talking about
that dot then before, right?

267
00:16:54.262 --> 00:16:58.817
If t's one value, dot then will kinda
give you the underlying object that you

268
00:16:58.817 --> 00:17:02.673
can play around with versus
the Cypress chain, which are again,

269
00:17:02.673 --> 00:17:06.390
kinda abstracting as you
continue working with it.

270
00:17:06.390 --> 00:17:09.791
You can return something out of here,
kinda like you would with a promise and

271
00:17:09.791 --> 00:17:11.503
then continue chaining on it as well.

272
00:17:11.503 --> 00:17:16.493
There's also a method called site.wrap,
and what site.wrap will do is it'll take

273
00:17:16.493 --> 00:17:19.473
anything that is not a Cypress
chainable object and

274
00:17:19.473 --> 00:17:22.540
it will make it a Cypress
chainable object, right?

275
00:17:22.540 --> 00:17:25.574
So if you need to pass something
you continue chaining on but

276
00:17:25.574 --> 00:17:29.940
it's not a Cypress return value, you can
do site.wrap, which takes whatever value

277
00:17:29.940 --> 00:17:33.357
it is and wraps in something you
can continue a Cypress chain with.

278
00:17:33.357 --> 00:17:36.121
So if we needed to do
something here as well,

279
00:17:36.121 --> 00:17:39.409
I would possibly,
this is expect, it's fine, but

280
00:17:39.409 --> 00:17:43.843
I can continue chaining if I had a value
that I wanted to kind of pass on.

281
00:17:43.843 --> 00:17:46.623
If I wanted to get a particular
property and there's some syntax for

282
00:17:46.623 --> 00:17:49.226
that as well that we'll see,
I can do all those things as well.

283
00:17:49.226 --> 00:17:52.355
So you can drop down a level
deeper if you need to.

284
00:17:52.355 --> 00:17:56.705
But I would also question whether or
not you need to sometimes, right?

285
00:17:56.705 --> 00:18:00.383
I did not get anything done really with
this test, I couldn't do otherwise,

286
00:18:00.383 --> 00:18:01.979
other than demonstrating that.

287
00:18:01.979 --> 00:18:04.161
It's one of those things,
do you always need it, no.

288
00:18:04.161 --> 00:18:05.979
When you need it,
do you definitely need it?

289
00:18:05.979 --> 00:18:10.820
Sure, all right, and so mostly putting
a mental note in your head that it exists,

290
00:18:10.820 --> 00:18:13.644
and then we can kind of
think about it like that.

291
00:18:13.644 --> 00:18:17.432
So there is a button to remove
all the items in the page.

292
00:18:17.432 --> 00:18:22.830
So this is, again,
where I might do a similar selector thing.

293
00:18:22.830 --> 00:18:24.294
But I don't have to iterate
through all of them.

294
00:18:24.294 --> 00:18:29.115
I'm gonna be like, hey, if I remove
all the items from the page, and

295
00:18:29.115 --> 00:18:33.622
I go to get all the list items,
there shouldn't be any, right?

296
00:18:33.622 --> 00:18:36.675
So let's go ahead,
let's grab that as well.

297
00:18:36.675 --> 00:18:41.337
And we'll say Remove All.

298
00:18:41.337 --> 00:18:49.795
Take that and we will click it,
In this case.

299
00:18:49.795 --> 00:18:54.259
And then what we basically
wanna say is that those items,

300
00:18:54.259 --> 00:18:58.260
again, it's just CSS selectors, right?

301
00:18:58.260 --> 00:19:00.996
It's just that getting a data attribute or

302
00:19:00.996 --> 00:19:04.729
any HTML attribute in square
brackets is long and gnarly.

303
00:19:04.729 --> 00:19:06.496
But go through and there shouldn't be any.

304
00:19:13.840 --> 00:19:18.289
All right, and we'll go through, it's
running through all my tests in this case.

305
00:19:18.289 --> 00:19:21.911
At this point, there are none on the page
as soon as we click that button, right?

306
00:19:21.911 --> 00:19:24.878
One of these extensions lets me
just click something to add .only,

307
00:19:24.878 --> 00:19:26.556
you can choose to install that or not.

308
00:19:26.556 --> 00:19:29.862
That is,
I forget which is exact one of this,

309
00:19:29.862 --> 00:19:35.694
I think it's the Open Cypress one, you can
see the ones that pop up here as well.

310
00:19:35.694 --> 00:19:39.116
Cool, remove individual items on the page,
all right,

311
00:19:39.116 --> 00:19:42.264
you can get a sense of how
this is gonna work, right?

312
00:19:42.264 --> 00:19:47.058
If you look, I can remove
an individual one, I will click on it.

313
00:19:47.058 --> 00:19:51.316
In this case, it should no longer
appear for that given one.

314
00:19:51.316 --> 00:19:56.622
This one's gonna be kind of
interesting because I wanna make sure

315
00:19:56.622 --> 00:20:01.648
that it's the one that I chose
not to have on the page, right?

316
00:20:01.648 --> 00:20:07.610
So here we're gonna have to say like,
go get me a given one,

317
00:20:07.610 --> 00:20:13.589
and then click on it and
make sure that that one is not there.

318
00:20:13.589 --> 00:20:16.690
Cool, so let's actually play
around with that one for a second.

319
00:20:16.690 --> 00:20:20.934
So this is one of those things where
we need to basically store it.

320
00:20:20.934 --> 00:20:25.193
But we can't store those selectors in
variables like we could in jQuery cuz of

321
00:20:25.193 --> 00:20:29.180
the whole asynchronous thing that
we talked about earlier, right?

322
00:20:29.180 --> 00:20:32.480
So we're going to have to be,
click this one, but

323
00:20:32.480 --> 00:20:35.713
then I wanna make sure that
one is not on the page.

324
00:20:35.713 --> 00:20:37.146
Which one?

325
00:20:37.146 --> 00:20:40.057
Normally, we would store it in a variable,
right?

326
00:20:40.057 --> 00:20:43.007
Can't store in a variable
we're just talking about, so

327
00:20:43.007 --> 00:20:45.834
we need to figure out some of
the various components and

328
00:20:45.834 --> 00:20:49.354
concepts that we're talking about
is trying to see it in practice.

329
00:20:49.354 --> 00:20:53.611
So here we will say, we'll go ahead and

330
00:20:53.611 --> 00:20:58.910
grab a given one or
let's do all of them, right?

331
00:20:58.910 --> 00:21:01.340
So I'll do gda, this is my shortcut.

332
00:21:01.340 --> 00:21:09.180
And I'm gonna say go through all
the items, get each list item.

333
00:21:09.180 --> 00:21:14.288
And then what I wanna do
is iterate through them.

334
00:21:14.288 --> 00:21:17.045
And that will give me just the,
I guess, dollar sign alive,

335
00:21:17.045 --> 00:21:18.410
cuz it's the jQuery object.

336
00:21:18.410 --> 00:21:23.013
If I'm gonna follow rules that are not
forced upon me, that's what I should do.

337
00:21:23.013 --> 00:21:27.628
So we'll go through, and that's now
a jQuery object, which is a JavaScript

338
00:21:27.628 --> 00:21:31.746
object, and I wanna chain it,
which is the method that we can use to,

339
00:21:31.746 --> 00:21:34.872
how do I ask a question by
giving you the answer in it?

340
00:21:34.872 --> 00:21:39.152
Take something that's not a Cypress chain
and turn it back into a Cypress chain.

341
00:21:39.152 --> 00:21:40.634
&gt;&gt; Wrap?

342
00:21:40.634 --> 00:21:41.958
&gt;&gt; Wrap, all right?

343
00:21:41.958 --> 00:21:45.646
So here we can see site.wrap for
the first time in action.

344
00:21:45.646 --> 00:21:53.332
Where, cool, as we iterate through
each one, go through and find it.

345
00:21:53.332 --> 00:21:57.097
And we wanna make sure that
it is not on the page.

346
00:21:59.806 --> 00:22:03.229
All right, so
now I've got just that one in this case.

347
00:22:03.229 --> 00:22:10.267
And so what I might choose
to do here is I have it.

348
00:22:10.267 --> 00:22:14.260
I wanna find its particular

349
00:22:14.260 --> 00:22:21.734
('[data-test="remove"]'), right?

350
00:22:21.734 --> 00:22:26.812
So now we have that given li,
we wanna find its

351
00:22:26.812 --> 00:22:31.767
removed button, and
we want to click on it.

352
00:22:31.767 --> 00:22:33.809
Well, we wanna make sure it's there, and

353
00:22:33.809 --> 00:22:36.373
we also wanna make sure that
it's not there anymore.

354
00:22:36.373 --> 00:22:38.791
So click.

355
00:22:41.623 --> 00:22:49.175
At this point, we could theoretically,
Let's try this out.

356
00:22:53.838 --> 00:22:56.501
I remove it and then make sure
that one is not on the page.

357
00:22:56.501 --> 00:22:59.666
Let's find out together if that works.

358
00:22:59.666 --> 00:23:01.435
And it does, right?

359
00:23:01.435 --> 00:23:03.370
So now we can do separate things with it.

360
00:23:03.370 --> 00:23:04.629
We have it in that closure.

361
00:23:04.629 --> 00:23:07.160
We can do each one of those one at a time.

362
00:23:07.160 --> 00:23:09.309
So basically,
it's going through every single one.

363
00:23:09.309 --> 00:23:13.690
It's going ahead finding its
remove button, it's clicking it.

364
00:23:13.690 --> 00:23:16.897
And it's verifying that that
one is not on the page as well.

365
00:23:16.897 --> 00:23:20.561
We will learn about aliases imminently.

366
00:23:20.561 --> 00:23:23.441
And when we do, there are ways to say,
hey, this thing,

367
00:23:23.441 --> 00:23:26.099
I do need to store it with
a way to reference it later.

368
00:23:26.099 --> 00:23:28.386
It just won't be in a variable, right?

369
00:23:28.386 --> 00:23:32.186
So that there are other and a lot of
times, slightly easier ways, depending for

370
00:23:32.186 --> 00:23:34.640
doing this for
common things on your page, right?

371
00:23:34.640 --> 00:23:37.500
Like if you had a complicated form or
a login screen,

372
00:23:37.500 --> 00:23:40.233
you'd just wanna find
these things constantly.

373
00:23:40.233 --> 00:23:43.889
There are ways to do that as well.

374
00:23:43.889 --> 00:23:49.877
All right, for some of these,
I think we've gotten the major point here.

375
00:23:49.877 --> 00:23:51.955
We can verify, in this case,

376
00:23:51.955 --> 00:23:56.790
that clicking on it should move it
from one list to the other, right?

377
00:23:56.790 --> 00:23:59.905
I think we've got the core concept here,
right?

378
00:23:59.905 --> 00:24:03.039
And so we'll leave some of these
as a further kind of exercise.

379
00:24:03.039 --> 00:24:07.054
There is the completed examples if you
wanna kinda check different ways to do it.

380
00:24:07.054 --> 00:24:11.451
For some of them, there's, here's one
way to do it, we can get increasingly,

381
00:24:11.451 --> 00:24:15.460
we can try a few different ways in that
as well, but for the sake of kind of,

382
00:24:15.460 --> 00:24:18.010
I think we've gotten
this kind of core piece.

