WEBVTT

1
00:00:00.080 --> 00:00:03.366
Let's go ahead and take it for a spin.

2
00:00:03.366 --> 00:00:06.507
So this is that kind of empty repo and

3
00:00:06.507 --> 00:00:11.427
you can see in package JSON I
do have Cypress installed,

4
00:00:11.427 --> 00:00:15.840
there are under devdependencies,
right there.

5
00:00:15.840 --> 00:00:20.560
There are a number of
ways to install Cypress.

6
00:00:20.560 --> 00:00:24.140
I think you can brew,
install with Homebrew.

7
00:00:24.140 --> 00:00:26.364
I think there's probably
a Docker container,

8
00:00:26.364 --> 00:00:28.096
there's a bunch of stuff you can do.

9
00:00:28.096 --> 00:00:31.610
The recommended way if you look what
we saw on the website we first visited.

10
00:00:31.610 --> 00:00:35.387
And if you go digging through
the docs it's to npm install.

11
00:00:35.387 --> 00:00:38.107
Why?
Well, one is that you will get a pinned

12
00:00:38.107 --> 00:00:42.969
version of it for everyone in your
project using the same version, right?

13
00:00:42.969 --> 00:00:47.899
So you don't have to hope if you Homebrew
you gotta hope that everyone's got

14
00:00:47.899 --> 00:00:49.139
the same version.

15
00:00:49.139 --> 00:00:52.646
Two is that later when we
set up a CI/CD pipeline,

16
00:00:52.646 --> 00:00:58.220
it is also easier to have that version
in the repo kind of ready to go as well.

17
00:00:58.220 --> 00:01:01.173
Can you host all your Cypress
sets in a different repo?

18
00:01:01.173 --> 00:01:02.911
Totally, you could, right?

19
00:01:02.911 --> 00:01:07.397
That is going to kind of make it a little
bit more difficult when you want to wire

20
00:01:07.397 --> 00:01:08.096
up CI/CD.

21
00:01:08.096 --> 00:01:11.512
But you can see a world that
like at a large enough company,

22
00:01:11.512 --> 00:01:13.953
there are reasons why
you might want to but

23
00:01:13.953 --> 00:01:18.451
in all those cases there's probably
also reasons why you might not want to.

24
00:01:18.451 --> 00:01:23.108
You could even see a world well you choose
to do both where for your project you have

25
00:01:23.108 --> 00:01:26.620
Cypress kind of doing the major
things around your project.

26
00:01:26.620 --> 00:01:31.080
And then maybe at a large company level
there's a series of end to end tests that

27
00:01:31.080 --> 00:01:34.876
are taking Cypress across multiple
teams applications, right?

28
00:01:34.876 --> 00:01:39.440
There's nothing that ties it to one but
like I said, in terms of working on your

29
00:01:39.440 --> 00:01:43.866
project and making sure everyone in
your team is using the same version, and

30
00:01:43.866 --> 00:01:45.543
also the CI/CD piece of it.

31
00:01:45.543 --> 00:01:48.444
It behooves you to probably
just npm install it and

32
00:01:48.444 --> 00:01:51.220
have a version ready to
go in your package JSON.

33
00:01:51.220 --> 00:01:55.323
All right, so
barring some really great reason or

34
00:01:55.323 --> 00:02:00.891
opinion about why you should do it
a different way, this is probably

35
00:02:00.891 --> 00:02:06.775
the paved path both in my opinion as
well as for the Cypress team as well.

36
00:02:06.775 --> 00:02:13.448
Cool so with that in place let's actually
get this started for the first time.

37
00:02:13.448 --> 00:02:16.180
Now it has been npm installed.

38
00:02:16.180 --> 00:02:20.550
But beyond that,
we've never run it before, right?

39
00:02:20.550 --> 00:02:27.320
And so Cypress has a binary called
Cypress, seems like a good name for it.

40
00:02:27.320 --> 00:02:31.715
And there's basically two major
ways of firing up Cypress,

41
00:02:31.715 --> 00:02:33.967
cypress open and cypress run.

42
00:02:33.967 --> 00:02:39.513
The core difference is cypress open is
mostly the one that you want to use,

43
00:02:39.513 --> 00:02:45.380
especially when you are developing
an application and working on stuff.

44
00:02:45.380 --> 00:02:50.111
Cypress run is probably what your CI/CD
process would like to run, right?

45
00:02:50.111 --> 00:02:53.889
It is the kind of headless mode
that will instead of giving

46
00:02:53.889 --> 00:02:56.960
you anything that you
can personally touch and

47
00:02:56.960 --> 00:03:03.080
poke around on if the tests aren't working
it take screenshots and record videos.

48
00:03:03.080 --> 00:03:07.420
So you can triage it when the build
fails or something along those lines.

49
00:03:07.420 --> 00:03:12.493
So you could make a npm script or
you can also just use MPX if

50
00:03:12.493 --> 00:03:17.380
you're using a version of
npm from the last few years.

51
00:03:17.380 --> 00:03:22.133
MPX basically takes any of
the binaries that are in your

52
00:03:22.133 --> 00:03:25.555
node modules and adds them to the path.

53
00:03:25.555 --> 00:03:31.581
So we could do MPX cypress open and
that will spin up a Electron app For

54
00:03:31.581 --> 00:03:37.130
Cypress, and we're gonna get it for
the very first time.

55
00:03:37.130 --> 00:03:40.360
And there's a few things
to notice about this.

56
00:03:40.360 --> 00:03:44.127
I'm just gonna make mine
a little bit bigger but

57
00:03:44.127 --> 00:03:48.500
you can kinda do whatever
you want in this case.

58
00:03:48.500 --> 00:03:53.137
One is it actually gave you
a bunch of example test, right?

59
00:03:53.137 --> 00:03:57.837
Two is if kind of look in
Visual Studio code I've got this

60
00:03:57.837 --> 00:04:02.970
green addition here which is
a created a new directory.

61
00:04:02.970 --> 00:04:08.040
Let's talk about the directory first and
then we'll go back into the application.

62
00:04:08.040 --> 00:04:12.601
So in here we have fixtures Integration
which are effectively our tests,

63
00:04:12.601 --> 00:04:17.306
plugins which we'll talk about a little
bit and support which is kind of your

64
00:04:17.306 --> 00:04:21.887
utilities and other things that you
might want to pull in for those tests.

65
00:04:21.887 --> 00:04:25.134
So it we went ahead and
it created all of this for you.

66
00:04:25.134 --> 00:04:29.815
You can see that those examples that
we saw in the Electron app that spun up

67
00:04:29.815 --> 00:04:34.807
are mapped to these two directories of
getting started with todo.spec, and

68
00:04:34.807 --> 00:04:38.750
then a whole bunch of other ones
in these advanced examples.

69
00:04:39.790 --> 00:04:45.430
You could either go ahead and delete
these directories yourself, or if you go

70
00:04:45.430 --> 00:04:51.177
back to the Cypress application, you can
see they are nice enough to go ahead.

71
00:04:51.177 --> 00:04:55.462
They put them there they are also
nice enough to go ahead and

72
00:04:55.462 --> 00:04:59.480
delete them for
if you don't want them, right?

73
00:04:59.480 --> 00:05:04.370
It might be worthwhile to kind of poke
around and see how a few of them work.

74
00:05:04.370 --> 00:05:08.439
And we're certainly going to do that
before we hop into the other project that

75
00:05:08.439 --> 00:05:11.770
has kind of where we're actually
doing most of our work today.

76
00:05:11.770 --> 00:05:14.140
So I'm not gonna touch that just yet.

77
00:05:14.140 --> 00:05:19.006
The other kind of interesting thing is you
can choose which browser that you want

78
00:05:19.006 --> 00:05:23.420
to drive, in my case,
I'm gonna use Chrome for most of the day.

79
00:05:23.420 --> 00:05:27.738
But you can use Chrome and
any of the Chromium browsers, right?

80
00:05:27.738 --> 00:05:31.290
So Chrome, Microsoft Edge,
so on and so forth.

81
00:05:31.290 --> 00:05:35.127
If you have a nightly build of
Chrome also installed the computer,

82
00:05:35.127 --> 00:05:36.920
that will show up here as well.

83
00:05:36.920 --> 00:05:41.400
And you can see that there is support for
Firefox as well.

84
00:05:43.030 --> 00:05:45.750
At this moment I do not
think it supports Safari.

85
00:05:46.990 --> 00:05:49.177
But Firefox, Chrome and

86
00:05:49.177 --> 00:05:54.710
the Chromium family of browsers
will work in this case as well.

87
00:05:56.390 --> 00:05:57.700
There you can log in as well.

88
00:05:57.700 --> 00:06:03.039
There will be some things you
might see for the very first time,

89
00:06:03.039 --> 00:06:07.872
for instance, if you hit Open in IDE,
for you it might ask

90
00:06:07.872 --> 00:06:12.747
you to just let it know what
your IDE of choice is, right?

91
00:06:12.747 --> 00:06:19.140
So any of the major ones are there Vim,
VS Code, so on and so forth.

92
00:06:19.140 --> 00:06:21.510
So that will work there as well.

93
00:06:21.510 --> 00:06:26.070
And the interesting part about
Cypress that will kind of explore over

94
00:06:26.070 --> 00:06:31.115
the course of our time together is there
is Cypress the test runner, right?

95
00:06:31.115 --> 00:06:35.877
But then a lot of the other pieces of
Cypress are actually based on other

96
00:06:35.877 --> 00:06:37.826
open source testing tools.

97
00:06:37.826 --> 00:06:43.436
So the syntax for your assertions and
running the test are just Mocha and Chai.

98
00:06:43.436 --> 00:06:48.347
So if you already use those for
your unit tests then when I say it

99
00:06:48.347 --> 00:06:53.340
is the same syntax,
it is literally the same syntax.

100
00:06:53.340 --> 00:06:55.990
We'll get to the caveat to
that sentence in a second.

101
00:06:55.990 --> 00:06:59.800
But mostly the same syntax
because it is Mocha and Chai.

102
00:07:01.240 --> 00:07:05.346
That said there might be a little bit of
an impedance mismatch if you are using

103
00:07:05.346 --> 00:07:07.913
Jest but
we'll talk about how autocomplete and

104
00:07:07.913 --> 00:07:10.680
IntelliSense is your friend in this case.

105
00:07:10.680 --> 00:07:14.045
And how to just navigate
that without having to learn

106
00:07:14.045 --> 00:07:15.812
two tools at the same time.

107
00:07:15.812 --> 00:07:19.872
But you can kinda see some of
the popular things that we've seen

108
00:07:19.872 --> 00:07:22.712
in many of our testing frameworks, right?

109
00:07:22.712 --> 00:07:24.424
Like I said this is Mocha and

110
00:07:24.424 --> 00:07:28.965
Chai, you can even see with the
IntelliSense TypeScript hints there but

111
00:07:28.965 --> 00:07:33.610
this looks indistinguishable
from Jest in this case, right?

112
00:07:33.610 --> 00:07:35.550
So you can probably use either one.

113
00:07:35.550 --> 00:07:40.520
The other interesting part is you've
got this CY object which has a series

114
00:07:40.520 --> 00:07:42.030
of methods.

115
00:07:42.030 --> 00:07:46.500
And you can kinda see that it's gotta
get where you give it a selector.

116
00:07:46.500 --> 00:07:50.229
And then you kinda chain it into a should
that has whatever assertion you wanna do.

117
00:07:50.229 --> 00:07:52.800
There's the ability to get the first and
last one.

118
00:07:52.800 --> 00:07:57.291
Now, so my favorite things,
which is the test runner is, again,

119
00:07:57.291 --> 00:08:01.866
the testing assertion piece, and
then you describe and it blocks,

120
00:08:01.866 --> 00:08:06.300
so on, and so forth are Mocha and
Chai, the selector engine.

121
00:08:06.300 --> 00:08:09.180
Would anyone like to take a wild
guess what selector engine

122
00:08:09.180 --> 00:08:10.600
it's using under the hood?

123
00:08:12.800 --> 00:08:13.410
&gt;&gt; jQuery.?

124
00:08:13.410 --> 00:08:15.210
&gt;&gt; Yes, jQuery.

125
00:08:15.210 --> 00:08:17.190
It is using JQuery.

126
00:08:17.190 --> 00:08:22.055
So for some people that will be
a return to a skill set that maybe

127
00:08:22.055 --> 00:08:26.180
they haven't gotten
a chance to use it lately.

128
00:08:26.180 --> 00:08:29.080
For some of this insecurity,
why is it like that,

129
00:08:29.080 --> 00:08:32.343
because effectively that is
the JQuery under the hood.

130
00:08:32.343 --> 00:08:37.247
So we'll see little pieces of that work
as well but that's where the first and

131
00:08:37.247 --> 00:08:38.838
the last is coming from.

132
00:08:38.838 --> 00:08:42.372
You can again see that In
the TypeScript hints where yes,

133
00:08:42.372 --> 00:08:46.506
it's a Cypress chainable but
under the hood is JQuery doing this.

134
00:08:46.506 --> 00:08:51.642
You have all of the power of JQuery
at your disposal to kind of run and

135
00:08:51.642 --> 00:08:53.127
drive your tests.

136
00:08:53.127 --> 00:08:57.941
So JQuery, Mocha and Chai, for
some of the glob stuff is mini match,

137
00:08:57.941 --> 00:09:00.359
which Isaac who created npm made.

138
00:09:00.359 --> 00:09:04.590
There's a bunch of libraries
that Cypress sits on top of it.

139
00:09:04.590 --> 00:09:09.489
So, if you've used any of these tools in
the past, you're already coming into this

140
00:09:09.489 --> 00:09:12.946
with some amount of knowledge
of how to write Cypress test.

141
00:09:12.946 --> 00:09:16.893
Cuz it's based a lot of ways on these same
tools that building web applications is

142
00:09:16.893 --> 00:09:19.720
based on top of applications
is based on top of.

143
00:09:19.720 --> 00:09:23.270
Like I said before, it is completely
framework agnostic, right?

144
00:09:23.270 --> 00:09:28.146
If you're just going and clicking a button
on the page to verify that does the thing

145
00:09:28.146 --> 00:09:33.089
you expect it to do, it does not matter if
that button was built in React, or Spelt,

146
00:09:33.089 --> 00:09:34.808
or Ember, or what have you.

147
00:09:34.808 --> 00:09:37.458
The button is on the page,
so on and so forth.

148
00:09:37.458 --> 00:09:39.807
That's also great like I said before,

149
00:09:39.807 --> 00:09:43.890
if you have a code base that isn't
a state of transition, right?

150
00:09:43.890 --> 00:09:47.789
You can actually maybe cover a lot
of the current functionality and

151
00:09:47.789 --> 00:09:50.781
tests and
then begin to do the refactor knowing that

152
00:09:50.781 --> 00:09:54.410
everything works the way
that you expect it to.

153
00:09:54.410 --> 00:09:59.321
One of the things kinda just pay kind
of attention to is this chaining

154
00:09:59.321 --> 00:10:01.401
functionality in Cypress.

155
00:10:01.401 --> 00:10:04.748
It does take a little
bit of getting used to,

156
00:10:04.748 --> 00:10:07.831
in a lot of ways they look like promises.

157
00:10:07.831 --> 00:10:13.706
There's some that actually have a then,
I'm not sure if it's in this sample file,

158
00:10:13.706 --> 00:10:17.400
but they're not necessarily
promises per se.

159
00:10:17.400 --> 00:10:21.160
But this code looks synchronous,
it's in fact a synchronous.

160
00:10:21.160 --> 00:10:25.987
There will be little things that we
need to keep in mind as we go through

161
00:10:25.987 --> 00:10:26.915
all of that.

162
00:10:26.915 --> 00:10:31.681
But by the end we should begin to kind
of get the sense of that as we go

163
00:10:31.681 --> 00:10:33.340
through everything.

