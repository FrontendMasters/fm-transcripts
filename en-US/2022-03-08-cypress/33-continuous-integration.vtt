WEBVTT

1
00:00:00.120 --> 00:00:07.140
So the other last piece to look at
is around some of the CI/CD stuff.

2
00:00:07.140 --> 00:00:10.059
Now, I'm gonna show you an example
of works with GitHub Actions.

3
00:00:10.059 --> 00:00:15.263
I know that like GitHub Actions will work
great, especially if it's a small project,

4
00:00:15.263 --> 00:00:18.844
or maybe an open source project or
stuff along those lines.

5
00:00:18.844 --> 00:00:23.523
For those of you in the room,
we did general introductions, and

6
00:00:23.523 --> 00:00:28.995
I know that there's probably if I had
a guess, 50% Jenkins in the room.

7
00:00:28.995 --> 00:00:32.919
&gt;&gt; Yep.
&gt;&gt; Yep, yeah, [LAUGH] right and so,

8
00:00:32.919 --> 00:00:40.382
the nuances of all these things,
will kind of vary a little bit as well.

9
00:00:40.382 --> 00:00:46.157
But, it's the kind of difference we
saw before between Cypress open and,

10
00:00:46.157 --> 00:00:47.266
Cypress run.

11
00:00:47.266 --> 00:00:51.362
So I'm gonna do Cypress run instead,
this will take a second or two.

12
00:00:51.362 --> 00:00:54.571
And what this is going to do is not
going to fire up a browser that you see,

13
00:00:54.571 --> 00:00:57.710
that you can like click around through and
do a bunch of stuff.

14
00:00:57.710 --> 00:01:02.142
It is going to spin up
a headless version and,

15
00:01:02.142 --> 00:01:06.840
kind of go through all of it one by one,
right?

16
00:01:06.840 --> 00:01:09.810
There's a bunch of stuff you can do and
all of this will be built to a specific.

17
00:01:09.810 --> 00:01:14.214
You could theoretically grab some
Docker containers, that have Chrome and

18
00:01:14.214 --> 00:01:16.910
stuff along those lines,
and do that as well.

19
00:01:16.910 --> 00:01:21.471
If you don't specify anything, it's just
gonna use its built in electron browser.

20
00:01:21.471 --> 00:01:25.230
But like this almost looks, very
similar to a set of unit tests, right?

21
00:01:25.230 --> 00:01:29.351
Where it is basically running
through each spec, and

22
00:01:29.351 --> 00:01:33.756
you can kinda see it pass by as
it runs through all of them.

23
00:01:33.756 --> 00:01:39.416
Where it is also like recording videos,
and taking screenshots,

24
00:01:39.416 --> 00:01:43.910
so that you can theoretically
kind of view them.

25
00:01:43.910 --> 00:01:47.585
The one nice thing about
the Cypress tool itself,

26
00:01:47.585 --> 00:01:50.395
like the run stuff that we saw before.

27
00:01:50.395 --> 00:01:55.580
Is that, you can have a GitHub Action
that runs, or anything but

28
00:01:55.580 --> 00:01:59.817
then you could also give
Cypress your GitHub token.

29
00:01:59.817 --> 00:02:02.524
And they can open responses on the PR,

30
00:02:02.524 --> 00:02:06.980
with a review of which tests failed,
what the videos are.

31
00:02:06.980 --> 00:02:10.469
And stuff along those lines, that
allow you to see that super easily and

32
00:02:10.469 --> 00:02:12.510
kind of get that immediate feedback.

33
00:02:12.510 --> 00:02:15.189
Cuz we all get the thing where it
fails and you gotta go into the tool,

34
00:02:15.189 --> 00:02:16.931
especially if you're a larger company,.

35
00:02:16.931 --> 00:02:20.852
You gotta two factor auth [LAUGH] and
be on the VPN or

36
00:02:20.852 --> 00:02:25.770
else it's not gonna work, and
all those kinds of things.

37
00:02:25.770 --> 00:02:29.230
So the ability to get that
feedback incredibly quickly,

38
00:02:29.230 --> 00:02:31.070
is super useful as well.

39
00:02:31.070 --> 00:02:36.530
But, the run version of this is what we
expect to run on a CI/CD process, right?

40
00:02:36.530 --> 00:02:39.113
And it should go ahead and
collect those images and videos and

41
00:02:39.113 --> 00:02:41.450
it should bubble up the ones that fail,
so on so forth.

42
00:02:41.450 --> 00:02:46.654
And like if I run this right
now these are getting saved,

43
00:02:46.654 --> 00:02:52.280
to a folder that I am
personally get ignoring, right?

44
00:02:52.280 --> 00:02:57.016
I think you can kind of see all the ones
that was kind of running through I think

45
00:02:57.016 --> 00:03:01.200
the failures,
these are probably previous runs as well.

46
00:03:01.200 --> 00:03:05.722
But I will say the videos we can kinda
see the process of what happened.

47
00:03:05.722 --> 00:03:07.153
Cuz I clearly it's headless,

48
00:03:07.153 --> 00:03:11.014
you're gonna triage it after the fact
you're not gonna watch your build process.

49
00:03:11.014 --> 00:03:12.717
And you can kind of go ahead and see it,

50
00:03:12.717 --> 00:03:15.603
the peculiarities are obviously
gonna be slightly different.

51
00:03:15.603 --> 00:03:22.896
In the resources I'll kind
of talk about it real quick,

52
00:03:22.896 --> 00:03:30.663
we do have an example of a kind
of very simple GitHub Action.

53
00:03:30.663 --> 00:03:32.939
That we can just talk about real quick,
but

54
00:03:32.939 --> 00:03:36.241
basically will check out the code
install your node modules.

55
00:03:36.241 --> 00:03:38.631
They publish a GitHub Action
that you can use,

56
00:03:38.631 --> 00:03:41.274
we can specify what browser
should it be headless?

57
00:03:41.274 --> 00:03:45.877
How do you start the,
application what port are you waiting on,

58
00:03:45.877 --> 00:03:47.249
so on and so forth.

59
00:03:47.249 --> 00:03:50.724
I think the kind of
sophisticated parts is that,

60
00:03:50.724 --> 00:03:54.704
as it grows if you got the right
kind of set of like tools,

61
00:03:54.704 --> 00:03:59.820
you can begin to start to paralyze them,
and split them across as well.

62
00:03:59.820 --> 00:04:02.503
You need a little bit more of a Docker
situation to make all that happen,

63
00:04:02.503 --> 00:04:04.619
that's kind of a little bit
beyond our scope right now.

64
00:04:04.619 --> 00:04:08.913
That's kind of if we did like a production
advanced version of this I think we can

65
00:04:08.913 --> 00:04:10.272
go all the way into that.

66
00:04:10.272 --> 00:04:15.662
But, it's a little tricky to do
in any kind of meaningful way,

67
00:04:15.662 --> 00:04:21.883
without kind of getting really into
the front end build pipeline stuff.

68
00:04:21.883 --> 00:04:27.615
But the idea is this is a fairly easy way
to add at least to having the initial

69
00:04:27.615 --> 00:04:32.993
parts to make sure your tests are running,
on every open PR, right?

70
00:04:32.993 --> 00:04:37.870
And I think GitHub's free tier for
GitHub Actions is pretty generous.

71
00:04:37.870 --> 00:04:41.481
I don't remember off the top of my head
I did earlier at one point today I think

72
00:04:41.481 --> 00:04:44.492
it's like 1,000 minutes or
something like that a month.

73
00:04:44.492 --> 00:04:49.381
Which for a lot of those things you're
in a great situation if you blow

74
00:04:49.381 --> 00:04:53.523
past that tier,
means that you are shipping so much code.

75
00:04:53.523 --> 00:04:58.770
But yeah, but kind of having those pieces
in place I think is incredibly powerful.

76
00:04:58.770 --> 00:05:02.265
But yeah, I think the interesting
parts there are automating that,

77
00:05:02.265 --> 00:05:05.800
because you're not gonna run
this all the time, right?

78
00:05:05.800 --> 00:05:11.711
But again some of those, we had it
working with Buildkite at SendGrid,

79
00:05:11.711 --> 00:05:15.660
and again,
it was simply a plugin in that case.

80
00:05:15.660 --> 00:05:18.772
And again, it's spinning up
a container that has node usually so

81
00:05:18.772 --> 00:05:22.010
you can actually run, all of the pieces,
stuff along those lines.

