WEBVTT

1
00:00:00.211 --> 00:00:02.370
All right.

2
00:00:02.370 --> 00:00:08.463
So, the two other fields we
had was the input field for

3
00:00:08.463 --> 00:00:14.565
the rating and the select field for
the restaurants.

4
00:00:14.565 --> 00:00:18.083
There's a little trick that we got
to figure out for the restaurants.

5
00:00:18.083 --> 00:00:20.267
Let's do that one first.

6
00:00:20.267 --> 00:00:22.930
So, what should happen is
if I pick Chick-fil-A,

7
00:00:22.930 --> 00:00:25.787
I should only see super menu
items from Chick- fil-A.

8
00:00:25.787 --> 00:00:26.951
Make sense?

9
00:00:26.951 --> 00:00:30.161
But then like okay, like how do I do that?

10
00:00:30.161 --> 00:00:37.563
Now, the way I chose to do it was
there is a piece of an attribute for

11
00:00:37.563 --> 00:00:43.089
Table cells for
what header they correspond to.

12
00:00:43.089 --> 00:00:47.974
So, what I could do is figure
out like find that that TD that

13
00:00:47.974 --> 00:00:50.180
corresponds to a header.

14
00:00:50.180 --> 00:00:52.761
You could have also used
data attributes as well.

15
00:00:52.761 --> 00:00:57.755
But sometimes data attributes are great
like to just say the meaning of that

16
00:00:57.755 --> 00:01:00.528
piece of markup for your test, but also,

17
00:01:00.528 --> 00:01:05.382
if there's like a good attribute that
also does that works too, right?

18
00:01:05.382 --> 00:01:10.859
So, we'll go ahead and we'll say,
for Constant restaurant.

19
00:01:13.112 --> 00:01:18.819
Of restaurants, Right?

20
00:01:18.819 --> 00:01:23.334
Just make sure that's called restaurants,
because I didn't like the fact that auto

21
00:01:23.334 --> 00:01:25.851
complete wasn't there for
me, that was fine.

22
00:01:25.851 --> 00:01:28.233
And so we'll go ahead and we'll do that.

23
00:01:28.233 --> 00:01:34.677
And now we'll say,
as we go through that it

24
00:01:34.677 --> 00:01:40.409
should only display rows that match.

25
00:01:40.409 --> 00:01:46.290
I don't know as the restaurant
sub it in there,

26
00:01:46.290 --> 00:01:49.826
restaurant when selected.

27
00:01:49.826 --> 00:01:54.604
Cool and then we'll go ahead and
we'll say,

28
00:01:54.604 --> 00:01:59.634
go ahead and
get that restaurant filter which we

29
00:01:59.634 --> 00:02:05.435
have stored in alias and
select the given restaurant.

30
00:02:05.435 --> 00:02:10.339
This select field will take the value for
that option, it'll take an index for

31
00:02:10.339 --> 00:02:15.107
which one you want or will literally
take the word that's the child as well.

32
00:02:15.107 --> 00:02:20.523
So, this case, spoiler alert,
the value and the word of the same.

33
00:02:20.523 --> 00:02:25.360
So, we've got that in place and
we'll go ahead and we'll select that one.

34
00:02:25.360 --> 00:02:28.657
And now, I think I misspoke before,
when I said that,

35
00:02:28.657 --> 00:02:33.677
if you select a selector that has multiple
elements you can't click on all of them,

36
00:02:33.677 --> 00:02:37.073
but you can actually have
them as a collection, right?

37
00:02:37.073 --> 00:02:40.653
You can't like get all of the A's on thing
and click them all with one command.

38
00:02:40.653 --> 00:02:45.271
You we saw that before when I had too
many of the labels I tried to click,

39
00:02:45.271 --> 00:02:47.777
because I had the wrong selector, but

40
00:02:47.777 --> 00:02:51.475
you can go validate something
about all of them as well.

41
00:02:51.475 --> 00:02:57.607
So, we'll do go find me the table data's

42
00:02:57.607 --> 00:03:03.752
that have headers, that are word order.

43
00:03:06.813 --> 00:03:08.177
Column, right?

44
00:03:08.177 --> 00:03:13.060
So this is the TDs that
are in that column, right?

45
00:03:13.060 --> 00:03:16.810
And so, we've got that in place and
they might have another selector as well.

46
00:03:16.810 --> 00:03:19.710
I'm doing this a little bit from memory.

47
00:03:19.710 --> 00:03:23.398
So, let's see, let's go ahead and look,
because we can always that's the nice

48
00:03:23.398 --> 00:03:26.773
part about cybers is we've got the last
version of the page up and running.

49
00:03:26.773 --> 00:03:33.675
I go ahead, and we can see it's got
a yeah, I don't need nth child.

50
00:03:33.675 --> 00:03:35.581
They do have a class of
where to order as well.

51
00:03:35.581 --> 00:03:36.998
So that would theoretically work.

52
00:03:36.998 --> 00:03:39.129
You see I've got 203 of them.

53
00:03:39.129 --> 00:03:43.322
If I grab that other selector that
I was playing around with here,

54
00:03:43.322 --> 00:03:46.078
we can verify that that
will also work too.

55
00:03:50.433 --> 00:03:51.511
Right, there's 203.

56
00:03:51.511 --> 00:03:53.029
So they are effectively the same.

57
00:03:53.029 --> 00:03:57.082
And if you hover over that number,
you'll see which ones are highlighted,

58
00:03:57.082 --> 00:04:01.346
which again gives you that sense of making
sure that you have the right element.

59
00:04:01.346 --> 00:04:05.363
If you're ever questionable,
you can either select it on the page or

60
00:04:05.363 --> 00:04:08.425
you can pay something in there,
and verify as well.

61
00:04:08.425 --> 00:04:11.593
Either one of them work, and
the tool is there to help you, so

62
00:04:11.593 --> 00:04:14.843
you're not just taking random guesses and
running the test.

63
00:04:14.843 --> 00:04:19.575
So, either class or
you can do the attributes up to you.

64
00:04:19.575 --> 00:04:26.884
And we're going to say that
all the ones on the page,

65
00:04:26.884 --> 00:04:31.883
it should contain the restaurant.

66
00:04:31.883 --> 00:04:35.620
&gt;&gt; Theoretically, we're the intent
of our tests is to filter.

67
00:04:35.620 --> 00:04:38.587
So, which is to say we're
eliminating something.

68
00:04:38.587 --> 00:04:40.353
&gt;&gt; Yep.

69
00:04:40.353 --> 00:04:44.823
&gt;&gt; I could think of like writing that in a
way where the you could check the number,

70
00:04:44.823 --> 00:04:47.548
the length of the collection
it gets returned.

71
00:04:47.548 --> 00:04:52.486
But the approach I was struggling
with personally was to try and

72
00:04:52.486 --> 00:04:57.520
like have the contrapositive that
like some of the columns there

73
00:04:57.520 --> 00:05:02.758
do not contain that ahead of time and
then say that they should all.

74
00:05:02.758 --> 00:05:03.687
&gt;&gt; Yep.

75
00:05:03.687 --> 00:05:05.084
&gt;&gt; How might I do something like that?

76
00:05:05.084 --> 00:05:08.370
&gt;&gt; Yeah, so think about so the question
was, cuz this will technically your

77
00:05:08.370 --> 00:05:11.872
point is right like this will pass if
the filter doesn't do anything, right?

78
00:05:11.872 --> 00:05:14.465
Because they'll still be on the page
actually won't pass, right?

79
00:05:14.465 --> 00:05:18.033
Because there'll be one there'll
be one that has a Taco Bell in it.

80
00:05:18.033 --> 00:05:20.147
That we're expecting Chick-fil-a..

81
00:05:20.147 --> 00:05:24.582
So, it will actually, if the filter
stops working, this will test that case.

82
00:05:24.582 --> 00:05:28.436
But let's take it as a given, right?

83
00:05:28.436 --> 00:05:31.269
I can think of a few ways, right?

84
00:05:31.269 --> 00:05:33.639
You could verify that none of them,

85
00:05:33.639 --> 00:05:38.064
if you had let's say we're using
a four H way of the index, right?

86
00:05:38.064 --> 00:05:42.104
You can grab the previous one in the array
or something or just another one in

87
00:05:42.104 --> 00:05:46.096
the array or something like that and
verify that that one does not appear.

88
00:05:46.096 --> 00:05:50.139
We're also starting with an array as
a data structure, you could theoretically

89
00:05:50.139 --> 00:05:53.832
just have it grab another one and
verify that those don't show up as well.

90
00:05:53.832 --> 00:05:56.812
This will still do that,
because if one shows up.

91
00:05:56.812 --> 00:06:01.137
And it's not if we were on Taco Bell KFC
at this point, and it says,

92
00:06:01.137 --> 00:06:05.794
Burger King it will fail the test,
so this one will accidentally do it.

93
00:06:05.794 --> 00:06:06.607
Yeah,
&gt;&gt; For

94
00:06:06.607 --> 00:06:11.278
this one specifically like the the place
it would fail where it shouldn't is,

95
00:06:11.278 --> 00:06:15.481
if the filter returned no results,
because there were none to begin.

96
00:06:15.481 --> 00:06:18.397
&gt;&gt; Yeah, so
what we might do is say like yeah,

97
00:06:18.397 --> 00:06:23.193
I think in this case there will always
be at least one in there, right?

98
00:06:23.193 --> 00:06:26.296
Now, if we both set the rating
to seven and pick anything but

99
00:06:26.296 --> 00:06:30.289
the butter beer frappuccino, we know
that we'd have an empty set, right?

100
00:06:30.289 --> 00:06:37.076
So, I could also do
actually check this out.

101
00:06:37.076 --> 00:06:41.339
I can do should Dot and,

102
00:06:44.413 --> 00:06:51.374
Have length At least one.

103
00:06:53.657 --> 00:06:54.867
Right, so this will now do both.

104
00:06:54.867 --> 00:06:58.968
It should both appear on the page and
there should be at least one of them.

105
00:06:58.968 --> 00:07:01.069
Let's verify that works, because that's a

106
00:07:09.822 --> 00:07:14.991
Let's see what we got,
could not find an alias or

107
00:07:14.991 --> 00:07:17.648
restaurant filter, and

108
00:07:26.566 --> 00:07:30.637
Did I not make that an alias in this one?

109
00:07:30.637 --> 00:07:31.751
All right.

110
00:07:31.751 --> 00:07:34.896
So, let's just go ahead and,

111
00:07:38.108 --> 00:07:41.724
We can just grab it like I could
make an alias I can also grab it.

112
00:07:41.724 --> 00:07:44.212
As well that seems easier in this case.

113
00:07:48.635 --> 00:07:49.801
So it's going through.

114
00:07:55.767 --> 00:07:59.952
If I put the only in the for loop,
obviously, it would do all of them, right?

115
00:07:59.952 --> 00:08:03.468
Because it's applied all of them,
so let's verify.

116
00:08:03.468 --> 00:08:06.505
But that was a thought that
I had as they were going and

117
00:08:06.505 --> 00:08:09.831
it felt equally as long just
explain that and wait for it.

118
00:08:09.831 --> 00:08:11.327
So yeah, now they are they're working.

119
00:08:11.327 --> 00:08:14.715
So, we're now making sure there is
at least one that matches, right?

120
00:08:14.715 --> 00:08:17.749
And this is a case where it's
a known data set, right?

121
00:08:17.749 --> 00:08:21.203
You might check for an empty state,
like when we get to network requests,

122
00:08:21.203 --> 00:08:22.940
you can look at the network request.

123
00:08:22.940 --> 00:08:26.397
You can mock in a network request, it's
always gonna have what you think, right?

124
00:08:26.397 --> 00:08:30.403
You can basically control reality as you
see fit to verify that you're getting

125
00:08:30.403 --> 00:08:31.928
the different excitations.

126
00:08:31.928 --> 00:08:35.465
You could have that network call,
always return an empty array,

127
00:08:35.465 --> 00:08:36.892
verify the entity state.

128
00:08:36.892 --> 00:08:37.677
You can have it,

129
00:08:37.677 --> 00:08:41.000
always return a set of known objects,
make sure they're on the page.

130
00:08:41.000 --> 00:08:44.401
That's for the app that I work on,
that's what I literally have.

131
00:08:44.401 --> 00:08:48.165
I stub out those network requests,
sure, nothing comes back,

132
00:08:48.165 --> 00:08:49.776
I wanna see an empty state.

133
00:08:49.776 --> 00:08:50.689
We haven't loaded yet.

134
00:08:50.689 --> 00:08:53.229
It shouldn't show a loading,
even if it's empty array.

135
00:08:53.229 --> 00:08:54.683
And so
I can kind of time all these things.

136
00:08:54.683 --> 00:08:58.476
We'll talk about how to wait for
certain network requests to come back.

137
00:08:58.476 --> 00:09:01.419
Fairly soon, we'll have that in place and

138
00:09:01.419 --> 00:09:06.427
kind of get the rest of the pieces that
we need to test those cases as well.

139
00:09:06.427 --> 00:09:12.047
So we have that and
the other one was the ratings.

140
00:09:12.047 --> 00:09:17.476
And so what I might do is if I only wanted
that alias, I could say something like,

141
00:09:17.476 --> 00:09:21.932
yeah, I could have done this earlier
too and so I could say, hey,

142
00:09:21.932 --> 00:09:28.270
now we're testing the ratings filter And

143
00:09:28.270 --> 00:09:33.880
we'll say, Before each right,

144
00:09:33.880 --> 00:09:36.020
so everything in the other
before each will still happen.

145
00:09:36.020 --> 00:09:39.244
So visit the page, but

146
00:09:39.244 --> 00:09:43.655
we will also get side I get, and

147
00:09:43.655 --> 00:09:48.932
let's go see what it is in this case.

148
00:09:48.932 --> 00:09:52.551
I have the problem of two chrome
at the Cypress Chrome and

149
00:09:52.551 --> 00:09:55.947
they my regular Chrome I
keep picking the wrong one.

150
00:09:55.947 --> 00:09:57.867
So, writing filter we'll go ahead and
again,

151
00:09:57.867 --> 00:10:00.994
we're just going to practice minimum
writing filter in this case copy it over

152
00:10:05.012 --> 00:10:13.761
That's gonna be the entire command
as- Reading this case, right?

153
00:10:13.761 --> 00:10:17.235
Whatever is helpful for you, and
now we don't have to get it each time.

154
00:10:17.235 --> 00:10:22.414
And so now for cost rating

155
00:10:22.414 --> 00:10:26.605
of ratings, well,

156
00:10:26.605 --> 00:10:32.030
say it should only display

157
00:10:32.030 --> 00:10:36.972
items with a rating of.

158
00:10:42.824 --> 00:10:45.009
Or hire.

159
00:10:45.009 --> 00:10:48.871
So, this is gonna like the process of
iterating through the array is the same.

160
00:10:48.871 --> 00:10:52.265
The assertion that we're
gonna need to make,

161
00:10:52.265 --> 00:10:57.834
I mean we kind of accidentally, because
the question was like get to see it,

162
00:10:57.834 --> 00:11:01.503
but we'll we'll see in
another use case as well.

163
00:11:01.503 --> 00:11:04.694
And so cool, we'll have that in place,
so we'll go through,

164
00:11:04.694 --> 00:11:07.295
should only have a rating
a given rating or higher.

165
00:11:07.295 --> 00:11:09.251
So, we'll decide,
I guess we'll get that alias.

166
00:11:13.161 --> 00:11:19.402
Ratings filter and this phase we'll
have to invoke vale property and

167
00:11:19.402 --> 00:11:24.359
we'll set it to rating and
we'll trigger the change.

168
00:11:28.724 --> 00:11:29.606
Cool.

169
00:11:29.606 --> 00:11:34.516
And then we basically wanna
make sure that anything that we

170
00:11:34.516 --> 00:11:37.326
find has the rating that we want.

171
00:11:37.326 --> 00:11:42.365
So, you can do side dot get, I think
before we did the popularity column,

172
00:11:42.365 --> 00:11:44.655
but I think it also has a class of-

173
00:11:48.778 --> 00:11:53.229
Have you learned it?

174
00:11:53.229 --> 00:11:56.816
And then I needed a text, right?

175
00:11:56.816 --> 00:11:58.651
I don't just need
the element I need the text.

176
00:11:58.651 --> 00:12:03.175
So I could do a dot then and
get the call the text or

177
00:12:03.175 --> 00:12:07.599
I could invoke the tax
property on that field.

178
00:12:07.599 --> 00:12:12.247
And then I can say, should,

179
00:12:12.247 --> 00:12:18.057
be, greater than or equal to,

180
00:12:18.057 --> 00:12:24.861
should it be GT E, that rating all right?

181
00:12:24.861 --> 00:12:28.248
Well, let's see kind of when
that one a little bit and

182
00:12:28.248 --> 00:12:30.296
now I'm gonna do the only here.

183
00:12:30.296 --> 00:12:35.256
So, that only these tests run,
because I have enough tests at this point,

184
00:12:35.256 --> 00:12:36.060
all right?

185
00:12:36.060 --> 00:12:38.578
It is called just rating,
is what I needed here.

186
00:12:46.179 --> 00:12:48.772
So we're invoking the text on that,
I'm not finding it.

187
00:12:48.772 --> 00:12:53.560
And so, the big question is,
I can stop this at this point.

188
00:12:53.560 --> 00:12:59.174
Do I have a TD with the popularity?

189
00:12:59.174 --> 00:13:05.620
This should be all of them should
all have at least a rating of one.

190
00:13:05.620 --> 00:13:07.968
And look at this.

191
00:13:07.968 --> 00:13:11.582
This is all of the ratings in this case,
right?

192
00:13:11.582 --> 00:13:15.582
So that selector when I call text
it's doing what jQuery does,

193
00:13:15.582 --> 00:13:18.680
it gives me just the text of each of them,
right?

194
00:13:18.680 --> 00:13:22.699
So in this case, I do need to iterate
through and get each one individually.

195
00:13:22.699 --> 00:13:27.221
Because invoking the text
method on the collection,

196
00:13:27.221 --> 00:13:33.260
gets me all of the ratings concatenated
into one giant number, right?

197
00:13:33.260 --> 00:13:36.144
And that is, it's not necessarily so

198
00:13:36.144 --> 00:13:39.668
Cyprus limitation that
is a jQuery behavior.

199
00:13:39.668 --> 00:13:45.058
So, in this case,
we might choose to then go back to what we

200
00:13:45.058 --> 00:13:51.229
did earlier in our workshop,
which is iterate over them, right?

201
00:13:51.229 --> 00:13:56.444
So, we can say each and
grab the element, and

202
00:13:56.444 --> 00:14:03.182
I could say, that I want to
expect that the elements text.

203
00:14:08.240 --> 00:14:12.890
And then you turn that into a number if I
want to use greater than or equal to, so

204
00:14:12.890 --> 00:14:16.842
I can put a plus in front of it,
which will coerce it into a number.

205
00:14:16.842 --> 00:14:22.047
You can see it's the same assertion,
but slightly different syntax.

206
00:14:22.047 --> 00:14:26.157
When we're writing the expect,
because we don't have the should chaining,

207
00:14:26.157 --> 00:14:27.410
we could figure it out.

208
00:14:27.410 --> 00:14:31.365
And that should be greater than or

209
00:14:31.365 --> 00:14:37.306
equal to the rating and
now they're all passing.

210
00:14:37.306 --> 00:14:44.097
And so what's kind of cool about this
is that, we've got effectively what?

211
00:14:44.097 --> 00:14:46.896
Seven tests for each rating.

212
00:14:46.896 --> 00:14:50.017
We can have a set for each property,
a set for all the restaurants.

213
00:14:50.017 --> 00:14:54.709
So, with not that many tests
that we're writing, we could-

214
00:14:58.487 --> 00:15:05.288
Have a pretty like comprehensive,
like set of tests on this, right?

215
00:15:05.288 --> 00:15:05.983
And yeah,

216
00:15:05.983 --> 00:15:11.100
it's only where it actually applies
like this is all pretty similar, right?

217
00:15:11.100 --> 00:15:14.764
Like you might not be able to get
this much for free, but like,

218
00:15:14.764 --> 00:15:18.304
there will always be some cases
we have different filters.

219
00:15:18.304 --> 00:15:22.271
And you can again programmatically kind
of figure out how you wanna design this.

220
00:15:22.271 --> 00:15:24.926
So, at least you're hitting every case,
right?

221
00:15:24.926 --> 00:15:28.475
Because it's one of those things where
yeah, most the time they are gonna

222
00:15:28.475 --> 00:15:32.444
behave the way you think, but when they
don't it's probably a big deal, right?

223
00:15:32.444 --> 00:15:38.166
As well so we go through we basically get
was probably a bit about 40 tests for

224
00:15:38.166 --> 00:15:40.200
really three assertions.

