WEBVTT

1
00:00:00.110 --> 00:00:05.910
Our challenge was to take a number
of different inputs, right?

2
00:00:05.910 --> 00:00:08.685
And basically control the Cyprus, and

3
00:00:08.685 --> 00:00:13.360
then evaluate that the result
is what we would expect, right?

4
00:00:13.360 --> 00:00:18.361
And really make sure that when
we set a different input field,

5
00:00:18.361 --> 00:00:20.870
that it did the thing, right?

6
00:00:20.870 --> 00:00:25.957
Because one of the things if you
play with it, you might have noticed

7
00:00:25.957 --> 00:00:32.218
that setting the value doesn't necessarily
for the DOM framework of your choice.

8
00:00:32.218 --> 00:00:33.918
Always update any of the state, so

9
00:00:33.918 --> 00:00:36.861
you both need to set the value
as well as trigger it, right?

10
00:00:36.861 --> 00:00:41.195
And that's why we have that second column
there, to make sure that like not only

11
00:00:41.195 --> 00:00:45.420
did we set it we also updated anything
that depends on it as well, right?

12
00:00:45.420 --> 00:00:50.389
And like I said, this is basically
true of any of the frameworks that

13
00:00:50.389 --> 00:00:56.010
you might be using, so it is kind
of agnostic across them as well.

14
00:00:56.010 --> 00:01:00.572
So for most of them,
they just have a selector for each, and

15
00:01:00.572 --> 00:01:05.515
so they have in this case,
we're gonna type I thought in there.

16
00:01:05.515 --> 00:01:08.889
And then we're gonna make
sure that the result contains

17
00:01:08.889 --> 00:01:11.629
the exact same thought in this case,
right?

18
00:01:11.629 --> 00:01:16.393
And this case the thought being that
ravioli is are a subset of public

19
00:01:16.393 --> 00:01:17.235
PopTarts.

20
00:01:17.235 --> 00:01:20.309
So, we saw what we can do with a select,
right, so

21
00:01:20.309 --> 00:01:24.430
I should be kind of just taking what
we saw in the previous example.

22
00:01:24.430 --> 00:01:29.898
And paying for, does anyone so
the Select is your favorite Avenger?

23
00:01:29.898 --> 00:01:31.950
Does anyone anyone liked it?

24
00:01:31.950 --> 00:01:35.880
I only pick the original six,
it's not like an end game situation here.

25
00:01:37.920 --> 00:01:41.474
Mostly that wasn't typing that all out,
does anyone wanna cast a vote,

26
00:01:41.474 --> 00:01:43.640
I mean would you have to change it?

27
00:01:43.640 --> 00:01:48.190
From my choice, let's go with store,
so we'll go ahead and

28
00:01:48.190 --> 00:01:51.950
we know this one we just
call select on it, right?

29
00:01:53.930 --> 00:01:55.667
And then we should see
that on the other side,

30
00:01:55.667 --> 00:01:57.510
we will just use contains in this case,
right?

31
00:01:57.510 --> 00:02:01.879
Cuz we're just verifying that we've
updated the DOM appropriately,

32
00:02:01.879 --> 00:02:04.001
we'll check on that one a second.

33
00:02:04.001 --> 00:02:08.252
The checkboxes on the other hand,
let's go look at how it behaves and

34
00:02:08.252 --> 00:02:10.758
see what we would like to do in this case.

35
00:02:10.758 --> 00:02:15.043
So checking one displays it checking two,
basically or

36
00:02:15.043 --> 00:02:19.982
three gives some amount of comma
separated values in this case.

37
00:02:19.982 --> 00:02:24.931
So let's go ahead and we can either
pick one or something along those lines.

38
00:02:24.931 --> 00:02:28.594
If you're unclear on what
the right selectors are,

39
00:02:28.594 --> 00:02:33.755
you have the kind of ability to go either
into you can look at the elements to

40
00:02:33.755 --> 00:02:39.353
in the regular Chrome Inspector, or
you can use a selector playground as well.

41
00:02:39.353 --> 00:02:41.666
I think that these also
have data attributes,

42
00:02:41.666 --> 00:02:45.235
it's interesting that the playground
wants to use the for attribute.

43
00:02:45.235 --> 00:02:48.704
But that also works as well and
there's only one on the page, so

44
00:02:48.704 --> 00:02:51.917
like if you're ever like I
don't know this is what I want.

45
00:02:51.917 --> 00:02:55.829
You can at least get some of
the data around that as well,

46
00:02:55.829 --> 00:02:57.584
pretty sure let's see.

47
00:02:57.584 --> 00:03:02.512
Grab one of these is because
the label has the four and

48
00:03:02.512 --> 00:03:07.560
then there is the actual
data test attribute as well.

49
00:03:07.560 --> 00:03:12.990
So you can use either one of those
depending on what 20 like better honestly.

50
00:03:13.990 --> 00:03:17.652
So in this case, we will go ahead, so

51
00:03:17.652 --> 00:03:22.496
in this we have it is saying
it contains none, and

52
00:03:22.496 --> 00:03:25.580
then we can change the result.

53
00:03:25.580 --> 00:03:31.042
So why don't we go ahead,
we'll make sure it starts with none,

54
00:03:31.042 --> 00:03:35.710
let's take tomato, sardines,
and then the result.

55
00:03:38.370 --> 00:03:44.216
I guess you could theoretically
do each one separately,

56
00:03:44.216 --> 00:03:48.843
you should just contain these two words,
but

57
00:03:48.843 --> 00:03:52.160
let's try tomato, sardines.

58
00:03:52.160 --> 00:03:54.893
So these are we actually have
to this won't do anything yet,

59
00:03:54.893 --> 00:03:58.300
this test will fail because we
didn't actually check them, right?

60
00:03:58.300 --> 00:04:01.439
You can click them we're gonna use
the check one in this case, but

61
00:04:01.439 --> 00:04:03.335
let's just watch it fail in this case.

62
00:04:03.335 --> 00:04:07.070
You can see like, hey,
I look for 4000 milliseconds,

63
00:04:07.070 --> 00:04:09.922
which sounds a lot longer
than four seconds.

64
00:04:09.922 --> 00:04:15.410
But look for 4000 milliseconds to see that
over in here and it didn't happen, right?

65
00:04:15.410 --> 00:04:18.471
Because some things happen maybe
on the next event loop cycle, or

66
00:04:18.471 --> 00:04:21.099
maybe they're had you an Ajax request,
so on so forth.

67
00:04:21.099 --> 00:04:23.789
So it doesn't go like
immediately it wasn't there,

68
00:04:23.789 --> 00:04:27.396
it will normally give you a little bit
of a grace period and then give up.

69
00:04:27.396 --> 00:04:30.116
This is like in a lot of cases
not something that a lot

70
00:04:30.116 --> 00:04:32.470
of the predecessors to cybers did, right?

71
00:04:32.470 --> 00:04:34.605
If it wasn't there your test failed, and

72
00:04:34.605 --> 00:04:37.049
you'd play the game of
like you'd open up a PR.

73
00:04:37.049 --> 00:04:41.207
And you'd spend almost as much time as to
write the feature figuring out why your

74
00:04:41.207 --> 00:04:42.660
test cases were flaky.

75
00:04:42.660 --> 00:04:46.234
Cuz maybe like some service that you
didn't have stubbed out was taking too

76
00:04:46.234 --> 00:04:48.370
long or something along those lines.

77
00:04:48.370 --> 00:04:53.149
So in this case, let's go ahead and
we can flip back,

78
00:04:53.149 --> 00:04:56.349
and should just be able to check it.

79
00:04:59.957 --> 00:05:02.599
So we'll check both of those and
we'll see what we get.

80
00:05:02.599 --> 00:05:07.694
Now we see that one passes, and the reason
we don't see it on the page at the end,

81
00:05:07.694 --> 00:05:12.661
cuz we're revisiting the page for
the first time before every test, right?

82
00:05:12.661 --> 00:05:15.533
We could theoretically have one
test that did all of these,

83
00:05:15.533 --> 00:05:17.491
that would arguably be faster, right?

84
00:05:17.491 --> 00:05:20.816
Cuz we wouldn't reset the page go and
reload all those things, so

85
00:05:20.816 --> 00:05:24.081
it all depends, you might want
to have everything separated for

86
00:05:24.081 --> 00:05:26.213
the cases of learning gather separated.

87
00:05:26.213 --> 00:05:30.238
So you can like figure out which one is
failing, but there's nothing stopping you

88
00:05:30.238 --> 00:05:33.093
from just having a run that does
all the things on the page,

89
00:05:33.093 --> 00:05:35.220
and expects things to
end up a certain way.

90
00:05:35.220 --> 00:05:39.779
All right, cool So
radio buttons are also you can also

91
00:05:39.779 --> 00:05:44.657
check them as well, so
in this case, we can check Ringo.

92
00:05:44.657 --> 00:05:48.593
Which is the one we kind of have
preloaded, not my favorite beatle, but

93
00:05:48.593 --> 00:05:49.322
it's fine.

94
00:05:51.238 --> 00:05:53.434
It's Paul, in case you were all wondering.

95
00:05:54.667 --> 00:06:00.011
So that should contain Ringo in this case,
as we go through, perfect.

96
00:06:00.011 --> 00:06:05.350
All right, so the color input,
so this one has a value that is

97
00:06:05.350 --> 00:06:11.420
some hexadecimal color, but
we clearly can't type into it.

98
00:06:11.420 --> 00:06:15.950
It's not really a select, what do we do?

99
00:06:15.950 --> 00:06:19.113
This one is very similar
to the range operator,

100
00:06:19.113 --> 00:06:24.190
where we have to basically set its value,
and then invote the change event.

101
00:06:26.340 --> 00:06:31.420
So here we'll say we'll invoke the value,
and

102
00:06:31.420 --> 00:06:39.422
we'll set this to I don't have a favorite
hex color that they wanna share.

103
00:06:39.422 --> 00:06:40.730
&gt;&gt; Abcdef.

104
00:06:40.730 --> 00:06:47.329
&gt;&gt; Abcdef, suite and
then we'll trigger an input event.

105
00:06:50.264 --> 00:06:54.964
And then the value I'm pretty
sure that the behavior of

106
00:06:54.964 --> 00:06:59.254
the actual HTML element
is it keeps it lowercase,

107
00:06:59.254 --> 00:07:04.377
regardless of what we type in,
but we can find that out too.

108
00:07:04.377 --> 00:07:07.174
A, b, c, d, e, f.

109
00:07:11.379 --> 00:07:15.716
All right, I just have to know.

110
00:07:15.716 --> 00:07:18.167
&gt;&gt; Brownish red I think.

111
00:07:18.167 --> 00:07:21.190
&gt;&gt; No so it's a bluish, right?

112
00:07:21.190 --> 00:07:26.834
Cuz the higher values are on the, yeah,
I quite like that color actually,

113
00:07:26.834 --> 00:07:30.428
it's like one might even
call it a periwinkle.

114
00:07:30.428 --> 00:07:36.766
All right, so the date input this one's
I kinda alluded to in the setup for

115
00:07:36.766 --> 00:07:41.282
this, what you see is not
necessarily what you get.

116
00:07:41.282 --> 00:07:47.012
So this is a date of input you can kind of
click on any of the different date fields,

117
00:07:47.012 --> 00:07:49.642
you get this cool built in calendar.

118
00:07:49.642 --> 00:07:54.061
But like there's a bunch of pseudo
elements that are kinda hard to get to, so

119
00:07:54.061 --> 00:07:58.820
in this case, again, we would probably
set the value and invoke a change.

120
00:07:58.820 --> 00:08:02.896
And it's kinda interesting to think about,
what the use case would be for

121
00:08:02.896 --> 00:08:03.890
me testing this.

122
00:08:03.890 --> 00:08:08.151
It's probably, I think about the use case
that I most recently used on this one

123
00:08:08.151 --> 00:08:11.740
which is I should change it that
should trigger an API request.

124
00:08:11.740 --> 00:08:15.355
And I wanted to make sure that the query
params going to the API request,

125
00:08:15.355 --> 00:08:18.380
were the correct ones, and
that triggered an API request.

126
00:08:18.380 --> 00:08:23.290
So the actual like, can I click
a native Chrome or Firefox date and

127
00:08:23.290 --> 00:08:25.891
field is not that important to me.

128
00:08:25.891 --> 00:08:30.729
I assume that the chromium team or
the human Mozilla

129
00:08:30.729 --> 00:08:35.241
have tested the actual
mechanisms of that box.

130
00:08:35.241 --> 00:08:39.995
I usually want the downstream
effects of that change, right?

131
00:08:39.995 --> 00:08:45.283
So in that case, we would go ahead and
we would invoke that value method again.

132
00:08:48.812 --> 00:08:51.739
And we got to put it in year, month, day,

133
00:08:51.739 --> 00:08:57.028
cuz that is effectively the normalized
structure that is keeping that in.

134
00:08:57.028 --> 00:09:00.876
So we'll do, I don't have a favorite day,

135
00:09:00.876 --> 00:09:05.453
what's today is 2021-12-17, cool, so

136
00:09:05.453 --> 00:09:11.370
I put in my birthday,
I don't need to dox myself right now.

137
00:09:11.370 --> 00:09:15.779
And we'll go ahead and basically
verify that is what gets rendered at

138
00:09:15.779 --> 00:09:19.030
the other end,
because if we put in something.

139
00:09:19.030 --> 00:09:22.833
I am actually somewhat curious what
happens if we put in invalid data,

140
00:09:22.833 --> 00:09:25.570
we invoke that what it does,
we can find out.

141
00:09:25.570 --> 00:09:27.299
So I do have to get rid of that only,

142
00:09:27.299 --> 00:09:30.780
otherwise none of this will
work the way I planned.

143
00:09:30.780 --> 00:09:35.289
So we'll go ahead and again this
will contains what we think it does.

144
00:09:42.501 --> 00:09:45.626
Cool, out of my head, just for

145
00:09:45.626 --> 00:09:50.197
my own curiosity, let's go ahead and just,

146
00:09:50.197 --> 00:09:55.149
I wonder if you give it
a good Americanized date.

147
00:09:55.149 --> 00:09:56.622
What it will do in that sense?

148
00:09:59.124 --> 00:10:04.814
Actually it gets a little funky,
where the value that renders is correct,

149
00:10:04.814 --> 00:10:08.713
but the Date field doesn't
know what to do with it.

150
00:10:08.713 --> 00:10:09.854
So we learned something today.

151
00:10:09.854 --> 00:10:15.270
All right, the range that we saw
before that is again the same move.

152
00:10:15.270 --> 00:10:19.821
And what we'll see a little bit is there
are ways to kind of add additional

153
00:10:19.821 --> 00:10:21.680
functionality to Cypress.

154
00:10:21.680 --> 00:10:25.006
And so this might be a thing that you
would choose necessarily add is what we

155
00:10:25.006 --> 00:10:26.142
call a command, right?

156
00:10:26.142 --> 00:10:30.762
And there are ways to make commands
that becomes the start at the chain,

157
00:10:30.762 --> 00:10:32.610
intermediary in the chain,

158
00:10:32.610 --> 00:10:36.315
and you can create kind of your
own custom pieces as well.

159
00:10:36.315 --> 00:10:40.527
I usually don't,
because sometimes I want different events,

160
00:10:40.527 --> 00:10:44.196
there's not enough of them
to really justify it for me.

161
00:10:44.196 --> 00:10:50.099
So what are the options here,
it's just it's probably

162
00:10:50.099 --> 00:10:55.009
one to 10, so we'll say six, and will say.

163
00:10:56.152 --> 00:11:00.479
26 and we got a clear that only.

164
00:11:04.447 --> 00:11:10.150
Great, and so that one,
Anyone know what I did wrong?

165
00:11:13.781 --> 00:11:20.419
I accidentally told you before, I changed
the value, I didn't trigger anything.

166
00:11:23.374 --> 00:11:26.608
I'd love to tell you that I
purposely mentioned it earlier and

167
00:11:26.608 --> 00:11:29.544
then forgot to do it, I'd love for
that to be the story.

168
00:11:29.544 --> 00:11:34.286
In fact, that's totally what happened,
I didn't make a mistake,

169
00:11:34.286 --> 00:11:36.420
I don't make mistakes.

170
00:11:36.420 --> 00:11:44.530
I just cursed myself for the remainder
of this workshop, so all right, cool.

171
00:11:44.530 --> 00:11:48.064
The file input like I mentioned
before you can do the same trick,

172
00:11:48.064 --> 00:11:50.237
there is I'll show you in a little bit.

173
00:11:50.237 --> 00:11:52.051
There is a plugin also,

174
00:11:52.051 --> 00:11:57.695
that gives you a new method that Cypress
does include called Attach File.

175
00:11:57.695 --> 00:12:00.058
And it will allow you to do that as well,
but

176
00:12:00.058 --> 00:12:04.240
we can also set it as a value in this
case, it is kind of interesting.

177
00:12:04.240 --> 00:12:07.665
I don't actually think I have a file on
my desktop, but is easily accessible, and

178
00:12:07.665 --> 00:12:10.780
I don't feel like digging through
my file system at this moment.

179
00:12:10.780 --> 00:12:14.493
But essentially,
if you like show the file on the page,

180
00:12:14.493 --> 00:12:18.686
it's like C colon slash fake
data slash the file name, right?

181
00:12:18.686 --> 00:12:23.112
And so that's actually how
the the normal input itself behaves, but

182
00:12:23.112 --> 00:12:27.843
under the hood for any browser that
does not support any of these different

183
00:12:27.843 --> 00:12:31.293
types of infield,
they all fall back to a textfield.

184
00:12:31.293 --> 00:12:35.619
So under the hood, they are all text
inputs at the end of the day for

185
00:12:35.619 --> 00:12:38.067
browsers that don't support them.

186
00:12:38.067 --> 00:12:42.324
The same way if you just said input
type and you just gave it like pizza,

187
00:12:42.324 --> 00:12:44.359
it would be a text field, right?

188
00:12:44.359 --> 00:12:47.632
And that is the default behavior
with the progressive enhancement

189
00:12:47.632 --> 00:12:49.390
of those features as we go through.

