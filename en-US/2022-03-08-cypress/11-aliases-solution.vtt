WEBVTT

1
00:00:00.090 --> 00:00:03.761
So we wanna take some of the tedium
from finding some of the selectors like

2
00:00:03.761 --> 00:00:07.630
because, again, like there's not that
many things on this page, right?

3
00:00:07.630 --> 00:00:11.092
There's a list of packed items is also
unpacked items, there's some inputs,

4
00:00:11.092 --> 00:00:12.184
there's some buttons.

5
00:00:12.184 --> 00:00:15.833
But I love to do, it's just to hold on to
those and not have to go searching for

6
00:00:15.833 --> 00:00:17.440
them all the time, right?

7
00:00:17.440 --> 00:00:20.640
So we use some aliases
in order to do that.

8
00:00:20.640 --> 00:00:23.019
What I might try to do
is to the filter and

9
00:00:23.019 --> 00:00:26.540
maybe we'll move one from
one list to the other.

10
00:00:26.540 --> 00:00:31.293
So if I think I'm gonna use
them throughout a set of tests,

11
00:00:31.293 --> 00:00:36.380
it probably behooves me to do
that in the before each block.

12
00:00:36.380 --> 00:00:40.134
Otherwise, I will have to do these
in every test at which point

13
00:00:40.134 --> 00:00:44.487
I've kind of defeated the purpose
of storing them in aliases, right?

14
00:00:44.487 --> 00:00:47.157
Like why wouldn't I just do them once, and

15
00:00:47.157 --> 00:00:50.953
then have a reference to them
that I can get my hands on later?

16
00:00:50.953 --> 00:00:54.914
One caveat that I will just
kind of put out now again,

17
00:00:54.914 --> 00:01:00.603
to put them into a bookmark in your head
is runs before you do anything else.

18
00:01:00.603 --> 00:01:03.863
Which means if you go looking for things
that are not on the page yet, right?

19
00:01:03.863 --> 00:01:08.441
For instance, like the one you're gonna
click the button add to the page,

20
00:01:08.441 --> 00:01:10.923
it's not gonna find anything, right?

21
00:01:10.923 --> 00:01:14.685
And so
you're gonna put the rules of the sun,

22
00:01:14.685 --> 00:01:18.057
an alias rule is a rule of again, right?

23
00:01:18.057 --> 00:01:21.875
If you go looking for something on
the initial page, and it's not there yet,

24
00:01:21.875 --> 00:01:25.813
all your tests are gonna fail or whatever
tests we're using we're gonna fail,

25
00:01:25.813 --> 00:01:27.952
because it's not on the page yet, right?

26
00:01:27.952 --> 00:01:31.252
So this only works for
things that are there before each test.

27
00:01:31.252 --> 00:01:33.540
Otherwise, you can either
have a nested describe,

28
00:01:33.540 --> 00:01:35.312
you can do a whole bunch of other things.

29
00:01:35.312 --> 00:01:37.971
But if your plan was to like store one and

30
00:01:37.971 --> 00:01:41.852
then navigate to that page afterwards,
it won't work.

31
00:01:41.852 --> 00:01:44.070
Because when you went to go looking for

32
00:01:44.070 --> 00:01:46.990
it you're not on the page that had it yet,
right?

33
00:01:46.990 --> 00:01:50.294
So even if I put all these before
I visited the page Itself,

34
00:01:50.294 --> 00:01:53.937
they will fail for a good reason,
because they weren't there,

35
00:01:53.937 --> 00:01:56.920
because they didn't go to
the page where they were.

36
00:01:58.390 --> 00:02:00.813
Okay, so what if we wanted to get,

37
00:02:00.813 --> 00:02:04.742
we know we wanna have at least
the filter component, and

38
00:02:04.742 --> 00:02:09.946
we wanna have maybe all the items,
the packed items in the unpacked item?

39
00:02:09.946 --> 00:02:13.020
So let's start with the filter items,

40
00:02:13.020 --> 00:02:16.940
you can verify this by
going into the playground.

41
00:02:18.070 --> 00:02:22.540
So we've got the filter items,
we'll call it as you can choose,

42
00:02:22.540 --> 00:02:28.500
you wanna call it filter input, item
filter, we'll call it filter input, right?

43
00:02:28.500 --> 00:02:33.920
So we've got that, and now I need the
three lists, and we saw in the previous

44
00:02:33.920 --> 00:02:38.683
tests before that they are items
items unpacked and items packed.

45
00:02:38.683 --> 00:02:43.099
So we can go ahead, and
we can try that out, and

46
00:02:43.099 --> 00:02:46.497
we'll say, all items, and yeah,

47
00:02:46.497 --> 00:02:52.503
these are strings you like camel case,
you can use camel case,

48
00:02:52.503 --> 00:02:57.854
you like hyphenation you use
kebab case as they call it.

49
00:02:57.854 --> 00:03:01.426
I don't even know what I like honestly,

50
00:03:01.426 --> 00:03:06.479
it depends on the project,
I think like kebab case more.

51
00:03:06.479 --> 00:03:09.866
But then I think about it in terms of
JavaScript variables, it doesn't matter

52
00:03:09.866 --> 00:03:13.502
just don't get your teammates to
hate you and just be consistent.

53
00:03:13.502 --> 00:03:17.799
So they're just strings,
whatever you wanna call them will work.

54
00:03:17.799 --> 00:03:21.685
In this case, I started writing
camel case, so here we are,

55
00:03:21.685 --> 00:03:25.269
because you can argue that
with HTML they have hyphens,

56
00:03:25.269 --> 00:03:28.340
I'm not arguing though
with anyone right now.

57
00:03:29.410 --> 00:03:34.661
Items unpacked should be,
we'll call that unpacked items, and

58
00:03:34.661 --> 00:03:40.390
then the packed ones are like
the unpacked ones with two letters less.

59
00:03:40.390 --> 00:03:43.580
So now, I have these as aliases
that I'm setting before every test,

60
00:03:43.580 --> 00:03:45.837
which means I don't have to go looking for
them.

61
00:03:45.837 --> 00:03:52.100
I just reference the ones that I need, and
do the things that I need to do with them.

62
00:03:52.100 --> 00:03:57.072
So if I wanted to kind of do a version
of the filtering that I saw before

63
00:03:57.072 --> 00:04:02.685
I could say something along the lines
of it should be filter items.

64
00:04:02.685 --> 00:04:07.664
It's not the best test name,
but that's life going, so

65
00:04:07.664 --> 00:04:14.795
we've got that, it should filter items,
it just should filter items.

66
00:04:14.795 --> 00:04:21.214
And so here we can say, okay,
side I get in this case,

67
00:04:21.214 --> 00:04:27.638
we're just gonna say at filter input,
type iPhone,

68
00:04:27.638 --> 00:04:32.650
and if they do that all the items, right?

69
00:04:32.650 --> 00:04:41.180
So I could say,
Go look at all the items on the page,

70
00:04:41.180 --> 00:04:47.333
all atoms should not
contain the text hoodie,

71
00:04:47.333 --> 00:04:54.870
which does not have the letters
iPhone in it, right?

72
00:04:54.870 --> 00:04:58.174
So let's go ahead I think I need to
switch to the other testers points,

73
00:04:58.174 --> 00:05:00.470
we'll stop those,
we'll go over the aliases.

74
00:05:04.110 --> 00:05:08.765
All right, and that asserts that it is not
there, and you can see on the page what is

75
00:05:08.765 --> 00:05:12.902
there, so you can visually confirm
that the test is doing what you want.

76
00:05:12.902 --> 00:05:19.369
We could argue that another test like we
wrote previously was to do the same thing,

77
00:05:19.369 --> 00:05:23.492
but verify that what we think
is on there as well, but

78
00:05:23.492 --> 00:05:29.350
this is mostly getting us comfortable
in this case with the aliases.

79
00:05:29.350 --> 00:05:35.340
All right, let's live code one more here
where I'm gonna get to the point where I

80
00:05:35.340 --> 00:05:40.819
find one, I click it, and then I hope
that it is on the other side, right?

81
00:05:44.959 --> 00:05:50.556
So should do that, we wanna verify
something along those lines,

82
00:05:50.556 --> 00:05:56.252
which means go find one,
I don't even really care which one it is,

83
00:05:56.252 --> 00:06:01.780
click it, and then verify that
is now in the other side, right?

84
00:06:01.780 --> 00:06:05.466
So go ahead, and we'll say,

85
00:06:05.466 --> 00:06:10.929
I'm doing this one just
it should move items

86
00:06:12.949 --> 00:06:17.149
From one list to the other, right?

87
00:06:17.149 --> 00:06:22.697
And so we'll say That,

88
00:06:22.697 --> 00:06:26.938
all right, from the unpacked items, so

89
00:06:26.938 --> 00:06:33.569
we'll say side I get I unpacked items,
go get me the first one.

90
00:06:33.569 --> 00:06:37.719
And again, like in this case,
could I do that in the before each, right?

91
00:06:37.719 --> 00:06:39.776
But maybe added one to
the screen this is again,

92
00:06:39.776 --> 00:06:43.180
you don't have to be in the before each,
it's whenever you think you have it.

93
00:06:43.180 --> 00:06:47.117
If you wanna share it amongst all
the tests it needs to end before each,

94
00:06:47.117 --> 00:06:50.319
if it's bespoke to one,
then you just need a reference to

95
00:06:50.319 --> 00:06:53.277
it that works as well is
like I don't even question.

96
00:06:53.277 --> 00:07:00.530
I don't know, cool, and then now,
I have a reference to this one,

97
00:07:00.530 --> 00:07:04.875
so I have it as the overall item, right?

98
00:07:04.875 --> 00:07:11.190
And I also can then go find this
checkbox for instance, right?

99
00:07:11.190 --> 00:07:15.169
And so I can do something along
those lines, I'm curious this

100
00:07:15.169 --> 00:07:20.064
is like how I would literally do it if I
was writing the test which is do I like,

101
00:07:20.064 --> 00:07:22.460
yeah, I wrote the sample apps.

102
00:07:22.460 --> 00:07:27.106
I don't even really remember did I do
that trick where you put the label

103
00:07:27.106 --> 00:07:28.770
around the whole thing?

104
00:07:28.770 --> 00:07:31.390
So you click on one it moves,
did I not do it?

105
00:07:31.390 --> 00:07:32.360
Do I need the checkbox?

106
00:07:32.360 --> 00:07:37.009
So what I'm gonna do in this case is go
ahead, and just click on that one, and

107
00:07:37.009 --> 00:07:39.710
see if I get the effect
that I want visually.

108
00:07:39.710 --> 00:07:44.309
Again, this is how if I was literally
writing a test at the portal,

109
00:07:44.309 --> 00:07:49.499
how I would probably start to like very
iteratively put together the test.

110
00:07:49.499 --> 00:07:53.129
Because yeah, like I'm fine doing that,
because then the idea is I've done this.

111
00:07:53.129 --> 00:07:57.025
And now it'll run automated from
that point forward, so we'll go and

112
00:07:57.025 --> 00:08:01.934
find the item question And
we'll go ahead and

113
00:08:01.934 --> 00:08:05.339
we'll click it, Right?

114
00:08:08.079 --> 00:08:10.291
And so let's say, let's go ahead, and

115
00:08:10.291 --> 00:08:14.430
just rerun this test to see
doesn't look like anything moved.

116
00:08:14.430 --> 00:08:19.146
Looks like, you're unclear what I
maybe have to find the label in

117
00:08:19.146 --> 00:08:21.975
this case rather than the LI itself, so

118
00:08:21.975 --> 00:08:30.600
we could do something As well.

119
00:08:32.480 --> 00:08:35.662
Okay, this one I can only
click on a single element, and

120
00:08:35.662 --> 00:08:37.570
I gave it four elements, right?

121
00:08:37.570 --> 00:08:38.950
That's interesting, right?

122
00:08:38.950 --> 00:08:44.160
Because I thought this was
the first one in there, cool.

123
00:08:44.160 --> 00:08:49.690
So not totally sure in this case,
what's happening is clicking worked.

124
00:08:49.690 --> 00:08:53.313
One of the things I can do
as I go through is yeah,

125
00:08:53.313 --> 00:08:57.585
I didn't question seems to
be the entire list, right?

126
00:08:57.585 --> 00:09:01.110
Yeah.

127
00:09:01.110 --> 00:09:07.730
&gt;&gt; Is it returning an array,
because we don't have the LI?

128
00:09:07.730 --> 00:09:11.704
&gt;&gt; It is probably, if this has the h3,

129
00:09:11.704 --> 00:09:17.216
this like if I go up here,
I can kind of see that pin,

130
00:09:17.216 --> 00:09:21.465
it's now going to my console, right?

131
00:09:21.465 --> 00:09:24.163
It's the section, right?

132
00:09:24.163 --> 00:09:27.310
So yeah, it's working, right?

133
00:09:27.310 --> 00:09:30.459
It's just not what I thought
should be in that case,

134
00:09:30.459 --> 00:09:34.269
which is yeah, unpacked items,
the first one is the section.

135
00:09:34.269 --> 00:09:38.615
There's only one thing it is the section
I have a no hope in this case, right?

136
00:09:38.615 --> 00:09:42.203
But again, this is the interesting
part of the debugging,

137
00:09:42.203 --> 00:09:46.815
which is you get every step along the way
to see what it was as we went through.

138
00:09:46.815 --> 00:09:50.119
So I can go up, I can pin it,
which one will it log into my console and

139
00:09:50.119 --> 00:09:52.000
show me the element in this case.

140
00:09:52.000 --> 00:09:56.612
But also you notice as I kind of hovered
over I can see what I got every moment.

141
00:09:56.612 --> 00:09:59.333
So I'm not just throwing
code at the wall here,

142
00:09:59.333 --> 00:10:03.300
I am literally kind of just watching
as it steps through everything.

143
00:10:03.300 --> 00:10:05.946
And this is where the tool itself
becomes incredibly powerful,

144
00:10:05.946 --> 00:10:07.470
because like there's a unit test.

145
00:10:07.470 --> 00:10:11.290
Let's be honest, what we'd be doing
right now, console logging, right?

146
00:10:11.290 --> 00:10:14.329
But I don't have to do that, because I
actually have a visual tool around us.

147
00:10:15.540 --> 00:10:20.040
All right, so
what I might do in this case,

148
00:10:20.040 --> 00:10:25.665
really because we want to
make this a little bit better

149
00:10:25.665 --> 00:10:31.680
is I probably want to go find
an ally in this case, right?

150
00:10:31.680 --> 00:10:39.570
Maybe I actually wanna find the label I'm
not totally sure yet, what I wanna do.

151
00:10:39.570 --> 00:10:41.882
So we'll go ahead and we'll try it out,

152
00:10:41.882 --> 00:10:44.470
this point you can see that it moved,
right?

153
00:10:44.470 --> 00:10:48.419
So now the actual exercising
of this totally works,

154
00:10:48.419 --> 00:10:52.726
and we now just wanna verify
that what ever we clicked on,

155
00:10:52.726 --> 00:10:56.423
in this case,
it was the toothbrush moved over.

156
00:10:56.423 --> 00:10:59.071
And again, like if you have to hard
code in toothbrush I guess find for

157
00:10:59.071 --> 00:11:01.092
like as with dummy data
when you're just learning.

158
00:11:01.092 --> 00:11:05.043
But ideally, something where
you can refer to the thing and

159
00:11:05.043 --> 00:11:08.450
make sure whatever it is
moved is probably better.

160
00:11:08.450 --> 00:11:11.323
So the item in question, right?

161
00:11:11.323 --> 00:11:16.336
Is the first LI, so
I could say, let's try this was

162
00:11:16.336 --> 00:11:21.600
a site I get we're gonna say,
packed items, right?

163
00:11:21.600 --> 00:11:27.950
And then we're gonna see if we can find,
do I wanna look for the text?

164
00:11:27.950 --> 00:11:32.619
I'm not totally sure,
see this works actually.

165
00:11:35.279 --> 00:11:38.430
Like my sense is like, this is where
we're moving from the page and

166
00:11:38.430 --> 00:11:41.320
putting back on it's maybe
not the exact same item.

167
00:11:41.320 --> 00:11:44.575
So yeah, the only works of the get, and so

168
00:11:44.575 --> 00:11:49.040
really we kind of just need
the text in this case, right?

169
00:11:49.040 --> 00:11:53.465
I wanna make sure that something with that
same label exists, because depending on

170
00:11:53.465 --> 00:11:56.876
the framework, it might totally
rip that element off the page,

171
00:11:56.876 --> 00:11:59.802
and put a new element on
rather than moving it, right?

172
00:11:59.802 --> 00:12:03.854
This is felt in this case, by like we act
reconciler is gonna do different things

173
00:12:03.854 --> 00:12:05.247
depending on the use case.

174
00:12:05.247 --> 00:12:09.953
You don't wanna like hard-code your
implementation to the nuances of whatever

175
00:12:09.953 --> 00:12:12.060
reconciler compiler is doing.

176
00:12:12.060 --> 00:12:16.900
You wanna basically make sure that
the thing is what you expect, right?

177
00:12:16.900 --> 00:12:22.762
So I could also like have an alias for
the label, right?

178
00:12:22.762 --> 00:12:27.711
That seems good, because then I could
theoretically get its text, right?

179
00:12:27.711 --> 00:12:32.098
So I could, and
this is probably a little like for

180
00:12:32.098 --> 00:12:36.271
one test like I was doing this for
a lot more, so

181
00:12:36.271 --> 00:12:42.700
we could do what we had there, and
we could say item label, right?

182
00:12:42.700 --> 00:12:48.975
And then we could also again,
depending on what I need for

183
00:12:48.975 --> 00:12:54.073
the test in this case,
since I will be clicking

184
00:12:54.073 --> 00:12:58.776
on it in a second,
I could go ahead and say,

185
00:12:58.776 --> 00:13:03.651
item label, and
then I can invoke its text.

186
00:13:03.651 --> 00:13:07.542
And I can store that
item name I don't like,

187
00:13:07.542 --> 00:13:13.021
the navy part when I'm making
this up is probably a weak spot.

188
00:13:13.021 --> 00:13:19.401
But now, we wanna say, go ahead, and
we still need to click on it, right?

189
00:13:19.401 --> 00:13:21.304
So here, we'll do, and

190
00:13:21.304 --> 00:13:26.020
I'm pretty sure there's fun
stuff you can do like remember,

191
00:13:26.020 --> 00:13:32.110
like you go down and up across the chain
since I have these, I'm not doing that.

192
00:13:32.110 --> 00:13:39.340
So go ahead and get the item label,
And click on it.

193
00:13:40.540 --> 00:13:44.210
So really these first three, I'm making
a bunch of values that I can reference.

194
00:13:44.210 --> 00:13:48.780
Go find me the first item,
go ahead and find this label.

195
00:13:48.780 --> 00:13:51.053
One would argue I could probably
make this one alias as well,

196
00:13:51.053 --> 00:13:53.260
maybe we'll try it in a second.

197
00:13:53.260 --> 00:13:57.348
Then go ahead and click on it, and

198
00:13:57.348 --> 00:14:05.890
then I wanna make sure that the packed
items contains this item name.

199
00:14:05.890 --> 00:14:11.400
And so what I might do here is get
that as an actual value, right?

200
00:14:11.400 --> 00:14:14.942
And so this again,
if you have two cypress things, and

201
00:14:14.942 --> 00:14:19.562
you wanna be like normally,
if you're just writing this in a unitest,

202
00:14:19.562 --> 00:14:24.430
you'd be like expect variable to
equal whatever, other variable.

203
00:14:24.430 --> 00:14:29.433
In this cases, there are chains
how do you mix two chains?

204
00:14:29.433 --> 00:14:35.124
So one of them I should
probably get down in this case,

205
00:14:35.124 --> 00:14:38.802
I could say side I get an item name.

206
00:14:38.802 --> 00:14:43.920
And we could say then with the actual

207
00:14:43.920 --> 00:14:49.208
text go ahead look the packed items,

208
00:14:49.208 --> 00:14:52.460
do you have that text?

209
00:14:56.280 --> 00:14:59.290
Works, you see that it does, right?

210
00:14:59.290 --> 00:15:01.722
So let's just talk about
this one more time,

211
00:15:01.722 --> 00:15:04.157
without a big intelligence
thing in the way.

212
00:15:04.157 --> 00:15:08.214
Again, since I'm not really using
unpacked items anything, but

213
00:15:08.214 --> 00:15:12.270
finding the first one, I could
probably go find the label as well or

214
00:15:12.270 --> 00:15:16.630
the first label, I'm guessing,
I could probably just swap this out.

215
00:15:16.630 --> 00:15:18.210
Let's see.

216
00:15:27.610 --> 00:15:33.574
Find label and they got the first one.

217
00:15:36.859 --> 00:15:39.903
All right, so I took a step out of there,
like go the unpacked items,

218
00:15:39.903 --> 00:15:41.383
go get any of the labels, right?

219
00:15:41.383 --> 00:15:45.944
Grab the first one, I need to hold
on to that, I also wanted to text,

220
00:15:45.944 --> 00:15:48.440
because I need to go click on it too.

221
00:15:48.440 --> 00:15:51.144
So give me the label, give me its text,
click on the label, or

222
00:15:51.144 --> 00:15:52.720
the checkbox in this case, right?

223
00:15:52.720 --> 00:15:54.450
Cuz it's wrapping the checkbox.

224
00:15:54.450 --> 00:15:58.532
And then when we actually have its value,
go ahead and

225
00:15:58.532 --> 00:16:02.623
make sure that content is
on the packed item, right?

226
00:16:02.623 --> 00:16:06.726
So you can kind of store
stuff as you need it, and

227
00:16:06.726 --> 00:16:12.310
be able to kind of get those
values as you go through, right?

228
00:16:12.310 --> 00:16:17.928
And like I said before, aliases are fine
for some of these selectors, other things

229
00:16:17.928 --> 00:16:23.478
you could do here if you wanna do, there's
a bunch of ways you could do this right?

230
00:16:23.478 --> 00:16:27.280
Here we're trying to take stuff on
the page, an alternative approach, right?

231
00:16:27.280 --> 00:16:31.906
If this is like stressing you out a little
bit, you could have just had like a value

232
00:16:31.906 --> 00:16:35.580
that you added to the page by
typing in the form, right?

233
00:16:35.580 --> 00:16:39.194
And then you can go find the element
that contains that, click on it, and

234
00:16:39.194 --> 00:16:40.450
move it to the other one.

235
00:16:40.450 --> 00:16:45.890
That you'd probably have one for
the input, the button click the two forms.

236
00:16:45.890 --> 00:16:48.099
There are different ways that
you can go about doing it,

237
00:16:48.099 --> 00:16:49.793
it's about the kind of flow that you have.

238
00:16:49.793 --> 00:16:53.964
In this case, we had stuff on the page, so
we went and found it, and labeled it, so

239
00:16:53.964 --> 00:16:58.050
we could use it later, you might
choose to add stuff onto the page.

240
00:16:58.050 --> 00:17:01.615
There's a bunch of things that
you could do in this case,

241
00:17:01.615 --> 00:17:05.107
you could just be like,
listen somewhere at this point I

242
00:17:05.107 --> 00:17:08.249
could theoretically do
the dot then here as well.

243
00:17:14.499 --> 00:17:18.599
And get rid of an alias to, right?

244
00:17:23.219 --> 00:17:28.920
So go get it text, See.

245
00:17:31.500 --> 00:17:32.979
I could refactor it as well.

246
00:17:32.979 --> 00:17:38.160
So finally, I'm late we'll get this text
with that text, go click on the item

247
00:17:38.160 --> 00:17:43.829
label, and make sure that the packed items
contains it, that works as well, right?

248
00:17:43.829 --> 00:17:46.533
So there's different ways that
you can do it, and like I said,

249
00:17:46.533 --> 00:17:48.839
I was kind of extemporaneously
live coding this one.

250
00:17:48.839 --> 00:17:51.856
So you could refactor it as well,
but there's yeah,

251
00:17:51.856 --> 00:17:54.950
different approaches that
you can take along the way.

252
00:17:56.070 --> 00:18:00.120
&gt;&gt; Is it important to discard these
aliases when they're not needed anymore?

253
00:18:00.120 --> 00:18:04.454
&gt;&gt; I mean they'll get cleaned up by the
describe block, they only live as long as

254
00:18:04.454 --> 00:18:08.403
either the test that they're in, or
the describe block in this case.

255
00:18:08.403 --> 00:18:12.076
So you by definition the same
way we're revisiting the page,

256
00:18:12.076 --> 00:18:15.120
like we lose everything on every test run,
right?

257
00:18:15.120 --> 00:18:18.327
That's why before we go to
the page as a fresh page, right?

258
00:18:18.327 --> 00:18:18.870
Each time.

