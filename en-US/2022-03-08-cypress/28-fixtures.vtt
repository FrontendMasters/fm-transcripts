WEBVTT

1
00:00:00.000 --> 00:00:04.632
So we looked at how to make requests.

2
00:00:04.632 --> 00:00:09.403
I guess the other part is like
how to stub responses, right?

3
00:00:09.403 --> 00:00:14.489
And we kind of saw that before and
it's not particularly surprising, right.

4
00:00:14.489 --> 00:00:18.558
Like we can either give
it a JavaScript object or

5
00:00:18.558 --> 00:00:21.517
we can reference a fixture right?

6
00:00:21.517 --> 00:00:27.159
So if we think about for instance
like bring me to the correct Pokemon.

7
00:00:27.159 --> 00:00:32.931
I could theoretically say not
only do I want the API but

8
00:00:32.931 --> 00:00:37.428
no matter what we want all if it's a list.

9
00:00:37.428 --> 00:00:41.119
I just want make sure that you took
whatever was from the response and

10
00:00:41.119 --> 00:00:43.406
put it on the page as
you were supposed to.

11
00:00:43.406 --> 00:00:45.009
I don't even need real data for this.

12
00:00:45.009 --> 00:00:48.545
I'm like cool, just you took
what was in that JSON page load,

13
00:00:48.545 --> 00:00:51.211
you did whatever formatting
you needed to do.

14
00:00:51.211 --> 00:00:54.102
It got onto the page the way
it was supposed to, right.

15
00:00:54.102 --> 00:00:58.440
I can actually, I don't necessarily
need a real server for that, right?

16
00:00:58.440 --> 00:01:02.346
Get what you were supposed to get as
long as it adheres to the contract, and

17
00:01:02.346 --> 00:01:03.357
we should be okay.

18
00:01:03.357 --> 00:01:06.749
So let's do it in this one, maybe.

19
00:01:06.749 --> 00:01:10.282
So it should render results to the page,
right?

20
00:01:10.282 --> 00:01:18.769
And so in this case, I might choose to
have one where it's like, I don't know.

21
00:01:18.769 --> 00:01:22.900
So we'll say, so
I've just called stubbed API

22
00:01:22.900 --> 00:01:26.628
at this point because
I need to name stuff.

23
00:01:26.628 --> 00:01:33.547
Where I might say, Pokemon search.

24
00:01:35.698 --> 00:01:41.423
Slash API question mark star where
it's got the actual query params.

25
00:01:41.423 --> 00:01:42.846
And it could be in the body.

26
00:01:42.846 --> 00:01:44.371
You could do it all
sorts of different ways.

27
00:01:44.371 --> 00:01:50.483
And we'll just take that array
of Pokemon that we had up there.

28
00:01:50.483 --> 00:01:54.947
And that will now be whenever we hit this

29
00:01:54.947 --> 00:01:59.411
endpoint which will say, as stubbed,

30
00:01:59.411 --> 00:02:04.702
we will get back this
response no matter what.

31
00:02:04.702 --> 00:02:06.890
I don't need that API
server to be running.

32
00:02:06.890 --> 00:02:09.006
It might not be something I control.

33
00:02:09.006 --> 00:02:12.396
Might not be something that
I can hit from my CICD.

34
00:02:12.396 --> 00:02:17.170
Whatever it is like cool intercepted and
hit the request and

35
00:02:17.170 --> 00:02:19.472
send me back this response.

36
00:02:19.472 --> 00:02:25.218
So then with that in place
we'll go find that search.

37
00:02:25.218 --> 00:02:27.460
And we'll type in something.

38
00:02:27.460 --> 00:02:30.443
We've already have a different test
to make sure we're sending the right

39
00:02:30.443 --> 00:02:31.222
payload, right.

40
00:02:31.222 --> 00:02:34.127
Now we're trying to make sure
that we've triggered it.

41
00:02:34.127 --> 00:02:39.450
And we're doing the right thing
when whatever comes back, right.

42
00:02:39.450 --> 00:02:44.167
So they're slightly isolated
from each other, but

43
00:02:44.167 --> 00:02:47.496
that's totally fine in my opinion.

44
00:02:47.496 --> 00:02:53.557
And so it was which spring into
the route or have the correct Pokemon.

45
00:02:53.557 --> 00:02:54.245
Let's see.

46
00:02:54.245 --> 00:02:55.932
How do I wanna deal with this?

47
00:02:55.932 --> 00:02:57.778
Should render results to the page.

48
00:02:57.778 --> 00:03:06.295
Like I should probably see if there's
three of the things in my mock data.

49
00:03:06.295 --> 00:03:07.233
What are these?

50
00:03:07.233 --> 00:03:13.005
You can actually see that
it's my mock data, right?

51
00:03:13.005 --> 00:03:15.720
Cuz I stubbed it in this case and
that's the last test.

52
00:03:15.720 --> 00:03:18.968
It is the fake Bumblesaur charmer and

53
00:03:18.968 --> 00:03:23.589
turtle, cuz I couldn't come
up with a clever name.

54
00:03:23.589 --> 00:03:25.593
So I can do results has a length of three.

55
00:03:25.593 --> 00:03:29.575
So it actually I sent you back three
responses, you rendered through the page.

56
00:03:29.575 --> 00:03:34.027
I can verify that the first one is
the first one, so on and so forth.

57
00:03:34.027 --> 00:03:39.703
But the other interesting part is,
there was no alias set on that intercept.

58
00:03:39.703 --> 00:03:44.411
But this little empty dot here, instead
of the solid green dot that we had in

59
00:03:44.411 --> 00:03:47.718
the previous test means
that it never went through.

60
00:03:47.718 --> 00:03:51.143
Means that we intercepted it,
stopped it from going through.

61
00:03:51.143 --> 00:03:55.759
And now we put in our own response,
as you can see in this case.

62
00:03:55.759 --> 00:03:58.309
And you can see it on the page as well.

63
00:03:58.309 --> 00:04:02.452
So we can kind of go in there and
get our own individual ones.

64
00:04:02.452 --> 00:04:03.631
Cool, now save it.

65
00:04:03.631 --> 00:04:05.452
So you can see it was called stabbed.

66
00:04:05.452 --> 00:04:06.920
I just didn't save the file before.

67
00:04:06.920 --> 00:04:13.555
But that empty circle means the fact
that it was in fact stubbed, Mark.

68
00:04:13.555 --> 00:04:18.455
&gt;&gt; In what case should you use contains
versus should contain [INAUDIBLE].

69
00:04:18.455 --> 00:04:20.842
&gt;&gt; You can probably just use
contains a lot of cases.

70
00:04:20.842 --> 00:04:24.245
I think if I knew it was gonna stop
it contains, a lot of times I might,

71
00:04:24.245 --> 00:04:27.028
if I'm gonna use an end or
something along those lines.

72
00:04:27.028 --> 00:04:32.013
I think the should still lets me do an end
or have other assertions on it contains

73
00:04:32.013 --> 00:04:35.727
is not it's gonna give me
a different result of the chain.

74
00:04:35.727 --> 00:04:39.512
I'm pretty sure.

75
00:04:39.512 --> 00:04:43.126
If it's like stopping out with just a
contains I usually like this comes down to

76
00:04:43.126 --> 00:04:45.112
personal preference to be really honest.

77
00:04:45.112 --> 00:04:47.140
It's about what am I intending, right.

78
00:04:47.140 --> 00:04:53.405
If it's a one liner test or something that
is on the page I get that by reading it.

79
00:04:53.405 --> 00:04:57.441
It helps me know that this
was my thought at the time.

80
00:04:57.441 --> 00:05:01.207
It comes down to simply my
opinion personal preference

81
00:05:04.471 --> 00:05:06.393
So ,we've got that typed in there.

82
00:05:06.393 --> 00:05:08.633
We can see that it's stubbed now and

83
00:05:08.633 --> 00:05:12.226
we get that response coming
back no matter what, right.

84
00:05:12.226 --> 00:05:16.376
The other option is, we'll go ahead and

85
00:05:16.376 --> 00:05:21.022
say hey,
if they go get poking on number one.

86
00:05:21.022 --> 00:05:23.178
And this is now mostly just demonstrate.

87
00:05:23.178 --> 00:05:26.825
So, if they go to get number one I
could use a regex as well for this.

88
00:05:26.825 --> 00:05:31.264
And make sure it was a number
that we wanna give them back,

89
00:05:31.264 --> 00:05:34.330
actually a fixture around Bulbasaur.

90
00:05:34.330 --> 00:05:37.800
But we'll say,
if they're go looking for that,

91
00:05:37.800 --> 00:05:42.933
this is a demonstrate how you would
use a fixture more than anything else.

92
00:05:42.933 --> 00:05:47.814
Can simply type fixture and
then Bulbasaur.

93
00:05:47.814 --> 00:05:52.117
And why this works is that they
have a file in the fixtures

94
00:05:52.117 --> 00:05:55.062
directory named Bulbasaur dot JSON.

95
00:05:55.062 --> 00:05:56.533
So there's no importing the file.

96
00:05:56.533 --> 00:06:02.366
You could also just do an import
JSON with common JS and ES modules.

97
00:06:02.366 --> 00:06:06.890
Definitely common JS, that thing's
obstructed probably as modules.

98
00:06:06.890 --> 00:06:10.583
We should fact check that.

99
00:06:10.583 --> 00:06:15.055
But, with the fixture,
we'll go read that JSON file.

100
00:06:15.055 --> 00:06:17.255
And automatically put it back in place.

101
00:06:17.255 --> 00:06:19.387
So I could say I'm gonna intercept that.

102
00:06:19.387 --> 00:06:27.717
And we'll say as Bulbasaur
fixture just to demonstrate.

103
00:06:27.717 --> 00:06:32.114
And then what was a code

104
00:06:32.114 --> 00:06:38.218
results So what is this first one?

105
00:06:38.218 --> 00:06:40.965
I don't really wanna do that.

106
00:06:40.965 --> 00:06:42.107
So we'll do results.

107
00:06:45.744 --> 00:06:47.781
Not gonna take a suggestion in this case.

108
00:06:47.781 --> 00:06:49.765
Because that autogenerated
class is not helping me.

109
00:06:49.765 --> 00:06:53.761
We'll say results A, got the first one.

110
00:06:53.761 --> 00:07:02.762
And click on it You can see that it
filled in that fixture data, right?

111
00:07:02.762 --> 00:07:06.617
So you can put in a JavaScript object,
you can have a fixture.

112
00:07:06.617 --> 00:07:09.703
If the data is large you
almost always want a fixture.

113
00:07:09.703 --> 00:07:13.306
If it's real small,
it's kind of up to you.

114
00:07:13.306 --> 00:07:15.055
You could also see a world.

115
00:07:15.055 --> 00:07:18.468
Like one of the things that I want
to build that we have not built yet

116
00:07:18.468 --> 00:07:20.392
is like we have a bunch of fixtures for

117
00:07:20.392 --> 00:07:23.578
temporal that actually set
the server up in different ways.

118
00:07:23.578 --> 00:07:28.356
What I really wanna do is have
a weekly thing that basically updates

119
00:07:28.356 --> 00:07:30.757
our fixtures based on real data.

120
00:07:30.757 --> 00:07:34.251
So we're kind of like if something
changes are fixtures change.

121
00:07:34.251 --> 00:07:39.091
Where I could see myself basically having
a Node script hitting the API requests.

122
00:07:39.091 --> 00:07:44.854
Dumping those JSON files into a folder
in my Cypress like directory.

123
00:07:44.854 --> 00:07:48.511
And so I'm working with
relatively like real data.

124
00:07:48.511 --> 00:07:52.872
And so if the data changes I have new
fixtures which is something you could not

125
00:07:52.872 --> 00:07:55.680
do if you had just an object in your code,
right.

126
00:07:55.680 --> 00:07:58.329
So that's another part of what do you

127
00:07:58.329 --> 00:08:02.438
use when that is maybe better
than if big put in JSON file.

128
00:08:02.438 --> 00:08:04.733
If small put away you can see it.

129
00:08:04.733 --> 00:08:07.655
Is like there are pieces around a fixture,
right.

130
00:08:07.655 --> 00:08:11.673
The hard part though is like if
you actually care about that data,

131
00:08:11.673 --> 00:08:16.351
you're not gonna get as much auto like
IntelliSense as if it was a JavaScript

132
00:08:16.351 --> 00:08:17.612
object in the file.

133
00:08:17.612 --> 00:08:20.257
So it's a trade off.

134
00:08:20.257 --> 00:08:23.317
And it's just JavaScript trade offs and
not Cypress trade offs.

135
00:08:23.317 --> 00:08:25.074
So you have a bunch of ways
to kind of mock in there.

136
00:08:25.074 --> 00:08:29.571
And again, you'll see that if you code it
with a stub, that you get that kind of

137
00:08:29.571 --> 00:08:33.609
hollowed out circle versus if it was
just something that you watched.

138
00:08:33.609 --> 00:08:39.630
If I take off the only on here,
we should see a bunch of the other tests.

139
00:08:39.630 --> 00:08:40.585
Wait for those to run.

140
00:08:40.585 --> 00:08:45.349
If it went through solid green done.

141
00:08:45.349 --> 00:08:49.725
If you stubbed it out or I'm sorry, if
you stopped the response then you'll get

142
00:08:49.725 --> 00:08:53.601
a hollow.to signify that did not go
all the way through to the server.

143
00:08:53.601 --> 00:08:57.799
But you also get to see all the URL
changes, and all the fetches and

144
00:08:57.799 --> 00:09:01.860
get that kind of step by step view
of your code as you go through.

