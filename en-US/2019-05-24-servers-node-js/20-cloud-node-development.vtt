WEBVTT

1
00:00:00.130 --> 00:00:01.190
&gt;&gt; Will Sentance: So far so good.

2
00:00:01.190 --> 00:00:08.180
But problem, does this mean,
if I'm building server code, I need

3
00:00:08.180 --> 00:00:12.700
to be able to have Sarah Rose sent her
message, have Michael send his message,

4
00:00:12.700 --> 00:00:18.260
have Rich send his message whenever he
opens twitter.com, anytime, night or day.

5
00:00:19.340 --> 00:00:24.843
That means I need to have my computer
plugged in to the Internet and

6
00:00:24.843 --> 00:00:26.552
always on forever.

7
00:00:26.552 --> 00:00:27.849
And in the old days, that's what we did.

8
00:00:27.849 --> 00:00:32.200
Their computers plugged in to the wall
n the whole time in our houses,

9
00:00:32.200 --> 00:00:33.859
in our office buildings.

10
00:00:33.859 --> 00:00:38.120
But man,
It seems a lot a bit demanding on us.

11
00:00:38.120 --> 00:00:39.942
So what do we do instead?

12
00:00:39.942 --> 00:00:42.840
We have, it's a rhetorical question.

13
00:00:42.840 --> 00:00:48.841
We have somebody else's
computer be always on.

14
00:00:48.841 --> 00:00:51.350
We have somebody else's
way that somebody else

15
00:00:51.350 --> 00:00:54.420
is a company that has a lot of
computers that are always on,

16
00:00:54.420 --> 00:00:57.756
that we can rent out to use some
of the space on their computers.

17
00:00:57.756 --> 00:01:00.283
And the three big companies that
offer us the right to do that.

18
00:01:00.283 --> 00:01:01.555
Michael, do you know who they are?

19
00:01:01.555 --> 00:01:02.443
&gt;&gt; Michael: AWS.

20
00:01:02.443 --> 00:01:04.475
&gt;&gt; Will Sentance: Amazon.

21
00:01:04.475 --> 00:01:06.039
&gt;&gt; Michael: Google.

22
00:01:06.039 --> 00:01:08.485
&gt;&gt; Will Sentance: Google, and
Microsoft is the other big one.

23
00:01:08.485 --> 00:01:10.680
I mean, there's others out there but
those are the three.

24
00:01:10.680 --> 00:01:12.820
They've got literally with
Amazon's case one and

25
00:01:12.820 --> 00:01:16.710
a half million computer's that are always
on and connected to the Internet.

26
00:01:16.710 --> 00:01:17.660
They've got plenty of space for

27
00:01:17.660 --> 00:01:21.530
us to use one of them and
that's exactly what we end up doing.

28
00:01:21.530 --> 00:01:24.260
Okay, do we need an always-on
computer in our house for our server?

29
00:01:24.260 --> 00:01:26.740
No, we're gonna write it on our computer.

30
00:01:26.740 --> 00:01:34.330
Here's Will's computer, Will's Mac.

31
00:01:34.330 --> 00:01:36.490
I write code on VS Code on my Mac.

32
00:01:36.490 --> 00:01:39.960
I save it to a file, over at my terminal.

33
00:01:39.960 --> 00:01:42.492
But I'm not using my terminal
to control my computer.

34
00:01:42.492 --> 00:01:47.237
I'm gonna use it to control AWS's.

35
00:01:47.237 --> 00:01:52.112
AWS's computer, a computer

36
00:01:52.112 --> 00:01:56.992
on the Internet owned by AWS.

37
00:01:56.992 --> 00:02:04.104
And I'm going to do something called SSH,
which is a way of securely patching in and

38
00:02:04.104 --> 00:02:08.980
interfacing with this
computer through SSH.

39
00:02:08.980 --> 00:02:12.770
So I'm actually gonna be in my terminal
controlling this computer over here.

40
00:02:13.780 --> 00:02:19.656
And to do so, in order to turn on node,
let's just use node for

41
00:02:19.656 --> 00:02:25.760
now, turn on node not on my computer but
on Amazon's computer.

42
00:02:25.760 --> 00:02:30.034
And load up my server JS code to run,
not on my computer, but

43
00:02:30.034 --> 00:02:33.440
on one of Amazon's always on computers.

44
00:02:33.440 --> 00:02:36.467
And I can interact with
that computer using SSH.

45
00:02:36.467 --> 00:02:38.810
And there's other ways of interfacing
with this computer's set us up.

46
00:02:38.810 --> 00:02:40.960
Even GUI,
even kind of clickable ways of doing so.

47
00:02:40.960 --> 00:02:41.460
Michael, go ahead.

48
00:02:43.850 --> 00:02:47.080
&gt;&gt; Michael: I'm assuming that
computer only has one port 80.

49
00:02:47.080 --> 00:02:49.615
So then if Amazon has more.

50
00:02:49.615 --> 00:02:53.114
&gt;&gt; Will Sentance: Yeah, so it's really
really sophisticated how this is handled.

51
00:02:53.114 --> 00:02:55.620
The one bit I am gonna tell you is this.

52
00:02:55.620 --> 00:03:01.300
Let's say Michael opens his computer,
the untouchable area.

53
00:03:01.300 --> 00:03:03.650
This is where Michael's
gonna open his computer.

54
00:03:04.780 --> 00:03:07.630
All right,
where can Michael open his computer?

55
00:03:07.630 --> 00:03:11.030
Michael will open his computer here.

56
00:03:12.090 --> 00:03:17.460
Michael's computer, sorry, Michael's
little computer not a Michael's computer.

57
00:03:17.460 --> 00:03:19.540
There he is, Michael.

58
00:03:19.540 --> 00:03:26.548
He goes to Twitter.com
&gt;&gt; Will Sentance: Okay, that used to.

59
00:03:26.548 --> 00:03:30.760
When he went to Twitter.com,
send a message to my computer or

60
00:03:30.760 --> 00:03:32.543
to Twitter's computer.

61
00:03:32.543 --> 00:03:35.761
But the problem is,
now I put Twitter.com's Node app and

62
00:03:35.761 --> 00:03:40.031
all the ability to receive inbound
messages at port 80 and send stuff back,

63
00:03:40.031 --> 00:03:41.818
I put it on Amazon's computer.

64
00:03:41.818 --> 00:03:45.543
What do I do?

65
00:03:45.543 --> 00:03:49.090
Don't worry, something called DNS,
domain name server.

66
00:03:49.090 --> 00:03:53.130
It's a ledger, ledger just means
a comparison of two things side by side.

67
00:03:53.130 --> 00:03:58.190
Of all URLs, sorry of domain names.

68
00:03:58.190 --> 00:04:03.850
And an associated string of numbers
that represents any computer.

69
00:04:03.850 --> 00:04:05.718
Every single computer has
a unique string of numbers.

70
00:04:05.718 --> 00:04:12.880
And let's say, previously Will's Mac
it was 27.1.3.4 something like that.

71
00:04:12.880 --> 00:04:14.974
Twitter.com would've linked to that.

72
00:04:14.974 --> 00:04:19.325
Now I set it to link to AWS's computer,
which is I don't know, 32.2.5.7,

73
00:04:19.325 --> 00:04:22.594
that's not obviously literally it,
but 32.2.5.7.

74
00:04:22.594 --> 00:04:27.661
And so
now Michael when you go to Twitter.com,

75
00:04:27.661 --> 00:04:32.855
you get this domain and
is that that you then go and

76
00:04:32.855 --> 00:04:37.416
enter [LAUGH] Really, it almost got there,

77
00:04:37.416 --> 00:04:41.630
it really missed the entry point.

78
00:04:41.630 --> 00:04:48.000
You then go and enter with your message
saying, hey Amazon, I need Twitter.com,

79
00:04:48.000 --> 00:04:51.740
your tweets HTML, CSS jobs of now.

80
00:04:51.740 --> 00:04:56.315
Specifically how it handles when actually
in Amazon it's not just one computer,

81
00:04:56.315 --> 00:04:59.311
you're dealing with a million
possible computers.

82
00:04:59.311 --> 00:05:04.338
Specifically how you match up exactly
how it enters, we're gonna hold on.

83
00:05:04.338 --> 00:05:08.026
But we make all of the configurations,
this is what is called DevOps.

84
00:05:08.026 --> 00:05:10.581
DevOps is the extremely interesting and

85
00:05:10.581 --> 00:05:15.167
challenging situation of ensuring
that you've managed to get your code

86
00:05:15.167 --> 00:05:18.863
running on Amazon's computer
with the node app running.

87
00:05:18.863 --> 00:05:23.277
And that when Michael go to
twitter.com that this entry point is

88
00:05:23.277 --> 00:05:28.430
configured correctly, that this
this IP address as it's known as.

89
00:05:28.430 --> 00:05:33.880
That the URL is matched to is gonna
enter at the exact right computer.

90
00:05:33.880 --> 00:05:36.210
Really interesting,
sophisticated area that actually,

91
00:05:36.210 --> 00:05:41.380
someone tweeted to me about saying,
could you do a hard parse on this piece?

92
00:05:41.380 --> 00:05:44.940
Because it is a major part now
of what modern development is.

93
00:05:44.940 --> 00:05:49.430
No longer are you plugging a computer into
the wall of your office, turning it on,

94
00:05:49.430 --> 00:05:52.176
turning on Node, and
saying, we're good to go.

95
00:05:52.176 --> 00:05:56.411
Now you've gotta get all this code onto
Amazon's massive AWS infrastructure, and

96
00:05:56.411 --> 00:05:58.090
it's remarkably interesting.

97
00:05:58.090 --> 00:06:00.310
Do you have a follow-up, Michael?

98
00:06:00.310 --> 00:06:03.300
&gt;&gt; Michael: Yeah, so each computer
has multiple Node process, so

99
00:06:03.300 --> 00:06:06.880
once they enter that port is Amazon and
figuring out

100
00:06:06.880 --> 00:06:10.410
which of these processes that-
&gt;&gt; Will Sentance: Processes, but certainly

101
00:06:10.410 --> 00:06:14.940
these computers, how they're working, they
can handle on the same computer multiple

102
00:06:14.940 --> 00:06:18.510
apps running at the same time, multiple
web apps running at the same time.

103
00:06:18.510 --> 00:06:23.272
Or they can be distributed across
multiple computers at the same time.

104
00:06:23.272 --> 00:06:26.517
This side of things once on AWS computer,
we're not covering today but

105
00:06:26.517 --> 00:06:28.350
it's really really interesting.

106
00:06:28.350 --> 00:06:32.360
But our job here today is just
we've got to get our code

107
00:06:32.360 --> 00:06:34.480
not to run on our computer but
one of Amazon's.

108
00:06:34.480 --> 00:06:37.000
For now just one of Amazon's computers,
okay?

