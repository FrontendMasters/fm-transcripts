WEBVTT

1
00:00:00.030 --> 00:00:03.146
&gt;&gt; Will Sentance: The problem is though,
but if ever I wanna test,

2
00:00:03.146 --> 00:00:08.110
is my code working right,
do I need to load up to Amazon's computer?

3
00:00:08.110 --> 00:00:11.820
Wait for it to load up, okay,
we're good to go and open the website now.

4
00:00:11.820 --> 00:00:13.620
Michael, do you mind just
opening twitter.com and

5
00:00:13.620 --> 00:00:15.390
checking my website is working?

6
00:00:15.390 --> 00:00:16.390
Did I get the right request?

7
00:00:16.390 --> 00:00:18.270
I handled it, no,
I sent back the wrong one.

8
00:00:18.270 --> 00:00:22.590
Hold on, Michael, can you just stay there
and open it again in three minutes?

9
00:00:22.590 --> 00:00:25.020
Now, we definitely don't have to do that.

10
00:00:25.020 --> 00:00:27.950
So we want to do it all on our computer.

11
00:00:27.950 --> 00:00:33.060
Both the being Michael
sending a message to

12
00:00:34.680 --> 00:00:37.590
the computer that's got the open
connection to the Internet ready to listen

13
00:00:37.590 --> 00:00:40.040
for your messages, running node.

14
00:00:40.040 --> 00:00:43.860
Running JavaScript to listen
to the message, look at it,

15
00:00:43.860 --> 00:00:45.200
send back the right data.

16
00:00:45.200 --> 00:00:49.302
We wanna do that on the same computer
in our dream world as actually loading

17
00:00:49.302 --> 00:00:52.887
the website to look at that,
to send a message to that computer.

18
00:00:55.097 --> 00:00:57.250
&gt;&gt; Will Sentance: Let's see if that's
possible, have a look at this.

19
00:00:57.250 --> 00:01:03.170
So I'm on my computer,
they call this my development machine.

20
00:01:03.170 --> 00:01:05.640
It's my computer which I'm developing.

21
00:01:05.640 --> 00:01:06.140
Here's what I do.

22
00:01:08.974 --> 00:01:12.916
&gt;&gt; Will Sentance: I load up,
&gt;&gt; Will Sentance: Node,

23
00:01:12.916 --> 00:01:15.480
it turns on the JavaScript engine.

24
00:01:15.480 --> 00:01:17.619
It turns on the node C++ features.

25
00:01:19.590 --> 00:01:21.804
And it turns on the computer's internals.

26
00:01:24.507 --> 00:01:25.969
&gt;&gt; Will Sentance: Internals,
there it is, okay.

27
00:01:28.406 --> 00:01:32.858
&gt;&gt; Will Sentance: I set up the open
channel to the Internet, right,

28
00:01:32.858 --> 00:01:40.420
the open channel to the Internet at port,
well open channel to the Internet socket.

29
00:01:40.420 --> 00:01:45.130
Now in theory, if I wanted to run and test
whether I was waiting messages correctly

30
00:01:45.130 --> 00:01:49.020
and ready to send them back correctly
I'd need a totally separate,

31
00:01:49.020 --> 00:01:52.362
Michael you need to send
a message to my computer, right,

32
00:01:52.362 --> 00:01:55.322
to see if I get a message in and
send something back.

33
00:01:55.322 --> 00:01:56.079
That would be ridiculous.

34
00:01:56.079 --> 00:01:57.370
I'd have to do that.

35
00:01:57.370 --> 00:02:00.128
I'd have to sit calling Michael to send
messages to my computer the whole time,

36
00:02:00.128 --> 00:02:01.291
to see if something is coming in.

37
00:02:02.999 --> 00:02:07.113
&gt;&gt; Will Sentance: So the designers of
operating systems realized this was

38
00:02:07.113 --> 00:02:08.170
ridiculous.

39
00:02:09.400 --> 00:02:12.170
So they invented a feature, I'm sorry.

40
00:02:12.170 --> 00:02:17.990
They invented a feature that
allows us to open our web browser

41
00:02:17.990 --> 00:02:22.420
on the same computer we're running,
our node app, open our web browser.

42
00:02:24.590 --> 00:02:31.715
Open not through the .com, but
a special domain name called local host.

43
00:02:35.153 --> 00:02:37.790
&gt;&gt; Will Sentance: And then put,
I don't know, tweet three or whatever.

44
00:02:37.790 --> 00:02:42.170
And it's gonna send out a message,
not to the Internet.

45
00:02:42.170 --> 00:02:47.380
But it's a special domain
name that loops straight

46
00:02:47.380 --> 00:02:52.670
back in to our own computer
where we were listening.

47
00:02:53.800 --> 00:02:55.242
It loops it straight back in.

48
00:02:55.242 --> 00:03:00.439
By the way,
local host has a domain especially

49
00:03:00.439 --> 00:03:04.577
an IP address 127.0.0.1.

50
00:03:04.577 --> 00:03:09.319
And this allows us people
to write code to set up

51
00:03:09.319 --> 00:03:15.000
our server to open
the socket on our computer.

52
00:03:15.000 --> 00:03:20.140
But to have the ability to access
our own computer by not having to

53
00:03:20.140 --> 00:03:22.630
go to another computer, open twitter.com
that sends a message to our computer.

54
00:03:22.630 --> 00:03:26.140
But do it from our own computer with
a special built into our operating system

55
00:03:26.140 --> 00:03:31.260
domain name, local host that loops
us right back into our own computer.

56
00:03:31.260 --> 00:03:36.408
That sends the sends the outbound HTTP
message not out into the Internet,

57
00:03:36.408 --> 00:03:39.157
but straight back to our own computer.

58
00:03:39.157 --> 00:03:43.720
And we have a special IP address that
references from inside our own computer.

59
00:03:43.720 --> 00:03:46.493
References our own computer,
it's 127.0.0.1,

60
00:03:46.493 --> 00:03:50.448
which has a domain name so
you don't have to remember it, local host.

61
00:03:50.448 --> 00:03:54.400
Here's a problem,
we tend not to want to use the port 80,

62
00:03:54.400 --> 00:03:59.557
that's the entry point 80 that's used
default for the browser going out.

63
00:03:59.557 --> 00:04:04.202
Instead, we want to use any one of
the numbers of the 64,000 entry points we

64
00:04:04.202 --> 00:04:04.762
can use.

65
00:04:04.762 --> 00:04:10.089
And people tend to use set from
JavaScript 3000 silly ones like this.

66
00:04:10.089 --> 00:04:12.129
I don't know why they do this and

67
00:04:12.129 --> 00:04:15.994
then we set the port up here
to be listening on port 3000.

68
00:04:15.994 --> 00:04:18.310
We have 64,000 options, right?

69
00:04:18.310 --> 00:04:22.359
And but that means what port does
the browser default to sending out from

70
00:04:22.359 --> 00:04:22.973
Michael?

71
00:04:22.973 --> 00:04:23.618
&gt;&gt; Michael: 80.

72
00:04:23.618 --> 00:04:27.174
&gt;&gt; Will Sentance: 80 but if we're not
gonna be entering at that point into our

73
00:04:27.174 --> 00:04:31.217
own computer we better declare when
we send out with the help of a colon

74
00:04:31.217 --> 00:04:35.720
the exact port that we're gonna send
out that we expect it to come in at.

75
00:04:35.720 --> 00:04:37.020
And we put it in there.

76
00:04:37.020 --> 00:04:40.170
And that means,
we can send out a little HTTP message,

77
00:04:40.170 --> 00:04:42.550
which never really even
leaves our computer.

78
00:04:42.550 --> 00:04:47.020
By the way, in the old days, before this
was built into your operating system,

79
00:04:47.020 --> 00:04:49.670
they used to literally take a wire
out the back of the computer, and

80
00:04:49.670 --> 00:04:52.130
loop it back into the machine.

81
00:04:52.130 --> 00:04:53.850
But now it's part of
the operating system so

82
00:04:53.850 --> 00:04:55.670
the message doesn't even
leave the computer.

83
00:04:55.670 --> 00:04:57.740
It comes straight back in and enters.

84
00:04:57.740 --> 00:05:00.890
And that's gonna allow you people
to both write your code for

85
00:05:00.890 --> 00:05:04.750
your server to listen and
receive messages and send stuff back.

86
00:05:04.750 --> 00:05:07.130
But also test it's working

87
00:05:07.130 --> 00:05:10.530
by opening the domain name that
accesses your own computer directly.

88
00:05:10.530 --> 00:05:12.540
Cuz remember,
what is a computer that's a server?

89
00:05:12.540 --> 00:05:17.765
All it is is an open channel
through the computer's networking,

90
00:05:17.765 --> 00:05:20.425
see I do not write from this side,

91
00:05:20.425 --> 00:05:26.620
networking internal feature that you
set up from JavaScript via node.

92
00:05:26.620 --> 00:05:27.450
That's all it is.

93
00:05:28.830 --> 00:05:31.912
That's all it is computed with an open
channel with those three lines instead of

94
00:05:31.912 --> 00:05:34.083
the open channel,
the open network, the open socket.

95
00:05:34.083 --> 00:05:36.030
.And set the right port.

96
00:05:36.030 --> 00:05:40.100
And then we get to access our
own computer's open channel

97
00:05:40.100 --> 00:05:42.460
using that domain name.

98
00:05:42.460 --> 00:05:44.440
And that's what we're gonna
do in the pair programming.

99
00:05:46.080 --> 00:05:47.600
Okay, I think it's what I said here.

100
00:05:47.600 --> 00:05:48.700
What about testing our server?

101
00:05:48.700 --> 00:05:52.770
Do you need to load the code to
be run on AWS to test it live?

102
00:05:52.770 --> 00:05:56.010
No, operating system developers, that's
the people who built this whole computer,

103
00:05:56.010 --> 00:06:00.030
included the loop back feature,
with local host as a pseudo domain.

104
00:06:00.030 --> 00:06:04.150
A pretend domain name that sends out your
message not out to the Internet, but

105
00:06:04.150 --> 00:06:05.590
straight back into your own computer.

106
00:06:06.810 --> 00:06:08.330
This is what we'll be doing
in the pair programming.

