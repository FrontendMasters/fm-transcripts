WEBVTT

1
00:00:00.000 --> 00:00:04.252
&gt;&gt; Will Sentance: That final piece there
was very much an appendix for everybody to

2
00:00:04.252 --> 00:00:09.851
enjoy knowing absolutely, intricately,
intimately, every last piece of node.

3
00:00:09.851 --> 00:00:13.250
What is this monstrosity we see before us?

4
00:00:13.250 --> 00:00:17.076
But hopefully that can help you when
you're going into those interviews.

5
00:00:17.076 --> 00:00:19.086
And also, the interesting piece,

6
00:00:19.086 --> 00:00:23.109
ability to have a function run when
all IO callback functions are done.

7
00:00:23.109 --> 00:00:24.470
That's pretty cool.

8
00:00:24.470 --> 00:00:26.988
And knowing exactly how these
are going to execute it.

9
00:00:26.988 --> 00:00:30.300
Especially this promised-based
API is in no degree more typical

10
00:00:30.300 --> 00:00:32.770
knowing that those associated functions
will go in this very first queue.

11
00:00:34.360 --> 00:00:40.000
There it is people, some closing words
node folk is the most powerful technology

12
00:00:40.000 --> 00:00:45.320
that has emerged for, I don't even know,
10 at least 10 years.

13
00:00:45.320 --> 00:00:49.187
But even as it is something that allows
you to build scale applications.

14
00:00:49.187 --> 00:00:53.903
Grand visions like LinkedIn,
Netflix, Uber, etc.

15
00:00:53.903 --> 00:00:59.961
it really all comes down to labels from
JavaScript that's trigger or setup

16
00:00:59.961 --> 00:01:06.780
node C ++ features that give us access
to the computer's internal features.

17
00:01:06.780 --> 00:01:11.650
Cuz that's where the interesting stuff is
on any computer, most importantly of all,

18
00:01:11.650 --> 00:01:16.430
the ability to access our
networking feature of our computer.

19
00:01:16.430 --> 00:01:20.180
We don't have access in JavaScript so
we get access via C++.

20
00:01:20.180 --> 00:01:26.270
And when an inbound request comes we rely
on node to take the function we told

21
00:01:26.270 --> 00:01:32.262
it to run, and run it automatic first
in JavaScript, and fill in its inputs.

22
00:01:32.262 --> 00:01:36.710
It's-
&gt;&gt; Speaker 2: Execution.

23
00:01:36.710 --> 00:01:39.450
&gt;&gt; Will Sentance: That's almost always
the right word but not this time.

24
00:01:39.450 --> 00:01:40.416
It's-
&gt;&gt; Speaker 2: Argument.

25
00:01:40.416 --> 00:01:42.020
&gt;&gt; Will Sentance: Argument, well done.

26
00:01:42.020 --> 00:01:43.520
It's all done.

27
00:01:43.520 --> 00:01:46.597
It's argument with
the exact relevant data.

28
00:01:46.597 --> 00:01:48.234
Is it the data from the file?

29
00:01:48.234 --> 00:01:51.092
Is it the error data,
is it the inbound message,

30
00:01:51.092 --> 00:01:55.150
is it an object full of functions that
let us set the data to send back?

31
00:01:56.680 --> 00:01:59.303
And that's it, everything that,
if we do another node talk.

32
00:01:59.303 --> 00:02:03.606
Maybe we will talk about the fact that
we can split our JavaScript code up into

33
00:02:03.606 --> 00:02:07.790
multiple files, and then bring it so
we can think about it separately.

34
00:02:07.790 --> 00:02:10.710
But have it all run at once,
without it conflicting with each other.

35
00:02:10.710 --> 00:02:12.740
So it's a module pattern using closure and

36
00:02:12.740 --> 00:02:15.570
that's for
scoping my favorite feature JavaScript.

37
00:02:15.570 --> 00:02:18.648
We'll talk about probably
things like cluster.

38
00:02:18.648 --> 00:02:22.621
We will probably talk about,
there was something else,

39
00:02:22.621 --> 00:02:25.868
some specifics of details
of error handling.

40
00:02:25.868 --> 00:02:28.702
And we'll probably actually use the new,

41
00:02:28.702 --> 00:02:32.729
went from experimental last
week to stable in node version.

42
00:02:32.729 --> 00:02:36.777
12 promise API promise
based Fs file system,

43
00:02:36.777 --> 00:02:42.051
you can now use the promise
structure to access a file system.

44
00:02:42.051 --> 00:02:43.724
We'll see that if we do another node talk.

45
00:02:43.724 --> 00:02:47.613
But for now people, thank you very much
for your incredible commitment and

46
00:02:47.613 --> 00:02:49.966
engagement and
see you at another talk soon.

47
00:02:49.966 --> 00:02:51.755
Thank you, folk.

48
00:02:51.755 --> 00:02:55.168
&gt;&gt; [APPLAUSE]

