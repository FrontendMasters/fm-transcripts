WEBVTT

1
00:00:04.130 --> 00:00:10.050
&gt;&gt; Will Sentance: We have much of
our Twitter app, folk, now set up,

2
00:00:10.050 --> 00:00:16.683
handling, inspecting,
the inbound request message.

3
00:00:16.683 --> 00:00:19.253
What format's a request message in,
everyone together?

4
00:00:19.253 --> 00:00:21.379
Begins with an H, and ends in TTP.

5
00:00:21.379 --> 00:00:22.661
&gt;&gt; Speaker 2: HTTP.
&gt;&gt; Will Sentance: Good job, all right.

6
00:00:22.661 --> 00:00:24.995
&gt;&gt; [LAUGH]
&gt;&gt; Will Sentance: They're known

7
00:00:24.995 --> 00:00:25.815
as requests.

8
00:00:25.815 --> 00:00:27.383
It's the core of our app.

9
00:00:27.383 --> 00:00:30.091
People, it's the core of Node.

10
00:00:30.091 --> 00:00:32.435
And it's the core of servers.

11
00:00:32.435 --> 00:00:34.841
This is Node.

12
00:00:34.841 --> 00:00:38.240
Everything else is ancillary.

13
00:00:38.240 --> 00:00:44.737
It's really additional to this core
model of inbound message, send back.

14
00:00:44.737 --> 00:00:49.227
Because that's what that's all we really
care about, really at the heart is user,

15
00:00:49.227 --> 00:00:50.505
client, wants stuff.

16
00:00:50.505 --> 00:00:52.621
Look at what they want.

17
00:00:52.621 --> 00:00:54.388
Luckily we've got a message
that's gonna be sent back.

18
00:00:54.388 --> 00:00:57.869
Add stuff to that message,
send that back, add data, send back.

19
00:00:57.869 --> 00:00:59.333
It's the heart of it.

20
00:00:59.333 --> 00:01:02.317
But Node can do even more.

21
00:01:02.317 --> 00:01:06.639
We have a huge archive of tweets,
1.5 gigabytes.

22
00:01:06.639 --> 00:01:09.131
Unfortunately, they're
saved on our computer.

23
00:01:09.131 --> 00:01:11.823
They're not in our little
JavaScript memory up here.

24
00:01:11.823 --> 00:01:16.053
Although it can handle that much, but
we're not storing them up there, are we?

25
00:01:16.053 --> 00:01:18.889
We're storing them long-term
permanently in here.

26
00:01:18.889 --> 00:01:22.115
We wouldn't want to have to
reinitialize them all every single time

27
00:01:22.115 --> 00:01:22.915
we turn on Node.

28
00:01:22.915 --> 00:01:24.965
We're going to store them
permanently down here.

29
00:01:24.965 --> 00:01:27.906
It's much more permanent stored,
in the memory of the computer,

30
00:01:27.906 --> 00:01:29.440
in the hard drive of the computer.

31
00:01:29.440 --> 00:01:31.705
[INAUDIBLE] a store.

32
00:01:31.705 --> 00:01:36.237
Could we load them into
JavaScript in order to run

33
00:01:36.237 --> 00:01:41.663
a function that removes the bad tweets,
the mean tweets?

34
00:01:41.663 --> 00:01:43.197
We wanna do this, right?

35
00:01:43.197 --> 00:01:48.877
37% of Twitter bad tweets were
auto removed in the last year,

36
00:01:48.877 --> 00:01:51.833
rather than by manual cleaning.

37
00:01:51.833 --> 00:01:56.329
This is much higher than previously, which
was 0%, apparently, good job by them.

38
00:01:56.329 --> 00:01:59.727
We can use a feature of the computer.

39
00:01:59.727 --> 00:02:02.513
There is a file system or
file storage, the hard drive.

40
00:02:02.513 --> 00:02:05.471
Node, C++ has access to that.

41
00:02:05.471 --> 00:02:06.813
It's a feature, no problem.

42
00:02:06.813 --> 00:02:07.631
I love it.

43
00:02:07.631 --> 00:02:09.821
It's a built-in feature that
speaks to the damn filesystem.

44
00:02:09.821 --> 00:02:11.115
It's known as fs.

45
00:02:11.115 --> 00:02:14.631
And we've got a label for it here,
which we typically, well, it's fs,

46
00:02:14.631 --> 00:02:16.183
it's a label for this feature.

47
00:02:16.183 --> 00:02:21.063
Okay, there might be some issues with
the file being that large, though,

48
00:02:21.063 --> 00:02:26.957
because I'm gonna bring all the file in,
1.5 gigabytes, and then start cleaning it.

49
00:02:26.957 --> 00:02:32.801
If you're experienced in solving problems
with code, you're probably going,

50
00:02:32.801 --> 00:02:38.399
wow, that sounds like a really unoptimized
way of dealing with that problem.

51
00:02:38.399 --> 00:02:40.672
Let me give you a little preview.

52
00:02:40.672 --> 00:02:46.415
Every 64,000 bytes, every 64 kilobytes
of data that gets pulled in,

53
00:02:46.415 --> 00:02:51.647
I have a feeling a little message,
a little event might be flashed out.

54
00:02:51.647 --> 00:02:54.862
I wonder if we could do something
with that information, but

55
00:02:54.862 --> 00:02:56.320
hold that thought for now.

56
00:02:56.320 --> 00:03:00.748
All right, well, by the way,
what is 1.5 gigabytes of data?

57
00:03:00.748 --> 00:03:07.679
Every character in
a Tweet is worth 1 byte.

58
00:03:07.679 --> 00:03:09.056
What is 1 byte?

59
00:03:09.056 --> 00:03:13.683
It's eight zeroes and ones,
which have apparently 256 combinations.

60
00:03:13.683 --> 00:03:16.091
So you could represent the letter A,
B, C, D,

61
00:03:16.091 --> 00:03:19.357
E in different combinations of zeroes and
ones of eight of them.

62
00:03:19.357 --> 00:03:23.740
Some things which we see as single
characters are actually two sets

63
00:03:23.740 --> 00:03:25.861
of eights, zeroes, and ones.

64
00:03:25.861 --> 00:03:32.929
Like emojis, they can't be done in
one set of eight zeroes and ones.

65
00:03:32.929 --> 00:03:33.453
There's not enough.

66
00:03:33.453 --> 00:03:36.637
There's too many emojis, not enough zeroes
and one combinations in eight of them.

67
00:03:36.637 --> 00:03:38.411
So you have two bytes to capture that.

68
00:03:38.411 --> 00:03:45.005
But that means 64,000 bytes of
the letter A is 64,000 letter As.

69
00:03:45.005 --> 00:03:51.238
1.5 gigabytes,
[SOUND] 1.5 billion characters?

70
00:03:51.238 --> 00:03:54.481
Maybe, rough, I think it's right.

71
00:03:54.481 --> 00:03:56.319
I think that's right.

72
00:03:56.319 --> 00:03:57.102
I was right!

73
00:03:57.102 --> 00:03:58.984
Hundreds, I'm right, definitely right.

74
00:03:58.984 --> 00:04:00.714
That's a lot of tweets.

75
00:04:00.714 --> 00:04:03.551
But by the way, it also takes, people,

76
00:04:03.551 --> 00:04:06.812
a long time to get pulled
out of the hard drive.

77
00:04:06.812 --> 00:04:14.501
Accessing one megabyte from the hard
drive takes, one millisecond.

78
00:04:14.501 --> 00:04:16.605
Yeah, one millisecond.

79
00:04:16.605 --> 00:04:17.908
Yeah, yeah, one millisecond.

80
00:04:17.908 --> 00:04:20.621
So this is gonna take a bunch of time.

81
00:04:20.621 --> 00:04:27.279
Multiple, multiple seconds to get out of
or at least up to, multiple milliseconds,

82
00:04:27.279 --> 00:04:33.109
multiple seconds, to get this data out
of our hard drive into JavaScript.

83
00:04:33.109 --> 00:04:35.023
That's very interesting.

84
00:04:35.023 --> 00:04:38.770
I wonder if during that time,
I wish I could get started on it and

85
00:04:38.770 --> 00:04:41.196
start cleaning it rather than waiting.

86
00:04:41.196 --> 00:04:42.408
That would be amazing, right?

87
00:04:42.408 --> 00:04:43.900
That'd be my dream, but who knows.

