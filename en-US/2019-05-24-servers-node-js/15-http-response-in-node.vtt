WEBVTT

1
00:00:00.340 --> 00:00:03.200
&gt;&gt; Will Sentance: Now
in the message arrived,

2
00:00:03.200 --> 00:00:07.340
nodes done all of its nice setup filled
in these very quickly fill them in.

3
00:00:08.450 --> 00:00:13.090
Now it better start running
that function because we didn't

4
00:00:13.090 --> 00:00:17.850
do the set up to try and have to write
C++ code to interpret these messages.

5
00:00:17.850 --> 00:00:20.990
We wanna have these messages
available to us up here.

6
00:00:20.990 --> 00:00:22.540
We don't actually get them directly.

7
00:00:22.540 --> 00:00:25.372
We get one of them stored all this
data on an object, and the other one,

8
00:00:25.372 --> 00:00:27.347
a bunch of functions that
will give us access to.

9
00:00:30.831 --> 00:00:34.290
&gt;&gt; Will Sentance: When they're run,
update this data on the response message.

10
00:00:34.290 --> 00:00:36.680
So how do we get access to these?

11
00:00:36.680 --> 00:00:41.350
They're auto-inserted into
the auto run function.

12
00:00:41.350 --> 00:00:43.120
So let's get auto running up function.

13
00:00:44.220 --> 00:00:48.550
We are gonna run the function
which has what name on it?

14
00:00:48.550 --> 00:00:50.850
&gt;&gt; Student1: Do on incoming.
&gt;&gt; Will Sentance: Do on incoming and

15
00:00:50.850 --> 00:00:53.690
I should actually show you my
green pen is gonna represent time.

16
00:00:53.690 --> 00:01:00.604
This is like a day later, that this
request came in after we set up this code.

17
00:01:00.604 --> 00:01:03.780
It has just been running there for
a day with nothing, just waiting.

18
00:01:03.780 --> 00:01:04.680
This is like a day later.

19
00:01:04.680 --> 00:01:06.935
One day, later.

20
00:01:06.935 --> 00:01:07.987
Here we go.

21
00:01:07.987 --> 00:01:12.464
Very precise, very precise.

22
00:01:12.464 --> 00:01:17.010
All right, one day later.

23
00:01:17.010 --> 00:01:22.200
What gets run it's doOn Incoming.

24
00:01:22.200 --> 00:01:23.630
I'm gonna write its name.

25
00:01:23.630 --> 00:01:27.450
You can do this in black or purple.

26
00:01:27.450 --> 00:01:31.640
I certainly know the peren,
the running of it is purple,

27
00:01:31.640 --> 00:01:34.710
because that's added,
it's being executed by node.

28
00:01:35.840 --> 00:01:40.850
So, everybody, we as it to function
as you know, Sarah rose I thought

29
00:01:40.850 --> 00:01:43.550
executing a function I create a brand new,
&gt;&gt; Sarah Rose: Execution.

30
00:01:43.550 --> 00:01:48.550
&gt;&gt; Will Sentance: Fantastic, everyone
together a brand new execution contest.

31
00:01:48.550 --> 00:01:53.070
Everyone in online like to shower
backpack online, I think very funny.

32
00:01:53.070 --> 00:01:57.080
No, its execution context online audience.

33
00:01:57.080 --> 00:02:00.020
Here's one of the key
words parentheses return.

34
00:02:00.020 --> 00:02:01.220
JavaScript doesn't do much stuff so

35
00:02:01.220 --> 00:02:03.500
you have to say the same words again and
again.

36
00:02:03.500 --> 00:02:05.720
Everyone's do an incoming.

37
00:02:05.720 --> 00:02:11.610
It's got a local memory, local memory.

38
00:02:11.610 --> 00:02:13.540
Everything in purple is
all being done by node.

39
00:02:13.540 --> 00:02:16.449
It's a day later we didn't sit there
waiting to run this code for a day.

40
00:02:17.480 --> 00:02:18.840
Come in, run the code.

41
00:02:18.840 --> 00:02:19.630
No, no, no.
We rely on no to do it.

42
00:02:19.630 --> 00:02:22.234
And it has got two parts.

43
00:02:22.234 --> 00:02:26.050
Here'r our inserted arguments,
the first one is this one,

44
00:02:26.050 --> 00:02:27.080
the second one is this one.

45
00:02:29.130 --> 00:02:31.570
For once just because I wanna
leave this is a nice record for

46
00:02:31.570 --> 00:02:32.960
all of us who were repairing.

47
00:02:32.960 --> 00:02:36.150
I'm actually gonna put them in up here.

48
00:02:36.150 --> 00:02:42.200
So you can see, I'm actually stored or
being inserted.

49
00:02:42.200 --> 00:02:43.900
I can hear whispering.

50
00:02:46.680 --> 00:02:48.282
For sure I knew it.

51
00:02:48.282 --> 00:02:55.490
[LAUGH] And this is a object full
of functions like end and right.

52
00:02:57.770 --> 00:03:02.460
Okay, there they are,
and they get inserted.

53
00:03:02.460 --> 00:03:04.870
They don't get any names,
so how do we use them?

54
00:03:04.870 --> 00:03:09.400
What word allows us, what thing in
JavaScript allows us to prepare

55
00:03:09.400 --> 00:03:15.300
variable names without data and rely
on when we run code inserting the data?

56
00:03:15.300 --> 00:03:16.400
What are they know as?

57
00:03:16.400 --> 00:03:16.960
&gt;&gt; Class: Parameters.

58
00:03:16.960 --> 00:03:17.910
&gt;&gt; Will Sentance: Parameters, exactly.

59
00:03:17.910 --> 00:03:20.040
Place holder parameters, spot on, exactly.

60
00:03:20.040 --> 00:03:22.340
I call them place holder,
they call them parameters.

61
00:03:22.340 --> 00:03:26.080
The first one here is, everyone together.

62
00:03:26.080 --> 00:03:28.039
&gt;&gt; Class: Incoming data.

63
00:03:28.039 --> 00:03:32.755
&gt;&gt; Will Sentance: Incoming data and
the second one here is?

64
00:03:32.755 --> 00:03:34.620
&gt;&gt; Class: [CROSSTALK]
&gt;&gt; Will Sentance: My very long semantic,

65
00:03:34.620 --> 00:03:39.360
which means, semantic means they
have meaning in their words.

66
00:03:39.360 --> 00:03:41.269
Semantic style parameter names, so

67
00:03:41.269 --> 00:03:43.860
we can't ever lose track
of what they're doing.

68
00:03:43.860 --> 00:03:47.920
And everyone getting tired
of this at this point.

69
00:03:47.920 --> 00:03:51.500
Yes, but man, isn't it fun?

70
00:03:51.500 --> 00:03:53.630
There we go, URL and method.

71
00:03:55.320 --> 00:03:58.810
I'm being extra precise this time so we
have a nice record on the white board of

72
00:03:58.810 --> 00:04:04.886
exactly, no confusion,
no hard to read stuff and

73
00:04:04.886 --> 00:04:10.320
write, there they are and there's
a bunch of other functions in there.

74
00:04:10.320 --> 00:04:18.860
And then the data slash
tweets slash three and get.

75
00:04:18.860 --> 00:04:22.940
Lot of progress made here.

76
00:04:24.580 --> 00:04:26.040
Lot of progress.

77
00:04:26.040 --> 00:04:34.260
And so now we're gonna go into our
function being executed, do an incoming.

78
00:04:34.260 --> 00:04:34.990
We're in there.

79
00:04:34.990 --> 00:04:36.610
We've inserted our data.

80
00:04:36.610 --> 00:04:41.150
Now we're going to investigate
this object which has what label?

81
00:04:42.870 --> 00:04:43.570
Incoming data.

82
00:04:45.000 --> 00:04:48.298
And we're gonna use functions on
this object which has what label?

83
00:04:48.298 --> 00:04:50.219
&gt;&gt; Class: Functions of [INAUDIBLE].

84
00:04:50.219 --> 00:04:54.416
&gt;&gt; Will Sentance: And runs one of those
functions to set the data send back.

85
00:04:54.416 --> 00:04:59.700
Which we're gonna do, depending on
what is in this incoming data object.

86
00:04:59.700 --> 00:05:01.420
So let's see what it says.

87
00:05:01.420 --> 00:05:02.180
Let's get going, people.

88
00:05:02.180 --> 00:05:04.330
So, we're into doing incoming.

89
00:05:04.330 --> 00:05:07.230
Next line, Roman,
left hand side, says to do what?

90
00:05:08.420 --> 00:05:09.940
&gt;&gt; Roman: Declare tweetNeeded?

91
00:05:09.940 --> 00:05:12.080
&gt;&gt; Will Sentance: Yep,
exactly, tweetNeeded.

92
00:05:12.080 --> 00:05:14.990
And I'm just gonna expand this
execution context space so

93
00:05:14.990 --> 00:05:18.560
we can really spread ourselves out here.

94
00:05:18.560 --> 00:05:23.604
TweetNeeded ig going to be whatever

95
00:05:23.604 --> 00:05:28.989
incoming data.url.slice(8).

96
00:05:28.989 --> 00:05:34.021
So incoming data.url is what?

97
00:05:34.021 --> 00:05:34.880
Sam.

98
00:05:36.640 --> 00:05:39.330
&gt;&gt; Sam: Slash tweets slash three.

99
00:05:39.330 --> 00:05:41.870
&gt;&gt; Will Sentance: Slash
tweets slash three.

100
00:05:41.870 --> 00:05:43.950
Fantastic, that's that portion here.

101
00:05:43.950 --> 00:05:48.186
Slice is a billion jobs a method that
allows us in JavaScript to grab,

102
00:05:48.186 --> 00:05:51.108
well, whenever we pass
it is the character zero

103
00:05:51.108 --> 00:05:56.042
indexed,
&gt;&gt; Will Sentance: Zero indexed.

104
00:05:56.042 --> 00:05:59.410
Our own words that we're
gonna grab the characters.

105
00:05:59.410 --> 00:06:02.540
So if it's 3, if it's 35,
whatever we're gonna grab that.

106
00:06:03.760 --> 00:06:06.730
That final character after position 8.

107
00:06:06.730 --> 00:06:12.700
So slice of tweets slash 3
gives us out the number, 3.

108
00:06:12.700 --> 00:06:20.640
3- 1 is 2, and so we're gonna start
in tweetNeeded we gonna need tweet 2.

109
00:06:20.640 --> 00:06:23.690
We take one off it because,
one, two, three.

110
00:06:23.690 --> 00:06:27.917
The third tweet is at position index too
because JavaScript is a zero index as zero

111
00:06:27.917 --> 00:06:28.735
index erased.

112
00:06:28.735 --> 00:06:32.526
I mean the first index, the first
position is number zero, 0th, 1th, 2th.

113
00:06:32.526 --> 00:06:33.164
Okay, now we're gonna
use that to get tweets.

114
00:06:33.164 --> 00:06:36.577
Tweet needed number 2,

115
00:06:36.577 --> 00:06:41.620
which is what Michael which string?

116
00:06:42.850 --> 00:06:43.520
Tweets.

117
00:06:43.520 --> 00:06:44.070
&gt;&gt; Class: Hello.

118
00:06:44.070 --> 00:06:44.840
&gt;&gt; Will Sentance: Hello.

119
00:06:44.840 --> 00:06:48.310
Fantastic, okay and so

120
00:06:48.310 --> 00:06:53.870
we're gonna do, functionsToSend.

121
00:06:53.870 --> 00:06:56.645
OutgoingData, which function, Sam,

122
00:06:56.645 --> 00:07:01.470
do we need off that object in order
to access and set our outbound data?

123
00:07:01.470 --> 00:07:02.340
&gt;&gt; Class: End.
&gt;&gt; Will Sentance: End, and

124
00:07:02.340 --> 00:07:04.320
we're gonna pause to it.

125
00:07:06.380 --> 00:07:11.340
Position tweetNeeded, which is 2,
which is 0, 1, 2, which is Hello.

126
00:07:12.890 --> 00:07:20.134
And end doesn't do anything
in JavaScript really,

127
00:07:20.134 --> 00:07:26.225
instead it's going to
end node set outbound

128
00:07:26.225 --> 00:07:32.000
http message data and add to it the tweet.

129
00:07:34.784 --> 00:07:40.052
&gt;&gt; Will Sentance: Hello, and then we're
gonna rely on UV to grab this message,

130
00:07:40.052 --> 00:07:42.300
n says to node don't worry.

131
00:07:42.300 --> 00:07:45.600
We're done with the message,
here's the data.

132
00:07:45.600 --> 00:07:46.350
Send it back.

133
00:07:46.350 --> 00:07:47.450
Will it fit in?

134
00:07:47.450 --> 00:07:50.370
That's not a thing, [LAUGH] obviously.

135
00:07:50.370 --> 00:07:54.540
It fits in and out it comes I am joking,

136
00:07:54.540 --> 00:07:59.580
obviously that is the other thing.

137
00:07:59.580 --> 00:08:04.750
Okay, Erica, I wish comes back as
the response message to Michael's Mac and

138
00:08:04.750 --> 00:08:07.560
there he gets Hello.

139
00:08:07.560 --> 00:08:09.700
The exact tweet he needed.

140
00:08:09.700 --> 00:08:14.940
We introspect did the inbound messages,

141
00:08:14.940 --> 00:08:18.630
representation in a note in
a JavaScript object form,

142
00:08:18.630 --> 00:08:22.590
grab the URL specifically we needed
discover we need a tweet number 3,

143
00:08:22.590 --> 00:08:27.520
which was index number 2, grabbed hello
and attached using the other auto

144
00:08:27.520 --> 00:08:32.020
inserted object that one that gives
us access to the response message.

145
00:08:32.020 --> 00:08:37.230
HTTP message, and it added Hello to it,
automatically sent back.

146
00:08:37.230 --> 00:08:38.810
So this is a full server.

147
00:08:42.880 --> 00:08:47.560
Everything else now that LinkedIn does,
that Uber Eats,

148
00:08:47.560 --> 00:08:52.140
the Twitter Lite, that

149
00:08:52.140 --> 00:08:57.350
Netflix does with Node is just this,
but maybe

150
00:08:57.350 --> 00:09:00.730
we're being a little more sophisticated
about how we're sending the data back and

151
00:09:00.730 --> 00:09:04.160
forth between the computer's
internal features and JavaScript.

152
00:09:04.160 --> 00:09:08.250
Maybe we're being a little more
sophisticated about which properties we're

153
00:09:08.250 --> 00:09:11.400
grabbing from the incoming data object,
maybe we're being a little more

154
00:09:11.400 --> 00:09:16.250
sophisticated about where we're getting
our data to send back from probably not

155
00:09:16.250 --> 00:09:18.930
local JavaScript memory,
little mini JavaScript data or

156
00:09:18.930 --> 00:09:24.750
maybe from the file system or
from another computer, but it's all.

157
00:09:24.750 --> 00:09:26.091
Look at this object.

158
00:09:26.091 --> 00:09:28.975
That's auto-created with properties.

159
00:09:28.975 --> 00:09:32.565
Look at the function, look at the object
that's auto-inserted with the functions

160
00:09:32.565 --> 00:09:35.805
and let it set the outbound
message again and again and again.

