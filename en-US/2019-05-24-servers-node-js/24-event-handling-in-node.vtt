WEBVTT

1
00:00:00.000 --> 00:00:02.200
&gt;&gt; Will Sentance: We're gonna do
pretty much what we did before, but

2
00:00:02.200 --> 00:00:04.210
this time we're gonna be even
a bit more sophisticated.

3
00:00:04.210 --> 00:00:11.700
And add a key pattern, as its known,
in Node, the pattern of the event system.

4
00:00:11.700 --> 00:00:15.818
Where behind the scenes, when things
happen in the computer internal features,

5
00:00:15.818 --> 00:00:18.097
Node is not just gonna
auto-run a function.

6
00:00:18.097 --> 00:00:23.028
It's first gonna broadcast a message that
has attached to it a function that Node's

7
00:00:23.028 --> 00:00:24.288
going to auto-run.

8
00:00:24.288 --> 00:00:28.844
Meaning we can have more control, well
yeah, we can tell Node more detailed what

9
00:00:28.844 --> 00:00:32.070
function it's gonna run
under what condition.

10
00:00:32.070 --> 00:00:36.334
So if it comes as a happy request,
nicely formatted, Charlie's not sending us

11
00:00:36.334 --> 00:00:40.745
corrupt data, it's gonna broadcast,
it's gonna shout out in Node, request!

12
00:00:40.745 --> 00:00:46.100
And hopefully we've set up, if requests
gets shouted out, auto-run, do onIncoming.

13
00:00:47.100 --> 00:00:50.083
And if it's got an error,
and it's a corrupted,

14
00:00:50.083 --> 00:00:55.210
nasty request that's gonna cause issues to
us, I expect nothing less from Charlie.

15
00:00:55.210 --> 00:01:00.800
Then it's gonna broadcast a message
saying or shout out, client error!

16
00:01:00.800 --> 00:01:05.960
And hopefully we've set up a function
to auto-run on the client error event.

17
00:01:05.960 --> 00:01:06.820
Well, let's go.

18
00:01:06.820 --> 00:01:10.300
Line one, Virginia, what are we
doing in global memory, Virginia?

19
00:01:11.790 --> 00:01:14.860
&gt;&gt; Virginia: Declaring a function,
or defining a function.

20
00:01:14.860 --> 00:01:15.628
Do onIncoming.

21
00:01:15.628 --> 00:01:17.556
&gt;&gt; Will Sentance: Yeah,
both of those things mean the same thing,

22
00:01:17.556 --> 00:01:20.159
that means we're saving the code
of a function, do onIncoming.

23
00:01:20.159 --> 00:01:24.170
Next line, Sarah Rose.

24
00:01:24.170 --> 00:01:29.210
&gt;&gt; Sara Rose: So we're declaring
another function doOnError.

25
00:01:29.210 --> 00:01:33.647
&gt;&gt; Will Sentance: Fantastic,
thank you Sara Rose, there it is, saved.

26
00:01:33.647 --> 00:01:38.165
Next line, my goodness,
we're only gonna do two of these things,

27
00:01:38.165 --> 00:01:39.630
but let's get going.

28
00:01:39.630 --> 00:01:43.010
First, we declare a server
on the left-hand side.

29
00:01:43.010 --> 00:01:44.739
Okay, server's declared.

30
00:01:46.721 --> 00:01:53.001
&gt;&gt; Will Sentance: Server's declared,
it's going to be the result of,

31
00:01:53.001 --> 00:01:57.780
it's gonna be the result in JavaScript of

32
00:01:57.780 --> 00:02:02.022
calling http.createServer().

33
00:02:02.022 --> 00:02:04.001
We're not gonna pass any inputs this time.

34
00:02:04.001 --> 00:02:08.694
Remember, the input we pass is
the function code that's gonna be auto-run

35
00:02:08.694 --> 00:02:11.642
when an inbound request
arrives at our socket.

36
00:02:11.642 --> 00:02:14.398
I have a feeling we might still
add a function to auto-run, but

37
00:02:14.398 --> 00:02:16.902
this time we're gonna be more
manually controlling it.

38
00:02:16.902 --> 00:02:21.123
It's actually going to do exactly the same
thing as when we pass it indirectly but,

39
00:02:21.123 --> 00:02:22.500
fine, okay.

40
00:02:22.500 --> 00:02:24.000
But it also is going be
using the JavaScript.

41
00:02:24.000 --> 00:02:28.180
What is the thing that
http.createServer() does in Node?

42
00:02:28.180 --> 00:02:31.522
Raise up your hand if you wanna
tell me what it does in Node.

43
00:02:31.522 --> 00:02:34.411
Michael, take it away my friend.

44
00:02:34.411 --> 00:02:38.267
&gt;&gt; Michael: Well, it returns a object
&gt;&gt; Will Sentance: That's in JavaScript,

45
00:02:38.267 --> 00:02:39.343
what's it doing in Node?

46
00:02:39.343 --> 00:02:40.007
Zep.

47
00:02:40.007 --> 00:02:41.104
&gt;&gt; Zep: It sets up a socket.

48
00:02:41.104 --> 00:02:45.032
&gt;&gt; Will Sentance: Uh-huh,
it sets up the HTTP feature of Node,

49
00:02:45.032 --> 00:02:50.100
which is actually behind
the scenes just setting up.

50
00:02:50.100 --> 00:02:53.740
It's gonna send a message into
the computer's internals,

51
00:02:53.740 --> 00:02:58.033
where it's going to turn on in
the networking portion of our computer.

52
00:03:00.325 --> 00:03:03.742
&gt;&gt; Will Sentance: It's gonna turn on
an open socket, which is, remember,

53
00:03:03.742 --> 00:03:08.890
just a fancy word people, for an open
channel to the Internet that's two way.

54
00:03:08.890 --> 00:03:10.619
That can receive data and send data back.

55
00:03:11.730 --> 00:03:15.426
Okay, we've better make sure it's gonna
port, so we know which of the 64,000 entry

56
00:03:15.426 --> 00:03:18.900
points, metaphorically entry points,
that the data's gonna coming at.

57
00:03:18.900 --> 00:03:22.990
So I hope we're gonna have the ability
to edit, cuz I don't see in this first

58
00:03:22.990 --> 00:03:25.850
line here, where we set up
the background feature, the socket.

59
00:03:25.850 --> 00:03:27.963
I don't see us telling it what port is,

60
00:03:27.963 --> 00:03:31.623
I hope we have the ability to edit
this background feature, I hope.

61
00:03:31.623 --> 00:03:33.870
Well, do we?

62
00:03:33.870 --> 00:03:40.600
Yes we do, because the other thing, so
Node, http.createServer() opens a socket.

63
00:03:41.720 --> 00:03:44.800
That's what it does in Node,
a connection to the Internet.

64
00:03:44.800 --> 00:03:47.630
But the other thing it does,
was it Michael you were saying?

65
00:03:47.630 --> 00:03:51.627
The other thing it does is in JavaScript,
it returns what?

66
00:03:51.627 --> 00:03:54.684
&gt;&gt; Michael: An object.
&gt;&gt; Will Sentance: An object full of what,

67
00:03:54.684 --> 00:03:55.350
Zep?

68
00:03:55.350 --> 00:03:56.660
Yeah, full of what, Virginia?

69
00:03:56.660 --> 00:03:57.260
&gt;&gt; Zep: Methods.

70
00:03:57.260 --> 00:03:59.534
&gt;&gt; Will Sentance: Methods, including?

71
00:03:59.534 --> 00:04:00.660
&gt;&gt; Zep: End.

72
00:04:00.660 --> 00:04:01.940
&gt;&gt; Will Sentance: No, definitely not.

73
00:04:01.940 --> 00:04:02.731
Including?

74
00:04:02.731 --> 00:04:03.295
&gt;&gt; Michael: listen.

75
00:04:03.295 --> 00:04:05.705
&gt;&gt; Will Sentance: listen, yeah,
we'll see that in a second, Virginia.

76
00:04:07.186 --> 00:04:09.946
&gt;&gt; Will Sentance: There is listen,
which these are,

77
00:04:09.946 --> 00:04:13.230
let's call them our edit functions.

78
00:04:13.230 --> 00:04:19.160
They let us edit this
particular Node HTTP instance.

79
00:04:19.160 --> 00:04:26.030
So we're gonna have ability to edit HTTP,
okay, down here.

80
00:04:26.030 --> 00:04:28.802
Which is then what we
immediately go ahead and?

81
00:04:28.802 --> 00:04:32.696
By the way, what other function
do we get to, Zep or Virginia?

82
00:04:32.696 --> 00:04:35.239
What other function gets
added to that object?

83
00:04:35.239 --> 00:04:37.380
If you get it have a look ahead,
go ahead, Jeff.

84
00:04:37.380 --> 00:04:39.930
&gt;&gt; Jeff: on.
&gt;&gt; Will Sentance: on, another function

85
00:04:39.930 --> 00:04:45.500
that also, I have a strong feeling,
is gonna let us edit stuff down here.

86
00:04:45.500 --> 00:04:49.570
And by the looks of it,
might let us edit what

87
00:04:49.570 --> 00:04:53.873
function gets auto-run in Node,
or by Node.

88
00:04:53.873 --> 00:04:58.341
So function to auto-run functions,

89
00:04:58.341 --> 00:05:02.676
I feel it's gonna be functions now.

90
00:05:02.676 --> 00:05:05.480
But we've got nothing stored in it yet,
you've got nothing stored here.

91
00:05:06.510 --> 00:05:09.570
Well, we'd better be able to
edit this from JavaScript.

92
00:05:09.570 --> 00:05:14.421
Remind me again,
why can I ongoing edit stuff down here, or

93
00:05:14.421 --> 00:05:19.576
how can I ongoing edit stuff down
here in Node from JavaScript?

94
00:05:19.576 --> 00:05:20.670
Raise your hand and tell me why.

95
00:05:20.670 --> 00:05:27.010
Mohamed, how can I ongoing edit this HTTP
feature in the background that edits the,

96
00:05:27.010 --> 00:05:29.830
how do I get to go ongoing edit it?

97
00:05:29.830 --> 00:05:31.331
Mohamed, do you have an idea?

98
00:05:31.331 --> 00:05:32.328
&gt;&gt; Mohamed: No.

99
00:05:32.328 --> 00:05:33.401
&gt;&gt; Will Sentance: Pavi.

100
00:05:33.401 --> 00:05:34.015
&gt;&gt; Pavi: Node daemon?

101
00:05:34.015 --> 00:05:34.836
Node daemon, no.

102
00:05:34.836 --> 00:05:39.365
&gt;&gt; Will Sentance: How do I get to
ongoing edit down here, Michael?

103
00:05:39.365 --> 00:05:41.135
&gt;&gt; Michael: The C++ interface?

104
00:05:41.135 --> 00:05:44.304
&gt;&gt; Sam: You use the objects,
the response and request objects.

105
00:05:44.304 --> 00:05:45.695
&gt;&gt; Will Sentance: No,
well, yes later on, but

106
00:05:45.695 --> 00:05:48.160
how do I get to ongoing edit
my setup down here, Sam?

107
00:05:50.010 --> 00:05:50.830
&gt;&gt; Sam: Those functions.

108
00:05:51.950 --> 00:05:56.030
The functions that
the [COUGH] HTTP returns.

109
00:05:56.030 --> 00:05:59.916
&gt;&gt; Will Sentance: The functions that
the http.createServer() return down into

110
00:05:59.916 --> 00:06:01.430
JavaScript.

111
00:06:01.430 --> 00:06:04.020
What is the server label here?

112
00:06:04.020 --> 00:06:10.094
It's a label for an object full of
functions that allow us to do what, Roman?

113
00:06:11.478 --> 00:06:13.340
&gt;&gt; Will Sentance: That allow
us to do what, Charlie?

114
00:06:13.340 --> 00:06:15.781
&gt;&gt; Charlie: Modify the-
&gt;&gt; Will Sentance: Modify the underlying

115
00:06:15.781 --> 00:06:18.820
HTTP instance or feature we've set up.

116
00:06:18.820 --> 00:06:23.600
So if I want to set up my
port in the background,

117
00:06:23.600 --> 00:06:27.170
after I've set up the HTTP
feature with createServer.

118
00:06:27.170 --> 00:06:32.124
What function from that list of
functions that got returned out as

119
00:06:32.124 --> 00:06:36.452
an object in JavaScript
from http.createServer(),

120
00:06:36.452 --> 00:06:40.435
what function would I use
to edit the port, Andrew?

121
00:06:40.435 --> 00:06:42.310
&gt;&gt; Andrew: The .listen?
&gt;&gt; Will Sentance: The listen one.

122
00:06:42.310 --> 00:06:47.260
What function do we think, Zep,
that I would use to edit or

123
00:06:47.260 --> 00:06:49.830
set up what functions
to auto-run down here?

124
00:06:49.830 --> 00:06:50.490
&gt;&gt; Zep: on.

125
00:06:50.490 --> 00:06:52.272
&gt;&gt; Will Sentance: on, excellent.

126
00:06:55.968 --> 00:07:01.773
&gt;&gt; Will Sentance: So Mohamed,
how am I able to, after I set up the HTTP

127
00:07:01.773 --> 00:07:07.070
server feature of Node,
continue to edit it?

128
00:07:07.070 --> 00:07:11.299
&gt;&gt; Mohamed: You use the methods
that come with the HTTP objects.

129
00:07:11.299 --> 00:07:12.800
&gt;&gt; Will Sentance: Not quite.

130
00:07:14.130 --> 00:07:19.408
When I ran createServer,
it set up the background server in Node,

131
00:07:19.408 --> 00:07:22.720
but it also did something in JavaScript.

132
00:07:23.800 --> 00:07:25.230
What did it do in JavaScript, Zep?

133
00:07:25.230 --> 00:07:27.460
&gt;&gt; Zep: Created the object,
the server object?

134
00:07:27.460 --> 00:07:28.370
&gt;&gt; Will Sentance: With what?

135
00:07:28.370 --> 00:07:31.383
&gt;&gt; Zep: With the port, the listener-
&gt;&gt; Will Sentance: With a bunch of

136
00:07:31.383 --> 00:07:32.130
methods-.

137
00:07:32.130 --> 00:07:33.020
&gt;&gt; Zep: Yeah, the function.

138
00:07:33.020 --> 00:07:37.790
&gt;&gt; Will Sentance: That would
allow me to edit this Node HTTP

139
00:07:37.790 --> 00:07:41.180
server with this particular
socket I set up down here.

140
00:07:41.180 --> 00:07:45.784
Right, this is a particular instance,
it's the one we just set up.

141
00:07:45.784 --> 00:07:50.206
It's the particular open socket
that we just set up here,

142
00:07:50.206 --> 00:07:53.660
that we want to be able
to continue to edit it.

143
00:07:53.660 --> 00:07:58.500
So when we set it, what functions
set up the background open socket?

144
00:07:58.500 --> 00:08:01.130
Charlie, which function do we run to
set up the background open socket?

145
00:08:01.130 --> 00:08:01.700
&gt;&gt; Charlie: createServer.

146
00:08:01.700 --> 00:08:06.003
&gt;&gt; Will Sentance: createServer, that's
what it did in Node, not in JavaScript,

147
00:08:06.003 --> 00:08:07.580
but in Node.

148
00:08:07.580 --> 00:08:10.040
What did it do in JavaScript, again Zep?

149
00:08:10.040 --> 00:08:10.540
&gt;&gt; Zep: listen.

150
00:08:11.650 --> 00:08:13.385
&gt;&gt; Will Sentance: What did it
do in JavaScript, William?

151
00:08:13.385 --> 00:08:17.160
&gt;&gt; William: It created an object
with the functions of createServer.

152
00:08:17.160 --> 00:08:21.540
&gt;&gt; Will Sentance: With the functions
that link to this background

153
00:08:21.540 --> 00:08:25.370
server instance in this socket,
including which functions, Charlie?

154
00:08:25.370 --> 00:08:26.240
&gt;&gt; Charlie: listen and on.

155
00:08:26.240 --> 00:08:28.900
&gt;&gt; Will Sentance: Fantastic, and
if I run either of those functions,

156
00:08:28.900 --> 00:08:34.780
they're gonna change, they're going to
edit this particular Node background

157
00:08:34.780 --> 00:08:40.630
feature HTTP that we've set up,
that will edit this particular socket.

158
00:08:41.740 --> 00:08:42.290
Andrew.

159
00:08:42.290 --> 00:08:44.052
&gt;&gt; Andrew: So
could I have a server1 equals?

160
00:08:44.052 --> 00:08:47.830
&gt;&gt; Will Sentance: Sure, I could set up,
I could do this multiple times.

161
00:08:49.510 --> 00:08:54.932
So Sam,
&gt;&gt; Will Sentance: How

162
00:08:54.932 --> 00:08:59.580
am I able to continue after
I've set up this background

163
00:08:59.580 --> 00:09:03.229
open socket via Node
with the help of HTTP?

164
00:09:03.229 --> 00:09:04.531
What function let me do that, by the way?

165
00:09:06.383 --> 00:09:08.490
&gt;&gt; Will Sentance: What function let me
set up this background open socket?

166
00:09:08.490 --> 00:09:09.080
&gt;&gt; Sam: createServer.

167
00:09:09.080 --> 00:09:10.480
&gt;&gt; Will Sentance: createServer being run.

168
00:09:10.480 --> 00:09:13.290
Once I've set it up,
I still wanna make a ton of changes,

169
00:09:13.290 --> 00:09:15.200
I don't even know what
port to listen on yet.

170
00:09:15.200 --> 00:09:17.970
I don't know what functions to
auto-run when a message comes in.

171
00:09:19.040 --> 00:09:20.620
How am I able to do that, Sam?

172
00:09:20.620 --> 00:09:22.730
&gt;&gt; Sam: Through the methods
in the server object?

173
00:09:22.730 --> 00:09:23.680
&gt;&gt; Will Sentance: Yeah, exactly,

174
00:09:23.680 --> 00:09:26.960
the methods in the server
object which came from where?

175
00:09:26.960 --> 00:09:32.410
They were JavaScript's output
of running createServer.

176
00:09:32.410 --> 00:09:34.734
Charlie, what was Node's output
of running createServer,

177
00:09:34.734 --> 00:09:37.060
what was the C++ output
of running createServer?

178
00:09:37.060 --> 00:09:37.930
&gt;&gt; Charlie: Setting up the socket.

179
00:09:37.930 --> 00:09:38.580
&gt;&gt; Will Sentance: Fantastic,

180
00:09:38.580 --> 00:09:40.510
what's JavaScript's output
of running createServer?

181
00:09:40.510 --> 00:09:42.330
&gt;&gt; Charlie: The object with
the functions available.

182
00:09:42.330 --> 00:09:42.950
&gt;&gt; Will Sentance: Which do what?

183
00:09:44.540 --> 00:09:45.960
&gt;&gt; Charlie: Which modify Node's behavior.

184
00:09:47.740 --> 00:09:48.870
&gt;&gt; Will Sentance: I think Charlie
deserves a hand for that.

185
00:09:48.870 --> 00:09:50.689
Thank you, Charlie, excellent, well done.

186
00:09:50.689 --> 00:09:52.309
&gt;&gt; Speaker 13: [APPLAUSE]
&gt;&gt; Will Sentance: No, that's excellent,

187
00:09:52.309 --> 00:09:52.889
okay, all right.

188
00:09:54.080 --> 00:09:57.320
It's really complicated,
there's a lot to it.

189
00:09:57.320 --> 00:10:00.509
But we've got to get that
absolutely 100% precise.

