WEBVTT

1
00:00:00.000 --> 00:00:04.681
&gt;&gt; Will Sentance: Node is gonna auto-run
the code, wrap it in a function,

2
00:00:04.681 --> 00:00:08.398
that's how you save code
to be done later on.

3
00:00:08.398 --> 00:00:13.657
Auto-run the code function for us when a
request, they call these inbound messages

4
00:00:13.657 --> 00:00:18.485
from Sarah Rose's computer after we tweet,
they call it a request for data.

5
00:00:18.485 --> 00:00:22.064
When it arrives from a user,
we're gonna save, look, there it is,

6
00:00:22.064 --> 00:00:25.665
we're gonna save code,
we're gonna to call it doOnIncoming here.

7
00:00:25.665 --> 00:00:26.637
You can call it whatever you want.

8
00:00:26.637 --> 00:00:34.573
Save it, and then have it
auto-run when a message comes in.

9
00:00:34.573 --> 00:00:40.115
Virginia, I want you to, forgive me,
walk up to the screen here and point where

10
00:00:40.115 --> 00:00:46.019
you think we're telling Node, this is the
function we to have you auto-run for us.

11
00:00:46.019 --> 00:00:48.631
Do you mind walking up and
pointing to where it is?

12
00:00:48.631 --> 00:00:50.160
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: I'm gonna bet you

13
00:00:50.160 --> 00:00:52.292
will never forget after this moment.

14
00:00:52.292 --> 00:00:53.844
&gt;&gt; Virginia: Where it's actually
asking it to do something?

15
00:00:53.844 --> 00:00:55.972
&gt;&gt; Will Sentance: No,
where we're telling Node,

16
00:00:55.972 --> 00:00:58.944
this is the function we
want you to auto-run.

17
00:00:58.944 --> 00:01:02.560
Point to it where it
&gt;&gt; Will Sentance: She's going-

18
00:01:02.560 --> 00:01:03.348
&gt;&gt; Virginia: This is the function.

19
00:01:03.348 --> 00:01:05.032
&gt;&gt; Will Sentance: That's where we save it,
and where do we tell?

20
00:01:05.032 --> 00:01:06.601
Let's give her a hand.

21
00:01:06.601 --> 00:01:07.882
&gt;&gt; [APPLAUSE]
&gt;&gt; Will Sentance: Thank you, excellent,

22
00:01:07.882 --> 00:01:08.751
Virginia, very nice.

23
00:01:08.751 --> 00:01:10.901
&gt;&gt; [APPLAUSE]
&gt;&gt; Will Sentance: Exactly, spot on.

24
00:01:10.901 --> 00:01:15.561
All right, so, people,
it is at that moment online.

25
00:01:15.561 --> 00:01:19.362
There it is, http.createServer.

26
00:01:19.362 --> 00:01:23.267
Inside the parentheses,
whatever we insert there, that code,

27
00:01:23.267 --> 00:01:27.740
which in this case is gonna be the whole
code of the doOnIncoming function,

28
00:01:27.740 --> 00:01:30.580
the entire code of
the doOnIncoming function,

29
00:01:30.580 --> 00:01:34.698
we gave it that label doOnIncoming,
it's all the code inside of it,

30
00:01:34.698 --> 00:01:39.603
we're gonna tell Node, please auto-run
this function when a message comes in.

31
00:01:39.603 --> 00:01:42.723
This may seem incredibly like, God, yeah,
yeah, I used one line of Node before.

32
00:01:42.723 --> 00:01:44.456
I've seen this code before, it's easy.

33
00:01:44.456 --> 00:01:47.293
But if we understand how it's
actually working under the hood,

34
00:01:47.293 --> 00:01:50.668
everything else in Node, we'll see
later on, follows just so naturally.

35
00:01:50.668 --> 00:01:52.732
All right, so there it is.

36
00:01:52.732 --> 00:01:55.515
We're gonna have to tell, well,
let's first save the function.

37
00:01:55.515 --> 00:01:59.029
Virginia, tell me again what
we do in the first line here.

38
00:01:59.029 --> 00:02:02.545
&gt;&gt; Virginia: The first line,
we're declaring a function.

39
00:02:02.545 --> 00:02:06.361
&gt;&gt; Will Sentance: Yeah, declaring
a function, declaring a function, exactly.

40
00:02:06.361 --> 00:02:08.672
We'll leave all this out
because it's the same code.

41
00:02:08.672 --> 00:02:11.730
We're declaring a function.

42
00:02:11.730 --> 00:02:13.510
&gt;&gt; Virginia: With the label doOnIncoming.

43
00:02:13.510 --> 00:02:14.477
&gt;&gt; Will Sentance: doOnIncoming, yeah.

44
00:02:14.477 --> 00:02:17.319
We're doing it just into memory.

45
00:02:17.319 --> 00:02:19.107
We should probably draw this out again but
it's okay.

46
00:02:19.107 --> 00:02:24.630
doOnIncoming, there it is,
doOnIncoming, saved.

47
00:02:24.630 --> 00:02:27.118
That's how I represent my functions,
people, when I save them.

48
00:02:27.118 --> 00:02:30.732
There it is, doOnIncoming.

49
00:02:30.732 --> 00:02:33.814
And then, next line, we declare server.

50
00:02:33.814 --> 00:02:37.281
We did it earlier, so
just the same, declare server.

51
00:02:37.281 --> 00:02:40.452
We then run http.createserver.

52
00:02:40.452 --> 00:02:44.919
Michael, what does
http.createserver do in Node?

53
00:02:44.919 --> 00:02:47.562
&gt;&gt; MIchael: It triggers opening the port.

54
00:02:47.562 --> 00:02:48.956
&gt;&gt; Will Sentance: Opening the port,
opening the socket,

55
00:02:48.956 --> 00:02:49.984
using the computer tunnels.

56
00:02:49.984 --> 00:02:51.846
Excellent from Michael, exactly.

57
00:02:51.846 --> 00:02:55.492
And then we have it auto-return an object,
or

58
00:02:55.492 --> 00:03:00.446
it returns an object,
into server that has a bunch of functions

59
00:03:00.446 --> 00:03:04.571
that allow us to edit
the instance of http.socket.

60
00:03:04.571 --> 00:03:06.548
But we do one more thing.

61
00:03:06.548 --> 00:03:11.079
Because when that message comes in, we
need some JavaScript code to run up here.

62
00:03:11.079 --> 00:03:14.717
And we need Node,
when it gets the inbound message,

63
00:03:14.717 --> 00:03:17.617
to trigger some code to go and
run up here.

64
00:03:17.617 --> 00:03:20.710
Where again do I insert zep?

65
00:03:20.710 --> 00:03:25.072
Specifically, if you can be as precise
as possible with your technical

66
00:03:25.072 --> 00:03:29.798
communication, where do I insert
the function that's gonna be saved in Node

67
00:03:29.798 --> 00:03:33.526
that's gonna auto-run when
Node gets an inbound message?

68
00:03:33.526 --> 00:03:35.441
&gt;&gt; Speaker 4: The parameter
of createServer function?

69
00:03:35.441 --> 00:03:39.018
&gt;&gt; Will Sentance: I parse it,
it is my argument, my input,

70
00:03:39.018 --> 00:03:44.868
the whole function definition to
the createServer function call.

71
00:03:44.868 --> 00:03:50.578
doOnIncoming, that means all of
its code is gonna be grabbed and

72
00:03:50.578 --> 00:03:56.502
thrown down to here to be the function
that auto-run this function

73
00:03:56.502 --> 00:04:01.793
when there's activity,
when activity meaning inbound,

74
00:04:01.793 --> 00:04:06.051
some sort of stuff happens,
inbound message.

75
00:04:06.051 --> 00:04:07.676
Auto-run what function zep?

76
00:04:07.676 --> 00:04:08.530
&gt;&gt; Speaker 4: doIncoming.

77
00:04:08.530 --> 00:04:14.782
&gt;&gt; Will Sentance: doOnIncoming,
and there it is.

78
00:04:14.782 --> 00:04:18.489
Auto-run this function.

79
00:04:18.489 --> 00:04:19.232
Fantastic, why?

80
00:04:19.232 --> 00:04:21.866
We don't know when the inbound
request would come.

81
00:04:21.866 --> 00:04:25.646
We don't know, and so we have to rely
on Node to trigger running some code in

82
00:04:25.646 --> 00:04:27.273
JavaScript that we can look at.

83
00:04:27.273 --> 00:04:29.977
And secondly, people, and
we're gonna see this again and again,

84
00:04:29.977 --> 00:04:32.127
JavaScript's single-threaded and
synchronous.

85
00:04:32.127 --> 00:04:36.472
All the slow work, like, well,
it's inherently slow, I guess.

86
00:04:36.472 --> 00:04:39.888
When a message comes in,
we've no idea when it's going to come in.

87
00:04:39.888 --> 00:04:43.853
All work like that, including speaking
to a database, including speaking to

88
00:04:43.853 --> 00:04:47.777
the file system, they're never going
to sit around waiting in JavaScript.

89
00:04:47.777 --> 00:04:49.710
Because it can only do
one thing at a time,

90
00:04:49.710 --> 00:04:53.317
so it can only speak to that database
until it gets a result from the database.

91
00:04:53.317 --> 00:04:58.705
Instead, any task that will take
a long time will be set up in Node and

92
00:04:58.705 --> 00:05:04.664
then have a function attached to it
that will be automatically triggered to

93
00:05:04.664 --> 00:05:09.797
run when the background task
either completes or has activity.

94
00:05:09.797 --> 00:05:12.290
We're gonna see this again,
and again, and again.

