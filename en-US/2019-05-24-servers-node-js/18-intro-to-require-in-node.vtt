WEBVTT

1
00:00:00.000 --> 00:00:04.693
&gt;&gt; Will Sentance: Next thing, getting
access to Node's built in features in C++.

2
00:00:04.693 --> 00:00:08.930
I said to you that http.createServer was
a label built in to JavaScript to access

3
00:00:08.930 --> 00:00:10.500
features in the background.

4
00:00:10.500 --> 00:00:11.749
It's not quite.

5
00:00:11.749 --> 00:00:16.133
We need one line to turn it on.

6
00:00:16.133 --> 00:00:16.920
It's a very simple line.

7
00:00:16.920 --> 00:00:20.939
We may have time later on to go into
detail about how this line works,

8
00:00:20.939 --> 00:00:22.289
really fascinating.

9
00:00:22.289 --> 00:00:26.368
If you've seen the closure Hard Parts,
it uses that in a really cool way.

10
00:00:26.368 --> 00:00:31.537
We may not have time, if not,
we'll do it in Hard Parts Node Part Two.

11
00:00:34.396 --> 00:00:39.592
&gt;&gt; Will Sentance: Invite me back, [COUGH],
anyway, so we have to tell Node we wanna

12
00:00:39.592 --> 00:00:44.334
have access to each of its
C++ features independently.

13
00:00:44.334 --> 00:00:46.117
That's by design.

14
00:00:46.117 --> 00:00:46.827
We do that so

15
00:00:46.827 --> 00:00:51.232
that we don't bring in access points
to all of these features all at once.

16
00:00:51.232 --> 00:00:55.162
Because what if I want to go
to a mail server, M-A-I-L?

17
00:00:55.162 --> 00:00:59.938
A mail server that wants to receive or
send out emails?

18
00:00:59.938 --> 00:01:05.061
That would not need HTTP
as its core protocol.

19
00:01:05.061 --> 00:01:10.284
So why pull in the HTTP access point,
labels?

20
00:01:10.284 --> 00:01:11.392
I wouldn't bother.

21
00:01:11.392 --> 00:01:15.860
So it's a way of keeping only
labels available in JavaScript for

22
00:01:15.860 --> 00:01:18.851
Node C++ features that I actually need.

23
00:01:18.851 --> 00:01:20.365
And I just run it like this.

24
00:01:20.365 --> 00:01:23.613
runRequire, now that is a built
in function, although, again,

25
00:01:23.613 --> 00:01:26.925
if we do get to modularity,
we'll see it's not really built-in.

26
00:01:26.925 --> 00:01:30.775
It's actually available in this really
cool way that's related to how the common

27
00:01:30.775 --> 00:01:33.358
JS pattern works,
which is where require comes from.

28
00:01:33.358 --> 00:01:36.934
But for now, let's just think it
was built-in, when you run require,

29
00:01:36.934 --> 00:01:40.801
anywhere in an Node file you have require
available, whatever you pass to it,

30
00:01:40.801 --> 00:01:44.517
it's gonna look at that and go,
you want access to the HTTP features.

31
00:01:44.517 --> 00:01:50.008
Let me give you all of the, and
an insert, that's what it actually does.

32
00:01:50.008 --> 00:01:56.592
It's gonna say, require's gonna put, in
your memory, label HTTP that will be for

33
00:01:56.592 --> 00:02:01.322
an object full of functions,
which include createServer,

34
00:02:01.322 --> 00:02:05.568
exactly, createServer,
&gt;&gt; Will Sentance: And

35
00:02:05.568 --> 00:02:09.359
that function is the one that
actually sets up the background.

36
00:02:09.359 --> 00:02:11.812
But think about it no
different than setTimeout.

37
00:02:11.812 --> 00:02:16.712
We'll see later on that setTimeout
is not a real JavaScript function,

38
00:02:16.712 --> 00:02:19.660
it's a label for a Node C++ built timer.

39
00:02:19.660 --> 00:02:23.688
There's no timers in JavaScript, but
setTimeout, we don't have to tell, Node,

40
00:02:23.688 --> 00:02:25.634
hey, can you put setTimeout in the mix?

41
00:02:25.634 --> 00:02:26.711
It's there already.

42
00:02:26.711 --> 00:02:30.441
HTTP and all the other ones,
to kick off Node C++ features,

43
00:02:30.441 --> 00:02:33.830
we have to tell it by using require,
bringing those in.

