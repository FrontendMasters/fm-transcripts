WEBVTT

1
00:00:00.040 --> 00:00:01.240
&gt;&gt; Speaker 1: Andrew, go ahead my friend.

2
00:00:01.240 --> 00:00:02.806
&gt;&gt; Speaker 2: When we
did the JSON that parse,

3
00:00:02.806 --> 00:00:06.299
do we also add that execution on that
circle stack and strip it back off?

4
00:00:06.299 --> 00:00:08.577
&gt;&gt; Speaker 1: They technically
do behind the scenes.

5
00:00:08.577 --> 00:00:11.333
But because we didn't write
that function and therefore,

6
00:00:11.333 --> 00:00:14.969
we don't really have any interest in it
been on there and like we're the threat

7
00:00:14.969 --> 00:00:18.360
of execution that we could control
always going inside of there.

8
00:00:18.360 --> 00:00:21.944
I see it as been distraction to
show it go on the course stack.

9
00:00:21.944 --> 00:00:24.728
Technically, it does, because it runs
in JavaScript code behind the scenes.

10
00:00:24.728 --> 00:00:28.379
But think of it instead as we're gonna
represent only functions we decide to

11
00:00:28.379 --> 00:00:29.300
execute on there.

12
00:00:29.300 --> 00:00:32.862
Because it doesn't have, we can't choose
to run another function inside of it,

13
00:00:32.862 --> 00:00:36.011
because we don't get to control it,
so it's not that interesting, but

14
00:00:36.011 --> 00:00:37.317
technically it does, yeah.

15
00:00:37.317 --> 00:00:38.520
Michael.

16
00:00:38.520 --> 00:00:42.588
&gt;&gt; Speaker 2: Does it
always return a string of

17
00:00:42.588 --> 00:00:48.234
phi.json or can you get it in
other formats like raw or.

18
00:00:48.234 --> 00:00:50.870
&gt;&gt; Speaker 1: So actually,
I don't know this too much here.

19
00:00:50.870 --> 00:00:55.891
But actually, the data that comes in
from you're talking when the data comes

20
00:00:55.891 --> 00:01:01.389
in from the background, it actually comes
in and in what's called a buffer format.

21
00:01:01.389 --> 00:01:05.916
It actually doesn't come
in in stringified JSON,

22
00:01:05.916 --> 00:01:09.403
until you convert it using JSON parse.

23
00:01:09.403 --> 00:01:14.385
So I'm being a little bit sort of
cheeky here by saying it comes in

24
00:01:14.385 --> 00:01:16.155
as stringified text.

25
00:01:16.155 --> 00:01:18.655
It actually technically comes
in what’s called a buffer.

26
00:01:18.655 --> 00:01:23.025
Which is a very flexible
way of storing data,

27
00:01:23.025 --> 00:01:27.085
because it’s literally just
a series of zeros and ones.

28
00:01:27.085 --> 00:01:30.485
And it's node’s way of
saying here’s generic data.

29
00:01:30.485 --> 00:01:35.764
Now, run functions like to string, that
will turn it into a stringified version.

30
00:01:35.764 --> 00:01:41.640
With .parse, it's alternate to
a string and parse it in one step.

31
00:01:41.640 --> 00:01:44.720
So technically, it's a very nice
clarification from Michael.

32
00:01:44.720 --> 00:01:50.740
Technically, the auto inserted data is
not actually already pre-stringified.

33
00:01:50.740 --> 00:01:52.650
I mean, it is stringified here, but

34
00:01:52.650 --> 00:01:55.619
when it gets parsed in it gets parsed
in as a series of zeroes and ones.

35
00:01:56.690 --> 00:02:01.310
Known as a buffer data format and
that's actually what gets inserted here.

36
00:02:01.310 --> 00:02:05.009
And then when we run JSON parse,
we convert it.

37
00:02:05.009 --> 00:02:09.462
And so, I'm gonna guess that probably
inside our clean tweets function

38
00:02:09.462 --> 00:02:14.061
if we're cleaning the tweets,
we must have had to stringified there, and

39
00:02:14.061 --> 00:02:15.840
then turn it back into JSON.

40
00:02:15.840 --> 00:02:17.560
I know it's stringified there, and

41
00:02:17.560 --> 00:02:20.690
then parse the stringified version
when we brought it back out.

42
00:02:20.690 --> 00:02:23.130
So it's a nice clarification Michael,

43
00:02:23.130 --> 00:02:27.303
it turns out we have a very flexible
way of freeing data in of any type.

44
00:02:27.303 --> 00:02:31.931
Image data, video data, text data,
it all come in in what is called

45
00:02:31.931 --> 00:02:35.936
the buffer format which is
zeroes to one representation.

46
00:02:35.936 --> 00:02:38.900
&gt;&gt; Speaker 2: And it's a string?

47
00:02:38.900 --> 00:02:42.430
&gt;&gt; Speaker 1: It's technically,
that is a collection of zeroes and

48
00:02:42.430 --> 00:02:45.220
ones that can be updated and
you can take pieces off it and

49
00:02:45.220 --> 00:02:47.670
start working on them, and
add more pieces into it.

50
00:02:47.670 --> 00:02:49.746
We'll see that in a second,
we'll see that in a second,

51
00:02:49.746 --> 00:02:51.054
I promise very slight, Mohammed?

52
00:02:51.054 --> 00:02:52.096
&gt;&gt; Speaker 2: Two quick points,

53
00:02:52.096 --> 00:02:56.160
did I hear you mention in beginning
that you have to import efforts?

54
00:02:56.160 --> 00:02:59.400
&gt;&gt; Speaker 1: We absolutely do, always
with any of these background features we

55
00:02:59.400 --> 00:03:05.370
have to tend if we write
require HDP require FS.

56
00:03:05.370 --> 00:03:08.550
It's a one line thing to get
access to this background feature.

57
00:03:08.550 --> 00:03:12.700
I hold it off on here, just to keep
our code focused on what matters,

58
00:03:12.700 --> 00:03:15.750
which is the interaction
between this feature.

59
00:03:15.750 --> 00:03:19.230
But actually, we would have,
let's just make sure no one misses this,

60
00:03:19.230 --> 00:03:23.781
actually the line above
would say FS =equals

61
00:03:23.781 --> 00:03:29.430
require FS, and that's just gonna
set up our access to this feature.

62
00:03:29.430 --> 00:03:30.664
Good addition, Mohammad,
yeah, is there a question?

63
00:03:30.664 --> 00:03:33.604
&gt;&gt; Speaker 2: Yeah, the error data,

64
00:03:33.604 --> 00:03:39.340
is that come with inherent
to the FS function?

65
00:03:39.340 --> 00:03:42.966
Or is that just a label that
you just named, why, what,

66
00:03:42.966 --> 00:03:45.627
how could there be error dater
&gt;&gt; Speaker 1: The error dater

67
00:03:45.627 --> 00:03:47.420
that actually gets created by a node.

68
00:03:47.420 --> 00:03:49.712
What's the error dater that gets created
by a node here, because there's no error?

69
00:03:49.712 --> 00:03:50.482
&gt;&gt; Speaker 2: Null.
&gt;&gt; Speaker 1: Null,

70
00:03:50.482 --> 00:03:51.649
does that have a label?

71
00:03:51.649 --> 00:03:52.865
Does that got a variable name for it?

72
00:03:52.865 --> 00:03:53.560
&gt;&gt; Speaker 2: No.

73
00:03:53.560 --> 00:03:57.687
&gt;&gt; Speaker 1: No, its everything
auto-created by a node has no inherent

74
00:03:57.687 --> 00:03:58.610
label.

75
00:03:58.610 --> 00:04:02.610
You'll see in the docs, it will be given
a label which is to me really unhelpful.

76
00:04:02.610 --> 00:04:05.770
It makes you think there's an inherent
label, there's no inherent label.

77
00:04:05.770 --> 00:04:09.320
There may be a name to better refer to
it colloquially among us as developers,

78
00:04:09.320 --> 00:04:12.680
but there's no label in JavaScript for it.

79
00:04:12.680 --> 00:04:16.722
We have to give it ourselves and
they're known as these, begins with p?

80
00:04:16.722 --> 00:04:18.029
&gt;&gt; Speaker 2: Parameters.
&gt;&gt; Speaker 1: Parameters,

81
00:04:18.029 --> 00:04:21.990
they're our placeholders that we
know will be filled in such that

82
00:04:21.990 --> 00:04:26.743
we can access the data that gets filled,
what's the parameter name we gave for

83
00:04:26.743 --> 00:04:29.420
the auto inserted error data?

84
00:04:29.420 --> 00:04:29.920
Mohammad.

85
00:04:31.740 --> 00:04:33.076
&gt;&gt; Speaker 2: Error data?
&gt;&gt; Speaker 1: It's error data,

86
00:04:33.076 --> 00:04:35.320
what's the parameter
the name that we gave,

87
00:04:35.320 --> 00:04:38.585
we could have called it,
here's the worst thing, people.

88
00:04:38.585 --> 00:04:42.988
We could have done this and
called it data and

89
00:04:42.988 --> 00:04:47.156
we could have called this one error data.

90
00:04:48.953 --> 00:04:50.272
&gt;&gt; Speaker 2: And you'll lose your job.

91
00:04:50.272 --> 00:04:53.814
&gt;&gt; Speaker 1: [LAUGH]
&gt;&gt; Speaker 2: But you could switch them

92
00:04:53.814 --> 00:04:59.010
round, node has no idea those
are words meaning anything to us.

93
00:04:59.010 --> 00:05:03.158
They're just placeholders, that as
long as we refer to them inside, so

94
00:05:03.158 --> 00:05:06.014
if we were writing our
function in full Mohammed,

95
00:05:06.014 --> 00:05:09.014
we would write if error data
console log error data.

96
00:05:09.014 --> 00:05:13.195
If error data has a value other than null,
so actually, we could just write if error

97
00:05:13.195 --> 00:05:16.740
data, because it would default to
being falsey, if we have null.

98
00:05:16.740 --> 00:05:21.716
If error data is not null,
then console log that.

99
00:05:21.716 --> 00:05:26.440
But, yeah, error data is just as long as
we refer to it inside the function by

100
00:05:26.440 --> 00:05:27.350
the same name.

101
00:05:27.350 --> 00:05:30.650
We could literally be terrible and
switch these labels.

102
00:05:31.810 --> 00:05:36.868
It'd be horrible, but they're just this,
I'm gonna call this one, I'm gonna call

103
00:05:36.868 --> 00:05:42.009
the data from now on, Mohammad's,
&gt;&gt; Speaker 1: Data.

104
00:05:42.009 --> 00:05:43.820
&gt;&gt; Speaker 2: That's the non-error one,
right?

105
00:05:43.820 --> 00:05:45.694
&gt;&gt; Speaker 1: Yeah, yeah, yeah, you
thought I'd write on with the error one.

106
00:05:45.694 --> 00:05:49.138
&gt;&gt; [LAUGH]
&gt;&gt; Speaker 1: You own the error,

107
00:05:49.138 --> 00:05:51.369
Mohammed, you're gonna be the, no no.

108
00:05:51.369 --> 00:05:54.440
Okay, so it's completely
arbitrary what we call them.

109
00:05:54.440 --> 00:05:58.729
All that matters,
quite clearly, is the order and

110
00:05:58.729 --> 00:06:02.234
this is known as the error first pattern.

111
00:06:02.234 --> 00:06:04.922
Why they have the error,
auto create error,

112
00:06:04.922 --> 00:06:08.050
information about
the error inserted first?

113
00:06:08.050 --> 00:06:11.210
I do not know, I guess,
it's very important, right?

114
00:06:11.210 --> 00:06:15.902
But it's the error first pattern where
the first bit of data, you can't miss it.

115
00:06:15.902 --> 00:06:18.440
You know why they do it,
because it means you can't miss it.

116
00:06:18.440 --> 00:06:20.180
Everyone otherwise,
not bother handling it,

117
00:06:20.180 --> 00:06:23.450
the parameter would be just be my data's
it, I'm gonna get my data every time.

118
00:06:23.450 --> 00:06:26.480
I'll make sure I always know the first
input is data, you can handle as many or

119
00:06:26.480 --> 00:06:28.230
as few arguments you want
in JavaScript function.

120
00:06:28.230 --> 00:06:30.540
You need to tell it to
handle all of the arguments.

121
00:06:30.540 --> 00:06:33.032
So you get the data and you wouldn't even
bother handling the error parameter.

122
00:06:33.032 --> 00:06:36.145
By putting it first, they're like,
[SOUND] you can't miss it,

123
00:06:36.145 --> 00:06:40.370
it's gonna show up in your function as the
first input, you'd better be handling it.

124
00:06:40.370 --> 00:06:43.386
So it's a small way given that service all
about the reality of working with things

125
00:06:43.386 --> 00:06:46.270
outside of JavaScript, which is pretty
clean, and they're full of errors,

126
00:06:46.270 --> 00:06:49.190
everything else, they're all full
of things that could go wrong.

127
00:06:49.190 --> 00:06:49.905
Is that go ahead sir?

128
00:06:49.905 --> 00:06:54.095
&gt;&gt; Speaker 2: Yeah, so let's see you
actually like, don't find the file or

129
00:06:54.095 --> 00:06:55.608
something like that.

130
00:06:55.608 --> 00:06:57.525
Then error will be triggered.

131
00:06:57.525 --> 00:07:00.645
Would the important Tweets at all,
like run,

132
00:07:00.645 --> 00:07:06.170
in terms of go look through the file,
because it doesn't really have to, right?

133
00:07:06.170 --> 00:07:13.371
&gt;&gt; Speaker 1: That's our job to write code
in here saying if error data not null.

134
00:07:13.371 --> 00:07:14.836
We can just write if error data,

135
00:07:14.836 --> 00:07:18.380
because if it's got something in it
it's gonna be inherently truthy.

136
00:07:18.380 --> 00:07:20.800
And therefore,
it'll evaluate if error datas are true,

137
00:07:20.800 --> 00:07:24.480
if error data is true, do something else.

138
00:07:24.480 --> 00:07:26.990
Handle the error and just write
a conditional to handle the error.

139
00:07:26.990 --> 00:07:30.310
&gt;&gt; Speaker 2: But you can also do it the
same way that we did it with the server on

140
00:07:30.310 --> 00:07:33.320
when you have a little flag that says
error, and then it calls a function.

141
00:07:33.320 --> 00:07:37.880
&gt;&gt; Speaker 1: Well ,this is where all this
will go and look at the, yes, absolutely.

142
00:07:37.880 --> 00:07:41.511
But this is where I draw the sort of
documentation and see exactly what type of

143
00:07:41.511 --> 00:07:45.257
errors, and what sort of situations will
still need this function to run, and

144
00:07:45.257 --> 00:07:48.694
what ones would lead event error to
trigger another function running.

145
00:07:48.694 --> 00:07:52.040
And we can go to the documentation to
see the specifics of how it's done.

