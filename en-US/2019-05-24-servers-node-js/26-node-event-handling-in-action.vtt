WEBVTT

1
00:00:03.237 --> 00:00:04.073
&gt;&gt; Will Sentance: Chris?

2
00:00:04.073 --> 00:00:10.325
Very good, all right, so
it's now a day later, one day later.

3
00:00:10.325 --> 00:00:16.205
One day later and Jeff opens his computer.

4
00:00:16.205 --> 00:00:20.483
Opens his Mac, and he opens

5
00:00:20.483 --> 00:00:25.319
Twitter.com and [SOUND] yeah,

6
00:00:25.319 --> 00:00:30.900
Twitter.com, fine, whatever.

7
00:00:30.900 --> 00:00:37.570
Okay, out comes his HTTP message,
out comes his HTTP message.

8
00:00:37.570 --> 00:00:41.310
It is going to be
corrupted in some format.

9
00:00:41.310 --> 00:00:43.190
There's a number of ways
this could be done.

10
00:00:43.190 --> 00:00:46.420
It could be a misspelled URL.

11
00:00:46.420 --> 00:00:49.470
It could be some unexpected
token in the URL.

12
00:00:49.470 --> 00:00:50.400
There's a number of ways.

13
00:00:50.400 --> 00:00:54.820
It could be, there's some weird
stuff that happens with the DNS.

14
00:00:54.820 --> 00:01:03.110
There's a whole list of things that can
lead to a corrupted client HTTP request.

15
00:01:03.110 --> 00:01:05.880
It's coming in, and it ain't happy.

16
00:01:05.880 --> 00:01:07.270
It's coming in.

17
00:01:07.270 --> 00:01:09.621
It arrives, and there it is.

18
00:01:09.621 --> 00:01:11.436
It arrives.

19
00:01:12.744 --> 00:01:16.690
&gt;&gt; Will Sentance: And
Node immediately can tell something's up.

20
00:01:16.690 --> 00:01:20.736
Or the other way it could be is
misformatted JSON data if you're posting,

21
00:01:20.736 --> 00:01:21.800
for example.

22
00:01:21.800 --> 00:01:25.116
So you actually maybe posting a tweet or
miswired JSON data.

23
00:01:25.116 --> 00:01:26.862
We'll see a bit more about JSON data,
sorry, in a moment.

24
00:01:26.862 --> 00:01:27.619
I forgot to mention that.

25
00:01:27.619 --> 00:01:29.060
Yeah, we'll see more
about that in a moment.

26
00:01:29.060 --> 00:01:34.840
But somehow it's corrupted, what message
within node is gonna be flushed out,

27
00:01:34.840 --> 00:01:35.760
everybody?

28
00:01:35.760 --> 00:01:36.280
&gt;&gt; Speaker 2: Client error.

29
00:01:36.280 --> 00:01:37.800
&gt;&gt; Will Sentance: Client error.

30
00:01:37.800 --> 00:01:40.455
Exactly, Node's gonna have a look inside.

31
00:01:44.978 --> 00:01:46.140
&gt;&gt; Will Sentance: And it's gonna go!

32
00:01:47.880 --> 00:01:51.856
That's glasses and eyes,
just really trying to,

33
00:01:51.856 --> 00:01:55.098
I realize it's not the best sketch ever.

34
00:01:55.098 --> 00:01:57.629
Now it looks like a Ninja Turtle.

35
00:01:59.307 --> 00:02:01.654
&gt;&gt; Will Sentance: I think, I don't know, I
don't really know about ninja turtles, but

36
00:02:01.654 --> 00:02:02.600
I think they may have masks.

37
00:02:02.600 --> 00:02:04.181
I'm not sure.

38
00:02:04.181 --> 00:02:09.209
And it's looking in, and it says corrupt.

39
00:02:09.209 --> 00:02:11.396
We don't want this being
passed into JavaScript.

40
00:02:11.396 --> 00:02:14.523
It could cause all sorts of
issues particularly, by the way,

41
00:02:14.523 --> 00:02:16.641
causing an error that breaks our server.

42
00:02:16.641 --> 00:02:20.911
We don't want this being parted
in JavaScript and trying to part,

43
00:02:20.911 --> 00:02:24.953
passed into JavaScript and
trying to parse it in JavaScript and

44
00:02:24.953 --> 00:02:27.300
then be misinterpreted, right?

45
00:02:27.300 --> 00:02:29.470
Unfortunately, British people pronounce
those words exactly the same way,

46
00:02:29.470 --> 00:02:30.780
which is rather unfortunate.

47
00:02:30.780 --> 00:02:35.270
I recognize that, that's definitely
an issue with our language design.

48
00:02:36.420 --> 00:02:40.350
So it wants to instead have us,
have it handled.

49
00:02:41.570 --> 00:02:42.350
Well, thank goodness.

50
00:02:42.350 --> 00:02:46.610
It's gonna see the bad message,
it's gonna flash out

51
00:02:46.610 --> 00:02:51.157
the message client error,
client error, client error.

52
00:02:51.157 --> 00:02:55.085
The client is Jeff sending a bad message.

53
00:02:55.085 --> 00:02:56.810
Well, it's not even his fault,
it's really DNS that did it.

54
00:02:56.810 --> 00:03:01.850
But some issue, and that's gonna trigger,
do an error running.

55
00:03:01.850 --> 00:03:05.920
Gonna be, but of course,
it's still gonna have data

56
00:03:05.920 --> 00:03:10.350
because all of these functions can't do
an error, it's expecting input as well.

57
00:03:10.350 --> 00:03:15.045
So what's the auto created and

58
00:03:15.045 --> 00:03:21.190
inserted data, known everybody as an?

59
00:03:22.220 --> 00:03:22.870
&gt;&gt; Speaker 2: Argument.

60
00:03:22.870 --> 00:03:24.470
&gt;&gt; Will Sentance: Argument.

61
00:03:24.470 --> 00:03:26.240
Known everybody as an?

62
00:03:26.240 --> 00:03:27.860
&gt;&gt; Speaker 2: Argument.

63
00:03:27.860 --> 00:03:31.003
&gt;&gt; Will Sentance: Auto inserted data into
a function being run is known as everyone

64
00:03:31.003 --> 00:03:32.120
together, as an?

65
00:03:32.120 --> 00:03:32.860
&gt;&gt; Speaker 2: Argument.

66
00:03:34.250 --> 00:03:38.190
&gt;&gt; Will Sentance: So,
what is an argument, it's auto inserted?

67
00:03:38.190 --> 00:03:39.487
&gt;&gt; Speaker 2: Data.

68
00:03:39.487 --> 00:03:40.306
&gt;&gt; Will Sentance: Matt?

69
00:03:40.306 --> 00:03:41.117
&gt;&gt; Matt: Data.
&gt;&gt; [LAUGH]

70
00:03:41.117 --> 00:03:41.714
&gt;&gt; Will Sentance: Yeah, yeah, yeah,

71
00:03:41.714 --> 00:03:42.590
that's fair.

72
00:03:42.590 --> 00:03:45.930
All right, there it is, that's good.

73
00:03:45.930 --> 00:03:51.501
And so the auto create an auto insert data
is a special type of object in JavaScript.

74
00:03:51.501 --> 00:03:56.156
No, but JavaScript as a whole called
the error type object, just an object, but

75
00:03:56.156 --> 00:03:59.168
it's formatted such that
if you console logged it,

76
00:03:59.168 --> 00:04:01.234
it comes out with some stack trace.

77
00:04:01.234 --> 00:04:05.218
That means where was this error show up,
maybe the path,

78
00:04:05.218 --> 00:04:08.801
some information about
where the error showed up.

79
00:04:08.801 --> 00:04:15.079
That is gonna have information in it, a
number of different pieces of information.

80
00:04:15.079 --> 00:04:20.490
Due one error's gonna run, that's gonna
be its auto input, so let's auto execute.

81
00:04:20.490 --> 00:04:22.130
We're what,
we're one day later, aren't we?

82
00:04:24.081 --> 00:04:25.189
&gt;&gt; Will Sentance: One day later.

83
00:04:27.947 --> 00:04:34.280
&gt;&gt; Will Sentance: And
we're gonna auto execute due on error.

84
00:04:36.000 --> 00:04:38.180
And its input is gonna be this object.

85
00:04:38.180 --> 00:04:41.337
Doesn't have a label,
it's just in the error object format.

86
00:04:41.337 --> 00:04:42.924
That's the error object format.

87
00:04:42.924 --> 00:04:45.718
It gets inserted,
it has information on the error.

88
00:04:45.718 --> 00:04:49.825
it's auto executed everything in purple,
it's done automatically by Node.

89
00:04:49.825 --> 00:04:52.145
And we go inside of it,
and we have a parameter.

90
00:04:52.145 --> 00:04:55.270
What's the parameter,Mohamed?

91
00:04:55.270 --> 00:04:57.488
It is one.

92
00:05:00.043 --> 00:05:04.837
&gt;&gt; Will Sentance: What's the parameter,
Sarah Rose, of due on error?

93
00:05:04.837 --> 00:05:05.473
&gt;&gt; Sarah Rose: Info and error.

94
00:05:05.473 --> 00:05:09.082
&gt;&gt; Will Sentance: Info and
error because we need, Mohammed,

95
00:05:09.082 --> 00:05:12.795
to have a label that lets
us use the data here.

96
00:05:12.795 --> 00:05:19.433
And then, the error object,
it arrives in that parameter.

97
00:05:19.433 --> 00:05:25.260
So how do I get to access, what label do
I use, Zet, to access this error object?

98
00:05:25.260 --> 00:05:26.559
&gt;&gt; Speaker 5: Info an error.
&gt;&gt; Will Sentance: Info an error.

99
00:05:26.559 --> 00:05:30.073
That's all a parameter is is a placeholder
that gets filled in with data

100
00:05:30.073 --> 00:05:32.368
automatically, known, everybody, as an?

101
00:05:32.368 --> 00:05:33.900
&gt;&gt; Argument.

102
00:05:33.900 --> 00:05:35.300
&gt;&gt; Will Sentance: Good job,
well done, everyone.

103
00:05:35.300 --> 00:05:36.550
That were really quick.

104
00:05:36.550 --> 00:05:38.800
Yeah, and then we console log.

105
00:05:38.800 --> 00:05:42.229
So let's just do our console.

106
00:05:42.229 --> 00:05:45.338
Also, by the way, of course, people,
not a feature of JavaScript,

107
00:05:45.338 --> 00:05:47.464
but we'll just do it in
black anyway over here.

108
00:05:47.464 --> 00:05:50.500
And we're going to use the way
of logging to the console.

109
00:05:50.500 --> 00:05:53.902
We could use console.log,
but if you do console.error,

110
00:05:53.902 --> 00:05:59.320
it's expecting a Java's error object, and
it'll do a pretty, easy to read format.

111
00:05:59.320 --> 00:06:04.430
And so it'll take console.error,

112
00:06:04.430 --> 00:06:12.350
take this data as the input, and
log over here our exact error details.

113
00:06:12.350 --> 00:06:16.680
And we can now introspect and
look at that and go, corrupt request.

114
00:06:16.680 --> 00:06:20.256
Now, as a quick side thing, people,
you do usually still want to

115
00:06:20.256 --> 00:06:23.783
send something back when that happens,
like some indication.

116
00:06:23.783 --> 00:06:26.707
Some people say status codes in HTTP.

117
00:06:26.707 --> 00:06:29.122
It's another that indicates,

118
00:06:29.122 --> 00:06:34.270
is meta information about
whether the server's working.

119
00:06:34.270 --> 00:06:36.296
What sort of data's being sent back?

120
00:06:36.296 --> 00:06:40.561
Not what sort of data is being sent back,
usually, it's mostly about things,

121
00:06:40.561 --> 00:06:43.299
information about how
the server's working, and

122
00:06:43.299 --> 00:06:47.480
particularly things like errors,
the ones beginning with four.

123
00:06:47.480 --> 00:06:50.704
So we’re gonna want to send back here for
a bad request from the client,

124
00:06:50.704 --> 00:06:53.893
a corrupted request, does anyone
know what status code we send back?

125
00:06:53.893 --> 00:06:54.435
&gt;&gt; Speaker 2: 400.

126
00:06:54.435 --> 00:06:56.710
&gt;&gt; Will Sentance: 400,
yeah, fantastic, 400.

127
00:06:56.710 --> 00:07:01.720
So we’re gonna want to send
that back because Node doesn’t

128
00:07:01.720 --> 00:07:06.720
even want to give us access to
this request in an object format,

129
00:07:06.720 --> 00:07:08.140
all it wants to give you is the error.

130
00:07:08.140 --> 00:07:11.660
Cuz you don't wanna just get a corrupted
thing with a URL slightly miswritten, and

131
00:07:11.660 --> 00:07:12.320
stuff like that.

132
00:07:12.320 --> 00:07:14.390
It doesn't even give us access to that.

133
00:07:14.390 --> 00:07:16.460
It doesn't let us do that directly.

134
00:07:16.460 --> 00:07:19.360
Instead, I'm just gonna
give you a little bonus.

135
00:07:19.360 --> 00:07:21.390
I wasn't gonna tell you this,
but it's a little bonus.

136
00:07:21.390 --> 00:07:26.700
It actually inserts,
as a second argument, the raw

137
00:07:26.700 --> 00:07:32.034
access to the socket, not an HTTP format,

138
00:07:32.034 --> 00:07:36.310
but just the socket to send, it's the data
that's gonna be sent back over the socket.

139
00:07:36.310 --> 00:07:38.540
It's not in HTTP format.

140
00:07:38.540 --> 00:07:42.650
It's just a raw piece of
data that we can send back.

141
00:07:42.650 --> 00:07:47.525
And we do get access of that actually
again as the second auto inserted input,

142
00:07:47.525 --> 00:07:48.960
but it's really raw.

143
00:07:48.960 --> 00:07:52.075
You've got to add literally, you've got
to write the words of the HTTP formatted.

144
00:07:52.075 --> 00:07:55.227
You've got to write get,
or not, sorry, not get.

145
00:07:55.227 --> 00:07:59.315
But you've got to write literally the full
HTTP formatted message by manual hand, and

146
00:07:59.315 --> 00:07:59.883
attach it.

147
00:07:59.883 --> 00:08:06.557
So the second argument gets passed in is
actually, this message as a whole for one.

148
00:08:06.557 --> 00:08:10.773
So it gets passed in directly
as a second argument, and

149
00:08:10.773 --> 00:08:15.923
we have to, sorry, we have to,
it's not HTTP message even.

150
00:08:15.923 --> 00:08:20.166
It's just the raw data
that's gonna be sent back.

151
00:08:20.166 --> 00:08:23.678
We have to add text,
a string of characters that turn it into

152
00:08:23.678 --> 00:08:27.840
the HTTP format inside of here,
sending back something like, what?

153
00:08:27.840 --> 00:08:29.971
What would we send back?

154
00:08:29.971 --> 00:08:30.537
&gt;&gt; Speaker 2: Error codes.

155
00:08:30.537 --> 00:08:33.250
&gt;&gt; Will Sentance: Status code 400,
exactly.

156
00:08:33.250 --> 00:08:36.470
So it does actually have a second auto
inserted input, and it's the raw data

157
00:08:36.470 --> 00:08:41.000
that's gonna be sent back, and
we can append to that status code 400.

158
00:08:41.000 --> 00:08:43.880
Like HDP status code 400 and
send that back.

159
00:08:43.880 --> 00:08:47.031
And over here,
they'll get a 400 error, and so

160
00:08:47.031 --> 00:08:50.935
the user will know to complain,
or whatever the situation is.

161
00:08:50.935 --> 00:08:54.847
Okay, but more important than that,
really, was again,

162
00:08:54.847 --> 00:08:57.988
we now have a second
function that can auto run.

163
00:08:57.988 --> 00:09:03.005
And we rely on Node to peal out,
referencing bells,

164
00:09:03.005 --> 00:09:08.363
peal out, announce the message,
announce the event,

165
00:09:08.363 --> 00:09:14.649
the message that's appropriate for
the given inbound request.

166
00:09:14.649 --> 00:09:16.775
Whether it's corrupted,
it's going to announce client error.

167
00:09:16.775 --> 00:09:20.990
Don't panic, we said on client error,
auto run please, Node, due on error, and

168
00:09:20.990 --> 00:09:22.024
then we handled it.

