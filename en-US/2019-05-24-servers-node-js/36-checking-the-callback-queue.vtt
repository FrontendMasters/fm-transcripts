WEBVTT

1
00:00:00.400 --> 00:00:04.360
&gt;&gt; Will Sentance: And now,
we must introduce, cuz what runs next?

2
00:00:05.720 --> 00:00:11.290
The whole time in node, before any
line of code, any function gets run,

3
00:00:11.290 --> 00:00:15.370
node is going with the help of libuv.

4
00:00:17.390 --> 00:00:21.940
Let me check, is there any code,
I mean this is a much more pure detail,

5
00:00:21.940 --> 00:00:23.700
I'm just trying to want
to introduce it for now.

6
00:00:23.700 --> 00:00:27.710
Is there any code that
we've commanded to run?

7
00:00:27.710 --> 00:00:30.680
Any code that's currently sitting or
running on the cool stack?

8
00:00:31.800 --> 00:00:33.490
Or is there any global code to run?

9
00:00:35.070 --> 00:00:42.870
Those two conditions, if the answer is no,
then start checking the queues.

10
00:00:42.870 --> 00:00:44.560
Ha that's like a Frank Sinatra reference.

11
00:00:44.560 --> 00:00:48.722
Start checking the queues for the-

12
00:00:48.722 --> 00:00:50.060
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will Sentance: [LAUGH] I like that,

13
00:00:50.060 --> 00:00:51.400
too.

14
00:00:51.400 --> 00:00:56.429
Raise your hand if you got that reference.

15
00:00:56.429 --> 00:00:57.987
A small subset.

16
00:00:57.987 --> 00:00:59.609
Do you want me to sing it?

17
00:00:59.609 --> 00:01:00.988
&gt;&gt; Speaker 2: Yes.
&gt;&gt; Will Sentance: Start, [COUGH] Okay.

18
00:01:00.988 --> 00:01:03.130
[LAUGH] Big mistake.

19
00:01:03.130 --> 00:01:05.541
All right, and
this checking of the queues.

20
00:01:05.541 --> 00:01:09.568
Once all global code or
any code we're running is finished

21
00:01:09.568 --> 00:01:14.480
this checking of the queues,
it has a built in feature that does that.

22
00:01:14.480 --> 00:01:18.677
Built by libuv, and it's in the browser
version of JavaScript as well.

23
00:01:18.677 --> 00:01:20.480
But there it's going to the browser.

24
00:01:20.480 --> 00:01:22.088
But we don't have the browser here, so

25
00:01:22.088 --> 00:01:24.150
we had to build it from
scratch again using libuv.

26
00:01:24.150 --> 00:01:27.845
And it's known as what?

27
00:01:27.845 --> 00:01:29.170
&gt;&gt; Speaker 2: Event loop.

28
00:01:29.170 --> 00:01:33.072
&gt;&gt; Will Sentance: The event loop,
the event loop.

29
00:01:33.072 --> 00:01:37.877
It is the node with the help of
the abuse a feature that looks at

30
00:01:37.877 --> 00:01:42.871
what's in the queues sees
what's being awaiting to run.

31
00:01:42.871 --> 00:01:46.678
I'm ready to run I'm ready
to be auto run by node,

32
00:01:46.678 --> 00:01:50.043
check there's no code currently running.

33
00:01:50.043 --> 00:01:52.049
And then grabs from the callback queue,

34
00:01:52.049 --> 00:01:56.160
we're going to see there's a quite
a few queues you get to choose from.

35
00:01:56.160 --> 00:01:57.900
We'll see a few of them
after the next break.

36
00:01:59.900 --> 00:02:01.670
We may even hint at most of them.

37
00:02:01.670 --> 00:02:04.350
There's a total of six cues
that it gets to choose from.

38
00:02:05.600 --> 00:02:07.820
Nice, we're probably only going
to see two or three of them.

39
00:02:07.820 --> 00:02:11.390
Because most of them it don't
just use most of the time.

40
00:02:11.390 --> 00:02:14.217
But for now,
one queue sees what's in there,

41
00:02:14.217 --> 00:02:16.690
it checks the only code that left to run?

42
00:02:16.690 --> 00:02:19.880
No, we've got rid of do on,
we finished running the last time.

43
00:02:21.500 --> 00:02:24.080
And at whatever

44
00:02:24.080 --> 00:02:28.260
would be 2.5 milliseconds cuz we
are ready to run it in 2 milliseconds.

45
00:02:29.390 --> 00:02:31.870
But we're still inside this function here.

46
00:02:31.870 --> 00:02:35.260
And so do a new batch the next running in
for the next batch as it's 4 kilobytes

47
00:02:35.260 --> 00:02:39.260
had to sit waiting, but
at 2.5 milliseconds it goes.

48
00:02:39.260 --> 00:02:42.460
Yes, you finish running to a new batch,

49
00:02:42.460 --> 00:02:47.500
the previous running of it in which you
were running clean tweets all finished.

50
00:02:47.500 --> 00:02:51.580
And so
grab the next running of to a new batch.

51
00:02:51.580 --> 00:02:52.980
And put it on the call stack.

52
00:02:56.610 --> 00:03:02.920
And run do own new batch again.

53
00:03:02.920 --> 00:03:05.103
Create a brand new every
always as a memento.

54
00:03:05.103 --> 00:03:06.940
Awaken ourselves.

55
00:03:06.940 --> 00:03:12.497
Michael was on his phone taking
on a brand new execution contest.

56
00:03:12.497 --> 00:03:13.806
Did we make it.

57
00:03:13.806 --> 00:03:14.920
&gt;&gt; Speaker 3: No.

58
00:03:14.920 --> 00:03:15.600
&gt;&gt; Will Sentance: Who made it?

59
00:03:15.600 --> 00:03:17.831
&gt;&gt; Speaker 3: Node.
&gt;&gt; Will Sentance: Node.

60
00:03:17.831 --> 00:03:19.230
Good, there you go.

61
00:03:19.230 --> 00:03:23.441
Execute it, execute it and
we're not going to go into the details.

62
00:03:23.441 --> 00:03:30.830
Its input is the next batch right,
it's the second batch of from the stream.

63
00:03:30.830 --> 00:03:35.110
The next batch is 64 kilobytes
the second one this was the first batch

64
00:03:35.110 --> 00:03:39.150
The 64 kilobytes the first one,
there's the second one.

65
00:03:39.150 --> 00:03:43.390
Clean it, append it to clean tweets and
at the very end,

66
00:03:43.390 --> 00:03:47.150
we would then want a JSON
pass that clean tweets.

67
00:03:47.150 --> 00:03:48.025
Look at this, people.

68
00:03:48.025 --> 00:03:49.100
We're lining this up beautifully.

69
00:03:49.100 --> 00:03:53.807
We're lining this up such that.

70
00:03:53.807 --> 00:04:00.420
We were able to start passing and
working on cleaning tweets as we go.

71
00:04:00.420 --> 00:04:05.420
No longer are we gonna have to wait for
all the data to be finished at once.

72
00:04:05.420 --> 00:04:10.830
Now, we can pass in the data,
start cleaning it, move on.

73
00:04:10.830 --> 00:04:13.360
Pass in the data,
start cleaning it, move on.

74
00:04:16.500 --> 00:04:19.380
This is Node's favorite feature.

75
00:04:19.380 --> 00:04:23.790
This is the feature that allows
it to start working on things

76
00:04:23.790 --> 00:04:27.010
before it's got all the data in hand.

77
00:04:27.010 --> 00:04:32.260
But to work on it in terms of
it being batches or chunks.

78
00:04:32.260 --> 00:04:35.646
Of data, and
by the way all background features or

79
00:04:35.646 --> 00:04:38.638
most of them technically, not all of them.

80
00:04:38.638 --> 00:04:42.740
Many of them where your
flowing data in and

81
00:04:42.740 --> 00:04:49.810
out are really just batches chunked,
chunkified set of data.

82
00:04:49.810 --> 00:04:53.050
And if you see the HDP one.

83
00:04:53.050 --> 00:04:56.200
Well for a tiny little thing like
a get request, it's just one chunk.

84
00:04:56.200 --> 00:05:01.250
But if it's sending back a bunch of
images, or a movie, or whatever like that,

85
00:05:01.250 --> 00:05:06.760
then it's gonna be sent in chunks out of
the socket, using this model as well.

86
00:05:07.900 --> 00:05:11.950
Okay, and
how do we own a chunk being complete,

87
00:05:11.950 --> 00:05:16.670
get access to it,
using nodes A vent system.

88
00:05:16.670 --> 00:05:20.810
That whenever a chunk gets in
it auto triggers a data event.

89
00:05:20.810 --> 00:05:23.490
We get to work on that data and

90
00:05:23.490 --> 00:05:28.870
continue in the background
bringing in the next chunk.

91
00:05:28.870 --> 00:05:31.790
And when it's done,
work on the next batch.

92
00:05:34.480 --> 00:05:39.040
And by the way you people,
I will say this,

93
00:05:39.040 --> 00:05:44.363
I contrived this so
that it took a little bit longer

94
00:05:44.363 --> 00:05:50.345
to clean the data than it took
to bring in the next batch.

95
00:05:50.345 --> 00:05:54.123
Just so we could see a function
being blocked from running.

96
00:05:54.123 --> 00:05:58.457
So I could introduce to you the fact that
we need to queue up functions to run in

97
00:05:58.457 --> 00:05:59.930
JavaScript.

98
00:05:59.930 --> 00:06:01.460
I wanted to start
introducing that to you now.

99
00:06:01.460 --> 00:06:06.040
Because it will make the final slides,
I think the final slide's coming up.

100
00:06:06.040 --> 00:06:08.910
Yeah, the final slide more accessible,

101
00:06:08.910 --> 00:06:12.580
if we've already been introduced to
the notion that we have to queue stuff up.

102
00:06:12.580 --> 00:06:15.110
Auto run functions have to queue up
before they're allowed to run in node,

103
00:06:15.110 --> 00:06:15.963
a little bit contrived.

104
00:06:15.963 --> 00:06:20.699
I actually reckon that there's no
cleaning function that would take longer

105
00:06:20.699 --> 00:06:24.890
than the time it would take to
get 64 kilobytes of data in.

106
00:06:24.890 --> 00:06:27.778
That's gonna take longer than any
cleaning function, I would suggest.

107
00:06:27.778 --> 00:06:31.305
Which would mean that
actually we would end up,

108
00:06:31.305 --> 00:06:36.910
this is a little bit of a sidebar,
people, it's not too important.

109
00:06:36.910 --> 00:06:39.760
But if you said this is the time,

110
00:06:39.760 --> 00:06:45.440
what was it that we said 15 seconds to
get in all the data and then we were pre.

111
00:06:45.440 --> 00:06:49.490
This is the time to get
all the data in 15 seconds

112
00:06:51.660 --> 00:06:55.390
and then we were,
once the data came in cleaning.

113
00:06:55.390 --> 00:06:58.360
For we said 20 seconds, but
actually reality it would be more like

114
00:06:58.360 --> 00:07:03.760
let's say 10 seconds we were
cleaning it a total of 25 seconds.

115
00:07:03.760 --> 00:07:10.500
If instead we're doing this
where we're importing, cleaning,

116
00:07:10.500 --> 00:07:15.080
simultaneously importing, cleaning,
importing cleaning, then we would finish.

117
00:07:16.260 --> 00:07:21.797
At this point we'd finish importing
all clean that last little batch and

118
00:07:21.797 --> 00:07:25.076
we would be finished in just 15 seconds.

