WEBVTT

1
00:00:00.130 --> 00:00:04.445
&gt;&gt; Will Sentance: We are now gonna be
the developers on this computer writing

2
00:00:04.445 --> 00:00:09.553
JavaScript code after turning node
on by writing the terminal node,

3
00:00:09.553 --> 00:00:14.939
turning on the node engine that
includes turn on the JavaScript engine.

4
00:00:14.939 --> 00:00:19.604
We're then gonna be saving
JavaScript code into a file that

5
00:00:19.604 --> 00:00:23.441
we're gonna run in this
node application here.

6
00:00:23.441 --> 00:00:28.234
And they're going to be testing what,
hopefully, we're gonna open a socket in

7
00:00:28.234 --> 00:00:32.122
our computer on the network card
to listen for inbound requests.

8
00:00:32.122 --> 00:00:34.332
Do we need another computer
to send those messages?

9
00:00:34.332 --> 00:00:39.905
No, we're gonna go on the same computer,
open the web browser, use this built-in

10
00:00:39.905 --> 00:00:45.572
special pseudo domain name, that's gonna
send a message right to our own computer.

11
00:00:45.572 --> 00:00:49.121
We're gonna listen on the right port, and
we're gonna send it to the right port, and

12
00:00:49.121 --> 00:00:50.570
we're gonna start writing code.

13
00:00:51.930 --> 00:00:57.834
Okay, now the code is

14
00:00:57.834 --> 00:01:04.395
at bit.ly/femnode.

15
00:01:04.395 --> 00:01:08.837
You are and you're gonna go to that,
download the zip file,

16
00:01:08.837 --> 00:01:11.757
open it, make sure you've installed Node.

17
00:01:11.757 --> 00:01:15.383
Please go to Node.org, probably.

18
00:01:15.383 --> 00:01:20.633
[LAUGH] [INAUDIBLE] Search Node on Google,
download it, install it,

19
00:01:20.633 --> 00:01:25.140
then download the zip file,
open it, it's a folder.

20
00:01:25.140 --> 00:01:29.060
First, open the readme,
open the readme and

21
00:01:29.060 --> 00:01:31.840
start following the instructions in there.

22
00:01:31.840 --> 00:01:36.430
You're going to be building
out this code here

23
00:01:36.430 --> 00:01:40.500
to be able to send back the right data
to your client, which is also you.

24
00:01:41.530 --> 00:01:42.550
There we go.

25
00:01:42.550 --> 00:01:44.150
We’ve got to do it in pairs.

26
00:01:44.150 --> 00:01:48.970
I’m not going to dwell on how to do pair
programming but here is the essence of it.

27
00:01:48.970 --> 00:01:50.540
Yes, I have thoughts on this.

28
00:01:50.540 --> 00:01:55.243
Pair programming is two of you
working from the same machine,

29
00:01:55.243 --> 00:01:59.403
one of you interpreting
the challenges being posed and

30
00:01:59.403 --> 00:02:03.120
offering an overall strategy
to how to solve it.

31
00:02:03.120 --> 00:02:07.877
You might need to go to documentation
to understand what's being asked better

32
00:02:07.877 --> 00:02:09.545
to come up with a strategy.

33
00:02:09.545 --> 00:02:14.039
But your partner, she or
he has their hands on the keyboard and

34
00:02:14.039 --> 00:02:19.153
they're going to interpret your
overall strategy into actual code.

35
00:02:19.153 --> 00:02:21.760
It's remarkably effective,
people, for so many reasons.

36
00:02:21.760 --> 00:02:24.710
One, when we are solo learning,
we found the two bad traps.

37
00:02:24.710 --> 00:02:29.820
One, researching way too much, we want to
read everything before we write any code.

38
00:02:29.820 --> 00:02:34.620
We want to build a total understanding
of something before you write any code.

39
00:02:34.620 --> 00:02:37.710
You may be able to tell
which one I'm prone to do.

40
00:02:37.710 --> 00:02:41.770
Or with a person who just grabbed
snippets of code to make it work and

41
00:02:41.770 --> 00:02:43.739
have no idea how it's working.

42
00:02:43.739 --> 00:02:48.567
Our job as developers is to be a bit of
both of those for the rest of our careers.

43
00:02:48.567 --> 00:02:51.759
But we want to train ourselves to
land in the middle whenever we're

44
00:02:51.759 --> 00:02:54.850
learning a new thing and
the best way to do that is pairing.

45
00:02:54.850 --> 00:02:59.080
Let's say we've got Zach and
Sarah Rose pairing.

46
00:02:59.080 --> 00:03:03.630
Sarah Rose is our navigator, she's looking
at the prompt and figuring out what

47
00:03:03.630 --> 00:03:07.950
is being asked, and she's giving
Zach an overall code strategy.

48
00:03:07.950 --> 00:03:11.950
She can't wonder off to read for
three hours, he's sitting there waiting.

49
00:03:11.950 --> 00:03:13.670
But nor can she just give him a snippet of

50
00:03:14.700 --> 00:03:18.530
stack overflow because he wants to
know kind of how to do it and why.

51
00:03:18.530 --> 00:03:20.430
So she's got to give a precise strategy.

52
00:03:21.610 --> 00:03:25.290
Fantastic for getting you right in the
right balance between making it work and

53
00:03:25.290 --> 00:03:26.790
understanding it all.

54
00:03:26.790 --> 00:03:29.610
But on top of that is so
many more benefits of pair programming.

55
00:03:29.610 --> 00:03:35.020
Two, Sarah Rose's technical communication,
that means her way of

56
00:03:35.020 --> 00:03:40.770
verbalizing the code that she thinks
Zach should write, has to be exemplary.

57
00:03:40.770 --> 00:03:45.490
She has to be able to communicate to
Zach such that he understands exactly

58
00:03:45.490 --> 00:03:46.990
what she's asking him to do.

59
00:03:46.990 --> 00:03:48.800
Because she can't say, Zach, no, sorry.

60
00:03:48.800 --> 00:03:52.341
What I meant was [SOUND] move
your hands up, typy-type.

61
00:03:52.341 --> 00:03:53.154
She can't do that.

62
00:03:53.154 --> 00:03:55.580
She's not allowed to touch the keyboard.

63
00:03:55.580 --> 00:03:59.420
And now, you may think, it's not that
interesting, why do I need to ask you?

64
00:03:59.420 --> 00:04:02.440
If you can communicate so
well that Zach can implement his code

65
00:04:02.440 --> 00:04:07.450
from your communication, you have
a golden scenario for a senior developer.

66
00:04:07.450 --> 00:04:12.220
Mid-level, junior developer,
can take any new feature, build it,

67
00:04:12.220 --> 00:04:13.890
if they've seen the technology before.

68
00:04:13.890 --> 00:04:16.550
Mid-level developer, any new feature,

69
00:04:16.550 --> 00:04:19.460
build it, even if they haven't
seen the technology before.

70
00:04:19.460 --> 00:04:23.240
Senior developer take any
new feature on the app and

71
00:04:23.240 --> 00:04:26.490
enable others to build
it by explaining and

72
00:04:26.490 --> 00:04:30.680
communicating how to solve it, even if
they've not seen the feature before.

73
00:04:30.680 --> 00:04:33.330
It is a key senior developer
characteristic to be

74
00:04:33.330 --> 00:04:37.500
able to communicate code and
strategy effectively, very powerful.

75
00:04:37.500 --> 00:04:39.158
Final reason I love pair programming.

76
00:04:39.158 --> 00:04:44.098
If Sarah Rose notices that
Zach's doing something wrong,

77
00:04:44.098 --> 00:04:51.010
he missed the semi colon or he missed
the curly brace, she doesn't tell him.

78
00:04:51.010 --> 00:04:52.360
She lets it happen.

79
00:04:52.360 --> 00:04:53.820
They press run.

80
00:04:53.820 --> 00:04:55.450
They see the error.

81
00:04:55.450 --> 00:04:59.710
She now knows what the error is and
they're gonna debug it together.

82
00:04:59.710 --> 00:05:03.530
And as the best pair programming partner,
she's gonna kinda lead him to it.

83
00:05:03.530 --> 00:05:06.770
For the first time,
an error is not this mystery.

84
00:05:06.770 --> 00:05:08.670
She knows what the mistake is.

85
00:05:08.670 --> 00:05:13.490
So when she sees the unexpected token,
rather than going, what the hell?

86
00:05:13.490 --> 00:05:16.390
Why would you, also, these error names?

87
00:05:16.390 --> 00:05:17.690
What do I do?

88
00:05:17.690 --> 00:05:19.719
She knows that he missed a curly brace.

89
00:05:21.120 --> 00:05:25.610
So she goes,
that's why it's saying unexpected token

90
00:05:25.610 --> 00:05:30.040
closing parenthesis because he's
missing an earlier open curly brace,

91
00:05:30.040 --> 00:05:32.030
so that's what unexpected token means.

92
00:05:32.030 --> 00:05:36.390
Suddenly, error messages become
enhancers rather than confusers.

93
00:05:36.390 --> 00:05:37.400
Really, really effective.

94
00:05:38.420 --> 00:05:44.218
Okay, there we go, navigator driver
switchover after 5, 10 minutes.

95
00:05:44.218 --> 00:05:46.824
That's it.

96
00:05:46.824 --> 00:05:48.183
Take it away, folks.

97
00:05:48.183 --> 00:05:49.860
Any other questions on pairing?

98
00:05:49.860 --> 00:05:51.012
Those are the key things.

99
00:05:51.012 --> 00:05:53.850
One other thing for
technical communication.

100
00:05:53.850 --> 00:05:57.536
Your job, Sarah Rose,
is give an overall strategy, but also,

101
00:05:57.536 --> 00:06:00.629
you want to then give line by line,
not word for word.

102
00:06:00.629 --> 00:06:02.661
Not saying, right the word function, and

103
00:06:02.661 --> 00:06:04.814
now the name of the function
in parenthesis.

104
00:06:04.814 --> 00:06:06.582
You're gonna say, declare a function.

105
00:06:06.582 --> 00:06:12.283
But you all are gonna give a line by
line strategy to execute the challenge.

106
00:06:12.283 --> 00:06:17.962
And if you hit a block, encourage your
partner to verbalize their confusion or

107
00:06:17.962 --> 00:06:23.469
you to verbalize your confusion with,
here's what we expected to happen,

108
00:06:23.469 --> 00:06:27.740
we hope the function
would return our tweets.

109
00:06:27.740 --> 00:06:29.750
Here's what actually happened,
it returned undefined.

110
00:06:30.780 --> 00:06:32.770
Here's what we suspect
might be the reason.

111
00:06:32.770 --> 00:06:36.180
Here's what we're gonna try
to see if we can adjust it.

112
00:06:36.180 --> 00:06:39.940
Here's what we're console log to
sort of introspect the function.

113
00:06:39.940 --> 00:06:41.370
And now,
we can start taking that next step.

114
00:06:41.370 --> 00:06:44.940
Still doesn't work, follow the same
process of debugging again, and again, and

115
00:06:44.940 --> 00:06:46.730
again, communicating
that debugging each time.

