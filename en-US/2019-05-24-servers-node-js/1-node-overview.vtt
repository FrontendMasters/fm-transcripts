WEBVTT

1
00:00:00.240 --> 00:00:03.420
&gt;&gt; Will Sentance: Let's start off
with seeing what it actually is

2
00:00:03.420 --> 00:00:06.200
to open a web application.

3
00:00:06.200 --> 00:00:07.540
What does that even mean?

4
00:00:07.540 --> 00:00:08.410
What's that even look like?

5
00:00:08.410 --> 00:00:09.690
Well, let's get started.

6
00:00:09.690 --> 00:00:15.410
Let's suppose we have in our audience,
three of our audience members.

7
00:00:15.410 --> 00:00:20.430
Let's suppose we have Michael, and

8
00:00:20.430 --> 00:00:26.700
Michael is going to open his Mac and
he opens his Mac, and

9
00:00:26.700 --> 00:00:34.420
it's going to load up at
twitter.com slash Michael.

10
00:00:34.420 --> 00:00:35.620
There we go.

11
00:00:35.620 --> 00:00:38.282
Okay Michael's tweets,
open it in the web browser,

12
00:00:38.282 --> 00:00:41.100
here's our little Chrome web browser.

13
00:00:41.100 --> 00:00:44.940
Okay, then we're going to have
I don't know, we have Rich.

14
00:00:44.940 --> 00:00:48.870
Excellent Rich in our audience
as well we'll have Rich.

15
00:00:48.870 --> 00:00:55.140
I'm opening up Richard's Linux Richard
runs a Linux he opens up Linux and Linux.

16
00:00:55.140 --> 00:00:58.140
He opens up Linux and.

17
00:00:58.140 --> 00:01:05.420
He also loads up Twitter, but he wants
to go to the tweets about, about Node.

18
00:01:05.420 --> 00:01:07.870
About Node.js, there is is.

19
00:01:07.870 --> 00:01:12.600
And then, let's have, we'll have, Zep.

20
00:01:12.600 --> 00:01:18.710
And let's see, Zep opens his phone,
and Zep's phone opens up, there it is.

21
00:01:18.710 --> 00:01:21.050
And he also opens up the web browser, and

22
00:01:21.050 --> 00:01:24.860
he opens up twitter.com,
here, just the home page.

23
00:01:26.340 --> 00:01:28.840
These are web applications.

24
00:01:28.840 --> 00:01:31.280
They need code to run,

25
00:01:32.530 --> 00:01:37.260
that's the three languages we're
gonna have run at this point.

26
00:01:37.260 --> 00:01:43.150
To open Twitter, and they need data
to load up when that code runs.

27
00:01:43.150 --> 00:01:47.900
Zep what is the three, oddly we have to
write three languages to load web apps.

28
00:01:47.900 --> 00:01:49.790
What's the three languages we need Zep?

29
00:01:49.790 --> 00:01:50.620
&gt;&gt; Speaker 2: HTML

30
00:01:50.620 --> 00:01:51.590
&gt;&gt; Will Sentance: HTML

31
00:01:51.590 --> 00:01:52.320
&gt;&gt; Speaker 2: CSS
&gt;&gt; Will Sentance: CSS

32
00:01:52.320 --> 00:01:53.400
&gt;&gt; Speaker 2: And JavaScript

33
00:01:53.400 --> 00:01:54.423
&gt;&gt; Will Sentance: And JavaScript.

34
00:01:54.423 --> 00:01:56.700
Excellent, well done, well done to Zep.

35
00:01:56.700 --> 00:02:01.650
HTML that's going to put stuff on the page
is going to sort of insert images or

36
00:02:01.650 --> 00:02:10.510
text on the page, CSS that's going to move
things on page called elements on page.

37
00:02:10.510 --> 00:02:14.160
We're going to have CSS it's going
to decorate and prettify them.

38
00:02:14.160 --> 00:02:19.300
Prettify and JavaScript, which is a pretty
sophisticated heavy lifting language

39
00:02:19.300 --> 00:02:23.030
that's gonna handle all the logic and
interaction.

40
00:02:23.030 --> 00:02:27.780
So when a user clicks stuff we
want to send messages to get.

41
00:02:27.780 --> 00:02:30.990
I will give it away send
messages to get further data.

42
00:02:30.990 --> 00:02:33.020
That's the JavaScript code and action.

43
00:02:33.020 --> 00:02:37.355
But we also need some data what sort
of data Michael are we gonna load up on

44
00:02:37.355 --> 00:02:38.020
this Mac?

45
00:02:40.030 --> 00:02:41.190
&gt;&gt; Speaker 3: Data from the server.

46
00:02:41.190 --> 00:02:43.040
&gt;&gt; Will Sentance: Yeah, but
specifically for Twitter,

47
00:02:43.040 --> 00:02:44.540
we're probably gonna have some tweets.

48
00:02:44.540 --> 00:02:45.210
&gt;&gt; Speaker 3: Tweets.
&gt;&gt; Will Sentance: Yeah,

49
00:02:45.210 --> 00:02:49.270
we're gonna have some tweets, we're gonna
have some images, maybe some videos.

50
00:02:49.270 --> 00:02:54.050
This is our data, this here is
our code that we need to load up.

51
00:02:54.050 --> 00:03:00.380
But hold on, where's all this data and
code coming from.

52
00:03:00.380 --> 00:03:04.600
So we're going to start with
the absolute fundamentals here.

53
00:03:04.600 --> 00:03:08.070
We're diving into the absolute
fundamentals but from this we're going to

54
00:03:08.070 --> 00:03:13.350
build up to a grand vision of
building out Node applications.

55
00:03:13.350 --> 00:03:15.300
And we saw gaps in fundamentals.

56
00:03:15.300 --> 00:03:18.620
Where does this code and
data come from Zep?

57
00:03:18.620 --> 00:03:19.230
&gt;&gt; Speaker 2: A server.

58
00:03:19.230 --> 00:03:20.610
&gt;&gt; Will Sentance: A server.

59
00:03:20.610 --> 00:03:21.410
&gt;&gt; Speaker 2: Another computer.

60
00:03:23.210 --> 00:03:26.760
&gt;&gt; Will Sentance: He gave the answer,
a server which is nothing but

61
00:03:26.760 --> 00:03:27.990
another computer.

62
00:03:30.120 --> 00:03:35.905
Here it is another computer
connected to the internet always on,

63
00:03:35.905 --> 00:03:42.910
always connected and ready to receive
a message sent out by Michael's Mac.

64
00:03:42.910 --> 00:03:45.570
Sent out by Richard's Linux.

65
00:03:45.570 --> 00:03:47.866
Sent out by Zep's phone.

66
00:03:47.866 --> 00:03:49.847
Little message.

67
00:03:49.847 --> 00:03:51.830
Little message.

68
00:03:51.830 --> 00:03:57.800
Little message each time saying hey
Twitter's computer, this is Twitter's

69
00:03:57.800 --> 00:04:03.470
at their headquarters Twitter's HQ,
a little message saying hey Twitter,

70
00:04:03.470 --> 00:04:07.906
I need Michael's tweets and the HTML,
CSS and JavaScript to load them up.

71
00:04:07.906 --> 00:04:12.380
I need the Node.js tweets,
that's what Rich needs.

72
00:04:12.380 --> 00:04:15.050
And Zep he needs the homepage
with all the tweets on it.

73
00:04:15.050 --> 00:04:19.010
Sends a message to Twitter's
headquarters where there is a computer

74
00:04:19.010 --> 00:04:21.760
connected to the internet,
nothing more than that.

75
00:04:21.760 --> 00:04:26.590
But one that's able to received
messages saying hey I need,

76
00:04:26.590 --> 00:04:31.020
specifically Rich's tweets,
Michael's tweets, Michael's tweets.

77
00:04:31.020 --> 00:04:37.200
And look at that message, and
decide what do I want to send back.

78
00:04:37.200 --> 00:04:41.030
Do I want to send back Node.js tweets,
do I want to send back Michael's tweets,

79
00:04:41.030 --> 00:04:42.710
do I want to send back homepage tweets?

80
00:04:42.710 --> 00:04:45.280
HTML, CSS, JavaScript,
what do I wanna send back?

81
00:04:45.280 --> 00:04:49.700
We need to determine
that on this computer.

82
00:04:49.700 --> 00:04:51.760
What do I do Michael in order to,

83
00:04:51.760 --> 00:04:56.390
you know in most intuitive most
kind of grounded sense Michael.

84
00:04:56.390 --> 00:04:59.260
What do I do to on that
computer to tell it

85
00:04:59.260 --> 00:05:03.940
as a developer to look at the message and
send something back.

86
00:05:03.940 --> 00:05:04.916
What do I write?

87
00:05:04.916 --> 00:05:05.596
&gt;&gt; Speaker 3: Code.

88
00:05:05.596 --> 00:05:08.390
&gt;&gt; Will Sentance: Code,
good job Michael exactly.

89
00:05:08.390 --> 00:05:09.654
I write code.

90
00:05:09.654 --> 00:05:15.410
I write code on this computer to
introspect that means look into

91
00:05:15.410 --> 00:05:22.010
this message and see what it says is
asking for and decide what's to send back.

92
00:05:22.010 --> 00:05:23.010
But folk here's the problem.

93
00:05:24.420 --> 00:05:26.670
Where's this message
arrive on my computer?.

94
00:05:27.830 --> 00:05:32.220
It arrives people on well
effectively on a network card.

95
00:05:32.220 --> 00:05:33.940
It arrives in my network.

96
00:05:35.320 --> 00:05:37.370
This is going to be interesting.

97
00:05:37.370 --> 00:05:42.610
What languages might I want
to write to control that?

98
00:05:42.610 --> 00:05:47.100
Well, well first,
what languages can I write to

99
00:05:47.100 --> 00:05:50.660
command to make instructions
to this computer.

100
00:05:50.660 --> 00:05:54.600
Rich, what other languages can I write,
in general?

101
00:05:54.600 --> 00:05:59.175
&gt;&gt; Speaker 2: PHP
&gt;&gt; Will Sentance: PHP, sure, PHP exactly.

102
00:05:59.175 --> 00:06:00.409
Java.

103
00:06:00.409 --> 00:06:01.375
Shout out some more.

104
00:06:01.375 --> 00:06:03.280
&gt;&gt; Speaker 2: Ruby
&gt;&gt; Will Sentance: Ruby.

105
00:06:03.280 --> 00:06:05.800
Every person shouted Ruby, remarkable.

106
00:06:05.800 --> 00:06:10.080
&gt;&gt; Speaker 2: C
&gt;&gt; Will Sentance: C C++ what would be

107
00:06:10.080 --> 00:06:14.508
what we dream we could write given we know
JavaScript really well for the client.

108
00:06:14.508 --> 00:06:15.669
&gt;&gt; Speaker 2: JavaScript.
&gt;&gt; Will Sentance: JavaScript.

109
00:06:15.669 --> 00:06:18.022
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will Sentance: And actually by the way,

110
00:06:18.022 --> 00:06:22.273
let me just hint there if this
computer is known as a server,

111
00:06:22.273 --> 00:06:26.525
it's going to receive messages and
serve back like a server

112
00:06:26.525 --> 00:06:32.180
in a restaurant serve up data and
code to send back to these folk here.

113
00:06:32.180 --> 00:06:35.740
These are known as our clients.

114
00:06:36.770 --> 00:06:40.257
Clients, just like in an advertising
agency, you, as a client,

115
00:06:40.257 --> 00:06:44.686
you're asking the advertising agency,
you're the advertising agency clients,

116
00:06:44.686 --> 00:06:48.859
you're asking them, hey, do you have
the latest assets, the latest videos,

117
00:06:48.859 --> 00:06:52.200
the latest images you worked on,
you're demanding for them.

118
00:06:52.200 --> 00:06:53.070
Well, that's what we're doing here,

119
00:06:53.070 --> 00:06:56.720
we're demanding of the server
to serve them back.

120
00:06:56.720 --> 00:07:02.020
Okay, our dream would be
that we could use our

121
00:07:02.020 --> 00:07:07.015
computer's internal networking ability,
it's ability to receive a message.

122
00:07:07.015 --> 00:07:10.060
Because that message Is
arriving here on the network.

123
00:07:10.060 --> 00:07:16.040
That we could somehow use the computer's
internal networking ability

124
00:07:17.760 --> 00:07:22.760
to look at the inbound message intercept
it and decide what to send back.

125
00:07:22.760 --> 00:07:24.750
Actually folk,

126
00:07:24.750 --> 00:07:30.150
there's a whole bunch of internal
features of our computer we want to use.

127
00:07:30.150 --> 00:07:35.175
Let's just remind ourselves a second
there, servers are the behind the scenes

128
00:07:35.175 --> 00:07:40.275
of all web applications, they're where
we store permanently our coding data,

129
00:07:40.275 --> 00:07:44.775
they're always on and ready to receive
messages over the internet from

130
00:07:44.775 --> 00:07:49.660
users requesting, they call it requesting,
asking for that code and data.

131
00:07:49.660 --> 00:07:51.730
How's the computer to
know what to send back?

132
00:07:51.730 --> 00:07:53.510
We write, Michael?

133
00:07:53.510 --> 00:07:54.050
&gt;&gt; Speaker 3: Code.

134
00:07:54.050 --> 00:07:55.060
&gt;&gt; Will Sentance: Code.

135
00:07:55.060 --> 00:07:56.900
What language can we use
to write its instructions?

136
00:07:56.900 --> 00:07:58.950
Well, that's an interesting question.

137
00:08:00.200 --> 00:08:02.240
That's an interesting question.

138
00:08:02.240 --> 00:08:07.890
There's a whole bunch of internal
features we need to use on our computer.

139
00:08:07.890 --> 00:08:12.520
If we're gonna send back HTML,
JavaScript and CSS, those

140
00:08:12.520 --> 00:08:18.260
are typically gonna be stored as files
on this computer,'s maybe hard drive.

141
00:08:18.260 --> 00:08:23.840
So I guess I also will need to
write code to get those files,

142
00:08:23.840 --> 00:08:29.000
the HTML, .HTML file,
these are files that get sent of code.

143
00:08:29.000 --> 00:08:33.090
Pre-written code that we're gonna send
back so Michael can load up his tweets.

144
00:08:33.090 --> 00:08:36.780
We're going to have to I guess
access file storage as well.

145
00:08:36.780 --> 00:08:40.530
There's actually a whole bunch of internal
features we might want to access.

146
00:08:40.530 --> 00:08:42.800
Here's our dream people.

147
00:08:42.800 --> 00:08:47.550
That we would be able to use
the JavaScript programming language

148
00:08:47.550 --> 00:08:50.460
to control these internal features.

149
00:08:50.460 --> 00:08:55.200
Not only because we know it,
we know it, we love it.

150
00:08:55.200 --> 00:08:56.670
But we are experts in it.

151
00:08:56.670 --> 00:08:59.860
We watch Hard Parts Part One,
Hard Parts and New Hard Parts.

152
00:08:59.860 --> 00:09:01.785
Hard Parts OOP, we all watched it, right?

153
00:09:01.785 --> 00:09:04.100
Hm-mm.

154
00:09:04.100 --> 00:09:10.170
It also has some really wonderful design
decisions that are going to actually make,

155
00:09:10.170 --> 00:09:15.430
in theory using these features,
really clean experience.

156
00:09:15.430 --> 00:09:18.550
But there's a bit of an issue here.

157
00:09:18.550 --> 00:09:23.400
I know for
sure that I can not use JavaScript

158
00:09:23.400 --> 00:09:28.000
to access any of these internal
features of my computer.

159
00:09:28.000 --> 00:09:33.460
But that's the critical thing to be able
to do when the message comes in from

160
00:09:33.460 --> 00:09:38.480
Michael’s mac saying Twitter, I need the
new tweet, can you please send it back.

161
00:09:38.480 --> 00:09:39.750
Who sends the message?

162
00:09:39.750 --> 00:09:40.650
The web browser.

163
00:09:40.650 --> 00:09:43.190
As soon as you open
twitter.com/michael press enter,

164
00:09:43.190 --> 00:09:46.060
sends out a message asking for
those tweets.

165
00:09:46.060 --> 00:09:47.920
Here’s the problem, people.

166
00:09:47.920 --> 00:09:51.160
JavaScript definitely does
not have the ability to

167
00:09:51.160 --> 00:09:52.760
use any of those internal features.

168
00:09:55.640 --> 00:10:02.440
Rich, what programming language does
have the ability to access those

169
00:10:02.440 --> 00:10:08.760
internal features such that when a message
comes in asking for your tweets, Michael.

170
00:10:08.760 --> 00:10:12.000
The little message comes in,
it lands somehow on the network feature,

171
00:10:12.000 --> 00:10:14.250
the network card in some sense.

172
00:10:14.250 --> 00:10:18.142
What language would allow us to access and
look at that message?

173
00:10:18.142 --> 00:10:18.971
&gt;&gt; Speaker 4: C++?

174
00:10:18.971 --> 00:10:21.990
&gt;&gt; Will Sentance: C++, he's spot on.

175
00:10:21.990 --> 00:10:23.875
The glorious C++.

176
00:10:23.875 --> 00:10:30.371
And so If we are to be able to use
JavaScript to access those features

177
00:10:30.371 --> 00:10:35.475
to look at the inbound
message to decide what files,

178
00:10:35.475 --> 00:10:41.855
HTML, CSS, JavaScript, what data,
what images to send back,

179
00:10:41.855 --> 00:10:46.495
and to get access to them
from the file storage,

180
00:10:46.495 --> 00:10:51.148
we're gonna somehow need
to make use of C++.

181
00:10:51.148 --> 00:10:56.124
JavaScript is gonna have
to work in hand with C++ so

182
00:10:56.124 --> 00:11:01.441
that we can write JavaScript
code to control C++ built

183
00:11:01.441 --> 00:11:07.500
features that allow control
our computer's internals.

184
00:11:07.500 --> 00:11:12.322
And these two together
are known as Node.js.

185
00:11:12.322 --> 00:11:16.784
Why it's called Node.js I do not know
when it's got so much C++ in it, but

186
00:11:16.784 --> 00:11:17.986
it is known as Node.

187
00:11:17.986 --> 00:11:19.038
There we go, people.

188
00:11:19.038 --> 00:11:23.764
So C++ has many features that directly
interact with the operating system,

189
00:11:23.764 --> 00:11:27.880
they call this the operating
system portion, itself directly.

190
00:11:27.880 --> 00:11:29.110
JavaScript doesn't.

191
00:11:29.110 --> 00:11:32.741
So it has to work with C++ to
control those computer features,

192
00:11:32.741 --> 00:11:36.090
it's known together collectively as Node.

193
00:11:36.090 --> 00:11:40.000
JavaScript effects Node,
affects computer feature.

194
00:11:40.000 --> 00:11:44.970
Now we're going to spend the whole
rest of today, all day to come,

195
00:11:44.970 --> 00:11:51.810
the whole rest of this course, we're
going to spend on writing JavaScript code

196
00:11:51.810 --> 00:11:56.370
to control indirectly via
C++ the computer features we

197
00:11:56.370 --> 00:12:01.260
need to have access to to get our inbound
message and to send back a response,

198
00:12:01.260 --> 00:12:04.540
to send back the right data,
the right tweet, the right HTML file.

199
00:12:05.540 --> 00:12:09.700
Does that mean I need
to know C++ inside out?

200
00:12:09.700 --> 00:12:11.430
You might think it would.

201
00:12:11.430 --> 00:12:16.240
It turn out we're gonna
get from JavaScript a ton,

202
00:12:17.400 --> 00:12:23.670
a ton of labels built into
JavaScript that are gonna give us,

203
00:12:23.670 --> 00:12:28.790
labels like HTTP,
like FS that we will have to sort of

204
00:12:28.790 --> 00:12:32.090
tell JavaScript we want to use,
we'll see how to do that later on.

205
00:12:32.090 --> 00:12:36.356
That will give us access to C++
features that give us access to

206
00:12:36.356 --> 00:12:38.560
the computer's internals.

207
00:12:38.560 --> 00:12:41.600
Now that might feel like well, what do we
need to know about those C++ features?

208
00:12:41.600 --> 00:12:44.520
If we're going to understand and write
the code, do we need to know about them.

209
00:12:44.520 --> 00:12:46.060
We definitely need to know about them.

210
00:12:46.060 --> 00:12:50.530
They are going to handle a vast amount
of the interaction with this underlying

211
00:12:50.530 --> 00:12:53.980
operating system features like
the file system like the network.

212
00:12:53.980 --> 00:12:57.940
So we better understand
this portion intimately.

213
00:12:57.940 --> 00:13:02.000
We don't need we do not need
to know C++ code to do so.

214
00:13:02.000 --> 00:13:06.350
But we do need to understand the mental
models of how it's working and

215
00:13:06.350 --> 00:13:09.980
how these JavaScript labels
are going to trigger C++ features.

216
00:13:09.980 --> 00:13:14.800
And that's what we're gonna
spend our time today doing.

217
00:13:14.800 --> 00:13:20.939
An intimate understanding of how
JavaScript labels take command through

218
00:13:20.939 --> 00:13:27.374
C++ and get a ton of help from Node
built C++, much of Node is a C++ code,

219
00:13:27.374 --> 00:13:32.736
in order to take command of
the internal features of a computer.

220
00:13:35.575 --> 00:13:40.081
&gt;&gt; Will Sentance: But in order to do so
we had better understand JavaScript.

