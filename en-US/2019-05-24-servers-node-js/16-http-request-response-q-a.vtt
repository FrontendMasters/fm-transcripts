WEBVTT

1
00:00:00.027 --> 00:00:01.384
&gt;&gt; Will Sentance: Michael,
why don't you take it away?

2
00:00:01.384 --> 00:00:03.888
You've had some excellent clarification,
so take it away.

3
00:00:03.888 --> 00:00:10.518
&gt;&gt; Speaker 2: Does all the data from
the computer arrive at once, or does it?

4
00:00:10.518 --> 00:00:15.078
&gt;&gt; Will Sentance: Behind the scenes,
there is a way of parsing

5
00:00:15.078 --> 00:00:19.900
data over HTTP in what's called chunks.

6
00:00:19.900 --> 00:00:23.527
But that is, even if we do want
to take that into account and

7
00:00:23.527 --> 00:00:27.525
start handling data sooner, or
start handling data in chunks,

8
00:00:27.525 --> 00:00:32.060
we're gonna have a way of doing that
that Node is gonna give us access to.

9
00:00:32.060 --> 00:00:36.001
We're gonna see that, I think you kind
of got a hint of this, from me saying,

10
00:00:36.001 --> 00:00:39.947
we get more sophisticated at how the data
comes from the internal feature into

11
00:00:39.947 --> 00:00:41.423
JavaScript to be worked on.

12
00:00:41.423 --> 00:00:44.197
We can start handling it in batches.

13
00:00:44.197 --> 00:00:47.522
And after the break,
we're gonna see handling data in batches,

14
00:00:47.522 --> 00:00:48.560
not in one big load.

15
00:00:48.560 --> 00:00:52.393
But this is so tiny, man,
that it's not gonna be in batches.

16
00:00:52.393 --> 00:00:55.707
This is just straight in,
but yes, in HTTP,

17
00:00:55.707 --> 00:00:59.738
you're gonna learn they're
called streams of data.

18
00:00:59.738 --> 00:01:04.908
I don't love the name because it sounds
like it's all happening, the zeroes and

19
00:01:04.908 --> 00:01:09.410
ones in a flow, whereas in fact,
it's chunk, chunk, and so forth.

20
00:01:09.410 --> 00:01:10.620
Okay, we'll see more of it soon.

21
00:01:10.620 --> 00:01:11.830
Thank you, Michael.

22
00:01:11.830 --> 00:01:13.230
Sarah Rose?

23
00:01:13.230 --> 00:01:15.183
&gt;&gt; Speaker 3: So Node is running our,

24
00:01:15.183 --> 00:01:18.998
I maybe should have I
asked this farther back.

25
00:01:18.998 --> 00:01:22.003
Node is running our due on incoming for
us,

26
00:01:22.003 --> 00:01:25.350
is that happening in our
client in the browser?

27
00:01:25.350 --> 00:01:30.421
Is that happening on,
if that question makes sense.

28
00:01:30.421 --> 00:01:33.335
&gt;&gt; Will Sentance: So everything on
this side is Twitter's computer,

29
00:01:33.335 --> 00:01:37.307
it's the computer connected to
the Internet ready to receive messages

30
00:01:37.307 --> 00:01:42.540
from people like Sarah Rose, and so
everything here is on Twitter's computer.

31
00:01:42.540 --> 00:01:43.040
Excellent.

32
00:01:45.405 --> 00:01:46.518
&gt;&gt; Will Sentance: Bhavit,
you had a question.

33
00:01:46.518 --> 00:01:50.715
&gt;&gt; Speaker 2: So we just wrote for
a get service call, right?

34
00:01:50.715 --> 00:01:52.371
So if you have to change, or

35
00:01:52.371 --> 00:01:57.418
do we have to declare all get post methods
in the beginning, or can we change later?

36
00:02:02.512 --> 00:02:07.738
&gt;&gt; Will Sentance: We're gonna discover in
a second, any time we want to make any

37
00:02:07.738 --> 00:02:14.676
changes to the computer's internal open
socket in the Node pre-setup feature,

38
00:02:14.676 --> 00:02:19.601
any changes, if we wanna come in and
edit our JavaScript,

39
00:02:19.601 --> 00:02:25.059
we have to turn Node off and
back on again and reload everything.

40
00:02:26.983 --> 00:02:32.354
&gt;&gt; Will Sentance: You can imagine Node
being adjusted such that changes from here

41
00:02:32.354 --> 00:02:37.940
that were non-breaking to existing
things you set up down here.

42
00:02:37.940 --> 00:02:42.408
You could make them without having to
turn Node off and turn it back on again.

43
00:02:42.408 --> 00:02:47.206
But the standard is any changes
you make up here are gonna be too

44
00:02:47.206 --> 00:02:49.060
breaking to down here.

45
00:02:49.060 --> 00:02:53.979
So you always have to layout all your jobs
from code, handle the get, handle the get

46
00:02:53.979 --> 00:02:58.908
at this address, handle the post at this
address, post at this route, this path.

47
00:02:58.908 --> 00:03:01.890
You have to do them all at once,
run through it all in JavaScript,

48
00:03:01.890 --> 00:03:05.270
use that all to setup the background
stuff, and then you're ready to go.

49
00:03:05.270 --> 00:03:06.627
You can't later come and

50
00:03:06.627 --> 00:03:09.671
run more JavaScript code to
setup more stuff back here.

51
00:03:09.671 --> 00:03:10.550
You gotta do it all at once.

52
00:03:10.550 --> 00:03:12.490
We're gonna start to see that now.

53
00:03:12.490 --> 00:03:14.300
Any more clarifications with that?

54
00:03:14.300 --> 00:03:16.112
Yeah, Jeff?

55
00:03:16.112 --> 00:03:20.488
&gt;&gt; Speaker 2: So
if we send in the URL tweets/A say, and

56
00:03:20.488 --> 00:03:26.754
this isn't gonna work and
it's gonna throw an exception.

57
00:03:26.754 --> 00:03:31.073
Are we gonna cover what happens
when there's an exception?

58
00:03:31.073 --> 00:03:34.730
Because I'm curious because what I've
seen in my own experience is if you don't

59
00:03:34.730 --> 00:03:38.307
handle it, the browser stays connected and
it just stays there in that state.

60
00:03:38.307 --> 00:03:41.036
&gt;&gt; Will Sentance: Absolutely,
absolutely, and

61
00:03:41.036 --> 00:03:45.169
we are,
&gt;&gt; Will Sentance: Going to see how to

62
00:03:45.169 --> 00:03:46.315
handle errors.

63
00:03:47.520 --> 00:03:50.451
In fact, I have a slide coming up that
says well, let's see what it says.

64
00:03:57.139 --> 00:03:57.974
&gt;&gt; Will Sentance: Yeah, it's so

65
00:03:57.974 --> 00:04:01.523
innate because you're dealing
with someone else's computer.

66
00:04:01.523 --> 00:04:05.739
We have to have a really sophisticated
system for handling errors, yep.

67
00:04:05.739 --> 00:04:09.500
Okay, all right, yeah.

68
00:04:09.500 --> 00:04:13.663
&gt;&gt; Speaker 2: Super quick question,
it's kind of a dumb question.

69
00:04:13.663 --> 00:04:14.500
&gt;&gt; Will Sentance: I doubt it,
I'm sure it's a very insightful question.

70
00:04:14.500 --> 00:04:17.871
&gt;&gt; Speaker 2: So
let's say instead of when I display hello,

71
00:04:17.871 --> 00:04:22.155
you just wanna display the matter
that HTTP request used.

72
00:04:22.155 --> 00:04:25.745
So all I have to do is literally just
incoming data that mattered, and I'm done.

73
00:04:25.745 --> 00:04:27.155
&gt;&gt; Will Sentance: Done, well,
you wanna console log it, right,

74
00:04:27.155 --> 00:04:29.865
because you wanna display
it to the console.

75
00:04:29.865 --> 00:04:33.663
You wanna log it to the console, yeah,
console log incoming data.method, spot on.

76
00:04:33.663 --> 00:04:37.920
Incomingdata.method, you would see get,
the string get in.

77
00:04:37.920 --> 00:04:39.722
&gt;&gt; Speaker 2: It's just the property
of the object pretty much.

78
00:04:39.722 --> 00:04:42.415
&gt;&gt; Will Sentance: Yep, in fact,
this should be a string.

79
00:04:42.415 --> 00:04:43.880
&gt;&gt; Speaker 2: Got you.

80
00:04:43.880 --> 00:04:46.432
&gt;&gt; Will Sentance: It's not a string here,
here it's just a text file,

81
00:04:46.432 --> 00:04:47.462
it grabs the get bit.

82
00:04:47.462 --> 00:04:49.875
It's always in the same place
in the inbound message and

83
00:04:49.875 --> 00:04:52.353
sticks it in as a string on
the object that gets inserted.

84
00:04:52.353 --> 00:04:57.298
Okay, all right, folk, so now we're
about to come to a break in about five,

85
00:04:57.298 --> 00:05:01.652
ten minutes during which we're
gonna pair program and take lunch.

86
00:05:01.652 --> 00:05:06.515
To do so, we need to understand
how the hell do I run this?

87
00:05:06.515 --> 00:05:07.600
It looks all very nice.

88
00:05:07.600 --> 00:05:10.430
It's amazing how easy it is
to run code on a whiteboard.

89
00:05:10.430 --> 00:05:11.700
Extraordinary.

90
00:05:11.700 --> 00:05:13.680
You just write it, and it runs.

91
00:05:13.680 --> 00:05:14.920
It's fascinating.

92
00:05:14.920 --> 00:05:19.091
But on our computer, we need to be able
to run JavaScript, turn on Node, or

93
00:05:19.091 --> 00:05:21.759
turn on Node that opens
up a JavaScript engine.

94
00:05:21.759 --> 00:05:22.539
Runs that code,

95
00:05:22.539 --> 00:05:26.118
switches on Node feature that switches
on computer's internal features.

96
00:05:26.118 --> 00:05:27.127
How the hell do we do this?

97
00:05:27.127 --> 00:05:29.290
Well, letâ€™s see.

