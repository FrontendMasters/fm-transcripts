WEBVTT

1
00:00:00.080 --> 00:00:04.050
&gt;&gt; Will Sentance: And about, I don't know,
let's say about 200 milliseconds in,

2
00:00:04.050 --> 00:00:08.780
about 200 milliseconds in,
with 200 milliseconds in,

3
00:00:08.780 --> 00:00:12.320
what's gonna happen down here?

4
00:00:13.330 --> 00:00:19.872
Just by the size of this file at 200
milliseconds, the data comes back.

5
00:00:19.872 --> 00:00:24.720
We're thrilled, don't even start how

6
00:00:24.720 --> 00:00:30.580
happy I am right now,
I'm over the moon news.

7
00:00:30.580 --> 00:00:33.435
What functions is gonna auto run
presumably straight back in JavaScript,

8
00:00:33.435 --> 00:00:35.081
get rid of block for 500milliseconds?

9
00:00:35.081 --> 00:00:40.528
It's not gonna continue running, hm, poor,
of course, it's gonna continue running.

10
00:00:40.528 --> 00:00:44.231
So instead, well, what function is gonna
auto run at this point, Sarah Rose,

11
00:00:44.231 --> 00:00:46.240
when that data comes back without tweets?

12
00:00:47.310 --> 00:00:49.813
What function is gonna auto run, Michael?

13
00:00:52.870 --> 00:00:54.510
&gt;&gt; Michael: Use imported tweets.

14
00:00:54.510 --> 00:00:59.690
&gt;&gt; Will Sentance: Use imported tweets,
there it is, there's our function.

15
00:01:01.300 --> 00:01:06.825
What data is gonna be auto inserted,
auto insert data,

16
00:01:06.825 --> 00:01:11.070
what data is gonna be auto inserted, Sam?

17
00:01:13.830 --> 00:01:17.191
When the data comes back
from the fall system,

18
00:01:17.191 --> 00:01:19.871
what data is gonna be auto inserted?

19
00:01:19.871 --> 00:01:21.369
&gt;&gt; Sam: That's the two
parameters of the deal.

20
00:01:21.369 --> 00:01:23.901
&gt;&gt; Will Sentance: Two of them,
yeah, yeah, yeah, yeah, the-

21
00:01:23.901 --> 00:01:25.950
&gt;&gt; Sam: Data the error, and then the data.

22
00:01:25.950 --> 00:01:28.873
&gt;&gt; Will Sentance: The error data, and
then the actual data, exactly and so,

23
00:01:28.873 --> 00:01:31.516
we've got the first one error
data is that hope null.

24
00:01:31.516 --> 00:01:36.141
And the second one is the actual
data which would be actually totally

25
00:01:36.141 --> 00:01:40.601
a buffer which is there isn't one format,
but we can say for now,

26
00:01:40.601 --> 00:01:43.054
we can say JSON string, JSON data.

27
00:01:43.054 --> 00:01:46.955
Tweet 1, Hello and so forth, there it is,

28
00:01:46.955 --> 00:01:53.350
they're ready to be inserted,
the function's ready to run.

29
00:01:53.350 --> 00:01:55.811
Is it allowed onto the call set to run?

30
00:01:55.811 --> 00:02:00.024
Definitely not, our event loop as
introduced the event we began,

31
00:02:00.024 --> 00:02:02.340
our event loop is very strong.

32
00:02:02.340 --> 00:02:07.010
Very strict, doesn't allow anything on
if there's anything on the call stack or

33
00:02:07.010 --> 00:02:08.847
any further global code to run.

34
00:02:08.847 --> 00:02:15.220
Mm, mm, I'm not allowed back home,
so instead, we have a second queue.

35
00:02:16.990 --> 00:02:21.462
It's called the I/O queue or
I/O callback queue, so

36
00:02:21.462 --> 00:02:24.584
this is what we actually saw earlier.

37
00:02:24.584 --> 00:02:29.314
And into it, a stored,
queued up any functions

38
00:02:29.314 --> 00:02:33.934
triggered to run,
by honesty, most of node.

39
00:02:33.934 --> 00:02:38.580
Like 95% of the functions, you're gonna
have autorun, will end up in this queue.

40
00:02:38.580 --> 00:02:43.470
Anyone's involved, data come from
the file system, from a network socket,

41
00:02:43.470 --> 00:02:49.320
any of those, all the associated autorun
functions go into the I/O callback queue.

42
00:02:49.320 --> 00:02:53.900
Okay, so what one comes in,
just to help me out, Bevette again,

43
00:02:53.900 --> 00:02:57.400
which one's gonna be stored
in callback queue to autorun?

44
00:02:59.150 --> 00:03:02.030
For our tweets come in Zed?

45
00:03:02.030 --> 00:03:02.710
&gt;&gt; Zep: Use imported tweets.

46
00:03:02.710 --> 00:03:08.402
&gt;&gt; Will Sentance: Use imported tweets,
there it is,

47
00:03:08.402 --> 00:03:12.387
use imported tweet, and

48
00:03:12.387 --> 00:03:19.614
there it is at roughly 200 milliseconds.

49
00:03:19.614 --> 00:03:26.720
It gets added to that queue, okay,
&gt;&gt; Will Sentance: Well,

50
00:03:26.720 --> 00:03:31.722
it's sitting there, at 502 milliseconds,

51
00:03:31.722 --> 00:03:37.250
what function finishes on our call stack,
Sam?

52
00:03:37.250 --> 00:03:38.270
&gt;&gt; Sam: Block for 500.

53
00:03:38.270 --> 00:03:39.719
&gt;&gt; Will Sentance: Block for
500 milliseconds,

54
00:03:41.030 --> 00:03:47.100
does the event loop feel confident yet
to add to go look in the queues?

55
00:03:47.100 --> 00:03:48.850
No, why not, Sam?

56
00:03:48.850 --> 00:03:50.574
&gt;&gt; Sam: There's some more code to run.

57
00:03:50.574 --> 00:03:52.284
&gt;&gt; Will Sentance: There's
still more global code to run,

58
00:03:52.284 --> 00:03:55.068
the code that we determine to execute,
that always comes first.

59
00:03:55.068 --> 00:03:59.060
And what is the next thing that,
502 milliseconds be run, Sam?

60
00:03:59.060 --> 00:04:00.917
&gt;&gt; Sam: Console log me first.

61
00:04:00.917 --> 00:04:04.770
&gt;&gt; Will Sentance: Fantastic,
console log me first and

62
00:04:04.770 --> 00:04:08.630
there it is, 502 milliseconds.

63
00:04:10.010 --> 00:04:13.206
But our queues is only to fill up
with stuffs, they're sitting there,

64
00:04:13.206 --> 00:04:13.910
very unhappy.

65
00:04:15.000 --> 00:04:18.901
But there's still more global code
to run and these ones are really,

66
00:04:18.901 --> 00:04:20.674
really intriguing one.

67
00:04:20.674 --> 00:04:25.760
This is a feature of node to
ensure that we can add a function

68
00:04:25.760 --> 00:04:31.130
to run after all I/O input/output
functions have definitely run.

69
00:04:32.310 --> 00:04:34.528
All I/O functions are finished running.

70
00:04:34.528 --> 00:04:39.264
We can be sure that all associated I/O
functions at that check of the event loop

71
00:04:39.264 --> 00:04:43.810
will have finished running,
because it's the third prioritized queue.

