WEBVTT

1
00:00:00.050 --> 00:00:02.685
&gt;&gt; Will Sentance: All right people,
let's sum it up.

2
00:00:02.685 --> 00:00:07.984
Rules for the automatic execution
of the JavaScript code by node,

3
00:00:07.984 --> 00:00:13.700
because by the way, all of this is
built by node with the help of live UV.

4
00:00:13.700 --> 00:00:14.970
It's not JavaScript.

5
00:00:14.970 --> 00:00:19.668
All of these queues and the event loop are
triggering it is all node, not JavaScript,

6
00:00:19.668 --> 00:00:20.788
all built in C++.

7
00:00:20.788 --> 00:00:26.722
Hold each deferred, I call these deferred
functions that we didn't run ourselves at,

8
00:00:26.722 --> 00:00:30.810
are gonna be autorun later,
they're deferred, delayed,

9
00:00:30.810 --> 00:00:35.880
autorun later, in one of the tasks,
jeez, when the node background API.

10
00:00:35.880 --> 00:00:38.730
These are actually, these C++ features,
they're technically known as APIs.

11
00:00:38.730 --> 00:00:42.580
Interface is a posh word for, any
functionality that's not in my language,

12
00:00:42.580 --> 00:00:44.470
but not in my world,
but in someone else's.

13
00:00:44.470 --> 00:00:45.880
I interface with it.

14
00:00:45.880 --> 00:00:50.458
When any of the background nodes in C++
features complete this autorun function

15
00:00:50.458 --> 00:00:52.350
don't autorun them.

16
00:00:52.350 --> 00:00:55.450
Queue them up to be autorunned,
autoran sorry.

17
00:00:55.450 --> 00:00:55.950
Autorun.

18
00:00:57.170 --> 00:01:02.060
Add the function to the call stack,
in other words, execute the function,

19
00:01:02.060 --> 00:01:03.970
add it to the call stack,
we do this with each of them.

20
00:01:05.570 --> 00:01:10.250
Only when the call stack is totally empty,
have the event loop be checking for

21
00:01:10.250 --> 00:01:11.916
this condition to be true.

22
00:01:11.916 --> 00:01:15.213
Prioritize functions in the timer queue.

23
00:01:15.213 --> 00:01:19.684
Technically a min-heap, but
basically a queue, over the I/O queue,

24
00:01:19.684 --> 00:01:23.716
over the check queue, it's known as,
over the close queue, and

25
00:01:23.716 --> 00:01:28.700
because I wasn't sure I was going to tell
you about these two, four, prioritize

26
00:01:28.700 --> 00:01:33.611
over all those queues, any functions that
were delayed by using a promise which

27
00:01:33.611 --> 00:01:38.816
we're not gonna touch on today, but is
another way of triggering background work,

28
00:01:38.816 --> 00:01:43.582
and instead of autorunning a function
autoinserting data into JavaScript,

29
00:01:43.582 --> 00:01:46.118
that outruns a function in JavaScript.

30
00:01:46.118 --> 00:01:51.670
That function goes in the micro-task cube,
but there's two of those.

31
00:01:51.670 --> 00:01:52.430
That one goes in B.

32
00:01:53.430 --> 00:01:57.470
The number one process of all that
we don't even use is process.netFix,

33
00:01:57.470 --> 00:01:59.060
any function you pass there.

34
00:01:59.060 --> 00:02:03.170
That goes in to the very,
very first queue.

35
00:02:03.170 --> 00:02:04.390
There we go people.

36
00:02:04.390 --> 00:02:07.840
Those are all the rules of node.

