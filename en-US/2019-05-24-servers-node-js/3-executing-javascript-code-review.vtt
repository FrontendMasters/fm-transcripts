WEBVTT

1
00:00:00.000 --> 00:00:01.000
&gt;&gt; Will Sentance: Here we go, people.

2
00:00:01.000 --> 00:00:06.060
JavaScript are those two things, one is
save stuff to a little data store, and

3
00:00:06.060 --> 00:00:10.840
with data store within JavaScript,
a little store of data.

4
00:00:10.840 --> 00:00:13.290
What they call the store of data

5
00:00:13.290 --> 00:00:18.170
in JavaScript itself,
&gt;&gt; Sam: Sam.

6
00:00:18.170 --> 00:00:18.940
&gt;&gt; Will Sentance: Sam.
Sorry Sam.

7
00:00:18.940 --> 00:00:21.790
What do they call the store
of data in JavaScript itself?

8
00:00:21.790 --> 00:00:23.660
&gt;&gt; Sam: Global execution context.

9
00:00:23.660 --> 00:00:26.037
&gt;&gt; Will Sentance: Not quite,
what do they call it?

10
00:00:26.037 --> 00:00:26.977
Who raise your hand anybody if
you know what they call it.

11
00:00:26.977 --> 00:00:28.004
Yes, go ahead.

12
00:00:28.004 --> 00:00:29.860
&gt;&gt; Speaker 3: Global variable environment.

13
00:00:29.860 --> 00:00:31.190
&gt;&gt; Will Sentance: That is
the fancy name for it, very nice.

14
00:00:31.190 --> 00:00:32.310
What is the trivial name for it?

15
00:00:32.310 --> 00:00:33.420
&gt;&gt; Speaker 3: Memory
&gt;&gt; Will Sentance: Memory.

16
00:00:33.420 --> 00:00:35.100
Exactly they call it memory.

17
00:00:35.100 --> 00:00:38.535
There you go global, it's global people
because it's available in all of your

18
00:00:38.535 --> 00:00:40.020
JavaScript code as it's running.

19
00:00:40.020 --> 00:00:43.830
Anything saved in this little store of
data will be available the whole time

20
00:00:43.830 --> 00:00:47.420
as opposed to when we run a function.

21
00:00:47.420 --> 00:00:53.100
It's gonna store up all that
data inside the function.

22
00:00:53.100 --> 00:00:55.130
Execution context it's known
as we'll see in a second.

23
00:00:55.130 --> 00:00:58.210
And as soon as that function finish
running, all the data gets deleted.

24
00:00:58.210 --> 00:01:01.653
All right, so, let's get storing
stuff people and remember,

25
00:01:01.653 --> 00:01:05.991
we're doing this cuz we better understand
how JavaScript runs if we're gonna be

26
00:01:05.991 --> 00:01:07.931
able to handle all people.

27
00:01:07.931 --> 00:01:11.709
By the end of the,
before we start the pair programming,

28
00:01:11.709 --> 00:01:16.038
you will have the full model of
Node down sufficient to be able to,

29
00:01:16.038 --> 00:01:19.686
in theory,
do anything that LinkedIn does with Node.

30
00:01:19.686 --> 00:01:22.116
Anything that Netflix does within reason.

31
00:01:22.116 --> 00:01:27.017
The fundamental tasks are doing
by the pair programming which is

32
00:01:27.017 --> 00:01:31.670
only a few days, no,
no only a few hours away.

33
00:01:31.670 --> 00:01:32.940
Hours away.

34
00:01:32.940 --> 00:01:34.020
Hours away.
All right, there you go.

35
00:01:34.020 --> 00:01:34.850
What are we doing then?

36
00:01:34.850 --> 00:01:39.910
Therefore at this moment as JavaScript
code kicks off, starts running,

37
00:01:39.910 --> 00:01:42.356
what's the first thing it's gonna do,
Matt?

38
00:01:42.356 --> 00:01:48.700
&gt;&gt; Speaker 3: It's gonna us,
the first line.

39
00:01:48.700 --> 00:01:49.720
&gt;&gt; Will Sentance: Yeah.

40
00:01:49.720 --> 00:01:51.123
That's the worst answer ever, Matt.

41
00:01:51.123 --> 00:01:54.178
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Will Sentance: What's that first line

42
00:01:54.178 --> 00:01:55.170
say to do?

43
00:01:55.170 --> 00:01:58.450
&gt;&gt; Speaker 3: Assign 3 to a variable.

44
00:01:58.450 --> 00:01:59.780
&gt;&gt; Will Sentance: Perfect.

45
00:01:59.780 --> 00:02:01.741
Yeah, it is, exactly, to a variable.

46
00:02:01.741 --> 00:02:03.242
NUM is set to 3.

47
00:02:03.242 --> 00:02:05.840
That means we have a label saving data.

48
00:02:05.840 --> 00:02:06.630
Next line, Matt.

49
00:02:06.630 --> 00:02:07.416
What's it say to do?

50
00:02:07.416 --> 00:02:09.580
If you can written up there.

51
00:02:09.580 --> 00:02:11.180
&gt;&gt; Speaker 3: It's a commend but.

52
00:02:11.180 --> 00:02:11.824
&gt;&gt; Will Sentance: That's true.

53
00:02:11.824 --> 00:02:12.879
&gt;&gt; Speaker 3: [LAUGH]
&gt;&gt; Will Sentance: Okay,

54
00:02:12.879 --> 00:02:15.137
next line are the jobs it executes.

55
00:02:15.137 --> 00:02:18.113
Next line it executes or
that it'll actually evaluate, sorry.

56
00:02:18.113 --> 00:02:21.760
&gt;&gt; Speaker 5: It's gonna register
a function called multiple byte?

57
00:02:21.760 --> 00:02:23.500
&gt;&gt; Will Sentance: Yeah,
what does that even mean?

58
00:02:23.500 --> 00:02:28.430
Declare, register, define,
they all mean the same thing.

59
00:02:28.430 --> 00:02:32.700
They mean literally take the functions
label, and then its body and

60
00:02:32.700 --> 00:02:35.740
parameters and save the code.

61
00:02:35.740 --> 00:02:37.860
Do not do it now, save it later.

62
00:02:37.860 --> 00:02:39.860
Save it like you save a number.

63
00:02:39.860 --> 00:02:41.470
Registering is not the right word to me.

64
00:02:41.470 --> 00:02:43.570
I mean, it's not incorrect,
but it's suggested,

65
00:02:43.570 --> 00:02:46.460
it's kind of vaguely aware of it.

66
00:02:46.460 --> 00:02:48.830
Declare, define suggest
it's vaguely aware of it.

67
00:02:48.830 --> 00:02:49.470
No.

68
00:02:49.470 --> 00:02:51.150
It never is gonna go back to this line.

69
00:02:51.150 --> 00:02:54.600
So it better hold onto all that data,
in this case it's lines of code.

70
00:02:54.600 --> 00:02:56.970
It better hold onto it and it does.

71
00:02:56.970 --> 00:02:58.450
Be really clear on that people.

72
00:02:58.450 --> 00:02:59.280
That is what it's doing.

73
00:02:59.280 --> 00:03:01.240
It's taking the label which we gave it.

74
00:03:01.240 --> 00:03:03.270
Which was what Matt?

75
00:03:03.270 --> 00:03:05.403
&gt;&gt; Matt: Multiply by-
&gt;&gt; Will Sentance: Absolutely and

76
00:03:05.403 --> 00:03:07.988
it's taking all of its code and

77
00:03:07.988 --> 00:03:12.273
the place holders,
&gt;&gt; Will Sentance: Parameters they

78
00:03:12.273 --> 00:03:16.433
are known as, they are hopefully when
we end up wanting to run this code, and

79
00:03:16.433 --> 00:03:19.550
how do we run this code later on Andrew?

80
00:03:19.550 --> 00:03:24.230
&gt;&gt; Andrew: We declare the, probably, put
the variable name with some parentheses.

81
00:03:24.230 --> 00:03:25.700
&gt;&gt; Will Sentance: [INAUDIBLE]
He's spot on.

82
00:03:25.700 --> 00:03:30.630
We execute code by taking its label and
putting parens on the end, parens.

83
00:03:30.630 --> 00:03:33.140
Not by inserting arguments.

84
00:03:33.140 --> 00:03:35.000
That is a separate thing.

85
00:03:35.000 --> 00:03:36.060
We execute code.

86
00:03:36.060 --> 00:03:38.830
We take code to run by

87
00:03:38.830 --> 00:03:42.760
putting parens on the end of
the name of the code that we save.

88
00:03:42.760 --> 00:03:43.590
Perfect.

89
00:03:43.590 --> 00:03:47.080
All right, but for now, what's the other
thing that goes into its newer function?

90
00:03:47.080 --> 00:03:50.200
Well, we ideally want that code
to be a little bit more flexible

91
00:03:50.200 --> 00:03:51.500
to work with different data.

92
00:03:52.830 --> 00:03:58.130
What if we want to say it's gonna multiply
three or seven or so we have placeholders

93
00:03:58.130 --> 00:04:02.270
for data that then gets inserted
when we go ahead and run that code.

94
00:04:02.270 --> 00:04:03.700
Two parts to running a function.

95
00:04:03.700 --> 00:04:06.230
One, running its code.

96
00:04:06.230 --> 00:04:10.040
The other,
inserting actual values as inputs.

97
00:04:10.040 --> 00:04:12.510
So, when we save the code
that's gonna later be run,

98
00:04:12.510 --> 00:04:15.035
we'd better have both of those things.

99
00:04:15.035 --> 00:04:16.980
Space, code to run.

100
00:04:16.980 --> 00:04:19.110
That's the body of the function
inside the curly braces.

101
00:04:19.110 --> 00:04:20.200
We're storing that in here.

102
00:04:21.260 --> 00:04:22.700
That's the body that function,
if I'm storing it here.

103
00:04:22.700 --> 00:04:28.770
And, we better have little placeholders
that are awaiting any data to be inserted.

104
00:04:28.770 --> 00:04:32.670
And that's the parameter
between the parentheses.

105
00:04:32.670 --> 00:04:36.170
Okay, and that's also stored in here.

106
00:04:36.170 --> 00:04:38.560
Two things ready to function,
we better be ready to do both,

107
00:04:38.560 --> 00:04:39.579
we better be ready for both of them.

108
00:04:40.860 --> 00:04:41.870
It's saved.

109
00:04:41.870 --> 00:04:45.130
Next line, Virginia, what's the nest
line of code we're gonna do after we've

110
00:04:45.130 --> 00:04:46.520
saved the function multiplied by two?

111
00:04:47.540 --> 00:04:49.740
&gt;&gt; Virginia: Some more comments?

112
00:04:49.740 --> 00:04:52.440
And then,
&gt;&gt; Virginia: [LAUGH]

113
00:04:52.440 --> 00:04:53.920
Then create a label output-
&gt;&gt; Will Sentance: Excellent.

114
00:04:53.920 --> 00:04:56.850
&gt;&gt; Virginia: And
assign it to the function.

115
00:04:56.850 --> 00:04:57.710
&gt;&gt; Will Sentance: Not quite.

116
00:04:57.710 --> 00:05:00.150
&gt;&gt; Virginia: Or execute the function.

117
00:05:00.150 --> 00:05:01.080
&gt;&gt; Will Sentance: Ha.
Left-hand side first.

118
00:05:01.080 --> 00:05:03.230
Declare output is a label.

119
00:05:03.230 --> 00:05:04.770
People this may feel quite trivial.

120
00:05:04.770 --> 00:05:10.080
We're here to learn about building
LinkedIn from scratch, but, but

121
00:05:10.080 --> 00:05:13.550
I promise you,
I have a feeling that if we're gonna

122
00:05:13.550 --> 00:05:18.440
receive messages at any random
time from Sarah roses Mac.

123
00:05:18.440 --> 00:05:21.410
She wants to get on Twitter at any time,
any time all the time.

124
00:05:21.410 --> 00:05:25.290
She's very excited by Twitter.

125
00:05:25.290 --> 00:05:29.740
In it comes,
that's gonna presumably tell Node,

126
00:05:31.410 --> 00:05:36.990
because Node can listen in through actual
learn later on a feature of a library

127
00:05:36.990 --> 00:05:43.620
of C++ code could libUV that can be
aware when an inbound message arrives.

128
00:05:43.620 --> 00:05:46.820
Node is then somehow presumably

129
00:05:46.820 --> 00:05:51.765
going to tell JavaScript to run
some code to look at that message.

130
00:05:51.765 --> 00:05:53.047
Cuz we want to look at the message.

131
00:05:53.047 --> 00:05:57.309
So we want to better write code in our
language that looks at the message and

132
00:05:57.309 --> 00:05:58.975
sees what he's asking for.

133
00:05:58.975 --> 00:06:05.490
Well, that sounds like we have to run some
code up here later than when we wrote it.

134
00:06:05.490 --> 00:06:10.200
How do we bundle up code to run
later than when we wrote it?

135
00:06:10.200 --> 00:06:12.050
Mohammed how do I bundle up code?

136
00:06:12.050 --> 00:06:12.960
&gt;&gt; Mohammed: Wrap it in a function.

137
00:06:12.960 --> 00:06:14.200
&gt;&gt; Will Sentance: Wrap it in a function.

138
00:06:14.200 --> 00:06:17.050
So it may seem trivial people functions,
but

139
00:06:17.050 --> 00:06:20.570
they turn out to be the most
important construct in JavaScript.

140
00:06:20.570 --> 00:06:25.400
Code bundled up that we're not going to
run now, we're saving it to run later.

141
00:06:25.400 --> 00:06:28.480
And we're gonna do a lot
of saving code to run late.

142
00:06:28.480 --> 00:06:32.311
And by the way, note here,
when we run it later,

143
00:06:32.311 --> 00:06:37.831
we are gonna manually ourselves put
the parens on the end to say run it.

144
00:06:37.831 --> 00:06:42.451
I have manually insert the input,

145
00:06:42.451 --> 00:06:45.645
known as the argument.

146
00:06:45.645 --> 00:06:51.967
I have a sneaking suspicion that
Node might end up being the one

147
00:06:51.967 --> 00:06:57.196
who puts the parens on
the end of our function code,

148
00:06:57.196 --> 00:07:01.830
who inserts the input automatically for
us.

149
00:07:01.830 --> 00:07:05.611
And that's gonna turn out to be
the entire paradigm of node, but

150
00:07:05.611 --> 00:07:07.440
we'll get to that in a second.

151
00:07:07.440 --> 00:07:11.080
For now, let's start off by
declaring output, there it is.

152
00:07:11.080 --> 00:07:13.840
Output, the label is declared.

153
00:07:13.840 --> 00:07:16.318
Do we know what to store in it yet
Virginia?

154
00:07:16.318 --> 00:07:17.486
&gt;&gt; Virginia: Do we know what to what?

155
00:07:17.486 --> 00:07:19.967
&gt;&gt; Will Sentance: Do we know
what to store in output yet?

156
00:07:19.967 --> 00:07:22.525
&gt;&gt; Virginia: Not yet,
cuz we haven't executed it.

157
00:07:22.525 --> 00:07:24.380
&gt;&gt; Will Sentance: Spot on from Virginia.

158
00:07:24.380 --> 00:07:27.720
So it's gonna be uninitialized for
now, no actual value.

159
00:07:27.720 --> 00:07:30.070
Not undefined,
cuz that's an actual value in JavaScript.

160
00:07:30.070 --> 00:07:32.860
Meaning, if it's a constant,
you couldn't then

161
00:07:32.860 --> 00:07:37.150
change it from being undefined to whatever
the return value from multiply by two is.

162
00:07:37.150 --> 00:07:42.150
So it starts as uninitialized,
completely, no value.

163
00:07:42.150 --> 00:07:47.110
And we go ahead and now execute code.

164
00:07:47.110 --> 00:07:51.370
And people we kind of create
almost like a mini app,

165
00:07:51.370 --> 00:07:54.090
like a mini JavaScript,
this is JavaScript that has got memory and

166
00:07:54.090 --> 00:07:56.100
the ability to go through
the code line by line.

167
00:07:56.100 --> 00:07:59.330
Anyone tell me what the ability to go
through the code line by line is known as?

168
00:08:00.920 --> 00:08:02.890
&gt;&gt; Sam: Interpreter
&gt;&gt; Will Sentance: What's the ability to go

169
00:08:02.890 --> 00:08:04.790
through the code line by line known as?

170
00:08:04.790 --> 00:08:05.820
Zep?
&gt;&gt; Zeph: Thread execution?

171
00:08:05.820 --> 00:08:07.530
&gt;&gt; Will Sentance: Thread of execution.

172
00:08:07.530 --> 00:08:12.930
That is JavaScript's ability to thread
its way down the page line by line and

173
00:08:12.930 --> 00:08:15.840
execute the code as it goes.

174
00:08:15.840 --> 00:08:20.090
Okay, well, we need the very same
two things to run a function.

175
00:08:21.500 --> 00:08:25.650
Roman, what am I calling
multiply by two with?

176
00:08:25.650 --> 00:08:26.690
&gt;&gt; Roman: Function?

177
00:08:26.690 --> 00:08:27.519
&gt;&gt; Will Sentance: What
am I calling it with?

178
00:08:27.519 --> 00:08:29.415
What input am I calling it with Sarah's?

179
00:08:29.415 --> 00:08:31.372
&gt;&gt; Sam: Emphasis?

180
00:08:31.372 --> 00:08:36.570
&gt;&gt; Sarah: For output you're calling it
&gt;&gt; Will Sentance: Which is what value?

181
00:08:36.570 --> 00:08:37.162
&gt;&gt; Sarah: Three,
&gt;&gt; Will Sentance: Three.

182
00:08:37.162 --> 00:08:37.808
Excellent.

183
00:08:37.808 --> 00:08:39.990
Thank you Sarah Rose.

184
00:08:39.990 --> 00:08:44.430
And now, we are going to
execute what's the intuitive

185
00:08:44.430 --> 00:08:47.430
meaning of the word execute, William?

186
00:08:47.430 --> 00:08:48.160
&gt;&gt; William: You're gonna run it?

187
00:08:48.160 --> 00:08:48.790
&gt;&gt; Will Sentance: Run it.

188
00:08:48.790 --> 00:08:52.257
You're gonna run the code or
multiply by two.

189
00:08:54.698 --> 00:08:59.130
&gt;&gt; Will Sentance: To run code
of a function, what do we need?

190
00:08:59.130 --> 00:09:01.048
We need a new?

191
00:09:01.048 --> 00:09:03.222
&gt;&gt; Sam: Execution context.

192
00:09:03.222 --> 00:09:07.553
[LAUGH]
&gt;&gt; Will Sentance: The movement is

193
00:09:07.553 --> 00:09:08.540
spreading.

194
00:09:08.540 --> 00:09:11.070
I mean the movement is literally just
the official word from JavaScript.

195
00:09:11.070 --> 00:09:13.690
But in some ways it is a movement.

196
00:09:13.690 --> 00:09:15.137
Exactly an execution context.

197
00:09:15.137 --> 00:09:19.578
People it's just a mini app, like a mini
JavaScript app like the big one we were

198
00:09:19.578 --> 00:09:24.152
just in, just the two things we need to
run code places store stuff that shows up,

199
00:09:24.152 --> 00:09:24.784
a memory.

200
00:09:24.784 --> 00:09:27.280
And the ability to go
through it line by line.

201
00:09:27.280 --> 00:09:29.060
Okay.
Same thing to run a function's code.

202
00:09:29.060 --> 00:09:30.910
You're gonna have another memory.

203
00:09:30.910 --> 00:09:32.260
That means a store of data.

204
00:09:32.260 --> 00:09:33.570
This one's temporary.

205
00:09:33.570 --> 00:09:35.610
They call it local or temporary.

206
00:09:35.610 --> 00:09:39.740
I call it temporary sometimes, and
it's just for inside this function.

207
00:09:39.740 --> 00:09:43.020
And when we leave the function,
what keyword makes us leave a function?

208
00:09:43.020 --> 00:09:43.520
&gt;&gt; Sam: Return.
&gt;&gt; Will Sentance: Return.

209
00:09:43.520 --> 00:09:44.840
If there's no return,

210
00:09:44.840 --> 00:09:47.410
we just leave the function automatically
when we hit the closing curly brace.

211
00:09:49.580 --> 00:09:51.200
Everything is deleted in here.

212
00:09:51.200 --> 00:09:54.640
Okay, so, first thing in the local memory,
Zep, is what?

213
00:09:54.640 --> 00:09:55.650
&gt;&gt; Zeph: Input number.

214
00:09:55.650 --> 00:09:56.310
&gt;&gt; Will Sentance: Input number.

215
00:09:56.310 --> 00:10:00.250
And it's set to what value?

216
00:10:00.250 --> 00:10:01.330
&gt;&gt; Zeph: Right now it's 3.

217
00:10:01.330 --> 00:10:05.280
&gt;&gt; Will Sentance: 3.
Then we do declare result.

218
00:10:05.280 --> 00:10:07.860
It will be 3 by 2 which is 6, and

219
00:10:07.860 --> 00:10:13.220
we return the value of result into
output and assign it to output.

220
00:10:13.220 --> 00:10:14.390
There we go folk.

221
00:10:14.390 --> 00:10:16.750
This is the heart of JavaScript.

222
00:10:16.750 --> 00:10:19.410
Two things it does, save data and code.

223
00:10:20.780 --> 00:10:22.130
Run code on data.

224
00:10:22.130 --> 00:10:24.613
What's the first thing it does Matt?

225
00:10:27.849 --> 00:10:31.091
&gt;&gt; Will Sentance: What's
the first thing it does, Michael?

226
00:10:31.091 --> 00:10:32.192
What's the first thing it does, Virginia?

227
00:10:32.192 --> 00:10:32.724
&gt;&gt; Virginia: Updates data.

228
00:10:32.724 --> 00:10:34.601
&gt;&gt; Will Sentance: Yep, and-
&gt;&gt; Sam: Garbage collection.

229
00:10:34.601 --> 00:10:36.479
&gt;&gt; Will Sentance: And code known as-
&gt;&gt; Sam: Functions.

230
00:10:36.479 --> 00:10:40.154
&gt;&gt; Will Sentance: Functions, and
the second thing it does, Sam?

231
00:10:40.154 --> 00:10:42.312
&gt;&gt; Sam: Runs it?

232
00:10:42.312 --> 00:10:44.456
&gt;&gt; Will Sentance: Runs code on data.

233
00:10:44.456 --> 00:10:45.580
First thing it does, Matt?

234
00:10:46.900 --> 00:10:48.150
&gt;&gt; Matt: Runs code.

235
00:10:48.150 --> 00:10:49.860
&gt;&gt; Will Sentance: Second
thing it does [LAUGH].

236
00:10:49.860 --> 00:10:50.800
Charlie, first thing it does?

237
00:10:50.800 --> 00:10:52.650
&gt;&gt; Charlie: Saves code and saves data.

238
00:10:52.650 --> 00:10:53.310
&gt;&gt; Will Sentance: Saves code and data.

239
00:10:53.310 --> 00:10:54.020
Correct.

240
00:10:54.020 --> 00:10:55.290
Second thing it does, Matt?

241
00:10:55.290 --> 00:10:55.910
&gt;&gt; Matt: Runs code.

242
00:10:55.910 --> 00:10:56.970
&gt;&gt; Will Sentance: Runs code!

243
00:10:56.970 --> 00:10:58.490
Matt, you are gifted beyond.

244
00:10:58.490 --> 00:11:01.340
All right, now, that's all it does.

245
00:11:01.340 --> 00:11:04.420
Now you see the at the hard part is you
know it does some interesting things like,

246
00:11:04.420 --> 00:11:06.650
when you save a function it bounds it or

247
00:11:06.650 --> 00:11:08.450
it links it to all
the surrounding vibrant things.

248
00:11:08.450 --> 00:11:12.394
But basically it saves data and
code, I know Matt do it again, and

249
00:11:12.394 --> 00:11:14.060
runs that code on the data.

250
00:11:14.060 --> 00:11:15.419
That's all it does.

251
00:11:15.419 --> 00:11:19.013
But we're the ones who tell it
to run the code by doin what?

252
00:11:19.013 --> 00:11:21.806
How do I say to run a function Charlie.

253
00:11:21.806 --> 00:11:25.246
&gt;&gt; Charlie: You,
apply a parentheses at the label.

254
00:11:25.246 --> 00:11:27.529
&gt;&gt; Will Sentance: Fantastic,
add parentheses on the end.

255
00:11:27.529 --> 00:11:28.498
Spot on.

256
00:11:30.301 --> 00:11:32.826
&gt;&gt; Will Sentance: I just have a feeling
that it might be that someone else is

257
00:11:32.826 --> 00:11:34.977
gonna be putting those parentheses on for
me and

258
00:11:34.977 --> 00:11:37.150
it's gonna be the most
important part of Node.

