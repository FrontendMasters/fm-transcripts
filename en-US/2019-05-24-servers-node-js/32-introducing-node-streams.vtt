WEBVTT

1
00:00:03.660 --> 00:00:07.225
&gt;&gt; Will Sentance: We learned about the,
on this very note, event paradigm.

2
00:00:07.225 --> 00:00:09.295
The event system, nature of Node.

3
00:00:09.295 --> 00:00:14.727
What if Node used the event,
message-broadcasting, pattern,

4
00:00:14.727 --> 00:00:20.353
where it flags out a message depending
on stuff that happens in Node,

5
00:00:20.353 --> 00:00:25.009
to auto trigger a function to
send out a message event each

6
00:00:25.009 --> 00:00:29.957
time a sufficient batch of
the JSON data had being loaded in?

7
00:00:29.957 --> 00:00:35.310
And then at each point,
have that auto run a function.

8
00:00:35.310 --> 00:00:40.160
And that function can start
cleaning that batch of data,

9
00:00:40.160 --> 00:00:43.840
store it, store it.

10
00:00:44.850 --> 00:00:49.050
While we're running that function,
cleaning that batch of data, Node is

11
00:00:49.050 --> 00:00:54.440
pulling in the next batch, triggering
the function again to clean that.

12
00:00:54.440 --> 00:00:57.910
And we're effectively gonna end
up doing these in parallel.

13
00:00:57.910 --> 00:01:01.700
While we're pulling in batches,
we're gonna simultaneously be running

14
00:01:01.700 --> 00:01:05.490
the clean tweet function
batch by batch in here.

15
00:01:05.490 --> 00:01:09.960
I can see this reducing our time down to,
I'm gonna have a feeling,

16
00:01:09.960 --> 00:01:11.540
15 seconds, basically.

17
00:01:11.540 --> 00:01:15.600
Because we're gonna spend all the time
we're pulling in batches in the background

18
00:01:15.600 --> 00:01:18.906
simultaneously cleaning tweets
in the foreground in JavaScript,

19
00:01:18.906 --> 00:01:20.773
which is only gonna take ten seconds.

20
00:01:20.773 --> 00:01:24.405
So we can do all of this while this is
happening in the background in chunks as

21
00:01:24.405 --> 00:01:25.050
it comes in.

22
00:01:28.124 --> 00:01:29.050
&gt;&gt; Will Sentance: Should be pretty cool.

23
00:01:29.050 --> 00:01:34.639
I'm gonna feel there's a bit of an issue,
though,

24
00:01:34.639 --> 00:01:40.569
because the data is gonna
come in in chunks at a rate.

25
00:01:40.569 --> 00:01:43.814
I think I'm gonna switch this up,
haha haha.

26
00:01:43.814 --> 00:01:49.830
Actually, it's gonna take 20 seconds,
there we go, to clean that much data.

27
00:01:49.830 --> 00:01:54.940
The data is gonna come in, auto trigger
a function to run on the next batch.

28
00:01:54.940 --> 00:01:58.590
But the running of the cleaning of
this batch will yet have finished.

29
00:01:58.590 --> 00:02:00.694
So is that auto triggered
function allowed to jump in and

30
00:02:00.694 --> 00:02:02.587
run at the same time as
the previous ones running?

31
00:02:02.587 --> 00:02:05.671
No, but
it can’t just be it’s not allowed to.

32
00:02:05.671 --> 00:02:07.940
There must be some really,
really strict rules for

33
00:02:07.940 --> 00:02:10.811
when it’s allowed to throw the next
running of the function in.

34
00:02:10.811 --> 00:02:15.935
And that’s gonna introduce
to us some queuing stuff.

35
00:02:15.935 --> 00:02:19.422
[BLANK AUDIO]

