WEBVTT

1
00:00:00.150 --> 00:00:05.822
&gt;&gt; Will Sentance: We've build out, though,
for here a full server in three lines,

2
00:00:05.822 --> 00:00:09.650
say to function, just do it one more time.

3
00:00:09.650 --> 00:00:12.370
Say to function, use the label
hb.createserver that sets up a no

4
00:00:12.370 --> 00:00:15.931
background feature, which really is not
really about setting something up in Node,

5
00:00:15.931 --> 00:00:19.194
more importantly about setting something
up in the computer's internals and

6
00:00:19.194 --> 00:00:20.980
open channel to the Internet.

7
00:00:20.980 --> 00:00:25.630
Perfect, and
in order that we can set up what port,

8
00:00:25.630 --> 00:00:28.505
what entry point we come in at,
which needs to be 80 because that's what

9
00:00:28.505 --> 00:00:31.030
the browser request
defaults to entering at.

10
00:00:31.030 --> 00:00:35.860
It's arriving at 80, so
you better have opened port 80.

11
00:00:35.860 --> 00:00:38.890
We were able to do that
because hdp.createServer,

12
00:00:38.890 --> 00:00:43.216
the label that sets up the port, the
socket, not the port, sorry, the socket.

13
00:00:43.216 --> 00:00:46.110
Also returned out an object
full of functions,

14
00:00:46.110 --> 00:00:49.810
it's called an edit
functions that when run,

15
00:00:51.810 --> 00:00:57.030
tapped into this instance of the Node HTP
feature, and updated the port to 80.

16
00:00:57.030 --> 00:00:59.060
We can do other stuff,
we can edit more stuff,

17
00:00:59.060 --> 00:01:01.330
there's a whole bunch of functions
on here that allow us to edit.

18
00:01:01.330 --> 00:01:03.970
We're gonna see a few
more of them in a moment.

19
00:01:03.970 --> 00:01:08.440
And then, when the inbound message came
in, we didn't panic with what to do.

20
00:01:08.440 --> 00:01:11.402
We didn't have to have the JavaScript
code running, running, running,

21
00:01:11.402 --> 00:01:12.962
running whenever the message came in.

22
00:01:12.962 --> 00:01:17.842
Instead, we relied on Node to
automatically trigger the running of some

23
00:01:17.842 --> 00:01:23.291
JavaScript code, executing it, put it in
an execution context to run the code.

24
00:01:23.291 --> 00:01:26.422
And I think the most
important piece of all,

25
00:01:26.422 --> 00:01:30.402
that 98% of even Node
developers don't really get,

26
00:01:30.402 --> 00:01:35.483
it's gonna auto insert these two
objects that were automatically made

27
00:01:35.483 --> 00:01:40.413
in Node in the JavaScript objects,
but automatically insert them.

28
00:01:40.413 --> 00:01:43.801
And one of them is all the data from
the inbound message packaged up in

29
00:01:43.801 --> 00:01:44.582
a nice format.

30
00:01:44.582 --> 00:01:46.300
They basically take all
the pieces out of it.

31
00:01:46.300 --> 00:01:51.127
They take the string or Node, and
they take and put as URL property, but

32
00:01:51.127 --> 00:01:55.190
be really clear,
it does not arrive with a URL property.

33
00:01:55.190 --> 00:01:57.480
The HTTP message, it's a string of text.

34
00:01:57.480 --> 00:02:00.790
You can look at them, and
they do not look like that.

35
00:02:00.790 --> 00:02:02.740
But we love jobs with objects.

36
00:02:02.740 --> 00:02:06.390
So they put it in a nice bundle for
us, Node does.

37
00:02:06.390 --> 00:02:12.311
And then it gives us an object full of
functions, nice bundle of functions,

38
00:02:12.311 --> 00:02:17.122
all of which are linked to
the auto created response message,

39
00:02:17.122 --> 00:02:21.839
not object, message that we can
add text to, or content to,

40
00:02:21.839 --> 00:02:26.035
HTML files to, image data to,
JavaScript files to.

41
00:02:26.035 --> 00:02:29.591
We see all this stuff to
come by running that,

42
00:02:29.591 --> 00:02:34.470
some of the functions,
on that auto inserted second object.

43
00:02:34.470 --> 00:02:38.390
One of the functions is end,
that one tells actually, overall,

44
00:02:38.390 --> 00:02:40.445
Sam, as Sam rightly said, overall,

45
00:02:40.445 --> 00:02:44.210
its job is to say hey, Node, the message
is ready to send back, go, end.

46
00:02:44.210 --> 00:02:46.860
End's not a stupid,
end's a sensible name for it.

47
00:02:46.860 --> 00:02:51.500
But actually, we can also pass to it
one thing that we want to send back

48
00:02:51.500 --> 00:02:56.080
if you want to, but typically, we don't
use ends to add the data to send back.

49
00:02:56.080 --> 00:02:59.550
Typically, we'll use something like
right to add the data to send back.

50
00:02:59.550 --> 00:03:00.980
We'll see that all to come.

51
00:03:00.980 --> 00:03:04.430
Okay, folk, here we go.

52
00:03:04.430 --> 00:03:07.640
Messages that were sent in a HTTP format.

53
00:03:07.640 --> 00:03:10.037
And this is the last code we're gonna see,
by the way,

54
00:03:10.037 --> 00:03:11.510
before we hit pair programming.

55
00:03:11.510 --> 00:03:13.850
We start to do this in action ourselves.

56
00:03:13.850 --> 00:03:15.420
Messages are sent in HTTP format.

57
00:03:15.420 --> 00:03:19.519
The protocol for
browser-server interaction.

58
00:03:20.550 --> 00:03:25.130
That means the rules, the format of
data by which a message from the browser

59
00:03:25.130 --> 00:03:28.620
is sent to Twitter's computer,
and lands in here.

60
00:03:28.620 --> 00:03:32.690
It has a certain number of pieces to it.

61
00:03:32.690 --> 00:03:33.268
Let's see.

62
00:03:33.268 --> 00:03:38.388
Let's have actually a new person.

63
00:03:40.352 --> 00:03:44.384
&gt;&gt; Will Sentance: Michael, Michael,
Michael, my friend, you've arrived, and

64
00:03:44.384 --> 00:03:46.700
you're sending an inbound message.

65
00:03:48.030 --> 00:03:50.790
And Michael, you're going to be in orange.

66
00:03:50.790 --> 00:03:52.740
Here we go, your computer.

67
00:03:52.740 --> 00:03:54.890
Michael's getting his microphone ready.

68
00:03:54.890 --> 00:03:58.050
Microphone ready so he can, I mean, what?

69
00:03:58.050 --> 00:04:02.458
But there you go,
Michael's Mac, there it is,

70
00:04:02.458 --> 00:04:08.060
I'm not gonna try and
draw it any other way than I always have.

71
00:04:08.060 --> 00:04:08.910
There it is.

72
00:04:08.910 --> 00:04:15.020
Okay, he opens twitter.com/tweets.

73
00:04:15.020 --> 00:04:17.826
It turns out this Twitter only
has one user, it's Michael.

74
00:04:17.826 --> 00:04:22.120
/tweets, /3,
he opens it in the web browser.

75
00:04:22.120 --> 00:04:23.790
Michael, why do you look concerned?

76
00:04:23.790 --> 00:04:25.700
This is a fantastic thing to be searching.

77
00:04:25.700 --> 00:04:28.340
There you go.
We wanna see his third tweet.

78
00:04:28.340 --> 00:04:36.210
It instantly is going to send out over its
network feature an HTTP formatted message.

79
00:04:38.390 --> 00:04:40.758
Okay, It has three parts to it.

80
00:04:41.830 --> 00:04:44.650
&gt;&gt; Will Sentance: One,
let's do it up here.

81
00:04:44.650 --> 00:04:51.000
One is known as the request line,
and this, he's trying to get data.

82
00:04:51.000 --> 00:04:55.760
If you were posting a tweet, it would
be posting data, this is getting data.

83
00:04:55.760 --> 00:05:01.112
So, the first, it says get,
and what part/tweet/3,

84
00:05:01.112 --> 00:05:05.823
that's literally the first
line of HTTP request.

85
00:05:05.823 --> 00:05:08.861
Well, actually, yeah, that's the first
line of your HTTP request, or

86
00:05:08.861 --> 00:05:10.139
HTTP message, text message.

87
00:05:10.139 --> 00:05:12.667
It's just a text message,
the first line is this.

88
00:05:16.396 --> 00:05:17.043
&gt;&gt; Will Sentance: Or
does it say something else?

89
00:05:17.043 --> 00:05:22.799
Anyway, whatever, second line, the second
piece or the second part are headers.

90
00:05:22.799 --> 00:05:26.317
This is meta, that means data about data.

91
00:05:26.317 --> 00:05:31.550
Meta data about Michael's Mac,
things like, it can be all sorts

92
00:05:31.550 --> 00:05:36.796
of stuff like his browser type,
his, I don't know, location.

93
00:05:36.796 --> 00:05:41.718
It can be all sort of things that
are important as information to help when

94
00:05:41.718 --> 00:05:46.740
I get the inbound message to know
precisely what to send back to him.

95
00:05:46.740 --> 00:05:49.170
Maybe I also have in there information
about whether he's logged in or not.

96
00:05:50.400 --> 00:05:53.290
So that I can determine whether to be
able to send him out any data at all.

97
00:05:53.290 --> 00:05:57.030
So there's all the metadata, and
then part three is the body.

98
00:05:57.030 --> 00:06:01.010
This is if I'm sending more larger
data like if I was posting a tweet,

99
00:06:01.010 --> 00:06:03.460
that tweet data would go in the body.

100
00:06:03.460 --> 00:06:06.250
If I'm getting data,
I don't even need a body cuz I'm

101
00:06:06.250 --> 00:06:09.180
not sending you anything besides
exactly what I want to get.

102
00:06:09.180 --> 00:06:10.160
So here's the message.

103
00:06:11.800 --> 00:06:15.980
In it's gonna come, whee,
okay, it's gonna come in here.

104
00:06:15.980 --> 00:06:20.110
And this time, we're actually
going to get much more precise,

105
00:06:20.110 --> 00:06:24.460
much more personalized than what we
sent back to our user from our server.

106
00:06:24.460 --> 00:06:27.660
We're gonna write code to investigate.

107
00:06:27.660 --> 00:06:32.338
So presumably, all this data is gonna
be bundled up on an object inside of,

108
00:06:32.338 --> 00:06:35.481
with the help of node,
we're gonna look into it.

109
00:06:35.481 --> 00:06:36.209
We're not just gonna ignore it.

110
00:06:36.209 --> 00:06:37.614
Did you see, everybody,
where we ignored it last time?

111
00:06:37.614 --> 00:06:43.140
We just sent back generically to Sarah
Rose welcome, using the end function.

112
00:06:43.140 --> 00:06:46.430
This time, we're gonna look at
actually what Michael wants.

113
00:06:46.430 --> 00:06:51.396
And from that, determine what we want to
attach to the message that gets sent back

114
00:06:51.396 --> 00:06:52.941
using the end function.

115
00:06:54.486 --> 00:06:57.040
&gt;&gt; Will Sentance: I have a feeling
that's what we're gonna do.

116
00:06:57.040 --> 00:06:59.350
He's gonna want tweet number three.

117
00:06:59.350 --> 00:07:00.297
That's gonna be hello.

118
00:07:03.632 --> 00:07:07.212
&gt;&gt; Will Sentance: Okay, by the time
we've finished with this, people,

119
00:07:07.212 --> 00:07:11.782
we have most of what it takes for
Netflix that uses Node to send you back,

120
00:07:11.782 --> 00:07:15.150
I don't know, whatever,
what you watch on there.

121
00:07:17.170 --> 00:07:21.210
My favorite show's not on there,
Superstore is not on.

122
00:07:21.210 --> 00:07:25.484
The point of this was to say that we
all have almost all it takes for Hulu,

123
00:07:25.484 --> 00:07:30.184
shout out to Hulu for having Superstore on
it, all it takes for Hulu to be able to

124
00:07:30.184 --> 00:07:35.100
send back that video to the user when they
wanna see the new episode of Superstore,

125
00:07:35.100 --> 00:07:37.080
by the time we've done this.

126
00:07:37.080 --> 00:07:39.940
Cuz we're gonna introspect the inbound
message asking specifically for

127
00:07:39.940 --> 00:07:44.240
the Superstore episode,
season three episode 16 right now,

128
00:07:44.240 --> 00:07:49.640
the specific episode to be
able to send back to the user.

129
00:07:49.640 --> 00:07:51.010
That's what we're gonna do here.

130
00:07:51.010 --> 00:07:52.860
It's a larger scale, for sure.

131
00:07:52.860 --> 00:07:56.370
But it's exactly the same paradigm
again and again and again.

132
00:07:56.370 --> 00:07:57.040
Let's do it, people.

133
00:07:57.040 --> 00:08:00.002
I'm gonna do a board clean, and
we're gonna walk through it together, and

134
00:08:00.002 --> 00:08:02.430
this time, I'm gonna to call
on you quite a lot, people.

135
00:08:02.430 --> 00:08:04.867
So be thinking what is
each thing doing here?

136
00:08:04.867 --> 00:08:06.577
So I'm gonna be calling
on you quite a lot,

137
00:08:06.577 --> 00:08:11.087
especially Michael cuz that look of
concern on his face just inspires so

138
00:08:11.087 --> 00:08:15.257
much confidence in me that
he is gonna be my guy.

139
00:08:15.257 --> 00:08:16.847
I'm very excited, Michael, thank you.

