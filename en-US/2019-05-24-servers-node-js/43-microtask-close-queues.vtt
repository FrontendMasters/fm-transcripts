WEBVTT

1
00:00:00.090 --> 00:00:02.665
&gt;&gt; Will Sentance: We are not gonna talk
about promises today, but if you watch,

2
00:00:02.665 --> 00:00:04.906
Async: Hard Parts,
you've heard about promises.

3
00:00:04.906 --> 00:00:13.521
These are an alternative way of setting
up work to happen in Node with C++.

4
00:00:13.521 --> 00:00:18.544
Where rather,
rather than a function being auto-run in

5
00:00:18.544 --> 00:00:23.464
JavaScript, data will be
auto-updated in JavaScript

6
00:00:23.464 --> 00:00:27.769
that will trigger a function
to run on that data.

7
00:00:27.769 --> 00:00:31.272
That function is not added
to any of these queues.

8
00:00:31.272 --> 00:00:34.621
It's added to something
called the microtask queue,

9
00:00:34.621 --> 00:00:37.940
which takes precedence
over each of these queues.

10
00:00:37.940 --> 00:00:40.255
It's priority number zero.

11
00:00:40.255 --> 00:00:41.411
Sort of zero indexed.

12
00:00:41.411 --> 00:00:44.336
Not only that, it actually goes back and

13
00:00:44.336 --> 00:00:49.335
checks that queue between each of
the checkings of the other queues.

14
00:00:49.335 --> 00:00:51.714
I'll just put it in,
we're not gonna go into great detail.

15
00:00:51.714 --> 00:00:56.660
But the microtask.

16
00:00:56.660 --> 00:00:58.479
And actually, there's two of those.

17
00:00:58.479 --> 00:01:00.738
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will Sentance: So

18
00:01:00.738 --> 00:01:03.217
0 to 0 is the microtask queue.

19
00:01:03.217 --> 00:01:05.900
I guess we could have a and b.

20
00:01:05.900 --> 00:01:11.945
The first one is if we run a function
which we're not meant to use anymore,

21
00:01:11.945 --> 00:01:16.334
called process.nextTick,
and pass it a function,

22
00:01:16.334 --> 00:01:20.447
that one gets stuck in this
very first queue here.

23
00:01:20.447 --> 00:01:27.178
Any functions delayed using promises,
they get stuck in this one here.

24
00:01:27.178 --> 00:01:32.104
And in between the event loop
checking this, this, this queue,

25
00:01:32.104 --> 00:01:36.993
it will always go back and first check,
&gt;&gt; Will Sentance: These microtask

26
00:01:36.993 --> 00:01:38.964
queues before it moves on
to check the next queue.

27
00:01:40.435 --> 00:01:46.341
&gt;&gt; Will Sentance: That is now all, there's
one final queue we're not gonna touch on.

28
00:01:46.341 --> 00:01:49.494
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will Sentance: There's one final queue,

29
00:01:49.494 --> 00:01:52.727
which is called the close queue,
which is on any close events,

30
00:01:52.727 --> 00:01:56.286
remember those down there,
the ones that could trigger a function.

31
00:01:56.286 --> 00:02:00.874
Those associated functions
go into a fourth

32
00:02:00.874 --> 00:02:04.843
queue called the close handle queue.

33
00:02:04.843 --> 00:02:09.716
And any functions that were set to
auto run on the closing of a stream,

34
00:02:09.716 --> 00:02:14.938
the finishing of accessing data,
they will be added in this close queue.

35
00:02:14.938 --> 00:02:19.938
Six queues that the event loop
prioritizes one, two, three, four,

36
00:02:19.938 --> 00:02:22.838
zero, it's the most important of all.

37
00:02:22.838 --> 00:02:24.108
And actually,

38
00:02:24.108 --> 00:02:29.781
it checks these two in between
checking any of the other four queues.

39
00:02:29.781 --> 00:02:33.069
And when it's gone through one cycle,
[SOUND], back again, it goes again.

40
00:02:33.069 --> 00:02:34.419
Back again, it goes again.

41
00:02:34.419 --> 00:02:37.555
Back again, it goes again,
as long as your computer,

42
00:02:37.555 --> 00:02:40.019
as long as your Node
app is still turned on.

