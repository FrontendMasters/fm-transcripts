WEBVTT

1
00:00:04.280 --> 00:00:10.180
&gt;&gt; Will Sentance: We are finally goning
to use our computers internal features

2
00:00:10.180 --> 00:00:14.540
and ideally open a network channel,
a socket they call,

3
00:00:14.540 --> 00:00:19.370
an open channel to be able to receive
messages coming from Sarah Roses Mac.

4
00:00:19.370 --> 00:00:22.890
We land in the computers internals, and

5
00:00:22.890 --> 00:00:25.150
we're gonna have access
to it in JavaScript.

6
00:00:25.150 --> 00:00:28.700
How, via setting up a Node C++ feature.

7
00:00:28.700 --> 00:00:33.390
How, via a built in
label http.createserver.

8
00:00:33.390 --> 00:00:36.550
Let's start to see what it does in action.

9
00:00:36.550 --> 00:00:37.991
Here we go.

10
00:00:37.991 --> 00:00:44.123
So, I'm gonna start actually here,
with the right-hand side for once.

11
00:00:44.123 --> 00:00:49.552
Http.createserver parentheses.

12
00:00:49.552 --> 00:00:54.270
Okay, folk, point to me on the board,
everybody point to me,

13
00:00:54.270 --> 00:00:58.420
on the board,
where is that gonna have a consequence?

14
00:00:58.420 --> 00:00:59.900
In JavaScript?

15
00:00:59.900 --> 00:01:02.040
Might have a little bit of
a consequence in JavaScript.

16
00:01:02.040 --> 00:01:04.700
In the computer's internal
features directly, no.

17
00:01:04.700 --> 00:01:09.970
A-ha, exactly, where's my purple pen?

18
00:01:09.970 --> 00:01:14.960
This here is a command for
Node internal features.

19
00:01:14.960 --> 00:01:15.990
To do what?

20
00:01:15.990 --> 00:01:22.980
To set up a network,
we call it net feature of Node,

21
00:01:22.980 --> 00:01:29.150
specializing in HTTP protocol,
okay, to receive HTTP messages.

22
00:01:29.150 --> 00:01:34.057
Yeah, it's not that interesting,
where it's really interesting is what

23
00:01:34.057 --> 00:01:38.592
it's gonna do in the computer's internals,
with the help of libuv.

24
00:01:38.592 --> 00:01:43.383
Libuv is a bunch of pre written C++ code,
technically built separately from Node,

25
00:01:43.383 --> 00:01:47.373
but its most prominent use is in Node,
actually using lots of different

26
00:01:47.373 --> 00:01:52.161
libraries, but bunch of C++ code written
to ensure that we can run Node, and we'll

27
00:01:52.161 --> 00:01:56.907
learn about how to run a little bit later
on, on any machine, any operating system.

28
00:01:56.907 --> 00:01:59.479
Linux, Mac, Windows.

29
00:02:00.590 --> 00:02:06.565
Libuv links up effectively
between C++ code written in

30
00:02:06.565 --> 00:02:11.970
Node with any computer internal structure,
whether it's a Mac, Linux or Windows.

31
00:02:11.970 --> 00:02:17.910
Okay, so it's going to, with the help of
Libuv, set up in the computer internals

32
00:02:17.910 --> 00:02:24.960
and open socket,
an opened channel to the internet.

33
00:02:24.960 --> 00:02:28.624
Ready to receive HTTP messages and
that`s it.

34
00:02:28.624 --> 00:02:30.830
That one line has opened.

35
00:02:30.830 --> 00:02:35.540
Our computer now Twitter's computer
is now ready to receive messages.

36
00:02:36.730 --> 00:02:40.479
In one line, in one label.

37
00:02:40.479 --> 00:02:46.088
It opened that channel, in and
out messages now, it is good to go.

38
00:02:46.088 --> 00:02:49.464
One issue, one issue.

39
00:02:49.464 --> 00:02:51.970
I actually, you know what I wanna do?

40
00:02:51.970 --> 00:02:55.620
There are actually 64,000,
this is slightly metaphorical,

41
00:02:55.620 --> 00:02:59.900
there are actually 64,000
entry points to my computer.

42
00:02:59.900 --> 00:03:04.200
Now it's not literally
what it actually is,

43
00:03:04.200 --> 00:03:08.820
is I can use 64,000 different numbers
from 1 to 64,000 to represent,

44
00:03:08.820 --> 00:03:13.120
to indicate, or to mark off,
an entry point into my computer.

45
00:03:13.120 --> 00:03:17.064
Not actually to carve out a little hole
within the computer but I can give 64,000

46
00:03:17.064 --> 00:03:20.430
different numbers to represent an entry
point to chanel in my computer.

47
00:03:21.900 --> 00:03:23.710
Well, that's a bit of an issue,

48
00:03:23.710 --> 00:03:28.500
because when a say Rose sends
out the message saying, hey,

49
00:03:28.500 --> 00:03:34.150
needing new Tweets, need Tweets,
need the HTML, CSS, Tweets, images, etc.

50
00:03:35.250 --> 00:03:37.520
Which entry point is she gonna come in at?

51
00:03:37.520 --> 00:03:40.491
Anyone know what the default,
they call them, not entry points,

52
00:03:40.491 --> 00:03:41.508
they call them ports.

53
00:03:41.508 --> 00:03:46.606
Anyone know what the default entry
port is for any HTTP message being

54
00:03:46.606 --> 00:03:52.249
sent from a browser to a computer that
receives messages known as a server.

55
00:03:52.249 --> 00:03:53.795
Anyone know the default entry point is?

56
00:03:53.795 --> 00:03:54.326
Yeah Mark.

57
00:03:54.326 --> 00:03:55.057
&gt;&gt; Mark: 80.

58
00:03:55.057 --> 00:03:55.966
&gt;&gt; Will Sentance: 80?

59
00:03:55.966 --> 00:03:56.572
It's 80.

60
00:03:56.572 --> 00:04:00.475
The entry point,
it will default to be trying to arrive at,

61
00:04:00.475 --> 00:04:03.139
it's gonna try and arrive at Port 80.

62
00:04:03.139 --> 00:04:05.713
Well down, we already set up
the background Node C++ feature.

63
00:04:05.713 --> 00:04:10.373
This instance of the HTTP feature
of Node that set up this socket,

64
00:04:10.373 --> 00:04:13.167
how the hell do we continue to edit it and

65
00:04:13.167 --> 00:04:17.510
tell it actually you know what,
specify the port to be 80.

66
00:04:17.510 --> 00:04:21.550
Or node realizes that we're not
gonna do all of the commands for

67
00:04:21.550 --> 00:04:24.310
the underlying C++ feature in one line.

68
00:04:24.310 --> 00:04:25.450
So what does it do?

69
00:04:25.450 --> 00:04:29.050
The other thing that http.createServer
does is immediately, and

70
00:04:29.050 --> 00:04:31.870
this is crucial people, in JavaScript,

71
00:04:33.190 --> 00:04:37.790
it immediately in JavaScript returns out,
it's a function.

72
00:04:37.790 --> 00:04:41.040
It's a pseudo function cuz really
it's triggering stuff down here, but

73
00:04:41.040 --> 00:04:45.240
it immediately returns out into
whatever's on the left hand side here,

74
00:04:45.240 --> 00:04:49.220
which is the label what Sarah Rose,
whats the label on the left hand side?

75
00:04:49.220 --> 00:04:51.490
&gt;&gt; Speaker 3: Server.
&gt;&gt; Will Sentance: Server, exactly,

76
00:04:51.490 --> 00:04:58.380
it immediately returns out into it,
an object full of functions, methods,

77
00:04:58.380 --> 00:05:04.760
they call them when they're an object,
methods, including ones like listen.

78
00:05:06.030 --> 00:05:08.990
All of which, when run,

79
00:05:08.990 --> 00:05:14.490
will allow us to edit the instance of
the HTTP featuring Node that we've set up.

80
00:05:14.490 --> 00:05:15.780
Give us edit ability over it.

81
00:05:17.060 --> 00:05:21.450
And that's exactly what we're gonna have
to use, because we need to tell Node,

82
00:05:21.450 --> 00:05:24.821
to tell the socket to set up to listen at,
what point Michael?

83
00:05:24.821 --> 00:05:25.715
But what port sorry?

84
00:05:25.715 --> 00:05:26.590
&gt;&gt; Michael: 80
&gt;&gt; Will Sentance: At 80.

85
00:05:26.590 --> 00:05:30.367
And we can do that because we can go and
grab that listen function,

86
00:05:30.367 --> 00:05:36.164
that's we're gonna do on the next line,
grab that listen function pass it 80.

87
00:05:37.570 --> 00:05:42.931
And because this listen function is
really a trigger to edit stuff in Node,

88
00:05:42.931 --> 00:05:45.920
is this gonna do anything in JavaScript?

89
00:05:45.920 --> 00:05:51.577
Nothing that interesting,
instead it's going to st up in Node.

90
00:05:51.577 --> 00:05:56.442
That's the famous purple N, from Node, so

91
00:05:56.442 --> 00:06:01.175
if a Node the feature to
have the port be port

92
00:06:01.175 --> 00:06:05.870
80 which tells our socket to open.

93
00:06:05.870 --> 00:06:09.090
Open the door at port 80.

94
00:06:09.090 --> 00:06:12.390
Folk, we're now into receiving messages.

95
00:06:12.390 --> 00:06:16.712
If we go to twitter.com/node,
send a message to his computer,

96
00:06:16.712 --> 00:06:22.330
now at this point, it will land,
it will be passed through into Node.

97
00:06:22.330 --> 00:06:25.230
In two lines this was done.

98
00:06:25.230 --> 00:06:29.492
Now, a lot of shit's going
on behind the scenes,

99
00:06:29.492 --> 00:06:31.910
a lot of stuffs going behind the scene but

100
00:06:31.910 --> 00:06:36.810
it's two lines in JavaScript, to trigger
a ton of, this is super sophisticated,

101
00:06:36.810 --> 00:06:39.590
opening a channel to your internet
at a specific entry point?

102
00:06:39.590 --> 00:06:41.170
Super sophisticated.

103
00:06:41.170 --> 00:06:42.680
We do it in two lines.

104
00:06:42.680 --> 00:06:45.168
Okay, in comes the inbound message.

105
00:06:45.168 --> 00:06:48.450
Inbound, you know,
incoming message from Sarah Rose.

106
00:06:48.450 --> 00:06:51.810
In comes, hey its unforgettable.

107
00:06:51.810 --> 00:06:59.428
All right there incomes a message,
weee, will libuv, it lands in Node.

108
00:06:59.428 --> 00:07:06.830
But here's the problem folk, this message,
&gt;&gt; Will Sentance: We wanna look at it.

109
00:07:06.830 --> 00:07:11.569
See what it's asking for and
send back the right tweets.

110
00:07:12.874 --> 00:07:15.722
Inbound by request,
run code to look at it,

111
00:07:15.722 --> 00:07:19.290
you're gonna run code to look
at introspect it, see what says.

112
00:07:21.380 --> 00:07:22.240
Something like this I guess.

113
00:07:22.240 --> 00:07:28.009
You wanna run some code like you know,

114
00:07:28.009 --> 00:07:34.679
if incoming message, then is pseudo code,

115
00:07:34.679 --> 00:07:38.850
then send back tweet data.

116
00:07:38.850 --> 00:07:44.557
But folk, I wanna run this code
in JavaScript, I don't know C++.

117
00:07:44.557 --> 00:07:50.037
When is this code gonna need to run?

118
00:07:50.037 --> 00:07:51.450
In fact, I've no idea.

119
00:07:51.450 --> 00:07:57.156
So Rose's, turning on her computer
entering twitter.com/node,

120
00:07:57.156 --> 00:07:59.388
at any time, day or night.

121
00:07:59.388 --> 00:08:00.200
Any time.

122
00:08:01.440 --> 00:08:05.010
When is this code [INAUDIBLE], if I run
this code where I turn my jobs are done,

123
00:08:05.010 --> 00:08:08.590
jobs are single threaded asynchronous,
it hits this line, and there's already

124
00:08:08.590 --> 00:08:13.050
a message of five milliseconds in, of
when we hit this line, or not even that,

125
00:08:13.050 --> 00:08:17.350
100 nanoseconds in, it's gonna hit
this line and go, incoming message?

126
00:08:17.350 --> 00:08:19.290
No problem, send data back.

127
00:08:19.290 --> 00:08:22.301
But, for the rest of the time,
we've passed this line and

128
00:08:22.301 --> 00:08:24.254
we don't ever see it again.

129
00:08:24.254 --> 00:08:28.200
So, incomes the message, and
there's no JavaScript code there to run.

130
00:08:28.200 --> 00:08:31.680
I mean, in theory we've been had this
line run just again and again and again,

131
00:08:31.680 --> 00:08:32.800
like billions of times.

132
00:08:32.800 --> 00:08:35.440
So, whatever message comes in,
it's running.

133
00:08:35.440 --> 00:08:36.410
His next line's gonna run.

134
00:08:36.410 --> 00:08:38.140
That means we can do one thing in our app.

135
00:08:38.140 --> 00:08:40.070
It's not a very good model.

136
00:08:40.070 --> 00:08:41.540
To be able to only receive one message and

137
00:08:41.540 --> 00:08:44.305
had to run the same line just in case
the message comes in any moment.

138
00:08:44.305 --> 00:08:48.098
&gt;&gt; Speaker 5: [LAUGH]
&gt;&gt; Will Sentance: So we don't do that.

139
00:08:48.098 --> 00:08:49.850
But that leaves us in
a bit of a conundrum.

140
00:08:51.170 --> 00:08:53.680
Sam, who does know?

141
00:08:53.680 --> 00:08:55.110
We don't know.

142
00:08:55.110 --> 00:08:57.695
But who does know when
an inbound message comes in?

143
00:08:57.695 --> 00:08:58.228
&gt;&gt; Sam: Node knows.

144
00:08:58.228 --> 00:08:59.708
&gt;&gt; Will Sentance: Node knows.

145
00:08:59.708 --> 00:09:01.072
That's great.

146
00:09:01.072 --> 00:09:03.444
Node knows.

147
00:09:03.444 --> 00:09:08.493
And so, perhaps, we're going to

148
00:09:08.493 --> 00:09:17.037
rely on Node to automatically
run this line of code for us.

149
00:09:17.037 --> 00:09:18.620
Beyond that control.

150
00:09:18.620 --> 00:09:23.036
But how could we bundle up
the code in order that it could be

151
00:09:23.036 --> 00:09:25.435
triggered to auto run by Node.

152
00:09:25.435 --> 00:09:26.871
How do we bundle up Mohammed?

153
00:09:26.871 --> 00:09:29.000
&gt;&gt; Mohammed: Function.
&gt;&gt; Will Sentance: In a function.

154
00:09:29.000 --> 00:09:30.150
And that's what we're gonna do.

155
00:09:30.150 --> 00:09:34.540
People, again and again, we're gonna
bundle up code in a function that we want

156
00:09:34.540 --> 00:09:38.500
to have auto run by Node to do stuff like
look at incoming message, send tweet data

157
00:09:38.500 --> 00:09:43.844
back, when Node here is with the help of
libuv that an inbound messages arrived.

158
00:09:43.844 --> 00:09:48.970
How people, but what about what
moment with my favorite emoji.

159
00:09:48.970 --> 00:09:52.652
The woozy emoji.

160
00:09:52.652 --> 00:09:56.390
I, you know that emojis
having a lot of a lot of fun.

161
00:09:56.390 --> 00:09:57.519
It's very, it's,

162
00:09:57.519 --> 00:10:01.104
if any one says this emoji,
you know they're having a level of fun.

