WEBVTT

1
00:00:00.140 --> 00:00:04.050
&gt;&gt; Will Sentance: This is a little bit,
a little bit of a bonus for people.

2
00:00:04.050 --> 00:00:07.340
What's most important here, and
what you want to take away from this,

3
00:00:07.340 --> 00:00:11.710
is that we can break down any
inbound flow of data into chunks.

4
00:00:11.710 --> 00:00:16.150
And on each chunk, run a function on it,
to do it in that batch.

5
00:00:16.150 --> 00:00:19.470
And then, while we're doing
code up here in Javascript,

6
00:00:19.470 --> 00:00:21.540
our single thread of
Javascript is running away.

7
00:00:21.540 --> 00:00:24.817
Good to go.
In the background we've got a spun-up

8
00:00:24.817 --> 00:00:28.500
thread by LEEUV that's
pulling in the next data.

9
00:00:28.500 --> 00:00:33.222
It's definitely multithreaded,
just not in the same runtime.

10
00:00:33.222 --> 00:00:37.660
Jobses got one thread, and
LEEUV spun up a background thread.

11
00:00:39.007 --> 00:00:39.520
&gt;&gt; Will Sentance: Okay, so

12
00:00:39.520 --> 00:00:43.317
let's have thumbs on what's getting
pretty advanced at this point.

13
00:00:43.317 --> 00:00:45.306
You lost me at this point.

14
00:00:45.306 --> 00:00:46.882
Clear clarification.

15
00:00:46.882 --> 00:00:48.520
Williams clear.

16
00:00:48.520 --> 00:00:53.640
The vehicle carrying Sam you're clear,
Michael's clarification zaps clear,

17
00:00:53.640 --> 00:00:54.890
Sarah Rose is clear.

18
00:00:56.200 --> 00:00:58.710
Virginia has got a clarification,
Mattâ€™s clear.

19
00:00:58.710 --> 00:01:00.810
Okay, so we've got Charlie.

20
00:01:00.810 --> 00:01:03.073
&gt;&gt; Off screen male: All the events,
they share the same callback queue?

21
00:01:04.658 --> 00:01:07.510
&gt;&gt; Will Sentance: All the associated
functions with events, you mean,

22
00:01:07.510 --> 00:01:12.000
all the associated functions,
&gt;&gt; Will Sentance: Unfortunately.

23
00:01:14.364 --> 00:01:17.113
&gt;&gt; Will Sentance: So
all functions that have been set to

24
00:01:17.113 --> 00:01:21.260
autorun by node do not share
the same callback queue.

25
00:01:21.260 --> 00:01:22.620
That's what we're gonna see.

26
00:01:22.620 --> 00:01:25.950
I'm just thinking if all
the event-driven ones do.

27
00:01:25.950 --> 00:01:28.968
IO ones do,
I think timers trigger events are they.

28
00:01:30.957 --> 00:01:32.860
&gt;&gt; Will Sentance: That's
a really interesting question.

29
00:01:32.860 --> 00:01:38.550
More importantly all auto functions set
to auto run do not share the same queue.

30
00:01:38.550 --> 00:01:41.270
Any ones that involve input output.

31
00:01:41.270 --> 00:01:46.030
So as IO,
that is ones which do trigger events.

32
00:01:46.030 --> 00:01:48.420
They all do share the same queue.

33
00:01:48.420 --> 00:01:53.150
My question just to myself is, are there
some autorun functions that do not have

34
00:01:53.150 --> 00:01:57.826
events that trigger that autorun, and
those ones are going to see in a moment.

35
00:01:57.826 --> 00:02:00.370
We'll come to it in a second Mark,
if you don't mind.

36
00:02:00.370 --> 00:02:01.910
Let's just do ones here, Matt.

37
00:02:03.610 --> 00:02:04.590
Roman, okay fine, go ahead.

38
00:02:05.880 --> 00:02:10.189
&gt;&gt; Off screen male: Once it's finished
reading file, can it send a new response,

39
00:02:10.189 --> 00:02:12.620
kind of a message that it's done?

40
00:02:12.620 --> 00:02:14.225
Like send-
&gt;&gt; Will Sentance: What a great question!

41
00:02:14.225 --> 00:02:15.997
Absolutely it does!

42
00:02:15.997 --> 00:02:21.371
Anyone know what flushed-out message is?

43
00:02:21.371 --> 00:02:22.360
Cuz we're going to need that right?

44
00:02:22.360 --> 00:02:24.140
Because that we're going
to run at that point.

45
00:02:24.140 --> 00:02:26.069
The JSON parse presumably.

46
00:02:26.069 --> 00:02:29.814
Yeah, it's going to auto close it and
it's going to shout out closed.

47
00:02:29.814 --> 00:02:32.516
It's closed, isn't it?

48
00:02:32.516 --> 00:02:36.780
The point if we go and look at the docks
to see exactly which event it flushes out.

49
00:02:36.780 --> 00:02:38.113
I believe it's close.

50
00:02:38.113 --> 00:02:40.489
And that moment it's going to,

51
00:02:40.489 --> 00:02:45.426
we hopefully set up a function to
on the close event handle the day.

52
00:02:45.426 --> 00:02:45.941
Is it closed?

53
00:02:45.941 --> 00:02:46.928
&gt;&gt; Off screen male: It is.

54
00:02:46.928 --> 00:02:47.457
&gt;&gt; Will Sentance: Good job.

55
00:02:47.457 --> 00:02:49.134
Yeah, yeah exactly.

56
00:02:49.134 --> 00:02:52.712
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: Yeah on close, exactly.

57
00:02:52.712 --> 00:02:56.752
On close event run a function which
is this case would presume take all

58
00:02:56.752 --> 00:02:58.520
stringified data.

59
00:02:58.520 --> 00:03:01.530
[INAUDIBLE] JSON and turn it into
into an object at that moment,

60
00:03:01.530 --> 00:03:04.270
once you got it all re compiled together.

61
00:03:04.270 --> 00:03:05.700
Yeah, great question.

62
00:03:05.700 --> 00:03:06.640
Thank you, Roman.

63
00:03:06.640 --> 00:03:09.400
&gt;&gt; Off screen male: It'll
always deal with a string?

64
00:03:09.400 --> 00:03:12.030
Whatever file we give it to read, or?

65
00:03:12.030 --> 00:03:14.380
&gt;&gt; Will Sentance: Again,
I've been a little bit cheeky here,

66
00:03:14.380 --> 00:03:16.470
but this doesn't come in as a string.

67
00:03:16.470 --> 00:03:19.150
It tecnically comes in is
what's called a buffer.

68
00:03:19.150 --> 00:03:22.510
Which is a space in memory in
which you fill in zeros and

69
00:03:22.510 --> 00:03:24.650
ones that represent any data type.

70
00:03:24.650 --> 00:03:28.460
And once you grab the first bit out of
it you throw it in with more zeros and

71
00:03:28.460 --> 00:03:30.140
ones representing the next batch.

72
00:03:30.140 --> 00:03:31.638
&gt;&gt; Off screen male: So
my question is since we lose-

73
00:03:31.638 --> 00:03:32.396
&gt;&gt; Will Sentance: That's a buffer data

74
00:03:32.396 --> 00:03:33.500
type, something to note.

75
00:03:33.500 --> 00:03:35.980
&gt;&gt; Off screen male: Since we
were reading a JSON, right?.

76
00:03:35.980 --> 00:03:39.461
So it started reading from the beginning
but it didn't close the file,

77
00:03:39.461 --> 00:03:42.370
because it just took
a chunk of data from it.

78
00:03:42.370 --> 00:03:44.620
How does it know that
it's a complete object?

79
00:03:44.620 --> 00:03:46.990
&gt;&gt; Will Sentance: This is what I said.

80
00:03:46.990 --> 00:03:48.994
We're gonna hold on the passing,

81
00:03:48.994 --> 00:03:52.600
the parsing of the JSON until
we've done all the cleaning.

82
00:03:52.600 --> 00:03:56.951
So you can imagine what we do is we
can turn the buffer into a string.

83
00:03:56.951 --> 00:04:00.156
The buffer is just zeros and
ones, 64000 zeros and ones.

84
00:04:00.156 --> 00:04:05.500
64000 sorry, bytes, which is 64000
characters, turn that into a string.

85
00:04:05.500 --> 00:04:10.242
Remove all the mean words,
attach that to clean tweets, next is 4000,

86
00:04:10.242 --> 00:04:14.835
do the same thing, attach it on the end
of clean tweets next to hundreds and

87
00:04:14.835 --> 00:04:19.110
hundreds of 64000 kilobytes
by 64 kilobyte batches.

88
00:04:19.110 --> 00:04:24.300
The whole thing is now a long string
of fide, string of data then we

89
00:04:24.300 --> 00:04:27.370
apply JSON parse on the close event
which is when all the data's in.

90
00:04:27.370 --> 00:04:33.530
&gt;&gt; Off screen male: So, so that means only
operations that we can do is if it's,

91
00:04:33.530 --> 00:04:35.780
assuming it to be a string right?

92
00:04:35.780 --> 00:04:38.480
&gt;&gt; Will Sentance: We wouldn't be
able to start parsing the data

93
00:04:38.480 --> 00:04:43.510
because the JSON object sorry
JSON stringify java object.

94
00:04:43.510 --> 00:04:46.950
You really do need to have the opening
curly brace and the closing one,

95
00:04:46.950 --> 00:04:48.040
to be able to work with it.

96
00:04:48.040 --> 00:04:51.750
So you couldn't do things like working
with the JSON particularly, yeah.

97
00:04:51.750 --> 00:04:53.480
Very fair, yeah.

98
00:04:53.480 --> 00:04:54.870
Other questions?

99
00:04:54.870 --> 00:04:55.370
Michael.

100
00:04:57.470 --> 00:04:58.580
&gt;&gt; Off screen male: Yes,
I do have a question.

101
00:04:58.580 --> 00:05:03.760
So the browser's connection
to the server socket.

102
00:05:03.760 --> 00:05:04.310
&gt;&gt; Will Sentance: Yes.
&gt;&gt; Off screen male: Times

103
00:05:04.310 --> 00:05:06.310
out after a while.

104
00:05:06.310 --> 00:05:07.590
This takes 15 seconds.

105
00:05:07.590 --> 00:05:11.820
Would that happen, and
if so does it make sense?

106
00:05:11.820 --> 00:05:15.070
&gt;&gt; Will Sentance: I'm assuming you're
doing this before any requests come in.

107
00:05:15.070 --> 00:05:16.538
&gt;&gt; Off screen male: Okay.
&gt;&gt; Will Sentance: We're not grabbing

108
00:05:16.538 --> 00:05:20.460
in 1.5 gigabytes in response to
any user's requests anytime soon.

109
00:05:20.460 --> 00:05:22.365
&gt;&gt; Off screen male: Okay,
but you could send a chunk.

110
00:05:22.365 --> 00:05:25.830
&gt;&gt; Will Sentance: Yeah.
[CROSSTALK] Yeah, yeah, absolutely.

111
00:05:25.830 --> 00:05:30.124
Video data, you can sort of send PCs,
although HDP has ways of working with

112
00:05:30.124 --> 00:05:33.137
video data that this
doesn't necessarilly imply.

113
00:05:33.137 --> 00:05:36.314
&gt;&gt; Off screen male: Is there anything
that can delay adding a datastream to

114
00:05:36.314 --> 00:05:39.226
the callback queue so
that things get out of sync?

115
00:05:42.683 --> 00:05:45.773
&gt;&gt; Will Sentance: Wow that was much more.

116
00:05:45.773 --> 00:05:47.180
Very intrigued by that.

117
00:05:49.920 --> 00:05:50.800
&gt;&gt; Will Sentance: Here's the thing.

118
00:05:52.750 --> 00:05:55.380
Yes because it is a single thread.

119
00:05:56.440 --> 00:06:00.690
Single-threaded language, including
the node passing stuff into JavaScript.

120
00:06:00.690 --> 00:06:05.780
Meaning, without going into too much
detail until the final slide, meaning that

121
00:06:05.780 --> 00:06:12.430
that function is only actually literally
put on the callback queue when,

122
00:06:12.430 --> 00:06:17.650
things are put on the call back
queue at a certain moment.

123
00:06:17.650 --> 00:06:23.730
The moment being, When there's
a break from synchronous code running.

124
00:06:25.380 --> 00:06:34.180
But it could never run anyway
until the synchronous code is run.

125
00:06:34.180 --> 00:06:37.320
Never run anywhere until the synchronous
code is finished running.

126
00:06:37.320 --> 00:06:38.990
So who cares?

127
00:06:38.990 --> 00:06:42.733
That function could never run anyway until
all the synchronous code is running.

128
00:06:42.733 --> 00:06:47.365
So when it gets added here,
doesn't matter as long as it's added in

129
00:06:47.365 --> 00:06:50.945
the order of completion and
LEEUV handles logging,

130
00:06:50.945 --> 00:06:55.685
the order of completion of functions,
being ready to be triggered.

131
00:06:55.685 --> 00:06:56.459
There actually, yes,

132
00:06:56.459 --> 00:06:58.717
technically although we don't need
to worry about it in my opinion.

133
00:06:58.717 --> 00:07:04.620
Technically added to the callback queue
only when the event loop does a cycle and

134
00:07:04.620 --> 00:07:07.009
there's no synchronous code.

135
00:07:08.837 --> 00:07:11.657
&gt;&gt; Will Sentance: We just don't need
to care, because they were never gonna

136
00:07:11.657 --> 00:07:14.479
be running until all synchronous
code was done anyway, so

137
00:07:14.479 --> 00:07:17.895
who cares when they are added is
when they're executed that matters.

138
00:07:17.895 --> 00:07:20.499
And they're always added in
the order of completion down here.

139
00:07:20.499 --> 00:07:21.550
They're always queued up.

140
00:07:21.550 --> 00:07:23.958
And then grabbed out in
the order they were finished, or

141
00:07:23.958 --> 00:07:27.670
the order they were triggered,
sorry, to run autorun down here.

142
00:07:27.670 --> 00:07:28.906
We'll see more of this in a moment.

143
00:07:28.906 --> 00:07:31.750
So we're hitting the very limits of
what we have in terms of information for

144
00:07:31.750 --> 00:07:33.510
the event loop and the callback queue.

145
00:07:33.510 --> 00:07:40.065
Final thing after the break will
be a monstrous full event loop and

146
00:07:40.065 --> 00:07:45.435
we'll do as many of the queues
as feels comfortable.

147
00:07:45.435 --> 00:07:47.249
And that'll be the very final code.

148
00:07:47.249 --> 00:07:48.691
Mark.

149
00:07:48.691 --> 00:07:53.587
&gt;&gt; Off screen male: What would you
do when a parcel word has arrived?

150
00:07:53.587 --> 00:07:58.549
&gt;&gt; Will Sentance: Yeah I mean, you could
do a small thing, like if you spot a word

151
00:07:58.549 --> 00:08:03.513
that hasn't got a closing quote on it,
you could make sure you

152
00:08:03.513 --> 00:08:08.783
just have it as a little cache,
as a little separate string here.

153
00:08:08.783 --> 00:08:11.937
And then append it to
the beginning of the next

154
00:08:11.937 --> 00:08:15.285
batch to analyze it as a full battery for
words.

155
00:08:15.285 --> 00:08:18.512
That would be more of an implementation
detail, how you ended up handling that.

156
00:08:18.512 --> 00:08:19.718
Okay, does everyone get that?

157
00:08:19.718 --> 00:08:23.051
The one thing I'm saying by that
is if the stringified came in and

158
00:08:23.051 --> 00:08:25.283
you cut off halfway, and that word was FU.

159
00:08:25.283 --> 00:08:29.448
It's the word lesser F, followed by
that U, and you're like this is great,

160
00:08:29.448 --> 00:08:31.128
my favorite two-letter word,

161
00:08:31.128 --> 00:08:34.445
you'd miss that actually there's
a word to be cleaned there.

162
00:08:36.759 --> 00:08:38.190
&gt;&gt; Will Sentance: How do you spot it?

163
00:08:38.190 --> 00:08:43.000
You'd make sure you always end
on a space for example, or

164
00:08:43.000 --> 00:08:45.350
you always end on a closing quote.

165
00:08:45.350 --> 00:08:48.470
And this is just a passing parsing

166
00:08:48.470 --> 00:08:50.610
challenge that anybody faces
when you're passing data.

167
00:08:50.610 --> 00:08:53.452
You made sure it was done on a quote or
then on a string.

168
00:08:53.452 --> 00:08:58.664
And then go back the previous space or
previous quote and take that word and

169
00:08:58.664 --> 00:09:03.961
just cash, I mean like hold on to
that word as a end-of-previous-string

170
00:09:03.961 --> 00:09:09.366
hangover and save it and then append
that to the next block, the next batch.

