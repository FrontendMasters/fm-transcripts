WEBVTT

1
00:00:00.290 --> 00:00:02.670
&gt;&gt; Will Sentance: Let's start with,
who was the first person I saw?

2
00:00:02.670 --> 00:00:03.670
Andrew, I'll start with you, Andrew.

3
00:00:05.440 --> 00:00:07.820
&gt;&gt; Speaker 2: I'm noticing a lack
of semicolons, are they implied,

4
00:00:07.820 --> 00:00:10.610
cuz it's slides, or
is this an intentional, something special?

5
00:00:10.610 --> 00:00:11.320
&gt;&gt; Will Sentance: No, darn,

6
00:00:11.320 --> 00:00:14.020
I almost forgot to mention
that I put semicolons back on.

7
00:00:15.090 --> 00:00:17.000
Andrew, rescind that question.

8
00:00:17.000 --> 00:00:19.300
Everybody online, semicolons matter.

9
00:00:19.300 --> 00:00:21.510
And actually,
particularly in Node they do matter.

10
00:00:21.510 --> 00:00:25.890
They do matter because if you
miss them off JavaScript strings

11
00:00:25.890 --> 00:00:29.240
constrain your code together, and lead
to errors it can be quite hard to find.

12
00:00:29.240 --> 00:00:30.805
Ignore this very bad practice,

13
00:00:30.805 --> 00:00:36.250
semi-colons bad copying pasting into
this presentation from the code editor.

14
00:00:36.250 --> 00:00:40.660
Thank you to Andrew for actually
a very helpful thing for everybody.

15
00:00:40.660 --> 00:00:45.660
Sara Rose, go ahead please ask me
more about my body in JavaScript.

16
00:00:45.660 --> 00:00:50.167
&gt;&gt; Speaker 3: I feel like I've
seen rec resident error as

17
00:00:50.167 --> 00:00:55.040
a third parameter is that-
&gt;&gt; Will Sentance: Let's see how we handle

18
00:00:55.040 --> 00:00:57.570
errors in just a few slides.

19
00:00:57.570 --> 00:01:00.750
No problem, great question to T out there,
Rich you had a clarification?

20
00:01:00.750 --> 00:01:01.604
Charlie?

21
00:01:01.604 --> 00:01:05.678
&gt;&gt; Speaker 2: Yeah, just to be clear the
only code that note we'll ever have access

22
00:01:05.678 --> 00:01:09.140
to is what you provided in
the create server function.

23
00:01:09.140 --> 00:01:11.090
&gt;&gt; Will Sentance: Yeah, that's a good
way of putting the only function

24
00:01:11.090 --> 00:01:12.536
code that can have an auto rock well.

25
00:01:15.080 --> 00:01:17.050
On the same note as Sarah roses question.

26
00:01:18.100 --> 00:01:23.050
We actually are gonna see that if that
request comes in very happily and

27
00:01:23.050 --> 00:01:26.180
successfully, cheerfully,
great request, no errors.

28
00:01:27.740 --> 00:01:28.460
I'll give you a preview,

29
00:01:28.460 --> 00:01:31.630
it's actually gonna flash a little
message down here saying request,

30
00:01:32.720 --> 00:01:34.028
which will also trigger this function.

31
00:01:34.028 --> 00:01:38.833
Due on incoming but we can see that if
another situation, may be an error,

32
00:01:38.833 --> 00:01:44.120
maybe the client sends a corrupted request
it might not flash request down here.

33
00:01:44.120 --> 00:01:47.395
And therefore, it might not end up
triggering due on incoming, but

34
00:01:47.395 --> 00:01:49.390
triggering something else.

35
00:01:49.390 --> 00:01:52.030
So we're gonna get more
control than you think.

36
00:01:52.030 --> 00:01:53.142
Mohammed, you're up next.

37
00:01:53.142 --> 00:01:57.340
&gt;&gt; Speaker 2: Yeah, just clarifying
the the second object is created.

38
00:01:57.340 --> 00:01:58.690
&gt;&gt; Will Sentance: It's a weird one, right?

39
00:01:58.690 --> 00:02:02.190
&gt;&gt; Speaker 2: Yeah, and
we get to set that label.

40
00:02:02.190 --> 00:02:03.680
&gt;&gt; Will Sentance: Weakens the label?

41
00:02:03.680 --> 00:02:04.380
I could call it,

42
00:02:04.380 --> 00:02:09.020
you know I could call it Mohammed's
auto created object of function.

43
00:02:09.020 --> 00:02:14.610
No, not Mohammed's, Muhammad's favorite
note auto created set of functions.

44
00:02:14.610 --> 00:02:17.338
And as long as you then refer
to it by the same label,

45
00:02:17.338 --> 00:02:19.183
when we want to access stuff on it.

46
00:02:19.183 --> 00:02:20.843
What do we try to access on it?

47
00:02:20.843 --> 00:02:24.720
What function are we trying
to access on it, Mohamed?

48
00:02:24.720 --> 00:02:27.570
&gt;&gt; Speaker 2: The sending back the-
&gt;&gt; Will Sentance: We just want name.

49
00:02:28.870 --> 00:02:29.660
What's the functions name?

50
00:02:29.660 --> 00:02:30.299
Anyone got it?

51
00:02:30.299 --> 00:02:30.896
&gt;&gt; Speaker 2: End.

52
00:02:30.896 --> 00:02:32.580
&gt;&gt; Will Sentance: End,
by the way, how do we know that?

53
00:02:34.150 --> 00:02:37.980
The Node homepage, the Node docks.

54
00:02:37.980 --> 00:02:41.250
It is literally got,
that's where we spend most of our time.

55
00:02:41.250 --> 00:02:46.430
As long as we have this internal
meta model that's the point of node.

56
00:02:46.430 --> 00:02:50.353
As long as you have this
under the hood mental model,

57
00:02:50.353 --> 00:02:54.022
you just go to Node docs,
and you go and look for.

58
00:02:54.022 --> 00:02:58.793
What's the auto inserted data
that when the background

59
00:02:58.793 --> 00:03:01.770
task finishes gets inserted?

60
00:03:01.770 --> 00:03:05.860
And therefore, how do I need to structure
the function that I pass as the auto

61
00:03:05.860 --> 00:03:12.380
triggered by Node function, such that I
know what I need to set parameters up.

62
00:03:12.380 --> 00:03:17.310
And then the order inserted objects full
of in this case like multiple functions

63
00:03:17.310 --> 00:03:18.070
do like 20 functions.

64
00:03:19.180 --> 00:03:24.070
I just get access to them by using the
label I gave the second inserted input,

65
00:03:24.070 --> 00:03:24.850
auto inserted input,

66
00:03:24.850 --> 00:03:27.710
and then there's a whole bunch of
function on here we just use in for now.

67
00:03:27.710 --> 00:03:31.790
There's other things that I write as a
whole bunch of folks we can use to control

68
00:03:31.790 --> 00:03:36.670
specifically what we add to this
message to get sent back, sounds good.

69
00:03:36.670 --> 00:03:40.553
&gt;&gt; Speaker 2: So we'll end as take any
parameter and then just send it along.

70
00:03:40.553 --> 00:03:44.660
&gt;&gt; Will Sentance: Yeah, it's
a simplifying, really it's job is to say

71
00:03:44.660 --> 00:03:49.140
you've finished editing
the message down here, move on.

72
00:03:49.140 --> 00:03:53.589
Cuz typically what we do is we will
use other functions in here to set

73
00:03:53.589 --> 00:03:57.170
on this not object, sorry,
this HTTP text message.

74
00:03:57.170 --> 00:03:59.710
It's a text message,
set other bits of information on it.

75
00:03:59.710 --> 00:04:04.103
We can set the headers, we can set
the body, we usually run end, or

76
00:04:04.103 --> 00:04:06.238
with nothing in it as the input.

77
00:04:06.238 --> 00:04:11.071
Cuz its only Java is to say hey node,
I finished editing stuff on this message,

78
00:04:11.071 --> 00:04:14.309
you can send it back now,
but you can also path to it.

79
00:04:14.309 --> 00:04:17.805
And then want to keep it as simple as
possible to start, you can also pause to

80
00:04:17.805 --> 00:04:21.023
it a string, and that stream will
be the message that gets them back,

81
00:04:21.023 --> 00:04:22.930
but that's not typically how we use it.

82
00:04:22.930 --> 00:04:26.420
Typically, we add content to this
message to send back using things like

83
00:04:26.420 --> 00:04:31.319
the right function here, or we can set
headers on this message to get send back.

84
00:04:31.319 --> 00:04:34.410
But in the end if you
do pass something to it

85
00:04:34.410 --> 00:04:36.560
will be implicitly the data
that gets sent back.

86
00:04:36.560 --> 00:04:41.550
It's a shorthand just of our very,
very first Node server, and it is a full

87
00:04:41.550 --> 00:04:47.130
server that we have at least we minimize
the number of new things are introducing.

88
00:04:47.130 --> 00:04:51.686
We typically wouldn't use end for this,
but it goes a very, very light weight of

89
00:04:51.686 --> 00:04:55.451
setting the data on the response message,
a chippy message back.

90
00:04:55.451 --> 00:04:56.339
Great question Sam.

91
00:04:56.339 --> 00:04:58.480
We want to come back to it,
Seth we have a question?

92
00:04:58.480 --> 00:05:00.867
&gt;&gt; Speaker 2: Yeah,
sure, just a curiosity,

93
00:05:00.867 --> 00:05:06.085
what happen if we open don't listen
to the create server doing comming.

94
00:05:06.085 --> 00:05:08.210
&gt;&gt; Will Sentance: No problem,
and most people would do that.

95
00:05:08.210 --> 00:05:14.550
Most people would say, because what is
this obvious returns an object which has

96
00:05:14.550 --> 00:05:20.110
got a bunch of functions on it that give
us edit access over the background here.

97
00:05:20.110 --> 00:05:22.187
We use one of the functions,
which one was it, is that?

98
00:05:22.187 --> 00:05:23.040
&gt;&gt; Speaker 2: Don't listen.
&gt;&gt; Will Sentance: Listen.

99
00:05:23.040 --> 00:05:23.948
&gt;&gt; Speaker 2: Yeah.

100
00:05:23.948 --> 00:05:27.996
&gt;&gt; Will Sentance: But JavaScript in
evaluated language, which means,

101
00:05:27.996 --> 00:05:33.012
this here when it returns on the object
it actually gets rid of that,

102
00:05:33.012 --> 00:05:35.930
and turns it into this object.

103
00:05:35.930 --> 00:05:38.110
Meaning, you can then put dot
listen on the end of it there,

104
00:05:38.110 --> 00:05:42.930
and you're just going to grab the listen
function from that object and run it.

105
00:05:42.930 --> 00:05:47.553
Jobs as an evaluate language means any
statement must be eventually turned into

106
00:05:47.553 --> 00:05:51.218
its actual underlying value which
in this case is this object.

107
00:05:51.218 --> 00:05:54.190
And so we can grab the missing
function of it in the same line, yeah?

108
00:05:54.190 --> 00:05:56.610
&gt;&gt; Speaker 2: So,
to follow up on that question, right?

109
00:05:56.610 --> 00:05:59.387
You're not doing it, just because
you think they're like JavaScript,

110
00:05:59.387 --> 00:06:01.865
it's single threaded, so
it has to do different instructions.

111
00:06:01.865 --> 00:06:04.794
[CROSSTALK]
&gt;&gt; Will Sentance: No, I'm doing ti for

112
00:06:04.794 --> 00:06:08.416
clarity, to show you that we get
an object out that will allow us for

113
00:06:08.416 --> 00:06:12.880
the rest of time in this JavaScript thread
to be able to continue to have edit access

114
00:06:12.880 --> 00:06:17.475
over this background feature via the label
server which gives us access to the object

115
00:06:17.475 --> 00:06:18.820
that came out.

116
00:06:18.820 --> 00:06:22.730
Yeah, I'm just doing it for
pedagogical purposes.

117
00:06:22.730 --> 00:06:24.240
Here you go, Michael, go ahead man.

118
00:06:24.240 --> 00:06:28.930
&gt;&gt; Speaker 2: How does the sender
computer know which port to get?

119
00:06:28.930 --> 00:06:31.201
I know they were setting-
&gt;&gt; Will Sentance: I should said,

120
00:06:31.201 --> 00:06:34.468
I made that really,
really clear it defaults to it,

121
00:06:34.468 --> 00:06:37.827
every browser sends our message,
defaults to 80.

122
00:06:37.827 --> 00:06:41.887
We don't even need to write it,
we don't need to say twitter.com,

123
00:06:41.887 --> 00:06:44.340
enter at port 80, it defaults to 80.

124
00:06:44.340 --> 00:06:48.900
&gt;&gt; Speaker 2: So sometimes you're able to
set your Node port to a different port?

125
00:06:48.900 --> 00:06:49.850
&gt;&gt; Will Sentance: Why
would we even do that?

126
00:06:49.850 --> 00:06:54.360
We'll see in a moment, but when we're
developing we may want to change it.

127
00:06:54.360 --> 00:07:00.490
Plus there are other slightly marginally
different protocols, like HDPS that there

128
00:07:00.490 --> 00:07:05.952
is a secure connection from our computer
browser through to the web server.

129
00:07:05.952 --> 00:07:09.587
That would not allow others to
interfere with that message being sent,

130
00:07:09.587 --> 00:07:13.310
sort of man in the middle they call it or
person in the middle attack.

131
00:07:13.310 --> 00:07:18.360
It'll block that from happening,
which doesn't default to entering at 80,

132
00:07:18.360 --> 00:07:21.920
it defaults to entering at
a different entry point.

133
00:07:21.920 --> 00:07:23.831
Okay, great question, yeah.

134
00:07:23.831 --> 00:07:27.310
Andrew, go ahead,
you had a follow-up I think.

135
00:07:27.310 --> 00:07:30.930
&gt;&gt; Speaker 2: So are we essentially
saying JavaScript says to Node,

136
00:07:30.930 --> 00:07:34.138
Here's a bunch of functionality,
hold this and do this at the right time.

137
00:07:34.138 --> 00:07:34.770
&gt;&gt; Will Sentance: Yes.

138
00:07:34.770 --> 00:07:38.620
&gt;&gt; Speaker 2: And then, does Node run
that in the same execution context as

139
00:07:38.620 --> 00:07:41.300
Java Script, or
is that kind of off running its own thing?

140
00:07:41.300 --> 00:07:44.265
&gt;&gt; Will Sentance: It is coming
right back into JavaScript, but

141
00:07:44.265 --> 00:07:46.995
then you might be saying, holy goddamn,

142
00:07:46.995 --> 00:07:51.927
that's an automatic inserted function
back into JavaScript to execute.

143
00:07:51.927 --> 00:07:54.310
In our main thread, or in our thread,

144
00:07:54.310 --> 00:07:58.250
in our single thread from
outside of JavaScript?

145
00:07:58.250 --> 00:08:00.860
When the hell is that
function allowed back in?

146
00:08:00.860 --> 00:08:03.360
What if there's 30 all want
to go back at the same time?

147
00:08:03.360 --> 00:08:04.830
Well, they're all gonna run
at the same time, right?

148
00:08:04.830 --> 00:08:06.660
It's single threaded, one thing at a time.

149
00:08:06.660 --> 00:08:07.970
Which order do they get run in?

150
00:08:07.970 --> 00:08:13.165
Before the end of today we will
have a full map of exactly when any

151
00:08:13.165 --> 00:08:19.490
auto-run function from Node is allowed
to auto run back in JavaScript.

152
00:08:19.490 --> 00:08:23.398
Any function which we saved to Node
using things like Create Service,

153
00:08:23.398 --> 00:08:25.461
Save the Oncoming Function in Node.

154
00:08:25.461 --> 00:08:29.030
When is it allowed back in
to have the purple pen,

155
00:08:29.030 --> 00:08:32.220
the Node pen execute its code, when?

156
00:08:32.220 --> 00:08:35.210
Because what if I've got a bunch
of other code running here?

157
00:08:35.210 --> 00:08:36.710
Does it just say, hold on, stop?

158
00:08:37.820 --> 00:08:39.150
I'm coming back in now, I'm ready to run.

159
00:08:40.280 --> 00:08:44.733
Or do we need a set of strict rules for
when this function is allowed back in?

160
00:08:44.733 --> 00:08:46.320
And it's gonna turn out, we do.

