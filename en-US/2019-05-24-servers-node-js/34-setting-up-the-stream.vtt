WEBVTT

1
00:00:00.140 --> 00:00:02.040
&gt;&gt; Will Sentance: We have
our tweets.json here.

2
00:00:02.040 --> 00:00:03.690
People, we're almost there.

3
00:00:03.690 --> 00:00:08.700
We have our tweets.json
here in the file system.

4
00:00:09.870 --> 00:00:14.190
We're now gonna get super smart
about how we go about accessing this

5
00:00:14.190 --> 00:00:16.660
running code to clean the tweet
that we get out of it.

6
00:00:16.660 --> 00:00:17.900
Let's go everybody.

7
00:00:17.900 --> 00:00:20.040
Line one, what are we doing?

8
00:00:20.040 --> 00:00:21.403
Virginia.

9
00:00:22.771 --> 00:00:24.280
&gt;&gt; Will Sentance: What are we
doing in line one there?

10
00:00:24.280 --> 00:00:28.010
&gt;&gt; Virginia: We are declaring
a label called cleantweets.

11
00:00:28.010 --> 00:00:29.820
&gt;&gt; Will Sentance: Cleanedtweets.

12
00:00:29.820 --> 00:00:31.730
&gt;&gt; Virginia: Setting it equal to.

13
00:00:31.730 --> 00:00:33.790
&gt;&gt; Will Sentance: Big old empty string,
excellent.

14
00:00:33.790 --> 00:00:36.264
Next line, Saruse?

15
00:00:36.264 --> 00:00:39.807
&gt;&gt; Saruse: So
we are declaring a function cleantweets.

16
00:00:39.807 --> 00:00:41.245
&gt;&gt; Will Sentance: Cleantweets, exactly.

17
00:00:41.245 --> 00:00:44.940
Cleantweets, is a whole
function definition.

18
00:00:44.940 --> 00:00:47.810
We're just saving code to
probably be auto run, no,

19
00:00:47.810 --> 00:00:49.650
we're gonna run that one later on.

20
00:00:49.650 --> 00:00:51.781
Okay, next line William?

21
00:00:51.781 --> 00:00:55.625
&gt;&gt; William: Declaring a function
called do our new batch.

22
00:00:55.625 --> 00:00:56.570
&gt;&gt; Will Sentance: A-hah.

23
00:00:56.570 --> 00:00:59.362
We're never gonna be the one's
running this function,

24
00:00:59.362 --> 00:01:02.410
this looks like it's gonna
be our auto run function.

25
00:01:02.410 --> 00:01:03.970
Do our new batch excellent,
thank you William.

26
00:01:05.140 --> 00:01:07.540
Rich, next function next line sorry.

27
00:01:07.540 --> 00:01:08.270
Left hand side.

28
00:01:09.380 --> 00:01:13.910
&gt;&gt; William: Declaring a constant
called Access tweets archive.

29
00:01:13.910 --> 00:01:14.780
&gt;&gt; Will Sentance: Okay people.

30
00:01:14.780 --> 00:01:18.640
Now I want you to all, to access
tweets archive, AccessTweetsArchive.

31
00:01:23.050 --> 00:01:26.208
Let's make sure our call stacks set up.

32
00:01:26.208 --> 00:01:27.180
There it is.

33
00:01:28.710 --> 00:01:29.540
Okay, AccessTweetAchieve.

34
00:01:29.540 --> 00:01:36.380
And the right hand side says to
use which node C++ feature, Zeph?

35
00:01:36.380 --> 00:01:37.010
&gt;&gt; Zeph: FS
&gt;&gt; Will Sentance: FS, exactly.

36
00:01:37.010 --> 00:01:41.143
And specifically,
make a connection to tweets.json.

37
00:01:41.143 --> 00:01:47.253
So, access tweets archives run fs dot,

38
00:01:47.253 --> 00:01:53.320
this create,
&gt;&gt; Will Sentance: Read stream.

39
00:01:53.320 --> 00:01:54.120
There it is.

40
00:01:54.120 --> 00:01:57.444
And pass it,

41
00:01:57.444 --> 00:02:03.797
tweetsArchive.json.

42
00:02:03.797 --> 00:02:06.374
Just to bring a character at
this point to javascript, but

43
00:02:06.374 --> 00:02:08.050
you know it means something.

44
00:02:08.050 --> 00:02:14.080
Okay, this is gonna do one thing in
JavaScript and one thing a node.

45
00:02:14.080 --> 00:02:17.296
Raise your hand if you want to tell me,
roughly what it's gonna do in node?

46
00:02:17.296 --> 00:02:18.780
Charlie what's it rough you gonna do?

47
00:02:18.780 --> 00:02:20.200
There you go,
you didn't even raise your hand.

48
00:02:20.200 --> 00:02:22.240
Charlie, what it's
roughly gonna do in node?

49
00:02:22.240 --> 00:02:23.100
The create read stream,

50
00:02:23.100 --> 00:02:27.100
do you think with this piece of
information about where to go look?

51
00:02:27.100 --> 00:02:28.580
What's it roughly gonna do in node,
do you think?

52
00:02:28.580 --> 00:02:30.410
&gt;&gt; Charlie: Tell the file
system to load that file.

53
00:02:30.410 --> 00:02:31.130
&gt;&gt; Will Sentance: Fantastic.

54
00:02:31.130 --> 00:02:32.250
Exactly.

55
00:02:32.250 --> 00:02:37.230
Actually it's gonna say to libuv,
to set up a dedicated thread to go and

56
00:02:37.230 --> 00:02:39.727
get this data and start pulling it.

57
00:02:41.185 --> 00:02:44.280
&gt;&gt; Will Sentance: .Okay,
what's he gonna do in JavaScript?

58
00:02:44.280 --> 00:02:46.500
Do you remember that thing we dwell on for
quite a while?

59
00:02:46.500 --> 00:02:47.460
It doesn't JavaScript.

60
00:02:47.460 --> 00:02:48.662
Raise your hand if you can tell me,

61
00:02:48.662 --> 00:02:50.744
what's it gonna to return now
in JavaScript immediately?

62
00:02:50.744 --> 00:02:51.427
Yes.

63
00:02:51.427 --> 00:02:52.110
Sam.

64
00:02:52.110 --> 00:02:55.969
&gt;&gt; Sam: Object with methods.

65
00:02:55.969 --> 00:03:00.320
&gt;&gt; Will Sentance: That
&gt;&gt; Sam: That will tell node to

66
00:03:00.320 --> 00:03:01.040
do certain stuff.

67
00:03:01.040 --> 00:03:02.510
&gt;&gt; Will Sentance: Yeah,
to edit what we just set up.

68
00:03:02.510 --> 00:03:04.110
Fantastic very nice from Sam.

69
00:03:04.110 --> 00:03:05.530
Yeah, that's a real tricky one.

70
00:03:05.530 --> 00:03:07.910
That's honestly really
really tricky that bit.

71
00:03:07.910 --> 00:03:13.883
I think yeah so it's gonna mean
JavaScript return out in JavaScript

72
00:03:13.883 --> 00:03:19.122
in to accessories archives an object,
full of functions,

73
00:03:19.122 --> 00:03:25.409
methods that have a connection to this
particular open stream of data or

74
00:03:25.409 --> 00:03:30.090
open access point of this particular file.

75
00:03:30.090 --> 00:03:30.885
I should said actually.

76
00:03:30.885 --> 00:03:32.689
FS was set up to go look for.

77
00:03:34.217 --> 00:03:37.140
&gt;&gt; Will Sentance: Thanks everyone for
staying so attentive on what.

78
00:03:37.140 --> 00:03:40.050
Hopefully now it's
starting to feel boring,

79
00:03:40.050 --> 00:03:43.520
in a sense because Matt nodded fortunately
just before I said the word boring

80
00:03:43.520 --> 00:03:46.590
though it wasn't actually
a response perhaps.

81
00:03:46.590 --> 00:03:49.810
So, he decided to feel boring because
it is just the same thing again and

82
00:03:49.810 --> 00:03:52.980
again at this point but
all of node is this again, okay.

83
00:03:52.980 --> 00:03:54.984
The only thing that's
not like this in node,

84
00:03:54.984 --> 00:03:58.799
is that you can technically split up with
your JavaScript code into different files.

85
00:03:58.799 --> 00:04:01.899
And then bring them all back together
using the require and the module pattern,

86
00:04:01.899 --> 00:04:04.811
we're not gonna get to cover today,
it's pretty clear at this point, but

87
00:04:04.811 --> 00:04:06.040
we will cover our future talk.

88
00:04:06.040 --> 00:04:09.950
That's the only thing to me that's not
this model of trigger, background feature,

89
00:04:09.950 --> 00:04:13.280
set up auto run function,
have it auto run when the background

90
00:04:13.280 --> 00:04:17.470
feature finishes work from the file system
or whatever or the inbound message.

91
00:04:17.470 --> 00:04:23.520
Have auto inserted data from node,
again, and again, and again, and again.

92
00:04:23.520 --> 00:04:25.290
Okay, good.

93
00:04:26.850 --> 00:04:31.438
All good, now we an auto run function, and

94
00:04:31.438 --> 00:04:37.520
we need it to run on a certain of event,
certain event.

95
00:04:37.520 --> 00:04:43.313
An event that's trigger every 64K batch,
64,000 characters from the Json file.

96
00:04:43.313 --> 00:04:46.148
And that,
is gonna happen in the very next line,

97
00:04:46.148 --> 00:04:50.575
we gonna use access tweets Archive which
is the object full of of methods that

98
00:04:50.575 --> 00:04:54.960
give us access to this background
feature let's make sure that's clear.

99
00:04:54.960 --> 00:04:57.715
Just a little star there to
show that the accesses is,

100
00:04:57.715 --> 00:05:00.970
this particular background
feature of FS not feature sorry.

101
00:05:00.970 --> 00:05:03.920
This particular instance
of using FS in node.

102
00:05:03.920 --> 00:05:06.370
The one that's set up to access this file.

103
00:05:06.370 --> 00:05:11.770
And we know that, we should say that
fsreadstream does this automatically

104
00:05:11.770 --> 00:05:15.180
at 64 kilobytes.

105
00:05:15.180 --> 00:05:17.720
Shout out, what event, Zeph?

106
00:05:17.720 --> 00:05:18.420
&gt;&gt; Zeph: Data.

107
00:05:18.420 --> 00:05:20.430
&gt;&gt; Will Sentance: Data, there it is.

108
00:05:20.430 --> 00:05:23.140
That's what we're gonna write,
that's done by fsreadstream by default.

109
00:05:23.140 --> 00:05:24.240
We can change that, by the way.

110
00:05:24.240 --> 00:05:25.840
They call it the high water mark.

111
00:05:25.840 --> 00:05:27.170
We can change that.

112
00:05:27.170 --> 00:05:33.350
After the docs, but you change it by
passing two read stream as second

113
00:05:33.350 --> 00:05:37.380
argument, or the first argument that
it will ignore, there's nothing there.

114
00:05:37.380 --> 00:05:42.180
Which is an object with a property
you can put high watermark is and

115
00:05:42.180 --> 00:05:45.980
some value, which will set up
what the batches are, okay.

116
00:05:45.980 --> 00:05:48.290
To optimize,
make sure you know you're optimizing.

117
00:05:49.430 --> 00:05:52.070
When you run the function when
the data then gets screened.

118
00:05:52.070 --> 00:05:55.924
Okay, but
now let's use AccessTweetsArchive,

119
00:05:55.924 --> 00:06:00.974
AccessTweetsArchive.on, and
determine what function we want

120
00:06:00.974 --> 00:06:06.297
node auto run when that data event
at 64 kilobytes gets triggered,

121
00:06:06.297 --> 00:06:12.444
or gets screened, sorry, emitted,
emitted, there it is, technical term,

122
00:06:12.444 --> 00:06:18.820
not screened, emitted, or broadcast,
they're both good terms for it.

123
00:06:18.820 --> 00:06:22.940
And then pass what function, what function
do we want to have auto run, can you spot?

124
00:06:22.940 --> 00:06:23.630
&gt;&gt; Sam: Do on new batch.

125
00:06:23.630 --> 00:06:24.990
&gt;&gt; Will Sentance: Do on new batch,
thank you, man.

126
00:06:24.990 --> 00:06:29.480
Do on new batch,
we pass all of it's data in.

127
00:06:30.880 --> 00:06:31.930
By the way, just as a side note,

128
00:06:31.930 --> 00:06:35.240
everybody who actually happens is we
pass a reference, this is a link.

129
00:06:35.240 --> 00:06:37.990
Back to where this function was saved,
just in case anyone thinks we're copying

130
00:06:37.990 --> 00:06:41.940
all the codes into here,
we're just actually saying, make a link up

131
00:06:41.940 --> 00:06:45.330
to this function, have it run just so
we know, just a little side note.

132
00:06:45.330 --> 00:06:48.920
Okay, in it comes, so on the data

133
00:06:51.130 --> 00:06:55.404
event being screened auto run do on

134
00:06:55.404 --> 00:07:00.140
new batch, there it is.

135
00:07:01.860 --> 00:07:02.360
Okay.

