WEBVTT

1
00:00:00.330 --> 00:00:01.680
&gt;&gt; Will Sentance: All right, and

2
00:00:01.680 --> 00:00:05.850
let's introduce our time going by now,
because now it's gonna really matter.

3
00:00:05.850 --> 00:00:07.970
So we're at roughly zero
milliseconds here, I say.

4
00:00:09.480 --> 00:00:12.360
Okay, one, whatever,
roughly zero milliseconds.

5
00:00:12.360 --> 00:00:16.259
Okay, now, by the way, the stream only

6
00:00:16.259 --> 00:00:20.975
starts getting data once
we set an on data event.

7
00:00:20.975 --> 00:00:25.037
It doesn't start grabbing data from there,
so I hope it sets up, it goes and

8
00:00:25.037 --> 00:00:26.189
finds it, the file.

9
00:00:26.189 --> 00:00:29.783
It doesn't actually start pulling data
until we say what to do on the moment of

10
00:00:29.783 --> 00:00:32.327
that data arriving in in its first batch,
otherwise,

11
00:00:32.327 --> 00:00:35.900
it would just be pointless to pull it in
if we haven't set it to do something.

12
00:00:35.900 --> 00:00:40.450
So it won't actually even go and pull it
in until we say on, and then it does, and

13
00:00:40.450 --> 00:00:42.800
the first batch arrives.

14
00:00:42.800 --> 00:00:47.501
And I'm gonna do it in blue, I guess,
because it's coming from the far system,

15
00:00:47.501 --> 00:00:49.933
I suppose, and the first batch arrives.

16
00:00:51.429 --> 00:00:55.925
&gt;&gt; [SOUND]

17
00:00:58.205 --> 00:01:02.517
&gt;&gt; Will Sentance: Yeah, yeah, yeah, yeah,

18
00:01:02.517 --> 00:01:07.549
yeah, first batch arrives, and

19
00:01:07.549 --> 00:01:14.019
we're going to have the auto-inserted,

20
00:01:14.019 --> 00:01:19.422
auto-created and inserted data.

21
00:01:19.422 --> 00:01:23.159
The first batch arrives of 64 kilobytes,

22
00:01:23.159 --> 00:01:27.810
64 kilobytes of data, and
it's like, what was it?

23
00:01:27.810 --> 00:01:35.110
It was tweet one, hello, and so forth.

24
00:01:35.110 --> 00:01:38.425
Okay, the first batch though, or
that's not the closing curly brace,

25
00:01:38.425 --> 00:01:42.710
cuz it's a massive JSON object, the first
64 kilobytes, first 64,000 characters.

26
00:01:42.710 --> 00:01:45.750
In it's come, what's gonna be triggered?

27
00:01:45.750 --> 00:01:49.470
The data event,
a data message is gonna be streamed out.

28
00:01:49.470 --> 00:01:52.800
What function is gonna auto-run
at this point, Muhammad?

29
00:01:54.020 --> 00:01:56.835
What function is gonna auto-run
at this point, Michael?

30
00:01:56.835 --> 00:01:58.888
Davit?

31
00:01:58.888 --> 00:02:01.560
&gt;&gt; Davit: Do on new batch.

32
00:02:01.560 --> 00:02:05.868
&gt;&gt; Will Sentance: Do on new batch,
excellent, and up it comes,

33
00:02:05.868 --> 00:02:07.800
do on new batch.

34
00:02:07.800 --> 00:02:10.370
And look at this, people,
input there it is,

35
00:02:10.370 --> 00:02:15.630
it's data, there it comes in the string.

36
00:02:15.630 --> 00:02:17.643
We create a new execution context.

37
00:02:17.643 --> 00:02:19.020
Are we still in global?

38
00:02:19.020 --> 00:02:24.910
There it is, global,
we have do on new batch.

39
00:02:24.910 --> 00:02:28.269
We have POS, we have it auto-execute.

40
00:02:28.269 --> 00:02:34.474
[SOUND] We have it auto-execute,
it's gonna auto-execute,

41
00:02:34.474 --> 00:02:40.690
there it is, create an execution
context for it, there it is.

42
00:02:40.690 --> 00:02:46.560
Into it we go, in the local memory,

43
00:02:46.560 --> 00:02:51.270
we have our first argument.

44
00:02:52.610 --> 00:02:56.540
Sorry, our first parameter is data.

45
00:02:56.540 --> 00:02:59.890
Our first input argument is
the underlying tweet data.

46
00:02:59.890 --> 00:03:02.900
I'm not sure I'm doing it in blue now,
I guess it's coming from the file system,

47
00:03:02.900 --> 00:03:06.600
rather than from n,o but
it's kinda packet, I don't know, whatever.

48
00:03:06.600 --> 00:03:09.990
Now, technically, people, again, it comes
in as a stream of zeros and ones, so

49
00:03:09.990 --> 00:03:13.830
there's a buffer, but we're just going to,
for now, represent it as

50
00:03:16.220 --> 00:03:19.560
stringified JSON, as JSON.

51
00:03:19.560 --> 00:03:27.123
There it is, tweet one with hello, and
a lot of other data up to the end of it,

52
00:03:27.123 --> 00:03:31.610
out in the first 64,000 kilobytes.

53
00:03:31.610 --> 00:03:34.810
We reached this after,
what's 64,000 kilobytes gonna take?

54
00:03:36.510 --> 00:03:42.810
It's gonna take six milliseconds,
is that right?

55
00:03:44.030 --> 00:03:47.618
Not even that, one millisecond,
about a millisecond, very, very quick.

56
00:03:47.618 --> 00:03:51.185
So we're at only one millisecond now,
look at this, people.

57
00:03:51.185 --> 00:03:56.420
Not after 15 seconds, but after 1
millisecond, we started cleaning data.

58
00:03:57.770 --> 00:03:59.240
And we do, what do we do?

59
00:03:59.240 --> 00:04:03.790
We run, you're gonna run cleanTweets,

60
00:04:03.790 --> 00:04:08.080
the function we saved, cleanTweets,

61
00:04:08.080 --> 00:04:13.020
take in the data, and return it out, and

62
00:04:13.020 --> 00:04:17.700
return it out cleaned
of the nasty words and

63
00:04:17.700 --> 00:04:21.780
append it with some cleanedTweets.

64
00:04:21.780 --> 00:04:24.210
cleanedTweets, is that in local memory?

65
00:04:24.210 --> 00:04:25.130
&gt;&gt; Speaker 3: It's in global.

66
00:04:25.130 --> 00:04:29.779
&gt;&gt; Will Sentance: In global, and that's
where we're gonna take the first cleaned

67
00:04:29.779 --> 00:04:34.680
batch of JSON formatted data and
put it up here into that long string,

68
00:04:34.680 --> 00:04:38.300
well, that empty string at that point.

69
00:04:38.300 --> 00:04:42.347
Let's make sure we put clean Tweets on
the call stack cuz we are running it,

70
00:04:42.347 --> 00:04:43.810
cleanTweets.

71
00:04:43.810 --> 00:04:48.771
Okay, and that took us, I don't know,
it took us 0.5 milliseconds,

72
00:04:48.771 --> 00:04:52.782
whatever, that's how long it
took us to run the cleaning.

73
00:04:57.310 --> 00:05:02.233
&gt;&gt; Will Sentance: No, it took us,
these things are a little bit arbitrary,

74
00:05:02.233 --> 00:05:04.551
but they are intentional.

75
00:05:04.551 --> 00:05:06.535
It was 1.5 milliseconds.

76
00:05:08.134 --> 00:05:12.600
&gt;&gt; Will Sentance: Slightly longer than it
took us to get our 64k kilobyte batch in.

77
00:05:13.830 --> 00:05:14.330
Matt, go ahead.

78
00:05:15.590 --> 00:05:20.916
&gt;&gt; Matt: So with this,
we can't necessarily guarantee that

79
00:05:20.916 --> 00:05:26.008
it's gonna be the same order,
read and cleaned.

80
00:05:26.008 --> 00:05:27.620
&gt;&gt; Will Sentance: Yeah.
&gt;&gt; Matt: The clean tweet isn't necessarily

81
00:05:27.620 --> 00:05:28.688
gonna be the same.

82
00:05:28.688 --> 00:05:32.040
&gt;&gt; Will Sentance: Well, maybe it will be,
because here's a problem.

83
00:05:32.040 --> 00:05:37.136
Well, now, you know what?

84
00:05:37.136 --> 00:05:43.020
People, let me just take a step further
back before we get the data cleaned out.

85
00:05:44.400 --> 00:05:51.200
Sorry, everyone, in this execution
context where the cleaning is happening,

86
00:05:51.200 --> 00:05:57.108
where the cleaning is happening,
we're not sure how it's doing it.

87
00:05:57.108 --> 00:06:01.230
But it's taking a bit of time
to parse all that code, and

88
00:06:01.230 --> 00:06:05.020
parse all those strings,
and find the bad tweets.

89
00:06:06.790 --> 00:06:10.380
While that's happening, you won't
believe what's happening down here.

90
00:06:11.970 --> 00:06:12.896
What do you think's happening, Zep?

91
00:06:12.896 --> 00:06:14.608
&gt;&gt; Zep: Sending the next 64 batch.

92
00:06:14.608 --> 00:06:18.785
&gt;&gt; Will Sentance: The next
64 kilobytes arrived.

93
00:06:18.785 --> 00:06:20.200
&gt;&gt; Zep: Mm-hm.

94
00:06:20.200 --> 00:06:24.610
&gt;&gt; Will Sentance: The next
64 kilobytes arrived in, and

95
00:06:24.610 --> 00:06:27.860
it's continuation of the string of data.

96
00:06:29.530 --> 00:06:34.757
What event gets triggered down here
when the next batch arrives, Davit?

97
00:06:34.757 --> 00:06:37.670
&gt;&gt; Davit: It gets called to-
&gt;&gt; Will Sentance: What event

98
00:06:37.670 --> 00:06:38.370
gets triggered?

99
00:06:38.370 --> 00:06:39.320
&gt;&gt; Davit: Do on new batch.

100
00:06:39.320 --> 00:06:42.870
&gt;&gt; Will Sentance: Data gets triggered,
exactly, Michael, which triggers?

101
00:06:42.870 --> 00:06:43.630
&gt;&gt; Michael: Data on new batch.

102
00:06:43.630 --> 00:06:48.155
&gt;&gt; Will Sentance: Do a new batch,
exactly, and it's ready to run, and folk,

103
00:06:48.155 --> 00:06:50.850
I introduced this here but

104
00:06:50.850 --> 00:06:55.000
we're gonna it see in greater detail
as the last big portion of what we do.

105
00:06:56.870 --> 00:06:58.750
Now, we have problems.

106
00:06:58.750 --> 00:07:03.790
We have a function that was auto-run, and
is running another function inside of it.

107
00:07:05.290 --> 00:07:08.413
And while that's happening,
at about, I don't know,

108
00:07:08.413 --> 00:07:12.252
three-quarters of the way through
the cleaning of that first batch,

109
00:07:12.252 --> 00:07:17.350
that cleanTweets function's running, about
three-quarters the way through, uh-oh.

110
00:07:17.350 --> 00:07:21.310
Do on new batch wants to run again,
and auto-run here.

111
00:07:21.310 --> 00:07:23.279
Can it auto-run straight away?

112
00:07:24.580 --> 00:07:27.320
It would literally have to sorta
pause the running of this function.

113
00:07:27.320 --> 00:07:28.270
This is Matt's worries.

114
00:07:28.270 --> 00:07:31.175
Now, hold on, would it run and
finish sooner or?

115
00:07:31.175 --> 00:07:35.645
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: And this,

116
00:07:35.645 --> 00:07:39.921
people, is where we start
to need rules for Node for

117
00:07:39.921 --> 00:07:45.506
when an auto-run function from
a Node is ever even allowed to run.

118
00:07:48.091 --> 00:07:51.309
&gt;&gt; Will Sentance: And we're gonna see this
in sophisticated detail for, honestly,

119
00:07:51.309 --> 00:07:52.750
more intellectual reasons.

120
00:07:52.750 --> 00:07:54.079
There'll be the odd case in reality, well,

121
00:07:54.079 --> 00:07:56.870
there's many cases you'll need to
understand it, but for senior dev and

122
00:07:56.870 --> 00:08:01.260
even mid-level dev Node interviews,
it's crucial you understand it.

123
00:08:01.260 --> 00:08:02.940
This is where we really
need to see it just for

124
00:08:02.940 --> 00:08:04.448
our regular day-to-day working with Node.

125
00:08:04.448 --> 00:08:09.047
I'm gonna start off with a simple
explanation, or simplified,

126
00:08:09.047 --> 00:08:11.720
no, not simplified, no.

127
00:08:11.720 --> 00:08:15.600
Ignoring quite a few pieces
of what the rules are for

128
00:08:15.600 --> 00:08:20.175
when that auto-run function is
going to be allowed back in to run,

129
00:08:20.175 --> 00:08:26.120
cuz we've now had it run at,
what was it, one millisecond?

130
00:08:26.120 --> 00:08:31.011
And now it's two milliseconds and it wants
to run again, but we're 2 milliseconds,

131
00:08:31.011 --> 00:08:35.440
1 plus 1.5 milliseconds, we're still
in here cleaning the first batch.

132
00:08:38.350 --> 00:08:39.630
You feeling frustrated, Michael?

133
00:08:39.630 --> 00:08:40.376
&gt;&gt; Michael: Very.
&gt;&gt; Will Sentance: Yeah,

134
00:08:40.376 --> 00:08:41.380
Michael is frustrated.

135
00:08:42.620 --> 00:08:45.730
Michael is the mayor,
I'm not allowed to talk about this.

136
00:08:45.730 --> 00:08:49.550
He's a mayor of a major, major sub,
no, I'm not gonna talk about, okay,

137
00:08:49.550 --> 00:08:50.814
not talking about this.

138
00:08:50.814 --> 00:08:53.159
&gt;&gt; Michael: No, you can, it's fine.

139
00:08:53.159 --> 00:08:55.116
&gt;&gt; Will Sentance: He's proud,
he's a very great mayor,

140
00:08:55.116 --> 00:08:57.400
it's an honor to have him here.

141
00:08:57.400 --> 00:09:02.026
And he's frustrated, so
you can only imagine what

142
00:09:02.026 --> 00:09:06.768
the non-mayors among us are feeling,
powerless!

143
00:09:08.793 --> 00:09:13.995
Powerless, don't panic, don't panic.

144
00:09:13.995 --> 00:09:18.262
Turns out with actually the help of Node,
and

145
00:09:18.262 --> 00:09:23.206
particularly the libuv
library behind the scenes,

146
00:09:23.206 --> 00:09:26.930
so I'm actually gonna do it in purple.

147
00:09:29.715 --> 00:09:35.498
&gt;&gt; Will Sentance: JavaScript,
with the help of Node, has set up queues,

148
00:09:35.498 --> 00:09:40.310
queues, but
we'll start off with one queue.

149
00:09:40.310 --> 00:09:45.503
A queue, we’ll call it because this
the function that was passed into another

150
00:09:45.503 --> 00:09:50.629
function, it's known as a callback
function, any function you pass into.

151
00:09:50.629 --> 00:09:55.273
We passed do on new batch
to be run later on,

152
00:09:55.273 --> 00:09:59.600
to be called back into JavaScript.

153
00:09:59.600 --> 00:10:03.521
We call it the callback queue, I'm gonna
be more specific on this later on,

154
00:10:03.521 --> 00:10:07.889
cuz there's quite a few of them, but for
now, we're gonna say the callback queue.

155
00:10:07.889 --> 00:10:13.537
And so at two milliseconds,
when the next butch arrives,

156
00:10:13.537 --> 00:10:16.536
triggers out the data event and

157
00:10:16.536 --> 00:10:21.493
says run do on new batch again,
two milliseconds,

158
00:10:21.493 --> 00:10:27.060
we do not take do on new batch and
start auto-running it.

159
00:10:27.060 --> 00:10:30.080
Where does it actually go, Michael?

160
00:10:30.080 --> 00:10:30.720
&gt;&gt; Michael: Callback?

161
00:10:30.720 --> 00:10:34.475
&gt;&gt; Will Sentance: Into the callback queue,
exactly, into the callback

162
00:10:34.475 --> 00:10:37.830
queue is where it's gonna go, and
it's going to have to wait there.

163
00:10:37.830 --> 00:10:43.442
Do on new batch stored there

164
00:10:43.442 --> 00:10:51.257
while we continue running code here.

165
00:10:51.257 --> 00:10:52.590
So let's finish up running the code.

166
00:10:55.150 --> 00:11:01.344
Clean data does come out and gets
appended to what global variable, Sam?

167
00:11:01.344 --> 00:11:02.948
&gt;&gt; Sam: cleanedTweets.
&gt;&gt; Will Sentance: cleanedTweets,

168
00:11:02.948 --> 00:11:07.066
excellent, and it's got,
I don't know, still stringified.

169
00:11:07.066 --> 00:11:10.242
We didn't JSON parse it yet,
we're just leaving as a script.

170
00:11:10.242 --> 00:11:12.120
So we gotta append the next
piece of the string to JSON,

171
00:11:12.120 --> 00:11:14.410
parse it in one go when we've done that.

172
00:11:14.410 --> 00:11:16.300
We'll do that at the very,
very end when all the data's in, but

173
00:11:16.300 --> 00:11:19.130
we're doing the cleaning as we go,
cuz that's the bit that takes a long time.

174
00:11:19.130 --> 00:11:26.470
And into it is tweet one, hello,
and so forth, all the data there.

175
00:11:27.540 --> 00:11:31.740
And we've executed cleanTweets,
the function we were running.

176
00:11:31.740 --> 00:11:34.220
And so it gets what, Zep,
in terms of the call stack?

177
00:11:34.220 --> 00:11:36.039
&gt;&gt; Zep: Popped.
&gt;&gt; Will Sentance: Popped off the call

178
00:11:36.039 --> 00:11:41.140
stack, exactly, and we go back into
the running of do on new batch.

179
00:11:41.140 --> 00:11:43.751
Well, there's nothing left to do in it,
so it's also?

180
00:11:43.751 --> 00:11:45.434
&gt;&gt; Speaker 3: Get popped.
&gt;&gt; Will Sentance: Popped off the call

181
00:11:45.434 --> 00:11:48.584
stack, and now,
we're back to global, okay?

