WEBVTT

1
00:00:00.050 --> 00:00:03.570
&gt;&gt; Will Sentance: Node inserts two inputs,
two arguments automatically.

2
00:00:03.570 --> 00:00:07.100
One is going to be, well,
let's see it, let's just see it.

3
00:00:07.100 --> 00:00:10.480
Here we go, here it is,
let's have Sara Rose's message come in.

4
00:00:10.480 --> 00:00:12.720
Here comes Sara Rose's message.

5
00:00:12.720 --> 00:00:16.694
Here it comes in,
she's asking for what tweets?

6
00:00:20.708 --> 00:00:22.240
&gt;&gt; Sarah Rose: Sorry,
we're asking for the Node tweets.

7
00:00:22.240 --> 00:00:25.673
&gt;&gt; Will Sentance: The Node tweets,
great long distance reading there, Sara.

8
00:00:25.673 --> 00:00:28.070
Incoming, here she comes.

9
00:00:28.070 --> 00:00:29.470
We'll learn more about
how that's formatted,

10
00:00:29.470 --> 00:00:34.120
that message, so we can really investigate
it, but for now, let's just know this.

11
00:00:34.120 --> 00:00:42.410
In comes a message, it arrived in Node,
but problem, people, big problem.

12
00:00:42.410 --> 00:00:45.350
This message is formatted in a way
that I definitely do not want

13
00:00:45.350 --> 00:00:47.240
to have to deal with in JavaScript.

14
00:00:47.240 --> 00:00:49.830
It's a string of characters,
so it's an HTTP message.

15
00:00:49.830 --> 00:00:51.760
I can actually get access directly.

16
00:00:51.760 --> 00:00:57.452
If I instead set up my open channel
using the net, N-E-T-, built in label,

17
00:00:57.452 --> 00:01:02.368
then the data that would come in,
I'd actually get it back in here in

18
00:01:02.368 --> 00:01:07.141
just the pure stream of characters,
the actual message itself.

19
00:01:07.141 --> 00:01:11.113
But because I set up this background
feature, well, before we see that,

20
00:01:11.113 --> 00:01:15.720
before we see that, just a second before
we see that, in comes the message.

21
00:01:15.720 --> 00:01:18.420
What do we want to have
happen at that moment, Zep?

22
00:01:18.420 --> 00:01:22.206
Before we talk about any inputs, what
we wanna have run at that moment, Zep?

23
00:01:22.206 --> 00:01:24.170
&gt;&gt; Zep: Do incoming.
&gt;&gt; Will Sentance: Do on incoming function.

24
00:01:24.170 --> 00:01:27.310
Let's take it up here and
it's going to, look at this,

25
00:01:27.310 --> 00:01:31.820
people, it's gonna come
into into JavaScript, and

26
00:01:31.820 --> 00:01:36.960
folks, I'm gonna do everything that Node
is gonna auto do with the purple pen.

27
00:01:36.960 --> 00:01:42.840
So Charlie, what's the purple pen,
the Node pen,

28
00:01:42.840 --> 00:01:48.604
the automatic not done by us pen, gonna
have happen in JavaScript at this point?

29
00:01:48.604 --> 00:01:52.650
It's gonna execute code, so
it's gonna need what, Andrew?

30
00:01:52.650 --> 00:01:53.210
&gt;&gt; Andrew: Parentheses.

31
00:01:53.210 --> 00:01:56.383
&gt;&gt; Will Sentance: Parentheses,
Charlie, you're losing your job.

32
00:01:56.383 --> 00:01:58.450
&gt;&gt; Charlie: [LAUGH]
&gt;&gt; Will Sentance: Parentheses,

33
00:01:58.450 --> 00:02:01.710
put parentheses on the end and
execute that function.

34
00:02:01.710 --> 00:02:05.370
So we're gonna see this again and again
and again cuz it's all that Node does.

35
00:02:05.370 --> 00:02:08.880
So we're gonna see this again, so we'll
get very, very used to to this model.

36
00:02:08.880 --> 00:02:13.808
But this function is auto running, purple
means it's gonna have, in comes a message,

37
00:02:13.808 --> 00:02:17.000
and it's going to auto run this function.

38
00:02:17.000 --> 00:02:18.500
What does that mean?

39
00:02:18.500 --> 00:02:23.740
Grab that code, throw it into JavaScript,
and start running it, and there it is.

40
00:02:23.740 --> 00:02:26.950
And what we want this to do, well,
in theory, you want it to send a message

41
00:02:28.000 --> 00:02:33.170
back to Node to then
send a response message,

42
00:02:33.170 --> 00:02:36.600
another HTTP message back to,
say, Rose's Mac.

43
00:02:37.930 --> 00:02:39.470
How are we gonna do that?

44
00:02:39.470 --> 00:02:43.440
We better have inside this
function's code access to

45
00:02:44.490 --> 00:02:49.480
this inbound message, and somehow,
access to this message going back so

46
00:02:49.480 --> 00:02:53.608
we can add stuff to it, some data, some
tweets, some HTML, some CSS to send back.

47
00:02:54.820 --> 00:02:58.606
Do I get these two strings of characters
directly available to me in here?

48
00:02:58.606 --> 00:03:05.330
I actually don't,
because Node wants to make my life easier.

49
00:03:05.330 --> 00:03:09.380
So instead, and
this is the other big part of the process,

50
00:03:09.380 --> 00:03:12.260
we're gonna see this again and
again, folks, so don't worry.

51
00:03:12.260 --> 00:03:16.235
Instead, the next thing it does down here
in Node, as soon the message comes in,

52
00:03:16.235 --> 00:03:20.750
it's immediately going to set up a HTTP
message ready to send back by the way.

53
00:03:20.750 --> 00:03:23.130
But they're in a format that we
don't wanna deal with in JavaScript.

54
00:03:23.130 --> 00:03:25.293
JavaScript is not great at parsing text,
actually,

55
00:03:25.293 --> 00:03:28.090
it's not too bad at parsing text,
but we'd rather not deal with it.

56
00:03:28.090 --> 00:03:32.990
Parsing, P-A-R, parsing text,
it's not willing to do that.

57
00:03:32.990 --> 00:03:38.605
So instead, Node is going to automatically

58
00:03:38.605 --> 00:03:44.080
package up two JavaScript objects for us.

59
00:03:45.260 --> 00:03:50.170
I'm gonna do them in

60
00:03:50.170 --> 00:03:54.390
purple because they're being setup by
Node, but they're JavaScript objects.

61
00:03:54.390 --> 00:03:57.680
It's gonna auto-create them,
number 1 and number 2.

62
00:03:57.680 --> 00:04:00.461
They're not going to get names by Node,
by the way,

63
00:04:00.461 --> 00:04:04.090
which is gonna be weird,
how are we gonna access them?

64
00:04:04.090 --> 00:04:06.390
Sean, do you know how we're gonna
access if we don't get names for them?

65
00:04:06.390 --> 00:04:09.431
What word would you repeat?

66
00:04:09.431 --> 00:04:10.445
&gt;&gt; Speaker 6: Parameters.

67
00:04:10.445 --> 00:04:12.310
&gt;&gt; Will Sentance: Yeah, but
we'll see that in a second, all right.

68
00:04:12.310 --> 00:04:17.296
So it's gonna automatically create,
when the inbound message from Sara Rose

69
00:04:17.296 --> 00:04:22.260
arrives, it's gonna immediately
automatically create two objects.

70
00:04:22.260 --> 00:04:25.780
And these are the most important
objects in all of Node.

71
00:04:25.780 --> 00:04:28.990
Folks, you may be like, my God,
why don't I just build my nice pretty app?

72
00:04:28.990 --> 00:04:31.850
But if we understand these two objects,

73
00:04:31.850 --> 00:04:35.210
we have everything we need to
be successful Node developers.

74
00:04:35.210 --> 00:04:38.221
I started off my telling you
about that Samer Buna guy,

75
00:04:38.221 --> 00:04:39.917
who like the Node authority.

76
00:04:39.917 --> 00:04:46.090
He's got a book called Node Beyond
the Basics, and a list of 27 questions,

77
00:04:46.090 --> 00:04:49.160
interview questions that if you
are asked in a Node senior interview,

78
00:04:49.160 --> 00:04:51.386
you need to know the answers
to get a senior Node job.

79
00:04:51.386 --> 00:04:54.170
We are gonna answer, and already,
by the way, already we've hit three or

80
00:04:54.170 --> 00:04:56.270
four of them, no,
more than that, seven of them.

81
00:04:56.270 --> 00:04:59.689
And I'm making that up, I have no idea,
but many of them already because this is

82
00:04:59.689 --> 00:05:02.610
what's going on behind the scenes,
two auto created objects.

83
00:05:02.610 --> 00:05:07.320
The first one is gonna package up for

84
00:05:07.320 --> 00:05:10.220
us in a nice JavaScript object format,
cuz we love JavaScript objects,

85
00:05:10.220 --> 00:05:12.820
they're really easy to access and
get stuff out of.

86
00:05:12.820 --> 00:05:16.060
So we package up the important
information from the inbound message.

87
00:05:16.060 --> 00:05:19.232
What's the most important information we
got from the inbound message, Michael?

88
00:05:19.232 --> 00:05:20.844
&gt;&gt; Michael: The body?

89
00:05:20.844 --> 00:05:23.070
&gt;&gt; Will Sentance: Well, there's no
body here, we'll see that later on.

90
00:05:23.070 --> 00:05:24.372
What's the-
&gt;&gt; Michael: The URL.

91
00:05:24.372 --> 00:05:28.124
&gt;&gt; Will Sentance: The URL, and it's gonna
give it a little property on this object

92
00:05:28.124 --> 00:05:31.944
called URL, which is a string of,
well, not the not the domain,

93
00:05:31.944 --> 00:05:35.417
just the path which is the next bit here,
the specific bit,

94
00:05:35.417 --> 00:05:38.720
it's slash node because
that's what Sara Rose wants.

95
00:05:38.720 --> 00:05:42.794
She wants the Node tweets, and it's gonna
literally, Node, and I'll do an N to show

96
00:05:42.794 --> 00:05:46.200
you that Node is doing this,
is gonna look into that HTTP text message.

97
00:05:46.200 --> 00:05:50.496
This is a trigger text, and
grab out the URL, it's gonna parse it and

98
00:05:50.496 --> 00:05:53.250
grab out the URL and
stick it in this object.

99
00:05:55.030 --> 00:06:00.045
And that object is gonna
be [SOUND] inserted a magic

100
00:06:00.045 --> 00:06:05.317
word automatically into
this execution context.

101
00:06:05.317 --> 00:06:07.842
It was automatically created by Node,

102
00:06:07.842 --> 00:06:12.967
automatically putting parenths on the end
of the function that we passed to it,

103
00:06:12.967 --> 00:06:18.341
do on incoming, to say when you get an
inbound message, auto-run do on incoming.

104
00:06:18.341 --> 00:06:20.720
And there's two parts to
auto-running a function.

105
00:06:20.720 --> 00:06:24.354
One is running its code, and the other,
raise your hand if you know, Virginia?

106
00:06:24.354 --> 00:06:25.393
&gt;&gt; Virginia: Inserting the argument.

107
00:06:25.393 --> 00:06:26.540
&gt;&gt; Will Sentance: Inserting the argument,

108
00:06:26.540 --> 00:06:29.415
which is good which is as good as
saving data, that's what it is.

109
00:06:29.415 --> 00:06:32.924
It's inserting data to make it available
in here and saving it in here, yeah.

110
00:06:32.924 --> 00:06:37.754
It's not a crazy thing to say, but so
that Matt wasn't wrong, but specifically,

111
00:06:37.754 --> 00:06:41.820
Matt was wrong, but specifically,
it's inserting arguments.

112
00:06:41.820 --> 00:06:44.160
Okay, here they come,

113
00:06:44.160 --> 00:06:48.580
the first one is that first
object with all the data we need.

114
00:06:49.730 --> 00:06:53.310
Let's stick it in, it's in
the local memory, it comes in Node,

115
00:06:53.310 --> 00:06:55.420
people, without a label.

116
00:06:55.420 --> 00:06:58.757
So how the hell are we meant to access
a property of an object that has no label,

117
00:06:58.757 --> 00:06:59.740
Michael?

118
00:06:59.740 --> 00:07:01.310
&gt;&gt; Michael: We have to call it something.

119
00:07:01.310 --> 00:07:02.640
&gt;&gt; Will Sentance: Which we do.

120
00:07:02.640 --> 00:07:04.980
We give it a placeholder,

121
00:07:04.980 --> 00:07:10.310
we know when we say the do on incoming
function, we now that when it gets run,

122
00:07:10.310 --> 00:07:14.720
it will have automatically,
by Node, inserted two objects.

123
00:07:14.720 --> 00:07:20.280
And so we give it two placeholder names
that those objects will be accessible by.

124
00:07:20.280 --> 00:07:24.725
And we can call them whatever we want,
as long as when we then try to refer to

125
00:07:24.725 --> 00:07:28.950
them inside the function,
we refer to them with the right label.

126
00:07:28.950 --> 00:07:33.500
And so Michael, what do we give
the object that's gonna be auto inserted,

127
00:07:33.500 --> 00:07:34.640
the first one with all the data?

128
00:07:34.640 --> 00:07:38.580
What do we give it, what do I give it?

129
00:07:38.580 --> 00:07:39.187
&gt;&gt; Michael: Incoming data.

130
00:07:39.187 --> 00:07:41.140
&gt;&gt; Will Sentance: Incoming data,
I don't call it record.

131
00:07:41.140 --> 00:07:45.370
We'll see that's what we always used for
the term in general req, or requests, but

132
00:07:45.370 --> 00:07:47.192
I don't want you thinking
that's like a keyword.

133
00:07:47.192 --> 00:07:50.020
It's not,
it's whatever we wanna call it, okay?

134
00:07:50.020 --> 00:07:55.648
There it is, incoming data,
and what gets inserted?

135
00:07:55.648 --> 00:07:59.786
This whole object with
a whole bunch of properties,

136
00:07:59.786 --> 00:08:03.076
by the way,
I just put in only the URL, but

137
00:08:03.076 --> 00:08:08.363
it's a whole bunch of properties
added on here, headers, body.

138
00:08:08.363 --> 00:08:12.800
Yeah, body is captured an interesting
way which would we might see later on.

139
00:08:12.800 --> 00:08:17.170
But all that data is on there,
okay, I've got all the data.

140
00:08:17.170 --> 00:08:21.482
But now, I didn't bring all
that data in from Sara Rose's

141
00:08:21.482 --> 00:08:24.130
request to not send some data back.

142
00:08:25.540 --> 00:08:30.060
My little message here, let's show then
it's ready to go back, it's sitting there,

143
00:08:30.060 --> 00:08:32.540
it's sitting there ready to send back,
Node made it for me behind the scenes.

144
00:08:32.540 --> 00:08:35.860
It's sitting there, I wanna go back.

145
00:08:35.860 --> 00:08:37.160
How the hell do we get access to it?

146
00:08:38.870 --> 00:08:41.642
Well, wouldn't it be nice, people,

147
00:08:41.642 --> 00:08:47.529
if the second object maybe had a property
on it called, I don't know, maybe data.

148
00:08:47.529 --> 00:08:51.626
Something like that which we could then,
hopefully that object would go in here and

149
00:08:51.626 --> 00:08:55.115
then we could access and add value to it,
add value to it and send back.

150
00:08:55.115 --> 00:09:00.562
[SOUND] It's not how it does it for
some reason.

151
00:09:00.562 --> 00:09:03.940
Instead, here's what it gives us.

152
00:09:03.940 --> 00:09:07.710
It does give us an auto created object
automatically created by Node that,

153
00:09:07.710 --> 00:09:11.680
yes, is inserted in here
as the second input.

154
00:09:11.680 --> 00:09:14.580
But that object does not have

155
00:09:14.580 --> 00:09:17.569
a property on it that we can add
data to that then gets sent back.

156
00:09:19.890 --> 00:09:24.471
Instead, that object has a bunch of,

157
00:09:24.471 --> 00:09:29.193
a ton, but we're just gonna use one for

158
00:09:29.193 --> 00:09:33.058
now, of functions, methods,

159
00:09:33.058 --> 00:09:38.641
including one called
end JavaScript labels,

160
00:09:38.641 --> 00:09:42.387
for when we run this function.

161
00:09:42.387 --> 00:09:45.316
So this object is gonna get
thrown back into Java script.

162
00:09:45.316 --> 00:09:50.592
We are then gonna grab the end function,
run it, and whatever

163
00:09:50.592 --> 00:09:56.900
we pass to it as its input will be used
to add data to this response message.

164
00:09:58.310 --> 00:10:01.680
This object has all the data and
we can grab it directly.

165
00:10:01.680 --> 00:10:06.030
This object has functions
that when run from JavaScript

166
00:10:06.030 --> 00:10:11.100
will be labels to update the data
on the message that gets sent back.

167
00:10:11.100 --> 00:10:14.190
Fundamentally different behaving objects,

168
00:10:14.190 --> 00:10:16.680
one has actually got the data
on it we can access.

169
00:10:16.680 --> 00:10:21.260
The other has functions that when we
run them from JavaScript will be labels

170
00:10:23.280 --> 00:10:28.800
back into Node to add stuff to this
message to send back to Sara Rose's Mac.

171
00:10:28.800 --> 00:10:32.960
Let's see it in action,
in comes the second auto created object.

172
00:10:32.960 --> 00:10:38.130
In it comes, and
this one gets what parameter name?

173
00:10:38.130 --> 00:10:41.430
Rich, what's the parameter name for
the second inserted object?

174
00:10:41.430 --> 00:10:43.160
&gt;&gt; Rich: Functions to set outgoing data.

175
00:10:43.160 --> 00:10:48.070
&gt;&gt; Will Sentance: Fantastic, fantastic,
functions to set outgoing data.

176
00:10:48.070 --> 00:10:49.790
Is this a key word, Rich?

177
00:10:49.790 --> 00:10:50.300
&gt;&gt; Rich: No, it's not.

178
00:10:50.300 --> 00:10:52.705
&gt;&gt; Will Sentance: No, it's just whatever,
it's just cuz they came in,

179
00:10:52.705 --> 00:10:54.504
the auto created objects are anonymous.

180
00:10:54.504 --> 00:10:58.510
They got no name, so we better have given
them placeholders, we did, no problem.

181
00:10:58.510 --> 00:11:03.050
In comes the object,
it has on it a whole bunch of functions.

182
00:11:03.050 --> 00:11:10.442
But one of them is end and I think I have
a feeling we're gonna use that function.

183
00:11:10.442 --> 00:11:14.400
And look at that,
what are we gonna look for, Zep?

184
00:11:14.400 --> 00:11:17.950
Which object by which parameter
name are we gonna look at?

185
00:11:17.950 --> 00:11:18.570
&gt;&gt; Zep: The end?

186
00:11:19.740 --> 00:11:22.630
&gt;&gt; Will Sentance: Which object,
which one, it's the functions to set

187
00:11:22.630 --> 00:11:26.010
outgoing data object, and then we're
gonna look at what function on it?

188
00:11:26.010 --> 00:11:28.120
&gt;&gt; Zep: The end.
&gt;&gt; Will Sentance: The end function and

189
00:11:28.120 --> 00:11:32.510
that's exactly what we're going to run.

190
00:11:32.510 --> 00:11:37.444
Functions to set outgoing data .end, and

191
00:11:37.444 --> 00:11:42.241
whatever we passed to it, which is here,

192
00:11:42.241 --> 00:11:46.371
welcome to Twitter, say welcome.

193
00:11:46.371 --> 00:11:49.943
This function, .end, when run,

194
00:11:49.943 --> 00:11:54.550
has an intimate connection back to Node.

195
00:11:54.550 --> 00:11:59.170
It's a Node function, and it's going to

196
00:12:00.800 --> 00:12:05.440
send a message into node
down to this HTTP message,

197
00:12:05.440 --> 00:12:09.980
where it's going to add
welcome to the message.

198
00:12:09.980 --> 00:12:18.336
And then that message is going to
be sent back to Sara Rose's Mac.

