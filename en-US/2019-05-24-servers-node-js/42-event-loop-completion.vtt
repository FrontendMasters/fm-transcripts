WEBVTT

1
00:00:00.070 --> 00:00:03.627
&gt;&gt; Will Sentance: D cued event loop now
checks number two where it finds what

2
00:00:03.627 --> 00:00:07.788
functions sitting there ready
to run since 200 milliseconds.

3
00:00:07.788 --> 00:00:08.633
&gt;&gt; Speaker 2: It's imported tweets?

4
00:00:08.633 --> 00:00:12.770
&gt;&gt; Will Sentance: Use imported tweets,
it was added their long ago automatically.

5
00:00:12.770 --> 00:00:14.340
And it's got auto date instead of data.

6
00:00:15.510 --> 00:00:16.790
God, anyone tired of doing those?

7
00:00:16.790 --> 00:00:18.730
Yeah?
Yeah, me too, exactly.

8
00:00:18.730 --> 00:00:24.855
Add up 505 milliseconds next in line,
we auto run which function, Zep?

9
00:00:24.855 --> 00:00:26.070
&gt;&gt; Speaker 2: Import tweets.

10
00:00:26.070 --> 00:00:28.607
&gt;&gt; Will Sentance: And by the way,
sorry, this was auto run by Node, so

11
00:00:28.607 --> 00:00:30.560
the parens were added by Node.

12
00:00:30.560 --> 00:00:33.948
Yes, exactly, now we run-
&gt;&gt; Speaker 2: Use imported.

13
00:00:33.948 --> 00:00:35.453
&gt;&gt; Will Sentance: Use imported, thank you.

14
00:00:35.453 --> 00:00:39.050
Use imported tweets,

15
00:00:39.050 --> 00:00:46.000
do we execute it with parens ourselves?

16
00:00:46.000 --> 00:00:47.748
No, who does?

17
00:00:47.748 --> 00:00:49.800
&gt;&gt; Speaker 2: Node.

18
00:00:49.800 --> 00:00:53.500
&gt;&gt; Will Sentance: Node does, and
it creates an execution context.

19
00:00:55.360 --> 00:00:56.096
There it is.

20
00:00:57.240 --> 00:01:02.230
&gt;&gt; Will Sentance: And the data going in,
the first auto created input is the error

21
00:01:02.230 --> 00:01:06.770
data made by Node, which is just
null in this case, in goes null.

22
00:01:06.770 --> 00:01:12.410
The second is the data, the tweets, which
I'm just gonna do, is actually a buffer

23
00:01:12.410 --> 00:01:16.640
of zeroes and ones, which we'd have to
stringify, but just so we see what it is.

24
00:01:16.640 --> 00:01:18.470
It's a bit easier to spot what it is.

25
00:01:18.470 --> 00:01:22.680
We'll pretend it comes in as actual JSON,
it actually, as I say,

26
00:01:22.680 --> 00:01:26.008
technically comes in as a string of zeroes
and ones, a data type called a buffer.

27
00:01:26.008 --> 00:01:30.840
Data type is actually native now to
JavaScript, available automatically,

28
00:01:30.840 --> 00:01:33.956
used to be a sort of creation
by Node in node, now,

29
00:01:33.956 --> 00:01:37.552
only recently,
became a native feature of JavaScript.

30
00:01:37.552 --> 00:01:40.568
Zeroes and ones, it can be,
have all the data removed from them, and

31
00:01:40.568 --> 00:01:41.925
then filled in with more data.

32
00:01:41.925 --> 00:01:45.310
So they're perfect for streams of data,
buckets of, chunks of data going in.

33
00:01:46.310 --> 00:01:50.940
Okay, tweet one and so forth,
what are we gonna do with it?

34
00:01:50.940 --> 00:01:52.190
My God, what's it say to do with it?

35
00:01:52.190 --> 00:01:53.130
Parse it and tweet.

36
00:01:53.130 --> 00:01:55.020
Let's just log the tweet.

37
00:01:55.020 --> 00:01:57.240
Parse it in the local memory.

38
00:01:57.240 --> 00:02:00.632
That's just to remind ourselves
what are our parameters and

39
00:02:00.632 --> 00:02:02.970
use imported tweets in the local memory.

40
00:02:02.970 --> 00:02:04.860
Who have I not called on for a bit?

41
00:02:04.860 --> 00:02:10.260
Virginia, what are our parameters for
use imported tweets?

42
00:02:10.260 --> 00:02:12.080
What are our parameters?

43
00:02:12.080 --> 00:02:13.250
&gt;&gt; Speaker 3: It's error data and data.

44
00:02:13.250 --> 00:02:18.616
&gt;&gt; Will Sentance: Error data and data,
and the first auto input was what?

45
00:02:18.616 --> 00:02:20.550
&gt;&gt; Speaker 2: Null.
&gt;&gt; Will Sentance: Was null, Bhavit,

46
00:02:20.550 --> 00:02:21.550
thank you.

47
00:02:21.550 --> 00:02:24.900
And that fills in the first
parameter error data.

48
00:02:24.900 --> 00:02:28.580
The second one was data, again,
we could have called it anything,

49
00:02:28.580 --> 00:02:31.390
as long as we make access to it cuz
we didn't, we chose these names.

50
00:02:31.390 --> 00:02:34.850
And the second one has what in it,
Michael?

51
00:02:34.850 --> 00:02:35.470
&gt;&gt; Speaker 2: Data.

52
00:02:35.470 --> 00:02:38.960
&gt;&gt; Will Sentance: The actual data,
exactly, the actual tweet string.

53
00:02:41.690 --> 00:02:43.360
&gt;&gt; Will Sentance: There it is,
I'm not gonna write it out again.

54
00:02:43.360 --> 00:02:44.080
There it is.

55
00:02:44.080 --> 00:02:49.800
And then we are going to run JSON parse
on it, and turn it into actual tweets

56
00:02:49.800 --> 00:02:57.790
in a nice JavaScript object format with
tweet1 is high, and it's a whole object.

57
00:02:57.790 --> 00:03:02.450
And then the final thing we do there
is console log tweets, tweet1,

58
00:03:02.450 --> 00:03:04.840
which is what, Zep?

59
00:03:04.840 --> 00:03:05.520
&gt;&gt; Speaker 2: High or low.

60
00:03:05.520 --> 00:03:07.665
&gt;&gt; Will Sentance: It's high, exactly,
whatever, sorry, it's hello,

61
00:03:07.665 --> 00:03:08.360
sorry, thank you.

62
00:03:08.360 --> 00:03:09.130
&gt;&gt; Speaker 2: It's low, yeah.

63
00:03:09.130 --> 00:03:10.868
&gt;&gt; Will Sentance: Yeah,
sorry, there you go, hello.

64
00:03:10.868 --> 00:03:16.100
[SOUND], find hello, and
there it is at 505 milliseconds.

65
00:03:17.920 --> 00:03:18.830
&gt;&gt; Will Sentance: We're almost there,
people.

66
00:03:18.830 --> 00:03:21.720
Hello again,
it's the same thing again, my God.

67
00:03:21.720 --> 00:03:26.140
Hello again, this time in lowercase,
and that's almost it.

68
00:03:26.140 --> 00:03:29.840
It's de-queued, it's, we didn't even add
it to the call stack in the first place.

69
00:03:29.840 --> 00:03:34.320
Okay, it was on the call stack, I'm gonna
do, it was on the call stack, okay?

70
00:03:34.320 --> 00:03:35.770
We're not gonna put it up again.

71
00:03:35.770 --> 00:03:40.738
So this event loop checks its final
queue knowing that all i/o callbacks

72
00:03:40.738 --> 00:03:44.250
in here are being run
automatically at this point.

73
00:03:44.250 --> 00:03:47.522
They'll be handled one by one,
and we know they're all done so

74
00:03:47.522 --> 00:03:50.978
we know that if we want to use some
stuff that was achieved in those,

75
00:03:50.978 --> 00:03:53.830
maybe store globally, it'll be there.

76
00:03:53.830 --> 00:03:56.620
And that's when we finally have Node

77
00:03:58.080 --> 00:04:02.510
check the check queue, and
add, what function was it?

78
00:04:02.510 --> 00:04:04.217
What was the function called, everyone?

79
00:04:04.217 --> 00:04:04.940
&gt;&gt; Speaker 2: Immediately.

80
00:04:04.940 --> 00:04:08.912
&gt;&gt; Will Sentance: Immediately,
I forgot to write it,

81
00:04:08.912 --> 00:04:14.549
is added at 505 milliseconds,
we hit the running

82
00:04:14.549 --> 00:04:19.740
of immediately,
we put it on the call stack.

83
00:04:19.740 --> 00:04:21.680
It doesn't do much,

84
00:04:21.680 --> 00:04:26.750
what does it immediately say
to console log, Sarah Rose?

85
00:04:29.250 --> 00:04:32.480
&gt;&gt; Speaker 3: Sorry, it's run me last.

86
00:04:32.480 --> 00:04:38.271
&gt;&gt; Will Sentance: Run me last,
and there it is,

87
00:04:38.271 --> 00:04:42.675
at six milliseconds,

88
00:04:42.675 --> 00:04:47.790
our very last run me last.

89
00:04:47.790 --> 00:04:50.974
I think it's quite sad the very final
thing I'm gonna write on this board Is

90
00:04:50.974 --> 00:04:51.690
a crying emoji.

91
00:04:51.690 --> 00:04:56.120
But I think maybe-
&gt;&gt; Will Sentance: Quite, there you go.

92
00:04:56.120 --> 00:04:56.700
Run me last.

93
00:04:56.700 --> 00:04:58.280
All right, people, there we go, people.

94
00:04:58.280 --> 00:05:02.181
That is all of well, no,
there's a couple of other queues, but

95
00:05:02.181 --> 00:05:05.530
we're not gonna touch on
them too much here today.

96
00:05:05.530 --> 00:05:06.780
There's actually a couple other queues.

