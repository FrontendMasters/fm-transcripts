WEBVTT

1
00:00:00.050 --> 00:00:02.954
&gt;&gt; Speaker 1: Folk, we have in one, two,

2
00:00:02.954 --> 00:00:09.070
three lines of JavaScript
built an entire server.

3
00:00:09.070 --> 00:00:11.470
Because in JavaScript,

4
00:00:11.470 --> 00:00:16.350
all the black stuff's JavaScript,
there's not many words done in black.

5
00:00:16.350 --> 00:00:22.220
All the purple stuff is built in Node
features and damn, look at that.

6
00:00:22.220 --> 00:00:24.673
It has a function that's gonna auto run.

7
00:00:24.673 --> 00:00:30.054
It has auto insert

8
00:00:30.054 --> 00:00:35.440
data arguments.

9
00:00:35.440 --> 00:00:39.500
It has auto inserted arguments
that it automatically made and

10
00:00:39.500 --> 00:00:41.709
it threw them into
the function that's auto run.

11
00:00:42.820 --> 00:00:47.340
So that we had access to the incoming
data from the incoming message, and

12
00:00:47.340 --> 00:00:49.966
access to the outgoing
message to add data to it.

13
00:00:49.966 --> 00:00:54.915
The tweets or in this case a very boring
message from the Twitter via the object

14
00:00:54.915 --> 00:00:56.295
that gets passed in.

15
00:00:56.295 --> 00:00:59.800
Which has a bunch of functions,
that when run,

16
00:00:59.800 --> 00:01:02.790
here we are executing the end function.

17
00:01:04.660 --> 00:01:08.960
Executing it, doing it, is going to give
us back access to this message here and

18
00:01:08.960 --> 00:01:09.740
send that message back.

19
00:01:11.260 --> 00:01:14.600
Folk, this is the absolute
essence of node.

20
00:01:14.600 --> 00:01:17.450
And we gonna see again,
and again and again.

21
00:01:17.450 --> 00:01:20.180
There is nothing else in this language.

22
00:01:20.180 --> 00:01:23.290
Whenever we use a background
computer internal feature,

23
00:01:23.290 --> 00:01:25.220
it could be the file system.

24
00:01:25.220 --> 00:01:28.160
It could be the Open Network socket.

25
00:01:28.160 --> 00:01:31.100
It could be other features
of the computer itself.

26
00:01:31.100 --> 00:01:35.130
Every time,
we're going to use a built in label

27
00:01:35.130 --> 00:01:39.590
that sets up the node c plus plus feature
that has access to the background feature.

28
00:01:39.590 --> 00:01:43.335
We're going to need to add
a function that node will auto run,

29
00:01:43.335 --> 00:01:46.370
whenever the background
feature gets activity.

30
00:01:46.370 --> 00:01:50.248
Or if we're getting a file, for
example, when the file gets into node,

31
00:01:50.248 --> 00:01:54.272
out of the file system,
out of the a function that will auto run.

32
00:01:54.272 --> 00:01:58.843
We're then gonna need to design that
function such that it's ready to

33
00:01:58.843 --> 00:02:02.485
receive incoming data,
function said outgoing data,

34
00:02:02.485 --> 00:02:07.458
ready to receive the auto created and
auto inserted data that's relevant.

35
00:02:07.458 --> 00:02:12.981
In this case it's the input data, or
the Sarah Rose's Max request data,

36
00:02:12.981 --> 00:02:17.702
and a bunch of functions in this
case that allow us to access node

37
00:02:17.702 --> 00:02:22.900
again with specific responses
to send back to Sarah Rose.

38
00:02:22.900 --> 00:02:25.560
We're gonna do this again,
and again, and again, people

