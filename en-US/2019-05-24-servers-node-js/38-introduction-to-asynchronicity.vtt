WEBVTT

1
00:00:02.163 --> 00:00:04.819
&gt;&gt; Will Sentance: This is not per se
realistic code, what we're gonna do here.

2
00:00:04.819 --> 00:00:07.833
This is a way of us seeing,
we just earlier,

3
00:00:07.833 --> 00:00:10.846
a moment ago saw a very
realistic scenario,

4
00:00:10.846 --> 00:00:15.897
where we were dealing with batches of
data coming in triggering an event,

5
00:00:15.897 --> 00:00:21.287
the data event, triggering function to
run associated with that data event.

6
00:00:21.287 --> 00:00:24.843
And then starting to kinda queue up as
it was taking longer to run them in

7
00:00:24.843 --> 00:00:27.389
here than it was taking for
the batches to come in.

8
00:00:27.389 --> 00:00:29.345
That's fine, that's very realistic,
that's fine.

9
00:00:29.345 --> 00:00:34.622
And we discovered the event loop
was in charge of determining

10
00:00:34.622 --> 00:00:39.769
what function was next allowed
to run on the call stack.

11
00:00:39.769 --> 00:00:42.151
I've got this, written up here, look.

12
00:00:42.151 --> 00:00:49.105
The call stack, event loop and
callback queue in Node.

13
00:00:49.105 --> 00:00:52.879
Call stack, JavaScript keeps track
of what function is being run,

14
00:00:52.879 --> 00:00:54.678
it'll be top of the call stack.

15
00:00:57.487 --> 00:00:59.359
&gt;&gt; Will Sentance: And
where it was run from, in other words,

16
00:00:59.359 --> 00:01:01.807
in which function was it run,
or was it running global?

17
00:01:01.807 --> 00:01:03.879
As any delayed function
will be running global,

18
00:01:03.879 --> 00:01:05.858
any autorun function
will be running global.

19
00:01:05.858 --> 00:01:08.439
Whenever a function is to be run,

20
00:01:08.439 --> 00:01:12.969
it's added to the call stack
to tell JavaScript, run me.

21
00:01:12.969 --> 00:01:17.389
Callback queue,
any function is delayed from running,

22
00:01:17.389 --> 00:01:21.172
I mean,
we delay them by storing them down here.

23
00:01:21.172 --> 00:01:25.143
And therefore, autorun by Node
are added to the callback queue.

24
00:01:25.143 --> 00:01:30.195
When the background Node task, or in other
words, computer feature has completed,

25
00:01:30.195 --> 00:01:34.477
or there's been some activity like
a request, the associated function

26
00:01:34.477 --> 00:01:39.058
that's triggered gets added to a queue
of functions for the callback queue.

27
00:01:39.058 --> 00:01:42.745
The event loop determines what function,
in other words,

28
00:01:42.745 --> 00:01:47.184
code to run next from the queues to
pull into the call stack and execute.

29
00:01:47.184 --> 00:01:52.902
Okay, but
there's actually a whole bunch of queues,

30
00:01:52.902 --> 00:02:01.250
and different functions set to autorun
by Node will be put in different queues.

31
00:02:01.250 --> 00:02:04.520
And it's really restrictive,
the event loop,

32
00:02:04.520 --> 00:02:09.224
on what has to have finished in
synchronous, regular JavaScript code

33
00:02:09.224 --> 00:02:13.707
before anything from those queues
is allowed onto the call stack.

34
00:02:13.707 --> 00:02:15.512
And so we're now gonna see code.

35
00:02:15.512 --> 00:02:19.965
Node is most powerful because of the
automated JS function execution triggered

36
00:02:19.965 --> 00:02:21.834
by Node at just the right moment.

37
00:02:21.834 --> 00:02:23.489
It means you don't have to wait.

38
00:02:23.489 --> 00:02:26.910
Okay, but it also means we better know
intimately how Node decides what to

39
00:02:26.910 --> 00:02:28.797
automatically execute at what moment.

40
00:02:28.797 --> 00:02:33.771
And so we're gonna set up a scenario here,
1, 2, 3, 4, 5, 6, 7, 8,

41
00:02:33.771 --> 00:02:36.874
9 lines of code,
four functions we're saving.

42
00:02:36.874 --> 00:02:42.268
And we're gonna delay three of
them by using Node C++ features,

43
00:02:42.268 --> 00:02:44.978
attach functions to be autorun.

44
00:02:44.978 --> 00:02:50.272
And we're gonna see that each of
the functions will behave differently.

45
00:02:50.272 --> 00:02:52.958
In other words,
when it's triggered and ready to run,

46
00:02:52.958 --> 00:02:54.795
it'll be added to a different queue.

47
00:02:54.795 --> 00:02:59.316
And the event loop will prioritize
certain queues over other queues.

48
00:02:59.316 --> 00:03:03.635
And this is not a realistic scenario.

49
00:03:03.635 --> 00:03:06.439
I'm gonna delay a function
print Hello by 0 milliseconds.

50
00:03:06.439 --> 00:03:07.937
Why am I doing that?

51
00:03:07.937 --> 00:03:11.763
Because I want you to see just
specifically how all of these,

52
00:03:11.763 --> 00:03:15.902
exactly how the event loop works and
how each of the queues works.

53
00:03:15.902 --> 00:03:19.006
Not because you're actually
gonna do this in practice but

54
00:03:19.006 --> 00:03:23.057
because I want you to see just how might
this work in an artificial scenario,

55
00:03:23.057 --> 00:03:27.076
to know all the elements of the queues and
exactly how the event loop works.

56
00:03:27.076 --> 00:03:33.137
So we're gonna save four functions.

57
00:03:33.137 --> 00:03:37.392
We're then gonna set a print Hello
function to run after 0 milliseconds.

58
00:03:37.392 --> 00:03:39.795
I already have a feeling it will
not run after 0 milliseconds.

59
00:03:39.795 --> 00:03:44.692
I'm gonna set up a function use
imported tweets to run after a bunch of

60
00:03:44.692 --> 00:03:49.350
tweet data has been imported,
the whole file, using read file.

61
00:03:49.350 --> 00:03:53.800
I'm then gonna run this block for
500 milliseconds function,

62
00:03:53.800 --> 00:03:58.974
which we're not gonna write the code of,
but when it runs, it is not a timer.

63
00:03:58.974 --> 00:04:01.145
It is definitely not a timer.

64
00:04:01.145 --> 00:04:05.788
It is gonna do some task in
JavaScript billion times, well,

65
00:04:05.788 --> 00:04:10.797
actually for about 5 million
times that will end up taking 500

66
00:04:10.797 --> 00:04:15.734
milliseconds in JavaScript,
not in Node, but in JavaScript.

67
00:04:15.734 --> 00:04:19.936
What sort of thing could we do, Sam,
that would maybe take 500 milliseconds?

68
00:04:19.936 --> 00:04:23.924
&gt;&gt; Sam: Loop through a giant array?

69
00:04:23.924 --> 00:04:26.949
&gt;&gt; Will Sentance: Yeah, loop through
a giant array, add elements to an array,

70
00:04:26.949 --> 00:04:28.882
add 50 million elements to an array.

71
00:04:28.882 --> 00:04:31.389
I think roughly I found it was
5 million elements being added

72
00:04:31.389 --> 00:04:34.350
to an array took about 5 milliseconds,
roughly something like that.

73
00:04:34.350 --> 00:04:38.802
Okay, 500 milliseconds,
sorry, 500 milliseconds.

74
00:04:38.802 --> 00:04:39.760
So we're gonna run that.

75
00:04:39.760 --> 00:04:40.922
Then we're gonna run a console log.

76
00:04:40.922 --> 00:04:47.319
Then we're gonna run this funny
thing called setImmediate,

77
00:04:47.319 --> 00:04:52.608
which is another Node
feature that gives us control

78
00:04:52.608 --> 00:04:57.774
over putting stuff into
another totally separate

79
00:04:57.774 --> 00:05:02.586
queue when, well, we'll see, we'll see.

80
00:05:02.586 --> 00:05:04.107
We're gonna see all the queues.

81
00:05:04.107 --> 00:05:11.548
Well, we're gonna see, how many of them,
one, two, three, one, two, three.

82
00:05:11.548 --> 00:05:12.924
Two of them we're not gonna see today.

83
00:05:12.924 --> 00:05:14.759
You might see it another time.

84
00:05:19.809 --> 00:05:22.322
&gt;&gt; Will Sentance: Yeah,
we're gonna see three of the queues,

85
00:05:22.322 --> 00:05:25.573
enough to realize the overall
model of how Nodes execute.

86
00:05:25.573 --> 00:05:28.517
And I will tell you the other ones
as well so you're aware of it.

87
00:05:28.517 --> 00:05:31.030
We're not gonna play them out in full.

