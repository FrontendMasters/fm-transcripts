WEBVTT

1
00:00:00.081 --> 00:00:02.164
&gt;&gt; Will Sentance: There we go people.

2
00:00:02.164 --> 00:00:03.447
We're set up.

3
00:00:03.447 --> 00:00:06.550
We're ready to receive messages and
what do you know?

4
00:00:06.550 --> 00:00:08.190
Michael's Mac arrived.

5
00:00:08.190 --> 00:00:09.215
He's opened it.

6
00:00:09.215 --> 00:00:12.890
Arrived.
Michael's Mac's here, he's opened it and

7
00:00:12.890 --> 00:00:15.750
he wants to get his tweets and
not just any old tweets,

8
00:00:15.750 --> 00:00:17.210
he wants tweet number three.

9
00:00:19.690 --> 00:00:25.219
Okay here we go, let me just quickly,
&gt;&gt; Will Sentance: Actually any thumbs or

10
00:00:25.219 --> 00:00:26.490
questions at this point?

11
00:00:26.490 --> 00:00:28.750
Cuz now we're about to take the next step.

12
00:00:28.750 --> 00:00:31.769
Yeah, Andrew.
&gt;&gt; Andrew: If the HTTP reserve is what

13
00:00:31.769 --> 00:00:37.417
sets up the socket, what's it doing
while it's waiting for the .listen?

14
00:00:41.784 --> 00:00:43.050
&gt;&gt; Andrew: You can draw it open.

15
00:00:45.368 --> 00:00:48.490
&gt;&gt; Will Sentance: [CROSSTALK] Yeah,
it's a reasonable question.

16
00:00:48.490 --> 00:00:52.910
I will say this, Andrew, our draw,

17
00:00:52.910 --> 00:00:56.420
you can always go down further to

18
00:00:58.500 --> 00:01:02.310
more completely understand
every single last detail, but

19
00:01:02.310 --> 00:01:05.270
there is a level of abstraction
that's right to choose and

20
00:01:05.270 --> 00:01:10.020
it's sort of our job to figure out
what's the right level abstraction.

21
00:01:10.020 --> 00:01:13.290
I think the level abstraction
exactly how that open,

22
00:01:13.290 --> 00:01:17.390
how that socket sits until it's assigned
a port, I think is a level of right.

23
00:01:17.390 --> 00:01:19.470
We're talking about
affect how we write code.

24
00:01:19.470 --> 00:01:20.440
It's a fair question.

25
00:01:20.440 --> 00:01:21.950
But it's gonna effect how you write code.

26
00:01:21.950 --> 00:01:23.358
We need a set of a port
in which to listen.

27
00:01:23.358 --> 00:01:30.745
Okay, let's now have our wonderful
friend Michael open his Mac.

28
00:01:30.745 --> 00:01:34.520
It's a fair question Andrew but we've,
someone's eyes have to sort of set a level

29
00:01:34.520 --> 00:01:37.040
for the phrase,
it's turtles all the way down.

30
00:01:37.040 --> 00:01:39.595
Sort of applies, we have to sort
of set a level at which we stop.

31
00:01:39.595 --> 00:01:45.236
Okay, Michael's Mac,
he opens it, there it is.

32
00:01:45.236 --> 00:01:46.450
I know you open it, don't touch it.

33
00:01:48.000 --> 00:01:50.135
Michael's Mac, he opens it.

34
00:01:50.135 --> 00:01:51.884
He opens browser.

35
00:01:51.884 --> 00:01:57.934
Browser when he opens a URL is
gonna instantly send out a message,

36
00:01:57.934 --> 00:02:00.579
know it has an HTTP message.

37
00:02:00.579 --> 00:02:02.624
That is gonna have three parts.

38
00:02:02.624 --> 00:02:05.256
We're only going to use two of them
here because we're just getting data.

39
00:02:05.256 --> 00:02:10.650
The first is the request line that
says get specifically tweet/3.

40
00:02:10.650 --> 00:02:13.560
Doesn't need to twitter.com bit.

41
00:02:13.560 --> 00:02:16.360
That's the bit that's used to
figure out where this computer is.

42
00:02:16.360 --> 00:02:19.060
So once we're there,
we don't need that in the message.

43
00:02:19.060 --> 00:02:22.420
And then it gonna have the headers.

44
00:02:22.420 --> 00:02:24.540
And people, you can literally just go and
investigate and

45
00:02:24.540 --> 00:02:29.100
look at the HTTP message using, well,
we'll see later on something called Curl,

46
00:02:29.100 --> 00:02:31.430
or Postman,
there's a number of ways you can do it.

47
00:02:31.430 --> 00:02:34.670
Then you can have the headers, which is
a bunch of meta data about Michael's Mac,

48
00:02:34.670 --> 00:02:36.700
and his browser, and who he is.

49
00:02:38.040 --> 00:02:38.700
Yep.

50
00:02:38.700 --> 00:02:40.200
And that then arrives.

51
00:02:41.250 --> 00:02:43.500
In it comes, look,
you fit it in the channel.

52
00:02:43.500 --> 00:02:44.340
No problem.

53
00:02:44.340 --> 00:02:49.960
In it came,
libUV helps bring it into Node.

54
00:02:49.960 --> 00:02:52.660
And it arrives as a little message,

55
00:02:52.660 --> 00:02:56.720
just a string of texts with
some important info on it.

56
00:02:56.720 --> 00:03:00.512
Get tweets.

57
00:03:00.512 --> 00:03:02.904
You can probably see this
is going already people.

58
00:03:02.904 --> 00:03:04.312
And then headers.

59
00:03:04.312 --> 00:03:08.214
But just because it is so many pieces of
this puzzle, it's the same pieces again

60
00:03:08.214 --> 00:03:12.060
and again after this by the way, so
you're gonna get very happy with it.

61
00:03:12.060 --> 00:03:14.720
But now, it's still worth being
quite precise on all this and

62
00:03:14.720 --> 00:03:18.150
really kind of repeating again and
again because it is so many pieces.

63
00:03:18.150 --> 00:03:20.910
But from now on,
it's the same pieces forevermore.

64
00:03:20.910 --> 00:03:21.640
Thank goodness.

65
00:03:21.640 --> 00:03:25.575
I mean, what auto inserted data is
inserted, it's gonna depend on which

66
00:03:25.575 --> 00:03:30.080
background feature we're using, but it's
always gonna be an autorun function and

67
00:03:30.080 --> 00:03:33.660
auto inserted data from Node,
again, and again, and again.

68
00:03:33.660 --> 00:03:36.570
In response to some background
computer internal feature,

69
00:03:36.570 --> 00:03:40.340
which in this case is the inbound
message that lands on the network card,

70
00:03:40.340 --> 00:03:45.520
and then with the help of libUV,
gets thrown into Node's C++ features.

71
00:03:45.520 --> 00:03:46.710
Okay, here it is.

72
00:03:46.710 --> 00:03:49.640
By the way, at the same time as
the inbound one, my little inbound arrow,

73
00:03:49.640 --> 00:03:55.710
at the same time, it spins up,
ready to go, a message,

74
00:03:55.710 --> 00:03:59.260
which is gonna be sent back, which is
where we need to attach all our data.

75
00:03:59.260 --> 00:04:02.090
And attach just means that,
attach means write the text.

76
00:04:02.090 --> 00:04:06.203
It was an image is gonna be right in the
text of the image, text of the zeros and

77
00:04:06.203 --> 00:04:09.244
ones of the image or
the way we capture the image format.

78
00:04:09.244 --> 00:04:13.063
The HTML is gonna be a string
of string of HTML code.

79
00:04:13.063 --> 00:04:16.136
JavaScript string of JavaScript code.

80
00:04:16.136 --> 00:04:19.600
Okay, this is the,
let's call it the outbound.

81
00:04:19.600 --> 00:04:21.271
They don't really have official,

82
00:04:21.271 --> 00:04:24.340
well they do have official names
that the response HTTP message.

83
00:04:24.340 --> 00:04:28.880
But without a bit more, you know,
current fuel, and then the inbound one.

84
00:04:30.489 --> 00:04:34.066
&gt;&gt; Will Sentance: Okay,
&gt;&gt; Will Sentance: So far, by the way,

85
00:04:34.066 --> 00:04:38.591
notice how much of the stuff we have to
diagram is not showing in the code, right?

86
00:04:38.591 --> 00:04:42.080
Cuz this is actually being triggered by
someone else's computer isn't our code.

87
00:04:42.080 --> 00:04:43.760
It's kind of,
like all this stuff right now,

88
00:04:43.760 --> 00:04:46.980
looking at the code,
we finished running our code.

89
00:04:46.980 --> 00:04:48.260
We finished our bit.

90
00:04:48.260 --> 00:04:49.670
Now it's all Node.

91
00:04:49.670 --> 00:04:51.690
But we need to know how it's working.

92
00:04:51.690 --> 00:04:54.300
Otherwise, we've no idea what's happening.

93
00:04:54.300 --> 00:04:56.230
Okay, in it comes.

94
00:04:56.230 --> 00:04:58.070
We have an auto-run function, but

95
00:04:58.070 --> 00:05:02.755
there's two parts to running a function,
putting friends on the end of it.

96
00:05:02.755 --> 00:05:06.528
Node does that to execute this code and
what's the other part?

97
00:05:06.528 --> 00:05:07.282
Michael.

98
00:05:07.282 --> 00:05:09.544
&gt;&gt; Michael: Parameters
&gt;&gt; Will Sentance: I don't whom

99
00:05:09.544 --> 00:05:10.458
in parameters,

100
00:05:10.458 --> 00:05:14.675
parameters that will leave there's
place holders to receive what, Matt?

101
00:05:14.675 --> 00:05:16.160
&gt;&gt; Matt: Data.

102
00:05:16.160 --> 00:05:17.625
&gt;&gt; Will Sentance: Yeah,
not, that's partially.

103
00:05:17.625 --> 00:05:19.235
&gt;&gt; [CROSSTALK]
&gt;&gt; Will Sentance: Arguments.

104
00:05:19.235 --> 00:05:22.455
Matt's very attached to the data one,
yeah, exactly, but yeah,

105
00:05:22.455 --> 00:05:23.760
he's right it's data.

106
00:05:23.760 --> 00:05:25.250
Arguments are data.

107
00:05:25.250 --> 00:05:26.570
Arguments are values.

108
00:05:26.570 --> 00:05:28.050
Arguments are actual data.

109
00:05:28.050 --> 00:05:32.170
Parameters are labels that like variable
names without anything stored in them.

110
00:05:33.480 --> 00:05:38.538
So we put those in ready for
Node to create data that gets inserted.

111
00:05:38.538 --> 00:05:40.383
Let's create that data.

112
00:05:40.383 --> 00:05:45.635
Auto created and inserted

113
00:05:45.635 --> 00:05:51.400
data known as, everyone?

114
00:05:51.400 --> 00:05:52.360
&gt;&gt; Speaker 5: Arguments.
&gt;&gt; Will Sentance: Arguments,

115
00:05:52.360 --> 00:05:52.940
well done people.

116
00:05:54.140 --> 00:05:56.308
Look at that catchy little subtitle there.

117
00:05:56.308 --> 00:05:58.550
All right, first one.

118
00:05:58.550 --> 00:06:00.761
Raise your hand if you can tell me
what the first one that's created is.

119
00:06:03.195 --> 00:06:04.500
&gt;&gt; Will Sentance: Yeah, Sam, thank you.

120
00:06:04.500 --> 00:06:05.670
&gt;&gt; Sam: It's gonna be an object.

121
00:06:07.300 --> 00:06:07.800
&gt;&gt; Will Sentance: Yeah.

122
00:06:09.630 --> 00:06:10.680
&gt;&gt; Sam: It's gonna contain the URL.

123
00:06:10.680 --> 00:06:12.450
&gt;&gt; Will Sentance: It's
gonna add a property.

124
00:06:12.450 --> 00:06:15.810
Node did this and it's gonna take,
it's gonna look into here and

125
00:06:15.810 --> 00:06:16.970
go what's the URL?

126
00:06:16.970 --> 00:06:18.470
What's the path?

127
00:06:18.470 --> 00:06:19.400
Why do they call it URL?

128
00:06:19.400 --> 00:06:22.558
It should be the path,
cuz the URL is the whole thing, isn't it?

129
00:06:22.558 --> 00:06:27.262
The domain name plus the- it is
actually just the path which is just

130
00:06:27.262 --> 00:06:30.794
the specific bit you need
from the server itself.

131
00:06:30.794 --> 00:06:33.470
Interesting.
Anyway, yep, URL which is,

132
00:06:33.470 --> 00:06:39.180
am I doing orange represented
a literally is grab from this message?

133
00:06:39.180 --> 00:06:46.820
Yeah, which is turned into a string
tweet/3, everyone see that there?

134
00:06:46.820 --> 00:06:48.484
And then what's the other thing?

135
00:06:48.484 --> 00:06:52.094
Can anyone guess what
other property it gets?

136
00:06:52.094 --> 00:06:52.878
&gt;&gt; Speaker 7: Method.

137
00:06:52.878 --> 00:06:56.433
&gt;&gt; Will Sentance: Method,
yeah, it gets many properties,

138
00:06:56.433 --> 00:07:01.289
but another important one is method,
which is set to get.

139
00:07:01.289 --> 00:07:04.398
There we go, perfect.

140
00:07:04.398 --> 00:07:09.102
And before we run the function, theres one
other object that needs to be auto created

141
00:07:09.102 --> 00:07:13.353
in order we can access and stick stuff
on this outbound needs to be a message.

142
00:07:13.353 --> 00:07:14.952
Well that's other object isn't it?

143
00:07:14.952 --> 00:07:20.874
So the other object is
full of functions like AND

144
00:07:20.874 --> 00:07:25.463
and right that when they're run from

145
00:07:25.463 --> 00:07:30.201
inside of JavaScript will stick stuff

146
00:07:30.201 --> 00:07:35.380
on this important response object.

147
00:07:35.380 --> 00:07:37.950
I know we've done this three or
four times now but it it's complicated.

148
00:07:39.580 --> 00:07:40.782
It's complicated.

149
00:07:40.782 --> 00:07:42.933
I was using complex and complicated.

150
00:07:42.933 --> 00:07:46.449
Complicated there's lots of moving parts,
complex as its conceptual abstract and

151
00:07:46.449 --> 00:07:48.500
the way the mind doesn't
usually think about.

152
00:07:48.500 --> 00:07:53.160
I would say this is,
all I see both complex and complicated.

153
00:07:53.160 --> 00:07:57.160
It's complex and it's weird to think
of someone else running out code for

154
00:07:57.160 --> 00:07:58.380
us, as opposed to us.

155
00:07:58.380 --> 00:08:02.060
That's complex as
conceptually unusual thing.

156
00:08:02.060 --> 00:08:05.150
It's complicated in that, what it runs and

157
00:08:05.150 --> 00:08:09.370
what is insert as the arguments is
a bunch of little intricate things.

158
00:08:09.370 --> 00:08:13.550
It's actually unfortunate but complex and
complicated, which is a shame.

