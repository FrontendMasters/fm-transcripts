WEBVTT

1
00:00:00.300 --> 00:00:02.785
&gt;&gt; Will Sentance: So
I hope your, I don't know,

2
00:00:02.785 --> 00:00:04.850
maybe I want you to be
bored at the end of this.

3
00:00:04.850 --> 00:00:09.060
I want you to be bored because I want
you to feel wow, that's all Node is?

4
00:00:09.060 --> 00:00:12.200
That same model again and again and again?

5
00:00:12.200 --> 00:00:15.130
Cuz it's gonna make all
of Node trivial to you,

6
00:00:15.130 --> 00:00:20.360
meaning you are then gonna be capable and
abled to go and tackle any Node feature.

7
00:00:20.360 --> 00:00:22.780
Because they're all this model and

8
00:00:22.780 --> 00:00:27.320
you just got a spot which bits which,
why is Michael whispering right now?.

9
00:00:27.320 --> 00:00:31.050
He moved the mike away so we know it's
inappropriate that we're certain of.

10
00:00:31.050 --> 00:00:33.400
We know he does want to be on record for
what he's saying.

11
00:00:33.400 --> 00:00:35.510
Okay, so we don't necessarily but
MiddleWeb,

12
00:00:35.510 --> 00:00:37.210
we'll talk MiddleWeb a bit later on.

13
00:00:37.210 --> 00:00:43.120
It's gonna turn out, and you'll see it
right here that we're going to need to

14
00:00:43.120 --> 00:00:48.860
look at the inbound message and
say, if they ask me about page.

15
00:00:48.860 --> 00:00:50.100
Send about the about page.

16
00:00:50.100 --> 00:00:52.474
If they ask for the help page,
send back the help page.

17
00:00:52.474 --> 00:00:54.250
There's a lot of if else is.

18
00:00:54.250 --> 00:00:58.795
And, like anything I react,
any task that's done a lot, hopefully some

19
00:00:58.795 --> 00:01:03.215
developers helped you out by pre-writing
code to deal with that task.

20
00:01:03.215 --> 00:01:06.136
So for example the task of, if they
call to this page, send back this and

21
00:01:06.136 --> 00:01:07.950
this page, you've got hundreds of pages.

22
00:01:07.950 --> 00:01:09.861
You wanna write if else for
everything one of them?

23
00:01:09.861 --> 00:01:10.613
No.

24
00:01:10.613 --> 00:01:14.971
Express what it is, is gonna turn out to
be pre-written JavaScript code that is

25
00:01:14.971 --> 00:01:18.041
a bunch of if false statements,
will be part of it that.

26
00:01:18.041 --> 00:01:20.848
But if else statements, if user ask
of this page, send back that and

27
00:01:20.848 --> 00:01:22.740
is gonna do that in one line for you.

28
00:01:22.740 --> 00:01:25.370
So they're all your web pages
arrays to be sent back,

29
00:01:25.370 --> 00:01:26.960
whatever they are whatever they asked for.

30
00:01:26.960 --> 00:01:31.870
The thing they do more interestingly,
remind me after this session to

31
00:01:31.870 --> 00:01:35.810
tell you what they do more interesting,
the MiddleWeb pattern is fantastic.

32
00:01:35.810 --> 00:01:40.020
It's a way, all its job is really is,
I'll give you a preview right now.

33
00:01:40.020 --> 00:01:44.240
Our only job I've just said in Node is to
look at that object that Node creates for

34
00:01:44.240 --> 00:01:47.920
us, with all the inbound data and
analyze it.

35
00:01:47.920 --> 00:01:51.166
Analyze, are you logged in is
the header got logged in cookie?

36
00:01:51.166 --> 00:01:58.100
Analyze what does the the exact
tweet we want to send back is.

37
00:01:58.100 --> 00:02:00.317
I don't know.

38
00:02:00.317 --> 00:02:03.428
Analyze, well, not just is
the user logged in, let me go and

39
00:02:03.428 --> 00:02:06.234
get that user's data at that
point from the database,

40
00:02:06.234 --> 00:02:10.093
like a lot of stuff basically, on that
object need to go through one by one.

41
00:02:10.093 --> 00:02:13.557
Do I wanna do that all in one
giant function do an incoming?

42
00:02:13.557 --> 00:02:17.640
Nah, so instead I wanna break
it up into individual functions.

43
00:02:17.640 --> 00:02:19.670
The things I wanna look
out on that object,

44
00:02:19.670 --> 00:02:22.750
step one,
check what user if user logged in.

45
00:02:22.750 --> 00:02:25.030
Step two, get users days from data base.

46
00:02:25.030 --> 00:02:27.642
Once I know they logged in by
looking at the object headers.

47
00:02:27.642 --> 00:02:31.010
Step three, check that you URL they want,
URL property.

48
00:02:31.010 --> 00:02:33.850
Don't do that all at once function,
do it in series of functions.

49
00:02:33.850 --> 00:02:37.863
The MiddleWeb passenger says, take that
object that's gonna be all create by Node,

50
00:02:37.863 --> 00:02:40.258
and pass it through function,
through function,

51
00:02:40.258 --> 00:02:44.260
through function doing something to it at
each stage and then returning it back out.

52
00:02:44.260 --> 00:02:47.842
Implicitly returning it back out at
the end of using the function to do

53
00:02:47.842 --> 00:02:48.656
the next task.

54
00:02:48.656 --> 00:02:53.884
It's only job is to modularize what you
want to dummies put into separate pieces,

55
00:02:53.884 --> 00:02:58.354
separate chunks rather than one giant
function, what you want to do to

56
00:02:58.354 --> 00:03:02.274
the inbound object to look at it and
send back the right data.

57
00:03:02.274 --> 00:03:05.630
It's a do that in steps, each of those
steps is an individual function.

58
00:03:05.630 --> 00:03:06.630
That is a MiddleWeb pattern.

59
00:03:06.630 --> 00:03:09.038
We will come to that again
a bit more in a second but

60
00:03:09.038 --> 00:03:13.170
expresses his pre-written jobs code
that does what we're doing here.

61
00:03:13.170 --> 00:03:13.780
Okay.

62
00:03:13.780 --> 00:03:14.590
Thoughtful question Michael.

