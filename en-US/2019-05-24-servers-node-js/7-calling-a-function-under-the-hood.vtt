WEBVTT

1
00:00:00.090 --> 00:00:01.888
&gt;&gt; Will Sentance: Let's now,
before we come to thumbs,

2
00:00:01.888 --> 00:00:03.471
we'll come to thumbs in a second.

3
00:00:03.471 --> 00:00:08.292
I just wanna finish up,
I want us to have the message come in,

4
00:00:08.292 --> 00:00:12.560
I want to have Sarah Rose's
inbound message come in.

5
00:00:12.560 --> 00:00:15.210
Let's remind ourselves,
two parts of calling a function.

6
00:00:16.330 --> 00:00:20.370
Executing its code,
in this function is gonna come and

7
00:00:20.370 --> 00:00:23.380
it's going to be presumably automatically.

8
00:00:23.380 --> 00:00:24.800
How do I execute code, Charlie?

9
00:00:24.800 --> 00:00:26.410
What symbols tell me to execute code?

10
00:00:26.410 --> 00:00:27.490
&gt;&gt; Speaker 2: Parentheses.
&gt;&gt; Will Sentance: Parentheses,

11
00:00:29.710 --> 00:00:32.810
I don't see myself adding any
parentheses on there to do on incoming.

12
00:00:32.810 --> 00:00:35.020
So who do you think is going to
add the parentheses, Charlie?

13
00:00:35.020 --> 00:00:36.560
&gt;&gt; Charlie: Node will.
&gt;&gt; Will Sentance: Node is.

14
00:00:36.560 --> 00:00:40.970
But what did I say there's another part
to executing code, taking its code and

15
00:00:40.970 --> 00:00:42.980
running it, what's the other thing
that goes into executing code?

16
00:00:42.980 --> 00:00:44.230
Raise your hand if you know.

17
00:00:44.230 --> 00:00:44.840
Matt.

18
00:00:44.840 --> 00:00:46.384
&gt;&gt; Matt: Saving data.

19
00:00:46.384 --> 00:00:48.873
&gt;&gt; Will Sentance: It's almost
the right answer [LAUGH] Mohammed.

20
00:00:48.873 --> 00:00:53.740
Well it's not far off, what is the other
thing that goes into running a function?

21
00:00:53.740 --> 00:00:56.960
Running its code and honestly yeah
sort of but be a bit more specific,

22
00:00:56.960 --> 00:00:57.960
saving what data?

23
00:00:57.960 --> 00:01:00.760
&gt;&gt; Matt: Returning the-
&gt;&gt; Will Sentance: Not, quite.

24
00:01:00.760 --> 00:01:01.260
Virginia?

25
00:01:02.310 --> 00:01:05.050
The other thing that happens when I
want to run a function is I have to

26
00:01:05.050 --> 00:01:05.720
do what's that?

27
00:01:05.720 --> 00:01:07.090
&gt;&gt; Speaker 5: I'll insert the parameter.

28
00:01:07.090 --> 00:01:08.516
The argument.
&gt;&gt; Will Sentance: Insert arguments,

29
00:01:08.516 --> 00:01:09.520
insert data.

30
00:01:09.520 --> 00:01:13.890
Two things running a function,
parens on the end to make it run its code,

31
00:01:13.890 --> 00:01:16.260
the other thing insert data.

32
00:01:20.100 --> 00:01:22.072
You know what?
I have a feeling that,

33
00:01:22.072 --> 00:01:27.886
wouldn't it be amazing, if Node not only
took this code do all incomings code and

34
00:01:27.886 --> 00:01:32.430
autoran it with what, Charlie,
how does it autorun it?

35
00:01:32.430 --> 00:01:34.222
By adding?
&gt;&gt; Speaker 6: Parantheses.

36
00:01:34.222 --> 00:01:38.864
&gt;&gt; Will Sentance: Parentheses,
but also, if it were there to

37
00:01:38.864 --> 00:01:43.750
help me out by auto inserting arguments.

38
00:01:43.750 --> 00:01:48.240
The other thing that is
needed to run a function and

39
00:01:48.240 --> 00:01:54.760
wouldn't it be damn fantastic
if those arguments were

40
00:01:54.760 --> 00:02:00.870
the very data that came
from Sarah Rose's Mac.

41
00:02:00.870 --> 00:02:04.136
Because then inside the auto running code,

42
00:02:04.136 --> 00:02:09.267
I'd have access to all the data I
need to determine what to send back.

43
00:02:09.267 --> 00:02:10.430
That's exactly what happens.

44
00:02:10.430 --> 00:02:11.150
Let's have a look.

45
00:02:11.150 --> 00:02:14.882
Two parts of calling a function, executing
its code and inserting its inputs,

46
00:02:14.882 --> 00:02:15.671
its arguments.

47
00:02:15.671 --> 00:02:18.589
In multiply by two or three,
the argument's three and

48
00:02:18.589 --> 00:02:20.245
we the developer inserted it.

49
00:02:20.245 --> 00:02:21.530
We wrote it, I see it.

50
00:02:21.530 --> 00:02:22.340
I wrote it, look, three.

51
00:02:23.910 --> 00:02:29.591
Node will not only autorun our function by
inserting behind the scenes what Charlie?

52
00:02:29.591 --> 00:02:30.789
&gt;&gt; Charlie: Parenthesis.
&gt;&gt; Will Sentance: Parenthesis,

53
00:02:30.789 --> 00:02:33.830
easy to say it for now,
it's gonna be correct the whole time.

54
00:02:33.830 --> 00:02:34.880
At the exact right moment.

55
00:02:34.880 --> 00:02:36.260
What's the exact right moment?

56
00:02:36.260 --> 00:02:37.910
When the message comes in
which could be tomorrow,

57
00:02:37.910 --> 00:02:39.970
it could be seven weeks from now.

58
00:02:39.970 --> 00:02:42.710
Does it for us,
it puts the parens on the end.

59
00:02:42.710 --> 00:02:47.290
It'll also automatically insert
whatever the pertinent data is,

60
00:02:47.290 --> 00:02:51.745
the relevant data is as,
why did you insert the word additional?

61
00:02:51.745 --> 00:02:55.021
But additional, man.

62
00:02:55.021 --> 00:02:57.729
No, as the input,
ignore that word additional,

63
00:02:57.729 --> 00:03:01.025
as the argument,
as the input to that function.

64
00:03:01.025 --> 00:03:02.775
I meant the word additional to
be one of the ones down here.

65
00:03:02.775 --> 00:03:07.875
Sometimes it will additionally,
even as a second argument,

66
00:03:07.875 --> 00:03:12.695
a second input,
insert a set of functions in an object.

67
00:03:14.910 --> 00:03:22.099
And that those functions when they're
run inside the auto-run function.

68
00:03:22.099 --> 00:03:26.934
The second input will be a bunch of
functions that we will access to that when

69
00:03:26.934 --> 00:03:30.926
they're run will give us access
back to node which might allow

70
00:03:30.926 --> 00:03:34.700
us to add data to the message
to send back to the user.

71
00:03:34.700 --> 00:03:35.860
We're going to see it in action.

72
00:03:35.860 --> 00:03:36.940
That's exactly what Node does.

