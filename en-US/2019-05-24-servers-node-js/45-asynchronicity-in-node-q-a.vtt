WEBVTT

1
00:00:00.003 --> 00:00:01.010
&gt;&gt; Will Sentance: Andrew,
we'll start with you.

2
00:00:01.010 --> 00:00:03.914
&gt;&gt; Andrew: You mentioned that we have to

3
00:00:03.914 --> 00:00:08.275
require a bunch of
things when we use them.

4
00:00:08.275 --> 00:00:12.303
Is it anytime we use a Node label,
we have to require-

5
00:00:12.303 --> 00:00:13.108
&gt;&gt; Will Sentance: Yeah, but

6
00:00:13.108 --> 00:00:15.078
not this one and this one.

7
00:00:15.078 --> 00:00:17.378
We do not need to require setTimeout in,

8
00:00:17.378 --> 00:00:21.584
we do not need to require setImmediate
in for the rest here, yeah, yeah.

9
00:00:21.584 --> 00:00:25.601
And we can see a list of all the labels
we need to require in in the Node docs.

10
00:00:25.601 --> 00:00:30.319
And by the way, some of them, behind
their scenes, are requiring in, well,

11
00:00:30.319 --> 00:00:35.559
they're requiring other stuff, but they're
setting up other Node stuff like HTTP.

12
00:00:35.559 --> 00:00:39.617
When we use HTTP, behind the scenes,
we're using Node's net feature,

13
00:00:39.617 --> 00:00:43.620
which is more generic setting up of
a socket to the net, to the Internet.

14
00:00:43.620 --> 00:00:45.542
Excellent, Andrew, Michael.

15
00:00:45.542 --> 00:00:49.203
&gt;&gt; Michael: Okay, so I feel like I wanna
go further deeper into the matrix here,

16
00:00:49.203 --> 00:00:49.981
a little bit.

17
00:00:49.981 --> 00:00:52.248
&gt;&gt; Speaker 4: [LAUGH]
&gt;&gt; Michael: So if I were building, okay,

18
00:00:52.248 --> 00:00:55.714
what is the event loop in one of
these callback or stacks, right?

19
00:00:55.714 --> 00:00:57.975
&gt;&gt; Will Sentance: Wait, wait,
so queue, yeah, queues.

20
00:00:57.975 --> 00:01:00.119
&gt;&gt; Michael: So
if I were building an event loop,

21
00:01:00.119 --> 00:01:03.338
I would just write a while
statement that never ends.

22
00:01:03.338 --> 00:01:06.659
&gt;&gt; Will Sentance: Fantastic, wow,
and in fact, this is Boolean C++.

23
00:01:06.659 --> 00:01:11.853
And we can go and
look at the C++ code and it says,

24
00:01:11.853 --> 00:01:18.041
while there are still things
that could in the background,

25
00:01:18.041 --> 00:01:22.517
what an outstanding question by Michael.

26
00:01:22.517 --> 00:01:23.650
What language do you come from, Michael?

27
00:01:23.650 --> 00:01:24.722
&gt;&gt; Michael: JavaScript.

28
00:01:24.722 --> 00:01:27.455
&gt;&gt; Will Sentance: Okay, so
Michael just asked a question there.

29
00:01:27.455 --> 00:01:29.111
Could I build my own event loop?

30
00:01:29.111 --> 00:01:34.558
Absolutely, all of this is
a while loop that first confirms,

31
00:01:34.558 --> 00:01:38.767
is there anything that
could still be autorun?

32
00:01:38.767 --> 00:01:41.308
Cuz if there's nothing
that could be auto run,

33
00:01:41.308 --> 00:01:44.239
there's no point continuing
the looping to check it.

34
00:01:44.239 --> 00:01:45.400
There's also a run function.

35
00:01:45.400 --> 00:01:46.596
You just end JavaScript application.

36
00:01:46.596 --> 00:01:50.277
That's why if you ever see where you
haven't set up a background feature in

37
00:01:50.277 --> 00:01:53.093
Node and you run Node on your file,
it exits out, right?

38
00:01:53.093 --> 00:01:57.167
If you ever write Node Server.js and
you've not done anything in it,

39
00:01:57.167 --> 00:02:00.757
it runs and then next line,
the command lines started again,

40
00:02:00.757 --> 00:02:02.919
because you finished your Node app.

41
00:02:02.919 --> 00:02:07.793
But as long as you set up something
that in the background could still

42
00:02:07.793 --> 00:02:11.385
autorun a function,
then the while loop will go,

43
00:02:11.385 --> 00:02:15.065
while there's still stuff
that could be autorun,

44
00:02:15.065 --> 00:02:20.905
continue to cycle to check first this
queue, then this queue, then this queue.

45
00:02:20.905 --> 00:02:24.333
Then go back and check these queues,
then check this queue.

46
00:02:24.333 --> 00:02:26.628
Then go back and check these queues,
then check this queue.

47
00:02:26.628 --> 00:02:29.031
Then go back and check these queues,
then check this queue.

48
00:02:29.031 --> 00:02:31.651
And then do it all over again.

49
00:02:31.651 --> 00:02:32.604
Yeah, go ahead, Michael.

50
00:02:32.604 --> 00:02:34.587
&gt;&gt; Michael: So
then if you're writing a queue,

51
00:02:34.587 --> 00:02:38.165
is it just a function that's
towards other functions to be run?

52
00:02:38.165 --> 00:02:40.538
&gt;&gt; Will Sentance: Well,
I'd imagine you could implement it.

53
00:02:40.538 --> 00:02:44.235
Some languages have direct
implementation of a data structure,

54
00:02:44.235 --> 00:02:46.326
a way of storing data called a queue.

55
00:02:46.326 --> 00:02:50.715
Data structures are described
by what they can do.

56
00:02:50.715 --> 00:02:52.588
So what can a queue do?

57
00:02:52.588 --> 00:02:57.211
Well, you can dequeue the first element
out of it, and then the next that if you

58
00:02:57.211 --> 00:03:00.874
try to run dequeue on it again,
it will be the next thing in it.

59
00:03:00.874 --> 00:03:05.258
So data structures,
ways of storing data, their character,

60
00:03:05.258 --> 00:03:09.227
their behavior,
is described by what you can do on them,

61
00:03:09.227 --> 00:03:12.716
not by necessarily per se
how the data's stored.

62
00:03:12.716 --> 00:03:14.427
That's part of it, but
it's also by what you can do with them.

63
00:03:14.427 --> 00:03:17.577
So with a queue, all it is, you could
think of it in JavaScript, you wanna build

64
00:03:17.577 --> 00:03:20.538
a queue, you'd have an array, yeah,
and then you take the first thing and

65
00:03:20.538 --> 00:03:23.053
you can have an array of functions,
no problem in JavaScript.

66
00:03:23.053 --> 00:03:25.017
You take the first element out and

67
00:03:25.017 --> 00:03:29.101
you better make sure you shift all
the previous elements to the next.

68
00:03:29.101 --> 00:03:31.271
Now if you were to use in JavaScript,

69
00:03:31.271 --> 00:03:36.101
you can imagine building a function very
easily that took out that first element,

70
00:03:36.101 --> 00:03:39.683
first function, shifted all of
them down to the next index.

71
00:03:39.683 --> 00:03:41.925
Next time you run that function,
you get the next function out.

72
00:03:41.925 --> 00:03:43.004
That's all it is.

73
00:03:43.004 --> 00:03:45.297
You could rebuild your own
mini-event loop as a manifest.

74
00:03:45.297 --> 00:03:46.958
That's very cool question, Michael.

75
00:03:46.958 --> 00:03:50.880
What a great way to close.

