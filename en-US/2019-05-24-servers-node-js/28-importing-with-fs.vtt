WEBVTT

1
00:00:00.000 --> 00:00:05.002
&gt;&gt; Will Sentance: For now, let's just get
importing our tweets with the help of fs.

2
00:00:05.002 --> 00:00:06.640
And go to function equal cleanTweets.

3
00:00:06.640 --> 00:00:08.012
We're not gonna talk about how it works.

4
00:00:08.012 --> 00:00:11.519
But just imagine it's a simple
algorithm that goes through,

5
00:00:11.519 --> 00:00:13.414
maybe it's a list of mean words.

6
00:00:13.414 --> 00:00:17.708
And it's just gonna go through and check
each of the words in our string of tweets,

7
00:00:17.708 --> 00:00:20.897
massive cluttery, and
just delete them, at its simplest.

8
00:00:20.897 --> 00:00:24.927
Take the 1.5 gigabytes down to maybe
70 megabytes, so a joke for you.

9
00:00:29.683 --> 00:00:31.405
&gt;&gt; Will Sentance: That's
not actually true.

10
00:00:31.405 --> 00:00:35.043
All right, okay, so
then we go to function useImportedTweets.

11
00:00:35.043 --> 00:00:40.235
And then we're gonna use fs.readFile,
which is gonna be a label for

12
00:00:40.235 --> 00:00:44.992
the Node C++ feature fs that
gives access to the file system.

13
00:00:44.992 --> 00:00:47.854
And we're gonna parse it,
just a string of characters.

14
00:00:47.854 --> 00:00:50.141
To JavaScript,
that's just a string of letters.

15
00:00:50.141 --> 00:00:51.589
It means nothing to it.

16
00:00:51.589 --> 00:00:56.925
But I have a feeling it's gonna be parsed
to Node's background file system access

17
00:00:56.925 --> 00:01:02.051
feature that has the ability to parse,
interpret that string of characters.

18
00:01:02.051 --> 00:01:06.916
And use it to resolve to an actual
file position in the internal computer

19
00:01:06.916 --> 00:01:10.415
features, in the file system,
in the hard drive.

20
00:01:10.415 --> 00:01:15.813
Every single file in your hard drive
has a path, a position in its folder.

21
00:01:15.813 --> 00:01:18.502
It's in a folder, which is in a folder,
which is in a folder.

22
00:01:18.502 --> 00:01:20.697
We use slashes to go into folders.

23
00:01:20.697 --> 00:01:25.967
We use dots to indicate
look in the current folder.

24
00:01:25.967 --> 00:01:27.581
What is the current folder?

25
00:01:27.581 --> 00:01:32.195
The current folder is wherever
you chose to turn Node on and

26
00:01:32.195 --> 00:01:35.596
what JavaScript file you were running in.

27
00:01:35.596 --> 00:01:37.816
It's not literally where
the JavaScript file is saved.

28
00:01:37.816 --> 00:01:40.847
And we said we saved this
JavaScript file and turned it on.

29
00:01:40.847 --> 00:01:42.880
It's not literally where it's saved.

30
00:01:42.880 --> 00:01:44.362
Whenever you open Node,

31
00:01:44.362 --> 00:01:49.032
you open it from the terminal inside of
specific location in your file system.

32
00:01:49.032 --> 00:01:51.505
You're in the prompt in the terminal.

33
00:01:51.505 --> 00:01:53.620
The prompt is a little bit
before you start typing.

34
00:01:53.620 --> 00:01:56.778
It's always got a position,
a location you're opening,

35
00:01:56.778 --> 00:01:58.366
you're running that app in.

36
00:01:58.366 --> 00:02:04.834
Wherever you ran Node,
that will be the current folder location.

37
00:02:04.834 --> 00:02:09.130
So if you see the dot, Node's gonna look
first in the folder in which you switch

38
00:02:09.130 --> 00:02:12.334
Node on in, in which you're
running the app Node within.

39
00:02:12.334 --> 00:02:16.430
You always run any app through
the terminal in a particular location.

40
00:02:16.430 --> 00:02:20.025
In a terminal, you never just run them on
your computer, you're always in a folder.

41
00:02:20.025 --> 00:02:23.024
So where that folder is,
that's where you start off looking.

42
00:02:23.024 --> 00:02:27.614
And you do slash to say,
look in this existing folder for

43
00:02:27.614 --> 00:02:30.064
a file called tweets.json.

44
00:02:30.064 --> 00:02:33.455
What is this .json thing?

45
00:02:37.028 --> 00:02:40.207
&gt;&gt; Will Sentance: It's a really, really,
really useful way of storing data.

46
00:02:40.207 --> 00:02:43.160
In JavaScript, people, we love objects.

47
00:02:43.160 --> 00:02:45.746
They're really easy to break
to go down multiple areas and

48
00:02:45.746 --> 00:02:47.496
find the exact bit of data we want in it.

49
00:02:47.496 --> 00:02:48.456
It really organize data.

50
00:02:48.456 --> 00:02:52.546
But if I want to store that object,
and it's an object for the tweets.

51
00:02:52.546 --> 00:02:57.444
Let's say I make an object for the tweets,
&gt;&gt; Will Sentance: With

52
00:02:57.444 --> 00:02:58.484
ton of tweets in here.

53
00:02:58.484 --> 00:03:02.925
If I wanna store that object outside of
JavaScript, I can't cuz it's a JavaScript

54
00:03:02.925 --> 00:03:06.555
construct that only exists and
work through my JavaScript memory.

55
00:03:06.555 --> 00:03:10.428
It's not like a string of characters
that I can store anywhere.

56
00:03:10.428 --> 00:03:14.351
So if I wanna store it in
my file system long term,

57
00:03:14.351 --> 00:03:19.136
I need to convert it into a kind
of version of an object that is

58
00:03:19.136 --> 00:03:23.481
just like a string of all
the properties of an object.

59
00:03:23.481 --> 00:03:29.685
So if had an object like, I don't know,
&gt;&gt; Will Sentance: I don't know,

60
00:03:29.685 --> 00:03:34.525
tweet 1 is yo, tweet 2 is hi,

61
00:03:34.525 --> 00:03:40.487
then I could convert this into a string

62
00:03:40.487 --> 00:03:47.386
with each property,
&gt;&gt; Will Sentance: Tweet 2,

63
00:03:47.386 --> 00:03:51.296
I could convert into
a string of characters.

64
00:03:51.296 --> 00:03:55.136
If there were one of these
with another object,

65
00:03:55.136 --> 00:03:59.271
I'd open it out and
then save that as a .json file.

66
00:03:59.271 --> 00:04:01.626
It's just text,
just a string of characters.

67
00:04:01.626 --> 00:04:06.846
I could then load that stringified, turned
into a string, version of my JavaScript

68
00:04:06.846 --> 00:04:11.784
object back into JavaScript and run
a function called, well, what function?

69
00:04:11.784 --> 00:04:13.356
Raise your hand if you know, Seph.

70
00:04:13.356 --> 00:04:13.860
&gt;&gt; Seph: Parse.

71
00:04:13.860 --> 00:04:17.353
&gt;&gt; Will Sentance: JSON.parse that will
turn that stringified version of my

72
00:04:17.353 --> 00:04:21.784
JavaScript object back into a workable
JavaScript object that I can use.

73
00:04:21.784 --> 00:04:26.491
It's a way of long-term archiving,
I guess, preserving JavaScript

74
00:04:26.491 --> 00:04:31.361
objects in a way that can then be parsed
around from computer to computer.

75
00:04:31.361 --> 00:04:33.780
I can't parse a JavaScript object
that only exists in JavaScript.

76
00:04:33.780 --> 00:04:38.136
I can't parse that construct into the file
system over the Internet to another

77
00:04:38.136 --> 00:04:38.796
computer.

78
00:04:38.796 --> 00:04:41.287
I have to turn it into something
which is just a string of characters.

79
00:04:41.287 --> 00:04:45.537
It's a stringified version of a JavaScript
object, which is exactly what we need.

80
00:04:45.537 --> 00:04:50.760
Okay, so we're gonna have our tweets
stored in the archive in that format,

81
00:04:50.760 --> 00:04:53.300
and we're gonna bring them back in.

82
00:04:53.300 --> 00:04:57.800
And I guess we're gonna run JSON.parse
on them to convert them back into

83
00:04:57.800 --> 00:05:02.170
JavaScript object, which we can use,
and clean them in the process.

84
00:05:02.170 --> 00:05:04.146
Okay, here we go, people.

85
00:05:04.146 --> 00:05:08.904
For the first time,
we're using another Node, and therefore,

86
00:05:08.904 --> 00:05:13.414
computer internal feature
besides its networking ability.

87
00:05:13.414 --> 00:05:18.790
It's the file system or
file storage feature.

88
00:05:18.790 --> 00:05:19.826
Okay, here we go.

89
00:05:19.826 --> 00:05:25.146
With my wipe down,
I'm gonna leave up all our framework,

90
00:05:25.146 --> 00:05:28.413
our overall architecture of Node.

91
00:05:28.413 --> 00:05:35.342
We're using, people, a new feature of our
computer's internals, the file storage.

92
00:05:35.342 --> 00:05:40.837
File storage or file system is the
organizing structure of the file storage.

93
00:05:40.837 --> 00:05:42.460
There it is.

94
00:05:42.460 --> 00:05:47.224
And now,
I presume we must have saved a file.

95
00:05:47.224 --> 00:05:50.284
What's the file we must have saved, Matt?

96
00:05:50.284 --> 00:05:51.877
&gt;&gt; Matt: tweets.json?

97
00:05:51.877 --> 00:05:55.349
&gt;&gt; Will Sentance: Yeah,
tweets.json, yeah, tweets.json.

98
00:05:55.349 --> 00:05:57.998
I presume we saved it in the same folder.

99
00:05:59.341 --> 00:06:02.298
&gt;&gt; Will Sentance: Same folder, you're less
impressed than I am on my folder drawing.

100
00:06:02.298 --> 00:06:09.077
Same folder as we're running Node in,
same location,

101
00:06:09.077 --> 00:06:14.134
and it's tweets.json and it's a file.

102
00:06:14.134 --> 00:06:15.063
There it is.

103
00:06:15.063 --> 00:06:15.906
That's pretty good, right?

104
00:06:15.906 --> 00:06:18.096
Yeah, thank you William.

105
00:06:18.096 --> 00:06:24.023
It's that all,
by the way throwback to Windows 3.1 UI.

106
00:06:24.023 --> 00:06:31.164
Wow, through our over 30s in the building.

107
00:06:31.164 --> 00:06:37.537
All right, I turned 33 four months ago,
in a good way and I'm very happy by it.

108
00:06:37.537 --> 00:06:39.714
Life's on track.

109
00:06:39.714 --> 00:06:41.240
No, life's on track, life's on track.

110
00:06:41.240 --> 00:06:43.604
Life's even good, it's good.

111
00:06:43.604 --> 00:06:50.061
I tell you, I just hate when people say 30
and then they say that annoying phrase.

112
00:06:50.061 --> 00:06:52.957
&gt;&gt; [INAUDIBLE]
&gt;&gt; Will Sentance: No, they say 30,

113
00:06:52.957 --> 00:06:54.061
I don't like this.

114
00:06:54.061 --> 00:06:56.816
I think it's like,
how insecure must you be about turning 30,

115
00:06:56.816 --> 00:06:57.878
they have to bring it up.

116
00:06:57.878 --> 00:06:59.020
And so anyway, moving on.

117
00:06:59.020 --> 00:07:02.465
&gt;&gt; class: [LAUGH]
&gt;&gt; Will Sentance: All right, so

118
00:07:02.465 --> 00:07:04.046
it's all set up.

119
00:07:04.046 --> 00:07:07.895
But do we have access to the file
storage system through JavaScript?

120
00:07:07.895 --> 00:07:09.945
And one thing we do, definitely not.

121
00:07:09.945 --> 00:07:13.246
In the web browser, we definitely
not either for security reasons.

122
00:07:13.246 --> 00:07:16.955
So from the start,
it was not looking good to have access.

123
00:07:16.955 --> 00:07:21.895
Thank God we had someone write a ton
of C++ code to give us access.

124
00:07:21.895 --> 00:07:26.634
And of course, the wonderful team,
I ain't gonna shout them out,

125
00:07:26.634 --> 00:07:29.460
at libUV who worked in conjunction, but

126
00:07:29.460 --> 00:07:33.950
they are a big part of the interface
between these two portions,

127
00:07:33.950 --> 00:07:38.962
especially when it comes to accessing
the file system or file storage.

128
00:07:38.962 --> 00:07:44.187
Because actually, we're gonna see
libUV is gonna spin up a thread

129
00:07:44.187 --> 00:07:50.172
of execution in the background to handle
the pulling of that data into Node.

130
00:07:50.172 --> 00:07:54.383
Just because the crate is discovered,
there was too much complexity and

131
00:07:54.383 --> 00:07:58.799
too many risks with relying on using
the computer internal operating system

132
00:07:58.799 --> 00:08:01.767
ability to basically spin
up background threads or

133
00:08:01.767 --> 00:08:06.598
handle things going on in the background
and said, okay, we're just gonna always

134
00:08:06.598 --> 00:08:10.488
make sure we have an open focus
channel to pull this data into Node.

135
00:08:10.488 --> 00:08:12.184
We'll talk more about
that a little bit later.

