WEBVTT

1
00:00:00.090 --> 00:00:03.210
&gt;&gt; Will Sentance: We're now gonna
start working on things in batches.

2
00:00:03.210 --> 00:00:03.760
I love this.

3
00:00:03.760 --> 00:00:05.950
I think this is absolutely beautiful.

4
00:00:05.950 --> 00:00:08.110
By the way, what are the batch sizes?

5
00:00:08.110 --> 00:00:13.430
We can control it, set it ourselves, but
the default batch size is 64 kilobytes.

6
00:00:13.430 --> 00:00:15.440
They call it the high watermark.

7
00:00:15.440 --> 00:00:18.121
That any read flow of data.

8
00:00:18.121 --> 00:00:20.121
I'm gonna show you by the way
why didn't think they could,

9
00:00:20.121 --> 00:00:21.929
well we'll get the read
streaming thing in a second.

10
00:00:21.929 --> 00:00:23.845
I don't consider them streams of data.

11
00:00:23.845 --> 00:00:25.319
They're batches of data.

12
00:00:25.319 --> 00:00:28.501
They're brought in chunks of 64 kilobytes.

13
00:00:28.501 --> 00:00:31.378
It's not any stream I've heard about,
where you're like, well,

14
00:00:31.378 --> 00:00:32.580
we'll see this in a moment.

15
00:00:32.580 --> 00:00:34.713
Well, actually, we'll see it right now.

16
00:00:34.713 --> 00:00:39.500
This is, to me, what a stream looks like,
and I did once do this, and

17
00:00:39.500 --> 00:00:43.643
drew out an entire bucolic
environment with a full stream.

18
00:00:43.643 --> 00:00:46.758
But I'm not gonna do that this time,
because that was a real waste of time and

19
00:00:46.758 --> 00:00:48.177
a massive distraction last time.

20
00:00:48.177 --> 00:00:49.787
Just a little bit of a stream.

21
00:00:49.787 --> 00:00:54.771
So here's what to me a stream looks like.

22
00:00:54.771 --> 00:00:56.211
There you go, see.

23
00:00:56.211 --> 00:00:58.649
Definitely not drawing
the whole thing this time.

24
00:00:58.649 --> 00:01:01.601
Just a little bit.

25
00:01:01.601 --> 00:01:03.734
That's a volcano in the background,
no okay.

26
00:01:03.734 --> 00:01:05.754
That was meant to be a tree,
that was meant to be.

27
00:01:05.754 --> 00:01:10.227
Look, look, artistry is not,
I talked about this before but

28
00:01:10.227 --> 00:01:12.130
it's my favorite thing.

29
00:01:12.130 --> 00:01:16.253
I'll never forget when I was six years
old, when a girl in my, a women in my,

30
00:01:16.253 --> 00:01:19.700
well, girl in my class said,
I said, can you draw a cow.

31
00:01:19.700 --> 00:01:21.410
And she drew, and it was Emma.

32
00:01:21.410 --> 00:01:24.057
I still remember her, Emma Try, she
lived down the street, shout out, Emma.

33
00:01:24.057 --> 00:01:26.703
She lived down the street,
she went to the same church as me.

34
00:01:26.703 --> 00:01:30.756
Emma, I sang in the choir.

35
00:01:30.756 --> 00:01:34.116
Anyway, moving on, so
Emma could draw a cow and

36
00:01:34.116 --> 00:01:39.495
I tell you if any of you tried to draw
a cow, it's something very real for me.

37
00:01:39.495 --> 00:01:42.095
If you try to draw a cow,
you cannot draw a cow.

38
00:01:42.095 --> 00:01:46.250
It will look like a horse, or
a dog and it's very fascinating to me.

39
00:01:46.250 --> 00:01:50.323
So, anyway that was not much to that
story except for she could draw a cow.

40
00:01:53.656 --> 00:01:56.281
&gt;&gt; Will Sentance: See if I can draw a cow.

41
00:01:56.281 --> 00:02:00.490
People pay a subscription for this,
people actually pay a subscription.

42
00:02:00.490 --> 00:02:03.260
Okay, there we go, that's why, okay.

43
00:02:03.260 --> 00:02:05.176
&gt;&gt; Class: No.

44
00:02:05.176 --> 00:02:07.533
&gt;&gt; Will Sentance: [LAUGH] Who said no?

45
00:02:07.533 --> 00:02:10.258
Virginia, you're just like
the Virginia in my family,

46
00:02:10.258 --> 00:02:11.573
constantly undermining,

47
00:02:11.573 --> 00:02:12.827
&gt;&gt; Class: [LAUGH]
&gt;&gt; Will Sentance: No, no,

48
00:02:12.827 --> 00:02:13.580
no, she's correct.

49
00:02:13.580 --> 00:02:17.060
All right, so this is what a stream
looks like to me is a constant flow.

50
00:02:17.060 --> 00:02:20.830
Whereas actually,
what a stream is in node, and

51
00:02:20.830 --> 00:02:26.440
honestly in computer science in general,
is chunks of data.

52
00:02:26.440 --> 00:02:31.321
So we're gonna get them like,
think of it instead as pails of water.

53
00:02:31.321 --> 00:02:36.204
Pail, you only ever say the word
pail when you're talking about,

54
00:02:36.204 --> 00:02:38.131
okay, buckets of water.

55
00:02:38.131 --> 00:02:44.372
Buckets of water with 64
kilobytes of data in each of them.

56
00:02:44.372 --> 00:02:47.397
I think that's really important
because the idea of stream sounds so

57
00:02:47.397 --> 00:02:49.808
intimidating what,
flows of data racing towards me.

58
00:02:49.808 --> 00:02:50.714
How am I gonna deal with them?

59
00:02:50.714 --> 00:02:51.981
I don't have to.

60
00:02:51.981 --> 00:02:56.617
Instead they come in as buckets and
each time a bucket arrives, I'm gonna flag

61
00:02:56.617 --> 00:03:01.790
an event, nodes, I'm not gonna do,
Node's gonna auto broadcast a message.

62
00:03:01.790 --> 00:03:03.120
What is the message?

63
00:03:03.120 --> 00:03:05.320
Well can anyone spot, Zep can you
spot what the message might be?

64
00:03:05.320 --> 00:03:06.348
&gt;&gt; Zep: I think it's data.

65
00:03:06.348 --> 00:03:07.120
&gt;&gt; Will Sentance: It's data.

66
00:03:07.120 --> 00:03:11.550
It's gonna broadcast message data and
we're gonna have a function attached to it

67
00:03:11.550 --> 00:03:16.070
to auto run at that moment back in
JavaScript, again and again and again.

68
00:03:16.070 --> 00:03:19.220
Okay, so, I just think the word
stream sounds so intimidating.

69
00:03:19.220 --> 00:03:21.342
It's like it's flowing
data racing towards me.

70
00:03:21.342 --> 00:03:23.072
How can I possibly write
code to handle that?

71
00:03:23.072 --> 00:03:23.873
I don't have to.

72
00:03:23.873 --> 00:03:25.661
Matt's like, no, that's fine.

73
00:03:25.661 --> 00:03:28.308
But to me, I thought was very,
I think it's very important.

74
00:03:28.308 --> 00:03:32.060
It's not a constant flow that's
unwieldy and out of control.

75
00:03:32.060 --> 00:03:35.870
It's a batch of data that we get to
set a function that will autorun when

76
00:03:35.870 --> 00:03:40.020
a batch completes, when a batch fully
gets into Node and gets executed, okay?

77
00:03:40.020 --> 00:03:43.470
By the way, people,
this is Node's pride and joy feature.

78
00:03:43.470 --> 00:03:44.970
Node is so proud.

79
00:03:44.970 --> 00:03:46.744
Andrew go ahead.

80
00:03:46.744 --> 00:03:51.941
&gt;&gt; Andrew: Is the data pre-batched in 64
kilobyte pails before Node interacts or

81
00:03:51.941 --> 00:03:56.210
is Node like counting, counting,
coming like a bouncer.

82
00:03:56.210 --> 00:03:58.159
Boom 64, hey, we got data.

83
00:03:58.159 --> 00:03:59.070
Next one in.

84
00:03:59.070 --> 00:04:00.470
&gt;&gt; Will Sentance: It's handled by Node.

85
00:04:00.470 --> 00:04:04.260
Yeah, this is Node's pride and
joy featured, people.

86
00:04:04.260 --> 00:04:07.480
This is a feature of Node
that people are like, wow.

87
00:04:07.480 --> 00:04:09.650
Because they can see
the efficiency this gives you.

88
00:04:09.650 --> 00:04:14.120
This is super efficient for
when you're handling large scale data and

89
00:04:14.120 --> 00:04:16.740
want to continue moving in
a single threaded environment and

90
00:04:16.740 --> 00:04:19.670
not block any further code running.

91
00:04:19.670 --> 00:04:23.092
People love, love, love this design
pattern of Node, its pride and

92
00:04:23.092 --> 00:04:23.802
joy feature.

93
00:04:23.802 --> 00:04:27.650
Along with the auto running stuff, this
is probably its most important feature.

94
00:04:27.650 --> 00:04:31.966
Okay, let's get using it now though
because we really got caught up there.

95
00:04:31.966 --> 00:04:35.485
That picture, I just don't think it's
a good move to spend the time on it.

96
00:04:35.485 --> 00:04:40.674
And I don't know, I felt like it
was a good decision at the time.

97
00:04:40.674 --> 00:04:43.728
&gt;&gt; Speaker 5: So
is this feature why Netflix uses Node?

98
00:04:43.728 --> 00:04:46.201
&gt;&gt; Will Sentance: Actually,
that's very interesting.

99
00:04:46.201 --> 00:04:52.526
Exactly how video is passed to
a client is also can be done,

100
00:04:52.526 --> 00:04:58.640
yes in chunks, and
you can certainly use Node for it.

101
00:04:58.640 --> 00:05:02.170
But when it comes to video servers,
people use very dedicated other

102
00:05:02.170 --> 00:05:05.510
specialized technology often
to handle serving a video.

103
00:05:05.510 --> 00:05:10.354
And when it comes to video streaming, that
is where your streaming messages video,

104
00:05:10.354 --> 00:05:13.506
between two users,
like we're sending a video chat.

105
00:05:13.506 --> 00:05:17.998
We don't even use the TCP,
which is the standard under

106
00:05:17.998 --> 00:05:22.003
the hood format of rules for
passing data back and

107
00:05:22.003 --> 00:05:27.120
forwards between a browser and
a server on which HTTP sits.

108
00:05:27.120 --> 00:05:30.310
We don't even use this
protocol called TCP at all.

109
00:05:30.310 --> 00:05:33.561
We use a totally different set of
rules for how you pass data back and

110
00:05:33.561 --> 00:05:35.781
forwards called UDP, which is more suited.

111
00:05:35.781 --> 00:05:39.915
Let's just do this bit and I might
tell you TCP versus UDP in a second.

112
00:05:39.915 --> 00:05:40.680
It's a good thing to know.

113
00:05:40.680 --> 00:05:41.700
But let's just do this for now.

