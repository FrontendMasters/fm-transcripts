WEBVTT

1
00:00:00.150 --> 00:00:01.400
&gt;&gt; Will Sentance: The event
loop is very strict.

2
00:00:01.400 --> 00:00:04.080
What rules does it set for
what code to run next and

3
00:00:04.080 --> 00:00:06.220
when those functions are allowed back in.

4
00:00:06.220 --> 00:00:07.950
Lets get started, line 1,

5
00:00:07.950 --> 00:00:11.780
Rumen what are we doing,
what are storing in our global memory.

6
00:00:11.780 --> 00:00:14.980
&gt;&gt; Roman: Declaring a function
that use imported tweet.

7
00:00:14.980 --> 00:00:22.477
&gt;&gt; Will Sentance: Yep use imported tweets,
inserting a function that use,

8
00:00:22.477 --> 00:00:31.020
imported tweets use imported
tweets there it is store function.

9
00:00:31.020 --> 00:00:34.730
Excellent thank you Roman next lines Zep.

10
00:00:34.730 --> 00:00:36.890
&gt;&gt; Zep: We store the function
definition immediately.

11
00:00:36.890 --> 00:00:40.838
&gt;&gt; Will Sentance: Yeah,
there it is immediately.

12
00:00:40.838 --> 00:00:45.630
Next line, Sam?

13
00:00:45.630 --> 00:00:48.220
&gt;&gt; Sam: Store the function
definition print hello.

14
00:00:48.220 --> 00:00:51.444
&gt;&gt; Will Sentance: Print hello, excellent.

15
00:00:51.444 --> 00:00:56.024
Next line, Virginia?

16
00:00:56.024 --> 00:00:59.700
&gt;&gt; Virginia: I just throw the function
definition black for 500 miliseconds.

17
00:00:59.700 --> 00:01:00.870
&gt;&gt; Will Sentance: Fantastic.

18
00:01:00.870 --> 00:01:01.862
Thank you to Virginia.

19
00:01:04.649 --> 00:01:05.660
&gt;&gt; Will Sentance: Perfect, four functions.

20
00:01:05.660 --> 00:01:09.180
You know we have to deal with
complexity when I have four functions,

21
00:01:09.180 --> 00:01:10.820
because I try and minimize this.

22
00:01:10.820 --> 00:01:13.096
Okay, now we get started.

23
00:01:14.384 --> 00:01:16.360
&gt;&gt; Will Sentance: Well, hold on.

24
00:01:16.360 --> 00:01:18.690
Set time out,
that sounds a lot like regular JavaScript.

25
00:01:18.690 --> 00:01:21.930
Nah, even in the web browser,
set timer is not JavaScript.

26
00:01:21.930 --> 00:01:24.100
There's no timers in JavaScript.

27
00:01:24.100 --> 00:01:28.810
In the web browser, it happens in the
background features of the web browser,

28
00:01:28.810 --> 00:01:30.330
known as browser APIs.

29
00:01:31.520 --> 00:01:34.530
In Node,
we had to rebuild those from scratch.

30
00:01:34.530 --> 00:01:37.590
And one of them is the ability
to set up a timer.

31
00:01:37.590 --> 00:01:42.310
Now, exactly how timers are run in
Node is using, well, what are timers?

32
00:01:42.310 --> 00:01:48.100
In general, timers are just
a time in the computer clock and

33
00:01:48.100 --> 00:01:53.270
comparing a future time for how many
milliseconds past to see whether or

34
00:01:53.270 --> 00:01:56.150
not it's gonna take the past around
the thing which you delete by assign.

35
00:01:56.150 --> 00:01:59.120
So would of call of the time nobody is
technically doing that in the background

36
00:01:59.120 --> 00:02:03.130
is setting of start time with that
function was which it set time out,

37
00:02:03.130 --> 00:02:04.370
set up the timer.

38
00:02:04.370 --> 00:02:08.840
In the background, and
then checking actually loop UV, and

39
00:02:08.840 --> 00:02:13.810
actually technically it's the event loop
that checks every time, has that timer and

40
00:02:13.810 --> 00:02:17.600
not part time pass such that
timer would want to run.

41
00:02:17.600 --> 00:02:21.500
Sorry that timer is complete and
the associated function wants to run.

42
00:02:21.500 --> 00:02:26.480
So set time out, takes in a function that
you wanna delay, x number of milliseconds.

43
00:02:26.480 --> 00:02:29.190
How many here zero milliseconds.

44
00:02:29.190 --> 00:02:31.870
Is that happening in JavaScript?

45
00:02:31.870 --> 00:02:36.990
No, so let's get going set, time out,

46
00:02:36.990 --> 00:02:41.270
it's happening in the purple
area known as Node.

47
00:02:43.520 --> 00:02:48.650
Set time out passes first,
inputs the first argument of set time.

48
00:02:48.650 --> 00:02:49.150
Said time out.

49
00:02:49.150 --> 00:02:53.240
By the way we find the docs of
it on the node docs is a noted

50
00:02:53.240 --> 00:02:57.080
feature built in C++ with the help of LUV.

51
00:02:57.080 --> 00:03:01.030
Okay, so the second arguably policies
number of milliseconds want a delay.

52
00:03:01.030 --> 00:03:04.726
Where did you say Zep,
set time it's gonna have its consequence.

53
00:03:04.726 --> 00:03:06.021
&gt;&gt; Zep: In node.
&gt;&gt; Will Sentance: In node, so

54
00:03:06.021 --> 00:03:07.640
set up in node.

55
00:03:08.790 --> 00:03:15.250
A timer with that function and that amount
of milliseconds delayed, there it is,

56
00:03:15.250 --> 00:03:21.180
timer and zero millisecond delay.

57
00:03:21.180 --> 00:03:23.535
And what function to auto
run when it's done, is it?

58
00:03:23.535 --> 00:03:24.380
&gt;&gt; Zep: [INAUDIBLE]

59
00:03:24.380 --> 00:03:28.290
&gt;&gt; Will Sentance: Print
&gt;&gt; Zep: Hello?

60
00:03:28.290 --> 00:03:31.420
&gt;&gt; Will Sentance: Hello yes
good it took us six hours for

61
00:03:31.420 --> 00:03:35.164
a British impression to happen,
excellent thank you.

62
00:03:35.164 --> 00:03:41.600
All right now the function, I got
a new little piece here called status.

63
00:03:42.780 --> 00:03:49.770
Status is if at this moment,
is their activity or has it finish so zero

64
00:03:49.770 --> 00:03:53.620
let's say we are setting this as a roughly
zero millisecond, at zero millisecond.

65
00:03:56.400 --> 00:04:00.150
Zero millisecond is this timer completes,

66
00:04:00.150 --> 00:04:02.820
so zero millisecond
timer it's you complete.

67
00:04:02.820 --> 00:04:04.160
&gt;&gt; Sam: Yes.
&gt;&gt; Will Sentance: Yeah.

68
00:04:04.160 --> 00:04:06.139
So what's gonna be triggered to run?

69
00:04:06.139 --> 00:04:06.905
&gt;&gt; Sam: Print hello.

70
00:04:06.905 --> 00:04:09.850
&gt;&gt; Will Sentance: Print hello, do you
think it's gonna be out on the cool stock?

71
00:04:09.850 --> 00:04:12.610
Seems reasonable, do you think it is, no.

72
00:04:13.890 --> 00:04:17.010
Anything, don't say of course not

73
00:04:18.630 --> 00:04:22.440
except obviously border line rational,
and nah, it's not.

74
00:04:22.440 --> 00:04:25.420
You want a really strict rule,
you want a really strict rule.

75
00:04:25.420 --> 00:04:30.690
Anything that's being passed into Node Any
function that's been set to also run,

76
00:04:30.690 --> 00:04:33.350
not by us, we're not running it right?

77
00:04:33.350 --> 00:04:38.200
We're relying on node to run it and
put it into JavaScript again,

78
00:04:38.200 --> 00:04:43.260
that stuff all gets priority after
all regular Java code is run.

79
00:04:44.620 --> 00:04:48.370
So where instead, it doesn't just sit
there though, where instead does it go?

80
00:04:48.370 --> 00:04:51.396
It goes to our first queue.

81
00:04:51.396 --> 00:04:55.326
The timer queue.

82
00:04:55.326 --> 00:05:01.120
Interesting, goes into our
first queue the timer queue.

83
00:05:01.120 --> 00:05:07.910
And at zero milliseconds roughly,
&gt;&gt; Will Sentance: We get the function.

84
00:05:09.360 --> 00:05:13.680
Print hello into the timer queue.

85
00:05:15.400 --> 00:05:19.350
So all the set timeout ever does
is tell you the time it will take

86
00:05:19.350 --> 00:05:24.220
before the function gets put in the queue,
not when it's gonna get run.

87
00:05:24.220 --> 00:05:26.950
Cuz I have a strong feeling there's
a bunch of other stuff that's gonna get

88
00:05:26.950 --> 00:05:28.165
priority before this function.

89
00:05:28.165 --> 00:05:33.166
Ever a lot of time in queue to execute in
JavaScript, it's gonna sit there, okay.

90
00:05:35.459 --> 00:05:38.020
&gt;&gt; Will Sentance: Good, we don't
really set ourselves up for that nice.

91
00:05:38.020 --> 00:05:44.310
Next one we're back into our good
old familiar node built-ins.

92
00:05:44.310 --> 00:05:49.340
Now, technically of course we have to add
in FS using require that we'll grab and

93
00:05:49.340 --> 00:05:53.190
give us the access to nodes FS
feature where we're gonna use it.

94
00:05:53.190 --> 00:05:53.920
So here we go.

95
00:05:55.640 --> 00:05:58.170
I'm just using these
numbers here as ordinal.

96
00:05:58.170 --> 00:05:59.330
That means the order that matters.

97
00:05:59.330 --> 00:06:01.040
It's definitely not a millisecond later.

98
00:06:01.040 --> 00:06:02.480
You've got a nanosecond later.

99
00:06:02.480 --> 00:06:06.930
But I just want to show you time
progressing one millisecond later.

100
00:06:06.930 --> 00:06:12.930
We're going to run fs.readfile and
pass it.

101
00:06:14.480 --> 00:06:18.380
The two important things we need to
know where the file is known as a path.

102
00:06:19.800 --> 00:06:26.390
And what function to auto run,
there' a call back function,

103
00:06:26.390 --> 00:06:30.915
what function we want to have
node automatically run for us.

104
00:06:30.915 --> 00:06:33.870
Fs.readfile.

105
00:06:33.870 --> 00:06:36.824
What does it do in Note?

106
00:06:36.824 --> 00:06:39.489
Michael.

107
00:06:39.489 --> 00:06:44.290
Sets up an instance of
the FS feature of Note.

108
00:06:44.290 --> 00:06:46.270
&gt;&gt; Michael: Yes,
to access the file system.

109
00:06:46.270 --> 00:06:49.580
&gt;&gt; Will Sentance: Absolutely,
with the help of LibUV, and

110
00:06:49.580 --> 00:06:54.600
actually sending a background thread
to handle the passing of the data and

111
00:06:54.600 --> 00:06:56.050
focus on the data coming in.

112
00:06:57.310 --> 00:07:02.290
Yeah, it needs to know what path from a
dot means the current folder in which her

113
00:07:02.290 --> 00:07:06.260
running Node,we always had to
run node in an existing folder.

114
00:07:06.260 --> 00:07:08.120
We run it in the same
folder as we say the tweet.

115
00:07:08.120 --> 00:07:11.180
So dot means that slash
means do in this folder.

116
00:07:11.180 --> 00:07:13.070
Go and find tweet stop.

117
00:07:14.830 --> 00:07:15.330
Jason.

118
00:07:16.470 --> 00:07:20.790
Okay, at one millisecond Is it done.

119
00:07:20.790 --> 00:07:23.420
Now it's going to take a few
milliseconds to get that data out.

120
00:07:23.420 --> 00:07:24.390
So it's not done right now.

121
00:07:25.450 --> 00:07:31.550
But when it is done,
what function is going to auto run Andrew?

122
00:07:31.550 --> 00:07:32.630
&gt;&gt; Andrew: Using party tweets.

123
00:07:32.630 --> 00:07:33.480
&gt;&gt; Will Sentance: Fantastic.

124
00:07:33.480 --> 00:07:34.820
Exactly.

125
00:07:34.820 --> 00:07:39.030
We know the URL and
we know the function is going to auto run.

126
00:07:39.030 --> 00:07:44.390
It's gonna run US imported tweets.

127
00:07:46.070 --> 00:07:46.660
There it is.

128
00:07:47.860 --> 00:07:49.706
I'm just gonna separate this out so
it's clear.

129
00:07:51.776 --> 00:07:52.280
&gt;&gt; Will Sentance: Here we go.

130
00:07:52.280 --> 00:07:55.880
So, we are now using the FS feature and
the timer feature in the background.

131
00:07:55.880 --> 00:08:00.000
Two auto run functions set up and
ready to go already.

132
00:08:03.000 --> 00:08:08.450
Okay, the data is gonna
start coming through

133
00:08:08.450 --> 00:08:11.160
the background thread's handling
the data assigned to come through, but

134
00:08:11.160 --> 00:08:13.210
at one millisecond,
it's definitely not ready.

135
00:08:13.210 --> 00:08:14.640
We definitely have the tweets ready to go.

136
00:08:14.640 --> 00:08:18.536
We're definitely not auto-triggering
using for the tweets, not yet.

137
00:08:18.536 --> 00:08:23.780
In JavaScript, we now hit our,
did I miss anything there, by the way?

138
00:08:23.780 --> 00:08:24.610
I don't think I did, yeah.

139
00:08:24.610 --> 00:08:25.527
In JavaScript,

140
00:08:25.527 --> 00:08:29.070
we now hit at two milliseconds
again roughly two milliseconds.

141
00:08:29.070 --> 00:08:33.920
This is not in nanoseconds, it's much much
faster but just for our symbolic purposes,

142
00:08:33.920 --> 00:08:38.680
we are going to hit cooling block for
five hundred milliseconds.

143
00:08:41.700 --> 00:08:43.970
Lock for 500 milliseconds.

144
00:08:43.970 --> 00:08:46.180
We're not going to describe how it works.

145
00:08:46.180 --> 00:08:51.150
We just know that as the thread enters it,
it gets added to what?

146
00:08:51.150 --> 00:08:51.998
Sam?
&gt;&gt; Sam: Cool stack.

147
00:08:51.998 --> 00:08:55.163
&gt;&gt; Will Sentance: Cool stack,
whose side is pushed to the cool stack.

148
00:08:55.163 --> 00:09:02.070
Cool for 500 milliseconds, my energy so
hit I was it wasn't a question.

149
00:09:02.070 --> 00:09:03.470
It was me trying to convince myself.

150
00:09:03.470 --> 00:09:05.225
Why are you still here?

151
00:09:05.225 --> 00:09:07.868
&gt;&gt; Speaker 8: [LAUGH]
&gt;&gt; Will Sentance: I'm getting similar

152
00:09:07.868 --> 00:09:10.951
questions but, okay, good, I like it,
that's actually very inspiring to me,

153
00:09:10.951 --> 00:09:12.090
thank you, Michael.

154
00:09:12.090 --> 00:09:18.220
There it is, I head into it, it's gonna
sit, therefore last 500 milliseconds, how?

155
00:09:18.220 --> 00:09:21.410
Not by setting up timers down here,
nothing to do with timers.

156
00:09:21.410 --> 00:09:23.420
That's on in the background, it's right.

157
00:09:23.420 --> 00:09:24.620
How did I come up with
this foreign minister.

158
00:09:24.620 --> 00:09:27.450
I tested it out is roughly adding
five million elements to an array.

159
00:09:27.450 --> 00:09:29.970
And the only way you can make
something take long in JavaScript is

160
00:09:29.970 --> 00:09:32.360
jobs will let you do stuff
it takes a long time

161
00:09:32.360 --> 00:09:35.115
because it would be really be it
nobody's gonna block any further code.

162
00:09:35.115 --> 00:09:41.090
So any long term titles, it slowed like a
timer is auto delegated to the background.

163
00:09:41.090 --> 00:09:42.820
The only way to trick it
into taking a long time or

164
00:09:42.820 --> 00:09:47.270
blocking the thread from running
further is to do a task like, lots,

165
00:09:49.750 --> 00:09:54.150
lots of tiny tasks like accessing
an array, adding an element.

166
00:09:54.150 --> 00:09:59.460
Try to give the awesome ways to do
stuff and block it in the thread here.

167
00:09:59.460 --> 00:10:00.120
Like the sink.

168
00:10:00.120 --> 00:10:03.150
He saw the reed fall sink that
you will use in the challenge.

169
00:10:03.150 --> 00:10:06.390
That was actually setting up
the file system access here and

170
00:10:06.390 --> 00:10:09.750
waiting in JavaScript until the data
came back and assign it in JavaScript.

171
00:10:09.750 --> 00:10:13.940
But that was absolutely unused
in practice we do not block.

172
00:10:13.940 --> 00:10:17.630
The only way we can do it typically is
by doing something silly like a very big

173
00:10:17.630 --> 00:10:18.170
or silly.

174
00:10:18.170 --> 00:10:21.140
But you know like finding
an enterprise number or.

175
00:10:21.140 --> 00:10:22.987
That would block and
that's what we're doing.

