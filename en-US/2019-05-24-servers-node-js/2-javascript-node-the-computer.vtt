WEBVTT

1
00:00:00.120 --> 00:00:05.270
&gt;&gt; Will Sentance: Sarah Rose's Mac,
Sarah Rose's Mac opens,

2
00:00:05.270 --> 00:00:08.590
what she open twitter.com/node,
by the way people,

3
00:00:08.590 --> 00:00:13.380
I literally searched for
a nice screenshot of tweets.

4
00:00:13.380 --> 00:00:15.450
So I thought there's something clean and

5
00:00:15.450 --> 00:00:19.130
nice like node and
twitter is a horrible place.

6
00:00:19.130 --> 00:00:24.075
Then both voted tweet on there was,
if you don't like node, die.

7
00:00:24.075 --> 00:00:25.880
&gt;&gt; Speaker 2: [LAUGH]
&gt;&gt; Will Sentance: So

8
00:00:25.880 --> 00:00:27.700
I couldn't do a screenshot,
so we have to just imagine.

9
00:00:30.010 --> 00:00:33.993
That was the most upvoted tweet,
300 likes, if you don't like node,

10
00:00:33.993 --> 00:00:36.320
you're gonna die or something like that.

11
00:00:36.320 --> 00:00:38.710
What is this place?

12
00:00:38.710 --> 00:00:42.140
Anyway, all right, so
Sara Rose, Mac, Mac, okay.

13
00:00:42.140 --> 00:00:45.135
So let's start now doing the colors,
cuz we're going to keep track.

14
00:00:45.135 --> 00:00:53.890
Of, we're gonna keep trying of each of
these things by using different colors.

15
00:00:53.890 --> 00:00:59.180
Let's have,
node is green isn't it everybody?

16
00:01:02.180 --> 00:01:03.150
Let's do green, okay.

17
00:01:04.950 --> 00:01:09.470
Okay, and then we'll use black for
JavaScript and

18
00:01:09.470 --> 00:01:12.850
we're gonna use blue for
our computers internal.

19
00:01:12.850 --> 00:01:17.400
So okay, Sarah Roses, Mac sends off
an internet message it lands at?

20
00:01:20.520 --> 00:01:27.418
It lands at Twitters, computer Twitter's,
yeah, Twitters computer.

21
00:01:29.265 --> 00:01:31.940
&gt;&gt; Will Sentance: There it is,
okay, it lands here.

22
00:01:32.980 --> 00:01:38.170
Up here, folk,
is where we're going to run or

23
00:01:38.170 --> 00:01:42.230
write the JavaScript
code that we're running.

24
00:01:42.230 --> 00:01:46.730
But her inbound message definitely
does not arrive in JavaScript.

25
00:01:46.730 --> 00:01:49.090
Remind me again, Zeb, where it arrives?

26
00:01:49.090 --> 00:01:50.720
&gt;&gt; Speaker 3: Where does it arrive,
the inbound message?

27
00:01:50.720 --> 00:01:51.404
&gt;&gt; Will Sentance: Yeah.

28
00:01:51.404 --> 00:01:52.411
&gt;&gt; Speaker 3: Into a node.

29
00:01:52.411 --> 00:01:52.975
&gt;&gt; Will Sentance: No, no.

30
00:01:52.975 --> 00:01:53.637
&gt;&gt; Speaker 3: [CROSSTALK] network.

31
00:01:53.637 --> 00:01:56.360
&gt;&gt; Will Sentance: Into the network card,
effectively, right?

32
00:01:56.360 --> 00:02:04.700
So here is gonna be our computer
internals, or internal features.

33
00:02:05.770 --> 00:02:11.130
And this, folk,
this is where our inbound message arrives.

34
00:02:11.130 --> 00:02:16.250
It's got all the data we need to
be able to send back to say Rose,

35
00:02:16.250 --> 00:02:17.880
the exact tweet she needs.

36
00:02:17.880 --> 00:02:24.200
But here's a problem [SOUND] we want to
write JavaScript code to access it because

37
00:02:24.200 --> 00:02:30.345
we unfortunately didn't learn C++,
no, exactly, we don't use C++.

38
00:02:30.345 --> 00:02:32.219
So what are we gonna do?

39
00:02:32.219 --> 00:02:33.029
Your name was, man?

40
00:02:35.658 --> 00:02:37.211
&gt;&gt; Charlie: Charlie.

41
00:02:37.211 --> 00:02:39.990
&gt;&gt; Will Sentance: Charlie,
how am I going to get access?

42
00:02:39.990 --> 00:02:40.690
Am I gonna try and

43
00:02:40.690 --> 00:02:44.510
write JavaScript codes directly interact
with these computer internal features?

44
00:02:44.510 --> 00:02:46.140
No, what am I gonna do instead?

45
00:02:46.140 --> 00:02:47.580
&gt;&gt; Charlie: You'll need to
go through some C++ code.

46
00:02:48.670 --> 00:02:51.586
&gt;&gt; Will Sentance: Absolutely spot on,
I'm gonna have node,

47
00:02:51.586 --> 00:02:56.845
very light green,

48
00:02:56.845 --> 00:03:02.116
here we go, node C++ built

49
00:03:02.116 --> 00:03:07.720
features, there they are, and
we're not going to try and

50
00:03:07.720 --> 00:03:13.330
access .The computers internal
like its network feature,

51
00:03:13.330 --> 00:03:17.790
lets have its network feature there,
its networking.

52
00:03:17.790 --> 00:03:22.510
We're not gonna try and
access those directly from JavaScript,

53
00:03:22.510 --> 00:03:27.910
we're gonna access them
indirectly by using labels.

54
00:03:27.910 --> 00:03:33.464
In JavaScript, they'll look like
JavaScript functions if for

55
00:03:33.464 --> 00:03:37.150
reality commands to nodes C++ features.

56
00:03:37.150 --> 00:03:41.020
I would say this node, some of this
stuff is done in JavaScript as well but

57
00:03:41.020 --> 00:03:44.520
they're both the interface with
the confusing titles in the C++.

58
00:03:44.520 --> 00:03:49.490
And from that, we will then effect and
grab the message and pass it up.

59
00:03:49.490 --> 00:03:54.150
Now this may seem like a crowded one as
on the Java Script old people the vast

60
00:03:54.150 --> 00:04:00.490
majority of the interesting stuff of nodes
hard work is all happening down here.

61
00:04:00.490 --> 00:04:05.170
So we better understand this
intimately but also unfortunately.

62
00:04:05.170 --> 00:04:07.600
Well he's better understand how
his work minutes on the code but

63
00:04:07.600 --> 00:04:08.509
know how it's working.

64
00:04:09.926 --> 00:04:13.380
Me maybe how to understand a bit about
what's going on here what is a socket for

65
00:04:13.380 --> 00:04:20.362
example, but we also better understand
how this language is working.

66
00:04:20.362 --> 00:04:26.185
All right people so on that note
here we go this is reiterate this

67
00:04:26.185 --> 00:04:29.900
c++ many features that let it directly
interact with the operating system.

68
00:04:29.900 --> 00:04:32.880
That's what you call the computer's
internals, directly.

69
00:04:32.880 --> 00:04:36.925
JavaScript doesn't,
by the way, just to be clear,

70
00:04:36.925 --> 00:04:41.960
C++ isn't gonna go sit on the network
card itself, it's gonna interact with

71
00:04:41.960 --> 00:04:45.936
abstraction layers of
the operating system as well.

72
00:04:45.936 --> 00:04:51.830
Things like you will learn all about this
other stuff a little bit later on but

73
00:04:51.830 --> 00:04:56.220
hold that thought for
now what is a combination known as nodejs.

74
00:04:56.220 --> 00:04:59.750
I know it should be called
node js C C++ it for

75
00:04:59.750 --> 00:05:03.090
real it should be it
should be acknowledging.

76
00:05:03.090 --> 00:05:07.140
All the hard work here done by C++ and
not by JavaScript.

77
00:05:07.140 --> 00:05:10.600
JavaScript controls node C++ features
controls computer features, okay.

78
00:05:10.600 --> 00:05:12.470
Got it, good, rewind.

79
00:05:12.470 --> 00:05:15.930
We had better understand
JavaScript's execution model

80
00:05:15.930 --> 00:05:18.050
if we're then gonna understand node.

81
00:05:18.050 --> 00:05:20.550
It's a language that does three things.

82
00:05:20.550 --> 00:05:23.540
I mean, it does more things but
three main things.

83
00:05:23.540 --> 00:05:25.560
And one of them isn't
even much in JavaScript,

84
00:05:25.560 --> 00:05:30.510
it's mostly using,
mostly involves a lot of help from C++.

85
00:05:30.510 --> 00:05:35.760
One, it saves data, numbers,

86
00:05:35.760 --> 00:05:40.670
strings, arrays, objects,
and functionality.

87
00:05:40.670 --> 00:05:42.660
That code is gonna be run later on.

88
00:05:42.660 --> 00:05:47.620
Two it uses that data by
running functionality

89
00:05:47.620 --> 00:05:50.750
saved code has not been used yet,
but he's later on it.

90
00:05:50.750 --> 00:05:55.829
And then three has a ton of
built-in labels that are gonna

91
00:05:55.829 --> 00:06:01.670
trigger node features that are built
in C++ to use our computers internals.

92
00:06:01.670 --> 00:06:04.990
But let's see these first two in action.

93
00:06:04.990 --> 00:06:10.210
The first two things that JavaScript
does by itself, independent of node,

94
00:06:10.210 --> 00:06:12.270
saving using data.

95
00:06:12.270 --> 00:06:15.470
Let's see the two things that
JavaScript does by itself,

96
00:06:15.470 --> 00:06:19.010
without the help of node background C++
features, so we're not doing that yet.

97
00:06:19.010 --> 00:06:22.900
Because we'd better understand this
JavaScript language really intimately.

98
00:06:22.900 --> 00:06:27.648
If we are gonna know how it's gonna
interact with this feature down here then

99
00:06:27.648 --> 00:06:29.065
I would C++ we just.

