WEBVTT

1
00:00:00.000 --> 00:00:02.670
&gt;&gt; Will Sentance: I want to introduce
you to something while I can,

2
00:00:02.670 --> 00:00:03.980
called the CallStack.

3
00:00:03.980 --> 00:00:07.364
So if you've watched you
know what a Call Stack is.

4
00:00:07.364 --> 00:00:11.643
But I want to introduce it to you right
now because we're gonna see it in action.

5
00:00:11.643 --> 00:00:17.230
The Call Stack is JavaScript's way,
it's another word which you pronounce two

6
00:00:17.230 --> 00:00:22.912
words spelled differently the same
way in England, C-O-O-L and C-A-L-L.

7
00:00:22.912 --> 00:00:28.183
The Call Stack is JavaScript's
behind the scenes way

8
00:00:28.183 --> 00:00:33.346
of tracking what line of
code is currently running.

9
00:00:33.346 --> 00:00:35.035
Whatever's top of the Call Stack,

10
00:00:35.035 --> 00:00:38.764
whatever function is top of the Call Stack
is the function currently running.

11
00:00:38.764 --> 00:00:43.341
There’s always something on it
because we consider the overall code,

12
00:00:43.341 --> 00:00:47.782
file of code, to be what is called
the global function effectively.

13
00:00:47.782 --> 00:00:52.632
It's like you’ve taken all the code,
wrapped it in a function called global and

14
00:00:52.632 --> 00:00:53.285
said run.

15
00:00:53.285 --> 00:00:58.036
And so always on there will be global.

16
00:00:58.036 --> 00:01:03.119
As soon as the function starts running,
it's gonna be added on top and

17
00:01:03.119 --> 00:01:08.997
it's gonna now be the top of the Call
Stack and it's what's currently running.

18
00:01:08.997 --> 00:01:12.147
Whatever's top of the call stack is
the function that we're currently running.

19
00:01:12.147 --> 00:01:17.307
When we finish running that function,
it'll be removed from the top of

20
00:01:17.307 --> 00:01:22.728
the Call Stack, a stack is a way of
storing data in a computer like an array.

21
00:01:22.728 --> 00:01:23.939
It has certain properties,

22
00:01:23.939 --> 00:01:26.869
the most important one is all you
really care about is what's on top.

23
00:01:26.869 --> 00:01:28.330
When you take the thing off the top,

24
00:01:28.330 --> 00:01:31.225
all you really care about is that
what was there before is still there.

25
00:01:31.225 --> 00:01:33.563
So when I finish running this function,
I remove it, delete it,

26
00:01:33.563 --> 00:01:35.832
I better be back where I was when
I started to run that function.

27
00:01:35.832 --> 00:01:40.022
Which in this case is gonna be back in
global, because this function was auto-run

28
00:01:40.022 --> 00:01:42.526
permanently in global
we're always in global.

29
00:01:42.526 --> 00:01:44.345
It wasn't run inside anything else.

30
00:01:44.345 --> 00:01:49.073
Inside of here, if we run a function
inside of here, which I have a feeling

31
00:01:49.073 --> 00:01:54.206
we're going to do cleanTweets pass data,
that's gonna be added on top again.

32
00:01:54.206 --> 00:01:57.243
So this is a good time to introduce
the Call Stack and its structure.

33
00:01:57.243 --> 00:02:01.161
So use imported tweets is on
top of the Call Stack and

34
00:02:01.161 --> 00:02:06.102
I can use purple to show that this
is an auto run function by Node.

35
00:02:06.102 --> 00:02:07.828
There we go in we go to it.

36
00:02:07.828 --> 00:02:09.810
Now let's get running its code.

37
00:02:09.810 --> 00:02:12.310
First thing it says to
do inside Sarah Rose.

38
00:02:12.310 --> 00:02:16.109
Let us handle our inputs first,
our parameters.

39
00:02:16.109 --> 00:02:19.005
We've sort of already handled
them in the actual parentheses.

40
00:02:19.005 --> 00:02:20.855
But let's put them in the local memory.

41
00:02:20.855 --> 00:02:24.723
What's our first parameter,
Sarah Rose, of useImportantTweets,

42
00:02:24.723 --> 00:02:27.803
which has been auto-called
because we told Node to do so

43
00:02:27.803 --> 00:02:30.770
when the tweets eventually
came in go ahead servers?

44
00:02:30.770 --> 00:02:31.892
&gt;&gt; Sarah Rose: The parameter
is error data.

45
00:02:31.892 --> 00:02:34.949
&gt;&gt; Will Sentance: Error data,
excellent, and its value is?

46
00:02:34.949 --> 00:02:36.118
&gt;&gt; Sarah Rose: Null.

47
00:02:36.118 --> 00:02:37.588
&gt;&gt; Will Sentance: Null,
which is still data, but

48
00:02:37.588 --> 00:02:39.989
it's like data telling us
there's nothing there.

49
00:02:39.989 --> 00:02:41.086
Excellent, thank you Sarah Rose.

50
00:02:41.086 --> 00:02:44.486
And now the next parameter is what,
Baveet?

51
00:02:44.486 --> 00:02:45.638
&gt;&gt; Baveet: Data.

52
00:02:45.638 --> 00:02:47.836
&gt;&gt; Will Sentance: Data, and its value is?

53
00:02:47.836 --> 00:02:50.661
&gt;&gt; Baveet: The imported tweets.

54
00:02:50.661 --> 00:02:53.703
&gt;&gt; Will Sentance: The imported,
excellent, exactly.

55
00:02:53.703 --> 00:02:57.605
In the string of five versions,
here they are, Tweet 1.

56
00:02:57.605 --> 00:03:03.455
You've got to do, that's so annoying,
tweet one, hi, or whatever it was, hello.

57
00:03:03.455 --> 00:03:08.278
Hello and so forth 1.5 billion characters.

58
00:03:08.278 --> 00:03:13.223
Okay, took us by the way 15 seconds to get
this function to run, it took so long,

59
00:03:13.223 --> 00:03:15.244
that's like forever in coding.

60
00:03:15.244 --> 00:03:16.448
Just imagine sitting at your computer and
waiting that long. Even we know

61
00:03:16.448 --> 00:03:20.205
as humans that's evil, for
a computer is a waste of time that

62
00:03:20.205 --> 00:03:23.830
could be spent on other things
at the same time, perhaps.

63
00:03:23.830 --> 00:03:25.178
But hold that thought.

64
00:03:25.178 --> 00:03:28.350
Okay, now next line, the first line,
the body of the function, Rich,

65
00:03:28.350 --> 00:03:30.433
the body of the function,
the first line says?

66
00:03:30.433 --> 00:03:34.449
&gt;&gt; Rich: To define a constant
called cleanTweetsJson.

67
00:03:34.449 --> 00:03:41.056
&gt;&gt; Will Sentance: cleanTweetsJson,
still in JSON format, okay, great.

68
00:03:41.056 --> 00:03:44.300
And, do we know what to store in it yet?

69
00:03:44.300 --> 00:03:48.882
No, the right hand side there
is a command to go and run.

70
00:03:48.882 --> 00:03:50.322
That was my, answer is no voice.

71
00:03:50.322 --> 00:03:51.784
Do we you know what to store in it yet?

72
00:03:51.784 --> 00:03:52.449
&gt;&gt; [INAUDIBLE].

73
00:03:52.449 --> 00:03:55.794
&gt;&gt; Will Sentance: We don't because
the right hand side is command to go and

74
00:03:55.794 --> 00:03:56.800
run a function.

75
00:03:56.800 --> 00:03:59.702
What symbols, and by the way we're in
charge running this function for once.

76
00:03:59.702 --> 00:04:02.007
We wrote the code to
say run this function,

77
00:04:02.007 --> 00:04:04.323
Do you see we put the parens
on the end of it?

78
00:04:04.323 --> 00:04:05.043
So let's do it.

79
00:04:05.043 --> 00:04:07.101
And the function we're running is what,
Zep?

80
00:04:07.101 --> 00:04:08.441
&gt;&gt; Zep: cleanTweets
&gt;&gt; Will Sentance: cleanTweets,

81
00:04:08.441 --> 00:04:11.512
okay, and what are we gonna do
if a function is running inside

82
00:04:11.512 --> 00:04:15.019
of useImportedTweets what's gonna
happen to our Call Stack, Sam?

83
00:04:15.019 --> 00:04:16.800
&gt;&gt; Sam: Gets pushed to the top.

84
00:04:16.800 --> 00:04:21.102
&gt;&gt; Will Sentance: Fantastic, the push word
is pushed, it gets pushed to the top of

85
00:04:21.102 --> 00:04:26.699
the Call Stack, so JavaScript always knows
exactly where we are any given moment.

86
00:04:26.699 --> 00:04:28.511
And when we finish in that function,
where to go back to.

87
00:04:28.511 --> 00:04:30.330
It's way of controlling what's running.

88
00:04:30.330 --> 00:04:36.976
All right, good, run cleanTweets,
and pass it this stringified version

89
00:04:36.976 --> 00:04:42.049
of a JavaScript object which
is what data format, Matt?

90
00:04:42.049 --> 00:04:42.984
&gt;&gt; Matt: JSON.

91
00:04:42.984 --> 00:04:44.510
&gt;&gt; Will Sentance: Thank you,
Matt, exactly.

92
00:04:44.510 --> 00:04:48.818
And in it goes, in goes the data, okay.

93
00:04:48.818 --> 00:04:55.144
The output of it is stored
in cleanTweets.json,

94
00:04:55.144 --> 00:05:01.619
and so now we passed it,
we removed any mean words,

95
00:05:01.619 --> 00:05:07.793
tweet one became Hello,
that was already nice,

96
00:05:07.793 --> 00:05:13.076
but tweet two just became the string you.

97
00:05:17.611 --> 00:05:20.940
&gt;&gt; Will Sentance: Who knows what
else it might have said, but I feel.

98
00:05:20.940 --> 00:05:25.080
It was initially a 17 word tweet,
no, okay, all right.

99
00:05:25.080 --> 00:05:30.540
Out it came, now we need to fiddle with
that because that's just a string,

100
00:05:30.540 --> 00:05:32.371
it looks like an object.

101
00:05:32.371 --> 00:05:36.221
It isn't, It's a string of characters,
but one that with the path function,

102
00:05:36.221 --> 00:05:37.083
the json.path,

103
00:05:37.083 --> 00:05:40.474
built into JavaScript function can
take that string of characters and

104
00:05:40.474 --> 00:05:43.827
in one go turn it into a nicely
formatted object that we can work with.

105
00:05:43.827 --> 00:05:45.939
And that's I think what we're
gonna do in the very next line.

106
00:05:45.939 --> 00:05:47.153
So we declare.

107
00:05:47.153 --> 00:05:51.752
Sorry everyone, there was an execution
context here, wasn't there?

108
00:05:51.752 --> 00:05:52.743
And we exited out of it.

109
00:05:52.743 --> 00:05:55.622
That's what was running,
it was execution context.

110
00:05:55.622 --> 00:05:58.284
I didn't show the insides of it because we
didn't really declare how it's gonna work.

111
00:05:58.284 --> 00:06:01.938
We just know it returned out
data cleaned of the nasty words.

112
00:06:01.938 --> 00:06:06.318
We don't know how it worked, we just know
that it ran, took in that string of words

113
00:06:06.318 --> 00:06:11.094
and looked for any bad words and deleted
them, removed them, 1.5 gigabytes of them.

114
00:06:11.094 --> 00:06:17.151
That took a bunch of time as well
honestly, I don't know how long but

115
00:06:17.151 --> 00:06:21.948
let's say like ten seconds
in its own right perhaps.

116
00:06:21.948 --> 00:06:25.382
Like a bunch of time to go through
all that data and pass it out.

117
00:06:25.382 --> 00:06:27.890
We've taken 25 seconds in total.

118
00:06:27.890 --> 00:06:29.329
&gt;&gt; Speaker 8: That's a lot.

119
00:06:29.329 --> 00:06:30.963
&gt;&gt; Will Sentance: That's a lot.

120
00:06:30.963 --> 00:06:35.553
Yeah, wow, exactly,
it's a lot of time to go and pass.

121
00:06:35.553 --> 00:06:39.624
Wouldn't it be cool, people, if we could,
I don't wanna give it away, but

122
00:06:39.624 --> 00:06:43.060
what if we could be pulling that data and
cleaning it at the same time?

123
00:06:43.060 --> 00:06:47.172
Given that we've got a thread running
the background pulling data in, and

124
00:06:47.172 --> 00:06:50.173
a thread running here that
can do stuff like cleaning,

125
00:06:50.173 --> 00:06:52.472
why couldn't we do this at the same time?

126
00:06:52.472 --> 00:06:57.960
We'll see on the next slide whether
there's a future for us doing this.

127
00:06:57.960 --> 00:07:03.819
All right, declare tweets object,
we popped cleanTweets off the Call Stack

128
00:07:03.819 --> 00:07:09.423
because we finished running it and
we returned out the clean tweets data.

129
00:07:09.423 --> 00:07:12.519
What's the next line say to do, Mohammed
help me out, on the left hand side first?

130
00:07:12.519 --> 00:07:15.507
&gt;&gt; Mohammed: Create a label
variable called tweetsObj.

131
00:07:15.507 --> 00:07:20.400
&gt;&gt; Will Sentance: Yeah,
constant tweetsObj, tweetsObj, and

132
00:07:20.400 --> 00:07:23.411
run on cleanTweets.json,

133
00:07:23.411 --> 00:07:28.807
the function json.pass
then will take this data,

134
00:07:28.807 --> 00:07:37.675
this is a built in to,
&gt;&gt; Will Sentance: JavaScript function.

135
00:07:37.675 --> 00:07:40.537
It's built into Javascript, you can go and
find on MDN to see how it works.

136
00:07:40.537 --> 00:07:44.586
And take the cleanTweets.json,
it's clean, but it's still JSON format.

137
00:07:44.586 --> 00:07:50.382
Take it and
return out this in object form,

138
00:07:50.382 --> 00:07:53.928
and store in where, Zep?

139
00:07:53.928 --> 00:07:55.979
&gt;&gt; Zep: In tweetsObj.

140
00:07:55.979 --> 00:07:57.380
&gt;&gt; Will Sentance: In tweetsObj.

141
00:07:57.380 --> 00:08:00.391
There it is, into tweetsObj.

142
00:08:00.391 --> 00:08:05.369
And that's now beautifully a full
formatted JSON object with tweet

143
00:08:05.369 --> 00:08:07.736
one is Hello, tweet two is you.

144
00:08:07.736 --> 00:08:12.936
Okay, and now, just to show

145
00:08:12.936 --> 00:08:18.785
that we have it, and can use it,

146
00:08:18.785 --> 00:08:24.648
let's just put in our console.

147
00:08:24.648 --> 00:08:28.681
What are we gonna log on our
console at this point, William?

148
00:08:28.681 --> 00:08:32.783
&gt;&gt; William: The tweet two from tweetsObj.

149
00:08:32.783 --> 00:08:33.811
&gt;&gt; Will Sentance: Which has what string?

150
00:08:33.811 --> 00:08:34.587
&gt;&gt; William: You.

151
00:08:34.587 --> 00:08:36.885
&gt;&gt; Will Sentance: It's you,
all right there it is.

152
00:08:36.885 --> 00:08:42.481
[SOUND] But look, by the way, how long it
took, it took 25 milliseconds to do that.

