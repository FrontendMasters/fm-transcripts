WEBVTT

1
00:00:00.067 --> 00:00:01.880
&gt;&gt; Jafar Husain: Just as
a little bit of help,

2
00:00:01.880 --> 00:00:04.459
I threw up our much simpler definition.

3
00:00:04.459 --> 00:00:08.389
Not too much simpler, a little bit
simpler definition for array here of map,

4
00:00:08.389 --> 00:00:11.062
just to remind us all about
how map works on an array.

5
00:00:11.062 --> 00:00:14.194
So lets see if we can extrapolate
this understanding of

6
00:00:14.194 --> 00:00:17.747
how map works on an array, and
implement map for observable.

7
00:00:17.747 --> 00:00:20.109
It's a little bit trickier cuz
there's a little more going on, but

8
00:00:20.109 --> 00:00:21.073
it's the same basic idea.

9
00:00:21.073 --> 00:00:26.043
We want to take all the items in
the observable, apply a function to them,

10
00:00:26.043 --> 00:00:29.909
and then take their result and
pump it into our observer.

11
00:00:29.909 --> 00:00:33.723
So we're gonna create a new observable
that pulls all the items out of

12
00:00:33.723 --> 00:00:36.683
a source observable,
runs them through a function,

13
00:00:36.683 --> 00:00:40.326
and then pumps the result into
that new observable's observer.

14
00:00:40.326 --> 00:00:45.737
So how do we get data out
of the this observable?

15
00:00:45.737 --> 00:00:47.498
How do we get data out of any observable?

16
00:00:47.498 --> 00:00:49.719
&gt;&gt; Speaker 2: Subscribe
&gt;&gt; Jafar Husain: Subscribe, yeah.

17
00:00:54.458 --> 00:00:56.442
&gt;&gt; Jafar Husain: And what's gonna happen
when we get a value from the input

18
00:00:56.442 --> 00:00:56.946
observable?

19
00:00:56.946 --> 00:00:59.722
What are we gonna do with it?

20
00:01:02.471 --> 00:01:04.046
&gt;&gt; Speaker 2: Call next on the observer?

21
00:01:04.046 --> 00:01:06.193
&gt;&gt; Jafar Husain: Yeah,
call next on the observer, right.

22
00:01:09.987 --> 00:01:11.244
&gt;&gt; Speaker 2: And project the value.

23
00:01:11.244 --> 00:01:13.233
&gt;&gt; Jafar Husain: Right,
we don't wanna just take the value and

24
00:01:13.233 --> 00:01:16.353
then send it to the observer,
cuz the we haven't really done anything.

25
00:01:16.353 --> 00:01:18.245
We might as well not do a thing, right?

26
00:01:18.245 --> 00:01:20.374
First we wanna run it through
our projection function.

27
00:01:24.949 --> 00:01:27.746
&gt;&gt; Jafar Husain: Great,
that's all there is to it, or is it?

28
00:01:27.746 --> 00:01:28.674
Have we forgotten anything?

29
00:01:30.131 --> 00:01:31.735
&gt;&gt; Speaker 2: On subscribing?

30
00:01:31.735 --> 00:01:33.888
&gt;&gt; Jafar Husain: On subscribing, sorry?

31
00:01:33.888 --> 00:01:34.773
&gt;&gt; Speaker 2: Unsubscribing.

32
00:01:34.773 --> 00:01:36.135
&gt;&gt; Jafar Husain: Unsubscribing,
absolutely, right.

33
00:01:36.135 --> 00:01:37.873
We need to create an unsubcription.

34
00:01:41.284 --> 00:01:47.021
&gt;&gt; Jafar Husain: So just like before,
&gt;&gt; Jafar Husain: So

35
00:01:47.021 --> 00:01:51.582
how are we gonna unsubscribe
from this source observable?

36
00:01:51.582 --> 00:01:55.855
&gt;&gt; Speaker 2: Do we use the unsubscribe
that's taken from the first subscription?

37
00:01:55.855 --> 00:02:01.014
&gt;&gt; Jafar Husain: Right, we can grab
the subscription that comes out of this,

38
00:02:01.014 --> 00:02:03.960
out of subscribing to the source.

39
00:02:03.960 --> 00:02:09.558
And when inside of unsubscribe here,
we can call subscription done unsubscribe.

40
00:02:14.978 --> 00:02:16.719
&gt;&gt; Jafar Husain: Are we done?

41
00:02:16.719 --> 00:02:18.743
Is that it?

42
00:02:18.743 --> 00:02:20.199
&gt;&gt; Speaker 3: Error and
complete functions?

43
00:02:20.199 --> 00:02:22.057
&gt;&gt; Jafar Husain: Right,
if the source errors,

44
00:02:22.057 --> 00:02:24.851
we don't want to swallow that error,
right?

45
00:02:24.851 --> 00:02:28.011
If the source errors, they probably
wanna know about it down stream.

46
00:02:28.011 --> 00:02:29.999
Our observer probably wants
to know about it, so,

47
00:02:39.823 --> 00:02:40.834
&gt;&gt; Jafar Husain: Let's do that,

48
00:02:40.834 --> 00:02:42.641
let's be good citizens, and

49
00:02:42.641 --> 00:02:47.211
make sure we forward any error that
occurs in the source on to our observer.

50
00:02:47.211 --> 00:02:50.216
&gt;&gt; Speaker 2: Do we also want
to wrap the projection and try,

51
00:02:50.216 --> 00:02:51.923
just in case that throws?

52
00:02:51.923 --> 00:02:55.925
&gt;&gt; Jafar Husain: Good, so that's, you're
absolutely right, we do wanna do that.

53
00:02:55.925 --> 00:02:59.963
So one of the things I'm gonna be doing
with this observable implementation is I'm

54
00:02:59.963 --> 00:03:03.381
gonna be handwaving some of the error
conditions that we can run into.

55
00:03:03.381 --> 00:03:07.190
And that's explicitly to keep this
code simple, because the goal, so for

56
00:03:07.190 --> 00:03:11.609
this implementation, is to help you guys
understand how an observable really works.

57
00:03:11.609 --> 00:03:15.494
And in my experience, there's no better
way than actually implement in it, right?

58
00:03:15.494 --> 00:03:18.482
And understand the flow, what happens
when you subscribe to an observable.

59
00:03:18.482 --> 00:03:21.735
We'll watch that subscription go
all the way up to the source, and

60
00:03:21.735 --> 00:03:24.594
then we're gonna watch the nexts'
flow all the way down.

61
00:03:24.594 --> 00:03:26.268
And that's really the goal here, so

62
00:03:26.268 --> 00:03:29.842
I don't wanna necessarily do a fully
robust implementation of preservable.

63
00:03:29.842 --> 00:03:32.541
But to that point,
let's just talk about that a little bit.

64
00:03:32.541 --> 00:03:36.022
What we would wanna do in a robust
implementation of observable, and

65
00:03:36.022 --> 00:03:39.391
one that's truly complete we would
wanna do something like this.

66
00:03:39.391 --> 00:03:42.666
We'd want to account for
the possibility that it failed.

67
00:03:47.255 --> 00:03:49.934
&gt;&gt; Jafar Husain: All right, cuz this
projection function passed into us,

68
00:03:49.934 --> 00:03:53.771
could do something dumb, like a nullity
reference, and then we can have an error.

69
00:03:57.938 --> 00:03:58.921
&gt;&gt; Jafar Husain: Right, and then in here,

70
00:03:58.921 --> 00:04:03.364
we'd wanna call
&gt;&gt; Jafar Husain: Right,

71
00:04:03.364 --> 00:04:04.307
something like that.

72
00:04:04.307 --> 00:04:08.103
So I'm not gonna put that in here, we
wanna stop the observable, we wanna error.

73
00:04:08.103 --> 00:04:10.896
I'm not gonna put that in here cuz
it's gonna make the code a bit more

74
00:04:10.896 --> 00:04:12.378
complicated, you got a question?

75
00:04:12.378 --> 00:04:14.819
&gt;&gt; Speaker 2: Would we pass value or
would we pass e?

76
00:04:14.819 --> 00:04:17.628
&gt;&gt; Jafar Husain: I'm sorry,
we'd pass e, thank you.

77
00:04:17.628 --> 00:04:21.927
All right, so
that's what we're alluding to here.

78
00:04:21.927 --> 00:04:23.495
So this probably a more correct

79
00:04:23.495 --> 00:04:30.163
implementation,
&gt;&gt; Jafar Husain: But

80
00:04:30.163 --> 00:04:33.373
I'm gonna hand away that a little bit,
right?

81
00:04:35.557 --> 00:04:38.234
&gt;&gt; Jafar Husain: And the reason why I'm
gonna hand away this, the reason why it's

82
00:04:38.234 --> 00:04:41.508
a little more complex, is that we
wouldn't be done after we observer.error.

83
00:04:41.508 --> 00:04:45.619
We'd also have to unsubscribe,
and that gets a little bit more,

84
00:04:45.619 --> 00:04:49.902
to make sure that after we call there,
we don't send anymore data.

85
00:04:49.902 --> 00:04:53.658
Cuz remember how an observable works,
you can get next,

86
00:04:53.658 --> 00:04:56.407
zero to, well infinite number of times.

87
00:04:56.407 --> 00:05:01.644
But if that observable ends, it always
ends with either an error or a complete.

88
00:05:01.644 --> 00:05:04.191
And then after that,
you get no more notifications.

89
00:05:04.191 --> 00:05:09.989
So if there were some error inside of the
observable, we'd wanna send an on error.

90
00:05:09.989 --> 00:05:12.528
And then we'd also wanna
unsubscribe from the source,

91
00:05:12.528 --> 00:05:15.779
to make sure that the downstream
doesn't get any more notifications.

92
00:05:15.779 --> 00:05:17.540
Does that make sense?

93
00:05:17.540 --> 00:05:21.059
But I'm gonna leave that out here cuz it
gets a little bit more complicated trying

94
00:05:21.059 --> 00:05:23.557
to unsubscribe, but
well you know what, we can do this.

95
00:05:23.557 --> 00:05:25.682
This is still not completely correct, but

96
00:05:25.682 --> 00:05:28.051
this is something like
what it would look like.

97
00:05:30.129 --> 00:05:31.124
&gt;&gt; Jafar Husain: Does that make sense?

98
00:05:31.124 --> 00:05:34.179
Let's take a quick look at that
understand what's going on there.

99
00:05:34.179 --> 00:05:38.158
Now, there is a reason why this is not
actually necessarily gonna work 100% of

100
00:05:38.158 --> 00:05:40.302
the time, but I'll leave that out for now.

101
00:05:40.302 --> 00:05:42.824
&gt;&gt; Speaker 2: What about
if the source completes?

102
00:05:42.824 --> 00:05:44.819
&gt;&gt; Jafar Husain: Good question,
what about the source completes, right?

103
00:05:44.819 --> 00:05:50.009
If the source completes, do we want to
send a completion message down stream?

104
00:05:50.009 --> 00:05:51.034
&gt;&gt; Speaker 4: Yes.

105
00:05:51.034 --> 00:05:52.992
&gt;&gt; Jafar Husain: Yeah,
because otherwise, right?

106
00:05:52.992 --> 00:05:56.263
The source will give us one,
two, three and then complete,

107
00:05:56.263 --> 00:06:00.382
and then we'll give some transform,
three transform values downstream.

108
00:06:00.382 --> 00:06:04.937
But then, we won't complete, and therefore
we won't free all of their call backs.

109
00:06:04.937 --> 00:06:06.363
&gt;&gt; [MUSIC]
&gt;&gt; Jafar Husain: So this is a little bit

110
00:06:06.363 --> 00:06:11.332
closer, this is still not 100% right,
but it's 99% right, Right or

111
00:06:11.332 --> 00:06:14.023
not, I think for this particular class.

112
00:06:14.023 --> 00:06:14.823
Is there anyone out,

113
00:06:14.823 --> 00:06:17.408
what the heck, would anyone has or
guess why is this 100% right?

114
00:06:17.408 --> 00:06:21.353
This might just complicate things,
but I can't help myself.

115
00:06:21.353 --> 00:06:26.041
Anybody out there know why it's,
what could go wrong here?

116
00:06:26.041 --> 00:06:29.770
&gt;&gt; Speaker 3: Like, it doesn't make sense
to me why you would want to unsubscribe,

117
00:06:29.770 --> 00:06:31.363
like, in the middle of a map?

118
00:06:31.363 --> 00:06:33.939
Because it could fail for
only one value, maybe?

119
00:06:33.939 --> 00:06:35.855
&gt;&gt; Jafar Husain: That's a great question,
right?

120
00:06:35.855 --> 00:06:39.084
I mean, let's say we fail at
processing just one value,

121
00:06:39.084 --> 00:06:41.726
do we want to not give any more values,
right?

122
00:06:41.726 --> 00:06:44.565
Well the way to think about,
and don't get me wrong,

123
00:06:44.565 --> 00:06:48.683
you could completely invent a type,
my observable, that behaves that way.

124
00:06:48.683 --> 00:06:51.677
But the reason why observable
doesnt behave that way,

125
00:06:51.677 --> 00:06:55.713
is that it's really trying to emulate
what happens inside of a function,

126
00:06:55.713 --> 00:06:57.873
just in terms of push rather than pull.

127
00:06:57.873 --> 00:07:01.969
If you throw inside of a function
[SOUND] that function ends, right?

128
00:07:01.969 --> 00:07:04.993
Unless you catch that function, or
catch the error and do something about it.

129
00:07:04.993 --> 00:07:09.237
In which case, and we will actually show
functions you can use later on the class,

130
00:07:09.237 --> 00:07:11.834
by which you can handle errors and
sort of resume.

131
00:07:11.834 --> 00:07:16.789
But in practice, once that function
has erred it's done, right?

132
00:07:16.789 --> 00:07:20.039
And so, that doesn't allow you to do
some things that you might wanna do, and

133
00:07:20.039 --> 00:07:22.846
you could always use a different
type to accomplish those things.

134
00:07:22.846 --> 00:07:25.709
And there are ways in which you
could mitigate against this as well,

135
00:07:25.709 --> 00:07:28.435
by actually, try catching your
projection function, right?

136
00:07:28.435 --> 00:07:30.917
If you wanted to do this, you could
try to catch your projection function.

137
00:07:30.917 --> 00:07:34.152
So there's a lot of different ways
in which you could accomplish,

138
00:07:34.152 --> 00:07:37.171
preventing a stream from closing,
if you got a single error.

139
00:07:37.171 --> 00:07:42.297
But by default, we want behavior to match
very closely with that of a function,

140
00:07:42.297 --> 00:07:43.759
does that make sense?

141
00:07:43.759 --> 00:07:46.479
Anybody have a quick guess as to what,

142
00:07:46.479 --> 00:07:49.714
I've got a little bit
of a problem with this.

143
00:07:49.714 --> 00:07:54.341
It's a very difficult case to catch,
but the reality is,

144
00:07:54.341 --> 00:07:58.033
subscribe can sometimes run synchronously.

145
00:07:58.033 --> 00:08:01.635
So imagine, you've subscribe up to
an observable and then it on next,

146
00:08:01.635 --> 00:08:05.728
your 10,000 values without doing
anything asynchronous at all, right?

147
00:08:05.728 --> 00:08:08.729
In fact, I think we built a function
like that, did I delete it?

148
00:08:08.729 --> 00:08:13.867
We had a, I deleted it, but remember,
our natural numbers function?

149
00:08:13.867 --> 00:08:18.298
All it did was while true and just [SOUND]
bang numbers out into the observer.

150
00:08:18.298 --> 00:08:24.349
So, the problem is, all that happens and
we never get to the part of the code

151
00:08:24.349 --> 00:08:29.748
at the bottom where we return
the unsubscription, see the issue?

152
00:08:29.748 --> 00:08:33.017
So it's possible here, up here,

153
00:08:33.017 --> 00:08:37.650
that this subscribe is
actually just gonna run.

154
00:08:37.650 --> 00:08:42.412
And this code could even get executed
before we get the subscription,

155
00:08:42.412 --> 00:08:44.924
in which case it would be undefined.

156
00:08:44.924 --> 00:08:48.102
Now that's complicated, [LAUGH],
it's an really edge case.

157
00:08:48.102 --> 00:08:51.475
I don't want us to worry about too much,
but I think that this is a more

158
00:08:51.475 --> 00:08:54.340
correct implementation,
the one we've seen right now.

159
00:08:54.340 --> 00:08:56.687
So it's pretty darn close
to what it should be.

160
00:08:56.687 --> 00:09:01.122
I'm actually gonna revert it to the
simpler one, just for the purpose of this.

161
00:09:01.122 --> 00:09:05.443
Just for the purpose of this class,
sorry, one second, this, sorry.

162
00:09:05.443 --> 00:09:06.565
That's what it would look like.

163
00:09:06.565 --> 00:09:09.558
So that's very close to how you'd expect
the map function to behave, yeah?

164
00:09:09.558 --> 00:09:13.637
&gt;&gt; Speaker 2: Do you have to
accommodate the asynchronous approach?

165
00:09:13.637 --> 00:09:16.270
Could we just use set timeout zero or
something?

166
00:09:16.270 --> 00:09:19.724
&gt;&gt; Jafar Husain: Yeah, if you were to
use set timout zero in this observable,

167
00:09:19.724 --> 00:09:24.131
then you'd be guaranteed to get this
subscription before any work started,

168
00:09:24.131 --> 00:09:25.652
and then this would work.

169
00:09:25.652 --> 00:09:29.051
But, turns out there's good reasons
actually of why observables

170
00:09:29.051 --> 00:09:33.003
are asynchronous by default, and
you can opt into them being asynchronous.

171
00:09:33.003 --> 00:09:36.649
This is one of the interesting differences
between promises and observables.

172
00:09:36.649 --> 00:09:41.775
For those who are aware, promises always
notify you in what's called the next tick.

173
00:09:41.775 --> 00:09:44.069
I.e., there,
it's going to happen asynchronously.

174
00:09:44.069 --> 00:09:47.042
It's not going to jump in
to the middle of your code,

175
00:09:47.042 --> 00:09:50.771
it's gonna wait until the event loop,
gives you the next value.

176
00:09:50.771 --> 00:09:55.423
And so you don't have to worry about
this situation with a promise.

177
00:09:55.423 --> 00:09:57.924
If you called that then and
passed it a call back,

178
00:09:57.924 --> 00:10:01.474
it's not immediately gonna call
that call back, it's gonna wait.

179
00:10:01.474 --> 00:10:05.177
With an observable, things might
synchronously be pushed at you.

180
00:10:05.177 --> 00:10:08.666
And I don't wanna get too much detail into
that in the class, because it really, for

181
00:10:08.666 --> 00:10:10.206
the most part, it doesn't matter.

182
00:10:10.206 --> 00:10:13.220
Just like an observable
might fire synchronously,

183
00:10:13.220 --> 00:10:17.474
just like you can take a cold observable
and turn it into a hot observable.

184
00:10:17.474 --> 00:10:20.922
You can take an observable that
always fires synchronously and

185
00:10:20.922 --> 00:10:23.264
turn it into an asynchronous observable,

186
00:10:23.264 --> 00:10:26.922
using something very much like
what you said, like a set timeout.

187
00:10:26.922 --> 00:10:30.346
But this is more detail than I
already wanted to go into here.

188
00:10:30.346 --> 00:10:32.952
And I don't wanna go into too
much more because the reality is,

189
00:10:32.952 --> 00:10:36.296
it's not super important at the moment if
you guys understand how observable all

190
00:10:36.296 --> 00:10:37.053
flows together.

191
00:10:37.053 --> 00:10:41.409
So I'm actually gonna revert this out and
just use the simpler definition we

192
00:10:41.409 --> 00:10:44.894
originally came up with, and
leave out the error handling.

193
00:10:44.894 --> 00:10:49.879
But I'm glad, I'm glad you pushed me
on it, keep me honest, that's good.

194
00:10:54.313 --> 00:10:58.024
&gt;&gt; Jafar Husain: I think this is a little
simpler to understand right now.

195
00:10:58.024 --> 00:11:00.585
So, in this world, we're just gonna
assume that projection never errs.

196
00:11:17.941 --> 00:11:19.686
&gt;&gt; Jafar Husain: Make sense?

197
00:11:19.686 --> 00:11:22.280
Simpler, a little bit simpler.

198
00:11:22.280 --> 00:11:25.492
Great, so I'm also gonna call
your attention to something,

199
00:11:25.492 --> 00:11:28.348
which is that we're taking
the subscription object.

200
00:11:28.348 --> 00:11:31.901
And we are wrapping it in
another subscription object, and

201
00:11:31.901 --> 00:11:34.324
we're just calling unsubscribe on it.

202
00:11:36.990 --> 00:11:39.008
&gt;&gt; Jafar Husain: It seems kinda wasteful,
doesn't it?

203
00:11:39.008 --> 00:11:41.408
Can I simplify this program?

204
00:11:41.408 --> 00:11:45.660
Why take a subscription, create a new
subscription that just calls unsubscribe

205
00:11:45.660 --> 00:11:48.238
on that subscription
when it's unsubscribed?

206
00:11:48.238 --> 00:11:49.362
Can we simplify this program?

207
00:11:54.753 --> 00:11:57.023
&gt;&gt; Jafar Husain: What if I just
returned the subscription?

208
00:12:06.079 --> 00:12:07.071
&gt;&gt; Jafar Husain: The way to think about
this is, and I'm gonna, usually, I,

209
00:12:07.071 --> 00:12:08.153
this is the part of the cllas where
I might do a little role playing.

210
00:12:08.153 --> 00:12:13.105
We're not gonna do anything
weird like trust exercises,

211
00:12:13.105 --> 00:12:17.969
but we will do a little role
playing in the class, right?

212
00:12:17.969 --> 00:12:20.927
Actually I'm gonna ask us
to just pause for a sec,

213
00:12:20.927 --> 00:12:23.192
maybe we can recalibrate the camera.

214
00:12:23.192 --> 00:12:25.290
And I'm gonna ask for some brave
volunteers for our little roleplay

