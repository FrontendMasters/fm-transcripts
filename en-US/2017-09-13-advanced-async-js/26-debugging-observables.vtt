WEBVTT

1
00:00:01.156 --> 00:00:03.414
&gt;&gt; Jafar Husain: I'm gonna
comment out our consumption code.

2
00:00:10.934 --> 00:00:15.775
&gt;&gt; Jafar Husain: Uh-oh, file not found.

3
00:00:15.775 --> 00:00:19.310
Not sure why that is but, hmm.

4
00:00:19.310 --> 00:00:22.270
That seems kinda suspect, right?

5
00:00:22.270 --> 00:00:23.899
Probably made a mistake
somewhere if I see that.

6
00:00:26.124 --> 00:00:26.997
&gt;&gt; Jafar Husain: Let's see.

7
00:00:29.689 --> 00:00:30.598
&gt;&gt; Jafar Husain: Indices map.

8
00:00:33.721 --> 00:00:35.789
&gt;&gt; Jafar Husain: I think
something's off about this.

9
00:00:39.202 --> 00:00:41.782
&gt;&gt; Jafar Husain: So,
I wanted to do this in class, so

10
00:00:41.782 --> 00:00:45.210
that we could also go over debugging,
right?

11
00:00:45.210 --> 00:00:49.070
Debugging's always an important
topic when we're doing these things.

12
00:00:49.070 --> 00:00:51.590
How do you debug an observable?

13
00:00:52.770 --> 00:00:53.729
Anybody have any ideas?

14
00:00:55.550 --> 00:00:56.140
&gt;&gt; Student1: Do?

15
00:00:56.140 --> 00:00:58.740
&gt;&gt; Jafar Husain: Do, excellent,
all right, we got a ringer here.

16
00:00:58.740 --> 00:01:01.260
Yes, do,
that is how you debug an observable.

17
00:01:01.260 --> 00:01:05.070
What do essentially allows you to
do is perform some side effect

18
00:01:05.070 --> 00:01:07.600
whenever an item is
admitted from a stream.

19
00:01:07.600 --> 00:01:11.890
And a good side effect is sometimes just,
either logging to the console, but

20
00:01:11.890 --> 00:01:14.650
my personal favorite is actually
just throwing a debug or

21
00:01:14.650 --> 00:01:16.230
semicolon statement in there.

22
00:01:16.230 --> 00:01:19.500
So, a lot of people think, you can't
debug observables, but it's not true.

23
00:01:19.500 --> 00:01:22.860
You can actually put a debugger semicolon
statement inside of any function,

24
00:01:22.860 --> 00:01:25.930
your map function, etc and
sort of get a read on what's going on.

25
00:01:25.930 --> 00:01:27.880
So, the first thing I'd like to know is,

26
00:01:27.880 --> 00:01:32.040
I'm pretty confident this is an images
array, cuz we tested that before, right?

27
00:01:33.160 --> 00:01:35.110
I'm wondering what's going on in here.

28
00:01:36.130 --> 00:01:37.740
If there is even anything
going on in here.

29
00:01:39.740 --> 00:01:41.420
&gt;&gt; Student2: I see-
&gt;&gt; Jafar Husain: Yeah?

30
00:01:41.420 --> 00:01:42.830
&gt;&gt; Student2: I think it's an esx problem.

31
00:01:44.490 --> 00:01:45.990
&gt;&gt; Student2: Did you have
the brackets there before?

32
00:01:45.990 --> 00:01:46.690
&gt;&gt; Jafar Husain: I just put them in.

33
00:01:46.690 --> 00:01:47.740
&gt;&gt; Student2: Okay nevermind.

34
00:01:47.740 --> 00:01:51.110
&gt;&gt; Jafar Husain: So this is, by the way,
when you want to debug, you take the arrow

35
00:01:51.110 --> 00:01:54.640
function and you put brackets in here so
that you can put statements inside.

36
00:01:54.640 --> 00:01:59.589
And then you put a debugger semicolon,
does that make sense, everybody?

37
00:01:59.589 --> 00:02:02.910
And I also put a debugger in here just so
I see what's going on.

38
00:02:04.270 --> 00:02:05.390
And now let's rerun this.

39
00:02:06.520 --> 00:02:11.027
Okay, interesting,
notice we didn't hit this right here.

40
00:02:11.027 --> 00:02:12.370
Hmm, wonder what's up with that.

41
00:02:14.690 --> 00:02:16.570
It wants the URL at least?

42
00:02:16.570 --> 00:02:18.500
Look, it's an observable.

43
00:02:18.500 --> 00:02:20.380
Well, that's not gonna work.

44
00:02:20.380 --> 00:02:25.980
So, it looks like we actually have
a two-dimensional observable still.

45
00:02:25.980 --> 00:02:29.560
I'm not entirely sure why, but
that's usually what that indicates, right?

46
00:02:29.560 --> 00:02:32.480
If we get on next in an observable, it
means we haven't done enough flattening.

47
00:02:33.490 --> 00:02:34.280
So maybe I was wrong.

48
00:02:34.280 --> 00:02:36.820
Maybe we have a three-dimensional
observable or something.

49
00:02:36.820 --> 00:02:39.500
So, let's see if we can
get to the bottom of that.

50
00:02:39.500 --> 00:02:42.650
All right, so,
the url is indeed an observable.

51
00:02:50.582 --> 00:02:55.225
&gt;&gt; Jafar Husain: Right, so
earlier we thought we're just mapping

52
00:02:55.225 --> 00:02:58.251
over this observable, right?

53
00:02:58.251 --> 00:02:59.359
They must still be flat.

54
00:03:00.550 --> 00:03:03.050
But it's not, right?

55
00:03:03.050 --> 00:03:09.400
If I do this,
&gt;&gt; Jafar Husain: Right?

56
00:03:09.400 --> 00:03:10.830
I'm still mapping over that observable,
but

57
00:03:10.830 --> 00:03:14.060
the problem is I'm returning
another observable for

58
00:03:14.060 --> 00:03:17.660
every item in the observable, which means
I get an extra level of dimensionality.

59
00:03:17.660 --> 00:03:19.640
And in here, what are we doing?

60
00:03:19.640 --> 00:03:23.582
For every images array we're
returning an observable, right?

61
00:03:23.582 --> 00:03:25.410
We're taking this indices and
we're mapping over it.

62
00:03:25.410 --> 00:03:27.614
So, we actually ended up with
a three-dimensional observable.

63
00:03:28.870 --> 00:03:29.980
Mind blown, right?

64
00:03:31.050 --> 00:03:34.210
Well the reality is, deeply nested
observables are actually not so

65
00:03:34.210 --> 00:03:38.020
hard because generally speaking,
as you go, you're flattening them, right?

66
00:03:38.020 --> 00:03:39.870
Every time you get into a new
level of dimensionality,

67
00:03:39.870 --> 00:03:41.690
you say, how would I flatten this thing?

68
00:03:41.690 --> 00:03:43.880
And then you pick one of
the three flattening strategies.

69
00:03:43.880 --> 00:03:49.542
Until finally you go from how
ever many levels deep to one.

70
00:03:49.542 --> 00:03:51.875
S,o let's put this down here.

71
00:03:58.030 --> 00:03:59.866
&gt;&gt; Jafar Husain: I like
the shorter form myself.

72
00:04:01.661 --> 00:04:02.722
&gt;&gt; Jafar Husain: Okay,
so, it seems like we

73
00:04:02.722 --> 00:04:04.500
still have a two-dimensional observable.

74
00:04:04.500 --> 00:04:07.570
But how are we gonna flatten
this level right here?

75
00:04:07.570 --> 00:04:10.400
&gt;&gt; Student2: We could use
a merge map there, sort of map.

76
00:04:10.400 --> 00:04:15.024
&gt;&gt; Jafar Husain: Yeah, sure, all right,
no need to be creative here.

77
00:04:15.024 --> 00:04:17.370
That would definitely flatten it.

78
00:04:17.370 --> 00:04:18.083
Is it the right flat?

79
00:04:25.344 --> 00:04:30.294
&gt;&gt; Jafar Husain: So, every single time
we get a new array of images, right,

80
00:04:30.294 --> 00:04:34.657
we're gonna create this stream of images,
right?

81
00:04:34.657 --> 00:04:38.210
But what happens when
a new sub is selected?

82
00:04:38.210 --> 00:04:38.750
Right?

83
00:04:38.750 --> 00:04:46.096
What we're really trying to decide here
is, actually, let's take a step back here.

84
00:04:46.096 --> 00:04:49.311
Before we focus on this inner
two-dimensional observable,

85
00:04:49.311 --> 00:04:50.930
let's focus on the outer one.

86
00:04:50.930 --> 00:04:53.931
So, every single time a new sub is
selected, we're going to go and

87
00:04:53.931 --> 00:04:55.760
get the SubImages for that sub, right.

88
00:04:55.760 --> 00:04:59.440
We'll create another
observable right here.

89
00:04:59.440 --> 00:05:01.924
But what happens if a new
sub is immediately selected,

90
00:05:01.924 --> 00:05:04.570
while we're still loading the data for
the previous sub?

91
00:05:06.872 --> 00:05:07.790
&gt;&gt; Jafar Husain: What do we wanna do?

92
00:05:07.790 --> 00:05:08.885
Do we wanna merge all?

93
00:05:08.885 --> 00:05:12.091
&gt;&gt; Student3: You're gonna
wanna switch [CROSSTALK]

94
00:05:12.091 --> 00:05:13.251
&gt;&gt; Jafar Husain: You might wanna

95
00:05:13.251 --> 00:05:15.310
switch latest, right?

96
00:05:15.310 --> 00:05:17.850
Cuz I don't care about
the data from the old sub.

97
00:05:17.850 --> 00:05:23.400
So, instead of merge all, switchLatest.

98
00:05:23.400 --> 00:05:26.250
Okay, so with that in mind now let's
talk about the inner one, right?

99
00:05:26.250 --> 00:05:32.240
Once I get images,
I'm immediately gonna return unobservable,

100
00:05:32.240 --> 00:05:34.960
and as you move left and right, right?

101
00:05:34.960 --> 00:05:41.110
We're gonna return new images URLs For
the corresponding index in that array.

102
00:05:41.110 --> 00:05:42.920
What's the flattening
strategy I wanna use here?

103
00:05:44.700 --> 00:05:46.120
&gt;&gt; Student2: Switch latest?

104
00:05:46.120 --> 00:05:47.280
&gt;&gt; Jafar Husain: Switch latest?

105
00:05:47.280 --> 00:05:52.950
Honestly, it doesn't really much matter in
this particular case because getSubImages

106
00:05:52.950 --> 00:05:56.440
is only an observable of one.

107
00:05:56.440 --> 00:05:57.580
Does that make sense?

108
00:05:57.580 --> 00:05:59.130
Because it's only an observable one,

109
00:05:59.130 --> 00:06:03.580
it really doesn't matter what flattening
pattern we use in this context.

110
00:06:03.580 --> 00:06:05.910
So, given that, the cheapest one,

111
00:06:05.910 --> 00:06:09.500
it's actually roughly the cheapest one,
is to use switchLatest.

112
00:06:10.940 --> 00:06:11.760
Does that make sense?

113
00:06:11.760 --> 00:06:12.440
Is that clear to everybody?

114
00:06:12.440 --> 00:06:18.140
If you have an observable of one, right,
it's not gonna make any difference.

115
00:06:18.140 --> 00:06:21.655
We're always gonna return
this indices observable.

116
00:06:21.655 --> 00:06:29.470
So,
&gt;&gt; Jafar Husain: Are we done?

117
00:06:29.470 --> 00:06:31.940
Maybe we can at least try it, right?

118
00:06:31.940 --> 00:06:35.207
I think we might actually get something
going here if we tried this one.

119
00:06:39.004 --> 00:06:42.052
&gt;&gt; Jafar Husain: Maybe not,
it's angry about switchLatest.

120
00:06:45.206 --> 00:06:45.997
&gt;&gt; Jafar Husain: Why is it angry?

121
00:06:49.860 --> 00:06:52.119
&gt;&gt; Jafar Husain: Usually it
displays the error there,

122
00:06:52.119 --> 00:06:54.100
switchLatest is not a function.

123
00:06:55.290 --> 00:06:59.070
I'm guessing I made some sort of mistake
here, cuz switchLatest is definitely

124
00:06:59.070 --> 00:07:02.348
a function on an observable,
which is what gets returned for map.

125
00:07:02.348 --> 00:07:05.290
This dot shouldn't be here.

126
00:07:06.980 --> 00:07:07.480
Right?

127
00:07:08.550 --> 00:07:09.340
Or should it?

128
00:07:09.340 --> 00:07:12.880
[LAUGH] Any eagle eyes out
there spot what I did wrong?

129
00:07:15.230 --> 00:07:20.542
That dot should be there,
cuz that's hw you can switchLatest here.

130
00:07:20.542 --> 00:07:21.935
I feel like I've done something wrong.

131
00:07:25.982 --> 00:07:27.166
&gt;&gt; Jafar Husain: I got a return missing.

132
00:07:38.328 --> 00:07:42.225
&gt;&gt; Student4: You're missing
a parentheses on line 70?

133
00:07:42.225 --> 00:07:45.350
&gt;&gt; Jafar Husain: I think I would've gotten
a syntax error, but you said which one?

134
00:07:45.350 --> 00:07:48.010
Line 70?
&gt;&gt; Student4: It might just be my error.

135
00:07:50.600 --> 00:07:53.480
&gt;&gt; Jafar Husain: It's always good to try
and reduce these things a little bit.

136
00:08:00.048 --> 00:08:01.788
&gt;&gt; Jafar Husain: All
the parentheses look lined up.

137
00:08:03.556 --> 00:08:06.847
&gt;&gt; Jafar Husain: It's probably that,
though, I've probably got something off if

138
00:08:06.847 --> 00:08:10.253
I've got an error where it says
there is no switchLatest method,

139
00:08:10.253 --> 00:08:18.433
hmm,
&gt;&gt; Jafar Husain: Sync

140
00:08:18.433 --> 00:08:21.591
the map looks all good to me, actually.

141
00:08:21.591 --> 00:08:25.560
One of these returning a switchLatest.

142
00:08:25.560 --> 00:08:28.951
I'll try that one more time.

143
00:08:32.730 --> 00:08:36.536
&gt;&gt; Jafar Husain: So we can still
debug these things, of course.

144
00:08:36.536 --> 00:08:39.510
I'm gonna see what actually
comes back from this.

145
00:08:39.510 --> 00:08:44.213
An observable
&gt;&gt; Jafar Husain: And

146
00:08:44.213 --> 00:08:48.254
do I actually have a switchLatest or
a map or anything like that?

147
00:08:50.327 --> 00:08:51.961
&gt;&gt; Jafar Husain: Maybe brackets
around the whole thing.

148
00:08:57.323 --> 00:08:59.620
&gt;&gt; Jafar Husain: Doesn't Chrome
usually autocomplete here for me?

149
00:08:59.620 --> 00:09:01.527
That's a little bit odd, right?

150
00:09:01.527 --> 00:09:02.967
Why don't we try a little assignment?

151
00:09:12.688 --> 00:09:13.897
&gt;&gt; Student5: Got two minutes.

152
00:09:17.503 --> 00:09:19.135
&gt;&gt; Jafar Husain: [LAUGH] Thanks, guys.

153
00:09:23.824 --> 00:09:24.712
&gt;&gt; Jafar Husain: Oops, my bad.

154
00:09:33.112 --> 00:09:34.152
&gt;&gt; Jafar Husain: Okay.

155
00:09:36.667 --> 00:09:39.026
&gt;&gt; Jafar Husain: Hmm.

156
00:09:39.026 --> 00:09:42.530
[LAUGH] new RX it's been renamed.

157
00:09:42.530 --> 00:09:44.710
It's not switchLatest,
I think it's switch.

158
00:09:44.710 --> 00:09:48.168
At least that's what I think's going on,
so sorry about that.

159
00:09:53.748 --> 00:09:54.651
&gt;&gt; Jafar Husain: Let's give that a shot.

160
00:10:05.067 --> 00:10:08.120
&gt;&gt; Jafar Husain: Okay, not quite where
we wanna be, I don't see any images.

161
00:10:08.120 --> 00:10:09.620
Why don't I see images, actually?

162
00:10:09.620 --> 00:10:12.670
We kind of expect that we're
gonna get zero first, right?

163
00:10:12.670 --> 00:10:15.210
But actually,
that's not the way that scan works.

164
00:10:15.210 --> 00:10:18.793
Scan doesn't emit the accumulator first.

165
00:10:21.429 --> 00:10:25.500
&gt;&gt; Jafar Husain: So, if you give it
an initial value, it doesn't emit it.

166
00:10:25.500 --> 00:10:29.380
We want indices to be
not just the changes.

167
00:10:29.380 --> 00:10:32.880
Much like sub, we don't want just the
changes, we want some initial value and

168
00:10:32.880 --> 00:10:34.300
then all of the changes.

169
00:10:34.300 --> 00:10:38.820
And so because scan doesn't initially emit
zero, how can we make sure that zero leaps

170
00:10:38.820 --> 00:10:41.470
out of indices whenever we
subscribe to it as the first value?

171
00:10:42.630 --> 00:10:44.178
&gt;&gt; Student2: We can
concatenate it with zero?

172
00:10:44.178 --> 00:10:45.330
&gt;&gt; Jafar Husain: Yes,
we can concatenate it on to the front.

173
00:10:51.002 --> 00:10:54.458
&gt;&gt; Jafar Husain: There's actually shorter
forms of this, like starts with and

174
00:10:54.458 --> 00:10:57.731
things like that, but
I'll just keep it like this for now.

175
00:11:01.621 --> 00:11:03.277
&gt;&gt; Jafar Husain: So,
I think that was our problem,

176
00:11:03.277 --> 00:11:06.430
that we were subscribing to
the observable but it hadn't fired.

177
00:11:06.430 --> 00:11:08.936
And therefore, we don't pull
the first value out of the array.

178
00:11:10.717 --> 00:11:14.230
&gt;&gt; Jafar Husain: So
let's try this time, come on.

179
00:11:14.230 --> 00:11:15.250
Already getting somewhere.

