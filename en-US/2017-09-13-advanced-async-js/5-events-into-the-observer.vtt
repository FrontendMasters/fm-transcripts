WEBVTT

1
00:00:00.390 --> 00:00:02.480
&gt;&gt; Jafar Husain: So
lets go back to our from event.

2
00:00:02.480 --> 00:00:05.860
So we're going to wait from now on before
we do any work inside an observable,

3
00:00:05.860 --> 00:00:08.360
we are going to wait until
subscribe is called.

4
00:00:09.900 --> 00:00:13.248
So help me out here, what am I going to do
when subscribe is called in order to get

5
00:00:13.248 --> 00:00:15.730
the events out of the dom
event into the observer.

6
00:00:15.730 --> 00:00:18.949
Remember we're pushing events that we get
from the dom event into the observer.

7
00:00:24.201 --> 00:00:26.150
&gt;&gt; Speaker 2: Attached
to the event handler?

8
00:00:26.150 --> 00:00:28.140
&gt;&gt; Jafar Husain: Yeah, so
we've got a dom element.

9
00:00:28.140 --> 00:00:30.440
We're gonna do addEventListener.

10
00:00:30.440 --> 00:00:31.690
We're gonna pass in the eventName.

11
00:00:31.690 --> 00:00:35.440
And now help me out, well,
how does that event listener work again?

12
00:00:36.560 --> 00:00:38.940
&gt;&gt; Speaker 2: It's gonna
call observer.next.

13
00:00:38.940 --> 00:00:41.770
&gt;&gt; Jafar Husain: Right,
it accepts a function right, and

14
00:00:41.770 --> 00:00:46.250
I'm gonna call observer next, and

15
00:00:46.250 --> 00:00:50.860
I'm gonna get an event object, and I'm
gonna pump it into the observer, right?

16
00:00:50.860 --> 00:00:54.040
&gt;&gt; Speaker 2: For conciseness
can you just pass observer.next?

17
00:00:54.040 --> 00:00:57.080
&gt;&gt; Jafar Husain: You could, it wouldn't be
as concise as you hope though because of

18
00:00:57.080 --> 00:01:01.280
the way JavaScript Function binding works,
right?

19
00:01:01.280 --> 00:01:04.590
So if we do this, can anybody tell me why
this isn't gonna work the way we expect or

20
00:01:04.590 --> 00:01:06.680
want it to?

21
00:01:06.680 --> 00:01:08.370
&gt;&gt; Speaker 2: Because of this?

22
00:01:08.370 --> 00:01:10.770
&gt;&gt; Jafar Husain: There's a gotcha,
cuz of the this object.

23
00:01:10.770 --> 00:01:12.010
Functions, right?

24
00:01:12.010 --> 00:01:14.660
In JavaScript, don't necessarily run,

25
00:01:14.660 --> 00:01:19.660
they're this object does not necessarily
the function the object is hanging off of.

26
00:01:19.660 --> 00:01:22.480
Here we're actually literally is you're
going to pass the function reference

27
00:01:22.480 --> 00:01:23.820
through, and it's going to call it.

28
00:01:23.820 --> 00:01:28.130
So we need to do something like this and
we need to make sure to bind it.

29
00:01:29.240 --> 00:01:31.360
And frankly that's not so concise anyways.

30
00:01:31.360 --> 00:01:36.620
So I generally prefer, rather than
using bind, the explicitness of this.

31
00:01:36.620 --> 00:01:38.150
Does that make sense?

32
00:01:39.810 --> 00:01:42.250
So okay, am I done?

33
00:01:43.530 --> 00:01:44.030
What's missing here?

34
00:01:47.249 --> 00:01:48.260
&gt;&gt; Speaker 2: Cancel?

35
00:01:48.260 --> 00:01:49.090
&gt;&gt; Jafar Husain: Yeah, right.

36
00:01:49.090 --> 00:01:50.370
We've hooked the thing up.

37
00:01:50.370 --> 00:01:54.160
But if somebody wants to unsubscribe from
this event they're out of luck, right?

38
00:01:54.160 --> 00:01:55.710
So how do I do it?

39
00:01:55.710 --> 00:01:57.890
I return a subscription.

40
00:01:57.890 --> 00:02:02.980
Now subscription much like an observable,
is just a function in object clothing.

41
00:02:02.980 --> 00:02:06.260
So it has, it's just a function,
it's just an object with one function.

42
00:02:08.600 --> 00:02:10.530
And so what am I going to do
when somebody unsubscribes?

43
00:02:11.640 --> 00:02:12.746
&gt;&gt; Speaker 2: Remove the event listener.

44
00:02:12.746 --> 00:02:13.640
&gt;&gt; Jafar Husain: Remove
the event listener.

45
00:02:20.798 --> 00:02:21.620
&gt;&gt; Jafar Husain: Ran into a problem here.

46
00:02:21.620 --> 00:02:22.912
&gt;&gt; Speaker 2: Same function at that point?

47
00:02:22.912 --> 00:02:23.632
&gt;&gt; Jafar Husain: What?
&gt;&gt; Speaker 2: Can you

48
00:02:23.632 --> 00:02:26.880
actually remove that event listener
with being a different function?

49
00:02:26.880 --> 00:02:27.740
&gt;&gt; Jafar Husain: Yeah,
how's that gonna work?

50
00:02:27.740 --> 00:02:29.151
That's not gonna work so
well for me, right?

51
00:02:29.151 --> 00:02:32.180
&gt;&gt; Speaker 2: Tie that function
to a function on the object.

52
00:02:32.180 --> 00:02:33.310
&gt;&gt; Jafar Husain: Okay that's interesting.

53
00:02:33.310 --> 00:02:35.794
So you what are you suggesting here,
take this?

54
00:02:35.794 --> 00:02:39.070
&gt;&gt; Speaker 2: Observable
can have the call back, and

55
00:02:39.070 --> 00:02:40.530
you can unsubscribe from that call back.

56
00:02:40.530 --> 00:02:41.410
&gt;&gt; Jafar Husain: So like you're-
&gt;&gt; Speaker 2: Call

57
00:02:41.410 --> 00:02:43.320
back just fires the observer.next.

58
00:02:43.320 --> 00:02:46.220
&gt;&gt; Jafar Husain: So
like if I go this.callbackequals?

59
00:02:46.220 --> 00:02:47.880
Is that the type of
thing you're getting at?

60
00:02:47.880 --> 00:02:48.680
&gt;&gt; Speaker 2: I think so.

61
00:02:48.680 --> 00:02:51.880
&gt;&gt; Jafar Husain: You know what,
I think that would totally work.

62
00:02:51.880 --> 00:02:54.180
But one thing I don't want to do though,
so

63
00:02:54.180 --> 00:02:57.030
I think it would work for
one subscription.

64
00:02:57.030 --> 00:02:59.660
And then the subsequent
subscriptions would all try and

65
00:02:59.660 --> 00:03:03.810
stomp on the same member
on the observable.

66
00:03:03.810 --> 00:03:06.590
So in general, we don't wanna
store members on the observable.

67
00:03:06.590 --> 00:03:08.240
That's a really good guess.

68
00:03:08.240 --> 00:03:09.960
And why don't we wanna store
members on an observable?

69
00:03:09.960 --> 00:03:11.380
Well, because you know what,

70
00:03:11.380 --> 00:03:14.200
that observable's just a wrapper for
a function.

71
00:03:14.200 --> 00:03:18.310
And if we put data on it, and
I call subscribe 50 times,

72
00:03:18.310 --> 00:03:22.340
all 50 of those functions are gonna be
trying to write to the same piece of data.

73
00:03:22.340 --> 00:03:22.950
The good news is,

74
00:03:22.950 --> 00:03:26.190
we don't need to do that,
because in JavaScript we have closures.

75
00:03:26.190 --> 00:03:28.360
So I can just create a variable up here.

76
00:03:33.971 --> 00:03:37.288
&gt;&gt; Jafar Husain: So let's think about,
if I call subscribe 50 times,

77
00:03:37.288 --> 00:03:39.889
how many of these
variables am I gonna get?

78
00:03:39.889 --> 00:03:40.465
&gt;&gt; Speaker 2: 50.

79
00:03:40.465 --> 00:03:42.690
&gt;&gt; Jafar Husain: 50, right?

80
00:03:42.690 --> 00:03:47.560
But if I did this dot handler,
right, I'd have one observable and

81
00:03:47.560 --> 00:03:49.660
50 functions all trying to muck with it.

82
00:03:49.660 --> 00:03:53.380
So in this world, we can use closures for
pretty much everything we wanna do.

83
00:03:53.380 --> 00:03:54.040
And that makes sense,

84
00:03:54.040 --> 00:03:57.520
because I've been telling you guys
that observable is just the wrapper.

85
00:03:57.520 --> 00:03:59.990
Just an object that
wraps around a function.

86
00:03:59.990 --> 00:04:01.610
So from now on, let's think functionally.

87
00:04:01.610 --> 00:04:05.190
If we need state,
we can use a closure and a variable and

88
00:04:05.190 --> 00:04:06.550
just put the state right in there.

89
00:04:06.550 --> 00:04:09.470
Turns out it's actually more
convenient anyways most of the time.

90
00:04:09.470 --> 00:04:10.440
So does this make sense?

91
00:04:10.440 --> 00:04:12.166
Is this going to work?

92
00:04:14.033 --> 00:04:15.260
&gt;&gt; Jafar Husain: Is there anything broken?

93
00:04:17.110 --> 00:04:18.150
&gt;&gt; Speaker 2: We need to complete?

94
00:04:18.150 --> 00:04:19.290
Call complete.

95
00:04:19.290 --> 00:04:20.190
&gt;&gt; Jafar Husain: Good question.

96
00:04:20.190 --> 00:04:22.950
Now does this observable complete?

97
00:04:24.440 --> 00:04:25.370
&gt;&gt; Speaker 2: On unsubscribe?

98
00:04:26.880 --> 00:04:27.590
&gt;&gt; Jafar Husain: Good question.

99
00:04:27.590 --> 00:04:30.340
This is exactly the type of thing
that I want to bring up here.

100
00:04:30.340 --> 00:04:33.190
Is there a difference
between you unsubscribing and

101
00:04:33.190 --> 00:04:35.130
an observable completing?

102
00:04:35.130 --> 00:04:36.290
Are those two things the same thing?

103
00:04:38.387 --> 00:04:39.320
&gt;&gt; Speaker 2: No.

104
00:04:39.320 --> 00:04:42.240
&gt;&gt; Jafar Husain: Right, if you get up and
walk out of the room right

105
00:04:42.240 --> 00:04:45.884
now in the middle of my lecture,
right, is my lecture done?

106
00:04:45.884 --> 00:04:47.051
&gt;&gt; Speaker 2: No.
&gt;&gt; Jafar Husain: No, you're just not

107
00:04:47.051 --> 00:04:50.820
listening anymore, right, and
that's totally your prerogative.

108
00:04:50.820 --> 00:04:55.490
But the reality is the lecture goes on,
you've just decided to stop listening.

109
00:04:55.490 --> 00:05:00.850
Now, if you were the last person in
the room and got up, I might decide well,

110
00:05:00.850 --> 00:05:02.770
there's no point in me standing here and
doing this lecture.

111
00:05:02.770 --> 00:05:05.850
And later on we'll figure out how
to build an observable such that

112
00:05:05.850 --> 00:05:08.680
if nobody is listening anymore,
it actually stops.

113
00:05:08.680 --> 00:05:11.650
But the main thing I wanna talk
about here is the difference

114
00:05:11.650 --> 00:05:15.750
between an observable completing and
you not listening anymore.

115
00:05:15.750 --> 00:05:16.701
Right?
When you unsubscribe,

116
00:05:16.701 --> 00:05:18.408
it doesn't mean that that
observable completes.

117
00:05:18.408 --> 00:05:22.361
So if you unsubscribe you're not gonna
get [NOISE] complete being called, right?

118
00:05:22.361 --> 00:05:25.070
You're just saying, hey,
I don't care about this anymore.

119
00:05:25.070 --> 00:05:26.520
Doesn't mean the lecture was finished.

120
00:05:26.520 --> 00:05:28.370
Does that make sense?

121
00:05:28.370 --> 00:05:31.740
Now, again, if you're the only person in
the room, right, I think I see a question.

122
00:05:31.740 --> 00:05:34.752
Sorry.
&gt;&gt; Speaker 2: We had someone wanted you to

123
00:05:34.752 --> 00:05:38.410
explain closure real quick.

124
00:05:38.410 --> 00:05:40.040
&gt;&gt; Jafar Husain: Closure, yeah.

125
00:05:40.040 --> 00:05:48.550
A closure is a function that closes over a
variable defined outside of that function.

126
00:05:48.550 --> 00:05:53.840
So, here we have, you know what?

127
00:05:53.840 --> 00:05:55.230
Sorry, this is a bad example.

128
00:05:55.230 --> 00:05:57.960
Well, it's a slightly, yeah,
it's kind of a bad example.

129
00:05:57.960 --> 00:06:01.970
No, it's a good example because here the
variable being closed over inside of this

130
00:06:01.970 --> 00:06:02.660
function is what?

131
00:06:04.170 --> 00:06:04.910
&gt;&gt; Speaker 2: Observer.

132
00:06:04.910 --> 00:06:08.460
&gt;&gt; Jafar Husain: Observer, the reason why
this is a closure, is that we're using

133
00:06:08.460 --> 00:06:13.070
a variable inside of the function that
wasn't defined inside of the function.

134
00:06:13.070 --> 00:06:18.474
If I did this,
&gt;&gt; Jafar Husain: I don't have a closure

135
00:06:18.474 --> 00:06:22.658
anymore, it's just a function that defines
a variable, that lives to the lifetime of

136
00:06:22.658 --> 00:06:26.810
that function, and then when the function
ends, variable goes bye bye, all right?

137
00:06:26.810 --> 00:06:31.460
So a closure is an interesting way
of allowing us to kind of keep state

138
00:06:31.460 --> 00:06:35.520
because we can define a function,
close over it by using it in a function.

139
00:06:35.520 --> 00:06:37.920
And then that variable is gonna live for

140
00:06:37.920 --> 00:06:41.190
as long as the function
that closed over it.

141
00:06:41.190 --> 00:06:44.900
So normally when we create a variable
inside of a function, that variable goes

142
00:06:44.900 --> 00:06:50.110
bye bye and the data inside of it goes bye
bye as soon as that function ends, right?

143
00:06:50.110 --> 00:06:54.390
But if we close over it like I have done
here and then I hand this function to

144
00:06:54.390 --> 00:06:59.070
somebody else, as long as there's a
function that's closed over that variable

145
00:06:59.070 --> 00:07:03.250
and someone is holding onto that function,
the data in that variable lives.

146
00:07:03.250 --> 00:07:06.140
And so as you're gonna see,
basically we're gonna

147
00:07:06.140 --> 00:07:09.590
build our observable implementation
today with just a bunch of closures.

148
00:07:09.590 --> 00:07:12.455
And if you've imagined if you were to
visualize an observable in memory,

149
00:07:12.455 --> 00:07:16.290
it'd just be a bunch of functions closing
over data holding on to other functions,

150
00:07:16.290 --> 00:07:17.810
closing over data.

151
00:07:17.810 --> 00:07:20.950
And in the end that's fundamentally
not that simple than a big objectory,

152
00:07:20.950 --> 00:07:22.580
and object oriented programming.

153
00:07:22.580 --> 00:07:25.070
In the end if you'd look at memory,
they look kinda similar.

154
00:07:25.070 --> 00:07:27.840
You just got a bunch of
data stored somewhere.

155
00:07:27.840 --> 00:07:30.500
Except instead of being
stored under this object,

156
00:07:30.500 --> 00:07:32.700
we store it indirectly through closures.

157
00:07:32.700 --> 00:07:34.200
Does that make sense?

158
00:07:34.200 --> 00:07:35.920
Hopefully that answered the question.

159
00:07:35.920 --> 00:07:39.720
But it's interesting to note that almost
anything you can do with object-oriented

160
00:07:39.720 --> 00:07:45.020
programming and state on prototypes using
this dot, you could also do with closures.

161
00:07:45.020 --> 00:07:46.780
I could do a whole other
class on that one.

162
00:07:46.780 --> 00:07:49.140
But, the reality is they're
actually equivalent.

163
00:07:50.180 --> 00:07:55.370
So let's jump back to our
problem at hand here.

164
00:07:55.370 --> 00:07:56.320
I've defined a handler.

165
00:07:56.320 --> 00:07:59.306
&gt;&gt; Speaker 2: We were talking
about complete if it makes sense.

166
00:07:59.306 --> 00:08:03.306
&gt;&gt; Jafar Husain: Yeah, just we actually
had a corollary of this earlier when

167
00:08:03.306 --> 00:08:05.469
we were talking about Timeout.

168
00:08:06.794 --> 00:08:11.050
Time out, somebody brought up hey,
what about on airing?

169
00:08:11.050 --> 00:08:11.810
Or what about airing?

170
00:08:12.890 --> 00:08:14.250
Well, time out's don't air, right?

171
00:08:14.250 --> 00:08:16.000
They never air, they never fail, right?

172
00:08:17.160 --> 00:08:19.540
Do events, do DOM events ever complete?

173
00:08:22.310 --> 00:08:23.680
&gt;&gt; Speaker 2: Do dom events or DOM?

174
00:08:24.760 --> 00:08:28.570
One thing I was thinking of
is that we could subscribe

175
00:08:28.570 --> 00:08:33.178
to the dom node removed and then have
a complete on that for the element?

176
00:08:33.178 --> 00:08:40.700
&gt;&gt; Jafar Husain: So you're saying so
complete when the DOM element is removed?

177
00:08:40.700 --> 00:08:41.310
&gt;&gt; Speaker 2: Sure.

178
00:08:41.310 --> 00:08:43.170
&gt;&gt; Jafar Husain: Yeah, that's legitimate.

179
00:08:43.170 --> 00:08:47.850
Sure, of course the dom element could be
then added back into the scene, right?

180
00:08:47.850 --> 00:08:48.660
&gt;&gt; Speaker 2: Sure.
&gt;&gt; Jafar Husain: So maybe it's

181
00:08:48.660 --> 00:08:51.000
not super safe to complete just
because the dom elements been moved.

182
00:08:51.000 --> 00:08:52.900
Somebody might just be moving it.

183
00:08:52.900 --> 00:08:53.630
&gt;&gt; Speaker 2: Okay, yeah.

184
00:08:53.630 --> 00:08:56.500
&gt;&gt; Jafar Husain: So
I'm just gonna submit to you that well

185
00:08:56.500 --> 00:08:58.820
some event streams don't end, right?

186
00:08:58.820 --> 00:09:03.100
Just like all the natural
numbers don't end, right?

187
00:09:03.100 --> 00:09:05.500
Doesn't mean that we're, that's a problem.

188
00:09:05.500 --> 00:09:08.100
It's interesting to note
that because of laziness,

189
00:09:08.100 --> 00:09:10.740
we can deal with infinite streams of data.

190
00:09:10.740 --> 00:09:13.760
In fact, it's actually gonna be very
common that we deal with infinite streams

191
00:09:13.760 --> 00:09:18.880
of data and one of the most common sources
of infinite streams of data, dom events.

192
00:09:18.880 --> 00:09:20.060
Think about users.

193
00:09:20.060 --> 00:09:22.090
They can always click the button again.

194
00:09:22.090 --> 00:09:24.090
They can always move the mouse again.

195
00:09:24.090 --> 00:09:28.300
So, there's always the possibility
that we're gonna get another event.

196
00:09:28.300 --> 00:09:30.550
So, I think we're actually done.

197
00:09:30.550 --> 00:09:33.150
We don't, we're never gonna
get an error from a DOM event.

198
00:09:33.150 --> 00:09:36.940
Well, there's a little more
nuance conversation around that.

199
00:09:36.940 --> 00:09:40.730
Some dom events we can interpret
specific DOM events as errors.

200
00:09:40.730 --> 00:09:43.300
But I think for the purposes,
simple example were done.

201
00:09:43.300 --> 00:09:45.700
And so we got from event here.

202
00:09:45.700 --> 00:09:48.050
So we've got an example
of a hard observable, so

203
00:09:48.050 --> 00:09:49.340
why is this a hard observable?

204
00:09:49.340 --> 00:09:52.790
Even though it looks the same,
really structurally it's timeout.

205
00:09:53.890 --> 00:09:56.029
What makes this hot vs this?

206
00:09:58.120 --> 00:10:00.980
&gt;&gt; Speaker 2: You can miss
events if subscribe later?

207
00:10:00.980 --> 00:10:03.970
&gt;&gt; Jafar Husain: Yeah, it's because
frankly all we're doing is we're adapting

208
00:10:03.970 --> 00:10:08.120
an underlying data source that
happens to be hot into an observable.

209
00:10:08.120 --> 00:10:10.860
And therefore,
the observable itself is gonna be hot.

210
00:10:10.860 --> 00:10:14.980
Right, all we have done just hooking
up to what's truly a hot data source,

211
00:10:14.980 --> 00:10:15.602
the event stream.

212
00:10:15.602 --> 00:10:19.278
But when it's set time out because we
delayed doing the work until subscribe

213
00:10:19.278 --> 00:10:20.500
was called.

214
00:10:20.500 --> 00:10:22.980
We made sure that every
single time you subscribe,

215
00:10:22.980 --> 00:10:27.160
you're always gonna get a result, cuz we
kick off a timer just for you, right?

216
00:10:27.160 --> 00:10:29.890
We can't do that with a DOM event,
what would that even mean?

217
00:10:29.890 --> 00:10:33.000
So this is an example of a hot and
a cold observable right here.

218
00:10:33.000 --> 00:10:35.940
And we've seen that there's really
not much to observables, right?

219
00:10:35.940 --> 00:10:38.680
You do the work to set
up the subscriptions so

220
00:10:38.680 --> 00:10:39.640
that the observer gets data.

221
00:10:39.640 --> 00:10:41.260
And then when they call unsubscribe,

222
00:10:41.260 --> 00:10:44.220
you do the work to make sure they don't
get called anymore, and that's about it.

