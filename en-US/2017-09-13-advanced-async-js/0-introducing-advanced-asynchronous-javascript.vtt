WEBVTT

1
00:00:00.316 --> 00:00:02.884
&gt;&gt; Jafar Husain: Today we're gonna
be doing the advanced version of

2
00:00:02.884 --> 00:00:06.050
the async programming class in JavaScript.

3
00:00:06.050 --> 00:00:10.046
And I assume, most of you guys
have taken my last class by now.

4
00:00:10.046 --> 00:00:14.649
And if you did, you remember that we did
a lot of basic exercises, to sort of

5
00:00:14.649 --> 00:00:19.860
strengthen the basic skills about building
streams with functional programming.

6
00:00:19.860 --> 00:00:24.629
That was a little functions,
map, filter, reduce, merge, zip.

7
00:00:24.629 --> 00:00:26.303
And then at the tail end of the class,

8
00:00:26.303 --> 00:00:29.370
we talked about things like
the flattening operators.

9
00:00:29.370 --> 00:00:32.455
And today in class,
the idea is to dive deep, and

10
00:00:32.455 --> 00:00:35.028
do some pretty beefy problems, right?

11
00:00:35.028 --> 00:00:38.270
Using this stuff, more complex problems.

12
00:00:38.270 --> 00:00:40.949
Some maybe even more complex than
the average problem you run into at

13
00:00:40.949 --> 00:00:41.617
work everyday.

14
00:00:41.617 --> 00:00:44.690
But mostly again,
to just sorta strengthen those skills.

15
00:00:46.845 --> 00:00:51.190
&gt;&gt; Jafar Husain: So, with that in mind,
before we get into the really deep stuff,

16
00:00:51.190 --> 00:00:55.930
I actually find it can be really useful
to take about ten steps back, and

17
00:00:55.930 --> 00:00:57.900
go over the basics again.

18
00:00:57.900 --> 00:01:01.586
So the idea here is, presumably,
all of you guys have seen my class,

19
00:01:01.586 --> 00:01:04.014
I'm not gonna spend too
much time on review.

20
00:01:04.014 --> 00:01:07.112
But one thing I find really
valuable is actually,

21
00:01:07.112 --> 00:01:11.630
we're gonna be doing a minimal
implementation of RX in the class today.

22
00:01:11.630 --> 00:01:15.458
So we're actually gonna be implementing RX
from the ground up, and then we're gonna

23
00:01:15.458 --> 00:01:18.504
do subscription, and we're gonna
see how the code flows through.

24
00:01:18.504 --> 00:01:22.262
And see the relationship between
observers, subscriptions, observables, and

25
00:01:22.262 --> 00:01:25.930
then we're gonna get into those
beefy problems after that.

26
00:01:25.930 --> 00:01:31.493
So, here's the agenda that
we'll be talking about today.

27
00:01:31.493 --> 00:01:33.826
We're gonna discuss the interface changes,

28
00:01:33.826 --> 00:01:36.290
it's been a long strange
trip with observable.

29
00:01:36.290 --> 00:01:39.995
And since we did this class two years ago,
it was more of a niche topic.

30
00:01:39.995 --> 00:01:43.568
And now, I think a lot of folks out
there are using it because, well,

31
00:01:43.568 --> 00:01:46.320
it's kind of the way business
is done in Angular 2.

32
00:01:46.320 --> 00:01:49.977
So there's a lot of folks out there who
are familiar now with Observable, because

33
00:01:49.977 --> 00:01:53.801
of that reason, we're gonna do, as I said,
a minimal Observable Implementation.

34
00:01:56.080 --> 00:01:57.991
&gt;&gt; Jafar Husain: Then we're gonna
go over a real problem that we

35
00:01:57.991 --> 00:02:00.158
had to solve at Netflix
called Animations Allowed.

36
00:02:00.158 --> 00:02:05.360
I like it because it's hard, and so
I'm excited to see how you guys do on it.

37
00:02:05.360 --> 00:02:09.900
And a Reddit Image Viewer App, something
a little more practical, a little more

38
00:02:09.900 --> 00:02:14.067
everyday, but we're gonna build a whole
app ground up using RX for that.

39
00:02:14.067 --> 00:02:17.848
And if we have time at the end, we're
gonna talk a little bit about promises and

40
00:02:17.848 --> 00:02:19.350
how they relate to observables

