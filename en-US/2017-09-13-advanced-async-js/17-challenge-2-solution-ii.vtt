WEBVTT

1
00:00:00.970 --> 00:00:03.316
&gt;&gt; Jafar Husain: So now what do we have?

2
00:00:03.316 --> 00:00:04.729
Well, we've got this.

3
00:00:20.413 --> 00:00:21.391
&gt;&gt; Jafar Husain: What now, gentlemen?

4
00:00:22.990 --> 00:00:27.676
&gt;&gt; Speaker 2: It seems to be that there's
a problem that we're losing information

5
00:00:27.676 --> 00:00:30.411
about
&gt;&gt; Speaker 2: So

6
00:00:30.411 --> 00:00:35.640
the first observable ends while
the second observable is still running.

7
00:00:35.640 --> 00:00:37.766
So we have that one there.

8
00:00:40.507 --> 00:00:41.220
&gt;&gt; Jafar Husain: Mm-hm.

9
00:00:41.220 --> 00:00:42.665
&gt;&gt; Speaker 2: If you start
reducing this number,

10
00:00:42.665 --> 00:00:45.130
you're gonna hit zero
animations are allowed.

11
00:00:45.130 --> 00:00:48.213
Cuz every time one starts,
it goes negative.

12
00:00:48.213 --> 00:00:49.539
As the end, they go positive.

13
00:00:49.539 --> 00:00:53.088
When it hits zero,
you have animations are allowable.

14
00:00:53.088 --> 00:00:55.721
&gt;&gt; Jafar Husain: Yeah, so for
those at home who didn't hear that,

15
00:00:55.721 --> 00:00:59.737
I think your concern was don't we lose
the information that two observables

16
00:00:59.737 --> 00:01:01.571
overlap when we flatten them out?

17
00:01:01.571 --> 00:01:02.180
&gt;&gt; Speaker 2: Hooray.
&gt;&gt; Jafar Husain: But

18
00:01:02.180 --> 00:01:05.509
if we count the number of negative
ones in the stream, right,

19
00:01:05.509 --> 00:01:09.170
then we actually know how many
observables are currently running.

20
00:01:09.170 --> 00:01:13.320
So every single time we get a new number,
we can just sorta add them together.

21
00:01:13.320 --> 00:01:17.813
And then when we get to zero,
we know no tasks are currently running.

22
00:01:17.813 --> 00:01:18.519
You know what I did?

23
00:01:18.519 --> 00:01:20.126
&gt;&gt; Speaker 2: You ran-
&gt;&gt; Jafar Husain: I'm sorry?

24
00:01:20.126 --> 00:01:26.334
&gt;&gt; Speaker 2: But the problem is, okay,
if we look at our autumn flattened,

25
00:01:26.334 --> 00:01:33.750
ones are supposed to represent when
animations are allowed, correct?

26
00:01:33.750 --> 00:01:37.880
&gt;&gt; Jafar Husain: Well, when no tasks
are running, then an animation is allowed.

27
00:01:37.880 --> 00:01:41.746
But I'm just realizing here,
I kinda stupidly transposed my ones and

28
00:01:41.746 --> 00:01:44.760
negative ones,, which might make
this slightly less intuitive.

29
00:01:44.760 --> 00:01:47.110
I meant to put ones first and
negative ones second.

30
00:01:47.110 --> 00:01:48.300
Let me just fix that here.

31
00:01:49.850 --> 00:01:54.100
And one, basically at this point,
would indicate that a task has begun.

32
00:01:54.100 --> 00:01:57.180
And negative one would indicate
that a task has ended.

33
00:01:57.180 --> 00:02:00.140
And setting it up like this
makes them easy to count.

34
00:02:00.140 --> 00:02:00.870
&gt;&gt; Speaker 2: Right.

35
00:02:00.870 --> 00:02:04.613
&gt;&gt; Jafar Husain: So that's my fault,
I'm sorry about that, stupid mistake.

36
00:02:08.400 --> 00:02:10.888
&gt;&gt; Jafar Husain: So hopefully, that's
a little clearer and more intuitive.

37
00:02:16.941 --> 00:02:19.912
&gt;&gt; Jafar Husain: So now hopefully
it's clearer that we can just sort of

38
00:02:19.912 --> 00:02:20.710
count these.

39
00:02:33.536 --> 00:02:37.350
&gt;&gt; Jafar Husain: Right, so
hopefully that's clearer.

40
00:02:37.350 --> 00:02:40.044
So now,
how are we gonna get animationsAllowed,

41
00:02:40.044 --> 00:02:41.724
which looks like this recall?

42
00:02:43.974 --> 00:02:45.970
&gt;&gt; Speaker 2: Is it scan?

43
00:02:45.970 --> 00:02:47.630
&gt;&gt; Jafar Husain: Absolutely,
we wanna scan, right?

44
00:02:47.630 --> 00:02:50.160
Scan's for counting, for
keeping track of things.

45
00:02:50.160 --> 00:02:54.258
So we're gonna get a progressively
more accurate sense of how many tasks

46
00:02:54.258 --> 00:02:55.676
are currently running.

47
00:03:06.158 --> 00:03:07.130
&gt;&gt; Jafar Husain: So help me out here.

48
00:03:07.130 --> 00:03:08.336
What am I gonna put in my scan?

49
00:03:10.779 --> 00:03:12.844
&gt;&gt; Jafar Husain: By the way,
I should have mentioned earlier.

50
00:03:12.844 --> 00:03:15.365
You can give scan an initial value for

51
00:03:15.365 --> 00:03:19.280
the accumulator as a last parameter,
just like reduce.

52
00:03:19.280 --> 00:03:21.746
So I'm gonna pass in 0
as the initial value.

53
00:03:21.746 --> 00:03:24.880
I don't think I even need to here,
but I'm going to anyways.

54
00:03:24.880 --> 00:03:26.690
What do I wanna put in here?

55
00:03:27.940 --> 00:03:29.890
&gt;&gt; Speaker 2: Accumulator plus current.

56
00:03:29.890 --> 00:03:32.909
&gt;&gt; Jafar Husain: Yeah,
now what am I gonna end up with?

57
00:03:57.291 --> 00:03:58.350
&gt;&gt; Jafar Husain: Does that make sense?

58
00:03:59.850 --> 00:04:03.664
Cool, so
how am I gonna go from here to here?

59
00:04:06.448 --> 00:04:08.924
&gt;&gt; Speaker 2: Check if it's equal to 0.

60
00:04:08.924 --> 00:04:12.002
&gt;&gt; Jafar Husain: Check if it's equal to 0,
and then return,

61
00:04:12.002 --> 00:04:14.677
what specific operator am I gonna use?

62
00:04:17.333 --> 00:04:17.971
&gt;&gt; Speaker 2: Filter?

63
00:04:17.971 --> 00:04:19.218
&gt;&gt; Jafar Husain: Filter, yeah.

64
00:04:21.429 --> 00:04:22.591
&gt;&gt; Speaker 2: Yeah.

65
00:04:22.591 --> 00:04:25.973
&gt;&gt; Jafar Husain: Okay,
it sounds like we're a little tentative.

66
00:04:25.973 --> 00:04:31.558
But I'll use filter and value,
and I'm gonna return what?

67
00:04:37.458 --> 00:04:38.686
&gt;&gt; Jafar Husain: What am I filtering on?

68
00:04:40.875 --> 00:04:42.092
&gt;&gt; Speaker 2: It's equal to 0.

69
00:04:45.135 --> 00:04:47.227
&gt;&gt; Jafar Husain: Okay,
let's see what happens here.

70
00:05:02.990 --> 00:05:05.820
&gt;&gt; Speaker 2: Should we map
the booleans at this point?

71
00:05:05.820 --> 00:05:07.080
&gt;&gt; Jafar Husain: Yeah,
I don't think that got us,

72
00:05:07.080 --> 00:05:08.970
that didn't get us quite what we wanted.

73
00:05:08.970 --> 00:05:12.820
Cuz it seems like now we've lost the
places where we wanna switch it to false.

74
00:05:12.820 --> 00:05:13.433
&gt;&gt; Speaker 2: Right.

75
00:05:13.433 --> 00:05:15.161
&gt;&gt; Jafar Husain: [CROSSTALK] But
I think we're on the right track.

76
00:05:15.161 --> 00:05:16.026
Sorry?

77
00:05:16.026 --> 00:05:18.540
&gt;&gt; Speaker 2: It would map
it if it was equal to 0.

78
00:05:18.540 --> 00:05:19.650
&gt;&gt; Jafar Husain: Right, good call.

79
00:05:20.960 --> 00:05:23.838
So now we're gonna end up with,

80
00:05:55.766 --> 00:05:57.808
&gt;&gt; Jafar Husain: I think about that.

81
00:05:57.808 --> 00:06:01.267
I'll just shorthand the f here,
cuz it's using up a little too much space.

82
00:06:09.641 --> 00:06:10.174
&gt;&gt; Jafar Husain: Cool?
&gt;&gt; Speaker 2: And

83
00:06:10.174 --> 00:06:11.110
the last one will be true.

84
00:06:12.330 --> 00:06:13.591
&gt;&gt; Jafar Husain: Yeah, sorry, thank you.

85
00:06:16.139 --> 00:06:17.880
&gt;&gt; Jafar Husain: Cool, guys,
we're really close now.

86
00:06:17.880 --> 00:06:19.574
What was that?
&gt;&gt; Speaker 2: distinctUntilChanged at

87
00:06:19.574 --> 00:06:20.274
this point.

88
00:06:20.274 --> 00:06:22.065
&gt;&gt; Jafar Husain: distinctUntilChanged.

89
00:06:27.500 --> 00:06:31.366
&gt;&gt; Jafar Husain: So really the big leap on
that one was just realizing that we could

90
00:06:31.366 --> 00:06:35.734
count subscribes and completes by
concatenating data onto the front and

91
00:06:35.734 --> 00:06:37.470
the back of the observable.

92
00:06:37.470 --> 00:06:40.030
But after that,
I think it was relatively straightforward.

93
00:06:40.030 --> 00:06:41.630
That's what made it tough.

94
00:06:41.630 --> 00:06:43.859
So if we throw
distinctUntilChanged in there,

95
00:06:45.756 --> 00:06:47.033
&gt;&gt; Jafar Husain: We're good.

