WEBVTT

1
00:00:00.380 --> 00:00:01.770
&gt;&gt; Jafar Husain: And retries perhaps.

2
00:00:01.770 --> 00:00:04.640
This simple little operator
is one of the big reasons why

3
00:00:04.640 --> 00:00:06.980
observables are a lot more expressive and
powerful.

4
00:00:06.980 --> 00:00:09.890
For front end work in my
opinion than promises.

5
00:00:09.890 --> 00:00:12.630
And so we'll talk about promises later.

6
00:00:12.630 --> 00:00:15.720
But we're not going to go too
deeply into promises in this class.

7
00:00:15.720 --> 00:00:19.620
It's one thing I want to talk about in the
outset because a lot of you I think saw,

8
00:00:19.620 --> 00:00:22.860
those of you who read the course
description probably noticed that one of

9
00:00:22.860 --> 00:00:26.200
the things we were gonna focus on in this
class is async/await, and how promises and

10
00:00:26.200 --> 00:00:27.620
observables interact.

11
00:00:27.620 --> 00:00:29.420
I'm not gonna be doing that.

12
00:00:29.420 --> 00:00:35.590
Part of the reason for that is, who
here has heard of promise cancellation?

13
00:00:35.590 --> 00:00:36.740
Anybody?

14
00:00:36.740 --> 00:00:41.700
So, there is a proposal in front of the
TC39 JavaScript Committee, on which I sit.

15
00:00:41.700 --> 00:00:44.950
As well as a bunch of other folks
from Google and Mozilla, for

16
00:00:44.950 --> 00:00:48.690
enabling the cancellation of promises,
and unfortunately that fell through.

17
00:00:48.690 --> 00:00:51.740
So, as of today,
you can't cancel promises.

18
00:00:51.740 --> 00:00:56.120
Does anybody find that to be a problem,
big deal, not a big deal.

19
00:00:57.750 --> 00:01:02.650
So in general for front end work,
cancellation is not a rare thing.

20
00:01:02.650 --> 00:01:04.580
In fact it happens all the time.

21
00:01:04.580 --> 00:01:07.210
The thing about users, they're fickle.

22
00:01:07.210 --> 00:01:09.500
They change their minds all the time.

23
00:01:09.500 --> 00:01:13.170
So in practice what ends up
happening is if you use promises and

24
00:01:13.170 --> 00:01:17.660
now I've worked with developers on at
least three midsized to large projects who

25
00:01:17.660 --> 00:01:19.350
have used promises everywhere.

26
00:01:19.350 --> 00:01:22.400
And they very rapidly run
into this problem which is

27
00:01:22.400 --> 00:01:24.420
wait the user hit the back button right?

28
00:01:24.420 --> 00:01:28.990
So remember that example we talked about
earlier where I'll go to a form and

29
00:01:28.990 --> 00:01:32.240
then you show a loading bar and then
you make a request to load the data for

30
00:01:32.240 --> 00:01:34.870
that form and then somebody hits back?

31
00:01:34.870 --> 00:01:37.010
How do you handle that if it's a promise?

32
00:01:37.010 --> 00:01:39.660
Anybody have any ideas how we
would handle that with a promise?

33
00:01:40.800 --> 00:01:44.370
Let's say you've created a promise that's
gonna resolve, it's called resolve when it

34
00:01:44.370 --> 00:01:47.010
calls your call back,
when that data comes back from the server.

35
00:01:47.010 --> 00:01:50.440
Anybody have any ideas about how we could
avoid doing all the work associated with

36
00:01:50.440 --> 00:01:51.500
that promise being resolved,

37
00:01:51.500 --> 00:01:55.480
creating all those form elements,
showing the screen, etc.?

38
00:01:55.480 --> 00:01:56.540
Anybody have any ideas?

39
00:01:56.540 --> 00:01:59.100
&gt;&gt; Speaker 2: Use Bluebird
that has cancelable promises?

40
00:01:59.100 --> 00:02:00.010
&gt;&gt; Jafar Husain: That's a good one.

41
00:02:00.010 --> 00:02:02.320
Right, you could always use bluebird.

42
00:02:02.320 --> 00:02:05.360
Unfortunately, that's not gonna
integrate well necessarily with

43
00:02:05.360 --> 00:02:09.150
all the promises on the web that are not
cancelable, right, or the native promises.

44
00:02:09.150 --> 00:02:11.970
And so Bluebird has the notion
of cancelable promises.

45
00:02:11.970 --> 00:02:13.270
For a variety of reasons,

46
00:02:13.270 --> 00:02:16.850
the committee has decided not to
go in that particular direction.

47
00:02:16.850 --> 00:02:21.150
So in absence of the deus ex machina
of using a third party library,

48
00:02:22.340 --> 00:02:24.600
how would we cancel?

49
00:02:24.600 --> 00:02:31.130
Or if we can't cancel a promise, the best
we can do is we can just ignore it, right?

50
00:02:31.130 --> 00:02:32.800
So how would we ignore it?

51
00:02:32.800 --> 00:02:35.050
Like I wanna drum up some ideas here.

52
00:02:35.050 --> 00:02:38.050
How would I remember to ignore a promise?

53
00:02:38.050 --> 00:02:40.270
How I would I remember that
somebody's left the screen and

54
00:02:40.270 --> 00:02:43.400
I don't care about this promise anymore,
what would I do?

55
00:02:43.400 --> 00:02:44.740
How do we remember
the current subscription?

56
00:02:45.740 --> 00:02:47.420
&gt;&gt; Speaker 2: Can you use a closed state?

57
00:02:47.420 --> 00:02:49.210
&gt;&gt; Jafar Husain: Yeah,
you can close and state.

58
00:02:49.210 --> 00:02:52.170
And in fact, that is generally
how this problem is solved.

59
00:02:52.170 --> 00:02:55.340
People build up all these fancy
promise-based abstractions.

60
00:02:55.340 --> 00:02:57.870
And they use async/await,
which is some very, very nice syntax for

61
00:02:57.870 --> 00:02:59.840
something you probably shouldn't
be doing on the front end.

62
00:02:59.840 --> 00:03:02.152
And that's why it's so dangerous.

63
00:03:02.152 --> 00:03:07.110
So, this new study today the new fancy
syntax of async/await is so really nice,

64
00:03:07.110 --> 00:03:10.480
and pretty, and easy to use, and
you probably shouldn't use if for

65
00:03:10.480 --> 00:03:12.360
most use cases in the UI.

66
00:03:12.360 --> 00:03:16.382
That is a pretty dangerous thing, so the
committee has put ourselves in a position

67
00:03:16.382 --> 00:03:19.473
where we've built some very,
very nice attractive syntax for

68
00:03:19.473 --> 00:03:22.840
patterns that are probably not
a good idea on the front end.

69
00:03:22.840 --> 00:03:26.818
Does anybody love promises and they think
I'm just way off base here and I just

70
00:03:26.818 --> 00:03:31.970
don't get it and they wanna push back
&gt;&gt; Speaker 2: You changed my mind today.

71
00:03:31.970 --> 00:03:33.330
&gt;&gt; Jafar Husain: I
changed your mind today.

72
00:03:33.330 --> 00:03:37.830
Well we're gonna see how something
like switch latest is able to

73
00:03:39.070 --> 00:03:43.570
handle this without any state, right?

74
00:03:43.570 --> 00:03:45.141
The idea behind switch latest but

75
00:03:45.141 --> 00:03:49.459
we see inside of operators like retry it's
perfectly alright to have but basically

76
00:03:49.459 --> 00:03:53.580
we make the state somebody else's problem,
that's my favorite kind of problem.

77
00:03:53.580 --> 00:03:56.530
It's the problem of the RX library,
but our code,

78
00:03:56.530 --> 00:03:59.780
as we'll see later,
contains nothing but consts.

79
00:03:59.780 --> 00:04:02.020
All we're gonna be doing
is defining things and

80
00:04:02.020 --> 00:04:04.730
letting RX worry about
all the state internally.

81
00:04:04.730 --> 00:04:06.530
And because of the shape of observable,
and

82
00:04:06.530 --> 00:04:09.790
the fact that it's got this unsubscribe
concept that we've been building,

83
00:04:09.790 --> 00:04:13.460
it allows us to do that with
something like switchLatest.

84
00:04:13.460 --> 00:04:15.930
Promise unfortunately does not have that.

85
00:04:15.930 --> 00:04:21.280
And so while people want to build these
nice declarative UIs, they find themselves

86
00:04:21.280 --> 00:04:25.240
storing a bunch of state which is exactly,
what we're trying to get rid of.

87
00:04:25.240 --> 00:04:30.350
Because shared mutable state, shared
state where two independent asynchronous

88
00:04:30.350 --> 00:04:33.260
concurrent processes are looking at the
same piece of state and modifying them at

89
00:04:33.260 --> 00:04:37.420
the same time, it's perhaps the number
one source of bugs in concurrent apps.

90
00:04:37.420 --> 00:04:40.910
And so while promises were trying to get
you to write more declarative code, in

91
00:04:40.910 --> 00:04:45.288
practice you end up writing just as much
imperative code in UIs at least today,

92
00:04:45.288 --> 00:04:48.470
because you're always trying to
keep state to just keep track of

93
00:04:48.470 --> 00:04:50.550
what you don't really care about anymore.

94
00:04:50.550 --> 00:04:52.820
And observable says, well,

95
00:04:52.820 --> 00:04:55.850
why have state to keep track
of what you don't care about?

96
00:04:55.850 --> 00:04:57.700
Just get rid of it, right?

97
00:04:57.700 --> 00:05:01.510
And we're gonna see how that's done, but
I think you already have a little bit of

98
00:05:01.510 --> 00:05:03.240
an idea about how switch
latest enables that.

99
00:05:03.240 --> 00:05:07.780
If we had had promise cancellation in
the language, I would be talking to you

100
00:05:07.780 --> 00:05:11.910
right now about how to integrate between
cancelable promises and observable and

101
00:05:11.910 --> 00:05:15.330
used certain things for promises and
certain things for observables.

102
00:05:15.330 --> 00:05:18.440
Today in my official guidance to
you is please don't use promises on

103
00:05:18.440 --> 00:05:19.460
the front end.

104
00:05:19.460 --> 00:05:22.880
Despite the fact that they've got
a really nice syntax with async/await,

105
00:05:22.880 --> 00:05:25.110
they are probably setting yourself up for
failure.

