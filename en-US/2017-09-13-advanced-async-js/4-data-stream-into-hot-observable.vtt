WEBVTT

1
00:00:00.308 --> 00:00:03.460
&gt;&gt; Jafar Husain: Cold server
back to our time out, right?

2
00:00:03.460 --> 00:00:07.828
Which is now not racy, it's an ice cold
observable no matter when we subscribe,

3
00:00:07.828 --> 00:00:09.835
we're gonna get the notification.

4
00:00:09.835 --> 00:00:12.722
But notice that what if
we subscribe three times,

5
00:00:12.722 --> 00:00:17.479
we're gonna get three notifications and
three different set timeout handlers.

6
00:00:17.479 --> 00:00:20.162
So instead of all three of those
notifications coming [SOUND].

7
00:00:20.162 --> 00:00:23.019
Back to back, it's all going to
depend on when we subscribe.

8
00:00:23.019 --> 00:00:26.578
Each one is gonna start a separate
timer at a separate time.

9
00:00:26.578 --> 00:00:31.008
And I asked earlier,
why would we even want this behavior?

10
00:00:31.008 --> 00:00:34.983
Why wouldn't we always want the behavior
that I shared a moment ago where no matter

11
00:00:34.983 --> 00:00:37.880
when you subscribe,
you just get the same timeout result?

12
00:00:37.880 --> 00:00:42.201
So if I subscribe, five seconds later
[SOUND] instantly, it's gonna fire.

13
00:00:42.201 --> 00:00:44.498
Because I've saved that
fact that I've fired.

14
00:00:44.498 --> 00:00:47.435
And then I on next.

15
00:00:47.435 --> 00:00:48.746
&gt;&gt; Speaker 2: Real time data?

16
00:00:48.746 --> 00:00:50.021
Like mouse moves?

17
00:00:50.021 --> 00:00:50.665
&gt;&gt; Jafar Husain: Mouse moves.

18
00:00:50.665 --> 00:00:51.906
&gt;&gt; Speaker 2: Similar to
what happened moments ago.

19
00:00:51.906 --> 00:00:53.174
&gt;&gt; Jafar Husain: Right.
Well so, yeah.

20
00:00:53.174 --> 00:00:56.671
Sometimes I definitely would like,
I would like,

21
00:00:56.671 --> 00:01:02.054
I don't want all the mouse moves that
ever happened from the past in eternity.

22
00:01:02.054 --> 00:01:03.889
I want the latest stuff.

23
00:01:03.889 --> 00:01:08.085
But what if I'm doing, say,
a network request, right?

24
00:01:08.085 --> 00:01:11.619
If I have three people here interested
in the result of a network request,

25
00:01:11.619 --> 00:01:15.160
three different observers,
do I want three separate network requests?

26
00:01:15.160 --> 00:01:16.427
Maybe not.

27
00:01:16.427 --> 00:01:19.787
We'll get into this a little bit later,
and figure out how we avoid this.

28
00:01:19.787 --> 00:01:23.225
But I want to kinda help you guys
understand, that this is closer to observe

29
00:01:23.225 --> 00:01:26.336
both natural state, which is that
every time you false subscribe,

30
00:01:26.336 --> 00:01:28.321
you can expect that subscription to fire.

31
00:01:28.321 --> 00:01:34.205
Now we're gonna see how you can amortize
the work over multiple observers later on.

32
00:01:34.205 --> 00:01:36.955
So we've seen an example
of a cold observable,

33
00:01:36.955 --> 00:01:39.928
we turned a cold observable
into a hot observable.

34
00:01:39.928 --> 00:01:42.926
Now let's try taking a hot data source, so

35
00:01:42.926 --> 00:01:48.443
one of the ways in which creating a hot
observable is to adapt a hot data source.

36
00:01:48.443 --> 00:01:52.207
An example of a hot data source as
you pointed out, is an event stream.

37
00:01:52.207 --> 00:01:55.655
And this is a very important part
of any kind of RX programming.

38
00:01:55.655 --> 00:01:59.998
Is to find a way to take all those DOM
events and turn them into observables.

39
00:01:59.998 --> 00:02:06.159
So let's make ourselves
a static fromEvent function.

40
00:02:06.159 --> 00:02:08.766
Now, what do we think is going
to be in fromEvent function?

41
00:02:08.766 --> 00:02:11.461
Remember, our fromEvent is
gonna create an observable.

42
00:02:11.461 --> 00:02:15.866
That's gonna on next all of
the event objects and the DOM event.

43
00:02:15.866 --> 00:02:17.938
&gt;&gt; Speaker 2: The DOM ele, event, sorry.

44
00:02:17.938 --> 00:02:19.720
A DOM element and an event.

45
00:02:19.720 --> 00:02:24.160
&gt;&gt; Jafar Husain: DOM element,
and an event name, right?

46
00:02:24.160 --> 00:02:26.505
So given these two things and

47
00:02:26.505 --> 00:02:31.007
given the example we have up here,
help me out, guys.

48
00:02:31.007 --> 00:02:31.695
Yell it out.

49
00:02:31.695 --> 00:02:32.413
What am I gonna do?

50
00:02:32.413 --> 00:02:33.797
This is audience participation.

51
00:02:33.797 --> 00:02:34.443
How am I gonna do this?

52
00:02:34.443 --> 00:02:37.218
So first of all,
what's fromEvent gonna return?

53
00:02:37.218 --> 00:02:37.882
&gt;&gt; Speaker 3: An observable.

54
00:02:37.882 --> 00:02:39.319
&gt;&gt; Jafar Husain: An observable, right?

55
00:02:39.319 --> 00:02:41.519
That's gonna be a real common answer.

56
00:02:41.519 --> 00:02:45.701
In fact, it's almost always true that
every function returns an observable.

57
00:02:45.701 --> 00:02:51.033
Except for one, what's the only function
on an observable that doesn't return yet

58
00:02:51.033 --> 00:02:52.472
another observable?

59
00:02:52.472 --> 00:02:54.102
&gt;&gt; Speaker 3: Subscribe,
&gt;&gt; Jafar Husain: Subscribe.

60
00:02:54.102 --> 00:02:56.629
And that's how we know
we're done being lazy.

61
00:02:56.629 --> 00:02:59.383
We're done, just creating another
observable, which as we know,

62
00:02:59.383 --> 00:03:02.480
it's just a function waiting to be called,
hasn't done anything, right.

63
00:03:02.480 --> 00:03:07.536
We're done creating all these observables,
and we're ready to get the data out.

64
00:03:07.536 --> 00:03:09.088
So the answer is almost always,

65
00:03:09.088 --> 00:03:13.241
except if you're defining a subscribe that
we're returning in other observables.

66
00:03:13.241 --> 00:03:16.759
So that's a good heuristic, as we're
trying to figure out what to do here.

67
00:03:16.759 --> 00:03:22.660
So now we know that creating an observable
is really just defining one function,

68
00:03:22.660 --> 00:03:24.407
and that is subscribe.

69
00:03:24.407 --> 00:03:28.354
So looking at the set timeout example,
somebody brave help me out.

70
00:03:28.354 --> 00:03:29.918
What I'm I gonna do here for fromEvent?

71
00:03:32.144 --> 00:03:33.382
&gt;&gt; Speaker 2: Add an event listener.

72
00:03:33.382 --> 00:03:36.745
&gt;&gt; Jafar Husain: Add an event listener,
absolutely, to our DOM element, right?

73
00:03:36.745 --> 00:03:41.100
So we wanna add the event listener here or
here?

74
00:03:41.100 --> 00:03:42.508
25 or 27?

75
00:03:42.508 --> 00:03:43.822
And why?

76
00:03:46.111 --> 00:03:47.316
&gt;&gt; Speaker 2: 25.

77
00:03:47.316 --> 00:03:50.077
&gt;&gt; Jafar Husain: 25, okay.

78
00:03:50.077 --> 00:03:54.566
&gt;&gt; Speaker 2: The reasoning being that
you don't want to attach a new event

79
00:03:54.566 --> 00:03:57.656
listener every time that you subscribe.

80
00:03:57.656 --> 00:04:00.334
&gt;&gt; Jafar Husain: Okay, okay,
that's a good thought here.

81
00:04:00.334 --> 00:04:02.328
It's absolutely true that one way,

82
00:04:02.328 --> 00:04:05.558
we can basically do this the same
as we did with the timeout.

83
00:04:05.558 --> 00:04:08.889
We can put it outside, so
that as soon as you call fromEvent, you

84
00:04:08.889 --> 00:04:13.479
attach an event listener, because we don't
want to attach a bunch of event listeners.

85
00:04:13.479 --> 00:04:17.959
So that's actually a great idea, but what
I'm gonna do here is I'm actually gonna

86
00:04:17.959 --> 00:04:21.488
wait to do it until the subscription,
and we'll talk about why.

87
00:04:21.488 --> 00:04:25.112
So you will definitely get
multiple handles being attached to

88
00:04:25.112 --> 00:04:29.852
the subscription, but there's actually
this pattern of moving data out from in

89
00:04:29.852 --> 00:04:34.383
subscribe, and out into the operator to
kinda get basically make sure we turn

90
00:04:34.383 --> 00:04:36.912
it into a hot observable, and share work.

91
00:04:36.912 --> 00:04:39.797
There's actually a constant
pattern we can use so

92
00:04:39.797 --> 00:04:43.587
we can take observables that are lazy or
cold, and make them hot.

93
00:04:43.587 --> 00:04:47.188
And so instead of having to make
individual observables hot,

94
00:04:47.188 --> 00:04:49.203
later on we'll write a function.

95
00:04:49.203 --> 00:04:52.401
It can turn any cold
observable into a hot one.

96
00:04:52.401 --> 00:04:54.076
Does that make sense?

97
00:04:54.076 --> 00:04:58.130
So from now on, we're gonna try and
build cold observables.

98
00:04:58.130 --> 00:05:01.691
Well, excuse me, cold is the wrong word
to use here, basically, there's lazy and

99
00:05:01.691 --> 00:05:03.512
eager, and that's two separate things.

100
00:05:03.512 --> 00:05:07.269
A lazy observable is one that doesn't
do any work until you subscribe to it.

101
00:05:07.269 --> 00:05:11.703
In this context, if we were to do work up
here, we would be eagerly doing the work

102
00:05:11.703 --> 00:05:15.697
before, it's actually a separate
distinction between hot and cold.

103
00:05:15.697 --> 00:05:19.831
Remember, hot and cold just means,
hot means no matter when you subscribe,

104
00:05:19.831 --> 00:05:21.495
you might get different data.

105
00:05:21.495 --> 00:05:24.915
So if you subscribe five seconds later,
you might miss some click events.

106
00:05:24.915 --> 00:05:26.908
But cold means no matter
when you subscribe,

107
00:05:26.908 --> 00:05:28.644
you're going to get the same results.

108
00:05:28.644 --> 00:05:30.766
That's a slightly different
access than eager and lazy.

109
00:05:30.766 --> 00:05:34.515
Here we're gonna wait to do any work
until subscribe's actually called.

110
00:05:34.515 --> 00:05:37.281
And then later we'll talk about
how to take a cold observable,

111
00:05:37.281 --> 00:05:38.281
make it into a hot one.

112
00:05:38.281 --> 00:05:39.234
&gt;&gt; Speaker 2: Why is that?

113
00:05:39.234 --> 00:05:40.704
Why do we wanna wait?

114
00:05:40.704 --> 00:05:41.573
&gt;&gt; Jafar Husain: Why do we wanna wait?

115
00:05:41.573 --> 00:05:43.333
It's a good question.

116
00:05:43.333 --> 00:05:47.405
And this is a good question, really, that
goes to the heart of why be lazy, right?

117
00:05:47.405 --> 00:05:51.461
If you know you're gonna do the work,
why build up a bunch of functions and

118
00:05:51.461 --> 00:05:53.301
then eventually just call them?

119
00:05:53.301 --> 00:05:56.114
Why not just do the work, right?

120
00:05:56.114 --> 00:06:00.888
Well, a good example of why
you'd wanna be lazy is to give

121
00:06:00.888 --> 00:06:03.280
more power to the consumer.

122
00:06:03.280 --> 00:06:06.093
So the idea here is, let's say,

123
00:06:06.093 --> 00:06:10.920
can anybody build me an array
of all the natural numbers?

124
00:06:10.920 --> 00:06:17.400
How would I build all the integers,
can I do that?

125
00:06:17.400 --> 00:06:18.962
&gt;&gt; Speaker 2: With a generator?

126
00:06:18.962 --> 00:06:20.536
&gt;&gt; Jafar Husain: With a generator, well,

127
00:06:20.536 --> 00:06:23.614
I still can't build an array
with a generator, but

128
00:06:23.614 --> 00:06:28.494
that is a good example of a way in which I
could create a stream of all the integers.

129
00:06:28.494 --> 00:06:30.869
By using something like
a generator in Javascript.

130
00:06:30.869 --> 00:06:32.470
And for those of you who don't know,

131
00:06:32.470 --> 00:06:35.114
a generator is a little like
an iterator in other languages.

132
00:06:35.114 --> 00:06:36.655
The idea is, it's lazy.

133
00:06:36.655 --> 00:06:39.510
It doesn't produce a new
value until you ask for one.

134
00:06:39.510 --> 00:06:43.782
So you could produce all the integers
using a generator in Javascript.

135
00:06:43.782 --> 00:06:46.147
But I can't create an array
of all the integers.

136
00:06:46.147 --> 00:06:47.782
And the same likewise with observable.

137
00:06:47.782 --> 00:06:52.179
Let's say I create an observable
of all of the numbers.

138
00:06:52.179 --> 00:06:54.962
Can I do that?

139
00:06:54.962 --> 00:06:57.041
Can I create an observable of
all the natural numbers ever?

140
00:06:57.041 --> 00:06:58.920
Maybe we can build one right now.

141
00:07:07.659 --> 00:07:12.658
&gt;&gt; Jafar Husain: How would I do it?

142
00:07:12.658 --> 00:07:15.660
&gt;&gt; Speaker 2: You might want to start
by keeping track of what your initial

143
00:07:15.660 --> 00:07:16.268
number is.

144
00:07:16.268 --> 00:07:17.328
&gt;&gt; Jafar Husain: Yeah.

145
00:07:33.502 --> 00:07:40.142
&gt;&gt; Jafar Husain: I'll just
do that a while, yeah.

146
00:07:40.142 --> 00:07:44.306
Observable of all the natural numbers,
right?

147
00:07:44.306 --> 00:07:48.028
Well, the reality is I'm gonna run
into an integer overflow problem, but

148
00:07:48.028 --> 00:07:51.810
assuming this was Python or some
language which didn't have this problem,

149
00:07:51.810 --> 00:07:54.315
is that an observable of
all the natural numbers?

150
00:07:57.732 --> 00:08:01.325
&gt;&gt; Jafar Husain: Is it especially useful?

151
00:08:01.325 --> 00:08:02.084
Could it be?

152
00:08:02.084 --> 00:08:03.449
Well, I don't know.

153
00:08:03.449 --> 00:08:06.212
Well, the reason why something
like this might be useful,

154
00:08:06.212 --> 00:08:10.083
although you probably would implement it
slightly differently is that in the end,

155
00:08:10.083 --> 00:08:11.628
you could build this array of, or

156
00:08:11.628 --> 00:08:15.414
sorry, not array, but a generator or
an observable of all the natural numbers.

157
00:08:15.414 --> 00:08:19.109
And in the end, the consumer might
just simply say, I just need ten.

158
00:08:19.109 --> 00:08:20.745
And they might do something like.

159
00:08:29.689 --> 00:08:33.104
&gt;&gt; Jafar Husain: So the idea of being lazy
is that we don't wanna make decisions

160
00:08:33.104 --> 00:08:34.754
until we absolutely have to.

161
00:08:34.754 --> 00:08:38.444
So in the end I could build this huge,
huge dataset.

162
00:08:38.444 --> 00:08:42.379
But the consumer at the very end,
because they know best, they'll say,

163
00:08:42.379 --> 00:08:44.550
you know what, I only need a page of ten.

164
00:08:44.550 --> 00:08:46.517
And so that's why we want to be lazy.

165
00:08:46.517 --> 00:08:50.190
If I was to build an array and
do all the work up front, then frankly,

166
00:08:50.190 --> 00:08:52.201
the program would never terminate.

167
00:08:52.201 --> 00:08:56.042
So that's why it's sometimes good to be
lazy, and that's one of the things about

168
00:08:56.042 --> 00:08:59.398
observable that we like, the fact
that we can be lazy is more flexible.

169
00:08:59.398 --> 00:09:01.712
Than be eager cuz in the end, who knows?

170
00:09:01.712 --> 00:09:06.159
We might decide not to run it at all based
on some incoming conditions that happens,

171
00:09:06.159 --> 00:09:10.242
or it might decide to stop after getting
five values because we got an event.

172
00:09:10.242 --> 00:09:12.368
So thing like takeUntil for
those of you who are familiar.

173
00:09:12.368 --> 00:09:16.153
There's ways of listening to an observable
until another observable fires.

174
00:09:16.153 --> 00:09:18.058
And that's why being lazy is so powerful.

175
00:09:18.058 --> 00:09:21.644
It's usually a good idea to be lazy,
because you can

176
00:09:21.644 --> 00:09:26.306
always turn a lazy computation into
an eager one just by running it.

177
00:09:26.306 --> 00:09:28.432
But can I do the reverse?

178
00:09:28.432 --> 00:09:31.658
Can I turn something eager
into something lazy?

179
00:09:31.658 --> 00:09:33.459
I can, but it's more difficult.

180
00:09:33.459 --> 00:09:36.210
[LAUGH] The idea here is, not really.

181
00:09:36.210 --> 00:09:39.620
Once you've run a function, you can't
really stop that function from running.

182
00:09:39.620 --> 00:09:42.993
You've run it,
the cat's out of the bag, right?

183
00:09:42.993 --> 00:09:45.657
You can always kinda take a function and
wrap it in another function and

184
00:09:45.657 --> 00:09:48.334
make it lazy, but that's,
you still haven't run the function yet.

185
00:09:48.334 --> 00:09:50.403
Once you've run a function, it's running.

186
00:09:50.403 --> 00:09:55.006
Once I start running that function to
create an array of all the numbers, well,

187
00:09:55.006 --> 00:09:58.251
all I can do is pretty much
shut down my browser, right?

188
00:09:58.251 --> 00:10:01.002
Does that make sense,
why laziness is a powerful thing?

189
00:10:01.002 --> 00:10:04.371
It's because of things like TakeTen or
the ability to do paging,

190
00:10:04.371 --> 00:10:08.723
where the consumer can just gradually just
take what they want and then they can say,

191
00:10:08.723 --> 00:10:09.723
stop, I'm done.

192
00:10:09.723 --> 00:10:11.415
Makes sense?

193
00:10:11.415 --> 00:10:12.165
So good question.

194
00:10:12.165 --> 00:10:13.200
Really good question, actually.

