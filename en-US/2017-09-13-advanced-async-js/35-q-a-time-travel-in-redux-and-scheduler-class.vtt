WEBVTT

1
00:00:00.610 --> 00:00:02.360
&gt;&gt; Speaker 1: So
to implement time travel with this,

2
00:00:02.360 --> 00:00:04.870
could we just use the replay operator?

3
00:00:04.870 --> 00:00:06.830
&gt;&gt; Jafar Husain: You wouldn't
use replay for that.

4
00:00:06.830 --> 00:00:10.655
What you would do is, so
from a time travel perspective,

5
00:00:10.655 --> 00:00:13.935
the easiest thing to do
might be to just kick off.

6
00:00:13.935 --> 00:00:15.766
So there's a variety of things you can do.

7
00:00:15.766 --> 00:00:19.975
You can store the previous actions,
you can store all the previous states in

8
00:00:19.975 --> 00:00:23.746
an array, and then you can just
[SOUND] hoop to those states, right.

9
00:00:23.746 --> 00:00:25.920
I believe that's how time
trouble works in Redux.

10
00:00:25.920 --> 00:00:30.250
It just store all the previous, the key,
the secret sauce, is that if you notice

11
00:00:30.250 --> 00:00:33.780
here I'm not changing the state,
I'm creating a new state.

12
00:00:33.780 --> 00:00:37.610
I'm not modifying
the counter on last state,

13
00:00:37.610 --> 00:00:39.354
I'm creating a whole new state object.

14
00:00:39.354 --> 00:00:44.154
And because of that what Redux can do is
it can literally store every possible

15
00:00:44.154 --> 00:00:48.804
state object that's ever been generated
by your app, memory allowing,

16
00:00:48.804 --> 00:00:53.161
right, and then it can just [SOUND]
pop to any part in history and time.

17
00:00:53.161 --> 00:00:55.390
And that's one of the cool
things about Redux.

18
00:00:55.390 --> 00:00:57.450
So that's what he means
when he says time travel.

19
00:00:57.450 --> 00:00:59.320
Cuz you never end up modifying state,

20
00:00:59.320 --> 00:01:01.550
you've always preserved
all the old states.

21
00:01:01.550 --> 00:01:04.252
In debug mode, Redux can just
store all your old states and

22
00:01:04.252 --> 00:01:05.365
just [SOUND] hop to them.

23
00:01:09.811 --> 00:01:11.570
&gt;&gt; Jafar Husain: Any other questions?

24
00:01:11.570 --> 00:01:12.440
&gt;&gt; Speaker 1: On the chat,

25
00:01:12.440 --> 00:01:17.430
someone asked about if you could give
a note about RxJS scheduler class?

26
00:01:17.430 --> 00:01:18.390
&gt;&gt; Jafar Husain: Yeah, the scheduler.

27
00:01:18.390 --> 00:01:25.220
So a scheduler is a function that
decides when data, when code runs.

28
00:01:25.220 --> 00:01:28.630
So in general you're not gonna be using
schedulers directly for the most part.

29
00:01:29.950 --> 00:01:33.220
There are two functions that you use,

30
00:01:33.220 --> 00:01:35.440
that typically you use with,
to schedule things.

31
00:01:35.440 --> 00:01:39.198
So what do I mean when I
say decides when code runs?

32
00:01:39.198 --> 00:01:43.370
Well let's say I'm making an animation,
for

33
00:01:43.370 --> 00:01:48.880
example, right, and
I wanna make sure that the animation is,

34
00:01:48.880 --> 00:01:51.710
I basically only wanna do things
on request animation frame.

35
00:01:51.710 --> 00:01:52.510
Does that make sense?

36
00:01:53.730 --> 00:01:57.150
Right, so there's two things
you can do to an observable,

37
00:01:57.150 --> 00:02:01.270
rather two times you can schedule
something happening with an observable.

38
00:02:01.270 --> 00:02:05.319
So I can take an observable, you know
what, what the heck, let's write it.

39
00:02:08.523 --> 00:02:09.720
&gt;&gt; Jafar Husain: There's
two interesting methods.

40
00:02:09.720 --> 00:02:16.320
One is observeOn(scheduler) and

41
00:02:16.320 --> 00:02:19.180
SubscribeOn.

42
00:02:20.520 --> 00:02:22.830
So there's two times things
happen with an observable.

43
00:02:22.830 --> 00:02:24.540
One is when you subscribe.

44
00:02:24.540 --> 00:02:25.860
So if you subscribe to an observable,

45
00:02:25.860 --> 00:02:28.860
one thing that can happen is that
that subscription happens right away.

46
00:02:28.860 --> 00:02:32.220
You can also schedule
a subscription to occur.

47
00:02:32.220 --> 00:02:36.542
So when I say schedule I mean, let's say I
don't want the subscription to occur for

48
00:02:36.542 --> 00:02:37.800
500 milliseconds.

49
00:02:37.800 --> 00:02:40.630
In other words, I want a set time out and

50
00:02:40.630 --> 00:02:43.240
then actually cause
the subscription to occur.

51
00:02:43.240 --> 00:02:46.500
That's when I can use a scheduler and
I can call subscribe on.

52
00:02:46.500 --> 00:02:50.834
The other thing that I can do is when I
get a notification, an ie next complete

53
00:02:50.834 --> 00:02:54.930
an error, rather than getting them
as soon as the producer sends them.

54
00:02:54.930 --> 00:02:57.744
I can say, you know what,
schedule these notifications so

55
00:02:57.744 --> 00:03:01.260
they don't happen, say, until
the next tick or on the set time out.

56
00:03:01.260 --> 00:03:02.390
Does that make sense?

57
00:03:02.390 --> 00:03:05.650
So those are two times where
you can introduce concurrency,

58
00:03:05.650 --> 00:03:09.810
basically decide when you get
called inside of a function.

59
00:03:09.810 --> 00:03:11.199
So let's see how observeOn would work.

60
00:03:22.249 --> 00:03:24.724
&gt;&gt; Jafar Husain: So
you call observeOn on an observable.

61
00:03:36.864 --> 00:03:40.668
&gt;&gt; Jafar Husain: So we have this
observable, and whenever the observable

62
00:03:40.668 --> 00:03:45.182
sends a message to us, instead of
forwarding it on to the observer,

63
00:03:45.182 --> 00:03:48.686
we're actually gonna
schedule it to happen later.

64
00:03:48.686 --> 00:03:52.456
So I'm gonna go, it's the same
thing we've been doing up till now,

65
00:03:52.456 --> 00:03:54.151
I'm gonna subscribe to self.

66
00:03:57.739 --> 00:04:01.123
&gt;&gt; Jafar Husain: So if we just do this
we would be accomplishing nothing,

67
00:04:01.123 --> 00:04:04.294
we'd just be sending
the observer the next method.

68
00:04:06.622 --> 00:04:08.714
&gt;&gt; Jafar Husain: By the way,
a scheduler is nothing fancy,

69
00:04:08.714 --> 00:04:12.080
it is literally just like
a subscription or an observable.

70
00:04:12.080 --> 00:04:15.000
It's a function that's been
wrapped up to look like an object.

71
00:04:15.000 --> 00:04:16.710
Does that make sense?

72
00:04:16.710 --> 00:04:18.630
So it's just a function you call.

73
00:04:19.990 --> 00:04:23.220
The scheduler I'll use in this
will literally just be a function.

74
00:04:23.220 --> 00:04:26.427
It's a little more complicated in RxJS,
but the basic idea is here.

75
00:04:34.640 --> 00:04:37.890
&gt;&gt; Jafar Husain: All right, so
if we did this we basically no opt, right.

76
00:04:37.890 --> 00:04:40.660
All I'm doing is I'm just
forwarding stuff along.

77
00:04:41.940 --> 00:04:43.780
But if I do this,

78
00:05:06.012 --> 00:05:06.633
&gt;&gt; Jafar Husain: Right,

79
00:05:06.633 --> 00:05:11.076
now does anybody kinda get
a sense of what a scheduler does?

80
00:05:11.076 --> 00:05:15.116
Let's see if we can use
observeOn to ensure that

81
00:05:15.116 --> 00:05:19.362
an observable doesn't call us for
a few seconds.

82
00:05:22.460 --> 00:05:27.192
&gt;&gt; Jafar Husain: So I'm gonna create,
see, you know what, we never implemented

83
00:05:27.192 --> 00:05:31.680
the simplest constructor for
an observer, which is just of.

84
00:05:34.330 --> 00:05:36.840
Do that real quick cuz it will be easier.

85
00:05:36.840 --> 00:05:41.064
So remember of just takes a value,
it actually takes multiple values, but for

86
00:05:41.064 --> 00:05:43.380
this purpose for me to keep things simple.

87
00:05:46.293 --> 00:05:49.393
&gt;&gt; Jafar Husain: And
it's just gonna turn around and

88
00:05:49.393 --> 00:05:52.295
next that value to the observer.

89
00:06:05.026 --> 00:06:08.059
&gt;&gt; Jafar Husain: Now notice I'm just gonna
no op in the unsubscribe here because I've

90
00:06:08.059 --> 00:06:11.630
already delivered the two values before
I've even handed in the subscription.

91
00:06:11.630 --> 00:06:15.640
And that's one thing to understand,
that observable can be synchronous,

92
00:06:15.640 --> 00:06:17.500
it just it doesn't always
mean it's asynchronous.

93
00:06:17.500 --> 00:06:20.307
It's always about push,
it's not about asynchrony.

94
00:06:22.521 --> 00:06:26.261
&gt;&gt; Jafar Husain: When you're pushing in
Java script, because it's single threaded,

95
00:06:26.261 --> 00:06:28.503
you can be asynchronous if you want to,
but

96
00:06:28.503 --> 00:06:31.080
you can also just do
everything synchronously.

97
00:06:31.080 --> 00:06:36.540
So I can fire hose data at somebody when
they subscribe as soon as they subscribe.

98
00:06:36.540 --> 00:06:40.794
So now that I've built myself
a static factory function for

99
00:06:40.794 --> 00:06:44.622
an observable that just
onNext an individual value,

100
00:06:44.622 --> 00:06:48.295
let's see what happens
when we subscribe to that.

101
00:06:52.779 --> 00:06:54.741
&gt;&gt; Jafar Husain: Did I call next,
or complete?

102
00:06:54.741 --> 00:06:55.862
Does anybody remember?

103
00:06:55.862 --> 00:06:57.449
&gt;&gt; Speaker 1: Did an of.

104
00:06:57.449 --> 00:06:59.787
&gt;&gt; Jafar Husain: Yeah.
&gt;&gt; Speaker 1: Yes.

105
00:06:59.787 --> 00:07:01.202
&gt;&gt; Jafar Husain: Great.

106
00:07:01.202 --> 00:07:04.088
&gt;&gt; Speaker 1: But on line 81,
it said subscribe instead of unsubscribe.

107
00:07:04.088 --> 00:07:06.478
&gt;&gt; Jafar Husain: Line 81?

108
00:07:06.478 --> 00:07:08.696
Thank you.

109
00:07:24.259 --> 00:07:27.971
&gt;&gt; Jafar Husain: Right,
everybody understands and expects that?

110
00:07:27.971 --> 00:07:30.921
But let's say I don't wanna get
this message for five seconds.

111
00:07:53.499 --> 00:07:57.714
&gt;&gt; Jafar Husain: Try and
get that on one line.

112
00:07:58.961 --> 00:08:00.759
&gt;&gt; Jafar Husain: So
I've passed in a scheduler,

113
00:08:00.759 --> 00:08:04.954
and as we can see a scheduler's just
a glorified function that accepts some

114
00:08:04.954 --> 00:08:08.230
action, and
then executes it probably later on, right.

115
00:08:08.230 --> 00:08:10.790
In this case I'm just gonna
execute it in five seconds.

116
00:08:12.480 --> 00:08:17.176
And so if we run,
&gt;&gt; Jafar Husain: Should have picked

117
00:08:17.176 --> 00:08:21.281
a shorter time,
&gt;&gt; Jafar Husain: Right,

118
00:08:21.281 --> 00:08:24.441
all I did was instead of doing
the thing I wanted to do,

119
00:08:24.441 --> 00:08:27.881
I created a function which will
do the thing I wanted to do,

120
00:08:27.881 --> 00:08:31.182
and then I handed it to a scheduler,
which is nothing but

121
00:08:31.182 --> 00:08:36.190
a function that accepts an action, and
then the scheduler decides when it runs.

122
00:08:36.190 --> 00:08:39.590
I'm not gonna bother defining subscribeOn,
you guys kinda get the gist of it.

123
00:08:39.590 --> 00:08:43.410
The idea there is that you
provide a scheduler that, and

124
00:08:43.410 --> 00:08:46.530
then you basically provide the logic
behind subscribe inside of a function.

125
00:08:46.530 --> 00:08:49.496
You hand it to the scheduler and the
scheduler decides when subscribe applies.

126
00:08:49.496 --> 00:08:51.080
Why would I wanna use this?

127
00:08:51.080 --> 00:08:54.250
Well I'd want to use it if I wanted to
make sure that certain actions happened at

128
00:08:54.250 --> 00:08:55.380
certain times.

129
00:08:55.380 --> 00:08:58.590
A great example might be something
like request animation frame.

130
00:08:58.590 --> 00:09:02.861
So if I wanted to make sure that an action
happened on request animation frame,

131
00:09:02.861 --> 00:09:06.632
that I would say only wrote to
the canvas on request animation frame.

132
00:09:06.632 --> 00:09:12.472
I could observe an observable on a request
animation frame scheduler, and then I'm

133
00:09:12.472 --> 00:09:18.325
basically gonna wait to update the canvas
until request animation frame is called.

134
00:09:18.325 --> 00:09:21.192
Does that make sense?

135
00:09:22.272 --> 00:09:26.440
&gt;&gt; Jafar Husain: And that's 90% of what
you need to understand about schedulers.

136
00:09:26.440 --> 00:09:29.140
They're a little bit more complicated than
an object with a couple more methods,

137
00:09:29.140 --> 00:09:31.100
but that's the basic idea.

