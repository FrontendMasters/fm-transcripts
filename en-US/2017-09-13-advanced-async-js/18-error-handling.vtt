WEBVTT

1
00:00:00.350 --> 00:00:01.510
&gt;&gt; Speaker 1: What about errors?

2
00:00:01.510 --> 00:00:02.480
&gt;&gt; Jafar Husain: In this context,

3
00:00:02.480 --> 00:00:05.760
I think it's actually a good opportunity
to talk about error handling.

4
00:00:05.760 --> 00:00:08.030
&gt;&gt; Speaker 1: So
if any observable throws and error,

5
00:00:08.030 --> 00:00:11.477
doesn't that kill the whole-
&gt;&gt; Jafar Husain: It would.

6
00:00:11.477 --> 00:00:13.910
Is that what we want in this case,
you think?

7
00:00:13.910 --> 00:00:14.820
No, not really, right?

8
00:00:14.820 --> 00:00:18.070
I mean the platform errors,
maybe it's a big deal,

9
00:00:18.070 --> 00:00:22.420
but that's not really our problem,
at least, the problem of this routine,

10
00:00:22.420 --> 00:00:25.410
that's supposed to keep track of
whether animations are allowed or not.

11
00:00:25.410 --> 00:00:28.130
So I think it's a great thing to bring up.

12
00:00:28.130 --> 00:00:31.980
How would we, effectively,
ignore an error?

13
00:00:31.980 --> 00:00:34.490
So in this case, I would just
basically ignore an error, and

14
00:00:34.490 --> 00:00:35.582
treat it like a complete.

15
00:00:39.296 --> 00:00:41.188
&gt;&gt; Jafar Husain: Does anybody know
about any of the operators we

16
00:00:41.188 --> 00:00:43.600
have with observable for handling errors?

17
00:00:43.600 --> 00:00:46.664
There's a couple ones
that are super common.

18
00:00:46.664 --> 00:00:50.970
One is catch.

19
00:00:50.970 --> 00:00:55.402
So let's say I'm gonna denote in
observable the errors like this.

20
00:00:55.402 --> 00:00:56.874
In catch,

21
00:01:07.690 --> 00:01:09.072
&gt;&gt; Jafar Husain: And that'll give me this.

22
00:01:15.226 --> 00:01:16.750
&gt;&gt; Jafar Husain: Almost,
I got that almost right.

23
00:01:18.430 --> 00:01:22.610
So catch accept accepts a function which
accepts the error that occurred, and

24
00:01:22.610 --> 00:01:27.040
it returns a new observable to
resume from this observable.

25
00:01:27.040 --> 00:01:30.280
And that has effectively,
it's a little like a concat right?

26
00:01:30.280 --> 00:01:33.970
Cuz you're basically in the event of
an error instead of allowing the error to

27
00:01:33.970 --> 00:01:38.390
propagate through, you're concatenating on
some observable in place of that error and

28
00:01:38.390 --> 00:01:40.740
continuing on from that observable.

29
00:01:40.740 --> 00:01:45.510
Does that make sense,
&gt;&gt; Jafar Husain: Sorta?

30
00:01:45.510 --> 00:01:49.420
So let's see if we can
apply that to this problem.

31
00:01:49.420 --> 00:01:54.470
So we know that tasks, that any of these
individual tasks could error, right?

32
00:01:55.470 --> 00:01:58.190
So what do we wanna do in the event
any of these tasks error?

33
00:01:59.950 --> 00:02:04.020
So specifically this task right here,
any of these could on error.

34
00:02:04.020 --> 00:02:06.010
What would we have to do?

35
00:02:08.190 --> 00:02:10.270
&gt;&gt; Speaker 1: Return an empty observable.

36
00:02:10.270 --> 00:02:11.470
&gt;&gt; Jafar Husain: Return
an empty observable, so.

37
00:02:11.470 --> 00:02:12.270
&gt;&gt; Speaker 1: From the catch.

38
00:02:12.270 --> 00:02:14.565
&gt;&gt; Jafar Husain: From a catch, yeah.

39
00:02:14.565 --> 00:02:17.582
I don't care about the error, I'm just
gonna return an observable.empty and

40
00:02:17.582 --> 00:02:19.217
that's basically how you ignore errors.

41
00:02:19.217 --> 00:02:21.670
Not that I'm advocating for
that all the time, but

42
00:02:21.670 --> 00:02:23.908
in this particular
context it's a good idea.

43
00:02:23.908 --> 00:02:26.183
And that's how you ignore errors with RX.

44
00:02:26.183 --> 00:02:29.211
So this is the equivalent of,

45
00:02:37.036 --> 00:02:39.020
&gt;&gt; Jafar Husain: An irregular function.

46
00:02:39.020 --> 00:02:39.851
Does that make sense?

47
00:02:42.385 --> 00:02:44.220
&gt;&gt; Jafar Husain: Can anybody think
of something else I might do?

48
00:02:44.220 --> 00:02:46.225
In this context I wouldn't do this,

49
00:02:46.225 --> 00:02:50.313
but can anybody think of another way I
can handle an error in an observable?

50
00:02:50.313 --> 00:02:52.915
It's very common thing on the web
to handle an error this way.

51
00:02:54.745 --> 00:02:56.613
&gt;&gt; Jafar Husain: Let's say I make
a network request is gonna come up

52
00:02:56.613 --> 00:02:57.850
in the next example.

53
00:02:57.850 --> 00:03:00.310
Let's say I make a network request and
it fails.

54
00:03:02.160 --> 00:03:03.860
Generally speaking what do I want to do?

55
00:03:03.860 --> 00:03:05.943
Cuz it's the web and stuff happens.

56
00:03:07.832 --> 00:03:08.719
&gt;&gt; Speaker 1: Retry.

57
00:03:08.719 --> 00:03:12.060
&gt;&gt; Jafar Husain: Yeah I don't wanna just
give up, explain our message just yet.

58
00:03:12.060 --> 00:03:17.710
We know that servers even Netflix only
gets like three nines of resiliency so

59
00:03:17.710 --> 00:03:20.450
every now and then a request times out.

60
00:03:20.450 --> 00:03:25.654
So as a result we just wanna retry
a couple times, so we also have retry.

61
00:03:27.935 --> 00:03:30.420
&gt;&gt; Jafar Husain: And then you can put
in the number of times you wanna retry.

62
00:03:30.420 --> 00:03:34.420
So basically, what this is gonna do,
is it's gonna retry, which means that,

63
00:03:34.420 --> 00:03:38.270
when it fails, it's gonna resubscribe
to the original observable, and

64
00:03:38.270 --> 00:03:39.730
now we've come full circle.

65
00:03:39.730 --> 00:03:44.210
Let's talk about cold and hot observables
again, and lazy and eager observables.

66
00:03:44.210 --> 00:03:48.040
Remember, we talked about the idea,
of the fact that every time you

67
00:03:48.040 --> 00:03:51.210
subscribe to an observable, depending
on how you've written that observable,

68
00:03:51.210 --> 00:03:52.970
you could kick off
another network request.

69
00:03:54.010 --> 00:03:55.400
Well, this is where it pays off.

70
00:03:56.920 --> 00:04:00.189
Retry, just all it does it
subscribes if it gets an error,

71
00:04:00.189 --> 00:04:03.330
it just resubscribes to
the same observable.

72
00:04:03.330 --> 00:04:07.260
And in this case, it's absolutely you
want to kick off another network request.

73
00:04:07.260 --> 00:04:13.360
So this is another area where being lazy
is more powerful, because instead of

74
00:04:13.360 --> 00:04:17.070
doing something you've created a function
which can do something when you call it.

75
00:04:17.070 --> 00:04:20.530
You can call that function multiple times,
and that's how you retry.

76
00:04:20.530 --> 00:04:23.729
So if you get a promise,
you can't retry a promise,

77
00:04:23.729 --> 00:04:27.460
you have to go find whatever
function created that promise.

78
00:04:27.460 --> 00:04:30.510
Which who knows, could be 17
functions away in your program and

79
00:04:30.510 --> 00:04:33.900
then you need to find it and
you need to create another promise.

80
00:04:33.900 --> 00:04:38.390
Not so with an observable, so a great
example of where laziness pays off.

81
00:04:38.390 --> 00:04:40.449
So, do I have to implement retry or

82
00:04:40.449 --> 00:04:44.924
does everybody kind of get an idea of
how that would work, how retry works.

83
00:04:44.924 --> 00:04:46.984
Happy to implement it.

84
00:04:46.984 --> 00:04:47.838
Would we prefer that?

85
00:04:47.838 --> 00:04:49.360
Would we wanna take a look at it?

86
00:04:49.360 --> 00:04:50.590
Quick show of hands?

87
00:04:50.590 --> 00:04:54.400
Yeah, good, great, let's try retry.

88
00:04:54.400 --> 00:04:56.434
It's a fun little one to write, actually.

89
00:05:00.029 --> 00:05:01.440
&gt;&gt; Jafar Husain: And where did I put that?

90
00:05:01.440 --> 00:05:02.780
Here we go.

91
00:05:02.780 --> 00:05:03.550
Nope.

92
00:05:07.709 --> 00:05:10.234
&gt;&gt; Jafar Husain: So
let's throw in our retry operator.

93
00:05:16.903 --> 00:05:18.416
&gt;&gt; Jafar Husain: So
help me out with this, guys.

94
00:05:18.416 --> 00:05:20.464
What's retry gonna return?

95
00:05:20.464 --> 00:05:21.630
&gt;&gt; Speaker 1: New observable.

96
00:05:21.630 --> 00:05:26.176
&gt;&gt; Jafar Husain: [LAUGH] Good
default answer, I love it.

97
00:05:26.176 --> 00:05:29.704
What's going to happen when you
subscribe to this observable?

98
00:05:33.329 --> 00:05:37.030
&gt;&gt; Jafar Husain: So, when we call retry,
we create a new observable,

99
00:05:37.030 --> 00:05:40.999
that when subscribed to,
will subscribe to the source.

100
00:05:40.999 --> 00:05:42.788
And if it gets an error from the source,

101
00:05:42.788 --> 00:05:46.030
we'll re-subscribe to that source
a certain number of times.

102
00:05:46.030 --> 00:05:49.250
After which if it continues to
get an error, it will give up and

103
00:05:49.250 --> 00:05:51.480
forward the error downstream.

104
00:05:51.480 --> 00:05:54.780
So with that verbal description,
what am I gonna do here?

105
00:05:54.780 --> 00:05:58.792
It's a little bit like Map cuz we
need to subscribe to a source.

106
00:05:58.792 --> 00:06:01.480
So what's the first thing we gonna do,
cuz we're in JavaScript and

107
00:06:01.480 --> 00:06:03.806
it's maybe not the world's
best programming language.

108
00:06:03.806 --> 00:06:05.110
&gt;&gt; Speaker 3: Set self equal to this?

109
00:06:05.110 --> 00:06:05.610
&gt;&gt; Jafar Husain: Nice.

110
00:06:07.230 --> 00:06:11.420
&gt;&gt; Speaker 3: We need to have a handle
to the source observable i.e this, so

111
00:06:11.420 --> 00:06:13.310
that we can pull data out of it.

112
00:06:13.310 --> 00:06:18.578
So now that we've done that, how are we
gonna get data out of our source?

113
00:06:18.578 --> 00:06:19.852
&gt;&gt; Jafar Husain: Self.subscribe?

114
00:06:19.852 --> 00:06:25.749
&gt;&gt; Speaker 3: Self.subscribe
&gt;&gt; Jafar Husain: Great,

115
00:06:25.749 --> 00:06:28.930
so if we get data, what do we do with it?

116
00:06:28.930 --> 00:06:30.020
&gt;&gt; Speaker 1: Pass it along.

117
00:06:30.020 --> 00:06:31.258
&gt;&gt; Jafar Husain: Pass it right along.

118
00:06:32.995 --> 00:06:34.734
&gt;&gt; Jafar Husain: Just
gonna save this here.

119
00:06:36.430 --> 00:06:39.336
&gt;&gt; Jafar Husain: And if we get a complete
message, what are we gonna do?

120
00:06:41.349 --> 00:06:41.849
&gt;&gt; Speaker 3: Complete.

121
00:06:42.880 --> 00:06:43.870
&gt;&gt; Jafar Husain: Everybody's happy, right?

122
00:06:43.870 --> 00:06:47.240
If the sourceObservable
completes we're done-zo.

123
00:06:47.240 --> 00:06:48.284
But what if we get an error?

124
00:06:50.996 --> 00:06:52.670
&gt;&gt; Speaker 3: Retry and null minus 1.

125
00:06:52.670 --> 00:06:53.790
&gt;&gt; Jafar Husain: Retry, right?

126
00:06:53.790 --> 00:06:55.980
Okay so, and how am I gonna retry?

127
00:06:55.980 --> 00:07:04.360
Cuz I could take this whole thing and
I could paste it right here.

128
00:07:04.360 --> 00:07:05.690
That's one way of retrying, right?

129
00:07:05.690 --> 00:07:08.774
That when I get the error message,
I just re subscribe to self.

130
00:07:09.830 --> 00:07:11.910
What's a better way than copying and
pasting code?

131
00:07:11.910 --> 00:07:12.840
&gt;&gt; Speaker 3: Recursion.

132
00:07:12.840 --> 00:07:14.600
&gt;&gt; Jafar Husain: Recursion,
yes, for the win.

133
00:07:14.600 --> 00:07:21.644
All right, so we're going to do the same
thing we did earlier with our concat,

134
00:07:21.644 --> 00:07:26.558
we're gonna make a function
called processRequest,

135
00:07:26.558 --> 00:07:30.434
there's no need for
that not to be a const.

136
00:07:35.900 --> 00:07:40.635
&gt;&gt; Jafar Husain: Cool and now in
here we'll call a processRequest and

137
00:07:40.635 --> 00:07:43.872
then we try all over again, right?

138
00:07:52.346 --> 00:07:53.919
&gt;&gt; Jafar Husain: Okay,
what's not gonna work about this?

139
00:07:55.550 --> 00:07:56.410
&gt;&gt; Speaker 1: Should it be static?

140
00:07:57.600 --> 00:07:59.290
&gt;&gt; Jafar Husain: Should it be static?

141
00:07:59.290 --> 00:08:00.440
&gt;&gt; Speaker 1: Yeah.

142
00:08:00.440 --> 00:08:02.840
&gt;&gt; Jafar Husain: The processRequest
function?

143
00:08:02.840 --> 00:08:03.820
&gt;&gt; Speaker 1: The whole retry.

144
00:08:05.020 --> 00:08:07.950
&gt;&gt; Jafar Husain: Well, you want to
retry an individual observable.

145
00:08:07.950 --> 00:08:11.394
So in this case it wouldn't be static,
because let's say I just created

146
00:08:11.394 --> 00:08:13.828
an observable that represents
a network request.

147
00:08:13.828 --> 00:08:17.969
And then I just wanna go .retry and now
I have an observable that will make that

148
00:08:17.969 --> 00:08:20.940
network request n times
if there's a failure.

149
00:08:20.940 --> 00:08:24.500
So in this case it makes sense for
it to be a instance method.

150
00:08:24.500 --> 00:08:28.860
But I think we've picked
the right thing here, but

151
00:08:28.860 --> 00:08:30.070
as it is I don't think we're done.

152
00:08:30.070 --> 00:08:33.902
I mean I haven't returned
the subscription.

153
00:08:33.902 --> 00:08:35.550
&gt;&gt; Speaker 4: It'll also go infinitely.

154
00:08:35.550 --> 00:08:38.020
&gt;&gt; Jafar Husain: It'll also do it
infinitely if there's an error, right?

155
00:08:38.020 --> 00:08:39.510
That seems like a problem.

156
00:08:39.510 --> 00:08:41.120
And how do I know when to stop?

157
00:08:43.800 --> 00:08:47.460
&gt;&gt; Speaker 1: Can we at this time pass
in the value to the recursive function?

158
00:08:47.460 --> 00:08:48.260
&gt;&gt; Jafar Husain: Yeah, we can.

159
00:08:48.260 --> 00:08:49.850
I see where you're going with this.

160
00:08:49.850 --> 00:08:57.598
So I have num, if I pass num in there then
when I call processRequest recursively,

161
00:08:57.598 --> 00:09:03.907
maybe I shouldn't mask that variable,
currentAttemptNumber.

162
00:09:06.610 --> 00:09:07.206
&gt;&gt; Jafar Husain: So for starters,

163
00:09:07.206 --> 00:09:09.753
I have to actually run this function
otherwise nothing's gonna happen, so

164
00:09:09.753 --> 00:09:10.960
I'm just gonna call it once.

165
00:09:10.960 --> 00:09:15.850
And at first I'm gonna pass it in the same
number of retries that was requested.

166
00:09:18.460 --> 00:09:23.700
So after I've gotten one error,
what number am I gonna pass in here?

167
00:09:23.700 --> 00:09:24.470
&gt;&gt; Speaker 1: We decrement it.

168
00:09:25.590 --> 00:09:26.350
&gt;&gt; Jafar Husain: Decrement it?

169
00:09:27.840 --> 00:09:33.890
More specifically I will do this.

170
00:09:33.890 --> 00:09:35.460
And so how do I know when I'm done?

171
00:09:37.000 --> 00:09:37.930
&gt;&gt; Speaker 1: We check at the top.

172
00:09:39.590 --> 00:09:44.653
If it is the two negative 1 would be,
or is it 1.

173
00:09:44.653 --> 00:09:47.523
&gt;&gt; Jafar Husain: I think 0 in
this case cuz it's gonna be,

174
00:09:47.523 --> 00:09:52.240
I could be wrong, who knows,
off by one error if it happens.

175
00:09:52.240 --> 00:09:54.460
And yeah, question?

176
00:09:54.460 --> 00:09:55.350
&gt;&gt; Speaker 1: I have a question.

177
00:09:55.350 --> 00:09:59.140
Shouldn't it be static if it
is creating an observable?

178
00:10:00.480 --> 00:10:05.380
&gt;&gt; Jafar Husain: No, because Map creates
an observable, it's not static, right?

179
00:10:05.380 --> 00:10:07.710
Filter creates an observable,
it's not static.

180
00:10:07.710 --> 00:10:08.460
It's a good question.

181
00:10:08.460 --> 00:10:12.190
Why are some functions static and
some functions not static?

182
00:10:12.190 --> 00:10:14.710
In general, the functions that are static
are the ones that are creating

183
00:10:14.710 --> 00:10:18.530
an observable from nothing or
at least, from a couple of parameters.

184
00:10:18.530 --> 00:10:22.430
But once you already have an observable,
and you are transforming that observable

185
00:10:22.430 --> 00:10:24.500
that's generally when you want
to use an instance method.

186
00:10:24.500 --> 00:10:29.330
So you can go, my observable dot some
operation, dot some operation, etc.

187
00:10:29.330 --> 00:10:33.680
So as we can see here in
this static function timeout

188
00:10:33.680 --> 00:10:37.000
we didn't have an observable,
all we had was a time

189
00:10:37.000 --> 00:10:40.360
at which we wanted to create an observable
that would fire after that time.

190
00:10:40.360 --> 00:10:42.660
And so
that's why we have a static function.

191
00:10:42.660 --> 00:10:46.380
But in the case of Map what we're saying
is I have an observable with some data

192
00:10:46.380 --> 00:10:51.510
inside, I want to transform all of the
data in that observable into a new stream.

193
00:10:51.510 --> 00:10:54.940
And so Map takes Map as an instance
method on an observable,

194
00:10:54.940 --> 00:10:56.790
that creates a new observable.

195
00:10:56.790 --> 00:10:58.730
So that's why it's an instance method.

196
00:10:58.730 --> 00:11:03.030
Likewise with retry, I have some
observable that's gonna give me a stream.

197
00:11:03.030 --> 00:11:07.730
But if that stream should error, I might
wanna retry subscribing to that stream,

198
00:11:07.730 --> 00:11:12.210
and that's why retry is
an instance method on observable.

199
00:11:12.210 --> 00:11:15.240
But it's a great question,
so it's worth clarifying.

200
00:11:15.240 --> 00:11:18.963
Every recursion has the recursive case,
the case where we're repeating,

201
00:11:18.963 --> 00:11:21.189
and that's what we've handled right here.

202
00:11:22.606 --> 00:11:25.560
&gt;&gt; Jafar Husain: And it has a base case,
the case where we wanna stop.

203
00:11:25.560 --> 00:11:30.040
We always have to stop at some point,
otherwise that's no fun, right?

204
00:11:30.040 --> 00:11:32.140
So what do we do here when we stop?

205
00:11:35.040 --> 00:11:35.910
&gt;&gt; Speaker 1: Complete?

206
00:11:35.910 --> 00:11:37.370
&gt;&gt; Jafar Husain: Are we going to complete?

207
00:11:37.370 --> 00:11:40.920
So the way retry works
is if it gets an error,

208
00:11:40.920 --> 00:11:45.740
it tries to resubscribe, but after
a while, if it keeps getting an error,

209
00:11:45.740 --> 00:11:49.050
then instead of completing it
actually forwards the error along.

210
00:11:49.050 --> 00:11:51.480
So in this case, I would assume
that I would do something else.

211
00:11:51.480 --> 00:11:52.129
What would I do?

212
00:11:53.220 --> 00:11:53.830
&gt;&gt; Speaker 1: Error.

213
00:11:53.830 --> 00:11:55.270
&gt;&gt; Jafar Husain: Observer.error,
absolutely.

214
00:11:57.130 --> 00:12:01.030
And, no, where's my error object?

215
00:12:01.030 --> 00:12:01.770
Did I lose it?

216
00:12:01.770 --> 00:12:02.700
What happened?

217
00:12:02.700 --> 00:12:08.240
&gt;&gt; Speaker 1: It's inside of
the subscribe, self.subscribe.

218
00:12:08.240 --> 00:12:09.660
&gt;&gt; Jafar Husain: Right,
it was all the way down here.

219
00:12:09.660 --> 00:12:14.595
We called processRequest but
our little old error got lost,

220
00:12:14.595 --> 00:12:17.511
how are we going to keep track of it?

221
00:12:17.511 --> 00:12:21.550
&gt;&gt; Speaker 5: We could put
the logic check in the error.

222
00:12:23.180 --> 00:12:27.900
&gt;&gt; Jafar Husain: Cool,
I see where you're going here.

223
00:12:27.900 --> 00:12:29.800
We could do that.

224
00:12:29.800 --> 00:12:32.050
What is somebody puts in retry 0?

225
00:12:32.050 --> 00:12:34.330
Is that guy just a jerk?

226
00:12:34.330 --> 00:12:35.510
Should he not do that?

227
00:12:35.510 --> 00:12:38.080
Screw that guy, let's not worry about him,
let's put it in here.

228
00:12:38.080 --> 00:12:40.340
I think there might be a tidier
way of doing this but for

229
00:12:40.340 --> 00:12:41.750
now let's put this in here.

230
00:12:41.750 --> 00:12:49.163
So, if (currentAttemptNumber === 0) then.

231
00:12:55.852 --> 00:12:56.540
&gt;&gt; Jafar Husain: I like this better.

232
00:12:56.540 --> 00:12:57.140
I think you're right.

233
00:12:57.140 --> 00:13:05.402
It's nice
&gt;&gt; Jafar Husain: So

234
00:13:05.402 --> 00:13:07.835
here we will error.

235
00:13:15.052 --> 00:13:17.509
&gt;&gt; Jafar Husain: Cool,
does that make sense?

236
00:13:18.520 --> 00:13:19.035
Am I done?

237
00:13:22.822 --> 00:13:24.230
&gt;&gt; Speaker 1: Did we
return the subscription?

238
00:13:24.230 --> 00:13:24.932
&gt;&gt; Jafar Husain: No, we did not.

239
00:13:24.932 --> 00:13:27.454
&gt;&gt; Speaker 1: Or the other No,
we didn't return that subscription.

240
00:13:27.454 --> 00:13:29.480
&gt;&gt; Jafar Husain: So
I guess I'll just return the subscription.

241
00:13:30.620 --> 00:13:32.230
Wait, where is my subscription?

242
00:13:33.450 --> 00:13:36.750
&gt;&gt; Speaker 1: We can do the same
thing like we did in concat and

243
00:13:36.750 --> 00:13:37.710
keep track of it.

244
00:13:37.710 --> 00:13:40.480
&gt;&gt; Jafar Husain: Yeah, we could create
a reference to whatever the current

245
00:13:40.480 --> 00:13:43.669
subscription is
&gt;&gt; Jafar Husain: And just keep,

246
00:13:43.669 --> 00:13:46.210
whenever we subscribe,
again we could just reassign it.

247
00:13:47.590 --> 00:13:50.173
And then we can return a subscription

248
00:13:50.173 --> 00:13:56.900
object,
&gt;&gt; Jafar Husain: That just

249
00:13:56.900 --> 00:14:01.843
takes whatever the current subscription is
&gt;&gt; Jafar Husain: And

250
00:14:01.843 --> 00:14:04.055
then subscribes when it's called.

251
00:14:08.072 --> 00:14:10.809
&gt;&gt; Jafar Husain: Probably
have to null check that.

252
00:14:12.309 --> 00:14:15.002
&gt;&gt; Jafar Husain: I might not have to,
actually.

253
00:14:15.002 --> 00:14:16.034
I don't think I do.

