WEBVTT

1
00:00:00.900 --> 00:00:03.850
I wanna talk through
some possible solutions.

2
00:00:03.850 --> 00:00:07.190
So here's the image.js
file when it loads up.

3
00:00:07.190 --> 00:00:11.140
And here's this getSubImages,
which I have just used

4
00:00:12.560 --> 00:00:16.520
and here's where
the program really starts.

5
00:00:16.520 --> 00:00:17.251
At the moment,

6
00:00:17.251 --> 00:00:20.690
we have remember we talked about how
we do problem solving observables?

7
00:00:20.690 --> 00:00:24.445
We take the streams that we have and then
we try and figure out how to transform

8
00:00:24.445 --> 00:00:28.093
them, like we did in the previous example,
into the stream that we want.

9
00:00:28.093 --> 00:00:32.256
Before we do that, we have to figure
out what are the streams we want?

10
00:00:32.256 --> 00:00:34.633
What were the streams I would need for
an application like this?

11
00:00:34.633 --> 00:00:37.453
The ones that I wanna create,
not the ones that I have.

12
00:00:43.057 --> 00:00:44.421
In this particular context,

13
00:00:44.421 --> 00:00:48.860
I just wanna create a stream of all the
images to display, that's all I wanna do.

14
00:00:48.860 --> 00:00:52.972
Whenever it fires an image, I'm just
gonna display that image in my image done

15
00:00:52.972 --> 00:00:55.228
placeholder, and that's all I wanna do.

16
00:00:55.228 --> 00:00:57.769
I wanna create a stream
of images to display.

17
00:00:57.769 --> 00:01:01.247
Now what images come out of that scream
is gonna be halfway dependent on,

18
00:01:01.247 --> 00:01:04.211
whether the user presses the back
button or the next button and

19
00:01:04.211 --> 00:01:05.826
which sub image they're on etc.

20
00:01:05.826 --> 00:01:10.070
So I basically have to take all those
possible inputs of back and next, and

21
00:01:10.070 --> 00:01:14.451
sub render it and network response, and
I somehow have to co-list them into

22
00:01:14.451 --> 00:01:17.480
just one stream of images to display,
makes sense?

23
00:01:17.480 --> 00:01:21.944
And I'm also going to put
in this actions observable.

24
00:01:21.944 --> 00:01:24.470
As in whenever the user
performs any action,

25
00:01:24.470 --> 00:01:28.927
I'm actually just gonna display this
loading icon that I have onscreen that's

26
00:01:28.927 --> 00:01:30.938
gonna sit right on top of the image.

27
00:01:30.938 --> 00:01:33.345
And then once the image is loaded,

28
00:01:33.345 --> 00:01:37.673
I'm going to hide that loading icon,
is everybody see that?

29
00:01:37.673 --> 00:01:41.047
So whenever I display an image I
just hide the loading icon, and

30
00:01:41.047 --> 00:01:45.632
whenever the user initiates any action at
all, I display the loading icon, like so,

31
00:01:45.632 --> 00:01:46.860
does that make sense?

32
00:01:46.860 --> 00:01:51.196
So our job is to, right now I've just put
on a placeholder here for actions and

33
00:01:51.196 --> 00:01:52.946
systems Observable.empty.

34
00:01:52.946 --> 00:01:58.177
But basically we want actions to fires
whenever the users presses left,

35
00:01:58.177 --> 00:01:59.815
right, or picks sub.

36
00:01:59.815 --> 00:02:04.815
And furthermore, we want images to fire
whenever we have a new image to display

37
00:02:04.815 --> 00:02:09.286
based on what images are available and
what buttons the user clicked,

38
00:02:09.286 --> 00:02:10.747
does that make sense?

39
00:02:10.747 --> 00:02:16.565
So first of all, what streams do
we have to construct images with?

40
00:02:16.565 --> 00:02:21.763
So if we look up at the top of our
program we have five DOM elements.

41
00:02:21.763 --> 00:02:25.960
We have the next, a back,
a sub, which is a select box.

42
00:02:25.960 --> 00:02:30.697
So the currently selected option
in that sub is the thing we wanna

43
00:02:30.697 --> 00:02:32.110
pull the data for.

44
00:02:32.110 --> 00:02:35.633
And we have image, which is a DOM element
where we're gonna display when it changed

45
00:02:35.633 --> 00:02:38.580
a source of that image to display
the currently visible image.

46
00:02:38.580 --> 00:02:42.589
And finally, we have this loading image,
which we're just simply gonna hide and

47
00:02:42.589 --> 00:02:44.402
show depending on what's going on.

48
00:02:46.786 --> 00:02:50.453
So what are the interesting
events that make up images?

49
00:02:56.061 --> 00:02:57.108
&gt;&gt; Sub selection?.

50
00:02:57.108 --> 00:03:00.700
&gt;&gt; Sub selection, absolutely.

51
00:03:00.700 --> 00:03:02.466
Let's create a sub selection.

52
00:03:12.111 --> 00:03:15.220
Okay, how am I gonna get
the subs that are selected?

53
00:03:17.752 --> 00:03:19.465
&gt;&gt; fromEvent Observable?

54
00:03:19.465 --> 00:03:20.512
&gt;&gt; Yeah, I can use fromEvent.

55
00:03:20.512 --> 00:03:23.050
We wrote that earlier, remember?

56
00:03:23.050 --> 00:03:25.923
I pass in sub and
I think it's just change.

57
00:03:30.002 --> 00:03:36.330
But that's gonna give me event
objects that happened in the onChange.

58
00:03:36.330 --> 00:03:40.730
I do actually want the value
inside of the option though.

59
00:03:40.730 --> 00:03:42.010
So, how am I going to get it?

60
00:03:43.420 --> 00:03:45.346
&gt;&gt; Map the event.

61
00:03:45.346 --> 00:03:46.539
&gt;&gt; Yeah, I could map the event.

62
00:03:52.986 --> 00:03:55.945
Maybe it's target.value, I don't know.

63
00:03:55.945 --> 00:03:58.417
Let's try it and find out.

64
00:03:58.417 --> 00:04:02.235
So, if I wanna know what
an observable is gonna give me,

65
00:04:02.235 --> 00:04:04.930
how can I find out what data's inside?

66
00:04:04.930 --> 00:04:07.309
&gt;&gt; Subscribe to it.

67
00:04:07.309 --> 00:04:08.162
&gt;&gt; Yeah, subscribe to it.

68
00:04:08.162 --> 00:04:09.184
So I'll subscribe to it.

69
00:04:16.328 --> 00:04:18.650
I have no idea if it's gonna work but
let's try it.

70
00:04:24.326 --> 00:04:28.494
Okay, awesome, first try.

71
00:04:28.494 --> 00:04:30.551
All right, so
did everybody see what I did there.

72
00:04:30.551 --> 00:04:35.062
I changed the select box and then my
observable fired the new thing that was

73
00:04:35.062 --> 00:04:37.629
selected, which in this case is queued.

74
00:04:37.629 --> 00:04:41.718
I'll switch back to pics, so, cool.

75
00:04:41.718 --> 00:04:45.789
And it's that easy to take the select
box and turn it into a stream of all

76
00:04:45.789 --> 00:04:50.067
of the future values that will ever be
selected inside of that select box.

77
00:04:50.067 --> 00:04:51.739
Okay, now we're cooking.

78
00:04:51.739 --> 00:04:56.671
So we have a stream of all the subs, what
are the other streams we're interested in?

79
00:05:00.118 --> 00:05:01.452
&gt;&gt; Next and back buttons?

80
00:05:01.452 --> 00:05:04.028
&gt;&gt; Yeah, the next and back buttons.

81
00:05:04.028 --> 00:05:12.375
So we'll notice a little pattern here
where I take a singular DOM element.

82
00:05:12.375 --> 00:05:16.883
And then I create a plural stream
of events off of that DOM element.

83
00:05:16.883 --> 00:05:19.395
So I'm going to go to nexts, and,

84
00:05:41.273 --> 00:05:46.068
Looks like it's nextButton
instead of select.

85
00:05:46.068 --> 00:05:47.106
How did that even work?

86
00:05:50.490 --> 00:05:53.519
It's actually subSelect, but
apparently the browser or

87
00:05:53.519 --> 00:05:56.314
anything with an ID it just
creates that in the scope.

88
00:05:56.314 --> 00:06:01.207
Cuz I put in sub instead of subSelect,
but I'm assuming what happened is that

89
00:06:01.207 --> 00:06:04.987
the browser anything you give
an ID it just places in scope.

90
00:06:04.987 --> 00:06:09.163
So that shouldn't have worked, but or
I didn't expect it to work but it did.

91
00:06:09.163 --> 00:06:14.310
And likewise here I'm gonna put
a nextButton and backButton.

92
00:06:18.058 --> 00:06:21.740
Cool, any ideas about what to do next?

93
00:06:21.740 --> 00:06:24.660
Remember that we're trying to build
two streams, the stream of all

94
00:06:24.660 --> 00:06:29.380
the images to display, and the stream
of all the actions the user performs.

95
00:06:29.380 --> 00:06:34.348
When the user performs an action,
what do we wanna do immediately to

96
00:06:34.348 --> 00:06:38.979
give them feedback so
that they that something's happening.

97
00:06:43.955 --> 00:06:46.618
Yeah, we want to show a loading image,
right?

98
00:06:46.618 --> 00:06:50.364
So inside of it we had
an actions observable.

99
00:06:50.364 --> 00:06:52.636
Do we have everything we need
to make the actions observable?

100
00:06:56.530 --> 00:06:58.963
All right,
when do we wanna display loading?

101
00:06:58.963 --> 00:07:05.012
When they switch a sub, when they click
next, or when they click back, right?

102
00:07:05.012 --> 00:07:09.211
So I think we actually have everything
we need right now to create actions.

103
00:07:09.211 --> 00:07:10.847
How are we gonna do it?

104
00:07:10.847 --> 00:07:16.076
&gt;&gt; Concatenate the three Observables and
then display the loader,

105
00:07:16.076 --> 00:07:19.413
subscribe to that and spread the loader.

106
00:07:19.413 --> 00:07:22.609
&gt;&gt; So I'll settle this placeholder
right now, action's empty,

107
00:07:22.609 --> 00:07:31.450
I'm just gonna go subs, Like that?

108
00:07:31.450 --> 00:07:32.320
Is that the idea?

109
00:07:32.320 --> 00:07:37.149
Who thinks that's the right thing to do?

110
00:07:37.149 --> 00:07:41.968
&gt;&gt; So
should we use was it switch all instead

111
00:07:41.968 --> 00:07:46.512
of concat for so that they cancelled?

112
00:07:46.512 --> 00:07:49.627
It takes the latest or is that?

113
00:07:49.627 --> 00:07:53.868
&gt;&gt; Well in this case, so
switch latest, merge all, and

114
00:07:53.868 --> 00:07:57.280
concat all operate on streams of streams.

115
00:07:57.280 --> 00:08:00.209
In this case,
we actually just have three streams.

116
00:08:00.209 --> 00:08:04.505
And so the only functions available
to us are observable.merge and

117
00:08:04.505 --> 00:08:07.456
observable.concat, does that make sense?

118
00:08:07.456 --> 00:08:08.473
&gt;&gt; Yeah
&gt;&gt; So

119
00:08:08.473 --> 00:08:12.139
who feels like this is
the right way of doing it?

120
00:08:12.139 --> 00:08:15.537
Of getting-
&gt;&gt; Merge would be better because subs,

121
00:08:15.537 --> 00:08:18.420
next, and
back aren't going to complete ever.

122
00:08:18.420 --> 00:08:22.757
&gt;&gt; Right, it is generally a bad idea to
concatenate infinite streams together.

123
00:08:22.757 --> 00:08:25.519
You will never get to the second stream,
right?

124
00:08:25.519 --> 00:08:30.365
Is that clear to everyone, why I will
never ever get to next or backs?

125
00:08:30.365 --> 00:08:34.271
It's because concat, which we all know,
cuz we implemented it,

126
00:08:34.271 --> 00:08:38.272
will only move onto next and
backs when it gets a complete from subs.

127
00:08:38.272 --> 00:08:43.967
We can solve that problem by using merge,
I think that just might be the answer.

128
00:08:43.967 --> 00:08:46.575
The actions,
we're moving rather quickly here,

129
00:08:46.575 --> 00:08:49.980
I'm gonna have to come up with
new problems, let's check it out.

130
00:08:49.980 --> 00:08:54.454
What should happen is if I change
any of these variables we should see

131
00:08:54.454 --> 00:08:55.955
loading, cool.

132
00:08:55.955 --> 00:09:00.509
By the way, these are public domain
images, I'm sorry, they're ugly, but

133
00:09:00.509 --> 00:09:04.385
that's the best I could come up
with on short notice, so, great.

134
00:09:04.385 --> 00:09:05.768
That worked.

135
00:09:05.768 --> 00:09:09.701
So we're actually halfway there,
if you divide this into two observables,

136
00:09:09.701 --> 00:09:11.707
we're actually only like 5% there.

137
00:09:11.707 --> 00:09:14.969
The other one's the hard part,
so let's tackle that one.

