WEBVTT

1
00:00:00.380 --> 00:00:03.380
&gt;&gt; Jafar Husain: Now how do
we actually turn this in?

2
00:00:03.380 --> 00:00:06.410
Remember the end,
it's gonna be a flat stream of image URLs.

3
00:00:06.410 --> 00:00:11.450
Right now we have an observable
of arrays of images, right?

4
00:00:11.450 --> 00:00:12.990
So how are we gonna get closer?

5
00:00:12.990 --> 00:00:16.990
&gt;&gt; Speaker 2: We need to
pick one of the images.

6
00:00:16.990 --> 00:00:18.850
&gt;&gt; Jafar Husain: Yeah,
we need to pick one of the images.

7
00:00:18.850 --> 00:00:20.460
Which one are we gonna pick?

8
00:00:20.460 --> 00:00:21.837
Just start with any arrays.

9
00:00:21.837 --> 00:00:22.926
&gt;&gt; Speaker 2: The first one.
&gt;&gt; Jafar Husain: Yeah, why not?

10
00:00:22.926 --> 00:00:23.740
All right?
I like it.

11
00:00:25.370 --> 00:00:30.325
So okay, help me out.

12
00:00:30.325 --> 00:00:32.380
What am I gonna do here?

13
00:00:32.380 --> 00:00:35.260
&gt;&gt; Speaker 2: You can map
the images that describe.

14
00:00:35.260 --> 00:00:36.870
Sorry, just map.

15
00:00:36.870 --> 00:00:39.170
After you merge all, do a map.

16
00:00:39.170 --> 00:00:41.606
All images.

17
00:00:41.606 --> 00:00:43.981
&gt;&gt; Jafar Husain: Yeah, and now I have
an array of images right is that clear to

18
00:00:43.981 --> 00:00:44.650
everybody?

19
00:00:44.650 --> 00:00:47.470
Cuz it's an observable that
on next one single array

20
00:00:47.470 --> 00:00:49.290
of all the images
associated with that sub.

21
00:00:50.500 --> 00:00:52.090
So sorry bare with me.

22
00:00:52.090 --> 00:00:55.660
&gt;&gt; Speaker 2: Sure and
then just say images select zero?

23
00:00:56.840 --> 00:00:59.250
&gt;&gt; Jafar Husain: Yup, okay.

24
00:01:00.465 --> 00:01:04.652
Yup, now instead of images,
we're gonna get image, right?

25
00:01:12.489 --> 00:01:16.040
&gt;&gt; Jafar Husain: So
we got the first image, cool.

26
00:01:16.040 --> 00:01:19.340
I don't know how much closer we are, or

27
00:01:19.340 --> 00:01:22.430
how do we decide which of
the images we display?

28
00:01:22.430 --> 00:01:23.440
In this array of images.

29
00:01:24.670 --> 00:01:26.987
Like what controls which image we display?

30
00:01:30.282 --> 00:01:30.866
&gt;&gt; Speaker 3: Back and next?

31
00:01:30.866 --> 00:01:31.710
&gt;&gt; Jafar Husain: Back and next, right.

32
00:01:31.710 --> 00:01:34.826
We got this whole other two event
streams that we gotta pull in, and

33
00:01:34.826 --> 00:01:36.505
where do they factor in to all this?

34
00:01:40.513 --> 00:01:42.572
&gt;&gt; Jafar Husain: Any ideas?

35
00:01:42.572 --> 00:01:45.300
How are we gonna bring in those?

36
00:01:50.397 --> 00:01:54.404
&gt;&gt; Jafar Husain: What if we
could take next and back and

37
00:01:54.404 --> 00:01:59.870
turn them into a stream of offsets, right?

38
00:01:59.870 --> 00:02:04.830
What if every time you hit next we
want to move are over one, right?

39
00:02:04.830 --> 00:02:08.080
And every time you go back,
we wanna move -1.

40
00:02:08.080 --> 00:02:13.860
What if we could create a stream of
indexes that the user, has selected?

41
00:02:13.860 --> 00:02:18.230
Again, let's try and
think about it in smaller bits.

42
00:02:18.230 --> 00:02:19.030
Can we do that?

43
00:02:19.030 --> 00:02:21.700
What if I wanted to make offsets?

44
00:02:21.700 --> 00:02:23.499
How am I gonna do that for next box?

45
00:02:28.113 --> 00:02:32.516
&gt;&gt; Jafar Husain: So every time somebody
hit next, I want to admit 1, and

46
00:02:32.516 --> 00:02:36.555
every time somebody hits
back I want to admit -1.

47
00:02:36.555 --> 00:02:41.710
&gt;&gt; Speaker 2: Could map next to 1,
value of 1, static 1.

48
00:02:41.710 --> 00:02:43.280
And then back would be.

49
00:02:44.860 --> 00:02:52.064
And then you could also map back to static
value of -1 and then merge them together.

50
00:02:52.064 --> 00:02:53.719
&gt;&gt; Jafar Husain: Yep, I like it.

51
00:02:58.413 --> 00:03:00.273
&gt;&gt; Jafar Husain: Right,
we've got two observables.

52
00:03:00.273 --> 00:03:04.920
All right,
we are getting closer here I can feel it.

53
00:03:04.920 --> 00:03:10.585
So we have offsets,
now can I take a bunch of offsets 1,

54
00:03:10.585 --> 00:03:15.180
1, -1, -1 and turn them into indexes?

55
00:03:15.180 --> 00:03:18.337
&gt;&gt; Speaker 4: Scan it reduce it to index.

56
00:03:18.337 --> 00:03:21.908
&gt;&gt; Jafar Husain: Right, isn't that what we
did last time, we took a bunch of ones and

57
00:03:21.908 --> 00:03:22.793
negative ones.

58
00:03:22.793 --> 00:03:29.222
Now we scanned over them and
that's how we turned them into indexes.

59
00:03:29.222 --> 00:03:31.107
So I'm gonna create indices.

60
00:03:42.300 --> 00:03:46.568
&gt;&gt; Jafar Husain: All right, so
now we have a stream of indices Items in

61
00:03:46.568 --> 00:03:49.680
the array that we wanna be selecting.

62
00:03:51.160 --> 00:03:53.586
How are we gonna bring this
into our observable here?

63
00:03:56.578 --> 00:03:59.302
&gt;&gt; Jafar Husain: So at this point,
I'm not sure we want, so here we did, and

64
00:03:59.302 --> 00:04:01.140
this is a good exercise, right?

65
00:04:01.140 --> 00:04:02.875
Just like we did the subs, we said, well,

66
00:04:02.875 --> 00:04:04.634
what would I do with just
one value in the sub?

67
00:04:04.634 --> 00:04:08.601
And here we said, what would I do with
just one value in the images array?

68
00:04:08.601 --> 00:04:10.626
How do we generalize that over a stream?

69
00:04:18.130 --> 00:04:20.250
&gt;&gt; Speaker 2: Almost feel
like a zip operation.

70
00:04:20.250 --> 00:04:20.770
&gt;&gt; Jafar Husain: A zip?

71
00:04:20.770 --> 00:04:22.240
Okay, that's interesting.

72
00:04:22.240 --> 00:04:25.480
Because you're saying for
those of you who don't know a zip.

73
00:04:25.480 --> 00:04:29.750
You can take two collections and
combine them index wise.

74
00:04:29.750 --> 00:04:31.330
So if you have two
different collections and

75
00:04:31.330 --> 00:04:34.930
you go at each corresponding index
in one and combine them together.

76
00:04:34.930 --> 00:04:40.060
The weird thing is,
here we have an observable of offsets, and

77
00:04:40.060 --> 00:04:42.750
we have an array of images.

78
00:04:42.750 --> 00:04:45.439
We could probably do something with a zip.

79
00:04:47.570 --> 00:04:49.460
But, the problem is, that would imply,

80
00:04:49.460 --> 00:04:52.570
a zip only moves in one direction,
up the images, right?

81
00:04:52.570 --> 00:04:54.850
So I'm not sure that zip is the right.

82
00:04:54.850 --> 00:04:56.990
Because we need to be able to go back and
forward.

83
00:04:56.990 --> 00:04:59.340
So I don't think zip is
the right operation.

84
00:04:59.340 --> 00:05:01.030
By the way,
zip is named after zipper, right?

85
00:05:01.030 --> 00:05:03.070
Have you ever got a zipper
stuck on your jacket and

86
00:05:03.070 --> 00:05:04.610
you couldn't get it going any more?

87
00:05:04.610 --> 00:05:06.745
That's because a zip needs
an item from both sides.

88
00:05:10.850 --> 00:05:13.992
&gt;&gt; Jafar Husain: Okay, so
after we've got all these subimages,

89
00:05:13.992 --> 00:05:16.760
I'm gonna get rid of this flatten for now.

90
00:05:18.270 --> 00:05:19.920
Let's think through this.

91
00:05:19.920 --> 00:05:24.426
Instead of just returning
the array of subImages,

92
00:05:24.426 --> 00:05:30.514
what if we were to return a stream
of all the indexes in the subImages?

93
00:05:30.514 --> 00:05:31.845
How would we go about doing that?

94
00:05:38.260 --> 00:05:39.943
&gt;&gt; Jafar Husain: Well let's say I do this.

95
00:05:46.587 --> 00:05:48.308
&gt;&gt; Jafar Husain: So
now I have the array of images.

96
00:05:48.308 --> 00:05:53.770
And I have all the offsets in the array.

97
00:05:53.770 --> 00:05:55.610
How do I turn that into
a stream of images?

98
00:05:56.730 --> 00:06:00.590
So, given an array and
a stream of indices.

99
00:06:00.590 --> 00:06:02.776
How do I turn it into a stream of images?

100
00:06:04.113 --> 00:06:06.790
&gt;&gt; Jafar Husain: So I'll say that again.

101
00:06:06.790 --> 00:06:11.600
Given an array and
a stream of indexes into that array.

102
00:06:11.600 --> 00:06:14.094
How do I create a stream
of items in the array?

103
00:06:18.438 --> 00:06:23.780
&gt;&gt; Jafar Husain: Indices.map{ index.

104
00:06:23.780 --> 00:06:24.280
Help me out.

105
00:06:26.280 --> 00:06:27.850
&gt;&gt; Speaker 2: Where
does indices come from?

106
00:06:27.850 --> 00:06:28.420
&gt;&gt; Jafar Husain: Good question.

107
00:06:28.420 --> 00:06:29.510
Right here.

108
00:06:29.510 --> 00:06:30.270
&gt;&gt; Speaker 2: I see.

109
00:06:30.270 --> 00:06:31.050
&gt;&gt; Jafar Husain: We just built it, right?

110
00:06:31.050 --> 00:06:33.000
We took all necks and backs.

111
00:06:33.000 --> 00:06:34.310
We built off sets.

112
00:06:34.310 --> 00:06:35.740
And then we built indexes.

113
00:06:35.740 --> 00:06:38.840
By just scanning over them and
adding them to zero.

114
00:06:38.840 --> 00:06:41.250
And now, we've got ourselves and
array of all of the images.

115
00:06:41.250 --> 00:06:42.570
That we just retrieved from the sub.

116
00:06:42.570 --> 00:06:45.020
And now given an array.

117
00:06:45.020 --> 00:06:47.440
And stream of indexes into that array.

118
00:06:47.440 --> 00:06:50.100
How do I create a stream
of the items in the array.

119
00:06:50.100 --> 00:06:52.274
That correspond to the indexes
coming out of the stream.

120
00:06:54.995 --> 00:07:00.215
&gt;&gt; Speaker 3: Images &gt; SubImage or index.

121
00:07:00.215 --> 00:07:00.715
&gt;&gt; Jafar Husain: Yeah.

122
00:07:05.121 --> 00:07:07.200
&gt;&gt; Jafar Husain: How many dimensions
is this bad boy right here?

123
00:07:09.780 --> 00:07:10.740
&gt;&gt; Speaker 3: Two.

124
00:07:10.740 --> 00:07:11.620
&gt;&gt; Jafar Husain: Two.
Still two?

125
00:07:13.435 --> 00:07:16.300
&gt;&gt; Jafar Husain: Why do we think it's two?

126
00:07:16.300 --> 00:07:17.273
So everybody agree it's two?

127
00:07:20.005 --> 00:07:22.907
&gt;&gt; Speaker 3: Because
subs is a observable,

128
00:07:22.907 --> 00:07:27.490
and getSubImages.map
returns an observable.

129
00:07:27.490 --> 00:07:29.300
&gt;&gt; Jafar Husain: Yeah,
if you map over an observable,

130
00:07:29.300 --> 00:07:32.170
you get the dimensionality of observable,
right?

131
00:07:32.170 --> 00:07:37.222
And since before we had two,
this is two, this is also two,

132
00:07:37.222 --> 00:07:43.606
cuz we're just taking that observable and
transforming the data inside.

133
00:07:43.606 --> 00:07:47.171
We'll sill have a two
dimension observable.

134
00:07:47.171 --> 00:07:51.843
All right, so, if I was, I mean now we're
getting actually pretty darn close, right?

135
00:07:51.843 --> 00:07:56.650
We got like, if you hit next,
we should get an image out of there.

136
00:07:56.650 --> 00:07:59.760
I think this might even actually do
something at this point, if we try it out.

137
00:08:00.850 --> 00:08:04.530
&gt;&gt; Speaker 3: So we need subs.merge step

138
00:08:04.530 --> 00:08:05.590
to make it a-
&gt;&gt; Jafar Husain: I'm sorry,

139
00:08:05.590 --> 00:08:07.000
I forgot about the merge step, right?

140
00:08:07.000 --> 00:08:11.733
So merge all, so we take that
two-dimensional observable and

141
00:08:11.733 --> 00:08:13.169
we flatten it out.

142
00:08:14.420 --> 00:08:15.210
Let's try this.

143
00:08:15.210 --> 00:08:17.670
All right, I got fingers crossed here,
we're gonna get something.

