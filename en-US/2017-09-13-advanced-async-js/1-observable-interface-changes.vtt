WEBVTT

1
00:00:00.545 --> 00:00:02.660
&gt;&gt; Jafar Husain: Now, as I go,
I'm actually gonna ask for

2
00:00:02.660 --> 00:00:06.500
help from the class, ideas about
how we can implement these things.

3
00:00:06.500 --> 00:00:09.350
So what I'm gonna start with,
and by the way,

4
00:00:09.350 --> 00:00:13.650
I'm assuming everyone is familiar with ES6
and tax cuz I'll be doing a lot of that.

5
00:00:13.650 --> 00:00:15.376
If you guys are not familiar with it,

6
00:00:15.376 --> 00:00:18.215
I advise you to check out any
of the mini classes, I think, or

7
00:00:18.215 --> 00:00:21.467
at least one class on Frontend Masters,
that'll level you up here.

8
00:00:21.467 --> 00:00:23.813
So I'm gonna be using a lot
of error functions and

9
00:00:23.813 --> 00:00:25.540
occasionally some classes today.

10
00:00:26.690 --> 00:00:30.949
So let's start by building
the observable class.

11
00:00:30.949 --> 00:00:35.203
Can anybody remind me what's the method in
observable that allows me to get data out

12
00:00:35.203 --> 00:00:36.250
of the observable?

13
00:00:37.660 --> 00:00:38.630
&gt;&gt; Speaker 2: Subscribe.

14
00:00:38.630 --> 00:00:39.440
&gt;&gt; Jafar Husain: Subscribe, thank you.

15
00:00:40.470 --> 00:00:41.995
So let's build subscribe.

16
00:00:41.995 --> 00:00:44.140
And what does subscribe accept?

17
00:00:44.140 --> 00:00:45.130
&gt;&gt; Speaker 2: A function.

18
00:00:45.130 --> 00:00:47.020
&gt;&gt; Jafar Husain: A function?

19
00:00:47.020 --> 00:00:48.130
It's actually got an overload.

20
00:00:48.130 --> 00:00:51.656
So it can accept three functions,
or it can accept a?

21
00:00:51.656 --> 00:00:52.577
I showed it on the previous slide.

22
00:00:52.577 --> 00:00:53.830
&gt;&gt; Speaker 2: Subscriber.

23
00:00:53.830 --> 00:00:56.779
&gt;&gt; Jafar Husain: Subscriber, observer,
subscriber, basically the same thing.

24
00:00:56.779 --> 00:00:58.970
Yeah, some people call it subscriber.

25
00:00:58.970 --> 00:01:00.590
So I'm gonna build that in right here.

26
00:01:02.737 --> 00:01:06.679
&gt;&gt; Jafar Husain: Now, the key thing I'm
gonna try and drive home to you guys today

27
00:01:06.679 --> 00:01:12.490
is what observable really fundamentally
is, and that's actually it's a function.

28
00:01:12.490 --> 00:01:15.230
In fact, everything that you
can do with an observable

29
00:01:15.230 --> 00:01:19.110
can be built on top of this one function,
subscribe.

30
00:01:19.110 --> 00:01:20.707
So to create an observable,

31
00:01:20.707 --> 00:01:24.880
all you really need to to do is
you need to define subscribe.

32
00:01:24.880 --> 00:01:28.335
So when you create an observable, now,

33
00:01:28.335 --> 00:01:31.930
we can't define one subscribe function for
all possible observables.

34
00:01:31.930 --> 00:01:34.396
So instead I'm gonna pass
it into the constructor.

35
00:01:38.340 --> 00:01:39.841
&gt;&gt; Jafar Husain: And
we're just gonna store it away, like this.

36
00:01:43.174 --> 00:01:46.666
&gt;&gt; Jafar Husain: And when an observer
is passed into this observable,

37
00:01:46.666 --> 00:01:51.420
we're going to just call our
internal subscribe definition.

38
00:01:51.420 --> 00:01:52.815
Which we're gonna create and

39
00:01:52.815 --> 00:01:56.110
parametrize whenever we create a new
observable to the constructor.

40
00:01:56.110 --> 00:01:58.020
And we're just gonna plumb
that observer right through.

41
00:01:59.110 --> 00:02:01.529
And there we go, we have an observable.

42
00:02:02.670 --> 00:02:04.980
Now, of course,
this is just a shell, right?

43
00:02:04.980 --> 00:02:08.762
All the real work is gonna happen in these
implementations of subscribe that we're

44
00:02:08.762 --> 00:02:10.339
gonna pass on to the constructor.

45
00:02:12.311 --> 00:02:14.945
&gt;&gt; Jafar Husain: But we already have
enough here to do some useful and

46
00:02:14.945 --> 00:02:17.120
interesting functions.

47
00:02:17.120 --> 00:02:18.644
Before we go any further,

48
00:02:18.644 --> 00:02:23.077
one of the things we have to do in working
with observable is we gotta deal with

49
00:02:23.077 --> 00:02:26.980
the fact that most of the APIs out
there are callback APIs, right?

50
00:02:26.980 --> 00:02:30.067
So can anybody give me an example
of a callback API on the web?

51
00:02:34.411 --> 00:02:35.210
&gt;&gt; Jafar Husain: Come on, there's tons.

52
00:02:35.210 --> 00:02:36.121
&gt;&gt; Speaker 3: Instant timeout.

53
00:02:36.121 --> 00:02:38.600
&gt;&gt; Jafar Husain: Instant timeout,
I like that one.

54
00:02:38.600 --> 00:02:43.180
So what we often have to do when we
work with Rx is we have to adapt

55
00:02:43.180 --> 00:02:47.410
the callback APIs that are in
the browser into observables.

56
00:02:47.410 --> 00:02:52.390
So what we're gonna do right now is,
why don't we build a static

57
00:02:52.390 --> 00:02:57.107
timeout function,
which accepts a certain amount of time.

58
00:02:57.107 --> 00:03:01.118
And it's gonna return an observable
that is gonna on next and

59
00:03:01.118 --> 00:03:04.110
then on complete after
that period of time.

60
00:03:04.110 --> 00:03:06.390
So now we're getting into
the real heart things.

61
00:03:06.390 --> 00:03:10.363
So we know that timeout
returns an observable, right?

62
00:03:10.363 --> 00:03:14.300
So I'm gonna return a new observable, and
now this is where things get interesting.

63
00:03:14.300 --> 00:03:20.120
Inside of the constructor here, I'm gonna
pass in the definition of subscribe, i.e.,

64
00:03:20.120 --> 00:03:24.564
the thing I want to happen when somebody
calls subscribe on this observable.

65
00:03:24.564 --> 00:03:27.190
So what is the shape of subscribe,
what does it look like?

66
00:03:27.190 --> 00:03:29.799
We've got it up there.

67
00:03:29.799 --> 00:03:33.090
Let me get some line numbers going here,
bear with me.

68
00:03:33.090 --> 00:03:34.120
&gt;&gt; Speaker 3: Three callbacks.

69
00:03:34.120 --> 00:03:35.980
&gt;&gt; Jafar Husain: Three callbacks,
you're absolutely right.

70
00:03:35.980 --> 00:03:39.730
In fact, the version of Rx
that you guys will be using

71
00:03:39.730 --> 00:03:43.340
supports either passing three callbacks or
an observer.

72
00:03:43.340 --> 00:03:46.782
But frankly, to simplify things, we're
always just gonna accept an observer.

73
00:03:46.782 --> 00:03:48.437
And then later we'll use the real Rx, and

74
00:03:48.437 --> 00:03:51.010
you'll be able to optionally
pass three callbacks.

75
00:03:51.010 --> 00:03:52.041
As a matter of fact,

76
00:03:52.041 --> 00:03:56.314
under the hood, Rx just takes those three
callbacks, puts them into an observer.

77
00:03:58.612 --> 00:04:00.180
&gt;&gt; Jafar Husain: So
I'm gonna give it some line numbers here.

78
00:04:03.129 --> 00:04:04.860
&gt;&gt; Jafar Husain: Great, and
we didn't lose our code, excellent.

79
00:04:05.960 --> 00:04:09.040
So here we go, we have the definition
of subscribe right here, or

80
00:04:09.040 --> 00:04:10.940
at least the shape of subscribe.

81
00:04:10.940 --> 00:04:14.277
Subscribe accepts an observer,
and what does it return?

82
00:04:14.277 --> 00:04:15.065
Can somebody tell me?

83
00:04:18.552 --> 00:04:23.614
&gt;&gt; Speaker 4: A function
that removes the subscribe.

84
00:04:23.614 --> 00:04:26.364
&gt;&gt; Jafar Husain: Yes, a function, well, in
this case it's technically a subscription

85
00:04:26.364 --> 00:04:28.860
object, so let's take a quick
look at this definition.

86
00:04:28.860 --> 00:04:32.015
But subscription object is really just
a wrapper around one function, right?

87
00:04:32.015 --> 00:04:33.770
And what's that function?

88
00:04:33.770 --> 00:04:34.380
&gt;&gt; Speaker 4: Unsubscribe.

89
00:04:34.380 --> 00:04:38.740
&gt;&gt; Jafar Husain: Unsubscribe, so when you
subscribe to an observable, you're gonna

90
00:04:38.740 --> 00:04:43.430
return this object, a subscription, which,
again, just a wrapper around one function.

91
00:04:43.430 --> 00:04:47.400
And that function is the way in
which you're going to enable

92
00:04:47.400 --> 00:04:50.960
the consumer of the data who's
calling subscribe to unsubscribe, and

93
00:04:50.960 --> 00:04:53.150
therefore not get any more data anymore.

94
00:04:53.150 --> 00:04:55.720
So when we're building
a subscribe function for

95
00:04:55.720 --> 00:04:58.310
an observable,
we have to keep two things in our head.

96
00:04:58.310 --> 00:05:00.850
We have to say, okay,
well when they call subscribe,

97
00:05:00.850 --> 00:05:02.840
I have to set up a subscription, but

98
00:05:02.840 --> 00:05:08.380
I also have to return this subscription
object that allows them to unsubscribe.

99
00:05:08.380 --> 00:05:12.200
So whenever we build these operators,
we're gonna be doing both of those things.

100
00:05:12.200 --> 00:05:15.609
So here we go, I'm gonna pass in observer.

101
00:05:15.609 --> 00:05:17.641
In fact,
I won't run this with an error function,

102
00:05:17.641 --> 00:05:19.312
I'll actually make it a little clearer.

103
00:05:22.046 --> 00:05:24.737
&gt;&gt; Jafar Husain: So we're gonna pass in
a function here, a named function, and I'm

104
00:05:24.737 --> 00:05:28.201
gonna call it subscribe so it's clear that
that's really what we're defining here.

105
00:05:28.201 --> 00:05:29.036
Everybody see that?

106
00:05:32.634 --> 00:05:36.459
&gt;&gt; Jafar Husain: So now,
what am I gonna do?

107
00:05:36.459 --> 00:05:39.472
I've got myself an observer, how and when,

108
00:05:39.472 --> 00:05:43.687
more importantly, am I gonna send
it on next to that observer?

109
00:05:45.326 --> 00:05:49.860
&gt;&gt; Speaker 5: So you do like
a setTimeout and then observer.next.

110
00:05:49.860 --> 00:05:51.586
&gt;&gt; Jafar Husain: setTimeout, absolutely.

111
00:05:53.832 --> 00:05:56.320
&gt;&gt; Jafar Husain: And
I'm gonna give it the time.

112
00:05:56.320 --> 00:05:59.230
Notice I've got the time available
to me cuz I've closed over it.

113
00:06:00.630 --> 00:06:07.254
And then inside of this function,
I'm gonna call not on next but next.

114
00:06:07.254 --> 00:06:11.741
I'm gonna make that mistake several
times today, so you guys gotta catch me.

115
00:06:11.741 --> 00:06:13.646
And I'm not gonna on next anything.

116
00:06:13.646 --> 00:06:16.820
I'm just gonna on next undefined,
or next undefined.

117
00:06:16.820 --> 00:06:18.626
And now what, am I done?

118
00:06:23.343 --> 00:06:25.040
&gt;&gt; Speaker 5: Closing it or completing it?

119
00:06:25.040 --> 00:06:25.980
&gt;&gt; Jafar Husain: Yeah, complete, right?

120
00:06:25.980 --> 00:06:27.120
I mean, that's all they want.

121
00:06:27.120 --> 00:06:29.880
They want set timeout and
then they want a completed observable.

122
00:06:29.880 --> 00:06:30.715
So let's complete it.

123
00:06:33.036 --> 00:06:35.900
&gt;&gt; Jafar Husain: Awesome, awesome.

124
00:06:35.900 --> 00:06:37.412
So are we done?

125
00:06:37.412 --> 00:06:38.169
What's left?

126
00:06:43.516 --> 00:06:45.400
&gt;&gt; Speaker 6: I guess
we could put on error?

127
00:06:45.400 --> 00:06:46.470
&gt;&gt; Jafar Husain: On error, you're right.

128
00:06:46.470 --> 00:06:48.920
So one possibility is that we on error.

129
00:06:48.920 --> 00:06:51.290
Now, in this particular circumstance,
that's a great point.

130
00:06:51.290 --> 00:06:52.430
In this particular circumstance,

131
00:06:52.430 --> 00:06:54.620
though, is there any possibility
we're gonna on error?

132
00:06:56.390 --> 00:07:00.820
So not every observable can or
will on error because

133
00:07:00.820 --> 00:07:04.530
maybe the underlying operation,
the asynchronous operation, can't fail.

134
00:07:04.530 --> 00:07:08.490
In this case, setTimeout is not
reasonably ever gonna error.

135
00:07:08.490 --> 00:07:11.244
So in this case, we're probably
never gonna call observer on error.

136
00:07:11.244 --> 00:07:13.380
But that's a good guess.

137
00:07:13.380 --> 00:07:17.620
&gt;&gt; Speaker 6: The constructor,
doesn't it need to return a subscription?

138
00:07:17.620 --> 00:07:18.960
&gt;&gt; Jafar Husain: Yes, it does.

139
00:07:18.960 --> 00:07:19.870
We forgot something.

140
00:07:19.870 --> 00:07:21.750
And if we don't return a subscription,
what's gonna happen?

141
00:07:23.140 --> 00:07:25.209
Besides the fact that people
accept a subscription, and

142
00:07:25.209 --> 00:07:27.939
then they'll get a null reference
exception when they call unsubscribe.

143
00:07:27.939 --> 00:07:28.609
What'll happen?

144
00:07:32.755 --> 00:07:35.010
&gt;&gt; Speaker 4: The observable
will live forever?

145
00:07:35.010 --> 00:07:36.956
&gt;&gt; Jafar Husain: Well, it'll live forever.

146
00:07:36.956 --> 00:07:38.330
It depends on what you
mean by live forever.

147
00:07:38.330 --> 00:07:40.560
It's not that the subscription
will stay there forever,

148
00:07:40.560 --> 00:07:43.190
cuz the good thing about
the underlying setTimeout call is

149
00:07:43.190 --> 00:07:45.650
that when it calls you back,
it frees up your callback.

150
00:07:45.650 --> 00:07:48.566
So it's actually gonna be just fine,
It's gonna call us, and

151
00:07:48.566 --> 00:07:51.386
then there won't be any memory leaks or
anything like that.

152
00:07:51.386 --> 00:07:54.394
The problem is, if somebody decides
they don't want to get alerted

153
00:07:54.394 --> 00:07:57.930
after that period of time,
they have no way of not getting alerted.

154
00:07:57.930 --> 00:08:02.090
So how are we going to now
prevent that from happening?

155
00:08:02.090 --> 00:08:04.630
We have to return a subscription object.

156
00:08:04.630 --> 00:08:07.859
And a subscription object is just
an object with an unsubscribe method.

157
00:08:12.960 --> 00:08:16.241
&gt;&gt; Jafar Husain: Now, what are we gonna
do when they unsubscribe, though?

158
00:08:18.619 --> 00:08:20.383
&gt;&gt; Jafar Husain: How are we gonna
make sure that they never get called?

159
00:08:26.245 --> 00:08:27.440
&gt;&gt; Speaker 3: Cancel the timeout.

160
00:08:27.440 --> 00:08:30.500
&gt;&gt; Jafar Husain: Yeah,
clear timeout I think it is, right?

161
00:08:30.500 --> 00:08:35.190
Cool thing about JavaScript, or
the DOMs technically, setTimeout method,

162
00:08:35.190 --> 00:08:37.620
is it gives you a way of canceling.

163
00:08:37.620 --> 00:08:42.484
You can get a handle in the result,
and then you can call clearTimeout,

164
00:08:42.484 --> 00:08:45.090
I think it's clearTimeout, right?

165
00:08:47.632 --> 00:08:48.132
&gt;&gt; Jafar Husain: We'll find out.

166
00:08:50.110 --> 00:08:50.610
&gt;&gt; Speaker 3: Yeah, it is.

167
00:08:51.680 --> 00:08:55.610
&gt;&gt; Jafar Husain: And now, here we have
a full observable implementation.

168
00:08:55.610 --> 00:08:56.550
And when it, yeah?

169
00:08:56.550 --> 00:08:57.330
&gt;&gt; Speaker 4: So is timeout,

170
00:08:57.330 --> 00:09:01.470
is that sort of just a factory
function on the class then?

171
00:09:01.470 --> 00:09:03.500
&gt;&gt; Jafar Husain: It is,
because it's a factory function,

172
00:09:03.500 --> 00:09:05.240
it can return us an observable.

173
00:09:05.240 --> 00:09:10.257
And if I call timeout 50 times, I'm gonna
get how many observables, based on this?

174
00:09:10.257 --> 00:09:10.776
&gt;&gt; Speaker 4: 50.

175
00:09:10.776 --> 00:09:11.276
&gt;&gt; Jafar Husain: 50, yeah.

