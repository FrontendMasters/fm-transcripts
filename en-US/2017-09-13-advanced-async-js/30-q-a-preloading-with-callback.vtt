WEBVTT

1
00:00:00.280 --> 00:00:01.610
&gt;&gt; Jafar Husain: We got
remote image viewer.

2
00:00:01.610 --> 00:00:04.100
Thanks a lot guys,
most of you guys wrote that, I think.

3
00:00:04.100 --> 00:00:07.230
You wanna help me out with
any questions that you had?

4
00:00:07.230 --> 00:00:09.920
Anything you were wanting to cover
that we didn't get a chance to

5
00:00:09.920 --> 00:00:11.420
cover within reason, yeah?

6
00:00:11.420 --> 00:00:14.240
&gt;&gt; Speaker 2: If it's not too much
trouble, could be re-implement the image

7
00:00:14.240 --> 00:00:18.560
preloader using the callback
form rather than the event form?

8
00:00:18.560 --> 00:00:20.490
&gt;&gt; Jafar Husain: You mean like-
&gt;&gt; Speaker 2: Rather than using

9
00:00:20.490 --> 00:00:21.530
from event?

10
00:00:21.530 --> 00:00:25.651
&gt;&gt; Jafar Husain: Yeah, so in order to do
that I would probably have to construct

11
00:00:25.651 --> 00:00:29.712
an observable myself in the same
way that we've been doing.

12
00:00:29.712 --> 00:00:31.624
Is that what you would like to try doing?

13
00:00:31.624 --> 00:00:32.593
&gt;&gt; Speaker 2: It's not too much.

14
00:00:32.593 --> 00:00:34.624
&gt;&gt; Jafar Husain: Not at all, no no.

15
00:00:34.624 --> 00:00:38.635
So in our little tiny version of RX,
remember we

16
00:00:38.635 --> 00:00:43.265
would create a new observable by passing
a subscribed function to the constructor.

17
00:00:43.265 --> 00:00:47.387
When you're working with RealRX, if you
wanna create your own observable from

18
00:00:47.387 --> 00:00:50.911
the ground up by defining subscribe,
you go Observable.create.

19
00:00:50.911 --> 00:00:54.465
And Observable.create just basically
accepts the subscribed definition.

20
00:00:54.465 --> 00:00:56.188
So it's no different than
passing under the constructor.

21
00:01:00.273 --> 00:01:03.063
&gt;&gt; Jafar Husain: And to be honest,
this will be even simpler, but

22
00:01:03.063 --> 00:01:04.980
there's more that can go wrong.

23
00:01:04.980 --> 00:01:09.370
So in general,
I like to combine smaller items and

24
00:01:09.370 --> 00:01:13.380
use this approach of building
the observable by defining subscribe as

25
00:01:13.380 --> 00:01:16.890
only a last resort, when you can't get
the composition operators to work.

26
00:01:16.890 --> 00:01:19.210
So here it's actually gonna
be a shorter code though.

27
00:01:19.210 --> 00:01:20.884
So I'm gonna create my image.

28
00:01:27.179 --> 00:01:28.330
&gt;&gt; Jafar Husain: And I'm gonna say,

29
00:01:48.919 --> 00:01:49.621
&gt;&gt; Jafar Husain: All right,

30
00:01:49.621 --> 00:01:51.410
well maybe shorter but.

31
00:01:51.410 --> 00:01:53.580
So I'm halfway done, what am I missing?

32
00:01:54.650 --> 00:01:57.800
Remember this is the definition
of subscribe, what am I missing?

33
00:01:57.800 --> 00:01:58.770
&gt;&gt; Speaker 2: Unsubscribe.

34
00:01:58.770 --> 00:01:59.840
&gt;&gt; Jafar Husain: Unsubscribe, exactly.

35
00:02:02.124 --> 00:02:04.149
&gt;&gt; Jafar Husain: So
I think I'm going to have to,

36
00:02:04.149 --> 00:02:07.074
there might be a quicker
way of doing this, but

37
00:02:07.074 --> 00:02:11.658
think I'm gonna have to factor these
functions out into a variable.

38
00:02:11.658 --> 00:02:13.195
You know what, I can avoid this.

39
00:02:15.462 --> 00:02:16.854
&gt;&gt; Jafar Husain: I'll just
set them to undefined.

40
00:02:19.977 --> 00:02:24.052
&gt;&gt; Jafar Husain: By the way also, because
a subscription is just a object clothing

41
00:02:24.052 --> 00:02:28.425
for a single function, Observable.create
allows you to return just

42
00:02:28.425 --> 00:02:31.680
the definition of
the unsubscribe function.

43
00:02:31.680 --> 00:02:38.530
So I'm basically gonna pass in,
write that so it's clear.

44
00:02:38.530 --> 00:02:46.910
But,
&gt;&gt; Jafar Husain: I think that'll work.

45
00:02:49.660 --> 00:02:51.354
&gt;&gt; Jafar Husain: I don't
wanna get too fancy.

46
00:03:04.036 --> 00:03:05.259
&gt;&gt; Jafar Husain: Everybody
comfortable with that?

47
00:03:09.321 --> 00:03:11.780
&gt;&gt; Jafar Husain: All right,
ideally a last resort.

48
00:03:13.340 --> 00:03:16.031
Well lets stay honest and
make sure that it actually works here.

49
00:03:16.031 --> 00:03:17.232
And what am I missing though?

50
00:03:20.335 --> 00:03:21.300
&gt;&gt; Speaker 2: Uncomplete.

51
00:03:21.300 --> 00:03:23.730
&gt;&gt; Jafar Husain: Yeah, right,
otherwise this variable won't end.

52
00:03:23.730 --> 00:03:27.004
So in both these cases I need to complete.

53
00:03:34.803 --> 00:03:39.370
&gt;&gt; Jafar Husain: And let's keep ourselves
honest and actually try that this works.

54
00:03:39.370 --> 00:03:44.490
&gt;&gt; Speaker 2: So in our specific case,
we aren't like paying attention

55
00:03:44.490 --> 00:03:50.890
to an uncomplete, but to follow good
pattern we would need to implement it?

56
00:03:50.890 --> 00:03:53.290
&gt;&gt; Jafar Husain: Well maybe we aren't,
but switch is.

57
00:03:54.330 --> 00:03:59.518
Well, it is in the sense that switch
technically doesn't really care, right.

58
00:03:59.518 --> 00:04:02.666
But, well if you have a two
dimensional observable and

59
00:04:02.666 --> 00:04:07.183
the outer observable completes and
the inner observable completes, then and

60
00:04:07.183 --> 00:04:10.210
only then do you free up
all your callbacks, right.

61
00:04:10.210 --> 00:04:14.710
So switch is subscribing to the outer
observable and each inner observable.

62
00:04:14.710 --> 00:04:20.130
And it only unsubscribes you from
the flattened observable it creates

63
00:04:20.130 --> 00:04:22.750
when both the outer and
inner observable complete.

64
00:04:22.750 --> 00:04:25.750
And so if we have an observable
hanging around that hasn't completed,

65
00:04:25.750 --> 00:04:28.200
it's gonna be hanging on to
the handler somewhere, right.

66
00:04:28.200 --> 00:04:29.770
So unsubscribe doesn't get called.

67
00:04:29.770 --> 00:04:32.667
Does that make sense?

68
00:04:32.667 --> 00:04:33.587
Do you wanna try this?

69
00:04:33.587 --> 00:04:34.205
Let's try it.

70
00:04:42.389 --> 00:04:43.580
&gt;&gt; Jafar Husain: Looking good so
far, right.

