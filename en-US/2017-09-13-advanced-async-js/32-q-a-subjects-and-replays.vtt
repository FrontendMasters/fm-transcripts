WEBVTT

1
00:00:00.340 --> 00:00:01.740
&gt;&gt; Jafar Husain: Any other questions?

2
00:00:01.740 --> 00:00:03.510
Subjects, that a great one.

3
00:00:03.510 --> 00:00:07.110
Yeah, so
let's talk a little bit about subjects.

4
00:00:07.110 --> 00:00:13.090
A subject is a great example of how we
turn observables into hot observables.

5
00:00:13.090 --> 00:00:15.070
So subjects for
example are a hot observable,

6
00:00:15.070 --> 00:00:19.320
and what they do, this is actually
a really elegant, beautiful abstraction.

7
00:00:19.320 --> 00:00:23.770
They take the two interfaces we have in
observable, observable, and observer,

8
00:00:23.770 --> 00:00:28.710
and they smoosh them together into
a new type called the subject.

9
00:00:28.710 --> 00:00:32.510
So the best way of teaching you guys about
subjects is actually just to go back to

10
00:00:32.510 --> 00:00:36.179
our custom observable implementation and
implement a subject.

11
00:00:37.200 --> 00:00:41.130
So a subject inherits from an observable.

12
00:00:41.130 --> 00:00:42.521
So let's make ourselves a subject.

13
00:00:44.224 --> 00:00:48.962
&gt;&gt; Jafar Husain: A subject is basically a
way in which you can broadcast a value to

14
00:00:48.962 --> 00:00:50.670
multiple listeners.

15
00:00:50.670 --> 00:00:54.710
So you remember we talked about why we
might wanna set up an observable such that

16
00:00:54.710 --> 00:00:58.550
every new subscriber gets their own
network request, for example, right?

17
00:00:58.550 --> 00:01:02.480
So but sometimes you want that behavior,
like for retry, but

18
00:01:02.480 --> 00:01:03.780
sometimes you don't want that behavior.

19
00:01:03.780 --> 00:01:07.410
Sometimes you might wanna have five
concurrent subscribers all just listen for

20
00:01:07.410 --> 00:01:09.510
the result of one network request.

21
00:01:09.510 --> 00:01:10.990
So how do we achieve that?

22
00:01:10.990 --> 00:01:14.839
Well, I'm gonna create a Subject.

23
00:01:14.839 --> 00:01:16.591
The Subject extends an Observable.

24
00:01:20.039 --> 00:01:24.279
&gt;&gt; Jafar Husain: And all the subject does
is it internally just keeps a list of all

25
00:01:24.279 --> 00:01:26.370
of its concurrent observers.

26
00:01:26.370 --> 00:01:29.290
And every single time you
call next on the subject,

27
00:01:29.290 --> 00:01:33.030
cuz remember, a subject is both
an observer and an observable.

28
00:01:33.030 --> 00:01:37.280
When you call next on the subject, it just
loops through all of its observers and

29
00:01:37.280 --> 00:01:40.180
calls next on all the observers,
does that make sense?

30
00:01:40.180 --> 00:01:45.240
So it's a mechanism for what we call
multicasting, or broadcasting a message

31
00:01:45.240 --> 00:01:49.800
to multiple concurrent subscribers,
without repeating the side effects,

32
00:01:49.800 --> 00:01:54.600
like showing a network request or starting
a timer for every concurrent subscriber.

33
00:01:54.600 --> 00:01:59.700
So let's see how we can use a subject
to take something like set timeout or

34
00:01:59.700 --> 00:02:03.150
a network request and set only one timer
for a whole bunch of different users.

35
00:02:03.150 --> 00:02:03.650
Makes sense?

36
00:02:04.950 --> 00:02:07.581
So a subject looks like this.

37
00:02:09.542 --> 00:02:13.751
&gt;&gt; Jafar Husain: constructor,
&gt;&gt; Jafar Husain: And super,

38
00:02:13.751 --> 00:02:17.105
the definition of a subscribe
is quite simple actually.

39
00:02:22.994 --> 00:02:25.364
&gt;&gt; Jafar Husain: This is
a good opportunity to use map.

40
00:02:56.599 --> 00:03:01.039
&gt;&gt; Jafar Husain: So when you subscribe to
a subject, it just takes the observer,

41
00:03:01.039 --> 00:03:02.790
puts it into an array.

42
00:03:02.790 --> 00:03:03.409
That's all it does.

43
00:03:04.810 --> 00:03:10.112
And then,
&gt;&gt; Jafar Husain: I think this is delete.

44
00:03:10.112 --> 00:03:14.012
But as you guys are gonna see, I'm gonna
set up a set, which is gonna be used to

45
00:03:14.012 --> 00:03:19.649
store all of the,
&gt;&gt; Jafar Husain: Observers I have,

46
00:03:19.649 --> 00:03:21.516
JavaScript set.

47
00:03:23.301 --> 00:03:24.990
&gt;&gt; Jafar Husain: Does that
makes sense to everybody?

48
00:03:24.990 --> 00:03:27.850
So all we've done is create an observable
that whenever you subscribe up to it,

49
00:03:27.850 --> 00:03:29.330
it just says, thanks very much.

50
00:03:29.330 --> 00:03:30.940
I'm gonna take that observer,
I'm gonna put it in a set, and

51
00:03:30.940 --> 00:03:32.970
I'm just gonna chill, okay?

52
00:03:33.970 --> 00:03:35.400
So as I said earlier,

53
00:03:35.400 --> 00:03:40.095
a subject is actually a combination
of an observer and an observable.

54
00:03:40.095 --> 00:03:41.719
What are the three methods on an observer?

55
00:03:43.900 --> 00:03:45.805
&gt;&gt; Jafar Husain: Anybody tell me,
on an observer?

56
00:03:45.805 --> 00:03:47.296
&gt;&gt; Student: Next, complete, error.

57
00:03:47.296 --> 00:03:48.176
&gt;&gt; Jafar Husain: Next,
complete, and error.

58
00:03:51.948 --> 00:03:53.181
&gt;&gt; Jafar Husain: So when next is called,

59
00:03:53.181 --> 00:03:59.149
I'm literally just gonna,
&gt;&gt; Jafar Husain: Loop

60
00:03:59.149 --> 00:04:02.355
over all the observers and
call next on in.

61
00:04:06.475 --> 00:04:08.992
&gt;&gt; Jafar Husain: Anybody wanna take a
guess what I'm gonna do if error's called?

62
00:04:11.638 --> 00:04:13.720
&gt;&gt; Student2: Loop over all of them and
call error?

63
00:04:13.720 --> 00:04:14.220
&gt;&gt; Jafar Husain: Yup.

64
00:04:16.970 --> 00:04:19.390
&gt;&gt; Jafar Husain: So
what have we really accomplished here?

65
00:04:19.390 --> 00:04:23.080
I mean, we're just like a repository for
a bunch of observers.

66
00:04:23.080 --> 00:04:26.730
And when everybody calls next,
we just broadcast it to everybody.

67
00:04:26.730 --> 00:04:27.620
Why is that useful?

68
00:04:28.980 --> 00:04:30.033
So same thing with complete.

69
00:04:33.239 --> 00:04:37.402
&gt;&gt; Jafar Husain: So it's actually very
rare that you'll use a subject directly,

70
00:04:37.402 --> 00:04:42.321
however, the principal of broadcasting
the results of an observable to many

71
00:04:42.321 --> 00:04:45.290
consumers is very important in our ex.

72
00:04:45.290 --> 00:04:49.370
And usually you will use operators
that internally create subjects,

73
00:04:49.370 --> 00:04:52.010
like share and replay for example.

74
00:04:52.010 --> 00:04:55.701
So if I have an observable like the set
timeout, the timeout observable we created

75
00:04:55.701 --> 00:04:59.910
earlier, where it's gonna trigger a new
timer for every concurrent subscriber.

76
00:04:59.910 --> 00:05:03.780
I can use the share method to basically
make sure that no matter how many

77
00:05:03.780 --> 00:05:07.800
concurrent subscribers,
they're all gonna share the same timer.

78
00:05:07.800 --> 00:05:11.380
And under the hood,
all share does is it creates a subject.

79
00:05:11.380 --> 00:05:15.344
It subscribes the subject to the
observable cuz the subject is an observer.

80
00:05:15.344 --> 00:05:18.010
And that subscribes all new

81
00:05:18.010 --> 00:05:21.850
observers to the subject rather
than the source observable.

82
00:05:21.850 --> 00:05:25.442
That's a lot of talking really quick, but
we're gonna take a look at how that works.

83
00:05:31.660 --> 00:05:36.860
&gt;&gt; Jafar Husain: And there's one little
detail which [LAUGH] is important.

84
00:05:36.860 --> 00:05:39.950
If I don't do this, I

85
00:05:39.950 --> 00:05:44.930
open up the possibility that when I
next an observer, they unsubscribe.

86
00:05:44.930 --> 00:05:48.625
[LAUGH] And if they unsubscribe, they're
gonna remove themselves from the set while

87
00:05:48.625 --> 00:05:51.280
I'm iterating the set, and
that's not a good thing.

88
00:05:51.280 --> 00:05:53.500
So I quickly make a copy of the observers,

89
00:05:53.500 --> 00:05:55.820
and then I make sure that I don't
have that raised condition.

90
00:05:57.450 --> 00:06:00.037
So does everybody see my subject here?

91
00:06:00.037 --> 00:06:00.990
It wasn't that hard, right?

92
00:06:00.990 --> 00:06:03.529
We built the subject,
pretty straightforward.

93
00:06:04.780 --> 00:06:08.460
All we're doing, socking away observers,
broadcasting messages to them.

94
00:06:09.950 --> 00:06:14.540
So now let's see if we can write share,
the share method.

95
00:06:14.540 --> 00:06:19.340
So that we can take our timeout observable
and just instantiate one timer.

96
00:06:19.340 --> 00:06:20.570
Just start one timer for

97
00:06:20.570 --> 00:06:24.284
every single subscribed to
the observable return from timeout.

98
00:06:25.370 --> 00:06:28.200
Now notice here, every single
time somebody calls subscribe,

99
00:06:28.200 --> 00:06:30.618
we're gonna kick off a new
set timeout method, right?

100
00:06:30.618 --> 00:06:32.704
Cuz it's right there inside of subscribe.

101
00:06:32.704 --> 00:06:36.330
How are we gonna rig it up so
no matter how many subscribers,

102
00:06:36.330 --> 00:06:39.780
we only get one call to set timeout.

103
00:06:39.780 --> 00:06:40.930
This is a very important trick.

104
00:06:40.930 --> 00:06:44.030
It's used all the time because very
often you don't wanna kick five of

105
00:06:44.030 --> 00:06:46.270
the same network request off
at the same time, right?

106
00:06:46.270 --> 00:06:48.482
That doesn't make a lot of
sense in a lot of cases.

107
00:06:48.482 --> 00:06:51.605
So I'm gonna write myself
a function called share, and

108
00:06:51.605 --> 00:06:54.340
you can take any observable and
you can share it.

109
00:06:55.930 --> 00:06:57.999
Under the hood,
it's gonna create a subject.

110
00:07:03.226 --> 00:07:07.657
&gt;&gt; Jafar Husain: And
it's gonna go self.subscribe(subject).

111
00:07:12.616 --> 00:07:16.147
&gt;&gt; Jafar Husain: Or wait, yes, and
then it is going to, I forgot, sorry,

112
00:07:16.147 --> 00:07:19.900
I got to return a new observable,
cuz that's what share returns.

113
00:07:21.840 --> 00:07:22.500
I do this right?

114
00:07:22.500 --> 00:07:29.050
[LAUGH]
&gt;&gt; Jafar Husain: This is not 100% right.

115
00:07:29.050 --> 00:07:30.126
But it's pretty darn close.

116
00:07:32.118 --> 00:07:33.030
&gt;&gt; Jafar Husain: Does everybody see that?

117
00:07:34.350 --> 00:07:35.520
See what's going on there?

118
00:07:35.520 --> 00:07:36.880
I'm cheating.
This is not exactly

119
00:07:36.880 --> 00:07:38.370
how share is implemented.

120
00:07:38.370 --> 00:07:48.011
But that's a basic concept and,
&gt;&gt; Jafar Husain: Let's go back and

121
00:07:48.011 --> 00:07:49.390
take our timeout observable.

122
00:08:18.869 --> 00:08:19.746
&gt;&gt; Jafar Husain: Did I break that?

123
00:08:25.650 --> 00:08:27.164
&gt;&gt; Jafar Husain: Good, just took a second.

124
00:08:31.177 --> 00:08:33.620
&gt;&gt; Jafar Husain: Remember that
timeout just on next undefined,

125
00:08:33.620 --> 00:08:36.720
that's why we see undefined there,
all right?

126
00:08:36.720 --> 00:08:39.856
Now if I take,
&gt;&gt; Jafar Husain: Now,

127
00:08:39.856 --> 00:08:43.987
just to make sure this is working
inside of our timeout observable,

128
00:08:43.987 --> 00:08:47.255
when we call set timeout,
we'll log to the console.

129
00:08:59.133 --> 00:09:05.331
&gt;&gt; Jafar Husain: Now I'm gonna take this,
&gt;&gt; Jafar Husain: Timeout Observable.

130
00:09:05.331 --> 00:09:07.067
I'm gonna assign it to a variable.

131
00:09:09.062 --> 00:09:11.048
&gt;&gt; Jafar Husain: And then we're
gonna call subscribe, but this time,

132
00:09:11.048 --> 00:09:12.250
we're gonna call it twice.

133
00:09:12.250 --> 00:09:14.838
And we expect that with
each call to subscribe,

134
00:09:14.838 --> 00:09:17.823
we're going to get a new
call the set timeout, right?

135
00:09:20.154 --> 00:09:21.576
&gt;&gt; Jafar Husain: And sure enough, we do.

136
00:09:21.576 --> 00:09:24.320
What we're gonna try and to with the share

137
00:09:24.320 --> 00:09:27.920
operation is we're gonna make sure that
only one call happens to set timeout.

138
00:09:27.920 --> 00:09:29.930
And again this will be less useful,

139
00:09:29.930 --> 00:09:32.930
actually it could be useful from
the context of set timeout and

140
00:09:32.930 --> 00:09:36.920
more useful on the context of network
requests, right, where I want

141
00:09:36.920 --> 00:09:41.470
one network request to be kicked off no
matter how many people are listening.

142
00:09:41.470 --> 00:09:46.853
So let's see what happens when I go,
&gt;&gt; Jafar Husain: .share.

143
00:09:50.253 --> 00:09:51.100
&gt;&gt; Jafar Husain: Well, it breaks.

144
00:09:51.100 --> 00:09:52.445
But we'll figure out why.

145
00:09:52.445 --> 00:09:55.790
Self.subscribe is not a function.

146
00:09:58.849 --> 00:10:06.352
&gt;&gt; Student: 149, this equal self,
&gt;&gt; Student: 149.

147
00:10:06.352 --> 00:10:08.392
&gt;&gt; Jafar Husain: Is it
complaining about 149?

148
00:10:08.392 --> 00:10:10.080
&gt;&gt; Student: There, enter your share.

149
00:10:10.080 --> 00:10:12.180
&gt;&gt; Student: I think you
want underscore subscribe.

150
00:10:12.180 --> 00:10:14.850
&gt;&gt; Jafar Husain: I actually
want this right here,

151
00:10:14.850 --> 00:10:18.230
cuz this is an instance method.

152
00:10:18.230 --> 00:10:21.390
So we call share on an observable,
and so this, at this case,

153
00:10:21.390 --> 00:10:22.389
will be the observable.

154
00:10:23.440 --> 00:10:24.676
So let's give that a shot.

155
00:10:26.547 --> 00:10:31.648
&gt;&gt; Jafar Husain: Uh-oh, right,
it's not observers, but this.observers.

156
00:10:45.393 --> 00:10:48.078
&gt;&gt; Student: 172 and 172.

157
00:10:48.078 --> 00:10:51.050
&gt;&gt; Jafar Husain: 172, there we go.

158
00:10:56.873 --> 00:10:59.573
&gt;&gt; Jafar Husain: I'm gonna get the hang
of this JavaScript thing one day,

159
00:10:59.573 --> 00:11:00.367
gonna be great.

160
00:11:00.367 --> 00:11:04.342
[LAUGH]
&gt;&gt; Jafar Husain: And,

161
00:11:08.140 --> 00:11:08.791
&gt;&gt; Jafar Husain: Right,

162
00:11:08.791 --> 00:11:11.050
cuz sets aren't arrays.

163
00:11:11.050 --> 00:11:15.100
Still getting used to the fancy
new JavaScript stuff.

164
00:11:15.100 --> 00:11:18.103
I think I can do this trick
though cuz sets are iterable.

165
00:11:22.180 --> 00:11:24.084
&gt;&gt; Jafar Husain: How
about this new hotness?

166
00:11:27.365 --> 00:11:28.810
&gt;&gt; Jafar Husain: There might
be a better way of doing that.

167
00:11:30.280 --> 00:11:33.322
But that's what I'm gonna do for now.

168
00:11:35.279 --> 00:11:36.980
&gt;&gt; Jafar Husain: There we go.

169
00:11:36.980 --> 00:11:40.210
Do we all understand what
really happened there, right?

170
00:11:40.210 --> 00:11:41.416
We created one observable.

171
00:11:41.416 --> 00:11:43.188
It's here we got this link of chain.

172
00:11:43.188 --> 00:11:45.080
So it's observables calling each other,
right?

173
00:11:45.080 --> 00:11:49.245
And we created one link in the chain
that'll just store up multiple observers,

174
00:11:49.245 --> 00:11:53.036
and then instead of just going [SOUND]
when we get to that step in the chain,

175
00:11:53.036 --> 00:11:55.289
it'll broadcast it to all the observers.

176
00:11:55.289 --> 00:11:59.860
And that's the key to how we make sure
that if we've got an observable that

177
00:11:59.860 --> 00:12:03.839
we don't wanna be lazy,
we can make it eager, in this case, and

178
00:12:03.839 --> 00:12:07.109
share the side effects
across multiple consumers.

179
00:12:08.140 --> 00:12:09.800
Now, once again,
I'm hand waving a little bit.

180
00:12:09.800 --> 00:12:13.640
The real definition of share is
a little bit better than this,

181
00:12:13.640 --> 00:12:19.430
a little bit different than this, a little
more complex, but that's the basic idea.

182
00:12:19.430 --> 00:12:20.880
So now you guys understand subjects.

183
00:12:20.880 --> 00:12:22.880
That's pretty much all there is to it.

184
00:12:22.880 --> 00:12:25.210
There are variations of subjects,

185
00:12:25.210 --> 00:12:30.180
like replay subject and behavior subject,
and they're probably worth talking about,

186
00:12:30.180 --> 00:12:33.260
but the reality is,
you're not gonna use it directly.

187
00:12:33.260 --> 00:12:37.130
In all likelihood, you're gonna
use methods like share and replay.

188
00:12:37.130 --> 00:12:38.890
So share we just learned.

189
00:12:38.890 --> 00:12:40.961
Anybody wanna hazard to guesses for
what replay does?

190
00:12:44.761 --> 00:12:48.780
&gt;&gt; Student: Replay is what
was previously nexted.

191
00:12:48.780 --> 00:12:51.240
&gt;&gt; Jafar Husain: So
one of the dangers around hot observables,

192
00:12:51.240 --> 00:12:55.830
which is what subjects are, is you might
miss something that you wanted, right?

193
00:12:56.890 --> 00:12:58.960
Depending on when you
subscribe to a hot observable,

194
00:12:58.960 --> 00:13:00.730
you might get a different result.

195
00:13:00.730 --> 00:13:03.641
And so sometimes what you
want is you actually want, so

196
00:13:03.641 --> 00:13:07.759
let's say we create that observable
that represents the network request and

197
00:13:07.759 --> 00:13:09.930
15 people subscribe to it all at once.

198
00:13:09.930 --> 00:13:11.869
And then they all get
the same network request,

199
00:13:11.869 --> 00:13:13.960
and we only issue one network request.

200
00:13:13.960 --> 00:13:16.010
But then two seconds later,
somebody comes along and

201
00:13:16.010 --> 00:13:18.030
subscribes to that observable again.

202
00:13:18.030 --> 00:13:21.720
Well, we might wanna kick off yet
another network request, or

203
00:13:21.720 --> 00:13:25.850
we might just wanna store up whatever
the result of that network request is and

204
00:13:25.850 --> 00:13:26.940
just hand it to them.

205
00:13:26.940 --> 00:13:29.120
And that's what a replay observable is.

206
00:13:29.120 --> 00:13:32.950
It replays the observable for
folks who come late to the party.

207
00:13:32.950 --> 00:13:34.820
Does that make sense?

208
00:13:34.820 --> 00:13:37.540
So after we've already,
and that's all it is.

209
00:13:37.540 --> 00:13:39.500
And instead of share, it's a replay.

210
00:13:39.500 --> 00:13:41.570
And these are the two methods,
and under the hood,

211
00:13:41.570 --> 00:13:45.720
they use different variations of subjects,
a replay subject and a regular subject.

212
00:13:45.720 --> 00:13:48.450
But these are the methods that, I meant,
these are how these methods work.

213
00:13:48.450 --> 00:13:49.849
Under the hood, they just use a subject.

214
00:13:51.040 --> 00:13:53.880
So now I'm glad somebody asked about
that cuz we've come full circle.

215
00:13:53.880 --> 00:13:55.810
We've talked about
the benefits of laziness, but

216
00:13:55.810 --> 00:13:59.430
we've also talked about how we can
make something not lazy anymore

217
00:13:59.430 --> 00:14:02.540
in order to share side effects
across multiple consumers.

218
00:14:02.540 --> 00:14:07.543
&gt;&gt; Student: So in that replay example,
where somebody comes late and

219
00:14:07.543 --> 00:14:12.766
you wanna give them that you
don't replay it for everyone.

220
00:14:12.766 --> 00:14:15.297
&gt;&gt; Jafar Husain: The idea would be,
so let's say three people come and

221
00:14:15.297 --> 00:14:17.130
subscribe to an observable, right?

222
00:14:17.130 --> 00:14:21.800
You make one network request cuz it's
a shared observable, and then you on next,

223
00:14:21.800 --> 00:14:23.860
and then on complete, all three of them.

224
00:14:23.860 --> 00:14:26.120
They all go away cuz
they've been on completed.

225
00:14:26.120 --> 00:14:29.000
Now, what happens when
somebody comes along, right?

226
00:14:29.000 --> 00:14:31.610
Would you wanna kick off
another network request?

227
00:14:31.610 --> 00:14:33.200
You probably do, right?

228
00:14:33.200 --> 00:14:35.290
Because that person needs data as well.

229
00:14:35.290 --> 00:14:39.799
But if you're confident that the network
request is just gonna give you

230
00:14:39.799 --> 00:14:44.383
back the same data, like let's say
it's a request for, I don't know,

231
00:14:44.383 --> 00:14:46.580
some company's privacy policy.

232
00:14:46.580 --> 00:14:48.503
Or at least that's not gonna
change very often, right?

233
00:14:48.503 --> 00:14:50.990
You can just cache it in memory,
and then hand it to them.

234
00:14:50.990 --> 00:14:53.050
And that's all a replay subject does.

235
00:14:53.050 --> 00:14:55.500
&gt;&gt; Student: It's like hanging
onto a resolved promise and

236
00:14:55.500 --> 00:14:56.470
just giving them that.

237
00:14:56.470 --> 00:14:57.320
&gt;&gt; Jafar Husain: Exactly, a promise,

238
00:14:57.320 --> 00:14:59.168
that's actually that's
worth talking about.

239
00:14:59.168 --> 00:15:04.370
Cuz a promise is like
an observerable that's always hot.

240
00:15:04.370 --> 00:15:07.090
It's always like a subject,
and it always caches.

241
00:15:07.090 --> 00:15:11.010
So a replay subject basically turns an
observable into something very similar to

242
00:15:11.010 --> 00:15:14.400
a promise, except it sends multiple
values instead of one value.

243
00:15:15.950 --> 00:15:18.830
So promises have that
behavior all the time.

244
00:15:18.830 --> 00:15:21.680
They are always hot and
they always cache their results.

245
00:15:21.680 --> 00:15:25.693
So if you come after a promise is resolved
and say, hey, give me the result,

246
00:15:25.693 --> 00:15:29.923
the promise will just immediately call
you with whatever result it has cached.

247
00:15:31.953 --> 00:15:32.709
&gt;&gt; Jafar Husain: Does that make sense?

248
00:15:34.000 --> 00:15:37.220
And so we can see that observables
are more primitive than promises.

249
00:15:37.220 --> 00:15:41.790
You can build a promise by combining
together methods on an observable until it

250
00:15:41.790 --> 00:15:44.840
behaves exactly like a promise,
but you can't go visa versa.

251
00:15:44.840 --> 00:15:48.759
You can't build an observable
on top of a promise, right?

252
00:15:48.759 --> 00:15:50.619
Cuz you can always go from lazy to eager.

253
00:15:50.619 --> 00:15:52.709
But you can't go from eager to lazy.

254
00:15:52.709 --> 00:15:56.209
Once you've started the work,
you've started the work.

255
00:15:56.209 --> 00:15:57.979
It's a very flexible and
powerful primitive.

