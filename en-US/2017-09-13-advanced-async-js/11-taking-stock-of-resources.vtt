WEBVTT

1
00:00:00.020 --> 00:00:02.600
&gt;&gt; Jafar Husain: So this was a real
problem we had to solve at Netflix and for

2
00:00:02.600 --> 00:00:07.140
a while, it took a long time so you
shouldn't expect that you're gonna just

3
00:00:07.140 --> 00:00:08.590
fix and be able to solve this problem.

4
00:00:08.590 --> 00:00:11.810
I like it cuz it's a really hard one and
we can start to think and learn about

5
00:00:11.810 --> 00:00:16.860
how we can solve seemingly hard problems
by just composing operations together.

6
00:00:16.860 --> 00:00:22.633
So how do we go from this to this?

7
00:00:23.870 --> 00:00:27.190
So in general when you're problem solving,
when you're solving problems with

8
00:00:27.190 --> 00:00:32.100
observable the first thing you do is you
think to yourself, what streams do I have?

9
00:00:32.100 --> 00:00:33.540
What sources of data do I have?

10
00:00:33.540 --> 00:00:35.070
What event streams do I have?

11
00:00:35.070 --> 00:00:38.440
Well, in this case we've got one,
it's pretty straightforward right, tasks.

12
00:00:38.440 --> 00:00:40.700
And then you think, well, what do I want?

13
00:00:40.700 --> 00:00:42.260
In this case we think,

14
00:00:42.260 --> 00:00:46.690
well I want this stream that tells me
whether animations are allowed or not.

15
00:00:46.690 --> 00:00:50.200
And then, the last step is to figure
out how to get from what you have,

16
00:00:50.200 --> 00:00:54.290
in terms of streams, to what you want
by using the functions that you guys

17
00:00:54.290 --> 00:00:58.690
have learned in the previous class,
map, filter, reduce, merge, zip.

18
00:00:58.690 --> 00:01:03.510
Once you've finally created that
stream of data that you want,

19
00:01:03.510 --> 00:01:07.860
the last step is to just subscribe to it,
and use the data, all right?

20
00:01:07.860 --> 00:01:09.030
Does that make sense?

21
00:01:09.030 --> 00:01:15.480
So when you're going from this,
to this, you're doing it lazily.

22
00:01:15.480 --> 00:01:18.680
You're just creating a new stream
that hasn't really done any work,

23
00:01:18.680 --> 00:01:21.680
and only when you've got exactly
the stream that you want,

24
00:01:21.680 --> 00:01:24.380
do you subscribe to it and
you get the data out.

25
00:01:24.380 --> 00:01:28.375
And that's the last step, so my last
step I would do something like this.

26
00:01:33.301 --> 00:01:35.903
&gt;&gt; Jafar Husain: And then I might
set some global flag for example.

27
00:01:48.551 --> 00:01:51.473
&gt;&gt; Jafar Husain: Then later on in the
program, whenever I'm about to start up

28
00:01:51.473 --> 00:01:55.539
an animation, I would look at this global
flag, for example, and I would say,

29
00:01:55.539 --> 00:01:59.820
should I just place this where it's gonna
be or should I animate it smoothly?

30
00:01:59.820 --> 00:02:01.450
Does that make sense?

31
00:02:01.450 --> 00:02:07.050
So our task is to go from this to this.

32
00:02:07.050 --> 00:02:10.790
And we're gonna do it gradually,
little bit by little bit.

33
00:02:10.790 --> 00:02:12.460
So does anybody have any suggestions?

34
00:02:12.460 --> 00:02:17.239
Actually, before we jump into how we're
gonna do this, I'm gonna give you guys

35
00:02:17.239 --> 00:02:20.915
some helpful functions which we
can use during this process.

36
00:02:20.915 --> 00:02:22.630
So let's have a quick
look at these functions.

37
00:02:25.320 --> 00:02:27.530
The first one is just a factory function.

38
00:02:27.530 --> 00:02:29.000
It takes on a raw value,

39
00:02:29.000 --> 00:02:33.060
it puts it into an observable that just
unnecks that value and then completes.

40
00:02:33.060 --> 00:02:34.450
That's it.

41
00:02:34.450 --> 00:02:35.900
So we see that.

42
00:02:35.900 --> 00:02:38.650
So I'll clear how to take a simple value
and make it into an observable of that

43
00:02:38.650 --> 00:02:41.740
value, not unlike putting two
square brackets around a value and

44
00:02:41.740 --> 00:02:43.020
making it an array of that value.

45
00:02:44.420 --> 00:02:45.810
Then we have concat.

46
00:02:45.810 --> 00:02:52.263
Concat you can take two arbitrary
observables [SOUND], stick them together,

47
00:02:52.263 --> 00:02:58.715
just like a string where you're
concatenating two strings together, and,

48
00:02:58.715 --> 00:03:04.093
by the way, you can pass comcat
as many observables as you want.

49
00:03:04.093 --> 00:03:09.590
So then this would go like that.

50
00:03:09.590 --> 00:03:11.606
Does that make sense?

51
00:03:11.606 --> 00:03:14.930
So I can concatenate as many
observables together as I want.

52
00:03:14.930 --> 00:03:17.840
And this is a helpful little function,
which we'll use later,

53
00:03:17.840 --> 00:03:19.440
distinctUntilChanged.

54
00:03:19.440 --> 00:03:21.710
I think this pretty much says it all.

55
00:03:21.710 --> 00:03:22.550
Yeah.
&gt;&gt; Speaker 2: I have a question

56
00:03:22.550 --> 00:03:23.920
about concat.

57
00:03:23.920 --> 00:03:28.170
So the way you have it represented,
I assume the dots are over time.

58
00:03:30.070 --> 00:03:32.820
So is it that

59
00:03:34.290 --> 00:03:38.380
looking at it visually that you have
them stacked on top of each other?

60
00:03:38.380 --> 00:03:39.570
&gt;&gt; Jafar Husain: RIght.
&gt;&gt; Speaker 2: I would assume that

61
00:03:39.570 --> 00:03:42.890
two would happen first and then you
would have two fives and then a four,

62
00:03:42.890 --> 00:03:43.730
a seven, and a nine.

63
00:03:43.730 --> 00:03:45.210
And the way that you represent it there,

64
00:03:45.210 --> 00:03:49.070
it's like one completes then
the other one iterates,

65
00:03:49.070 --> 00:03:53.150
then that completes, and then the third-
&gt;&gt; Jafar Husain: Great question, and

66
00:03:53.150 --> 00:03:56.030
the reason for that is I'm gonna
assume that all the observables,

67
00:03:56.030 --> 00:03:59.210
all these observables in this
example anyway, are culled.

68
00:03:59.210 --> 00:04:02.720
So they're a lot like the set timeout
observable that we created initially,

69
00:04:02.720 --> 00:04:07.360
which means time's not gonna start
counting until you subscribe.

70
00:04:07.360 --> 00:04:10.920
So just like we didn't kick off the set
timeout until you subscribe, we can assume

71
00:04:10.920 --> 00:04:14.990
the data in these observables isn't gonna
start being produced until you subscribe.

72
00:04:14.990 --> 00:04:17.340
And that's why instead of falling down and

73
00:04:17.340 --> 00:04:21.100
all happening simultaneously
they all happen back to back.

74
00:04:21.100 --> 00:04:24.460
So the way the concat works, and actually
maybe this is a good opportunity for

75
00:04:24.460 --> 00:04:29.630
us to try out, to actually write concat
to understand how it works in our

76
00:04:29.630 --> 00:04:35.890
observable implementation, is that all it
does is it subscribes to an observable,

77
00:04:35.890 --> 00:04:39.140
and when that observable completes,
it subscribes to the next observable.

78
00:04:39.140 --> 00:04:41.960
And when that observable completes,
it subscribes to the next observable.

79
00:04:41.960 --> 00:04:43.680
Do you guys wanna write that?

80
00:04:43.680 --> 00:04:45.560
Or do you feel like you've
got a good handle on it?

81
00:04:47.370 --> 00:04:48.930
Quick show of hands,
who wants to write it?

82
00:04:48.930 --> 00:04:52.334
Who feels like they've
got a good handle on it?

83
00:04:52.334 --> 00:04:53.128
&gt;&gt; Speaker 2: Write it.

84
00:04:53.128 --> 00:04:53.927
&gt;&gt; Jafar Husain: Write it.

85
00:04:53.927 --> 00:04:54.864
All right, okay.

86
00:05:03.131 --> 00:05:05.093
&gt;&gt; Jafar Husain: So
it's a static method, right?

87
00:05:05.093 --> 00:05:08.493
And we're gonna take
a bunch of observables and

88
00:05:08.493 --> 00:05:11.390
we're gonna return a new observable.

89
00:05:11.390 --> 00:05:16.344
So I don't think I've ever
written this operator, so

90
00:05:16.344 --> 00:05:22.173
this is gonna be a,
we're gonna do it live, it's gonna be fun.

91
00:05:32.024 --> 00:05:35.822
&gt;&gt; Jafar Husain: All right, [LAUGH] well,
one thing I could do is I could

92
00:05:35.822 --> 00:05:40.140
loop over all the observable and
subscribe to them, right?

93
00:05:40.140 --> 00:05:40.829
I can do this,

94
00:06:02.298 --> 00:06:05.515
&gt;&gt; Jafar Husain: Is this gonna work?

95
00:06:05.515 --> 00:06:06.595
No, yes?

96
00:06:06.595 --> 00:06:08.460
&gt;&gt; Speaker 2: You're not waiting.

97
00:06:08.460 --> 00:06:09.510
&gt;&gt; Jafar Husain: I'm not waiting, right?

98
00:06:09.510 --> 00:06:12.760
In this way I'd subscribe to all
three of them at the same time, and

99
00:06:12.760 --> 00:06:15.620
then they'd all kind of be flinging
data at me at the same time.

100
00:06:15.620 --> 00:06:17.230
I don't want to do that.

101
00:06:17.230 --> 00:06:19.050
So how am I going to do it?

102
00:06:19.050 --> 00:06:20.840
&gt;&gt; Speaker 2: Use a reduce function.

103
00:06:20.840 --> 00:06:21.880
But-
&gt;&gt; Jafar Husain: A reduce.

104
00:06:23.704 --> 00:06:30.950
&gt;&gt; Speaker 2: You take your a and your b,
and then once a completes you run b?

105
00:06:30.950 --> 00:06:32.550
&gt;&gt; Jafar Husain: Yeah,
I like where you're going there,

106
00:06:32.550 --> 00:06:34.582
we can probably do this with a reduce,
yeah.

107
00:06:34.582 --> 00:06:40.104
The reduce,
reduce might be a little tricky.

108
00:06:40.104 --> 00:06:44.892
We definitely need some asynchrony
in here, because we need to wait

109
00:06:44.892 --> 00:06:49.630
until the complete method is called
before we jump to the new one.

110
00:06:49.630 --> 00:06:54.140
So what I'll do is here I'm going to
use a lot of state here actually.

111
00:06:54.140 --> 00:06:57.930
I'm going to keep track of how many
observables I have on any given moment.

112
00:06:57.930 --> 00:07:01.230
I'm going to have an array of them,
and I'm going to keep removing them.

113
00:07:01.230 --> 00:07:01.819
Does that make sense?

114
00:07:03.030 --> 00:07:04.900
So we'll try just popping it off.

115
00:07:04.900 --> 00:07:08.573
We'll try, there might actually
be a better way of doing this,

116
00:07:08.573 --> 00:07:10.830
but this is my best guess at the moment.

117
00:07:14.495 --> 00:07:17.007
&gt;&gt; Speaker 2: Would you want
to shift instead of pop?

118
00:07:17.007 --> 00:07:18.310
&gt;&gt; Jafar Husain: Shift would be better,
thank you, yes.

119
00:07:18.310 --> 00:07:19.630
That's absolutely right.

120
00:07:19.630 --> 00:07:21.629
I wanna pull it off the front and
not off the top.

121
00:07:23.160 --> 00:07:26.710
So as soon as somebody
forages I want to try and

122
00:07:26.710 --> 00:07:32.764
shift and call the observable and
subscribe to it.

123
00:07:32.764 --> 00:07:38.400
I wanna get a value out of the current
observable what am I gonna do here?

124
00:07:38.400 --> 00:07:41.850
So at the moment I've picked the first
observable off the front of the array,

125
00:07:41.850 --> 00:07:45.755
I've subscribed to it, and
when I get a value, what do I want to do?

126
00:07:45.755 --> 00:07:47.030
&gt;&gt; Speaker 2: Observer.next?

127
00:07:47.030 --> 00:07:49.130
&gt;&gt; Jafar Husain: Yeah,
I want to send it to my observer, right?

128
00:07:49.130 --> 00:07:52.090
So I'm gonna call observer.next.

129
00:07:52.090 --> 00:07:55.750
And I need to also handle errors.

130
00:07:57.300 --> 00:07:59.230
So if I get an error, what am I gonna do?

131
00:07:59.230 --> 00:08:02.470
Okay, if any of these five or three
observables where I'm kind of contanonate

132
00:08:02.470 --> 00:08:04.120
errors together, what do I want to do?

133
00:08:05.320 --> 00:08:06.270
&gt;&gt; Speaker 2: Pass along the error?

134
00:08:06.270 --> 00:08:07.732
&gt;&gt; Jafar Husain: Pass along the error,
yeah absolutely.

135
00:08:14.069 --> 00:08:16.509
&gt;&gt; Jafar Husain: Now what
happens if it completes?

136
00:08:16.509 --> 00:08:21.384
So I'm not doing something I should be
doing here, which is unsubscribing from

137
00:08:21.384 --> 00:08:28.376
the observable, so,
&gt;&gt; Jafar Husain: Sees

138
00:08:28.376 --> 00:08:30.019
that error I wanna unsubscribe.

139
00:08:33.130 --> 00:08:38.609
&gt;&gt; Jafar Husain: And I'm actually
not gonna make this a constant,

140
00:08:38.609 --> 00:08:44.879
I'm gonna make it a let,
cuz I might change it over time.

141
00:08:44.879 --> 00:08:46.788
Now what happens when this
observable completes?

142
00:08:50.562 --> 00:08:51.920
&gt;&gt; Speaker 2: Get the next observable.

143
00:08:51.920 --> 00:08:53.120
&gt;&gt; Jafar Husain: You get the next one,
okay.

144
00:08:53.120 --> 00:08:54.650
I could get the next one.

145
00:08:54.650 --> 00:08:56.948
But in theory, I could sort of,

146
00:08:56.948 --> 00:09:01.902
[LAUGH] I could copy this whole thing and
I could put it in here, right?

147
00:09:04.437 --> 00:09:06.826
&gt;&gt; Jafar Husain: All right?
That's kinda what I wanna do almost,

148
00:09:06.826 --> 00:09:10.200
when this completes,
I want it to start this all over again.

149
00:09:10.200 --> 00:09:12.226
Does everybody see what's
happening when it completes and

150
00:09:12.226 --> 00:09:14.060
I want it do the same thing again?

151
00:09:14.060 --> 00:09:15.900
How do I avoid copying and
pasting this code?

152
00:09:15.900 --> 00:09:17.820
&gt;&gt; Speaker 2: Putting it into a function?

153
00:09:17.820 --> 00:09:18.720
&gt;&gt; Jafar Husain: Put it into a function.

154
00:09:18.720 --> 00:09:23.525
And then I'm gonna call that
function recursively, all right?

155
00:09:25.083 --> 00:09:29.809
&gt;&gt; Jafar Husain: So
I'm gonna create a function right in here.

156
00:09:53.336 --> 00:10:00.680
&gt;&gt; Jafar Husain: And, actually gonna put
this out here, I think it might be useful.

157
00:10:00.680 --> 00:10:02.940
I shouldn't leave it in there for now.

158
00:10:04.470 --> 00:10:08.109
And here, now I can call
processObservable recursively, right?

