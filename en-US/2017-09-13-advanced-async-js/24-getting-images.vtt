WEBVTT

1
00:00:00.310 --> 00:00:01.950
&gt;&gt; Jafar Husain: So
did everybody get what we've done so far?

2
00:00:01.950 --> 00:00:06.430
We create an observable for each one of
those dom, all the interesting dom events

3
00:00:06.430 --> 00:00:09.650
and we just merge them together and
that's any action they can be performed

4
00:00:09.650 --> 00:00:13.160
on the UI and then we just subscribe
to that an we display the learning bar.

5
00:00:13.160 --> 00:00:15.180
So okay, easy stuff over.

6
00:00:15.180 --> 00:00:17.030
Let's start building images.

7
00:00:23.789 --> 00:00:24.416
&gt;&gt; Jafar Husain: Help me out,

8
00:00:24.416 --> 00:00:27.200
folks at home I'll also take
ideas from you as well.

9
00:00:27.200 --> 00:00:28.520
How should I start here?

10
00:00:30.460 --> 00:00:31.190
It's kinda of hard,

11
00:00:31.190 --> 00:00:36.840
right, because we could get images
from loading a new sub in theory.

12
00:00:36.840 --> 00:00:38.930
But you get images from pressing Next and
Back.

13
00:00:38.930 --> 00:00:41.010
How do we even know where to start?

14
00:00:41.010 --> 00:00:44.790
&gt;&gt; Speaker 2: Could start by
getting the value of subSelect.

15
00:00:44.790 --> 00:00:47.560
&gt;&gt; Jafar Husain: We could get
the value of subSelect, okay.

16
00:00:47.560 --> 00:00:52.898
So I could go,
&gt;&gt; Jafar Husain: Like so.

17
00:00:52.898 --> 00:00:57.800
&gt;&gt; Speaker 2: And then you could
set images to get subimages,

18
00:00:57.800 --> 00:00:59.450
passing in that value.

19
00:00:59.450 --> 00:01:06.809
&gt;&gt; Jafar Husain: Set images to-
&gt;&gt; Jafar Husain: Get subimages,

20
00:01:06.809 --> 00:01:08.770
and then I would pass in the value.

21
00:01:08.770 --> 00:01:11.460
That seems pretty reasonable to me.

22
00:01:11.460 --> 00:01:12.870
&gt;&gt; Speaker 2: It'll give you a stream.

23
00:01:12.870 --> 00:01:14.870
&gt;&gt; Jafar Husain: It'll give me a stream,
absolutely.

24
00:01:14.870 --> 00:01:15.960
&gt;&gt; Speaker 2: So you'll get a bunch.

25
00:01:15.960 --> 00:01:19.630
&gt;&gt; Jafar Husain: It's technically
going to be an observable of an array

26
00:01:19.630 --> 00:01:22.360
of all the image URLS, that's
technically what I'm gonna get here.

27
00:01:23.660 --> 00:01:24.810
Do we wanna take?

28
00:01:24.810 --> 00:01:27.303
Let's kick the tires,
let's take a look at it in the console.

29
00:01:27.303 --> 00:01:28.064
How does that sound?

30
00:01:31.309 --> 00:01:33.195
&gt;&gt; Jafar Husain: So
what happens if we do that?

31
00:01:33.195 --> 00:01:38.184
I'm just gonna

32
00:01:38.184 --> 00:01:42.409
subscribe.

33
00:01:49.136 --> 00:01:50.914
&gt;&gt; Jafar Husain: I'll comment this out for
now.

34
00:01:59.884 --> 00:02:02.130
&gt;&gt; Jafar Husain: Think I got an error,
cuz I'm not seeing anything.

35
00:02:04.150 --> 00:02:06.090
We got an array of 101.

36
00:02:06.090 --> 00:02:09.470
And look, we got a whole
bunch of image URLs in there.

37
00:02:09.470 --> 00:02:10.726
All right, that's a pretty good start.

38
00:02:15.757 --> 00:02:16.870
&gt;&gt; Jafar Husain: Do we feel closer?

39
00:02:16.870 --> 00:02:19.000
I feel a little bit closer.

40
00:02:20.090 --> 00:02:22.990
So, here's an interesting thing though.

41
00:02:22.990 --> 00:02:27.020
You notice the logic that we're doing
of plucking this value out of the drop

42
00:02:27.020 --> 00:02:28.150
down list.

43
00:02:28.150 --> 00:02:31.030
It's kinda already what
we're doing in map, right?

44
00:02:31.030 --> 00:02:32.260
Like does anybody feel that way?

45
00:02:32.260 --> 00:02:34.280
We're kind of doing this logic right here.

46
00:02:36.570 --> 00:02:39.760
Isn't that very similar to what
we're doing in the map function?

47
00:02:42.230 --> 00:02:43.060
I mean, it's weird.

48
00:02:43.060 --> 00:02:47.650
We've got a stream that'll give us
the value whenever it changes, but

49
00:02:47.650 --> 00:02:51.140
we also want to get the value
of what it is right now, right?

50
00:02:52.250 --> 00:02:54.820
So this kind of repeats that
code just a little bit.

51
00:02:54.820 --> 00:02:56.830
Kind of repeats that code.

52
00:02:56.830 --> 00:02:57.730
At least this piece.

53
00:02:59.370 --> 00:03:05.290
What if instead of a stream of changes,
we had a stream of all the changes but

54
00:03:05.290 --> 00:03:08.150
it also started with the value
of whatever it was right now.

55
00:03:10.140 --> 00:03:11.680
Does that make sense?

56
00:03:11.680 --> 00:03:14.280
Often, that's a nice, that's a better
way of thinking about the problem,

57
00:03:14.280 --> 00:03:17.670
because instead of thinking about it as,
well, I'm just gonna do this thing,

58
00:03:17.670 --> 00:03:21.540
this one thing right now, and
then I'm gonna worry about streams.

59
00:03:21.540 --> 00:03:24.570
Instead you can just take this one thing,
stick it on the front of the stream,

60
00:03:24.570 --> 00:03:27.560
and then you can think
exclusively about streams,

61
00:03:27.560 --> 00:03:29.670
thinking exclusively in terms of streams.

62
00:03:29.670 --> 00:03:34.470
So if I wanted to just take the value
of whatever was in sub-select and

63
00:03:34.470 --> 00:03:37.570
then just stick it on
the front of the stream.

64
00:03:37.570 --> 00:03:38.550
How would I do that?

65
00:03:38.550 --> 00:03:41.510
Knowing how I solved the problem
of animations allowed last time.

66
00:03:42.610 --> 00:03:45.470
In which we stuck a value at
the front of the observable.

67
00:03:45.470 --> 00:03:47.600
And a value at the back of the observable.

68
00:03:47.600 --> 00:03:48.630
&gt;&gt; Speaker 2: KinCat?

69
00:03:48.630 --> 00:03:49.833
&gt;&gt; Jafar Husain: Yeah, KinCat.

70
00:03:49.833 --> 00:03:51.370
So subs doesn't just mean,

71
00:03:51.370 --> 00:03:55.370
I don't really want subs to mean
all the future changes of the subs.

72
00:03:55.370 --> 00:03:59.020
I want subs to include,
the value of what subs is right now.

73
00:03:59.020 --> 00:04:03.368
And then it's just all the streams of
all the subs I need to care about, so

74
00:04:03.368 --> 00:04:06.737
we're subtly shifting
the definition of what subs is.

75
00:04:08.177 --> 00:04:08.984
&gt;&gt; Jafar Husain: I'm gonna use KinCat.

76
00:04:22.612 --> 00:04:24.257
&gt;&gt; Jafar Husain: Cool.

77
00:04:24.257 --> 00:04:26.570
So now, instead of this.

78
00:04:26.570 --> 00:04:30.155
Instead of just operating on
whatever it is right now,

79
00:04:30.155 --> 00:04:35.520
let's do the equivalent of what this would
be over every item in the substream.

80
00:04:35.520 --> 00:04:38.385
Which now includes not just
future changes of the sub, but

81
00:04:38.385 --> 00:04:41.020
it'll immediately start with
whatever the sub is right now.

82
00:04:42.170 --> 00:04:44.770
So this is how you would do
something to a scalar value.

83
00:04:44.770 --> 00:04:47.870
How do we do the equivalent
of this on a scalar value

84
00:04:47.870 --> 00:04:49.420
to every value in the substream?

85
00:04:53.240 --> 00:04:56.900
That's the leap we need to make when we
think about single value programming and

86
00:04:56.900 --> 00:04:58.580
stream programming.

87
00:04:58.580 --> 00:05:01.960
What do we do?
Well, we took a value and

88
00:05:01.960 --> 00:05:05.030
sub and then we got the sub images for it.

89
00:05:05.030 --> 00:05:08.280
How would I get the sub images for
all of the values?

90
00:05:08.280 --> 00:05:09.024
&gt;&gt; Speaker 2: Map it.
&gt;&gt; Jafar Husain: All the future

91
00:05:09.024 --> 00:05:09.633
values of subs.

92
00:05:09.633 --> 00:05:11.230
Yes, I would map it.

93
00:05:11.230 --> 00:05:12.710
Absolutely.

94
00:05:12.710 --> 00:05:19.640
So I'm gonna go images = subs.map.

95
00:05:19.640 --> 00:05:24.295
And then I'm going to get a sub,
and then I'm going to call,

96
00:05:24.295 --> 00:05:29.631
getSubImages.

97
00:05:29.631 --> 00:05:33.910
Now, how many dimensions
is this collection?

98
00:05:33.910 --> 00:05:36.542
&gt;&gt; Speaker 2: Don't you need
a pass sub to getSubImages?

99
00:05:36.542 --> 00:05:37.362
&gt;&gt; Jafar Husain: My bad, thank you.

100
00:05:40.871 --> 00:05:42.230
&gt;&gt; Jafar Husain: Same question.

101
00:05:42.230 --> 00:05:43.190
&gt;&gt; Speaker 2: Two dimensions.

102
00:05:43.190 --> 00:05:43.770
&gt;&gt; Jafar Husain: Two dimensions.

103
00:05:43.770 --> 00:05:45.502
Why is it two dimensions?

104
00:05:48.679 --> 00:05:50.790
&gt;&gt; Jafar Husain: What
does getSubImages return?

105
00:05:50.790 --> 00:05:53.160
&gt;&gt; Speaker 2: It's a string
of image locations.

106
00:05:53.160 --> 00:05:57.291
&gt;&gt; Jafar Husain: Yeah, well, it's
technically an observable that gives you

107
00:05:57.291 --> 00:06:01.480
one array, but
that's still a flat observable.

108
00:06:01.480 --> 00:06:02.550
It could be an array.

109
00:06:02.550 --> 00:06:03.440
It could be a number.

110
00:06:03.440 --> 00:06:04.850
It doesn't matter.

111
00:06:04.850 --> 00:06:06.930
Just because the observable
only fires once,

112
00:06:06.930 --> 00:06:08.480
two doesn't mean it's not an observable.

113
00:06:08.480 --> 00:06:10.630
So this is technically
an observable of observables for

114
00:06:10.630 --> 00:06:14.720
the same reason as this is
a two-dimensional collection.

115
00:06:14.720 --> 00:06:16.519
Remember this example that we did, guys?

116
00:06:19.570 --> 00:06:21.695
&gt;&gt; Jafar Husain: So
because we've called the function,

117
00:06:21.695 --> 00:06:23.600
which takes a simple value, i.e.

118
00:06:23.600 --> 00:06:24.850
the sub we're in and

119
00:06:24.850 --> 00:06:29.800
creates an observable of an array
of all the images for that, right?

120
00:06:29.800 --> 00:06:33.500
And we've executed it for
every item in another observable,

121
00:06:33.500 --> 00:06:35.705
we're going to end up with
a two dimensional observable.

122
00:06:35.705 --> 00:06:39.020
Make sense?

123
00:06:39.020 --> 00:06:42.710
So, all right.

124
00:06:42.710 --> 00:06:45.780
Well I can't subscribe to this as it is,
it's a two dimensional observable.

125
00:06:47.040 --> 00:06:51.620
&gt;&gt; Speaker 2: Can we use merge map, is it,
or is there a KinCat map and a merge map?

126
00:06:51.620 --> 00:06:54.440
&gt;&gt; Jafar Husain: Yeah, and
just cuz you're using that term,

127
00:06:54.440 --> 00:06:56.780
that's just a shorthand for map merge all.

128
00:06:56.780 --> 00:06:57.540
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Jafar Husain: So,

129
00:06:57.540 --> 00:07:00.846
merge map,
&gt;&gt; Jafar Husain: You do that, and

130
00:07:00.846 --> 00:07:01.770
then you can get rid of this.

131
00:07:01.770 --> 00:07:02.990
So everybody see that?

132
00:07:02.990 --> 00:07:05.870
It's just a short hand for
map and merge all.

133
00:07:05.870 --> 00:07:11.020
And concat a map and concat all has
a concat map which is a short for map and

134
00:07:11.020 --> 00:07:17.940
concat all and not surprisingly switch map
is just short for map switch latest, okay.

135
00:07:19.590 --> 00:07:22.734
So what do we think guys?

136
00:07:22.734 --> 00:07:29.150
So now we have a one dimensional
observable of a raise of images.

137
00:07:29.150 --> 00:07:29.710
Cool.

138
00:07:29.710 --> 00:07:31.530
We can subscribe to this.

139
00:07:31.530 --> 00:07:33.235
Heck, let's actually try it,
what the hell.

140
00:07:35.176 --> 00:07:35.969
&gt;&gt; Jafar Husain: See what happens.

141
00:07:38.469 --> 00:07:40.222
&gt;&gt; Jafar Husain: Uh-oh.

142
00:07:40.222 --> 00:07:42.336
&gt;&gt; Speaker 2: You misspelled
the concat up above.

143
00:07:45.455 --> 00:07:46.023
&gt;&gt; Speaker 2: There it is.

144
00:07:49.411 --> 00:07:52.650
&gt;&gt; Jafar Husain: Wow, so
instantly, we get all of these.

145
00:07:52.650 --> 00:07:55.620
What happened there?

146
00:07:55.620 --> 00:07:59.500
The first sub just came leaping
right out of that observable, right?

147
00:07:59.500 --> 00:08:01.370
Because we concatenated it to the front.

148
00:08:01.370 --> 00:08:05.900
And so we immediately turned around and
got all of the images for that.

149
00:08:05.900 --> 00:08:08.660
By the way, the reason it happened so
quickly is I'm caching in local

150
00:08:08.660 --> 00:08:12.140
storage the result of these calls just so
we don't hit

151
00:08:12.140 --> 00:08:15.520
the Reddit API too often as you guys were
all experimenting with this on your own.

152
00:08:15.520 --> 00:08:18.020
So that's why the second
request happened so quickly.

153
00:08:18.020 --> 00:08:22.660
But in point of fact, in reality, it would
probably take a few hundred milliseconds.

154
00:08:22.660 --> 00:08:23.208
Does that make sense?

155
00:08:23.208 --> 00:08:25.730
Two-tenths of milliseconds.

156
00:08:25.730 --> 00:08:28.220
So all right, we've got and

157
00:08:28.220 --> 00:08:31.010
now presumably if I change
the sub this will be interesting.

158
00:08:31.010 --> 00:08:32.591
If I change the sub what happens?

159
00:08:36.763 --> 00:08:39.470
&gt;&gt; Jafar Husain: I would expect
this to also get yet another array.

160
00:08:39.470 --> 00:08:41.499
I don't know.
I can't tell if we did, but we should.

161
00:08:42.920 --> 00:08:43.440
Yeah, we did.

162
00:08:43.440 --> 00:08:46.150
So here's the second array beginning here.

163
00:08:46.150 --> 00:08:47.330
I think.

164
00:08:47.330 --> 00:08:49.420
Hard to tell, but does that make sense?

165
00:08:50.700 --> 00:08:53.880
Just so
we're 100% clear that that's working.

166
00:08:53.880 --> 00:09:01.279
I will log the lengths and
then we should see that we get it twice.

167
00:09:05.069 --> 00:09:08.930
&gt;&gt; Jafar Husain: So once I change the sub,
right, does that make sense?

168
00:09:10.410 --> 00:09:13.840
And if I switch it back,
you get the picture.

169
00:09:13.840 --> 00:09:15.470
Okay, so we're getting close here,
all right

