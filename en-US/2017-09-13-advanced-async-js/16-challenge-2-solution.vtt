WEBVTT

1
00:00:00.200 --> 00:00:03.760
&gt;&gt; Jafar Husain: I wanna let you guys know
ahead of time this is actually a very

2
00:00:03.760 --> 00:00:04.970
challenging problem.

3
00:00:04.970 --> 00:00:07.980
And after this we're gonna be doing
a problem that's a lot more like

4
00:00:07.980 --> 00:00:10.220
the types of problems you're
gonna be running into day to day.

5
00:00:10.220 --> 00:00:14.710
But I like picking a really hard problem
so we can see how, really seemingly

6
00:00:14.710 --> 00:00:19.550
pretty tough problems can all be broken
down into really small building blocks.

7
00:00:19.550 --> 00:00:23.631
And so a lot of the challenge of RX isn't
learning the small simple functions.

8
00:00:23.631 --> 00:00:27.030
Those are so simple to understand
you can really memorize them.

9
00:00:27.030 --> 00:00:31.720
Really the key to becoming a really
effective programmer with RX is

10
00:00:31.720 --> 00:00:34.380
a lot of practice,
of taking big, big problems and

11
00:00:34.380 --> 00:00:38.630
figuring out how to decompose
them into smaller bits.

12
00:00:38.630 --> 00:00:43.430
So today,
I'm curious actually what you guys think.

13
00:00:43.430 --> 00:00:45.420
What are some, since you tried this,

14
00:00:45.420 --> 00:00:48.940
what are some of the harder aspects
of this particular problem?

15
00:00:48.940 --> 00:00:52.688
What did you find challenging or what
are some of the outstanding questions you

16
00:00:52.688 --> 00:00:55.035
have, for
those who didn't manage to solve it?

17
00:00:59.654 --> 00:01:02.450
&gt;&gt; Speaker 2: Understanding when
a task starts and completes?

18
00:01:02.450 --> 00:01:05.200
&gt;&gt; Jafar Husain: Understanding
when a task starts and completes.

19
00:01:05.200 --> 00:01:07.940
Actually, I think this is probably,
single-handedly,

20
00:01:07.940 --> 00:01:10.340
the most challenging part about this.

21
00:01:10.340 --> 00:01:11.640
Because the reality is,

22
00:01:11.640 --> 00:01:16.420
all of these represent next when
we get the inner observable.

23
00:01:16.420 --> 00:01:18.670
And then we turn around and
subscribe to it.

24
00:01:18.670 --> 00:01:21.080
And all of these represent completes.

25
00:01:21.080 --> 00:01:26.106
But almost every single function that I've
taught you guys today operates on this,

26
00:01:26.106 --> 00:01:26.612
right?

27
00:01:26.612 --> 00:01:31.575
When data is nexted inside of these
observables, we don't actually know of any

28
00:01:31.575 --> 00:01:35.056
function at the moment that
sort of is able to operate and

29
00:01:35.056 --> 00:01:40.710
get a callback when a next or, excuse me,
when a subscribe or a complete is issued.

30
00:01:40.710 --> 00:01:47.576
And so one of the challenges is
figuring out how we solve that problem.

31
00:01:47.576 --> 00:01:50.678
&gt;&gt; Jafar Husain: So before we get to
that though, I'm gonna make a simple

32
00:01:50.678 --> 00:01:55.505
observation, which is let's take a look at
all the data inside of these observables.

33
00:01:55.505 --> 00:01:56.362
Do we care about them?

34
00:01:56.362 --> 00:01:58.654
Do we care about this data?

35
00:02:00.931 --> 00:02:02.290
&gt;&gt; Jafar Husain: No, not really, right?

36
00:02:02.290 --> 00:02:07.670
It doesn't really have all of
the changes correspond to subscribe and

37
00:02:07.670 --> 00:02:09.360
completes here, right?

38
00:02:09.360 --> 00:02:13.260
Subscribe and completes,
so how do we go from this,

39
00:02:13.260 --> 00:02:17.895
and I break this down just to this.

40
00:02:33.249 --> 00:02:35.695
&gt;&gt; Jafar Husain: How do we get
rid of the data inside of?

41
00:02:35.695 --> 00:02:37.495
Tell me how we go that first step.

42
00:02:37.495 --> 00:02:39.685
&gt;&gt; Speaker 2: We could filter it.

43
00:02:39.685 --> 00:02:46.043
&gt;&gt; Jafar Husain: Filter it, okay, so
go tasks.filter, task, and now what?

44
00:02:47.383 --> 00:02:51.133
&gt;&gt; Jafar Husain: So when I run
filter over tasks, every function,

45
00:02:51.133 --> 00:02:55.958
the filter function's gonna get
called with each of these inner

46
00:02:55.958 --> 00:03:01.080
observables cuz tasks is
a two-dimensional observable, right?

47
00:03:01.080 --> 00:03:02.899
On next observables.

48
00:03:04.540 --> 00:03:06.710
So what are we gonna filter on then?

49
00:03:06.710 --> 00:03:08.520
&gt;&gt; Speaker 2: Maybe we
would want instead map and

50
00:03:08.520 --> 00:03:10.740
then filter on each individual task?

51
00:03:10.740 --> 00:03:12.990
&gt;&gt; Jafar Husain: Right,
because if you think about it,

52
00:03:12.990 --> 00:03:16.870
we're actually running a map operation on
the outer observable because we're trying

53
00:03:16.870 --> 00:03:21.250
to transform each item inside of
the observable into another item.

54
00:03:21.250 --> 00:03:24.540
So actually the outer
observable we wanna map over,

55
00:03:24.540 --> 00:03:27.940
just as if I was mapping over a bunch
of numbers and adding one to them.

56
00:03:29.290 --> 00:03:34.720
So let's switch this to map,
and now that we have

57
00:03:34.720 --> 00:03:39.739
mapped over each task, and we have each
task, how do we wanna transform that task?

58
00:03:42.266 --> 00:03:45.240
&gt;&gt; Jafar Husain: So now we've got
each one of these individual tasks.

59
00:03:45.240 --> 00:03:47.290
How do we want to transform them
to make sure that they have no

60
00:03:47.290 --> 00:03:48.136
data inside of them?

61
00:03:48.136 --> 00:03:51.827
&gt;&gt; Speaker 2: Just task.filter false.

62
00:03:51.827 --> 00:03:54.310
&gt;&gt; Jafar Husain: Yes,
this is one of my favorite tricks.

63
00:03:54.310 --> 00:03:59.514
Just doing this because if
the function always returns false,

64
00:03:59.514 --> 00:04:02.610
then all the data inside goes bye bye,
right?

65
00:04:03.850 --> 00:04:06.390
So that's all well and
good, now we've got this.

66
00:04:07.850 --> 00:04:11.140
How do we get closer to where we wanna be?

67
00:04:11.140 --> 00:04:14.880
Well, the big mental leap
that we need to make here

68
00:04:14.880 --> 00:04:17.090
is I wanna be able to go from this.

69
00:04:17.090 --> 00:04:20.200
Because we can't count completes or

70
00:04:20.200 --> 00:04:23.110
subscribe using the methods
that we've learned today.

71
00:04:23.110 --> 00:04:28.840
We want to be able to, what if we
could insert data at the front and

72
00:04:28.840 --> 00:04:32.718
at the end of the observable, maybe put in

73
00:04:32.718 --> 00:04:37.860
-1 and 1 at the beginning and
ends of the observable.

74
00:04:37.860 --> 00:04:42.183
If I had an arbitrary observable and
I wanted to put 1 at the front of it,

75
00:04:42.183 --> 00:04:43.419
how would I do that?

76
00:04:43.419 --> 00:04:46.610
&gt;&gt; Speaker 3: You could use start with?

77
00:04:46.610 --> 00:04:49.051
&gt;&gt; Jafar Husain: Start with,
yeah, start with.

78
00:04:49.051 --> 00:04:53.028
That's a more specific, so I could take an
observable and I could go start with and

79
00:04:53.028 --> 00:04:55.180
I can pass some value, absolutely.

80
00:04:55.180 --> 00:04:59.520
That's actually a more specific version of
concat, which I showed you guys earlier.

81
00:04:59.520 --> 00:05:01.444
So remember our observable.concat?

82
00:05:05.619 --> 00:05:09.967
&gt;&gt; Jafar Husain: Right, if I wanna put
something at the front of the Observable,

83
00:05:09.967 --> 00:05:14.008
I can just concat an Observable
with one value to the front.

84
00:05:14.008 --> 00:05:17.622
And then I could contact an Observable
of one value to the end.

85
00:05:17.622 --> 00:05:19.755
I like this trick.

86
00:05:19.755 --> 00:05:24.112
So,
&gt;&gt; Jafar Husain: Help me out here, guys.

87
00:05:24.112 --> 00:05:31.530
How am I gonna turn this,
&gt;&gt; Jafar Husain: Into this?

88
00:05:35.684 --> 00:05:37.289
&gt;&gt; Jafar Husain: We'll take
what we have here so far.

89
00:05:46.898 --> 00:05:49.812
&gt;&gt; Speaker 3: Is this where
we use scan [INAUDIBLE]?

90
00:05:49.812 --> 00:05:50.457
&gt;&gt; Jafar Husain: Scan?

91
00:05:50.457 --> 00:05:54.637
Interesting, well, at the moment all I'm
trying to do is, I'm just gonna try and

92
00:05:54.637 --> 00:05:57.219
transform this observable
into this observable.

93
00:05:58.650 --> 00:06:00.560
So I don't think we need scan yet.

94
00:06:00.560 --> 00:06:01.320
&gt;&gt; Speaker 3: Okay, map then?

95
00:06:03.070 --> 00:06:04.430
&gt;&gt; Jafar Husain: That's also a good guess.

96
00:06:04.430 --> 00:06:08.490
But if we map over an empty observable,
what do we always get?

97
00:06:08.490 --> 00:06:12.134
&gt;&gt; Speaker 3: Well, a map with
inside of it and a concat operation.

98
00:06:12.134 --> 00:06:14.340
&gt;&gt; Jafar Husain: Gotcha, so
we already have this map right here.

99
00:06:14.340 --> 00:06:19.210
So if we do this,
&gt;&gt; Jafar Husain: And you're right,

100
00:06:19.210 --> 00:06:21.220
starts with would be
a shorter way of doing this.

101
00:06:21.220 --> 00:06:23.780
There might be,
maybe there's an ends with also,

102
00:06:23.780 --> 00:06:27.040
in which case we might be able
to do this slightly differently.

103
00:06:27.040 --> 00:06:30.980
It might even be more terse, but
at the moment, I'm just gonna do this.

104
00:06:45.452 --> 00:06:47.640
&gt;&gt; Jafar Husain: And
now we've got this, right?

105
00:06:47.640 --> 00:06:53.420
So first we took every task inside, we got
rid of all the goo, all the data, and then

106
00:06:53.420 --> 00:06:58.750
we further transformed it by adding
a -1 at the front and a 1 at the end.

107
00:07:00.510 --> 00:07:03.820
So now, any ideas what we wanna do?

108
00:07:03.820 --> 00:07:07.770
&gt;&gt; Speaker 2: I was thinking we could
use distincts with, or distinct, sorry,

109
00:07:07.770 --> 00:07:14.080
distinct latest to detect when
an Observable starts events?

110
00:07:14.080 --> 00:07:16.250
&gt;&gt; Jafar Husain: So it sounds like
you're saying distinctUntilChanged.

111
00:07:16.250 --> 00:07:16.910
Is that what you mean?

112
00:07:16.910 --> 00:07:18.120
&gt;&gt; Speaker 2: I think so.
Yeah, that's what I meant.

113
00:07:18.120 --> 00:07:20.560
&gt;&gt; Jafar Husain: Got you, so
quick reminders to everybody

114
00:07:20.560 --> 00:07:22.220
what distinctUntilChanged does.

115
00:07:26.889 --> 00:07:28.160
&gt;&gt; Jafar Husain: Make
this full screen here,

116
00:07:29.600 --> 00:07:30.188
&gt;&gt; Jafar Husain: Or not.

117
00:07:33.295 --> 00:07:34.009
&gt;&gt; Jafar Husain: All right, so

118
00:07:34.009 --> 00:07:37.881
distinctUntilChanged() takes multiple
successive values in a stream and

119
00:07:37.881 --> 00:07:40.573
just filters out the subsequent
successive values.

120
00:07:40.573 --> 00:07:44.639
So if you have the same value
multiple times like 5 here,

121
00:07:44.639 --> 00:07:51.230
we just suppress the subsequent values
that are the same as the previous value.

122
00:07:51.230 --> 00:07:55.690
So help me understand how do you
wanna use distinctUntilChanged here?

123
00:07:55.690 --> 00:07:56.950
&gt;&gt; Speaker 2: I see.
I was forgetting one step.

124
00:07:56.950 --> 00:08:00.570
So first, I would merge them together.

125
00:08:00.570 --> 00:08:03.680
&gt;&gt; Jafar Husain: Right, so here's the
trick because now that we've got a value

126
00:08:03.680 --> 00:08:07.840
at the beginning and at the end,
now we don't need the structure anymore.

127
00:08:07.840 --> 00:08:10.500
We can get rid of
the two-dimensional observable and

128
00:08:10.500 --> 00:08:13.640
we can flatten it, absolutely right.

129
00:08:15.170 --> 00:08:17.290
So I'm gonna throw a merge all on there.

130
00:08:20.874 --> 00:08:23.575
&gt;&gt; Jafar Husain: I'm gonna pay careful
attention to my formatting because

131
00:08:23.575 --> 00:08:27.321
the thing about O Observable is that often
you find that we make, let's face it,

132
00:08:27.321 --> 00:08:29.340
big fat expressions, right?

133
00:08:29.340 --> 00:08:32.020
But if you're careful about how
you format your expressions,

134
00:08:32.020 --> 00:08:34.590
they can be just as readable
as structured code.

135
00:08:34.590 --> 00:08:41.320
So here I have, you can see that
map is transforming the result or

136
00:08:41.320 --> 00:08:44.520
merge all is transforming the result
of the map, and so on and so forth.

