WEBVTT

1
00:00:00.390 --> 00:00:03.270
&gt;&gt; Jafar Husain: So I don't think I did as
good a job of setting up the problem as I

2
00:00:03.270 --> 00:00:04.100
wanted to set it up.

3
00:00:04.100 --> 00:00:07.770
So if you remember, the issue is, and
we've actually run into at this problem

4
00:00:07.770 --> 00:00:11.280
immediately, which is that not all these
images necessarily are gonna be valid.

5
00:00:11.280 --> 00:00:15.700
And so we see this kinda ugly tiny little
placeholder broken image placeholder.

6
00:00:15.700 --> 00:00:20.848
Instead, I've actually got an image,
public domain image that

7
00:00:20.848 --> 00:00:25.630
I'd like to display in such a case,
somewhere around here.

8
00:00:28.917 --> 00:00:33.130
&gt;&gt; Jafar Husain: I wanna display this
particular image if there's an error.

9
00:00:33.130 --> 00:00:36.785
And so, I've actually stored that,
and it's here in a constant,

10
00:00:36.785 --> 00:00:39.976
LOADING_ERROR_URL.

11
00:00:39.976 --> 00:00:42.850
All right, and so whenever we run
across an error preloading an image,

12
00:00:42.850 --> 00:00:45.480
we'll just display this image instead.

13
00:00:45.480 --> 00:00:46.930
And so, how are we gonna do that?

14
00:00:46.930 --> 00:00:53.700
Well remember, preloading works just like
most APIs, AsyncAPIs in the browser.

15
00:00:53.700 --> 00:00:55.160
It uses callbacks.

16
00:00:55.160 --> 00:01:00.200
And so, how are we gonna, basically,
the challenge is we wanna create ourselves

17
00:01:00.200 --> 00:01:05.603
a preload image function, which returns an
observable that either gives us the image,

18
00:01:05.603 --> 00:01:10.296
the URL, once it's been successfully
loaded, or gives us this constant,

19
00:01:13.185 --> 00:01:15.326
&gt;&gt; Jafar Husain: LOADING_ERROR_URL.

20
00:01:17.978 --> 00:01:18.820
&gt;&gt; Jafar Husain: Does that make sense?

21
00:01:18.820 --> 00:01:23.681
So let's write preLoadImage, so it's
an observable of either the successful

22
00:01:23.681 --> 00:01:26.801
image after we've confirmed
it's preloaded, or

23
00:01:26.801 --> 00:01:30.586
this fallback error loading URL
in the event we have an error.

24
00:01:30.586 --> 00:01:35.564
So we're gonna create an image object for
the preloading.

25
00:01:38.813 --> 00:01:40.675
&gt;&gt; Jafar Husain: And
how are we gonna do it?

26
00:01:40.675 --> 00:01:42.500
How are we gonna build an observable here?

27
00:01:45.152 --> 00:01:47.360
&gt;&gt; Speaker 2: Images switch.

28
00:01:48.440 --> 00:01:50.340
&gt;&gt; Jafar Husain: Well actually,
let's not worry about that right now.

29
00:01:50.340 --> 00:01:51.865
Let's just worry about this tiny problem.

30
00:01:51.865 --> 00:01:56.881
PreLoadImage is gonna return us an
observable that either gives us the same

31
00:01:56.881 --> 00:02:02.708
source that we pass in if the image was
successfully preloaded, i.e., right here.

32
00:02:05.133 --> 00:02:09.436
&gt;&gt; Jafar Husain: Or it gives us
a fallback constant, excuse me,

33
00:02:09.436 --> 00:02:13.320
gives us this image to display right here.

34
00:02:13.320 --> 00:02:14.840
So the observable will never error,

35
00:02:14.840 --> 00:02:19.240
it'll either just onNext the source
that we've asked it to preload, or

36
00:02:19.240 --> 00:02:23.869
it'll onNext us this fallback source,
so we display an icon onscreen.

37
00:02:25.190 --> 00:02:26.960
So how are we gonna build it?

38
00:02:26.960 --> 00:02:28.669
We could, yeah?

39
00:02:28.669 --> 00:02:31.347
&gt;&gt; Speaker 2: I was just gonna say we
could start by returning an observable,

40
00:02:31.347 --> 00:02:32.815
but that was-
&gt;&gt; Jafar Husain: Yeah,

41
00:02:32.815 --> 00:02:36.550
also you're absolutely right that we could
do what we've been doing up until now.

42
00:02:36.550 --> 00:02:38.210
We could write a special operator for
this.

43
00:02:38.210 --> 00:02:41.160
Like we could build something
where we return and

44
00:02:41.160 --> 00:02:43.850
create a new observable by
defining the subscribe method.

45
00:02:43.850 --> 00:02:45.600
But I'm gonna suggest that
we don't need to do that.

46
00:02:45.600 --> 00:02:48.860
We can use the observable
operators that we've learned

47
00:02:48.860 --> 00:02:51.410
to avoid having to write our
own definition of subscribe.

48
00:02:51.410 --> 00:02:53.030
Does that make sense?

49
00:02:53.030 --> 00:02:57.020
So, onload is an event off of image.

50
00:02:57.020 --> 00:02:59.726
In addition to doing this,
I can also do addEventListener.

51
00:03:01.884 --> 00:03:05.260
&gt;&gt; Jafar Husain: Do we know how to
turn an event into an observable?

52
00:03:05.260 --> 00:03:05.833
&gt;&gt; Speaker 3: From event.

53
00:03:05.833 --> 00:03:11.690
&gt;&gt; Jafar Husain: Yeah, fromEvent, right?

54
00:03:22.081 --> 00:03:24.882
&gt;&gt; Jafar Husain: Okay, that's interesting.

55
00:03:28.227 --> 00:03:29.471
&gt;&gt; Jafar Husain: That's one down.

56
00:03:29.471 --> 00:03:31.495
&gt;&gt; Speaker 3: So the same with error?

57
00:03:31.495 --> 00:03:32.751
&gt;&gt; Jafar Husain: Error, okay.

58
00:03:52.808 --> 00:03:56.072
&gt;&gt; Jafar Husain: Okay, now what are these
observables respectively going to

59
00:03:56.072 --> 00:03:57.850
give me in the stream?

60
00:03:57.850 --> 00:03:59.330
&gt;&gt; Speaker 3: URLs.

61
00:03:59.330 --> 00:04:01.930
&gt;&gt; Jafar Husain: URLs, but right now
they're not gonna give me URLs, right?

62
00:04:01.930 --> 00:04:02.770
&gt;&gt; Speaker 3: Right.
&gt;&gt; Jafar Husain: Right now they're

63
00:04:02.770 --> 00:04:05.320
gonna give me an event object
that comes in to load.

64
00:04:05.320 --> 00:04:09.680
So how do we make it, how do we
substitute that event object for a URL?

65
00:04:12.445 --> 00:04:13.760
&gt;&gt; Speaker 4: Map.

66
00:04:13.760 --> 00:04:14.500
&gt;&gt; Jafar Husain: Map, yeah.

67
00:04:14.500 --> 00:04:17.820
Map's what we use whenever we wanna
substitute data inside the stream

68
00:04:17.820 --> 00:04:19.280
for other data.

69
00:04:19.280 --> 00:04:23.735
So,
&gt;&gt; Jafar Husain: That's map overload, and

70
00:04:23.735 --> 00:04:24.860
what are we gonna return?

71
00:04:24.860 --> 00:04:27.960
I'm gonna ignore the incoming event
object cuz I don't care about it.

72
00:04:27.960 --> 00:04:29.310
And what am I gonna return now?

73
00:04:30.600 --> 00:04:31.990
&gt;&gt; Speaker 4: Source.
&gt;&gt; Jafar Husain: .Source, yeah.

74
00:04:31.990 --> 00:04:33.390
The source that I was asked to preload.

75
00:04:33.390 --> 00:04:38.700
And in the case of failure,
what do I want the screen to contain?

76
00:04:39.770 --> 00:04:43.193
&gt;&gt; Speaker 4: Same thing but
map the source to your constant.

77
00:04:46.613 --> 00:04:47.113
&gt;&gt; Jafar Husain: Yeah.

78
00:04:49.830 --> 00:04:53.977
&gt;&gt; Jafar Husain: So the reality is you
should almost never have to write your own

79
00:04:53.977 --> 00:04:55.450
subscribe methods.

80
00:04:55.450 --> 00:04:59.190
As we have seen it, throughout this class,
almost every problem, not always, but

81
00:04:59.190 --> 00:05:03.530
almost every problem, can be broken
down into use of smaller operators.

82
00:05:03.530 --> 00:05:04.360
So we're not done yet.

83
00:05:04.360 --> 00:05:06.950
What's the last step we gotta do here?

84
00:05:06.950 --> 00:05:09.462
&gt;&gt; Speaker 4: Merge them together and
take only the first one?

85
00:05:09.462 --> 00:05:13.245
&gt;&gt; Jafar Husain: Yeah, merge them
together and take only the first one.

86
00:05:13.245 --> 00:05:19.312
So let's return Observable.merge(success,
failure).

87
00:05:19.312 --> 00:05:21.909
And I could do take(1).

88
00:05:21.909 --> 00:05:23.890
Is that what you're suggesting?

89
00:05:23.890 --> 00:05:24.994
Is that necessary here though?

90
00:05:27.191 --> 00:05:28.540
&gt;&gt; Jafar Husain: Why isn't that necessary?

91
00:05:29.970 --> 00:05:33.200
And it's a totally valid thing to do but
is it necessary?

92
00:05:33.200 --> 00:05:36.340
&gt;&gt; Speaker 5: I guess it would
either load it or error.

93
00:05:36.340 --> 00:05:37.670
&gt;&gt; Jafar Husain: Yeah,
it's only gonna load or error,

94
00:05:37.670 --> 00:05:42.340
so take(1)'s probably too much
of an abundance of caution here.

95
00:05:42.340 --> 00:05:45.710
But cool, now we've got
a function which'll take, yeah?

96
00:05:45.710 --> 00:05:48.488
&gt;&gt; Speaker 5: Are we relying,
with this sort of method,

97
00:05:48.488 --> 00:05:51.973
are we relying on the browser
than to cache the image?

98
00:05:51.973 --> 00:05:56.832
Or is there a possibility that we'll load
the image twice since we're doing it on

99
00:05:56.832 --> 00:06:02.660
the constructor of image and then as well
in setting the source of an image later?

100
00:06:02.660 --> 00:06:04.610
&gt;&gt; Jafar Husain: That's
a good question actually.

101
00:06:04.610 --> 00:06:06.680
&gt;&gt; Speaker 5: Image will
be caching at a load event.

102
00:06:06.680 --> 00:06:07.460
&gt;&gt; Jafar Husain: I believe so.

103
00:06:07.460 --> 00:06:09.970
Yeah, we're relying on
the browsers even regardless

104
00:06:09.970 --> 00:06:12.004
whether you do it with your image
which is also a done object.

105
00:06:12.004 --> 00:06:15.312
&gt;&gt; Speaker 5: I was just curious if we
get to get like the image content from

106
00:06:15.312 --> 00:06:17.760
the event and
then actually reuse that, but

107
00:06:17.760 --> 00:06:22.150
if it's the browser's just gonna cache
it then I guess it's for simplicity.

108
00:06:22.150 --> 00:06:24.482
&gt;&gt; Jafar Husain: Yeah, we're just
relying on the browser to cache,

109
00:06:24.482 --> 00:06:26.770
to avoid us dialing the same
image multiply times.

110
00:06:27.890 --> 00:06:30.890
So, now that we have this preload image
function, which is a handy function.

111
00:06:30.890 --> 00:06:35.810
How are we gonna modify our code so
far to avoid,

112
00:06:35.810 --> 00:06:38.560
let me put that closer to a code.

113
00:06:38.560 --> 00:06:42.392
How are we gonna modify our code
to avoid displaying broken images?

114
00:06:52.034 --> 00:06:53.743
&gt;&gt; Jafar Husain: Did I do that right?

115
00:06:57.740 --> 00:06:59.440
&gt;&gt; Jafar Husain: So
let's remember where we are here, right?

116
00:06:59.440 --> 00:07:03.790
Every time a new sub comes in, we attempt
to load all of that sub's images, and

117
00:07:03.790 --> 00:07:11.090
we return a stream of all the selected
indices in the images for that sub.

118
00:07:11.090 --> 00:07:17.200
Every single time a new sub comes in, we
switch to the images for the latest sub.

119
00:07:18.370 --> 00:07:22.560
And then once again, start returning
the images for each selected index.

120
00:07:24.200 --> 00:07:28.630
Now, we need to somehow
transform this image, or

121
00:07:28.630 --> 00:07:31.650
this image URL,
at least we need to do a preload.

122
00:07:31.650 --> 00:07:32.763
How are we gonna do that here?

123
00:07:35.198 --> 00:07:37.122
&gt;&gt; Speaker 5: We map to preload.

124
00:07:37.122 --> 00:07:39.602
&gt;&gt; Jafar Husain: Yeah, so here, right?

125
00:07:39.602 --> 00:07:47.410
This particular, this right here is
a stream of all the selected images.

126
00:07:47.410 --> 00:07:52.629
If we map over that,
&gt;&gt; Jafar Husain: We will get a URL,

127
00:07:52.629 --> 00:07:56.460
and we could call preloadImage on the url.

128
00:07:58.410 --> 00:08:02.340
How many dimensions is this
sub observable right here?

129
00:08:02.340 --> 00:08:03.385
Now, how many dimensions is it?

130
00:08:09.272 --> 00:08:12.200
&gt;&gt; Jafar Husain: Well, we mapped over
every item in an observable and we return,

131
00:08:12.200 --> 00:08:13.622
what is preloadImage return?

132
00:08:16.193 --> 00:08:17.080
&gt;&gt; Speaker 5: An observable.

133
00:08:17.080 --> 00:08:18.220
&gt;&gt; Jafar Husain: Another observable,
and so

134
00:08:18.220 --> 00:08:21.540
now we've deepened the dimensionality
of the observable.

135
00:08:21.540 --> 00:08:24.498
And so,
every single time you select a new image,

136
00:08:24.498 --> 00:08:28.663
we're gonna begin preloading it,
and make a network request [SOUND].

137
00:08:28.663 --> 00:08:29.810
How do we flatten it down?

138
00:08:29.810 --> 00:08:30.730
What strategy do we use?

139
00:08:33.124 --> 00:08:35.960
&gt;&gt; Speaker 5: Switch or
doesn't really matter, merge.

140
00:08:35.960 --> 00:08:38.450
&gt;&gt; Jafar Husain: Well I think it matters
because if somebody hits next, next, next,

141
00:08:38.450 --> 00:08:43.098
next, next, we're gonna start preloading
four images concurrently, right?

142
00:08:43.098 --> 00:08:45.630
&gt;&gt; Speaker 5: So switch.

143
00:08:45.630 --> 00:08:47.130
&gt;&gt; Jafar Husain: Yeah, if we did merge,

144
00:08:47.130 --> 00:08:50.650
then the last image to finish loading
would be the last one to come out, but

145
00:08:50.650 --> 00:08:54.320
it's not necessarily the last image
that they selected when they press next.

146
00:08:54.320 --> 00:08:55.868
&gt;&gt; Speaker 5: Right.
&gt;&gt; Jafar Husain: So which one,

147
00:08:55.868 --> 00:09:00.678
which flattening operator am I gonna use?

148
00:09:00.678 --> 00:09:01.351
&gt;&gt; Speaker 5: Switch.

149
00:09:01.351 --> 00:09:05.848
&gt;&gt; Jafar Husain: Switch, yeah.

150
00:09:09.292 --> 00:09:12.682
&gt;&gt; Jafar Husain: Gotta put
that in the right place.

151
00:09:12.682 --> 00:09:13.723
&gt;&gt; Speaker 6: Your params is off.

152
00:09:13.723 --> 00:09:16.564
&gt;&gt; Jafar Husain: Got my params wrong.

153
00:09:16.564 --> 00:09:19.010
&gt;&gt; Speaker 6: The one up above it.

154
00:09:19.010 --> 00:09:19.610
That one.

155
00:09:19.610 --> 00:09:20.599
&gt;&gt; Jafar Husain: This one.

156
00:09:25.350 --> 00:09:26.526
&gt;&gt; Jafar Husain: Did I do that right?

157
00:09:26.526 --> 00:09:27.460
Probably.
&gt;&gt; Speaker 6: Probably.

158
00:09:27.460 --> 00:09:28.271
&gt;&gt; Jafar Husain: And dot.

159
00:09:28.271 --> 00:09:29.000
&gt;&gt; Speaker 6: Yep.

160
00:09:33.576 --> 00:09:35.471
&gt;&gt; Jafar Husain: Yeah, now there's
a couple of ways you can nest this.

161
00:09:35.471 --> 00:09:40.107
I prefer to do it in
this particular style,

162
00:09:41.853 --> 00:09:43.357
&gt;&gt; Jafar Husain: Which will also work.

163
00:09:50.740 --> 00:09:53.206
&gt;&gt; Jafar Husain: So
we can flatten twice and then that,

164
00:09:53.206 --> 00:09:55.373
I just prefer to keep doing this.

165
00:09:58.113 --> 00:09:58.912
&gt;&gt; Jafar Husain: Did I do that right?

166
00:09:58.912 --> 00:10:00.853
Sorry, let me back out here.

167
00:10:05.091 --> 00:10:06.311
&gt;&gt; Jafar Husain: Before I preorder this,

168
00:10:06.311 --> 00:10:08.698
I just wanna make sure
it's working correctly.

169
00:10:08.698 --> 00:10:10.474
I think that's right, right?

170
00:10:12.830 --> 00:10:13.721
&gt;&gt; Jafar Husain: Let's give it a shot.

171
00:10:21.248 --> 00:10:22.588
&gt;&gt; Jafar Husain: It's like I got an error

172
00:10:31.263 --> 00:10:32.078
&gt;&gt; Jafar Husain: Possibly.

173
00:10:39.427 --> 00:10:40.410
&gt;&gt; Speaker 7: In the download
is the image on it?

174
00:10:41.770 --> 00:10:45.280
Element source set to,
just for debugging purposes.

175
00:10:45.280 --> 00:10:47.120
&gt;&gt; Jafar Husain: What is
the image element source set to?

176
00:10:47.120 --> 00:10:49.170
&gt;&gt; Speaker 7: Yeah,
just like in the DOM, and that-

177
00:10:49.170 --> 00:10:49.680
&gt;&gt; Jafar Husain: Check it out.

178
00:10:49.680 --> 00:10:50.230
Yeah.

179
00:10:50.230 --> 00:10:51.180
&gt;&gt; Speaker 7: Yeah.
&gt;&gt; Jafar Husain: Good idea.

180
00:10:51.180 --> 00:10:51.917
&gt;&gt; Speaker 7: Just to debug it.

181
00:10:56.024 --> 00:10:57.960
&gt;&gt; Jafar Husain: I think
it's just not getting set.

182
00:10:57.960 --> 00:10:59.318
So somewhere we lost.

183
00:10:59.318 --> 00:11:00.885
We lost.

184
00:11:04.551 --> 00:11:06.795
&gt;&gt; Jafar Husain: So for
each one of the images coming out,

185
00:11:06.795 --> 00:11:11.580
we're mapping that under preloadImages and
we are calling switch on that.

186
00:11:11.580 --> 00:11:14.287
So I'm gonna actually see if we
are even getting into preloadImage.

187
00:11:24.352 --> 00:11:29.040
&gt;&gt; Jafar Husain: Yup, so one possibility
is that we're not firing in here somehow.

188
00:11:29.040 --> 00:11:31.034
On next or something is not firing.

189
00:11:36.950 --> 00:11:38.935
&gt;&gt; Jafar Husain: Just make sure
that this is indeed an image.

190
00:11:42.412 --> 00:11:45.683
&gt;&gt; Jafar Husain: It's not, but that would
explain why it's hopefully going to fail.

191
00:11:47.882 --> 00:11:51.400
&gt;&gt; Jafar Husain: And so,
now if I wanna further debug this, right?

192
00:11:51.400 --> 00:11:52.080
What do I have to do?

193
00:11:52.080 --> 00:11:54.070
I can't really step into anything.

194
00:11:54.070 --> 00:11:56.250
By the way,
there's an upcoming version of Chrome.

195
00:11:56.250 --> 00:11:57.496
I don't have it right now.

196
00:11:57.496 --> 00:11:59.640
Cool, look.

197
00:11:59.640 --> 00:12:00.760
&gt;&gt; Speaker 5: That's awesome.
&gt;&gt; Jafar Husain: Everybody see that?

198
00:12:00.760 --> 00:12:03.359
&gt;&gt; Speaker 5: [LAUGH]
&gt;&gt; Jafar Husain: That's actually pretty

199
00:12:03.359 --> 00:12:06.511
recent so,
now let's see what the hell is going on.

200
00:12:10.720 --> 00:12:13.688
&gt;&gt; Jafar Husain: Are we actually making
it in here which is where we expect it to

201
00:12:13.688 --> 00:12:14.860
be, right?

202
00:12:14.860 --> 00:12:18.410
Functional programming just got a lot
more debuggable as you guys can see.

203
00:12:18.410 --> 00:12:23.320
Now, so it looks like what we
expected to happen didn't happen.

204
00:12:23.320 --> 00:12:27.590
So let's try that one more time and
see where we went wrong.

205
00:12:27.590 --> 00:12:32.770
So we expect that error is fired,
but we're not seeing it fire.

206
00:12:34.670 --> 00:12:40.890
Now to test that, I'm probably just
gonna confirm my assumption that image.

207
00:12:40.890 --> 00:12:42.460
I'm not crazy, right?

208
00:12:42.460 --> 00:12:44.350
That was your assumption as well, right?

209
00:12:44.350 --> 00:12:47.473
That's what I thought.

210
00:12:53.432 --> 00:12:59.294
&gt;&gt; Jafar Husain: Okay, can anybody think
of another reason why that wouldn't fire,

211
00:12:59.294 --> 00:13:00.920
out of curiosity?

212
00:13:02.910 --> 00:13:05.910
Maybe we don't understand how image works,
but maybe we do.

213
00:13:05.910 --> 00:13:07.403
Assuming image does work this way,

214
00:13:07.403 --> 00:13:09.952
what's another reason why that
callback would never fire?

215
00:13:17.261 --> 00:13:20.696
&gt;&gt; Jafar Husain: Well, maybe we never
subscribe to the observable, right?

216
00:13:20.696 --> 00:13:23.590
In this case, we absolutely should.

217
00:13:23.590 --> 00:13:26.292
The switch operator is receiving these
observables it should be subscribing

218
00:13:26.292 --> 00:13:28.453
to each and everyone, but
it's interesting to think about,

219
00:13:28.453 --> 00:13:30.006
that's the thing about laziness, right?

220
00:13:30.006 --> 00:13:33.723
If nobody subscribed to the observable,
that's one possible explanation for

221
00:13:33.723 --> 00:13:35.365
why that's not getting in there.

222
00:13:35.365 --> 00:13:42.600
So,
&gt;&gt; Speaker 4: Failure is undefined.

223
00:13:42.600 --> 00:13:45.290
&gt;&gt; Jafar Husain: Where does it say that?

224
00:13:45.290 --> 00:13:49.580
&gt;&gt; Speaker 4: It's when you click on it,
it said failure undefined.

225
00:13:49.580 --> 00:13:50.540
&gt;&gt; Jafar Husain: I wouldn't
be worried about that.

226
00:13:50.540 --> 00:13:52.742
I think it just hasn't gone
through defining that yet.

227
00:14:01.074 --> 00:14:04.327
&gt;&gt; Jafar Husain: So maybe I'm pretty
sure that's how preloading works so,

228
00:14:04.327 --> 00:14:06.860
I must be making some other obvious error.

229
00:14:06.860 --> 00:14:13.030
All right, so
I'm not crazy I'm pretty sure that's

230
00:14:13.030 --> 00:14:16.940
the way preloading supposed to work so
we're probably just doing something else.

231
00:14:16.940 --> 00:14:17.830
Obviously wrong.

232
00:14:19.550 --> 00:14:23.223
No, I'm just gonna Google it.

233
00:14:23.223 --> 00:14:32.723
[LAUGH]
&gt;&gt; Jafar Husain: Is

234
00:14:32.723 --> 00:14:33.939
it maybe error?

235
00:14:36.928 --> 00:14:40.426
&gt;&gt; Jafar Husain: Or maybe it doesn't have
an addEventListener, remove that listener.

236
00:14:40.426 --> 00:14:45.284
Anybody out there in cyberspace
know how to preload an image?

237
00:14:48.791 --> 00:14:51.478
&gt;&gt; Jafar Husain: I have tried this already
once so I'm pretty sure it's the right

238
00:14:51.478 --> 00:14:53.883
answer but I'm probably some
sort of typo or something.

239
00:15:03.809 --> 00:15:06.004
&gt;&gt; Jafar Husain: No.

240
00:15:10.744 --> 00:15:12.134
&gt;&gt; Jafar Husain: So there's an on load.

241
00:15:14.353 --> 00:15:15.529
&gt;&gt; Jafar Husain: I see a non-error.

242
00:15:27.890 --> 00:15:30.912
&gt;&gt; Jafar Husain: Lots of happy cases in
here, but I don't see the unhappy case.

243
00:15:37.563 --> 00:15:39.313
&gt;&gt; Jafar Husain: There's at least
one other person who thinks this is

244
00:15:39.313 --> 00:15:40.081
the right way to do it.

245
00:15:42.300 --> 00:15:44.635
&gt;&gt; Speaker 6: I found a stack overflow
where they're having the same problem.

246
00:15:44.635 --> 00:15:45.310
&gt;&gt; Jafar Husain: [LAUGH]
&gt;&gt; Speaker 6: And

247
00:15:45.310 --> 00:15:48.785
the solution was use jQuery bind to error.

248
00:15:48.785 --> 00:15:52.040
&gt;&gt; Speaker 5: [LAUGH]
&gt;&gt; Jafar Husain: Usually the solution to

249
00:15:52.040 --> 00:15:54.000
DOM problems, right, use jQuery.

250
00:15:54.000 --> 00:15:55.125
&gt;&gt; Speaker 6: From the chat,

251
00:15:55.125 --> 00:16:00.080
[COUGH] someone's asking is it, that
the element isn't inserted into the DOM?

252
00:16:00.080 --> 00:16:02.300
&gt;&gt; Jafar Husain: No, you shouldn't have
to insert the element into the DOM,

253
00:16:02.300 --> 00:16:04.010
as this guy's showing right here.

254
00:16:05.130 --> 00:16:07.000
But it's a reasonable guess.

255
00:16:07.000 --> 00:16:10.214
I'm sorry that what's stack.overflow say,
why do I need to use jQuery,

256
00:16:10.214 --> 00:16:11.190
is this a browser bug?

257
00:16:12.230 --> 00:16:16.660
&gt;&gt; Speaker 7: Just that they added a event
listener to image and it wasn't firing.

258
00:16:16.660 --> 00:16:20.492
But with jQuery bind,
that was the solution,

259
00:16:20.492 --> 00:16:23.800
using jQuery to bind to the error event.

260
00:16:23.800 --> 00:16:27.420
Maybe it doesn't throw error events,
I don't know.

261
00:16:27.420 --> 00:16:29.147
But it has like callback for on error.

262
00:16:30.971 --> 00:16:34.237
&gt;&gt; Jafar Husain: Okay,
I don't like that answer, but-

263
00:16:34.237 --> 00:16:35.940
&gt;&gt; Speaker 7: [LAUGH]

264
00:16:35.940 --> 00:16:37.564
&gt;&gt; Speaker 5: So they're saying online

265
00:16:37.564 --> 00:16:41.249
too, they want me to ask you if
the image object we create and

266
00:16:41.249 --> 00:16:45.920
preload image would trigger events if
it's not inserted in the document?

267
00:16:45.920 --> 00:16:47.380
&gt;&gt; Jafar Husain: Yeah,
yeah, we got that question.

268
00:16:47.380 --> 00:16:50.800
No, that's not the issue,
definitely not the issue.

269
00:16:50.800 --> 00:16:52.790
Okay, well I got this working before.

270
00:16:52.790 --> 00:16:56.050
Maybe we just got unlucky with
the right set of circumstances.

271
00:16:56.050 --> 00:17:03.571
What I'll do here is, doesn't say why
jQuery [LAUGH] bind actually works.

272
00:17:03.571 --> 00:17:04.428
Nobody?

273
00:17:04.428 --> 00:17:06.317
They don't go in any more detail,

274
00:17:06.317 --> 00:17:09.192
cuz under the hood jQuery
bind's doing something.

275
00:17:09.192 --> 00:17:13.391
&gt;&gt; Speaker 5: Well, it might be
using the onerror callback function?

276
00:17:13.391 --> 00:17:18.003
&gt;&gt; Jafar Husain: We're using
the onerror callback function, but

277
00:17:18.003 --> 00:17:23.126
the last ID I have here,
&gt;&gt; Jafar Husain: Is this.

278
00:17:26.364 --> 00:17:28.413
&gt;&gt; Jafar Husain: And if that doesn't work,
we'll have to move on and

279
00:17:28.413 --> 00:17:33.236
try something else but,
&gt;&gt; Jafar Husain: Pretty sure

280
00:17:33.236 --> 00:17:34.156
that's not gonna fire.

281
00:17:36.692 --> 00:17:38.655
&gt;&gt; Jafar Husain: Okay,
we have something that's not an error, or

282
00:17:38.655 --> 00:17:39.508
not an image rather.

283
00:17:46.871 --> 00:17:51.259
&gt;&gt; Jafar Husain: Nope, [LAUGH] all right,
well that's why web programming is hard.

284
00:17:54.212 --> 00:17:55.797
&gt;&gt; Jafar Husain: No idea
why that's not firing.

285
00:17:58.230 --> 00:18:00.384
&gt;&gt; Jafar Husain: We'll just have
to live with that issue for now.

286
00:18:00.384 --> 00:18:03.198
I'm gonna comment a preload image, and

287
00:18:03.198 --> 00:18:08.266
we're just gonna live with the browser
provided, broken image I have.

288
00:18:08.266 --> 00:18:09.610
And I'm sure we can get
to the bottom of that.

289
00:18:09.610 --> 00:18:12.040
I just don't have time in this class.

290
00:18:12.040 --> 00:18:15.370
But long story short,
had preload image worked?

291
00:18:15.370 --> 00:18:16.550
That's exactly what we would do.

292
00:18:18.080 --> 00:18:21.789
We would once again switch because
we can preload images, but

293
00:18:21.789 --> 00:18:26.296
as soon as somebody switches to a new one,
we wanna stop preloading, etc.

