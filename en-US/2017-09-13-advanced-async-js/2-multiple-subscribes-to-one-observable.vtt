WEBVTT

1
00:00:00.510 --> 00:00:02.620
&gt;&gt; Jafar Husain: Here's
an interesting question.

2
00:00:02.620 --> 00:00:09.190
If I call subscribe three times on
the one timeout observable I get.

3
00:00:09.190 --> 00:00:10.184
So if I go,

4
00:00:38.509 --> 00:00:39.977
&gt;&gt; Jafar Husain: Submit, just go ahead and

5
00:00:39.977 --> 00:00:40.916
print this out.

6
00:00:47.800 --> 00:00:51.505
&gt;&gt; Jafar Husain: So if I do this, I think
we'd all expect that I get done, right?

7
00:00:51.505 --> 00:00:55.441
Or let's just write this,
cuz it's gonna on next, me and undefined.

8
00:00:55.441 --> 00:00:57.940
So let's give that a shot.

9
00:00:57.940 --> 00:00:58.710
What the hell?

10
00:00:58.710 --> 00:00:59.720
We're doing it live here.

11
00:00:59.720 --> 00:01:02.290
So hey, all right, we got an observable.

12
00:01:02.290 --> 00:01:04.170
Now, we're cooking, right?

13
00:01:04.170 --> 00:01:09.348
So if I was to call subscribe three
more times on the same observable,

14
00:01:09.348 --> 00:01:11.682
what do we think would happen?

15
00:01:14.972 --> 00:01:16.800
&gt;&gt; Jafar Husain: Anyone
want to hazard a guess?

16
00:01:16.800 --> 00:01:18.311
No wrong answers.

17
00:01:18.311 --> 00:01:23.169
Well, there are wrong answers, but
we won't give you a hard time about it.

18
00:01:23.169 --> 00:01:25.760
&gt;&gt; Speaker 2: So you're subscribing to the
same observable three times you're saying?

19
00:01:25.760 --> 00:01:27.972
&gt;&gt; Jafar Husain: Yeah,
how many setTimeouts am I gonna get?

20
00:01:35.140 --> 00:01:40.387
&gt;&gt; Speaker 2: One setTimeout,
but three next and dones.

21
00:01:40.387 --> 00:01:44.929
&gt;&gt; Jafar Husain: So that is a very,
very common misconception.

22
00:01:44.929 --> 00:01:47.430
And it's very common, and
that's why we're doing this.

23
00:01:47.430 --> 00:01:52.507
So let's actually see what
happens when we run this twice.

24
00:01:52.507 --> 00:01:54.470
Just get it twice,
cuz it'll be easier to debug.

25
00:01:57.030 --> 00:01:59.250
So I'm gonna do this frequently here.

26
00:01:59.250 --> 00:02:02.500
We're gonna set up a debugger, and
that's how we're gonna figure out what's

27
00:02:02.500 --> 00:02:05.080
actually going on under
the hood with our observable.

28
00:02:08.750 --> 00:02:14.937
And I will pump up that font size.

29
00:02:14.937 --> 00:02:23.538
So there's a little garbage in here
from jsbin which you can just ignore.

30
00:02:23.538 --> 00:02:25.150
So we see there's two subscriptions.

31
00:02:27.502 --> 00:02:34.167
Can I even see my,
&gt;&gt; Jafar Husain: I

32
00:02:34.167 --> 00:02:39.338
do not have my debugging,
I guess cuz this is two-bit, there we go.

33
00:02:39.338 --> 00:02:41.060
If you can't see that let me know.

34
00:02:42.480 --> 00:02:45.600
But let's see what happens when
we step in to subscribe here.

35
00:02:45.600 --> 00:02:46.110
Oops!

36
00:02:46.110 --> 00:02:50.780
We hopped into the subscribe
method that every observable gets.

37
00:02:50.780 --> 00:02:53.280
But remember, that's just a little hop and
skip and a jump

38
00:02:53.280 --> 00:02:56.990
to the real definition of subscribe that
was passed in here on the constructor.

39
00:02:58.230 --> 00:03:02.000
So now, we make it into our real
definition of subscribe for

40
00:03:02.000 --> 00:03:03.190
this timeoutObservable.

41
00:03:03.190 --> 00:03:04.490
Does everybody see how that happened?

42
00:03:04.490 --> 00:03:05.507
Take a moment.

43
00:03:05.507 --> 00:03:07.682
Right, we're here and what are we doing?

44
00:03:07.682 --> 00:03:09.654
Well, we're calling setTimeout.

45
00:03:09.654 --> 00:03:13.379
Cool, and I'm gonna step over that.

46
00:03:13.379 --> 00:03:15.970
And that setTimeout's
gonna hit eventually.

47
00:03:15.970 --> 00:03:19.930
We're gonna return our subscription and
where do we find ourselves?

48
00:03:19.930 --> 00:03:22.430
Well, wait a second, now,
we're out to the next subscribe, right?

49
00:03:22.430 --> 00:03:24.060
Cuz the setTimeout hasn't hit yet.

50
00:03:24.060 --> 00:03:30.570
It's waiting, and when we step in here and
step in there, wait a second.

51
00:03:30.570 --> 00:03:33.855
We found ourselves to calling
a second setTimeout, right?

52
00:03:33.855 --> 00:03:36.920
Why did this happen, right?

53
00:03:36.920 --> 00:03:39.923
Maybe our intuition was we were
only gonna get one setTimeout and

54
00:03:39.923 --> 00:03:41.820
two subscriptions to that setTimeout.

55
00:03:42.820 --> 00:03:46.660
Well, this goes to the nature,
the very nature of what an observable is,

56
00:03:46.660 --> 00:03:50.340
it's a function in object clothing.

57
00:03:50.340 --> 00:03:52.870
It's actually just a function,
subscribe's a function.

58
00:03:52.870 --> 00:03:56.065
If you create a function
called write to the console,

59
00:03:56.065 --> 00:04:00.183
and call it twice, how many times
are you gonna write to the console?

60
00:04:00.183 --> 00:04:02.040
Twice, right?

61
00:04:02.040 --> 00:04:07.180
We can see from this simple definition
that our friend observable is nothing but

62
00:04:07.180 --> 00:04:09.650
a function with an object wrapper, right?

63
00:04:09.650 --> 00:04:11.363
So, oops.

64
00:04:15.927 --> 00:04:17.730
&gt;&gt; Jafar Husain: Let's take another look,
right?

65
00:04:17.730 --> 00:04:19.290
What have we done when we've
created an observable?

66
00:04:19.290 --> 00:04:22.807
We've just created a wrapper,
it has a function on it.

67
00:04:22.807 --> 00:04:27.543
And if we call that function twice, all
the logic in that function gets executed

68
00:04:27.543 --> 00:04:31.370
multiple times and
this is something we call laziness, right?

69
00:04:31.370 --> 00:04:32.600
A function is kinda lazy.

70
00:04:32.600 --> 00:04:34.800
It's not gonna do anything
until you call it.

71
00:04:34.800 --> 00:04:39.036
But if you call it multiple times,
you're gonna get multiple side effects.

72
00:04:39.036 --> 00:04:41.474
And so today we're gonna talk
a little bit about side effects,

73
00:04:41.474 --> 00:04:43.407
cuz sometimes they're
a little bit unexpected.

74
00:04:43.407 --> 00:04:45.872
And this is an interesting difference
between observable and for

75
00:04:45.872 --> 00:04:48.125
those here who are familiar with them,
promises, right?

76
00:04:48.125 --> 00:04:51.383
If you subscribe to the same
promise multiple times using then,

77
00:04:51.383 --> 00:04:54.351
you're not actually gonna
get additional side effects.

78
00:04:54.351 --> 00:04:57.480
But with observable, you might.

79
00:04:57.480 --> 00:05:01.680
And so there are ways in which you can
effectively make sure that you don't get

80
00:05:01.680 --> 00:05:04.570
three or four, five sets of the same
side effects for an observable.

81
00:05:04.570 --> 00:05:07.403
And we'll talk about that later today,
it's called subjects.

82
00:05:07.403 --> 00:05:11.758
But it's also, can anybody tell me why it
might be useful to repeat side effects

83
00:05:11.758 --> 00:05:14.172
when you subscribe to the same observable?

84
00:05:14.172 --> 00:05:16.220
Isn't that always kinda
just a waste of time?

85
00:05:17.990 --> 00:05:21.123
&gt;&gt; Speaker 3: Different components might
have different needs in observable.

86
00:05:21.123 --> 00:05:22.815
&gt;&gt; Jafar Husain: Well, but
if you have, that's true, but

87
00:05:22.815 --> 00:05:24.470
if you have just an observable.

88
00:05:24.470 --> 00:05:26.100
All you can do is listen to it, right?

89
00:05:26.100 --> 00:05:29.142
You can't really affect the data that
comes out of it by the time you have one

90
00:05:29.142 --> 00:05:30.484
observable, right?

91
00:05:30.484 --> 00:05:31.340
With timeout,

92
00:05:31.340 --> 00:05:35.260
we can create a new observable that
fires after a certain amount of time.

93
00:05:35.260 --> 00:05:37.096
But once you have that observable, right?

94
00:05:37.096 --> 00:05:39.470
If three different components
have the same observable,

95
00:05:39.470 --> 00:05:41.590
they can't really impact
what comes out of it.

96
00:05:41.590 --> 00:05:45.171
So why would you want say three network
requests when subscribing to one

97
00:05:45.171 --> 00:05:46.483
observable three times,

98
00:05:46.483 --> 00:05:49.722
cuz that's the implication of
what we're talking about here.

99
00:05:49.722 --> 00:05:52.458
If I have an observable that
fires a network request, and

100
00:05:52.458 --> 00:05:56.440
I've subscribed to it three times,
I'm gonna get three network requests.

101
00:05:56.440 --> 00:06:00.011
So this is one of the things that
catches developers off guard.

102
00:06:00.011 --> 00:06:03.627
Can any of you think of a good
reason to do it though?

103
00:06:03.627 --> 00:06:07.886
&gt;&gt; Speaker 4: If it was, if you had like
a hot observable and like you needed data

104
00:06:07.886 --> 00:06:13.320
for everything that subscribed, maybe
you would need to make another request.

105
00:06:13.320 --> 00:06:16.450
&gt;&gt; Jafar Husain: Well, let's talk
about what you mean by hot observable,

106
00:06:16.450 --> 00:06:19.060
cuz it's a really interesting idea here.

107
00:06:19.060 --> 00:06:22.915
A hot observable and a cold observable
are some terms we use to help

108
00:06:22.915 --> 00:06:25.659
us understand the behavior
of an observable.

109
00:06:25.659 --> 00:06:28.360
A cold observable is really
simple to understand.

110
00:06:28.360 --> 00:06:33.630
No matter how many times you subscribe to
it, you always get the same result, right?

111
00:06:33.630 --> 00:06:35.350
That's a cold observable.

112
00:06:35.350 --> 00:06:36.310
A hot observable,

113
00:06:36.310 --> 00:06:41.080
depending on when you subscribe to it,
you might actually get different data.

114
00:06:41.080 --> 00:06:44.800
Can anybody think of an example
of a hot event stream?

115
00:06:44.800 --> 00:06:46.230
Like maybe in the browser.

116
00:06:46.230 --> 00:06:47.720
&gt;&gt; Speaker 4: Click handlers.

117
00:06:47.720 --> 00:06:49.067
&gt;&gt; Jafar Husain: Click handlers, right.

118
00:06:49.067 --> 00:06:51.470
I mean, or mouse move,
or any of these events.

119
00:06:51.470 --> 00:06:55.360
We know that if I start listening
to an event seven seconds later,

120
00:06:55.360 --> 00:06:59.310
I might miss a bunch of events,
right, just good common sense.

121
00:06:59.310 --> 00:07:02.750
But let's take a look at
our timeout observable.

122
00:07:02.750 --> 00:07:04.666
Am I ever gonna miss the timeout,

123
00:07:04.666 --> 00:07:07.480
no matter when I subscribe
to this observable.

124
00:07:07.480 --> 00:07:10.386
So let's take a look down here, right?

125
00:07:10.386 --> 00:07:14.823
Let's actually put this
whole thing to setTimeout.

126
00:07:23.930 --> 00:07:30.420
&gt;&gt; Jafar Husain: If I wait five seconds,
am I gonna miss the timeout notification?

127
00:07:30.420 --> 00:07:33.320
If I wait five seconds before
subscribing to the observable,

128
00:07:33.320 --> 00:07:34.890
am I gonna miss the timeout notification?

129
00:07:36.290 --> 00:07:38.000
Who thinks yes?

130
00:07:38.000 --> 00:07:38.671
Who thinks no?

131
00:07:42.940 --> 00:07:43.786
&gt;&gt; Speaker 5: I think no,

132
00:07:43.786 --> 00:07:49.840
because it looks like when we subscribe
is when it actually sets the timeout.

133
00:07:49.840 --> 00:07:53.040
&gt;&gt; Jafar Husain: Right, the thing about
this observable is that it doesn't do

134
00:07:53.040 --> 00:07:55.900
the work until you actually subscribe.

135
00:07:55.900 --> 00:07:58.590
And that's why in this context,
it's a cold observable.

136
00:07:58.590 --> 00:08:00.440
And that's typically how functions work,
right?

137
00:08:00.440 --> 00:08:02.630
They don't do anything until we call them.

138
00:08:02.630 --> 00:08:07.167
So because observable's just really
a thin wrapper for a subscribe method,

139
00:08:07.167 --> 00:08:11.838
any work you do inside of that subscribe
method, as long as you kick it off when we

140
00:08:11.838 --> 00:08:15.870
subscribe, then you're always
going to get the result.

141
00:08:15.870 --> 00:08:19.320
So notice that the timeout
doesn't get created.

142
00:08:19.320 --> 00:08:23.950
All right, we don't call setTimeout
when this happens, right?

143
00:08:23.950 --> 00:08:25.930
We know that because when we step through,

144
00:08:25.930 --> 00:08:29.530
when we did this,
we didn't do a damn thing, right?

145
00:08:29.530 --> 00:08:31.990
All we did was we created an observable,
and

146
00:08:31.990 --> 00:08:35.920
that's really just a function
waiting to be called.

147
00:08:35.920 --> 00:08:39.630
And that's how observable does laziness,
that's how we can map, and filter, and

148
00:08:39.630 --> 00:08:40.840
reduce, and scan.

149
00:08:40.840 --> 00:08:42.900
We haven't really done anything, though.

150
00:08:42.900 --> 00:08:46.010
Because all we've done is we've
built up a bunch of functions

151
00:08:46.010 --> 00:08:49.700
which hold on to each other
waiting to be called.

152
00:08:49.700 --> 00:08:51.710
And how do we actually
call the observable?

153
00:08:51.710 --> 00:08:55.850
How do we get it to do things,
what function?

154
00:08:55.850 --> 00:09:00.030
Subscribe, absolutely, and
that's lazy evaluation.

155
00:09:00.030 --> 00:09:03.750
It's not doing work until you
absolutely need to do it.

156
00:09:03.750 --> 00:09:07.300
So now, we've seen an example
of a cold observable.

157
00:09:07.300 --> 00:09:10.270
And the reason it's a called
observable is it waits patiently,

158
00:09:10.270 --> 00:09:13.550
doesn't do a damn thing
until we subscribe, right?

159
00:09:13.550 --> 00:09:15.040
What's an example of a hot observable?

160
00:09:15.040 --> 00:09:19.100
I think we already heard one,
it's event streams, right?

161
00:09:19.100 --> 00:09:21.260
So let's build that next,

162
00:09:21.260 --> 00:09:24.780
let's make a way of creating
an observable based on DOM events.

