WEBVTT

1
00:00:00.789 --> 00:00:02.901
&gt;&gt; Jafar Husain: Anybody heard of Redux?

2
00:00:02.901 --> 00:00:06.339
I wanted to take a quick moment to
talk about Redux super briefly.

3
00:00:06.339 --> 00:00:08.217
For those of you who
haven't heard of Redux,

4
00:00:08.217 --> 00:00:10.990
it's just a way of managing
state in an application.

5
00:00:10.990 --> 00:00:16.202
And it's a really well-written framework,
I love it, I'm a big fan.

6
00:00:16.202 --> 00:00:18.639
How fast do you think we could
write Redux with observable?

7
00:00:20.460 --> 00:00:23.940
So Redux is basically
a big scan operation.

8
00:00:23.940 --> 00:00:28.480
It's a scan that takes the current state,
you create a subject of actions,

9
00:00:28.480 --> 00:00:32.620
every single time the UI kicks off
an action, it just necks the subject.

10
00:00:32.620 --> 00:00:35.611
And then you just scan
over all the actions and

11
00:00:35.611 --> 00:00:39.320
initialize that scan with
the initial state of the app.

12
00:00:39.320 --> 00:00:43.147
And then you provide a reduced function,
like that function that takes two

13
00:00:43.147 --> 00:00:46.706
arguments, and you take the new action,
the current state.

14
00:00:46.706 --> 00:00:49.750
And you admit a new state and
you get a stream of states.

15
00:00:49.750 --> 00:00:54.810
So Redux just takes a stream of actions,
probably a subject,

16
00:00:54.810 --> 00:00:59.250
scans over it, provides an initial state,
and outputs a stream of states.

17
00:00:59.250 --> 00:01:01.445
And then you just turn around and
render those states.

18
00:01:01.445 --> 00:01:05.398
Let's take a little, let's take a look
at an example of that because it's

19
00:01:05.398 --> 00:01:09.565
worth doing just to show how many concepts
you can represent with observable.

20
00:01:09.565 --> 00:01:10.158
So I'm gonna go,

21
00:01:32.573 --> 00:01:38.130
&gt;&gt; Jafar Husain: So this function
takes the last state, the action.

22
00:01:40.826 --> 00:01:45.853
&gt;&gt; Jafar Husain: And
here, if the action type

23
00:01:45.853 --> 00:01:50.885
is increment, it returns,

24
00:01:59.936 --> 00:02:01.040
&gt;&gt; Jafar Husain: Like so,

25
00:02:02.451 --> 00:02:03.280
&gt;&gt; Jafar Husain: else if.

26
00:02:17.964 --> 00:02:21.371
&gt;&gt; Jafar Husain: And
now we take this actions, and

27
00:02:21.371 --> 00:02:25.391
we subscribe to it, and we get a state.

28
00:02:25.391 --> 00:02:30.118
And then React anyway,
those of you who know React,

29
00:02:30.118 --> 00:02:34.208
you can render some app component and
state.

30
00:02:34.208 --> 00:02:35.463
Does that make sense?

31
00:02:35.463 --> 00:02:40.560
Or I could go, better yet,
&gt;&gt; Jafar Husain: For

32
00:02:40.560 --> 00:02:42.980
those React guys in the room.

33
00:02:42.980 --> 00:02:46.380
That's basically all Redux is at its core,
right,

34
00:02:46.380 --> 00:02:47.980
that's not to take
anything away from Redux.

35
00:02:47.980 --> 00:02:50.900
It actually has a great set of
development tools associated with it,

36
00:02:50.900 --> 00:02:54.380
and it's got a lot of nice features,
and a lot of libraries out there.

37
00:02:54.380 --> 00:02:56.120
So I'm not suggesting
you don't need Redux and

38
00:02:56.120 --> 00:02:58.090
you can replace it with ten lines of RX.

39
00:02:58.090 --> 00:03:00.970
I'm more just making
the point that fundamentally

40
00:03:00.970 --> 00:03:04.070
the operators you guys have learned
today are so flexible and so

41
00:03:04.070 --> 00:03:07.870
abstract that you can apply them to
solve a huge number of problems.

42
00:03:07.870 --> 00:03:11.170
So there is Redux in
a page with observable.

