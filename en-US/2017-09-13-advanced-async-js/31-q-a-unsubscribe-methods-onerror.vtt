WEBVTT

1
00:00:00.430 --> 00:00:02.530
&gt;&gt; Jafar Husain: Any other
questions we have around this?

2
00:00:02.530 --> 00:00:04.800
&gt;&gt; Speaker 2: I've got a question
about the from event stuff.

3
00:00:04.800 --> 00:00:07.039
I know you can use from event for

4
00:00:07.039 --> 00:00:12.590
hooking into other vendor libraries
like Mapbox, for example.

5
00:00:12.590 --> 00:00:14.000
&gt;&gt; Jafar Husain: Mapbox did you say?

6
00:00:14.000 --> 00:00:17.290
&gt;&gt; Speaker 2: Like any library that
would implement an event system.

7
00:00:17.290 --> 00:00:18.860
&gt;&gt; Jafar Husain: Anything that
uses the add event lister or

8
00:00:18.860 --> 00:00:20.090
move event lister pattern, yeah.

9
00:00:20.090 --> 00:00:25.900
&gt;&gt; Speaker 2: So is it, is it dependent
on it using that exact function name?

10
00:00:25.900 --> 00:00:27.380
&gt;&gt; Jafar Husain: I'd say, yeah.

11
00:00:27.380 --> 00:00:30.950
&gt;&gt; Speaker 2: And is there anyway
to hook custom unsubscribe logic or

12
00:00:30.950 --> 00:00:34.837
at that point would you just do
your own observer around it.

13
00:00:34.837 --> 00:00:36.850
&gt;&gt; Jafar Husain: In other
words what you're saying is,

14
00:00:36.850 --> 00:00:40.660
if when you want to unsubscribe
you wanna do additional stuff.

15
00:00:40.660 --> 00:00:43.460
Then yeah, I would basically,
there's a variety of things you can do.

16
00:00:43.460 --> 00:00:47.210
But in that case I would basically
define my unsubscribe method and

17
00:00:47.210 --> 00:00:50.980
then put the extra logic
inside of the unsubscription.

18
00:00:50.980 --> 00:00:52.490
So that's one of the rare cases.

19
00:00:52.490 --> 00:00:54.890
In general, where you're defining
your own subscribe method,

20
00:00:54.890 --> 00:00:59.110
it's at the edges of the system where
you're adapting existing callback APIs.

21
00:00:59.110 --> 00:01:00.520
Into and observable.

22
00:01:00.520 --> 00:01:04.200
Those are usually the rare cases where you
have to write your own subscribe method.

23
00:01:04.200 --> 00:01:06.990
The other more rare case is performance,

24
00:01:06.990 --> 00:01:09.170
and that's something worth talking about,
right?

25
00:01:09.170 --> 00:01:13.710
I can tell you that this way in which
we've implemented preload image.

26
00:01:16.670 --> 00:01:19.750
There's a lot of observables actually
being created here, if you think about it.

27
00:01:19.750 --> 00:01:22.610
We've got an observable for
failure, one for success.

28
00:01:22.610 --> 00:01:26.650
We have the outer observable defer, then
we have the observable created for merge.

29
00:01:26.650 --> 00:01:30.570
There's a lot of layers now,
in general, my advice here is do not

30
00:01:30.570 --> 00:01:34.980
worry about performance in practice
if you're using observable correctly.

31
00:01:34.980 --> 00:01:38.900
You're only doing, you know,
this work of setting up the observables.

32
00:01:38.900 --> 00:01:41.420
In general, events come very infrequently.

33
00:01:41.420 --> 00:01:44.660
Like, most events, a must you're doing
something like gesture recognition or and

34
00:01:44.660 --> 00:01:46.170
our mouse moves or something.

35
00:01:46.170 --> 00:01:47.930
Most events come in very infrequently, and

36
00:01:47.930 --> 00:01:51.930
so although this is the lot of work
relative to a simple state machine and

37
00:01:51.930 --> 00:01:56.990
a bunch of nested call backs, it's still
probably not negligible for your program.

38
00:01:56.990 --> 00:02:00.270
So as always, my recommendation
is do the simplest thing,

39
00:02:00.270 --> 00:02:02.770
which is usually an observable flow.

40
00:02:02.770 --> 00:02:05.480
And then profile it and
find out if it's slow.

41
00:02:05.480 --> 00:02:08.570
And then you can rewrite it by collapsing
a whole bunch of these operators,

42
00:02:08.570 --> 00:02:11.590
as we just saw,
into a single definition of subscribe.

43
00:02:11.590 --> 00:02:13.300
Does that make sense?

44
00:02:13.300 --> 00:02:15.000
So subscribe can sometimes be useful for

45
00:02:15.000 --> 00:02:20.120
performance but be careful before you
start doing that for perf reasons.

46
00:02:20.120 --> 00:02:23.040
So make sure you know that's actually
where the bottleneck in your program is.

47
00:02:23.040 --> 00:02:25.419
Because most of the time it isn't.

48
00:02:27.828 --> 00:02:30.758
&gt;&gt; Jafar Husain: Any other questions
you've got there in cyber space?

49
00:02:30.758 --> 00:02:32.532
Yeah.

50
00:02:32.532 --> 00:02:38.770
&gt;&gt; Speaker 3: If we on error
instead of loading and a URL.

51
00:02:38.770 --> 00:02:42.992
Wanted to trigger the next image?

52
00:02:42.992 --> 00:02:44.860
&gt;&gt; Jafar Husain: Totally good idea.

53
00:02:44.860 --> 00:02:49.080
Yeah, good idea what if we wanted
to trigger the next image?

54
00:02:49.080 --> 00:02:51.890
We'd probably have to reformulate the
program a little bit cuz right now it's

55
00:02:51.890 --> 00:02:55.360
index based but
it's an interesting question actually.

56
00:02:56.860 --> 00:02:59.470
I don't have time to tackle that,
maybe I do.

57
00:02:59.470 --> 00:03:04.690
So let's think about it,
in reality we have an observable

58
00:03:04.690 --> 00:03:08.180
that it's kind of interesting because
it's challenging with an observable,

59
00:03:08.180 --> 00:03:11.390
because it's a push system rather
than a pull system, right?

60
00:03:11.390 --> 00:03:15.420
With an iterator we would just pull,
that failed, I'm gonna go and

61
00:03:15.420 --> 00:03:17.640
pull the next one,
that failed, etcetera, right?

62
00:03:18.690 --> 00:03:22.580
What you could do is you
could create a new observable

63
00:03:22.580 --> 00:03:26.120
that actually cycles through
all the indexes, right, and

64
00:03:26.120 --> 00:03:30.810
you could basically take until the first
one comes out that's successful.

65
00:03:30.810 --> 00:03:34.660
But that's actually kind of challenging to
do, because it would have to cycle through

66
00:03:34.660 --> 00:03:37.350
all the indices you'd have to
being preloading them, right.

67
00:03:37.350 --> 00:03:38.310
Since it's asynchronous.

68
00:03:38.310 --> 00:03:42.610
So you wouldn't know until you
actually successfully preloaded.

69
00:03:42.610 --> 00:03:47.630
So this might be an area where you
might want to write a custom operator.

70
00:03:47.630 --> 00:03:49.760
And in a sense it's kind
of like a flattened.

71
00:03:49.760 --> 00:03:50.590
Right, if you think about it.

72
00:03:50.590 --> 00:03:54.890
I've got this stream of data and
I've got this two-dimensional stream.

73
00:03:54.890 --> 00:03:56.910
And I want to try something.

74
00:03:56.910 --> 00:03:59.370
I wanna load something ,right, but

75
00:03:59.370 --> 00:04:03.790
in this case I'd have to probably think
about the program a little bit differently

76
00:04:03.790 --> 00:04:07.800
because the index is only coming
in from next and forward buttons.

77
00:04:07.800 --> 00:04:10.217
It's really the user in control
of feeding you the next index.

78
00:04:14.342 --> 00:04:16.615
&gt;&gt; Jafar Husain: Yeah,
I think we could do it.

79
00:04:16.615 --> 00:04:19.073
I'd need to reformulate
the program quite a bit.

80
00:04:22.579 --> 00:04:25.176
&gt;&gt; Jafar Husain: Another thing we could
talk about would be like, and similar,

81
00:04:25.176 --> 00:04:28.655
along the same lines, would be like, well,
what happens if we press next and then,

82
00:04:28.655 --> 00:04:30.036
cuz I know with the image viewer.

83
00:04:30.036 --> 00:04:33.483
I like to be able to maybe just press
next and then just hang back and

84
00:04:33.483 --> 00:04:37.810
have it switch every ten seconds or
something like that, right?

85
00:04:37.810 --> 00:04:40.930
So that'd be an interesting exercise,
I'll leave those ones for exercises for

86
00:04:40.930 --> 00:04:42.040
the user.

87
00:04:42.040 --> 00:04:44.760
But that one might be
a little more tractable.

88
00:04:44.760 --> 00:04:48.400
How do you set it up so maybe
something like a set interval, right?

89
00:04:48.400 --> 00:04:50.241
How do you set it up so
that when they hit next,

90
00:04:50.241 --> 00:04:52.041
they're really just changing direction?

91
00:04:52.041 --> 00:04:56.629
And then every ten seconds you're
applying that change to get the indexes,

92
00:04:56.629 --> 00:04:58.000
does that make sense?

