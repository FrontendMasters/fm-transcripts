WEBVTT

1
00:00:00.140 --> 00:00:02.660
&gt;&gt; Jafar Husain: Now,
we're gonna go into a harder problem, and

2
00:00:02.660 --> 00:00:05.030
this is actually a real
problem we had at Netflix.

3
00:00:05.030 --> 00:00:07.800
We run JavaScript on very low end devices,

4
00:00:07.800 --> 00:00:11.010
sometimes the embedded devices that
run inside of your television.

5
00:00:11.010 --> 00:00:15.175
Now, this particular problem might not be
applicable to your day-to-day life, but

6
00:00:15.175 --> 00:00:19.010
the problem solving techniques required
to solve it almost certainly will be.

7
00:00:19.010 --> 00:00:22.390
One of the challenges we
had was that animations.

8
00:00:22.390 --> 00:00:25.460
We needed to turn them off
on very low end devices.

9
00:00:25.460 --> 00:00:27.980
When there was a lot going
on inside of the platforms.

10
00:00:27.980 --> 00:00:31.510
When we were performing a lot of
tasks inside of the platform, i.e.,

11
00:00:31.510 --> 00:00:34.700
the native C plus plus parts sort of
like the equivalent of the browser.

12
00:00:34.700 --> 00:00:38.160
You would wanna turn off animations
to make sure those animations didn't

13
00:00:38.160 --> 00:00:39.230
look jagged.

14
00:00:39.230 --> 00:00:42.751
So instead of smoothly animating things
from place to place you're trying to,

15
00:00:42.751 --> 00:00:46.650
we would just pop them from place
to place without an animation.

16
00:00:46.650 --> 00:00:50.602
So let's see if we can visualize
how we would solve this problem.

17
00:00:54.922 --> 00:00:58.023
&gt;&gt; Jafar Husain: So for those who saw my
previous class you know that I like to

18
00:00:58.023 --> 00:01:00.444
visualize observables using this syntax X.

19
00:01:12.997 --> 00:01:15.890
&gt;&gt; Jafar Husain: This syntax, of course,
doesn't really exist in JavaScript.

20
00:01:15.890 --> 00:01:19.681
But it's just a nice syntax I like to
use to help us to visualize Observables.

21
00:01:19.681 --> 00:01:23.496
And that can be a really useful technique
when you guys are solving problems,

22
00:01:23.496 --> 00:01:25.564
to visualize what the stream looks like.

23
00:01:25.564 --> 00:01:30.532
So what's a way of visualizing
what happens inside of a platform

24
00:01:30.532 --> 00:01:33.310
when it's performing tasks?

25
00:01:33.310 --> 00:01:34.830
At any time, the platform,

26
00:01:34.830 --> 00:01:38.300
basically like our equivalent of
the browser could start doing some work.

27
00:01:38.300 --> 00:01:41.610
We don't have insight into what specific
work it's doing, but it's just going to

28
00:01:41.610 --> 00:01:45.440
tell us somehow with some sort of
event that it's begun doing some work.

29
00:01:45.440 --> 00:01:48.240
And that work can last for
a certain period of time, and

30
00:01:48.240 --> 00:01:49.520
then that work is gonna end.

31
00:01:49.520 --> 00:01:53.880
And so, our goal is we wanna make sure
that it's only when the platform isn't

32
00:01:53.880 --> 00:01:57.970
doing anything at all that
we're gonna flip animations on.

33
00:01:57.970 --> 00:02:03.200
So first I'm gonna model what
I'm calling a tasks observable.

34
00:02:06.828 --> 00:02:09.480
&gt;&gt; Jafar Husain: And this is basically
what represents what's going on inside

35
00:02:09.480 --> 00:02:10.912
the platform when I get a moment.

36
00:02:20.521 --> 00:02:23.340
&gt;&gt; Jafar Husain: Now, the data in here
doesn't really mean very much to us.

37
00:02:25.290 --> 00:02:28.140
It's just random output from the platform.

38
00:02:28.140 --> 00:02:29.711
Not random but unimportant.

39
00:02:37.282 --> 00:02:41.046
&gt;&gt; Jafar Husain: So I've written this
as a two dimensional observable,

40
00:02:41.046 --> 00:02:44.890
this is how I visualize two
dimensional observables.

41
00:02:44.890 --> 00:02:46.350
So why is this two dimensional?

42
00:02:46.350 --> 00:02:47.023
Anybody wanna guess?

43
00:02:49.370 --> 00:02:52.420
&gt;&gt; Speaker 2: You have an observable
within the other observable?

44
00:02:52.420 --> 00:02:53.094
&gt;&gt; Jafar Husain: Yeah, it's an observable.

45
00:02:53.094 --> 00:02:57.067
A two-dimensional observable is
an observable that are next to other

46
00:02:57.067 --> 00:02:57.952
observables.

47
00:02:57.952 --> 00:03:02.770
And so, why would be visualize
the tasks and the platform this way?

48
00:03:02.770 --> 00:03:06.680
Well, it's because the platform
might be performing

49
00:03:06.680 --> 00:03:08.199
two tasks at the same time, right?

50
00:03:10.140 --> 00:03:12.330
No reason it couldn't be
concurrently running things, right?

51
00:03:12.330 --> 00:03:14.740
It might be threaded or
it might be asynchronous, but

52
00:03:14.740 --> 00:03:17.360
the point is,
it can do two things at the same time.

53
00:03:17.360 --> 00:03:20.750
So a very natural way of understanding
the work happening in the platform

54
00:03:20.750 --> 00:03:23.410
is to think of it as
a two-dimensional observable, right?

55
00:03:23.410 --> 00:03:26.155
So I get an observable that
means a new task has begun,

56
00:03:26.155 --> 00:03:30.798
then I subscribe to that observable, which
is a hot observable, incidentally, right?

57
00:03:30.798 --> 00:03:34.642
I'm not kicking it off, the platform has
told me that the work has begun, and

58
00:03:34.642 --> 00:03:35.990
so I subscribe to it.

59
00:03:35.990 --> 00:03:37.310
And when that observable completes,

60
00:03:37.310 --> 00:03:41.840
I know that at least that one task
has now completed in the platform.

61
00:03:41.840 --> 00:03:44.560
But while I was listening to
that other inner observable, so

62
00:03:44.560 --> 00:03:48.350
you've got an outer observable,
which is right here, and

63
00:03:48.350 --> 00:03:51.750
we've got an inner-observable which
represents each individual task.

64
00:03:51.750 --> 00:03:54.720
The outer-observable is
all of the tasks from now,

65
00:03:54.720 --> 00:03:57.540
until eternity that the platform
is going to be creating.

66
00:03:57.540 --> 00:04:01.820
It's an infinite observable, and then the
inner-observable is one particular task.

67
00:04:01.820 --> 00:04:04.300
And the data inside is just data
coming out of the platform.

68
00:04:04.300 --> 00:04:05.630
We don't particularly care about it.

69
00:04:05.630 --> 00:04:08.840
We just know that, hey,
there's some work going on there.

70
00:04:08.840 --> 00:04:10.530
Does that make sense?

71
00:04:10.530 --> 00:04:15.300
So my job is to create animations allowed.

72
00:04:15.300 --> 00:04:19.685
Animations allowed is a simple stream that

73
00:04:19.685 --> 00:04:24.432
switches to false as soon
as a task starts, and

74
00:04:24.432 --> 00:04:29.451
switches to true as soon
as no tasks are running.

75
00:04:35.867 --> 00:04:36.830
&gt;&gt; Jafar Husain: Does that make sense?

76
00:04:38.310 --> 00:04:40.246
Right?
So this is a real problem we had

77
00:04:40.246 --> 00:04:41.413
to solve in Netflix.

78
00:04:41.413 --> 00:04:44.384
And for a while it took us a long time,
so you shouldn't expect

79
00:04:44.384 --> 00:04:47.654
that you're gonna just [SOUND] fix and
be able to solve this problem.

80
00:04:47.654 --> 00:04:51.392
I like it cuz it's a really hard one, and
we can start to think and learn about

81
00:04:51.392 --> 00:04:55.440
how we can solve seemingly hard problems
by just composing operations together.

