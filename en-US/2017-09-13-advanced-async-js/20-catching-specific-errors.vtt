WEBVTT

1
00:00:00.239 --> 00:00:03.270
&gt;&gt; Jafar Husain: Does everybody
get retry and how that worked?

2
00:00:03.270 --> 00:00:06.398
Notice we got some state, but
it's all stored inside of operators.

3
00:00:06.398 --> 00:00:11.300
As we notice, when we were building up
expressions, like we did with animations

4
00:00:11.300 --> 00:00:14.559
allowed, notice how many
lets do we see in this code?

5
00:00:16.478 --> 00:00:18.879
&gt;&gt; Jafar Husain: How many assignments,
how much mutation do we see?

6
00:00:20.340 --> 00:00:21.300
Nothing, right?

7
00:00:21.300 --> 00:00:23.060
That's how I like it.

8
00:00:23.060 --> 00:00:26.734
All right, it's very, very easy to
understand things that don't change,

9
00:00:26.734 --> 00:00:30.576
especially when you have six, or seven,
or nine things happening all at the same

10
00:00:30.576 --> 00:00:32.859
time, all trying to
change the same variable.

11
00:00:32.859 --> 00:00:33.589
Most of us,

12
00:00:33.589 --> 00:00:38.345
certainly I'm not smart enough to
understand that program most of the time.

13
00:00:38.345 --> 00:00:42.946
Cool, so I think we talked about
error handling, catch is a very,

14
00:00:42.946 --> 00:00:48.040
very, often if you wanna handle an error,
maybe do something with it.

15
00:00:48.040 --> 00:00:51.825
Actually, there is an interesting pattern,
we talked about try catch,

16
00:00:51.825 --> 00:01:01.351
we talked about doing this,
&gt;&gt; Jafar Husain: Right?

17
00:01:01.351 --> 00:01:03.140
But that's not the only
thing you do in functions.

18
00:01:03.140 --> 00:01:06.824
Sometimes you catch an error and
you throw a more specific error.

19
00:01:06.824 --> 00:01:10.188
So how would we do that in observable,
right?

20
00:01:10.188 --> 00:01:19.806
So how would we do,
&gt;&gt; Jafar Husain: What's

21
00:01:19.806 --> 00:01:21.250
the observable equivalent of this?

22
00:01:22.970 --> 00:01:24.864
It's totally a legitimate thing to do,

23
00:01:24.864 --> 00:01:28.553
just as legitimate in async programming
as it is in synchronous programming.

24
00:01:29.937 --> 00:01:34.023
&gt;&gt; Jafar Husain: In fact, honestly it's
a really good exercise to ask yourself,

25
00:01:34.023 --> 00:01:38.425
hey, what would I do if this was just
a function and synchronous code?

26
00:01:38.425 --> 00:01:39.252
What would I do?

27
00:01:39.252 --> 00:01:40.980
How would I handle this error and

28
00:01:40.980 --> 00:01:44.650
then slavishly transform that in
to the asynchronous equivalent?

29
00:01:44.650 --> 00:01:48.530
Because observable is really
just about push versus pull.

30
00:01:48.530 --> 00:01:50.010
Everything else is orthogonal.

31
00:01:50.010 --> 00:01:53.850
How you design your function, what your
functions do, what the signatures are.

32
00:01:53.850 --> 00:01:54.840
Other than the push and

33
00:01:54.840 --> 00:01:59.430
pull, it's really about the exact,
you wanna be doing the exact same thing.

34
00:01:59.430 --> 00:02:02.355
So how would we do this
using either the catch or

35
00:02:02.355 --> 00:02:04.691
the retry operator that we learned?

36
00:02:06.718 --> 00:02:09.919
&gt;&gt; Jafar Husain: So
let's say instead of filter being,

37
00:02:09.919 --> 00:02:13.898
instead of just catching it and
suppressing it,

38
00:02:13.898 --> 00:02:19.928
we wanted to throw another error,
special error, anybody have an idea?

39
00:02:23.150 --> 00:02:27.178
&gt;&gt; Speaker 2: Let's wing it,
throw operator?

40
00:02:27.178 --> 00:02:31.524
&gt;&gt; Jafar Husain: You could actually do
this, because the reality is RX catches

41
00:02:31.524 --> 00:02:37.051
any errors thrown from functions and
then onerrors them, so that would work.

42
00:02:37.051 --> 00:02:40.599
I think it's a little bit more
declarative to just do this.

43
00:02:46.611 --> 00:02:52.690
&gt;&gt; Jafar Husain: So Observable.error
will create a stream that's just errors.

44
00:02:52.690 --> 00:02:54.984
And then that onerror will
surface all the way through.

45
00:02:54.984 --> 00:02:58.742
Now, notice we were able to accept
the real error because it comes into

46
00:02:58.742 --> 00:03:02.067
the function, and
then wrap some error inside of that error.

47
00:03:02.067 --> 00:03:06.967
And then I also saw somebody comment,
is promises good for back-end work?

48
00:03:06.967 --> 00:03:10.089
If you're running a Node server, for
example, yeah, for the most part,

49
00:03:10.089 --> 00:03:11.280
promises are just fine.

50
00:03:11.280 --> 00:03:15.519
Because in general on a server,
you don't cancel, you timeout, right?

51
00:03:15.519 --> 00:03:19.729
When somebody's kicked off a request to
a server, at least when you're handling

52
00:03:19.729 --> 00:03:23.890
an incoming request, right, there's
rarely a good reason to cancel because.

53
00:03:23.890 --> 00:03:26.816
But once someone's dispatched
an HTTP request to you,

54
00:03:26.816 --> 00:03:28.880
how would they even cancel it, right?

55
00:03:28.880 --> 00:03:33.035
And so in those cases,
I find async/await and promises great.

56
00:03:33.035 --> 00:03:37.356
Probably still not gonna talk about them
today cuz this class is front-end masters,

57
00:03:37.356 --> 00:03:41.090
and so it's got a very front-end focus
in this class that I wanna stay on.

58
00:03:41.090 --> 00:03:44.904
But if you're doing Node programming,
I think async/await and

59
00:03:44.904 --> 00:03:47.479
promises are great for
a lot of those cases.

60
00:03:47.479 --> 00:03:52.728
&gt;&gt; Speaker 2: Is the same true if you're
using WebSockets on the back-end?

61
00:03:52.728 --> 00:03:55.196
&gt;&gt; Jafar Husain: WebSockets,
I probably wouldn't use promises for

62
00:03:55.196 --> 00:03:56.610
because they're scalar.

63
00:03:56.610 --> 00:03:59.040
So you can only get one
result from a promise.

64
00:03:59.040 --> 00:04:01.664
Whereas in general,
if you're using something like WebSockets,

65
00:04:01.664 --> 00:04:03.830
observables are a better fit for that.

66
00:04:03.830 --> 00:04:05.880
There's also something called
asynchronous iterators.

67
00:04:05.880 --> 00:04:07.670
Is anyone familiar with those?

68
00:04:07.670 --> 00:04:10.820
&gt;&gt; Speaker 2: That's where my
question was with the TC39 proposal.

69
00:04:10.820 --> 00:04:14.430
&gt;&gt; Jafar Husain: Yeah, there's an upcoming
type called asynchronous iterator that's

70
00:04:14.430 --> 00:04:16.810
making its way through
the process right now.

71
00:04:16.810 --> 00:04:20.280
And it's kinda what it sounds like,
it's basically an iterator of promises,

72
00:04:20.280 --> 00:04:23.140
sort of generator of promises,
if you're familiar with that.

73
00:04:23.140 --> 00:04:23.720
And in general,

74
00:04:23.720 --> 00:04:28.830
those are pretty good abstraction to use
for IO, like if I'm reading from a file.

75
00:04:28.830 --> 00:04:32.470
What's nice about an iterator of promises,
where I say, hey, give me the next value,

76
00:04:32.470 --> 00:04:36.170
and the producer gives me a promise
instead of giving me the value,

77
00:04:36.170 --> 00:04:38.960
is that you have natural back pressure.

78
00:04:38.960 --> 00:04:42.992
And what I mean when I say back pressure
is look, if I don't want another value,

79
00:04:42.992 --> 00:04:47.346
if I'm not ready to process another value,
I just wait, I don't call next, right?

80
00:04:47.346 --> 00:04:49.230
An observable doesn't have back pressure.

81
00:04:49.230 --> 00:04:51.870
It doesn't particularly care if
you're ready to process a value or

82
00:04:51.870 --> 00:04:53.906
not cuz it's a push, right?

83
00:04:53.906 --> 00:04:56.739
It's only just gonna push you a value
as soon as the producer wants to push

84
00:04:56.739 --> 00:04:57.261
you a value.

85
00:04:57.261 --> 00:05:01.387
But an asynchronous integrator, much like
an integrator, puts the consumer back in

86
00:05:01.387 --> 00:05:05.015
control, the consumer doesn't request
a new value until they call next.

87
00:05:05.015 --> 00:05:10.180
And so asynchronous iterators are probably
a good fit for WebSockets or IO streams.

88
00:05:10.180 --> 00:05:11.640
Whereas something like an event,

89
00:05:11.640 --> 00:05:13.510
where there is really no
concept of back pressure,

90
00:05:13.510 --> 00:05:19.080
you can't tell the user to wait to click,
an observable is a better fit for that.

91
00:05:19.080 --> 00:05:23.455
But all three of them, you'll notice,
have very similar operators, map, filter.

92
00:05:23.455 --> 00:05:26.600
In fact, all operators can be implemented
on all of them, as a matter of fact.

93
00:05:28.000 --> 00:05:34.820
So where were we, we were talking about,
&gt;&gt; Jafar Husain: I think we covered retry.

94
00:05:34.820 --> 00:05:37.440
I think we've actually pretty
thoroughly covered error handling now.

95
00:05:37.440 --> 00:05:39.810
You can do all the same things
you can do with try catch,

96
00:05:39.810 --> 00:05:42.060
you can do with observable and
function composition.

97
00:05:42.060 --> 00:05:46.190
So you can just catch an error and
return observable.empty to ignore it.

98
00:05:46.190 --> 00:05:50.250
Or you can catch an error and return a new
error inside of an observable.error,

99
00:05:50.250 --> 00:05:53.400
and that's how you transform
an error into another error.

100
00:05:53.400 --> 00:05:57.460
And finally, the retry is a much
more like high level primitive for

101
00:05:57.460 --> 00:05:59.650
a very common case like network requests.

102
00:05:59.650 --> 00:06:03.250
And it's something you can do, because
we're, that you can't do with promises.

103
00:06:04.590 --> 00:06:08.100
Cool, so hopefully that brings full
circle the conversation around laziness,

104
00:06:08.100 --> 00:06:09.510
and we see the power of laziness.

