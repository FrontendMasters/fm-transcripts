WEBVTT

1
00:00:00.400 --> 00:00:01.160
&gt;&gt; Jafar Husain: Who's confused?

2
00:00:01.160 --> 00:00:03.060
Who's like way out there,
like, what the hell?

3
00:00:03.060 --> 00:00:08.400
This is crazy,
I have to initially call this function, so

4
00:00:08.400 --> 00:00:10.450
I'm basically kicking
off this function now.

5
00:00:11.960 --> 00:00:15.240
&gt;&gt; Speaker 2: So
observables.shift, remind me.

6
00:00:15.240 --> 00:00:18.720
So arrays a mutable so
when you do a shift,

7
00:00:18.720 --> 00:00:20.680
it actually mutates the original array?

8
00:00:20.680 --> 00:00:22.320
&gt;&gt; Jafar Husain: Yeah.
&gt;&gt; Speaker 2: Okay.

9
00:00:22.320 --> 00:00:23.570
&gt;&gt; Jafar Husain: But
is that a good thing here?

10
00:00:23.570 --> 00:00:24.140
&gt;&gt; Speaker 2: Yes.

11
00:00:24.140 --> 00:00:24.973
&gt;&gt; Jafar Husain: Do I want to do that?

12
00:00:24.973 --> 00:00:27.024
&gt;&gt; [SOUND]
&gt;&gt; Jafar Husain: I'm not so sure, right.

13
00:00:27.024 --> 00:00:30.010
Let's think about how CONCAT works.

14
00:00:31.140 --> 00:00:34.610
If I call CONCAT 50 times,
how many observables am I gonna get?

15
00:00:36.773 --> 00:00:37.550
&gt;&gt; Jafar Husain: 50, right?

16
00:00:37.550 --> 00:00:38.480
Cuz it's a factory function.

17
00:00:38.480 --> 00:00:40.090
It creates new observables.

18
00:00:40.090 --> 00:00:43.608
But how many copies of this
observables array am I gonna get?

19
00:00:43.608 --> 00:00:45.722
How many?

20
00:00:45.722 --> 00:00:46.930
&gt;&gt; Speaker 2: One.

21
00:00:46.930 --> 00:00:48.240
&gt;&gt; Jafar Husain: No,
I'm actually gonna get 50,

22
00:00:48.240 --> 00:00:51.360
because every time the function's called,
we create this new observables array.

23
00:00:51.360 --> 00:00:57.560
But let's say I call CONCAT once, and
I subscribe to this observable 50 times.

24
00:00:57.560 --> 00:00:59.985
How many copies of the observable
array am I working with here?

25
00:01:03.347 --> 00:01:05.510
&gt;&gt; Jafar Husain: It's cuz
of the way closures work.

26
00:01:05.510 --> 00:01:06.910
How many copies do you think I have?

27
00:01:08.390 --> 00:01:12.110
So I call CONCAT once,
create one observable, and

28
00:01:12.110 --> 00:01:15.260
then I call subscribe 50 times.

29
00:01:15.260 --> 00:01:17.750
How many copies of this do I have?

30
00:01:17.750 --> 00:01:18.250
&gt;&gt; Speaker 2: One.

31
00:01:19.710 --> 00:01:22.020
&gt;&gt; Jafar Husain: It's a tough one,
but yeah, just one.

32
00:01:22.020 --> 00:01:25.460
So It seems like shifting
here is not a good idea.

33
00:01:25.460 --> 00:01:28.000
Because I am actually gonna
be mutating just one copy.

34
00:01:28.000 --> 00:01:30.870
And then every single time someone
else comes along and subscribes well,

35
00:01:30.870 --> 00:01:33.340
they will have one less observed bowl.

36
00:01:34.430 --> 00:01:35.730
So how do I avoid this problem?

37
00:01:35.730 --> 00:01:37.240
Anybody got an idea?

38
00:01:37.240 --> 00:01:40.370
&gt;&gt; Speaker 2: We do like for

39
00:01:40.370 --> 00:01:46.280
the use head in rest sort of,
type of recursion?

40
00:01:47.360 --> 00:01:47.940
&gt;&gt; Jafar Husain: If what you're

41
00:01:47.940 --> 00:01:51.180
suggesting is that we could turn this
into an immutable length list, and

42
00:01:51.180 --> 00:01:56.510
then go over it, that might work,
more complicated than what I had in mind.

43
00:01:56.510 --> 00:02:00.290
If I have an array, and
every single time somebody subscribes,

44
00:02:00.290 --> 00:02:04.950
I want to just have my own copy of that
array, how can I make sure that works?

45
00:02:04.950 --> 00:02:07.910
How can I get my own-
&gt;&gt; Speaker 2: Do a deep copy?

46
00:02:07.910 --> 00:02:08.940
&gt;&gt; Jafar Husain: Yeah,
do a deep copy, right?

47
00:02:08.940 --> 00:02:09.677
Or in this case,

48
00:02:09.677 --> 00:02:13.058
even a shallow copy cuz I'm not actually
mutating the observables inside.

49
00:02:13.058 --> 00:02:15.500
So I could just go with a shallow copy.

50
00:02:15.500 --> 00:02:20.584
So I'm gonna go let myObservables =

51
00:02:20.584 --> 00:02:26.070
Observables, that's slice and slice is

52
00:02:26.070 --> 00:02:29.480
not only it's just gonna give me a shallow
copy of all of the observables inside.

53
00:02:29.480 --> 00:02:31.030
I wanna take a beat.

54
00:02:31.030 --> 00:02:32.193
Why don't I do a deep copy?

55
00:02:34.829 --> 00:02:36.330
&gt;&gt; Jafar Husain: Can I
change an observable?

56
00:02:37.700 --> 00:02:39.829
If I call subscribe on
an observable do I change it?

57
00:02:41.800 --> 00:02:43.380
Let's take a look at
the definition of observable.

58
00:02:43.380 --> 00:02:45.190
It's pretty much all right here.

59
00:02:45.190 --> 00:02:49.250
Now when you call subscribe on
an observable, do you change it?

60
00:02:49.250 --> 00:02:50.830
It's just object.

61
00:02:50.830 --> 00:02:53.300
Like a objecty wrapper over a function.

62
00:02:53.300 --> 00:02:53.870
That's all it is.

63
00:02:53.870 --> 00:02:56.360
So I don't need to worry about
cloning the observables.

64
00:02:56.360 --> 00:02:57.120
They're immutable.

65
00:02:57.120 --> 00:02:57.659
They never change.

66
00:02:58.990 --> 00:03:02.000
So here we go.

67
00:03:02.000 --> 00:03:03.740
I'm gonna processObservable.

68
00:03:03.740 --> 00:03:06.877
So it seems like what's gonna
happen now that I've made a copy,

69
00:03:06.877 --> 00:03:09.098
seems like we're in
pretty good shape here.

70
00:03:12.210 --> 00:03:14.370
&gt;&gt; Jafar Husain: All right,
but what's missing?

71
00:03:15.450 --> 00:03:19.570
Thing about recursion is that
you need a time to stop, right?

72
00:03:19.570 --> 00:03:23.100
Otherwise I'm gonna keep going and keep
going and something bad's gonna happen.

73
00:03:23.100 --> 00:03:26.535
Can anybody think of
what's gonna happens bad?

74
00:03:26.535 --> 00:03:31.250
&gt;&gt; Speaker 2: Stack overflow, well, it's
gonna have an exception when the array-

75
00:03:31.250 --> 00:03:31.960
&gt;&gt; Jafar Husain: Yeah.

76
00:03:31.960 --> 00:03:34.403
I don't even think we're gonna get
to experience the joy of a stack

77
00:03:34.403 --> 00:03:35.011
overflow-
&gt;&gt; Speaker 2: Right.

78
00:03:35.011 --> 00:03:36.079
[LAUGH]
&gt;&gt; Jafar Husain: Because we're gonna try

79
00:03:36.079 --> 00:03:38.253
and pull off something off an empty array,
right?

80
00:03:38.253 --> 00:03:40.245
So how do we guard against.

81
00:03:40.245 --> 00:03:41.806
&gt;&gt; Speaker 2: Firstly, I like the head and

82
00:03:41.806 --> 00:03:45.317
the rest approach, and
then you check to see if the rest is well,

83
00:03:45.317 --> 00:03:49.620
I suppose you can still do the same
thing with the mutable of observables.

84
00:03:49.620 --> 00:03:51.436
Just check if it's empty or not.

85
00:03:51.436 --> 00:03:54.480
&gt;&gt; Jafar Husain: Yeah, I think that's
a little more appropriate for JavaScript.

86
00:03:54.480 --> 00:03:56.520
But for the record,
I like that approach too.

87
00:03:56.520 --> 00:04:00.430
For those who don't know what he's
talking about, a lot of times

88
00:04:00.430 --> 00:04:04.200
algorithms that work recursively are
easier to write over recursive data types.

89
00:04:04.200 --> 00:04:08.130
And there's a really cool linked list data
structure that's basically a recursive

90
00:04:08.130 --> 00:04:12.430
data structure in itself, in the sense
that a link list can either be a value,

91
00:04:12.430 --> 00:04:16.770
or nothing that is, or
a pair of a value and another linked list.

92
00:04:16.770 --> 00:04:19.615
That's a whole other topic or
whole other tutorial.

93
00:04:19.615 --> 00:04:24.020
For now, let's just check that this thing
isn't empty before we go on, right?

94
00:04:24.020 --> 00:04:27.718
So before we execute this code right here,
we wanna check, hey.

95
00:04:30.254 --> 00:04:32.629
&gt;&gt; Jafar Husain: I think I moved this
out here, I wanna put it in here.

96
00:04:34.830 --> 00:04:36.370
Right, x, oops.

97
00:04:38.910 --> 00:04:43.890
So before we shift, we're gonna say, hey.

98
00:04:43.890 --> 00:04:46.690
If my observables length of zero.

99
00:04:46.690 --> 00:04:50.620
Now what are we gonna do?

100
00:04:51.720 --> 00:04:52.630
&gt;&gt; Speaker 2: Complete?

101
00:04:52.630 --> 00:04:53.790
&gt;&gt; Jafar Husain: Complete.
Yeah, cuz we're done.

102
00:04:53.790 --> 00:04:55.219
We've processed all the observables.

103
00:05:03.429 --> 00:05:05.174
&gt;&gt; Jafar Husain: Now this
isn't quite good enough,

104
00:05:05.174 --> 00:05:07.744
because what's an observable
supposed to return?

105
00:05:10.280 --> 00:05:13.140
&gt;&gt; Jafar Husain: When you
call subscribe on it?

106
00:05:13.140 --> 00:05:15.500
&gt;&gt; Speaker 2: Subscribe, or-
&gt;&gt; Jafar Husain: Yeah,

107
00:05:15.500 --> 00:05:17.240
a subscription, absolutely.

108
00:05:17.240 --> 00:05:19.872
So that's a little tricky, I'm not sure
how to create a subscription here.

109
00:05:22.152 --> 00:05:23.499
&gt;&gt; Jafar Husain: Now the thing is,
in here,

110
00:05:23.499 --> 00:05:26.260
internally I'm creating a subscription,
all right.

111
00:05:28.070 --> 00:05:29.830
But it all happens
inside of this function.

112
00:05:29.830 --> 00:05:31.360
How am I supposed to
get a subscription out?

113
00:05:32.560 --> 00:05:37.810
&gt;&gt; Speaker 2: You return the subscription
inside the if, would it be?

114
00:05:37.810 --> 00:05:40.090
Which subscription the last subscription?

115
00:05:40.090 --> 00:05:41.840
&gt;&gt; Jafar Husain: Yeah, that's the thing
right I'm creating a whole bunch of

116
00:05:41.840 --> 00:05:44.090
subscriptions because I've got
a whole bunch of observables.

117
00:05:44.090 --> 00:05:46.934
So that's hard, right?

118
00:05:46.934 --> 00:05:49.330
In the end I only need one subscription.

119
00:05:49.330 --> 00:05:54.235
So let me ask you this how many different
observables does Comcast subscribe

120
00:05:54.235 --> 00:05:55.852
to at once, at one time?

121
00:05:58.196 --> 00:06:01.515
&gt;&gt; Jafar Husain: One, yeah, if you give it
five, it's just gonna go left to right,

122
00:06:01.515 --> 00:06:03.500
subscribing to one at a time.

123
00:06:03.500 --> 00:06:06.462
So what we could do is we
could just create a variable,

124
00:06:08.798 --> 00:06:10.059
&gt;&gt; Jafar Husain: A reference to hold onto

125
00:06:10.059 --> 00:06:13.110
whatever the current subscription is.

126
00:06:13.110 --> 00:06:20.740
And as soon as create a new subscription,
we can just assign it to that variable.

127
00:06:20.740 --> 00:06:23.444
So notice here is our process
observable function, right.

128
00:06:25.290 --> 00:06:29.724
But we have this closure,
we've closed over this variable sub and

129
00:06:29.724 --> 00:06:33.286
now inside of here when we
reassign sub to something,

130
00:06:33.286 --> 00:06:37.822
sub is always gonna point to
the currently subscribed observable.

131
00:06:37.822 --> 00:06:38.435
Does that make sense?

132
00:06:40.943 --> 00:06:47.840
&gt;&gt; Jafar Husain: Yeah, so can I
return sub here, is that good enough?

133
00:06:47.840 --> 00:06:50.000
Let me make this just a little smaller so
we can see it all at once.

134
00:06:51.460 --> 00:06:54.070
Is this good enough,
can I just return sub, is that gonna work?

135
00:06:55.370 --> 00:06:57.770
What's sub gonna be the very first time?

136
00:06:57.770 --> 00:06:58.974
This thing runs.

137
00:06:58.974 --> 00:07:04.403
I forgot to call our little function
here otherwise it's never gonna run.

138
00:07:07.395 --> 00:07:08.510
&gt;&gt; Jafar Husain: So what's this gonna be?

139
00:07:08.510 --> 00:07:11.060
Well it depends,
it's probably gonna be a value.

140
00:07:11.060 --> 00:07:14.755
Right it's probably gonna be something cuz
we're gonna call processor observable,

141
00:07:14.755 --> 00:07:16.380
it's immediately gonna subscribe.

142
00:07:16.380 --> 00:07:18.439
And then I'm gonna return it, but

143
00:07:18.439 --> 00:07:22.850
a second later I'm gonna kinda replace
sub to be the next subscription.

144
00:07:22.850 --> 00:07:28.840
But the subscription I gave to, where is
he, to David, is still the old one, right?

145
00:07:28.840 --> 00:07:30.490
And now I've moved on to a next one.

146
00:07:30.490 --> 00:07:33.490
So if David unsubscribes from that, he's
unsubscribing from the first observable,

147
00:07:33.490 --> 00:07:35.940
not the one that I'm looking at right now.

148
00:07:35.940 --> 00:07:41.775
So what I can do as I can return
a subscription object that just takes now,

149
00:07:41.775 --> 00:07:44.168
because I've delayed this,

150
00:07:44.168 --> 00:07:49.146
I've just waited until you call
on subscribe into function,

151
00:07:49.146 --> 00:07:53.284
I'll take whatever
the current subscription is.

152
00:07:53.284 --> 00:07:54.523
And I'll unsubscribe from that.

153
00:07:57.582 --> 00:07:59.215
&gt;&gt; Jafar Husain: That might actually work.

154
00:08:02.417 --> 00:08:03.660
&gt;&gt; Jafar Husain: Does that make sense?

155
00:08:03.660 --> 00:08:05.960
So, we don't have time for
another role play, but

156
00:08:05.960 --> 00:08:10.190
basically what's happening is I'm
plucking off the first observable.

157
00:08:10.190 --> 00:08:12.160
I'm subscribing to it, right?

158
00:08:12.160 --> 00:08:14.350
And then I take
the subscription that I get,

159
00:08:14.350 --> 00:08:18.040
I assign it to some reference that always
keep track of the current subscription.

160
00:08:18.040 --> 00:08:20.890
In fact, I'm gonna rename
that current subscription.

161
00:08:23.380 --> 00:08:26.220
So every single time I
subscribe to a new one,

162
00:08:26.220 --> 00:08:28.250
I assign it to this reference
current subscription.

163
00:08:29.710 --> 00:08:33.710
And then, when I get a complete message,
I just recursively call it again.

164
00:08:33.710 --> 00:08:34.570
So I go up here.

165
00:08:36.530 --> 00:08:40.190
If I have another one,
I pluck it off the front and I keep going.

166
00:08:40.190 --> 00:08:43.122
But if I don't,
I just call observer.complete.

167
00:08:43.122 --> 00:08:46.150
I'm not 100% convinced this is bug-free.

168
00:08:46.150 --> 00:08:51.305
I'm pretty sure that, for example, I'm not
doing everything I should be doing maybe.

169
00:08:51.305 --> 00:08:54.565
[SOUND] You know it might be alright
with errors, other than the one little

170
00:08:54.565 --> 00:08:58.207
caveat about synchronous vs asynchronous
observables we talked about before.

171
00:08:58.207 --> 00:09:01.590
This is a more complex example obviously.

172
00:09:01.590 --> 00:09:03.330
But that's basically what's happening.

173
00:09:03.330 --> 00:09:05.330
And if we wanted to,
we could even step through this.

174
00:09:05.330 --> 00:09:07.410
Yeah?
&gt;&gt; Speaker 2: Within the error,

175
00:09:07.410 --> 00:09:11.210
there you need to change
subscription to currentSub.

176
00:09:11.210 --> 00:09:12.350
&gt;&gt; Jafar Husain: Thank you.

177
00:09:12.350 --> 00:09:13.570
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Jafar Husain: I don't

178
00:09:13.570 --> 00:09:15.610
wanna subscribe from the currentSub,
thank you.

179
00:09:17.260 --> 00:09:20.360
Right, and by unsubscribing
from the currentSub, right,

180
00:09:20.360 --> 00:09:23.420
and not calling process observable again,

181
00:09:23.420 --> 00:09:27.210
means I'm not gonna move on to the next
observable and subscribe to that.

182
00:09:27.210 --> 00:09:28.309
So that's how CONCAT works.

183
00:09:29.410 --> 00:09:32.520
That's the magic right there,
now we know how it works.

184
00:09:32.520 --> 00:09:34.240
&gt;&gt; Speaker 2: Will you repeat
that last thing that you said?

185
00:09:34.240 --> 00:09:35.890
Like, so that was kinda like,

186
00:09:35.890 --> 00:09:39.720
I don't quite understand how you
would unsubscribe in the middle, and

187
00:09:39.720 --> 00:09:44.340
then like how would that process look
when you unsubscribe in the middle?

188
00:09:44.340 --> 00:09:46.930
And then it wouldn't end up
subscribing to the next one.

189
00:09:46.930 --> 00:09:49.750
&gt;&gt; Jafar Husain: Well,
let's say that I unsubscribe to whatever.

190
00:09:49.750 --> 00:09:52.850
Let's say we're at the very first
observable we subscribed to it.

191
00:09:52.850 --> 00:09:56.670
I get out a subscription and
I assign it to currentSub, right?

192
00:09:56.670 --> 00:09:58.700
And now let's say this observable
really takes its time.

193
00:09:58.700 --> 00:10:01.920
It's just gonna give you numbers
over the next ten seconds, right?

194
00:10:01.920 --> 00:10:05.640
And you'll get antsy and say I don't
need this I'm unsubscribing from this.

195
00:10:05.640 --> 00:10:06.430
Well, what's gonna happen?

196
00:10:06.430 --> 00:10:09.340
Well, I'm gonna unsubscribe
from current sub, so

197
00:10:09.340 --> 00:10:11.820
how do we make sure that this isn't
gonna move on to the next one, and

198
00:10:11.820 --> 00:10:13.610
pluck off the next observable and
subscribe to that?

199
00:10:13.610 --> 00:10:16.635
Well, what happens when you
unsubscribe is error or

200
00:10:16.635 --> 00:10:21.047
complete ever gonna get called when
you unsubscribe from this observable?

201
00:10:24.233 --> 00:10:27.512
&gt;&gt; Jafar Husain: If you unsubscribe from
the observable, is it gonna call error, or

202
00:10:27.512 --> 00:10:30.630
complete, or next, or
any method on your observer ever again?

203
00:10:32.040 --> 00:10:36.730
No, and so therefore,
we never get to complete, we never

204
00:10:36.730 --> 00:10:41.110
call process observable, meaning we never
start processing the next observable.

205
00:10:41.110 --> 00:10:44.090
Again, I'm not first time writing this,
I'm not 100% sure it's bug free, but

206
00:10:44.090 --> 00:10:45.420
it looks like it's right.

207
00:10:45.420 --> 00:10:47.390
Does that make sense?

208
00:10:48.910 --> 00:10:51.521
So whenever you're
working with asynchrony,

209
00:10:51.521 --> 00:10:55.644
the way in which we repeat things that
are asynchronous, can we use loops?

210
00:10:58.824 --> 00:11:01.454
&gt;&gt; Jafar Husain: Like the very first
example I did, remember I looped over all

211
00:11:01.454 --> 00:11:04.110
the observables, and
then I subscribed to them?

212
00:11:04.110 --> 00:11:07.530
Well, that would cause all the
subscriptions to be observable to happen

213
00:11:07.530 --> 00:11:10.150
at the same time, but
that's not what I want.

214
00:11:10.150 --> 00:11:13.410
In general, this is almost always true.

215
00:11:13.410 --> 00:11:16.050
When you wanna do things asynchronously,
repetitively,

216
00:11:16.050 --> 00:11:18.979
when you wanna loop over something,
but that's an asynchronous process.

217
00:11:20.220 --> 00:11:23.660
You can't really use loops,
you have to rely on recursion or

218
00:11:23.660 --> 00:11:26.300
some function which
indirectly does recursion.

219
00:11:26.300 --> 00:11:28.820
And so that's why we have made
ourselves a little function and

220
00:11:28.820 --> 00:11:29.720
we just keep calling it.

221
00:11:30.770 --> 00:11:31.660
Does that make sense?

222
00:11:32.790 --> 00:11:36.500
So more advanced example than I
necessarily wanted to get into but

223
00:11:36.500 --> 00:11:39.040
I basically wanna try and explain as
much of the magic that we're gonna

224
00:11:39.040 --> 00:11:41.050
be doing as I can as we
got through this process

