WEBVTT

1
00:00:01.340 --> 00:00:02.593
&gt;&gt; Jafar Husain: Any other
questions out there?

2
00:00:02.593 --> 00:00:05.240
I'm actually somebody asked that
question cuz I wanted to cover subjects.

3
00:00:05.240 --> 00:00:06.720
Yeah?
&gt;&gt; Speaker 2: I have a question about

4
00:00:06.720 --> 00:00:08.575
the async iterator proposal.

5
00:00:08.575 --> 00:00:10.621
&gt;&gt; Jafar Husain: Yeah?
&gt;&gt; Speaker 2: Do you see any way that

6
00:00:10.621 --> 00:00:14.923
you can use them together
with observables?

7
00:00:14.923 --> 00:00:18.837
&gt;&gt; Jafar Husain: Absolutely, the main
difference between an async iterator and

8
00:00:18.837 --> 00:00:23.257
an observable, as I think I eluded to
early, an async iterator is almost

9
00:00:23.257 --> 00:00:27.880
exactly, but not entirely exactly,
like an iterator of promises.

10
00:00:27.880 --> 00:00:29.460
So I say hey, give me the next value.

11
00:00:29.460 --> 00:00:32.730
And then the producer, instead of
giving me the value immediately,

12
00:00:32.730 --> 00:00:35.210
it gives me a promise which
eventually resolves to the value.

13
00:00:35.210 --> 00:00:38.010
And what's great about that is for
things like I/O for

14
00:00:38.010 --> 00:00:41.430
example, I can read data at my leisure,
right?

15
00:00:41.430 --> 00:00:45.960
Let's say I'm writing out to an output
stream, and I can only write so fast.

16
00:00:45.960 --> 00:00:48.730
Well I can decide to read, whenever
I'm ready, I can just call next and

17
00:00:48.730 --> 00:00:49.950
I get the next value.

18
00:00:49.950 --> 00:00:54.630
All right so, asynchronous iterables,
just like regular iterables,

19
00:00:54.630 --> 00:00:58.330
the consumer is in power and
they decide when to pull the next value.

20
00:00:58.330 --> 00:00:59.950
Observable flips that around, right?

21
00:00:59.950 --> 00:01:03.240
With and observable, the producer
decides when you get the next value.

22
00:01:03.240 --> 00:01:07.100
And there's no way of telling
the observable cool it for a while man.

23
00:01:07.100 --> 00:01:08.560
I'm not quite ready yet.

24
00:01:08.560 --> 00:01:09.487
You can unsubscribe but

25
00:01:09.487 --> 00:01:12.085
that's not the same thing as
pausing the observable, all right.

26
00:01:12.085 --> 00:01:15.537
If you unsubscribe, then you resubscribe
you might cancel a network request, or

27
00:01:15.537 --> 00:01:18.397
kick off a whole new network request
which will get different data.

28
00:01:18.397 --> 00:01:20.580
So it's important to understand
that unsubscribing and

29
00:01:20.580 --> 00:01:22.770
resubscribing might have
a whole bunch of side effects.

30
00:01:22.770 --> 00:01:24.390
It is not the same as pausing a stream.

31
00:01:24.390 --> 00:01:26.190
Does that make sense?

32
00:01:26.190 --> 00:01:29.770
So in order to adapt an observable
into an asychronous inerator,

33
00:01:29.770 --> 00:01:32.700
basically you need some
back pressure strategy.

34
00:01:32.700 --> 00:01:37.180
You need a way of kinda pausing
the observable even though

35
00:01:37.180 --> 00:01:39.800
there's not way out of the box
of pausing the observable.

36
00:01:39.800 --> 00:01:42.490
And the most obvious strategy
is two obvious ones.

37
00:01:42.490 --> 00:01:44.360
One if buffer, right?

38
00:01:44.360 --> 00:01:47.530
Well, data's coming, but
the consumer's not ready for it yet.

39
00:01:47.530 --> 00:01:48.930
So I'm gonna put it over here in a buffer.

40
00:01:48.930 --> 00:01:51.283
And then the other one is drop.

41
00:01:51.283 --> 00:01:52.851
Just throw the data away, right?

42
00:01:52.851 --> 00:01:56.030
You could,
basically it's like a buffer of one.

43
00:01:56.030 --> 00:01:58.925
You can put it in one and
then you can throw away any overflow data.

44
00:01:58.925 --> 00:02:02.110
&gt;&gt; Speaker 2: Isn't that kind
of what a debounce is though?

45
00:02:02.110 --> 00:02:04.441
&gt;&gt; Jafar Husain: Well it's
similar to a debounce, similar.

46
00:02:04.441 --> 00:02:07.212
But it's not the same thing because in
a debounce usually you're doing it for

47
00:02:07.212 --> 00:02:08.330
some period of time.

48
00:02:08.330 --> 00:02:12.060
Whereas in this case you're kind of
debouncing until the consumer sends you

49
00:02:12.060 --> 00:02:13.580
an explicit request signal.

50
00:02:13.580 --> 00:02:15.930
And there's no concept of
that in observable, right?

51
00:02:15.930 --> 00:02:18.700
There's no pull, it's all push.

52
00:02:20.430 --> 00:02:22.360
But it's similar in some
way to the demounts.

53
00:02:22.360 --> 00:02:25.620
And then of course,
you could drop all the new ones.

54
00:02:25.620 --> 00:02:29.620
You could also drop all the old ones,
there's a whole bunch of variations.

55
00:02:29.620 --> 00:02:33.600
But yeah, it's pretty straightforward to
adapt an observable into an async iterable

56
00:02:33.600 --> 00:02:35.580
as long as you don't mind
losing a little data or

57
00:02:35.580 --> 00:02:37.150
you don't mind an unbounded buffer.

58
00:02:38.260 --> 00:02:43.900
Now in general, you're probably, since
async iterable is the most flexible type,

59
00:02:43.900 --> 00:02:47.480
in the end you can always adapt
an observable into a async iterable.

60
00:02:47.480 --> 00:02:49.940
You could also go the other way as well,
right?

61
00:02:49.940 --> 00:02:54.000
That would just mean four
looping over the async iterable,

62
00:02:54.000 --> 00:02:57.091
and then next thing and
pushing out, right?

63
00:02:57.091 --> 00:03:00.359
In general, I'm not sure how commonly
they're gonna be used together.

64
00:03:00.359 --> 00:03:03.913
In practice, I think you're gonna see a
lot more async iterables on the server and

65
00:03:03.913 --> 00:03:06.780
you're gonna see a lot more
observables in the client.

66
00:03:06.780 --> 00:03:10.324
In general async iterable makes a lot
of sense when you're doing IO, right?

67
00:03:10.324 --> 00:03:14.920
Cuz you can only write at a certain
speed with async iterables.

68
00:03:14.920 --> 00:03:16.920
And so that makes sense cuz
you have back pressure.

69
00:03:16.920 --> 00:03:19.871
But if you're working with events, well,
you can't tell the user to wait, right?

70
00:03:19.871 --> 00:03:23.609
[LAUGH] The user can always click a new
key and so observables are a much better

71
00:03:23.609 --> 00:03:27.780
fit for evented programming, like the type
of programming we see in the front end.

