WEBVTT

1
00:00:00.170 --> 00:00:02.270
&gt;&gt; Jafar Husain: We've taken
some time to review these, so

2
00:00:02.270 --> 00:00:04.610
I'll remind you what the problem is.

3
00:00:04.610 --> 00:00:07.940
We have this tasks,
which is a two dimensional observable.

4
00:00:07.940 --> 00:00:10.820
Every single time we get
an inner observable,

5
00:00:10.820 --> 00:00:13.970
the platform's saying, hey,
I'm about to do some expensive work.

6
00:00:13.970 --> 00:00:14.960
It's gonna take me awhile.

7
00:00:16.120 --> 00:00:20.070
And as long as the platform
is doing more than one task,

8
00:00:20.070 --> 00:00:21.700
I don't want to allow animations.

9
00:00:21.700 --> 00:00:24.330
So as soon as one task comes along,
I switch to false.

10
00:00:24.330 --> 00:00:29.260
And then as soon as the platform has
done all of its tasks, I switch to true.

11
00:00:29.260 --> 00:00:32.680
And then as soon as a new tasks comes
along false, and so on and so forth.

12
00:00:34.050 --> 00:00:36.740
So what we're gonna do is
we're gonna gradually move

13
00:00:36.740 --> 00:00:40.390
from tasks to animations allowed,
using the functions that we've learned.

14
00:00:40.390 --> 00:00:43.530
Sorry guys at home, I haven't been as good
about staying on top of the questions.

15
00:00:44.900 --> 00:00:48.680
Is it common to have larger than
two dimensional observables?

16
00:00:48.680 --> 00:00:51.710
Well, larger than two dimensional,
no, it's quite rare.

17
00:00:51.710 --> 00:00:56.050
In general, well,
let me put that differently.

18
00:00:56.050 --> 00:00:59.460
In general when you use some function
which creates a two dimensional observer,

19
00:00:59.460 --> 00:01:00.860
typically a map.

20
00:01:00.860 --> 00:01:02.170
Well let's take a step back.

21
00:01:02.170 --> 00:01:06.550
The most common pattern we see
in UIs is you get an event,

22
00:01:06.550 --> 00:01:10.550
you kick off a network request, and then
you do something with the result, right?

23
00:01:10.550 --> 00:01:14.150
So for every event,
you may wanna kick off a network request.

24
00:01:14.150 --> 00:01:18.530
That simple, regular pattern creates
two-dimensional observables, right?

25
00:01:18.530 --> 00:01:21.970
Cuz we take our clicks event,
you remember the clicks event?

26
00:01:21.970 --> 00:01:26.510
And then we map over it, and
then we return the result of

27
00:01:26.510 --> 00:01:30.590
making a network request, which is also
something we turn into an observable.

28
00:01:30.590 --> 00:01:34.960
And so if we create a network request,
if we create an observable for

29
00:01:34.960 --> 00:01:40.650
every piece of data in another observable,
we create a two-dimensional observable.

30
00:01:40.650 --> 00:01:41.323
So let's take an example of this.

31
00:01:44.386 --> 00:01:46.630
&gt;&gt; Jafar Husain: So here I have an array.

32
00:01:47.660 --> 00:01:50.980
If I do this, what do I get guys?

33
00:01:50.980 --> 00:01:52.020
&gt;&gt; Speaker 2: A new array.

34
00:01:52.020 --> 00:01:54.510
&gt;&gt; Jafar Husain: Exactly what do I get?

35
00:01:54.510 --> 00:01:55.010
&gt;&gt; Speaker 2: Two dimensional array.

36
00:02:00.691 --> 00:02:02.286
&gt;&gt; Jafar Husain: Why do I
get a two dimensional array?

37
00:02:02.286 --> 00:02:04.147
What does this have to do with
network requests and events?

38
00:02:04.147 --> 00:02:04.697
Well.

39
00:02:22.478 --> 00:02:26.933
&gt;&gt; Jafar Husain: So here I am, for every
button click, I'm pulling the currently

40
00:02:26.933 --> 00:02:32.130
selected stock out of a select box and
I'm getting the price for that stock.

41
00:02:33.920 --> 00:02:36.790
If getpPrice works like this,

42
00:02:43.690 --> 00:02:44.645
&gt;&gt; Jafar Husain: This is
somewhat aspirational.

43
00:02:46.560 --> 00:02:50.280
&gt;&gt; Jafar Husain: Right, so
getPrice returns me an observable.

44
00:02:50.280 --> 00:02:54.750
It eventually gives me an extremely
high stock price, right?

45
00:02:54.750 --> 00:02:58.790
getPrice is a function that
creates an observable.

46
00:02:58.790 --> 00:03:01.945
So how many dimensions is
this observable right here?

47
00:03:01.945 --> 00:03:04.680
&gt;&gt; Speaker 2: Two-dimensional.

48
00:03:04.680 --> 00:03:05.760
&gt;&gt; Jafar Husain: Why
is it two-dimensional?

49
00:03:05.760 --> 00:03:07.210
Who says one, out of curiosity?

50
00:03:07.210 --> 00:03:07.829
Does anybody say one?

51
00:03:09.678 --> 00:03:11.650
&gt;&gt; Jafar Husain: No,
we all think it's two-dimensional?

52
00:03:11.650 --> 00:03:12.440
Why is it two-dimensional?

53
00:03:12.440 --> 00:03:16.260
&gt;&gt; Speaker 2: Because
the initial observable is

54
00:03:16.260 --> 00:03:19.660
we're mapping over the values and
we're creating a new observable for

55
00:03:19.660 --> 00:03:23.430
every value, so it'll be
observables inside the observable.

56
00:03:23.430 --> 00:03:24.300
&gt;&gt; Jafar Husain: Yeah.
&gt;&gt; Speaker 2: And we need to

57
00:03:24.300 --> 00:03:25.380
use merge map.

58
00:03:25.380 --> 00:03:27.220
&gt;&gt; Jafar Husain: That's just
like this example right here.

59
00:03:27.220 --> 00:03:28.830
Well, so that's interesting.

60
00:03:28.830 --> 00:03:30.660
I heard you say we need to use merge map.

61
00:03:30.660 --> 00:03:35.160
And for those of you who don't know, merge
map is just a map followed by a merge all.

62
00:03:35.160 --> 00:03:38.280
So, in other words,
in order to flatten it we could

63
00:03:38.280 --> 00:03:43.536
do
&gt;&gt; Jafar Husain: Is

64
00:03:43.536 --> 00:03:44.500
this what I'd want in a UI?

65
00:03:47.686 --> 00:03:48.669
&gt;&gt; Jafar Husain: Is it?

66
00:03:48.669 --> 00:03:50.667
I don't know.
&gt;&gt; Speaker 2: Switch map?

67
00:03:50.667 --> 00:03:52.730
&gt;&gt; Jafar Husain: [LAUGH] Yeah,
that's a good guess.

68
00:03:52.730 --> 00:03:54.239
I'd probably want switch latest here.

69
00:03:57.610 --> 00:04:00.620
Who thinks another operator like,
like concatall, so we got three, right?

70
00:04:00.620 --> 00:04:02.920
Merge all, concatall, switch latest.

71
00:04:02.920 --> 00:04:07.050
The reality is it probably depends
on your UI requirements, but

72
00:04:07.050 --> 00:04:10.230
most of the time you want to ignore
the last three requests they made for

73
00:04:10.230 --> 00:04:12.320
stock prices and
you only want the current one, right?

74
00:04:12.320 --> 00:04:14.750
The last thing you want to do is
give a broker an old stock price,

75
00:04:14.750 --> 00:04:16.206
they tend to get really upset about that.

76
00:04:19.010 --> 00:04:22.496
So I would use switchLatest,
because if somebody goes [SOUND],

77
00:04:22.496 --> 00:04:24.943
we all know brokers are impatient, right?

78
00:04:24.943 --> 00:04:29.670
If they do that, do I want five competing,
racing network requests to the server?

79
00:04:29.670 --> 00:04:32.550
I wanna throw away the last four,
and just keep one.

80
00:04:32.550 --> 00:04:35.810
And so that's why I'm gonna
use switchLatest, right?

81
00:04:35.810 --> 00:04:39.260
If I was to use mergeAll,
a couple of bad things might happen.

82
00:04:39.260 --> 00:04:42.810
One is I'd kick off six concurrent network
requests, maybe that's what you want.

83
00:04:42.810 --> 00:04:46.260
But is there any guarantee that those
network request results are gonna come

84
00:04:46.260 --> 00:04:49.360
back in the same order in
which they were kicked off?

85
00:04:50.660 --> 00:04:51.560
No, right?

86
00:04:51.560 --> 00:04:53.370
I got a race condition.

87
00:04:53.370 --> 00:04:56.060
So switch latest helps
me solve that problem.

88
00:04:56.060 --> 00:04:59.860
Now, concat all would also solve
that race condition problem.

89
00:04:59.860 --> 00:05:02.210
It would wait for
the first request to come back.

90
00:05:02.210 --> 00:05:03.590
Then it would make the second request, and

91
00:05:03.590 --> 00:05:07.050
so you'd always get the latest numbers,
right?

92
00:05:07.050 --> 00:05:09.530
But it would also take a super long time.

93
00:05:09.530 --> 00:05:13.400
Remember how concatAll elongates time?

94
00:05:13.400 --> 00:05:15.519
Cuz it never stops
the current network request.

95
00:05:17.050 --> 00:05:20.379
It waits for the first one to be done,
and so the second one.

96
00:05:20.379 --> 00:05:24.501
So you can imagine me doing this [SOUND]
and cueing up a bunch of network requests,

97
00:05:24.501 --> 00:05:26.912
which is probably what I don't want,
right?

98
00:05:26.912 --> 00:05:30.494
So the answer to your question is two
dimensional observables are very common,

99
00:05:30.494 --> 00:05:34.880
or well, sorry, the answer technically was
is larger than two dimensional is common.

100
00:05:34.880 --> 00:05:37.840
Not really,
there are some cases where you would want

101
00:05:37.840 --> 00:05:41.960
larger than a two dimensional observable,
but that's not very common.

102
00:05:41.960 --> 00:05:47.030
So the difference between mergeAll and
merge, this is a great question.

103
00:05:47.030 --> 00:05:52.080
So we learned to merge we learned concat
and we learned mergeAll and concatAll.

104
00:05:52.080 --> 00:05:56.909
MergeAll and concatAll operate on two
dimensional observables and flatten them.

105
00:05:56.909 --> 00:06:01.890
So if you have a stream of streams
arriving, merge on concat.

106
00:06:01.890 --> 00:06:02.590
I'll look great for that.

107
00:06:02.590 --> 00:06:05.200
But sometimes you don't
have a stream of streams.

108
00:06:05.200 --> 00:06:09.120
Sometimes you just got two observables,
or five observables, or nine observables.

109
00:06:09.120 --> 00:06:10.240
And you have them all right now.

110
00:06:10.240 --> 00:06:14.180
You just want to concat them together or
merge them together and

111
00:06:14.180 --> 00:06:16.759
that's when you would
use observable.merge.

112
00:06:17.950 --> 00:06:19.970
Cuz here,
if you already have the observables,

113
00:06:21.340 --> 00:06:24.940
you can just plug them all in at once,
does that make sense?

114
00:06:26.190 --> 00:06:31.730
&gt;&gt; Speaker 2: Is merge an actual method
that you use as an instance method?

115
00:06:31.730 --> 00:06:33.029
&gt;&gt; Jafar Husain: Yeah,
you can use both if you want.

116
00:06:35.929 --> 00:06:38.701
&gt;&gt; Jafar Husain: I prefer to
use it statically cuz I find

117
00:06:38.701 --> 00:06:42.610
that's a little harder to
read when I format it then.

118
00:06:45.570 --> 00:06:46.870
But you're absolutely right.

119
00:06:46.870 --> 00:06:50.730
You can call it like this or
you can call it like this.

120
00:06:50.730 --> 00:06:55.230
I find statically when you indent it.

121
00:06:55.230 --> 00:06:58.976
So it'll clear that these two are kind
of not dependent on each other but

122
00:06:58.976 --> 00:07:01.044
they are just being plugged together.

123
00:07:04.666 --> 00:07:06.910
&gt;&gt; Jafar Husain: So awesome question,
great question guys.

124
00:07:06.910 --> 00:07:10.490
Now does everybody understand
the difference between concat, concatAll?

125
00:07:10.490 --> 00:07:11.477
merge, mergeAll?

