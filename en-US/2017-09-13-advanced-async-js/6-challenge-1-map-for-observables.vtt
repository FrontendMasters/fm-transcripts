WEBVTT

1
00:00:00.260 --> 00:00:03.461
&gt;&gt; Jafar Husain: We've built ourselves
some factory functions for observables,

2
00:00:03.461 --> 00:00:06.498
but what about the most common
functions that we actually use?

3
00:00:06.498 --> 00:00:09.251
The ones that you guys
learned in the last class?

4
00:00:09.251 --> 00:00:12.430
MAP, filter, reduce, zip, etc.

5
00:00:13.460 --> 00:00:15.450
So let's try and build some of those.

6
00:00:15.450 --> 00:00:18.410
What I love about this is that really,
once you guys see what's

7
00:00:18.410 --> 00:00:21.320
going on under the hood, and
we step through it with the debugger,

8
00:00:21.320 --> 00:00:25.320
you're gonna have a much more solid
understanding of how observable works.

9
00:00:25.320 --> 00:00:28.370
And you're also gonna see that
there's not that much to it.

10
00:00:28.370 --> 00:00:30.220
It's actually pretty simple.

11
00:00:30.220 --> 00:00:34.210
So let's build ourselves
my favorite function, map.

12
00:00:35.860 --> 00:00:38.840
So notice that the previous two
functions have been static.

13
00:00:38.840 --> 00:00:40.910
Because they've been factory functions,
right?

14
00:00:40.910 --> 00:00:44.990
They don't work on an observable,
they create an observable.

15
00:00:44.990 --> 00:00:46.120
But map is different.

16
00:00:46.120 --> 00:00:48.440
Map works on an observable.

17
00:00:48.440 --> 00:00:52.475
So if you remember how we use map,
bear with me here.

18
00:00:54.457 --> 00:00:56.940
&gt;&gt; Jafar Husain: I can have an observable.

19
00:00:56.940 --> 00:00:58.810
Let's say I have some observable.

20
00:00:58.810 --> 00:01:00.149
I can map it.

21
00:01:00.149 --> 00:01:03.996
And I can take all the numbers in that
observable and increment them by 1, right?

22
00:01:03.996 --> 00:01:05.530
So that's how map works.

23
00:01:05.530 --> 00:01:06.680
So let's write the map function.

24
00:01:09.050 --> 00:01:10.470
So what's the signature of map?

25
00:01:10.470 --> 00:01:11.000
What function?

26
00:01:11.000 --> 00:01:12.136
What does it take?

27
00:01:12.136 --> 00:01:14.156
&gt;&gt; Speaker 2: It takes a function.

28
00:01:14.156 --> 00:01:16.274
&gt;&gt; Jafar Husain: Sometimes it's
called the projection function.

29
00:01:19.849 --> 00:01:24.268
&gt;&gt; Jafar Husain: It takes an item and
it turns it into a new item, all right?

30
00:01:24.268 --> 00:01:27.203
And what does map return?

31
00:01:27.203 --> 00:01:28.391
&gt;&gt; Speaker 2: A non-observable.

32
00:01:28.391 --> 00:01:29.578
&gt;&gt; Jafar Husain: Non-observable, right?

33
00:01:29.578 --> 00:01:33.361
Good default answer.

34
00:01:33.361 --> 00:01:37.791
All right, and so we're gonna
define the subscribe method here.

35
00:01:37.791 --> 00:01:40.340
So for this observable we're returning,

36
00:01:40.340 --> 00:01:43.960
we're now defining what happens
when they call subscribe.

37
00:01:43.960 --> 00:01:45.875
So guys,
what happens when I call subscribe?

38
00:01:50.999 --> 00:01:52.834
&gt;&gt; Jafar Husain: Let's
write a little program.

39
00:01:52.834 --> 00:01:56.700
Let's go and actually add,
so we can play around here,

40
00:01:56.700 --> 00:01:59.597
I'm gonna add a little button on screen.

41
00:02:09.578 --> 00:02:11.552
&gt;&gt; Jafar Husain: There our,
should be a button.

42
00:02:16.509 --> 00:02:17.427
&gt;&gt; Jafar Husain: There it is.

43
00:02:28.415 --> 00:02:30.747
&gt;&gt; Jafar Husain: So we have a nice button.

44
00:02:30.747 --> 00:02:35.136
And let's take the clicks on that button
and turn them into an observable.

45
00:02:35.136 --> 00:02:36.528
So just before we write map,

46
00:02:36.528 --> 00:02:40.530
we'll just build ourselves an observable
we can play around with and transform.

47
00:03:01.021 --> 00:03:05.563
&gt;&gt; Jafar Husain: And,
&gt;&gt; Jafar Husain: Try and

48
00:03:05.563 --> 00:03:06.770
make this bigger for the folks at home.

49
00:03:09.384 --> 00:03:10.475
&gt;&gt; Jafar Husain: Help me out, guys,

50
00:03:10.475 --> 00:03:13.244
what am I gonna do here to
make a clicks observable?

51
00:03:15.885 --> 00:03:19.155
&gt;&gt; Jafar Husain: What do
I have to pass in here?

52
00:03:19.155 --> 00:03:20.046
&gt;&gt; Speaker 2: Event name?

53
00:03:20.046 --> 00:03:21.470
&gt;&gt; Jafar Husain: Yeah,
the event name, right.

54
00:03:23.270 --> 00:03:24.210
Notice what I did here?

55
00:03:26.940 --> 00:03:28.251
It's plural.

56
00:03:28.251 --> 00:03:31.055
I tend to name my observables
just like I name my arrays,

57
00:03:31.055 --> 00:03:34.157
because I want us to get out of
the mode of thinking about events

58
00:03:34.157 --> 00:03:37.740
as this thing we hook up to, and
this weird thing we unhook from.

59
00:03:37.740 --> 00:03:40.520
It's just a collection,,
it's just a stream, all right?

60
00:03:40.520 --> 00:03:44.912
So now we created ourselves
a stream of all the future clicks.

61
00:03:44.912 --> 00:03:48.455
Is this a steam that's infinite,
or finite?

62
00:03:48.455 --> 00:03:49.111
&gt;&gt; Speaker 2: Infinite.

63
00:03:49.111 --> 00:03:50.472
&gt;&gt; Jafar Husain: Infinite, right?

64
00:03:50.472 --> 00:03:52.430
&gt;&gt; Speaker 2: No dollar sign?

65
00:03:52.430 --> 00:03:55.770
&gt;&gt; Jafar Husain: That is a convention
that a lot of people use.

66
00:03:55.770 --> 00:03:59.830
I don't have anything against it,
really, but I don't.

67
00:03:59.830 --> 00:04:02.527
So feel free to use that if you like.

68
00:04:02.527 --> 00:04:05.498
For those of you at home who don't
know what he's talking about,

69
00:04:05.498 --> 00:04:08.830
some people use this convention
to denote observable.

70
00:04:08.830 --> 00:04:09.680
I think it's clever.

71
00:04:09.680 --> 00:04:11.550
A little too clever for me.

72
00:04:11.550 --> 00:04:13.080
So I'm gonna stick with that.

73
00:04:14.860 --> 00:04:16.128
So now we have a clicks observable, so

74
00:04:16.128 --> 00:04:18.601
let's just actually quickly make sure
this works before we jump on a map.

75
00:04:31.429 --> 00:04:32.270
&gt;&gt; Jafar Husain: Cool.

76
00:04:32.270 --> 00:04:35.630
&gt;&gt; Speaker 2: Can you now save it so
that we can pull in the recent changes?

77
00:04:35.630 --> 00:04:37.798
&gt;&gt; Jafar Husain: Seems reasonable.

78
00:04:37.798 --> 00:04:40.930
I saved the snapshot,
hopefully that works.

79
00:04:40.930 --> 00:04:44.245
&gt;&gt; Speaker 2: No,
it's a different URL, no?

80
00:04:44.245 --> 00:04:50.023
&gt;&gt; Jafar Husain: So I'm not as experienced
with doing this in a shared way.

81
00:04:50.023 --> 00:04:51.821
Is it adifferent URL?

82
00:04:51.821 --> 00:04:55.074
Looks the same to me, but-
&gt;&gt; Speaker 2: It's with the,

83
00:04:55.074 --> 00:04:57.285
cuz you got the html, yeah.

84
00:04:57.285 --> 00:04:59.416
It's the output.

85
00:04:59.416 --> 00:05:01.891
&gt;&gt; Jafar Husain: Cuz
the output window is open.

86
00:05:01.891 --> 00:05:07.160
But I wouldn't expect that would impact
that your ability to see the content.

87
00:05:10.180 --> 00:05:13.982
So I mean, I can keep saving a snapshot.

88
00:05:13.982 --> 00:05:15.957
But it's probably the best
I can do I'm afraid.

89
00:05:20.340 --> 00:05:24.584
&gt;&gt; Jafar Husain: If anybody can see it if
they can help him out, that'll be awesome.

90
00:05:27.398 --> 00:05:30.490
&gt;&gt; Jafar Husain: So this is kind of
what we expect, no big surprises here.

91
00:05:31.920 --> 00:05:36.169
And actually I am gonna do this just
one more time just to drive it home,

92
00:05:36.169 --> 00:05:37.980
make sure we all understand.

93
00:05:37.980 --> 00:05:40.376
I'm gonna step through this flow here and
see how this happens.

94
00:05:44.573 --> 00:05:47.222
&gt;&gt; Jafar Husain: Start by can we
get to clicker observable there?

95
00:05:52.516 --> 00:05:53.839
&gt;&gt; Jafar Husain: That really
doesn't want to work.

96
00:06:06.413 --> 00:06:08.097
&gt;&gt; Jafar Husain: Hit debugger that time.

97
00:06:13.879 --> 00:06:15.367
&gt;&gt; Jafar Husain: There we go.

98
00:06:15.367 --> 00:06:18.632
So what happens when we
step in to subscribe?

99
00:06:18.632 --> 00:06:21.560
Well, we jump all the way up to
that wrapper subscribe method.

100
00:06:21.560 --> 00:06:24.620
We're always gonna find ourselves
in there, that's no big deal.

101
00:06:24.620 --> 00:06:27.720
And then we're gonna hop
in to real definition, so

102
00:06:27.720 --> 00:06:30.720
this what happens when you
subscribe to our clicks.

103
00:06:30.720 --> 00:06:34.270
We create this handler function
which closes over the observer, and

104
00:06:34.270 --> 00:06:38.650
it's gonna keep it alive as long as
somebody has a handle onto this function.

105
00:06:38.650 --> 00:06:40.800
So our observable will stay alive.

106
00:06:40.800 --> 00:06:44.160
We add an event listener,
and then we're done, right?

107
00:06:44.160 --> 00:06:45.980
That's all there is to do.

108
00:06:45.980 --> 00:06:50.140
But, since all the fun happens inside of
our handler, I'm gonna put a break point

109
00:06:50.140 --> 00:06:53.530
right here, and we'll see what happens
when we call, when we press the button.

110
00:06:54.790 --> 00:06:56.940
Now, we find ourselves into the handler,

111
00:06:56.940 --> 00:06:59.290
and we're gonna pump
a value into that observer.

112
00:06:59.290 --> 00:07:05.286
I'm gonna step into next here, and we
find ourselves in the real log function.

113
00:07:05.286 --> 00:07:07.226
&gt;&gt; Speaker 2: We had a question on
chat if you wanna check it out.

114
00:07:07.226 --> 00:07:09.654
&gt;&gt; Jafar Husain: Yeah.

115
00:07:09.654 --> 00:07:10.738
&gt;&gt; Speaker 2: Yeah.

116
00:07:14.143 --> 00:07:17.704
&gt;&gt; Jafar Husain: Doesn't a hot
observable never complete?

117
00:07:17.704 --> 00:07:20.203
&gt;&gt; Speaker 2: Yeah, that was earlier,
and then there's another one too.

118
00:07:20.203 --> 00:07:22.498
&gt;&gt; Jafar Husain: So
a hot observable absolutely can complete.

119
00:07:25.356 --> 00:07:28.965
&gt;&gt; Jafar Husain: You can
just miss the boat, right?

120
00:07:28.965 --> 00:07:33.673
Ideally, what would happen is if a hot
observable completes, it would usually,

121
00:07:33.673 --> 00:07:36.744
a well behaved observable
would remember that fact so

122
00:07:36.744 --> 00:07:41.523
that if subsequent subscribers come along,
it just [SOUND] instantly completes for

123
00:07:41.523 --> 00:07:43.732
them so they don't just leak memory.

124
00:07:43.732 --> 00:07:47.303
That's how you would expect
an observable to behave, all right,

125
00:07:47.303 --> 00:07:49.040
if a hot observable completes.

126
00:07:49.040 --> 00:07:52.933
So if you had a network request as a hot
observable and somebody subscribed, and

127
00:07:52.933 --> 00:07:56.767
the network request came back and then
it completed, you would expect the next

128
00:07:56.767 --> 00:08:00.680
person to come along to subscribe,
to just immediately completely.

129
00:08:00.680 --> 00:08:03.010
Another thing it coul do is it
could store away the result.

130
00:08:03.010 --> 00:08:05.890
And then give them result and
then complete, right?

131
00:08:05.890 --> 00:08:08.390
And so it's possible for
a hot observable to complete.

132
00:08:09.440 --> 00:08:13.706
Just means you gotta be all
the quicker to get that data.

133
00:08:13.706 --> 00:08:20.836
And then isn't dollar sign EL for
wrapped ELS like with jQuery?

134
00:08:20.836 --> 00:08:27.398
I think the question is asking, isn't the
convention dollar sign used for jQuery?

135
00:08:27.398 --> 00:08:28.874
It is in the convention there.

136
00:08:28.874 --> 00:08:31.826
It's the actually identifier
of the jQuery library.

137
00:08:31.826 --> 00:08:36.570
I think the only reason why people suggest
using the dollar sign here is that it just

138
00:08:36.570 --> 00:08:41.106
makes it clear that it's an observable,
as opposed to an array or some other,

139
00:08:41.106 --> 00:08:44.910
or generator, or some other vector
like type with a lot of items.

140
00:08:44.910 --> 00:08:50.700
And it's kind of clever cuz
the dollar sign looks like an s.

141
00:08:50.700 --> 00:08:53.820
So has nothing to do with jQuery.

142
00:08:53.820 --> 00:08:55.700
Don't worry about that.

143
00:08:55.700 --> 00:09:02.500
Let's write ourselves a map
function to map our events.

144
00:09:02.500 --> 00:09:06.390
Now one thing about a click is,
we can actually see,

145
00:09:06.390 --> 00:09:10.740
bear with me here, we can see it's
actually got a lot of stuff in there.

146
00:09:10.740 --> 00:09:12.105
So instead of just writing next,

147
00:09:12.105 --> 00:09:14.163
I'm actually gonna log
the event object itself.

148
00:09:22.180 --> 00:09:27.132
&gt;&gt; Jafar Husain: Well, that seems like
the JSON string FIDE event object.

149
00:09:27.132 --> 00:09:29.064
That's a lot of stuff, right?

150
00:09:29.064 --> 00:09:32.886
That's gonna be hard to see
in the console right there.

151
00:09:32.886 --> 00:09:37.332
So why don't we just pluck off one
property, or something like that, right?

152
00:09:37.332 --> 00:09:43.989
Maybe the client x, which is where
on the button it was clicked.

153
00:09:43.989 --> 00:09:45.719
We can do that.

154
00:09:45.719 --> 00:09:47.591
What's a good function
we can use to do that?

155
00:09:47.591 --> 00:09:48.746
Well, map, right?

156
00:09:48.746 --> 00:09:53.630
Map is great for taking objects and
just grabbing little pieces off of them.

157
00:09:53.630 --> 00:10:00.714
So I'm gonna write map, and, right,
we're back to where we were now.

158
00:10:00.714 --> 00:10:03.443
So we're gonna try and

159
00:10:03.443 --> 00:10:09.191
use map to pluck off just
the piece that we want.

160
00:10:09.191 --> 00:10:16.048
So in this case, we are gonna
pluck off the clientX property.

161
00:10:16.048 --> 00:10:19.110
Which is the X position on
the button where it was clicked.

162
00:10:19.110 --> 00:10:22.465
I think it is either offsetX or clientX.

163
00:10:22.465 --> 00:10:23.969
And then we're gonna subscribe.

164
00:10:25.390 --> 00:10:27.030
So obviously this isn't
gonna work right now.

165
00:10:28.050 --> 00:10:29.400
Because we don't have a map function.

166
00:10:32.990 --> 00:10:35.180
So let's go ahead and
write our map function.

167
00:10:35.180 --> 00:10:38.150
So you guys are experts at writing
observable functions right now.

168
00:10:38.150 --> 00:10:43.442
So you're gonna help me out here.

169
00:10:43.442 --> 00:10:47.890
&gt;&gt; Speaker 2: I assume we have
to use this thought subscribe?

170
00:10:47.890 --> 00:10:51.517
&gt;&gt; Jafar Husain: Right,
because the source of the data, right now,

171
00:10:51.517 --> 00:10:54.780
clicks as it were is
actually the this object.

172
00:10:54.780 --> 00:10:58.000
Because map is an instance
method on observer.

173
00:10:58.000 --> 00:11:00.880
If I use this object here though,
I'm gonna run into a problem.

174
00:11:00.880 --> 00:11:03.190
What is it?

175
00:11:03.190 --> 00:11:04.375
&gt;&gt; Speaker 2: This binding.

176
00:11:04.375 --> 00:11:06.253
We'll be able to find-
&gt;&gt; Jafar Husain: This binding problem.

177
00:11:06.253 --> 00:11:09.144
This binding because
this function is here.

178
00:11:09.144 --> 00:11:11.813
But this binding [LAUGH] is
gonna be to this observable, and

179
00:11:11.813 --> 00:11:13.238
not the exterior observable.

180
00:11:13.238 --> 00:11:16.673
So we're use that trick we use
in JavaScript, where we go,

181
00:11:16.673 --> 00:11:19.025
a lot of you might have seen this before.

182
00:11:19.025 --> 00:11:23.771
That allows us to store away whether
this object was a second ago,

183
00:11:23.771 --> 00:11:25.423
right, previously.

184
00:11:25.423 --> 00:11:27.481
&gt;&gt; Speaker 2: Why not just use .bind?

185
00:11:27.481 --> 00:11:28.454
&gt;&gt; Jafar Husain: We can use .bind.

186
00:11:28.454 --> 00:11:30.026
Yeah, absolutely.

187
00:11:30.026 --> 00:11:33.600
&gt;&gt; Speaker 2: Also, would an arrow
function work for the parameter?

188
00:11:33.600 --> 00:11:35.051
&gt;&gt; Jafar Husain: All three
of those would work.

189
00:11:35.051 --> 00:11:38.071
The reason why I typically don't use
an arrow function is just cuz we got so

190
00:11:38.071 --> 00:11:40.847
many functions we're slinging here,
I like to give it a name here so

191
00:11:40.847 --> 00:11:42.379
we know we're inside of subscribe.

192
00:11:43.480 --> 00:11:45.370
But absolutely, that would work as well.

193
00:11:48.280 --> 00:11:50.190
You know what I'm gonna do, actually guys?

194
00:11:50.190 --> 00:11:53.790
I'm going to let you guys take
a second to try and write this.

195
00:11:53.790 --> 00:11:59.820
I'm gonna put this up here, and
I'm gonna let you guys take a stab at it.

196
00:11:59.820 --> 00:12:00.660
Just give it a shot.

