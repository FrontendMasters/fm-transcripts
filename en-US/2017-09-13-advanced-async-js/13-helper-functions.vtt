WEBVTT

1
00:00:00.100 --> 00:00:01.240
&gt;&gt; Jafar Husain: Let's go back, and

2
00:00:01.240 --> 00:00:05.270
let's remind ourselves what
the problem was, right?

3
00:00:05.270 --> 00:00:08.330
We have animations allowed,
we have this two dimensional tasks,

4
00:00:08.330 --> 00:00:13.500
and we want to go down to this
nice stream of true false values.

5
00:00:13.500 --> 00:00:14.850
animationsAllowed.

6
00:00:14.850 --> 00:00:19.850
And it switches to false as
soon as you begin a new task.

7
00:00:19.850 --> 00:00:25.040
And it switches back to true as soon as
all of the outstanding tasks are done, and

8
00:00:25.040 --> 00:00:28.290
then it switches back to false as soon
as a new task begins and so on and so

9
00:00:28.290 --> 00:00:29.530
on and so on.

10
00:00:29.530 --> 00:00:30.160
That make sense?

11
00:00:31.430 --> 00:00:34.700
So I was showing you guys
some helper functions, and

12
00:00:34.700 --> 00:00:36.340
we just learned one which was concat.

13
00:00:36.340 --> 00:00:37.540
Right?

14
00:00:37.540 --> 00:00:41.757
And you can just take as many, if you have
two observables in your hot little hands,

15
00:00:41.757 --> 00:00:44.240
you can just put them
together like two strings.

16
00:00:44.240 --> 00:00:49.655
And distinctUntilChanged,
can anybody figure out how that works?

17
00:00:49.655 --> 00:00:52.008
Can anybody describe
verbally how that works?

18
00:00:54.637 --> 00:00:58.462
&gt;&gt; Student1: It looks like it is
waiting for the value to change, so

19
00:00:58.462 --> 00:01:01.692
if it gets a new value it'll pass that on,
but

20
00:01:01.692 --> 00:01:06.530
then until it hits something else
it won't pass those values on.

21
00:01:06.530 --> 00:01:07.180
&gt;&gt; Jafar Husain: Right.

22
00:01:07.180 --> 00:01:10.540
And we'll see why that
comes in handy later.

23
00:01:10.540 --> 00:01:12.740
And scan, scan's one of my favorites.

24
00:01:12.740 --> 00:01:14.450
Does anybody remember reduce?

25
00:01:14.450 --> 00:01:15.780
How reduce works?

26
00:01:15.780 --> 00:01:20.126
So if I take this,
&gt;&gt; Jafar Husain: and

27
00:01:20.126 --> 00:01:25.559
I do this,
&gt;&gt; Jafar Husain: What am I gonna get?

28
00:01:27.569 --> 00:01:28.255
&gt;&gt; Student2: Six.

29
00:01:28.255 --> 00:01:30.310
&gt;&gt; Jafar Husain: Six,
yeah, absolutely right.

30
00:01:30.310 --> 00:01:35.560
In our little modified version of
reduce that we use in JavaScript,

31
00:01:35.560 --> 00:01:39.385
yes in our modified version of reduce that
we use in the previous class you actually

32
00:01:39.385 --> 00:01:40.300
get an array of six.

33
00:01:40.300 --> 00:01:42.730
Here you don't get six.

34
00:01:42.730 --> 00:01:48.250
I made a mistake there I'm sorry, you
actually get all the intermediary values.

35
00:01:48.250 --> 00:01:53.470
So scan is different than reduce because
instead of just giving you the last value

36
00:01:53.470 --> 00:01:57.930
it gives you all the intermediary
values In the computation.

37
00:01:57.930 --> 00:02:02.410
So basically, every value that was
returned by this function ever.

38
00:02:02.410 --> 00:02:05.930
Does that make sense?

39
00:02:05.930 --> 00:02:09.170
Do we feel like we got
a good handle on reduce?

40
00:02:09.170 --> 00:02:11.210
Let's go over it real quick.

41
00:02:11.210 --> 00:02:15.980
The way reduce works is it takes
the first value, and that becomes acc.

42
00:02:15.980 --> 00:02:16.880
Takes the second value and

43
00:02:16.880 --> 00:02:20.650
that becomes current, and runs them
through a function that combines them.

44
00:02:20.650 --> 00:02:23.896
And what do we gout when we take one and
two and add them together?

45
00:02:23.896 --> 00:02:28.560
We get three, and whatever comes out of
that function becomes acc the next time.

46
00:02:28.560 --> 00:02:31.040
And so we see this thing where
the value comes out of the function and

47
00:02:31.040 --> 00:02:33.530
then gets pumped back into the function,
right?

48
00:02:33.530 --> 00:02:36.550
And then we take the next value off,
which is three, and

49
00:02:36.550 --> 00:02:41.780
three plus three is six, and because
the stream is now ended, we get six.

50
00:02:41.780 --> 00:02:44.510
The only difference with
scan is that it gives us

51
00:02:44.510 --> 00:02:47.520
every intermediary value it passes as acc.

52
00:02:47.520 --> 00:02:50.690
So we get one, three, and six.

53
00:02:50.690 --> 00:02:51.480
Does that make sense?

54
00:02:52.630 --> 00:02:53.940
So we're going to use scan.

55
00:02:53.940 --> 00:02:55.220
Scan's super helpful.

56
00:02:55.220 --> 00:02:58.040
Oops, I should have written scan there.

57
00:02:58.040 --> 00:03:02.100
Scan's super helpful when
you want to count things or

58
00:03:02.100 --> 00:03:03.870
keep track of things, right?

59
00:03:03.870 --> 00:03:08.840
Imagine a progressively better standard
deviation over like a stalk string.

60
00:03:08.840 --> 00:03:14.310
You'd use scan in general when you
are working with an infinite string.

61
00:03:14.310 --> 00:03:16.113
Why wouldn't I use reduce for
an infinite string?

62
00:03:18.562 --> 00:03:19.630
&gt;&gt; Student3: It'll never finish?

63
00:03:19.630 --> 00:03:20.950
&gt;&gt; Jafar Husain: It will
never finish right?

64
00:03:20.950 --> 00:03:24.290
Because reduced only gives you a value
when it's gone through the entire stream.

65
00:03:24.290 --> 00:03:30.150
And so if I try and reduce Netflix's stock
price, I hope it'll never end, right?

66
00:03:30.150 --> 00:03:33.890
So fingers crossed.

67
00:03:33.890 --> 00:03:37.590
But if I wanted to get a gradually better
standard deviation over Netflix's stock

68
00:03:37.590 --> 00:03:39.050
price I could use scan,

69
00:03:39.050 --> 00:03:43.100
and then I'm just gonna get a gradually
better computation over time.

70
00:03:43.100 --> 00:03:47.430
So with these three functions in mind,
let's see if we can now, and

71
00:03:47.430 --> 00:03:51.360
the ones that you learned in the previous
class, things like switch map, concat all,

72
00:03:51.360 --> 00:03:54.720
these things, we're gonna now see if
we can tackle animations allowed.

73
00:03:54.720 --> 00:03:56.530
&gt;&gt; Student4: I have a quick question.

74
00:03:56.530 --> 00:03:57.940
&gt;&gt; Jafar Husain: Yeah.
&gt;&gt; Student4: In RX is there

75
00:03:57.940 --> 00:04:01.470
an operator that works like concat, but

76
00:04:01.470 --> 00:04:05.010
it doesn't wait for
the one to finish before the other one?

77
00:04:05.010 --> 00:04:06.010
&gt;&gt; Jafar Husain: Great question.

78
00:04:06.010 --> 00:04:06.970
Awesome question.

79
00:04:06.970 --> 00:04:09.790
Yes, there is, and it is merge.

80
00:04:09.790 --> 00:04:10.290
&gt;&gt; Student4: Okay.

81
00:04:11.940 --> 00:04:16.280
&gt;&gt; Jafar Husain: And
what we would get here,

82
00:04:16.280 --> 00:04:18.930
I'm gonna actually get the smallest one.

83
00:04:18.930 --> 00:04:21.592
To make things simpler.

84
00:04:33.303 --> 00:04:34.380
&gt;&gt; Jafar Husain: Make sense?

85
00:04:44.051 --> 00:04:45.039
&gt;&gt; Jafar Husain: Right?

86
00:04:45.039 --> 00:04:46.759
Now concat and merge and

87
00:04:46.759 --> 00:04:52.835
the cousins of the flattening operators
that we learned in the previous class.

88
00:04:52.835 --> 00:04:55.095
Does everybody remember
the flattening operators?

89
00:04:55.095 --> 00:04:58.540
There are three of them, and
they're really powerful because we

90
00:04:58.540 --> 00:05:03.490
can solve most concurrency problems
with these three flattening operators.

91
00:05:03.490 --> 00:05:06.050
The reason why we call them
flattening operators is they work on

92
00:05:06.050 --> 00:05:09.020
two dimensional observables like the tasks

93
00:05:09.020 --> 00:05:11.708
observable that we're working with
in the animationsAllowed example.

94
00:05:11.708 --> 00:05:14.848
So they are.

95
00:05:21.568 --> 00:05:25.110
&gt;&gt; Jafar Husain: I'm gonna do this
over here because Powerpoint coding is

96
00:05:25.110 --> 00:05:30.003
annoying, and we're gonna make
ourselves a two-dimensional observable.

97
00:05:42.575 --> 00:05:44.884
&gt;&gt; Jafar Husain: So
given this two-dimensional observable,

98
00:05:44.884 --> 00:05:46.310
there are three operators.

99
00:05:46.310 --> 00:05:49.470
Can anybody tell me what they are for
flattening two-dimensional observables?

100
00:05:49.470 --> 00:05:50.900
There's more, but
these are the most common.

101
00:05:52.560 --> 00:05:55.870
&gt;&gt; Student4: So
they accept the two-dimensional and

102
00:05:55.870 --> 00:05:57.110
then just flatten it slight?

103
00:05:57.110 --> 00:05:59.000
&gt;&gt; Jafar Husain: Flatten it down to one.

104
00:05:59.000 --> 00:06:00.370
&gt;&gt; Student5: flatMap is one of them.

105
00:06:00.370 --> 00:06:01.480
&gt;&gt; Jafar Husain: flatMap, yeah.

106
00:06:01.480 --> 00:06:03.590
Actually, flatMap's-
&gt;&gt; Student4: mergeMap?

107
00:06:03.590 --> 00:06:04.980
&gt;&gt; Jafar Husain: mergeMap, absolutely.

108
00:06:04.980 --> 00:06:07.869
They're slightly modified in
the sense that they're basically

109
00:06:09.130 --> 00:06:11.110
flattening the result of a map operation.

110
00:06:11.110 --> 00:06:14.120
So I'm talking about just the basic one
that just takes the two-dimensional,

111
00:06:14.120 --> 00:06:15.840
observable and flattens it down.

112
00:06:15.840 --> 00:06:17.040
You have one, which is merge.

113
00:06:17.040 --> 00:06:19.980
You have one, which is,
anyone want to yell it out?

114
00:06:19.980 --> 00:06:20.530
&gt;&gt; Student1: Concat.

115
00:06:20.530 --> 00:06:21.050
&gt;&gt; Jafar Husain: Concat.
And

116
00:06:22.140 --> 00:06:26.970
then finally you have the most
common operator used in the UIs.

117
00:06:26.970 --> 00:06:27.680
switchLatest.

118
00:06:29.090 --> 00:06:31.220
This is definitely worth reviewing.

119
00:06:31.220 --> 00:06:36.120
So anybody wanna guess what- Sorry
this is called mergeAll, concatAll.

120
00:06:37.240 --> 00:06:40.680
Anyone wanna guess what
mergeAll's gonna produce here,

121
00:06:40.680 --> 00:06:42.980
based on what merge produced a second ago?

122
00:06:42.980 --> 00:06:46.330
&gt;&gt; Student1: Five, five,
three, five, two, five.

123
00:06:46.330 --> 00:06:51.900
&gt;&gt; Jafar Husain: Five, five,
three, five, two, five.

124
00:06:51.900 --> 00:06:56.950
So merge is a lot like four, so
let's imagine there's some accident

125
00:06:56.950 --> 00:07:02.310
on the freeway and
three of four lanes are all used up.

126
00:07:02.310 --> 00:07:04.160
What happens, at least in a civil society?

127
00:07:06.300 --> 00:07:06.890
What do we do?

128
00:07:08.730 --> 00:07:11.260
Let's imagine each of these
as lanes of traffic, right?

129
00:07:11.260 --> 00:07:12.520
And you're all merging down to one.

130
00:07:13.580 --> 00:07:16.730
&gt;&gt; Student1: Trade off on which goes next.

131
00:07:16.730 --> 00:07:18.680
&gt;&gt; Jafar Husain: Well,
basically whoever gets there first, so

132
00:07:18.680 --> 00:07:21.080
that's one strategy if
you're bumper to bumper.

133
00:07:21.080 --> 00:07:24.390
But whoever gets there first,
in general, right, can make it through.

134
00:07:24.390 --> 00:07:26.400
So that's why we merge looks like this.

135
00:07:26.400 --> 00:07:27.645
So basically as soon as data comes,

136
00:07:27.645 --> 00:07:30.690
you subscribe to all of
the observables at the same time.

137
00:07:30.690 --> 00:07:33.950
So you remember what we did with concat,
the first thing we did that was wrong,

138
00:07:33.950 --> 00:07:36.870
which was we immediately
subscribed to all the observables?

139
00:07:36.870 --> 00:07:38.870
That's not wrong in merge,
that's exactly what you do.

140
00:07:38.870 --> 00:07:41.130
You subscribe to all those
observables at the same time.

141
00:07:41.130 --> 00:07:44.030
And then whenever any
of them gives you data,

142
00:07:44.030 --> 00:07:47.130
you just plummet through as soon as you
get data from any of the observables.

143
00:07:47.130 --> 00:07:49.740
So that's why we see that
when they flatten it down,

144
00:07:49.740 --> 00:07:52.860
they're all there in one stream in
the order on which the data arrives.

145
00:07:52.860 --> 00:07:55.760
Anyone wanna take a guess as
to what concatALL does though?

146
00:07:55.760 --> 00:07:57.277
Yeah?
&gt;&gt; Student4: It's gonna return the first

147
00:07:57.277 --> 00:08:01.810
observable five, three, two, and then it's
gonna return, once that's done it's gonna

148
00:08:01.810 --> 00:08:06.225
start on the second one, it's gonna return
five, five, and then once that's done it's

149
00:08:06.225 --> 00:08:07.690
gonna return the third-
&gt;&gt; Jafar Husain: Yes.

150
00:08:07.690 --> 00:08:08.190
&gt;&gt; Student4: Which is five.

151
00:08:11.336 --> 00:08:14.630
&gt;&gt; Jafar Husain: ConcatAll is
like the cousin of concat.

152
00:08:14.630 --> 00:08:19.360
Remember concat just takes two observables
or n observables and subscribes to one,

153
00:08:19.360 --> 00:08:23.720
and when one completes it subscribes to
the other one and so on and so forth.

154
00:08:23.720 --> 00:08:27.858
If you have a two-dimensional observable
what concatAll does is as soon as it gets

155
00:08:27.858 --> 00:08:30.740
an inner observable it subscribes to it,
and

156
00:08:30.740 --> 00:08:35.060
if it gets another inner observable while
it's still subscribed to the previous one,

157
00:08:35.060 --> 00:08:38.744
it doesn't subscribe to it it
just puts it into an array.

158
00:08:38.744 --> 00:08:44.350
And then when this one completes, then and
only then, does it subscribe to this one.

159
00:08:44.350 --> 00:08:48.230
And that's why, incidentally,
we see this little time elongation here.

160
00:08:49.470 --> 00:08:54.750
Notice that these three dots don't even
start because this is a cold observable.

161
00:08:54.750 --> 00:08:56.900
It's not gonna even start
producing the data or

162
00:08:56.900 --> 00:08:59.220
doing the work until we
call subscribe on it.

163
00:08:59.220 --> 00:09:01.690
And so concatAll has the effect

164
00:09:01.690 --> 00:09:04.870
of lengthening the observable
when we flatten it down.

165
00:09:04.870 --> 00:09:05.750
Does that make sense?

166
00:09:05.750 --> 00:09:08.160
So it's as if we took
every inner observable and

167
00:09:08.160 --> 00:09:10.620
we just put it near the end of each other.

168
00:09:11.900 --> 00:09:18.809
And this one is, by far, the most common
operator used in UIs, switchLatest.

169
00:09:22.239 --> 00:09:24.490
&gt;&gt; Jafar Husain: Anybody wanna tell me
what you think this is gonna output?

170
00:09:24.490 --> 00:09:26.480
&gt;&gt; Student4: Give yellow fives?

171
00:09:26.480 --> 00:09:27.240
&gt;&gt; Jafar Husain: All fives.

172
00:09:28.700 --> 00:09:31.998
As a matter of fact it will.

173
00:09:31.998 --> 00:09:37.542
I keep forgetting to uninstall that thing.

174
00:09:37.542 --> 00:09:41.219
It will give you five,
you know, I'm not sure,

175
00:09:41.219 --> 00:09:45.530
you might actually be right
I'm trying to figure it out.

176
00:09:45.530 --> 00:09:46.279
I think you are right.

177
00:09:47.950 --> 00:09:48.530
Well done, sir.

178
00:09:48.530 --> 00:09:50.060
I think it will give you all fives.

179
00:09:51.130 --> 00:09:51.740
Yes.

180
00:09:51.740 --> 00:09:53.100
Isn't that weird?

181
00:09:53.100 --> 00:09:57.470
Why does it give you that?

182
00:09:57.470 --> 00:10:00.363
&gt;&gt; Student1: Because when a new observable
comes along even though it's still going

183
00:10:00.363 --> 00:10:01.750
on with the-
&gt;&gt; Jafar Husain: You know what,

184
00:10:01.750 --> 00:10:02.370
I made a mistake.

185
00:10:02.370 --> 00:10:03.920
Sorry to interrupt you.

186
00:10:03.920 --> 00:10:04.900
One less five here.

187
00:10:06.300 --> 00:10:07.860
No, no, sorry never mind I was right.

188
00:10:07.860 --> 00:10:08.700
Go ahead you were saying.

189
00:10:09.830 --> 00:10:12.780
&gt;&gt; Student1: So
whenever a new data stream comes in or

190
00:10:12.780 --> 00:10:17.560
whenever a new observable comes in
it'll stop at whatever one it's on.

191
00:10:17.560 --> 00:10:19.180
It only cares about updated data.

192
00:10:19.180 --> 00:10:20.130
&gt;&gt; Jafar Husain: And how's it gonna stop?

193
00:10:22.220 --> 00:10:24.490
Under the hood what-
&gt;&gt; Student1: Well I mean,

194
00:10:24.490 --> 00:10:27.120
it's just gonna switch over to-
&gt;&gt; Jafar Husain: Switch over?

195
00:10:27.120 --> 00:10:32.120
And if we were to go over and
implement switchLatest right now, and

196
00:10:32.120 --> 00:10:33.300
this is a threat.

197
00:10:33.300 --> 00:10:38.080
So you can tell me the answer or I'll have
to go and format it, nobody wants that.

198
00:10:38.080 --> 00:10:40.950
What's it gonna do under
the hood to that observable

199
00:10:40.950 --> 00:10:42.510
in order to stop getting data from it.

200
00:10:44.480 --> 00:10:45.700
VS, which latest operator.

201
00:10:45.700 --> 00:10:48.880
So it gets this int or observable,
you're 100% right, it subscribes to it.

202
00:10:48.880 --> 00:10:51.910
And then when another inner
observable comes along,

203
00:10:51.910 --> 00:10:54.440
how's it gonna make sure it doesn't
get any data from that previous one?

204
00:10:54.440 --> 00:10:55.193
What's gonna stop it?

205
00:10:55.193 --> 00:10:56.313
&gt;&gt; Student1: [CROSSTALK] and subscribe.
&gt;&gt; Jafar Husain: Subscribe,

206
00:10:56.313 --> 00:10:57.555
absolutely, right?

207
00:10:57.555 --> 00:10:59.186
&gt;&gt; Student4: Wouldn't
there be four fives then?

208
00:11:01.000 --> 00:11:04.210
&gt;&gt; Jafar Husain: Good question,
why is there not four fives?

209
00:11:04.210 --> 00:11:06.481
&gt;&gt; Student5: Because the second observable
started being subscribed to before

210
00:11:06.481 --> 00:11:07.622
the first was able to [CROSSTALK].

211
00:11:07.622 --> 00:11:11.600
&gt;&gt; Jafar Husain: Right, we don't switch
when we get the first piece of data,

212
00:11:11.600 --> 00:11:16.358
we switch when we get a new observable,
and so we never got an opportunity

213
00:11:16.358 --> 00:11:20.960
to get this five because right here,
another observable came along.

214
00:11:20.960 --> 00:11:21.820
Good call man.

215
00:11:23.410 --> 00:11:31.030
So, now why is switchLatest the most
commonly used operator on UIs?

216
00:11:31.030 --> 00:11:31.560
Sorry?

217
00:11:31.560 --> 00:11:33.280
&gt;&gt; Student4: That's how
the user interfaces work?

218
00:11:33.280 --> 00:11:36.840
&gt;&gt; Jafar Husain: Yeah, the users change
their mind and most of the time,

219
00:11:36.840 --> 00:11:39.180
you don't care about the last
thing they told you to do.

220
00:11:39.180 --> 00:11:42.410
If the new thing they told you
to do supersedes that, right?

221
00:11:42.410 --> 00:11:44.450
We see it all the time in UIs.

222
00:11:44.450 --> 00:11:45.790
I open up a forum.

223
00:11:45.790 --> 00:11:47.930
You start loading data,
and I show a loading bar.

224
00:11:47.930 --> 00:11:50.240
In the meantime the user hits Back.

225
00:11:50.240 --> 00:11:53.240
Do I want to get the results of
the network request anymore?

226
00:11:53.240 --> 00:11:53.840
Nope.

227
00:11:53.840 --> 00:11:57.860
In fact, if I didn't guard against getting
the result of that network request,

228
00:11:57.860 --> 00:11:59.390
bad stuff might really happen, right?

229
00:11:59.390 --> 00:12:02.270
Somebody might go back and
then we might try and load the data,

230
00:12:02.270 --> 00:12:04.390
the DOM elements from the previous form.

231
00:12:04.390 --> 00:12:08.130
It is very, very important to
avoid this race condition in UIs.

232
00:12:08.130 --> 00:12:11.965
And so it is a good heuristic if you're
wondering what flattening operator to use,

233
00:12:11.965 --> 00:12:16.280
right, until you really got
the solid fundamentals,

234
00:12:16.280 --> 00:12:19.630
a good first guess is switchLatest
if you're on a UI, right?

