WEBVTT

1
00:00:00.250 --> 00:00:02.400
&gt;&gt; Speaker 1: So I think we're
actually in good shape now for it,

2
00:00:02.400 --> 00:00:07.040
if we can live with the browser's
ugly missing image icon.

3
00:00:07.040 --> 00:00:09.019
I think we're actually
in pretty decent shape.

4
00:00:13.684 --> 00:00:18.110
&gt;&gt; Speaker 1: And so hopefully if I press
Next, we might get a real image this time.

5
00:00:18.110 --> 00:00:19.700
Ooh, what happened?

6
00:00:19.700 --> 00:00:21.105
We're not quite where we wanna be.

7
00:00:23.353 --> 00:00:27.481
&gt;&gt; Speaker 1: [LAUGH] I think it's that
I'm setting the loading style to visible,

8
00:00:27.481 --> 00:00:32.100
when they are, I'm setting,
actually, visibility to hidden here.

9
00:00:32.100 --> 00:00:33.688
I'm not sure why that's not going away,
let's see.

10
00:00:39.575 --> 00:00:40.840
&gt;&gt; Speaker 1: I know why.

11
00:00:40.840 --> 00:00:44.683
It's the order in which I subscribe,
possibly.

12
00:00:50.959 --> 00:00:52.620
&gt;&gt; Speaker 1: Does anybody
see what's going on here?

13
00:00:53.660 --> 00:00:57.394
I'm subscribing to actions after images,
and

14
00:00:57.394 --> 00:01:03.276
it's possible I'm actually getting
the images [LAUGH] after the actions,

15
00:01:03.276 --> 00:01:07.305
but that's another good
thing to talk about here.

16
00:01:07.305 --> 00:01:09.852
So I'm gonna reverse this just to
make sure that that's the issue, but

17
00:01:09.852 --> 00:01:12.409
then we'll talk about a more robust
way of making that work correctly.

18
00:01:12.409 --> 00:01:13.217
&gt;&gt; Speaker 2: Quick question.

19
00:01:13.217 --> 00:01:14.760
&gt;&gt; Speaker 1: Yeah.

20
00:01:14.760 --> 00:01:19.727
&gt;&gt; Speaker 2: In your
preload images function,

21
00:01:19.727 --> 00:01:25.120
you have the image, img, right?

22
00:01:25.120 --> 00:01:26.010
&gt;&gt; Speaker 1: Yeah.

23
00:01:26.010 --> 00:01:32.564
&gt;&gt; Speaker 2: But also at the top of
your script, don't you have another one?

24
00:01:32.564 --> 00:01:33.535
&gt;&gt; Speaker 1: Where?

25
00:01:33.535 --> 00:01:34.780
I see what you're saying here.

26
00:01:34.780 --> 00:01:40.578
I don't think that's the problem,
because this should mask the global scope,

27
00:01:40.578 --> 00:01:43.656
but that's a totally valid observation.

28
00:01:43.656 --> 00:01:46.020
I'm pretty sure that's not-
&gt;&gt; Speaker 2: Lexical scope, are they not?

29
00:01:46.020 --> 00:01:48.810
&gt;&gt; Speaker 1: Yeah, yeah, so
I'm pretty sure that's not the problem.

30
00:01:48.810 --> 00:01:54.090
I'd be suspicious, too, but the fact
that it's defined more at lexical scope,

31
00:01:54.090 --> 00:01:59.130
then I'm not gonna be able to hit the one
in the global object, but we can try it.

32
00:01:59.130 --> 00:02:02.064
Who knows, weirder things have happened.

33
00:02:02.064 --> 00:02:05.613
But let's come back to that one, and just
make sure we get the, why don't we try and

34
00:02:05.613 --> 00:02:08.556
just make sure we get this example
working and then we can come back and

35
00:02:08.556 --> 00:02:09.606
try the preload image.

36
00:02:09.606 --> 00:02:10.912
&gt;&gt; Speaker 2: Sure.

37
00:02:10.912 --> 00:02:15.124
&gt;&gt; Speaker 1: So I think,
let me remove these annoying debuggers.

38
00:02:29.694 --> 00:02:31.047
&gt;&gt; Speaker 1: All right.

39
00:02:31.047 --> 00:02:33.354
So, we have an image viewer.

40
00:02:33.354 --> 00:02:35.297
Well, actually I don't
know if back will work.

41
00:02:35.297 --> 00:02:36.400
Okay.

42
00:02:36.400 --> 00:02:40.290
It seems to be working,
it seems to be working.

43
00:02:40.290 --> 00:02:41.621
What if I switch to this?

44
00:02:46.336 --> 00:02:49.840
&gt;&gt; Speaker 1: Well, okay,
got a few broken images in there, but.

45
00:02:49.840 --> 00:02:51.299
&gt;&gt; Speaker 2: What if you refresh and
press back?

46
00:02:52.450 --> 00:02:54.190
&gt;&gt; Speaker 1: Refresh and press back.

47
00:02:54.190 --> 00:02:54.756
&gt;&gt; Speaker 2: Yep.

48
00:02:54.756 --> 00:02:55.470
&gt;&gt; Speaker 1: As in?

49
00:02:55.470 --> 00:02:57.825
&gt;&gt; Speaker 2: Index negative 1, yep.

50
00:02:57.825 --> 00:02:58.640
&gt;&gt; Speaker 1: You mean like?

51
00:02:58.640 --> 00:03:00.069
&gt;&gt; Speaker 2: Refresh the page.

52
00:03:00.069 --> 00:03:01.930
&gt;&gt; Speaker 1: Reload.

53
00:03:01.930 --> 00:03:05.240
&gt;&gt; Speaker 2: And
now press the back button.

54
00:03:05.240 --> 00:03:07.010
&gt;&gt; Speaker 1: Yeah, that's a good point,
what's gonna happen?

55
00:03:08.200 --> 00:03:09.025
&gt;&gt; Speaker 2: Exception.

56
00:03:09.025 --> 00:03:11.920
&gt;&gt; Speaker 1: Well, technically,
I think it's actually a, it's working,

57
00:03:11.920 --> 00:03:14.868
it's just a broken,
cuz we're not doing the preloading status,

58
00:03:14.868 --> 00:03:17.993
it's just a broken image, but
it's gonna go off the end of the array.

59
00:03:17.993 --> 00:03:25.451
So we don't want that, but I think there's
also a more serious problem than that,

60
00:03:25.451 --> 00:03:30.989
which is, if I go to cute, and
I go next, next, next, next,

61
00:03:30.989 --> 00:03:36.170
next, and I switch to pics,
what index am I gonna be at?

62
00:03:36.170 --> 00:03:38.190
&gt;&gt; Speaker 2: Whatever
index you're in that time.

63
00:03:38.190 --> 00:03:40.400
&gt;&gt; Speaker 1: Sure, I'm not actually
sure that's true, but let's find out.

64
00:03:41.520 --> 00:03:43.170
So it's a thing to be worried about,
right?

65
00:03:43.170 --> 00:03:45.383
We probably wanna restart index at zero.

66
00:03:45.383 --> 00:03:47.799
Let's find out if we are actually
gonna restart at index zero.

67
00:03:51.120 --> 00:03:53.992
What's our intuition here?

68
00:03:53.992 --> 00:03:54.580
Where is it?

69
00:03:54.580 --> 00:03:56.954
I lost the code.

70
00:03:56.954 --> 00:03:58.329
It's so small I lost it.

71
00:03:58.329 --> 00:03:59.360
There we go.

72
00:03:59.360 --> 00:04:00.560
That's pretty good.

73
00:04:01.980 --> 00:04:06.848
Are we actually gonna restart?

74
00:04:06.848 --> 00:04:14.014
Are we gonna be at the same index we were,
knowing that indices is defined up here?

75
00:04:20.671 --> 00:04:21.575
&gt;&gt; Speaker 1: Sorry, bear with me.

76
00:04:24.365 --> 00:04:29.173
&gt;&gt; Speaker 1: All right, preloadImage,
syntax highlighting is broken there but.

77
00:04:31.210 --> 00:04:32.162
&gt;&gt; Speaker 1: Does everybody see that?

78
00:04:32.162 --> 00:04:32.994
What do we think?

79
00:04:32.994 --> 00:04:37.012
Am I gonna be at index zero,
one, two, what am I gonna be at?

80
00:04:40.210 --> 00:04:41.520
&gt;&gt; Speaker 2: When you switch the sub?

81
00:04:41.520 --> 00:04:43.560
&gt;&gt; Speaker 1: Yeah, when I switch the sub.

82
00:04:43.560 --> 00:04:46.810
&gt;&gt; Speaker 2: I'm assuming you'd
be at whatever indice you left at?

83
00:04:46.810 --> 00:04:49.489
&gt;&gt; Speaker 1: Still be at whatever
indice I'd be left at, interesting.

84
00:04:50.520 --> 00:04:53.087
Everybody agree with that?

85
00:04:57.852 --> 00:05:00.210
&gt;&gt; Speaker 1: Let's say I
subscribe once to indices.

86
00:05:00.210 --> 00:05:02.220
I'm gonna start out with a zero, right?

87
00:05:03.740 --> 00:05:06.790
And then if somebody hits left, right,
left, right, left, right, left,

88
00:05:06.790 --> 00:05:09.400
right, or right 15 times, and

89
00:05:09.400 --> 00:05:13.870
then I resubscribe the indices, what's the
first thing that's gonna hop out of there?

90
00:05:15.330 --> 00:05:16.570
&gt;&gt; Speaker 2: Still be zero?

91
00:05:16.570 --> 00:05:17.430
&gt;&gt; Speaker 1: It'll be zero.

92
00:05:17.430 --> 00:05:20.200
&gt;&gt; Speaker 2: Did each of
the subs subscribe idices so

93
00:05:20.200 --> 00:05:23.570
that your subs are gonna maintain
the indice that you are on?

94
00:05:23.570 --> 00:05:27.220
&gt;&gt; Speaker 1: Because we return
these indices observable, right?

95
00:05:27.220 --> 00:05:31.874
And then each one, everytime a new sub
comes along, and then somebody comes

96
00:05:31.874 --> 00:05:36.383
along and subscribes the indices again
Because indices is gonna be lazy,

97
00:05:36.383 --> 00:05:40.478
every single subscription is gonna
start its own counter at zero.

98
00:05:40.478 --> 00:05:41.006
Does that make sense?

99
00:05:41.006 --> 00:05:44.918
&gt;&gt; Speaker 2: When you click from cute
to pics back to cute you're on the same

100
00:05:44.918 --> 00:05:47.036
indice you left cute on, right?

101
00:05:47.036 --> 00:05:47.940
&gt;&gt; Speaker 1: No actually.

102
00:05:47.940 --> 00:05:49.700
&gt;&gt; Speaker 2: No.
&gt;&gt; Speaker 1: I'd start back at zero.

103
00:05:49.700 --> 00:05:50.713
&gt;&gt; Speaker 2: Start back at zero again?

104
00:05:50.713 --> 00:05:52.100
&gt;&gt; Speaker 1: Yeah.

105
00:05:52.100 --> 00:05:55.532
If we wanted that behavior we
could do something about it, but

106
00:05:55.532 --> 00:05:59.495
this goes back to why we started by
implementing observable bottom up.

107
00:05:59.495 --> 00:06:03.237
It's if we were to go and implement
scan right now, the first accumulator,

108
00:06:03.237 --> 00:06:06.336
if somebody subscribed we'd just
on next them that value, but

109
00:06:06.336 --> 00:06:11.060
then the next person who subscribes we're
going to on next them zero all over again.

110
00:06:11.060 --> 00:06:13.720
Every subscription gets its own counter,
and so

111
00:06:13.720 --> 00:06:15.798
that's why we're actually gonna
start from zero every time.

112
00:06:15.798 --> 00:06:18.667
Cool?

113
00:06:18.667 --> 00:06:22.673
Is there,
now we did go off the end of the array.

114
00:06:22.673 --> 00:06:24.030
Let's see if we can do better.

115
00:06:24.030 --> 00:06:25.827
How do I avoid going off
the end of the array?

116
00:06:34.331 --> 00:06:35.033
&gt;&gt; Speaker 1: Should I index suggest?

117
00:06:35.033 --> 00:06:35.641
&gt;&gt; Speaker 2: You do a check.

118
00:06:35.641 --> 00:06:37.010
You're gonna have to do-
&gt;&gt; Speaker 1: I could check?

119
00:06:37.010 --> 00:06:37.690
&gt;&gt; Speaker 2: Yeah.

120
00:06:37.690 --> 00:06:42.160
&gt;&gt; Speaker 1: Yeah?
&gt;&gt; Speaker 2: To see if it-

121
00:06:42.160 --> 00:06:44.691
&gt;&gt; Speaker 1: Well this is a PM question,

122
00:06:44.691 --> 00:06:48.550
how do we want the application to behave?

123
00:06:48.550 --> 00:06:51.105
&gt;&gt; Speaker 2: You've gotta
do it on the indices, right,

124
00:06:51.105 --> 00:06:55.592
because if you do it in the subs sure
you're never gonna load the wrong image,

125
00:06:55.592 --> 00:06:59.343
but your indices are still gonna
moving in the wrong direction.

126
00:06:59.343 --> 00:07:02.897
&gt;&gt; Speaker 1: Well, on the right index
the right bounds for the index depends on

127
00:07:02.897 --> 00:07:07.890
the size of this images array, which
is different for different subs, right?

128
00:07:07.890 --> 00:07:12.550
So we can do the simple thing, which is
to just filter out invalid indices, so

129
00:07:12.550 --> 00:07:16.680
if somebody hits back on zero, and we see
negative one, we can just filter it out.

130
00:07:16.680 --> 00:07:20.970
In other words, back would basically
stop working when you got to the edge.

131
00:07:20.970 --> 00:07:22.650
I'm fine for that for a first pass.

132
00:07:22.650 --> 00:07:25.651
We're not gonna ship this at
the end of the class, but

133
00:07:25.651 --> 00:07:29.986
we can also try I think the behavior that
a lot of us would find more intuitive,

134
00:07:29.986 --> 00:07:31.672
which is the old wraparound.

135
00:07:31.672 --> 00:07:34.520
So do we wanna start by just
filtering out invalid indices?

136
00:07:34.520 --> 00:07:36.251
How are we gonna do it?

137
00:07:41.102 --> 00:07:44.784
&gt;&gt; Speaker 2: Just do a filter for
indices less than zero.

138
00:07:51.299 --> 00:07:54.260
&gt;&gt; Speaker 1: What else is invalid?

139
00:07:54.260 --> 00:07:56.655
&gt;&gt; Speaker 2: Greater than the length.

140
00:07:57.806 --> 00:07:59.780
&gt;&gt; Speaker 2: Equal to the length,
equal or greater than.

141
00:07:59.780 --> 00:08:02.703
&gt;&gt; Speaker 1: Yeah, I think it's actually
we wanna go the other way, right?

142
00:08:10.692 --> 00:08:14.303
&gt;&gt; Speaker 1: Cool, now we shouldn't
go off the edge anymore, and

143
00:08:14.303 --> 00:08:18.490
you guys can probably figure
out how we'd do the wraparound.

144
00:08:18.490 --> 00:08:19.510
It involves math.

145
00:08:19.510 --> 00:08:21.440
Nobody likes that, but
it's pretty straightforward.

146
00:08:24.573 --> 00:08:27.576
&gt;&gt; Speaker 1: So it's too bad we couldn't
get the preload image working, but

147
00:08:27.576 --> 00:08:30.130
I think you guys saw
how that is structured.

148
00:08:30.130 --> 00:08:34.126
We just keep going another map, we create
another level, and then we switch back,

149
00:08:34.126 --> 00:08:37.895
and so if every single time we increase
the dimensionality of the observable,

150
00:08:37.895 --> 00:08:41.343
we apply switch to it, we know we've
never gotten the erased edition.

151
00:08:41.343 --> 00:08:42.785
So if somebody hits next, next,

152
00:08:42.785 --> 00:08:45.307
next, we're not gonna be in
preloading five images, and

153
00:08:45.307 --> 00:08:48.510
then the fastest image to preload wins,
not the last image bay selected.

154
00:08:50.440 --> 00:08:52.952
So does that make sense, guys?

155
00:08:52.952 --> 00:08:56.600
So that was the last exercise I had for
today.

156
00:08:56.600 --> 00:08:59.110
We built ourselves a litter
Reddit image viewer.

157
00:08:59.110 --> 00:09:02.404
I was gonna open it up for some questions,
because we've got about half an hour left.

158
00:09:02.404 --> 00:09:05.958
Was there anything actually we wanted
to learn about that we didn't get

159
00:09:05.958 --> 00:09:06.854
a chance, yeah?

160
00:09:06.854 --> 00:09:09.808
&gt;&gt; Speaker 2: Can we just try
the preloader again, but just change the-

161
00:09:09.808 --> 00:09:10.391
&gt;&gt; Speaker 1: Yeah.

162
00:09:10.391 --> 00:09:12.935
&gt;&gt; Speaker 2: Name of the img variable?

163
00:09:12.935 --> 00:09:14.423
&gt;&gt; Speaker 1: Yeah, let's try it.
Let's rule that one out.

164
00:09:14.423 --> 00:09:18.761
&gt;&gt; Speaker 2: I think it was
trying to use that, the dom img.

165
00:09:18.761 --> 00:09:20.361
&gt;&gt; Speaker 1: Yeah, absolutely.

166
00:09:20.361 --> 00:09:23.342
At the very least,
we can put this back, put it back in.

167
00:09:23.342 --> 00:09:26.748
&gt;&gt; Speaker 2: In the chat it seems
like they figured something out.

168
00:09:26.748 --> 00:09:27.996
&gt;&gt; Speaker 2: They didn't post the code,
but.

169
00:09:32.557 --> 00:09:33.661
&gt;&gt; Speaker 2: If you could
post the code that would help.

170
00:09:33.661 --> 00:09:37.134
&gt;&gt; Speaker 1: Source after on error.

171
00:09:37.134 --> 00:09:41.233
I don't think you set the source, so
it's a totally reasonable question,

172
00:09:41.233 --> 00:09:44.177
which is should you set
the source after the on air, and

173
00:09:44.177 --> 00:09:47.079
isn't that a problem after
attaching the variable?

174
00:09:47.079 --> 00:09:52.584
I don't believe that's a problem,
because in JavaScript we don't give up

175
00:09:52.584 --> 00:09:57.672
control of the thread until our block
of code has finished executing.

176
00:09:57.672 --> 00:10:01.523
So newing up the image and
setting it in the constructor,

177
00:10:01.523 --> 00:10:05.547
it's not gonna suddenly erase and
then try and fire on air.

178
00:10:05.547 --> 00:10:09.071
The one question I have is, does it
actually go in the constructor, and

179
00:10:09.071 --> 00:10:09.848
you know what?

180
00:10:09.848 --> 00:10:11.353
That might be what's going on here.

181
00:10:11.353 --> 00:10:14.500
I think I passed it in the constructor
instead of assigning it to the source

182
00:10:14.500 --> 00:10:15.126
properties.

183
00:10:15.126 --> 00:10:16.138
So let's try that now.

184
00:10:20.608 --> 00:10:21.236
&gt;&gt; Speaker 1: See that?

185
00:10:21.236 --> 00:10:22.358
I put it under constructor.

186
00:10:32.118 --> 00:10:37.016
&gt;&gt; Speaker 1: Now it's
interesting to note that,

187
00:10:37.016 --> 00:10:42.072
have I created a hot observable here?

188
00:10:42.072 --> 00:10:47.480
Notice that I'm doing work before
someone subscribes to this observable.

189
00:10:49.440 --> 00:10:52.944
Remember when we re-ordered that initial
function and map, I think it was map,

190
00:10:52.944 --> 00:10:55.900
or it was set time out where we
kicked off the set time out and

191
00:10:55.900 --> 00:10:57.810
then we returned the observable?

192
00:10:57.810 --> 00:11:01.240
The danger there is that somebody's going
to subscribe that observable too late and

193
00:11:01.240 --> 00:11:03.240
they're going to miss the time out.

194
00:11:03.240 --> 00:11:06.990
And that is technically, in practice
it's not really gonna happen here, but

195
00:11:06.990 --> 00:11:09.980
there is, it's worth noting that this
is generally something you want to

196
00:11:09.980 --> 00:11:12.460
avoid doing, cuz I've created erace here.

197
00:11:12.460 --> 00:11:17.128
In practice, we're gonna subscribe to this
observable immediately, so we're not gonna

198
00:11:17.128 --> 00:11:21.187
miss the message, but in general, this is
a bad idea, and if I subscribe to this

199
00:11:21.187 --> 00:11:25.635
same observable five times, I'm not gonna
try and preload the image five times also.

200
00:11:25.635 --> 00:11:26.979
You notice that, right?

201
00:11:26.979 --> 00:11:29.108
That's not gonna behave that way.

202
00:11:29.108 --> 00:11:30.970
Maybe I want that,
maybe I don't want that.

203
00:11:30.970 --> 00:11:32.930
I probably don't want that in this case,
but

204
00:11:32.930 --> 00:11:36.630
in general, you should be very
careful if you're kicking off work and

205
00:11:36.630 --> 00:11:40.660
then returning an observable, because if
that work is gonna cause the observable to

206
00:11:40.660 --> 00:11:44.900
fire, you've created a race,
you've created an observable that's hot.

207
00:11:44.900 --> 00:11:47.423
How do we make sure that all of this work,

208
00:11:47.423 --> 00:11:52.399
that the work that actually happens to
kick off the work behind the observable,

209
00:11:52.399 --> 00:11:55.978
fires every single time
somebody calls subscribe on it?

210
00:11:58.142 --> 00:12:01.225
&gt;&gt; Speaker 1: Well, we could write
our own definition of subscribe,

211
00:12:01.225 --> 00:12:04.111
like make our own observable
like we did before, but

212
00:12:04.111 --> 00:12:08.112
there's actually a function that
allows us to encapsulate this pattern

213
00:12:08.112 --> 00:12:12.834
of waiting until subscribe is called to do
the work associated with that observable,

214
00:12:12.834 --> 00:12:17.590
and it's very simple, it's called
Observable.defer, because we defer work.

215
00:12:17.590 --> 00:12:23.827
So instead of doing this
work as soon as the function

216
00:12:23.827 --> 00:12:30.181
starts,
&gt;&gt; Speaker 1: You can call defer and

217
00:12:30.181 --> 00:12:31.546
pass in a function, and

218
00:12:31.546 --> 00:12:36.280
the contents of this function is gonna run
every single time subscribe is called.

219
00:12:36.280 --> 00:12:39.352
So this is almost like defining our own
subscribe, it's just a little bit simpler.

220
00:12:39.352 --> 00:12:43.933
The difference is, when this function
runs, we're gonna do all this work,

221
00:12:43.933 --> 00:12:47.535
set all this stuff up every
single time subscribe is called.

222
00:12:47.535 --> 00:12:51.042
It's only that this is gonna
run when subscribe is called.

223
00:12:51.042 --> 00:12:54.786
The last thing you do is you
actually return the observable and

224
00:12:54.786 --> 00:12:57.378
then defer subscribe to that observable.

225
00:12:57.378 --> 00:13:02.030
So it's sort of like taking an observable
and instead making an observable factory.

226
00:13:02.030 --> 00:13:05.110
It still looks like an observable
from the outside, but inside,

227
00:13:05.110 --> 00:13:08.918
whenever you subscribe to it, it's
creating a new observable internally, and

228
00:13:08.918 --> 00:13:11.056
then forwarding your subscription to that.

229
00:13:11.056 --> 00:13:12.330
Does that make sense?

230
00:13:12.330 --> 00:13:16.850
So it's kind of like an easier solution
than writing our own subscribe function.

231
00:13:16.850 --> 00:13:20.964
It's simpler, we just sort of do
a bunch of initialization work,

232
00:13:20.964 --> 00:13:25.666
and then we return an observable, and
that happens on every subscription,

233
00:13:25.666 --> 00:13:27.875
not on every call to preLoadImage.

234
00:13:27.875 --> 00:13:31.309
So in this case, this would be
the fastidious way of solving this problem

235
00:13:31.309 --> 00:13:33.350
that makes sure we don't have any erases.

236
00:13:33.350 --> 00:13:37.110
We're not gonna even begin to preload
until somebody calls subscribe.

237
00:13:37.110 --> 00:13:38.860
Is that clear how that works?

238
00:13:38.860 --> 00:13:39.430
Right?

239
00:13:39.430 --> 00:13:43.490
Is it clear why if we would've begun
the work of preloading before subscribe

240
00:13:43.490 --> 00:13:46.520
was called on observable before, and
now that's not the case anymore,

241
00:13:46.520 --> 00:13:48.140
because of the way defer works?

242
00:13:48.140 --> 00:13:50.971
It defers the work of
setting up a subscription

243
00:13:50.971 --> 00:13:53.810
until subscribe is called
on the observable.

244
00:13:53.810 --> 00:13:57.149
So now we've made an observable without
any raciness associated with it, and

245
00:13:57.149 --> 00:14:00.650
I think this time I'm feeling good about
it, I think we're gonna get it working.

246
00:14:00.650 --> 00:14:02.728
So let's put back in
our preload code here.

247
00:14:07.818 --> 00:14:11.131
&gt;&gt; Speaker 1: So my goal is to hopefully
get the entire solution of this problem,

248
00:14:11.131 --> 00:14:13.321
at least the main
solution of this problem,

249
00:14:13.321 --> 00:14:15.113
on one very high font sized screen.

250
00:14:15.113 --> 00:14:17.430
So let's see if we can make that work.

251
00:14:17.430 --> 00:14:18.995
So here I'm gonna map over.

252
00:14:18.995 --> 00:14:20.463
Remember over here,

253
00:14:20.463 --> 00:14:25.230
this smaller sub observable here
are all of the images coming out.

254
00:14:25.230 --> 00:14:27.663
This is this a flat stream of URLs.

255
00:14:27.663 --> 00:14:33.098
So we're gonna map over it, and
we're gonna call preLoadImage(url),

256
00:14:33.098 --> 00:14:37.771
and we can just be clever and
just shorten that to preLoadImage.

257
00:14:37.771 --> 00:14:41.213
And we're also gonna switch,
right, because [LAUGH] switch, for

258
00:14:41.213 --> 00:14:45.085
the reason we said, which is if somebody
hits next for the next five times,

259
00:14:45.085 --> 00:14:49.265
and we begin preloading five images,
we want the last image that they selected,

260
00:14:49.265 --> 00:14:52.647
not the last image that happens
to preload, finish preloading,

261
00:14:52.647 --> 00:14:57.030
or the first image, excuse me,
that happens to, or last image.

262
00:14:57.030 --> 00:15:02.414
So I'm seeing some weird syntax coloring,
but I think that's

263
00:15:02.414 --> 00:15:07.222
actually just a bug in Adam, because-
&gt;&gt; Speaker 2: It might be that last

264
00:15:07.222 --> 00:15:08.333
print on 76.

265
00:15:08.333 --> 00:15:10.013
&gt;&gt; Speaker 1: Maybe you're right, yes.

266
00:15:10.013 --> 00:15:12.091
&gt;&gt; Speaker 2: I'm running
into the same thing on Adam.

267
00:15:12.091 --> 00:15:12.908
&gt;&gt; Speaker 1: You are?

268
00:15:12.908 --> 00:15:14.650
Interesting.

269
00:15:14.650 --> 00:15:17.458
But you were right,
I think that last print on 76 was wrong.

270
00:15:20.432 --> 00:15:24.730
&gt;&gt; Speaker 1: And all of this, we create
this observable of images that have been

271
00:15:24.730 --> 00:15:28.954
preloaded, and are selected when
somebody moves their mouse for

272
00:15:28.954 --> 00:15:31.960
every single time we get a new sub.

273
00:15:31.960 --> 00:15:34.090
We begin this process again.

274
00:15:34.090 --> 00:15:35.953
So fingers crossed, guys.

275
00:15:39.139 --> 00:15:41.038
&gt;&gt; Speaker 1: Do I have
a debugger statement open here?

276
00:15:46.372 --> 00:15:49.192
&gt;&gt; Speaker 2: I think there's
an error in your console log.

277
00:15:49.192 --> 00:15:50.542
&gt;&gt; Speaker 1: There is, thank you.

278
00:15:52.958 --> 00:15:53.533
&gt;&gt; Speaker 1: Uh-oh.

279
00:15:55.827 --> 00:15:57.476
&gt;&gt; Speaker 1: I probably
have an unopened comment.

280
00:15:59.908 --> 00:16:01.274
&gt;&gt; Speaker 2: At the end of preload image.

281
00:16:01.274 --> 00:16:01.978
&gt;&gt; Speaker 1: Yeah, thank you.

282
00:16:14.251 --> 00:16:16.995
&gt;&gt; Speaker 1: So we know that
the first time that, let's put the,

283
00:16:16.995 --> 00:16:20.111
let's try out this fancy new
hotness from Chrome, shall we?

284
00:16:20.111 --> 00:16:22.690
See if we get in there.

285
00:16:22.690 --> 00:16:24.377
No.
So close.

286
00:16:24.377 --> 00:16:26.442
Let's see if we actually
even got into preLoadImage.

287
00:16:33.262 --> 00:16:34.360
&gt;&gt; Speaker 1: Nope.

288
00:16:34.360 --> 00:16:41.624
I'm not sure what I did to change that,
but it feels like we should be in there.

289
00:16:41.624 --> 00:16:46.273
&gt;&gt; Speaker 2: Keeping with the same
defer pattern in preload image,

290
00:16:46.273 --> 00:16:51.325
could we try observable from promise,
and then use fetch,

291
00:16:51.325 --> 00:16:55.466
and then catch the error,
and map that error, or

292
00:16:55.466 --> 00:16:59.225
set off the error for
the loading error url?

293
00:16:59.225 --> 00:17:01.020
&gt;&gt; Speaker 1: Yeah, we totally, yeah.

294
00:17:01.020 --> 00:17:04.130
&gt;&gt; Speaker 2: You just need
to move the parentheses.

295
00:17:04.130 --> 00:17:06.200
&gt;&gt; Speaker 1: Did I just put
the parenthesis in the wrong place?

296
00:17:06.200 --> 00:17:08.764
&gt;&gt; Speaker 2: Yeah, so go to, yep.

297
00:17:11.009 --> 00:17:13.608
&gt;&gt; Speaker 1: Really,
it looks right to me, atually.

298
00:17:13.608 --> 00:17:15.386
&gt;&gt; Speaker 2: Yeah.

299
00:17:15.386 --> 00:17:16.674
&gt;&gt; Speaker 1: Where did you think?

300
00:17:18.570 --> 00:17:21.280
&gt;&gt; Speaker 2: Cuz I had it on the inside.

301
00:17:21.280 --> 00:17:23.380
The filter isn't working for me.

302
00:17:25.120 --> 00:17:27.240
&gt;&gt; Speaker 1: Filter,
where index is larger or equal, so

303
00:17:27.240 --> 00:17:30.778
that might explain why we're not getting
image, if the filter isn't working.

304
00:17:33.394 --> 00:17:35.520
&gt;&gt; Speaker 1: Well, let's-
&gt;&gt; Speaker 2: I commented that it works.

305
00:17:35.520 --> 00:17:36.020
&gt;&gt; Speaker 1: Okay.

306
00:17:44.595 --> 00:17:48.172
&gt;&gt; Speaker 1: It sure seems like that's
the right filter case to me, but

307
00:17:48.172 --> 00:17:49.980
let's come back to it.

308
00:17:49.980 --> 00:17:50.750
This is all good,

309
00:17:50.750 --> 00:17:54.450
cuz this is what you have to do when
you're writing a program with observable.

310
00:17:54.450 --> 00:17:57.160
I was kind of hoping this would happen so
that we could step

311
00:17:57.160 --> 00:18:01.100
through the debugging tools, and I'm also
particularly excited about that Chrome

312
00:18:01.100 --> 00:18:03.880
break point inside of functions,
that's gonna make my life so much easier.

313
00:18:06.290 --> 00:18:08.970
So let's just step through and
see if we get that image.

314
00:18:08.970 --> 00:18:11.300
It looks like your story checks out here.

315
00:18:11.300 --> 00:18:15.688
And we can get this big image.

316
00:18:15.688 --> 00:18:17.258
So let's see what's screwed
up about our filter.

317
00:18:17.258 --> 00:18:21.230
Do I have a wrong case in my filter here?

318
00:18:21.230 --> 00:18:26.242
Meaning like,
&gt;&gt; Speaker 1: [LAUGH]

319
00:18:26.242 --> 00:18:28.420
I'm trying to filter an image.

320
00:18:28.420 --> 00:18:31.920
You can't filter an image URL, right guys?

321
00:18:31.920 --> 00:18:39.987
Let's move that up, cuz that's less dumb,
and now we're good.

322
00:18:39.987 --> 00:18:41.640
Right, does everybody
see what I did wrong?

323
00:18:41.640 --> 00:18:44.110
I mapped in the images
before I tried to filter it.

324
00:18:48.200 --> 00:18:49.075
All right.

325
00:18:50.757 --> 00:18:53.588
&gt;&gt; Speaker 1: I'm so confident I'm
just gonna close this debugger window.

