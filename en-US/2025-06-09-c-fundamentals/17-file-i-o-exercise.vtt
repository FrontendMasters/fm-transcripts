WEBVTT

1
00:00:00.000 --> 00:00:03.774
&gt;&gt; Richard Feldman: Let's go
through the part four exercise.

2
00:00:03.774 --> 00:00:06.961
So we're gonna start off by building and

3
00:00:06.961 --> 00:00:11.096
running the program,
as we've been doing, cool.

4
00:00:11.096 --> 00:00:15.247
So you might notice that we're printing
out what appears to be a gigantic

5
00:00:15.247 --> 00:00:17.706
index.html file, actually two of them.

6
00:00:17.706 --> 00:00:22.375
So it says index.html contents and
then blah blog/index.html contents.

7
00:00:22.375 --> 00:00:24.580
If you look inside the exercises folder,

8
00:00:24.580 --> 00:00:26.854
there are a couple of
extra things in here.

9
00:00:26.854 --> 00:00:28.117
So there's this index.html.

10
00:00:28.117 --> 00:00:31.357
This is like, in addition to the all the
dot c files, and it looks like this says,

11
00:00:31.357 --> 00:00:32.225
like, Hello World.

12
00:00:32.225 --> 00:00:34.572
This through slash page.

13
00:00:34.572 --> 00:00:36.930
In the future,
when we get the actual web server running,

14
00:00:36.930 --> 00:00:39.402
we're gonna literally be like,
serving this to a browser.

15
00:00:39.402 --> 00:00:43.980
But for right now it's just hard
coded in our exercises directory.

16
00:00:43.980 --> 00:00:46.992
And then we also have a blog directory
which has an index.html inside of it,

17
00:00:46.992 --> 00:00:48.321
which just says, this is a blog.

18
00:00:48.321 --> 00:00:52.263
And basically the only purpose of these
two things is just to be able to verify

19
00:00:52.263 --> 00:00:53.556
that like our parsing and

20
00:00:53.556 --> 00:00:56.894
translating things into paths
is actually working correctly.

21
00:00:56.894 --> 00:01:00.604
Cool, so, yeah.

22
00:01:00.604 --> 00:01:03.480
Let's build and ran the program.

23
00:01:03.480 --> 00:01:04.518
Let's take a look at what this is doing.

24
00:01:04.518 --> 00:01:07.719
So this part right here, this two path,
this is gonna look familiar.

25
00:01:07.719 --> 00:01:11.036
This is basically just like, if you take
what happened at the end of the solution

26
00:01:11.036 --> 00:01:12.733
for part three, this is what's there.

27
00:01:12.733 --> 00:01:15.543
So this has the like
the refactor that we did.

28
00:01:15.543 --> 00:01:18.350
So all of this is just stuff that
we've already seen before nothing new

29
00:01:18.350 --> 00:01:18.928
to see there.

30
00:01:18.928 --> 00:01:23.549
We just so still needed it because,
we're building up to a static web server.

31
00:01:23.549 --> 00:01:26.079
Now we're going to have this
new thing called print_file,

32
00:01:26.079 --> 00:01:27.674
which is basically like takes a path.

33
00:01:27.674 --> 00:01:31.602
And this path is gonna be parsed
out of the request from earlier.

34
00:01:31.602 --> 00:01:33.669
And then basically we're going to go
through this whole process that we

35
00:01:33.669 --> 00:01:34.297
just learned about.

36
00:01:34.297 --> 00:01:38.690
So do the open to get the file descriptor,
make the metadata struct,

37
00:01:38.690 --> 00:01:40.445
call fstat to populate it.

38
00:01:40.445 --> 00:01:44.674
Right now, by the way, you might notice
that we are not handling any errors here,

39
00:01:44.674 --> 00:01:47.310
and we're gonna see why by
the end of the exercise,

40
00:01:47.310 --> 00:01:49.417
we've chosen not to handle any errors.

41
00:01:49.417 --> 00:01:52.684
And here we say, change this
charge star to and malloc, sorry.

42
00:01:52.684 --> 00:01:54.266
Change this to charge star and malloc.

43
00:01:54.266 --> 00:01:57.493
So right now,
this is allocating metadata, st_size + 1,

44
00:01:57.493 --> 00:02:00.107
which as we saw from the slides,
this is not safe.

45
00:02:00.107 --> 00:02:03.767
This could very easily blow the stack,
and if we want to avoid that,

46
00:02:03.767 --> 00:02:05.322
malloc is one way to do that.

47
00:02:05.322 --> 00:02:08.761
And by the way, don't forget to handle
the case for malloc returns null,

48
00:02:08.761 --> 00:02:11.272
which is what malloc returns
when there's an error.

49
00:02:11.272 --> 00:02:13.162
So make sure that we handle errors,

50
00:02:13.162 --> 00:02:16.375
because malloc can fail to and
also don't forget to call free

51
00:02:16.375 --> 00:02:19.790
on it at the appropriately making
sure not to use use after free.

52
00:02:19.790 --> 00:02:21.318
Freeze, or double freeze,
or anything like that.

53
00:02:21.318 --> 00:02:24.734
Just call free at the correct times so

54
00:02:24.734 --> 00:02:30.805
that this will free this actual
memory after we malloc it, okay.

55
00:02:30.805 --> 00:02:33.142
And then finally, after we've done that,
then just go back and

56
00:02:33.142 --> 00:02:35.193
add error handling for
all the cases that could happen.

57
00:02:35.193 --> 00:02:38.792
So if you want to see some documentation
for these different functions,

58
00:02:38.792 --> 00:02:39.680
this is like you.

59
00:02:39.680 --> 00:02:42.712
A little bit of a your first taste of,
like, C documentation.

60
00:02:42.712 --> 00:02:46.330
But I do think that learning how to read C
Docs is actually one of the most valuable

61
00:02:46.330 --> 00:02:48.279
things you can take away from this course.

62
00:02:48.279 --> 00:02:51.655
Because if you're trying to do,
interop with another language, or

63
00:02:51.655 --> 00:02:55.436
you're trying to, get a little tiny bit
of C involved in a really performance

64
00:02:55.436 --> 00:02:58.134
critical section of something
you're doing at work.

65
00:02:58.134 --> 00:02:59.706
This is, kind of the way to do that.

66
00:02:59.706 --> 00:03:05.445
And so these links will give you sort of
a little sense of what that can look like.

67
00:03:10.088 --> 00:03:12.782
&gt;&gt; Richard Feldman: Okay, before I
go through the solutions for this,

68
00:03:12.782 --> 00:03:15.727
let me just start by just
bringing this up on the screen so

69
00:03:15.727 --> 00:03:19.754
you can kind of see this for those who
are like not reading this as we go along.

70
00:03:19.754 --> 00:03:22.636
This is the the actual docks for
the the open function.

71
00:03:22.636 --> 00:03:24.799
So this is the Linux version of this.

72
00:03:24.799 --> 00:03:28.506
In part six we're actually gonna see that,
although almost all the time

73
00:03:28.506 --> 00:03:31.680
the versions of these things
are identical for our purposes.

74
00:03:31.680 --> 00:03:35.419
At the very end of the workshop,
we are gonna encounter a case where there

75
00:03:35.419 --> 00:03:39.344
actually is a slight and very important
difference between how a particular

76
00:03:39.344 --> 00:03:43.410
function works on Linux versus on how it
works in BSD, which is the same MAC OS.

77
00:03:43.410 --> 00:03:46.303
And we actually are gonna have to
account for that difference, but for

78
00:03:46.303 --> 00:03:48.901
the rest of the workshop,
you can just get away with looking for

79
00:03:48.901 --> 00:03:50.486
either the Linux docs or the BSD docs.

80
00:03:50.486 --> 00:03:55.224
And I think the Linux docs are a little
easier to read, but basically,

81
00:03:55.224 --> 00:03:58.918
like this is a pretty
representative example of like,

82
00:03:58.918 --> 00:04:03.037
what it looks like to read docs for
Linux, like C functions.

83
00:04:03.037 --> 00:04:05.805
You can just kind of search for
these on the web and just like open and

84
00:04:05.805 --> 00:04:09.218
then like maybe Linux or something like
that, or even just like open and then see,

85
00:04:09.218 --> 00:04:11.361
and you'll get a lot of
results from this website.

86
00:04:11.361 --> 00:04:13.204
This is man7.org.

87
00:04:13.204 --> 00:04:15.068
And basically, here's what it looks like.

88
00:04:15.068 --> 00:04:17.942
You've got a variety of related functions.

89
00:04:17.942 --> 00:04:19.515
They're sort of all
defined in the same place.

90
00:04:19.515 --> 00:04:23.940
They're whoever wrote the docs decided to
organize them this way, so here's open.

91
00:04:23.940 --> 00:04:27.514
Basically, all of these things are things
that we have at some point seen.

92
00:04:27.514 --> 00:04:29.452
So const char, we haven't seen.

93
00:04:29.452 --> 00:04:30.425
I mean we saw const, but

94
00:04:30.425 --> 00:04:32.773
in a different context where
it was sort of out at the top.

95
00:04:32.773 --> 00:04:36.287
And again, this just means, basically,
you're not supposed to write into this.

96
00:04:36.287 --> 00:04:38.321
This is the pathname to open.

97
00:04:38.321 --> 00:04:41.198
So this is a char star,
so terminated string int.

98
00:04:41.198 --> 00:04:42.187
We know about that one.

99
00:04:42.187 --> 00:04:42.798
That's the flag.

100
00:04:42.798 --> 00:04:45.859
So this is,
like the read only flag that we put there,

101
00:04:45.859 --> 00:04:48.053
the dot dot dot basically means Varg.

102
00:04:48.053 --> 00:04:51.037
So it means that you can optionally
send additional arguments.

103
00:04:51.037 --> 00:04:54.284
And then this is just a little comment
saying that, like, hey, there's like, one

104
00:04:54.284 --> 00:04:57.422
var arg that you're allowed to send, and
it should be one of these mode t things.

105
00:04:57.422 --> 00:05:00.169
Mode_t is a struct that.

106
00:05:00.169 --> 00:05:04.449
That specifies, or actually, sorry, it
might be flags, not sure, but the type for

107
00:05:04.449 --> 00:05:06.124
this is defined somewhere else.

108
00:05:06.124 --> 00:05:09.093
But this is basically like
if you want the, yeah,

109
00:05:09.093 --> 00:05:13.210
some additional configuration around
how you want to open the file.

110
00:05:13.210 --> 00:05:16.320
Then there's other functions like create
and open app and open app two and

111
00:05:16.320 --> 00:05:17.084
stuff like that.

112
00:05:17.084 --> 00:05:18.546
We don't need to worry about these, but

113
00:05:18.546 --> 00:05:20.568
the point is just that like
this is our first example of.

114
00:05:20.568 --> 00:05:23.784
Now we've learned enough that we can
actually start reading C documentation,

115
00:05:23.784 --> 00:05:25.949
which opens up a whole world
of exciting things to us.

116
00:05:25.949 --> 00:05:32.250
All right, having said all that, let's go
ahead and go through these two things.

117
00:05:32.250 --> 00:05:36.630
So, [COUGH] Okay, first one is we're gonna
change this to char star and malloc.

118
00:05:36.630 --> 00:05:39.867
So we're gonna say char
star buff = malloc and

119
00:05:39.867 --> 00:05:44.354
we're gonna get an error at first
because this is not imported.

120
00:05:44.354 --> 00:05:46.295
We're gonna import stdlib.h.

121
00:05:46.295 --> 00:05:49.728
Actually, let me just go ahead and
do that, right there.

122
00:05:49.728 --> 00:05:52.684
Okay, stdlib.h.

123
00:05:52.684 --> 00:05:54.821
Great, and jump back there.

124
00:05:54.821 --> 00:05:56.591
Okay, and how much do we want to malloc?

125
00:05:56.591 --> 00:05:59.471
So malloc takes as its one argument,
how many bytes do you want to allocate,

126
00:05:59.471 --> 00:06:01.772
which is essentially the same
exact things we have in there.

127
00:06:01.772 --> 00:06:04.829
So metadata.st_size + 1.

128
00:06:04.829 --> 00:06:09.469
As usual, we got the plus one because we
want to have a null terminator in there,

129
00:06:09.469 --> 00:06:13.229
because this is going to be a string
that we're gonna write out.

130
00:06:13.229 --> 00:06:16.275
Okay, great, so
we've got this thing right here.

131
00:06:16.275 --> 00:06:17.641
It's giving us a little error,

132
00:06:17.641 --> 00:06:20.185
because I have both of these
defined at the same time, but.

133
00:06:20.185 --> 00:06:21.200
So that's all we're gonna do there.

134
00:06:21.200 --> 00:06:23.915
So hint one, don't forget to handle
the case where malloc returns null.

135
00:06:23.915 --> 00:06:24.560
Thanks very much.

136
00:06:24.560 --> 00:06:26.340
So let's go ahead and
handle that real quick.

137
00:06:26.340 --> 00:06:28.428
If buff double equals null,

138
00:06:28.428 --> 00:06:32.781
then we're just gonna return
without printing anything.

139
00:06:32.781 --> 00:06:36.738
So this will essentially mean that make
sure that we're not causing any problems

140
00:06:36.738 --> 00:06:40.172
with like read trying to write into
null right there because that would

141
00:06:40.172 --> 00:06:42.395
immediately cause all sorts of explosions.

142
00:06:42.395 --> 00:06:47.609
And then, of course, don't forget to
free buff later to prevent memory leaks.

143
00:06:47.609 --> 00:06:54.015
So right down at the end here where
we're closing the FD, let's free that.

144
00:06:54.015 --> 00:06:57.544
Great, okay, looking good.

145
00:06:57.544 --> 00:06:59.803
All right, there's that.

146
00:06:59.803 --> 00:07:01.046
Let's run the program again.

147
00:07:01.046 --> 00:07:03.100
And sure enough, everything looks great.

148
00:07:03.100 --> 00:07:06.094
We are now printing both of these files
and we're doing it with malloc and free.

149
00:07:06.094 --> 00:07:08.338
I don't see what all the fuss is about.

150
00:07:08.338 --> 00:07:10.403
That was no proble,
we just added a little free in there.

151
00:07:10.403 --> 00:07:13.345
All right, and now finally let's go
back and add error handling 'cause we

152
00:07:13.345 --> 00:07:15.692
omitted that earlier, so
let's go ahead and just do that.

153
00:07:15.692 --> 00:07:17.421
Here are the docs for all these things.

154
00:07:17.421 --> 00:07:20.655
So if you look at the docs for
open, you can see that.

155
00:07:20.655 --> 00:07:26.079
It will say, hey, if FD is -1,
then that means an error happened.

156
00:07:26.079 --> 00:07:30.145
And again, normally, we would like,
handle this more gracefully.

157
00:07:30.145 --> 00:07:34.140
Print out, hey, no, I couldn't open this
path, not found or something like that.

158
00:07:34.140 --> 00:07:37.029
Maybe look at what specific
error had happened.

159
00:07:37.029 --> 00:07:40.382
But for our purposes, we're just like,
yeah, just return no problem.

160
00:07:40.382 --> 00:07:42.857
So that's that one.

161
00:07:42.857 --> 00:07:47.156
Then we have stat which can
also fail sorry, fstat.

162
00:07:47.156 --> 00:07:50.631
So gonna say, if this is w = -1 here,
we're not bothering to introduce

163
00:07:50.631 --> 00:07:54.290
a variable because we're, we would only
read it for error handling anyway.

164
00:07:54.290 --> 00:07:55.864
So just go ahead and do that.

165
00:07:55.864 --> 00:07:58.970
Okay, all right.

166
00:07:58.970 --> 00:08:02.610
And read, okay, where is read there.

167
00:08:02.610 --> 00:08:03.608
It is great.

168
00:08:03.608 --> 00:08:08.525
And now I can just say if bytes_read w =

169
00:08:08.525 --> 00:08:13.592
-1 return and malloc, or is that one?

170
00:08:13.592 --> 00:08:15.524
We already did malloc, right?

171
00:08:15.524 --> 00:08:18.193
Yeah, great, okay, yeah,
we can print of that an error handle, but

172
00:08:18.193 --> 00:08:19.207
I'm not going to bother.

173
00:08:19.207 --> 00:08:21.249
All right,
let me run the program again and

174
00:08:21.249 --> 00:08:25.222
we're all good because none of those error
cases even came up and we're all done and

175
00:08:25.222 --> 00:08:28.324
everything is perfect and
I didn't make any mistakes, right?

176
00:08:28.324 --> 00:08:31.054
Anyone see anything I didn't do correctly?

177
00:08:31.054 --> 00:08:32.418
Here's a question.

178
00:08:32.418 --> 00:08:35.724
Let's suppose that I'm coming
along here and I'm like,

179
00:08:35.724 --> 00:08:38.159
I called malloc here and remember malloc.

180
00:08:38.159 --> 00:08:43.323
Does a long lived allocation on the heap
that outlives the function, and then it's

181
00:08:43.323 --> 00:08:48.287
very important that we make sure to free
that, otherwise we have a memory leak.

182
00:08:48.287 --> 00:08:50.930
So let's suppose we're coming down here,
and we get down here and we're like, cool.

183
00:08:50.930 --> 00:08:51.605
We freed that.

184
00:08:51.605 --> 00:08:53.775
We didn't forget very good.

185
00:08:53.775 --> 00:08:57.880
Did anyone notice that we didn't free it?

186
00:08:57.880 --> 00:09:03.476
Nope, we had a memory leak.

187
00:09:03.476 --> 00:09:07.206
[LAUGH] This is the problem, if you
don't have any conditionals, yeah, sure,

188
00:09:07.206 --> 00:09:08.104
it's no problem.

189
00:09:08.104 --> 00:09:09.883
It's just free, no big deal.

190
00:09:09.883 --> 00:09:13.092
The problem is, real programs actually
have lots of conditionals, and

191
00:09:13.092 --> 00:09:14.524
you have to remember to do that.

192
00:09:14.524 --> 00:09:16.380
Here's another question.

193
00:09:16.380 --> 00:09:18.741
This one will be a little bit easier.

194
00:09:18.741 --> 00:09:22.541
Do we always close the file?

195
00:09:22.541 --> 00:09:23.170
&gt;&gt; Speaker 2: No.

196
00:09:23.170 --> 00:09:26.258
&gt;&gt; Richard Feldman: Nope, [LAUGH] yeah,
what if bites red was negative one?

197
00:09:26.258 --> 00:09:27.105
&gt;&gt; Speaker 2: We did an early return.

198
00:09:27.105 --> 00:09:28.062
&gt;&gt; Richard Feldman: We
never reached this line.

199
00:09:28.062 --> 00:09:30.386
So yeah, we needed to close there too.

200
00:09:30.386 --> 00:09:31.648
What about up here?

201
00:09:31.648 --> 00:09:34.028
Okay, if buff = null, we don't need
to free it because it was null, so

202
00:09:34.028 --> 00:09:35.553
it didn't get allocated
in the first place.

203
00:09:35.553 --> 00:09:38.013
But we did actually need to
close the file descriptor there.

204
00:09:38.013 --> 00:09:38.721
What if this happened?

205
00:09:38.721 --> 00:09:41.013
Yeah, I also need you to close
the file descriptor there.

206
00:09:41.013 --> 00:09:43.913
But here we need to not free because
we haven't done the malloc yet.

207
00:09:43.913 --> 00:09:47.691
So, and then again here we don't need to
close the file descriptor because this is

208
00:09:47.691 --> 00:09:50.559
for equals one which means that
there was no file descriptor.

209
00:09:50.559 --> 00:09:52.044
This is the problem.

210
00:09:52.044 --> 00:09:56.414
This is why it's so easy to make these
mistakes is because we're not usually

211
00:09:56.414 --> 00:10:00.663
accustomed to thinking in terms of yeah,
it's just this chore, right?

212
00:10:00.663 --> 00:10:01.460
We're like, open it.

213
00:10:01.460 --> 00:10:03.017
And then just remember
to close it at the end.

214
00:10:03.017 --> 00:10:03.877
You're done.

215
00:10:03.877 --> 00:10:04.579
You malloc it.

216
00:10:04.579 --> 00:10:06.667
And then just remember to free
at the end and you're done.

217
00:10:06.667 --> 00:10:09.535
It's not actually that simple
because in real world programs,

218
00:10:09.535 --> 00:10:11.671
you do have all sorts of
conditionals going on.

219
00:10:11.671 --> 00:10:12.719
You have early returns.

220
00:10:12.719 --> 00:10:16.021
You have things that like only happen
sometimes and other times don't happen.

221
00:10:16.021 --> 00:10:18.684
And you have to remember to close
things in just the right spot,

222
00:10:18.684 --> 00:10:21.110
like close your file descriptors
in just the right spot.

223
00:10:21.110 --> 00:10:23.305
And to free your malix
in just the right spots.

224
00:10:23.305 --> 00:10:24.802
And again, as we talked earlier,

225
00:10:24.802 --> 00:10:28.121
if you don't remember to free at just
the right time, you get a memory leak.

226
00:10:28.121 --> 00:10:30.268
If you free too early,
you get a use after free,

227
00:10:30.268 --> 00:10:32.003
which is way worse than a memory leak.

228
00:10:32.003 --> 00:10:35.909
And if you free multiple times, and
we are calling free, multiple times in

229
00:10:35.909 --> 00:10:40.256
this function, then you get a double free
which is even worse than a use after free.

230
00:10:40.256 --> 00:10:43.183
This is how C gets a reputation for
its memory on safety,

231
00:10:43.183 --> 00:10:44.876
causing problems deservedly.

232
00:10:44.876 --> 00:10:48.047
So, because this does
really cause problems.

233
00:10:48.047 --> 00:10:51.637
Now one, right, you can go with this is
you can go with rust, which basically,

234
00:10:51.637 --> 00:10:53.790
you don't have clothes entry in rust and
rust.

235
00:10:53.790 --> 00:10:56.444
It just takes care of all
these things automatically for

236
00:10:56.444 --> 00:11:00.001
you with plenty of other trade-offs,
if you want to learn all about that,

237
00:11:00.001 --> 00:11:03.576
I have a whole course on Rust that you
can watch right here on Final Masters.

238
00:11:03.576 --> 00:11:06.843
But it's also worth noting that, again,

239
00:11:06.843 --> 00:11:10.572
if we choose not to use
malloc in the first place.

240
00:11:10.572 --> 00:11:13.642
If we're going to do our chunked reads
anyway, and we're gonna just do them on

241
00:11:13.642 --> 00:11:15.888
the stack, then I don't need
to worry about any of this.

242
00:11:15.888 --> 00:11:19.894
I don't need to do the free thing because
I have chosen to organize my program in

243
00:11:19.894 --> 00:11:23.961
a way where I didn't have to use malloc
and therefore I don't have to use free and

244
00:11:23.961 --> 00:11:26.231
the entire category of
bugs just goes away.

245
00:11:26.231 --> 00:11:30.162
Granted, other trade offs happen,
but I get better performance, and

246
00:11:30.162 --> 00:11:32.520
I don't have to manage these lifetimes and

247
00:11:32.520 --> 00:11:36.866
worry about what I'm like on the hook to
close it or free at just the right time.

248
00:11:36.866 --> 00:11:38.892
Unfortunately, when it
comes to file descriptors,

249
00:11:38.892 --> 00:11:42.087
there's kind of no way around it, like you
just do need to remember to call close at,

250
00:11:42.087 --> 00:11:44.079
like, just the right times
that if you mess that up.

251
00:11:44.079 --> 00:11:48.241
Then you have a file descriptor leak
on the plus side, file descriptor leaks

252
00:11:48.241 --> 00:11:52.796
are generally not they tend not to be as
consequential as memory leaks, although,

253
00:11:52.796 --> 00:11:53.401
granted.

254
00:11:53.401 --> 00:11:56.201
It can be kind of annoying if you
have a very long running program, but

255
00:11:56.201 --> 00:11:58.053
eventually you run out
of file descriptors.

256
00:11:58.053 --> 00:11:59.834
That is annoying.

257
00:11:59.834 --> 00:12:02.656
One other note about this
is that this right here,

258
00:12:02.656 --> 00:12:06.753
is actually one of the major things
that the sort of C successor languages

259
00:12:06.753 --> 00:12:09.323
that are not in the like c++ or
rust family.

260
00:12:09.323 --> 00:12:12.636
So this is like Zig, Jai and Odin.

261
00:12:12.636 --> 00:12:16.893
I believe all three of them do this is
that they have a keyword called Defer.

262
00:12:16.893 --> 00:12:21.218
And basically what defer lets you do is
that I'm just gonna make up syntactic

263
00:12:21.218 --> 00:12:25.690
because c does not have this is you
basically say something like this, defer.

264
00:12:25.690 --> 00:12:27.449
I guess that would probably be down here,
actually.

265
00:12:27.449 --> 00:12:29.466
So C, if it's negative one,
if so early return.

266
00:12:29.466 --> 00:12:32.951
And then basically what defer means is
basically like at the end of the function,

267
00:12:32.951 --> 00:12:34.386
whenever the function returns,

268
00:12:34.386 --> 00:12:37.067
whether that's just because
the function naturally ended.

269
00:12:37.067 --> 00:12:40.237
Or because we did an early return, just
make sure you always do this close fd.

270
00:12:40.237 --> 00:12:43.042
And then now you wouldn't need this,
and you wouldn't need this, and

271
00:12:43.042 --> 00:12:46.299
you wouldn't need this, and you could do
the same thing for free if you wanted to.

272
00:12:46.299 --> 00:12:49.860
Now, granted, that only works if, like
you're doing this inside the scope of this

273
00:12:49.860 --> 00:12:52.933
one function, like, if that works fine for
closing a file descriptor.

274
00:12:52.933 --> 00:12:56.366
But if the whole point of the malloc that
you're doing is that you want to return.

275
00:12:56.366 --> 00:13:00.027
The thing that it malloced from the
function then defer doesn't really help

276
00:13:00.027 --> 00:13:02.897
you, whereas, like the things
that rust does do help you.

277
00:13:02.897 --> 00:13:06.777
But it is worth noting that, especially
for things like file descriptors,

278
00:13:06.777 --> 00:13:10.429
this is a major ergonomics improvement
that these languages give you.

279
00:13:10.429 --> 00:13:14.083
And I have heard talk about people
trying to add this to C, or, like,

280
00:13:14.083 --> 00:13:17.935
writing proposals to do that, but
C being a 50 plus your old language.

281
00:13:17.935 --> 00:13:20.080
New features don't just
get added on a whim.

282
00:13:20.080 --> 00:13:22.524
[LAUGH] it's like a long process to
get things through the standards.

283
00:13:22.524 --> 00:13:30.195
So who knows if we'll ever actually see
a deferred keyword in C, but fortunately,

284
00:13:30.195 --> 00:13:36.342
these other sort of C improvement
languages already do have that.

