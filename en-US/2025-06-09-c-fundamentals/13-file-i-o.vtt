WEBVTT

1
00:00:00.000 --> 00:00:02.200
&gt;&gt; Richard Feldman: Now we're going
to get into some actual file IO.

2
00:00:02.200 --> 00:00:05.315
So up to this point, we've only been
working with strings, but of course,

3
00:00:05.315 --> 00:00:08.528
in order for our static web server to
actually work, we need to be reading these

4
00:00:08.528 --> 00:00:11.672
index dot HTML files off of the disk in
order to send them back to the browser.

5
00:00:11.672 --> 00:00:15.428
So the browser can do all of its work
rendering them and making them look nice.

6
00:00:15.428 --> 00:00:17.861
So we're gonna start by looking
at how to open a file, and

7
00:00:17.861 --> 00:00:21.021
then how to get the size of the file,
which is going to be important later.

8
00:00:21.021 --> 00:00:24.513
And also reading the contents of the file,
of course, something we want to do.

9
00:00:24.513 --> 00:00:25.196
And then finally, we're going

10
00:00:25.196 --> 00:00:26.318
to talk a little bit about
the stack versus the heap.

11
00:00:26.318 --> 00:00:31.311
And in this section, we're gonna see
an alternative that we could have used

12
00:00:31.311 --> 00:00:35.304
to stomping all over the request
that we saw earlier, okay.

13
00:00:35.304 --> 00:00:37.147
So just to recap what we did so far,

14
00:00:37.147 --> 00:00:40.335
we talked about if we got
an incoming request of get /blog.

15
00:00:40.335 --> 00:00:44.649
We wanna translate that into the file
path of a blog / index.html with or

16
00:00:44.649 --> 00:00:46.284
without a slash on the end.

17
00:00:46.284 --> 00:00:50.535
Either case, we handle that in our
sort of little cheap unit test, and

18
00:00:50.535 --> 00:00:53.429
the exercise is verified
that this is all good.

19
00:00:53.429 --> 00:00:56.971
Let's suppose that our
path is example.txt.

20
00:00:56.971 --> 00:00:59.018
If we wanna open that file for reading,

21
00:00:59.018 --> 00:01:01.884
which is what we're gonna do
in our static web server.

22
00:01:01.884 --> 00:01:03.992
We don't care about writing files at all.

23
00:01:03.992 --> 00:01:05.273
This is how we would do that.

24
00:01:05.273 --> 00:01:06.702
So there's two pieces to note here.

25
00:01:06.702 --> 00:01:09.838
So first we're saying we're
calling this function named open.

26
00:01:09.838 --> 00:01:13.636
We're passing in the path and we're
giving it this flag that says Read only.

27
00:01:13.636 --> 00:01:17.895
This is just a constant that's available
for the standard library that basically

28
00:01:17.895 --> 00:01:20.560
says, I want to open this
file in read-only mode.

29
00:01:20.560 --> 00:01:24.836
Other options include, I can say, like,
I want to allow writes but not reads.

30
00:01:24.836 --> 00:01:27.114
Or you can say,
I want to allow both for our purposes.

31
00:01:27.114 --> 00:01:28.686
This is just like a little, nice,

32
00:01:28.686 --> 00:01:32.485
little safety measure that we make sure
we don't accidentally write to this file,

33
00:01:32.485 --> 00:01:34.949
because we really only want
to be reading from these.

34
00:01:34.949 --> 00:01:36.630
The path again, this is a memory address.

35
00:01:36.630 --> 00:01:39.492
So as we know, this is an integer
that's being passed open, and

36
00:01:39.492 --> 00:01:41.138
this also is another integer [LAUGH].

37
00:01:41.138 --> 00:01:45.266
So this flag of whether it's read only or
rewrite, etc,

38
00:01:45.266 --> 00:01:48.111
is just a constant that's an integer.

39
00:01:48.111 --> 00:01:51.450
Now open returns an int,
which is known as a file descriptor.

40
00:01:51.450 --> 00:01:55.875
Now as we're gonna see in a moment,
the file descriptor can also be used to do

41
00:01:55.875 --> 00:02:00.115
things like reading things from the file
or getting the size of the file.

42
00:02:00.115 --> 00:02:04.495
It's basically, a way to avoid having
to pass in this path every single time.

43
00:02:04.495 --> 00:02:07.721
The operating system has this concept
of like, okay, I've opened this file.

44
00:02:07.721 --> 00:02:12.583
I've sort of made a little in-memory
database of like, yes, this file,

45
00:02:12.583 --> 00:02:17.378
this ID, this integer ID, which we
call file descriptor or FD for short.

46
00:02:17.378 --> 00:02:20.692
This corresponds to a particular
like index into that table.

47
00:02:20.692 --> 00:02:24.320
And that table just refers to like
the actual paths and it actually does like

48
00:02:24.320 --> 00:02:27.776
I-nodes and stuff on disk, but
conceptually you can think of it as a way

49
00:02:27.776 --> 00:02:31.837
to just not have to keep passing this path
around, and okay, this file is now open.

50
00:02:31.837 --> 00:02:34.952
And basically,
because there are limited number of these,

51
00:02:34.952 --> 00:02:39.362
as we talked about previously, there's
like about 4 billion possible ones in int.

52
00:02:39.362 --> 00:02:43.068
But actually the operating system
will generally restrict you to a much

53
00:02:43.068 --> 00:02:47.407
lower number, but you can increase that
limit if you want by running some program.

54
00:02:47.407 --> 00:02:51.424
The other thing you have to note, is that
it's very important to remember to close

55
00:02:51.424 --> 00:02:53.535
your file descriptors when you're done.

56
00:02:53.535 --> 00:02:57.071
If you don't, you can have what's
called a file descriptor leak,

57
00:02:57.071 --> 00:03:00.421
which can have essentially the,
well, some bad symptoms, but

58
00:03:00.421 --> 00:03:03.107
they're similar to
the symptoms of a memory leak.

59
00:03:03.107 --> 00:03:07.762
So open it, get your file descriptor,
do things with the file descriptor, and

60
00:03:07.762 --> 00:03:12.763
then once you're done and you're, I don't
want to do any more stuff with this file,

61
00:03:12.763 --> 00:03:14.785
you want to make sure and close it.

62
00:03:14.785 --> 00:03:19.639
So first thing to note about handling
errors in C is that it is super common

63
00:03:19.639 --> 00:03:24.030
to have a C function that returns
either a normal looking number.

64
00:03:24.030 --> 00:03:29.401
So in this case, a file descriptor of,
0, 1, 2, 3, 4, whatever, or -1.

65
00:03:29.401 --> 00:03:33.742
And -1 is just something you're just
supposed to know means an error occurred.

66
00:03:33.742 --> 00:03:35.780
So you don't get any help with this.

67
00:03:35.780 --> 00:03:38.833
C doesn't say, hey,
did you forget to check for the error?

68
00:03:38.833 --> 00:03:42.386
It also doesn't do any automatic
propagation try, catch, no.

69
00:03:42.386 --> 00:03:45.705
It's just like you run open,
it does its thing, and

70
00:03:45.705 --> 00:03:48.051
it gives you back a file descriptor.

71
00:03:48.051 --> 00:03:51.747
And if that file descriptor happens to
be -1, then you're supposed to know,

72
00:03:51.747 --> 00:03:54.464
hey, I should check for that and
see if there was an error.

73
00:03:54.464 --> 00:03:59.428
So for example, if the path is not found,
open will return -1.

74
00:03:59.428 --> 00:04:03.454
There is a separate function you
can call that will get additional

75
00:04:03.454 --> 00:04:04.779
error information.

76
00:04:04.779 --> 00:04:07.360
We're not gonna talk about that yet,
we'll get into that later.

77
00:04:07.360 --> 00:04:08.201
But basically,

78
00:04:08.201 --> 00:04:11.756
this is a really important thing to
know about calling functions in C.

79
00:04:11.756 --> 00:04:13.870
Whenever you're reading
the documentation for

80
00:04:13.870 --> 00:04:17.063
any C function, you always wanna check
the return value and make sure that

81
00:04:17.063 --> 00:04:20.538
you understand what are the special return
values that mean an error occurred.

82
00:04:20.538 --> 00:04:22.888
And I shouldn't trust
the output that it gave me.

83
00:04:22.888 --> 00:04:25.171
Cuz it's not gonna throw an exception,

84
00:04:25.171 --> 00:04:28.269
it's just gonna silently
give you an invalid number.

85
00:04:28.269 --> 00:04:31.746
Okay, so the other thing that you
need to do once you've opened it,

86
00:04:31.746 --> 00:04:34.430
is you need to actually do
something useful with it,

87
00:04:34.430 --> 00:04:38.098
just opening it on its own doesn't
actually cause anything to be read.

88
00:04:38.098 --> 00:04:40.719
Or any metadata to come off of it.

89
00:04:40.719 --> 00:04:43.575
So in this case,
we wanna actually like read from the file.

90
00:04:43.575 --> 00:04:44.676
Here's how we're to do that.

91
00:04:44.676 --> 00:04:47.757
We're gonna call this function called
read and read takes a file descriptor,

92
00:04:47.757 --> 00:04:48.511
again an integer.

93
00:04:48.511 --> 00:04:53.974
It takes a buffer and buffer is,
this is our like bracket array syntax.

94
00:04:53.974 --> 00:04:57.672
So you may recall this just like
everything else returns a memory address.

95
00:04:57.672 --> 00:05:00.641
So if we'd said char star that would
also give us a memory address.

96
00:05:00.641 --> 00:05:04.222
The reason that we're doing this bracket
100 is basically this means, hey,

97
00:05:04.222 --> 00:05:07.395
in the same way that when we had,
like, open bracket, close bracket.

98
00:05:07.395 --> 00:05:12.139
And we set it equal to be a string
bracket, 100 basically says,

99
00:05:12.139 --> 00:05:15.374
I want you to reserve space for 100 bytes.

100
00:05:15.374 --> 00:05:19.144
And they're bytes because it's char, if I
said int, it would be reserved space for

101
00:05:19.144 --> 00:05:19.793
100 ints.

102
00:05:19.793 --> 00:05:22.249
And because I didn't put an equals here,
I just put a semicolon,

103
00:05:22.249 --> 00:05:23.197
I'm basically saying.

104
00:05:23.197 --> 00:05:25.364
Yeah, don't initialize
that memory to anything.

105
00:05:25.364 --> 00:05:27.471
So if it was a string,
it would say, like, okay,

106
00:05:27.471 --> 00:05:30.700
initialize the memory to these bytes,
the bytes that I wrote in the string.

107
00:05:30.700 --> 00:05:31.378
This is an array.

108
00:05:31.378 --> 00:05:34.786
So I could have also said, initialize
these to be all zeros, or all ones, or

109
00:05:34.786 --> 00:05:35.812
something like that.

110
00:05:35.812 --> 00:05:38.534
But what we're doing here is,
I'm saying don't initialize it.

111
00:05:38.534 --> 00:05:39.528
Don't initialize it at all.

112
00:05:39.528 --> 00:05:40.728
Don't put anything in there.

113
00:05:40.728 --> 00:05:42.825
I just want you to reserve that memory.

114
00:05:42.825 --> 00:05:46.690
Don't use it for anything else,
don't put any strings in there.

115
00:05:46.690 --> 00:05:47.420
Don't put any other variables in there.

116
00:05:47.420 --> 00:05:50.464
Those are all reserved for me,
and give me back the address,

117
00:05:50.464 --> 00:05:52.146
the first one that you reserved.

118
00:05:52.146 --> 00:05:54.345
And what's the contents
of this memory garbage?

119
00:05:54.345 --> 00:05:54.999
We have no idea.

120
00:05:54.999 --> 00:05:57.009
It could be random stuff in memory.

121
00:05:57.009 --> 00:05:59.333
Don't read this thing, or
you're gonna, I mean, you can, but

122
00:05:59.333 --> 00:06:00.785
you're just gonna get memory garbage.

123
00:06:00.785 --> 00:06:02.753
It's gonna be just like
that first exercise.

124
00:06:02.753 --> 00:06:04.882
And we read off the end of Hello World.

125
00:06:04.882 --> 00:06:07.736
That's what's gonna happen,
if you [LAUGH] printf this thing.

126
00:06:07.736 --> 00:06:13.479
It's just whatever ones and
zeros happen to be at that address.

127
00:06:13.479 --> 00:06:14.689
And what the read function does.

128
00:06:14.689 --> 00:06:17.708
It says, okay, give me the file
descriptor that you already opened.

129
00:06:17.708 --> 00:06:19.921
So this is gonna be our example dot txt.

130
00:06:19.921 --> 00:06:23.108
And then it says, give me the memory
address that you want to read into.

131
00:06:23.108 --> 00:06:24.752
So you may recall in our previous session,

132
00:06:24.752 --> 00:06:27.768
we did this thing that seemed like a very
strange thing to do in most programming

133
00:06:27.768 --> 00:06:29.567
languages where we took
this request string.

134
00:06:29.567 --> 00:06:33.083
There was already some data there,
and then we just stomped all over it.

135
00:06:33.083 --> 00:06:34.509
It's totally normal thing to do in C.

136
00:06:34.509 --> 00:06:39.087
It is such a normal thing to do in C that
literally the way that you read files in C

137
00:06:39.087 --> 00:06:40.431
is to do exactly that.

138
00:06:40.431 --> 00:06:44.095
This is the official C standard library
approved way to read files is you

139
00:06:44.095 --> 00:06:46.306
literally say, give me a memory address.

140
00:06:46.306 --> 00:06:50.661
And it's, cool, I am going to stomp
all over those bytes that you gave me.

141
00:06:50.661 --> 00:06:54.484
I'm going to just smash whatever's in
the file into this memory address and

142
00:06:54.484 --> 00:06:57.003
whatever's there is just
getting overwritten.

143
00:06:57.003 --> 00:07:00.336
And then the final argument is basically
like up to how many bytes do you

144
00:07:00.336 --> 00:07:01.079
wanna do this?

145
00:07:01.079 --> 00:07:03.226
I'm saying I wanna read 100 bytes.

146
00:07:03.226 --> 00:07:06.348
So it's basically, give me the first
100 bytes of this file and

147
00:07:06.348 --> 00:07:09.830
just smash into this buffer and
just like overwrite, 100 bytes here.

148
00:07:09.830 --> 00:07:12.976
So as we've seen before,
you can guess what would happen.

149
00:07:12.976 --> 00:07:14.136
What if I said 200 here?

150
00:07:14.136 --> 00:07:16.204
It's, cool, it's just gonna keep
writing right off the end of that.

151
00:07:16.204 --> 00:07:18.267
It's gonna override who knows
what memory in my function.

152
00:07:18.267 --> 00:07:20.186
We might get a bus error,
we might get an abort.

153
00:07:20.186 --> 00:07:20.955
Who knows?

154
00:07:20.955 --> 00:07:23.498
Could be fun, don't recommend it.

155
00:07:23.498 --> 00:07:24.699
You want your program to work, right?

156
00:07:24.699 --> 00:07:28.576
You definitely wanna only give it the
address that actually has 100 bytes that

157
00:07:28.576 --> 00:07:31.551
are safe to write into because
that's what Read's gonna do.

158
00:07:31.551 --> 00:07:34.535
C might be the only language where
you call a function called read, and

159
00:07:34.535 --> 00:07:35.960
the first thing it does is write.

160
00:07:35.960 --> 00:07:40.930
The other thing that read does is because
it might not actually write 100 bytes,

161
00:07:40.930 --> 00:07:44.276
like maybe I say,
write 100 bytes into this buffer.

162
00:07:44.276 --> 00:07:45.783
Maybe it only, the file isn't that long.

163
00:07:45.783 --> 00:07:47.508
The file is only like 30 bytes.

164
00:07:47.508 --> 00:07:49.974
Read will return how many
bytes it actually wrote.

165
00:07:49.974 --> 00:07:52.378
In other words,
like how long the file actually was.

166
00:07:52.378 --> 00:07:56.418
So if you get back 100, that might mean
the file is 100 bytes long, but it also

167
00:07:56.418 --> 00:08:00.835
might mean that it's more than 100 bytes
because it's, well, I wrote 100 bytes.

168
00:08:00.835 --> 00:08:03.905
That's how many bytes I wrote
into the thing that you gave me.

169
00:08:03.905 --> 00:08:06.206
The address that you gave me.

170
00:08:06.206 --> 00:08:08.396
Maybe there's more left in the file,
I'm not telling you that.

171
00:08:08.396 --> 00:08:11.772
I'm just telling you what I actually did.

172
00:08:11.772 --> 00:08:15.996
Also, as with the open there is this
little fun special case of if the length

173
00:08:15.996 --> 00:08:19.901
that it returns is negative one,
then that means there was an error.

174
00:08:19.901 --> 00:08:21.946
And we're responsible for
handling read errors in that way.

175
00:08:21.946 --> 00:08:25.160
So again, you just got to read the docs to
know to check for negative one, although,

176
00:08:25.160 --> 00:08:27.199
honestly, you start to use
these things enough, and

177
00:08:27.199 --> 00:08:28.576
it starts to become kind of a habit.

178
00:08:28.576 --> 00:08:29.314
It's, all right,

179
00:08:29.314 --> 00:08:31.712
what's the special magical value
that means an error occurred?

180
00:08:31.712 --> 00:08:35.426
Let's check for that every time
we call one of these functions.

181
00:08:35.426 --> 00:08:36.606
But you can forget it, and

182
00:08:36.606 --> 00:08:39.987
if you do forget it, then you're just
going to end up passing this length of

183
00:08:39.987 --> 00:08:43.068
negative one somewhere else, and
who knows what's gonna happen.

184
00:08:43.068 --> 00:08:47.589
Okay, so, yeah, so if I want to print,
printf, here's how many bytes we actually

185
00:08:47.589 --> 00:08:51.496
read, we can print that out, and
it's gonna say, here's the length.

186
00:08:51.496 --> 00:08:55.312
And and that will tell us basically,
here's what actually happened.

187
00:08:55.312 --> 00:08:58.503
If it was not quite 100
bytes that were read.

