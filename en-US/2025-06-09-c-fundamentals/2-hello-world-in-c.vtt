WEBVTT

1
00:00:00.000 --> 00:00:05.020
&gt;&gt; Richard Feldman: All right, let's
plow on ahead to part 1, Hello, Metal!

2
00:00:05.020 --> 00:00:08.754
This is gonna be like Hello World, but
close to the metal, or a lot closer to

3
00:00:08.754 --> 00:00:12.454
the metal than we normally would be
able to in something like JavaScript.

4
00:00:12.454 --> 00:00:14.951
So, this is essentially just
gonna be Hello World but in C.

5
00:00:14.951 --> 00:00:17.841
And what we're gonna talk about
in this section is not just,

6
00:00:17.841 --> 00:00:21.365
here's how to implement Hello World in C,
which of course is very quick.

7
00:00:21.365 --> 00:00:25.136
But also we're gonna get down into
the details of what's actually going on in

8
00:00:25.136 --> 00:00:26.015
Hello World in C.

9
00:00:26.015 --> 00:00:29.629
Because there actually are so
few steps between what C is doing and

10
00:00:29.629 --> 00:00:32.257
what the hardware is
actually seeing that we can

11
00:00:32.257 --> 00:00:34.902
actually just go all
the way down to that level.

12
00:00:34.902 --> 00:00:37.937
We're not gonna go all the way down to the
hardware level and all the other sections,

13
00:00:37.937 --> 00:00:40.522
but I did want you to get a sense of,
here is how close we are to the metal.

14
00:00:40.522 --> 00:00:43.697
We can actually talk about the actual
instructions that the hardware is seeing

15
00:00:43.697 --> 00:00:44.572
from Hello, World.

16
00:00:44.572 --> 00:00:48.092
We're gonna talk about the performance
implications of being this close to

17
00:00:48.092 --> 00:00:48.811
the hardware.

18
00:00:48.811 --> 00:00:52.942
And finally, we're gonna talk about what
can we do to improve the ergonomics on top

19
00:00:52.942 --> 00:00:55.375
of the basic Hello,
World that we're gonna do.

20
00:00:55.375 --> 00:00:57.783
At first, we're gonna make
a slightly nicer version of Hello,

21
00:00:57.783 --> 00:00:58.774
World a little bit later.

22
00:00:58.774 --> 00:01:01.807
That's a little bit more ergonomic and
maybe more idiomatic.

23
00:01:01.807 --> 00:01:03.885
Okay, so we got our nice metal font here.

24
00:01:03.885 --> 00:01:05.671
Any Iron Maiden fans in the house?

25
00:01:05.671 --> 00:01:10.808
So this is basically the close
to the metal Hello, World in C.

26
00:01:10.808 --> 00:01:14.845
So let's kind of go through
the different parts of what we got here.

27
00:01:14.845 --> 00:01:19.338
So essentially, this pound include here,
we're gonna talk about what the pound sign

28
00:01:19.338 --> 00:01:22.059
means later on,
this is a preprocessor directive.

29
00:01:22.059 --> 00:01:27.047
But basically this just means import
the contents of this library here.

30
00:01:27.047 --> 00:01:30.030
So this is unistd.h, I don't know,
universal standard, or

31
00:01:30.030 --> 00:01:31.114
something like that.

32
00:01:31.114 --> 00:01:34.647
And this is what gives us this right
function that we're using right there.

33
00:01:34.647 --> 00:01:38.099
Main is essentially a function
that returns nothing.

34
00:01:38.099 --> 00:01:42.971
So, C is a type check language,
you do need to actually explicitly

35
00:01:42.971 --> 00:01:46.982
spell out every single type
that you're saying here.

36
00:01:46.982 --> 00:01:49.620
So you do always need to start by saying,

37
00:01:49.620 --> 00:01:52.811
what is the type of my
function's return value?

38
00:01:52.811 --> 00:01:53.820
So in the case of main,

39
00:01:53.820 --> 00:01:57.660
we're saying void because we're basically
saying main is not returning anything.

40
00:01:57.660 --> 00:02:00.722
If we wanted main to return an integer or
something, then instead of void,

41
00:02:00.722 --> 00:02:02.127
we would say [INAUDIBLE] here.

42
00:02:02.127 --> 00:02:05.385
Yeah, then we have the list of arguments.

43
00:02:05.385 --> 00:02:07.666
So in this case, we're saying
main doesn't take any arguments.

44
00:02:07.666 --> 00:02:11.958
And then, basically, this write function,
which is our 1 single function call here,

45
00:02:11.958 --> 00:02:14.893
the number 1 here means we're
gonna write to standard out.

46
00:02:14.893 --> 00:02:18.625
If you gave it the number 2,
that would mean write to standard error.

47
00:02:18.625 --> 00:02:22.595
So these are hard-coded constants,
you could import a file to actually

48
00:02:22.595 --> 00:02:25.795
use a named constant instead
of a hardcoded integer here.

49
00:02:25.795 --> 00:02:26.770
But this one is so

50
00:02:26.770 --> 00:02:31.378
hard-coded that it's actually pretty
universal that you can just write 1.

51
00:02:31.378 --> 00:02:35.485
And also, one of the things that we're
gonna see throughout this course is that

52
00:02:35.485 --> 00:02:38.365
actually in C,
you don't always see in idiomatic C code

53
00:02:38.365 --> 00:02:42.372
necessarily people using constants as
much as you might in other languages.

54
00:02:42.372 --> 00:02:43.134
For example,

55
00:02:43.134 --> 00:02:47.204
it is actually kind of common to see
people use the number 1 instead of true.

56
00:02:47.204 --> 00:02:50.623
C is maybe the original language that
embraces truthiness, among other things.

57
00:02:50.623 --> 00:02:54.638
And they actually do not have, or
at least the original versions of CF.

58
00:02:54.638 --> 00:02:58.543
I think there might be some C
compilers that support this today.

59
00:02:58.543 --> 00:03:03.210
But it's still very common to see people
just instead of writing out T-R-U-E,

60
00:03:03.210 --> 00:03:06.117
they'll just write 1,
cuz it's more concise and

61
00:03:06.117 --> 00:03:08.434
C treats them essentially the same way.

62
00:03:08.434 --> 00:03:10.426
So then we, of course,
have the string Hello, World.

63
00:03:10.426 --> 00:03:13.166
And the 13 here is actually
the length of the string.

64
00:03:13.166 --> 00:03:16.468
So when you're calling the right function,
you need to not only give it the string,

65
00:03:16.468 --> 00:03:18.884
but you also need to tell it what
the length of the string is, or

66
00:03:18.884 --> 00:03:20.817
at least how much of
the string you want to print.

67
00:03:20.817 --> 00:03:23.899
So in this case, when we're doing
a hard-coded string like this, of course,

68
00:03:23.899 --> 00:03:25.102
the length is really obvious.

69
00:03:25.102 --> 00:03:28.750
But if we were using a variable there,
that last argument would allow us to say,

70
00:03:28.750 --> 00:03:30.928
well, I don't wanna
print the entire string,

71
00:03:30.928 --> 00:03:32.636
I wanna print a subset of the string.

72
00:03:32.636 --> 00:03:34.271
So that's just part of what write does.

73
00:03:34.271 --> 00:03:38.987
Also, as we're gonna see, the way that
you detect how long a string is in C,

74
00:03:38.987 --> 00:03:43.871
it's like one of those things that feels
like this is kind of a 1972 thing.

75
00:03:43.871 --> 00:03:46.221
Today this is not really
the choice that people make for

76
00:03:46.221 --> 00:03:47.457
how to design your strings.

77
00:03:47.457 --> 00:03:51.580
Getting the length of a string in C
actually requires going through every

78
00:03:51.580 --> 00:03:54.632
single byte and
counting up all the characters in it.

79
00:03:54.632 --> 00:03:58.218
So that's why, for efficiency reasons,
it's actually just saying, yeah,

80
00:03:58.218 --> 00:04:01.855
just please tell me what the length is if
you already know it cuz I don't wanna have

81
00:04:01.855 --> 00:04:03.907
to go through and
count all of that manually.

82
00:04:03.907 --> 00:04:06.726
Okay, so next let's talk about
what the actual hardware sees.

83
00:04:06.726 --> 00:04:10.057
So, this is gonna be the only section of
the course where we get into assembly

84
00:04:10.057 --> 00:04:10.588
language.

85
00:04:10.588 --> 00:04:12.738
We're not normally gonna be talking
about assembly language, but

86
00:04:12.738 --> 00:04:15.240
we are, for Hello, World purposes,
gonna talk a little bit about assembly.

87
00:04:15.240 --> 00:04:19.871
This will give you an idea of what people
say when they mean portable assembly.

88
00:04:19.871 --> 00:04:22.087
It's much more verbose than C and
also kind of strange.

89
00:04:22.087 --> 00:04:25.685
So don't worry if you don't completely
understand everything we're doing here.

90
00:04:25.685 --> 00:04:28.453
The main purpose of this section
is just to give you a sense of,

91
00:04:28.453 --> 00:04:31.596
here's what is actually going on
with the hardware, not like, hey,

92
00:04:31.596 --> 00:04:34.019
let's actually learn
assembly language right now.

93
00:04:34.019 --> 00:04:38.304
So this right here, this is essentially
a section of the final compiled binary.

94
00:04:38.304 --> 00:04:41.719
So, when you actually run your C compiler
and end up with a binary executable on

95
00:04:41.719 --> 00:04:44.222
your disk,
there's gonna be different sections of it.

96
00:04:44.222 --> 00:04:49.033
One of the sections is gonna have
a whole lot of hard-coded constants.

97
00:04:49.033 --> 00:04:53.253
So, if you ever imagine, if you compile a
single standalone binary that runs Hello,

98
00:04:53.253 --> 00:04:57.138
World, at some point in those bytes has
to be the actual string Hello, World.

99
00:04:57.138 --> 00:05:00.189
It needs to know how to
actually print out that string.

100
00:05:00.189 --> 00:05:03.794
And so those actually do get stored in
a particular section of the binary.

101
00:05:03.794 --> 00:05:05.093
So that's one section.

102
00:05:05.093 --> 00:05:08.604
The C compiler is gonna compile
down the equivalent assembly,

103
00:05:08.604 --> 00:05:12.191
it'll take care of putting that
in a different section for you.

104
00:05:12.191 --> 00:05:15.288
Even though, when we actually wrote our
C code, we wrote that string Hello,

105
00:05:15.288 --> 00:05:16.970
World in the middle of the main function.

106
00:05:16.970 --> 00:05:18.611
The compiler is gonna say, nah,

107
00:05:18.611 --> 00:05:21.609
I know that that goes in a separate
sort of constant section.

108
00:05:21.609 --> 00:05:24.877
LC0 is basically local constant number 0,

109
00:05:24.877 --> 00:05:28.232
[LAUGH] that's what that
abbreviation is for.

110
00:05:28.232 --> 00:05:32.672
So again, the compiler is sort of
gonna generate automatic names for

111
00:05:32.672 --> 00:05:34.595
things in the actual binary.

112
00:05:34.595 --> 00:05:39.681
This offset, flat thing is basically
saying, at this point in the program,

113
00:05:39.681 --> 00:05:44.121
we wanna go load from that local constant,
that section of the binary.

114
00:05:44.121 --> 00:05:48.608
This part right here, this is
the actual body of the main function.

115
00:05:48.608 --> 00:05:53.158
And this basically corresponds
to the exact call to write(1,

116
00:05:53.158 --> 00:05:55.524
"Hello, World!", 13).

117
00:05:55.524 --> 00:05:59.640
So this one function call actually
compiles to four different assembly

118
00:05:59.640 --> 00:06:00.607
instructions.

119
00:06:00.607 --> 00:06:04.179
And actually, believe it or not,
I have alighted some other instructions.

120
00:06:04.179 --> 00:06:08.347
If you actually look at the real assembly
for main, there's some other boilerplate

121
00:06:08.347 --> 00:06:10.994
on either side of this for
setting up meeting itself.

122
00:06:10.994 --> 00:06:15.328
But basically JMP, right,
essentially means there is going to be,

123
00:06:15.328 --> 00:06:18.991
somewhere else in your binary,
a function called write,

124
00:06:18.991 --> 00:06:23.650
which is gonna be compiled in from that
unit STD library that we imported.

125
00:06:23.650 --> 00:06:27.682
And JMP is basically, jump over there,
which means it's basically like a go to.

126
00:06:27.682 --> 00:06:32.217
It's go over there and continue running
those assembly instructions right there.

127
00:06:32.217 --> 00:06:33.349
Before we jump over there,

128
00:06:33.349 --> 00:06:36.514
assembly actually will do a little bit
of prep work with these other things.

129
00:06:36.514 --> 00:06:39.404
So you can see the 1 here
where mov to edi, that 1,

130
00:06:39.404 --> 00:06:44.194
this offset flat thing was the Hello,
World, and then of course there's the 13.

131
00:06:44.194 --> 00:06:47.828
So essentially what these four
instructions are doing, there's one per

132
00:06:47.828 --> 00:06:51.578
argument, is each of them is sort of
preparing the state of the processor for

133
00:06:51.578 --> 00:06:53.170
executing the right function.

134
00:06:53.170 --> 00:06:55.894
So you can think of these as sort of like
they're writing to global variables.

135
00:06:55.894 --> 00:06:59.801
And then when you jump to this other
function, the processor's gonna be, cool,

136
00:06:59.801 --> 00:07:02.940
I expected these global variables
to have already been populated,

137
00:07:02.940 --> 00:07:04.773
I'm just gonna go ahead and read them.

138
00:07:04.773 --> 00:07:09.020
So these mov instructions are essentially
saying, set these CPU memory slots,

139
00:07:09.020 --> 00:07:12.407
these are called registers,
it's the lowest level of memory.

140
00:07:12.407 --> 00:07:15.505
So every CPU has a hard-coded
number of registers.

141
00:07:15.505 --> 00:07:19.694
They're essentially, imagine if you had a
certain fixed hard-coded number of global

142
00:07:19.694 --> 00:07:23.500
mutable variables that you could use to
have your functions talk to each other.

143
00:07:23.500 --> 00:07:26.603
I know, assembly language is read,
they're almost great,

144
00:07:26.603 --> 00:07:28.462
that's kind of what registers are.

145
00:07:28.462 --> 00:07:32.075
So basically, this right function which
comes from that unit STD library,

146
00:07:32.075 --> 00:07:34.626
that's actually provided
by the operating system.

147
00:07:34.626 --> 00:07:37.986
So I don't need to mpm install anything or
an equivalent to that.

148
00:07:37.986 --> 00:07:43.632
These libraries are basically just kind of
built into the OS in the same way that,

149
00:07:43.632 --> 00:07:46.885
in JavaScript you have
the math is built-in.

150
00:07:46.885 --> 00:07:50.197
You can say math.random, you don't need
to go install a library to get that.

151
00:07:50.197 --> 00:07:53.174
&gt;&gt; Speaker 2: If there's a second
constant, where would it be stored?

152
00:07:53.174 --> 00:07:54.686
&gt;&gt; Richard Feldman: If
there's a second constant,

153
00:07:54.686 --> 00:07:56.592
it would also be stored in a similar way.

154
00:07:56.592 --> 00:08:00.675
Basically what you would see is,
you would see a second section like this.

155
00:08:00.675 --> 00:08:02.524
So basically, in the binary,

156
00:08:02.524 --> 00:08:07.305
there's a whole contiguous chunk of
the binary that is gonna be for constants.

157
00:08:07.305 --> 00:08:08.850
Each of them has their own label.

158
00:08:08.850 --> 00:08:11.738
So, you'd see .LC0, and
then below that you'd see .LC1.

159
00:08:11.738 --> 00:08:16.006
LC1 might not be a string, maybe it's
an array or something like that.

160
00:08:16.006 --> 00:08:18.575
But all of them have
their own sort of labels.

161
00:08:18.575 --> 00:08:23.832
And really all these labels mean,
it's like, from this index in the 1s and

162
00:08:23.832 --> 00:08:27.959
0s in the binary to this index,
here's where the data is.

163
00:08:27.959 --> 00:08:31.023
And this is really just one
of the very few abstractions

164
00:08:31.023 --> 00:08:33.027
that assembly language gives you.

165
00:08:33.027 --> 00:08:36.499
Is instead of having to have that
actual number here, it says,

166
00:08:36.499 --> 00:08:41.162
okay, this refers to wherever that's going
to end up being in the compiled binary.

167
00:08:41.162 --> 00:08:45.546
So you don't have to memorize the actual
individual [LAUGH] number of the location

168
00:08:45.546 --> 00:08:47.036
within the binary, yeah.

169
00:08:47.036 --> 00:08:50.508
&gt;&gt; Speaker 3: So let me know if I'm
getting off track, but those turn into

170
00:08:50.508 --> 00:08:54.613
global variables, even though they
are scoped to the main function?

171
00:08:54.613 --> 00:08:59.284
&gt;&gt; Richard Feldman: In assembly, scope
is not a thing, everything's a global.

172
00:08:59.284 --> 00:09:02.962
At the CPU level,
it's like the CPU has this many registers,

173
00:09:02.962 --> 00:09:04.750
that's what everything is.

174
00:09:04.750 --> 00:09:09.501
Scope is the thing we make up in
software to make our own lives easier.

175
00:09:09.501 --> 00:09:11.003
The hardware has no idea what scope is.

176
00:09:11.003 --> 00:09:13.240
For that matter, the hardware
has no idea what a function is.

177
00:09:13.240 --> 00:09:14.600
So actually back in the day,

178
00:09:14.600 --> 00:09:17.497
you may have heard of procedural
programming as a paradigm.

179
00:09:17.497 --> 00:09:20.960
That was because, at some point,
somebody came up with the idea of,

180
00:09:20.960 --> 00:09:24.364
hey, what if we wrote our programs
around this idea of procedures,

181
00:09:24.364 --> 00:09:28.213
this concept we made up, even though
the hardware doesn't know what it is?

182
00:09:28.213 --> 00:09:31.232
And it's like, yeah, it's actually
a really nice way to program.

183
00:09:31.232 --> 00:09:34.165
Now today, we think of this as just, yeah,
that's just how programming works, but

184
00:09:34.165 --> 00:09:35.364
it's not how the hardware works.

185
00:09:35.364 --> 00:09:39.136
So way back in the day, back in the punch
card era, people weren't necessarily

186
00:09:39.136 --> 00:09:42.648
programming with procedures at all,
because that was a thing we made up.

187
00:09:42.648 --> 00:09:46.469
They might have just been like, yeah,
I don't know, global variables, start

188
00:09:46.469 --> 00:09:50.647
running the program, jumping around, just
go tos everywhere, that's all you need.

189
00:09:50.647 --> 00:09:54.275
So yeah, at the lowest level,
you have no scope.

190
00:09:54.275 --> 00:09:58.968
That's one of the many conveniences
that C introduces on top of assembly and

191
00:09:58.968 --> 00:10:01.402
everything's a global, [LAUGH] yeah.

192
00:10:01.402 --> 00:10:05.606
&gt;&gt; Speaker 4: So
the right function that we're importing,

193
00:10:05.606 --> 00:10:11.013
that's tapping into an OS API and
not a C standard library?

194
00:10:11.013 --> 00:10:14.191
&gt;&gt; Richard Feldman: Yeah, so
the C standard library, generally,

195
00:10:14.191 --> 00:10:16.819
is your way of accessing OS level APIs.

196
00:10:16.819 --> 00:10:21.385
There's a little bit of a distinction
here between Linux and macOS.

197
00:10:21.385 --> 00:10:23.539
I don't wanna get too far
in the weeds on this, but

198
00:10:23.539 --> 00:10:25.241
there's this thing called syscalls.

199
00:10:25.241 --> 00:10:29.662
So one of the assembly instructions you
can do is you can say, run this syscall.

200
00:10:29.662 --> 00:10:33.262
And syscall essentially means,
go tell the operating system, hey,

201
00:10:33.262 --> 00:10:36.017
this program wants to do
this particular operation.

202
00:10:36.017 --> 00:10:39.833
That is sort of a low-level operating
system primitive, and it's,

203
00:10:39.833 --> 00:10:43.015
once again,
gonna have some sort of hard-coded number.

204
00:10:43.015 --> 00:10:45.178
It's like, hey, go to syscall number 17,

205
00:10:45.178 --> 00:10:48.069
which corresponds to writing
just standard out or whatever.

206
00:10:48.069 --> 00:10:52.055
The reason that, for example,
in the case of macOS,

207
00:10:52.055 --> 00:10:55.873
these are not actually
exposed to the programmer.

208
00:10:55.873 --> 00:10:57.237
Technically, if you want, I mean,

209
00:10:57.237 --> 00:10:59.222
you can make whatever bytes
you want go in the binary.

210
00:10:59.222 --> 00:11:02.479
You can be like, macOS uses 17 to mean,
right, to stand it out.

211
00:11:02.479 --> 00:11:05.454
But macOs actually officially says,
do not do that.

212
00:11:05.454 --> 00:11:08.909
Don't compile to hard-coded syscalls
because we're gonna change what those

213
00:11:08.909 --> 00:11:09.587
numbers mean.

214
00:11:09.587 --> 00:11:13.670
So you have to, if you wanna write
a correct future proof macOS binary,

215
00:11:13.670 --> 00:11:16.611
that's gonna work with
future releases of macOS.

216
00:11:16.611 --> 00:11:19.411
They require you to use
the C standard library,

217
00:11:19.411 --> 00:11:23.965
which they feel free to change every time
they release a new version of macOS.

218
00:11:23.965 --> 00:11:27.426
There's also dynamic linking,
which we're not gonna get into either.

219
00:11:27.426 --> 00:11:31.546
But basically the way that they do that is
they can say, okay, if you are calling,

220
00:11:31.546 --> 00:11:35.431
if you're using this as the lowest level
primitive where you call right, and

221
00:11:35.431 --> 00:11:36.838
that's all there is to it.

222
00:11:36.838 --> 00:11:40.233
You're not actually hard-coding
the syscalls, then they can feel free to

223
00:11:40.233 --> 00:11:43.213
change what those numbers mean and
sort of mess around with those.

224
00:11:43.213 --> 00:11:45.150
Linux actually does guarantee that.

225
00:11:45.150 --> 00:11:49.098
So if this were a course on Linux C,
we could actually go one step further and

226
00:11:49.098 --> 00:11:52.231
say, at this point we don't do
a jump to write, we actually

227
00:11:52.231 --> 00:11:56.016
do even more instructions ending in
a syscall to do the write directly.

228
00:11:56.016 --> 00:11:58.587
Because Linux does have
a hardcore guarantee of, yeah,

229
00:11:58.587 --> 00:12:01.008
if we said 17 means that,
17 means that forever.

230
00:12:01.008 --> 00:12:02.187
And you can guarantee that,

231
00:12:02.187 --> 00:12:04.998
because we're gonna promise not
to break that in future releases.

232
00:12:04.998 --> 00:12:07.233
MacOS and Windows do not do that.

233
00:12:07.233 --> 00:12:11.320
So typically, the way that people do it
is they'll use the C standard library,

234
00:12:11.320 --> 00:12:15.773
which includes things like unit, STD.h,
in order to provide functions like write,

235
00:12:15.773 --> 00:12:19.494
which are for our purposes as close as
we're gonna get to the metal in this

236
00:12:19.494 --> 00:12:20.718
course [LAUGH] at least.

237
00:12:20.718 --> 00:12:24.715
Because if you wanna write something
that's portable across operating systems,

238
00:12:24.715 --> 00:12:26.722
that is really as low
level as you can get.

239
00:12:26.722 --> 00:12:29.629
Okay, so one question you might have is,
how fast does this program run?

240
00:12:29.629 --> 00:12:31.736
Let's benchmark it.

241
00:12:31.736 --> 00:12:34.701
We don't really need to benchmark it,
[LAUGH] because the answer is,

242
00:12:34.701 --> 00:12:38.345
at least unlike macOS, it's literally as
fast as the hardware can possibly run it.

243
00:12:38.345 --> 00:12:41.365
You cannot make Hello,
World run faster than this.

244
00:12:41.365 --> 00:12:45.484
What instructions would you
remove to make it go faster?

245
00:12:45.484 --> 00:12:48.932
If you're using the operating
system abstraction of write,

246
00:12:48.932 --> 00:12:52.775
which is, again, what you're
required to do on macOS and Windows,

247
00:12:52.775 --> 00:12:55.777
there's just the bare minimum,
it's all there is.

248
00:12:55.777 --> 00:12:56.699
You gotta, say,

249
00:12:56.699 --> 00:13:00.398
call the write function in order to
actually print to the standard out.

250
00:13:00.398 --> 00:13:02.955
And you need to give the write
function the arguments that it needs.

251
00:13:02.955 --> 00:13:05.320
These are literally the hardware
instructions to do that.

252
00:13:05.320 --> 00:13:08.256
Then, of course,
you need to string Hello, World itself.

253
00:13:08.256 --> 00:13:12.879
There's nowhere to go,
you can't make the C program any

254
00:13:12.879 --> 00:13:17.706
faster on macOS and Windows,
because this is all there is.

255
00:13:17.706 --> 00:13:20.307
So this is a really cool example, I think,

256
00:13:20.307 --> 00:13:24.809
of the types of strategies that we use
to get maximum performance out of C.

257
00:13:24.809 --> 00:13:27.424
It's not that we're doing anything fancy,
it's almost the opposite.

258
00:13:27.424 --> 00:13:29.438
It's that C is taking your code and

259
00:13:29.438 --> 00:13:33.751
generating the absolute bare minimum
amount of assembly instructions.

260
00:13:33.751 --> 00:13:35.437
Cuz remember, PDP 11, right?

261
00:13:35.437 --> 00:13:39.930
[LAUGH] 120, whatever, kilobytes of RAM.

262
00:13:39.930 --> 00:13:45.392
120 kilohertz processor, single core,
yeah, you didn't wanna waste any

263
00:13:45.392 --> 00:13:50.708
cycles back then on things like garbage
collection and objects and whatnot.

264
00:13:50.708 --> 00:13:53.547
So it is literally unbeatably fast.

265
00:13:53.547 --> 00:13:56.273
You can make a programming language
that's more ergonomic than C, but

266
00:13:56.273 --> 00:13:58.500
you cannot make a programming
language that, at least for

267
00:13:58.500 --> 00:14:01.010
this use case, is faster than C,
it's literally not possible.

268
00:14:01.010 --> 00:14:05.110
So now we are as close to the middle
as you can get, congratulations.

269
00:14:05.110 --> 00:14:07.341
All right, yeah, and also,

270
00:14:07.341 --> 00:14:11.732
the right function could be doing
stuff that could get faster.

271
00:14:11.732 --> 00:14:16.046
But again, if the operating system,
as macOS and Windows do, is saying,

272
00:14:16.046 --> 00:14:18.111
this is what we're providing you.

273
00:14:18.111 --> 00:14:21.386
We don't have as programmers the ability
to make that go faster unless

274
00:14:21.386 --> 00:14:24.437
you wanna fork the operating system
kernel, then you can go in and

275
00:14:24.437 --> 00:14:25.955
rebuild the operating system.

276
00:14:25.955 --> 00:14:27.715
Okay, fine, but
we're not generally doing that,

277
00:14:27.715 --> 00:14:29.797
[LAUGH] we're making stuff that
runs in the operating system.

