WEBVTT

1
00:00:00.505 --> 00:00:02.148
Let's do the exercise for part 2.

2
00:00:02.148 --> 00:00:07.145
So moving on right here.

3
00:00:07.145 --> 00:00:10.745
Let's close one, okay, so
first we're gonna once again build and

4
00:00:10.745 --> 00:00:11.703
run the program.

5
00:00:11.703 --> 00:00:15.356
So, I'm just gonna copy and paste this I'm
gonna leave that one open just in case we

6
00:00:15.356 --> 00:00:16.778
wanna refer to it later, oops.

7
00:00:16.778 --> 00:00:20.890
I need to go into the exercises again,
hmm, okay.

8
00:00:20.890 --> 00:00:24.733
So essentially, what we're seeing
here is that HTTP, 1.1 200 okay, and

9
00:00:24.733 --> 00:00:27.632
it says that output was from right,
and this is from printf.

10
00:00:27.632 --> 00:00:30.019
And then here's the same thing, and

11
00:00:30.019 --> 00:00:33.799
let's go take a look at what
the differences are in there.

12
00:00:33.799 --> 00:00:38.031
So first it says, let's try replacing
this number 15 with a call to strlen and

13
00:00:38.031 --> 00:00:40.954
then you have to remember
to include string.h above.

14
00:00:40.954 --> 00:00:44.310
So, this is essentially going to be like
calling right just like we did before,

15
00:00:44.310 --> 00:00:46.280
but now that we've made
header be a variable.

16
00:00:46.280 --> 00:00:50.580
Let's actually just use strlen
instead of like hard coding

17
00:00:50.580 --> 00:00:53.077
the length like we did in part one.

18
00:00:53.077 --> 00:00:55.201
After you're done using that,

19
00:00:55.201 --> 00:00:59.614
now try introducing a null terminator
in the middle of the string.

20
00:00:59.614 --> 00:01:01.490
So C allows you to write
backslash zero and

21
00:01:01.490 --> 00:01:05.039
what backslash zero means kind of similar,
like how backslash n is a new line.

22
00:01:05.039 --> 00:01:08.486
Backslash zero is basically like write
a zero byte at this exact point,

23
00:01:08.486 --> 00:01:10.674
you can do this anywhere
you wanted a string.

24
00:01:10.674 --> 00:01:14.653
So, for example, like you could put it
right after the HTTP, sorry, HTTP and

25
00:01:14.653 --> 00:01:17.307
HTTP, and
just say backslash zero right there, and

26
00:01:17.307 --> 00:01:20.047
you might be able to predict
what that's going to do.

27
00:01:20.047 --> 00:01:24.482
But try to make a guess of what you
think it's gonna do before you actually

28
00:01:24.482 --> 00:01:27.694
run the program and
then run it and see what happens.

29
00:01:27.694 --> 00:01:29.646
Okay, and then we have the second
thing that's like, hey,

30
00:01:29.646 --> 00:01:31.271
that output was from right,
this is from printf.

31
00:01:31.271 --> 00:01:34.935
And now we can try changing the %s here to
%zud, there's gonna be a little compiler

32
00:01:34.935 --> 00:01:38.712
warning, but you can just ignore that and
that's gonna print out the memory address.

33
00:01:38.712 --> 00:01:42.525
We can actually see what that is and
that's gonna be different depending on

34
00:01:42.525 --> 00:01:45.080
what machine you're running on,
potentially.

35
00:01:45.080 --> 00:01:49.629
And then finally, try changing this back
to percent s, and then replace the printfs

36
00:01:49.629 --> 00:01:53.680
last argument, which was right now header,
with this argument instead.

37
00:01:53.680 --> 00:01:56.798
And then also try it with the number
zero instead of that number and

38
00:01:56.798 --> 00:01:59.590
you can see some interesting stuff for
what those prints.

39
00:02:04.209 --> 00:02:07.441
&gt;&gt; Richard Feldman: Let's go through the
solutions really quick, so to begin with,

40
00:02:07.441 --> 00:02:11.460
we've just got this, we'll just make
sure that's working okay, looks good.

41
00:02:11.460 --> 00:02:13.656
So now we can go ahead and
delete this part,

42
00:02:13.656 --> 00:02:17.807
so first thing we're gonna do is replace
the 15 with a call to strlen of header.

43
00:02:17.807 --> 00:02:21.530
So again, remembering that strlen is going
to receive this actual memory address, so

44
00:02:21.530 --> 00:02:22.759
sterland takes an integer.

45
00:02:22.759 --> 00:02:25.711
The recurring theme that we're gonna see
throughout this course is a lot of C

46
00:02:25.711 --> 00:02:27.335
functions actually just take integers.

47
00:02:27.335 --> 00:02:30.455
They just might have fancier types,
but at runtime they're all integers,

48
00:02:30.455 --> 00:02:33.443
how does it know where the end of
the strength is to calculate the length?

49
00:02:33.443 --> 00:02:35.978
Well, it's just gonna keep walking
until it gets to a zero byte.

50
00:02:35.978 --> 00:02:38.626
Now we do have an error here,
which is basically saying like, hey,

51
00:02:38.626 --> 00:02:41.003
this is an undeclared library function,
been fair enough.

52
00:02:41.003 --> 00:02:45.098
And the solution to that is we're just
going to go grab string dot h, and

53
00:02:45.098 --> 00:02:48.593
then we're all set so
this should do exactly the same thing.

54
00:02:48.593 --> 00:02:52.389
The only difference is that now it's
computing the length of the string.

55
00:02:52.389 --> 00:02:54.993
Normally, this would be a runtime,
but after optimizations,

56
00:02:54.993 --> 00:02:57.114
it's actually going to be
done at compile time, and

57
00:02:57.114 --> 00:02:59.642
we won't actually have to wait for
it to walk that at runtime.

58
00:02:59.642 --> 00:03:04.474
Okay, now that we're using strlen, we can
mess this up by adding a backslash zero in

59
00:03:04.474 --> 00:03:07.754
here somewhere so
that's essentially going to insert.

60
00:03:07.754 --> 00:03:10.370
We're gonna have three normal bytes,
then we're gonna have a zero byte,

61
00:03:10.370 --> 00:03:11.833
we're gonna have a bunch of other bytes.

62
00:03:11.833 --> 00:03:13.535
But because write is like,

63
00:03:13.535 --> 00:03:18.049
give me how many bytes you want to write,
now it's gonna truncate that.

64
00:03:18.049 --> 00:03:22.405
It's just gonna say HTTP, okay and notice
that this affects not only write, but

65
00:03:22.405 --> 00:03:25.130
also printf,
because printf is automatically doing

66
00:03:25.130 --> 00:03:27.748
the thing that we are now
doing manually and write.

67
00:03:27.748 --> 00:03:31.073
In other words, printf is under
the hood doing that same thing,

68
00:03:31.073 --> 00:03:35.090
like just keep marching along the array
until we hit a zero byte and then stop.

69
00:03:35.090 --> 00:03:38.459
So if you put a zero byte in the middle
of your string, and then printf it,

70
00:03:38.459 --> 00:03:41.019
it's just like I guess that's
where the string ends.

71
00:03:41.019 --> 00:03:44.352
I hit the zero, so there might be more
stuff after that, you kind of intended to

72
00:03:44.352 --> 00:03:47.750
be part of the string, but printf and
strlen both are just like, I don't know.

73
00:03:47.750 --> 00:03:51.794
I saw a null terminator, so I guess
that's the end of the string, again,

74
00:03:51.794 --> 00:03:52.716
an example of C.

75
00:03:52.716 --> 00:03:56.432
There are no guardrails on
this stuff with C, cool.

76
00:03:56.432 --> 00:03:58.535
I'm gonna go ahead and
just put that back, though, so

77
00:03:58.535 --> 00:04:00.150
we can actually see our real HTTP header.

78
00:04:00.150 --> 00:04:03.563
And now we're gonna change this
percent S to percent ZUD, and

79
00:04:03.563 --> 00:04:08.037
there is gonna be a little compiler
warning, but we're just gonna ignore that.

80
00:04:08.037 --> 00:04:08.881
And basically,

81
00:04:08.881 --> 00:04:12.800
what this is doing is now over here we're
printing out the actual string, but

82
00:04:12.800 --> 00:04:17.097
in print F with the ZUD, that's saying,
okay, treat this as a 64-bit integer.

83
00:04:17.097 --> 00:04:21.108
And it's like, yeah, I'll just print that
out for you, now in this case, you might

84
00:04:21.108 --> 00:04:24.984
notice that when I print this out, I'm
seeing slightly different numbers here.

85
00:04:24.984 --> 00:04:28.434
So, they all start with four, three,
something, something, something.

86
00:04:28.434 --> 00:04:33.972
But they do actually end up with, I guess
we don't need the Z, sorry, we don't need

87
00:04:33.972 --> 00:04:39.049
the zud, I guess it's just zu, because
there's a little D on the end there.

88
00:04:39.049 --> 00:04:42.171
But yeah, so this address does
actually change a little bit.

89
00:04:42.171 --> 00:04:44.907
So, and the reason for
that is that basically

90
00:04:44.907 --> 00:04:49.454
what we are seeing [LAUGH] is that
the memory address is slightly different.

91
00:04:49.454 --> 00:04:51.550
Now, you might be wondering why
is the memory address different?

92
00:04:51.550 --> 00:04:53.867
Like, isn't the compiler deterministic?

93
00:04:53.867 --> 00:04:57.456
Why is the compiler generating
a slightly different memory address for

94
00:04:57.456 --> 00:04:59.727
string the same string and
the final binary,

95
00:04:59.727 --> 00:05:02.684
why would it be generating
a slightly different address?

96
00:05:02.684 --> 00:05:05.185
And the answer is actually it's not.

97
00:05:05.185 --> 00:05:08.901
What's actually happening here is that
there is a security feature that operating

98
00:05:08.901 --> 00:05:11.766
systems will do called address
space randomization, I think,

99
00:05:11.766 --> 00:05:12.785
something like that.

100
00:05:12.785 --> 00:05:16.983
At any rate, the point is that because
a lot of exploits will actually try to do

101
00:05:16.983 --> 00:05:21.459
things like what we did in part one, where
we Intentionally read too much memory.

102
00:05:21.459 --> 00:05:25.675
We're trying to like get secrets in order
to try to defeat hackers that are trying

103
00:05:25.675 --> 00:05:27.538
to do that type of thing on purpose.

104
00:05:27.538 --> 00:05:31.063
What they'll do is they'll
actually randomize the offsets of

105
00:05:31.063 --> 00:05:32.266
things a little bit.

106
00:05:32.266 --> 00:05:34.536
So you take the same exact
compiled binary, and

107
00:05:34.536 --> 00:05:36.248
you run it in the operating system.

108
00:05:36.248 --> 00:05:39.521
The operating system will just move
the addresses around a little bit.

109
00:05:39.521 --> 00:05:44.040
And also go in and like tweak whenever
the binary goes and like ask for things.

110
00:05:44.040 --> 00:05:47.742
Just to intentionally try to mess around
with hackers who are trying to be like,

111
00:05:47.742 --> 00:05:51.303
I know if I put in this magic number right
here, it's gonna get the right offset.

112
00:05:51.303 --> 00:05:55.346
I know where the secret is exactly
78,000 bytes after this thing, so

113
00:05:55.346 --> 00:05:57.720
if I inject this perfect
number right here,

114
00:05:57.720 --> 00:06:00.751
then I get the secret right there and
then I continue on.

115
00:06:00.751 --> 00:06:04.630
They're trying to thwart the hackers
by introducing randomness, so

116
00:06:04.630 --> 00:06:06.932
that the addresses are unpredictable and

117
00:06:06.932 --> 00:06:11.222
therefore hard to do malicious things
to so that's what's happening here.

118
00:06:11.222 --> 00:06:14.566
It's not that the binary itself
is like the compiled binary is

119
00:06:14.566 --> 00:06:16.561
putting these in different places,

120
00:06:16.561 --> 00:06:20.509
but rather that that's the operating
system trying to defeat hackers.

121
00:06:20.509 --> 00:06:24.037
And you can see that in C by just
printing this out as hey, yeah,

122
00:06:24.037 --> 00:06:26.777
this is the actual output
of the address itself.

123
00:06:26.777 --> 00:06:30.666
And we can, in this way, really,
really confirm yeah, for real,

124
00:06:30.666 --> 00:06:32.249
this is a number in memory.

125
00:06:32.249 --> 00:06:36.589
Okay, finally, we're gonna change that
back to %s and then replace the last

126
00:06:36.589 --> 00:06:40.615
argument, which was originally header,
with this argument instead.

127
00:06:40.615 --> 00:06:44.505
So, there is that, so
now we're getting a segmentation fault,

128
00:06:44.505 --> 00:06:47.917
very consistently,
we're not printing anything out.

129
00:06:47.917 --> 00:06:49.290
So why is that happening?

130
00:06:49.290 --> 00:06:51.604
Well, essentially, again,
this is just an integer.

131
00:06:51.604 --> 00:06:54.452
And if I say, basically this
parenthesis is saying like, hey,

132
00:06:54.452 --> 00:06:55.839
I know I wrote an integer here.

133
00:06:55.839 --> 00:07:00.811
But just please choose to interpret
this as if it were a pointer to a,

134
00:07:00.811 --> 00:07:06.942
it's a tar star, it's the, as if it were
the address of the beginning of a string.

135
00:07:06.942 --> 00:07:10.100
And I just picked the number one, two,
three, four, five, six, because this is

136
00:07:10.100 --> 00:07:12.871
a low enough address that it's part
of the operating systems reserved.

137
00:07:12.871 --> 00:07:17.009
You may not ever touch this memory memory,
and so, because I'm basically saying, hey,

138
00:07:17.009 --> 00:07:19.084
let's print it, let's touch that memory.

139
00:07:19.084 --> 00:07:20.365
The operating system is like,

140
00:07:20.365 --> 00:07:23.478
absolutely not I'm shutting this
down immediately segmentation fault.

141
00:07:23.478 --> 00:07:26.192
This is a very reliable way to segfault
your program if you wanna do that.

142
00:07:26.192 --> 00:07:29.726
But again, C doesn't have guardrails on
this if you decide that you want to send

143
00:07:29.726 --> 00:07:33.442
it that memory address instead of the one
of the actual string, C will happily run.

144
00:07:33.442 --> 00:07:36.456
And then the operating system will
segfault for you and then finally,

145
00:07:36.456 --> 00:07:38.617
we can try it with the number
zero instead of that.

146
00:07:38.617 --> 00:07:41.683
And now we will actually see
something that is a little bit nicer,

147
00:07:41.683 --> 00:07:44.213
which is it actually prints
out parentheses, null.

148
00:07:44.213 --> 00:07:48.726
So again, zero meaning null byte, as
opposed to, like the actual number, null,

149
00:07:48.726 --> 00:07:51.827
this is something that printf
just automatically does.

150
00:07:51.827 --> 00:07:54.612
If you give printf a zero here, well,

151
00:07:54.612 --> 00:07:57.931
printf obviously is
like in most languages.

152
00:07:57.931 --> 00:08:00.764
This is where you get a null pointer
exception of course he doesn't

153
00:08:00.764 --> 00:08:03.292
have exceptions so it's like,
well you gave me a null and,

154
00:08:03.292 --> 00:08:04.777
I don't know what to do with that.

155
00:08:04.777 --> 00:08:07.358
I'm certainly not gonna like to go and
try and read memory and

156
00:08:07.358 --> 00:08:09.801
address zero cause that's
definitely gonna seg fault.

157
00:08:09.801 --> 00:08:13.219
So, printf has special case this
to be like, if you give me a zero,

158
00:08:13.219 --> 00:08:15.541
I'm just gonna print
out parentheses null so

159
00:08:15.541 --> 00:08:18.310
that at least you don't have
a seg fault to deal with.

160
00:08:18.310 --> 00:08:22.302
But it doesn't handle any other cases for
you than that, as we saw earlier when I

161
00:08:22.302 --> 00:08:26.368
gave it 1, 2, 3, 4, 5, 6, and
it happily segfaulted, so there you go.

162
00:08:26.368 --> 00:08:30.620
This is an example of not only printing
some basic string operations, but also,

163
00:08:30.620 --> 00:08:34.889
I really, really wanna drive home this
point that this is an integer at runtime.

164
00:08:34.889 --> 00:08:37.073
And so many of the things
that we're gonna see and

165
00:08:37.073 --> 00:08:39.264
see are actually integers
of memory addresses.

166
00:08:39.264 --> 00:08:44.740
And it's just C is deciding how
to interpret those ones and

167
00:08:44.740 --> 00:08:47.998
zeros based on what we ask it to do.

