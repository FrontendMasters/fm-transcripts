WEBVTT

1
00:00:00.139 --> 00:00:03.080
&gt;&gt; Richard Feldman: Let's go through
part three, parsing HTTP requests.

2
00:00:03.080 --> 00:00:06.269
So here we're gonna start by learning
how to define new functions in C,

3
00:00:06.269 --> 00:00:10.005
spoiler alert, it's very similar to
defining main, just a different function.

4
00:00:10.005 --> 00:00:13.313
We'll talk about doing some actual
iteration, so some looping,

5
00:00:13.313 --> 00:00:16.396
copying memory, and
also the concept of read-only memory.

6
00:00:16.396 --> 00:00:19.355
So we talked previously about how
we're gonna send a response back from

7
00:00:19.355 --> 00:00:19.910
our server.

8
00:00:19.910 --> 00:00:21.817
This is what the browser's gonna get.

9
00:00:21.817 --> 00:00:23.027
This is what the browser's
going to send us.

10
00:00:23.027 --> 00:00:25.375
This is gonna be an incoming HTTP request.

11
00:00:25.375 --> 00:00:26.014
It's gonna look like this.

12
00:00:26.014 --> 00:00:29.144
There's a string G-E-T slash blog.

13
00:00:29.144 --> 00:00:34.338
If it's a request to the /blog URL,
HTTP/1.1 is just the protocol, and that's

14
00:00:34.338 --> 00:00:39.188
gonna have a whole bunch of headers like
host and user agent and stuff like that.

15
00:00:39.188 --> 00:00:41.990
Basically what we're gonna do is,
when we get slash blog,

16
00:00:41.990 --> 00:00:44.917
we're just gonna translate that
into a path of a file to open.

17
00:00:44.917 --> 00:00:47.928
So in this case, because this one
didn't end in like a file extension,

18
00:00:47.928 --> 00:00:50.436
it doesn't have like A in it,
we're gonna assume, yeah,

19
00:00:50.436 --> 00:00:53.271
that's basically means they want
blog slash index, dot, HTML.

20
00:00:53.271 --> 00:00:56.397
That's the file we're gonna look for
on the file system.

21
00:00:56.397 --> 00:00:58.920
So also, if it ends in a slash,
same thing.

22
00:00:58.920 --> 00:01:01.211
We're just gonna be like, okay,
that's exactly the same thing.

23
00:01:01.211 --> 00:01:05.159
Look for
inside the blog directory index.html.

24
00:01:05.159 --> 00:01:08.532
So to do this, we're gonna start by
just basically defining the same basic

25
00:01:08.532 --> 00:01:10.899
setup that we had at the end
of the previous section.

26
00:01:10.899 --> 00:01:14.322
Except this time, instead of a response,
we're gonna make a request here.

27
00:01:14.322 --> 00:01:18.705
And then we're gonna do some processing on
it to try to extract the relevant part of

28
00:01:18.705 --> 00:01:20.179
this, namely the /blog.

29
00:01:20.179 --> 00:01:22.685
So to do this, we're gonna write
a function called to_path,

30
00:01:22.685 --> 00:01:24.731
which is going to receive
requests as an argument.

31
00:01:24.731 --> 00:01:25.572
So as a reminder,

32
00:01:25.572 --> 00:01:29.283
request here is gonna be the integer that
is the memory address of this string.

33
00:01:29.283 --> 00:01:33.959
So we're gonna get the memory address of
this beginning of the string right here,

34
00:01:33.959 --> 00:01:38.597
and I'm gonna use that to sort of go find
the part of it that is this actual, blog.

35
00:01:38.597 --> 00:01:42.024
That's gona be the path Path to
the thing that we want to return.

36
00:01:42.024 --> 00:01:44.183
And then finally,
we're going to print out the path.

37
00:01:44.183 --> 00:01:45.500
Now, as we're going to see,

38
00:01:45.500 --> 00:01:48.717
this is a little bit more complicated
in C than it would be in certain other

39
00:01:48.717 --> 00:01:52.023
languages where writing a function
like two path very straightforward.

40
00:01:52.023 --> 00:01:55.141
Gonna be a little bit less straightforward
the way we're going to do it.

41
00:01:55.141 --> 00:01:57.926
Okay, so the first thing is, like,
in order to make a new function in C,

42
00:01:57.926 --> 00:01:59.864
basically, instead of returning an int,
this.

43
00:01:59.864 --> 00:02:04.206
This char star is going to sorry to
path is going to return a char star.

44
00:02:04.206 --> 00:02:08.714
In other words, this is going to return
not the exit code of the program, but

45
00:02:08.714 --> 00:02:13.436
rather the memory address of the actual
path, once we've finished extracting

46
00:02:13.436 --> 00:02:17.604
the path from the request and adding
the index dot HTML to the end of it.

47
00:02:17.604 --> 00:02:21.403
Now, in normalcy, if you do this, like
if you You just write this code exactly

48
00:02:21.403 --> 00:02:23.878
as is,
you're giving it an error that says, hey,

49
00:02:23.878 --> 00:02:27.523
you're trying to call this function
called to path before it was defined.

50
00:02:27.523 --> 00:02:28.906
What's up with that?

51
00:02:28.906 --> 00:02:31.410
So C basically has two
ways you can address this.

52
00:02:31.410 --> 00:02:35.065
One is you can say, I want to forward
declare it, which is basically where you

53
00:02:35.065 --> 00:02:38.215
write out just the type of the function
with a semicolon at the end,

54
00:02:38.215 --> 00:02:40.481
above where you're
actually going to call it.

55
00:02:40.481 --> 00:02:42.663
And this sort of lets see, know,
as it's like coming through and

56
00:02:42.663 --> 00:02:43.543
processing everything.

57
00:02:43.543 --> 00:02:45.953
It says, okay,
there is a function by this name.

58
00:02:45.953 --> 00:02:47.059
Here's the type.

59
00:02:47.059 --> 00:02:47.641
I see what it is.

60
00:02:47.641 --> 00:02:49.010
Great.
When I'm calling it,

61
00:02:49.010 --> 00:02:50.090
I know what its type is,

62
00:02:50.090 --> 00:02:53.385
even though it hasn't been defined
in terms of its implementation yet.

63
00:02:53.385 --> 00:02:57.488
And then later on, you can do it like
that, or you can just simplify things and

64
00:02:57.488 --> 00:03:00.350
just move the function up and
define it before me and.

65
00:03:00.350 --> 00:03:03.261
Again, this is one of those
1972 ergonomics kind of things.

66
00:03:03.261 --> 00:03:07.546
So as an example of the type of string we
might pass in here, we might say input is,

67
00:03:07.546 --> 00:03:10.192
do a string, get slash,
blog, HTTP, 1.1 and

68
00:03:10.192 --> 00:03:13.280
what we want to end up with is
get rid of this initial thing,

69
00:03:13.280 --> 00:03:17.662
which is the method, which will be like
your get, put post, delete one of those.

70
00:03:17.662 --> 00:03:18.567
Get rid of that thing.

71
00:03:18.567 --> 00:03:20.572
Also get rid of the leading slash here.

72
00:03:20.572 --> 00:03:24.268
And then add slash index.html onto
the end of this instead of the HTTP

73
00:03:24.268 --> 00:03:25.360
1.1 type stuff.

74
00:03:25.360 --> 00:03:30.176
Again, remembering that these
are both addresses into memory.

75
00:03:30.176 --> 00:03:32.283
One thing we can do here is we can say,
okay, well,

76
00:03:32.283 --> 00:03:35.762
let's just make another index into memory,
another memory address called start,

77
00:03:35.762 --> 00:03:38.425
which is going to initially be
the very beginning of this thing.

78
00:03:38.425 --> 00:03:41.854
In other words, this address is going
to be the same as this address.

79
00:03:41.854 --> 00:03:45.124
And what we want to do is we want
to move from that start address,

80
00:03:45.124 --> 00:03:47.532
which is the very beginning of the string,
and

81
00:03:47.532 --> 00:03:50.277
we want to just advance it
until we get to right here.

82
00:03:50.277 --> 00:03:53.740
Because this is the point where we're
at the end of this, like, G, E, T, and

83
00:03:53.740 --> 00:03:55.909
we're like, yeah, we're done parsing that.

84
00:03:55.909 --> 00:03:58.251
So this thing could be a get,
it could be a post.

85
00:03:58.251 --> 00:03:59.311
It could be a put.

86
00:03:59.311 --> 00:03:59.992
We want to find this space.

87
00:03:59.992 --> 00:04:03.882
Phase because that let us know that
we've moved past http verb and

88
00:04:03.882 --> 00:04:07.854
we can now actually get to the thing
we care about which is the path.

89
00:04:07.854 --> 00:04:12.254
So let's just write the logic to sort of
advance this start thing over from this

90
00:04:12.254 --> 00:04:13.799
initial address to there.

91
00:04:13.799 --> 00:04:15.997
Well, to do this, basically,
we can just write a while loop.

92
00:04:15.997 --> 00:04:20.578
So we say, while (start[0] and
start back at 0 essentially means We're

93
00:04:20.578 --> 00:04:23.900
treating this memory address
as essentially an array.

94
00:04:23.900 --> 00:04:26.890
Bracket zero means, you know,
get me the first element of that array.

95
00:04:26.890 --> 00:04:30.935
So essentially what this is saying is
take what's at this memory address,

96
00:04:30.935 --> 00:04:34.209
give me the byte that's right
at this exact memory address,

97
00:04:34.209 --> 00:04:37.948
and keep looping until we hit a space
at which point the loop will end.

98
00:04:37.948 --> 00:04:40.613
And then at the end of the loop, we're
gonna do start equals start plus one.

99
00:04:40.613 --> 00:04:43.716
Don't worry, we will change this to a for
loop later, [LAUGH] But for

100
00:04:43.716 --> 00:04:45.518
now we're just gonna do it wild style.

101
00:04:45.518 --> 00:04:48.238
And basically this is a way of saying,
okay,

102
00:04:48.238 --> 00:04:50.607
I want to just move this address up one.

103
00:04:50.607 --> 00:04:53.974
I'm just gonna take this actual integer,
because again, this is a memory address,

104
00:04:53.974 --> 00:04:54.921
and just increment it.

105
00:04:54.921 --> 00:04:56.802
Just move one slot at a time.

106
00:04:56.802 --> 00:05:01.235
And as we're doing this, we're going to
effectively be going one character at

107
00:05:01.235 --> 00:05:04.890
a time Until eventually we end up
with the character being space.

108
00:05:04.890 --> 00:05:07.463
You can do as a shorthand instead
of start equals start plus one.

109
00:05:07.463 --> 00:05:08.982
You can do start plus equals one.

110
00:05:08.982 --> 00:05:13.554
And of course this being C, you can make
it even shorter and say start plus plus.

111
00:05:13.554 --> 00:05:16.101
And if you're ever wondering,
this is where the name C++ comes from.

112
00:05:16.101 --> 00:05:20.319
It's intended to be a sort of a joke of
like you take C and you increment it,

113
00:05:20.319 --> 00:05:21.090
you know.

114
00:05:21.090 --> 00:05:24.698
Rather than rather than
maybe getting a new version.

115
00:05:24.698 --> 00:05:27.225
It's like, well, we just took it and
mutated it in place,

116
00:05:27.225 --> 00:05:28.650
which is a very C like thing to do.

117
00:05:28.650 --> 00:05:32.338
Okay, next thing we're gonna do is
we're gonna check to see if we have

118
00:05:32.338 --> 00:05:33.309
ended the string.

119
00:05:33.309 --> 00:05:36.874
So one of the things that's very important
when you're reading memory like this, is

120
00:05:36.874 --> 00:05:40.262
to make sure that we don't sort of go off
the end of the diving board, so to speak.

121
00:05:40.262 --> 00:05:42.865
And enter into a undefined territory.

122
00:05:42.865 --> 00:05:47.762
So we need to make sure that as we are
reading these contents of memory that we

123
00:05:47.762 --> 00:05:51.028
don't actually read past
the end of the string and

124
00:05:51.028 --> 00:05:54.718
into other other other parts
of the program's memory.

125
00:05:54.718 --> 00:05:56.438
So this is a manual way of doing that.

126
00:05:56.438 --> 00:06:00.106
It's saying, basically, okay, as we're
going through and looking at these things.

127
00:06:00.106 --> 00:06:03.283
Maybe we haven't found the space yet, but
maybe we did hit the end of the string,

128
00:06:03.283 --> 00:06:04.522
which is this backslash zero.

129
00:06:04.522 --> 00:06:05.724
In other words, a zero byte.

130
00:06:05.724 --> 00:06:08.455
You could also just literally write
a zero there instead of putting

131
00:06:08.455 --> 00:06:09.340
it in single quotes.

132
00:06:09.340 --> 00:06:13.697
The single quote syntax is essentially
a way to convert like ASCII or

133
00:06:13.697 --> 00:06:18.065
UTF-8 characters into the actual
like underlying numbers here.

134
00:06:18.065 --> 00:06:19.869
So for the null.

135
00:06:19.869 --> 00:06:20.800
That is to say, 0.

136
00:06:20.800 --> 00:06:21.705
You can write it either way.

137
00:06:21.705 --> 00:06:23.853
The compiler will accept either happily.

138
00:06:23.853 --> 00:06:27.451
But the point here is that this is
basically checking for the edge case of,

139
00:06:27.451 --> 00:06:30.659
what if we ran into the end of
the string before we found our space?

140
00:06:30.659 --> 00:06:34.158
You can simplify this even further,
and this is also idiomatic C,

141
00:06:34.158 --> 00:06:35.229
by saying not that.

142
00:06:35.229 --> 00:06:40.061
Because the not, like the bang operator
in C, literally just says, like,

143
00:06:40.061 --> 00:06:41.733
Is it double equals zero?

144
00:06:41.733 --> 00:06:43.453
That's that's really all it's doing.

145
00:06:43.453 --> 00:06:45.976
So there is no separate
concept of like true and

146
00:06:45.976 --> 00:06:48.251
false as distinct from like zero and one.

147
00:06:48.251 --> 00:06:51.928
Actually true is defined to be one,
but actually like something that's

148
00:06:51.928 --> 00:06:55.602
false has to be zero, and truthy means
any, any number other than zero,

149
00:06:55.602 --> 00:06:59.242
which is kind of where that original
concept of truthiness comes from.

150
00:06:59.242 --> 00:07:00.662
And that's actually based on the hardware.

151
00:07:00.662 --> 00:07:03.500
Hardware basically has
zero is special case,

152
00:07:03.500 --> 00:07:06.420
then non zero is sort of
the other Boolean case.

153
00:07:06.420 --> 00:07:10.516
All the non zeros are considered
equivalent to the hardware when it comes

154
00:07:10.516 --> 00:07:12.742
to branching conditionals and stuff.

155
00:07:12.742 --> 00:07:16.280
So basically we're saying, okay, did we
hit the end of the string prematurely?

156
00:07:16.280 --> 00:07:18.267
If so, then we're going to early return,

157
00:07:18.267 --> 00:07:21.814
breaking out of the loop All the way out
of the function and just return null.

158
00:07:21.814 --> 00:07:26.018
So this constant null like, in all caps,
like here is basically a way of just

159
00:07:26.018 --> 00:07:30.681
saying, like, return zero, except it's
like basically sort of a more semantic,

160
00:07:30.681 --> 00:07:34.884
more idiot, idiomatic way to say I'm
returning a zero that I know is going to

161
00:07:34.884 --> 00:07:37.338
be considered to be
a memory address later.

162
00:07:37.338 --> 00:07:39.657
So null address basically just means.

163
00:07:39.657 --> 00:07:41.256
Memory addresses are integers and memory.

164
00:07:41.256 --> 00:07:45.305
This integer is zero, and you're just
really writing out NULL for the same

165
00:07:45.305 --> 00:07:49.415
reason that you might write out true or
false instead of one or zero, which is

166
00:07:49.415 --> 00:07:54.065
just to say, hey, I'm aware that this is
a memory address that I'm returning here.

167
00:07:54.065 --> 00:07:56.997
By the way, C does allow you to
write it exactly like this, so

168
00:07:56.997 --> 00:07:59.368
you might notice I did not
put curly braces here.

169
00:07:59.368 --> 00:08:03.616
Those curly braces are optional in c
If you want, you can write an if and

170
00:08:03.616 --> 00:08:05.859
then no curly braces right after it.

171
00:08:05.859 --> 00:08:08.823
And it will just take the next
statement that you have and say,

172
00:08:08.823 --> 00:08:10.765
that only applies to this conditional.

173
00:08:10.765 --> 00:08:14.946
And then the thing after it
applies to something else.

174
00:08:14.946 --> 00:08:18.359
Now, a problem with this is that it's
very easy to make the mistake especi.

175
00:08:18.359 --> 00:08:21.765
Especially because code formatters
like prettier and stuff,

176
00:08:21.765 --> 00:08:24.151
are not actually that
common in the c world.

177
00:08:24.151 --> 00:08:27.608
What if you indent like this and you look
at this code and you're like, yeah, that's

178
00:08:27.608 --> 00:08:30.859
all part of the conditional, but it's not
because there's no curly braces there.

179
00:08:30.859 --> 00:08:34.579
So, this actually was the cause of
a pretty famous bug called Hardbleed,

180
00:08:34.579 --> 00:08:38.779
basically what happened was, they traced
it back and tried to figure out how this,

181
00:08:38.779 --> 00:08:42.079
Bug, which turned out to be a very
serious exploit happened, and

182
00:08:42.079 --> 00:08:43.639
it actually came down to this,

183
00:08:43.639 --> 00:08:47.660
where someone had written an if without
curly braces, but indented like this.

184
00:08:47.660 --> 00:08:50.293
And it looked like these were
both part of the conditional, but

185
00:08:50.293 --> 00:08:52.689
actually only the first one
was part of the conditional.

186
00:08:52.689 --> 00:08:54.351
And that was the source of the book.

187
00:08:54.351 --> 00:08:57.037
So the moral of the story is always put
curly braces around your conditional.

188
00:08:57.037 --> 00:08:59.263
This is not worth saving
the extra characters.

189
00:08:59.263 --> 00:09:02.471
So we're going to put those in there,
even though C doesn't require you to.

190
00:09:02.471 --> 00:09:05.666
I mentioned this mainly so that if you see
in the while the C code that's doesn't

191
00:09:05.666 --> 00:09:08.877
have the curly braces there, you
understand that like they're not required.

192
00:09:08.877 --> 00:09:12.687
But as a matter of good practice,
I would always recommend putting them in.

193
00:09:12.687 --> 00:09:16.208
Okay, now I mentioned earlier that we can
convert this while loop to a for loop, and

194
00:09:16.208 --> 00:09:17.937
that's, this is what that looks like.

195
00:09:17.937 --> 00:09:20.017
So for
loops essentially have three in green.

196
00:09:20.017 --> 00:09:24.319
So the first one is basically
the initialization condition.

197
00:09:24.319 --> 00:09:26.684
So this is what's gonna run at
the very beginning of the for loop.

198
00:09:26.684 --> 00:09:29.297
So we're basically saying,
okay, I'm to take a start and

199
00:09:29.297 --> 00:09:30.774
initialize it to be equal to rec.

200
00:09:30.774 --> 00:09:34.480
So this is the same exact thing that we
were doing here in the while loop outside

201
00:09:34.480 --> 00:09:35.005
the loop.

202
00:09:35.005 --> 00:09:36.525
You can just do that as part of the for
loop.

203
00:09:36.525 --> 00:09:39.372
And you can also, if you want,
move the char star.

204
00:09:39.372 --> 00:09:40.188
Inside of there.

205
00:09:40.188 --> 00:09:43.633
And then basically what this will do is
this will say that if I put it in here as

206
00:09:43.633 --> 00:09:44.618
opposed to out here,

207
00:09:44.618 --> 00:09:48.308
it's basically saying that start is only
going to be in scope inside this loop.

208
00:09:48.308 --> 00:09:52.248
And if anybody outside the loop
tries to reference it,

209
00:09:52.248 --> 00:09:54.741
that it's gonna give a compiler.

210
00:09:54.741 --> 00:09:58.088
And then basically we have
the same condition in here,

211
00:09:58.088 --> 00:09:59.701
like keep going until it.

212
00:09:59.701 --> 00:10:00.706
It hits the space.

213
00:10:00.706 --> 00:10:02.832
And then this is what we do on
each iteration of the loop once we

214
00:10:02.832 --> 00:10:03.382
get to the end.

215
00:10:03.382 --> 00:10:04.680
So this thing right here,

216
00:10:04.680 --> 00:10:07.877
just des sugars to exactly the same
thing we had in the wild loop.

217
00:10:07.877 --> 00:10:09.824
Same logic,
just a different way to write it.

218
00:10:09.824 --> 00:10:14.813
C doesn't have a concept for each loop or
any other fancier for syntax than this.

219
00:10:14.813 --> 00:10:19.501
It's really just like initialization
the condition to check at the end of each.

220
00:10:19.501 --> 00:10:23.466
Iteration of the loop and or, sorry,
at the beginning of each iteration

221
00:10:23.466 --> 00:10:27.956
of the loop, and then the operation to run
at the end of each iteration of the loop.

222
00:10:27.956 --> 00:10:32.410
Okay, all right, so we started off with
our start thing, which we actually

223
00:10:32.410 --> 00:10:36.952
are going to keep outside of the loop, so
that we can have it in scope later on.

224
00:10:36.952 --> 00:10:41.177
Because the next thing
we want to do after we.

225
00:10:41.177 --> 00:10:44.364
To get to right here is we want to say,
well, let's throw that space away.

226
00:10:44.364 --> 00:10:45.485
Let's just advance past it.

227
00:10:45.485 --> 00:10:50.013
So having start be explicitly outside the
loop means that we can then just do start

228
00:10:50.013 --> 00:10:53.741
plus plus to say, okay,
we found the space, the loop exited, and

229
00:10:53.741 --> 00:10:56.358
now we're just going to
skip over that space.

230
00:10:56.358 --> 00:11:00.248
So now if we print out start right here,
what it's going to print is again, Again,

231
00:11:00.248 --> 00:11:01.931
because start is a memory address.

232
00:11:01.931 --> 00:11:05.337
It's gonna say, okay,
well that memory address is right here.

233
00:11:05.337 --> 00:11:08.858
So, if we literally say printf start,
and then present S start,

234
00:11:08.858 --> 00:11:13.351
what's gonna get printed out to the screen
is start and then slash blog [INAUDIBLE].

235
00:11:13.351 --> 00:11:15.557
So it's this memory address.

236
00:11:15.557 --> 00:11:21.281
And then print out everything until
we hit the, the null Terminator Now,

237
00:11:21.281 --> 00:11:27.107
what we have right here is our goal,
sorry, our input is a GET and all that.

238
00:11:27.107 --> 00:11:31.242
Let's say that we wanted to
end up with a goal of that.

239
00:11:31.242 --> 00:11:33.951
What we could just say, look,
just overwrite it to 0.

240
00:11:33.951 --> 00:11:37.582
Just take this as the input and just boom,
just set it to the null terminator.

241
00:11:37.582 --> 00:11:40.699
And now when you print it out,
it's gonna be, yeah, Okay, no problem.

242
00:11:40.699 --> 00:11:41.666
There's, an alternator.

243
00:11:41.666 --> 00:11:42.345
Like we encountered it.

244
00:11:42.345 --> 00:11:43.825
We're not gonna print out anything.

245
00:11:43.825 --> 00:11:47.093
But that's not actually our goal, right?

246
00:11:47.093 --> 00:11:50.756
What we actually wanna do is we wanna
end up with this thing right here.

247
00:11:50.756 --> 00:11:54.262
So let's go ahead and
continue doing that right here in place.

248
00:11:54.262 --> 00:11:58.929
So now we're gonna do another for loop,
where this time we are, starting off with,

249
00:11:58.929 --> 00:11:59.999
end equals start.

250
00:11:59.999 --> 00:12:03.109
So we've defined an additional
variable up here called end.

251
00:12:03.109 --> 00:12:04.922
This is gonna be another memory address.

252
00:12:04.922 --> 00:12:07.508
And now what we're trying to do
is we're trying to find out okay.

253
00:12:07.508 --> 00:12:10.771
If this is the start of this
thing where is the end.

254
00:12:10.771 --> 00:12:14.005
So the end is going to be basically where
this other space happens because these

255
00:12:14.005 --> 00:12:14.941
are space separated.

256
00:12:14.941 --> 00:12:20.240
So right now we're just trying to
isolate this slash blog right in here.

257
00:12:20.240 --> 00:12:24.587
Okay so at first, what we're gonna do that
is we're gonna, so I'm basically saying,

258
00:12:24.587 --> 00:12:28.286
like, okay, do exactly the same logic
in here that we did before, where,

259
00:12:28.286 --> 00:12:32.212
we initialize end to be start, and then
we just keep going until we hit a space.

260
00:12:32.212 --> 00:12:33.578
So these two loops are gonna be identical.

261
00:12:33.578 --> 00:12:36.758
Just keep going until you hit a space,
with the added, like,

262
00:12:36.758 --> 00:12:39.889
a little edge case of, and
by the way, if along the way.

263
00:12:39.889 --> 00:12:41.904
We happen to encounter a null bite,

264
00:12:41.904 --> 00:12:44.736
then just early return
from the entire function.

265
00:12:44.736 --> 00:12:46.051
So that's what both of these are doing.

266
00:12:46.051 --> 00:12:51.130
So this will end up with end being
initialized to this space right here.

267
00:12:51.130 --> 00:12:54.352
So we had start, which found the first
space going through the loop.

268
00:12:54.352 --> 00:12:57.016
We did start plus plus
to get to the slash and

269
00:12:57.016 --> 00:13:00.050
then now we have gone
through the loop to get end.

270
00:13:00.050 --> 00:13:02.222
Being right here where the other space is.

271
00:13:02.222 --> 00:13:06.553
Now at this point, we're gonna say, okay,
I wanna ensure that there is a slash here

272
00:13:06.553 --> 00:13:10.518
because you might've noticed if we get
slash blog without a slash at the end,

273
00:13:10.518 --> 00:13:14.253
well, we still wanna include this
slash in order to make this path work.

274
00:13:14.253 --> 00:13:15.568
So that's no big deal.

275
00:13:15.568 --> 00:13:18.959
What we can do here is we can
say end bracket negative one.

276
00:13:18.959 --> 00:13:20.144
And what this means is.

277
00:13:20.144 --> 00:13:23.064
Take this memory address,
subtract one element from it.

278
00:13:23.064 --> 00:13:24.818
So subtract one byte from it.

279
00:13:24.818 --> 00:13:28.356
So in other words, if end is right here,
we're going to subtract one and

280
00:13:28.356 --> 00:13:31.559
get to that G right there, and
basically say, if that is a slash.

281
00:13:31.559 --> 00:13:35.288
In other words, if it was a get of slash,
blog slash, then in that case,

282
00:13:35.288 --> 00:13:37.324
we're going to subtract one from end.

283
00:13:37.324 --> 00:13:40.865
So this is basically a way
of handling in a, very see,

284
00:13:40.865 --> 00:13:43.005
like way the edge case, where?

285
00:13:43.005 --> 00:13:45.344
Okay, well, what if we got slash
blog with a slash at the end.

286
00:13:45.344 --> 00:13:49.197
So / blog / and / blog,
we want to treat those the same way.

287
00:13:49.197 --> 00:13:53.357
This is this does that it basically says
we've ended up with end being at this,

288
00:13:53.357 --> 00:13:55.311
the address of the space right here,

289
00:13:55.311 --> 00:13:57.705
if there is a slash of
that space right there,

290
00:13:57.705 --> 00:14:02.213
then we're just going to move it back one,
so that it ends up being Them right there.

291
00:14:02.213 --> 00:14:06.487
And then basically we say, okay, cool,
if there was a space there, then just move

292
00:14:06.487 --> 00:14:10.292
back one, and otherwise we're actually
going to write a slash in there.

293
00:14:10.292 --> 00:14:13.064
So now what we've done is we've
essentially said, okay, cool,

294
00:14:13.064 --> 00:14:15.188
either there was a slash there and
a space after it,

295
00:14:15.188 --> 00:14:18.055
in which case we moved back to use
the slash that was already there, or

296
00:14:18.055 --> 00:14:20.796
if there wasn't a slash there,
we're going to write one there.

297
00:14:20.796 --> 00:14:24.288
Now note that this right here,
this end[0]=,

298
00:14:24.288 --> 00:14:28.196
this is actually mutating
the original request string.

299
00:14:28.196 --> 00:14:32.515
So we were passed in this request and you
might look at this function signature and

300
00:14:32.515 --> 00:14:36.725
say like, two path takes a request,
and then it returns the path from it.

301
00:14:36.725 --> 00:14:39.361
Therefore, obviously we're
not gonna touch that request.

302
00:14:39.361 --> 00:14:41.679
We're just gonna look at it and
we're gonna make a nice new And

303
00:14:41.679 --> 00:14:43.075
we're going to return the new path.

304
00:14:43.075 --> 00:14:45.422
Well, we could do that, but this is C.

305
00:14:45.422 --> 00:14:49.332
And actually the way that we're doing it
here is the most efficient way to do it.

306
00:14:49.332 --> 00:14:51.894
If we wanted to make an entirely
new string and then return it

307
00:14:51.894 --> 00:14:55.530
from the function, we're going to see how
to do that later, but it would be actually

308
00:14:55.530 --> 00:14:58.778
significantly less efficient than if
we just said, yeah, you know what?

309
00:14:58.778 --> 00:15:01.205
This request, this is my memory,
it's fair game.

310
00:15:01.205 --> 00:15:04.438
I can write to it if I want to, To,
I can mutate it in place if I want to, and

311
00:15:04.438 --> 00:15:06.301
I do want to, I'm going to do it that way.

312
00:15:06.301 --> 00:15:10.570
So we're going to start by just looking at
how to do it in the most efficient way,

313
00:15:10.570 --> 00:15:14.206
where we are actually mutating
the bytes of the original string that

314
00:15:14.206 --> 00:15:17.623
we were passed in in order to get
the path that we want to return.

315
00:15:17.623 --> 00:15:20.340
So essentially, what we're doing
right here is we're saying, Okay,

316
00:15:20.340 --> 00:15:22.042
if we didn't already
have a slash there for.

317
00:15:22.042 --> 00:15:25.873
From the original request now that
we're going to put one right there.

318
00:15:25.873 --> 00:15:28.747
So we're essentially writing
this slash right in here.

319
00:15:28.747 --> 00:15:33.326
And now, basically we've ended
up with regardless of whether or

320
00:15:33.326 --> 00:15:38.419
not there was a slash there at
the beginning, there is a slash there now.

