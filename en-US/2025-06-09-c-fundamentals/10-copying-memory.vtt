WEBVTT

1
00:00:00.000 --> 00:00:03.625
The next thing we're gonna do is we're
going to write the actual index.html

2
00:00:03.625 --> 00:00:05.924
followed by a null
terminator after that slash.

3
00:00:05.924 --> 00:00:08.845
So if you look up here, we can see, okay,

4
00:00:08.845 --> 00:00:12.696
we want to end up with blog
followed by /index.html.

5
00:00:12.696 --> 00:00:15.666
So we've got our slash here, but
we don't have the index html and

6
00:00:15.666 --> 00:00:17.832
also we don't have
the null terminator there.

7
00:00:17.832 --> 00:00:20.676
Like as this thing continues on,
it's got like the ht headers and

8
00:00:20.676 --> 00:00:21.770
all that stuff in there.

9
00:00:21.770 --> 00:00:25.691
There is no null terminator after
the l and html like we want.

10
00:00:25.691 --> 00:00:28.921
So we need to actually
copy all the bytes for

11
00:00:28.921 --> 00:00:33.880
index.html followed by a null
byte after this slash right here.

12
00:00:33.880 --> 00:00:35.195
So here's how we're gonna do that.

13
00:00:35.195 --> 00:00:39.623
So we're gonna call memcpy, or memcpy,
but everybody pronounces it memcpy.

14
00:00:39.623 --> 00:00:42.936
This is another C built-in function
that comes in the standard library.

15
00:00:42.936 --> 00:00:48.052
And I'm gonna pass in end + 1 and
then index.html and 11.

16
00:00:48.052 --> 00:00:49.881
So let's kind of break
down what this is doing.

17
00:00:49.881 --> 00:00:53.978
Basically, so the end + 1,
so end is essentially,

18
00:00:53.978 --> 00:00:57.719
through all the stuff
we've been doing before.

19
00:00:57.719 --> 00:01:02.324
We've arranged it so that the memory
address of end is this trailing slash that

20
00:01:02.324 --> 00:01:06.575
we now have guaranteed to be right here,
the + 1 is going to say, okay,

21
00:01:06.575 --> 00:01:08.554
move it over one slot after that.

22
00:01:08.554 --> 00:01:12.396
So now we've got the memory address of
whatever comes right after the slash.

23
00:01:12.396 --> 00:01:13.680
This is the destination.

24
00:01:13.680 --> 00:01:16.721
I don't know why mem copy takes
the destination first and then the source,

25
00:01:16.721 --> 00:01:17.258
but it does.

26
00:01:17.258 --> 00:01:20.375
So basically we're saying,
look, start writing the bytes.

27
00:01:20.375 --> 00:01:22.375
Copying these bytes to right here.

28
00:01:22.375 --> 00:01:26.887
And then the source thing is index.html,
okay.

29
00:01:26.887 --> 00:01:31.591
And this is going to basically copy it,
basically saying like,

30
00:01:31.591 --> 00:01:36.745
take all of the bytes in this memory
right here and put them right here.

31
00:01:36.745 --> 00:01:41.419
And then 11 is how many bytes we want to
copy from the source to the destination.

32
00:01:41.419 --> 00:01:44.242
So very similarly to the right function,
this is once again,

33
00:01:44.242 --> 00:01:46.268
a function that's taking three integers.

34
00:01:46.268 --> 00:01:49.501
First we have a 64 bit integer which
is the address of the destination, and

35
00:01:49.501 --> 00:01:52.297
then we have a 64 bit integer which
is the address of the source.

36
00:01:52.297 --> 00:01:55.173
And then we have how many bytes do
you want to copy from the source into

37
00:01:55.173 --> 00:01:55.986
the destination?

38
00:01:55.986 --> 00:02:01.963
Now if we look at the characters here,
index, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10.

39
00:02:01.963 --> 00:02:05.409
Why are we passing 11 when there's
only 10 bytes in this string?

40
00:02:05.409 --> 00:02:07.333
Does anyone know?

41
00:02:07.333 --> 00:02:09.827
Why would we pass one more byte to memcpy?

42
00:02:09.827 --> 00:02:12.819
And so we wanna copy one more byte than
the length of this string, which is,

43
00:02:12.819 --> 00:02:13.922
there's 10 bytes here.

44
00:02:13.922 --> 00:02:15.335
We wanna copy 11 bytes over.

45
00:02:15.335 --> 00:02:16.339
The null zero.

46
00:02:16.339 --> 00:02:18.310
Exactly, we want to copy
the null terminator.

47
00:02:18.310 --> 00:02:20.797
So essentially,
we want to write index.html, and

48
00:02:20.797 --> 00:02:23.404
we also want to write that
null terminator over there.

49
00:02:23.404 --> 00:02:27.120
Now, because this is C, there actually
is a null terminator in there.

50
00:02:27.120 --> 00:02:30.609
When I write this string letter like that,
C does that for me automatically, so

51
00:02:30.609 --> 00:02:33.125
I don't need to put in
the explicit backslash zero here.

52
00:02:33.125 --> 00:02:34.736
I can just copy 11 bytes,

53
00:02:34.736 --> 00:02:38.393
and we know that C is going to
have null terminated this for me.

54
00:02:38.393 --> 00:02:41.180
Anyway, there's gonna be
0 byte right after that.

55
00:02:41.180 --> 00:02:43.734
All I need to do is specify
that I want to copy it.

56
00:02:43.734 --> 00:02:48.225
So this is little bit of a using the thing
that we did in the first exercise for

57
00:02:48.225 --> 00:02:53.000
bad purposes to try to break things of
passing in a length to an operation that's

58
00:02:53.000 --> 00:02:55.090
actually longer than the string.

59
00:02:55.090 --> 00:02:56.568
But here we're actually doing it for

60
00:02:56.568 --> 00:02:58.434
justice because this is
actually a good idea.

61
00:02:58.434 --> 00:03:01.353
Like we actually do want to copy
that extra null byte there.

62
00:03:01.353 --> 00:03:02.598
And it's a little bit more efficient.

63
00:03:02.598 --> 00:03:06.162
If we did put a backslash zero here, it
might be a little bit more explicit, but

64
00:03:06.162 --> 00:03:09.834
then it's a waste of a byte because then
we've got two null bytes back to back when

65
00:03:09.834 --> 00:03:12.647
we could just copy in the null
byte we've already got, okay.

66
00:03:12.647 --> 00:03:13.468
So in summary,

67
00:03:13.468 --> 00:03:17.768
what this function call is going to do is
it's going to take our original string,

68
00:03:17.768 --> 00:03:22.219
which now has /blog/ guaranteed whether or
not there was a slash there original.

69
00:03:22.219 --> 00:03:24.659
And then it's going to
copy in this index.html,

70
00:03:24.659 --> 00:03:28.263
it's just going to stomp right over
the HTTP 1.1 that's right there,

71
00:03:28.263 --> 00:03:30.723
followed by the beginning
of a header after this.

72
00:03:30.723 --> 00:03:34.726
So once we've completed this operation,
this original request is useless.

73
00:03:34.726 --> 00:03:36.549
This is no longer a valid HTTP request.

74
00:03:36.549 --> 00:03:39.632
We've just slammed this blog /index.html.

75
00:03:39.632 --> 00:03:42.014
Right into the middle of this thing.

76
00:03:42.014 --> 00:03:45.545
And then what we're gonna do is
return the the initial address there.

77
00:03:45.545 --> 00:03:50.705
Of note, one thing we can do to make this
like a little bit nicer is we can actually

78
00:03:50.705 --> 00:03:56.036
define a variable here called like default
file, which is gonna be index.html.

79
00:03:56.036 --> 00:03:59.303
And then we can make it a little bit
clearer that we are intentionally doing

80
00:03:59.303 --> 00:04:02.269
one more than the length of it
because we want the null terminator.

81
00:04:02.269 --> 00:04:06.234
And we can do the strlen default file +1
with the understanding that since this

82
00:04:06.234 --> 00:04:08.542
is a constant,
like this is a string literal,

83
00:04:08.542 --> 00:04:11.223
this strlen is just gonna
get optimized away anyway.

84
00:04:11.223 --> 00:04:14.540
And this is all going to compile
down to just an 11 there anyway.

85
00:04:14.540 --> 00:04:16.445
But at least if we write it this way,

86
00:04:16.445 --> 00:04:20.890
it's a little bit more obvious that we are
intentionally getting one more byte than

87
00:04:20.890 --> 00:04:23.255
what's actually in the string's length.

88
00:04:23.255 --> 00:04:25.193
Also of note,
normally if I were doing this,

89
00:04:25.193 --> 00:04:27.445
I wouldn't make this be
a local variable like this.

90
00:04:27.445 --> 00:04:29.899
I would actually just
bring it up to the top and

91
00:04:29.899 --> 00:04:32.493
say const char star
default file equals voila.

92
00:04:32.493 --> 00:04:37.083
Const is essentially a special
keyword that you use when you're doing

93
00:04:37.083 --> 00:04:39.980
things like either at the top level, like.

94
00:04:39.980 --> 00:04:41.727
Sort of where the functions are defined.

95
00:04:41.727 --> 00:04:44.412
I think you can also do
it in line if you want.

96
00:04:44.412 --> 00:04:47.492
That basically just says yeah,
this is something that I'm not able to

97
00:04:47.492 --> 00:04:49.748
mutate these other things
I can like start and end.

98
00:04:49.748 --> 00:04:52.506
We can mutate them,
we can change them as we go along.

99
00:04:52.506 --> 00:04:55.325
But this is actually saying, yeah,
no, I'm just defining this once, and

100
00:04:55.325 --> 00:04:57.147
then it's always gonna
be that memory address.

101
00:04:57.147 --> 00:04:58.876
I'm never going to go in and change this.

102
00:04:58.876 --> 00:05:01.900
Also there is a convention of
if something is a constant,

103
00:05:01.900 --> 00:05:03.601
you do it in all caps snake case.

104
00:05:03.601 --> 00:05:08.583
So also known as screaming snake case,
whereas with local variables,

105
00:05:08.583 --> 00:05:12.579
that's the conventions to
just have them be snake case.

106
00:05:12.579 --> 00:05:16.891
Okay, so here's our final
memcpy with this constant, and

107
00:05:16.891 --> 00:05:20.522
this is gonna get us
the index.html that we want.

108
00:05:20.522 --> 00:05:25.058
Cool, okay, and then the final thing that
we're gonna actually do is we're going to

109
00:05:25.058 --> 00:05:26.955
return, the actual, start here.

110
00:05:26.955 --> 00:05:31.702
But this does, so this is going to like
get us back the actual like a blog

111
00:05:31.702 --> 00:05:34.685
/index.html that we, that we want here.

112
00:05:34.685 --> 00:05:38.392
Now there is a problem here,
which is what if the request is too short.

113
00:05:38.392 --> 00:05:39.741
This is gonna come up in the exercise.

114
00:05:39.741 --> 00:05:40.732
So in other words.

115
00:05:40.732 --> 00:05:45.734
Let's suppose I'm doing this memcopy and
I'm copying into an X509 email right here.

116
00:05:45.734 --> 00:05:49.396
But we can see, okay, there's HTTP/1.1.

117
00:05:49.396 --> 00:05:52.719
But what if there wasn't that HTTP/1.1?

118
00:05:52.719 --> 00:05:53.859
Or what if the string ended right here?

119
00:05:53.859 --> 00:05:56.994
There wasn't quite enough space for
that L in there, or maybe for

120
00:05:56.994 --> 00:05:58.087
the null terminator.

121
00:05:58.087 --> 00:06:00.727
What happens if we get
an HTTP request like that?

122
00:06:00.727 --> 00:06:04.195
Well, first of all, this shouldn't come up
in the wild in theory in the sense that

123
00:06:04.195 --> 00:06:06.984
like any browser is just always
gonna send you some headers here.

124
00:06:06.984 --> 00:06:09.124
So you definitely have some
more string to work with.

125
00:06:09.124 --> 00:06:10.133
But in practice,

126
00:06:10.133 --> 00:06:14.312
that's something that like you really
would rather not leave to chance.

127
00:06:14.312 --> 00:06:16.269
You really don't wanna try to
make an assumption about that.

128
00:06:16.269 --> 00:06:18.861
And when you have like a third
party that's sending you this data,

129
00:06:18.861 --> 00:06:20.076
that's how exploits happen.

130
00:06:20.076 --> 00:06:24.594
And this is a good example of what we're
the approach that we're taking right now.

131
00:06:24.594 --> 00:06:28.569
First of all, it's like pretty unusual and
it's not what I would do in most

132
00:06:28.569 --> 00:06:32.181
program language is even though in
c it is like a defensible choice.

133
00:06:32.181 --> 00:06:35.454
But it does have security
downsides if I don't explicitly

134
00:06:35.454 --> 00:06:39.544
go outta my way to check for that case
where I'm doing this memcopy onto.

135
00:06:39.544 --> 00:06:43.006
Destination that doesn't have
enough sort of bytes, like,

136
00:06:43.006 --> 00:06:47.948
semantically for what I'm trying to put
here again, C, there's no guardrails here.

137
00:06:47.948 --> 00:06:51.108
Like, C is really just gonna be,
like, okay, I got three integers.

138
00:06:51.108 --> 00:06:54.845
I've got, like, here's where I'm gonna
write to, here's the memory address that

139
00:06:54.845 --> 00:06:57.521
I'm gonna write from, and
then here's the number of bytes.

140
00:06:57.521 --> 00:07:00.638
If that number of bytes writes off the end
of the string, c does not care at all.

141
00:07:00.638 --> 00:07:03.032
It's like, yeah, I don't know,
whatever memory is there,

142
00:07:03.032 --> 00:07:04.349
I'm just gonna stomp all over it.

143
00:07:04.349 --> 00:07:07.865
So we really want to make
sure to handle that case.

144
00:07:07.865 --> 00:07:10.701
We want to explicitly go out
of our way to check for this.

145
00:07:10.701 --> 00:07:13.669
But this is yet again another
example of memory unsafety in C.

146
00:07:13.669 --> 00:07:17.591
If we don't remember to or don't think
to go out of our way to check for

147
00:07:17.591 --> 00:07:21.937
that case and we just write this code
as is, this could be an exploit vector.

148
00:07:21.937 --> 00:07:26.225
This could result in, if any user agent
doesn't send us a full string that, like,

149
00:07:26.225 --> 00:07:30.271
intentionally omits that, this could do
some very bad things when this memcpy

150
00:07:30.271 --> 00:07:33.368
stops all over whatever bytes
happen to be in memory there.

151
00:07:33.368 --> 00:07:36.288
It could seg faults,
any number of things could happen.

