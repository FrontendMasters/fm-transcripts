WEBVTT

1
00:00:00.000 --> 00:00:02.372
&gt;&gt; Richard Feldman: We've now got
our const char for the DEFAULT_FILE,

2
00:00:02.372 --> 00:00:03.749
which is called index.html.

3
00:00:03.749 --> 00:00:07.169
We've got our two path function,
which takes in the request and

4
00:00:07.169 --> 00:00:10.729
then actually mutates it in place,
and then ends up returning it.

5
00:00:10.729 --> 00:00:14.738
And then back in main,
we have char *req = blah, blah, blah.

6
00:00:14.738 --> 00:00:18.077
So then we're gonna call char
*path = to path (req), and

7
00:00:18.077 --> 00:00:21.358
then this is gonna give us
the memory address of that thing.

8
00:00:21.358 --> 00:00:23.199
It's gonna do those two for
loops that we wrote.

9
00:00:23.199 --> 00:00:28.714
It's gonna translate all this back
into path.html, this is gonna return

10
00:00:28.714 --> 00:00:34.141
the memory address of the beginning
of our brand new blog/index.html,

11
00:00:34.141 --> 00:00:39.151
which as we know is in the giant
global mutable array that is memory.

12
00:00:39.151 --> 00:00:42.011
It's actually like these bytes
right here because we went and

13
00:00:42.011 --> 00:00:45.816
just stomped all over this initial request
and wrote the index.html right here.

14
00:00:45.816 --> 00:00:49.635
And then got back this address right here
that's the beginning of this thing which

15
00:00:49.635 --> 00:00:51.130
all works totally reasonably,

16
00:00:51.130 --> 00:00:53.749
it's just really not what I
would do in most languages.

17
00:00:53.749 --> 00:00:57.179
Like in JavaScript, for example,
strings are not just arbitrary ones and

18
00:00:57.179 --> 00:00:58.004
zeros in memory.

19
00:00:58.004 --> 00:00:59.387
In JavaScript, strings are immutable.

20
00:00:59.387 --> 00:01:02.803
There is no way in JavaScript to say,
go in and stomp all over these bytes.

21
00:01:02.803 --> 00:01:03.796
Go in and mutate the string.

22
00:01:03.796 --> 00:01:07.611
JavaScript just doesn't support that, and
that's the case in plenty of languages.

23
00:01:07.611 --> 00:01:09.374
But in C, they just like,
yeah, it's all bytes.

24
00:01:09.374 --> 00:01:11.667
Go nuts, do whatever you want.

25
00:01:11.667 --> 00:01:16.055
Now, if you run this code exactly as is
what you're gonna get, at least on Mac OS,

26
00:01:16.055 --> 00:01:18.104
is you get what's called a bus error.

27
00:01:18.104 --> 00:01:22.838
This is another one of those inscrutable
errors, much like a segfault.

28
00:01:22.838 --> 00:01:26.193
Does anyone have any guesses as to why
you would get an error when you write

29
00:01:26.193 --> 00:01:26.745
this code?

30
00:01:26.745 --> 00:01:29.091
I'll give you a hint,
it's not because our logic is incorrect.

31
00:01:29.091 --> 00:01:31.533
It's not that we made an arithmetic error.

32
00:01:31.533 --> 00:01:34.768
It's not that we are doing
something that can't work.

33
00:01:34.768 --> 00:01:40.366
It has more to do with where
this actual memory is located.

34
00:01:40.366 --> 00:01:44.814
&gt;&gt; Speaker 2: I was wondering if it's
because you're tampering with data

35
00:01:44.814 --> 00:01:46.129
section memory.

36
00:01:46.129 --> 00:01:47.269
&gt;&gt; Richard Feldman: That's exactly right,
yeah,

37
00:01:47.269 --> 00:01:50.312
it's because you're tampering with [LAUGH]
a data section that you're not allowed to

38
00:01:50.312 --> 00:01:50.834
tamper with.

39
00:01:50.834 --> 00:01:53.474
So remember earlier on,
way back at the beginning,

40
00:01:53.474 --> 00:01:56.714
we talked about this string is
going to get stored in the binary,

41
00:01:56.714 --> 00:02:00.143
in a special section of the binary
that's for things like strings.

42
00:02:00.143 --> 00:02:04.055
Well, that section of the binary is marked
as read only by the operating system.

43
00:02:04.055 --> 00:02:08.543
So, yeah, in theory, if we had this
string somewhere other than that section,

44
00:02:08.543 --> 00:02:11.986
we could go in and like mutate
this thing and stomp all over it.

45
00:02:11.986 --> 00:02:13.268
That would be totally fine.

46
00:02:13.268 --> 00:02:16.318
But because this is a string literal
the way that we've written this here

47
00:02:16.318 --> 00:02:19.073
the operating system's gonna be like,
well, hang on a second.

48
00:02:19.073 --> 00:02:22.913
You're trying to stomp all over some
read-only memory in the binary that you

49
00:02:22.913 --> 00:02:24.282
can't do that, no error.

50
00:02:24.282 --> 00:02:26.524
And the error that it gives,
at least on Mac OS, is bus error.

51
00:02:26.524 --> 00:02:28.299
I think it's a different error on Linux,
but

52
00:02:28.299 --> 00:02:31.161
point is the operating system is not
okay with you mutating that memory.

53
00:02:31.161 --> 00:02:33.809
Other memory you can mutate,
but not that one.

54
00:02:33.809 --> 00:02:39.233
Now, because the way that we've written
this, it is read-only, this doesn't work.

55
00:02:39.233 --> 00:02:44.614
But if we make one very slight change,
which is switching from

56
00:02:44.614 --> 00:02:49.800
char star to array brackets here,
then it works just fine.

57
00:02:49.800 --> 00:02:52.032
Again, I mentioned this
a little bit earlier.

58
00:02:52.032 --> 00:02:55.344
It's not something we're gonna
go into a ton of detail on, but

59
00:02:55.344 --> 00:02:59.283
I do wanna mention that essentially
what this syntax, brackets means is,

60
00:02:59.283 --> 00:03:02.677
in terms of the actual contents
of what this thing has in memory.

61
00:03:02.677 --> 00:03:04.533
It's, once again, just an address.

62
00:03:04.533 --> 00:03:07.232
No problem, nothing fancy going on here.

63
00:03:07.232 --> 00:03:08.917
It's just an integer in memory.

64
00:03:08.917 --> 00:03:13.435
The real difference here is just that what
this is saying to C, like the C compiler,

65
00:03:13.435 --> 00:03:17.825
is I want this to be a memory address, but
I want whatever comes after the equals to

66
00:03:17.825 --> 00:03:20.304
be stored inside the main
functions memory.

67
00:03:20.304 --> 00:03:23.356
Do not put it in the read only section,
like you normally would.

68
00:03:23.356 --> 00:03:24.850
When I use these square brackets,

69
00:03:24.850 --> 00:03:27.073
I'm basically saying I want
an array on the stack.

70
00:03:27.073 --> 00:03:31.722
I want a local, like variable, like actual
part of this functions memory, as it's

71
00:03:31.722 --> 00:03:35.994
running, is this thing, so I can mutate
it, I can do whatever I want with it.

72
00:03:35.994 --> 00:03:38.944
So if you see C code in the wild,
that is using this.

73
00:03:38.944 --> 00:03:41.971
That is a potential reason that they wanna
do that is they want to explicitly say,

74
00:03:41.971 --> 00:03:43.542
I don't want this to be read only memory.

75
00:03:43.542 --> 00:03:45.378
I want it to be local to the function so

76
00:03:45.378 --> 00:03:48.835
that I can mutate it without having
my operating system blow up at me.

77
00:03:48.835 --> 00:03:52.281
Okay, so to summarize all the things
we talked about in part three,

78
00:03:52.281 --> 00:03:55.432
we started off by just looking
at how we define new functions.

79
00:03:55.432 --> 00:03:59.003
And there was that little gotcha there of
the, if you define the function before,

80
00:03:59.003 --> 00:04:02.804
sorry, if you call the function before
it's defined, you'll get a compiler error.

81
00:04:02.804 --> 00:04:03.996
There's two ways to resolve that.

82
00:04:03.996 --> 00:04:07.256
Either you can just move it up earlier so
that it's defined before it gets called,

83
00:04:07.256 --> 00:04:09.156
or you can forward declare
it with a semicolon.

84
00:04:09.156 --> 00:04:12.037
Just write out the type and the name of
the function, put a semicolon at the end,

85
00:04:12.037 --> 00:04:12.732
either way works.

86
00:04:12.732 --> 00:04:14.748
Talked about,
two different styles of iteration.

87
00:04:14.748 --> 00:04:19.188
We saw the wild loop where we just sort
of advancing the memory address of

88
00:04:19.188 --> 00:04:21.265
the start and the end of the path.

89
00:04:21.265 --> 00:04:23.708
Talked about copying memory
with the memcopy function.

90
00:04:23.708 --> 00:04:25.427
So we're just taking
some bytes that we got,

91
00:04:25.427 --> 00:04:28.639
as long as they're not in the read-only
section, and just stomping all over them,

92
00:04:28.639 --> 00:04:31.688
just saying, yeah, just here's my source,
here's my destination, boom.

93
00:04:31.688 --> 00:04:33.529
Just put these bytes over here now.

94
00:04:33.529 --> 00:04:36.408
And then finally,
we talked about read-only memory.

95
00:04:36.408 --> 00:04:38.740
So putting all these things together,

96
00:04:38.740 --> 00:04:43.193
we were able to take that part of the
request and translate it from slash blog

97
00:04:43.193 --> 00:04:47.150
in the middle of this like get
an HTTP 1.1 all these headers, and

98
00:04:47.150 --> 00:04:51.765
get back out the string that we want,
which is blog, slash index, dot HTML.

99
00:04:51.765 --> 00:04:56.717
Whether or not it had a slash at
the end of the blog in the first place.

100
00:04:56.717 --> 00:05:01.907
Cool, any questions before
we get into the exercises.

101
00:05:01.907 --> 00:05:04.338
&gt;&gt; Speaker 3: I have
one semantic question.

102
00:05:04.338 --> 00:05:04.922
&gt;&gt; Richard Feldman: Sure.

103
00:05:04.922 --> 00:05:07.938
&gt;&gt; Speaker 3: I noticed in like
in the function you were writing,

104
00:05:07.938 --> 00:05:11.023
we had both start and
end as addresses in memory, but

105
00:05:11.023 --> 00:05:15.110
you were accessing them with
the brackets and like the zeroth index.

106
00:05:15.110 --> 00:05:15.754
&gt;&gt; Richard Feldman: That's right.
&gt;&gt; Speaker 3: But

107
00:05:15.754 --> 00:05:18.965
then incrementing it without doing
any kind of increment to the index.

108
00:05:18.965 --> 00:05:19.501
&gt;&gt; Richard Feldman: Right?

109
00:05:19.501 --> 00:05:20.247
&gt;&gt; Speaker 3: Why is that?

110
00:05:20.247 --> 00:05:21.604
&gt;&gt; Richard Feldman: So
when we're accessing memory,

111
00:05:21.604 --> 00:05:23.342
we're using this bracket syntax, right?

112
00:05:23.342 --> 00:05:25.980
And we're saying, okay, so
start as a memory address.

113
00:05:25.980 --> 00:05:29.516
Start bracket zero basically means go and
look at this,

114
00:05:29.516 --> 00:05:33.882
the address of this memory and
the bracket 0 is essentially saying,

115
00:05:33.882 --> 00:05:38.041
I want you to go get me whatever
the first element of that array is.

116
00:05:38.041 --> 00:05:41.308
So this is where the actual type comes
into play and makes a difference.

117
00:05:41.308 --> 00:05:44.626
So for example, if I said instead
of char star, I said int star,

118
00:05:44.626 --> 00:05:48.199
what that would affect is that would
affect what bracket zero means.

119
00:05:48.199 --> 00:05:51.496
So that would mean bracket
zero says int is 32 bits,

120
00:05:51.496 --> 00:05:54.429
whereas char is eight
bits start bracket zero,

121
00:05:54.429 --> 00:05:59.367
if start is a char star, means go get me
those eight bits and put them right here.

122
00:05:59.367 --> 00:06:01.074
So give me one byte and put it right here.

123
00:06:01.074 --> 00:06:03.909
If I change this to instar and change
nothing else about the program, well,

124
00:06:03.909 --> 00:06:06.943
first of all, I'd get a compiler error
because it would say type mismatch here.

125
00:06:06.943 --> 00:06:11.046
I'd have to cast it to instar, but
if I cast it to instar, it would still be

126
00:06:11.046 --> 00:06:15.707
the same exact integer in memory, this is
the bytes of the beginning of that thing.

127
00:06:15.707 --> 00:06:19.470
And that byte the address is exactly the
same, no matter whether I'm treating it as

128
00:06:19.470 --> 00:06:21.753
a char star, int star, or
any other kind of star.

129
00:06:21.753 --> 00:06:26.091
The important part here is that the
bracket zero is gonna say, either, go get

130
00:06:26.091 --> 00:06:30.998
me eight bytes from char star, or if it's
int, it's gonna say, go get me 32 bytes.

131
00:06:30.998 --> 00:06:33.769
Sorry, bits, eight bits or 32 bits.

132
00:06:33.769 --> 00:06:37.025
It's basically a way of
saying take this address and

133
00:06:37.025 --> 00:06:40.581
just go look at what's there and
give me the next N bytes.

134
00:06:40.581 --> 00:06:45.593
And how many bytes we're getting is
determined by the type back up here.

135
00:06:45.593 --> 00:06:49.417
So the bracket zero is a way to turn it
from the address of the array into one of

136
00:06:49.417 --> 00:06:50.814
the elements in the array,

137
00:06:50.814 --> 00:06:54.803
whatever that thing's type is by just
going and accessing that much memory.

138
00:06:54.803 --> 00:06:59.139
Meanwhile, start equals start plus
one is working on the address itself.

139
00:06:59.139 --> 00:07:00.459
So because there's no brackets,

140
00:07:00.459 --> 00:07:02.605
we're not actually going and
looking at that address.

141
00:07:02.605 --> 00:07:04.842
We're not going into that memory and
seeing what's there and

142
00:07:04.842 --> 00:07:07.396
like reading some number of bytes
out of it, we are with the brackets.

143
00:07:07.396 --> 00:07:09.002
We're actually changing
the address itself.

144
00:07:09.002 --> 00:07:11.682
We're saying, yeah,
start used to be this integer.

145
00:07:11.682 --> 00:07:15.187
And now we're just incrementing that
actual integer of memory address to move

146
00:07:15.187 --> 00:07:16.522
it over one spot in the array.

