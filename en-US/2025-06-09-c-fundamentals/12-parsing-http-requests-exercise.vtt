WEBVTT

1
00:00:00.000 --> 00:00:02.107
&gt;&gt; Richard Feldman: Let's do an exercise.

2
00:00:02.107 --> 00:00:07.206
All right, so as usual, we're gonna start
off by just building the thing here.

3
00:00:07.206 --> 00:00:11.932
So it says, "Should be
blog/index.html": "/blog/index.html".

4
00:00:11.932 --> 00:00:15.052
This is the world's cheapest unit
test suite [LAUGH] we've got here.

5
00:00:15.052 --> 00:00:16.854
So it's printing out what it expects and

6
00:00:16.854 --> 00:00:18.875
then it's printing out
what it actually is.

7
00:00:18.875 --> 00:00:24.235
This one says, Should be blog/index.html,
but it says /blog/index.html.

8
00:00:24.235 --> 00:00:26.481
So both of these are actually
slightly incorrect right now.

9
00:00:26.481 --> 00:00:28.919
There's a little bit of
an off-by-one error.

10
00:00:28.919 --> 00:00:31.045
So there's this old joke,
you may have heard of it.

11
00:00:31.045 --> 00:00:34.557
The old joke is, what are the two
hardest things in programming?

12
00:00:34.557 --> 00:00:39.101
And they are cache and validation,
naming things on off-by-one errors.

13
00:00:39.101 --> 00:00:41.426
This is an example of an off-by-one error.

14
00:00:41.426 --> 00:00:44.307
So we've almost got it right,
but we just had this,

15
00:00:44.307 --> 00:00:48.777
there's this little slash that's sticking
around and we wanna get rid of that.

16
00:00:48.777 --> 00:00:50.910
So that's part of the exercise,
is fixing that.

17
00:00:50.910 --> 00:00:55.273
Here, we have index.html is what we
expect, but again, there's this,

18
00:00:55.273 --> 00:00:57.160
there's that /index.html.

19
00:00:57.160 --> 00:00:59.874
And then finally,
this last one we want to be null, but

20
00:00:59.874 --> 00:01:01.828
instead it's /blog/index.html.

21
00:01:01.828 --> 00:01:06.099
So in this exercise, we're basically
gonna be doing some bug fixing.

22
00:01:06.099 --> 00:01:10.102
Okay, so this right here might
look familiar from the slides,

23
00:01:10.102 --> 00:01:13.361
this is exactly the same
stuff we're doing there.

24
00:01:13.361 --> 00:01:14.668
We have char *start and end.

25
00:01:14.668 --> 00:01:17.989
We've got our to_path functions
taking in the request address, right?

26
00:01:17.989 --> 00:01:21.184
The for loop, where we start off
at the beginning of the request,

27
00:01:21.184 --> 00:01:24.396
we keep going until we hit a space,
just start++ along the way.

28
00:01:24.396 --> 00:01:28.264
If we encounter a null byte, which
we're using the syntax for that, then

29
00:01:28.264 --> 00:01:31.923
really return null rather than continuing
to read past the end of the string.

30
00:01:31.923 --> 00:01:36.905
We skip over the space right there in
the GET request, and then we keep going to

31
00:01:36.905 --> 00:01:41.289
end begins at start, and
then we just keep progressing best there.

32
00:01:41.289 --> 00:01:46.779
And then finally, we have this little bit
of logic there that's basically saying,

33
00:01:46.779 --> 00:01:51.722
okay, if we end in a slash, like we
got to get for a /blog/, that's fine,

34
00:01:51.722 --> 00:01:56.939
just move the sort of where we're ending
back 1 so that we're now on the slash.

35
00:01:56.939 --> 00:01:58.295
If we didn't have a slash there,

36
00:01:58.295 --> 00:02:00.483
then we're gonna write 1
into the original string.

37
00:02:00.483 --> 00:02:06.733
And then finally, we do the memcpy, where
we're basically overwriting whatever was

38
00:02:06.733 --> 00:02:12.734
in the request string originally to get
the index.html plus the null terminator.

39
00:02:12.734 --> 00:02:15.586
So two things we're gonna do here,
one is a little refactor.

40
00:02:15.586 --> 00:02:17.015
So this is not gonna be a bug fix, but

41
00:02:17.015 --> 00:02:20.801
it's basically, hey, try refactoring out
this +1 by modifying the 'if/else' above.

42
00:02:20.801 --> 00:02:23.470
So there's another way
you could express this so

43
00:02:23.470 --> 00:02:25.889
that the math works out
to be the same thing.

44
00:02:25.889 --> 00:02:29.581
We're just basically making end be
in terms of something else, and

45
00:02:29.581 --> 00:02:31.928
that's a totally reasonable way to do it.

46
00:02:31.928 --> 00:02:35.288
You could do it this way or you could
do it where the math that we do for

47
00:02:35.288 --> 00:02:39.369
end is such that we don't need this +1
here because we've sort of accounted for

48
00:02:39.369 --> 00:02:40.044
it earlier.

49
00:02:40.044 --> 00:02:41.916
So let's start off by trying that out, and

50
00:02:41.916 --> 00:02:44.988
then also try not copying in the null
terminator and see what happens.

51
00:02:44.988 --> 00:02:48.971
[LAUGH] If you make the off by 1
error where you forget the +1 here,

52
00:02:48.971 --> 00:02:52.406
what actually ends up happening
to the running program?

53
00:02:52.406 --> 00:02:54.660
Then we have the actual bug fix,
so it says, hey,

54
00:02:54.660 --> 00:02:58.291
these three are currently not trimming
off the leading slash, so fix that bug.

55
00:02:58.291 --> 00:03:02.931
We wanna modify to_path to actually
fix this so that when we print out

56
00:03:02.931 --> 00:03:07.342
should be this with no slash in front,
we actually trim that off.

57
00:03:07.342 --> 00:03:10.069
Okay, then [LAUGH] Before
fixing this next one,

58
00:03:10.069 --> 00:03:14.310
let's try moving it up to the beginning
of main and just see what happens.

59
00:03:14.310 --> 00:03:18.562
So basically, take all this code and just
move it up to the top of main and run it,

60
00:03:18.562 --> 00:03:20.038
and just see what happens.

61
00:03:20.038 --> 00:03:24.115
This is gonna be another example of a fun
behavior that you can get in C if you do

62
00:03:24.115 --> 00:03:25.598
things in the wrong order.

63
00:03:25.598 --> 00:03:29.215
[LAUGH] And yeah, then finally,
we'll fix this one.

64
00:03:29.215 --> 00:03:32.894
So this is the one where we wanted to
print out null, but instead it's actually

65
00:03:32.894 --> 00:03:36.205
printing out "/blog/index.html",
and we're gonna fix that.

66
00:03:41.794 --> 00:03:43.271
&gt;&gt; Richard Feldman: All right,
so initially,

67
00:03:43.271 --> 00:03:47.704
we have some bugs here where we've got
these leading slashes that we don't want,

68
00:03:47.704 --> 00:03:50.613
and then also this last one
is sort of a separate case.

69
00:03:50.613 --> 00:03:54.091
But before we do that, we're gonna
actually do a little bit of a refactoring.

70
00:03:54.091 --> 00:03:56.594
So this is essentially like, okay,

71
00:03:56.594 --> 00:04:01.454
we want to refactor out this +1
by modifying the 'if/else' above.

72
00:04:01.454 --> 00:04:04.933
So essentially what we're
saying here is like, okay,

73
00:04:04.933 --> 00:04:08.572
let's suppose that end at this
point is not gonna be +1.

74
00:04:08.572 --> 00:04:11.663
Well, that means that
by the end of this if,

75
00:04:11.663 --> 00:04:15.604
we want it to have been one
higher than it was otherwise.

76
00:04:15.604 --> 00:04:17.966
So in this case, basically,
we can say, okay, well for

77
00:04:17.966 --> 00:04:19.658
this branch, let's just delete that.

78
00:04:19.658 --> 00:04:22.697
So instead of doing minus, minus,
when we have this scenario,

79
00:04:22.697 --> 00:04:26.580
we're just not gonna do anything, and that
will have the effect of making end be 1

80
00:04:26.580 --> 00:04:29.873
higher by the time we get down here
than it would have otherwise been.

81
00:04:29.873 --> 00:04:36.105
Similarly, on this branch, we can say,
okay, well, end[0] is '/', we still wanna

82
00:04:36.105 --> 00:04:41.357
do that, but then afterwards we want end
to be one further than it would have been.

83
00:04:41.357 --> 00:04:43.494
So we can just do end++ here.

84
00:04:43.494 --> 00:04:46.698
So now when we rerun this,
we should get exactly the same output,

85
00:04:46.698 --> 00:04:48.868
because what we did was
essentially a no op.

86
00:04:48.868 --> 00:04:51.817
And now we can actually just
get rid of that else, and

87
00:04:51.817 --> 00:04:54.433
we can make this instead
of being an if/else,

88
00:04:54.433 --> 00:04:59.084
we can make it just a single if condition,
and that will do exactly the same thing.

89
00:04:59.084 --> 00:05:01.338
This is an example of
how a lot of times in C,

90
00:05:01.338 --> 00:05:05.858
even things like little refactorings just
often involve doing some arithmetic, and

91
00:05:05.858 --> 00:05:09.455
once again, they're a potential
source of off-by-one errors.

92
00:05:09.455 --> 00:05:12.859
When I'm programming in other languages,
or at least when I'm

93
00:05:12.859 --> 00:05:16.452
programming in other languages
and/or not in this type of a style,

94
00:05:16.452 --> 00:05:20.801
I don't tend to be as concerned about
off-by-one errors because I'm doing a lot

95
00:05:20.801 --> 00:05:25.171
more instead of a for loop with ++, I'm
doing a forEach or something like that.

96
00:05:25.171 --> 00:05:27.304
But when we're doing
this type of programming,

97
00:05:27.304 --> 00:05:30.697
off-by-one errors are just a lot more
prevalent and a lot easier to mess up.

98
00:05:30.697 --> 00:05:34.565
If I forgot this ++ right here,
suddenly I rerun this program and,

99
00:05:34.565 --> 00:05:37.645
wait, blog/index.html,
what's going on there?

100
00:05:37.645 --> 00:05:41.911
So it's very easy to end up with
bugs as a consequence of not quite

101
00:05:41.911 --> 00:05:46.498
remembering to do this or just getting
the math off just a little bit.

102
00:05:46.498 --> 00:05:48.391
So something to be aware of.

103
00:05:48.391 --> 00:05:50.084
Okay, so we did that refactor.

104
00:05:50.084 --> 00:05:52.314
Now we're going to try
removing the +1 here.

105
00:05:52.314 --> 00:05:56.012
So this is essentially just now we're
gonna copy over the index.html, but

106
00:05:56.012 --> 00:05:58.403
we're not gonna copy
over the null terminator.

107
00:05:58.403 --> 00:06:02.546
And now essentially what we're seeing
is just the rest of the original HTTP

108
00:06:02.546 --> 00:06:06.100
request that we're stomping over
now becomes visible [LAUGH] And

109
00:06:06.100 --> 00:06:10.639
actually just keeps showing up until we
run into the null terminator that happened

110
00:06:10.639 --> 00:06:12.436
to be in the original one there.

111
00:06:12.436 --> 00:06:13.822
So again, no guardrails,

112
00:06:13.822 --> 00:06:17.801
if we don't remember to copy over the null
terminator, we're just gonna keep

113
00:06:17.801 --> 00:06:21.619
reading that memory until we encounter
our actual null terminator there.

114
00:06:21.619 --> 00:06:24.733
Cool, okay, and
then now we come to our actual bug.

115
00:06:24.733 --> 00:06:27.191
So these three don't currently
trim off the leading slash.

116
00:06:27.191 --> 00:06:29.833
So what we wanna do is
modify to path to fix them.

117
00:06:29.833 --> 00:06:35.458
So right now we're saying, okay,
GET /blog, HTTP, blah, blah, blah, okay?

118
00:06:35.458 --> 00:06:40.448
And what this should be is blog/index.html
without the slash in front of it,

119
00:06:40.448 --> 00:06:44.240
but when we run the program,
it's /blog/index.html.

120
00:06:44.240 --> 00:06:46.858
So essentially, again,
we have an off-by-one error here.

121
00:06:46.858 --> 00:06:47.721
So how do we fix this?

122
00:06:47.721 --> 00:06:52.525
Well, basically what we wanna do is,
we have our sort of start and end here.

123
00:06:52.525 --> 00:06:55.823
So the end is where we end up with,
I'm sorry,

124
00:06:55.823 --> 00:06:58.880
start and end are basically both slashes.

125
00:06:58.880 --> 00:07:01.857
So the start is the slash
at the beginning here, and

126
00:07:01.857 --> 00:07:04.707
then the end is the slash
at the end of this thing.

127
00:07:04.707 --> 00:07:06.724
So if we don't wanna
deal with this anymore,

128
00:07:06.724 --> 00:07:09.709
basically all we need to do is we
just need to move start over by one.

129
00:07:09.709 --> 00:07:10.952
So let's go ahead and do that.

130
00:07:10.952 --> 00:07:15.548
Basically, right here when we're skipping
over the space, what we could do is, yeah,

131
00:07:15.548 --> 00:07:17.221
okay, we'll show it this way.

132
00:07:17.221 --> 00:07:19.626
So let's say I did a second start++.

133
00:07:19.626 --> 00:07:21.206
So this is gonna do two things.

134
00:07:21.206 --> 00:07:25.634
One is that it's basically
skipping over the space here.

135
00:07:25.634 --> 00:07:27.408
So that's good,
that's what we wanted here.

136
00:07:27.408 --> 00:07:31.815
And the other thing that it's doing
is it's also advancing end with this.

137
00:07:31.815 --> 00:07:36.351
So this is sort of,
it means that end begins on start, and

138
00:07:36.351 --> 00:07:41.184
that essentially means that end
is skipping over one thing.

139
00:07:41.184 --> 00:07:45.022
Now, because all we're doing here is
we're just looping until we see a space,

140
00:07:45.022 --> 00:07:48.305
this actually isn't changing
the semantics of our program at all.

141
00:07:48.305 --> 00:07:53.406
Because the only case where this would
matter is if we specifically happen to be,

142
00:07:53.406 --> 00:07:57.833
immediately after the start was either
an null terminator like this or

143
00:07:57.833 --> 00:08:00.026
a space, then this could matter.

144
00:08:00.026 --> 00:08:02.559
But since it's not either of those,
this isn't a problem.

145
00:08:02.559 --> 00:08:06.445
So the other thing that we could do here
is we could combine these two consecutive

146
00:08:06.445 --> 00:08:07.431
++ into a += 2.

147
00:08:07.431 --> 00:08:09.044
That would also work exactly the same way.

148
00:08:09.044 --> 00:08:12.116
And voila, the bug is now fixed.

149
00:08:12.116 --> 00:08:17.824
Cool, so fix that off-by-one error,
introduce some others, fix them, great.

150
00:08:17.824 --> 00:08:19.706
So now, before fixing this now one,

151
00:08:19.706 --> 00:08:23.550
we're gonna try moving it up to the
beginning of main and see what happens.

152
00:08:25.376 --> 00:08:27.813
&gt;&gt; Richard Feldman: Okay, so
all I did was move it up there.

153
00:08:27.813 --> 00:08:32.033
Boom, abort, this is one of our
new fun no stack trace errors.

154
00:08:32.033 --> 00:08:36.662
We've seen segfault and bus error,
and now we're seeing abort.

155
00:08:36.662 --> 00:08:37.899
So what's going on there?

156
00:08:37.899 --> 00:08:41.035
And why is it that if I put this code
at the end of the file, or sorry,

157
00:08:41.035 --> 00:08:43.055
at the end of the function, it works fine.

158
00:08:43.055 --> 00:08:44.394
And by the way, if you look at this,

159
00:08:44.394 --> 00:08:46.779
this looks like it should be
pretty self-contained, right?

160
00:08:46.779 --> 00:08:49.975
I'm seeing rec4,
I've got rec1, rec2, rec3 for

161
00:08:49.975 --> 00:08:55.017
the different requests up here, rec4[]=,
and then I just call to_path on rec4.

162
00:08:55.017 --> 00:08:57.782
This doesn't reference any of the rec1,
rec2, or rec3s.

163
00:08:57.782 --> 00:09:01.070
All it references is,
we're calling this function,

164
00:09:01.070 --> 00:09:05.364
we're parsing in this local thing,
and we're not using any globals.

165
00:09:05.364 --> 00:09:08.567
I mean, we're using some string constants,
those aren't a problem.

166
00:09:08.567 --> 00:09:13.157
So what could possibly be happening
[LAUGH] That this thing works?

167
00:09:13.157 --> 00:09:17.198
Well, it gets the wrong answer,
granted, we wanted to see null here.

168
00:09:17.198 --> 00:09:19.554
But it works fine, it runs fine.

169
00:09:19.554 --> 00:09:21.737
But then as soon as I move it
up to the top of the function,

170
00:09:21.737 --> 00:09:23.001
it pulls up the entire program.

171
00:09:23.001 --> 00:09:24.705
Does anyone know what's happening here?

172
00:09:24.705 --> 00:09:26.279
&gt;&gt; Speaker 2: Are we busting our stack?

173
00:09:26.279 --> 00:09:29.563
&gt;&gt; Richard Feldman: Yeah, [LAUGH]
Basically, we're busting our stack.

174
00:09:29.563 --> 00:09:33.990
So essentially what's happening here
is that I mentioned way back in

175
00:09:33.990 --> 00:09:38.799
the slides about warning icon, and
I said, we're not currently checking

176
00:09:38.799 --> 00:09:43.681
to see what happens if we're reading
off the end of the file here, or sorry,

177
00:09:43.681 --> 00:09:46.841
if we're writing off
the end of the string here.

178
00:09:46.841 --> 00:09:49.351
So we could be saying memcpy into here,
and

179
00:09:49.351 --> 00:09:54.094
the string that we are memcopying into,
the request string might not actually be

180
00:09:54.094 --> 00:09:58.787
long enough to accommodate that index.html
followed by the null terminator.

181
00:09:58.787 --> 00:10:01.892
In other words,
the length of this, end plus this,

182
00:10:01.892 --> 00:10:06.142
might actually be less than what's
remaining in that request string.

183
00:10:06.142 --> 00:10:10.007
And if that's the case, we're just gonna
uncritically just blow over it and

184
00:10:10.007 --> 00:10:12.147
just write into whatever bytes are there,

185
00:10:12.147 --> 00:10:14.654
and then we're just gonna
find out what happens.

186
00:10:14.654 --> 00:10:20.012
So basically,
this is designed to simulate that, right?

187
00:10:20.012 --> 00:10:24.511
So I've intentionally omitted the header
that would normally be there if this were

188
00:10:24.511 --> 00:10:27.788
coming from a browser where it
would have the protocol as well

189
00:10:27.788 --> 00:10:29.092
as at least one header.

190
00:10:29.092 --> 00:10:32.316
I omitted those on purpose in
order to cause this error.

191
00:10:32.316 --> 00:10:33.224
And so basically,

192
00:10:33.224 --> 00:10:36.868
what's happening here is that this is
allocating these bytes on the stack.

193
00:10:36.868 --> 00:10:39.589
So it's like, here's an array in memory,
in the function.

194
00:10:39.589 --> 00:10:42.464
And then this thing is going to
actually write into those bytes, and

195
00:10:42.464 --> 00:10:45.741
it's gonna happily just write right off
the end of those because there isn't

196
00:10:45.741 --> 00:10:47.271
enough room here for index.html.

197
00:10:47.271 --> 00:10:51.191
So whatever happens to be in memory there,
that's what's gonna get stomped on and

198
00:10:51.191 --> 00:10:51.926
overwritten.

199
00:10:51.926 --> 00:10:56.212
And the reason it behaves differently, if
I put it at the end of the function versus

200
00:10:56.212 --> 00:11:00.564
earlier, is that whatever happens to be
there after those bytes changes depending

201
00:11:00.564 --> 00:11:04.257
on whether I'm doing this at
the beginning of the function or the end.

202
00:11:04.257 --> 00:11:10.628
And the reason the program's blowing up is
that, up here, when we get to those bytes,

203
00:11:10.628 --> 00:11:15.693
the processor or the operating system,
it tries to do something when

204
00:11:15.693 --> 00:11:21.663
those bytes are overridden that results
in some sort of operating system error.

205
00:11:21.663 --> 00:11:25.426
So I don't actually know specifically
what those bites are doing or

206
00:11:25.426 --> 00:11:26.818
what the exact thing is.

207
00:11:26.818 --> 00:11:30.129
You'd have to look at the actual
assembly to try to figure that out.

208
00:11:30.129 --> 00:11:33.546
But it's probably something along
the lines of, remember I mentioned at

209
00:11:33.546 --> 00:11:36.905
the very beginning that there was some
assembly that we were omitting for

210
00:11:36.905 --> 00:11:39.017
the boilerplate of beginning of functions.

211
00:11:39.017 --> 00:11:42.578
And the boilerplate is basically stuff
like, looking at what the arguments are,

212
00:11:42.578 --> 00:11:46.087
getting those out of the global variables
into the registers, or storing them,

213
00:11:46.087 --> 00:11:49.100
storing where the function's gonna
return to and things like that.

214
00:11:49.100 --> 00:11:53.015
And that type of stuff, if you mess around
with that and you override those bytes,

215
00:11:53.015 --> 00:11:56.420
you can very easily end up with
a function that when it returns, instead

216
00:11:56.420 --> 00:12:00.433
of just happily going back, it just jumps
to some wildly other part of the program.

217
00:12:00.433 --> 00:12:03.859
And that's probably what's happening here,
is this, when it's at the end here,

218
00:12:03.859 --> 00:12:06.515
is overwriting some memory that
appears to be pretty harmless and

219
00:12:06.515 --> 00:12:08.322
you can't even notice that there's a bug.

220
00:12:08.322 --> 00:12:11.698
And if you move it up here instead,
now it's overwriting bytes that are not

221
00:12:11.698 --> 00:12:14.549
harmless at all and
are instead blowing up the entire program.

222
00:12:14.549 --> 00:12:18.247
This is another example of memory unsafety
in C, a new flavor that we haven't seen

223
00:12:18.247 --> 00:12:21.140
yet, where you can just take code
that does one thing and works,

224
00:12:21.140 --> 00:12:23.231
as far as you can tell,
totally normally, and

225
00:12:23.231 --> 00:12:26.586
then as soon as you just move it up
somewhere else, all hell breaks loose.

226
00:12:26.586 --> 00:12:29.707
So you can very easily in C have
something that looks like a normal,

227
00:12:29.707 --> 00:12:33.057
harmless refactor where you're
literally just moving code around and

228
00:12:33.057 --> 00:12:36.038
all of a sudden your whole program
blows up with no stack trace.

229
00:12:36.038 --> 00:12:39.220
Hey, welcome to C [LAUGH].

230
00:12:39.220 --> 00:12:43.670
So what this is an example of is this is
an example of something where you don't

231
00:12:43.670 --> 00:12:47.718
know that there's a problem because
there are no symptoms normally.

232
00:12:47.718 --> 00:12:51.153
When you run this program, okay, I mean,
we know that there's a bug here,

233
00:12:51.153 --> 00:12:54.318
in that I expect it to be something
other than what it's printing, but

234
00:12:54.318 --> 00:12:56.159
it kinda does look like it did the thing.

235
00:12:56.159 --> 00:13:00.030
There's no sort of surface-level symptom
to give us even a clue that we're making

236
00:13:00.030 --> 00:13:01.317
this memory unsafety bug.

237
00:13:01.317 --> 00:13:04.830
And this is one of the things that
makes memory safety bugs so pernicious,

238
00:13:04.830 --> 00:13:06.018
is that in a lot of cases,

239
00:13:06.018 --> 00:13:09.151
there's a lot of different factors
that go into reproducing it.

240
00:13:09.151 --> 00:13:13.013
Another thing I haven't tried, but
if you played around with using different

241
00:13:13.013 --> 00:13:17.170
compiler optimization settings to build
this, compiler optimizations will often

242
00:13:17.170 --> 00:13:20.914
rearrange things inside the function
in ways that it assumes are harmless,

243
00:13:20.914 --> 00:13:23.629
assuming your code is actually
doing the right thing.

244
00:13:23.629 --> 00:13:27.286
Another possibility is that these things
could end up with the memory being in such

245
00:13:27.286 --> 00:13:30.519
a place that this code works fine,
that as soon as you run the optimizer,

246
00:13:30.519 --> 00:13:31.113
it blows up.

247
00:13:31.113 --> 00:13:34.128
And you might blame the optimizer and say
the optimizer must have a bug in it, but

248
00:13:34.128 --> 00:13:34.674
it might not.

249
00:13:34.674 --> 00:13:38.204
The reason that it might be blowing up
is just that the bug was always there.

250
00:13:38.204 --> 00:13:41.469
You just weren't happening to see any
symptom because the memory it was stomping

251
00:13:41.469 --> 00:13:44.398
over happened to be harmless until
you kicked in the optimizations, and

252
00:13:44.398 --> 00:13:47.009
then it happened to be overriding
memory that was not harmless.

253
00:13:47.009 --> 00:13:49.433
So there's this whole can of
worms to memory safety bugs,

254
00:13:49.433 --> 00:13:52.511
that doesn't this make you appreciate it,
having a garbage collector?

255
00:13:52.511 --> 00:13:53.193
Yeah.

256
00:13:53.193 --> 00:13:57.296
&gt;&gt; Speaker 2: You are debug these kinda
things with stack canaries and like.

257
00:13:57.296 --> 00:14:00.010
&gt;&gt; Richard Feldman: Yes,
if that's what the problem is, yeah.

258
00:14:00.010 --> 00:14:04.751
So a stack canary, [LAUGH] Basically,
it's a trick where you attempt to

259
00:14:04.751 --> 00:14:09.096
detect when you are making the mistake of,
so the stack is a part of

260
00:14:09.096 --> 00:14:13.620
memory that's reserved for
local variables inside of functions.

261
00:14:13.620 --> 00:14:15.412
And as you call more and more functions,

262
00:14:15.412 --> 00:14:17.739
that section of memory just
gets bigger and bigger.

263
00:14:17.739 --> 00:14:19.989
And a stack canary is where
you basically say, okay,

264
00:14:19.989 --> 00:14:22.140
I'm a little bit concerned
that I might have a bug.

265
00:14:22.140 --> 00:14:25.752
Or maybe some malicious attacker is trying
to create a bug where we are writing way

266
00:14:25.752 --> 00:14:28.635
past the end of the stack or
reading way past the end of the stack.

267
00:14:28.635 --> 00:14:33.166
And what you can do to guard against this
is you do, it's making a guard page,

268
00:14:33.166 --> 00:14:37.979
where basically one of the things you can
tell the operating system is you can say,

269
00:14:37.979 --> 00:14:41.500
hey, this chunk of memory,
please mark that as read only.

270
00:14:41.500 --> 00:14:45.247
So it's not innately read only like it
is if it's something that's part of

271
00:14:45.247 --> 00:14:49.409
the executable, but please say this whole
range of addresses, if I ever write to or

272
00:14:49.409 --> 00:14:51.863
read from those,
I want you to cause a segfault.

273
00:14:51.863 --> 00:14:55.532
I want that to happen because nobody
should ever be writing in there.

274
00:14:55.532 --> 00:14:58.990
So you intentionally put one of those
at the end of the stack and you say,

275
00:14:58.990 --> 00:15:00.148
this is segfault zone.

276
00:15:00.148 --> 00:15:04.337
If anybody ever sets foot in here, reads
or writes, I guess it's only writes to,

277
00:15:04.337 --> 00:15:07.935
tries to write in there,
don't make the write happen, just blow up.

278
00:15:07.935 --> 00:15:11.586
And so then if you do that,
that can give you more of a clue.

279
00:15:11.586 --> 00:15:14.176
Well, first of all, it can be a safety
thing where you don't want the attacker to

280
00:15:14.176 --> 00:15:15.333
do something even worse than that.

281
00:15:15.333 --> 00:15:16.488
You'd rather blow up and

282
00:15:16.488 --> 00:15:19.516
let them get access to whatever
they're trying to get access to.

283
00:15:19.516 --> 00:15:22.304
Yeah, there's this thing called
a stack-smashing attack,

284
00:15:22.304 --> 00:15:25.047
which is a whole [LAUGH] Thing
that we're not going to get into.

285
00:15:25.047 --> 00:15:29.748
But yeah, that is one example of a thing
you can do to not prevent the bug, but

286
00:15:29.748 --> 00:15:33.587
at least give you a clue of
what's actually happening there.

287
00:15:33.587 --> 00:15:36.463
Okay, yeah, and then the last thing we're
gonna do is we're gonna fix this by

288
00:15:36.463 --> 00:15:39.579
handling the case where rec is too short
to have "index.html" memcop'd into it.

289
00:15:39.579 --> 00:15:43.027
Hint, strlen returns an integer whose
type is not 'int', but rather 'size_t'.

290
00:15:43.027 --> 00:15:46.984
This is a hint, because as you're fixing
this, we do actually need to do this,

291
00:15:46.984 --> 00:15:49.422
we're going to encounter
this compiler error.

292
00:15:49.422 --> 00:15:53.729
So basically, what's happening
here is we are saying, okay,

293
00:15:53.729 --> 00:15:58.113
I want to detect whether or
not we are going to write over this, and

294
00:15:58.113 --> 00:16:02.451
if we are going to write over this,
then let's blow up instead.

295
00:16:02.451 --> 00:16:06.263
So basically we've got our length of
the thing that we're copying in and

296
00:16:06.263 --> 00:16:07.962
we've got our starting point.

297
00:16:07.962 --> 00:16:10.426
And what we wanna do is we wanna say,
okay, well,

298
00:16:10.426 --> 00:16:13.789
the last byte that we're gonna copy
is gonna be end + this, right?

299
00:16:13.789 --> 00:16:15.309
So this is the initial address, and

300
00:16:15.309 --> 00:16:17.547
then we're gonna copy all
the way to the end of that.

301
00:16:17.547 --> 00:16:22.484
So the condition we wanna detect
is if all of that is greater than

302
00:16:22.484 --> 00:16:27.439
strlen(req), then we wanna
just return null, basically.

303
00:16:27.439 --> 00:16:28.688
There are other ways we can handle this.

304
00:16:28.688 --> 00:16:31.614
We could say, well,
we'll just partially write it.

305
00:16:31.614 --> 00:16:34.664
But partially writing it in this
case is not a good solution here,

306
00:16:34.664 --> 00:16:37.493
because what's actually gonna
happen here if we do that is,

307
00:16:37.493 --> 00:16:40.875
we're gonna end up with essentially
a path that was partially written,

308
00:16:40.875 --> 00:16:43.824
and it's not going to correspond
anything on the file system.

309
00:16:43.824 --> 00:16:46.597
So we don't wanna do that,
we'd rather just error out here.

310
00:16:46.597 --> 00:16:48.302
Yeah, it's complaining about this.

311
00:16:48.302 --> 00:16:50.367
This is just a warning,
but it's kinda fine.

312
00:16:50.367 --> 00:16:55.703
So what we can do if we wanna avoid that
warning is, I think this is pointer,

313
00:16:55.703 --> 00:16:59.796
yeah, so we can just say this is,
was it size_t I think.

314
00:16:59.796 --> 00:17:00.296
Is that right?

315
00:17:00.296 --> 00:17:03.608
Yeah, cool, there we go.

316
00:17:03.608 --> 00:17:05.348
Oops, no, now they're all null.

317
00:17:05.348 --> 00:17:06.417
I must have made a mistake.

318
00:17:06.417 --> 00:17:13.650
So end + strlen(DEFAULT_FILE) +
1 is greater than strlen(req).

319
00:17:13.650 --> 00:17:14.284
I'm sorry.

320
00:17:14.284 --> 00:17:17.868
Okay, so this is actually, I wanna
check if we are off the end of that.

321
00:17:17.868 --> 00:17:22.652
So what I actually wanna do is req + that,

322
00:17:22.652 --> 00:17:27.046
and this will also need to be size_t.

323
00:17:27.046 --> 00:17:31.724
Yeah, so this is the start of the request
plus the end, that gives us the last byte.

324
00:17:31.724 --> 00:17:34.847
And we wanna see if the last byte that
we're gonna write is off the end of that.

325
00:17:34.847 --> 00:17:35.945
There we go.

326
00:17:35.945 --> 00:17:39.537
So yeah, now all of these
are unaffected because in these cases,

327
00:17:39.537 --> 00:17:42.620
they are not trying to write
past the end of the request.

328
00:17:42.620 --> 00:17:43.574
This one was though,

329
00:17:43.574 --> 00:17:47.180
because we had that intentionally
truncated request that's missing headers,

330
00:17:47.180 --> 00:17:50.640
and so therefore it tripped up the null
case, and now we're returning null.

331
00:17:50.640 --> 00:17:53.137
And thankfully, now,
this bug is fixed, and

332
00:17:53.137 --> 00:17:56.339
we can safely move this thing up
to the top of the function and

333
00:17:56.339 --> 00:18:00.590
nothing bad will happen, because it's
just gonna trip that null case again.

334
00:18:00.590 --> 00:18:03.408
And the only difference is that now it
prints at the beginning rather than at

335
00:18:03.408 --> 00:18:04.405
the end cuz we moved it up.

