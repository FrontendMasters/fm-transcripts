WEBVTT

1
00:00:00.018 --> 00:00:00.538
&gt;&gt; Richard Feldman: All right,

2
00:00:00.538 --> 00:00:03.502
now you might notice that we have
some more includes than last time.

3
00:00:03.502 --> 00:00:08.451
So one of the clues that I want
to kinda shout out here is this

4
00:00:08.451 --> 00:00:10.273
is how old [LAUGH] C is.

5
00:00:10.273 --> 00:00:12.971
This is arpa/inet.h.

6
00:00:12.971 --> 00:00:15.306
So, the ARPANET,
these like the original internet,

7
00:00:15.306 --> 00:00:18.721
like the precursor to the worldwide web,
this is how old school this stuff was.

8
00:00:18.721 --> 00:00:20.587
Like they were using C in fact.

9
00:00:20.587 --> 00:00:21.588
On the arpa/inet.

10
00:00:21.588 --> 00:00:24.927
[LAUGH] that's how old this stuff is.

11
00:00:24.927 --> 00:00:25.813
And guess what?

12
00:00:25.813 --> 00:00:27.261
It still works in 2025.

13
00:00:27.261 --> 00:00:29.513
Very cool, all right.

14
00:00:29.513 --> 00:00:33.648
So as usual, we're just gonna start
by building and running the program.

15
00:00:33.648 --> 00:00:34.401
There we go.

16
00:00:34.401 --> 00:00:37.465
And now it just says
listening on port 8080.

17
00:00:37.465 --> 00:00:40.272
So, let's see what is actually
happening on port 8080.

18
00:00:40.272 --> 00:00:44.602
So, if I go to local host 80 80,
it says, hey, this is the root /page.

19
00:00:44.602 --> 00:00:46.140
There's nothing here except a blog.

20
00:00:46.140 --> 00:00:51.216
Now, if you may recall what was actually

21
00:00:51.216 --> 00:00:55.553
happening here is where was that?

22
00:00:55.553 --> 00:00:56.917
Index.html, right?

23
00:00:56.917 --> 00:00:58.721
So, this is the root/page.

24
00:00:58.721 --> 00:01:01.270
There's nothing here except a blog.

25
00:01:01.270 --> 00:01:02.716
Hello everyone.

26
00:01:02.716 --> 00:01:05.177
I'm gonna just do that,
not gonna restart the server.

27
00:01:05.177 --> 00:01:08.540
I just saved that file and we go back
here, refresh the page, and bam,

28
00:01:08.540 --> 00:01:09.174
there it is.

29
00:01:09.174 --> 00:01:11.541
So that is what we've
built up to today [LAUGH].

30
00:01:11.541 --> 00:01:13.986
We've got a real static HTTP server.

31
00:01:13.986 --> 00:01:17.150
We're gonna make it better in the next and
final part of the course.

32
00:01:17.150 --> 00:01:21.114
But, but hey, it actually works, and
it's not actually that much C code.

33
00:01:21.114 --> 00:01:24.047
Like if we look at this file,
this is only like 220 lines of C code.

34
00:01:24.047 --> 00:01:26.289
Now granted, there's a lot of edge
cases we're not handling here.

35
00:01:26.289 --> 00:01:27.828
This actually doesn't support images yet.

36
00:01:27.828 --> 00:01:30.541
We're going to get to that in the next
section, but it's pretty impressive.

37
00:01:30.541 --> 00:01:35.270
Like that this is all it takes to build
a really, really high-performance,

38
00:01:35.270 --> 00:01:36.447
like C web server.

39
00:01:36.447 --> 00:01:38.311
Yes, some of the APIs
are a little bit funky.

40
00:01:38.311 --> 00:01:40.565
Yes, we're doing a lot of weird
stomping all over memory kind of tech.

41
00:01:40.565 --> 00:01:45.269
Techniques in here, but if you want to
get down to it and like really like get

42
00:01:45.269 --> 00:01:49.910
close to the operating system,
this is what that looks like, all right.

43
00:01:49.910 --> 00:01:52.653
Now I do want to notice,
sorry, that was from earlier.

44
00:01:52.653 --> 00:01:57.068
We are getting a number of HTTP
500 internal server errors here.

45
00:01:57.068 --> 00:01:59.366
Now this might kind of surprise
you because on the one hand, well,

46
00:01:59.366 --> 00:02:00.978
first of all,
I didn't actually go over the.

47
00:02:00.978 --> 00:02:03.945
Part of the code where we are,
in some cases we're turning at 500, so

48
00:02:03.945 --> 00:02:05.271
we'll look at that in a second.

49
00:02:05.271 --> 00:02:07.063
But also you might be, yeah,
what's going on with that?

50
00:02:07.063 --> 00:02:10.586
Because, I mean, clearly the browser
doesn't think there was an error like this

51
00:02:10.586 --> 00:02:11.924
was, it's just like worked.

52
00:02:11.924 --> 00:02:15.809
So what's going on there?

53
00:02:15.809 --> 00:02:18.475
So, if I refresh this page,
I might notice,

54
00:02:18.475 --> 00:02:20.800
what's that little thing down there?

55
00:02:20.800 --> 00:02:23.321
Let me zoom in for you.

56
00:02:23.321 --> 00:02:26.915
This is something that we
don't actually have right now.

57
00:02:26.915 --> 00:02:29.712
Support for images includes support for
the favicon.

58
00:02:29.712 --> 00:02:32.685
So, favicon is a fun little one to debug.

59
00:02:32.685 --> 00:02:37.050
If you're not familiar with this, this is
something the browser automatically goes

60
00:02:37.050 --> 00:02:40.154
and tries to get, to make
the little icon in the browser tab.

61
00:02:40.154 --> 00:02:43.014
So, if you don't either have one or
at least have your server able to be

62
00:02:43.014 --> 00:02:45.873
aware of the possibility that we're
going to get one of these things,

63
00:02:45.873 --> 00:02:48.553
then by default, what you're going
to get is some sort of error.

64
00:02:48.553 --> 00:02:51.105
You might be wondering, like,
why is it printing so many of those?

65
00:02:51.105 --> 00:02:55.464
Like, if I refresh the page, I get two,
500 internal server errors, not one.

66
00:02:55.464 --> 00:02:57.523
We'll talk about that in a second.

67
00:02:57.523 --> 00:03:01.897
All right, so going through this
code in part five exercise.

68
00:03:01.897 --> 00:03:05.923
This is all just like exactly the same
stuff that we went on the slides,

69
00:03:05.923 --> 00:03:08.529
except now it's all sort
of spread out here.

70
00:03:08.529 --> 00:03:10.487
We're doing the handle request thing.

71
00:03:10.487 --> 00:03:14.950
This is our little helper function that
does take the request and the socket and

72
00:03:14.950 --> 00:03:16.379
like calls to path on it.

73
00:03:16.379 --> 00:03:18.883
This is basically just like I just
split out a helper function, so we can

74
00:03:18.883 --> 00:03:21.957
sort of isolate the request quest handling
code in here, just for code organization.

75
00:03:21.957 --> 00:03:25.408
But otherwise the same exact
stuff we did in the slides.

76
00:03:25.408 --> 00:03:29.732
We are doing a little like,
okay, if I open this path and

77
00:03:29.732 --> 00:03:32.128
I get file descriptor is -1.

78
00:03:32.128 --> 00:03:36.505
Then we want to handle the case
where it's a 404 differently and

79
00:03:36.505 --> 00:03:38.859
not just like, always do a 500.

80
00:03:38.859 --> 00:03:42.947
The only issue is that this is not
actually like printing a response to

81
00:03:42.947 --> 00:03:43.731
the socket.

82
00:03:43.731 --> 00:03:45.650
It's just printing it to
standard out with a printf.

83
00:03:45.650 --> 00:03:50.150
So, what we're gonna do in this part of
the exercise is actually like respond with

84
00:03:50.150 --> 00:03:51.334
one of these things.

85
00:03:51.334 --> 00:03:57.294
So instead of a 500 internal server error,
we wanna return a 404 not found.

86
00:03:57.294 --> 00:04:03.218
Down here, again, we're just like printf,
if we fail to get the stats on this thing,

87
00:04:03.218 --> 00:04:07.357
then again, we do actually
want to print a 500 error, but

88
00:04:07.357 --> 00:04:12.826
we wanna return that error to the browser,
and once again, same pattern here.

89
00:04:12.826 --> 00:04:16.232
So basically, the theme of what we're
doing here is we have a number of

90
00:04:16.232 --> 00:04:20.017
cases where what we're doing is currently
just printing it to standard out.

91
00:04:20.017 --> 00:04:23.883
And what we want to be doing instead is
just actually sending it to the socket.

92
00:04:29.833 --> 00:04:32.950
&gt;&gt; Richard Feldman: All right,
let's go through the solution.

93
00:04:32.950 --> 00:04:37.848
Okay, so a bunch of the stuff unchanged
from previous like two path works the same

94
00:04:37.848 --> 00:04:39.879
way as before, fundamentally.

95
00:04:39.879 --> 00:04:42.300
Handle requests is our little
helper function here for

96
00:04:42.300 --> 00:04:43.992
just dealing with the request stuff.

97
00:04:43.992 --> 00:04:46.966
The theme here is that we've got all these
like different error scenarios that we

98
00:04:46.966 --> 00:04:47.934
want to handle properly.

99
00:04:47.934 --> 00:04:52.565
So for example, in this case,
we've got HTTP 400 bad requests.

100
00:04:52.565 --> 00:04:53.640
So what does that mean?

101
00:04:53.640 --> 00:04:57.221
This means that when we called to path,
to path, returned null.

102
00:04:57.221 --> 00:05:01.291
So here we've essentially done that
same kind of C style error handling.

103
00:05:01.291 --> 00:05:05.479
That we've seen in all these PIs we've
been using, where basically you may

104
00:05:05.479 --> 00:05:09.734
recall, if we didn't have enough space
to write this thing, meaning that we

105
00:05:09.734 --> 00:05:13.937
got a weird request that didn't have
like enough space to write this thing.

106
00:05:13.937 --> 00:05:18.091
Or if we got something that didn't
have the space where we expected it,

107
00:05:18.091 --> 00:05:20.737
like the file ended
before we hit the spaces.

108
00:05:20.737 --> 00:05:24.044
In either case,
that means this is an invalid request, and

109
00:05:24.044 --> 00:05:26.039
two path would have returned null.

110
00:05:26.039 --> 00:05:29.985
And here we're just basically doing that
same exact error handling case where we're

111
00:05:29.985 --> 00:05:33.598
like, yeah, let's see if what this
function returned gave us an error code,

112
00:05:33.598 --> 00:05:36.262
in other words, a null address here,
or a null pointer.

113
00:05:36.262 --> 00:05:40.120
And basically, we're like, yeah, okay, now
we need to propagate this error properly.

114
00:05:40.120 --> 00:05:41.114
So how are we going to do this?

115
00:05:41.114 --> 00:05:45.164
Well, we're gonna send this bad
request header back to the browser and

116
00:05:45.164 --> 00:05:47.999
essentially say, okay,
I'm gonna do a write and

117
00:05:47.999 --> 00:05:51.326
write takes as its first argument,
the file descriptor.

118
00:05:51.326 --> 00:05:53.040
So, this is gonna be socket FD.

119
00:05:53.040 --> 00:05:58.245
And then basically if we want, we can do
like the know, sterling of that thing.

120
00:05:58.245 --> 00:06:02.352
Or if we wanna be like
a little bit fancier about it,

121
00:06:02.352 --> 00:06:07.030
we can kind of put this up here and
say like const char star,

122
00:06:07.030 --> 00:06:11.062
error 400 or
something like that equals that.

123
00:06:11.062 --> 00:06:16.919
And then down here,
we can just do strlen of that one.

124
00:06:16.919 --> 00:06:17.820
There you go.

125
00:06:17.820 --> 00:06:20.816
So, this is basically a pretty
straightforward pattern for

126
00:06:20.816 --> 00:06:22.529
just sending like a 400 error.

127
00:06:22.529 --> 00:06:26.949
If we have something that we are dealing
with a lot, like we are with 500 errors,

128
00:06:26.949 --> 00:06:31.181
we might even wanna make a little helper
function, which I'm gonna do in a sec,

129
00:06:31.181 --> 00:06:32.970
to just like do this right for me.

130
00:06:32.970 --> 00:06:34.801
Okay, next one here.

131
00:06:34.801 --> 00:06:37.586
This one's actually kind of cool
because it's pretty easy to reproduce.

132
00:06:37.586 --> 00:06:41.266
So, when we get this working,
we will actually get a 404 Not Found.

133
00:06:41.266 --> 00:06:45.855
So, if we just do, let's say I open
up my browser and I'm like, okay,

134
00:06:45.855 --> 00:06:48.472
I would like to open up localhost/foo.

135
00:06:48.472 --> 00:06:50.558
And it's like, well, hang on a sec.

136
00:06:50.558 --> 00:06:54.521
That's like, Foo is not a thing, so
it's like cool 404 Not Found for that.

137
00:06:54.521 --> 00:06:58.024
Now, by the way, I'm gonna not
touch my keyboard for a second, and

138
00:06:58.024 --> 00:07:00.805
you might be a little bit
surprised that even though.

139
00:07:00.805 --> 00:07:01.929
I am not touching my keyboard.

140
00:07:01.929 --> 00:07:05.153
All right, I might need to, sorry,
I might need to do that over again.

141
00:07:05.153 --> 00:07:09.250
Okay, I'm gonna local host for
yeah /foo not touching the keyboard.

142
00:07:09.250 --> 00:07:11.658
And yet
we're still getting like 404 coming in.

143
00:07:11.658 --> 00:07:13.572
So what's going on there?

144
00:07:13.572 --> 00:07:17.216
Why did we just get a 404 on my
hands weren't even on the keyboard.

145
00:07:17.216 --> 00:07:19.573
Does anyone have any guesses
as to what's going on there?

146
00:07:23.725 --> 00:07:24.886
&gt;&gt; Speaker 2: The browser retrying.

147
00:07:24.886 --> 00:07:28.786
&gt;&gt; Richard Feldman: Yes, this is, this is
easier to tell if you use Wget here, and

148
00:07:28.786 --> 00:07:33.144
Wget is basically gonna actually,
like, tell us what it's doing.

149
00:07:33.144 --> 00:07:36.793
I need to actually be running the server.

150
00:07:36.793 --> 00:07:38.117
So run this on a different one.

151
00:07:38.117 --> 00:07:40.411
It's basically, hey,
HTTP request sent a rating response,

152
00:07:40.411 --> 00:07:42.763
no data received retrying,
retrying, retrying, retrying.

153
00:07:42.763 --> 00:07:46.794
And the reason for that is that I'm
printing out 404, to standard, out, but

154
00:07:46.794 --> 00:07:49.238
I'm not actually telling
the server anything.

155
00:07:49.238 --> 00:07:50.728
So the server is not
getting any response here.

156
00:07:50.728 --> 00:07:53.155
It's just like, hey, hello.

157
00:07:53.155 --> 00:07:53.779
What's going on?

158
00:07:53.779 --> 00:07:54.884
And it's just like, times out.

159
00:07:54.884 --> 00:07:56.030
It's like, well, hang on,
let me try again.

160
00:07:56.030 --> 00:07:56.960
Hang on, let me try again.

161
00:07:56.960 --> 00:07:59.279
So, the browser is the same thing,
it just doesn't have as much of it.

162
00:07:59.279 --> 00:08:02.650
Delay as Wget does in
between retry attempts.

163
00:08:02.650 --> 00:08:06.552
But not to worry, because once we
actually like respond with this,

164
00:08:06.552 --> 00:08:08.132
then we're gonna be okay.

165
00:08:08.132 --> 00:08:11.907
So, I'm going to basically just do
the same like pattern that I did here.

166
00:08:11.907 --> 00:08:16.467
So, this is going to be 404 Not Found, and
I'm just gonna follow exactly the same

167
00:08:16.467 --> 00:08:20.834
pattern that I did back there, where I'm
just gonna write to but instead of error

168
00:08:20.834 --> 00:08:25.429
404, it's gonna be, sorry,
instead of error 400, it's gonna be 404.

169
00:08:25.429 --> 00:08:32.714
So, we're gonna do that and then we do
the same thing over here with 500, okay.

170
00:08:32.714 --> 00:08:35.246
And now, it's gone there.

171
00:08:35.246 --> 00:08:36.886
Yeah, I didn't actually
define the error 500.

172
00:08:36.886 --> 00:08:39.029
Let's go ahead and do that.

173
00:08:39.029 --> 00:08:40.696
Okay, there we go, cool.

174
00:08:40.696 --> 00:08:45.453
I'm using Zed's fancy autocomplete there,
so I to save myself some typing there,

175
00:08:45.453 --> 00:08:48.470
but you get the idea 400, 404, 500, etc.

176
00:08:48.470 --> 00:08:50.643
And then basically we're
just gonna write these here.

177
00:08:50.643 --> 00:08:53.659
Okay, so now when I restart the server,

178
00:08:53.659 --> 00:08:58.380
now we should get something much
more semantically familiar.

179
00:08:58.380 --> 00:09:01.116
If I go to localhost.com,
port 88/foo, we get, hey,

180
00:09:01.116 --> 00:09:04.866
page can't be found because the browser
actually knows when I get a 404 back.

181
00:09:04.866 --> 00:09:05.688
Here's what I do.

182
00:09:05.688 --> 00:09:10.146
I display, you know, HTTP error 404 and
good stuff like that.

183
00:09:10.146 --> 00:09:13.879
And now we are not actually going to see
all these things spamming us locally,

184
00:09:13.879 --> 00:09:17.163
because when the browser gets a 404
it knows what to do with that.

185
00:09:17.163 --> 00:09:18.639
It's like, yeah, got it.

186
00:09:18.639 --> 00:09:19.521
This is a 404 error.

187
00:09:19.521 --> 00:09:20.395
I'm very familiar with these.

188
00:09:20.395 --> 00:09:25.097
I don't need to retry because we
actually did send it a response in that

189
00:09:25.097 --> 00:09:26.144
scenario now.

190
00:09:26.144 --> 00:09:27.544
All right, looking good.

191
00:09:27.544 --> 00:09:29.300
So that's definitely an improvement.

192
00:09:29.300 --> 00:09:30.076
Let's keep going.

193
00:09:30.076 --> 00:09:33.212
So, at this point, we might notice
a pattern here where it's like, okay,

194
00:09:33.212 --> 00:09:34.739
this one's gonna be a 500 error.

195
00:09:34.739 --> 00:09:36.009
This is like if fsat failed.

196
00:09:36.009 --> 00:09:39.596
So, this means that like we were able to
open the file because if we weren't able

197
00:09:39.596 --> 00:09:41.644
to open the file, then we would have 404.

198
00:09:41.644 --> 00:09:43.651
I forgot to mention, by the way,

199
00:09:43.651 --> 00:09:47.040
this is another beautiful
C error-handling pattern.

200
00:09:47.040 --> 00:09:49.710
So, if fd=-1,
that tells us it's an error, but

201
00:09:49.710 --> 00:09:52.089
it doesn't tell us what
type of error we have.

202
00:09:52.089 --> 00:09:54.730
That is the open function will set,

203
00:09:54.730 --> 00:09:58.970
will mutate this magical
global variable called errno.

204
00:09:58.970 --> 00:10:00.100
This is not something that we wrote.

205
00:10:00.100 --> 00:10:01.900
This is just a magical global.

206
00:10:01.900 --> 00:10:06.782
And the way that errorno works,
it's sort of like error number is when

207
00:10:06.782 --> 00:10:10.604
you call a function that can
error in a particular way.

208
00:10:10.604 --> 00:10:12.998
The way that you check whether this
function failed was look at it as a string

209
00:10:12.998 --> 00:10:14.181
value and see if it was negative one.

210
00:10:14.181 --> 00:10:17.450
If it was negative one, then you go look
at errorno before calling another function

211
00:10:17.450 --> 00:10:19.802
that does that, or else,
you're gonna be in big trouble.

212
00:10:19.802 --> 00:10:21.885
Because it's gonna stop all over it.

213
00:10:21.885 --> 00:10:24.645
And then in that magical
little window between when you

214
00:10:24.645 --> 00:10:27.586
called one of these functions and
you called another one,

215
00:10:27.586 --> 00:10:31.505
errno will be set to whatever the most
recent way that one of these failed was.

216
00:10:31.505 --> 00:10:33.479
And this will tell you
what the actual error was.

217
00:10:33.479 --> 00:10:36.715
And ENOENT, and
I'm not sure why exactly that.

218
00:10:36.715 --> 00:10:39.994
I remember at some point I knew
the history behind why it was called that.

219
00:10:39.994 --> 00:10:43.077
But this is like,
basically means file was not found.

220
00:10:43.077 --> 00:10:45.016
So, if you ever use no JS,
you actually can see this.

221
00:10:45.016 --> 00:10:47.197
Sometimes you see, like,
the console, like an error,

222
00:10:47.197 --> 00:10:48.747
like, no end, or something like that.

223
00:10:48.747 --> 00:10:53.659
And that's because no JS is sort
of uncritically passed along

224
00:10:53.659 --> 00:10:57.064
the the like C style
error from this thing.

225
00:10:57.064 --> 00:11:00.418
So, if it's one of those errors, then
we're like, okay, 404, meaning not found.

226
00:11:00.418 --> 00:11:03.732
So, this bit basically means like
we attempted to open that path.

227
00:11:03.732 --> 00:11:08.031
So in this case, when I went to local host
8080/foo, we'd be coming through here.

228
00:11:08.031 --> 00:11:09.869
The path would be foo/index.html.

229
00:11:09.869 --> 00:11:13.791
But since I don't have a directory
called foo or a index.html within it,

230
00:11:13.791 --> 00:11:15.761
when I try to open that, this fails.

231
00:11:15.761 --> 00:11:20.215
FD is negative one errorno is set to Eno,
end, meaning that it was file not found.

232
00:11:20.215 --> 00:11:23.533
And therefore we know to send, backup 404.

233
00:11:23.533 --> 00:11:26.991
If it was anything else, like the file was
there, it was found, but we couldn't open

234
00:11:26.991 --> 00:11:29.970
it, for some strange reason,
like a permissions issue, or something,

235
00:11:29.970 --> 00:11:33.214
then we're gonna call that an internal
server error, and send backup 500.

236
00:11:33.214 --> 00:11:34.670
And a lot of these are going to be 500s.

237
00:11:34.670 --> 00:11:37.988
Like if we were able to open the file, but
fstat on it failed, for whatever reason.

238
00:11:37.988 --> 00:11:41.037
Again, 500, internal server error.

239
00:11:41.037 --> 00:11:43.681
What happens if we attempted
to write to the socket and

240
00:11:43.681 --> 00:11:47.561
writing to the socket failed, even
though reading the file succeeded again,

241
00:11:47.561 --> 00:11:49.167
500 internal server error.

242
00:11:49.167 --> 00:11:52.812
Now, there are so many of these things
that at some point you start to be like,

243
00:11:52.812 --> 00:11:56.871
okay, maybe rather than, like, duplicating
all of this write logic over and over.

244
00:11:56.871 --> 00:11:59.452
Maybe I should just actually extract
a little helper function for this,

245
00:11:59.452 --> 00:12:01.240
which I think is, like,
perfectly reasonable.

246
00:12:01.240 --> 00:12:04.478
Let's say I wanted to just make
a little helper function for this.

247
00:12:04.478 --> 00:12:08.643
One of the things we would probably wanna
do is even though we're not using it here,

248
00:12:08.643 --> 00:12:12.883
is I would actually like to return, like,
pass along the return value of the write.

249
00:12:12.883 --> 00:12:16.491
So that's an size t.

250
00:12:16.491 --> 00:12:18.326
And I'll just call this like write 500.

251
00:12:18.326 --> 00:12:23.646
So, it takes socket, int, socket, good.

252
00:12:23.646 --> 00:12:27.696
And then we need the actual like,
sorry, this is the 500, so

253
00:12:27.696 --> 00:12:29.651
we actually don't need that.

254
00:12:29.651 --> 00:12:30.479
We know that.

255
00:12:30.479 --> 00:12:34.264
So basically, what I'm gonna do is I'm
gonna say return, whatever right return.

256
00:12:34.264 --> 00:12:37.667
So that way if we do decide we want to
handle that error, we have the ability to,

257
00:12:37.667 --> 00:12:39.693
and then it's just gonna
be this exact thing.

258
00:12:39.693 --> 00:12:41.563
So now that we have.

259
00:12:41.563 --> 00:12:49.347
I can replace this with that socket-fd,
okay, great.

260
00:12:49.347 --> 00:12:52.299
And then now every time I
see one of these things,

261
00:12:52.299 --> 00:12:54.678
I can just do a nice little one of those.

262
00:12:54.678 --> 00:12:56.215
Well, yeah, I guess we, right.

263
00:12:56.215 --> 00:12:59.310
We do want to early
return when that happens.

264
00:12:59.310 --> 00:13:02.841
So, we wanna like exit instead of just
printing this one's already like,

265
00:13:02.841 --> 00:13:04.084
returning negative one.

266
00:13:04.084 --> 00:13:06.367
Yeah, I guess if, okay, never mind.

267
00:13:06.367 --> 00:13:09.224
We do want to return negative one to
indicate to the caller that we that

268
00:13:09.224 --> 00:13:09.732
we failed.

269
00:13:09.732 --> 00:13:10.995
So that's fine.

270
00:13:10.995 --> 00:13:11.890
Okay, so we can do that.

271
00:13:11.890 --> 00:13:14.170
Or we could have write 500 return
negative one and just return that.

272
00:13:14.170 --> 00:13:16.896
But I think it's probably
more idiomatic to just like,

273
00:13:16.896 --> 00:13:19.970
propagate the error in case we
do want to handle it separately,

274
00:13:19.970 --> 00:13:22.824
like maybe writing it to a log file or
something like that.

275
00:13:22.824 --> 00:13:26.849
But yeah, I mean, all of these being 500s,
now we have our little helper function.

276
00:13:26.849 --> 00:13:30.334
Nice and easy and there we go, great.

277
00:13:30.334 --> 00:13:32.720
Now you might notice that over
in this section of the code,

278
00:13:32.720 --> 00:13:35.995
like this is a actual main, like before
we're doing the handle request stuff.

279
00:13:35.995 --> 00:13:37.872
We do have error handling
around all these things,

280
00:13:37.872 --> 00:13:39.455
which we didn't talk about in the slides.

281
00:13:39.455 --> 00:13:41.888
These do not actually send a 500 error.

282
00:13:41.888 --> 00:13:43.956
Can anyone think of why we don't do that?

283
00:13:43.956 --> 00:13:45.835
&gt;&gt; Speaker 3: We didn't even
get to start the server.

284
00:13:45.835 --> 00:13:46.881
&gt;&gt; Richard Feldman: Yeah.
&gt;&gt; Speaker 3: Probably the most thing.

285
00:13:46.881 --> 00:13:50.258
&gt;&gt; Richard Feldman: Yeah, right, exactly
we would be sending into the void because

286
00:13:50.258 --> 00:13:54.714
until we actually make up through these
boilerplates steps, all of which can fail.

287
00:13:54.714 --> 00:13:57.123
We're not actually
talking to a browser yet,

288
00:13:57.123 --> 00:14:01.262
we're only talking to the browser inside
this, after we've done the accept,

289
00:14:01.262 --> 00:14:03.748
we've done the read, and
all that good stuff.

290
00:14:03.748 --> 00:14:07.433
That's the only point where we can,
there's one more of these, fine.

291
00:14:07.433 --> 00:14:11.064
Let's see if, yeah,
this is the problem with AI auto-complete.

292
00:14:11.064 --> 00:14:13.786
Sometimes it hallucinates a helper
function you didn't actually write.

293
00:14:13.786 --> 00:14:19.776
[LAUGH] but yeah, was that 413,
it's always fun to,

294
00:14:19.776 --> 00:14:24.752
like, look up all
the different error codes.

295
00:14:24.752 --> 00:14:29.068
All right, I guess I need to

296
00:14:29.068 --> 00:14:33.959
ERR_404, ERR_413.

297
00:14:33.959 --> 00:14:35.210
Content too large.

298
00:14:38.694 --> 00:14:41.358
&gt;&gt; Richard Feldman: Okay, and

299
00:14:41.358 --> 00:14:46.396
the right, great.

300
00:14:46.396 --> 00:14:51.450
Okay, and then I guess we actually so
in this case, we don't necessarily need

301
00:14:51.450 --> 00:14:56.678
to early return, because we might want
to just keep handling further requests.

302
00:14:56.678 --> 00:15:00.210
Just because this one was too big,
that's no big deal.

303
00:15:00.210 --> 00:15:04.293
But, yeah, this is basically like the
difference between error handling when we

304
00:15:04.293 --> 00:15:08.553
don't have an active connection and don't
have a browser connection that we can like

305
00:15:08.553 --> 00:15:10.402
actually send the response back to.

306
00:15:10.402 --> 00:15:12.003
And when we're just still
kind of like starting up and

307
00:15:12.003 --> 00:15:13.082
like trying to start up the server.

308
00:15:13.082 --> 00:15:16.895
So, if any of these fail, like for
example, it's pretty easy to induce, say,

309
00:15:16.895 --> 00:15:18.198
like, addresses and use.

310
00:15:18.198 --> 00:15:24.156
So, if I leave this server running and
then I try to, like, do this again.

311
00:15:24.156 --> 00:15:31.213
Was around 5, yeah examples exercise yeah.

312
00:15:31.213 --> 00:15:33.258
So, it says, like,
bind failed address and use.

313
00:15:33.258 --> 00:15:34.888
Would be a nicer example to give.

314
00:15:34.888 --> 00:15:38.169
But yeah, this is the way you can actually
get this thing to not even make it to

315
00:15:38.169 --> 00:15:38.901
the while loop.

316
00:15:38.901 --> 00:15:41.029
The infinite loop, because it's like,
yeah, bind failed.

317
00:15:41.029 --> 00:15:43.962
So, we're done, okay.

318
00:15:43.962 --> 00:15:48.209
Now, as cool as this is so
we got our 404 here.

319
00:15:48.209 --> 00:15:49.622
If we go to root, that works.

320
00:15:49.622 --> 00:15:53.582
I can even like follow links cause this
takes us, that changes the URL to /blog,

321
00:15:53.582 --> 00:15:56.335
which also works cause we
have /blog/inject.html.

322
00:15:56.335 --> 00:15:57.745
All of that works great.

323
00:15:57.745 --> 00:16:01.519
But we are missing an important piece
here, which is that I have strategically

324
00:16:01.519 --> 00:16:05.308
chosen to make these things have no
images or CSS, or JavaScript whatsoever.

325
00:16:05.308 --> 00:16:08.211
And the reason that I do that
is if let's say, for example,

326
00:16:08.211 --> 00:16:10.709
I were taking the front-end
master's homepage,

327
00:16:10.709 --> 00:16:13.397
which I've actually got right
here in a separate tab.

328
00:16:13.397 --> 00:16:16.730
This is what our beautiful web server
does for the front-end master's homepage.

329
00:16:16.730 --> 00:16:20.062
Now we do have one of these images kind of
works, but you notice that all the CSS and

330
00:16:20.062 --> 00:16:21.297
all the JS and all that stuff.

331
00:16:21.297 --> 00:16:23.754
It's just totally busted, and
also the image is totally busted.

332
00:16:23.754 --> 00:16:24.923
This one's a little bit better.

333
00:16:24.923 --> 00:16:26.142
That's kind of cool.

334
00:16:26.142 --> 00:16:27.556
Everything's horrendous.

335
00:16:27.556 --> 00:16:28.979
Why is everything horrendous?

336
00:16:28.979 --> 00:16:32.184
Because all we are doing for
our requests, or sorry,

337
00:16:32.184 --> 00:16:36.328
our response headers is we're
just doing HTP 1.1 200, okay.

338
00:16:36.328 --> 00:16:39.291
We are not sending a single
response header whatsoever, and

339
00:16:39.291 --> 00:16:43.067
the browser uses those headers like
content types specifically to figure out

340
00:16:43.067 --> 00:16:44.764
like how to interpret this thing.

341
00:16:44.764 --> 00:16:48.184
So, if I just send it a bunch of bytes and
I say, hey, this is a CSS file,

342
00:16:48.184 --> 00:16:51.785
it's not gonna just be like, well that
is a dot CSS, I bet it's a CSS file.

343
00:16:51.785 --> 00:16:55.215
No, it says like, no, you need to tell me
in a header how I'm supposed to interpret

344
00:16:55.215 --> 00:16:56.643
these bytes that you've sent me.

345
00:16:56.643 --> 00:16:58.315
And right now we're not doing that at all.

346
00:16:58.315 --> 00:17:01.247
When it comes to the bare HTML,
it's gonna be fine with that.

347
00:17:01.247 --> 00:17:03.023
But that's pretty much
where it draws the line.

348
00:17:03.023 --> 00:17:06.204
So essentially, what we need to do is we
need to start actually sending response

349
00:17:06.204 --> 00:17:09.298
headers, which is what we're gonna do
in the final section of the workshop.

