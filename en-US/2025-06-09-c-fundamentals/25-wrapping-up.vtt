WEBVTT

1
00:00:00.035 --> 00:00:01.885
&gt;&gt; Richard Feldman: So
this concludes the workshop.

2
00:00:01.885 --> 00:00:06.288
&gt;&gt; [APPLAUSE]
&gt;&gt; Richard Feldman: We just have one more

3
00:00:06.288 --> 00:00:09.598
section, just a little bit of like, if you
wanna do a little further reading type of

4
00:00:09.598 --> 00:00:11.420
stuff, but congratulations, you made it.

5
00:00:11.420 --> 00:00:13.953
If there's one thing that you
take away from this course,

6
00:00:13.953 --> 00:00:16.388
I think this is maybe the most
conceptually useful one.

7
00:00:16.388 --> 00:00:19.578
Is just that memory is basically
a gigantic array of bytes.

8
00:00:19.578 --> 00:00:21.184
They're all these ones and zeros, and

9
00:00:21.184 --> 00:00:23.283
you can choose to interpret
them however you want.

10
00:00:23.283 --> 00:00:27.465
As the C programmers or other low level
languages, not only can you interpret

11
00:00:27.465 --> 00:00:32.112
these however you want, but as we've seen,
there are actually specific benefits.

12
00:00:32.112 --> 00:00:36.501
Especially when it comes to performance
of making use of that understanding of

13
00:00:36.501 --> 00:00:39.300
the gigantic array of bytes,
concept of memory.

14
00:00:39.300 --> 00:00:43.026
Granted, we are doing manual memory
management there's the malloc and free and

15
00:00:43.026 --> 00:00:46.478
memory on the stack and buffer overruns
and reading into garbage memory and

16
00:00:46.478 --> 00:00:47.877
all this initialized stuff.

17
00:00:47.877 --> 00:00:52.759
There's a lot of performance to be had,
but also a ton a ton of foot guns.

18
00:00:52.759 --> 00:00:54.742
If you've ever thought pointers were hard,

19
00:00:54.742 --> 00:00:57.612
hopefully the fact that we just
talked about memory addresses and

20
00:00:57.612 --> 00:01:00.443
integers a lot [LAUGH] will make
that at least a little bit easier.

21
00:01:00.443 --> 00:01:04.711
But if anyone ever says pointer,
and you're like, what's a pointer?

22
00:01:04.711 --> 00:01:05.251
It's a memory address.

23
00:01:05.251 --> 00:01:11.751
It's an integer that refers to where
that gigantic array of bytes are we.

24
00:01:11.751 --> 00:01:14.531
We talked about what is C,
what is it used for?

25
00:01:14.531 --> 00:01:17.431
It's one of the top 10 most
popular programming languages, and

26
00:01:17.431 --> 00:01:20.380
now you hopefully have a more
visceral sense of why, if you really,

27
00:01:20.380 --> 00:01:23.834
really want build an operating system
where performance is really critical.

28
00:01:23.834 --> 00:01:26.736
A database,
a programming language compiler, or

29
00:01:26.736 --> 00:01:30.651
a programming language runtime,
all of these things are things that

30
00:01:30.651 --> 00:01:33.891
can benefit from having all of
the safety rails removed so

31
00:01:33.891 --> 00:01:37.895
that you can just make things as
optimized as fast as you possibly can.

32
00:01:37.895 --> 00:01:42.059
We talked about where C comes from,
[LAUGH] back in the PDP-11 days,

33
00:01:42.059 --> 00:01:45.871
just one step removed from punch cards,
working on a teletype,

34
00:01:45.871 --> 00:01:49.705
which is a big ergonomics
improvement compared to punch cards.

35
00:01:49.705 --> 00:01:50.896
This is what they built this language in.

36
00:01:50.896 --> 00:01:54.991
And everything we did today is just an
evolution of the same language that they

37
00:01:54.991 --> 00:01:59.149
made in 1972 on that teletype with this
extremely limited amount of system

38
00:01:59.149 --> 00:01:59.850
resources.

39
00:01:59.850 --> 00:02:04.715
Now we're working on machines that are
multiple orders of magnitude more powerful

40
00:02:04.715 --> 00:02:05.418
than this.

41
00:02:05.418 --> 00:02:06.378
Why is C popular?

42
00:02:06.378 --> 00:02:07.568
Basically performance.

43
00:02:07.568 --> 00:02:09.577
I mean, this is the real thing.

44
00:02:09.577 --> 00:02:12.078
C++, you can get the same
levels of performance.

45
00:02:12.078 --> 00:02:12.728
It is possible.

46
00:02:12.728 --> 00:02:18.408
Same thing with Rust, same thing with JAI,
and Odin and Zig and all those.

47
00:02:18.408 --> 00:02:21.691
But it is much simpler than C++ and
although there are new

48
00:02:21.691 --> 00:02:26.051
competing alternatives, they're much
newer and less established than C.

49
00:02:26.051 --> 00:02:30.812
C is 50 plus years old, Zig is,
I don't know, five, maybe 10 years old,

50
00:02:30.812 --> 00:02:32.198
something like that.

51
00:02:32.198 --> 00:02:35.782
And yet, despite this, in the local
static HTTP server Perf Olympics,

52
00:02:35.782 --> 00:02:39.322
what we've just built in the course
of this workshop with no standard.

53
00:02:39.322 --> 00:02:44.292
No dependencies other than the standard
library was able to outcompete these

54
00:02:44.292 --> 00:02:49.187
things that have been worked on way
more than just this little workshop, and

55
00:02:49.187 --> 00:02:53.249
also which have millions in some
cases of downloads and usage.

56
00:02:53.249 --> 00:02:57.338
And this is again with my silly little
benchmark of [LAUGH] frontendmasters.com.

57
00:02:57.338 --> 00:02:59.904
But you can reproduce
this locally if you want.

58
00:02:59.904 --> 00:03:03.189
Okay, yeah, we talked about portable
assembly and how it's like, well, I mean,

59
00:03:03.189 --> 00:03:05.736
yes, when it comes to the instructions
we're compiling to, but

60
00:03:05.736 --> 00:03:07.710
there are still library
differences with the OS.

61
00:03:07.710 --> 00:03:11.845
So it's not like, it's all just complete
roses, and you can just write your .c file

62
00:03:11.845 --> 00:03:15.709
and then just ship it out the door, and
you don't have to think about anything.

63
00:03:15.709 --> 00:03:20.132
But at the same time, we did also look
at some actual non portable assembly and

64
00:03:20.132 --> 00:03:23.332
hopefully we can all agree that for
all of its problems,

65
00:03:23.332 --> 00:03:27.651
C is a significant ergonomics upgrade
over all of that level of verbosity.

66
00:03:27.651 --> 00:03:30.676
Zero overhead programming, pretty much
true unless you wanna really micromanage

67
00:03:30.676 --> 00:03:32.287
your registers like an assembly language.

68
00:03:32.287 --> 00:03:35.580
But honestly, the compilers do tend
to do a very good job of that.

69
00:03:35.580 --> 00:03:37.200
Almost zero safety programming.

70
00:03:37.200 --> 00:03:39.377
I mean, we had this slide at
the beginning of the workshop.

71
00:03:39.377 --> 00:03:41.423
Yeah, I remember there were
some questions about, hey,

72
00:03:41.423 --> 00:03:43.067
what does that mean in
terms of memory safety?

73
00:03:43.067 --> 00:03:46.654
Well, now we've seen a bunch of examples
of specifically what memory unsafety

74
00:03:46.654 --> 00:03:49.558
means, and all of the fun
consequences that can come from that.

75
00:03:49.558 --> 00:03:53.105
And it is also the language that other
languages use to talk to each other.

76
00:03:53.105 --> 00:03:56.713
I mentioned at the very beginning that we
would just talk very briefly about how you

77
00:03:56.713 --> 00:03:59.224
could use this if you are,
a JavaScript programmer, and

78
00:03:59.224 --> 00:04:01.335
you wanna get some C into
your JavaScript code.

79
00:04:01.335 --> 00:04:02.685
This is how you would do this.

80
00:04:02.685 --> 00:04:07.005
So one of the reasons that I wanted to
make sure that we were actually doing some

81
00:04:07.005 --> 00:04:10.328
like reading docs of C APIs is
that if you go to this website,

82
00:04:10.328 --> 00:04:13.663
you can actually learn how to
build Node.js add-ons in C.

83
00:04:13.663 --> 00:04:17.567
In other words, you can take your Node.js
program and you can literally say,

84
00:04:17.567 --> 00:04:21.373
I want to call a little bit of C code
that I've written from my Node.js code.

85
00:04:21.373 --> 00:04:22.577
This will tell you how to do that,

86
00:04:22.577 --> 00:04:25.158
and it's gonna be using exactly the same
styles of docs and the types and

87
00:04:25.158 --> 00:04:27.415
all of that type of stuff that
we learned about in this course.

88
00:04:27.415 --> 00:04:30.879
So if you want to go out and build your
own Node.js add ons, let's say you're

89
00:04:30.879 --> 00:04:35.112
writing something like, I just really need
some really high performance section here.

90
00:04:35.112 --> 00:04:38.141
If I could make this one part of my
NodeJs server a little bit faster,

91
00:04:38.141 --> 00:04:39.431
this is a way you can do that.

92
00:04:39.431 --> 00:04:41.771
You can just bust out into C and do that.

93
00:04:41.771 --> 00:04:46.136
Or if you're like, I wanna write it in
Rust, you could use C as an intermediary,

94
00:04:46.136 --> 00:04:48.596
because the Node.js API
works in terms of C.

95
00:04:48.596 --> 00:04:52.256
They actually made their
library compatible with C++,

96
00:04:52.256 --> 00:04:54.054
but C++ is a superset of C.

97
00:04:54.054 --> 00:04:56.844
So anything that works in C++,
you can also do in C.

98
00:04:56.844 --> 00:05:01.134
I've actually gotten paid at work to
write a Node.js add-on [LAUGH] before.

99
00:05:01.134 --> 00:05:04.164
So I can confirm that this
definitely works with just C,

100
00:05:04.164 --> 00:05:06.171
you don't need to know C to use this.

101
00:05:06.171 --> 00:05:09.583
And essentially, this is a way that you
can just speed up your your Node.js

102
00:05:09.583 --> 00:05:13.482
programs, or if you have some particular C
library that you wanna use, that you wanna

103
00:05:13.482 --> 00:05:17.402
really get in there, and nobody's made a
wrapper for that, you can totally do that.

104
00:05:17.402 --> 00:05:21.828
And in fact,
you can even then distribute it on NPM.

105
00:05:21.828 --> 00:05:25.370
I did wanna note that if you're trying
to get into a large C or C++ code base,

106
00:05:25.370 --> 00:05:28.586
such as like a Postgres or an operating
system or something like that,

107
00:05:28.586 --> 00:05:30.676
building it can be
a significant challenge.

108
00:05:30.676 --> 00:05:35.708
So for this course, we're dealing with
one .c file, building it not difficult.

109
00:05:35.708 --> 00:05:39.491
If you're dealing with a gigantic C
code base or C++ code base, building it,

110
00:05:39.491 --> 00:05:40.398
far from trivial.

111
00:05:40.398 --> 00:05:43.978
Fortunately, I do have a recommendation
of how to learn about how to build

112
00:05:43.978 --> 00:05:44.742
these things.

113
00:05:44.742 --> 00:05:46.453
Andrew Kelley, who created Zig,

114
00:05:46.453 --> 00:05:49.701
gave this awesome talk called how
to build software from source.

115
00:05:49.701 --> 00:05:52.349
And depending on what programming
language you're used to using,

116
00:05:52.349 --> 00:05:53.561
you might think that's easy.

117
00:05:53.561 --> 00:05:55.271
Why would you give
a whole talk about that?

118
00:05:55.271 --> 00:05:57.971
It's not so easy when you're talking
about large C and C++ projects.

119
00:05:57.971 --> 00:06:02.553
But if you watch this talk, he gives a lot
of really, really good practical tips for

120
00:06:02.553 --> 00:06:06.758
how to actually configure and then
build these large projects from source.

121
00:06:06.758 --> 00:06:10.330
This is from the conference
software you can love in 2023.

122
00:06:10.330 --> 00:06:14.605
And here is a link if you
wanna go check that out.

123
00:06:14.605 --> 00:06:16.423
I also wanted to plug this book.

124
00:06:16.423 --> 00:06:17.593
This is a very famous book.

125
00:06:17.593 --> 00:06:19.708
I actually bought on eBay a copy.

126
00:06:19.708 --> 00:06:21.523
This is a picture of someone else's book.

127
00:06:21.523 --> 00:06:25.033
But if you ever hear what K&amp;R,
this is the book they're talking about.

128
00:06:25.033 --> 00:06:27.418
So this is Brian Curnahan and
Dennis Ritchie.

129
00:06:27.418 --> 00:06:32.251
So Dennis Ritchie was a creative C, and
then Brian is a very famous C user and

130
00:06:32.251 --> 00:06:34.798
writer and author and stuff like that.

131
00:06:34.798 --> 00:06:37.606
This is the first edition,
which I did wanna make sure and

132
00:06:37.606 --> 00:06:41.467
get cuz it has some fun little anecdotes
in here about really old hardware stuff

133
00:06:41.467 --> 00:06:43.595
that aren't really applicable anymore.

134
00:06:43.595 --> 00:06:46.284
But this is also just kind of
a seminal it's one of the classic

135
00:06:46.284 --> 00:06:49.134
books that people talk about,
right up there with structure and

136
00:06:49.134 --> 00:06:52.284
interpretation of computer programs
as just even beyond the C stuff.

137
00:06:52.284 --> 00:06:55.535
It's also got a lot of advice
about philosophies around around

138
00:06:55.535 --> 00:06:59.151
writing programming, and
as we seen in this workshop, philosophies

139
00:06:59.151 --> 00:07:03.525
around writing C code are pretty different
from best practices in other languages.

140
00:07:03.525 --> 00:07:07.310
So I recommend giving it a read,
if for no other reason, then it's just

141
00:07:07.310 --> 00:07:11.238
the perspective is pretty different
than what you're probably used to.

142
00:07:11.238 --> 00:07:13.863
If you wanna get further down
the performance optimization rabbit hole,

143
00:07:13.863 --> 00:07:14.930
I have two recommendations.

144
00:07:14.930 --> 00:07:19.696
One is Agner Foggs website, agner.org I
wanted to include a screenshot of this

145
00:07:19.696 --> 00:07:21.912
with the pale green and everything.

146
00:07:21.912 --> 00:07:25.137
He's also got a little animated plane that
flies across when you go to the homepage

147
00:07:25.137 --> 00:07:27.956
and the plane has a little banner
behind it that says I hate animations.

148
00:07:27.956 --> 00:07:31.421
That's kind of the vibe [LAUGH]
that we're dealing with here.

149
00:07:31.421 --> 00:07:33.356
The information is incredibly,
incredibly good.

150
00:07:33.356 --> 00:07:35.298
It's also pretty dense.

151
00:07:35.298 --> 00:07:39.626
I personally have read through
the optimizing software in C++ one.

152
00:07:39.626 --> 00:07:42.692
Some of it in C++ specific, but
a whole lot of it is really,

153
00:07:42.692 --> 00:07:44.631
really just like low level hardware.

154
00:07:44.631 --> 00:07:47.886
Like here's what your CPU is doing,
here are some tips and tricks.

155
00:07:47.886 --> 00:07:52.272
Very, very, very detailed, pretty dense,
but if you really wanna go down the rabbit

156
00:07:52.272 --> 00:07:56.176
hole on this stuff, and you thought that
some of the crazy tricks that we did at

157
00:07:56.176 --> 00:08:00.231
the end of a part six were fun, you can
find more stuff like that at this website.

158
00:08:00.231 --> 00:08:04.082
If you really wanna go all the way
down the rabbit hole, Casey Muratore,

159
00:08:04.082 --> 00:08:06.873
who you might have seen on
like the primogen stream.

160
00:08:06.873 --> 00:08:08.583
He's a frequent guest on there.

161
00:08:08.583 --> 00:08:11.243
He is an old school game
engine programmer, and

162
00:08:11.243 --> 00:08:15.981
he made this unbelievably detailed course
called performance aware programming.

163
00:08:15.981 --> 00:08:20.481
It is many, many, many hours,
I've watched through all that.

164
00:08:20.481 --> 00:08:22.011
I don't think I'm quite
caught up right now.

165
00:08:22.011 --> 00:08:26.842
But it goes into things like the very
beginning of the course is you go through

166
00:08:26.842 --> 00:08:29.571
and build a simulator for
a really old CPU.

167
00:08:29.571 --> 00:08:33.491
So you can actually see literally what is
the CPU doing when it gets the ones and

168
00:08:33.491 --> 00:08:34.045
zeros in.

169
00:08:34.045 --> 00:08:37.214
We're gonna write software that
deals with those ones and zeros and

170
00:08:37.214 --> 00:08:39.334
simulates actually doing
what the CPU does.

171
00:08:39.334 --> 00:08:42.472
So you really can absolutely
understand what all is going on.

172
00:08:42.472 --> 00:08:46.177
And then from there, he's like, that was
an old school CPU that was much simpler.

173
00:08:46.177 --> 00:08:47.706
Let's talk about modern CPUs.

174
00:08:47.706 --> 00:08:51.177
And he just goes through all the different
features that modern CPUs have added and

175
00:08:51.177 --> 00:08:52.847
all the complexities they've added.

176
00:08:52.847 --> 00:08:56.501
There's also a cool moment at the
beginning of the course where he shows you

177
00:08:56.501 --> 00:08:59.636
a Python program and is like,
I can make this, what was it like?

178
00:08:59.636 --> 00:09:01.947
10,000 times faster in C or
something like that?

179
00:09:01.947 --> 00:09:06.436
And he actually goes through a debugger
and steps into showing you all the layers

180
00:09:06.436 --> 00:09:10.389
of overhead that Python is adding,
and how if you just rewrite it in C,

181
00:09:10.389 --> 00:09:13.614
you can get it to be [LAUGH] massively,
massively faster.

182
00:09:13.614 --> 00:09:16.620
Really, really cool stuff,
extremely detailed, not for

183
00:09:16.620 --> 00:09:20.408
the faint of heart, but definitely,
highly recommend that check this out

184
00:09:20.408 --> 00:09:24.154
if you're interested in really going
down the performance rabbit hole.

185
00:09:24.154 --> 00:09:26.559
And I also wanted to mention,
yeah, there was a question?

186
00:09:26.559 --> 00:09:31.609
&gt;&gt; Speaker 2: Just on a similar vein,
Mishko Avery, the creator of Angular,

187
00:09:31.609 --> 00:09:36.672
has a course on Frontend Masters
called Bare Metal JavaScript.

188
00:09:36.672 --> 00:09:40.476
And he builds a CPU register and-.

189
00:09:40.476 --> 00:09:41.221
&gt;&gt; Richard Feldman: Nice.
&gt;&gt; Speaker 2: Memory and

190
00:09:41.221 --> 00:09:42.308
all that kind of stuff from scratch.

191
00:09:42.308 --> 00:09:46.406
So, something to check out if
you're already on Frontend Masters.

192
00:09:46.406 --> 00:09:46.907
&gt;&gt; Richard Feldman: There you go.

193
00:09:46.907 --> 00:09:48.306
Yeah, nice.

194
00:09:48.306 --> 00:09:50.871
&gt;&gt; Speaker 3: Does C-sharp
have any relation here?

195
00:09:50.871 --> 00:09:52.549
&gt;&gt; Richard Feldman: Does C-sharp
have a relation here?

196
00:09:52.549 --> 00:09:53.748
Only in name, really.

197
00:09:53.748 --> 00:09:58.126
So C-sharp is basically,
how do I say this?

198
00:09:58.126 --> 00:10:00.754
Java came out and
then C-sharp came out and

199
00:10:00.754 --> 00:10:03.894
then people were like,
this looks a lot like Java.

200
00:10:03.894 --> 00:10:08.916
Other than the name C, which I'm
sure was like a pun on C and C++,

201
00:10:08.916 --> 00:10:14.504
it almost has nothing in common with C and
a lot, a lot in common with Java.

202
00:10:14.504 --> 00:10:16.279
That's, I guess, a quick summary of it.

203
00:10:16.279 --> 00:10:17.520
[LAUGH] Yeah.

204
00:10:17.520 --> 00:10:20.493
Yeah, cool.
So some low overhead C alternatives.

205
00:10:20.493 --> 00:10:22.208
We mentioned a couple of these,

206
00:10:22.208 --> 00:10:25.701
like C++ definitely way off
the complexity into the spectrum,

207
00:10:25.701 --> 00:10:29.654
probably the most complicated popular
language on the planet right now.

208
00:10:29.654 --> 00:10:33.402
Russ, strong contender,
also extremely complicated language, but

209
00:10:33.402 --> 00:10:37.408
has way more guarantees and a lot of
ergonomics benefits compared to C++.

210
00:10:37.408 --> 00:10:40.892
Also has the benefit of not
having been created in 1980s so

211
00:10:40.892 --> 00:10:44.376
[LAUGH] got to benefit from a lot
of advances in various things.

212
00:10:44.376 --> 00:10:47.329
The D programming language
is also pretty old.

213
00:10:47.329 --> 00:10:51.272
D is notable for like anytime you mention
C++ or Russ or Zig on Hacker News,

214
00:10:51.272 --> 00:10:53.563
someone will be like, and D, what about D?

215
00:10:53.563 --> 00:10:56.453
But it's just not like really
picking up as much steam.

216
00:10:56.453 --> 00:10:57.289
It's been around for a long time.

217
00:10:57.289 --> 00:11:01.543
It's very powerful, has a lot of things,
but it doesn't really seem,

218
00:11:01.543 --> 00:11:05.257
if I'm being honest,
like it's gonna take off anytime soon.

219
00:11:05.257 --> 00:11:09.475
Zig is definitely like having
a significant uptick in popularity by

220
00:11:09.475 --> 00:11:14.063
basically being a reaction to these
sort of more complex C alternatives,

221
00:11:14.063 --> 00:11:19.170
like C++ and Rust and D and then Odin and
JAI are two significantly less popular.

222
00:11:19.170 --> 00:11:22.522
But also, kind of taking
the same basic approach of, yeah,

223
00:11:22.522 --> 00:11:27.142
let's try to improve on C, but in a way
where we're not adding so much complexity.

224
00:11:27.142 --> 00:11:29.149
JAI, I should mention, is a working name.

225
00:11:29.149 --> 00:11:32.721
This is created by Jonathan Blow,
who's a friend of Casey Muratori and

226
00:11:32.721 --> 00:11:36.231
a former collaborator, you might know
him as the creator of the really

227
00:11:36.231 --> 00:11:38.155
popular games Braid and The Witness.

228
00:11:38.155 --> 00:11:39.646
He's made this programming language.

229
00:11:39.646 --> 00:11:42.261
JAI is specifically designed to be for
games, and

230
00:11:42.261 --> 00:11:44.637
it's based on his frustrations with C++.

231
00:11:44.637 --> 00:11:48.070
And it has some significant
differences between Zig and Odin, but

232
00:11:48.070 --> 00:11:52.173
I haven't actually used it, so I can't
really comment on it in depth other than

233
00:11:52.173 --> 00:11:54.930
to say that right now on
the simplest C alternatives,

234
00:11:54.930 --> 00:11:58.385
definitely Zig of these three is
by far the most popular right now.

235
00:11:58.385 --> 00:12:03.048
And time will tell how
those things shaken.

236
00:12:03.048 --> 00:12:06.339
Also all of these low overhead
C Alternatives they all support C and

237
00:12:06.339 --> 00:12:10.219
Rob just like most mainstream languages
do because C is the language that other

238
00:12:10.219 --> 00:12:13.190
languages use talk to each
other as previously discussed.

239
00:12:13.190 --> 00:12:17.908
Like I mentioned earlier, I mean C is
basically the most universal language in

240
00:12:17.908 --> 00:12:22.636
the world today and now that you know C
you know the most universal in the world.

241
00:12:22.636 --> 00:12:24.127
Thanks very much.

242
00:12:24.127 --> 00:12:27.473
&gt;&gt; [APPLAUSE]

