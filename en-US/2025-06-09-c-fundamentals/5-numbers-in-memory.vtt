WEBVTT

1
00:00:00.000 --> 00:00:01.520
&gt;&gt; Richard feldman: Building HTTP
responses.

2
00:00:01.520 --> 00:00:05.143
In this section, we're going to start
building our actual static web server.

3
00:00:05.143 --> 00:00:11.239
We're not gonna start by having it up and
running, listening on port 8080, whatever.

4
00:00:11.239 --> 00:00:13.039
We're just gonna do it a much simpler way,

5
00:00:13.039 --> 00:00:15.248
where at first we're just
gonna work with strings.

6
00:00:15.248 --> 00:00:18.888
So we're gonna build HTTP responses first,
and then the next section we're gonna work

7
00:00:18.888 --> 00:00:22.298
with dealing with the incoming HTTP
requests, still just working with strings.

8
00:00:22.298 --> 00:00:25.738
Then we're gonna get into file IO, cuz one
of the things that static web server needs

9
00:00:25.738 --> 00:00:27.349
to do is to read the files off your disc.

10
00:00:27.349 --> 00:00:30.558
And then finally, we're gonna get
to the network IO portion of this.

11
00:00:30.558 --> 00:00:33.492
So for now, we're just gonna start
off working with strings and

12
00:00:33.492 --> 00:00:36.644
learn a little bit more about how C
deals with string manipulation and

13
00:00:36.644 --> 00:00:38.999
learn a little bit more
about the language as we go.

14
00:00:38.999 --> 00:00:41.890
So we're gonna start off by
talking about numbers in memory.

15
00:00:41.890 --> 00:00:45.475
Like what does that
actually look like in C.

16
00:00:45.475 --> 00:00:50.500
Byte arrays, null-terminated strings,
and finally getting a strings length.

17
00:00:50.500 --> 00:00:53.236
This might not seem like it should
be an advanced concept, but in C,

18
00:00:53.236 --> 00:00:55.206
it's not as trivial as it
is in other languages.

19
00:00:55.206 --> 00:00:56.573
In memory we have bits.

20
00:00:56.573 --> 00:00:57.860
These are ones and zeros.

21
00:00:57.860 --> 00:01:01.339
And essentially, these are what
the hardware sees in memory.

22
00:01:01.339 --> 00:01:03.791
So you've got a whole bunch of ones and
zeros and

23
00:01:03.791 --> 00:01:06.006
you can interpret these however you want.

24
00:01:06.006 --> 00:01:10.569
The hardware doesn't really care if this
section of ones and zeros is conceptually

25
00:01:10.569 --> 00:01:14.358
an integer or conceptually a string or
conceptually anything else.

26
00:01:14.358 --> 00:01:16.921
The CPU just has instructions
that basically say like, hey,

27
00:01:16.921 --> 00:01:19.986
tell me some ones and zeros and tell
me what operation you wanna do on them.

28
00:01:19.986 --> 00:01:22.404
And I will make some new ones and
zeros for you.

29
00:01:22.404 --> 00:01:25.662
So for example, you could say these
ones and zeros represent an integer, and

30
00:01:25.662 --> 00:01:28.117
you ask the CPU, I want you to
add this to some other ones and

31
00:01:28.117 --> 00:01:30.198
zeros that I also am
interpreting as an integer.

32
00:01:30.198 --> 00:01:31.979
And it's like, sure, here are the ones and

33
00:01:31.979 --> 00:01:34.014
zeros that come out of
adding those two together.

34
00:01:34.014 --> 00:01:37.009
You could also say the same
exact pattern of ones and zeros.

35
00:01:37.009 --> 00:01:39.418
Hey, CPU, please treat these
as a floating point number and

36
00:01:39.418 --> 00:01:42.644
do floating point multiplication or
division on them, or something like that.

37
00:01:42.644 --> 00:01:45.336
And the CPU is like, sure, you're the ones
and zeros that come out if you do that.

38
00:01:45.336 --> 00:01:49.066
Or you could say, treat it as a string,
and I'm gonna do something else with it.

39
00:01:49.066 --> 00:01:52.545
But most commonly, these ones and zeros
are actually grouped into groups of eight,

40
00:01:52.545 --> 00:01:53.778
at least in modern hardware.

41
00:01:53.778 --> 00:01:55.865
So 8-bits to a byte.

42
00:01:55.865 --> 00:02:00.376
So 8 individual 1s and
0s correspond to 1-byte.

43
00:02:00.376 --> 00:02:03.540
And in modern hardware,
this is sort of emerged as the standard,

44
00:02:03.540 --> 00:02:06.704
where you basically have like,
if you're working with memory,

45
00:02:06.704 --> 00:02:08.964
you're generally working
in terms of bytes.

46
00:02:08.964 --> 00:02:13.008
When we specified 13 or 14 as the length
of the Hello World string in the last

47
00:02:13.008 --> 00:02:15.231
exercise, that was 13 or 14-bytes.

48
00:02:15.231 --> 00:02:18.018
In other words, each group of 8-bits.

49
00:02:18.018 --> 00:02:21.651
And essentially, older hardware sometimes
would use different groupings of these.

50
00:02:21.651 --> 00:02:25.471
So they might have had like, 7-bits was
kind of the fundamental thing, or 6-bits.

51
00:02:25.471 --> 00:02:29.239
But these days it's like,
yeah, 8-bits is the way to go.

52
00:02:29.239 --> 00:02:32.842
And we can decide that we want
to interpret these bytes as, for

53
00:02:32.842 --> 00:02:36.327
example, entire numbers rather
than just ones and zeros.

54
00:02:36.327 --> 00:02:39.109
So for example,
if you have eight zeros in a row and.

55
00:02:39.109 --> 00:02:41.763
That, as you might expect,
is interpreted as the number 0.

56
00:02:41.763 --> 00:02:43.574
There's nothing but 0s in there.

57
00:02:43.574 --> 00:02:46.282
This one is 0 plus 2 to the 0.

58
00:02:46.282 --> 00:02:51.501
This is 0 plus 2 to the 1, and
this is 0 plus 2 to the 1 plus 2 to the 0.

59
00:02:51.501 --> 00:02:53.307
So what do I mean by that?

60
00:02:53.307 --> 00:02:55.714
Essentially, this is
how base 2 math works.

61
00:02:55.714 --> 00:02:59.323
Now, we as humans, I'm assuming because
we have 10 fingers and it's easy for

62
00:02:59.323 --> 00:02:59.866
counting.

63
00:02:59.866 --> 00:03:01.065
We like base 10 [LAUGH].

64
00:03:01.065 --> 00:03:04.397
That's like kind of what
we tend to go with.

65
00:03:04.397 --> 00:03:08.502
Decimal meaning, base 10, and
this is binary meaning base 2.

66
00:03:08.502 --> 00:03:13.007
So, essentially in base 2 numbers, you
have actually the same kind of rules that

67
00:03:13.007 --> 00:03:17.580
you do in base 10, where the right most
digit essentially corresponds to it's,

68
00:03:17.580 --> 00:03:19.892
like in this case, it's either 0 or 1.

69
00:03:19.892 --> 00:03:23.142
But in base 10, this'll be 0,
1, 2, 3, 4, 5, 6, 7, 8, or 9.

70
00:03:23.142 --> 00:03:27.351
And then, if you go over one digit,
that's gonna be plus 10 to the 1 or

71
00:03:27.351 --> 00:03:28.671
something like that.

72
00:03:28.671 --> 00:03:29.642
So essentially,

73
00:03:29.642 --> 00:03:33.144
the way that you can convert these
to decimal is to say all right.

74
00:03:33.144 --> 00:03:37.116
I've got a 1 here and
that 1 is all the way to the right.

75
00:03:37.116 --> 00:03:39.531
It's the rightmost digit of the thing.

76
00:03:39.531 --> 00:03:43.580
So that means we're gonna
add 2 to the 0 to that.

77
00:03:43.580 --> 00:03:45.420
And here we have it,
it's scooted over one more.

78
00:03:45.420 --> 00:03:46.357
That's gonna be 2 to the 1.

79
00:03:46.357 --> 00:03:49.035
And here we have both of them set,
the rightmost and

80
00:03:49.035 --> 00:03:50.729
the second rightmost being 1.

81
00:03:50.729 --> 00:03:52.987
So that's gonna be 2 to
the 1 plus 2 to the 0.

82
00:03:52.987 --> 00:03:56.517
So this works out to be 0,
1, 2, and 3 in decimal.

83
00:03:56.517 --> 00:04:01.346
So if you see this bit pattern of all
0s followed by 2, 1s at the very end,

84
00:04:01.346 --> 00:04:03.965
that corresponds to decimal number 3.

85
00:04:03.965 --> 00:04:06.213
This one corresponds to
the decimal number 2, and

86
00:04:06.213 --> 00:04:08.314
this one corresponds to
the decimal number 1.

87
00:04:08.314 --> 00:04:13.051
That's essentially what we get when
we're talking about converting bits

88
00:04:13.051 --> 00:04:15.164
from decimal to binary and back.

89
00:04:15.164 --> 00:04:17.863
You can memorize these rules and
apply them yourself if you want.

90
00:04:17.863 --> 00:04:20.194
It's usually not necessary unless
you're doing something really,

91
00:04:20.194 --> 00:04:21.980
really fancy in terms of
performance optimization.

92
00:04:21.980 --> 00:04:25.130
We will do a tiny bit of stuff with
bits [LAUGH] towards the very end of

93
00:04:25.130 --> 00:04:26.980
the workshop, but that's about it.

94
00:04:26.980 --> 00:04:28.713
But if you're curious and
you wanna convert these things,

95
00:04:28.713 --> 00:04:30.863
there's websites where you can just
be like, give me a decimal number and

96
00:04:30.863 --> 00:04:32.646
I'll give you the binary out
the other side, or vice versa.

97
00:04:32.646 --> 00:04:36.195
Give me a binary number and
I'll give you the decimal equivalent.

98
00:04:36.195 --> 00:04:39.569
So essentially, it's as simple as that.

99
00:04:39.569 --> 00:04:44.337
These are 1s and 0s, and that's a base
2 system rather than a base 10 system.

100
00:04:44.337 --> 00:04:46.639
Now, the reason I mention
all this is again,

101
00:04:46.639 --> 00:04:50.284
the important part here is that in memory,
the hardware does not care.

102
00:04:50.284 --> 00:04:51.670
These are all user space,

103
00:04:51.670 --> 00:04:55.398
like programmer concepts that we
are imposing on top of the hardware.

104
00:04:55.398 --> 00:04:59.079
We've decided to Interpret these 1s and
0s in this way.

105
00:04:59.079 --> 00:05:02.960
This is not something the hardware
is sort of like innately requires,

106
00:05:02.960 --> 00:05:06.906
other than the fact that it does have
a number of conveniences if you're

107
00:05:06.906 --> 00:05:10.486
working in terms of bytes or
in terms of other sizes of integers.

108
00:05:10.486 --> 00:05:11.644
Just to go a little bit further with this.

109
00:05:11.644 --> 00:05:14.618
So if you had like, to continue
the pattern, like you have two 0s and

110
00:05:14.618 --> 00:05:16.068
then a 1, that's gonna be a 4.

111
00:05:16.068 --> 00:05:19.309
If you have another one at the very end
on top of that, that's gonna be a 5.

112
00:05:19.309 --> 00:05:21.591
And then 6 is like, moving over one digit.

113
00:05:21.591 --> 00:05:25.172
Seven is three 1s, and
then eight is 1 over like that.

114
00:05:25.172 --> 00:05:28.588
So just like in base 10,
as you keep adding more and more digits,

115
00:05:28.588 --> 00:05:31.769
like this is kind of the equivalent
of like 999 in decimal.

116
00:05:31.769 --> 00:05:32.772
And then once you add one more,

117
00:05:32.772 --> 00:05:34.906
it's like, these are all at
their maximum possible value.

118
00:05:34.906 --> 00:05:36.552
So we flip over to one more.

119
00:05:36.552 --> 00:05:39.209
We add one more digit over
in the next column, over and

120
00:05:39.209 --> 00:05:40.639
then reset the others to 0.

121
00:05:40.639 --> 00:05:43.754
So it's the same kind of
stuff you'd see in base 10,

122
00:05:43.754 --> 00:05:46.279
just the maximum number is 1 instead of 9.

123
00:05:46.279 --> 00:05:50.527
All right, now, I did wanna note, though,
that you can take these same 1s and 0s,

124
00:05:50.527 --> 00:05:53.300
and you can choose to interpret
them in different ways.

125
00:05:53.300 --> 00:05:56.287
For example, instead of interpreting
them in groups of eight,

126
00:05:56.287 --> 00:05:58.514
where we have like, this is the number 0.

127
00:05:58.514 --> 00:06:00.470
This is the number 1.
This is 2, and this is 3.

128
00:06:00.470 --> 00:06:04.431
We can say, okay, I'm actually gonna take
these same exact pattern of 1s and 0s and

129
00:06:04.431 --> 00:06:06.093
I'm gonna chop it up differently.

130
00:06:06.093 --> 00:06:09.325
And I'm gonna say, well, actually,
I wanna chop it right in the middle here.

131
00:06:09.325 --> 00:06:12.880
Instead of having groups of 8,
I'm gonna have like groups of 16 and

132
00:06:12.880 --> 00:06:16.271
this one is gonna be 1, and
then this one's gonna be,1027.

133
00:06:16.271 --> 00:06:19.523
Or chop it up in the middle here, and
say sorry, and not chop up at all, and

134
00:06:19.523 --> 00:06:21.325
just say, this is one gigantic number.

135
00:06:21.325 --> 00:06:23.686
And so this, this whole thing is like,

136
00:06:23.686 --> 00:06:28.268
this one right here gives us 131072,
this one gives us 1024, and

137
00:06:28.268 --> 00:06:32.367
this, two 1s at the end give us 3,
just like they did back up here.

138
00:06:32.367 --> 00:06:34.737
And now we have some gigantic integer.

139
00:06:34.737 --> 00:06:37.881
So this is a way that you can take
exactly the same piece of memory and

140
00:06:37.881 --> 00:06:39.973
represents it in multiple different ways.

141
00:06:39.973 --> 00:06:43.502
And one of the things we're gonna see
over the course of the workshop is that,

142
00:06:43.502 --> 00:06:45.311
this is actually a thing that we do in C.

143
00:06:45.311 --> 00:06:48.796
The term is casting, meaning that
you take the same exact memory and

144
00:06:48.796 --> 00:06:51.192
you decide to interpret
it in a different way.

145
00:06:51.192 --> 00:06:55.697
So this right here would be interpreting
this as an array of 4-bytes, 1, 2, 3,

146
00:06:55.697 --> 00:06:58.783
4-bytes, all side by side
next to each other in memory.

147
00:06:58.783 --> 00:07:04.004
This would be an array of two integers
that are each 16-bit integers.

148
00:07:04.004 --> 00:07:09.805
And this would be one 32-bit integer
that's not even an array at all.

149
00:07:09.805 --> 00:07:12.884
So same memory, but
different ways to interpret it.

150
00:07:12.884 --> 00:07:15.764
The main takeaway here is that
we decide how to interpret

151
00:07:15.764 --> 00:07:17.244
memory as the programmers.

152
00:07:17.244 --> 00:07:19.724
And in C, this is a very,
very important part of,

153
00:07:19.724 --> 00:07:22.574
doing C is deciding how we
want to interpret that memory.

