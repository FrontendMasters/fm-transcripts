WEBVTT

1
00:00:00.245 --> 00:00:03.400
Unfortunately, this doesn't quite work.

2
00:00:03.400 --> 00:00:08.167
So if you have a thing marked as a const
in C, first of all, depending on the C

3
00:00:08.167 --> 00:00:12.585
compiler, some of them will or
will not let you use these in a switch.

4
00:00:12.585 --> 00:00:15.886
But even assuming that you're
using one of the C compilers,

5
00:00:15.886 --> 00:00:18.423
it does allow you to use
a constant in a switch.

6
00:00:18.423 --> 00:00:22.141
This still won't work, because
unfortunately, one of the rules of const

7
00:00:22.141 --> 00:00:26.153
is that if you're using it at like the top
level of the program, you're actually

8
00:00:26.153 --> 00:00:29.636
just not allowed to call arbitrary
functions like toint at that time,

9
00:00:29.636 --> 00:00:30.778
you just can't do it.

10
00:00:30.778 --> 00:00:33.407
One of Zig's banner features is
called comptime, comptime and

11
00:00:33.407 --> 00:00:36.631
Zig does a whole bunch of different
things, and it's short for compile time.

12
00:00:36.631 --> 00:00:40.474
One of the cool things that it does is
that it allows you to basically just run

13
00:00:40.474 --> 00:00:42.609
zig functions at compile time like this.

14
00:00:42.609 --> 00:00:47.082
So in zig, this would actually just
work fine, but in C, unfortunately,

15
00:00:47.082 --> 00:00:47.866
it does not.

16
00:00:47.866 --> 00:00:52.508
So basically what we want is we wanna
make a constant at compile time.

17
00:00:52.508 --> 00:00:56.403
So, one of the ways that we can work
around this is by converting it from

18
00:00:56.403 --> 00:00:58.127
a constant to something else.

19
00:00:58.127 --> 00:01:01.746
So here is an example of our
code from the previous section.

20
00:01:01.746 --> 00:01:04.935
We said like listening on local host port,
whatever.

21
00:01:04.935 --> 00:01:08.085
We didn't actually do this in the example,
but a really obvious thing that

22
00:01:08.085 --> 00:01:10.235
you might wanna do is to make
a concept for the port so

23
00:01:10.235 --> 00:01:13.535
that you can just change it in one place
instead of having to go and make sure that

24
00:01:13.535 --> 00:01:16.995
the string that we're printing out is,
you know, coordinated with that thing.

25
00:01:16.995 --> 00:01:20.282
We'd have to change it in two places,
that would be annoying,

26
00:01:20.282 --> 00:01:22.216
let's just define it as a constant.

27
00:01:22.216 --> 00:01:24.733
Another thing you can do is
you can use pound define.

28
00:01:24.733 --> 00:01:28.273
Now so far, we've only seen one
instruction that starts with a pound,

29
00:01:28.273 --> 00:01:31.400
which is pound include,
which we've been using for imports,

30
00:01:31.400 --> 00:01:33.052
importing libraries and stuff.

31
00:01:33.052 --> 00:01:36.238
Everything that starts with a pound
is a preprocessor directive.

32
00:01:36.238 --> 00:01:38.446
And what that means is essentially that,

33
00:01:38.446 --> 00:01:41.549
C actually has these two
distinct phases to the compiler.

34
00:01:41.549 --> 00:01:43.132
First, there's the preprocessor,

35
00:01:43.132 --> 00:01:45.565
which basically runs before
the actual compiler proper.

36
00:01:45.565 --> 00:01:48.784
And the preprocessor's job is to
essentially to just sort of copy and

37
00:01:48.784 --> 00:01:51.906
paste a bunch of strings together,
different parts of your file.

38
00:01:51.906 --> 00:01:55.367
It has very, very minimal logic that
you can actually run, we'll see a tiny,

39
00:01:55.367 --> 00:01:58.580
tiny bit of that later, but
it's not like a full programming language.

40
00:01:58.580 --> 00:02:02.266
Whereas zig, one of the design things
of zig was to get rid of the concept of

41
00:02:02.266 --> 00:02:05.243
preprocessor directives and
instead just be like, yeah,

42
00:02:05.243 --> 00:02:06.809
just just write more Zig code.

43
00:02:06.809 --> 00:02:09.619
Just write the language, and
then you can just mark it as like,

44
00:02:09.619 --> 00:02:11.915
this is running at compile
time versus at runtime.

45
00:02:11.915 --> 00:02:14.224
But C didn't have that,
so C is basically, okay,

46
00:02:14.224 --> 00:02:17.740
one of the things you can do is you
can say, pound, define port and 8080.

47
00:02:17.740 --> 00:02:18.850
Now what does this mean?

48
00:02:18.850 --> 00:02:22.511
Well, very similarly to how pound
include meant take this library and

49
00:02:22.511 --> 00:02:26.047
just copy and paste the entire thing
into here exactly as if I had copy

50
00:02:26.047 --> 00:02:27.432
pasted it by hand in here.

51
00:02:27.432 --> 00:02:31.657
Pound define, same thing, it's basically
like everywhere you see a port,

52
00:02:31.657 --> 00:02:34.192
every time I reference this,
like in my code,

53
00:02:34.192 --> 00:02:37.646
copy-paste this exact thing
right here into the source code.

54
00:02:37.646 --> 00:02:41.214
So literally this code right here
it is as if, instead of P-O-R-T,

55
00:02:41.214 --> 00:02:43.638
I had written 8080 that's what this does.

56
00:02:43.638 --> 00:02:48.017
So this is not a type checked constant
that's gonna give me an error if I mess

57
00:02:48.017 --> 00:02:50.251
up, no, no, no, no, none of that.

58
00:02:50.251 --> 00:02:54.768
It's just like, yeah, this is exactly the
same thing as if I had written 8080 right

59
00:02:54.768 --> 00:02:58.142
here, instead of P-O-R-T,
that is what pound defined does.

60
00:02:58.142 --> 00:03:02.270
Now you can also take this a step further
and write functions with Conde fine.

61
00:03:02.270 --> 00:03:05.200
So the way these functions
work is essentially you say,

62
00:03:05.200 --> 00:03:07.018
here's the name of the function.

63
00:03:07.018 --> 00:03:10.928
In this case, I've called it four
char because it takes four chars and

64
00:03:10.928 --> 00:03:14.242
then does the exact bit wide,
bit shifting and bitwise, or

65
00:03:14.242 --> 00:03:16.716
trick that we were doing
with HTML earlier.

66
00:03:16.716 --> 00:03:19.517
The backslash, by the way,
is just C's way of saying,

67
00:03:19.517 --> 00:03:22.792
I want the thing that I'm defining
here to go on a different line,

68
00:03:22.792 --> 00:03:26.128
you have to be kind of careful with
new lines and stuff in these pound

69
00:03:26.128 --> 00:03:30.088
defines because they don't have curly
braces delivering them functions do.

70
00:03:30.088 --> 00:03:33.381
So this backslash is basically
a way of saying, yeah,

71
00:03:33.381 --> 00:03:36.459
just pretend this was on
the previous line [COUGH] and

72
00:03:36.459 --> 00:03:41.128
essentially what this will do is,
much how P-O-R-T gets substituted in.

73
00:03:41.128 --> 00:03:45.393
This is basically saying, everywhere
you call this preprocessor macro,

74
00:03:45.393 --> 00:03:48.857
that's what this is called,
this is a preprocessor macro.

75
00:03:48.857 --> 00:03:51.841
Passing whatever arguments you want for
these things,

76
00:03:51.841 --> 00:03:55.395
it's gonna be exactly as if you had
each of those arguments in these

77
00:03:55.395 --> 00:03:59.031
different positions,
followed by whatever is surrounding them.

78
00:03:59.031 --> 00:04:02.476
So it's just a little bit more of
an advanced substitution, but again,

79
00:04:02.476 --> 00:04:05.370
this is all just happening
before the compiler even starts.

80
00:04:05.370 --> 00:04:06.966
So when the compiler sees your code,

81
00:04:06.966 --> 00:04:09.546
it is as if you had not even
written these in the first place.

82
00:04:09.546 --> 00:04:12.820
It's just yeah,
these things are just like already copy

83
00:04:12.820 --> 00:04:15.760
pasted in at every single
place that you use these.

84
00:04:15.760 --> 00:04:19.607
So [COUGH] at this point we can now say,
okay, cool.

85
00:04:19.607 --> 00:04:23.969
Constant HTML equals a four char,
and now we actually are working

86
00:04:23.969 --> 00:04:28.503
around that limitation of not being
able to do this at compile time.

87
00:04:28.503 --> 00:04:33.343
And as a bonus, if you are in one
of those situations where you're

88
00:04:33.343 --> 00:04:37.655
using a compiler that does not
support constant for this,

89
00:04:37.655 --> 00:04:43.382
on some Linux distributions that I tried,
it didn't support it out the box.

90
00:04:43.382 --> 00:04:46.335
Some did, some didn't, but anyway, if
you're using one of the ones that doesn't,

91
00:04:46.335 --> 00:04:49.099
then instead of this constant, you can
just do another pound to find right here.

92
00:04:49.099 --> 00:04:53.451
And then you've worked around that too
because you're basically defining this

93
00:04:53.451 --> 00:04:56.078
thing to be equal to
this pre-processor macro.

94
00:04:56.078 --> 00:04:59.806
So at the end of the day, you're ending up
with this entire thing being substituted

95
00:04:59.806 --> 00:05:02.164
every single time you reference HTML,
CSS, or JS.

96
00:05:02.164 --> 00:05:04.615
Now that might be kind of
conceptually clunky, but

97
00:05:04.615 --> 00:05:06.895
from a code readability perspective,
again,

98
00:05:06.895 --> 00:05:10.828
if we are doing this very silly hack that
is not really strictly necessary and maybe

99
00:05:10.828 --> 00:05:14.875
more of a performance optimization that is
reasonable for a thing on a workshop, but

100
00:05:14.875 --> 00:05:18.756
also maybe kinda nice excuse to learn
about bit shifts and preprocessor macros.

101
00:05:18.756 --> 00:05:20.845
But if you're doing this type of thing,

102
00:05:20.845 --> 00:05:23.372
this is actually quite
a reasonable way to do it.

103
00:05:23.372 --> 00:05:27.203
It does give you, at least when I'm
looking at this code right here,

104
00:05:27.203 --> 00:05:29.797
HTML convert this thing
to the integer thing.

105
00:05:29.797 --> 00:05:33.171
I can see that it's the right letters
are here, it's a lot easier to debug

106
00:05:33.171 --> 00:05:36.294
than back when we were dealing with
these weird hard coded numbers.

107
00:05:36.294 --> 00:05:41.472
And this still lets me use these
things in a switch statement.

108
00:05:41.472 --> 00:05:45.607
Cool, and yeah, so this will result in
exactly the bits in memory that we want,

109
00:05:45.607 --> 00:05:48.406
and then we get to do all
the nice comparisons, okay.

110
00:05:48.406 --> 00:05:52.064
So this is going to be not only nicer to
read, but also quite fast, because, again,

111
00:05:52.064 --> 00:05:55.565
compared to the stir comp way, which,
honestly, if I were just writing this for

112
00:05:55.565 --> 00:05:58.107
personal use, I would probably
go with the stir comp way.

113
00:05:58.107 --> 00:06:03.257
I wouldn't bother to do this, but in
addition to allowing me to use an actual

114
00:06:03.257 --> 00:06:08.487
switch statement on this, it is gonna
run very fast because we aren't having

115
00:06:08.487 --> 00:06:13.330
to go through in March one, bite at
a time through each of these, okay?

116
00:06:13.330 --> 00:06:17.502
Worst noting though that if you are using
a programming language that's not c,

117
00:06:17.502 --> 00:06:21.611
almost certainly this is what is actually
the equivalent of what your language

118
00:06:21.611 --> 00:06:22.311
Just doing.

119
00:06:22.311 --> 00:06:27.444
If you have a language that supports
saying extension double equals png,

120
00:06:27.444 --> 00:06:31.189
this is almost certainly
what that's compiling to.

121
00:06:31.189 --> 00:06:36.403
It's compiling to the much less
performant and much less, I don't know,

122
00:06:36.403 --> 00:06:41.890
nicer for the CPU representation,
it's doing much, much more operations.

123
00:06:41.890 --> 00:06:46.012
And at the end of the day, the fundamental
reason that we're able to get better

124
00:06:46.012 --> 00:06:50.209
performance in sea here is that we are
doing some pretty heinous memory tricks.

125
00:06:50.209 --> 00:06:54.557
We're reinterpreting these bytes,
we're adding these extra zero bytes

126
00:06:54.557 --> 00:06:59.470
if necessary to the extension over here
we're doing these pre-processor macros.

127
00:06:59.470 --> 00:07:03.722
All this stuff, we're reinterpreting the
ones and zeros to be integers at runtime.

128
00:07:03.722 --> 00:07:05.795
Only if they happen to be four bytes or
less,

129
00:07:05.795 --> 00:07:09.048
we're relying on the domain knowledge
that in the particular case of

130
00:07:09.048 --> 00:07:12.766
a static HTTP server, everything that
we need happens to be under four bytes.

131
00:07:12.766 --> 00:07:15.503
And thankfully.woff happens to
be application octet stream,

132
00:07:15.503 --> 00:07:19.048
which is the default we want anyway, all
of these things, you can look at that, and

133
00:07:19.048 --> 00:07:20.892
you can say,
this is a giant pile of hacks.

134
00:07:20.892 --> 00:07:24.061
This is all very brittle, why don't you
just use stir, comp, a normal programmer,

135
00:07:24.061 --> 00:07:24.951
which is all very fair.

136
00:07:24.951 --> 00:07:27.811
But the point is, with C,
this is there if you need it,

137
00:07:27.811 --> 00:07:31.983
if you're trying to write something like
postgres or an operating system, and

138
00:07:31.983 --> 00:07:35.743
you really, really need that absolute
last tiny drop of performance.

139
00:07:35.743 --> 00:07:38.751
Because something like this
is in a really hot loop, and

140
00:07:38.751 --> 00:07:42.657
it's the stakes are a lot higher than
a silly little static HTTP server.

141
00:07:42.657 --> 00:07:46.450
This is one of the reasons that C has the
absolute highest performance ceiling you

142
00:07:46.450 --> 00:07:49.903
can do tricks like this if you need to,
not saying you need to all the time,

143
00:07:49.903 --> 00:07:51.741
but if you really, really need to, and

144
00:07:51.741 --> 00:07:54.459
you want to just be the fastest
thing you possibly can be.

145
00:07:54.459 --> 00:07:56.934
These type of tricks are things
that C lets you do, and

146
00:07:56.934 --> 00:08:00.674
this is where the trade-off of all of
the downsides we've seen, and we've seen

147
00:08:00.674 --> 00:08:04.428
plenty of downsides of C's memory unsafety
and all the stuff that it lets you do.

148
00:08:04.428 --> 00:08:09.124
At the end of the day, if you're trying to
think back to some of these original games

149
00:08:09.124 --> 00:08:13.417
that ran on PCs and the 90s that were
doing things with graphics that people

150
00:08:13.417 --> 00:08:18.113
thought was just totally wild, quake and
stuff doom, they were doing a lot of these

151
00:08:18.113 --> 00:08:21.710
kinds of tricks, and in some cases,
even going further to do.

152
00:08:21.710 --> 00:08:25.364
Do assembly language tricks just to
squeeze every last drop of performance

153
00:08:25.364 --> 00:08:27.054
they could out of the processors.

154
00:08:27.054 --> 00:08:29.227
And the results they got
were really amazing.

155
00:08:29.227 --> 00:08:33.420
If you want to do the most hardcore
performance optimization stuff you can

156
00:08:33.420 --> 00:08:38.083
possibly imagine, there's this whole world
of this kind of stuff that exists in C

157
00:08:38.083 --> 00:08:42.815
that most high level languages just never
even get into because it's wildly unsafe

158
00:08:42.815 --> 00:08:45.688
[LAUGH] and
that is the downside that comes with it.

