WEBVTT

1
00:00:00.000 --> 00:00:02.223
Okay, so this naturally leads to
another question, which is, okay,

2
00:00:02.223 --> 00:00:04.853
I don't wanna read 100 bytes, I wanna read
all the bytes, however many bytes for

3
00:00:04.853 --> 00:00:06.170
the file, that's how many I wanna read.

4
00:00:06.170 --> 00:00:09.942
So to do this, we actually have to do
another step, which is, we need to go and

5
00:00:09.942 --> 00:00:13.541
look at actually run a function that
will ask the operating system, hey,

6
00:00:13.541 --> 00:00:15.127
how many bytes are in this file?

7
00:00:15.127 --> 00:00:18.282
So basically, there's a couple of steps
to the process we're gonna do here.

8
00:00:18.282 --> 00:00:21.684
First is, I wanna get the size of the file
on disks as a function we can call,

9
00:00:21.684 --> 00:00:22.443
it'll do that.

10
00:00:22.443 --> 00:00:25.533
Second, I want to make a buffer
of however many bytes that is.

11
00:00:25.533 --> 00:00:27.362
So I don't wanna make
a buffer of 100 bytes,

12
00:00:27.362 --> 00:00:29.485
I wanna make a buffer that's
exactly that many bytes.

13
00:00:29.485 --> 00:00:31.957
And then three I can call
read passing that buffer and

14
00:00:31.957 --> 00:00:34.213
then it'll just read
that many bytes in there.

15
00:00:34.213 --> 00:00:37.715
Great, okay, so
here's how we're gonna do that.

16
00:00:37.715 --> 00:00:43.880
Yeah [LAUGH] don't worry,
we're not actually using all this.

17
00:00:43.880 --> 00:00:47.610
So this is what's called stat,
and stat is a struct in C.

18
00:00:47.610 --> 00:00:51.962
So a struct, you can kind of think about
it like an object in other languages, but

19
00:00:51.962 --> 00:00:54.981
a very, very bare bones,
very, very minimal object.

20
00:00:54.981 --> 00:00:58.759
Really what a struct is in C is,
it's maybe more similar to imagine if

21
00:00:58.759 --> 00:01:01.755
you just had all these variables
one after the other and

22
00:01:01.755 --> 00:01:05.228
they were all just contiguously
stored back to back in memory.

23
00:01:05.228 --> 00:01:06.273
They're not quite contiguous.

24
00:01:06.273 --> 00:01:08.125
There's this thing called
alignment padding, but

25
00:01:08.125 --> 00:01:10.070
we're not gonna get into
alignment in this workshop.

26
00:01:10.070 --> 00:01:15.227
But the basic idea here is that
there's no extra metadata here at all.

27
00:01:15.227 --> 00:01:17.187
So in some languages
you can do stuff like,

28
00:01:17.187 --> 00:01:20.039
I can iterate over all the fields and
they'll give them the strings.

29
00:01:20.039 --> 00:01:21.005
These strings are gone,

30
00:01:21.005 --> 00:01:24.228
C is I don't know, forget about that,
we're just throwing those out the window.

31
00:01:24.228 --> 00:01:27.306
These are just conveniences for
the programmer so that it knows that this

32
00:01:27.306 --> 00:01:30.344
string means get the first one and
this string means get the second one.

33
00:01:30.344 --> 00:01:36.066
So if you say start.mode_t, it's,
that means get the memory at this offset.

34
00:01:36.066 --> 00:01:38.719
So this is all just one big
contiguous chunk of bytes.

35
00:01:38.719 --> 00:01:42.715
And in fact, if you wanted to you could
try to get access to these different

36
00:01:42.715 --> 00:01:46.714
fields on this struct by just taking
the memory address of your particular

37
00:01:46.714 --> 00:01:51.119
stat instance and just doing the same
thing we've been doing with these arrays.

38
00:01:51.119 --> 00:01:54.375
Just like +5, +6, whatever,
just add to it and

39
00:01:54.375 --> 00:01:59.708
just read the memory at that address, and
that's what you're gonna get right here.

40
00:01:59.708 --> 00:02:04.658
So essentially, the struct concept in C
is a way to essentially have an array of

41
00:02:04.658 --> 00:02:06.762
bytes, but with conveniences.

42
00:02:06.762 --> 00:02:10.842
So that you can actually refer to
different chunks of this big set of ones

43
00:02:10.842 --> 00:02:14.718
and zeros by name, rather than having
to do all this arithmetic like

44
00:02:14.718 --> 00:02:18.745
we've been doing to get the offset
right and then cast to this or that.

45
00:02:18.745 --> 00:02:21.996
So it's essentially a convenience for
what we're doing.

46
00:02:21.996 --> 00:02:25.027
Now we're gonna call this
C function in a second,

47
00:02:25.027 --> 00:02:27.852
that's going to give us
back a stat instance.

48
00:02:27.852 --> 00:02:30.670
So it's basically gonna give
us one of these values.

49
00:02:30.670 --> 00:02:36.354
And then what we're gonna do is we're
gonna get the thing that we care about,

50
00:02:36.354 --> 00:02:41.614
which is this, st_size, which is
the total size in bytes of the file.

51
00:02:41.614 --> 00:02:46.335
Now you might notice the entire struct
stat is way more information than just

52
00:02:46.335 --> 00:02:47.890
the total size in bytes.

53
00:02:47.890 --> 00:02:51.748
This is 144 bytes worth of data, and
it's got all sorts of stuff like the inode

54
00:02:51.748 --> 00:02:55.149
number, in case you hear that,
the user ID of the owner, the group ID,

55
00:02:55.149 --> 00:02:58.866
the device ID, last access time,
last modification time, all this stuff.

56
00:02:58.866 --> 00:03:01.442
There's all this information
about the metadata of the file.

57
00:03:01.442 --> 00:03:06.684
And when we do this one function call,
it just gives us back that one thing,

58
00:03:06.684 --> 00:03:11.613
this whole struct even though all we
care about is just this one thing.

59
00:03:11.613 --> 00:03:13.843
So here's how we're gonna do that.

60
00:03:13.843 --> 00:03:16.126
We're gonna say struct stat metadata.

61
00:03:16.126 --> 00:03:21.116
The struct keyword is essentially kind
of int or char or something like that,

62
00:03:21.116 --> 00:03:25.339
except that it's saying this
isn't one of the built-in types,

63
00:03:25.339 --> 00:03:28.440
this is actually
a user-defined struct type.

64
00:03:28.440 --> 00:03:30.423
And then the next thing you
say is the name of the struct.

65
00:03:30.423 --> 00:03:32.103
So struct followed by stat.

66
00:03:32.103 --> 00:03:35.215
So stat is the name of the struct
that this is gonna be.

67
00:03:35.215 --> 00:03:39.474
And we say metadata, once again, we
are actually not initializing this memory.

68
00:03:39.474 --> 00:03:40.840
So we're not doing an equals.

69
00:03:40.840 --> 00:03:45.565
You remember previously, we said,
I wanna make this buffer, and I said,

70
00:03:45.565 --> 00:03:51.115
(100); which basically means I want you
to reserve, this is gonna be an address,

71
00:03:51.115 --> 00:03:55.324
and I want you to reserve that many bytes,
100 bytes of memory.

72
00:03:55.324 --> 00:03:58.058
Don't put other stuff in there,
because I'm gonna write into this.

73
00:03:58.058 --> 00:04:02.510
This is exactly the same thing, except
instead of 100 bytes its the 144 bytes

74
00:04:02.510 --> 00:04:04.747
that this thing takes up automatically.

75
00:04:04.747 --> 00:04:06.475
So the compiler is gonna
take care of that for you.

76
00:04:06.475 --> 00:04:09.842
But basically, when you get to this
program, if you were to look at

77
00:04:09.842 --> 00:04:14.296
the assembly language, basically what it's
gonna be doing is saying, essentially,

78
00:04:14.296 --> 00:04:18.206
reserve 144 bytes worth of stuff, and
then just give me back the address to

79
00:04:18.206 --> 00:04:21.064
the beginning of that, and
I'm gonna write into that.

80
00:04:21.064 --> 00:04:25.206
And just like with read, essentially
you call this function called fstat,

81
00:04:25.206 --> 00:04:29.347
which basically is fd, I'll talk about
the ampersand in a second here, and

82
00:04:29.347 --> 00:04:30.268
then metadata.

83
00:04:30.268 --> 00:04:34.307
And it's basically gonna be, okay cool,
give me the file descriptor, give me

84
00:04:34.307 --> 00:04:38.530
the address to write into, and it's just
gonna go ahead and write 144 bytes into

85
00:04:38.530 --> 00:04:42.422
that memory that contains all of this
metadata information about the file.

86
00:04:42.422 --> 00:04:46.121
So after we have run this,
now I can go look at my metadata thing and

87
00:04:46.121 --> 00:04:48.968
say, .this.that, get the values off of it.

88
00:04:48.968 --> 00:04:53.293
But until I've actually called that fstat,
I have not populated this metadata thing,

89
00:04:53.293 --> 00:04:54.935
and this is just memory garbage.

90
00:04:54.935 --> 00:04:58.973
Again, I could say metadata.,
whatever, st_rdev, whatever, and

91
00:04:58.973 --> 00:05:02.748
that's just gonna give me back
a couple of bytes of memory garbage,

92
00:05:02.748 --> 00:05:06.814
whatever happens to be a memory until
I've actually called fstat on it.

93
00:05:06.814 --> 00:05:11.918
Once again, it returns -1 if it fails.

94
00:05:11.918 --> 00:05:14.585
So once again,
this is where we do the error handling.

95
00:05:14.585 --> 00:05:17.154
This time I did a little,
because we're actually not

96
00:05:17.154 --> 00:05:20.291
using the output of fstat at all,
the return value is only used for

97
00:05:20.291 --> 00:05:23.046
error handling,
which is also a common thing we see in C.

98
00:05:23.046 --> 00:05:25.991
It's really common in that case
just to do if, call the thing,

99
00:05:25.991 --> 00:05:29.004
double equals -1 and
then just handle the errors right there.

100
00:05:29.004 --> 00:05:31.864
And if there is no error,
then we'll just pass through this if and

101
00:05:31.864 --> 00:05:32.963
not do any of that stuff.

102
00:05:32.963 --> 00:05:36.501
So what the ampersand does
is it basically says, okay,

103
00:05:36.501 --> 00:05:40.285
give me the address of the first
byte of those 144 bytes.

104
00:05:40.285 --> 00:05:45.515
So unlike arrays, unlike strings, when you
have a struct like this, what this is,

105
00:05:45.515 --> 00:05:50.229
by default, it's more similar to
an individual int or an individual char,

106
00:05:50.229 --> 00:05:55.777
where basically if we have an int, that's
like a 32-bit integer, which is 4 bytes.

107
00:05:55.777 --> 00:05:58.565
Those 4 bytes, if I pass this fd around,

108
00:05:58.565 --> 00:06:02.641
that 4 bytes are gonna get
copied around every single time.

109
00:06:02.641 --> 00:06:05.055
So whenever you pass this to a function,

110
00:06:05.055 --> 00:06:09.812
what the CPU is doing is saying,
that's a 4-byte integer, copy all 4 of

111
00:06:09.812 --> 00:06:14.218
those bytes into whatever global thing
is gonna be used by that function.

112
00:06:14.218 --> 00:06:18.051
With structs, you maybe don't want
that because this is 144 bytes.

113
00:06:18.051 --> 00:06:24.080
So the default behavior of passing around
144 bytes every single time, well, that

114
00:06:24.080 --> 00:06:29.661
would mean that something like fstat for
example, actually fstat is a bad example.

115
00:06:29.661 --> 00:06:33.585
But if I wanted to pass this around from
function to function, that would be a lot

116
00:06:33.585 --> 00:06:37.120
of bytes to be copying around just to
get the data from point A to point B.

117
00:06:37.120 --> 00:06:41.485
So in those scenarios, basically,
C gives you a way to say, okay,

118
00:06:41.485 --> 00:06:44.637
I don't want all 144
bytes to be copied here.

119
00:06:44.637 --> 00:06:46.190
I just want you to go give me the address,

120
00:06:46.190 --> 00:06:48.078
which is gonna be a much
more compact 8-bytes.

121
00:06:48.078 --> 00:06:51.819
And the ampersand is basically,
take whatever thing I've got here and

122
00:06:51.819 --> 00:06:53.577
give me the memory address of it.

123
00:06:53.577 --> 00:06:56.895
And so this not only does it work with
structs, but it also works with anything.

124
00:06:56.895 --> 00:06:59.730
So for example, if I said ampersand fd,
that would say, okay,

125
00:06:59.730 --> 00:07:02.250
I don't want the actual integer
of the file descriptor,

126
00:07:02.250 --> 00:07:04.207
I want the address of
that file descriptor.

127
00:07:04.207 --> 00:07:06.624
In other words, I wanna know
where in memory that thing is.

128
00:07:06.624 --> 00:07:08.012
So you can do this on absolutely anything.

129
00:07:08.012 --> 00:07:10.487
Anywhere in C,
if you're I have a thing, and

130
00:07:10.487 --> 00:07:14.265
I got the value at runtime that's
actually useful, I wanna see where

131
00:07:14.265 --> 00:07:18.848
that thing is stored in memory, stick
an ampersand on there, and it'll tell you.

132
00:07:18.848 --> 00:07:22.304
It'll just turn it right into
that memory address right there.

133
00:07:22.304 --> 00:07:27.039
So this is a way to get a struct
in this sort of a more array-like,

134
00:07:27.039 --> 00:07:31.449
more string-like fashion,
which is what fstat expects.

135
00:07:31.449 --> 00:07:34.470
Okay, so we ran fstat.

136
00:07:34.470 --> 00:07:35.509
We already handled the error case.

137
00:07:35.509 --> 00:07:36.890
We assume there's no error at this point.

138
00:07:36.890 --> 00:07:41.031
Now metadata,
that struct has 144 bytes populated.

139
00:07:41.031 --> 00:07:44.251
And now we can finally
print out metadata.st_size.

140
00:07:44.251 --> 00:07:49.808
St_size has a, ld is the [LAUGH]
escape code there for some reason.

141
00:07:49.808 --> 00:07:52.371
Like I said, they just have all
these different escape codes.

142
00:07:52.371 --> 00:07:55.258
I don't know where they come up with
the naming conventions for these, but for

143
00:07:55.258 --> 00:07:58.338
this particular size, that's the one that
you need to use in order to print it out.

144
00:07:58.338 --> 00:07:59.614
And it will sure enough print it out.

145
00:07:59.614 --> 00:08:02.578
And so
now we actually know how big our file is.

146
00:08:02.578 --> 00:08:06.377
We know how much memory to reserve, so
that when we do our read, we're actually

147
00:08:06.377 --> 00:08:10.592
reading the appropriate amount of bytes,
rather than that hard-coded 100 bytes.

148
00:08:10.592 --> 00:08:13.925
Now, you might have thought this is
gonna be really simple, straightforward,

149
00:08:13.925 --> 00:08:16.533
and just be, just file.,
how big are you, [LAUGH] right?

150
00:08:16.533 --> 00:08:18.034
Not quite.
[LAUGH] It's a little bit of

151
00:08:18.034 --> 00:08:20.863
an extra dance, a little bit of
a stomping over memory with other memory,

152
00:08:20.863 --> 00:08:22.613
uninitialized memory, that kind of stuff.

153
00:08:22.613 --> 00:08:26.203
But the reason we're going through this
process is just to give you a sense of

154
00:08:26.203 --> 00:08:27.731
this is how things are done in C.

155
00:08:27.731 --> 00:08:30.675
And also worth noting,
this is also quite efficient,

156
00:08:30.675 --> 00:08:34.771
and when we get to the section on heat
memory, we can see how the thing that's

157
00:08:34.771 --> 00:08:38.550
more convenient is in many ways less
efficient than doing it this way.

