WEBVTT

1
00:00:00.000 --> 00:00:04.913
All right, let's get to our final
exercise, which is for part six.

2
00:00:04.913 --> 00:00:10.230
So now you can see we not only
have this whole big long list of,

3
00:00:10.230 --> 00:00:16.920
includes up top but we also have ifdef
Linux here for our sys slash send file.

4
00:00:16.920 --> 00:00:20.450
We're gonna build this thing,
that was 5 again, and

5
00:00:20.450 --> 00:00:24.299
I'm still listening on port 8080,
so let's do that.

6
00:00:24.299 --> 00:00:27.754
Great listening on port 8080, so
now you can see if I refresh and

7
00:00:27.754 --> 00:00:32.193
try to load the front end masters page it
doesn't work at all, that's okay, though.

8
00:00:32.193 --> 00:00:34.106
That's because we haven't
completed the exercise yet.

9
00:00:34.106 --> 00:00:37.642
So right now we're seeing a blank page,
but when we're done with the exercise,

10
00:00:37.642 --> 00:00:40.294
we will actually see something
much nicer than a blank page,

11
00:00:40.294 --> 00:00:42.385
which is a working front
end masters homepage.

12
00:00:42.385 --> 00:00:44.857
Okay, so this one, unlike the others,

13
00:00:44.857 --> 00:00:48.732
does not have a bunch of different
things to jump around and do.

14
00:00:48.732 --> 00:00:49.682
If you want to,

15
00:00:49.682 --> 00:00:53.934
you can spend some time looking
through some of the source code here.

16
00:00:53.934 --> 00:00:56.654
I did decide to use the pound define
style here instead of constant,

17
00:00:56.654 --> 00:00:59.914
just in case you are running one of those
Linux distros that doesn't support it.

18
00:00:59.914 --> 00:01:04.264
But if you're on macOS,
you could just do constant here.

19
00:01:04.264 --> 00:01:10.608
We're doing the, jpeg,
css png, jpej, JS, etc.

20
00:01:10.608 --> 00:01:13.343
We're doing the fancy
switch thing right here.

21
00:01:13.343 --> 00:01:15.294
All the stuff that we talked about, and

22
00:01:15.294 --> 00:01:18.741
now we are using that to actually
send back this content type header.

23
00:01:18.741 --> 00:01:21.452
So you may recall this was the last
missing piece we had at the end of

24
00:01:21.452 --> 00:01:24.413
the previous section where it wasn't
recognizing like any of the CSS or

25
00:01:24.413 --> 00:01:25.323
anything like that.

26
00:01:25.323 --> 00:01:29.356
The reason that nothing is loading is that
the one thing that we are missing here is

27
00:01:29.356 --> 00:01:32.342
that I have not actually
implemented the call to send file.

28
00:01:32.342 --> 00:01:36.371
So this is the only section of the thing
that requires any modification.

29
00:01:36.371 --> 00:01:40.915
So the entire exercise is basically
just go check out the docs for

30
00:01:40.915 --> 00:01:45.474
these and try to implement the two
different calls to send file.

31
00:01:45.474 --> 00:01:50.104
Worth noting that something we are doing
here is we are actually making

32
00:01:50.104 --> 00:01:53.723
these variables of byte sent and
send failed locally.

33
00:01:53.723 --> 00:01:56.587
Now you got to remember here that these
are not actually different scopes.

34
00:01:56.587 --> 00:02:00.295
This is not like there's no
curly braces around this.

35
00:02:00.295 --> 00:02:03.510
These are basically out dented and
only one of the other is going to get

36
00:02:03.510 --> 00:02:07.244
actually included in here, which is
relevant because we end up using it later.

37
00:02:07.244 --> 00:02:09.885
But they are indented because
they're inside the ifdef.

38
00:02:09.885 --> 00:02:13.287
So that's what's going on there is like
we're defining one or the other here.

39
00:02:13.287 --> 00:02:16.127
They do actually have different types,
which is kind of funny.

40
00:02:16.127 --> 00:02:20.395
But nevertheless, we can still like do
subtraction on them because C is loosey

41
00:02:20.395 --> 00:02:24.807
goosey with its integer conversions,
fortunately for our sake, in this case.

42
00:02:24.807 --> 00:02:29.383
So basically, just need to go look
at the docs for these two things.

43
00:02:29.383 --> 00:02:34.726
And I will warn you this, well especially
the MacOS 1 is a little bit funky,

44
00:02:34.726 --> 00:02:39.917
but just take a few minutes and go through
and see if you can get it working.

45
00:02:46.208 --> 00:02:47.617
&gt;&gt; Richard Feldman: So for
this one, unlike the others,

46
00:02:47.617 --> 00:02:50.622
I'm actually just gonna just walk you
through the solution rather than typing

47
00:02:50.622 --> 00:02:51.139
out by hand.

48
00:02:51.139 --> 00:02:54.512
Mostly because all the typing out by
hand accomplishes is essentially,

49
00:02:54.512 --> 00:02:57.179
I go look at the docs, and
then look at what we're doing.

50
00:02:57.179 --> 00:03:00.747
So essentially, I want to just mainly talk
through the differences between these two.

51
00:03:00.747 --> 00:03:05.477
So the Linux version, as you see from
the docs, if you went and looked those up,

52
00:03:05.477 --> 00:03:07.892
we send the two file descriptors first.

53
00:03:07.892 --> 00:03:09.692
Now, if you look at the MacOS docs,

54
00:03:09.692 --> 00:03:12.995
one of the things that's most
striking about the difference here

55
00:03:12.995 --> 00:03:16.736
is that the Linux one just returns how
many bytes were successfully sent.

56
00:03:16.736 --> 00:03:20.047
So this is very similar to what we saw
with like read will return how many bytes

57
00:03:20.047 --> 00:03:21.306
B Bytes were actually read.

58
00:03:21.306 --> 00:03:25.227
Also, if you like try to write,
potentially it might not write all

59
00:03:25.227 --> 00:03:29.937
the bytes if the thing that it's trying
to write to had some sort of limit setup.

60
00:03:29.937 --> 00:03:32.603
Same kind of deal here,
where basically it's saying, hey,

61
00:03:32.603 --> 00:03:35.114
here is you told me that you
wanted to send this many bytes,

62
00:03:35.114 --> 00:03:37.446
but it's possible that I
sent fewer bytes than that.

63
00:03:37.446 --> 00:03:39.246
Now this is very important to know,

64
00:03:39.246 --> 00:03:42.435
because we actually do want to
potentially put these in a loop.

65
00:03:42.435 --> 00:03:44.678
So this is actually how we're
doing the chunking here.

66
00:03:44.678 --> 00:03:46.072
We're basically saying Ok,

67
00:03:46.072 --> 00:03:49.424
if you didn't send all the bytes that
I told you to send, that's fine.

68
00:03:49.424 --> 00:03:52.773
I'm just going to decrement,
how many bytes we have remaining to send.

69
00:03:52.773 --> 00:03:56.720
Go back to the top of the loop and
just keep doing it again over and

70
00:03:56.720 --> 00:04:00.684
over again until all the bytes
finally get successfully sent.

71
00:04:00.684 --> 00:04:03.737
Now how do we get this
actual byte sent value?

72
00:04:03.737 --> 00:04:07.928
This is one of the ways where Linux and
macros APIs differ.

73
00:04:07.928 --> 00:04:10.102
So in the Linux one,
send file just returns it.

74
00:04:10.102 --> 00:04:14.731
And then our job to detect whether or
not sending failed is the usual check for

75
00:04:14.731 --> 00:04:16.407
the return value was -1.

76
00:04:16.407 --> 00:04:20.089
If it was sent failed,
then Ok, fine, we break.

77
00:04:20.089 --> 00:04:22.860
This is a pretty
unfortunate scenario where,

78
00:04:22.860 --> 00:04:27.486
if this were a production HTTP server,
as opposed to just a little local one.

79
00:04:27.486 --> 00:04:29.375
We might wanna try to do some extra work,

80
00:04:29.375 --> 00:04:31.610
to try to more gracefully
handle these errors.

81
00:04:31.610 --> 00:04:36.147
But basically, in this case,
because we're doing the send,

82
00:04:36.147 --> 00:04:41.299
what's happening here is that if we
already sent some number of bytes.

83
00:04:41.299 --> 00:04:44.882
Well, the first bytes that we sent at the
very beginning of the of the thing that

84
00:04:44.882 --> 00:04:47.181
we're sending over
the network are 200 okay?

85
00:04:47.181 --> 00:04:50.069
Because as far as we know,
by the time we got here, we're all set.

86
00:04:50.069 --> 00:04:52.326
We're good, we're ready to rock.

87
00:04:52.326 --> 00:04:56.028
Unfortunately, it turns out that things
stopped being okay partway through,

88
00:04:56.028 --> 00:04:57.970
because sending actually itself fails.

89
00:04:57.970 --> 00:04:59.682
It's too late, we already sent the 200.

90
00:04:59.682 --> 00:05:02.731
So the browser's, great,
everything was fine,

91
00:05:02.731 --> 00:05:05.594
and then it just doesn't
get the rest of the file.

92
00:05:05.594 --> 00:05:09.111
We can try to gracefully handle this
by basically doing something along

93
00:05:09.111 --> 00:05:12.696
the lines of Ok, well, we remember
that we already do the partial send.

94
00:05:12.696 --> 00:05:14.824
So let's actually go and retry it and

95
00:05:14.824 --> 00:05:17.509
try to send the rest of
the bytes as best we can.

96
00:05:17.509 --> 00:05:22.712
Or maybe we try to do something like send
some sort of extra content that comes

97
00:05:22.712 --> 00:05:28.019
back and just displays a big, no,
it was truncated message on the screen.

98
00:05:28.019 --> 00:05:30.639
And then maybe we also detect,
well if we didn't send anything yet,

99
00:05:30.639 --> 00:05:32.415
if we were in the first
iteration of this loop.

100
00:05:32.415 --> 00:05:34.392
Now we can just go ahead and
send a 500, so

101
00:05:34.392 --> 00:05:37.607
lots of potential ways we could try
to make this error handling better.

102
00:05:37.607 --> 00:05:39.095
This is not really specific to send file.

103
00:05:39.095 --> 00:05:40.473
This is just in general.

104
00:05:40.473 --> 00:05:44.337
If we're writing to the socket,
and whether it's via send file or

105
00:05:44.337 --> 00:05:49.098
via right and that operation fails after
we've already sent some amount of data,

106
00:05:49.098 --> 00:05:51.929
we're going to potentially
have this problem.

107
00:05:51.929 --> 00:05:56.544
But yeah, so we need to know whether
sending fail and we also need to know how

108
00:05:56.544 --> 00:06:00.522
many bytes were sent and the MacOS API for
this or the the BSC one.

109
00:06:00.522 --> 00:06:03.422
Very different, so
here we're actually doing

110
00:06:03.422 --> 00:06:08.134
basically the number of bytes that were
sent is actually equal to stats.st,

111
00:06:08.134 --> 00:06:11.986
size, or at least we're assuming
that as the starting point.

112
00:06:11.986 --> 00:06:14.798
And then we send the address of that, and

113
00:06:14.798 --> 00:06:19.535
basically it will use that both for
getting what is the actual size?

114
00:06:19.535 --> 00:06:23.249
What is the actual number of
bytes that you want to send.

115
00:06:23.249 --> 00:06:27.289
And then also, when we call send file, it
will, after reading that to see how many

116
00:06:27.289 --> 00:06:31.237
bytes we want to send, it will override
it with how many bytes it actually sent.

117
00:06:31.237 --> 00:06:33.224
Again, funky C APIs.

118
00:06:33.224 --> 00:06:36.614
[LAUGH] I look at this and I say, I think
the Linux one makes more sense to me.

119
00:06:36.614 --> 00:06:41.094
This seems nicer to use, but the BSD
authors decided to do it this way, and so

120
00:06:41.094 --> 00:06:44.388
if you want to do it on MacOS,
this is what you got to use.

121
00:06:44.388 --> 00:06:48.822
The other notable difference here is that
there's a couple of extra flags here.

122
00:06:48.822 --> 00:06:52.585
So this version of sendfile is more
configurable than this version.

123
00:06:52.585 --> 00:06:56.233
Now, this is an example of sometimes
operating systems will add new

124
00:06:56.233 --> 00:06:59.883
functionality that's not available
in other operating systems.

125
00:06:59.883 --> 00:07:02.597
A classic example of this that
happens today is IOU ring.

126
00:07:02.597 --> 00:07:03.836
You may have heard of this.

127
00:07:03.836 --> 00:07:05.338
This is something that's
available in Linux.

128
00:07:05.338 --> 00:07:08.826
It's very nice for certain types
of high performance IO operations,

129
00:07:08.826 --> 00:07:10.372
especially over the network.

130
00:07:10.372 --> 00:07:12.083
It's just not available in Mac OS,

131
00:07:12.083 --> 00:07:14.488
they don't have a direct
equivalent of IOU ring.

132
00:07:14.488 --> 00:07:18.983
And so if you're trying to write a cross
platform like networking library,

133
00:07:18.983 --> 00:07:21.595
that uses IOU ring,
what you end up with is.

134
00:07:21.595 --> 00:07:26.442
If dev on Linux is huge because IOU ring
is very different in terms of how it sets

135
00:07:26.442 --> 00:07:30.097
up its abstractions for
doing this type of network stuff,

136
00:07:30.097 --> 00:07:33.398
then the other ways that
other alternatives use it.

137
00:07:33.398 --> 00:07:37.601
And so there it's not just two lines
of code, it's a very big difference.

138
00:07:37.601 --> 00:07:41.313
And these little differences in arguments
that we see here are a much smaller

139
00:07:41.313 --> 00:07:42.189
example of that.

140
00:07:42.189 --> 00:07:46.668
Where it's I don't really know what
these options do, but clearly Mac OS

141
00:07:46.668 --> 00:07:51.293
supports some degree of additional
configuration that the Linux one does,

142
00:07:51.293 --> 00:07:54.631
because it's strictly
sending more arguments over.

143
00:07:54.631 --> 00:07:58.170
Okay, so at the end of this,
we do that and then we've actually set,

144
00:07:58.170 --> 00:08:00.744
I've sent all the stuff that we want,
very cool.

145
00:08:00.744 --> 00:08:03.294
I'm just gonna copy this over
here from the solutions.

146
00:08:03.294 --> 00:08:07.908
And now, finally,
we have our index, the root page.

147
00:08:07.908 --> 00:08:08.601
This still works.

148
00:08:08.601 --> 00:08:10.722
If I click on the blog link,
this still works.

149
00:08:10.722 --> 00:08:14.864
And the cool part is, I've downloaded
this locally, this is basically a copy

150
00:08:14.864 --> 00:08:18.568
of the Frontend Masters website that
I just downloaded all the HTML and

151
00:08:18.568 --> 00:08:21.992
CSS and all the fonts and
everything into my local directories.

152
00:08:21.992 --> 00:08:23.753
And there it is, beautiful.

153
00:08:23.753 --> 00:08:28.776
The entire frontendmasters.com
website served locally, blazing fast.

154
00:08:28.776 --> 00:08:32.342
[LAUGH] See about 300 lines of
code that we built from scratch

155
00:08:32.342 --> 00:08:36.801
in the course of this workshop using
no third party dependencies, just raw,

156
00:08:36.801 --> 00:08:39.357
close to the metal operating system stuff.

157
00:08:39.357 --> 00:08:40.819
And it all works, look at that.

