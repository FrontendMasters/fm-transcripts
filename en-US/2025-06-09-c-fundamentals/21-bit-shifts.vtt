WEBVTT

1
00:00:00.000 --> 00:00:04.250
So we've handled this case where we GET
/blog or /blog/ with a slash after it.

2
00:00:04.250 --> 00:00:08.750
And now we're gonna need to do a little
bit more work to start handling automatic

3
00:00:08.750 --> 00:00:09.834
file extensions.

4
00:00:09.834 --> 00:00:11.882
So this being a static http server,

5
00:00:11.882 --> 00:00:16.391
we need to actually figure out based on
the incoming requests file extension,

6
00:00:16.391 --> 00:00:20.306
whether or not we should send
a particular content type or another.

7
00:00:20.306 --> 00:00:24.457
So for example, for a PNG,
if we're getting a GET of a /blog.png,

8
00:00:24.457 --> 00:00:27.820
we want to make sure that not
only do we open blog.png and

9
00:00:27.820 --> 00:00:32.042
send those bytes from the file system
over, but we also wanna make sure

10
00:00:32.042 --> 00:00:36.584
that we're sending back a content type
header that reflects this is a PNG.

11
00:00:36.584 --> 00:00:39.296
Same thing with CSS and JS and all that.

12
00:00:39.296 --> 00:00:41.537
So for example, we might wanna say, look,

13
00:00:41.537 --> 00:00:45.061
let's see if the file extension
we're gonna kind of hand wave away.

14
00:00:45.061 --> 00:00:48.288
Let's assume that we've gotten the file
extension cuz it's basically the same

15
00:00:48.288 --> 00:00:51.562
exact parsing stuff that we did back in
part three, except that instead of looking

16
00:00:51.562 --> 00:00:53.900
for spaces, we're looking for
dots and stuff like that.

17
00:00:53.900 --> 00:00:57.347
So we're gonna kind of hand wave that away
cuz it's stuff we've already learned.

18
00:00:57.347 --> 00:01:01.798
But we are gonna talk about some sort of
C-specific quirks that result once we've

19
00:01:01.798 --> 00:01:03.552
already gotten the extension.

20
00:01:03.552 --> 00:01:05.583
So let's say I wrote this code.

21
00:01:05.583 --> 00:01:07.795
And I'm like, great,
I've got my extension, it's a string and

22
00:01:07.795 --> 00:01:09.112
this is the memory address of a string.

23
00:01:09.112 --> 00:01:12.256
I wanna say,
if extension double equals PNG,

24
00:01:12.256 --> 00:01:16.623
the question is, under what
circumstances does this code run?

25
00:01:16.623 --> 00:01:18.687
What do you think?

26
00:01:18.687 --> 00:01:23.399
What has to be true about the program for
this to run?

27
00:01:23.399 --> 00:01:29.000
Well, we might like it to be true
that if extension is the string png,

28
00:01:29.000 --> 00:01:31.036
that's when this runs.

29
00:01:31.036 --> 00:01:32.700
Unfortunately, that is not the answer.

30
00:01:32.700 --> 00:01:35.290
That's the answer we hope we would get,
but it's not the answer we get.

31
00:01:35.290 --> 00:01:38.536
The problem is, this is a number and
this is a number, so

32
00:01:38.536 --> 00:01:42.070
this is gonna run when those two
numbers are the same number.

33
00:01:42.070 --> 00:01:43.471
[LAUGH] In other words,

34
00:01:43.471 --> 00:01:47.982
this is gonna run only if their memory
addresses are exactly identical.

35
00:01:47.982 --> 00:01:49.871
It doesn't care about the contents
of the string at all.

36
00:01:49.871 --> 00:01:51.137
It's not looking at
the contents of the string.

37
00:01:51.137 --> 00:01:52.565
This is just doing two numbers and

38
00:01:52.565 --> 00:01:55.279
comparing them to see if those
two numbers are the same number.

39
00:01:55.279 --> 00:01:57.638
That is a problem,
because that is not what we want at all.

40
00:01:57.638 --> 00:02:01.042
Now you would also hope that
taking this a step further, that

41
00:02:01.042 --> 00:02:05.875
we could do a nice switch on this and say,
I would like to switch on the extension.

42
00:02:05.875 --> 00:02:09.609
So this is a switch statement like you
find in many languages, case png colon,

43
00:02:09.609 --> 00:02:13.115
then we would say, content type is
image/png, and then do a break,

44
00:02:13.115 --> 00:02:15.567
just like we would in,
for example, JavaScript.

45
00:02:15.567 --> 00:02:19.757
But once again, nope, these are two
numbers, [LAUGH] number, number.

46
00:02:19.757 --> 00:02:22.731
And this is not gonna work unless we
happen to have exactly the same memory

47
00:02:22.731 --> 00:02:23.574
address for those.

48
00:02:23.574 --> 00:02:27.453
If you've ever heard of the concept of
reference equality versus value semantics,

49
00:02:27.453 --> 00:02:29.320
this is exactly what's going on there.

50
00:02:29.320 --> 00:02:32.730
Reference equality, basically,
is a fancy name for

51
00:02:32.730 --> 00:02:36.609
the two memory addresses that
we're getting in identical.

52
00:02:36.609 --> 00:02:39.889
Now, there is a way that we can do
this using a built in C function which

53
00:02:39.889 --> 00:02:42.503
is called strcmp,
which is short for string compare.

54
00:02:42.503 --> 00:02:46.539
And string compare will take the memory
address of two different null terminated

55
00:02:46.539 --> 00:02:49.918
strings, and it will go one byte at
a time and keep going until either

56
00:02:49.918 --> 00:02:54.158
the bytes are different or it reaches the
end of both strings, the null terminator.

57
00:02:54.158 --> 00:02:58.246
And all of the bytes in between and
the two null terminators were identical.

58
00:02:58.246 --> 00:03:02.045
And we're like, great, these two strings
are equal, and strcmp will return zero.

59
00:03:02.045 --> 00:03:05.672
Otherwise it returns something non-zero
that tells you about which one's longer,

60
00:03:05.672 --> 00:03:07.393
or different, or something like that.

61
00:03:07.393 --> 00:03:11.721
But for our purposes, if we wanted
to do that, we would say, great,

62
00:03:11.721 --> 00:03:14.420
if (!strcpm(extension "png")).

63
00:03:14.420 --> 00:03:16.833
Now, this will actually
run when we hope it would.

64
00:03:16.833 --> 00:03:20.621
We'll also say, great,
this is gonna run if whatever extension,

65
00:03:20.621 --> 00:03:23.612
again, assuming that we've
already parsed it out,

66
00:03:23.612 --> 00:03:26.943
is actually the bytes of that string or
[LAUGH] the bytes PNG.

67
00:03:26.943 --> 00:03:30.571
Then we run this and set our content
type to image/png and all is good.

68
00:03:30.571 --> 00:03:35.083
And then of course we wanna do the same
thing for the CSS and text/css.

69
00:03:35.083 --> 00:03:39.333
We do that, and then JS, application
Javascript and HTML and text statement.

70
00:03:39.333 --> 00:03:42.775
We're gonna do a lot of strcmp calls here,
which is a little bit unfortunate,

71
00:03:42.775 --> 00:03:46.373
because strcmp is running through every
single byte in every single one of these,

72
00:03:46.373 --> 00:03:48.982
which means that the more file
extensions that we support,

73
00:03:48.982 --> 00:03:51.565
the more we are walking through
every single one of these.

74
00:03:51.565 --> 00:03:55.447
So in order to detect if this was HTML,
we first had to go compare it to PNG and

75
00:03:55.447 --> 00:03:58.485
let that fail, and
then compare it to CSS, let that fail.

76
00:03:58.485 --> 00:04:01.828
Each time we're marching through
as much of this as we need to

77
00:04:01.828 --> 00:04:03.410
until they're different.

78
00:04:03.410 --> 00:04:04.965
It's kind of rough.

79
00:04:04.965 --> 00:04:06.978
It's kind of a lot of comparisons there.

80
00:04:06.978 --> 00:04:08.965
[COUGH] Now, what we're about to do,

81
00:04:08.965 --> 00:04:11.409
I wanna give you a little
bit of a disclaimer.

82
00:04:11.409 --> 00:04:14.396
I would not claim that
this is idiomatic C code.

83
00:04:14.396 --> 00:04:18.308
I would say it is defensible C code.

84
00:04:18.308 --> 00:04:22.018
If you're reading something like Postgres,
I bet you can find tricks like this in

85
00:04:22.018 --> 00:04:24.353
Postgres, like the trick
that we're about to do.

86
00:04:24.353 --> 00:04:27.025
But this is not something I would
normally expect for a static web server.

87
00:04:27.025 --> 00:04:30.373
I'm doing it for a couple of different
reasons, but two reasons more than any.

88
00:04:30.373 --> 00:04:33.938
One, it's faster, and
two, it's more ergonomic.

89
00:04:33.938 --> 00:04:38.157
Also, I guess it's a way to give you
an example since this is a workshop of

90
00:04:38.157 --> 00:04:42.515
demonstrating an interesting trick that
you can do in C that is a really good

91
00:04:42.515 --> 00:04:46.873
example of how you can make C programs
go faster by doing some pretty heinous

92
00:04:46.873 --> 00:04:50.917
C specific tricks that you would
just not find in any other language.

93
00:04:50.917 --> 00:04:54.007
But it is gonna be a lot faster, and the
ergonomics are actually gonna be a little

94
00:04:54.007 --> 00:04:56.838
bit better in terms of the getting to
actually use the switch statement.

95
00:04:56.838 --> 00:04:57.802
So here we go.

96
00:04:57.802 --> 00:04:59.075
We're gonna do a fancy trick now.

97
00:04:59.075 --> 00:05:03.899
[COUGH] Here are some of these
file extensions we wanna support,

98
00:05:03.899 --> 00:05:06.001
PNG, CSS, JS, and HTML.

99
00:05:06.001 --> 00:05:08.941
So here are the bites
that correspond to HTML.

100
00:05:08.941 --> 00:05:12.640
So H is 104, T is 116, M is 109, L is 108.

101
00:05:12.640 --> 00:05:15.727
And here are the bits that go into HTML.

102
00:05:15.727 --> 00:05:18.282
So if we have an array
of these four bytes,

103
00:05:18.282 --> 00:05:21.502
this is what the bit pattern
looks like side by side.

104
00:05:21.502 --> 00:05:24.061
You may recall all
the way back in part two,

105
00:05:24.061 --> 00:05:27.702
we talked about how we get to
decide how we interpret memory.

106
00:05:27.702 --> 00:05:29.693
These ones and zeros,
they are our ones and zeros.

107
00:05:29.693 --> 00:05:31.045
We can look at them however we want.

108
00:05:31.045 --> 00:05:36.236
In fact, if we want to, we can look
at these four bytes as one gigantic,

109
00:05:36.236 --> 00:05:38.497
32 bit integer, if we want.

110
00:05:38.497 --> 00:05:41.657
Same ones and zeros, we're choosing
to interpret that as an integer.

111
00:05:41.657 --> 00:05:42.588
We can do that.

112
00:05:42.588 --> 00:05:43.684
We're allowed to do that.

113
00:05:43.684 --> 00:05:45.625
This is the particular
integer we have there.

114
00:05:45.625 --> 00:05:52.127
It's 1,752,460,652,
which as everyone knows means HTML.

115
00:05:52.127 --> 00:05:54.337
But I mean, really, it does, right?

116
00:05:54.337 --> 00:05:57.296
If you think about it,
these are the ones and zeros.

117
00:05:57.296 --> 00:06:00.190
We can interpret the ones and
zeros as either UTF-8 bytes, or

118
00:06:00.190 --> 00:06:02.107
we can interpret them as this one number.

119
00:06:02.107 --> 00:06:03.465
We're allowed to do either of those.

120
00:06:03.465 --> 00:06:07.268
PNG, here are the ones and zeros for that.

121
00:06:07.268 --> 00:06:10.279
We can almost interpret
this as a 32 bit integer,

122
00:06:10.279 --> 00:06:12.947
except for the fact that it's not 32 bits.

123
00:06:12.947 --> 00:06:14.546
We're actually eight bits shy there,

124
00:06:14.546 --> 00:06:16.780
because png doesn't happen
to be enough bytes there.

125
00:06:16.780 --> 00:06:20.189
But if we wanted to, we could just kind of
slap an extra zero byte on the end there,

126
00:06:20.189 --> 00:06:21.957
and now we have another 32 bit integer.

127
00:06:21.957 --> 00:06:28.483
That 32 bit integer is 1,886,283,520,
which as everyone knows means PNG.

128
00:06:28.483 --> 00:06:29.790
Maybe you can kind of
see where this is going.

129
00:06:29.790 --> 00:06:34.253
As long as we only need to care
about things that are four bytes or

130
00:06:34.253 --> 00:06:37.638
fewer, we can treat these
things as integers.

131
00:06:37.638 --> 00:06:40.920
JS will get another couple
extra bytes in there.

132
00:06:40.920 --> 00:06:44.237
Now this is, again,
this is not standard operating procedure.

133
00:06:44.237 --> 00:06:45.555
This is not how you normally do things.

134
00:06:45.555 --> 00:06:47.095
This relies on a number of assumptions.

135
00:06:47.095 --> 00:06:49.983
One, that we only care about file
extensions that are four bytes or fewer.

136
00:06:49.983 --> 00:06:54.749
Two, that we're okay with all of this
padding nonsense with [LAUGH] backslash

137
00:06:54.749 --> 00:06:56.008
zeros and whatnot.

138
00:06:56.008 --> 00:07:00.128
And three, that we actually are okay with
reinterpreting these bits in memory as

139
00:07:00.128 --> 00:07:03.108
integers when clearly they
are not originally integers.

140
00:07:03.108 --> 00:07:03.984
But we can do it.

141
00:07:03.984 --> 00:07:09.151
[COUGH] So if we did that and
we actually got them as 32-bit integers.

142
00:07:09.151 --> 00:07:12.753
Hey, now the fact that switch wants to
match on two numbers is not a problem cuz

143
00:07:12.753 --> 00:07:14.374
guess what, we have two numbers.

144
00:07:14.374 --> 00:07:15.592
We got integers.

145
00:07:15.592 --> 00:07:17.560
So if we want, we could just say, hey,

146
00:07:17.560 --> 00:07:21.681
if the extension is stored as an actual
integer, and we are intentionally storing

147
00:07:21.681 --> 00:07:25.528
it as an integer rather than the address
like we normally would for a string.

148
00:07:25.528 --> 00:07:28.952
And we just said PNG is 1 billion, 800 and

149
00:07:28.952 --> 00:07:32.660
whatever [LAUGH] million,
this would just work.

150
00:07:32.660 --> 00:07:34.425
This would just straight up work.

151
00:07:34.425 --> 00:07:37.748
And basically we would need
to do this cast thing.

152
00:07:37.748 --> 00:07:42.385
So we would say, okay, this is a memory
address and basically, this part is

153
00:07:42.385 --> 00:07:46.959
saying cast it, that is like treat
the extension as if it is an int address.

154
00:07:46.959 --> 00:07:51.471
In other words, the address into
a 32 bit integer as opposed to

155
00:07:51.471 --> 00:07:56.249
the first byte at a multi-byte string,
which we've seen before.

156
00:07:56.249 --> 00:07:59.005
And then there's this extra star,
which basically means,

157
00:07:59.005 --> 00:08:01.977
now that I've said I want to
interpret this address as a different

158
00:08:01.977 --> 00:08:05.452
type of address, now just go ahead and
give me whatever's at that address.

159
00:08:05.452 --> 00:08:08.700
So this turns it from
an address into an actual int.

160
00:08:08.700 --> 00:08:12.142
So star parentheses,
whatever int star, basically means,

161
00:08:12.142 --> 00:08:16.643
step one is convert the address into the
address of something else, and then step

162
00:08:16.643 --> 00:08:21.303
two is now that I've said it's a different
type of address, go give me that thing.

163
00:08:21.303 --> 00:08:23.206
You can also do bracket zero at the end.

164
00:08:23.206 --> 00:08:28.151
We saw that technique before, that would
also work if you wanted to do the turning

165
00:08:28.151 --> 00:08:30.563
it into the underlying thing that way.

166
00:08:30.563 --> 00:08:34.659
But yeah, so now, as long as we're
okay with writing out these horrendous

167
00:08:34.659 --> 00:08:40.328
constants like HTML = 1,752,000,000,
yada, yada, yada, this actually does work.

168
00:08:40.328 --> 00:08:44.798
So, this is simultaneously a performance
improvement because now instead of having

169
00:08:44.798 --> 00:08:48.767
to go one byte at a time, we get to use
the fact that the CPU can actually work on

170
00:08:48.767 --> 00:08:51.640
entire four byte integers
in one single instruction.

171
00:08:51.640 --> 00:08:53.943
You just be like, hey, are you this
integer, are you this integer,

172
00:08:53.943 --> 00:08:54.709
are you this integer?

173
00:08:54.709 --> 00:08:56.549
Done, much, much faster.

174
00:08:56.549 --> 00:08:59.731
But also we're benefiting from
the fact that ergonomically,

175
00:08:59.731 --> 00:09:03.931
we now actually get to use switch instead
of having to do if strcmp, if then strcmp,

176
00:09:03.931 --> 00:09:07.188
blah, blah, else if then strcmp,
blah, blah, blah, blah.

177
00:09:07.188 --> 00:09:09.601
This is definitely,
I would say, easier to read.

178
00:09:09.601 --> 00:09:10.665
This part, not so much.

179
00:09:10.665 --> 00:09:12.291
[LAUGH] This is just a bunch of nonsense.

180
00:09:12.291 --> 00:09:15.394
[LAUGH] Obviously when you look
at code like this, you're like,

181
00:09:15.394 --> 00:09:19.308
someone has been doing something that
they probably should not have been doing.

182
00:09:19.308 --> 00:09:23.261
Also, by the way, in switch statements,
at the end you do have a default case,

183
00:09:23.261 --> 00:09:24.559
which is basically like,

184
00:09:24.559 --> 00:09:28.042
here's what we do as the fall through
if none of the above cases match.

185
00:09:28.042 --> 00:09:30.521
So pretend we have the PNG and
HTML and JS and CSS and

186
00:09:30.521 --> 00:09:32.366
all the other ones we wanna support.

187
00:09:32.366 --> 00:09:35.936
The fallback here is basically saying,
if this is not an extension type that we

188
00:09:35.936 --> 00:09:39.960
actually recognize and know how to handle,
default to application/octet-stream.

189
00:09:39.960 --> 00:09:44.943
So some of the ones that we're not
gonna bother handling are .wff, so

190
00:09:44.943 --> 00:09:47.235
WAF files for fonts, or WAF2.

191
00:09:47.235 --> 00:09:51.093
Fortunately, fonts actually want
to be application/octet-stream,

192
00:09:51.093 --> 00:09:53.838
which is very convenient
because WAF2 is 5 bytes.

193
00:09:53.838 --> 00:09:57.521
So the fact that we don't need to handle
that one, [LAUGH] you just let that be

194
00:09:57.521 --> 00:10:01.203
handled by the default case, works out
very well for our extremely hacky,

195
00:10:01.203 --> 00:10:04.380
if everything is 4 bytes or
fewer turn it into an integer trick.

196
00:10:04.380 --> 00:10:07.189
Okay, I do wanna note
by the way that these

197
00:10:07.189 --> 00:10:11.702
numbers actually vary based on
the endianness of your processor.

198
00:10:11.702 --> 00:10:14.212
Endianness is a Gulliver's Travels joke.

199
00:10:14.212 --> 00:10:16.897
There's a whole history about what
this means and all that stuff.

200
00:10:16.897 --> 00:10:19.558
We're not gonna get into it for this
workshop because it's not gonna come up.

201
00:10:19.558 --> 00:10:22.439
Everybody's processor who's gonna be
using this workshop is gonna be the same

202
00:10:22.439 --> 00:10:23.947
endianness, so it's not gonna matter.

203
00:10:23.947 --> 00:10:26.341
But it is worth noting that
there are big endian and

204
00:10:26.341 --> 00:10:28.396
little endian CPUs out there in the world.

205
00:10:28.396 --> 00:10:31.304
And so theoretically that is something
you would need to worry about.

206
00:10:31.304 --> 00:10:34.119
But for our purposes, we don't care,
it's not gonna come up.

207
00:10:34.119 --> 00:10:36.227
But just so
if you wanna look that term up later,

208
00:10:36.227 --> 00:10:39.076
you can kind of learn more about
how integers get represented and

209
00:10:39.076 --> 00:10:42.214
some different CPUs that are more
exotic than what we're using here.

210
00:10:42.214 --> 00:10:47.290
Okay, [COUGH] all right, so now let's
see if we can improve on this situation.

211
00:10:47.290 --> 00:10:49.434
These hard coded numbers,
this is not gonna work.

212
00:10:49.434 --> 00:10:51.232
I mean,
this is just a total obviously disaster.

213
00:10:51.232 --> 00:10:53.632
Nobody would find this readable code.

214
00:10:53.632 --> 00:10:56.779
This is just like, you'd have to do these
magical calculations ahead of time.

215
00:10:56.779 --> 00:10:58.601
We can do better, fortunately.

216
00:10:58.601 --> 00:11:01.246
And to do better,
we're gonna use bit shifts.

217
00:11:01.246 --> 00:11:04.638
I promise this is not just an excuse
to learn about bit shifts,

218
00:11:04.638 --> 00:11:07.911
we're actually gonna [LAUGH]
make use of them for real here.

219
00:11:07.911 --> 00:11:12.438
Okay, so let's say that we have some
different like bit patterns here.

220
00:11:12.438 --> 00:11:16.726
So we have four bytes here, and this first
one is zero, the second one is two, so

221
00:11:16.726 --> 00:11:18.459
it ends in one followed by zero.

222
00:11:18.459 --> 00:11:20.760
Second one is four, and
ends in four followed by 11.

223
00:11:20.760 --> 00:11:22.807
And this last one is three, it ends in 11.

224
00:11:22.807 --> 00:11:25.455
So then we have another bit pattern here,
and

225
00:11:25.455 --> 00:11:27.905
these are basically shifted over by one.

226
00:11:27.905 --> 00:11:30.666
So you can see that the one here
has been shifted over one position,

227
00:11:30.666 --> 00:11:32.688
the one here has been
shifted over one position,

228
00:11:32.688 --> 00:11:35.576
the one here has been shifted over
one position, and so has this one.

229
00:11:35.576 --> 00:11:38.619
And basically,
this first bit that was here either

230
00:11:38.619 --> 00:11:43.163
could be shifted off the end and just
discarded, and we add a zero at the end.

231
00:11:43.163 --> 00:11:45.956
Or it could wrap around, which in
this case would be the same thing,

232
00:11:45.956 --> 00:11:47.586
cuz this one happen to be a zero anyway.

233
00:11:47.586 --> 00:11:50.373
So we can't really tell if it
wrapped around or was discarded and

234
00:11:50.373 --> 00:11:51.567
an extra zero was added in.

235
00:11:51.567 --> 00:11:54.262
But the point is that all
of this bits were shifted,

236
00:11:54.262 --> 00:11:56.025
they shifted over one position.

237
00:11:56.025 --> 00:11:59.197
Now that we performed this operation,
we can observe that we now have new

238
00:11:59.197 --> 00:12:01.594
integer values corresponding
to each of these bytes.

239
00:12:01.594 --> 00:12:02.694
So this one is still 0,

240
00:12:02.694 --> 00:12:06.165
this one's now 4 because that's what
happens when you shift over by one.

241
00:12:06.165 --> 00:12:08.572
This one's now 8 and this one's now 6.

242
00:12:08.572 --> 00:12:12.445
Once more, if we bit shift one
more time over to the left,

243
00:12:12.445 --> 00:12:15.118
here we have 0, 8, 16, and 12.

244
00:12:15.118 --> 00:12:17.501
If you look at these numbers,
you might notice an interesting pattern.

245
00:12:17.501 --> 00:12:20.222
Bit-shifting everything
to the left doubles them.

246
00:12:20.222 --> 00:12:24.456
So this 2 becomes 4, and then if you bit
shift again, it becomes 8, 4 becomes 8 and

247
00:12:24.456 --> 00:12:27.253
then becomes 16, 3 becomes 6 and
then becomes 12.

248
00:12:27.253 --> 00:12:30.315
This is actually a performance
optimization that is

249
00:12:30.315 --> 00:12:34.282
one of the things that the C compiler,
among many other compilers,

250
00:12:34.282 --> 00:12:37.709
will do automatically for
you when it detects that it can.

251
00:12:37.709 --> 00:12:42.173
So, as it turns out, doing an actual
multiplication instruction in the CPU is

252
00:12:42.173 --> 00:12:46.450
significantly more expensive for
the CPU to do than a bit shift operation.

253
00:12:46.450 --> 00:12:50.128
So what will happen is that
if the compiler detects that,

254
00:12:50.128 --> 00:12:54.867
I see that you're multiplying by two or
a power of two, I will just silently turn

255
00:12:54.867 --> 00:12:59.394
that into a bit shift of that many [LAUGH]
things, so that it can effectively do

256
00:12:59.394 --> 00:13:04.338
the doubling less expensively than having
to do an actual multiplication thing.

257
00:13:04.338 --> 00:13:08.468
Now there is a downside here when it
comes to overflow, which is that, hey,

258
00:13:08.468 --> 00:13:12.983
what if the bit shift throws some of these
extra zeros off the end and discards them,

259
00:13:12.983 --> 00:13:13.646
what then?

260
00:13:13.646 --> 00:13:16.998
But actually, as it turns out,
C's multiplication does that too.

261
00:13:16.998 --> 00:13:19.457
[LAUGH] So
you have the same problem either way,

262
00:13:19.457 --> 00:13:22.178
it's just a question of
how it's gonna handle it.

263
00:13:22.178 --> 00:13:26.667
But one thing to note about that is that
C's optimizer basically assumes that,

264
00:13:26.667 --> 00:13:29.883
it likes to make use of what
it calls undefined behavior,

265
00:13:29.883 --> 00:13:32.363
which is basically in the C specification.

266
00:13:32.363 --> 00:13:36.252
It says multiplying two integers together
in C and then ending up with an integer

267
00:13:36.252 --> 00:13:39.513
that's too big to fit in your bits,
which can absolutely happen.

268
00:13:39.513 --> 00:13:44.089
If you have 32 bits here and you multiply
two sufficiently large numbers together.

269
00:13:44.089 --> 00:13:47.984
For example,
all ones except one zero at the end here.

270
00:13:47.984 --> 00:13:49.281
If you multiply those together,

271
00:13:49.281 --> 00:13:51.843
you're gonna get a number that's
way too big to fit in 32 bits.

272
00:13:51.843 --> 00:13:54.463
C says officially,
it is undefined behavior to do that,

273
00:13:54.463 --> 00:13:58.175
which basically means that if you do that,
the C compiler is free to do absolutely

274
00:13:58.175 --> 00:14:01.801
anything that it wants because it's
going to assume that that never happens.

275
00:14:01.801 --> 00:14:05.234
So, make sure that that never happens,
programmer, and you're like, well, so

276
00:14:05.234 --> 00:14:05.882
what happens?

277
00:14:05.882 --> 00:14:08.816
Is it gonna segfaults or throw
an exception, or it's like, no, I not even

278
00:14:08.816 --> 00:14:12.146
gonna tell you what's gonna happen, you're
just gonna find out, so don't do it.

279
00:14:12.146 --> 00:14:13.327
Could be anything.

280
00:14:13.327 --> 00:14:17.475
There's this old joke about undefined
behavior means that literally,

281
00:14:17.475 --> 00:14:21.555
the C compiler is allowed to cause
goblins to fly out of your nose if you,

282
00:14:21.555 --> 00:14:24.683
[LAUGH] multiply two numbers
that are too big together,

283
00:14:24.683 --> 00:14:27.083
that's what undefined behavior means.

284
00:14:27.083 --> 00:14:31.215
It means, literally, anything is allowed
to happen, including nasal goblins.

285
00:14:31.215 --> 00:14:33.990
So it's like kind of like don't do it.

286
00:14:33.990 --> 00:14:37.379
And part of the reason that it says that
is because it wants to be free to say

287
00:14:37.379 --> 00:14:41.212
yeah, look, I wanna be able to do these
optimizations like turning multiplies by

288
00:14:41.212 --> 00:14:43.569
powers of two into bit shifts,
which are faster.

289
00:14:43.569 --> 00:14:47.094
But they're faster and they might have
slightly different behavior in terms of

290
00:14:47.094 --> 00:14:48.580
overflow than the multipliers.

291
00:14:48.580 --> 00:14:51.494
And so in order to get that performance
benefit, it needs to assume like,

292
00:14:51.494 --> 00:14:54.267
yeah, it's just never gonna happen and
you need to be responsible for

293
00:14:54.267 --> 00:14:55.588
making sure it doesn't happen.

294
00:14:55.588 --> 00:14:59.951
Okay, now the reason we're learning
about bit shifts is because if we were

295
00:14:59.951 --> 00:15:03.413
to take the bytes for h and
then the bytes for t and m and l, and

296
00:15:03.413 --> 00:15:05.853
we were to bit shift them strategically.

297
00:15:05.853 --> 00:15:09.252
And say, okay, we take this t and
we bit shift it over by 8 and

298
00:15:09.252 --> 00:15:11.736
take the m over by 16 and
the l over by 24.

299
00:15:11.736 --> 00:15:17.575
Sorry, and then we do a bitwise OR, which
is basically saying take all of these

300
00:15:17.575 --> 00:15:23.164
bits and then if both of them are zero,
then the resulting one is also zero.

301
00:15:23.164 --> 00:15:25.728
If either one of them is one,
then the resulting one is one.

302
00:15:25.728 --> 00:15:29.112
And so this effectively means that all of
those bit shifts that are sort of adding

303
00:15:29.112 --> 00:15:31.299
all those zeros at the end
sort of become harmless.

304
00:15:31.299 --> 00:15:36.108
Essentially, what this does is it
causes us to end up with h, t,

305
00:15:36.108 --> 00:15:40.128
m and l in exactly the array
like pattern that we want.

306
00:15:40.128 --> 00:15:44.399
So h is gonna be first, and then t is
gonna be next, m is gonna be next,

307
00:15:44.399 --> 00:15:46.559
then l is gonna be next after that.

308
00:15:46.559 --> 00:15:49.413
And then if we call to int on that,
it's going to actually, sorry,

309
00:15:49.413 --> 00:15:52.921
we could write a function called to int,
which we can call, passing these things,

310
00:15:52.921 --> 00:15:54.648
which will just do the bit shifts for us.

311
00:15:54.648 --> 00:15:59.076
And then what this will basically do
is this will turn these things into

312
00:15:59.076 --> 00:16:01.117
an actual integer like we want.

313
00:16:01.117 --> 00:16:03.952
So then ideally we would
like to be able to say,

314
00:16:03.952 --> 00:16:08.246
instead of const int png equals
this horrendous, hard coded number,

315
00:16:08.246 --> 00:16:13.146
we'd like to be able to call to int and
just say, look png/0 HTML, yada yada.

316
00:16:13.146 --> 00:16:16.579
This is much more readable than this,
I think we can all agree.

317
00:16:16.579 --> 00:16:19.879
It's not quite as readable as a string
literal, but I can clearly see, okay,

318
00:16:19.879 --> 00:16:22.032
this one's the PNG one,
this one's the HTML one.

319
00:16:22.032 --> 00:16:25.832
It's a lot harder to make a mistake, or
to detect that I've made a mistake than I

320
00:16:25.832 --> 00:16:28.519
have if I have these weird,
hard-coded numbers here.

