WEBVTT

1
00:00:00.193 --> 00:00:02.810
&gt;&gt; Richard Feldman: Now, I wanna note that
you can use this assembly, don't worry,

2
00:00:02.810 --> 00:00:04.629
you're not supposed to
be able to read that.

3
00:00:04.629 --> 00:00:07.844
To sort of compare and just give you an
idea of what this overhead looks like in

4
00:00:07.844 --> 00:00:08.861
terms of the hardware.

5
00:00:08.861 --> 00:00:12.257
So here is the C assembly
code that we just saw.

6
00:00:12.257 --> 00:00:14.323
For C++ Hello, World, here's what it is.

7
00:00:14.323 --> 00:00:17.723
It's like, okay, there's a little
bit more, but not a whole lot more.

8
00:00:17.723 --> 00:00:21.025
And then, if you look at
something like Go, it's this.

9
00:00:21.025 --> 00:00:24.939
And also, if you look closely in inside
of what's actually going on in here,

10
00:00:24.939 --> 00:00:27.605
there's a whole bunch of jumps and
stuff like that.

11
00:00:27.605 --> 00:00:31.393
So it's actually jumping to a bunch of
other stuff that's doing even more work.

12
00:00:31.393 --> 00:00:34.928
So really, if you wanted to see
the equivalent of how much actual

13
00:00:34.928 --> 00:00:39.312
hardware instructions are going into
Go's Hello, World versus a C or a C++,

14
00:00:39.312 --> 00:00:42.071
you actually need multiple
more screens of this.

15
00:00:42.071 --> 00:00:45.332
Because it's doing so
much to set up the garbage collector and

16
00:00:45.332 --> 00:00:47.788
the virtual machine and
all that kinda stuff.

17
00:00:47.788 --> 00:00:50.149
So, yeah,
this is where the overhead comes from.

18
00:00:50.149 --> 00:00:53.559
C's performance is not because
it's doing something extra,

19
00:00:53.559 --> 00:00:57.817
it's just because it's doing less,
at least in terms of what it compiles to.

20
00:00:57.817 --> 00:01:01.582
All of these C successor languages that we
talked about in the previous section, like

21
00:01:01.582 --> 00:01:05.520
Rust, Zig, Jai, Odin, Carbon, they're all
trying to be over on this side of things.

22
00:01:05.520 --> 00:01:09.659
They're like, really, compared to C, we
wanna have some more ergonomic features,

23
00:01:09.659 --> 00:01:12.507
but we really,
really wanna minimize the extra overhead.

24
00:01:12.507 --> 00:01:15.768
A lot of these languages were okay
with saying, yeah, as C++ is here,

25
00:01:15.768 --> 00:01:18.227
it's okay if there's a little
bit of extra overhead,

26
00:01:18.227 --> 00:01:20.861
as long as it's not really
noticeable in the benchmarks.

27
00:01:20.861 --> 00:01:22.486
C is absolute minimum, but

28
00:01:22.486 --> 00:01:27.096
they're okay with that as long as
the ergonomics get significantly better.

29
00:01:27.096 --> 00:01:31.747
So that's kind of what you're getting
if you're looking into one of these C

30
00:01:31.747 --> 00:01:32.772
alternatives.

31
00:01:32.772 --> 00:01:35.418
Okay, so, going back to this,
as we've seen,

32
00:01:35.418 --> 00:01:39.424
this generating the absolute minimum
number of hardware instructions,

33
00:01:39.424 --> 00:01:43.770
if anything does benchmark faster than
this implementation of Hello, World.

34
00:01:43.770 --> 00:01:46.659
You compare this to a C++ version or
whatever else, and

35
00:01:46.659 --> 00:01:50.331
you find that somebody else has written
one that that is running faster,

36
00:01:50.331 --> 00:01:52.637
this tells you that your
benchmark is wrong.

37
00:01:52.637 --> 00:01:56.525
Because again, you cannot minimize
the number of instructions the hardware

38
00:01:56.525 --> 00:01:59.052
does anymore,
it literally is unbeatably fast.

39
00:01:59.052 --> 00:02:00.256
Normally that's not something you can say.

40
00:02:00.256 --> 00:02:03.085
Normally you say, well, look, if you
thought this was theoretically faster but

41
00:02:03.085 --> 00:02:05.757
the other one benchmarked faster,
then obviously the other one's faster.

42
00:02:05.757 --> 00:02:07.773
But of course, there's always
the possibility that you messed up

43
00:02:07.773 --> 00:02:08.351
your benchmarks.

44
00:02:08.351 --> 00:02:12.359
This is one of the very rare cases where
you can confidently say, if something else

45
00:02:12.359 --> 00:02:16.038
seems to run faster than this,
that means the benchmark is wrong somehow.

46
00:02:16.038 --> 00:02:19.973
Okay, so to make this a little bit
more ergonomic, sorry, idiomatic,

47
00:02:19.973 --> 00:02:24.315
I did talk about, saying a void here,
meaning main is not returning anything.

48
00:02:24.315 --> 00:02:26.995
It is a little bit more common,
or I guess,

49
00:02:26.995 --> 00:02:31.092
idiomatic to actually have main
return an integer and explicitly

50
00:02:31.092 --> 00:02:35.948
return the exit code that you want the
program to do when it finishes running.

51
00:02:35.948 --> 00:02:38.653
So when you run main,
like 0, just by convention,

52
00:02:38.653 --> 00:02:42.169
0 generally means the program succeeded,
everything went fine.

53
00:02:42.169 --> 00:02:44.821
Non zero generally means
something went wrong, and

54
00:02:44.821 --> 00:02:48.255
then there's not really a ton of
consistency in terms of what the non

55
00:02:48.255 --> 00:02:51.221
zero ones mean in terms of
what they're trying to convey.

56
00:02:51.221 --> 00:02:53.067
In terms of what actually went wrong.

57
00:02:53.067 --> 00:02:56.257
But I mentioned this in large part
because when we get to the exercises,

58
00:02:56.257 --> 00:02:57.745
we're gonna do it in this style,

59
00:02:57.745 --> 00:03:01.380
because the C compiler will actually give
you a warning if you do it in this style.

60
00:03:01.380 --> 00:03:03.138
But for learning purposes,

61
00:03:03.138 --> 00:03:06.736
I wanted to start with that
cuz it's a little bit simpler.

62
00:03:06.736 --> 00:03:10.147
The other thing that we can do to improve
the ergonomics of this is, instead of

63
00:03:10.147 --> 00:03:13.573
using this write function, we can use
a wrapper around write called printf.

64
00:03:13.573 --> 00:03:17.553
And printf, as we will see later,
the main reason that people use it, so

65
00:03:17.553 --> 00:03:20.310
this is print formatted,
the f is for formatted.

66
00:03:20.310 --> 00:03:23.238
Again, normally we would
probably see some camel case or

67
00:03:23.238 --> 00:03:27.691
some snake case [LAUGH] in these names,
but this is C, 1972, they just went print,

68
00:03:27.691 --> 00:03:29.043
just stick an f on the end.

69
00:03:29.043 --> 00:03:33.854
It's the formatted version of print,
really minimizing your teletype ink.

70
00:03:33.854 --> 00:03:35.719
And basically, this just takes the string.

71
00:03:35.719 --> 00:03:39.118
And as previously mentioned, this will
do things like automatically calculating

72
00:03:39.118 --> 00:03:41.946
the length of the string and
automatically writing to standard out.

73
00:03:41.946 --> 00:03:45.163
So you don't have to say one for standard
out and 13 for the length of the string,

74
00:03:45.163 --> 00:03:46.848
printf will just take care of that for
you.

75
00:03:46.848 --> 00:03:50.128
Also, as we will see later in the course,
printf has additional features that

76
00:03:50.128 --> 00:03:52.527
let you do some basic string
interpolation type things.

77
00:03:52.527 --> 00:03:55.830
So if you wanted to like print a string
in the middle of this without having

78
00:03:55.830 --> 00:03:59.153
to concatenate it together ahead of time,
printf also lets you do that.

79
00:03:59.153 --> 00:04:02.116
You can also print numbers in here and
it'll convert them to strings for you,

80
00:04:02.116 --> 00:04:02.853
things like that.

81
00:04:02.853 --> 00:04:05.681
So we're gonna use printf quite a bit
more throughout the course of the course.

82
00:04:05.681 --> 00:04:09.454
But in terms of getting as close
to the middle as possible,

83
00:04:09.454 --> 00:04:12.853
printf is just a convenience
wrapper around write.

84
00:04:12.853 --> 00:04:16.503
Instead of coming from unisted,
it comes from stdio, which is for

85
00:04:16.503 --> 00:04:17.882
standard input output.

86
00:04:17.882 --> 00:04:22.776
So usually, when you see a C Hello World
example, they will show you this.

87
00:04:22.776 --> 00:04:25.067
This is almost exactly what you
will see for C Hello World.

88
00:04:25.067 --> 00:04:28.336
It's like, int main, return 0, printf.

89
00:04:28.336 --> 00:04:32.533
But I did wanna go over,
this is the actual closest to the metal

90
00:04:32.533 --> 00:04:36.988
version you can get without getting
into operating system land.

91
00:04:36.988 --> 00:04:42.001
Okay, yeah, the F is for formatted, and
formatted meaning, it supports the things

92
00:04:42.001 --> 00:04:46.842
like, if you wanna interpolate a string in
there or a number or something like that.

93
00:04:46.842 --> 00:04:49.199
So here's an example of using
that interpolation feature,

94
00:04:49.199 --> 00:04:50.315
the actual formatted part.

95
00:04:50.315 --> 00:04:54.242
So we can define a local variable here,
say, int num = 42.

96
00:04:54.242 --> 00:04:56.952
So as with our main function declaration,

97
00:04:56.952 --> 00:05:01.169
we are defining a local variable
here by first saying the type, and

98
00:05:01.169 --> 00:05:06.236
then saying the name of the thing, and
then equals, and then the actual value.

99
00:05:06.236 --> 00:05:08.368
Worth noting that main is a special name.

100
00:05:08.368 --> 00:05:12.369
So you can name your
functions whatever you want.

101
00:05:12.369 --> 00:05:14.371
You can write, of course,
in the course of this course,

102
00:05:14.371 --> 00:05:16.434
we're gonna write helper functions and
stuff like that.

103
00:05:16.434 --> 00:05:20.699
But if you specifically name it, M-A-I-N,
that is special in the C compiler world.

104
00:05:20.699 --> 00:05:24.149
That is basically
the function that C looks for

105
00:05:24.149 --> 00:05:26.898
as the entry point for your program.

106
00:05:26.898 --> 00:05:29.153
So this is what's gonna run
when your program runs.

107
00:05:29.153 --> 00:05:31.836
Obviously, in Node.js or something
like that, you don't need to do this,

108
00:05:31.836 --> 00:05:33.175
you can just start writing your code.

109
00:05:33.175 --> 00:05:35.256
It's fine, but
that's not the way it's done in C.

110
00:05:35.256 --> 00:05:39.046
In C, you actually have to wrap
it in a function named main.

111
00:05:39.046 --> 00:05:43.131
All the other functions can be named
whatever you want, but main is special.

112
00:05:43.131 --> 00:05:44.687
So, int num = 42.

113
00:05:44.687 --> 00:05:47.942
And then, basically,
in order to substitute num into here,

114
00:05:47.942 --> 00:05:51.261
where we wanna say the number is
followed by the actual number,

115
00:05:51.261 --> 00:05:53.722
printf takes multiple
arguments if you want.

116
00:05:53.722 --> 00:05:56.329
So you can just keep giving it as
many different arguments as you want.

117
00:05:56.329 --> 00:05:58.476
That's one of the things that C supports.

118
00:05:58.476 --> 00:06:01.145
It's called var args, for
varying number of args.

119
00:06:01.145 --> 00:06:05.645
And essentially, what you do here is
you use a format specifier to say,

120
00:06:05.645 --> 00:06:09.627
here is the type of the thing that
I want to interpolate in here.

121
00:06:09.627 --> 00:06:16.606
So %d, d basically means digit, or digits.

122
00:06:16.606 --> 00:06:20.582
So it's essentially like, yeah,
give me an integer over here and

123
00:06:20.582 --> 00:06:22.289
I will print its digits out.

124
00:06:22.289 --> 00:06:24.595
As we will see, there are different
format specifiers for different types.

125
00:06:24.595 --> 00:06:26.785
So %s is if you gave it a string.

126
00:06:26.785 --> 00:06:31.436
So this is not quite as convenient as
usual, like dollar sign, curly braces,

127
00:06:31.436 --> 00:06:33.279
string interpolation style.

128
00:06:33.279 --> 00:06:36.698
But again, 1972.

129
00:06:36.698 --> 00:06:40.413
So, we mentioned this a little bit
earlier, but why is it called print?

130
00:06:40.413 --> 00:06:42.046
And why is there no underscore before f?

131
00:06:42.046 --> 00:06:44.660
And again, it's because PDP-11 teletypes.

132
00:06:44.660 --> 00:06:49.503
It was physically printing back when
C was originally created in 1972.

133
00:06:49.503 --> 00:06:54.648
All right, so, let's sort of summarize
all the things we talked about in part 1.

134
00:06:54.648 --> 00:06:56.708
So this is Hello, World in C.

135
00:06:56.708 --> 00:06:59.218
We start off by just talking
about the lowest level,

136
00:06:59.218 --> 00:07:01.798
closest to the metal version
of that that you can get.

137
00:07:01.798 --> 00:07:03.573
What does the actual hardware see?

138
00:07:03.573 --> 00:07:07.653
And we went through the assembly
language of the actual instructions that

139
00:07:07.653 --> 00:07:09.248
the the CPU would be seeing.

140
00:07:09.248 --> 00:07:11.376
We talked about the performance
implications of this,

141
00:07:11.376 --> 00:07:12.743
namely that it is unbeatable fast.

142
00:07:12.743 --> 00:07:15.344
You cannot write a Hello,
World that runs faster than this,

143
00:07:15.344 --> 00:07:18.557
because we were executing the minimal
number of instructions that we could

144
00:07:18.557 --> 00:07:19.837
possibly do on the hardware.

145
00:07:19.837 --> 00:07:22.652
And then finally, we talked about
some ways to very slightly improve

146
00:07:22.652 --> 00:07:24.896
the ergonomics,
like using printf instead of write.

147
00:07:24.896 --> 00:07:28.879
So we don't have to specify the standard
out integer and the length of the string.

148
00:07:28.879 --> 00:07:29.698
And then also,

149
00:07:29.698 --> 00:07:33.937
being a little bit more idiomatic with
using a return like int rather than void.

