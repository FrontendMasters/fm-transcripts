WEBVTT

1
00:00:00.000 --> 00:00:01.986
&gt;&gt; Richard Feldman: So
we've just done some file I/O, and

2
00:00:01.986 --> 00:00:03.730
now the final thing that we need for

3
00:00:03.730 --> 00:00:07.780
our web server to possibly be able to work
is we need to be able to do network I/O.

4
00:00:07.780 --> 00:00:10.468
In our case,
we're only gonna be going over localhost,

5
00:00:10.468 --> 00:00:12.150
but the same basic concepts apply.

6
00:00:12.150 --> 00:00:15.719
Okay, so to do network I/O in C with no
third party libraries, we're gonna first

7
00:00:15.719 --> 00:00:18.944
open a socket, then we're gonna listen for
connections on that socket.

8
00:00:18.944 --> 00:00:21.968
We're gonna read from the socket, and
then, finally, write to a socket.

9
00:00:21.968 --> 00:00:26.304
So all of these have different interesting
considerations around things that we

10
00:00:26.304 --> 00:00:27.713
haven't seen so far in C.

11
00:00:27.713 --> 00:00:30.704
Okay, the first thing that I
should mention is that LIBC,

12
00:00:30.704 --> 00:00:33.769
which is the C standard library,
loves file descriptors.

13
00:00:33.769 --> 00:00:35.606
[LAUGH] We've seen them be used for files.

14
00:00:35.606 --> 00:00:38.914
But let me tell you, if C can solve
a problem with a file descriptor,

15
00:00:38.914 --> 00:00:40.261
it is very happy to do that.

16
00:00:40.261 --> 00:00:44.912
When we saw the write function earlier on,
that was a file descriptor for

17
00:00:44.912 --> 00:00:47.209
a standard out as file descriptor.

18
00:00:47.209 --> 00:00:51.554
We use file descriptors for files, and
we also use file descriptors for sockets.

19
00:00:51.554 --> 00:00:53.981
This is one of the cases where
Windows is a little bit different.

20
00:00:53.981 --> 00:00:55.701
Windows uses a very similar API, but

21
00:00:55.701 --> 00:00:58.930
it actually doesn't use literal
file descriptors for its sockets.

22
00:00:58.930 --> 00:01:02.599
It uses a thing that looks and works
almost exactly like a file descriptor,

23
00:01:02.599 --> 00:01:05.060
except that it's technically
a different type.

24
00:01:05.060 --> 00:01:09.457
And they kind of have their
own integer space for those.

25
00:01:09.457 --> 00:01:15.025
But basically, for our purposes, for
focusing on the UNIX/POSIX flavor of C.

26
00:01:15.025 --> 00:01:17.785
Basically, when we call this
function called socket, which,

27
00:01:17.785 --> 00:01:19.789
these arguments we'll
get into this in a sec.

28
00:01:19.789 --> 00:01:21.930
It gives us back a socket file descriptor.

29
00:01:21.930 --> 00:01:26.173
And this file descriptor is just
an integer, just like the file

30
00:01:26.173 --> 00:01:30.675
descriptors we were using for
open and fstat and read and all that.

31
00:01:30.675 --> 00:01:36.313
This first constant here is basically
just saying, hey, I wanna do IPv4 socket.

32
00:01:36.313 --> 00:01:40.840
So you actually have to open a different
socket type if you wanna handle IPv4

33
00:01:40.840 --> 00:01:43.187
addresses versus IPv6 IP addresses.

34
00:01:43.187 --> 00:01:46.183
We're only gonna deal with IPv4 for
this web server.

35
00:01:46.183 --> 00:01:49.547
But if you did want to handle IPv6,
this would be the place to start,

36
00:01:49.547 --> 00:01:51.472
is to give a different constant there.

37
00:01:51.472 --> 00:01:54.775
Basically, we're saying
TCP instead of UDP.

38
00:01:54.775 --> 00:01:57.925
So UDP is a protocol that's
commonly used for game servers,

39
00:01:57.925 --> 00:02:00.783
certain really high
performance networking things.

40
00:02:00.783 --> 00:02:04.061
But it has a downside of, if you send
the packets out, you don't get a response.

41
00:02:04.061 --> 00:02:05.974
You don't know if they made it
to their destination or not,

42
00:02:05.974 --> 00:02:07.598
you're just kind of spamming
them into the void.

43
00:02:07.598 --> 00:02:09.823
Which, for games,
is often actually what you want.

44
00:02:09.823 --> 00:02:13.600
But for our use case, we definitely
want TCP to talk to a browser.

45
00:02:13.600 --> 00:02:16.126
And then finally,
there's a protocol number,

46
00:02:16.126 --> 00:02:18.723
we're not really gonna
get into what that means.

47
00:02:18.723 --> 00:02:22.215
Also, there's kind of some more
boilerplate that we need to do here.

48
00:02:22.215 --> 00:02:25.110
This is basically just
an interesting demonstration, well,

49
00:02:25.110 --> 00:02:28.620
A, of some C boilerplate, this is kind
of what boilerplate in C looks like.

50
00:02:28.620 --> 00:02:32.852
But B, it's also a slightly different
C API pattern that we haven't quite

51
00:02:32.852 --> 00:02:36.557
seen before, so we're just gonna
talk through it very briefly.

52
00:02:36.557 --> 00:02:39.277
So we're calling this function called
setsockopt, which is basically,

53
00:02:39.277 --> 00:02:41.273
I'm gonna configure this
socket that we've opened.

54
00:02:41.273 --> 00:02:44.819
So the first argument is the socket
file descriptor of the socket that we

55
00:02:44.819 --> 00:02:45.775
want to work with.

56
00:02:45.775 --> 00:02:47.685
And we're gonna talk
about these constants.

57
00:02:47.685 --> 00:02:50.564
This is the interesting part here,
this &amp;opt.

58
00:02:50.564 --> 00:02:54.835
So basically,
what this &amp;opt is doing is that, remember,

59
00:02:54.835 --> 00:02:57.614
we talked earlier, opt is an integer.

60
00:02:57.614 --> 00:02:59.381
But anything that you want in C,

61
00:02:59.381 --> 00:03:03.452
if you wanna get the address of this
variable, you can just always say &amp;.

62
00:03:03.452 --> 00:03:07.512
And so what this is doing is it's saying,
I wanna pass in the address of this

63
00:03:07.512 --> 00:03:11.515
integer, and then setsockopt is
actually going to mutate that integer.

64
00:03:11.515 --> 00:03:15.208
So this is the same kind of pattern
as what we saw earlier with memcopy.

65
00:03:15.208 --> 00:03:16.088
Where we were like, hey,

66
00:03:16.088 --> 00:03:18.814
I'm gonna give you the address of these
bytes, I want you to stomp all over them.

67
00:03:18.814 --> 00:03:21.985
Or what we saw later on with fsat,
where we're like, hey, here's this struct.

68
00:03:21.985 --> 00:03:24.039
I'm gonna give you the address,
I want you to stomp all over it.

69
00:03:24.039 --> 00:03:26.786
Now we're doing that same thing, but
we're doing it with an individual integer.

70
00:03:26.786 --> 00:03:30.974
So there's really no limit to how much C
[LAUGH] libraries will use this pattern.

71
00:03:30.974 --> 00:03:33.677
Once again, this is C standard library,
ships with the operating system.

72
00:03:33.677 --> 00:03:36.482
And it's like, yeah,
give me the address of this integer,

73
00:03:36.482 --> 00:03:40.181
I'm going to stomp all over it when you
call me, that's how these things work.

74
00:03:40.181 --> 00:03:44.535
Or, sorry, it potentially will stomp all
over it, it doesn't necessarily have to.

75
00:03:44.535 --> 00:03:48.517
And then finally, sizeof(opt), because
that actually wants to know how big of

76
00:03:48.517 --> 00:03:51.244
a thing is in there, for
reasons we'll discuss later.

77
00:03:51.244 --> 00:03:53.451
So why do we need to do
this setsockopt thing?

78
00:03:53.451 --> 00:03:55.698
So if you want, you can omit this.

79
00:03:55.698 --> 00:03:58.382
And I considered leaving it out of
the course, but I decided to put it in for

80
00:03:58.382 --> 00:03:58.914
two reasons.

81
00:03:58.914 --> 00:04:00.884
One is, it's an example of boilerplate,

82
00:04:00.884 --> 00:04:03.414
it's an example of this sort
of unusual pattern here.

83
00:04:03.414 --> 00:04:07.382
But two, it's kind of an ergonomics thing
if you're just trying to run the web

84
00:04:07.382 --> 00:04:08.297
server locally.

85
00:04:08.297 --> 00:04:11.413
If you don't do this, I don't actually
know the exact reason for this,

86
00:04:11.413 --> 00:04:12.907
I haven't dug into it all the way.

87
00:04:12.907 --> 00:04:16.477
But the symptom that you see is that when
you're stopping and restarting the server

88
00:04:16.477 --> 00:04:19.590
a lot, which I was doing as I was trying
it out while building the course.

89
00:04:19.590 --> 00:04:23.047
Sometimes you get an address in use error,
even when the server isn't running.

90
00:04:23.047 --> 00:04:24.975
So it's like, hey, port 8080?

91
00:04:24.975 --> 00:04:27.235
That's in use, I'm like, no,
it's not, I stopped the server,

92
00:04:27.235 --> 00:04:28.201
what are you talking about?

93
00:04:28.201 --> 00:04:30.531
Then you just wait for a couple seconds
and run it again, it's like, yeah,

94
00:04:30.531 --> 00:04:31.301
it's not in use anymore.

95
00:04:31.301 --> 00:04:35.204
So there's something about the address
can sometimes kind of linger,

96
00:04:35.204 --> 00:04:38.074
unless you set this thing
which says reuse address.

97
00:04:38.074 --> 00:04:42.494
Which I guess means, I don't know, don't
keep it in use longer than my process.

98
00:04:42.494 --> 00:04:46.025
I'm sure that someone could explain the
design decisions that led this to not be

99
00:04:46.025 --> 00:04:47.087
the default behavior.

100
00:04:47.087 --> 00:04:51.180
But at any rate, this is some boilerplate
that you need to do [LAUGH] if you want to

101
00:04:51.180 --> 00:04:55.210
get it so that when you stop the local
server and restart it, as long as you're

102
00:04:55.210 --> 00:04:59.137
not actually using that port for
something else, you don't get an error.

103
00:04:59.137 --> 00:05:05.027
Okay, so we talked about this, and [COUGH]
basically, yeah, so I forgot about this.

104
00:05:05.027 --> 00:05:09.211
Opt is an integer, but
it's always gonna be either a 1 or a 0.

105
00:05:09.211 --> 00:05:11.912
And then yeah, sizeof returns, basically,

106
00:05:11.912 --> 00:05:14.967
how many bytes are in whatever
variable you give it.

107
00:05:14.967 --> 00:05:19.317
So this is statically known,
so because I gave it an opt,

108
00:05:19.317 --> 00:05:23.226
this is not actually passing
in the number 1 here.

109
00:05:23.226 --> 00:05:25.088
This is actually a language keyword, and

110
00:05:25.088 --> 00:05:27.757
what goes inside the parentheses
is the name of a variable.

111
00:05:27.757 --> 00:05:32.674
And then what sizeof returns is how
many bytes in memory does that variable

112
00:05:32.674 --> 00:05:33.317
take up.

113
00:05:33.317 --> 00:05:38.409
So this is kind of like typeof in
JavaScript, it's a fancy separate thing,

114
00:05:38.409 --> 00:05:41.683
it's not actually looking
at the value itself.

115
00:05:41.683 --> 00:05:49.016
Okay, yeah, so this is just kind of a
weird API for how they decided to do that.

116
00:05:49.016 --> 00:05:50.865
[COUGH] Okay, moving on.

117
00:05:50.865 --> 00:05:55.935
So the next thing we're gonna specify
is essentially, what is the actual

118
00:05:55.935 --> 00:06:00.539
port that we want to bind on, so
when you start up the local server.

119
00:06:00.539 --> 00:06:03.198
I chose localhost:8080,
you can choose whatever you want.

120
00:06:03.198 --> 00:06:08.384
Some of them use like 3000 or
1337 or 8000 or something like that,

121
00:06:08.384 --> 00:06:12.088
just went with 8080,
it's one of the common ones.

122
00:06:12.088 --> 00:06:14.621
Basically, we're making this struct.

123
00:06:14.621 --> 00:06:15.358
Once again,

124
00:06:15.358 --> 00:06:19.581
we are initially declaring this struct
as just empty plain old bytes here.

125
00:06:19.581 --> 00:06:22.077
So this is all initialized memory, and
then we're just gonna go through and

126
00:06:22.077 --> 00:06:22.704
initialize that.

127
00:06:22.704 --> 00:06:28.083
We're gonna say address.sin_family
= AF_INET, this is IPv4 again.

128
00:06:28.083 --> 00:06:31.577
[COUGH] Then, within this thing,
we're setting the s_addr.

129
00:06:31.577 --> 00:06:36.101
Worth noting that this thing right here
is another struct that's uninitialized,

130
00:06:36.101 --> 00:06:38.631
we're only setting one
field in that struct.

131
00:06:38.631 --> 00:06:41.603
Again, [LAUGH] this is C,
sometimes the APIs are kind of strange.

132
00:06:41.603 --> 00:06:44.544
And this is basically saying,
I don't care, I just want any address,

133
00:06:44.544 --> 00:06:46.859
which means the other fields
are just gonna be ignored.

134
00:06:46.859 --> 00:06:48.710
So we don't even bother
to initialize them.

135
00:06:48.710 --> 00:06:50.693
And then finally we have the port.

136
00:06:50.693 --> 00:06:53.842
And this is the actual interesting
part where we're saying, okay,

137
00:06:53.842 --> 00:06:54.937
this is port 8080.

138
00:06:54.937 --> 00:06:59.694
And then that's htons, does some sort
of conversion to convert this from

139
00:06:59.694 --> 00:07:04.230
the integer 8080 into whatever
the type is that sin_port wants.

140
00:07:04.230 --> 00:07:07.385
Okay, so again, none of this is
necessarily anything that we

141
00:07:07.385 --> 00:07:11.100
haven't seen before, other than
initializing a nested struct [LAUGH].

142
00:07:11.100 --> 00:07:14.142
[LAUGH] This memory is just
all total memory garbage.

143
00:07:14.142 --> 00:07:18.365
But this is pretty much just boilerplate
to set up the socket with the parameters

144
00:07:18.365 --> 00:07:18.877
we want.

145
00:07:18.877 --> 00:07:21.873
Next thing we do is we call bind.

146
00:07:21.873 --> 00:07:23.872
So now that we've essentially said, okay,

147
00:07:23.872 --> 00:07:26.251
open the socket,
we got our socket file descriptor.

148
00:07:26.251 --> 00:07:29.766
We called setsockopt to configure that

149
00:07:29.766 --> 00:07:34.351
socket to don't say address
is in use spuriously.

150
00:07:34.351 --> 00:07:39.295
We made this address, we set it up,
and then finally, we're calling bind,

151
00:07:39.295 --> 00:07:43.195
passing on the socket file descriptor and
then the address.

152
00:07:43.195 --> 00:07:48.141
So this is actually gonna say, okay, now
port 8080 is sort of bound to that socket.

153
00:07:48.141 --> 00:07:51.264
So the socket before we did this
bind is essentially the sort

154
00:07:51.264 --> 00:07:52.831
of communications channel.

155
00:07:52.831 --> 00:07:56.052
We're not gonna get too deep into how
the operating system deals with sockets.

156
00:07:56.052 --> 00:08:01.169
But the basic idea is just that until
we've done this bind operation right here,

157
00:08:01.169 --> 00:08:05.383
this is just sort of a communications
channel we can send data to and

158
00:08:05.383 --> 00:08:09.471
receive data from using manual
other read and write type stuff.

159
00:08:09.471 --> 00:08:14.817
But when we do bind, now we're actually
connecting this to the actual port 8080.

160
00:08:14.817 --> 00:08:19.227
And now we're saying, okay,
whenever we receive data on port 8080,

161
00:08:19.227 --> 00:08:20.984
I want it to go to this socket.

162
00:08:20.984 --> 00:08:25.745
And then we have that same pattern before,
we have the ampersand of the address.

163
00:08:25.745 --> 00:08:28.189
So it's giving him the address
of the address, or, I guess,

164
00:08:28.189 --> 00:08:30.069
a pointer to the address,
[LAUGH] I don't know,

165
00:08:30.069 --> 00:08:32.100
the word address makes it
hard to say this out loud.

166
00:08:32.100 --> 00:08:36.861
But the ampersand, as usual, is like,
give me the memory address of this thing.

167
00:08:36.861 --> 00:08:38.994
We do need to actually
cast this in this case.

168
00:08:38.994 --> 00:08:43.212
Because, yeah, of some weird API
decisions that they made, where,

169
00:08:43.212 --> 00:08:47.154
basically, bind will accept one
of several different structs.

170
00:08:47.154 --> 00:08:51.542
And you're supposed to make whichever
struct is appropriate for your use case,

171
00:08:51.542 --> 00:08:53.232
whether it's IPv4 or IPv6.

172
00:08:53.232 --> 00:08:56.467
But whichever one you choose,
they do have a couple of fields in common.

173
00:08:56.467 --> 00:08:59.645
And so
bind wants you to essentially say, hey,

174
00:08:59.645 --> 00:09:04.822
tell me about the actual subset of the
fields in this struct that I care about.

175
00:09:04.822 --> 00:09:07.518
And the rest you can just
store however you want.

176
00:09:07.518 --> 00:09:10.411
And then sizeof(address) is basically
saying, bind also wants to know,

177
00:09:10.411 --> 00:09:12.987
okay, what's the full size of
the struct that you're passing me,

178
00:09:12.987 --> 00:09:14.721
even though I'm only
gonna look at a subset.

179
00:09:14.721 --> 00:09:16.974
So again,
a little bit of a strange API there, but

180
00:09:16.974 --> 00:09:18.757
nothing that we haven't seen before.

181
00:09:18.757 --> 00:09:22.859
It's just might feel a little bit
strange and kind of unergonomic.

182
00:09:22.859 --> 00:09:27.523
Yeah, so this is just the the casting to
say, okay, we're treating this memory

183
00:09:27.523 --> 00:09:31.588
address as a sockaddr address,
rather than a sockaddr_in address.

184
00:09:31.588 --> 00:09:35.986
As opposed to sockaddr, I think it's
in6 is the IPv6 version of that, in6,

185
00:09:35.986 --> 00:09:37.573
that's what it is, right?

186
00:09:37.573 --> 00:09:42.704
So basically, what this is doing is
saying, okay, we have the first two fields

187
00:09:42.704 --> 00:09:47.625
of sockaddr_in, which is sa_family_t,
and uint16_t for the port.

188
00:09:47.625 --> 00:09:51.830
Same kind of basic thing right here,
in6 has these same two first fields.

189
00:09:51.830 --> 00:09:55.074
And sockaddr,
the sort of generic struct that is like,

190
00:09:55.074 --> 00:09:57.776
I'm sort of compatible
with either of these.

191
00:09:57.776 --> 00:10:00.593
The first field is the same, so
this is the subset that we care about.

192
00:10:00.593 --> 00:10:04.549
The sa_family refers to
either the sin6 family or

193
00:10:04.549 --> 00:10:08.598
the sin family,
depending on it's IPv6 or IPv4.

194
00:10:08.598 --> 00:10:13.273
And then this thing right here
is essentially just [COUGH]

195
00:10:13.273 --> 00:10:16.764
covering the bytes for multiple fields.

196
00:10:16.764 --> 00:10:20.105
So it's basically just sort of like
a padding, something like that.

197
00:10:20.105 --> 00:10:23.525
And so, whereas these both have 2 bytes,
and this is just, yeah,

198
00:10:23.525 --> 00:10:25.574
there's some more stuff going on here.

199
00:10:25.574 --> 00:10:28.281
So because this is
the address of an array,

200
00:10:28.281 --> 00:10:31.981
this is gonna be actual 8 bytes
instead of these 2 bytes.

201
00:10:31.981 --> 00:10:36.962
So yeah, this is covering those 2 bytes
and then some, and so reserving space for,

202
00:10:36.962 --> 00:10:40.903
I guess, potential future things
that might be in these structs.

203
00:10:40.903 --> 00:10:43.579
Okay, so again, we don't need
to spend a ton of time on this,

204
00:10:43.579 --> 00:10:46.923
just if you ever see this pattern,
you're wondering what's going on here,

205
00:10:46.923 --> 00:10:48.377
why it's asking me to cast this?

206
00:10:48.377 --> 00:10:51.850
The reason is that it wants you to say,
okay, I know that you locally are gonna

207
00:10:51.850 --> 00:10:55.281
have one of these two addresses and
I wanna just get a subset of these things.

208
00:10:55.281 --> 00:10:57.795
To be honest, I'm not totally sure
why they didn't just say like

209
00:10:57.795 --> 00:11:00.919
give me the sa_family_t, since that's
the only thing it's actually using.

210
00:11:00.919 --> 00:11:05.399
Maybe it reads this data for some reason,
I'd be kind of surprised about that, but

211
00:11:05.399 --> 00:11:06.111
maybe it is.

212
00:11:06.111 --> 00:11:10.630
But at any rate, this is how
you sort of deal with that sort

213
00:11:10.630 --> 00:11:14.220
of [LAUGH] strange API
that they've got here.

214
00:11:14.220 --> 00:11:19.046
And this cast is basically sort of
confirming that I'm saying, look, I know

215
00:11:19.046 --> 00:11:23.812
that this memory address is addressing
memory that's got this shape to it.

216
00:11:23.812 --> 00:11:25.618
But trust me, I know what I'm doing,

217
00:11:25.618 --> 00:11:28.564
I want you to [COUGH] treat it as
a memory address of one of these.

218
00:11:28.564 --> 00:11:31.176
And that's gonna be fine,
it's gonna work out, trust me.

219
00:11:31.176 --> 00:11:33.496
This is sort of a general
theme of casting in C,

220
00:11:33.496 --> 00:11:36.410
when you do this sort of
parentheses in front of the thing,

221
00:11:36.410 --> 00:11:40.411
is you're basically saying, I know
that there's these 1's and 0's here.

222
00:11:40.411 --> 00:11:42.574
I know that you think,
based on what I declare them as,

223
00:11:42.574 --> 00:11:45.031
that they should be treated as
these types of 1's and 0's.

224
00:11:45.031 --> 00:11:49.108
But trust me, it's gonna be fine if you
treat them as meaning something else.

225
00:11:49.108 --> 00:11:51.356
The same 1's and
0's are meaning something else.

226
00:11:51.356 --> 00:11:54.434
It's gonna be okay, even though it
looks like it's gonna be a mistake.

227
00:11:54.434 --> 00:11:58.473
I am promising that it's not gonna be
a mistake, just trust me and go ahead and

228
00:11:58.473 --> 00:11:59.603
use them in that way.

229
00:11:59.603 --> 00:12:03.295
Okay, and then, yeah, right, so then
the last thing here is basically saying,

230
00:12:03.295 --> 00:12:06.397
okay, well, I don't know how many
actual bytes I giving you because

231
00:12:06.397 --> 00:12:08.020
I'm casting it to something else.

232
00:12:08.020 --> 00:12:13.147
So bind wants to know how many actual
bytes does this address point to.

233
00:12:13.147 --> 00:12:15.695
How far can I go if I want
to read into this thing?

234
00:12:15.695 --> 00:12:19.180
Which I assume is so that,
because this thing covers multiple bytes,

235
00:12:19.180 --> 00:12:22.957
is it wants to know, well, did you give
me something that was too short, and

236
00:12:22.957 --> 00:12:25.517
I need to not even attempt
to read this whole thing.

237
00:12:25.517 --> 00:12:29.381
Because then I would be reading off
the end of whatever you gave me,

238
00:12:29.381 --> 00:12:32.908
and then reading into memory
that I'm not responsible for.

239
00:12:32.908 --> 00:12:35.860
Okay, so that's bind [LAUGH].

240
00:12:35.860 --> 00:12:37.842
So now we've our socket set up.

241
00:12:37.842 --> 00:12:41.443
We've bounded to port 8080
using this kind of strange API.

242
00:12:41.443 --> 00:12:43.152
And next, we're gonna call listen.

243
00:12:43.152 --> 00:12:46.761
So listen basically takes one
argument that we care about,

244
00:12:46.761 --> 00:12:51.020
which is basically how many different
connections can we sort of stack

245
00:12:51.020 --> 00:12:54.355
up before we have to start
refusing to accept new ones.

246
00:12:54.355 --> 00:12:58.099
So the way that you can imagine this is,
I've said, okay, I've got my socket,

247
00:12:58.099 --> 00:12:59.769
I am by binding it to port 8080.

248
00:12:59.769 --> 00:13:03.035
And whenever something comes in on port
8080, of course I'm gonna run some code

249
00:13:03.035 --> 00:13:05.617
that's gonna be like, okay,
let me read that data and handle it.

250
00:13:05.617 --> 00:13:08.510
And that takes some time, and
I have to actually wait for

251
00:13:08.510 --> 00:13:11.354
running the processing on
the data that's coming in.

252
00:13:11.354 --> 00:13:15.673
But what happens if in the operating
system I'm getting stuff in, it's like,

253
00:13:15.673 --> 00:13:17.164
okay, here's some more.

254
00:13:17.164 --> 00:13:20.116
Hey, I'm processing, just chill out,
I'm processing this,

255
00:13:20.116 --> 00:13:23.350
it's like more requests is coming in,
they're starting to stack up.

256
00:13:23.350 --> 00:13:27.542
What this number says is how many requests
are allowed to stack up before they start

257
00:13:27.542 --> 00:13:28.341
erroring out.

258
00:13:28.341 --> 00:13:30.919
And whoever's sending the request,
whether it's the browser or whoever else,

259
00:13:30.919 --> 00:13:32.969
just starts getting an error saying,
like, yeah, I'm sorry,

260
00:13:32.969 --> 00:13:34.040
the server is too busy right now.

261
00:13:34.040 --> 00:13:36.868
Now you might say just, I don't know,
why would you ever want that to error out?

262
00:13:36.868 --> 00:13:39.441
And the answer is, well,
the higher you make this number,

263
00:13:39.441 --> 00:13:40.886
the more memory it's gonna use.

264
00:13:40.886 --> 00:13:44.759
So this is just like it's reserving space
for, yeah, stack up a bunch of these.

265
00:13:44.759 --> 00:13:48.149
So if you set this to a billion,
then it's like, yeah, no problem,

266
00:13:48.149 --> 00:13:50.746
we can have 4 gigabytes worth
of requests stacking up.

267
00:13:50.746 --> 00:13:52.943
It's like, well, we're never gonna get
through them all in a timely fashion.

268
00:13:52.943 --> 00:13:54.835
It's just gonna get worse and
worse and worse over time,

269
00:13:54.835 --> 00:13:56.381
we're gonna get further and
further behind.

270
00:13:56.381 --> 00:14:01.331
So you wanna pick some number here that is
based on what kind of traffic patterns you

271
00:14:01.331 --> 00:14:06.371
anticipate and how fast you think you can
handle the requests, that sort of thing.

272
00:14:06.371 --> 00:14:09.999
And finally, once we've done all that
stuff, and remember [LAUGH] how many

273
00:14:09.999 --> 00:14:13.065
slides worth of code we are omitting
with these dot, dot dots.

274
00:14:13.065 --> 00:14:16.004
Now we can finally print, hey,
we're listening on localhost port 8080.

275
00:14:16.004 --> 00:14:19.455
And now we can actually start
to get to the interesting part,

276
00:14:19.455 --> 00:14:21.492
which is processing these things.

