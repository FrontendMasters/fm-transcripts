WEBVTT

1
00:00:00.096 --> 00:00:02.641
&gt;&gt; Richard Feldman: So all of these
exercises are going to have the same exact

2
00:00:02.641 --> 00:00:05.728
format where, basically we have comments,
we have a .c file, and

3
00:00:05.728 --> 00:00:08.507
then we have little comments
that have a little arrow emoji.

4
00:00:08.507 --> 00:00:10.445
And then basically all you have to do for

5
00:00:10.445 --> 00:00:12.754
the exercise is just do
what the comments say.

6
00:00:12.754 --> 00:00:14.614
So I'm going to open
up the first one here.

7
00:00:14.614 --> 00:00:19.215
This is a our first initial
thing here exercise.

8
00:00:19.215 --> 00:00:22.435
So basically, at the very beginning of
each of these exercises, we have, first,

9
00:00:22.435 --> 00:00:23.499
build and run the program.

10
00:00:23.499 --> 00:00:27.069
So make sure you're in the exercises
directory, and then just run this.

11
00:00:27.069 --> 00:00:30.548
So I am, this is my Zed code editor,
if you haven't seen Zed before.

12
00:00:30.548 --> 00:00:31.475
It's awesome.

13
00:00:31.475 --> 00:00:33.251
It's written in Rust,
so it is memory safe.

14
00:00:33.251 --> 00:00:37.821
[LAUGH] So basically,
I'm just gonna cd into exercises.

15
00:00:37.821 --> 00:00:41.032
And now that I'm in exercises,
if we want to just do a little LS,

16
00:00:41.032 --> 00:00:43.594
basically you've got
exercises one through six.

17
00:00:43.594 --> 00:00:48.000
So we have six different sections here,
all of this, 1.c2, .C, etc.

18
00:00:48.000 --> 00:00:50.500
And when you compile them,
which I'm going to do in a second here,

19
00:00:50.500 --> 00:00:53.012
with this command that you can just
copy paste out of the exercise.

20
00:00:53.012 --> 00:00:56.249
It's going to actually generate
a different little binary here,

21
00:00:56.249 --> 00:00:56.953
on your disk.

22
00:00:56.953 --> 00:00:59.442
You can just delete those later
if you want, but his is C.

23
00:00:59.442 --> 00:01:00.807
We compiled the binaries here.

24
00:01:00.807 --> 00:01:06.476
So when I paste this command and
I say gcc-o app1, the -o means output.

25
00:01:06.476 --> 00:01:08.974
So this means output to app1.

26
00:01:08.974 --> 00:01:11.492
If you're on Windows,
well, if you're on Windows,

27
00:01:11.492 --> 00:01:14.516
you should be using Windows Subsystem for
Linux for this course.

28
00:01:14.516 --> 00:01:16.486
But if you were doing Windows programming,

29
00:01:16.486 --> 00:01:19.103
you would actually say
something app1.exe right here.

30
00:01:19.103 --> 00:01:22.073
Then you give it the name of
the source file, which is o1.C, and

31
00:01:22.073 --> 00:01:24.567
then basically because I want
to compile and then run.

32
00:01:24.567 --> 00:01:29.717
I'm telling GCC, which is the well
technically GCC stands for

33
00:01:29.717 --> 00:01:34.284
the Goo C compiler, sorry,
Goo Compiler Collection,

34
00:01:34.284 --> 00:01:37.217
yeah but it's used for C and C++.

35
00:01:37.217 --> 00:01:38.702
It supports both.

36
00:01:38.702 --> 00:01:43.758
And actually on Mac OS, it's funny,
this is actually not using GCC for real.

37
00:01:43.758 --> 00:01:48.109
It's just that GCC is so universal and
so many build scripts rely on it,

38
00:01:48.109 --> 00:01:51.009
that actually Mac OS just
aliases GCC to Clang,

39
00:01:51.009 --> 00:01:53.852
which is the actual
compiler that Mac OS uses.

40
00:01:53.852 --> 00:01:58.209
And the way you can tell this is if you
say GCC dash version, it's, this is Clang,

41
00:01:58.209 --> 00:02:01.277
which is kind of same exact
thing if you say clang-version.

42
00:02:01.277 --> 00:02:04.828
But if you're on Linux or
Windows Subsystem for

43
00:02:04.828 --> 00:02:07.592
Linux, then it's actual real GCC.

44
00:02:07.592 --> 00:02:08.711
So if you do GCC-version,

45
00:02:08.711 --> 00:02:11.641
you're gonna see something different
than what I see on this Mac here.

46
00:02:11.641 --> 00:02:16.440
Anyway, so we're gonna build this and
run it, and hey, it says hello world.

47
00:02:16.440 --> 00:02:18.620
Now I wanna call out your
attention to something that it'll.

48
00:02:18.620 --> 00:02:21.955
It also says, there's this little weirdly
formatted percent thing at the end

49
00:02:21.955 --> 00:02:23.989
here and
this is actually part of the exercise.

50
00:02:23.989 --> 00:02:27.903
So the reason that that's happening is
because we are printing out hello world

51
00:02:27.903 --> 00:02:29.396
without a new line at the end.

52
00:02:29.396 --> 00:02:33.969
And a lot of shells will, if the program
runs and the program does not end in a new

53
00:02:33.969 --> 00:02:38.284
line with its output to standard out,
it prints this special character.

54
00:02:38.284 --> 00:02:41.559
And depending on what Shell you're using
what terminal you're using, you might or

55
00:02:41.559 --> 00:02:44.248
might not see this, or you might
see something slightly different.

56
00:02:44.248 --> 00:02:47.213
But basically, this character is
indicating hey, this program finished, and

57
00:02:47.213 --> 00:02:48.136
they wasn't a new line.

58
00:02:48.136 --> 00:02:50.267
But I'm going to put a new
new line here anyway,

59
00:02:50.267 --> 00:02:53.783
because I don't want to put the prompt
up here, because that'd look weird and

60
00:02:53.783 --> 00:02:56.363
actually, some shells will
just put the prompt up here.

61
00:02:56.363 --> 00:02:58.403
This part will just start right here,

62
00:02:58.403 --> 00:03:01.340
because it's the program
didn't end with a new line.

63
00:03:01.340 --> 00:03:03.788
But it's also quite common for
them to say, hey, just so

64
00:03:03.788 --> 00:03:05.683
you know I'm inserting this new line here.

65
00:03:05.683 --> 00:03:09.010
The program itself did not
actually end in a new line.

66
00:03:09.010 --> 00:03:12.529
So that's one of the things we're gonna
change is we're gonna change this string

67
00:03:12.529 --> 00:03:13.508
to HelloWorld\end.

68
00:03:13.508 --> 00:03:16.488
So we're explicitly going
to add in the new line.

69
00:03:16.488 --> 00:03:18.451
This is one of the things
that Printf will do for you.

70
00:03:18.451 --> 00:03:20.953
So if you do printf, you don't actually
need to put the new line there,

71
00:03:20.953 --> 00:03:22.972
printf will just automatically
add the new line for you.

72
00:03:22.972 --> 00:03:26.669
But write will not, write is, I'm just
gonna give you exactly this string.

73
00:03:26.669 --> 00:03:30.865
I'm gonna send that straight to
standard out, no questions asked.

74
00:03:30.865 --> 00:03:33.772
So we're gonna try changing that,
and of course, when we do that,

75
00:03:33.772 --> 00:03:35.664
we do need to update
the length here to 14.

76
00:03:35.664 --> 00:03:38.645
Because if you keep it at 13, it's only
gonna print out the first 13 characters

77
00:03:38.645 --> 00:03:39.965
and it's Going to skip the new line,

78
00:03:39.965 --> 00:03:42.540
so that won't actually do anything
unless you also change the length.

79
00:03:42.540 --> 00:03:44.962
Then we're going to have some fun.

80
00:03:44.962 --> 00:03:47.882
So the next thing we want to do is
try making the length less than 14.

81
00:03:47.882 --> 00:03:48.799
What happens when you run the program?

82
00:03:48.799 --> 00:03:51.083
You can probably guess it
doesn't print the entire string.

83
00:03:51.083 --> 00:03:54.401
And now try making
the length longer than 14.

84
00:03:54.401 --> 00:03:55.769
You're not going to get a warning,
you're not going to get an error.

85
00:03:55.769 --> 00:03:57.000
You're just going to see what happens.

86
00:03:57.000 --> 00:04:01.148
[LAUGH] Memory safety.

87
00:04:01.148 --> 00:04:04.733
Okay, so try uncommenting the next
two lines as well as the include STDI

88
00:04:04.733 --> 00:04:05.344
at the top.

89
00:04:05.344 --> 00:04:08.497
So this is basically just switching
it over from right to printf and

90
00:04:08.497 --> 00:04:12.007
we're gonna do a little bit of a actually
interpolating a number in here.

91
00:04:12.007 --> 00:04:15.428
And then once you've got that working,
which is just uncommenting that and

92
00:04:15.428 --> 00:04:19.176
then uncommenting up here, then you wanna
try adding a second number named num2.

93
00:04:19.176 --> 00:04:23.991
And pick some other number to do it and
print out both of the numbers.

94
00:04:23.991 --> 00:04:27.858
So when you do that, hint, you will need
to make two changes to printf's arguments.

95
00:04:27.858 --> 00:04:31.244
You won't just need to
change one of the arguments.

96
00:04:31.244 --> 00:04:34.285
And then finally, try having the program
return something other than zero so

97
00:04:34.285 --> 00:04:35.795
you can just sort of see the exit code.

98
00:04:35.795 --> 00:04:36.881
So echo $?,

99
00:04:36.881 --> 00:04:41.874
is what you run in your terminal
to see the output of your program.

100
00:04:41.874 --> 00:04:46.885
So after I do this, and then I do
echo$?at print zero, because that is

101
00:04:46.885 --> 00:04:52.326
the exit code of the last program that
I ran, which was the Hello World thing.

102
00:04:52.326 --> 00:04:55.407
Okay, any questions about the exercises
before we take some time.

103
00:04:55.407 --> 00:04:55.996
Yeah.
&gt;&gt; Speaker 2: So

104
00:04:55.996 --> 00:04:57.668
new line doesn't count as two characters.

105
00:04:57.668 --> 00:04:58.597
It's only one.

106
00:04:58.597 --> 00:05:00.438
&gt;&gt; Richard Feldman: Yes,
that's a great question.

107
00:05:00.438 --> 00:05:04.506
So \n, yes, is the way that we
specify a new line character,

108
00:05:04.506 --> 00:05:07.018
that's two chracter of source code.

109
00:05:07.018 --> 00:05:10.099
But in terms of semantically what's
actually happening in memory here,

110
00:05:10.099 --> 00:05:11.599
it's just one new line character.

111
00:05:11.599 --> 00:05:16.567
So, yeah, what we're counting is semantic
characters not source code characters,

112
00:05:16.567 --> 00:05:18.208
very good question, okay?

113
00:05:18.208 --> 00:05:19.410
Work through the exercises.

114
00:05:23.094 --> 00:05:23.870
&gt;&gt; Richard Feldman: Great.

115
00:05:23.870 --> 00:05:26.796
All right, so
let's go through the exercises here.

116
00:05:26.796 --> 00:05:30.224
We're gonna start by just doing the basic
build and run the program again.

117
00:05:30.224 --> 00:05:32.324
So just to make sure that
everything's working,

118
00:05:32.324 --> 00:05:34.079
hello world with the percent sign there.

119
00:05:34.079 --> 00:05:37.721
So let's get rid of that little
missing trailing new line there.

120
00:05:37.721 --> 00:05:40.073
So to do that I'm just gonna
delete these comments as I go so

121
00:05:40.073 --> 00:05:41.471
we can remember what we've done.

122
00:05:41.471 --> 00:05:44.724
So change the string to hello
world with a new line, and

123
00:05:44.724 --> 00:05:46.646
then change the length to 14.

124
00:05:46.646 --> 00:05:48.138
Okay, great.

125
00:05:48.138 --> 00:05:50.051
And now we just don't see
the percent sign anymore,

126
00:05:50.051 --> 00:05:51.630
because we actually have a new line there.

127
00:05:51.630 --> 00:05:52.542
Awesome.

128
00:05:52.542 --> 00:05:55.775
And now we're gonna make the length
shorter, so we'll make it just 10, so

129
00:05:55.775 --> 00:05:58.426
that's HelloWorld and
then once again, the percent sign is.

130
00:05:58.426 --> 00:06:00.920
Back, because we're not ending
on a new line once again.

131
00:06:00.920 --> 00:06:04.464
And now for the fun part,
let's make it a lot longer.

132
00:06:04.464 --> 00:06:06.195
Boom, so we got hello world.

133
00:06:06.195 --> 00:06:08.957
And what is that stuff?

134
00:06:08.957 --> 00:06:14.210
What this is, is whatever happens to be in
my binary after that string constant of

135
00:06:14.210 --> 00:06:19.873
Hello world, it's literally just spitting
out whatever memory is in my executable.

136
00:06:19.873 --> 00:06:22.312
That's what kind of memory
safety we're dealing with.

137
00:06:22.312 --> 00:06:26.501
If there happened to be a secret there, an
API key, it would heavily print that out,

138
00:06:26.501 --> 00:06:27.155
no problem.

139
00:06:27.155 --> 00:06:30.812
And if you were writing to a log or
doing an HTTP response or something that,

140
00:06:30.812 --> 00:06:34.309
this could just happily send all of
your API key secrets to the end user.

141
00:06:34.309 --> 00:06:34.934
No problem.

142
00:06:34.934 --> 00:06:39.329
If you just got an integer wrong,
if I bump it all the way up to 2000,

143
00:06:39.329 --> 00:06:41.102
we might see the same thing.

144
00:06:41.102 --> 00:06:41.633
Let's see.

145
00:06:41.633 --> 00:06:43.563
Can I get it long enough that.

146
00:06:43.563 --> 00:06:44.810
Yeah, look, we got something else.

147
00:06:44.810 --> 00:06:46.906
Look, there's something else,
more there in memory.

148
00:06:46.906 --> 00:06:48.691
Now, a lot of these things
are not printing anything.

149
00:06:48.691 --> 00:06:51.073
That might just be because
there's nothing printable there.

150
00:06:51.073 --> 00:06:53.085
A lot of these characters are not
printable in the terminal.

151
00:06:53.085 --> 00:06:56.346
Just kind of silently mess that up.

152
00:06:56.346 --> 00:06:57.984
I don't know if it'll let
me make be this long.

153
00:06:57.984 --> 00:06:59.373
Cool.
Yeah, so now we've got lots of memory.

154
00:06:59.373 --> 00:07:00.070
Look at that.

155
00:07:00.070 --> 00:07:02.216
This is all sorts of stuff
that's in my binary, so, yeah.

156
00:07:02.216 --> 00:07:05.540
This is hello world program, really doing
a good job dumping all the secrets.

157
00:07:05.540 --> 00:07:07.985
We can see,
here's the name of our program.

158
00:07:07.985 --> 00:07:10.437
That's in there for some reason.

159
00:07:10.437 --> 00:07:11.742
BOF, I don't know what that is.

160
00:07:11.742 --> 00:07:16.368
There's are all just random 0s and 1s that
are being interpreted by the terminal as

161
00:07:16.368 --> 00:07:20.100
being text, although, obviously
a lot of these are not text Text.

162
00:07:20.100 --> 00:07:26.616
They're just random 1s and 0s, gibberish,
in some cases, white space, whatnot.

163
00:07:26.616 --> 00:07:29.333
Let's see if we can get the program
to crash from doing this.

164
00:07:29.333 --> 00:07:34.057
It's kinda hard just happily
spitting out all this memory.

165
00:07:34.057 --> 00:07:36.561
As you can see the level of
memory safety we're doing, and

166
00:07:36.561 --> 00:07:39.027
we're going to see plenty more
examples of this as we go.

167
00:07:39.027 --> 00:07:41.012
But there was no compiler warnings here.

168
00:07:41.012 --> 00:07:41.543
There's no errors.

169
00:07:41.543 --> 00:07:42.947
There's no nothing.

170
00:07:42.947 --> 00:07:46.021
But if we did use printf,
at least this particular error,

171
00:07:46.021 --> 00:07:47.728
we would not be susceptible to.

172
00:07:47.728 --> 00:07:51.332
This only happened because I was
intentionally using a number other than 14

173
00:07:51.332 --> 00:07:54.714
to demonstrate what happens if you get
your math a little bit wrong when it

174
00:07:54.714 --> 00:07:55.276
comes to C.

175
00:07:55.276 --> 00:07:58.618
And in the next section, we'll talk about
a little bit more about what's going on

176
00:07:58.618 --> 00:08:00.473
under the hood there
that makes this happen.

177
00:08:00.473 --> 00:08:03.744
Okay, so now let's get into
the more ergonomic world.

178
00:08:03.744 --> 00:08:07.291
So if I just uncomment those two lines,
int num=42, then it's going to be, hey,

179
00:08:07.291 --> 00:08:07.943
wait a minute.

180
00:08:07.943 --> 00:08:10.565
Call the undeclared
library function printf.

181
00:08:10.565 --> 00:08:12.764
What's going on with that?

182
00:08:12.764 --> 00:08:17.496
So, okay, I just need to uncomment that
and now we are actually importing that

183
00:08:17.496 --> 00:08:22.395
because this unisted.h is where Write
comes from and printf comes from stduio.

184
00:08:22.395 --> 00:08:27.343
So now if I print this, it's going to say,
hello world, followed by the number is 42.

185
00:08:27.343 --> 00:08:31.852
And if I want to print out a second
number let's say we do you know

186
00:08:31.852 --> 00:08:33.906
num=2 I don't know 45.

187
00:08:33.906 --> 00:08:38.496
Then I can't just do this because if I do
this, then it's gonna be like okay, well,

188
00:08:38.496 --> 00:08:39.993
didn't change anything.

189
00:08:39.993 --> 00:08:42.896
And I also can't do this,
I can't just stick an extra num2 in there.

190
00:08:42.896 --> 00:08:45.678
It's just going to give me a warning of,
hey, wait a minute,

191
00:08:45.678 --> 00:08:47.563
data argument not used by format string.

192
00:08:47.563 --> 00:08:51.063
This is something about the compiler
actually having some awareness of what

193
00:08:51.063 --> 00:08:53.587
printf is because it's part
of the standard library.

194
00:08:53.587 --> 00:08:56.362
So if I run this,
I will get a little warning here, but

195
00:08:56.362 --> 00:08:58.784
it's going to happily
just do the same thing.

196
00:08:58.784 --> 00:09:01.909
Basically the second argument
is going can be totally ignored.

197
00:09:01.909 --> 00:09:06.704
The second number is %d.

198
00:09:06.704 --> 00:09:09.087
I don't need another newline there,
whoops.

199
00:09:09.087 --> 00:09:10.738
Printf will do that for me.

200
00:09:10.738 --> 00:09:13.455
My bad, printf doesn't do that.

201
00:09:13.455 --> 00:09:16.768
I think you print line from Rust,
my mistake.

202
00:09:16.768 --> 00:09:21.259
So yeah, second number is 45, great, and
basically, if I want, I can change this to

203
00:09:21.259 --> 00:09:25.387
be something else, percent s for a string,
and then it's going to complain wait

204
00:09:25.387 --> 00:09:28.754
a minute, wait a minute,
you said this is an int, but it's not.

205
00:09:28.754 --> 00:09:30.762
However, it'll still
actually let me run it.

206
00:09:30.762 --> 00:09:32.360
It just might crash the program.

207
00:09:32.360 --> 00:09:35.341
This is a really fun error
to get in your C code.

208
00:09:35.341 --> 00:09:36.500
Segmentation fault.

209
00:09:36.500 --> 00:09:39.209
You might notice the absence
of a stack trace.

210
00:09:39.209 --> 00:09:41.227
You don't get one if you If
you do a segmentation fault.

211
00:09:41.227 --> 00:09:44.550
Segmentation fault just basically means
your program tried to read memory

212
00:09:44.550 --> 00:09:47.987
that it doesn't have permission to read
according to the operating system.

213
00:09:47.987 --> 00:09:49.977
So dead, end of program.

214
00:09:49.977 --> 00:09:52.021
[LAUGH] This is all you get.

215
00:09:52.021 --> 00:09:55.881
And debugging these is fun
because this means that you have

216
00:09:55.881 --> 00:10:00.623
some error somewhere and you get no
stack trace whatsoever by default.

217
00:10:00.623 --> 00:10:03.575
There are ways that you can try to wrangle
your way into getting one, but usually

218
00:10:03.575 --> 00:10:06.527
the way that you would deal with something
this is you have to fire up a debugger,

219
00:10:06.527 --> 00:10:07.790
hopefully you can reproduce it.

220
00:10:07.790 --> 00:10:11.526
Sometimes these are highs and
bugs that resist being reproduced.

221
00:10:11.526 --> 00:10:12.099
But yeah,

222
00:10:12.099 --> 00:10:16.133
you definitely don't ideally want to
get segfaults if you can avoid them.

223
00:10:16.133 --> 00:10:20.196
So yeah, fortunately, this is actually
one where the compiler warning would have

224
00:10:20.196 --> 00:10:23.981
actually helped us avoid that and told us,
hey, this is the wrong type here.

225
00:10:23.981 --> 00:10:26.573
But you do notice that,
unlike in some other languages,

226
00:10:26.573 --> 00:10:28.363
this is just considered a warning in C.

227
00:10:28.363 --> 00:10:31.399
In most compilers, this would be a tight
mismatch and it would be, yeah, no,

228
00:10:31.399 --> 00:10:32.089
this is an error.

229
00:10:32.089 --> 00:10:34.859
You're trying to use this thing as
a string that's clearly not a string.

230
00:10:34.859 --> 00:10:36.125
Bad things are gonna happen.

231
00:10:36.125 --> 00:10:39.775
C is, no, if you're sure, go ahead.

232
00:10:39.775 --> 00:10:43.434
You can feel free to run the program,
it might segfault or do whatever.

233
00:10:43.434 --> 00:10:46.316
But yeah, even though it knows
it's not going to block you,

234
00:10:46.316 --> 00:10:48.756
it's just going let you go ahead and
do your thing.

235
00:10:48.756 --> 00:10:51.748
Okay, moving on.

236
00:10:51.748 --> 00:10:55.011
Yeah, so we've had two different
numbers and then finally, yeah,

237
00:10:55.011 --> 00:10:58.062
we can just return something other than 0,
we can return 11.

238
00:10:58.062 --> 00:11:01.735
And now if I echo$?, it says 11.

239
00:11:01.735 --> 00:11:04.551
Any questions about the exercise?

240
00:11:04.551 --> 00:11:08.670
&gt;&gt; Speaker 3: I have one that might be
just pedantic with the language itself.

241
00:11:08.670 --> 00:11:12.581
Is it worth anything to
recast an intuit string?

242
00:11:12.581 --> 00:11:13.311
Can you do that?

243
00:11:13.311 --> 00:11:18.977
Are variables mutable in that way or
is the juice not really worth the squeeze?

244
00:11:18.977 --> 00:11:20.868
&gt;&gt; Richard Feldman: Can you recast a,
okay, so

245
00:11:20.868 --> 00:11:23.431
the terminology here is important.

246
00:11:23.431 --> 00:11:28.173
I wouldn't say, well, okay, so certainly
you can recast an integer to a string.

247
00:11:28.173 --> 00:11:31.635
But what that would mean is,
essentially, let's take this integer and

248
00:11:31.635 --> 00:11:35.227
let's pretend that the 1s and
0s in memory that represent that integer.

249
00:11:35.227 --> 00:11:38.250
We're just gonna reinterpret them and
pretend that they're actually the 1s and

250
00:11:38.250 --> 00:11:38.878
0s of a string.

251
00:11:38.878 --> 00:11:42.876
You can do that, and in fact, we actually
are going to do that in this workshop,

252
00:11:42.876 --> 00:11:44.441
that's what C calls casting.

253
00:11:44.441 --> 00:11:46.657
There's a separate thing you can do,
which is converting,

254
00:11:46.657 --> 00:11:49.716
where you're actually gonna say, okay,
I've got an integer and I want a string.

255
00:11:49.716 --> 00:11:53.474
Basically, you just call a function that
says, turn this integer into a string, and

256
00:11:53.474 --> 00:11:54.530
it will do that for you.

257
00:11:54.530 --> 00:11:57.287
So we could do that, but
honestly, idiomatically,

258
00:11:57.287 --> 00:11:59.691
I would just choose to
use Print off to do that.

259
00:11:59.691 --> 00:12:02.807
Because explicitly going out of your
way to convert that is more work than

260
00:12:02.807 --> 00:12:05.789
necessary if this is just what all
you're going to do with it anyway.

261
00:12:05.789 --> 00:12:06.332
&gt;&gt; Speaker 3: Okay.

262
00:12:06.332 --> 00:12:07.193
&gt;&gt; Richard Feldman: Yeah.

263
00:12:07.193 --> 00:12:10.376
&gt;&gt; Speaker 4: When we include something
at the top of the file importing it.

264
00:12:10.376 --> 00:12:10.928
&gt;&gt; Richard Feldman: Yeah.

265
00:12:10.928 --> 00:12:14.619
&gt;&gt; Speaker 4: In C,
are we just including that entire library-

266
00:12:14.619 --> 00:12:15.209
&gt;&gt; Richard Feldman: [LAUGH]

267
00:12:15.209 --> 00:12:16.461
&gt;&gt; Speaker 4: Into our binary-.

268
00:12:16.461 --> 00:12:17.321
&gt;&gt; Richard Feldman: Yeah
&gt;&gt; Speaker 4: Or can we pick

269
00:12:17.321 --> 00:12:18.970
just the right function?

270
00:12:18.970 --> 00:12:22.054
&gt;&gt; Richard Feldman: So we're gonna
talk about this more later, but

271
00:12:22.054 --> 00:12:25.455
literally, what pound
include does is copy paste.

272
00:12:25.455 --> 00:12:29.888
So running this line of code is
exactly the same thing as taking

273
00:12:29.888 --> 00:12:34.253
the contents of stdio.h, and
pasting them into your file.

274
00:12:34.253 --> 00:12:36.737
That's what pound include does.

275
00:12:36.737 --> 00:12:38.507
You might be wondering about,
well, hang on a sec.

276
00:12:38.507 --> 00:12:41.372
What if I have,, that thing which
depends on something else, and

277
00:12:41.372 --> 00:12:43.224
then I also depend on that something else?

278
00:12:43.224 --> 00:12:45.347
Is it going to get pasted multiple times?

279
00:12:45.347 --> 00:12:50.229
The answer is yes, but each of these
files that I'm depending on does have

280
00:12:50.229 --> 00:12:55.604
a little bit of logic that uses different
preprocessor macros to basically say.

281
00:12:55.604 --> 00:13:00.546
Don't include myself semantically twice,
even though the text is included twice.

282
00:13:00.546 --> 00:13:04.701
One of the things that the designers of
Go wanted to do better based on their

283
00:13:04.701 --> 00:13:07.794
experiences with C,
which some of them co-created.

284
00:13:07.794 --> 00:13:11.060
Was that they wanted to basically
do a better job with imports and

285
00:13:11.060 --> 00:13:14.026
stuff that to make it more of
a first class semantic thing so

286
00:13:14.026 --> 00:13:16.886
you can make some of
the ergonomics around this better.

287
00:13:16.886 --> 00:13:19.180
This is actually one
of the reasons that C,

288
00:13:19.180 --> 00:13:23.026
especially C++ have worse compile
times than they otherwise would.

289
00:13:23.026 --> 00:13:25.885
Is just,
the semantics of how include work.

290
00:13:25.885 --> 00:13:28.589
I did want to mention, I think,
in the previous question,

291
00:13:28.589 --> 00:13:32.124
I didn't address one implication of
something you're asking, which was.

292
00:13:32.124 --> 00:13:35.772
What happens if there's 100
different functions in std.io, .h,

293
00:13:35.772 --> 00:13:38.902
but I'm only using one of them,
what happens the other ones?

294
00:13:38.902 --> 00:13:41.958
The C compiler actually
doesn't deal with that.

295
00:13:41.958 --> 00:13:45.293
But basically there's a step
after compilation called linking,

296
00:13:45.293 --> 00:13:49.042
which we're not really going to cover
in this course because when I do GCC,

297
00:13:49.042 --> 00:13:51.862
it automatically takes care
of doing that separately.

298
00:13:51.862 --> 00:13:55.481
But basically what linking does is it
deals with after you've compiled your

299
00:13:55.481 --> 00:13:58.773
source code into the binary executable,
there's this extra step.

300
00:13:58.773 --> 00:14:03.372
That works on wiring in certain different
dependencies and doing some other things.

301
00:14:03.372 --> 00:14:07.218
One of the things that can do is it can
do an analysis of the different sections,

302
00:14:07.218 --> 00:14:09.748
you remember we had those labels LC0 and
whatnot.

303
00:14:09.748 --> 00:14:13.261
There's also labels dot,
main for the main function.

304
00:14:13.261 --> 00:14:16.065
And one of the things that can
do is it can go look for, okay,

305
00:14:16.065 --> 00:14:19.226
do we ever actually jump into this
section at all, anywhere ever?

306
00:14:19.226 --> 00:14:23.283
If not just go ahead and delete it, so
it'll just garbage collect those sections

307
00:14:23.283 --> 00:14:25.680
as long as things
are organized into sections.

308
00:14:25.680 --> 00:14:27.354
So typically,
that's how that sort of thing is done.

309
00:14:27.354 --> 00:14:31.162
Is, at the source code level, it is just
copy pasted in the C compiler takes all of

310
00:14:31.162 --> 00:14:33.920
it, spits out a binary that's
bigger than it needs to be.

311
00:14:33.920 --> 00:14:37.177
And then later, the linker will garbage
collect the different sections of

312
00:14:37.177 --> 00:14:39.203
the binary to get rid of
the unused functions.

