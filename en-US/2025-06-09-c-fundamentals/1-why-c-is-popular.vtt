WEBVTT

1
00:00:00.000 --> 00:00:01.522
&gt;&gt; Richard Feldman: So
why is C still popular?

2
00:00:01.522 --> 00:00:04.474
So, I mean,
the main number one reason is just,

3
00:00:04.474 --> 00:00:08.012
it gives you access to
the maximum possible performance.

4
00:00:08.012 --> 00:00:11.417
This is really because it's
really zero-overhead programming.

5
00:00:11.417 --> 00:00:16.204
It's the ability to get down as close to
the metal as the operating system will

6
00:00:16.204 --> 00:00:20.049
let you, just shy of micromanaging
registers and Assembly.

7
00:00:20.049 --> 00:00:23.399
And not because it does
amazing optimizations,

8
00:00:23.399 --> 00:00:25.859
although it does lots of those two.

9
00:00:25.859 --> 00:00:29.566
It is much more ergonomic than Assembly,
if you've ever tried writing

10
00:00:29.566 --> 00:00:32.678
an Assembly program by hand,
I don't recommend it [LAUGH].

11
00:00:32.678 --> 00:00:37.013
It's an exercise in, well,
it's a learning experience, I'll say that.

12
00:00:37.013 --> 00:00:37.910
And of course,

13
00:00:37.910 --> 00:00:42.190
although C++ was designed to be in
many ways an improvement over C++.

14
00:00:42.190 --> 00:00:44.272
C++ is extraordinarily complicated and

15
00:00:44.272 --> 00:00:47.171
the compile times are massively
longer than they are for C.

16
00:00:47.171 --> 00:00:50.088
So, C is still popular even
in a world where C++ exists,

17
00:00:50.088 --> 00:00:53.131
even though C++ was designed
to be the improvement over C.

18
00:00:53.131 --> 00:00:57.572
Because C++ added so much complexity and
so much longer compile times that a lot of

19
00:00:57.572 --> 00:01:00.632
people are like, yeah,
I know C and C++ and I prefer C.

20
00:01:00.632 --> 00:01:05.098
One really direct example of what C gets
you in terms of performance is what I'm

21
00:01:05.098 --> 00:01:08.292
gonna call the Local Static
HTTP Server Perf Olympics.

22
00:01:08.292 --> 00:01:09.987
This is not a real competition.

23
00:01:09.987 --> 00:01:14.063
This is very unscientific, and it was
done by me very quickly by measuring some

24
00:01:14.063 --> 00:01:15.856
different static HTTP servers and

25
00:01:15.856 --> 00:01:19.157
just loading up a download of
the FrontendMaster's website.

26
00:01:19.157 --> 00:01:22.350
And seeing how fast they were
able to load it into the browser.

27
00:01:22.350 --> 00:01:24.924
Very unscientific, but
also a little bit of fun.

28
00:01:24.924 --> 00:01:28.382
So in third place with the bronze,
we had Node.js.

29
00:01:28.382 --> 00:01:30.801
So this is Node's HTTP server package.

30
00:01:30.801 --> 00:01:33.938
This has about 2.3 million weekly
downloads, it's extremely popular.

31
00:01:33.938 --> 00:01:39.062
It's the most popular way to do a static
HTTP server in the Node.js ecosystem.

32
00:01:39.062 --> 00:01:41.762
In second place with the silver medal,
we have Rust,

33
00:01:41.762 --> 00:01:44.711
Rust's most popular alternative
is simple HTTP server.

34
00:01:44.711 --> 00:01:49.367
Rust's much smaller ecosystem than
Node.js, only 52,000 all-time downloads,

35
00:01:49.367 --> 00:01:50.340
let alone weekly.

36
00:01:50.340 --> 00:01:52.946
And then in first place
with the gold medal,

37
00:01:52.946 --> 00:01:57.251
the fastest local HTTP server among
the ones that I tried is written in C.

38
00:01:57.251 --> 00:02:00.914
And it is the about 300 lines of C code
we write in this workshop with only

39
00:02:00.914 --> 00:02:04.299
the standard library and
no third party dependencies whatsoever.

40
00:02:04.299 --> 00:02:07.722
So this is kind of an example
of why C is still popular.

41
00:02:07.722 --> 00:02:08.637
I mean, granted,

42
00:02:08.637 --> 00:02:12.028
we're not talking about blisteringly
[LAUGH] fast differences here.

43
00:02:12.028 --> 00:02:16.406
It's like, all of these are about under
ten milliseconds of response time to like

44
00:02:16.406 --> 00:02:18.760
load all the different assets statically.

45
00:02:18.760 --> 00:02:21.677
But nevertheless,
it is the case that pretty consistently,

46
00:02:21.677 --> 00:02:25.153
you can see that even though we're not
really like, I didn't sit down and

47
00:02:25.153 --> 00:02:28.823
benchmark this, other than this silly
little performance Olympics thing.

48
00:02:28.823 --> 00:02:32.689
I didn't sit down and
performance optimize the C thing.

49
00:02:32.689 --> 00:02:36.040
These are very mature,
well written, well established,

50
00:02:36.040 --> 00:02:39.602
designed to be high performance
HTTP servers written in Rust.

51
00:02:39.602 --> 00:02:42.847
Which has a reputation for Being a very
fast language, and Node js, which,

52
00:02:42.847 --> 00:02:44.937
granted, has a lot more
overhead than rust or C.

53
00:02:44.937 --> 00:02:49.679
And still, just this example that I just
made for this workshop, just by doing some

54
00:02:49.679 --> 00:02:53.902
basic bread and butter, just do things
the way that kind of C encourages.

55
00:02:53.902 --> 00:02:57.386
We're able to get really, really fast
performance just because C is just really,

56
00:02:57.386 --> 00:02:59.946
really not adding anything,
even compared to Rust, yeah.

57
00:02:59.946 --> 00:03:04.266
&gt;&gt; Speaker 2: Is it Node relying
on C++ anyway as well to do that?

58
00:03:04.266 --> 00:03:06.441
&gt;&gt; Richard Feldman: Yeah,
so Node, under the hood,

59
00:03:06.441 --> 00:03:11.196
certainly the Node runtime is gonna be V8,
and V8 is written in C++.

60
00:03:11.196 --> 00:03:15.130
It's multiple millions of lines [LAUGH] of
C++ code, and billions, it takes forever.

61
00:03:15.130 --> 00:03:19.927
But yes, so when you're running your Node
HTTP server, you are definitely executing

62
00:03:19.927 --> 00:03:24.738
a lot of code that was written in C++,
nearly the JavaScript Virtual Machine, V8.

63
00:03:24.738 --> 00:03:30.384
Yeah, [LAUGH] and nevertheless,
[LAUGH] here we are.

64
00:03:30.384 --> 00:03:34.689
Cool, I do wanna mention there
are some low overhead C alternatives.

65
00:03:34.689 --> 00:03:36.339
We're not gonna get into
them in this course, but

66
00:03:36.339 --> 00:03:37.448
I do wanna at least mention them.

67
00:03:37.448 --> 00:03:41.515
So C++, of course, is like definitely the
most popular of these, very, very complex.

68
00:03:41.515 --> 00:03:44.645
It's absolutely huge, especially in the
game dev space, but not just in game dev.

69
00:03:44.645 --> 00:03:48.142
But if you wanna be a professional
game developer, there is an extremely

70
00:03:48.142 --> 00:03:51.582
high percentage chance that you're
either going to be writing C++ or

71
00:03:51.582 --> 00:03:53.785
at least building on
a large C++ code base.

72
00:03:53.785 --> 00:03:57.530
Rust, definitely a very popular
alternative that's increasing in

73
00:03:57.530 --> 00:03:58.571
popularity a lot.

74
00:03:58.571 --> 00:04:03.263
Nowhere near C++ levels of popularity,
but Zed, like the code editor that

75
00:04:03.263 --> 00:04:07.757
I work on at work, Biome, which is
the successor to Roam written in Rust.

76
00:04:07.757 --> 00:04:10.148
That's like a JavaScript ecosystem thing.

77
00:04:10.148 --> 00:04:14.447
Ripgrep, really popular,
like grep alternative at the command line.

78
00:04:14.447 --> 00:04:18.020
I have a course on FrontendMasters about
that if you wanna learn how to do Rust.

79
00:04:18.020 --> 00:04:21.220
Zig, also very nice language,
you might go see the terminal

80
00:04:21.220 --> 00:04:25.881
emulator bond in the JavaScript ecosystem,
you might've heard of tiger beetle rock.

81
00:04:25.881 --> 00:04:30.527
The programming language I'm making is in
the process as we speak of rewriting our

82
00:04:30.527 --> 00:04:32.088
compiler from rust to Zig.

83
00:04:32.088 --> 00:04:35.659
And there's plenty of other,
this is like D, Odin, JAI, Carbon,

84
00:04:35.659 --> 00:04:40.032
lots of different languages are trying to
say, hey, C has so many nice properties,

85
00:04:40.032 --> 00:04:43.130
but the ergonomics,
there's just some problems with it.

86
00:04:43.130 --> 00:04:46.579
It doesn't feel like a modern language
because it's like half a century old.

87
00:04:46.579 --> 00:04:48.383
And people are trying to modernize it,

88
00:04:48.383 --> 00:04:52.222
hopefully without sacrificing the things
that make it popular in the first place.

89
00:04:52.222 --> 00:04:57.157
Okay, all of these low overhead C
alternatives definitely support C interop.

90
00:04:57.157 --> 00:05:01.916
So, not just languages that are trying to
be C alternatives, but also like we said,

91
00:05:01.916 --> 00:05:05.537
Node.js and others, really,
C interop is almost universal,

92
00:05:05.537 --> 00:05:09.918
because C is like the language that other
languages use to talk to each other.

93
00:05:09.918 --> 00:05:12.896
All things considered, I would say that,
today, in this day and age,

94
00:05:12.896 --> 00:05:15.047
C is the most universal
language that you can know.

95
00:05:15.047 --> 00:05:18.471
If you only wanted to learn one
programming language and you wanted to

96
00:05:18.471 --> 00:05:22.544
know one that will give you the ability to
write code and have it interact with every

97
00:05:22.544 --> 00:05:25.752
other programming language out there,
C is that one language.

98
00:05:25.752 --> 00:05:27.592
And today, we're gonna learn it.

99
00:05:27.592 --> 00:05:30.502
I also wanted to mention very briefly,
so you might see

100
00:05:30.502 --> 00:05:34.993
in the exercises we talk about, it says,
hey, please use either MacOS or Linux, or

101
00:05:34.993 --> 00:05:38.118
if you're on Windows,
use Windows Subsystem for Linux.

102
00:05:38.118 --> 00:05:41.160
I wanted to just briefly mention
why we're doing it that way.

103
00:05:41.160 --> 00:05:45.736
Essentially, we are using in this
course some OS-specific APIs, and

104
00:05:45.736 --> 00:05:50.313
Windows basically just has a totally
different set of APIs for things,

105
00:05:50.313 --> 00:05:54.988
like MacOS and Linux and BSD, BSD,
sorry, MacOS being a flavor of BSD.

106
00:05:54.988 --> 00:05:58.216
These are all different UNIX
derivatives and they all use POSIX,

107
00:05:58.216 --> 00:06:00.397
which is sort of the standard for
UNIX APIs.

108
00:06:00.397 --> 00:06:05.071
Which means that, we can have the code in
the exercises work across all of these.

109
00:06:05.071 --> 00:06:08.475
If we wanted the code in these exercises
to work across Windows, I would have to

110
00:06:08.475 --> 00:06:12.191
do two separate versions of every exercise
and explain the differences between every

111
00:06:12.191 --> 00:06:14.994
single one, and it would just
make everything take way longer.

112
00:06:14.994 --> 00:06:16.699
Fortunately, Windows subsystem for

113
00:06:16.699 --> 00:06:19.903
Linux also supports these POSIX APIs
because it's just a Linux build.

114
00:06:19.903 --> 00:06:21.718
So, basically, I was like, okay,

115
00:06:21.718 --> 00:06:25.424
the windows specific APIs which I have
used are often very, very similar.

116
00:06:25.424 --> 00:06:28.672
So if you go through this course and learn
all this stuff, and then you're like, but

117
00:06:28.672 --> 00:06:31.479
I want to do dedicated Windows
programming, maybe for game development or

118
00:06:31.479 --> 00:06:32.346
something like that.

119
00:06:32.346 --> 00:06:35.369
And I wanna learn the Windows APIs,
I think you'll find that the names

120
00:06:35.369 --> 00:06:38.755
are different, the arguments are slightly
different, but fundamentally,

121
00:06:38.755 --> 00:06:41.697
the concepts here are gonna translate
very, very well to Windows.

122
00:06:41.697 --> 00:06:44.397
It's just gonna be the names and
stuff are just a little bit different.

123
00:06:44.397 --> 00:06:47.559
So you're not missing out on a lot
because we're not doing it in Windows,

124
00:06:47.559 --> 00:06:49.498
but mainly it's gonna
be a big time savings.

