WEBVTT

1
00:00:00.000 --> 00:00:02.530
&gt;&gt; Richard Feldman: Which brings
us to actual HTTP responses.

2
00:00:02.530 --> 00:00:06.307
So now that we learned all the fundations
of what we need to build an HTTP response,

3
00:00:06.307 --> 00:00:07.637
let's actually build one.

4
00:00:07.637 --> 00:00:14.188
So let's say that I wanna hit
https://frontendmasters.com.

5
00:00:14.188 --> 00:00:18.877
What's going to come back from that
server, the server is going to send back

6
00:00:18.877 --> 00:00:22.705
a response that begins with
a string HTTP/1.1 200 OK.

7
00:00:22.705 --> 00:00:25.334
I'm assuming that we're
using the HTTP/1.1 protocol,

8
00:00:25.334 --> 00:00:27.010
which is extremely widely supported.

9
00:00:27.010 --> 00:00:28.822
HTTP/2 is much fancier.

10
00:00:28.822 --> 00:00:31.545
We are not gonna support HTTP/2 in
our static web server, number one,

11
00:00:31.545 --> 00:00:32.578
because we don't need to.

12
00:00:32.578 --> 00:00:34.871
And number two,
because it's way more complicated and

13
00:00:34.871 --> 00:00:36.299
would take way longer to explain.

14
00:00:36.299 --> 00:00:39.134
So we're just gonna stick
with classic HTTP/1.1.

15
00:00:39.134 --> 00:00:41.542
The next thing it's gonna do is
it's gonna have a blank line.

16
00:00:41.542 --> 00:00:44.513
And then it's gonna say doctype html,
blah, blah, blah,

17
00:00:44.513 --> 00:00:47.443
basically the entire context
of the index side html there.

18
00:00:47.443 --> 00:00:49.191
This is literally what
comes back from the server.

19
00:00:49.191 --> 00:00:51.560
It's this string, new line, this string.

20
00:00:51.560 --> 00:00:53.701
It's all one gigantic string, that's it.

21
00:00:53.701 --> 00:00:57.642
It's not JSON or anything like that,
it's just this format.

22
00:00:57.642 --> 00:01:00.272
If we were to represent
this header right here,

23
00:01:00.272 --> 00:01:04.939
HTTP/1.1 200 OK in bytes in memory,
again, it would be like, okay, well,

24
00:01:04.939 --> 00:01:09.718
H is 72 in ASCII, which means it's also
in UTF-8, which is what web servers use.

25
00:01:09.718 --> 00:01:12.065
T is 84, P is 80, blah,
blah, blah, blah, blah.

26
00:01:12.065 --> 00:01:13.469
These correspond to 1s and 0s.

27
00:01:13.469 --> 00:01:16.980
And then there's gonna be
an extra 0 at the end here.

28
00:01:16.980 --> 00:01:21.056
Now, when I say the extra 0 at the end,
what I mean is that it's the byte 0.

29
00:01:21.056 --> 00:01:25.116
It's not one of these 0s,
cuz these 0s are actually 48,

30
00:01:25.116 --> 00:01:27.910
0 in ASCII/UTF-8 is the number 48.

31
00:01:27.910 --> 00:01:30.019
But what I mean is the actual byte is 0.

32
00:01:30.019 --> 00:01:32.540
This is what's called a null terminator.

33
00:01:32.540 --> 00:01:34.431
And basically, what it means,

34
00:01:34.431 --> 00:01:37.873
is that it's what C strings use
to mark the end of a string.

35
00:01:37.873 --> 00:01:42.043
So I can just give that memory
address to whatever function I want.

36
00:01:42.043 --> 00:01:44.539
And if that function wants to know,
conceptually, where does that string end,

37
00:01:44.539 --> 00:01:46.682
it can just keep reading, reading,
reading, reading, reading.

38
00:01:46.682 --> 00:01:49.257
And then as soon as it hits the 0,
it knows, I found the end of the string,

39
00:01:49.257 --> 00:01:50.483
that's where it's supposed to be.

40
00:01:50.483 --> 00:01:54.169
And it's a way that you can have your
functions work just in terms of the memory

41
00:01:54.169 --> 00:01:57.798
address here, without needing to also
separately pass around the length of

42
00:01:57.798 --> 00:02:01.337
the string, like write took the explicit
length as a separate argument.

43
00:02:01.337 --> 00:02:05.974
But it's a way that the function can
sort of figure that out for itself.

44
00:02:05.974 --> 00:02:08.200
If we wanted to name this and
give it to a variable,

45
00:02:08.200 --> 00:02:09.742
this is the type that we would get.

46
00:02:09.742 --> 00:02:13.105
[LAUGH] It's short for character.

47
00:02:13.105 --> 00:02:15.606
Some people call it car,
because it's C-H-A-R,

48
00:02:15.606 --> 00:02:17.449
looks like it might be pronounced car.

49
00:02:17.449 --> 00:02:19.221
Some people will call it char.

50
00:02:19.221 --> 00:02:24.492
Character is like, maybe you could call
it care, but I don't hear that as much.

51
00:02:24.492 --> 00:02:27.028
I usually hear either char or car.

52
00:02:27.028 --> 00:02:31.012
I guess I've heard care before, but
I personally always say char star,

53
00:02:31.012 --> 00:02:32.130
because it rhymes.

54
00:02:32.130 --> 00:02:34.381
But whatever,
you can pronounce this however you want.

55
00:02:34.381 --> 00:02:37.661
But char basically means byte.

56
00:02:37.661 --> 00:02:41.754
For historical reasons, 1972, they called
it char for character, even though in

57
00:02:41.754 --> 00:02:45.375
Unicode terms it doesn't actually
necessarily correspond to a character.

58
00:02:45.375 --> 00:02:49.025
And then the star there basically
means the memory address.

59
00:02:49.025 --> 00:02:52.420
So this thing right here, again,
it's 1972 design decisions,

60
00:02:52.420 --> 00:02:56.170
they decided to make the star be next to
the word rather than next to the thing.

61
00:02:56.170 --> 00:02:58.970
This is actually the type of header,
is like the char and

62
00:02:58.970 --> 00:03:01.183
the star both are part
of the type of header.

63
00:03:01.183 --> 00:03:05.060
And what this is saying is basically,
this is the address of a byte, or

64
00:03:05.060 --> 00:03:07.714
you might hear people say
the pointer to a byte.

65
00:03:07.714 --> 00:03:10.487
So char means byte, basically, and

66
00:03:10.487 --> 00:03:15.317
the star means it's not that header
itself is a single byte, but

67
00:03:15.317 --> 00:03:21.139
rather that header is the memory address
of the this initial byte right here.

68
00:03:21.139 --> 00:03:25.235
And yeah, basically, so in memory, if you
were to look at the 1s and 0s in memory,

69
00:03:25.235 --> 00:03:27.511
this right here would
actually be an integer.

70
00:03:27.511 --> 00:03:31.501
It would be the actual memory address
of the beginning of this string,

71
00:03:31.501 --> 00:03:34.014
because that's what like char star means.

72
00:03:34.014 --> 00:03:37.870
It means the address of a particular byte,
namely the first byte of this string.

73
00:03:37.870 --> 00:03:41.225
So in memory,
that's what we would see right here.

74
00:03:41.225 --> 00:03:46.065
So when I call write, passing one and this
header, if I wanted to do it this way,

75
00:03:46.065 --> 00:03:50.572
like previously, we had the Hello World,
we had the actual string here.

76
00:03:50.572 --> 00:03:53.419
But if I wanted to just pass
in this variable instead,

77
00:03:53.419 --> 00:03:57.408
what would actually be happening at
runtime is that this integer is gonna be

78
00:03:57.408 --> 00:03:59.968
passed in here cuz write
takes three integers.

79
00:03:59.968 --> 00:04:04.001
If I didn't wanna hard code the 15 here,
which is a totally reasonable thing,

80
00:04:04.001 --> 00:04:05.618
I can call the strlen function.

81
00:04:05.618 --> 00:04:08.566
That will basically go, it takes the
header, which is, again, an integer, and

82
00:04:08.566 --> 00:04:10.958
it walks through the array just boop,
boop, boop, boop, boop,

83
00:04:10.958 --> 00:04:13.656
until it finds one of these 0 bytes and
it's like, that's the end.

84
00:04:13.656 --> 00:04:16.465
However many we pass along the way,
that's the length of the string.

85
00:04:16.465 --> 00:04:20.468
Now, obviously, that's pretty inefficient,
walking through the entire every single

86
00:04:20.468 --> 00:04:23.167
byte in the string just to count
up the total number of bytes.

87
00:04:23.167 --> 00:04:28.540
But basically,
that is essentially what strlen is doing.

88
00:04:28.540 --> 00:04:33.006
Fortunately, optimizations will mean that
if you're calling strlen on a hard coded

89
00:04:33.006 --> 00:04:35.548
thing like this, where this,
at compile time,

90
00:04:35.548 --> 00:04:37.673
is gonna get translated to this number.

91
00:04:37.673 --> 00:04:40.362
And then the optimizer can say,
well, wait a minute,

92
00:04:40.362 --> 00:04:43.480
I know that this is just working
on a hardcoded memory address.

93
00:04:43.480 --> 00:04:45.170
I'm just gonna optimize that away for you.

94
00:04:45.170 --> 00:04:47.644
You're not actually gonna
pay a runtime cost for this.

95
00:04:47.644 --> 00:04:50.733
But if you're doing this based on
something dynamic that's coming in

96
00:04:50.733 --> 00:04:52.198
from the user and not hardcoded,

97
00:04:52.198 --> 00:04:55.724
then you actually are paying for walking
through the entire string at runtime.

98
00:04:55.724 --> 00:05:00.031
Another way you can see this happen is,
instead of saying char star,

99
00:05:00.031 --> 00:05:03.389
you can say this basically
is the symbol for an array.

100
00:05:03.389 --> 00:05:07.722
This is another thing you can do,
is basically define it to be this way.

101
00:05:07.722 --> 00:05:12.441
And this allows you to actually literally
put the address there if you want.

102
00:05:12.441 --> 00:05:14.138
Not saying you should do it that way.

103
00:05:14.138 --> 00:05:17.142
Probably the way that you should
do it is with the char * style.

104
00:05:17.142 --> 00:05:18.918
We're gonna talk a little
bit more about arrays later.

105
00:05:18.918 --> 00:05:23.048
But basically, just sort of be aware,
if you do see this square bracket syntax,

106
00:05:23.048 --> 00:05:25.965
it essentially means this is
an array of unknown length,

107
00:05:25.965 --> 00:05:28.852
which works out at runtime to
be exactly the same thing.

108
00:05:28.852 --> 00:05:33.905
It's an integer representing the memory
address of the beginning of that array.

109
00:05:33.905 --> 00:05:37.564
So both of these two
are essentially equivalent.

110
00:05:37.564 --> 00:05:41.737
Okay, and yeah,
the memory addresses of these, once again,

111
00:05:41.737 --> 00:05:45.453
will just sort of increase monotonically,
like that.

112
00:05:45.453 --> 00:05:49.483
Okay, so, yeah, yeah.

113
00:05:49.483 --> 00:05:51.115
So the 0 at the end here, the 0 byte,

114
00:05:51.115 --> 00:05:53.682
this is what's referred to
as a NULL-terminated string.

115
00:05:53.682 --> 00:05:58.938
So NULL meaning 0 in this case, not to be
confused with null in JavaScript sense,

116
00:05:58.938 --> 00:06:01.082
which is its own semantic thing.

117
00:06:01.082 --> 00:06:05.161
Here NULL just means 0 byte,
as opposed to 0 character.

118
00:06:05.161 --> 00:06:09.741
So NULL-terminated just means this is
a string that has a 0 byte at the very

119
00:06:09.741 --> 00:06:10.404
end of it.

120
00:06:10.404 --> 00:06:14.014
And yeah, you might be saying,
isn't strlen incredibly slow for

121
00:06:14.014 --> 00:06:15.051
something like C?

122
00:06:15.051 --> 00:06:18.165
Well, yes, so
why don't you destroy the length up front?

123
00:06:18.165 --> 00:06:21.699
Then you wouldn't have to deal
with this fancy like, well,

124
00:06:21.699 --> 00:06:25.516
performance optimization only works
if it's known at compile time.

125
00:06:25.516 --> 00:06:28.789
At runtime, if we got this value and
the string came in from a user,

126
00:06:28.789 --> 00:06:31.079
then we'd have to march
over the whole thing.

127
00:06:31.079 --> 00:06:35.633
Yeah, it would be more efficient in terms
of getting the length of a string to store

128
00:06:35.633 --> 00:06:36.827
the length up front.

129
00:06:36.827 --> 00:06:39.669
But again, you've got to remember,
1972 design decisions, right?

130
00:06:39.669 --> 00:06:43.782
When you're this limited on memory, it
can potentially make sense to say, well,

131
00:06:43.782 --> 00:06:47.779
instead of storing a 32 or 64 bit length
with every single string that you're

132
00:06:47.779 --> 00:06:50.463
passing around,
maybe we wanna just store one byte.

133
00:06:50.463 --> 00:06:53.558
And yeah, it's gonna take longer to
traverse the string to ask about its

134
00:06:53.558 --> 00:06:54.073
length is.

135
00:06:54.073 --> 00:06:59.003
But at least you are reducing your overall
memory usage compared to passing around

136
00:06:59.003 --> 00:07:03.086
the length every single time, or
storing it alongside the string.

137
00:07:03.086 --> 00:07:06.532
So it's sort of like
pre-computing the length.

138
00:07:06.532 --> 00:07:10.453
Having said that, I also have heard people
say that even in 1972 this was the wrong

139
00:07:10.453 --> 00:07:14.273
trade off to make, but I wasn't there, I
wasn't even born yet, so who am I to say?

140
00:07:14.273 --> 00:07:16.062
But that's kind of the reasoning for this.

141
00:07:16.062 --> 00:07:19.613
When you encounter C APIs in the wild,
even the node, JSC API,

142
00:07:19.613 --> 00:07:24.043
it's still doing stuff like expecting
NULL-terminated strings and stuff.

143
00:07:24.043 --> 00:07:28.637
So even though this design decision hasn't
really aged very well in terms of what's

144
00:07:28.637 --> 00:07:32.145
performant in a good trade off in
terms of CPU cycles and memory.

145
00:07:32.145 --> 00:07:36.645
It's still like a whole lot of C APIs
will use NULL-terminated strings and say,

146
00:07:36.645 --> 00:07:39.836
you gotta give me a NULL-terminated
string right here.

147
00:07:39.836 --> 00:07:43.920
Okay, yes, but at least in this case,
where we're using static hard coded thing,

148
00:07:43.920 --> 00:07:45.715
at least it will get optimized away.

149
00:07:45.715 --> 00:07:48.193
So that will just become a 15.

150
00:07:48.193 --> 00:07:53.204
Okay, so to sort of like flesh out the
rest of this example, the import unistd.h

151
00:07:53.204 --> 00:07:57.773
for the right, we also need to include
string.h if we wanna call strlen,

152
00:07:57.773 --> 00:08:01.776
because that's not available
unless you import that library.

153
00:08:01.776 --> 00:08:06.433
And finally, we can basically say, okay,
here's our int main, and then return 0.

154
00:08:06.433 --> 00:08:11.476
And now, instead of Hello World,
we basically have HTTP/1.1 200 OK.

155
00:08:11.476 --> 00:08:16.775
If we wanna do a little bit fancier and
use the printf formatting here, we can do

156
00:08:16.775 --> 00:08:22.339
%s, which we talked about a little bit
in the previous section, instead of %d.

157
00:08:22.339 --> 00:08:25.570
Worth noting though that, again,
remember, this is a number, right?

158
00:08:25.570 --> 00:08:29.600
At runtime, this right here is the memory
address of the beginning of this string.

159
00:08:29.600 --> 00:08:34.123
Which means that %s is just going to be
like, okay, I assume that this number that

160
00:08:34.123 --> 00:08:38.138
you're giving me is the memory address
of the beginning of that string.

161
00:08:38.138 --> 00:08:40.493
How does it know where
the end of the string is?

162
00:08:40.493 --> 00:08:41.710
Again, it expects it
to be NULL-terminated.

163
00:08:41.710 --> 00:08:45.330
So what printf is gonna do is it's
gonna say, okay, %s means literally,

164
00:08:45.330 --> 00:08:49.238
take this memory address, start traversing
it, and start sending the bytes one

165
00:08:49.238 --> 00:08:52.823
at a time to standard out until I get
to a 0 byte, at which point I'm done.

166
00:08:52.823 --> 00:08:57.018
And that's the end of that string,
and that's what %s does in printf.

167
00:08:57.018 --> 00:08:58.844
As we saw earlier, write doesn't do that.

168
00:08:58.844 --> 00:09:02.351
So this is one of the conveniences
that printf does for you,

169
00:09:02.351 --> 00:09:04.175
being a wrapper around write,

170
00:09:04.175 --> 00:09:08.540
is it the %s will do that NULL-terminated
aware byte traversal for you.

171
00:09:08.540 --> 00:09:12.915
And then, yeah, if you wanna print it as a
32-bit integer, you can do that, as we saw

172
00:09:12.915 --> 00:09:17.175
the exercises, but that's just gonna show
you what is the actual memory address, or

173
00:09:17.175 --> 00:09:19.040
at least the first 32-bits of it.

174
00:09:19.040 --> 00:09:23.418
If you wanna print the entire memory
address, I don't know why, I'm sure

175
00:09:23.418 --> 00:09:28.303
there's some reason that it's zud instead
of d to print it as a 64-bit integer.

176
00:09:28.303 --> 00:09:30.549
But this being a 64-bit laptop, and

177
00:09:30.549 --> 00:09:34.837
pretty much every machine that everyone
in this course is gonna use is gonna

178
00:09:34.837 --> 00:09:38.598
be on a 64-bit machine,
this is gonna be a 64-bit integer.

179
00:09:38.598 --> 00:09:42.205
So if you wanna literally see
what is the actual runtime,

180
00:09:42.205 --> 00:09:46.881
the actual memory address that's being
sent to printf, you can do that.

181
00:09:46.881 --> 00:09:49.709
And if you do it like this,
it's gonna be like, cool, here it is,

182
00:09:49.709 --> 00:09:50.678
here is that integer.

183
00:09:50.678 --> 00:09:53.871
Again, memory is basically
a gigantic array of bytes.

184
00:09:53.871 --> 00:09:54.927
And if you want,

185
00:09:54.927 --> 00:09:59.392
C will let you see what is the actual
index into that memory at runtime.

186
00:09:59.392 --> 00:10:03.226
Cool, all right, so,
summary of all the things we talked about.

187
00:10:03.226 --> 00:10:06.684
We talked about numbers in memory,
like the the actual 0s and 1s and

188
00:10:06.684 --> 00:10:08.599
how we can interpret them ourselves.

189
00:10:08.599 --> 00:10:12.359
The critical takeaway there was that we
get to decide how memory is interpreted.

190
00:10:12.359 --> 00:10:15.546
As we saw in that very last example there,

191
00:10:15.546 --> 00:10:20.751
you can decide that the giant array
of bytes in memory is 1s and 0s.

192
00:10:20.751 --> 00:10:25.028
You can decide that it's integers that
are 8-bits, 16-bits, 32-bits, 64-bits.

193
00:10:25.028 --> 00:10:28.266
Or you can decide that there's strings
that could be encoded as ASCII, UTF-8.

194
00:10:28.266 --> 00:10:32.246
It's all up to us as the programmer
to decide what those 1s and 0s mean.

195
00:10:32.246 --> 00:10:35.399
And if we make mistakes and one programmer
thinks they mean this thing and

196
00:10:35.399 --> 00:10:38.290
the other one thinks they mean this thing,
at least in the C world,

197
00:10:38.290 --> 00:10:40.062
we're gonna get some unhappy results.

198
00:10:40.062 --> 00:10:42.637
But it's not gonna give us a nice
error message, that's for sure,

199
00:10:42.637 --> 00:10:44.457
it's just gonna interpret
them incorrectly.

200
00:10:44.457 --> 00:10:48.362
We talked about byte arrays, so
we can have just back-to-back bytes, and

201
00:10:48.362 --> 00:10:51.847
then we can index into those,
just like the global array of memory.

202
00:10:51.847 --> 00:10:55.897
Talked about null-terminated strings,
where the 0 byte at the end of the string,

203
00:10:55.897 --> 00:10:58.990
not to be confused with 0 the character,
which is not a 0 byte.

204
00:10:58.990 --> 00:11:02.273
But 0 terminated strings
are essentially a way to be able to

205
00:11:02.273 --> 00:11:04.836
just pass this memory
address to something and

206
00:11:04.836 --> 00:11:09.057
have it actually without any other
information, nowhere the string ends.

207
00:11:09.057 --> 00:11:12.279
And then finally how getting a string's
length is a little bit inefficient.

208
00:11:12.279 --> 00:11:16.560
Maybe a design decision that
hasn't aged well since 1972, but

209
00:11:16.560 --> 00:11:19.800
if it's a hard coded string,
it will get inlined.

210
00:11:19.800 --> 00:11:21.037
And if worse comes to worse,

211
00:11:21.037 --> 00:11:23.881
you can also just explicitly pass
around the length separately.

212
00:11:23.881 --> 00:11:27.017
Then some functions, such as write
will say, I'm not gonna traverse and

213
00:11:27.017 --> 00:11:28.547
go look for the null-terminated.

214
00:11:28.547 --> 00:11:31.652
You just give me the length and
I'll just assume that's how many you want.

