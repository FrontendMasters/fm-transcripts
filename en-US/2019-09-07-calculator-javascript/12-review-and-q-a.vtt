WEBVTT

1
00:00:00.070 --> 00:00:03.240
&gt;&gt; Brian Holt: Down here, we have init,
right, we call the init function.

2
00:00:03.240 --> 00:00:06.250
And the all the in function
does is query the selector for

3
00:00:06.250 --> 00:00:08.710
the calc-buttons,
which is everything in here.

4
00:00:08.710 --> 00:00:11.390
And adds an event listener
at the top level, right?

5
00:00:11.390 --> 00:00:16.397
Every time that click happens on one of
these buttons, it sends off an event.

6
00:00:16.397 --> 00:00:21.120
And we're passing the event.target, which
is gonna be whatever button we pressed.

7
00:00:21.120 --> 00:00:25.556
And it's gonna pass to the innerText,
so 3 or C or back arrow,

8
00:00:25.556 --> 00:00:29.970
all that kinda stuff,
into our buttonClick function.

9
00:00:29.970 --> 00:00:32.697
Okay, with me so far?

10
00:00:32.697 --> 00:00:34.850
Let's go to our buttonClick function.

11
00:00:34.850 --> 00:00:36.680
We just ask, is this a number?

12
00:00:36.680 --> 00:00:38.828
Or rather we're asking
is this not a number?

13
00:00:38.828 --> 00:00:43.850
Which I recognize is, and you can also
totally do, is this not not a number?

14
00:00:43.850 --> 00:00:47.267
&gt;&gt; Group: [LAUGH]
&gt;&gt; Brian Holt: You can really put as many

15
00:00:47.267 --> 00:00:49.200
as you want, is this not not not a number?

16
00:00:50.260 --> 00:00:52.150
Just totally pointless, ignore me.

17
00:00:52.150 --> 00:00:54.750
I'm just making shit up now.

18
00:00:54.750 --> 00:00:58.487
Okay, so if this is not a number,
then handleSymbol, right,

19
00:00:58.487 --> 00:01:00.188
because it's not a number.

20
00:01:00.188 --> 00:01:02.163
If it is a number,
then handleNumber, okay?

21
00:01:02.163 --> 00:01:05.972
So let's do the numbers
first because that's easier.

22
00:01:05.972 --> 00:01:10.654
If you go down to handleNumber,
wherever that may lie.

23
00:01:13.623 --> 00:01:16.511
&gt;&gt; Brian Holt: handleMath,
flushOperations, handleNumber,

24
00:01:16.511 --> 00:01:18.090
there it is.

25
00:01:18.090 --> 00:01:21.106
If it's a 0, we just assign it
to be whatever that buffer is,

26
00:01:21.106 --> 00:01:23.202
the buffer essentially to be that number.

27
00:01:23.202 --> 00:01:26.310
Otherwise you just tack it onto the end,
okay?

28
00:01:28.530 --> 00:01:31.950
Otherwise up here we go to handleSymbol.

29
00:01:34.000 --> 00:01:37.680
If it's a C, that means clear, we're
gonna do a switch based on that symbol.

30
00:01:37.680 --> 00:01:41.260
If it's an equal, then we do the math,
we show that to the user, and

31
00:01:41.260 --> 00:01:42.780
then we break up here.

32
00:01:42.780 --> 00:01:44.410
Otherwise, we're gonna math, right?

33
00:01:45.710 --> 00:01:48.384
So we go into handleMath.

34
00:01:48.384 --> 00:01:50.520
If the buffer is 0, then we do nothing.

35
00:01:52.540 --> 00:01:57.500
Otherwise we're gonna
check to see if it's 0.

36
00:01:57.500 --> 00:01:59.430
If that's it, then we're gonna
send it to the running total.

37
00:01:59.430 --> 00:02:01.760
Otherwise, we're gonna
go to flushOperations.

38
00:02:01.760 --> 00:02:07.310
Which is going to do either the math,
the subtract, or times.

39
00:02:07.310 --> 00:02:12.853
A big key here, even if you're doing like
&amp;times in your dock, this is going to be.

40
00:02:12.853 --> 00:02:15.036
By the time it gets to this
point in the function,

41
00:02:15.036 --> 00:02:17.290
it's gonna be this little multiply sign,
okay?

42
00:02:19.160 --> 00:02:22.355
So either way, you still have to
have this be the multiply sign.

43
00:02:24.455 --> 00:02:27.624
&gt;&gt; Brian Holt: Okay, and then we're
either doing addition, subtraction,

44
00:02:27.624 --> 00:02:31.170
multiplication, or division based
on what the user pressed, okay?

45
00:02:32.310 --> 00:02:34.327
Back up here, in previousOperator,

46
00:02:34.327 --> 00:02:36.768
we gonna keep the previous
symbol that they just gave us.

47
00:02:36.768 --> 00:02:38.892
We're gonna assign the buffer to 0 and
we're gonna keep going.

48
00:02:40.982 --> 00:02:45.150
&gt;&gt; Brian Holt: Good, does that
whole flow kinda make some sense?

49
00:02:45.150 --> 00:02:47.932
Sometimes it's kinda useful to
mentally walk through your program.

50
00:02:47.932 --> 00:02:52.543
So we're getting there,
this is pretty close to done.

51
00:02:52.543 --> 00:02:56.366
25 times 9 equals,
that's what we would expect.

52
00:02:56.366 --> 00:03:01.402
And if we said 24 plus 3 plus 2,

53
00:03:01.402 --> 00:03:08.182
all that kind of stuff,
that still all works.

54
00:03:14.104 --> 00:03:18.010
&gt;&gt; Brian Holt: Okay, I mean, this is not
gonna be a perfect calculator, right?

55
00:03:18.010 --> 00:03:22.723
For example, if I hit 25 + 3 and I hit =,
and I put another number in there,

56
00:03:22.723 --> 00:03:25.523
that's not typically
how a calculator work.

57
00:03:25.523 --> 00:03:26.656
It would clear it out, but

58
00:03:26.656 --> 00:03:29.590
there's a bunch more logic that
would have to go into doing that.

59
00:03:29.590 --> 00:03:33.740
And for now, I'm happy to just say the
user should click Clear once they're done.

60
00:03:38.977 --> 00:03:42.843
&gt;&gt; Brian Holt: You never realize how much
logic went into a calculator until you

61
00:03:42.843 --> 00:03:44.857
have to build a damn calculator.

62
00:03:44.857 --> 00:03:46.160
At least that was how it was for me.

63
00:03:47.500 --> 00:03:50.274
It handles a bunch of state that
you're not even really thinking about.

64
00:03:50.274 --> 00:03:53.532
We have one more thing to accomplish here,
and that is the back arrow.

65
00:03:55.672 --> 00:03:57.700
&gt;&gt; Brian Holt: So
that is under handleSymbols.

66
00:03:57.700 --> 00:03:59.470
We're gonna put it above the math ones.

67
00:04:01.460 --> 00:04:03.980
It doesn't actually matter
what order these comes

68
00:04:03.980 --> 00:04:07.917
in
&gt;&gt; Brian Holt: So

69
00:04:07.917 --> 00:04:12.279
I'm gonna find back arrow in here,
back arrow.

70
00:04:16.950 --> 00:04:22.140
&gt;&gt; Brian Holt: Question is, there is so
many arrows, I think it's leftward arrows.

71
00:04:22.140 --> 00:04:31.034
Hence the lar, right, leftward arrow
&gt;&gt; Brian Holt: Again,

72
00:04:31.034 --> 00:04:33.580
I'm pretty sure you can copy and
paste that out of the DOM.

73
00:04:33.580 --> 00:04:37.332
Or you can just search for
leftward arrow and copy and

74
00:04:37.332 --> 00:04:39.640
paste that off of there as well.

75
00:04:41.130 --> 00:04:44.486
Okay, so a leftward arrow, we expect,

76
00:04:44.486 --> 00:04:49.846
let's see how I did it over here
in Building an HTML Calculator.

77
00:04:49.846 --> 00:04:58.187
If someone clicks 25,
&gt;&gt; Brian Holt: Here we go,

78
00:04:58.187 --> 00:05:04.793
25, and then I click back arrow,
you'd expect it to delete the 5, right?

79
00:05:04.793 --> 00:05:07.324
Right, it goes back to 2 or back to 0.

80
00:05:09.261 --> 00:05:10.778
&gt;&gt; Brian Holt: So how will we do that?

81
00:05:12.969 --> 00:05:17.759
&gt;&gt; Brian Holt: Well, if buffer.length ===

82
00:05:17.759 --> 00:05:24.856
1,
&gt;&gt; Brian Holt: Then so

83
00:05:24.856 --> 00:05:31.420
if someone has 2 in there, and they click
the back arrow, you expect it to become 0.

84
00:05:31.420 --> 00:05:37.460
So you're just gonna say buffer = '0',

85
00:05:37.460 --> 00:05:42.343
else,
&gt;&gt; Brian Holt: buffer is going

86
00:05:42.343 --> 00:05:44.290
to be whatever it was minus 1.

87
00:05:44.290 --> 00:05:48.965
So equals buffer.substring,

88
00:05:53.065 --> 00:05:56.941
&gt;&gt; Brian Holt: 0 to 1 shorter than it was,

89
00:05:56.941 --> 00:06:00.177
buffer.length- 1.

90
00:06:05.068 --> 00:06:08.029
&gt;&gt; Brian Holt: So if you remember,
substring takes a longer string and

91
00:06:08.029 --> 00:06:10.150
returns to a smaller string.

92
00:06:10.150 --> 00:06:12.150
So we're basically we're saying
is start at the beginning.

93
00:06:12.150 --> 00:06:19.580
So if I have 250, and then go all
the way to the end, except 1, right?

94
00:06:19.580 --> 00:06:21.732
So it says, that's what this
is buffer.length is gonna say,

95
00:06:21.732 --> 00:06:25.210
stop 1 short of going
all the way to the end.

96
00:06:25.210 --> 00:06:26.120
Make sure we have a break.

97
00:06:37.499 --> 00:06:39.055
&gt;&gt; Brian Holt: Okay that is working.

98
00:06:42.010 --> 00:06:43.619
&gt;&gt; Brian Holt: Okay, cool.

99
00:06:45.631 --> 00:06:46.963
&gt;&gt; Brian Holt: This makes sense?

100
00:06:50.367 --> 00:06:52.899
&gt;&gt; Brian Holt: What happens
if buffer is of length 0?

101
00:06:55.659 --> 00:06:57.033
&gt;&gt; Brian Holt: It can't be, right?

102
00:06:57.033 --> 00:06:58.757
It's always gonna be of length 1,

103
00:06:58.757 --> 00:07:01.871
because the shortest that I ever
let it get is length 1, right?

104
00:07:01.871 --> 00:07:04.039
Cuz it's always gonna be 0.

105
00:07:04.039 --> 00:07:08.320
So if buffer.length, or if buffer is 0,
that means its length is gonna be 1.

106
00:07:08.320 --> 00:07:10.630
And that way it just
reassigned itself to be 0.

107
00:07:10.630 --> 00:07:12.936
So we don't have to worry
about that particular case.

108
00:07:12.936 --> 00:07:15.930
So these are the only two
cases that we can have.

109
00:07:16.960 --> 00:07:19.350
Hopefully this was hard, right?

110
00:07:19.350 --> 00:07:21.889
But you at least grasped the concepts
that were going on here.

111
00:07:23.100 --> 00:07:29.386
So if I had asked you to do this by
yourself today, you would have the tools.

112
00:07:29.386 --> 00:07:33.220
I don't think you've learned too
much that's brand new from this.

113
00:07:33.220 --> 00:07:34.900
But you could have done it
if I given you enough time.

114
00:07:34.900 --> 00:07:38.305
If I had said, hey,
you have two weeks to build this,

115
00:07:38.305 --> 00:07:40.739
you could've gotten there, right?

116
00:07:40.739 --> 00:07:42.853
Hopefully you can at least
feel that way about it.

117
00:07:46.090 --> 00:07:49.800
&gt;&gt; Brian Holt: Okay, questions
before we move on from calculator?

118
00:07:49.800 --> 00:07:51.950
This is as much as we're gonna do on this.

119
00:07:51.950 --> 00:07:56.770
You're welcome to go on and code jam
on this later and add more features and

120
00:07:56.770 --> 00:07:59.280
maybe add decimals and stuff like that.

121
00:07:59.280 --> 00:08:03.824
Good luck, but [LAUGH] decimals and
JavaScript don't go together super well.

122
00:08:05.887 --> 00:08:08.403
&gt;&gt; Brian Holt: But yeah, this is another
piece that you can kinda throw into your

123
00:08:08.403 --> 00:08:08.915
portfolio.

124
00:08:08.915 --> 00:08:11.329
It's like, check out this
cool calculator that I built.

125
00:08:15.009 --> 00:08:17.820
&gt;&gt; Brian Holt: Any questions before we
move on to the project for the day?

126
00:08:19.899 --> 00:08:22.140
&gt;&gt; Brian Holt: Please.

127
00:08:22.140 --> 00:08:26.175
&gt;&gt; Speaker 3: How do you get into thinking
about it where you have to divide things

128
00:08:26.175 --> 00:08:27.697
up into smaller things?

129
00:08:27.697 --> 00:08:31.536
Because when I was following along,
it seems like it's easy.

130
00:08:31.536 --> 00:08:37.210
But if you give me on my own,
it'd be like this big thing is crazy.

131
00:08:37.210 --> 00:08:40.669
Are there some resource that
teach you how to solve problems?

132
00:08:42.860 --> 00:08:44.120
&gt;&gt; Brian Holt: I don't
know if I have a resource.

133
00:08:44.120 --> 00:08:45.320
I think it just comes from

134
00:08:46.690 --> 00:08:51.000
practice of knowing like where
good divisions are to draw.

135
00:08:51.000 --> 00:08:56.310
Kind of a good litmus test for
that, I suppose would be, if it's

136
00:08:56.310 --> 00:09:00.430
really hard to name your function, it's
probably doing too many things, right?

137
00:09:02.270 --> 00:09:05.530
So like this buttonClick thing.

138
00:09:06.740 --> 00:09:09.790
If I was trying to put all
the symbol logic in here, and

139
00:09:09.790 --> 00:09:13.930
all the number of logic in here,
that's gonna get enormous, right?

140
00:09:13.930 --> 00:09:17.571
If your functions start getting
longer than like 60 lines of code,

141
00:09:17.571 --> 00:09:19.530
that's gonna be tough to maintain.

142
00:09:19.530 --> 00:09:22.197
&gt;&gt; Speaker 4: Yeah,
definitely [INAUDIBLE] cool thing, right?

143
00:09:22.197 --> 00:09:23.169
&gt;&gt; Brian Holt: For sure.

144
00:09:23.169 --> 00:09:26.866
&gt;&gt; Speaker 4: Watching Brian code this
is a fantastic point of reference.

145
00:09:26.866 --> 00:09:30.170
The hard part of coding is
solving these problems yourself.

146
00:09:30.170 --> 00:09:33.455
So when you're approaching a new problem,
and using code to solve it,

147
00:09:33.455 --> 00:09:34.676
you'll get better at it.

148
00:09:34.676 --> 00:09:39.390
And like Brian said,
practice on solving your own [INAUDIBLE].

149
00:09:41.580 --> 00:09:45.190
&gt;&gt; Brian Holt: Eventually, like for me,
cuz I'm an idiot and I can't learn from

150
00:09:45.190 --> 00:09:48.570
other people, I have to learn from
making lots and lots of mistakes.

151
00:09:48.570 --> 00:09:51.660
That's the best thing can do is
learn from other people's mistakes.

152
00:09:51.660 --> 00:09:54.062
So you don't have to make them.

153
00:09:54.062 --> 00:09:57.028
These functions just get
astronomically large.

154
00:09:57.028 --> 00:10:01.679
They just become, if I'm trying to follow
how my program works, from start to end,

155
00:10:01.679 --> 00:10:02.670
like we just did.

156
00:10:02.670 --> 00:10:07.139
If it gets to be impossible, then you
probably have functions that are too long,

157
00:10:07.139 --> 00:10:09.570
that are doing too many things.

158
00:10:09.570 --> 00:10:12.936
But the general idea in the back of your
head that you should be thinking about

159
00:10:12.936 --> 00:10:14.685
is a function should do one thing well.

160
00:10:16.533 --> 00:10:18.469
&gt;&gt; Brian Holt: Does that
vaguely answer your question?

161
00:10:18.469 --> 00:10:19.160
&gt;&gt; Speaker 3: Yeah.

162
00:10:19.160 --> 00:10:19.660
&gt;&gt; Brian Holt: Cool.

