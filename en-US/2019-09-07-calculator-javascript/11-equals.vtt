WEBVTT

1
00:00:00.020 --> 00:00:02.650
&gt;&gt; Brian Holt: Lets do equals.

2
00:00:02.650 --> 00:00:07.850
Okay, so we're gonna add another case,
and handle symbol.

3
00:00:07.850 --> 00:00:09.332
Case =,

4
00:00:16.961 --> 00:00:18.787
&gt;&gt; Brian Holt: Okay?

5
00:00:18.787 --> 00:00:26.231
And then here we're gonna do two things
&gt;&gt; Brian Holt: if,

6
00:00:30.888 --> 00:00:32.276
&gt;&gt; Brian Holt: So if you wanted to here,

7
00:00:32.276 --> 00:00:34.988
you could do like handleEquals
if you wanted to or

8
00:00:34.988 --> 00:00:37.186
you can inline the code directly here.

9
00:00:37.186 --> 00:00:43.682
Let's go ahead and just do,
&gt;&gt; Brian Holt: Handle.

10
00:00:46.666 --> 00:00:48.472
&gt;&gt; Brian Holt: Well,
I have it here just being in line, so

11
00:00:48.472 --> 00:00:50.300
we're just gonna do it here in line.

12
00:00:50.300 --> 00:00:54.065
We're gona say if previous operator.

13
00:00:55.950 --> 00:00:58.871
&gt;&gt; Brian Holt: So
let's talk about null for a second, so

14
00:00:58.871 --> 00:01:04.476
I'm gonna say if previous equal operator
triple equals the thing called null.

15
00:01:07.027 --> 00:01:10.540
&gt;&gt; Brian Holt: So null is the total
absence of something, right?

16
00:01:10.540 --> 00:01:13.840
So in this case,
we don't have a previous operator so

17
00:01:13.840 --> 00:01:17.020
it's going to say it's null, right?

18
00:01:17.020 --> 00:01:18.320
It's not zero.

19
00:01:18.320 --> 00:01:21.030
Zero is the quantity of having zero,
right?

20
00:01:21.030 --> 00:01:22.177
You have zeroes of something.

21
00:01:22.177 --> 00:01:23.596
Null is the total absence of something.

22
00:01:26.098 --> 00:01:27.826
&gt;&gt; Brian Holt: It's a weird hair to split,
but

23
00:01:27.826 --> 00:01:30.970
it's one that computer
scientists have chosen to split.

24
00:01:32.310 --> 00:01:36.013
So in this case, we're just gonna say
if the user's on their first time,

25
00:01:36.013 --> 00:01:38.308
we're gonna say previous operator is null.

26
00:01:41.255 --> 00:01:43.381
&gt;&gt; Brian Holt: This means the user
hasn't chosen an operator yet,

27
00:01:43.381 --> 00:01:45.940
which means it's their
first time doing it, right?

28
00:01:45.940 --> 00:01:46.866
So that's what null is.

29
00:01:46.866 --> 00:01:53.990
It's the null option of this which
is the previous operator was either

30
00:01:53.990 --> 00:01:59.850
divides multiply minus plus or null which
means it doesn't have a previous operator.

31
00:01:59.850 --> 00:02:03.210
So if the previous operator was null
that means they haven't chosen one yet,

32
00:02:03.210 --> 00:02:06.050
which means that you need
two numbers to do math.

33
00:02:06.050 --> 00:02:11.064
You need two numbers to do math, right,
which means you should just return here.

34
00:02:15.357 --> 00:02:20.454
&gt;&gt; Brian Holt: Otherwise you're gonna
flush operation with the buffer.

35
00:02:23.365 --> 00:02:25.692
&gt;&gt; Brian Holt: So
flush operation right there.

36
00:02:28.140 --> 00:02:29.797
&gt;&gt; Brian Holt: Right because
if they press equals,

37
00:02:29.797 --> 00:02:33.560
you wanna do all of the math up to that
point and then give it back to them.

38
00:02:33.560 --> 00:02:34.186
Makes sense?

39
00:02:34.186 --> 00:02:36.532
&gt;&gt; Speaker 2: Would you do that again?

40
00:02:36.532 --> 00:02:38.361
[INAUDIBLE] flush that?

41
00:02:38.361 --> 00:02:41.965
&gt;&gt; Brian Holt: So,
&gt;&gt; Brian Holt: Whenever someone hits

42
00:02:41.965 --> 00:02:44.870
equals, we wanna actually do
the math they've been doing, right?

43
00:02:44.870 --> 00:02:50.070
So showing you here on this
If I hit 25 plus three and

44
00:02:50.070 --> 00:02:53.990
I hit equals,
I need to do that math, right?

45
00:02:53.990 --> 00:02:58.430
I haven't done that math yet, so I need to
flush the operation, which is the thing

46
00:02:58.430 --> 00:03:02.978
that I previously wrote for if they hit
like minus or times or divide, right?

47
00:03:02.978 --> 00:03:07.082
I'm just gonna reuse that same function so
that when they hit equal,

48
00:03:07.082 --> 00:03:08.795
it actually does that math.

49
00:03:08.795 --> 00:03:14.016
So flush operation it takes a parameter
which is an integer buffer, so

50
00:03:14.016 --> 00:03:19.148
it expects by the time that it gets
here that this is gonna be a number,

51
00:03:19.148 --> 00:03:25.004
so what we're gonna have to do is we won't
have to say parseInt but the buffer.

52
00:03:36.029 --> 00:03:41.575
&gt;&gt; Brian Holt: So, that's actually
gonna do the math parts of this.

53
00:03:44.643 --> 00:03:46.602
&gt;&gt; Brian Holt: What else do we have
to do when someone hits equal?

54
00:03:48.737 --> 00:03:50.880
&gt;&gt; Brian Holt: Well, they no longer
have a previous operator, right?

55
00:03:51.930 --> 00:03:57.020
So if I hit 25 plus 3 and
then I hit Enter, there's no previous

56
00:03:57.020 --> 00:04:02.299
operator in here anymore, so
we're gonna have to clear that out,

57
00:04:02.299 --> 00:04:07.035
so we're gonna have to say
previous operator equals null.

58
00:04:21.421 --> 00:04:25.440
&gt;&gt; Brian Holt: We want to display
to the user their answer, right?

59
00:04:25.440 --> 00:04:28.490
That's kind of the damn
point of the calculator, so

60
00:04:28.490 --> 00:04:31.260
we're gonna say the buffer is
equal to the running total.

61
00:04:33.220 --> 00:04:38.634
That's what we wanna show to the user,
and then the actual running total

62
00:04:38.634 --> 00:04:43.627
since the math problem is now over,
we're gonna assign the zero.

63
00:04:47.599 --> 00:04:49.310
&gt;&gt; Brian Holt: Okay, and
then we're gonna break after that.

64
00:04:50.620 --> 00:04:56.317
Coming back over to this calculator,
going to save this I'm going to refresh.

65
00:04:56.317 --> 00:05:02.607
Say 25 +3= 28.

66
00:05:02.607 --> 00:05:05.350
Come back over here, refresh.

67
00:05:05.350 --> 00:05:11.206
Now if I hit 25 times by 3 equals,
it is correctly mathing,

68
00:05:11.206 --> 00:05:17.640
which is the way that you have to
say that when you're programming.

