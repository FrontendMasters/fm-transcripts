WEBVTT

1
00:00:00.040 --> 00:00:03.160
&gt;&gt; Brian Holt: So down here,
we'll just write function handleMath.

2
00:00:03.160 --> 00:00:06.203
And that's gonna take some sort of symbol.

3
00:00:08.904 --> 00:00:10.480
&gt;&gt; Brian Holt: This is gonna
be exactly what you'd expect.

4
00:00:10.480 --> 00:00:12.780
I have it here in terms of if and
else if, but

5
00:00:12.780 --> 00:00:16.230
you could totally do this
again in terms of cases.

6
00:00:16.230 --> 00:00:24.207
I'm just gonna say if,
&gt;&gt; Brian Holt: Let's do this, handleMath.

7
00:00:32.163 --> 00:00:36.488
&gt;&gt; Brian Holt: So if the buffer === 0, so

8
00:00:36.488 --> 00:00:43.277
if I hit plus and,
&gt;&gt; Brian Holt: The buffer is 0,

9
00:00:43.277 --> 00:00:46.843
that doesn't make any sense, right?

10
00:00:46.843 --> 00:00:50.496
So here we're just gonna do nothing,
and return.

11
00:00:54.371 --> 00:00:57.084
&gt;&gt; Brian Holt: So
if the buffer is just === 0 here,

12
00:00:57.084 --> 00:00:59.970
then you're just not gonna do anything.

13
00:00:59.970 --> 00:01:02.952
And this return just means don't
execute the rest of the function,

14
00:01:02.952 --> 00:01:03.955
just get out of there.

15
00:01:05.825 --> 00:01:09.050
&gt;&gt; Brian Holt: If it's not equal to 0,
then we have other things to do.

16
00:01:09.050 --> 00:01:13.330
So at this point, we wanna turn
our buffer into a number, right?

17
00:01:13.330 --> 00:01:16.530
Because we're actually gonna be doing
mathematical operations with it.

18
00:01:16.530 --> 00:01:21.165
So the first thing I'm gonna do here is
I'm just going to say const intBuffer =

19
00:01:21.165 --> 00:01:24.590
parseInt(buffer).

20
00:01:26.830 --> 00:01:28.767
And now, this is gonna be a number.

21
00:01:36.471 --> 00:01:40.021
&gt;&gt; Brian Holt: I'll show you
another little hack to do that.

22
00:01:40.021 --> 00:01:41.576
So parseInt takes in a string and

23
00:01:41.576 --> 00:01:44.810
gives you back the number
representation of that string, right?

24
00:01:45.830 --> 00:01:51.410
If you wanna do it the shorthand way,
you can also just do plus, like that.

25
00:01:53.150 --> 00:01:54.714
This will do exactly the same thing.

26
00:01:57.066 --> 00:01:58.230
&gt;&gt; Brian Holt: Just kind of a shorthand.

27
00:01:58.230 --> 00:02:01.872
I'm gonna leave it as parseInt, cuz that
way, it's a little bit more explicit.

28
00:02:01.872 --> 00:02:04.476
People know, this person's
turning a string into a number,

29
00:02:04.476 --> 00:02:07.370
because that's exactly
what that function does.

30
00:02:07.370 --> 00:02:09.393
But you may see someone just
put the plus sign there.

31
00:02:12.495 --> 00:02:17.730
&gt;&gt; Brian Holt: Okay,
if runningTotal === 0,

32
00:02:19.537 --> 00:02:21.313
&gt;&gt; Brian Holt: Then what?

33
00:02:21.313 --> 00:02:27.360
So if I click 25 +, what should be
my running total at that point?

34
00:02:30.254 --> 00:02:35.795
&gt;&gt; Speaker 2: Question,
why don't we have to say else if there?

35
00:02:35.795 --> 00:02:38.039
Is that because we returned or because-
&gt;&gt; Brian Holt: Yep.

36
00:02:38.039 --> 00:02:39.017
&gt;&gt; Speaker 2: Okay.

37
00:02:39.017 --> 00:02:41.240
&gt;&gt; Brian Holt: So
we don't have to do else if here.

38
00:02:41.240 --> 00:02:45.134
You could, but you don't have to.

39
00:02:45.134 --> 00:02:48.392
When you do return here, it just short
circuits the entire function and

40
00:02:48.392 --> 00:02:50.840
just returns and gets out of there.

41
00:02:50.840 --> 00:02:53.111
So the rest of the function
won't be invoked.

42
00:02:53.111 --> 00:02:56.703
Often if you have these conditions, where
this function should only be conditionally

43
00:02:56.703 --> 00:02:58.570
run, this is how you do it, right?

44
00:02:58.570 --> 00:03:01.620
Right at the top, you're saying,
if this, then return, otherwise,

45
00:03:01.620 --> 00:03:03.779
just continue executing
the rest of the function.

46
00:03:07.092 --> 00:03:09.770
&gt;&gt; Brian Holt: Notice that we're
not returning anything, right?

47
00:03:09.770 --> 00:03:11.760
You could say return 0 or
something like that.

48
00:03:11.760 --> 00:03:14.060
But that's not ultimately
what we're trying to do here.

49
00:03:14.060 --> 00:03:16.116
We're just trying to get
the function to end.

50
00:03:21.221 --> 00:03:24.820
&gt;&gt; Brian Holt: Okay, so
going back to what we're talking about.

51
00:03:24.820 --> 00:03:31.920
If runningTotal is 0, so if I hit 25 and
then +, what should the running total be?

52
00:03:34.321 --> 00:03:36.280
&gt;&gt; Brian Holt: Just whatever
was in the buffer, right?

53
00:03:36.280 --> 00:03:39.042
So if I hit 25 +, or 5 +,

54
00:03:39.042 --> 00:03:44.820
I'm just gonna say runningTotal
is assigned into buffer.

55
00:03:48.695 --> 00:03:54.675
&gt;&gt; Brian Holt: Right, because at that
point, that becomes your running total.

56
00:03:54.675 --> 00:04:01.936
&gt;&gt; Brian Holt: Else,
&gt;&gt; Brian Holt: So

57
00:04:01.936 --> 00:04:04.344
let's assume that I hit 25 +,

58
00:04:04.344 --> 00:04:09.066
and then I hit,
&gt;&gt; Brian Holt: 30, and

59
00:04:09.066 --> 00:04:10.630
then I hit + again, right?

60
00:04:10.630 --> 00:04:14.321
So let's just to visualize what that
looks like, the actual one here.

61
00:04:14.321 --> 00:04:18.080
So if I hit 25 +,
now my running total is 25.

62
00:04:18.080 --> 00:04:23.800
And I hit 30, if I hit +,
what do you expect to see there?

63
00:04:23.800 --> 00:04:28.270
So if I hit 25 + 30, and
then I hit + again, you wanted to

64
00:04:28.270 --> 00:04:31.590
actually do the last operation and
keep track of that in the runningTotal.

65
00:04:32.700 --> 00:04:37.302
So I'm gonna call that flushOperation,
flushOperation, and

66
00:04:37.302 --> 00:04:39.780
I'm gonna pass that into buffer.

67
00:04:41.560 --> 00:04:48.349
And then we'll write a flushOperation
function here in just a second.

68
00:04:48.349 --> 00:04:49.641
&gt;&gt; Brian Holt: Okay,
in any of these cases,

69
00:04:49.641 --> 00:04:52.550
you wanna keep track of what that
previous operator was, though.

70
00:04:52.550 --> 00:04:56.227
So you're gonna say
previousOperator = symbol.

71
00:05:06.731 --> 00:05:08.575
&gt;&gt; Brian Holt: And
then buffer is gonna be assigned 0.

72
00:05:09.880 --> 00:05:12.930
We could go and make it show what
the running total is at that

73
00:05:12.930 --> 00:05:16.270
particular point in time, but that would
be a little bit more involved logic.

74
00:05:16.270 --> 00:05:18.128
So let's just keep it simple and
assign it 0.

75
00:05:20.793 --> 00:05:21.741
&gt;&gt; Brian Holt: We okay with that?

76
00:05:24.965 --> 00:05:26.990
&gt;&gt; Brian Holt: It's like
the teacher asking, he's like,

77
00:05:26.990 --> 00:05:28.223
do you want more homework?

78
00:05:28.223 --> 00:05:29.332
[LAUGH] No, thank you.

79
00:05:32.602 --> 00:05:37.927
&gt;&gt; Brian Holt: Okay, so
that's it for the handleMath part.

80
00:05:37.927 --> 00:05:39.611
How do we feel about the handleMath part?

81
00:05:39.611 --> 00:05:42.210
Does what we wrote there
make most the sense?

82
00:05:43.880 --> 00:05:47.513
&gt;&gt; Speaker 2: I don't understand why we
don't have to ask questions about whether

83
00:05:47.513 --> 00:05:50.655
we're doing multiplication,
division, subtraction.

84
00:05:50.655 --> 00:05:52.941
&gt;&gt; Brian Holt: So that's what
flushOperation's gonna do for us.

85
00:05:54.785 --> 00:05:57.788
&gt;&gt; Brian Holt: I'm trying to abstract
out these pieces of logic, so

86
00:05:57.788 --> 00:06:02.290
that these functions do very small,
very specific things, right?

87
00:06:02.290 --> 00:06:06.650
I'm trying to make it so these functions
aren't any more than 15, 20 lines of code.

88
00:06:08.320 --> 00:06:09.380
You can always do that.

89
00:06:09.380 --> 00:06:12.289
Sometimes things just take a lot
of lines of code to get done.

90
00:06:12.289 --> 00:06:15.271
But in this particular case, we can
keep these functions pretty small and

91
00:06:15.271 --> 00:06:16.338
pretty understandable.

92
00:06:19.615 --> 00:06:22.230
&gt;&gt; Brian Holt: Yeah,
we'll do that here in flushOperation.

93
00:06:22.230 --> 00:06:24.980
So the flushOperation is where you're
actually gonna do the math, right?

94
00:06:26.570 --> 00:06:29.546
Here we're just kind of doing some
bookkeeping of what buttons they were

95
00:06:29.546 --> 00:06:31.566
pressing and
what the running total is gonna be.

