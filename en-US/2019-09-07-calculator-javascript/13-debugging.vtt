WEBVTT

1
00:00:00.090 --> 00:00:00.650
&gt;&gt; Brian Holt: Yeah.

2
00:00:00.650 --> 00:00:04.200
&gt;&gt; Speaker 2: So mine keeps saying
that numberString isn't defined,

3
00:00:04.200 --> 00:00:06.720
how do I make sure that it is,
and how do I find?

4
00:00:07.960 --> 00:00:11.520
&gt;&gt; Brian Holt: Yeah, so
the first thing to do is come in here and

5
00:00:11.520 --> 00:00:15.260
find where it says numberString,
right, okay?

6
00:00:15.260 --> 00:00:23.251
So numberString, we know this numberString
here is not good for some reason, right?

7
00:00:23.251 --> 00:00:27.445
So probably the first thing I would do
here, personally, is I would just say

8
00:00:27.445 --> 00:00:33.365
console.log("numberString ",
&gt;&gt; Brian Holt: Comma numberString).

9
00:00:35.804 --> 00:00:38.520
&gt;&gt; Brian Holt: And then if I come
over here and refresh the page,

10
00:00:38.520 --> 00:00:42.642
you can see here that it's logging
out whatever numberString is, okay?

11
00:00:42.642 --> 00:00:44.882
My guess is right there,
instead of saying 4,

12
00:00:44.882 --> 00:00:47.070
it's probably gonna say undefined, right?

13
00:00:48.090 --> 00:00:52.480
So I'm going to figure out okay, well that
means whatever is calling handleNumber

14
00:00:52.480 --> 00:00:54.370
is not giving it the right information.

15
00:00:55.750 --> 00:00:59.471
So I'm gonna then go find out where
handleNumber is being called, okay?.

16
00:00:59.471 --> 00:01:02.119
So here's handleNumber is being called,

17
00:01:02.119 --> 00:01:07.050
which probably means this value
isn't what I expect it to be, okay?

18
00:01:07.050 --> 00:01:10.840
So that probably means
that this value up here

19
00:01:10.840 --> 00:01:13.410
from buttonClick is probably
not being passed in.

20
00:01:13.410 --> 00:01:16.790
So I'm gonna go figure out where
buttonClick was called, right?

21
00:01:16.790 --> 00:01:18.010
And that's gonna be down here.

22
00:01:19.160 --> 00:01:21.667
So you probably have
something wrong right here.

23
00:01:21.667 --> 00:01:25.869
Cuz this is basically the terminus, right?

24
00:01:25.869 --> 00:01:27.930
You can't really go
much further than this.

25
00:01:27.930 --> 00:01:32.854
So somewhere along that path line
numberString's getting messed up.

26
00:01:32.854 --> 00:01:33.442
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Brian Holt: So

27
00:01:33.442 --> 00:01:36.562
that's the general process of
debugging is just like working

28
00:01:36.562 --> 00:01:39.323
backwards until eventually
you hit the problem case.

29
00:01:41.804 --> 00:01:45.485
&gt;&gt; Brian Holt: So I'm showing you
how to do this with console.log.

30
00:01:45.485 --> 00:01:49.504
I use and abuse number console.log.

31
00:01:49.504 --> 00:01:54.590
I'm gonna show you just really quickly
a little bit more advanced technique here.

32
00:01:54.590 --> 00:01:58.840
So let's say I was running
into a problem here.

33
00:01:58.840 --> 00:02:01.290
I might throw in what's called
a debugger statement here.

34
00:02:01.290 --> 00:02:03.960
So I'm gonna put debugger right there,
just like that.

35
00:02:05.480 --> 00:02:08.149
Now, I'm gonna go into here.

36
00:02:10.831 --> 00:02:15.140
&gt;&gt; Brian Holt: And refresh this,
and I'm gonna press 5.

37
00:02:15.140 --> 00:02:17.950
And now it's gonna bring up this
debugger screen here in Firefox,

38
00:02:17.950 --> 00:02:20.120
it's also gonna do the same in Chrome.

39
00:02:20.120 --> 00:02:24.400
Now have any of you written C++ or
any of these other kind of languages?

40
00:02:24.400 --> 00:02:25.738
This should be very familiar to you,

41
00:02:25.738 --> 00:02:28.450
because this is how debugger
is work in other languages.

42
00:02:28.450 --> 00:02:31.320
I can actually see where I am in the code.

43
00:02:31.320 --> 00:02:34.100
So I'm here in the buttonClick
part of my call stack.

44
00:02:35.740 --> 00:02:39.230
Call stack being where I am in
the code currently being executed.

45
00:02:39.230 --> 00:02:41.930
And now my code is paused here.

46
00:02:41.930 --> 00:02:48.536
So I can see here that I have value 5,
which is, remember, what I pushed.

47
00:02:48.536 --> 00:02:52.978
And can I make this a little bit smaller?

48
00:02:52.978 --> 00:02:54.305
Here we go.

49
00:02:54.305 --> 00:02:55.589
I know it's a little bit hard for

50
00:02:55.589 --> 00:02:58.077
you, but what's actually
happened is not super important.

51
00:02:58.077 --> 00:03:01.990
You can see is that it's paused on
the statement of my code right here.

52
00:03:01.990 --> 00:03:06.730
So then I can click these little symbols
right here, it's called Step Over.

53
00:03:06.730 --> 00:03:11.710
And it's just going to advance
my code one piece at a time.

54
00:03:11.710 --> 00:03:15.430
So then I can say, hey,
is this going where I expected to go?

55
00:03:15.430 --> 00:03:16.110
I was like, nope.

56
00:03:16.110 --> 00:03:19.350
Okay, so now I can see here it's
gonna go into handleNumber.

57
00:03:19.350 --> 00:03:21.963
So Step Over says like,
don't go into the function call.

58
00:03:21.963 --> 00:03:25.484
But if I click Step Into,
which is this one right here,

59
00:03:25.484 --> 00:03:28.430
it'll actually take me into handleNumber.

60
00:03:28.430 --> 00:03:30.980
So you can see here now I'm
down in handleNumber, and

61
00:03:30.980 --> 00:03:33.630
I can go through my code piece
by piece by piece like that.

62
00:03:35.070 --> 00:03:38.270
It's a little arduous, but
it is pretty cool here.

63
00:03:39.710 --> 00:03:42.820
Now let's say okay, that's fine.

64
00:03:42.820 --> 00:03:46.910
But I'm now curious about
flushOperation here.

65
00:03:46.910 --> 00:03:51.899
I can click here on line 71, and
I can say Continue to here, or

66
00:03:51.899 --> 00:03:56.335
add break points,
there's a bunch of stuff you can do.

67
00:03:56.335 --> 00:03:59.881
And it's like, okay, continue executing
the code until you hit this line and

68
00:03:59.881 --> 00:04:00.695
then stop again.

69
00:04:03.112 --> 00:04:05.643
&gt;&gt; Brian Holt: Once I'm done messing
around with this, I can click Resume and

70
00:04:05.643 --> 00:04:08.580
it will just keep running the program
until it hits another break point.

71
00:04:09.880 --> 00:04:12.203
So feel free to play around with that.

72
00:04:12.203 --> 00:04:18.866
It's again a little bit more lower level,
but it can be useful.

73
00:04:18.866 --> 00:04:20.878
And then make sure you delete
your debugging statements

74
00:04:20.878 --> 00:04:21.960
when you're done with them.

75
00:04:23.380 --> 00:04:26.190
For me that's typically more
effort than I wanna put into it.

76
00:04:26.190 --> 00:04:29.580
Typically it's enough for me to see the
console logs and where things are going.

77
00:04:29.580 --> 00:04:32.780
But different people have
different preferences.

