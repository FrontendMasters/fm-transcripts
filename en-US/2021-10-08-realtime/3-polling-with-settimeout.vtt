WEBVTT

1
00:00:00.062 --> 00:00:03.790
Let's try pulling the set
timeout first and we're done.

2
00:00:03.790 --> 00:00:07.407
By the way with the back end, this is
totally it for the polling back end.

3
00:00:07.407 --> 00:00:09.925
So now everything that we're
gonna do from here on out for

4
00:00:09.925 --> 00:00:13.281
the polling part of the course is gonna
be doing a variety of different client

5
00:00:13.281 --> 00:00:14.810
strategies of dealing with this.

6
00:00:18.493 --> 00:00:23.080
Okay, so get new messages, this one here.

7
00:00:25.470 --> 00:00:30.033
Let's write a function that's going
to use set timeout to go ahead and

8
00:00:30.033 --> 00:00:31.432
pull this endpoint.

9
00:00:31.432 --> 00:00:35.250
So first thing to notice here,
this is an a sync function if you're

10
00:00:35.250 --> 00:00:40.480
not familiar with a sync await,
there's lots of good JavaScript courses.

11
00:00:40.480 --> 00:00:44.952
Yeah, re rethinking a sync, yep,
good course devilish ticket.

12
00:00:44.952 --> 00:00:48.715
But if you're already familiar with
it cool, let's move on with that but

13
00:00:48.715 --> 00:00:51.386
basically allows us to use
the await keyword here and

14
00:00:51.386 --> 00:00:53.770
we'll kind of talk through
that when we do it.

15
00:00:56.010 --> 00:01:01.208
So first thing here's we're gonna say
let Jason and then we're gonna do a try.

16
00:01:01.208 --> 00:01:06.369
And we're gonna say const.rez

17
00:01:06.369 --> 00:01:11.344
equals await, fetch/poll.

18
00:01:13.350 --> 00:01:16.814
And that's what this a sync
does allows us to say, hey,

19
00:01:16.814 --> 00:01:21.992
we're gonna just pause our entire function
execution here until this completes.

20
00:01:21.992 --> 00:01:25.472
Fetch poll here just returns a promise and
all wait does it say wait for

21
00:01:25.472 --> 00:01:27.340
the promise to finish, that's it.

22
00:01:28.800 --> 00:01:33.469
We're putting in a try catch
because that's how you

23
00:01:33.469 --> 00:01:36.452
handle errors with a sync await.

24
00:01:36.452 --> 00:01:41.592
And here you're gonna say
Jason equals await less.Jason,

25
00:01:41.592 --> 00:01:46.427
which will take this and
jason will end up being a object of

26
00:01:46.427 --> 00:01:51.180
what came back from the API,
we'll put our catch here.

27
00:01:53.513 --> 00:01:57.568
And we'll just say,
here you drag your back off code,

28
00:01:57.568 --> 00:02:02.856
if you were gonna do that, well we
are gonna do that here in a little bit,

29
00:02:02.856 --> 00:02:09.629
console.error polling error e.

30
00:02:12.574 --> 00:02:14.962
Okay, so
when you're doing a sync await code,

31
00:02:14.962 --> 00:02:17.820
you typically are gonna wanna
wrap that in a try catch.

32
00:02:17.820 --> 00:02:20.579
It's just kind of the safe thing

33
00:02:20.579 --> 00:02:25.392
to do you'll get some better
error messaging that way.

34
00:02:26.674 --> 00:02:30.488
Okay here I'm gonna say
All Chat = json.msg.

35
00:02:30.488 --> 00:02:36.310
I'm gonna call render to
reflect those to the DOM and

36
00:02:36.310 --> 00:02:43.202
then I'm gonna say set timeout
get new messages at interval.

37
00:02:47.338 --> 00:02:49.790
I can make this smaller so
you can actually see what's going on here.

38
00:02:53.709 --> 00:02:57.508
Okay, and this, yeah, and
again notice that for

39
00:02:57.508 --> 00:03:03.190
the first time getting the messages
is called just directly down here.

40
00:03:03.190 --> 00:03:05.889
So to kinda kick it off,
and then what's gonna

41
00:03:05.889 --> 00:03:10.472
happen here is now get messages is just
going to call itself at the end, right?

42
00:03:13.120 --> 00:03:19.504
So it continually does this, but what's
better than this about then set interval.

43
00:03:19.504 --> 00:03:22.590
Set interval would run that this function
every three seconds, no matter what.

44
00:03:22.590 --> 00:03:27.213
Come hell or high water, it's gonna pause
execution, and it's gonna run that.

45
00:03:27.213 --> 00:03:30.686
What's nice about this is it's
gonna do all of this first and

46
00:03:30.686 --> 00:03:34.430
then the last thing that it
does is called set timeout.

47
00:03:34.430 --> 00:03:38.782
So if this part takes 20 minutes, it's
gonna do first of all it would timeout,

48
00:03:38.782 --> 00:03:42.571
but let's pretend for a second that
it did take 20 minutes, right?

49
00:03:42.571 --> 00:03:46.350
It would wait the 20 minutes here
before we call this set timeout.

50
00:03:46.350 --> 00:03:52.542
So it would take 20 minutes in 3
seconds before it would call again.

51
00:03:52.542 --> 00:03:56.064
Okay, so in theory we should be able
to come back over to our page here,

52
00:03:56.064 --> 00:04:00.540
refresh it, and you can see here now it's
actually is populating, I don't know why.

53
00:04:00.540 --> 00:04:03.435
I'm going to look at Brian's done for
the rest of course.

54
00:04:03.435 --> 00:04:07.136
[LAUGH] But there you go, you can see
it's actually pulling this down from

55
00:04:07.136 --> 00:04:09.927
the server and
if we look down here in our network tab.

56
00:04:09.927 --> 00:04:14.483
Make sure that it's just
we'll look at just XHR,

57
00:04:14.483 --> 00:04:20.020
you can see here this is getting
called every three seconds.

58
00:04:24.562 --> 00:04:28.258
This is like the most simple real time
thing that you can do is just call

59
00:04:28.258 --> 00:04:29.230
it a lot, right.

60
00:04:29.230 --> 00:04:33.332
Call it every three seconds and see what
what's coming back with because we have no

61
00:04:33.332 --> 00:04:35.245
other clients connected to our chat.

62
00:04:35.245 --> 00:04:39.159
Obviously nothing is coming back but
we would be able to see that here.

63
00:04:41.407 --> 00:04:46.212
He would update automatically,
so let's go do the post new

64
00:04:46.212 --> 00:04:51.510
message part of this, so
we're here under the post new message.

65
00:04:53.260 --> 00:04:58.112
Again, this is just a normal HTTP POST,
there's nothing special here,

66
00:04:58.112 --> 00:05:01.337
I promise I'm only making
read this once today.

67
00:05:01.337 --> 00:05:05.960
So we're going to say const
data equals user and text,

68
00:05:05.960 --> 00:05:09.679
if you're not familiar with this feature,

69
00:05:09.679 --> 00:05:15.220
notice we have something called user and
something called text.

70
00:05:16.390 --> 00:05:21.152
We're gonna call this user user and
text text, right, but

71
00:05:21.152 --> 00:05:27.933
with JavaScript new feature, you can just
call it user and text and that is implied.

72
00:05:27.933 --> 00:05:33.299
So now we have a object called data
that we can send back to the API,

73
00:05:33.299 --> 00:05:40.991
here we're gonna say const,
options =, It's a POST.

74
00:05:43.227 --> 00:05:47.782
The body is JSON.stringify data, and

75
00:05:47.782 --> 00:05:55.786
the headers will let it know that
it's aptly application type JSON,

76
00:05:55.786 --> 00:06:00.770
so Content- Type: application/json.

77
00:06:00.770 --> 00:06:06.199
This is probably stuff you've all written

78
00:06:06.199 --> 00:06:11.474
a million times I have and then down here,

79
00:06:11.474 --> 00:06:18.109
we're gonna say constra
equals await fetch sorry,

80
00:06:18.109 --> 00:06:22.783
not a weight fetch/ poll options and

81
00:06:22.783 --> 00:06:29.418
then const JSON equals
await rez.Jason like that,

82
00:06:29.418 --> 00:06:33.685
so you'll get this object back.

83
00:06:33.685 --> 00:06:36.901
I don't know if you were sending anything
back with your response mind just as

84
00:06:36.901 --> 00:06:40.120
status okay here which in reality,
we don't really need that much, right?

85
00:06:40.120 --> 00:06:43.537
We don't really care what response
comes back as long as it succeeds.

86
00:06:43.537 --> 00:06:47.140
So if you wanted to, you could actually
just get rid of this line altogether.

87
00:06:47.140 --> 00:06:51.365
And then we could actually get rid of this
Raz right there and just saved fetch.

88
00:06:51.365 --> 00:06:55.190
You could probably even get rid of
the await technically if you wanted to.

89
00:06:55.190 --> 00:07:01.108
Actually, you could even say return that
actually be the most correct thing to do.

90
00:07:01.108 --> 00:07:04.525
Anyway, it does not matter what you do,
right as long as you call fetch here,

91
00:07:04.525 --> 00:07:07.699
it doesn't matter, we're gonna we're
just gonna leave it at a wait.

92
00:07:13.607 --> 00:07:19.820
Okay, so come back over here again, make
sure you're refreshing the page, yeah.

93
00:07:19.820 --> 00:07:23.003
&gt;&gt; What about handling long requests?

94
00:07:23.003 --> 00:07:25.310
Like if the server takes time to respond?

95
00:07:25.310 --> 00:07:28.649
&gt;&gt; Sure, good question,
so the question is,

96
00:07:28.649 --> 00:07:33.452
what happens if the server takes
a really long time to respond?

97
00:07:33.452 --> 00:07:37.220
The nice thing is that's kind of like
a built in assumption of our code here.

98
00:07:37.220 --> 00:07:40.549
In particular with a set
timeout that it won't,

99
00:07:40.549 --> 00:07:45.270
queue itself to run until this
previous request has finished right.

100
00:07:45.270 --> 00:07:48.427
So at most we will only ever
have one of these running,

101
00:07:48.427 --> 00:07:53.070
because the only way that this runs again
is if it calls itself right down here.

102
00:07:54.840 --> 00:07:59.409
So if it takes a long time to respond,
that's fine, it's gonna be just fine.

103
00:07:59.409 --> 00:08:03.157
Now, the problem that we do have here
with Des code is if there is an error,

104
00:08:03.157 --> 00:08:05.450
then we have another problem, right?

105
00:08:05.450 --> 00:08:07.815
Actually, you know what, that's not
even true, cuz I don't return here.

106
00:08:07.815 --> 00:08:11.336
So even if there's an error, you'll get a
bunch of stuff in your console yelling at

107
00:08:11.336 --> 00:08:13.070
you that this is impossible.

108
00:08:13.070 --> 00:08:17.427
But it'll actually we'll schedule itself
again because we do our try catch here.

109
00:08:17.427 --> 00:08:21.751
So it'll work, I think is the answer
to that person's question is yeah,

110
00:08:21.751 --> 00:08:23.300
it should work just fine.

111
00:08:28.289 --> 00:08:32.434
Okay, so let's go test our post here,
so if I say Brian here and

112
00:08:32.434 --> 00:08:36.620
I click Submit,
actually I have to refresh the page.

113
00:08:36.620 --> 00:08:38.806
So make sure every time that
you change the front end,

114
00:08:38.806 --> 00:08:40.368
make sure you got to refresh the page.

115
00:08:40.368 --> 00:08:46.310
So I should be able to hit Submit here and
you'll see here, it does pop up here.

116
00:08:52.700 --> 00:08:58.080
Pretty cool, right?

117
00:08:58.080 --> 00:09:02.036
And you can change the name here
to be Mark and you can say,

118
00:09:02.036 --> 00:09:10.226
I also think Bryan has done And
you can see that also shows up there.

119
00:09:13.700 --> 00:09:17.669
So what's awesome here as well,

120
00:09:17.669 --> 00:09:22.645
let's say I opened another window here.

121
00:09:27.260 --> 00:09:31.234
So if I come over here and
I say, I don't know.

122
00:09:32.508 --> 00:09:34.165
I should also says.

123
00:09:40.760 --> 00:09:44.159
Something like that, right?

124
00:09:44.159 --> 00:09:48.341
So that'll show up here but now if I go
back to my other one notice that it's

125
00:09:48.341 --> 00:09:50.303
actually showing up here as well.

126
00:09:50.303 --> 00:09:54.247
So it actually be broadcasting out to
every single one of the endpoints,

127
00:09:54.247 --> 00:09:56.908
to the all the other
clients that are listening.

128
00:09:59.860 --> 00:10:04.579
And this is the most Basic low level
simplest implementation of real

129
00:10:04.579 --> 00:10:07.078
time that you could get to, right?

130
00:10:07.078 --> 00:10:09.650
We wrote an endpoint, we call it a lot and

131
00:10:09.650 --> 00:10:13.830
now all of our various different
clients are listening, right?

132
00:10:13.830 --> 00:10:17.085
But they're actually its a this
technically isn't push, right,

133
00:10:17.085 --> 00:10:19.540
so it's not the server
pushing data to the client,

134
00:10:19.540 --> 00:10:22.410
it's actually the server just
asking a whole lot, right?

135
00:10:22.410 --> 00:10:24.419
It's just saying, hey,
do you have new data yet and

136
00:10:24.419 --> 00:10:26.900
it's just gonna keep asking
that until that's true.

137
00:10:26.900 --> 00:10:32.136
&gt;&gt; So it'd be better if we called get
new message every time whenever posts,

138
00:10:32.136 --> 00:10:33.994
new messages, call it but

139
00:10:33.994 --> 00:10:39.241
then we don't have to keep sending
the request, but how could we do that?

140
00:10:39.241 --> 00:10:43.542
&gt;&gt; Sure, I think the question being asked
is basically, I'm sending a post message

141
00:10:43.542 --> 00:10:47.235
and then I'm just waiting for
that message to come back to me, right?

142
00:10:47.235 --> 00:10:50.818
So if you go look at the code here,
when you call post new message,

143
00:10:50.818 --> 00:10:52.721
it just fires us off into the void.

144
00:10:52.721 --> 00:10:57.496
And then we have the assumption here, that
later that message is gonna come back in

145
00:10:57.496 --> 00:11:00.850
the next round of get new messages, right?

146
00:11:00.850 --> 00:11:02.327
Which is a terrible user experience,
right?

147
00:11:02.327 --> 00:11:07.730
Imagine that someone's on like, 2g out
in the middle of the, middle of nowhere.

148
00:11:07.730 --> 00:11:13.888
That round trip can be quite long, so this
works for our very simple implementation,

149
00:11:13.888 --> 00:11:18.335
but if this was your production code,
it wouldn't be great,

150
00:11:18.335 --> 00:11:22.720
the way that I would handle that
is basically what I would do.

151
00:11:22.720 --> 00:11:26.370
Is I would have every message
have an ID probably generated,

152
00:11:26.370 --> 00:11:29.747
I don't know either from the client or
from the server.

153
00:11:29.747 --> 00:11:34.642
I would then attach that ID to the message
and then I would actually just add that

154
00:11:34.642 --> 00:11:38.364
message to my all chat here and
call re render immediately.

155
00:11:38.364 --> 00:11:40.315
Instead of post new messages and

156
00:11:40.315 --> 00:11:45.300
then it would immediately show the user
their message that they just posted.

157
00:11:45.300 --> 00:11:49.308
And then when the next round of
messages came back from the server,

158
00:11:49.308 --> 00:11:51.956
I would deduplicate
make sure that whatever

159
00:11:51.956 --> 00:11:56.125
messages that I've posted since
then don't show up twice, right?

160
00:11:56.125 --> 00:11:58.170
That would be a really
good way of doing it.

161
00:11:58.170 --> 00:12:02.940
Yeah, there's some intelligence
that you could add here.

162
00:12:02.940 --> 00:12:04.767
Like a good thing that we could do,

163
00:12:04.767 --> 00:12:08.673
instead of just getting all the messages
all the time, we could basically

164
00:12:08.673 --> 00:12:12.015
say give me all new messages since
the last one that you sent me.

165
00:12:12.015 --> 00:12:16.504
Right, and then we can actually just get
a delta of like, instead of getting all 50

166
00:12:16.504 --> 00:12:20.362
messages every single time, we could
get only the last five messages and

167
00:12:20.362 --> 00:12:23.930
then we could kind of shrink
that packet size as well.

168
00:12:23.930 --> 00:12:27.963
So there's a bunch of strategies here and
the cool thing is like I'm just showing

169
00:12:27.963 --> 00:12:31.068
you like the transport layer of
talking between the clients.

170
00:12:31.068 --> 00:12:34.819
You can actually go back later and
re-implement some of these more advanced

171
00:12:34.819 --> 00:12:37.470
strategies of making this
a better user experience.

172
00:12:39.180 --> 00:12:44.174
Hopefully answer that person's question
which is basically show them something

173
00:12:44.174 --> 00:12:46.135
now and then D duplicate later.

174
00:12:46.135 --> 00:12:51.779
So what you see now is what is inside the,

175
00:12:51.779 --> 00:12:55.100
no pause section here.

176
00:12:57.190 --> 00:13:00.565
So if you got behind or if you just wanna
start from the same place that we're all

177
00:13:00.565 --> 00:13:04.165
starting from or something like that, feel
free to just hop on to no pause, right?

178
00:13:04.165 --> 00:13:06.132
It's all basically the same code.

