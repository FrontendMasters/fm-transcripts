WEBVTT

1
00:00:00.150 --> 00:00:03.798
Okay, so this course has been tested on
MacOS and Windows and if it works on Mac,

2
00:00:03.798 --> 00:00:05.055
it's gonna work on Linux.

3
00:00:05.055 --> 00:00:10.683
So both should work pretty well for you.

4
00:00:10.683 --> 00:00:15.592
In particular, you could probably get
by on 4Gigs of RAM on this course.

5
00:00:15.592 --> 00:00:18.896
I'm not inviting you to try it,
it might be miserable, but

6
00:00:18.896 --> 00:00:20.692
I think everything would work.

7
00:00:20.692 --> 00:00:24.759
If you're at 8, you're golden.

8
00:00:24.759 --> 00:00:28.307
Some prerequisites,
you definitely do need to install Node.js,

9
00:00:28.307 --> 00:00:30.369
there's a bunch of ways to set that up.

10
00:00:30.369 --> 00:00:33.059
I use ndm personally.

11
00:00:33.059 --> 00:00:36.812
For the version of Node that I'm on for
this course, let me just check.

12
00:00:39.414 --> 00:00:42.254
I'm on 14.17.

13
00:00:42.254 --> 00:00:45.664
If you're 12 or above, you should be good.

14
00:00:45.664 --> 00:00:49.134
Honestly, if you're,
well, let's stick to 14.

15
00:00:54.712 --> 00:00:57.237
I will be using Visual Studio Code.

16
00:00:57.237 --> 00:00:59.852
I used to be the product manager for
Visual Studio Code.

17
00:00:59.852 --> 00:01:02.224
But you don't have to.

18
00:01:02.224 --> 00:01:04.450
Nothing in here will be specific to that.

19
00:01:04.450 --> 00:01:07.934
People always ask me what my font is,
it's Dank Mono.

20
00:01:07.934 --> 00:01:09.479
I left some instructions there.

21
00:01:09.479 --> 00:01:12.534
Cascadia Code is another
one that I use a lot.

22
00:01:12.534 --> 00:01:16.782
I'm using Dark+, I use ITem2 or

23
00:01:16.782 --> 00:01:20.744
the Terminal and VS Code Icons.

24
00:01:20.744 --> 00:01:22.464
So, yeah, I left all that stuff here.

25
00:01:22.464 --> 00:01:24.343
It's usually the first thing
after I finish this course,

26
00:01:24.343 --> 00:01:26.274
people tweet me and it's like Brian,
what were you using?

27
00:01:26.274 --> 00:01:30.775
So that's how I just get ahead of it and
leave that here.

28
00:01:30.775 --> 00:01:36.067
Okay, so important here,
come here to this repo which

29
00:01:36.067 --> 00:01:41.490
is on my GitHub and
it's called realtime-exercises.

30
00:01:41.490 --> 00:01:44.169
So what I want you to do here
is I would like you to fork it,

31
00:01:44.169 --> 00:01:47.652
you don't have to fork it, you can
actually just clone it if you want to.

32
00:01:47.652 --> 00:01:51.437
However, I'm gonna tell you that I
think it's better if you fork it,

33
00:01:51.437 --> 00:01:55.814
because then you can do all your exercises
and you can push them back up to GitHub.

34
00:01:55.814 --> 00:01:57.804
And then you can refer back to it later.

35
00:01:57.804 --> 00:02:00.581
It's just good to keep
a copy of these things.

36
00:02:00.581 --> 00:02:06.026
So at that point I would fork it and
then you can clone it here.

37
00:02:06.026 --> 00:02:10.335
If you're not familiar with Git, just
go ahead and do it with GitHub Desktop,

38
00:02:10.335 --> 00:02:14.999
that makes things a lot easier or you can
download a zip, honestly that's fine too.

39
00:02:14.999 --> 00:02:18.770
And then you'll end up with this
project which you see here.

40
00:02:20.780 --> 00:02:24.344
So, a couple of things here.

41
00:02:24.344 --> 00:02:27.552
We have three project folders here kinda
separated by technology that we're

42
00:02:27.552 --> 00:02:28.252
gonna be doing.

43
00:02:28.252 --> 00:02:30.973
The first one we'll be doing is pulling.

44
00:02:30.973 --> 00:02:35.048
So you can see here each one
of them has exercise and

45
00:02:35.048 --> 00:02:39.040
then one to three other folders of code,
right?

46
00:02:39.040 --> 00:02:40.863
These are actually all complete projects.

47
00:02:40.863 --> 00:02:44.393
So if you go into the no-pause one,
you can see here,

48
00:02:44.393 --> 00:02:47.073
it's actually the complete code here.

49
00:02:47.073 --> 00:02:50.139
So the reason why I've done this is so
that if you get lost or

50
00:02:50.139 --> 00:02:52.580
if you wanna see what I
did versus what you did,

51
00:02:52.580 --> 00:02:55.660
you can always go look at these
kind of complete projects.

52
00:02:55.660 --> 00:02:59.560
We'll be starting at
where it says exercise.

53
00:02:59.560 --> 00:03:01.665
And you can see here there's
still a bunch of code in here.

54
00:03:01.665 --> 00:03:03.985
I wrote kind of the framework here.

55
00:03:03.985 --> 00:03:07.514
And then I said, write code here,
write code here, right?

56
00:03:07.514 --> 00:03:09.823
So we're kinda just be
filling in the blanks.

57
00:03:09.823 --> 00:03:14.334
We're gonna be focusing just on
the real time portion of this.

58
00:03:14.334 --> 00:03:16.158
So I just kinda did a bunch
of the other stuff so

59
00:03:16.158 --> 00:03:18.039
that we don't have to worry about it,
right?

60
00:03:18.039 --> 00:03:21.639
We shouldn't be writing CSS in
a course about real time or maybe,

61
00:03:21.639 --> 00:03:24.594
I don't know,
you might have better ideas than I do.

62
00:03:24.594 --> 00:03:29.284
But today, we're not gonna be writing
any CSS, I'll put it that way.

63
00:03:33.062 --> 00:03:36.846
Every time that you go into one
of these project directories,

64
00:03:36.846 --> 00:03:40.573
a lot of them do have a few
dependencies here, here, right?

65
00:03:40.573 --> 00:03:45.852
So all you're gonna do is say npm install
to install all of those dependencies.

66
00:03:45.852 --> 00:03:50.609
And then all of them have npm run start,
which will just start the server.

67
00:03:50.609 --> 00:03:55.649
And then npm run dev, which will actually
start the development service that every

68
00:03:55.649 --> 00:04:00.338
time that you save a file, it'll
automatically restart the folder for you.

69
00:04:00.338 --> 00:04:02.251
So today, I won't be using start at all.

70
00:04:02.251 --> 00:04:04.249
I'll just be using npm run dev.

71
00:04:07.364 --> 00:04:12.896
I think that's everything you
need to know about the project.

72
00:04:12.896 --> 00:04:15.333
Part of the course is done with Express.

73
00:04:15.333 --> 00:04:19.889
I chose Express just because
it's the most popular one.

74
00:04:19.889 --> 00:04:24.441
And then part of the course is just
done with directly using the HTTP

75
00:04:24.441 --> 00:04:26.082
module from Node.js.

76
00:04:26.082 --> 00:04:29.523
Because we wanted to get lower
level than Express allowed us to.

77
00:04:29.523 --> 00:04:31.747
There's no correct server side framework.

78
00:04:31.747 --> 00:04:34.939
If you wanna do this with Fastify or
one of the other ones,

79
00:04:34.939 --> 00:04:36.613
I'm totally fine with that.

80
00:04:36.613 --> 00:04:40.076
When I had a choice here between
doing what is right, and

81
00:04:40.076 --> 00:04:45.028
doing what's easy to teach or easy to
understand, I chose the latter, right?

82
00:04:45.028 --> 00:04:48.529
So there is some things I am doing here
that is just wildly inefficient, but

83
00:04:48.529 --> 00:04:49.259
it was simple.

84
00:04:49.259 --> 00:04:52.614
And so, what I'm trying to say here
is that some of the code here,

85
00:04:52.614 --> 00:04:56.824
I would not ship to production, but it's
gonna be a really useful teaching tool.

86
00:04:56.824 --> 00:05:01.788
So it's okay for you to look at that and
say, I wonder why Brian wrote it this way.

87
00:05:01.788 --> 00:05:03.082
Cuz it's bad, right?

88
00:05:03.082 --> 00:05:04.436
I understand that.

89
00:05:04.436 --> 00:05:08.154
[LAUGH] You can tweet it at me, but
I'll just tell you that I know that.

90
00:05:08.154 --> 00:05:10.485
A good example as here in polling-chat,

91
00:05:10.485 --> 00:05:14.626
this render function here is about
the dumbest thing I've ever written.

92
00:05:14.626 --> 00:05:19.231
And I've written some pretty dumb stuff
but it really just calls a map function

93
00:05:19.231 --> 00:05:22.599
and then it just resets
the innerHTML every single time.

94
00:05:22.599 --> 00:05:27.335
I rewrote dumb React,
basically, is what I did here.

95
00:05:27.335 --> 00:05:34.028
All right, so don't ship that code, that's
honestly the sum of the story there.

96
00:05:34.028 --> 00:05:39.877
On all of the front ends here,
I didn't put any build step just to,

97
00:05:39.877 --> 00:05:42.709
again, to keep it very simple.

98
00:05:42.709 --> 00:05:43.847
You're welcome.

99
00:05:43.847 --> 00:05:45.645
No one has to fight with Webpack today.

100
00:05:45.645 --> 00:05:48.444
[LAUGH] Some of these things though,

101
00:05:48.444 --> 00:05:52.374
you can see I'm loading
some stuff off of the CDN.

102
00:05:52.374 --> 00:05:57.412
So some of these pages, actually I think
all of them, you do have to be connected

103
00:05:57.412 --> 00:06:02.097
to the Internet to do just so that they
can load all their assets off of CDN.

104
00:06:02.097 --> 00:06:04.559
So that was another choice
that we made there.

105
00:06:07.970 --> 00:06:11.554
We're doing a chat client today,

106
00:06:11.554 --> 00:06:17.619
it's called Chat With Me,
cuz I am very good at branding.

107
00:06:17.619 --> 00:06:20.822
So all of the messages
are being stored in memory.

108
00:06:20.822 --> 00:06:23.271
So if you save a file
which resets the server,

109
00:06:23.271 --> 00:06:26.498
you'll drop all the messages that you had,
that's fine.

110
00:06:26.498 --> 00:06:27.893
That's to be expected.

111
00:06:27.893 --> 00:06:31.243
Again, I didn't want you to fight a
database today, or even write to file, but

112
00:06:31.243 --> 00:06:32.752
that's what you would do, right?

113
00:06:32.752 --> 00:06:36.059
That's actually kinda a stretch goal, if
you wanted to do that after this course,

114
00:06:36.059 --> 00:06:37.679
is you could go write this to a database.

115
00:06:37.679 --> 00:06:41.037
There's another database course in
Frontend Masters that someone wrote that I

116
00:06:41.037 --> 00:06:42.049
think's pretty good.

117
00:06:42.049 --> 00:06:45.109
You could take that one and that would
definitely help you out as well.

118
00:06:45.109 --> 00:06:49.770
&gt;&gt; I just wanted to ask,
just overall around WebSockets,

119
00:06:49.770 --> 00:06:55.522
if there's any sort of best practices
when it comes to deployment and

120
00:06:55.522 --> 00:06:59.805
security, there will be with some point.

121
00:06:59.805 --> 00:07:01.769
&gt;&gt; Yeah, it's a great question.

122
00:07:01.769 --> 00:07:05.215
We'll definitely talk more about it
when we get to the WebSocket section.

123
00:07:05.215 --> 00:07:07.294
So I'll kinda give you two answers.

124
00:07:07.294 --> 00:07:11.838
In general, it's still done
over HTTP to some extent, so

125
00:07:11.838 --> 00:07:18.263
it's the same things that you'd be worried
about for just normal HTTP requests.

126
00:07:18.263 --> 00:07:21.596
The one thing that's gonna
be a little bit different is

127
00:07:21.596 --> 00:07:24.214
your servers have to
hold on to some state.

128
00:07:24.214 --> 00:07:28.354
So it can be difficult because you'll have
different states talking to different

129
00:07:28.354 --> 00:07:31.605
clients and you kinda wanna
unify that communication, right?

130
00:07:31.605 --> 00:07:35.047
So if I have three servers that
are all connected to ten clients,

131
00:07:35.047 --> 00:07:39.382
if one user writes to one server, I'd then
have to inform the other servers which

132
00:07:39.382 --> 00:07:41.970
then have to broadcast their clients,
right?

133
00:07:41.970 --> 00:07:44.631
That's just one of the considerations,

134
00:07:44.631 --> 00:07:48.744
is how do I sink that across
various different sharded servers?

135
00:07:48.744 --> 00:07:51.164
It's not actually something we're gonna
really talk about too much today.

136
00:07:51.164 --> 00:07:53.444
But there's a myriad of ways of doing it,

137
00:07:53.444 --> 00:07:57.956
including just having something like Redis
kind of handle all that stuff for you.

138
00:07:57.956 --> 00:08:00.590
So yeah, there's lots of
techniques out there for that.

