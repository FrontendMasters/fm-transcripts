WEBVTT

1
00:00:00.310 --> 00:00:04.627
You did it, congratulations,
you now know realtimy things.

2
00:00:04.627 --> 00:00:07.305
I obviously didn't show you all
of the techniques that could have

3
00:00:07.305 --> 00:00:08.140
been done for this.

4
00:00:08.140 --> 00:00:12.956
But I showed you, the ones that I would
use, these are the primary tools that

5
00:00:12.956 --> 00:00:17.108
I would reach for if I had to do
some sort of realtime application.

6
00:00:17.108 --> 00:00:23.170
We spoke a bit about WS,
we spoke about HTTP2.

7
00:00:23.170 --> 00:00:27.295
Two of the more interesting ones that
we didn't talk about, one's WebRTC,

8
00:00:27.295 --> 00:00:29.460
which is like peer to peer connections.

9
00:00:29.460 --> 00:00:34.374
So if you want to have a chat room, but
the traffic is actually going from you

10
00:00:34.374 --> 00:00:38.430
to another user and
it doesn't go through a server, maybe for

11
00:00:38.430 --> 00:00:43.920
privacy reasons, maybe for
scaling reasons, many reasons like that.

12
00:00:43.920 --> 00:00:48.117
There's a spec built into the browser
called WebRTC that allows peer to peer

13
00:00:48.117 --> 00:00:49.110
communication.

14
00:00:50.540 --> 00:00:54.783
A good example that I was informed of
is Twitch uses it quite a bit to get

15
00:00:54.783 --> 00:00:57.723
their latencies down for
a variety of reasons.

16
00:00:57.723 --> 00:01:01.449
And they have a pretty impressive
web scaling from peer to peer so

17
00:01:01.449 --> 00:01:05.934
that they can have users be able to watch
the stream sooner with less bandwidth

18
00:01:05.934 --> 00:01:09.730
overhead, both for
themselves and for other people.

19
00:01:09.730 --> 00:01:14.940
So WebRTC, web realtime communication,
right, that's what it stands for.

20
00:01:14.940 --> 00:01:17.180
But we weren't talking
about peer to peer today.

21
00:01:17.180 --> 00:01:18.211
For the most part,

22
00:01:18.211 --> 00:01:21.700
I don't do a lot of things that
have peer to peer communication.

23
00:01:23.190 --> 00:01:26.103
So, but it's nonetheless a very
cool piece of technology,

24
00:01:26.103 --> 00:01:27.882
you should definitely check it out.

25
00:01:27.882 --> 00:01:32.020
And then there's a new one
from Microsoft called SignalR.

26
00:01:32.020 --> 00:01:35.810
It's actually not available for Node yet.

27
00:01:35.810 --> 00:01:38.847
There's obviously a JavaScript library so

28
00:01:38.847 --> 00:01:42.299
you can use it with ASP.NET and
things like that.

29
00:01:42.299 --> 00:01:46.016
I will say that again, I used to work
at the part of Microsoft that developed

30
00:01:46.016 --> 00:01:48.500
SignalR and I'm very impressed by it.

31
00:01:48.500 --> 00:01:50.521
I wish they had a Node library for it.

32
00:01:50.521 --> 00:01:53.327
And if there had been a Node library,
I would have shown it to you.

33
00:01:53.327 --> 00:01:55.607
But it's like Socket.IO
taken even further,

34
00:01:55.607 --> 00:01:57.780
there's more features built into it.

35
00:01:57.780 --> 00:01:58.757
It's even more resilient.

36
00:01:58.757 --> 00:02:03.600
It has more transport options, it's
a very, very cool piece of technology.

37
00:02:03.600 --> 00:02:06.512
So if you're a C Sharp developer or
something like that,

38
00:02:06.512 --> 00:02:10.750
definitely something that's worth
your time and to check out.

39
00:02:10.750 --> 00:02:14.018
If you've ever heard of Blazor,
which again, I'm not a C Sharp person,

40
00:02:14.018 --> 00:02:17.602
I never written it, but Blazor is the idea
that you can write C sharp basically for

41
00:02:17.602 --> 00:02:18.306
the frontend.

42
00:02:18.306 --> 00:02:22.440
And then they use web assembly to compile
it, so that it can run in the browser.

43
00:02:22.440 --> 00:02:25.360
The connection layer between
a Blazor backend and

44
00:02:25.360 --> 00:02:29.560
a Blazor frontend is done
through SignalR frequently.

45
00:02:29.560 --> 00:02:34.029
What's really cool about that
is they can basically shift

46
00:02:34.029 --> 00:02:36.682
where the code is being executed.

47
00:02:36.682 --> 00:02:40.746
So if you have a really slow client, you
can move all of that code being executed

48
00:02:40.746 --> 00:02:43.889
to the server, it does all
the processing on the server, and

49
00:02:43.889 --> 00:02:47.095
then sends the results down to the client.

50
00:02:47.095 --> 00:02:50.933
And it can kind of move that skill, let's
say, one person has a low-end Android

51
00:02:50.933 --> 00:02:54.487
phone, one person has a brand new iPhone,
the brand new iPhone can do all of

52
00:02:54.487 --> 00:02:57.501
the processing so it sends all of
the code to the iPhone to do it.

53
00:02:57.501 --> 00:03:01.536
On the low-end Android phone,
all processing will be done on server and

54
00:03:01.536 --> 00:03:03.798
the results are sent down to the client.

55
00:03:03.798 --> 00:03:06.538
And that's how they are communicated
over something like SignalR.

56
00:03:08.551 --> 00:03:13.710
So it's cool, you should check it,
especially if you are a C Sharp developer.

57
00:03:13.710 --> 00:03:18.408
In theory, they should someday release a
Node client or a Node library for it, but

58
00:03:18.408 --> 00:03:19.714
that day is not today.

59
00:03:23.603 --> 00:03:26.150
Cool and that's it.

60
00:03:26.150 --> 00:03:29.950
That is the complete intro to realtime.

61
00:03:29.950 --> 00:03:33.949
Before we wrap up, does anyone have any
questions about any realtime things and/or

62
00:03:33.949 --> 00:03:36.560
dating advice that's,
it's good form for that too?

63
00:03:39.060 --> 00:03:40.205
Yeah.

64
00:03:40.205 --> 00:03:43.358
&gt;&gt; Just a recommendation of a resource,

65
00:03:43.358 --> 00:03:49.780
High Performance Browser Networking,
this book helped with browser APIs.

66
00:03:49.780 --> 00:03:52.485
&gt;&gt; Yeah, yeah,
I think it's an O'Reilly book.

67
00:03:52.485 --> 00:03:57.129
I'm sure they talk about a lot of that
kind of even even lower level stuff that I

68
00:03:57.129 --> 00:03:58.427
talked about today.

69
00:03:58.427 --> 00:04:00.610
So, that is a good recommendation.

70
00:04:01.760 --> 00:04:04.972
&gt;&gt; Let's say we have some data
to send from server to browser,

71
00:04:04.972 --> 00:04:07.610
let's say an array of 200 objects.

72
00:04:07.610 --> 00:04:08.750
What solution is better?

73
00:04:08.750 --> 00:04:13.715
Sending a signal of some kind of event
to the browser, and expose this data

74
00:04:13.715 --> 00:04:19.030
on standard HTTP endpoint, or
just send data in the WebSocket message.

75
00:04:19.030 --> 00:04:23.030
I saw different solutions on the Internet
and I don't know which one is correct.

76
00:04:23.030 --> 00:04:27.948
Sending via WebSockets looks much simpler,
is there any reason why not to?

77
00:04:27.948 --> 00:04:29.770
&gt;&gt; Good question.

78
00:04:29.770 --> 00:04:35.388
So the question largely revolves around
this idea of the hybrid approach,

79
00:04:35.388 --> 00:04:41.004
which is basically, and which is a super
valid approach by the way of like,

80
00:04:41.004 --> 00:04:43.337
you have very large payloads.

81
00:04:43.337 --> 00:04:48.480
Or maybe just intensive payloads is
probably a better way of putting it.

82
00:04:48.480 --> 00:04:54.260
Is it better to immediately push
the entire payload onto the client?

83
00:04:54.260 --> 00:04:57.827
Or is it better to just inform the client
with a very lightweight event?

84
00:04:57.827 --> 00:04:59.980
There are resources available for
you to pull.

85
00:05:01.550 --> 00:05:05.370
So I had a couple of thoughts on it and
there's not a right answer here.

86
00:05:05.370 --> 00:05:09.760
There's not just a hard and fast rule,
it's gonna depend on your implementation.

87
00:05:12.900 --> 00:05:19.970
The hybrid model is really nice for
maybe the client doesn't want it.

88
00:05:21.370 --> 00:05:29.300
So let's say it's maybe you have a friend
list that's like 1,000 people long.

89
00:05:29.300 --> 00:05:33.041
It's really expensive to send you the
complete list of all your friends online,

90
00:05:33.041 --> 00:05:36.520
offline, not available, be right back,
right, all that kind of stuff.

91
00:05:38.030 --> 00:05:41.279
Well, if the user is paying,
like friend paying is not open,

92
00:05:41.279 --> 00:05:45.370
it's not super useful to send them
all their friend information.

93
00:05:45.370 --> 00:05:48.467
Then maybe you wanna show them a little
tick mark that says like, hey,

94
00:05:48.467 --> 00:05:50.280
stuff changed, right?

95
00:05:50.280 --> 00:05:55.058
In which case that kind of hybrid model
of, hey, let the client know something's

96
00:05:55.058 --> 00:05:59.090
different but wait for them to pull
the actual information, right?

97
00:06:00.850 --> 00:06:05.592
So I guess kind of the rules that I'm
getting out here would be more around

98
00:06:05.592 --> 00:06:09.661
really how expensive is it to
send that large package of data.

99
00:06:09.661 --> 00:06:13.078
If it's not expensive in
terms of computation,

100
00:06:13.078 --> 00:06:16.922
usually the transport's not
the biggest deal there.

101
00:06:16.922 --> 00:06:20.049
But in terms of computation, if it's not
that expensive, just send it, right?

102
00:06:20.049 --> 00:06:22.820
Simplicity almost always
makes things better.

103
00:06:22.820 --> 00:06:26.300
So the fact you don't have to
do this hybrid push pull model,

104
00:06:26.300 --> 00:06:29.849
it's much better if you just make
it simple and just push it and

105
00:06:29.849 --> 00:06:32.458
let the client do whatever
they want with it.

106
00:06:32.458 --> 00:06:37.719
If it's not that easy, then it makes
sense to do more of the hybrid push pull

107
00:06:37.719 --> 00:06:42.910
models of like send the event and wait for
the client to try and pull it out.

108
00:06:44.170 --> 00:06:45.287
That can make some sense.

109
00:06:45.287 --> 00:06:49.162
So yeah, when you can err on the side
of simplicity, always go for

110
00:06:49.162 --> 00:06:53.540
simplicity in terms of code,
in terms of user experiences, all of that.

111
00:06:55.030 --> 00:06:56.780
When that doesn't work,

112
00:06:56.780 --> 00:07:01.720
then make it a little bit more
complicated to solve your problem, right?

