WEBVTT

1
00:00:00.246 --> 00:00:03.930
Hopefully by now you have cloned and
you have this repo locally.

2
00:00:03.930 --> 00:00:05.479
I'm gonna put my VS code here.

3
00:00:09.580 --> 00:00:11.753
I put a couple of other files in here.

4
00:00:11.753 --> 00:00:13.789
There's a prettier file, just so

5
00:00:13.789 --> 00:00:17.453
you can form metric code the same
way that I'm formatting it.

6
00:00:17.453 --> 00:00:22.240
If you're on VS code here,
please install the prettier extension.

7
00:00:22.240 --> 00:00:23.520
That'll help you a lot as well.

8
00:00:23.520 --> 00:00:29.589
And then you want to turn
on format on Save as well.

9
00:00:29.589 --> 00:00:31.080
What else is in here?

10
00:00:33.330 --> 00:00:36.426
There is a gitignore file for
you and an editor config.

11
00:00:36.426 --> 00:00:40.205
You have to install an editor
config extension as well.

12
00:00:40.205 --> 00:00:45.146
And this will just set all of our vs
codes to indent by two and use spaces and

13
00:00:45.146 --> 00:00:46.369
stuff like that.

14
00:00:52.092 --> 00:00:55.549
Okay, so let's hop into this,

15
00:00:55.549 --> 00:01:00.169
we're gonna start by doing long polling.

16
00:01:00.169 --> 00:01:02.390
So go ahead and
come into here we're going to exercise.

17
00:01:06.271 --> 00:01:09.130
And we're gonna be working
with this project first.

18
00:01:13.345 --> 00:01:15.553
Not in HTTP two and pulling.

19
00:01:15.553 --> 00:01:16.715
Yeah, pulling exercise.

20
00:01:16.715 --> 00:01:20.753
That's where we are right now.

21
00:01:20.753 --> 00:01:26.414
Okay, so like I said,
we are writing a chat app today, right?

22
00:01:26.414 --> 00:01:28.029
So I'm a product manager now.

23
00:01:28.029 --> 00:01:31.726
So I think about everything in
terms of product requirements and

24
00:01:31.726 --> 00:01:35.093
user demographics and
like JIRA tickets unfortunately.

25
00:01:35.093 --> 00:01:37.397
Sorry to anyone that works at Atlassian.

26
00:01:37.397 --> 00:01:40.294
Let's think about
the product requirements for

27
00:01:40.294 --> 00:01:43.762
someone that's going to actually
be using a chat client.

28
00:01:43.762 --> 00:01:47.666
Like if I if I'm What kind of
person is going to your website,

29
00:01:47.666 --> 00:01:50.284
what am I going to be
able to expect to do?

30
00:01:50.284 --> 00:01:54.357
I mean expect to be able to post new
messages to see old messages right so

31
00:01:54.357 --> 00:01:59.400
when I first connect I can see like,
I have some history of other messages.

32
00:01:59.400 --> 00:02:01.022
I need to be able to see
my own messages right?

33
00:02:01.022 --> 00:02:04.093
If I post something I should be able
to kind of meet see that reflected in

34
00:02:04.093 --> 00:02:05.040
the user interface.

35
00:02:06.110 --> 00:02:08.099
And then as new messages roll in,

36
00:02:08.099 --> 00:02:11.591
I want to see those in a reasonable
amount of time, right?

37
00:02:11.591 --> 00:02:14.176
Because if it's like a long delay,
if I post a message,

38
00:02:14.176 --> 00:02:16.580
then it takes 30 seconds to show up.

39
00:02:16.580 --> 00:02:17.984
It's not really chat anymore, right?

40
00:02:17.984 --> 00:02:19.545
It's like a crappy email client.

41
00:02:19.545 --> 00:02:24.627
[LAUGH] Like it's the worst middle ground
between those two different products.

42
00:02:24.627 --> 00:02:27.999
So real time here is actually fairly
important that we need to have some sort

43
00:02:27.999 --> 00:02:30.260
of tight feedback cycle for
all of our users here.

44
00:02:32.020 --> 00:02:37.178
So it wouldn't be just enough to
say on page load, load the history.

45
00:02:37.178 --> 00:02:38.570
I'm done right?

46
00:02:38.570 --> 00:02:41.241
You need to have some
sort of strategy of like,

47
00:02:41.241 --> 00:02:44.390
I'm gonna keep pulling
messages out of the server, so

48
00:02:44.390 --> 00:02:48.922
that users can feel like they're actually
engaged with whatever is going on.

49
00:02:48.922 --> 00:02:53.240
So, the first one we're gonna be talking
about the first strategy for doing this.

50
00:02:53.240 --> 00:02:57.562
And basically, everything that we're doing
today is just a different strategy on

51
00:02:57.562 --> 00:02:59.981
what do we do with how do
we make this real time.

52
00:02:59.981 --> 00:03:02.710
he first one we're gonna be
doing is called long polling.

53
00:03:02.710 --> 00:03:07.382
And which is just a really fancy way of
saying, make a whole lot of requests,

54
00:03:07.382 --> 00:03:07.894
right?

55
00:03:07.894 --> 00:03:10.480
It's actually really not even
more complicated than that.

56
00:03:10.480 --> 00:03:13.924
Really all you're gonna be
doing is just make a request.

57
00:03:13.924 --> 00:03:16.460
See if something's new and then like.

58
00:03:16.460 --> 00:03:19.917
Three seconds later, five seconds later,
10 seconds later asked again.

59
00:03:19.917 --> 00:03:21.720
Okay, how about now, right?

60
00:03:21.720 --> 00:03:24.402
You just keep making requests over and
over and over again.

61
00:03:26.840 --> 00:03:28.232
So what's like some keys here?

62
00:03:28.232 --> 00:03:32.240
We're gonna make some sort of endpoints
that we can call over and over again.

63
00:03:32.240 --> 00:03:37.846
So if you imagine that you have, 10,000
users, and they're all making a request

64
00:03:37.846 --> 00:03:43.017
every two seconds, that endpoint is going
to see a whole lot of traffic, right?

65
00:03:43.017 --> 00:03:45.910
So you need to get everything that's
like hot out of that code path.

66
00:03:45.910 --> 00:03:49.835
So if you can't be writing to the database
every single time that someone calls that

67
00:03:49.835 --> 00:03:50.628
pull endpoint.

68
00:03:50.628 --> 00:03:54.300
Or else we're gonna have a very,
very overwhelmed database, right?

69
00:03:54.300 --> 00:03:58.539
So that's the big key here is you want to
make sure that whatever you're pulling

70
00:03:58.539 --> 00:04:00.132
endpoint is it's very fast.

71
00:04:00.132 --> 00:04:04.445
And it's not going to knock over your
servers because essentially what you're

72
00:04:04.445 --> 00:04:07.980
going to do at the end of the day
is your DDOS yourself if you're not

73
00:04:07.980 --> 00:04:09.810
careful, right?

74
00:04:09.810 --> 00:04:12.372
DDOS stands for
Distributed Denial of Service, right?

75
00:04:12.372 --> 00:04:15.490
Which is basically like hackers
way of bringing down services.

76
00:04:15.490 --> 00:04:17.172
They just make a tonne of requests, right?

77
00:04:17.172 --> 00:04:20.076
You're basically writing
that against yourself.

78
00:04:22.797 --> 00:04:25.992
The first thing that people always want
to do is like, I know how to do this,

79
00:04:25.992 --> 00:04:27.533
I'm gonna use set interval, right?

80
00:04:27.533 --> 00:04:30.224
Which is actually the worst way that
we could possibly do this, right?

81
00:04:30.224 --> 00:04:33.937
So set interval is a function in
JavaScript that basically says,

82
00:04:33.937 --> 00:04:36.580
take this function and
run it every x seconds.

83
00:04:37.660 --> 00:04:40.362
So let's say I took my polling function,
I said, Hey,

84
00:04:40.362 --> 00:04:42.791
call this polling function
every three seconds.

85
00:04:42.791 --> 00:04:45.680
What happens if my API takes
four seconds to respond?

86
00:04:45.680 --> 00:04:51.488
I'm going to start making requests before
the other one has finished, right?

87
00:04:51.488 --> 00:04:55.372
Which is going to be a huge problem
because now I'm going to have stale data

88
00:04:55.372 --> 00:04:56.070
rolling in.

89
00:04:56.070 --> 00:05:00.911
And I'm also going to be making
requests before they even come back in.

90
00:05:00.911 --> 00:05:02.670
So don't use set interval.

91
00:05:02.670 --> 00:05:05.252
I'm just saying that upfront because
I know everyone's thinking that.

92
00:05:05.252 --> 00:05:08.560
And I just want to cut that off
before we get anything out there.

93
00:05:08.560 --> 00:05:11.557
The first one we're gonna be
doing is with set timeout.

94
00:05:11.557 --> 00:05:14.140
But we'll get into that in just a second.

95
00:05:14.140 --> 00:05:16.080
So let's hop into pulling back end.

96
00:05:22.930 --> 00:05:28.827
Okay, so first thing here,
we're gonna go into polling/exercise here.

97
00:05:28.827 --> 00:05:35.170
I've actually run npm install to make
sure you're running npm install here.

98
00:05:36.610 --> 00:05:38.291
This will just go install
the dependencies.

99
00:05:38.291 --> 00:05:40.555
You can see it's only 173.

100
00:05:40.555 --> 00:05:45.327
Which given the context of node,

101
00:05:45.327 --> 00:05:49.765
it's not that many packages.

102
00:05:49.765 --> 00:05:51.500
The backend was under with express.

103
00:05:52.510 --> 00:05:54.074
That's fine.

104
00:05:54.074 --> 00:05:57.020
Again if you need some help with that,
take Scott masters course.

105
00:05:57.020 --> 00:05:57.630
It's great.

106
00:05:57.630 --> 00:06:00.524
Yeah, looking here at
the other dependencies,

107
00:06:00.524 --> 00:06:05.030
there's body parser actually don't
think this is necessary anymore.

108
00:06:05.030 --> 00:06:08.287
But this was I just
installed this out of habit.

109
00:06:08.287 --> 00:06:14.860
Morgan is a logging framework so we can
actually see all the requests coming in.

110
00:06:14.860 --> 00:06:17.407
And the nano buffer is
basically a limited array.

111
00:06:17.407 --> 00:06:19.660
So, we make an array of length 50.

112
00:06:19.660 --> 00:06:22.658
And then when something newer comes in and
it's at length 50,

113
00:06:22.658 --> 00:06:24.387
I'll just pop one off the end right?

114
00:06:24.387 --> 00:06:27.460
So, at most we'll have 50
messages in our backlog.

115
00:06:27.460 --> 00:06:32.045
I could have written this myself, but
I was way too lazy to do that, so

116
00:06:32.045 --> 00:06:35.305
that's how we brought in
Nana buffer to do that.

117
00:06:35.305 --> 00:06:38.990
And then I'm always interested to ask
people how do you pronounce that word?

118
00:06:40.570 --> 00:06:44.858
And the correct pronunciation for
it is there is no correct pronunciation.

119
00:06:44.858 --> 00:06:46.820
I found that out from the author.

120
00:06:46.820 --> 00:06:51.664
[LAUGH] So I would say no daman or you can
say no demon if you'd like Pokemon I don't

121
00:06:51.664 --> 00:06:54.140
know I'm always torn of how to say that.

122
00:06:54.140 --> 00:07:00.909
But we'll go with no daman because
that's just what comes to mind, okay?

123
00:07:00.909 --> 00:07:04.254
So let's hop into the backend here.

124
00:07:04.254 --> 00:07:06.790
There's one server.js file here.

125
00:07:06.790 --> 00:07:08.487
And again, I wrote a lot of this for you.

126
00:07:08.487 --> 00:07:12.060
But let's just kind of
take a tour around here.

127
00:07:12.060 --> 00:07:15.146
I am using ES modules,
which is fairly new for node,

128
00:07:15.146 --> 00:07:17.475
but I was pretty excited to write this.

129
00:07:17.475 --> 00:07:19.800
And I'm making you read it too.

130
00:07:19.800 --> 00:07:22.969
This is the future of how Node JS
will continue to be written.

131
00:07:22.969 --> 00:07:26.120
So I would say get used to it.

132
00:07:26.120 --> 00:07:30.248
I think you have to actually set
a flag in your life too many

133
00:07:30.248 --> 00:07:33.950
package that Jason's here,
yeah, type module.

134
00:07:33.950 --> 00:07:35.630
It won't work unless you do that.

135
00:07:35.630 --> 00:07:37.258
So we talked about nano buffer.

136
00:07:37.258 --> 00:07:38.520
This is like our limited array.

137
00:07:38.520 --> 00:07:41.068
And then I wrote a function here.

138
00:07:41.068 --> 00:07:43.352
To give it to you in the correct order, so

139
00:07:43.352 --> 00:07:47.929
you don't have to interact directly with
MSG, you can just call get messages and

140
00:07:47.929 --> 00:07:51.919
it'll give you the last 50 order
messages in reverse sort, right?

141
00:07:51.919 --> 00:07:56.177
Because we want the newest messages first.

142
00:07:56.177 --> 00:07:58.530
And then I pushed a message in here for
you.

143
00:07:58.530 --> 00:08:04.102
You can change this if you want, you can
say Brian Is dumb or something like that?

144
00:08:04.102 --> 00:08:05.120
I don't know.

145
00:08:05.120 --> 00:08:09.719
I don't know why Brian would say that but
I guess that's what he's gonna say now.

146
00:08:09.719 --> 00:08:12.238
Here we're getting express ready to run.

147
00:08:12.238 --> 00:08:17.144
We use Morgan to our logging framework we
use body parser you can see it's crossed

148
00:08:17.144 --> 00:08:19.467
out I think because it is deprecated.

149
00:08:19.467 --> 00:08:24.129
I don't remember how to do it off top my
head so we're gonna leave this works,

150
00:08:24.129 --> 00:08:24.930
it's fine.

151
00:08:27.793 --> 00:08:32.355
And then we serve everything from
front end statically which is just

152
00:08:32.355 --> 00:08:37.400
basically Serve the index HTML,
serve the style.CSS, all that stuff.

153
00:08:37.400 --> 00:08:39.080
That's what all that does, okay?

154
00:08:39.080 --> 00:08:41.875
We're gonna write some
code here in app.getpoll.

155
00:08:41.875 --> 00:08:45.721
And we're gonna write some
code here in app.postpoll.

156
00:08:45.721 --> 00:08:50.549
And then down here we're going
to start the server/ We're gonna

157
00:08:50.549 --> 00:08:52.494
listen on port 3000.

158
00:08:52.494 --> 00:08:54.973
But this can be anything, right?

159
00:08:54.973 --> 00:08:58.720
I think other parts of the course
have as 8080, it's up to you.

160
00:08:58.720 --> 00:09:02.582
And then this part here
the process that ended up port.

161
00:09:02.582 --> 00:09:04.231
I worked in cloud too long and

162
00:09:04.231 --> 00:09:08.840
I know all of them will insert
the correct port to sort of put in there.

163
00:09:08.840 --> 00:09:13.954
So if you ever tried to deploy this,
this is what your port would look like.

164
00:09:13.954 --> 00:09:15.190
So I just do it, I have it now.

165
00:09:18.615 --> 00:09:21.670
Okay, I think that's a pretty good.

166
00:09:21.670 --> 00:09:23.407
That's the back end.

167
00:09:23.407 --> 00:09:26.160
Let's go look at the front
end really quick.

168
00:09:26.160 --> 00:09:28.984
You can see I wrote some
very wonderful CSS for you.

169
00:09:28.984 --> 00:09:31.468
It's gorgeous.

170
00:09:31.468 --> 00:09:37.744
And then some pretty basic HTML here
which is just a form and that is it.

171
00:09:37.744 --> 00:09:44.079
And it's using materialise for

172
00:09:44.079 --> 00:09:47.600
the font, okay?

173
00:09:47.600 --> 00:09:52.912
And then we have pulling chat here,
that js.

174
00:09:52.912 --> 00:09:56.670
So we have two elements we're gonna
grab here a chat and messages.

175
00:09:56.670 --> 00:10:01.512
We're gonna store all the messages that
we've gotten from the server here in

176
00:10:01.512 --> 00:10:03.087
this All Chat variable.

177
00:10:03.087 --> 00:10:05.040
This is the interval that
we're gonna pull out.

178
00:10:06.710 --> 00:10:09.145
I just chose three seconds,
feel free to change this.

179
00:10:09.145 --> 00:10:10.380
This is in milliseconds.

180
00:10:12.430 --> 00:10:16.631
Add an event listener to
listen to form submits.

181
00:10:16.631 --> 00:10:20.120
We're going to write post new message and
get new messages.

182
00:10:20.120 --> 00:10:24.502
This is my lovely render function that
was telling you that is just high art,

183
00:10:24.502 --> 00:10:25.946
also known as terrible.

184
00:10:25.946 --> 00:10:27.306
A template function and

185
00:10:27.306 --> 00:10:32.300
then this getting messages this will
actually get things rolling down here.

186
00:10:32.300 --> 00:10:34.802
So that that's all the code
that I wrote for you.

187
00:10:34.802 --> 00:10:38.920
And now we're just gonna kinda fill in
some blanks to make this real time.

188
00:10:41.220 --> 00:10:45.771
So let's actually go get
our project running,

189
00:10:45.771 --> 00:10:49.761
you should be able to
just say NPM run Dev.

190
00:10:49.761 --> 00:10:52.360
And it should just work,
you should be able to open this now.

191
00:10:52.360 --> 00:10:57.136
And you can see this should come up,
right?

192
00:10:57.136 --> 00:10:59.460
Someone can come in here but
their username.

193
00:10:59.460 --> 00:11:01.498
We're not not doing off today, by the way,

194
00:11:01.498 --> 00:11:05.312
cuz I didn't want to spend literally two
thirds of the course talking about auth.

195
00:11:05.312 --> 00:11:09.572
So, roll your own auth in this case
I'm just gonna say my name is Brian.

196
00:11:09.572 --> 00:11:11.264
And the server will believe me.

197
00:11:11.264 --> 00:11:14.137
And then you'll say something
like that and click Submit.

198
00:11:14.137 --> 00:11:18.209
Obviously it's not doing anything right
now because we'd haven't written all that

199
00:11:18.209 --> 00:11:20.141
code, but that's going to be the gist.

200
00:11:20.141 --> 00:11:22.181
And then down here where the bar is,

201
00:11:22.181 --> 00:11:25.317
that's where all the messages
will start showing up.

202
00:11:25.317 --> 00:11:27.828
Do you like my lovely design page as well?

203
00:11:27.828 --> 00:11:31.215
It's yeah, I just if I was
going to describe this word,

204
00:11:31.215 --> 00:11:33.830
this course in one word, it'd be.

205
00:11:33.830 --> 00:11:35.409
Artistic, I think.

206
00:11:35.409 --> 00:11:40.670
I'm just getting this terrible,
but I did it myself.

207
00:11:40.670 --> 00:11:44.322
It's my pilot terrible, okay?

208
00:11:44.322 --> 00:11:52.540
So the fun thing about polling is
that it's really straightforward.

209
00:11:52.540 --> 00:11:54.258
There's nothing really that
special about it like.

210
00:11:54.258 --> 00:11:57.750
We invented all these words to
describe what pulling is and reality.

211
00:11:57.750 --> 00:12:02.037
It's just like, it's just responding
to an HTTP request a lot.

212
00:12:02.037 --> 00:12:05.427
So are getting new messages here
is actually gonna be our, sorry,

213
00:12:05.427 --> 00:12:08.370
we're back here in server
back here in server.

214
00:12:08.370 --> 00:12:13.420
This get right here is gonna be
super simple because all we're

215
00:12:13.420 --> 00:12:18.870
gonna do is just respond quickly
to whatever they're asking for.

216
00:12:18.870 --> 00:12:20.820
So here we're just going to delete this.

217
00:12:20.820 --> 00:12:25.891
And we're just going to say rez as in
response.JSON, which is gonna respond

218
00:12:25.891 --> 00:12:31.444
with you know, Jason headers and all the
correct stuff with that thanks, express.

219
00:12:31.444 --> 00:12:36.917
And you're just going to
say MSG get messages.

220
00:12:36.917 --> 00:12:38.516
And that's it.

221
00:12:43.064 --> 00:12:48.654
Surprise, [LAUGH] So this part is
not that complicated because again,

222
00:12:48.654 --> 00:12:53.215
we're just responding to
a pretty normal request here.

223
00:12:56.165 --> 00:12:59.199
Same thing here with the post.

224
00:12:59.199 --> 00:13:02.330
We're gonna grab some
stuff off of the request.

225
00:13:02.330 --> 00:13:06.250
So we'll say const user text.

226
00:13:06.250 --> 00:13:13.190
There it is, equals req.body.

227
00:13:13.190 --> 00:13:17.351
So that's going to be whatever the user
over here posted is so Brian and blah.

228
00:13:17.351 --> 00:13:20.610
All right, so
Brian will be the user and the.

229
00:13:20.610 --> 00:13:22.079
Text will be lol right?

230
00:13:24.450 --> 00:13:25.670
That's gonna be in there.

231
00:13:25.670 --> 00:13:26.792
We're gonna say,

232
00:13:26.792 --> 00:13:31.250
we can ignore that part don't need to
put that we're gonna say MSG.push.

233
00:13:31.250 --> 00:13:39.030
And we're just gonna push a new
message into our message queue here.

234
00:13:39.030 --> 00:13:44.262
So here, we're gonna say user text and
time date.now, right?

235
00:13:44.262 --> 00:13:46.414
Cuz they just posted it so

236
00:13:46.414 --> 00:13:51.549
we're gonna store the timestamp
that they posted to that.

237
00:13:54.780 --> 00:13:57.005
And then down here you can see rest.jason.

238
00:13:59.780 --> 00:14:01.169
Input whatever you want.

239
00:14:01.169 --> 00:14:03.666
You can respond back with the messages
again if you want to I just put

240
00:14:03.666 --> 00:14:04.210
status okay.

241
00:14:12.665 --> 00:14:13.625
And And that's it.

242
00:14:15.965 --> 00:14:20.444
So that's the wonderful thing here
about long polling is the room,

243
00:14:20.444 --> 00:14:21.938
remarkably simple and

244
00:14:21.938 --> 00:14:27.137
the fact that they just don't deviate
from normal API writing stuff, right?

245
00:14:27.137 --> 00:14:29.360
Both of these,
you could have looked at these and

246
00:14:29.360 --> 00:14:32.790
said I don't even know that these
are long polling endpoints, right?

247
00:14:32.790 --> 00:14:34.220
These could just be normal endpoints.

248
00:14:34.220 --> 00:14:36.720
And you can use them as normal endpoints,
right?

249
00:14:36.720 --> 00:14:39.522
Like I could imagine later that
you write like an IOS app.

250
00:14:39.522 --> 00:14:43.417
And you just call this and you don't pull
it you just call it once to get the latest

251
00:14:43.417 --> 00:14:45.466
messages and then you're done, right?

252
00:14:45.466 --> 00:14:47.430
So it can it can do some double duty for
that.

