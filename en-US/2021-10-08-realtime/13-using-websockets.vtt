WEBVTT

1
00:00:00.180 --> 00:00:03.410
So now we have these two connections.

2
00:00:03.410 --> 00:00:06.550
Here on the server side, I got socket.

3
00:00:06.550 --> 00:00:09.100
And I can just say socket.write
all day every day, and

4
00:00:09.100 --> 00:00:12.760
everything's just gonna start
sending all that to the client.

5
00:00:12.760 --> 00:00:17.810
And here on the client,
I got my WS here, right?

6
00:00:19.480 --> 00:00:22.910
Which now I hear I can start accepting
messages from the server, right?

7
00:00:22.910 --> 00:00:24.450
So I actually have an active connection.

8
00:00:24.450 --> 00:00:25.840
So this WS here.

9
00:00:27.540 --> 00:00:30.780
I can start saying here ws.send, right?

10
00:00:33.180 --> 00:00:34.060
Yeah, this.

11
00:00:34.060 --> 00:00:37.458
So ws.send, now this is like how
you post back to the server.

12
00:00:37.458 --> 00:00:41.280
So it's a two-direction
socket between the two.

13
00:00:45.358 --> 00:00:48.895
So let's go ahead and send something.

14
00:00:48.895 --> 00:00:54.477
Head back to here where we
said under this socket.write

15
00:00:54.477 --> 00:00:59.479
right here, we're gonna say, socket.write.

16
00:00:59.479 --> 00:01:01.844
And then we'll just say, (objToResponse).

17
00:01:01.844 --> 00:01:03.535
We'll look at this here in just a second.

18
00:01:05.066 --> 00:01:09.993
And we're gonna send this
(msg: getMsgs() }));.

19
00:01:09.993 --> 00:01:12.988
And we're gonna send our
messages down to the client.

20
00:01:12.988 --> 00:01:15.789
So that mean,
this looks a lot like HTTP/2, right?

21
00:01:15.789 --> 00:01:19.503
Where we're just kind of writing
to their open connection, right?

22
00:01:19.503 --> 00:01:24.490
All right, let's go just peek
beneath the covers of this,

23
00:01:24.490 --> 00:01:31.599
just the depths of oddity that's happening
here in this object response.js file.

24
00:01:31.599 --> 00:01:33.939
We actually have to go in here, and

25
00:01:33.939 --> 00:01:39.127
we have to directly manipulate the binary
that's being sent to the client.

26
00:01:39.127 --> 00:01:43.650
Or elsewhere it's not gonna be sent
in the correct sort of fashion here.

27
00:01:43.650 --> 00:01:46.080
So the first thing that this
object to response does,

28
00:01:46.080 --> 00:01:49.603
is it takes the object that we got, and
it makes it a big whole string, right?

29
00:01:49.603 --> 00:01:53.003
So this could work with anything, but
we're making it particularly work for

30
00:01:53.003 --> 00:01:53.640
JSON, okay?

31
00:01:53.640 --> 00:01:55.110
So we have a string here.

32
00:01:56.280 --> 00:01:59.051
The first thing we're gonna do,
is how many bytes is this string?

33
00:01:59.051 --> 00:02:00.970
So then we got how many
string bytes this is?

34
00:02:00.970 --> 00:02:03.732
This is gonna be some
number of how long it is?

35
00:02:03.732 --> 00:02:07.279
Rather not how long, but
how many bytes that is to send us?

36
00:02:09.186 --> 00:02:14.713
Here, we're gonna count how many,
like the length of the byte count is.

37
00:02:14.713 --> 00:02:17.308
And then we have to encode that
into the first part of the frame.

38
00:02:17.308 --> 00:02:23.852
And so when I say frame, what I mean is
one packet of data that's being sent and

39
00:02:23.852 --> 00:02:28.296
received from the browser
is called a frame, okay?

40
00:02:28.296 --> 00:02:32.206
Here I'm gonna make a buffer
that's precisely that long,

41
00:02:32.206 --> 00:02:36.281
select some area in memory where
I can start writing this two.

42
00:02:36.281 --> 00:02:38.620
And then I'm just gonna start
writing the payload length.

43
00:02:38.620 --> 00:02:41.260
This is kind of like a base
starting value here.

44
00:02:41.260 --> 00:02:47.743
If you've never seen 0b before,
this just means in JavaScript binary.

45
00:02:47.743 --> 00:02:50.066
This is a binary number, right?

46
00:02:50.066 --> 00:02:52.000
It's not something you probably
have to interact with so much.

47
00:02:52.000 --> 00:02:54.539
If you ever seen 0xx0 or
something like this,

48
00:02:54.539 --> 00:02:57.830
the x means that this is hexadecimal,
right?

49
00:02:57.830 --> 00:02:58.935
This is an ES5 thing.

50
00:02:58.935 --> 00:03:00.830
So it's been around since 2015.

51
00:03:00.830 --> 00:03:02.830
Anyway, that's it.

52
00:03:02.830 --> 00:03:05.494
That's what that means.

53
00:03:05.494 --> 00:03:06.916
So we write that, this is the buffer.

54
00:03:06.916 --> 00:03:09.183
We write how long our buffer is gonna be.

55
00:03:09.183 --> 00:03:11.127
And then here we actually go through.

56
00:03:11.127 --> 00:03:15.477
And we write all of our information
to this buffer in binary.

57
00:03:15.477 --> 00:03:20.601
And then at the end we end up with this
buffer, which is the encoded message.

58
00:03:23.425 --> 00:03:24.592
So I didn't make you write this,

59
00:03:24.592 --> 00:03:26.770
because it's relatively,
it's stuff that I had to look up.

60
00:03:26.770 --> 00:03:28.781
It's not stuff that I ever figured out,
right?

61
00:03:28.781 --> 00:03:30.880
So I didn't want you to
worry too much about it.

62
00:03:30.880 --> 00:03:35.121
But I also want you to be curious and
aware this is actually sent over

63
00:03:35.121 --> 00:03:39.610
this kind of is not encrypted, but
it's encoded messaging, right?

64
00:03:40.810 --> 00:03:43.607
And if you use something,
like WS or Socket.io,

65
00:03:43.607 --> 00:03:46.811
this is what it's actually doing for
you in the library.

66
00:03:50.465 --> 00:03:52.737
Makes sense so far?

67
00:03:52.737 --> 00:03:54.444
Cool.
Are you happy that I didn't make you

68
00:03:54.444 --> 00:03:55.750
write this?

69
00:03:55.750 --> 00:03:59.133
I'm happy I didn't make you write it,
okay?

70
00:03:59.133 --> 00:04:05.565
[COUGH] So now we have a valid
message being written to the client.

71
00:04:05.565 --> 00:04:08.561
So we can head back over
here to raw.chat.js.

72
00:04:08.561 --> 00:04:13.900
Again, the magic of this WebSocket
object is just doing all this for you.

73
00:04:13.900 --> 00:04:16.573
So all of this decoding and
encoding on the browser side,

74
00:04:16.573 --> 00:04:18.865
we don't have to write anything for
it, right?

75
00:04:18.865 --> 00:04:21.819
The browser's just like, cool, I got
this for you and it just does it all for

76
00:04:21.819 --> 00:04:22.522
you really quick.

77
00:04:24.985 --> 00:04:31.420
So under ws.addEventListener,
we're gonna add a (message).

78
00:04:31.420 --> 00:04:35.681
So whenever we get a message
back from the server,

79
00:04:35.681 --> 00:04:42.549
it's gonna come back in as an event And

80
00:04:42.549 --> 00:04:50.836
we're gonna say,
const data = JSON.parse(event.data);.

81
00:04:50.836 --> 00:04:56.078
And we're just gonna say,
allChat = data.msg;.

82
00:04:56.078 --> 00:05:00.686
And render = ():.

83
00:05:00.686 --> 00:05:02.130
That's it.

84
00:05:02.130 --> 00:05:03.630
It's all you gotta do here.

85
00:05:03.630 --> 00:05:07.960
Accept the message, parse it, grab the
information that you want, call render.

86
00:05:10.655 --> 00:05:14.100
So from a client side perspective,
it's just incredibly easy to work with.

87
00:05:18.123 --> 00:05:21.200
So I think we come back over here.

88
00:05:21.200 --> 00:05:24.960
Yeah, now we're actually getting
real messages back from the server.

89
00:05:24.960 --> 00:05:26.680
The client has everything
to do with it and

90
00:05:26.680 --> 00:05:29.250
we're rendering back out exactly
what we need to the client.

91
00:05:30.580 --> 00:05:32.917
&gt;&gt; I noticed that you put
return on a new line.

92
00:05:32.917 --> 00:05:35.264
So this is on the upgrade.

93
00:05:35.264 --> 00:05:39.966
We could have just returned socket.end,
right, or is that not gonna work?

94
00:05:39.966 --> 00:05:40.466
&gt;&gt; Yeah.

95
00:05:42.440 --> 00:05:44.440
So the question here is on line 27.

96
00:05:44.440 --> 00:05:49.001
Why did I put return on a new end or
a new line?

97
00:05:49.001 --> 00:05:52.949
I don't know what this actually returns.

98
00:05:52.949 --> 00:06:00.252
So this is technically a sort of like
a WebSocket interface, there is, okay.

99
00:06:00.252 --> 00:06:02.997
It's a socket is a WebSocket,

100
00:06:02.997 --> 00:06:08.730
which means that this, No, maybe not that.

101
00:06:11.330 --> 00:06:13.500
Maybe it's a stream of some variety.

102
00:06:13.500 --> 00:06:17.393
Anyway, suffice to say,
I don't know what socket.end returns,

103
00:06:17.393 --> 00:06:22.010
which means that I don't actually
care about what it returns.

104
00:06:22.010 --> 00:06:25.030
So, here I'm just returning,
because I want this to end, right?

105
00:06:25.030 --> 00:06:29.291
I don't want it to go do the rest of
this stuff, if we hit this body here.

106
00:06:29.291 --> 00:06:33.303
But I didn't wanna return whatever
mystery that socket.end was returning.

107
00:06:36.054 --> 00:06:38.610
Maybe it's some control object or
something like that.

108
00:06:38.610 --> 00:06:43.427
I didn't want the consumer of
this to be able to mess with it.

109
00:06:43.427 --> 00:06:44.243
You probably would be fine.

110
00:06:44.243 --> 00:06:46.860
To be honest with you, if you just said
return this, it just wouldn't matter.

111
00:06:46.860 --> 00:06:50.984
That's just a habit I have.

112
00:06:50.984 --> 00:06:54.153
In general from writing
way too much TypeScript,

113
00:06:54.153 --> 00:06:59.443
I try not to return anything that I don't
either use it, or know what it is, right?

114
00:06:59.443 --> 00:07:00.908
Yeah, that's actually really what it's,

115
00:07:00.908 --> 00:07:02.572
that is definitely a TypeScript
habit that I have.

116
00:07:04.536 --> 00:07:07.583
Let's go listen to messages
now from the client.

117
00:07:10.923 --> 00:07:15.050
This is where things get a little weird,
so bear with me.

118
00:07:15.050 --> 00:07:18.400
If it wasn't already weird,
it's probably already weird.

119
00:07:18.400 --> 00:07:19.013
It gets weirder.

120
00:07:19.013 --> 00:07:21.889
We'll go with that.

121
00:07:21.889 --> 00:07:26.303
So we're doing this all
on server.on(upgrade",

122
00:07:26.303 --> 00:07:31.807
down here underneath your console.log,
save some space there.

123
00:07:31.807 --> 00:07:37.597
Now we're gonna say,
hey, socket.on "data".

124
00:07:37.597 --> 00:07:39.317
We need something back from the user.

125
00:07:43.107 --> 00:07:44.853
Just gonna log it out really quick.

126
00:07:47.986 --> 00:07:49.690
So now we can do socket.on "data".

127
00:07:49.690 --> 00:07:52.900
This is gonna let us receive information
back from the client, right?

128
00:07:52.900 --> 00:07:56.145
So instead of doing a post
request to some endpoint,

129
00:07:56.145 --> 00:08:01.310
we're just gonna use that socket and
receive information back from the client.

130
00:08:01.310 --> 00:08:03.974
Let's go write the raw chat post here.

131
00:08:03.974 --> 00:08:06.433
So head back over to raw chat.

132
00:08:06.433 --> 00:08:09.810
And we're gonna write this postNewMsg,
it's gonna be real simple here.

133
00:08:09.810 --> 00:08:16.717
So const data = {user, text}.

134
00:08:16.717 --> 00:08:20.659
And then we're just gonna say,

135
00:08:20.659 --> 00:08:26.355
ws.send (JSON.stringify(data));.

136
00:08:26.355 --> 00:08:29.371
And that is it for what you need
to do here from the post, right?

137
00:08:29.371 --> 00:08:32.641
You just put it together an object and

138
00:08:32.641 --> 00:08:37.188
send the string of five
version back to the server.

139
00:08:37.188 --> 00:08:40.170
And again,
just wanna shout out to the browser for

140
00:08:40.170 --> 00:08:43.943
doing all the encoding here for
us with this WebSocket object.

141
00:08:43.943 --> 00:08:46.746
Cuz it is getting encoding,
it's doing a bunch of heavy lifting for

142
00:08:46.746 --> 00:08:47.990
you under the scenes.

143
00:08:47.990 --> 00:08:50.323
It's just the browser
already handling it for you.

