WEBVTT

1
00:00:00.460 --> 00:00:03.320
So there exists a problem with our code.

2
00:00:03.320 --> 00:00:07.310
Well hold on, we're gonna continue
with that same exercise, right?

3
00:00:07.310 --> 00:00:11.230
So we're actually just gonna modify
the code that we have for the next part.

4
00:00:11.230 --> 00:00:15.660
So you don't have to jump into
anything else just so you know, okay.

5
00:00:17.770 --> 00:00:20.430
So there exists a problem with our code.

6
00:00:20.430 --> 00:00:22.718
If you go back and
look at our browser window here

7
00:00:24.858 --> 00:00:29.203
You'll notice that even though
we've been gone, right?

8
00:00:29.203 --> 00:00:32.822
It's actually still
pulling behind the scenes,

9
00:00:32.822 --> 00:00:36.490
which is kind of not ideal for
a couple of reasons.

10
00:00:36.490 --> 00:00:40.220
One, let's say that I'm working on
something here and chatting with someone.

11
00:00:41.420 --> 00:00:44.560
And then I change the window to
this one or something like that.

12
00:00:44.560 --> 00:00:48.180
And then I'm gone for two days, right?

13
00:00:48.180 --> 00:00:52.816
As long as my computer up and Firefox,
hasn't paused to the entire tab,

14
00:00:52.816 --> 00:00:55.560
it's gonna keep pulling, right?

15
00:00:55.560 --> 00:00:57.400
So this window's gonna
be totally up to date.

16
00:00:57.400 --> 00:01:01.118
It's gonna be, getting all the new chat
stuff and rolling in, but me the user,

17
00:01:01.118 --> 00:01:02.350
I'm not seeing any of it.

18
00:01:02.350 --> 00:01:03.750
So who cares, right?

19
00:01:03.750 --> 00:01:10.200
So I'm wasting my server resources by
forcing the client to continue to pull and

20
00:01:10.200 --> 00:01:16.870
I'm also wasting that users CPU cycles,
memory and then data, right?

21
00:01:16.870 --> 00:01:20.573
And I mean you can imagine this could
be something like slack or discord or

22
00:01:20.573 --> 00:01:24.217
something like that where they actually
have a lot of data going back and

23
00:01:24.217 --> 00:01:27.450
forth that could actually be
pretty bad for a user's data cap.

24
00:01:29.470 --> 00:01:34.210
So, how can we fix that?

25
00:01:34.210 --> 00:01:36.744
How can we make it pause on focus?

26
00:01:36.744 --> 00:01:40.882
Well, there's something
called requestAnimationFrame,

27
00:01:40.882 --> 00:01:45.825
which is actually one of my favorite
tools that the browser provides you.

28
00:01:45.825 --> 00:01:48.475
We're not gonna be doing
any animations today.

29
00:01:48.475 --> 00:01:51.570
But you can actually use
requestAnimationFrame which has just

30
00:01:51.570 --> 00:01:53.705
a bunch of stuff built into it.

31
00:01:53.705 --> 00:01:57.864
One of the things that it has built
into it is that when a user unfocuses

32
00:01:57.864 --> 00:02:02.510
the window, it pauses
requestAnimationFrame, which is great.

33
00:02:02.510 --> 00:02:06.636
So anything that you want to just pause
when a user is no longer paying attention

34
00:02:06.636 --> 00:02:09.948
to it, you can just say, hey,
use requestAnimationFrame and

35
00:02:09.948 --> 00:02:12.785
then the browser takes care
of all this stuff for you.

36
00:02:17.784 --> 00:02:22.020
So set timeout would be good if we
definitely didn't wanna pause something.

37
00:02:24.302 --> 00:02:27.906
Which I'm trying to think of something
like let's say that you have like a script

38
00:02:27.906 --> 00:02:31.730
that you wrote that you're trying to find
like a PS5 or something like that, right?

39
00:02:31.730 --> 00:02:33.240
Something that's difficult to find.

40
00:02:33.240 --> 00:02:35.020
You wouldn't want that to pause
in the background, right?

41
00:02:35.020 --> 00:02:38.037
Because if it found something you'd
want it to immediately just say, hey,

42
00:02:38.037 --> 00:02:38.849
I found it, right?

43
00:02:38.849 --> 00:02:42.900
You need to go buy it right now, or
concert tickets or something like that.

44
00:02:42.900 --> 00:02:45.780
So that would be a great use case for
set timeout.

45
00:02:45.780 --> 00:02:49.743
But for something like maybe checking
the weather, you don't need to have up to

46
00:02:49.743 --> 00:02:53.350
the date second weather updates,
if the user is not paying attention and

47
00:02:53.350 --> 00:02:56.810
reading what's coming back
from the weather API, right?

48
00:02:56.810 --> 00:03:01.508
So those are kind of two different reasons
why you might use set timeout versus

49
00:03:01.508 --> 00:03:03.180
requestAnimationFrame.

50
00:03:05.817 --> 00:03:09.270
Okay, so let's go re implement this
in terms of set animation frame.

51
00:03:10.450 --> 00:03:11.740
Sorry, requestAnimationFrame.

52
00:03:13.530 --> 00:03:16.040
So come back here to get new messages.

53
00:03:16.040 --> 00:03:20.052
We're gonna delete the set
timeout line here.

54
00:03:23.765 --> 00:03:26.800
And we're just gonna leave this like this,
right?

55
00:03:26.800 --> 00:03:31.918
So now this function has no concept
of when it's gonna be called again,

56
00:03:31.918 --> 00:03:36.200
we're gonna have something
that's gonna call it rather.

57
00:03:37.980 --> 00:03:41.820
Okay and then come down here to the bottom
and we're gonna replace this here.

58
00:03:41.820 --> 00:03:44.299
This line 61 get new messages.

59
00:03:46.910 --> 00:03:55.150
So we're gonna say let time to
make next request equals 0.

60
00:03:55.150 --> 00:04:00.110
And we're gonna say
async function rafTimer,

61
00:04:00.110 --> 00:04:02.840
that's what I call that.

62
00:04:02.840 --> 00:04:05.940
There's probably a better name for
requestAnimationFrame.

63
00:04:07.990 --> 00:04:09.551
And this accepts a time.

64
00:04:13.873 --> 00:04:20.873
And you're gonna say if,
time to make next request is less than or

65
00:04:20.873 --> 00:04:25.964
equal to time,
time being what is provided back

66
00:04:25.964 --> 00:04:32.104
from requestAnimationFrame
then await get new messages

67
00:04:35.446 --> 00:04:40.872
And then after it has
finished making that request,

68
00:04:40.872 --> 00:04:46.915
as soon as this function has
completed you're gonna say,

69
00:04:46.915 --> 00:04:52.363
timeToMakeNextRequest is
equal time + INTERVAL.

70
00:04:55.509 --> 00:05:03.501
And then down here you'll say
requestAnimationFrame rafTimer.

71
00:05:07.132 --> 00:05:09.910
So, actually already see
a problem with this.

72
00:05:09.910 --> 00:05:11.215
We'll talk about that in a second.

73
00:05:12.952 --> 00:05:17.350
What this function is do is it's gonna be
called by requestAnimationFrame, right?

74
00:05:17.350 --> 00:05:19.360
And that's gonna be given a time, right?

75
00:05:19.360 --> 00:05:22.120
It's like basically what time is it
right now when I'm calling this.

76
00:05:23.160 --> 00:05:26.670
We're gonna have some concept of when the
time to make the next request is right?

77
00:05:28.460 --> 00:05:31.358
And if that time is smaller
than the current time,

78
00:05:31.358 --> 00:05:33.870
the time to make that request has passed.

79
00:05:33.870 --> 00:05:36.978
And then we're gonna call that and
we're just going to say, wait for

80
00:05:36.978 --> 00:05:39.140
this message to come back.

81
00:05:39.140 --> 00:05:43.886
And then once you do, then decide when
the time to make the next request is and

82
00:05:43.886 --> 00:05:46.424
then you'll queue it again basically.

83
00:05:49.970 --> 00:05:55.220
Down here we'll also have to call
requestAnimationFrame rafTimer.

84
00:05:56.790 --> 00:05:58.990
This'll kick it off for
the first time, right?

85
00:05:58.990 --> 00:05:59.590
Which is what we need to do.

86
00:06:02.683 --> 00:06:05.062
So the thing to note about
requestAnimationFrame,

87
00:06:05.062 --> 00:06:07.180
like pulling this function
gets called a ton.

88
00:06:07.180 --> 00:06:10.480
Basically every time that
the browser is idle, right?

89
00:06:10.480 --> 00:06:13.534
Where it's not doing anything else,
it's gonna say, cool,

90
00:06:13.534 --> 00:06:17.220
I have time to kick off a request for
requestAnimationFrame.

91
00:06:17.220 --> 00:06:21.668
So what's also nice about this is this
won't interrupt your browser whereas like

92
00:06:21.668 --> 00:06:25.987
set timeout, as soon as like that timer
finishes, it's a hard halt on anything

93
00:06:25.987 --> 00:06:30.150
else that was doing it's like all right,
it is definitely time now.

94
00:06:30.150 --> 00:06:31.830
I was told to time out in three seconds.

95
00:06:31.830 --> 00:06:34.600
It's timed now, and
it will pause everything else.

96
00:06:34.600 --> 00:06:36.890
So if you're doing a ton of
animations on your screen.

97
00:06:36.890 --> 00:06:40.185
Or I don't know,
something that would cause jank

98
00:06:40.185 --> 00:06:44.196
like streaming video would be
another good example of this.

99
00:06:44.196 --> 00:06:47.050
It will hard halt everything.

100
00:06:47.050 --> 00:06:49.460
Which can cause jank in your UI, right?

101
00:06:49.460 --> 00:06:50.820
Particularly if you're dealing with a lot.

102
00:06:52.240 --> 00:06:56.180
The nice thing with requestAnimationFrame,
it waits for the browser to say, cool,

103
00:06:56.180 --> 00:06:59.490
I'm tided up for
my responsibilities for the moment.

104
00:06:59.490 --> 00:07:00.550
Give me something else to do.

105
00:07:02.290 --> 00:07:03.470
That actually happens a lot.

106
00:07:03.470 --> 00:07:05.930
It will happen thousands
of times a second, right?

107
00:07:05.930 --> 00:07:07.820
So this function gets called a ton.

108
00:07:07.820 --> 00:07:11.740
So this needs to be pretty bare bones,
right?

109
00:07:11.740 --> 00:07:14.989
Don't do a bunch of analytics,
ingesting during this,

110
00:07:14.989 --> 00:07:18.575
you want it to be basically is
the time to run yet yes or no okay and

111
00:07:18.575 --> 00:07:23.000
then I'm done and I'm gonna cue myself
to run again, so it runs really fast.

112
00:07:25.460 --> 00:07:28.270
It sounds inefficient,
it actually works out really well.

113
00:07:28.270 --> 00:07:31.910
Because again,
remember this was built for animations.

114
00:07:31.910 --> 00:07:34.480
And those require like a lot of overhead.

115
00:07:36.360 --> 00:07:39.670
The thing that I realized here
while I was writing this,

116
00:07:39.670 --> 00:07:42.074
that's actually kind of problematic.

117
00:07:43.545 --> 00:07:46.536
Is if this get new messages
takes a long time,

118
00:07:46.536 --> 00:07:49.864
this time can actually be kind of behind,
right?

119
00:07:49.864 --> 00:07:54.099
Because this will be determined when
you call it for the first time so

120
00:07:54.099 --> 00:07:56.866
I actually think you need to see Date.now.

121
00:07:58.329 --> 00:07:59.327
We'll see if this works.

122
00:07:59.327 --> 00:08:03.978
So as a danger of writing code on the fly,
but because you want the time to be from

123
00:08:03.978 --> 00:08:08.690
when this has already finished right,
this could take 20 minutes, right?

124
00:08:08.690 --> 00:08:10.600
We don't want it to run immediately.

125
00:08:10.600 --> 00:08:13.684
We want it to schedule three
seconds further out the future.

126
00:08:18.696 --> 00:08:21.279
Okay, let's see how that works.

127
00:08:22.890 --> 00:08:24.665
So we're gonna refresh the page over here.

128
00:08:28.255 --> 00:08:35.429
Again, notice that it will have dropped
all of your, Okay, that's fine.

129
00:08:35.429 --> 00:08:37.507
Your message is cuz we saved the server.

130
00:08:50.073 --> 00:08:54.150
Yeah, this is what I was afraid, all
right, let's try this with time instead.

131
00:09:03.200 --> 00:09:05.150
Okay, so that is working now.

132
00:09:06.380 --> 00:09:08.635
So I know you'd have to go
figure out what I did, but

133
00:09:08.635 --> 00:09:12.060
it's basically just messing with the time
to make sure that this is correct.

134
00:09:12.060 --> 00:09:14.640
My guess is ones in milliseconds and
one is it's not or something like that.

135
00:09:16.870 --> 00:09:18.838
So if we look down here
at our network tab,

136
00:09:18.838 --> 00:09:21.950
notice this is still pulling
about every three seconds, right?

137
00:09:23.660 --> 00:09:25.746
And actually probably pretty close
to exactly every three seconds.

138
00:09:27.732 --> 00:09:32.583
The nice thing about this
is if I go hop into another

139
00:09:32.583 --> 00:09:36.750
window which you can go
test it on your own.

140
00:09:36.750 --> 00:09:42.711
But if I unfocuses then focus on something
else, it'll keep running for a little bit.

141
00:09:42.711 --> 00:09:47.714
But after a little bit,
the browser is gonna stop

142
00:09:47.714 --> 00:09:53.950
calling requestAnimationFrame and
it's just gonna stop.

143
00:09:53.950 --> 00:09:59.466
So I wonder even if they came over here
and say come in this window and say, Let's

144
00:09:59.466 --> 00:10:04.692
admit that it's not gonna pause
this other tab immediately.

145
00:10:04.692 --> 00:10:09.473
So if I went over there now it probably
actually would have made that request,

146
00:10:09.473 --> 00:10:11.450
yeah, which it did.

147
00:10:11.450 --> 00:10:14.380
But eventually over time it would
stop calling requestAnimationFrame.

148
00:10:14.380 --> 00:10:18.020
And it would pause that and then we would
come back, it will immediately queue that

149
00:10:18.020 --> 00:10:21.530
requestAnimationFrame to run again,
so it'll actually unpause it for you.

150
00:10:21.530 --> 00:10:25.620
So it's pretty seamless, the browser will
do a lot of that heavy lifting for you.

151
00:10:25.620 --> 00:10:27.770
What is the time parameter?

152
00:10:27.770 --> 00:10:29.880
I mean, let's just log it.

153
00:10:31.170 --> 00:10:32.214
Some old timey login.

154
00:10:34.361 --> 00:10:36.140
I don't know why it's old timey.

155
00:10:36.140 --> 00:10:38.090
It just seemed funny to me when I said it.

156
00:10:38.090 --> 00:10:39.580
So you can see here, yeah,

157
00:10:39.580 --> 00:10:42.521
you can see there's actually
very different than date.now.

158
00:10:42.521 --> 00:10:45.060
I think it's milliseconds
since it started running.

159
00:10:46.100 --> 00:10:48.010
So you can see how frequently
this is getting run.

160
00:10:48.010 --> 00:10:49.478
It's getting run a lot.

161
00:10:55.467 --> 00:10:58.904
So I would say every.

162
00:11:01.438 --> 00:11:07.131
100 milliseconds, something like that,
not 100 milliseconds,

163
00:11:07.131 --> 00:11:11.649
rather like every 10 milliseconds
this is getting run.

164
00:11:11.649 --> 00:11:15.260
Tme is hard anyway, it gets a lot.

165
00:11:15.260 --> 00:11:16.060
That's my point.

166
00:11:17.630 --> 00:11:21.560
So yeah, it's just a time that
the browser's giving back.

167
00:11:23.050 --> 00:11:26.971
Yeah, I think this is milliseconds since
the current browser session has started.

168
00:11:29.358 --> 00:11:33.937
And then to answer your question,
we're not providing this to get new

169
00:11:33.937 --> 00:11:39.070
messages here because getting new
messages actually doesn't care, right?

170
00:11:41.190 --> 00:11:43.126
It doesn't use the time
anywhere inside of here, so

171
00:11:43.126 --> 00:11:45.190
it doesn't need to know anything about it.

172
00:11:45.190 --> 00:11:48.548
Again, what's nice about this, let's say
I'm in a different part of my application

173
00:11:48.548 --> 00:11:50.710
and I need to call that endpoint for
a different reason.

174
00:11:50.710 --> 00:11:54.540
I don't have to give it a fake time,
right?

175
00:11:54.540 --> 00:11:55.642
It can just be called so

176
00:11:55.642 --> 00:11:59.240
this function is useful outside of
just being a polling function as well.

177
00:12:01.130 --> 00:12:05.120
&gt;&gt; Shouldn't time to make new requests
be initialized with date.now?

178
00:12:07.640 --> 00:12:11.590
&gt;&gt; Good question line 60 here,
actually that's a really good question.

179
00:12:11.590 --> 00:12:13.718
Why, do I initialise this to zero?

180
00:12:13.718 --> 00:12:18.496
First of all time here, as we just
explained, which I'm sure that person had

181
00:12:18.496 --> 00:12:22.484
asked that previous to that is
actually second since the start.

182
00:12:22.484 --> 00:12:27.690
So this is equal to zero when
the browser starts, right?

183
00:12:29.850 --> 00:12:36.220
And whenever we start this, we want it to
run immediately the first time, right?

184
00:12:36.220 --> 00:12:37.948
So whenever the page loads for
the first time,

185
00:12:37.948 --> 00:12:41.050
I wanted to immediately request all
the messages just from the API.

186
00:12:41.050 --> 00:12:46.356
So I set that to 0, so
that I'm guaranteed whenever this runs for

187
00:12:46.356 --> 00:12:53.210
the first time, time it's gonna execute
this line 63 for the first time, right?

188
00:12:54.270 --> 00:12:56.414
So everything that you and

189
00:12:56.414 --> 00:13:01.490
I just did together is in the pause
on unfocus directory here.

190
00:13:02.540 --> 00:13:06.093
So if you wanna go back and reference
that, or you miss something that you

191
00:13:06.093 --> 00:13:09.370
wanted to go see, that's the state
of what we've coded up so far.

192
00:13:09.370 --> 00:13:13.216
We'll be here on the pause on
unfocused part of the repo.

193
00:13:16.528 --> 00:13:21.253
Before we get into back off and
retry, anyone have any

194
00:13:21.253 --> 00:13:27.600
questions that they wanna ask
about requestAnimationFrame?

195
00:13:27.600 --> 00:13:31.935
Just general coding advice from me
if you're working in browser stuff,

196
00:13:31.935 --> 00:13:34.930
requestAnimationFrame I
think is one misnamed.

197
00:13:34.930 --> 00:13:39.289
It should be called like schedule in
the future because it's useful outside of

198
00:13:39.289 --> 00:13:43.090
animations as you can see here,
I use it for a lot of stuff.

199
00:13:43.090 --> 00:13:47.405
This is definitely not the first time I've
used it in the course I can't remember

200
00:13:47.405 --> 00:13:51.466
which one other ones I've done it, but
suffice to say very useful and yeah,

201
00:13:51.466 --> 00:13:52.690
it's it's awesome.

202
00:13:52.690 --> 00:13:53.920
You can use it for lots of stuff.

