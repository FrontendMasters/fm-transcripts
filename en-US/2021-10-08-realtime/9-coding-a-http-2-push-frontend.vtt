WEBVTT

1
00:00:00.300 --> 00:00:07.300
So let's go write our code that's
gonna connect to our client.

2
00:00:08.750 --> 00:00:13.662
So here's inside of frontend,
we're gonna go into http2-chat.js.

3
00:00:17.106 --> 00:00:18.863
And this is a bit trickier.

4
00:00:18.863 --> 00:00:23.514
We're gonna have to write a decent amount
more code to handle stuff coming over

5
00:00:23.514 --> 00:00:27.616
a long running connection as opposed
to just a complete connection.

6
00:00:29.866 --> 00:00:35.112
And again, this isn't necessarily
what HTTP/2 push was built for.

7
00:00:35.112 --> 00:00:37.776
We're kind of abusing a little bit,
which is fun.

8
00:00:40.945 --> 00:00:44.044
So we're gonna replace
the code here in getNewMsgs.

9
00:00:46.140 --> 00:00:48.174
We're gonna say let reader.

10
00:00:48.174 --> 00:00:54.555
I'm gonna say const utf8Decoder

11
00:00:54.555 --> 00:01:01.377
= new TextDecoder("utf-8")

12
00:01:01.377 --> 00:01:05.782
is just how this works.

13
00:01:05.782 --> 00:01:06.793
It comes encoded,

14
00:01:06.793 --> 00:01:10.980
and we have to use this text decoder to
decode it into something that we can use.

15
00:01:12.420 --> 00:01:17.186
We're gonna say try here, and

16
00:01:17.186 --> 00:01:21.586
we're gonna say const res =

17
00:01:21.586 --> 00:01:26.364
await fetch("/msgs").

18
00:01:26.364 --> 00:01:31.680
And then we're gonna say
reader = res.body.getReader.

19
00:01:34.160 --> 00:01:35.000
So this was new to me.

20
00:01:35.000 --> 00:01:38.084
I've never used getReader before,
but basically,

21
00:01:38.084 --> 00:01:42.135
what this is gonna turn reader into
is a readable text stream, right?

22
00:01:42.135 --> 00:01:45.216
Which is basically saying, hey,
I know there's gonna be a body there and

23
00:01:45.216 --> 00:01:46.320
I know it's incomplete.

24
00:01:46.320 --> 00:01:50.063
So give me something that I can
continually get stuff back from, and

25
00:01:50.063 --> 00:01:51.450
that's what reader is.

26
00:01:53.884 --> 00:01:57.534
Okay, we'll put our catch here, catch (e).

27
00:02:00.195 --> 00:02:06.286
And we're gonna say
console.log("connection error", e).

28
00:02:10.519 --> 00:02:14.196
Okay, if we get to this point,
then guess what?

29
00:02:14.196 --> 00:02:16.838
We have successfully
connected to the server.

30
00:02:16.838 --> 00:02:21.524
So you wanna say presence,
which you see up here I grabbed,

31
00:02:21.524 --> 00:02:27.055
which is just that present indicated
with the red dot at the top right,

32
00:02:27.055 --> 00:02:29.290
presence.innerText.

33
00:02:29.290 --> 00:02:32.130
You can see here very fancy
front-end stuff going on here.

34
00:02:33.770 --> 00:02:39.312
And we're just gonna set that
equal to green circle or

35
00:02:39.312 --> 00:02:42.523
whatever you wanna put there.

36
00:02:42.523 --> 00:02:48.310
On Mac, that's Ctrl+Cmd+Space, and
that'll bring up this little emoji picker.

37
00:02:49.850 --> 00:02:51.900
I don't remember what it is on Windows.

38
00:02:51.900 --> 00:02:54.233
There is an emoji picker,
I just can't remember what it is.

39
00:02:56.887 --> 00:02:59.942
But, I'm sure you could just google
green circle emoji and copy and

40
00:02:59.942 --> 00:03:01.290
paste it off of Google, too.

41
00:03:03.760 --> 00:03:06.576
Or you can just say connected,
and that would work, too.

42
00:03:10.202 --> 00:03:14.554
Okay, so that'll let us know at
the top right that we are connected.

43
00:03:17.185 --> 00:03:21.804
And down here again we're
gonna say try reader,

44
00:03:27.295 --> 00:03:29.694
Where did I put that?

45
00:03:29.694 --> 00:03:34.296
Okay, we're gonna say outside of here,

46
00:03:36.261 --> 00:03:41.778
Let readerResponse, like that.

47
00:03:41.778 --> 00:03:48.010
I'm gonna say readerResponse
is assigned await reader.read.

48
00:03:50.290 --> 00:03:53.684
So basically,
what this is gonna say is gonna say, hey,

49
00:03:53.684 --> 00:03:57.313
wait here until the API sends
me something new back, right?

50
00:03:59.728 --> 00:04:04.546
And then we're gonna say const chunk

51
00:04:04.546 --> 00:04:12.168
=
utf8Decoder.decode(readerResponse.value),

52
00:04:12.168 --> 00:04:17.152
and we're gonna say this is a stream.

53
00:04:25.505 --> 00:04:28.998
So this is gonna pass us into our
text decoder that we had up here,

54
00:04:28.998 --> 00:04:30.885
whatever it got back from the API.

55
00:04:30.885 --> 00:04:34.804
And we just need to let the UTF8 decoder
let it know that this is not a complete

56
00:04:34.804 --> 00:04:36.100
thing, it's a stream.

57
00:04:36.100 --> 00:04:37.700
So expect that.

58
00:04:40.153 --> 00:04:44.286
And then here we'll just
say console.log(chunk).

59
00:04:46.863 --> 00:04:50.803
And then again, we'll say catch (e).

60
00:04:50.803 --> 00:04:58.605
We'll say console.error, reader fail.

61
00:05:03.364 --> 00:05:06.969
We'll say our presence indicator,
we'll have to set that to read.

62
00:05:13.974 --> 00:05:16.266
And then we'll return after that.

63
00:05:23.619 --> 00:05:26.604
Cool, so what is this gonna do?

64
00:05:26.604 --> 00:05:33.624
We're gonna call getNewMsgs, we set
up a decoder, we fetch from our API.

65
00:05:33.624 --> 00:05:37.470
And then we say, cool, we know this is
gonna be a stream of data coming in,

66
00:05:37.470 --> 00:05:38.940
not just one, right?

67
00:05:38.940 --> 00:05:40.581
That's why we can't use rest.json here.

68
00:05:40.581 --> 00:05:44.456
Rest.json's like, I'm going to wait for
the entire thing to finish,

69
00:05:44.456 --> 00:05:46.309
which it never finishes, right?

70
00:05:46.309 --> 00:05:49.364
By design,
our API is never going to finish.

71
00:05:49.364 --> 00:05:53.456
So that's why we have to get this reader
which is gonna be a stream of data coming

72
00:05:53.456 --> 00:05:54.140
in, right?

73
00:05:55.510 --> 00:05:59.063
We set our innerText to be green,
we're connected.

74
00:05:59.063 --> 00:06:01.876
And then here, we're gonna read
just the first response right now.

75
00:06:01.876 --> 00:06:05.670
So this is actually still not gonna
handle all the requests coming in.

76
00:06:05.670 --> 00:06:08.674
Right now we're just gonna read
the first one, and that's it so far.

77
00:06:08.674 --> 00:06:10.208
After that, it's gonna finish.

78
00:06:10.208 --> 00:06:13.907
But yeah, we'll grab the chunk out
of there and then we'll log it, and

79
00:06:13.907 --> 00:06:17.311
then we'll get to actually rendering
that here in just a second.

80
00:06:20.522 --> 00:06:26.085
I'm not making you do the post again,
by the way.

81
00:06:26.085 --> 00:06:29.817
We did it for the polling section,
and it's the same thing.

82
00:06:29.817 --> 00:06:33.642
So the thing to note about
HTTP/2 is it's unidirectional,

83
00:06:33.642 --> 00:06:36.550
at least in the way that we're using it.

84
00:06:36.550 --> 00:06:39.604
That data is going to stream from
the server to the client, but

85
00:06:39.604 --> 00:06:42.150
it doesn't go in the other way.

86
00:06:42.150 --> 00:06:45.826
All right, so I can't push things on
the same socket back to the server.

87
00:06:45.826 --> 00:06:49.890
That would be a WebSocket,
which we're about to talk about.

88
00:06:49.890 --> 00:06:54.477
There is actually a proposal, or actually,
I think it's called an extension of

89
00:06:54.477 --> 00:06:57.520
the spec that allows
bidirectional communication.

90
00:06:58.610 --> 00:07:00.921
But it's not gonna work
in this particular case.

91
00:07:07.047 --> 00:07:14.890
Okay, so coming back here and
refresh and we look at our console.

92
00:07:14.890 --> 00:07:16.813
You can see down here in the console,

93
00:07:16.813 --> 00:07:20.670
I am actually getting my message from
the server, the first one, right?

94
00:07:20.670 --> 00:07:23.730
I don't think it's actually sending
any more than one at the moment.

95
00:07:23.730 --> 00:07:25.560
So this would be it anyway.

96
00:07:26.840 --> 00:07:30.229
But what's cool, if you refresh and
look at this again.

97
00:07:30.229 --> 00:07:34.514
Look at that there's a 200 here,
a 200 here, and

98
00:07:34.514 --> 00:07:39.358
there's no number here next to the msgs,
messages endpoint.

99
00:07:39.358 --> 00:07:40.763
Why is that?

100
00:07:40.763 --> 00:07:43.727
Well, according to the browser,
it's still an open connection,

101
00:07:43.727 --> 00:07:44.982
it still hasn't finished.

102
00:07:44.982 --> 00:07:47.860
So therefore,
that's why we're not getting a status.

103
00:07:47.860 --> 00:07:49.912
It could still 500 at some point, right?

104
00:07:49.912 --> 00:07:52.330
At which point it would show that,
but yeah.

105
00:07:54.380 --> 00:07:58.945
The dev tools don't really know
what to do with this because it's

106
00:07:58.945 --> 00:08:01.770
actually still a long running request.

107
00:08:01.770 --> 00:08:06.611
Like I told you, we're kind of abusing the
system a little bit for fun and profit.

108
00:08:10.356 --> 00:08:12.948
Okay, so this reads once.

109
00:08:12.948 --> 00:08:14.830
We want it to continue reading, right?

110
00:08:14.830 --> 00:08:16.170
We don't want it to just end.

111
00:08:17.170 --> 00:08:20.512
We want it to actually continue trying to
read from the API as long as the API is

112
00:08:20.512 --> 00:08:21.828
still sending information.

113
00:08:23.651 --> 00:08:26.553
So let's do that.

114
00:08:29.426 --> 00:08:32.690
What we're gonna do here is we're
actually gonna wrap this in a do loop.

115
00:08:33.890 --> 00:08:35.123
We all love do loops, right?

116
00:08:38.357 --> 00:08:39.996
When is the last time you wrote a do loop?

117
00:08:43.461 --> 00:08:44.520
I don't know.

118
00:08:44.520 --> 00:08:47.831
I think, honestly, I think the last time
I wrote a do loop I was teaching another

119
00:08:47.831 --> 00:08:48.979
Frontend Masters course.

120
00:08:48.979 --> 00:08:50.720
I almost never use them.

121
00:08:50.720 --> 00:08:52.180
You could totally do
this with a while loop.

122
00:08:52.180 --> 00:08:55.295
But any time that I see a place where a do
loop fits in, I just get really excited.

123
00:08:55.295 --> 00:08:56.517
It's like I'm gonna do a do loop.

124
00:08:58.723 --> 00:09:01.955
So we're gonna say do
while we're not done.

125
00:09:01.955 --> 00:09:04.380
We're gonna create a thing called done.

126
00:09:04.380 --> 00:09:05.783
And as long as it's not done,

127
00:09:05.783 --> 00:09:09.420
it's gonna just continue running
this function over and over again.

128
00:09:09.420 --> 00:09:12.866
In theory,
this will actually never complete.

129
00:09:12.866 --> 00:09:16.274
So you actually really could
put a while true loop here and

130
00:09:16.274 --> 00:09:18.880
it would be equally valid.

131
00:09:18.880 --> 00:09:24.727
And we're also gonna create
a let done up here as well.

132
00:09:27.180 --> 00:09:29.246
Okay, so here we get the readerResponse.

133
00:09:31.793 --> 00:09:33.459
That's gonna come from the read.

134
00:09:33.459 --> 00:09:41.117
The catch, That's fine.

135
00:09:41.117 --> 00:09:46.328
We're actually gonna move this stuff
all outside of the try catch down here.

136
00:09:46.328 --> 00:09:48.851
You could leave it up there,
it would probably be fine.

137
00:09:48.851 --> 00:09:50.300
But we'll stop logging.

138
00:09:50.300 --> 00:09:52.026
We don't need to do that.

139
00:09:52.026 --> 00:09:59.890
And we're gonna say done is
assigned readerResponse.done.

140
00:09:59.890 --> 00:10:03.235
So I mean, the reason why I did it
this way is eventually, in theory,

141
00:10:03.235 --> 00:10:05.966
that connection could be
closed by the server, right?

142
00:10:05.966 --> 00:10:08.773
In which case this done
would come back as true.

143
00:10:08.773 --> 00:10:13.447
In which case we'd want to
stop listening to the server.

144
00:10:13.447 --> 00:10:16.690
We're not gonna write any code that does
that, but that's how you would handle,

145
00:10:16.690 --> 00:10:18.950
is like, okay, eventually,
this will close, right?

146
00:10:21.710 --> 00:10:23.985
Yeah, we're not gonna care
about that right now.

147
00:10:26.182 --> 00:10:28.800
Okay, and then we're gonna say if (chunk),

148
00:10:28.800 --> 00:10:32.330
cuz sometimes you will get
back empty frames of data.

149
00:10:32.330 --> 00:10:34.566
So you just wanna check to make
sure that there's stuff in here.

150
00:10:36.472 --> 00:10:41.105
We're gonna say cons, or sorry,
we're gonna do another try here.

151
00:10:45.223 --> 00:10:46.864
Lots of places to catch errors here.

152
00:10:46.864 --> 00:10:48.903
This is probably more try
catches than ever, right?

153
00:10:50.641 --> 00:10:54.456
But any time that you do JSON.parse,
you just gotta try catch it,

154
00:10:54.456 --> 00:10:59.440
because if anything is out of whack
at all, it's gonna throw an error.

155
00:10:59.440 --> 00:11:05.730
So const json = JSON.parse(chunk).

156
00:11:05.730 --> 00:11:10.347
And hopefully, this will be our
messages back from our server.

157
00:11:10.347 --> 00:11:15.683
Then we're gonna say allChat is assigned

158
00:11:15.683 --> 00:11:20.565
json.msg, and we'll call render.

159
00:11:22.270 --> 00:11:26.784
Otherwise, we'll just
say down here we'll have

160
00:11:26.784 --> 00:11:31.518
a parser console.error("parse error", e).

161
00:11:37.755 --> 00:11:41.208
Okay, and then down here underneath
the while done, we'll just copy and

162
00:11:41.208 --> 00:11:42.328
paste this one as well.

163
00:11:45.764 --> 00:11:49.570
If for some reason this
while loop finished, right,

164
00:11:49.570 --> 00:11:52.456
then you would be disconnected as well.

165
00:11:52.456 --> 00:11:55.171
So you'll put that innerText
down there as well.

166
00:11:59.833 --> 00:12:04.270
Okay, So

167
00:12:04.270 --> 00:12:08.797
again, this do loop should go on forever,
right?

168
00:12:08.797 --> 00:12:13.543
It should not finish as long
as it's open and connected.

169
00:12:13.543 --> 00:12:17.425
So if we refresh the page, first thing I
want you to notice is whenever you refresh

170
00:12:17.425 --> 00:12:21.500
the page, this will go from red to green
immediately, which is kinda cool, right?

171
00:12:23.260 --> 00:12:25.875
So now you know that you are definitely
connected to the server.

172
00:12:25.875 --> 00:12:31.228
Where's my, down here,
you can see here, the connecting and

173
00:12:31.228 --> 00:12:35.072
disconnecting whenever I refresh the page.

174
00:12:38.756 --> 00:12:40.506
Let's see if I can get it to reuse one.

175
00:12:40.506 --> 00:12:44.527
Yeah, so far it hasn't reused a number,
but you will find that occasionally,

176
00:12:44.527 --> 00:12:50.772
it will,
It'll reuse some of those stream IDs.

