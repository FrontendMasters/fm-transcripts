WEBVTT

1
00:00:00.020 --> 00:00:05.274
The one thing I'm sparing you from doing,
I think we mentioned before, is that I'm

2
00:00:05.274 --> 00:00:11.210
not making you write the post logic here
because literally, nothing changed, right?

3
00:00:11.210 --> 00:00:13.121
This is exactly what you
wrote in the last one.

4
00:00:13.121 --> 00:00:17.620
So this is already posting to the server,
we just gotta make the server accepted.

5
00:00:21.762 --> 00:00:24.286
So we have kind of two things
that we need to do here.

6
00:00:24.286 --> 00:00:25.946
One, we need to accept the data.

7
00:00:25.946 --> 00:00:30.434
But there's another fun thing that we need
to do if I have ten people all connected

8
00:00:30.434 --> 00:00:31.292
to the server.

9
00:00:31.292 --> 00:00:34.971
As soon as someone posts to the API,
I wanna immediately inform all of them.

10
00:00:34.971 --> 00:00:37.990
It's like, hey,
I got a new chat message, right?

11
00:00:37.990 --> 00:00:41.820
So that if Mark post something
that I can see it and vice versa.

12
00:00:43.090 --> 00:00:46.139
So we have to inform all those streams.

13
00:00:47.690 --> 00:00:51.891
So up here, you'll see that I have
this connections API for you.

14
00:00:51.891 --> 00:00:52.557
And that's what we're
going to do with that,

15
00:00:52.557 --> 00:00:53.698
we're just gonna keep track of all
the streams that are currently connected.

16
00:00:55.426 --> 00:01:01.890
So whenever a user connects down here,
underneath the right here on line 53,

17
00:01:01.890 --> 00:01:05.857
I'm just gonna say
connections.push stream.

18
00:01:05.857 --> 00:01:10.537
And now, this connections is gonna have
all of my active connections in it.

19
00:01:12.435 --> 00:01:16.095
Then on stream.close, I'm just gonna say,
connections is a sign and

20
00:01:16.095 --> 00:01:17.805
then I'm just gonna filter out.

21
00:01:17.805 --> 00:01:19.963
I'm sure there's a more
efficient way of doing this, but

22
00:01:19.963 --> 00:01:21.606
I'm just gonna say connections.filter.

23
00:01:24.615 --> 00:01:34.083
And I'm just gonna say I called it S here,
S is not equal to stream.

24
00:01:34.083 --> 00:01:38.802
If you're not familiar with functional
programming kind of things, but

25
00:01:38.802 --> 00:01:41.019
basically what we're saying is.

26
00:01:41.019 --> 00:01:44.596
I want you to go and remove whatever
stream is from connections and

27
00:01:44.596 --> 00:01:46.621
then make that the new connections.

28
00:01:48.396 --> 00:01:50.514
So it's just a fast way of
getting stuff out of there.

29
00:01:50.514 --> 00:01:54.688
So if users, 79 here quits,
it's gonna go find connection 79 and

30
00:01:54.688 --> 00:01:58.533
remove that from the active streams and
we'll do that on close.

31
00:02:03.617 --> 00:02:07.106
Okay, and now, I'm kinda guaranteed
whatever is in connections is definitely

32
00:02:07.106 --> 00:02:08.760
going to be all of the active streams.

33
00:02:09.890 --> 00:02:10.410
Yeah, question.

34
00:02:12.500 --> 00:02:15.479
&gt;&gt; My assumption here was
that stream was an object and

35
00:02:15.479 --> 00:02:19.610
we're doing triple quality checks,
comparing objects.

36
00:02:19.610 --> 00:02:22.310
Or am I completely mistaken here?

37
00:02:22.310 --> 00:02:23.678
&gt;&gt; Yeah, so the question is this,

38
00:02:23.678 --> 00:02:27.410
streams is gonna be a bunch of
objects which is a correct assumption.

39
00:02:27.410 --> 00:02:30.930
What triple equals is asking is,
is this literally the same object?

40
00:02:31.980 --> 00:02:33.220
Which will return true, right?

41
00:02:33.220 --> 00:02:35.408
Cuz they both pointed the exact
same object in memory.

42
00:02:35.408 --> 00:02:39.123
It's asking us,
are these the same pointers?

43
00:02:39.123 --> 00:02:40.427
And they are the same pointer.

44
00:02:43.287 --> 00:02:44.179
That answer your question?

45
00:02:44.179 --> 00:02:44.990
It's a good question.

46
00:02:46.946 --> 00:02:48.973
Yeah, thanks for clarifying, I'm sure
that was confusing to other people too.

47
00:02:54.565 --> 00:02:58.758
Yeah, typically, You're doing numbers or
stream comparisons, right?

48
00:02:58.758 --> 00:03:01.888
Which that's normally you're
gonna use triple equals for,

49
00:03:01.888 --> 00:03:04.306
but occasionally it is
actually useful to say.

50
00:03:04.306 --> 00:03:08.730
Am I literally pointing at the same object
here, which is what this actually does.

51
00:03:12.098 --> 00:03:16.917
Okay, so inside here where it says
some code goes here, under request,

52
00:03:16.917 --> 00:03:19.219
now we have to handle these posts.

53
00:03:21.430 --> 00:03:24.187
So the first thing we're gonna
do is we're gonna say, msg

54
00:03:26.699 --> 00:03:34.188
.push user, text, time, date.now.

55
00:03:38.752 --> 00:03:42.045
Down here, we're gonna say res.end, right?

56
00:03:42.045 --> 00:03:44.163
Cuz we're gonna say, hey, user,

57
00:03:44.163 --> 00:03:47.960
I got all the information from
you everything's all good.

58
00:03:47.960 --> 00:03:50.591
I mean, you could send back a status,
okay here, but really,

59
00:03:50.591 --> 00:03:52.840
we're not sending any
information back to the user.

60
00:03:52.840 --> 00:03:58.014
We're just acknowledging, okay,
A-okay, I got your posts.

61
00:03:58.014 --> 00:04:02.930
And then we're gonna say connections
.forEach or you can do a for

62
00:04:02.930 --> 00:04:04.390
loop here however you wanna do it.

63
00:04:08.918 --> 00:04:14.587
I'm gonna say stream And
then we're just gonna say stream.write

64
00:04:14.587 --> 00:04:21.983
JSON.stringify getMessages.

65
00:04:25.031 --> 00:04:27.617
I mean it's literally
the same line as this, right?

66
00:04:31.209 --> 00:04:34.326
The exact same thing that we write to them
the first time we're just gonna say, cool,

67
00:04:34.326 --> 00:04:35.080
I got a new message.

68
00:04:35.080 --> 00:04:36.244
Here's the new batch of them and

69
00:04:36.244 --> 00:04:38.931
we're just gonna write that out to all
the connected users at the moment.

70
00:04:43.344 --> 00:04:46.837
Now, again, it might be useful to have
a front end and a back end that were

71
00:04:46.837 --> 00:04:51.050
a little bit smarter rather than just
dumping out all of the current messages.

72
00:04:51.050 --> 00:04:54.554
We could say, all right, here's the new
ones that you haven't seen yet, right, and

73
00:04:54.554 --> 00:04:56.005
we can make those packets smaller.

74
00:04:56.005 --> 00:05:00.258
But for simplicity's sake,
this is a good way of doing it.

75
00:05:03.637 --> 00:05:12.840
Okay, so Refresh So

76
00:05:12.840 --> 00:05:16.224
there's that and again, https, and

77
00:05:16.224 --> 00:05:20.994
I think this one's on
8080 instead of 3000.

78
00:05:20.994 --> 00:05:24.341
The reason why I changed to those ports on
you is cuz I wanted you to make sure that

79
00:05:24.341 --> 00:05:26.796
you're on https cuz I know
it's gonna confuse someone.

80
00:05:28.632 --> 00:05:33.611
So now I have two clients here open, And

81
00:05:33.611 --> 00:05:41.827
this one's gonna say marc And
hit submit and

82
00:05:41.827 --> 00:05:46.098
then I'm gonna go over here and you can
see here it is immediately reflected.

83
00:05:46.098 --> 00:05:50.374
And then we can probably even just
split these up so you can see them.

84
00:05:58.603 --> 00:06:01.775
And you can see here, we're immediately
getting in on both sides, right?

85
00:06:09.413 --> 00:06:10.790
I think it's pretty cool stuff, right?

86
00:06:14.218 --> 00:06:18.650
So this is HTTP/2 and it's really
not any more complicated than that.

87
00:06:18.650 --> 00:06:22.231
We do kinda have to hack around
it a little bit, cuz again,

88
00:06:22.231 --> 00:06:26.210
it's not particularly made
with this use case in mind.

89
00:06:26.210 --> 00:06:31.108
But just so you know at LinkedIn, we use
this quite a bit in terms of just opening

90
00:06:31.108 --> 00:06:35.504
a long running connection with people and
sending them information.

91
00:06:35.504 --> 00:06:38.376
Yeah, they use it quite
heavily at LinkedIn.

92
00:06:38.376 --> 00:06:41.992
So if you wanna go see how a company does
it, just go poke around LinkedIn.com.

93
00:06:41.992 --> 00:06:45.465
And you can see they do it everywhere,
or at least they did when I was there,

94
00:06:45.465 --> 00:06:48.521
might be changed after some years
of not being there, probably.

95
00:06:52.666 --> 00:06:56.137
All right, any questions about HTTP/2?

96
00:06:59.077 --> 00:07:01.324
This is the end of this section, we're
gonna get into WebSockets after this.

97
00:07:04.726 --> 00:07:05.921
Yeah, go ahead.

98
00:07:05.921 --> 00:07:11.198
&gt;&gt; This might be a very trivial syntax
type a question, but I noticed that

99
00:07:11.198 --> 00:07:17.390
we were using colon for some of the
methods on the header, or headers object.

100
00:07:17.390 --> 00:07:22.396
Is that symbols also in JavaScript,
or is that just syntax?

101
00:07:22.396 --> 00:07:25.666
&gt;&gt; It is where is it,
somewhere in here, right?

102
00:07:25.666 --> 00:07:26.597
Like this one, right?

103
00:07:29.141 --> 00:07:31.127
So the question is why
are using colons there?

104
00:07:31.127 --> 00:07:36.600
And the answer is cuz that's what
they give it back to you as.

105
00:07:36.600 --> 00:07:41.940
I think they're just special characters,
also there's special headers, right?

106
00:07:41.940 --> 00:07:45.025
They're actually not technically
in the header, right?

107
00:07:45.025 --> 00:07:46.684
The method is not part of
the headers per se, right?

108
00:07:50.343 --> 00:07:53.641
But in any case,
it's just what node calls it.

109
00:07:53.641 --> 00:07:57.719
They're not symbols to
answer your question, so

110
00:07:57.719 --> 00:08:04.982
that would be like a new symbol,
Right, it's not one of these, right?

111
00:08:04.982 --> 00:08:06.767
Which is a totally separate concept.

112
00:08:08.641 --> 00:08:12.694
This is just a magic stream that
if you want the path back and

113
00:08:12.694 --> 00:08:16.350
99% of the time express
is handling this for you.

114
00:08:16.350 --> 00:08:19.613
So you don't have to actually know
that this is what this is called but

115
00:08:19.613 --> 00:08:21.979
if you're actually directly using HTTP/2,
or

116
00:08:21.979 --> 00:08:25.010
there's another one here
that's called http as well.

117
00:08:25.010 --> 00:08:29.218
It's the same thing just for
1.1, that's what they call it.

118
00:08:30.410 --> 00:08:33.458
So, to answer your question fully,
just because,

119
00:08:33.458 --> 00:08:35.761
this is really just the answer to that.

120
00:08:35.761 --> 00:08:39.756
Good question, other questions?

121
00:08:40.918 --> 00:08:43.009
&gt;&gt; Will chunk be valid
JSON when it streaming?

122
00:08:45.719 --> 00:08:47.353
&gt;&gt; Will chunk be valid
JSON when it's streaming?

123
00:08:49.086 --> 00:08:53.106
So let's see if I can find I think
it's this part here that we're

124
00:08:53.106 --> 00:08:56.690
getting back from or
really is this the reader response?

125
00:08:59.575 --> 00:09:03.010
Kind of an open question,
that's why I put a try catch here.

126
00:09:03.010 --> 00:09:07.780
I really didn't try
the border cases of this.

127
00:09:07.780 --> 00:09:11.410
What happens if chunk is actually so big.

128
00:09:11.410 --> 00:09:14.280
Let's say you're sending
huge amounts of JSON.

129
00:09:14.280 --> 00:09:17.009
It, might break that up
across multiple chunks and

130
00:09:17.009 --> 00:09:20.055
that I don't know I actually did not try.

131
00:09:20.055 --> 00:09:23.445
In which case you would just kinda have
to have a little bit more logic around.

132
00:09:24.605 --> 00:09:27.585
Give me everything until I have
valid JSON and then parse it.

133
00:09:30.901 --> 00:09:34.390
We're definitely gonna run into that
in WebSockets, I know that's a problem.

134
00:09:34.390 --> 00:09:36.937
So that's always the question here and

135
00:09:36.937 --> 00:09:41.490
that's always why I put it
anytime I do JSON.parse from API.

136
00:09:41.490 --> 00:09:42.888
Just put it in a try catch,

137
00:09:42.888 --> 00:09:46.967
cuz there's always a good chance that
something gets messed up somewhere.

138
00:09:49.893 --> 00:09:52.592
But this is not guaranteed
to be valid JSON, right?

139
00:09:52.592 --> 00:09:55.493
Which is why we're gonna be kind
of defensive about it here.

