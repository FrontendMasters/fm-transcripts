WEBVTT

1
00:00:00.160 --> 00:00:04.169
We are now into the exercise part

2
00:00:04.169 --> 00:00:08.930
of this particular course of HTTP2.

3
00:00:10.940 --> 00:00:13.960
So here's the one CLI thing
that you have to do for

4
00:00:13.960 --> 00:00:17.727
me during the course of this course,
course of this course.

5
00:00:20.443 --> 00:00:24.182
I'm gonna delete these so that I can
regenerate them for you and you can see.

6
00:00:26.539 --> 00:00:27.456
Delete.

7
00:00:30.443 --> 00:00:32.054
So let me bring this up.

8
00:00:32.054 --> 00:00:33.261
Let me make it bigger.

9
00:00:35.386 --> 00:00:38.760
Maybe not quite that big, maybe that.

10
00:00:38.760 --> 00:00:44.319
Okay, so we're gonna go into
the HTTP2 portion of this.

11
00:00:44.319 --> 00:00:46.187
And we're gonna go into exercise.

12
00:00:48.652 --> 00:00:50.720
Okay, so HTTP2, well,

13
00:00:50.720 --> 00:00:56.463
it's not necessarily built into the spec
that you must do it over HTTPS.

14
00:00:56.463 --> 00:01:00.015
It actually is required
by all the browsers.

15
00:01:00.015 --> 00:01:05.530
There's no browser that supports
HTTP2 over non-SSL connections.

16
00:01:05.530 --> 00:01:08.720
So in other words,
even though we're doing local development,

17
00:01:08.720 --> 00:01:11.130
we have to have a certificate, right?

18
00:01:11.130 --> 00:01:17.140
So you and I just need to generate
a quick OpenSSL certificate.

19
00:01:17.140 --> 00:01:21.196
I left a bunch of instructions
on the course website.

20
00:01:21.196 --> 00:01:24.140
I'm gonna do it here for Mac so
you can actually see me do it with Mac.

21
00:01:24.140 --> 00:01:26.203
The same thing would work for Linux.

22
00:01:26.203 --> 00:01:31.358
If you need to do it via Windows,
your best bet is to do it over Chocolatey,

23
00:01:31.358 --> 00:01:34.617
so you can use Chocolatey
to install OpenSSL.

24
00:01:34.617 --> 00:01:36.259
But kind of after that,
you're on your own,

25
00:01:36.259 --> 00:01:39.167
because I don't really generate too
many certificates on Windows these days.

26
00:01:41.113 --> 00:01:45.343
So if you have Homebrew installed,
if you don't, go to brew.sh.

27
00:01:45.343 --> 00:01:47.310
I have a link there in the course notes.

28
00:01:47.310 --> 00:01:50.580
But otherwise,
you just do brew install openssl.

29
00:01:50.580 --> 00:01:53.656
I think really any version
of this will work.

30
00:01:53.656 --> 00:01:56.798
I already have installed, let's clear.

31
00:02:00.053 --> 00:02:02.850
Then I want you to go to the root
directory of your project.

32
00:02:02.850 --> 00:02:08.316
So you can see here, I'm in this
directory, so the exercise directory.

33
00:02:08.316 --> 00:02:10.426
And I want you to run two commands,
and I'm just gonna copy and

34
00:02:10.426 --> 00:02:11.489
paste them cuz they're long.

35
00:02:11.489 --> 00:02:13.248
And I don't really
understand what they do,

36
00:02:13.248 --> 00:02:15.162
if we're being totally
honest with each other.

37
00:02:19.006 --> 00:02:22.569
So course notes, where's my course notes?

38
00:02:25.223 --> 00:02:26.273
Intro to Realtime.

39
00:02:26.273 --> 00:02:28.865
I actually have it in the files, too.

40
00:02:32.194 --> 00:02:37.880
If you come here to back and
server, I have them here.

41
00:02:37.880 --> 00:02:39.472
These are the two commands
that you have to run.

42
00:02:39.472 --> 00:02:43.107
I'll actually just copy them from here.

43
00:02:43.107 --> 00:02:44.322
But yeah, they're in the course notes.

44
00:02:44.322 --> 00:02:47.420
They're here into chat with HTTP2.

45
00:02:47.420 --> 00:02:49.650
These two things right here
are the ones we're gonna have to run.

46
00:02:52.398 --> 00:02:55.216
So you have to copy the first one.

47
00:02:55.216 --> 00:03:02.454
One of them generates a key, and then one
takes the key and generates a certificate.

48
00:03:07.234 --> 00:03:10.910
Okay, so I'm gonna paste the first one.

49
00:03:12.420 --> 00:03:14.030
It's gonna ask you a bunch of things.

50
00:03:14.030 --> 00:03:17.211
It doesn't really matter cuz we
don't really care about these certs.

51
00:03:41.426 --> 00:03:43.097
Okay, as you can see here,

52
00:03:43.097 --> 00:03:46.670
I took this very seriously with
the responses that I sent.

53
00:03:48.010 --> 00:03:51.553
Again, it does not matter, okay?

54
00:03:51.553 --> 00:03:55.201
And then you're gonna take
this second one here, and

55
00:03:55.201 --> 00:03:59.511
you're gonna generate a cert
with the keys that you generate.

56
00:04:01.528 --> 00:04:06.403
Okay, and now you can see I have three
files here, csr.pam, key.pam, and

57
00:04:06.403 --> 00:04:07.379
server.crt.

58
00:04:11.706 --> 00:04:15.513
So unfortunately,
it won't work if you don't do these.

59
00:04:15.513 --> 00:04:22.331
We have to do this over SSL or
the HTTP2 part of this just won't work.

60
00:04:28.137 --> 00:04:32.754
Okay, the other thing I wanna make
sure that I call out is we've been

61
00:04:32.754 --> 00:04:34.620
doing our localhost here.

62
00:04:35.930 --> 00:04:39.533
Make sure that when you're coming
back here to your browser,

63
00:04:39.533 --> 00:04:41.070
it has to be https://.

64
00:04:41.070 --> 00:04:44.360
This s is critical or else,
your server will not connect.

65
00:04:44.360 --> 00:04:46.601
So that's another thing to keep in mind.

66
00:04:51.082 --> 00:04:56.100
Okay, so now that I've generated these,
I actually installed them for you.

67
00:04:56.100 --> 00:04:59.800
So as long as they're in the correct
place and named the correct things.

68
00:04:59.800 --> 00:05:02.906
So if you run these two
commands in the correct place,

69
00:05:02.906 --> 00:05:06.427
which is in the root directory,
not the backend directory,

70
00:05:06.427 --> 00:05:09.132
everything will just plug in and
work for you.

71
00:05:11.652 --> 00:05:14.890
And let's go take a bit of
a tour of our code here.

72
00:05:16.510 --> 00:05:19.280
So at this point,
you should be able to say npm run dev.

73
00:05:19.280 --> 00:05:20.592
It should work.

74
00:05:25.563 --> 00:05:27.760
So this should look really familiar.

75
00:05:27.760 --> 00:05:32.880
Try to keep things as similar as possible
as they were from the previous section.

76
00:05:32.880 --> 00:05:36.391
Couple of things here,
we're no longer using Express.

77
00:05:36.391 --> 00:05:38.042
You can make Express work with HTTP2.

78
00:05:38.042 --> 00:05:40.730
What I'm showing you is
possible with Express.

79
00:05:40.730 --> 00:05:42.476
But I wanted to get lower level so

80
00:05:42.476 --> 00:05:46.044
you can really understand what's
going on underneath the hood.

81
00:05:46.044 --> 00:05:51.210
HTTP2, this is the actual direct
standard library from Node.js.

82
00:05:51.210 --> 00:05:51.870
It's not a module.

83
00:05:51.870 --> 00:05:55.371
It's a module built into Node itself.

84
00:05:55.371 --> 00:05:58.410
fs is for file system,
path is a helper for doing paths.

85
00:05:58.410 --> 00:06:02.021
These are all from Node itself,
same with URL.

86
00:06:02.021 --> 00:06:06.054
serve-handler, this is actually
a library put up by Vercel for

87
00:06:06.054 --> 00:06:07.710
serving static assets.

88
00:06:07.710 --> 00:06:09.610
It's very easy to use.

89
00:06:09.610 --> 00:06:13.819
If you've ever done npm install serve,
this is the middleware that handles

90
00:06:13.819 --> 00:06:16.910
everything inside of serve,
just so you know.

91
00:06:16.910 --> 00:06:19.620
And then nanobuffer,
we've seen that before.

92
00:06:19.620 --> 00:06:22.670
This is all stuff you've seen before.

93
00:06:24.470 --> 00:06:26.884
This is us starting the server, and

94
00:06:26.884 --> 00:06:33.455
this is us creating the secure server with
the cert and the key right there, right?

95
00:06:33.455 --> 00:06:34.885
So that all goes there.

96
00:06:34.885 --> 00:06:39.065
We're about to write
some code that goes here.

97
00:06:39.065 --> 00:06:41.096
So server on request.

98
00:06:45.368 --> 00:06:50.112
So we check the path, and if the path
is not something going to our endpoint,

99
00:06:50.112 --> 00:06:54.880
I'm gonna assume it's a static asset,
which is what this does right here.

100
00:06:56.250 --> 00:06:57.951
Otherwise, if it's a post,

101
00:06:57.951 --> 00:07:01.499
then we're assuming that a user
is posting to the endpoints.

102
00:07:03.040 --> 00:07:06.260
And this is actually just reading
something out of the post.

103
00:07:06.260 --> 00:07:08.085
And then down here,
we'll handle the posts.

104
00:07:10.089 --> 00:07:14.034
But you remember what body parser
was doing for us in Express?

105
00:07:14.034 --> 00:07:16.260
This is what body parser does for you.

106
00:07:17.880 --> 00:07:21.675
It reads stuff out of a request, and
then makes a buffer out of it, and

107
00:07:21.675 --> 00:07:23.259
then it parses that to JSON.

108
00:07:25.874 --> 00:07:28.410
Didn't make you write it cuz it didn't
feel important to the course today.

109
00:07:28.410 --> 00:07:30.728
But in case you're wondering,
that's what it does for you.

110
00:07:34.866 --> 00:07:39.420
All right, so that's it for
the server so far.

111
00:07:39.420 --> 00:07:42.410
Right here, we're listening to requests,

112
00:07:42.410 --> 00:07:46.020
which is like a full on
normal 1.1 style request.

113
00:07:46.020 --> 00:07:47.912
That's what all this is gonna do.

114
00:07:47.912 --> 00:07:52.332
But we're about to listen for
something called streams.

115
00:07:52.332 --> 00:07:57.494
There's no built-in router
to the HTTP library.

116
00:07:57.494 --> 00:07:59.267
That's what Express does for you.

117
00:07:59.267 --> 00:08:02.355
It's basically a router on top of HTTP.

118
00:08:02.355 --> 00:08:05.380
So that's how we have to handle
the path and method stuff here.

119
00:08:07.300 --> 00:08:10.050
Because that's what Express
would normally do for you.

120
00:08:10.050 --> 00:08:10.685
I'm excited about this.

121
00:08:10.685 --> 00:08:15.112
This is one of my favorite
things to just mess around with.

122
00:08:15.112 --> 00:08:18.972
I really enjoy going in and finding
these low level of abstractions and

123
00:08:18.972 --> 00:08:21.010
seeing what stuff is gonna do for us.

124
00:08:22.440 --> 00:08:24.412
We're gonna do it with WebSockets too,
it's wild.

125
00:08:27.001 --> 00:08:28.652
Or I don't know if it's wild,

126
00:08:28.652 --> 00:08:32.221
maybe I just have a weird definition
of what is wild and what is not.

127
00:08:32.221 --> 00:08:36.126
Anyway, this is not therapy hour.

128
00:08:36.126 --> 00:08:38.143
I'll talk to my therapist
about that later.

129
00:08:38.143 --> 00:08:44.260
Okay, so we're gonna say, server,
which is our Node server, right?

130
00:08:44.260 --> 00:08:47.230
Whenever it gets a stream request,

131
00:08:47.230 --> 00:08:52.384
which is specific to HTTP2,
we're gonna run this handler.

132
00:08:52.384 --> 00:08:53.870
This does not need to be async.

133
00:08:53.870 --> 00:08:55.174
Okay, so it's not an async.

134
00:08:55.174 --> 00:08:57.044
It could be async, but
it doesn't need to be.

135
00:08:58.990 --> 00:09:03.576
So it's gonna take in a stream and
a headers array.

136
00:09:05.933 --> 00:09:10.535
Okay, so the first thing is everything
is gonna both make a request and

137
00:09:10.535 --> 00:09:12.730
open a stream as well.

138
00:09:12.730 --> 00:09:16.957
So when someone requests styles.css,
this is gonna fire, and

139
00:09:16.957 --> 00:09:19.160
then this is gonna fire, right?

140
00:09:19.160 --> 00:09:22.600
So we have to just make sure that we're
paying attention to the correct things.

141
00:09:23.860 --> 00:09:27.125
So first thing we do, I mean,
basically just copy this.

142
00:09:30.391 --> 00:09:32.887
We're gonna make sure that we're
only paying attention to the correct

143
00:09:32.887 --> 00:09:33.519
path and method.

144
00:09:36.049 --> 00:09:41.339
So again, yeah, streams open for
every request from the browser.

145
00:09:45.082 --> 00:09:50.049
And we're gonna say,

146
00:09:50.049 --> 00:09:55.284
if path === /msgs.

147
00:09:55.284 --> 00:09:59.973
Yeah, sorry, I probably should explain
this earlier, but this weird triple equal

148
00:09:59.973 --> 00:10:04.414
signs here I have, it's actually just
my font combining those into one glyph.

149
00:10:04.414 --> 00:10:08.470
But it is actually, you can see that's now
a double equals, and then a triple equals.

150
00:10:12.386 --> 00:10:18.338
And method === GET.

151
00:10:20.114 --> 00:10:24.352
So basically, wait for
the msgs and GET to come in.

152
00:10:26.933 --> 00:10:32.298
The first thing that we wanna
do is we wanna immediately

153
00:10:32.298 --> 00:10:36.975
reply with 200 OK and the encoding, right?

154
00:10:39.106 --> 00:10:42.121
So it might be helpful here
if we just say connected.

155
00:10:42.121 --> 00:10:45.349
So this will just let you know
that it connected a stream, so

156
00:10:45.349 --> 00:10:46.586
something like that.

157
00:10:49.331 --> 00:10:52.704
And you can even here, you can say plus,

158
00:10:55.007 --> 00:11:00.230
stream.id, this can be a little
confusing because Node will reuse IDs.

159
00:11:01.600 --> 00:11:04.709
So you'll have three connected and they'll
have different IDs, but then one of

160
00:11:04.709 --> 00:11:07.420
them will drop out and then Node will
reuse that with a different user.

161
00:11:08.640 --> 00:11:11.739
So just be aware that you might
see the same ID be reused.

162
00:11:13.470 --> 00:11:16.787
Then you can say stream.respond.

163
00:11:18.873 --> 00:11:22.620
Immediately, you just wanna say,
I received your request.

164
00:11:22.620 --> 00:11:23.850
Everything is healthy.

165
00:11:23.850 --> 00:11:25.850
We're about to start
responding back to you.

166
00:11:27.620 --> 00:11:32.900
So :status 200 to let them
know that it's a 200 response.

167
00:11:32.900 --> 00:11:35.580
And then we're just gonna tell them
how we're gonna send data back.

168
00:11:37.757 --> 00:11:42.180
Now you might be tempted to
put here application/json,

169
00:11:42.180 --> 00:11:45.047
which is actually not totally true.

170
00:11:45.047 --> 00:11:49.147
Cuz we're gonna be sending them multiple
packets of JSON, which if you put those

171
00:11:49.147 --> 00:11:52.950
all together as one thing would
not actually be valid JSON, right?

172
00:11:52.950 --> 00:11:54.940
I can't have multiple objects.

173
00:11:56.660 --> 00:11:58.200
There's no way to stream JSON.

174
00:11:58.200 --> 00:12:01.576
That's actually one of the problems
with JSON as a protocol for

175
00:12:01.576 --> 00:12:05.040
communicating is it doesn't
stream very well at all.

176
00:12:05.040 --> 00:12:07.842
Whereas unfortunately,
something like YAML, which YAML sucks, but

177
00:12:07.842 --> 00:12:08.970
it does stream fairly well.

178
00:12:11.070 --> 00:12:13.853
Anyway, so
we're just gonna say text/plain, and

179
00:12:13.853 --> 00:12:18.060
that'll just tell whoever is consuming
this is like, make no assumption.

180
00:12:18.060 --> 00:12:21.009
I'm gonna send you a free form data,
basically.

181
00:12:21.009 --> 00:12:24.524
And then we just tell
that it is charset=utf-8,

182
00:12:24.524 --> 00:12:27.154
just to let it know how it's encoded.

183
00:12:32.123 --> 00:12:35.954
Okay, so that's gonna establish
the connection and then keep it open.

184
00:12:38.276 --> 00:12:40.598
And then we're gonna
write the first response.

185
00:12:42.541 --> 00:12:49.590
We're gonna first say
stream.write JSON.stringify.

186
00:12:49.590 --> 00:12:53.849
Cuz again, Express isn't doing all
of the nice, packaging it up for us.

187
00:12:53.849 --> 00:12:56.585
So we have to stringify it ourselves.

188
00:12:56.585 --> 00:13:00.555
I'm gonna say msg getMsgs.

189
00:13:07.246 --> 00:13:12.684
And then here,
we're gonna say stream.on close.

190
00:13:12.684 --> 00:13:19.983
So whenever the user disconnects,
We just wanna log that out and say,

191
00:13:21.817 --> 00:13:28.187
console.log disconnected.

192
00:13:31.588 --> 00:13:33.491
+ stream.id.

193
00:13:38.454 --> 00:13:39.453
Okay.

194
00:13:43.980 --> 00:13:45.374
So you can see here this is running.

195
00:13:45.374 --> 00:13:47.206
If you go over here, nothing's happening.

196
00:13:47.206 --> 00:13:51.850
So this might terrify some of you,
potential security risk ahead.

197
00:13:51.850 --> 00:13:55.426
I promise you I'm not exfiltrating
your Bitcoins or something like that.

198
00:13:55.426 --> 00:13:57.973
Though honestly, great idea,
I should have thought of that earlier.

199
00:13:57.973 --> 00:14:01.790
[LAUGH] This is fine.

200
00:14:01.790 --> 00:14:04.450
The browsers just don't trust
self-signed certificates.

201
00:14:04.450 --> 00:14:08.790
So you have to click here on Advanced and
accept the risk and continue.

202
00:14:08.790 --> 00:14:12.943
It'll look similar in Chrome, and Safari,
and Edge, but just say accept it.

203
00:14:16.697 --> 00:14:17.941
What's happening here?

204
00:14:22.084 --> 00:14:23.806
What did I do?

205
00:14:23.806 --> 00:14:25.090
Req is not defined.

206
00:14:26.090 --> 00:14:27.660
Yeah, what did I do here?

207
00:14:27.660 --> 00:14:34.801
Rec headers, so here on 39 and 40,
just delete, it's just headers.

208
00:14:38.175 --> 00:14:44.500
So on 30 and 39, headers is not coming
from req as it was down here, right?

209
00:14:44.500 --> 00:14:46.605
It's actually just coming in as an array.

210
00:14:46.605 --> 00:14:50.504
So yeah, line 39 and line 40,
headers path and method.

211
00:14:53.176 --> 00:14:55.669
Refresh that, try again, there you go.

212
00:14:55.669 --> 00:14:58.522
Now our Chat With Me is back up.

213
00:14:58.522 --> 00:15:00.970
Again, nothing is working and
nothing streaming, but

214
00:15:00.970 --> 00:15:02.695
we'll get there here in just a second.

215
00:15:04.337 --> 00:15:07.628
One thing that I did add for this
particular section here in the top right,

216
00:15:07.628 --> 00:15:08.755
see this little red dot?

217
00:15:10.305 --> 00:15:14.820
I wanted you to be able to visualize,
am I connected to the server or am I not?

218
00:15:14.820 --> 00:15:17.915
So we're gonna write a little code to just
modify that so that if I'm connected,

219
00:15:17.915 --> 00:15:20.064
it'll be green and
if it's disconnected, it's red.

220
00:15:20.064 --> 00:15:22.808
You can see right now I'm not connected
to the server, so it's gonna be red.

