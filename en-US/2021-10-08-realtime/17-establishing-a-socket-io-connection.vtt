WEBVTT

1
00:00:00.110 --> 00:00:00.930
Let's go read some code.

2
00:00:02.090 --> 00:00:06.440
So again, make sure you're in
the websocket/exercise-socketio.

3
00:00:06.440 --> 00:00:11.320
Directory, I'm gonna go get there myself,
close these.

4
00:00:12.980 --> 00:00:16.160
I'm gonna go over to exercise socketio.

5
00:00:18.220 --> 00:00:23.196
Restart my old server here,
and I'm gonna get

6
00:00:23.196 --> 00:00:28.178
into exercise-socketio
run your NPM install

7
00:00:31.863 --> 00:00:38.947
So here we have socket.io
that we're installing.

8
00:00:38.947 --> 00:00:43.578
And then I think the rest I ended up
writing with express just because it was

9
00:00:43.578 --> 00:00:44.484
really easy.

10
00:00:44.484 --> 00:00:49.147
The one thing that I will call out

11
00:00:49.147 --> 00:00:54.180
here in index.html is down here.

12
00:00:54.180 --> 00:00:58.870
I'm actually loading the socket.io
client off of their CDN.

13
00:01:00.320 --> 00:01:04.010
Normally we just have the build
process with like parcel or Webpack.

14
00:01:04.010 --> 00:01:06.150
We're not doing that today,
just trying to keep it really simple.

15
00:01:06.150 --> 00:01:11.260
So here inside of your socketio chat,
you'll have a global called IO.

16
00:01:11.260 --> 00:01:13.461
That's just available to that's just so,

17
00:01:13.461 --> 00:01:16.978
that's where that's coming from,
is we're loading it off the CDN.

18
00:01:23.470 --> 00:01:27.694
Okay, so let's head over to server.js.

19
00:01:29.914 --> 00:01:33.612
Notice we don't have any of our helpers
because socket.io will handle all

20
00:01:33.612 --> 00:01:34.560
that stuff for us.

21
00:01:36.090 --> 00:01:39.995
And we have this server primitive that
we're getting from the socket.io package.

22
00:01:44.723 --> 00:01:48.890
So one of the first things first is
we're creating our static assets here.

23
00:01:48.890 --> 00:01:52.987
So actually I don't think we're
using express really at all.

24
00:01:52.987 --> 00:01:56.900
You can use socket.io and
express together.

25
00:01:56.900 --> 00:01:59.720
But for our case, all you needed
to do is serve static assets.

26
00:01:59.720 --> 00:02:01.074
So I just did that right there for you.

27
00:02:04.492 --> 00:02:05.571
Okay.

28
00:02:09.090 --> 00:02:12.314
And yeah, just to emphasize this is going
to be like a 100 times easier than what

29
00:02:12.314 --> 00:02:12.933
we did before.

30
00:02:17.044 --> 00:02:20.801
So, where we go says code goes here,

31
00:02:20.801 --> 00:02:26.150
what we're gonna say is
const io equals new server.

32
00:02:28.000 --> 00:02:32.217
We're going to pass in our server and
no options.

33
00:02:32.217 --> 00:02:38.083
So you can create a new socket.io
server without an HTTP server,

34
00:02:38.083 --> 00:02:44.060
but it will reuse the same one
if you already make one, right?

35
00:02:44.060 --> 00:02:46.020
Because we have to serve
static assets up here.

36
00:02:46.020 --> 00:02:47.920
We're just going to reuse
the same server but

37
00:02:47.920 --> 00:02:50.834
that's something that socket.io
can technically handle as well.

38
00:02:53.614 --> 00:02:56.222
Okay, and then here we're gonna say io.on.

39
00:02:58.283 --> 00:03:01.347
Connection, I don't know
if you'd say that io but

40
00:03:01.347 --> 00:03:03.850
that's what I'm gonna pronounce it as.

41
00:03:07.124 --> 00:03:08.226
Socket.

42
00:03:11.558 --> 00:03:14.564
And then here we're just
gonna say console.log.

43
00:03:16.532 --> 00:03:17.649
Connected.

44
00:03:19.578 --> 00:03:25.629
Socket.id .d And

45
00:03:25.629 --> 00:03:34.123
then we're gonna say
socket.on(disconnect).

46
00:03:37.114 --> 00:03:41.911
We're gonna say, console.log,

47
00:03:44.580 --> 00:03:52.262
disconnected, socket.id

48
00:03:58.152 --> 00:04:04.275
I mean, this is pretty close to it for
starting a socket.io server, right?

49
00:04:06.292 --> 00:04:11.336
So now we should be able to start
running our server, npm run dev.

50
00:04:11.336 --> 00:04:13.475
And see here we're running on 8080 again.

51
00:04:16.712 --> 00:04:20.378
Nothing's happening on the servers,
I guess if you can come back over to

52
00:04:20.378 --> 00:04:24.810
the client and this will load right,
nothing else is happening here.

53
00:04:24.810 --> 00:04:27.534
But it will load the page cuz it's
serving all the static assets.

54
00:04:31.282 --> 00:04:36.135
So let's go back and
go into socket io chat in our front end.

55
00:04:40.396 --> 00:04:46.575
And here we're gonna say
const socket = io and

56
00:04:46.575 --> 00:04:52.122
remember this is being loaded globally,

57
00:04:52.122 --> 00:04:56.727
http:// localhost 8080.

58
00:04:56.727 --> 00:05:00.718
This will know to connect an upgrade
to aws and all that kind of stuff.

59
00:05:00.718 --> 00:05:02.340
We don't have to handle any of that.

60
00:05:02.340 --> 00:05:05.332
We can just say connect to this and
know you figured out using smart.

61
00:05:08.051 --> 00:05:12.719
And then here we can just
say socket.on connect.

62
00:05:19.224 --> 00:05:23.001
Consoled.log connected.

63
00:05:24.190 --> 00:05:29.380
And here we'll do our
presence indicator as

64
00:05:29.380 --> 00:05:34.716
well presence.innertext = green circle.

65
00:05:39.002 --> 00:05:40.041
Same thing here.

66
00:05:40.041 --> 00:05:43.975
socket.on disconnect

67
00:05:47.181 --> 00:05:51.103
We'll just say same thing but
go to the red circle.

68
00:06:10.122 --> 00:06:12.344
Okay, then here you'll say red circle.

69
00:06:16.480 --> 00:06:19.521
Okay, so, servers running on 8080,

70
00:06:19.521 --> 00:06:23.072
we should come back over here,
refresh the page.

71
00:06:23.072 --> 00:06:26.070
And notice that our
green circles connected.

72
00:06:26.070 --> 00:06:29.671
If you look here, this is connected
here if you see down here, connected,

73
00:06:29.671 --> 00:06:32.430
this is going to give you
a unique identifier per socket.

74
00:06:33.610 --> 00:06:34.442
These ones are not reused.

75
00:06:34.442 --> 00:06:38.930
So you'll see these being unique
every single time which is good.

76
00:06:40.350 --> 00:06:46.014
So here's a really cool thing that you
might have noticed in our other examples,

77
00:06:46.014 --> 00:06:50.443
like the Ross socket one,
the HTTP2, all that kind of stuff.

78
00:06:50.443 --> 00:06:53.270
When we disconnected,
we did not retry, right.

79
00:06:53.270 --> 00:06:55.250
We did not attempt to reconnect, right.

80
00:06:55.250 --> 00:06:59.300
We would have had to write that
logic that's detected, okay.

81
00:06:59.300 --> 00:07:00.470
I just connected, okay.

82
00:07:00.470 --> 00:07:03.615
Now I gotta go and retry and reconnect and
do all those kinds of things.

83
00:07:03.615 --> 00:07:06.910
socket.io just does it for
you out of the box.

84
00:07:06.910 --> 00:07:12.410
So, if I come here and cancel this right,
okay, now I'm red, right?

85
00:07:12.410 --> 00:07:18.131
Because that's disconnected I'm gonna come
back here and start my server again And

86
00:07:18.131 --> 00:07:24.939
eventually might reconnect there you go,
just reconnects.

87
00:07:26.822 --> 00:07:31.703
That's pretty cool like in of itself
like this socket.io is already worth

88
00:07:31.703 --> 00:07:35.663
it to me that I don't have to
go rewrite reconnection logic.

89
00:07:35.663 --> 00:07:38.210
Like we had already talked
about back off and retry.

90
00:07:38.210 --> 00:07:42.672
It's the word it's just not, fun code
to write, read, this just works for

91
00:07:42.672 --> 00:07:43.860
you out of the box.

92
00:07:43.860 --> 00:07:44.764
I don't know I love it.

93
00:07:47.183 --> 00:07:50.112
So that's the nice thing here is like if
we come in here and save our code and

94
00:07:50.112 --> 00:07:51.640
make, like make our server restart.

95
00:07:52.650 --> 00:07:54.530
So you notice here I restarted my server.

96
00:07:54.530 --> 00:07:56.755
You can see already down here,
it just reconnects,

97
00:07:56.755 --> 00:07:58.382
I don't have to do anything about it.

98
00:08:01.801 --> 00:08:03.822
Just by having that window open.

99
00:08:03.822 --> 00:08:07.125
So, first advantage they're
handling all that kind of

100
00:08:07.125 --> 00:08:10.157
just stuff you never wanted
to think about for you.

101
00:08:10.157 --> 00:08:13.030
And you can turn that
off by the way it's not.

102
00:08:13.030 --> 00:08:16.489
I think it's retry or something like that
you can turn off those retry connections.

103
00:08:18.340 --> 00:08:18.840
But why would you?

104
00:08:21.641 --> 00:08:23.150
Yeah, I'm not gonna show
you this right now.

105
00:08:23.150 --> 00:08:26.665
But we already talked about it
that if my browser did not support

106
00:08:26.665 --> 00:08:29.264
WebSockets it would
actually start pulling.

107
00:08:31.910 --> 00:08:33.391
I wonder if I could, I don't know.

108
00:08:33.391 --> 00:08:37.419
Let's try this const
this is a terrible idea.

109
00:08:37.419 --> 00:08:45.656
WebSocket, window.websocket=no.

110
00:08:45.656 --> 00:08:46.996
I have no idea what's gonna do.

111
00:08:50.546 --> 00:08:54.065
Sorry this is gonna go
on the socket io chat.

112
00:08:59.996 --> 00:09:01.823
So now we're gonna come over here.

113
00:09:05.462 --> 00:09:07.894
Let's actually go into
our network panel and

114
00:09:07.894 --> 00:09:11.169
see if it's actually doing polling or
something like that.

115
00:09:12.910 --> 00:09:14.750
No way it actually is.

116
00:09:14.750 --> 00:09:15.540
So there you go,

117
00:09:15.540 --> 00:09:19.157
you click on this you can see here
the transport right there equals polling.

118
00:09:21.773 --> 00:09:24.158
Didn't have to do anything just
ended up working that way and

119
00:09:24.158 --> 00:09:25.900
notice like all the same
logic still works.

120
00:09:25.900 --> 00:09:29.080
It still says connected it's still
running like the on connect.

121
00:09:29.080 --> 00:09:31.310
All the on data stuff is
gonna work the same way.

122
00:09:32.360 --> 00:09:32.860
Just works.

123
00:09:35.013 --> 00:09:38.324
It's subtracts away the idea of a
connection for you is just like, look up,

124
00:09:38.324 --> 00:09:39.692
we'll figure it out, right?

125
00:09:39.692 --> 00:09:45.015
You go read your code and socket.io is
gonna figure out the rest of it for you.

126
00:09:45.015 --> 00:09:47.240
Okay never do that it's a terrible idea,
but

127
00:09:47.240 --> 00:09:49.360
it was definitely fun to experiment with.

