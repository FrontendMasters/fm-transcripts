WEBVTT

1
00:00:00.090 --> 00:00:01.418
Let's go code this ourselves.

2
00:00:05.769 --> 00:00:08.996
I'm gonna fix this, okay.

3
00:00:10.731 --> 00:00:12.362
So here in pulling chat.

4
00:00:20.948 --> 00:00:22.158
What we're gonna do here.

5
00:00:25.397 --> 00:00:30.320
We're gonna say, if res.status.

6
00:00:34.877 --> 00:00:36.788
Is greater than or equal to 400,

7
00:00:36.788 --> 00:00:39.730
which basically means
something went wrong, right?

8
00:00:39.730 --> 00:00:44.830
If you're not familiar with HTTP verbs,
just go look at the Wikipedia page.

9
00:00:44.830 --> 00:00:48.365
I look at it all the time cuz I can never
remember anything outside of like what

10
00:00:48.365 --> 00:00:49.479
404 and 200 are.

11
00:00:51.262 --> 00:00:54.474
But basically if this number is
greater than or equal to 400,

12
00:00:54.474 --> 00:00:56.320
something went wrong.

13
00:00:56.320 --> 00:00:59.061
Then what I'm gonna do here is I'm
gonna just say throw new error.

14
00:01:02.080 --> 00:01:03.913
Requests did not succeed.

15
00:01:07.246 --> 00:01:09.028
Plus res.status.

16
00:01:16.919 --> 00:01:20.608
Okay, I'm gonna move this stuff
actually up into my try catch as well.

17
00:01:27.807 --> 00:01:30.467
Okay, and
then I'm gonna call render here as well.

18
00:01:35.974 --> 00:01:39.489
Okay, and then we're also gonna make a,
we haven't written it yet but

19
00:01:39.489 --> 00:01:42.140
we're gonna create a variable
called failed tries.

20
00:01:43.150 --> 00:01:45.730
Failed tries equals zero, right?

21
00:01:45.730 --> 00:01:50.230
Cuz if we get down here that means it
succeeded which means we have no failed

22
00:01:50.230 --> 00:01:50.745
tries.

23
00:01:53.422 --> 00:01:57.919
Okay, and then down here in the cache,
we'll put a polling error here so

24
00:01:57.919 --> 00:02:00.670
you can see if something happened, right?

25
00:02:00.670 --> 00:02:04.670
And then I'm gonna say failedTries++,
right?

26
00:02:04.670 --> 00:02:07.178
Because if we get down
into this block down here,

27
00:02:07.178 --> 00:02:10.185
that means something bad happened,
we should try again.

28
00:02:18.053 --> 00:02:23.218
Okay, so I'm gonna do what we did here,
if the status comes back as

29
00:02:23.218 --> 00:02:29.146
bad they really go into our cache
statement, that's all this stands here.

30
00:02:32.907 --> 00:02:39.043
Okay, then down here, at ref timer, we're
going to add a couple more variables here.

31
00:02:39.043 --> 00:02:43.768
We're gonna make one called back
off const back off, equals 5000,

32
00:02:43.768 --> 00:02:47.260
so we're gonna do kind of
a linear back off strategy.

33
00:02:47.260 --> 00:02:50.443
So we're gonna add five seconds
to our retry every single time.

34
00:02:53.541 --> 00:02:57.353
And then we're gonna say let
failed tries equals zero,

35
00:02:57.353 --> 00:03:00.443
cuz initially there will
be no failed tries.

36
00:03:04.558 --> 00:03:09.296
Okay, and then down here,
all we need to do is make this

37
00:03:09.296 --> 00:03:13.216
time the next request, time plus interval.

38
00:03:16.326 --> 00:03:20.601
Plus failed tries times back off.

39
00:03:28.713 --> 00:03:29.877
And that's really it.

40
00:03:29.877 --> 00:03:33.121
The only thing that we're really
manipulating here is when are we gonna

41
00:03:33.121 --> 00:03:34.590
make our next request, right?

42
00:03:36.170 --> 00:03:40.737
So for the most part, if it's pulling
successfully and we have no problems,

43
00:03:40.737 --> 00:03:44.910
this is gonna be 0 and 0 times 5000,
always still gonna be 0.

44
00:03:44.910 --> 00:03:46.210
So this doesn't add anything to it.

45
00:03:47.250 --> 00:03:52.008
But if we have one failed try right
then there'll be 5000 added to

46
00:03:52.008 --> 00:03:55.627
this 10 failed tries, so
on and so forth, right?

47
00:04:01.113 --> 00:04:07.500
So I mean, if you wanted to do exponential
back off that would be like failed tries.

48
00:04:10.267 --> 00:04:16.366
Times a 1000, so, if we're doing seconds,

49
00:04:16.366 --> 00:04:22.189
right and
then I think that is exponents times.

50
00:04:26.154 --> 00:04:31.800
Actually wanting me to be 2000 or
1000, 2000.

51
00:04:31.800 --> 00:04:36.344
Anyway, you would just do the math here
to, I can't think of it off the top my

52
00:04:36.344 --> 00:04:39.430
head but
this is where you would do that as well.

53
00:04:39.430 --> 00:04:42.417
But we're just going to do
a pretty simple linear one here,

54
00:04:42.417 --> 00:04:43.745
which is going to be this.

55
00:04:45.706 --> 00:04:48.583
And then you can mess with
back off here is like, well,

56
00:04:48.583 --> 00:04:51.740
I wanna do every ten seconds now or
two seconds, up to you.

57
00:04:51.740 --> 00:04:53.361
We'll do 5000 for right now.

58
00:04:56.774 --> 00:05:00.284
Okay, so we should be able to
just go back to our app and

59
00:05:00.284 --> 00:05:02.865
it's not gonna have any failed stuff.

60
00:05:04.536 --> 00:05:10.018
So this is just gonna keep
on chugging to be great,

61
00:05:10.018 --> 00:05:16.421
but here if we come back and
say .status500 like that.

62
00:05:20.523 --> 00:05:24.474
Now notice this is gonna take
significantly longer between poles.

63
00:05:28.881 --> 00:05:36.472
So got another 500, so this should take,
what 13 seconds before requests again.

64
00:05:40.494 --> 00:05:46.042
Yep, so failed again,
18 seconds, so on and so forth.

65
00:05:48.453 --> 00:05:51.675
Now let's go back here and

66
00:05:51.675 --> 00:05:56.948
say we'll make it only
fail some of the time

67
00:05:56.948 --> 00:06:01.930
math.random is greater than 0.5 and

68
00:06:01.930 --> 00:06:06.764
if it is we'll make it 200, if not,

69
00:06:06.764 --> 00:06:09.712
we'll make it 500.

70
00:06:11.900 --> 00:06:19.247
This is just a ternary math.random gives
you back a number between 1 or 0 and 1.

71
00:06:19.247 --> 00:06:25.740
So in theory about half the time
this will be true or false, right?

72
00:06:25.740 --> 00:06:29.069
If it's true, make it 200,
if it's false, make it 500.

73
00:06:31.407 --> 00:06:34.253
And so this will fail sometimes and
it won't fail other times, so

74
00:06:34.253 --> 00:06:36.086
you can see here it failed the first time.

75
00:06:41.861 --> 00:06:47.538
Failed again, so it's gonna back off
further but in theory, if it gets a 200

76
00:06:47.538 --> 00:06:52.800
it should reset itself and be it'll
have that smaller back off period.

77
00:06:52.800 --> 00:06:55.270
So you can see here it should pull
again quickly and it did, right?

78
00:06:55.270 --> 00:06:58.161
So now it's back to pulling normally,
and then it got to 500, so

79
00:06:58.161 --> 00:06:59.398
it's gonna back off again.

80
00:07:13.676 --> 00:07:15.635
Cool I don't wanna leave that in,

81
00:07:15.635 --> 00:07:19.159
this is not good programming
don't ship that to production.

82
00:07:20.716 --> 00:07:21.462
Pro tip.

83
00:07:25.334 --> 00:07:27.720
So, a couple of notes here.

84
00:07:29.200 --> 00:07:31.445
The try cache here might
be strange to you.

85
00:07:33.680 --> 00:07:38.148
Let's talk about why I did it this way,
I can actually just show you.

86
00:07:43.682 --> 00:07:45.951
If you go into offline mode here,

87
00:07:45.951 --> 00:07:50.370
this will actually cause
a fetch will throw an error.

88
00:07:50.370 --> 00:07:54.772
So in the code here, instead of
this coming back with like a 400 or

89
00:07:54.772 --> 00:07:59.484
500 or something like that,
this will actually just throw an error,

90
00:07:59.484 --> 00:08:03.420
which would cause us to go
into a cache statement.

91
00:08:03.420 --> 00:08:07.101
So rather than trying
bifurcate my logic here and

92
00:08:07.101 --> 00:08:12.140
handle that here and handle that here,
I just threw an error here.

93
00:08:12.140 --> 00:08:15.290
And then I can put all of my error
handling logic in the same place.

94
00:08:15.290 --> 00:08:18.920
So that's why I chose to do
the throw a new error here.

95
00:08:18.920 --> 00:08:23.528
As well as that so that I can have all
of my error handling done in one place.

96
00:08:26.981 --> 00:08:31.923
So yeah, this throws a error if
the network won't connect but

97
00:08:31.923 --> 00:08:36.493
it will not throw an error
if it gets a 500.

98
00:08:36.493 --> 00:08:37.775
That's what I meant to say.

99
00:08:40.947 --> 00:08:43.899
Yeah, this is just one way
of doing the math, but

100
00:08:43.899 --> 00:08:47.790
the idea here is you manipulate
when you make your next request.

101
00:08:48.850 --> 00:08:50.854
And if you were doing this
with set timeout instead

102
00:08:50.854 --> 00:08:52.390
of requestAnimationFrame, right?

103
00:08:53.500 --> 00:08:58.284
Let's just look at that polling chat
from no pause, the number that you

104
00:08:58.284 --> 00:09:03.450
have manipulate would be this one,
this interval number here, right?

105
00:09:03.450 --> 00:09:05.640
You would have the same logic here,

106
00:09:05.640 --> 00:09:10.460
if you're gonna do that with set timeout
instead of requestAnimationFrame.

107
00:09:19.280 --> 00:09:24.090
My general kind of just product advice for
you is for retry and

108
00:09:24.090 --> 00:09:29.184
back off, if a user's request fails,
immediately try again,

109
00:09:29.184 --> 00:09:33.230
and then wait a short time and
then try again.

110
00:09:33.230 --> 00:09:38.060
And if those two requests both fail, so
you'll have three requests fail in a row,

111
00:09:38.060 --> 00:09:40.790
then you wanna back off
pretty aggressively.

112
00:09:42.600 --> 00:09:47.678
Between those three requests you
should catch most things like

113
00:09:47.678 --> 00:09:53.750
I change networks or I had a blip from
my ISP or something like that and.

114
00:09:53.750 --> 00:09:56.031
If they don't succeed after three,

115
00:09:56.031 --> 00:09:59.570
they're probably not gonna
succeed in the next minute.

116
00:10:00.730 --> 00:10:02.910
So at that point I try and
back off pretty aggressively.

117
00:10:04.030 --> 00:10:10.730
That's just kind of my general thinking
about what my strategy is there.

118
00:10:10.730 --> 00:10:14.152
Yeah, at that point I'm worried
that my servers are overwhelmed and

119
00:10:14.152 --> 00:10:17.270
I wanna just shed as much
load as possible, right?

120
00:10:17.270 --> 00:10:18.523
So that I can bring them back.

121
00:10:22.431 --> 00:10:24.710
In general,
I don't really write this logic myself.

122
00:10:25.730 --> 00:10:29.670
What we just showed here, lots and lots
and lots of libraries will do this for

123
00:10:29.670 --> 00:10:32.790
you like Axio has built in retry and
back off.

124
00:10:32.790 --> 00:10:36.720
Axio is a great library,
which does a felt like requests for you.

125
00:10:38.460 --> 00:10:42.765
But I wanted to show you what's happening
underneath the hood so that you know one

126
00:10:42.765 --> 00:10:46.898
cuz you'll probably you will likely get
asked this interview at some point.

127
00:10:46.898 --> 00:10:50.299
And two it's just it's good to know,
it's good product sense to have.

128
00:10:56.604 --> 00:10:59.030
Cool.

129
00:10:59.030 --> 00:11:04.910
So the completed code here is in back
off and retry which I'll show you.

130
00:11:07.709 --> 00:11:10.730
Which is here, back off and retry

