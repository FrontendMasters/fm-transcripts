WEBVTT

1
00:00:00.237 --> 00:00:05.444
Let's hop into HTTP/2 push.

2
00:00:05.444 --> 00:00:10.694
I have the hardest time saying the words
HTTP/2 out loud, the syllables

3
00:00:10.694 --> 00:00:16.123
there just don't mesh in my mouth, so
I'm gonna mess it up a bunch of times.

4
00:00:16.123 --> 00:00:20.058
I might just call it H2 because I
hear a bunch of people call it that,

5
00:00:20.058 --> 00:00:22.695
I won't cuz I'll forget but
I would like to.

6
00:00:24.269 --> 00:00:25.420
Okay.

7
00:00:28.878 --> 00:00:32.871
So let's talk about HTTP/2 push.

8
00:00:32.871 --> 00:00:38.417
So let's think of a normal,
TCP IP HTTP requests, right?

9
00:00:38.417 --> 00:00:41.565
I make a request to example.com,

10
00:00:41.565 --> 00:00:46.896
I send a bunch of headers,
they sent a bunch of stuff back.

11
00:00:46.896 --> 00:00:48.096
And it just goes back and

12
00:00:48.096 --> 00:00:51.293
forth like it's that kind of
normal exchange of information.

13
00:00:51.293 --> 00:00:54.957
I write a single request and
to that request, I get a single response,

14
00:00:54.957 --> 00:00:59.193
it's a one-to-one relationship that I
requested something and I got it back.

15
00:01:00.245 --> 00:01:05.789
What if we could make an HTTP request
instead of getting just one request back,

16
00:01:05.789 --> 00:01:11.257
we could get, or sorry, one response back,
we can get many responses back?

17
00:01:11.257 --> 00:01:16.568
And that's what we're actually gonna do
with this thing called HTTP/2 push, right?

18
00:01:16.568 --> 00:01:20.663
We're just gonna open a connection but
after we're done getting information for

19
00:01:20.663 --> 00:01:22.976
the first chunk of data
that we're gonna get,

20
00:01:22.976 --> 00:01:25.663
we're just not gonna close the connection,
right?

21
00:01:25.663 --> 00:01:29.824
We're just gonna leave that
connection open and just say, cool,

22
00:01:29.824 --> 00:01:32.212
if you got more stuff, send it my way.

23
00:01:32.212 --> 00:01:34.028
That's what HTTP/2 push is.

24
00:01:34.028 --> 00:01:37.300
So the first thing I was describing to
you, which is one request, one response,

25
00:01:37.300 --> 00:01:40.156
that is the old spec, which has
been around since like 96, or 97.

26
00:01:40.156 --> 00:01:43.021
And that's HTTP/1.1,

27
00:01:43.021 --> 00:01:48.399
it's been around forever,
it still serves us well.

28
00:01:48.399 --> 00:01:51.494
I was actually just going
through some websites,

29
00:01:51.494 --> 00:01:56.577
a bunch of websites still actually do
100% of all their requests over 1.1,

30
00:01:56.577 --> 00:01:59.247
and that is actually mostly totally fine.

31
00:02:00.549 --> 00:02:05.959
HTTP 2 came out in 2015, and ever since
then we've been kind of adapting to that.

32
00:02:05.959 --> 00:02:09.131
It started out as a library
from Google called SPDY,

33
00:02:09.131 --> 00:02:13.833
S-P-D-Y, I don't know what this stands for
or if it stands for anything.

34
00:02:13.833 --> 00:02:16.770
But basically after
a couple years of pushing,

35
00:02:16.770 --> 00:02:20.963
I remember them pushing it at
conferences in 2011, 2012.

36
00:02:22.602 --> 00:02:25.141
Firefox adopted it, Safari adopted it.

37
00:02:25.141 --> 00:02:28.327
Eventually people are like,
okay, this thing makes sense and

38
00:02:28.327 --> 00:02:31.644
they just kind of modified and
they built on top of HTTP/1.1.

39
00:02:31.644 --> 00:02:36.735
And made it a little bit better and
added some better features to it.

40
00:02:36.735 --> 00:02:39.494
Just some highlights of
things that they added,

41
00:02:39.494 --> 00:02:43.278
you can now multiplex requests
which that was extremely helpful.

42
00:02:43.278 --> 00:02:46.476
So let's say I'm
connecting to netflix.com,

43
00:02:46.476 --> 00:02:50.064
rather than connect to netflix.com,
read the HTML,

44
00:02:50.064 --> 00:02:55.372
figure out that I need this CSS file and
this image file and this JavaScript file.

45
00:02:55.372 --> 00:02:58.406
And opening new requests to the server and

46
00:02:58.406 --> 00:03:03.096
having individual handshakes and
headers and stuff like that.

47
00:03:03.096 --> 00:03:08.083
You can actually just open one big pipe
connection and it all goes over the same

48
00:03:08.083 --> 00:03:12.704
connection so you don't have to
make multiple handshakes basically.

49
00:03:12.704 --> 00:03:16.622
Huge performance win, really cool.

50
00:03:16.622 --> 00:03:21.965
There's better compression strategies to
HTTP/2, it allows a lower level access

51
00:03:21.965 --> 00:03:26.953
to the binary frames, which sounds smart
and I actually don't totally get it.

52
00:03:26.953 --> 00:03:31.803
But suffice to say it allows finer grit
access to the underlying frames which

53
00:03:31.803 --> 00:03:36.830
are actually sending the data back and
forth so they can compress them better.

54
00:03:39.060 --> 00:03:43.046
And it also added request prioritization,
so you can say, hey,

55
00:03:43.046 --> 00:03:47.901
this CSS file is a higher priority than
this image file, so you can actually send

56
00:03:47.901 --> 00:03:52.708
them things in different orders and
that can be negotiated over the protocol.

57
00:03:52.708 --> 00:03:55.754
There's other things, those are just
the things that stood out to me.

58
00:03:55.754 --> 00:04:01.348
The thing that I actually wanna talk
about is long running requests,

59
00:04:01.348 --> 00:04:03.960
which is a feature of HTTP/2.

60
00:04:05.110 --> 00:04:09.566
So a long running request is
basically the idea that I'm going to

61
00:04:09.566 --> 00:04:11.298
connect to the server and

62
00:04:11.298 --> 00:04:15.848
it's not going to immediately
give me everything back, right?

63
00:04:15.848 --> 00:04:20.435
So where this is actually super,
super useful, imagine that you're building

64
00:04:20.435 --> 00:04:23.934
an index.html file and
the body takes a long time to render.

65
00:04:23.934 --> 00:04:28.535
Maybe it's all of their user details and
you have to request from the database,

66
00:04:28.535 --> 00:04:31.913
request that from the cache and
a bunch of stuff like that.

67
00:04:31.913 --> 00:04:33.911
And it takes a while to call
that stuff to come back.

68
00:04:33.911 --> 00:04:36.327
If you're doing 1.1, you have to wait for

69
00:04:36.327 --> 00:04:40.023
all of that to be finished before
you can send them anything, right?

70
00:04:40.023 --> 00:04:42.306
You can't just send them a piece or
a chunk of it,

71
00:04:42.306 --> 00:04:44.382
you have to send them
the entire thing back.

72
00:04:44.382 --> 00:04:48.141
The reason why this is a damn shame is
that there's CSS files that they need to

73
00:04:48.141 --> 00:04:50.980
download, there's images
that they need to download.

74
00:04:50.980 --> 00:04:55.635
There's fonts, there's scripts,
there's a bunch of stuff that the browser

75
00:04:55.635 --> 00:05:00.235
could be working on but is not allowed
to because they don't know about it yet.

76
00:05:00.235 --> 00:05:04.643
Now enter HTTP/2, what we can do is
we can say, my user connects and

77
00:05:04.643 --> 00:05:08.292
then I immediately push to
them the entire head, right?

78
00:05:08.292 --> 00:05:13.213
So they can see all the fonts, they can
see all the CSS, they could probably even

79
00:05:13.213 --> 00:05:18.064
load a little loading script tag where
they could put up a nice loading module or

80
00:05:18.064 --> 00:05:19.940
something like that.

81
00:05:19.940 --> 00:05:22.769
But I can immediately flush
that information to them, and

82
00:05:22.769 --> 00:05:26.174
then in the background run all that
other rendering that I have to do and

83
00:05:26.174 --> 00:05:27.570
querying databases.

84
00:05:27.570 --> 00:05:31.434
And then in a second chunk,
push them the rendered information and

85
00:05:31.434 --> 00:05:35.097
then maybe in a third chunk,
you send them the footer, right?

86
00:05:35.097 --> 00:05:39.913
But suffice to say that something
that had to come all at

87
00:05:39.913 --> 00:05:43.264
once can now come in multiple pieces,

88
00:05:43.264 --> 00:05:47.887
that is what we're about
to abuse is supposed to do.

89
00:05:47.887 --> 00:05:50.271
What we're gonna do is we're
gonna make an API request and

90
00:05:50.271 --> 00:05:51.692
then just not finish the request.

91
00:05:51.692 --> 00:05:55.240
And then we're just gonna send multiple
things down on the same API request.

92
00:05:57.390 --> 00:06:01.520
I don't think it was designed for that,
maybe it was and I just think I'm

93
00:06:01.520 --> 00:06:06.220
more clever than I am, so, true,
I do think I'm more clever than I am.

94
00:06:06.220 --> 00:06:10.072
But basically we're gonna take that
same strategy of being able to flush out

95
00:06:10.072 --> 00:06:14.054
multiple pieces of an index.html and
we're gonna do that with API requests.

96
00:06:18.362 --> 00:06:22.771
Cool, yeah suffice to say,
we're gonna open a connection and

97
00:06:22.771 --> 00:06:27.109
then we're gonna send little
JSON chunks down to the client.

98
00:06:27.109 --> 00:06:30.113
Man, I have chunks written
everywhere in my notes and

99
00:06:30.113 --> 00:06:32.802
it's just a weird word to say out loud,
right?

100
00:06:32.802 --> 00:06:35.608
I don't know, probably should
have chosen a different word.

101
00:06:35.608 --> 00:06:36.473
Yeah, Mark.

102
00:06:36.473 --> 00:06:41.923
&gt;&gt; Are there any advancements planned for
HTTP/3 that will improve upon HTTP/2 push?

103
00:06:41.923 --> 00:06:44.475
&gt;&gt; Good question, the answer is no.

104
00:06:44.475 --> 00:06:48.843
What's interesting about HTTP/1 versus 2

105
00:06:48.843 --> 00:06:53.547
versus 3 is 1 to 2 changed
a lot of the interop and

106
00:06:53.547 --> 00:07:00.269
the kind of the protocols and
the handshakes and all that kind of stuff.

107
00:07:00.269 --> 00:07:04.282
The stuff that actually profoundly
affects you and me as web developers,

108
00:07:04.282 --> 00:07:06.235
that was a big revolution for that.

109
00:07:06.235 --> 00:07:10.478
HTTP/3, which is often called QUIC,
Q-U-I-C,

110
00:07:10.478 --> 00:07:15.830
I think it's another Google project
if I'm not mistaken, actually

111
00:07:15.830 --> 00:07:21.940
messes with the transport layer and
not necessarily with the protocol layer.

112
00:07:21.940 --> 00:07:25.852
Which I know I'm just throwing
out weird words here, but

113
00:07:25.852 --> 00:07:30.010
what it's actually doing is
it's actually messing with how

114
00:07:30.010 --> 00:07:33.609
the individual packets are sliced up and
sent over.

115
00:07:33.609 --> 00:07:36.725
HTTP/1.1 and
2 both use what's called TCP/IP,

116
00:07:36.725 --> 00:07:40.189
which is probably a term that
you've heard before, right?

117
00:07:40.189 --> 00:07:45.720
Whereas HTTP/3 uses something called UDP,
which if you've ever done any sort

118
00:07:45.720 --> 00:07:51.105
of networking, should make total sense
to you, it makes a little sense to me.

119
00:07:51.105 --> 00:07:57.071
The thing that HTTP/3 is going to
revolutionize us as web developers

120
00:07:57.071 --> 00:08:02.136
is that it's way more
fault-tolerant than 2 and 1.1.

121
00:08:02.136 --> 00:08:06.950
So the thing about TCP/IP is you get a,
I think it's called head-of-line blocking.

122
00:08:06.950 --> 00:08:11.799
And the idea is basically, let's say
I'm sending 100 packets to you and

123
00:08:11.799 --> 00:08:16.513
you drop the third packet, you have to
wait for that third packet to come.

124
00:08:16.513 --> 00:08:21.174
It must come in the correct order and
so you have to wait until you have to

125
00:08:21.174 --> 00:08:25.124
send back to the server, hey,
I missed the third packet and

126
00:08:25.124 --> 00:08:30.274
then the server's like, okay,
here's the third packet again, right?

127
00:08:30.274 --> 00:08:33.903
And then you can continue
loading all of your stuff,

128
00:08:33.903 --> 00:08:37.709
that's TCP/IP and
that's just how it's designed.

129
00:08:37.709 --> 00:08:40.521
UDP, which I forgot what it stands for,
but basically UDP says,

130
00:08:40.521 --> 00:08:44.840
we're just gonna send you all the packets,
it doesn't matter what order they come in.

131
00:08:44.840 --> 00:08:48.376
You can drop packets and you can probably
reconstruct stuff from other packets,

132
00:08:48.376 --> 00:08:50.774
right, it's much more meant
to be fault-tolerant.

133
00:08:50.774 --> 00:08:55.911
And so you lose this problem
with dropping packets.

134
00:08:55.911 --> 00:09:00.420
That's the biggest change from 2 to
3 is this ability to be much more

135
00:09:00.420 --> 00:09:01.760
fault-tolerant.

136
00:09:01.760 --> 00:09:05.079
So if you're in rural Montana and
you're on a cell phone,

137
00:09:05.079 --> 00:09:08.942
this is gonna be a revolution for
your speeds because you don't have

138
00:09:08.942 --> 00:09:12.702
this head-of-line blocking problem for
you anymore, right?

139
00:09:12.702 --> 00:09:17.393
If you're on gigabits, probably not gonna
make a terrible difference to you, but

140
00:09:17.393 --> 00:09:20.275
for people that have harder
networking problems,

141
00:09:20.275 --> 00:09:22.298
it's gonna make a big difference.

142
00:09:22.298 --> 00:09:23.439
Yeah, question.

143
00:09:23.439 --> 00:09:29.047
&gt;&gt; So this is based on an assumption that
I had, my assumption was TCP/IP was for

144
00:09:29.047 --> 00:09:32.857
areas where accuracy is
more important over speed.

145
00:09:32.857 --> 00:09:37.825
And UDP was used for
video chat applications, perhaps,

146
00:09:37.825 --> 00:09:41.564
so how does that kind of fit with HTTP/3?

147
00:09:41.564 --> 00:09:43.593
Is HTTP/3 meant for things like those?

148
00:09:43.593 --> 00:09:48.797
&gt;&gt; So the question is, is HTTP/2,
or sorry, just TCP/IP in general,

149
00:09:48.797 --> 00:09:53.568
has generally, the mantra of is
that you use that when accuracy,

150
00:09:53.568 --> 00:09:56.983
everything has to be
constructed correctly.

151
00:09:56.983 --> 00:10:04.113
Whereas UDP sacrifices some of that
accuracy for speed and fault tolerance.

152
00:10:04.113 --> 00:10:09.847
You're basically scratching the end
of my knowledge of networking.

153
00:10:09.847 --> 00:10:13.832
My understanding of QUIC
which is based upon UDP, so

154
00:10:13.832 --> 00:10:17.728
it's on top of UDP,
is that they've accounted for

155
00:10:17.728 --> 00:10:22.270
that because accuracy is still
just as important, right?

156
00:10:22.270 --> 00:10:26.431
That whatever they built into 3 which
I'm not terribly familiar with,

157
00:10:26.431 --> 00:10:28.140
QUIC is just now rolling out.

158
00:10:28.140 --> 00:10:30.925
I don't think that every
browser supports it yet,

159
00:10:30.925 --> 00:10:33.008
I think Chrome does support it today.

160
00:10:33.008 --> 00:10:38.160
I know CloudFlare for example, one of
their things is they do support QUIC.

161
00:10:38.160 --> 00:10:40.625
But they basically took
the best of both of them and

162
00:10:40.625 --> 00:10:44.600
married them together to make
it fault-tolerant and accurate.

163
00:10:44.600 --> 00:10:46.600
That's as good as you're gonna get
out of me because that's all I know.

