WEBVTT

1
00:00:00.069 --> 00:00:02.718
So let's head back over to server.js.

2
00:00:07.083 --> 00:00:13.950
Let's talk about socket.on data we're
gonna say server.js socket.on data.

3
00:00:13.950 --> 00:00:17.473
We're gonna say const,

4
00:00:17.473 --> 00:00:22.007
message equals parse message.

5
00:00:22.007 --> 00:00:28.636
And we're gonna pass it that buffer
that we got from the client, right?

6
00:00:28.636 --> 00:00:30.355
This thing right there, right.

7
00:00:30.355 --> 00:00:32.510
That's getting passed here into that.

8
00:00:32.510 --> 00:00:34.651
And this is gonna end up
being the message, right.

9
00:00:34.651 --> 00:00:37.931
The thing that we actually
got back from the client.

10
00:00:37.931 --> 00:00:42.447
And then we're just gonna say if message
because maybe like they sent like an empty

11
00:00:42.447 --> 00:00:44.154
frame or something like that.

12
00:00:44.154 --> 00:00:45.767
That'll definitely happen.

13
00:00:45.767 --> 00:00:49.462
You're going to say if message
sending us a Message.Push.

14
00:00:54.601 --> 00:00:59.963
Message.user,

15
00:00:59.963 --> 00:01:07.472
message.text rather.

16
00:01:07.472 --> 00:01:13.514
And then a time which is date.now.

17
00:01:18.300 --> 00:01:19.733
All right.

18
00:01:19.733 --> 00:01:23.981
So now, our socket is now accepting data.

19
00:01:23.981 --> 00:01:27.317
It's storing it all that good
stuff is definitely happening.

20
00:01:27.317 --> 00:01:29.799
So just to kind of prove my point here.

21
00:01:29.799 --> 00:01:32.097
We're gonna go back over here to our chat.

22
00:01:32.097 --> 00:01:37.760
And we're gonna say hi from the socket.

23
00:01:37.760 --> 00:01:38.824
Now I'm gonna submit.

24
00:01:38.824 --> 00:01:41.887
Nothing's gonna inform because we haven't
actually pushed this back out to our

25
00:01:41.887 --> 00:01:42.435
clients yet.

26
00:01:42.435 --> 00:01:45.040
But if I refresh the page,
we'll see it right.

27
00:01:45.040 --> 00:01:49.869
Because on that first page,
loaded loads, all the messages, right?

28
00:01:49.869 --> 00:01:52.328
So, if I do that and
refresh the page again.

29
00:01:52.328 --> 00:01:55.289
You'll see here again that we're getting
the new messages every time that

30
00:01:55.289 --> 00:01:56.144
we refresh the page.

31
00:01:56.144 --> 00:01:59.394
Because we're doing this
socket.write right here, right.?

32
00:02:01.154 --> 00:02:02.537
So, we're getting closer.

33
00:02:02.537 --> 00:02:07.186
But now we actually want to inform
all of our various different users.

34
00:02:07.186 --> 00:02:10.639
Whenever a new socket,
like new message comes in,

35
00:02:10.639 --> 00:02:14.026
that it broadcasts out back
to all of our clients.

36
00:02:14.026 --> 00:02:17.364
So we're gonna do the exact same thing
that we just did with the HTTP two

37
00:02:17.364 --> 00:02:17.882
clients.

38
00:02:17.882 --> 00:02:21.114
And we're gonna keep track
of all the connections.

39
00:02:21.114 --> 00:02:24.644
So we have our connections array up here,
right?

40
00:02:24.644 --> 00:02:28.589
And then inside of

41
00:02:28.589 --> 00:02:35.378
the Here

42
00:02:35.378 --> 00:02:43.963
we're just gonna say connections.push,

43
00:02:43.963 --> 00:02:47.446
socket, right.

44
00:02:47.446 --> 00:02:54.238
Under the socket.on data,
we definitely want to say socket.on end.

45
00:02:54.238 --> 00:02:59.070
Like whenever the socket ends, we just
wanna remove it from our active sockets.

46
00:02:59.070 --> 00:03:04.005
So we're gonna say same thing here

47
00:03:04.005 --> 00:03:10.134
connections equals connections.filter

48
00:03:10.134 --> 00:03:14.566
socket S is not equal to R socket

49
00:03:17.478 --> 00:03:22.109
Right, so we're just gonna filter
out the existing socket that

50
00:03:22.109 --> 00:03:27.092
we had using the exact same kind of
logic and from our previous example

51
00:03:29.992 --> 00:03:33.429
Okay and then inside of here on
the on data what we wanna do,

52
00:03:33.429 --> 00:03:35.545
inside of this if message, right.

53
00:03:35.545 --> 00:03:40.484
What we're gonna do is every
time that a user pushes a new

54
00:03:40.484 --> 00:03:45.540
message in here we're gonna
say connection.For each.

55
00:03:45.540 --> 00:03:46.948
And again, you can do a For loop here.

56
00:03:46.948 --> 00:03:48.879
That would totally work as well.

57
00:03:48.879 --> 00:03:50.718
Or like a For of loop.

58
00:03:50.718 --> 00:03:54.013
Yeah, For
off loop would work right here to.

59
00:03:54.013 --> 00:03:58.881
For each and we're just gonna say

60
00:04:02.449 --> 00:04:06.067
Connections, sorry, not that.

61
00:04:06.067 --> 00:04:10.508
We're gonna say for each socket on here.

62
00:04:10.508 --> 00:04:15.753
We're just gonna say
socket.write object to response.

63
00:04:21.102 --> 00:04:26.257
And we're just gonna write out
the message with get messages.

64
00:04:28.878 --> 00:04:33.291
Right, so
now every time that we got a new message

65
00:04:33.291 --> 00:04:38.255
in here it's gonna go through
all of our connections.

66
00:04:38.255 --> 00:04:41.819
And it's gonna write to all of those open
sockets, all of the new messages that

67
00:04:41.819 --> 00:04:46.791
are coming in And

68
00:04:46.791 --> 00:04:51.508
the one thing that is like what
happens if messages No, right?

69
00:04:51.508 --> 00:04:57.701
So if we get back no from parse message or
something that we don't recognize.

70
00:04:57.701 --> 00:05:03.371
If you remember here in our parse message.

71
00:05:03.371 --> 00:05:06.827
If we return one, if we get an opcode,
eight, we just return No.

72
00:05:06.827 --> 00:05:08.255
That means connections closed.

73
00:05:08.255 --> 00:05:10.708
Everything's done now, right?

74
00:05:10.708 --> 00:05:13.747
So what we're gonna do,
is we're gonna come back over here.

75
00:05:13.747 --> 00:05:18.789
Say if there's no message,

76
00:05:18.789 --> 00:05:25.306
so else if message triple equals No.

77
00:05:25.306 --> 00:05:27.581
Then we're gonna say socket.end, right?

78
00:05:27.581 --> 00:05:30.676
Because we got an opcode eight.

79
00:05:30.676 --> 00:05:31.487
I mean it's cool.

80
00:05:31.487 --> 00:05:33.299
It's time to shut it down.

81
00:05:33.299 --> 00:05:34.610
And that's what this will do here.

82
00:05:34.610 --> 00:05:38.936
And what's cool is it actively
calls socket.end here.

83
00:05:38.936 --> 00:05:43.220
Then this will get fired and automatically
it'll get cleaned up as well.

84
00:05:43.220 --> 00:05:47.398
Okay, last thing to do here just
super quick over in raw chat.js.

85
00:05:47.398 --> 00:05:51.857
We're gonna add one more listener for

86
00:05:51.857 --> 00:05:56.882
a closed WS, add event listener, close.

87
00:05:56.882 --> 00:06:02.922
And we're gonna say
presence dot inner text and

88
00:06:02.922 --> 00:06:07.610
we're gonna make this a red circle.

89
00:06:09.954 --> 00:06:14.119
Whenever the socket closes, we wanna tell
people by the way the socket is closed.

90
00:06:17.963 --> 00:06:23.381
Okay, so
let's pop over to the chat with me here.

91
00:06:23.381 --> 00:06:27.559
Now if we send messages here.

92
00:06:27.559 --> 00:06:35.697
Hopefully they should start coming in from
all the various different sources right?

93
00:06:35.697 --> 00:06:39.804
So let's open a second window of this.

94
00:06:39.804 --> 00:06:42.772
And if I can see it already comes in here.

95
00:06:45.058 --> 00:06:46.845
Let me say that.

96
00:06:46.845 --> 00:06:50.775
Now if we go back over here,
you can see it's

97
00:06:50.775 --> 00:06:55.887
automatically pushing back and
forth from both of them.

98
00:06:55.887 --> 00:06:58.383
That is writing Web Sockets by hand.

99
00:06:58.383 --> 00:07:02.490
Which again, not gonna suggest
that you ever do this again.

100
00:07:02.490 --> 00:07:03.659
Probably shouldn't have done it this time.

101
00:07:03.659 --> 00:07:04.715
I'm being honest.

102
00:07:04.715 --> 00:07:10.584
But I think it's super interesting to know
how it works into like you'll be a more

103
00:07:10.584 --> 00:07:16.385
aware of how you can like squeeze more
performance out of sockets if you need to.

104
00:07:16.385 --> 00:07:22.942
If you need to drop into lower layers for
any reason whatsoever.

105
00:07:22.942 --> 00:07:24.761
Knowledge is all there for you.

106
00:07:27.046 --> 00:07:31.142
And I guess what I wanna say is
we're about to do socket.io.

107
00:07:31.142 --> 00:07:37.278
And you're about to just be absolutely
floored of how easy socket.io is.

108
00:07:37.278 --> 00:07:42.631
We take something really difficult we
made a really nice abstraction for it.

109
00:07:42.631 --> 00:07:43.429
Yeah.

110
00:07:43.429 --> 00:07:47.855
&gt;&gt; Where are we pushing the different
connection sockets to the connections

111
00:07:47.855 --> 00:07:48.362
array?

112
00:07:48.362 --> 00:07:51.901
&gt;&gt; It is here, line 46.

113
00:07:51.901 --> 00:07:59.777
So we write the headers, we write
the first response to the connected user.

114
00:07:59.777 --> 00:08:02.218
And then we push them
to active connections.

115
00:08:05.562 --> 00:08:08.125
And then down here we removed
them whenever they're done.

116
00:08:12.176 --> 00:08:13.060
Yeah, question.

117
00:08:13.060 --> 00:08:17.625
&gt;&gt; I was just curious because
touch the WS package before.

118
00:08:17.625 --> 00:08:19.513
I was wondering if you
could share your thoughts.

119
00:08:19.513 --> 00:08:22.690
I know socket that I was easier
apparently to implement.

120
00:08:22.690 --> 00:08:27.970
But I wanna know you pick,
like according to you, like WS?

121
00:08:27.970 --> 00:08:29.329
What are your opinions?

122
00:08:29.329 --> 00:08:31.331
&gt;&gt; Yeah, what do I think about WS?

123
00:08:31.331 --> 00:08:35.131
I actually talk about it
at the end of the course.

124
00:08:35.131 --> 00:08:40.940
So if I don't sufficiently answer your
question, then ask the question again.

125
00:08:40.940 --> 00:08:44.630
Finished version of the app to be
found here under a WebSocket/raw.

126
00:08:44.630 --> 00:08:47.468
I mean, everything that we
just did together is there.

127
00:08:47.468 --> 00:08:51.831
I mean we have a working WebSocket
connection that we totally wrote by hand.

128
00:08:51.831 --> 00:08:54.450
So you can definitely be
impressed by yourself right now.

