WEBVTT

1
00:00:00.350 --> 00:00:03.187
So let's get the initial get going.

2
00:00:04.775 --> 00:00:10.084
So in server.j s, so on a connection,

3
00:00:14.528 --> 00:00:18.938
We're gonna say right here, socket.emit,
which is how you like admit or

4
00:00:18.938 --> 00:00:21.300
you write out events to clients.

5
00:00:21.300 --> 00:00:25.730
We're gonna make an event and we're
just gonna call it a message called get.

6
00:00:25.730 --> 00:00:28.680
So this is arbitrarily named,
we can name it whatever we want.

7
00:00:29.910 --> 00:00:32.060
It's just like the name of an event.

8
00:00:32.060 --> 00:00:35.888
And then your clients can
subscribe this some events, right?

9
00:00:35.888 --> 00:00:39.830
Maybe there's a new user connect or
there's a, I don't know,

10
00:00:39.830 --> 00:00:42.455
whatever kind of events you can think of.

11
00:00:42.455 --> 00:00:45.391
You can subscribe to some of them,
you can not subscribe to some of them,

12
00:00:45.391 --> 00:00:46.317
all that kinda stuff.

13
00:00:50.207 --> 00:00:54.747
So we're gonna emit to that client
this message get event, and

14
00:00:54.747 --> 00:00:57.325
we're gonna say all chat, sorry.

15
00:00:59.070 --> 00:01:03.440
Not that rather,
I'm mixing up my thing here.

16
00:01:05.950 --> 00:01:09.602
Rather you're gonna admit
the payload with it,

17
00:01:09.602 --> 00:01:13.710
which is gonna be message,
get messages, like that.

18
00:01:15.570 --> 00:01:18.371
So now we're going to send
to the client your messages.

19
00:01:23.069 --> 00:01:24.717
Smaller again.

20
00:01:24.717 --> 00:01:27.793
And then we're gonna come
down here to socket.io chat.

21
00:01:27.793 --> 00:01:31.900
And we're just gonna say, just like
we say on connecting on disconnect,

22
00:01:31.900 --> 00:01:35.905
we're just gonna say socket.on,
whatever the name of our event was.

23
00:01:35.905 --> 00:01:39.699
Was which was messaged get run this code.

24
00:01:43.812 --> 00:01:47.454
So this is what I'm trying
to illustrate too now,

25
00:01:47.454 --> 00:01:51.717
is that socket.io is a messaging
busing system, right?

26
00:01:51.717 --> 00:01:57.280
Almost like, something like
simple queue service can be for

27
00:01:57.280 --> 00:02:01.980
Amazon AWS, just like Kafka and
things like that.

28
00:02:01.980 --> 00:02:06.175
So you can kind of do with these
kind of pub sub sort of things.

29
00:02:06.175 --> 00:02:09.431
Not totally the same,
there's wild differences there, but

30
00:02:09.431 --> 00:02:12.573
just the general concept there
of pub sub is available too.

31
00:02:12.573 --> 00:02:16.931
So we're gonna say
All Chat Equals data.message.

32
00:02:16.931 --> 00:02:19.140
And then we're gonna call render.

33
00:02:20.170 --> 00:02:23.840
So anytime you get new messages,
just render that business.

34
00:02:23.840 --> 00:02:33.198
Basically always you're saying there,
Okay, There you go.

35
00:02:35.842 --> 00:02:40.131
So now you can see the messages
are coming back from the server and

36
00:02:40.131 --> 00:02:42.608
is rendering just fine for the user.

37
00:02:46.926 --> 00:02:50.210
Okay, let's go right to the server now.

38
00:02:50.210 --> 00:02:57.606
So here in socket IO chat, we're gonna
write our post new message here.

39
00:02:57.606 --> 00:03:03.475
So we're gonna say same const
data equals user Text and

40
00:03:03.475 --> 00:03:07.950
we're just going to say socket dot emit.

41
00:03:07.950 --> 00:03:16.560
Message post, Data.

42
00:03:16.560 --> 00:03:19.723
So now we're just sending that
same data back to the server using

43
00:03:19.723 --> 00:03:21.490
the same sort of methodology here.

44
00:03:22.510 --> 00:03:27.950
We just gotta wait for that on the server.

45
00:03:27.950 --> 00:03:35.210
So here socket.on message post.

46
00:03:35.210 --> 00:03:39.795
Grab the data run this function,

47
00:03:39.795 --> 00:03:44.719
and we're gonna say message push.

48
00:03:48.640 --> 00:03:51.554
User, data.user.

49
00:03:53.486 --> 00:03:58.643
Text, data.text, and time, date.now.

50
00:04:06.843 --> 00:04:11.145
So this is the part that hopefully
will kind of blow you away of just how

51
00:04:11.145 --> 00:04:13.160
easy this part is.

52
00:04:13.160 --> 00:04:18.509
Now we want to rebroadcast this out to all
users connected to our socket.io instance,

53
00:04:18.509 --> 00:04:19.040
right?

54
00:04:19.040 --> 00:04:21.972
You're just going to say IO
instead of socket, right?

55
00:04:21.972 --> 00:04:25.365
Which is just the individual
socket that you're working on,

56
00:04:25.365 --> 00:04:27.722
right, iO represents the entire server.

57
00:04:27.722 --> 00:04:31.403
So we can just say IO.emit.

58
00:04:32.535 --> 00:04:37.592
Message get, Message colon, and

59
00:04:37.592 --> 00:04:44.220
get messages And that's it.

60
00:04:44.220 --> 00:04:47.900
To now to broadcast and
the entire server, it's just send it out,

61
00:04:47.900 --> 00:04:49.160
send it to everybody.

62
00:04:50.780 --> 00:04:52.333
I think that's pretty compelling.

63
00:04:59.696 --> 00:05:02.654
All right, so now we have Brian here,
and we can say,

64
00:05:11.707 --> 00:05:15.129
And Open another instance here.

65
00:05:24.878 --> 00:05:27.057
Right and
it's just happening on both sides here.

66
00:05:31.950 --> 00:05:33.477
This is the killer.

67
00:05:33.477 --> 00:05:36.389
If you look at line 38 here,
it's like, that's the part,

68
00:05:36.389 --> 00:05:38.580
that's the killer part of socket.io for
me.

69
00:05:38.580 --> 00:05:41.873
Then you want to use socket.io because
those kind of features are built into

70
00:05:41.873 --> 00:05:42.520
socket.io.

71
00:05:42.520 --> 00:05:46.500
And you might be thinking like, well,
that's gonna send it to everybody, right?

72
00:05:46.500 --> 00:05:48.970
What if I just want to send
it to some users, right?

73
00:05:48.970 --> 00:05:51.040
That's what the concept of rooms are for,
right?

74
00:05:51.040 --> 00:05:54.930
We can actually put groups of
users into like a room of users.

75
00:05:54.930 --> 00:05:58.026
And then you can just broadcast on
the room instead of on the entire

76
00:05:58.026 --> 00:05:58.880
server, right?

77
00:05:58.880 --> 00:06:03.530
Which is basically like a pool of users
that you can send things out to, and

78
00:06:03.530 --> 00:06:05.930
that's what these messages are for.

79
00:06:05.930 --> 00:06:08.500
You might wonder,
why did use a colon there?

80
00:06:08.500 --> 00:06:10.920
It's like namespacing kind of for
messages.

81
00:06:10.920 --> 00:06:11.570
It's really common.

82
00:06:11.570 --> 00:06:15.302
You'll see it like in Redis and
socket.io in other places like that.

83
00:06:15.302 --> 00:06:19.770
Where it's the message namespace, you can
see I've messaged post, a message get,

84
00:06:19.770 --> 00:06:23.260
I could have user update, and
user change, and things like that.

85
00:06:23.260 --> 00:06:27.183
And you could actually have different
namespaces of commands, right?

86
00:06:27.183 --> 00:06:30.760
And all sorts of fun functionality
that comes along with that.

87
00:06:30.760 --> 00:06:35.724
But hopefully, you've watched the entire
course of this portlet, where we've kind

88
00:06:35.724 --> 00:06:39.818
of built up this idea of, I want to
send a message from a user to a server.

89
00:06:39.818 --> 00:06:42.390
And then broadcast out
to a group of users.

90
00:06:42.390 --> 00:06:47.651
He was kind of building up to basically
this one line of, look how easy this is,

91
00:06:47.651 --> 00:06:52.220
how easy it can be and how impressive
some of the software really is.

92
00:06:55.360 --> 00:06:59.809
And this is really it, like I said, there
are more features to socket.io.io and

93
00:06:59.809 --> 00:07:02.530
WebSockets, but
this is the groundwork for all.

94
00:07:02.530 --> 00:07:07.151
It's all kind of just permutations of this
right of allowing users to listen to some

95
00:07:07.151 --> 00:07:09.340
events and not to others, basically.

96
00:07:12.400 --> 00:07:16.645
And the good news is, that's it that
like this is really it for socket.io.

97
00:07:16.645 --> 00:07:19.305
There's not any more
code to be written here.

98
00:07:20.665 --> 00:07:25.603
What took us lines, and lines, and
lines of code to write for WebSockets and

99
00:07:25.603 --> 00:07:29.864
HTTP to push and all that kind of stuff,
is accomplished on what?

100
00:07:29.864 --> 00:07:34.641
24 to 40, pretty cool stuff.

101
00:07:39.168 --> 00:07:47.247
So, this is it for
the the coding of the of the course.

102
00:07:47.247 --> 00:07:51.303
Just to kind of give you some general high
level ideas of if you wanted to like dig

103
00:07:51.303 --> 00:07:55.430
more into this and kind of figure
out some more stuff for this.

104
00:07:55.430 --> 00:07:59.586
You could convert this page here
to a react app or to a svelte or

105
00:07:59.586 --> 00:08:02.534
Angular Ember app or something like that.

106
00:08:02.534 --> 00:08:07.353
Or view and see how your favorite
framework can interact with WebSockets

107
00:08:07.353 --> 00:08:12.530
because they all kind of have
their own ways of doing it, right?

108
00:08:12.530 --> 00:08:16.170
With react yet be careful to not not
dispose of the connections, right?

109
00:08:16.170 --> 00:08:17.640
That's a really easy thing to do.

110
00:08:18.740 --> 00:08:22.211
With Vue, there's like reactivity there's
you can actually build that into like

111
00:08:22.211 --> 00:08:25.870
the reactive parts of the framework,
which is kind of fun thing to do.

112
00:08:25.870 --> 00:08:29.326
You can plug sockets into RX js and
you can get like reactive sockets,

113
00:08:29.326 --> 00:08:30.824
which is pretty compelling.

114
00:08:32.295 --> 00:08:34.395
All sorts of fun stuff there.

115
00:08:34.395 --> 00:08:37.135
You can get into like private
messaging between users.

116
00:08:37.135 --> 00:08:41.215
So you could have two users and you could
have the ability to send private messages

117
00:08:41.215 --> 00:08:44.635
to each other and
how you would try and secure that.

118
00:08:44.635 --> 00:08:46.785
You can do authentication and
authorization.

119
00:08:46.785 --> 00:08:48.985
There's nothing special here for
auth for WebSockets.

120
00:08:48.985 --> 00:08:53.100
It just works the same way as HTTP two or
HTTP in general.

121
00:08:53.100 --> 00:08:55.840
What's just gonna be like a cookie or
a session or something like that.

122
00:08:57.010 --> 00:08:59.620
You can add rooms, we talked about that.

123
00:08:59.620 --> 00:09:00.974
You can have a super user or

124
00:09:00.974 --> 00:09:04.250
an admin that can see all
the various different room activity.

125
00:09:05.650 --> 00:09:10.441
And then another good one would be to
connect this to Reds or two MongoDB, or

126
00:09:10.441 --> 00:09:16.390
something like that, and actually
perpetuate this beyond into a database.

127
00:09:16.390 --> 00:09:18.290
Those are all be really good projects for
this.

128
00:09:22.955 --> 00:09:28.710
The complete project here is down
here at web socket slash socket IO.

129
00:09:28.710 --> 00:09:29.770
That's all here.

130
00:09:31.200 --> 00:09:34.540
&gt;&gt; You mentioned at some point
about a cue type of service.

131
00:09:35.940 --> 00:09:39.970
That socket IO is kind of
implementing under the hood.

132
00:09:39.970 --> 00:09:45.728
Does it have anything built in for
prevention of data loss?

133
00:09:45.728 --> 00:09:46.760
&gt;&gt; Good question.

134
00:09:46.760 --> 00:09:51.730
It does not have any sort
of data loss functionality

135
00:09:51.730 --> 00:09:55.438
built into it as far as I know, right?

136
00:09:55.438 --> 00:09:56.444
With something like SQL,

137
00:09:56.444 --> 00:09:59.820
it'll hold on to events until someone
slips Ascribes to listen to them.

138
00:09:59.820 --> 00:10:02.391
That's not necessarily
built into socket.io, but

139
00:10:02.391 --> 00:10:04.227
I would imagine someone has built it.

140
00:10:04.227 --> 00:10:06.140
There's probably like
libraries on top of it.

141
00:10:07.440 --> 00:10:11.665
But I mean, at the end of the day,
you could just put it into like your own

142
00:10:11.665 --> 00:10:14.847
Reddis queue basically, and
wait for a user to read.

143
00:10:14.847 --> 00:10:19.050
And then you can just drain it
whenever the user connects to it.

144
00:10:19.050 --> 00:10:19.890
That'd be a good way of doing it.

