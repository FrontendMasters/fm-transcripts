WEBVTT

1
00:00:00.200 --> 00:00:05.000
So we just wrapped up HTTP two push.

2
00:00:05.000 --> 00:00:08.970
The finished version can
be found in your project.

3
00:00:10.740 --> 00:00:16.765
Your exercises, it's this one
here called push under HTTP/2.

4
00:00:16.765 --> 00:00:19.116
So that's all the code that you and
I just wrote together.

5
00:00:20.936 --> 00:00:28.720
And that is it for HTTP/2 We're
gonna move on now to WebSockets.

6
00:00:28.720 --> 00:00:33.290
And we have two exercises in here one
we're gonna be doing raw Websockets.

7
00:00:33.290 --> 00:00:37.810
And then after we're done with that,
we'll do socket IO after that.

8
00:00:37.810 --> 00:00:41.455
So the next part, make sure you're
in this exercise dash raw folder and

9
00:00:41.455 --> 00:00:44.933
run npm install on there, and
that's where we're going to start.

10
00:00:50.701 --> 00:00:54.670
Okay, so
now that in your real time exercises,

11
00:00:54.670 --> 00:00:59.090
exercise rod directory under Websockets.

12
00:00:59.090 --> 00:01:04.010
Let's talked about the truest real
time that we've talked about so far.

13
00:01:05.580 --> 00:01:10.454
Pulling is obviously very close to
real-time because you're just making

14
00:01:10.454 --> 00:01:12.077
a lot of requests about,

15
00:01:12.077 --> 00:01:17.120
to the same polling endpoint HTTP/2
is real time in one direction, right?

16
00:01:17.120 --> 00:01:19.341
That we're pushing from
the server to the client, but

17
00:01:19.341 --> 00:01:21.180
it's not in the reverse direction, right?

18
00:01:21.180 --> 00:01:24.766
That's still like a normal post request,

19
00:01:24.766 --> 00:01:28.770
let's get into like the best tool for
the job.

20
00:01:28.770 --> 00:01:33.728
I've shown you the other ones because not
every server is gonna be able to handle

21
00:01:33.728 --> 00:01:37.880
either HTTP/2 because some of
them just don't work with it yet.

22
00:01:40.200 --> 00:01:44.461
And then pulling like even if you have
like an old system can still work, right?

23
00:01:44.461 --> 00:01:46.460
You just have to make an endpoint
that can handle a lot of requests.

24
00:01:46.460 --> 00:01:50.105
There's no special needs there,
we're gonna get into websockets,

25
00:01:50.105 --> 00:01:54.680
which is a particular technology and
not every server can handle it right?

26
00:01:54.680 --> 00:01:58.290
Like we wanted to do it originally
at reddit with websockets.

27
00:01:58.290 --> 00:02:00.527
It being the real time chat
that we were doing, and

28
00:02:00.527 --> 00:02:03.480
we ended up not because our server
wouldn't be able to handle it.

29
00:02:03.480 --> 00:02:06.866
And eventually we actually had to spin
up a second server that just handled

30
00:02:06.866 --> 00:02:07.620
websockets.

31
00:02:07.620 --> 00:02:10.733
So that's why I'm showing you all of
these so you can kind of pick and

32
00:02:10.733 --> 00:02:13.290
choose the best tool for the job here.

33
00:02:13.290 --> 00:02:15.740
But honestly,
this is kind of the holy grail here.

34
00:02:15.740 --> 00:02:19.060
The websocket is gonna be the best
cuz it does real time communication.

35
00:02:19.060 --> 00:02:21.710
In both directions, right from client
to server and from server to client.

36
00:02:23.630 --> 00:02:28.056
So a websocket is just a primitive It's
just like another thing that you can

37
00:02:28.056 --> 00:02:32.450
create in a browser that connects
to a special kind of connection.

38
00:02:32.450 --> 00:02:37.080
And honestly, at the end of the day, it
still connects over TCP IP at least to get

39
00:02:37.080 --> 00:02:40.620
all that first handshake
stuff all worked out.

40
00:02:40.620 --> 00:02:43.830
So, a lot of this is still
gonna feel really familiar.

41
00:02:43.830 --> 00:02:49.123
And what we're gonna do
in this first part was

42
00:02:49.123 --> 00:02:57.430
we're actually going to go pull
it up here in my intro real time.

43
00:02:57.430 --> 00:03:02.151
We're down here in what intro websockets
If you ever took my containers

44
00:03:02.151 --> 00:03:07.027
course on front of masters, we actually
go and craft containers by hand,

45
00:03:07.027 --> 00:03:09.170
which one would never do right?

46
00:03:09.170 --> 00:03:11.570
You would always let docker do that for
you.

47
00:03:11.570 --> 00:03:14.020
We're gonna do the exact same kind
of approach here to websockets.

48
00:03:14.020 --> 00:03:18.170
We're gonna go craft websockets by hand,
which is objectively terrible idea.

49
00:03:18.170 --> 00:03:19.472
You should absolutely never do this and

50
00:03:19.472 --> 00:03:21.021
we're going to do it
because it's super fun.

51
00:03:23.450 --> 00:03:25.964
But there's so many libraries
that do this so much better and

52
00:03:25.964 --> 00:03:29.219
there's honestly there's so many edge
cases to websockets that you really do

53
00:03:29.219 --> 00:03:30.830
want someone to handle it for you.

54
00:03:30.830 --> 00:03:34.347
But it's gonna be fun to go
put it together ourselves, so

55
00:03:34.347 --> 00:03:37.660
when happened the websockets
back end portion here.

56
00:03:38.780 --> 00:03:43.276
We're gonna hop over to our code and
get a little familiar with it.

57
00:03:43.276 --> 00:03:46.026
So you can close all of your HTTP/2 stuff.

58
00:03:46.026 --> 00:03:49.072
Say don't save.

59
00:03:51.332 --> 00:03:53.190
Exercise raw here.

60
00:03:55.683 --> 00:04:02.241
And we are gonna get into back end No,

61
00:04:02.241 --> 00:04:04.266
actually we're not,
we're gonna get into the front end first.

62
00:04:08.484 --> 00:04:10.849
So we have a file here called raw chat.

63
00:04:12.884 --> 00:04:17.330
This should all look fairly familiar up
here too, it's kind of all the same stuff.

64
00:04:17.330 --> 00:04:20.877
I tried to keep it as similar as possible,
the same form submit.

65
00:04:20.877 --> 00:04:23.460
We're gonna write a post
new message function.

66
00:04:23.460 --> 00:04:28.050
We're going to write a,kind of a get
new message function over here.

67
00:04:28.050 --> 00:04:30.620
And then we have our render and
we have our template.

68
00:04:30.620 --> 00:04:32.946
That's all here.So luckily,

69
00:04:32.946 --> 00:04:37.730
the browser actually implements
most of the websocket stuff.

70
00:04:37.730 --> 00:04:42.042
For you on the client side as in
like there's a native object called

71
00:04:42.042 --> 00:04:45.818
a websocket object and
that just does everything for you.

72
00:04:45.818 --> 00:04:48.305
So we really don't have to do
very much on the client and

73
00:04:48.305 --> 00:04:52.165
thank God because it's you're gonna see on
the back end there's a lot to deal with.

74
00:04:53.555 --> 00:04:56.095
So here you can delete this
your code goes here part.

75
00:04:57.465 --> 00:05:03.000
We're say const WS equals
new websocket again,

76
00:05:03.000 --> 00:05:07.187
this is just built into the browser.

77
00:05:07.187 --> 00:05:10.047
It's not a library or anything like
that your browser just has it.

78
00:05:11.447 --> 00:05:15.408
And you're gonna put WS which stands for

79
00:05:15.408 --> 00:05:19.487
websocket protocol as in it's not HTTP,

80
00:05:19.487 --> 00:05:23.463
slash slash localhost colon 8080.

81
00:05:23.463 --> 00:05:27.140
And then here you got to tell what
protocol is you're gonna deal on.

82
00:05:27.140 --> 00:05:32.800
We're just gonna deal on JSON,
there's nothing like magical about this.

83
00:05:32.800 --> 00:05:36.740
It's not like JSON is a thing that
the websocket object recognizes.

84
00:05:36.740 --> 00:05:40.114
It's just gonna pass this up to
the server, the server is gonna say, okay,

85
00:05:40.114 --> 00:05:43.240
you want to speak JSON cool
I know how to speak JSON.

86
00:05:43.240 --> 00:05:47.341
But like, for example, let's say you had
an endpoint that could handle either JSON

87
00:05:47.341 --> 00:05:49.600
or XML, you could do this right?

88
00:05:49.600 --> 00:05:52.832
And then the server would choose like
okay, I know how to speak XML but

89
00:05:52.832 --> 00:05:54.740
I don't know how to speak JSON, right?

90
00:05:54.740 --> 00:05:57.710
And so it'll pick the one and
then send that back to you.

91
00:05:57.710 --> 00:06:00.920
Here you're just identifying, here's
everything that I know how to speak, and

92
00:06:00.920 --> 00:06:02.140
then the server will pick one.

93
00:06:03.630 --> 00:06:09.670
In our case, we're just going to do JSON,
but that's what that's for, okay?

94
00:06:09.670 --> 00:06:14.755
So I got a websocket, this will open it,
this is a rather this will

95
00:06:14.755 --> 00:06:20.406
create the object and then here you
have to say ws dot add event listener.

96
00:06:20.406 --> 00:06:26.305
Open so on open events,
run this function and

97
00:06:26.305 --> 00:06:32.517
we're just gonna say
console log connected and

98
00:06:32.517 --> 00:06:39.361
presence that in your text
equals our green circle.

99
00:06:44.934 --> 00:06:50.020
Okay, so I mean this is enough for
us to get up and going.

100
00:06:50.020 --> 00:06:55.450
You can see here from the client
perspective, pretty minimal, right?

101
00:06:55.450 --> 00:06:58.720
This websocket objects really good,
It's really new so it's nice to still.

102
00:07:01.440 --> 00:07:04.290
Now you could try and
run this in the server, it wouldn't work.

103
00:07:04.290 --> 00:07:08.377
Because we don't have anything on our back
end that's willing to handle that yet, so

104
00:07:08.377 --> 00:07:09.640
we got to go do that first.

105
00:07:11.700 --> 00:07:15.580
So the thing to know about
how websockets work,

106
00:07:15.580 --> 00:07:20.350
what this is gonna do is it's
going to connect via TCP IP.

107
00:07:20.350 --> 00:07:24.310
So via HTTP, it's going to make
a connection to your server.

108
00:07:24.310 --> 00:07:27.768
To some endpoint, and
then it's gonna say, hey, endpoint,

109
00:07:27.768 --> 00:07:30.430
I wanna upgrade this connection, right?

110
00:07:30.430 --> 00:07:33.980
And then it's up to your server to say,
okay, what is upgrading mean?

111
00:07:33.980 --> 00:07:37.270
In our case,
it's connect as a normal request.

112
00:07:37.270 --> 00:07:40.040
It's gonna send an upgrade request, and
then the server is gonna say, cool.

113
00:07:40.040 --> 00:07:43.290
I know how to speak websocket, and
then it's gonna connect there, right?

114
00:07:43.290 --> 00:07:46.560
So that's kind of the handshake
process that goes on there.

115
00:07:46.560 --> 00:07:49.270
We don't have to do any
of that on the client.

116
00:07:49.270 --> 00:07:53.700
This new websocket object here just
handles that entire negotiation of trying

117
00:07:53.700 --> 00:07:56.800
to get into a websocket
connection by itself.

118
00:07:56.800 --> 00:08:00.740
However, node by itself does not do that,
you gotta do that yourself.

119
00:08:01.910 --> 00:08:04.760
Or rather, most of the time
the library does it for you, but

120
00:08:04.760 --> 00:08:06.250
we're gonna do it ourselves.

