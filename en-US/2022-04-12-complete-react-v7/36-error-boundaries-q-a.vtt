WEBVTT

1
00:00:00.000 --> 00:00:04.642
We're using componentDidUpdate here for
the first time that you've seen it.

2
00:00:04.642 --> 00:00:12.920
But you'll use this all the time, this is
not specific to, Error boundaries, right?

3
00:00:12.920 --> 00:00:15.440
This can be used in any class component.

4
00:00:15.440 --> 00:00:21.069
You can kinda think of this like
a useEffect that's dependent on something,

5
00:00:21.069 --> 00:00:21.683
right?

6
00:00:21.683 --> 00:00:28.009
So we used one in useReadList, right?

7
00:00:28.009 --> 00:00:30.949
This is basically like,
this useEffect here is basically

8
00:00:30.949 --> 00:00:34.020
componentDidUpdate that only
responds to animal, right?

9
00:00:36.470 --> 00:00:38.850
So anytime that animal changes,
this effect gets run.

10
00:00:41.200 --> 00:00:45.530
It's pretty similar, not totally
the same here with componentDidUpdate.

11
00:00:45.530 --> 00:00:49.180
This is just basically a useEffect
that responds to any state change.

12
00:00:49.180 --> 00:00:51.971
And then you just have to check to make
sure that you're responding to the correct

13
00:00:51.971 --> 00:00:52.517
state change.

14
00:00:54.787 --> 00:00:59.512
The big difference here is
componentDidUpdate doesn't run at start,

15
00:00:59.512 --> 00:01:00.640
right?

16
00:01:00.640 --> 00:01:01.509
Whereas useEffect,

17
00:01:01.509 --> 00:01:04.410
no matter what you're responding to
will always run at the beginning.

18
00:01:05.500 --> 00:01:06.940
That's the hair to split there.

19
00:01:09.160 --> 00:01:10.250
Yeah.

20
00:01:10.250 --> 00:01:12.160
&gt;&gt; It's time to clarify
how it's all working.

21
00:01:12.160 --> 00:01:16.265
So the error occurs which
causes the component to update,

22
00:01:16.265 --> 00:01:20.450
then we get to that conditional
which would be true.

23
00:01:20.450 --> 00:01:26.930
The timer starts off, then we hit the
setState, which gives us redirect true.

24
00:01:26.930 --> 00:01:31.590
And then does the state updating cause
the render function to be called again?

25
00:01:31.590 --> 00:01:32.523
&gt;&gt; It does.
&gt;&gt; And that's why-

26
00:01:32.523 --> 00:01:33.052
&gt;&gt; Correct,

27
00:01:33.052 --> 00:01:37.520
every time that you call setState, you can
guarantee that a rerender's gonna happen.

28
00:01:37.520 --> 00:01:38.020
&gt;&gt; Okay.

29
00:01:40.932 --> 00:01:44.548
&gt;&gt; You mentioned just a second ago,
we can think of componentDidUpdate as

30
00:01:44.548 --> 00:01:47.340
a useEffect that responds
to any state change.

31
00:01:47.340 --> 00:01:50.560
Is that specifically any state change for
this component then?

32
00:01:50.560 --> 00:01:51.063
&gt;&gt; Yes.

33
00:01:51.063 --> 00:01:52.319
&gt;&gt; Okay.

34
00:01:52.319 --> 00:01:56.662
&gt;&gt; It only cares about its own state,
it cares about no parent nor

35
00:01:56.662 --> 00:01:59.092
child state, just its own state.

36
00:02:02.346 --> 00:02:07.213
Yeah, just for funsies, let's just
walk through the entire lifecycle

37
00:02:07.213 --> 00:02:09.939
of what happens in this damn component.

38
00:02:09.939 --> 00:02:12.980
All right, so we're in details.

39
00:02:12.980 --> 00:02:15.840
We hit our hilarious error here, right?

40
00:02:17.030 --> 00:02:19.290
This is going to throw an error
which is going to crash.

41
00:02:19.290 --> 00:02:22.660
You can see my linter is very upset
that this is unreachable code.

42
00:02:24.660 --> 00:02:27.870
It's going to hit WrappedDetails which
is gonna hit this ErrorBoundary.

43
00:02:27.870 --> 00:02:33.370
This ErrorBoundary component does have
a component, or not a componentDidCatch.

44
00:02:33.370 --> 00:02:38.050
We actually could just leave this out
totally, all this is doing is reporting.

45
00:02:38.050 --> 00:02:42.390
So it's actually gonna call this
function here, getDerivedStateFromError.

46
00:02:42.390 --> 00:02:46.655
Which is going to rerender this again,
but it's going to return this new state.

47
00:02:46.655 --> 00:02:51.916
This is basically calling
setState on a crash state, right?

48
00:02:51.916 --> 00:02:56.660
So this is going to rerender again with
this hasError, which does this, right?

49
00:02:58.610 --> 00:02:59.950
It renders, right?

50
00:02:59.950 --> 00:03:05.140
And the first time it does have an error,
but does not have redirect, right?

51
00:03:05.140 --> 00:03:09.900
So it's going to call this and
we're going to hit this block here,

52
00:03:09.900 --> 00:03:11.950
right, cuz it has an error.

53
00:03:13.820 --> 00:03:15.770
It's also going to call
componentDidUpdate.

54
00:03:17.170 --> 00:03:22.846
And this error, it does have an error this
time, so it's gonna set a timeout for

55
00:03:22.846 --> 00:03:28.730
in 5,000 milliseconds to call
this.setState with redirect true.

56
00:03:28.730 --> 00:03:32.249
Once you call setState again
it's going to rerender again and

57
00:03:32.249 --> 00:03:36.865
it's gonna hit this block, which is gonna
cause it to navigate to the homepage.

58
00:03:36.865 --> 00:03:41.277
Now mind you, typically if this was
not navigating, it would've called

59
00:03:41.277 --> 00:03:46.348
componentDidUpdate again, but it's gonna
unrender itself before that happens.

60
00:03:50.625 --> 00:03:52.950
Okay, does that makes sense?

61
00:03:52.950 --> 00:03:56.867
It's a bit convoluted, not something you
have to do very frequently with React,

62
00:03:56.867 --> 00:03:59.170
it's kind of an advanced use case.

63
00:03:59.170 --> 00:04:02.812
But it's good for you to kinda see how
all the component lifecycle methods can

64
00:04:02.812 --> 00:04:04.110
interact with each other.

65
00:04:07.628 --> 00:04:10.710
All right, cool.

66
00:04:10.710 --> 00:04:12.600
Questions about error boundaries?

67
00:04:12.600 --> 00:04:17.350
We've now hit ten dash error boundaries,
if you wanna catch up there.

68
00:04:17.350 --> 00:04:21.987
&gt;&gt; Could you please explain again,
I just noticed on line 27 there's that,

69
00:04:21.987 --> 00:04:25.549
it's in curly brackets,
the empty string again, yeah.

70
00:04:25.549 --> 00:04:29.244
And you have that as well in your demo,
but it's right after the link tag.

71
00:04:29.244 --> 00:04:30.597
Can you remind me what that's doing?

72
00:04:30.597 --> 00:04:35.530
&gt;&gt; Yeah, This is Prettier
specifically that's doing this.

73
00:04:35.530 --> 00:04:40.915
So Prettier tries to keep your line
length relatively tame, right?

74
00:04:40.915 --> 00:04:44.511
There's some people that are super bent
over or bent out of shape about I need

75
00:04:44.511 --> 00:04:48.815
80 characters on this line,
if it's 81 then I lose my mind, right?

76
00:04:48.815 --> 00:04:50.565
So what Prettier in
general tries to do and

77
00:04:50.565 --> 00:04:54.365
tries to be reasonable about as it tries
to put 80-ish characters per line, or 120,

78
00:04:54.365 --> 00:04:56.416
I don't remember exactly
what that character.

79
00:04:56.416 --> 00:04:58.625
But some reasonable amount
of characters per line.

80
00:04:59.770 --> 00:05:04.655
When you have a really long
string that has intermediate text

81
00:05:04.655 --> 00:05:09.559
kind of things like a tags and
link tags and things like that.

82
00:05:09.559 --> 00:05:14.492
Sometimes it has to get a little weird
about making those lines kind of

83
00:05:14.492 --> 00:05:16.119
connect succinctly.

84
00:05:16.119 --> 00:05:19.600
So the way that it can do this is
this is basically just, I mean,

85
00:05:19.600 --> 00:05:23.900
you've seen the curly brackets, right,
with the JavaScript expression.

86
00:05:24.920 --> 00:05:27.230
All it's doing here is
it's adding a space.

87
00:05:27.230 --> 00:05:29.731
But it's doing that explicitly so

88
00:05:29.731 --> 00:05:34.227
that there's a space between the link and
JK period, right?

89
00:05:36.059 --> 00:05:39.956
I think this would work, right,
you could just put the space here.

90
00:05:42.022 --> 00:05:45.699
And that should work, and in any case,
I just tend to ignore it because it's

91
00:05:45.699 --> 00:05:48.871
Prettier putting it in there and
the net result is the same thing.

92
00:05:52.091 --> 00:05:53.011
&gt;&gt; Thank you.

93
00:05:53.011 --> 00:05:56.200
&gt;&gt; Mm-hm, actually you can see there,
it took the space out.

94
00:06:00.932 --> 00:06:06.630
Whereas if we put the space here
like that, The space is back in.

95
00:06:06.630 --> 00:06:12.820
So I've never really dug into it enough
to really find out why it does that.

96
00:06:12.820 --> 00:06:14.532
But it's the finicky nature of it,

97
00:06:14.532 --> 00:06:17.280
it's just trying to put a space
there cuz you asked it to.

98
00:06:17.280 --> 00:06:22.352
&gt;&gt; Is it safe to assume that
getDerivedStateFromError

99
00:06:22.352 --> 00:06:28.700
access setState for us passing to
it it's return value as an arg?

100
00:06:28.700 --> 00:06:31.227
&gt;&gt; Yeah, so I think the question is,

101
00:06:31.227 --> 00:06:35.237
you're returning an object here,
is it safe to assume

102
00:06:35.237 --> 00:06:40.222
that this gets passed directly to
a setState call instead of React?

103
00:06:43.241 --> 00:06:46.960
I haven't dug into the code to know
precisely the methodology that it does it.

104
00:06:46.960 --> 00:06:50.880
But functionally and pragmatically, yes,
you can make that assumption in your head.

105
00:06:50.880 --> 00:06:53.810
I've never seen that vary in behavior.

106
00:06:54.840 --> 00:06:57.721
Whatever you return here
is basically functionally

107
00:06:57.721 --> 00:07:00.739
calling setState with whatever
object you have here.

108
00:07:03.244 --> 00:07:08.334
But I haven't shown you this, but you can
actually call setState with a function.

109
00:07:11.031 --> 00:07:15.738
And there's some people that prefer
that whatever you return the function

110
00:07:15.738 --> 00:07:17.540
gets passed into setState.

111
00:07:17.540 --> 00:07:19.702
There's some reason that
people like doing that, and

112
00:07:19.702 --> 00:07:21.301
I cannot remember off the top of my head.

113
00:07:21.301 --> 00:07:23.877
For example, here I do not know if
you can pass a function in here.

114
00:07:23.877 --> 00:07:25.818
I don't know if that works,
I haven't tried.

115
00:07:25.818 --> 00:07:28.985
I guess we could just try and
see if it works.

116
00:07:33.354 --> 00:07:38.042
&gt;&gt; Is there a way to prevent useEffect
from running when the component mounts for

117
00:07:38.042 --> 00:07:39.060
the first time?

118
00:07:40.580 --> 00:07:41.380
&gt;&gt; Not off the top of my head.

119
00:07:42.530 --> 00:07:45.883
&gt;&gt; Would that be an appropriate
time to use componentDidUpdate or

120
00:07:45.883 --> 00:07:47.980
am I'm misunderstanding how it is?.

121
00:07:47.980 --> 00:07:50.134
&gt;&gt; Well, the question is,
in a function component,

122
00:07:50.134 --> 00:07:51.948
can you prevent useEffect from running?

123
00:07:51.948 --> 00:07:53.452
What you would do,

124
00:07:53.452 --> 00:07:58.440
the way I would do it is you would
just put an if statement there.

125
00:07:58.440 --> 00:08:01.841
If this is the first time running,

126
00:08:01.841 --> 00:08:07.368
then don't execute whatever
I don't want to execute.

127
00:08:07.368 --> 00:08:12.574
But I don't think there's a methodology
for preventing it from running and

128
00:08:12.574 --> 00:08:16.407
just running on updates,
not off top my head, anyway.

