WEBVTT

1
00:00:00.430 --> 00:00:05.334
So we're gonna use something called
a hook, which is a concept that got

2
00:00:05.334 --> 00:00:10.009
released with React 16.8, so
in React years, it's very new.

3
00:00:10.009 --> 00:00:14.327
But it's actually been around for a decent
amount of time now, to the point that

4
00:00:14.327 --> 00:00:18.980
basically all of React just runs on hooks,
but React was not always written this way.

5
00:00:20.830 --> 00:00:27.248
So I want you to import {
useState } from 'react'.

6
00:00:30.536 --> 00:00:33.055
Okay, useState is a hook,

7
00:00:33.055 --> 00:00:38.980
the way that you can see a hook is
that they always start with use.

8
00:00:40.450 --> 00:00:44.605
So if you see useEffect, useLayoutEffect,

9
00:00:44.605 --> 00:00:49.780
useImperativeHandle, that's one of them.

10
00:00:49.780 --> 00:00:53.395
If you see something that starts with use,
you can know this is a hook,

11
00:00:53.395 --> 00:00:55.880
that's the naming schema for that.

12
00:00:55.880 --> 00:00:58.464
Instead of saying const Location here,

13
00:00:58.464 --> 00:01:03.412
what I want you to do is we're gonna
say const, we'll just comment that out.

14
00:01:03.412 --> 00:01:09.497
We're gonna do some destructuring here,
{location,

15
00:01:09.497 --> 00:01:16.352
setLocation} = useState[''],
with our default state.

16
00:01:16.352 --> 00:01:23.554
Now you can put Seattle, WA here, I'm
just gonna leave it as an empty string.

17
00:01:23.554 --> 00:01:27.725
So that there's no default location
that the user can type in whatever they

18
00:01:27.725 --> 00:01:28.461
want there.

19
00:01:30.653 --> 00:01:35.597
Okay, and now,
this still isn't gonna do anything, right,

20
00:01:35.597 --> 00:01:39.611
because we haven't used
the setLocation yet, but

21
00:01:39.611 --> 00:01:43.086
now we have the ability
to mutate location.

22
00:01:43.086 --> 00:01:44.895
So let's go ahead and do that now.

23
00:01:48.569 --> 00:01:55.459
So we're gonna make
an onChange handler here.

24
00:01:55.459 --> 00:02:00.275
And it's gonna take in an event,
which I typically just say (e) here.

25
00:02:02.511 --> 00:02:10.954
And then I'm just gonna call
setLocation(e.target.value).

26
00:02:12.847 --> 00:02:15.170
So I wrote that line right there.

27
00:02:17.309 --> 00:02:24.180
So anytime a change event happens on this
particular input, it's gonna take that,

28
00:02:24.180 --> 00:02:29.138
it's gonna call this function
here which we're creating.

29
00:02:29.138 --> 00:02:32.287
It's gonna take that event,
it's gonna pull out the target.value.

30
00:02:32.287 --> 00:02:34.120
The target is going to be input, and

31
00:02:34.120 --> 00:02:36.822
that's gonna pull up the value
of what the input is.

32
00:02:36.822 --> 00:02:42.250
And then it's going to call setLocation,
which is going to update the state here.

33
00:02:43.430 --> 00:02:47.803
Once the state is updated, then React
is like, they called setLocation,

34
00:02:47.803 --> 00:02:50.547
which I know now means
that location has changed,

35
00:02:50.547 --> 00:02:53.051
I'm gonna rerender that
with the new state.

36
00:02:57.091 --> 00:03:01.118
So just to prove my point and
put location here, but

37
00:03:01.118 --> 00:03:04.848
I'm also going to put
location right there.

38
00:03:04.848 --> 00:03:08.762
Okay, so now over here,
if I go over here and refresh,

39
00:03:09.783 --> 00:03:13.715
Notice that this is being outputted here.

40
00:03:17.841 --> 00:03:18.341
Pretty cool, right?

41
00:03:22.247 --> 00:03:26.188
This is a one way data binding, right?

42
00:03:26.188 --> 00:03:29.963
So I can have data from
here bound to here.

43
00:03:32.274 --> 00:03:33.962
But it doesn't go the other way.

44
00:03:38.595 --> 00:03:42.304
Cool, so you can get rid
of this location part here.

45
00:03:42.304 --> 00:03:46.542
Let's talk about useState
just a little bit more.

46
00:03:46.542 --> 00:03:49.830
UseState depends heavily on
the order that it's called.

47
00:03:49.830 --> 00:03:55.090
So if I have five hooks in a row, it's
gonna say that the first hook is location,

48
00:03:55.090 --> 00:03:59.110
the second hook is animal,
the third hook is breed, right?

49
00:03:59.110 --> 00:04:00.447
And it's gonna call it, so

50
00:04:00.447 --> 00:04:03.250
you have to call them in
the same order every single time.

51
00:04:04.360 --> 00:04:09.415
So generally not a problem, except,
do not have conditional hooks.

52
00:04:09.415 --> 00:04:17.289
So I cannot say if
(something) { const [hook,

53
00:04:17.289 --> 00:04:22.356
setHook] = useState();.

54
00:04:22.356 --> 00:04:25.580
This, massive no-no, right?

55
00:04:26.840 --> 00:04:30.588
Because now I have a variable
amount of hooks being called.

56
00:04:30.588 --> 00:04:36.281
And so if I have another hook after this,
const [animal,

57
00:04:36.281 --> 00:04:42.892
setAnimal], = useState.

58
00:04:45.595 --> 00:04:50.167
Now, depending if something is true or
not, this will be something else.

59
00:04:50.167 --> 00:04:53.407
And this will get whatever was in here,
wasn't intended for something else.

60
00:04:53.407 --> 00:04:57.027
So if you see your hooks are not
being set to the correct thing and

61
00:04:57.027 --> 00:05:01.137
wildly something you don't expect,
it might be something like this.

62
00:05:01.137 --> 00:05:05.605
Generally just, rules of thumb,
don't put them in if statements,

63
00:05:05.605 --> 00:05:07.307
don't put them in loops.

64
00:05:07.307 --> 00:05:10.544
If you don't do that,
you're never gonna have a problem.

65
00:05:10.544 --> 00:05:12.468
I never have a problem with it,

66
00:05:12.468 --> 00:05:17.583
we're actually about to set up an ESLint
rule to make sure that you don't do this.

67
00:05:17.583 --> 00:05:20.616
&gt;&gt; On the website in code example you have
updateLocation instead of setLocation?

68
00:05:20.616 --> 00:05:23.559
&gt;&gt; I do, that's just variable naming.

69
00:05:23.559 --> 00:05:28.055
&gt;&gt; And then, Someone put

70
00:05:28.055 --> 00:05:32.780
a console.log in a block
of the function block.

71
00:05:32.780 --> 00:05:35.433
And then as you were typing, rerendering,

72
00:05:35.433 --> 00:05:38.741
and it wasn't running
the console.log all the time.

73
00:05:38.741 --> 00:05:41.300
So they're curious what
was going on there.

74
00:05:41.300 --> 00:05:48.961
&gt;&gt; Sure, so if you do something
like console.log(location),

75
00:05:53.000 --> 00:05:57.092
So it depends on the state of your
computer, the state of the background,

76
00:05:57.092 --> 00:06:01.390
how React is running, but
sometimes it will batch those, right?

77
00:06:01.390 --> 00:06:04.807
So if you get multiple things working all
together at once, sometimes React is like,

78
00:06:04.807 --> 00:06:05.714
cool, I can get this.

79
00:06:05.714 --> 00:06:12.250
And it'll put multiple locations or
sets down into one readout.

80
00:06:12.250 --> 00:06:14.422
You can see here it's running
mine every single time.

81
00:06:14.422 --> 00:06:18.847
But you can't depend on how frequently
React is going to render, so

82
00:06:18.847 --> 00:06:23.320
don't depend on how frequently
React is going to rerender.

83
00:06:23.320 --> 00:06:24.790
Don't depend on how it's gonna batch,

84
00:06:24.790 --> 00:06:27.380
don't depend on what order
things are gonna run in.

85
00:06:27.380 --> 00:06:31.328
This is all very important, that's why
I'm telling you, don't have side effects,

86
00:06:31.328 --> 00:06:34.190
keep your render functions very clean and
very fast.

87
00:06:34.190 --> 00:06:37.251
Because if you do that, you get a bunch
of performance stuff absolutely for

88
00:06:37.251 --> 00:06:37.890
free, right?

89
00:06:38.890 --> 00:06:43.212
Other frameworks are now adopting hooks,
you can use hooks in Vue now,

90
00:06:43.212 --> 00:06:45.940
so that's kinda caught on.

91
00:06:45.940 --> 00:06:48.316
Someone was asking me about
updateLocation versus setLocation.

92
00:06:48.316 --> 00:06:52.873
I actually started calling everything set,
just so

93
00:06:52.873 --> 00:06:58.684
I can see at a glance as, okay,
that's a hook set function for me.

94
00:06:58.684 --> 00:07:01.969
I don't think that's even a common React
thing, I think that's just a Brian thing.

95
00:07:01.969 --> 00:07:04.461
But it helps me to know
that that's what that is.

96
00:07:07.953 --> 00:07:09.670
But it doesn't matter.

97
00:07:09.670 --> 00:07:13.529
The only thing that's matter is
if you create a custom hook,

98
00:07:13.529 --> 00:07:17.250
which we build later in the course,
you do need to call it.

99
00:07:17.250 --> 00:07:19.895
Use something,
that's really what's important.

100
00:07:22.135 --> 00:07:25.622
Do not put hooks inside of
if statements or loops,

101
00:07:25.622 --> 00:07:30.910
that's hard rule, literally never,
it's never appropriate.

102
00:07:30.910 --> 00:07:33.437
Whatever you provide to useState here,

103
00:07:33.437 --> 00:07:36.124
this is going to be
the default value of it.

104
00:07:36.124 --> 00:07:40.986
So this is where hooks get a little
strange in terms of their performance

105
00:07:40.986 --> 00:07:41.723
profile.

106
00:07:41.723 --> 00:07:46.324
On one hand, JavaScript and modern
JavaScript engines are very fast, right,

107
00:07:46.324 --> 00:07:48.530
they do a lot of stuff really quickly.

108
00:07:49.570 --> 00:07:52.622
So an example of something that we're
doing that's relatively inefficient, but

109
00:07:52.622 --> 00:07:53.370
it's kind of okay.

110
00:07:54.550 --> 00:07:57.358
Every time this rerender
function gets called,

111
00:07:57.358 --> 00:08:01.475
it actually is creating a new function
here, right, not crazy ideal.

112
00:08:01.475 --> 00:08:05.115
If we were super sensitive
performance here,

113
00:08:05.115 --> 00:08:09.515
we would do something like
const eventHandler = blah.

114
00:08:11.556 --> 00:08:15.581
Actually we can't even do that,
cuz here you have to have location.

115
00:08:15.581 --> 00:08:20.843
And it's holding on to the correct
setLocation via closure, right?

116
00:08:20.843 --> 00:08:22.850
So actually, this wouldn't work.

117
00:08:23.970 --> 00:08:29.080
But, even though the fact that we are kind
of churning through a decent amount of

118
00:08:29.080 --> 00:08:34.284
memory here, especially if this will
be rerendered fairly frequently, fine.

119
00:08:34.284 --> 00:08:38.758
I would wait for that to become a problem
if we did any sort of memoization or

120
00:08:38.758 --> 00:08:40.590
anything like that.

121
00:08:40.590 --> 00:08:43.359
There are things that you can do to
prevent this from rendering more

122
00:08:43.359 --> 00:08:44.602
frequently than it needs to.

123
00:08:44.602 --> 00:08:49.160
But for now, we're just gonna ignore and
just say, I'm typing a ton here and

124
00:08:49.160 --> 00:08:55.000
I'm not feeling any performance problems,
it's fine, don't worry about it.

125
00:08:55.000 --> 00:08:56.788
So onChange is a specific name here,

126
00:08:56.788 --> 00:09:00.498
it's basically you can make any sort
of event handler here that you need to.

127
00:09:00.498 --> 00:09:05.396
So you can see here that actually
React will autocomplete for onBlur,

128
00:09:05.396 --> 00:09:10.971
OnClick, onClickCapture,
onCompositionStart, onCopy, onCut, right?

129
00:09:10.971 --> 00:09:13.642
You do all that here,
and they're just normal,

130
00:09:13.642 --> 00:09:16.130
they're actually React synthetic events.

131
00:09:16.130 --> 00:09:20.417
So React actually imitates what
the normal event object looks like.

132
00:09:20.417 --> 00:09:24.607
And then intercepts a lot of that so that
React can handle before the browser does,

133
00:09:24.607 --> 00:09:27.109
because React can do it
faster than the browser.

134
00:09:27.109 --> 00:09:31.157
But suffice to say that they
imitate the normal API, so

135
00:09:31.157 --> 00:09:35.620
you can just look at the MDN event page,
and that's fine.

136
00:09:35.620 --> 00:09:40.510
So let's talk about this for a second,
this is called a controlled form.

137
00:09:40.510 --> 00:09:44.186
And this is actually a bad idea,
the way that we're doing it.

138
00:09:44.186 --> 00:09:48.768
So what you could actually
do instead is you could

139
00:09:48.768 --> 00:09:53.573
just make this have no change handler and
no value,

140
00:09:53.573 --> 00:09:57.843
and refresh, now this works again, right?

141
00:09:57.843 --> 00:10:01.195
We're not using our location here.

142
00:10:01.195 --> 00:10:05.223
But here, onSubmit,
we could just capture the entire event,

143
00:10:05.223 --> 00:10:08.720
pull everything out of the form and
submit it, right?

144
00:10:09.740 --> 00:10:12.196
And use it just like a normal HTML form.

145
00:10:12.196 --> 00:10:15.433
That's called an uncontrolled form,
or an uncontrolled input,

146
00:10:15.433 --> 00:10:18.980
this input is now uncontrolled,
cuz React isn't doing anything to it.

147
00:10:20.170 --> 00:10:24.620
If you have no validation,
or trickery that

148
00:10:24.620 --> 00:10:29.442
you need to pull with your forms,
just do that.

149
00:10:29.442 --> 00:10:34.474
I'm showing you this so
I can show you how hooks work.

150
00:10:34.474 --> 00:10:37.534
And sometimes this is necessary,
right, if you're doing like,

151
00:10:37.534 --> 00:10:40.704
they have a valid password, or
they're giving you a valid zip code,

152
00:10:40.704 --> 00:10:44.440
then this would be very important to you
and you'd have to do a controlled input.

153
00:10:46.110 --> 00:10:48.620
But not everything needs it,
most things don't need it.

154
00:10:48.620 --> 00:10:51.306
Most time you're just taking someone's
name or something like that,

155
00:10:51.306 --> 00:10:52.390
that's a controlled form.

156
00:10:52.390 --> 00:10:55.420
So let's go add one more ESLint rule.

