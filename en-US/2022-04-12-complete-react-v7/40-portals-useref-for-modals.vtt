WEBVTT

1
00:00:00.180 --> 00:00:02.568
So we've now gotten up to 11 dash context.

2
00:00:02.568 --> 00:00:04.541
So if you need to check it out,
that's where we are.

3
00:00:07.413 --> 00:00:11.179
And we are going into the last section of

4
00:00:11.179 --> 00:00:16.669
the Complete Intro to React,
which is portals and refs.

5
00:00:16.669 --> 00:00:18.221
Another kind of advanced use case.

6
00:00:21.138 --> 00:00:24.770
Okay, question for you.

7
00:00:24.770 --> 00:00:29.125
I have my lovely puppy here,
which you cannot adopt, by the way.

8
00:00:29.125 --> 00:00:32.767
But say you wanted to, and
you click the Adopt Luna button.

9
00:00:32.767 --> 00:00:37.522
And we wanted to do the age old,
wonderful user experience of a modal,

10
00:00:37.522 --> 00:00:39.543
cuz everybody loves modals.

11
00:00:41.541 --> 00:00:44.103
No I'm just kidding,
modals are terrible and

12
00:00:44.103 --> 00:00:47.794
we should all stop using them, but
I'm gonna show you how to do it.

13
00:00:47.794 --> 00:00:50.639
If you're not familiar with what
a modal is, it's like a popover thing.

14
00:00:50.639 --> 00:00:54.991
It's a confirmation thing or
a dialogue kinda thing.

15
00:00:54.991 --> 00:00:58.900
It's a popover,
you can think about it as that.

16
00:00:58.900 --> 00:01:01.168
And they're awful user experiences.

17
00:01:01.168 --> 00:01:04.205
Every user study I've ever done,
basically everyone says I hate modals,

18
00:01:04.205 --> 00:01:05.176
don't show me modals.

19
00:01:05.176 --> 00:01:06.111
And what do we do as developers?

20
00:01:06.111 --> 00:01:07.039
We show them more modals.

21
00:01:07.039 --> 00:01:10.107
It's just lazy design, to be honest.

22
00:01:10.107 --> 00:01:12.715
So let's do some lazy design.

23
00:01:12.715 --> 00:01:15.320
So how would you do that right now?

24
00:01:15.320 --> 00:01:19.339
Just think through your React
tools that you've learned so far.

25
00:01:19.339 --> 00:01:24.697
Think about, I need to do a modal,
how would I architect that?

26
00:01:24.697 --> 00:01:28.235
It's not a super-easy
thing to solve with React.

27
00:01:30.834 --> 00:01:37.662
So, all right, I'm inside of details.

28
00:01:37.662 --> 00:01:43.255
Someone clicks this button right here,
right?

29
00:01:43.255 --> 00:01:47.167
I need to show something that covers
everything on the screen, right?

30
00:01:47.167 --> 00:01:48.358
It's gonna cover the header.

31
00:01:48.358 --> 00:01:50.373
It's gonna cover the background.

32
00:01:50.373 --> 00:01:51.736
How am I gonna do that?

33
00:01:53.399 --> 00:01:57.046
Cuz if I just try and put it here,
right show my modal component.

34
00:02:00.054 --> 00:02:03.379
It's probably not gonna cover
the other things, right?

35
00:02:03.379 --> 00:02:06.555
Or I have to write my CSS in a very
specific way that this can overwrite

36
00:02:06.555 --> 00:02:07.238
everything.

37
00:02:09.613 --> 00:02:11.719
If you have position relative or

38
00:02:11.719 --> 00:02:16.405
position absolute on anything above
it it's gonna mess it up, right?

39
00:02:16.405 --> 00:02:17.990
So how am I going to cover it?

40
00:02:17.990 --> 00:02:21.725
It'd be way easier if I could just
do it on the outside of everything.

41
00:02:21.725 --> 00:02:23.906
And in theory you could kind of do that.

42
00:02:23.906 --> 00:02:28.536
Basically what you would do is all right,
I have a prop called show modal function

43
00:02:28.536 --> 00:02:32.297
that I would invoke from here that
would invoke something in app.

44
00:02:32.297 --> 00:02:34.624
And then here in app,
at the outermost layer,

45
00:02:34.624 --> 00:02:37.738
I could do a modal component
that covers everything, right?

46
00:02:37.738 --> 00:02:44.011
And just do this pass up,
pass down of functions and properties.

47
00:02:44.011 --> 00:02:47.167
That sounds annoying, doesn't it?

48
00:02:47.167 --> 00:02:52.083
It is, and honestly this is
the way that we used to do it.

49
00:02:52.083 --> 00:02:55.076
I feel like when I teach this
class I'm like, back in my day,

50
00:02:55.076 --> 00:02:57.266
we used to walk uphill
both ways in the snow.

51
00:02:57.266 --> 00:02:58.890
And we couldn't show modals [LAUGH].

52
00:03:02.780 --> 00:03:06.733
So there's a thing now called portals
that just make it tons easier to do.

53
00:03:06.733 --> 00:03:11.638
So I'm gonna show you how to make
a modal or a portal in React.

54
00:03:11.638 --> 00:03:16.642
So the first thing is we're gonna go
back and modify index.html here, okay?

55
00:03:16.642 --> 00:03:19.010
We're gonna put a div
above it called modal.

56
00:03:23.346 --> 00:03:26.548
And don't put anything inside of there
otherwise it's gonna get displayed.

57
00:03:29.653 --> 00:03:34.363
Now we're going to create a React
component that only renders into this one,

58
00:03:34.363 --> 00:03:34.878
right?

59
00:03:34.878 --> 00:03:40.017
And then, now it's above our application
entirely and we can do whatever we want.

60
00:03:40.017 --> 00:03:43.156
Now I'm showing you how to do this with
a modal but you can use portals for

61
00:03:43.156 --> 00:03:44.266
lots of things, right?

62
00:03:44.266 --> 00:03:48.320
Let's say that we had some sort
of contextual navigations,

63
00:03:48.320 --> 00:03:50.789
my favorite use case for it, right?

64
00:03:50.789 --> 00:03:54.342
Let's say that I'm on this page and
I show an adopt button, and

65
00:03:54.342 --> 00:03:57.977
I show a go back to home button,
and I show see my next pet button.

66
00:03:57.977 --> 00:04:02.232
And then I click the homepage and
this is show only pets, or show only dogs,

67
00:04:02.232 --> 00:04:03.257
shows only cats.

68
00:04:03.257 --> 00:04:06.223
It's like contextual to the page
that you're navigating but

69
00:04:06.223 --> 00:04:08.397
it's on a separate part of the page,
right?

70
00:04:08.397 --> 00:04:10.209
That'd be another good use for portals,

71
00:04:10.209 --> 00:04:12.710
I'm doing something here that
affects state over here.

72
00:04:12.710 --> 00:04:17.662
So if I can use a portal from here to
render into a different spot on the page.

73
00:04:17.662 --> 00:04:21.029
It makes my code very succinct and
work together well,

74
00:04:21.029 --> 00:04:23.674
and the like things are grouped together.

75
00:04:23.674 --> 00:04:28.491
And I don't have to have this crazy
messaging system back and forth.

76
00:04:28.491 --> 00:04:32.120
Before, we would've just done that
with something like context or Redux,

77
00:04:32.120 --> 00:04:35.861
where we would just have some sort of
shared application state that's passing

78
00:04:35.861 --> 00:04:36.440
it across.

79
00:04:36.440 --> 00:04:38.818
That would've worked okay,
it just would've been annoying.

80
00:04:41.814 --> 00:04:43.752
And portals make it very easy.

81
00:04:43.752 --> 00:04:47.837
So, I want you to make
a new file called modal.js.

82
00:04:49.952 --> 00:04:54.039
Or you can call like the devil.js
if you really wanna be accurate.

83
00:04:54.039 --> 00:04:59.408
You can see I'm a big fan of modals,
[LAUGH] Import,

84
00:04:59.408 --> 00:05:03.664
we don't need React,
we just need use effect.

85
00:05:07.485 --> 00:05:08.972
And use ref.

86
00:05:08.972 --> 00:05:17.028
So we're gonna use another special
case hook here called ref from React.

87
00:05:19.940 --> 00:05:26.674
Okay, and then we're gonna import
a create portal method from react-dom.

88
00:05:26.674 --> 00:05:30.766
Since this is interacting directly with
the dom that comes from react-dom and

89
00:05:30.766 --> 00:05:31.636
not from react.

90
00:05:34.119 --> 00:05:39.809
Okay, we're gonna make this modal
function, it's gonna take in children.

91
00:05:43.745 --> 00:05:45.777
Then it's gonna render out some stuff.

92
00:05:47.527 --> 00:05:50.670
Const modal=, rather.

93
00:05:50.670 --> 00:05:54.102
And then we're gonna say const elRef.

94
00:05:54.102 --> 00:05:58.972
So el stands for element,
you could totally put element Ref here.

95
00:05:58.972 --> 00:06:02.609
I've written element so
many times I just put el now.

96
00:06:02.609 --> 00:06:08.001
= useRef, and then we're gonna
give it null to begin with.

97
00:06:08.001 --> 00:06:09.519
So what is a ref?

98
00:06:09.519 --> 00:06:14.327
A ref is something like I have one value
that I need to refer to the exact same

99
00:06:14.327 --> 00:06:16.127
thing across all renders.

100
00:06:16.127 --> 00:06:21.491
Whereas with like use state you get the
current state which you can blow away and

101
00:06:21.491 --> 00:06:22.313
recreate.

102
00:06:22.313 --> 00:06:27.446
Different renderings have access to
different versions of the same state.

103
00:06:27.446 --> 00:06:31.482
With ref, you're saying
across all of this rendering,

104
00:06:31.482 --> 00:06:34.351
I wanna refer to exactly the same thing.

105
00:06:34.351 --> 00:06:42.732
Precisely the same thing as in like
a triple like const x = x, right?

106
00:06:42.732 --> 00:06:49.775
I want triple equality of,
let's say like this, const y,

107
00:06:55.953 --> 00:06:59.740
So x is not triple equal to y, right?

108
00:06:59.740 --> 00:07:02.600
Because they do not reference
to the exact same object.

109
00:07:02.600 --> 00:07:06.228
They're equivalent in the sense
that they are both empty objects.

110
00:07:06.228 --> 00:07:09.058
But they're not the same object, right?

111
00:07:09.058 --> 00:07:11.167
When you're using something for elRef,

112
00:07:11.167 --> 00:07:14.613
you want something that's gonna be
triple equal to the same thing.

113
00:07:14.613 --> 00:07:22.207
So if I have like for example const
z equals x, z is triple equal to x.

114
00:07:22.207 --> 00:07:26.485
So we want this kind of
equality across renders.

115
00:07:26.485 --> 00:07:29.166
I'm abstract at the moment,
I know, but give me a second and

116
00:07:29.166 --> 00:07:31.121
I'll explain to you why this is important.

117
00:07:31.121 --> 00:07:33.020
But that's what useRef is for, so

118
00:07:33.020 --> 00:07:37.684
that you make sure that you're getting the
exact same thing in every single render.

119
00:07:37.684 --> 00:07:43.505
The reason why we want that is so
that if elRef.current,

120
00:07:43.505 --> 00:07:48.599
it gives you back this
container that allows you to

121
00:07:48.599 --> 00:07:53.836
set this to have the same
thing across all renders.

122
00:07:55.734 --> 00:08:01.280
Oops, and now I can say elRef.current

123
00:08:01.280 --> 00:08:09.019
is assigned document.createElement("div").

124
00:08:09.019 --> 00:08:14.539
Now I have this div container that I'm
going to render inside of my portal.

125
00:08:14.539 --> 00:08:19.704
And later when I go to destroy it, I'm
going to destroy the one that I created.

126
00:08:19.704 --> 00:08:24.285
Otherwise, you're going to get a different
div, which is not going to destroy the one

127
00:08:24.285 --> 00:08:28.705
that you have and you're going to end up
with a memory leak, which you don't want.

128
00:08:28.705 --> 00:08:31.611
Okay, you can get rid of all that.

129
00:08:31.611 --> 00:08:37.033
If this is weird to you, ths stuff here,
there's great Frontend Masters courses

130
00:08:37.033 --> 00:08:41.919
on objects and object equalities and
coercion and all that kind of stuff.

131
00:08:41.919 --> 00:08:43.283
That's what all this has to do with.

132
00:08:45.901 --> 00:08:50.500
Okay, so now we have this elRef.current.

133
00:08:50.500 --> 00:08:54.523
By the way, elRef is a frozen object.

134
00:08:54.523 --> 00:08:58.357
It's a mutable ref object if you
wanna know what the type is.

135
00:08:58.357 --> 00:09:01.169
And it only has one thing that
you can set, which is current.

136
00:09:01.169 --> 00:09:07.566
If you try and
say like elRef.lol = wat, right?

137
00:09:07.566 --> 00:09:10.427
You actually can't do this,
it won't let you, it's a frozen object.

138
00:09:10.427 --> 00:09:14.822
It only lets you modify current.

139
00:09:14.822 --> 00:09:20.390
So it can keep that referential equality,
that's why it does that.

140
00:09:20.390 --> 00:09:27.778
UseEffect, Okay, so if this gets rendered.

141
00:09:27.778 --> 00:09:30.570
Sorry, when this very first gets rendered,

142
00:09:30.570 --> 00:09:33.662
we need to render into that
portal spot on the dom.

143
00:09:33.662 --> 00:09:38.575
So we're gonna say const modalRoot is

144
00:09:38.575 --> 00:09:44.568
assigned document.getElementById modal.

145
00:09:44.568 --> 00:09:46.999
So we're gonna get a hold of that modal.

146
00:09:46.999 --> 00:09:55.084
Then we're gonna say
modalRoot.appendChild ElRef.current.

147
00:09:58.453 --> 00:10:02.538
And then down here, we're gonna say
only do this at the first render, right?

148
00:10:02.538 --> 00:10:04.329
We don't wanna render into
it every single time.

149
00:10:04.329 --> 00:10:07.960
We just wanna start that rendering
process and then go from there.

150
00:10:11.937 --> 00:10:18.577
Okay, now here's a problem that
we have with this component.

151
00:10:18.577 --> 00:10:22.970
We're creating this div here and
if we don't destroy it, or

152
00:10:22.970 --> 00:10:27.279
specifically, yeah if we
don't remove this afterwards,

153
00:10:27.279 --> 00:10:31.864
because we're doing this like
apend child business, right?

154
00:10:31.864 --> 00:10:35.680
We're gonna leak right,
cuz it's going to keep appending children,

155
00:10:35.680 --> 00:10:37.278
it's never going to remove.

156
00:10:37.278 --> 00:10:39.101
React doesn't remove it for us.

157
00:10:39.101 --> 00:10:43.972
So we have to tell React,
when this gets destroyed,

158
00:10:43.972 --> 00:10:47.626
or on component will unmount, right,

159
00:10:47.626 --> 00:10:51.740
would be the equivalent lifecycle method.

160
00:10:51.740 --> 00:10:54.665
We need to tell it destroy this div.

161
00:10:54.665 --> 00:10:56.955
The way you do it, and
it's kind of strange,

162
00:10:56.955 --> 00:10:59.202
is you return a function
here in useEffect.

163
00:10:59.202 --> 00:11:03.091
So we're going to return a function,

164
00:11:03.091 --> 00:11:09.543
this function will get invoked
whenever this model goes away.

165
00:11:09.543 --> 00:11:13.285
It's a little weird but
that's how you do this.

166
00:11:13.285 --> 00:11:22.228
And then you just say
modalRoot.removeChild (elRef.current).

167
00:11:28.793 --> 00:11:32.605
This is clean up, whatever you
return in useEffect is for cleanup.

168
00:11:32.605 --> 00:11:35.730
It's almost always for memory leaks.

169
00:11:35.730 --> 00:11:39.467
I've never used it for
anything but stopping timers,

170
00:11:39.467 --> 00:11:44.191
removing stuff from the dom,
stopping the libraries from running.

171
00:11:44.191 --> 00:11:48.332
If you ever have to integrate with
something like jQuery from React, one,

172
00:11:48.332 --> 00:11:51.962
I'm sorry for your loss, and two,
you would do it here, right?

173
00:11:51.962 --> 00:11:56.524
This is where that's useful for, okay?

174
00:11:56.524 --> 00:12:00.098
And then finally,
we can say return createPortal,

175
00:12:02.856 --> 00:12:06.061
Div children,

176
00:12:09.307 --> 00:12:12.753
And then we just tell it where to put it,
which is elRef.current.

177
00:12:15.640 --> 00:12:18.250
And then down here at the bottom,
export default modal.

178
00:12:24.403 --> 00:12:30.037
All right, some crazy stuff
happening in there, I know, right?

179
00:12:30.037 --> 00:12:32.585
But this is how you end up
having to work with modals.

180
00:12:32.585 --> 00:12:33.501
And honestly,

181
00:12:33.501 --> 00:12:37.802
you can just kind of like rip this modal
code and apply it to other places.

182
00:12:37.802 --> 00:12:41.893
This is more or less what a modal
is always going to look like.

183
00:12:41.893 --> 00:12:45.462
Unless you have some styling or
something you wanna put around it.

184
00:12:45.462 --> 00:12:50.516
You could do that here as well if you had
like some particular subset of features.

185
00:12:50.516 --> 00:12:55.390
Like how to remove it, those sorts
of things, you could put that here.

