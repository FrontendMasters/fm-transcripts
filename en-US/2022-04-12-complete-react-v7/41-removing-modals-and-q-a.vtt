WEBVTT

1
00:00:00.710 --> 00:00:03.310
Trying to decide if everyone's just
confused or if I just nailed it.

2
00:00:04.380 --> 00:00:05.190
I can never tell.

3
00:00:06.990 --> 00:00:10.062
Probably somewhere in the middle of
both confused and nail, I can nail

4
00:00:10.062 --> 00:00:13.930
it in a confusing way or I'm confusingly
nailed, I don't know, something like that.

5
00:00:14.980 --> 00:00:15.720
&gt;&gt; Could you repeat?

6
00:00:15.720 --> 00:00:20.658
I think you said about line 14 the return,
I think you said something like the return

7
00:00:20.658 --> 00:00:24.363
statement on us effect gets called
when we remove the elements or

8
00:00:24.363 --> 00:00:26.210
something like I can do.

9
00:00:26.210 --> 00:00:27.420
&gt;&gt; Yeah.

10
00:00:27.420 --> 00:00:32.296
Alright, so on this page when you
click adopt Luna it's gonna pop

11
00:00:32.296 --> 00:00:36.030
up a modal is like do you
wanna adopt Luna, right?

12
00:00:36.030 --> 00:00:37.480
It's like a confirmation modal, right?

13
00:00:38.720 --> 00:00:42.200
When you click OK,
the modal should go away, right?

14
00:00:42.200 --> 00:00:46.102
So we have to remove that DOM element that
we put there otherwise it's just gonna

15
00:00:46.102 --> 00:00:50.890
keep putting more and more DOM elements
there and or not removing it, right?

16
00:00:50.890 --> 00:00:55.276
So we need something that's gonna say as
soon as this gets removed from my react

17
00:00:55.276 --> 00:00:59.736
applicant, as soon as you stop rendering
this model, how do I clean myself up?

18
00:00:59.736 --> 00:01:02.623
The way you do that is whatever function,
again,

19
00:01:02.623 --> 00:01:05.869
this has to be a function that
you return in your effect.

20
00:01:08.835 --> 00:01:09.680
Does that make sense?

21
00:01:11.520 --> 00:01:12.460
There's a cleanup function.

22
00:01:14.650 --> 00:01:18.435
&gt;&gt; Yeah, I guess I'm just missing,
how or where does that get called but

23
00:01:18.435 --> 00:01:19.955
it's kind of a deep down.

24
00:01:19.955 --> 00:01:24.495
&gt;&gt; So
basically you're scheduling this to run.

25
00:01:24.495 --> 00:01:28.940
Whatever function you return in effect
gets scheduled to be run by react

26
00:01:28.940 --> 00:01:32.135
whenever this function
gets removed from the DOM.

27
00:01:33.747 --> 00:01:36.487
&gt;&gt; And I think the thing that I'm
missing is just like for example,

28
00:01:36.487 --> 00:01:40.350
the function to remove this thing
from the DOM, we haven't made yet.

29
00:01:40.350 --> 00:01:43.603
I'm assuming because we haven't even
gotten to getting to a model to then truly

30
00:01:43.603 --> 00:01:44.290
displaying it.

31
00:01:45.480 --> 00:01:50.950
&gt;&gt; Let's go do that and if you're still
confused by let's talk about it then.

32
00:01:50.950 --> 00:01:55.577
But basically whenever you stop rendering,
right, so

33
00:01:55.577 --> 00:02:00.309
let's look it like our error boundary for
just a second.

34
00:02:03.490 --> 00:02:06.526
At some point you're gonna render this and
then you're gonna stop rendering it,

35
00:02:06.526 --> 00:02:08.520
right, that h2 gets destroyed, right?

36
00:02:08.520 --> 00:02:10.764
So you render it when
you have an error and

37
00:02:10.764 --> 00:02:13.144
then you stop rendering it later, right?

38
00:02:13.144 --> 00:02:17.302
So you want some function to be able to
be called whenever you stop rendering

39
00:02:17.302 --> 00:02:20.404
something, and
you basically you're telling react,

40
00:02:20.404 --> 00:02:22.727
this is what I need to
do to remove myself.

41
00:02:22.727 --> 00:02:25.920
&gt;&gt; I guess to be specific, the thing
I'm confused about is how do we tell or

42
00:02:25.920 --> 00:02:28.280
what tells react to stop
rendering a given element?

43
00:02:29.350 --> 00:02:30.840
&gt;&gt; We stopped returning it.

44
00:02:30.840 --> 00:02:32.280
&gt;&gt; Stop returning.

45
00:02:32.280 --> 00:02:34.997
&gt;&gt; Because it keeps track of like,
this is what the DOM used to look like,

46
00:02:34.997 --> 00:02:36.672
this is what the DOM
was about to look like.

47
00:02:36.672 --> 00:02:39.602
It does a diff, and then it says, okay,

48
00:02:39.602 --> 00:02:44.964
all that stuff that's no longer there
we're going to remove it, right?

49
00:02:44.964 --> 00:02:46.067
It's called the virtual DOM,

50
00:02:46.067 --> 00:02:48.708
I guess I haven't talked about the virtual
DOM at all during this course.

51
00:02:48.708 --> 00:02:52.366
It's good because you'd never have to
know or care that it even exists but

52
00:02:52.366 --> 00:02:55.789
basically react to doing a diff
underneath the hood and it's going to

53
00:02:55.789 --> 00:02:59.407
remove stuff that's no longer there and
keep stuff that is still there.

54
00:03:01.595 --> 00:03:05.169
It's kind of implicit I suppose,
right, but

55
00:03:05.169 --> 00:03:10.496
whenever you stop returning
something it'll just stop rendering.

56
00:03:10.496 --> 00:03:14.557
&gt;&gt; Something about it's going over
my head but thank you very much.

57
00:03:14.557 --> 00:03:19.151
&gt;&gt; Okay [LAUGH] maybe it'll make
sense here in just a second.

58
00:03:19.151 --> 00:03:25.780
If use ref is confusing to you, I go into
it further in intermediate react, yeah.

59
00:03:25.780 --> 00:03:29.880
&gt;&gt; So return function in a use effect
equivalent to a component did unmount?

60
00:03:29.880 --> 00:03:30.380
&gt;&gt; Yeah.

61
00:03:32.150 --> 00:03:36.126
I'm sure there's some nuanced difference
there in terms of like the scheduling of

62
00:03:36.126 --> 00:03:37.730
it but functionally is the same.

63
00:03:38.870 --> 00:03:42.050
Okay, so let's go to details and
use our modal.

64
00:03:44.950 --> 00:03:50.190
We're going to import modal from ./modal.

65
00:03:50.190 --> 00:03:56.455
Okay, we're gonna have a thing
here called show modal.

66
00:03:56.455 --> 00:03:59.245
Well, yeah, we'll not show it first.

67
00:04:02.784 --> 00:04:05.594
We're gonna make a function
here to toggle the modal.

68
00:04:05.594 --> 00:04:10.609
So we're gonna say toggler modal,
I can spell, that's fine.

69
00:04:12.808 --> 00:04:16.226
And it's just gonna be a function that
all it's gonna do is call this .setstate.

70
00:04:19.704 --> 00:04:23.179
ShowModal, and
it's gonna be the opposite of

71
00:04:23.179 --> 00:04:28.178
whatever showModal currently is,
so this.state.showModal.

72
00:04:29.629 --> 00:04:31.977
So what this function does
whenever you call it,

73
00:04:31.977 --> 00:04:33.995
we're using an arrow function, right?

74
00:04:33.995 --> 00:04:36.291
So to make sure that this
year is always correct.

75
00:04:38.923 --> 00:04:42.168
If modal is true, make it false,
if it's false, make it true.

76
00:04:42.168 --> 00:04:44.302
So just toggling that back and forth.

77
00:04:49.013 --> 00:04:53.288
Okay, let's pull showModal
out of our state.

78
00:04:58.006 --> 00:05:03.178
Okay, down here on our button we're gonna

79
00:05:03.178 --> 00:05:09.077
give it an onClick finally
to be this.showModal

80
00:05:14.878 --> 00:05:19.111
And then below the description,
we're gonna add our show modal logic.

81
00:05:24.209 --> 00:05:27.240
So we're gonna put this
little bit of logic here.

82
00:05:27.240 --> 00:05:33.271
If we're gonna show the modal then we're
gonna put our modal component here and

83
00:05:33.271 --> 00:05:38.330
we're gonna put whatever we want
to display inside of that modal.

84
00:05:40.590 --> 00:05:46.055
So we're gonna put a div,
we're gonna put like an h1,

85
00:05:46.055 --> 00:05:48.977
would you like to adopt name.

86
00:05:55.316 --> 00:06:01.772
Here we're gonna put an a tag
because we're gonna link off site.

87
00:06:01.772 --> 00:06:06.672
I'm just gonna send you to a real pet
adoption side of you and click Yes,

88
00:06:06.672 --> 00:06:12.143
if you cannot adopt my dog I'm reiterating
that if in case there was an obvious,

89
00:06:12.143 --> 00:06:15.430
she's a jerk but she's my jerk, pet-adopt.

90
00:06:15.430 --> 00:06:19.967
This will just send you the pet finder.

91
00:06:21.896 --> 00:06:26.918
Okay, and
if you click no then you're gonna

92
00:06:26.918 --> 00:06:33.721
say we're just gonna close the modal,
this toggle modal.

93
00:06:33.721 --> 00:06:40.406
Okay, so if show modal is true
the show this otherwisewe

94
00:06:40.406 --> 00:06:45.540
just don't wanna show anything, right?

95
00:06:45.540 --> 00:06:47.390
We want nothing to render inside of that.

96
00:06:47.390 --> 00:06:49.003
So we're just gonna put null,

97
00:06:49.003 --> 00:06:52.550
if you tell reactant render null
it just doesn't render anything.

98
00:06:54.540 --> 00:06:55.838
So that's what the null is here.

99
00:07:06.718 --> 00:07:10.955
All right, let me go make
sure that works really quick.

100
00:07:10.955 --> 00:07:13.105
It doesn't, let's figure out why.

101
00:07:24.932 --> 00:07:26.563
See that, this is what I did.

102
00:07:26.563 --> 00:07:31.663
Put showmodal it's supposed
to be togglemodal.

103
00:07:36.749 --> 00:07:41.671
Now that styling little dirty, but
it looks like it's working just fine.

104
00:07:46.179 --> 00:07:47.110
I don't know what I did there.

105
00:07:48.460 --> 00:07:50.870
Button on click buttons,
I didn't put buttons, did I?

106
00:07:50.870 --> 00:07:52.909
Yeah, you're supposed
to put buttons there.

107
00:07:54.798 --> 00:07:57.008
Inside of a div, okay.

108
00:07:57.008 --> 00:08:01.674
So here, put a tag in this in here and

109
00:08:01.674 --> 00:08:06.820
we'll say className equals buttons.

110
00:08:10.300 --> 00:08:11.190
There you go.

111
00:08:11.190 --> 00:08:13.272
Now it looks nice.

112
00:08:13.272 --> 00:08:14.676
Okay.

113
00:08:20.280 --> 00:08:24.250
So let's walk through kind
of what happens here.

114
00:08:26.720 --> 00:08:30.760
The user clicks the button,
I would like to adopt Luna, right?

115
00:08:30.760 --> 00:08:32.940
It calls the togglemodal button.

116
00:08:32.940 --> 00:08:36.760
This says set state to be
the opposite of what it currently is.

117
00:08:36.760 --> 00:08:40.012
So if it's true, or sorry if it's false,
which it is right now,

118
00:08:40.012 --> 00:08:42.500
it's gonna set that to true, right?

119
00:08:42.500 --> 00:08:45.090
When you call set state or
kicks off a rerender.

120
00:08:45.090 --> 00:08:50.073
So it does that, calls render again, this
time showModal is true whereas before it

121
00:08:50.073 --> 00:08:53.960
was false and was just showing no,
which is nothing.

122
00:08:53.960 --> 00:08:55.191
This time t's true.

123
00:08:55.191 --> 00:08:59.838
It's gonna use our modal function,
our modal component and

124
00:08:59.838 --> 00:09:04.303
it's gonna render everything
that we put inside of here,

125
00:09:04.303 --> 00:09:07.140
right, inside of its modal, okay?

126
00:09:07.140 --> 00:09:11.373
And so that's how we get this which is
over everything let's actually take a look

127
00:09:11.373 --> 00:09:12.002
at the DOM.

128
00:09:14.832 --> 00:09:18.808
Notice most of our app is here instead
of route right, the header, the details,

129
00:09:18.808 --> 00:09:22.800
all that stuff is living inside of route
which is where our app is being rendered.

130
00:09:24.040 --> 00:09:25.496
We have modal here though.

131
00:09:25.496 --> 00:09:29.511
Which has div soup and an h1 here and
a div and like our age and

132
00:09:29.511 --> 00:09:34.670
stuff like that, but it's being rendered
outside of the normal DOM right?

133
00:09:34.670 --> 00:09:37.872
It's being rendered in different places,

134
00:09:37.872 --> 00:09:42.379
despite the fact that the component
is all living in one spot.

135
00:09:42.379 --> 00:09:47.259
So let me explain to you why I think
this is even cooler than you might think

136
00:09:47.259 --> 00:09:48.303
it be already.

137
00:09:48.303 --> 00:09:52.390
One, I am referencing state directly
from this component, right?

138
00:09:53.780 --> 00:09:57.182
So I don't have to use like Redux
to like message the name over and

139
00:09:57.182 --> 00:09:58.550
which URL to go to.

140
00:09:58.550 --> 00:10:00.777
I get to like render it contextually,
right,

141
00:10:00.777 --> 00:10:04.730
with all the information that I
already have from the state here.

142
00:10:04.730 --> 00:10:10.451
So one, that's very cool.

143
00:10:10.451 --> 00:10:14.442
Two, something else that you wouldn't
necessarily expect, if I fire

144
00:10:14.442 --> 00:10:18.915
an event here, so let's say I have some
sort of, well, let's let's do this.

145
00:10:18.915 --> 00:10:20.072
Just.

146
00:10:23.809 --> 00:10:31.430
Unclick E console.Log e.

147
00:10:35.273 --> 00:10:38.987
Is it just getting mad at me for ES lint?

148
00:10:38.987 --> 00:10:42.204
Yeah, I think this should work.

149
00:10:47.514 --> 00:10:51.917
So, notice that I clicked somewhere
on here and event bubbling, right,

150
00:10:51.917 --> 00:10:56.462
that react is still lets you do event
bubbling even though I don't typically

151
00:10:56.462 --> 00:10:59.034
recommend it normally you don't need to.

152
00:10:59.034 --> 00:11:04.664
Anyway, whatever, it's fine, you can use
event bubbling it's available to you.

153
00:11:04.664 --> 00:11:07.382
Now, event bubbling should not
work on this modal, right,

154
00:11:07.382 --> 00:11:09.514
because it lives in
a different part of the DOM so

155
00:11:09.514 --> 00:11:12.045
therefore it should bubble
through a different track.

156
00:11:12.045 --> 00:11:16.591
But this because this is reactional this
in the same react tree, if I click on

157
00:11:16.591 --> 00:11:20.782
this, I still get event bubbling
despite the fact that this is here and

158
00:11:20.782 --> 00:11:23.715
this is rendering to
a different part of the DOM.

159
00:11:25.570 --> 00:11:27.190
That's wild, right?

160
00:11:27.190 --> 00:11:29.680
Cuz it's bubbling through like a portal,
right?

161
00:11:31.400 --> 00:11:32.663
I think it's kind of cool.

162
00:11:34.752 --> 00:11:38.041
The reason why that works is despite the
fact that this lives in different part of

163
00:11:38.041 --> 00:11:39.970
the DOM tree,
it lives in the same React tree.

164
00:11:39.970 --> 00:11:42.981
And we're not dealing with the DOM
we're dealing with the React synthetic

165
00:11:42.981 --> 00:11:43.610
event system.

166
00:11:43.610 --> 00:11:45.790
So this is actually going
through a different tree,

167
00:11:45.790 --> 00:11:48.126
despite the fact that they
render in different places.

168
00:11:50.413 --> 00:11:52.080
I don't know why that
would ever be useful.

169
00:11:52.080 --> 00:11:56.371
[LAUGH] I'm just
technologically impressed by it.

170
00:12:00.306 --> 00:12:06.000
Okay, so
as soon as I click adopt on Luna here,

171
00:12:06.000 --> 00:12:10.020
I click No, and it goes away.

172
00:12:10.020 --> 00:12:13.834
Right, because here I'm saying
toggle modal again, at that point,

173
00:12:13.834 --> 00:12:15.200
it arrives back to here.

174
00:12:16.600 --> 00:12:22.030
And it removes i from that, right, which
is what the modal code that we wrote did.

175
00:12:24.260 --> 00:12:27.910
So, I think if you remove this,
so let's just remove that.

176
00:12:27.910 --> 00:12:33.680
And we refreshed and we clicked the adopt,
I just don't think it would go away fully.

177
00:12:33.680 --> 00:12:34.790
It wouldn't, right?

178
00:12:34.790 --> 00:12:37.110
Because nothing's removing that DOM,
right?

179
00:12:37.110 --> 00:12:39.452
All the React stuff is going away, right?

180
00:12:39.452 --> 00:12:44.565
But the actual component there is not,
right, so

181
00:12:44.565 --> 00:12:52.137
that's what this does is this removes
the final div from that container.

182
00:12:53.839 --> 00:12:56.939
So now if we go back and
try it again and we dropped Luna, no,

183
00:12:56.939 --> 00:13:00.974
it fully goes away because that last data
is being fully removed from the DOM.

184
00:13:07.358 --> 00:13:13.951
And yes, if you click, yes, it hopefully
it should take you to pet finder.

185
00:13:17.707 --> 00:13:22.189
Okay, this is about the most advanced
thing that I can teach you in react in

186
00:13:22.189 --> 00:13:25.880
terms of like,
things conceivably you might need to use.

187
00:13:25.880 --> 00:13:29.006
There's a bunch of like more
advanced stuff to do in react but

188
00:13:29.006 --> 00:13:31.290
it's almost all for like library authors.

189
00:13:31.290 --> 00:13:34.636
So like if you're writing like styled
components or a motion or something like

190
00:13:34.636 --> 00:13:38.420
that, they have some additional
lower level hooks that you can use.

191
00:13:38.420 --> 00:13:40.590
You almost never need to use them.

192
00:13:40.590 --> 00:13:44.692
But ref can be useful sometimes,
portals can be useful, maybe a handful of

193
00:13:44.692 --> 00:13:49.070
other things, but pretty much everything
else you don't have to worry about.

194
00:13:51.150 --> 00:13:54.262
&gt;&gt; I have a question about
the rendering of the modal, but

195
00:13:54.262 --> 00:13:56.970
I'm not exactly sure how to word it.

196
00:13:56.970 --> 00:13:57.580
But it has to.

197
00:13:57.580 --> 00:13:58.670
&gt;&gt; Just go for it.

198
00:13:58.670 --> 00:14:01.990
&gt;&gt; It has to do with
the cleanup that we're doing.

199
00:14:01.990 --> 00:14:06.838
I know we're using that use
effect to destroy it but

200
00:14:06.838 --> 00:14:13.490
we get that like split second where
we clear out the content in React and

201
00:14:13.490 --> 00:14:17.808
then we destroy the actual child and
the DOM.

202
00:14:17.808 --> 00:14:21.640
why do we need to clear out that content?

203
00:14:21.640 --> 00:14:25.566
Couldn't we just destroy the child and
the DOM?

204
00:14:25.566 --> 00:14:26.860
Does that kind of make sense?

205
00:14:30.010 --> 00:14:30.520
&gt;&gt; I think so.

206
00:14:32.230 --> 00:14:35.137
So when you simply unrender the modal,

207
00:14:35.137 --> 00:14:40.170
why do you have to go one step further and
delete the parent element?

208
00:14:41.910 --> 00:14:42.410
&gt;&gt; I think so.

209
00:14:43.670 --> 00:14:44.407
&gt;&gt; Basically,

210
00:14:44.407 --> 00:14:48.630
we have to hand something to react as
like you can render into this, right?

211
00:14:48.630 --> 00:14:53.080
That's what this create portal does is
we're saying this Lref.current which is

212
00:14:53.080 --> 00:14:56.580
this div that we create and
then later destroy, right?

213
00:14:56.580 --> 00:15:00.540
We're handing this to react was like
here's your place to render, right?

214
00:15:00.540 --> 00:15:06.190
So we have to create one so
that later we can render into it.

215
00:15:06.190 --> 00:15:11.646
And then later when we go back to unrender
that modal we have to then destroy it or

216
00:15:11.646 --> 00:15:17.445
we end up with that problem where you saw
where the outer most diff doesn't go away.

217
00:15:18.795 --> 00:15:22.655
But it's basically creating a container
for reactors like here's your safe place,

218
00:15:22.655 --> 00:15:24.975
and then you just burn
the safe place to the ground.

219
00:15:27.315 --> 00:15:30.376
I'm mixing analogies here, but

220
00:15:30.376 --> 00:15:36.135
it's necessary technical constraint,
it's a weird API.

221
00:15:36.135 --> 00:15:38.811
I'm gonna be the first
one to tell you that but

222
00:15:38.811 --> 00:15:43.820
that's where they found that they could do
it that was like performance and useful.

223
00:15:43.820 --> 00:15:49.233
I don't know if I have a better

224
00:15:49.233 --> 00:15:56.620
answer than that, but good question.

225
00:15:56.620 --> 00:16:00.164
For refs,
let's say you work at a company and

226
00:16:00.164 --> 00:16:05.762
has like a bunch of legacy infrastructure
that was all built in jQuery,

227
00:16:05.762 --> 00:16:10.070
right, I've worked at
several companies like that.

228
00:16:11.445 --> 00:16:13.934
I had to write connecting
layers between react and

229
00:16:13.934 --> 00:16:18.505
jQuery to get take react state and
somehow pass it into like a jQuery plugin.

230
00:16:18.505 --> 00:16:22.541
So I imagine some of you unfortunately
will probably have to do that or

231
00:16:22.541 --> 00:16:27.207
like when you're migrating between a
legacy Angular application to a new React

232
00:16:27.207 --> 00:16:30.362
application, you have to
do some sort of interrupt.

233
00:16:30.362 --> 00:16:31.830
Ref, so your best friend.

234
00:16:33.450 --> 00:16:37.562
So basically what you can do is you
can have your react element wrap like

235
00:16:37.562 --> 00:16:39.243
a angular mini app, right?

236
00:16:39.243 --> 00:16:44.672
And you can use a ref to reference a DOM
element that you can tell angular or

237
00:16:44.672 --> 00:16:47.967
backbone or jQuery to render into, right?

238
00:16:47.967 --> 00:16:53.228
And then you can pass data from your
React application into whatever

239
00:16:53.228 --> 00:16:59.332
DOM elements that you have created for
Angular or whatever or jQuery, right?

240
00:16:59.332 --> 00:17:03.497
So this kind of pattern you probably
wouldn't even use a portal, right, but

241
00:17:03.497 --> 00:17:05.175
you'd be using refs, right?

242
00:17:05.175 --> 00:17:09.527
So I won't get too much more into it
than that but just know that refs

243
00:17:09.527 --> 00:17:15.070
are super useful for interoperability
between react and other libraries.

244
00:17:15.070 --> 00:17:17.120
Definitely never do that on purpose,
right?

245
00:17:17.120 --> 00:17:20.015
But sometimes we it's necessary for

246
00:17:20.015 --> 00:17:25.250
interoperability between like
in migration kind of situations.

247
00:17:26.880 --> 00:17:27.736
Yeah, Mark.

248
00:17:27.736 --> 00:17:32.021
&gt;&gt; What about being able
to click outside the modal?

249
00:17:33.366 --> 00:17:34.248
&gt;&gt; Yeah, good question.

250
00:17:34.248 --> 00:17:37.650
And that stuff you would
all handle here in modal,

251
00:17:37.650 --> 00:17:40.901
I kind of kept modal this
most simple possible.

252
00:17:40.901 --> 00:17:45.361
I guess what you would do
is you'd pass into modal,

253
00:17:45.361 --> 00:17:49.735
you could pass in like
the Togglemodal function.

254
00:17:49.735 --> 00:17:55.585
Let's just see if I can
do it really quick.

255
00:17:55.585 --> 00:18:02.308
And here, you pass into your modal.

256
00:18:02.308 --> 00:18:06.517
Sorry, not here it's in details.

257
00:18:06.517 --> 00:18:09.484
ToggleModal equals don't, stop it.

258
00:18:14.029 --> 00:18:18.701
Okay, and so now here inside of modal,
I now have this function that I got for

259
00:18:18.701 --> 00:18:22.573
my parent, that allows me to toggle
the modal whenever I need to

260
00:18:25.348 --> 00:18:29.177
So here what I would have to do is have to
like restructure the CSS in such that, if

261
00:18:29.177 --> 00:18:32.965
I could make that a React component that
I could click on and therefore remove.

262
00:18:44.326 --> 00:18:46.600
I don't think this is gonna work.

263
00:18:48.334 --> 00:18:49.321
We'll see what happens.

264
00:18:51.702 --> 00:18:56.049
So it's not this it's just Togglemodal.

265
00:19:03.436 --> 00:19:05.048
Yeah, so you'd have to make,

266
00:19:05.048 --> 00:19:08.520
like right now I'm using that
outermost div that we're adding and

267
00:19:08.520 --> 00:19:12.370
removing to the DOM and that's what
I'm rendering with the black there.

268
00:19:12.370 --> 00:19:16.086
I'd have to like, make one more layer on
top of that so that I could actually make

269
00:19:16.086 --> 00:19:20.250
this black area clickable and
then I could say this .Togglemodal.

270
00:19:20.250 --> 00:19:24.390
So, I would pass in a event handler
from the parent into the child and

271
00:19:24.390 --> 00:19:27.000
then I would do it that way.

272
00:19:27.000 --> 00:19:28.223
That's how you would do it.

273
00:19:31.065 --> 00:19:33.491
But I don't wanna make you wait for

274
00:19:33.491 --> 00:19:38.101
ten minutes while I figure out my
damn CSS, no one wants to watch.

275
00:19:38.101 --> 00:19:39.632
That is not entertaining TV.

