WEBVTT

1
00:00:00.080 --> 00:00:04.763
Hopefully I've made you feel sufficiently
gross by writing code in a script tag.

2
00:00:04.763 --> 00:00:08.373
We're gonna put move it into
a different file now but

3
00:00:08.373 --> 00:00:12.064
I just wanted to strip it down
to the most basic thing so

4
00:00:12.064 --> 00:00:15.938
that you could see that there's
no magic going on here.

5
00:00:15.938 --> 00:00:19.230
We're gonna pile the magic on here
as we go further and further.

6
00:00:19.230 --> 00:00:22.830
The first one is going to be looking from
a different JavaScript file, very magical.

7
00:00:22.830 --> 00:00:26.284
So please make a file here called App.js.

8
00:00:31.114 --> 00:00:35.270
Okay, just copy that business.

9
00:00:35.270 --> 00:00:37.992
I'll cut,
get rid of that script tag altogether.

10
00:00:41.060 --> 00:00:46.444
Actually, you will need
a script cuz you'll

11
00:00:46.444 --> 00:00:51.837
need the source = ./App.js, like that.

12
00:00:51.837 --> 00:00:55.460
So, these two can be in either
order it does not matter.

13
00:00:55.460 --> 00:00:57.210
This one has to be last.

14
00:00:57.210 --> 00:01:02.358
So make sure that App.js one is at the
bottom one, needs to be the bottom one.

15
00:01:02.358 --> 00:01:06.280
I'm saying a couple times, just so people
understand has to be the bottom one, okay?

16
00:01:11.028 --> 00:01:12.210
Paste that in here.

17
00:01:13.490 --> 00:01:16.514
You might have wondered what caused all
of my code to rearrange itself, and

18
00:01:16.514 --> 00:01:17.290
make it look nice.

19
00:01:17.290 --> 00:01:19.921
It's a thing called prettier.

20
00:01:19.921 --> 00:01:24.010
I will be showing you how to
use that in three sections.

21
00:01:24.010 --> 00:01:28.414
So for now, if you don't have it
installed just make it look nice and

22
00:01:28.414 --> 00:01:31.920
then I'll show you how to
automatically do that.

23
00:01:31.920 --> 00:01:35.210
So we're gonna create another
class of components here.

24
00:01:35.210 --> 00:01:38.460
We're gonna be creating the Accords.

25
00:01:38.460 --> 00:01:41.542
I'm hopefully will not overuse
that Honda metaphor too much but

26
00:01:41.542 --> 00:01:44.181
I'm entertaining myself so
I'm gonna keep doing it.

27
00:01:44.181 --> 00:01:47.771
Okay, we're gonna make another
function here called Pet.

28
00:01:47.771 --> 00:01:52.207
It's gonna be another function and
it's going to return,

29
00:01:54.694 --> 00:01:58.284
React.createElement.

30
00:01:58.284 --> 00:02:00.990
And we're gonna put in a div here.

31
00:02:02.800 --> 00:02:06.334
Empty object or null,
both of those are fine with me.

32
00:02:06.334 --> 00:02:09.532
And then we are going to
be giving it an array here.

33
00:02:13.422 --> 00:02:17.451
Cuz it's gonna have multiple children so
you have to give it an array of children.

34
00:02:17.451 --> 00:02:21.879
But you also could just do comma
separated without the array.

35
00:02:21.879 --> 00:02:24.775
So could actually just have
multiple parameters and

36
00:02:24.775 --> 00:02:26.893
it would just list those as children.

37
00:02:26.893 --> 00:02:29.263
Again, variable arity here as well.

38
00:02:29.263 --> 00:02:31.717
Let's just do arrays here because
that's actually what JSX does

39
00:02:31.717 --> 00:02:32.573
underneath the hood.

40
00:02:32.573 --> 00:02:36.669
So I'm gonna show you kind of closest to
what our tools are gonna eventually end up

41
00:02:36.669 --> 00:02:37.403
doing for us.

42
00:02:42.553 --> 00:02:45.630
In other words, we're splitting hairs here
and actually, it really doesn't matter.

43
00:02:45.630 --> 00:02:51.818
[LAUGH] createElement,
we're gonna put an h1 here.

44
00:02:51.818 --> 00:02:56.201
It's gonna be an empty object and
we're gonna put the name of our animal.

45
00:02:56.201 --> 00:02:58.531
So you're welcome to put your
own favorite pet in here.

46
00:02:58.531 --> 00:03:02.358
I'm gonna put Luna because she
is objectively the best dog and

47
00:03:02.358 --> 00:03:03.835
also the worst, okay?

48
00:03:03.835 --> 00:03:07.470
And then I'm just gonna clone
that line two times here.

49
00:03:08.650 --> 00:03:12.840
These two, I'm gonna make an h2.

50
00:03:12.840 --> 00:03:16.700
So I made both line 5 here and
line 6, an h2.

51
00:03:18.310 --> 00:03:23.680
And Luna is a dog, and
she is of a breed Havanese.

52
00:03:23.680 --> 00:03:24.810
It rearranged that.

53
00:03:24.810 --> 00:03:30.010
So, we have a div inside of
that div is an array of an h1,

54
00:03:30.010 --> 00:03:35.260
h2 and an h2 with the dog name
of Luna dog and Havanese.

55
00:03:35.260 --> 00:03:42.219
So we have another class of components
here called the Pet component, okay?

56
00:03:42.219 --> 00:03:48.564
So, here in our app,
we're gonna make this an array and

57
00:03:48.564 --> 00:03:55.048
we're gonna move our existing
h1 into here of Adopt Me.

58
00:03:55.048 --> 00:03:59.197
And then we're gonna
have React.createElement,

59
00:03:59.197 --> 00:04:02.220
and we're gonna put a Pet component.

60
00:04:04.730 --> 00:04:07.026
And for good measure,
let's just put three of them.

61
00:04:10.268 --> 00:04:11.480
And it rearranges it again.

62
00:04:11.480 --> 00:04:14.210
So we have a div, that's an array.

63
00:04:14.210 --> 00:04:15.999
The first one is an h1
here of Adopt Me and

64
00:04:15.999 --> 00:04:18.930
then we're creating three
instances of the Pet.

65
00:04:18.930 --> 00:04:21.295
So going back to the rubber stamp analogy,

66
00:04:21.295 --> 00:04:23.931
we're stamping the stamp three times,
okay?

67
00:04:23.931 --> 00:04:29.579
So ask yourself, what do I expect
to see when I go over to the DOM?

68
00:04:32.286 --> 00:04:35.910
So let's just work backwards,
what's gonna get rendered out here?

69
00:04:35.910 --> 00:04:40.259
We have an app, all right, which is this,
so we're gonna render an app out.

70
00:04:40.259 --> 00:04:41.790
That's gonna be a div.

71
00:04:41.790 --> 00:04:45.373
Inside of that div,
there's gonna be an h1 with the Adopt Me.

72
00:04:45.373 --> 00:04:47.489
We're gonna have a cool little
logo that we made before.

73
00:04:47.489 --> 00:04:50.290
And then underneath that we're
gonna have a Pet component.

74
00:04:50.290 --> 00:04:53.250
So we have to go down here and
look at what's a pet, right?

75
00:04:54.280 --> 00:04:58.698
That pet returns a div and
inside of an h1 and h2 and h2,

76
00:04:58.698 --> 00:05:02.400
right, with Luna dog Havanese, right?

77
00:05:02.400 --> 00:05:03.810
We're doing that three times.

78
00:05:03.810 --> 00:05:05.800
So how many times do you think
it's gonna say Luna on the page?

79
00:05:07.650 --> 00:05:09.070
Three times, right?

80
00:05:09.070 --> 00:05:13.099
And it's gonna say dogs three times and
it's gonna say Havanese three times.

81
00:05:13.099 --> 00:05:15.470
Let's go see if that's right.

82
00:05:17.430 --> 00:05:19.847
Luna dog Havanese,
Luna dog Havanese, right?

83
00:05:22.701 --> 00:05:25.368
So, starting to get a little bit further
into the programming milestone is

84
00:05:25.368 --> 00:05:27.229
hopefully starting to see
a little bit like, okay,

85
00:05:27.229 --> 00:05:30.120
I can see where this is starting
to get a little bit more useful.

86
00:05:30.120 --> 00:05:34.880
I still could have written this as
HTML is significantly easier, but

87
00:05:34.880 --> 00:05:36.201
step by step here.

88
00:05:36.201 --> 00:05:38.328
Something I'm gonna call out right now,

89
00:05:38.328 --> 00:05:42.790
is you're gonna see here in your console
some warnings, that's expected, right?

90
00:05:42.790 --> 00:05:46.740
So don't worry about those for now,
I will show you later how to fix those.

91
00:05:46.740 --> 00:05:49.600
But that's just react being
helpful with its developer tools.

92
00:05:49.600 --> 00:05:51.445
If you shipped this and
built it for production,

93
00:05:51.445 --> 00:05:56.992
it would not show you that anymore,
Cuz we're using the development version.

94
00:05:56.992 --> 00:06:01.661
The TLDR of why it's doing
that is by saying hey you're

95
00:06:01.661 --> 00:06:04.107
rendering Pet three times.

96
00:06:04.107 --> 00:06:08.018
And if you tried to swap them I wouldn't
understand if you swapped them.

97
00:06:08.018 --> 00:06:11.214
So therefore, I would destroy everything
and re-render from the bottom up.

98
00:06:11.214 --> 00:06:15.307
So like if you give me a special key that
I can say like is this the same one and

99
00:06:15.307 --> 00:06:17.610
it can detect that and follow that.

100
00:06:17.610 --> 00:06:21.071
Then I'll just move the DOM instead
of creating and destroying it,

101
00:06:21.071 --> 00:06:22.597
which is way faster, right?

102
00:06:22.597 --> 00:06:24.660
It's trying to help you
with that practice.

103
00:06:24.660 --> 00:06:26.797
That's the idea and
I'll show you how to do that.

104
00:06:26.797 --> 00:06:29.430
So, but that's what the warning is about.

105
00:06:29.430 --> 00:06:34.224
Still it'd be really cool if there
are other pets besides Luna.

106
00:06:34.224 --> 00:06:37.668
She is objectively the goodest girl,
right, but

107
00:06:37.668 --> 00:06:42.040
it'd be cool if there were
other pets available for us.

108
00:06:42.040 --> 00:06:45.097
So let's make our Pet component flexible,

109
00:06:45.097 --> 00:06:48.240
as opposed to being just
the Luna component.

110
00:06:48.240 --> 00:06:49.779
Let's make it an actual Pet component.

111
00:06:51.710 --> 00:06:57.087
So this Pet function can accept
something called props, right?

112
00:06:57.087 --> 00:07:02.008
As you might guess properties, is what
that stands for but we all call a prop so

113
00:07:02.008 --> 00:07:03.839
you can just take the props.

114
00:07:03.839 --> 00:07:07.999
So instead of just rendering out
whatever string we put here,

115
00:07:07.999 --> 00:07:13.129
we can actually just say give me
whatever comes in from props.name, okay?

116
00:07:13.129 --> 00:07:18.157
Instead of dog,
we'll have a be props.animal, and

117
00:07:18.157 --> 00:07:23.640
instead of Havanese,
we'll have a be props.breed.

118
00:07:23.640 --> 00:07:27.230
Now this Pet component became flexible,
right?

119
00:07:27.230 --> 00:07:30.564
And now, instead of having to
render the same thing three times,

120
00:07:30.564 --> 00:07:33.183
we can actually use it to
render different things.

121
00:07:33.183 --> 00:07:36.920
And we're gonna use this empty object
that we've been ignoring up until now.

122
00:07:36.920 --> 00:07:41.389
So we're gonna give empty object and
we're gonna say name Luna.

123
00:07:43.730 --> 00:07:48.026
Animal Dog and

124
00:07:48.026 --> 00:07:55.439
breed, Havanese.

125
00:07:55.439 --> 00:07:58.833
And now this is going
to be passed into this.

126
00:07:58.833 --> 00:08:03.350
And we'll actually have some
sort of flexible component here.

127
00:08:05.270 --> 00:08:12.590
So let's go do that two more times here
and we can make three different pets now.

128
00:08:12.590 --> 00:08:17.420
So I'm gonna do the bird that
I had as a child, Pepper.

129
00:08:17.420 --> 00:08:20.650
I was a very creative child, I named
my black and white cockatiel Pepper.

130
00:08:24.027 --> 00:08:25.289
That's not a creative child.

131
00:08:25.289 --> 00:08:27.362
I was like, it looks like pepper
we're gonna call it Pepper.

132
00:08:31.329 --> 00:08:32.898
And Pepper was a cockatiel.

133
00:08:32.898 --> 00:08:37.371
Yeah, and then I named this after
my friend's cat cuz Doink is

134
00:08:37.371 --> 00:08:41.597
objectively the funniest name for
a cat I've ever heard.

135
00:08:41.597 --> 00:08:46.858
It's cuz the cat will just like run into
the wall, Doink just doing the wall again.

136
00:08:46.858 --> 00:08:50.315
Doink is a cat and
Doink was some sort of mixed breed.

137
00:08:50.315 --> 00:08:52.328
I could not tell her where
that cat have ever came from.

138
00:08:54.920 --> 00:08:57.188
From the cat though, okay?

139
00:08:57.188 --> 00:09:01.528
So now you have to ask yourself,
what do I think is gonna happen?

140
00:09:01.528 --> 00:09:06.021
Well, it's gonna be relatively the same
thing but instead of Luna dog Havanese but

141
00:09:06.021 --> 00:09:08.847
underneath that'll have
Pepper Bird Cockatiel and

142
00:09:08.847 --> 00:09:10.724
have Doink Cat Mix underneath it.

143
00:09:10.724 --> 00:09:16.784
Refresh the page and you can see that
is happening exactly the same way,

144
00:09:16.784 --> 00:09:19.010
that we thought it would.

145
00:09:19.010 --> 00:09:22.686
So the flow of information
here is pretty obvious, right?

146
00:09:22.686 --> 00:09:25.810
It's going from the parent component
down to the child component.

147
00:09:27.450 --> 00:09:31.808
Again, one of my favorite things about
React is this is called the one way

148
00:09:31.808 --> 00:09:35.537
data flow, which definitely not and
I think React invented.

149
00:09:35.537 --> 00:09:40.232
But it's definitely a thing that React
popularized that kind of basically every

150
00:09:40.232 --> 00:09:42.870
other framework kind
of adopted after that.

151
00:09:42.870 --> 00:09:45.034
And you'll find that if
you've ever in Angular,

152
00:09:45.034 --> 00:09:47.867
Ember you're gonna find a lot of
things that are very familiar and

153
00:09:47.867 --> 00:09:51.187
that's either because React stole it
from them or they stole it from React.

154
00:09:51.187 --> 00:09:53.787
And everyone stole from computer
scientists in the 70s, and

155
00:09:53.787 --> 00:09:55.957
they stole it from people in like the 60s,
right?

156
00:09:55.957 --> 00:10:00.623
And it's just a chain of people
stealing people's ideas.

157
00:10:00.623 --> 00:10:02.177
In other words, it's all great,

158
00:10:02.177 --> 00:10:05.180
it's all just whatever your
favorite shape of writing it is.

159
00:10:05.180 --> 00:10:07.684
I happen to like the shape.

160
00:10:07.684 --> 00:10:12.403
But yes, data flows from the parent,
the parent being App, right?

161
00:10:12.403 --> 00:10:17.270
App is the parent component of Pet
because the App is rendering Pet, right?

162
00:10:17.270 --> 00:10:19.590
So data flows from
the parent to the child.

163
00:10:19.590 --> 00:10:24.020
So it moves from here to here,
right, via props.

164
00:10:24.020 --> 00:10:25.223
Now you might ask is like,

165
00:10:25.223 --> 00:10:28.510
what happens if I have something that
pet needs to do with App, right?

166
00:10:28.510 --> 00:10:30.219
How does the data flow up?

167
00:10:30.219 --> 00:10:32.058
It doesn't.

168
00:10:32.058 --> 00:10:34.194
And you might say like,
that seems like it's annoying.

169
00:10:34.194 --> 00:10:38.416
And when you're kind of learning the
paradigm it is because sometimes you're,

170
00:10:38.416 --> 00:10:43.170
well, I want to be able to have my child
component affect my parent component.

171
00:10:43.170 --> 00:10:45.011
It's by design that you can't.

172
00:10:45.011 --> 00:10:50.900
If I have a bug inside of App,
I know that pet didn't cause it, right?

173
00:10:50.900 --> 00:10:54.731
By definition, because pet can't
affect App, and therefore,

174
00:10:54.731 --> 00:10:59.393
when I go start debugging, I can just rule
out that entire section of the code and

175
00:10:59.393 --> 00:11:01.292
I don't have to worry about it.

176
00:11:01.292 --> 00:11:03.553
That is great.

177
00:11:03.553 --> 00:11:08.580
[LAUGH] It makes debugging
significantly easier because just

178
00:11:08.580 --> 00:11:13.614
rule out entire sections just
by the way that the app exists.

179
00:11:13.614 --> 00:11:16.858
Now your next question is like, okay,
really how do I make Pet do something?

180
00:11:16.858 --> 00:11:19.213
That it's like there are ways
there's things called context.

181
00:11:19.213 --> 00:11:20.459
There's Redux.

182
00:11:20.459 --> 00:11:23.823
There is other things that
I can show you later, but

183
00:11:23.823 --> 00:11:27.460
it hacks around things
that you have to do.

184
00:11:27.460 --> 00:11:28.909
In general, you want it to work like this.

185
00:11:28.909 --> 00:11:30.654
You want the data to flow one way.

186
00:11:30.654 --> 00:11:32.637
And the other thing is like,

187
00:11:32.637 --> 00:11:36.698
the data's very obvious how it
got from point a to point b.

188
00:11:36.698 --> 00:11:41.561
It's not mysterious how
Luna Dog Havanese got here because I

189
00:11:41.561 --> 00:11:45.700
can see it went in here and came out here.

190
00:11:45.700 --> 00:11:49.927
This was one of my biggest
complaints about AngularJS1,

191
00:11:49.927 --> 00:11:54.670
is that you would have something
bound to the scope and you'd be,

192
00:11:54.670 --> 00:11:58.571
I have no idea where this
changed in the code, right?

193
00:11:58.571 --> 00:12:02.740
If you've ever written any amount of like
AngularJS1, you'll know this to a data

194
00:12:02.740 --> 00:12:06.450
binding pain that I'm talking about,
this change to be something else.

195
00:12:06.450 --> 00:12:09.446
And that could have happened in
the service or the other service or

196
00:12:09.446 --> 00:12:12.890
could have happened in the controller or
could have happened in the model.

197
00:12:12.890 --> 00:12:15.982
There's just a trillion places
that could have happened.

198
00:12:15.982 --> 00:12:20.877
And then React specifically responded to
that kind of pain that that Angular was

199
00:12:20.877 --> 00:12:22.202
causing at the time.

200
00:12:22.202 --> 00:12:22.783
It was magical.

201
00:12:22.783 --> 00:12:25.794
I wrote a lot of really productive
code that no one wanted to

202
00:12:25.794 --> 00:12:27.828
maintain cuz it was terrible, right?

203
00:12:27.828 --> 00:12:30.774
And that's what React were
trying to avoid here.

204
00:12:30.774 --> 00:12:37.025
It's verbose but it does that so that it's
easy to maintain and that's worth it.

205
00:12:37.025 --> 00:12:40.453
Because I'd rather have a harder time
reading the code the first time and

206
00:12:40.453 --> 00:12:43.993
an easier time understanding of the second
time than rather the opposite of

207
00:12:43.993 --> 00:12:45.730
that, right?

208
00:12:45.730 --> 00:12:46.768
That's my point.

209
00:12:46.768 --> 00:12:50.867
React has been meant to be
maintainable over being easy to write.

210
00:12:50.867 --> 00:12:51.578
Youll hear me writing a lot.

211
00:12:51.578 --> 00:12:54.686
That's why I say that like you're gonna
be the same, this could have been done so

212
00:12:54.686 --> 00:12:56.711
much more easily and
it definitely could have been.

213
00:12:56.711 --> 00:12:59.931
But again,
we're the verbosity is by design.

214
00:12:59.931 --> 00:13:02.882
So we've reached our first
checkpoint in the code.

215
00:13:02.882 --> 00:13:04.098
So if you've fallen behind and

216
00:13:04.098 --> 00:13:06.872
I'll show you just kind of here what
it looks like in the course notes.

217
00:13:06.872 --> 00:13:09.333
If you see this little
checkered flag down here,

218
00:13:09.333 --> 00:13:11.502
that means like you've hit a checkpoint.

219
00:13:11.502 --> 00:13:17.201
If you've fallen behind or you just want
to see how I did it, you can click here,

220
00:13:17.201 --> 00:13:21.897
and you can go in and you can see
this is what my App.js looks like.

221
00:13:21.897 --> 00:13:25.658
This is what the index HTML is,
so on and so forth, right?

222
00:13:27.858 --> 00:13:30.984
And if you've fallen behind just copy and
paste all that over.

223
00:13:30.984 --> 00:13:34.861
Where you can just copy the pieces
of code that you had missing or

224
00:13:34.861 --> 00:13:38.170
something useful that I'll
kind of throw out there.

225
00:13:38.170 --> 00:13:42.500
You can use something, I have
Kaleidoscope to happen on this computer.

226
00:13:42.500 --> 00:13:50.060
But some sort of div comparing thing
like Kaleidoscope app is one of them.

227
00:13:50.060 --> 00:13:50.774
That's the one that I use.

228
00:13:50.774 --> 00:13:53.589
It's expensive, but
I actually really like it.

229
00:13:53.589 --> 00:13:55.862
And you can just say,
compare this folder to this folder and

230
00:13:55.862 --> 00:13:57.998
it'll show you like a git diff
between the two of them and

231
00:13:57.998 --> 00:14:00.393
you can see what's changed
between the two different steps.

232
00:14:00.393 --> 00:14:01.180
It's also pretty cool.

