WEBVTT

1
00:00:00.000 --> 00:00:04.970
So far we've talked about you state, which
I'm gonna say is like the one that you use

2
00:00:04.970 --> 00:00:09.330
the most, it's the hook that you're
gonna use the most inside of react.

3
00:00:09.330 --> 00:00:13.595
The second one that you'll use very
frequently is element called the Pet.

4
00:00:13.595 --> 00:00:17.425
Everything after those two,
it's a long tail, right?

5
00:00:17.425 --> 00:00:20.718
You state and use effect 99% of
what you need react hooks for

6
00:00:20.718 --> 00:00:23.452
everything else is a pretty
specialized use case.

7
00:00:23.452 --> 00:00:26.065
If you do wanna dig into all of them,

8
00:00:26.065 --> 00:00:29.638
I teach all of the hooks
in intermediate react and

9
00:00:29.638 --> 00:00:35.587
you can actually go through one by one and
learn what each one of them does, okay.

10
00:00:35.587 --> 00:00:41.824
So let's head back to search paras for
a second.

11
00:00:41.824 --> 00:00:45.995
I am gonna do use state and
then we are gonna create,

12
00:00:45.995 --> 00:00:50.176
import another hook called
use effect from react.

13
00:00:50.176 --> 00:00:54.548
Remember, when I was talking about
don't do side effects inside of react,

14
00:00:54.548 --> 00:00:56.201
use effect is like a little.

15
00:00:56.201 --> 00:00:59.082
A function that you can like
wrapped around something to say

16
00:00:59.082 --> 00:01:02.726
like okay here's we're gonna do things
that are gonna call out to API's.

17
00:01:02.726 --> 00:01:08.185
Or do other kinds of stateful things are
gonna live outside of your component and

18
00:01:08.185 --> 00:01:11.865
then we're also gonna
import pet from./pet here.

19
00:01:14.578 --> 00:01:17.880
Okay, we're gonna have another
piece of use state here.

20
00:01:22.494 --> 00:01:27.444
Const [pets, setpets] = use state and
it's going to be

21
00:01:27.444 --> 00:01:32.709
an empty array So
we're gonna call out to our API.

22
00:01:32.709 --> 00:01:36.972
We have like a little developer
API that you can just hammer.

23
00:01:36.972 --> 00:01:44.109
It's just gonna return to you fake dummy
data of pets that you could adopt, right?

24
00:01:44.109 --> 00:01:47.469
And here underneath all of this,
we're gonna do a use effect.

25
00:01:47.469 --> 00:01:52.355
And when I give that a function In
this is a function that's going to be

26
00:01:52.355 --> 00:01:55.149
called outside of the render, right.

27
00:01:55.149 --> 00:01:58.532
So basically you're registering a function
to be called later as essentially what

28
00:01:58.532 --> 00:01:59.122
it's doing.

29
00:01:59.122 --> 00:02:00.944
Kind of like a an event listener, right?

30
00:02:00.944 --> 00:02:02.920
Where you're not executing
that function right away.

31
00:02:02.920 --> 00:02:06.073
You're waiting for something to happen
first, are you waiting for a click or

32
00:02:06.073 --> 00:02:07.347
key up or something like that?

33
00:02:07.347 --> 00:02:11.544
That's what an effect is basically saying
like to finish my rendering function.

34
00:02:11.544 --> 00:02:16.592
Then call my effect which will, go fetch
some data from an API and then come back.

35
00:02:16.592 --> 00:02:21.828
Okay, and we're gonna make

36
00:02:21.828 --> 00:02:28.815
a function here called request pets.

37
00:02:28.815 --> 00:02:35.320
That's gonna go out to an API and
then that's is going to call set pets.

38
00:02:35.320 --> 00:02:42.490
Now, how often do we want
to call request pets?

39
00:02:42.490 --> 00:02:44.580
Well, for now,
we just wanna call it the beginning.

40
00:02:44.580 --> 00:02:47.942
Eventually we're gonna have it
whenever they submit the form, right?

41
00:02:47.942 --> 00:02:51.445
But for now, we just want it to
whenever a page loads, just take,

42
00:02:51.445 --> 00:02:52.609
whatever my data is.

43
00:02:52.609 --> 00:02:55.473
I make a request of the API
to go get all the pets.

44
00:02:55.473 --> 00:03:01.640
So you can give it this array
of dependency variables.

45
00:03:01.640 --> 00:03:08.079
So here I can put here, call this effect
again whenever blah happens, right?

46
00:03:08.079 --> 00:03:15.289
So if I put, for example breed, this would
call it whenever breed changes, right?

47
00:03:15.289 --> 00:03:15.790
So that's what this array is.

48
00:03:15.790 --> 00:03:18.615
It's an array of dependent variables.

49
00:03:18.615 --> 00:03:21.941
In our particular case we just never
wanna call it once at the beginning so

50
00:03:21.941 --> 00:03:24.406
we wanna call it exactly
once after the first render.

51
00:03:24.406 --> 00:03:28.174
So if you just give it
an empty array that's what

52
00:03:28.174 --> 00:03:30.822
it's gonna do that makes sense.

53
00:03:30.822 --> 00:03:34.340
If you give it nothing it's going
to say hey if anything changes.

54
00:03:34.340 --> 00:03:39.157
If location animal breed pet if any
of that changes then call it again

55
00:03:39.157 --> 00:03:44.240
that would be way too much right we'd
be having our API unnecessarily.

56
00:03:44.240 --> 00:03:48.669
So for now just give her an empty array,

57
00:03:48.669 --> 00:03:53.770
they're gonna write
a function called async

58
00:03:53.770 --> 00:04:00.766
function request pets here we're
gonna call an API so const.

59
00:04:01.924 --> 00:04:07.440
Res as in response equals await, fetch.

60
00:04:07.440 --> 00:04:12.985
And then we're going to
give it this HTTP colon.

61
00:04:12.985 --> 00:04:15.633
So I do this over HTTP and not HTTPs for

62
00:04:15.633 --> 00:04:19.830
the sake of this class that
you don't have to worry about.

63
00:04:19.830 --> 00:04:22.494
Cores are or not cores but necessarily but

64
00:04:22.494 --> 00:04:26.236
like SSL errors this is just
simpler if you do it over HTTP.

65
00:04:28.192 --> 00:04:33.961
Pets-v2.dev-apis.com this
is a set of serverless

66
00:04:33.961 --> 00:04:39.122
functions that Frontend Masters and
I maintain.

67
00:04:39.122 --> 00:04:41.968
That's just like a dev API for
you all to play around with.

68
00:04:43.727 --> 00:04:50.470
We're gonna call the pets API,
and we're gonna say animal =.

69
00:04:55.230 --> 00:04:59.359
Animal, If you're not familiar
with this dollar sign curly brace,

70
00:04:59.359 --> 00:05:02.430
this is just a,
it's called a template function.

71
00:05:02.430 --> 00:05:03.393
It came with like ES6.

72
00:05:03.393 --> 00:05:04.594
It's pretty old.

73
00:05:04.594 --> 00:05:09.873
Now it's like from 2015, but
make sure these are back ticks

74
00:05:09.873 --> 00:05:15.860
as in next to the one on your keyboard or
that's this won't work, okay?

75
00:05:15.860 --> 00:05:21.230
So animal equals animal and

76
00:05:21.230 --> 00:05:26.839
location equals location.

77
00:05:26.839 --> 00:05:32.807
And once we have your
breed equals breed so

78
00:05:32.807 --> 00:05:37.758
this is gonna call to the pets API.

79
00:05:37.758 --> 00:05:44.734
It's gonna go grab this and
it's gonna bring it back And then here,

80
00:05:44.734 --> 00:05:50.465
you're gonna say const
Json = awaitres.Json.

81
00:05:50.465 --> 00:05:52.634
This is just how fetch works.

82
00:05:52.634 --> 00:05:55.844
It's like a browser API,
if you're not familiar with it.

83
00:05:55.844 --> 00:05:59.732
And then await is basically saying
this is gonna take some time to do,

84
00:05:59.732 --> 00:06:01.622
so wait for this to happen first.

85
00:06:01.622 --> 00:06:06.441
And then do this fetch gives you back
a promise right in a way just says wait

86
00:06:06.441 --> 00:06:08.425
till this promise resolves.

87
00:06:08.425 --> 00:06:11.254
What you do this instead
of like callback hell or

88
00:06:11.254 --> 00:06:14.944
doing promise.then this is just
a simpler way of doing that.

89
00:06:14.944 --> 00:06:22.386
Okay, and then after that you're
gonna say set pets Json.pets.

90
00:06:22.386 --> 00:06:28.913
And then now we're all happy with going
out to the API and getting that and

91
00:06:28.913 --> 00:06:35.667
this will get called once after the the
app is rendered the first time okay.

92
00:06:35.667 --> 00:06:41.022
And then here underneath the form so
wherever the form ends here.

93
00:06:41.022 --> 00:06:48.602
We're just gonna make a quick pets.map.

94
00:06:48.602 --> 00:06:53.964
Pet and
then this is gonna just be pet name

95
00:06:53.964 --> 00:06:59.658
equals name.pet, or pet.name rather.

96
00:06:59.658 --> 00:07:05.914
Pet.name animal equals pet.animal,

97
00:07:05.914 --> 00:07:11.989
breed equals pet.breed and then key.

98
00:07:11.989 --> 00:07:17.744
Do you remember that I had you and
I did it up?

99
00:07:17.744 --> 00:07:22.205
Here's one I didn't explain it but
like key is basically saying like, hey,

100
00:07:22.205 --> 00:07:25.030
I have multiple of these
pet components in a row.

101
00:07:25.030 --> 00:07:29.012
What happens if pet A and
pet B switch spots.

102
00:07:29.012 --> 00:07:31.656
If you don't give react to
key it can't tell that so

103
00:07:31.656 --> 00:07:35.850
it just destroys both of them and then re
renders them totally from the ground up.

104
00:07:35.850 --> 00:07:40.757
If those are like big complicated trees,
right like they're huge components

105
00:07:40.757 --> 00:07:44.115
that have lots of interactivity and
stuff like that.

106
00:07:44.115 --> 00:07:45.960
That can be pretty costly, right?

107
00:07:45.960 --> 00:07:50.408
So a key doesn't say like I'll
check to see if, this is Q1.

108
00:07:50.408 --> 00:07:53.580
This is Q2, and if I can see that now,
it's 21 is like, cool.

109
00:07:53.580 --> 00:07:57.070
They just swapped, and you just swap
some for you, that makes sense.

110
00:07:57.070 --> 00:07:59.944
Okay, that's what he's for.

111
00:07:59.944 --> 00:08:05.099
So the key to key, if you will,
which maybe you won't,

112
00:08:05.099 --> 00:08:08.630
is it has to be unique per pet, right?

113
00:08:08.630 --> 00:08:11.856
So, for example, pet.name, there's
a lot of Fidos in the world, right?

114
00:08:11.856 --> 00:08:14.925
So that's not a unique
identifier per pet but

115
00:08:14.925 --> 00:08:17.849
the pet.id which is a like a database key.

116
00:08:17.849 --> 00:08:23.652
Or something like that is people
wanna put indexes here sometime

117
00:08:23.652 --> 00:08:28.602
that's generally not a good
idea why is that because.

118
00:08:28.602 --> 00:08:31.784
If two things swap,
their indexes won't change, right.

119
00:08:31.784 --> 00:08:34.640
So it'll think that nothing changed,

120
00:08:34.640 --> 00:08:38.540
which is a big problem
because something did change.

121
00:08:38.540 --> 00:08:42.214
It's better to be just like
not have a key in that case.

122
00:08:42.214 --> 00:08:43.734
&gt;&gt; Had ideas from the API.

123
00:08:43.734 --> 00:08:46.609
&gt;&gt; Correct?

124
00:08:46.609 --> 00:08:48.940
Yeah, the pet ideas from the API.

125
00:08:48.940 --> 00:08:54.521
So as the creator of this API I
guarantee you it is unique or

126
00:08:54.521 --> 00:09:00.472
famous last words I don't know
it's your problem not mine.

127
00:09:00.472 --> 00:09:01.218
[LAUGH].

128
00:09:01.218 --> 00:09:06.338
So you should have an ES lint
error here here right there.

129
00:09:06.338 --> 00:09:11.261
Use effect has a missing
dependency request pets.

130
00:09:11.261 --> 00:09:15.502
So this is where I get annoyed
at this particular rule.

131
00:09:15.502 --> 00:09:18.218
And it's a warning to be fair
it's actually an error it

132
00:09:18.218 --> 00:09:20.770
used to be an error and
I was even more upset by that.

133
00:09:20.770 --> 00:09:25.487
It does its best to see like
hey you're referring to

134
00:09:25.487 --> 00:09:30.543
request pets which is a thing
that is defined locally.

135
00:09:30.543 --> 00:09:34.555
So it assumes that comes from a hook
now if this was a hook and then yeah,

136
00:09:34.555 --> 00:09:36.948
like if I was saying console.log breed.

137
00:09:36.948 --> 00:09:41.551
Then I would wanna put breed here,
but request pets is just a function.

138
00:09:41.551 --> 00:09:43.860
So you have two choices here.

139
00:09:43.860 --> 00:09:47.280
You can put request pets here and
this will satisfy it.

140
00:09:47.280 --> 00:09:48.390
That's new.
I'd actually didn't know that.

141
00:09:48.390 --> 00:09:49.383
So now it's certainly yellow.

142
00:09:49.383 --> 00:09:51.866
She's like this.
You're a function you should be moved

143
00:09:51.866 --> 00:09:55.727
inside of this So
I guess you could do it this way.

144
00:09:58.820 --> 00:10:00.370
And then you have to put, okay?

145
00:10:00.370 --> 00:10:02.500
So this is like a cascading thing.

146
00:10:02.500 --> 00:10:06.114
Now we're referring to animal location and
breed in here,

147
00:10:06.114 --> 00:10:10.100
which we actually don't want it
to be dependent on that, right?

148
00:10:10.100 --> 00:10:13.212
Because we want people to be able to
type without really requesting the API.

149
00:10:16.810 --> 00:10:19.878
So, in this particular case,

150
00:10:19.878 --> 00:10:24.834
what I'm gonna tell you then
is to just ignore it or

151
00:10:24.834 --> 00:10:29.318
you can say.//eslint-disable-line.

152
00:10:29.318 --> 00:10:31.824
And you can just do
that totally wholesale.

153
00:10:31.824 --> 00:10:36.247
This led to prevent it from giving you any
error which I maybe advise against cuz you

154
00:10:36.247 --> 00:10:38.311
might have different errors on here.

155
00:10:38.311 --> 00:10:42.247
So you can actually specify

156
00:10:42.247 --> 00:10:48.073
react-hooks/exhaustive-depths.

157
00:10:48.073 --> 00:10:53.673
Now, it's specifically only
going to ignore that one error.

158
00:10:53.673 --> 00:10:56.316
I show you this specifically cuz I
end up doing this a decent amount.

159
00:10:56.316 --> 00:11:01.117
Because this is a little bit more like,
frequently you wanna be aware of this,

160
00:11:01.117 --> 00:11:02.660
but not always, right?

161
00:11:02.660 --> 00:11:07.611
As opposed to, never put use state or
any hook inside of an if statement.

162
00:11:07.611 --> 00:11:12.545
That's a hard error you should always
change that this one if you know what

163
00:11:12.545 --> 00:11:16.058
you're doing then go ahead and
ignore the warning.

164
00:11:16.058 --> 00:11:20.042
And again it's a warning so you actually
never have to fix it just yellow squiggly

165
00:11:20.042 --> 00:11:21.927
lines really bothering me in my code.

166
00:11:21.927 --> 00:11:26.275
When a guy cannot even write, so

167
00:11:26.275 --> 00:11:30.308
that's why I do that, okay.

168
00:11:30.308 --> 00:11:34.498
I have a note in my code.

169
00:11:34.498 --> 00:11:36.960
Because we did async here.

170
00:11:36.960 --> 00:11:40.450
This is where you might see an error
about the regenerator runtime.

171
00:11:40.450 --> 00:11:42.820
If you do that your
browser's list is incorrect.

172
00:11:42.820 --> 00:11:47.550
So whatever you have here sorry,
I didn't even say that.

173
00:11:47.550 --> 00:11:48.372
So that's a problem.

174
00:11:48.372 --> 00:11:50.208
So I probably would get this.

175
00:11:50.208 --> 00:11:54.763
Let's even see if I can
get it cuz then I'd be

176
00:11:54.763 --> 00:11:59.704
able to show you what
the error would look like.

177
00:12:02.119 --> 00:12:04.304
Looks like it's not doing it.

178
00:12:04.304 --> 00:12:05.852
It's too bad.
I wanna show you what the error

179
00:12:05.852 --> 00:12:06.396
looks like.

180
00:12:06.396 --> 00:12:07.660
Anyway, not a problem.

181
00:12:07.660 --> 00:12:12.115
If you're seeing an error about
regenerate a runtime here.

182
00:12:12.115 --> 00:12:16.902
That means you need to delete your cache,
delete your disk folder.

183
00:12:16.902 --> 00:12:21.409
So delete this here, delete your disk
folder, maybe delete your node modules.

184
00:12:21.409 --> 00:12:26.449
Make sure that your
browser's list which I went

185
00:12:26.449 --> 00:12:35.018
over before is correct which is should be
like last to Chrome versions like this,

186
00:12:38.502 --> 00:12:41.010
And then you should fix that again.

187
00:12:41.010 --> 00:12:43.200
But hopefully most of
you aren't seeing that.

188
00:12:43.200 --> 00:12:45.668
Now you should be seeing something
coming back from your API.

189
00:12:45.668 --> 00:12:49.338
See see Luna Bunnashabhain Olive
pseudo beam,

190
00:12:49.338 --> 00:12:53.933
all of these here,
that should be coming back from the API.

191
00:12:53.933 --> 00:12:59.722
And if you look at your network
tab here in your browser,

192
00:12:59.722 --> 00:13:02.935
you can see here this pets API.

193
00:13:02.935 --> 00:13:05.127
So you can see it's coming
back to android, okay.

194
00:13:09.084 --> 00:13:15.965
And you can see the response here
it comes back with ten pets.

195
00:13:15.965 --> 00:13:16.608
They look like that.

196
00:13:20.510 --> 00:13:23.322
They even have little images which
we'll put up here in a little bit.

197
00:13:23.322 --> 00:13:26.528
So closures,
let's talk a second about closures.

198
00:13:26.528 --> 00:13:31.030
Notice that we're using request pets
inside of search prints, why is that?

199
00:13:31.030 --> 00:13:34.075
It's wasteful because we're creating
a new function every single time.

200
00:13:34.075 --> 00:13:36.800
That we re render not ideal.

201
00:13:36.800 --> 00:13:38.750
Not a big deal.

202
00:13:38.750 --> 00:13:40.200
The reason is that, we're using closure.

203
00:13:40.200 --> 00:13:46.371
So now that anytime, this animal refers
to precisely this animal all right.

204
00:13:46.371 --> 00:13:51.285
That's helpful because so that we can
actually just use closures like functions

205
00:13:51.285 --> 00:13:54.403
that can point to the internal
state of something.

206
00:13:54.403 --> 00:13:59.286
To reference these exactly so that's
helpful, that's why it's inside of it.

207
00:13:59.286 --> 00:14:04.070
You might ask why didn't we just put this
body inside of here this request pets

208
00:14:04.070 --> 00:14:05.627
inside of us effect one.

209
00:14:05.627 --> 00:14:09.693
I wanted to make an async function
this function here cannot be async.

210
00:14:12.461 --> 00:14:18.007
It's gonna tell you why I think In fact
callbacks are synchronous to prevent

211
00:14:18.007 --> 00:14:23.306
risky conditions, that's no good for
them for warning you about that.

212
00:14:23.306 --> 00:14:28.951
So you just make a function and
then just have a call and

213
00:14:28.951 --> 00:14:35.162
that's totally fine okay, Yeah and

214
00:14:35.162 --> 00:14:39.250
then at that point, we're just calling an
API, getting something back from the API,

215
00:14:39.250 --> 00:14:42.395
setting a use state hook, and
then we're rendering it down here.

216
00:14:42.395 --> 00:14:45.567
So the first time this renders,
and this is a positive thing,

217
00:14:45.567 --> 00:14:48.440
it's gonna render once with
nothing in there, right?

218
00:14:48.440 --> 00:14:54.531
The very first render,
this is gonna be an empty array.

219
00:14:54.531 --> 00:14:59.317
So if you notice it'll render
once very quickly it then renders

220
00:14:59.317 --> 00:15:03.850
a second time with the pets cuz
the API is fairly fast right.

221
00:15:03.850 --> 00:15:08.909
But imagine this was a very slow API yeah

222
00:15:08.909 --> 00:15:16.743
suffice to say that it renders
once nothing in there call it.

223
00:15:16.743 --> 00:15:20.318
Then schedules here at this use effect to
call the API after the first render he

224
00:15:20.318 --> 00:15:21.038
calls the API.

225
00:15:21.038 --> 00:15:24.432
As soon as this resolves you can
see down here called sets pets as

226
00:15:24.432 --> 00:15:26.048
soon as you sit call set pets.

227
00:15:26.048 --> 00:15:30.781
This is also signifying to react hey
a thing changed reacts a thing changed and

228
00:15:30.781 --> 00:15:35.038
then it goes back and re renders again but
now this is not an empty array.

229
00:15:35.038 --> 00:15:38.068
This is an array full of
pets back from the API,

230
00:15:38.068 --> 00:15:40.496
which is where we get all of our pets.

231
00:15:43.071 --> 00:15:46.010
Does that cycle make sense?

232
00:15:46.010 --> 00:15:50.741
This is preferable because if we
just wait for the API to come back,

233
00:15:50.741 --> 00:15:56.061
the user has to wait to see anything
until that first call comes back which,

234
00:15:56.061 --> 00:15:57.938
we're on fast internet.

235
00:15:57.938 --> 00:16:01.092
Or many of you I imagine are probably on
pretty fast internet that this happens

236
00:16:01.092 --> 00:16:01.829
really quickly.

237
00:16:01.829 --> 00:16:06.177
But imagine like you're in you know
2G In like rural North Dakota or

238
00:16:06.177 --> 00:16:11.458
something like that right that first API
call could be really painful to wait for.

239
00:16:11.458 --> 00:16:15.481
So the person is stuck there staring
at nothing as opposed it's nice to

240
00:16:15.481 --> 00:16:16.648
look at something.

241
00:16:16.648 --> 00:16:19.238
There's a lot of research that shows that
people can't even make a decision that

242
00:16:19.238 --> 00:16:19.743
fast, right?

243
00:16:19.743 --> 00:16:22.251
When they look at websites,
so they look at something and

244
00:16:22.251 --> 00:16:24.672
then if you're requesting
things in the background.

245
00:16:24.672 --> 00:16:27.748
They're still processing
the layout of your UI,

246
00:16:27.748 --> 00:16:31.492
then they'll start seeing
the actual data come back right.

247
00:16:31.492 --> 00:16:35.916
So we're kind of getting into like human
psychology of user interfaces here but

248
00:16:35.916 --> 00:16:39.955
this is better even if it requires
more processing and code to accomplish

