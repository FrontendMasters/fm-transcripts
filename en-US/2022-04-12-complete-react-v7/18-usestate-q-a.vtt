WEBVTT

1
00:00:00.180 --> 00:00:03.437
So with regards to
the concept behind hooks, for

2
00:00:03.437 --> 00:00:07.340
example line 11 const pets setPets,
what is setPets?

3
00:00:07.340 --> 00:00:10.197
I noticed we never declared
a setPets function elsewhere,

4
00:00:10.197 --> 00:00:11.730
is that the declaration?

5
00:00:11.730 --> 00:00:18.899
&gt;&gt; Yeah, so you can think of pets and
setPets here is pets is a theta state.

6
00:00:18.899 --> 00:00:22.664
And setPets is a state updater, right.

7
00:00:22.664 --> 00:00:27.141
So it's a function that you
can call the dispatcher.

8
00:00:27.141 --> 00:00:30.655
So if you look at it here
the name of the type, right.

9
00:00:30.655 --> 00:00:35.661
It's basically like I have something
now that I want to update.

10
00:00:35.661 --> 00:00:40.016
So that pets comes back next time on
the next rerender as this, right.

11
00:00:40.016 --> 00:00:44.526
So wherever you call setPets
whether it's gonna blow whatever is

12
00:00:44.526 --> 00:00:46.743
in pets is something brand new.

13
00:00:46.743 --> 00:00:47.625
Does that makes sense.

14
00:00:47.625 --> 00:00:48.430
&gt;&gt; Yeah.

15
00:00:48.430 --> 00:00:51.051
&gt;&gt; Yeah.
&gt;&gt; Then what about the assignment when we

16
00:00:51.051 --> 00:00:53.811
say equals useState and
pass in an argument.

17
00:00:53.811 --> 00:00:56.370
&gt;&gt; Right, so this is peculiar.

18
00:00:56.370 --> 00:00:59.140
This is the way that the React
team chose to do this.

19
00:00:59.140 --> 00:01:01.870
I think most people had
not seen this before.

20
00:01:01.870 --> 00:01:04.050
So it kind of melted
their mind a little bit.

21
00:01:04.050 --> 00:01:07.220
But let's just break this down,
this is called destructuring.

22
00:01:07.220 --> 00:01:08.210
So I'm gonna make two things and

23
00:01:08.210 --> 00:01:10.200
these two things are gonna be
totally equivalent to each other.

24
00:01:10.200 --> 00:01:16.117
So I'm gonna say const petHook = useState,

25
00:01:16.117 --> 00:01:18.770
like that, right.

26
00:01:20.010 --> 00:01:22.250
This is now an array of two things.

27
00:01:23.350 --> 00:01:28.841
The first thing is the state the second
thing is the state setter right,

28
00:01:28.841 --> 00:01:30.590
or the state updater.

29
00:01:31.730 --> 00:01:37.974
So then now pets equals petHook[0].

30
00:01:37.974 --> 00:01:41.950
And const setPets

31
00:01:43.929 --> 00:01:47.209
Equals petHook[1].

32
00:01:49.420 --> 00:01:55.197
These two things do precisely the same
thing one this is just shorter.

33
00:01:58.224 --> 00:02:00.372
Now you're probably wondering yourself,
but

34
00:02:00.372 --> 00:02:02.310
how comes up with that kind of API, right.

35
00:02:02.310 --> 00:02:04.000
This doesn't make any sense.

36
00:02:04.000 --> 00:02:06.889
The reason why they did this is it's
just quick and easy to write and

37
00:02:06.889 --> 00:02:08.650
you write hooks or useState quite a bit.

38
00:02:08.650 --> 00:02:09.970
So it's faster, right.

39
00:02:11.990 --> 00:02:14.053
Since no one asked here's
how I would have done it.

40
00:02:17.231 --> 00:02:21.225
Like state pet or it's,

41
00:02:21.225 --> 00:02:27.327
we doing the right way anyway, yeah.

42
00:02:27.327 --> 00:02:33.524
SetState: setPet.

43
00:02:38.895 --> 00:02:40.557
UseState block, right,

44
00:02:40.557 --> 00:02:45.699
this gets a little bit more explicit if
this is destructuring an object, right.

45
00:02:45.699 --> 00:02:53.021
So that then you know now that I think
I did this the opposite way, though.

46
00:02:58.706 --> 00:03:02.827
So maybe this is bad because I can't
remember which order the things go in, but

47
00:03:02.827 --> 00:03:05.140
it becomes more obvious.

48
00:03:05.140 --> 00:03:06.012
This is the state and

49
00:03:06.012 --> 00:03:09.520
this is the setState as opposed to
this just being an implicit order.

50
00:03:09.520 --> 00:03:12.461
Or a tuple if you will, or tuple but

51
00:03:12.461 --> 00:03:17.050
it's actually tuple but
I like to say tuple instead.

52
00:03:17.050 --> 00:03:20.136
&gt;&gt; And I'm curious and
maybe this doesn't make a lot of sense.

53
00:03:20.136 --> 00:03:23.909
But so line 7, 8,
9 const location, animal, breed,

54
00:03:23.909 --> 00:03:29.090
they all are assigned useState state
with an empty string passed to it.

55
00:03:29.090 --> 00:03:33.056
But does the hook then still know there's
a difference between them based on that

56
00:03:33.056 --> 00:03:33.945
first argument?

57
00:03:36.434 --> 00:03:38.026
&gt;&gt; Let's say it a different way.

58
00:03:38.026 --> 00:03:38.570
&gt;&gt; [LAUGH] So

59
00:03:38.570 --> 00:03:43.556
even though we've assigned useState
with an empty string to each of those.

60
00:03:43.556 --> 00:03:46.734
Is it something to do with that
first parameter either location,

61
00:03:46.734 --> 00:03:47.613
animal or breed.

62
00:03:47.613 --> 00:03:51.870
That makes the hook kinda
recognize that those are separate?

63
00:03:53.240 --> 00:03:55.080
&gt;&gt; Got it, okay.

64
00:03:55.080 --> 00:03:56.775
So when you call useState,

65
00:03:56.775 --> 00:04:01.130
it's keeping track of the order
of what you call these, right.

66
00:04:01.130 --> 00:04:03.238
So you might think this will
give you back the same thing.

67
00:04:03.238 --> 00:04:07.200
But it's giving them back a different
piece of state every single time.

68
00:04:07.200 --> 00:04:11.590
This thing that you give it here,
it's the initial state.

69
00:04:11.590 --> 00:04:12.260
&gt;&gt; Okay.

70
00:04:12.260 --> 00:04:14.300
&gt;&gt; So this is an empty string.

71
00:04:14.300 --> 00:04:16.160
This is a different empty string.

72
00:04:16.160 --> 00:04:19.060
It is an empty string, but it's
a different one, different empty string.

73
00:04:19.060 --> 00:04:21.870
And this is a yet different one, right.

74
00:04:23.340 --> 00:04:26.200
And so
here we're giving it an empty array.

75
00:04:26.200 --> 00:04:29.990
But after this gets set the first time, it
doesn't matter whatever was there, right.

76
00:04:29.990 --> 00:04:33.324
That's just for
the very first rendering call.

77
00:04:33.324 --> 00:04:37.350
You can basically think of what
React is doing is it's just waiting.

78
00:04:37.350 --> 00:04:39.850
It calls this function and
then it counts which one is giving.

79
00:04:39.850 --> 00:04:42.600
And so it's giving you back
just first one gets this one.

80
00:04:42.600 --> 00:04:45.830
The second one gets this one,
the third one gets this one, right.

81
00:04:45.830 --> 00:04:49.141
&gt;&gt; And that's why you
established that the order that

82
00:04:49.141 --> 00:04:50.225
&gt;&gt; [CROSSTALK] It's critical.

83
00:04:50.225 --> 00:04:54.320
&gt;&gt; Essential in the loop state and
things like that are invalid.

84
00:04:54.320 --> 00:04:55.730
&gt;&gt; Cool, makes sense?

85
00:04:55.730 --> 00:04:57.776
&gt;&gt; Yeah.
&gt;&gt; Cool, good questions.

