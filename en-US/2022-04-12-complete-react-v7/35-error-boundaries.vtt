WEBVTT

1
00:00:00.110 --> 00:00:06.765
So we are now on to
Special Case React Tools here.

2
00:00:06.765 --> 00:00:11.160
So the first thing I'm gonna tell
you right now is you now are more or

3
00:00:11.160 --> 00:00:14.077
less familiar with the Core React Library.

4
00:00:14.077 --> 00:00:17.471
You can take what you learned here so
far and

5
00:00:17.471 --> 00:00:21.719
walk away and
write large scale React applications.

6
00:00:21.719 --> 00:00:24.932
It's one of my favorite parts about
React is it's a relatively small cord.

7
00:00:24.932 --> 00:00:28.462
It's grown over the years but
it's no more than 40,

8
00:00:28.462 --> 00:00:33.388
50 methods slash concepts that you
really need to kinda keep in your mind.

9
00:00:33.388 --> 00:00:35.924
As opposed to something like
at least old school Angular.

10
00:00:35.924 --> 00:00:40.214
It was 200 things that you kinda had to
keep in mind, and I'm not exaggerating,

11
00:00:40.214 --> 00:00:43.549
I think it was 200 methods existed
on Angular back in the day.

12
00:00:43.549 --> 00:00:45.935
I haven't written Angular in a long time,
so I don't know what it is now.

13
00:00:48.526 --> 00:00:50.634
But it's a relatively small set of tools.

14
00:00:50.634 --> 00:00:54.513
Now granted, React does not do for
you everything that Angular does for you,

15
00:00:54.513 --> 00:00:56.552
and that is a large difference, right?

16
00:00:56.552 --> 00:00:59.164
For example,
the router is obviously not built in.

17
00:00:59.164 --> 00:01:03.935
A lot of these libraries have routers and
things built into them.

18
00:01:03.935 --> 00:01:07.387
React basically says,
all that stuff belongs to you,

19
00:01:07.387 --> 00:01:11.377
you can choose how you wanna do it,
we have no opinion about it.

20
00:01:11.377 --> 00:01:14.641
But yeah, that's what I like about React,

21
00:01:14.641 --> 00:01:19.064
cuz I can keep the whole library
in my head for the most part.

22
00:01:19.064 --> 00:01:23.804
I don't actually look at the React
docs very much because I can remember

23
00:01:23.804 --> 00:01:24.598
most of it.

24
00:01:24.598 --> 00:01:29.879
As opposed to, especially when I was
writing Ember when I worked at LinkedIn,

25
00:01:29.879 --> 00:01:32.369
that tab never closed in my browser.

26
00:01:32.369 --> 00:01:34.734
I was always in the docs
trying to just like, okay,

27
00:01:34.734 --> 00:01:38.104
what order do the params come in,
how do I do it this way, blah blah blah?

28
00:01:41.409 --> 00:01:46.501
So we're gonna hop into
kinda like three more

29
00:01:46.501 --> 00:01:51.995
advanced things that you
have to use sometimes.

30
00:01:51.995 --> 00:01:56.147
And then everything else,
I left in intermediate React,

31
00:01:56.147 --> 00:01:59.973
of the harder things that
you might need to deal with.

32
00:01:59.973 --> 00:02:01.834
So let's hop into error boundaries.

33
00:02:05.219 --> 00:02:11.052
Sometimes you have a component
that you know might error.

34
00:02:11.052 --> 00:02:15.425
And a good example, let's say you have
a widget that you're writing that a user

35
00:02:15.425 --> 00:02:19.950
can put in Markdown, and then you have to
go render that into some sort of preview.

36
00:02:19.950 --> 00:02:22.560
Because you can't trust
what the user is doing,

37
00:02:22.560 --> 00:02:24.669
it means you might hit errors, right?

38
00:02:24.669 --> 00:02:28.317
In that your Markdown preview window,
you might try and

39
00:02:28.317 --> 00:02:32.598
render Markdown that's not valid
because the user put it there.

40
00:02:32.598 --> 00:02:36.137
So you have to have some ability to catch
an error that comes out of a component.

41
00:02:36.137 --> 00:02:38.040
And that's what an error boundary is.

42
00:02:38.040 --> 00:02:40.852
An error boundary basically says,

43
00:02:40.852 --> 00:02:46.298
containing the blast zone of
a component to this component, right?

44
00:02:46.298 --> 00:02:52.306
So basically, you're gonna wrap untrusted
components with an error boundary so

45
00:02:52.306 --> 00:02:55.888
that your errors can't
bubble outside of that.

46
00:02:57.737 --> 00:03:01.241
So fun fact,
when you're writing something like nixjs.,

47
00:03:01.241 --> 00:03:03.852
they will wrap your app
in an error boundary so

48
00:03:03.852 --> 00:03:07.786
that they can give you in app
feedback when you have errors, right?

49
00:03:07.786 --> 00:03:11.307
So they use it as kind
of a debugging tool.

50
00:03:11.307 --> 00:03:14.713
So I'm gonna show you how to write one.

51
00:03:14.713 --> 00:03:19.967
So let's pop into our editor really quick,
and create a new component,

52
00:03:19.967 --> 00:03:24.553
and you can call it ErrorBoundary.js or
something like that.

53
00:03:27.335 --> 00:03:32.050
Now, confession, this is mostly
just code directly from the React

54
00:03:32.050 --> 00:03:36.693
docs because there's not a lot of
variation of that you need here.

55
00:03:36.693 --> 00:03:43.695
First of all,
these have to be class components.

56
00:03:43.695 --> 00:03:49.042
Function components are not
capable of being error boundaries.

57
00:03:49.042 --> 00:03:52.856
So this is one specific case where you
absolutely must use a class component.

58
00:03:55.733 --> 00:04:00.694
Okay, we're gonna import Link, From React,

59
00:04:00.694 --> 00:04:05.093
reacat, that's sounds
like a great name for

60
00:04:05.093 --> 00:04:08.690
a library, anyway, router-dom.

61
00:04:11.996 --> 00:04:17.818
And done, there we go, and
we're gonna have class ErrorBoundary,

62
00:04:20.236 --> 00:04:22.577
extends Component.

63
00:04:25.158 --> 00:04:32.015
The state is gonna be
equal to hasError: false.

64
00:04:39.698 --> 00:04:48.243
Okay, we're gonna make a method called
static getDerivedStateFromError.

65
00:04:48.243 --> 00:04:55.361
This is a specific name for
a function that React can then call.

66
00:04:55.361 --> 00:04:57.696
So it's like,
what happens when there is an error?

67
00:04:57.696 --> 00:05:00.623
What do you want me to give
back to your component?

68
00:05:00.623 --> 00:05:05.525
And you're gonna say, return hasError.

69
00:05:05.525 --> 00:05:12.402
Sorry, it's an object, hasError: true.

70
00:05:12.402 --> 00:05:16.152
Basically, hey, an error got caught,
we're gonna re-render your component.

71
00:05:16.152 --> 00:05:18.706
What new state would you like for
your component?

72
00:05:18.706 --> 00:05:21.561
In this case,
I would like the error state to be true.

73
00:05:24.426 --> 00:05:27.690
Okay, and then we're gonna
give it another method here.

74
00:05:29.677 --> 00:05:33.243
ComponentDidCatch, which
is like componentDidMount,

75
00:05:33.243 --> 00:05:35.288
but now, it's caught an error.

76
00:05:35.288 --> 00:05:40.806
It's gonna give you the error, and it's
gonna give you some info about the error.

77
00:05:40.806 --> 00:05:43.153
This is where you would call
something like TrackJS.

78
00:05:43.153 --> 00:05:47.824
I don't know if you're familiar with
TrackJS, another great Frontend Masters

79
00:05:47.824 --> 00:05:51.683
teacher, Todd, it's a error
tracking service for JavaScript.

80
00:05:51.683 --> 00:05:54.199
I'm a big fan of works super well.

81
00:05:54.199 --> 00:05:56.379
But you could throw it to
something like century as well.

82
00:05:56.379 --> 00:05:59.616
So whatever you're using to
catch your client side errors,

83
00:05:59.616 --> 00:06:02.032
I think New Relic has a service for
it as well.

84
00:06:02.032 --> 00:06:05.804
This is where you should do that,
you would call your API here.

85
00:06:05.804 --> 00:06:10.097
In my case, my API reporting
software is called console.error,

86
00:06:11.637 --> 00:06:15.371
Which this is insufficient if
you didn't catch my sarcasm.

87
00:06:17.976 --> 00:06:22.512
Okay, and then we're gonna render.

88
00:06:27.894 --> 00:06:32.965
So we are going to use our error boundary,
which is not necessarily the best idea.

89
00:06:32.965 --> 00:06:36.274
But what happens if we get
an error back from our API?

90
00:06:36.274 --> 00:06:40.680
Maybe the person made a bad API request or
maybe our service is 500ing or

91
00:06:40.680 --> 00:06:44.245
we're gonna wrap details
basically in an error boundary.

92
00:06:44.245 --> 00:06:48.516
Say, if there's some sort of error,
then give the user an error message and

93
00:06:48.516 --> 00:06:50.807
redirect to the homepage, basically.

94
00:06:50.807 --> 00:06:59.210
So, if, this.state.hasError return,

95
00:07:01.355 --> 00:07:06.219
Some h2, There was an error.

96
00:07:06.219 --> 00:07:07.137
No.

97
00:07:08.142 --> 00:07:10.005
What are we going to do.

98
00:07:12.088 --> 00:07:13.149
Just kidding.

99
00:07:13.149 --> 00:07:18.609
We'll put a link in here, Link,

100
00:07:18.609 --> 00:07:24.950
Click here to go back to the homepage.

101
00:07:26.014 --> 00:07:29.194
Or wait five seconds.

102
00:07:30.449 --> 00:07:34.022
And we'll do it for you.

103
00:07:35.611 --> 00:07:38.428
Doesn't want me, fine, we'll.

104
00:07:38.428 --> 00:07:41.444
You could use the backtick there as well.

105
00:07:41.444 --> 00:07:42.744
Or not.

106
00:07:42.744 --> 00:07:44.478
I'm not your mom.

107
00:07:48.217 --> 00:07:50.881
Good error messages are important.

108
00:07:56.415 --> 00:07:57.881
It wants me to do it that way.

109
00:07:57.881 --> 00:08:02.013
So you could put some sort of
a HTML encoded text there.

110
00:08:02.013 --> 00:08:03.887
I'm gonna be lazy and just write it out.

111
00:08:09.363 --> 00:08:13.331
So you might be wondering what this is,
which looks a little strange, right?

112
00:08:13.331 --> 00:08:16.123
This is something that Prettier
automatically inserted for you.

113
00:08:16.123 --> 00:08:18.538
It's so
that it can line break there for you.

114
00:08:18.538 --> 00:08:22.630
And this is just the space that keeps it
continuous despite the fact that we're

115
00:08:22.630 --> 00:08:23.505
line breaking.

116
00:08:27.155 --> 00:08:31.658
But I mean, every time I save,
it'll just come back.

117
00:08:35.145 --> 00:08:40.401
Which is fine, okay?

118
00:08:40.401 --> 00:08:42.243
So this is what happens
if there's an error.

119
00:08:42.243 --> 00:08:46.461
If there's not an error,
what do we wanna do?

120
00:08:46.461 --> 00:08:49.780
We just wanna render
the component normally, right?

121
00:08:49.780 --> 00:08:51.813
Yeah, question, Mark.

122
00:08:51.813 --> 00:08:54.757
&gt;&gt; Can the error boundaries
only be done in classes?

123
00:08:54.757 --> 00:08:59.040
&gt;&gt; Correct, they cannot be
done in function components.

124
00:09:02.856 --> 00:09:06.651
Okay, so
if there's no error in an error boundary,

125
00:09:06.651 --> 00:09:10.978
we just wanna render whatever
we were gonna render anyway.

126
00:09:10.978 --> 00:09:17.087
So what you do is, you say,
return this.props.children.

127
00:09:18.876 --> 00:09:23.400
Again, remember children
is a special named key of

128
00:09:23.400 --> 00:09:26.987
whatever came from between it, right?

129
00:09:26.987 --> 00:09:32.414
So in this h2, this text here,
it's the children of h2, right?

130
00:09:32.414 --> 00:09:35.032
So if I make my ErrorBoundary components,

131
00:09:35.032 --> 00:09:38.827
it's whatever is gonna be
encapsulated by that tag, right?

132
00:09:43.861 --> 00:09:50.303
Okay, and then that's it, all we got to
do at the bottom here is export default.

133
00:09:50.303 --> 00:09:51.398
ErrorBoundary.

134
00:09:53.549 --> 00:09:57.116
And now, we have a perfectly good
error boundary to use with details.

135
00:10:04.918 --> 00:10:08.186
All right, so go back to Details,

136
00:10:08.186 --> 00:10:14.274
we're gonna import,
ErrorBoundary from ErrorBoundary.

137
00:10:14.274 --> 00:10:16.094
Good job, VS Code.

138
00:10:16.094 --> 00:10:20.496
In our WrappedDetails down here,
all we're gonna do is here,

139
00:10:20.496 --> 00:10:25.909
we're gonna put our error boundary, and
I'll tell you why in just a second.

140
00:10:25.909 --> 00:10:27.438
Let's do that.

141
00:10:35.807 --> 00:10:40.188
So why am I putting it here,
inside of WrappedDetails,

142
00:10:40.188 --> 00:10:45.981
instead of putting it just directly
here inside of my Details component?

143
00:10:45.981 --> 00:10:51.658
Wherever the error boundary is,
it has to be outside of where you expect

144
00:10:51.658 --> 00:10:56.971
the errors to happen, so
it has to be a component higher than that.

145
00:10:56.971 --> 00:10:59.703
So if I'm expecting Details to see errors,
right?

146
00:10:59.703 --> 00:11:03.853
This is where I would see errors,
either from the API calls or whatever.

147
00:11:03.853 --> 00:11:08.516
The error boundary has to live above
it because if Details hits an error,

148
00:11:08.516 --> 00:11:13.653
it's going to throw an error, and
it's going to crash all of details, right?

149
00:11:13.653 --> 00:11:16.556
The entire detail component then crumbles,
and

150
00:11:16.556 --> 00:11:19.258
that error is gonna start
bubbling out of it.

151
00:11:19.258 --> 00:11:22.504
So we need to catch it at
the component above it.

152
00:11:22.504 --> 00:11:24.376
If we put it inside of Details,

153
00:11:24.376 --> 00:11:28.841
the error boundary would crumble with
the rest of the component, right?

154
00:11:28.841 --> 00:11:30.822
Does that make any sense, right?

155
00:11:33.829 --> 00:11:38.089
So if there's an error here
inside of the render function and

156
00:11:38.089 --> 00:11:43.351
details was inside of it, it would stop
executing the function here inside

157
00:11:43.351 --> 00:11:48.213
of details, and then it would throw
the error to the parent above it.

158
00:11:48.213 --> 00:11:51.585
So if the error boundary was in here,
it would just get bypassed and

159
00:11:51.585 --> 00:11:52.618
go up to the parent.

160
00:11:52.618 --> 00:11:56.712
That's why ErrorBoundary
has to live above details,

161
00:11:56.712 --> 00:12:00.365
which is why we're putting
in WrappedDetails.

162
00:12:00.365 --> 00:12:04.855
So if I didn't have WrappedDetails
already, we just happen to already because

163
00:12:04.855 --> 00:12:08.550
we were doing this song and dance,
we would have to then make one.

164
00:12:10.791 --> 00:12:11.812
Makes sense?

165
00:12:11.812 --> 00:12:15.443
Okay, the other place you could have put
it, which would have been a little bit

166
00:12:15.443 --> 00:12:18.545
weirder, but you totally could have
as you could have put it here.

167
00:12:19.742 --> 00:12:21.365
Wrapping it inside of this element.

168
00:12:21.365 --> 00:12:26.091
But I prefer to keep those
kind of implementation details

169
00:12:26.091 --> 00:12:28.852
more localized to the file here.

170
00:12:31.149 --> 00:12:34.549
Okay, so
let's show you what that looks like.

171
00:12:44.028 --> 00:12:47.278
Okay, so here inside of my render
function, it's gonna crash, right?

172
00:12:47.278 --> 00:12:50.422
Cuz I throw a new error,
and I don't catch it.

173
00:12:50.422 --> 00:12:52.396
This is great coding, by the way.

174
00:12:54.230 --> 00:12:56.338
So now, if I come do Adopt Me.

175
00:13:07.774 --> 00:13:10.275
So it did that, which is good.

176
00:13:13.855 --> 00:13:17.375
We haven't done the redirect yet,
but it should.

177
00:13:17.375 --> 00:13:21.046
&gt;&gt; We didn't put an actual path for
the link.

178
00:13:21.046 --> 00:13:23.591
We didn't put it to prop.

179
00:13:23.591 --> 00:13:25.699
&gt;&gt; In the error boundary?

180
00:13:25.699 --> 00:13:26.881
That's probably why.

181
00:13:28.117 --> 00:13:28.881
Thank you.

182
00:13:28.881 --> 00:13:31.988
So this is what happens when
you start making shit up.

183
00:13:34.690 --> 00:13:39.815
So to=, and
then we're just gonna put that to slash.

184
00:13:39.815 --> 00:13:41.194
Yeah, good catch.

185
00:13:45.097 --> 00:13:47.680
&gt;&gt; What causes the redirect?

186
00:13:47.680 --> 00:13:51.860
&gt;&gt; We're gonna do that in a second,
good question.

187
00:13:51.860 --> 00:13:57.300
So now, we're getting our nice error
message that's very descriptive and

188
00:13:57.300 --> 00:13:59.006
very not user hostile.

189
00:13:59.006 --> 00:14:01.311
And then here, they can click here and
they go back to the homepage, right?

190
00:14:01.311 --> 00:14:03.782
And then if we go into this one,
it'll get caught there.

191
00:14:03.782 --> 00:14:08.262
And notice that our error
reporting service down here, Is

192
00:14:08.262 --> 00:14:13.563
reporting the error information.

193
00:14:13.563 --> 00:14:19.384
It's printing out the stack trace,
And doing all that kind of stuff.

194
00:14:21.781 --> 00:14:27.664
Okay, so notice, it's not redirecting,
but we'll do that here in just a second.

195
00:14:30.070 --> 00:14:34.615
So what's nice about this is, now,
if we have any sort of API errors or

196
00:14:34.615 --> 00:14:38.484
anything like that,
this will all just happen to work out.

197
00:14:38.484 --> 00:14:42.602
So let's go to the redirect
really quick first.

198
00:14:42.602 --> 00:14:51.261
And we're gonna do that by adding another
function here called componentDidUpdate.

199
00:14:51.261 --> 00:14:57.904
ComponentDidUpdate, this is
another lifecycle method, That

200
00:14:57.904 --> 00:15:03.369
every time that the state or props gets
updated, this will get invoked, right?

201
00:15:03.369 --> 00:15:08.688
So then you can do kind of reactive
derivative state kind of things.

202
00:15:08.688 --> 00:15:15.547
So in componentDidUpdate,
we're gonna say, if this.state.hasError.

203
00:15:16.984 --> 00:15:21.891
So if this ever gets set to true,
then we're just gonna set a timeout,

204
00:15:21.891 --> 00:15:22.899
setTimeout.

205
00:15:26.668 --> 00:15:29.782
Okay, and then we're going to
put an arrow function here so

206
00:15:29.782 --> 00:15:31.788
that we don't have to bind anything.

207
00:15:34.539 --> 00:15:39.993
This.setState, and
we're gonna set redirect to true,

208
00:15:39.993 --> 00:15:46.014
and we will invoke this function
after 5000 milliseconds.

209
00:15:51.134 --> 00:15:55.046
Again, this.setState is gonna work
because this is a arrow function, and

210
00:15:55.046 --> 00:15:58.115
arrow functions are not gonna
cause us any problems there.

211
00:16:00.426 --> 00:16:03.597
Okay, so we have this redirect state now.

212
00:16:03.597 --> 00:16:11.592
So let's track that up here as
well in our state redirect: False.

213
00:16:14.404 --> 00:16:15.853
We don't have to necessarily do that.

214
00:16:15.853 --> 00:16:18.038
You could totally do this,
and this will be fine.

215
00:16:18.038 --> 00:16:22.831
What's nice about doing that, putting this
stuff false data even for something that

216
00:16:22.831 --> 00:16:27.107
we're not reading off of is that now,
TypeScript will have types for this.

217
00:16:27.107 --> 00:16:30.179
So it'll know that it has a state
called redirect, and that's a Boolean.

218
00:16:32.872 --> 00:16:37.781
And it's just good to kind of document all
the state that you're keeping track of.

219
00:16:37.781 --> 00:16:40.802
Okay, so that's there.

220
00:16:40.802 --> 00:16:44.363
Then inside of your render function,
we have to put a new if statement.

221
00:16:48.980 --> 00:16:52.900
If this.state.redirect,

222
00:16:54.189 --> 00:16:59.108
return, We're gonna use
a navigate component.

223
00:16:59.108 --> 00:17:03.723
So Navigate, which I'm gonna
get from react-router-dom here,

224
00:17:07.776 --> 00:17:12.079
To=/, like that.

225
00:17:12.079 --> 00:17:16.737
Then we're gonna turn
this if into an else if.

226
00:17:20.818 --> 00:17:24.023
You can think of navigate
as basically a redirect,

227
00:17:24.023 --> 00:17:27.386
not basically, actually,
navigate as a redirect.

228
00:17:27.386 --> 00:17:32.124
So if you render a Navigate component,
react-router-dom knows,

229
00:17:32.124 --> 00:17:35.646
cool, I'm gonna route that
to a different thing.

230
00:17:35.646 --> 00:17:38.572
And you can see I
imported that at the top.

231
00:17:39.723 --> 00:17:41.901
Or rather,
VS Code imported it at the top for me, so

232
00:17:41.901 --> 00:17:43.487
I still have my throw error in there.

233
00:17:43.487 --> 00:17:46.332
So if I click Luna, it's gonna say,
There was an error.

234
00:17:46.332 --> 00:17:50.029
And then hopefully, after five seconds,
it should take me back to the homepage,

235
00:17:50.029 --> 00:17:50.736
which it does.

