WEBVTT

1
00:00:00.520 --> 00:00:03.761
So so far, we've been doing relatively,

2
00:00:03.761 --> 00:00:08.630
well, not relatively, actually,
no state in our UI, right?

3
00:00:08.630 --> 00:00:10.562
There's no interactivity in this page.

4
00:00:10.562 --> 00:00:14.810
Can't click on this,
can't click on this, nothing's changing,

5
00:00:14.810 --> 00:00:19.170
it's a very statically just
blog post kinda thing, right?

6
00:00:19.170 --> 00:00:22.742
And nobody likes blog posts, just kidding.

7
00:00:22.742 --> 00:00:25.690
I mean, do people like blog posts?

8
00:00:25.690 --> 00:00:28.201
That's a good question, I don't know.

9
00:00:28.201 --> 00:00:30.227
Anyway, that's what hooks are for.

10
00:00:30.227 --> 00:00:33.440
Hooks are for adding statefulness to UI.

11
00:00:35.300 --> 00:00:40.728
Now, most of your bugs that you will
ever write or ever encounter are due

12
00:00:40.728 --> 00:00:46.630
to not accounting for change in
your application correctly, right?

13
00:00:46.630 --> 00:00:49.991
You went from state A to state B, and
somehow you ended up in state C because

14
00:00:49.991 --> 00:00:52.450
you messed up the transformation
from A to B, right?

15
00:00:54.190 --> 00:00:59.008
So the idea with React here is we're
gonna make this as simple as possible and

16
00:00:59.008 --> 00:01:02.490
as easy to track change over
time in your application.

17
00:01:04.230 --> 00:01:08.863
So the idea of a React component is
given this state and this props,

18
00:01:08.863 --> 00:01:11.280
my component will look like this.

19
00:01:11.280 --> 00:01:16.366
So every time that you render your
React component, it's like a snapshot

20
00:01:16.366 --> 00:01:21.712
of given this state and this props,
my component will always look like this.

21
00:01:21.712 --> 00:01:22.733
That's the idea.

22
00:01:25.290 --> 00:01:30.875
So that's why I was telling
you that you don't wanna do

23
00:01:30.875 --> 00:01:36.472
things like let counter = 0,
and then counter++.

24
00:01:36.472 --> 00:01:40.059
If I render this 10,000 times,
what's counter gonna be?

25
00:01:40.059 --> 00:01:43.349
Different than it was
on the 9,999th time and

26
00:01:43.349 --> 00:01:48.600
different than it was on the first
time and the second time, right?

27
00:01:48.600 --> 00:01:51.610
I can no longer reason about,
and I hate that phrase, but

28
00:01:51.610 --> 00:01:53.570
that's what we're doing, right?

29
00:01:53.570 --> 00:01:57.184
I can no longer reason
about my code very easily.

30
00:01:57.184 --> 00:02:01.876
But if I do this and I render this app 10
trillion times, on the 10 trillion and

31
00:02:01.876 --> 00:02:04.298
first time, what's it gonna look like?

32
00:02:04.298 --> 00:02:06.230
Same damn thing, right?

33
00:02:07.280 --> 00:02:08.242
That's the idea here.

34
00:02:10.779 --> 00:02:15.244
That's why we're avoiding side effects,
right, and having pure functions.

35
00:02:15.244 --> 00:02:20.133
If anyone comes up with some Haskell stuff
right now, I'm just gonna throw them out.

36
00:02:24.869 --> 00:02:26.435
You think I'm joking.

37
00:02:26.435 --> 00:02:31.972
All right, create a new file and
call it SearchParams.js.

38
00:02:31.972 --> 00:02:36.480
Put that inside of your source directory.

39
00:02:37.670 --> 00:02:41.485
Gonna make a function here called,
you guessed it,

40
00:02:41.485 --> 00:02:44.705
SearchParams and it's a function, okay?

41
00:02:44.705 --> 00:02:47.332
In here we're gonna put in the location.

42
00:02:47.332 --> 00:02:50.148
You can put that wherever you want.

43
00:02:50.148 --> 00:02:52.720
I'm gonna put Seattle, Washington.

44
00:02:57.156 --> 00:03:01.506
Okay, and then I'm going to
return a div with a className.

45
00:03:01.506 --> 00:03:04.397
So sorry about classNames for a second,

46
00:03:04.397 --> 00:03:08.403
you're probably expecting
to see here class, right?

47
00:03:08.403 --> 00:03:11.240
Why can't we just put class there?

48
00:03:13.390 --> 00:03:16.755
Class is a reserved word in JavaScript,
right?

49
00:03:16.755 --> 00:03:20.050
You can have a class Thing, right?

50
00:03:20.050 --> 00:03:22.007
This means something in JavaScript.

51
00:03:22.007 --> 00:03:23.682
So if we just put class there,

52
00:03:23.682 --> 00:03:27.300
JavaScript is gonna think that,
that's a class, right?

53
00:03:27.300 --> 00:03:28.099
And it's gonna blow up.

54
00:03:30.211 --> 00:03:34.727
Now, some of the build tools are actually
smart enough to build around that anyway,

55
00:03:34.727 --> 00:03:36.070
but just use className.

56
00:03:37.740 --> 00:03:40.278
className is actually the name
of the JavaScript API anyway, so

57
00:03:40.278 --> 00:03:41.878
they're just not making it up, right?

58
00:03:41.878 --> 00:03:45.158
That's actually what inside,
if you search for

59
00:03:45.158 --> 00:03:49.646
domNode.className in MDN,
it'll bring up the JavaScript API.

60
00:03:49.646 --> 00:03:52.635
So that's why it's called className and
not just class.

61
00:03:52.635 --> 00:03:53.953
There's a couple of them.

62
00:03:53.953 --> 00:03:58.410
There's htmlFor instead of fourth
labels and stuff like that.

63
00:03:58.410 --> 00:04:01.979
You'll see that later in the course.

64
00:04:01.979 --> 00:04:03.481
Anyway, search-params.

65
00:04:04.615 --> 00:04:07.134
Okay, we're gonna put a form.

66
00:04:07.134 --> 00:04:10.168
We're gonna put a label.

67
00:04:10.168 --> 00:04:14.979
Actually, we wanna see it now,
htmlFor="location".

68
00:04:16.229 --> 00:04:17.430
Location.

69
00:04:19.035 --> 00:04:22.681
No, capital please, thank you.

70
00:04:22.681 --> 00:04:26.570
Input id="location"

71
00:04:26.570 --> 00:04:32.867
value=(location) placeholder=,

72
00:04:32.867 --> 00:04:37.130
can you guess, location.

73
00:04:42.029 --> 00:04:47.198
Okay, and then in that, we're gonna
put a button, and that's gonna submit.

74
00:04:47.198 --> 00:04:52.008
And we're gonna get rid of class Thing
down there cuz we don't need that, but

75
00:04:52.008 --> 00:04:54.981
we are gonna say export
default SearchParams.

76
00:04:54.981 --> 00:04:57.845
So let's talk about what we did here.

77
00:04:57.845 --> 00:04:58.673
We made a div.

78
00:04:58.673 --> 00:05:00.811
Inside there, we're gonna use a form.

79
00:05:00.811 --> 00:05:05.204
I still ends up using a lot of
forms in JavaScript cuz forms

80
00:05:05.204 --> 00:05:07.980
work very well in browsers.

81
00:05:07.980 --> 00:05:11.920
So why are we gonna try and
recreate forms when forms exist?

82
00:05:11.920 --> 00:05:14.702
So for example,
I don't have to track submitting or

83
00:05:14.702 --> 00:05:18.110
there's a 10 million ways
to submit a form, right?

84
00:05:18.110 --> 00:05:21.078
And you can try and track all of them or
you can just track submit events and

85
00:05:21.078 --> 00:05:22.791
then let the browser handle everything.

86
00:05:22.791 --> 00:05:25.593
And actually, this is not even
the best way to do forms, but

87
00:05:25.593 --> 00:05:29.312
I'm gonna show you this so that you can
understand how React works with hooks.

88
00:05:29.312 --> 00:05:32.567
I'll talk about later what's the ideal and
most lazy way to go about doing this.

89
00:05:32.567 --> 00:05:36.635
In any case, we're gonna make the ability
to search against a pet API, right?

90
00:05:36.635 --> 00:05:41.585
So you can look for pets in Seattle, pets
in Minneapolis, pets in Salt Lake City.

91
00:05:41.585 --> 00:05:45.472
You can search for dogs, for
poodles and things of that nature.

92
00:05:45.472 --> 00:05:47.128
But we're gonna start with location.

93
00:05:47.128 --> 00:05:53.471
So we have a div, we have a form,
we have a label, the labels for location.

94
00:05:53.471 --> 00:05:56.980
We're going to be tracking this.

95
00:05:56.980 --> 00:06:00.729
So we have this location variable up here,
Seattle, Washington, and

96
00:06:00.729 --> 00:06:04.120
we're gonna make that the value
of this input, right?

97
00:06:04.120 --> 00:06:08.238
So when we render this for
the first time, it's gonna have Seattle,

98
00:06:08.238 --> 00:06:10.585
Washington prefilled there, right?

99
00:06:10.585 --> 00:06:13.790
And then the placeholder,
if you delete everything,

100
00:06:13.790 --> 00:06:16.448
is gonna say locations
that people can tell.

101
00:06:16.448 --> 00:06:19.169
That's what this form is for, okay?

102
00:06:19.169 --> 00:06:20.949
So go into app.js.

103
00:06:22.225 --> 00:06:25.877
You can go ahead and delete Pet here.

104
00:06:25.877 --> 00:06:29.920
I'm gonna say import
SearchParams from SearchParams.

105
00:06:33.259 --> 00:06:34.805
And you can just replace all these pets.

106
00:06:34.805 --> 00:06:36.640
We'll reuse the pet component later.

107
00:06:36.640 --> 00:06:39.110
But for now,
this is just gonna be SearchParams.

108
00:06:39.110 --> 00:06:42.725
You'll find that generally,
your top level app component is just gonna

109
00:06:42.725 --> 00:06:46.053
be a collection of page components or
very high level components.

110
00:06:46.053 --> 00:06:46.689
That's very typical.

111
00:06:46.689 --> 00:06:51.015
Again, whenever you're building
an application, it's good to stop and say,

112
00:06:51.015 --> 00:06:54.912
what do I expect to happen before you
just refresh and head over, right?

113
00:06:54.912 --> 00:06:58.750
I expect to render the SearchParams,
which is gonna be this form here

114
00:06:58.750 --> 00:07:02.797
that's gonna have Seattle preform,
then with a button underneath it.

115
00:07:02.797 --> 00:07:05.602
Make sure your dev server is running,
mine is.

116
00:07:05.602 --> 00:07:06.545
And you can see here.

117
00:07:10.143 --> 00:07:12.875
Parcel's pretty smart about
hot module refresh, HMR.

118
00:07:12.875 --> 00:07:17.003
So typically, when you say that it'll
just automatically refresh page,

119
00:07:17.003 --> 00:07:19.570
but sometimes you do
have to refresh the page.

120
00:07:20.780 --> 00:07:24.391
Couple things I wanna call
out just about Parcel.

121
00:07:24.391 --> 00:07:28.401
One, you're still probably seeing,
Some errors in here.

122
00:07:28.401 --> 00:07:30.120
That's totally fine.

123
00:07:31.330 --> 00:07:33.041
Basically, React is teaching you for me.

124
00:07:33.041 --> 00:07:37.403
I'm about to teach you what this error
does, but the development mode of React

125
00:07:37.403 --> 00:07:41.252
will catch a lot of these problems
before you even know you have them.

126
00:07:41.252 --> 00:07:44.425
And then one thing that you
sometimes will see with Parcel,

127
00:07:44.425 --> 00:07:48.120
you'll see this warning that
connection to the HMR server's lost.

128
00:07:48.120 --> 00:07:50.050
Just ignore that.

129
00:07:50.050 --> 00:07:53.459
When you refresh the page, it'll sever
the connection, which you'll be like, no,

130
00:07:53.459 --> 00:07:56.605
something bad happened when in reality,
it's like you just refreshed the page.

131
00:07:56.605 --> 00:07:57.970
It's fine, Parcel, don't freak out.

132
00:08:01.019 --> 00:08:04.686
Okay, so in other words,
ignore the console for now.

133
00:08:07.766 --> 00:08:12.246
Okay, so now we have this page,
we have this location thing in here.

134
00:08:12.246 --> 00:08:14.917
I want you to try and type in that input.

135
00:08:18.024 --> 00:08:20.288
Doesn't work, right?

136
00:08:20.288 --> 00:08:22.525
Nothing's happening.

137
00:08:22.525 --> 00:08:25.850
That's pretty hard to do.

138
00:08:25.850 --> 00:08:29.632
It's pretty hard to break an HTML input,
right?

139
00:08:29.632 --> 00:08:31.331
But let's talk about why.

140
00:08:31.331 --> 00:08:36.808
Every time that I push a button on here,
React catches that event and

141
00:08:36.808 --> 00:08:43.070
says something happened, time to
rerender my entire application, right?

142
00:08:44.170 --> 00:08:47.937
So it's gonna catch, okay,
user press the letter T, right?

143
00:08:47.937 --> 00:08:50.496
And then it kicks off a rerender cycle.

144
00:08:50.496 --> 00:08:51.481
Then you'd go and

145
00:08:51.481 --> 00:08:56.155
rerender this SearchParams cuz it knows
that's where the event came from, right?

146
00:08:56.155 --> 00:08:58.061
It came from this input.

147
00:08:58.061 --> 00:09:01.534
And then it's going to
rerender this again.

148
00:09:01.534 --> 00:09:04.653
Well, what's the value of location here?

149
00:09:07.292 --> 00:09:09.596
Seattle, WA, right?

150
00:09:09.596 --> 00:09:11.829
What changes that?

151
00:09:11.829 --> 00:09:14.770
Nothing, right?

152
00:09:14.770 --> 00:09:17.528
It's a constant,
it's just always Seattle, Washington.

153
00:09:17.528 --> 00:09:20.880
If you don't change it, it doesn't change.

154
00:09:20.880 --> 00:09:25.960
So every time you do a rerender,
it's doing exactly what you told it to do,

155
00:09:25.960 --> 00:09:28.150
surprise, surprise, right?

156
00:09:29.390 --> 00:09:33.132
So we have to make it, again, to borrow
the computer science term, mutable, right?

157
00:09:33.132 --> 00:09:34.720
We have to make it changeable.

