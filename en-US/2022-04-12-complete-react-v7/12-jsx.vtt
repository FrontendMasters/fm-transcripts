WEBVTT

1
00:00:00.060 --> 00:00:03.680
The question is,
do you need import React from react?

2
00:00:03.680 --> 00:00:04.940
The answer is no.

3
00:00:04.940 --> 00:00:06.660
But I'll show you that in just a second.

4
00:00:06.660 --> 00:00:12.706
So we went through all the JS Tools, and
we're now pretty set up to get going and

5
00:00:12.706 --> 00:00:16.430
off to the races with our now build step.

6
00:00:16.430 --> 00:00:20.209
We don't have to do too much
with setting up tooling anymore.

7
00:00:20.209 --> 00:00:22.862
So basically what we
did here is we more or

8
00:00:22.862 --> 00:00:26.148
less set up our own
Create React App environment.

9
00:00:26.148 --> 00:00:29.400
What we did is basically what
Create React App does for

10
00:00:29.400 --> 00:00:32.952
you it has a little bit more
we haven't set up TypeScript.

11
00:00:32.952 --> 00:00:35.686
Nothing really needs to do much more for
that.

12
00:00:35.686 --> 00:00:39.880
We didn't set up testing, but
JS is pretty easy to set up.

13
00:00:39.880 --> 00:00:42.772
And again, both of those are an
intermediate react if you want to learn

14
00:00:42.772 --> 00:00:43.370
them anyway.

15
00:00:45.260 --> 00:00:49.494
Suffice to say that's more or
less what Create React App does for you.

16
00:00:49.494 --> 00:00:55.574
But now you know what it does for
you instead of being some mystery, Okay so

17
00:00:55.574 --> 00:01:00.516
let's hop into JSX here.

18
00:01:00.516 --> 00:01:05.594
Again there's a kind of a cut
point here that you can go to at

19
00:01:05.594 --> 00:01:10.891
the Enter browsers list you
can go to this 02-js-tools.

20
00:01:10.891 --> 00:01:13.680
And then I'll take you to like the state
of the world now which is like all

21
00:01:13.680 --> 00:01:14.902
the build tools are now set up.

22
00:01:14.902 --> 00:01:18.634
So far we've been writing react
without any sort of build step, right,

23
00:01:18.634 --> 00:01:22.135
we've just been writing it
directly with React.Createelement.

24
00:01:22.135 --> 00:01:27.105
Let me tell you that I'm gonna say most, I
will I want to say like 95% but let's just

25
00:01:27.105 --> 00:01:32.029
go with most react developers don't even
know that React.createElement is a API.

26
00:01:32.029 --> 00:01:34.221
They probably never heard of it before.

27
00:01:34.221 --> 00:01:38.182
That's because you're never gonna
write it again after I show you JSX.

28
00:01:39.192 --> 00:01:43.169
Because JSX basically takes,
HTML and translate it into these

29
00:01:43.169 --> 00:01:47.755
React.createElement calls you just
don't never have to worry about.

30
00:01:47.755 --> 00:01:50.602
So let me show you what I'm talking about.

31
00:01:50.602 --> 00:01:56.012
Let's start with pet because like pets
really a simple component, right?

32
00:01:56.012 --> 00:01:57.132
There's not a lot to this.

33
00:01:59.010 --> 00:02:02.895
So, to the former question that was asked,

34
00:02:02.895 --> 00:02:06.780
do you need to import
React from react here?

35
00:02:08.290 --> 00:02:13.154
It used to be before
the most recent version of

36
00:02:13.154 --> 00:02:17.127
the React JSX transform from Babel.

37
00:02:17.127 --> 00:02:22.065
That any word that you wrote JSX you
had to import react from react even if

38
00:02:22.065 --> 00:02:26.923
you weren't explicitly using it,
because the code that we're about

39
00:02:26.923 --> 00:02:30.820
to write with JSX would
translate to this code, right?

40
00:02:30.820 --> 00:02:32.276
We're going to rewrite this in JSX.

41
00:02:32.276 --> 00:02:38.730
You won't see react anywhere anymore,
but you used to have to have it there.

42
00:02:38.730 --> 00:02:41.629
Now it's smart enough to say like okay
if you're using JSX here I'm gonna

43
00:02:41.629 --> 00:02:42.294
important now.

44
00:02:42.294 --> 00:02:43.965
So you can actually drop line one here but

45
00:02:43.965 --> 00:02:47.212
just know underneath the hood it actually
is still there it's just being put in

46
00:02:47.212 --> 00:02:49.543
there by your tools instead
of having to do it yourself.

47
00:02:49.543 --> 00:02:52.120
I'm just going to comment this out so
you can kind of see what it

48
00:02:52.120 --> 00:02:55.010
looks like when we rewrite it but
we're going to rewrite this in JSX.

49
00:02:57.610 --> 00:03:02.930
So const Pet = props is the function here.

50
00:03:02.930 --> 00:03:04.310
So let's talk about this for a second.

51
00:03:05.520 --> 00:03:12.948
Here we are writing JavaScript and
that JavaScript is imitating HTML, right?

52
00:03:12.948 --> 00:03:16.536
You're writing divs and
inside of the divs there's an h1 and

53
00:03:16.536 --> 00:03:19.791
inside of the h1 there's
a name right it's XML right.

54
00:03:19.791 --> 00:03:25.117
We're basically writing XML because HTML
is XML, I know XML is like a triggering

55
00:03:25.117 --> 00:03:30.146
word for some of us present company
included but that's what HTML is right.

56
00:03:30.146 --> 00:03:34.398
So if we're writing
JavaScript to mimic HTML,

57
00:03:34.398 --> 00:03:39.499
wouldn't it be nice if we could
just write HTML instead of

58
00:03:39.499 --> 00:03:44.515
having this translation in
our brain from JavaScript?

59
00:03:44.515 --> 00:03:48.352
Well, basically, you think of
HTML then you write JavaScript,

60
00:03:48.352 --> 00:03:49.898
which then outputs HTML.

61
00:03:49.898 --> 00:03:54.999
It'd be nice if we could just write HTML,
and skip that middle a cognitive step.

62
00:03:54.999 --> 00:03:58.990
That is the point of JSX is it allows
us to skip the middle cognitive step.

63
00:04:00.080 --> 00:04:02.965
So instead of writing this,
I want you to say return.

64
00:04:05.674 --> 00:04:08.887
And we're gonna put a div here,
just directly into our code.

65
00:04:10.291 --> 00:04:12.364
And then we're gonna put an h1 here.

66
00:04:12.364 --> 00:04:18.160
Gonna use curly braces to signify that
like I want to output code here right so

67
00:04:18.160 --> 00:04:19.348
props.name.

68
00:04:23.367 --> 00:04:25.150
Props.animal.

69
00:04:29.564 --> 00:04:36.636
Props.breed these two things
do exactly the same thing.

70
00:04:38.509 --> 00:04:44.493
Now let's kind of dissect let's talk
about our feelings for a second.

71
00:04:48.278 --> 00:04:52.434
Like if you've been a developer as long
as I have, we spent years and years, and

72
00:04:52.434 --> 00:04:54.930
years trying to get
JavaScript out of our HTML.

73
00:04:56.540 --> 00:04:58.669
So why the hell are we sticking
HTML into our JavaScript?

74
00:04:58.669 --> 00:05:02.987
Right seems like kind of a an inversion
of what we were trying to like back from

75
00:05:02.987 --> 00:05:06.840
the prototype and Moodle tools and
previous times to that, right.

76
00:05:06.840 --> 00:05:09.876
You just put your OnClickListener
directly in HTML and it was a mess.

77
00:05:11.853 --> 00:05:14.085
So, why are we doing this
in kind of in reverse?

78
00:05:14.085 --> 00:05:16.470
And it's just exactly,
what I'm telling you right now that,

79
00:05:16.470 --> 00:05:19.030
it allows us to kind of skip
that cognitive overhead.

80
00:05:19.030 --> 00:05:21.730
This gets translated to this precisely.

81
00:05:21.730 --> 00:05:22.904
If you go look to the compiled code,

82
00:05:22.904 --> 00:05:24.518
I don't think it looks
any different from this.

83
00:05:24.518 --> 00:05:26.870
It might actually literally
be precisely this.

84
00:05:26.870 --> 00:05:29.464
It just makes everything more readable,
and more obvious, and

85
00:05:29.464 --> 00:05:30.900
there's no magic here.

86
00:05:30.900 --> 00:05:34.125
JSX is not doing anything more than this.

87
00:05:34.125 --> 00:05:36.230
It's just a thin layer
of sugar on top of it.

88
00:05:36.230 --> 00:05:41.127
I wanna give you one more
kind of high sort of kinda

89
00:05:41.127 --> 00:05:44.600
concept about how to write React.

90
00:05:46.260 --> 00:05:51.229
If you've ever written things like
backbone, it's like the principal one that

91
00:05:51.229 --> 00:05:55.333
I can think of, we used to have
this model and view and controller.

92
00:05:55.333 --> 00:05:58.084
And if you've ever written
things like Django or rails or

93
00:05:58.084 --> 00:06:01.350
something like that it's
a very common practice.

94
00:06:01.350 --> 00:06:05.958
When I was starting writing HTML code, we
basically just shoved everything about all

95
00:06:05.958 --> 00:06:09.362
of our JavaScript and our HTML and
CSS all together in one file.

96
00:06:09.362 --> 00:06:12.827
And they were giant messes and
they were like 900 lines,

97
00:06:12.827 --> 00:06:16.655
and it was spaghetti code and
was really difficult to pull apart.

98
00:06:16.655 --> 00:06:20.383
And so some wise people that created
Backbone came along and said,

99
00:06:20.383 --> 00:06:24.790
hey, this works really well on the server
to have this Model View Controller.

100
00:06:24.790 --> 00:06:27.633
Let's pull everything apart and
put them into different areas and

101
00:06:27.633 --> 00:06:29.925
that's how we're gonna
write our JavaScript code.

102
00:06:29.925 --> 00:06:31.790
And so they did that for
a while so that Backbone came out.

103
00:06:31.790 --> 00:06:35.078
Marionette was on top of that, that
made it a lot nicer to write backbone.

104
00:06:35.078 --> 00:06:38.448
We had angular, we had ember and
those were kind of the,

105
00:06:38.448 --> 00:06:41.570
knockout was another good one as well.

106
00:06:41.570 --> 00:06:46.154
These kind of JavaScript frameworks
that came along that adopted this kind

107
00:06:46.154 --> 00:06:48.780
of server side paradigm and it was better.

108
00:06:48.780 --> 00:06:53.697
There was a big difference the problem
with that when you had a like a bug and

109
00:06:53.697 --> 00:06:57.027
backbone you have to traverse
a model of view, and

110
00:06:57.027 --> 00:07:00.773
a view controller to figure
out what happened, right?

111
00:07:00.773 --> 00:07:03.754
You have to jump between a lot
of files and go back and forth.

112
00:07:03.754 --> 00:07:05.758
So we were trying to separate concerns,
right.

113
00:07:05.758 --> 00:07:09.185
That's the point of like, this does
one thing, this does one thing, and

114
00:07:09.185 --> 00:07:10.192
this does one thing.

115
00:07:10.192 --> 00:07:12.798
And you really hope that if there's
a problem with the data that it was with

116
00:07:12.798 --> 00:07:14.197
the model, that wasn't always true.

117
00:07:14.197 --> 00:07:15.859
It could have been with
the view controller,

118
00:07:15.859 --> 00:07:18.096
it could have been with the view and
how they were connected.

119
00:07:18.096 --> 00:07:23.160
And so the concerns were never separated
and these are all their frameworks, right?

120
00:07:23.160 --> 00:07:26.390
It was always across multiple files,
it was always difficult to pull apart.

121
00:07:27.970 --> 00:07:31.672
React kinda came along and
they rethought this paradigm of,

122
00:07:31.672 --> 00:07:36.770
what if we're thinking about separation
of control along the wrong axes, right?

123
00:07:36.770 --> 00:07:40.710
Instead of having trying to separate
artificially these concerns that don't

124
00:07:40.710 --> 00:07:44.960
really exist in the browser, like we're
not reading two databases, for example.

125
00:07:45.970 --> 00:07:49.605
What if we took all of the concerns,
the model, the view and

126
00:07:49.605 --> 00:07:54.434
the view controller concerns shove them
together for very small components?

127
00:07:54.434 --> 00:07:58.300
So instead of having this idea of like,
I have a counter and the UI,

128
00:07:58.300 --> 00:08:01.020
the counter really lives in the view.

129
00:08:01.020 --> 00:08:03.307
And the connection layer lives
in the view controller and

130
00:08:03.307 --> 00:08:05.330
the way I store it lives in the model.

131
00:08:05.330 --> 00:08:08.382
What if we put everything for the counter
together in one very small counter

132
00:08:08.382 --> 00:08:10.570
component and
then everything's in one component?

133
00:08:11.820 --> 00:08:16.349
So that's the idea here is we're
taking the separation of concerns and

134
00:08:16.349 --> 00:08:19.444
we're breaking it down across components,
and

135
00:08:19.444 --> 00:08:22.477
we're making components
that are very small.

136
00:08:22.477 --> 00:08:26.265
The one component does one thing and
does it really well.

137
00:08:26.265 --> 00:08:29.054
And then we'll make lots of components and

138
00:08:29.054 --> 00:08:32.157
will compose components
of other components.

139
00:08:32.157 --> 00:08:35.650
That's the React method that's
the React way of thinking.

140
00:08:35.650 --> 00:08:40.224
So you're going to find that we're going
to put the view which is the HTML.

141
00:08:40.224 --> 00:08:44.730
You can put the style in here too if you
want to use something like Tailwind which

142
00:08:44.730 --> 00:08:46.653
will use an intermediate react.

143
00:08:46.653 --> 00:08:48.632
Or you can put CSS modules or SASS or

144
00:08:48.632 --> 00:08:52.810
whatever you can it will put that all
together for one little component.

145
00:08:52.810 --> 00:08:56.382
So this pet component, if there's ever
a problem with pet or it's not displaying

146
00:08:56.382 --> 00:09:00.325
correctly or the data is not translating
correctly or something like that.

147
00:09:00.325 --> 00:09:00.943
We know it's here.

148
00:09:00.943 --> 00:09:03.944
It's in this component we know
exactly where to go to the bucket and

149
00:09:03.944 --> 00:09:05.991
that's really, really powerful, right?

150
00:09:05.991 --> 00:09:08.880
Exactly how to debug your components.

151
00:09:08.880 --> 00:09:12.307
Okay,diatribe over.

152
00:09:12.307 --> 00:09:15.165
I don't know if I'm supposed to
say that then, but I sai it then.

153
00:09:15.165 --> 00:09:16.535
So here we are.

154
00:09:16.535 --> 00:09:17.715
It's a little weird, right?

155
00:09:17.715 --> 00:09:22.528
Like I know it feels weird writing HTML in
your in your JavaScript but it makes sense

156
00:09:22.528 --> 00:09:26.663
like when you kind of frame it of like
I'm writing code to get this way.

157
00:09:26.663 --> 00:09:31.575
So why don't I just make it look that way
I also say that JSX was not the first time

158
00:09:31.575 --> 00:09:32.996
they tried to do this.

159
00:09:32.996 --> 00:09:35.506
The last ES4 right so there was ES3,

160
00:09:35.506 --> 00:09:40.140
which was forever ago then there was ES5,
which is what I started on.

161
00:09:40.140 --> 00:09:45.770
And there's ES6 there was a last ES4 or
harmony was what it was called.

162
00:09:45.770 --> 00:09:52.097
They actually made a thing called I think
it's like JE4X, J4X something like that.

163
00:09:52.097 --> 00:09:54.578
Anyway, Mozilla tried
to do this way before,

164
00:09:54.578 --> 00:09:58.406
they tried to make an XML a native type
in JavaScript and it just blew up.

165
00:09:58.406 --> 00:10:00.239
And so
it never actually ended up happening but

166
00:10:00.239 --> 00:10:01.371
they did try to do it before.

167
00:10:01.371 --> 00:10:06.353
&gt;&gt; Does the JSX still get transformed
in the Create Element calls?

168
00:10:06.353 --> 00:10:11.886
And because of JSX now we
don't need him or react.

169
00:10:11.886 --> 00:10:12.806
&gt;&gt; Yeah, that's correct.

170
00:10:12.806 --> 00:10:16.181
That's correct assessment.

171
00:10:16.181 --> 00:10:19.807
Anything that you're using JSX now
it's smart enough to say cool,

172
00:10:19.807 --> 00:10:21.726
I'm going to import react for you.

173
00:10:21.726 --> 00:10:23.475
You might have some ESLint problems here?

174
00:10:23.475 --> 00:10:24.428
That's fine.

175
00:10:24.428 --> 00:10:27.322
We'll get to the point where
we'll fix all of ESLint, so

176
00:10:27.322 --> 00:10:28.898
just ignore ESLint for a time.

177
00:10:28.898 --> 00:10:30.885
I'm very good at ignoring
ESLint by the way.

178
00:10:30.885 --> 00:10:34.273
&gt;&gt; That's on renaming JS to JSX.

179
00:10:34.273 --> 00:10:38.252
&gt;&gt; That's a good question,
definitely worth covering here.

180
00:10:38.252 --> 00:10:42.991
So, this is another kind of like argument
that people like to have that no one

181
00:10:42.991 --> 00:10:44.920
should give any cares about.

182
00:10:44.920 --> 00:10:49.365
So there's a school of thought
that basically says like,

183
00:10:49.365 --> 00:10:55.185
if I'm putting JSX in a document,
I should rename this file to be pet.jsx.

184
00:10:55.185 --> 00:10:57.593
And you do get that little
satisfying react logo there, so

185
00:10:57.593 --> 00:10:58.930
that's a good reason, right.

186
00:10:58.930 --> 00:11:00.650
It's not I'm kidding,
it's not a good reason.

187
00:11:03.290 --> 00:11:06.370
And my answer that is I do not care.

188
00:11:06.370 --> 00:11:07.660
I don't care either way.

189
00:11:07.660 --> 00:11:09.795
I used to do it and
old versions of this course I do it and

190
00:11:09.795 --> 00:11:11.080
some tools require you to do it.

191
00:11:11.080 --> 00:11:14.341
So sometimes you just have to do it.

192
00:11:14.341 --> 00:11:17.888
I used to do it more and
I used to care more about it.

193
00:11:17.888 --> 00:11:20.969
I had this idea of like if
I'm using JSX and a file and

194
00:11:20.969 --> 00:11:24.131
I'll name it digests x and
if I'm not that I won't.

195
00:11:24.131 --> 00:11:25.260
Why does that matter?

196
00:11:25.260 --> 00:11:28.890
Why can I not just open the file and
say, there's JSX here?

197
00:11:28.890 --> 00:11:32.232
Why do I need to know in advance
because the name, the JSX is there?

198
00:11:32.232 --> 00:11:36.580
I don't, and then I think it was
Dan Abramov, who's one of the core team

199
00:11:36.580 --> 00:11:41.390
members for React made the point of like,
you don't name it pet.babbel.js.

200
00:11:41.390 --> 00:11:42.478
You don't name it for

201
00:11:42.478 --> 00:11:46.051
all the build tools that have to
work on every file that's pointless.

202
00:11:46.051 --> 00:11:47.995
So why are we putting JSX?

203
00:11:47.995 --> 00:11:50.549
It's a valid point.

204
00:11:50.549 --> 00:11:54.624
So I loop back around to I no longer
care so you can do either way.

205
00:11:54.624 --> 00:11:59.298
I will say that when we get to TypeScript
you have to name it TSX because

206
00:11:59.298 --> 00:12:04.055
that's the build tool requires like
it will not do the transformation

207
00:12:04.055 --> 00:12:06.088
list there's an X on the end.

208
00:12:06.088 --> 00:12:08.794
So in that case it does matter.

209
00:12:08.794 --> 00:12:13.912
So unsurprisingly sorry personally but
my answer is yet again I do not care.

210
00:12:13.912 --> 00:12:18.031
So I just say follow whatever the project
is doing and in this case I just followed

211
00:12:18.031 --> 00:12:22.660
whatever the React core team is following
because that decent opinion, right?

212
00:12:22.660 --> 00:12:25.963
But he won't offend me if I
jump into your project and

213
00:12:25.963 --> 00:12:28.754
there's .JSX this just doesn't matter.

214
00:12:28.754 --> 00:12:35.032
So you can delete this now but
that's what JSX is and

215
00:12:35.032 --> 00:12:42.479
now we get to write you know
much more pleasant looking code.

216
00:12:42.479 --> 00:12:47.268
This is just less dense, right, this
reads like it's about to, like renders.

217
00:12:47.268 --> 00:12:49.268
Which is why I'm a big fan of JSX.

218
00:12:51.516 --> 00:12:54.154
Okay so let's go refactorapp.js.

219
00:12:56.606 --> 00:13:01.311
So we have all of these stuff,
you can just

220
00:13:01.311 --> 00:13:06.430
comment it out and
now we can say const App =,

221
00:13:10.274 --> 00:13:15.703
And we'll say return,

222
00:13:15.703 --> 00:13:20.868
div, h1, Adopt Me.

223
00:13:20.868 --> 00:13:27.847
Pet and then we say pet=Luna,

224
00:13:27.847 --> 00:13:31.605
animal=dog and

225
00:13:31.605 --> 00:13:36.175
breed=havanese.

226
00:13:36.175 --> 00:13:42.462
So, this is a self closing tag, right?

227
00:13:42.462 --> 00:13:47.400
So I'm not going to have anything
between right I'm not gonna have

228
00:13:47.400 --> 00:13:49.170
a pet closing tag here.

229
00:13:51.190 --> 00:13:52.780
Like this, right?

230
00:13:52.780 --> 00:13:57.885
You can with custom components that just
gets passed down as a children prop.

231
00:13:57.885 --> 00:14:02.874
So if I did that, then here in pet.js I'd
have a props.children, which is fine,

232
00:14:02.874 --> 00:14:04.390
you can totally do that.

233
00:14:04.390 --> 00:14:05.570
We'll do it later actually.

234
00:14:07.440 --> 00:14:10.860
But only that this is a void tag or
a self closing tag.

235
00:14:10.860 --> 00:14:13.170
It's self contained,
it contains no children.

236
00:14:14.490 --> 00:14:19.166
This would be valid HTML with its
avoid tag it's not valid JSX.

237
00:14:19.166 --> 00:14:23.094
So you actually have to have
that closing slash there.

238
00:14:23.094 --> 00:14:26.981
So that's a limitation of
JSX just get used to it.

239
00:14:26.981 --> 00:14:30.267
So for example you can have inputs,
right and

240
00:14:30.267 --> 00:14:35.557
inputs you do not have to have the slash
at the end, right of the void tag.

241
00:14:35.557 --> 00:14:36.875
In JSX, you must.

242
00:14:36.875 --> 00:14:39.244
So, get used to that.

243
00:14:41.452 --> 00:14:44.192
&gt;&gt; But not /pet right?

244
00:14:44.192 --> 00:14:46.336
You couldn't do either or?

245
00:14:46.336 --> 00:14:48.473
&gt;&gt; Couldn't.

246
00:14:48.473 --> 00:14:51.495
&gt;&gt; You couldn't do the, like yes.

247
00:14:51.495 --> 00:14:53.320
&gt;&gt; You can leave it like
this this is totally fine.

248
00:14:53.320 --> 00:14:55.292
&gt;&gt; Okay.

249
00:14:55.292 --> 00:14:58.513
&gt;&gt; Yeah, if I save it in my no it
doesn't they used to collapse so

250
00:14:58.513 --> 00:15:02.380
prettier used to collapse that it
doesn't know I guess but this is fine.

251
00:15:04.400 --> 00:15:07.570
But that's significantly less keystrokes.

252
00:15:09.010 --> 00:15:14.343
Okay, I'm gonna make
three copies of that and

253
00:15:14.343 --> 00:15:21.750
this one's pepper burger cockatiel and
this is Deutsche Bank.

254
00:15:21.750 --> 00:15:26.756
&gt;&gt; To the cat, which is MCs.

255
00:15:26.756 --> 00:15:30.473
So you can see these props that
you pass down look just like

256
00:15:30.473 --> 00:15:33.655
normal props that you would put on HTML,
right?

257
00:15:33.655 --> 00:15:40.964
So for example, I could say id=my app or
something like that.

258
00:15:42.337 --> 00:15:45.900
And this would be rendered out
as the ID on the app, right?

259
00:15:45.900 --> 00:15:47.584
So these two things work the same way.

260
00:15:52.441 --> 00:15:57.170
So again, I say that would you agree that

261
00:15:57.170 --> 00:16:01.629
this is a lot easier to read than this?

262
00:16:01.629 --> 00:16:06.527
Most people once they start writing JSX,
they're like okay I

263
00:16:06.527 --> 00:16:11.422
feel a little bit gross putting
my HTML in my Java scripts, but

264
00:16:11.422 --> 00:16:14.637
this is pretty cool so I'd say stick to it

265
00:16:16.847 --> 00:16:22.576
I can delete that instead of having
the React.create element here,

266
00:16:22.576 --> 00:16:25.460
you can just have app, like that.

267
00:16:25.460 --> 00:16:28.007
But just keep in mind, the only black

268
00:16:28.007 --> 00:16:32.781
magic here is this is getting
translated to React.create element.

269
00:16:32.781 --> 00:16:35.718
And now that I've shown you all this,
we are never going to talk about

270
00:16:35.718 --> 00:16:38.724
Create Element again,
we're just gonna pretend to doesn't exist.

271
00:16:38.724 --> 00:16:41.390
You'll never have to know that
that's the name of the API.

272
00:16:41.390 --> 00:16:44.530
You'll never write Create Element
directly, ever again.

273
00:16:44.530 --> 00:16:48.886
One you'll notice that I'm getting app and
pet warnings.

274
00:16:48.886 --> 00:16:52.150
It's like hey, pets imported,
but not used anywhere.

275
00:16:54.190 --> 00:16:55.070
The ad is, right?

276
00:16:55.070 --> 00:16:57.461
Of course it is.

277
00:16:57.461 --> 00:17:02.255
We have not augmented, ESLint to the point
where it can understand JSX code yet,

278
00:17:02.255 --> 00:17:04.240
which is we're about to do that.

279
00:17:05.350 --> 00:17:09.504
But before we do that, does anyone
have any questions about the app.js or

280
00:17:09.504 --> 00:17:11.651
anything like that or JSX in general.

281
00:17:14.731 --> 00:17:15.417
Yeah?

282
00:17:15.417 --> 00:17:18.738
&gt;&gt; It's maybe a little too granular but
if you just passed an app to render,

283
00:17:18.738 --> 00:17:21.576
you would just pass in the function
right you have to put it in.

284
00:17:25.129 --> 00:17:26.794
&gt;&gt; Yeah, so what if you did this?

285
00:17:26.794 --> 00:17:27.489
&gt;&gt; Yeah.

286
00:17:29.821 --> 00:17:30.776
&gt;&gt; What's a good example?

287
00:17:30.776 --> 00:17:34.624
It'd be going to get your passport stamped
and they just handed you the stairs.

288
00:17:34.624 --> 00:17:35.228
&gt;&gt; Yes.

289
00:17:35.228 --> 00:17:36.330
&gt;&gt; Yeah, right?

290
00:17:36.330 --> 00:17:39.443
Or you ordered a car and
they're just like,

291
00:17:39.443 --> 00:17:42.733
here's a line of cars called Civics,
right?

292
00:17:42.733 --> 00:17:44.176
And you wouldn't actually get a car,

293
00:17:44.176 --> 00:17:46.307
you would just the the amorphous
concept of specifics.

294
00:17:46.307 --> 00:17:46.925
&gt;&gt; Yes, okay.

295
00:17:46.925 --> 00:17:50.451
&gt;&gt; [LAUGH]
&gt;&gt; Just generally not what you want,

296
00:17:50.451 --> 00:17:51.063
right?

