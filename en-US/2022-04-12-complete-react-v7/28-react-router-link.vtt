WEBVTT

1
00:00:00.147 --> 00:00:03.080
Let's head over to your details page and

2
00:00:03.080 --> 00:00:07.319
let's make it a little bit
more interesting to work with.

3
00:00:11.766 --> 00:00:13.974
No, we're not gonna do that,
we're gonna do pets first.

4
00:00:13.974 --> 00:00:18.539
So let's go to pet.js.

5
00:00:18.539 --> 00:00:21.861
So let's discuss a problem
that we have yet right now.

6
00:00:21.861 --> 00:00:24.263
This is not a problem,
this is art right there.

7
00:00:24.263 --> 00:00:29.531
[LAUGH]
So

8
00:00:29.531 --> 00:00:36.769
on this page, if I click on Luna right
now, it will take me to the correct page,

9
00:00:36.769 --> 00:00:41.062
but it's actually doing
a full page refresh.

10
00:00:41.062 --> 00:00:42.115
I'm pretty sure it is.

11
00:00:42.115 --> 00:00:43.435
That's it.

12
00:00:43.435 --> 00:00:46.826
A good question, but
I think it is doing a full page refresh.

13
00:00:50.161 --> 00:00:55.146
Now, what would be better and what would
allow us to worry less about is if

14
00:00:55.146 --> 00:00:58.848
react router could take care
of all that stuff for us.

15
00:00:58.848 --> 00:01:01.289
I don't think it always does
a full page refresh, but

16
00:01:01.289 --> 00:01:03.729
I think it has the potential
to do a full page refresh,

17
00:01:03.729 --> 00:01:06.949
which you don't wanna do if you're
doing a single page application.

18
00:01:06.949 --> 00:01:09.040
So instead of using an a tag here,

19
00:01:09.040 --> 00:01:12.571
what we wanna use is a link
component from react router.

20
00:01:16.169 --> 00:01:20.403
So basically,
instead of this a here, oops,

21
00:01:23.050 --> 00:01:26.707
I'm going to put a link and link.

22
00:01:26.707 --> 00:01:34.959
And instead of saying href,
they want you to say to, Now,

23
00:01:34.959 --> 00:01:40.805
the end result of what comes out of link
is still an anchor tag, an a tag, right?

24
00:01:40.805 --> 00:01:43.736
But now,
it has a bunch of additional logic.

25
00:01:43.736 --> 00:01:48.462
So for example, if I move this component
around, its relative path will always be

26
00:01:48.462 --> 00:01:51.627
correct to whatever browser
router context it's in.

27
00:01:51.627 --> 00:01:53.956
So one, that's a huge benefit.

28
00:01:53.956 --> 00:01:58.858
And it handles a bunch of stuff with
relation to react router that we don't

29
00:01:58.858 --> 00:02:03.141
have to worry about as long as we
use link texts instead of aText.

30
00:02:03.141 --> 00:02:07.605
So now, if we go back over here and
refresh the page, go back to the homepage,

31
00:02:11.919 --> 00:02:14.457
Notice that everything
still works the same.

32
00:02:14.457 --> 00:02:18.899
If you look at it, it's still a a tag.

33
00:02:18.899 --> 00:02:21.843
That's not coming up, but
you can trust me that it's an a tag.

34
00:02:24.675 --> 00:02:26.028
Why is doing that?

35
00:02:26.028 --> 00:02:28.285
That's unfun.

36
00:02:32.773 --> 00:02:34.969
In any case, there we go.

37
00:02:34.969 --> 00:02:36.439
So that's it.

38
00:02:36.439 --> 00:02:40.013
As long as you're doing
internal links to your website,

39
00:02:40.013 --> 00:02:42.926
just use the link
component instead of aText.

40
00:02:42.926 --> 00:02:45.043
Notice here that I'm still
giving it a class name.

41
00:02:45.043 --> 00:02:48.852
Whatever you do there,
it'll just pass along, so

42
00:02:48.852 --> 00:02:54.181
you can absolutely give it an ID or
whatever you need to do there as well.

43
00:02:54.181 --> 00:02:56.765
Okay, why are you upset?

44
00:02:56.765 --> 00:02:59.545
This needs a key cuz I deleted it earlier.

45
00:02:59.545 --> 00:03:01.098
Put it back, okay.

46
00:03:01.098 --> 00:03:02.583
&gt;&gt; And about the link component-
&gt;&gt; Mm-hm.

47
00:03:02.583 --> 00:03:06.613
&gt;&gt; So fundamentally,
what it's doing, it's just loading.

48
00:03:06.613 --> 00:03:08.533
How do you describe
what it's doing really?

49
00:03:08.533 --> 00:03:15.802
Again, just we're loading our subsequent
components, but not the main App js.

50
00:03:15.802 --> 00:03:18.842
Cuz I think what we accomplished there
was we're not refreshing the whole

51
00:03:18.842 --> 00:03:19.489
page, right?

52
00:03:19.489 --> 00:03:21.992
We're refreshing-
&gt;&gt; All right, that part, yes.

53
00:03:21.992 --> 00:03:25.528
So it's just gonna manage
the internal navigation for you and

54
00:03:25.528 --> 00:03:27.505
you don't have to worry about it.

55
00:03:27.505 --> 00:03:31.826
And probably just as importantly is,
right now, we only have one router and

56
00:03:31.826 --> 00:03:33.379
one layer of nesting here,

57
00:03:33.379 --> 00:03:37.382
which is honestly gonna be fairly
frequently the case for most of you.

58
00:03:37.382 --> 00:03:40.977
But certainly,
if you had multiple different layers,

59
00:03:40.977 --> 00:03:42.819
that could be problematic.

60
00:03:42.819 --> 00:03:44.860
So it could handle all that stuff for
you as well.

61
00:03:44.860 --> 00:03:47.860
Constructing the URLs, basically,
is what I'm trying to say.

62
00:03:47.860 --> 00:03:52.957
Now, one thing that is a foot gun that
I'm just gonna put out there for you is,

63
00:03:52.957 --> 00:03:58.309
let's say I had this h1 outside here, and
I wanted to put like a link tag in here.

64
00:03:58.309 --> 00:04:02.506
I can't,
because outside of browser router.

65
00:04:02.506 --> 00:04:05.026
So anytime that you're using a link tag,

66
00:04:05.026 --> 00:04:07.693
it has to be inside a browser router,
yeah.

67
00:04:07.693 --> 00:04:11.739
&gt;&gt; Are there times where you would

68
00:04:11.739 --> 00:04:16.724
use an anchor tag instead of the link?

69
00:04:16.724 --> 00:04:19.707
&gt;&gt; I mean,
if you're going to link to a third party,

70
00:04:19.707 --> 00:04:21.992
that would be a good example of one to.

71
00:04:24.858 --> 00:04:26.886
But internal to your app, probably not.

72
00:04:26.886 --> 00:04:29.037
Yeah, none that I can think of.

73
00:04:29.037 --> 00:04:34.554
Okay, let's go over to Details.js, and

74
00:04:34.554 --> 00:04:41.006
here react router 6 now
only exposes a hooks API.

75
00:04:41.006 --> 00:04:46.883
They used to have an older, you'd call
them higher order components sort of API,

76
00:04:46.883 --> 00:04:49.365
and they just ditched it totally.

77
00:04:49.365 --> 00:04:51.676
I have mixed feelings on that.

78
00:04:53.524 --> 00:04:55.640
I'll leave it at that anyway.

79
00:04:55.640 --> 00:04:58.871
So, but the hooks API is very nice.

80
00:04:58.871 --> 00:05:03.903
So up here at the top,
I wanna say import {useParam},

81
00:05:06.140 --> 00:05:13.815
From react-router-dom.

82
00:05:13.815 --> 00:05:17.582
And so what I'm trying to do here
is I wanna get that ID, right?

83
00:05:17.582 --> 00:05:23.755
So if you go back and
look at your App.js, I want this, right?

84
00:05:23.755 --> 00:05:28.817
How do I get that inside
of my Details route?

85
00:05:28.817 --> 00:05:33.757
Well, if I go look at details,

86
00:05:33.757 --> 00:05:41.548
I can say const (id) = useParams,
like that.

87
00:05:41.548 --> 00:05:46.510
And it's a little magical,
right, a little black boxy here.

88
00:05:46.510 --> 00:05:51.259
But because it's inside of a browser
router, it can say, I'm a route,

89
00:05:51.259 --> 00:05:53.974
right, and
I can pull stuff out of my route.

90
00:05:53.974 --> 00:05:57.437
So therefore,
this is just gonna automatically work.

91
00:05:57.437 --> 00:06:02.004
So now, this will pull whatever
the id is off of useParams.

92
00:06:04.516 --> 00:06:07.742
So instead of this,
just for fun, we can say id.

93
00:06:07.742 --> 00:06:14.737
And now if we go back over to our Details
page and refresh here, notice this is 1,

94
00:06:16.748 --> 00:06:22.602
This is 7, 9, right?

95
00:06:22.602 --> 00:06:23.821
So this is matching whatever.

96
00:06:23.821 --> 00:06:29.466
I mean, you can put literally
any thing you want here,

97
00:06:29.466 --> 00:06:33.778
and it'll put that right there, right?

98
00:06:33.778 --> 00:06:36.262
&gt;&gt; What about the exact keyword?

99
00:06:36.262 --> 00:06:39.110
&gt;&gt; I believe the exact keyword went away.

100
00:06:39.110 --> 00:06:42.495
That one I'd have to look up,
but that was in react router 5.

101
00:06:43.577 --> 00:06:48.847
So there used to be
a thing with react router,

102
00:06:51.145 --> 00:06:56.267
That if you wanted to only match
the homepage, you had to put exact

103
00:06:56.267 --> 00:07:02.995
here to say, don't match things that have
subsequent matching sort of things here.

104
00:07:02.995 --> 00:07:06.533
And I believe that went
away with react router 6,

105
00:07:06.533 --> 00:07:11.767
because now it only matches one route
every time no matter what anywhere.

106
00:07:11.767 --> 00:07:13.680
So we're gonna go back to adopt me.

107
00:07:13.680 --> 00:07:16.581
So we're gonna go to the App.js here.

108
00:07:16.581 --> 00:07:22.474
And we're gonna put
a link in here as well.

109
00:07:22.474 --> 00:07:28.396
And we're gonna make
this h1 here clickable.

110
00:07:28.396 --> 00:07:30.646
So I'm gonna put this in a header tag,
cuz why not?

111
00:07:33.721 --> 00:07:36.612
We'll move this inside of here.

112
00:07:36.612 --> 00:07:41.766
And we'll just, instead of having this
be an h1, we'll just make it a link.

113
00:07:41.766 --> 00:07:49.256
And we'll just have this go
to the homepage, Like that.

114
00:07:52.061 --> 00:07:58.198
So now, we'll have a clickable
header that users can use.

115
00:07:58.198 --> 00:08:02.484
And I did change it from an h1
to a link tag, but that's fine.

116
00:08:02.484 --> 00:08:04.460
I wrote the CSS, so it'll still work.

