WEBVTT

1
00:00:00.000 --> 00:00:02.970
We can't use user effect here, right?

2
00:00:02.970 --> 00:00:05.798
So, how are we gonna get
information back from the API?

3
00:00:05.798 --> 00:00:08.822
Cuz we have to do something
when the component first load,

4
00:00:08.822 --> 00:00:11.490
cuz we have to request
the animal data from the API.

5
00:00:11.490 --> 00:00:14.659
So, how are we gonna do that?

6
00:00:14.659 --> 00:00:18.161
Well, these class components have
something called lifecycle methods.

7
00:00:18.161 --> 00:00:22.639
So, there's one that we can
create here called component.

8
00:00:22.639 --> 00:00:25.775
You can see this even completes here,
which is kind of cool.

9
00:00:25.775 --> 00:00:28.365
ComponentDidMount is the one
that we're interested in.

10
00:00:30.680 --> 00:00:35.475
So, componentDidMount,
this function gets run after it gets

11
00:00:35.475 --> 00:00:39.460
rendered to the DOM for
the very first time, right?

12
00:00:39.460 --> 00:00:41.870
So, it's gonna run this once.

13
00:00:41.870 --> 00:00:46.335
And when it runs at once it's gonna do
this, it's gonna say loading then after

14
00:00:46.335 --> 00:00:50.542
that rendering is complete then it's
gonna called component did mount.

15
00:00:50.542 --> 00:00:55.510
So, if you remember,
it's gonna be basically

16
00:00:55.510 --> 00:00:59.868
the same as us effectbBlur this, right.

17
00:00:59.868 --> 00:01:02.808
Where you have like this empty
array of like no dependencies,

18
00:01:02.808 --> 00:01:05.125
remember when we did that
earlier in the course,

19
00:01:05.125 --> 00:01:07.970
component did mount is essentially
the same thing as this.

20
00:01:07.970 --> 00:01:11.152
There's probably some pedantic
differences that we could get into

21
00:01:11.152 --> 00:01:12.390
that I don't care about.

22
00:01:12.390 --> 00:01:17.578
But suffice to say that the end
up being the same thing.

23
00:01:17.578 --> 00:01:18.310
Does that make sense?

24
00:01:18.310 --> 00:01:23.445
So, now we have this function that we can
run whenever this first gets mounted and

25
00:01:23.445 --> 00:01:25.422
we can do our API request here.

26
00:01:25.422 --> 00:01:27.245
And the nice thing is
we can make it async.

27
00:01:27.245 --> 00:01:29.200
So, that like all the code
looks really nice.

28
00:01:29.200 --> 00:01:31.350
We can use async await.

29
00:01:31.350 --> 00:01:35.644
I don't believe it has to be
async if you don't need it to be,

30
00:01:35.644 --> 00:01:40.210
but I just kind of always make it
async cuz it makes it easy for me.

31
00:01:40.210 --> 00:01:42.790
So, we're gonna make a request to the API.

32
00:01:42.790 --> 00:01:49.210
So, const res equals await, fetch.

33
00:01:49.210 --> 00:01:54.750
And then we'll do http colon // pets- v 2

34
00:01:55.885 --> 00:02:05.200
.dev-API's.com/pets:ID=

35
00:02:10.122 --> 00:02:18.430
And we're gonna get this.props.params.id

36
00:02:23.388 --> 00:02:27.441
So, that's another big difference
here that we should probably discuss.

37
00:02:27.441 --> 00:02:30.780
We're used to taking props in here, right?

38
00:02:30.780 --> 00:02:33.840
As a parameter to the render function.

39
00:02:33.840 --> 00:02:38.149
That's not the case in
class components here.

40
00:02:38.149 --> 00:02:43.008
So, what you're gonna do instead
is you're gonna refer to it

41
00:02:43.008 --> 00:02:46.191
as this stopprops.whatever, right?

42
00:02:49.415 --> 00:02:50.121
Which is what we're doing here.

43
00:02:50.121 --> 00:02:53.276
We're gonna expect something
called props.params.id.

44
00:02:57.463 --> 00:03:04.380
Okay, and then after res, we're gonna say
constant JSON equals await res dot JSON.

45
00:03:07.486 --> 00:03:11.920
And then here,
instead of calling our set function, so,

46
00:03:11.920 --> 00:03:14.906
const JSON equals await res dot JSON and

47
00:03:14.906 --> 00:03:19.340
then what you used to do is,
he used to call use state, so,

48
00:03:19.340 --> 00:03:24.070
you'd have like you set pets function or
set breed function.

49
00:03:24.070 --> 00:03:27.540
There's just like one function
now called set state.

50
00:03:27.540 --> 00:03:33.150
So, what you do now is you say this dot
set state, and then you're gonna basically

51
00:03:33.150 --> 00:03:38.458
call it with like an update of what you
whenever you wanna set your state to be.

52
00:03:38.458 --> 00:03:44.229
So, in this particular case, We

53
00:03:44.229 --> 00:03:48.280
could call set state twice here and
say like loading false, right?

54
00:03:48.280 --> 00:03:52.090
Cuz this loads in a loading true state,
right?

55
00:03:52.090 --> 00:03:54.164
And this would update it.

56
00:03:54.164 --> 00:03:57.280
So that loading would be set to false.

57
00:03:57.280 --> 00:04:02.185
And then we could call
again with this .setState.

58
00:04:02.185 --> 00:04:06.881
Have whatever JSON

59
00:04:06.881 --> 00:04:11.284
comes back with.

60
00:04:11.284 --> 00:04:15.666
And what do I have to call it with,
I can't remember JSON dot pets zero,

61
00:04:15.666 --> 00:04:16.406
like that.

62
00:04:19.811 --> 00:04:24.311
Cuz this is gonna be like the animal
breed city state description name of

63
00:04:24.311 --> 00:04:26.494
the animal that we found, right.

64
00:04:30.509 --> 00:04:32.983
However, we can make this,
so, a little bit better and

65
00:04:32.983 --> 00:04:36.365
just do it all at one time and say this
dot set state with an object dot assign.

66
00:04:41.079 --> 00:04:46.913
And we can do loading: false.

67
00:04:49.910 --> 00:04:54.998
And here we'll put jason.pets0.

68
00:04:56.700 --> 00:05:02.707
So, what I have here on line 17 is
equivalent to what we put here on line 19.

69
00:05:02.707 --> 00:05:04.113
It's just done in one statement so

70
00:05:04.113 --> 00:05:07.420
that react gets it all at once instead of
getting it in two different sets, days.

71
00:05:07.420 --> 00:05:09.933
Typically react to smart enough to say.

72
00:05:09.933 --> 00:05:10.650
I'm gonna wait.

73
00:05:10.650 --> 00:05:14.691
I'm gonna batch all these changes and
do them at once, but you can never have

74
00:05:14.691 --> 00:05:18.116
any guarantee what reaction is
going to batch of what it's not.

75
00:05:18.116 --> 00:05:21.974
And it's bad if it doesn't match this
because then it's gonna re-render

76
00:05:21.974 --> 00:05:22.840
twice, right?

77
00:05:22.840 --> 00:05:24.653
Cuz you called set state twice and

78
00:05:24.653 --> 00:05:28.160
it'll cause a rear-end her every
time that you call setState.

79
00:05:28.160 --> 00:05:31.017
So, it's better where you can
to just call setState once.

80
00:05:31.017 --> 00:05:33.760
It's not always possible and that's okay.

81
00:05:33.760 --> 00:05:36.703
Typically, we're splitting hairs here,
right?

82
00:05:36.703 --> 00:05:41.215
But, this is easy enough for
us to just do it in one fell swoop, so

83
00:05:41.215 --> 00:05:43.401
we're gonna do it it that way.

84
00:05:43.401 --> 00:05:45.754
So, that's how state works with component,

85
00:05:45.754 --> 00:05:48.600
components is gonna keep
track of this internal links.

86
00:05:48.600 --> 00:05:51.490
Let's do it this way.

87
00:05:51.490 --> 00:05:56.039
This like internal state object
of like loading false and

88
00:05:56.039 --> 00:06:00.680
then as soon as we were gonna
set this eventually to true and

89
00:06:00.680 --> 00:06:06.574
then it's going to add things like name,
Luna and City Seattle, right?

90
00:06:06.574 --> 00:06:10.100
And then if you call set state
again with I don't know,

91
00:06:10.100 --> 00:06:12.870
maybe she moves to Salt Lake City, right?

92
00:06:12.870 --> 00:06:16.896
And so, that's how class components
are they have this internal

93
00:06:16.896 --> 00:06:19.604
state that's mutable that you can change,

94
00:06:19.604 --> 00:06:23.428
but the only way that you can
change it is by calling set state.

95
00:06:23.428 --> 00:06:28.852
The reason why you wanna call set state
as opposed to just saying this dot state

96
00:06:28.852 --> 00:06:34.880
dot name equals something else, right,
is that React is not tracking this, right?

97
00:06:34.880 --> 00:06:37.328
You have to let React know
that state is changing so

98
00:06:37.328 --> 00:06:39.440
that it can queue updates appropriately.

99
00:06:39.440 --> 00:06:42.904
This is not Angular with
two way data binding.

100
00:06:42.904 --> 00:06:44.759
Terrible idea we should
have never done it, right?

101
00:06:48.457 --> 00:06:56.677
So, does that make sense of like how
state is working with class components?

102
00:06:59.221 --> 00:07:00.774
Yeah, Mark.

103
00:07:00.774 --> 00:07:04.954
&gt;&gt; Reason for using fetch over x use.

104
00:07:04.954 --> 00:07:09.711
&gt;&gt; Yeah, why are we using fetch here
instead of using like a library

105
00:07:09.711 --> 00:07:12.010
like axial or something else?

106
00:07:12.010 --> 00:07:19.422
Cuz fetch is built into the browser,
axial is a powerful, requests library.

107
00:07:19.422 --> 00:07:21.756
And it's also fairly nice to use.

108
00:07:21.756 --> 00:07:26.582
But we're literally just
doing GET requests to an API.

109
00:07:26.582 --> 00:07:28.393
And if you're doing that
fetch is more than enough.

110
00:07:28.393 --> 00:07:30.440
I mean,
this is a pretty pleasant API to use.

111
00:07:30.440 --> 00:07:31.090
It's kind of strange.

112
00:07:31.090 --> 00:07:37.584
You have to do like the await twice,
but, You just get used to it, I suppose.

113
00:07:37.584 --> 00:07:40.470
I don't know, I got used to it.

114
00:07:40.470 --> 00:07:44.979
I don't have a reason other than
the simple thing works for me.

115
00:07:44.979 --> 00:07:49.263
One last thing here is,
we need the ID to get in here, right?

116
00:07:49.263 --> 00:07:52.039
Cuz this is a route,
it's gonna come from React router.

117
00:07:52.039 --> 00:07:56.938
And we need to use use param because
that is the only way to get param out of

118
00:07:56.938 --> 00:07:58.010
React router.

119
00:07:58.010 --> 00:07:59.120
So, how do we do it?

120
00:08:00.774 --> 00:08:04.660
Well, you're probably gonna not be super
impressed with this way of doing it,

121
00:08:04.660 --> 00:08:06.291
but that's how you have to do it.

122
00:08:06.291 --> 00:08:09.495
So, we're gonna wrap it
in another component.

123
00:08:09.495 --> 00:08:13.105
Wrapped details equals this and

124
00:08:13.105 --> 00:08:18.997
then here we can say const
params equals use params.

125
00:08:18.997 --> 00:08:24.202
And then we can just return
details with the params passed in.

126
00:08:29.320 --> 00:08:33.115
Okay, and
then here you just export rat details.

127
00:08:36.447 --> 00:08:40.136
I imagine many of you are looking at
like what the actual hell are we doing

128
00:08:40.136 --> 00:08:40.945
here, right.

129
00:08:40.945 --> 00:08:45.075
But, the other way of doing it was
relatively the same way like the way that

130
00:08:45.075 --> 00:08:48.736
we used to do this with React router or
with basically like Redux or

131
00:08:48.736 --> 00:08:52.287
anything like that they were
called higher order components.

132
00:08:52.287 --> 00:08:57.258
It's essentially the same thing just with
more ceremonial circumstances it felt

133
00:08:57.258 --> 00:08:58.275
more official.

134
00:08:58.275 --> 00:09:02.067
This is actually probably a way simpler
way of doing it rather than exposing two

135
00:09:02.067 --> 00:09:05.812
different API's just using a hook and
then passing that into the component.

136
00:09:05.812 --> 00:09:09.183
Ends up being the simplest answer and this
is actually fairly obvious of how this

137
00:09:09.183 --> 00:09:10.960
works whereas higher order components.

138
00:09:10.960 --> 00:09:14.855
There was a lot of indirection of
how stuff was working and made,

139
00:09:14.855 --> 00:09:16.092
fairly confusing.

140
00:09:21.410 --> 00:09:25.134
So, any questions about that, yeah, Mark.

141
00:09:25.134 --> 00:09:31.486
&gt;&gt; Is there any difference between using
object assign versus the spread operator.

142
00:09:35.384 --> 00:09:40.980
&gt;&gt; So, here, Yeah,
you could have used object spread.

143
00:09:40.980 --> 00:09:45.913
You absolutely could have said, In fact,
let's just rewrite it that way.

144
00:09:45.913 --> 00:09:47.279
That's actually a fairly
good way of doing it.

145
00:09:49.964 --> 00:09:53.870
I think that the reason I did it the other
way is just force a habit to be honest

146
00:09:53.870 --> 00:09:54.428
with you.

147
00:09:58.571 --> 00:10:02.787
Less dense if we do it this way,
I forget about object spread.

148
00:10:05.300 --> 00:10:10.370
So, this and what I had before
are functionally the same thing.

149
00:10:10.370 --> 00:10:14.784
This is called the spread operator that
it's basically doing object.assign.

150
00:10:14.784 --> 00:10:18.227
In fact, if you look at the polyfill for
it, it literally does objects that assign.

151
00:10:23.339 --> 00:10:23.839
Yep.

152
00:10:28.491 --> 00:10:32.066
Okay, so let me just go make sure
that this actually works with it.

153
00:10:32.066 --> 00:10:33.570
I anticipate that it should.

154
00:10:33.570 --> 00:10:34.911
And it does.

155
00:10:34.911 --> 00:10:38.451
So now, we actually get like
a nice little lunar page.

156
00:10:38.451 --> 00:10:42.456
So, it looks like
everything is working here.

157
00:10:42.456 --> 00:10:45.605
Yeah, I showed you how to use
hooks with class components and

158
00:10:45.605 --> 00:10:47.657
it's just make a wrapping component.

159
00:10:51.011 --> 00:10:54.329
That's a fairly common thing
to have to do in React now.

160
00:10:54.329 --> 00:10:57.725
Especially the inner out
interoperate between the two.

161
00:10:57.725 --> 00:11:01.300
I showed her how to refer to props,
right, instead of that being

162
00:11:01.300 --> 00:11:04.626
passed in here to render it just
gets assigned to be on this.

163
00:11:04.626 --> 00:11:09.259
So, the one thing I'll say with class
components in particular is you

164
00:11:09.259 --> 00:11:12.174
have to make sure that
you know what this is.

165
00:11:12.174 --> 00:11:16.426
With componentDidMount we know every
time the componentDidMount gets called,

166
00:11:16.426 --> 00:11:17.933
this is going to be correct.

167
00:11:17.933 --> 00:11:20.846
But let's say we use setTimeout in here.

168
00:11:20.846 --> 00:11:24.940
Let's say for whatever reason we needed
to wait five seconds before we did this.

169
00:11:24.940 --> 00:11:28.997
You could do a setTimeout and

170
00:11:28.997 --> 00:11:33.222
then you do Blur, do stuff and

171
00:11:33.222 --> 00:11:37.628
then after five seconds do it.

172
00:11:40.474 --> 00:11:47.570
And then here if I tried to say like
console dot log, this dot state.

173
00:11:47.570 --> 00:11:50.150
What is this stick gonna be here?

174
00:11:53.630 --> 00:11:55.404
Tenant the job interview,
I'm just kidding.

175
00:11:55.404 --> 00:11:57.510
It's gonna it's gonna be undefined, right?

176
00:11:57.510 --> 00:12:01.817
Because it's not called in the context.

177
00:12:01.817 --> 00:12:03.113
We're getting into like splitting details.

178
00:12:03.113 --> 00:12:06.254
Now, there's lots of good front
of masters stuff on this, but

179
00:12:06.254 --> 00:12:10.183
this is actually gonna be, we called
outside of the context of react, right?

180
00:12:10.183 --> 00:12:15.545
So, this is not actually going to
refer to, the details instance.

181
00:12:15.545 --> 00:12:17.836
I mean, I think we can just load it up and
you'll see.

182
00:12:21.520 --> 00:12:26.864
I should have put a shorter one because
it's actually gonna wait five seconds.

183
00:12:26.864 --> 00:12:27.456
It did?

184
00:12:27.456 --> 00:12:29.244
Because you're using the arrow.

185
00:12:29.244 --> 00:12:31.137
&gt;&gt; Because,
&gt;&gt; You had like an actual function.

186
00:12:31.137 --> 00:12:32.200
&gt;&gt; Yeah, you're right.

187
00:12:32.200 --> 00:12:34.805
So, I mean, you can see even I
get tripped up on the stumps and

188
00:12:34.805 --> 00:12:36.352
I've been doing this for forever.

189
00:12:36.352 --> 00:12:38.511
Let's make this one.

190
00:12:40.316 --> 00:12:41.952
So, now you can see it's undefined.

191
00:12:41.952 --> 00:12:45.406
Indepent depends on what style
of function I wrote, right?

192
00:12:45.406 --> 00:12:51.139
So, an arrow function doesn't
create lexical context is actually,

193
00:12:51.139 --> 00:12:56.980
so, it does create a see, I can't
even remember off the top of my head.

194
00:12:56.980 --> 00:13:01.056
I'd have to go think about it some more,
but suffice to say that the arrow function

195
00:13:01.056 --> 00:13:04.440
will allow you to use the function
context wherever it was invoked.

196
00:13:04.440 --> 00:13:09.150
Whereas if you call function, it's
actually going to use it from this call

197
00:13:09.150 --> 00:13:13.882
side, and the call side has no context and
with set timeout, for example.

198
00:13:13.882 --> 00:13:16.549
In other words,
this becomes very important and

199
00:13:16.549 --> 00:13:18.185
you need to know what this is.

200
00:13:18.185 --> 00:13:19.835
Most of the time it's
what you expect it to be.

201
00:13:19.835 --> 00:13:22.504
But if you're doing
things like set timeout,

202
00:13:22.504 --> 00:13:25.651
and then the other big got
you is with event listeners,

203
00:13:25.651 --> 00:13:30.250
because event listener is doing it from
the same place, which is context less.

204
00:13:33.750 --> 00:13:35.533
Cool, okay, that's my spiel.

205
00:13:39.220 --> 00:13:45.479
With React Router five, they used to have
something called with router which is,

206
00:13:45.479 --> 00:13:50.571
basically what this did it passed
a instance of router in as a prop.

207
00:13:50.571 --> 00:13:58.527
So, instead of doing this you
do like export default detail or

208
00:13:58.527 --> 00:14:04.360
with router Details like that.

209
00:14:04.360 --> 00:14:07.320
And that's how you do this kind of thing.

210
00:14:07.320 --> 00:14:11.880
They got rid of that API because they're
like this is basically the same thing and

211
00:14:11.880 --> 00:14:14.175
allows you to have more control over it.

212
00:14:14.175 --> 00:14:18.950
So, in the end,
I think it ended up being a better API.

213
00:14:18.950 --> 00:14:23.734
I linked the issue in there where they
explain their reasoning if you wanna get

214
00:14:23.734 --> 00:14:26.318
into the depth of why
they did it this way.

215
00:14:26.318 --> 00:14:30.751
And then the other thing here I wanted
to talk about I showed you component did

216
00:14:30.751 --> 00:14:35.599
mount, there's like component will
unmount, there's component did unmount,

217
00:14:35.599 --> 00:14:38.944
there's can component did catch,
which is for errors.

218
00:14:38.944 --> 00:14:41.034
We'll actually look at that
one here in a little bit.

219
00:14:41.034 --> 00:14:44.587
There's a bunch of life cycle methods here
that I'm not gonna show you because like I

220
00:14:44.587 --> 00:14:47.508
said, class components are way less
important than they used to be.

221
00:14:47.508 --> 00:14:52.207
So, there are several things that you
could only do in class component that

222
00:14:52.207 --> 00:14:55.352
catches one of them like
doing error boundaries.

223
00:14:55.352 --> 00:14:59.935
And there's sometimes I still like writing
class component because, I would write

224
00:14:59.935 --> 00:15:04.582
this one as a function component because
there's nothing here that we're doing this

225
00:15:04.582 --> 00:15:08.412
really requires a class component and
they're just faster to write.

226
00:15:08.412 --> 00:15:12.994
And also now that's the way
that the ecosystem works.

227
00:15:12.994 --> 00:15:17.586
But sometimes when I wanna use like
all of the lifecycle methods and

228
00:15:17.586 --> 00:15:23.244
those kind of like line up with my line of
thinking, I'll use a class component but

229
00:15:23.244 --> 00:15:27.187
that's kind of the exception
now as opposed to the rule.

230
00:15:27.187 --> 00:15:31.017
Yeah, I think that's a good feels,
most time use function components.

231
00:15:31.017 --> 00:15:34.273
If you have something that like fits your
frame of thinking in the class components

232
00:15:34.273 --> 00:15:35.840
right away then use a class component.

233
00:15:35.840 --> 00:15:37.108
Yeah.
&gt;&gt; Would you say this also

234
00:15:37.108 --> 00:15:40.860
false into that category of like, right,
it is a functional component first and

235
00:15:40.860 --> 00:15:44.113
if you use effectors and give you
the granular control that you want and

236
00:15:44.113 --> 00:15:46.120
maybe switch to a class component
&gt;&gt; Yeah,

237
00:15:46.120 --> 00:15:48.568
I'd be okay with someone saying that.

238
00:15:48.568 --> 00:15:50.910
Yeah, I mean, they're pretty
easy to switch back and forth

