WEBVTT

1
00:00:00.110 --> 00:00:02.952
So now, you have this thing in the middle
here, and you can click on it and

2
00:00:02.952 --> 00:00:05.672
this will take you back to the home page,
so you can go back and forth.

3
00:00:05.672 --> 00:00:09.548
So if you're seeing \like a useHref error,

4
00:00:09.548 --> 00:00:13.731
it's because your link
is outside the browser.

5
00:00:13.731 --> 00:00:16.014
So let's take a look at
what that would look like.

6
00:00:16.014 --> 00:00:21.694
So, if I just move this, so now this link
tag is outside of the browser router.

7
00:00:21.694 --> 00:00:25.610
If I go back, and look at,
now I have nothing here and

8
00:00:25.610 --> 00:00:27.657
I look at the console here,

9
00:00:27.657 --> 00:00:33.709
you can see useHref may only be used in
the context of a router component, right.

10
00:00:33.709 --> 00:00:35.513
So this is what I was talking, too,

11
00:00:35.513 --> 00:00:39.258
about before is make sure that your
links are always inside of the router.

12
00:00:41.000 --> 00:00:44.984
Let's put that back, cool.

13
00:00:47.616 --> 00:00:51.514
One more thing here,
you're seeing browser router.

14
00:00:51.514 --> 00:00:56.622
There's actually multiple different types
of routers you can use with React Router.

15
00:00:56.622 --> 00:00:59.979
So I think it's called #router, it is.

16
00:00:59.979 --> 00:01:03.318
Okay so let's just pop in #router for fun.

17
00:01:05.805 --> 00:01:10.296
And if I save that, and
now I go to Details, look at my URL.

18
00:01:10.296 --> 00:01:13.895
So obviously in the homepage is fine but
if I go to Luna,

19
00:01:13.895 --> 00:01:16.496
notice that there's this #/ thing.

20
00:01:16.496 --> 00:01:21.307
If you've ever done other websites where
you are not in control of the server, or

21
00:01:21.307 --> 00:01:25.834
you have a back end team that you don't
wanna work with cuz they're a bunch of

22
00:01:25.834 --> 00:01:28.900
jerks and
maybe projecting a little bit right now?

23
00:01:28.900 --> 00:01:33.775
[LAUGH] Sometimes you don't
have the ability to create

24
00:01:33.775 --> 00:01:36.382
firm routes on your server.

25
00:01:36.382 --> 00:01:41.179
So what this #router allows you to do,
is it allows you to create basically

26
00:01:41.179 --> 00:01:44.395
a router that never leaves that one page,
right?

27
00:01:44.395 --> 00:01:47.490
So this #/ will always
route to the same page, so

28
00:01:47.490 --> 00:01:51.775
you can actually just do this without
doing anything to your server.

29
00:01:51.775 --> 00:01:56.275
Whereas if you're doing browser router
you have to make up make sure all

30
00:01:56.275 --> 00:01:59.361
of your routes from either Nginx or
from Apache.

31
00:01:59.361 --> 00:02:03.411
Or whatever you're using for
your kind of server ingress,

32
00:02:03.411 --> 00:02:06.581
all route to the same index HTML page,
right?

33
00:02:06.581 --> 00:02:08.773
Does that make sense?

34
00:02:08.773 --> 00:02:13.012
So hash router allows you to not do that,
it allows you to just be lazy and

35
00:02:13.012 --> 00:02:13.799
say, cool.

36
00:02:13.799 --> 00:02:17.148
Just send everyone to this one page and
everything will just work, and

37
00:02:17.148 --> 00:02:18.752
we'll use the hash router here.

38
00:02:18.752 --> 00:02:23.522
Whereas browser router, Allows you,

39
00:02:26.765 --> 00:02:29.917
Now notice, the #/ there is gone.

40
00:02:31.773 --> 00:02:34.507
Where possible you use browser router.

41
00:02:34.507 --> 00:02:40.426
It's better for SEO, it makes more
sense to users, the URLs are better.

42
00:02:40.426 --> 00:02:44.196
It's just overall better experience for
both you and for them.

43
00:02:44.196 --> 00:02:47.809
Sometimes it's either not important,
if it's like an internal website,

44
00:02:47.809 --> 00:02:48.775
who cares, right?

45
00:02:48.775 --> 00:02:50.517
It's not being indexed anyway.

46
00:02:50.517 --> 00:02:56.043
And screw the rest of your
employees that work with you.

47
00:02:56.043 --> 00:03:00.675
Or, yeah, so it doesn't matter
if it's something like that.

48
00:03:00.675 --> 00:03:06.638
So yeah, use browser router where possible
though, for consumer facing applications.

49
00:03:07.663 --> 00:03:15.630
Okay, All right, any questions about that?

50
00:03:22.798 --> 00:03:28.411
That's about as much as I'm
gonna get into React Router.

51
00:03:28.411 --> 00:03:33.288
It's a very deep pool that someone
could come teach a course just on

52
00:03:33.288 --> 00:03:39.055
React Router if they wanted to, but
that person's not me cuz I don't want to.

53
00:03:39.055 --> 00:03:40.289
Yeah, Mark?

54
00:03:40.289 --> 00:03:43.686
&gt;&gt; If I wanted to post something
from my app to my server,

55
00:03:43.686 --> 00:03:46.488
may I use the POST method
in the reactor out?

56
00:03:46.488 --> 00:03:49.844
&gt;&gt; That's not something I'm familiar with,
if that's the case.

57
00:03:52.456 --> 00:03:59.687
I would just use a normal, either HTML
form post which would go to a server.

58
00:03:59.687 --> 00:04:05.133
Or like a Ajax fetch with request
with the post in the headers,

59
00:04:05.133 --> 00:04:10.393
but maybe I'm not understanding
the question correctly.

60
00:04:13.277 --> 00:04:18.492
Or to restate that, I'm not familiar with
React Router doing anything for posting.

61
00:04:21.678 --> 00:04:23.682
Remix does.

62
00:04:23.682 --> 00:04:28.528
So, Remix is basically the React Router
people took React Router, and

63
00:04:28.528 --> 00:04:31.858
then built a server layer on top of that,
right?

64
00:04:31.858 --> 00:04:38.385
That's basically the entire value
prop of to me what Remix is.

65
00:04:38.385 --> 00:04:41.648
I actually built the course website here.

66
00:04:41.648 --> 00:04:45.739
I built it in Remix just for
fun to see how different it was.

67
00:04:45.739 --> 00:04:46.736
It's a lot of fun.

68
00:04:49.122 --> 00:04:52.818
We'll talk maybe more about it
a little bit at the end, but

69
00:04:52.818 --> 00:04:56.676
you can basically think of remix
as a replacement for rails.

70
00:04:56.676 --> 00:05:03.791
But it's all React Router-y,
it's like React Router-y rails.

71
00:05:03.791 --> 00:05:05.848
Yeah, I'm happy with that analogy.

72
00:05:05.848 --> 00:05:08.009
[LAUGH] I don't think about it.

73
00:05:08.009 --> 00:05:08.550
Yeah, question?

74
00:05:08.550 --> 00:05:13.701
&gt;&gt; It was like expresses now you're
writing express stuff on your front end,

75
00:05:13.701 --> 00:05:18.373
then you're kind of combining off
that routing logic all into one?

76
00:05:18.373 --> 00:05:19.737
&gt;&gt; You could think of it that way.

77
00:05:19.737 --> 00:05:24.027
It's more like Next or yeah, Remix and

78
00:05:24.027 --> 00:05:28.460
next are very similar in that capacity.

79
00:05:28.460 --> 00:05:30.022
Mark, you had a question?

80
00:05:30.022 --> 00:05:33.730
&gt;&gt; How do you create protected routes?

81
00:05:33.730 --> 00:05:36.678
&gt;&gt; Yeah, that's a good question.

82
00:05:36.678 --> 00:05:43.416
I'm gonna go ahead and say, read the docs,
cuz it's a kind of an in-depth question,

83
00:05:46.270 --> 00:05:50.663
But it's not anything
that's gonna surprise you.

84
00:05:50.663 --> 00:05:52.204
Yeah, I guess read the docs.

85
00:05:52.204 --> 00:05:55.025
I don't wanna go much
further into it than that.

86
00:05:57.963 --> 00:06:01.542
I also can't do it off the top of my head,
so that's another reason.

87
00:06:01.542 --> 00:06:07.307
&gt;&gt; Is it best practice to have all
the component files in their own folder?

88
00:06:07.307 --> 00:06:12.486
&gt;&gt; Yeah, that flavor of question comes up
every time I teach this course of like,

89
00:06:12.486 --> 00:06:14.610
how do I organize my react code?

90
00:06:14.610 --> 00:06:19.801
Cuz obviously this is just kind of
spewing all of our components and

91
00:06:19.801 --> 00:06:24.632
styles, and index HTML and
custom hooks into one directory.

92
00:06:24.632 --> 00:06:26.505
Is that the best way of
organizing your code?

93
00:06:26.505 --> 00:06:28.234
Probably not.

94
00:06:28.234 --> 00:06:35.404
[LAUGH] I've tried

95
00:06:35.404 --> 00:06:39.826
different opinions over the years of how
I like organizing react code, and I don't

96
00:06:39.826 --> 00:06:44.009
know if I've ever really been satisfied
with any one particular way of doing.

97
00:06:44.009 --> 00:06:48.200
I've seen people say, are all routes go
in one, all reusable components go in

98
00:06:48.200 --> 00:06:52.156
another, all utility is going to
a different one, all my hooks go in one.

99
00:06:52.156 --> 00:06:54.184
That's certainly a way to do it, and

100
00:06:54.184 --> 00:06:57.005
I find that it never works
out the way you want it to.

101
00:06:57.005 --> 00:07:01.640
Because then you get, well,
this one's kind of component-y and hook-y,

102
00:07:01.640 --> 00:07:03.081
which one do I put it in?

103
00:07:03.081 --> 00:07:06.928
I'll put it in neither, I'll create a new
directory, and then you have, all right,

104
00:07:06.928 --> 00:07:09.898
is this in the legacy components or
the new Components directory?

105
00:07:09.898 --> 00:07:13.900
It never ended up the way
that I wanted it to.

106
00:07:13.900 --> 00:07:17.324
Certainly organizing by route
seems to make some sense to me.

107
00:07:17.324 --> 00:07:18.410
You could try that.

108
00:07:18.410 --> 00:07:22.232
I can show you one that
I wrote some years ago.

109
00:07:22.232 --> 00:07:24.008
I think it's called Photo Gallery.

110
00:07:24.008 --> 00:07:26.079
Yeah, I was pretty happy with this one.

111
00:07:26.079 --> 00:07:29.624
You can see this is pretty old,
this is five years old.

112
00:07:29.624 --> 00:07:32.161
But if you go to my source directory here,

113
00:07:32.161 --> 00:07:36.449
I had this Components directory and
every component was a directory.

114
00:07:36.449 --> 00:07:43.030
And then if you click into one of these,
the CSS is in it, the component is in it,

115
00:07:43.030 --> 00:07:47.865
the test for that component
are all in the same directory.

116
00:07:47.865 --> 00:07:51.937
I was pretty happy with this.

117
00:07:51.937 --> 00:07:55.921
This seemed to work pretty well
because then the entire world for

118
00:07:55.921 --> 00:07:58.372
one component lived in one directory.

119
00:07:58.372 --> 00:08:01.592
The issue is what happens if I have
child components of these ones?

120
00:08:01.592 --> 00:08:03.104
Do I put it in the same directory?

121
00:08:03.104 --> 00:08:05.672
Do I put it in this sibling directory?

122
00:08:05.672 --> 00:08:08.757
I don't have a great answer for
that either.

123
00:08:08.757 --> 00:08:12.832
So code organization always,
especially for

124
00:08:12.832 --> 00:08:17.434
long-lived applications,
always ends up messy.

125
00:08:17.434 --> 00:08:22.307
So embracing that fact and kind of leading
into it instead of trying to dogmatically

126
00:08:22.307 --> 00:08:24.338
apply rules that'll never work.

127
00:08:24.338 --> 00:08:26.298
It seems to work best for me.

128
00:08:26.298 --> 00:08:28.196
It's like embrace the mess, right?

129
00:08:28.196 --> 00:08:30.599
Make it searchable and make it believable.

130
00:08:30.599 --> 00:08:35.058
If something's deletable,
that's how you know you've done well.

131
00:08:35.058 --> 00:08:39.926
Cuz that means you understand your
dependency tree enough that you can

132
00:08:39.926 --> 00:08:41.997
confidently delete things.

133
00:08:41.997 --> 00:08:44.775
That seems to be the best thing
that I've ever optimized for.

134
00:08:44.775 --> 00:08:46.747
So I gave you a total non-answer.

135
00:08:46.747 --> 00:08:51.554
I'm aware that I did that, as, one,
I'm kinda unsure of the answer myself, and

136
00:08:51.554 --> 00:08:56.293
two, it's highly contextual to you,
your team, how you're writing things,

137
00:08:56.293 --> 00:09:00.084
what makes sense to you, and
the problem that you're solving.

138
00:09:03.069 --> 00:09:08.126
Honestly, if you're writing an app
this big that's fairly small,

139
00:09:08.126 --> 00:09:12.496
applying too many rules of
organization is just wasteful.

140
00:09:12.496 --> 00:09:16.643
The least amount of process that
works is probably the best idea.

141
00:09:16.643 --> 00:09:18.317
But make sure you have some process or

142
00:09:18.317 --> 00:09:20.970
else you're just gonna end up
with something even worse.

143
00:09:24.685 --> 00:09:29.387
At the end of the day, I just said,
I've seen some shit, right?

144
00:09:29.387 --> 00:09:32.539
[LAUGH] I've seen really great code bases.

145
00:09:32.539 --> 00:09:37.708
The Netflix one actually
was a fairly large mess.

146
00:09:37.708 --> 00:09:39.863
It got better, it got worse.

147
00:09:39.863 --> 00:09:43.879
We had a bunch of rewrites that never
ended up the way that we wanted them to.

148
00:09:43.879 --> 00:09:45.483
So, I don't know.

149
00:09:45.483 --> 00:09:48.443
I feel like I've kind of lost my way here,
I'm just kind of rambling about all

150
00:09:48.443 --> 00:09:50.735
the things that I've done in
my career that were a mistake.

151
00:09:50.735 --> 00:09:53.456
[LAUGH] Group therapy,
we're going back to that.

152
00:09:53.456 --> 00:09:58.439
&gt;&gt; Any route you want to
have on the app or site,

153
00:09:58.439 --> 00:10:01.957
you need to have in the routes?

154
00:10:01.957 --> 00:10:02.608
&gt;&gt; Yes, so

155
00:10:02.608 --> 00:10:08.192
anytime that you add a new route here
you just stick another route here.

156
00:10:08.192 --> 00:10:12.577
Or you put like a child one if it's gonna
live in a different part of the app, yeah.

157
00:10:12.577 --> 00:10:13.890
But it has to be inside of the routes.

