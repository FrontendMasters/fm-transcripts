WEBVTT

1
00:00:00.050 --> 00:00:05.118
We've seen one way to handle async
code and react with effects but

2
00:00:05.118 --> 00:00:11.017
sometimes you need to be more reactive
to like user input right now all we're

3
00:00:11.017 --> 00:00:16.660
doing is when the page loads we're
loading in data from our API, right?

4
00:00:16.660 --> 00:00:20.465
We also wanna make it so that a user can
request data from the API when every time

5
00:00:20.465 --> 00:00:22.000
they submit the form, right?

6
00:00:22.000 --> 00:00:24.090
That's kind of the point
of the entire form there.

7
00:00:25.560 --> 00:00:26.160
So let's go do that.

8
00:00:27.260 --> 00:00:28.740
Top over to your code here.

9
00:00:30.550 --> 00:00:34.378
And we're gonna go into search paras.JS.

10
00:00:37.431 --> 00:00:42.794
And then here on it's actually
fairly simple because we kind of

11
00:00:42.794 --> 00:00:49.367
set it up in a really good way we can just
put a submit listener here on the form so

12
00:00:49.367 --> 00:00:53.739
what we can do We're gonna
just make an A on submit,

13
00:00:55.930 --> 00:00:59.540
And then, we'll just make a little
function here that takes in an event.

14
00:01:01.450 --> 00:01:05.626
The first thing that It's gonna do as you
might remember if you've ever written any

15
00:01:05.626 --> 00:01:08.204
form code before is e dot prevent default,
right?

16
00:01:08.204 --> 00:01:13.180
So you actually don't submit the form
actually if you're not familiar what I'm

17
00:01:13.180 --> 00:01:16.765
talking about if you don't do
this it's actually going to

18
00:01:16.765 --> 00:01:19.120
do like a post back to itself, right?

19
00:01:19.120 --> 00:01:21.849
So it's going to submit the form
to itself like in an HTML form.

20
00:01:25.089 --> 00:01:26.280
Which will refresh the page.

21
00:01:26.280 --> 00:01:28.751
So if you're like clicking submit and
then it's like refreshing the page,

22
00:01:28.751 --> 00:01:29.650
that's what it's doing.

23
00:01:31.320 --> 00:01:34.279
Okay, and then all we're going to do here
is we're just going to say request Pets.

24
00:01:38.590 --> 00:01:39.620
Now, why does this work?

25
00:01:41.530 --> 00:01:45.378
Well, if you look, we just made
a function up here, request Pets,

26
00:01:45.378 --> 00:01:49.930
that's in scope of all of these
different variables, right?

27
00:01:49.930 --> 00:01:52.519
So we don't have to provide it any
sort of additional parameters or

28
00:01:52.519 --> 00:01:53.360
anything like that.

29
00:01:53.360 --> 00:01:54.679
We can just call request Pets,

30
00:01:54.679 --> 00:01:57.589
and it'll have all of the most
up-to-date information, right?

31
00:01:58.970 --> 00:02:00.459
Due to the magic of closures.

32
00:02:02.740 --> 00:02:05.510
Or just state in general, right?

33
00:02:05.510 --> 00:02:06.840
It's not even necessarily closure.

34
00:02:08.900 --> 00:02:13.890
Cool, so let's go over here and
try it again.

35
00:02:13.890 --> 00:02:17.820
So let's try some meeting just for,
I guess these are all dogs.

36
00:02:17.820 --> 00:02:22.168
Anyways, so that's not really helpful
to try submitting for cats and

37
00:02:22.168 --> 00:02:30.140
you can see now we're getting
different cats back from the API Or

38
00:02:30.140 --> 00:02:34.167
we can look for
what do we have here American longhairs

39
00:02:39.819 --> 00:02:43.784
Now, someone is gonna ask me the location
is kinda wonky it doesn't actually

40
00:02:43.784 --> 00:02:45.460
work super well.

41
00:02:45.460 --> 00:02:49.720
That's because it's basically just
doing it basic text matching.

42
00:02:49.720 --> 00:02:53.327
So I didn't put a lot of effort into
making that work super well I'm just gonna

43
00:02:53.327 --> 00:02:54.784
throw that out there, right?

44
00:02:54.784 --> 00:02:59.761
I put Seattle in here and I'm pretty sure
some of these are definitely not from

45
00:02:59.761 --> 00:03:01.930
Seattle but here we are, yeah.

46
00:03:01.930 --> 00:03:06.460
In general if you were doing some
sort of like location database

47
00:03:06.460 --> 00:03:11.160
you'd be using that instead of
just using basic pattern matching

48
00:03:11.160 --> 00:03:14.850
which is what I was doing
with this particular API.

49
00:03:15.960 --> 00:03:20.590
These are just Azure functions that are
running in the background at the moment

50
00:03:20.590 --> 00:03:24.205
I did that, cuz it's cheap and
new people hit this API a lot.

51
00:03:24.205 --> 00:03:27.523
[LAUGH] Sometimes it's funny to go
look at like the request logs and

52
00:03:27.523 --> 00:03:31.280
I'll see like there's like one person
that must have just gotten wrong.

53
00:03:31.280 --> 00:03:34.480
And so I get like a million
requests from them all at once.

54
00:03:34.480 --> 00:03:36.220
And then it stops and
they never come back.

55
00:03:36.220 --> 00:03:40.699
I don't know if it's shame or
something like that [LAUGH].

56
00:03:40.699 --> 00:03:41.480
It's okay.

57
00:03:41.480 --> 00:03:44.741
That's why we put it on something like
serveless functions because they're

58
00:03:44.741 --> 00:03:45.350
very cheap.

59
00:03:45.350 --> 00:03:46.830
There's no API shaming here.

60
00:03:49.730 --> 00:03:54.030
So we did this with a form
as you can see here.

61
00:03:55.380 --> 00:03:59.270
This made us all so this is like one
very simple succinct way of doing it.

62
00:03:59.270 --> 00:04:01.800
We just watched for
form submits and then we're done.

63
00:04:01.800 --> 00:04:06.105
The other way you could have done this
which would have been the wrong and

64
00:04:06.105 --> 00:04:10.698
very much more difficult way is you could
have added like a click handler ,to

65
00:04:10.698 --> 00:04:14.130
the button and
a button listener to all the.

66
00:04:14.130 --> 00:04:16.460
Like labels and stuff like that.

67
00:04:16.460 --> 00:04:20.102
Cuz you had to account for all
the different ways you can submit a form,

68
00:04:20.102 --> 00:04:23.970
which is a lot, there's a lot
of ways to submit a form, right?

69
00:04:23.970 --> 00:04:28.620
So don't do that just listen for
submit events.

70
00:04:28.620 --> 00:04:31.210
It's just like a billion times easier.

71
00:04:31.210 --> 00:04:32.650
Yeah, Mark.

72
00:04:32.650 --> 00:04:34.820
&gt;&gt; There's a question about
what's your opinion on.

73
00:04:34.820 --> 00:04:38.020
Formic or
some of the other react forms solutions.

74
00:04:38.020 --> 00:04:39.360
&gt;&gt; Sure.

75
00:04:39.360 --> 00:04:43.489
So there's a lot of form
libraries out there that

76
00:04:43.489 --> 00:04:46.519
are basically like premade forms.

77
00:04:49.420 --> 00:04:55.089
I tend not to use them but I also haven't
had recently we've been writing code to,

78
00:04:55.089 --> 00:04:58.670
like very complicated form needs, right?

79
00:04:58.670 --> 00:05:00.280
Like these are typically
what my forms look like.

80
00:05:00.280 --> 00:05:04.640
It's just like a really simple form
that I style up and I submit, right?

81
00:05:06.140 --> 00:05:09.763
If you have stuff like you need like
complex validation, like you need to make

82
00:05:09.763 --> 00:05:12.772
sure that the city and the state and
the zip code all work right and

83
00:05:12.772 --> 00:05:16.141
you need to show like errors on
the correct one if something goes wrong.

84
00:05:16.141 --> 00:05:22.648
Something like Formic, which is the only
one that I have ever used is helpful.

85
00:05:22.648 --> 00:05:29.590
So that's about as much as I'm gonna
give because it's as much as I know.

86
00:05:29.590 --> 00:05:33.812
But basically if you have complex like
validations and logic around that,

87
00:05:33.812 --> 00:05:37.040
then something like former can be helpful.

88
00:05:37.040 --> 00:05:41.500
Otherwise, Nick, as you saw here, this is
not terribly difficult to do yourself.

89
00:05:41.500 --> 00:05:45.482
And I generally prefer less libraries,
less code,

90
00:05:45.482 --> 00:05:48.860
more obvious what it's doing, right?

91
00:05:48.860 --> 00:05:50.764
You can read through the search params,
and

92
00:05:50.764 --> 00:05:52.680
you know everything that is doing, right?

93
00:05:52.680 --> 00:05:55.447
You don't need to understand
how formic works to do good.

94
00:05:55.447 --> 00:05:58.513
That's just my kind of
way of writing code but

95
00:05:58.513 --> 00:06:02.070
I'll leave you to decide
what you think about that.

96
00:06:03.250 --> 00:06:08.766
Cool the one thing I did want to hop into
and show you quick from the notes here and

97
00:06:08.766 --> 00:06:13.696
I think handling user input here if
you go here to the react docs which by

98
00:06:13.696 --> 00:06:18.460
the way they're about to release new
react docs I think that beta dot

99
00:06:18.460 --> 00:06:22.250
reactjas.org I like that anyway,
they're great.

100
00:06:23.330 --> 00:06:27.800
Written by a Front end Masters teacher,
Rachel Nabors.

101
00:06:27.800 --> 00:06:28.770
Fun fact she's great.

102
00:06:29.810 --> 00:06:35.004
So there's tons of events that
you can listen to let like on

103
00:06:35.004 --> 00:06:40.220
composition and
you can listen to key press, focus blur.

104
00:06:40.220 --> 00:06:43.450
But there's tons and
tons of stuff that you can do here.

105
00:06:43.450 --> 00:06:47.486
And so I invite you to just go through
all this like synthetic event part of

106
00:06:47.486 --> 00:06:49.790
the docs, synthetic events.

107
00:06:49.790 --> 00:06:52.244
Remember, it means that it's actually
technically a react event and

108
00:06:52.244 --> 00:06:53.380
not a real DOM event.

109
00:06:53.380 --> 00:06:55.168
But they've shaped them
the exact same way so

110
00:06:55.168 --> 00:06:57.390
that you can just kind of
assume that they work the same.

111
00:06:58.470 --> 00:07:03.451
I mean, you saw like, we've been
using like e dot target dot value and

112
00:07:03.451 --> 00:07:06.828
e dot prevent default and
those kind of things,

113
00:07:06.828 --> 00:07:10.900
like React re implements that
part of the of the DOM cool.

114
00:07:12.040 --> 00:07:13.731
That's one reason why they're on submit.

115
00:07:13.731 --> 00:07:16.310
Kind of, a loop back around what
I was talking about earlier.

116
00:07:18.830 --> 00:07:21.562
There's nothing that we
did here that was very

117
00:07:21.562 --> 00:07:25.570
complicated in terms of keeping
track of all the data here in state.

118
00:07:26.990 --> 00:07:32.743
So we really what we could have done here,
instead of like, watching for on changes

119
00:07:32.743 --> 00:07:38.430
and on blurs and, all that kind of stuff
here, we could have done but none of that.

120
00:07:38.430 --> 00:07:43.280
And then here on submit, you can actually
pull the form data off the event.

121
00:07:43.280 --> 00:07:46.770
And then we could have put
that into request pets, right?

122
00:07:46.770 --> 00:07:49.423
And that way we would have
had none of this logic,

123
00:07:49.423 --> 00:07:51.620
which would be kind of nice, right?

124
00:07:51.620 --> 00:07:56.585
We could have just looked at the forum,
handle all the data tracking and

125
00:07:56.585 --> 00:07:59.330
then just use that to request the data.

126
00:07:59.330 --> 00:08:00.436
If I was writing this for myself for

127
00:08:00.436 --> 00:08:02.240
like a real application that's
what I would have done.

128
00:08:02.240 --> 00:08:05.719
It's an uncontrolled form is
what you would call that.

129
00:08:05.719 --> 00:08:06.303
In other words,

130
00:08:06.303 --> 00:08:08.700
I would have just done this like
a normal form and not like a React form

