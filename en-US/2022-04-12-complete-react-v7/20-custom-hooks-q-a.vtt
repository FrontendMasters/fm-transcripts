WEBVTT

1
00:00:00.250 --> 00:00:01.630
Questions.

2
00:00:01.630 --> 00:00:04.260
&gt;&gt; Does the order of use states matter?

3
00:00:06.270 --> 00:00:07.540
&gt;&gt; Does the order of use states matter?

4
00:00:07.540 --> 00:00:08.510
I don't think so.

5
00:00:10.870 --> 00:00:13.180
I can't fathom a reason
why that would matter.

6
00:00:15.520 --> 00:00:16.870
It's a good question though.

7
00:00:16.870 --> 00:00:18.480
&gt;&gt; Can you have multiple use effects?

8
00:00:19.930 --> 00:00:21.539
&gt;&gt; Yeah,
you can have as many effects as you want.

9
00:00:23.550 --> 00:00:26.760
Sometimes it's very necessary.

10
00:00:26.760 --> 00:00:30.668
So for example,
this use effect depends on animal, but

11
00:00:30.668 --> 00:00:36.492
maybe I have a different effect like that
state depends on, so maybe that's like,

12
00:00:36.492 --> 00:00:41.092
I don't know, this is the worst
idea ever but we're gonna do it.

13
00:00:41.092 --> 00:00:45.046
Use effect, And

14
00:00:45.046 --> 00:00:49.474
then we're just gonna alert the user,

15
00:00:49.474 --> 00:00:52.836
cuz I am a terrible designer.

16
00:00:52.836 --> 00:00:53.336
Alert.

17
00:00:56.736 --> 00:00:58.766
I already feel gross about this.

18
00:00:58.766 --> 00:01:02.683
&gt;&gt; It's gonna be great.

19
00:01:02.683 --> 00:01:06.445
&gt;&gt; I feel like something should
be yelling at you for doing this.

20
00:01:06.445 --> 00:01:08.717
&gt;&gt; My heart is yelling at me.

21
00:01:10.957 --> 00:01:15.546
This is a case where one maybe quit your
job, and two, [LAUGH] where you'd want two

22
00:01:15.546 --> 00:01:20.807
different effects cuz now they're
contingent on different things changing.

23
00:01:20.807 --> 00:01:22.027
It's a good question.

24
00:01:22.027 --> 00:01:23.782
I'm concerned about leaving that there,
but

25
00:01:23.782 --> 00:01:25.357
we're gonna try it cuz now I'm curious.

26
00:01:26.447 --> 00:01:26.977
Yeah.

27
00:01:26.977 --> 00:01:32.454
&gt;&gt; Is hooks kind of a JavaScript
up pattern essentially,

28
00:01:32.454 --> 00:01:38.830
or what is the actual mechanism
that makes hooks work?

29
00:01:38.830 --> 00:01:43.140
Can we use them in pure JavaScript or
is it like a React specific thing?

30
00:01:43.140 --> 00:01:45.154
&gt;&gt; That's a good question.

31
00:01:45.154 --> 00:01:46.910
So let's define hooks as a paradigm.

32
00:01:48.400 --> 00:01:50.565
It's not like a specific construct or

33
00:01:50.565 --> 00:01:54.220
anything like that,
it's like a methodology of writing code,

34
00:01:54.220 --> 00:01:58.415
that basically I have a function that's
going to be called frequently and

35
00:01:58.415 --> 00:02:02.294
then I'm going to be feeding state
into a non-stateful function.

36
00:02:02.294 --> 00:02:06.772
Maybe a function that's intended to
be as the least stateful that it

37
00:02:06.772 --> 00:02:07.955
possibly can be.

38
00:02:07.955 --> 00:02:12.080
The way that we're using functions
precisely now this use state and

39
00:02:12.080 --> 00:02:14.407
use effect this is hard tied to React.

40
00:02:14.407 --> 00:02:19.654
You cannot pull use state out of React and
use it in something else.

41
00:02:19.654 --> 00:02:24.180
Because this is a React specific construct
that ties directly into the React library,

42
00:02:24.180 --> 00:02:25.668
the React rendering layer,

43
00:02:25.668 --> 00:02:29.080
you can't use use state outside
of React from the React library.

44
00:02:30.920 --> 00:02:35.235
But there are other libraries out there
now that let you do it in vanilla

45
00:02:35.235 --> 00:02:39.334
JavaScript and I believe Kyle Simpsons,
the one that wrote them,

46
00:02:39.334 --> 00:02:41.990
another great friend of masters teacher.

47
00:02:41.990 --> 00:02:45.527
Catify hooks.

48
00:02:45.527 --> 00:02:48.117
This is the one that I'm aware of
there might be different or better or

49
00:02:48.117 --> 00:02:49.200
worse ones, I don't know.

50
00:02:51.900 --> 00:02:58.361
But good old Kyle provides a reaction
time to hooks for standalone functions.

51
00:02:58.361 --> 00:03:01.780
So take a look at that if
you're interested in that.

52
00:03:03.520 --> 00:03:08.880
There's also view ID adopted
hooks pretty heavily.

53
00:03:11.660 --> 00:03:16.649
I don't really know much more than that
other than they're very react like.

54
00:03:16.649 --> 00:03:22.534
Yeah, so it's a paradigm, it's like
object oriented programming, right?

55
00:03:22.534 --> 00:03:25.230
It's not specific to a language,
it's just how you choose to write code.

56
00:03:26.280 --> 00:03:30.585
&gt;&gt; And what is the purpose of using use
effect inside this custom hook instead of

57
00:03:30.585 --> 00:03:32.410
having like a normal function?

58
00:03:33.750 --> 00:03:34.538
&gt;&gt; Good question.

59
00:03:34.538 --> 00:03:39.243
Well, the reason for that is you want
the first render to go completely

60
00:03:39.243 --> 00:03:42.377
through start to finish and
not interrupted.

61
00:03:42.377 --> 00:03:44.239
So that it goes through
the first render and

62
00:03:44.239 --> 00:03:46.836
basically renders what we'd
call an empty state, right?

63
00:03:46.836 --> 00:03:49.010
So that the user sees something.

64
00:03:50.220 --> 00:03:56.034
The effects are then scheduled
to run immediately afterwards.

65
00:03:56.034 --> 00:03:57.590
Immediate is a loaded word.

66
00:03:59.920 --> 00:04:02.510
Functionally to us as human
beings immediately, right?

67
00:04:02.510 --> 00:04:03.500
It's within milliseconds.

68
00:04:03.500 --> 00:04:06.561
It's actually not immediate in
the sense of like next tick,

69
00:04:06.561 --> 00:04:08.490
like no JS next to kind of seems right.

70
00:04:09.520 --> 00:04:11.570
It's not dependably the next tick.

71
00:04:13.330 --> 00:04:16.525
If that means something to you,
then great, if it doesn't anything to you,

72
00:04:16.525 --> 00:04:17.670
then do not worry about it.

73
00:04:17.670 --> 00:04:19.230
But functionally, it's immediate.

74
00:04:22.320 --> 00:04:26.720
So that's the reason it allows you
to schedule something to run later.

75
00:04:26.720 --> 00:04:31.760
And then react will handle scheduling and
then eventually evoking that.

76
00:04:31.760 --> 00:04:35.904
And then the other thing about that,
by doing it this way,

77
00:04:35.904 --> 00:04:38.622
we can then schedule it run yet later.

78
00:04:38.622 --> 00:04:42.805
So for this example, every time that
animal runs later in the future, or sorry,

79
00:04:42.805 --> 00:04:46.742
every time that animal changes in the
future, it knows to rerun this over and

80
00:04:46.742 --> 00:04:48.100
over again.

81
00:04:48.100 --> 00:04:53.181
Otherwise we'd have to get some sort of
state tracking ourselves that we would do,

82
00:04:53.181 --> 00:04:54.570
which is not fun.

83
00:04:54.570 --> 00:04:56.570
State tracking is my least
favorite thing to do.

84
00:04:57.750 --> 00:05:00.910
So yeah, that's why we do it this way.

85
00:05:02.010 --> 00:05:03.416
Yeah.

86
00:05:03.416 --> 00:05:07.735
&gt;&gt; You might have already mentioned this,
but I know it's something that really

87
00:05:07.735 --> 00:05:12.053
really threw me off the first time I made
my own hook, but you have to use, use at

88
00:05:12.053 --> 00:05:16.320
the beginning of the hook or react to
Freecad, you have to say use breed list.

89
00:05:17.330 --> 00:05:18.090
&gt;&gt; Yes.

90
00:05:18.090 --> 00:05:20.590
So the name here use breed,
this is very intentional.

91
00:05:22.050 --> 00:05:29.643
If you don't call it that, I think
the hooks, ES lint thing will freak out.

92
00:05:29.643 --> 00:05:31.299
And then the other thing is,

93
00:05:31.299 --> 00:05:35.510
you'll actually get like a bunch of
like free error checking from that ES

94
00:05:35.510 --> 00:05:39.390
lint library by calling it use
breed list or use whatever, right?

95
00:05:41.270 --> 00:05:44.450
Something else that's just
kind of cool to think about.

96
00:05:44.450 --> 00:05:46.806
So we have search params here, and

97
00:05:46.806 --> 00:05:51.630
then we're gonna invoke
useBreedList in here, right?

98
00:05:51.630 --> 00:05:56.484
How is it able to track the layer of
depth here of like this is called inside

99
00:05:56.484 --> 00:06:00.622
of this one, like this use state
is called inside of this one,

100
00:06:00.622 --> 00:06:03.667
this use effect is called
inside of this one?

101
00:06:03.667 --> 00:06:08.301
And the answer to this question is,
it doesn't cuz it doesn't care, right?

102
00:06:08.301 --> 00:06:10.950
It doesn't matter, it just called
the same hooks in the same order.

103
00:06:10.950 --> 00:06:13.066
As long as we're not doing for
loops or if statements,

104
00:06:13.066 --> 00:06:16.190
it's always gonna be called in
the same order no matter what, right?

105
00:06:16.190 --> 00:06:19.595
So it doesn't actually care about
the depth of the call stack there because

106
00:06:19.595 --> 00:06:21.539
the first time this is
called it gets this,

107
00:06:21.539 --> 00:06:24.152
the second time it gets gets
called it gets this, right?

108
00:06:24.152 --> 00:06:27.560
And it goes in the same order
every time no matter the depth.

109
00:06:27.560 --> 00:06:30.600
&gt;&gt; I noticed then you mentioned
the name useBreedList.

110
00:06:31.730 --> 00:06:33.437
This component, Pet app and

111
00:06:33.437 --> 00:06:37.100
search parameters all started
with a capital letter.

112
00:06:37.100 --> 00:06:40.584
Is that the reasoning for
the lowercase U in useBreedList?

113
00:06:40.584 --> 00:06:43.964
Is that it's required if
you're declaring a hook?

114
00:06:43.964 --> 00:06:44.930
Is that accurate to say?

115
00:06:47.150 --> 00:06:51.360
&gt;&gt; Let's go with the the name
of the function, yes.

116
00:06:51.360 --> 00:06:55.800
&gt;&gt; Like,
I cannot call this capital U useBreedList.

117
00:06:56.860 --> 00:07:02.320
One that implies that it's of component,
which is not, that's less of a big deal.

118
00:07:02.320 --> 00:07:05.045
But then it won't detect that it's a hook.

119
00:07:05.045 --> 00:07:05.565
In which case,

120
00:07:05.565 --> 00:07:08.300
all that stuff we were talking about will
freak out about all that stuff, right?

121
00:07:09.320 --> 00:07:14.990
As far as like the file name,
that's just useful, it's not required.

122
00:07:16.220 --> 00:07:18.743
But there's no reason I
would ever capitalize this.

123
00:07:23.327 --> 00:07:25.370
Yeah, it just wouldn't be a good idea.

124
00:07:25.370 --> 00:07:29.030
&gt;&gt; Cuz you'd prefer to name the file
name after the primary component?

125
00:07:29.030 --> 00:07:30.080
&gt;&gt; In general, yeah.

126
00:07:30.080 --> 00:07:31.480
&gt;&gt; Cool, thank you.

127
00:07:31.480 --> 00:07:31.980
&gt;&gt; Yeap.

128
00:07:34.870 --> 00:07:37.696
Yeah, in fact,
let's go finish this out really quick.

129
00:07:40.859 --> 00:07:47.110
So up here we're gonna say import
useBreedList from useBreedList.

130
00:07:48.230 --> 00:07:52.574
So this is super useful just because if
I look at us breed list I look at that I

131
00:07:52.574 --> 00:07:55.325
immediately know that that is a hook,
right?

132
00:07:55.325 --> 00:07:59.018
And that just makes it super
useful to navigate a project with.

133
00:07:59.018 --> 00:08:02.950
And I mean, I think I've repeated this in
almost every course that I've taught here.

134
00:08:02.950 --> 00:08:06.461
And I probably stole this from Kyle
Simpsons talk one of the times I saw him,

135
00:08:06.461 --> 00:08:08.720
its code is communication, right?

136
00:08:08.720 --> 00:08:12.566
It's first for humans reading your
code and secondary for computers,

137
00:08:12.566 --> 00:08:14.530
like invoking it, right?

138
00:08:14.530 --> 00:08:17.964
If it was first for computers we'd
all be writing assembly still, right?

139
00:08:17.964 --> 00:08:20.330
Because that's what makes
computers go faster.

140
00:08:20.330 --> 00:08:23.467
We can do like much more low level
high performance kind of things, but

141
00:08:23.467 --> 00:08:26.923
the reason why we don't write everything
in assembly or binary, directly,

142
00:08:26.923 --> 00:08:28.990
is because code is communication.

143
00:08:28.990 --> 00:08:32.539
We read these highly abstract languages
because they're easier to communicate

144
00:08:32.539 --> 00:08:34.250
between each other, right?

145
00:08:34.250 --> 00:08:38.270
So if I hand you this code, I'm gonna
do whatever I can to make it the most

146
00:08:38.270 --> 00:08:42.160
comprehensible to you, and
then secondarily useful to a computer.

147
00:08:43.180 --> 00:08:47.141
It's basically like notes we pass each
other that just happened to be executable

148
00:08:47.141 --> 00:08:47.910
by a computer.

149
00:08:49.470 --> 00:08:52.950
It's very useful to think of all of your
code in terms of that as like, what am I

150
00:08:52.950 --> 00:08:56.980
saying to the next person that resists
high probability is gonna be future you.

151
00:08:56.980 --> 00:08:59.913
So how do I not piss off future me?

152
00:08:59.913 --> 00:09:04.338
If you know how to do that
I haven't figured out yet,

153
00:09:04.338 --> 00:09:06.761
cuz future Brian's a jerk.

154
00:09:06.761 --> 00:09:10.922
Actually past Brian's
a bigger jerk though.

155
00:09:10.922 --> 00:09:12.222
Screw that guy.

156
00:09:12.222 --> 00:09:12.829
Anyway.

157
00:09:12.829 --> 00:09:17.633
So here line 11,
what we wanna do now is replace this,

158
00:09:19.760 --> 00:09:26.841
Breeds equals useBreedList and
we're gonna pass it, animal.

159
00:09:32.027 --> 00:09:33.859
And this got upset, no.

160
00:09:33.859 --> 00:09:39.949
[LAUGH] So now it says unloaded,
I'm gonna hit OK and it's gonna say,

161
00:09:39.949 --> 00:09:45.213
maybe loaded, I don't know,
this is ridiculous though.

162
00:09:45.213 --> 00:09:50.679
Loading, loaded, [LAUGH]
&gt;&gt; Off the alert.

163
00:09:50.679 --> 00:09:51.179
&gt;&gt; Yeah.

164
00:09:52.310 --> 00:09:53.200
I forgot to did that.

165
00:09:53.200 --> 00:09:57.598
See I told you pass Brian, huge jerk.

166
00:09:57.598 --> 00:10:00.450
[LAUGH]
&gt;&gt; That's hilarious.

167
00:10:00.450 --> 00:10:03.130
That's like the funniest thing
I've done in code in a while.

168
00:10:03.130 --> 00:10:07.730
Anyway, this is actually kind of probably
useful to illustrate how the hook is.

169
00:10:07.730 --> 00:10:11.655
No, so it has only called
unloaded right now, right?

170
00:10:11.655 --> 00:10:13.660
And if I change this,
there's nothing here and breed this.

171
00:10:13.660 --> 00:10:16.297
But if I go in and
change this to be dog, right?

172
00:10:16.297 --> 00:10:20.830
And then cause loading,
alerts will wait, right?

173
00:10:20.830 --> 00:10:23.812
So now if I hit OK again,
it'll call loaded.

174
00:10:23.812 --> 00:10:26.535
And he probably just said don't allow
Brian to give you any more alerts.

175
00:10:26.535 --> 00:10:29.175
[LAUGH] And
now if you look here instead of breed,

176
00:10:29.175 --> 00:10:32.748
you'll actually see all of
the breeds coming back from the API.

177
00:10:37.801 --> 00:10:38.420
Pretty cool, right?

178
00:10:40.850 --> 00:10:44.429
And now we have this like useBreedList
custom hook that anytime in

179
00:10:44.429 --> 00:10:48.009
the future if we read another
component that needs to see breeds,

180
00:10:48.009 --> 00:10:51.655
maybe that's like in our
administrator tools, or I don't know,

181
00:10:51.655 --> 00:10:55.688
something else that would ever need to
see breeds, all we have to do is load

182
00:10:55.688 --> 00:10:59.630
this custom hook and feed an animal and
all sudden we get alerts galore.

183
00:11:00.710 --> 00:11:03.700
Also definitely going to your
use read this and delete that.

184
00:11:03.700 --> 00:11:06.965
Unholy abomination of code.

185
00:11:06.965 --> 00:11:09.170
Never use alert.

186
00:11:09.170 --> 00:11:13.240
Let me rephrase that, never,
ever use alert in your code.

187
00:11:15.327 --> 00:11:18.010
Just poor code, which is why I did it.

188
00:11:18.010 --> 00:11:23.430
So that is the basic gist of what a custom
hook is when you're gonna use them.

189
00:11:23.430 --> 00:11:28.420
Honestly, I don't end up writing them all
the time, I only write them sometimes.

190
00:11:30.960 --> 00:11:35.892
Again, when you're doing like a huge block
of here's a bunch of things that I'm

191
00:11:35.892 --> 00:11:37.930
doing that could be reusable.

192
00:11:37.930 --> 00:11:41.650
It's like basically a component of a hook,
right?

193
00:11:43.160 --> 00:11:45.479
Or actually probably
a better way of something.

194
00:11:45.479 --> 00:11:49.840
It's composability is really what it
actually lends to this equation, right?

195
00:11:49.840 --> 00:11:52.811
So now I can have several hooks and
I can compose them together

196
00:11:52.811 --> 00:11:55.559
to get interesting and
new derivative functionality.

197
00:11:58.070 --> 00:12:03.010
Now I've heard people say that they'll
never call like use state directly in

198
00:12:03.010 --> 00:12:07.870
a function, they always compose
that into like a custom hook.

199
00:12:07.870 --> 00:12:14.031
So what you would do if you were up
that mindset, which again, I am not.

200
00:12:14.031 --> 00:12:18.337
But if I were, I would take all of these
things and basically make this like

201
00:12:18.337 --> 00:12:22.157
a search params state custom hook
that would handle all of this and

202
00:12:22.157 --> 00:12:26.394
then at the top of this I would have
one hook that basically would be like,

203
00:12:26.394 --> 00:12:29.542
constant use params search
like hook there, right?

204
00:12:29.542 --> 00:12:32.264
And it would encapsulate
all of that in one hook.

205
00:12:32.264 --> 00:12:35.174
Some people like that cuz I think it
makes their components look cleaner.

206
00:12:35.174 --> 00:12:37.646
I think it makes it
look harder to read and

207
00:12:37.646 --> 00:12:40.207
I'm very against harder to read things.

208
00:12:40.207 --> 00:12:43.085
I think it's okay for things to be
long as long as they're okay to read.

