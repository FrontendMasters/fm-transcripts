WEBVTT

1
00:00:00.260 --> 00:00:05.511
Component composition, so
at this point you're probably thinking

2
00:00:05.511 --> 00:00:11.314
to yourself there's a lot of logic in
the search params route here, right?

3
00:00:11.314 --> 00:00:14.064
Like this is 100 line
component there's no hard and

4
00:00:14.064 --> 00:00:18.726
fast rule after X amount of lines do this
but when you're approaching like 100, 150,

5
00:00:18.726 --> 00:00:20.840
200 components getting pretty long.

6
00:00:22.230 --> 00:00:25.780
So you might think about like,
what is this component doing?

7
00:00:25.780 --> 00:00:28.265
And like, is there something
that I can break out of here and

8
00:00:28.265 --> 00:00:29.558
put into another component and

9
00:00:29.558 --> 00:00:33.430
then I can kind of have smaller
components that compose into each other.

10
00:00:33.430 --> 00:00:37.915
It just makes it easier to manage, easier
to kind of reason about but the other

11
00:00:37.915 --> 00:00:42.350
thing I wanna kind of put you on to is,
you can break it down too much, right?

12
00:00:43.350 --> 00:00:46.988
I'm trying to remember at Reddit,

13
00:00:46.988 --> 00:00:51.483
when I was we were doing
our first react app.

14
00:00:51.483 --> 00:00:57.293
We broke everything down into
the tiniest components, like text line.

15
00:00:57.293 --> 00:00:59.674
We like our own paragraph components.

16
00:00:59.674 --> 00:01:02.175
There's a point where it gets
ridiculous and it's hard to understand,

17
00:01:02.175 --> 00:01:03.737
what's going on and
why it's done that way.

18
00:01:03.737 --> 00:01:08.341
And at some point you actually
start running into performance

19
00:01:08.341 --> 00:01:12.954
problems because there's so
many components in your truth.

20
00:01:12.954 --> 00:01:18.541
We had depths of 200 components
sometimes inside in our React App,

21
00:01:18.541 --> 00:01:22.816
which was ungood is
the the scientific term for that.

22
00:01:22.816 --> 00:01:25.810
So just balance, right?

23
00:01:25.810 --> 00:01:28.148
You have to balance like code readability.

24
00:01:28.148 --> 00:01:29.557
Usually performance is not a thing,

25
00:01:29.557 --> 00:01:31.748
particularly now react is much
faster than it used to be.

26
00:01:31.748 --> 00:01:36.652
So I don't think that necessarily
be a concern today but

27
00:01:36.652 --> 00:01:39.270
back then it definitely was.

28
00:01:39.270 --> 00:01:45.073
Anyway, let's pull our pet
rendering out of this red,

29
00:01:45.073 --> 00:01:51.511
now we have this little part here,
this is just a list of pets.

30
00:01:51.511 --> 00:01:52.805
So one that could be reusable, right?

31
00:01:52.805 --> 00:01:55.220
We can use like a list of pecky
components somewhere else.

32
00:01:55.220 --> 00:01:56.008
That's good.
And

33
00:01:56.008 --> 00:02:00.310
it's a very easy thing to break down here.

34
00:02:02.100 --> 00:02:07.524
So what I want you to do, I want you
to make a new component here and

35
00:02:07.524 --> 00:02:10.455
I want you to call it results.js.

36
00:02:12.931 --> 00:02:16.611
Here we're gonna import pet from pet.

37
00:02:19.915 --> 00:02:25.450
And we're gonna make const results equals,
and

38
00:02:25.450 --> 00:02:31.526
then we're gonna pull
a parameter here called pets.

39
00:02:36.485 --> 00:02:38.829
And here we're going to return.

40
00:02:44.422 --> 00:02:46.454
I am gonna talk about
turn [INAUDIBLE] here.

41
00:02:46.454 --> 00:02:51.177
Everyone let's turn Aries right?

42
00:02:51.177 --> 00:02:58.059
So we're gonna ask a question here,
is like do I have any pets?

43
00:02:58.059 --> 00:03:01.818
So if you don't have any pets,

44
00:03:01.818 --> 00:03:07.319
which this is what this is checking,
right?

45
00:03:07.319 --> 00:03:08.778
So if I have no pets here,

46
00:03:08.778 --> 00:03:12.474
then I gonna [INAUDIBLE] because
these is no pets found, right?

47
00:03:12.474 --> 00:03:16.210
So we're gonna do this with a ternary.

48
00:03:16.210 --> 00:03:20.860
And again, I recognize that
this is kind of hard to read.

49
00:03:20.860 --> 00:03:24.001
But I'm showing you this
because this is all over react,

50
00:03:24.001 --> 00:03:25.970
people use ternary is everywhere.

51
00:03:28.420 --> 00:03:33.430
So we're gonna put like an h1
here that says, no pets found.

52
00:03:38.500 --> 00:03:45.060
Okay, that's, no, don't do that.

53
00:03:45.060 --> 00:03:46.419
That's harder to read.

54
00:03:46.419 --> 00:03:52.700
Okay, otherwise, we're gonna put
this kinda what we had here.

55
00:03:52.700 --> 00:03:55.198
In fact, you can just go copy and
paste this outta here.

56
00:03:58.688 --> 00:03:59.410
I'll just copy it.

57
00:04:01.440 --> 00:04:04.746
That
&gt;&gt; Because you don't need

58
00:04:04.746 --> 00:04:05.630
the curly bracket?

59
00:04:07.100 --> 00:04:09.981
To start pets
&gt;&gt; I think you're right.

60
00:04:11.506 --> 00:04:13.380
Thanks, appreciate that.

61
00:04:13.380 --> 00:04:17.930
Okay, so
let's unpack this cuz it's a little dense.

62
00:04:17.930 --> 00:04:19.795
And I intentionally did that, again,

63
00:04:19.795 --> 00:04:23.230
cuz you're gonna find react
code that looks like this.

64
00:04:23.230 --> 00:04:26.138
I'm not necessarily telling you
this is the best way to write it.

65
00:04:26.138 --> 00:04:27.734
Though I did write this.

66
00:04:27.734 --> 00:04:30.363
So you can say, Brian that's really
dumb and you probably right.

67
00:04:30.363 --> 00:04:31.372
So that's fine.

68
00:04:31.372 --> 00:04:36.146
So results here this is destruction,
right?

69
00:04:36.146 --> 00:04:41.990
So basically the same
thing here saying const.

70
00:04:41.990 --> 00:04:47.234
Pets equals params.pets and
this was params,

71
00:04:47.234 --> 00:04:52.968
right, same thing, We're just saying that

72
00:04:52.968 --> 00:04:58.003
we know that there is a thing here called
pets, we would like to pull that out,

73
00:04:58.003 --> 00:05:01.730
okay, then we're putting this
all inside of a div here.

74
00:05:02.910 --> 00:05:09.130
And we're saying, hey, if no pets are
found, so if there's no length to pets,

75
00:05:09.130 --> 00:05:14.380
then do no pets found, right,
we'll just display that out.

76
00:05:14.380 --> 00:05:16.954
Otherwise, and
this is what this ternary is,

77
00:05:16.954 --> 00:05:20.020
which is just a normal JavaScript feature.

78
00:05:20.020 --> 00:05:25.653
I mentioned most of us don't use it
a whole lot because it's kind of unclear.

79
00:05:25.653 --> 00:05:28.879
But again, because all these
are just JavaScript expressions,

80
00:05:28.879 --> 00:05:32.290
you can do turneries here but
you couldn't put an if statement here.

81
00:05:32.290 --> 00:05:34.390
So that's why people end up using
a lot of turn arrays in react.

82
00:05:36.560 --> 00:05:40.813
So that's what the colon is
the otherwise this is like,

83
00:05:40.813 --> 00:05:44.622
if this is true do this,
if it's not true do this.

84
00:05:44.622 --> 00:05:50.880
That's the sum of what a ternary is,
then you're saying otherwise pets.map.

85
00:05:50.880 --> 00:05:52.500
Do all this other stuff.

86
00:05:52.500 --> 00:05:55.350
We're gonna pass a few
more things into pet.

87
00:05:56.670 --> 00:06:02.250
We already have the animal,
we have the breed, we have the name,

88
00:06:02.250 --> 00:06:07.230
we have key,
we have to pass in the images, pet.images.

89
00:06:09.620 --> 00:06:11.344
We're gonna pass in a location and

90
00:06:11.344 --> 00:06:14.386
we're going to actually just
put in a template string here.

91
00:06:18.463 --> 00:06:26.885
Pet.,pet.city, pet.state and

92
00:06:26.885 --> 00:06:32.049
then, id=pet.id.

93
00:06:33.078 --> 00:06:37.120
So, what's cool about this now, is we can
take in a list of any arbitrary pets and

94
00:06:37.120 --> 00:06:39.980
we can display out a list here, right?

95
00:06:39.980 --> 00:06:43.398
So you can imagine we have our
search results page but let's say,

96
00:06:43.398 --> 00:06:47.751
we were going to go build later a, I don't
know an administrator tool where someone

97
00:06:47.751 --> 00:06:50.570
could go and
moderate all the pets coming in, right?

98
00:06:50.570 --> 00:06:52.720
And we could just throw a results.

99
00:06:52.720 --> 00:06:55.076
Other component there so
this has become reusable.

100
00:07:00.646 --> 00:07:01.332
Yeah.

101
00:07:01.332 --> 00:07:04.519
&gt;&gt; Just a bit ago you said you
can't run an if statement.

102
00:07:04.519 --> 00:07:07.179
And I guess maybe I'm
forgetting fundamentally but

103
00:07:07.179 --> 00:07:09.609
at what point when we
started this JavaScript?

104
00:07:09.609 --> 00:07:10.519
What functions?

105
00:07:10.519 --> 00:07:12.000
Why can't we do it as statement?

106
00:07:12.000 --> 00:07:12.920
Why can't we do?

107
00:07:12.920 --> 00:07:18.420
&gt;&gt; Sure, so there's a term in
JavaScript called an expression.

108
00:07:20.100 --> 00:07:22.481
And expression is basically anything
you can put on the right side of

109
00:07:22.481 --> 00:07:23.039
an equal sign.

110
00:07:24.900 --> 00:07:28.500
So if I have const X equals,
whatever I can put here.

111
00:07:28.500 --> 00:07:31.310
That's what you would consider
an expression in JavaScript.

112
00:07:31.310 --> 00:07:35.889
So anything that goes in between curly

113
00:07:35.889 --> 00:07:40.332
braces here has to be an expression.

114
00:07:40.332 --> 00:07:44.415
So what's different than
an expression is a statement.

115
00:07:44.415 --> 00:07:48.000
So notice that we always call them if
statements because they are statements.

116
00:07:48.000 --> 00:07:53.960
So if blah, const x equals five, right?

117
00:07:56.770 --> 00:07:58.762
This would be a statement and

118
00:07:58.762 --> 00:08:04.050
therefore you can't do statements
inside of the curly braces, yep.

119
00:08:04.050 --> 00:08:08.239
Just to drive further home a little bit,
the entire thing here,

120
00:08:08.239 --> 00:08:13.215
this entire line ten of the assignment
is an assignment statement, right?

121
00:08:13.215 --> 00:08:14.304
So it's basically like one line.

122
00:08:14.304 --> 00:08:21.340
It's what you'd put between semicolons,
is a good way you can think about that.

123
00:08:21.340 --> 00:08:24.082
As opposed to what's on the right
side here, just the seven,

124
00:08:24.082 --> 00:08:25.254
that's the expression.

125
00:08:28.190 --> 00:08:29.230
That makes sense?

126
00:08:29.230 --> 00:08:33.997
&gt;&gt; Yeah, so to expand it a little further
than, if for some reason, we wanted our

127
00:08:33.997 --> 00:08:38.840
JavaScript to adjust a variable,
change x to 10 or something like that.

128
00:08:38.840 --> 00:08:42.486
Then let's kind of fundamentally
why we're using use state and

129
00:08:42.486 --> 00:08:46.621
things like that, rather than putting
in listeners and updating code.

130
00:08:46.621 --> 00:08:50.403
Within those HTML elements.

131
00:08:50.403 --> 00:08:54.563
&gt;&gt; Yeah, that's one way you
could frame it, for sure, cool.

132
00:08:57.366 --> 00:09:01.724
Okay, so go back to Search params and

133
00:09:01.724 --> 00:09:08.050
instead of this whole
statement here of like line 89

134
00:09:08.050 --> 00:09:13.128
to line 96, I am just gonna put results.

135
00:09:14.371 --> 00:09:17.805
So now what's cool about VS code here
is I can just start typing results.

136
00:09:17.805 --> 00:09:20.962
It's like, do you want to pull
in results from ./results?

137
00:09:20.962 --> 00:09:22.142
And it's like, yes, I do.

138
00:09:22.142 --> 00:09:23.422
Yes, please.

139
00:09:23.422 --> 00:09:29.032
And then if you go look up at the top,
it automatically imported it for me.

140
00:09:31.380 --> 00:09:34.198
But if it didn't do that for
you make sure you have the line for

141
00:09:34.198 --> 00:09:35.921
there import results from results.

142
00:09:38.545 --> 00:09:44.423
Okay, so down here we have to
pass in pets to it, right?

143
00:09:44.423 --> 00:09:47.355
So pets = {pets}.

144
00:09:58.080 --> 00:10:02.540
Okay, and then last thing up here, we can
get rid of the pet import since we're no

145
00:10:02.540 --> 00:10:05.910
longer using that directly
inside of our search params.

146
00:10:05.910 --> 00:10:08.344
That's only being used with results.

147
00:10:15.360 --> 00:10:17.870
Now if we went over to our page here,

148
00:10:17.870 --> 00:10:22.399
it should look exactly the same
except notice for a hot second.

149
00:10:22.399 --> 00:10:23.719
It says, no pets found.

150
00:10:26.323 --> 00:10:28.724
Because that's what our new
results component will do,

151
00:10:28.724 --> 00:10:31.024
it'll show no pets found if
there's nothing there and

152
00:10:31.024 --> 00:10:33.440
initially there's nothing
there on that first render.

