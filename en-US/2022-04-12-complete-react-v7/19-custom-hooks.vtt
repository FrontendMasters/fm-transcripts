WEBVTT

1
00:00:00.538 --> 00:00:06.742
We've used set state, or sorry,
useState, and we've used useEffect.

2
00:00:06.742 --> 00:00:11.292
One of the cool thing that you can do
with React is you can make your own hook.

3
00:00:11.292 --> 00:00:14.387
Now why would you wanna
make your own hook?

4
00:00:14.387 --> 00:00:17.186
It's a dumb question, you don't,

5
00:00:17.186 --> 00:00:21.625
I'm just kidding sometimes you do,
but not frequently.

6
00:00:21.625 --> 00:00:24.233
Well, I guess that's kinda debatable
depending on who you talk to.

7
00:00:24.233 --> 00:00:28.591
There's some people that say,
I use everything as a custom hook and

8
00:00:28.591 --> 00:00:30.737
I use no useState in my industry.

9
00:00:30.737 --> 00:00:32.854
People are wrong don't listen to them.

10
00:00:32.854 --> 00:00:37.499
Basically, if you find yourself doing
like a song and dance of several hooks

11
00:00:37.499 --> 00:00:41.928
in a row, and that's also generally
applicable to another component,

12
00:00:41.928 --> 00:00:46.087
that's a good candidate for
something to be a custom hook, right?

13
00:00:46.087 --> 00:00:50.406
So a good example of that is like,
maybe you have, this is a good example.

14
00:00:50.406 --> 00:00:53.169
Someone gives you a city and
then you use that city to call and

15
00:00:53.169 --> 00:00:54.502
get like a zip code, right?

16
00:00:54.502 --> 00:00:56.146
You can see that kinda workflow happening.

17
00:00:56.146 --> 00:01:01.360
If you do that a lot, you could get
like a use zip code hook that you

18
00:01:01.360 --> 00:01:06.685
just provided a location and
it gives you back a zip code, right?

19
00:01:06.685 --> 00:01:09.881
So that would be a really good candidate
of like a workflow that would work really

20
00:01:09.881 --> 00:01:10.892
well into a custom hook.

21
00:01:10.892 --> 00:01:15.742
In our particular case, we're gonna
make one called useBreedList because we

22
00:01:15.742 --> 00:01:20.163
can get a breed list back from our API
if we give it an animal, all right?

23
00:01:20.163 --> 00:01:24.164
If we're doing a pet adoption app
that can be useful in several places.

24
00:01:24.164 --> 00:01:26.961
So instead of putting all that logic here,

25
00:01:26.961 --> 00:01:30.469
we're gonna make our own
hook called useBreedList.

26
00:01:30.469 --> 00:01:37.181
So go ahead with me create a new
file called useBreedList.js.

27
00:01:37.181 --> 00:01:42.658
And we're going to import useState,

28
00:01:42.658 --> 00:01:46.089
useEffect from React.

29
00:01:50.983 --> 00:01:53.349
Let me make a local cache.

30
00:01:53.349 --> 00:01:57.284
And we're gonna make this, so
that if you go from you call,

31
00:01:57.284 --> 00:02:01.773
breed lists with dog and it goes and
gets you poodle and Chihuahua and

32
00:02:01.773 --> 00:02:05.502
the called cat and
it gets you back, Tabby and Siamese.

33
00:02:05.502 --> 00:02:07.485
If you go back to dog, we wanna make it so

34
00:02:07.485 --> 00:02:10.926
that it doesn't go back to the API
it just gives you the local cache.

35
00:02:10.926 --> 00:02:12.860
Now we're just gonna do an object here,
but

36
00:02:12.860 --> 00:02:15.644
you should use something like
local storage for this, right?

37
00:02:15.644 --> 00:02:21.982
We're just simplifying everything by
just making it an object here, Okay?

38
00:02:21.982 --> 00:02:23.336
Export default function,

39
00:02:26.324 --> 00:02:32.702
UseBreedList, Okay?

40
00:02:32.702 --> 00:02:38.684
And then here we're gonna
say const breedList and

41
00:02:38.684 --> 00:02:44.810
setBreedList=, you may
have guessed useState,

42
00:02:44.810 --> 00:02:48.953
you'd be correct, empty array.

43
00:02:48.953 --> 00:02:54.908
And const status, we're not gonna be using
the status in this particular course or

44
00:02:54.908 --> 00:02:56.448
anything like that.

45
00:02:56.448 --> 00:03:00.184
But I'm just gonna show you how I would
have built this if I was gonna use this in

46
00:03:00.184 --> 00:03:01.060
several places.

47
00:03:01.060 --> 00:03:05.795
What's useful about this is now we can
check in our components, is this pending,

48
00:03:05.795 --> 00:03:06.903
is there an error?

49
00:03:06.903 --> 00:03:08.522
Is this working?

50
00:03:08.522 --> 00:03:12.856
It'll be like a status of what
the breedList is in at the moment.

51
00:03:12.856 --> 00:03:15.402
So then you could show like loading
spinners and stuff like that.

52
00:03:19.867 --> 00:03:23.916
So, then this is gonna be a useState
we're going make it like an enumerated

53
00:03:23.916 --> 00:03:24.765
type, right?

54
00:03:24.765 --> 00:03:28.278
An enumerated type is basically like this,
can only be like a subset of types.

55
00:03:28.278 --> 00:03:34.108
This can either be either unloaded,
or pending, or loaded, that's it.

56
00:03:34.108 --> 00:03:39.913
So it's gonna start out in
an unloaded state, Okay?

57
00:03:39.913 --> 00:03:43.549
First thing here we're gonna use effect,

58
00:03:43.549 --> 00:03:48.710
this is gonna be a function and
we're gonna say if no animal,

59
00:03:52.222 --> 00:03:57.164
Then setBreedList to be empty.

60
00:03:57.164 --> 00:04:01.014
So if someone asks for
a BreedList for empty string animal,

61
00:04:01.014 --> 00:04:04.634
you just give them,
there are no breeds for no animals.

62
00:04:04.634 --> 00:04:05.474
You get nothing.

63
00:04:07.698 --> 00:04:11.004
Else if local cache has an entry for

64
00:04:11.004 --> 00:04:15.553
this, Then give them that,

65
00:04:24.457 --> 00:04:33.398
Else, request breedList, With,

66
00:04:42.789 --> 00:04:44.310
Okay?

67
00:04:44.310 --> 00:04:47.516
We're just gonna put this
inside of our effect here.

68
00:04:47.516 --> 00:04:50.206
So we're gonna make an async
function requestBreedList

69
00:04:55.492 --> 00:04:58.434
Takes no parameters.

70
00:04:58.434 --> 00:05:01.606
First thing if you call setBrainList,

71
00:05:01.606 --> 00:05:05.265
we're gonna send
the breedList to be empty.

72
00:05:05.265 --> 00:05:10.571
So for example, if I go from dog to cat,
immediately I wanna stop providing breeds,

73
00:05:10.571 --> 00:05:14.632
because now I have no breeds that
are gonna be accurate, right?

74
00:05:16.803 --> 00:05:20.267
Basically, you don't wanna get into
like some sort of like halfway

75
00:05:20.267 --> 00:05:22.955
state where you have dogs
that are Siamese, right?

76
00:05:22.955 --> 00:05:24.848
And that's the point here.

77
00:05:24.848 --> 00:05:28.144
SetStatus, to be loading,

78
00:05:33.948 --> 00:05:37.972
And then we're gonna say, const res=await.

79
00:05:37.972 --> 00:05:44.973
I need to make the fetch first,
res=await, res await fetch.

80
00:05:44.973 --> 00:05:54.983
http://pets-v2.dev-api's.com/breeds

81
00:05:54.983 --> 00:05:59.210
and animal=animal.

82
00:06:00.576 --> 00:06:03.926
Again, remember those are backticks
because this is a template string,

83
00:06:07.096 --> 00:06:12.766
pets-v2.dev-apis.com/breeds.

84
00:06:12.766 --> 00:06:14.750
Cool, that'll get there.

85
00:06:14.750 --> 00:06:20.731
const json = await res.json.

86
00:06:24.243 --> 00:06:29.178
So we're gonna store this in our local

87
00:06:29.178 --> 00:06:33.815
cache = json.breeds or nothing.

88
00:06:33.815 --> 00:06:38.495
So if you go out and try and
get horses for example.

89
00:06:38.495 --> 00:06:40.399
And the API doesn't support that.

90
00:06:40.399 --> 00:06:44.060
It's just gonna give you
back an empty ArrayList.

91
00:06:44.060 --> 00:06:45.419
That's what the or does here.

92
00:06:48.684 --> 00:06:56.408
SetBreedList, LocalCache animal.

93
00:06:59.090 --> 00:07:04.278
This is a habit of mine by the word
animal come from that just comes from,

94
00:07:04.278 --> 00:07:07.478
sorry up here useBreedList here line five,

95
00:07:07.478 --> 00:07:11.895
you need to take in a parameter
of animal that's important.

96
00:07:11.895 --> 00:07:16.080
That's like, how are we giving
like empty strings to useState.

97
00:07:16.080 --> 00:07:19.878
This is that string coming in from
wherever the hook has been called.

98
00:07:25.102 --> 00:07:27.159
Cool.

99
00:07:27.159 --> 00:07:34.602
&gt;&gt; Why 23 and the API call are we
doing /breeds and that /pets breeds=?

100
00:07:34.602 --> 00:07:36.263
Great.

101
00:07:36.263 --> 00:07:40.143
&gt;&gt; So this is just the name of
the API that I made for you.

102
00:07:40.143 --> 00:07:43.447
&gt;&gt; In search-
&gt;&gt; So-

103
00:07:43.447 --> 00:07:45.915
&gt;&gt; Columns of /pets.

104
00:07:45.915 --> 00:07:47.227
&gt;&gt; Right, which is a different API.

105
00:07:47.227 --> 00:07:47.829
&gt;&gt; Okay got you.

106
00:07:47.829 --> 00:07:48.855
&gt;&gt; Yeah.
Two different API's.

107
00:07:48.855 --> 00:07:50.276
Good question.

108
00:07:50.276 --> 00:07:52.323
But prove my point here.

109
00:07:52.323 --> 00:07:57.502
You call with dog you'll get all
these very different APIs back,

110
00:07:57.502 --> 00:08:01.739
if you call with pets,
you will get specific pets, so

111
00:08:01.739 --> 00:08:04.012
this will give you all dogs.

112
00:08:04.012 --> 00:08:04.987
Good question.

113
00:08:10.612 --> 00:08:16.861
Okay, Someone might ask me,

114
00:08:16.861 --> 00:08:21.745
hey, why are you using the localCache
instead of just doing json.breeds

115
00:08:21.745 --> 00:08:24.124
kinda just force a habit I suppose.

116
00:08:24.124 --> 00:08:27.569
I mean, they end up being the same thing
cuz you're setting them to be equivalent

117
00:08:27.569 --> 00:08:28.238
to each other.

118
00:08:28.238 --> 00:08:36.990
And then setStatus, I guess,
technically the cells a race condition.

119
00:08:39.275 --> 00:08:42.523
But as you requested two
animals in quick succession,

120
00:08:42.523 --> 00:08:45.842
one where the first request
was slower than the second,

121
00:08:45.842 --> 00:08:50.230
probably around the second closer
than the first, they would come back.

122
00:08:50.230 --> 00:08:52.956
I don't know, anyway, you there's
probably a race condition there.

123
00:08:52.956 --> 00:08:55.102
I don't know some figured out and
fix it for me.

124
00:08:55.102 --> 00:08:56.359
So what open source software is for?

125
00:08:59.010 --> 00:09:00.813
Like halfway kidding on that.

126
00:09:00.813 --> 00:09:08.547
[LAUGH] Okay, so now we have this
great little useEffect function.

127
00:09:08.547 --> 00:09:10.425
This one is gonna say, hey,

128
00:09:10.425 --> 00:09:15.295
you have dependencies you haven't
declared yet, which is true, we do.

129
00:09:15.295 --> 00:09:20.074
We're going to set them here and

130
00:09:20.074 --> 00:09:24.502
we're dependent on animal,

131
00:09:30.579 --> 00:09:31.904
Okay?

132
00:09:31.904 --> 00:09:35.336
So basically what's
cool about this now is,

133
00:09:35.336 --> 00:09:39.852
this is now keeping track of
like whenever animal changes,

134
00:09:39.852 --> 00:09:44.455
we request it, we don't have to
like handle any of that logic

135
00:09:44.455 --> 00:09:49.725
ourselves React by giving animal here,
now this is React promises.

136
00:09:49.725 --> 00:09:53.118
React is gonna know okay, animal change
time I gotta recall this one, right?

137
00:09:53.118 --> 00:09:56.191
And it keeps track of all
those dependencies for you.

138
00:09:56.191 --> 00:10:00.357
I'm gonna say return

139
00:10:00.357 --> 00:10:04.989
breedList and status.

140
00:10:04.989 --> 00:10:08.948
So I'm just adhering to their
normal array type things.

141
00:10:08.948 --> 00:10:13.274
Since all hooks use this I just kind
of keep with the tradition, but

142
00:10:13.274 --> 00:10:15.215
that's why I'm doing that.

143
00:10:15.215 --> 00:10:16.791
There's no reason you
have to do it this way.

144
00:10:16.791 --> 00:10:19.752
It's just the way that
I chose to do it here.

145
00:10:19.752 --> 00:10:24.196
And the other thing I'll tell you here, we
are providing the status back to the user

146
00:10:24.196 --> 00:10:27.639
so they can see that it's either loading,
loaded or unloaded.

147
00:10:27.639 --> 00:10:30.594
We're not gonna use it throughout
the rest of the course but

148
00:10:30.594 --> 00:10:32.435
it's just like a good idea, right?

149
00:10:32.435 --> 00:10:33.937
Okay.

150
00:10:33.937 --> 00:10:37.900
And now, this breed will be available
to us whenever we use this hook.

