WEBVTT

1
00:00:00.350 --> 00:00:04.860
So prettier people get confused about,
what's the overlap between prettier and

2
00:00:04.860 --> 00:00:05.393
eslint?

3
00:00:05.393 --> 00:00:07.550
When do I use one, and
when do I not use one?

4
00:00:09.540 --> 00:00:11.550
And the first thing that I'll say is,
there is overlap.

5
00:00:11.550 --> 00:00:16.152
There are some things that they both I do
and in general where they overlap you want

6
00:00:16.152 --> 00:00:19.414
prettier to do it cuz prettier
is better and faster at it.

7
00:00:19.414 --> 00:00:24.340
So you wanna like the mechanical
syntactical kind of thing of like how much

8
00:00:24.340 --> 00:00:26.810
whitespace, where do I put commas?

9
00:00:26.810 --> 00:00:28.375
Where do I put spaces?

10
00:00:28.375 --> 00:00:31.839
All of that kind of
syntactical mechanical kind of

11
00:00:31.839 --> 00:00:35.090
thing you wanna prettier to take care of.

12
00:00:35.090 --> 00:00:39.103
Where you want to enforce like code
opinions and like structures of code and

13
00:00:39.103 --> 00:00:41.149
like what the code is actually doing.

14
00:00:41.149 --> 00:00:44.200
That's what you want ESLint
to take care of right?

15
00:00:44.200 --> 00:00:47.815
So pretty well take care of like,
where do I put a hard return?

16
00:00:47.815 --> 00:00:49.190
Where do I put a space?

17
00:00:49.190 --> 00:00:52.519
ESLint is going to take care of like,
Am I doing accessibility correctly?

18
00:00:52.519 --> 00:00:55.190
Am I using old API's?

19
00:00:55.190 --> 00:00:59.697
Right, prettier doesn't take care of any
does not look at the code it doesn't

20
00:00:59.697 --> 00:01:04.478
make any assertion that it's correct right
it just says like I'm making this space

21
00:01:04.478 --> 00:01:05.382
to uniformly.

22
00:01:05.382 --> 00:01:09.878
Es linters saying things more like I don't
want you to use this API.If you're using

23
00:01:09.878 --> 00:01:13.677
this thing incorrectly, you declared
a variable that you never used,

24
00:01:13.677 --> 00:01:16.800
like it's introspection your
code from that direction.

25
00:01:18.080 --> 00:01:19.390
That make sense?

26
00:01:19.390 --> 00:01:22.256
Okay and the reason I say
that there is some overlap,

27
00:01:22.256 --> 00:01:26.622
you can have ESLint to tell you that
you're spacing your code incorrectly, but

28
00:01:26.622 --> 00:01:28.660
just let prettier take care of that.

29
00:01:29.890 --> 00:01:34.856
So let's go install ESLint then.

30
00:01:34.856 --> 00:01:38.584
The first thing I would tell you is for
the least for the rest of the course here

31
00:01:38.584 --> 00:01:41.571
I'm going to have you install
specific versions of things.

32
00:01:41.571 --> 00:01:45.127
So I'm going to say like NPM
install ESLint at 8.8.0 you

33
00:01:45.127 --> 00:01:48.067
might ask why don't I just
want the latest thing?

34
00:01:48.067 --> 00:01:51.170
In general yes,
you do want the latest thing.

35
00:01:51.170 --> 00:01:53.597
And in particular,
if I'm working on something at home,

36
00:01:53.597 --> 00:01:56.280
you'll always want the latest
patch at the very least, right?

37
00:01:56.280 --> 00:01:58.256
And hopefully the latest miner and so

38
00:01:58.256 --> 00:02:01.642
I have people installs very
specific versions of things here.

39
00:02:01.642 --> 00:02:06.130
So I can guarantee those versions
all work together, right?

40
00:02:06.130 --> 00:02:09.100
Cuz it never leaves stuff, drifts,
and falls apart and things like that.

41
00:02:09.100 --> 00:02:11.016
So for the sake of this course,

42
00:02:11.016 --> 00:02:14.859
please follow along with
the versions that I'm installing.

43
00:02:14.859 --> 00:02:17.490
And then feel free to go try and
install the latest version and

44
00:02:17.490 --> 00:02:18.634
see what breaks, right?

45
00:02:21.119 --> 00:02:24.843
In general, I've been teaching
these tools for years and

46
00:02:24.843 --> 00:02:28.800
the drift here isn't substantial,
except on React Router.

47
00:02:28.800 --> 00:02:30.931
We'll get into that later.

48
00:02:30.931 --> 00:02:38.747
So all right,
we're gonna say npm install -D and

49
00:02:38.747 --> 00:02:43.028
we're gonna do eslint- or

50
00:02:43.028 --> 00:02:46.572
sorry @8.8.0.

51
00:02:46.572 --> 00:02:51.783
Also feel free to just
copy these from the course

52
00:02:51.783 --> 00:02:57.647
notes if you don't feel
like typing everything out,

53
00:02:57.647 --> 00:03:02.622
eslint-config-prettier@8.3.0.

54
00:03:02.622 --> 00:03:07.378
Okay you can also shorten
install to i by the way if

55
00:03:07.378 --> 00:03:12.366
you're unaware of that I'm
sure I will eventually

56
00:03:12.366 --> 00:03:17.127
start doing that because
the fingers get tired.

57
00:03:17.127 --> 00:03:19.065
It's the dumbest thing I've ever said.

58
00:03:19.065 --> 00:03:22.554
[LAUGH] That's a pretty low bar to anyway.

59
00:03:22.554 --> 00:03:24.096
So install those two things.

60
00:03:26.941 --> 00:03:33.052
You should see here that you got
eslint and eslint config prettier.

61
00:03:33.052 --> 00:03:35.158
You'll see this little circumflex,

62
00:03:35.158 --> 00:03:39.695
whatever you want to call those ,what are
they called Flex is the name of the accent

63
00:03:39.695 --> 00:03:41.890
I don't know what these are called,.

64
00:03:41.890 --> 00:03:46.193
Anyway the whatever shift six
gives you on an American keyboard,

65
00:03:46.193 --> 00:03:50.966
that just means install the latest
patch of this so like if 8.3.0 and

66
00:03:50.966 --> 00:03:55.620
I just ran like NPM install on this
just cold with no node modules.

67
00:03:55.620 --> 00:03:59.397
It's like 8.3 .1 was available,
it would grab that, right?

68
00:03:59.397 --> 00:04:00.810
That's what this means.

69
00:04:00.810 --> 00:04:02.563
If I take this out and save it,

70
00:04:02.563 --> 00:04:05.662
which that's how it looks
in the course directory.

71
00:04:05.662 --> 00:04:09.524
It means install exactly this don't
install anything else if this fails and

72
00:04:09.524 --> 00:04:10.620
fail it, all right.

73
00:04:11.630 --> 00:04:14.500
This just means give me the latest patch,

74
00:04:14.500 --> 00:04:18.764
which is 99 times what you want but
just be aware of the case.

75
00:04:18.764 --> 00:04:22.992
When you're going out to production, you
wanna actually install exactly what's in

76
00:04:22.992 --> 00:04:26.940
your package JSON because
that's what got tested, right?

77
00:04:26.940 --> 00:04:29.797
Which is what package locks are for.

78
00:04:29.797 --> 00:04:31.997
Like, again, we're not gonna
talk too much about that but

79
00:04:31.997 --> 00:04:33.327
that's in general what those are.

80
00:04:33.327 --> 00:04:34.286
Yeah?

81
00:04:34.286 --> 00:04:38.219
&gt;&gt; Have you ever ran into conflicts
where ESLint tells you one thing and

82
00:04:38.219 --> 00:04:40.090
then prettier another?

83
00:04:40.090 --> 00:04:41.837
&gt;&gt; Yes.

84
00:04:41.837 --> 00:04:45.511
So I definitely have run into those kinds
of conflicts before I'm going to show you

85
00:04:45.511 --> 00:04:47.390
how to make sure that that never happens.

86
00:04:50.060 --> 00:04:53.747
And in those cases,
go with what prettier says over ESLint, so

87
00:04:53.747 --> 00:04:56.610
you can leave the circumflex in,
that's fine.

88
00:04:56.610 --> 00:05:03.720
I'm just telling you that's why it
is that way inside of the project.

89
00:05:03.720 --> 00:05:05.042
There's other things in here.

90
00:05:05.042 --> 00:05:08.720
Like I think you can put
like things like latest.

91
00:05:08.720 --> 00:05:11.661
There's a bunch of things that you can
do the magic you can do inside of your

92
00:05:11.661 --> 00:05:14.285
package, JSON the So that way,
we're not gonna worry about it.

93
00:05:14.285 --> 00:05:19.168
So I want you to create a file
now called new file here root of

94
00:05:19.168 --> 00:05:25.060
the directory not inside of
the source directory.eslintrc.json.

95
00:05:25.060 --> 00:05:27.788
The reason why you have to put JSON here
at the end is there's a bunch of ways

96
00:05:27.788 --> 00:05:28.719
to configure your site.

97
00:05:28.719 --> 00:05:30.912
You can do it with like
an actual .JavaScript files,

98
00:05:30.912 --> 00:05:32.280
you can actually like run code.

99
00:05:32.280 --> 00:05:34.274
I think you can do with YAML.

100
00:05:36.848 --> 00:05:40.850
I don't know why you'd wanna do that,
but you could.

101
00:05:43.150 --> 00:05:45.116
Let's do JSON cuz that's pretty easy.

102
00:05:49.939 --> 00:05:55.040
Okay, so make an object.

103
00:05:55.040 --> 00:05:56.755
We gotta configure this one a little bit.

104
00:05:56.755 --> 00:06:02.845
Okay, So
the first thing went to put his extends,

105
00:06:02.845 --> 00:06:08.355
this is gonna be an array and
we're gonna give

106
00:06:08.355 --> 00:06:14.020
it a eslint: recommended and
then prettier.

107
00:06:14.020 --> 00:06:19.145
So in general, the extends order is
not going to be very important to us,

108
00:06:19.145 --> 00:06:22.085
except I think I'm gonna dwell on this for

109
00:06:22.085 --> 00:06:26.555
a second to make sure that we all
get this prettier must come last

110
00:06:28.087 --> 00:06:32.520
Prettier must come last pretty much
come last pretty much come last.

111
00:06:32.520 --> 00:06:34.017
Okay, we got it.

112
00:06:34.017 --> 00:06:37.409
[LAUGH] I just say that because
someone's not going to do it and

113
00:06:37.409 --> 00:06:40.548
it'd be like why is this so
because prettier came last.

114
00:06:40.548 --> 00:06:41.958
So this prettier config and

115
00:06:41.958 --> 00:06:46.130
if you remember we installed it here it
refers to this eslint config prettier.

116
00:06:46.130 --> 00:06:47.909
That's what the extents here means.

117
00:06:47.909 --> 00:06:51.506
The only thing this config does
is it shuts off other configs,

118
00:06:51.506 --> 00:06:54.063
it doesn't add any new
rules to our ESLint,

119
00:06:54.063 --> 00:06:57.264
all it does is it shuts off
rules from other conflicts.

120
00:06:57.264 --> 00:07:01.889
Which basically says hey, don't check for
whitespace, don't check for commas,

121
00:07:01.889 --> 00:07:04.440
don't check for semicolons,
I got all that.

122
00:07:06.640 --> 00:07:08.430
Okay, so that's why pretty has come last.

123
00:07:10.400 --> 00:07:13.512
ESLint recommended is just very solid,

124
00:07:13.512 --> 00:07:19.287
unopinionated just objectively,
right and wrong kind of rules, right?

125
00:07:19.287 --> 00:07:23.266
So for example, you should not just
have a variable that you declare and

126
00:07:23.266 --> 00:07:24.670
then never use, right?

127
00:07:24.670 --> 00:07:28.496
That's just a bad idea and so
the ESLint tool, recommended,

128
00:07:28.496 --> 00:07:30.566
catches those kind of problems.

129
00:07:30.566 --> 00:07:33.724
They're just things that
you always wanna do but

130
00:07:33.724 --> 00:07:37.125
no one's gonna argue with
you in a meeting about it.

131
00:07:37.125 --> 00:07:41.261
I don't know, I've had some pretty
opinionated coworkers and no one's yet

132
00:07:41.261 --> 00:07:43.181
has gotten mad at this one, right.

133
00:07:43.181 --> 00:07:48.510
So that's what ESLint recommended is and
that's all we're gonna do for this class.

134
00:07:48.510 --> 00:07:52.547
I've been all over the map in terms
of all the configs I've had for

135
00:07:52.547 --> 00:07:57.028
this class I taught everything from
standard to the to the Airbnb ones and

136
00:07:57.028 --> 00:07:59.980
boast standard has some
strong opinions on it.

137
00:07:59.980 --> 00:08:05.622
But Airbnb is draconian in terms of how
much styling stuff that it enforces

138
00:08:05.622 --> 00:08:11.365
right it's things have to be like
alphabetized and things that I hated it.

139
00:08:11.365 --> 00:08:15.086
So I went around for this roller
coaster of opinions on the matter of,

140
00:08:15.086 --> 00:08:18.630
I want all of my code to look like
it was written by the same person.

141
00:08:18.630 --> 00:08:20.958
I'm sure you've all heard that before,
right?

142
00:08:20.958 --> 00:08:25.002
And now I think that's a very bad idea
because right now we're getting into

143
00:08:25.002 --> 00:08:27.326
Brian's philosophy of developer tools.

144
00:08:27.326 --> 00:08:30.835
My philosophy of developer tools
is developers are very smart and

145
00:08:30.835 --> 00:08:35.301
they have some idea in their brain that
they're trying to translate from amorphous

146
00:08:35.301 --> 00:08:37.170
concept to code on a page, right?

147
00:08:38.270 --> 00:08:41.330
Every time that my dev tool yells at them,
it's like you're doing it the wrong way.

148
00:08:41.330 --> 00:08:44.410
We're introducing artificial friction
to the process in terms of like,

149
00:08:44.410 --> 00:08:45.163
they had an idea.

150
00:08:45.163 --> 00:08:46.386
They were translating into code and

151
00:08:46.386 --> 00:08:48.730
now we're making them stop
to do something else, right?

152
00:08:48.730 --> 00:08:51.630
That makes them go slower and
probably maybe write a little

153
00:08:51.630 --> 00:08:55.490
bit worse code because not as a pure
expression of what they were trying to do.

154
00:08:55.490 --> 00:09:00.124
So be very deliberate in terms of what
kind of friction you introduce into that

155
00:09:00.124 --> 00:09:00.778
process.

156
00:09:00.778 --> 00:09:03.840
So for example if they're going
to make accessibility bugs yes

157
00:09:03.840 --> 00:09:07.960
we should stop them to make them slow down
and go fix those accessibility bugs right.

158
00:09:07.960 --> 00:09:10.830
If they're going to do some that's going
to cause them bugs later it's better than

159
00:09:10.830 --> 00:09:12.803
to fix it now than to try and
debug it later and find it out.

160
00:09:12.803 --> 00:09:15.807
But if I'm telling them
to alphabetize something,

161
00:09:15.807 --> 00:09:19.370
I can go get lost because that's
just not a good idea, right?

162
00:09:19.370 --> 00:09:22.880
It's just not helpful, no one cares
that it's alphabetized, right, so

163
00:09:22.880 --> 00:09:25.118
let's not make developers slow down for
that.

164
00:09:25.118 --> 00:09:30.472
Okay, rant over, I'm sorry, I feel good
about myself though so anyway, that's

165
00:09:30.472 --> 00:09:35.687
why we're doing the like the very bare
minimum set of rules here is because that.

166
00:09:35.687 --> 00:09:40.140
We're trying to introduce the bare
minimum of like helping people be

167
00:09:40.140 --> 00:09:43.296
productive without slowing
them down too much.

168
00:09:43.296 --> 00:09:47.598
So plugins will do some plugins later But
for now,

169
00:09:47.598 --> 00:09:51.294
it will do that'll just be an empty array.

170
00:09:51.294 --> 00:09:54.879
Plugins is like extending next
the what ESLint can do and

171
00:09:54.879 --> 00:09:58.692
read and we'll have to go fix
this here in a little bit but for

172
00:09:58.692 --> 00:10:03.517
now we don't have anything we need
parser options you have to tell it some.

173
00:10:03.517 --> 00:10:10.300
So like for example what version of
the features we'll do that here in a sec.

174
00:10:11.490 --> 00:10:17.221
We want ecma version and we're going
to be doing 2022 which is just saying,

175
00:10:17.221 --> 00:10:22.626
like, this is the ES6 that we're using
right the version of JavaScript.

176
00:10:22.626 --> 00:10:30.416
We're saying we're using the most
latest version of JavaScript.

177
00:10:30.416 --> 00:10:33.752
Source Type we're gonna be writing module.

178
00:10:33.752 --> 00:10:38.517
You can write common Jas here
ESlint does that just fine.

179
00:10:38.517 --> 00:10:43.889
JSX ECMA features is basically like what
extensions of it we're gonna be writing

180
00:10:43.889 --> 00:10:49.024
we're gonna be writing jsx so you can
put true there inside of ecmaFeatures.

181
00:10:49.024 --> 00:10:56.185
Okay underneath that we have to tell
it what environment we're working in.

182
00:10:56.185 --> 00:10:59.201
So es6 true this is like,

183
00:10:59.201 --> 00:11:04.240
allow things like import for
example, right?

184
00:11:04.240 --> 00:11:07.842
Like those kinds of features are reserved
words allow things like map and

185
00:11:07.842 --> 00:11:09.980
weak map and weak set and
things like that.

186
00:11:09.980 --> 00:11:13.961
We're going to be working in the browser.

187
00:11:13.961 --> 00:11:18.936
So this is like allow things like
document allow things like window,

188
00:11:18.936 --> 00:11:20.839
allow things like fetch.

189
00:11:20.839 --> 00:11:25.899
And then we'll be working in node
this is allow things like process and

190
00:11:25.899 --> 00:11:32.789
other kind of global variables
specific to nodeJS Okay,

191
00:11:32.789 --> 00:11:38.097
this is like the most bare
bones projects that you

192
00:11:38.097 --> 00:11:43.544
would be working with for
React kinda set up here.

193
00:11:43.544 --> 00:11:47.915
Anyone's gonna come in here and
how many you standard JS, so

194
00:11:47.915 --> 00:11:51.010
help me God was bad you just kidding.

195
00:11:51.010 --> 00:11:52.434
I have no power to do that.

196
00:11:52.434 --> 00:11:55.332
So let's try it.

197
00:11:55.332 --> 00:12:00.717
We're gonna say mpxeslintsourceapp.js and

198
00:12:00.717 --> 00:12:05.983
you can see here it's
got a bunch of errors.

199
00:12:05.983 --> 00:12:06.483
No.

200
00:12:08.569 --> 00:12:14.384
So, if you go look at our
app.js you can see here and

201
00:12:14.384 --> 00:12:21.162
now my editor here is very upset
at all my react calls, why?

202
00:12:21.162 --> 00:12:24.128
We can see here the no-undef
rule here is happening and

203
00:12:24.128 --> 00:12:26.590
if I mouse over this as
a React is not defined.

204
00:12:28.260 --> 00:12:30.033
Doesn't know where React is coming from.

205
00:12:30.033 --> 00:12:34.485
React is coming from here right from the
script tag so it actually is correct but

206
00:12:34.485 --> 00:12:37.385
ESLint is like hey you're
calling to something and

207
00:12:37.385 --> 00:12:41.172
I don't know what it is so
I'm gonna flag an error until you fix it.

208
00:12:41.172 --> 00:12:44.373
We will fix it here in a second, I'm
just gonna show you if that's the case,

209
00:12:44.373 --> 00:12:46.205
you do need to do it that way.

210
00:12:46.205 --> 00:12:51.964
You can actually put a special comment up
here at the top that says global React and

211
00:12:51.964 --> 00:12:52.820
ReactDOM.

212
00:12:53.880 --> 00:12:59.187
And now if I save this and if I run this
again notice that it's fine it's like

213
00:12:59.187 --> 00:13:04.424
okay no I figured it out but we're not
going to do that you can delete that.

214
00:13:04.424 --> 00:13:08.013
This is the kind of things like I was
telling like it catches like these things

215
00:13:08.013 --> 00:13:11.790
like, you should not be trying to access
variables that don't exist, right?

216
00:13:11.790 --> 00:13:15.097
That's the kind of rules that ESLint
recommended has inside of it.

217
00:13:15.097 --> 00:13:18.401
So some of you might be saying, well,
how do I see that red underline there?

218
00:13:18.401 --> 00:13:22.435
I don't see that yet you have to
install the VS code extension for

219
00:13:22.435 --> 00:13:24.780
it which is this one.

220
00:13:24.780 --> 00:13:29.358
It's the official Microsoft
one is called ESLint.

221
00:13:29.358 --> 00:13:32.042
It's kind of finicky sometimes and
it throws out some weird errors.

222
00:13:32.042 --> 00:13:36.050
So if you see that,
in general I just reload it and or

223
00:13:36.050 --> 00:13:39.520
just ignore them, but that's what it is.

224
00:13:39.520 --> 00:13:40.688
That's what causes it.

225
00:13:40.688 --> 00:13:44.530
So don't worry about the errors for
the moment we will fix them here in a bit.

226
00:13:44.530 --> 00:13:45.714
It's not worth fixing right now.

227
00:13:48.424 --> 00:13:52.913
Okay, I want you to go
to your package.json and

228
00:13:52.913 --> 00:13:57.526
I want you to leave or
create another entry here.

229
00:13:57.526 --> 00:14:00.316
This one is going to be called lint and

230
00:14:00.316 --> 00:14:04.366
we're just going to say eslint,
you can even copy and

231
00:14:04.366 --> 00:14:09.608
paste this little snippet right here
because we want the same thing.

232
00:14:12.852 --> 00:14:16.662
And then I always put --quiet
because it's kind of noisy and

233
00:14:16.662 --> 00:14:21.146
quiet we'll just keep it to like
the bare minimum stuff that's broken.

234
00:14:25.784 --> 00:14:30.252
Another reason that I always put
these things in here when I put in

235
00:14:30.252 --> 00:14:33.726
prettier eslint is now I
can run all this stuff in,

236
00:14:33.726 --> 00:14:37.735
like GitHub actions right or
CI/CD kind of situations.

237
00:14:39.395 --> 00:14:43.824
Because if ESLint find something,
it'll fail and

238
00:14:43.824 --> 00:14:47.742
prettier has an option
I gotta remember MPX.

239
00:14:47.742 --> 00:14:51.926
Prettier --help that's check,
I think is what it might be called.

240
00:14:51.926 --> 00:14:55.531
There's a thing that you can pass
with the bit that's basically like,

241
00:14:55.531 --> 00:14:57.950
I'm checking I'm actually
trying to format.

242
00:14:59.529 --> 00:15:01.565
Yeah, it is --check.

243
00:15:01.565 --> 00:15:06.870
So, then you could put in something
we'll just do right now because why not?

244
00:15:06.870 --> 00:15:11.148
Format:check so
instead of dash dash right you put

245
00:15:11.148 --> 00:15:16.122
--check this is what I would
run in like GitHub actions and

246
00:15:16.122 --> 00:15:20.314
this would fail if it modified anything,
right?

247
00:15:20.314 --> 00:15:22.994
It's like you found something
that was done so therefore

248
00:15:22.994 --> 00:15:26.760
someone did not run prettier before they
check this in therefore I failed or built.

249
00:15:28.869 --> 00:15:31.000
It's kinda like being defensive
with your code, right?

250
00:15:31.000 --> 00:15:33.670
Because you want everyone to run
prettier before it gets checked in.

251
00:15:33.670 --> 00:15:37.941
One less thing with lint like you can see
here this actually if you go to problems

252
00:15:37.941 --> 00:15:41.130
here in VS code it'll show you
all the ESLint codes there.

253
00:15:42.410 --> 00:15:47.198
Are things that are broken
at the moment just nice.

254
00:15:47.198 --> 00:15:52.278
One thing I was gonna show you
with ESLint is you can run it so

255
00:15:52.278 --> 00:15:58.825
if I do NPM run was it lint.You can put
dash, dash, so this is an NPM thing.

256
00:15:58.825 --> 00:16:03.081
If I want to pass things on to the command
that I'm running so I want to pass it into

257
00:16:03.081 --> 00:16:07.040
ESLint and not to NPM you put the dash,
dash and then anything after that.

258
00:16:07.040 --> 00:16:11.894
The dash dash gets passed into ESLint and
not to NPM.

259
00:16:11.894 --> 00:16:16.835
Otherwise if I do like -- fix
here it'll think NPM is like

260
00:16:16.835 --> 00:16:19.740
I don't have a fix command, right?

261
00:16:19.740 --> 00:16:22.840
You want to pass it into ESLint
that's the dash dash does.

262
00:16:22.840 --> 00:16:25.587
That's why a dash dash
space dash dash fix.

263
00:16:27.507 --> 00:16:30.789
Sometimes ESLint can just
automatically fix things for you.

264
00:16:30.789 --> 00:16:33.114
And I'm struggling to think of
one off the top of my head,

265
00:16:33.114 --> 00:16:35.450
like it could fix white space for
you if you allowed it to.

266
00:16:36.790 --> 00:16:41.555
And if you saying like, hey, if you have
something that can just fix this for

267
00:16:41.555 --> 00:16:42.311
me, do it.

268
00:16:42.311 --> 00:16:44.714
And that's kind of a nice
feature is sometimes,

269
00:16:44.714 --> 00:16:46.950
then the ascent can just
solve problems for.

270
00:16:46.950 --> 00:16:51.956
But it's only like half of
the problems can consult for a bunch

271
00:16:51.956 --> 00:16:58.132
of it just says like this is broken I
don't know how to fix it to your problem.

272
00:16:58.132 --> 00:17:02.772
You can do --debug if you're if you
need more information at ESLint

273
00:17:02.772 --> 00:17:07.572
you can see here it's a very verbose
of what it'll throw out at you, but

274
00:17:07.572 --> 00:17:09.662
that can be useful sometimes.

275
00:17:09.662 --> 00:17:15.883
Alternatives to ESLint there's JSLint
which never use please never use.

276
00:17:15.883 --> 00:17:19.015
It's out of date and it's opinionated and

277
00:17:19.015 --> 00:17:24.156
just not a good way don't even feel
bad saying that just don't use it.

278
00:17:24.156 --> 00:17:29.081
And then there's JSHint, which is much
more forgivable, it's very opinionated but

279
00:17:29.081 --> 00:17:30.706
they're not bad opinions.

280
00:17:30.706 --> 00:17:32.940
It's just not configurable.

281
00:17:32.940 --> 00:17:37.486
Whereas something like code styles, you
need some configurability to it as someone

282
00:17:37.486 --> 00:17:39.672
that does not like configuring things.

283
00:17:39.672 --> 00:17:42.150
This one actually is very
useful to be configurable.

284
00:17:42.150 --> 00:17:45.199
Because this filter project is very
different than a React project

285
00:17:45.199 --> 00:17:45.859
for example.

286
00:17:45.859 --> 00:17:49.477
And those just need wildly different rules
ESLint can cover both of those JSHint

287
00:17:49.477 --> 00:17:50.726
covers no neither of them.

288
00:17:55.805 --> 00:17:59.500
But that's it ESLint has far and
above taken over the ecosystem.

289
00:17:59.500 --> 00:18:01.482
It's a open JS Foundation project.

290
00:18:01.482 --> 00:18:05.097
Now, it's that popular,
it's an essential part of the ecosystem.

291
00:18:05.097 --> 00:18:06.310
So just use the ESLint.

292
00:18:09.250 --> 00:18:10.255
All right, cool.

293
00:18:10.255 --> 00:18:14.877
Any questions about linting, formatting,

294
00:18:14.877 --> 00:18:18.044
eslint, anything like that?

295
00:18:18.044 --> 00:18:20.210
&gt;&gt; That TSLint is deprecated, right?

296
00:18:20.210 --> 00:18:22.717
&gt;&gt; Correct.

297
00:18:22.717 --> 00:18:28.134
So TSLint is for TypeScript,
intermediate react we actually go and

298
00:18:28.134 --> 00:18:31.087
how to set up ESLint for TypeScript.

299
00:18:31.087 --> 00:18:34.410
So check out intermediate react v4 for
that.

