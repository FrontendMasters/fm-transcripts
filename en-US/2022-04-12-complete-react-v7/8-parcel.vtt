WEBVTT

1
00:00:00.250 --> 00:00:01.526
Let's talk about Parcel.

2
00:00:01.526 --> 00:00:06.371
So I'm very excited to talk about
parcel in this course because in V6,

3
00:00:06.371 --> 00:00:08.000
it was in a weird state.

4
00:00:08.000 --> 00:00:10.786
Cuz V2 was kind of out but
not really out and

5
00:00:10.786 --> 00:00:14.368
then V1 didn't work with
everything in this course.

6
00:00:14.368 --> 00:00:18.510
Now Parcel version 2 is out and
everything just works.

7
00:00:18.510 --> 00:00:22.720
I'm so happy, I gotta clean up so
much code because of that.

8
00:00:22.720 --> 00:00:24.860
It's a very satisfying
feeling to clean up code.

9
00:00:26.010 --> 00:00:27.794
So Parcel is a bundler,

10
00:00:27.794 --> 00:00:33.160
previous versions of this course I
taught Webpac for obvious reasons.

11
00:00:33.160 --> 00:00:35.021
Webpac is great.

12
00:00:35.021 --> 00:00:39.702
But I switched to Parcel because it
is just the easiest tool to set up.

13
00:00:39.702 --> 00:00:43.806
You literally just point it at a file and
say, build this project and

14
00:00:43.806 --> 00:00:45.031
then it just works.

15
00:00:45.031 --> 00:00:47.800
And it actually has gotten a little
bit more configurable over time,

16
00:00:47.800 --> 00:00:50.854
it used to be totally not configurable
which you can tell I'm super into cuz I

17
00:00:50.854 --> 00:00:51.730
keep bringing it up.

18
00:00:54.057 --> 00:00:56.840
Parcel's awesome because it just says,
this is a TypeScript file.

19
00:00:56.840 --> 00:00:58.960
Therefore, I'm gonna use
TypeScript to compile it.

20
00:00:58.960 --> 00:01:02.664
This is a CSS file, therefore I'm gonna
use PostCSS to run it through, right?

21
00:01:02.664 --> 00:01:07.145
And it just has a lot of just very
sane defaults that just go through and

22
00:01:07.145 --> 00:01:08.547
it works super well.

23
00:01:11.191 --> 00:01:14.947
It's not always gonna build the fastest or
the smallest bundle, but

24
00:01:14.947 --> 00:01:17.418
it's gonna save you
a ton of developer time.

25
00:01:17.418 --> 00:01:19.085
And you just have to ask yourself,

26
00:01:19.085 --> 00:01:21.913
what's that worth in the grand
scheme of things, right?

27
00:01:21.913 --> 00:01:25.501
If I'm building a project for
Netflix where there's 2,500 employees,

28
00:01:25.501 --> 00:01:28.940
I probably need to spend a lot of time
getting that configuration, right?

29
00:01:28.940 --> 00:01:31.791
But if I'm at a startup and
there's just two of us, developer time,

30
00:01:31.791 --> 00:01:33.240
incredibly important, right?

31
00:01:33.240 --> 00:01:35.810
Therefore, Parcel is a really good fit for
that.

32
00:01:35.810 --> 00:01:38.154
And I'm not saying that
Parcel isn't fast either.

33
00:01:38.154 --> 00:01:39.960
They're making it better all the time.

34
00:01:39.960 --> 00:01:41.396
They're rewriting it in Rust,

35
00:01:41.396 --> 00:01:43.741
they're doing a bunch of
really cool stuff with it.

36
00:01:43.741 --> 00:01:47.728
So basically, I think my advice
just from my opinionated,

37
00:01:47.728 --> 00:01:52.850
Brian Holt perspective, start with
Parcel and one as soon as we outgrow it.

38
00:01:52.850 --> 00:01:57.213
Or have some need that Parcel doesn't
fill, then move to esbuild or Vite or

39
00:01:57.213 --> 00:01:58.545
something like that.

40
00:02:00.315 --> 00:02:01.914
But we'll use Parcel for this, and

41
00:02:01.914 --> 00:02:04.751
hopefully it'll impress you
because I think it's greatest.

42
00:02:04.751 --> 00:02:06.914
So I want you to come in here and

43
00:02:06.914 --> 00:02:10.647
I want you to say npm install
dash capital D parcel.

44
00:02:12.230 --> 00:02:13.975
It used to be called
Parcel dash Bundler but

45
00:02:13.975 --> 00:02:17.085
now they actually have the parcel name,
so you can actually just do Parcel.

46
00:02:17.085 --> 00:02:21.911
In fact you have to,
Parcel 2 is not on parcel-bundler.

47
00:02:21.911 --> 00:02:24.612
This is going to install
a lot of Node modules.

48
00:02:24.612 --> 00:02:28.299
It's enormous, so it might take a second.

49
00:02:28.299 --> 00:02:30.682
You'll probably be fine
just doing it like this.

50
00:02:30.682 --> 00:02:34.233
I'm going to be using version 2.2.1.

51
00:02:34.233 --> 00:02:38.990
So you might wanna say npm install
dash capital D parcel add 2.2.1.

52
00:02:38.990 --> 00:02:41.874
This is the one that I'm worried
about breaking, [LAUGH] right?

53
00:02:41.874 --> 00:02:44.911
Cuz if this breaks,
the entire project breaks.

54
00:02:47.236 --> 00:02:50.748
So let's just make sure
that I got that version.

55
00:02:56.651 --> 00:03:02.671
It is taking a while to install this, but
I mean, if you look at our node directory,

56
00:03:02.671 --> 00:03:06.718
you can see we went from having
one thing to having many.

57
00:03:06.718 --> 00:03:09.376
And it's just because Parcel
installs everything to

58
00:03:09.376 --> 00:03:12.810
make it work with everything possible
in the JavaScript ecosystem.

59
00:03:16.078 --> 00:03:20.716
So yeah, by installing that,
we added 181 packages.

60
00:03:20.716 --> 00:03:24.988
And I'm on 2.3.2, so,

61
00:03:29.648 --> 00:03:33.236
I mean, it'll be fine or
we'll panic when it's not.

62
00:03:35.376 --> 00:03:37.838
But I wouldn't be a lot higher.

63
00:03:37.838 --> 00:03:41.340
When you're watching this later,
if this is on Parcel 3, panic, right?

64
00:03:41.340 --> 00:03:44.361
Go back to 2.3 please.

65
00:03:44.361 --> 00:03:48.420
Then I want you to add a script here, this
is one that we'll end up using the most,

66
00:03:48.420 --> 00:03:49.459
we'll call it dev.

67
00:03:49.459 --> 00:03:54.964
It'll just be parcel src/index.html.

68
00:03:56.809 --> 00:03:59.723
And that's really just about it.

69
00:03:59.723 --> 00:04:02.670
It'll just figure
everything else by itself.

70
00:04:02.670 --> 00:04:05.892
At this point in the course,
if this was like, we were reading Webpac,

71
00:04:05.892 --> 00:04:08.378
the next hour of the course
would be on Webpac, right?

72
00:04:08.378 --> 00:04:11.085
I know this because I've taught
Webpac previously in this course and

73
00:04:11.085 --> 00:04:12.307
it took about an hour, right?

74
00:04:12.307 --> 00:04:18.533
So thanks Parcel team,
thanks Webpac team as well but,

75
00:04:20.431 --> 00:04:25.344
Let's see what happens
if we do npm run dev.

76
00:04:27.966 --> 00:04:31.824
So you can see here,
it'll generate a parcel cache directory,

77
00:04:31.824 --> 00:04:33.972
it'll generate a dist directory.

78
00:04:33.972 --> 00:04:38.445
If you start having weirdness with stuff
not working or in a way you anticipate,

79
00:04:38.445 --> 00:04:41.808
delete these two directories and
then run it again, okay?

80
00:04:41.808 --> 00:04:46.359
And then I want you to open localhost
1234 and you should see your project.

81
00:04:51.979 --> 00:04:53.983
Which Parcel should take care of you.

82
00:04:56.084 --> 00:04:57.153
Okay?

83
00:04:59.069 --> 00:05:00.289
Now we have a bundler, right?

84
00:05:00.289 --> 00:05:02.359
So now we can split files apart.

85
00:05:02.359 --> 00:05:04.518
We can import stuff from NPM.

86
00:05:04.518 --> 00:05:08.214
We can use JSX, all this stuff that
was not available to us now is now

87
00:05:08.214 --> 00:05:12.174
available cuz Parcel is gonna run
all this code transformation for us.

88
00:05:13.903 --> 00:05:16.900
So the first thing I want you to do,
is I want you to go in here.

89
00:05:16.900 --> 00:05:20.695
You can stop your server,
I hit Ctrl + C to do that.

90
00:05:22.194 --> 00:05:29.195
I'm gonna say npm install
without the D and

91
00:05:29.195 --> 00:05:34.058
say react at 17.0.2 and

92
00:05:34.058 --> 00:05:39.127
react-dom at 17.0.2.

93
00:05:43.545 --> 00:05:47.470
Again, this is React 17,
which is actually important.

94
00:05:47.470 --> 00:05:49.715
Please don't be on 18 for this course.

95
00:05:49.715 --> 00:05:52.026
If 18 is out when you're watching this,
wait for

96
00:05:52.026 --> 00:05:55.485
version 8 of this course to come out,
cuz I'll talk about React 18 then.

97
00:05:55.485 --> 00:05:56.997
I don't think they're breaking anything,
so

98
00:05:56.997 --> 00:05:58.840
honestly probably could run this in a 18.

99
00:05:58.840 --> 00:06:03.490
But famous last words,
I'm sure something will break.

100
00:06:03.490 --> 00:06:04.680
It always does.

101
00:06:04.680 --> 00:06:09.540
So that'll put us on react 17,
you can see that here.

102
00:06:11.510 --> 00:06:15.088
So if you go into app.js,

103
00:06:15.088 --> 00:06:19.154
now we can say up the top here,

104
00:06:19.154 --> 00:06:24.196
import React from react and import,

105
00:06:24.196 --> 00:06:28.439
ReactDOM from react dash dom.

106
00:06:28.439 --> 00:06:32.009
We can even get kind of fun here instead,
and just import render.

107
00:06:32.009 --> 00:06:36.496
So we'll delete that on line 33
here I deleted the React.DOM part.

108
00:06:38.602 --> 00:06:41.204
And then instead of importing
the entire package,

109
00:06:41.204 --> 00:06:44.359
we can just import render like
that using these curly braces.

110
00:06:46.552 --> 00:06:47.719
You might ask, why?

111
00:06:49.348 --> 00:06:53.430
For fun, both of them are fine for
the record.

112
00:06:54.640 --> 00:06:58.452
Someone might tell you, is like, well, you
could do tree shaking, get rid of stuff

113
00:06:58.452 --> 00:07:02.540
like that, there's nothing to tree shake
out of React DOM, so both work just fine.

114
00:07:02.540 --> 00:07:04.509
&gt;&gt; What does the alternative look like?

115
00:07:04.509 --> 00:07:07.264
&gt;&gt; You would just import
the entire package like this.

116
00:07:09.778 --> 00:07:11.794
And this would bring in
the entire react-dom package.

117
00:07:11.794 --> 00:07:14.278
And then you'd say react-dom.render.

118
00:07:14.278 --> 00:07:18.467
I guess in theory and as a general rule
of thumb, if I'm just pulling in specific

119
00:07:18.467 --> 00:07:22.340
things from a package, I try and
pull out just the things I need.

120
00:07:22.340 --> 00:07:24.820
So in theory, in the future,
you could tree shake, right?

121
00:07:24.820 --> 00:07:29.615
Tree shake is basically the idea of that
you only include the code that you use.

122
00:07:29.615 --> 00:07:33.575
So what's a good example that I like,
jQuery, right, jQuery has 200 functions or

123
00:07:33.575 --> 00:07:35.706
actually, Lodash is
an even better example.

124
00:07:35.706 --> 00:07:38.295
Lodash has 300 functions, right?

125
00:07:38.295 --> 00:07:40.700
And no one uses all of Lodash.

126
00:07:41.900 --> 00:07:43.330
Has anyone ever used all of Lodash?

127
00:07:43.330 --> 00:07:45.300
No, none of you have ever use all Lodash.

128
00:07:45.300 --> 00:07:47.791
I'm not even gonna ask the question
because no one has ever used all.

129
00:07:47.791 --> 00:07:49.740
Not even the creator of Lodash
has used all of Lodash.

130
00:07:50.980 --> 00:07:54.037
So you only wanna include the functions
that you're actually gonna use.

131
00:07:54.037 --> 00:07:57.237
And if you import just
the piece of it like this,

132
00:07:57.237 --> 00:08:01.964
certain bundlers have the ability
to only include code that gets run.

133
00:08:01.964 --> 00:08:02.669
That make sense?

134
00:08:03.860 --> 00:08:06.220
So, I just did this out of habit.

135
00:08:06.220 --> 00:08:08.800
It's also shorter, again, lazy.

136
00:08:08.800 --> 00:08:11.975
&gt;&gt; The other question is,
is this destructuring?

137
00:08:11.975 --> 00:08:17.147
&gt;&gt; So, the pedantic answer to that is, no.

138
00:08:17.147 --> 00:08:21.390
The [LAUGH] pragmatic question is,
essentially.

139
00:08:21.390 --> 00:08:28.712
Const x, let's say const my object equals.

140
00:08:38.695 --> 00:08:40.433
This is destructuring,

141
00:08:40.433 --> 00:08:46.321
where I have an object here where I have
declared something called x, oops, right?

142
00:08:46.321 --> 00:08:50.458
And then here I'm pulling it out here.

143
00:08:50.458 --> 00:08:54.434
This motion is called destructuring so

144
00:08:54.434 --> 00:08:59.857
if I said console.log x here,
what would it log out?

145
00:08:59.857 --> 00:09:00.977
One, right?

146
00:09:02.796 --> 00:09:05.140
The question then becomes,
is this destructuring?

147
00:09:05.140 --> 00:09:09.360
It's semantically doing the same thing,
right?

148
00:09:09.360 --> 00:09:11.370
It's pulling something out of this.

149
00:09:11.370 --> 00:09:14.083
But it's not destruction because
it's not going through that,

150
00:09:14.083 --> 00:09:15.769
actually it's that same code pathway.

151
00:09:15.769 --> 00:09:18.302
It's actually just selectively
importing something.

152
00:09:20.635 --> 00:09:23.211
This has no runtime cost,
this has no runtime cost.

153
00:09:23.211 --> 00:09:28.820
This is done by static analysis,
this is done by the JavaScript engine.

154
00:09:28.820 --> 00:09:30.873
You know that feeling where you
know you're being pedantic and

155
00:09:30.873 --> 00:09:32.080
you don't like it but you have to be?

156
00:09:33.910 --> 00:09:34.550
It's like my life.

