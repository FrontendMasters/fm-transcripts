WEBVTT

1
00:00:00.250 --> 00:00:04.994
So next, we are going to get
the API credentials that we

2
00:00:04.994 --> 00:00:08.960
need to actually send messages as our bot.

3
00:00:08.960 --> 00:00:14.650
We're gonna need a signing secret for
verifying that the messages are valid.

4
00:00:14.650 --> 00:00:18.670
And then we're also going
to get a bot OAuth token.

5
00:00:18.670 --> 00:00:21.880
So let's make this window bigger again.

6
00:00:21.880 --> 00:00:28.687
And we have, It's right here, so
we'll grab this bot OAuth token.

7
00:00:28.687 --> 00:00:35.910
And I'm gonna let that be
visible on screen I guess.

8
00:00:37.770 --> 00:00:40.100
Don't be naughty, chat.

9
00:00:40.100 --> 00:00:45.041
Now that we've got the setup here,
we can go back into our code.

10
00:00:45.041 --> 00:00:46.675
You can open this up and

11
00:00:46.675 --> 00:00:52.101
there's a .env.example that I
apparently didn't commit to this repo.

12
00:00:52.101 --> 00:00:55.945
So create a new file called .env, and

13
00:00:55.945 --> 00:01:00.993
we're going to set
SLACK_BOT_OATH_TOKEN and

14
00:01:00.993 --> 00:01:04.369
put in the value of the key there.

15
00:01:04.369 --> 00:01:11.852
And the other one that we're gonna
need is SLACK_SIGNING_SECRET.

16
00:01:11.852 --> 00:01:14.774
And that one is going to be,

17
00:01:18.967 --> 00:01:24.877
In here somewhere, we're gonna find that
one by looking at the app credentials.

18
00:01:27.451 --> 00:01:30.609
Which is in basic information.

19
00:01:30.609 --> 00:01:32.359
And we have the signing secret.

20
00:01:32.359 --> 00:01:38.393
So I'm going to copy this and head back,

21
00:01:38.393 --> 00:01:43.184
paste it in there, and save it,

22
00:01:43.184 --> 00:01:48.342
and we can close that down for now.

23
00:01:48.342 --> 00:01:52.341
Next, we're gonna restart
this app locally, and

24
00:01:52.341 --> 00:01:55.875
so we'll have to update the bot command,
and

25
00:01:55.875 --> 00:02:00.320
so cuz we need to pick up
those environment variables.

26
00:02:00.320 --> 00:02:05.542
Now, Netlify is smart enough that it
knows to check environment files.

27
00:02:05.542 --> 00:02:08.343
So it just grabs that .env value, and

28
00:02:08.343 --> 00:02:13.431
we'll put that in our environment force,
so I can shrink this down.

29
00:02:13.431 --> 00:02:16.261
And then what I need to do is grab,

30
00:02:18.957 --> 00:02:27.235
The new live hash which is
this little set here, oops.

31
00:02:30.469 --> 00:02:32.090
Grab this new hash here.

32
00:02:36.224 --> 00:02:39.475
Why are you doing that,
just copy it, there we go.

33
00:02:39.475 --> 00:02:40.481
Shrink this back down.

34
00:02:40.481 --> 00:02:43.982
And then we're gonna head
into the slash commands, and

35
00:02:43.982 --> 00:02:46.300
just update that hash one more time.

36
00:02:51.993 --> 00:02:57.203
Okay, so
now we've got a command that can actually

37
00:02:57.203 --> 00:03:01.454
send messages to the chat as our bot user.

38
00:03:01.454 --> 00:03:05.310
So we're going to head
into our terminal here.

39
00:03:05.310 --> 00:03:09.259
I'm actually gonna minimize this
entirely for a bit because that way

40
00:03:09.259 --> 00:03:13.430
we can do side-by-side and
that'll be easier to see what's going on.

41
00:03:14.990 --> 00:03:17.204
So if we wanna send one of these,

42
00:03:17.204 --> 00:03:21.780
we can just send a message to
the chat.postmessage endpoint.

43
00:03:21.780 --> 00:03:27.460
The Slack API is fairly full-featured,
you can do quite a bit with it.

44
00:03:27.460 --> 00:03:32.007
We're only gonna get into the bits
around sending messages and

45
00:03:32.007 --> 00:03:34.290
then using the blocks API.

46
00:03:34.290 --> 00:03:35.420
There's a lot more you can do.

47
00:03:35.420 --> 00:03:40.420
You can get pretty in-depth
with what types of feedback or

48
00:03:40.420 --> 00:03:46.150
interactivity you wanna put
into your ChatOps workflow.

49
00:03:46.150 --> 00:03:52.311
What we are gonna do is we're going
to open up this util.slack.ts,

50
00:03:52.311 --> 00:03:55.923
or util/slack.ts, and inside of it,

51
00:03:55.923 --> 00:04:02.520
we are going to create a function
that lets us talk to the Slack API.

52
00:04:02.520 --> 00:04:08.840
So, export function slackApi(), and
that is going to accept two arguments.

53
00:04:08.840 --> 00:04:13.799
The first one is going to be the endpoint,
and that is a slackApiEndpoint.

54
00:04:13.799 --> 00:04:20.360
This is out of the,
Types folder that is predefined for us.

55
00:04:20.360 --> 00:04:23.444
And so that just gives us the ones
that we're actually gonna use,

56
00:04:23.444 --> 00:04:26.180
chat.postmessage and views.open.

57
00:04:26.180 --> 00:04:31.880
Then we're going to have a body, and
that body has a slackApiRequestBody.

58
00:04:31.880 --> 00:04:35.539
And those are gonna be the two inputs.

59
00:04:35.539 --> 00:04:40.072
And what this means is we're gonna be able
to now send requests to the Slack API

60
00:04:40.072 --> 00:04:44.706
using kind of a unified flow instead of
having to redeclare our fetch API call.

61
00:04:44.706 --> 00:04:49.049
And set the token and all the things that
we need in order to make these requests.

62
00:04:49.049 --> 00:04:52.734
We can just do it in this command and
have a lot of the stuff set up for

63
00:04:52.734 --> 00:04:54.235
us ready to go.

64
00:04:54.235 --> 00:04:57.678
So, this will return a fetch command, and

65
00:04:57.678 --> 00:05:02.374
that is going to go to the Slack API,
so slack.com/api.

66
00:05:02.374 --> 00:05:07.643
And then we wanna set up the endpoint.

67
00:05:07.643 --> 00:05:10.495
And the arguments that we send to it.

68
00:05:10.495 --> 00:05:12.860
First of all, it's gonna be a POST method.

69
00:05:12.860 --> 00:05:16.330
We wanna use the POST method and
then we need to send some headers.

70
00:05:16.330 --> 00:05:20.860
The headers that we need to send are first
and foremost an Authorization header.

71
00:05:20.860 --> 00:05:25.788
And that is going to be a bearer token

72
00:05:25.788 --> 00:05:30.067
that uses our slack bot token.

73
00:05:30.067 --> 00:05:35.520
SLACK_BOT_OAUTH_TOKEN, then we wanna

74
00:05:35.520 --> 00:05:40.242
let it know that we're sending JSON.

75
00:05:40.242 --> 00:05:46.158
So we'll do a content-type,
and send application/json.

76
00:05:46.158 --> 00:05:51.248
And then I like to include the charset
because otherwise if you use emoji or

77
00:05:51.248 --> 00:05:56.580
a character with a diacritic or
something, it can cause issues.

78
00:05:56.580 --> 00:05:58.874
So, that there, and then for the body,

79
00:05:58.874 --> 00:06:03.410
we're gonna send in whatever the body is
that we wanna use as stringified JSON.

80
00:06:03.410 --> 00:06:08.100
So, we'll just send in a JavaScript
object and that's gonna be what we send.

81
00:06:08.100 --> 00:06:13.039
Whatever comes back from that fetch,
we're gonna grab out

82
00:06:13.039 --> 00:06:18.260
as the response, and
then we will return JSON value.

83
00:06:18.260 --> 00:06:21.947
And so this is gonna be what we use
every time we wanna make a request to

84
00:06:21.947 --> 00:06:22.799
the Slack API.

85
00:06:22.799 --> 00:06:26.474
It's gonna allow us to very
quickly send chat messages and

86
00:06:26.474 --> 00:06:30.906
other things without having to do
this whole header setup every time.

87
00:06:30.906 --> 00:06:34.889
And keep track of where our environment
variables are and all that good stuff.

