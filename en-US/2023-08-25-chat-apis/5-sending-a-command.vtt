WEBVTT

1
00:00:00.042 --> 00:00:06.653
The next thing that we're gonna do is
we are going to send a command here.

2
00:00:06.653 --> 00:00:11.647
So let's get into the Slack utility, and

3
00:00:11.647 --> 00:00:17.221
we will import first
"parse" from "querystring".

4
00:00:17.221 --> 00:00:22.122
Because "querystring" allows us
to get a form-encoded body,

5
00:00:22.122 --> 00:00:26.646
or what exactly,
I can't remember what it's called.

6
00:00:26.646 --> 00:00:33.056
But it's where the key is set with an
equal sign and then the value after that.

7
00:00:33.056 --> 00:00:38.322
And so this is gonna allow us to parse
that out and actually use those values.

8
00:00:38.322 --> 00:00:42.494
Then we're going to import
our slackApi command

9
00:00:42.494 --> 00:00:45.553
from the util that we just created.

10
00:00:45.553 --> 00:00:51.124
And we're gonna create a new
function in here called

11
00:00:51.124 --> 00:00:57.148
handleSlashCommand, slash command,
not slack.

12
00:00:57.148 --> 00:00:58.830
My goodness, slash command.

13
00:01:00.150 --> 00:01:06.600
And that's gonna accept a payload, and
the payload is a SlackSlashCommandPayload.

14
00:01:07.790 --> 00:01:11.586
And again, that's there so
that we get autocomplete, not for

15
00:01:11.586 --> 00:01:13.026
any other real reason.

16
00:01:13.026 --> 00:01:18.253
So the way that I want this to
work is to keep this kind of easy

17
00:01:18.253 --> 00:01:25.204
to debug later on we're putting the slash
command logic into this function.

18
00:01:25.204 --> 00:01:29.009
And then interactivity, which is
a different functionality that we're gonna

19
00:01:29.009 --> 00:01:32.698
build later, will be in a separate
function, and it'll help us with keeping

20
00:01:32.698 --> 00:01:36.303
track of kinda what's happening
without having one big, long function.

21
00:01:36.303 --> 00:01:39.020
But I still want it to be
scannable within the same file, so

22
00:01:39.020 --> 00:01:40.801
we'll keep them all in the same file.

23
00:01:40.801 --> 00:01:46.420
We'll just have a few functions in there
to help us separate things out a bit.

24
00:01:46.420 --> 00:01:50.825
So I'm gonna use a switch case,
I know people have feelings about these,

25
00:01:50.825 --> 00:01:54.570
I think they're great for
this particular type of setup.

26
00:01:54.570 --> 00:01:58.944
We are gonna look at what the command that
came in is for our slash command, and

27
00:01:58.944 --> 00:02:02.127
then change the behavior based
on what that command is.

28
00:02:02.127 --> 00:02:07.565
So I'm gonna look for
if the command is foodfight,

29
00:02:07.565 --> 00:02:13.391
then I want to get a response
by awaiting the slackApi.

30
00:02:13.391 --> 00:02:15.940
And we're gonna use chat.postmessage.

31
00:02:15.940 --> 00:02:20.067
And you can see because we specified
what the endpoint could be,

32
00:02:20.067 --> 00:02:21.755
it autocompletes for us.

33
00:02:21.755 --> 00:02:26.606
And that's really the only
thing that keeps me using

34
00:02:26.606 --> 00:02:31.245
TypeScript, is I just I
love that autocomplete.

35
00:02:31.245 --> 00:02:35.050
So next we're gonna grab out of
the payload we want the channel ID, so

36
00:02:35.050 --> 00:02:37.161
using the autocomplete to get there.

37
00:02:37.161 --> 00:02:42.472
The channel ID is also available
if you look in your Slack

38
00:02:42.472 --> 00:02:47.224
instance, you can find
the channel ID down here.

39
00:02:47.224 --> 00:02:50.900
That's so if you wanna always send
the message to the same channel you can

40
00:02:50.900 --> 00:02:52.707
come and grab this and hard code it,

41
00:02:52.707 --> 00:02:56.159
as opposed to sending it to the channel
where the message came from.

42
00:02:58.300 --> 00:03:01.150
In this case, we're gonna send it
back where the message came from.

43
00:03:01.150 --> 00:03:03.779
And then we wanna send in some text,
and for

44
00:03:03.779 --> 00:03:08.910
now let's just do some hard coded text so
that we can make sure this actually works.

45
00:03:11.100 --> 00:03:16.720
So we get a response, and then some
really lightweight error checking here.

46
00:03:16.720 --> 00:03:20.564
So if the response that
comes back is not okay,

47
00:03:20.564 --> 00:03:26.490
we're gonna console log the response
just so we can see what happened.

48
00:03:26.490 --> 00:03:32.555
And then we're gonna break
out of our switch command.

49
00:03:32.555 --> 00:03:38.104
And then as a default we'll
say just return a new

50
00:03:38.104 --> 00:03:43.386
status code, and that's gonna be a 200.

51
00:03:43.386 --> 00:03:52.143
But we are going to say
the Command payload.command.

52
00:03:54.885 --> 00:03:56.875
Is not recognized.

53
00:03:56.875 --> 00:04:01.961
So that way if somehow you were able to
send a command here that isn't part of

54
00:04:01.961 --> 00:04:08.582
the registered commands you'll get a note
that it doesn't work, something is wrong.

55
00:04:08.582 --> 00:04:13.393
To actually use this, we are going to
grab the event that gets sent in through

56
00:04:13.393 --> 00:04:18.522
the Netlify functions, this gives us
access to things like what the payload is.

57
00:04:18.522 --> 00:04:25.150
And then I'm going to handle the slash
commands by grabbing the body.

58
00:04:25.150 --> 00:04:30.511
So the body is going to be,
we're gonna use that parse and

59
00:04:30.511 --> 00:04:34.766
get event.body, or we'll just make it 0.

60
00:04:34.766 --> 00:04:39.278
And then I'm gonna coerce it to be
a slack payload because I want that

61
00:04:39.278 --> 00:04:41.470
autocomplete again.

62
00:04:41.470 --> 00:04:45.419
And we'll be able to validate that this
is a Slack payload when we get to this

63
00:04:45.419 --> 00:04:48.480
part where we're actually
validating requests.

64
00:04:48.480 --> 00:04:51.460
But for now, we just want that to work
the way that we expect it to work.

65
00:04:52.470 --> 00:04:57.505
And then we are going to
check if body.command.

66
00:04:57.505 --> 00:05:02.948
Then we want to return handleSlashCommand,
and

67
00:05:02.948 --> 00:05:08.930
we're gonna put in the body
as a SlackSlashCommand.

68
00:05:12.322 --> 00:05:17.595
And that is gonna be the whole thing,
right, because it's going to return.

69
00:05:17.595 --> 00:05:19.250
I forgot a piece.

70
00:05:19.250 --> 00:05:22.470
Because we have our default
here where we're returning.

71
00:05:22.470 --> 00:05:27.950
But we also wanna make sure that at
the end, we return a status code or

72
00:05:27.950 --> 00:05:35.190
an object, sorry, that's got a status
code of 200 and a body that's just empty.

73
00:05:35.190 --> 00:05:36.150
So if it's successful,

74
00:05:36.150 --> 00:05:39.470
we don't need to send anything back
because the chat message will appear.

75
00:05:39.470 --> 00:05:42.803
If it's not successful, we want to give
some feedback to just the person who ran

76
00:05:42.803 --> 00:05:46.240
the command to let them know like,
hey, your command didn't work.

77
00:05:46.240 --> 00:05:49.337
So in this case we will
just do this here and

78
00:05:49.337 --> 00:05:54.460
send a 200 as kind of a confirmation
that the command worked.

79
00:05:54.460 --> 00:05:57.700
If we don't send this, then Slack will
time out and say something went wrong.

80
00:05:59.120 --> 00:06:02.622
So now we've got this set up and

81
00:06:02.622 --> 00:06:07.077
running, and let's actually try it.

82
00:06:07.077 --> 00:06:13.681
So I'm gonna run a food fight,
And it didn't like it.

83
00:06:15.629 --> 00:06:19.610
Here we go, we got an error,
not in channel.

84
00:06:19.610 --> 00:06:20.366
Ah-ha, so

85
00:06:20.366 --> 00:06:25.870
that means that our bot has to be added to
the channel before we can actually use it.

86
00:06:25.870 --> 00:06:32.530
So let's add apps to channel, and
then I'm gonna grab this food fight.

87
00:06:32.530 --> 00:06:34.923
I'm gonna show what I did there
cuz I just kinda did that fast.

88
00:06:34.923 --> 00:06:36.933
But I started typing add and

89
00:06:36.933 --> 00:06:41.664
it shows this context menu of add
apps to channel, so grab that.

90
00:06:41.664 --> 00:06:44.047
And then here's the bot,
I'm gonna add it, and

91
00:06:44.047 --> 00:06:46.710
now food fight has been
added to this channel.

92
00:06:46.710 --> 00:06:50.730
And this will need to be done for any
channel where you want the bot to work.

93
00:06:50.730 --> 00:06:54.119
Typically speaking, what I've done is for

94
00:06:54.119 --> 00:06:59.440
my teams I have the bot run almost
exclusively in my team's channel.

95
00:06:59.440 --> 00:07:03.098
But for some things like the context
reminders if somebody's posting

96
00:07:03.098 --> 00:07:07.376
requests all over the place, you might
wanna install it to the entire workspace,

97
00:07:07.376 --> 00:07:08.307
which you can do.

98
00:07:08.307 --> 00:07:11.983
There's some ways that you can have
the bot auto add itself if you give it

99
00:07:11.983 --> 00:07:13.340
that permission.

100
00:07:13.340 --> 00:07:16.306
And we're not gonna cover that today
because I don't think it's necessary

101
00:07:16.306 --> 00:07:18.580
unless you've got
extenuating circumstances.

102
00:07:18.580 --> 00:07:21.340
But otherwise, just add it in any
channel where you wanna use it.

103
00:07:21.340 --> 00:07:25.460
And now if we run Food Fight again,
there it goes.

104
00:07:25.460 --> 00:07:31.350
This is posted publicly from
the Food Fight app as a chat message.

105
00:07:31.350 --> 00:07:36.266
So that's the kind of
first major takeaway here,

106
00:07:36.266 --> 00:07:41.410
is how to get a bot to post
to your Slack channel.

107
00:07:41.410 --> 00:07:46.990
And this can be done outside of a Slack
command, or out of a slash command.

108
00:07:46.990 --> 00:07:49.587
You can have the bot post to
your channel at any time,

109
00:07:49.587 --> 00:07:52.390
which is how we'll do
the cron job later on.

110
00:07:52.390 --> 00:07:57.101
But using a slash command to
post some feedback as the bot is

111
00:07:57.101 --> 00:08:02.030
a great way to just make it feel
like part of the experience.

112
00:08:02.030 --> 00:08:04.272
I am asking a question in the channel, and

113
00:08:04.272 --> 00:08:07.290
the bot gives me feedback on
the thing that I've asked.

114
00:08:07.290 --> 00:08:10.961
That feels the exact same as if
it was a member of the team,

115
00:08:10.961 --> 00:08:15.520
but now it's more consistent and
it's built into the process.

116
00:08:15.520 --> 00:08:18.606
Even at this point,
a slash command is really,

117
00:08:18.606 --> 00:08:22.010
really useful without
building anything else.

118
00:08:22.010 --> 00:08:25.416
Because you can use this to
say slash open issues, and

119
00:08:25.416 --> 00:08:29.277
then you can go hit the GitHub API and
pull every open issue for

120
00:08:29.277 --> 00:08:31.940
repos that your team is responsible for.

121
00:08:31.940 --> 00:08:35.955
You can make API requests in between
getting the slash command and

122
00:08:35.955 --> 00:08:38.299
sending that chat response, right?

123
00:08:38.299 --> 00:08:42.800
So you can do just about anything here,
and that's really, really powerful.

124
00:08:42.800 --> 00:08:45.112
So to actually show how this works,

125
00:08:45.112 --> 00:08:49.287
let's just really quickly put
in something that won't stick.

126
00:08:49.287 --> 00:08:53.385
We're just gonna play with it for
a minute, and

127
00:08:53.385 --> 00:08:56.159
I'm going to add a joke in here.

128
00:08:56.159 --> 00:09:02.310
So let's get a joke, and
that's going to be the output

129
00:09:02.310 --> 00:09:08.730
of a fetch command that will
go to icanhazdadjoke.com,

130
00:09:08.730 --> 00:09:14.030
which just gives you a random dad joke.

131
00:09:14.030 --> 00:09:16.526
And that will use headers, and

132
00:09:16.526 --> 00:09:21.170
we just wanna return the accept
header of text plain.

133
00:09:21.170 --> 00:09:24.619
Because we're not gonna
parse the JSON object,

134
00:09:24.619 --> 00:09:27.906
we just want it to send
us back a plain old joke.

135
00:09:27.906 --> 00:09:32.286
So then, in our response here,

136
00:09:32.286 --> 00:09:36.831
we can use the await joke.text to

137
00:09:36.831 --> 00:09:41.387
get that response as plain text.

138
00:09:41.387 --> 00:09:45.900
And so this could be, you can imagine,
kind of anything, right?

139
00:09:45.900 --> 00:09:49.716
I can call anything that's got
an API endpoint, I can grab, and

140
00:09:49.716 --> 00:09:53.530
then if I wanted to I could do far
more parsing on the JSON object or

141
00:09:53.530 --> 00:09:57.270
anything else to then return
this in the chat message.

142
00:09:57.270 --> 00:10:02.574
But for now if I go and
use this, anytime you run

143
00:10:02.574 --> 00:10:07.479
this it's going to give
you a new dad joke.

144
00:10:07.479 --> 00:10:12.391
So it's a very nice workflow in
chat if there's something you need

145
00:10:12.391 --> 00:10:14.065
to check all the time.

146
00:10:14.065 --> 00:10:17.109
Rather than saying yeah,
let me go check that for you, and

147
00:10:17.109 --> 00:10:20.778
getting out of your flow,
moving into some dashboard somewhere, and

148
00:10:20.778 --> 00:10:23.670
then coming back and
copy pasting a screenshot.

149
00:10:23.670 --> 00:10:28.203
You can take a little bit of time to put
together one of these slash commands and

150
00:10:28.203 --> 00:10:32.890
just say status, and have it print
that screenshot right there for you.

151
00:10:32.890 --> 00:10:36.930
Or give you the top stats for
whatever thing, find out who's on call.

152
00:10:36.930 --> 00:10:41.484
Whatever the things are that you find
yourself checking frequently in your team,

153
00:10:41.484 --> 00:10:44.720
you're able to do that with
a slash command very quickly.

154
00:10:44.720 --> 00:10:47.200
And this is the power of that ChatOps workflow,

155
00:10:47.200 --> 00:10:51.168
is you can really cut down on the amount
of time you spend context switching to

156
00:10:51.168 --> 00:10:54.029
grab information that's
available via api anyways.

