[00:00:00]
>> The app we built today was built from a standpoint of kind of showing an intentionally silly example so that we didn't get too hung up on the details of how your team should handle incoming requests. But the functionality that we've gone through here is applicable to Slack, it's applicable to Discord, it'll work in any chat app that gives you API access.

[00:00:22]
And you don't have to use notion, you can use any project management tool that your team prefers that has API access. So Jira, Linear, Trello, GitHub Issues, anything you can think of, right? And that is a really powerful workflow that will let you hopefully simplify your processes, give your team more control over how they do work, and eliminate some of that just admin overhead.

[00:00:48]
You don't have somebody who's gotta monitor the channel to make sure that things don't get dropped. You've got the ability to gently nudge your co-workers without that, even that small conflict of having to tell somebody that the way they did something isn't the preferred way. And as you can probably imagine, there are a lot of things that you can do with this that let you take this so much further.

[00:01:10]
So a couple of things that you might use this for that aren't directly process related. You could send a weekly update on your key metrics by pulling those from different APIs that your team monitors. You could allow your team members to check the status of a service with a slash command, you could kinda have an uptime bot.

[00:01:31]
You could create an intake fossa, what we did creating an intake process for cross functional requests. So if a team that's not your team needs some help, they use this modal to ask for the help and clarify what they need and why. You could create a quick capture process for new ideas.

[00:01:47]
If you are on a team like a lot of the teams I've been on, everybody's coming up with really fun ideas that you can't prioritize it right now, but it is something you wanna do since you don't wanna lose track. So having an idea/command that puts it in to list for the next time you are ready to start prioritizing work, that's a great way to make sure that people's ideas don't get lost.

[00:02:07]
And that you don't lose some of those great ideas that could be excellent to work on once you finished your account workload. And you could also do something like having a way to relay customer feedback or customer requests. If you're the support team, if you're a developer experience team, if you're out with your customers and they have something that they wish existed or something that they don't like.

[00:02:32]
Have a quick way in Slack to say, hey, customers didn't like this, and then that posts to the right channel and it posts as a GitHub Issue. And give somebody an ability to actually act on that feedback instead of having to go back through Slack to try to find where that message was when they do have some time to triage that.

[00:02:47]
So another way to look at this is you can make ChatOps do just about anything that you can do with an API. So if you can figure out how to access any process that you have in your company via API, you can probably find a way to hook it into your ChatOps workflow.

[00:03:06]
Because again, putting people into the context they're already in, people are discussing something in Slack, they have a question, they're in Slack, they wanna ask you for something, they're in Slack. That is all, just put the work there. If somebody's asking a question, you can run a slash command that shows them the answer.

[00:03:23]
Or even better, they can run a slash command themselves and then they don't have to ask the question. That's a great way to make sure that your team is following processes, that they're clear on how things get done, and that you don't spend a lot of time doing admin work instead of building things that actually move your company forward.

[00:03:41]
So thanks, everybody, for hanging out today. If you have questions, if you wanna find more of what I've done, you can head over to learnwithjason.dev or Jason.af. I have a lot of educational material that I hope you'll enjoy. I go live twice a week on Twitch, Tuesdays and Thursdays, if you want to follow along, and you can find all of that on the homepage of learnwithjason.dev.

[00:04:02]
Hope to see you there.

