WEBVTT

1
00:00:00.025 --> 00:00:03.970
So next let's create a function
that's gonna let us get the new item.

2
00:00:03.970 --> 00:00:07.726
So anything in our database that has it,

3
00:00:07.726 --> 00:00:11.710
it's in the the new
column the to do items.

4
00:00:12.730 --> 00:00:14.870
So we can check how that's gonna work.

5
00:00:14.870 --> 00:00:16.840
It's gonna return a promise.

6
00:00:16.840 --> 00:00:19.524
And that promise is going
to have a new item in it.

7
00:00:19.524 --> 00:00:22.071
And that's gonna be an array.

8
00:00:22.071 --> 00:00:27.215
And that, just to show what we're
actually trying to do here,

9
00:00:27.215 --> 00:00:33.060
if we close this one and open up this one,
we are looking at this column.

10
00:00:33.060 --> 00:00:38.616
We want to run a query that will
only give us back these fields.

11
00:00:38.616 --> 00:00:41.880
We don't care about stuff that's in
progress because that means it's been

12
00:00:41.880 --> 00:00:44.022
assigned to somebody or
is otherwise in motion and

13
00:00:44.022 --> 00:00:45.760
we don't care about stuff that's complete.

14
00:00:45.760 --> 00:00:47.630
We only care about
things that need action.

15
00:00:47.630 --> 00:00:50.790
So things in the to do column are the
things that need someone to actually

16
00:00:50.790 --> 00:00:54.600
triage them, look through them, make sure
that they're valid, so on and so forth.

17
00:00:56.490 --> 00:01:00.274
So then we can go into our code again and

18
00:01:00.274 --> 00:01:04.310
let's actually write out that filter.

19
00:01:06.640 --> 00:01:11.304
So for this one,
we are going to use notion data

20
00:01:11.304 --> 00:01:15.920
that is going to be an await notion Api.

21
00:01:15.920 --> 00:01:22.366
And we're going to send databases and

22
00:01:22.366 --> 00:01:31.920
then our database
ID NOTION_DATABASE_ID and query.

23
00:01:31.920 --> 00:01:34.390
So we're running a query
against the database.

24
00:01:34.390 --> 00:01:39.242
And this looks a little more
like the Slack API has those

25
00:01:39.242 --> 00:01:44.110
chat.postMessage, which
makes it look very fancy.

26
00:01:44.110 --> 00:01:45.660
But that is just the URL.

27
00:01:45.660 --> 00:01:50.490
Whereas with these notion ones, they look
a little more familiar URL endpoints.

28
00:01:50.490 --> 00:01:53.130
Then we're gonna pass in our filter.

29
00:01:53.130 --> 00:01:56.824
And so this is, one of a few things
you can also pass in sort and

30
00:01:56.824 --> 00:02:01.678
a few other pieces, but what we care
about is specifically the filter, because

31
00:02:01.678 --> 00:02:06.690
that's gonna allow us to limit down what
we're getting to just the stuff we need.

32
00:02:06.690 --> 00:02:10.642
So we're gonna go with property status.

33
00:02:10.642 --> 00:02:15.220
And that is aligned to
these properties here.

34
00:02:15.220 --> 00:02:19.390
So when you're looking, you can see
the status spice level submitter.

35
00:02:19.390 --> 00:02:23.358
And the reason that these are written
like they are, not with spaces and

36
00:02:23.358 --> 00:02:28.058
stuff is because Notion doesn't have
a differentiation between what displays on

37
00:02:28.058 --> 00:02:30.388
the screen and how you run these filters.

38
00:02:30.388 --> 00:02:35.219
So if you want something like spice level
in your code then you would also set

39
00:02:35.219 --> 00:02:39.744
spice level here otherwise you're
gonna have like quoted string keys

40
00:02:39.744 --> 00:02:44.519
with spaces in them and stuff it's your
call on how you wanna manage that.

41
00:02:44.519 --> 00:02:46.160
It doesn't really matter one way or
the other.

42
00:02:46.160 --> 00:02:47.470
It's just a preference thing.

43
00:02:48.880 --> 00:02:54.090
So inside here, we're gonna get
the filter property status.

44
00:02:54.090 --> 00:02:56.460
I added one too many.

45
00:02:56.460 --> 00:02:57.820
We've got the property status.

46
00:02:57.820 --> 00:03:01.165
We want the status equals new so

47
00:03:01.165 --> 00:03:07.091
we're getting only things
that are in the new column.

48
00:03:07.091 --> 00:03:14.289
And that finishes our filter and
then we want the page size to be 100 and

49
00:03:14.289 --> 00:03:20.550
this is unhappy because expected
two arguments but got three.

50
00:03:22.350 --> 00:03:25.030
Because I double quoted this, there we go.

51
00:03:25.030 --> 00:03:25.690
That's better.

52
00:03:25.690 --> 00:03:29.823
So now we've got an object, it's got
our filter, and then that says that

53
00:03:29.823 --> 00:03:34.210
we only want items with the new status,
and we'll get up to 100 items.

54
00:03:34.210 --> 00:03:36.520
You can specify this for
however many you want.

55
00:03:36.520 --> 00:03:40.671
Like if you have a lot of incoming issues,
maybe you only wanna show the most recent

56
00:03:40.671 --> 00:03:43.820
10, and have a link to view the rest or
something like that.

57
00:03:46.100 --> 00:03:51.630
Then what we're gonna do is we are going
to grab out our open items and

58
00:03:51.630 --> 00:03:58.050
format them, By getting the results and
we're gonna map over those.

59
00:03:58.050 --> 00:04:03.450
That'll be an item and that item is
a notion item, which we have a type 4.

60
00:04:03.450 --> 00:04:07.521
And we're gonna return the opinion, and

61
00:04:07.521 --> 00:04:13.370
that's going to be
item.properties.opinion.title.

62
00:04:13.370 --> 00:04:16.938
Then you get to destructure
that because it's an array.

63
00:04:16.938 --> 00:04:20.210
Then you get your text, and
then you get the content.

64
00:04:20.210 --> 00:04:24.083
The Notion Api is similar
to Slack's block kit.

65
00:04:24.083 --> 00:04:28.780
It's very verbose and
it's done that for a good reason.

66
00:04:28.780 --> 00:04:32.246
It allows you to pass a lot of
information about the content and

67
00:04:32.246 --> 00:04:34.924
it's formatting and
a bunch of other details.

68
00:04:34.924 --> 00:04:39.775
But it does mean that these
accessors here get a little intense.

69
00:04:39.775 --> 00:04:45.141
And what you would probably wanna do is
in a more mission-critical application.

70
00:04:45.141 --> 00:04:49.546
Maybe look into some kind of runtime
validation of the input that's coming in

71
00:04:49.546 --> 00:04:53.949
like Zod to make sure that you don't,
as you're drilling into these items,

72
00:04:53.949 --> 00:04:58.353
if something is misplaced, if somebody
updates the notion database without

73
00:04:58.353 --> 00:05:01.970
telling you there are a lot of
things that could get weird here.

74
00:05:01.970 --> 00:05:03.990
But in our case, we have control over it.

75
00:05:03.990 --> 00:05:09.361
We know how it's working and so
we can kinda just dive in and be happy.

76
00:05:09.361 --> 00:05:10.980
So I'm gonna get the spice level as well.

77
00:05:10.980 --> 00:05:13.854
That spice level is

78
00:05:13.854 --> 00:05:22.302
item.properties.spiceLevel.select.name,
and

79
00:05:22.302 --> 00:05:29.670
then our status Is item.properties.Status

80
00:05:29.670 --> 00:05:33.811
.status.name.

81
00:05:33.811 --> 00:05:37.525
And then we can return our open items.

82
00:05:40.072 --> 00:05:45.916
Okay, so that is one helper piece
ready to go we're happy about that.

