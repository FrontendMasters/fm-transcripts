WEBVTT

1
00:00:00.160 --> 00:00:03.603
&gt;&gt; Steve Kinney: My name's Steve and we
are going to spend some time talking about

2
00:00:03.603 --> 00:00:08.400
Tailwind, ideally tailwind version 4, but
some of this applies to earlier versions.

3
00:00:08.400 --> 00:00:10.400
We'll call out where some
of the differences are.

4
00:00:10.400 --> 00:00:14.397
But yeah, Tailwind, which either a,
you've used Tailwind before and

5
00:00:14.397 --> 00:00:17.600
you're like, I know what that is,
or you haven't.

6
00:00:17.600 --> 00:00:21.040
So we can start with that question,
which will only open up another question.

7
00:00:21.040 --> 00:00:22.240
So what is Tailwind?

8
00:00:22.240 --> 00:00:27.750
Well, Tailwind, thank you for asking,
is a utility first CSS framework,

9
00:00:27.750 --> 00:00:31.600
which then obviously
begs the next question.

10
00:00:31.600 --> 00:00:37.600
What, Steve,
is a utility first CSS framework?

11
00:00:39.280 --> 00:00:41.520
That is an answerable question.

12
00:00:41.520 --> 00:00:46.320
Which is just a different approach
to the way we do classes in css.

13
00:00:46.320 --> 00:00:49.884
Maybe more traditionally,
you would see stuff like, okay,

14
00:00:49.884 --> 00:00:54.010
we're going to have a class for
a button and maybe a button hover state.

15
00:00:54.010 --> 00:01:00.090
And we'll apply those classes with
utility based or utility first css.

16
00:01:00.090 --> 00:01:04.738
The ideas are classes are kind of
the things that we are doing to that

17
00:01:04.738 --> 00:01:06.490
particular component.

18
00:01:06.490 --> 00:01:10.905
So you can kind of, even if you've
never seen any Tailwind before,

19
00:01:10.905 --> 00:01:14.389
you can kind of begin to
figure out what's going on and

20
00:01:14.389 --> 00:01:19.690
what the styles of this button
are based on the names of the classes.

21
00:01:19.690 --> 00:01:23.755
So to no one's surprise, even though we
cannot see this button on this slide,

22
00:01:23.755 --> 00:01:27.850
we can imagine in our mind's eye that
it probably has a blue background.

23
00:01:27.850 --> 00:01:30.090
The text is most likely white.

24
00:01:30.090 --> 00:01:33.810
It might even have
a horizontal padding of three.

25
00:01:33.810 --> 00:01:36.650
We'll talk about what
three is in a moment.

26
00:01:36.650 --> 00:01:41.450
And a vertical padding of two right X and
Y axes there.

27
00:01:41.450 --> 00:01:43.370
And we stack these together.

28
00:01:43.370 --> 00:01:49.010
What Tailwind does is it then looks at
all of your various CSS classes and

29
00:01:49.010 --> 00:01:53.992
figures out which ones actually got used,
and then tries to put

30
00:01:53.992 --> 00:01:59.170
together the most concise version
of a CSS style sheet possible.

31
00:02:01.170 --> 00:02:03.290
Your first reaction would be like,
yeah, I'm into that.

32
00:02:03.290 --> 00:02:03.890
That makes sense.

33
00:02:03.890 --> 00:02:09.010
Or a piece of you is philosophically or
intellectually horrified.

34
00:02:09.010 --> 00:02:14.530
I am not here to defend or whatever.

35
00:02:14.530 --> 00:02:15.610
I'm just here to explain.

36
00:02:15.610 --> 00:02:17.130
But we'll go into some of the.

37
00:02:17.130 --> 00:02:18.210
I'll teach the controversy.

38
00:02:18.210 --> 00:02:18.810
How about that?

39
00:02:20.090 --> 00:02:23.886
The advantages are one that
as you are prototyping,

40
00:02:23.886 --> 00:02:29.750
one would argue the JSX argument, which
is you can do the kind of interactivity,

41
00:02:29.750 --> 00:02:33.130
the markup, and
the styling all in one place.

42
00:02:34.970 --> 00:02:39.723
There's also the fact that when
you are using these single

43
00:02:39.723 --> 00:02:44.379
purpose utility classes,
the nuances of the cascade and

44
00:02:44.379 --> 00:02:49.610
cascading style sheets tends
to be less of an issue.

45
00:02:49.610 --> 00:02:53.435
But I think more importantly,
kind of is these, you know,

46
00:02:53.435 --> 00:02:57.489
the fact of the matter is like if
you have a whole bunch of stuff,

47
00:02:57.489 --> 00:03:01.543
if maybe the kind of normal like
padding for the general look and

48
00:03:01.543 --> 00:03:06.438
feel of your UI is like a padding of one
remote or 16 pixels or what have you,

49
00:03:06.438 --> 00:03:10.571
you could argue that putting that
on every single card section,

50
00:03:10.571 --> 00:03:15.810
whatever component, those lines add up
because you can't really minify that.

51
00:03:17.330 --> 00:03:21.601
Every time you want to say the background
color is a certain hex value of blue,

52
00:03:21.601 --> 00:03:25.890
those properties stack up and there's
not really a great way to minimize it.

53
00:03:25.890 --> 00:03:30.516
Prior to CSS variables we could have also
argued there's not really a great way to

54
00:03:30.516 --> 00:03:34.801
change it across the entire code base
without something like Sass or less or

55
00:03:34.801 --> 00:03:35.700
what have you.

56
00:03:36.740 --> 00:03:39.031
But I think generally speaking for

57
00:03:39.031 --> 00:03:43.850
the purposes of generating a very
concise and performance style sheet,

58
00:03:43.850 --> 00:03:49.380
having very small single purpose classes
that you can stack up is somewhat useful.

59
00:03:51.140 --> 00:03:55.715
There are some criticisms at the same
time, which is as we will see,

60
00:03:55.715 --> 00:04:00.935
even putting together some of my notes and
having code blocks on the website,

61
00:04:00.935 --> 00:04:05.754
just seeing exactly that running to
the first time, line length issues

62
00:04:05.754 --> 00:04:10.730
that broke the layout of my own site
that I had to go fix before this course,

63
00:04:10.730 --> 00:04:16.000
that is a button that had no hover
states and very little styling.

64
00:04:16.000 --> 00:04:20.480
The number of classes
tend to add up over time.

65
00:04:21.920 --> 00:04:23.360
A lot of the techniques for

66
00:04:23.360 --> 00:04:27.760
maybe trying to limit that kind of are
basically antipatterns in a lot of cases.

67
00:04:27.760 --> 00:04:29.600
So that is a criticism.

68
00:04:30.720 --> 00:04:33.680
You do need to learn these new classes.

69
00:04:33.680 --> 00:04:38.030
On top of just knowing regular css
there are some tools that help.

70
00:04:39.070 --> 00:04:43.822
And again these utility classes
are basically trying to express

71
00:04:43.822 --> 00:04:48.838
the style like that PX2 is effectively
just padding on the X axis and

72
00:04:48.838 --> 00:04:53.766
that's not saying what that button is or
does in the same way that we

73
00:04:53.766 --> 00:04:58.990
might think about with semantic markup,
so on and so forth.

74
00:04:58.990 --> 00:05:04.785
The one thing I will also add in is
that there is effectively a presumption

75
00:05:04.785 --> 00:05:10.400
when using Tailwick that you are using
some kind of component system.

76
00:05:12.160 --> 00:05:16.417
Because if you are going to go through
every HTML button in your website and

77
00:05:16.417 --> 00:05:21.360
try to put all those classes on it,
you will slowly go insane, right?

78
00:05:21.360 --> 00:05:24.880
All the multi cursor work in the world
is not going to save you at that point.

79
00:05:26.160 --> 00:05:29.848
The worst sins that I have ever committed
on a code base is getting a little

80
00:05:29.848 --> 00:05:31.610
egregious with find and replace.

81
00:05:33.280 --> 00:05:34.560
I've dug myself.

82
00:05:34.560 --> 00:05:37.782
That's just git reset hard is how you
dig yourself out of that one, but

83
00:05:37.782 --> 00:05:39.120
trust me how I know.

84
00:05:39.120 --> 00:05:43.120
So there is an assumption that you're
using some kind of component framework.

85
00:05:43.120 --> 00:05:47.268
Now that could be anything that could
be React, that could be Backbone,

86
00:05:47.268 --> 00:05:50.600
that could be jQuery mounting
the DOM nodes onto the page.

87
00:05:50.600 --> 00:05:55.320
Something where you can take the idea of
a button and apply that multiple places.

88
00:05:55.320 --> 00:05:57.153
So then if you change
the definition of a button,

89
00:05:57.153 --> 00:05:59.360
you change all the buttons on the site.

90
00:05:59.360 --> 00:06:01.433
And so
we are gonna kind of do a little mix.

91
00:06:01.433 --> 00:06:03.807
At some point,
we'll just be in a playground, and

92
00:06:03.807 --> 00:06:07.621
we're just gonna do regular HTML because
getting distracted with a framework and

93
00:06:07.621 --> 00:06:09.680
all that kind of stuff
is not super helpful.

94
00:06:09.680 --> 00:06:13.480
We do have a storybook set
up with some svelte code.

95
00:06:13.480 --> 00:06:14.720
You do not need to know svelte.

96
00:06:14.720 --> 00:06:18.240
It was just what gets the most
of the framework out of the way.

97
00:06:18.240 --> 00:06:20.680
So we can look at Tailwind.

98
00:06:20.680 --> 00:06:23.680
So there's maybe one line for
props and that's about it.

99
00:06:23.680 --> 00:06:25.600
Otherwise it should look like HTML.

100
00:06:25.600 --> 00:06:27.777
But there is some assumption, as I said,

101
00:06:27.777 --> 00:06:30.800
that you are using some
kind of component system.

102
00:06:30.800 --> 00:06:35.157
That said, whether it's web components or
React or Angular,

103
00:06:35.157 --> 00:06:40.760
you probably are, unless this is a one
page site or something along those lines.

104
00:06:40.760 --> 00:06:46.321
Even if you are using Ruby on
Rails to server generate the page

105
00:06:46.321 --> 00:06:51.240
with reusable pieces of markup,
all of that is fine.

106
00:06:51.240 --> 00:06:56.000
Tailwind is agnostic of
any kind of framework.

107
00:06:56.000 --> 00:06:59.260
It is effectively just css.

108
00:06:59.260 --> 00:07:02.829
And that was kind of true
in previous versions, but

109
00:07:02.829 --> 00:07:08.140
is very true at this point where all
your Tailwind configuration is css.

110
00:07:08.140 --> 00:07:12.620
It's all CSS variables,
CSS the whole way down.

111
00:07:12.620 --> 00:07:14.940
So can I use Tailwind with X?

112
00:07:14.940 --> 00:07:17.660
The answer is, can you use CSS with X?

113
00:07:17.660 --> 00:07:21.975
If so, then yes.

114
00:07:21.975 --> 00:07:26.336
Again, so why it works is if you
get that predictable cascade,

115
00:07:26.336 --> 00:07:30.050
because again,
the way that the classes stack up.

116
00:07:30.050 --> 00:07:34.791
There is also the fact that since
you are defining most of these

117
00:07:34.791 --> 00:07:39.076
shared things with CSS variables,
there is very easy to

118
00:07:39.076 --> 00:07:43.634
map the design tokens that your
designer is using in Figma or

119
00:07:43.634 --> 00:07:48.930
what have you with how that
manifests itself in the markup.

120
00:07:48.930 --> 00:07:53.737
Then Tailwind uses this tool called Oxide,
which is just their own internal tool

121
00:07:53.737 --> 00:07:57.553
built in Rust, to kind of then rip
through your entire markup and

122
00:07:57.553 --> 00:08:01.723
figure out what classes do they use,
what classes do they not use, and

123
00:08:01.723 --> 00:08:05.140
make the most concise version
of a style sheet possible.

124
00:08:08.180 --> 00:08:09.140
Installation.

125
00:08:09.140 --> 00:08:13.500
The answer is it depends, because you
do need some kind of build tooling.

126
00:08:13.500 --> 00:08:15.460
That's not totally true,
but let's work with it.

127
00:08:15.460 --> 00:08:19.108
You do need some kind of build tooling
to then rip through said components and

128
00:08:19.108 --> 00:08:20.420
put everything together.

129
00:08:20.420 --> 00:08:24.309
Otherwise you will get one giant
style sheet, which I guess works,

130
00:08:24.309 --> 00:08:29.220
but depending on what you're using,
if you're using Vite, this is about it.

131
00:08:29.220 --> 00:08:31.780
It's not that much different for webpack.

132
00:08:31.780 --> 00:08:33.700
You can also use it with Post css.

133
00:08:33.700 --> 00:08:38.044
Again, it's just a plugin for
any of these, whether it's postcss,

134
00:08:38.044 --> 00:08:40.340
webpack, Vite, so on and so forth.

135
00:08:41.460 --> 00:08:42.260
I'll show you.

136
00:08:42.260 --> 00:08:45.580
We're using Vite for most of the projects
and examples in this course.

137
00:08:45.580 --> 00:08:48.770
So this is literally from
my own configuration.

138
00:08:48.770 --> 00:08:52.506
As you can see, not a lot going on as
Vite pulls in all the different files and

139
00:08:52.506 --> 00:08:53.490
processes them.

140
00:08:53.490 --> 00:08:55.250
They go in through oxide.

141
00:08:55.250 --> 00:08:55.970
Oxide goes.

142
00:08:55.970 --> 00:08:59.090
Okay, they did use
background color blue 600.

143
00:08:59.090 --> 00:09:00.450
Add that one to the list check.

144
00:09:00.450 --> 00:09:05.187
They did use a padding of four,
which is one REM and cool,

145
00:09:05.187 --> 00:09:07.570
add that to the style sheet.

146
00:09:07.570 --> 00:09:10.290
They didn't use Fuchsia 200.

147
00:09:10.290 --> 00:09:14.450
Rip it out of the style sheet, so that
gives you a way to kind of power that.

148
00:09:15.640 --> 00:09:19.672
Otherwise you pull in literally
everything, which is fine,

149
00:09:19.672 --> 00:09:20.920
just suboptimal.

150
00:09:22.520 --> 00:09:25.880
And then to kind of load
it into a style sheet.

151
00:09:25.880 --> 00:09:30.810
That is, once you have partially
hooked up to your build tooling and

152
00:09:30.810 --> 00:09:33.240
then to add it to your CSS in your.

153
00:09:33.240 --> 00:09:34.781
Whatever the root CSS file is,

154
00:09:34.781 --> 00:09:38.200
you're going to add that
line in there right there.

155
00:09:38.200 --> 00:09:43.055
Now this is also build tooling helps
here too, because Vite, or Webpack, or

156
00:09:43.055 --> 00:09:48.226
what have you will then like go to Node
modules, find Tailwind CSS, find the CSS.

157
00:09:48.226 --> 00:09:54.620
There's some normal magic that most of our
build tooling has at this point will work.

158
00:09:54.620 --> 00:09:57.943
There is a CDN version you can put
there that actually will like look at

159
00:09:57.943 --> 00:10:00.820
the page as it mounts and
kind of do something very similar.

160
00:10:01.940 --> 00:10:05.100
So you don't necessarily need to
use any of this build tooling.

161
00:10:05.100 --> 00:10:06.500
You can just drop in.

162
00:10:06.500 --> 00:10:08.920
At one point, we'll look at Tailwind Play,

163
00:10:08.920 --> 00:10:13.280
which is their little like codepen ish
playground is effectively what that is.

164
00:10:13.280 --> 00:10:15.320
So you don't even need to
do any of this tooling.

165
00:10:15.320 --> 00:10:17.440
You could just add one script tag.

166
00:10:17.440 --> 00:10:20.850
But generally speaking, if you are using
some kind of like component system,

167
00:10:20.850 --> 00:10:24.880
there's probably some tool somewhere
that you're using for something, right?

168
00:10:24.880 --> 00:10:29.593
But it is mostly agnostic of any
kind of tooling you happen to use,

169
00:10:29.593 --> 00:10:33.120
as long as CSS is somehow
involved along the way.

