WEBVTT

1
00:00:00.125 --> 00:00:05.447
Let's talk about some best practices and
anti-patterns, mostly for the express

2
00:00:05.447 --> 00:00:10.720
purpose of seeing a little bit more of
what a Tailwind class system looks like.

3
00:00:10.720 --> 00:00:15.260
And then what we're gonna spend the most
of our time doing today is just building

4
00:00:15.260 --> 00:00:18.715
lots of little things over and
over and over again until we get

5
00:00:18.715 --> 00:00:24.320
the muscle memory in place to feel like we
know tailwind like the back of our hand.

6
00:00:24.320 --> 00:00:29.080
So there are just some kind of basic
concepts that we will then refer to.

7
00:00:29.080 --> 00:00:32.389
So I'm gonna just put a few little
place markers in your brain so

8
00:00:32.389 --> 00:00:34.580
I can reference them later effectively.

9
00:00:36.900 --> 00:00:39.980
So when you import Tailwind css,

10
00:00:39.980 --> 00:00:44.820
it uses CSS layers,
which are a modern CSS feature.

11
00:00:44.820 --> 00:00:47.645
They are not tailwind specific.

12
00:00:47.645 --> 00:00:51.269
They are ways to kind of have different
layers of the cascade that you put in

13
00:00:51.269 --> 00:00:54.900
a given order so that anything happens
over one layer, so on and so forth.

14
00:00:54.900 --> 00:00:56.780
We have one for the theme.

15
00:00:56.780 --> 00:00:57.780
This one is special.

16
00:00:59.220 --> 00:01:04.152
All of the CSS variables that we define
on the theme layer then become utility

17
00:01:04.152 --> 00:01:05.940
classes that we can use.

18
00:01:05.940 --> 00:01:09.540
So let's say you do not like the colors
that Tailwind comes with out of the box.

19
00:01:10.580 --> 00:01:13.076
You can go ahead and
redefine those CSS variables and

20
00:01:13.076 --> 00:01:15.220
now they'll mean different things.

21
00:01:15.220 --> 00:01:19.300
Let's say you have a color that is brand.

22
00:01:20.500 --> 00:01:25.140
You can make a new color that is brand
instead of blue and use that everywhere.

23
00:01:26.300 --> 00:01:29.820
Success, error warning,
stuff along those lines.

24
00:01:29.820 --> 00:01:34.118
You can add colors, you can move colors,
you can change what the default font size

25
00:01:34.118 --> 00:01:37.580
is or the default font just by
defining new CSS variables.

26
00:01:37.580 --> 00:01:41.034
The only thing that you have to keep
in mind is that if you would like them

27
00:01:41.034 --> 00:01:44.620
to then turn into tailwind classes,
they need to be on that theme layer.

28
00:01:44.620 --> 00:01:46.460
Again, we will see all these things.

29
00:01:46.460 --> 00:01:49.660
We're just doing the high
level at this point first.

30
00:01:49.660 --> 00:01:54.194
Then you have a base layer, which is all
the times when you would style stuff.

31
00:01:54.194 --> 00:02:00.830
Like if you need to style what body is or
the kind of base HTML elements,

32
00:02:00.830 --> 00:02:06.040
okay, lists, input fields,
so on and so forth.

33
00:02:06.040 --> 00:02:10.951
Now if I was to channel like the official
stance of the Tailwind team,

34
00:02:10.951 --> 00:02:15.200
they'd be like,
you probably don't even need to do that.

35
00:02:15.200 --> 00:02:22.420
You should probably just have components
that you put those classes on and use.

36
00:02:22.420 --> 00:02:24.660
And they're not wrong, right?

37
00:02:24.660 --> 00:02:29.380
Cause like, if you decide like we'll
actually see this at one point.

38
00:02:29.380 --> 00:02:32.420
But if you decide like all
inputs should look like this.

39
00:02:32.420 --> 00:02:36.093
Well, if you want to do something clever
where you have like an input that looks

40
00:02:36.093 --> 00:02:37.428
like it has a button inside,

41
00:02:37.428 --> 00:02:40.340
then you need to take all those
styles off that input, right?

42
00:02:40.340 --> 00:02:44.071
And so a lot of times just keeping
your base elements, base elements and

43
00:02:44.071 --> 00:02:49.010
putting the utility classes in your markup
is usually gonna work out better for you.

44
00:02:49.010 --> 00:02:51.341
But if there are reasons or
all sorts of things,

45
00:02:51.341 --> 00:02:54.546
especially if you're migrating
in a brand new code base, sure,

46
00:02:54.546 --> 00:02:58.530
then we all know that sometimes we don't
get to work in green fields all the time.

47
00:02:59.570 --> 00:03:04.807
Base layers, where you style all of
those raw base elements in HTML,

48
00:03:04.807 --> 00:03:07.516
then you've got your components,

49
00:03:07.516 --> 00:03:13.650
which is more like if you had
a particular button, so on and so forth.

50
00:03:13.650 --> 00:03:16.909
Then this utility property,
which we'll see later as well,

51
00:03:16.909 --> 00:03:19.730
we can make one off little
helpers as we go along.

52
00:03:19.730 --> 00:03:22.870
I need to add an additional class to
everything Tailwind gives me, but

53
00:03:22.870 --> 00:03:25.170
I need to add this one
special class that we use.

54
00:03:25.170 --> 00:03:27.370
You just do utility,
the name of that class.

55
00:03:27.370 --> 00:03:29.650
And now it is in there as well.

56
00:03:29.650 --> 00:03:34.408
The nice thing when we get to the tooling
in a second is like I said before,

57
00:03:34.408 --> 00:03:36.210
there is a learning curve.

58
00:03:37.650 --> 00:03:43.807
That said, if you use Visual Studio code
at least, which is the only editor I use,

59
00:03:43.807 --> 00:03:48.179
other than ones that are just
VS code in Wolf's clothing,

60
00:03:48.179 --> 00:03:52.554
you can get this Tailwind IntelliSense
plugin which gives

61
00:03:52.554 --> 00:03:56.414
you autocomplete because
who doesn't love that?

62
00:03:56.414 --> 00:04:01.149
So anything you use with @utility or
on the theme layer, your CSS will

63
00:04:01.149 --> 00:04:06.140
just work if you ignore all this,
right, but it won't get stripped out.

64
00:04:06.140 --> 00:04:08.513
If you don't use these layers and
you don't use these tools,

65
00:04:08.513 --> 00:04:10.520
everything will work just fine.

66
00:04:10.520 --> 00:04:13.160
Tailwind won't know to go looking for
them to strip them out.

67
00:04:13.160 --> 00:04:16.760
You won't get them in IntelliSense,
so on and so forth.

68
00:04:16.760 --> 00:04:18.040
Everything will be okay.

69
00:04:18.040 --> 00:04:21.480
But like you will just
not be totally optimized.

70
00:04:21.480 --> 00:04:23.800
&gt;&gt; Speaker 2: Do the order
of the CSS layers matter?

71
00:04:23.800 --> 00:04:27.080
For example,
does components override base?

72
00:04:27.080 --> 00:04:30.440
&gt;&gt; Steve Kinney: Yes, so the order
matters, but Tailwind did the order.

73
00:04:30.440 --> 00:04:33.480
The order you write it in doesn't matter,
right?

74
00:04:33.480 --> 00:04:38.494
When the library or the person writing or
you, whoever sets up the layers,

75
00:04:38.494 --> 00:04:42.164
can basically say,
here are the orders of the layers.

76
00:04:42.164 --> 00:04:44.210
Tailwind has done that already, right?

77
00:04:44.210 --> 00:04:48.330
And so your theme happens and then base
happens and then the components happen.

78
00:04:48.330 --> 00:04:50.490
So you can write them in any order, right?

79
00:04:50.490 --> 00:04:54.530
There is a line and this is just again,
you can look at the MDN docs for layers.

80
00:04:55.650 --> 00:04:57.770
I looked at them, I was like,
I will use this one day.

81
00:04:57.770 --> 00:05:00.290
I never did because I just used Tailwind.

82
00:05:00.290 --> 00:05:03.650
But you can define
the order of the layers.

83
00:05:03.650 --> 00:05:07.304
But that's done on the Tailwind level in
the way that you define them in your css,

84
00:05:07.304 --> 00:05:08.292
it doesn't matter.

85
00:05:08.292 --> 00:05:12.970
That's kind of one of the perks of
layers is that it sets that order.

86
00:05:12.970 --> 00:05:16.250
Because otherwise in css,
which one came first?

87
00:05:16.250 --> 00:05:19.533
Which is easy if you have one CSS file,
hard if you have a bunch.

88
00:05:19.533 --> 00:05:22.574
So layers let you kinda
define which one comes first.

