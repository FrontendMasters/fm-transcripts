WEBVTT

1
00:00:00.160 --> 00:00:01.779
&gt;&gt; Steve Kinney: Like I said before,

2
00:00:01.779 --> 00:00:07.320
there are some things to think about
when it comes to using Tailwind.

3
00:00:07.320 --> 00:00:10.484
Knowing what we know about the fact that
it's ripping through all these files and

4
00:00:10.484 --> 00:00:13.280
figuring out what classes you
are using and not using, which.

5
00:00:13.280 --> 00:00:17.120
Is it important that you understand
every nuance on how Oxide does it?

6
00:00:17.120 --> 00:00:18.560
Absolutely not.

7
00:00:18.560 --> 00:00:23.840
Is it like important that you
understand the three sentence version?

8
00:00:23.840 --> 00:00:25.930
Yes, which is.

9
00:00:25.930 --> 00:00:30.192
Imagine that it is not
particularly complicated,

10
00:00:30.192 --> 00:00:35.743
which is it's not loading up
a language server like Typescript and

11
00:00:35.743 --> 00:00:38.650
reasoning about everything.

12
00:00:38.650 --> 00:00:39.914
It is basically,

13
00:00:39.914 --> 00:00:44.810
it's effectively in earlier
versions of Tailwind, this is true.

14
00:00:44.810 --> 00:00:48.372
It's less true now, but spiritually,
as far as the mental model works,

15
00:00:48.372 --> 00:00:52.120
which is imagine it's just using a regex
on every text file in your code base.

16
00:00:53.230 --> 00:00:53.730
Bye.

17
00:00:54.750 --> 00:00:59.392
&gt;&gt; Speaker 2: Does the idea of Tailwind
treating files as plain text mean

18
00:00:59.392 --> 00:01:03.654
that I could have a class name
stored in a JavaScript or

19
00:01:03.654 --> 00:01:08.029
TypeScript variable and
tailwind would pick that up?

20
00:01:08.029 --> 00:01:10.006
&gt;&gt; Steve Kinney: Yes,
as long as you have the whole class name,

21
00:01:10.006 --> 00:01:11.590
which we'll talk about in a second.

22
00:01:11.590 --> 00:01:13.163
&gt;&gt; Speaker 2: Got it.
&gt;&gt; Steve Kinney: If you try to get clever,

23
00:01:13.163 --> 00:01:15.550
and I think it's on the next slide or
one after that.

24
00:01:15.550 --> 00:01:19.920
If you try to get clever with
template strings and concatenation.

25
00:01:19.920 --> 00:01:20.566
No, right?

26
00:01:20.566 --> 00:01:23.323
Because it doesn't reason about your code,

27
00:01:23.323 --> 00:01:27.120
it's just literally looking
in somewhere in these files.

28
00:01:27.120 --> 00:01:31.280
Did they say BG Blue 600?

29
00:01:31.280 --> 00:01:31.840
Yes.

30
00:01:31.840 --> 00:01:34.440
So yeah, it goes through all your files,
It's not doing anything.

31
00:01:34.440 --> 00:01:37.760
It's just looking at the text, it's just
looking for the classes it knows about.

32
00:01:37.760 --> 00:01:41.920
And we'll talk about how
to customize Tailwind.

33
00:01:41.920 --> 00:01:46.140
Built into Tailwind, there are colors,
there are spacing, there are fonts.

34
00:01:46.140 --> 00:01:49.682
But it is not like the days
of Bootstrap where you knew,

35
00:01:49.682 --> 00:01:52.460
you knew if a page was
made with bootstrap.

36
00:01:52.460 --> 00:01:56.460
There's default colors, there's
default spacing, there's default font.

37
00:01:56.460 --> 00:01:59.180
Everything in Tailwind is customizable.

38
00:01:59.180 --> 00:02:03.253
Right and we'll look at how to do that in
a little bit and that changes what then

39
00:02:03.253 --> 00:02:06.620
the build tooling looks for
as it rips through all the files.

40
00:02:06.620 --> 00:02:09.672
But basically once it gets a sense
of what the tokens based on

41
00:02:09.672 --> 00:02:12.380
how you've tweaked it and
customized it, are it.

42
00:02:12.380 --> 00:02:13.060
It goes through everything.

43
00:02:13.060 --> 00:02:16.460
Yeah, just simple string
matching the whole way through.

44
00:02:17.740 --> 00:02:19.260
It does ignore some files.

45
00:02:20.460 --> 00:02:23.191
It ignores the files you think it ignores,
right?

46
00:02:23.191 --> 00:02:27.260
It ignores the files that everything
ignores, like things in Git ignore.

47
00:02:27.260 --> 00:02:31.892
CSS files will get ignored because they
are going through the build process

48
00:02:31.892 --> 00:02:32.780
themselves.

49
00:02:32.780 --> 00:02:37.940
And that's where Vite or webpack or what
have you works and obviously lock files.

50
00:02:37.940 --> 00:02:39.980
Yeah, it ignores the files
you think it ignores.

51
00:02:42.610 --> 00:02:44.450
Most tooling happens to ignore.

52
00:02:46.050 --> 00:02:51.554
And so as I alluded to with
Mike just a second ago,

53
00:02:51.554 --> 00:02:59.570
if you try to get clever,
the chances of you messing it up are high.

54
00:02:59.570 --> 00:03:05.410
So if you think you're smart, just try
to do the simplest possible thing.

55
00:03:05.410 --> 00:03:08.203
And so if you are trying to say,
I want to do a template string and

56
00:03:08.203 --> 00:03:10.890
inject that color, well,
now it's not going to find it.

57
00:03:10.890 --> 00:03:16.063
However, if you say like Const success

58
00:03:16.063 --> 00:03:20.930
equals BG green 400 const error.

59
00:03:20.930 --> 00:03:25.086
As long as the full string is
even in your JavaScript, and

60
00:03:25.086 --> 00:03:28.130
your HTML file is somewhere, it counts.

61
00:03:28.130 --> 00:03:33.050
But it can't try to then run your code and
dedupe everything at this moment.

62
00:03:34.730 --> 00:03:38.250
So yeah, if you are going to
mention a class, go all the way.

63
00:03:38.250 --> 00:03:39.370
Mention it in full.

64
00:03:40.830 --> 00:03:42.430
And I will say this.

65
00:03:42.430 --> 00:03:44.750
Cause we're gonna spend
a bunch of hours together.

66
00:03:44.750 --> 00:03:46.510
It could happen to me at some point.

67
00:03:46.510 --> 00:03:48.350
It will happen to you at some point.

68
00:03:48.350 --> 00:03:52.373
If you don't see the style, like you're
like, I did it and it's not happening,

69
00:03:52.373 --> 00:03:53.670
that's the first thing.

70
00:03:53.670 --> 00:03:56.110
Did it get stripped out for
some reason, right?

71
00:03:56.110 --> 00:03:58.350
Like that is the first thing
your brain should go to.

72
00:04:00.190 --> 00:04:01.670
Did I try to concatenate strings?

73
00:04:01.670 --> 00:04:02.670
Did I try to do something?

74
00:04:03.790 --> 00:04:05.710
And there are ways to navigate this.

75
00:04:05.710 --> 00:04:10.120
Cause sometimes you don't have all
of the markup in your code base.

76
00:04:10.120 --> 00:04:10.640
Not always.

77
00:04:10.640 --> 00:04:14.642
But like if you are pulling in something
from a third party library and

78
00:04:14.642 --> 00:04:16.850
they're putting the classes there,

79
00:04:16.850 --> 00:04:21.480
you might have to tell tailwind to like
allow list or safe list certain classes.

80
00:04:21.480 --> 00:04:25.160
And that's all doable,
but also really esoteric.

81
00:04:25.160 --> 00:04:28.360
Right?
Unless it's coming from some other place.

82
00:04:28.360 --> 00:04:32.122
Generally speaking, as long as you follow
the I didn't try to use a template string

83
00:04:32.122 --> 00:04:33.720
or concatenate my way to a class.

84
00:04:33.720 --> 00:04:34.760
You're probably good.

85
00:04:36.640 --> 00:04:37.600
Cool.

86
00:04:37.600 --> 00:04:38.800
There are plugins.

87
00:04:38.800 --> 00:04:42.460
Plugins are actually
written in JavaScript, but

88
00:04:42.460 --> 00:04:45.200
you can import them via CSS.

89
00:04:45.200 --> 00:04:47.792
These are just using CSS functions and

90
00:04:47.792 --> 00:04:51.280
directives to pull in
additional functionality.

91
00:04:52.480 --> 00:04:54.240
You can also pull in a given font.

92
00:04:54.240 --> 00:04:59.920
This is literally from
my own site's CSS file.

93
00:05:01.170 --> 00:05:04.770
Yeah, so
you can pull in stuff along those lines.

94
00:05:04.770 --> 00:05:06.690
We talked about allow listing.

95
00:05:06.690 --> 00:05:11.402
So let's say you are pulling in some
other component that you're loading

96
00:05:11.402 --> 00:05:12.850
from somewhere else.

97
00:05:13.970 --> 00:05:17.210
You'd be like,
wouldn't that involve directly injecting.

98
00:05:17.210 --> 00:05:18.290
Dangerous.

99
00:05:18.290 --> 00:05:20.530
Whatever.
I don't make the rules.

100
00:05:20.530 --> 00:05:24.946
We all know that some of us have weird
parts of our code bases because of legacy

101
00:05:24.946 --> 00:05:25.570
reasons.

102
00:05:27.110 --> 00:05:32.150
You can also say like, hey,
do not strip this out, right?

103
00:05:32.150 --> 00:05:35.886
And in this case it will like keep that
class in there even if it doesn't find it

104
00:05:35.886 --> 00:05:36.750
in the code base.

105
00:05:36.750 --> 00:05:38.411
If you are then loading
it from somewhere else.

