WEBVTT

1
00:00:00.360 --> 00:00:02.190
Let's talk about key blocks.

2
00:00:03.760 --> 00:00:09.550
So ordinarily,
elements are just there in the DOM.

3
00:00:09.550 --> 00:00:12.212
And if you change the value inside them,

4
00:00:12.212 --> 00:00:16.920
you're not gonna play transitions,
which might not be what you want.

5
00:00:16.920 --> 00:00:21.032
So here we have a typewriter transition
that we want to run on the text as

6
00:00:21.032 --> 00:00:22.270
the text changes.

7
00:00:22.270 --> 00:00:25.580
Every time we get a new message,
we want the typewriter to play it in.

8
00:00:26.600 --> 00:00:29.862
And in order to do that, we need to
remove the element from the DOM and

9
00:00:29.862 --> 00:00:30.900
then put a new one in.

10
00:00:31.940 --> 00:00:35.479
And we do that with something
called a key block.

11
00:00:35.479 --> 00:00:39.320
Key will take some value, and
whenever that value changes,

12
00:00:39.320 --> 00:00:43.100
the contents of the key block
will be replaced altogether.

13
00:00:43.100 --> 00:00:45.320
So let's just put that around
this paragraph element

14
00:00:45.320 --> 00:00:54.222
here.

15
00:00:54.222 --> 00:00:58.290
You'll now see that when that i
value changes on an interval,

16
00:00:58.290 --> 00:01:01.500
we're getting rid of
the existing paragraph and

17
00:01:01.500 --> 00:01:05.347
creating a new paragraph with
a new typewriter transition

18
00:01:10.864 --> 00:01:15.474
Finally, a particularly powerful
aspect of Svelte's transitions is

19
00:01:15.474 --> 00:01:20.331
the ability to defer them so that they
can, in effect, talk to each other.

20
00:01:23.489 --> 00:01:25.590
Here we have a pair of todo lists.

21
00:01:25.590 --> 00:01:27.774
We have a list of to-dos that have yet
to be done and

22
00:01:27.774 --> 00:01:30.530
we have a list of to-dos
that have been done.

23
00:01:30.530 --> 00:01:32.908
And if I toggle one of these items,

24
00:01:32.908 --> 00:01:38.540
then it will just move to the other list
because that's how we've set this up.

25
00:01:38.540 --> 00:01:43.932
We have inside our app,
we have a TodoList, which is done=(false).

26
00:01:43.932 --> 00:01:49.373
And in TodoList, we've done=true,
and the todos themselves

27
00:01:49.373 --> 00:01:54.829
are in this store that we have,
which is coming from todos.js.

28
00:01:57.243 --> 00:01:59.920
And in the real world,
things don't behave that way.

29
00:01:59.920 --> 00:02:02.670
Things don't disappear from one place and
reappear in another.

30
00:02:02.670 --> 00:02:05.340
In the real world,
things move from one place to the other.

31
00:02:05.340 --> 00:02:10.272
And it's nice if we can get a little bit
of that real world physicsness in our

32
00:02:10.272 --> 00:02:15.209
user interfaces, because using motion
can help users understand what's

33
00:02:15.209 --> 00:02:17.420
actually happening in your app.

34
00:02:17.420 --> 00:02:21.924
And we can achieve this in Svelte
using something called the crossfade

35
00:02:21.924 --> 00:02:23.560
transition.

36
00:02:23.560 --> 00:02:27.439
If we open the transition.js module,
you'll see that we're

37
00:02:27.439 --> 00:02:32.270
importing crossfade from Svelte transition
the same place that we got fade and

38
00:02:32.270 --> 00:02:36.681
fly and slide and so on, and
we're also importing an easing function.

39
00:02:36.681 --> 00:02:40.734
And we're creating a pair of
transitions called send and receive,

40
00:02:40.734 --> 00:02:43.020
by calling this crossfade function.

41
00:02:44.860 --> 00:02:48.623
We're also specifying a fallback,
which could be anything,

42
00:02:48.623 --> 00:02:52.670
it could be a transition that you
imported from Svelte transition.

43
00:02:52.670 --> 00:02:59.014
And then inside the TodoList.svelte, we
can use those send and receive transitions

44
00:02:59.014 --> 00:03:04.049
to control what happens when those
elements are added and removed.

45
00:03:05.330 --> 00:03:10.489
We're gonna begin by importing
them from that module.

46
00:03:16.902 --> 00:03:20.481
And then down here inside the TodoList,

47
00:03:20.481 --> 00:03:25.329
we'll add the in and
out transitions on the list item.

48
00:03:29.567 --> 00:03:35.700
So when an element enters the DOM,
we're gonna receive the element.

49
00:03:35.700 --> 00:03:42.020
And we're gonna give it a key,
which is the unique idea of the todo.

50
00:03:43.160 --> 00:03:48.755
And similarly, when it leaves the DOM,
we're gonna send it to the other todoList.

51
00:03:53.437 --> 00:03:57.553
And so now when we toggle these values,

52
00:03:57.553 --> 00:04:02.310
it actually moves from
one list to the other.

53
00:04:02.310 --> 00:04:07.067
The reason that we're creating send and
receive in this separate module over here,

54
00:04:07.067 --> 00:04:11.762
instead of doing it inside the todoList
itself, is because we have two todoLists.

55
00:04:11.762 --> 00:04:15.789
And so if we created the send and
receive functions inside the todoList,

56
00:04:15.789 --> 00:04:19.498
then send and receive would only
be able to talk within a todoList.

57
00:04:19.498 --> 00:04:22.078
But because they're in
this external module,

58
00:04:22.078 --> 00:04:25.950
the two components can coordinate
their transitions with each other,

59
00:04:25.950 --> 00:04:29.708
based on the key that we parse in
when the element is added or removed.

60
00:04:34.099 --> 00:04:38.062
Now, if you're paying close attention to
happenings in the web development world,

61
00:04:38.062 --> 00:04:42.100
you'll know that there is in fact a view
transition API coming to the platform.

62
00:04:42.100 --> 00:04:47.490
It's available in Chrome already, other
browsers, hopefully, will add it soon.

63
00:04:47.490 --> 00:04:51.670
And so eventually, you might be
able to do this just with CSS.

64
00:04:51.670 --> 00:04:55.638
But for right now, I recommend using
something inside Svelte, because this way

65
00:04:55.638 --> 00:04:59.563
you'll get a consistent user experience
whatever browser your user is using.

66
00:05:04.119 --> 00:05:06.967
Okay, so just now we were using
transitions to move things from one side

67
00:05:06.967 --> 00:05:07.540
to the other.

68
00:05:09.180 --> 00:05:13.440
That's great, except that I don't
really like this popping effect,

69
00:05:13.440 --> 00:05:17.984
that when I move that first todo, the
other ones just kind of pop into place,

70
00:05:17.984 --> 00:05:21.970
which is the exact opposite of
what we're trying to achieve here.

71
00:05:23.360 --> 00:05:28.081
So we need to apply motion to the elements
that are not transitioning in and out of

72
00:05:28.081 --> 00:05:33.890
the DOM, the elements that are staying in
the same list but are moving positions.

73
00:05:33.890 --> 00:05:37.080
And so for this we can use something
called the animate directive.

74
00:05:39.790 --> 00:05:45.618
You need animate with a flip function,
which stands for

75
00:05:45.618 --> 00:05:50.827
first last invert play,
which is a technique that

76
00:05:50.827 --> 00:05:58.190
allows us to do smooth motion
entirely with CSS transitions.

77
00:05:58.190 --> 00:06:02.068
And once we've imported that,
we can add it to the list item where we

78
00:06:02.068 --> 00:06:06.030
previously added the transitions,
just like this animate, flip.

79
00:06:07.910 --> 00:06:12.890
The now when we toggle these values,
the list moves smoothly.

80
00:06:17.170 --> 00:06:22.005
It's a little bit too slow though,
it's not a very satisfying effect, so

81
00:06:22.005 --> 00:06:26.168
we'll customize that with
a duration of 200 milliseconds.

82
00:06:30.930 --> 00:06:35.214
Now one thing that you will want to be
conscious of when you're using this in

83
00:06:35.214 --> 00:06:39.305
your own apps is that some users prefer
not to have motion in their apps.

84
00:06:39.305 --> 00:06:45.540
And so we can add a prefers
reduced motion setting,

85
00:06:45.540 --> 00:06:49.456
that sets the duration to zero.

86
00:06:49.456 --> 00:06:53.082
You can also parse a function for
the duration so that the actual number of

87
00:06:53.082 --> 00:06:57.007
milliseconds will be determined by the
number of pixels that the element has to

88
00:06:57.007 --> 00:07:00.940
move, if that's more in line with
the effect that you're trying to achieve.

