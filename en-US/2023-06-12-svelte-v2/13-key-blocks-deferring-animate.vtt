WEBVTT

1
00:00:00.310 --> 00:00:02.950
All right, let's move on to actions.

2
00:00:02.950 --> 00:00:06.145
Actions are element level
lifecycle functions.

3
00:00:06.145 --> 00:00:10.210
And they're really useful for things like
interfacing with third party libraries.

4
00:00:10.210 --> 00:00:13.596
Like if you have something that you
wanna use that is not a stock component,

5
00:00:13.596 --> 00:00:15.314
but it allows you to work with the DOM,

6
00:00:15.314 --> 00:00:18.060
then an action is a great
way of integrating those.

7
00:00:18.060 --> 00:00:21.225
It's useful for things like lazy
loaded images, or tooltips, or

8
00:00:21.225 --> 00:00:23.530
adding custom event handlers.

9
00:00:23.530 --> 00:00:27.310
And in this app here,
you can scribble on the canvas.

10
00:00:27.310 --> 00:00:30.730
If we pick a color like orange,
close that and

11
00:00:30.730 --> 00:00:34.170
then draw on the canvas, we can scribble.

12
00:00:34.170 --> 00:00:38.028
But if you open this menu and then cycle
through the options with the tab key,

13
00:00:38.028 --> 00:00:41.480
you'll quickly discover that it's
highlighted the wrong thing.

14
00:00:41.480 --> 00:00:45.060
I wanted to highlight the button, but
instead it highlighted the URL bar.

15
00:00:45.060 --> 00:00:50.061
And that's because at the moment,
this modal menu isn't trapping focus.

16
00:00:50.061 --> 00:00:54.143
And trapping keyboard focus is an
important thing to do when we're trying to

17
00:00:54.143 --> 00:00:59.240
build user interfaces that are accessible
for keyboard users as well as mouse users.

18
00:00:59.240 --> 00:01:01.660
And that's the sort of thing
that we can fix with an action.

19
00:01:03.390 --> 00:01:10.210
So over in our actions.js file, we have a
trapFocus function, and like a transition,

20
00:01:10.210 --> 00:01:15.668
it receives a node as its first
argument and lets you apply some logic.

21
00:01:15.668 --> 00:01:20.222
So inside app.svelte,
we're gonna go ahead and import that.

22
00:01:31.120 --> 00:01:38.971
And we'll add it to the menu
with use:trapfocus.

23
00:01:42.477 --> 00:01:45.190
All right, let's take a look at
what's happening in this function.

24
00:01:46.840 --> 00:01:51.810
So we begin by storing a reference to
whatever element was previously focused.

25
00:01:51.810 --> 00:01:56.381
We have a little helper function here that
gets all of the focusable elements inside

26
00:01:56.381 --> 00:01:56.980
the node.

27
00:01:56.980 --> 00:02:01.777
And then we have a key down handler,
which whenever we press the tab

28
00:02:01.777 --> 00:02:05.729
button will cycle through
those focusable elements.

29
00:02:05.729 --> 00:02:07.580
And focus the next one or
the previous one,

30
00:02:07.580 --> 00:02:10.266
then when we get to the end it
will cycle back to the beginning.

31
00:02:10.266 --> 00:02:14.796
And the first thing that we do
is we focus the first focusable

32
00:02:14.796 --> 00:02:16.796
element inside the menu.

33
00:02:16.796 --> 00:02:19.582
So when we open this, and
if I press the tab key,

34
00:02:19.582 --> 00:02:24.186
you will see that the orange button is
the next focusable element because it was

35
00:02:24.186 --> 00:02:26.440
previously focusing the red button.

36
00:02:28.000 --> 00:02:30.336
Right now though,
it doesn't do anything beyond that,

37
00:02:30.336 --> 00:02:33.440
if we get to the end of the flexible
list and press tab again.

38
00:02:33.440 --> 00:02:36.729
Then the focus leaves this menu and
that's the part that we wanna fix.

39
00:02:38.498 --> 00:02:42.002
So first of all,
we want to add an event listener.

40
00:02:45.686 --> 00:02:48.714
We wanna listen for
the key down event, and

41
00:02:48.714 --> 00:02:51.840
we wanna use that handle
key down function.

42
00:02:53.660 --> 00:02:57.401
And secondly, this is a recurring theme
today, when we do some setup work,

43
00:02:57.401 --> 00:02:59.690
we also wanna do some tear
down work at the end.

44
00:03:00.750 --> 00:03:05.205
So we're gonna return an object with
a destroy method that will get called when

45
00:03:05.205 --> 00:03:07.311
the element is removed from the DOM.

46
00:03:17.265 --> 00:03:22.194
Okay, and finally, we wanna reset
the focus to the element that

47
00:03:22.194 --> 00:03:25.219
was focused before the menu appeared.

48
00:03:28.999 --> 00:03:32.776
Just in case an element wasn't focused for
some reason,

49
00:03:32.776 --> 00:03:36.170
we're gonna use the optional
chaining operator.

50
00:03:36.170 --> 00:03:38.558
And call its focus method.

51
00:03:38.558 --> 00:03:42.675
So, now when we open the menu and
cycle through the options,

52
00:03:42.675 --> 00:03:47.143
it will get to the end and
then it'll go back to the start, right?

53
00:03:47.143 --> 00:03:49.940
This is a more accessible menu.

54
00:03:51.350 --> 00:03:56.513
Pick a nice blue color,
close the menu and go nuts.

55
00:03:59.913 --> 00:04:02.551
And just like transitions and
everything else,

56
00:04:02.551 --> 00:04:04.750
you can add parameters to your actions.

57
00:04:07.280 --> 00:04:08.561
In this exercise,

58
00:04:08.561 --> 00:04:13.370
we want to add a tooltip to the button
using a library called Tippy.js.

59
00:04:14.610 --> 00:04:17.994
So you'll see here that we
already have use:tooltip,

60
00:04:17.994 --> 00:04:20.016
but if you hover over the button.

61
00:04:20.016 --> 00:04:23.307
You'll see that the tooltip
contains no content and

62
00:04:23.307 --> 00:04:26.165
might be a little bit
hard to see in dark mode.

63
00:04:26.165 --> 00:04:30.604
To practice if I just for the sake of this
exercise to switch over to light mode,

64
00:04:30.604 --> 00:04:34.600
you can see that a tooltip is appearing
but there's nothing in there.

65
00:04:36.000 --> 00:04:39.079
And that's because we're
not passing anything in.

66
00:04:39.079 --> 00:04:40.210
Back to dark mode.

67
00:04:42.490 --> 00:04:43.060
Close that window.

68
00:04:44.700 --> 00:04:47.000
So here's our action,
our tooltip function.

69
00:04:48.230 --> 00:04:51.390
We're creating the tooltip using Tippy.

70
00:04:51.390 --> 00:04:56.419
But we need to pass in some options,
do that up here.

71
00:04:56.419 --> 00:05:03.100
And then where we call the action,
We'll pass in some content.

72
00:05:04.460 --> 00:05:07.850
And we'll give it a theme.

73
00:05:07.850 --> 00:05:10.540
There's a bunch of themes that you get
with Tippy, material is one of them.

74
00:05:11.980 --> 00:05:13.468
And now if we hover over the button,

75
00:05:13.468 --> 00:05:15.810
you'll see that it's rendering
a tooltip correctly.

76
00:05:17.550 --> 00:05:20.220
Now there is one thing that is
not working with this right now.

77
00:05:20.220 --> 00:05:25.695
If we change this, To some different text,

78
00:05:25.695 --> 00:05:28.372
it won't be reflected in the tooltip.

79
00:05:28.372 --> 00:05:31.442
And that's because we're not
updating the value inside.

80
00:05:31.442 --> 00:05:35.048
And we can fix that by adding
an update method to our action.

81
00:05:42.981 --> 00:05:47.630
Tippy has a set props method,
which takes some options.

82
00:05:48.740 --> 00:05:52.280
And so now if I change the text
back into Frontend Masters.

83
00:05:54.333 --> 00:05:56.797
For however, it appears in the tooltip.

