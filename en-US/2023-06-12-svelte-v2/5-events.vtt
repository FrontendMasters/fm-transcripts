WEBVTT

1
00:00:00.004 --> 00:00:02.773
We're gonna talk about DOM events as

2
00:00:02.773 --> 00:00:07.596
we saw in the earlier exercises
where we're clicking a button,

3
00:00:07.596 --> 00:00:12.328
you can listen to any DOM event on
any element, such as a click or

4
00:00:12.328 --> 00:00:17.355
a pointer move or anything else by
using this little on directive.

5
00:00:17.355 --> 00:00:23.087
So here and inside this application,
we have a div,

6
00:00:23.087 --> 00:00:27.647
we would like to add an event handler too,

7
00:00:27.647 --> 00:00:31.186
do on:pointermove.

8
00:00:31.186 --> 00:00:35.161
And then we're gonna reference
this handle move function up here.

9
00:00:40.374 --> 00:00:45.058
Right, and now,
if we run the mouse over the iframe,

10
00:00:45.058 --> 00:00:48.823
you'll see that the pointer is updating.

11
00:00:48.823 --> 00:00:50.206
Actually looks pretty wild.

12
00:00:50.206 --> 00:00:54.348
I don't think I realized that pointer move
events will give you fractional values, or

13
00:00:54.348 --> 00:00:58.109
maybe it's because I've zoomed in this
website for the sake of the workshop.

14
00:00:58.109 --> 00:01:03.861
So I'm just gonna go ahead and
make that look a little prettier,

15
00:01:03.861 --> 00:01:08.530
get some math around in there, All right?

16
00:01:08.530 --> 00:01:09.399
So much nicer.

17
00:01:12.834 --> 00:01:17.471
And of course, we don't need to have
a named function like handle move,

18
00:01:17.471 --> 00:01:20.751
we can just declare the function
in line if we want.

19
00:01:20.751 --> 00:01:26.452
So we can just copy this whole thing and

20
00:01:26.452 --> 00:01:30.558
put it in there if you like.

21
00:01:33.625 --> 00:01:38.539
And I'm gonna turn it into an anonymous
arrow function because syntactically

22
00:01:38.539 --> 00:01:39.885
it's a lot simpler.

23
00:01:44.193 --> 00:01:48.822
And changes the name of the event E.

24
00:01:48.822 --> 00:01:55.382
And rather than assigning to
the properties individually,

25
00:01:55.382 --> 00:02:01.683
let's just change this to
m = x: e.clientX, y: e.clientY,

26
00:02:01.683 --> 00:02:08.371
client x and client y are values
that you get inside any mouse or

27
00:02:08.371 --> 00:02:13.401
pointer event handler, it's the same deal.

28
00:02:13.401 --> 00:02:16.133
It's giving us these fractional values.

29
00:02:16.133 --> 00:02:24.413
Out of that kind of OCD, I'm gonna fix
that with some math rounds, right?

30
00:02:24.413 --> 00:02:31.610
And now we have an inline event handler
that is causing this value here to update.

31
00:02:31.610 --> 00:02:36.371
And it's totally fine to use an inline
event handler as opposed to a named event

32
00:02:36.371 --> 00:02:37.030
handler.

33
00:02:37.030 --> 00:02:40.986
It's not gonna get, like that function,
isn't gonna get recreated

34
00:02:40.986 --> 00:02:45.093
every time things change, which is
what can happen in some frameworks.

35
00:02:45.093 --> 00:02:48.187
The compiler is always got your back
it's gonna try and do the right thing.

36
00:02:51.573 --> 00:02:57.630
We can modify events using
this concise modifier syntax.

37
00:02:57.630 --> 00:03:02.446
So here we have a click handler that
is gonna cause an alert to appear

38
00:03:02.446 --> 00:03:06.322
every time we click it,
click that, click it again.

39
00:03:06.322 --> 00:03:07.542
It's just gonna keep on coming.

40
00:03:07.542 --> 00:03:10.042
Maybe we want this event to fire once and
then for

41
00:03:10.042 --> 00:03:12.176
that event handler to be unregistered.

42
00:03:12.176 --> 00:03:15.340
So we can add the once modifier like that.

43
00:03:15.340 --> 00:03:19.217
And now if we click it the first time,
it'll happen but

44
00:03:19.217 --> 00:03:22.263
then after that, nothing happens at all.

45
00:03:22.263 --> 00:03:24.177
All right, we've got a few different
modifiers that we can add.

46
00:03:24.177 --> 00:03:27.861
Prevent default, stop propagation,
passive, non-passive,

47
00:03:27.861 --> 00:03:31.557
capture, once, self,
you can read about these in your own time.

48
00:03:31.557 --> 00:03:34.430
You don't have exercises for
each of these.

49
00:03:34.430 --> 00:03:37.626
These are just things that make your life
a little bit easier when you're dealing

50
00:03:37.626 --> 00:03:38.482
with lots of events.

51
00:03:38.482 --> 00:03:42.981
And you can use multiple modifiers
together by chaining them using

52
00:03:42.981 --> 00:03:43.952
this syntax.

53
00:03:43.952 --> 00:03:48.443
It's not just elements that fire events,
components can also fire events.

54
00:03:48.443 --> 00:03:53.552
But the component needs to make
itself an event dispatcher.

55
00:03:53.552 --> 00:03:59.287
So we've got two components in this
exercise an app.svelte and inner.svelte,

56
00:03:59.287 --> 00:04:03.952
and the app is gonna listen for
events from the inner, side inner.

57
00:04:03.952 --> 00:04:06.928
We want to create this Event Dispatcher,

58
00:04:06.928 --> 00:04:10.678
by importing create
Event Dispatcher from svelte.

59
00:04:22.229 --> 00:04:25.562
And then we'll create
a new dispatch function.

60
00:04:29.180 --> 00:04:32.013
Now the reason that we need to
do it in two steps like this,

61
00:04:32.013 --> 00:04:34.317
first we import create Event Dispatcher,
and

62
00:04:34.317 --> 00:04:38.393
then we create the dispatcher, is because
when we call create Event Dispatcher,

63
00:04:38.393 --> 00:04:41.667
svelte knows that we're currently
inside the inner component.

64
00:04:41.667 --> 00:04:43.385
Later when we call dispatch,

65
00:04:43.385 --> 00:04:47.314
it knows that it's the dispatcher
that belongs to that component.

66
00:04:47.314 --> 00:04:51.679
If we just imported a dispatch function,
then svelte would have no way of knowing

67
00:04:51.679 --> 00:04:54.581
which function was actually
dispatching the event.

68
00:05:00.498 --> 00:05:03.940
Now that we've done that, so
the button if you click it,

69
00:05:03.940 --> 00:05:08.560
it will call this say hello function,
which calls that dispatch function.

70
00:05:08.560 --> 00:05:14.890
Now that we've wired that up, we can
add an event handler inside app.svelte,

71
00:05:14.890 --> 00:05:21.126
and it's exactly the same syntax that
we used with DOM elements on message=,

72
00:05:21.126 --> 00:05:26.246
then we've got a message handler
set up here, handle message.

73
00:05:26.246 --> 00:05:29.282
So we'll just feed that in like so.

74
00:05:29.282 --> 00:05:34.510
And now if you click the button,
it says hello, as you'd expect.

75
00:05:34.510 --> 00:05:38.552
And there's nothing special
about the the name message.

76
00:05:38.552 --> 00:05:43.449
We could change that to say, greet, and

77
00:05:43.449 --> 00:05:49.511
then in app.svelte,
change that also to greet.

78
00:05:49.511 --> 00:05:53.834
And a component can have as many
different events as makes sense.

79
00:05:56.826 --> 00:06:00.365
Now in some frameworks,
we don't have event systems,

80
00:06:00.365 --> 00:06:04.148
instead you pass callbacks as
props into your components.

81
00:06:04.148 --> 00:06:09.081
And that's the thing that you can do in
svelte too, it's really kind of a personal

82
00:06:09.081 --> 00:06:13.944
style preference the basic advice is that
your data goes down and then events come

83
00:06:13.944 --> 00:06:18.594
up and whether those events are expressed
using event dispatchers in Svelte or

84
00:06:18.594 --> 00:06:22.886
whether expressed as callbacks that
the component then calls is really

85
00:06:22.886 --> 00:06:24.633
just a matter of code style.

86
00:06:24.633 --> 00:06:26.467
I personally like the event style but

87
00:06:26.467 --> 00:06:29.908
it's up to you you're not forced to
choose between one or the other.

88
00:06:34.559 --> 00:06:39.205
Okay, so a fact about DOM events that
you'll know if you've used the DOM a lot

89
00:06:39.205 --> 00:06:43.924
is that events bubble, which is to say
that if you have some element deep in your

90
00:06:43.924 --> 00:06:48.784
tree, you can add an event listener on any
parent and the event will bubble up from

91
00:06:48.784 --> 00:06:52.460
the event target to where your
event handler is registered.

92
00:06:52.460 --> 00:06:56.271
That is not true with components,
component events do not bubble.

93
00:06:56.271 --> 00:07:00.608
So if you want to listen to an event
on some deeply nested component,

94
00:07:00.608 --> 00:07:04.806
the intermediate components need
to forward the event upwards.

95
00:07:04.806 --> 00:07:08.047
And so in this case we have
the same app.svelte and

96
00:07:08.047 --> 00:07:11.442
inner.svelte as in the exercise
that we just did, but

97
00:07:11.442 --> 00:07:16.706
there's also now this outer svelte which
contains the inner svelte component.

98
00:07:16.706 --> 00:07:21.474
So this is the middleman that's gonna
need to forward the event from outer.

99
00:07:21.474 --> 00:07:27.344
Now, we could solve this by going through
the whole rigmarole of importing,

100
00:07:27.344 --> 00:07:32.493
create Event Dispatcher, and
then creating a dispatch function,

101
00:07:32.493 --> 00:07:38.023
and then adding an event listener to
the inner here, it's a lot of work.

102
00:07:38.023 --> 00:07:39.616
It's a lot of boilerplate and

103
00:07:39.616 --> 00:07:42.812
boilerplate is anathema to
the svelte way of doing things.

104
00:07:42.812 --> 00:07:47.358
So we have a convenient shorthand,
instead,

105
00:07:47.358 --> 00:07:52.603
when this event gets dispatched,
we can just forward

106
00:07:52.603 --> 00:07:57.162
it to the application
by adding on :message.

107
00:07:59.770 --> 00:08:02.851
And now the outer component
will dispatch that

108
00:08:02.851 --> 00:08:06.488
message when it receives it
from the inner component.

109
00:08:14.015 --> 00:08:18.146
And of course, it works exactly
the same way for DOM events.

110
00:08:18.146 --> 00:08:20.477
We have a big red button component here.

111
00:08:22.043 --> 00:08:23.771
And we have a button,

112
00:08:23.771 --> 00:08:29.150
we wanna get notifications of when
the user clicks on that button.

113
00:08:29.150 --> 00:08:34.889
We've got our onClick handler wired
up already inside app.svelte,

114
00:08:34.889 --> 00:08:41.904
I'm gonna call this handleClick function,
so we just need to add an onClick to that.

115
00:08:41.904 --> 00:08:46.879
And now when press

116
00:08:46.879 --> 00:08:52.853
the button, [SOUND].

117
00:08:52.853 --> 00:08:56.297
&gt;&gt; Does forwarding only work with
events or callbacks as well.

118
00:08:56.297 --> 00:08:59.101
&gt;&gt; No, it does not work in callbacks,
it is purely about events.

119
00:08:59.101 --> 00:09:01.016
So if you're using the callback style,

120
00:09:01.016 --> 00:09:04.057
then you will have to pass
the callback from the parent component

121
00:09:04.057 --> 00:09:07.946
through the intermediate component to the
child component in the same way that you

122
00:09:07.946 --> 00:09:10.850
currently need to add the forwarding
syntax for the events.

123
00:09:10.850 --> 00:09:15.052
Okay, so we got a question in
the chat just now that was basically,

124
00:09:15.052 --> 00:09:19.643
how do I know in outet.svelte that I
need to forward this message event?

125
00:09:19.643 --> 00:09:21.545
Where is that event coming from?

126
00:09:21.545 --> 00:09:24.393
And the answer is it's coming from us,
we added it ourselves.

127
00:09:24.393 --> 00:09:27.303
In inner.svelte, when we call dispatch,

128
00:09:27.303 --> 00:09:31.712
the name of the event that we
pass into the dispatch function

129
00:09:31.712 --> 00:09:36.661
that is the name of the event that
gets emitted from the component.

130
00:09:36.661 --> 00:09:42.310
And so anything that includes
inner.svelte can listen for

131
00:09:42.310 --> 00:09:47.028
those events or forward
them rather by adding that.

132
00:09:47.028 --> 00:09:52.053
And that will now cause the outer
component to emit a message

133
00:09:52.053 --> 00:09:57.494
event that the app can listen to
with its own on message handler.

134
00:09:57.494 --> 00:09:59.155
&gt;&gt; So like a pop sound?

135
00:09:59.155 --> 00:10:00.676
&gt;&gt; Yeah,
you can think of it that way, yeah.

