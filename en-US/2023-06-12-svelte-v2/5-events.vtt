WEBVTT

1
00:00:00.000 --> 00:00:04.716
Now we're gonna move on to some of
the fun stuff that makes Svelte really

2
00:00:04.716 --> 00:00:05.979
enjoyable to use.

3
00:00:05.979 --> 00:00:09.675
The heart of Svelte is a powerful
system of reactivity for

4
00:00:09.675 --> 00:00:13.149
keeping the DOM in sync with
your application state.

5
00:00:13.149 --> 00:00:16.405
So when the user interacts in your
application, the state will change.

6
00:00:16.405 --> 00:00:21.466
We want the view of that
state to change in response.

7
00:00:21.466 --> 00:00:25.190
So we haven't learned about event
handlers just yet, but we will soon.

8
00:00:25.190 --> 00:00:29.976
For now, I just want you to
add the on:click= {increment}

9
00:00:29.976 --> 00:00:32.744
code to the button in App.svelte.

10
00:00:36.547 --> 00:00:40.499
And what that's telling us is
that when we click this button,

11
00:00:40.499 --> 00:00:43.007
it will call this increment function.

12
00:00:43.007 --> 00:00:45.390
But we haven't done anything inside
the increment function yet, so

13
00:00:45.390 --> 00:00:46.219
we need to wire that up.

14
00:00:46.219 --> 00:00:50.291
Inside here,
we're gonna change the value of count and

15
00:00:50.291 --> 00:00:54.638
the way that we're gonna do that
is just by assigning to it.

16
00:00:54.638 --> 00:00:58.968
We're not using an API for this, we're not
using a set state or something like that,

17
00:00:58.968 --> 00:01:01.027
we're just assigning to the variable.

18
00:01:01.027 --> 00:01:05.271
And the compiler can see that and it'll
instrument your code in such a way that

19
00:01:05.271 --> 00:01:08.730
says, we need to rerender specific
parts of this component and

20
00:01:08.730 --> 00:01:10.836
it will do it as efficiently as it can.

21
00:01:10.836 --> 00:01:13.602
And so now when we click this button,

22
00:01:13.602 --> 00:01:17.540
you'll see that the number
does in fact increment.

23
00:01:17.540 --> 00:01:22.677
&gt;&gt; Someone saying they love
the new Vim key bindings.

24
00:01:22.677 --> 00:01:24.703
Question mark them equals two.

25
00:01:24.703 --> 00:01:27.016
&gt;&gt; Yeah, okay, so a little aside,

26
00:01:27.016 --> 00:01:31.242
you can use them mode in this
tutorial if you're a Vim fiend.

27
00:01:31.242 --> 00:01:37.187
All you need to do is add
vim=true in the URL bar.

28
00:01:37.187 --> 00:01:42.675
And now, when you select things in
the editor, you're in Vim mode so

29
00:01:42.675 --> 00:01:46.930
I can replace this like if I
think I could do CW clicks or

30
00:01:46.930 --> 00:01:51.586
something like that,
then I can replace the entire word.

31
00:01:51.586 --> 00:01:56.502
I don't know Vim,
if you wanna learn Vim Frontend Masters

32
00:01:56.502 --> 00:02:01.617
has a great course with the primagen,
I recommend that, but

33
00:02:01.617 --> 00:02:07.456
I'm not a Vim guy, so I'm gonna go
back to the safety of vim=false.

34
00:02:07.456 --> 00:02:11.495
It will remember your setting, you don't
need to add the query string each time.

35
00:02:14.768 --> 00:02:18.234
And now we can move on to
reactive declarations.

36
00:02:18.234 --> 00:02:22.747
Okay so we've seen that if you reference
a reactive variable like count directly in

37
00:02:22.747 --> 00:02:24.427
your markup, it will update.

38
00:02:24.427 --> 00:02:28.847
But there are oftentimes when you're
building user interfaces that you will

39
00:02:28.847 --> 00:02:31.916
have something that depends
on a reactive variable.

40
00:02:31.916 --> 00:02:37.150
So for example you might wanna track
the doubled value of count and

41
00:02:37.150 --> 00:02:42.005
in Svelte we have a concept
called reactive declarations and

42
00:02:42.005 --> 00:02:47.832
they look a little bit funny,
they look like this $: doubled = count.

43
00:02:50.823 --> 00:02:52.403
Now, there's a call out here that
says this might look a little alien.

44
00:02:52.403 --> 00:02:55.493
This is in fact valid JavaScript,

45
00:02:55.493 --> 00:03:00.505
that dollar is a syntactical
construct called a label.

46
00:03:00.505 --> 00:03:03.483
And it's something that you use
when you're using for loops and

47
00:03:03.483 --> 00:03:06.807
while loops, it allows you to break
out to a specific part of your code.

48
00:03:06.807 --> 00:03:09.416
It's not useful in most
parts of your code,

49
00:03:09.416 --> 00:03:12.526
is only useful when you're
dealing with for loops.

50
00:03:12.526 --> 00:03:16.777
And so it's kind of like a free piece of
syntax, it's just lying around without

51
00:03:16.777 --> 00:03:20.721
much to do, so on the Svelte team we
said well, why don't we co-op this?

52
00:03:20.721 --> 00:03:24.982
Why don't we use this to declare
the value that reactively updates when

53
00:03:24.982 --> 00:03:27.120
anything that depends on changes.

54
00:03:27.120 --> 00:03:31.958
So what happens is the compiler looks
at that statement, doubled = count, so

55
00:03:31.958 --> 00:03:35.572
you need to add the times too
otherwise it's not much use.

56
00:03:35.572 --> 00:03:40.008
And it sees that the value of doubled
now depends on the value of count.

57
00:03:40.008 --> 00:03:45.167
So whenever the value of count updates,
the value of doubled will also update.

58
00:03:45.167 --> 00:03:49.692
So we can now use that inside markup after

59
00:03:49.692 --> 00:03:55.149
the button will add a new element,
a paragraph,

60
00:03:55.149 --> 00:04:00.089
and we'll say count, doubled is doubled.

61
00:04:00.089 --> 00:04:01.728
Now, if you click the buttons,

62
00:04:01.728 --> 00:04:05.026
they don't want to take a wild
guess as to what's gonna happen.

63
00:04:05.026 --> 00:04:07.669
1 double is 2, 2 double is 4, and so on.

64
00:04:10.540 --> 00:04:14.818
Now you could of course just
write count times 2 here,

65
00:04:14.818 --> 00:04:20.318
because you can use arbitrary
JavaScript inside these expressions.

66
00:04:20.318 --> 00:04:25.138
But you might find there are cases where
you are using that value in multiple

67
00:04:25.138 --> 00:04:30.034
places or you need to have other things
that depend on the value of doubled and

68
00:04:30.034 --> 00:04:33.572
so reactive statements
are valuable in that context.

69
00:04:37.311 --> 00:04:44.112
And we're not just limited to
having values that date reactively.

70
00:04:44.112 --> 00:04:44.755
We can also have statements
that run reactively.

71
00:04:44.755 --> 00:04:49.076
As an example, if I console.log,

72
00:04:49.076 --> 00:04:52.537
the count is value of count.

73
00:04:55.661 --> 00:04:59.399
And if I open this in a new tab and
open the console,

74
00:04:59.399 --> 00:05:03.226
get rid of all the junk that appears,
click this and

75
00:05:03.226 --> 00:05:09.111
you'll see that it is logging the value
of count every time I click the button.

76
00:05:10.210 --> 00:05:14.384
And you can group statements
together using a JavaScript block.

77
00:05:19.461 --> 00:05:23.486
Can add some more text here,

78
00:05:23.486 --> 00:05:30.548
this will also be logged
when ever count changes.

79
00:05:30.548 --> 00:05:34.359
Right, and this now forms a group.

80
00:05:34.359 --> 00:05:37.555
Again look in the console,
clear it out, and

81
00:05:37.555 --> 00:05:42.354
it's executing the entire block
of code whenever anything that's

82
00:05:42.354 --> 00:05:46.745
referenced inside that block
of code is reactively updated.

83
00:05:47.870 --> 00:05:53.685
Okay so, you can even use the dollar
label with things like F blocks,

84
00:05:53.685 --> 00:05:59.609
you can say that if the count is
too large, say it's larger than 10.

85
00:06:02.201 --> 00:06:05.207
We'll reset it, but we'll also say.

86
00:06:09.084 --> 00:06:12.737
That the count is dangerously high.

87
00:06:12.737 --> 00:06:17.441
Now if we click this enough times,
we'll get an alert warning is,

88
00:06:17.441 --> 00:06:20.561
that we're clicking the button too often.

89
00:06:23.745 --> 00:06:27.951
So far we've been dealing with
updating simple values like numbers.

90
00:06:27.951 --> 00:06:31.996
But because Svelte's reactivity
is triggered by assignments,

91
00:06:31.996 --> 00:06:36.700
in other words the compiler is looking for
you saying count plus equals one or

92
00:06:36.700 --> 00:06:40.009
count equals zero,
using array methods like push and

93
00:06:40.009 --> 00:06:42.970
splice will not
automatically cause updates.

94
00:06:42.970 --> 00:06:47.636
So here we have an application
where clicking this button

95
00:06:47.636 --> 00:06:51.328
will cause this add number
function to run and

96
00:06:51.328 --> 00:06:56.204
we're pushing a number to
the array using numbers.push.

97
00:06:56.204 --> 00:07:00.053
Now the compiler doesn't know that it's
supposed to do anything after that,

98
00:07:00.053 --> 00:07:03.507
cuz it doesn't actually know what
numbers is, it could be anything.

99
00:07:03.507 --> 00:07:07.213
And so we need to tell
the compiler that anything that

100
00:07:07.213 --> 00:07:11.521
depends on numbers is now out of date and
needs to be updated.

101
00:07:11.521 --> 00:07:15.790
So one way to fix that would be to
add an assignment that would normally

102
00:07:15.790 --> 00:07:16.756
be redundant.

103
00:07:16.756 --> 00:07:21.434
We'll do numbers = numbers, and
now when you click the button

104
00:07:21.434 --> 00:07:26.641
the compiler knows what's supposed
to happen and it will start adding

105
00:07:26.641 --> 00:07:31.685
things that array and rendering
the markup correctly when we do so.

106
00:07:31.685 --> 00:07:33.818
Obviously that's a little bit weird,

107
00:07:33.818 --> 00:07:38.547
assigning a value to itself is not very
idiomatic, JavaScript, it's totally fine.

108
00:07:38.547 --> 00:07:41.814
But if you prefer to do something
that is more idiomatic,

109
00:07:41.814 --> 00:07:44.945
then you can use an immutable
data structure instead,

110
00:07:44.945 --> 00:07:48.573
you can copy the array and
then append a new value to it instead.

111
00:07:48.573 --> 00:07:55.521
So what that would look like is get rid
of the numbers.push, numbers = numbers,

112
00:07:55.521 --> 00:08:01.677
and we'll instead assigned to numbers
first copy using spread syntax.

113
00:08:01.677 --> 00:08:03.791
And then we'll add the value
at the end like so.

114
00:08:09.308 --> 00:08:13.341
And this works as before, the difference
is that we're now generating a whole new

115
00:08:13.341 --> 00:08:18.617
array every time we press this button Now,

116
00:08:18.617 --> 00:08:21.031
this can be good, or
bad depending on what you're trying to do.

117
00:08:21.031 --> 00:08:25.065
Working with immutable data has some
benefits, it means that you're not gonna

118
00:08:25.065 --> 00:08:29.156
run into problems where two things are
mutating the same object at the same time,

119
00:08:29.156 --> 00:08:32.188
and one of them isn't expecting
the other one to mutate it.

120
00:08:32.188 --> 00:08:36.134
And mutation is at the heart of
a lot of bugs in programming, but

121
00:08:36.134 --> 00:08:38.678
immutable objects are more expensive.

122
00:08:38.678 --> 00:08:44.082
If you're creating a new array every time,
then you're allocating more memory and

123
00:08:44.082 --> 00:08:47.810
it's not gonna be a problem in
a simple case like this, but

124
00:08:47.810 --> 00:08:52.168
copying arrays is generally going
to be slower than mutating them.

125
00:08:52.168 --> 00:08:53.239
So Svelt lets you do both,

126
00:08:53.239 --> 00:08:56.620
it lets you pick the approach that makes
sense in the context of your application.

127
00:08:56.620 --> 00:09:01.010
It's not gonna enforce that you use
immutable data like some frameworks.

128
00:09:03.969 --> 00:09:09.126
We can also assign directly
to properties of arrays and

129
00:09:09.126 --> 00:09:14.067
objects, so obj.foo += 1,
or array [i] = x.

130
00:09:14.067 --> 00:09:18.132
Those will work the same way as
assigning to the values themselves.

131
00:09:18.132 --> 00:09:22.951
So another way that we
could solve this problem,

132
00:09:22.951 --> 00:09:28.945
this is gonna mutate the array,
but also using an assignment

133
00:09:28.945 --> 00:09:33.660
is numbers.length = numbers.length + 1.

134
00:09:33.660 --> 00:09:35.097
And again, it works correctly.

