WEBVTT

1
00:00:00.000 --> 00:00:05.576
Okay, so like any other attribute,
you can specify classes with a JavaScript,

2
00:00:05.576 --> 00:00:09.523
you can specify classes on
an element using attributes.

3
00:00:09.523 --> 00:00:15.302
We could add a flipped class to the card,
like this, flipped is.

4
00:00:19.300 --> 00:00:26.001
So the class is flipped if the value of
flipped is true, otherwise it's false,

5
00:00:26.001 --> 00:00:30.914
we've got a syntax error somewhere,
okay, there we go.

6
00:00:30.914 --> 00:00:34.696
So, now if I click on this
this button inside this card,

7
00:00:34.696 --> 00:00:39.614
its gonna activate the Svelte handler and
this class is going to change.

8
00:00:43.657 --> 00:00:46.477
All the CSS is down here,
if you wanna see how this is working,

9
00:00:46.477 --> 00:00:48.115
we're just using CSS transforms.

10
00:00:51.610 --> 00:00:53.950
We can make this a little bit nicer.

11
00:00:53.950 --> 00:00:59.172
Instead of having this ternary operator

12
00:00:59.172 --> 00:01:05.778
inside our attribute,
we can use this shorthand,

13
00:01:05.778 --> 00:01:09.625
class:flipped=flipped.

14
00:01:11.073 --> 00:01:15.866
Right, this means add the flip class
when flipped is a truthy value and

15
00:01:15.866 --> 00:01:19.456
remove the flip class when
flipped is a falsy value.

16
00:01:19.456 --> 00:01:23.079
And it's particularly convenient when you
have multiple styles that are dynamic, or

17
00:01:23.079 --> 00:01:24.926
multiple classes that are dynamic rather.

18
00:01:28.941 --> 00:01:33.128
And as in other contexts,
we have a shorthand version of this,

19
00:01:33.128 --> 00:01:36.134
class:flipped=flipped is duplicative.

20
00:01:36.134 --> 00:01:40.244
We don't need to repeat the word flipped,
just get rid of that and

21
00:01:40.244 --> 00:01:42.278
everything continues to work.

22
00:01:49.406 --> 00:01:51.218
And just like with classes,

23
00:01:51.218 --> 00:01:55.000
you can put all of your styles
in an inline style attribute.

24
00:01:55.000 --> 00:02:00.464
So maybe we don't wanna use a class for
this, maybe we wanna use a style and

25
00:02:00.464 --> 00:02:06.389
we could write out style=transform and
if it's flipped, we're gonna have.

26
00:02:09.021 --> 00:02:17.947
Rotate y zero, Otherwise it's
gonna be the empty string and

27
00:02:17.947 --> 00:02:23.945
maybe we wanna have some other styles
in here, we'll specify some colors.

28
00:02:30.054 --> 00:02:36.187
Specify three colors,
make it look a little bit different.

29
00:02:43.822 --> 00:02:47.198
Right, and you can see from the difficulty
that I'm having keeping all this

30
00:02:47.198 --> 00:02:50.255
on the screen that, this is starting
to get a little bit out of hand and

31
00:02:50.255 --> 00:02:52.601
it would be nicer if we had
a better way of doing this.

32
00:02:52.601 --> 00:02:55.714
Starts to look a little bit crazy.

33
00:02:55.714 --> 00:03:00.568
We can tidy things up using the style
directive which lets us control

34
00:03:00.568 --> 00:03:02.023
one style at a time.

35
00:03:02.023 --> 00:03:06.343
So instead of having all of
this text here like that,

36
00:03:06.343 --> 00:03:12.343
we can have a style transform which is
equal to the value of that ternary.

37
00:03:14.966 --> 00:03:22.333
We can have a style bg-1,
which is equal to pale goldenrod.

38
00:03:24.871 --> 00:03:26.828
I'm having some difficulty with
the editor here, bear with me.

39
00:03:56.474 --> 00:04:00.764
So you can see how when you have multiple
styles, using the style directive is

40
00:04:00.764 --> 00:04:04.726
a little bit nicer than putting
everything in one single style string.

41
00:04:09.714 --> 00:04:15.005
Now often you will need to influence
the styles inside a child component,

42
00:04:15.005 --> 00:04:18.946
plus wanna make these boxes here red,
green and blue.

43
00:04:18.946 --> 00:04:23.120
One way that you can do this is with
the global CSS modifier, which is sort of

44
00:04:23.120 --> 00:04:27.511
an escape hatch when you're writing
styles that are scoped to the component.

45
00:04:27.511 --> 00:04:32.204
Inside our app.spelt,
we could have a style tag, and

46
00:04:32.204 --> 00:04:36.603
we could target each of
these boxes individually.

47
00:04:36.603 --> 00:04:40.639
So we could use global,
and then inside that,

48
00:04:40.639 --> 00:04:46.021
we're gonna target the nth child one,
give that a background

49
00:04:46.021 --> 00:04:51.113
color of red and we can do
the same thing for all the others.

50
00:04:51.113 --> 00:04:56.523
For there's lots of reasons
why we shouldn't do that.

51
00:04:56.523 --> 00:05:00.249
For one thing, as you can see,
it is a lot of code to write,

52
00:05:00.249 --> 00:05:04.681
it's not fun code to write, for
another is kind of brittle, right?

53
00:05:04.681 --> 00:05:08.685
At the moment this box component just has
a div element with a class of box, but

54
00:05:08.685 --> 00:05:11.532
that's really just private
implementation detail.

55
00:05:11.532 --> 00:05:15.566
It's not something that you can rely
on as a user of that component.

56
00:05:15.566 --> 00:05:19.210
If we were to change the structure of
this and implement it in a different way,

57
00:05:19.210 --> 00:05:21.523
then our selectors in
app.svelte could break.

58
00:05:21.523 --> 00:05:25.650
So in general, I don't recommend
controlling styles that way.

59
00:05:25.650 --> 00:05:31.330
Finally, it's a little bit rude to
control the contents of a component.

60
00:05:31.330 --> 00:05:34.300
Components should be able to decide for
themselves,

61
00:05:34.300 --> 00:05:36.808
which files can be
controlled from outside,

62
00:05:36.808 --> 00:05:40.715
in the same way that they decide
which variables are exposed as props.

63
00:05:40.715 --> 00:05:45.521
And so global is something that you
should reach for as a last resort.

64
00:05:45.521 --> 00:05:48.334
Instead we can use CSS
custom properties for this.

65
00:05:48.334 --> 00:05:51.343
This is a way that a component can say,

66
00:05:51.343 --> 00:05:55.582
this is a value that is allowed
to be set from outside.

67
00:05:55.582 --> 00:05:57.145
So inside box.spelt,

68
00:05:57.145 --> 00:06:02.390
this background down here we're gonna
change that to be a CSS custom property.

69
00:06:05.084 --> 00:06:08.255
We'll call it color, could be anything and

70
00:06:08.255 --> 00:06:12.893
we'll give a default value of ddd,
which is what we had before.

71
00:06:12.893 --> 00:06:21.516
And now any parent element that uses
this component can set a value of color.

72
00:06:21.516 --> 00:06:25.542
So we could, for example, do it here,

73
00:06:25.542 --> 00:06:29.324
style equals boxes purple, sorry,

74
00:06:29.324 --> 00:06:34.216
color purple and
that will set a default value.

75
00:06:34.216 --> 00:06:38.061
But another thing that we can do is
set the color property directly on

76
00:06:38.061 --> 00:06:39.015
the component.

77
00:06:41.447 --> 00:06:43.735
Right, so
we can now get rid of our inline styles.

78
00:06:52.243 --> 00:06:56.564
All right, so you can think of this
as passing styles to the component,

79
00:06:56.564 --> 00:06:59.817
the same way that you would
pass props to a component.

80
00:06:59.817 --> 00:07:02.940
Implementation wise,
the way that this works is we wrapped

81
00:07:02.940 --> 00:07:05.938
each of those components in
a div with display contents,

82
00:07:05.938 --> 00:07:09.201
which means that it doesn't
affect the structure of the DOM.

83
00:07:09.201 --> 00:07:13.888
But it allows us to place those
values in the DOM in such a way that

84
00:07:13.888 --> 00:07:18.769
those CSS custom properties will
be inherited by child content.

85
00:07:18.769 --> 00:07:23.250
These values can be dynamic, here,
we're using static strings, but

86
00:07:23.250 --> 00:07:25.802
it could be some local variable as well.

87
00:07:25.802 --> 00:07:30.840
And it's really a very flexible way to
control the styles inside components.

88
00:07:30.840 --> 00:07:34.478
Any questions on classes and styles?

89
00:07:34.478 --> 00:07:36.309
Mark.

90
00:07:36.309 --> 00:07:39.821
&gt;&gt; When you add a class,
can you add multiple classes?

91
00:07:39.821 --> 00:07:44.112
&gt;&gt; You absolutely can, you can add as
many classes as you like to a component.

92
00:07:44.112 --> 00:07:49.208
So here we could do class foo=1,

93
00:07:49.208 --> 00:07:56.415
class bar= 2 and
similarly with these values,

94
00:07:56.415 --> 00:08:02.564
say we had, I don't know, border 3px,

95
00:08:02.564 --> 00:08:07.343
solid var --border, right?

96
00:08:07.343 --> 00:08:12.233
We could add border=yellow,

97
00:08:12.233 --> 00:08:15.810
and things like that.

98
00:08:15.810 --> 00:08:18.985
So, yeah,
you can add as many of these as you want.

99
00:08:18.985 --> 00:08:25.518
&gt;&gt; Well, with the class directive though,
could you add more than one class?

100
00:08:25.518 --> 00:08:27.299
&gt;&gt; Yeah.
&gt;&gt; Or do you need several classes?

101
00:08:27.299 --> 00:08:29.994
&gt;&gt; So, you would have one
directive per class, but

102
00:08:29.994 --> 00:08:32.904
you can have as many of those
directives as you like.

103
00:08:35.293 --> 00:08:39.392
&gt;&gt; Okay, so you can't set multiple
classes with one directive.

104
00:08:39.392 --> 00:08:44.190
&gt;&gt; No, sorry, if they're all
controlled by the same value, then no,

105
00:08:44.190 --> 00:08:48.016
you would need separate directives for
each of those.

106
00:08:50.921 --> 00:08:54.631
&gt;&gt; Question back to the bind
element instead of query selector.

107
00:08:54.631 --> 00:08:58.128
What if I needed to bind more than
one element with something like query

108
00:08:58.128 --> 00:08:58.909
selector all?

109
00:08:58.909 --> 00:09:04.212
&gt;&gt; That's a great question,
you can bind to a whole bunch of elements.

110
00:09:04.212 --> 00:09:10.050
Let me see if I can
demonstrate that real quick.

111
00:09:10.050 --> 00:09:11.229
So.

112
00:09:13.907 --> 00:09:20.605
Let divs = that, and then each,

113
00:09:20.605 --> 00:09:28.029
I'm pretty sure this will work.

114
00:09:28.029 --> 00:09:32.775
And then let's add an onMount so
that we can actually make this observable.

115
00:09:36.470 --> 00:09:39.243
You're really putting me on the spot here,
whoever asked that question.

116
00:09:44.099 --> 00:09:49.892
For cons div of divs div.text

117
00:09:49.892 --> 00:09:54.996
content equals it works.

118
00:09:54.996 --> 00:09:58.644
Okay, so yes,
you can bind to elements inside arrays and

119
00:09:58.644 --> 00:10:03.129
that's how you would do the equivalent
of document query selector all

120
00:10:07.146 --> 00:10:12.043
Did you hear my comment when I said
Tailwind users are crying right now

121
00:10:12.043 --> 00:10:15.175
because they have lots and
lots of classes?

122
00:10:15.175 --> 00:10:15.852
&gt;&gt; Yeah.

123
00:10:15.852 --> 00:10:16.973
&gt;&gt; Yeah.

124
00:10:16.973 --> 00:10:17.597
&gt;&gt; Yeah.

125
00:10:17.597 --> 00:10:20.513
Well, Tailwind makes me cry.

126
00:10:20.513 --> 00:10:25.238
&gt;&gt; Woo, I take over now.

127
00:10:25.238 --> 00:10:30.226
Ended up using the ternary operator
instead of the class directive for

128
00:10:30.226 --> 00:10:31.585
this very reason.

129
00:10:31.585 --> 00:10:34.680
&gt;&gt; Yeah which is a totally
valid thing to do.

