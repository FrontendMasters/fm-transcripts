WEBVTT

1
00:00:00.000 --> 00:00:02.637
Let's talk about key blocks.

2
00:00:02.637 --> 00:00:07.140
So ordinarily elements
are just there in the DOM and

3
00:00:07.140 --> 00:00:11.958
if you change the value inside them,
you're not gonna

4
00:00:11.958 --> 00:00:16.687
play transitions,
which might not be what you want.

5
00:00:16.687 --> 00:00:21.062
So here we have a typewriter transition
that we want to run on the text as

6
00:00:21.062 --> 00:00:24.101
the text changes every
time we get a new message,

7
00:00:24.101 --> 00:00:26.414
we want the typewriter to play it in.

8
00:00:26.414 --> 00:00:30.917
And in order to do that, we need to
remove the element from the DOM and

9
00:00:30.917 --> 00:00:35.432
then put a new one in and we do that
with something called a key block.

10
00:00:35.432 --> 00:00:39.396
Key will take some value, and
whenever that value changes,

11
00:00:39.396 --> 00:00:43.372
the contents of the key block
will be replaced all together.

12
00:00:43.372 --> 00:00:46.128
So let's just put that around
this paragraph element here.

13
00:00:53.919 --> 00:00:59.747
You'll now see that when that I
value changes on an interval,

14
00:00:59.747 --> 00:01:04.343
we're getting rid of
the existing paragraph and

15
00:01:04.343 --> 00:01:10.752
we're creating a new paragraph
with a new typewriter transition.

16
00:01:10.752 --> 00:01:14.722
Finally, a particularly powerful aspect of

17
00:01:14.722 --> 00:01:19.422
Svelte's transitions is
the ability to defer them so

18
00:01:19.422 --> 00:01:23.400
that they can in effect,
talk to each other.

19
00:01:23.400 --> 00:01:27.132
Here we have a pair to-do lists,
we have a list of to-dos that have yet

20
00:01:27.132 --> 00:01:30.257
to be done and we have a list
of to-dos that have been done.

21
00:01:30.257 --> 00:01:34.256
And if I toggle one of these items,
then it will just

22
00:01:34.256 --> 00:01:39.094
move to the other list because
that's how we've set this up.

23
00:01:39.094 --> 00:01:43.921
Inside our app,
we have a to-do list, which is done

24
00:01:43.921 --> 00:01:48.861
equals false and
to-do this with done equals true and

25
00:01:48.861 --> 00:01:53.910
the to-dos themselves are in
this store that we have,

26
00:01:53.910 --> 00:01:57.230
which is coming from to-dos.js.

27
00:01:57.230 --> 00:01:59.668
And in the real world,
things don't behave that way,

28
00:01:59.668 --> 00:02:03.326
things don't disappear from one place and
reappear in another in the real world,

29
00:02:03.326 --> 00:02:05.145
things move from one place to the other.

30
00:02:05.145 --> 00:02:09.173
And it's nice if we can get
a little bit of that real world

31
00:02:09.173 --> 00:02:14.064
physics-ness in our user interfaces
because using motion can help

32
00:02:14.064 --> 00:02:18.374
users understand what's
actually happening in your app.

33
00:02:18.374 --> 00:02:23.315
And we can achieve this in Svelte using
something called the crossfade transition.

34
00:02:23.315 --> 00:02:28.297
If we open the transition.js module
you'll see that we're importing crossfade

35
00:02:28.297 --> 00:02:33.224
from Svelte transition the same place that
we got fade and fly and slide and so on.

36
00:02:33.224 --> 00:02:38.583
And we're also importing an easing
function and we're creating a pair

37
00:02:38.583 --> 00:02:44.579
of transitions called send and receive,
by calling this crossfade function.

38
00:02:44.579 --> 00:02:49.383
We're also specifying a fallback
which could be anything,

39
00:02:49.383 --> 00:02:54.762
it could be a transition that you
imported from Svelte transition.

40
00:02:54.762 --> 00:02:59.566
And then inside the to-do list Svelte,
we can use those send and receive

41
00:02:59.566 --> 00:03:05.103
transmissions to control what happens when
those elements are added and removed.

42
00:03:05.103 --> 00:03:08.136
We're gonna begin by importing
them from that module.

43
00:03:16.739 --> 00:03:22.304
And then down here inside the to-do list,

44
00:03:22.304 --> 00:03:29.427
we'll add the in and
out transitions on the list item.

45
00:03:29.427 --> 00:03:36.488
So when an element enters the DOM,
we're gonna receive the element and

46
00:03:36.488 --> 00:03:42.975
we're gonna give it a key,
which is the unique idea that to-do.

47
00:03:42.975 --> 00:03:47.663
And similarly, when it leaves them,

48
00:03:47.663 --> 00:03:53.386
we're gonna send it to
the other to-do list.

49
00:03:53.386 --> 00:03:57.436
And so now when we toggle these values,

50
00:03:57.436 --> 00:04:02.115
it actually moves from
one list to the other.

51
00:04:02.115 --> 00:04:06.836
The reason that we're creating send and
receive in this separate module over here,

52
00:04:06.836 --> 00:04:11.638
instead of doing it inside the to-do list
itself is because we have two to-do lists.

53
00:04:11.638 --> 00:04:15.592
And so if we created the send and
receive functions inside the to-do list,

54
00:04:15.592 --> 00:04:19.255
then send and receive would only be
able to talk within a to-do list.

55
00:04:19.255 --> 00:04:23.095
But because they're in
this external module,

56
00:04:23.095 --> 00:04:28.855
the two components can coordinate
their transitions with each other,

57
00:04:28.855 --> 00:04:34.337
based on the key that we pass in when
the element is added or removed.

58
00:04:34.337 --> 00:04:38.440
Now if you're paying close attention to
happenings in the web development world,

59
00:04:38.440 --> 00:04:42.364
you'll know that there is in fact a view
transition API coming to the platform,

60
00:04:42.364 --> 00:04:44.198
it's available in Chrome already.

61
00:04:44.198 --> 00:04:47.865
Other browsers,
hopefully we'll add it soon, and so

62
00:04:47.865 --> 00:04:51.466
eventually you might be able
to do this just with CSS.

63
00:04:51.466 --> 00:04:57.653
But for right now, I recommend using
something inside Svelte because this way

64
00:04:57.653 --> 00:05:03.947
you'll get a consistent user experience
whatever browser your user is using.

65
00:05:03.947 --> 00:05:08.958
Okay, so just now we're using transitions
to move things from one side to the other,

66
00:05:08.958 --> 00:05:09.944
that's great.

67
00:05:09.944 --> 00:05:14.793
Except that I don't really like this
popping effect that when I move that

68
00:05:14.793 --> 00:05:18.689
first to-do, the other ones
just kind of pop into place,

69
00:05:18.689 --> 00:05:23.168
which is the exact opposite of
what we're trying to achieve here.

70
00:05:23.168 --> 00:05:28.189
So we need to apply motion to the elements
that are not transitioning in and out

71
00:05:28.189 --> 00:05:33.687
of the DOM, the elements that are staying
in the same list but are moving positions.

72
00:05:33.687 --> 00:05:39.573
And so for this we can use something
called the animate directive.

73
00:05:39.573 --> 00:05:45.339
When you animate with a flip
function we stands for

74
00:05:45.339 --> 00:05:48.497
first-last invert play,

75
00:05:48.497 --> 00:05:53.850
which is a technique that
allows us to do smooth

76
00:05:53.850 --> 00:05:58.536
motion entirely with CSS transitions.

77
00:05:58.536 --> 00:06:02.896
And once we've imported that,
we can add it to the list item where

78
00:06:02.896 --> 00:06:07.672
we previously added the transitions,
just like this animate, flip.

79
00:06:07.672 --> 00:06:13.205
And now when we toggle these values,

80
00:06:13.205 --> 00:06:17.139
the list moves smoothly.

81
00:06:17.139 --> 00:06:24.337
It's a little bit too slow though
it's not a very satisfying effect,

82
00:06:24.337 --> 00:06:31.176
so we'll customize that with
a duration of 200 milliseconds.

83
00:06:31.176 --> 00:06:36.156
Now one thing that you will wanna be
conscious of when you're using this in

84
00:06:36.156 --> 00:06:41.213
your own apps, is that some users prefer
not to have motion in their apps and

85
00:06:41.213 --> 00:06:44.616
so we can add a preferred
reduced motion setting.

86
00:06:44.616 --> 00:06:49.751
That sets the duration to 0.

87
00:06:49.751 --> 00:06:52.093
You can also pass a function for
the duration so

88
00:06:52.093 --> 00:06:56.120
the the actual number of milliseconds will
be determined by the number of pixels

89
00:06:56.120 --> 00:06:57.636
that the element has to move.

90
00:06:57.636 --> 00:07:01.357
If that's more in line with the effect
that you're trying to achieve.

