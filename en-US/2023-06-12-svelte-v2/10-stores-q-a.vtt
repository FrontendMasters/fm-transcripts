WEBVTT

1
00:00:00.410 --> 00:00:03.600
What if I fetch data
directly in readable store?

2
00:00:03.600 --> 00:00:10.280
Is it good or better to fetch and
parse data in store in component?

3
00:00:11.640 --> 00:00:14.500
&gt;&gt; You can totally fetch data
inside a readable store.

4
00:00:15.600 --> 00:00:20.725
So for example, if you're polling for
some data, then doing that

5
00:00:20.725 --> 00:00:26.593
polling logic inside the readable store
callback is a really good pattern.

6
00:00:26.593 --> 00:00:29.680
That's something that I've
used a lot in my own apps, and

7
00:00:29.680 --> 00:00:31.620
it's something that I recommend.

8
00:00:31.620 --> 00:00:35.892
Just remember to stop polling
once the unsubscribe happens.

9
00:00:38.533 --> 00:00:43.860
&gt;&gt; Is there a recommended way to persist
Svelte store data upon page refresh?

10
00:00:43.860 --> 00:00:48.416
There are packages that intertwine Svelte
stores with browser storage, but I was

11
00:00:48.416 --> 00:00:52.920
wondering if there is a reason there is no
native way to persist stores in Svelte.

12
00:00:54.040 --> 00:00:57.445
&gt;&gt; We're trying to be as opinionated
as possible about the way that you

13
00:00:57.445 --> 00:00:58.110
use stores.

14
00:00:59.180 --> 00:01:03.687
Things like local storage are pretty easy
to implement with your own logic, but

15
00:01:03.687 --> 00:01:05.690
there also exist packages.

16
00:01:05.690 --> 00:01:10.258
And, there are opinions that people might
have about exactly what you do with those

17
00:01:10.258 --> 00:01:11.200
stores.

18
00:01:11.200 --> 00:01:13.613
So we don't wanna get too heavy handed and
saying,

19
00:01:13.613 --> 00:01:16.770
this is the correct way to
implement some of this stuff.

20
00:01:16.770 --> 00:01:21.284
The more that we can allow you to build
your own abstractions on top of stores,

21
00:01:21.284 --> 00:01:24.260
the more flexible they'll end up being.

22
00:01:24.260 --> 00:01:28.291
And so yes, as the question said,
you can install a package, I think there's

23
00:01:28.291 --> 00:01:31.850
a package called Svelte Local Storage
Store or something like that.

24
00:01:31.850 --> 00:01:35.140
I'm actually using that myself right now.

25
00:01:35.140 --> 00:01:39.740
And there's a whole bunch of other
abstractions that people have built on top

26
00:01:39.740 --> 00:01:42.782
of stores that we wouldn't
have thought of, and so

27
00:01:42.782 --> 00:01:46.690
we don't include them in
the Svelte package itself.

28
00:01:46.690 --> 00:01:50.510
&gt;&gt; How does store
differentiate from Redux?

29
00:01:50.510 --> 00:01:54.910
&gt;&gt; They both use the word store,
but they're very different beasts.

30
00:01:54.910 --> 00:01:58.806
A Redux store is kinda like a application
level God object typically,

31
00:01:58.806 --> 00:02:01.840
the define state for
your entire application.

32
00:02:01.840 --> 00:02:06.668
Whereas a Svelete store is just an atomic
piece of state that you can create inside

33
00:02:06.668 --> 00:02:07.520
a component.

34
00:02:07.520 --> 00:02:11.480
You can create an application wide module,
it doesn't really matter.

35
00:02:12.790 --> 00:02:17.536
So instead of having lots of different
pieces of state inside a Svelte store,

36
00:02:17.536 --> 00:02:20.457
you typically have one thing,
like a count, or

37
00:02:20.457 --> 00:02:24.780
the current value of some fetch operation,
or something like that.

38
00:02:24.780 --> 00:02:29.770
Whereas your Redux store
includes the kitchen sink, yes?

39
00:02:29.770 --> 00:02:32.989
&gt;&gt; Would it be more fair to
compare it to a Cot React context?

40
00:02:34.120 --> 00:02:39.130
&gt;&gt; No, and so
Svelte t also has a concept of context.

41
00:02:39.130 --> 00:02:43.010
I don't think there really is
a React equivalent directly.

42
00:02:43.010 --> 00:02:46.770
There are some libraries in React like,

43
00:02:46.770 --> 00:02:50.978
what's the one that I'm
trying to think of?

44
00:02:50.978 --> 00:02:53.159
&gt;&gt; Someone was saying Zustand.

45
00:02:53.159 --> 00:02:58.258
&gt;&gt; Yeah, I think Zustand is a similar
thing, although I think that might

46
00:02:58.258 --> 00:03:03.980
even be doing some funky stuff to break
out of the React scheduling lifecycle.

47
00:03:03.980 --> 00:03:08.090
If I recall, there's Recoil,
that's what I'm thinking of.

48
00:03:08.090 --> 00:03:11.691
I think Svelte stores are probably
most similar to Recoil from the React

49
00:03:11.691 --> 00:03:12.360
ecosystem.

50
00:03:13.480 --> 00:03:16.835
But yeah,
we will be talking about context later on,

51
00:03:16.835 --> 00:03:19.905
that is something that we
have in Svelte as well.

52
00:03:19.905 --> 00:03:23.584
&gt;&gt; Have you ever found it useful to
have kind of a God derived store with

53
00:03:23.584 --> 00:03:27.560
everything, or
do you like to keep it all atomic stores?

54
00:03:27.560 --> 00:03:29.859
&gt;&gt; I've never personally found a use for
it.

55
00:03:29.859 --> 00:03:33.364
Admittedly, I haven't used Redux in anger.

56
00:03:33.364 --> 00:03:35.146
I mean, I've got angry with Redux, but

57
00:03:35.146 --> 00:03:37.360
I have never used it to
actually build something.

58
00:03:38.440 --> 00:03:41.529
So, I probably not
the right person to ask,

59
00:03:41.529 --> 00:03:46.804
I don't have a good sense of why you
would want to have something like that.

60
00:03:46.804 --> 00:03:50.927
For me it just makes more sense
to have the state itself be

61
00:03:50.927 --> 00:03:54.540
represented like a tangible
first class thing.

62
00:03:54.540 --> 00:03:56.360
&gt;&gt; There's one more question here.

63
00:03:57.550 --> 00:04:02.614
Reactive statements seem like the closest
thing to React use effect, but

64
00:04:02.614 --> 00:04:08.530
there doesn't seem to be any way to clean
up function in Svelte, is that true?

65
00:04:08.530 --> 00:04:10.664
Is there any thoughts
about adding support for

66
00:04:10.664 --> 00:04:13.730
cleanup functions in a reactive statement?

67
00:04:13.730 --> 00:04:16.180
&gt;&gt; So that's why you would use stores,

68
00:04:16.180 --> 00:04:19.350
stores give you that
state-level life cycle.

69
00:04:20.680 --> 00:04:24.927
And they're not bound to the component
hierarchy in the same way that that use

70
00:04:24.927 --> 00:04:26.350
effects are.

71
00:04:26.350 --> 00:04:31.332
So you can declare that logic
wherever it needs to go and

72
00:04:31.332 --> 00:04:35.100
use it inside your components.

73
00:04:35.100 --> 00:04:38.909
Reactive statements, they are similar
to use effects and that you can log

74
00:04:38.909 --> 00:04:43.460
the current value of something in the same
way that you would use use effect for.

75
00:04:43.460 --> 00:04:46.842
But they're also a little
bit like useMemo,

76
00:04:46.842 --> 00:04:51.740
it will memorize values, so
it's sort of a combination of both.

77
00:04:51.740 --> 00:04:55.440
But if you're doing something
that does require cleanup,

78
00:04:55.440 --> 00:04:59.214
that is when you would use life
cycle functions if it's bound

79
00:04:59.214 --> 00:05:04.810
to the component life cycle, and
stores if it's bound to the state itself.

80
00:05:04.810 --> 00:05:09.930
&gt;&gt; Can you give a couple production
examples of stores in use?

81
00:05:09.930 --> 00:05:15.570
&gt;&gt; Production examples of stores in use,
well this app here is full of stores.

82
00:05:17.810 --> 00:05:23.848
We have stores representing which
file is currently selected,

83
00:05:23.848 --> 00:05:27.761
whether the application is complete, or

84
00:05:27.761 --> 00:05:33.230
is it solved or unsolved state,
stores everywhere.

85
00:05:33.230 --> 00:05:38.121
I don't know how everyone else is using
stores in their production apps, but

86
00:05:38.121 --> 00:05:41.582
that's a great question to
ask in the Svelte discord,

87
00:05:41.582 --> 00:05:43.480
how are people using stores?

88
00:05:43.480 --> 00:05:46.875
You'll get a ton of answers from people
who are using them in production apps and

89
00:05:46.875 --> 00:05:48.860
they'll talk about how they're doing that.

90
00:05:48.860 --> 00:05:54.224
But yeah, t any place that you have state
that doesn't belong to a single component,

91
00:05:54.224 --> 00:05:56.549
stores are a great way to express it.

