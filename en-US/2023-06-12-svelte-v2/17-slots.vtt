WEBVTT

1
00:00:00.000 --> 00:00:05.516
Okay, so like any other attribute,
you can specify classes with a JavaScript.

2
00:00:05.516 --> 00:00:09.454
You can specify classes on
an element using attributes.

3
00:00:09.454 --> 00:00:15.673
We could add a flipped class
to the card like this,

4
00:00:15.673 --> 00:00:21.597
flipped is, so
the class is flipped if the value

5
00:00:21.597 --> 00:00:27.241
of flipped is true, otherwise it's false.

6
00:00:27.241 --> 00:00:29.891
We've got a syntax error somewhere,
okay, there we go.

7
00:00:29.891 --> 00:00:33.719
And so now if I click on this
button inside this card,

8
00:00:33.719 --> 00:00:39.208
it's gonna activate this event handler and
this class is going to change.

9
00:00:43.980 --> 00:00:44.806
All the CSS is down here.

10
00:00:44.806 --> 00:00:47.854
If you wanna see how this is working,
we're just using CSS transforms.

11
00:00:51.581 --> 00:00:53.925
But we can make this a little bit nicer.

12
00:00:53.925 --> 00:00:59.331
Instead of having this ternary operator

13
00:00:59.331 --> 00:01:06.168
inside our attribute,
we can use this shorthand,

14
00:01:06.168 --> 00:01:11.590
class:flipped = {flipped}.

15
00:01:11.590 --> 00:01:16.091
Right, this means add the flipped class
when flipped is a truthy value, and

16
00:01:16.091 --> 00:01:19.411
remove the flipped class when
flipped is a falsy value.

17
00:01:19.411 --> 00:01:22.711
And it's particularly convenient when you
have multiple styles that are dynamic, or

18
00:01:22.711 --> 00:01:24.396
multiple classes that are dynamic rather.

19
00:01:28.891 --> 00:01:33.847
And as in other contexts,
we have a shorthand version of this.

20
00:01:33.847 --> 00:01:38.841
class:flipped = {flipped} is duplicative,
we don't need to repeat the word flipped.

21
00:01:38.841 --> 00:01:41.890
I'll just get rid of that, and
everything continues to work.

22
00:01:49.417 --> 00:01:54.687
Just like with classes, you can put all of
your styles in an inline style attribute.

23
00:01:54.687 --> 00:01:59.160
So maybe we don't wanna use a class for
this,

24
00:01:59.160 --> 00:02:05.893
maybe we wanna use a style and
we could write out style=transform.

25
00:02:05.893 --> 00:02:11.615
And if it's flipped,
we're gonna have, rotateY(0),

26
00:02:14.408 --> 00:02:18.114
Otherwise it's gonna be the empty string.

27
00:02:18.114 --> 00:02:24.014
And maybe we wanna have some other styles
in here, we'll specify some colors.

28
00:02:30.060 --> 00:02:35.329
Specify three colors,
make it look a little bit different.

29
00:02:43.863 --> 00:02:47.327
Right, and you can see from the difficulty
that I'm having keeping all this on

30
00:02:47.327 --> 00:02:50.265
the screen that this is starting to
get a little bit out of hand, and

31
00:02:50.265 --> 00:02:52.600
it would be nicer if we had
a better way of doing this.

32
00:02:52.600 --> 00:02:55.643
Starts to look a little bit crazy.

33
00:02:55.643 --> 00:02:59.971
Or we can tidy things up using
the style directive which lets us

34
00:02:59.971 --> 00:03:01.980
control one style at a time.

35
00:03:01.980 --> 00:03:06.148
So instead of having all of
this text here like that,

36
00:03:06.148 --> 00:03:11.949
we can have a style transform which is
equal to the value of that ternary.

37
00:03:15.081 --> 00:03:20.717
We can have a style:--big-1,
which is equal to alegoldenrod.

38
00:03:24.978 --> 00:03:29.139
I'm having some difficulty with
the editor here, bear with me.

39
00:03:56.503 --> 00:04:00.485
So you can see how when you have multiple
styles, using the style directive is

40
00:04:00.485 --> 00:04:04.171
a little bit nicer than putting
everything in one single style string.

41
00:04:09.731 --> 00:04:15.250
Now often you will need to influence
the styles inside a child component.

42
00:04:15.250 --> 00:04:18.824
Press wanna make these boxes here red,
green, and blue.

43
00:04:18.824 --> 00:04:22.955
One way that you can do this is with
the global CSS modifier, which is sort

44
00:04:22.955 --> 00:04:27.591
of an escape hatch when you're writing
styles that are scoped to the component.

45
00:04:27.591 --> 00:04:32.272
Inside our app.svelte,
we could have a style tag, and

46
00:04:32.272 --> 00:04:36.562
we could target each of
these boxes individually.

47
00:04:36.562 --> 00:04:41.226
So we could use global,
and then inside that,

48
00:04:41.226 --> 00:04:45.778
we're gonna target the nth-child(1).

49
00:04:45.778 --> 00:04:49.164
Give that a background color of red, and

50
00:04:49.164 --> 00:04:52.758
we can do the same thing for
all the others.

51
00:04:52.758 --> 00:04:56.506
Right, but there's lots of
reasons why we shouldn't do that.

52
00:04:56.506 --> 00:04:59.894
For one thing, as you can see,
it is a lot of code to write.

53
00:04:59.894 --> 00:05:02.483
It's not fun code to write.

54
00:05:02.483 --> 00:05:04.784
But for another,
it's kind of brittle, right?

55
00:05:04.784 --> 00:05:08.921
At the moment this box component just
has a div element with a class of box.

56
00:05:08.921 --> 00:05:11.561
But that's really just private
implementation detail.

57
00:05:11.561 --> 00:05:15.547
It's not something that you can rely
on as a user of that component.

58
00:05:15.547 --> 00:05:19.060
If we were to change the structure of
this and implement it in a different way,

59
00:05:19.060 --> 00:05:21.284
then our selectors in
App.svelte could break.

60
00:05:21.284 --> 00:05:25.476
So in general, I don't recommend
controlling styles that way.

61
00:05:25.476 --> 00:05:31.363
But finally, it's a little bit rude to
control the contents of a component.

62
00:05:31.363 --> 00:05:33.496
Components should be able to decide for

63
00:05:33.496 --> 00:05:37.826
themselves which styles can be controlled
from outside in the same way that they

64
00:05:37.826 --> 00:05:40.362
decide which variables
are exposed as props.

65
00:05:40.362 --> 00:05:43.060
And so global is something that you
should reach for as a last resort.

66
00:05:45.519 --> 00:05:48.282
Instead, we can use CSS
custom properties with this.

67
00:05:48.282 --> 00:05:50.395
This is a way that a component can say,

68
00:05:50.395 --> 00:05:53.380
this is a value that is allowed
to be set from outside.

69
00:05:55.543 --> 00:05:58.322
So inside Box.svelte,
this background down here,

70
00:05:58.322 --> 00:06:01.110
we're gonna change that to
be a CSS custom property.

71
00:06:05.160 --> 00:06:07.613
We'll call it color, could be anything.

72
00:06:07.613 --> 00:06:12.868
And we'll give it a default value of
#ddd which is what we had before.

73
00:06:12.868 --> 00:06:21.175
And now, any parent element that uses
this component can set a value of color.

74
00:06:21.175 --> 00:06:24.771
So we could for example do it here,

75
00:06:24.771 --> 00:06:31.222
style="--boxes: purple",
sorry, color: purple.

76
00:06:31.222 --> 00:06:34.194
And that will set a default value.

77
00:06:34.194 --> 00:06:37.585
But another thing that we can do is
set the color property directly on

78
00:06:37.585 --> 00:06:38.427
the component.

79
00:06:41.422 --> 00:06:43.192
Right, so
we can now get rid of our inline styles.

80
00:06:52.542 --> 00:06:57.458
Right, so you can think of this as passing
styles to the component the same way that

81
00:06:57.458 --> 00:06:59.676
you would pass props to a component.

82
00:06:59.676 --> 00:07:03.312
Implementation wise the way that
this works is we wrap each of

83
00:07:03.312 --> 00:07:06.451
those components in a div
with displayed contents,

84
00:07:06.451 --> 00:07:10.179
which means that it doesn't
affect the structure of the dom.

85
00:07:10.179 --> 00:07:13.734
But it allows us to place those
values in the dom in such

86
00:07:13.734 --> 00:07:18.717
a way that those CSS custom properties
will be inherited by child content.

87
00:07:18.717 --> 00:07:23.383
These values can be dynamic,
here we're using static strings, but

88
00:07:23.383 --> 00:07:26.125
it could be some local variable as well.

89
00:07:26.125 --> 00:07:30.870
And it's really a very flexible way to
control the styles inside components.

90
00:07:30.870 --> 00:07:34.604
Any questions on classes and styles?

91
00:07:34.604 --> 00:07:35.216
Mark.

92
00:07:35.216 --> 00:07:39.763
&gt;&gt; When you add a class,
can you add multiple classes?

93
00:07:39.763 --> 00:07:40.719
&gt;&gt; You absolutely can.

94
00:07:40.719 --> 00:07:44.015
You can add as many classes
as you like to a component.

95
00:07:44.015 --> 00:07:48.875
So here we could do class:foo =

96
00:07:48.875 --> 00:07:53.560
{1} class:bar = {2}.

97
00:07:53.560 --> 00:07:58.527
And similarly with these values here,

98
00:07:58.527 --> 00:08:01.987
say we had, I don't know,

99
00:08:01.987 --> 00:08:07.115
border 3px solid var(--border).

100
00:08:07.115 --> 00:08:15.609
Right, we could add border = "yellow" and
things like that.

101
00:08:15.609 --> 00:08:18.650
So yeah,
you can add as many of these as you want.

102
00:08:18.650 --> 00:08:25.309
&gt;&gt; Well, with the class directive though,
could you add more than one class?

103
00:08:25.309 --> 00:08:26.534
&gt;&gt; Yeah.
&gt;&gt; Or do you need several

104
00:08:26.534 --> 00:08:27.434
class directives?

105
00:08:27.434 --> 00:08:31.002
&gt;&gt; So you would have one
directive per class, but

106
00:08:31.002 --> 00:08:35.039
you can have as many of those
directives as you like.

107
00:08:35.039 --> 00:08:37.480
&gt;&gt; Okay, so you can't set multiple
classes with one directive?

108
00:08:37.480 --> 00:08:40.041
&gt;&gt; No, sorry.

109
00:08:40.041 --> 00:08:45.823
If they're all controlled
by the same value, then no.

110
00:08:45.823 --> 00:08:50.938
You would need separate directives for
each of those.

111
00:08:50.938 --> 00:08:54.526
&gt;&gt; Question back to the bind
element instead of querySelector.

112
00:08:54.526 --> 00:08:57.683
What if I needed to bind more than
one element with something like

113
00:08:57.683 --> 00:08:58.741
querySelectorAll?

114
00:08:58.741 --> 00:08:59.955
&gt;&gt; That's a great question.

115
00:08:59.955 --> 00:09:04.131
You can bind to a whole bunch of elements.

116
00:09:04.131 --> 00:09:09.628
Let me see if I can
demonstrate that real quick.

117
00:09:09.628 --> 00:09:14.931
So, let divs

118
00:09:14.931 --> 00:09:20.061
equals that and then each,

119
00:09:20.061 --> 00:09:26.314
I'm pretty sure this will work.

120
00:09:28.036 --> 00:09:32.319
And then let's add an onMount so
that we can actually make this observable.

121
00:09:36.223 --> 00:09:38.676
You're really putting me on the spot here,
whoever asked that question.

122
00:09:44.097 --> 00:09:48.092
For (cons div of divs)

123
00:09:48.092 --> 00:09:55.093
{div.textContent = 'it works'}.

124
00:09:55.093 --> 00:09:58.416
Okay, so yes, you can bind to
elements inside arrays, and

125
00:09:58.416 --> 00:10:02.610
that's how you would do the equivalent
of document.querySelectorAll.

126
00:10:07.034 --> 00:10:11.857
&gt;&gt; Did you get my comment when I
said Tailwind users are crying right

127
00:10:11.857 --> 00:10:15.082
now cuz they have lots and
lots of classes.

128
00:10:15.082 --> 00:10:15.744
&gt;&gt; Yeah.

129
00:10:15.744 --> 00:10:17.108
&gt;&gt; Yeah, so.

130
00:10:17.108 --> 00:10:19.420
&gt;&gt; Yeah, well, Tailwind makes me cry, so.

131
00:10:19.420 --> 00:10:24.602
&gt;&gt; [LAUGH] Woo, I take them in here,
and said I ended up using

132
00:10:24.602 --> 00:10:31.570
the ternary operator instead of the class
directive for this very reason.

133
00:10:31.570 --> 00:10:33.731
&gt;&gt; Yeah,
which is a totally valid thing to do.

