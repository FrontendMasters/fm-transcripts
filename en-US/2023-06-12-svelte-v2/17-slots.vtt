WEBVTT

1
00:00:00.130 --> 00:00:03.687
Okay, so
just like elements can have children,

2
00:00:03.687 --> 00:00:09.434
like an example here where a div has
a paragraph inside it certain components.

3
00:00:09.434 --> 00:00:13.497
But before a component can accept children
it needs to know where it should put them.

4
00:00:13.497 --> 00:00:17.579
And for that we use the slot element,

5
00:00:17.579 --> 00:00:23.241
inside our card.svelte we'll add a slot,
okay so

6
00:00:23.241 --> 00:00:30.625
I can now put the things inside
the card component in app.svelte.

7
00:00:42.355 --> 00:00:44.460
That was what we call a default slot.

8
00:00:44.460 --> 00:00:48.321
So anything that goes directly inside
the card component goes into the default

9
00:00:48.321 --> 00:00:49.620
slot element.

10
00:00:49.620 --> 00:00:52.854
But sometimes you need more
control over placement and for

11
00:00:52.854 --> 00:00:55.635
those cases we have
something called name slots.

12
00:00:55.635 --> 00:01:00.744
Inside the card.svelte
component we've got sorry

13
00:01:00.744 --> 00:01:05.851
inside here,
we've got a span slot = telephone and

14
00:01:05.851 --> 00:01:10.624
a span slot = company and
a span slot = address.

15
00:01:10.624 --> 00:01:14.405
We need to create corresponding slots for

16
00:01:14.405 --> 00:01:18.299
all of that content inside card.svelte.

17
00:01:18.299 --> 00:01:20.054
At the top we'll add this header element.

18
00:01:27.817 --> 00:01:30.611
Got one for the telephone,
one for the company.

19
00:01:34.790 --> 00:01:36.911
And then below the default
slot we'll add a footer.

20
00:01:43.545 --> 00:01:44.907
With a slot for the address.

21
00:01:50.096 --> 00:01:54.209
Now this card is pretty
close to what we want but

22
00:01:54.209 --> 00:02:01.063
we have in the top right the name of the
company has a small element inside it and

23
00:02:01.063 --> 00:02:05.827
the small element is
expressed in app.svelte here.

24
00:02:05.827 --> 00:02:07.642
And because that's where
the element lives,

25
00:02:07.642 --> 00:02:09.276
that's where the styles also need to go.

26
00:02:09.276 --> 00:02:14.411
Are the contents of the card
component inherit styles that

27
00:02:14.411 --> 00:02:20.174
are declared in the style tag
of card.svelte, but ultimately,

28
00:02:20.174 --> 00:02:25.545
the styles belong to the component
where the elements live.

29
00:02:25.545 --> 00:02:29.823
So if you wanna add some styles for
that small element,

30
00:02:29.823 --> 00:02:34.387
we're gonna need to do it in
the style tag of app.svelte.

31
00:02:34.387 --> 00:02:38.422
We wanna add a display = block so
that it falls onto its own line.

32
00:02:42.411 --> 00:02:47.369
Then we need to give it
a smaller font size and

33
00:02:47.369 --> 00:02:50.900
wanna align it to the right.

34
00:02:50.900 --> 00:02:52.137
Like so.

35
00:02:52.137 --> 00:02:57.141
Alternatively, we could have
used the global modifier and

36
00:02:57.141 --> 00:03:02.046
put the styles inside
the card.svelte to target all small

37
00:03:02.046 --> 00:03:06.963
elements inside the inside
the div with the .card class.

38
00:03:06.963 --> 00:03:11.762
It really depends on who you want
to be in control of that styling.

39
00:03:16.613 --> 00:03:23.439
Now we have two of these cards,
in one of them we have some content.

40
00:03:23.439 --> 00:03:26.629
And then in the other one we haven't yet

41
00:03:26.629 --> 00:03:31.849
specified any content and
a component can specify fallbacks for

42
00:03:31.849 --> 00:03:37.746
any slots that are left empty by just
putting it inside the slot element so

43
00:03:37.746 --> 00:03:41.725
over in card.svelte inside
the slot we can add.

44
00:03:45.392 --> 00:03:53.466
Some fallback content reminding you to
put the telephone number on the card.

45
00:03:53.466 --> 00:03:57.357
If we make that a little bit bigger,
you can see it there in the top left.

46
00:03:57.357 --> 00:04:02.508
And we'll do the same thing for
the company name.

47
00:04:13.606 --> 00:04:14.482
Do it for the default slot.

48
00:04:22.853 --> 00:04:23.740
And finally, for the address

49
00:04:33.327 --> 00:04:38.764
And then, of course, in app.svelte if
we start filling these details out,

50
00:04:38.764 --> 00:04:43.381
it will use the values that are passed
in instead of the fallback.

51
00:04:46.937 --> 00:04:49.939
Right, they don't have any question
about the component composition API's.

52
00:04:56.667 --> 00:05:01.684
Okay, so in some situations you will
need to pass data from a component

53
00:05:01.684 --> 00:05:06.022
back into the parent that is
passing in the slotted content,

54
00:05:06.022 --> 00:05:10.801
which is a little bit of a head
scratcher until you see it in action.

55
00:05:10.801 --> 00:05:15.618
So here we have a component
called FilterableList,

56
00:05:15.618 --> 00:05:20.763
which given some data,
allows us to filter the contents

57
00:05:20.763 --> 00:05:25.699
of that data based on
the field that we've provided.

58
00:05:25.699 --> 00:05:31.177
So here we have a whole bunch of
CSS named colors, this is every,

59
00:05:31.177 --> 00:05:36.366
I believe CSS named color with
its corresponding hex value.

60
00:05:36.366 --> 00:05:40.988
And we wanna be able to filter
this list like find all of

61
00:05:40.988 --> 00:05:45.624
the orange colors for
example, which almost works.

62
00:05:45.624 --> 00:05:48.864
There are three orange colors, but
they're not being rendered correctly.

63
00:05:48.864 --> 00:05:53.067
And that's because we're
not passing data from

64
00:05:53.067 --> 00:05:56.457
the FilterableList back in to the app.

65
00:05:56.457 --> 00:05:59.673
First thing we need to do is
pass the data into the slot.

66
00:05:59.673 --> 00:06:04.624
So inside our FilterableList we're

67
00:06:04.624 --> 00:06:08.937
gonna pass the item into there,

68
00:06:08.937 --> 00:06:13.098
just like any component prop.

69
00:06:13.098 --> 00:06:17.418
And then on the other
side of the equation,

70
00:06:17.418 --> 00:06:21.498
where it's being used in app.svelte,

71
00:06:21.498 --> 00:06:28.346
we need to add something called
the let binding, let:item = row.

72
00:06:28.346 --> 00:06:31.689
And what you'll find now is that all
of the data is being rendered inside

73
00:06:31.689 --> 00:06:32.758
the FilterableList.

74
00:06:32.758 --> 00:06:36.667
And if I take the word orange,
we'll see that there are in

75
00:06:36.667 --> 00:06:41.323
fact three orange colors,
DarkOrange, Orange, and OrangeRed.

76
00:06:41.323 --> 00:06:45.044
And finally up here,
we began by using Alice Blue for

77
00:06:45.044 --> 00:06:49.019
everything which is the first
row in that array of data,

78
00:06:49.019 --> 00:06:54.112
we can now get rid of that because
it's not being referenced anywhere.

79
00:06:54.112 --> 00:06:58.778
So you can do the same thing with named
slots, you put the binding on the element

80
00:06:58.778 --> 00:07:02.543
with the slot attribute as opposed
to on the component itself.

81
00:07:02.543 --> 00:07:09.954
And this allows you to compose
components in fairly complex ways.

82
00:07:09.954 --> 00:07:13.997
Finally, in some cases, you might want to
vary the contents of the component based

83
00:07:13.997 --> 00:07:16.330
on whether slotted content
has been provided.

84
00:07:18.020 --> 00:07:23.205
So for example, in app.svelte, we have
this header which is providing this

85
00:07:23.205 --> 00:07:28.385
banner at the top here if we get rid of
that, then it will no longer render, but

86
00:07:28.385 --> 00:07:33.893
we're left with this ugly double border
effect because inside FilterableList,

87
00:07:33.893 --> 00:07:38.043
we're rendering div class =
header regardless of whether or

88
00:07:38.043 --> 00:07:39.522
not it was provided.

89
00:07:39.522 --> 00:07:42.907
And we can fix that using
the special $$slots variable,

90
00:07:42.907 --> 00:07:44.990
which is available to components.

91
00:07:49.878 --> 00:07:53.453
If the header slot was provided,
then that will be true,

92
00:07:53.453 --> 00:07:57.709
if not, then it is not true and
we've got rid of that double border.

