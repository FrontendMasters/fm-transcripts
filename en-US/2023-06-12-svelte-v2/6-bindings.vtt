WEBVTT

1
00:00:00.511 --> 00:00:02.668
Does anyone have any
questions about transitions?

2
00:00:04.712 --> 00:00:06.372
Mark?

3
00:00:06.372 --> 00:00:10.502
&gt;&gt; I have noticed you have developed
route three.js wrapper for Svelte.

4
00:00:10.502 --> 00:00:15.242
My question is, where do you draw the line
when you need to use a third-party

5
00:00:15.242 --> 00:00:16.958
library to do animations?

6
00:00:16.958 --> 00:00:20.896
Obviously in three.js,
it's to get 3D animations.

7
00:00:20.896 --> 00:00:24.923
But in a scenario like
maybe wanting to use GSAP,

8
00:00:24.923 --> 00:00:31.015
does Svelte provide all the required
APIs to do animations that GSAP can or

9
00:00:31.015 --> 00:00:35.454
what's the limitation of Svelte,
just generally?

10
00:00:35.454 --> 00:00:36.870
&gt;&gt; Yeah, that's a good question.

11
00:00:36.870 --> 00:00:40.239
So Svelte doesn't have a whole
lot of animation stuff built in.

12
00:00:40.239 --> 00:00:44.410
If you're doing complex sequence of
animations, for example, then transitions

13
00:00:44.410 --> 00:00:47.940
probably aren't the tool that you
would reach for in that situation.

14
00:00:47.940 --> 00:00:52.129
And you could definitely use GSAP or
any other animation library.

15
00:00:52.129 --> 00:00:56.731
What's really hard to do with
an external library is controlling when

16
00:00:56.731 --> 00:00:59.229
elements are unmounted from the DOM.

17
00:00:59.229 --> 00:01:02.217
This is a recurring theme with frameworks.

18
00:01:02.217 --> 00:01:05.974
You wanna be able to understand
when an element is being removed so

19
00:01:05.974 --> 00:01:08.516
that you can transition it out gracefully.

20
00:01:08.516 --> 00:01:11.073
Whereas normally, what happens is
it's just taken out of the DOM.

21
00:01:11.073 --> 00:01:15.602
So it's really easy to add a CSS animation
that applies when an element is created,

22
00:01:15.602 --> 00:01:18.464
but there's no equivalent for
when it's removed.

23
00:01:18.464 --> 00:01:20.103
And so at that point,

24
00:01:20.103 --> 00:01:26.034
the framework kind of has to have its
own built-in support for that concept.

25
00:01:26.034 --> 00:01:28.000
And that's what transitions are.

26
00:01:28.000 --> 00:01:33.122
It's a way of making state
transitions happen over time in

27
00:01:33.122 --> 00:01:39.303
a way that a third-party library
just wouldn't be able to hook into.

28
00:01:39.303 --> 00:01:42.972
But beyond that, if you're changing
the opacity of an element, but

29
00:01:42.972 --> 00:01:46.199
you're not removing it from the DOM or
something like that,

30
00:01:46.199 --> 00:01:49.490
then you can go nuts with
third-party animation libraries,

31
00:01:49.490 --> 00:01:52.296
particularly if you're
doing something complex.

32
00:01:52.296 --> 00:01:56.016
And Threlte is a little
bit of a special case.

33
00:01:56.016 --> 00:02:00.645
I did not make Threlte, Threlte is
a community-driven project that I use

34
00:02:00.645 --> 00:02:04.987
myself in my own projects but
I haven't actually contributed to it.

35
00:02:04.987 --> 00:02:08.791
In Threlte, you're not dealing
with DOM elements at all,

36
00:02:08.791 --> 00:02:11.540
you're dealing with three.js objects.

37
00:02:11.540 --> 00:02:14.673
And so at that point,
Svelte doesn't really have any ability to

38
00:02:14.673 --> 00:02:17.877
kinda hook into that and
control how those elements are removed.

39
00:02:17.877 --> 00:02:21.552
So at that point, you are dependent
on the third-party libraries.

40
00:02:21.552 --> 00:02:24.133
I hope that answers the question.

41
00:02:24.133 --> 00:02:24.984
&gt;&gt; That was all.

42
00:02:24.984 --> 00:02:25.874
&gt;&gt; Okay.

43
00:02:25.874 --> 00:02:30.140
&gt;&gt; We were talking about
the merits of CSS versus

44
00:02:30.140 --> 00:02:34.180
declaring this stuff in JavaScript in it,

45
00:02:34.180 --> 00:02:39.458
perhaps adding your own classes and
then just adding and

46
00:02:39.458 --> 00:02:44.867
removing the classes with
Svelte to specific elements.

47
00:02:44.867 --> 00:02:48.423
I don't know what your thought is on that.

48
00:02:48.423 --> 00:02:50.313
&gt;&gt; It depends on what you're doing.

49
00:02:50.313 --> 00:02:54.923
That is certainly an option, but
if you're actually removing things from

50
00:02:54.923 --> 00:02:58.653
the DOM altogether, or
if you're unmounting components,

51
00:02:58.653 --> 00:03:02.400
then it can be quite hard to
coordinate all of that activity.

52
00:03:02.400 --> 00:03:08.606
And so that's where
transitions become quite handy.

53
00:03:08.606 --> 00:03:10.823
&gt;&gt; I'll just read this comment quick.

54
00:03:10.823 --> 00:03:16.617
A situation that I ran into was
wanting to use Svelte transitions,

55
00:03:16.617 --> 00:03:21.478
but I wanted them to apply when
the element was hidden and

56
00:03:21.478 --> 00:03:25.943
unhidden in CSS and
not removed added from the DOM.

57
00:03:25.943 --> 00:03:29.630
I wanted everything in the DOM but
just hidden.

58
00:03:29.630 --> 00:03:34.165
&gt;&gt; Yeah, so that transitions on
&gt;&gt; Designed for that scenario,

59
00:03:34.165 --> 00:03:37.881
at that point, you probably
would need to use CSS classes.

60
00:03:37.881 --> 00:03:39.080
But that's an interesting use case.

61
00:03:39.080 --> 00:03:44.592
I wonder if there's some way that
we could add the ability to control

62
00:03:44.592 --> 00:03:50.024
the CSS animations that you would
add with a class through Svelte.

63
00:03:50.024 --> 00:03:53.417
Maybe we'll add a new feature.

64
00:03:53.417 --> 00:03:54.939
Open a new isuue on GitHub.

