WEBVTT

1
00:00:00.000 --> 00:00:03.148
Okay, let's talk about bindings.

2
00:00:03.148 --> 00:00:06.550
So as we've seen, it is a general rule and

3
00:00:06.550 --> 00:00:11.813
spelt data kind of flows from
the top down into your components.

4
00:00:11.813 --> 00:00:15.804
So a parent component can set
props on a child component and

5
00:00:15.804 --> 00:00:20.869
a component can set attributes on
an element but not the other way around.

6
00:00:20.869 --> 00:00:26.476
Sometimes it's useful to break that rule,
so take this input element.

7
00:00:26.476 --> 00:00:29.445
Now, we could use an event handler here.

8
00:00:29.445 --> 00:00:36.732
We could add on input equals blah,
then we would have an event handler and

9
00:00:36.732 --> 00:00:42.106
then we would set the name
from the value of the input,

10
00:00:42.106 --> 00:00:46.546
it gets very boilerplate-y very quickly.

11
00:00:46.546 --> 00:00:53.199
We can get rid of all of that and
just bind the value to the name.

12
00:00:53.199 --> 00:00:56.753
All right, so
now when I change the text in here.

13
00:00:59.322 --> 00:01:04.004
It's gonna keep the value of the input and
the value of that variable in sync.

14
00:01:07.837 --> 00:01:12.873
And we can do this with all different
kinds of inputs, that was a text input,

15
00:01:12.873 --> 00:01:17.610
which is the default type but you can
use it with numeric inputs as well.

16
00:01:17.610 --> 00:01:21.399
And because Svelte understands
the input is numeric,

17
00:01:21.399 --> 00:01:25.184
it will turn the string value
that you get from the DOM,

18
00:01:25.184 --> 00:01:29.816
because of course, into a number
that you can actually work with.

19
00:01:29.816 --> 00:01:34.349
So in here, in our app.svelte,
right now there's no binding, so

20
00:01:34.349 --> 00:01:37.620
these aren't doing anything
when we edit them.

21
00:01:37.620 --> 00:01:42.058
We'll turn all of these values into
bindings by just selecting them all.

22
00:01:42.058 --> 00:01:45.908
Select one, command-D,
command-D, command-D and

23
00:01:45.908 --> 00:01:50.249
then stick a bind in front, right,
and now they are all linked.

24
00:01:50.249 --> 00:01:55.742
So I can change that value, and
not only is the other input updating,

25
00:01:55.742 --> 00:02:00.209
but the paragraph below,
the labels is also updating.

26
00:02:00.209 --> 00:02:04.673
And you can think about how much work and
faffing around you have had to do,

27
00:02:04.673 --> 00:02:08.922
if you're using event handlers
instead of bindings to achieve that.

28
00:02:11.726 --> 00:02:14.771
We can use it with check box inputs too.

29
00:02:14.771 --> 00:02:17.986
This time, instead of binding
to the value of the check box,

30
00:02:17.986 --> 00:02:23.235
we're gonna bind to the checked property,
because that's what the DOM gives us.

31
00:02:23.235 --> 00:02:28.147
So inside here, that checked attribute,
we're gonna bind it.

32
00:02:30.428 --> 00:02:35.297
And now,
we can interact with the application.

33
00:02:35.297 --> 00:02:39.536
We're binding the yes value to
the check state of the input,

34
00:02:39.536 --> 00:02:44.124
and when yes is true, we show this
markup instead of this markup.

35
00:02:47.730 --> 00:02:54.599
And it's not just input elements,
we can also use this with select elements.

36
00:02:54.599 --> 00:02:59.385
Here we've got an array of
questions that are going

37
00:02:59.385 --> 00:03:02.724
inside this select element here and

38
00:03:02.724 --> 00:03:07.969
we have a selected value
which is currently undefined.

39
00:03:07.969 --> 00:03:14.894
And then further down, we have an input
which is binding the value to the,

40
00:03:14.894 --> 00:03:22.285
sorry, binding the answer to each of
those questions to our answer variable.

41
00:03:22.285 --> 00:03:26.944
And once the answer has been populated,
we're allowed to submit the form

42
00:03:31.982 --> 00:03:36.872
So again, we take the value attribute
on the Select, just like with an input,

43
00:03:36.872 --> 00:03:41.400
and we put bind in front of it And

44
00:03:41.400 --> 00:03:46.253
it's now bound the currently
selected option to

45
00:03:46.253 --> 00:03:51.117
the question which we can
see at the bottom here.

46
00:03:51.117 --> 00:03:56.003
Where it says selected question
one that corresponds to this

47
00:03:56.003 --> 00:03:58.215
piece of markup down here.

48
00:03:58.215 --> 00:04:02.602
So the selected value is now getting
populated whenever we interact with that

49
00:04:02.602 --> 00:04:03.621
select element.

50
00:04:13.055 --> 00:04:14.314
Okay.

51
00:04:18.943 --> 00:04:23.528
We can also bind multiple
inputs using the same value.

52
00:04:23.528 --> 00:04:27.377
So common thing that you'll have when
you're dealing with forms is that

53
00:04:27.377 --> 00:04:31.559
you will have multiple radio or checkbox
inputs that relate to the same value.

54
00:04:31.559 --> 00:04:36.585
And for these we can use something
called a group binding along with

55
00:04:36.585 --> 00:04:42.792
the value attribute to keep them all in
sync with the state inside your component.

56
00:04:42.792 --> 00:04:46.123
So radio inputs you'll recall,
they are the circular ones that

57
00:04:46.123 --> 00:04:48.962
are all mutually exclusive
if they have the same name,

58
00:04:48.962 --> 00:04:53.234
checkbox inputs form an array of values
because they are not mutually exclusive.

59
00:04:53.234 --> 00:04:59.045
So let's take the radio inputs first,
these are the radio inputs.

60
00:04:59.045 --> 00:05:03.269
When you're ordering ice cream from ice
cream app you can choose one scoop or

61
00:05:03.269 --> 00:05:06.833
two scoop or three scoops but
you cannot choose both one scoop and

62
00:05:06.833 --> 00:05:09.211
two scoops that wouldn't make any sense.

63
00:05:09.211 --> 00:05:13.696
So that's a radio input which has a name.

64
00:05:13.696 --> 00:05:20.066
I'm keeping them mutually exclusive and

65
00:05:20.066 --> 00:05:25.890
we'll add bind group equals scoops.

66
00:05:25.890 --> 00:05:30.449
And now, when we interact with that,

67
00:05:30.449 --> 00:05:39.006
we are updating the value of the scoops
variable inside our component.

68
00:05:39.006 --> 00:05:43.365
But before we can order our ice cream,
we need to pick some flavors, as well.

69
00:05:43.365 --> 00:05:50.430
So down where the checkbox input is,
we're gonna use another binding

70
00:05:56.007 --> 00:06:01.516
And this time the value that we're binding
to is an array because we can select

71
00:06:01.516 --> 00:06:07.895
multiple flavors, that's why we're using a
checkbox input rather than a radio input.

72
00:06:07.895 --> 00:06:11.928
So if I want one scoop of cookies and
cream,

73
00:06:11.928 --> 00:06:15.299
it will show my order at the bottom.

74
00:06:15.299 --> 00:06:18.503
If I try and
order more flavors than scoops,

75
00:06:18.503 --> 00:06:23.625
then we've got an F block which is
gonna tell us that's not possible.

76
00:06:23.625 --> 00:06:27.065
And again, bindings make this really easy,
if you were using the event handlers for

77
00:06:27.065 --> 00:06:30.176
this then you would have to express all
that logic in a more complex fashion.

78
00:06:30.176 --> 00:06:34.751
We can use checkbox inputs if you
wanna select multiple values, but

79
00:06:34.751 --> 00:06:39.981
another option that we have is a select
element with the multiple attribute.

80
00:06:39.981 --> 00:06:45.065
So back down, down here where
we have our checkbox inputs,

81
00:06:45.065 --> 00:06:48.225
we can use a select element instead.

82
00:06:48.225 --> 00:06:48.886
Okay, so

83
00:06:48.886 --> 00:06:54.600
we're gonna replace this array of check
box inputs with a single select element.

84
00:06:54.600 --> 00:06:57.586
I'm gonna put it outside the each.

85
00:06:59.927 --> 00:07:04.789
And we're gonna, again,
bind its value to the flavors array.

86
00:07:08.110 --> 00:07:11.733
Close the select element after the each,

87
00:07:11.733 --> 00:07:16.711
and then inside here,
we're just gonna have an option.

88
00:07:23.474 --> 00:07:26.488
The name of it is flavor,
so we need to call it that.

89
00:07:28.885 --> 00:07:35.250
When you see the effects of
this piece of markup down here.

90
00:07:35.250 --> 00:07:41.058
We can select multiple things by pressing
the command key and selecting them or

91
00:07:41.058 --> 00:07:46.167
I think if you press the Shift key
you can select a whole bunch at once.

92
00:07:46.167 --> 00:07:53.092
And we don't need to declare the value on
the option because it's just a string.

93
00:07:53.092 --> 00:07:55.986
So in the case where
the value is just a string,

94
00:07:55.986 --> 00:07:58.895
it will take the value
from inside the option.

95
00:08:08.106 --> 00:08:11.243
We can also use bindings
with text area elements.

96
00:08:11.243 --> 00:08:16.430
A text area is just kinda
like a big chunky text input.

97
00:08:17.875 --> 00:08:23.088
So as with a regular text input,
we're gonna

98
00:08:23.088 --> 00:08:28.584
replace this value with bind:value= Value.

99
00:08:28.584 --> 00:08:33.584
And now when I change some text

100
00:08:33.584 --> 00:08:38.385
inside the input text area.

101
00:08:41.656 --> 00:08:47.098
It's gonna reflect that in the value
variable, which is then getting

102
00:08:47.098 --> 00:08:52.649
turned into markdown using this mark
library from NPM and the HTML tag.

103
00:08:52.649 --> 00:08:57.532
Again, you don't use this with
untrusted input, but if it's within

104
00:08:57.532 --> 00:09:03.105
the user's own browser and we're using
their data, then it's totally fine.

105
00:09:03.105 --> 00:09:07.694
We have a shorthand property here because
we're doing bind column value equals

106
00:09:07.694 --> 00:09:10.445
value, and
we're repeating the value there.

107
00:09:10.445 --> 00:09:15.426
We're gonna just get rid of that last
part and, it will continue to work.

