WEBVTT

1
00:00:00.180 --> 00:00:03.400
Congratulations, we've made it through
the first part of the tutorial.

2
00:00:03.400 --> 00:00:05.629
We're gonna get into the fun stuff now.

3
00:00:05.629 --> 00:00:11.361
We're gonna begin part two
with a discussion of motion.

4
00:00:11.361 --> 00:00:15.189
So, so far we've been assigning to
values inside our components and

5
00:00:15.189 --> 00:00:18.160
that's been causing the DOM
to update immediately.

6
00:00:18.160 --> 00:00:22.336
But sometimes we don't want that,
sometimes we want values to update

7
00:00:22.336 --> 00:00:25.750
gradually over time, for
example is progress bar here.

8
00:00:26.800 --> 00:00:31.661
It's cool that we can update the progress
bar like that, but it would be nice if it

9
00:00:31.661 --> 00:00:36.540
smoothly animated to its new value and
in Svelt we can do that with motion stores.

10
00:00:38.090 --> 00:00:42.070
Here progress is a writable store that
starts with the value of zero and

11
00:00:42.070 --> 00:00:45.592
every time we press one of these buttons,
it sets a new value.

12
00:00:45.592 --> 00:00:51.179
But if we change that writeable
to a tweened store like that and

13
00:00:51.179 --> 00:00:56.434
replace the Svelte store
import with Svelte motion,

14
00:00:56.434 --> 00:01:02.051
now when we press the buttons,
the bar animates smoothly.

15
00:01:02.051 --> 00:01:04.617
Looks a little bit
robotic at the moment and

16
00:01:04.617 --> 00:01:08.110
that's because we need to
add an easing function.

17
00:01:08.110 --> 00:01:13.044
An easing function is a function that
takes a value between zero and one and

18
00:01:13.044 --> 00:01:15.830
returns a value between zero and one.

19
00:01:15.830 --> 00:01:18.320
By default it's just this.

20
00:01:18.320 --> 00:01:23.188
This is the linear easing function that
we saw before, but you can do something

21
00:01:23.188 --> 00:01:28.235
like we could square T like this and then
it'll do some very different behavior.

22
00:01:28.235 --> 00:01:34.135
We actually have a library of easing
functions available in Svelte,

23
00:01:34.135 --> 00:01:38.895
these formula were devised
by Ropana many years ago and

24
00:01:38.895 --> 00:01:41.908
we just have a whole stack of them.

25
00:01:41.908 --> 00:01:47.134
One of the most useful ones I find is
called cubic out which kind of smoothly,

26
00:01:47.134 --> 00:01:51.800
it starts fast and then it smoothly
transitions to the final state.

27
00:01:51.800 --> 00:01:52.879
So let's replace that.

28
00:01:56.346 --> 00:02:00.281
Right, I find that to be
quite a pleasing motion and

29
00:02:00.281 --> 00:02:03.679
we can set the duration
to whatever we want.

30
00:02:05.323 --> 00:02:10.139
You can make it a super slow tween or
a very fast tween

31
00:02:10.139 --> 00:02:15.074
depending on what it is
we're using the motion for.

32
00:02:15.074 --> 00:02:20.430
There's a whole bunch of options that you
can pass to the tweened store, including

33
00:02:20.430 --> 00:02:26.210
a custom interpolate function which allows
you to interpolate non-numeric values.

34
00:02:26.210 --> 00:02:29.690
For example, maybe you wanna
transition between two colors.

35
00:02:29.690 --> 00:02:32.924
Well, you can pass a function that knows
how to interpolate between two colors.

36
00:02:34.750 --> 00:02:39.696
And you can also pass those options
when you call progress.set to override

37
00:02:39.696 --> 00:02:41.118
the default values.

38
00:02:43.974 --> 00:02:48.808
So tweening is one way to get motion, but
another way that is more applicable in

39
00:02:48.808 --> 00:02:52.778
some circumstances is to use
some rudimentary spring physics.

40
00:02:52.778 --> 00:02:54.430
It works particularly well for

41
00:02:54.430 --> 00:02:58.240
values that are frequently changing
such as the mouse position.

42
00:02:58.240 --> 00:02:59.972
If I move the mouse around here,

43
00:02:59.972 --> 00:03:03.420
you will see that the orange dot
follows the cursor perfectly.

44
00:03:03.420 --> 00:03:07.789
And again, we can just replace
the store that represents

45
00:03:07.789 --> 00:03:11.620
the coordinates of the mouse
with a spring store.

46
00:03:11.620 --> 00:03:14.919
Let's get rid of those,
replace with spring and again,

47
00:03:14.919 --> 00:03:17.610
we're gonna import that
from Svelte motion.

48
00:03:17.610 --> 00:03:22.161
And now when I move the mouse around,
the circle kind of lags behind

49
00:03:22.161 --> 00:03:25.910
a little bit and
moves in this pleasing smooth manner.

50
00:03:28.670 --> 00:03:32.340
Now, springs have some settings
that you can apply to them.

51
00:03:32.340 --> 00:03:34.198
They have a stiffness setting and

52
00:03:34.198 --> 00:03:37.790
a damping setting that determines
how they respond to changes.

53
00:03:39.330 --> 00:03:43.130
And we can specify our own initial values.

54
00:03:43.130 --> 00:03:48.096
So for the spring value here, for the
coordinates we'll specify a stiffness of

55
00:03:48.096 --> 00:03:51.876
0.1, 1 would mean that
the spring was perfectly stiff,

56
00:03:51.876 --> 00:03:55.100
0 would mean that it's not stiff at all.

57
00:03:55.100 --> 00:03:59.090
And we'll set a damping
value of 0.25 like that.

58
00:03:59.090 --> 00:04:03.840
And now we see we get some very
different and more springy behavior.

59
00:04:03.840 --> 00:04:05.940
And we can change those.

60
00:04:05.940 --> 00:04:07.855
And you can sort of get a feel for

61
00:04:07.855 --> 00:04:11.914
how the different values will
affect the behavior of the spring.

62
00:04:16.840 --> 00:04:20.715
Another way that we can make user
interfaces a little bit more appealing is

63
00:04:20.715 --> 00:04:24.042
by gracefully transitioning
elements into and out of the DOM.

64
00:04:24.042 --> 00:04:27.760
And Svelte has something that helps with
this called the transition directive.

65
00:04:29.000 --> 00:04:32.839
So let's import the fade
transition from Svelte transition.

66
00:04:38.684 --> 00:04:42.790
And this text here which
becomes visible when

67
00:04:42.790 --> 00:04:47.761
the checkbox is checked and
invisible when it's not,

68
00:04:47.761 --> 00:04:52.635
we can add the transition
directive to that element.

69
00:04:52.635 --> 00:04:58.790
Transition:fade to reference
the function that we just imported.

70
00:04:58.790 --> 00:05:03.740
And now when we toggle this, you'll see
that the text fades in and it fades out.

71
00:05:07.591 --> 00:05:11.046
And we can parametrize these transitions.

72
00:05:11.046 --> 00:05:15.363
So let's get rid of the fade and
turn it into a fly transition.

73
00:05:17.549 --> 00:05:18.509
And we'll give it some values.

74
00:05:18.509 --> 00:05:24.250
We'll give it 200 wide pixels and
a slow duration of 2000 milliseconds.

75
00:05:25.830 --> 00:05:29.450
I'm gonna change the word fades to
the word flies, so that is correct.

76
00:05:29.450 --> 00:05:35.630
And now when we toggle that, we're gonna
see it fly in and out of the DOM.

77
00:05:36.710 --> 00:05:40.347
And what's interesting is that this
transition is reversible if while

78
00:05:40.347 --> 00:05:44.010
it's transitioning out,
we change our mind and bring it back.

79
00:05:44.010 --> 00:05:46.330
Then it doesn't start from the end or
start from the start.

80
00:05:46.330 --> 00:05:49.750
It starts from wherever it was at
the moment that the state change happened.

81
00:05:49.750 --> 00:05:55.179
So this is a nice way to make transitions
that almost feel like they're

82
00:05:55.179 --> 00:06:00.249
behaving as physical objects
would within your user interface.

83
00:06:02.582 --> 00:06:06.212
Sometimes you want to have a transition
that applies when the element enters

84
00:06:06.212 --> 00:06:06.722
the DOM and

85
00:06:06.722 --> 00:06:10.254
one that applies when it leaves the DOM
that are separate from each other.

86
00:06:10.254 --> 00:06:14.190
So for example, we might want this
text to fly in but then fade out.

87
00:06:14.190 --> 00:06:18.490
And we can do that by using both
transitions together, import fade.

88
00:06:18.490 --> 00:06:22.595
And then down here, we'll change
the transition:fly into in:fly so

89
00:06:22.595 --> 00:06:26.210
that it applies when
the element enters the DOM.

90
00:06:26.210 --> 00:06:32.236
Then we'll add out:fade,
flies in, fades out.

91
00:06:36.095 --> 00:06:39.178
Now, one thing that you'll notice
is that this is not reversible,

92
00:06:39.178 --> 00:06:41.464
there's no way that we
can make this reversible.

93
00:06:41.464 --> 00:06:43.685
So if we toggle the state rapidly,

94
00:06:43.685 --> 00:06:48.510
then it will start flying in from
the beginning of the transition instead of

95
00:06:48.510 --> 00:06:52.970
trying to figure out what some
intermediate position would be.

96
00:06:52.970 --> 00:06:56.239
So far we've been using
the built-in transitions, and

97
00:06:56.239 --> 00:07:00.188
it's useful to be able to import those,
but we can also create our own

98
00:07:00.188 --> 00:07:04.090
because sometimes you will have
some very specific requirements.

99
00:07:05.320 --> 00:07:08.260
The way that transitions work is,
well, they're just functions.

100
00:07:08.260 --> 00:07:11.480
This is the fade transition that
we were looking at earlier.

101
00:07:11.480 --> 00:07:16.060
It's a function that receives the element
in question together with the options that

102
00:07:16.060 --> 00:07:17.660
were passed in.

103
00:07:17.660 --> 00:07:21.614
And it returns this transition object
which has some values like delay and

104
00:07:21.614 --> 00:07:22.760
duration.

105
00:07:22.760 --> 00:07:27.542
And most importantly,
this CSS method which given a value

106
00:07:27.542 --> 00:07:31.840
between zero and one, return some CSS.

107
00:07:31.840 --> 00:07:37.180
Zero means it's the beginning of
the intro or the end of the outro.

108
00:07:37.180 --> 00:07:42.250
One means it's the element's final
resting state once it's in the DOM.

109
00:07:42.250 --> 00:07:46.850
So in this case, we're setting
the opacity to t multiplied by

110
00:07:46.850 --> 00:07:52.250
the elements native opacity which
we get with getComputedStyle.

111
00:07:52.250 --> 00:07:55.796
So zero before the element has
transitioned in, t will be zero,

112
00:07:55.796 --> 00:07:57.511
the opacity will also be zero.

113
00:07:57.511 --> 00:08:00.934
One once the element
is settled in the DOM,

114
00:08:00.934 --> 00:08:04.560
it'll be one times
whatever that value was.

115
00:08:04.560 --> 00:08:13.770
And so we can create our own CSS method
to create our own transition effects.

116
00:08:13.770 --> 00:08:17.672
And what Svelte will do is it will
run that method at the beginning of

117
00:08:17.672 --> 00:08:20.540
the transition to get a list of keyframes.

118
00:08:20.540 --> 00:08:22.399
So for
the fade transition that we just saw,

119
00:08:22.399 --> 00:08:24.520
these are the keyframes
that you will end up with.

120
00:08:24.520 --> 00:08:29.586
It will then put those keyframes
into a style sheet and

121
00:08:29.586 --> 00:08:34.428
add the relevant CSS to
the element in such a way that

122
00:08:34.428 --> 00:08:39.660
the actual animation is
happening entirely in CSS.

123
00:08:39.660 --> 00:08:43.795
So it's not running code on every frame
and updating the style of that element,

124
00:08:43.795 --> 00:08:45.288
it's all being done in CSS.

125
00:08:45.288 --> 00:08:49.009
And the advantage of that is that it will
frequently run off the main thread on

126
00:08:49.009 --> 00:08:53.021
the compositor, and it will do so in a way
that doesn't block any other JavaScript

127
00:08:53.021 --> 00:08:56.595
from happening and isn't blocked by
other JavaScript from happening.

128
00:08:56.595 --> 00:09:01.214
This is useful for making your transition
smooth and it's also better for

129
00:09:01.214 --> 00:09:03.014
your battery life and so on.

130
00:09:03.014 --> 00:09:07.052
Right, so
let's make a really wacky transition.

131
00:09:07.052 --> 00:09:10.305
I'm gonna begin by importing
the elastic out transition.

132
00:09:19.223 --> 00:09:21.072
And we're gonna create
our own CSS method here.

133
00:09:21.072 --> 00:09:22.511
At the moment, it's not doing anything.

134
00:09:22.511 --> 00:09:30.141
Let's turn this into a function
that returns a whole block of CSS.

135
00:09:35.395 --> 00:09:40.385
We'll ease the value
with elasticOut.

136
00:09:42.865 --> 00:09:47.452
And then transform it with a scale and
a rotation.

137
00:10:05.666 --> 00:10:09.842
All right, and
1,080 degrees is 3 times 360, so

138
00:10:09.842 --> 00:10:13.773
we're gonna make this thing
spin around three times.

139
00:10:13.773 --> 00:10:19.081
And then the color is gonna use HSL.

140
00:10:22.751 --> 00:10:27.555
Which if you haven't used HSL before,
it's a really nice way to declare

141
00:10:27.555 --> 00:10:32.045
colors because you're defining a hue
which is a value between 0 and

142
00:10:32.045 --> 00:10:34.913
360, where 0 and 360 are pure red.

143
00:10:34.913 --> 00:10:37.510
And then it kinda transitions
through a rainbow.

144
00:10:37.510 --> 00:10:41.250
S is the saturation and
then L is the lightness.

145
00:10:41.250 --> 00:10:44.748
And it gives you a way to manipulate
colors in a way that's a lot easier to

146
00:10:44.748 --> 00:10:48.688
predict and understand than when you're
dealing with things like RGB values.

147
00:10:48.688 --> 00:10:57.109
Okay, so Math.trunc(t * 360).

148
00:10:57.109 --> 00:11:01.638
We're using .trunc to get an integer value,
which the hue needs to be.

149
00:11:09.283 --> 00:11:12.265
And then we're going to
create a saturation which,

150
00:11:12.265 --> 00:11:16.897
don't worry too much about the details
of this formula, it's just for effect.

151
00:11:24.044 --> 00:11:30.599
Right, and if I've done this right,
then hopefully when we toggle

152
00:11:30.599 --> 00:11:36.472
the visible state we're gonna
get a fun little transition.

153
00:11:36.472 --> 00:11:39.600
So you can do pretty much
whatever you want here.

154
00:11:39.600 --> 00:11:41.485
You have the full power of JavaScript but

155
00:11:41.485 --> 00:11:44.380
we're not actually using
JavaScript to apply these styles.

156
00:11:44.380 --> 00:11:45.330
It's all happening in CSS.

157
00:11:45.330 --> 00:11:47.040
So we sort of get the best of both worlds.

158
00:11:49.976 --> 00:11:52.004
Sometimes you can't
express everything in CSS.

159
00:11:52.004 --> 00:11:54.803
Sometimes you actually do
need to run code on each

160
00:11:54.803 --> 00:11:58.158
frame of the animation in order
to get the desired effect.

161
00:11:58.158 --> 00:12:02.911
So for example, we might wanna
create a typewriter effect where

162
00:12:02.911 --> 00:12:07.058
this text here becomes visible
one character at a time.

163
00:12:07.058 --> 00:12:12.193
And we can do that by instead
of returning a CSS method,

164
00:12:12.193 --> 00:12:19.129
we can return a tick function which
applies some manipulation to the DOM.

165
00:12:21.260 --> 00:12:26.075
So here's our typewriter transition,
again, we're just passing in the node

166
00:12:26.075 --> 00:12:30.274
that the transition is gonna be
applied to together with some options.

167
00:12:32.488 --> 00:12:36.971
I'm gonna grab a copy of the node's text.

168
00:12:40.285 --> 00:12:45.170
And the duration of this transition is
gonna be based on the length of the text.

169
00:12:45.170 --> 00:12:52.988
So that's gonna be text.length
divided by the speed expressed in,

170
00:12:52.988 --> 00:12:58.398
I'm actually not sure
what this is in seconds.

171
00:13:00.757 --> 00:13:03.126
And we pass that duration back to Svelte so

172
00:13:03.126 --> 00:13:05.921
it knows how long this
transition should take.

173
00:13:05.921 --> 00:13:08.179
And then we're gonna
create a tick function.

174
00:13:10.128 --> 00:13:11.915
Which is gonna be called on each frame.

175
00:13:17.360 --> 00:13:23.285
And "i" is gonna be the number of characters
of the string that we should show.

176
00:13:23.285 --> 00:13:28.124
And we can calculate that
with (text.length * t).

177
00:13:28.124 --> 00:13:32.397
Again, we're using Math.trunc because
we need this to be an integer.

178
00:13:32.397 --> 00:13:40.105
And we can set the textContent
of the node to text.slice(0, i).

179
00:13:40.105 --> 00:13:46.941
And now when we toggle visible, the text
is written on one character at a time.

180
00:13:46.941 --> 00:13:51.874
And because we're using transition
here as opposed to in or

181
00:13:51.874 --> 00:13:57.017
out, this is also reversible
just like our CSS transitions.

182
00:14:01.262 --> 00:14:05.621
In some cases, it's useful to know when
your transitions are starting and ending.

183
00:14:05.621 --> 00:14:09.231
And so Svelte dispatches transition
events when you have an element

184
00:14:09.231 --> 00:14:10.570
that uses transitions.

185
00:14:12.410 --> 00:14:14.699
We have a status value here and

186
00:14:14.699 --> 00:14:19.748
we're just gonna assign to that
value when these events happen.

187
00:14:19.748 --> 00:14:23.070
So the paragraph element here,

188
00:14:23.070 --> 00:14:29.105
we're gonna create some event
listeners on:introstart.

189
00:14:29.105 --> 00:14:33.280
We're gonna set the status
to intro started.

190
00:14:34.830 --> 00:14:38.369
And I'm just gonna copy
that line four times.

191
00:14:40.464 --> 00:14:44.851
We're gonna change
the intro there to outro and

192
00:14:44.851 --> 00:14:48.810
we're gonna change
the start here to end and

193
00:14:48.810 --> 00:14:52.570
we're gonna change that intro to outro.

194
00:14:52.570 --> 00:14:57.094
And now when we toggle the visibility
of the element, we'll see that

195
00:14:57.094 --> 00:15:03.000
the outro started, the outro ended,
the intro started and the intro ended.

196
00:15:03.000 --> 00:15:06.535
It's not something that you use a lot but
it's useful to have when you do need it.

197
00:15:10.491 --> 00:15:14.066
Okay, so ordinarily transitions
will play on elements when

198
00:15:14.066 --> 00:15:16.671
any container block is added or destroyed.

199
00:15:16.671 --> 00:15:21.601
And so in the example here,
these elements are removed when we change

200
00:15:21.601 --> 00:15:25.490
the length of the list
which is what we want.

201
00:15:25.490 --> 00:15:28.600
But they're also removed when
we remove the list entirely.

202
00:15:28.600 --> 00:15:30.740
And in this case,
let's say that's not what we want.

203
00:15:30.740 --> 00:15:34.436
We want the list to only appear and

204
00:15:34.436 --> 00:15:39.640
disappear when the checkbox is toggled.

205
00:15:39.640 --> 00:15:44.690
But we want the individual elements to
transition out as we play with the slider.

206
00:15:44.690 --> 00:15:48.829
And we can do that by turning the slide
transition that's being applied to those

207
00:15:48.829 --> 00:15:50.700
elements into a local transition.

208
00:15:52.240 --> 00:15:56.209
Just like event modifiers,
we add the pipe symbol to where

209
00:15:56.209 --> 00:16:00.020
the transition is declared and
add the local modifier.

210
00:16:01.030 --> 00:16:05.420
And so now the transition continues to
play when the length of the list changes.

211
00:16:05.420 --> 00:16:08.991
But if I toggle this list, the whole
thing will just disappear altogether.

