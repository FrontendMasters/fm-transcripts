WEBVTT

1
00:00:00.222 --> 00:00:03.414
We're coming to the end of
part two of the tutorial.

2
00:00:03.414 --> 00:00:08.110
This section is a little bit of
a mishmash, we've got a bunch of different

3
00:00:08.110 --> 00:00:11.994
special elements that Svelte
provides to your components.

4
00:00:11.994 --> 00:00:15.266
And they don't really have anything
in common with each other,

5
00:00:15.266 --> 00:00:18.430
other than the fact that they
belong to the Svelte namespace.

6
00:00:18.430 --> 00:00:21.083
So the first of these is Svelte self, and

7
00:00:21.083 --> 00:00:26.169
that is something that allows a component
to reference itself recursively.

8
00:00:26.169 --> 00:00:29.869
And it's useful things like
this folder tree view,

9
00:00:29.869 --> 00:00:32.992
where a folder can contain another folder.

10
00:00:32.992 --> 00:00:36.354
So inside our folder.svelte component.

11
00:00:36.354 --> 00:00:41.311
We would wanna be able to do something
like this, where we have the file here,

12
00:00:41.311 --> 00:00:46.194
we'd like to be able to add a folder
that references the same component, but

13
00:00:46.194 --> 00:00:50.120
that's impossible because
a module can't import itself.

14
00:00:50.120 --> 00:00:54.612
So instead, we use svelte:self here.

15
00:01:01.493 --> 00:01:06.365
And now,
the folder is containing other folders.

16
00:01:06.365 --> 00:01:08.914
And we can do that to an arbitrary depth.

17
00:01:11.634 --> 00:01:16.205
An interesting fact about this is that,
if you try and do this at the top level of

18
00:01:16.205 --> 00:01:20.796
a component, it will yell at you,
because that would cause an infinite loop.

19
00:01:20.796 --> 00:01:24.293
But it's smart enough to know that that
is not a thing that you should be doing.

20
00:01:30.010 --> 00:01:33.774
Now, a component can change its
type altogether with the Svelte

21
00:01:33.774 --> 00:01:35.037
component element.

22
00:01:35.037 --> 00:01:40.236
In this exercise,
we wanna show RedThing.svelte,

23
00:01:40.236 --> 00:01:44.286
if the value of the selected color is red.

24
00:01:44.286 --> 00:01:46.429
And we wanna show a green
thing if it's green.

25
00:01:46.429 --> 00:01:48.993
And we wanna show blue thing if it's blue,
and so on.

26
00:01:48.993 --> 00:01:52.480
Now, we could do this with a sequence of,

27
00:01:52.480 --> 00:01:57.473
if blocks inside of .svelte,
like we started doing here.

28
00:01:57.473 --> 00:02:00.851
And then, if we select a different color,
it would show the green thing and

29
00:02:00.851 --> 00:02:01.613
the blue thing.

30
00:02:01.613 --> 00:02:04.017
But that's a lot of code to have to write,

31
00:02:04.017 --> 00:02:06.854
it's more convenient to
make that data driven.

32
00:02:06.854 --> 00:02:11.674
So we'll create a single dynamic
component, get rid of that entire block.

33
00:02:13.628 --> 00:02:15.496
Add Svelte component.

34
00:02:20.444 --> 00:02:22.481
And then the attribute is called this.

35
00:02:24.998 --> 00:02:27.534
I'm gonna pass in the selected component.

36
00:02:27.534 --> 00:02:31.019
So you see up here that the value
that is getting passed in is actually

37
00:02:31.019 --> 00:02:32.864
the constructor of the component.

38
00:02:32.864 --> 00:02:36.093
And now, when we change the value
of that via the select,

39
00:02:36.093 --> 00:02:38.528
we're rendering a different component.

40
00:02:43.446 --> 00:02:47.080
And we can do the same
thing with elements, right?

41
00:02:47.080 --> 00:02:51.458
In the same way, we could have,
if selected = h1,

42
00:02:51.458 --> 00:02:57.044
we'll have a block of h1 content,
if selected = h2, and so on.

43
00:02:57.044 --> 00:03:03.856
But that's just no fun, instead, get rid
of all of that, And use Svelte element.

44
00:03:11.924 --> 00:03:13.943
And put some content inside.

45
00:03:13.943 --> 00:03:19.066
I'm a less than selected,

46
00:03:19.066 --> 00:03:21.967
greater than,

47
00:03:26.323 --> 00:03:31.102
I would like, so and then now,
if we change to one of the other options,

48
00:03:32.998 --> 00:03:41.723
It recreates the DOM automatically And so,
the value of this can be any string or

49
00:03:41.723 --> 00:03:46.143
it can be a falsy value, in which case
no element will be rendered at all.

50
00:03:49.881 --> 00:03:55.067
We've already seen how you can add
event listeners to DOM elements.

51
00:03:55.067 --> 00:03:59.792
We can also add event listeners
to the window object using

52
00:03:59.792 --> 00:04:02.849
the special Svelte window element.

53
00:04:02.849 --> 00:04:07.248
In this exercise,
whenever we focus the window and

54
00:04:07.248 --> 00:04:12.071
press a key, we would like to
show what key was pressed.

55
00:04:12.071 --> 00:04:16.211
We're gonna assign these key and
key code values, and

56
00:04:16.211 --> 00:04:19.550
then we're gonna show that inside the app.

57
00:04:32.595 --> 00:04:33.115
All right, and

58
00:04:33.115 --> 00:04:35.568
this is just a more convenient way
of using window.addEventListener.

59
00:04:35.568 --> 00:04:39.065
It will automatically remove event
listeners when this component is

60
00:04:39.065 --> 00:04:39.735
unmounted.

61
00:04:39.735 --> 00:04:44.239
And just like with DOM elements, you can
use event modifiers like preventDefault.

62
00:04:48.037 --> 00:04:55.211
As well as adding events to Svelte window,
we bind to certain properties of it.

63
00:04:55.211 --> 00:05:00.043
So here we've got a nice little piece
of artwork generated by Midjourney.

64
00:05:00.043 --> 00:05:05.955
And we would like to bind the current
scroll position to this y value.

65
00:05:05.955 --> 00:05:11.956
And we can do that very
easily bind scroll y = y.

66
00:05:11.956 --> 00:05:14.391
And now when we scroll, it's reflected.

67
00:05:14.391 --> 00:05:20.001
Again, it's given as fractional
values because my site is zoomed in.

68
00:05:24.296 --> 00:05:27.125
So just change that and
it updates smoothly.

69
00:05:27.125 --> 00:05:28.622
And that's a bidirectional binding.

70
00:05:28.622 --> 00:05:33.538
If you change the value of y,
it will also update the scroll position.

71
00:05:33.538 --> 00:05:38.075
So there are a few different properties
that you can bind to, width, height,

72
00:05:38.075 --> 00:05:43.400
scroll, and also the online binding, which
is an alias for window.navigator.online.

73
00:05:43.400 --> 00:05:47.151
This is useful for displaying
a message like, you lost the Internet,

74
00:05:47.151 --> 00:05:50.024
you need to reconnect to WiFi or
something like that.

75
00:05:53.618 --> 00:05:55.389
As well as the window,

76
00:05:55.389 --> 00:06:00.060
we have a way of adding event
listeners to the body element.

77
00:06:00.060 --> 00:06:03.920
Which you typically are not rendering
yourself because normally you would mount

78
00:06:03.920 --> 00:06:07.566
your cell components inside the body,
you don't control the actual body.

79
00:06:07.566 --> 00:06:13.896
So we have svelte body to listen to
events like mouseenter and mouseleave.

80
00:06:19.229 --> 00:06:25.022
And mouseenter, we want this
hereKitty value to become true.

81
00:06:31.372 --> 00:06:38.712
And we'll just copy that line and reverse
it on mouseleave, it becomes false.

82
00:06:38.712 --> 00:06:44.453
And then now, if we enter the iframe,
kitty comes out to play.

83
00:06:49.459 --> 00:06:55.327
Similarly, we have the Svelte
document element, which is useful for

84
00:06:55.327 --> 00:07:01.903
the selectionchange handler in particular
which does not fire on the window.

85
00:07:01.903 --> 00:07:06.370
So we can add this on
selectionchange event listener.

86
00:07:13.401 --> 00:07:16.203
Which is gonna get
the current selection and

87
00:07:16.203 --> 00:07:18.861
assign it to this selection value there.

88
00:07:25.971 --> 00:07:32.817
You can also selects itself, which kinda
gets pretty crazy, I don't recommend it.

89
00:07:36.615 --> 00:07:41.025
And then,
we can also add a Svelte head element.

90
00:07:41.025 --> 00:07:47.071
Which is very useful for things like SEO,
you can add a document title.

91
00:07:47.071 --> 00:07:48.968
You can add descriptions and

92
00:07:48.968 --> 00:07:52.928
things like that that will
appear in search results pages.

93
00:07:52.928 --> 00:07:54.930
That's what it's mostly useful for,

94
00:07:54.930 --> 00:07:58.032
although it's not visible in
the context of this tutorial.

95
00:07:58.032 --> 00:08:01.111
So we're gonna use something
a little bit different.

96
00:08:01.111 --> 00:08:04.124
We're gonna use it to load a stylesheet.

97
00:08:07.389 --> 00:08:09.355
Add the Svelte head element.

98
00:08:11.805 --> 00:08:16.715
And then inside the link
rel equals stylesheet.

99
00:08:19.482 --> 00:08:22.782
And we have a selection of stylesheets
up here that we can pick from.

100
00:08:31.261 --> 00:08:34.967
Beginning with the Margaritaville theme,
and

101
00:08:34.967 --> 00:08:38.679
you can pick whichever
of these you must enjoy.

102
00:08:49.823 --> 00:08:53.633
So getting into the nuts and
bolts of how the compiler works,

103
00:08:53.633 --> 00:08:58.340
when you invoke the Svelte compiler,
which typically you're not doing,

104
00:08:58.340 --> 00:09:01.045
your bundler plugin is doing this for you.

105
00:09:01.045 --> 00:09:02.277
But when that happens,

106
00:09:02.277 --> 00:09:06.476
you can pass options to the compiler that
control how the component is compiled.

107
00:09:06.476 --> 00:09:08.544
But those are for
all of the components in your app.

108
00:09:08.544 --> 00:09:13.879
Sometimes you wanna have some compile
options that are component specific,

109
00:09:13.879 --> 00:09:17.581
and that's where we use
the Svelte options element.

110
00:09:17.581 --> 00:09:21.270
There's a few different options that
you can pass to the compiler and

111
00:09:21.270 --> 00:09:23.886
we'll use the immutable
option as our example.

112
00:09:23.886 --> 00:09:28.255
So in this app, whenever we change
the value of one of these todos,

113
00:09:28.255 --> 00:09:31.308
all of the todos
are updated simultaneously.

114
00:09:35.232 --> 00:09:39.144
That's because we have
an afterUpdate function here,

115
00:09:39.144 --> 00:09:43.735
which causes the element to flash
whenever the value is updated.

116
00:09:46.028 --> 00:09:50.234
And that's not really a problem here,
that's fine because it's gonna be fast

117
00:09:50.234 --> 00:09:54.144
enough that it's not gonna affect
the performance of your application.

118
00:09:54.144 --> 00:09:58.390
But you might have some situations where
you have some very complex data, and

119
00:09:58.390 --> 00:10:02.571
you just wanna make sure that a component
doesn't update unless you know for

120
00:10:02.571 --> 00:10:04.552
sure that its values have changed.

121
00:10:04.552 --> 00:10:09.675
So we can tell the to do
component that it should only ever

122
00:10:09.675 --> 00:10:16.651
update anything when the data that has
passed into it changes by reference,

123
00:10:16.651 --> 00:10:21.681
as opposed to when it is told
that its data has changed.

124
00:10:28.637 --> 00:10:31.523
This isn't something that you use often,
but

125
00:10:31.523 --> 00:10:34.265
it's a handy thing in some circumstances.

126
00:10:34.265 --> 00:10:38.436
So now, if I change the value
of any of these todos,

127
00:10:38.436 --> 00:10:44.746
only the todo in question is being
updated, the others are being left alone.

128
00:10:46.896 --> 00:10:50.797
A few other options that you can set are,
accesses,

129
00:10:50.797 --> 00:10:55.231
controls whether or
not the instance of a component exposes

130
00:10:55.231 --> 00:11:00.033
its props as accesses on the object
that you have a reference to.

131
00:11:00.033 --> 00:11:04.593
You can pass in a custom namespace and
you can control the tag name

132
00:11:04.593 --> 00:11:09.344
if you're compiling your Svelte
components as custom elements.

133
00:11:09.344 --> 00:11:12.955
If you wanna know more about these,
consult the API reference.

134
00:11:17.916 --> 00:11:25.613
Okay, earlier we learned about using
slots to pass content into a component.

135
00:11:25.613 --> 00:11:29.200
In this exercise,
we're making a Tic-Tac-Toe game.

136
00:11:29.200 --> 00:11:35.456
And we have a board component,
and inside.boardcomponent,

137
00:11:35.456 --> 00:11:40.294
we're passing some content
which is supposed to

138
00:11:40.294 --> 00:11:45.615
appear in each of the grid
cells defined by the board.

139
00:11:45.615 --> 00:11:49.940
So if you look inside the board component,
we are creating a grid,

140
00:11:49.940 --> 00:11:54.280
which has a certain number of columns and
a certain number of rows.

141
00:11:54.280 --> 00:11:58.123
But what's happening
here is because we have,

142
00:11:58.123 --> 00:12:01.580
a div with the slot equals game attribute,

143
00:12:01.580 --> 00:12:06.575
we're putting all of the buttons
inside the first element and

144
00:12:06.575 --> 00:12:10.819
it's not being spread out
into the rest of the grid.

145
00:12:10.819 --> 00:12:15.666
What we wanna have is
these buttons as direct

146
00:12:15.666 --> 00:12:19.603
children of the div class = board.

147
00:12:19.603 --> 00:12:24.495
And we can do that by replacing
that div with a Svelte fragment.

148
00:12:35.663 --> 00:12:40.438
All right, and so
now the buttons that we're declaring here

149
00:12:40.438 --> 00:12:44.475
are direct children of
the div class equals board.

