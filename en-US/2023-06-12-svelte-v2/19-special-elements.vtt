WEBVTT

1
00:00:00.280 --> 00:00:02.952
Okay, let's talk about bindings.

2
00:00:02.952 --> 00:00:07.026
So as we've seen,
it is a general rule in Svelte,

3
00:00:07.026 --> 00:00:11.780
data kind of flows from the top
down into your components.

4
00:00:11.780 --> 00:00:15.775
So a parent component can set
props on a child component, and

5
00:00:15.775 --> 00:00:20.805
a component can set attributes on
an element, but not the other way around.

6
00:00:20.805 --> 00:00:23.403
Sometimes it's useful to break that rule.

7
00:00:23.403 --> 00:00:26.440
So take this input element.

8
00:00:26.440 --> 00:00:29.642
Now we could use an event handler here.

9
00:00:29.642 --> 00:00:35.099
We could add, you know,
on input equals blah.

10
00:00:35.099 --> 00:00:41.304
And then we would have a event handler,
and then we would set the name from.

11
00:00:41.304 --> 00:00:46.596
The value of the input,
it gets very boilerplate very quickly.

12
00:00:46.596 --> 00:00:53.211
We can get rid of all of that and
just bind the value to the name.

13
00:00:53.211 --> 00:00:55.987
All right, so
now when I change the text in here.

14
00:00:59.422 --> 00:01:03.413
It's gonna keep the value of the input and
the value of that variable in sync.

15
00:01:07.851 --> 00:01:10.817
And we can do this with all
different kinds of inputs.

16
00:01:10.817 --> 00:01:13.123
That was a text input,
which is the default type.

17
00:01:13.123 --> 00:01:17.479
But you can use it with
numeric inputs as well.

18
00:01:17.479 --> 00:01:21.319
And because Svelte understands
that the input is numeric,

19
00:01:21.319 --> 00:01:26.306
it will turn the string value that you
get from the DOM, because, of course,

20
00:01:26.306 --> 00:01:29.333
into a number that you
can actually work with.

21
00:01:29.333 --> 00:01:33.707
So in here in our app.svelte
right now there's no binding so

22
00:01:33.707 --> 00:01:37.239
these aren't doing anything
when we edit them.

23
00:01:37.239 --> 00:01:42.005
We'll turn all of these values into
bindings by just selecting them all.

24
00:01:42.005 --> 00:01:44.865
Select one, command D,
Command D, Command D.

25
00:01:44.865 --> 00:01:47.884
And then stick a bind in front.

26
00:01:47.884 --> 00:01:52.193
And now they are all linked so
I can change that value.

27
00:01:52.193 --> 00:01:56.196
And not only is the other
input that dating, but

28
00:01:56.196 --> 00:02:00.211
the paragraph below
the labels is also dating.

29
00:02:00.211 --> 00:02:03.979
And you can think about how much work and
faffing around you have had

30
00:02:03.979 --> 00:02:08.230
to do If you're using event handlers
instead of bindings to achieve that.

31
00:02:11.787 --> 00:02:14.828
We can use it with checkbox inputs too.

32
00:02:14.828 --> 00:02:18.476
This time, instead of binding
to the value of the checkbox,

33
00:02:18.476 --> 00:02:23.352
we're gonna bind to the checked property
because that's what the DOM gives us.

34
00:02:23.352 --> 00:02:27.443
So inside here, that checked attribute,
we're gonna bind it

35
00:02:30.571 --> 00:02:35.438
And now we can interact with
the application rebinding

36
00:02:35.438 --> 00:02:39.468
the yes value to the check
state of the input.

37
00:02:39.468 --> 00:02:43.469
And when yes is true,
we show this markup instead of this markup

38
00:02:47.375 --> 00:02:51.884
And it's not just input elements,
we can also use this with select elements.

39
00:02:54.468 --> 00:03:02.410
Here we've got an array of questions that
are going inside this select element here,

40
00:03:02.410 --> 00:03:07.942
and we have a selected value
which is currently undefined.

41
00:03:07.942 --> 00:03:10.736
And then further down,

42
00:03:10.736 --> 00:03:15.763
we have an input which
is binding the answer

43
00:03:15.763 --> 00:03:21.782
to each of those questions
to our answer variable.

44
00:03:21.782 --> 00:03:26.472
And once the answer has been populated,
we're allowed to submit the form.

45
00:03:32.113 --> 00:03:36.440
So again, we take the value attribute on
the select, just like with an input, and

46
00:03:36.440 --> 00:03:37.835
we put bind in front of it.

47
00:03:41.206 --> 00:03:47.176
And it's now bound the currently
selected option to the question,

48
00:03:47.176 --> 00:03:53.563
which we can see at the bottom here,
where it says selected question 1,

49
00:03:53.563 --> 00:03:58.192
that corresponds to this
piece of markup down here.

50
00:03:58.192 --> 00:04:02.143
So the selected value is now getting
populated whenever we interact with that

51
00:04:02.143 --> 00:04:03.063
select element.

52
00:04:13.110 --> 00:04:13.841
Okay.

53
00:04:19.074 --> 00:04:23.441
We can also bind multiple
inputs using the same value.

54
00:04:23.441 --> 00:04:27.663
So common thing that you'll have when
you're dealing with forms is that you will

55
00:04:27.663 --> 00:04:31.344
have multiple radio or checkbox
inputs that relate to the same value.

56
00:04:31.344 --> 00:04:37.049
And for these we can use something called
a group binding along with the value

57
00:04:37.049 --> 00:04:42.504
attribute to keep them all in sync
with the state inside your component.

58
00:04:42.504 --> 00:04:45.514
And so radio inputs, you'll recall,
they are the circular ones that are all

59
00:04:45.514 --> 00:04:47.383
mutually exclusive if
they have the same name.

60
00:04:47.383 --> 00:04:52.750
Checkbox inputs form an array of values
because they are not mutually exclusive.

61
00:04:52.750 --> 00:04:57.580
So let's take the radio inputs first.

62
00:04:57.580 --> 00:04:58.590
These are the radio inputs.

63
00:04:58.590 --> 00:05:02.139
When you're ordering ice
cream from our ice cream app,

64
00:05:02.139 --> 00:05:05.550
you can choose one scoop or
two scoop or three scoops.

65
00:05:05.550 --> 00:05:09.312
But you cannot choose both one scoop and

66
00:05:09.312 --> 00:05:13.416
two scoops that wouldn't make any sense so

67
00:05:13.416 --> 00:05:18.204
that's a radio input which
has a name keeping them

68
00:05:18.204 --> 00:05:23.220
mutually exclusive and
will add bind group=scoops

69
00:05:26.001 --> 00:05:30.163
And now when we interact with that,

70
00:05:30.163 --> 00:05:38.639
we're updating the value of the scoops
variable inside our component.

71
00:05:38.639 --> 00:05:43.409
But before we can order our ice cream,
we need to pick some flavors as well.

72
00:05:43.409 --> 00:05:49.720
So, down with the, the checkbox input
is we're gonna use another binding.

73
00:05:56.059 --> 00:06:00.997
And this time the value that
we're binding to is an array.

74
00:06:00.997 --> 00:06:03.101
Because we can select multiple flavors.

75
00:06:03.101 --> 00:06:07.725
That's why we're using a checkbox
input rather than a radio input.

76
00:06:07.725 --> 00:06:11.815
So if I want one scoop of cookies and
cream,

77
00:06:11.815 --> 00:06:15.234
it will show my order at the bottom.

78
00:06:15.234 --> 00:06:18.434
If I try and
order more flavors than scoops,

79
00:06:18.434 --> 00:06:23.635
then we've got an if block which is
gonna tell us that's not possible.

80
00:06:23.635 --> 00:06:25.450
And again, bindings make this really easy.

81
00:06:25.450 --> 00:06:27.261
If you were using the event handlers for
this,

82
00:06:27.261 --> 00:06:30.060
then you would have to express all
that logic in a more complex fashion.

83
00:06:30.060 --> 00:06:33.557
We can use checkbox inputs if we
want to select multiple values.

84
00:06:33.557 --> 00:06:37.609
But another option that we
have is a select element with

85
00:06:37.609 --> 00:06:39.557
the multiple attribute.

86
00:06:39.557 --> 00:06:45.776
So back down here where we
have our checkbox inputs.

87
00:06:45.776 --> 00:06:48.208
We can use a select element instead.

88
00:06:48.208 --> 00:06:48.876
Okay, so

89
00:06:48.876 --> 00:06:54.651
we're gonna replace this array of checkbox
inputs with a single select element.

90
00:06:54.651 --> 00:07:00.284
I'm gonna put it outside the each, And

91
00:07:00.284 --> 00:07:04.526
we're gonna again bind its
value to the flavors array.

92
00:07:08.129 --> 00:07:11.769
Close the select element
after the each and

93
00:07:11.769 --> 00:07:16.330
then inside here,
we're just gonna have an option.

94
00:07:23.441 --> 00:07:26.324
The name of it is flavor,
so we need to call it that.

95
00:07:28.977 --> 00:07:33.382
When you see the effects of
this piece of markup down here.

96
00:07:33.382 --> 00:07:40.014
We can select multiple things by pressing
the Command key and selecting them or

97
00:07:40.014 --> 00:07:46.057
I think if you press the Shift key,
you can select a whole bunch at once.

98
00:07:46.057 --> 00:07:52.877
And we don't need to declare the value on
the option because it's just a string.

99
00:07:52.877 --> 00:07:55.532
So in the case where
the value is just a string,

100
00:07:55.532 --> 00:07:58.198
it will take the value
from inside the option.

101
00:08:08.039 --> 00:08:11.202
We can also use bindings
with text area elements.

102
00:08:11.202 --> 00:08:17.904
A text area is just kind of
like a big chunky text input.

103
00:08:17.904 --> 00:08:23.252
So as with a regular text input,
we're gonna

104
00:08:23.252 --> 00:08:28.615
replace this value with bind value=value.

105
00:08:28.615 --> 00:08:33.440
And now, when I change some text

106
00:08:33.440 --> 00:08:37.738
inside the input text area.

107
00:08:41.678 --> 00:08:47.106
It's gonna reflect that in the value
variable, which is then getting

108
00:08:47.106 --> 00:08:52.627
turned into markdown using this mark
library from npm and the html tag.

109
00:08:52.627 --> 00:08:56.342
Again, you don't want to use this with
untrusted input, but if it's within

110
00:08:56.342 --> 00:09:00.078
the user's own browser and we're using
their data, then it's totally fine

111
00:09:02.901 --> 00:09:08.129
We have a shorthand property here because
we're doing bind:value = value and

112
00:09:08.129 --> 00:09:10.479
we're repeating the value there.

113
00:09:10.479 --> 00:09:13.297
We can just get rid of that last part.

114
00:09:13.297 --> 00:09:14.797
And it will continue to work.

