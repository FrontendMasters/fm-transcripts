[00:00:00]
>> What we'd like to do now is start making it look like an actual game. And one unfortunate reality about working with emojis is that they are not reliable across browsers and across platforms. In particular, if you were to look at this on an Android device, for some reason, the emojis would all be off center and it would look kinda terrible.

[00:00:19]
So what we're gonna do, is we're gonna grab a set of SVGs that represent all of these emojis. And there's a brilliant resource that I've used a whole bunch that's really good in situations like these. It's called twemoji and it's the Twitter set of emojis. So just go to Twemoji just Google for that and go to the GitHub link down here.

[00:00:46]
And we're gonna clone this repo, Into a convenient place nearby. I'm gonna do git clone git@github.com:twitter/twemoji. This is gonna clone that repo onto my hard drive. Here's what I made earlier. And once we've done that, we can get the assets inside that repo and bring them into our own project.

[00:01:27]
So here if I make this a little bit bigger so that you can see, is in addition to the code for generating all of this stuff and all of the license information and everything, we have this SVG folder that contains an individual emoji SVG for basically every emoji that exists.

[00:01:48]
And they're all indexed by the emoji's code point sequence in hexadecimal. And if that was gibberish, then don't worry because we're gonna take the emoji sequence that we've already got in our levels data and we're gonna turn it into twemoji URLs, all right? So I've got the repo locally on my machine now.

[00:02:07]
I'm gonna open up the directory where we're building our project. And we're gonna move the the SVG assets into the static folder of our Sveltekit project. Just gonna drag that over like so. And I'm gonna rename it to twemoji. And now inside our app, we need to replace all of these emoji spans with images that referenced the SVGs that we now have in our project.

[00:02:50]
I'm gonna create a helper inside utils that will take an emoji as an input and return and a path to the twemoji SVG. So find utils and we'll create a new function. Call it something like get_twemoji URL. It's gonna take an emoji, which is a string, as its input.

[00:03:19]
And it took me a minute to figure out the logic for this. So don't worry that if this doesn't make sense just follow along. The code is the, The string spread out into an array. Then we're gonna map that, To the character code point, Represented, As a hexadecimal string.

[00:03:55]
And then we join that with a hyphen character. Then we return that with the twemoji prefix that corresponds to the directory that we just created. So inside square.svelte, we can now get rid of this span and replace it with an image tag, The source of which is going to be get_twemoji_url(emoji).

[00:04:36]
Get rid of the rest of that stuff. Save and it works, okay? So we now have twemoji in our application. A little bit big, so we need to shrink these down. Down here, you'll see that we now have this warning from the spell compiler that we have an unused CSS selector in our app because we no longer have a span.

[00:04:58]
So you can replace that with an SVG, we'll give it a width of 5ems and a height of 5ems, sorry, not SVG, image, But keep the pointer-events. And it's back to look in the way that it was before. Maybe this could be a tiny bit bigger. Let's make that 6ems.

[00:05:21]
And we're gonna want to do the same thing in the found.cell component. Get rid of the span, <img alt ={emoji} src=get_twemoji_url(emoji). And down here we'll replace that selector again with image. And so now, if we find a matching pair. Whoa, it's not what I expected. We need to replace that with a width and height.

[00:06:00]
All right, that looks a little bit nicer.

