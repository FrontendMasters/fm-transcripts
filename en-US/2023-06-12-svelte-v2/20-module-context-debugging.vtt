WEBVTT

1
00:00:00.240 --> 00:00:03.227
So in all the examples that
we've looked at so far,

2
00:00:03.227 --> 00:00:07.824
the script block contains code that
runs when each component is initialized.

3
00:00:07.824 --> 00:00:11.190
And most of the time that
is all that you will need.

4
00:00:11.190 --> 00:00:12.067
Very occasionally,

5
00:00:12.067 --> 00:00:15.193
you will need to run some code outside
of an individual component instance.

6
00:00:15.193 --> 00:00:20.787
So if you go back to our
audio example familiar.

7
00:00:20.787 --> 00:00:24.999
One thing about this that's not so
great is that you can play,

8
00:00:24.999 --> 00:00:28.166
all of these tracks simultaneously, right?

9
00:00:28.166 --> 00:00:32.780
This is not what we want
in a music player app.

10
00:00:32.780 --> 00:00:37.100
It'd be better if we could stop
the current audio from playing when a new

11
00:00:37.100 --> 00:00:38.475
audio player starts.

12
00:00:38.475 --> 00:00:42.591
And we can do that by
declaring some module context.

13
00:00:42.591 --> 00:00:49.494
Inside AudioPlayer.svelte,
we're gonna create a new script block,

14
00:00:49.494 --> 00:00:55.724
but this time we're gonna add
this context = module attribute.

15
00:00:59.359 --> 00:01:04.932
Inside that we're gonna
declare a value current.

16
00:01:04.932 --> 00:01:09.284
And all of the instances of
audio player can see that value.

17
00:01:12.623 --> 00:01:17.885
And so on our audio player,
we can add an event listener.

18
00:01:17.885 --> 00:01:19.379
When the audio starts playing,

19
00:01:24.252 --> 00:01:29.022
We check if there's an existing audio

20
00:01:29.022 --> 00:01:34.394
element playing, and if so, we pause it.

21
00:01:35.726 --> 00:01:40.640
Right, if this audio
element is not current,

22
00:01:40.640 --> 00:01:45.050
and if the current exists, pause it, and

23
00:01:45.050 --> 00:01:50.603
change the value of current
to be the current audio.

24
00:01:56.023 --> 00:01:58.104
Right, and
now when we start playing these,

25
00:01:58.104 --> 00:02:00.107
[MUSIC]

26
00:02:00.107 --> 00:02:03.795
Each new audio player
will stop the last one.

27
00:02:10.315 --> 00:02:15.059
We can also export things
from the module context.

28
00:02:15.059 --> 00:02:18.076
So again back in AudioPlayer.svelte,

29
00:02:18.076 --> 00:02:23.220
we have this module context, and
we would like to make it possible for

30
00:02:23.220 --> 00:02:27.229
a consumer of this component
to stop all of the audio.

31
00:02:27.229 --> 00:02:30.170
So create a new function, stopAll.

32
00:02:34.643 --> 00:02:38.598
And if there is a current audio element,
we'll pause it.

33
00:02:38.598 --> 00:02:44.272
And then now inside our App.svelt,
we can now import the named function

34
00:02:44.272 --> 00:02:49.305
that we just declared,
just like any other JavaScript module.

35
00:02:54.464 --> 00:02:59.003
And we can add a new button
below the audio tracks.

36
00:03:05.719 --> 00:03:12.507
And we click it,
we just call that function.

37
00:03:12.507 --> 00:03:16.661
[MUSIC]

38
00:03:16.661 --> 00:03:18.738
Works as expected.

39
00:03:18.738 --> 00:03:22.982
So you cannot have a default
export from your script context =

40
00:03:22.982 --> 00:03:26.666
module because the component
is the default export.

41
00:03:26.666 --> 00:03:29.802
Yep, it's basically just a normal
JavaScript module, and so

42
00:03:29.802 --> 00:03:32.599
you have all of the power of
a normal JavaScript module.

43
00:03:32.599 --> 00:03:36.382
Does anyone have any questions
about module context?

44
00:03:38.210 --> 00:03:40.097
All right, we're getting very close,
yes, Chris.

45
00:03:40.097 --> 00:03:46.745
&gt;&gt; What was the purpose of instantiating
current in a separate script block?

46
00:03:46.745 --> 00:03:51.370
&gt;&gt; So if you were to declare
current inside the normal script,

47
00:03:51.370 --> 00:03:54.711
this is scoped to the component instance.

48
00:03:54.711 --> 00:03:59.534
So inside here, we can change
the value inside the component,

49
00:03:59.534 --> 00:04:03.544
but it doesn't impact any
of the other components.

50
00:04:03.544 --> 00:04:07.050
By having it up here,
this is part of the module, and

51
00:04:07.050 --> 00:04:11.533
all of the instances of this
component can read the same variable.

52
00:04:11.533 --> 00:04:14.272
&gt;&gt; Does this affect after update?

53
00:04:14.272 --> 00:04:14.856
I mean,

54
00:04:14.856 --> 00:04:20.541
does it trigger a rerender across all of
their components sharing this context?

55
00:04:20.541 --> 00:04:21.195
&gt;&gt; No, it does not.

56
00:04:21.195 --> 00:04:27.337
So the values inside the context=module,
these are not reactive in the same

57
00:04:27.337 --> 00:04:33.683
way that variables inside the component's
normal script block are reactive.

58
00:04:33.683 --> 00:04:37.856
This is just a regular JavaScript
variable with no magic applied to it.

59
00:04:37.856 --> 00:04:41.601
If you do want components to be able
to react to changes in this data,

60
00:04:41.601 --> 00:04:45.233
that's when you should use a store
instead of a normal variable.

61
00:04:45.233 --> 00:04:48.665
Okay, so sometimes it's useful to
be able to inspect a piece of data

62
00:04:48.665 --> 00:04:50.483
as it's flowing through your app.

63
00:04:50.483 --> 00:04:55.322
You can use console.log liberally
inside your markup if you want.

64
00:04:55.322 --> 00:04:59.836
But if you wanna add a debugger
statement inside your component markup,

65
00:04:59.836 --> 00:05:04.350
you can do that with the debug tag with
a comma separated list of the values

66
00:05:04.350 --> 00:05:05.981
that you want to inspect.

67
00:05:05.981 --> 00:05:11.692
So in our App.svelte here,
we've got a console.log of user,

68
00:05:11.692 --> 00:05:18.487
and when we change the value of that,
it's gonna get logged to the console.

69
00:05:18.487 --> 00:05:23.157
This is easiest to see if I
open this in a separate window.

70
00:05:23.157 --> 00:05:24.550
Let's get rid of all of the junk.

71
00:05:24.550 --> 00:05:28.841
If we start typing in here, you'll see
that it does in fact get logged out.

72
00:05:31.951 --> 00:05:33.950
But we can do one better than that.

73
00:05:33.950 --> 00:05:37.745
We can get rid of the console.log and
replace it with a debug tag.

74
00:05:42.306 --> 00:05:45.970
And now you'll see that because we
have devtools open, we've actually

75
00:05:45.970 --> 00:05:50.066
paused execution of the component and
we can start to see these local variables.

76
00:05:50.066 --> 00:05:52.176
And we can interact with them and

77
00:05:52.176 --> 00:05:56.248
understand how the data is
flowing through our application.

78
00:05:56.248 --> 00:06:02.869
And that concludes parts one and
two of the Svelte tutorial.

79
00:06:02.869 --> 00:06:05.725
You basically know everything
there is to know about Svelte now.

80
00:06:05.725 --> 00:06:11.357
All of the features that
Svelte itself has to offer.

81
00:06:11.357 --> 00:06:16.227
So hopefully, you've learned
something during this process,

82
00:06:16.227 --> 00:06:18.972
whether it's entirely new things or

83
00:06:18.972 --> 00:06:23.145
a refresher of things that you
are a little bit rusty on.

84
00:06:23.145 --> 00:06:27.493
But for now, you should take a break,
pat yourself on the back, and

85
00:06:27.493 --> 00:06:30.257
feel good about becoming a Svelte expert.

