WEBVTT

1
00:00:00.000 --> 00:00:02.930
Let's start adding some logic for
this game.

2
00:00:02.930 --> 00:00:05.315
We'll do it in the Game.svelte component.

3
00:00:07.979 --> 00:00:12.268
First, we're gonna import the levels
from the module that we just created.

4
00:00:18.204 --> 00:00:24.544
And we're gonna have a few
different values here,

5
00:00:24.544 --> 00:00:28.525
we're gonna have a size value,

6
00:00:28.525 --> 00:00:32.957
we're gonna have a grid of emojis.

7
00:00:32.957 --> 00:00:35.051
Initialize that to an empty array, and

8
00:00:35.051 --> 00:00:39.434
we're gonna keep track of the pairs that
we've found as we're playing the game.

9
00:00:45.737 --> 00:00:50.584
So the first task is to create
a grid from the set of emojis

10
00:00:50.584 --> 00:00:52.965
that we got in levels.ts.

11
00:00:52.965 --> 00:00:55.445
So let's create a function,
call it create_grid.

12
00:00:57.226 --> 00:00:59.755
And that's gonna take
a level as its input.

13
00:01:02.748 --> 00:01:06.321
Now, right now, we don't know what kind of
object that is because we haven't declared

14
00:01:06.321 --> 00:01:08.710
it, and this is where TypeScript
becomes really useful.

15
00:01:08.710 --> 00:01:13.466
At the top here,
I'm gonna add a lang = ts attribute.

16
00:01:13.466 --> 00:01:18.380
And that now allows us to start using
TypeScript inside this component.

17
00:01:18.380 --> 00:01:21.425
Our grid is gonna be an array of strings.

18
00:01:21.425 --> 00:01:27.846
found is also gonna be an array of
strings, size is gonna be a number,

19
00:01:27.846 --> 00:01:34.295
and the thing that gets passed into
create_grid is gonna be a level.

20
00:01:34.295 --> 00:01:38.479
And we need to import that as
well from our levels module.

21
00:01:42.486 --> 00:01:49.141
We need to have that in
a separate type declaration,

22
00:01:49.141 --> 00:01:53.236
import type Level from levels.

23
00:01:53.236 --> 00:01:57.801
So ultimately, what we want to have is
a user interface that allows us to select

24
00:01:57.801 --> 00:02:01.482
a different level and
create all of these values on that basis.

25
00:02:01.482 --> 00:02:05.466
But for now, we're just gonna
hard-code easy mode into our app.

26
00:02:05.466 --> 00:02:11.348
So const level = levels 0 cuz
that's the only one that we got.

27
00:02:11.348 --> 00:02:14.818
size is gonna be level.size,

28
00:02:14.818 --> 00:02:19.894
then grid is gonna be
created from the level.

29
00:02:22.422 --> 00:02:25.431
And you can see that it's throwing
an error because we're not currently

30
00:02:25.431 --> 00:02:27.561
returning an array of
strings from create_grid.

31
00:02:31.147 --> 00:02:34.610
The first thing we wanna do is create
a clone of the emojis array so

32
00:02:34.610 --> 00:02:37.511
that we can start plucking
emojis out of it at random.

33
00:02:37.511 --> 00:02:39.988
We don't want to mutate the original data.

34
00:02:41.922 --> 00:02:46.339
So create const copy = level.emoji,
and you can see that

35
00:02:46.339 --> 00:02:51.587
TypeScript is giving us all of
the properties to autocomplete that.

36
00:02:51.587 --> 00:02:54.142
level.emojis.slice.

37
00:02:58.228 --> 00:03:01.992
And our task is to create a set of pairs.

38
00:03:01.992 --> 00:03:07.956
So const pairs = another array,
that's gonna be an array of strings.

39
00:03:11.873 --> 00:03:14.467
And if we have a four by four grid,

40
00:03:14.467 --> 00:03:19.489
that means we need eight pairs,
four times four divided by two.

41
00:03:19.489 --> 00:03:23.241
So in a loop for let i = 0,

42
00:03:23.241 --> 00:03:29.384
i &lt; level.size times level.size / 2,

43
00:03:29.384 --> 00:03:32.966
or if you wanna be fancy,

44
00:03:32.966 --> 00:03:38.447
you can use the times times operator,

45
00:03:40.160 --> 00:03:43.482
i += 1.

46
00:03:43.482 --> 00:03:47.668
Inside here,
we need to pick an emoji at random.

47
00:03:47.668 --> 00:03:52.645
Do that with const index = Math.floor of

48
00:03:52.645 --> 00:03:57.915
Math.random times the length of our copy.

49
00:04:08.278 --> 00:04:11.884
And we wanna get the value at that index,
and then we wanna splice it out of

50
00:04:11.884 --> 00:04:14.684
that copy so
that we can't accidentally pick it again.

51
00:04:17.195 --> 00:04:23.059
Copy.splice index, we'll take that
one element out of the array,

52
00:04:25.454 --> 00:04:31.739
And we'll push the emoji
into our pairs array.

53
00:04:31.739 --> 00:04:37.159
All right, so at this point,
we should have eight emojis in an array.

54
00:04:40.909 --> 00:04:43.873
So the first thing we need to do,
obviously, is duplicate that list.

55
00:04:49.450 --> 00:04:54.153
And at that point, we've got enough to
fill a grid, so we can return that.

56
00:04:54.153 --> 00:04:58.264
And we'll see that that red squiggly
up there that was there a second ago.

57
00:04:58.264 --> 00:05:01.966
Right now that we're returning the string,
that disappears.

58
00:05:05.244 --> 00:05:09.286
All right, we need to pass that
data into the grid component so

59
00:05:09.286 --> 00:05:10.775
that we can render it.

60
00:05:10.775 --> 00:05:12.446
We'll do that down here.

61
00:05:14.420 --> 00:05:19.571
And it's gonna yell at us because grid
is not a prop on the grid component.

62
00:05:19.571 --> 00:05:21.597
Let's change that,
let's go over to Grid.svelte.

63
00:05:21.597 --> 00:05:27.415
I'm gonna press Cmd+P,
type grid to open that.

64
00:05:27.415 --> 00:05:33.275
And in our script block, we know how to
declare props, we do export let grid.

65
00:05:33.275 --> 00:05:35.867
Because we're in TypeScript land,

66
00:05:35.867 --> 00:05:40.558
we're gonna use string so
that we know what type of property it is.

67
00:05:40.558 --> 00:05:44.323
But we need to tell Svelte that
this is a TypeScript component.

68
00:05:44.323 --> 00:05:49.214
So you had the lang = ts there.

69
00:05:49.214 --> 00:05:52.777
And it's got a yellow squiggly because
we're not actually using it anywhere in

70
00:05:52.777 --> 00:05:53.532
the component.

71
00:05:53.532 --> 00:05:57.082
So let's replace this hard-coded
Array 16 with the grid.

72
00:06:01.734 --> 00:06:06.268
And then we can pass the emoji
down into the square component.

73
00:06:10.404 --> 00:06:11.749
And it's the same deal,

74
00:06:11.749 --> 00:06:15.351
the square component is not expecting
an emoji prop at this point.

75
00:06:15.351 --> 00:06:21.882
So we need to go over to Square.svelte and
define that prop First,

76
00:06:21.882 --> 00:06:28.871
we've gotta create our script,
we'll add the lang = ts,

77
00:06:36.130 --> 00:06:39.452
And declare the emoji prop as a string.

78
00:06:39.452 --> 00:06:45.095
Now, inside the square, We'll

79
00:06:45.095 --> 00:06:50.281
add a span and render that emoji.

80
00:06:50.281 --> 00:06:52.922
Right, and
you can see it's pretty subtle, but

81
00:06:52.922 --> 00:06:56.740
in the top left of each of those squares,
you can now see some content.

82
00:06:56.740 --> 00:07:01.867
Make it a little bit bigger
by adding a span selector and

83
00:07:01.867 --> 00:07:05.665
adding, let's say, 5 ems, like so.

84
00:07:05.665 --> 00:07:08.048
All right, so far so
good, although obviously,

85
00:07:08.048 --> 00:07:09.705
we would like that to be centered.

86
00:07:09.705 --> 00:07:14.813
So by this point,
you know the drill, display flex,

87
00:07:14.813 --> 00:07:19.819
justify-content center,
align-items center.

88
00:07:23.360 --> 00:07:26.525
And now, our emojis are nicely centered.

