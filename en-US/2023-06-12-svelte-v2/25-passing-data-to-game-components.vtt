WEBVTT

1
00:00:00.000 --> 00:00:03.726
For those of you who haven't used
context in other frameworks,

2
00:00:03.726 --> 00:00:08.211
context APIs are essentially a mechanism
for components to talk to each other

3
00:00:08.211 --> 00:00:13.990
without passing data and functions around
as props and without dispatching events.

4
00:00:13.990 --> 00:00:17.194
It's not a feature that you will tend
to use a lot in your own apps, but

5
00:00:17.194 --> 00:00:18.085
it is a useful one.

6
00:00:18.085 --> 00:00:23.170
It's something that's more frequently used
in the context of a component library.

7
00:00:23.170 --> 00:00:25.982
But it's worth understanding how it works.

8
00:00:25.982 --> 00:00:31.729
So in this exercise, we've got
a blank Canvas here and our task is

9
00:00:31.729 --> 00:00:38.540
to recreate this piece of artwork called
shutter by a chap named George Nees.

10
00:00:38.540 --> 00:00:42.154
He was one of the pioneers
of computer driven artwork.

11
00:00:42.154 --> 00:00:43.060
I'm gonna use that.

12
00:00:43.060 --> 00:00:47.153
We're gonna use the Canvas API
to rebuild this.

13
00:00:47.153 --> 00:00:52.724
So, App.svelte is instantiation
this Canvas element,

14
00:00:52.724 --> 00:00:58.190
and it's putting an array of
squares inside the Canvas.

15
00:01:00.339 --> 00:01:04.154
The Canvas is as we've seen
as this very imperative API,

16
00:01:04.154 --> 00:01:07.650
it doesn't normally work with components.

17
00:01:07.650 --> 00:01:14.413
The context API allows us to make
components that draw to a Canvas.

18
00:01:18.260 --> 00:01:23.097
Inside the Canvas component,
we have this addItem function,

19
00:01:23.097 --> 00:01:26.473
and what addItem does
is it calls onMount and

20
00:01:26.473 --> 00:01:31.035
adds a function that is gonna
render something to a Canvas,

21
00:01:31.035 --> 00:01:34.975
to a set that we have locally
to the Canvas element.

22
00:01:34.975 --> 00:01:40.390
And then when the component is removed,
it'll take that out of the set.

23
00:01:41.550 --> 00:01:45.541
Every time there's any
update to the state,

24
00:01:45.541 --> 00:01:48.901
then it's gonna use that await tick,

25
00:01:48.901 --> 00:01:53.117
to redraw the Canvas,
to reflect the new data.

26
00:01:53.117 --> 00:01:58.092
So what we need to do,
our task is to make this addItem function

27
00:01:58.092 --> 00:02:01.823
available to the square.svelte component,

28
00:02:01.823 --> 00:02:06.810
and we can do that by first
importing set context from svelte.

29
00:02:09.053 --> 00:02:10.300
And then calling it.

30
00:02:12.519 --> 00:02:15.120
With a name for the context.

31
00:02:15.120 --> 00:02:17.374
We're gonna use the word Canvas,
but it can be anything,

32
00:02:17.374 --> 00:02:18.802
it doesn't even need to be a string.

33
00:02:20.940 --> 00:02:24.523
And we'll pass that addItem function.

34
00:02:24.523 --> 00:02:29.950
And then inside square,
which is a child of Canvas.

35
00:02:29.950 --> 00:02:34.000
In the sense that app.svelte
contains Canvas inside that it's

36
00:02:34.000 --> 00:02:35.500
got a bunch of squares.

37
00:02:35.500 --> 00:02:39.060
We can use the opposite function,
getContext.

38
00:02:46.529 --> 00:02:50.674
And when this component is created,
we're gonna get the current context so

39
00:02:50.674 --> 00:02:52.950
that we get a reference to that function.

40
00:02:55.296 --> 00:03:00.196
And we're gonna pass in the draw
function that is defined

41
00:03:00.196 --> 00:03:03.370
inside Square.svelte, right?.

42
00:03:03.370 --> 00:03:07.197
And if we bring this up a little bit so
you can see it,

43
00:03:07.197 --> 00:03:09.336
it is in fact drawing a grid.

44
00:03:09.336 --> 00:03:12.230
It's a little boring though,
we could add some randomness here.

45
00:03:13.320 --> 00:03:19.546
So inside App.svelte Where

46
00:03:19.546 --> 00:03:23.187
we're passing the props into the square,

47
00:03:23.187 --> 00:03:28.558
we can add a little bit of
randomness with this jitter utility.

48
00:03:28.558 --> 00:03:33.915
Right, the further down we get,
the higher the value of R, R stands for

49
00:03:33.915 --> 00:03:38.915
row in this context, so that as
with the original artwork it starts

50
00:03:38.915 --> 00:03:43.950
out very regular and then starts to
get more raggedy as we get down.

51
00:03:45.650 --> 00:03:47.782
We'll do the same thing with the Y value.

52
00:03:55.410 --> 00:03:58.548
And then finally we'll add some rotate.

53
00:04:15.750 --> 00:04:21.331
All right, and I think that's pretty
close to the original artwork,

54
00:04:21.331 --> 00:04:26.166
we're using a seated pseudorandom
number generator here.

55
00:04:26.166 --> 00:04:30.941
So we can change that seed and
get a different set of

56
00:04:30.941 --> 00:04:35.390
random numbers until we
find one that we like.

57
00:04:37.581 --> 00:04:41.457
Now, just like onMount and
beforeUpdate and afterUpdate,

58
00:04:41.457 --> 00:04:46.777
you have to call setContext and getContext
while your component is initializing,

59
00:04:46.777 --> 00:04:50.280
that's how we link the context
to the component tree.

60
00:04:52.500 --> 00:04:56.682
Sometimes you need to have data
that is changing in some parent and

61
00:04:56.682 --> 00:05:01.484
you need to build a response to that
changing data in your child component.

62
00:05:01.484 --> 00:05:07.479
And when you need to do that, you can pass
a store in as your context as shown here.

