WEBVTT

1
00:00:00.240 --> 00:00:03.271
So in all the examples that
we've looked at so far,

2
00:00:03.271 --> 00:00:08.000
the script block contains code that
runs when each component is initialized.

3
00:00:08.000 --> 00:00:11.300
And most of the time that
is all that you'll need.

4
00:00:11.300 --> 00:00:12.331
Very occasionally,

5
00:00:12.331 --> 00:00:16.004
you will need to run some code outside
of an individual component instance.

6
00:00:16.004 --> 00:00:21.044
So if you go back to our audio example
from earlier, one thing about this

7
00:00:21.044 --> 00:00:26.509
that's not so great is that you can
play all of these tracks simultaneously,

8
00:00:26.509 --> 00:00:27.544
[MUSIC]

9
00:00:27.544 --> 00:00:28.264
Right?

10
00:00:28.264 --> 00:00:31.907
This is not what we
want in a music player.

11
00:00:31.907 --> 00:00:32.666
[MUSIC]

12
00:00:32.666 --> 00:00:37.226
It'd be better if we could stop
the current audio from playing when a new

13
00:00:37.226 --> 00:00:42.710
audio player starts, and we can do
that by declaring some module context.

14
00:00:42.710 --> 00:00:47.160
Inside AudioPlayer.svelte,
we're gonna create a new script block, but

15
00:00:47.160 --> 00:00:50.789
this time we're gonna add this
context = module attribute.

16
00:00:59.239 --> 00:01:04.290
Inside there,
we're gonna declare a value current, and

17
00:01:04.290 --> 00:01:09.143
all of the instances of
AudioPlayer can see that value.

18
00:01:12.608 --> 00:01:17.053
And so on our AudioPlayer,
we can add an event listener,

19
00:01:17.053 --> 00:01:19.932
that when the audio starts playing,

20
00:01:24.267 --> 00:01:30.587
We check if there's an existing audio
element playing, and if so, we pause it.

21
00:01:35.542 --> 00:01:40.833
Right, if this audio
element is not current and

22
00:01:40.833 --> 00:01:44.801
if the current exists, pause it and

23
00:01:44.801 --> 00:01:50.636
change the value of current
to be the current audio.

24
00:01:55.880 --> 00:01:58.261
Right, and now when we start playing this

25
00:01:58.261 --> 00:02:00.114
[MUSIC]

26
00:02:00.114 --> 00:02:04.404
Each new AudioPlayer
will stop the last one.

27
00:02:04.404 --> 00:02:14.099
[SOUND] We can also export
things from the module context.

28
00:02:14.099 --> 00:02:17.203
So again, back in AudioPlayer.svelte,

29
00:02:17.203 --> 00:02:22.204
we have this module context, and
we would like to make it possible for

30
00:02:22.204 --> 00:02:26.100
a consumer of this component
to stop all of the audio.

31
00:02:27.350 --> 00:02:30.276
So create a new function, stopAll.

32
00:02:34.596 --> 00:02:38.595
And if there is a current audio element,
we'll pause it.

33
00:02:38.595 --> 00:02:43.766
And then now inside our App.svelte,
we can now import the named

34
00:02:43.766 --> 00:02:49.725
function that we just declared,
just like any other JavaScript module.

35
00:02:54.400 --> 00:02:59.160
And we can add a new button
below the audio tracks.

36
00:03:05.720 --> 00:03:10.529
When we click it, and
just call that function.

37
00:03:10.529 --> 00:03:16.588
[MUSIC]

38
00:03:16.588 --> 00:03:17.640
Works as expected.

39
00:03:19.020 --> 00:03:22.971
So you cannot have a default export from
your script context = module because

40
00:03:22.971 --> 00:03:26.880
the component is the default export,
but other than that you can.

41
00:03:26.880 --> 00:03:29.468
Yeah, it's basically just
a normal JavaScript module and so

42
00:03:29.468 --> 00:03:32.650
you have all of the power of
a normal JavaScript module.

43
00:03:32.650 --> 00:03:38.055
Does anyone have any questions
about module context?

44
00:03:38.055 --> 00:03:39.454
All right, we're getting very close.

45
00:03:39.454 --> 00:03:40.020
Yes, Chris.

46
00:03:40.020 --> 00:03:45.650
&gt;&gt; What was the purpose of instantiating
current in a separate script block?

47
00:03:46.900 --> 00:03:51.373
&gt;&gt; So if you were to declare
current inside the normal script,

48
00:03:51.373 --> 00:03:54.840
this is scope to the component instance.

49
00:03:54.840 --> 00:03:59.755
So inside here we can change
the value inside the component, but

50
00:03:59.755 --> 00:04:03.500
it doesn't impact any of
the other components.

51
00:04:03.500 --> 00:04:06.818
By having it up here,
this is part of the module and

52
00:04:06.818 --> 00:04:11.670
all of the instances of this
component can read the same variable.

53
00:04:11.670 --> 00:04:14.500
&gt;&gt; Does this affect after update?

54
00:04:14.500 --> 00:04:18.839
I mean, does it trigger a rerender across
all of their components sharing this

55
00:04:18.839 --> 00:04:19.440
context?

56
00:04:20.630 --> 00:04:25.011
&gt;&gt; No it does not, so
the values inside the context = module,

57
00:04:25.011 --> 00:04:28.866
these are not reactive in
the same way that variables

58
00:04:28.866 --> 00:04:33.865
inside the components normal
script block are reactive.

59
00:04:33.865 --> 00:04:38.055
This is just a regular JavaScript
variable with no magic applied to it.

60
00:04:38.055 --> 00:04:41.371
If you do want components to be able
to react to changes in this data,

61
00:04:41.371 --> 00:04:45.455
that's when you should use a store
instead of a normal variable.

62
00:04:45.455 --> 00:04:49.664
Okay, so sometimes it's useful to be able
to inspect a piece of data as it's flown

63
00:04:49.664 --> 00:04:50.645
through your app.

64
00:04:50.645 --> 00:04:55.240
You can use console.log,
liberally inside your markup if you want.

65
00:04:55.240 --> 00:04:59.527
But if you wanna add a debugger
statement inside your component markup,

66
00:04:59.527 --> 00:05:01.564
you can do that with the debug tag,

67
00:05:01.564 --> 00:05:06.140
with a comma separated list of
the values that you want to inspect.

68
00:05:06.140 --> 00:05:11.365
So in our App.svelte here,
we've got a console.log of user,

69
00:05:11.365 --> 00:05:17.290
and when we change the value of that
is going to get logged to the console.

70
00:05:18.700 --> 00:05:21.850
This is easiest to see if I
open this in a separate window.

71
00:05:23.240 --> 00:05:24.690
Let's get rid of all of the junk.

72
00:05:24.690 --> 00:05:28.963
If we start typing in here, you'll see
that it does in fact get logged out.

73
00:05:31.590 --> 00:05:36.407
But we can do one better than that,
we can get rid of the console.log and

74
00:05:36.407 --> 00:05:38.348
replace it with a debug tag.

75
00:05:42.222 --> 00:05:45.055
And now you'll see that
because we have DevTools open,

76
00:05:45.055 --> 00:05:47.950
we've actually paused execution
of the component, and

77
00:05:47.950 --> 00:05:51.746
we can start to see these local variables
and we can interact with them, and

78
00:05:51.746 --> 00:05:54.905
understand how the data is
flowing through our application.

79
00:05:56.465 --> 00:06:01.135
And that concludes parts one and
two of the Svelte tutorial.

80
00:06:03.040 --> 00:06:07.308
You basically know everything
there is to know about Svelte now,

81
00:06:07.308 --> 00:06:11.530
all of the features that
Svelte itself has to offer.

82
00:06:11.530 --> 00:06:16.053
So hopefully you've learned
something during this process,

83
00:06:16.053 --> 00:06:20.831
whether it's entirely new things or
a refresher of things that you

84
00:06:20.831 --> 00:06:25.266
are a little bit rusty on, but
for now you should take a break,

85
00:06:25.266 --> 00:06:30.325
pat yourself on the back and
feel good about becoming a Svelte expert.

