WEBVTT

1
00:00:00.080 --> 00:00:03.195
So we've got data going down
into our components, but

2
00:00:03.195 --> 00:00:07.710
now we need to get some user interaction
causing events to come back up.

3
00:00:07.710 --> 00:00:08.740
Otherwise we don't have a game.

4
00:00:10.400 --> 00:00:14.737
So we'll begin by adding a button
inside the square component.

5
00:00:18.306 --> 00:00:22.516
And we're gonna use the event forwarding
shorthand that we learned earlier.

6
00:00:22.516 --> 00:00:25.099
Let's do on:click, like that.

7
00:00:27.662 --> 00:00:32.420
And we're gonna give the button some
styles so that it fills the square.

8
00:00:33.840 --> 00:00:40.621
We'll give it a position:absolute,
width:100%, height:100%.

9
00:00:40.621 --> 00:00:43.030
You now see the button filling the square.

10
00:00:43.030 --> 00:00:46.936
And because we have that click handler,
we can start listening for

11
00:00:46.936 --> 00:00:48.270
that inside our grid.

12
00:00:49.960 --> 00:00:52.440
We start typing on click.

13
00:00:52.440 --> 00:00:57.170
It already knows that click is one of the
events that this component can broadcast.

14
00:00:57.170 --> 00:01:01.816
So inside there,
we'll start adding some logic.

15
00:01:06.265 --> 00:01:10.835
Now, there are various states that
the game could be in when someone

16
00:01:10.835 --> 00:01:13.560
clicks on one of these buttons.

17
00:01:13.560 --> 00:01:17.851
The first state is the one that we
have now, nothing is selected, or

18
00:01:17.851 --> 00:01:21.830
there could be one card that has so
far been selected.

19
00:01:21.830 --> 00:01:23.600
In other words,
the card has been flipped over and

20
00:01:23.600 --> 00:01:25.920
we're revealing what is on the other side.

21
00:01:25.920 --> 00:01:27.570
And then we're gonna
select the second one.

22
00:01:27.570 --> 00:01:32.040
Or we could be in a state where two
cards have already been selected.

23
00:01:32.040 --> 00:01:33.906
We need to handle each
of those separately.

24
00:01:44.874 --> 00:01:49.250
So the easiest one is,
what if nothing is selected so far?

25
00:01:49.250 --> 00:01:53.100
Well, we need some way of representing
that state inside this component.

26
00:01:53.100 --> 00:01:56.890
So I'm gonna create some more variables,
we'll call them a and b.

27
00:01:59.000 --> 00:02:03.039
a is a string, in fact, no,
we're gonna use an index here, so

28
00:02:03.039 --> 00:02:05.250
it's gonna be a number.

29
00:02:05.250 --> 00:02:08.675
a is a number, and b is a number.

30
00:02:08.675 --> 00:02:13.004
And in fact,
we can initialize these to -1.

31
00:02:13.004 --> 00:02:18.409
That can be our way of representing
the a and b are both currently unselected.

32
00:02:18.409 --> 00:02:22.370
And when we do select one of these, we can
set that to the index within the array.

33
00:02:23.650 --> 00:02:26.959
In order to know the index
inside the array,

34
00:02:26.959 --> 00:02:29.916
we need to add the ,i to our each block.

35
00:02:33.721 --> 00:02:39.256
And it'll begin by saying
that if a is -1 and

36
00:02:39.256 --> 00:02:43.928
b is -1, then nothing is selected.

37
00:02:43.928 --> 00:02:50.336
So in response, we need to assign
the current index to the a value.

38
00:02:53.398 --> 00:02:55.705
Do that like that.

39
00:02:55.705 --> 00:03:00.164
All right, if I hit Save, Pretty is gonna
format all of my messy code for me.

40
00:03:02.679 --> 00:03:08.064
Okay, well, how do we represent
that new state in our app?

41
00:03:08.064 --> 00:03:12.750
Well, we're gonna need to pass
that information back down into

42
00:03:12.750 --> 00:03:14.499
the Square component.

43
00:03:14.499 --> 00:03:19.255
So we'll add a new prop on the Square,
export let selected,

44
00:03:19.255 --> 00:03:21.501
that's gonna be a boolean.

45
00:03:24.031 --> 00:03:32.500
And we can add a class to div
class="square" like this.

46
00:03:32.500 --> 00:03:36.091
In fact, let's call it flipped, because
that's how it's gonna be represented in

47
00:03:36.091 --> 00:03:39.239
the user interface when we get around
to making this look more like a game.

48
00:03:42.097 --> 00:03:48.298
It's giving us an error because flipped is
not a value, so we'll make that like this.

49
00:03:48.298 --> 00:03:54.584
Okay, and then we'll add some styles for

50
00:03:54.584 --> 00:03:59.262
that state, add a flip class.

51
00:03:59.262 --> 00:04:00.740
In fact, let's add it on the button.

52
00:04:02.650 --> 00:04:05.355
Add some more ugly background colors.

53
00:04:08.175 --> 00:04:12.671
Inside our grid now, we're gonna see
that there's a red squiggly under Square

54
00:04:12.671 --> 00:04:16.308
because we are not passing in
a prop that the component expects.

55
00:04:16.308 --> 00:04:21.396
And fix that, selected =

56
00:04:21.396 --> 00:04:27.419
(a === i || b === i).

57
00:04:27.419 --> 00:04:32.467
All right, so for
each iteration of this loop, if a is 0 or

58
00:04:32.467 --> 00:04:38.044
b is 0, then the 0th element of
that array should be selected.

59
00:04:38.044 --> 00:04:41.872
So hopefully, if we've wired this
up correctly and I press one of

60
00:04:41.872 --> 00:04:46.196
these buttons now, right, it's gonna
turn that into a selected state.

61
00:04:46.196 --> 00:04:51.086
But only if we're in that state
where nothing so far was selected.

62
00:04:51.086 --> 00:04:54.558
One other little detail here, you'll
notice that if I click on the emojis,

63
00:04:54.558 --> 00:04:57.300
the button does not get clicked,
that's annoying.

64
00:04:57.300 --> 00:05:02.183
So on the span, we're gonna add
a pointer-events: none, right?

65
00:05:02.183 --> 00:05:06.628
That allows us to click anywhere
inside that button, and

66
00:05:06.628 --> 00:05:09.227
it will have the desired effect.

67
00:05:09.227 --> 00:05:11.640
All right, so
let's carry on with this logic.

68
00:05:11.640 --> 00:05:14.630
So we've handled the first state
where nothing was selected.

69
00:05:14.630 --> 00:05:20.798
Well, what about when a is selected,
but b is unselected?

70
00:05:31.583 --> 00:05:35.770
In this case,
we have we have two possibilities.

71
00:05:37.220 --> 00:05:40.370
The first possibility is
that we selected a pair.

72
00:05:40.370 --> 00:05:43.450
The second possibility is that we
selected something that was not a pair of

73
00:05:43.450 --> 00:05:44.800
the already selected element.

74
00:05:44.800 --> 00:05:46.380
So we'll have another if block in here.

75
00:05:47.630 --> 00:05:54.315
If grid(a) === grid(b), congratulations,

76
00:05:54.315 --> 00:05:59.371
we found a pair, otherwise incorrect.

77
00:06:01.588 --> 00:06:04.823
And we'll put in some logic for
that case in a minute.

78
00:06:07.712 --> 00:06:11.060
Otherwise, if neither of
those conditions are true,

79
00:06:11.060 --> 00:06:14.205
then it means that we've
already selected a and b.

80
00:06:14.205 --> 00:06:16.870
And then we need to flip those
back over and start again.

81
00:06:18.100 --> 00:06:23.878
So b is gonna revert to -1, and a is
gonna become whatever we just selected.

82
00:06:26.660 --> 00:06:32.770
So now if I click this one and
then this one, nothing's happening.

83
00:06:34.280 --> 00:06:34.906
Where did I go wrong?

84
00:06:43.850 --> 00:06:44.933
It's because I forgot to add that.

85
00:06:47.778 --> 00:06:50.810
Okay, so now we have both a and
b selected.

86
00:06:50.810 --> 00:06:54.041
If we select another one,
it will reset the selection and

87
00:06:54.041 --> 00:06:56.006
get rid of the selected state on b.

88
00:06:56.006 --> 00:07:00.722
That's okay, but in any memory game
like this, normally what happens is,

89
00:07:00.722 --> 00:07:05.374
after you've selected a pair,
they get hidden immediately afterwards.

90
00:07:05.374 --> 00:07:08.760
So that you can't stare at them and
make notes.

91
00:07:08.760 --> 00:07:12.619
So we're gonna add a timeout that makes
that happen in the case where we got

92
00:07:12.619 --> 00:07:14.433
it wrong, in the incorrect case.

93
00:07:14.433 --> 00:07:18.085
We'll do setTimeout,

94
00:07:18.085 --> 00:07:23.015
after a second we'll reset a and

95
00:07:23.015 --> 00:07:27.936
b both, to -1.

96
00:07:27.936 --> 00:07:30.318
We have to be when we set timeouts,

97
00:07:30.318 --> 00:07:34.840
because you could find a situation
where the setTimeout callback

98
00:07:34.840 --> 00:07:39.050
runs after the user has continued
selecting other squares.

99
00:07:39.050 --> 00:07:43.375
So we need to be able to
cancel that when necessary.

100
00:07:43.375 --> 00:07:47.355
So up here I'm gonna
create a new variable,

101
00:07:47.355 --> 00:07:51.994
let resetTimeout, and
that's gonna be a number.

102
00:07:51.994 --> 00:07:56.777
And then I'm gonna assign
that to the setTimeout call.

103
00:07:56.777 --> 00:07:59.584
And then basically, every time I click,
I'm just gonna clear that timeout.

104
00:07:59.584 --> 00:08:03.529
So I don't need to worry about
interactions clobbering each other.

105
00:08:11.540 --> 00:08:15.899
So hopefully, if I've done this right,
if I select two cards,

106
00:08:15.899 --> 00:08:22.060
they'll stay selected for a second,
and then they'll become unselected.

107
00:08:22.060 --> 00:08:24.666
If I select another card
within that window,

108
00:08:24.666 --> 00:08:29.205
then it will just reset the timeout and
carry on with a new selection, like so.

