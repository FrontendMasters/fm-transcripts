WEBVTT

1
00:00:00.000 --> 00:00:04.654
For those of you who haven't used context
in other frameworks context API's

2
00:00:04.654 --> 00:00:09.522
are essentially a mechanism for components
to talk to each other without passing

3
00:00:09.522 --> 00:00:13.690
data and functions around as props and
without dispatching events.

4
00:00:13.690 --> 00:00:17.339
All right, it's not a feature that you
will tend to use a lot in your own apps,

5
00:00:17.339 --> 00:00:18.418
but it is a useful one.

6
00:00:18.418 --> 00:00:23.621
It's something that's more frequently used
in the context of a component library but

7
00:00:23.621 --> 00:00:26.124
it's worth understanding how it works.

8
00:00:26.124 --> 00:00:31.680
So in this exercise, we've got
a blank Canvas here and our task is

9
00:00:31.680 --> 00:00:38.364
to recreate this piece of artwork called
Schotter by a chap named George Nees.

10
00:00:38.364 --> 00:00:42.991
He was one of the pioneers
of computer driven artwork.

11
00:00:42.991 --> 00:00:47.201
We're gonna use the Canvas API
to rebuild this.

12
00:00:47.201 --> 00:00:52.858
So App.svelte is instantiating
this Canvas element,

13
00:00:52.858 --> 00:00:58.646
and it's putting an array of
squares inside the Canvas.

14
00:01:00.576 --> 00:01:04.274
Canvas as we've seen is
this very imperative API,

15
00:01:04.274 --> 00:01:07.548
it doesn't normally work with components.

16
00:01:07.548 --> 00:01:14.636
The context API allows us to make
components that draw to a Canvas.

17
00:01:18.017 --> 00:01:23.424
Inside the Canvas component,
we have this addItem function.

18
00:01:23.424 --> 00:01:29.204
And what addItem does is it calls onMount
and adds a function that is gonna

19
00:01:29.204 --> 00:01:35.569
render something to a Canvas to a set that
we have locally to the Canvas element.

20
00:01:35.569 --> 00:01:41.093
And then when the component is removed
it will take that out of the set.

21
00:01:41.093 --> 00:01:45.431
Every time there's any
update to the state,

22
00:01:45.431 --> 00:01:53.210
then it's gonna use that await tick to
redraw the Canvas to reflect the new data.

23
00:01:53.210 --> 00:01:57.742
So what we need to do,
our task is to make this Add Item

24
00:01:57.742 --> 00:02:02.591
function available to
the square.svelte component.

25
00:02:02.591 --> 00:02:08.365
And we can do that by first
importing setContext from Svelte,

26
00:02:08.365 --> 00:02:12.805
and then calling it with a name for
the context,

27
00:02:12.805 --> 00:02:18.023
we're gonna use the word Canvas but
it can be anything,

28
00:02:18.023 --> 00:02:24.817
doesn't even need to be a string and
we'll pass that addItem function.

29
00:02:24.817 --> 00:02:30.758
And then inside square which is a child
of Canvas, in the sense the app.svelte

30
00:02:30.758 --> 00:02:35.628
contains Canvas, and
inside that it's got a bunch of squares.

31
00:02:35.628 --> 00:02:39.344
We can use the opposite
function getContext.

32
00:02:46.693 --> 00:02:50.603
When this component is created we're
gonna get the current context so

33
00:02:50.603 --> 00:02:52.931
that we get a reference to that function.

34
00:02:56.018 --> 00:03:01.170
And we're gonna pass in the Draw
a function that is defined inside

35
00:03:01.170 --> 00:03:05.946
Square.svelte, right and
if we bring this up a little bit so

36
00:03:05.946 --> 00:03:09.431
you can see it,
it is in fact drawing a grid.

37
00:03:09.431 --> 00:03:13.729
It's a little boring though,
we could add some randomness here so

38
00:03:13.729 --> 00:03:21.132
inside App.svelte Where
we're passing the props

39
00:03:21.132 --> 00:03:26.823
into the square we can add a little bit
of randomness with this jitter utility.

40
00:03:28.789 --> 00:03:34.339
Right, the further down we get
the higher the value of r, r stands for

41
00:03:34.339 --> 00:03:39.410
row in this context, so
that as with the the original artwork,

42
00:03:39.410 --> 00:03:45.563
it starts out very regular and then starts
to get more raggedy as we get down.

43
00:03:45.563 --> 00:03:48.150
We'll do the same thing with the y value.

44
00:03:56.082 --> 00:03:58.997
And then finally we'll add some rotate.

45
00:04:15.549 --> 00:04:21.397
All right, and I think that's pretty
close to the original artwork,

46
00:04:21.397 --> 00:04:26.266
were using a seeded pseudo
random number generator here.

47
00:04:26.266 --> 00:04:30.803
So we can change that seed and
get a different set of

48
00:04:30.803 --> 00:04:35.025
random numbers until we
find one that we like.

49
00:04:37.481 --> 00:04:42.020
Now, just like onMount and
before update and after update,

50
00:04:42.020 --> 00:04:48.250
you have to call setContext and getContext
while your component is initializing,

51
00:04:48.250 --> 00:04:52.347
that's how we link the context
to the component tree.

52
00:04:52.347 --> 00:04:56.614
Sometimes you need to have data
that is changing in some parent and

53
00:04:56.614 --> 00:05:01.515
you need to build a response to that
changing data in your child component.

54
00:05:01.515 --> 00:05:07.853
And when you need to do that, you can pass
a store in as your context as shown here.

