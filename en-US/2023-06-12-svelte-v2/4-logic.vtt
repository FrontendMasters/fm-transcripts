WEBVTT

1
00:00:00.000 --> 00:00:01.849
Let's talk about logic.

2
00:00:01.849 --> 00:00:07.397
HTML does not have a way of expressing
logic, like conditionals and loops.

3
00:00:07.397 --> 00:00:09.556
Svelte does.

4
00:00:09.556 --> 00:00:12.746
If you wanna conditionally
render some markup,

5
00:00:12.746 --> 00:00:16.183
we can wrap it in an if block,
which looks like this.

6
00:00:16.183 --> 00:00:21.782
Let's add some text that appears
when the count is greater than 10.

7
00:00:21.782 --> 00:00:26.564
So after the button,
open the curlies, a hash,

8
00:00:26.564 --> 00:00:32.668
if count is greater than 10, Close that,

9
00:00:32.668 --> 00:00:39.892
then we'll add some text that
says count is greater than 10.

10
00:00:39.892 --> 00:00:45.705
Now, if we click the button enough times,
lo and behold, the text appears.

11
00:00:49.982 --> 00:00:54.860
Just like in JavaScript,
an if block can have an else block.

12
00:00:54.860 --> 00:00:57.697
So in this case,
if the count is not greater than 10,

13
00:00:57.697 --> 00:00:59.928
then we know that it is between 0 and 10.

14
00:00:59.928 --> 00:01:02.759
So let's add that into
app.spell down here.

15
00:01:05.152 --> 00:01:09.352
This time,
we're gonna use a colon before the else.

16
00:01:09.352 --> 00:01:12.735
And inside there,

17
00:01:12.735 --> 00:01:18.238
counts is between 0 and 10.

18
00:01:18.238 --> 00:01:19.956
Zero is between 0 and 10.

19
00:01:19.956 --> 00:01:21.467
1 is between 0 and 10.

20
00:01:21.467 --> 00:01:24.447
All the way up to 10 is between 0 and 10.

21
00:01:24.447 --> 00:01:28.651
And then we switch into
the other half of the block.

22
00:01:28.651 --> 00:01:31.798
Okay, so let's talk about the syntax here.

23
00:01:31.798 --> 00:01:36.227
When you have plain curlies, that is
just enclosing a JavaScript expression.

24
00:01:36.227 --> 00:01:40.908
When you have the hash symbol or
the pound symbol, that is opening a block

25
00:01:40.908 --> 00:01:44.994
an if block or an each block and
there are other kinds of blocks.

26
00:01:44.994 --> 00:01:48.164
When you have a colon,
it is continuing that block.

27
00:01:48.164 --> 00:01:49.504
It's opening a new section.

28
00:01:49.504 --> 00:01:52.546
And then when you have the slash
just like with the HTML element and

29
00:01:52.546 --> 00:01:56.162
you have the angle bracket followed by
the slash, that is closing the block.

30
00:01:56.162 --> 00:01:57.798
So that's a lot of syntax
to learn in one go.

31
00:01:57.798 --> 00:02:01.769
But the good news is you basically learn
all of the syntax that Svelte inflicts

32
00:02:01.769 --> 00:02:03.004
upon you at this point.

33
00:02:06.749 --> 00:02:11.362
And you can chain multiple
conditions together with an else if.

34
00:02:11.362 --> 00:02:20.003
Let's have an intermediate step
where count is less than 5.

35
00:02:20.003 --> 00:02:24.503
Else if count is less than 5,

36
00:02:24.503 --> 00:02:28.824
oops, a little typo there.

37
00:02:36.637 --> 00:02:43.620
And then we just need to update that
bit at the bottom, and we click that.

38
00:02:43.620 --> 00:02:47.605
We're now switching between
the three branches of this if block.

39
00:02:52.339 --> 00:02:55.885
All right, now when you're building
user interfaces, very often,

40
00:02:55.885 --> 00:02:58.480
you will find yourself
working with lists of data.

41
00:02:58.480 --> 00:03:03.312
In this exercise here, we've repeated
this button markup multiple times.

42
00:03:03.312 --> 00:03:06.423
You've got a button for the red,
we've got a button for the orange, and

43
00:03:06.423 --> 00:03:08.159
then we've got a button for the yellow.

44
00:03:08.159 --> 00:03:12.384
But after that, I just got tired and
I added a to-do.

45
00:03:12.384 --> 00:03:16.052
We've still got more colors to add,
we've got an entire rainbow to show here.

46
00:03:16.052 --> 00:03:20.363
So instead of copying and
pasting and editing each of these,

47
00:03:20.363 --> 00:03:24.178
what we can do is we can render
those buttons in a list.

48
00:03:24.178 --> 00:03:29.309
So let's get rid of all but the first
button, get rid of those like so.

49
00:03:29.309 --> 00:03:37.329
And then we'll wrap the remaining
button in an each block.

50
00:03:37.329 --> 00:03:41.267
So again, we're using the hash key to open
a block, and the syntax is each colors.

51
00:03:41.267 --> 00:03:47.760
And we get a name to it as color, like so.

52
00:03:47.760 --> 00:03:51.626
And then we'll close that after the each.

53
00:03:51.626 --> 00:03:56.877
And so you can see now it is iterating
over this colors value here,

54
00:03:56.877 --> 00:04:00.427
which includes everything in the rainbow.

55
00:04:00.427 --> 00:04:06.566
But it's rendering red each time,
which is not much help.

56
00:04:06.566 --> 00:04:12.215
We wanna change that to use
the current color in each iteration.

57
00:04:12.215 --> 00:04:16.288
So we'll just replace all
of the red occurrences.

58
00:04:16.288 --> 00:04:21.766
Tip, if you do command D, then you can
select multiple selection ranges at once.

59
00:04:21.766 --> 00:04:26.770
So because I've selected this red string
here, and then I press command D.

60
00:04:26.770 --> 00:04:31.016
I can select both of these,
and edit them simultaneously.

61
00:04:31.016 --> 00:04:37.688
The ARIA label also needs updating,
that's for people with vision impairments.

62
00:04:37.688 --> 00:04:42.502
And then, background will replace
that with the actual value, and

63
00:04:42.502 --> 00:04:46.990
you'll see that our user interface
is starting to take shape.

64
00:04:48.759 --> 00:04:52.471
You can get the current index
inside an each block as

65
00:04:52.471 --> 00:04:55.159
a second argument by adding it here.

66
00:04:55.159 --> 00:04:58.761
We'll call it i, fairly conventional.

67
00:04:58.761 --> 00:05:04.326
And then inside the button,
we'll reference i+1.

68
00:05:04.326 --> 00:05:10.115
Right, and so now we have numbers
to go along with the styles.

69
00:05:10.115 --> 00:05:15.089
If we press these, you'll see that we're

70
00:05:15.089 --> 00:05:19.796
actually updating the selected value.

71
00:05:19.796 --> 00:05:21.479
So you can use that inside the Markup, but

72
00:05:21.479 --> 00:05:24.720
you can also use it inside the Event
Handler, which is what's happening here.

73
00:05:24.720 --> 00:05:25.848
When we click it,

74
00:05:25.848 --> 00:05:30.752
we're assigning the current color inside
the loop to the value of selected.

75
00:05:35.164 --> 00:05:38.468
All right, this one is a little
bit of a tricky thing to

76
00:05:38.468 --> 00:05:42.888
wrap your head around at first,
but hopefully, it'll become clear.

77
00:05:42.888 --> 00:05:48.177
By default, when you modify the value
of an each block, it will add and

78
00:05:48.177 --> 00:05:54.111
remove items at the end of the block,
and update any values that have changed.

79
00:05:54.111 --> 00:05:55.528
So let me show you what I mean.

80
00:05:55.528 --> 00:05:59.385
In this exercise, we have an each block.

81
00:05:59.385 --> 00:06:04.302
We're iterating over this things array,
which looks like this.

82
00:06:04.302 --> 00:06:06.195
Each one has an ID and a name.

83
00:06:10.009 --> 00:06:13.219
And then inside the thing component,

84
00:06:13.219 --> 00:06:17.843
we're matching the name to
the corresponding emoji.

85
00:06:17.843 --> 00:06:22.977
And we're assigning that value when
the component is first created.

86
00:06:22.977 --> 00:06:26.504
So we're linking the apple
emoji to the apple text,

87
00:06:26.504 --> 00:06:29.721
the banana emoji to the banana text,
and so on.

88
00:06:29.721 --> 00:06:33.059
But watch what happens when we start
removing things from this array.

89
00:06:33.059 --> 00:06:37.923
If we remove the apple,
then the text apple goes away, but

90
00:06:37.923 --> 00:06:40.617
the emoji apple is still there.

91
00:06:40.617 --> 00:06:45.342
And the reason for that is that we
haven't got rid of the first component.

92
00:06:45.342 --> 00:06:47.667
We got rid of the last component, but

93
00:06:47.667 --> 00:06:51.723
we're now passing the new text
into the remaining components.

94
00:06:51.723 --> 00:06:53.695
But inside thing.svelte,

95
00:06:53.695 --> 00:06:57.978
we assigned this emoji when
the component was first created.

96
00:06:57.978 --> 00:07:02.895
If you use things like React, that might
be a little bit surprising because in

97
00:07:02.895 --> 00:07:06.619
those frameworks,
things update every time you render.

98
00:07:06.619 --> 00:07:07.761
In Svelte, we don't do that.

99
00:07:07.761 --> 00:07:11.999
Svelte is deliberately designed
in a way that makes it more

100
00:07:11.999 --> 00:07:15.208
efficient to update
the content of the DOM.

101
00:07:15.208 --> 00:07:23.377
So one way that we could fix this is we
could turn this into a reactive variable.

102
00:07:23.377 --> 00:07:27.357
We could replace this const with $1 colon.

103
00:07:27.357 --> 00:07:29.891
And now should remove things,

104
00:07:29.891 --> 00:07:34.958
it'll update the value of emoji
at the same time as the new name

105
00:07:34.958 --> 00:07:40.915
is being passed in because it sees
that it depends on that changing name.

106
00:07:40.915 --> 00:07:42.443
But that's actually not what we want.

107
00:07:42.443 --> 00:07:45.698
What we want is to remove
the first component instead of

108
00:07:45.698 --> 00:07:49.184
removing the last component and
updating all of the rest.

109
00:07:49.184 --> 00:07:52.371
And to do that, we use something
called a keyed each block.

110
00:07:52.371 --> 00:07:58.290
What this means is that we, let me just
get rid of that, replace it to how it was.

111
00:07:58.290 --> 00:08:01.801
What this means is that inside each block,

112
00:08:01.801 --> 00:08:06.871
we're gonna assign each iteration
of that loop a key that will

113
00:08:06.871 --> 00:08:11.663
be used to figure out which
component needs to be removed.

114
00:08:11.663 --> 00:08:18.343
And the way that we do that is by putting
some unique value inside parentheses.

115
00:08:18.343 --> 00:08:21.270
We use thing.id.

116
00:08:21.270 --> 00:08:25.628
A little call out here,
we're using thing ID which is a number but

117
00:08:25.628 --> 00:08:28.256
you can actually put any value in here.

118
00:08:28.256 --> 00:08:32.712
It's using map internally so you can use
objects, you can use whatever it is.

119
00:08:32.712 --> 00:08:37.910
As long as when that data changes, it can
compare the new list with the old list and

120
00:08:37.910 --> 00:08:41.594
figure out what's been added and
what's been removed.

121
00:08:41.594 --> 00:08:44.515
So now if we click the button,
remove the first thing,

122
00:08:44.515 --> 00:08:47.637
it's getting rid of the first
component in its entirety.

123
00:08:47.637 --> 00:08:52.046
&gt;&gt; Is the keyword each
a reserved keyword in Svelte?

124
00:08:52.046 --> 00:08:55.788
&gt;&gt; It is reserved when
you have the hash symbol.

125
00:08:55.788 --> 00:09:00.649
You have a curly followed by a hash,
that has to be followed by if or each or

126
00:09:00.649 --> 00:09:04.344
a weight or key,
which we'll learn about in a second.

127
00:09:04.344 --> 00:09:08.815
But if you're not building a block,
then you can use it wherever you like.

128
00:09:08.815 --> 00:09:12.510
So you can use the word each for
whatever it is you're building.

129
00:09:12.510 --> 00:09:17.098
You can't use the word if or the word
await, because those are JavaScript

130
00:09:17.098 --> 00:09:21.769
keywords, but each is not a JavaScript
keyword, so that's up for grabs.

131
00:09:21.769 --> 00:09:23.974
You can use that however you like.

132
00:09:23.974 --> 00:09:27.079
&gt;&gt; What happens if the key is not unique?

133
00:09:27.079 --> 00:09:31.921
&gt;&gt; The key is not unique,
then things will break, essentially.

134
00:09:31.921 --> 00:09:36.121
I actually can't remember off the top
of my head it will throw an error or

135
00:09:36.121 --> 00:09:38.581
if it will just bulk up your application.

136
00:09:38.581 --> 00:09:41.301
I would need to check.

137
00:09:41.301 --> 00:09:43.410
The moral of the story is don't do that.

138
00:09:43.410 --> 00:09:47.382
Make sure that you are using unique
keys in your keyed each box.

139
00:09:47.382 --> 00:09:51.458
Otherwise, unexpected things will
happen and you have a mess to clean up.

140
00:09:51.458 --> 00:09:52.240
Grant.

141
00:09:52.240 --> 00:09:54.366
&gt;&gt; In the example here,
if you make the keys not unique,

142
00:09:54.366 --> 00:09:55.797
it just doesn't render anything.

143
00:09:55.797 --> 00:09:57.185
&gt;&gt; Yep, just doesn't render anything.

144
00:09:57.185 --> 00:09:57.991
Okay, there you go.

145
00:09:57.991 --> 00:09:59.070
So there's the answer.

146
00:09:59.070 --> 00:10:02.267
You need to have unique keys, otherwise,
it's gonna get very confused.

147
00:10:02.267 --> 00:10:05.017
All right, let's talk about async data.

148
00:10:05.017 --> 00:10:09.006
Most web applications are gonna need
to deal with async data at some point.

149
00:10:09.006 --> 00:10:13.988
And in Svelte,
you can use async values directly in your

150
00:10:13.988 --> 00:10:16.855
markup by using an await block.

151
00:10:16.855 --> 00:10:22.687
So in this exercise, we've got a button
that generates a random number.

152
00:10:22.687 --> 00:10:27.625
And it's actually fetching from a URL
that you can't see in this exercise.

153
00:10:27.625 --> 00:10:32.380
But it has an artificial delay attached
to it, so that it'll take a minute for

154
00:10:32.380 --> 00:10:34.004
that promise to resolve.

155
00:10:34.004 --> 00:10:39.537
And sometimes, it won't resolve,
sometimes it will reject instead.

156
00:10:39.537 --> 00:10:43.751
So we could get random number,
we have a promise.

157
00:10:43.751 --> 00:10:45.901
We wanna use that inside our markup.

158
00:10:45.901 --> 00:10:50.302
We can do so by wrapping this
content in an await block,

159
00:10:50.302 --> 00:10:55.291
as before, curly brace hash,
followed by the type of block.

160
00:10:57.568 --> 00:11:02.693
Gonna await the promise and
then we'll add a then section,

161
00:11:02.693 --> 00:11:09.472
sorry, then number, so that we can refer
to the resolve value of the promise.

162
00:11:09.472 --> 00:11:15.771
We'll then add a catch section and
give the caught error a name.

163
00:11:15.771 --> 00:11:20.569
And then we'll close the await block.

164
00:11:20.569 --> 00:11:23.200
And so inside this middle section,
the then number section,

165
00:11:23.200 --> 00:11:26.032
you can see it's giving us a warning
that we have an empty block, so

166
00:11:26.032 --> 00:11:27.613
we need to put some content in there.

167
00:11:27.613 --> 00:11:32.699
Create a paragraph, the number is number.

168
00:11:37.931 --> 00:11:41.868
And then when we catch an error,
we'll put a paragraph there as well.

169
00:11:41.868 --> 00:11:47.464
Style equals color red, color of danger.

170
00:11:47.464 --> 00:11:52.589
And we'll just print the error
message that was caught.

171
00:11:55.339 --> 00:11:59.671
Okay, and
you'll see that we got an error this time,

172
00:11:59.671 --> 00:12:04.793
the request failed and so
we're now printing that to the page.

173
00:12:04.793 --> 00:12:07.347
Try it again, fail again, try again.

174
00:12:07.347 --> 00:12:11.890
Finally, we got a random number, 29.

175
00:12:11.890 --> 00:12:15.252
So only the most recent promise
is considered at any time.

176
00:12:15.252 --> 00:12:20.069
So if you spam this button, you don't
need to worry about race conditions.

177
00:12:20.069 --> 00:12:25.507
In some cases, you might know
that your promise cannot reject.

178
00:12:25.507 --> 00:12:27.866
You should generally add a catch block,
but

179
00:12:27.866 --> 00:12:31.386
you might be able to guarantee
that the promise is gonna succeed.

180
00:12:31.386 --> 00:12:38.134
And in that case, you can get rid
of the catch block altogether.

181
00:12:38.134 --> 00:12:42.022
And in some cases, you might not need
to show any user interface while we're

182
00:12:42.022 --> 00:12:43.984
waiting for that promise to fulfill.

183
00:12:43.984 --> 00:12:50.317
And so in those cases,
we can get rid of everything except that,

184
00:12:50.317 --> 00:12:55.732
await.promise then number,
and we show the number.

185
00:12:55.732 --> 00:12:57.001
The number is 9.

