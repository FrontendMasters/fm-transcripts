WEBVTT

1
00:00:00.200 --> 00:00:01.260
Let's talk about logic.

2
00:00:02.300 --> 00:00:06.985
HTML does not have a way of expressing
logic like conditionals and

3
00:00:06.985 --> 00:00:08.610
loops, Svelte does.

4
00:00:08.610 --> 00:00:12.300
If you wanna conditionally
render some markup,

5
00:00:12.300 --> 00:00:16.261
we can wrap it in an if block,
which looks like this.

6
00:00:16.261 --> 00:00:21.923
Let's add some text that appears
when the count is greater than 10.

7
00:00:21.923 --> 00:00:27.027
So after the button,
open the curlies, add #,

8
00:00:27.027 --> 00:00:33.110
if count &gt; 10, Close that.

9
00:00:33.110 --> 00:00:40.130
Then we'll add some text that says,
count is greater than 10.

10
00:00:40.130 --> 00:00:45.324
Now, if I click the button enough times,
lo and behold, the text appears.

11
00:00:50.145 --> 00:00:53.540
Just like in JavaScript,
an if block can have an else block.

12
00:00:55.050 --> 00:00:57.725
So in this case,
if the count is not greater than 10,

13
00:00:57.725 --> 00:00:59.831
then we know that it is between 0 and 10.

14
00:00:59.831 --> 00:01:03.121
So let's add that into
App.svelte down here.

15
00:01:05.190 --> 00:01:09.697
This time,
we're gonna use a colon before the else.

16
00:01:09.697 --> 00:01:13.000
And inside there,

17
00:01:13.000 --> 00:01:18.372
counts is between 0 and 10.

18
00:01:18.372 --> 00:01:21.330
0 is between 0 and 10,
1 is between 0 and 10,

19
00:01:21.330 --> 00:01:24.260
all the way up to 10 is between 0 and 10.

20
00:01:24.260 --> 00:01:27.060
And then we switch into
the other half of the block.

21
00:01:28.890 --> 00:01:30.740
Okay, so let's talk about the syntax here.

22
00:01:32.030 --> 00:01:36.510
When you have plain curlers, that is
just enclosing a JavaScript expression.

23
00:01:36.510 --> 00:01:40.634
When you have the hash symbol or
the pound symbol, that is opening a block,

24
00:01:40.634 --> 00:01:45.070
an if block or an each block, and
there are other kinds of blocks.

25
00:01:45.070 --> 00:01:49.360
When you have a colon, it is continuing
that block, it's opening a new section.

26
00:01:49.360 --> 00:01:52.225
And then when you have the slash,
just like with the HTML element, and

27
00:01:52.225 --> 00:01:55.400
you have the angle bracket followed by
the slash, that is closing the block.

28
00:01:55.400 --> 00:01:59.264
So that's a lot of syntax to learn in one
go, but the good news is you've basically

29
00:01:59.264 --> 00:02:02.579
learned all of the syntax that Svelte
inflicts upon you at this point.

30
00:02:06.786 --> 00:02:10.210
And you can chain multiple
conditions together with an else if.

31
00:02:11.580 --> 00:02:19.100
Let's have an intermediate step
where count is less than 5.

32
00:02:19.100 --> 00:02:24.349
Else if count &lt; 5.

33
00:02:26.507 --> 00:02:28.725
Oops, a little typo there.

34
00:02:36.648 --> 00:02:38.287
And then we just need to
update that bit at the bottom.

35
00:02:41.125 --> 00:02:42.303
And click that,

36
00:02:42.303 --> 00:02:47.024
we're now switching between
the three branches of this if block.

37
00:02:52.392 --> 00:02:54.916
All right now,
when you're building user interfaces,

38
00:02:54.916 --> 00:02:58.610
very often you will find yourself
working with lists of data.

39
00:02:58.610 --> 00:03:03.500
In this exercise here, we've repeated
this button markup multiple times.

40
00:03:03.500 --> 00:03:06.343
We got a button for the red,
we got a button for the orange, and

41
00:03:06.343 --> 00:03:08.000
then we got a button for the yellow.

42
00:03:08.000 --> 00:03:12.560
But after that, I just got tired and
I added a to-do.

43
00:03:12.560 --> 00:03:16.250
We've still got more colors to add,
we've got an entire rainbow to show here.

44
00:03:16.250 --> 00:03:19.978
So instead of copying and
pasting and editing each of these,

45
00:03:19.978 --> 00:03:24.250
what we can do is we can render
those buttons in a list.

46
00:03:24.250 --> 00:03:28.500
So let's get rid of all but the first
button, let's get rid of those like so.

47
00:03:28.500 --> 00:03:33.070
And then we'll wrap the remaining
button in an each block.

48
00:03:34.170 --> 00:03:39.990
So again, we're using the hash key to open
a block, and the syntax is each colors.

49
00:03:41.540 --> 00:03:46.179
And we get a name to it as color, like so,

50
00:03:46.179 --> 00:03:51.100
and then we'll close that after the each.

51
00:03:51.100 --> 00:03:55.986
And so you can see now, it is
iterating over this colors value here,

52
00:03:55.986 --> 00:03:59.180
which includes everything in the rainbow.

53
00:04:00.640 --> 00:04:05.842
But it's rendering red each time,
which is not much help.

54
00:04:05.842 --> 00:04:11.438
I wanna change that to use
the current color in each iteration,

55
00:04:11.438 --> 00:04:16.500
so we'll just replace all
of the red occurrences.

56
00:04:16.500 --> 00:04:21.718
Tip, if you do Cmd+D, then you can select
multiple selection ranges at once.

57
00:04:21.718 --> 00:04:26.965
So because I've selected this red
string here and then I press Cmd+D,

58
00:04:26.965 --> 00:04:31.175
I can select both of these and
edit them simultaneously.

59
00:04:31.175 --> 00:04:34.570
The aria-label also needs updating.

60
00:04:34.570 --> 00:04:37.960
That's for people with vision impairments.

61
00:04:37.960 --> 00:04:42.326
And then background, we'll replace
that with the actual value, and

62
00:04:42.326 --> 00:04:46.252
you'll see that our user interface
is starting to take shape.

63
00:04:48.854 --> 00:04:53.811
You can get the current index inside an
each block as a second argument by adding

64
00:04:53.811 --> 00:04:55.130
it here.

65
00:04:55.130 --> 00:04:58.856
We'll call it i, fairly conventional.

66
00:04:58.856 --> 00:05:04.631
And then inside the button,
we'll reference i + 1, right?

67
00:05:04.631 --> 00:05:08.623
And so now we have numbers
to go along with the styles.

68
00:05:10.249 --> 00:05:16.379
If we press these, you'll see that we're
actually updating the selected value.

69
00:05:19.923 --> 00:05:21.603
So you can use that inside the markup, but

70
00:05:21.603 --> 00:05:24.830
you can also use it inside the event
handler, which is what's happening here.

71
00:05:24.830 --> 00:05:25.763
When we click it,

72
00:05:25.763 --> 00:05:29.827
we're assigning the current color inside
the loop to the value of selected.

73
00:05:35.230 --> 00:05:39.891
All right, this one is a little bit of
a tricky thing to wrap your head around at

74
00:05:39.891 --> 00:05:43.120
first, but hopefully, it'll become clear.

75
00:05:43.120 --> 00:05:47.250
By default, when you modify the value
of an each block, it will add and

76
00:05:47.250 --> 00:05:52.380
remove items at the end of the block and
update any values that are changed.

77
00:05:52.380 --> 00:05:55.690
So let me show you what I mean.

78
00:05:55.690 --> 00:05:58.498
In this exercise, we have an each block,

79
00:05:58.498 --> 00:06:03.010
we're iterating over this Things array,
which looks like this.

80
00:06:04.460 --> 00:06:07.080
Each one has an ID and a name.

81
00:06:10.064 --> 00:06:12.582
And then inside the Thing component,

82
00:06:12.582 --> 00:06:16.210
we're matching the name to
the corresponding emoji.

83
00:06:18.100 --> 00:06:21.760
And we are assigning that value when
the component is first created.

84
00:06:23.260 --> 00:06:25.946
So we're linking the apple
emoji to the apple text,

85
00:06:25.946 --> 00:06:28.400
the banana emoji to the banana text,
and so on.

86
00:06:30.110 --> 00:06:33.140
But watch what happens when we start
removing things from this array.

87
00:06:33.140 --> 00:06:37.648
If we remove the apple,
then the text apple goes away, but

88
00:06:37.648 --> 00:06:40.850
the emoji apple is still there.

89
00:06:40.850 --> 00:06:45.490
And the reason for that is that we
haven't got rid of the first component.

90
00:06:45.490 --> 00:06:47.550
We got rid of the last component, but

91
00:06:47.550 --> 00:06:51.920
we're now passing the new text
into the remaining components.

92
00:06:51.920 --> 00:06:53.724
But inside Thing.svelte,

93
00:06:53.724 --> 00:06:58.230
we assigned this emoji when
the component was first created.

94
00:06:58.230 --> 00:07:02.093
If you use things like React,
that might be a little bit surprising,

95
00:07:02.093 --> 00:07:06.840
because in those frameworks,
things update every time you render.

96
00:07:06.840 --> 00:07:11.504
In Svelte, we don't do that, Svelte is
deliberately designed in a way that makes

97
00:07:11.504 --> 00:07:14.420
it more efficient to update
the content of the DOM.

98
00:07:15.520 --> 00:07:23.524
So one way that we could fix this is we
could turn this into a reactive variable.

99
00:07:23.524 --> 00:07:27.575
We could replace this const with a $:.

100
00:07:27.575 --> 00:07:30.086
And now, if you remove things,

101
00:07:30.086 --> 00:07:35.108
it'll update the value of emoji at
the same time as the new name is

102
00:07:35.108 --> 00:07:40.635
being passed in because it sees that
it depends on that changing name.

103
00:07:40.635 --> 00:07:44.786
But that's actually not what we want, what
we want is to remove the first component

104
00:07:44.786 --> 00:07:48.245
instead of removing the last component and
updating all of the rest.

105
00:07:49.345 --> 00:07:53.035
And to do that, we use something
called a keyed each block.

106
00:07:53.035 --> 00:07:57.229
What this means is that we, let me just
get rid of that, replace it to how it was.

107
00:07:58.480 --> 00:08:01.923
What this means is that
inside the each block,

108
00:08:01.923 --> 00:08:06.690
we're gonna assign each iteration
of that loop a key that will be

109
00:08:06.690 --> 00:08:10.860
used to figure out which
component needs to be removed.

110
00:08:10.860 --> 00:08:18.377
And the way that we do that is by putting
some unique value inside parenthesis.

111
00:08:18.377 --> 00:08:21.373
We use thing.id.

112
00:08:21.373 --> 00:08:22.388
There's a little call out here.

113
00:08:22.388 --> 00:08:25.472
We're using thing.id, which is a number,

114
00:08:25.472 --> 00:08:28.400
but you can actually
put any value in here.

115
00:08:28.400 --> 00:08:32.930
It's using a map internally, so you can
use objects, you can use whatever it is.

116
00:08:32.930 --> 00:08:38.138
As long as when that data changes, it can
compare the new list with the old list and

117
00:08:38.138 --> 00:08:41.830
figure out what's been added and
what's been removed.

118
00:08:41.830 --> 00:08:44.748
So now if we click the button,
remove the first thing,

119
00:08:44.748 --> 00:08:47.866
it's getting rid of the first
component in its entirety.

120
00:08:47.866 --> 00:08:51.945
&gt;&gt; Is the keyword each
a reserved keyword in Svelte?

121
00:08:51.945 --> 00:08:55.570
&gt;&gt; It is reserved when
you have the hash symbol.

122
00:08:55.570 --> 00:09:00.118
You have a curly followed by a hash,
that has to be followed by if or

123
00:09:00.118 --> 00:09:04.740
each or await or key,
which we'll learn about in a second.

124
00:09:04.740 --> 00:09:09.142
But if you're not building a block,
then you can use it wherever you like, so

125
00:09:09.142 --> 00:09:12.692
you can use the word each for
whatever it is you're building.

126
00:09:12.692 --> 00:09:16.690
You can't use the word if or the word
await because those are JavaScript

127
00:09:16.690 --> 00:09:19.500
keywords, but
each is not a JavaScript keyword.

128
00:09:19.500 --> 00:09:22.830
So that's up for grabs,
you can use it however you like.

129
00:09:24.130 --> 00:09:27.230
&gt;&gt; What happens if the key is not unique?

130
00:09:27.230 --> 00:09:31.580
&gt;&gt; The key is not unique,
then things will break, essentially.

131
00:09:31.580 --> 00:09:36.818
I actually can't remember off the top
of my head if it will throw an error or

132
00:09:36.818 --> 00:09:41.396
if it will just bulk up your application,
I would need to check.

133
00:09:41.396 --> 00:09:43.532
The moral of the story is, don't do that.

134
00:09:43.532 --> 00:09:47.872
Make sure that you are using unique keys
in your keyed each block, otherwise,

135
00:09:47.872 --> 00:09:51.440
unexpected things will happen,
and you have a mess to clean up.

136
00:09:51.440 --> 00:09:52.720
Grant?
&gt;&gt; In the example here,

137
00:09:52.720 --> 00:09:55.970
if you make the keys not unique,
it just doesn't render anything.

138
00:09:55.970 --> 00:09:57.250
&gt;&gt; Just doesn't render anything.

139
00:09:57.250 --> 00:09:58.730
Okay, there you go, so there's the answer.

140
00:09:58.730 --> 00:10:02.670
You need to have unique keys, otherwise,
it's gonna get very confused.

141
00:10:02.670 --> 00:10:05.200
All right, let's talk about async data.

142
00:10:05.200 --> 00:10:08.739
Most web applications are gonna need
to deal with async data at some point.

143
00:10:10.410 --> 00:10:11.446
And in Svelte,

144
00:10:11.446 --> 00:10:17.080
you can use async values directly in
your markup by using an await block.

145
00:10:17.080 --> 00:10:23.245
So in this exercise, we've got a button
that generates a random number.

146
00:10:23.245 --> 00:10:27.451
And it's actually fetching from a URL
that you can't see in this exercise,

147
00:10:27.451 --> 00:10:31.591
but it has an artificial delay attached
to it so that it'll take a minute for

148
00:10:31.591 --> 00:10:33.055
that promise to resolve.

149
00:10:33.055 --> 00:10:39.629
And sometimes it won't resolve,
sometimes it will reject instead.

150
00:10:39.629 --> 00:10:42.956
So we call getRandomNumber,
we have a promise,

151
00:10:42.956 --> 00:10:46.050
we wanna use that inside our markup.

152
00:10:46.050 --> 00:10:50.660
We can do so by wrapping this
content in an await block.

153
00:10:50.660 --> 00:10:55.447
As before, curly brace #,
followed by the type of block.

154
00:10:57.663 --> 00:11:02.793
Gonna await the promise, and
then we'll add a then section,

155
00:11:02.793 --> 00:11:09.590
sorry, then number, so that we can refer
to the resolve value of the promise.

156
00:11:09.590 --> 00:11:15.970
We'll then add a catch section and
give the code error a name.

157
00:11:15.970 --> 00:11:17.850
Then we'll close the await block.

158
00:11:20.050 --> 00:11:22.676
So inside this middle section,
the then number section,

159
00:11:22.676 --> 00:11:25.580
you can see it's giving us a warning
that we have an empty block.

160
00:11:25.580 --> 00:11:29.410
So we need to put some content in there,

161
00:11:29.410 --> 00:11:33.715
create a paragraph, the number is number.

162
00:11:38.011 --> 00:11:42.394
And then when we catch an error,
we'll put a paragraph there as well.

163
00:11:42.394 --> 00:11:46.270
Style="color: red", color of danger,

164
00:11:46.270 --> 00:11:51.166
and we'll just print the error
message that was caught.

165
00:11:55.513 --> 00:11:59.188
Okay, and
you'll see that we got an error this time,

166
00:11:59.188 --> 00:12:03.527
the request failed and so
we're now printing that to the page.

167
00:12:03.527 --> 00:12:07.560
Try it again, fail again, try again.

168
00:12:07.560 --> 00:12:10.520
Finally, we've got a random number, 29.

169
00:12:10.520 --> 00:12:15.230
So only the most recent promise
is considered at any time.

170
00:12:15.230 --> 00:12:18.940
So if you spam this button, you don't
need to worry about race conditions.

171
00:12:20.170 --> 00:12:23.890
In some cases, you might know
that your promise cannot reject.

172
00:12:25.400 --> 00:12:27.736
You should generally add a catch block,
but

173
00:12:27.736 --> 00:12:31.830
you might be able to guarantee
that the promise is gonna succeed.

174
00:12:31.830 --> 00:12:35.820
And in that case, you can get rid
of the catch block altogether.

175
00:12:38.220 --> 00:12:42.166
And in some cases, you might not need
to show any user interface while we're

176
00:12:42.166 --> 00:12:44.150
waiting for that promise to fulfill.

177
00:12:44.150 --> 00:12:50.850
And so in those cases,
we can get rid of everything except that.

178
00:12:50.850 --> 00:12:53.575
Await promise, then number,
and we show the number.

179
00:12:55.804 --> 00:12:56.706
The number is 9.

