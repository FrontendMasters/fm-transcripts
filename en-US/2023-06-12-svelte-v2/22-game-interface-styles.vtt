WEBVTT

1
00:00:00.000 --> 00:00:03.575
All right, so the first thing that we're
gonna do is just gonna get rid of this

2
00:00:03.575 --> 00:00:04.620
placeholder markup.

3
00:00:04.620 --> 00:00:07.303
You don't need that anymore.

4
00:00:07.303 --> 00:00:10.246
Now looking at a blank page.

5
00:00:10.246 --> 00:00:12.980
And we wanna create a game component,

6
00:00:12.980 --> 00:00:16.748
which is where the bulk of
our logic is going to live.

7
00:00:16.748 --> 00:00:20.177
So in the file explorer, I'm gonna
create a component alongside here.

8
00:00:20.177 --> 00:00:23.535
Just call it Game.svelte,

9
00:00:27.873 --> 00:00:32.079
And then inside the page.svelte component,
I'm gonna start,

10
00:00:32.079 --> 00:00:35.989
typing the word game and
it's gonna auto import that for me.

11
00:00:35.989 --> 00:00:38.800
Just hit Enter.

12
00:00:38.800 --> 00:00:42.590
You can see that it has added
the input declaration and everything.

13
00:00:44.795 --> 00:00:50.118
And so now we can start
building the game insight,

14
00:00:50.118 --> 00:00:53.430
our game.svelte component.

15
00:00:56.388 --> 00:01:01.219
Now, there's a lot of ways that you can
go about building something like this.

16
00:01:01.219 --> 00:01:06.124
The way that I tend to like to do things
is build out a very rough user interface

17
00:01:06.124 --> 00:01:09.803
so that I have a sense of what
things are gonna look like and

18
00:01:09.803 --> 00:01:14.497
then we can start adding the game logic
once we have the basic UI in place.

19
00:01:14.497 --> 00:01:18.116
And then finally, we'll add some polish.

20
00:01:18.116 --> 00:01:23.390
So I'm gonna create div class = game.

21
00:01:23.390 --> 00:01:31.032
And inside there, let me bring up
the game so that we can see it.

22
00:01:31.032 --> 00:01:35.446
We have a grid in
the center of the screen,

23
00:01:35.446 --> 00:01:39.240
and we have two blocks either side.

24
00:01:39.240 --> 00:01:44.334
So we have a block of content at
the bottom where with the pairs that we've

25
00:01:44.334 --> 00:01:49.861
found go, we have a block of content at
the top where the countdown timer goes.

26
00:01:49.861 --> 00:01:53.118
And then the big chunk in
the middle is the game grid.

27
00:01:53.118 --> 00:01:55.536
So I'm gonna begin by roughing that out.

28
00:01:55.536 --> 00:01:58.841
We'll call the bits at
the top of the bottom.

29
00:01:58.841 --> 00:02:01.518
Class =info.

30
00:02:05.437 --> 00:02:11.506
Duplicate that, and then in the middle,
we're gonna have our grid container.

31
00:02:19.833 --> 00:02:21.147
And then in the same component,

32
00:02:21.147 --> 00:02:24.320
we'll have some styles that control
the placement of all of these elements.

33
00:02:29.923 --> 00:02:34.977
So to get that layout where
everything is centered and

34
00:02:34.977 --> 00:02:39.931
aligned it's very convenient
to use a flex layout.

35
00:02:39.931 --> 00:02:45.335
You can use display flex.

36
00:02:45.335 --> 00:02:48.569
And we're gonna give it
a flex-direction of column,

37
00:02:48.569 --> 00:02:53.493
which means that the first element will be
at the top followed by the container below

38
00:02:53.493 --> 00:02:58.017
it as opposed to on the right-hand side,
followed by the final info block.

39
00:03:00.346 --> 00:03:06.058
We'll give it a justify
content of center and

40
00:03:06.058 --> 00:03:09.074
align items of center.

41
00:03:17.305 --> 00:03:20.256
Something that I'll often do
when I'm roughing out a UI is

42
00:03:20.256 --> 00:03:23.991
I'll give the elements that I'm working
with an ugly background color so

43
00:03:23.991 --> 00:03:26.963
that I can see what space
they're taking up on the screen.

44
00:03:26.963 --> 00:03:33.912
So for the info elements, we're gonna
give it a I'd say a width of 80vmin.

45
00:03:33.912 --> 00:03:38.422
If you haven't seen vmin before,
it is the minimum of either Vw,

46
00:03:38.422 --> 00:03:42.440
which is the width of the screen
divided by 100, or Vh,

47
00:03:42.440 --> 00:03:46.053
which is the height of
the screen divided by 100.

48
00:03:46.053 --> 00:03:51.513
And it's what allows us to have a user
interface that will scale down and

49
00:03:51.513 --> 00:03:56.063
always fit inside the screen,
whether it's on a desktop in

50
00:03:56.063 --> 00:04:01.343
a landscape aspect ratio, or
if someone's using it on their phone.

51
00:04:01.343 --> 00:04:05.779
Give it height of say 10 vmin like so, and

52
00:04:05.779 --> 00:04:09.242
then a background of say purple.

53
00:04:09.242 --> 00:04:13.796
And then, the grid container that's

54
00:04:13.796 --> 00:04:18.643
gonna have again, a width of 80 vmin.

55
00:04:18.643 --> 00:04:21.171
And the same height because it's a square.

56
00:04:21.171 --> 00:04:25.718
And we'll give that a background of,
let's say, teal.

57
00:04:25.718 --> 00:04:30.986
Okay, so far so good, but
it's not centered vertically.

58
00:04:30.986 --> 00:04:35.793
And that's because we haven't added
the right height to the game element so

59
00:04:35.793 --> 00:04:37.983
we'll stick a 100% on there.

60
00:04:37.983 --> 00:04:42.163
Still not working and
that's because we need to have

61
00:04:42.163 --> 00:04:46.733
the 100% applied to
the elements that contain this.

62
00:04:46.733 --> 00:04:52.998
So at this point I'm gonna pause and come
out of spell and add a global style sheet.

63
00:04:55.966 --> 00:05:00.624
Inside my source directory,
I'm gonna add styles.css.

64
00:05:05.039 --> 00:05:09.567
And you could do all these with component
files using the cloud modifier or

65
00:05:09.567 --> 00:05:10.306
whatever.

66
00:05:10.306 --> 00:05:15.232
But find that in just about every project
I would typically have a bunch of styles

67
00:05:15.232 --> 00:05:19.864
related to things like typography and
colors, CSS, custom properties,

68
00:05:19.864 --> 00:05:23.706
things like that,
that are shared by everything on the page.

69
00:05:23.706 --> 00:05:27.399
And so it's convenient to have
a place to put all of that stuff.

70
00:05:27.399 --> 00:05:31.522
So often have a source/styles.CSS or
something like that.

71
00:05:31.522 --> 00:05:36.471
In here, I'm gonna add the piece of
CSS that has saved me the most time.

72
00:05:36.471 --> 00:05:43.067
And all the time that I've been writing
CSS, which is every element by default,

73
00:05:43.067 --> 00:05:48.123
has a position of relative and
a box-sizing of border-box.

74
00:05:48.123 --> 00:05:54.980
And then the thing that we came here
to do is to add on the html element and

75
00:05:54.980 --> 00:05:59.177
on the body, we want a height of 100%.

76
00:05:59.177 --> 00:06:01.652
And we also wanna get rid of the margin,

77
00:06:01.652 --> 00:06:06.085
because otherwise that's gonna
mess with our height measurements.

78
00:06:10.063 --> 00:06:13.268
Last thing we need to do of course
is import these styles into our app,

79
00:06:13.268 --> 00:06:14.889
otherwise it'll have no effect.

80
00:06:14.889 --> 00:06:19.440
So inside page.svelte, I'm gonna do,

81
00:06:19.440 --> 00:06:22.695
import ../styles.CSS.

82
00:06:22.695 --> 00:06:26.442
Obviously, you can't normally do this
in a JavaScript module we are using

83
00:06:26.442 --> 00:06:27.521
a Vite feature here.

84
00:06:27.521 --> 00:06:33.688
The fact that you can import CSS is
something that Vite brings to the table.

85
00:06:33.688 --> 00:06:37.926
During development, it will extract
all of the imported CSS, minify it,

86
00:06:37.926 --> 00:06:41.895
optimize it, and then spit it out into
a separate bundle of CSS that can

87
00:06:41.895 --> 00:06:46.161
be cached immutably, so that it's
really good for performance and so on.

88
00:06:46.161 --> 00:06:50.961
And just authoring-wise, it's very simple
to be able to add an import like this.

89
00:06:50.961 --> 00:06:53.845
So even though it's kinda non-standard,
very cool.

90
00:06:53.845 --> 00:06:58.456
All right, now our global CSS is
being applied to the page, and

91
00:06:58.456 --> 00:07:01.948
we can see that the grid is now centered,
nice.

