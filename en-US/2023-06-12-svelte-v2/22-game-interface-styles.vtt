WEBVTT

1
00:00:00.000 --> 00:00:03.915
Okay, so just like elements can
have children, like an example

2
00:00:03.915 --> 00:00:08.118
here where a div has a paragraph
inside it, certain components, but

3
00:00:08.118 --> 00:00:13.208
before a component can accept children,
it needs to know where it should put them.

4
00:00:13.208 --> 00:00:16.525
And for that, we use the slot element.

5
00:00:16.525 --> 00:00:21.614
Inside our Card.svelte,
we'll add a slot like so,

6
00:00:21.614 --> 00:00:28.074
and we can now put things inside
the card component in App.svelte.

7
00:00:42.355 --> 00:00:44.460
That was what we call a default slot.

8
00:00:44.460 --> 00:00:48.321
So anything that goes directly inside
the card component goes into the default

9
00:00:48.321 --> 00:00:49.620
slot element.

10
00:00:49.620 --> 00:00:52.840
But sometimes you need more
control over placement.

11
00:00:52.840 --> 00:00:56.080
And for those cases,
we have something called named slots.

12
00:00:56.080 --> 00:01:01.213
And it's like the Card.svelte component,
we've got,

13
00:01:01.213 --> 00:01:06.346
sorry, inside here we've got
a span slot=telephone and

14
00:01:06.346 --> 00:01:10.656
a span slot=company and
a span slot=address.

15
00:01:10.656 --> 00:01:15.584
We need to create corresponding slots for
all of that content inside Card.svelte.

16
00:01:18.549 --> 00:01:20.827
At the top we'll add this header element.

17
00:01:27.863 --> 00:01:31.155
Got one for the telephone,
one for the company.

18
00:01:34.349 --> 00:01:37.395
And then,
below the default slot we'll add a footer,

19
00:01:43.660 --> 00:01:45.127
With a slot for the address.

20
00:01:50.087 --> 00:01:56.379
Now this card is pretty close to what
we want, but we have in the top right,

21
00:01:56.379 --> 00:02:00.962
the name of the company has
a small element inside it.

22
00:02:00.962 --> 00:02:04.680
And the small element is
expressed in App.svelte here.

23
00:02:05.720 --> 00:02:08.099
And because that's where
the element lives,

24
00:02:08.099 --> 00:02:10.239
that's where the styles also need to go.

25
00:02:10.239 --> 00:02:14.614
All the contents of the Card
component inherit styles,

26
00:02:14.614 --> 00:02:18.721
that are declared in
the style tag of Card.svelte.

27
00:02:18.721 --> 00:02:25.652
But ultimately, the styles belong to
the component where the elements live.

28
00:02:25.652 --> 00:02:29.918
So if you wanna add some styles for
that small element,

29
00:02:29.918 --> 00:02:34.474
we're gonna need to do it in
the style tag of App.svelte.

30
00:02:34.474 --> 00:02:38.831
We wanna add a display equals block so
that it falls onto its own line.

31
00:02:42.514 --> 00:02:48.339
Then we need to give it a smaller font
size and we wanna align it to the right.

32
00:02:50.819 --> 00:02:52.209
Like so.

33
00:02:52.209 --> 00:02:57.896
All right, alternatively we could
have used the global modifier and

34
00:02:57.896 --> 00:03:02.699
put the styles inside
the Card.svelte to target all small

35
00:03:02.699 --> 00:03:06.620
elements inside the div
with the .card class,

36
00:03:06.620 --> 00:03:12.038
it really depends on who you want
to be in control of that styling.

37
00:03:16.754 --> 00:03:23.518
Now we have two of these cards and
one of them we have some content.

38
00:03:23.518 --> 00:03:27.490
And then in the other one we haven't yet
specified any content.

39
00:03:27.490 --> 00:03:30.330
And a component can specify fallbacks for

40
00:03:30.330 --> 00:03:35.290
any slots that are left empty by just
putting it inside the slot element.

41
00:03:35.290 --> 00:03:41.947
So over in Card.svelte,
inside the slot we can add,

42
00:03:45.287 --> 00:03:53.622
Some fullback content reminding you to
put the telephone number on the card.

43
00:03:53.622 --> 00:03:58.111
If we make that a little bit bigger,
you can see it there in the top left, and

44
00:03:58.111 --> 00:04:02.840
we'll do the same thing for,
The company name.

45
00:04:13.730 --> 00:04:14.989
They have the default slot,

46
00:04:22.936 --> 00:04:24.320
And finally for the address.

47
00:04:33.379 --> 00:04:38.353
And then of course in App.svelte if
we start filling these details out,

48
00:04:38.353 --> 00:04:42.851
it will use the values that are passed
in instead of the fallback.

49
00:04:47.005 --> 00:04:50.311
Right, does anyone have any questions
about the component composition APIs?

50
00:04:56.575 --> 00:05:01.552
Okay, so in some situations you will
need to pass data from a component back

51
00:05:01.552 --> 00:05:05.265
into the parent that is passing
in the slotted content,

52
00:05:05.265 --> 00:05:09.700
which is a little bit of a head
scratcher until you see it in action.

53
00:05:10.790 --> 00:05:15.457
So here we have a component
called filterable list,

54
00:05:15.457 --> 00:05:20.442
which given some data allows
us to filter the contents of

55
00:05:20.442 --> 00:05:25.810
that data based on the field
that we've provided.

56
00:05:25.810 --> 00:05:29.585
So here we have a whole
bunch of CSS named colors.

57
00:05:29.585 --> 00:05:34.870
This is every, I believe, CSS named
color with its corresponding hex value.

58
00:05:36.590 --> 00:05:41.420
And we wanna be able to filter this list,
like find all of the orange colors,

59
00:05:41.420 --> 00:05:42.830
for example.

60
00:05:42.830 --> 00:05:46.419
Which almost works,
there are three orange colors, but

61
00:05:46.419 --> 00:05:49.048
they're not being rendered correctly.

62
00:05:49.048 --> 00:05:53.299
And that's because we're not
passing data from the filterable

63
00:05:53.299 --> 00:05:54.880
list back in to the app.

64
00:05:56.650 --> 00:05:59.960
First thing we need to do is
pass the data into the slot.

65
00:05:59.960 --> 00:06:05.778
So inside our filterable list, We're

66
00:06:05.778 --> 00:06:12.767
gonna pass the item into that
just like any component prop.

67
00:06:12.767 --> 00:06:16.786
And then on the other side of
the equation, where it's being used in

68
00:06:16.786 --> 00:06:22.118
App.svelte, We need to add

69
00:06:22.118 --> 00:06:27.415
something called the let binding,
let item equals row.

70
00:06:27.415 --> 00:06:32.018
And what you'll find now is that all
of the data is being rendered inside

71
00:06:32.018 --> 00:06:37.005
the filterable list and if I type the word
orange, we'll see that there are in

72
00:06:37.005 --> 00:06:41.400
fact three orange colors,
dark orange, orange, and orange red.

73
00:06:41.400 --> 00:06:45.276
And finally up here, we began by
using Alice Blue for everything,

74
00:06:45.276 --> 00:06:47.836
which is the first row
in that array of data,

75
00:06:47.836 --> 00:06:51.942
we can now get rid of that because
it is not being referenced anywhere.

76
00:06:54.179 --> 00:06:58.628
So you can do the same thing with name
slots, you put the let binding on

77
00:06:58.628 --> 00:07:03.481
the element with the slot attribute as
opposed to on the component itself.

78
00:07:03.481 --> 00:07:07.613
And this allows you to compose
components in fairly complex ways.

79
00:07:09.645 --> 00:07:13.545
Finally, in some cases you might
wanna vary the contents of

80
00:07:13.545 --> 00:07:17.998
the component based on whether
slotted content has been provided.

81
00:07:17.998 --> 00:07:23.004
So for example, in App.svelte,
we have this header,

82
00:07:23.004 --> 00:07:27.274
which is providing this
banner at the top here.

83
00:07:27.274 --> 00:07:31.536
If we get rid of that, then it will no
longer render, but we're left with this

84
00:07:31.536 --> 00:07:36.393
ugly double border effect because inside
filterable list, we're rendering div class

85
00:07:36.393 --> 00:07:39.757
equals header regardless of whether or
not it was provided.

86
00:07:39.757 --> 00:07:43.982
And we can fix that using the special
dollar dollar slots variable which is

87
00:07:43.982 --> 00:07:45.560
available to components.

88
00:07:49.745 --> 00:07:52.105
If the header slot was provided,
then that will be true.

89
00:07:52.105 --> 00:07:58.284
If not, then it is not true and
we've got rid of that double border.

