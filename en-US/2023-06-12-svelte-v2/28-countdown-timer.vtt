WEBVTT

1
00:00:00.070 --> 00:00:03.451
We're coming to the end of
part 2 of the tutorial.

2
00:00:03.451 --> 00:00:05.722
This section is a little
bit of a mishmash.

3
00:00:05.722 --> 00:00:10.338
We've got a bunch of different special
elements that Svelte provides to your

4
00:00:10.338 --> 00:00:14.102
components and they don't really
have anything in common with

5
00:00:14.102 --> 00:00:18.452
each other other than the fact that
they belong to the Svelte name space.

6
00:00:18.452 --> 00:00:23.164
So the first of these is svelte solve and
that is something that allows

7
00:00:23.164 --> 00:00:28.041
a component to reference itself
recursively, and it's useful things

8
00:00:28.041 --> 00:00:33.012
like this folder tree view,
where a folder can contain another folder.

9
00:00:33.012 --> 00:00:35.884
So inside our Folder.svelte component,

10
00:00:35.884 --> 00:00:41.065
we would wanna be able to do something
like this, where we have the file here,

11
00:00:41.065 --> 00:00:46.008
would like to be able to add a folder
that references the same component but

12
00:00:46.008 --> 00:00:50.107
that's impossible because
a module can't import itself.

13
00:00:50.107 --> 00:00:54.702
So instead we use svelte:solve here.

14
00:01:01.329 --> 00:01:06.357
And now the folder is
containing other folders.

15
00:01:06.357 --> 00:01:11.824
And we can do that to an arbitrary depth.

16
00:01:11.824 --> 00:01:16.369
An interesting fact about this is that if
you try and do this at the top level of

17
00:01:16.369 --> 00:01:20.930
a component, it will yell at you because
that would cause an infinite loop.

18
00:01:20.930 --> 00:01:24.009
It's smart enough to know that is not
a thing that you should be doing.

19
00:01:29.981 --> 00:01:34.368
Now, a component can change its type
altogether with the svelte component

20
00:01:34.368 --> 00:01:35.000
element.

21
00:01:35.000 --> 00:01:40.031
In this exercise,
we wanna show red thing.svelte

22
00:01:40.031 --> 00:01:44.130
if the value of the selected color is red.

23
00:01:44.130 --> 00:01:46.554
And we wanna show a green
thing if it's green, and

24
00:01:46.554 --> 00:01:48.987
we wanna show blue thing if it's blue,
and so on.

25
00:01:48.987 --> 00:01:53.138
Now, we could do this with
a sequence of if blocks

26
00:01:53.138 --> 00:01:57.511
inside that box svelte like
we started doing here.

27
00:01:57.511 --> 00:01:59.381
And then if we select a different color,

28
00:01:59.381 --> 00:02:01.588
it would show the green
thing in the blue thing.

29
00:02:01.588 --> 00:02:03.882
That's a lot of code to have to write,

30
00:02:03.882 --> 00:02:06.839
it's more convenient to
make that data driven.

31
00:02:06.839 --> 00:02:10.952
So as will create a single
dynamic component,

32
00:02:10.952 --> 00:02:15.597
get rid of that entire block,
ad svelte component.

33
00:02:20.439 --> 00:02:22.325
And then the attribute is called this.

34
00:02:25.104 --> 00:02:27.451
We're gonna pass in
the selector component.

35
00:02:27.451 --> 00:02:30.967
So you see up here that the value
that is getting passed in is actually

36
00:02:30.967 --> 00:02:32.828
the constructor of the component.

37
00:02:32.828 --> 00:02:35.818
And now when we change the value
of that via the Select,

38
00:02:35.818 --> 00:02:38.028
we're rendering a different component

39
00:02:43.481 --> 00:02:47.333
And we can do the same
thing with elements, right,

40
00:02:47.333 --> 00:02:51.454
in the same way we could have,
if selected equals h1,

41
00:02:51.454 --> 00:02:56.931
we'll have a block of h1 content,
distillates equals h2, and so on.

42
00:02:56.931 --> 00:03:02.331
But that's just no fun, instead,
get rid of all of that.

43
00:03:02.331 --> 00:03:03.940
A new spell element,

44
00:03:11.932 --> 00:03:13.984
And put some content inside.

45
00:03:13.984 --> 00:03:20.765
I'm a less than slated.

46
00:03:20.765 --> 00:03:26.887
Greater than, Element, like so.

47
00:03:26.887 --> 00:03:33.991
And then now if we change to
one of the other options,

48
00:03:33.991 --> 00:03:39.167
it recreates the dom automatically.

49
00:03:39.167 --> 00:03:41.792
And so
the value of this can be any string or

50
00:03:41.792 --> 00:03:46.226
it can be a false value in which case
no element will be rendered at all.

51
00:03:49.973 --> 00:03:55.128
We've already seen how you can add
event listeners to DOM elements.

52
00:03:55.128 --> 00:03:59.881
We can also add event listeners
to the window object using

53
00:03:59.881 --> 00:04:02.859
the special spell window element.

54
00:04:02.859 --> 00:04:07.309
In this exercise,
whenever we focus the window and

55
00:04:07.309 --> 00:04:12.184
press a key, we would like to
show what key was pressed.

56
00:04:12.184 --> 00:04:16.373
We're gonna assign to these key and
key code values, and

57
00:04:16.373 --> 00:04:19.609
then we're gonna show that inside the app.

58
00:04:32.677 --> 00:04:36.395
This is just a more convenient way of
using window.addEventListener, it will

59
00:04:36.395 --> 00:04:39.899
automatically remove event listeners
when this component is unmounted.

60
00:04:39.899 --> 00:04:44.154
Just like with DOM elements, you can use
event modifiers like prevent default.

61
00:04:47.979 --> 00:04:55.197
As well as adding events to Svelte window,
we can bind to certain properties of it.

62
00:04:55.197 --> 00:05:00.938
So here we've got a nice little piece
of artwork generated by Midjourney and

63
00:05:00.938 --> 00:05:05.886
we would like to bind the current
scroll position to this y value.

64
00:05:05.886 --> 00:05:11.917
And we can do that very easily,
bind scroll y equals y.

65
00:05:11.917 --> 00:05:14.821
And now when we scroll, it reflected,

66
00:05:14.821 --> 00:05:20.022
again it's giving us fractional
values because my site is zoomed in.

67
00:05:24.142 --> 00:05:28.772
So, just change that and it update
smoothly, and that's a bidirectional

68
00:05:28.772 --> 00:05:33.486
binding if you change the value of Y it
will also update the scroll position.

69
00:05:33.486 --> 00:05:38.593
So, few different properties that you
can bind to, width, height, scroll and

70
00:05:38.593 --> 00:05:43.417
also the online binding which is
an alias for window.navigator.online.

71
00:05:43.417 --> 00:05:47.036
This is useful for displaying
a message like you lost the internet,

72
00:05:47.036 --> 00:05:50.032
you need to reconnect to Wi-Fi or
something like that.

73
00:05:53.635 --> 00:05:58.358
As well as the window, we have a way of
adding event listeners to the body element

74
00:05:58.358 --> 00:06:03.153
which you typically are not rendering
yourself because normally you would mount

75
00:06:03.153 --> 00:06:07.689
your cell components inside the body,
you don't control the actual body.

76
00:06:07.689 --> 00:06:13.886
So we have Svelte body to listen to
events like mouse enter and mouse leave.

77
00:06:19.243 --> 00:06:25.222
And mouse enter we want this,
here kitty value to become true.

78
00:06:31.351 --> 00:06:38.670
And we'll just copy that line and
reverse it on mouseleave it becomes false.

79
00:06:38.670 --> 00:06:44.543
And then now if we enter the iframe,
kitty comes out to play.

80
00:06:49.452 --> 00:06:55.215
Similarly, we have the svelte
document element which is useful for

81
00:06:55.215 --> 00:07:01.902
the selection change handler in particular
which does not fire on the window.

82
00:07:01.902 --> 00:07:06.314
So we can add this on selection
change event listener.

83
00:07:13.315 --> 00:07:16.318
Which is gonna get
the current selection and

84
00:07:16.318 --> 00:07:19.168
assign it to this selection value there.

85
00:07:25.988 --> 00:07:31.885
It can also select itself
which kinda gets pretty crazy.

86
00:07:31.885 --> 00:07:32.852
I don't recommend it.

87
00:07:36.746 --> 00:07:41.023
And then we can also add
a Svelte head element.

88
00:07:41.023 --> 00:07:44.763
Which is very useful for things like SEO.

89
00:07:44.763 --> 00:07:48.719
You can add a document title,
you can add descriptions and

90
00:07:48.719 --> 00:07:52.935
things like that,
that will appear in search results pages.

91
00:07:52.935 --> 00:07:54.952
That's what it's mostly useful for,

92
00:07:54.952 --> 00:07:58.077
although it's not visible in
the context of this tutorial.

93
00:07:58.077 --> 00:08:01.073
So we're gonna use something
a little bit different.

94
00:08:01.073 --> 00:08:04.133
We're gonna use it to load a stylesheet.

95
00:08:07.415 --> 00:08:13.546
At the svelte head element, And then,

96
00:08:13.546 --> 00:08:19.685
inside the link, rel = stylesheet.

97
00:08:19.685 --> 00:08:23.151
And we have a selection of style
sheets up here that we can pick from.

98
00:08:31.141 --> 00:08:35.226
Beginning with
the the Margaritaville theme and

99
00:08:35.226 --> 00:08:39.018
you can pick whichever
of these you must enjoy

100
00:08:49.908 --> 00:08:54.013
Getting into the nuts and
bolts of how the compiler works when you

101
00:08:54.013 --> 00:08:58.283
invoke the Svelte compiler,
which typically you're not doing.

102
00:08:58.283 --> 00:09:01.076
Your bundler plugin is doing this for you.

103
00:09:01.076 --> 00:09:02.301
But when that happens,

104
00:09:02.301 --> 00:09:06.481
you can pass options to the compiler that
control how the component is compiled.

105
00:09:06.481 --> 00:09:08.531
But those are for
all of the components in your app.

106
00:09:08.531 --> 00:09:13.900
Sometimes you wanna have some compile
options that are component specific,

107
00:09:13.900 --> 00:09:17.627
and that's where we use
the Svelte options element.

108
00:09:17.627 --> 00:09:21.291
There's a few different options that
you can pass to the compiler and

109
00:09:21.291 --> 00:09:23.894
we'll use the immutable
option as our example.

110
00:09:23.894 --> 00:09:28.221
So in this app whenever we change
the value of one of these todos,

111
00:09:28.221 --> 00:09:31.364
all of the todos
are updated simultaneously.

112
00:09:35.231 --> 00:09:39.197
And that's because we have
an after update function here,

113
00:09:39.197 --> 00:09:43.574
which causes the element to flash
whenever the value is updated.

114
00:09:46.224 --> 00:09:50.619
That's not really a problem here, that's
fine because it's gonna be fast enough

115
00:09:50.619 --> 00:09:54.146
that it's not gonna affect
the performance of your application.

116
00:09:54.146 --> 00:09:58.325
But you might have some situations where
you have some very complex data and

117
00:09:58.325 --> 00:10:02.569
you just wanna make sure that a component
doesn't update unless you know for

118
00:10:02.569 --> 00:10:04.576
sure that its values have changed.

119
00:10:04.576 --> 00:10:09.732
So we can tell the to do
component that it should only ever

120
00:10:09.732 --> 00:10:15.219
update anything when the data
that is passed into it changes

121
00:10:15.219 --> 00:10:21.492
by reference as opposed to when it
is told that its data has changed.

122
00:10:28.630 --> 00:10:31.643
This isn't something that
you'll use often, but

123
00:10:31.643 --> 00:10:34.245
it's a handy thing in some circumstances.

124
00:10:34.245 --> 00:10:39.152
So now if I change the value
of any of these todos,

125
00:10:39.152 --> 00:10:46.593
only the todo in question is being
updated, the others being left alone.

126
00:10:46.593 --> 00:10:51.818
Few other options that you can set,
accesses controls whether or

127
00:10:51.818 --> 00:10:55.713
not the instance of
a component exposes its props

128
00:10:55.713 --> 00:11:00.097
as accesses on the object
that you have a reference to.

129
00:11:00.097 --> 00:11:04.859
You can pass in a custom namespace,
and you can control the tag name if

130
00:11:04.859 --> 00:11:09.310
you're compiling your Svelte
components as custom elements.

131
00:11:09.310 --> 00:11:12.720
If you wanna know more about these,
consult the API reference.

132
00:11:18.375 --> 00:11:25.564
Earlier, we learned about using slots
to pass content into a component.

133
00:11:25.564 --> 00:11:29.382
In this exercise,
we're making a tic tac toe game.

134
00:11:29.382 --> 00:11:35.712
And we have a board component,
and inside that board component,

135
00:11:35.712 --> 00:11:40.432
we're passing some content
which is supposed to

136
00:11:40.432 --> 00:11:45.628
appear in each of the grid
cells defined by the board.

137
00:11:45.628 --> 00:11:50.495
So if you look inside the board component,
we are creating a grid which has

138
00:11:50.495 --> 00:11:54.277
a certain number of columns and
a certain number of rows.

139
00:11:54.277 --> 00:11:59.975
But what's happening here is because
we have a div with the slot equals

140
00:11:59.975 --> 00:12:06.448
game attribute, we're putting all of
the buttons inside the first element and

141
00:12:06.448 --> 00:12:10.711
it's not being spread out
into the rest of the grid.

142
00:12:10.711 --> 00:12:14.989
What we want to have is
these buttons as direct

143
00:12:14.989 --> 00:12:18.931
children of the div class equals board and

144
00:12:18.931 --> 00:12:24.464
we can do that by replacing
that div with a spelt fragment.

145
00:12:35.636 --> 00:12:40.328
All right, so
now the buttons that we are declaring now

146
00:12:40.328 --> 00:12:44.510
are direct children of
the div classic was born.

