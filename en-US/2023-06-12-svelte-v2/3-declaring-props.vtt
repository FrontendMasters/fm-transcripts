WEBVTT

1
00:00:00.540 --> 00:00:03.490
So you can see there's a few little
details that we need to iron out with

2
00:00:03.490 --> 00:00:04.500
the CSS here.

3
00:00:04.500 --> 00:00:08.490
In particular, it would be nice
to add some dot mode themes here.

4
00:00:08.490 --> 00:00:13.510
But on the whole here,
our game is looking pretty polished.

5
00:00:13.510 --> 00:00:16.700
And we can take this and we can deploy it
to the internet, and people can play it.

6
00:00:17.800 --> 00:00:19.510
So we used a lot of different
Svelte concepts here.

7
00:00:19.510 --> 00:00:23.493
We've used actions, we've used components,
we've used slots, we've used transitions,

8
00:00:23.493 --> 00:00:24.960
and animations.

9
00:00:24.960 --> 00:00:27.270
We've used events to manage state.

10
00:00:27.270 --> 00:00:31.690
We're using references to components and
calling functions inside those components.

11
00:00:31.690 --> 00:00:34.785
So we're using a pretty broad array of
the things that we learned earlier in

12
00:00:34.785 --> 00:00:35.820
the session.

13
00:00:35.820 --> 00:00:40.369
There is of course more that was covered
in the tutorial that we didn't use in

14
00:00:40.369 --> 00:00:41.480
this app.

15
00:00:41.480 --> 00:00:44.491
But that's something that
you'll have the opportunity to

16
00:00:44.491 --> 00:00:46.003
use as you build Svelte apps.

17
00:00:46.003 --> 00:00:50.630
&gt;&gt; Can you do repeat infinite
animations or transitions with Svelte?

18
00:00:50.630 --> 00:00:55.552
&gt;&gt; No, a transition is transitioning from
an element is not in the DOM to an element

19
00:00:55.552 --> 00:00:56.480
is in the DOM.

20
00:00:56.480 --> 00:00:57.720
Once it's there, that's it.

21
00:00:57.720 --> 00:01:01.020
You can of course add CSS
animations to your elements, so

22
00:01:01.020 --> 00:01:04.253
if you want to have something
that repeats infinitely,

23
00:01:04.253 --> 00:01:07.300
then you can just do that
as a regular CSS animation.

24
00:01:07.300 --> 00:01:10.229
You don't need to use Svelte
transitions for that, but

25
00:01:10.229 --> 00:01:12.110
no transition is off to an on state.

26
00:01:14.290 --> 00:01:18.974
&gt;&gt; Can you explain a little bit
more how dispatch is working and

27
00:01:18.974 --> 00:01:21.324
how the event handlers work?

28
00:01:21.324 --> 00:01:24.662
&gt;&gt; Yeah, so
when you call create event dispatcher,

29
00:01:24.662 --> 00:01:27.206
when a component first initializes,

30
00:01:27.206 --> 00:01:32.227
we are creating a function that is
bound to a specific component instance.

31
00:01:32.227 --> 00:01:37.359
And so when you call that function,
Svelte knows that it's the component

32
00:01:37.359 --> 00:01:42.930
within which you call create event
dispatcher that is dispatching that event.

33
00:01:42.930 --> 00:01:47.872
And so, anything that has a reference
to that component, because you have

34
00:01:47.872 --> 00:01:52.734
a component that has that other component
as a child, you can then add that

35
00:01:52.734 --> 00:01:58.100
event handler, and Svelte understands
the hierarchy of the components.

36
00:01:58.100 --> 00:02:03.013
And so, it knows that the event listener
on the outer component needs to respond

37
00:02:03.013 --> 00:02:08.000
to anything that gets called with
dispatch on the inner component.

38
00:02:08.000 --> 00:02:13.463
So it's just keeping a central registry
essentially of all of the components and

39
00:02:13.463 --> 00:02:14.829
their dispatches so

40
00:02:14.829 --> 00:02:19.180
that everything can get linked
up when you later call dispatch.

41
00:02:20.280 --> 00:02:25.096
&gt;&gt; Is there a way to link or warn that a
reactive value declaration is missing for

42
00:02:25.096 --> 00:02:29.250
a derived value of a component prop,
like the dollar sign colon?

43
00:02:33.947 --> 00:02:38.055
&gt;&gt; No, I'm not totally sure I understand
what situation that would come up in.

44
00:02:38.055 --> 00:02:44.315
If a reactive declaration references
a value that is not present,

45
00:02:44.315 --> 00:02:49.565
then like it will just not work
that will be a type error or

46
00:02:49.565 --> 00:02:52.270
a reference error, sorry.

47
00:02:52.270 --> 00:02:54.540
And you'll find out
about that immediately.

48
00:02:56.530 --> 00:03:00.550
I'm not sure what are the situation
that would come up in.

49
00:03:00.550 --> 00:03:04.600
&gt;&gt; The edit a little code snippet
where they declared a variable and

50
00:03:04.600 --> 00:03:06.854
set it equal to the string, hello.

51
00:03:06.854 --> 00:03:09.411
And append it on
a variable called my prop,

52
00:03:09.411 --> 00:03:13.186
but my prop should have had
the dollar sign colon in front of it.

53
00:03:13.186 --> 00:03:17.655
&gt;&gt; Right, so Svelte doesn't know what
your intent is when you write that code,

54
00:03:17.655 --> 00:03:22.330
maybe you do intend for it to be reactive
and maybe it's something that you want to

55
00:03:22.330 --> 00:03:27.380
be fixed when the component is initialized
which is completely legitimate.

56
00:03:27.380 --> 00:03:29.813
And so it's a little hard for
the compiler to be like,

57
00:03:29.813 --> 00:03:31.868
you got this wrong
because it doesn't know,

58
00:03:31.868 --> 00:03:36.110
the compiler is gonna assume that you
know the code that you're writing.

59
00:03:36.110 --> 00:03:40.314
So that's just something like a habit
that you get into, if you write a lot of

60
00:03:40.314 --> 00:03:45.047
components then you'll start to understand
which things need to be made reactive and

61
00:03:45.047 --> 00:03:49.210
which things can be left initialized
when the component first mounts.

62
00:03:49.210 --> 00:03:51.635
This concludes the first session.

63
00:03:51.635 --> 00:03:55.925
In the next session,
we're gonna be talking about Svelte kit.

64
00:03:55.925 --> 00:03:59.614
We're gonna be learning all of the things
that you can do with Svelte kit

65
00:03:59.614 --> 00:04:01.719
as a full stack application framework.

66
00:04:01.719 --> 00:04:05.326
I hope that this has been
useful learning experience.

67
00:04:05.326 --> 00:04:06.801
I hope that if you're new to Svelte,

68
00:04:06.801 --> 00:04:09.382
this has given you a sense of
what's possible to do with Svelte.

69
00:04:09.382 --> 00:04:11.310
And if you've been using Svelte for
a while,

70
00:04:11.310 --> 00:04:13.000
I hope that you learned something new.

71
00:04:13.000 --> 00:04:16.608
And if nothing else,
I hope that you all had fun.

72
00:04:16.608 --> 00:04:20.310
&gt;&gt; [APPLAUSE]

