WEBVTT

1
00:00:00.060 --> 00:00:01.274
Alright, so so far,

2
00:00:01.274 --> 00:00:06.198
we've dealt exclusively with state that is
internal to the component, which is to say

3
00:00:06.198 --> 00:00:11.210
that the values in the component are only
accessible within that dot Svelte file.

4
00:00:11.210 --> 00:00:13.833
But, when you're building things
out of multiple components,

5
00:00:13.833 --> 00:00:15.460
you will need to pass data between them.

6
00:00:16.700 --> 00:00:21.170
So, to do that, we use what
are called properties or props.

7
00:00:21.170 --> 00:00:25.080
In Svelte,
we do that using the export keyword.

8
00:00:25.080 --> 00:00:27.920
Let's go over to
the nested.svelte component.

9
00:00:27.920 --> 00:00:33.030
You see that we have a let answer value
here, which is currently undefined.

10
00:00:33.030 --> 00:00:37.382
We can say that we wanna expose this value
to the outside world and allow other

11
00:00:37.382 --> 00:00:41.610
components to pass data into this
component by using the export keyword.

12
00:00:44.570 --> 00:00:47.546
Now, if you've used import and
export before in JavaScript,

13
00:00:47.546 --> 00:00:50.409
then just like with the dollar sign,
you may be a little bit,

14
00:00:50.409 --> 00:00:52.620
hang on,
I don't know what's going on here.

15
00:00:52.620 --> 00:00:55.930
This is not how JavaScript normally
works and that is totally fine.

16
00:00:57.730 --> 00:01:00.168
It's not how JavaScript works, but

17
00:01:00.168 --> 00:01:05.580
it's syntax that we can use to
express the intent of this component.

18
00:01:05.580 --> 00:01:10.495
The idea is that everything inside
the script tag is valid JavaScript syntax,

19
00:01:10.495 --> 00:01:15.259
which makes it easy for you to use things
like linters and code formatters and

20
00:01:15.259 --> 00:01:16.460
all the rest of it.

21
00:01:16.460 --> 00:01:22.157
So, if you have some hesitations,
it's fine just roll with it and

22
00:01:22.157 --> 00:01:28.264
it'll soon become very natural, and
we can specify default values for

23
00:01:28.264 --> 00:01:33.080
props that we declare,
again inside nested.svelte.

24
00:01:34.480 --> 00:01:40.722
Let's give the answer
a fallback value of a mystery.

25
00:01:40.722 --> 00:01:44.744
And now inside app.svelte,
if we add a second nested component,

26
00:01:47.344 --> 00:01:51.450
You'll see that in the first case,
we're passing this answer prop down and

27
00:01:51.450 --> 00:01:53.386
it's being faithfully rendered.

28
00:01:53.386 --> 00:01:56.021
In the second case,
we're leaving that undefined and

29
00:01:56.021 --> 00:01:58.320
the component is using
its own fall back value.

30
00:02:04.903 --> 00:02:10.962
There's a bug in this exercise, we've
forgotten to include the version prop.

31
00:02:10.962 --> 00:02:16.100
So, this reads the spelt package is
blazing fast download version undefined.

32
00:02:16.100 --> 00:02:18.573
Well, that's obviously not good,

33
00:02:18.573 --> 00:02:24.040
now we could fix this by fixing the use
of this package info component here.

34
00:02:24.040 --> 00:02:28.470
We could add version
equals package.version.

35
00:02:28.470 --> 00:02:32.310
And you'll see that it now says
version three, that's great.

36
00:02:32.310 --> 00:02:38.530
That fixed it, but since the properties of
this package object you can see up here.

37
00:02:38.530 --> 00:02:43.787
Since they correspond to
the values that we're sending into

38
00:02:43.787 --> 00:02:48.939
the package info component,
we can just send them all in one

39
00:02:48.939 --> 00:02:54.732
go is as a package I guess,
using this spread syntax, ...pkg.

40
00:02:54.732 --> 00:02:56.536
It has the exact same effect.

41
00:02:56.536 --> 00:03:00.855
So, this is often the case when you're
working with props that you will have

42
00:03:00.855 --> 00:03:05.040
an object that perfectly matches the props
that you need to send to another

43
00:03:05.040 --> 00:03:09.307
component, and this is just a convenient
shorthand that lets you do this.

44
00:03:09.307 --> 00:03:13.834
A little bit of an advanced feature, if
you need to reference all of the props as

45
00:03:13.834 --> 00:03:18.432
an object inside the component then you
can use this special dollar dollar props

46
00:03:18.432 --> 00:03:21.770
value which is made available
to your components.

47
00:03:21.770 --> 00:03:26.310
&gt;&gt; How do we handle something like export
default or just export const and spell?

48
00:03:27.460 --> 00:03:33.350
&gt;&gt; So, you cannot export default because
the default export is the component.

49
00:03:34.500 --> 00:03:39.684
You can do an export const, but
it doesn't have the meaning that

50
00:03:39.684 --> 00:03:46.690
you're probably expecting if you're
translating directly from an export let.

51
00:03:46.690 --> 00:03:52.370
What an export const means is that you can
access the value of what's declared inside

52
00:03:52.370 --> 00:03:58.530
the component from outside the component
if you have a reference to that component.

53
00:03:58.530 --> 00:04:02.264
That's something that we're gonna cover
later on in the tutorial when we learn

54
00:04:02.264 --> 00:04:05.494
about bindings, you'll be able to
get a reference to a component and

55
00:04:05.494 --> 00:04:08.160
start interacting with
it programmatically.

56
00:04:08.160 --> 00:04:12.379
But in general, you're not gonna be using
export const inside your components, and

57
00:04:12.379 --> 00:04:16.760
you cannot use export default because
the component is the default export.

58
00:04:16.760 --> 00:04:21.828
&gt;&gt; When you create a component file, it's
just automatically export defaulted so

59
00:04:21.828 --> 00:04:24.880
you can import it from
any other Svelte file?

60
00:04:24.880 --> 00:04:28.538
&gt;&gt; Exactly, yeah.
&gt;&gt; And, when you export a variable

61
00:04:28.538 --> 00:04:33.150
in the script tags,
when you import the file,

62
00:04:33.150 --> 00:04:37.185
you're also importing that variable?

63
00:04:37.185 --> 00:04:42.027
&gt;&gt; You're importing the component and
then the export is just a market that says

64
00:04:42.027 --> 00:04:46.509
that you can pass that value into
the component that you just imported.

65
00:04:46.509 --> 00:04:50.486
Yeah, it's something that once
you've eased it a couple of times,

66
00:04:50.486 --> 00:04:53.654
it'll start to feel a lot more natural and
make sense.

67
00:04:53.654 --> 00:04:56.656
&gt;&gt; Does this say, not support TypeScript?

68
00:04:56.656 --> 00:04:59.859
&gt;&gt; It does support TypeScript,
learn.svelte.dev does not currently

69
00:04:59.859 --> 00:05:02.905
support TypeScript, that is
something that we would like to add.

70
00:05:02.905 --> 00:05:08.746
Unfortunately, TypeScript is kind of a big
and complicated package, and in order

71
00:05:08.746 --> 00:05:14.096
to use it in here, we would need to load
like I think about a megabyte of code.

72
00:05:14.096 --> 00:05:16.733
And we would also need to teach
the code editor how to interpret that,

73
00:05:16.733 --> 00:05:17.560
it's a whole thing.

74
00:05:17.560 --> 00:05:21.953
And we plan to do that one day, but for
now we're not gonna be using TypeScript.

75
00:05:21.953 --> 00:05:26.540
Later on, when we get out of this website
and start building something on our own

76
00:05:26.540 --> 00:05:31.760
machines, that's the point at which we'll
start using TypeScript, we'll get there.

