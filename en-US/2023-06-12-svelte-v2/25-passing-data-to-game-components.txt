[00:00:00]
>> For those of you who haven't used context in other frameworks, context APIs are essentially a mechanism for components to talk to each other without passing data and functions around as props and without dispatching events. It's not a feature that you will tend to use a lot in your own apps, but it is a useful one.

[00:00:18]
It's something that's more frequently used in the context of a component library. But it's worth understanding how it works. So in this exercise, we've got a blank Canvas here and our task is to recreate this piece of artwork called shutter by a chap named George Nees. He was one of the pioneers of computer driven artwork.

[00:00:42]
I'm gonna use that. We're gonna use the Canvas API to rebuild this. So, App.svelte is instantiation this Canvas element, and it's putting an array of squares inside the Canvas. The Canvas is as we've seen as this very imperative API, it doesn't normally work with components. The context API allows us to make components that draw to a Canvas.

[00:01:18]
Inside the Canvas component, we have this addItem function, and what addItem does is it calls onMount and adds a function that is gonna render something to a Canvas, to a set that we have locally to the Canvas element. And then when the component is removed, it'll take that out of the set.

[00:01:41]
Every time there's any update to the state, then it's gonna use that await tick, to redraw the Canvas, to reflect the new data. So what we need to do, our task is to make this addItem function available to the square.svelte component, and we can do that by first importing set context from svelte.

[00:02:09]
And then calling it. With a name for the context. We're gonna use the word Canvas, but it can be anything, it doesn't even need to be a string. And we'll pass that addItem function. And then inside square, which is a child of Canvas. In the sense that app.svelte contains Canvas inside that it's got a bunch of squares.

[00:02:35]
We can use the opposite function, getContext. And when this component is created, we're gonna get the current context so that we get a reference to that function. And we're gonna pass in the draw function that is defined inside Square.svelte, right?. And if we bring this up a little bit so you can see it, it is in fact drawing a grid.

[00:03:09]
It's a little boring though, we could add some randomness here. So inside App.svelte Where we're passing the props into the square, we can add a little bit of randomness with this jitter utility. Right, the further down we get, the higher the value of R, R stands for row in this context, so that as with the original artwork it starts out very regular and then starts to get more raggedy as we get down.

[00:03:45]
We'll do the same thing with the Y value. And then finally we'll add some rotate. All right, and I think that's pretty close to the original artwork, we're using a seated pseudorandom number generator here. So we can change that seed and get a different set of random numbers until we find one that we like.

[00:04:37]
Now, just like onMount and beforeUpdate and afterUpdate, you have to call setContext and getContext while your component is initializing, that's how we link the context to the component tree. Sometimes you need to have data that is changing in some parent and you need to build a response to that changing data in your child component.

[00:05:01]
And when you need to do that, you can pass a store in as your context as shown here.

