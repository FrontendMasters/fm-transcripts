WEBVTT

1
00:00:00.400 --> 00:00:04.262
What we'd like to do now is start
making it look an actual game.

2
00:00:04.262 --> 00:00:08.748
And one unfortunate reality about
working with emojis is that they are not

3
00:00:08.748 --> 00:00:11.800
reliable across browsers and
across platforms.

4
00:00:11.800 --> 00:00:15.254
In particular, if you were to look
at this on an Android device, for

5
00:00:15.254 --> 00:00:19.148
some reason the emojis will be off center
and it would look kind of terrible.

6
00:00:19.148 --> 00:00:23.568
So what we're gonna do is we're gonna grab
a set of Svg that represent all of these

7
00:00:23.568 --> 00:00:24.092
emojis.

8
00:00:24.092 --> 00:00:27.501
And there's a brilliant resource that I've
used a whole bunch that's really good in

9
00:00:27.501 --> 00:00:28.509
situations like these.

10
00:00:28.509 --> 00:00:34.057
It's called twemoji and
it's the Twitter set of emojis.

11
00:00:34.057 --> 00:00:41.269
So just go to twemoji, just Google for
that, and go to the GitHub link down here.

12
00:00:47.180 --> 00:00:52.297
And we're gonna clone this repo

13
00:00:52.297 --> 00:00:57.610
into a convenient place nearby.

14
00:00:57.610 --> 00:01:07.206
I'm gonna do git clone
git@github.com:twitter/twemoji.

15
00:01:07.206 --> 00:01:10.952
This is gonna clone that
repo onto my hard drive.

16
00:01:10.952 --> 00:01:13.718
Here's what I made earlier.

17
00:01:17.625 --> 00:01:22.676
Once we've done that,
we can get the assets inside

18
00:01:22.676 --> 00:01:27.271
that repo and
bring them into our own project.

19
00:01:27.271 --> 00:01:31.239
So we haven't in here if I make this
a little bit bigger so that you can see,

20
00:01:31.239 --> 00:01:34.503
is in addition to the code for
generating all of this stuff and

21
00:01:34.503 --> 00:01:37.139
all of the license information and
everything.

22
00:01:37.139 --> 00:01:44.579
We have this Svg folder that
contains an individual emoji Svg for

23
00:01:44.579 --> 00:01:48.863
basically every emoji that exists.

24
00:01:48.863 --> 00:01:56.225
And they're all indexed by the emojis
code point sequence in hexadecimal.

25
00:01:56.225 --> 00:02:00.404
And if that was gibberish, then don't
worry because we're gonna take the emoji

26
00:02:00.404 --> 00:02:03.231
sequence that we've already
got in our levels data and

27
00:02:03.231 --> 00:02:05.951
we're gonna turn it into a twemoji_urls,
right?

28
00:02:05.951 --> 00:02:09.963
So I've got the repo
locally on my machine now,

29
00:02:09.963 --> 00:02:15.797
I'm gonna open up the directory
where we're building our project.

30
00:02:15.797 --> 00:02:20.413
And we're gonna move the Svg assets into

31
00:02:20.413 --> 00:02:25.587
the static folder of
our Sveltekit project.

32
00:02:25.587 --> 00:02:27.378
It's gonna drag that over like so.

33
00:02:27.378 --> 00:02:29.988
And I'm gonna rename it to twemoji.

34
00:02:35.165 --> 00:02:38.716
And now inside our app we need to replace.

35
00:02:40.588 --> 00:02:45.465
All of these emoji spans with images
that reference the Svgs that we now

36
00:02:45.465 --> 00:02:46.961
have in our project.

37
00:02:50.834 --> 00:02:55.720
I'm gonna create a helper
inside utils that will take

38
00:02:55.720 --> 00:03:00.833
an emoji as an input and
return a path to the twemoji svg.

39
00:03:00.833 --> 00:03:06.150
So, find utils and
we'll create a new function,

40
00:03:06.150 --> 00:03:10.967
call it something like get_twemoji_url.

41
00:03:10.967 --> 00:03:14.550
It's gonna take an emoji which
is a string as its input.

42
00:03:18.543 --> 00:03:23.583
And it took me a minute to figure
out the logic for this, so

43
00:03:23.583 --> 00:03:29.150
don't worry if this doesn't make sense,
just follow along.

44
00:03:29.150 --> 00:03:31.637
The code is the,

45
00:03:34.409 --> 00:03:40.064
The string spread out into an array.

46
00:03:40.064 --> 00:03:45.565
And then we're gonna map
that to the char.codePoint,

47
00:03:48.740 --> 00:03:54.446
Represented as a hexadecimal string.

48
00:03:54.446 --> 00:04:00.270
And then we join that
with a hyphen character.

49
00:04:09.145 --> 00:04:13.426
Then we return that with the twemoji
prefix that corresponds to

50
00:04:13.426 --> 00:04:15.939
the directory that we just created.

51
00:04:15.939 --> 00:04:20.841
So inside square.svelte,
we can now get rid of this span and

52
00:04:20.841 --> 00:04:23.256
replace it with an image tag.

53
00:04:28.546 --> 00:04:36.886
The source of which is going
to be get_twemoji_url(emoji).

54
00:04:36.886 --> 00:04:39.168
Get rid of the rest of that stuff.

55
00:04:39.168 --> 00:04:42.216
Save, and it works.

56
00:04:42.216 --> 00:04:46.269
Okay, so we now have twemoji in
our application little bit big.

57
00:04:46.269 --> 00:04:47.978
So we need to shrink these down.

58
00:04:47.978 --> 00:04:53.048
Down here you'll see that we now have
this warning from the spell compiler

59
00:04:53.048 --> 00:04:58.379
that we have an unused CSS selector in
our app because we no longer have a span.

60
00:04:58.379 --> 00:05:02.839
So you can replace that with an SVG,

61
00:05:02.839 --> 00:05:08.189
give it a width of 5ms and
a height of 5ms,

62
00:05:08.189 --> 00:05:14.894
sorry not SVG, image, but
keep the pointer events.

63
00:05:14.894 --> 00:05:17.462
And he's back to look in
the way that it was before.

64
00:05:17.462 --> 00:05:21.331
Maybe this could be a tiny bit bigger,
let's make that 6 ms.

65
00:05:21.331 --> 00:05:28.137
And we're gonna wanna do the same
thing in the found.svelte component.

66
00:05:28.137 --> 00:05:33.333
Get rid of the span,
img alt = { emoji} scr

67
00:05:33.333 --> 00:05:38.264
= {get_twemoji_url} of the emoji.

68
00:05:42.205 --> 00:05:46.095
And down here, we'll replace
that select again with image.

69
00:05:46.095 --> 00:05:52.652
And so now if we find a matching pair,
it's not what I expected.

70
00:05:52.652 --> 00:05:57.816
We need to replace that with a width and
height.

71
00:06:01.079 --> 00:06:03.361
All right, that looks a little bit nicer.

