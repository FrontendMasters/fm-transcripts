WEBVTT

1
00:00:00.080 --> 00:00:04.207
So we've got data going down into our
components, but now we need to get some

2
00:00:04.207 --> 00:00:08.740
user interaction causing events to come
back up, otherwise we don't have a game.

3
00:00:10.400 --> 00:00:14.778
So we'll begin by adding a button
inside the square component.

4
00:00:18.261 --> 00:00:22.483
And we're gonna use the event forwarding
shorthand that we learned earlier.

5
00:00:22.483 --> 00:00:27.203
To do on click like that,
and we're gonna give

6
00:00:27.203 --> 00:00:32.420
the button some styles so
that it fills the square.

7
00:00:33.840 --> 00:00:38.521
We'll give it a position
absolute width 100%, height 100%.

8
00:00:40.700 --> 00:00:43.030
You now see the button filling the square.

9
00:00:43.030 --> 00:00:46.936
And because we have that click handler,
we can start listening for

10
00:00:46.936 --> 00:00:48.270
that inside our grid.

11
00:00:49.960 --> 00:00:52.440
We start typing on click.

12
00:00:52.440 --> 00:00:57.170
It already knows that click is one of the
events that this component can broadcast.

13
00:00:57.170 --> 00:01:01.950
So inside there,
we'll start adding some logic.

14
00:01:06.900 --> 00:01:11.813
Now there are various states that the game
could be in when someone clicks on one

15
00:01:11.813 --> 00:01:13.560
of these buttons.

16
00:01:13.560 --> 00:01:17.851
The first state is the one that we
have now, nothing is selected, or

17
00:01:17.851 --> 00:01:21.830
there could be one card that has so
far been selected.

18
00:01:21.830 --> 00:01:23.600
In other words,
the card has been flipped over and

19
00:01:23.600 --> 00:01:25.920
we're revealing what is on the other side.

20
00:01:25.920 --> 00:01:27.570
And then we're gonna
select the second one.

21
00:01:27.570 --> 00:01:31.315
Or we could be in a state where two
cards have already been selected,

22
00:01:31.315 --> 00:01:33.756
we need to handle each
of those separately.

23
00:01:44.842 --> 00:01:49.250
So the easiest one is,
what if nothing is selected so far?

24
00:01:49.250 --> 00:01:53.100
Well, we need some way of representing
that state inside this component.

25
00:01:53.100 --> 00:01:56.020
So I'm gonna create some more variables.

26
00:01:56.020 --> 00:02:01.110
We'll call them a and b,
a is a string and b, in fact, no.

27
00:02:02.130 --> 00:02:03.840
We can use an index here.

28
00:02:03.840 --> 00:02:08.362
So it's gonna be a number,
a is a number and b is a number.

29
00:02:08.362 --> 00:02:13.263
And in fact we can initialize these to -1,
that can be our

30
00:02:13.263 --> 00:02:18.800
layer of representing the a and
b both currently unselected.

31
00:02:18.800 --> 00:02:22.370
And when we do select one of these, we can
set that to be index within the array.

32
00:02:23.650 --> 00:02:28.854
In order to know the index inside
the array, we need to add the comma i to

33
00:02:28.854 --> 00:02:34.185
each block And

34
00:02:34.185 --> 00:02:39.078
we'll begin by saying, that if a is -1 and

35
00:02:39.078 --> 00:02:43.573
b is -1, then nothing is selected, so

36
00:02:43.573 --> 00:02:50.208
in response we need to assign
the current index to the a value

37
00:02:53.329 --> 00:02:55.687
Do that like that.

38
00:02:55.687 --> 00:03:02.420
All right, if I hit Save, pretty is gonna
format all of my messy code for me.

39
00:03:02.420 --> 00:03:08.044
Okay, well, how do we represent
that new state in our app?

40
00:03:08.044 --> 00:03:12.434
Well, we're gonna need to pass
that information back down into

41
00:03:12.434 --> 00:03:14.074
the square component.

42
00:03:14.074 --> 00:03:19.271
So we'll add a new prop on a square.

43
00:03:19.271 --> 00:03:21.371
Export let selected,
that's gonna be a Boolean.

44
00:03:24.081 --> 00:03:32.230
And we can add a class to div
class equals square like this.

45
00:03:32.230 --> 00:03:36.892
In fact, let's call it flipped, because
that's how it's gonna be represented in

46
00:03:36.892 --> 00:03:40.910
the user interface when we get round
to making this look more like a game.

47
00:03:42.140 --> 00:03:46.215
It's giving us an error because
flipped is not a value,

48
00:03:46.215 --> 00:03:49.730
so we'll make that like this, okay?

49
00:03:49.730 --> 00:03:54.624
And then we'll add some styles for

50
00:03:54.624 --> 00:03:59.017
that state, had a flip class.

51
00:03:59.017 --> 00:04:02.395
In fact, let's add it on the button.

52
00:04:02.395 --> 00:04:08.129
Add some more ugly background colors.

53
00:04:08.129 --> 00:04:12.120
Inside our grid now, we're gonna
see that there's a red squiggly

54
00:04:12.120 --> 00:04:16.761
under square because we are not passing
in a prop that the component expects.

55
00:04:16.761 --> 00:04:22.223
Fix that, selected equals,

56
00:04:22.223 --> 00:04:27.420
a equals i or b equals i.

57
00:04:27.420 --> 00:04:32.190
Right, so for each iteration of this loop,
if a is 0 or b is 0,

58
00:04:32.190 --> 00:04:36.610
then the zeroth element of
that array should be selected.

59
00:04:38.180 --> 00:04:40.855
So hopefully,
if we wire this up correctly and

60
00:04:40.855 --> 00:04:43.264
I press one of these buttons now, right?

61
00:04:43.264 --> 00:04:46.712
It's gonna turn that Into
a selected state, but

62
00:04:46.712 --> 00:04:51.183
only if we're in that state where
nothing so far was selected.

63
00:04:51.183 --> 00:04:54.623
One other little detail here, you'll
notice that if I click on the emojis,

64
00:04:54.623 --> 00:04:57.064
the button does not get clicked,
that's annoying.

65
00:04:57.064 --> 00:05:01.772
So on the span,
we're gonna add a point to events, none.

66
00:05:01.772 --> 00:05:06.603
That allows us to click
anywhere inside that button and

67
00:05:06.603 --> 00:05:09.553
it will have the desired effect.

68
00:05:09.553 --> 00:05:11.140
All right, so
let's carry on with this logic.

69
00:05:11.140 --> 00:05:14.525
So we've handled the first state
where nothing was selected.

70
00:05:14.525 --> 00:05:20.586
What about when a is selected but
b is unselected?

71
00:05:31.730 --> 00:05:35.770
In this case, we have two possibilities.

72
00:05:37.220 --> 00:05:40.370
The first possibility is
that we selected a pair.

73
00:05:40.370 --> 00:05:43.414
The second possibility is that we
selected something that was not a pair of

74
00:05:43.414 --> 00:05:44.800
the already selected elements.

75
00:05:44.800 --> 00:05:46.380
So we'll have another if block in here.

76
00:05:47.630 --> 00:05:51.370
If grid a equals grid b,

77
00:05:51.370 --> 00:05:57.168
congratulations, we found a pair.

78
00:05:57.168 --> 00:06:02.064
Otherwise, incorrect.

79
00:06:02.064 --> 00:06:04.870
And we'll put in some logic for
that case in a minute.

80
00:06:07.770 --> 00:06:10.683
Otherwise, if neither of
those conditions are true,

81
00:06:10.683 --> 00:06:13.720
then it means that we've
already selected a and b.

82
00:06:13.720 --> 00:06:16.870
And then we need to flip those
back over and start again.

83
00:06:18.100 --> 00:06:24.130
So b is gonna revert to -1, and a is
gonna become whatever we just selected.

84
00:06:26.720 --> 00:06:32.770
So now if I click this one and
then this one, nothing's happening.

85
00:06:34.280 --> 00:06:34.848
Where did I go wrong?

86
00:06:43.847 --> 00:06:44.480
Because I forgot to add that.

87
00:06:47.763 --> 00:06:50.532
Okay, so now we have both a and
b selected.

88
00:06:50.532 --> 00:06:54.483
If we select another one,
it will reset the selection and

89
00:06:54.483 --> 00:06:56.882
get rid of the selected state on b.

90
00:06:56.882 --> 00:07:01.497
That's okay but in any memory game like
this, normally what happens is after

91
00:07:01.497 --> 00:07:05.615
you've selected a pair,
they get hidden immediately afterwards so

92
00:07:05.615 --> 00:07:08.599
that you can't like stare at them and
make notes.

93
00:07:08.599 --> 00:07:12.316
So we're gonna add a timeout that
makes that happen in the case where we

94
00:07:12.316 --> 00:07:14.215
got it wrong in the incorrect case.

95
00:07:14.215 --> 00:07:17.920
Could do you set timeout.

96
00:07:17.920 --> 00:07:20.786
After a second,

97
00:07:20.786 --> 00:07:26.528
we'll reset a and b both to -1.

98
00:07:26.528 --> 00:07:31.474
We have to be careful though with
set timeouts because you could find

99
00:07:31.474 --> 00:07:36.247
a situation where the set timeout
callback runs after the user has

100
00:07:36.247 --> 00:07:39.048
continued selecting other squares.

101
00:07:39.048 --> 00:07:43.648
So we need to be able to
cancel that when necessary.

102
00:07:43.648 --> 00:07:47.515
So up here I'm gonna
create a new variable,

103
00:07:47.515 --> 00:07:52.020
let reset timeout, and
that's gonna be a number.

104
00:07:52.020 --> 00:07:56.688
And then I'm gonna assign
that to the setTimeout call.

105
00:07:56.688 --> 00:08:00.384
And then basically every time I click,
I'm just gonna clear that timeout, so

106
00:08:00.384 --> 00:08:03.520
I don't need to worry about
interactions clobbering each other.

107
00:08:11.646 --> 00:08:14.160
So hopefully, we've done this right.

108
00:08:14.160 --> 00:08:18.658
If I select two cards,
they'll stay selected for a second, and

109
00:08:18.658 --> 00:08:22.060
then they'll become unselected.

110
00:08:22.060 --> 00:08:24.780
If I select another card
within that window,

111
00:08:24.780 --> 00:08:29.518
then it will just reset the timeout and
carry on with a new selection, like so.

