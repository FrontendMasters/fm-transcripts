WEBVTT

1
00:00:00.400 --> 00:00:04.530
What we'd like to do now is start
making it look like an actual game.

2
00:00:04.530 --> 00:00:08.882
And one unfortunate reality about
working with emojis is that they are not

3
00:00:08.882 --> 00:00:11.840
reliable across browsers and
across platforms.

4
00:00:11.840 --> 00:00:15.605
In particular, if you were to look at this
on an Android device, for some reason,

5
00:00:15.605 --> 00:00:19.230
the emojis would all be off center and
it would look kinda terrible.

6
00:00:19.230 --> 00:00:20.369
So what we're gonna do,

7
00:00:20.369 --> 00:00:23.535
is we're gonna grab a set of SVGs
that represent all of these emojis.

8
00:00:23.535 --> 00:00:26.940
And there's a brilliant resource that
I've used a whole bunch that's really

9
00:00:26.940 --> 00:00:28.580
good in situations like these.

10
00:00:28.580 --> 00:00:34.090
It's called twemoji and
it's the Twitter set of emojis.

11
00:00:34.090 --> 00:00:38.850
So just go to Twemoji just Google for

12
00:00:38.850 --> 00:00:44.255
that and go to the GitHub link down here.

13
00:00:46.898 --> 00:00:51.888
And we're gonna clone this repo,

14
00:00:54.325 --> 00:00:57.385
Into a convenient place nearby.

15
00:00:57.385 --> 00:01:06.966
I'm gonna do git clone
git@github.com:twitter/twemoji.

16
00:01:06.966 --> 00:01:12.712
This is gonna clone that
repo onto my hard drive.

17
00:01:12.712 --> 00:01:13.684
Here's what I made earlier.

18
00:01:17.570 --> 00:01:22.286
And once we've done that,
we can get the assets inside that repo and

19
00:01:22.286 --> 00:01:24.620
bring them into our own project.

20
00:01:27.171 --> 00:01:31.783
So here if I make this a little
bit bigger so that you can see,

21
00:01:31.783 --> 00:01:36.490
is in addition to the code for
generating all of this stuff and

22
00:01:36.490 --> 00:01:40.277
all of the license information and
everything,

23
00:01:40.277 --> 00:01:45.262
we have this SVG folder that
contains an individual emoji SVG for

24
00:01:45.262 --> 00:01:48.900
basically every emoji that exists.

25
00:01:48.900 --> 00:01:56.340
And they're all indexed by the emoji's
code point sequence in hexadecimal.

26
00:01:56.340 --> 00:02:00.387
And if that was gibberish, then don't
worry because we're gonna take the emoji

27
00:02:00.387 --> 00:02:03.124
sequence that we've already
got in our levels data and

28
00:02:03.124 --> 00:02:05.766
we're gonna turn it into twemoji URLs,
all right?

29
00:02:05.766 --> 00:02:07.784
So I've got the repo
locally on my machine now.

30
00:02:07.784 --> 00:02:13.484
I'm gonna open up the directory
where we're building our project.

31
00:02:15.939 --> 00:02:20.791
And we're gonna move the the SVG
assets into the static folder

32
00:02:20.791 --> 00:02:22.943
of our Sveltekit project.

33
00:02:25.321 --> 00:02:27.382
Just gonna drag that over like so.

34
00:02:27.382 --> 00:02:29.738
And I'm gonna rename it to twemoji.

35
00:02:35.173 --> 00:02:40.329
And now inside our app,
we need to replace all of these emoji

36
00:02:40.329 --> 00:02:46.847
spans with images that referenced
the SVGs that we now have in our project.

37
00:02:50.800 --> 00:02:55.155
I'm gonna create a helper
inside utils that will take

38
00:02:55.155 --> 00:03:00.940
an emoji as an input and return and
a path to the twemoji SVG.

39
00:03:00.940 --> 00:03:04.680
So find utils and
we'll create a new function.

40
00:03:06.420 --> 00:03:11.150
Call it something like get_twemoji URL.

41
00:03:11.150 --> 00:03:16.850
It's gonna take an emoji,
which is a string, as its input.

42
00:03:19.638 --> 00:03:23.393
And it took me a minute to
figure out the logic for this.

43
00:03:23.393 --> 00:03:28.968
So don't worry that if this doesn't
make sense just follow along.

44
00:03:28.968 --> 00:03:37.868
The code is the,
The string spread out into an array.

45
00:03:40.028 --> 00:03:45.638
Then we're gonna map that,
To the character code point,

46
00:03:48.724 --> 00:03:53.372
Represented, As a hexadecimal string.

47
00:03:55.275 --> 00:04:01.234
And then we join that
with a hyphen character.

48
00:04:09.066 --> 00:04:13.811
Then we return that with the twemoji
prefix that corresponds to the directory

49
00:04:13.811 --> 00:04:15.205
that we just created.

50
00:04:15.205 --> 00:04:20.524
So inside square.svelte,
we can now get rid of this span and

51
00:04:20.524 --> 00:04:23.143
replace it with an image tag,

52
00:04:28.398 --> 00:04:36.940
The source of which is going
to be get_twemoji_url(emoji).

53
00:04:36.940 --> 00:04:39.070
Get rid of the rest of that stuff.

54
00:04:39.070 --> 00:04:42.344
Save and it works, okay?

55
00:04:42.344 --> 00:04:45.319
So we now have twemoji in our application.

56
00:04:45.319 --> 00:04:48.261
A little bit big, so
we need to shrink these down.

57
00:04:48.261 --> 00:04:53.273
Down here, you'll see that we now have
this warning from the spell compiler

58
00:04:53.273 --> 00:04:58.383
that we have an unused CSS selector in
our app because we no longer have a span.

59
00:04:58.383 --> 00:05:03.210
So you can replace that with an SVG,
we'll give

60
00:05:03.210 --> 00:05:08.157
it a width of 5ems and
a height of 5ems, sorry,

61
00:05:08.157 --> 00:05:13.453
not SVG, image, But
keep the pointer-events.

62
00:05:13.453 --> 00:05:17.281
And it's back to look in
the way that it was before.

63
00:05:17.281 --> 00:05:18.613
Maybe this could be a tiny bit bigger.

64
00:05:18.613 --> 00:05:21.043
Let's make that 6ems.

65
00:05:21.043 --> 00:05:25.122
And we're gonna want to do the same
thing in the found.cell component.

66
00:05:27.962 --> 00:05:33.338
Get rid of the span, &lt;img alt ={emoji}

67
00:05:33.338 --> 00:05:38.277
src=get_twemoji_url(emoji).

68
00:05:42.019 --> 00:05:45.927
And down here we'll replace
that selector again with image.

69
00:05:45.927 --> 00:05:49.208
And so now, if we find a matching pair.

70
00:05:49.208 --> 00:05:52.450
Whoa, it's not what I expected.

71
00:05:52.450 --> 00:05:57.740
We need to replace that with a width and
height.

72
00:06:00.920 --> 00:06:03.501
All right, that looks a little bit nicer.

