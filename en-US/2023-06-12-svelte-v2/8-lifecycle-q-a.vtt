WEBVTT

1
00:00:00.000 --> 00:00:04.431
All right, so far we've dealt exclusively
with state that is internal to

2
00:00:04.431 --> 00:00:08.719
the component, which is to say that
the values in the component are only

3
00:00:08.719 --> 00:00:11.167
accessible within that .svelte file.

4
00:00:11.167 --> 00:00:14.425
But when you're building things
out of multiple components,

5
00:00:14.425 --> 00:00:16.520
you will need to pass data between them.

6
00:00:16.520 --> 00:00:21.203
And so to do that, we use what
are called properties or props.

7
00:00:21.203 --> 00:00:25.061
In Svelte,
we do that using the export keyword.

8
00:00:25.061 --> 00:00:27.792
Let's go over to
the Nested.svelte component.

9
00:00:27.792 --> 00:00:32.918
And you see that we have a let answer
value here, which is currently undefined.

10
00:00:32.918 --> 00:00:38.806
We can say that we wanna expose this value
to the outside world and allow other

11
00:00:38.806 --> 00:00:44.524
components to pass data into this
component by using the export keyword.

12
00:00:44.524 --> 00:00:47.331
Now if you've used import and
export before in JavaScript,

13
00:00:47.331 --> 00:00:50.796
then just like with the dollar sign,
you may be a little bit like, hang on,

14
00:00:50.796 --> 00:00:52.522
I don't know what's going on here.

15
00:00:52.522 --> 00:00:54.521
This is not how JavaScript normally works.

16
00:00:54.521 --> 00:00:57.561
And that is totally fine.

17
00:00:57.561 --> 00:01:00.321
It's not how JavaScript works, but

18
00:01:00.321 --> 00:01:05.496
it's syntax that we can use to
express the intent of this component.

19
00:01:05.496 --> 00:01:10.454
The idea is that everything inside this
script tag is valid JavaScript syntax,

20
00:01:10.454 --> 00:01:15.190
which makes it easy for you to use things
like linters and code formatters and

21
00:01:15.190 --> 00:01:16.383
all the rest of it.

22
00:01:16.383 --> 00:01:20.481
So if you have some hesitations,
it's fine, just roll with it and

23
00:01:20.481 --> 00:01:22.613
it'll soon become very natural.

24
00:01:25.284 --> 00:01:31.222
And we can specify default values for
props that we declare.

25
00:01:31.222 --> 00:01:34.948
Again, inside Nested.svelte,

26
00:01:34.948 --> 00:01:40.731
let's give the answer
a fullback value of a mystery.

27
00:01:40.731 --> 00:01:44.573
And now inside App.svelte,
if we add a second nested component,

28
00:01:47.514 --> 00:01:51.575
You'll see that in the first case,
we're passing this answer prop down and

29
00:01:51.575 --> 00:01:53.483
it's being faithfully rendered.

30
00:01:53.483 --> 00:01:56.141
In the second case,
we're leaving that undefined and

31
00:01:56.141 --> 00:01:58.468
the component is using
its own fallback value.

32
00:02:04.985 --> 00:02:11.071
There's a bug in this exercise, we've
forgotten to include the version prop.

33
00:02:11.071 --> 00:02:16.053
So this reads the svelte package is
blazing fast, download version undefined.

34
00:02:16.053 --> 00:02:18.404
Well, that's obviously not good.

35
00:02:18.404 --> 00:02:23.991
Now we could fix this by fixing the use
of this package info component here.

36
00:02:23.991 --> 00:02:29.515
We could add version = {pkg.version}.

37
00:02:29.515 --> 00:02:31.215
And you'll see that it now says version 3.

38
00:02:31.215 --> 00:02:32.042
That's great.

39
00:02:32.042 --> 00:02:32.973
That fixed it.

40
00:02:32.973 --> 00:02:38.951
But since the properties of this package
object that you can see up here,

41
00:02:38.951 --> 00:02:44.929
since they correspond to the values
that we're sending into the package

42
00:02:44.929 --> 00:02:50.221
info component, we can just send
them all in one go as a package,

43
00:02:50.221 --> 00:02:56.604
I guess using this spread syntax,
...pkg, it has the exact same effect.

44
00:02:56.604 --> 00:02:59.204
So this is often the case when
you're working with props and

45
00:02:59.204 --> 00:03:02.428
that you will have an object that
perfectly matches the props that you need

46
00:03:02.428 --> 00:03:03.788
to send to another component.

47
00:03:03.788 --> 00:03:09.355
And this is just a convenient
shorthand that lets you do this.

48
00:03:09.355 --> 00:03:14.027
A little bit of an advanced feature,
if you need to reference all of the props

49
00:03:14.027 --> 00:03:16.947
as an object inside the component,
then you can

50
00:03:16.947 --> 00:03:21.771
use this special $$props value which
is made available to your components.

51
00:03:21.771 --> 00:03:26.559
&gt;&gt; How do we handle something
like export default or

52
00:03:26.559 --> 00:03:29.489
just export const in svelte?

53
00:03:29.489 --> 00:03:34.436
&gt;&gt; So you cannot export default because
the default export is the component.

54
00:03:34.436 --> 00:03:40.475
You can do an export const, but
it doesn't have the meaning that you're

55
00:03:40.475 --> 00:03:46.618
probably expecting if you're translating
directly from an export LED.

56
00:03:46.618 --> 00:03:52.484
What an export const means is that you can
access the value of what's declared inside

57
00:03:52.484 --> 00:03:58.365
the component from outside the component
if you have a reference to that component.

58
00:03:58.365 --> 00:04:01.991
That's something that we're gonna
cover later on in the tutorial when we

59
00:04:01.991 --> 00:04:05.675
learn about bindings, you'll be able
to get a reference to a component and

60
00:04:05.675 --> 00:04:08.030
start interacting with
it programmatically.

61
00:04:08.030 --> 00:04:12.598
But in general, you're not gonna be using
export const inside your components, and

62
00:04:12.598 --> 00:04:16.670
you cannot use export default because
the component is the default export.

63
00:04:16.670 --> 00:04:21.607
&gt;&gt; When you create a component file,
it's just automatically export defaulted.

64
00:04:21.607 --> 00:04:24.695
So you can import it from
any other Svelte file.

65
00:04:24.695 --> 00:04:25.656
&gt;&gt; Exactly, yeah.

66
00:04:25.656 --> 00:04:33.575
&gt;&gt; And then when you export a variable in
the script tags, when you import the file,

67
00:04:33.575 --> 00:04:39.580
you're also importing that variable
&gt;&gt; You're importing the component,

68
00:04:39.580 --> 00:04:44.121
and then the export is just a marker
that says you can pass that value into

69
00:04:44.121 --> 00:04:46.630
the component that you just imported.

70
00:04:46.630 --> 00:04:50.696
Yeah, it's something that like once
you've used it a couple of times,

71
00:04:50.696 --> 00:04:53.775
it'll start to feel a lot more natural and
make sense.

72
00:04:53.775 --> 00:04:56.433
&gt;&gt; Did you say that it
supports TypeScript?

73
00:04:56.433 --> 00:04:57.709
&gt;&gt; It does support TypeScript.

74
00:04:57.709 --> 00:05:00.501
Learn.Svelte.dev does not
currently support TypeScript.

75
00:05:00.501 --> 00:05:03.344
That is something that
we would like to add.

76
00:05:03.344 --> 00:05:08.198
Unfortunately, TypeScript is, it's kind
of a big and complicated package, and

77
00:05:08.198 --> 00:05:13.044
in order to use it in here, we would need
to load, I think, about a megabit of code,

78
00:05:13.044 --> 00:05:16.683
and we would also need to teach
the code how to interpret that.

79
00:05:16.683 --> 00:05:17.948
It's like a whole thing.

80
00:05:17.948 --> 00:05:22.326
We plan to do that one day, but for now,
we're not gonna be using TypeScript.

81
00:05:22.326 --> 00:05:26.698
Later on, when we get out of this
website and start building something on

82
00:05:26.698 --> 00:05:31.444
our own machines, that's the point at
which we'll start using TypeScript.

83
00:05:31.444 --> 00:05:31.944
We'll get there.

