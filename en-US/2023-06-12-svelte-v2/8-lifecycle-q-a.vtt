WEBVTT

1
00:00:00.625 --> 00:00:05.601
One quick question about bindings,
are bindings synchronous?

2
00:00:07.605 --> 00:00:11.961
&gt;&gt; Okay, so there was a question about
whether bindings are synchronous or not,

3
00:00:11.961 --> 00:00:14.472
and that's a really interesting question.

4
00:00:14.472 --> 00:00:18.130
The answer is they update
the state synchronously.

5
00:00:18.130 --> 00:00:20.702
So when you have a bind
value on a text input,

6
00:00:20.702 --> 00:00:24.253
it is essentially as if you had
an on input event handler, and

7
00:00:24.253 --> 00:00:27.684
you are assigning to the value
inside that event handler.

8
00:00:27.684 --> 00:00:30.506
So in that sense, it is synchronous.

9
00:00:30.506 --> 00:00:35.618
But like all state updates,
that will be batched, and

10
00:00:35.618 --> 00:00:42.410
it won't update the DOM until we've
waited for the current microtask.

11
00:00:42.410 --> 00:00:47.500
Now, because you're interacting
with the element yourself,

12
00:00:47.500 --> 00:00:53.260
the binding isn't gonna need to update
the input, if that makes sense.

13
00:00:53.260 --> 00:00:55.647
Because if you have an input and
you type in some text,

14
00:00:55.647 --> 00:00:57.145
the input already has that text.

15
00:00:57.145 --> 00:01:02.580
So we don't need to wait for the binding
to go all the way around and then get

16
00:01:02.580 --> 00:01:08.563
fed back into the input as it were because
it's already in the desired end state.

17
00:01:08.563 --> 00:01:13.751
But the update to anything else in the DOM
that references that piece of state,

18
00:01:13.751 --> 00:01:16.910
that will happen after
the current microtask.

19
00:01:16.910 --> 00:01:21.133
Getting super in the weeds here,
but hopefully that made sense.

20
00:01:21.133 --> 00:01:27.954
&gt;&gt; How does using await blocks
differ to using onMount as below,

21
00:01:27.954 --> 00:01:34.133
and so he's got let data
onMount in the brackets async.

22
00:01:34.133 --> 00:01:37.316
The data equals await
get data from backend.

23
00:01:37.316 --> 00:01:43.158
I found myself having to do
the below to avoid undefined

24
00:01:43.158 --> 00:01:50.399
errors before we migrated to SvelteKit and
using +page.ts load.

25
00:01:50.399 --> 00:01:56.509
So maybe I was using onMount improperly.

26
00:01:56.509 --> 00:01:58.877
&gt;&gt; So there is a little bit
of a gotcha with onMount.

27
00:01:58.877 --> 00:02:01.900
If you look at the reference
documentations,

28
00:02:01.900 --> 00:02:05.155
svelte.dev/docs and
look at the onMount area,

29
00:02:05.155 --> 00:02:09.506
it will tell you that you should
not return a promise from onMount.

30
00:02:09.506 --> 00:02:13.550
And any time you have an async function,
that function will return a promise.

31
00:02:13.550 --> 00:02:15.572
It's just how async functions work.

32
00:02:15.572 --> 00:02:19.733
And the reason for
that is that we need to get a reference to

33
00:02:19.733 --> 00:02:24.416
the teardown callback for
when the component is unmounted, and

34
00:02:24.416 --> 00:02:28.950
that needs to happen synchronously for
a variety of reasons.

35
00:02:28.950 --> 00:02:32.902
So your onMount callbacks should
be synchronous functions,

36
00:02:32.902 --> 00:02:35.259
they should not be async functions.

37
00:02:35.259 --> 00:02:40.306
You can use async inside
an onMount function by creating,

38
00:02:40.306 --> 00:02:44.634
I believe it's called
a synchronous immediately

39
00:02:44.634 --> 00:02:48.045
invoked function expression or IIFE.

40
00:02:48.045 --> 00:02:51.017
So you create an async function, and then
you put the parentheses at the end of it,

41
00:02:51.017 --> 00:02:51.717
so it will call it.

42
00:02:51.717 --> 00:02:56.276
And you can use the await
keyword inside your IIFE, but

43
00:02:56.276 --> 00:03:02.040
you don't want the onMount callback
itself to be an async function.

44
00:03:02.040 --> 00:03:06.174
Maybe we'll change that in a future
version of Svelte, I don't know, but for

45
00:03:06.174 --> 00:03:08.380
now, avoid that per the documentation.

46
00:03:08.380 --> 00:03:13.284
&gt;&gt; How does onMount impact the performance
when the components have a waterfall

47
00:03:13.284 --> 00:03:14.649
effect or some sort?

48
00:03:16.617 --> 00:03:21.360
&gt;&gt; Yes, so if you're doing your
asynchronous work inside onMount,

49
00:03:21.360 --> 00:03:25.341
by which I mean like fetching data and
things like that,

50
00:03:25.341 --> 00:03:30.950
then that work doesn't begin until
the component gets mounted to the screen.

51
00:03:30.950 --> 00:03:36.116
And if you have a component that only
becomes visible when the result of some

52
00:03:36.116 --> 00:03:42.024
async operation completes inside onMount,
then if it has its own async operations.

53
00:03:42.024 --> 00:03:45.141
Then you'll render the parent component
that will eventually render the child

54
00:03:45.141 --> 00:03:46.779
component, which will do amazing work.

55
00:03:46.779 --> 00:03:49.860
Maybe that eventually renders another
child component, and that is what

56
00:03:49.860 --> 00:03:53.002
we call a waterfall, and that is something
that we very much want to avoid.

57
00:03:53.002 --> 00:03:58.636
In general, I do not recommend doing data
fetching inside your onMount components.

58
00:03:58.636 --> 00:04:03.236
There is a way of doing data fetching
asynchronously, which we'll learn

59
00:04:03.236 --> 00:04:07.926
about in SvelteKit, and that is by far
the preferred way to deal with data.

60
00:04:07.926 --> 00:04:11.639
Not just because it avoids
that waterfall problem, but

61
00:04:11.639 --> 00:04:15.202
also because it works with
server-side rendering.

62
00:04:15.202 --> 00:04:18.837
Server-side rendering does not work
with onMount because there is no DOM on

63
00:04:18.837 --> 00:04:21.070
the server, you're not mounting anything.

64
00:04:21.070 --> 00:04:23.974
So when you do work inside
an onMount handler,

65
00:04:23.974 --> 00:04:28.447
that will have no effect on any
content that you're server rendering.

66
00:04:28.447 --> 00:04:32.132
SSR is a thing that we're gonna
cover in this SvelteKit workshop.

67
00:04:32.132 --> 00:04:36.892
For now, the takeaway is avoid doing your
data fetching in onMount if you can and

68
00:04:36.892 --> 00:04:40.954
come back for the SvelteKit workshop
to learn about data fetching.

69
00:04:43.096 --> 00:04:45.689
&gt;&gt; If you have lots of
await blocks in your HTML,

70
00:04:45.689 --> 00:04:48.296
would there be a better
way to organize this?

71
00:04:48.296 --> 00:04:53.976
Also, is there a way to do something like
promise.all for multiple await blocks?

72
00:04:53.976 --> 00:04:57.392
&gt;&gt; So if you have a promise.all,
you would put that inside, I mean,

73
00:04:57.392 --> 00:05:00.629
you can have an inline promise.all
inside an await function.

74
00:05:00.629 --> 00:05:05.417
But you probably want to do any really
tricky async logic inside your script

75
00:05:05.417 --> 00:05:10.053
block or even in an external module,
because as the question suggests,

76
00:05:10.053 --> 00:05:12.503
it can start to get a little bit hairy.

77
00:05:12.503 --> 00:05:17.054
But this again is the kind of stuff that
is better moved into your data fetching

78
00:05:17.054 --> 00:05:19.786
layer, which happens before rendering, and

79
00:05:19.786 --> 00:05:23.796
that's something that we'll talk
about when we learn SvelteKit.

80
00:05:23.796 --> 00:05:30.231
&gt;&gt; Several people in chat are not sure
what the tick does, and what does it do?

81
00:05:30.231 --> 00:05:33.841
[LAUGH]
&gt;&gt; [LAUGH] Okay, so the nuts and

82
00:05:33.841 --> 00:05:37.955
bolts of what tick does is, all right, so

83
00:05:37.955 --> 00:05:42.070
when you assign to a value in a component,

84
00:05:42.070 --> 00:05:46.775
the compiler instruments
that assignment with

85
00:05:46.775 --> 00:05:51.621
a secret internal function
called invalidate.

86
00:05:51.621 --> 00:05:53.825
And invalidate has two jobs.

87
00:05:53.825 --> 00:05:59.839
It marks that value as dirty inside
the component, and it tells a scheduler

88
00:05:59.839 --> 00:06:05.197
that is shared by all components
that this component has changed.

89
00:06:05.197 --> 00:06:11.974
And when that happens,
the batching starts.

90
00:06:11.974 --> 00:06:16.510
So Svelte will create a promise
that will immediately resolve, and

91
00:06:16.510 --> 00:06:21.046
then it will wait to see if any other
state updates happen before that

92
00:06:21.046 --> 00:06:23.846
promise resolves in the next microtask.

93
00:06:23.846 --> 00:06:29.236
If you call tick,
you will get a reference to that promise.

94
00:06:30.897 --> 00:06:35.060
So at the end of that resolution,
the DOM will be updated and

95
00:06:35.060 --> 00:06:39.322
the promise returned from your
tick function will resolve.

96
00:06:39.322 --> 00:06:42.160
If most state updates were happening,

97
00:06:42.160 --> 00:06:46.468
then it will just be like
calling await promise.resolve.

98
00:06:46.468 --> 00:06:50.988
And it will essentially just defer
some work until the next microtask.

99
00:06:50.988 --> 00:06:54.579
Again, super in the weeds.

100
00:06:54.579 --> 00:06:59.042
Most of the time, you don't really
need to worry about how it's working.

101
00:06:59.042 --> 00:07:02.951
You just need to know that it's
gonna cause anything after

102
00:07:02.951 --> 00:07:06.153
the await tick to happen
in the next microtask.

103
00:07:06.153 --> 00:07:11.457
Which is a fancy way of saying
it will happen after the current

104
00:07:11.457 --> 00:07:16.969
execution block has happened,
but before the DOM is updated.

105
00:07:16.969 --> 00:07:19.611
So you're not gonna see
things like flicker.

106
00:07:19.611 --> 00:07:22.394
It's not like if you're doing
a set timeout or something, and

107
00:07:22.394 --> 00:07:25.189
then you potentially see things
in the page become out of sync.

108
00:07:25.189 --> 00:07:27.228
Everything will happen before
the DOM is updated, but

109
00:07:27.228 --> 00:07:28.614
after the current execution block.

110
00:07:28.614 --> 00:07:29.910
Hopefully that makes sense.

111
00:07:29.910 --> 00:07:32.268
&gt;&gt; What does this dot refer to?

112
00:07:32.268 --> 00:07:32.944
&gt;&gt; It's a great question.

113
00:07:32.944 --> 00:07:36.190
Okay, so down here, we have
this.selectionStart = selectionEnd,

114
00:07:36.190 --> 00:07:38.042
this.selectionEnd = selectionEnd.

115
00:07:38.042 --> 00:07:41.245
The this inside an event
handler refers to the element

116
00:07:41.245 --> 00:07:43.391
that the event handler is bound to.

117
00:07:43.391 --> 00:07:46.668
So here,
we're calling on:keydown=handleKeydown.

118
00:07:50.377 --> 00:07:52.761
Function blah,

119
00:07:57.275 --> 00:08:02.680
const textarea = event.currentTarget.

120
00:08:10.395 --> 00:08:13.234
And hopefully, this is gonna work.

121
00:08:13.234 --> 00:08:14.678
If I press a key here,

122
00:08:14.678 --> 00:08:19.829
then we're gonna see this alert(this
=== textarea) alert were true.

123
00:08:19.829 --> 00:08:21.365
It worked, okay, good.

124
00:08:21.365 --> 00:08:23.221
I have remembered how the DOM works.

125
00:08:23.221 --> 00:08:28.913
Anytime you have an event handler,
this is the event target.

126
00:08:28.913 --> 00:08:37.238
Just a convenient way to interact
with the DOM imperatively.

127
00:08:37.238 --> 00:08:38.266
Chris, you had a question?

128
00:08:38.266 --> 00:08:40.873
&gt;&gt; Yeah, going back to the use of tick and

129
00:08:40.873 --> 00:08:45.765
how that's used to help resolve promises,
is it possible then that you

130
00:08:45.765 --> 00:08:50.434
would have to call await tick multiple
times in the same code block?

131
00:08:50.434 --> 00:08:54.199
&gt;&gt; You should not need to, no.

132
00:08:54.199 --> 00:08:57.539
Now I can't really imagine a situation
in which you'd wanna do that,

133
00:08:57.539 --> 00:09:00.653
unless you needed to do something
like you change some state, and

134
00:09:00.653 --> 00:09:02.484
then you wait further down to update.

135
00:09:02.484 --> 00:09:05.309
So that maybe you can take
a measurement like a width and

136
00:09:05.309 --> 00:09:09.180
a height measurement of an element so
that you can then set some more state,

137
00:09:09.180 --> 00:09:12.142
and then that has a knock on
effect that you need to await.

138
00:09:12.142 --> 00:09:16.270
I guess it's possible to get into
a situation where that's the case, but

139
00:09:16.270 --> 00:09:20.011
it's not something that you would
encounter often is what I mean.

140
00:09:22.970 --> 00:09:26.097
All right,
any more questions from the Internet,

141
00:09:26.097 --> 00:09:29.304
or should we move on to
the final section of part one?

142
00:09:29.304 --> 00:09:34.292
&gt;&gt; Just a couple of clarifications, so.

143
00:09:34.292 --> 00:09:37.996
So basically, a tick is like useEffect or
useLayoutEffect in React.

144
00:09:41.434 --> 00:09:47.938
Yeah, I guess, so useLayoutEffect is
where you declare a function that is

145
00:09:47.938 --> 00:09:53.634
gonna happen every time
the dependencies of that effect change.

146
00:09:53.634 --> 00:09:57.558
When you call tick, it's happening in
some code that is already running, and

147
00:09:57.558 --> 00:09:59.470
it will only happen once, of course.

148
00:09:59.470 --> 00:10:06.090
But you would use it in much the same
context as you would use useLayoutEffect,

149
00:10:06.090 --> 00:10:09.900
which is to take some
measurement of the DOM or

150
00:10:09.900 --> 00:10:14.031
to do something in response
to the DOM updating.

151
00:10:14.031 --> 00:10:18.134
Whereas useEffect, you don't have the same
guarantees about the callback getting

152
00:10:18.134 --> 00:10:20.803
executed immediately after
the DOM has been updated.

153
00:10:20.803 --> 00:10:24.783
They reserve the right to do
that after a period of time.

