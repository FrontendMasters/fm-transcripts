WEBVTT

1
00:00:00.000 --> 00:00:02.820
Let's start adding some logic for
this game,

2
00:00:02.820 --> 00:00:05.582
we'll do it in the game.svelte component.

3
00:00:08.042 --> 00:00:12.506
First, we're gonna import the levels

4
00:00:12.506 --> 00:00:16.841
from the module that we just created.

5
00:00:18.254 --> 00:00:20.312
And we're gonna have a few
different values here.

6
00:00:20.312 --> 00:00:25.205
We're gonna have a size value,

7
00:00:25.205 --> 00:00:30.642
we're gonna have a grid of emojis,

8
00:00:30.642 --> 00:00:36.091
initialize that to an empty array.

9
00:00:36.091 --> 00:00:39.158
And we're gonna keep track of
the pairs that we've found as we're

10
00:00:39.158 --> 00:00:40.040
playing the game.

11
00:00:45.787 --> 00:00:50.414
So the first task is to create
a grid from the set of emojis

12
00:00:50.414 --> 00:00:52.682
that we got in levels.ts.

13
00:00:52.682 --> 00:00:56.931
So let's create a function,
call it create_grid, and

14
00:00:56.931 --> 00:00:59.951
that's gonna take a level as its input.

15
00:01:02.706 --> 00:01:05.641
Now, right now, we don't know what kind
of object that is, because we haven't

16
00:01:05.641 --> 00:01:09.040
declared it, and this is where
a TypeScript becomes really useful.

17
00:01:09.040 --> 00:01:13.009
At the top here,
I'm gonna add a lang=ts attribute, and

18
00:01:13.009 --> 00:01:17.710
that now allows us to start using
TypeScript inside this component.

19
00:01:18.780 --> 00:01:21.600
Our grid is gonna be an array of strings.

20
00:01:21.600 --> 00:01:24.190
Found is also gonna be
an array of strings.

21
00:01:24.190 --> 00:01:25.220
Size is gonna be a number.

22
00:01:27.460 --> 00:01:32.170
And the thing that gets passed into
create_grid is gonna be a level.

23
00:01:34.580 --> 00:01:38.629
We need to import that as
well from our levels module.

24
00:01:42.472 --> 00:01:47.937
We need to have that in
a separate type declaration,

25
00:01:47.937 --> 00:01:51.794
import type {Level} from levels.

26
00:01:53.425 --> 00:01:57.764
So ultimately, what we want to have is
a user interface that allows us to select

27
00:01:57.764 --> 00:02:01.655
a different level and
create all of these values on that basis.

28
00:02:01.655 --> 00:02:05.595
But for now, we're just gonna
hard code easy mode into our app.

29
00:02:05.595 --> 00:02:11.317
So const level = level{0},
cuz that's the only one that we've got.

30
00:02:11.317 --> 00:02:15.377
Size is gonna be level.size, and

31
00:02:15.377 --> 00:02:20.140
grid is gonna be created from the level.

32
00:02:22.389 --> 00:02:25.391
And you can see that
it's throwing an error,

33
00:02:25.391 --> 00:02:31.116
because we're not currently returning
an array of strings from create_grid.

34
00:02:31.116 --> 00:02:34.600
The first thing we wanna do is create
a clone of the emojis array so

35
00:02:34.600 --> 00:02:37.515
that we can start plucking
images out of it at random.

36
00:02:37.515 --> 00:02:41.917
We don't want to mutate the original data.

37
00:02:41.917 --> 00:02:45.886
So create const copy = level.emoji, and

38
00:02:45.886 --> 00:02:51.510
you can see that TypeScript is
giving us all of the properties

39
00:02:51.510 --> 00:02:55.937
to autocomplete it, level.emojis.slice.

40
00:02:58.201 --> 00:03:01.750
And our task is to create a set of pairs.

41
00:03:01.750 --> 00:03:08.237
So const pairs = another array,
that's gonna be an array of strings.

42
00:03:11.851 --> 00:03:18.650
And if we have a 4 by 4 grid, that means
we need 8 pairs, 4 times 4 divided by 2.

43
00:03:19.790 --> 00:03:22.850
So in a loop for

44
00:03:22.850 --> 00:03:28.971
let i = 0; i &lt; level.size

45
00:03:28.971 --> 00:03:34.540
× level.size / 2.

46
00:03:34.540 --> 00:03:37.228
Or if you wanna be fancy,

47
00:03:37.228 --> 00:03:42.480
you can use the times times operator,
i += 1.

48
00:03:42.480 --> 00:03:47.840
Inside here,
we need to pick an emoji at random.

49
00:03:47.840 --> 00:03:57.604
Do that with const index =
Math.floorMath.random() × the copy.length.

50
00:04:07.990 --> 00:04:12.219
Then we wanna get the value at that index,
and then we wanna splice it out of that

51
00:04:12.219 --> 00:04:14.988
copy so
that we can't accidentally pick it again.

52
00:04:17.259 --> 00:04:21.728
Copy.splice index will take that

53
00:04:21.728 --> 00:04:26.042
one element out of the array, and

54
00:04:26.042 --> 00:04:31.757
we'll push the emoji into our pairs array.

55
00:04:31.757 --> 00:04:36.923
Right, so at this point,
we should have eight emojis in an array.

56
00:04:40.913 --> 00:04:44.293
So the first thing we need to do
obviously is duplicate that list.

57
00:04:49.517 --> 00:04:54.110
And at that point, we've got enough to
fill a grid, so we can return that.

58
00:04:54.110 --> 00:04:58.070
And you'll see that red squiggly
that was there a second ago,

59
00:04:58.070 --> 00:05:02.200
right now that we're returning the string,
that disappears.

60
00:05:05.303 --> 00:05:09.333
All right, we need to pass that
data into the grid component so

61
00:05:09.333 --> 00:05:10.815
that we can render it.

62
00:05:10.815 --> 00:05:11.817
We'll do that down here.

63
00:05:14.158 --> 00:05:19.651
And it's gonna yell at us, because grid
is not a prop on the grid component.

64
00:05:19.651 --> 00:05:22.510
Let's change that,
let's go over to grid.svelte.

65
00:05:22.510 --> 00:05:27.457
I'm gonna press Cmd+P,
type Grid to open that.

66
00:05:27.457 --> 00:05:30.096
And in our script block,
we don't have to declare props.

67
00:05:30.096 --> 00:05:32.961
We do export let grid.

68
00:05:32.961 --> 00:05:37.259
Because we're in TypeScript land,
we're gonna use string so

69
00:05:37.259 --> 00:05:39.698
that we know what type of prop it is.

70
00:05:39.698 --> 00:05:44.249
But we need to tell svelte that
this is a TypeScript component.

71
00:05:44.249 --> 00:05:47.120
So we add the lang="ts" there.

72
00:05:48.942 --> 00:05:50.484
And it's got a yellow squiggly,

73
00:05:50.484 --> 00:05:53.522
because we're not actually using
it anywhere in the component.

74
00:05:53.522 --> 00:05:57.474
So let's replace this hard
coded array(16) with the grid.

75
00:06:01.718 --> 00:06:06.037
And then, we can pass the emoji
down into the square component.

76
00:06:10.451 --> 00:06:14.549
And it's the same deal, the square
component is not expecting an emoji prop

77
00:06:14.549 --> 00:06:18.664
at this point, so we need to go over
to square.svelte and define that prop.

78
00:06:20.868 --> 00:06:22.652
First, we've got to create our script.

79
00:06:24.599 --> 00:06:26.277
We'll add the lang="ts"&gt;,

80
00:06:36.156 --> 00:06:39.454
And declare the emoji prop as a string.

81
00:06:39.454 --> 00:06:46.803
Now, inside the square,
We'll add a span and

82
00:06:46.803 --> 00:06:50.710
render that emoji, right?

83
00:06:50.710 --> 00:06:54.742
And you can see it's pretty subtle, but
in the top left of each of those squares,

84
00:06:54.742 --> 00:06:56.820
you can now see some content.

85
00:06:56.820 --> 00:07:00.994
Make it a little bit bigger
by adding a span selector and

86
00:07:00.994 --> 00:07:04.000
adding, let's say, 5ms, like so.

87
00:07:05.880 --> 00:07:09.586
All right, so far so good, although
obviously, we'd like that to be centered.

88
00:07:09.586 --> 00:07:15.319
So by this point,
you know the drill, display flex,

89
00:07:15.319 --> 00:07:19.610
Justify-content center,
align-items center.

90
00:07:23.394 --> 00:07:26.018
And now, our emojis are nicely centered.

