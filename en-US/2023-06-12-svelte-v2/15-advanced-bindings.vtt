WEBVTT

1
00:00:00.043 --> 00:00:04.918
All right we're gonna learn some more
about bindings before we use bindings for

2
00:00:04.918 --> 00:00:08.410
form elements like inputs and
select and text areas, but

3
00:00:08.410 --> 00:00:10.755
we can use them in other contexts too.

4
00:00:10.755 --> 00:00:15.369
Here we're gonna use it in the context
of a content editable element.

5
00:00:15.369 --> 00:00:20.144
So this is an element that
has content editable, true.

6
00:00:20.144 --> 00:00:24.275
Right, this is just an attribute
you can add to an element and

7
00:00:24.275 --> 00:00:26.713
it allows you to type stuff into it.

8
00:00:26.713 --> 00:00:27.320
Right, but

9
00:00:27.320 --> 00:00:31.214
that is not being reflected anywhere
because we're not binding anything.

10
00:00:31.214 --> 00:00:35.188
On this element because we're
using content editable,

11
00:00:35.188 --> 00:00:38.258
we can bind to the HTML
inside that element.

12
00:00:41.738 --> 00:00:47.219
Gonna bind the inner HTML
to our HTML value here.

13
00:00:47.219 --> 00:00:52.439
And you'll see that, the div is now
populated with the content, and if

14
00:00:52.439 --> 00:00:58.187
we start typing in here, that is reflected
in the element immediately below.

15
00:01:02.929 --> 00:01:07.159
It is possible to use a binding
inside an each block.

16
00:01:07.159 --> 00:01:13.506
Here we've got another todo list And

17
00:01:13.506 --> 00:01:16.727
we have some inputs inside that todo list.

18
00:01:16.727 --> 00:01:20.356
And if we change these values to bindings,

19
00:01:24.197 --> 00:01:29.815
Then when we interact with these inputs,
it will actually mutate the data.

20
00:01:29.815 --> 00:01:36.435
So below we've got a list of
the number of todos that are remaining,

21
00:01:36.435 --> 00:01:41.082
and that is calculated
from the todos alongside

22
00:01:41.082 --> 00:01:45.629
a filter function in
a reactive declaration.

23
00:01:45.629 --> 00:01:47.492
And if I check these items,

24
00:01:47.492 --> 00:01:51.800
you'll see that the remaining
value updates automatically.

25
00:01:54.909 --> 00:01:56.477
As I said, it's mutating the array.

26
00:01:56.477 --> 00:01:58.150
That might not be a thing that you want,

27
00:01:58.150 --> 00:02:00.401
you might prefer to use
immutable data structures.

28
00:02:00.401 --> 00:02:03.955
And if that's the case, then you
should avoid using these bindings, and

29
00:02:03.955 --> 00:02:05.917
you should use event handlers instead.

30
00:02:05.917 --> 00:02:10.233
But as I say, mutation is fine as long
as it's local and as long as you're not

31
00:02:10.233 --> 00:02:14.766
mutating objects that you don't own, so
generally this sort of thing is okay.

32
00:02:18.200 --> 00:02:24.735
We can also bind to the properties of
media elements like audio and video.

33
00:02:24.735 --> 00:02:27.117
Here we've got some custom UI for

34
00:02:27.117 --> 00:02:32.236
this audio player which is defined
in this AudioPlayer.svelte file.

35
00:02:32.236 --> 00:02:36.964
And we're gonna finish implementing
this by adding the audio element

36
00:02:36.964 --> 00:02:39.295
itself along with some bindings.

37
00:02:45.563 --> 00:02:51.971
So the source attribute is
being parsed in from the app.

38
00:02:51.971 --> 00:02:56.880
We're using the spread operator because
each of these tracks has the source

39
00:02:56.880 --> 00:02:57.731
in the data.

40
00:03:07.159 --> 00:03:11.894
And then we're gonna add some bindings to
the values that we're declaring up here,

41
00:03:11.894 --> 00:03:14.106
time, duration and this paused flag.

42
00:03:25.603 --> 00:03:30.694
For duration and time I'm just
gonna use the shorthand property

43
00:03:30.694 --> 00:03:35.510
because this is kind of unnecessary,
we can get rid of that.

44
00:03:35.510 --> 00:03:39.522
And you'll notice that at least for
the audio elements that have loaded,

45
00:03:39.522 --> 00:03:41.397
one of them seemed to fail to load,

46
00:03:41.397 --> 00:03:44.392
it's now showing the duration
of the audio down here.

47
00:03:44.392 --> 00:03:49.596
It's loading the audio, and
once it figures out how long the piece is,

48
00:03:49.596 --> 00:03:51.949
it binds that back to the state.

49
00:03:51.949 --> 00:03:55.285
And finally, bind pause.

50
00:03:58.819 --> 00:04:02.736
And so to play the audio, we need to add
an event listener to the button that has

51
00:04:02.736 --> 00:04:05.528
the play icon that will just
toggle that paused value.

52
00:04:09.068 --> 00:04:13.248
Be very familiar by now, on click,
and then we parse in a function.

53
00:04:16.611 --> 00:04:19.087
And it's just gonna invert
the value of paused.

54
00:04:21.634 --> 00:04:28.796
So if we've done this right, we should be
able to listen to some music now, okay?

55
00:04:31.256 --> 00:04:35.069
So our audio player now has
some basic functionality.

56
00:04:35.069 --> 00:04:40.651
We wanna add the ability to see
to a specific part of the audio

57
00:04:40.651 --> 00:04:45.800
by dragging these sliders
next to the time indicator.

58
00:04:45.800 --> 00:04:49.766
If we scroll down to the slider element,

59
00:04:49.766 --> 00:04:57.011
we have this pointer down handler which
lets us seek to a specific moment.

60
00:04:57.011 --> 00:05:00.176
And we just need to finish
implementing that seek function.

61
00:05:00.176 --> 00:05:05.378
We're calculating a value of p which
is a value between zero and one, and we

62
00:05:05.378 --> 00:05:10.924
just need to multiply that by the duration
to get the correct time for the audio.

63
00:05:10.924 --> 00:05:13.746
And we can just assign that
directly to the time variable.

64
00:05:20.393 --> 00:05:26.049
So this time when we start playing,
we can drag that to the good bit.

65
00:05:26.049 --> 00:05:30.040
[MUSIC]

66
00:05:30.040 --> 00:05:34.072
And it's updating all
the user interface for us.

67
00:05:37.514 --> 00:05:41.903
And we can add another event handler
on the audio element itself, so

68
00:05:41.903 --> 00:05:43.916
that when the audio finishes,

69
00:05:50.423 --> 00:05:52.794
We reset the time right
back to the beginning.

70
00:05:55.792 --> 00:05:59.409
[MUSIC]

71
00:05:59.409 --> 00:06:02.790
So we've got the last few
seconds of GymnopÃ©die here, and

72
00:06:02.790 --> 00:06:05.972
then when it finishes you'll
see that go back to zero.

73
00:06:05.972 --> 00:06:09.858
So we've covered a few of the bindings
that are available on media elements, but

74
00:06:09.858 --> 00:06:10.668
there are more.

75
00:06:10.668 --> 00:06:15.094
We've got a bunch of read-only bindings,
duration, buffered, seekable, played,

76
00:06:15.094 --> 00:06:16.047
seeking, ended.

77
00:06:16.047 --> 00:06:20.543
And five two way bindings, which means
that they will update the state in your

78
00:06:20.543 --> 00:06:24.277
component, but also if you update
the state in your component,

79
00:06:24.277 --> 00:06:26.296
it will affect the media element.

80
00:06:26.296 --> 00:06:31.328
In addition to these videos, have
a videoWidth and a videoHeight binding,

81
00:06:31.328 --> 00:06:36.139
which you can use to control the
positioning of other elements and so on.

82
00:06:36.139 --> 00:06:39.479
Does anyone have any questions about
the stuff that we've just learned?

83
00:06:41.800 --> 00:06:43.008
Okay.

84
00:06:50.087 --> 00:06:54.309
So every-block level element
in the DOM has clientWidth,

85
00:06:54.309 --> 00:06:58.955
clientHeight, offsetWidth, and
offsetHeight bindings, and

86
00:06:58.955 --> 00:07:01.748
we can use that in our component state.

87
00:07:01.748 --> 00:07:06.964
Up here, we have width and
height declared,

88
00:07:06.964 --> 00:07:14.930
and we can add these bindings
to our div bind:clientWidth={w},

89
00:07:14.930 --> 00:07:18.654
bind:clientHeight={h}.

90
00:07:18.654 --> 00:07:22.637
And now you can see that in the label
below the edit this textbook,

91
00:07:22.637 --> 00:07:26.421
is actually showing the current
dimensions of that element.

92
00:07:26.421 --> 00:07:32.002
And if we make this larger or
smaller, that updates automatically.

93
00:07:32.002 --> 00:07:37.585
Similarly if we add more text it's
updating the the width of that.

94
00:07:39.860 --> 00:07:47.226
This works with some crazy hacks that
only work with block level elements.

95
00:07:47.226 --> 00:07:52.618
So if you wanna use this with something
like a canvas, which cannot have children,

96
00:07:52.618 --> 00:07:56.098
then you will need to use
a wrapper element around it.

97
00:07:56.098 --> 00:07:59.510
In the future, we're gonna switch this
to use resize observer binding so

98
00:07:59.510 --> 00:08:01.392
that you will be able to use it anywhere.

99
00:08:04.997 --> 00:08:08.923
All right, you'll remember this
exercise from earlier where

100
00:08:08.923 --> 00:08:13.144
we were manipulating the contents
of a canvas by querying the DOM for

101
00:08:13.144 --> 00:08:16.490
it with document.querySelector('canvas').

102
00:08:16.490 --> 00:08:21.482
And that works, this call here works,
but it's really not ideal because if you

103
00:08:21.482 --> 00:08:25.802
had more than one of this component
on the page, then every time one of

104
00:08:25.802 --> 00:08:30.371
those components mounted they would
get a reference to the same canvas.

105
00:08:30.371 --> 00:08:35.333
Using document.querySelector is not
really a good way to interact with

106
00:08:35.333 --> 00:08:38.274
DOM if you don't control the entire page.

107
00:08:38.274 --> 00:08:41.390
So instead of using
document.querySelector,

108
00:08:41.390 --> 00:08:44.734
we can use an element
binding inside the component.

109
00:08:44.734 --> 00:08:49.964
First of all,
we need to declare a variable, let canvas.

110
00:08:49.964 --> 00:08:55.228
And then rather than using that query
selector, we're gonna bind the value of

111
00:08:55.228 --> 00:09:02.017
this, To that value.

112
00:09:02.017 --> 00:09:06.883
And get rid of the query selector,
and the app continues to work.

113
00:09:11.079 --> 00:09:15.619
And we can do the same thing that we
do with elements with components,

114
00:09:15.619 --> 00:09:18.061
we can have bindings on components.

115
00:09:18.061 --> 00:09:22.947
Here we have a keypad component,
which is you can think of in the same

116
00:09:22.947 --> 00:09:27.171
way that you would have an input
element or a text element.

117
00:09:27.171 --> 00:09:31.130
You can think of this as a very
custom version of one of those.

118
00:09:31.130 --> 00:09:35.802
And we can bind to the state inside the
keypad in the same way that we'd bind to

119
00:09:35.802 --> 00:09:37.706
the value of an input element.

120
00:09:40.309 --> 00:09:45.738
So inside that, we'll add the binding,
and we're gonna bind the value

121
00:09:45.738 --> 00:09:50.824
of the keypad to the PIN value that
is declared inside app.svelte.

122
00:09:55.305 --> 00:10:02.072
Now if I enter my PIN, It can use
that state inside this view reactive

123
00:10:02.072 --> 00:10:07.074
declaration, which is
then used inside the DOM.

124
00:10:09.669 --> 00:10:13.789
So this is handy, but it is something
that you should generally use sparingly.

125
00:10:13.789 --> 00:10:18.550
As we've talked about before, in general,
you want your data to flow down from

126
00:10:18.550 --> 00:10:22.045
the top of the app,
you don't want your data to go back up.

127
00:10:22.045 --> 00:10:27.038
But in some locally confined scenarios,
it's much more

128
00:10:27.038 --> 00:10:31.824
convenient to be able to bind
to a value of a component,

129
00:10:31.824 --> 00:10:36.100
rather than having to
deal with event handlers.

130
00:10:36.100 --> 00:10:40.701
Finally, just as we can bind to DOM
elements, we can also bind to component

131
00:10:40.701 --> 00:10:44.365
instances themselves using
the same bind this directive.

132
00:10:44.365 --> 00:10:47.588
This is useful in the rare
cases that you need to interact

133
00:10:47.588 --> 00:10:52.400
with a component programmatically, as
opposed to by providing it with new state.

134
00:10:52.400 --> 00:10:56.880
So if we take the drawing app that we
looked at a few moments ago, it'd be nice

135
00:10:56.880 --> 00:11:01.582
to add a button to clear the screen, and
at the moment that's quite difficult.

136
00:11:01.582 --> 00:11:06.832
So let's add a clear method
inside the canvas component.

137
00:11:10.138 --> 00:11:16.363
Let's put that here,
we're gonna export function clear.

138
00:11:16.363 --> 00:11:20.232
And when this gets called,
we'll do context.clearRect,

139
00:11:24.873 --> 00:11:26.547
Just to clear the entire canvas.

140
00:11:30.034 --> 00:11:33.521
And then in app.svelte, we need to
get a reference to this component.

141
00:11:42.296 --> 00:11:47.265
And then finally, we need to bind
that value to the component instance.

142
00:11:55.112 --> 00:11:59.623
So now all we need to do in order to
interact with the canvas component

143
00:11:59.623 --> 00:12:04.630
programmatically, is call that clear
function inside an event handler.

144
00:12:04.630 --> 00:12:08.779
So down here where we've got the controls,
we have this button here which is that

145
00:12:08.779 --> 00:12:11.112
close button that you
can see in the top left.

146
00:12:11.112 --> 00:12:12.180
We add another button.

147
00:12:22.780 --> 00:12:23.945
Give it a click handler.

148
00:12:26.964 --> 00:12:33.021
And when we click on that element,
we're gonna call canvas.clear.

149
00:12:33.021 --> 00:12:35.110
So now we can draw something in here.

150
00:12:38.054 --> 00:12:40.653
And we can clear the canvas
if we make a mistake.

