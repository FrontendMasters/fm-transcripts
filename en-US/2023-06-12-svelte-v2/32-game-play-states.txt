[00:00:00]
>> Okay, so things are mostly looking good but we would like to add some of the polish that we saw in the original app. So if you remember, in the one that we've got deployed, when we find a pair, then it kind of transitions nicely from the grid into that boundary.

[00:00:19]
And we can do this with svelte transitions. So let's, build that now. The first thing we're gonna need to do is create a pair of send and receive transitions, just like we saw in the example with the to-do list. So we'll create a new module, call it transitions.ts.

[00:00:40]
And inside there, we're gonna import the crossfade function. From svelte transition, along with cubicOut from svelte/easing. And we're gonna create a pair of send and receive transitions By calling crossfade. Give it a duration of 400 see how that looks, and then an easing of cubicOut. Okay, and now when something leaves the grid, we want it to appear in the found array.

[00:01:39]
First we need to add the send transition from the square. And you'll recall that we do that by adding R colon send, and then providing a key. For now we'll just use the emoji itself as a key. We need to import the send function, From transitions. We've got to export it.

[00:02:27]
So we'll do that now. And then we need to have the corresponding receive transition in the found array. So open that up. Same deal. When it comes in we'll do a receive just autocomplete that import it from transitions and we'll give it the same key. Let's see what happens now that we've added those transitions.

[00:03:06]
First we need to find a matching pair, I think that was the monkey, no, that was the monkey, okay. All right, almost works. Only one of the monkeys went down into that foundry. One thing I just noticed is that this needs a height of a 100% so that it's properly centered.

[00:03:27]
That's nicer. And the reason for that is that when we create a pair of send and receive transitions, it operates on this map of counterparts. And if you have two elements with the same key, it's a little bit like having a key each block with the same key.

[00:03:41]
It just gets confused. It doesn't know which elements it's supposed to be transitioning. So we need to be able to distinguish them a little bit better and we need to have two elements in the found array for the emojis in the grid to correspond to. So we're gonna add a new element here, let's call it div class = pair.

[00:04:05]
And inside that we're gonna have two copies of this image. And those need to have two unique keys. So let's call them emoji A and emoji B. We'll add some styles to that paramount. And then the images we're gonna have position absolute. Left top 0 and the width and height are gonna be 100%.

[00:04:49]
Okay, so you've got two monkeys stacked on top of each other now. And they're gonna have separate transitions. But we need to have some way of representing this inside the grid in, other words here, and so we're gonna need to be able to pass that information in from the grid.

[00:05:09]
We'll add a new prop to the square that's felt component, we'll call it group And group could be either A or B. And then we'll use that in the key that we pass to the send transition. Right now, of course, if we open the Grid.svelte, it's gonna complain that we're not passing in the group.

[00:05:51]
And there's a few different ways that we could solve this. The way that I'm gonna do it is if the current iteration in this loop is the first instance of this emoji is gonna be the A group, otherwise it's going to be the B group. And the way that we can do this is if grid.index of emoji is the current index, then it's group A, otherwise it's group B, and then maybe if we find another pair, all right, it's starting to look like it's supposed to.

[00:06:38]
We can add a little bit more styling to our found array. Let's give it a little bit of a drop shadow. And each of these will turn into a white disk. I'm just gonna get rid of the position. We'll get rid of the left and the top here and we'll give these some slightly different widths.

[00:07:44]
And we'll make this a display flex container. And it's starting to look a little bit more like the original.

