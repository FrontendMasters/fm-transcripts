WEBVTT

1
00:00:00.000 --> 00:00:05.307
Okay, this is the final
section of part one,

2
00:00:05.307 --> 00:00:08.248
and it's about stores.

3
00:00:08.248 --> 00:00:13.119
This is about state that does not
belong to a specific component.

4
00:00:13.119 --> 00:00:16.006
Cuz very often you will have
application state that is not part of

5
00:00:16.006 --> 00:00:17.244
the component hierarchy.

6
00:00:17.244 --> 00:00:20.679
It's something that can be
accessed by multiple components or

7
00:00:20.679 --> 00:00:22.504
by a regular JavaScript module.

8
00:00:22.504 --> 00:00:28.427
And in Svelte, we have a state management
primitive built in, it's called a store.

9
00:00:28.427 --> 00:00:32.564
And a store is really just
an object with a subscribe method.

10
00:00:32.564 --> 00:00:37.235
When you call subscribe on a store, you
will pass in a callback that gets executed

11
00:00:37.235 --> 00:00:39.719
every time the value of the store changes.

12
00:00:39.719 --> 00:00:46.988
So in App.svelte, count is a store,
and we're calling count.subscribe,

13
00:00:46.988 --> 00:00:51.734
and we're assigning to
this value count_value.

14
00:00:51.734 --> 00:00:54.545
So let's look at
the implementation of count.

15
00:00:54.545 --> 00:00:59.939
We're importing something called
writable from svelte/store.

16
00:00:59.939 --> 00:01:06.640
And we're exporting an instance of a
writable store with an initial value of 0.

17
00:01:08.541 --> 00:01:12.363
Okay, and we can reference this
store value in multiple components,

18
00:01:12.363 --> 00:01:14.707
let's look at the incrementer.svelte.

19
00:01:16.314 --> 00:01:23.760
We can update the value of the count using
the count's update method, count.update.

20
00:01:23.760 --> 00:01:30.043
It receives the initial value and
returns the next value.

21
00:01:32.554 --> 00:01:38.562
So now if we press the + button,
we're incrementing the value of count.

22
00:01:38.562 --> 00:01:43.646
And inside App.svelte,
because we're assigning the current

23
00:01:43.646 --> 00:01:49.681
value of the store to count_value,
we can see that inside our h1 element.

24
00:01:49.681 --> 00:01:53.016
We can do the opposite
in decrementer.svelte.

25
00:01:53.016 --> 00:01:58.352
So again count.update, get the old value,

26
00:01:58.352 --> 00:02:02.144
and then return the value -1,

27
00:02:02.144 --> 00:02:07.069
we can increment, and we can decrement.

28
00:02:07.069 --> 00:02:13.244
Then finally in our resetter.svelte,
we can implement this reset function.

29
00:02:13.244 --> 00:02:16.436
This time we don't need to call
update because we don't care about

30
00:02:16.436 --> 00:02:17.471
the previous value.

31
00:02:17.471 --> 00:02:23.146
We'll just call count.set(0) like so.

32
00:02:23.146 --> 00:02:26.106
Press the button, the count resets.

33
00:02:29.421 --> 00:02:33.531
Now, that works, but
there is a subtle bug in this app that's

34
00:02:33.531 --> 00:02:37.880
quite similar to the bug we had
with onMount where things weren't

35
00:02:37.880 --> 00:02:41.537
getting cleaned up when
the component was destroyed.

36
00:02:41.537 --> 00:02:45.459
So if this component were to get
instantiated multiple times,

37
00:02:45.459 --> 00:02:49.455
we would be creating multiple
subscriptions to this store, and

38
00:02:49.455 --> 00:02:51.825
we would never be getting rid of them.

39
00:02:51.825 --> 00:02:55.813
So over time that could
result in a memory leak.

40
00:02:55.813 --> 00:03:00.719
And one way that we can undo that memory
leak is by getting a reference to

41
00:03:00.719 --> 00:03:05.811
the unsubscribe function,
which is returned from count.subscribe.

42
00:03:11.663 --> 00:03:15.954
And we could call it in
an onDestroy lifecycle hook,

43
00:03:15.954 --> 00:03:18.399
which we didn't talk about.

44
00:03:18.399 --> 00:03:21.591
Because generally,
I don't recommend that you use it.

45
00:03:23.940 --> 00:03:25.560
That would look like this.

46
00:03:35.635 --> 00:03:39.616
And so now when the App.svelte
is removed from the DOM,

47
00:03:39.616 --> 00:03:42.252
we'll clean up that subscription.

48
00:03:44.479 --> 00:03:49.134
But this is a lot to write,
the onDestroy, the let count_value,

49
00:03:49.134 --> 00:03:54.806
the const unsubscribe, the subscribe,
the callback onDestroy, all of that.

50
00:03:54.806 --> 00:03:59.532
You can imagine that if you have multiple
stores that you're referencing inside

51
00:03:59.532 --> 00:04:02.044
the component, this is a lot to deal with.

52
00:04:02.044 --> 00:04:08.213
But because Svelte hates boilerplate,
we have a shorthand way of doing all this.

53
00:04:08.213 --> 00:04:10.004
I'm just gonna go ahead and
get rid of all of that.

54
00:04:10.004 --> 00:04:14.257
Get rid of the onDestroy,
get rid of the let count_value,

55
00:04:14.257 --> 00:04:20.059
get rid of this const subscribe call, and
get rid of the call to onDestroy there.

56
00:04:20.059 --> 00:04:26.232
And we replace the count_value
variable with $count.

57
00:04:29.483 --> 00:04:31.118
And that is equivalent.

58
00:04:31.118 --> 00:04:33.540
That is set at the subscription, and

59
00:04:33.540 --> 00:04:37.378
it has added the unsubscribe
logic automatically for us.

60
00:04:37.378 --> 00:04:40.171
And it works just the same way as before.

61
00:04:43.087 --> 00:04:49.125
Right, because the $ prefix tells Svelte
that we are dealing with a store value.

62
00:04:49.125 --> 00:04:53.885
It is reserved, you cannot create your own
variables inside a Svelte component that

63
00:04:53.885 --> 00:04:55.034
has that $ prefix.

64
00:05:00.824 --> 00:05:04.178
So in that example,
count was a writable store, but

65
00:05:04.178 --> 00:05:08.080
sometimes it doesn't make sense for
a store to be writable.

66
00:05:08.080 --> 00:05:11.425
You shouldn't be able to set the value
of the store if you have a reference to

67
00:05:11.425 --> 00:05:12.605
it and it's read-only.

68
00:05:12.605 --> 00:05:17.467
So for things like the mouse position or
the user's geolocation, right?

69
00:05:17.467 --> 00:05:21.369
There's no reason that you should be
able to set those values from outside.

70
00:05:21.369 --> 00:05:25.044
And so we have a thing called
a readable store as well.

71
00:05:25.044 --> 00:05:32.013
In our stores.js module, we're importing
the readable function from svelte/stores.

72
00:05:32.013 --> 00:05:37.296
And we are creating a readable store,
which has an initial value of null,

73
00:05:37.296 --> 00:05:40.206
it can be null or undefined or whatever.

74
00:05:40.206 --> 00:05:45.602
And the second function to
a readable store is a start function

75
00:05:45.602 --> 00:05:50.594
that gets called when the user
subscribes to this store.

76
00:05:50.594 --> 00:05:54.589
So when the first person subscribes to
this store, this callback will be invoked.

77
00:05:54.589 --> 00:05:57.792
When the last person stops
subscribing to the store,

78
00:05:57.792 --> 00:06:00.436
this stop function will
get called as well.

79
00:06:00.436 --> 00:06:04.317
So this is a convenient place
to do setup and teardown logic.

80
00:06:06.330 --> 00:06:09.184
So the current time,

81
00:06:09.184 --> 00:06:15.216
let's begin by passing
in the current date.

82
00:06:17.273 --> 00:06:21.234
Right, and
you can see that already the store value

83
00:06:21.234 --> 00:06:25.023
in App.svelte is reflecting
the current date.

84
00:06:25.023 --> 00:06:29.070
Down here it's formatting
the current time using

85
00:06:29.070 --> 00:06:34.859
the Intl.DateTimeFormat function
that's built into the platform.

86
00:06:36.348 --> 00:06:41.069
And inside here we want to add an interval
that's gonna update this once a second.

87
00:06:42.736 --> 00:06:49.088
So you can create an interval with
const interval = setInterval.

88
00:06:54.617 --> 00:07:00.752
That's gonna run once a second, and it's
gonna set the value to the current date.

89
00:07:02.165 --> 00:07:10.639
And then inside our start function,
We'll just clear the interval.

90
00:07:10.639 --> 00:07:16.823
So now we have this time value that we
can use anywhere in our application,

91
00:07:16.823 --> 00:07:20.636
and it will always be
perfectly consistent.

92
00:07:20.636 --> 00:07:22.565
And we don't need to have this setup and

93
00:07:22.565 --> 00:07:25.146
teardown logic inside each
individual component.

94
00:07:25.146 --> 00:07:28.070
It's all encapsulated
within the store itself.

95
00:07:32.430 --> 00:07:38.911
Sometimes you might have stores whose
value is derived from other stores.

96
00:07:38.911 --> 00:07:43.511
So in this case, perhaps you wanna
have a store that tells us how long

97
00:07:43.511 --> 00:07:45.702
the current page has been open.

98
00:07:45.702 --> 00:07:51.105
And we can derive that
value from the time store.

99
00:07:51.105 --> 00:07:57.184
Go back into stores.js, and
underneath the time declaration,

100
00:07:57.184 --> 00:08:00.840
we're gonna create an elapsed store.

101
00:08:02.590 --> 00:08:06.595
It's been scaffolded out already,
we just need to add the logic.

102
00:08:06.595 --> 00:08:12.188
An elapsed store takes one or
more stores as its input value.

103
00:08:12.188 --> 00:08:16.922
And then it has a callback, which is
passed those values whenever they change,

104
00:08:16.922 --> 00:08:18.559
and can return a new value.

105
00:08:18.559 --> 00:08:27.957
Math.round((time- start) / 1000).

106
00:08:27.957 --> 00:08:30.604
So now the time, the elapsed,
they're perfectly in sync.

107
00:08:30.604 --> 00:08:33.614
You'll notice that I'm
using the $ prefix here,

108
00:08:33.614 --> 00:08:36.073
even though I'm in a JavaScript module.

109
00:08:36.073 --> 00:08:38.578
There's no syntactical
requirement to do that,

110
00:08:38.578 --> 00:08:42.345
it's just something that helps keep
it consistent with your components.

111
00:08:42.345 --> 00:08:44.956
And so
it's a convention that I like to use.

112
00:08:44.956 --> 00:08:48.921
So here we are deriving
a value from a single store.

113
00:08:48.921 --> 00:08:51.897
You can derive a store from
multiple other stores.

114
00:08:51.897 --> 00:08:56.843
And you can also do things asynchronously,
if you need to.

115
00:08:56.843 --> 00:09:01.163
If you wanna do that sort of thing,
then consult the API reference, and

116
00:09:01.163 --> 00:09:02.537
all will be revealed.

117
00:09:02.537 --> 00:09:07.218
&gt;&gt; If we go back to that readable
stores one, can you help clarify

118
00:09:07.218 --> 00:09:12.001
the purpose in the stores.js
file of the stop function, and,

119
00:09:14.007 --> 00:09:17.884
What exactly that is doing in this?

120
00:09:17.884 --> 00:09:22.714
&gt;&gt; So
if I were to call time.subscribe, and

121
00:09:22.714 --> 00:09:29.064
then do something with the current time,
like log it,

122
00:09:33.326 --> 00:09:38.264
Then we need to get this value somehow.

123
00:09:38.264 --> 00:09:43.626
But by default,
this function isn't gonna run,

124
00:09:43.626 --> 00:09:49.890
this function is only gonna
run once we call .subscribe.

125
00:09:49.890 --> 00:09:54.249
Because a lot of the time,
this could be wasted effort.

126
00:09:54.249 --> 00:09:57.526
You might have a whole bunch of stores
that aren't actually being used at

127
00:09:57.526 --> 00:09:58.124
the moment.

128
00:09:58.124 --> 00:10:02.563
And so rather than wasting the user's
battery on getting the geolocation

129
00:10:02.563 --> 00:10:07.584
information or whatever, we wait until
that information is actually requested.

130
00:10:07.584 --> 00:10:10.656
So this function doesn't
get called immediately,

131
00:10:10.656 --> 00:10:12.971
it only gets called when we subscribe.

132
00:10:12.971 --> 00:10:19.377
If we were to get the unsubscribe handle,
and then later on call that,

133
00:10:19.377 --> 00:10:24.696
well, at that point,
we need to get rid of that interval,

134
00:10:24.696 --> 00:10:29.385
otherwise it's just gonna
keep ticking forever.

135
00:10:32.360 --> 00:10:36.372
So this function will get called when
the first subscriber starts subscribing.

136
00:10:36.372 --> 00:10:38.739
And if subsequent things
subscribe to the same store,

137
00:10:38.739 --> 00:10:41.190
then that function doesn't get re-invoked.

138
00:10:41.190 --> 00:10:45.695
But as soon as everything that is
currently subscribing to the store stops

139
00:10:45.695 --> 00:10:49.640
subscribing, that's when
we call the stop function.

140
00:10:49.640 --> 00:10:53.380
So start gets run when
the first subscriber arrives.

141
00:10:53.380 --> 00:10:55.569
Stop gets run when the last
subscriber leaves.

142
00:10:55.569 --> 00:10:56.340
Does that make sense?

143
00:10:56.340 --> 00:11:01.577
You can imagine that
we are not using this,

144
00:11:01.577 --> 00:11:04.880
and we don't have this.

145
00:11:04.880 --> 00:11:13.060
This function will not run, and
we can verify that by, Adding an alert.

146
00:11:13.060 --> 00:11:18.603
Right, we're importing it, we're declaring
it, but this function is not running.

147
00:11:18.603 --> 00:11:26.223
But if I then uncomment that,
Now the function is running.

148
00:11:26.223 --> 00:11:29.513
So we have a subscriber,
we have one subscriber.

149
00:11:29.513 --> 00:11:34.404
If I then do this,
we have two subscribers.

150
00:11:34.404 --> 00:11:38.221
And it recalled the alert because
it's refreshed the entire module.

151
00:11:38.221 --> 00:11:40.801
But if you have multiple subscribers,
normally,

152
00:11:40.801 --> 00:11:43.745
then you wouldn't see two alerts,
you'll only see one.

153
00:11:43.745 --> 00:11:45.979
So right now it's
tracking two subscribers.

154
00:11:45.979 --> 00:11:51.012
And then if we unsubscribe from that,
and we get rid of this,

155
00:11:51.012 --> 00:11:57.150
this component then is gonna just
basically clear the interval, right?

156
00:11:57.150 --> 00:12:02.426
Because no one cares about the time
anymore, once everything is unsubscribed.

157
00:12:02.426 --> 00:12:04.821
Yeah, sorry,
that was not the clearest explanation.

158
00:12:04.821 --> 00:12:09.587
But all you need to know is that you
need to have your setup code and

159
00:12:09.587 --> 00:12:13.661
your teardown code, and
Svelte will manage the rest.

160
00:12:13.661 --> 00:12:18.756
&gt;&gt; In clearInterval interval,
isn't interval a closure?

161
00:12:18.756 --> 00:12:24.406
&gt;&gt; So you're returning the stop
function from the start function,

162
00:12:24.406 --> 00:12:26.775
so yes, stop is a closure.

163
00:12:26.775 --> 00:12:31.800
It closes over the interval that you're
declaring in the start function.

164
00:12:31.800 --> 00:12:36.273
So you're not passing two
functions to readable,

165
00:12:36.273 --> 00:12:40.442
it's not like we've got one of these and
then,

166
00:12:41.921 --> 00:12:46.571
One of these.

167
00:12:48.326 --> 00:12:49.810
You're returning stop from start.

168
00:12:49.810 --> 00:12:52.699
So anything that you declare inside start,
you can reference in stop.

169
00:12:52.699 --> 00:12:55.712
All right, let's talk about custom stores.

170
00:12:57.887 --> 00:13:01.979
As I said earlier, a store is just
an object that has a subscribe method.

171
00:13:01.979 --> 00:13:04.740
There's nothing that special about it.

172
00:13:04.740 --> 00:13:09.144
So as long as an object correctly
implements that method, it's a store.

173
00:13:09.144 --> 00:13:10.677
And beyond that,
you can do whatever you want.

174
00:13:10.677 --> 00:13:15.205
So we can use stores for
domain-specific logic.

175
00:13:15.205 --> 00:13:16.904
So in the case of our count store,

176
00:13:16.904 --> 00:13:20.693
maybe you want a lot of different things
to have a reference to that store.

177
00:13:20.693 --> 00:13:23.829
But you don't want everyone to be
able to set it's arbitrary values.

178
00:13:23.829 --> 00:13:26.780
You don't wanna be able to set
the value to a string or something.

179
00:13:26.780 --> 00:13:32.496
So you can restrict what people can
do with that store by not exposing

180
00:13:32.496 --> 00:13:38.725
the set and update functions, but
instead exposing your own functions.

181
00:13:38.725 --> 00:13:42.704
So inside stores.js, we have here some

182
00:13:42.704 --> 00:13:47.860
scaffolding where we're
creating a custom store.

183
00:13:49.330 --> 00:13:53.747
We have the subscribe function,
which is returned from writable.

184
00:13:53.747 --> 00:13:56.005
And we're just returning
that from createCount so

185
00:13:56.005 --> 00:13:57.689
that it can be used as a regular store.

186
00:13:57.689 --> 00:14:01.340
So that you can use it inside your
markup like this, the count is 0.

187
00:14:01.340 --> 00:14:03.342
We're not doing anything differently here,

188
00:14:03.342 --> 00:14:06.946
we're just referencing that the same way
that we would reference any other store.

189
00:14:09.151 --> 00:14:12.410
But instead of returning the set and
update methods,

190
00:14:12.410 --> 00:14:17.927
we're returning some methods of our own
creation, increment, decrement, and reset.

191
00:14:17.927 --> 00:14:21.041
At the moment, they're not wired up,
so they're not doing anything,

192
00:14:21.041 --> 00:14:21.968
let's fix that now.

193
00:14:24.362 --> 00:14:31.435
Increment is gonna update n to N+1.

194
00:14:31.435 --> 00:14:36.318
decrement is gonna update n to n-1,

195
00:14:36.318 --> 00:14:41.206
and reset is gonna set the value to 0.

196
00:14:44.052 --> 00:14:49.115
And now inside App.svelte,
we can just pass those

197
00:14:49.115 --> 00:14:56.003
methods to our event handler, And
interact with the store that way.

198
00:15:01.683 --> 00:15:07.758
Finally, just like we can bind
the value of things like inputs and

199
00:15:07.758 --> 00:15:12.404
text areas to local state,
we can bind to stores.

200
00:15:12.404 --> 00:15:14.605
As long as a store is writable,

201
00:15:14.605 --> 00:15:21.120
it's created with the writable helper
from Svelte store, and we can bind to it.

202
00:15:21.120 --> 00:15:26.590
So take the text binding here right now,
nothing's happening.

203
00:15:29.970 --> 00:15:32.025
But if we change that to a binding,

204
00:15:33.149 --> 00:15:38.124
Then the value of name is now
bound to the content of the input.

205
00:15:43.460 --> 00:15:48.225
If we also add an event handler, we can
assign to the value of name in the same

206
00:15:48.225 --> 00:15:52.703
way that we would assign to any other
value inside a Svelte component.

207
00:15:56.020 --> 00:15:58.223
There we go.

208
00:15:58.223 --> 00:16:03.845
Right, you can use name.set,
or you can use $name +=,

209
00:16:03.845 --> 00:16:08.016
it's really just a stylistic preference.

