WEBVTT

1
00:00:00.270 --> 00:00:03.798
Okay, so
the one case that we haven't handled yet

2
00:00:03.798 --> 00:00:08.250
is the case where the user guessed
correctly and now has a pair.

3
00:00:08.250 --> 00:00:12.891
And so from within this grid component,
we need to communicate that up to the game

4
00:00:12.891 --> 00:00:15.640
component so
that we can update the game state.

5
00:00:16.790 --> 00:00:22.579
And to do that, this component grid.svelte
needs to become an event dispatcher.

6
00:00:22.579 --> 00:00:25.855
So, as we've seen in the workshop so far,

7
00:00:25.855 --> 00:00:30.952
we'll create dispatch as create
EventDispatcher parentheses,

8
00:00:30.952 --> 00:00:35.512
and it's automatically imported that for
us from svelte.

9
00:00:35.512 --> 00:00:40.450
And then inside here,
we're gonna dispatch a found event, and

10
00:00:40.450 --> 00:00:43.570
we're gonna give it some information.

11
00:00:43.570 --> 00:00:48.195
We're gonna pass the emoji
that was found in that event.

12
00:00:51.497 --> 00:00:54.299
And then in our game.svelte component,

13
00:00:54.299 --> 00:00:58.068
I'm gonna move that over to the left so
that I can see it.

14
00:00:58.068 --> 00:01:02.430
We can now add a found event
listener on the grid component.

15
00:01:04.110 --> 00:01:07.268
Like so, tab to accept that completion.

16
00:01:07.268 --> 00:01:12.954
[SOUND] All right, so this event data

17
00:01:12.954 --> 00:01:19.027
is gonna tell us which emoji is found.

18
00:01:19.027 --> 00:01:24.051
You remember that we
declared this array up

19
00:01:24.051 --> 00:01:28.933
here of the emojis that have been found,

20
00:01:28.933 --> 00:01:33.967
I'm just gonna push data into that array.

21
00:01:33.967 --> 00:01:38.395
[SOUND] Right, this e.detail object is

22
00:01:38.395 --> 00:01:43.099
something that you get on a custom event.

23
00:01:43.099 --> 00:01:44.240
This isn't a Svelte thing.

24
00:01:44.240 --> 00:01:45.430
It's a DOM thing.

25
00:01:45.430 --> 00:01:49.050
The e.detail can be just
an arbitrary object of data.

26
00:01:49.050 --> 00:01:52.627
It's basically whatever you pass
in to your dispatch function.

27
00:01:55.946 --> 00:01:57.640
Save, so that prettier makes it look nice.

28
00:02:00.090 --> 00:02:05.190
And now we need to do something
with the array of found emojis.

29
00:02:05.190 --> 00:02:08.696
First of all, we need to remove it from

30
00:02:08.696 --> 00:02:13.528
the grid because you can't
find a pair twice [SOUND].

31
00:02:13.528 --> 00:02:16.079
All right, same drill,
and then scroll by now,

32
00:02:16.079 --> 00:02:18.145
we need to create this prop on the grid.

33
00:02:20.676 --> 00:02:28.030
I'm just gonna duplicate that
line with command Shift D.

34
00:02:28.030 --> 00:02:32.210
Okay, now we need to represent
that inside the square component.

35
00:02:32.210 --> 00:02:35.587
So we're gonna pass a found
property into here, but

36
00:02:35.587 --> 00:02:37.980
it's not gonna be the entire array.

37
00:02:37.980 --> 00:02:40.010
It's just gonna be a Boolean of whether or

38
00:02:40.010 --> 00:02:43.800
not found includes the emoji that
we're currently dealing with.

39
00:02:43.800 --> 00:02:49.502
So inside square, just like selected is
a Boolean we're gonna add a found Boolean.

40
00:02:53.866 --> 00:03:02.236
And that's gonna be if the array
includes the current emoji.

41
00:03:07.994 --> 00:03:13.547
And we can use this to remove
the span from the grid

42
00:03:13.547 --> 00:03:18.847
altogether [SOUND] once
the emoji has been found

43
00:03:24.444 --> 00:03:28.668
So now if I pick two pairs from the grid,

44
00:03:28.668 --> 00:03:34.440
like these two fish,
they get removed from the grid.

45
00:03:37.525 --> 00:03:39.750
You'll notice of course that there
is a repeating pattern here.

46
00:03:41.250 --> 00:03:42.617
The pairs at the top, sorry,

47
00:03:42.617 --> 00:03:45.980
the emojis at the top are duplicated
in the bottom half of the grid.

48
00:03:45.980 --> 00:03:47.840
So this game isn't gonna
be a whole lot of fun.

49
00:03:47.840 --> 00:03:49.970
So we need to shuffle the emojis.

50
00:03:51.500 --> 00:03:56.160
And to do that, we're gonna create
a new module called utils.ts.

51
00:03:56.160 --> 00:04:00.590
And inside that module,
we're gonna create a shuffle function.

52
00:04:09.548 --> 00:04:14.514
Do export function shuffle.

53
00:04:14.514 --> 00:04:20.578
And the input to this function
is gonna be an array of strings.

54
00:04:24.460 --> 00:04:27.330
But the fact that it's an array of
strings actually isn't material.

55
00:04:28.500 --> 00:04:30.940
The shuffle function doesn't
care what it's shuffling.

56
00:04:30.940 --> 00:04:32.800
So we're gonna turn this
into a generic function.

57
00:04:34.165 --> 00:04:37.922
We do that by adding a generic
argument like this, and

58
00:04:37.922 --> 00:04:40.935
then we can replace
the string here with T.

59
00:04:42.105 --> 00:04:46.806
This is nice because now when something
calls shuffle and passes in an array of

60
00:04:46.806 --> 00:04:51.744
whatever values, then TypeScript will
know what kind of array is getting back.

61
00:04:55.855 --> 00:05:00.884
Okay, so we're gonna implement something
called the Fisher-Yates shuffle algorithm,

62
00:05:00.884 --> 00:05:03.620
which modifies an array in place.

63
00:05:03.620 --> 00:05:08.324
We begin by getting
the current array length, and

64
00:05:08.324 --> 00:05:12.702
then we're just gonna
work backwards [SOUND].

65
00:05:12.702 --> 00:05:17.485
At each point, we're gonna get a random

66
00:05:17.485 --> 00:05:22.560
value between zero and the current index.

67
00:05:22.560 --> 00:05:27.685
[SOUND] So that's math.floor

68
00:05:27.685 --> 00:05:33.220
of math.random x i + 1 because

69
00:05:33.220 --> 00:05:37.529
we just decremented it.

70
00:05:37.529 --> 00:05:43.500
And we wanna get a temporary variable

71
00:05:43.500 --> 00:05:48.708
that contains an array[i] I think.

72
00:05:48.708 --> 00:05:53.666
And then we do array i

73
00:05:53.666 --> 00:05:57.750
equals array j,

74
00:05:57.750 --> 00:06:03.020
array j equals temp.

75
00:06:03.020 --> 00:06:05.400
If I get this right first time,
I'm gonna be super happy with myself.

76
00:06:05.400 --> 00:06:09.747
And then we just return
the array at the end.

77
00:06:09.747 --> 00:06:13.806
So now inside the game
where we create this grid,

78
00:06:13.806 --> 00:06:19.550
we can take these pairs where we're
just duplicating everything and

79
00:06:19.550 --> 00:06:22.934
we can shuffle that before we return it.

80
00:06:22.934 --> 00:06:27.348
Okay, we need to import it and
do that from utils.

81
00:06:27.348 --> 00:06:31.576
If I hit Save, hopefully we're
gonna get a randomized array.

82
00:06:31.576 --> 00:06:35.132
All right, it doesn't look that random
because we've got the caterpillars next to

83
00:06:35.132 --> 00:06:37.700
each other and the dinosaurs on
top of each other, but it is.

84
00:06:37.700 --> 00:06:39.360
This is a shuffled array.

85
00:06:41.860 --> 00:06:44.494
Okay, so
things are starting to take shape.

86
00:06:47.098 --> 00:06:51.837
One thing we're not doing right now
is we're not storing the emojis

87
00:06:51.837 --> 00:06:54.665
that we've found outside the grid, and

88
00:06:54.665 --> 00:06:59.092
we have a space to do that in this
info block below the game grid.

89
00:06:59.092 --> 00:07:03.822
So we would like to include all of
the emogis that have been found so

90
00:07:03.822 --> 00:07:04.945
far down here.

91
00:07:04.945 --> 00:07:09.260
We're gonna create a new component for

92
00:07:09.260 --> 00:07:12.820
this, call it found.svelte.

93
00:07:12.820 --> 00:07:16.992
Just do div class equals found.

94
00:07:16.992 --> 00:07:23.530
That's gonna take the found array,
export, let found string array.

95
00:07:25.600 --> 00:07:31.372
And we'll just render,
I need to add the lang equals ts,

96
00:07:31.372 --> 00:07:36.667
that's why it's giving me
the red squigglies, and

97
00:07:36.667 --> 00:07:43.312
it's just gonna render an array of
all of the found emojis [SOUND].

98
00:07:43.312 --> 00:07:47.118
And I'm gonna add a key there so

99
00:07:47.118 --> 00:07:52.097
that we can do some funky animation stuff

100
00:07:52.097 --> 00:07:57.378
later on in the when we
build the app [SOUND].

101
00:07:57.378 --> 00:08:02.312
All right, back in my game.svelte.

102
00:08:02.312 --> 00:08:09.540
We can create that component and
pass the found array into it.

103
00:08:11.110 --> 00:08:15.213
And now if I find a pair like
these turtles here then,

104
00:08:15.213 --> 00:08:18.910
hopefully it's gonna appear down here.

105
00:08:18.910 --> 00:08:23.626
It's a little hard to see though, so

106
00:08:23.626 --> 00:08:31.092
gonna go back to found.svelte and
add some styles [SOUND].

107
00:08:31.092 --> 00:08:33.877
Maybe, on that a little bit further.

108
00:08:37.015 --> 00:08:39.520
We want that to be centered.

109
00:08:39.520 --> 00:08:45.615
So, we're gonna add some

110
00:08:45.615 --> 00:08:50.880
display flex goodness

111
00:08:50.880 --> 00:08:58.091
to div class="found" [SOUND].

112
00:08:58.091 --> 00:09:01.360
Justify content center line items center.

113
00:09:04.130 --> 00:09:07.220
We'll put a little gap between
the things that we find.

114
00:09:11.740 --> 00:09:13.857
Now find some more of these pairs,

115
00:09:13.857 --> 00:09:17.073
they'll also get added to
that array at the bottom.

