WEBVTT

1
00:00:00.000 --> 00:00:03.847
Congratulations, we've made it through
the first part of the tutorial and

2
00:00:03.847 --> 00:00:05.901
we're gonna get into the fun stuff now.

3
00:00:05.901 --> 00:00:11.454
We're gonna begin part two
with a discussion of motion.

4
00:00:11.454 --> 00:00:15.102
So, so far we've been assigning
to values inside our components,

5
00:00:15.102 --> 00:00:18.180
and that's been causing
the DOM to update immediately.

6
00:00:18.180 --> 00:00:20.228
But sometimes we don't want that,

7
00:00:20.228 --> 00:00:23.513
sometimes we want values to
update gradually over time.

8
00:00:23.513 --> 00:00:28.547
For example, this progress bar here,
it's cool that we can update the progress

9
00:00:28.547 --> 00:00:33.298
bar like that, but it would be nice if
it smoothly animated to its new value.

10
00:00:33.298 --> 00:00:37.943
And in Svelte we can do
that with motion stores.

11
00:00:37.943 --> 00:00:42.149
Here progress is a writable store
that starts with the value of 0, and

12
00:00:42.149 --> 00:00:45.879
every time we press one of these buttons,
it sets a new value.

13
00:00:45.879 --> 00:00:51.402
But if we change that writable
to a tweened store like that and

14
00:00:51.402 --> 00:00:56.713
replace the svelte/store
Import with svelte/motion,

15
00:00:56.713 --> 00:01:02.150
now when we press the buttons,
the bar animates smoothly.

16
00:01:02.150 --> 00:01:04.859
Looks a little bit robotic at the moment,
and

17
00:01:04.859 --> 00:01:07.935
that's because we need to
add an easing function.

18
00:01:07.935 --> 00:01:12.610
An easing function is a function
that takes a value between 0 and

19
00:01:12.610 --> 00:01:15.737
1, and returns a value between 0 and 1.

20
00:01:15.737 --> 00:01:18.387
By default, it's just this.

21
00:01:18.387 --> 00:01:20.737
This is the linear easing
function that we saw before.

22
00:01:20.737 --> 00:01:25.315
But you can do something,
we could square t like this, and

23
00:01:25.315 --> 00:01:28.968
then it'll do some very
different behavior.

24
00:01:28.968 --> 00:01:34.450
We actually have a library of easing
functions available in Svelte,

25
00:01:34.450 --> 00:01:38.890
this formula were devised by
Rob Panna many years ago and

26
00:01:38.890 --> 00:01:41.643
we just have a whole stack of them.

27
00:01:41.643 --> 00:01:47.159
One of the most useful ones I find is
called cubicOut, which kind of smoothly,

28
00:01:47.159 --> 00:01:51.939
it starts fast and then it smoothly
transitions to the final state.

29
00:01:51.939 --> 00:01:53.471
So let's replace that.

30
00:01:56.436 --> 00:02:00.479
Right, I find that to be
quite a pleasing motion and

31
00:02:00.479 --> 00:02:03.968
we can set the duration
to whatever we want.

32
00:02:05.172 --> 00:02:10.131
You can make it a super slow tween or
a very fast tween,

33
00:02:10.131 --> 00:02:14.995
depending on what it is
we're using the motion for.

34
00:02:14.995 --> 00:02:20.397
There's a whole bunch of options that you
can pass to the tween store, including

35
00:02:20.397 --> 00:02:26.213
a custom interpolate function which allows
you to interpolate non-numeric values.

36
00:02:26.213 --> 00:02:29.617
For example, maybe you wanna
transition between two colors.

37
00:02:29.617 --> 00:02:32.797
Well, you can pass a function that knows
how to interpolate between two colors.

38
00:02:34.877 --> 00:02:39.366
And you can also pass those options
when you call progress.set to

39
00:02:39.366 --> 00:02:41.498
override the default values.

40
00:02:43.983 --> 00:02:48.964
So tweening is one way to get motion, but
another way that is more applicable in

41
00:02:48.964 --> 00:02:53.052
some circumstances is to use
some rudimentary spring physics.

42
00:02:53.052 --> 00:02:54.716
It works particularly well for

43
00:02:54.716 --> 00:02:58.239
values that are frequently changing
such as the mouse position.

44
00:02:58.239 --> 00:03:00.324
If I move the mouse around here,

45
00:03:00.324 --> 00:03:04.660
you will see that the the orange
dot follows the cursor perfectly.

46
00:03:04.660 --> 00:03:09.574
And again, we can just replace the store
that represents the coordinates of

47
00:03:09.574 --> 00:03:11.589
the mouse with a spring store.

48
00:03:11.589 --> 00:03:14.446
Just get rid of those,
replace with spring, and

49
00:03:14.446 --> 00:03:17.662
again, we're gonna pull
that from svelte/motion.

50
00:03:17.662 --> 00:03:22.819
Now when I move the mouse around,
the circle kind of lags

51
00:03:22.819 --> 00:03:28.538
behind a little bit and
moves in this pleasing smooth manner.

52
00:03:28.538 --> 00:03:33.953
Now Svelte have some settings that you
can apply to them, they have a stiffness

53
00:03:33.953 --> 00:03:39.223
setting and a damping setting that
determines how they respond to changes.

54
00:03:39.223 --> 00:03:43.027
And we can specify our own initial values.

55
00:03:43.027 --> 00:03:48.195
So for the spring value here, for
the coordinates we'll specify a stiffness

56
00:03:48.195 --> 00:03:53.602
of 0.1, 1 would mean that the spring
was perfectly stiff, 0 would mean that

57
00:03:53.602 --> 00:03:58.960
it's not stiff at all, and we'll set
a damping value of no 0.25 like that.

58
00:03:58.960 --> 00:04:03.663
And now we see we get some very
different and more springy behavior.

59
00:04:03.663 --> 00:04:07.501
And we can change those, and
you can sort of get a feel for

60
00:04:07.501 --> 00:04:12.008
how the different values will
affect the behavior of the spring.

61
00:04:16.837 --> 00:04:20.698
Another way that we can make user
interfaces a little bit more appealing is

62
00:04:20.698 --> 00:04:24.011
by gracefully transitioning
elements into and out of the DOM.

63
00:04:24.011 --> 00:04:28.801
And Svelte has something that helps with
this called the transition directive.

64
00:04:28.801 --> 00:04:32.991
So let's import the fade transition
from 'svelte/transition'.

65
00:04:38.729 --> 00:04:43.278
And this text here,
which becomes visible when

66
00:04:43.278 --> 00:04:48.519
the checkbox is checked and
invisible when it's not.

67
00:04:48.519 --> 00:04:52.974
We can add the transition
directive to that element,

68
00:04:52.974 --> 00:04:58.718
transition:fade to reference
the function that we just imported.

69
00:04:58.718 --> 00:05:03.978
And now when we toggle this, you'll see
that the text fades in and it fades out.

70
00:05:07.672 --> 00:05:11.078
And we can parameterize these transitions.

71
00:05:11.078 --> 00:05:15.151
So let's get rid of the fade and
turn it into a fly transition.

72
00:05:17.468 --> 00:05:22.523
And we'll give it some values,
we'll give it 200 wide pixels and

73
00:05:22.523 --> 00:05:25.759
a slow duration of 2000 milliseconds.

74
00:05:25.759 --> 00:05:29.353
I'm gonna change the word fades to
the word flies, so that is correct.

75
00:05:29.353 --> 00:05:36.613
And now when we toggle that, we're
gonna see it fly in and out of the DOM.

76
00:05:36.613 --> 00:05:38.881
And what's interesting is that
this transition is reversible.

77
00:05:38.881 --> 00:05:43.862
If while it's transitioning out,
we change our mind and bring it back.

78
00:05:43.862 --> 00:05:46.370
Then it doesn't start from the end or
start from the start,

79
00:05:46.370 --> 00:05:49.594
it starts from wherever it was at
the moment that the state change happened.

80
00:05:49.594 --> 00:05:55.123
So this is a nice to make transitions
that almost feel like they're

81
00:05:55.123 --> 00:06:00.565
behaving as physical objects
would within your user interface.

82
00:06:02.665 --> 00:06:06.260
Sometimes you want to have a transition
that applies when the element enters

83
00:06:06.260 --> 00:06:08.672
the DOM and
one that applies when it leaves the DOM,

84
00:06:08.672 --> 00:06:10.374
that are separate from each other.

85
00:06:10.374 --> 00:06:14.089
So, for example, we might want this
text to fly in, but then fade out.

86
00:06:14.089 --> 00:06:18.449
And we can do that by using both
transitions together, import fade.

87
00:06:18.449 --> 00:06:24.249
And then down here, we'll change
the transition fly into in:fly so

88
00:06:24.249 --> 00:06:28.349
that it applies when
the element enters the DOM,

89
00:06:28.349 --> 00:06:32.459
then we'll add our :fade,
flies in, fades out

90
00:06:36.199 --> 00:06:39.224
Now one thing that you'll notice
is that this is not reversible,

91
00:06:39.224 --> 00:06:41.541
there's no way that we
can make this reversible.

92
00:06:41.541 --> 00:06:43.788
So if we toggle the state rapidly,

93
00:06:43.788 --> 00:06:48.670
then it will start flying in from
the beginning of the transition instead of

94
00:06:48.670 --> 00:06:52.870
trying to figure out what some
intermediate position would be.

95
00:06:52.870 --> 00:06:56.446
So far we've been using
the built-in transitions, and

96
00:06:56.446 --> 00:07:00.915
it's useful to be able to import those,
but we can also create our own,

97
00:07:00.915 --> 00:07:05.179
because sometimes you will have
some very specific requirements.

98
00:07:05.179 --> 00:07:08.259
The way that transitions work is,
well, they're just functions.

99
00:07:08.259 --> 00:07:11.398
This is the fade transition that
we were looking at earlier.

100
00:07:11.398 --> 00:07:16.189
It's a function that receives the element
in question together with the options

101
00:07:16.189 --> 00:07:19.854
that were passed in, and
it returns this transition object,

102
00:07:19.854 --> 00:07:22.678
which has some values like delay and
duration.

103
00:07:22.678 --> 00:07:26.599
And most importantly, this CSS method,

104
00:07:26.599 --> 00:07:31.760
which given a value between
0 and1 returns some CSS.

105
00:07:31.760 --> 00:07:37.133
0 means it's the beginning of the intro or
the end of the outro.

106
00:07:37.133 --> 00:07:42.183
1 means it's the element's final
resting state once it's in the DOM.

107
00:07:42.183 --> 00:07:46.786
So in this case, we're setting
the opacity to t multiplied by

108
00:07:46.786 --> 00:07:52.113
the element's native opacity,
which we get with getComputedStyle.

109
00:07:52.113 --> 00:07:55.630
So it 0 before the element has
transitioned in, t will be 0,

110
00:07:55.630 --> 00:07:57.266
the opacity will also be 0.

111
00:07:57.266 --> 00:08:02.445
1 once the element is settled in the DOM,
it'll be 1 times whatever that value was.

112
00:08:04.596 --> 00:08:09.251
And so we can create our own CSS method to

113
00:08:09.251 --> 00:08:13.637
create our own transition effects.

114
00:08:13.637 --> 00:08:17.818
And what Svelte will do is it will
run that method at the beginning of

115
00:08:17.818 --> 00:08:20.516
the transition to get a list of keyframes.

116
00:08:20.516 --> 00:08:22.736
So for
the fade transition that we just saw,

117
00:08:22.736 --> 00:08:25.256
these are the key frames
that you'll end up with.

118
00:08:25.256 --> 00:08:30.149
It will then put those key
frames into a style sheet and

119
00:08:30.149 --> 00:08:34.824
add the relevant CSS to
the element in such a way that

120
00:08:34.824 --> 00:08:39.642
the actual animation is
happening entirely in CSS.

121
00:08:39.642 --> 00:08:43.765
So it's not running code on every frame
and updating the style of that element,

122
00:08:43.765 --> 00:08:45.252
it's all being done in CSS.

123
00:08:45.252 --> 00:08:48.838
And the advantage of that is that it will
frequently run off the main thread on

124
00:08:48.838 --> 00:08:52.705
the compositor, and it will do so in a way
that doesn't block any other JavaScript

125
00:08:52.705 --> 00:08:56.148
from happening and isn't blocked by
other JavaScript from happening.

126
00:08:56.148 --> 00:08:59.817
This is useful for
making your transition smooth, and

127
00:08:59.817 --> 00:09:03.178
it's also better for
your battery life and so on.

128
00:09:03.178 --> 00:09:07.208
Right, so
let's make a really wacky transition.

129
00:09:07.208 --> 00:09:10.548
I'm gonna begin by importing
the elastic out transition.

130
00:09:19.378 --> 00:09:21.440
And we're gonna create
our own CSS method here.

131
00:09:21.440 --> 00:09:24.606
At the moment is not doing anything,

132
00:09:24.606 --> 00:09:30.337
lets turned this into a function
that returns a whole block of CSS.

133
00:09:35.485 --> 00:09:40.602
We'll ease the value with elastic out.

134
00:09:42.985 --> 00:09:47.788
And then transform it with a scale and
a rotation.

135
00:10:05.808 --> 00:10:09.872
All right, and
1080 degrees is 3 times 360, so

136
00:10:09.872 --> 00:10:13.860
we're gonna make this thing
spin around three times.

137
00:10:13.860 --> 00:10:19.380
And then the color is gonna use hsl,

138
00:10:22.960 --> 00:10:27.901
Which if you haven't used hsl before,
it's a really nice way to declare colors

139
00:10:27.901 --> 00:10:33.136
because you're defining a hue, which is
a value between 0 and 360, where 0 and

140
00:10:33.136 --> 00:10:37.659
360 are pure red, and then it kind
of transitions through a rainbow.

141
00:10:37.659 --> 00:10:41.010
S is the saturation, and
then l is the lightness, and

142
00:10:41.010 --> 00:10:46.000
it gives you a way to manipulate colors in
a way that's a lot easier to predict and

143
00:10:46.000 --> 00:10:50.269
understand than when you're dealing
with things like RGB values.

144
00:10:50.269 --> 00:10:54.872
Okay, so {Math.trunc (t * 360)},

145
00:10:54.872 --> 00:11:02.029
we're using trunc to get an integer value,
which the hue needs to be.

146
00:11:09.268 --> 00:11:13.832
And then we're going to create
a saturation, which don't worry too much

147
00:11:13.832 --> 00:11:17.159
about the details of this
formula is just for effect.

148
00:11:24.210 --> 00:11:27.271
And if I've done this right,

149
00:11:27.271 --> 00:11:32.414
then hopefully when we
toggle the visible state,

150
00:11:32.414 --> 00:11:36.828
we're gonna get a fun little transition.

151
00:11:36.828 --> 00:11:40.275
So you can do pretty much whatever you
want here, you have the full power

152
00:11:40.275 --> 00:11:44.182
of JavaScript, but we're not actually
using JavaScript to apply these files,

153
00:11:44.182 --> 00:11:45.579
it's all happening in CSS.

154
00:11:45.579 --> 00:11:49.932
So we sort of get the best of both worlds.

155
00:11:49.932 --> 00:11:54.580
Sometimes you can't express everything in
CSS, sometimes you actually do need to run

156
00:11:54.580 --> 00:11:58.348
code on each frame of the animation
in order to get the desired effect.

157
00:11:58.348 --> 00:12:02.569
So for example,
we might wanna create a typewriter effect

158
00:12:02.569 --> 00:12:07.059
where this text here becomes
visible one character at a time.

159
00:12:07.059 --> 00:12:13.045
And we can do that by instead
of returning a CSS method,

160
00:12:13.045 --> 00:12:21.130
we can return a tick function which
applies some manipulation to the DOM.

161
00:12:21.130 --> 00:12:24.380
So here's our typewriter.

162
00:12:24.380 --> 00:12:28.226
To transition,
again we're just passing in the node that

163
00:12:28.226 --> 00:12:32.630
the transition is gonna be applied
to together with some options.

164
00:12:32.630 --> 00:12:37.290
I'm gonna grab a copy of the node.text.

165
00:12:40.511 --> 00:12:45.230
And the duration of this transition is
gonna be based on the length of the text.

166
00:12:45.230 --> 00:12:52.616
So that's gonna be text.length
divided by the speed expressed in,

167
00:12:52.616 --> 00:12:57.720
I'm actually not sure
what this is in seconds.

168
00:13:00.802 --> 00:13:03.327
And we pass that duration back to Svelte,
so

169
00:13:03.327 --> 00:13:06.072
it knows how long this
transition should take.

170
00:13:06.072 --> 00:13:10.620
And then we're gonna create
a tick function which is gonna be

171
00:13:10.620 --> 00:13:12.322
called on each frame.

172
00:13:17.351 --> 00:13:23.612
And i is gonna be the number of characters
of the string that we should show.

173
00:13:23.612 --> 00:13:27.029
And we can calculate that
with text.length * t, again,

174
00:13:27.029 --> 00:13:30.812
we're using Math.trunc because
we need this to be an integer.

175
00:13:32.842 --> 00:13:40.181
And we can set the text content
of the node to text.slice(0, i).

176
00:13:40.181 --> 00:13:47.052
And now when we toggle visible, the text
is written on one character at a time.

177
00:13:47.052 --> 00:13:52.006
And because we are using transition
here as opposed to in or out,

178
00:13:52.006 --> 00:13:56.342
this is also reversible just
like our CSS transitions.

179
00:14:01.327 --> 00:14:05.956
In some cases, it's useful to know
when your transitions are starting and

180
00:14:05.956 --> 00:14:06.911
ending, and so

181
00:14:06.911 --> 00:14:12.292
Svelte dispatches transition events when
you have an element that uses transitions.

182
00:14:12.292 --> 00:14:14.524
We have a status value here, and

183
00:14:14.524 --> 00:14:19.581
we're just gonna assign to that value
a value when these events happen.

184
00:14:19.581 --> 00:14:24.569
So the paragraph element here, we're gonna

185
00:14:24.569 --> 00:14:29.557
create some event listeners on introstart,

186
00:14:29.557 --> 00:14:34.690
we're gonna set the status
to intro started.

187
00:14:34.690 --> 00:14:39.925
And I'm just gonna copy
that line four times,

188
00:14:39.925 --> 00:14:45.171
we're gonna change
the intro there to outro.

189
00:14:45.171 --> 00:14:49.289
And we're gonna change
the start here to end, and

190
00:14:49.289 --> 00:14:52.731
we're gonna change that intro to outro.

191
00:14:52.731 --> 00:14:58.127
And now when we toggle the visibility of
the element, we'll see that the outro

192
00:14:58.127 --> 00:15:02.971
started, the outro ended,
the intro started, and the intro ended.

193
00:15:02.971 --> 00:15:06.674
It's not something that you use a lot, but
it's useful to have when you do need it.

194
00:15:10.521 --> 00:15:15.436
Okay, so ordinarily transitions will play
on elements when any container block is

195
00:15:15.436 --> 00:15:16.710
added or destroyed.

196
00:15:16.710 --> 00:15:18.528
And so in the example here,

197
00:15:18.528 --> 00:15:22.877
these elements are removed when
we change the length of the list,

198
00:15:22.877 --> 00:15:28.430
which is what we want, but they're also
removed when we remove the list entirely.

199
00:15:28.430 --> 00:15:30.834
And in this case,
let's say that's not what we want.

200
00:15:30.834 --> 00:15:37.693
We want the list to only appear and
disappear when the checkbox is toggled but

201
00:15:37.693 --> 00:15:44.679
we want the individual elements to
transition out as we play with the slider.

202
00:15:44.679 --> 00:15:49.399
And we can do that by turning the slide
transition that's being applied to

203
00:15:49.399 --> 00:15:52.077
those elements into a local transition.

204
00:15:52.077 --> 00:15:56.593
Just like event modifiers,
we add the pipe symbol to where

205
00:15:56.593 --> 00:16:00.937
the transition is declared and
add the local modifier.

206
00:16:00.937 --> 00:16:05.267
And so now the transition continues to
play when the length of the list changes.

207
00:16:05.267 --> 00:16:08.997
But if I toggle this list, the whole
thing will just disappear altogether.

