WEBVTT

1
00:00:00.000 --> 00:00:05.465
So we're gonna be spending most of
the day on this website learn.svelte.dev.

2
00:00:05.465 --> 00:00:10.440
This is our interactive tutorial platform,
we've been working on it for

3
00:00:10.440 --> 00:00:13.501
about a year and
this week it is finally done.

4
00:00:13.501 --> 00:00:16.942
I'm so excited to start
sharing this with people and

5
00:00:16.942 --> 00:00:21.252
recommending that people
Learn Svelte on Learn.svelte.dev.

6
00:00:21.252 --> 00:00:24.823
There's a lot of fairly cutting edge
technology inside this website.

7
00:00:24.823 --> 00:00:28.833
In fact, it is so cutting edge that
it does not run on Safari just yet.

8
00:00:28.833 --> 00:00:34.939
It will do, Safari 16.4 will add the
necessary APIs for this website to work.

9
00:00:34.939 --> 00:00:39.886
But for now, I recommend that you
open this website in Firefox or

10
00:00:39.886 --> 00:00:42.644
Chrome if you want to follow along.

11
00:00:42.644 --> 00:00:44.976
So a quick orientation.

12
00:00:44.976 --> 00:00:50.716
On the left we have the text that is
gonna walk us through each exercise.

13
00:00:50.716 --> 00:00:53.266
We also have a menu up here.

14
00:00:53.266 --> 00:00:56.726
If you open that,
you can see all of the different parts.

15
00:00:56.726 --> 00:00:58.883
Part one basic Svelte,
part two advanced Svelte.

16
00:00:58.883 --> 00:01:02.703
That's what we're gonna be doing in this
session and then in the next session

17
00:01:02.703 --> 00:01:05.784
when we have a SvelteKit,
we'll cover parts three and four.

18
00:01:05.784 --> 00:01:08.584
On the right hand side,
we have a file tree and

19
00:01:08.584 --> 00:01:12.813
some exercises you'll be able to
edit file names and add new files.

20
00:01:12.813 --> 00:01:15.623
But for most of the time,
what you see is what you get.

21
00:01:15.623 --> 00:01:18.756
To the right of that
we have a code editor.

22
00:01:18.756 --> 00:01:23.028
You can edit text in here and
it will be reflected in the iframe below,

23
00:01:23.028 --> 00:01:26.722
which is showing the output
of building this application.

24
00:01:26.722 --> 00:01:30.258
You'll see that we have a little
reload icon above the iframe.

25
00:01:30.258 --> 00:01:34.026
It is possible to get your application
into a broken state, in which case, just

26
00:01:34.026 --> 00:01:37.815
hit the refresh button and it will act as
though your browser had been reloaded.

27
00:01:37.815 --> 00:01:41.308
You also have a URL bar to show where
we are in the app at the moment.

28
00:01:41.308 --> 00:01:46.860
We have an open in new tab button
to the right of the URL bar.

29
00:01:46.860 --> 00:01:52.076
And finally, we have a toggle for
the terminal.

30
00:01:52.076 --> 00:01:55.282
Most of the time you won't need this,
but in some of the later exercises,

31
00:01:55.282 --> 00:01:56.576
particularly in SvelteKit,

32
00:01:56.576 --> 00:02:00.318
it'll be useful to be able to see what's
happening inside your development server.

33
00:02:03.037 --> 00:02:05.623
Finally we have this gray solve button.

34
00:02:05.623 --> 00:02:08.928
It is grayed out on this exercise
because there's nothing to do,

35
00:02:08.928 --> 00:02:10.440
this is all just exposition.

36
00:02:10.440 --> 00:02:13.333
But on the next exercise,
you'll see it turn orange, and

37
00:02:13.333 --> 00:02:14.936
you will be tempted to press it.

38
00:02:14.936 --> 00:02:18.121
I urge you to resist that temptation.

39
00:02:18.121 --> 00:02:21.588
To learn this,
it's better if you follow the exercise and

40
00:02:21.588 --> 00:02:23.232
type in the code yourself.

41
00:02:23.232 --> 00:02:26.846
You will still learn things if you
hit the Solve button and cheat,

42
00:02:26.846 --> 00:02:28.628
but you won't learn it as well.

43
00:02:28.628 --> 00:02:31.660
It's kinda like the difference
between walking around a city and

44
00:02:31.660 --> 00:02:32.769
driving around a city.

45
00:02:32.769 --> 00:02:35.952
If you walk, if you do the effort
yourself, then you will develop a much

46
00:02:35.952 --> 00:02:38.990
richer mental map and you will
understand the content a lot better.

47
00:02:38.990 --> 00:02:42.262
So consider the Solve button a last
resort, if you get stuck and

48
00:02:42.262 --> 00:02:46.523
you feel like you're falling behind, you
can hit Solve to see what the exercise is

49
00:02:46.523 --> 00:02:50.627
supposed to look like, but try and
complete the exercise without doing that.

50
00:02:50.627 --> 00:02:52.924
Okay, so what is Svelte?

51
00:02:52.924 --> 00:02:56.224
Well, Svelte is a tool for
building web applications.

52
00:02:56.224 --> 00:02:59.853
It falls into the category of
user interface frameworks, and

53
00:02:59.853 --> 00:03:04.808
UI frameworks all essentially are involved
in the task of making apps easier to build

54
00:03:04.808 --> 00:03:09.061
by taking the code that you would have
to write to update the DOM in a manual

55
00:03:09.061 --> 00:03:10.417
imperative fashion.

56
00:03:10.417 --> 00:03:13.826
And allowing you to write it in
a declarative state driven fashion.

57
00:03:13.826 --> 00:03:19.500
This tends to result in much more
maintainable and understandable code.

58
00:03:19.500 --> 00:03:23.236
So it allows you to build your app
declaratively out of components that

59
00:03:23.236 --> 00:03:27.479
combine markups, styles, and behaviors
into a single atomic unit that you can

60
00:03:27.479 --> 00:03:30.543
then compose together to
build something more complex.

61
00:03:30.543 --> 00:03:35.343
So it's similar to things like React and
View if you've used frameworks like those,

62
00:03:35.343 --> 00:03:37.089
but it has one key difference.

63
00:03:37.089 --> 00:03:41.232
It leans into the idea that a compiler
can take the code that you wrote and

64
00:03:41.232 --> 00:03:42.971
turn it into some other code.

65
00:03:42.971 --> 00:03:44.977
So Svelte is also a language.

66
00:03:44.977 --> 00:03:48.729
It's a language that goes into
the compiler and then JavaScript,

67
00:03:48.729 --> 00:03:52.352
highly optimized vanilla JavaScript
comes out the other side.

68
00:03:52.352 --> 00:03:54.766
You can build your entire
application with Svelte.

69
00:03:54.766 --> 00:03:58.493
You can use an application like Svelte
Kit, which we're gonna talk about later.

70
00:03:58.493 --> 00:04:02.947
Or you can add it incrementally to
an existing code base if you have one of

71
00:04:02.947 --> 00:04:03.475
those.

72
00:04:03.475 --> 00:04:10.459
And you can also build components and then
publish into NPM for other people to use.

73
00:04:10.459 --> 00:04:14.091
Okay, this part we've covered, so
I'm gonna stick skip to the end.

74
00:04:14.091 --> 00:04:16.395
And we'll begin with our first component.

75
00:04:16.395 --> 00:04:19.970
So as I explained in Svelte,
an application is composed of one or

76
00:04:19.970 --> 00:04:21.030
more components,

77
00:04:21.030 --> 00:04:25.535
which is a reusable self contained block
of code that encapsulates HTML, CSS and

78
00:04:25.535 --> 00:04:30.063
JavaScript that belong together written
into a .svelte file, not a .js file.

79
00:04:30.063 --> 00:04:32.868
We have our own file format because
we're using our own language.

80
00:04:32.868 --> 00:04:36.985
So App.svelte on the right here,
this is a Svelte component, and

81
00:04:36.985 --> 00:04:40.087
this is the contents,
just an H1, Hello World.

82
00:04:40.087 --> 00:04:42.718
You'll notice that that is just HTML.

83
00:04:42.718 --> 00:04:45.353
And that's an important fact about Svelte.

84
00:04:45.353 --> 00:04:47.532
HTML is also valid Svelte.

85
00:04:47.532 --> 00:04:50.555
So if you see some user interface on
a website that you're looking at,

86
00:04:50.555 --> 00:04:54.040
you can go into DevTools, you can grab
that HTML, and the styles that affect it,

87
00:04:54.040 --> 00:04:56.519
you can put it into a Svelte component,
and it will work.

88
00:04:56.519 --> 00:05:00.461
Same deal if you see some HTML on Stack
Overflow or CodePen or a thing like that,

89
00:05:00.461 --> 00:05:03.825
you can just drop it into your
Svelte component, and it will work.

90
00:05:03.825 --> 00:05:07.255
Cuz obviously this isn't very interesting
just having a static component like this

91
00:05:07.255 --> 00:05:08.425
that doesn't do anything.

92
00:05:08.425 --> 00:05:11.105
So let's add some data.

93
00:05:11.105 --> 00:05:16.548
First we will begin by adding
a script tag to the top of the file.

94
00:05:16.548 --> 00:05:20.145
Now if you're lazy like me, your first
instinct will be to say, well okay,

95
00:05:20.145 --> 00:05:22.072
I'm just gonna select that and copy it.

96
00:05:22.072 --> 00:05:26.264
And if you do, you will see that copy and
paste is actually disabled for

97
00:05:26.264 --> 00:05:30.530
the same reason that we discourage
you from pressing the Solve button,

98
00:05:30.530 --> 00:05:34.540
we encourage you to type out the text
that is asking you to type out.

99
00:05:34.540 --> 00:05:38.786
You will learn a lot better that way, you
will develop the right muscle memory, and

100
00:05:38.786 --> 00:05:40.737
you will notice things along the way.

101
00:05:40.737 --> 00:05:45.010
So I do encourage you as far as
possible to type the code out,

102
00:05:45.010 --> 00:05:49.297
although of course you can
disable it if you really need to.

103
00:05:51.237 --> 00:05:55.129
So let's do that let's add a script
tag to the top of the component.

104
00:05:55.129 --> 00:05:58.264
And we'll add a variable, call it name.

105
00:05:59.392 --> 00:06:01.794
Give it a value of Svelte.

106
00:06:01.794 --> 00:06:06.549
And now inside our component we can refer
to that name just by enclosing it in

107
00:06:06.549 --> 00:06:07.538
curly braces.

108
00:06:07.538 --> 00:06:10.540
If you've used React,
this should be familiar,

109
00:06:10.540 --> 00:06:12.616
this is basically the same as JSX.

110
00:06:12.616 --> 00:06:16.836
Now, inside that expression,
we can use any JavaScript we like.

111
00:06:16.836 --> 00:06:22.174
So we can, for example,
call to uppercase like that,

112
00:06:22.174 --> 00:06:26.711
and it goes from Hello Svelte
to Hello SVELTE!

113
00:06:26.711 --> 00:06:30.694
And we can do the same
with our attributes.

114
00:06:30.694 --> 00:06:33.361
Same way that we can have
text inside components,

115
00:06:33.361 --> 00:06:35.974
we can have dynamic
attributes in our elements.

116
00:06:35.974 --> 00:06:40.336
This image is currently
missing a source attribute.

117
00:06:40.336 --> 00:06:46.714
So let's add one there, source = source.

118
00:06:46.714 --> 00:06:49.936
So this is Rick Roll,
everyone who's watching.

119
00:06:49.936 --> 00:06:53.104
And this is all good but
if you hover over this image,

120
00:06:53.104 --> 00:06:55.350
you will notice something is wrong.

121
00:06:55.350 --> 00:06:59.100
It's telling us that the image
should have an Alt attribute.

122
00:06:59.100 --> 00:07:02.060
This is because not everyone
can see those images.

123
00:07:02.060 --> 00:07:04.816
In some cases because people
have impaired vision.

124
00:07:04.816 --> 00:07:07.692
In some cases it's because
they have rubbish Internet and

125
00:07:07.692 --> 00:07:09.754
they haven't downloaded the image yet.

126
00:07:09.754 --> 00:07:12.757
So it's very important that when
we're building web apps, we do so

127
00:07:12.757 --> 00:07:15.403
in a way that is accessible to
the largest number of people.

128
00:07:15.403 --> 00:07:20.081
And Svelte will help you do that
by telling you when you make

129
00:07:20.081 --> 00:07:25.441
accessibility mistakes like
forgetting to add an Alt attribute.

130
00:07:25.441 --> 00:07:30.543
So let's add one to this element here.

131
00:07:30.543 --> 00:07:35.235
It should be a description of what
is happening inside the image.

132
00:07:35.235 --> 00:07:39.424
And you'll notice that when you add that,
that warning disappears,

133
00:07:39.424 --> 00:07:41.058
the compiler is now happy.

134
00:07:41.058 --> 00:07:45.815
And of course, we can,
if we want, make that dynamic.

135
00:07:45.815 --> 00:07:51.818
The name is Rick.

136
00:07:51.818 --> 00:07:57.123
Lastly, And we'll replace

137
00:07:57.123 --> 00:08:01.726
that in the alt attribute like so.

138
00:08:03.725 --> 00:08:08.282
And finally, one thing that
Svelte does is it allows you to

139
00:08:08.282 --> 00:08:12.932
use shorthand attributes when
the name of the attribute and

140
00:08:12.932 --> 00:08:16.663
the value of the attribute
happen to go inside.

141
00:08:16.663 --> 00:08:19.506
So here,
you can see that source equals source.

142
00:08:19.506 --> 00:08:20.908
Well, that's duplicative.

143
00:08:20.908 --> 00:08:24.631
So we can just replace that
with source like that.

144
00:08:24.631 --> 00:08:26.671
Just a little quality of life enhancement.

145
00:08:30.450 --> 00:08:32.850
Now most of the time when you're
building a user interface,

146
00:08:32.850 --> 00:08:33.987
you will need to add Svelte.

147
00:08:33.987 --> 00:08:37.456
And in fact, the dirty secret of
UI development is that most of

148
00:08:37.456 --> 00:08:40.003
your code is probably
gonna end up being CSS.

149
00:08:40.003 --> 00:08:41.077
At least that's my experience.

150
00:08:41.077 --> 00:08:45.766
I have some markup, and I have some
JavaScript, and I have a whole lot of CSS.

151
00:08:45.766 --> 00:08:46.974
And so JavaScript,

152
00:08:46.974 --> 00:08:51.175
sorry, Svelte is not a JavaScript
framework, it is a web framework.

153
00:08:51.175 --> 00:08:55.933
It allows you to keep your styles
alongside your components, and

154
00:08:55.933 --> 00:08:58.969
you can write those into a style tag like.

155
00:08:58.969 --> 00:09:05.326
So let's add a P selector that's gonna
target this paragraph, give it a color.

156
00:09:05.326 --> 00:09:12.071
I'm gonna choose goldenrod,
gonna give it a font family of Comic Sans,

157
00:09:12.071 --> 00:09:16.162
the greatest font,
give that a fallback for

158
00:09:16.162 --> 00:09:21.709
the people who don't have Comic Sans for
whatever reason.

159
00:09:21.709 --> 00:09:27.575
And we'll give it a slightly
bigger font size of 2.

160
00:09:27.575 --> 00:09:31.359
And so now we have some styles that
are attached to our component.

161
00:09:31.359 --> 00:09:35.391
Now what's interesting about the styles
here is that they are scoped to this

162
00:09:35.391 --> 00:09:36.090
component.

163
00:09:36.090 --> 00:09:39.674
And what I mean by that is even
though we've just used a P selector,

164
00:09:39.674 --> 00:09:41.850
we haven't added a special class name or

165
00:09:41.850 --> 00:09:45.642
anything like that it won't affect
any other paragraphs on the page.

166
00:09:45.642 --> 00:09:48.845
It will only affect the elements
inside this component.

167
00:09:48.845 --> 00:09:54.472
That's useful when we start having
multiple components on the page.

168
00:09:54.472 --> 00:09:57.805
Because it would be impractical to put
your entire application in a single

169
00:09:57.805 --> 00:09:58.998
component, obviously.

170
00:09:58.998 --> 00:10:02.758
Instead, we can import
components from other files and

171
00:10:02.758 --> 00:10:04.918
we can include them in a markup.

172
00:10:04.918 --> 00:10:08.999
So, let's put a script tag
at the top of App.svelte,

173
00:10:10.855 --> 00:10:15.892
And let's import this nested
component inside app.

174
00:10:22.962 --> 00:10:25.743
This is just like importing
any other JavaScript module,

175
00:10:25.743 --> 00:10:27.395
default export is the component.

176
00:10:27.395 --> 00:10:32.431
Once we've done that,
we can include that component inside app.

177
00:10:36.578 --> 00:10:42.815
And so again, you'll notice that even
though Nested.svelte has a p element and

178
00:10:42.815 --> 00:10:48.869
App.svelte has a p selector, the styles
do not affect the nested component,

179
00:10:48.869 --> 00:10:52.559
and that's really good for
maintainability.

180
00:10:52.559 --> 00:10:54.065
So, quick note at the bottom here,

181
00:10:54.065 --> 00:10:57.545
component names are always capitalized
to distinguish them from HTML elements.

182
00:10:57.545 --> 00:11:01.743
So, anytime you see something like this,
that is an HTML element.

183
00:11:01.743 --> 00:11:06.239
Anytime you see angle bracket followed
by a capital letter that is referring to

184
00:11:06.239 --> 00:11:13.239
a Very often

185
00:11:13.239 --> 00:11:18.848
you will need to inject arbitrary
HTML into your applications.

186
00:11:18.848 --> 00:11:22.800
And right now, we have some HTML
in this variable string, but

187
00:11:22.800 --> 00:11:27.816
it's just printing it out literally,
which isn't what we want in this case.

188
00:11:27.816 --> 00:11:32.484
We can change that by using
the special HTML tag.

189
00:11:32.484 --> 00:11:38.148
All we need to do is put this HTML
directive at the beginning of the tag,

190
00:11:38.148 --> 00:11:38.919
like so.

191
00:11:38.919 --> 00:11:45.698
You'll now see that down here, the strong
element is being rendered correctly.

192
00:11:45.698 --> 00:11:49.635
There is a warning with this,
we are not sanitizing the HTML,

193
00:11:49.635 --> 00:11:52.526
you can only do this
with data that you trust.

194
00:11:52.526 --> 00:11:57.265
You do not wanna do this with data that
you've got from a database unless you have

195
00:11:57.265 --> 00:12:02.077
already sanitized it because that will
open up your users to cross site scripting

196
00:12:02.077 --> 00:12:04.927
attacks and
that is not a thing that we wanna do.

