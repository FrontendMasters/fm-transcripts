[00:00:00]
>> So, there's a little bit more game UI that we need to add before we start making it look nice and that is the countdown timer. You'll recall from when we were looking at this before, we have a countdown timer at the top of the page. And you can see that the bar is gradually dwindling.

[00:00:19]
It just makes the game a little bit more fun and challenging if you're up against the clock. So, we're gonna create one more component that's a countdown.svelte component. And inside there we're gonna take a remaining prop And a duration prop that should be a lowercase number. We need to add lang equals ts so that we know that we're dealing with titrate.

[00:01:03]
Div of class equals countdown and then inside the we're gonna have the pause button. And the bar representing the duration and inside that bar, the bar representing the remaining time. So the container element is gonna be another flex element. The duration bar is gonna fill the remainder of the space after the button has been added.

[00:01:46]
And then the remaining bar is just gonna be a position absolute bar inside that. All right, let's add this component to the page so that we can start seeing it and that way we'll get immediate feedback as we are writing the styles. This will helpers figure out what needs to go where.

[00:02:13]
So go back to our page and then inside game.svelte in that top info container we'll add the countdown Remaining well, let's just do LevelDuration for now and then duration is also levelDuration. And you can see that it's imported that component and put it at the top of our script block.

[00:02:58]
So, the first thing we wanna do is get a pause icon that we can put inside our button. What I usually do is I just Google material, design icons, there's a site called pictograms which I find pretty reliable, if I'm looking for an icon. If I go in here and I search for pause then I'll see this pause circle icon here that looks like basically what we want.

[00:03:27]
So I'm gonna open that then click on the code symbol here it's gonna copy a bunch of SVG for me. And I'm just gonna put that inside the button like that. We can't see it yet, because we need to make the button big enough. Okay, now we can see the SVG inside the button.

[00:04:04]
This duration div needs to have a width and a height so that we can see it. I will give that a height of 1M and a background colour of yellow so that we can see it. And you can see that it is now appearing at the top of the info block.

[00:04:20]
But we wanna make everything inside her centre aligned I that and as is our custom we'll give it a gap of let's say 1M. We're gonna make the button have a square aspect ratio as well. We're gonna make the contents of the button fill its container. Okay, that's starting to look how we want it to look.

[00:05:02]
Except that I think we're gonna wanna give the SVG a different fill color. I'm gonna make this slightly tidier so they can see what's going on. At the end of the path, we don't have a fill attribute so we're gonna create one. And for now we'll just put in 999 or something like that.

[00:05:27]
At this point I think we can get rid of the purple background on the info boxes because we don't need that anymore, we can see what's happening. Just gonna get rid of that and I'm gonna do the same for the grid container. We don't need that anymore. I think starting to look a little bit nicer.

[00:05:48]
Back over in countdown.svelte we'll give the duration a background of let's say, 999 again. Actually, no a little lighter, CCC. And then the remaining can have a height of 100%. And a background that's gonna be a little bit darker so that we can see it. Let's do 999.

[00:06:19]
Right, now it's not visible because we haven't given it a width. We're gonna need to control the width based on how much time is remaining in our countdown. One easy way to do this is to use a CSS custom property. So, add style equals and then do say --p is gonna be remaining as a proportion of the duration.

[00:06:44]
And then we can base the width on that value to occur count of 100% times the P that we just passed in. Because the remaining is default to the duration of the level, it's filling the entire range that we have got. So, let's actually make the countdown work inside game.svelte we gonna use request animation frame.

[00:07:13]
I will create a countdown function. And inside her we we'll have some request animation frame logic that is gonna assign to some new values that we're gonna create. So let remaining number is gonna begin as level.duration. Let duration is also level.duration? But when we start the countdown we're gonna decrement remaining until it hits zero.

[00:07:53]
First thing we need to do is find out what the current time is. Start equals date dot now. And then we can store how much time is remaining at each point once the countdown activates. Remaining at start equals remaining. Then we'll create our request animation frame loop. Just call it loop like that and the first thing we're gonna do is call itself inside request animation frame.

[00:08:34]
And we're gonna assign to remaining and do remaining_at_start minus whatever time has elapsed since the start. They might look at that code that I just wrote and think, well, why not just subtract a 60th of a second each time? It's a valid question. The reality is that you can't guarantee that request animation frame is gonna be called exactly 60 times a second.

[00:09:00]
So you can get kinda a drift when you do things that way. It's better if you can deal with Delta's from absolute times. You'll get a more accurate result that way. So if remaining is less than zero or less than or equal to zero I guess I should well then at that point, the game has been lost.

[00:09:22]
So we'll just add a note to ourselves to do. The game has been lost and we wanna stop the countdown at that point. So let's add another value we'll do let playing. Is false and then inside our loop if the game is no longer playing then we return before calling the request animation frame.

[00:09:54]
And then down here, playing becomes false once we run out of time. I'm gonna add an onMount here that just calls countdown. And then we are gonna pass that remaining value into our countdown component. It's not working because I forgot to call the loop function. The S code is hopefully great out so that I can see that it's not being used anywhere.

[00:10:32]
If I now, run now hopefully, we're gonna start seeing that countdown bar to the window. Yes we are, okay. So things are starting to come together

