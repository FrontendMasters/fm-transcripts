WEBVTT

1
00:00:00.260 --> 00:00:02.360
Okay, it's time to talk
about the circle of life.

2
00:00:02.360 --> 00:00:07.243
So every component has a lifecycle
that starts when it's created and

3
00:00:07.243 --> 00:00:09.190
ends when it is destroyed.

4
00:00:09.190 --> 00:00:12.795
And there's a handful of functions
that allow you to run code inside your

5
00:00:12.795 --> 00:00:15.290
component at key moments
during that lifecycle.

6
00:00:15.290 --> 00:00:18.680
The one that you're gonna use most
frequently is called onMount.

7
00:00:18.680 --> 00:00:22.722
And is a function that allows you to
specify a callback that will get invoked

8
00:00:22.722 --> 00:00:26.150
when the component is
first mounted to the DOM.

9
00:00:26.150 --> 00:00:30.407
So in this exercise, we have a canvas
element that we would like to animate

10
00:00:30.407 --> 00:00:34.050
using the paint function
in this gradient js file.

11
00:00:34.050 --> 00:00:37.565
It's just gonna take an input
canvas context and a value t,

12
00:00:37.565 --> 00:00:42.820
and it's gonna do some maths, and it's
gonna turn that into a colorful canvas.

13
00:00:42.820 --> 00:00:45.920
So we'll first import
onMount into our component.

14
00:00:56.725 --> 00:00:58.749
And then we'll call onMount,
pass it a callback.

15
00:01:02.539 --> 00:01:03.355
And first up,

16
00:01:03.355 --> 00:01:08.500
we're gonna get a reference to that canvas
element using document query selector.

17
00:01:08.500 --> 00:01:11.445
And if alarm bells are ringing that
we shouldn't be using document.query

18
00:01:11.445 --> 00:01:13.174
selector, you're absolutely right, but

19
00:01:13.174 --> 00:01:15.010
we're gonna come to that
in a later exercise.

20
00:01:16.260 --> 00:01:23.440
Begin by doing canvas =,
document.querySelector('canvas').

21
00:01:23.440 --> 00:01:27.420
And then if you haven't
used the Canvas API before,

22
00:01:27.420 --> 00:01:31.131
once you've got your
reference to the element,

23
00:01:31.131 --> 00:01:36.016
you then need to create a Canvas
context that you can paint with,

24
00:01:36.016 --> 00:01:40.110
const context = canvas.getContext('2D').

25
00:01:40.110 --> 00:01:41.980
2D as opposed to WebGL.

26
00:01:43.280 --> 00:01:46.220
And then we're gonna do
some work in a loop.

27
00:01:47.640 --> 00:01:49.320
Gonna call requestAnimationFrame.

28
00:01:51.520 --> 00:01:54.389
And inside here,
we're gonna have a name function so

29
00:01:54.389 --> 00:01:58.170
that we can refer to it that takes
a value t, which is the current time.

30
00:02:00.710 --> 00:02:04.267
And inside the loop, the first thing we're
gonna do is call the loop again inside

31
00:02:04.267 --> 00:02:05.850
another requestAnimationFrame.

32
00:02:08.500 --> 00:02:14.031
And then we're gonna call our paint
function, using the context that we just

33
00:02:14.031 --> 00:02:20.005
created with the t value that got passed
into the requestAnimationFrame handler.

34
00:02:27.091 --> 00:02:30.366
So now, this function is being
called roughly 60 times a second.

35
00:02:34.885 --> 00:02:38.890
Okay, there is a problem with
the code that we just wrote.

36
00:02:38.890 --> 00:02:41.379
And this is kind of an easy
thing to overlook, but

37
00:02:41.379 --> 00:02:44.020
it's important not to make this mistake.

38
00:02:44.020 --> 00:02:45.959
If you're doing some work in OnMount,

39
00:02:45.959 --> 00:02:49.440
you need to make sure that you undo
it when the component is onMounted.

40
00:02:49.440 --> 00:02:54.019
And the way that we're gonna do that is
by returning a function that calls some

41
00:02:54.019 --> 00:02:54.940
cleanup code.

42
00:02:57.070 --> 00:03:00.961
Any function that is returned from OnMount
will get called when the component is

43
00:03:00.961 --> 00:03:02.580
destroyed.

44
00:03:02.580 --> 00:03:07.590
In our case, we wanna cancel the animation
frame to stop this loop from running.

45
00:03:07.590 --> 00:03:11.360
In order to do that, we need to
create a frame variable locally.

46
00:03:11.360 --> 00:03:17.720
And we need to assign to that every
time we call request animation frame.

47
00:03:17.720 --> 00:03:20.735
And then in the return callback,

48
00:03:20.735 --> 00:03:26.180
I'll just call cancelAnimationFrame and
pass that ID in.

49
00:03:26.180 --> 00:03:29.428
And so now when this component
is taken off the screen,

50
00:03:29.428 --> 00:03:31.340
we'll stop running that loop.

51
00:03:32.960 --> 00:03:36.744
Now, as you saw, we had that code running,
and it continued to run, and

52
00:03:36.744 --> 00:03:38.670
it was actually kind of fine.

53
00:03:38.670 --> 00:03:42.067
It was just updating a canvas
that you couldn't see anymore,

54
00:03:42.067 --> 00:03:43.579
which is obviously no use.

55
00:03:43.579 --> 00:03:46.954
If you did that too many times in the same
app, you would eventually start to run

56
00:03:46.954 --> 00:03:50.095
into memory leaks and that's something
that we very much want to avoid.

57
00:03:54.825 --> 00:03:59.295
We have other life cycle functions,
beforeUpdate and afterUpdate.

58
00:03:59.295 --> 00:04:04.318
Lifecycle functions that are called
immediately before the DOM is updated and

59
00:04:04.318 --> 00:04:06.840
immediately after the DOM is updated.

60
00:04:08.620 --> 00:04:13.810
So basically, in Svelte,
we're dealing with declarative state.

61
00:04:13.810 --> 00:04:16.070
But occasionally,
we need to break out of that.

62
00:04:16.070 --> 00:04:20.207
We need to use an escape hatch to access
the DOM directly because some things

63
00:04:20.207 --> 00:04:23.510
are hard to do in a purely
state driven way.

64
00:04:23.510 --> 00:04:25.990
So this is the Eliza Chatbot.

65
00:04:25.990 --> 00:04:30.120
Before there was ChatGPT, there was Eliza.

66
00:04:30.120 --> 00:04:33.405
This comes from the 70's and
it's pretty cool.

67
00:04:33.405 --> 00:04:39.536
No, actually, everything is great.

68
00:04:39.536 --> 00:04:41.400
We can talk to it.

69
00:04:41.400 --> 00:04:45.500
The only problem is the messages aren't
appearing because we've got to scroll.

70
00:04:47.910 --> 00:04:49.290
Completely misunderstood me.

71
00:04:51.230 --> 00:04:53.690
No, I'm very positive.

72
00:04:53.690 --> 00:04:58.870
Right, [LAUGH] you
are being a bit negative.

73
00:04:58.870 --> 00:05:02.799
But we have to do that every time we
add some more content because the DOM

74
00:05:02.799 --> 00:05:05.010
doesn't know that it needs to scroll.

75
00:05:06.270 --> 00:05:08.860
But we can fix that using beforeUpdate and
afterUpdate.

76
00:05:11.150 --> 00:05:14.559
We'll begin by creating
an auto scroll value.

77
00:05:14.559 --> 00:05:20.850
This is gonna track whether or not we
currently should be in autoscroll mode.

78
00:05:20.850 --> 00:05:23.673
I'm gonna default to false.

79
00:05:25.930 --> 00:05:30.324
Now, the first time
beforeUpdate gets called,

80
00:05:30.324 --> 00:05:34.940
the div might not have been
rendered to the DOM yet.

81
00:05:37.190 --> 00:05:42.101
So we're getting a reference to
the development using something

82
00:05:42.101 --> 00:05:46.664
called bind this which we'll
discover in a later exercise.

83
00:05:46.664 --> 00:05:52.969
For now,
just pretend that this makes sense.

84
00:05:52.969 --> 00:05:58.400
So if the div has been created,
then we wanna calculate whether or

85
00:05:58.400 --> 00:06:01.480
not we should be in auto scroll mode.

86
00:06:01.480 --> 00:06:06.955
And the way that we're gonna do that
is by figuring out what the distances

87
00:06:06.955 --> 00:06:11.734
between the bottom of the scroll area and
the outer container.

88
00:06:14.506 --> 00:06:16.670
And it took me a few
goes to get this right.

89
00:06:18.940 --> 00:06:21.370
This is the sort of thing
that I struggle with.

90
00:06:21.370 --> 00:06:26.829
So I'm just gonna copy the code
over from the left, const

91
00:06:26.829 --> 00:06:33.442
scrollableDistance=div.scrollHeight-div.o-
ffsetHeight.

92
00:06:37.014 --> 00:06:41.538
And then we're gonna auto scroll
if there's less than 20 pixels

93
00:06:41.538 --> 00:06:45.992
between the bottom of the window and
the bottom of the container.

94
00:06:57.184 --> 00:07:01.375
And then once we've updated the DOM, once
the new chat messages have been added to

95
00:07:01.375 --> 00:07:03.574
the window, if we are in auto scroll mode.

96
00:07:08.176 --> 00:07:13.320
Then in that case,
we're gonna call div.scrollTo(0).

97
00:07:13.320 --> 00:07:20.040
And then div.scrollHeight will take
us to the very bottom of the chat.

98
00:07:22.170 --> 00:07:27.519
All right, let's see if that worked.

99
00:07:27.519 --> 00:07:30.757
I don't have a problem.

100
00:07:30.757 --> 00:07:36.229
What is your problem?

101
00:07:36.229 --> 00:07:39.838
And you'll see that it's
auto scrolling nicely.

102
00:07:39.838 --> 00:07:42.815
If, on the other hand,
we were not near the bottom of the chat,

103
00:07:47.735 --> 00:07:49.938
Then auto scroll would be false.

104
00:07:49.938 --> 00:07:52.626
And so when the afterUpdate
function gets invoked,

105
00:07:52.626 --> 00:07:55.448
we're not gonna scroll back
to the bottom of the chat.

106
00:07:59.421 --> 00:08:03.185
All right, you probably won't find
yourself using beforeUpdate and

107
00:08:03.185 --> 00:08:04.787
afterUpdate all that often.

108
00:08:04.787 --> 00:08:10.013
It's really only when you need to interact
with the DOM in this very specific way.

109
00:08:10.013 --> 00:08:11.631
But it's useful when you do need it.

110
00:08:16.054 --> 00:08:21.447
Another lifecycle function that
we're gonna talk about is tick.

111
00:08:21.447 --> 00:08:23.513
Now, onMount, beforeUpdate, and

112
00:08:23.513 --> 00:08:27.654
afterUpdate all have to get called
while the component is initializing.

113
00:08:27.654 --> 00:08:29.697
It doesn't have to be
inside the script tag.

114
00:08:29.697 --> 00:08:32.679
You could be calling out to
a function in another module, but

115
00:08:32.679 --> 00:08:36.131
it does have to get called while
the component is initializing because

116
00:08:36.131 --> 00:08:39.071
that's how the callbacks get
assigned to that component.

117
00:08:39.071 --> 00:08:40.536
Tick is different.

118
00:08:40.536 --> 00:08:42.572
Tick can get called at any point.

119
00:08:42.572 --> 00:08:47.816
And what tick does is it
returns a promise that resolves

120
00:08:47.816 --> 00:08:53.065
when any pending state updates
are applied to the DOM.

121
00:08:53.065 --> 00:08:56.926
The reason this works is that when
you update component state in Svelte,

122
00:08:56.926 --> 00:08:59.153
it doesn't update the DOM immediately.

123
00:08:59.153 --> 00:09:01.313
So when we do count plus equals 1,

124
00:09:01.313 --> 00:09:05.568
it's not updating the text inside
the button right there and then.

125
00:09:05.568 --> 00:09:09.397
It's actually waiting to see if there
are any more state updates that it's

126
00:09:09.397 --> 00:09:11.300
gonna need to apply at the same time.

127
00:09:11.300 --> 00:09:16.141
Because it's more efficient to do
things in a batched way than it is

128
00:09:16.141 --> 00:09:18.136
to do them synchronously.

129
00:09:18.136 --> 00:09:22.973
But that can be tricky if you're
updating state in such a way

130
00:09:22.973 --> 00:09:28.024
that causes the DOM to update in
a way that you need to monitor.

131
00:09:28.024 --> 00:09:33.849
For example, a little bit of a contrived
example but we've got a text area here.

132
00:09:33.849 --> 00:09:39.045
And if I select some text like this,
and I hit the tab key,

133
00:09:39.045 --> 00:09:46.213
then we have a handle keydown function
which is gonna get the selection range.

134
00:09:46.213 --> 00:09:49.489
And it's gonna turn it to shouty case or

135
00:09:49.489 --> 00:09:53.372
quiet case depending on
what it currently is.

136
00:09:53.372 --> 00:09:56.884
And so if I select that and
I hit tab, it's done that.

137
00:09:56.884 --> 00:10:00.164
It's turned that text into uppercase text,
but

138
00:10:00.164 --> 00:10:05.451
it's also moved my cursor to the end of
the text area, which is not what I want.

139
00:10:05.451 --> 00:10:08.692
I want the selection to stay in place.

140
00:10:08.692 --> 00:10:11.538
And I have some code here
that should be doing that.

141
00:10:11.538 --> 00:10:14.448
It's resetting the selection start and
the selection end.

142
00:10:14.448 --> 00:10:18.653
But it's not having any effect
because the DOM hasn't updated yet.

143
00:10:18.653 --> 00:10:22.651
We're waiting to see if there are any
other status updates that we need to take

144
00:10:22.651 --> 00:10:23.401
accounts of.

145
00:10:23.401 --> 00:10:29.687
So we can fix this by importing
the tick helper from Svelte.

146
00:10:33.585 --> 00:10:38.029
And then immediately before we call
this .selectionStart = selectionStart,

147
00:10:38.029 --> 00:10:40.002
we're just gonna await that tick.

148
00:10:46.249 --> 00:10:48.988
And so now if we select some text and
we hit tab,

149
00:10:48.988 --> 00:10:52.370
it will uppercase it but
it will preserve the selection.

150
00:10:52.370 --> 00:10:55.418
If I hit it again, it will lowercase it.

151
00:10:55.418 --> 00:10:58.981
Again, this isn't a function
that you will use a whole lot.

152
00:10:58.981 --> 00:11:01.125
In the same way that beforeUpdate and

153
00:11:01.125 --> 00:11:05.481
afterUpdate are really kind of escape
hatches, tick is an escape hatch for

154
00:11:05.481 --> 00:11:08.330
when you need to interact
with the DOM manually.

