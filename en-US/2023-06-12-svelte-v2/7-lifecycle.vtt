WEBVTT

1
00:00:00.270 --> 00:00:03.863
All right, so the first thing that we're
gonna do is we're just gonna get rid of

2
00:00:03.863 --> 00:00:05.110
this placeholder markup.

3
00:00:05.110 --> 00:00:05.900
We don't need that anymore.

4
00:00:07.500 --> 00:00:08.950
Now looking at a blank page.

5
00:00:10.460 --> 00:00:13.138
And we wanna create a game component,

6
00:00:13.138 --> 00:00:16.910
which is where the bulk of
our logic is going to live.

7
00:00:16.910 --> 00:00:22.228
So in the File Explorer, I'm gonna
create a component alongside here,

8
00:00:22.228 --> 00:00:24.329
just call it Game.svelte.

9
00:00:27.827 --> 00:00:30.743
And then inside the page.svelte component,

10
00:00:30.743 --> 00:00:36.130
I'm gonna start typing the word game,
and it's gonna auto import that for me.

11
00:00:36.130 --> 00:00:37.319
Just hit Enter.

12
00:00:37.319 --> 00:00:43.448
You can see that it is added
the import declaration and everything.

13
00:00:44.786 --> 00:00:52.249
And so now we can start building the game
inside our Game.svelte component.

14
00:00:56.349 --> 00:01:01.060
Now, there's a lot of ways that you can
go about building something like this.

15
00:01:01.060 --> 00:01:05.811
The way that I tend to like to do things
is build out a very rough user interface

16
00:01:05.811 --> 00:01:08.870
so that have a sense of
what things can look like.

17
00:01:08.870 --> 00:01:13.826
And then we can start adding the game
logic once we have the basic UI in place,

18
00:01:13.826 --> 00:01:16.550
and then finally we'll add some polish.

19
00:01:18.310 --> 00:01:20.140
So I'm gonna create div class equals game.

20
00:01:23.377 --> 00:01:31.017
And inside there, let me bring up
the game so that we can see it.

21
00:01:31.017 --> 00:01:33.876
We have a grid in the center
of the screen, and

22
00:01:33.876 --> 00:01:35.921
we have two blocks either side.

23
00:01:39.225 --> 00:01:44.247
So we have a block of content at the
bottom where the pairs that we've found

24
00:01:44.247 --> 00:01:49.431
go, and we have a block of content at
the top where the countdown timer goes,

25
00:01:49.431 --> 00:01:53.009
and then the big chunk in
the middle is the game grid.

26
00:01:53.009 --> 00:01:56.215
So I'm gonna begin by roughing that out.

27
00:01:56.215 --> 00:02:02.989
We'll call the bits at the top and
the bottom class equals, let's say info.

28
00:02:05.451 --> 00:02:06.407
Duplicate that.

29
00:02:06.407 --> 00:02:11.614
And then in the middle,
we're gonna have our grid container.

30
00:02:19.871 --> 00:02:21.183
And then in the same component,

31
00:02:21.183 --> 00:02:24.349
we'll have some styles that control
the placement of all of these elements.

32
00:02:29.902 --> 00:02:34.932
So to get that layout where
everything is centered and

33
00:02:34.932 --> 00:02:40.088
aligned, it's very convenient
to use a flex layout.

34
00:02:40.088 --> 00:02:41.521
I'm gonna use display: flex.

35
00:02:45.389 --> 00:02:50.115
And we're gonna give it a flex-direction
of column, which means that

36
00:02:50.115 --> 00:02:54.997
the first element will be at the top,
followed by the container below it,

37
00:02:54.997 --> 00:03:00.418
as opposed to it on the right-hand side,
followed by the final info block.

38
00:03:00.418 --> 00:03:05.424
We'll give it a justify content of center,

39
00:03:05.424 --> 00:03:09.089
and an align-items of center.

40
00:03:17.379 --> 00:03:21.499
Something that I'll often do when
I'm roughing out a UI is I will give

41
00:03:21.499 --> 00:03:25.265
the elements that I'm working
with an ugly background color so

42
00:03:25.265 --> 00:03:28.768
that I can see what space
they're taking up on the screen.

43
00:03:28.768 --> 00:03:34.130
So for the info elements, we're gonna
give it a, let's say a width of 80vmin.

44
00:03:34.130 --> 00:03:38.611
If you haven't seen vmin before,
it is the minimum of either vw,

45
00:03:38.611 --> 00:03:42.602
which is the width of the screen
divided by 100, or vh,

46
00:03:42.602 --> 00:03:46.200
which is the height of
the screen divided by 100.

47
00:03:46.200 --> 00:03:51.071
And it's what allows us to have a user
interface that will scale down and

48
00:03:51.071 --> 00:03:56.994
always fit inside the screen, whether it's
on a desktop in a landscape aspect ratio,

49
00:03:56.994 --> 00:03:59.850
or if someone's using it on their phone.

50
00:04:01.330 --> 00:04:08.270
Give it height of, say, 10vmin, like so,
and then a background of, say, purple.

51
00:04:08.270 --> 00:04:14.419
And then the grid container,
that's gonna have,

52
00:04:14.419 --> 00:04:18.810
again, a width of 80vmin.

53
00:04:18.810 --> 00:04:21.390
And the same height because it's a square.

54
00:04:21.390 --> 00:04:24.090
And we'll give that a background of,
let's say, teal.

55
00:04:25.980 --> 00:04:30.615
Okay, so far so good, but
it's not centered vertically, and

56
00:04:30.615 --> 00:04:35.949
that's because we haven't added
the right height to the game element,

57
00:04:35.949 --> 00:04:38.240
so sticker 100% on there.

58
00:04:38.240 --> 00:04:42.028
Still not working, and
that's because we need to

59
00:04:42.028 --> 00:04:46.920
have the 100% applied to
the elements that contain this.

60
00:04:46.920 --> 00:04:51.005
So at this point, I'm gonna pause and
come out of Svelte and

61
00:04:51.005 --> 00:04:52.810
add a global style sheet.

62
00:04:55.959 --> 00:05:00.624
Inside my source directory,
I'm gonna add styles.css.

63
00:05:05.293 --> 00:05:09.469
And you could do all this with component
styles using the global modifier or

64
00:05:09.469 --> 00:05:10.510
whatever.

65
00:05:10.510 --> 00:05:15.029
But I find that in just about every
project, I will typically have a bunch of

66
00:05:15.029 --> 00:05:19.840
styles related to things like typography
and colors, CSS custom properties,

67
00:05:19.840 --> 00:05:23.920
things like that,
that are shared by everything on the page.

68
00:05:23.920 --> 00:05:27.140
And so it's convenient to have
a place to put all of that stuff.

69
00:05:27.140 --> 00:05:31.740
So I'll often have a source/styles.css or
something like that.

70
00:05:31.740 --> 00:05:36.728
In here, I'm gonna add the piece of
CSS that has saved me the most time

71
00:05:36.728 --> 00:05:41.372
in all the time I've been writing CSS,
which is every element by

72
00:05:41.372 --> 00:05:46.457
default has a position of relative and
a box-sizing of border-box.

73
00:05:48.111 --> 00:05:53.454
And then the thing that we
came here to do is to add,

74
00:05:53.454 --> 00:06:00.478
on the HTML element and on the body,
we want a height of 100%.

75
00:06:00.478 --> 00:06:03.578
And we also wanna get rid of
the margin because otherwise,

76
00:06:03.578 --> 00:06:06.309
that's gonna mess with
our height measurements.

77
00:06:10.034 --> 00:06:13.256
Last thing we need to do, of course,
is import the styles into our app,

78
00:06:13.256 --> 00:06:15.180
otherwise, they'll have no effect.

79
00:06:15.180 --> 00:06:18.090
So inside page.svelte,

80
00:06:18.090 --> 00:06:23.130
I'm gonna do import../styles.css.

81
00:06:23.130 --> 00:06:26.225
Obviously, you can't normally
do this in a JavaScript module,

82
00:06:26.225 --> 00:06:27.810
we are using a Vite feature here.

83
00:06:27.810 --> 00:06:32.650
The fact that you can import CSS is
something that Vite brings to the table.

84
00:06:33.940 --> 00:06:38.001
During development, it will extract
all of the important CSS, minify it,

85
00:06:38.001 --> 00:06:42.253
optimize it, and then spit it out into a
separate bundle of CSS that can be cached

86
00:06:42.253 --> 00:06:46.350
immutably so that it's really good for
the performance, and so on.

87
00:06:46.350 --> 00:06:51.130
And just authoring wise, it's very simple
to be able to add an import like this.

88
00:06:51.130 --> 00:06:54.120
So even though it's kind of non-standard,
very cool.

89
00:06:54.120 --> 00:06:58.479
All right, now our global CSS
is being applied to the page and

90
00:06:58.479 --> 00:07:01.572
we can see the grid is now centered, nice.

