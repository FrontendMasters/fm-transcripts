WEBVTT

1
00:00:00.130 --> 00:00:03.460
Now we're gonna move on to some of
the fun stuff that makes Svelte really

2
00:00:03.460 --> 00:00:04.360
enjoyable to use.

3
00:00:06.150 --> 00:00:09.602
At the heart of Svelte is
a powerful system of reactivity for

4
00:00:09.602 --> 00:00:13.710
keeping the DOM in sync with
your application state.

5
00:00:13.710 --> 00:00:16.838
So when the user interacts with your
application, the state will change.

6
00:00:16.838 --> 00:00:19.420
We want the view of that
state to change in response.

7
00:00:21.342 --> 00:00:24.810
So we haven't learned about event
handlers just yet, but we will soon.

8
00:00:24.810 --> 00:00:29.750
For now, I just want you to add
the on:click = increment code

9
00:00:29.750 --> 00:00:32.227
to the button in App.svelte.

10
00:00:36.285 --> 00:00:40.214
And what that's telling us is
that when we click this button,

11
00:00:40.214 --> 00:00:42.719
it will call this increment function.

12
00:00:42.719 --> 00:00:45.682
But we haven't done anything inside
the increment function yet, so

13
00:00:45.682 --> 00:00:46.840
we need to wire that up.

14
00:00:46.840 --> 00:00:50.090
Inside here,
we're gonna change the value of count.

15
00:00:50.090 --> 00:00:54.672
And the way that we're gonna do
that is just by assigning to it.

16
00:00:54.672 --> 00:00:56.067
We're not using an API for this.

17
00:00:56.067 --> 00:00:59.004
We're not using a set state or
something like that.

18
00:00:59.004 --> 00:01:01.145
We're just assigning to the variable.

19
00:01:01.145 --> 00:01:04.980
And the compiler can see that and it'll
instrument your code in such a way that

20
00:01:04.980 --> 00:01:08.176
says, we need to re-render
specific parts of this component.

21
00:01:08.176 --> 00:01:10.060
And it will do it as
efficiently as it can.

22
00:01:11.080 --> 00:01:15.676
And so now when we click this button,
you'll see that the number does, in fact,

23
00:01:15.676 --> 00:01:16.430
increment.

24
00:01:17.850 --> 00:01:21.533
&gt;&gt; Someone's saying they love
the new Vim key bindings.

25
00:01:21.533 --> 00:01:25.253
&gt;&gt; [LAUGH]
&gt;&gt; Question mark vim=true.

26
00:01:25.253 --> 00:01:27.493
&gt;&gt; Yeah, okay, so a little aside,

27
00:01:27.493 --> 00:01:31.505
you can use Vim mode in this
tutorial if you're a Vim fiend.

28
00:01:31.505 --> 00:01:37.158
All you need to do is add
vim=true in the URL bar.

29
00:01:39.483 --> 00:01:45.990
And now, when you select things in
the editor, you're in Vim mode.

30
00:01:45.990 --> 00:01:50.607
So I can replace this,
I think I have to do with cw clicks,

31
00:01:50.607 --> 00:01:56.170
or something like that,
then I can replace the entire word.

32
00:01:56.170 --> 00:01:57.032
I don't know Vim.

33
00:01:57.032 --> 00:02:03.106
If you wanna learn Vim, Frontend Masters
has a great course with ThePrimeagen.

34
00:02:03.106 --> 00:02:05.010
I recommend that, but I'm not a Vim guy.

35
00:02:05.010 --> 00:02:07.790
So I'm gonna go back to
the safety of vim=false.

36
00:02:07.790 --> 00:02:11.167
It will remember your setting.

37
00:02:11.167 --> 00:02:12.234
You don't need to add
the query string each time.

38
00:02:14.520 --> 00:02:17.460
And now we can move on to
reactive declarations.

39
00:02:18.680 --> 00:02:22.003
Okay, so we've seen that if you
reference a reactive variable like

40
00:02:22.003 --> 00:02:24.790
count directly in your markup,
it will update.

41
00:02:24.790 --> 00:02:28.973
But there are oftentimes when you're
building user interfaces that you will

42
00:02:28.973 --> 00:02:31.882
have something that depends
on a reactive variable.

43
00:02:31.882 --> 00:02:36.992
So for example, you might wanna
track the doubled value of count.

44
00:02:36.992 --> 00:02:40.325
And in Svelte, we have a concept
called reactive declarations, and

45
00:02:40.325 --> 00:02:41.770
they look a little bit funny.

46
00:02:41.770 --> 00:02:46.756
They look like this, $: doubled = count.

47
00:02:50.575 --> 00:02:55.270
Now, there's a callout here that
says this might look a little alien.

48
00:02:55.270 --> 00:02:56.850
This is, in fact, valid JavaScript.

49
00:02:56.850 --> 00:03:00.880
That dollar is a syntactical
construct called a label.

50
00:03:00.880 --> 00:03:03.753
And it's something that you use when
you're using for loops and while loops.

51
00:03:03.753 --> 00:03:07.273
It allows you to break out to
a specific part of your code.

52
00:03:07.273 --> 00:03:10.428
It's not useful in most
parts of your code.

53
00:03:10.428 --> 00:03:12.322
It's only useful when you're
dealing with for loops.

54
00:03:12.322 --> 00:03:15.584
And so
it's kinda like a free piece of syntax.

55
00:03:15.584 --> 00:03:17.170
It's just lying around without much to do.

56
00:03:17.170 --> 00:03:20.900
So on the Svelte team, we said,
well, why don't we co-op this?

57
00:03:20.900 --> 00:03:25.737
Why don't we use this to declare a value
that reactively updates when anything that

58
00:03:25.737 --> 00:03:27.590
it depends on changes?

59
00:03:27.590 --> 00:03:31.860
So what happens here is the compiler
looks at that statement, doubled = count.

60
00:03:31.860 --> 00:03:35.249
So I need to add the times 2,
otherwise, it's not much use.

61
00:03:35.249 --> 00:03:40.140
And it sees that the value of doubled
now depends on the value of count.

62
00:03:40.140 --> 00:03:45.390
So whenever the value of count updates,
the value of doubled will also update.

63
00:03:45.390 --> 00:03:49.490
So we can now use that inside markup.

64
00:03:49.490 --> 00:03:54.344
After the button, we'll add a new element,

65
00:03:54.344 --> 00:04:00.369
a paragraph, and
we'll say count doubled is doubled.

66
00:04:00.369 --> 00:04:01.940
Now, if you click the button,

67
00:04:01.940 --> 00:04:05.154
does anyone wanna take a wild
guess as to what's gonna happen?

68
00:04:05.154 --> 00:04:07.560
1 doubled is 2, 2 doubled is 4, and so on.

69
00:04:10.773 --> 00:04:15.822
Now you could, of course,
just write count * 2 here because

70
00:04:15.822 --> 00:04:20.885
you can use arbitrary JavaScript
inside these expressions.

71
00:04:20.885 --> 00:04:25.657
But you might find there are cases where
you are using that value in multiple

72
00:04:25.657 --> 00:04:30.443
places or you need to have other things
that depend on the value of doubled.

73
00:04:30.443 --> 00:04:33.422
And so reactive statements
are valuable in that context.

74
00:04:37.222 --> 00:04:40.527
And we're not just limited to having
values that update reactively.

75
00:04:40.527 --> 00:04:44.481
We can also have statements
that run reactively.

76
00:04:44.481 --> 00:04:48.801
As an example, if I console.log,

77
00:04:48.801 --> 00:04:52.693
the count is the value of count.

78
00:04:55.440 --> 00:04:59.263
If I open this in a new tab and
open the console,

79
00:04:59.263 --> 00:05:03.479
get rid of all the junk that appears,
click this and

80
00:05:03.479 --> 00:05:09.974
you'll see that it is logging the value
of count every time I click the button.

81
00:05:09.974 --> 00:05:14.992
And you can group statements
together using a JavaScript block.

82
00:05:19.519 --> 00:05:23.480
We can add some more text here.

83
00:05:23.480 --> 00:05:30.900
This will also be logged
whenever count changes.

84
00:05:30.900 --> 00:05:32.870
Right, and this now forms a group.

85
00:05:34.550 --> 00:05:36.550
Again, we'll open the console,
clear it out.

86
00:05:38.130 --> 00:05:41.962
And it's executing the entire block of
code whenever anything that's referenced

87
00:05:41.962 --> 00:05:44.268
inside that block of code
is reactively updated.

88
00:05:47.674 --> 00:05:54.460
Okay, so you can even use the dollar
label with things like if blocks.

89
00:05:54.460 --> 00:06:00.654
You can say that if the count is too
large, say, it's larger than 10,

90
00:06:04.019 --> 00:06:10.545
It'll reset it, but we'll also say,
That the count is dangerously high.

91
00:06:12.480 --> 00:06:16.524
Now if we click this enough times,
we'll get an alert,

92
00:06:16.524 --> 00:06:20.494
warning is that we're clicking
the button too often.

93
00:06:23.620 --> 00:06:28.178
So far, we've been dealing with
updating simple values like numbers.

94
00:06:28.178 --> 00:06:32.812
But because Svelte's reactivity is
triggered by assignments, in other words,

95
00:06:32.812 --> 00:06:37.255
the compiler is looking for you saying
count plus equals 1 or count equals 0.

96
00:06:37.255 --> 00:06:43.065
Using array methods like push and splice
will not automatically cause updates.

97
00:06:43.065 --> 00:06:47.757
So here we have an application where
clicking this button will cause

98
00:06:47.757 --> 00:06:50.075
this addNumber function to run.

99
00:06:50.075 --> 00:06:54.584
And we're pushing a number to
the array using numbers.push.

100
00:06:56.430 --> 00:06:59.632
Now, the compiler doesn't know that
it's supposed to do anything after that,

101
00:06:59.632 --> 00:07:03.420
cuz it doesn't actually know what
numbers is it, could be anything.

102
00:07:03.420 --> 00:07:08.149
And so we need to tell the compiler that
anything that depends on numbers is now

103
00:07:08.149 --> 00:07:10.350
out of date and needs to be updated.

104
00:07:11.760 --> 00:07:15.246
So one way to fix that would be
to add an assignment that would

105
00:07:15.246 --> 00:07:16.726
normally be redundant.

106
00:07:16.726 --> 00:07:21.066
We'll do numbers = numbers.

107
00:07:21.066 --> 00:07:25.621
And now when we click the button,
the compiler knows what's supposed to

108
00:07:25.621 --> 00:07:29.055
happen and it will start adding
things in that array and

109
00:07:29.055 --> 00:07:31.981
rendering the markup
correctly when we do so.

110
00:07:31.981 --> 00:07:34.010
Obviously, that's a little bit weird.

111
00:07:34.010 --> 00:07:37.700
Assigning a value to itself is
not very idiomatic JavaScript.

112
00:07:37.700 --> 00:07:41.905
It's totally fine, but if you prefer
to do something that is more idiomatic,

113
00:07:41.905 --> 00:07:44.850
then you can use an immutable
data structure instead.

114
00:07:44.850 --> 00:07:48.671
You can copy the array and
then append the new value to it instead.

115
00:07:48.671 --> 00:07:52.712
So what that would look like is
get rid of the numbers.push and

116
00:07:52.712 --> 00:07:56.921
the numbers = numbers, and
we'll instead assign to numbers.

117
00:07:56.921 --> 00:08:01.318
First, copy it using spread syntax.

118
00:08:01.318 --> 00:08:06.429
And then we'll add,
The value at the end, like so.

119
00:08:09.341 --> 00:08:10.724
And this works as before.

120
00:08:10.724 --> 00:08:14.630
The difference is that we're now
generating a whole new array every time we

121
00:08:14.630 --> 00:08:15.687
press this button.

122
00:08:18.160 --> 00:08:20.960
Now this can be good or bad,
depending on what you're trying to do.

123
00:08:20.960 --> 00:08:23.150
Working with immutable
data has some benefits.

124
00:08:23.150 --> 00:08:27.492
It means that you're not gonna run into
problems where two things are mutating

125
00:08:27.492 --> 00:08:29.349
the same object at the same time.

126
00:08:29.349 --> 00:08:32.297
And one of them isn't expecting
the other one to mutate it, and

127
00:08:32.297 --> 00:08:35.520
mutation is at the heart of
a lot of bugs in programming.

128
00:08:35.520 --> 00:08:38.770
But immutable objects are more expensive.

129
00:08:38.770 --> 00:08:44.402
If you're creating a new array every time,
then you're allocating more memory.

130
00:08:44.402 --> 00:08:47.857
And it's not gonna be a problem
in a simple case like this, but

131
00:08:47.857 --> 00:08:52.300
copying arrays is generally going
to be slower than mutating them.

132
00:08:52.300 --> 00:08:53.410
So Svelte lets you do both.

133
00:08:53.410 --> 00:08:56.463
It lets you pick the approach that makes
sense in the context of your application.

134
00:08:56.463 --> 00:09:01.020
It's not gonna enforce that you use
immutable data like some frameworks.

135
00:09:04.027 --> 00:09:09.230
We can also assign directly to
properties of arrays and objects.

136
00:09:09.230 --> 00:09:14.300
So obj.foo plus equals 1 or
array[i] equals x.

137
00:09:14.300 --> 00:09:18.540
Those will work the same way as
assigning to the values themselves.

138
00:09:18.540 --> 00:09:25.828
So another way that we could solve this
problem, this is gonna mutate the array,

139
00:09:25.828 --> 00:09:32.707
but also using an assignment is
numbers.length = numbers.length + 1.

140
00:09:32.707 --> 00:09:35.374
And again, it works correctly.

