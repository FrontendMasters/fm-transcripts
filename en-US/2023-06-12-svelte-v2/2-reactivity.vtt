WEBVTT

1
00:00:00.000 --> 00:00:05.570
So we're going to be spending most of
the day on this website, learn.svelte.dev.

2
00:00:05.570 --> 00:00:10.206
This is our interactive tutorial platform,
we've been working on it for

3
00:00:10.206 --> 00:00:13.590
about a year, and
this week it is finally done.

4
00:00:13.590 --> 00:00:16.797
I'm so excited to start
sharing this with people, and

5
00:00:16.797 --> 00:00:21.250
recommending that people learn
Svelte on learn.svelte.dev.

6
00:00:21.250 --> 00:00:24.870
There's a lot of fairly cutting edge
technology inside this website.

7
00:00:24.870 --> 00:00:28.910
In fact, it is so cutting edge that
it does not run on Safari, just yet.

8
00:00:28.910 --> 00:00:35.060
It will do, Safari 16.4 will add the
necessary API's for this website to work.

9
00:00:35.060 --> 00:00:39.676
But for now, I recommend that you
open this website in Firefox or

10
00:00:39.676 --> 00:00:42.427
Chrome, if you want to follow along.

11
00:00:42.427 --> 00:00:44.611
So, quick orientation,

12
00:00:44.611 --> 00:00:50.579
on the left we have the text that is
gonna walk us through each exercise.

13
00:00:50.579 --> 00:00:52.584
We also have a menu up here,

14
00:00:52.584 --> 00:00:56.610
if you open that you can see
all of the different parts.

15
00:00:56.610 --> 00:00:58.385
Part 1 basics felt, part 2 advanced felt,

16
00:00:58.385 --> 00:01:00.451
that's what we're gonna
be doing in this session.

17
00:01:00.451 --> 00:01:05.595
And then in the next session when we cover
Sveltetkit, we'll cover parts 3 and 4.

18
00:01:05.595 --> 00:01:08.930
On the right hand side,
we have a file tree.

19
00:01:08.930 --> 00:01:13.017
In some exercises, you'll be able to edit
file names and add new files, but for

20
00:01:13.017 --> 00:01:15.680
most of the time,
what you see is what you get.

21
00:01:15.680 --> 00:01:18.740
To the right of that,
we have a code editor.

22
00:01:18.740 --> 00:01:22.549
You can edit text in here, and
it will be reflected in the iframe below,

23
00:01:22.549 --> 00:01:25.740
which is showing the output
of building this application.

24
00:01:26.870 --> 00:01:30.350
You'll see that we have a little
reload icon above the iframe.

25
00:01:30.350 --> 00:01:33.732
It is possible to get your application
into a broken state, in which case, just

26
00:01:33.732 --> 00:01:37.890
hit the refresh button, and it will act
as though your browser had been reloaded.

27
00:01:37.890 --> 00:01:41.709
You also have a URL bar to show where
we are in the app at the moment,

28
00:01:41.709 --> 00:01:45.130
we have an open in new tab button
to the right of the URL bar.

29
00:01:47.030 --> 00:01:52.100
And finally, we have a toggle for
the terminal.

30
00:01:52.100 --> 00:01:54.780
Most of the time you won't need this but
in some of the later exercises,

31
00:01:54.780 --> 00:01:55.897
particularly in SvelteKit,

32
00:01:55.897 --> 00:01:59.130
it'll be useful to be able to see what's
happening inside your development server.

33
00:02:03.090 --> 00:02:06.485
Finally, we have this grey solve button,
is greyed out on this

34
00:02:06.485 --> 00:02:10.540
exercise because there's nothing
to do this is all just exposition.

35
00:02:10.540 --> 00:02:13.434
But on the next exercise,
you'll see it turn orange, and

36
00:02:13.434 --> 00:02:16.930
you will be tempted to press it,
I urge you to resist that temptation.

37
00:02:18.200 --> 00:02:23.330
To learn this, it's better if you follow
the exercise and typing the code yourself.

38
00:02:23.330 --> 00:02:27.008
You will still learn things if you
hit the solve button and cheat, but

39
00:02:27.008 --> 00:02:28.543
you won't learn it as well.

40
00:02:28.543 --> 00:02:31.778
It's kind of like the difference between,
walking around a city and

41
00:02:31.778 --> 00:02:33.020
driving around the city.

42
00:02:33.020 --> 00:02:36.712
If you walk if you do the effort yourself,
then you will develop a much richer mental

43
00:02:36.712 --> 00:02:39.107
map and you will understand
the content a lot better.

44
00:02:39.107 --> 00:02:41.796
So, consider the solve button
a last resort if you get stuck and

45
00:02:41.796 --> 00:02:45.298
you feel like you're falling behind, you
can hit solve to see what the exercise is

46
00:02:45.298 --> 00:02:48.682
supposed to look like, but try and
complete the exercise without doing that.

47
00:02:50.674 --> 00:02:53.284
Okay, so what is Svelte?

48
00:02:53.284 --> 00:02:55.791
Svelte is a tool for
building web applications.

49
00:02:55.791 --> 00:02:59.427
It falls into the category of
user interface frameworks.

50
00:02:59.427 --> 00:03:01.671
And UI frameworks, all essentially,

51
00:03:01.671 --> 00:03:06.023
are involved in the task of making apps
easier to build by taking the code that

52
00:03:06.023 --> 00:03:10.181
you would have to write to update
the DOM in a manual imperative fashion.

53
00:03:10.181 --> 00:03:13.880
And allowing you to write it in
a declarative state-driven fashion.

54
00:03:13.880 --> 00:03:17.800
This tends to result in much more
maintainable and understandable code.

55
00:03:19.600 --> 00:03:22.891
So it allows you to build your app
declaratively out of components that

56
00:03:22.891 --> 00:03:26.628
combine markups, styles, and behaviors
into a single atomic unit that you can

57
00:03:26.628 --> 00:03:29.340
then compose together to
build something more complex.

58
00:03:30.600 --> 00:03:35.224
So, it's similar to things like React and
Vue, if you've used frameworks like those,

59
00:03:35.224 --> 00:03:37.200
but it has one key difference.

60
00:03:37.200 --> 00:03:41.110
It leans into the idea that a compiler
can take the code that you wrote and

61
00:03:41.110 --> 00:03:43.080
turn it into some other code.

62
00:03:43.080 --> 00:03:45.070
So, Svelte is also a language.

63
00:03:45.070 --> 00:03:48.410
It's a language that goes into
the compiler, and then JavaScript,

64
00:03:48.410 --> 00:03:51.652
highly optimized vanilla JavaScript,
comes out the other side.

65
00:03:51.652 --> 00:03:54.349
You can build your entire
application with Svelte,

66
00:03:54.349 --> 00:03:58.650
you can use an application like spelt kit,
which we're going to talk about later.

67
00:03:58.650 --> 00:04:01.906
Or you can add it incrementally to
an existing code base if you have one

68
00:04:01.906 --> 00:04:03.240
of those.

69
00:04:03.240 --> 00:04:08.150
And you can also build components and then
publish into NPM for other people to use.

70
00:04:10.660 --> 00:04:13.854
Okay, this part we've covered,
so I'm going to skip to the end.

71
00:04:13.854 --> 00:04:16.278
And we'll begin with our first component.

72
00:04:16.278 --> 00:04:19.660
So as I explained in Svelte,
an application is composed of one or

73
00:04:19.660 --> 00:04:20.671
more components.

74
00:04:20.671 --> 00:04:24.784
Which is a reusable self contained block
of code that encapsulates HTML, CSS, and

75
00:04:24.784 --> 00:04:26.960
JavaScript that belong together.

76
00:04:26.960 --> 00:04:30.423
Ran into a .svelte file not a .js file,
we have our own file format,

77
00:04:30.423 --> 00:04:32.880
because we're using our own language.

78
00:04:32.880 --> 00:04:37.012
So, app.svelte on the right here,
this is a svelte component, and

79
00:04:37.012 --> 00:04:39.876
this is the contents,
just an h1 hello world.

80
00:04:39.876 --> 00:04:45.344
You'll notice that that is just HTML, and
that's an important fact about Svelte.

81
00:04:45.344 --> 00:04:47.550
HTML is also valid Svelte.

82
00:04:47.550 --> 00:04:50.570
So if you see some user interface on
a website that you're looking at,

83
00:04:50.570 --> 00:04:54.067
you can go into DevTools, you can grab
that HTML, and the styles that affect it.

84
00:04:54.067 --> 00:04:56.590
You can put it into a Svelte component,
and it will work.

85
00:04:56.590 --> 00:04:59.804
Same deal if you see some HTML on Stack
Overflow, or CodePen, or a thing like

86
00:04:59.804 --> 00:05:03.910
that, you can just drop it into your
Svelte component, and it will work.

87
00:05:03.910 --> 00:05:07.711
Obviously, this isn't very interesting,
just having a static component like this

88
00:05:07.711 --> 00:05:10.100
that doesn't do anything,
so let's add some data.

89
00:05:11.280 --> 00:05:16.525
First, we will begin by adding
a script tag to the top of the file.

90
00:05:16.525 --> 00:05:20.098
Now, if you're lazy like me, your first
instinct will be to say, well, okay,

91
00:05:20.098 --> 00:05:22.004
I'm just gonna select that, and copy it.

92
00:05:22.004 --> 00:05:26.066
And if you do, you will see that copy and
paste is actually disabled.

93
00:05:26.066 --> 00:05:30.256
For the same reason that we discourage
you from pressing the solve button,

94
00:05:30.256 --> 00:05:34.062
Wwe encourage you to type out the text
that is asking you to type out.

95
00:05:34.062 --> 00:05:38.533
You will learn a lot better that way you
will develop the right muscle memory, and

96
00:05:38.533 --> 00:05:40.660
you will notice things along the way.

97
00:05:40.660 --> 00:05:45.912
So, I do encourage you as far
as possible to type the code out

98
00:05:45.912 --> 00:05:51.182
although of course you can
disable it if you really need to.

99
00:05:51.182 --> 00:05:55.932
So let's do that, let's add a script
tag to the toxic component.

100
00:05:55.932 --> 00:06:00.597
And we'll add a variable, call it name,
give it a value of spelt.

101
00:06:00.597 --> 00:06:02.905
And now, inside our component,

102
00:06:02.905 --> 00:06:07.590
we can refer to that name just
by enclosing it in curly braces.

103
00:06:07.590 --> 00:06:09.466
If you've used react,
this should be familiar,

104
00:06:09.466 --> 00:06:10.770
this is basically the same as JSX.

105
00:06:12.740 --> 00:06:17.597
Now, inside that expression,
we can use any JavaScript we like, so

106
00:06:17.597 --> 00:06:22.370
we can, for example,
call to uppercase, like that.

107
00:06:22.370 --> 00:06:24.220
And it goes from Hello Svelte E
to Hello SVELTE.

108
00:06:26.840 --> 00:06:29.590
And we can do the same
with our attributes.

109
00:06:30.730 --> 00:06:33.335
Same way that we can have
text inside components,

110
00:06:33.335 --> 00:06:35.889
we can have dynamic
attributes in our elements.

111
00:06:35.889 --> 00:06:40.290
This image is currently
missing a source attribute.

112
00:06:40.290 --> 00:06:44.165
So, let's add one there, source equals,

113
00:06:44.165 --> 00:06:48.160
this is Rick Roll everyone who's watching.

114
00:06:49.670 --> 00:06:52.856
And this is all good, but
if you hover over this image,

115
00:06:52.856 --> 00:06:55.510
you will notice something is wrong.

116
00:06:55.510 --> 00:06:58.160
It's telling us that the image
should have an alt attribute.

117
00:06:59.230 --> 00:07:01.818
This is because not everyone
can see those images.

118
00:07:01.818 --> 00:07:04.900
In some cases,
because people have impaired vision.

119
00:07:04.900 --> 00:07:07.510
In some cases,
it's because they have rubbish internet.

120
00:07:07.510 --> 00:07:09.740
And they haven't downloaded the image yet.

121
00:07:09.740 --> 00:07:12.662
So, it's very important that when
we're building web apps, we do so

122
00:07:12.662 --> 00:07:15.590
in a way that is accessible to
the largest number of people.

123
00:07:15.590 --> 00:07:20.151
Svelte will help you do that by telling
you when you make accessibility

124
00:07:20.151 --> 00:07:23.490
mistakes like forgetting
to add an alt attribute.

125
00:07:25.400 --> 00:07:27.855
So, let's add one to this element here.

126
00:07:30.481 --> 00:07:35.370
It should be a description of what
is happening inside the image.

127
00:07:35.370 --> 00:07:38.508
And you'll notice that when you add that,
that warning disappears,

128
00:07:38.508 --> 00:07:39.740
the compiler is now happy.

129
00:07:39.740 --> 00:07:44.416
And of course, we can,
if we want, make that dynamic.

130
00:07:44.416 --> 00:07:51.820
The name is Rick.

131
00:07:51.820 --> 00:07:57.318
Astley, and we'll replace that
in the alt attribute, like so.

132
00:08:03.155 --> 00:08:06.744
Finally, one thing that
the Svelte does is,

133
00:08:06.744 --> 00:08:12.694
it allows you to use shorthand attributes
when the name of the attribute and

134
00:08:12.694 --> 00:08:16.670
the value of the attribute
happened to go inside.

135
00:08:16.670 --> 00:08:20.970
So here you can see that source equals
source, well, that's duplicative.

136
00:08:20.970 --> 00:08:26.082
So we can just replace that with source,
like that,

137
00:08:26.082 --> 00:08:30.390
just a little quality of life enhancement.

138
00:08:30.390 --> 00:08:32.828
Now, most of the time when you're
building a user interface,

139
00:08:32.828 --> 00:08:33.938
you will need to add styles.

140
00:08:33.938 --> 00:08:36.821
And in fact, the dirty secret
of UI development is that,

141
00:08:36.821 --> 00:08:41.160
most of your code is probably gonna end up
being CSS, at least that's my experience.

142
00:08:41.160 --> 00:08:44.750
I have some markup, and I have some
JavaScript, and I have a whole lot of CSS.

143
00:08:45.890 --> 00:08:49.312
And so, JavaScript, sorry,
Svelte is not a JavaScript framework,

144
00:08:49.312 --> 00:08:51.030
it is a web framework.

145
00:08:51.030 --> 00:08:55.830
It allows you to keep your styles
alongside your components, and

146
00:08:55.830 --> 00:08:59.620
you can write those into a style tag,
like so.

147
00:08:59.620 --> 00:09:05.400
Let's add a p selector, that's gonna
target this paragraph, give it a color.

148
00:09:05.400 --> 00:09:06.550
I'm gonna choose golden rod.

149
00:09:09.138 --> 00:09:15.120
Gonna give it a font family of Comic Sans,
the greatest font.

150
00:09:17.160 --> 00:09:20.830
Get that a full back for
the people who don't have, Comic Sans for

151
00:09:20.830 --> 00:09:26.120
whatever reason, and we'll give it
a slightly bigger font size of 2M's.

152
00:09:26.120 --> 00:09:30.220
And so, now ,we have some styles
that are attached to our component.

153
00:09:30.220 --> 00:09:35.006
Now what's interesting about the styles
here is that they are scoped to this

154
00:09:35.006 --> 00:09:35.840
component.

155
00:09:35.840 --> 00:09:39.205
And what I mean by that is,
even though we've just used a P selector,

156
00:09:39.205 --> 00:09:42.351
we haven't added a special class name,
or anything like that.

157
00:09:42.351 --> 00:09:45.720
It won't affect any other
paragraphs on the page.

158
00:09:45.720 --> 00:09:48.240
It will only affect the elements
inside this component.

159
00:09:48.240 --> 00:09:51.627
And that's useful when we start having
multiple components on the page.

160
00:09:54.380 --> 00:09:57.219
Because it would be impractical to put
your entire application in a single

161
00:09:57.219 --> 00:09:59.090
component, obviously.

162
00:09:59.090 --> 00:10:02.128
Instead, we can import
components from other files, and

163
00:10:02.128 --> 00:10:03.930
we can include them in our markup.

164
00:10:05.010 --> 00:10:07.496
So let's put a script tag
at the top of app.svelte.

165
00:10:10.842 --> 00:10:14.434
And let's import this nested
component inside App.

166
00:10:22.782 --> 00:10:25.468
All right, this is just like importing
any other JavaScript module,

167
00:10:25.468 --> 00:10:27.480
default export is the component.

168
00:10:27.480 --> 00:10:31.685
Once we've done that,
we can include that component inside app.

169
00:10:36.651 --> 00:10:42.798
And so, again, you'll notice that even
though nested.svelte has a p element,

170
00:10:42.798 --> 00:10:49.610
an app.svelte has a P selector, the styles
do not affect the nested component.

171
00:10:49.610 --> 00:10:52.286
That's really good to maintainability.

172
00:10:52.286 --> 00:10:55.571
So quick match to the bottom here,
components names, role is capitalized,

173
00:10:55.571 --> 00:10:57.397
the distinguish them from HTML elements.

174
00:10:57.397 --> 00:11:01.568
So any time you see something like this,
that is an HTML element, anytime you

175
00:11:01.568 --> 00:11:06.017
see angle bracket followed by capital
letter, that is referring to a component.

176
00:11:12.153 --> 00:11:17.400
Very often, you will need to inject
arbitrary HTML into your applications.

177
00:11:18.950 --> 00:11:22.472
And right now, we have some HTML
in this variable string, but

178
00:11:22.472 --> 00:11:27.870
it's just printing it out literally,
which isn't what we want in this case.

179
00:11:27.870 --> 00:11:31.700
We can change that by using
the special HTML tag.

180
00:11:31.700 --> 00:11:37.371
All we need to do is put this HTML
directive at the beginning of the tag,

181
00:11:37.371 --> 00:11:38.149
like so.

182
00:11:38.149 --> 00:11:40.798
And you'll now see that down here,

183
00:11:40.798 --> 00:11:44.520
the strong element is
being rendered correctly.

184
00:11:45.730 --> 00:11:47.030
There is a warning with this.

185
00:11:47.030 --> 00:11:52.417
We are not sanitizing the HTML, you can
only do this with data that you trust.

186
00:11:52.417 --> 00:11:55.761
You do not want to do this with data that
you got from a database unless you have

187
00:11:55.761 --> 00:11:56.806
already sanitized it,

188
00:11:56.806 --> 00:12:00.090
because that will open up your users
to cross-site scripting attacks.

189
00:12:00.090 --> 00:12:01.380
And that is not a thing that we wanna do.

