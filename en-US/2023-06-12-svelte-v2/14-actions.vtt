WEBVTT

1
00:00:00.270 --> 00:00:02.950
All right, let's move on to actions.

2
00:00:02.950 --> 00:00:06.880
Actions are element level
lifecycle functions.

3
00:00:06.880 --> 00:00:10.540
They're really useful for things like
interfacing with third-party libraries.

4
00:00:10.540 --> 00:00:13.799
If you have something that you wanna
use that is not a Svelte component but

5
00:00:13.799 --> 00:00:15.349
it allows you to work with the DOM,

6
00:00:15.349 --> 00:00:18.060
then an action is a great
way of integrating those.

7
00:00:18.060 --> 00:00:21.225
It's useful for things like lazy
loaded images, or tooltips, or

8
00:00:21.225 --> 00:00:23.530
adding custom event handlers.

9
00:00:23.530 --> 00:00:27.310
And in this app here,
you can scribble on the canvas.

10
00:00:27.310 --> 00:00:30.899
If we pick a color,
like orange, close that, and

11
00:00:30.899 --> 00:00:34.170
then draw on the canvas, we can scribble.

12
00:00:34.170 --> 00:00:38.028
But if you open this menu and then cycle
through the options with the tab key,

13
00:00:38.028 --> 00:00:41.480
you'll quickly discover that it's
highlighted the wrong thing.

14
00:00:41.480 --> 00:00:45.060
I wanted to highlight the button, but
instead it highlighted the URL bar.

15
00:00:45.060 --> 00:00:50.140
And that's because at the moment this
modal menu isn't trapping focus.

16
00:00:51.340 --> 00:00:55.010
Trapping keyboard focus is an important
thing to do when we're trying to build

17
00:00:55.010 --> 00:00:59.240
user interfaces that are accessible for
keyboard users as well as mouse users.

18
00:00:59.240 --> 00:01:01.660
And that's the sort of thing
that we can fix with an action.

19
00:01:03.390 --> 00:01:08.601
So over in our actions.js file,
we have a trapFocus function,

20
00:01:08.601 --> 00:01:13.811
and like a transition it receives
a node as its first argument and

21
00:01:13.811 --> 00:01:16.046
lets you apply some logic.

22
00:01:16.046 --> 00:01:20.264
So inside App.svelte we're
gonna go ahead and import that.

23
00:01:31.500 --> 00:01:39.210
And we'll add it to the menu
with use:trapFocus.

24
00:01:42.422 --> 00:01:45.190
All right, let's take a look at
what's happening in this function.

25
00:01:46.840 --> 00:01:51.446
So we begin by storing a reference to
whatever element was previously focused,

26
00:01:51.446 --> 00:01:54.333
we have a little helper
function here that gets all

27
00:01:54.333 --> 00:01:56.895
of the focusable elements inside the node.

28
00:01:56.895 --> 00:02:01.624
And then we have a key down handler
which whenever we press the tab

29
00:02:01.624 --> 00:02:05.841
button we'll cycle through
those focusable elements.

30
00:02:05.841 --> 00:02:07.817
And focus the next one or
the previous one, and

31
00:02:07.817 --> 00:02:10.462
then when we get to the end it
will cycle back to the beginning.

32
00:02:10.462 --> 00:02:15.088
And the first thing that we do
is we focus the first focusable

33
00:02:15.088 --> 00:02:17.132
element inside the menu.

34
00:02:17.132 --> 00:02:18.447
So when we open this and

35
00:02:18.447 --> 00:02:22.883
if I press the tab key you will see that
the orange button is the next focusable

36
00:02:22.883 --> 00:02:26.440
element because it was previously
focusing the red button.

37
00:02:28.000 --> 00:02:30.230
Right now though it doesn't
do anything beyond that.

38
00:02:30.230 --> 00:02:33.193
If we get to the end of the focusable
list and press tab again,

39
00:02:33.193 --> 00:02:36.760
then the focus leaves this menu, and
that's the part that we wanna fix.

40
00:02:38.790 --> 00:02:42.095
So first of all,
we want to add an event listener.

41
00:02:45.686 --> 00:02:48.758
We want to listen for
the keydown event, and

42
00:02:48.758 --> 00:02:51.840
we wanna use that handle
key down function.

43
00:02:53.660 --> 00:02:56.080
And secondly,
this is a recurring theme today,

44
00:02:56.080 --> 00:02:59.690
when we do some setup work we also want
to do some teardown work at the end.

45
00:03:00.750 --> 00:03:04.922
So we're gonna return an object with
a destroy method that will get called

46
00:03:04.922 --> 00:03:07.290
when the element is removed from the DOM.

47
00:03:17.297 --> 00:03:22.163
Okay, and finally we wanna reset
the focus to the element that

48
00:03:22.163 --> 00:03:25.261
was focused before the menu appeared.

49
00:03:29.070 --> 00:03:33.132
Just in case an element wasn't focused for
some reason,

50
00:03:33.132 --> 00:03:39.170
we're gonna use the optional chaining
operator and call its focus method.

51
00:03:39.170 --> 00:03:43.004
So now when we open the menu and
cycle through the options,

52
00:03:43.004 --> 00:03:47.320
it will get to the end and
then it will go back to the start, right?

53
00:03:47.320 --> 00:03:49.940
This is a more accessible menu.

54
00:03:51.350 --> 00:03:56.688
Pick a nice blue color,
close the menu and go nuts.

55
00:03:59.941 --> 00:04:02.267
And just like transitions and

56
00:04:02.267 --> 00:04:06.738
everything else you can add
parameters to your actions.

57
00:04:06.738 --> 00:04:11.707
In this exercise we want to add
a tooltip to the button using a library

58
00:04:11.707 --> 00:04:13.200
called Tippy.js.

59
00:04:14.610 --> 00:04:18.346
So you'll see here that we
already have used tooltip, but

60
00:04:18.346 --> 00:04:24.020
if you hover over the button, you'll see
that the tooltip contains no content.

61
00:04:24.020 --> 00:04:27.770
It might be a little bit hard to see
in dark mode, perhaps if I, just for

62
00:04:27.770 --> 00:04:30.694
the sake of this exercise,
switch over to light mode,

63
00:04:30.694 --> 00:04:34.600
you can see that a tooltip is appearing,
but there's nothing in there.

64
00:04:36.000 --> 00:04:37.590
And that's because we're
not parsing anything in.

65
00:04:39.450 --> 00:04:40.210
Back to dark mode.

66
00:04:42.490 --> 00:04:43.060
Close that window.

67
00:04:44.700 --> 00:04:47.000
So here's our action,
our tooltip function.

68
00:04:48.230 --> 00:04:51.549
We're creating the tooltip using Tippy,

69
00:04:51.549 --> 00:04:56.170
but we need to pass in some options,
let me do that up here.

70
00:04:56.170 --> 00:04:59.190
And then where we call the action,

71
00:05:01.570 --> 00:05:05.452
We'll parse in some content,
and we'll give it a theme,

72
00:05:05.452 --> 00:05:10.540
there's a bunch of themes that you get
with Tippy, material is one of them.

73
00:05:11.980 --> 00:05:13.468
And now if we hover over the button,

74
00:05:13.468 --> 00:05:15.810
you'll see that it's rendering
a tooltip correctly.

75
00:05:17.550 --> 00:05:22.050
Now there is one thing that is not working
with this right now, if we change this,

76
00:05:23.999 --> 00:05:28.049
To some different text,
it won't be reflected in the tooltip, and

77
00:05:28.049 --> 00:05:31.720
that's because we're not
updating the value inside.

78
00:05:31.720 --> 00:05:35.056
And we can fix that by adding
an update method to our action.

79
00:05:43.105 --> 00:05:47.630
Tippy has a setProps method
which takes some options.

80
00:05:48.740 --> 00:05:52.417
And so now if I change the text
back into Frontend Masters,

81
00:05:54.412 --> 00:05:56.947
if I hover over, it appears in the tooltip.

