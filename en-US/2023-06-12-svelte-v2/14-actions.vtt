WEBVTT

1
00:00:00.000 --> 00:00:03.051
We're gonna talk about
DOM events as we saw in

2
00:00:03.051 --> 00:00:06.840
the earlier exercises where
we're clicking a button.

3
00:00:06.840 --> 00:00:11.773
You can listen to any DOM event on
any element, such as a click or

4
00:00:11.773 --> 00:00:16.999
a pointer move or anything else by
using this little on directive.

5
00:00:16.999 --> 00:00:20.735
So here and inside this application,

6
00:00:20.735 --> 00:00:26.349
we have a div that we would like
to add an event handler to.

7
00:00:26.349 --> 00:00:30.996
Do on :pointermove and then we're gonna

8
00:00:30.996 --> 00:00:36.183
reference this handle
move function up here.

9
00:00:40.416 --> 00:00:45.017
Right, and
now if we run the mouse over the iframe,

10
00:00:45.017 --> 00:00:48.874
you'll see that the pointer is updating.

11
00:00:48.874 --> 00:00:50.464
Actually, it looks pretty wild.

12
00:00:50.464 --> 00:00:52.279
I don't think I realized that point and

13
00:00:52.279 --> 00:00:54.424
move events will give
you fractional values or

14
00:00:54.424 --> 00:00:58.065
maybe it's because I've zoomed in this
website for the sake of the workshop.

15
00:00:58.065 --> 00:01:02.641
So I'm just gonna go ahead and
make that look

16
00:01:02.641 --> 00:01:07.844
a little prettier,
get some math round in there.

17
00:01:07.844 --> 00:01:10.305
Right, so much nicer, and

18
00:01:10.305 --> 00:01:16.413
of course we don't need to have
a name function, like handle move.

19
00:01:16.413 --> 00:01:22.153
We can just declare the function
in line if we want,

20
00:01:22.153 --> 00:01:25.097
so we can we can just copy.

21
00:01:25.097 --> 00:01:30.461
Oops, we can just copy
this whole thing and

22
00:01:30.461 --> 00:01:33.742
put it in there if we like.

23
00:01:33.742 --> 00:01:39.680
And I'm gonna turn it into
an a anonymous arrow function,

24
00:01:39.680 --> 00:01:44.295
just cuz syntactically it's a lot simpler.

25
00:01:44.295 --> 00:01:49.518
I'm gonna change the name
of the event to e, and

26
00:01:49.518 --> 00:01:55.789
rather than assigning to
the properties individually,

27
00:01:55.789 --> 00:02:02.466
let's just change this to m=xe.clientX,
ye.clientY.

28
00:02:02.466 --> 00:02:08.532
ClientX and clientY are values
that you get inside any mouse or

29
00:02:08.532 --> 00:02:13.204
pointer event handler and
it's the same deal.

30
00:02:13.204 --> 00:02:18.995
It's giving us these fractional
values out of a kind of a OCD.

31
00:02:18.995 --> 00:02:23.417
I'm gonna fix that with some math rounds.

32
00:02:23.417 --> 00:02:28.341
Right, and
now we have an inline event handler that

33
00:02:28.341 --> 00:02:32.013
is causing this value here to update.

34
00:02:32.013 --> 00:02:36.633
And it's totally fine to use an inline
event handler as opposed to a named event

35
00:02:36.633 --> 00:02:37.268
handler.

36
00:02:37.268 --> 00:02:41.338
It's not gonna get, that function
isn't gonna get recreated every

37
00:02:41.338 --> 00:02:45.284
time things change, which is what
can happen in some frameworks.

38
00:02:45.284 --> 00:02:46.930
The compiler has always got your back.

39
00:02:46.930 --> 00:02:48.327
It's gonna try and do the right thing.

40
00:02:51.819 --> 00:02:57.822
We can modify events using
this concise modifier syntax.

41
00:02:57.822 --> 00:03:02.558
So here we have a click handler that
is gonna cause an alert to appear

42
00:03:02.558 --> 00:03:04.261
every time we click it.

43
00:03:04.261 --> 00:03:06.177
We'll click that, click it again.

44
00:03:06.177 --> 00:03:10.055
Just gonna keep on coming, maybe we want
this event to fire once and then for

45
00:03:10.055 --> 00:03:12.160
that event handler to be unregistered.

46
00:03:12.160 --> 00:03:17.688
So we can add the ones modifier like that
and now if you click it the first time,

47
00:03:17.688 --> 00:03:22.217
it will happen, but then after that,
nothing happens at all.

48
00:03:22.217 --> 00:03:25.601
Right, we've got a few different modifiers
that we can add, prevent default,

49
00:03:25.601 --> 00:03:26.459
stop propagation.

50
00:03:26.459 --> 00:03:29.612
Passive, non-passive,
capture it once self.

51
00:03:29.612 --> 00:03:33.206
You can read about this in your own time,
we'll have exercises for each of these.

52
00:03:33.206 --> 00:03:36.429
These are just things that make
your life a little bit easier

53
00:03:36.429 --> 00:03:38.761
when you're dealing with lots of events.

54
00:03:38.761 --> 00:03:43.309
And you can use multiple modifiers
together by chaining them using this

55
00:03:43.309 --> 00:03:43.923
in text.

56
00:03:43.923 --> 00:03:49.563
It's not just elements that fire events,
components can also fire events,

57
00:03:49.563 --> 00:03:54.001
but the component needs to make
itself an event dispatcher.

58
00:03:54.001 --> 00:03:57.163
So we've got two components in
this exercise, an App.svelte and

59
00:03:57.163 --> 00:03:58.128
an Inner.svelte.

60
00:03:58.128 --> 00:04:04.054
And the app is going to listen for
events from the inner, side inner.

61
00:04:04.054 --> 00:04:09.131
We want to create this event dispatcher by

62
00:04:09.131 --> 00:04:15.234
importing createEventDispatcher
from Svelte.

63
00:04:22.229 --> 00:04:25.209
And then we'll create
a new dispatch function.

64
00:04:29.536 --> 00:04:33.221
Now the reason that we need to do it in
two steps like this, first we import,

65
00:04:33.221 --> 00:04:36.206
createEventDispatcher and
then we create the dispatcher,

66
00:04:36.206 --> 00:04:38.665
is because when we call
createEventDispatcher,

67
00:04:38.665 --> 00:04:41.901
Svelte knows that we're currently
inside the inner component.

68
00:04:41.901 --> 00:04:43.540
Later when we call dispatch,

69
00:04:43.540 --> 00:04:47.289
it knows that it's the dispatcher
that belongs to that component.

70
00:04:47.289 --> 00:04:52.558
If we just imported a dispatch function,
then Svelte would have

71
00:04:52.558 --> 00:04:58.331
no way of knowing which function
was actually dispatching the event.

72
00:05:00.567 --> 00:05:04.170
Now that we've done that, so
the button, if you click it,

73
00:05:04.170 --> 00:05:08.799
it will call this say hello function,
which calls that dispatch function.

74
00:05:08.799 --> 00:05:15.871
Now that we've wired that up, we can
add an event handler inside App.svelte.

75
00:05:15.871 --> 00:05:19.883
And it's exactly the same syntax
that we used with DOM elements.

76
00:05:19.883 --> 00:05:21.435
On message equals,

77
00:05:21.435 --> 00:05:26.192
then we've got a message handler
set up here and the message.

78
00:05:26.192 --> 00:05:29.220
So we'll just feed that in like so and

79
00:05:29.220 --> 00:05:34.407
now if you click the button,
it says hello, as you'd expect.

80
00:05:34.407 --> 00:05:38.914
And there's nothing special
about the name message.

81
00:05:38.914 --> 00:05:42.457
We could change that to say, greet and

82
00:05:42.457 --> 00:05:47.789
then in App.svelte,
we'll change that also to greet.

83
00:05:49.546 --> 00:05:53.831
And a component can have as many
different events as makes sense.

84
00:05:57.051 --> 00:06:00.503
Now in some frameworks,
we don't have event systems.

85
00:06:00.503 --> 00:06:03.669
Instead you pass call backs as
props into your components, and

86
00:06:03.669 --> 00:06:05.945
that's a thing that you
can do in Svelte too.

87
00:06:05.945 --> 00:06:09.165
It's really kind of
a personal style preference.

88
00:06:09.165 --> 00:06:14.834
The basic advice is that your data
goes down and then events come up.

89
00:06:14.834 --> 00:06:18.931
And whether those events are expressed
using event dispatches in Svelte or

90
00:06:18.931 --> 00:06:22.965
whether they're expressed as callbacks
that the component then calls,

91
00:06:22.965 --> 00:06:25.061
is really just a matter of code style.

92
00:06:25.061 --> 00:06:29.130
I personally like the event style,
but it's up to you,

93
00:06:29.130 --> 00:06:33.122
you're not forced to choose between one or
the other.

94
00:06:34.600 --> 00:06:38.306
Okay, so facts about DOM events that
you'll know if you've used the DOM

95
00:06:38.306 --> 00:06:39.775
a lot is that events bubble.

96
00:06:39.775 --> 00:06:43.764
Which is to say that if you have
some element deep in your tree,

97
00:06:43.764 --> 00:06:48.522
you can add an event listener on any
parent and the event will bubble up from

98
00:06:48.522 --> 00:06:52.474
the event target to where your
event handler is registered.

99
00:06:52.474 --> 00:06:56.291
That is not true with components,
component events do not bubble.

100
00:06:56.291 --> 00:07:00.624
So if you want to listen to an event
on some deeply nested component,

101
00:07:00.624 --> 00:07:04.819
the intermediate components need
to forward the event upwards.

102
00:07:04.819 --> 00:07:07.799
And so in this case,
we have the same App.svelte and

103
00:07:07.799 --> 00:07:10.733
Inner.svelte is in
the exercise that we just did.

104
00:07:10.733 --> 00:07:16.363
But there's also now this Outer.svelte
which contains the inter spell component,

105
00:07:16.363 --> 00:07:21.379
so this is the middleman that's gonna
need to forward the event from outer.

106
00:07:21.379 --> 00:07:26.727
Now, we could solve this by going
through the whole rigmarole of

107
00:07:26.727 --> 00:07:33.169
importing createEventDispatcher and
then creating a dispatch function and

108
00:07:33.169 --> 00:07:37.245
then adding an event
listener to the inner here.

109
00:07:37.245 --> 00:07:39.751
It's a lot of work,
it's a lot of boilerplate and

110
00:07:39.751 --> 00:07:42.748
boilerplate is anathema to
the Svelte way of doing things.

111
00:07:42.748 --> 00:07:46.256
So we have a convenient shorthand.

112
00:07:46.256 --> 00:07:51.948
Instead, when this event gets dispatched,

113
00:07:51.948 --> 00:08:00.199
we can just forward it to
the application by adding on :message.

114
00:08:00.199 --> 00:08:05.037
And now, the outer component will
dispatch that message when it

115
00:08:05.037 --> 00:08:08.002
receives it from the inner component.

116
00:08:14.123 --> 00:08:18.134
And of course it works exactly
the same way for DOM events.

117
00:08:18.134 --> 00:08:24.364
We have a big red button component
here and we have a button.

118
00:08:24.364 --> 00:08:29.181
We want to get notifications of when
the user clicks on that button.

119
00:08:29.181 --> 00:08:34.920
We've got our onclick handler wired
up already inside App.svelte,

120
00:08:34.920 --> 00:08:41.933
I'm gonna call this handle click function,
so we just need to add an onclick to that.

121
00:08:41.933 --> 00:08:43.331
And now when you press that button.

122
00:08:43.331 --> 00:08:52.861
[SOUND]
Okay, that's enough of that.

123
00:08:52.861 --> 00:08:56.316
&gt;&gt; Does forwarding only work with
events or callbacks as well?

124
00:08:56.316 --> 00:08:59.073
&gt;&gt; No, it does not work with callbacks,
it is purely about events.

125
00:08:59.073 --> 00:09:01.047
So if you're using the callback style,

126
00:09:01.047 --> 00:09:04.588
then you will have to pass the callback
from the parent component through

127
00:09:04.588 --> 00:09:08.187
the intermediate component to the child
component in the same way that you

128
00:09:08.187 --> 00:09:11.171
currently need to add the forwarding
syntax for the events.

129
00:09:11.171 --> 00:09:15.211
Okay, so we got a question in
the chat just now that was basically,

130
00:09:15.211 --> 00:09:19.627
how do I know in Outer.svelte that I
need to forward this message event?

131
00:09:19.627 --> 00:09:21.481
Where is that event coming from?

132
00:09:21.481 --> 00:09:24.638
And the answer is, it's coming from us,
we added it ourselves.

133
00:09:24.638 --> 00:09:28.108
In an App.svelte when we called dispatch,

134
00:09:28.108 --> 00:09:32.996
the name of the event that we
pass into the dispatch function.

135
00:09:32.996 --> 00:09:36.891
That is the name of the event that
gets emitted from the component.

136
00:09:36.891 --> 00:09:42.596
And so anything that includes
Inner.svelte can listen for

137
00:09:42.596 --> 00:09:47.171
those events or for
them rather by adding that.

138
00:09:47.171 --> 00:09:52.080
And that will now cause the outer
component to emit a message

139
00:09:52.080 --> 00:09:57.397
event that the app can listen to
with its own on message handler.

140
00:09:57.397 --> 00:09:59.224
&gt;&gt; So a pop-up sound?

141
00:09:59.224 --> 00:10:00.416
&gt;&gt; Yeah,
you can think of it that way, yeah.

