WEBVTT

1
00:00:00.000 --> 00:00:03.366
So you can see there's a few little
details that we need to iron out with

2
00:00:03.366 --> 00:00:04.062
the CSS here.

3
00:00:04.062 --> 00:00:09.878
In particular, it'd be nice to
add some dark mode themes here.

4
00:00:09.878 --> 00:00:14.332
But on the whole, our game is looking
pretty polished, and we can take this and

5
00:00:14.332 --> 00:00:17.589
we can deploy it to the Internet,
and people can play it.

6
00:00:17.589 --> 00:00:19.615
So we've used a lot of
different Svelte concepts here.

7
00:00:19.615 --> 00:00:22.939
We've used actions,
we've used components, we've used slots,

8
00:00:22.939 --> 00:00:26.915
we've used transitions and animations,
we've used the vents to manage state.

9
00:00:26.915 --> 00:00:31.319
We're using references to components and
calling functions inside those components.

10
00:00:31.319 --> 00:00:34.673
So we're using a pretty broad array of
the things that we learned earlier in

11
00:00:34.673 --> 00:00:35.320
the session.

12
00:00:35.320 --> 00:00:40.277
There is of course more that was covered
in the tutorial that we didn't use in

13
00:00:40.277 --> 00:00:40.981
this app.

14
00:00:40.981 --> 00:00:44.952
But that's something that you'll have
the opportunity to use as you build

15
00:00:44.952 --> 00:00:45.715
Svelte apps.

16
00:00:45.715 --> 00:00:50.251
&gt;&gt; Can you do repeat infinite
animations or transitions with Svelte?

17
00:00:50.251 --> 00:00:53.332
&gt;&gt; No, a transition is
transitioning from an element is

18
00:00:53.332 --> 00:00:55.665
not in the DOM to
an element is in the DOM.

19
00:00:55.665 --> 00:00:57.459
Once it's there, that's it.

20
00:00:57.459 --> 00:01:00.824
You can, of course,
add CSS animations to your elements.

21
00:01:00.824 --> 00:01:03.968
So if you want to have something
that repeats infinitely,

22
00:01:03.968 --> 00:01:06.800
then you can just do that
as a regular CSS animation.

23
00:01:06.800 --> 00:01:09.668
You don't need to use Svelte
transitions for that.

24
00:01:09.668 --> 00:01:13.888
But no,
a transition is off to an on state.

25
00:01:13.888 --> 00:01:18.711
&gt;&gt; Can you explain a little bit
more how dispatch is working, and

26
00:01:18.711 --> 00:01:21.046
how the event handlers work?

27
00:01:21.046 --> 00:01:21.703
&gt;&gt; Yeah, so

28
00:01:21.703 --> 00:01:26.966
when you call createEventDispatcher
when a component first initializes,

29
00:01:26.966 --> 00:01:32.241
we're creating a function that is bound
to a specific component instance.

30
00:01:32.241 --> 00:01:37.761
And so when you call that function, Svelte
knows that it's the component within

31
00:01:37.761 --> 00:01:42.726
which you call createEventDispatcher
that is dispatching that event.

32
00:01:42.726 --> 00:01:46.768
And so anything that has
a reference to that component,

33
00:01:46.768 --> 00:01:51.842
because you have a component that
has that other component as a child,

34
00:01:51.842 --> 00:01:54.516
you can then add that event handler.

35
00:01:54.516 --> 00:01:58.067
And Svelte understands
the hierarchy of the components.

36
00:01:58.067 --> 00:02:02.591
And so it knows that the event listener
on the outer component needs to

37
00:02:02.591 --> 00:02:07.588
respond to anything that gets called
with dispatch on the inner component.

38
00:02:07.588 --> 00:02:13.609
So it's just keeping a central registry
essentially of all of the components and

39
00:02:13.609 --> 00:02:15.204
their dispatchers so

40
00:02:15.204 --> 00:02:19.998
that everything can get linked
up when you later call dispatch.

41
00:02:19.998 --> 00:02:26.156
&gt;&gt; Is there a way to lint or warn that a
reactive value declaration is missing for

42
00:02:26.156 --> 00:02:31.465
a derived value of a component prop,
like the dollar sign colon?

43
00:02:33.935 --> 00:02:38.242
&gt;&gt; No, I'm not totally sure I understand
what situation that would come up in.

44
00:02:38.242 --> 00:02:44.658
If a Reactive declaration references
a value that is not present,

45
00:02:44.658 --> 00:02:51.301
it will just not work, that will be
a type error or a reference error,

46
00:02:51.301 --> 00:02:56.592
sorry, and
you'll find out about that immediately.

47
00:02:56.592 --> 00:03:00.807
I'm not sure what are the situation
that would come up in.

48
00:03:00.807 --> 00:03:04.743
&gt;&gt; They edit a little code snippet
where they declared a variable and

49
00:03:04.743 --> 00:03:09.484
set it equal to the string, hello, and
appended on a variable called my prop.

50
00:03:09.484 --> 00:03:13.174
But my props should have had
the dollar sign colon in front of it.

51
00:03:13.174 --> 00:03:19.499
&gt;&gt; Right, so Svelte doesn't know what
your intent is when you write that code.

52
00:03:19.499 --> 00:03:21.652
Maybe you do intend for
it to be reactive, and

53
00:03:21.652 --> 00:03:25.623
maybe it's something that you want to be
fixed when the component is initialized,

54
00:03:25.623 --> 00:03:27.283
which is completely legitimate.

55
00:03:27.283 --> 00:03:30.488
And so it's a little hard for the compiler
to be like, you got this wrong,

56
00:03:30.488 --> 00:03:31.483
cuz it doesn't know.

57
00:03:31.483 --> 00:03:35.944
The compiler is gonna assume that you
know the code that you're writing.

58
00:03:35.944 --> 00:03:39.135
So that's just something like
a habit that you get into,

59
00:03:39.135 --> 00:03:40.995
if you write a lot of components,

60
00:03:40.995 --> 00:03:45.117
then you'll start to understand which
things need to be made reactive and

61
00:03:45.117 --> 00:03:49.129
which things can be left initialized
when the component first mounts.

62
00:03:49.129 --> 00:03:51.556
This concludes the first session.

63
00:03:51.556 --> 00:03:56.027
In the next session,
we're gonna be talking about SvelteKit.

64
00:03:56.027 --> 00:03:58.786
We're gonna be learning all
of the things that you can

65
00:03:58.786 --> 00:04:01.804
do with SvelteKit as a full
stack application framework.

66
00:04:01.804 --> 00:04:05.136
I hope that this has been
a useful learning experience.

67
00:04:05.136 --> 00:04:06.828
I hope that if you're new to Svelte,

68
00:04:06.828 --> 00:04:09.789
this has given you a sense of
what's possible to do with Svelte.

69
00:04:09.789 --> 00:04:12.885
If you've been using Svelte for a while,
I hope that you learned something new.

70
00:04:12.885 --> 00:04:16.821
And if nothing else,
I hope that you all had fun.

71
00:04:16.821 --> 00:04:21.691
&gt;&gt; [APPLAUSE]

