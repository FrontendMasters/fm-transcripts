WEBVTT

1
00:00:00.000 --> 00:00:03.504
What if I fetch data
directly in readable store?

2
00:00:03.504 --> 00:00:07.131
Is it good or better to fetch and

3
00:00:07.131 --> 00:00:11.536
pass data in store and component?

4
00:00:11.536 --> 00:00:15.438
&gt;&gt; You can totally fetch data
inside a readable store.

5
00:00:15.438 --> 00:00:20.561
So for example, if you are polling for
some data, then during that

6
00:00:20.561 --> 00:00:26.430
polling logic inside the readable store
callback is a really good pattern.

7
00:00:26.430 --> 00:00:31.133
That's something that I've used a lot in
my own apps and it's something that I

8
00:00:31.133 --> 00:00:35.633
recommend, just remember to stop
polling once the unsubscribe happens.

9
00:00:38.428 --> 00:00:43.713
&gt;&gt; Is there a recommended way to persist
Svelte store data upon page refresh?

10
00:00:43.713 --> 00:00:48.809
There are packages that intertwines Svelte
stores with browser storage, but I was

11
00:00:48.809 --> 00:00:53.775
wondering if there is a reason there is no
native way to persist stores in Svelte.

12
00:00:53.775 --> 00:00:58.200
&gt;&gt; We're trying to be as unopinionated
as possible about the way that you

13
00:00:58.200 --> 00:00:59.026
use stores.

14
00:00:59.026 --> 00:01:03.783
Things like local storage are pretty easy
to implement with your own logic, but

15
00:01:03.783 --> 00:01:05.490
there also exist packages.

16
00:01:05.490 --> 00:01:09.843
And there are opinions that people
might have about exactly what you do

17
00:01:09.843 --> 00:01:11.107
with those stores.

18
00:01:11.107 --> 00:01:13.753
So we don't wanna get too
heavy-handed in saying,

19
00:01:13.753 --> 00:01:16.594
this is the correct way to
implement some of this stuff.

20
00:01:16.594 --> 00:01:21.534
The more that we can allow you to build
your own abstractions on top of stores,

21
00:01:21.534 --> 00:01:24.199
the more flexible they'll end up being.

22
00:01:24.199 --> 00:01:28.159
And so yes, as the question said,
you can install a package, I think there's

23
00:01:28.159 --> 00:01:31.640
a package called Svelte local storage
store or something like that.

24
00:01:31.640 --> 00:01:35.030
I'm actually using that myself, right now.

25
00:01:35.030 --> 00:01:39.905
And there's a whole bunch of other
abstractions that people have built on top

26
00:01:39.905 --> 00:01:43.130
of stores that we wouldn't
have thought of, and so

27
00:01:43.130 --> 00:01:46.506
we don't include them in
the Svelte package itself.

28
00:01:46.506 --> 00:01:50.281
&gt;&gt; How does store
differentiate from Redux?

29
00:01:50.281 --> 00:01:54.835
&gt;&gt; They both use the word store but
they're very different beasts.

30
00:01:54.835 --> 00:01:58.865
A Redux store is kind of like
a application level got object, typically,

31
00:01:58.865 --> 00:02:01.597
that defines state for
your entire application.

32
00:02:01.597 --> 00:02:06.321
Whereas a Svelte store is just an atomic
piece of state that you can create inside

33
00:02:06.321 --> 00:02:10.073
a component, you can create in
an application-wide module.

34
00:02:10.073 --> 00:02:12.659
it doesn't really matter.

35
00:02:12.659 --> 00:02:17.435
So instead of having lots of different
pieces of state inside a Svelte store,

36
00:02:17.435 --> 00:02:20.373
you typically have one thing,
like a count, or

37
00:02:20.373 --> 00:02:24.649
the current value of some fetch operation,
or something like that.

38
00:02:24.649 --> 00:02:29.277
Whereas your Redux store
includes the kitchen sink.

39
00:02:29.277 --> 00:02:32.291
Yes?
&gt;&gt; Would it be more fair to compare it to

40
00:02:32.291 --> 00:02:33.857
a Cot React context?

41
00:02:33.857 --> 00:02:39.036
No, so
Svelte also has a concept of context.

42
00:02:39.036 --> 00:02:42.979
I don't think there really is
a React equivalent directly.

43
00:02:42.979 --> 00:02:46.756
There are some libraries in React like,

44
00:02:46.756 --> 00:02:50.986
what's the one that I'm
trying to think of?

45
00:02:50.986 --> 00:02:53.359
&gt;&gt; Someone was saying Zustand?

46
00:02:53.359 --> 00:02:56.948
&gt;&gt; Yeah,
I think Zustand is a similar thing.

47
00:02:56.948 --> 00:03:01.280
Although I think that might even
be doing some funky stuff to

48
00:03:01.280 --> 00:03:05.885
break out of the React's
scheduling lifecycle, if I recall.

49
00:03:05.885 --> 00:03:08.029
Recoil, that's what I'm thinking of.

50
00:03:08.029 --> 00:03:12.845
I think Svelte stores are probably
most similar to recoil from the React

51
00:03:12.845 --> 00:03:13.735
ecosystem.

52
00:03:13.735 --> 00:03:17.658
But yeah,
we will be talking about context later on.

53
00:03:17.658 --> 00:03:19.834
That is something that we
have in Svelte as well.

54
00:03:19.834 --> 00:03:24.525
&gt;&gt; Have you ever found it useful to have
kind of a got drive store with everything

55
00:03:24.525 --> 00:03:27.181
or do you like to keep
it all atomic stores?

56
00:03:27.181 --> 00:03:29.707
&gt;&gt; I've never personally found a use for
it.

57
00:03:29.707 --> 00:03:33.342
Admittedly, I haven't used Redux in anger.

58
00:03:33.342 --> 00:03:35.788
I mean, I've got angry with Redux,
[LAUGH] but

59
00:03:35.788 --> 00:03:38.429
I've never used it to
actually build something.

60
00:03:38.429 --> 00:03:41.553
So I probably am not
the right person to ask,

61
00:03:41.553 --> 00:03:46.886
I don't have a good sense of why you
would want to have something like that.

62
00:03:46.886 --> 00:03:51.331
For me, it just makes more
sense to have the state itself

63
00:03:51.331 --> 00:03:55.220
be represented as a tangible
first class thing.

64
00:03:55.220 --> 00:03:57.250
&gt;&gt; There's one more question here.

65
00:03:57.250 --> 00:04:02.569
Reactive statements seem like
the closest thing to React's use effect.

66
00:04:02.569 --> 00:04:08.307
But there doesn't seem to be any way to
clean up function in Svelte, is that true?

67
00:04:08.307 --> 00:04:10.965
Is there any thoughts
about adding support for

68
00:04:10.965 --> 00:04:13.564
cleanup functions in a reactive statement?

69
00:04:13.564 --> 00:04:15.345
&gt;&gt; So that's why you would use stores.

70
00:04:15.345 --> 00:04:20.527
Stores give you that
state-level lifecycle.

71
00:04:20.527 --> 00:04:25.327
And they're not bound to the component
hierarchy in the same way that the use

72
00:04:25.327 --> 00:04:26.227
effects are.

73
00:04:26.227 --> 00:04:31.689
So you can declare that logic
wherever it needs to go and

74
00:04:31.689 --> 00:04:34.907
use it inside your components.

75
00:04:34.907 --> 00:04:38.892
Reactive statements, they are similar
to use effects in that you can log

76
00:04:38.892 --> 00:04:43.285
the current value of something in the same
way that you would use use effect for.

77
00:04:43.285 --> 00:04:50.292
But they're also a little bit like
use memo, it'll memorize values.

78
00:04:50.292 --> 00:04:51.689
So it's sort of a combination of both.

79
00:04:51.689 --> 00:04:55.623
But if you're doing something
that does require cleanup,

80
00:04:55.623 --> 00:04:59.791
that is when you would use lifecycle
functions if it's bound to

81
00:04:59.791 --> 00:05:04.685
the component lifecycle, and
stores if it's bound to the state itself.

82
00:05:04.685 --> 00:05:10.596
&gt;&gt; Can you give a couple production
examples of stores in use?

83
00:05:10.596 --> 00:05:12.724
&gt;&gt; Production examples of stores in use.

84
00:05:12.724 --> 00:05:17.660
Well, this app here is full of stores.

85
00:05:17.660 --> 00:05:24.304
We have stores representing which
file is currently selected,

86
00:05:24.304 --> 00:05:28.610
whether the application is complete, or

87
00:05:28.610 --> 00:05:31.942
is it solved or unsolved state?

88
00:05:31.942 --> 00:05:34.383
Stores everywhere.

89
00:05:34.383 --> 00:05:38.689
I don't know how everyone else is using
stores in their production apps, but

90
00:05:38.689 --> 00:05:41.736
that's a great question to
ask in the Svelte Discord,

91
00:05:41.736 --> 00:05:43.409
how are people using stores?

92
00:05:43.409 --> 00:05:46.792
You'll get a ton of answers from people
who are using them in production apps and

93
00:05:46.792 --> 00:05:48.775
they'll talk about how they're doing that.

94
00:05:48.775 --> 00:05:53.887
But yeah, any place that you have state
that doesn't belong to a single component,

95
00:05:53.887 --> 00:05:56.124
stores are a great way to express it.

