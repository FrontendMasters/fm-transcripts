WEBVTT

1
00:00:00.240 --> 00:00:06.515
Okay, this is the final
section of part one.

2
00:00:06.515 --> 00:00:08.116
And it's about stores.

3
00:00:08.116 --> 00:00:13.169
This is about state that does not
belong to a specific component.

4
00:00:13.169 --> 00:00:16.051
Because very often you will have
application state that is not part of

5
00:00:16.051 --> 00:00:17.201
the component hierarchy.

6
00:00:17.201 --> 00:00:20.709
It's something that can be
accessed by multiple components or

7
00:00:20.709 --> 00:00:22.569
by a regular JavaScript module.

8
00:00:22.569 --> 00:00:28.506
In Svelte, we have a state management
primitive built in is called a store.

9
00:00:28.506 --> 00:00:32.653
And a store is really just
an object with a subscribe method.

10
00:00:32.653 --> 00:00:37.124
When you call subscribe on a store, you
will pass in a callback that gets executed

11
00:00:37.124 --> 00:00:39.514
every time the value of the store changes.

12
00:00:39.514 --> 00:00:46.810
So in app.svelte count is a store,
and we're calling count.subscribe,

13
00:00:46.810 --> 00:00:51.717
and we're assigning to
this value count_value.

14
00:00:51.717 --> 00:00:54.601
So, let's look at
the implementation of count.

15
00:00:54.601 --> 00:00:59.791
We're importing something called
writable from svelte/store,

16
00:00:59.791 --> 00:01:05.991
and we're exporting an instance of a
writable store with an initial value of 0.

17
00:01:08.595 --> 00:01:11.824
Okay, and we can reference this
store value in multiple components.

18
00:01:11.824 --> 00:01:16.359
Let's look at the incrementor.svelte.

19
00:01:16.359 --> 00:01:23.577
We can update the value of the count using
the count's update method, count.update.

20
00:01:23.577 --> 00:01:27.936
It receives the initial value.

21
00:01:27.936 --> 00:01:29.392
And returns the next value.

22
00:01:32.666 --> 00:01:35.261
So now if we press the plus button,

23
00:01:35.261 --> 00:01:40.186
we're incrementing the value of count and
inside app.svelte,

24
00:01:40.186 --> 00:01:45.665
because we're assigning the current
value of the store to count_value.

25
00:01:45.665 --> 00:01:49.783
We can see that inside our h1 element.

26
00:01:49.783 --> 00:01:53.102
We can do the opposite and
decremented.svelte.

27
00:01:53.102 --> 00:01:58.861
So again count.update, get the old value and

28
00:01:58.861 --> 00:02:07.121
then return the value -1 can increment and
we can decrement.

29
00:02:07.121 --> 00:02:13.387
Then finally in our resetter.svelte,
we can implement this reset function.

30
00:02:13.387 --> 00:02:13.889
This time,

31
00:02:13.889 --> 00:02:17.208
we don't need to call update because
we don't care about the previous value.

32
00:02:17.208 --> 00:02:23.115
We'll just call count.set(0) like so.

33
00:02:23.115 --> 00:02:26.754
Press the button, the count resets.

34
00:02:29.517 --> 00:02:34.430
Now that works, but there is a subtle
bug in this app that's quite similar

35
00:02:34.430 --> 00:02:36.489
to the bug we had with onMount,

36
00:02:36.489 --> 00:02:41.655
where things weren't getting cleaned
up when the component was destroyed.

37
00:02:41.655 --> 00:02:45.434
So if this component were to get
instantiated multiple times,

38
00:02:45.434 --> 00:02:49.084
we would be creating multiple
subscriptions to this store.

39
00:02:49.084 --> 00:02:51.503
And we would never be getting rid of them.

40
00:02:51.503 --> 00:02:55.752
So, over time,
that could result in a memory leak.

41
00:02:55.752 --> 00:03:00.540
And one way that we can undo that memory
leak is by getting a reference to

42
00:03:00.540 --> 00:03:05.507
the unsubscribe function,
which is returned from count.subscribe.

43
00:03:11.769 --> 00:03:15.470
And we,
could call it an onDestroy lifecycle hook,

44
00:03:15.470 --> 00:03:20.435
which we didn't talk about because
generally I don't recommend that

45
00:03:20.435 --> 00:03:25.201
you use it That would look like this.

46
00:03:35.692 --> 00:03:39.418
And so now when the app.svelte
is removed from the DOM,

47
00:03:39.418 --> 00:03:41.883
we'll clean up that subscription.

48
00:03:44.562 --> 00:03:46.586
But this is a lot to write.

49
00:03:46.586 --> 00:03:50.866
The onDestroy, the let count_value,
the const unsubscribe,

50
00:03:50.866 --> 00:03:54.834
the subscribe, the callback,
onDestroy, all of that.

51
00:03:54.834 --> 00:03:58.269
You can imagine that if you had
multiple stores that you're referencing

52
00:03:58.269 --> 00:03:59.402
inside the component.

53
00:03:59.402 --> 00:04:02.550
This is a lot to deal with.

54
00:04:02.550 --> 00:04:08.424
But because svelte hates boilerplate,
we have a shorthand way of doing all this.

55
00:04:08.424 --> 00:04:09.983
I'm just gonna go ahead and
get rid of all of that.

56
00:04:09.983 --> 00:04:14.188
Get rid of the onDestroy,
get rid of the let count_value,

57
00:04:14.188 --> 00:04:20.102
get rid of this count.subscribe call, and
get rid of the call to onDestroy there.

58
00:04:20.102 --> 00:04:25.875
And we replace the count_value
variable with $count.

59
00:04:29.537 --> 00:04:34.154
And that is equivalent that is set
at the subscription and it is added

60
00:04:34.154 --> 00:04:39.908
the unsubscribe logic automatically for us
and it works just the same way as before.

61
00:04:43.174 --> 00:04:47.894
Right, because the dollar prefix
tells svelte that we are dealing with

62
00:04:47.894 --> 00:04:49.081
the store value.

63
00:04:49.081 --> 00:04:53.314
It is reserved, you cannot create your own
variables inside a svelte component that

64
00:04:53.314 --> 00:04:54.574
has that dollar prefix.

65
00:05:00.832 --> 00:05:03.592
So in that example count
was a writable store but

66
00:05:03.592 --> 00:05:08.008
sometimes it doesn't make sense for
a store to be writable you shouldn't be

67
00:05:08.008 --> 00:05:12.713
able to set the value of the store if you
have a reference to it and it's read only.

68
00:05:12.713 --> 00:05:17.362
So things like the mouse position or
the user's geolocation.

69
00:05:17.362 --> 00:05:21.572
There's no reason that you should be
able to set those values from outside.

70
00:05:21.572 --> 00:05:25.148
And so we have a thing called
a readable store as well.

71
00:05:25.148 --> 00:05:31.944
In our stores JS module, we're importing
the readable function from svelte/stores.

72
00:05:31.944 --> 00:05:37.982
And we are creating a readable store,
which has an initial value of null.

73
00:05:37.982 --> 00:05:40.242
Can be null or undefined or whatever.

74
00:05:40.242 --> 00:05:45.667
And the second function to
a readable store is a start function

75
00:05:45.667 --> 00:05:50.688
that gets called when the user
subscribes to this store.

76
00:05:50.688 --> 00:05:53.920
So when the first person subscribes to
this store, this callback will be invoked.

77
00:05:53.920 --> 00:05:54.818
When the last person stops subscribing to

78
00:05:54.818 --> 00:05:57.905
the store,

79
00:05:57.905 --> 00:06:00.492
this stop function will
get called as well.

80
00:06:00.492 --> 00:06:04.174
So this is a convenient place
to do setup and tear down logic.

81
00:06:06.414 --> 00:06:09.205
So the current time,

82
00:06:09.205 --> 00:06:15.102
let's begin by passing
in the current date.

83
00:06:17.544 --> 00:06:22.466
You can see that already
the store value in app.spelt is

84
00:06:22.466 --> 00:06:25.302
reflected in the current date.

85
00:06:25.302 --> 00:06:31.663
Down here it's formatting the current
time using the Intl.DateTimeFormat

86
00:06:31.663 --> 00:06:37.011
function that's
built into the platform.

87
00:06:37.011 --> 00:06:42.796
And inside here we want to add an interval
that's gonna update this once a second.

88
00:06:42.796 --> 00:06:48.838
So you can create an interval with
const interval = setInterval.

89
00:06:54.725 --> 00:07:00.378
That's gonna run once a second, and it's
gonna set the value to the current date.

90
00:07:02.277 --> 00:07:08.327
And then inside our stop function.

91
00:07:08.327 --> 00:07:10.841
We'll just clear the interval.

92
00:07:10.841 --> 00:07:16.961
So now we have this time value that we
can use anywhere in our application,

93
00:07:16.961 --> 00:07:20.723
and it will always be
perfectly consistent.

94
00:07:20.723 --> 00:07:22.531
We don't need to have this setup and

95
00:07:22.531 --> 00:07:25.195
teardown logic inside each
individual component.

96
00:07:25.195 --> 00:07:27.823
It's all encapsulated
within the store itself.

97
00:07:32.517 --> 00:07:38.938
Sometimes you might have stores whose
value is derived from other stores.

98
00:07:38.938 --> 00:07:42.685
So in this case,
perhaps we wanna have a store that tells

99
00:07:42.685 --> 00:07:45.576
us how long the current
page has been open.

100
00:07:45.576 --> 00:07:51.117
And we can derive that
value from the time store,

101
00:07:51.117 --> 00:07:56.526
go back into stores.js and
underneath the time

102
00:07:56.526 --> 00:08:02.492
declaration We're gonna
create an elapsed store.

103
00:08:02.492 --> 00:08:06.538
It's been scaffolded out already,
we just need to add the logic.

104
00:08:06.538 --> 00:08:10.858
An elapsed store takes one or
more stores as its input value, and

105
00:08:10.858 --> 00:08:15.738
then it has a callback which is passed
those values whenever they change and

106
00:08:15.738 --> 00:08:17.349
can return a new value.

107
00:08:17.349 --> 00:08:22.672
Math.round (time-

108
00:08:22.672 --> 00:08:27.996
start)/1000.

109
00:08:27.996 --> 00:08:30.733
So now time and elapsed
are perfectly in sync,

110
00:08:30.733 --> 00:08:33.957
you'll notice that I'm using
the dollar prefix here.

111
00:08:33.957 --> 00:08:36.354
Even though I'm in a JavaScript module,

112
00:08:36.354 --> 00:08:39.232
there's no syntactical
requirement to do that.

113
00:08:39.232 --> 00:08:42.327
It's just something that helps keep
it consistent with your components.

114
00:08:42.327 --> 00:08:46.156
And so
it's a convention that I like to use.

115
00:08:46.156 --> 00:08:51.368
So here we're deriving a value from
a single store you can derive a store from

116
00:08:51.368 --> 00:08:56.840
multiple other stores and you can also
do things asynchronously if you need to.

117
00:08:56.840 --> 00:09:01.162
If you want to do that sort of thing,
then consult the API reference and

118
00:09:01.162 --> 00:09:02.566
all will be revealed.

119
00:09:02.566 --> 00:09:06.092
&gt;&gt; If we go back to
the readable store as one.

120
00:09:06.092 --> 00:09:11.304
Can you help clarify
the purpose in the stores.js

121
00:09:11.304 --> 00:09:15.037
file of the stop function and what.

122
00:09:15.037 --> 00:09:17.874
&gt;&gt; Yeah.
&gt;&gt; I believe that is doing in this?

123
00:09:17.874 --> 00:09:22.974
&gt;&gt; So
if I were to call time.subscribe, and

124
00:09:22.974 --> 00:09:29.402
then do something with
the current time like log it.

125
00:09:33.639 --> 00:09:38.257
Then we need to get this value somehow,
but

126
00:09:38.257 --> 00:09:43.005
by default this function isn't gonna run,

127
00:09:43.005 --> 00:09:50.211
this function is only gonna run
once the ones we call .subscribe.

128
00:09:50.211 --> 00:09:54.104
Because, a lot of the time like
this could be wasted effort.

129
00:09:54.104 --> 00:09:57.459
You might have a whole bunch of stores
that aren't actually being used at

130
00:09:57.459 --> 00:09:58.067
the moment.

131
00:09:58.067 --> 00:10:01.571
And so rather than wasting
the user's battery on, like,

132
00:10:01.571 --> 00:10:04.725
getting the geolocation information or
whatever.

133
00:10:04.725 --> 00:10:07.445
We wait until that information
is actually requested.

134
00:10:07.445 --> 00:10:09.848
So this function doesn't
get called immediately.

135
00:10:09.848 --> 00:10:13.124
It only gets called when we subscribe.

136
00:10:13.124 --> 00:10:19.064
If we were to get
the unsubscribe handle and

137
00:10:19.064 --> 00:10:22.863
then later on, call that.

138
00:10:22.863 --> 00:10:27.658
Well at that point we need to
get rid off that interval,

139
00:10:27.658 --> 00:10:32.363
otherwise it's just going
to keep ticking forever.

140
00:10:32.363 --> 00:10:36.388
So this function will get called when the
first subscriber starts subscribing, and

141
00:10:36.388 --> 00:10:38.938
if subsequent things subscribe
to the same store then

142
00:10:38.938 --> 00:10:40.990
that function doesn't get re-invoked.

143
00:10:40.990 --> 00:10:45.792
But as soon as everything that is
currently subscribing to the store stops

144
00:10:45.792 --> 00:10:49.442
subscribing, that's when
we call the stop function.

145
00:10:49.442 --> 00:10:52.412
So start gets run when
the first subscriber arrives,

146
00:10:52.412 --> 00:10:55.057
stop gets run when the last
subscriber leaves.

147
00:10:55.057 --> 00:10:56.277
Does that make sense?

148
00:10:56.277 --> 00:11:01.392
You can imagine that
we're not using this and

149
00:11:01.392 --> 00:11:06.245
we don't have this, this function will not run.

150
00:11:06.245 --> 00:11:13.100
And we can verify that by adding an alert,
right?

151
00:11:13.100 --> 00:11:14.678
We're importing it.

152
00:11:14.678 --> 00:11:16.204
We're declaring it.

153
00:11:16.204 --> 00:11:18.770
But this function is not running.

154
00:11:18.770 --> 00:11:26.270
But if I then uncomment that,
now the function is running.

155
00:11:26.270 --> 00:11:29.473
So we have a subscriber,
we have one subscriber.

156
00:11:29.473 --> 00:11:34.383
If I then do this,
we have two subscribers.

157
00:11:34.383 --> 00:11:37.919
And it recalled the alert because
it's refreshed the entire module.

158
00:11:37.919 --> 00:11:40.547
But if you have multiple
subscribers normally,

159
00:11:40.547 --> 00:11:43.634
then you wouldn't see two alerts,
you'd only see one.

160
00:11:43.634 --> 00:11:45.901
So right now,
it's tracking two subscribers.

161
00:11:45.901 --> 00:11:51.704
And then if we unsubscribe from that and
we get rid of this component,

162
00:11:51.704 --> 00:11:56.922
then it's gonna just basically
clear the interval, right?

163
00:11:56.922 --> 00:12:02.275
Because no one cares about the time
anymore once everything is unsubscribed.

164
00:12:02.275 --> 00:12:06.149
Yeah, sorry,
that was not the clearest explanation, but

165
00:12:06.149 --> 00:12:10.022
all you need to know is that you
need to add your setup code and

166
00:12:10.022 --> 00:12:13.684
your teardown code and
the svelte will manage the rest.

167
00:12:13.684 --> 00:12:18.649
&gt;&gt; In clearInterval(interval)
isn't interval a closure?

168
00:12:18.649 --> 00:12:23.352
&gt;&gt; So you're returning the stop
function from the start function.

169
00:12:23.352 --> 00:12:26.811
So yes, stop is a closure.

170
00:12:26.811 --> 00:12:31.564
It closes over the interval that you're
declaring in the start function.

171
00:12:31.564 --> 00:12:34.603
So you're not passing two
functions to readable.

172
00:12:34.603 --> 00:12:40.655
It's not like we've got one of these and

173
00:12:40.655 --> 00:12:43.503
then one of these,

174
00:12:43.503 --> 00:12:49.566
you're returning the stop from start.

175
00:12:49.566 --> 00:12:52.612
So anything that you declare inside start,
you can reference in stop.

176
00:12:52.612 --> 00:12:57.971
All right, let's talk about custom stores.

177
00:12:57.971 --> 00:13:02.043
As I said earlier, a store is just
an object that has a subscribe method.

178
00:13:02.043 --> 00:13:04.548
There's nothing that special about it.

179
00:13:04.548 --> 00:13:08.905
So as long as an object correctly
implements that method, it's a store.

180
00:13:08.905 --> 00:13:10.543
And beyond that,
you can do whatever you want.

181
00:13:10.543 --> 00:13:15.217
So we can use stores for
domain specific logic.

182
00:13:15.217 --> 00:13:16.846
So in the case of our count store,

183
00:13:16.846 --> 00:13:20.472
maybe you want a lot of different things
to have a reference to that store.

184
00:13:20.472 --> 00:13:23.483
But you don't want everyone to be
able to set it to arbitrary values.

185
00:13:23.483 --> 00:13:26.527
You don't wanna be able to set
the value to a string or something.

186
00:13:26.527 --> 00:13:30.819
So you can restrict what people
can do with that function,

187
00:13:30.819 --> 00:13:34.060
with that store by not exposing the set,
and

188
00:13:34.060 --> 00:13:38.716
update functions, but
instead exposing your own functions.

189
00:13:38.716 --> 00:13:41.257
So, inside stores.js,

190
00:13:41.257 --> 00:13:47.378
we have some scaffolding where
we're creating a custom store,

191
00:13:47.378 --> 00:13:53.739
we have the subscribe function
which is returned from writable.

192
00:13:53.739 --> 00:13:57.496
And we're just returning that from create
count so that it can be used as a regular

193
00:13:57.496 --> 00:14:00.159
store so that you can use it
inside your markup like this.

194
00:14:00.159 --> 00:14:01.161
The count is 0.

195
00:14:01.161 --> 00:14:03.304
We're not doing anything differently here.

196
00:14:03.304 --> 00:14:09.281
We're just referencing that the same way
that we would reference any other store.

197
00:14:09.281 --> 00:14:12.495
But instead of returning the set and
update methods,

198
00:14:12.495 --> 00:14:17.937
we're returning some methods of our own
creation, increment, decrement, and reset.

199
00:14:17.937 --> 00:14:20.664
At the moment, they're not wired up,
so they're not doing anything.

200
00:14:20.664 --> 00:14:26.760
Let's fix that.
Now increment is gonna

201
00:14:26.760 --> 00:14:31.488
update n to n + 1.

202
00:14:31.488 --> 00:14:37.685
Decon is going to update n to n- 1.

203
00:14:37.685 --> 00:14:40.518
And reset is going to set the value to 0.

204
00:14:44.196 --> 00:14:49.541
And now inside app.svelte we
can just pass those methods

205
00:14:49.541 --> 00:14:55.432
to our event handler, And
interact with the store that way.

206
00:15:01.647 --> 00:15:07.738
Finally, just like we can bind
the value of things like inputs and

207
00:15:07.738 --> 00:15:12.412
text areas to local state,
we can bind to stores.

208
00:15:12.412 --> 00:15:14.855
As long as the store is writable,

209
00:15:14.855 --> 00:15:20.892
it's created with the writable helper from
Svelte store, then we can bind to it.

210
00:15:20.892 --> 00:15:26.604
So, take the text binding here right now,
nothing's happening.

211
00:15:29.944 --> 00:15:34.817
But if we change that to a binding
then the value of name is

212
00:15:34.817 --> 00:15:38.148
now bound to the content in the input.

213
00:15:43.503 --> 00:15:47.573
If we also add an event handler,
we can assign to the value of name in

214
00:15:47.573 --> 00:15:52.463
the same way that we'd assign to any
other value inside this Svelte component.

215
00:15:56.203 --> 00:15:58.405
There we go.

216
00:15:58.405 --> 00:16:05.798
Right you can use name.set, or
you can use dollar name + =.

217
00:16:05.798 --> 00:16:07.916
It's really just a stylistic preference.

