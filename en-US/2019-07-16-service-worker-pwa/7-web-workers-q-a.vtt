WEBVTT

1
00:00:00.140 --> 00:00:03.650
&gt;&gt; Kyle Simpson: What questions can we
answer about dedicated woodworkers?

2
00:00:03.650 --> 00:00:08.670
&gt;&gt; Student: This is actually
a housekeeping, boring one.

3
00:00:08.670 --> 00:00:10.570
But, so
we're gonna be using DevTools a fair bit.

4
00:00:10.570 --> 00:00:13.620
Should we be mostly working in Chrome,
henceforth, or

5
00:00:13.620 --> 00:00:15.040
is it
&gt;&gt; Kyle Simpson: For

6
00:00:15.040 --> 00:00:19.400
this, the purposes of this workshop,
we're gonna work exclusively in Chrome.

7
00:00:19.400 --> 00:00:23.800
I'm hoping that you will find the code
that we write would be agnostic

8
00:00:23.800 --> 00:00:24.890
to the browser.

9
00:00:24.890 --> 00:00:30.480
But there certainly can be little
quacks where you try it in firefox and

10
00:00:30.480 --> 00:00:32.770
things don't run in exactly
the same order usually,

11
00:00:32.770 --> 00:00:34.790
it's not that stuff is totally broken.

12
00:00:34.790 --> 00:00:36.070
But it may happen in different order.

13
00:00:36.070 --> 00:00:38.800
But yeah,
we're gonna be working entirely in chrome.

14
00:00:38.800 --> 00:00:40.440
I mean the latest version of chrome.

15
00:00:40.440 --> 00:00:42.755
So let me see what that
version is at this moment.

16
00:00:42.755 --> 00:00:47.204
Let's do about Chrome.

17
00:00:50.714 --> 00:00:54.850
&gt;&gt; Kyle Simpson: Yeah, I'm in 74, so
&gt;&gt; Student2: It's a small aside here.

18
00:00:54.850 --> 00:01:00.320
I just tried it in Internet Explorer and
it is completely broken.

19
00:01:00.320 --> 00:01:00.825
&gt;&gt; Kyle Simpson: Is it?
&gt;&gt; Student2: Yeah.

20
00:01:00.825 --> 00:01:01.854
&gt;&gt; Kyle Simpson: In IE?

21
00:01:01.854 --> 00:01:02.354
&gt;&gt; Student2: Yeah.

22
00:01:02.354 --> 00:01:03.377
&gt;&gt; Kyle Simpson: Which version of IE?

23
00:01:03.377 --> 00:01:03.962
&gt;&gt; Student2: 11.

24
00:01:03.962 --> 00:01:05.420
&gt;&gt; Kyle Simpson: 11, I would

25
00:01:05.420 --> 00:01:07.330
have expected it to work in 11.

26
00:01:07.330 --> 00:01:08.720
Interesting.

27
00:01:08.720 --> 00:01:12.725
&gt;&gt; Student3: Is it possible to ebug
Webworkers and Devtools in the normal,

28
00:01:12.725 --> 00:01:14.620
usual way and the depth?

29
00:01:14.620 --> 00:01:16.230
&gt;&gt; Kyle Simpson: Yeah, absolutely it is.

30
00:01:16.230 --> 00:01:20.040
So you saw that we were able to receive
a console log message from there.

31
00:01:21.210 --> 00:01:24.640
But if there is a web worker running,
it'll be listed here.

32
00:01:24.640 --> 00:01:26.080
So let's try that.

33
00:01:26.080 --> 00:01:28.770
Let's click Start, and

34
00:01:28.770 --> 00:01:33.710
then our worker is here, so now we're
filtering only messages from the worker.

35
00:01:33.710 --> 00:01:37.150
Debugging works exactly the same
with watch expressions and

36
00:01:37.150 --> 00:01:40.400
exceptions that happen,
pause on exceptions.

37
00:01:40.400 --> 00:01:44.626
You can click in the Sources tab and

38
00:01:44.626 --> 00:01:51.930
get your worker right here and
then access it and open it up.

39
00:01:56.590 --> 00:01:58.360
&gt;&gt; Kyle Simpson: That's interesting,
I don't know why it didn't show it.

40
00:01:59.900 --> 00:02:01.080
That looks like a Chrome bug.

41
00:02:02.100 --> 00:02:03.570
It's not rendering it.

42
00:02:03.570 --> 00:02:06.409
But yes, the answer is you
can do full debugging of your

43
00:02:06.409 --> 00:02:08.777
workers while they're running on the page.

