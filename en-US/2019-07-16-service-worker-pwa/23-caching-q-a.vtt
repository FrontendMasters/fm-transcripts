WEBVTT

1
00:00:00.590 --> 00:00:02.010
&gt;&gt; Kyle Simpson: Yes?

2
00:00:02.010 --> 00:00:04.480
&gt;&gt; Student: So in this example,
you have two images.

3
00:00:04.480 --> 00:00:09.230
Can you cache all images in a folder,
or do you have to specify?

4
00:00:09.230 --> 00:00:13.040
&gt;&gt; Kyle Simpson: The way we're gonna
do this, you need actual URLs here.

5
00:00:13.040 --> 00:00:18.410
You, of course, since this is programming
code, can do whatever you want.

6
00:00:18.410 --> 00:00:27.950
So for example, if you had a API
that you could hit on your server,

7
00:00:27.950 --> 00:00:33.870
and it would tell you all of the photos in
the pics thing from Facebook, or whatever.

8
00:00:33.870 --> 00:00:37.400
And then you knew all of those IDs,
and actually, later in our exercise,

9
00:00:37.400 --> 00:00:38.060
we're gonna do that.

10
00:00:38.060 --> 00:00:40.626
We're not gonna hard code
our post IDs in here,

11
00:00:40.626 --> 00:00:42.949
we're gonna call an API
to get our post ID.

12
00:00:42.949 --> 00:00:46.590
And then we're gonna generate our
URLs from that list of post IDs.

13
00:00:46.590 --> 00:00:50.083
So if you had an API for all those
resources in your photos directory, for

14
00:00:50.083 --> 00:00:51.177
example, you could.

15
00:00:51.177 --> 00:00:54.500
But the service worker needs
to know what to request.

16
00:00:56.530 --> 00:01:02.350
I can't really request the server
to just give it whatever it wants.

17
00:01:02.350 --> 00:01:03.790
It has to say, I want this.

18
00:01:03.790 --> 00:01:04.980
And part of the reason for

19
00:01:04.980 --> 00:01:08.950
that is that we need some unique URL
to store it as the key in the cache.

20
00:01:08.950 --> 00:01:13.880
So each resource that we're sticking
into a cache needs to have a URL

21
00:01:13.880 --> 00:01:16.260
that we've requested, so
we have to know that URL.

22
00:01:16.260 --> 00:01:21.030
We can either hard code it, or
we can programmatically generate it, or

23
00:01:21.030 --> 00:01:25.175
we can get that data from the server,
or any mixture thereof.

24
00:01:28.478 --> 00:01:29.000
&gt;&gt; Kyle Simpson: What's that?

25
00:01:29.000 --> 00:01:29.861
&gt;&gt; Student2: Line 15,
you're missing a comma.

26
00:01:29.861 --> 00:01:31.720
&gt;&gt; Student: Line 15,
you're missing a comma.

27
00:01:31.720 --> 00:01:32.220
&gt;&gt; Kyle Simpson: Thank you.

28
00:01:35.150 --> 00:01:39.767
&gt;&gt; Student3: So if you've got the dot
extensions on the CSS and JS,

29
00:01:39.767 --> 00:01:43.410
etc, but not on the HTML-
&gt;&gt; Kyle Simpson: Because our server

30
00:01:43.410 --> 00:01:46.730
is doing friendly URL rewriting for
our pages.

31
00:01:46.730 --> 00:01:51.650
The server has this logic built in that
if you ask for /offline, it goes and

32
00:01:51.650 --> 00:01:53.720
gets offline.html.

33
00:01:53.720 --> 00:01:59.370
If you ask for /contact,
it actually loads up contact.html.

34
00:01:59.370 --> 00:02:03.970
So I did that URL routing on
the server for friendly URLs.

35
00:02:03.970 --> 00:02:09.392
But it doesn't do URL rewriting for our
static assets, like CSS and JavaScript.

36
00:02:13.162 --> 00:02:16.687
&gt;&gt; Kyle Simpson: So in other words,
the URLs that you list here are the URLs

37
00:02:16.687 --> 00:02:21.335
as they would be loaded from the client,
to the server, whatever that is.

38
00:02:21.335 --> 00:02:27.654
If your URLs have HTML on the end of them,
then you need to put an HTML here.

39
00:02:27.654 --> 00:02:30.079
It's not gonna do any magic
of figuring that out,

40
00:02:30.079 --> 00:02:32.749
that's just that the server
doesn't expect .html.

41
00:02:37.941 --> 00:02:41.827
&gt;&gt; Kyle Simpson: Remember, here in our
page, when we've been clicking around, and

42
00:02:41.827 --> 00:02:45.657
it just says /contact on the end,
it doesn't say contact.html.

43
00:02:45.657 --> 00:02:51.400
That's not accidental, that's URL routing
logic that I have built into the server.

