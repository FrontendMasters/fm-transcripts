WEBVTT

1
00:00:00.030 --> 00:00:03.570
&gt;&gt; Kyle Simpson: So let's turn our
attention to service workers now that we

2
00:00:03.570 --> 00:00:07.458
have a good foundation
with regular web workers.

3
00:00:07.458 --> 00:00:10.540
Quick note of housekeeping here.

4
00:00:10.540 --> 00:00:14.540
If you have not actually closed or

5
00:00:14.540 --> 00:00:19.240
stopped that server, you will want to do
that before we start the next exercise and

6
00:00:19.240 --> 00:00:24.500
actually going to a Ctrl+C to kill that
server from the previous exercise.

7
00:00:24.500 --> 00:00:28.130
Okay, so what is a service worker?

8
00:00:29.420 --> 00:00:32.276
Well, a service worker is
obviously a web worker.

9
00:00:32.276 --> 00:00:35.530
But as I talked about earlier,

10
00:00:35.530 --> 00:00:39.880
it's going to basically live
on a different timeline or

11
00:00:39.880 --> 00:00:43.880
with a different sort of life
cycle than your normal web worker.

12
00:00:43.880 --> 00:00:48.182
And in particular,
what the service worker is doing,

13
00:00:48.182 --> 00:00:53.804
I think at some point, they contemplated
calling it a network worker.

14
00:00:53.804 --> 00:00:57.100
And that probably would have
been a little bit more accurate.

15
00:00:57.100 --> 00:00:59.257
I'm not sure why they
didn't go with that name.

16
00:00:59.257 --> 00:01:04.317
But a service worker is going
to actually sit between

17
00:01:04.317 --> 00:01:09.610
your web application and
the rest of the web.

18
00:01:09.610 --> 00:01:13.810
In other words,
every single web request that happens,

19
00:01:13.810 --> 00:01:19.580
whether it's an image file in your HTML,
it's a CSS file, it's a favicon.

20
00:01:19.580 --> 00:01:21.890
Actually, technically,
favicons don't in Chrome.

21
00:01:21.890 --> 00:01:23.330
That's a weird bug.

22
00:01:23.330 --> 00:01:28.230
But basically, every single request,
whether it's a JavaScript file or

23
00:01:28.230 --> 00:01:31.910
it's AJAX calls, anything that happens.

24
00:01:31.910 --> 00:01:38.606
And that's not just to your own server,
it's to anywhere, to any location.

25
00:01:38.606 --> 00:01:40.442
If there is a service worker installed,

26
00:01:40.442 --> 00:01:44.470
they're all gonna funnel themselves
through the service worker first.

27
00:01:44.470 --> 00:01:48.440
Now, the service worker doesn't have
to do anything with any of those.

28
00:01:48.440 --> 00:01:51.960
If it doesn't listen for
those incoming requests,

29
00:01:51.960 --> 00:01:54.260
then they just pass through untouched.

30
00:01:54.260 --> 00:01:58.290
So if you install a service
worker that does not listen for

31
00:01:58.290 --> 00:02:03.480
outbound requests, then that won't
interfere with any of that traffic.

32
00:02:03.480 --> 00:02:04.880
But as soon as you start listening for

33
00:02:04.880 --> 00:02:08.790
those outbound requests,
it's now entirely on you to make sure,

34
00:02:08.790 --> 00:02:12.410
if you want those to work, you have to
make sure they get routed correctly.

35
00:02:13.870 --> 00:02:17.140
There's not really a way
to tell the service worker,

36
00:02:17.140 --> 00:02:19.390
I don't care about this request.

37
00:02:19.390 --> 00:02:22.480
You essentially have to act as a proxy.

38
00:02:22.480 --> 00:02:26.870
Once you start listening for outbound
requests, your code basically has to act

39
00:02:26.870 --> 00:02:32.050
like a proxy that makes
the request on behalf of the page.

40
00:02:32.050 --> 00:02:35.960
And when it receives the response,
the response goes back to the page.

41
00:02:35.960 --> 00:02:40.489
So that basically ends up
working like a pass-through, so

42
00:02:40.489 --> 00:02:43.125
you could do no logic around that.

43
00:02:43.125 --> 00:02:47.426
But as soon as you install what's called
a fetch handler in your service worker,

44
00:02:47.426 --> 00:02:50.969
all those requests are gonna funnel
through your fetch handler and

45
00:02:50.969 --> 00:02:54.975
you're gonna have to add a minimum,
make sure that those all go outbound.

46
00:02:54.975 --> 00:03:00.589
And there's an interesting little quirk
here, which is if your page is requesting

47
00:03:00.589 --> 00:03:06.470
resources that are not on your domain,
so they're not on your server's domain.

48
00:03:06.470 --> 00:03:10.390
Your service worker is still
bound by the rules of CORS,

49
00:03:10.390 --> 00:03:14.830
Cross-Origin Resource Sharing, which means
if your service worker tries to do a fetch

50
00:03:14.830 --> 00:03:20.270
event, an AJAX call to a cross-origin
location on behalf of a page.

51
00:03:20.270 --> 00:03:21.240
Say, in your page,

52
00:03:21.240 --> 00:03:25.070
you have an image tag loading to
some image off some CDN somewhere.

53
00:03:25.070 --> 00:03:28.280
That completely works normally
on a normal image tag,

54
00:03:28.280 --> 00:03:33.670
regardless of what the CDN does or
doesn't publish in terms of headers.

55
00:03:33.670 --> 00:03:37.690
As soon as that request is now routing
through your service worker and

56
00:03:37.690 --> 00:03:42.520
your service worker is gonna try to make
an AJAX call cross-domain to that CDN,

57
00:03:42.520 --> 00:03:46.423
now all of a sudden, that CDN has to
publish CORS headers or it's gonna fail.

58
00:03:47.480 --> 00:03:53.162
So the only way around that particular
problem is you end up doing an opaque

59
00:03:53.162 --> 00:03:59.500
AJAX call, which is literally forwarding
it and you don't get to see the response.

60
00:03:59.500 --> 00:04:03.150
And then it would allow it to go
through the service worker machinery,

61
00:04:03.150 --> 00:04:05.660
but go back to the page
without you seeing it.

62
00:04:05.660 --> 00:04:10.310
So if you are going to send it and
try to receive it back and

63
00:04:10.310 --> 00:04:14.190
do something with it, like cache it or
any of that other stuff,

64
00:04:14.190 --> 00:04:18.760
then it has to be CORS-enabled for
you to do that if its cross-origin.

65
00:04:18.760 --> 00:04:21.020
If you don't care about
doing any sort of caching or

66
00:04:21.020 --> 00:04:25.980
anything in the service worker, you can
do an opaque pass-through request, and

67
00:04:25.980 --> 00:04:29.410
then it'll go just fine
even if it's in CORS.

68
00:04:29.410 --> 00:04:35.173
But again, the setup, the mindset that
we wanna have is that essentially,

69
00:04:35.173 --> 00:04:39.601
we are programming our own
proxy that sits in the browser.

70
00:04:39.601 --> 00:04:42.143
As opposed to a proxy
that sits on a server,

71
00:04:42.143 --> 00:04:45.390
this is a proxy that sits in the browser.

72
00:04:45.390 --> 00:04:51.180
You might ask yourself, why on Earth would
I want to have a proxy for my website?

73
00:04:51.180 --> 00:04:55.677
Those requests seem to work just fine for
the last 25 years of the web.

74
00:04:55.677 --> 00:04:58.230
Why do we need to have a proxy involved?

75
00:04:58.230 --> 00:05:01.130
This is where your creative juices,

76
00:05:01.130 --> 00:05:05.570
you wanna get those going, because
you wanna start thinking to yourself,

77
00:05:05.570 --> 00:05:11.400
what are things that I could do if I
could program all of my network requests?

78
00:05:11.400 --> 00:05:12.660
What are things that I might wanna do?

79
00:05:13.800 --> 00:05:17.120
At a bare minimum, and this is where
we'll spend most of our attention here.

80
00:05:17.120 --> 00:05:22.179
At a bare minimum, a thing that you can
do, and this is kind of the primary use

81
00:05:22.179 --> 00:05:27.160
case of a service worker, is to use an API
that they added to the web platform

82
00:05:27.160 --> 00:05:31.696
at the same time as service workers,
which is called the cache API.

83
00:05:31.696 --> 00:05:38.178
And the cache API is a programmatic
way of storing resource requests.

84
00:05:38.178 --> 00:05:42.781
Instead of relying upon the browser's
underlying caching mechanism,

85
00:05:42.781 --> 00:05:46.855
this is a cache API that gives you
complete control over what is or

86
00:05:46.855 --> 00:05:48.590
is not in the cache.

87
00:05:48.590 --> 00:05:52.770
You get access to what
URL it's referred to.

88
00:05:52.770 --> 00:05:55.270
You can put contents in there.

89
00:05:55.270 --> 00:05:59.210
You can make your own contents and
stuff them into this cache, and

90
00:05:59.210 --> 00:06:02.400
then retrieve those from the cache,
and later respond to them.

