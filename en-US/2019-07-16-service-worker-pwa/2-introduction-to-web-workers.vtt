WEBVTT

1
00:00:00.310 --> 00:00:04.180
&gt;&gt; Kyle: Before we talk about service
workers, some of you have never actually

2
00:00:04.180 --> 00:00:08.830
written a web worker, which was
the precursor to service workers.

3
00:00:08.830 --> 00:00:12.660
Service workers are a special
kind of web worker

4
00:00:12.660 --> 00:00:16.360
that has a very specific kind
of purpose in the web stack.

5
00:00:16.360 --> 00:00:20.240
But we're gonna start by looking at web
workers and then we'll circle back and

6
00:00:20.240 --> 00:00:22.780
look specifically at service workers.

7
00:00:22.780 --> 00:00:27.094
So if you are in your
worker-exercise directory,

8
00:00:27.094 --> 00:00:31.908
you should be able to start up
the server that we're gonna

9
00:00:31.908 --> 00:00:35.440
be working on by typing node server.js.

10
00:00:35.440 --> 00:00:40.700
And then when you hit Enter,
it should tell you server started on.

11
00:00:40.700 --> 00:00:45.220
And 8049 is the port that we're
gonna be using for today's exercise.

12
00:00:45.220 --> 00:00:49.930
If you get any error that pops
up about a missing dependency,

13
00:00:49.930 --> 00:00:53.450
you should have, from the distribution,
any modules that you needed.

14
00:00:53.450 --> 00:00:57.400
But if you need to, you could say npm
install which will install any of

15
00:00:57.400 --> 00:01:01.094
the dependencies if they happen
not to be in your distribution.

16
00:01:03.354 --> 00:01:05.378
&gt;&gt; Kyle: Sometimes NPM can be very slow,
and

17
00:01:05.378 --> 00:01:09.507
then you should be able to issue
the node server.js to start the server.

18
00:01:13.133 --> 00:01:15.510
&gt;&gt; Kyle: And you notice that
we're just gonna leave it on.

19
00:01:15.510 --> 00:01:23.115
With that started, we're gonna go over to
our browser and type in localhost:8049.

20
00:01:23.115 --> 00:01:27.900
And that's gonna load up this basic
little website that I've put together.

21
00:01:27.900 --> 00:01:30.330
Now this website doesn't do anything yet,
but

22
00:01:30.330 --> 00:01:33.118
that's what we're gonna be
doing a little bit together.

23
00:01:33.118 --> 00:01:37.109
And I used one of the most
canonical examples for web workers,

24
00:01:37.109 --> 00:01:41.352
which is you want your web worker
to do some heavy-lifting work.

25
00:01:41.352 --> 00:01:45.590
For example,
recursively calculating Fibonacci numbers.

26
00:01:45.590 --> 00:01:50.540
Just so we're entirely clear on this,
calculating Fibonacci numbers,

27
00:01:50.540 --> 00:01:53.640
not something you're ever gonna
do on a real website, okay?

28
00:01:53.640 --> 00:01:54.930
I totally get that.

29
00:01:54.930 --> 00:01:58.920
But what we wanted to do was,
in a very simple way, illustrate the idea

30
00:01:58.920 --> 00:02:01.740
that you might have some heavy-lifting
work to do in the background.

31
00:02:01.740 --> 00:02:03.680
That is the use case for

32
00:02:03.680 --> 00:02:07.730
web workers is when there's gonna be
a bunch of processing-intensive stuff.

33
00:02:07.730 --> 00:02:09.250
So what is a web worker?

34
00:02:09.250 --> 00:02:15.710
It is a JavaScript file that runs on a
separate thread from the web page thread.

35
00:02:15.710 --> 00:02:18.740
So you have your JavaScript
that loads into your web page.

36
00:02:18.740 --> 00:02:21.330
And then you can have
a separate JavaScript file

37
00:02:21.330 --> 00:02:26.030
which acts as a separate program,
running in a background thread.

38
00:02:26.030 --> 00:02:29.290
Running independently of the web page,
which means if it's running and running

39
00:02:29.290 --> 00:02:33.810
and running, it doesn't affect any of
the behavior while you're on the web page.

40
00:02:33.810 --> 00:02:37.870
If you ran a bunch of heavy processing
in the code that was on your web page.

41
00:02:37.870 --> 00:02:40.405
You know that you're not gonna be able to
scroll around and click on buttons while

42
00:02:40.405 --> 00:02:43.600
JavaScript's running because
of that thread being tied up.

43
00:02:43.600 --> 00:02:49.490
So the key ideas, if I have some
heavy-lifting processing work to

44
00:02:49.490 --> 00:02:53.760
do and I need to do it front end,
then I can offload it to a web worker.

45
00:02:54.850 --> 00:02:56.080
Some things to be aware of.

46
00:02:57.200 --> 00:03:02.420
All the web browser guarantees is
that if you spin up a web worker,

47
00:03:02.420 --> 00:03:05.190
it will be on a different
thread from the main page.

48
00:03:06.230 --> 00:03:09.660
If you spin up multiple workers,

49
00:03:09.660 --> 00:03:14.030
in general they will often
have separate threads.

50
00:03:14.030 --> 00:03:18.082
But there is no actual guarantee that
every single thread that you make will

51
00:03:18.082 --> 00:03:20.560
have a completely separate thread.

52
00:03:20.560 --> 00:03:24.006
Because if that was a guarantee,
then this would be very easy to

53
00:03:24.006 --> 00:03:27.528
denial of service somebody's browser,
somebody's device.

54
00:03:27.528 --> 00:03:32.418
So the only guarantee is that
you can spin off at least

55
00:03:32.418 --> 00:03:37.570
one extra thread to handle
web worker work, okay?

56
00:03:37.570 --> 00:03:40.725
There are a variety of
quirks around web workers.

57
00:03:40.725 --> 00:03:44.060
Where in some browsers and configurations,

58
00:03:44.060 --> 00:03:47.610
a worker can spin off another worker
which is called a child worker.

59
00:03:47.610 --> 00:03:50.190
And in some configurations,
that doesn't work.

60
00:03:50.190 --> 00:03:53.430
But the page can spin
up multiple workers and

61
00:03:53.430 --> 00:03:55.840
then try to ferry
communications between them.

62
00:03:57.750 --> 00:03:59.774
There are specialized web workers.

63
00:03:59.774 --> 00:04:03.220
For example,
if you spin up a worker for a web page,

64
00:04:03.220 --> 00:04:07.080
that's called a dedicated worker,
which means it belongs to that web page.

65
00:04:07.080 --> 00:04:09.646
And when you close that tab,
that worker is immediately killed.

66
00:04:09.646 --> 00:04:13.220
And then there's another kind of worker,
and

67
00:04:13.220 --> 00:04:16.260
if you had multiple tabs
of the same site open.

68
00:04:16.260 --> 00:04:20.546
You'd get multiple dedicated workers,
each one tied to that page.

69
00:04:20.546 --> 00:04:25.070
But then there's another way
of creating a worker, and

70
00:04:25.070 --> 00:04:28.700
again not all browsers and
configurations handle this often.

71
00:04:28.700 --> 00:04:30.620
When we're talking about limitations,

72
00:04:30.620 --> 00:04:35.530
mobile devices will limit some of this
stuff more than a desktop typically will.

73
00:04:35.530 --> 00:04:38.600
But there's a type of worker
called a shared worker,

74
00:04:38.600 --> 00:04:41.200
which is if you had multiple tabs.

75
00:04:41.200 --> 00:04:45.980
If you had a web app or
site where it was common for your users to

76
00:04:45.980 --> 00:04:50.290
have multiple tabs of your site open,
maybe a shopping site or something.

77
00:04:50.290 --> 00:04:53.080
You can have a shared worker
which is running once.

78
00:04:53.080 --> 00:04:57.020
And it's able to communicate with
each instance of all the open pages.

79
00:04:57.020 --> 00:05:00.050
And it lives as long as
there's one open tab.

80
00:05:00.050 --> 00:05:01.930
So somebody could have five tabs open.

81
00:05:01.930 --> 00:05:04.540
Closed four of them and
that shared worker's still running.

82
00:05:04.540 --> 00:05:07.960
Open another tab, now it's able
to talk to both of those tabs.

83
00:05:07.960 --> 00:05:12.110
And there's some tricks you can do where
you could have one page talk to another

84
00:05:12.110 --> 00:05:13.710
page through that worker.

85
00:05:13.710 --> 00:05:16.040
There's other ways to do that
with postMessage as well, but

86
00:05:16.040 --> 00:05:19.340
you can keep two pages in sync.

87
00:05:19.340 --> 00:05:23.230
So if somebody types in something over
here, or they add it to their cart on this

88
00:05:23.230 --> 00:05:26.540
page, now all of a sudden the cart
icon over here is synchronized.

89
00:05:26.540 --> 00:05:27.660
So you can do some of those things.

90
00:05:27.660 --> 00:05:30.960
But just be aware shared workers are not

91
00:05:30.960 --> 00:05:33.304
absolutely guaranteed to work
everywhere sort of thing.

92
00:05:33.304 --> 00:05:36.840
You're gonna need to gracefully
handle if that's not,

93
00:05:36.840 --> 00:05:39.200
don't build your main functionality on it.

94
00:05:39.200 --> 00:05:42.180
But it's a nice graceful,
I mean, progressive enhancement,

95
00:05:42.180 --> 00:05:44.630
if you will, for the page.

96
00:05:44.630 --> 00:05:45.300
Yes.

97
00:05:45.300 --> 00:05:48.070
&gt;&gt; Speaker 2: Is there a fallback from
a shared worker to a dedicated worker

98
00:05:48.070 --> 00:05:49.830
if the shared worker's not available?

99
00:05:49.830 --> 00:05:52.010
Or is that not something you could do?

100
00:05:52.010 --> 00:05:55.240
&gt;&gt; Kyle: There's not a fallback from
the perspective where the browser

101
00:05:55.240 --> 00:05:56.890
automatically falls back.

102
00:05:56.890 --> 00:06:00.429
You can feature detect that your
shared worker is unavailable or

103
00:06:00.429 --> 00:06:04.140
it doesn't start and then start
a worker instead of a shared worker.

104
00:06:04.140 --> 00:06:07.750
The one we're gonna do here is just
gonna be a regular dedicated worker.

105
00:06:07.750 --> 00:06:09.800
And we'll see how to do
that in just a moment.

106
00:06:09.800 --> 00:06:16.200
But I've used shared workers maybe once or
twice in my career.

107
00:06:16.200 --> 00:06:18.600
It's not something I use a lot.

108
00:06:18.600 --> 00:06:21.420
I've used dedicated
workers a number of times.

109
00:06:21.420 --> 00:06:23.110
So they're more useful.

110
00:06:23.110 --> 00:06:27.002
That's why shared workers are maybe
less common for you to see.

111
00:06:27.002 --> 00:06:29.600
I think there was at least one
browser that didn't implement them for

112
00:06:29.600 --> 00:06:31.270
the longest time, I forget.

113
00:06:31.270 --> 00:06:37.000
It might have been Firefox, it might
have been Microsoft IE or something.

114
00:06:37.000 --> 00:06:42.330
But anyway, shared workers weren't
guaranteed cross browser for a long time.

115
00:06:42.330 --> 00:06:45.218
I don't think shared workers
work on mobile devices.

116
00:06:45.218 --> 00:06:50.402
So just be aware that if you're gonna
build it with the shared thing in mind,

117
00:06:50.402 --> 00:06:54.060
you need to handle the case
where that doesn't work.

118
00:06:54.060 --> 00:06:56.640
Or just not doing the work or
doing some other kinda workaround.

119
00:06:56.640 --> 00:07:01.500
Anyway, so web workers are a way
to run some code somewhere else

120
00:07:01.500 --> 00:07:05.520
other than what's happening
in the tab at this moment.

121
00:07:05.520 --> 00:07:09.615
In all of those cases that we've
talked about, they belong to the tab.

122
00:07:09.615 --> 00:07:12.010
And as soon as the tab goes away, or

123
00:07:12.010 --> 00:07:15.610
all the tabs that are sharing it go away,
that thing dies.

124
00:07:16.720 --> 00:07:20.290
What is gonna be unique and different
when we get into shared worker, I mean,

125
00:07:20.290 --> 00:07:23.690
into service workers is
that service workers

126
00:07:23.690 --> 00:07:28.000
survive in the background
beyond the tab going away.

127
00:07:28.000 --> 00:07:33.160
Beyond the tab being closed, or beyond
somebody navigating away to another page.

128
00:07:33.160 --> 00:07:35.960
Now before that terrifies you and
you think my god.

129
00:07:35.960 --> 00:07:38.874
Somebody's gonna run this code
in the background forever and

130
00:07:38.874 --> 00:07:42.020
it's gonna kill my site or
it's gonna spy on me or whatever.

131
00:07:42.020 --> 00:07:45.680
There's a ton of security model involved
where just because it's running in

132
00:07:45.680 --> 00:07:48.330
the background doesn't mean
that it's spying on you.

133
00:07:48.330 --> 00:07:52.450
It can still only communicate with
the pages that it was spun up from.

134
00:07:52.450 --> 00:07:55.090
So you don't have to worry about that.

135
00:07:55.090 --> 00:07:59.400
But also, the browser manages
the life cycle of that.

136
00:07:59.400 --> 00:08:01.670
And so it may live for 5 or 10 or

137
00:08:01.670 --> 00:08:04.990
15 seconds in the background
while it's doing some stuff.

138
00:08:04.990 --> 00:08:08.120
And then once it's idle,
it'll be shut down.

139
00:08:08.120 --> 00:08:10.190
It could potentially spin back up.

140
00:08:10.190 --> 00:08:13.410
And we'll talk about advanced use cases
where a service worker can be spun

141
00:08:13.410 --> 00:08:17.270
up in the background,
even when your page isn't open.

142
00:08:17.270 --> 00:08:21.900
But again, it would only live for a matter
of a few seconds and then go away.

143
00:08:21.900 --> 00:08:23.610
So the browser manages all that stuff for
you.

144
00:08:23.610 --> 00:08:27.435
But the point is you basically have this
worker that is almost like a zombie.

145
00:08:27.435 --> 00:08:30.004
It's living outside of your tab.

146
00:08:30.004 --> 00:08:34.390
And that's a special power that
normal workers don't have, okay?

147
00:08:34.390 --> 00:08:40.330
So let's get into how we would write and
build a web worker.

148
00:08:40.330 --> 00:08:43.540
What we're gonna eventually be able to do
is click this button which will fire off

149
00:08:43.540 --> 00:08:47.640
a web worker that starts generating
Fibonacci numbers recursively in

150
00:08:47.640 --> 00:08:48.420
the background.

151
00:08:48.420 --> 00:08:51.852
I intentionally did not do
optimized Fibonacci generation,

152
00:08:51.852 --> 00:08:56.790
cuz we're intentionally trying to create a
bunch of processing work that goes slower,

153
00:08:56.790 --> 00:08:58.200
and slower, and slower.

154
00:08:58.200 --> 00:09:02.220
Yes, I know there are much better ways
of doing Fibonacci generation, okay?

155
00:09:02.220 --> 00:09:04.250
But you'll see that when we
spin it up on my machine.

156
00:09:04.250 --> 00:09:07.750
It's able to get up to
the Fibonacci of 42 or

157
00:09:07.750 --> 00:09:12.270
43 before it's taking way too
long to generate the next number.

158
00:09:12.270 --> 00:09:16.070
Anyway, so we're just gonna
spin up a web worker, fire it,

159
00:09:16.070 --> 00:09:20.740
tell it to just keep generating Fibonacci
numbers and sending them to the page.

160
00:09:20.740 --> 00:09:25.460
And then if we click Stop,
it's gonna kill the web worker.

161
00:09:25.460 --> 00:09:28.120
Now, the reason why we need
to kill the web worker

162
00:09:28.120 --> 00:09:32.070
is because the communication that
happens between the page and

163
00:09:32.070 --> 00:09:35.340
a web worker is based upon
asynchronous eventing.

164
00:09:36.520 --> 00:09:41.864
If you've worked with Ajax events
like fetch, if you've done things

165
00:09:41.864 --> 00:09:47.230
like postMessage before,
postMessage is how we communicate.

166
00:09:47.230 --> 00:09:49.290
It's an asynchronous event.

167
00:09:49.290 --> 00:09:54.045
But an asynchronous event cannot be
processed if some code is already running.

168
00:09:54.045 --> 00:09:57.747
So if we have some code running that's
churning for seconds or minutes on in

169
00:09:57.747 --> 00:10:01.301
trying to generate a Fibonacci number,
and we try to send it a message.

170
00:10:01.301 --> 00:10:05.070
That message is gonna just sit there,
waiting for somebody to pick it up.

171
00:10:05.070 --> 00:10:10.390
So we can't rely upon sending a message
to a worker that is busy to tell it hey,

172
00:10:10.390 --> 00:10:11.589
stop doing what you're doing.

173
00:10:12.890 --> 00:10:17.193
So the better way of telling it to [LAUGH]
stop doing what it's doing is to terminate

174
00:10:17.193 --> 00:10:18.127
the web worker.

175
00:10:18.127 --> 00:10:19.570
So that'll be our general strategy.

