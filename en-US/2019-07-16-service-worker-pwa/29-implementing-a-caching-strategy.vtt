WEBVTT

1
00:00:00.110 --> 00:00:05.091
&gt;&gt; Kyle Simpson: We could just implement
a single strategy for all inbound and

2
00:00:05.091 --> 00:00:06.757
outbound request.

3
00:00:06.757 --> 00:00:09.813
That strategy could be which
isn't gonna do much but

4
00:00:09.813 --> 00:00:13.356
we can just verify that our
router hasn't broken anything,

5
00:00:13.356 --> 00:00:17.106
that strategy could be we're going
to first make the request and

6
00:00:17.106 --> 00:00:21.980
then we're going to store it in cache if
we haven't already gotten it in the cache.

7
00:00:21.980 --> 00:00:22.925
So what would that look like?

8
00:00:22.925 --> 00:00:25.400
Well we're gonna need some fetchOptions.

9
00:00:31.282 --> 00:00:35.222
&gt;&gt; Kyle Simpson: And for
example we're gonna need credentials,

10
00:00:35.222 --> 00:00:39.352
and I'll say omit here
because this won't work for

11
00:00:39.352 --> 00:00:43.306
all of our requests but
it spoke for a few of them.

12
00:00:43.306 --> 00:00:50.195
We're gonna say credentials
omit will say cache:"no-store",

13
00:00:50.195 --> 00:00:56.260
but what if one of these inbound
request is like a forum post.

14
00:00:56.260 --> 00:01:01.159
So I may not be able to assume that
I'm gonna do like method get maybe

15
00:01:01.159 --> 00:01:06.160
you can assume that maybe you know
that your web page only does GETs.

16
00:01:06.160 --> 00:01:10.711
But if you wanted to say,
use whatever request method

17
00:01:10.711 --> 00:01:15.581
the inbound request has,
then you can say req.method.

18
00:01:19.111 --> 00:01:22.001
&gt;&gt; Kyle Simpson: And also,
it may be the case that the request has

19
00:01:22.001 --> 00:01:24.675
some headers that
the server needs to see and

20
00:01:24.675 --> 00:01:29.672
you don't wanna not include those, so
you may also wanna to include the headers.

21
00:01:35.050 --> 00:01:37.690
&gt;&gt; Kyle Simpson: And depending on your
scenario you may need to fine tune these

22
00:01:37.690 --> 00:01:39.722
fetch options a little bit differently,
so.

23
00:01:44.294 --> 00:01:50.854
&gt;&gt; Kyle Simpson: Now we know that
it's possible for a fetch to fail,

24
00:01:50.854 --> 00:01:57.264
we're not gonna do our is
online checking just yet

25
00:01:57.264 --> 00:02:04.590
but we're going to just say
let res equals await fetch and

26
00:02:04.590 --> 00:02:09.930
the URL that we want to request is reqURL,

27
00:02:09.930 --> 00:02:14.374
and the options is fetchOptions.

28
00:02:14.374 --> 00:02:19.547
Actually, rather than just in case there
might be other things in the URL that

29
00:02:19.547 --> 00:02:24.483
we hit stripped off for our URL testing
purposes, let's just go ahead and

30
00:02:24.483 --> 00:02:29.034
pass along the actual original URL
that the browser has requested.

31
00:02:31.142 --> 00:02:34.342
&gt;&gt; Kyle Simpson: So if this works,

32
00:02:40.933 --> 00:02:43.069
&gt;&gt; Kyle Simpson: We will have a res, and

33
00:02:43.069 --> 00:02:49.597
it will be res.ok, So now,
we have a response back from the server.

34
00:02:49.597 --> 00:02:53.015
We don't necessarily need to pass anything
about the response at this point,

35
00:02:53.015 --> 00:02:56.034
although, that's a valid thing
that your service worker might do.

36
00:02:56.034 --> 00:03:01.047
It might look inside of a resource and
see if it likes what it sees or

37
00:03:01.047 --> 00:03:05.149
whatever, but here,
we're just gonna say listen,

38
00:03:05.149 --> 00:03:10.163
I see that we've got a good successful
response from the server so

39
00:03:10.163 --> 00:03:16.753
I'm gonna go ahead and cache it, remember
we do caching by saying await cache.put.

40
00:03:16.753 --> 00:03:21.163
We're gonna use the reqURL,
that's the variable we created,

41
00:03:21.163 --> 00:03:22.806
that's the key for it.

42
00:03:22.806 --> 00:03:28.358
We're gonna use reqURL and
we're going to say res.clone and

43
00:03:28.358 --> 00:03:33.374
this one it really is important
that we say res.clone,

44
00:03:33.374 --> 00:03:39.798
and then finally we're going to
return res, why are we returning res?

45
00:03:39.798 --> 00:03:44.286
Because the response is coming
back as the response of

46
00:03:44.286 --> 00:03:48.575
the router which is doing
the event wait until, and

47
00:03:48.575 --> 00:03:53.263
actually just realized we
don't wanna use wait until,

48
00:03:53.263 --> 00:03:58.372
because this is an on fetch what
we wanna use is respond with.

49
00:03:58.372 --> 00:04:05.007
That's kind of like wait until but
it is actually expecting a real response,

50
00:04:05.007 --> 00:04:10.638
so event.respondwith the response
that we got from the router.

51
00:04:10.638 --> 00:04:14.970
All right, so
we've tried this request and we've tried,

52
00:04:14.970 --> 00:04:19.213
if it failed, then we tried to,
I mean, if it succeeded,

53
00:04:19.213 --> 00:04:23.044
then we tried to put it in the cash and
we returned it.

54
00:04:23.044 --> 00:04:27.380
If it failed for any of the possible
reasons, either we got like a network

55
00:04:27.380 --> 00:04:31.799
failure, or we just didn't get back
a success response like the server.

56
00:04:31.799 --> 00:04:34.103
If we didn't get something,

57
00:04:34.103 --> 00:04:40.198
then what we might wanna do here is try
the fallback of is it in my cache, right?

58
00:04:40.198 --> 00:04:43.286
So we've tried to get it from the server,
but

59
00:04:43.286 --> 00:04:46.777
now we want to say is it in my cache so
let's do that,

60
00:04:46.777 --> 00:04:54.848
let's,
&gt;&gt; Kyle Simpson: Res = await,

61
00:04:54.848 --> 00:04:59.724
actually, I'm gonna need that at a,
this is one of the annoying things

62
00:04:59.724 --> 00:05:03.895
about block scoping is that you
end up having to adjust a lot.

63
00:05:03.895 --> 00:05:07.371
Okay, so Res equals await and

64
00:05:07.371 --> 00:05:12.518
we're gonna do cache.match(reqURL),

65
00:05:12.518 --> 00:05:16.977
so we're asking, is it in the cache?

66
00:05:16.977 --> 00:05:22.073
If so,
&gt;&gt; Kyle Simpson: Then

67
00:05:22.073 --> 00:05:27.216
we're going to return, and here's
another key because we wanna keep that

68
00:05:27.216 --> 00:05:32.275
response that's in the cache,
we wanna be able to use it multiple times,

69
00:05:32.275 --> 00:05:37.601
the thing that we wanna return it's
gotta be res.clone instead of just res.

