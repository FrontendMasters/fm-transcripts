WEBVTT

1
00:00:00.076 --> 00:00:04.440
&gt;&gt; Kyle Simpson: All right, so
now you're getting a sense of how we can

2
00:00:04.440 --> 00:00:08.620
implement our own routing logic
using these different strategies.

3
00:00:08.620 --> 00:00:13.350
We could have, for example, tried
the cache first and then done the fetch.

4
00:00:13.350 --> 00:00:16.490
We could have wrapped this
in an if (isOnline) and

5
00:00:16.490 --> 00:00:19.640
only done the fetch if
we were actually online.

6
00:00:19.640 --> 00:00:25.090
And so to jump a little bit forward in
history, I'm going to wave a magic wand

7
00:00:25.090 --> 00:00:31.240
and pull in from the solution,
one of the interim solutions.

8
00:00:31.240 --> 00:00:33.760
I'm gonna pull in a much
more complete router and

9
00:00:33.760 --> 00:00:38.130
then we're gonna talk about each of the
different pieces, what decisions I made,

10
00:00:38.130 --> 00:00:40.480
instead of having to type all of that out.

11
00:00:42.040 --> 00:00:47.220
Don't worry if you want to type all this
stuff yourself, because this logic is

12
00:00:47.220 --> 00:00:51.910
included in your final solution file, I've
just pulled out an interim step of it.

13
00:00:56.400 --> 00:00:59.590
&gt;&gt; Kyle Simpson: All right, so
now there's a bunch more in our router and

14
00:00:59.590 --> 00:01:01.990
we're gonna walk through what it's doing.

15
00:01:03.050 --> 00:01:08.780
We're still checking to see if we're
handling only our own requests,

16
00:01:08.780 --> 00:01:11.145
but now we need to do some handling,

17
00:01:11.145 --> 00:01:15.700
specific special kind of handling for
any API calls that happen.

18
00:01:16.870 --> 00:01:23.560
In particular, I only wanna do a call,
attempt a fetch if I'm actually online.

19
00:01:23.560 --> 00:01:25.930
So here I have an if (isOnline).

20
00:01:25.930 --> 00:01:28.750
I've set up some fetchOptions here.

21
00:01:28.750 --> 00:01:31.152
And you'll notice that instead
of credentials: "emit",

22
00:01:31.152 --> 00:01:33.220
I'm gonna have credentials: "same-origin".

23
00:01:33.220 --> 00:01:38.178
And that's because at least one of my
API calls, that's the api/add-post,

24
00:01:38.178 --> 00:01:43.200
that does include credentials,
it includes your session cookie in it.

25
00:01:43.200 --> 00:01:47.470
So we need to make sure to send
along any cookies for any API calls.

26
00:01:47.470 --> 00:01:49.740
Even though some of them have it and
some of them don't,

27
00:01:49.740 --> 00:01:51.780
we've gotta make sure to send those along.

28
00:01:51.780 --> 00:01:56.970
We obviously wanna do cache: "no-store" so
that those requests don't get cached.

29
00:01:56.970 --> 00:02:01.130
Now I’ve made a deliberate choice,
this maybe will or

30
00:02:01.130 --> 00:02:03.580
won’t match the kind of thing
that you want to do, but

31
00:02:03.580 --> 00:02:09.670
I’ve decided that I’m only
going to cache my GET requests.

32
00:02:09.670 --> 00:02:16.780
You can’t really cache POST requests, or,
&gt;&gt; Kyle Simpson: POST

33
00:02:16.780 --> 00:02:18.816
responses to POST request.

34
00:02:18.816 --> 00:02:20.383
I mean, technically you can, but

35
00:02:20.383 --> 00:02:23.310
that's a really bad idea to
try to cache a POST request.

36
00:02:23.310 --> 00:02:28.890
GET requests are often more
like retrieving some data set,

37
00:02:28.890 --> 00:02:31.290
which is actually what's
happening on our homepage.

38
00:02:31.290 --> 00:02:36.400
It's loading the list of current
POST IDs from the server,

39
00:02:36.400 --> 00:02:38.250
that's how that list is populated.

40
00:02:38.250 --> 00:02:40.600
And that's the only
GET API call I'm making.

41
00:02:40.600 --> 00:02:43.030
The other two API calls I make are POSTs.

42
00:02:43.030 --> 00:02:46.843
So this is effectively saying,
for my GET API calls,

43
00:02:46.843 --> 00:02:49.750
I want to cache those responses.

44
00:02:49.750 --> 00:02:51.790
So if it came back successfully, and

45
00:02:51.790 --> 00:02:56.010
it was one of my GET API calls,
I'm gonna put a clone of that response in.

46
00:02:56.010 --> 00:02:59.320
So I'm literally putting my
JSON response into there.

47
00:02:59.320 --> 00:03:00.310
Now, why would I be doing that?

48
00:03:01.570 --> 00:03:02.810
Most of the time you probably think,

49
00:03:02.810 --> 00:03:06.900
I don't want to cache my API responses
because I want those to be fresh.

50
00:03:06.900 --> 00:03:10.080
Well, first of all,
I'm trying the request every time.

51
00:03:10.080 --> 00:03:12.670
So my strategy here is request and

52
00:03:12.670 --> 00:03:15.620
then try cache rather than
the other way around.

53
00:03:15.620 --> 00:03:18.330
So if I'm online and

54
00:03:18.330 --> 00:03:23.540
I'm able to make a valid API request,
I'll always get the fresh one.

55
00:03:23.540 --> 00:03:29.340
But if I'm offline, and
this particular API is kind of critical to

56
00:03:29.340 --> 00:03:34.030
the home page experience because it won't
list any blog posts if it doesn't succeed,

57
00:03:34.030 --> 00:03:38.050
I would at minimum like some old
version of the list of POSTs.

58
00:03:38.050 --> 00:03:39.710
Even if it doesn't have new updated data,

59
00:03:39.710 --> 00:03:42.280
it's better to have some
data than no data at all.

60
00:03:42.280 --> 00:03:48.120
So that's why my strategy here was stick
that particular JSON response in my cache.

61
00:03:48.120 --> 00:03:51.155
By the way,
I don't have to use the cache for

62
00:03:51.155 --> 00:03:55.750
that, another way of doing this would
have been to take that JSON data and say,

63
00:03:55.750 --> 00:03:59.900
stuff it in an indexDB record,
for example.

64
00:03:59.900 --> 00:04:01.000
And I've also done that.

65
00:04:01.000 --> 00:04:04.110
In a little while, we'll talk
about using IndexedDB for things.

66
00:04:04.110 --> 00:04:08.910
But in this particular case,
what I wanted to do was just simply cache

67
00:04:08.910 --> 00:04:13.060
that JSON response and then send
it back as if it was coming live.

68
00:04:13.060 --> 00:04:18.150
So if it came through correctly,
I cached it and then I return it.

69
00:04:18.150 --> 00:04:22.710
Now if that fails, meaning I was not
able to get a successful response,

70
00:04:22.710 --> 00:04:25.620
then I wanna check to see if there's
a previously cached version.

71
00:04:25.620 --> 00:04:28.960
So that's what my cache.match is,
and it's returning it.

72
00:04:28.960 --> 00:04:32.680
And if both of those fail,
if I'm unable to request the API and

73
00:04:32.680 --> 00:04:36.840
I don't have a cached version of it,
then I'm gonna simply return.

74
00:04:36.840 --> 00:04:39.490
And in this case,
my my function is notFoundResponse.

75
00:04:39.490 --> 00:04:42.200
That's like a network level 404.

76
00:04:42.200 --> 00:04:45.960
Because I know these are AJAX calls,
we don't need to send any content,

77
00:04:45.960 --> 00:04:51.180
we can just send the 404, and tell it,
that failed, you couldn't get it.

78
00:04:51.180 --> 00:04:55.299
So if you wanna see Not Found response,
you can make your own responses.

79
00:04:56.350 --> 00:05:00.750
So we can use the Response constructor,
give it a status, give it a status text.

80
00:05:00.750 --> 00:05:06.636
You can literally even inject body content
if you wanted to make up a real request,

81
00:05:06.636 --> 00:05:07.930
a status 200.

82
00:05:07.930 --> 00:05:13.734
You can do whatever you want here,
but I'm making up a 404 response so

83
00:05:13.734 --> 00:05:18.390
that the page can know that
the AJAX failed, okay?

84
00:05:18.390 --> 00:05:20.610
So that's how I'm handling my APIs.

85
00:05:20.610 --> 00:05:24.180
I just decided I would try to
always hit the server first.

86
00:05:24.180 --> 00:05:26.849
If not, fall back to the cache but
only for

87
00:05:26.849 --> 00:05:32.250
the GETs
&gt;&gt; Kyle Simpson: What about for

88
00:05:32.250 --> 00:05:35.230
the difference between loading
a JavaScript file versus

89
00:05:35.230 --> 00:05:37.470
loading an HTML file?

90
00:05:37.470 --> 00:05:40.260
In my opinion, there should be
a different caching strategy, or

91
00:05:40.260 --> 00:05:42.680
a different service
worker strategy involved.

92
00:05:42.680 --> 00:05:47.650
For example, with pages,
I kind of always wanna check and

93
00:05:47.650 --> 00:05:49.290
see if there's a new page at the server.

94
00:05:49.290 --> 00:05:52.340
If I'm online, I wanna go ahead and
request the HTML.

95
00:05:53.350 --> 00:05:57.876
But if I am loading up the style CSS,
and that's already in the cache,

96
00:05:57.876 --> 00:06:01.970
there's no particular reason to go ask for
that new style CSS.

97
00:06:01.970 --> 00:06:06.204
In other words, if I wanna push out
a new style CSS, I'll handle that by

98
00:06:06.204 --> 00:06:10.310
updating the version in my service
worker and refreshing the cache.

99
00:06:10.310 --> 00:06:12.590
Remember, I wanted everything
to sort of be atomic.

100
00:06:12.590 --> 00:06:14.570
So everything is generally
atomic except for

101
00:06:14.570 --> 00:06:18.450
my pages, I do want to allow
those to give fresh content.

102
00:06:18.450 --> 00:06:22.380
If I have a typo on my about page,
I don't feel like I should have to reload

103
00:06:22.380 --> 00:06:25.720
the whole page just to
fix a typo in that HTML.

104
00:06:25.720 --> 00:06:27.150
You follow where I'm coming from?

105
00:06:27.150 --> 00:06:29.850
So that's just the strategy I decided for
here.

106
00:06:29.850 --> 00:06:34.260
Which is, and this is a trick,
I'm looking at the request headers,

107
00:06:34.260 --> 00:06:39.860
if there's an accept header that
is accepting text HTML content,

108
00:06:39.860 --> 00:06:44.010
then I know it must have been
a navigation to an HTML page.

109
00:06:44.010 --> 00:06:48.010
Cuz otherwise the browser wouldn't have
put that Accept header in the request.

110
00:06:48.010 --> 00:06:51.920
So another way I could have done that is
just hard code the URLs that I care about.

111
00:06:51.920 --> 00:06:55.340
But here,
I'm kinda using the trick that I know that

112
00:06:55.340 --> 00:06:57.700
we're gonna be requesting an HTML page.

113
00:06:57.700 --> 00:07:02.630
Now, I have different kinds of HTML
pages that there's some nuance here.

114
00:07:02.630 --> 00:07:08.290
So these requests for login,
logout, and add-post, they are much

115
00:07:08.290 --> 00:07:12.780
more sensitive because they're sensitive
to whether or not I'm logged in or not.

116
00:07:12.780 --> 00:07:16.050
And especially the online/offline
behavior I wanna be careful with.

117
00:07:16.050 --> 00:07:19.190
So right now, I'm just gonna leave those
as a to-do, we're not gonna handle those.

118
00:07:19.190 --> 00:07:22.600
Well, in our next section of discussion,
we'll talk about how to handle those.

119
00:07:22.600 --> 00:07:27.627
But down here, if I'm in one of
those regular pages like /about or

120
00:07:27.627 --> 00:07:32.700
/contact, again, my strategy is
only do the fetch if I'm online.

121
00:07:32.700 --> 00:07:36.420
So that's similar to the one before,
only do the fetch if I'm online.

122
00:07:36.420 --> 00:07:39.360
Here, I'm gonna use the method and
headers.

123
00:07:39.360 --> 00:07:42.220
I don't specify anything
about credentials.

124
00:07:42.220 --> 00:07:46.337
So I don't need any credentials for any
of the pages that I'm gonna be requiring,

125
00:07:46.337 --> 00:07:47.900
I only need credentials here.

126
00:07:47.900 --> 00:07:49.770
So I could have said credentials.omit, but

127
00:07:49.770 --> 00:07:52.090
it's not necessary unless
you really need to say that.

128
00:07:53.170 --> 00:07:55.430
I make my AJAX request.

129
00:07:55.430 --> 00:07:58.560
If it was successful,
now here's a little nuance.

130
00:07:58.560 --> 00:08:05.430
I have my server setup that if it
returns the friendly 404 page, right?

131
00:08:07.110 --> 00:08:11.650
That is the server saying
that page doesn't exist but

132
00:08:11.650 --> 00:08:14.510
I'm not actually returning
a 404 network response.

133
00:08:14.510 --> 00:08:19.560
I'm returning a 200 network response
with a friendly for a 404 page.

134
00:08:19.560 --> 00:08:24.550
I want for my service worker to know that
we didn't legitimately find the resource,

135
00:08:24.550 --> 00:08:30.980
because I don't want to cache another copy
of the friendly 404 page under some URL.

136
00:08:30.980 --> 00:08:33.640
Then I might have a whole bunch
of exploded cache with a bunch of

137
00:08:33.640 --> 00:08:34.750
wasted stuff.

138
00:08:34.750 --> 00:08:38.305
So my server specifically
appends a custom header called

139
00:08:38.305 --> 00:08:43.650
X-Not-Found in the case where it's
sending out the friendly 404 page.

140
00:08:43.650 --> 00:08:46.290
And I'm saying, if it's not one of those,

141
00:08:46.290 --> 00:08:50.210
if it's not the friendly 404 page,
then put it into my cache.

142
00:08:51.750 --> 00:08:56.711
If it's the friendly 404 page,
just display it but don't cache it, okay?

143
00:09:00.710 --> 00:09:04.110
&gt;&gt; Kyle Simpson: And then, again, if we
get here, it's because the network request

144
00:09:04.110 --> 00:09:08.590
failed or we were offline, so let's go
ahead and try to see if it's in the cache.

145
00:09:08.590 --> 00:09:10.420
And if it is in the cache, use it.

146
00:09:10.420 --> 00:09:17.360
And now we finally see, what do I do if
both the request and the cache fail me?

147
00:09:17.360 --> 00:09:21.630
Well then, I just wanna go ahead and
unconditionally serve up the offline page.

148
00:09:21.630 --> 00:09:25.960
That tells the user, I kinda don't
know whether the page exists or

149
00:09:25.960 --> 00:09:29.350
not, but
I know I don't have anything to give you.

150
00:09:29.350 --> 00:09:32.030
So I'm gonna friendly
tell you you're offline,

151
00:09:32.030 --> 00:09:33.389
try again when you're back online.

152
00:09:37.600 --> 00:09:40.829
&gt;&gt; Kyle Simpson: All right, now if I'm
not in one of the HTML page requests,

153
00:09:40.829 --> 00:09:44.650
I want a different strategy involved,
I wanna check the cache first.

154
00:09:44.650 --> 00:09:49.180
So here I'm gonna do cache.match,
and there's my request URL.

155
00:09:50.620 --> 00:09:52.280
And if that succeeds, great.

156
00:09:52.280 --> 00:09:56.455
If that fails,
then I want to check to see if I'm online.

157
00:09:56.455 --> 00:10:00.190
Cuz, again, I don't wanna make a request
if there's no reason to make a request.

158
00:10:00.190 --> 00:10:03.210
If I'm online,
I'll try to make an AJAX call.

159
00:10:04.700 --> 00:10:07.360
I know I don't need any credentials here.

160
00:10:07.360 --> 00:10:13.280
If I succeed, then go ahead and
update the cache with it.

161
00:10:13.280 --> 00:10:15.490
So in other words,
I might have already had the style CSS.

162
00:10:17.790 --> 00:10:21.550
Well, if I already had the style CSS,
then it would have matched here.

163
00:10:21.550 --> 00:10:25.810
But if I for some reason that wasn't in
the cache, then I request it, go ahead and

164
00:10:25.810 --> 00:10:27.610
stuff it in the cache.

165
00:10:27.610 --> 00:10:33.440
And if I get here, either we were
offline or the cache failed and

166
00:10:33.440 --> 00:10:38.440
we were offline, in which case I give
them another network level 404 response.

167
00:10:38.440 --> 00:10:43.720
Now, that's a little bit different
than what I did with an HTML page.

168
00:10:43.720 --> 00:10:49.710
It's because we don't need to serve up the
friendly 404 page to a request for CSS.

169
00:10:51.030 --> 00:10:55.300
The browser, if it can't load any CSS,
it ought to just get a 404,

170
00:10:55.300 --> 00:10:58.990
same thing as we did with the AJAX,
make sense?

171
00:10:58.990 --> 00:11:00.550
So all of these things that I'm doing,

172
00:11:00.550 --> 00:11:03.210
these are all very careful
thoughts that I had to have.

173
00:11:03.210 --> 00:11:05.530
I had to ask myself all
these different things.

174
00:11:05.530 --> 00:11:07.840
What would be the appropriate
response in this case?

175
00:11:07.840 --> 00:11:09.640
And what would be the proper response?

176
00:11:09.640 --> 00:11:12.360
Point is, I have complete and
total control.

177
00:11:12.360 --> 00:11:15.940
I can write as much or as little of
that logic as makes sense for me.

178
00:11:16.980 --> 00:11:20.430
A lot of the frameworks
that we talked about, or

179
00:11:20.430 --> 00:11:23.323
the frameworks that we talked about,
like for example,

180
00:11:23.323 --> 00:11:27.940
Workbox, from my observation, they
make a lot of these decisions for you.

181
00:11:27.940 --> 00:11:31.250
You make a lot of very high-level
declarative statements,

182
00:11:31.250 --> 00:11:33.380
like which strategy you want.

183
00:11:33.380 --> 00:11:37.440
And all these nuance kinds of things,
like checking for

184
00:11:37.440 --> 00:11:41.480
a specific header from the server,
that's not really a thing.

185
00:11:41.480 --> 00:11:45.950
So there's a trade-off here, as with all
things, you can much more quickly get

186
00:11:45.950 --> 00:11:49.330
a service worker working without
having to write all this if logic.

187
00:11:49.330 --> 00:11:53.966
But then you don't have control in those
different cases, which might mean that

188
00:11:53.966 --> 00:11:59.022
the user experience is acceptable or not
acceptable, depending on your perspective.

