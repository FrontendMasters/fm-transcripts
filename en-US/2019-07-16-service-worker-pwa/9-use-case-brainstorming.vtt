WEBVTT

1
00:00:00.220 --> 00:00:04.960
&gt;&gt; Kyle Simpson: So caching is kind of
the major use case that you start with,

2
00:00:04.960 --> 00:00:08.960
usually with service workers, is I wanna
do something different with the caching

3
00:00:08.960 --> 00:00:12.820
behavior than what normally
happens with my files.

4
00:00:12.820 --> 00:00:16.720
That's what usually motivates you to say
I'm gonna writing some of this routing

5
00:00:16.720 --> 00:00:18.490
logic for myself.

6
00:00:18.490 --> 00:00:22.730
But caching is certainly
just scratching the surface.

7
00:00:22.730 --> 00:00:26.950
If we think about the idea that
we can intercept requests.

8
00:00:26.950 --> 00:00:29.150
I'm just gonna start brain storming here,
but

9
00:00:29.150 --> 00:00:33.220
let's just brainstorm,
what are some things that I could do.

10
00:00:33.220 --> 00:00:36.450
Imagine, if I could code
the browser itself and

11
00:00:36.450 --> 00:00:40.410
make the browser do whatever I want with
my web page, what would that look like?

12
00:00:40.410 --> 00:00:41.850
What are things that I could do?

13
00:00:41.850 --> 00:00:42.520
Did you have an idea?

14
00:00:42.520 --> 00:00:45.360
&gt;&gt; Student: You could
do offline computing.

15
00:00:45.360 --> 00:00:48.930
So you could do work and
then when you connect it saves.

16
00:00:48.930 --> 00:00:51.040
&gt;&gt; Kyle Simpson: That's exactly right,
and we're gonna talk a lot about that.

17
00:00:51.040 --> 00:00:56.130
So you could enable this offline usecase,
that's both caching and then there's

18
00:00:56.130 --> 00:01:00.790
another API that's called background
sync which we'll talk about later today.

19
00:01:00.790 --> 00:01:04.470
And you could enable those
sorts of things to do,

20
00:01:04.470 --> 00:01:08.350
if you've ever worked with Google Docs and
you've been editing a spreadsheet or

21
00:01:08.350 --> 00:01:11.250
something and you were completely offline
and then you came back online and

22
00:01:11.250 --> 00:01:15.410
it was all of a sudden had,
all the resources have been saved.

23
00:01:15.410 --> 00:01:20.310
Or you were able to open up a spreadsheet
when you are offline even though you

24
00:01:20.310 --> 00:01:23.330
didn't open it before when you were
online all that sort of stuff.

25
00:01:23.330 --> 00:01:26.210
That's definitely we can manage
sort of offline ability.

26
00:01:26.210 --> 00:01:27.470
That's a great use case.

27
00:01:27.470 --> 00:01:28.080
Yeah.

28
00:01:28.080 --> 00:01:31.980
&gt;&gt; Student2: I sit on the board of this
organization called One Village Partners

29
00:01:31.980 --> 00:01:37.002
and they have workers they go out
in the villages in Sierra Leone and

30
00:01:37.002 --> 00:01:43.310
they do work with the local villagers and
record data.

31
00:01:43.310 --> 00:01:46.720
And wanna be able to do that and
come back with it,

32
00:01:46.720 --> 00:01:50.600
cuz they don't always have good
internet connection out there,

33
00:01:50.600 --> 00:01:53.420
and they use a software package
that requires the internet.

34
00:01:54.480 --> 00:01:59.330
&gt;&gt; Kyle Simpson: Yeah, so if that software
package were employing a service worker

35
00:01:59.330 --> 00:02:02.520
then it could be storing
that kind of information.

36
00:02:02.520 --> 00:02:06.810
I want to make it clear that we've
had the ability to store data

37
00:02:06.810 --> 00:02:11.590
in web pages persistently, for decades.

38
00:02:11.590 --> 00:02:14.420
We've had local storage,
we've had session storage.

39
00:02:16.190 --> 00:02:21.110
We've had index dB, which we're gonna talk
about later and other web database stuff.

40
00:02:21.110 --> 00:02:25.664
So the idea of storing some data
that's been collected somewhere

41
00:02:25.664 --> 00:02:29.815
in a web page is not new and
it's not new to service workers.

42
00:02:29.815 --> 00:02:33.827
But particularly what's new at the same
time as we got service workers,

43
00:02:33.827 --> 00:02:36.330
is we now have this caching API.

44
00:02:36.330 --> 00:02:40.690
And by the way the caching API is not
only exposed to your service worker.

45
00:02:40.690 --> 00:02:44.880
You can actually access the cache
API from your web page.

46
00:02:44.880 --> 00:02:49.180
You won't be able to do nearly as much
with it in a web page, because you're not

47
00:02:49.180 --> 00:02:54.720
doing the same kinds of request intercept
that you're doing in a service worker.

48
00:02:54.720 --> 00:02:56.690
That magic part isn't happening.

49
00:02:56.690 --> 00:03:01.160
But you could literally look in
the cash inside of your web page, and

50
00:03:01.160 --> 00:03:04.200
see whether or
not something was already cached.

51
00:03:04.200 --> 00:03:07.170
And because you have access to
the cache API from your page

52
00:03:07.170 --> 00:03:09.520
before an outbound request
has even gone out.

53
00:03:09.520 --> 00:03:12.550
That's something you can't do
with a normal browser cache.

54
00:03:12.550 --> 00:03:13.890
You don't know if something's cached.

55
00:03:13.890 --> 00:03:16.730
You can just request it and
either get it or not.

56
00:03:16.730 --> 00:03:20.590
But now with cache API we can tell
what's programmatically in there.

57
00:03:20.590 --> 00:03:26.290
Those are exactly right, so storing data,
storing web resources like our HTML and

58
00:03:26.290 --> 00:03:29.760
CSS files,
storing those in this offline ability way,

59
00:03:29.760 --> 00:03:32.520
that's a major primary use
case of service workers.

60
00:03:32.520 --> 00:03:33.140
Yeah?

61
00:03:33.140 --> 00:03:38.090
&gt;&gt; Student: So, back to your point that,
that existed though, you could do it, but

62
00:03:38.090 --> 00:03:43.290
I think to me the part that I'm interested
in is the set it and forget it part,

63
00:03:43.290 --> 00:03:48.570
where I can do that and I don't have
to remember to come back and sync it.

64
00:03:48.570 --> 00:03:50.650
One of the things,
like I said, I work for the U,

65
00:03:50.650 --> 00:03:55.200
and we want to do some kind of an app for
check in, if there's an emergency,

66
00:03:55.200 --> 00:03:58.269
which would obviously
heavily impact services.

67
00:03:59.270 --> 00:04:04.451
So for people that are off site or
somewhere around the world for

68
00:04:04.451 --> 00:04:09.728
them to be able to check in but
as intermittent services come in,

69
00:04:09.728 --> 00:04:14.530
the app could be checking and
registering location.

70
00:04:14.530 --> 00:04:15.520
&gt;&gt; Kyle Simpson: Yep.

71
00:04:15.520 --> 00:04:17.770
&gt;&gt; Student: Versus them
sitting in there and waiting.

72
00:04:17.770 --> 00:04:20.430
And waiting and waiting, it didn't work,
didn't work, didn't work and we try.

73
00:04:20.430 --> 00:04:24.530
So to me that's the piece that
I'm looking for is that fill in.

74
00:04:24.530 --> 00:04:28.390
&gt;&gt; Kyle Simpson: So there's a bunch
of nuance in what you just mentioned,

75
00:04:29.410 --> 00:04:31.300
some of which I'll
briefly touch on here and

76
00:04:31.300 --> 00:04:35.180
some of which we'll touch on as we come
back towards the end of the workshop.

77
00:04:36.330 --> 00:04:41.320
So number one you mentioned the idea
of capturing somebody's location.

78
00:04:41.320 --> 00:04:43.070
Only the web page can do that.

79
00:04:43.070 --> 00:04:47.540
And only if the user has actively
granted access to geolocation.

80
00:04:47.540 --> 00:04:50.880
So a service worker does not have
access to your location, and

81
00:04:50.880 --> 00:04:53.730
it can't track your
location in the background.

82
00:04:53.730 --> 00:04:59.250
So for example,
if somebody had GPS connection but

83
00:04:59.250 --> 00:05:01.530
didn't have a WiFi connection for

84
00:05:01.530 --> 00:05:06.250
some reason, then you could have captured
their current GPS coordinate, and

85
00:05:06.250 --> 00:05:12.700
then saved that into local storage or
index DB or something like that.

86
00:05:12.700 --> 00:05:16.440
And then at a later time when you
detect that they're online and

87
00:05:16.440 --> 00:05:20.380
they have a WiFi connection You
could ajax that off to a server.

88
00:05:20.380 --> 00:05:23.920
But that won't be the same thing as
saying where are they currently now,

89
00:05:23.920 --> 00:05:27.700
it'll only be saying where were
they eight hours ago or whatever?

90
00:05:27.700 --> 00:05:29.740
&gt;&gt; Student: Yeah, I'm not looking for
that, I'm looking for

91
00:05:29.740 --> 00:05:33.565
an app that they would check in, that they
would do it, or actively do a check in.

92
00:05:33.565 --> 00:05:34.173
&gt;&gt; Kyle Simpson: Yeah.

93
00:05:34.173 --> 00:05:36.515
&gt;&gt; Student: But maybe they don't
have access so they can't,

94
00:05:36.515 --> 00:05:37.590
it doesn't get to us.

95
00:05:37.590 --> 00:05:41.340
&gt;&gt; Kyle Simpson: It's just that location
data is usually kind of time sensitive.

96
00:05:41.340 --> 00:05:44.690
And the idea of background sync cuz
you can't predict, it could be days or

97
00:05:44.690 --> 00:05:49.400
weeks before they were ever in a place
where it just automatically kicked in.

98
00:05:49.400 --> 00:05:54.060
So the other thing about, so
just just to make sure we're clear,

99
00:05:54.060 --> 00:05:55.780
there are use cases.

100
00:05:55.780 --> 00:05:58.470
In fact, the app that I was
talking about that I built,

101
00:05:58.470 --> 00:06:02.940
I want to be able to track where my
location is even if the app's not open.

102
00:06:02.940 --> 00:06:06.730
That's a thing that you might wanna be
able to do for convenience, not for

103
00:06:06.730 --> 00:06:10.650
annoyance or for privacy purposes, I just
want, when I walk into a restaurant,

104
00:06:10.650 --> 00:06:13.990
I want it to pop up and say here's
your notes from this restaurant.

105
00:06:13.990 --> 00:06:18.310
I wanna be able to notice my location and
even if it's literally just me,

106
00:06:18.310 --> 00:06:23.170
I would like that option and that API
literally doesn't exist right now.

107
00:06:23.170 --> 00:06:31.170
Because of privacy concerns,
your native apps on your Android or

108
00:06:31.170 --> 00:06:35.640
iOS devices, they have very limited
capability of tracking your

109
00:06:35.640 --> 00:06:41.160
background location running in
the background of various services.

110
00:06:41.160 --> 00:06:44.720
It's quite complex to build that and they
haven't exposed that at all to the web

111
00:06:44.720 --> 00:06:47.540
layer, and they probably not ever
gonna expose it to the web layer,

112
00:06:47.540 --> 00:06:53.900
cuz they're worried that websites will
somehow abuse that sort of information.

113
00:06:53.900 --> 00:06:58.100
So there are reasons why you might
want to keep somebody's information

114
00:06:58.100 --> 00:07:01.760
about their location in the background,
and that's just not possible right now.

115
00:07:01.760 --> 00:07:05.990
So from my app I'm
considering having my web app

116
00:07:05.990 --> 00:07:10.110
have a helper native app that's installed
that does the background tracking.

117
00:07:10.110 --> 00:07:13.080
And there's always a remote that data
over to the web app or something.

118
00:07:13.080 --> 00:07:16.430
But that's not a thing that the web
platform has and may never have.

119
00:07:18.026 --> 00:07:21.940
People have asked for
APIs like geofencing, which is saying,

120
00:07:21.940 --> 00:07:26.770
I don't wanna know exactly where somebody
is, but can I pre-set some geometric

121
00:07:26.770 --> 00:07:31.340
coordinate that when they either enter or
leave that area, I get notified.

122
00:07:31.340 --> 00:07:36.540
And there was a proposal to have
geofencing and then that was for

123
00:07:36.540 --> 00:07:41.260
all other privacy reasons
also didn't happen that way.

124
00:07:41.260 --> 00:07:43.470
At least not exposed to the web layer.

125
00:07:43.470 --> 00:07:48.760
So understanding the limitations
where somebody might be able to,

126
00:07:48.760 --> 00:07:52.010
it's not terribly common that somebody
has GPS but doesn't have internet.

127
00:07:52.010 --> 00:07:54.470
Usually if they don't have internet,

128
00:07:54.470 --> 00:07:57.620
they're not able to do
the triangulation with the GPS.

129
00:07:57.620 --> 00:08:00.650
But if they're in that situation where for
some reason they don't have WiFi but

130
00:08:00.650 --> 00:08:05.520
they do have a legitimate GPS coordinate,
you could in theory store that, store it

131
00:08:05.520 --> 00:08:11.270
with a time stamp and then just the caveat
that, hey, this data is three hours old,

132
00:08:11.270 --> 00:08:15.520
but at least we know three hours ago
where they were, or something like that.

133
00:08:15.520 --> 00:08:18.630
The other thing to understand
about background sync, and

134
00:08:18.630 --> 00:08:21.540
we're going to get more into
this again at the end, but

135
00:08:21.540 --> 00:08:26.760
in background sync that is basically
saying to the service worker,

136
00:08:26.760 --> 00:08:30.290
I have a thing that I want to have
happen and you can't complete it now.

137
00:08:30.290 --> 00:08:33.910
And it might be that we
shut down the tab entirely,

138
00:08:33.910 --> 00:08:36.940
like the browsers,
the tab is gone or whatever.

139
00:08:36.940 --> 00:08:41.520
But in the background I want you to
try to see whether or not I've come

140
00:08:41.520 --> 00:08:45.850
back online and make that request on
my behalf even if the page isn't there.

141
00:08:45.850 --> 00:08:48.270
That's sort of the dream of this.

142
00:08:48.270 --> 00:08:54.380
Background sync is a spec and it's been
in parts implemented in one browser.

143
00:08:54.380 --> 00:08:57.930
It's not a reality across
the web right now and

144
00:08:57.930 --> 00:09:00.660
it may never be, because there again or

145
00:09:00.660 --> 00:09:04.770
a bunch of potential ways that that
could end up getting abused or whatever.

146
00:09:04.770 --> 00:09:09.849
But there's somewhat lesser forms of
background sync like storing things

147
00:09:09.849 --> 00:09:14.454
persistently, so if they come back
to it there data is still there.

148
00:09:14.454 --> 00:09:17.730
And that's what we're gonna do,
we're not gonna do background sync today.

149
00:09:17.730 --> 00:09:20.120
I just wanted to point out there
are a bunch of caveats to this,

150
00:09:20.120 --> 00:09:22.550
I wish we had perfect everything.

151
00:09:22.550 --> 00:09:28.832
But we have to balance that against
privacy and abuse concerns.

152
00:09:28.832 --> 00:09:30.902
&gt;&gt; Kyle Simpson: Let me throw
out some other ideas for

153
00:09:30.902 --> 00:09:35.670
what we could do if we were intercepting
outbound requests from a website.

154
00:09:35.670 --> 00:09:39.090
We can do transparent URL rewriting.

155
00:09:39.090 --> 00:09:42.890
So we can have a web page that's
requesting an image from one location,

156
00:09:42.890 --> 00:09:48.000
maybe from one CDN, and the service worker
might have decided that that CDN is down

157
00:09:48.000 --> 00:09:50.310
because another request failed, and

158
00:09:50.310 --> 00:09:52.710
it might rewrite it to
a different CDN location.

159
00:09:52.710 --> 00:09:57.200
And request it from there instead of
from the place that was asked for.

160
00:09:57.200 --> 00:09:59.080
So then you didn't have
to update the HTML,

161
00:09:59.080 --> 00:10:03.041
it was just sort of transparently
load balancing the different CDNs.

162
00:10:04.180 --> 00:10:05.000
You can have

163
00:10:06.350 --> 00:10:10.620
programmatically created content
that's responded to from the client.

164
00:10:10.620 --> 00:10:12.964
So for example, if you are offline and

165
00:10:12.964 --> 00:10:17.870
somebody makes an Ajax request to get some
data, you might be able to just create

166
00:10:17.870 --> 00:10:22.193
an artificial JSON response from your
code and your service worker and

167
00:10:22.193 --> 00:10:26.539
send it back to the web page and
the web page won't know any different.

168
00:10:26.539 --> 00:10:29.032
It'll think that it just
got it from the server, but

169
00:10:29.032 --> 00:10:32.720
now it was data that was artificially
constructed and sent back.

170
00:10:32.720 --> 00:10:36.440
Or you could have used a cached
response to it like we talked about.

171
00:10:36.440 --> 00:10:41.730
So the idea of using cache means that when
you're clicking around the user thing,

172
00:10:41.730 --> 00:10:44.580
it looks like I'm online,
even if they're not online because they're

173
00:10:44.580 --> 00:10:49.510
still getting HTML and Ajax and
all that other stuff back.

174
00:10:49.510 --> 00:10:51.974
You can do even more sophisticated things.

175
00:10:51.974 --> 00:10:56.087
For example,
if a web page requests a single file,

176
00:10:56.087 --> 00:10:59.626
let's say it requests a single image file,

177
00:10:59.626 --> 00:11:04.697
the service worker could say I
know that because they requested

178
00:11:04.697 --> 00:11:10.264
that image file they're also likely
to request these other things.

179
00:11:10.264 --> 00:11:11.317
So I'm gonna go head and

180
00:11:11.317 --> 00:11:14.844
request these other things on behalf of
the page, get them primed and ready, so

181
00:11:14.844 --> 00:11:18.480
sort of a programmatic pre-fetching kind
of thing that the web page doesn't even

182
00:11:18.480 --> 00:11:22.250
know is happening, but the service
worker is doing in the background.

183
00:11:22.250 --> 00:11:24.570
You could go even one step further.

184
00:11:24.570 --> 00:11:27.130
When they request a single image,

185
00:11:27.130 --> 00:11:30.440
you could actually force
multiple resources to the page.

186
00:11:30.440 --> 00:11:34.030
So you could respond with the one
image and then, because it's a worker,

187
00:11:34.030 --> 00:11:39.370
you could send a message to the page that
tells the page to ask for more resources.

188
00:11:39.370 --> 00:11:41.500
So that's like dependency injection.

189
00:11:41.500 --> 00:11:44.830
You've asked for this one thing, I know
you need these other three things as well,

190
00:11:44.830 --> 00:11:47.950
so I'm gonna give you all four things
even though you only asked for one.

191
00:11:47.950 --> 00:11:52.240
So, there's all kinds of
sophisticated stuff that we can do

192
00:11:52.240 --> 00:11:56.490
when we have programmatic control over
every outbound request from a page.

193
00:11:57.900 --> 00:12:01.530
And there's probably a dozen others
that we're not talking about here.

