WEBVTT

1
00:00:00.080 --> 00:00:03.560
&gt;&gt; Kyle Simpson: Let's go ahead and
switch over to our browser,

2
00:00:04.960 --> 00:00:07.190
I'm sorry, to our code editor.

3
00:00:07.190 --> 00:00:11.610
And you'll notice that in that directory
where we're doing the web worker exercise,

4
00:00:11.610 --> 00:00:15.350
there's a web directory and
inside it a JS directory.

5
00:00:15.350 --> 00:00:19.326
And inside of that two JavaScript files,
one is called home.js,

6
00:00:19.326 --> 00:00:21.665
the other one's called worker.js.

7
00:00:21.665 --> 00:00:24.580
Home.js is the code that is loaded up on

8
00:00:24.580 --> 00:00:27.520
that particular web page that
we were just looking at.

9
00:00:27.520 --> 00:00:30.350
It's the one that's gonna handle
the button clicks and all that.

10
00:00:30.350 --> 00:00:34.890
Worker.js is the thing that we're
gonna spin up in another worker.

11
00:00:34.890 --> 00:00:38.240
So let's just explore this code, make
sure we understand what's happening here.

12
00:00:38.240 --> 00:00:44.120
I've got references to my button and
also my Fibonacci numbers list.

13
00:00:44.120 --> 00:00:49.200
And then I've got an event handler on my
start stop button, that when I click it

14
00:00:49.200 --> 00:00:55.370
the first time, it's going to start
asking for Fibonacci numbers.

15
00:00:55.370 --> 00:00:59.090
So here at this to do comment, that's
where we're gonna spin up our worker and

16
00:00:59.090 --> 00:01:03.940
ask it to start doing it's computation.

17
00:01:06.000 --> 00:01:09.510
And then it switches it from
a start to a stop button.

18
00:01:09.510 --> 00:01:12.860
And when we click stop,
that's down here on this to do comment,

19
00:01:12.860 --> 00:01:15.610
that's where we're gonna
wanna terminate the worker.

20
00:01:15.610 --> 00:01:19.970
And then it'll flip back to a start button
so we can start it over and over again.

21
00:01:19.970 --> 00:01:23.970
But we don't want it to just sit there and
run and kill our battery [LAUGH].

22
00:01:23.970 --> 00:01:26.730
A quick note on this,
when you're developing on these things,

23
00:01:26.730 --> 00:01:28.880
it's very easy to leave that
stuff running in the background,

24
00:01:28.880 --> 00:01:30.160
and all of a sudden your battery's dead.

25
00:01:30.160 --> 00:01:34.520
So make sure you actually kill these
things and don't let them just run.

26
00:01:34.520 --> 00:01:37.998
If you're like me, you'll hear your
fan spin up before too long [LAUGH].

27
00:01:37.998 --> 00:01:41.109
So all right, let's talk about
how we're gonna make a worker.

28
00:01:41.109 --> 00:01:42.549
First thing we wanna do,

29
00:01:42.549 --> 00:01:47.082
is since we're gonna need to access it
across several different functions and

30
00:01:47.082 --> 00:01:52.660
asynchronously, we're gonna go ahead and
make a worker variable to assign to.

31
00:01:52.660 --> 00:01:54.488
So line six, make a worker variable.

32
00:01:58.765 --> 00:02:01.233
&gt;&gt; Kyle Simpson: And
then in our startFibs function,

33
00:02:01.233 --> 00:02:04.900
this is where we're going
to instantiate our worker.

34
00:02:04.900 --> 00:02:12.330
So we're gonna say, worker = new Worker.

35
00:02:12.330 --> 00:02:15.950
By the way,
web workers have been in browsers for

36
00:02:15.950 --> 00:02:20.240
five to seven-ish years,
somewhere in that range.

37
00:02:20.240 --> 00:02:23.470
Almost all browsers you're gonna
be supporting are gonna have it.

38
00:02:23.470 --> 00:02:27.850
But if you really are concerned, you
should probably do some feature detection

39
00:02:27.850 --> 00:02:30.950
and have a fallback if there isn't
gonna be a web worker involved.

40
00:02:30.950 --> 00:02:35.470
You can check to see whether or not
worker is defined in the global space and

41
00:02:35.470 --> 00:02:38.660
use it that way,
use the type of operator, for example.

42
00:02:38.660 --> 00:02:39.690
But we'll just assume for

43
00:02:39.690 --> 00:02:43.940
our purposes that we're definitely working
in browsers that have web workers.

44
00:02:43.940 --> 00:02:45.660
Certainly if you have
service worker support,

45
00:02:45.660 --> 00:02:47.680
you're gonna have web worker support.

46
00:02:47.680 --> 00:02:53.317
So the way that this worker constructor
works is that we need to give it a URL for

47
00:02:53.317 --> 00:02:57.857
a JavaScript file that we want
it to load in a separate thread.

48
00:02:57.857 --> 00:03:02.600
So that's gonna be /js/worker.js.

49
00:03:05.132 --> 00:03:09.198
&gt;&gt; Kyle Simpson: And that is actually all
that is technically required to spin off

50
00:03:09.198 --> 00:03:10.850
a web worker.

51
00:03:10.850 --> 00:03:13.868
Now, we don't have any
eventing between the two, so

52
00:03:13.868 --> 00:03:18.093
spinning off a web worker that just
kind of runs in the background wouldn't

53
00:03:18.093 --> 00:03:20.795
necessarily be able to do
a lot of useful stuff.

54
00:03:20.795 --> 00:03:24.823
However, it is possible that this
might be all you literally need to do.

55
00:03:24.823 --> 00:03:29.211
Because the web worker does have,
while it doesn't have access to things

56
00:03:29.211 --> 00:03:34.210
like your DOM and stuff like that,
the web worker does have network access.

57
00:03:34.210 --> 00:03:39.050
So a web worker could technically be
making ping communications to your server,

58
00:03:39.050 --> 00:03:42.590
or sending information that it gathered.

59
00:03:42.590 --> 00:03:45.460
So it's not gonna be able to pull
stuff from your web page, but

60
00:03:45.460 --> 00:03:50.580
it might be able to pull
stuff from other locations,

61
00:03:50.580 --> 00:03:53.600
or just say hey, I'm still alive,
or something like that.

62
00:03:53.600 --> 00:03:58.550
So we've spun up a worker,
we want to actually talk to it,

63
00:03:58.550 --> 00:03:59.940
so we need two pieces.

64
00:03:59.940 --> 00:04:03.317
We need to be able to listen to
messages that come from it, and

65
00:04:03.317 --> 00:04:05.850
then we need to be able
to send messages to it.

66
00:04:05.850 --> 00:04:11.282
So we are going to say
worker.addEventListener,

67
00:04:11.282 --> 00:04:16.343
and we're gonna listen for
the message event.

68
00:04:16.343 --> 00:04:23.063
And we're gonna define a function called
onMessage that we wanna listen for.

69
00:04:25.501 --> 00:04:28.680
&gt;&gt; Kyle Simpson: So
let's define our onMessage function.

70
00:04:30.250 --> 00:04:34.896
We're gonna get an event, just like
most event handlers that you've written,

71
00:04:34.896 --> 00:04:44.060
we're gonna get an event that we want to,
&gt;&gt; Kyle Simpson: Process the event.

72
00:04:44.060 --> 00:04:47.470
So the event object that comes in,
it may have some properties that you're

73
00:04:47.470 --> 00:04:49.880
interested in, and
we'll talk about those in a little bit.

74
00:04:49.880 --> 00:04:54.270
But specifically the one that we're gonna
be interested in right now is the data

75
00:04:54.270 --> 00:04:58.620
property, which is the actual message
that was sent along, so event.data.

76
00:04:58.620 --> 00:05:03.499
So we're gonna just basically
console.log(evt.data), so

77
00:05:03.499 --> 00:05:06.967
we can see if our web
worker sends us a message.

78
00:05:15.902 --> 00:05:20.075
&gt;&gt; Kyle Simpson: In our worker, which I've
already written the bad implementation,

79
00:05:20.075 --> 00:05:22.622
recursive implementation of Fibonacci,

80
00:05:22.622 --> 00:05:26.470
you notice we're not
actually spinning it up yet.

81
00:05:26.470 --> 00:05:30.530
So the first thing that we might wanna do,
when we've spun up a web worker,

82
00:05:30.530 --> 00:05:35.190
is we might want to send
a message back to the main page.

83
00:05:35.190 --> 00:05:40.094
So the way we do that is
to say self.postMessage.

84
00:05:40.094 --> 00:05:43.264
And then we're gonna pass
it some information, for

85
00:05:43.264 --> 00:05:45.290
example, a string or an object.

86
00:05:45.290 --> 00:05:52.020
So I'm just gonna say,
hello from the web worker.

87
00:05:52.020 --> 00:05:58.283
Armed with those changes to our JavaScript
files, let's come over to our web page.

88
00:05:58.283 --> 00:06:01.035
And I already have my
developer tools open, so

89
00:06:01.035 --> 00:06:04.927
I will have to switch between these two so
we can see what happens.

90
00:06:04.927 --> 00:06:10.890
But I'm gonna reload this page and
I'm going to click the start button.

91
00:06:10.890 --> 00:06:12.692
And then we'll look at the console and

92
00:06:12.692 --> 00:06:15.350
see if we in fact got
what we were looking for.

93
00:06:15.350 --> 00:06:20.166
No errors, so that's a good sign,
then we click the start button, and

94
00:06:20.166 --> 00:06:23.797
now we see in the console,
hello from the web worker.

95
00:06:32.437 --> 00:06:35.780
&gt;&gt; Kyle Simpson: That's a good sign,
we have a web worker that ran.

96
00:06:35.780 --> 00:06:40.999
Now because it's not doing anything,
it's literally just gonna sit there idle.

97
00:06:40.999 --> 00:06:46.250
But when we have it doing stuff it
can stay alive and keep doing things.

