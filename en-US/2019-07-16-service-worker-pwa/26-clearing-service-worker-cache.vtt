WEBVTT

1
00:00:00.020 --> 00:00:05.600
&gt;&gt; Kyle Simpson: So we saw that we were
naming our caches based upon the version.

2
00:00:05.600 --> 00:00:10.470
When we update this version number, if we
were to reload right now, you would notice

3
00:00:10.470 --> 00:00:15.180
that it would create a whole new set of
cache entries under that different name.

4
00:00:15.180 --> 00:00:16.690
Which is totally fine,

5
00:00:16.690 --> 00:00:21.990
except it certainly might be a bad idea
to just never clean up after yourself.

6
00:00:21.990 --> 00:00:25.290
Because you're going to just keep using up
more and more and eventually the browser's

7
00:00:25.290 --> 00:00:28.600
going to say you're past
the quota there's no more left.

8
00:00:28.600 --> 00:00:34.020
So what we're going to do now is make sure
that we clear any old caches that we may

9
00:00:34.020 --> 00:00:40.730
come across which were named based upon
what we named but a previous version.

10
00:00:40.730 --> 00:00:47.870
And its hard to predict whether or not it
would be immediately the version before or

11
00:00:47.870 --> 00:00:50.750
they might be five versions back or
20 versions back,

12
00:00:50.750 --> 00:00:54.906
they might have seven different caches
that never got cleared, whatever.

13
00:00:54.906 --> 00:00:59.880
So we wanna clear out any cash
that looks like our cash name, but

14
00:00:59.880 --> 00:01:03.840
as a version number that is different than
the current version that we've listed.

15
00:01:03.840 --> 00:01:05.560
That's going to be our logic.

16
00:01:05.560 --> 00:01:07.150
So where are we gonna do that work?

17
00:01:07.150 --> 00:01:11.490
Well, we're gonna do that
work at activation time.

18
00:01:11.490 --> 00:01:15.100
And actually, probably it's gonna
be better to swap the order here.

19
00:01:16.270 --> 00:01:18.590
Doesn't really matter, but
we're gonna do that work right here.

20
00:01:18.590 --> 00:01:23.709
We're gonna clear out the cache
&gt;&gt; Kyle Simpson: Right here.

21
00:01:27.130 --> 00:01:29.090
And then cash the new ones.

22
00:01:29.090 --> 00:01:32.130
Remember we're doing that because
this is a newly installed and

23
00:01:32.130 --> 00:01:37.210
activated service worker, clean up all
the old ones and create the new ones.

24
00:01:37.210 --> 00:01:41.540
What's important to note here is that
we're clearing out all those caches

25
00:01:41.540 --> 00:01:46.060
because we have been activated which
lets us know that the old service worker

26
00:01:46.060 --> 00:01:49.570
Is deactivated and
no longer using any of those resources.

27
00:01:49.570 --> 00:01:54.730
It would be a really bad idea to do this
during install because during install,

28
00:01:54.730 --> 00:01:57.730
there might be another service worker
still messing around with those caches and

29
00:01:57.730 --> 00:02:00.250
we could crash a process of something.

30
00:02:00.250 --> 00:02:04.942
So to make sure we don't have a problem
there, we want to make sure to do that,

31
00:02:04.942 --> 00:02:08.428
we don't want to do that work
until we get to activation.

32
00:02:10.509 --> 00:02:13.159
&gt;&gt; Kyle Simpson: Okay, so
let's go ahead and define a

33
00:02:15.143 --> 00:02:19.322
&gt;&gt; Kyle Simpson: Clear caches function.

34
00:02:24.917 --> 00:02:29.158
&gt;&gt; Kyle Simpson: We can get
a list of all of the caches.

35
00:02:44.782 --> 00:02:52.358
&gt;&gt; Kyle Simpson: Caches.keys
&gt;&gt; Kyle Simpson: And

36
00:02:52.358 --> 00:02:55.980
then we need to figure out
which of those are old caches.

37
00:02:55.980 --> 00:02:58.380
So we're gonna basically do a filter.

38
00:02:58.380 --> 00:03:06.388
We're gonna say old cash
names equals (cacheNames).

39
00:03:23.434 --> 00:03:28.432
&gt;&gt; Kyle Simpson: So we need to check to
see if the cache name looks Like the cache

40
00:03:28.432 --> 00:03:35.980
name convention that we're using which is
ramblings dash and then a set of digits.

41
00:03:35.980 --> 00:03:39.910
We need to see if it looks like that but
the version number's not ours.

42
00:03:39.910 --> 00:03:44.538
So we're gonna say first if

43
00:04:08.673 --> 00:04:09.755
&gt;&gt; Kyle Simpson: So we're definitely

44
00:04:09.755 --> 00:04:12.525
looking at one of the cache
names that we have created.

45
00:04:13.845 --> 00:04:16.505
The reason why we're doing this,
by the way, is that other

46
00:04:18.380 --> 00:04:22.490
Code on this same site could
have created other caches.

47
00:04:22.490 --> 00:04:25.250
Not even our code, it could have been a
third party code running on our site could

48
00:04:25.250 --> 00:04:26.820
have created other caches.

49
00:04:26.820 --> 00:04:30.870
So we want to make sure to only
deal with caches that we created.

50
00:04:30.870 --> 00:04:32.540
So we're going to recognize it by name.

51
00:04:33.700 --> 00:04:38.190
And then we need to pull out
the number that was used.

52
00:04:38.190 --> 00:04:41.636
So I will do a match here.

53
00:04:41.636 --> 00:04:47.152
Cache version, we'll say other

54
00:04:47.152 --> 00:04:53.900
cache version is what I'll call it.

55
00:04:53.900 --> 00:04:55.850
Or just cache version will work,
cache version.

56
00:04:56.873 --> 00:05:00.691
[SOUND] We will do

57
00:05:00.691 --> 00:05:05.983
cacheName.match.

58
00:05:05.983 --> 00:05:12.909
[SOUND] Ramblings-capturegroup

59
00:05:25.937 --> 00:05:28.249
&gt;&gt; Kyle Simpson: And we have a version

60
00:05:28.249 --> 00:05:33.417
number, so
we are going to say if the number of

61
00:05:33.417 --> 00:05:38.585
this cache version is
not equal to our version

62
00:05:38.585 --> 00:05:43.900
the one that our current
service worker is in.

63
00:05:45.520 --> 00:05:50.929
Let's do this slightly differently
let's just assign whats

64
00:05:50.929 --> 00:05:56.139
happening we'll say cache version equals,
if it's not.

65
00:05:59.249 --> 00:06:00.074
&gt;&gt; Kyle Simpson: Null.

66
00:06:07.294 --> 00:06:12.817
&gt;&gt; Kyle Simpson: Cuz it might not
have matched which case we want to,

67
00:06:12.817 --> 00:06:15.390
just take care of that.

68
00:06:16.920 --> 00:06:22.220
And if it's not that will say
cacheVersion, just leave it alone.

69
00:06:22.220 --> 00:06:26.648
Now what we wanna say in
our if statement is if

70
00:06:26.648 --> 00:06:30.959
the cacheVersion is greater than zero, so

71
00:06:30.959 --> 00:06:35.391
we've found a legitimate cacheVersion and

72
00:06:35.391 --> 00:06:40.080
the cacheVersion is not
equal to our version.

73
00:06:45.634 --> 00:06:48.743
&gt;&gt; Kyle Simpson: That takes care of
if there accidentally was a cache for

74
00:06:48.743 --> 00:06:51.860
something that didn't end
up converting to a number.

75
00:06:51.860 --> 00:06:54.790
It should, but
we're just being extra careful here.

76
00:06:54.790 --> 00:06:59.000
So if we have found a different version,

77
00:06:59.000 --> 00:07:02.230
then we want that to
stay in old cache names.

78
00:07:02.230 --> 00:07:03.670
Otherwise we want to

79
00:07:04.940 --> 00:07:09.690
dump it because it's one that we did match
with or it's one that we don't care about.

80
00:07:09.690 --> 00:07:12.010
So we're only putting in old cash names,

81
00:07:12.010 --> 00:07:15.271
ones that we definitely want
to affirmatively clear out.

82
00:07:19.905 --> 00:07:22.895
&gt;&gt; Speaker 2: Can you just scroll
a little bit onto the right?

83
00:07:27.602 --> 00:07:29.062
&gt;&gt; Kyle Simpson: So
instead of an if statement,

84
00:07:29.062 --> 00:07:32.330
I'll just return that because that's
what we want, we want a true.

85
00:07:33.740 --> 00:07:34.450
We'll keep them.

86
00:07:38.290 --> 00:07:43.680
So the end result of that call is a list
of only the cache names, these are just

87
00:07:43.680 --> 00:07:48.990
cache names, but only the cache names
that we want to affirmatively clear out.

88
00:07:48.990 --> 00:07:54.072
And we will now say return similar to
what we've done before, Promise.all.

89
00:07:58.906 --> 00:07:59.956
&gt;&gt; Kyle Simpson: We're gonna say,

90
00:08:03.751 --> 00:08:08.406
&gt;&gt; Kyle Simpson: oldCacheNames.map.

91
00:08:18.353 --> 00:08:26.164
&gt;&gt; Kyle Simpson: We're gonna map each
cache name to the promise of deleting it.

92
00:08:29.650 --> 00:08:34.640
&gt;&gt; Kyle Simpson: Caches.delete and
the cache name that we wanna delete.

93
00:08:34.640 --> 00:08:37.650
So that's gonna clear out any old caches.

94
00:08:37.650 --> 00:08:41.920
We're gonna wait for
all of those delete to finish and

95
00:08:41.920 --> 00:08:44.940
then we'll create our new
cache by our new name.

96
00:08:48.140 --> 00:08:53.120
Okay, so let's we're calling clear

97
00:08:53.120 --> 00:08:57.370
caches right here, so
that should actually work this time.

98
00:08:57.370 --> 00:08:59.560
We updated to version 4.

99
00:08:59.560 --> 00:09:02.500
Let's go test it in the browser.

100
00:09:02.500 --> 00:09:07.030
Remember we have ramblings
three over here in our cache.

101
00:09:07.030 --> 00:09:11.900
And so now that we're expecting that when
we do a navigate event in the browser,

102
00:09:11.900 --> 00:09:16.170
we're expecting three to go away and
four to come in.

103
00:09:17.960 --> 00:09:20.220
So we will navigate to the about page.

104
00:09:21.620 --> 00:09:26.396
And then we see four show up,
and then three got deleted.

105
00:09:39.757 --> 00:09:41.326
&gt;&gt; Kyle Simpson: Just
as a little side note,

106
00:09:41.326 --> 00:09:45.488
even with really great bulletproof code,
in my testing I have seen times

107
00:09:45.488 --> 00:09:49.160
where I have old caches
hanging out somehow, someway.

108
00:09:49.160 --> 00:09:51.330
It fails to delete in some silent way.

109
00:09:51.330 --> 00:09:56.030
So that's why we want to just run this
good bullet proof delete code so that over

110
00:09:56.030 --> 00:10:01.160
time we're being a good citizen on
people's web computer on their computers.

111
00:10:01.160 --> 00:10:04.690
And in their Web browsers by deleting
ourselves as much as possible.

112
00:10:05.700 --> 00:10:07.120
Usually it's happens right away but

113
00:10:07.120 --> 00:10:10.935
every once in a while you'll have some
bodies browser that ends up with several.

114
00:10:10.935 --> 00:10:13.657
All those cache entries and
we wanna just get rid of all those.

115
00:10:15.868 --> 00:10:16.370
&gt;&gt; Kyle Simpson: Yes.

116
00:10:17.520 --> 00:10:20.830
&gt;&gt; Speaker 2: Will this
cache eventually expire?

117
00:10:20.830 --> 00:10:24.480
&gt;&gt; Kyle Simpson: No, there is absolutely
no expiration on these caches.

118
00:10:24.480 --> 00:10:27.020
The only time it expires
is if the user comes in and

119
00:10:27.020 --> 00:10:29.870
physically clears out their storage here.

120
00:10:29.870 --> 00:10:33.170
And they have to really go
to that trouble to do that.

121
00:10:33.170 --> 00:10:34.295
Otherwise it'll stay.

122
00:10:38.346 --> 00:10:39.862
&gt;&gt; Kyle Simpson: That
means it's kind of on you,

123
00:10:39.862 --> 00:10:44.240
the developer to the side if there should
be some sort of exploration semantic.

124
00:10:44.240 --> 00:10:48.260
And you would control that by pushing
out updates to your service worker every

125
00:10:48.260 --> 00:10:50.120
two weeks, for example, or whatever.

126
00:10:51.120 --> 00:10:54.970
&gt;&gt; Speaker 3: So I just want clarified so
what you're saying is that even like

127
00:10:54.970 --> 00:11:00.290
clearing out your cash and stuff like as a
regular like I wanna reload this page and

128
00:11:00.290 --> 00:11:03.320
I want to clear my cache and
everything that would not clear this.

129
00:11:03.320 --> 00:11:07.160
&gt;&gt; Kyle Simpson: A reload does not okay,
I shift reload does not.

130
00:11:08.840 --> 00:11:13.140
There are about 100 million different
ways that you can reload or

131
00:11:13.140 --> 00:11:17.590
clear your cookies or your internet files
depending on your different browsers.

132
00:11:17.590 --> 00:11:18.950
So I can't say for

133
00:11:18.950 --> 00:11:23.750
sure that none of those ways would ever
clear this out but what I know is that for

134
00:11:23.750 --> 00:11:27.880
me to clear this out I have to come
to the application tab and delete it.

135
00:11:27.880 --> 00:11:28.920
&gt;&gt; Speaker 3: Okay.

136
00:11:28.920 --> 00:11:32.860
&gt;&gt; Kyle Simpson: So there may be some
other way in Chrome that accidentally ends

137
00:11:32.860 --> 00:11:36.560
up clearing out the cache
storage that I'm either am, or

138
00:11:36.560 --> 00:11:39.220
not aware of, but
they have to go to trouble.

139
00:11:39.220 --> 00:11:41.490
It's not just simply a reload
that's gonna clear it out.

