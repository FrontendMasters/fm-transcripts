WEBVTT

1
00:00:00.040 --> 00:00:02.360
&gt;&gt; Kyle Simpson: Now,
we have a service worker registration.

2
00:00:02.360 --> 00:00:04.285
And it is loaded up our service worker,
and

3
00:00:04.285 --> 00:00:08.000
it's gonna start doing its installation,
and running, and all of that.

4
00:00:08.000 --> 00:00:09.998
But we need to get access
to our service worker, and

5
00:00:09.998 --> 00:00:12.053
we're gonna need to be able
to communicate with it.

6
00:00:12.053 --> 00:00:15.780
So the way we are gonna first
assign our service worker,

7
00:00:15.780 --> 00:00:19.755
we don't know at this point
what state our service worker.

8
00:00:22.372 --> 00:00:23.254
&gt;&gt; Kyle Simpson: svcworker,

9
00:00:23.254 --> 00:00:28.190
we don't know at what state our
service worker is in at this point.

10
00:00:28.190 --> 00:00:33.286
And the three stages that it
could possibly be in are exposed

11
00:00:33.286 --> 00:00:41.450
as navigator.serviceworker.installing.

12
00:00:41.450 --> 00:00:43.140
Sorry, it's not navigator.serviceworker.

13
00:00:43.140 --> 00:00:44.390
This is our registration.

14
00:00:44.390 --> 00:00:49.210
We're going to use
swRegistration.installing.

15
00:00:49.210 --> 00:00:56.910
If it's not in the installing, it might
be in the swRegistration.activating.

16
00:00:56.910 --> 00:01:01.320
Actually this is called waiting, sorry.

17
00:01:01.320 --> 00:01:05.990
This is called waiting,
or the final stage there,

18
00:01:05.990 --> 00:01:10.190
state that it could be in
sw registration.active.

19
00:01:10.190 --> 00:01:13.370
So it can either be installing,
waiting or active.

20
00:01:13.370 --> 00:01:15.780
So let's talk about those three states for
a moment.

21
00:01:15.780 --> 00:01:16.940
Installing is pretty obvious.

22
00:01:16.940 --> 00:01:19.690
This is the first time that
service worker has been loaded.

23
00:01:19.690 --> 00:01:24.500
And by the way, by service worker,
we mean that unique configuration of that.

24
00:01:24.500 --> 00:01:28.470
So every time we make a change to
a service worker, even if it's just a code

25
00:01:28.470 --> 00:01:33.310
comment, the browser is gonna think this
is an entirely new service worker that

26
00:01:33.310 --> 00:01:38.020
has to go through the whole lifecycle it
needs to be installed, and all of that.

27
00:01:38.020 --> 00:01:42.530
And if we've updated a service worker or
one already existed,

28
00:01:42.530 --> 00:01:46.990
now we can have a worker that we could
have very easily a site that has.

29
00:01:46.990 --> 00:01:49.700
At least two instances
of a service worker,

30
00:01:49.700 --> 00:01:53.890
which probably sounds like it could
be a problem, because it could be.

31
00:01:53.890 --> 00:01:57.910
Now we have sort of some chaos,
so the way the life cycle works

32
00:01:57.910 --> 00:02:02.950
is that you can only have one service
worker active at any given moment.

33
00:02:02.950 --> 00:02:06.530
And so by default when a second
one has been installed,

34
00:02:06.530 --> 00:02:10.530
because you've made a quick small
change to it from the last time.

35
00:02:10.530 --> 00:02:15.190
When the second one has been installed,
it enters a waiting phase.

36
00:02:15.190 --> 00:02:17.960
Waiting for the first one to be finished.

37
00:02:17.960 --> 00:02:20.930
And the first one is not
considered finished,

38
00:02:20.930 --> 00:02:26.490
until the lifetime of the page
that it was serving has gone away.

39
00:02:26.490 --> 00:02:27.510
So you might think,

40
00:02:27.510 --> 00:02:31.980
well if the user just clicks refresh,
then that should be good enough.

41
00:02:31.980 --> 00:02:36.060
And it turns out by way of
nuances of the way that works,

42
00:02:36.060 --> 00:02:39.300
you actually have to have a navigation
event, like the user has to navigate

43
00:02:39.300 --> 00:02:44.420
to some other page before
the previous service worker can die.

44
00:02:44.420 --> 00:02:49.740
And then the secondary or the new service
worker that's in this waiting stage,

45
00:02:49.740 --> 00:02:52.380
immediately activates
when the old one dies.

46
00:02:52.380 --> 00:02:56.300
So it was installed but it hasn't done
anything yet its kind of been in waiting

47
00:02:56.300 --> 00:02:59.910
game, and then the old ones goes away and
the new one is immediately implied.

48
00:03:01.590 --> 00:03:06.770
That is sometimes what you want, and
I think the reason for the default

49
00:03:06.770 --> 00:03:11.470
of that sort of wankyness about having
to wait for another navigation event.

50
00:03:11.470 --> 00:03:17.960
Is that, if you ship out a service
worker update to a page, and the page

51
00:03:17.960 --> 00:03:22.660
itself wasn't loaded by that service
worker, it was loaded by a previous one.

52
00:03:22.660 --> 00:03:27.610
It is possible if you weren't careful that
there could be some sort of weird mismatch

53
00:03:27.610 --> 00:03:31.520
of what code is running,
versus what code is expected.

54
00:03:31.520 --> 00:03:35.860
So generally, they just default to saying
the users gotta go to a whole new page,

55
00:03:35.860 --> 00:03:39.060
before the new experience comes up.

56
00:03:39.060 --> 00:03:44.300
But that can also be super annoying to
a user, if they have thought they got

57
00:03:44.300 --> 00:03:49.090
something updated, and they have to go to
a whole new page just to see that update.

58
00:03:49.090 --> 00:03:53.950
They came to your page
brand new a while back, but

59
00:03:53.950 --> 00:03:57.140
now they're back at your page, and
they've loaded up your page, and

60
00:03:57.140 --> 00:03:59.430
nothing has changed from
the last time they were there,

61
00:03:59.430 --> 00:04:01.810
until they click on the next link and
now everything's changed again.

62
00:04:01.810 --> 00:04:03.780
And that's gonna look real weird to them.

63
00:04:03.780 --> 00:04:08.390
So depending on your user experience that
you want from a user when you're doing

64
00:04:08.390 --> 00:04:12.919
an update, you can actually tell your
service worker to skip the waiting stage.

65
00:04:14.040 --> 00:04:18.220
There's a method that we will call in
the installation in our service worker,

66
00:04:18.220 --> 00:04:19.760
that's called skipWaiting.

67
00:04:19.760 --> 00:04:23.290
My personal feeling is that
I do this all the time, but

68
00:04:23.290 --> 00:04:26.610
I can certainly understand why
you might wanna allow that

69
00:04:26.610 --> 00:04:30.170
sort of two-stage waiting,
and then activation thing.

70
00:04:30.170 --> 00:04:34.060
But I always like to skip
the waiting stage in my usage of it.

71
00:04:34.060 --> 00:04:38.380
Which basically says, tell that old
service worker as quickly as possible,

72
00:04:38.380 --> 00:04:41.200
kill yourself so
that I can come into play.

73
00:04:41.200 --> 00:04:45.627
And it essentially almost
immediately then, gets activated.

74
00:04:45.627 --> 00:04:46.130
Okay?

75
00:04:46.130 --> 00:04:49.220
But again the browser's gonna
make sure in this life cycle that

76
00:04:49.220 --> 00:04:53.930
no two incidences of the service worker
are actually active at any given moment.

77
00:04:53.930 --> 00:04:58.700
So we might have a service worker in
any one of these three stages, and

78
00:04:58.700 --> 00:05:01.890
it's only ever in one
of these three stages.

79
00:05:01.890 --> 00:05:04.350
So we wanna grab which ever one that is.

80
00:05:04.350 --> 00:05:09.510
Now, if we're in this scenario
where no service worker

81
00:05:09.510 --> 00:05:15.670
has been installed or
a brand new one is just been installed.

82
00:05:15.670 --> 00:05:19.490
In other words, we're not in the case
where we've loaded the page, but

83
00:05:19.490 --> 00:05:22.040
it's the same service
worker that it always was.

84
00:05:22.040 --> 00:05:26.480
The browser always checks for
a new service worker every page load,

85
00:05:26.480 --> 00:05:29.520
it unconditionally checks for
your new service worker.

86
00:05:29.520 --> 00:05:34.490
That used to be that the browser would
pay attention to any like web caching

87
00:05:34.490 --> 00:05:37.470
headers that you may have sent
with your service worker.

88
00:05:37.470 --> 00:05:39.950
So the best practice was
if you wanted that check,

89
00:05:39.950 --> 00:05:44.720
you had to make sure your service worker
wasn't being cached in the browser cache.

90
00:05:44.720 --> 00:05:50.400
As of I think chrome 48 or something,
they unconditionally skip the cache and

91
00:05:50.400 --> 00:05:54.390
force a reload check of the service
worker similar to your favorite con,

92
00:05:54.390 --> 00:05:56.720
they checked the service
worker every time.

93
00:05:56.720 --> 00:06:00.640
So if you want to make an update
to anybody, all you got to do is

94
00:06:00.640 --> 00:06:04.480
update your service worker,
including like changing a comment or

95
00:06:04.480 --> 00:06:08.200
changing a version which we'll talk
about in a moment when we get into it.

96
00:06:08.200 --> 00:06:11.280
So you gotta update your service worker,
that will force a new service worker to

97
00:06:11.280 --> 00:06:16.260
load, install itself and we might wanna be
notified that the new service worker has

98
00:06:16.260 --> 00:06:19.840
moved into that state,
where it's now controlling things.

99
00:06:19.840 --> 00:06:22.830
There's a controller change
event that we wanna listen for.

100
00:06:23.900 --> 00:06:25.720
&gt;&gt; Speaker 2: SW registration.

101
00:06:25.720 --> 00:06:28.060
&gt;&gt; Kyle Simpson: swRegistration's
what we called it up here at the top,

102
00:06:28.060 --> 00:06:29.790
that's our variable that we made.

103
00:06:29.790 --> 00:06:32.444
&gt;&gt; Speaker 2: Okay.
&gt;&gt; Speaker 3: Are we redeclaring svcworker

104
00:06:32.444 --> 00:06:34.081
though on line-
&gt;&gt; Kyle Simpson: Yeah,

105
00:06:34.081 --> 00:06:37.063
we shouldn't be doing a var here,
we should be assigning it.

106
00:06:37.063 --> 00:06:42.139
Okay, we're gonna listen for the event on

107
00:06:42.139 --> 00:06:48.350
navigator.serviceWorker .addEventListener.

108
00:06:52.749 --> 00:06:54.131
&gt;&gt; Kyle Simpson: Controllerchange,

109
00:06:54.131 --> 00:06:58.130
that means a new service worker
had taken control of the page.

110
00:06:58.130 --> 00:07:03.900
It went through the installation, it's
finished its waiting either normally or

111
00:07:03.900 --> 00:07:06.880
it forcibly quit its waiting.

112
00:07:06.880 --> 00:07:10.358
And now, it's ready to go,
so onController.

113
00:07:15.704 --> 00:07:20.086
&gt;&gt; Kyle Simpson: And if that's happened,
then we definitely have a new service

114
00:07:20.086 --> 00:07:24.632
worker so we're gonna go ahead and
reassign service worker, and

115
00:07:24.632 --> 00:07:30.438
now it's going to be the one that's at
navigator.serviceWorker.controller.

116
00:07:32.869 --> 00:07:38.420
&gt;&gt; Speaker 3: And you also have
a typo on swRegistration.waiting.

117
00:07:38.420 --> 00:07:39.707
Just missing the t on ration.

118
00:07:39.707 --> 00:07:41.231
&gt;&gt; Kyle Simpson: Sorry, thank you.

119
00:07:47.436 --> 00:07:50.930
&gt;&gt; Kyle Simpson: I'm sure that's just
the first of 5,000 typos I'm gonna make.

120
00:07:50.930 --> 00:07:52.890
There's a lot of typing here.

121
00:07:52.890 --> 00:07:54.490
We haven't even got to
the service worker yet.

122
00:07:55.680 --> 00:07:59.270
One little tweak that I need to make here,
is this isn't false.

123
00:07:59.270 --> 00:08:00.680
This is the string none.

124
00:08:01.800 --> 00:08:02.987
I'm sorry about that.

125
00:08:07.193 --> 00:08:10.817
&gt;&gt; Kyle Simpson: Okay, that should be all
we need to do here to get our service

126
00:08:10.817 --> 00:08:12.130
worker up and going.

127
00:08:12.130 --> 00:08:16.523
So it is definitely a few more intricate
steps than just saying new worker.

128
00:08:16.523 --> 00:08:19.112
But essentially,
what we're doing is saying, go ahead and

129
00:08:19.112 --> 00:08:21.822
get my service worker up and
going, get it installing itself.

130
00:08:21.822 --> 00:08:26.734
And by the way, technically,
you don't need to call register

131
00:08:26.734 --> 00:08:32.090
if you already have a service
worker that hasn't changed.

132
00:08:32.090 --> 00:08:36.360
So technically, you could write
some logic that only calls that,

133
00:08:36.360 --> 00:08:41.650
if you know that you've updated your
service worker, once it's been registered,

134
00:08:41.650 --> 00:08:44.810
it doesn't ever have to be registered
again unless it's changed.

135
00:08:44.810 --> 00:08:47.900
So, you don't technically
have to call this one.

136
00:08:47.900 --> 00:08:50.190
But I always call it every time.

137
00:08:50.190 --> 00:08:53.310
It's much simpler in the logic
to just write this code.

138
00:08:53.310 --> 00:08:54.899
And it's essentially a no op,

139
00:08:54.899 --> 00:08:58.150
it's gonna check it regardless
of whether you call register.

140
00:08:58.150 --> 00:09:00.970
So it's basically a no op
in any other case, but

141
00:09:00.970 --> 00:09:04.680
it's a good idea just to make
sure it's definitely there.

142
00:09:04.680 --> 00:09:09.450
Cuz technically, I guess somebody could
go in and on install your service worker,

143
00:09:09.450 --> 00:09:11.880
between visits on your page or
something like that.

