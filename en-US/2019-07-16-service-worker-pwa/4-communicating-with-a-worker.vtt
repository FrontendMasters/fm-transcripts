WEBVTT

1
00:00:00.120 --> 00:00:01.710
&gt;&gt; Kyle Simpson: Let's
try it the other way.

2
00:00:01.710 --> 00:00:07.260
Let's try to send a message from
our web page to the web worker.

3
00:00:09.050 --> 00:00:12.699
And here,
rather than doing @EventListener,

4
00:00:12.699 --> 00:00:16.526
we're gonna just do self.onmessage equals,
and

5
00:00:16.526 --> 00:00:21.693
I'm just gonna list an onMessage
function that we're gonna write.

6
00:00:29.294 --> 00:00:32.630
&gt;&gt; Kyle Simpson: Same thing,
we're going to receive an event object.

7
00:00:32.630 --> 00:00:39.190
There's gonna be a data on it and
we will say console.log.

8
00:00:39.190 --> 00:00:41.020
And here we'll say received

9
00:00:43.150 --> 00:00:48.050
in web worker, and
then whatever it is that we received.

10
00:00:50.512 --> 00:00:56.458
&gt;&gt; Kyle Simpson: So that should in theory,
if we send a message to the web worker,

11
00:00:56.458 --> 00:00:59.723
it should be able to receive that.

12
00:00:59.723 --> 00:01:04.110
So what I'm gonna do is
actually send a message back

13
00:01:04.110 --> 00:01:06.490
after we've received the first message.

14
00:01:06.490 --> 00:01:08.020
We could send it right after we started,

15
00:01:08.020 --> 00:01:11.030
but let's just do sort of
a ping pong sort of a thing.

16
00:01:11.030 --> 00:01:13.860
We'll receive the message and
then we'll send another message back.

17
00:01:13.860 --> 00:01:19.370
So how about if we say,
worker.postMessage,

18
00:01:19.370 --> 00:01:20.815
we're back in the web page now.

19
00:01:20.815 --> 00:01:27.900
Worker.postMessage and we'll say,
hello from the client.

20
00:01:32.818 --> 00:01:36.110
&gt;&gt; Kyle Simpson: All right
I'm gonna refresh my page.

21
00:01:36.110 --> 00:01:41.050
We'll check that our console is empty,
and when I click the start button now we

22
00:01:41.050 --> 00:01:46.910
should see a console message from the web
worker, as well as in our web page.

23
00:01:48.780 --> 00:01:50.670
We see hello from the web worker and

24
00:01:50.670 --> 00:01:54.230
then we see received in web worker,
hello from the client.

25
00:01:55.760 --> 00:01:58.620
So we've got two way communication
happening between our web

26
00:01:58.620 --> 00:01:59.620
worker and our page.

27
00:02:02.747 --> 00:02:07.764
&gt;&gt; Kyle Simpson: Speaking of the data that
we're gonna be sending between workers and

28
00:02:07.764 --> 00:02:10.280
our web page, the data is copied.

29
00:02:11.400 --> 00:02:15.100
It is not sent by reference,
if it were sent by reference,

30
00:02:15.100 --> 00:02:18.960
we would have all kinds of threaded
issues to be concerned about.

31
00:02:18.960 --> 00:02:20.630
So the data is copied.

32
00:02:20.630 --> 00:02:25.020
Now normal data like numbers and
strings are all already obviously copied,

33
00:02:25.020 --> 00:02:29.980
but even if you send something like a JSON
object, that entire object is going to be

34
00:02:29.980 --> 00:02:34.870
copied, and it's copied by way of what's
called the structured clone algorithm.

35
00:02:34.870 --> 00:02:39.140
Structured cloning algorithm,
which is part of the web specification.

36
00:02:39.140 --> 00:02:41.270
And if you want to read about
all those glory details,

37
00:02:41.270 --> 00:02:44.060
just Google structured clone algorithm.

38
00:02:45.290 --> 00:02:48.510
But it's essentially gonna
make a copy of your data,

39
00:02:48.510 --> 00:02:50.870
any data that it actually can copy.

40
00:02:50.870 --> 00:02:54.830
So if you send stuff that can't be
copied then it ain't gonna work.

41
00:02:54.830 --> 00:03:00.020
So for example, you can't send something
like a function to a web worker.

42
00:03:00.020 --> 00:03:05.240
However, you can take the string
representation of a function and

43
00:03:05.240 --> 00:03:09.040
send that to a web worker and then
evaluate it inside of a web worker, and

44
00:03:09.040 --> 00:03:11.630
there have actually libraries
out there that do exactly that.

45
00:03:11.630 --> 00:03:15.910
They'll take your functions and
your code that's in a web page, and

46
00:03:15.910 --> 00:03:19.200
they'll replicate it in a web worker to
have it running on the background threads.

47
00:03:19.200 --> 00:03:21.560
So there are some tricks
you can play there.

48
00:03:21.560 --> 00:03:27.610
But just bear in mind that if you
have like a large chunk of data,

49
00:03:27.610 --> 00:03:30.770
say several megabytes worth of
binary data or something, and

50
00:03:30.770 --> 00:03:33.440
you're going to ship that off to
a web worker to have it crunch on it,

51
00:03:33.440 --> 00:03:35.490
maybe it's bitmap data that
you want to process or

52
00:03:35.490 --> 00:03:39.890
something, just be aware that there's
going to be a copy made of all that data,

53
00:03:39.890 --> 00:03:42.130
and then a copy made
when the data comes back.

