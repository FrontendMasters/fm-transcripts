WEBVTT

1
00:00:00.000 --> 00:00:02.162
&gt;&gt; Kyle Simpson: So, we have talked about,

2
00:00:02.162 --> 00:00:06.120
adding some basic routing
rules into our router.

3
00:00:07.300 --> 00:00:11.910
We have some special cases that we
definitely have not yet handled.

4
00:00:11.910 --> 00:00:16.892
So I'm gonna do another hand
wavy magic and skip an hour and

5
00:00:16.892 --> 00:00:19.350
a half of me mistyping code.

6
00:00:19.350 --> 00:00:23.838
We're gonna pull in another update to
this code, and then I again will walk you

7
00:00:23.838 --> 00:00:28.130
through how I implement some logic,
specifically for those three pages.

8
00:00:28.130 --> 00:00:32.480
And I also am gonna do some
refactoring into a helper function, so

9
00:00:32.480 --> 00:00:35.260
there's less repetition in our router.

10
00:00:36.390 --> 00:00:38.432
So, there was my hand wavy magic.

11
00:00:38.432 --> 00:00:44.040
Now, let's go look at our
updated router rules.

12
00:00:44.040 --> 00:00:47.054
Same thing as before,
we have our API handling, but

13
00:00:47.054 --> 00:00:50.630
now you notice that I'm using
a utility called safeRequest.

14
00:00:50.630 --> 00:00:54.819
And it's much simpler,
it's because I'm, again I'd moved,

15
00:00:54.819 --> 00:00:58.856
I saw this same pattern over and
over and over again happening,

16
00:00:58.856 --> 00:01:03.731
where I was sometimes checking the cache
first and checking it afterwards or

17
00:01:03.731 --> 00:01:06.520
checking in both places or whatever.

18
00:01:06.520 --> 00:01:12.575
So, what I did, was I set up a safeRequest
which can take my request URL,

19
00:01:12.575 --> 00:01:14.774
my request, my options.

20
00:01:14.774 --> 00:01:18.550
But I can also control,
when I want these things to happen.

21
00:01:18.550 --> 00:01:20.871
Whether I want it to
cache the end response,

22
00:01:20.871 --> 00:01:25.099
whether I want to check the cache first,
whether I want to check the cache last.

23
00:01:25.099 --> 00:01:27.716
And whether I need to actually
use the request directly,

24
00:01:27.716 --> 00:01:29.360
which I'll talk about in a moment.

25
00:01:30.390 --> 00:01:35.014
So this little safeRequest handler, this
is now going to be used everywhere else in

26
00:01:35.014 --> 00:01:38.463
my router, instead of replicating
that logic over and over.

27
00:01:38.463 --> 00:01:42.068
And also, so this may not actually
make any requests at all,

28
00:01:42.068 --> 00:01:46.820
because if we're offline or if there's
a cached response, it just does that.

29
00:01:46.820 --> 00:01:51.900
So, that's why I called it safeRequest,
cuz it may not even go out to the network.

30
00:01:51.900 --> 00:01:55.087
All right, so let's scroll down and
look at safeRequest and

31
00:01:55.087 --> 00:01:56.910
just see kind of what it's doing.

32
00:01:56.910 --> 00:01:59.920
This should all look
mostly pretty familiar.

33
00:01:59.920 --> 00:02:02.660
Here, we're opening up our cache.

34
00:02:02.660 --> 00:02:06.140
And then if I've passed in the Boolean
flag, check the cache first,

35
00:02:06.140 --> 00:02:07.940
then I go ahead and do exactly that.

36
00:02:07.940 --> 00:02:12.118
I check to see if the cache has
a value for that req.url, and if so,

37
00:02:12.118 --> 00:02:14.220
I return it and then we're done.

38
00:02:15.230 --> 00:02:18.400
If not,
then I check to see if we're online.

39
00:02:18.400 --> 00:02:22.117
And here I have my try catch handler,
so I don't have to repeat that over and

40
00:02:22.117 --> 00:02:23.460
over again.

41
00:02:23.460 --> 00:02:26.854
Now, there's a couple of scenarios that,

42
00:02:26.854 --> 00:02:32.176
actually one in particular here,
but there's a couple of scenarios

43
00:02:32.176 --> 00:02:37.610
where you can't pass along your own
request URL like I'm doing here.

44
00:02:37.610 --> 00:02:41.510
Where you literally have to
pass the actual request object.

45
00:02:41.510 --> 00:02:45.900
And one of those cases is
when it's a post request.

46
00:02:45.900 --> 00:02:50.825
It should allow me to access the request,
the post body in the request,

47
00:02:50.825 --> 00:02:55.140
but for some reason,
I'm not able to get access to that.

48
00:02:55.140 --> 00:02:57.790
It might be a bug, I have some people
I've been talking to about that.

49
00:02:57.790 --> 00:03:02.554
So the workaround essentially is,
don't try to access the body at all,

50
00:03:02.554 --> 00:03:04.750
just pass the request directly.

51
00:03:04.750 --> 00:03:05.960
So that's what I'm doing here.

52
00:03:05.960 --> 00:03:09.420
And again, I only use that in
the case where there's a post.

53
00:03:09.420 --> 00:03:12.965
Otherwise I can use
the URL in the options.

54
00:03:12.965 --> 00:03:17.189
If it was ok, or, and
this is a little interesting nuance,

55
00:03:17.189 --> 00:03:22.510
because my server, the server logic
that you're using in this workshop,

56
00:03:22.510 --> 00:03:26.394
if you go to slash login and
you're already logged in,

57
00:03:26.394 --> 00:03:31.565
you might have noticed that it
automatically redirects you to add post.

58
00:03:31.565 --> 00:03:35.098
Cuz you don't need to re log in
if you're already logged in.

59
00:03:35.098 --> 00:03:37.840
So there's some redirects that occur.

60
00:03:37.840 --> 00:03:40.771
Same thing with slash logout,
if you go to that you URL and

61
00:03:40.771 --> 00:03:45.125
you're currently logged in or not, either
way, it redirects you to the homepage.

62
00:03:45.125 --> 00:03:49.090
So the server can return
redirects is the point.

63
00:03:49.090 --> 00:03:54.283
Now, in those particular scenarios,
where a redirect might happen,

64
00:03:54.283 --> 00:03:58.088
you want for the redirect stuff to make,
you want for

65
00:03:58.088 --> 00:04:03.647
that machinery to make its way to the
browser and you don't want to cache it.

66
00:04:03.647 --> 00:04:07.753
And so I am going to check to see if, and

67
00:04:07.753 --> 00:04:13.510
by the way, when that happens,
your status is zero.

68
00:04:13.510 --> 00:04:17.500
You don't know anything about it other
than the fact that, it's a response that,

69
00:04:17.500 --> 00:04:20.350
I mean, it's a redirect that
the browser is gonna handle.

70
00:04:20.350 --> 00:04:24.726
So we don't know anything about it,
if it was 301 or 307, I guess for

71
00:04:24.726 --> 00:04:27.380
privacy reasons, so it's just zero.

72
00:04:27.380 --> 00:04:32.044
So I can't just check res.ok, I've also
got to check if it's one of those that's

73
00:04:32.044 --> 00:04:35.395
coming back that's going to
be an opaque redirect, okay?

74
00:04:35.395 --> 00:04:38.004
So, if it is an opaque redirect, and

75
00:04:38.004 --> 00:04:42.730
I want to cache this response,
that won't actually be the case.

76
00:04:42.730 --> 00:04:44.563
I won't ever pass that
when it's a redirect,

77
00:04:44.563 --> 00:04:46.075
cuz I don't want to cache redirects.

78
00:04:46.075 --> 00:04:50.565
But otherwise, if I'm caching the
response, I'll put it in the cache, and

79
00:04:50.565 --> 00:04:53.650
here I might just be
returning just the response.

80
00:04:53.650 --> 00:04:57.470
And it might be one of those opaque
redirects, that redirects the browser.

81
00:04:57.470 --> 00:05:01.807
And then of course, my checkCacheLast,
if we have gotten here and we don't yet

82
00:05:01.807 --> 00:05:06.100
have a response, we do the same thing,
we check the cache again.

83
00:05:06.100 --> 00:05:10.370
So, in other words, instead of repeating
this over and over again, in some

84
00:05:10.370 --> 00:05:15.109
combination of them, I just wrote a little
thing that can be configured with Boolean

85
00:05:15.109 --> 00:05:19.210
flags to do any of those variations of
the strategy that I need to handle.

86
00:05:19.210 --> 00:05:26.970
So in the case of our API requests,
the strategy is, don't cache any of them.

87
00:05:26.970 --> 00:05:28.800
And you remember I talked
about caching gets?

88
00:05:28.800 --> 00:05:32.928
I'll say why,
don't do unconditional caching of them,

89
00:05:32.928 --> 00:05:38.220
don't ever check the cache first,
but do check the cache last.

90
00:05:38.220 --> 00:05:43.290
And use the request directly,
because we might be a post request, okay?

91
00:05:43.290 --> 00:05:46.480
But the reason I say cache response false,

92
00:05:46.480 --> 00:05:50.830
is because I only want to cache
the request in the get case.

93
00:05:52.220 --> 00:05:57.298
So I tell this little helper,
don't cache the response automatically and

94
00:05:57.298 --> 00:05:59.480
I'll handle the caching here.

95
00:05:59.480 --> 00:06:01.260
And I still have the not found response.

96
00:06:01.260 --> 00:06:05.690
Okay, now we're handling
the regular HTML pages.

97
00:06:05.690 --> 00:06:08.818
Let me skip over the login
aware request for a moment and

98
00:06:08.818 --> 00:06:12.700
just show you the refactoring of
the non-login web page requests.

99
00:06:12.700 --> 00:06:14.282
I call this network and

100
00:06:14.282 --> 00:06:18.620
cache, so these are the regular
pages that we wanna request.

101
00:06:18.620 --> 00:06:21.882
Here's my options, safe request.

102
00:06:21.882 --> 00:06:27.360
And I'm going to not cahce these
responses, and again, we'll see why.

103
00:06:27.360 --> 00:06:32.521
I don't wanna check the cache first,
but I do wanna check the cache last.

104
00:06:32.521 --> 00:06:34.711
And the reason I'm not caching is,

105
00:06:34.711 --> 00:06:38.511
because I want that only
conditionally cache, in that case.

106
00:06:38.511 --> 00:06:41.482
If it's not the friendly 404 page.

107
00:06:41.482 --> 00:06:47.310
All other files that I might have been
requesting are gonna use safeRequest.

108
00:06:47.310 --> 00:06:50.479
And they are gonna allow
the caching to happen, and

109
00:06:50.479 --> 00:06:54.100
they're gonna check the cache first,
rather than last.

110
00:06:54.100 --> 00:06:58.040
So basically this helper has
dramatically simplified me writing

111
00:06:58.040 --> 00:07:02.705
out this router logic, cuz a bunch of
that repetitiveness is now in a helper.

