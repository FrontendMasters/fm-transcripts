WEBVTT

1
00:00:03.971 --> 00:00:07.200
&gt;&gt; Brian Holt: A function
is a bit of reusable code.

2
00:00:08.480 --> 00:00:11.580
We create something that takes
in some sort of input and

3
00:00:11.580 --> 00:00:13.000
just gives you some sort of output.

4
00:00:13.000 --> 00:00:15.950
That's kind of the gist
of what functions do.

5
00:00:17.950 --> 00:00:20.660
I'm gonna show you one of the most
basic functions you can create.

6
00:00:21.990 --> 00:00:23.134
To make this a little bit bigger.

7
00:00:23.134 --> 00:00:28.112
On line 1 through 3 there.

8
00:00:28.112 --> 00:00:31.910
Function addTwo.

9
00:00:31.910 --> 00:00:37.910
In between the parenthesis here, it's
going to accept some sort of input, right?

10
00:00:39.710 --> 00:00:44.150
Then whatever you return
is going to be the output.

11
00:00:44.150 --> 00:00:47.700
The name of this function is addTwo.

12
00:00:47.700 --> 00:00:51.610
As you may imagined, it takes
whatever number that you give it, and

13
00:00:51.610 --> 00:00:54.929
returns to you that number + 2.

14
00:00:54.929 --> 00:01:01.240
So here, I have a finalAnswer and
I call, that's what,

15
00:01:01.240 --> 00:01:05.600
when I have these two parenthesis here,
you're calling a function, right?

16
00:01:05.600 --> 00:01:08.930
I'm calling this function
with the parameter of 5.

17
00:01:08.930 --> 00:01:12.260
And 5 is just being passed
in here to number, right?

18
00:01:12.260 --> 00:01:14.274
So that's how this corresponds.

19
00:01:14.274 --> 00:01:16.569
So this 5 is being passed
in here to number.

20
00:01:16.569 --> 00:01:20.509
And now number, in this specific instance,
represents 5, right?

21
00:01:20.509 --> 00:01:25.380
And then I'm returning 5 + 2, right?

22
00:01:25.380 --> 00:01:28.010
And that's getting stored
here in finalAnswer.

23
00:01:28.010 --> 00:01:30.180
So looking at this, if I to add 2 and

24
00:01:30.180 --> 00:01:32.450
I give it 5,
what do you expect final answer to be?

25
00:01:33.520 --> 00:01:34.940
7, right?

26
00:01:34.940 --> 00:01:40.180
Because 5 is being passed in here to
number, and we're returning number + 2.

27
00:01:40.180 --> 00:01:46.325
So when I console.log(finalAnswer),
&gt;&gt; Brian Holt: Then I get 7.

28
00:01:46.325 --> 00:01:53.777
So what happens if I do const
finalAnswer2= addTwo(10)?

29
00:01:56.280 --> 00:02:00.192
&gt;&gt; Brian Holt: What do you think
finalAnswer2 is when I log it out?

30
00:02:00.192 --> 00:02:06.409
finalAnswer2, and
as you can see there, I get 12.

31
00:02:06.409 --> 00:02:10.025
So that's what's powerful about functions
is I get to encapsulate logic into

32
00:02:10.025 --> 00:02:13.500
a function, and I can reuse it over,
and over, and over, and over again.

33
00:02:13.500 --> 00:02:16.346
I can now add to it anything I want.

34
00:02:16.346 --> 00:02:19.370
Obviously, this is a bit of a contrite
example because I could have just added 2

35
00:02:19.370 --> 00:02:20.176
and it would have been fine.

36
00:02:20.176 --> 00:02:24.600
But, the principle stands.

37
00:02:24.600 --> 00:02:27.474
Now, functions don't have
to take in any arguments.

38
00:02:27.474 --> 00:02:30.855
So I could just have a function that's

39
00:02:30.855 --> 00:02:35.346
called,
&gt;&gt; Brian Holt: giveBackFive,

40
00:02:35.346 --> 00:02:37.733
this is going to be
the worst function ever.

41
00:02:37.733 --> 00:02:42.907
But all it does is just return,
&gt;&gt; Brian Holt: 5.

42
00:02:44.725 --> 00:02:47.813
&gt;&gt; Brian Holt: So
this takes no arguments, right?

43
00:02:47.813 --> 00:02:48.811
And it just gives you back 5.

44
00:02:48.811 --> 00:02:52.821
So if I just said
console.log(giveBackFive) and

45
00:02:52.821 --> 00:02:56.109
I call the function with the parenthesis.

46
00:02:57.780 --> 00:03:01.745
&gt;&gt; Brian Holt: Lo and behold,
it gives you back 5, congratulations.

47
00:03:01.745 --> 00:03:05.165
We took an already worthless function,
and we made it more worthless.

48
00:03:05.165 --> 00:03:08.240
&gt;&gt; [LAUGH]
&gt;&gt; Brian Holt: But just to show you like,

49
00:03:09.360 --> 00:03:11.820
it doesn't have to take any arguments,
it can take two arguments, right?

50
00:03:11.820 --> 00:03:17.410
So I could do function,
&gt;&gt; Brian Holt: add,

51
00:03:17.410 --> 00:03:21.762
and it could take in num1 and num2.

52
00:03:21.762 --> 00:03:24.361
And that's how you
separate it with commas.

53
00:03:27.136 --> 00:03:31.324
&gt;&gt; Brian Holt: And
we can say return num1 + num2.

54
00:03:33.679 --> 00:03:37.597
&gt;&gt; Brian Holt: And
now if you go down here and

55
00:03:37.597 --> 00:03:43.157
say console.log(add(5, 10).

56
00:03:45.668 --> 00:03:51.050
&gt;&gt; Brian Holt: And again, that's how you
separate it, it's just with the commas.

57
00:03:51.050 --> 00:03:52.993
You can see there that
we're getting 15 back.

58
00:03:55.827 --> 00:04:00.390
&gt;&gt; Brian Holt: Now hopefully,
it's not too confusing that I can put

59
00:04:00.390 --> 00:04:05.778
finalAnswer3 up here,
finalAnswer3 = add(5,10).

60
00:04:05.778 --> 00:04:09.961
And then console.log it down there, but
since I'm not really doing anything else

61
00:04:09.961 --> 00:04:13.868
with the variable, you're fine to just
kinda move that into there, right?

62
00:04:13.868 --> 00:04:19.354
finalAnswer,
&gt;&gt; Brian Holt: Either one works, right?

63
00:04:19.354 --> 00:04:21.932
So I can actually put the add
call directly into there.

64
00:04:23.967 --> 00:04:25.520
&gt;&gt; Brian Holt: So
this is the big pro tip here.

65
00:04:25.520 --> 00:04:27.907
Whenever you see parentheses like this,

66
00:04:27.907 --> 00:04:30.642
this means a function is being called,
right?

67
00:04:30.642 --> 00:04:34.935
Just so you know, when we call console.log
here, that's calling a function.

68
00:04:34.935 --> 00:04:38.990
That's why we're using parentheses there,
log is a function.

69
00:04:40.630 --> 00:04:44.200
So look for parentheses like that,
and that's when you know somewhere,

70
00:04:44.200 --> 00:04:45.520
a function is being called.

71
00:04:47.180 --> 00:04:50.740
Functions are called lots of things
in lots of different languages,

72
00:04:50.740 --> 00:04:52.740
there's some minor differences, but

73
00:04:52.740 --> 00:04:57.570
you'll hear him called procedures
sometime you'll hear him called methods.

74
00:04:57.570 --> 00:05:00.210
In JavaScript in general,
they're called functions.

75
00:05:00.210 --> 00:05:04.980
And there's some minor differences there,
but largely the same, they're all more or

76
00:05:04.980 --> 00:05:05.930
less the same thing.

77
00:05:05.930 --> 00:05:08.030
So just, we're going to go
with the functions today.

78
00:05:08.030 --> 00:05:10.800
Sometimes I will use the word method
because it's ingrained in my brain from

79
00:05:10.800 --> 00:05:11.980
college.

80
00:05:11.980 --> 00:05:13.999
But when I say method,
just assume that I mean function.

81
00:05:15.990 --> 00:05:18.550
Let's go a little bit
more complicated here,

82
00:05:18.550 --> 00:05:22.350
I have a function here called greet, okay?

83
00:05:22.350 --> 00:05:28.314
greet takes it in firstName, lastName,
honorific, which is like, Mr, Mrs.,

84
00:05:28.314 --> 00:05:34.220
Captain, Dr., or something like that,
and the greeting of some sort, right?

85
00:05:35.320 --> 00:05:37.560
And this returns a template string, right?

86
00:05:37.560 --> 00:05:40.180
Remember the backticks,
we talked about these previously.

87
00:05:41.650 --> 00:05:47.940
And it does some templating
with these various parameters.

88
00:05:47.940 --> 00:05:50.010
And just to drill in,

89
00:05:50.010 --> 00:05:53.300
parameters are just variables that you're
accepting from somewhere else, right?

90
00:05:53.300 --> 00:05:56.074
So if you see in this list up
here between the parentheses,

91
00:05:56.074 --> 00:05:59.230
that's called a parameter,
which is just a variable, right?

92
00:05:59.230 --> 00:06:01.520
It's a variable that's going to
be accepted from somewhere else.

93
00:06:03.010 --> 00:06:04.820
Okay, so
it takes in all of these parameters.

94
00:06:06.110 --> 00:06:09.960
It takes in firstName, lastName,
honorific, and greeting,

95
00:06:09.960 --> 00:06:12.070
and then it returns to you this string

96
00:06:13.090 --> 00:06:16.550
of all that stuff being concatenated
together into a nice sentence, right?

97
00:06:17.790 --> 00:06:21.470
So it'll do the greeting and
it'll say honorific, lastName,

98
00:06:21.470 --> 00:06:24.675
I'm extremely pleased you could join us,
firstName,

99
00:06:24.675 --> 00:06:28.036
I hope you enjoy your stay honorific,
lastName, right.

100
00:06:28.036 --> 00:06:33.490
So you can see here, console.log, and
here I'm calling greet with Brian Holt,

101
00:06:33.490 --> 00:06:36.668
Lord, obviously, and salutations, right?

102
00:06:36.668 --> 00:06:40.580
So you can see here in the first line,
Salutations Lord Holt!

103
00:06:40.580 --> 00:06:41.513
Thank you.

104
00:06:41.513 --> 00:06:43.292
&gt;&gt; [LAUGH]
&gt;&gt; Brian Holt: I'm extremely pleased you

105
00:06:43.292 --> 00:06:44.500
could join us, Brian!

106
00:06:44.500 --> 00:06:45.790
I hope you enjoy your stay, Lord Holt.

107
00:06:46.864 --> 00:06:52.140
Okay, now I want you to note here,
the order here is very

108
00:06:52.140 --> 00:06:55.990
important because that's the order it's
going to be passed into these parameters.

109
00:06:55.990 --> 00:07:03.240
If I messed up Holt and Brian,
&gt;&gt; Brian Holt: Holt and Brian.

110
00:07:05.180 --> 00:07:08.370
I mean, you can call me Lord Brian,
that's fine.

111
00:07:08.370 --> 00:07:09.590
But you don't have to.

112
00:07:09.590 --> 00:07:10.830
But you can see what I'm saying here.

113
00:07:10.830 --> 00:07:14.229
The order of these things is important
because that's the order that going to be

114
00:07:14.229 --> 00:07:15.405
put into those variables.

115
00:07:17.320 --> 00:07:18.400
&gt;&gt; Brian Holt: So back to that.

116
00:07:19.540 --> 00:07:21.920
But what is great about this is
I wrote this greeting function,

117
00:07:21.920 --> 00:07:25.516
as you might imagine, like you're reading
some sort of like, hotel website.

118
00:07:25.516 --> 00:07:28.380
You don't want to type that out every
time, you can reuse it over and

119
00:07:28.380 --> 00:07:31.070
over again just by creating
a function like this, right?

120
00:07:31.070 --> 00:07:33.100
So now I call with Jack,
Sparrow, Captain, A-hoy.

121
00:07:33.100 --> 00:07:34.520
You can say A-hoy Captain Sparrow!

122
00:07:34.520 --> 00:07:36.357
I'm extremely pleased you could join us,
Jack!

123
00:07:36.357 --> 00:07:38.533
I hope you enjoy your stay,
Captain Sparrow.

124
00:07:40.416 --> 00:07:42.972
&gt;&gt; Brian Holt: Again, yeah, order is
important, make sure you get that.

125
00:07:42.972 --> 00:07:44.984
And you can have as many or
as few parameters you want.

126
00:07:44.984 --> 00:07:47.436
There's an unlimited amount of
parameters that you can give it, right?

127
00:07:47.436 --> 00:07:49.178
You can have a function
with ten parameters.

128
00:07:49.178 --> 00:07:51.899
If you have much more than like,
three or four,

129
00:07:51.899 --> 00:07:54.840
you probably want to like
make smaller functions.

130
00:07:59.100 --> 00:07:59.940
So, yeah.

131
00:07:59.940 --> 00:08:02.820
It's called calling a function whenever
you put those parentheses because you

132
00:08:02.820 --> 00:08:05.720
can have a function there, and then
whenever you want to call the function,

133
00:08:05.720 --> 00:08:06.840
you put the parentheses afterwards.

134
00:08:06.840 --> 00:08:10.100
If you don't put the parentheses
afterwards, it doesn't call the function.

135
00:08:11.380 --> 00:08:15.490
So going back here to our
worthless example of giveBackFive,

136
00:08:15.490 --> 00:08:20.870
if I say console.log giveBackFive
without the parentheses here,

137
00:08:20.870 --> 00:08:25.036
it's going to give me this
weird function thing, right?

138
00:08:25.036 --> 00:08:29.720
It's not 5, and what it's actually doing
console.log is actually trying to log

139
00:08:29.720 --> 00:08:32.020
the function itself, right?

140
00:08:32.020 --> 00:08:33.650
It's not calling the function,

141
00:08:33.650 --> 00:08:37.260
it's actually represents the function
itself, which is not what we want, right?

142
00:08:37.260 --> 00:08:41.770
We want the result of the function, which
means that we have to call the function.

143
00:08:43.390 --> 00:08:46.000
So if you see anything like this where
it says like Function giveBackFive or

144
00:08:46.000 --> 00:08:48.320
something like that,
it means you didn't call the function.

145
00:08:49.440 --> 00:08:51.910
Which means you need to go back and
put the parentheses in there.

146
00:08:51.910 --> 00:08:52.620
Does that makes sense?

147
00:08:53.650 --> 00:08:54.540
Okay.

148
00:08:54.540 --> 00:08:56.609
It's an easy thing to slip up,
that's why I try and call it out.

149
00:08:58.230 --> 00:09:01.240
So so far,
I've been showing you this return, right?

150
00:09:01.240 --> 00:09:05.240
Whatever your return is going to be given
back if someone calls the function, right?

151
00:09:05.240 --> 00:09:09.210
So if I call greet,
this is giving me back that string.

152
00:09:09.210 --> 00:09:11.100
I could throw this in a variable,
I can console.log it out,

153
00:09:11.100 --> 00:09:14.170
I can pass it into another function,
I can do whatever I want.

154
00:09:14.170 --> 00:09:16.919
Sometimes functions don't return anything,

155
00:09:16.919 --> 00:09:21.669
which means they would just be undefined
if you tried to capture the return value.

156
00:09:21.669 --> 00:09:23.560
So that, go ahead?

157
00:09:23.560 --> 00:09:28.657
&gt;&gt; Speaker 2: Can you show us what happens
in there if you take out the parameters?

158
00:09:28.657 --> 00:09:32.682
If you just say, console.log greet
with the quote or something.

159
00:09:32.682 --> 00:09:34.591
&gt;&gt; Brian Holt: It's gonna be like,
it's still going to work,

160
00:09:34.591 --> 00:09:36.666
it's just going to say
undefined everywhere.

161
00:09:36.666 --> 00:09:38.016
&gt;&gt; Speaker 2: That's really interesting.

162
00:09:38.016 --> 00:09:39.624
&gt;&gt; Brian Holt: So
if you don't pass anything in here,

163
00:09:39.624 --> 00:09:42.276
it's not going to error out,
it's just going to be undefined.

164
00:09:45.033 --> 00:09:48.064
&gt;&gt; Brian Holt: So whenever you try and
make an undefined into

165
00:09:48.064 --> 00:09:51.992
a string it actually gives you
back the string undefined.

166
00:09:51.992 --> 00:09:56.539
Undefined, undefined,
undefined, it's profound.

167
00:09:56.539 --> 00:10:00.010
Okay, does that answer your question?

168
00:10:00.010 --> 00:10:00.745
&gt;&gt; Speaker 2: Yeah.

169
00:10:00.745 --> 00:10:03.099
&gt;&gt; Brian Holt: Generally,
you don't want things to be undefined,

170
00:10:03.099 --> 00:10:03.945
as a rule of thumb.

171
00:10:05.837 --> 00:10:07.742
&gt;&gt; Brian Holt: So
going back to what I was talking about,

172
00:10:07.742 --> 00:10:10.200
sometimes functions don't return things,
right?

173
00:10:10.200 --> 00:10:11.260
Notice in this function here,

174
00:10:11.260 --> 00:10:14.770
logOutYourHome doesn't return anything,
right?

175
00:10:15.880 --> 00:10:18.690
So in this particular case,
it just takes city, state, and country,

176
00:10:18.690 --> 00:10:20.580
and it just logs it out to the console.

177
00:10:20.580 --> 00:10:21.810
And it doesn't actually
do anything about it.

178
00:10:21.810 --> 00:10:24.590
So notice I'm not doing anything
here with the return value.

179
00:10:24.590 --> 00:10:27.262
It all does is just return it out.

180
00:10:27.262 --> 00:10:28.678
Sorry, it consoles it out.

181
00:10:31.567 --> 00:10:33.748
&gt;&gt; Brian Holt: Does that makes sense?

182
00:10:33.748 --> 00:10:37.724
So you don't have to return anything,
that is optional.

183
00:10:41.454 --> 00:10:42.350
&gt;&gt; Brian Holt: Questions about that?

184
00:10:44.540 --> 00:10:47.000
&gt;&gt; Speaker 2: So the reason you would
wanna return something is if you have

185
00:10:47.000 --> 00:10:49.290
another function that then uses it?

186
00:10:49.290 --> 00:10:52.030
&gt;&gt; Brian Holt: If you're depending on
some sort of output from it, yeah.

187
00:10:53.550 --> 00:10:54.600
It just depends on what you're doing.

188
00:10:55.810 --> 00:11:00.290
So this would be useful if you had
some sort of like, program and

189
00:11:00.290 --> 00:11:02.370
you were just trying to debug it
like where people were from and

190
00:11:02.370 --> 00:11:05.240
you didn't want to have to put that
console.log in every single place,

191
00:11:05.240 --> 00:11:07.500
you could just make this function
called logOutYourHome and

192
00:11:07.500 --> 00:11:09.100
just keep passing those parameters in.

193
00:11:10.180 --> 00:11:12.540
Okay, so that is more or less functions.

194
00:11:12.540 --> 00:11:16.440
All the functions I showed you so
far where one line but they can be many,

195
00:11:16.440 --> 00:11:17.614
many lines, right?

196
00:11:17.614 --> 00:11:21.502
Often, most frequently,
there could have been many lines, right?

197
00:11:21.502 --> 00:11:26.554
Like I could have done up here,
const answer =

198
00:11:26.554 --> 00:11:32.010
num1 + num2, and
then return answer, right.

199
00:11:35.080 --> 00:11:38.056
So there can be for loops in here,
and if statements, and

200
00:11:38.056 --> 00:11:39.730
whatever you want to put there.

