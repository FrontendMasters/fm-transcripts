WEBVTT

1
00:00:03.178 --> 00:00:06.430
&gt;&gt; Brian Holt: So let's talk
about what your assignment is for

2
00:00:06.430 --> 00:00:11.002
today and,
&gt;&gt; Brian Holt: We

3
00:00:11.002 --> 00:00:14.685
will let you get on with your day.

4
00:00:14.685 --> 00:00:18.008
The one that you're actually gonna
do here is make the test pass.

5
00:00:18.008 --> 00:00:20.627
So make sure you're here
on make the tests pass.

6
00:00:25.273 --> 00:00:31.128
&gt;&gt; Brian Holt: We'll be doing
the DOM tomorrow, okay.

7
00:00:31.128 --> 00:00:32.232
Make the test pass.

8
00:00:36.637 --> 00:00:41.423
&gt;&gt; Brian Holt: So in software programming,
there is a concept called testing.

9
00:00:41.423 --> 00:00:46.319
And what testing is, is it's writing code
to make sure that your other code works.

10
00:00:46.319 --> 00:00:50.376
Now that kind of seems counterintuitive,
why would I wanna write more code?

11
00:00:50.376 --> 00:00:53.719
But in general,
a good amount of testing will help you

12
00:00:53.719 --> 00:00:57.898
have confidence whenever you
release code into the wild, right?

13
00:00:57.898 --> 00:01:01.835
So if I have some sort of
module that takes an object,

14
00:01:01.835 --> 00:01:04.969
person object, and returns an address.

15
00:01:04.969 --> 00:01:09.602
I could write a couple of test cases
like make sure that this object

16
00:01:09.602 --> 00:01:14.590
works this particular way, right,
like it returns a valid address.

17
00:01:14.590 --> 00:01:16.856
The reason why that's
helpful is over time,

18
00:01:16.856 --> 00:01:20.613
bits of code get changed, things get
deleted, things get moved around and

19
00:01:20.613 --> 00:01:23.309
you can accidentally break
other parts of your code.

20
00:01:23.309 --> 00:01:24.839
So if I change something over here,

21
00:01:24.839 --> 00:01:27.856
I accidentally broke something over
here in my application, right?

22
00:01:27.856 --> 00:01:30.444
Tests help you mitigate that
sort of problem, right?

23
00:01:30.444 --> 00:01:33.798
You write code that validates,
this will still work.

24
00:01:33.798 --> 00:01:37.137
And then you run that tests every single
time before you launch your code into

25
00:01:37.137 --> 00:01:37.769
production.

26
00:01:37.769 --> 00:01:40.587
Does that make sense?

27
00:01:40.587 --> 00:01:44.437
So here, what I have done for you is
I've wrote a bunch of tests for you.

28
00:01:44.437 --> 00:01:49.696
And I want you to make these tests pass,
okay?

29
00:01:49.696 --> 00:01:55.514
You don't have to write any HTML or
CSS today.

30
00:01:55.514 --> 00:01:57.556
And then I'm going to show you
just a couple of little tips and

31
00:01:57.556 --> 00:01:58.207
tricks with this.

32
00:01:58.207 --> 00:02:01.661
We're going to be using
something called Jasmine,

33
00:02:01.661 --> 00:02:04.729
which is a testing framework for
JavaScript.

34
00:02:04.729 --> 00:02:06.818
Not that you really need
to know anything about it,

35
00:02:06.818 --> 00:02:08.432
you don't need to know about Jasmine.

36
00:02:08.432 --> 00:02:12.667
But in general,
tests are going to look like that.

37
00:02:12.667 --> 00:02:19.592
So I'm going to say expect the answer
of (addTwo(5)).toEqual(7), right?

38
00:02:19.592 --> 00:02:23.524
And now, if I ever mess up what
add to does in the future,

39
00:02:23.524 --> 00:02:28.060
that test will fail and
it won't let me release my code, right?

40
00:02:28.060 --> 00:02:33.486
It won't let me publish that to the
Internet, so that's the point of tests.

41
00:02:33.486 --> 00:02:35.044
And, yeah, again, I wrote this for you.

42
00:02:35.044 --> 00:02:38.034
And now you need to go write
the code that makes the test pass.

43
00:02:38.034 --> 00:02:40.138
I do have a link down here.

44
00:02:40.138 --> 00:02:42.065
I did give you a question where
I asked you to write sort.

45
00:02:42.065 --> 00:02:45.396
You can write sort like I just showed you.

46
00:02:45.396 --> 00:02:48.057
But if you actually want to write it
by hand as well, you are welcome to.

47
00:02:48.057 --> 00:02:50.981
It is difficult, but you can do it.

