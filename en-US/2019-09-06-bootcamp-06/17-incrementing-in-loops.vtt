WEBVTT

1
00:00:00.260 --> 00:00:02.460
&gt;&gt; Brian Holt: Using the same
kind of example here,

2
00:00:02.460 --> 00:00:04.210
we say let friendsAtYourParty equals zero.

3
00:00:04.210 --> 00:00:06.600
And then we're gonna do
what's called a for loop.

4
00:00:07.620 --> 00:00:10.382
So I'm gonna put for, F-O-R.

5
00:00:10.382 --> 00:00:18.669
I'm gonna say, let i equals zero,
&gt;&gt; Brian Holt: Semicolon.

6
00:00:24.598 --> 00:00:31.710
&gt;&gt; Brian Holt: I is less than or
equal to 10, semicolon, I plus plus.

7
00:00:31.710 --> 00:00:35.983
And you're gonna say
friendsAtYourParty plus plus.

8
00:00:40.337 --> 00:00:42.710
&gt;&gt; Brian Holt: So
let's dissect this madness right here.

9
00:00:45.310 --> 00:00:48.472
&gt;&gt; Brian Holt: If for loop has three
different parts inside of the parenthesis

10
00:00:48.472 --> 00:00:50.990
here, always has three parts.

11
00:00:50.990 --> 00:00:55.690
The first part, you're declaring
your control variables, right?

12
00:00:55.690 --> 00:00:59.800
So this i variable is going to be the
control variable for this particular loop.

13
00:01:01.620 --> 00:01:04.883
It's always i,
it doesn't have to be i but it always is.

14
00:01:04.883 --> 00:01:10.085
[LAUGH] So I can come in here and
I could totally make this like,

15
00:01:10.085 --> 00:01:13.148
no counter or something like that.

16
00:01:13.148 --> 00:01:19.100
And as long as I'm consistent,
&gt;&gt; Brian Holt: This works, right?

17
00:01:19.100 --> 00:01:20.390
So you can call it whatever you want.

18
00:01:21.590 --> 00:01:23.320
It's just always called i.

19
00:01:23.320 --> 00:01:27.860
[LAUGH] Across programming languages,
my entire life, it's always been i.

20
00:01:27.860 --> 00:01:29.603
So I would just implore
you to stick with i,

21
00:01:29.603 --> 00:01:32.326
because all of your coworkers will
probably do it that way as well.

22
00:01:35.589 --> 00:01:38.923
&gt;&gt; Brian Holt: Okay, so the first one
you declare your control variables.

23
00:01:38.923 --> 00:01:41.114
So in this case we are saying let i and

24
00:01:41.114 --> 00:01:44.855
start i at 0,
&gt;&gt; Brian Holt: The second one is

25
00:01:44.855 --> 00:01:48.383
the control statement which is going
to be as long as i is less than or

26
00:01:48.383 --> 00:01:49.650
equal to 10, right?

27
00:01:49.650 --> 00:01:54.240
So keep doing this until i is less than or
equal to 10.

28
00:01:54.240 --> 00:01:59.040
And then the last thing is run this
statement at the end of every loop, right?

29
00:01:59.040 --> 00:02:04.260
So at the end of every loop,
do i plus plus, right?

30
00:02:06.050 --> 00:02:09.400
So very similar to what we were doing
with the while loop before, right?

31
00:02:09.400 --> 00:02:12.816
We were just checking to see if
friendsAtYourParty got greater than ten,

32
00:02:12.816 --> 00:02:15.089
and once it was greater
than ten then it stopped.

33
00:02:17.458 --> 00:02:18.603
&gt;&gt; Brian Holt: So
same thing happening here.

34
00:02:21.322 --> 00:02:25.222
&gt;&gt; Brian Holt: And actually, so that
they're all considered equal we'll do,

35
00:02:30.048 --> 00:02:32.040
&gt;&gt; Brian Holt: Less than ten.

36
00:02:32.040 --> 00:02:35.776
So same thing here for your fresh and
evaluate, it's gonna be ten.

37
00:02:40.415 --> 00:02:43.130
&gt;&gt; Brian Holt: So kind of just walk
you through the iteration here.

38
00:02:43.130 --> 00:02:47.940
The first thing it's gonna ask is,

39
00:02:47.940 --> 00:02:52.274
is 0 less than or equal to 10?

40
00:02:54.070 --> 00:02:55.880
It's not, so it goes into the loop,

41
00:02:55.880 --> 00:02:58.460
it runs this particular thing
friendsAtYourParty plus plus.

42
00:02:58.460 --> 00:03:00.940
So this gets implemented from zero to one,
right?

43
00:03:02.890 --> 00:03:04.270
It finishes the loop.

44
00:03:04.270 --> 00:03:05.570
It runs i plus plus.

45
00:03:05.570 --> 00:03:07.226
So now i is one, right?

46
00:03:07.226 --> 00:03:12.635
Then it's gonna go through and ask this
question again, is one greater than ten?

47
00:03:12.635 --> 00:03:15.676
It's not, so
it is going to go through in here,

48
00:03:15.676 --> 00:03:20.466
run friends plus plus again and it is
going to keep running that loop over and

49
00:03:20.466 --> 00:03:23.606
over and over again,
until this is ten, right?

50
00:03:23.606 --> 00:03:26.326
Once it is ten,
then you've completed the loop and

51
00:03:26.326 --> 00:03:28.235
it is going to finish the loop here.

52
00:03:32.603 --> 00:03:33.302
&gt;&gt; Brian Holt: Yeah?

53
00:03:33.302 --> 00:03:36.390
&gt;&gt; Speaker 2: I don't think I've
ever seen let i in a for loop.

54
00:03:36.390 --> 00:03:39.332
Why will it let you not use let?

55
00:03:39.332 --> 00:03:40.121
[LAUGH]
&gt;&gt; Brian Holt: [LAUGH]

56
00:03:40.121 --> 00:03:41.747
&gt;&gt; Speaker 2: Cuz I could just say for

57
00:03:41.747 --> 00:03:45.171
i equals zero, so
I get why you're using let for

58
00:03:45.171 --> 00:03:48.750
the other variables,
cuz you can change them.

59
00:03:48.750 --> 00:03:49.580
&gt;&gt; Brian Holt: Like this?

60
00:03:49.580 --> 00:03:50.080
&gt;&gt; Speaker 2: Yeah.

61
00:03:51.700 --> 00:03:55.400
&gt;&gt; Brian Holt: So the reason why you don't
wanna do it this way, this does work,

62
00:03:56.930 --> 00:04:01.490
and we'll get into this momentarily here,
but

63
00:04:01.490 --> 00:04:05.480
it's still is basically implicitly
creating this i for you.

64
00:04:06.950 --> 00:04:10.000
But now it's no longer scoped
to this particular for loop,

65
00:04:10.000 --> 00:04:11.034
which is now what you want.

66
00:04:11.034 --> 00:04:14.070
And I will qualify that here in just
a second because we're about to talk

67
00:04:14.070 --> 00:04:14.850
about scope.

68
00:04:18.710 --> 00:04:22.210
Suffice to say you should say,
let i equal zero here.

69
00:04:23.920 --> 00:04:26.590
So inside of here you can
actually say console.log i, and

70
00:04:26.590 --> 00:04:29.660
you can actually use the i inside of here.

71
00:04:29.660 --> 00:04:31.650
So what would you expect here to happen?

72
00:04:35.120 --> 00:04:38.982
It's gonna count from zero to ten.

73
00:04:40.940 --> 00:04:43.356
&gt;&gt; Brian Holt: We'll console.log
this last one out here.

74
00:04:43.356 --> 00:04:45.217
So it goes from zero to nine here, right?

75
00:04:45.217 --> 00:04:49.118
So it actually does ten iterations
if zero counts as well.

76
00:04:49.118 --> 00:04:51.232
So for loops are very useful for

77
00:04:51.232 --> 00:04:54.820
if you have to do something
a defined amount of time.

78
00:04:54.820 --> 00:04:56.590
If I have to do something ten times,

79
00:04:56.590 --> 00:04:59.430
this is a very easy way to do
something exactly ten times.

80
00:05:02.694 --> 00:05:04.049
&gt;&gt; Brian Holt: And hence, I would say for

81
00:05:04.049 --> 00:05:06.953
loops are probably the ones
you're gonna use the most.

82
00:05:06.953 --> 00:05:12.298
I don't very frequently do while loops,
very frequently I do for loops.

