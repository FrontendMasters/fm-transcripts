WEBVTT

1
00:00:00.350 --> 00:00:03.240
&gt;&gt; Brian: So one last tidbit here.

2
00:00:08.650 --> 00:00:10.400
&gt;&gt; Brian: Where was this?

3
00:00:10.400 --> 00:00:14.120
Here, notice that I'm using
== here when I just told you,

4
00:00:14.120 --> 00:00:17.326
I don't know, an hour ago, not to do ==.

5
00:00:17.326 --> 00:00:20.942
When you're doing the math here,
you should use ==.

6
00:00:20.942 --> 00:00:24.457
And why.

7
00:00:24.457 --> 00:00:31.330
So userAnswer is coming from here,
from this input here in the browser.

8
00:00:32.570 --> 00:00:36.030
If I type 15 in here,
the browser doesn't know that's a number.

9
00:00:36.030 --> 00:00:38.659
The browser assumes everything
is a string, right?

10
00:00:40.100 --> 00:00:43.350
So here, I'm asking you to do math, number
times number, that's going to give you

11
00:00:43.350 --> 00:00:47.480
back a number, but
userAnswer is always gonna be a string.

12
00:00:49.330 --> 00:00:53.970
But we can check if they're equivalent by
doing double equals cuz it's gonna force

13
00:00:53.970 --> 00:00:57.240
those two things to both be numbers.

14
00:00:58.770 --> 00:01:00.230
That makes sense?

15
00:01:00.230 --> 00:01:02.750
So when you're doing math,
use double equals.

16
00:01:02.750 --> 00:01:07.140
Everything else, you can use triple
equals, if that's too much of a difficulty

17
00:01:07.140 --> 00:01:12.050
just use double equals for the rest of
this quiz, just not afterwards [LAUGH].

18
00:01:12.050 --> 00:01:12.750
Yeah.
Questions.

19
00:01:12.750 --> 00:01:13.560
&gt;&gt; Speaker 2: Is that the case for

20
00:01:13.560 --> 00:01:16.800
everything that would ever
be typed into a browser?

21
00:01:16.800 --> 00:01:18.850
Like, if you're working with a form,

22
00:01:18.850 --> 00:01:21.030
everything you get from
that form will be a string.

23
00:01:21.030 --> 00:01:22.650
And you have to either
turn it into a number.

24
00:01:22.650 --> 00:01:24.610
&gt;&gt; Brian: Yep.
&gt;&gt; Speaker 2: Or do something like that.

25
00:01:24.610 --> 00:01:27.230
&gt;&gt; Brian: Yes if you want to
do it a different way and

26
00:01:27.230 --> 00:01:31.200
not use double equals here,
you could also say const

27
00:01:33.490 --> 00:01:39.394
newAnswer, whatever you want to call it,
equals parseInt(userAnswer).

28
00:01:40.670 --> 00:01:44.490
ParseInt is given to you by the browser
to be able to turn strings into numbers.

29
00:01:46.560 --> 00:01:48.640
And then here you would be
able to use triple equals.

30
00:01:50.510 --> 00:01:52.224
I'm fine with either way
that you choose to do that.

