WEBVTT

1
00:00:00.090 --> 00:00:01.864
&gt;&gt; Brian Holt: Yeah.
&gt;&gt; Speaker 2: So, looking ahead,

2
00:00:01.864 --> 00:00:06.864
how long do you think it'll take before
JavaScript just lets you say strings.map

3
00:00:06.864 --> 00:00:07.813
to uppercase?

4
00:00:07.813 --> 00:00:12.685
[LAUGH] Cuz that's what I wanna do [LAUGH]
&gt;&gt; Brian Holt: I mean, we could.

5
00:00:12.685 --> 00:00:19.152
This is gonna be way more gross,
but you could totally do strings.

6
00:00:19.152 --> 00:00:26.174
Let's say aconst x = this is some thing.

7
00:00:26.174 --> 00:00:29.138
So, I can say x.split.

8
00:00:31.851 --> 00:00:37.498
&gt;&gt; Brian Holt: Split allows
me to split this string

9
00:00:37.498 --> 00:00:42.768
into an array of characters, and

10
00:00:42.768 --> 00:00:49.555
then I can map s to s.toUpperCase()).

11
00:00:49.555 --> 00:00:54.510
Okay, now everything in here is uppercase,
and then here I'm just going to join.

12
00:00:58.853 --> 00:01:01.813
&gt;&gt; Brian Holt: Now this was absolutely
pointless, but I enjoyed it [LAUGH]

13
00:01:11.450 --> 00:01:12.220
&gt;&gt; Brian Holt: But again,

14
00:01:12.220 --> 00:01:16.927
this is kind of the fun parts of
the more functional style of programing.

15
00:01:16.927 --> 00:01:20.232
You have these transformations that
kind of take place over line by line.

16
00:01:26.777 --> 00:01:28.215
&gt;&gt; Brian Holt: And
we can even put something in here.

17
00:01:28.215 --> 00:01:29.424
There's one called filter.

18
00:01:33.478 --> 00:01:38.660
&gt;&gt; Brian Holt: So filter takes an array,
and whatever you return true and

19
00:01:38.660 --> 00:01:46.110
stays in the array, and whatever you
return false on removes from the array.

20
00:01:46.110 --> 00:01:54.701
So let's say we're super against
having Is in our strings so

21
00:01:54.701 --> 00:01:59.417
we wanna filter out all the Is, so

22
00:01:59.417 --> 00:02:05.649
I could say this would
take in some string and

23
00:02:05.649 --> 00:02:10.543
it returns that S is not equal to I.

24
00:02:14.039 --> 00:02:15.781
&gt;&gt; Brian Holt: And
now all of my Is are gone.

25
00:02:20.796 --> 00:02:22.804
&gt;&gt; Brian Holt: So this looks weird right?

26
00:02:22.804 --> 00:02:29.617
This is exclamation.= equals, but it's
combining those together into that thing.

27
00:02:33.290 --> 00:02:35.019
&gt;&gt; Brian Holt: Did I talk
about not equals yesterday?

28
00:02:35.019 --> 00:02:36.059
I probably didn't, did I?

29
00:02:36.059 --> 00:02:45.966
Okay, worth talking about, [LAUGH]
&gt;&gt; Brian Holt: Let's talk about them.

30
00:02:48.035 --> 00:02:51.567
&gt;&gt; Brian Holt: I think it's pretty,
hopefully implicit.

31
00:02:57.009 --> 00:03:02.797
&gt;&gt; Brian Holt: So we talked about
equal equals right, and triple equals,

32
00:03:02.797 --> 00:03:08.828
so if triple equals two,
then console.log these are equal.

33
00:03:11.973 --> 00:03:12.604
&gt;&gt; Brian Holt: Right?

34
00:03:12.604 --> 00:03:14.183
We got there.

35
00:03:14.183 --> 00:03:20.152
This is just three equal signs next to
each other, but now I wanted to ask,

36
00:03:20.152 --> 00:03:25.468
are they not equal to each other,
so I'll do != equals, okay?

37
00:03:25.468 --> 00:03:30.629
So as two not equal to three,
these are not equal.

38
00:03:33.845 --> 00:03:36.921
&gt;&gt; Brian Holt: So, just replace one of the
equal signs with an exclamation point and

39
00:03:36.921 --> 00:03:40.210
that'll ask the question,
are these things not equal?

40
00:03:40.210 --> 00:03:40.720
Make sense?

