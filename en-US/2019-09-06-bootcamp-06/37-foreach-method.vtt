WEBVTT

1
00:00:00.020 --> 00:00:02.270
&gt;&gt; Brian Holt: That's the for
loop method that we showed you here.

2
00:00:04.260 --> 00:00:07.940
This is a little bit
different way of doing it.

3
00:00:07.940 --> 00:00:14.920
So, cities or arrays rather has
a function on it called forEach.

4
00:00:16.560 --> 00:00:20.982
Now, forEach is a function
that accepts a function,

5
00:00:20.982 --> 00:00:25.712
which is like a little bit
of function-ception for you.

6
00:00:25.712 --> 00:00:28.056
But let's unpack that a little bit.

7
00:00:28.056 --> 00:00:33.413
So let's make that even a little bit more,
&gt;&gt; Brian Holt: Let's

8
00:00:33.413 --> 00:00:35.328
make it more abstract, and
then we'll make it more concrete.

9
00:00:35.328 --> 00:00:39.220
Okay, so if I have const someFunction,

10
00:00:39.220 --> 00:00:44.036
I can actually assign
variables to be functions.

11
00:00:44.036 --> 00:00:48.719
So function thing, and
this just returns 5.

12
00:00:51.721 --> 00:00:55.878
&gt;&gt; Brian Holt: Okay, so we haven't done
this previously, but I think, hopefully,

13
00:00:55.878 --> 00:00:57.002
this makes sense.

14
00:00:57.002 --> 00:01:00.470
We can pass around functions just
like we pass around variables.

15
00:01:00.470 --> 00:01:04.900
So now, I can call some function,
okay, right?

16
00:01:04.900 --> 00:01:05.638
That makes sense.

17
00:01:05.638 --> 00:01:09.867
It's logging on 5 there because
that's all this does is return 5.

18
00:01:09.867 --> 00:01:16.410
But now,
what if I have const someOtherFunction,

19
00:01:16.410 --> 00:01:24.475
and that's a function that accepts
a function as a parameter,

20
00:01:24.475 --> 00:01:30.728
and all it does is return
function being called.

21
00:01:30.728 --> 00:01:32.677
Let's just get rid of that for a second.

22
00:01:37.726 --> 00:01:43.560
&gt;&gt; Brian Holt: So now,
if I call someOtherFunction.

23
00:01:43.560 --> 00:01:48.171
And I pass in someFunction,
what would you expect to happen?

24
00:01:50.715 --> 00:01:51.577
&gt;&gt; Group: 5.

25
00:01:51.577 --> 00:01:54.665
&gt;&gt; Brian Holt: 5, right,
so, some function,

26
00:01:54.665 --> 00:01:59.246
is a variable that represents a function,
right?

27
00:02:01.594 --> 00:02:03.152
&gt;&gt; Brian Holt: And
that function just returns 5.

28
00:02:03.152 --> 00:02:06.885
And now, I'm passing that function
to here, to this parameter, and

29
00:02:06.885 --> 00:02:08.481
I'm calling that function.

30
00:02:11.771 --> 00:02:14.262
&gt;&gt; Brian Holt: So the basic thing
I'm trying to represent to you here,

31
00:02:14.262 --> 00:02:16.917
is that you get to treat
functions like variables, right?

32
00:02:16.917 --> 00:02:18.723
You can pass around functions.

33
00:02:21.763 --> 00:02:24.909
&gt;&gt; Brian Holt: Which, is one of the more
powerful things that JavaScript is capable

34
00:02:24.909 --> 00:02:25.838
of, in my opinion.

35
00:02:28.105 --> 00:02:30.759
&gt;&gt; Brian Holt: So
going back up here to ForEach.

36
00:02:30.759 --> 00:02:32.747
ForEach is a function that
accepts a function, right.

37
00:02:32.747 --> 00:02:36.246
And, what this particular
function does is,

38
00:02:36.246 --> 00:02:40.566
it runs this function,
once per every item on the array.

39
00:02:40.566 --> 00:02:45.591
Okay, so for cities I have 12345.

40
00:02:45.591 --> 00:02:50.853
How many times does this
function here get invoked?

41
00:02:50.853 --> 00:02:52.221
Five times, right?

42
00:02:52.221 --> 00:02:54.994
It gets called once for
every item in the array.

43
00:02:54.994 --> 00:03:00.912
So here, and then this city here is it's
being passed in every single item, right?

44
00:03:00.912 --> 00:03:03.542
So, the first thing it's
going to pass into Seattle.

45
00:03:03.542 --> 00:03:07.321
The second thing that's going to pass
in is San Francisco, so on and so

46
00:03:07.321 --> 00:03:08.228
forth, right?

47
00:03:08.228 --> 00:03:11.835
So, if we come back down here, you'll
see that it is logging out every item

48
00:03:11.835 --> 00:03:14.491
in the array because it's
constLogging that, yeah?

49
00:03:14.491 --> 00:03:20.078
&gt;&gt; Speaker 3: Why is it the method
two city instead of cities?

50
00:03:20.078 --> 00:03:21.727
&gt;&gt; Speaker 4: That can be I even, right?

51
00:03:21.727 --> 00:03:23.105
&gt;&gt; Brian Holt: This right here
is that what you're asking?

52
00:03:23.105 --> 00:03:23.676
&gt;&gt; Speaker 3: Yeah.

53
00:03:23.676 --> 00:03:24.945
&gt;&gt; Brian Holt: It can be whatever,

54
00:03:24.945 --> 00:03:28.087
it's just the name of
whatever I chose to call it.

55
00:03:28.087 --> 00:03:29.508
Just like it's a parameter, right?

56
00:03:29.508 --> 00:03:31.102
I chose to call this one fn.

57
00:03:31.102 --> 00:03:35.340
I could have called it lol.

58
00:03:35.340 --> 00:03:36.303
It's just the name of the variable.

59
00:03:36.303 --> 00:03:37.021
&gt;&gt; Speaker 3: Okay.

60
00:03:37.021 --> 00:03:38.090
&gt;&gt; Brian Holt: Does that
answer your question?

61
00:03:38.090 --> 00:03:38.630
&gt;&gt; Speaker 3: Yes.

62
00:03:38.630 --> 00:03:39.531
&gt;&gt; Brian Holt: Cool.

63
00:03:39.531 --> 00:03:41.764
&gt;&gt; Speaker 4: City is
more logically connected.

64
00:03:41.764 --> 00:03:43.672
&gt;&gt; Brian Holt: No, no whatever,
I'm sticking with that.

65
00:03:43.672 --> 00:03:47.896
&gt;&gt; Group: [LAUGH]
&gt;&gt; Speaker 4: In this context,

66
00:03:47.896 --> 00:03:48.823
it gets confusing.

67
00:03:48.823 --> 00:03:51.491
&gt;&gt; Brian Holt: Yeah.

68
00:03:51.491 --> 00:03:54.242
&gt;&gt; Speaker 5: So,
every time you would write this forEach,

69
00:03:54.242 --> 00:03:55.729
would you call it a loop?

70
00:03:55.729 --> 00:04:00.861
Or, I guess when you call
the forEach function on a an array,

71
00:04:00.861 --> 00:04:06.412
you would always call function
with some variable name in there.

72
00:04:06.412 --> 00:04:09.124
And the variable name will represent,

73
00:04:09.124 --> 00:04:12.829
they'll always be each element of array,
correct?

74
00:04:12.829 --> 00:04:15.325
&gt;&gt; Brian Holt: Yep, so you can be
assured because this is the way that

75
00:04:15.325 --> 00:04:16.109
forEach works.

76
00:04:16.109 --> 00:04:20.221
That the first parameter that you get is
going to be whatever item in the array

77
00:04:20.221 --> 00:04:22.226
that you're currently working on.

78
00:04:22.226 --> 00:04:23.949
&gt;&gt; Speaker 5: And
if you have an array of objects,

79
00:04:23.949 --> 00:04:26.083
then that would give
you the entire object.

80
00:04:26.083 --> 00:04:29.340
&gt;&gt; Brian Holt: Correct,
whatever is in here, right, so

81
00:04:29.340 --> 00:04:32.510
if I put true here just
again to upset you.

82
00:04:32.510 --> 00:04:36.415
The last thing in here is gonna be true,
right?

83
00:04:36.415 --> 00:04:41.669
Now, I believe there's a second secret
parameter, that I put index here,

84
00:04:41.669 --> 00:04:45.375
it will actually give you
whatever index you're on.

85
00:04:45.375 --> 00:04:47.170
0, 1, 2, 3, 4 as well.

86
00:04:47.170 --> 00:04:51.591
So, if you need that particular index,
like we did up here,

87
00:04:51.591 --> 00:04:55.852
right, what i represents,
you also have access to that.

88
00:04:55.852 --> 00:04:58.437
Most time, it doesn't matter so
you can just ignore it.

89
00:04:58.437 --> 00:05:00.571
You don't even have to
accept the parameter.

90
00:05:00.571 --> 00:05:02.977
And that's fine, they're okay with that.

91
00:05:02.977 --> 00:05:06.352
&gt;&gt; Speaker 5: And if you are working
with an array of objects that were like

92
00:05:06.352 --> 00:05:07.984
people like we used before.

93
00:05:07.984 --> 00:05:13.112
I could say function, whatever name and
it would print out all the names,

94
00:05:13.112 --> 00:05:16.105
as opposed the objects, would that work?

95
00:05:16.105 --> 00:05:19.903
&gt;&gt; Brian Holt: So, like if these were
objects and they have like .name.

96
00:05:19.903 --> 00:05:20.667
&gt;&gt; Speaker 5: Yeah.

97
00:05:20.667 --> 00:05:24.380
&gt;&gt; Brian Holt: So
it would try and like loop over.

98
00:05:24.380 --> 00:05:27.123
&gt;&gt; Speaker 5: No, so
you leave cities right there but

99
00:05:27.123 --> 00:05:30.170
there will be like whatever.name
&gt;&gt; Brian Holt: Here?

100
00:05:30.170 --> 00:05:31.218
&gt;&gt; Speaker 5: Yeah.

101
00:05:31.218 --> 00:05:32.535
&gt;&gt; Brian Holt: Uh-uh,
that's not gonna work.

102
00:05:34.582 --> 00:05:38.941
&gt;&gt; Brian Holt: There's kind
of a way you can do that.

103
00:05:38.941 --> 00:05:40.960
&gt;&gt; Speaker 5: Even getting in the weeds,
feel free to stop me.

104
00:05:40.960 --> 00:05:44.390
&gt;&gt; Brian Holt: Yeah, I mean you can
do what's called de-structuring here,

105
00:05:44.390 --> 00:05:46.732
I'd have to put these curly braces there.

106
00:05:48.277 --> 00:05:49.454
&gt;&gt; Speaker 5: Don't like that at all.
&gt;&gt; Brian Holt: Yeah.

107
00:05:49.454 --> 00:05:51.767
&gt;&gt; Speaker 5: [LAUGH]
&gt;&gt; Brian Holt: Yeah,

108
00:05:51.767 --> 00:05:53.153
just a little off in the weeds.

109
00:05:53.153 --> 00:05:53.655
&gt;&gt; Speaker 5: Okay.

110
00:05:53.655 --> 00:05:55.900
&gt;&gt; Brian Holt: We'll come
back to that one, yeah.

111
00:05:55.900 --> 00:05:59.100
&gt;&gt; Speaker 6: And then, when you're
creating parameters, you don't have to

112
00:05:59.100 --> 00:06:03.187
declare them anywhere else beforehand,
they're declared right then and there.

113
00:06:03.187 --> 00:06:04.601
&gt;&gt; Brian Holt: Like this one right here.

114
00:06:04.601 --> 00:06:06.001
Yep, just declared right there.

115
00:06:09.732 --> 00:06:11.806
&gt;&gt; Brian Holt: You have to play fast and
loose.

116
00:06:14.815 --> 00:06:15.662
&gt;&gt; Brian Holt: Which again,

117
00:06:15.662 --> 00:06:19.629
it's a double edged sword like it
helps you be really productive.

118
00:06:19.629 --> 00:06:22.733
It also will create problems for you.

119
00:06:22.733 --> 00:06:26.131
Eventually just kind of get used to,
you shoot yourself in the foot so

120
00:06:26.131 --> 00:06:27.959
many times you kind of get used to it.

121
00:06:27.959 --> 00:06:29.418
It's like Stockholm Syndrome.

122
00:06:29.418 --> 00:06:33.210
[LAUGH] I like JavaScript.

123
00:06:33.210 --> 00:06:34.790
I quite enjoy it.

124
00:06:35.920 --> 00:06:37.905
&gt;&gt; Brian Holt: I've been doing it for
a decade, though, so.

125
00:06:37.905 --> 00:06:39.214
&gt;&gt; Speaker 7: Says our kidnapper.

126
00:06:39.214 --> 00:06:42.113
&gt;&gt; Group: [LAUGH]
&gt;&gt; Brian Holt: Yep.

127
00:06:43.898 --> 00:06:45.359
&gt;&gt; Brian Holt: Other questions?

128
00:06:47.949 --> 00:06:52.449
&gt;&gt; Brian Holt: So, if you ask me which
one of these I prefer, I prefer this one.

129
00:06:52.449 --> 00:06:57.734
And what's curious about this,
I probably didn't learn about forEach and

130
00:06:57.734 --> 00:07:01.960
how it worked until probably
like five years into my career.

131
00:07:01.960 --> 00:07:06.268
I just went to some meetup,
I don't even remember who was speaking,

132
00:07:06.268 --> 00:07:07.839
it was in Salt Lake City.

133
00:07:07.839 --> 00:07:13.074
And someone started talking about this
new fangled functional programming thing,

134
00:07:13.074 --> 00:07:15.737
which is not new fangled,
but it was to me.

135
00:07:15.737 --> 00:07:20.598
And I once I started learning about it and
getting more interested is I wish I

136
00:07:20.598 --> 00:07:23.771
had learned about this
way earlier in my career.

137
00:07:23.771 --> 00:07:28.741
So this is like the tip of an iceberg of
an entire paradigm of programming again

138
00:07:28.741 --> 00:07:30.965
called functional programming.

139
00:07:30.965 --> 00:07:34.132
So there's another one called map.

140
00:07:36.535 --> 00:07:40.448
&gt;&gt; Brian Holt: Works relatively
the same way as forEach.

141
00:07:40.448 --> 00:07:48.267
But instead what happens if I
do return city.toupperCase[ ].

142
00:07:48.267 --> 00:07:53.112
And this will be const newCities = that.

143
00:07:53.112 --> 00:07:56.222
And I come over here and

144
00:07:56.222 --> 00:08:01.256
say a console.log, new cities.

145
00:08:01.256 --> 00:08:02.528
And I got rid of this.

146
00:08:02.528 --> 00:08:05.304
Yeah, look, dynamic programming.

147
00:08:05.304 --> 00:08:12.681
So now, I have a new array here from new
cities and everything is to uppercase.

148
00:08:12.681 --> 00:08:16.200
So what map does again works
relatively the same way as for

149
00:08:16.200 --> 00:08:19.218
each, it goes over every
item in the array once.

150
00:08:19.218 --> 00:08:20.809
But whatever you return,

151
00:08:20.809 --> 00:08:25.380
it creates a new array with whatever
those things that you're returning.

152
00:08:25.380 --> 00:08:29.203
So the idea behind map is you're
taking some array of something,

153
00:08:29.203 --> 00:08:33.179
and you're transforming into
an array of something else, right?

154
00:08:33.179 --> 00:08:37.583
So I'm just taking those, and
I'm returning everything into uppercase.

155
00:08:37.583 --> 00:08:39.704
And that's why I get a new array here.

156
00:08:39.704 --> 00:08:41.931
Keep in mind that I have
not modified cities.

157
00:08:41.931 --> 00:08:46.689
So, if I come back in here and
I log cities above it,

158
00:08:46.689 --> 00:08:50.363
cities is totally unchanged, right?

159
00:08:50.363 --> 00:08:54.937
But now I have a new
array here in new cities

160
00:08:54.937 --> 00:08:59.917
that is everything into uppercase, right?

161
00:08:59.917 --> 00:09:00.959
Make sense?

162
00:09:02.722 --> 00:09:05.366
&gt;&gt; Speaker 8: If you didn't
create the new cities constant,

163
00:09:05.366 --> 00:09:08.219
would you still have a new array or
just be the same?

164
00:09:08.219 --> 00:09:09.679
&gt;&gt; Brian Holt: So, if I didn't do this?

165
00:09:09.679 --> 00:09:10.462
Is that what you're saying?

166
00:09:10.462 --> 00:09:11.783
&gt;&gt; Speaker 8: Yeah.

167
00:09:11.783 --> 00:09:18.182
&gt;&gt; Brian Holt: This would still be run,
but it wouldn't be stored anywhere, right?

168
00:09:18.182 --> 00:09:22.176
So, this would return something that
would just be thrown away, right?

169
00:09:22.176 --> 00:09:24.969
So you have to store it somewhere.

170
00:09:24.969 --> 00:09:30.772
It would be the same as saying,
2 + 2, that's valid JavaScript.

171
00:09:30.772 --> 00:09:32.843
That will run,
that's not gonna crash the program.

172
00:09:37.693 --> 00:09:39.899
&gt;&gt; Brian Holt: But since,
this is not being stored anywhere,

173
00:09:39.899 --> 00:09:41.950
it's just executes that and then moves on.

