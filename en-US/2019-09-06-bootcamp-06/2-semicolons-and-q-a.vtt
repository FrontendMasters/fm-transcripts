WEBVTT

1
00:00:00.000 --> 00:00:02.925
&gt;&gt; Brian Holt: Semicolons,
you've probably noticed these.

2
00:00:02.925 --> 00:00:05.859
This is like a period in
JavaScript language, right?

3
00:00:05.859 --> 00:00:07.937
It's the end of a sentence.

4
00:00:07.937 --> 00:00:09.535
It's the end of a thought.

5
00:00:09.535 --> 00:00:14.423
Or, as it's called in JavaScript,
it's the end of a statement, right?

6
00:00:14.423 --> 00:00:16.474
Technically, they are optional.

7
00:00:16.474 --> 00:00:20.974
So if I went through and
deleted all of these,

8
00:00:20.974 --> 00:00:25.475
this still executes
because there's a thing

9
00:00:25.475 --> 00:00:29.634
called auto semicolon insertion, ASI.

10
00:00:29.634 --> 00:00:31.443
There's some people that
prefer writing code this way.

11
00:00:31.443 --> 00:00:33.423
There are other people that don't
like writing code this way.

12
00:00:33.423 --> 00:00:38.108
I'm just showing you so
you know that it is technically valid.

13
00:00:38.108 --> 00:00:40.256
And I don't care [LAUGH].

14
00:00:40.256 --> 00:00:42.795
I really don't.

15
00:00:42.795 --> 00:00:45.570
Now I just have a tool that inserts it for
me automatically.

16
00:00:45.570 --> 00:00:47.209
And I never have to think
about it ever again.

17
00:00:47.209 --> 00:00:49.749
But that's up to you how you wanna do it.

18
00:00:49.749 --> 00:00:51.564
Technically, at the end of a day,

19
00:00:51.564 --> 00:00:54.640
JavaScript is inserting these
semicolons there for you.

20
00:00:54.640 --> 00:00:57.203
So they end up there whether or
not you write them there.

21
00:00:58.746 --> 00:00:59.725
&gt;&gt; Brian Holt: But that's what it's for.

22
00:00:59.725 --> 00:01:04.310
It's for ending a sentence or
ending a statement.

23
00:01:05.895 --> 00:01:06.738
&gt;&gt; Brian Holt: Okay.

24
00:01:10.727 --> 00:01:13.053
&gt;&gt; Brian Holt: Just so you know,
I have yeah, go ahead.

25
00:01:13.053 --> 00:01:16.775
&gt;&gt; Speaker 2: Can we use
var to declare a variable?.

26
00:01:16.775 --> 00:01:18.300
&gt;&gt; Brian Holt: So
there is an old way of doing it.

27
00:01:18.300 --> 00:01:19.330
That's a good question.

28
00:01:19.330 --> 00:01:21.217
Can we use a var?

29
00:01:21.217 --> 00:01:23.077
So there is a var like this.

30
00:01:23.077 --> 00:01:25.119
This is the old way of doing it.

31
00:01:27.003 --> 00:01:28.978
&gt;&gt; Brian Holt: There are people
that would disagree with me, but

32
00:01:28.978 --> 00:01:31.295
I would say never use var ever,
cuz there's no reason to.

33
00:01:31.295 --> 00:01:34.824
I think constant let totally
eclipsed the need for var.

34
00:01:34.824 --> 00:01:37.048
It has some different semantics, but

35
00:01:37.048 --> 00:01:40.320
you can logically think that
it works like let, right?

36
00:01:40.320 --> 00:01:45.254
So notice, this still works with var,
I was able to reassign it here.

37
00:01:45.254 --> 00:01:46.754
I choose not to use var.

38
00:01:46.754 --> 00:01:49.866
Kyle Simpson would fight me on it and
he would be wrong, yeah.

39
00:01:49.866 --> 00:01:53.193
&gt;&gt; Speaker 3: I notice so far you're
only using integers, will let and

40
00:01:53.193 --> 00:01:56.255
constant still allow you
to go into decimal places?

41
00:01:56.255 --> 00:02:02.381
&gt;&gt; Brian Holt: Yes, so you can see here,
I can change that to be.

42
00:02:05.033 --> 00:02:07.311
&gt;&gt; Brian Holt: Yeah,
suffice it to say, you can.

43
00:02:07.311 --> 00:02:12.110
So in JavaScript.

44
00:02:12.110 --> 00:02:16.042
Here we go, and
notice that that has decimals.

45
00:02:16.042 --> 00:02:21.008
In JavaScript, there is no difference
between integers and decimal places or

46
00:02:21.008 --> 00:02:25.534
floats, as they're often called in
computer sciencey stupid terms.

47
00:02:25.534 --> 00:02:26.366
There's no difference between them.

48
00:02:26.366 --> 00:02:29.629
There's just one number type.

49
00:02:29.629 --> 00:02:32.227
And we'll get into other things
like strings here in a second.

50
00:02:32.227 --> 00:02:33.441
But does that answer your question?

51
00:02:33.441 --> 00:02:36.013
Cool.

