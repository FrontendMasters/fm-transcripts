WEBVTT

1
00:00:03.629 --> 00:00:06.849
&gt;&gt; Brian Holt: So we're gonna kinda
start grouping things together, right?

2
00:00:06.849 --> 00:00:07.707
That kinda makes sense.

3
00:00:07.707 --> 00:00:12.031
Like if you have information about your
user about of your website, right,

4
00:00:12.031 --> 00:00:16.304
you're gonna wanna group together
their email and their, I don't know.

5
00:00:16.304 --> 00:00:19.947
First name and last name and location,
that kinda stuff together, right?

6
00:00:19.947 --> 00:00:23.579
And so something like an object
is really useful for that, right?

7
00:00:23.579 --> 00:00:26.552
An object can be thought of just like
a bag of a bunch of variables, right?

8
00:00:26.552 --> 00:00:31.150
You're just kinda like
putting them together.

9
00:00:31.150 --> 00:00:34.045
So another one, it's a collection of data.

10
00:00:34.045 --> 00:00:38.350
So here I've described a person,

11
00:00:38.350 --> 00:00:42.362
Brian that loves tacos is true.

12
00:00:42.362 --> 00:00:46.480
Guess who was when in doubt about that,
I do love tacos.

13
00:00:46.480 --> 00:00:47.793
What's tacos right now.

14
00:00:47.793 --> 00:00:49.909
I think I was hungry when
I wrote this part, too.

15
00:00:49.909 --> 00:00:54.348
So first off, taco wanted, that's sad.

16
00:00:54.348 --> 00:00:58.669
Okay, so if you say,
console.logperson, right,

17
00:00:58.669 --> 00:01:04.045
person is what persons and object and
you can tell it's an object,

18
00:01:04.045 --> 00:01:10.492
because of these curly braces, right,
and just notice that's key and value.

19
00:01:10.492 --> 00:01:12.255
So the key is the name, right?

20
00:01:12.255 --> 00:01:17.227
So if I ask for what is the name of this
person, you'll get back Brian Holt, hence,

21
00:01:17.227 --> 00:01:18.022
right here.

22
00:01:18.022 --> 00:01:19.857
Console.log.person.name, right?

23
00:01:19.857 --> 00:01:22.655
You're asking for the name property and

24
00:01:22.655 --> 00:01:27.104
property is just another word for
variable inside of an object.

25
00:01:27.104 --> 00:01:34.427
So console.logperson.name and you can
also do it with this notation here.

26
00:01:34.427 --> 00:01:38.113
Let's make this a little bit bigger.

27
00:01:38.113 --> 00:01:41.358
On line 11 here that I can ask for
it with,

28
00:01:41.358 --> 00:01:44.973
these are the square brackets and
quotes here.

29
00:01:44.973 --> 00:01:46.212
So this does work.

30
00:01:46.212 --> 00:01:51.889
However, just so you know, this,
the line tennis preferred syntax for that.

31
00:01:51.889 --> 00:01:54.083
So typically, you won't do it this way.

32
00:01:54.083 --> 00:01:57.109
You'll do it this way look like
we do it online, tap here.

33
00:01:57.109 --> 00:01:58.013
So.

34
00:01:59.705 --> 00:02:01.399
&gt;&gt; Brian Holt: And then you can see here,

35
00:02:01.399 --> 00:02:05.096
the console.logperson gives
me the whole object here.

36
00:02:05.096 --> 00:02:07.674
And then person.name here
it gives us Brian Holt and

37
00:02:07.674 --> 00:02:11.439
person with the square brackets also
gives you back Brian Holt right there.

38
00:02:15.644 --> 00:02:18.401
&gt;&gt; Brian Holt: So we use objects
everywhere and all the time.

39
00:02:18.401 --> 00:02:21.020
So these are something that
you'll get very used to using.

40
00:02:24.519 --> 00:02:26.415
&gt;&gt; Brian Holt: Yep, keys and values.

41
00:02:26.415 --> 00:02:31.041
So something that's good
to note about this is that

42
00:02:31.041 --> 00:02:35.572
a person can only have one name property,
right?

43
00:02:35.572 --> 00:02:38.462
So these keys have to be
unique per object, right?

44
00:02:38.462 --> 00:02:44.452
So I can't just have another name
underneath here, if something else.

45
00:02:47.459 --> 00:02:52.414
&gt;&gt; Brian Holt: So actually,
I guess it's technically valid JavaScript,

46
00:02:52.414 --> 00:02:56.208
but look that I over wrote Brian Holt,
right?

47
00:02:56.208 --> 00:02:58.578
Now you can't see that here in the object,
right?

48
00:02:58.578 --> 00:03:04.291
So every object has a,
each key has to be unique per object.

49
00:03:04.291 --> 00:03:06.963
However, the values don't have to be.

50
00:03:06.963 --> 00:03:12.333
So if I put like favoriteCity or
something like that and

51
00:03:12.333 --> 00:03:17.484
I tried to put Seattle here,
that's fine, right?

52
00:03:17.484 --> 00:03:20.041
The values don't have to be unique.

53
00:03:20.041 --> 00:03:22.791
So I can have Seattle in here twice and
that's fine.

54
00:03:22.791 --> 00:03:25.112
It's just that you can have
the keys in there twice.

55
00:03:25.112 --> 00:03:27.571
Does it make sense, yeah?

56
00:03:27.571 --> 00:03:29.991
&gt;&gt; Speaker 2: You have
multiple favorite cities?

57
00:03:29.991 --> 00:03:34.477
&gt;&gt; Brian Holt: You can and
I'll show you how in just a second, okay?

58
00:03:34.477 --> 00:03:38.201
Cool, so
using a conjunction with functions,

59
00:03:38.201 --> 00:03:42.959
you can do some pretty powerful
stuff with objects, right?

60
00:03:44.740 --> 00:03:47.760
So I have this function
here called suggest

61
00:03:47.760 --> 00:03:50.360
music that takes in a person object,
right?

62
00:03:51.720 --> 00:03:54.010
And so I pass in person one, which is me.

63
00:03:55.200 --> 00:03:59.508
And if the person's age range is 25 to 35,
it says,

64
00:03:59.508 --> 00:04:04.745
we think you will like Daft Punk
you crazy millennial which is true.

65
00:04:04.745 --> 00:04:10.385
I do like Daft Punk and then Jack who
is my dad in case you're wondering,

66
00:04:10.385 --> 00:04:12.737
and he does like Johnny Cash.

67
00:04:12.737 --> 00:04:15.868
It says, otherwise, maybe or it says,
you're gonna like Johnny Cash.

68
00:04:15.868 --> 00:04:17.945
Otherwise, I think everyone
likes David Bowie, right?

69
00:04:17.945 --> 00:04:18.714
I guess we're in Minneapolis.

70
00:04:18.714 --> 00:04:20.966
I should've put Prince there, right?

71
00:04:20.966 --> 00:04:22.093
Yeah, my bad.

72
00:04:24.659 --> 00:04:26.314
&gt;&gt; Brian Holt: But I feel like
David Bowie's okay, too, right?

73
00:04:26.314 --> 00:04:32.742
So and then you look down here, it's you
can see that it's logs out at Punk, right?

74
00:04:32.742 --> 00:04:35.762
And then Johnny Cash, right?

75
00:04:35.762 --> 00:04:40.326
So I think that's pretty cool is that you
can pass on these objects and you can

76
00:04:40.326 --> 00:04:45.121
kinda create these flexible functions
around having these objects passed it.

77
00:04:45.121 --> 00:04:46.045
Does it make sense?

78
00:04:48.060 --> 00:04:48.666
&gt;&gt; Brian Holt: Cool.

79
00:04:52.700 --> 00:04:56.935
&gt;&gt; Brian Holt: Now we can get
even a little bit fancier and

80
00:04:56.935 --> 00:05:01.049
objects can have their own functions and

81
00:05:01.049 --> 00:05:06.382
this is called a method,
but it's just a function.

82
00:05:06.382 --> 00:05:11.087
I constantly call these methods which is
why I'm prepping you that I'm probably

83
00:05:11.087 --> 00:05:13.854
soon hereafter going to
call that a method, but

84
00:05:13.854 --> 00:05:17.326
a method is just a function
that's on an object basically.

85
00:05:19.616 --> 00:05:24.357
&gt;&gt; Brian Holt: So I have a dog object
here, right, with the curly brace.

86
00:05:24.357 --> 00:05:28.596
It's also good to note that there is a
comma here after all these properties and

87
00:05:28.596 --> 00:05:30.601
there has been like if you go up here.

88
00:05:30.601 --> 00:05:31.936
Most all these have commas after.

89
00:05:31.936 --> 00:05:33.528
That is required.

90
00:05:33.528 --> 00:05:38.829
This last one on line eight does
not have a comma, but you can.

91
00:05:38.829 --> 00:05:41.133
It's optional.

92
00:05:41.133 --> 00:05:42.490
That is up to you.

93
00:05:44.320 --> 00:05:50.320
So going back down here to the the dog
object, so its name is dog.

94
00:05:50.320 --> 00:05:53.055
And then it has a speak function here,
right?

95
00:05:53.055 --> 00:05:57.068
So now, so
I can call here dog.speak, right?

96
00:05:57.068 --> 00:05:59.975
And then you can see down here
that it runs that function.

97
00:06:02.282 --> 00:06:04.500
&gt;&gt; Brian Holt: Make sense?

98
00:06:04.500 --> 00:06:07.378
So this is the shorthand
way of writing functions.

99
00:06:07.378 --> 00:06:10.985
It's the newer way of writing
functions and objects.

100
00:06:10.985 --> 00:06:13.180
This is actually just shorthand for this.

101
00:06:18.440 --> 00:06:19.081
&gt;&gt; Brian Holt: Just so you know.

102
00:06:19.081 --> 00:06:23.645
So if you're like seeing people's older
code, it's probably gonna look like that.

103
00:06:25.832 --> 00:06:27.935
&gt;&gt; Brian Holt: But yeah,
feel free to just do that.

104
00:06:27.935 --> 00:06:28.604
I'm lazy.

105
00:06:28.604 --> 00:06:31.512
So I wanna have as few
keystrokes as possible.

106
00:06:35.828 --> 00:06:36.648
&gt;&gt; Brian Holt: And I mean,

107
00:06:36.648 --> 00:06:41.007
this is just a normal function
that can take in some parameter.

108
00:06:44.836 --> 00:06:47.103
&gt;&gt; Brian Holt: And some parameter.

109
00:06:52.540 --> 00:06:54.268
&gt;&gt; Brian Holt: It's a dog that's laughing,
I suppose.

110
00:06:54.268 --> 00:06:57.966
[LAUGH] Questions?

111
00:07:00.439 --> 00:07:02.866
&gt;&gt; Brian Holt: Good so far, okay?

112
00:07:05.542 --> 00:07:07.829
&gt;&gt; Brian Holt: Objects can have
objects inside of them, right,

113
00:07:07.829 --> 00:07:10.176
and those objects can have
objects inside of them.

114
00:07:10.176 --> 00:07:11.730
There's no limit there.

115
00:07:11.730 --> 00:07:13.884
You can nest objects infinitely, right?

116
00:07:13.884 --> 00:07:19.190
So I have me and then I have a name
object which has a first, and last.

117
00:07:19.190 --> 00:07:22.081
And then I have a location which
has a city, state and country.

118
00:07:22.081 --> 00:07:25.516
So if I console.log(me), right,
it'll log that whole thing out.

119
00:07:25.516 --> 00:07:33.468
Or if I come in here and say,
console.log(me.name.first),

120
00:07:33.468 --> 00:07:40.570
that's how you can access
deeply nested objects, right?

121
00:07:41.740 --> 00:07:43.584
Logs that out right there.

122
00:07:43.584 --> 00:07:44.459
&gt;&gt; Speaker 3: Question.
&gt;&gt; Brian Holt: Yeah.

123
00:07:44.459 --> 00:07:46.386
&gt;&gt; Speaker 3: So I'm used to thinking
of these or calling these like,

124
00:07:46.386 --> 00:07:47.045
data structures.

125
00:07:47.045 --> 00:07:50.986
Is there a difference between
an object and a data structure?

126
00:07:50.986 --> 00:07:57.012
Maybe it's like an abstraction thing,
but is this?

127
00:07:57.012 --> 00:08:01.909
Like does does JavaScript have
something called data structures that

128
00:08:01.909 --> 00:08:04.983
are separate or
is this just the same thing?

129
00:08:04.983 --> 00:08:10.060
&gt;&gt; Brian Holt: The answer to your question
is that a object is a data structure.

130
00:08:10.060 --> 00:08:11.692
&gt;&gt; Speaker 3: Okay.

131
00:08:11.692 --> 00:08:12.788
&gt;&gt; Brian Holt: There are.

132
00:08:14.726 --> 00:08:15.814
&gt;&gt; Brian Holt: In the sense of like,

133
00:08:15.814 --> 00:08:19.144
there's not gonna be like any hash
tables or anything like that.

134
00:08:19.144 --> 00:08:22.322
This is the only way of accomplishing
objects in different languages.

135
00:08:22.322 --> 00:08:25.423
They're gonna have different
implementations of objects basically and

136
00:08:25.423 --> 00:08:28.582
you choose the best one based on what
kind of performance profile you want.

137
00:08:28.582 --> 00:08:32.209
Like you want this to be really small in
memory, but you want it to go really fast.

138
00:08:32.209 --> 00:08:34.024
Or it's like you want it to be slow, but

139
00:08:34.024 --> 00:08:36.284
you want it to be really small in memory,
right?

140
00:08:36.284 --> 00:08:38.418
There's kind of those
tradeoffs that you make.

141
00:08:38.418 --> 00:08:40.172
JavaScript doesn't have any of that stuff.

142
00:08:40.172 --> 00:08:41.281
It's just objects.

143
00:08:41.281 --> 00:08:42.206
&gt;&gt; Speaker 3: Okay.

144
00:08:42.206 --> 00:08:43.119
&gt;&gt; Brian Holt: That's a good question.

145
00:08:43.119 --> 00:08:46.276
&gt;&gt; Speaker 4: Does that mean that
an array is a data structure also?

146
00:08:46.276 --> 00:08:47.175
&gt;&gt; Brian Holt: It is.

147
00:08:47.175 --> 00:08:49.992
Yep, we are about to
talk about those as well.

148
00:08:49.992 --> 00:08:51.086
But yeah, it is.

149
00:08:51.086 --> 00:08:56.109
&gt;&gt; Speaker 4: And I don't think you ever
mentioned, but undefined in the console,

150
00:08:56.109 --> 00:09:01.148
the result portion that's just normal for
results in a console in it?

151
00:09:01.148 --> 00:09:05.848
&gt;&gt; Brian Holt: It's an artifact of
how this particular thing that I'm

152
00:09:05.848 --> 00:09:07.053
using works.

153
00:09:07.053 --> 00:09:09.590
So it's whatever is
returned on the last line.

154
00:09:09.590 --> 00:09:12.891
So if I just put like five here,
it's gonna put five there.

155
00:09:14.845 --> 00:09:20.392
&gt;&gt; Brian Holt: So it's as if there was
an implicit return statement here and

156
00:09:20.392 --> 00:09:25.735
it's logging out whatever is
returned on that last line.

157
00:09:25.735 --> 00:09:29.728
So console.log returns undefined,
that's why.

158
00:09:33.335 --> 00:09:35.248
&gt;&gt; Brian Holt: In fact,
that's probably worth mentioning.

159
00:09:35.248 --> 00:09:40.177
Now that you've seen the syntax,
right, me.name.first and

160
00:09:40.177 --> 00:09:44.284
then you see console.log here,
we saw dog.speak,

161
00:09:44.284 --> 00:09:49.040
console is an object and
log is a function on console, right?

