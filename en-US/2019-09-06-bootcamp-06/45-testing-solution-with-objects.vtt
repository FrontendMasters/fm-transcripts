WEBVTT

1
00:00:00.440 --> 00:00:02.690
&gt;&gt; Brian Holt: Great, so
let's do Average Age here.

2
00:00:04.510 --> 00:00:07.681
So, I'll show you a couple ways to
do this, let's start with the for

3
00:00:07.681 --> 00:00:10.650
loop way and then I'll show you
the extra clever way of doing it.

4
00:00:18.433 --> 00:00:23.225
&gt;&gt; Brian Holt: I is list.length i++, okay?

5
00:00:23.225 --> 00:00:28.152
Here we're gonna have some sort of sum,
sort of say, let sum and

6
00:00:28.152 --> 00:00:31.266
we're gonna start that at zero, okay?

7
00:00:31.266 --> 00:00:36.689
And then what we're gonna do
here is we're just gonna say,

8
00:00:36.689 --> 00:00:39.950
sum += list[i].age, right?

9
00:00:41.340 --> 00:00:44.610
Relatively similar what were doing up
here, we're pulling the person off and

10
00:00:44.610 --> 00:00:45.470
then putting the name on.

11
00:00:45.470 --> 00:00:50.350
Here we're doing the same thing here, that
we're grabbing the age off of the person

12
00:00:50.350 --> 00:00:53.700
and we're adding that to
the current running sum, right?

13
00:00:53.700 --> 00:00:58.135
So by the end of this for-loop,
I'm going to have the current.

14
00:01:01.005 --> 00:01:03.690
&gt;&gt; Brian Holt: The sum of all
the ages of all the workers, right?

15
00:01:05.370 --> 00:01:06.190
You with me so far?

16
00:01:07.230 --> 00:01:10.250
Okay, then here, the average, right,

17
00:01:10.250 --> 00:01:15.100
is the entire sum divided by how
many items are in the list, right?

18
00:01:15.100 --> 00:01:19.758
So I'm gonna say,
sum divided by list.length

19
00:01:23.681 --> 00:01:25.065
&gt;&gt; Brian Holt: Right, make sense?

20
00:01:29.576 --> 00:01:32.140
&gt;&gt; Brian Holt: So and
that does end up solving it.

21
00:01:33.550 --> 00:01:36.350
Remember how I told you that
JavaScript numbers are quite

22
00:01:36.350 --> 00:01:39.100
imprecise particularly when it
comes to matters of division.

23
00:01:40.860 --> 00:01:45.490
Just to know that code down here at
the bottom here, I think its this

24
00:01:45.490 --> 00:01:50.629
a function that actually has like
a tolerance built into it, where is it?

25
00:01:50.629 --> 00:01:56.090
It is down here, all the way down here,
right there, to be close to, right?

26
00:01:56.090 --> 00:02:00.703
So as long as you're within,
I think like a whole tenth,

27
00:02:00.703 --> 00:02:03.308
it'll still count it as right.

28
00:02:14.643 --> 00:02:15.910
&gt;&gt; Brian Holt: Okay, where were we?

29
00:02:18.980 --> 00:02:20.090
So how do we feel about this?

30
00:02:20.090 --> 00:02:22.480
Does average age look okay to you?

31
00:02:22.480 --> 00:02:24.240
And I guess I could show you
other ways of doing this,

32
00:02:24.240 --> 00:02:26.600
but they're gonna look relatively
similar to the one above it.

33
00:02:26.600 --> 00:02:30.271
So, it's relatively the same game here, as
long as you're adding everything together,

34
00:02:30.271 --> 00:02:33.383
and then dividing by how many items on
the list you're gonna get the average.

35
00:02:33.383 --> 00:02:39.240
And that's all I want you to do here,
good, okay.

36
00:02:39.240 --> 00:02:42.867
&gt;&gt; Speaker 2: Is there like
a built in function that will,

37
00:02:42.867 --> 00:02:45.720
just like some numbers together?

38
00:02:45.720 --> 00:02:47.260
&gt;&gt; Brian Holt: Some sort
of like aggregator?

39
00:02:47.260 --> 00:02:50.472
&gt;&gt; Speaker 2: Yeah, I tried to find,
we can add function or

40
00:02:50.472 --> 00:02:52.660
a sum function didn't look like it.

41
00:02:52.660 --> 00:02:54.350
&gt;&gt; Brian Holt: No,
there's always gonna be anything built in.

42
00:02:54.350 --> 00:02:57.170
There's one that you can use
called reduce, that's gonna

43
00:02:57.170 --> 00:02:59.970
get you most of the way there, and then-
&gt;&gt; Speaker 2: I use that but

44
00:02:59.970 --> 00:03:03.170
I still had to write and
add function myself.

45
00:03:03.170 --> 00:03:05.490
&gt;&gt; Brian Holt: Yeah,
you still have to write it with reducer.

46
00:03:05.490 --> 00:03:07.170
But that I mean, it's pretty simple.

47
00:03:08.260 --> 00:03:10.590
That would just look like,
&gt;&gt; Speaker 2: That just looks so

48
00:03:10.590 --> 00:03:12.100
much simpler than what I did.

49
00:03:12.100 --> 00:03:12.880
&gt;&gt; Brian Holt: This does?

50
00:03:12.880 --> 00:03:13.380
&gt;&gt; Speaker 2: Yeah.

51
00:03:15.380 --> 00:03:19.692
&gt;&gt; Brian Holt: Yeah, if your gonna
write this with a reducer you'd

52
00:03:19.692 --> 00:03:22.341
say const sum= list.reduce.

53
00:03:22.341 --> 00:03:25.033
And you're gonna have some sort of
function that's going to basically add all

54
00:03:25.033 --> 00:03:25.901
those things together.

55
00:03:25.901 --> 00:03:32.368
So it's gonna take in some
sort of like running sum and

56
00:03:32.368 --> 00:03:36.850
a current person, current person.

57
00:03:36.850 --> 00:03:41.895
And then it's going to do
a reduce which is going

58
00:03:41.895 --> 00:03:47.320
to return the runningSum+current
person.age,

59
00:03:47.320 --> 00:03:50.482
and you have to start with 0.

60
00:03:50.482 --> 00:03:54.067
So that's how it'll look if you try to,
this is a quite a bit more advanced,

61
00:03:54.067 --> 00:03:57.317
so I wouldn't worry too much if this
doesn't make a ton of sense, but

62
00:03:57.317 --> 00:03:59.520
that's how you would do
it in terms of reduce.

63
00:04:01.620 --> 00:04:02.549
This will give you the sum and

64
00:04:02.549 --> 00:04:04.501
then here you'd still have to
divide by the link at the end.

65
00:04:09.112 --> 00:04:12.950
&gt;&gt; Brian Holt: But if you ask me like,
this is clever and such, right?

66
00:04:12.950 --> 00:04:16.260
But this is probably a little
bit more clear, right?

67
00:04:16.260 --> 00:04:18.301
Most people can read that pretty easily.

68
00:04:18.301 --> 00:04:21.135
Like I would have to look at that,
what the hell is this person doing?

69
00:04:21.135 --> 00:04:21.906
[LAUGH] Right?

70
00:04:21.906 --> 00:04:26.248
This is over-engineering the problem here.

71
00:04:26.248 --> 00:04:30.222
I say that as someone that absolutely
loves functional programming and

72
00:04:30.222 --> 00:04:34.204
uses reduce everywhere, so
I probably would still try and write that.

73
00:04:34.204 --> 00:04:40.780
[LAUGH] But I think this is
a little bit more clear, cool.

74
00:04:40.780 --> 00:04:42.089
Any other questions before I move on?

75
00:04:46.450 --> 00:04:47.063
&gt;&gt; Brian Holt: Cool, so

76
00:04:47.063 --> 00:04:51.990
getAllEngineers(list) that are not
going to be from Assassin's Creed.

77
00:04:54.470 --> 00:05:00.599
Const, so engineers is gonna be this.

78
00:05:02.980 --> 00:05:05.100
So, couple ways we could do this.

79
00:05:05.100 --> 00:05:07.259
Let's start with a for
loop I think, right?

80
00:05:07.259 --> 00:05:12.499
I wanna say, for let i equals zero i is

81
00:05:12.499 --> 00:05:18.086
less than list.length i++, okay.

82
00:05:18.086 --> 00:05:22.099
And then we're gonna do a check
here to say, if list i,

83
00:05:22.099 --> 00:05:24.210
let's just pull list i out.

84
00:05:24.210 --> 00:05:28.350
So const person equals list i.

85
00:05:29.950 --> 00:05:34.930
So if person.name.includes which
I showed you yesterday, right?

86
00:05:37.630 --> 00:05:43.943
Engineer, then you wanna add
them to that list, right.

87
00:05:43.943 --> 00:05:49.055
You're gonna say,
engineers.push(person.name),

88
00:05:49.055 --> 00:05:53.663
and this is gonna give you
a list of all the engineers.

89
00:05:57.868 --> 00:06:00.483
&gt;&gt; Speaker 2: Should be whether
their job title as engineer.

90
00:06:00.483 --> 00:06:02.918
&gt;&gt; Brian Holt: Yep, thank you.

91
00:06:02.918 --> 00:06:08.550
Job title, I mean,
maybe some of them are named engineer.

92
00:06:08.550 --> 00:06:14.035
I don't discriminate, but
that's true, thank you, cool.

93
00:06:14.035 --> 00:06:17.658
And then here you're
gonna return engineers.

94
00:06:24.425 --> 00:06:29.091
&gt;&gt; Brian Holt: Yep, good?

95
00:06:29.091 --> 00:06:29.993
&gt;&gt; Speaker 2: One little more question.

96
00:06:29.993 --> 00:06:31.236
&gt;&gt; Brian Holt: Sure, of course.

97
00:06:31.236 --> 00:06:35.534
&gt;&gt; Speaker 2: So I used the for
each for this, for a problem like this,

98
00:06:35.534 --> 00:06:39.485
is it generally better to use a for
loop or for each?

99
00:06:39.485 --> 00:06:41.090
Does that basically the same thing.

100
00:06:41.090 --> 00:06:43.850
&gt;&gt; Brian Holt: So
I'll tell you what I think,

101
00:06:43.850 --> 00:06:47.800
but what's actually more
important is what you think.

102
00:06:47.800 --> 00:06:51.450
What you think is more clear, like what
you think you're gonna come to later and

103
00:06:51.450 --> 00:06:55.390
it's gonna take you a shorter amount of
time and less cognitive to understand.

104
00:06:55.390 --> 00:06:57.960
And that's the correct
answer to that question.

105
00:06:59.910 --> 00:07:05.600
How I would do this in terms of filter and
then map.

106
00:07:05.600 --> 00:07:13.110
So, I think in general this probably would
be, I would choose either filter and map.

107
00:07:13.110 --> 00:07:15.510
Which I'll show you how to do here or
I would choose a for loop.

108
00:07:17.600 --> 00:07:25.511
Const engineers is gonna be,
&gt;&gt; Brian Holt: Equals list.filters,

109
00:07:25.511 --> 00:07:29.542
so the first thing I'm gonna do here is
I'm gonna filter out everyone that doesn't

110
00:07:29.542 --> 00:07:31.680
have engineer in their title.

111
00:07:31.680 --> 00:07:35.115
So this is gonna be a person, and

112
00:07:35.115 --> 00:07:40.348
here I'm going to return
if person.jobtitle.

113
00:07:40.348 --> 00:07:43.478
Dot includes engineer, so

114
00:07:43.478 --> 00:07:49.340
if you remember I did show
you a filter yesterday.

115
00:07:49.340 --> 00:07:53.845
What filter does is if you return true in
this function, it'll keep that item in

116
00:07:53.845 --> 00:07:58.031
the list, right, cuz this function
right here is going to be run, oops.

117
00:07:58.031 --> 00:08:02.830
On literally every item in this list,
right, just like map, just like for each,

118
00:08:02.830 --> 00:08:03.910
right?

119
00:08:03.910 --> 00:08:06.610
And if it returns true,
it'll keep that item in the list.

120
00:08:06.610 --> 00:08:09.720
If it returns false,
it's gonna kick it out of the list, right?

121
00:08:09.720 --> 00:08:11.940
So now I'm gonna have a list of people,
right?

122
00:08:11.940 --> 00:08:14.488
People objects, so
I'm still not quite there, right?

123
00:08:14.488 --> 00:08:16.318
But I'm gonna have a bunch
of people objects and

124
00:08:16.318 --> 00:08:18.860
all of them are gonna have engineer and
their title.

125
00:08:18.860 --> 00:08:20.000
So what do I have to do after that,

126
00:08:20.000 --> 00:08:22.970
I just have to map over these and
just return the names.

127
00:08:22.970 --> 00:08:25.855
So I'm gonna say,
let's put this on a new line.

128
00:08:30.920 --> 00:08:35.494
&gt;&gt; Brian Holt: Then next thing
here I would say dot map, person.

129
00:08:35.494 --> 00:08:39.450
And then I would return person.name,
just like I had done up above.

130
00:08:39.450 --> 00:08:44.201
In fact, I could even use that function
If you really wanted to, we can.

131
00:08:46.899 --> 00:08:52.870
&gt;&gt; Speaker 3: Person there is
just a place holder or is it.

132
00:08:54.240 --> 00:08:57.379
Before you had what, list.i, and

133
00:08:57.379 --> 00:09:02.953
you called that person is not,
&gt;&gt; Speaker 3: You're

134
00:09:02.953 --> 00:09:06.000
not using that constant below, are you?

135
00:09:06.000 --> 00:09:10.080
&gt;&gt; Brian Holt: No, so this is
scoped to this for loop right here.

136
00:09:12.150 --> 00:09:15.900
So I am, no,
I'm overriding engineers here, right?

137
00:09:15.900 --> 00:09:23.220
So that's not kosher, but yeah,
this this would accomplish the same thing.

138
00:09:23.220 --> 00:09:28.870
In fact, you could make this even
more succinct by doing name here and

139
00:09:28.870 --> 00:09:31.370
just doing name and
then you can also do here.

140
00:09:34.650 --> 00:09:38.816
Job title, get rid of this,

141
00:09:38.816 --> 00:09:47.042
I could say job title.includes,
&gt;&gt; Brian Holt: Engineer.

142
00:09:51.448 --> 00:09:53.420
&gt;&gt; Brian Holt: So
that does literally the same thing.

143
00:09:57.220 --> 00:10:02.580
So, as you learn more and more of these,
right, I do absolutely do not expect you

144
00:10:02.580 --> 00:10:07.480
to understand right now how this works or
to have arrived at a solution like that.

145
00:10:07.480 --> 00:10:11.460
But I also want you to be aware of like
these things that are out there, right?

146
00:10:11.460 --> 00:10:17.526
What's more important to me is that you
can arrive at this solution, right?

147
00:10:17.526 --> 00:10:21.250
But you're gonna see things like this,
which is why I hope to expose you to that.

148
00:10:21.250 --> 00:10:22.424
To me, seeing stuff like that,

149
00:10:22.424 --> 00:10:24.560
that's really cool I wanna
learn how that works, right.

150
00:10:25.630 --> 00:10:27.860
So it kind of like picks your interest
to kind of go down that path.

