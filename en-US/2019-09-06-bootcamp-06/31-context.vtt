WEBVTT

1
00:00:00.040 --> 00:00:00.990
&gt;&gt; Brian Holt: Context.

2
00:00:02.000 --> 00:00:04.066
Don't want to dwell too much on this.

3
00:00:04.066 --> 00:00:08.895
Again, Frontend Masters has some really
great courses on some of the deeper

4
00:00:08.895 --> 00:00:13.970
JavaScript fundamentals, which I would
suggest taking after you watch this.

5
00:00:13.970 --> 00:00:16.471
Particularly anything from Kyle Simpson.

6
00:00:19.511 --> 00:00:23.720
&gt;&gt; Brian Holt: But
let's say that I had some object.

7
00:00:23.720 --> 00:00:27.590
And it'd be really nice
rather than having to

8
00:00:27.590 --> 00:00:30.480
individually have to rewrite
addresses over and over again.

9
00:00:30.480 --> 00:00:34.763
This happened to me when I was doing like
working on an e-commerce site at Reddit.

10
00:00:34.763 --> 00:00:38.010
I didn't want to have to write someone's
address every damn time that I needed to.

11
00:00:38.010 --> 00:00:42.489
So I wrote functions that given an object
would generate an address, right?

12
00:00:42.489 --> 00:00:46.870
So I have this thing here
that lives on 500 Fakestreet.

13
00:00:46.870 --> 00:00:48.517
I'm not dumb enough to
put my address up here.

14
00:00:48.517 --> 00:00:53.540
[LAUGH] And then I have a function
here called getAddress, right?

15
00:00:53.540 --> 00:00:56.771
And so
now if I call console.log.getAddress.

16
00:00:56.771 --> 00:01:02.477
You'll see here that it actually prints
a convincing looking American address,

17
00:01:02.477 --> 00:01:03.060
right?

18
00:01:04.670 --> 00:01:10.477
So this is a very finicky beast,
it's a source of many bugs.

19
00:01:10.477 --> 00:01:15.435
And I will say that even many mid and
senior-level developers

20
00:01:15.435 --> 00:01:20.405
don't fully grasp what this is
doing at any particular time.

21
00:01:20.405 --> 00:01:25.229
So in this case,
[LAUGH] it's contextual, right?

22
00:01:25.229 --> 00:01:29.482
That's kind of the point,
I think this belies that fact, right?

23
00:01:29.482 --> 00:01:32.280
But if I say this.name.first, right?

24
00:01:32.280 --> 00:01:35.742
It's referring to the object
that it's currently in, right?

25
00:01:35.742 --> 00:01:39.620
So if I say this.name,
it's referring to name, right?

26
00:01:39.620 --> 00:01:43.680
So you can think of this
in this particular case,

27
00:01:43.680 --> 00:01:47.010
this is a tongue twister, as me, right?

28
00:01:48.270 --> 00:01:50.370
So this is referring to
whatever object it's on.

29
00:01:52.040 --> 00:01:55.930
And that's kind of the gist of
behind what this is supposed to be.

30
00:01:55.930 --> 00:02:00.090
So in this case,
it's very clear that this refers to me.

31
00:02:00.090 --> 00:02:02.530
That's pretty obvious, right?

32
00:02:02.530 --> 00:02:04.840
But it can get so much more complicated.

33
00:02:05.960 --> 00:02:09.365
And sometimes, it becomes very
unclear of what this can be.

34
00:02:11.093 --> 00:02:14.474
&gt;&gt; Brian Holt: So for example,
if I put a function here,

35
00:02:19.283 --> 00:02:21.772
&gt;&gt; Brian Holt: console.log(this),

36
00:02:21.772 --> 00:02:25.734
what do you think that
this is going to be?

37
00:02:25.734 --> 00:02:26.947
&gt;&gt; Speaker 2: Name?

38
00:02:26.947 --> 00:02:30.245
&gt;&gt; Brian Holt: It's gonna
be the name object, so

39
00:02:30.245 --> 00:02:35.151
let's just me., I'll just put it above it.

40
00:02:35.151 --> 00:02:42.417
console.log.me.name.logMeOut.

41
00:02:44.822 --> 00:02:45.975
&gt;&gt; Brian Holt: So there you go.

42
00:02:45.975 --> 00:02:49.225
It's actually going to end up being name.

43
00:02:49.225 --> 00:02:51.661
So it's a little,
perhaps counter-intuitive or

44
00:02:51.661 --> 00:02:53.880
maybe it's intuitive to you, yeah?

45
00:02:53.880 --> 00:02:56.269
&gt;&gt; Speaker 3: Sorry,
if you just answered this but

46
00:02:56.269 --> 00:03:00.005
why is it this instead of
putting just me.name.first?

47
00:03:00.005 --> 00:03:02.705
&gt;&gt; Brian Holt: Because they're not always
going to have access to me in that

48
00:03:02.705 --> 00:03:04.245
particular scope, right?

49
00:03:04.245 --> 00:03:07.004
&gt;&gt; Speaker 3: Okay, so this just
references the object that it would be

50
00:03:07.004 --> 00:03:08.730
talking to in a more generic sense?

51
00:03:08.730 --> 00:03:10.679
&gt;&gt; Brian Holt: Yeah,
I think that's a good way of putting it.

52
00:03:10.679 --> 00:03:15.365
&gt;&gt; Speaker 4: And do you need to create
the function inside the object to use it?

53
00:03:16.550 --> 00:03:19.308
Or can it be created outside?

54
00:03:19.308 --> 00:03:22.984
&gt;&gt; Brian Holt: It's possible
to create it outside of it.

55
00:03:22.984 --> 00:03:25.326
Let's not talk about that, but

56
00:03:25.326 --> 00:03:30.220
in general it'll be created inside
of the objects, yeah, yeah.

57
00:03:30.220 --> 00:03:33.260
&gt;&gt; Speaker 4: So it looks like
if you want to make an object,

58
00:03:33.260 --> 00:03:37.660
you write it out like this, and
I can make const me or const Brian,

59
00:03:37.660 --> 00:03:40.713
const Emma, whatever and
write all of this.

60
00:03:40.713 --> 00:03:44.500
If I know that I'm gonna need
a whole bunch of user profiles, or

61
00:03:44.500 --> 00:03:49.357
a whole bunch of people objects, do you
not have to start with a generic, a person

62
00:03:49.357 --> 00:03:53.949
has a first name and last name and this
method [SOUND] and then make instances?

63
00:03:53.949 --> 00:03:56.661
Can you just make up a bunch of
instances without the first part?

64
00:03:56.661 --> 00:03:59.562
&gt;&gt; Brian Holt: Right, so
in other programming languages,

65
00:03:59.562 --> 00:04:04.002
you have to be a little bit more
disciplined about how you declare it.

66
00:04:04.002 --> 00:04:07.134
And you have to declare, this is gonna
take in strings and give back numbers, and

67
00:04:07.134 --> 00:04:07.932
that kind of thing.

68
00:04:07.932 --> 00:04:10.012
JavaScript doesn't even let you do that.

69
00:04:10.012 --> 00:04:10.793
&gt;&gt; Speaker 4: Wow.
&gt;&gt; Brian Holt: Yeah,

70
00:04:10.793 --> 00:04:15.063
it's purely dynamic in nature,
which is great because there's a lot of

71
00:04:15.063 --> 00:04:18.703
circumstance and
rituals that you don't have to do, right?

72
00:04:18.703 --> 00:04:22.219
Like writing header files in C++ and
that kind of stuff, right?

73
00:04:22.219 --> 00:04:25.108
If I never have to write another
one of those again, I'll be happy.

74
00:04:25.108 --> 00:04:28.530
[LAUGH] But at the same time that
kind of thought process helps, right,

75
00:04:28.530 --> 00:04:32.185
because you can kind of see how your
program's flowing, what it expects,

76
00:04:32.185 --> 00:04:35.339
kind of the contracts between
different parts of your program.

77
00:04:35.339 --> 00:04:37.242
So it is a trade off.

78
00:04:37.242 --> 00:04:38.884
You end up with more bugs, I would say.

79
00:04:38.884 --> 00:04:43.366
&gt;&gt; Speaker 4: If I need 500 people,
I'm gonna write that stuff out 500 times.

80
00:04:43.366 --> 00:04:45.850
&gt;&gt; Brian Holt: Or you could write
a function that generates people.

81
00:04:46.990 --> 00:04:47.490
&gt;&gt; Speaker 4: Right.

82
00:04:48.920 --> 00:04:51.081
&gt;&gt; Brian Holt: Yeah.
&gt;&gt; Speaker 5: And so by declaring it,

83
00:04:51.081 --> 00:04:55.784
const me, you wouldn't be able
to make all the changes that

84
00:04:55.784 --> 00:04:59.469
you're making to this
in a normal situation.

85
00:04:59.469 --> 00:05:01.430
&gt;&gt; Brian Holt: You guys are asking
all the good questions today.

86
00:05:01.430 --> 00:05:06.540
So, what trips people up about const,
I would say,

87
00:05:06.540 --> 00:05:11.419
is probably const's
biggest strike against it,

88
00:05:11.419 --> 00:05:18.871
is I can still say me.name=or.first,
we'll put Niki in there, right?

89
00:05:21.103 --> 00:05:24.530
&gt;&gt; Brian Holt: So it's not frozen.

90
00:05:24.530 --> 00:05:32.570
This object is not frozen, however,
I cannot say, me = something else, right?

91
00:05:32.570 --> 00:05:33.980
This is reassigning me.

92
00:05:33.980 --> 00:05:36.340
And so
that right there is gonna say type error.

93
00:05:36.340 --> 00:05:37.990
You tried to reassign me.

94
00:05:37.990 --> 00:05:41.830
However, I can totally change
things inside of the object.

95
00:05:43.430 --> 00:05:47.962
So now, if I say console, actually,
I just do this again, right?

96
00:05:50.479 --> 00:05:53.169
&gt;&gt; Brian Holt: You'll see down
here that now it's Niki Holt.

97
00:05:58.258 --> 00:06:00.610
&gt;&gt; Brian Holt: So
that's confusing for a lot of people.

98
00:06:00.610 --> 00:06:03.066
It's just something you
have to get used to.

99
00:06:03.066 --> 00:06:07.386
It basically means that you can't
reassign it at the top level, right, but

100
00:06:07.386 --> 00:06:10.570
you can meddle around with
the things inside of it.

101
00:06:10.570 --> 00:06:16.464
So yes, that's what this is.

102
00:06:16.464 --> 00:06:20.493
If you see it, that's what it means.

103
00:06:20.493 --> 00:06:23.335
It's basically referring to
the object around it, but sometimes,

104
00:06:23.335 --> 00:06:26.618
you can get kind of messed up and this can
be called in strange circumstances then

105
00:06:26.618 --> 00:06:28.210
you don't know what this is gonna be.

106
00:06:28.210 --> 00:06:32.363
So another good example of that,
if I said console.log,

107
00:06:32.363 --> 00:06:35.942
this right here,
what do you expect it to log out?

108
00:06:39.881 --> 00:06:42.670
&gt;&gt; Brian Holt: I mean,
the answer is it's nonsensical, right?

109
00:06:42.670 --> 00:06:43.890
So it doesn't really matter.

110
00:06:43.890 --> 00:06:46.770
Okay, let's delete that.

111
00:06:46.770 --> 00:06:48.079
I think it should be Window, but

112
00:06:48.079 --> 00:06:51.487
I don't actually know what this library is
gonna do with it so I don't really know.

113
00:06:51.487 --> 00:06:56.179
[LAUGH] I don't know what
context this is being called in.

114
00:06:56.179 --> 00:06:58.519
And I think I just crashed it.

115
00:06:58.519 --> 00:07:00.587
&gt;&gt; Speaker 3: Okay.

116
00:07:00.587 --> 00:07:02.420
&gt;&gt; Brian Holt: So it doesn't really
even know what to do about that.

117
00:07:04.320 --> 00:07:08.490
Yeah, but often you can't
predict what this is gonna be.

118
00:07:08.490 --> 00:07:11.320
So if I come back in here and trash that.

119
00:07:11.320 --> 00:07:13.700
Now, if I put this here,
what would you expect it to be?

120
00:07:14.930 --> 00:07:17.540
That's tough too but
it's gonna be the window.

121
00:07:17.540 --> 00:07:21.676
Window is like the whole page, right?

122
00:07:21.676 --> 00:07:27.603
So if I said this.,
&gt;&gt; Brian Holt: Date,

123
00:07:27.603 --> 00:07:32.569
which is one of the functions that's
built onto the window, right?

124
00:07:32.569 --> 00:07:36.464
So it can be pretty tough to predict.

125
00:07:36.464 --> 00:07:41.156
And sometimes,
you can even call a function like this

126
00:07:41.156 --> 00:07:45.170
one that we have in here,
wherever this is.

127
00:07:45.170 --> 00:07:46.770
This one right here.

128
00:07:46.770 --> 00:07:50.330
And if I don't call getAddress
the correct way, I can break it and

129
00:07:50.330 --> 00:07:52.540
this will become something else.

130
00:07:52.540 --> 00:07:56.780
So I'm trying to underline the fact
that this can be very complicated.

131
00:07:56.780 --> 00:07:59.762
And so
whenever you're using this somewhere,

132
00:07:59.762 --> 00:08:02.976
just know that you're
stepping into a minefield.

133
00:08:02.976 --> 00:08:06.424
&gt;&gt; Speaker 4: I was going to ask, do you
ever use this to figure out, I guess,

134
00:08:06.424 --> 00:08:11.010
where you are, or what the scope is at
any given time, or is that dangerous?

135
00:08:11.010 --> 00:08:11.763
&gt;&gt; Brian Holt: No, I mean,

136
00:08:11.763 --> 00:08:15.605
if I was in debugging I wouldn't
ship that to production, right?

137
00:08:15.605 --> 00:08:17.265
But yeah, I've done that before.

138
00:08:17.265 --> 00:08:18.103
I'm not above that.

139
00:08:18.103 --> 00:08:23.456
[LAUGH] But yeah, I can show you here,

140
00:08:23.456 --> 00:08:26.403
let's see if I did.

141
00:08:26.403 --> 00:08:30.731
So, setTimeout is a function
that whatever you call it,

142
00:08:30.731 --> 00:08:33.806
it'll wait in the next key to function.

143
00:08:33.806 --> 00:08:38.919
And then, if I call this.me.getAddress and

144
00:08:38.919 --> 00:08:44.294
I did wait 1000 milliseconds
which will wait

145
00:08:44.294 --> 00:08:50.715
one second,
&gt;&gt; Brian Holt: It's

146
00:08:50.715 --> 00:08:53.690
probably not gonna try and
execute that, is it?

147
00:08:53.690 --> 00:08:55.260
Well, it wouldn't know
how to deal with that but

148
00:08:56.770 --> 00:08:58.310
we'll just put this in my console here.

149
00:08:58.310 --> 00:09:00.766
So now I have me over here.

150
00:09:02.576 --> 00:09:04.676
&gt;&gt; Brian Holt: Okay, trash that.

151
00:09:04.676 --> 00:09:06.399
And then I'll put this in my console.

152
00:09:15.004 --> 00:09:19.255
&gt;&gt; Brian Holt: And actually,
it is working but nothing is happening,

153
00:09:19.255 --> 00:09:22.699
right, because all of these are undefined.

154
00:09:24.758 --> 00:09:26.300
&gt;&gt; Brian Holt: Or it's just erroring out.

155
00:09:27.870 --> 00:09:32.450
In any case, it's not gonna work because
whenever you do a set time out like this,

156
00:09:32.450 --> 00:09:34.040
it changes the context.

157
00:09:35.600 --> 00:09:38.909
Which you can fix but
I'm not gonna show you.

158
00:09:38.909 --> 00:09:43.800
[LAUGH] Suffice to say it's a minefield,
right?

159
00:09:46.750 --> 00:09:52.290
So, general rule of thumb is that this is
going to refer to whatever object it's on,

160
00:09:52.290 --> 00:09:54.643
and that you should worry about it.

161
00:09:54.643 --> 00:09:59.610
That's kind of my sum of my story here,
Laynee?

162
00:09:59.610 --> 00:10:02.955
&gt;&gt; Speaker 3: What would be
recommended if you had to delete

163
00:10:02.955 --> 00:10:06.923
declared variables using let and
const statements?

164
00:10:06.923 --> 00:10:11.810
Are there any delete
keywords in JavaScript?

165
00:10:11.810 --> 00:10:14.362
&gt;&gt; Brian Holt: Yeah, just delete.

166
00:10:14.362 --> 00:10:17.064
[LAUGH] So here.

167
00:10:17.064 --> 00:10:19.495
I never do this.

168
00:10:19.495 --> 00:10:24.270
I can't really fathom times that I've
had to do this, but it is possible.

169
00:10:24.270 --> 00:10:26.860
So let's say that for whatever reason
I wanted to delete the name or

170
00:10:26.860 --> 00:10:27.450
something like that.

171
00:10:27.450 --> 00:10:31.513
You can say delete me.name.

172
00:10:31.513 --> 00:10:33.197
And then, whenever I call,

173
00:10:33.197 --> 00:10:36.924
obviously this.name underneath
here is gonna be undefined.

174
00:10:36.924 --> 00:10:41.452
So you can't access properties
on things that are undefined.

175
00:10:43.841 --> 00:10:47.381
&gt;&gt; Brian Holt: But this does work,
you never have to do it.

176
00:10:51.460 --> 00:10:54.302
&gt;&gt; Brian Holt: This is actually
something good to talk about, though.

177
00:10:54.302 --> 00:10:59.098
So I have an object here,
console.log(me), right?

178
00:11:01.306 --> 00:11:05.323
&gt;&gt; Brian Holt: And then, if I have
me.name, but maybe I was thinking, a name.

179
00:11:05.323 --> 00:11:06.828
It should have a middle name, right?

180
00:11:06.828 --> 00:11:09.919
And I put .middle, okay?

181
00:11:09.919 --> 00:11:10.429
And then,

182
00:11:10.429 --> 00:11:15.855
maybe I wanted that in uppercase,
&gt;&gt; Brian Holt: Right,

183
00:11:15.855 --> 00:11:20.206
the first thing it's gonna say here is,
you can't access something on

184
00:11:20.206 --> 00:11:24.059
something that's undefined,
right, middle is not a thing.

185
00:11:24.059 --> 00:11:27.594
So that's when I get me.name.middle
is undefined, right?

186
00:11:27.594 --> 00:11:30.432
So whenever you see something like that,
an error like that,

187
00:11:30.432 --> 00:11:34.980
probably means that you're trying to
access something that doesn't exist.

188
00:11:34.980 --> 00:11:39.337
Or another one here is maybe I was
assuming that middle was a function and so

189
00:11:39.337 --> 00:11:44.130
I put those parenthesis there, and it's
gonna say undefined is not a function.

190
00:11:45.980 --> 00:11:48.110
So that's another one that
you'll frequently see.

191
00:11:48.110 --> 00:11:49.823
It's a common mistake to make.

192
00:11:53.368 --> 00:11:54.106
&gt;&gt; Brian Holt: That's why.

193
00:11:54.106 --> 00:11:58.163
You can't invoke something
that's not a function.

