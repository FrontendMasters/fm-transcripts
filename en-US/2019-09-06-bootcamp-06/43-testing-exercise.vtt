WEBVTT

1
00:00:00.519 --> 00:00:02.093
&gt;&gt; Brian: So
the first thing you're gonna see here,

2
00:00:03.801 --> 00:00:06.240
&gt;&gt; Brian: Just in your preview window.

3
00:00:06.240 --> 00:00:10.770
This is like an interface for
the testing suite that I'm using, so

4
00:00:10.770 --> 00:00:14.990
all the green circles you see here, those
are tests that are currently passing.

5
00:00:14.990 --> 00:00:19.570
All of the red Xs here are tests
that are currently failing.

6
00:00:21.660 --> 00:00:25.180
So you have 19 tests and
16 of them are failing.

7
00:00:25.180 --> 00:00:27.830
I wrote three of them so you can
kind of get the gist of how this is

8
00:00:27.830 --> 00:00:31.230
supposed to work, but
as you pass each one,

9
00:00:31.230 --> 00:00:35.760
these will start turning green until
all of them will be green, okay?

10
00:00:36.790 --> 00:00:40.355
Then here it's gonna tell you this
is the name of the test case,

11
00:00:40.355 --> 00:00:44.885
find largest number of test case 1, and
it says expected 0 to be 30, right?

12
00:00:44.885 --> 00:00:47.555
And those are obviously not
equal to each other, so

13
00:00:47.555 --> 00:00:50.796
you need to go make these tests so
that this ends up being 30.

14
00:00:54.045 --> 00:00:59.000
&gt;&gt; Brian: Okay, so here's the first
one that that's passing right now,

15
00:00:59.000 --> 00:01:01.761
addTwoToEveryNumberInTheList.

16
00:01:01.761 --> 00:01:02.825
It takes in the list.

17
00:01:02.825 --> 00:01:06.047
Again, when I say list,
I mean array, same thing.

18
00:01:07.711 --> 00:01:13.219
&gt;&gt; Brian: So I have a new list here,
and what it does is it goes through,

19
00:01:13.219 --> 00:01:17.440
takes a new list, and
it pushes into the list.

20
00:01:17.440 --> 00:01:19.506
Right, remember, push adds
something to the end of the array.

21
00:01:19.506 --> 00:01:24.711
List, list[i] +2, right?

22
00:01:26.030 --> 00:01:29.621
So if this was something like 1, 2,

23
00:01:29.621 --> 00:01:34.109
3, 4, then it's going to first add 2 to 1,

24
00:01:34.109 --> 00:01:38.401
and then it's gonna
push that into newList.

25
00:01:38.401 --> 00:01:44.050
Then it's gonna add it to 2, then it's
gonna add to 3, then it's gonna add to 4,

26
00:01:44.050 --> 00:01:49.161
and so on and so forth until I end up
with something that looks like 3456.

27
00:01:49.161 --> 00:01:52.849
Makes sense?

28
00:01:52.849 --> 00:01:54.104
So that one's already written for you.

29
00:01:54.104 --> 00:01:58.948
Looks good, findLargestNumber.

30
00:01:58.948 --> 00:02:01.380
So this one had three
different tests case on it.

31
00:02:01.380 --> 00:02:04.870
So once I made a pass
then those made it work.

32
00:02:04.870 --> 00:02:06.575
Now what happens if I put three here?.

33
00:02:09.387 --> 00:02:14.317
&gt;&gt; Brian: Notice now that one of the tests
pass, but two of the other ones fail,

34
00:02:14.317 --> 00:02:15.530
right?

35
00:02:15.530 --> 00:02:20.239
And I think the one that it passes on is
what happens if I pass in an empty list.

36
00:02:20.239 --> 00:02:24.676
Well, it doesn't matter what you're
adding to it, so that one still passed,

37
00:02:24.676 --> 00:02:28.599
cuz if you pass in an empty list,
then it should get an empty list back.

38
00:02:30.286 --> 00:02:31.238
&gt;&gt; Brian: Makes sense?

39
00:02:33.587 --> 00:02:35.520
&gt;&gt; Brian: So let's look at some
of the ones you have to do here.

40
00:02:35.520 --> 00:02:38.250
You have to do findLargestNumber, right?

41
00:02:38.250 --> 00:02:41.001
So you're gonna have an entire
list of numbers, and

42
00:02:41.001 --> 00:02:44.260
you're gonna have to return
the largest number in that list.

43
00:02:44.260 --> 00:02:44.995
This one,

44
00:02:44.995 --> 00:02:50.555
you're gonna have to mad a DogObject that
has a speak method that returns whoof,

45
00:02:50.555 --> 00:02:55.733
as in name of Fido has a color property
of white and has an age property of 6.

46
00:02:57.373 --> 00:02:58.020
&gt;&gt; Brian: Okay?

47
00:03:00.683 --> 00:03:01.820
&gt;&gt; Brian: Get a list of names.

48
00:03:05.128 --> 00:03:07.238
&gt;&gt; Brian: [LAUGH] I was
definitely watching Game

49
00:03:07.238 --> 00:03:11.197
of Thrones when I wrote this one [LAUGH]
&gt;&gt; Speaker 2: [LAUGH]

50
00:03:11.197 --> 00:03:13.181
&gt;&gt; Brian: So this is going to be an array

51
00:03:13.181 --> 00:03:18.225
of objects that looks something like this,
has a name, a job title, and

52
00:03:18.225 --> 00:03:23.266
an age, and what I want you to do is I
want you to pull out all of the names and

53
00:03:23.266 --> 00:03:25.281
return just a list of names.

54
00:03:25.281 --> 00:03:28.261
You can do that with any one of those.

55
00:03:28.261 --> 00:03:28.861
You could do it with a forloop.

56
00:03:28.861 --> 00:03:29.925
You could do it with a map.

57
00:03:29.925 --> 00:03:31.674
You could do it with four each.

58
00:03:31.674 --> 00:03:35.056
Any one of those would work.

59
00:03:35.056 --> 00:03:36.534
They're getting progressively
more difficult.

60
00:03:36.534 --> 00:03:40.107
Here I want you to take a list of ages and

61
00:03:40.107 --> 00:03:46.041
I want you to get the average age
based on those people's ages.

62
00:03:46.041 --> 00:03:48.149
The objects are gonna
look the same as this.

63
00:03:52.162 --> 00:03:53.123
&gt;&gt; Brian: Okay.

64
00:03:56.981 --> 00:04:05.503
&gt;&gt; Brian: Here,
[LAUGH] this is Assassin's Creed [LAUGH].

65
00:04:05.503 --> 00:04:10.248
Same thing here,
you're gonna have a list of coworker, and

66
00:04:10.248 --> 00:04:16.110
here the job title is boss person, and
I want you to return only the people,

67
00:04:16.110 --> 00:04:22.744
so it should be the same objects, the same
people that have engineer in their title.

68
00:04:31.043 --> 00:04:32.880
&gt;&gt; Brian: Here it says don't use sort.

69
00:04:32.880 --> 00:04:37.121
I revoked that, so you can use sort
if you want to, so let's save that.

70
00:04:39.460 --> 00:04:42.428
&gt;&gt; Brian: If you want to use sort,
go ahead.

71
00:04:42.428 --> 00:04:45.234
If you want to write something
like a bubble sort by hand,

72
00:04:45.234 --> 00:04:49.208
then be my guest just so you know that's
gonna be a little bit more difficult, but

73
00:04:49.208 --> 00:04:50.970
you do have all the tools right now.

74
00:04:50.970 --> 00:04:53.085
You know the tools to be
able to write bubble sort.

75
00:04:55.661 --> 00:05:00.265
&gt;&gt; Brian: Let's put, if you can use sort,

76
00:05:00.265 --> 00:05:07.009
if you want to write it by hand,
use bubble sort or

77
00:05:07.009 --> 00:05:12.360
you could use insertion sort as well.

78
00:05:12.360 --> 00:05:13.961
I'm fine with either one of those.

79
00:05:13.961 --> 00:05:17.726
Bubble sort's gonna tend to be a little
bit easier if you wanna do it by hand.

80
00:05:21.279 --> 00:05:22.655
&gt;&gt; Brian: We'll click Save up there.

81
00:05:26.361 --> 00:05:33.260
&gt;&gt; Brian: Any questions
about any of these tasks?

82
00:05:33.260 --> 00:05:35.189
What do these people objects look like?

83
00:05:37.062 --> 00:05:39.240
&gt;&gt; Brian: Okay, so
the one thing here I wanted to show you,

84
00:05:39.240 --> 00:05:42.376
which I don't think I've shown you before,
it's the one that like,

85
00:05:42.376 --> 00:05:46.000
find all the people that have
engineer in their title, right?

86
00:05:46.000 --> 00:05:48.090
So notice that it's just part of the word.

87
00:05:48.090 --> 00:05:51.710
It's not necessarily that job title,
triple equals engineer.

88
00:05:51.710 --> 00:05:53.170
It's just part of that title, so

89
00:05:53.170 --> 00:05:56.990
I wanna show you really
quick how you might do that.

90
00:05:56.990 --> 00:06:01.858
There's a function on strings,
so if I say const

91
00:06:01.858 --> 00:06:06.340
x = "My name is Brian, and

92
00:06:06.340 --> 00:06:11.601
I think this is long enough now", okay.

93
00:06:11.601 --> 00:06:16.540
So x represents a string right now, right?

94
00:06:17.610 --> 00:06:23.908
Strings have something called includes,
so if I put includes Brian like that,

95
00:06:23.908 --> 00:06:29.656
it returns true because Brian is
literally contained in there, right?

96
00:06:29.656 --> 00:06:34.312
And if I put something,
&gt;&gt; Brian: Someting else in

97
00:06:34.312 --> 00:06:38.780
there it's gonna be false because include
it's not included somewhere in there, so

98
00:06:38.780 --> 00:06:41.275
that's a good one for
you to know and use there.

99
00:06:41.275 --> 00:06:46.148
Okay, last thing here I wanna show
you a little bit about how to

100
00:06:46.148 --> 00:06:48.980
interact with the unit tests here.

101
00:06:48.980 --> 00:06:50.925
So these are called unit tests.

102
00:06:50.925 --> 00:06:52.786
You're testing little units of your code.

103
00:06:55.523 --> 00:06:59.761
&gt;&gt; Brian: Don't modify the code below or
else you're not really gonna be tested,

104
00:06:59.761 --> 00:07:04.640
but there is something that I can show you
that helps us make this little bit easier.

105
00:07:06.080 --> 00:07:10.070
If I put x describe that here,
that means if you look here, and

106
00:07:10.070 --> 00:07:11.260
notice these are grayed out now.

107
00:07:11.260 --> 00:07:13.740
It means that it is no longer
running these tests, so

108
00:07:13.740 --> 00:07:18.338
if you put x in front of anything, x in
front of describe or x in front of it.

109
00:07:18.338 --> 00:07:21.425
Notice here, now it's not
running the first test, right.

110
00:07:21.425 --> 00:07:24.453
Subtle habits skip tests.

111
00:07:24.453 --> 00:07:28.439
This can be useful because, if you're
running a bunch of tests or you're writing

112
00:07:28.439 --> 00:07:31.980
loops or something like that,
you don't want it to run the other tests.

113
00:07:31.980 --> 00:07:34.584
You wanna just focus on one test or
skip other tests.

114
00:07:34.584 --> 00:07:36.979
That's how you do it.

115
00:07:36.979 --> 00:07:40.943
By the same token you can put f in front
of these it will only run that test.

116
00:07:40.943 --> 00:07:43.710
It will focus on that test right?

117
00:07:43.710 --> 00:07:46.926
So now it is only running
this one test right now.

118
00:07:46.926 --> 00:07:49.590
Same thing in front of describe,
you can put f in front of describe.

119
00:07:49.590 --> 00:07:52.920
It'll only run that suite of tests
&gt;&gt; Speaker 3: iI

120
00:07:52.920 --> 00:07:55.030
that because you are using
Jasmine that it does that?

121
00:07:55.030 --> 00:07:57.098
&gt;&gt; Brian: It is something
specific to Jasmine.

122
00:07:59.665 --> 00:08:02.987
&gt;&gt; Brian: Yeah, it's just useful for
when you have to write tests.

123
00:08:06.256 --> 00:08:08.838
&gt;&gt; Speaker 4: Is that just strictly for
JavaScript, or is it for

124
00:08:08.838 --> 00:08:11.890
multiple languages, or IDs or anything?

125
00:08:11.890 --> 00:08:15.650
&gt;&gt; Brian: It's a JavaScript
testing framework, yeah.

126
00:08:17.130 --> 00:08:19.930
You can invoke other languages for
you, but in general,

127
00:08:19.930 --> 00:08:22.219
it's pretty much just meant for
JavaScript.

128
00:08:25.773 --> 00:08:29.528
&gt;&gt; Brian: And here you don't have to worry
about anything other than what I just

129
00:08:29.528 --> 00:08:30.248
showed you.

130
00:08:30.248 --> 00:08:32.474
You shouldn't have to look at the docs or
anything like that.

