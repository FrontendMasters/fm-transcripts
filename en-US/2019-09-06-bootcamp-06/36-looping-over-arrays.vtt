WEBVTT

1
00:00:00.110 --> 00:00:03.209
&gt;&gt; Brian Holt: I've just shown you
just a bare minimum few of some of

2
00:00:03.209 --> 00:00:07.656
these array methods, but there are lots
and lots and lots and lots of them.

3
00:00:07.656 --> 00:00:12.190
You should definitely check out the MDN,
they're just full of them.

4
00:00:12.190 --> 00:00:18.520
So something that gets really useful in
conjunction with arrays are loops, right?

5
00:00:18.520 --> 00:00:22.688
Because what happens if we wanna do
something to every single item in

6
00:00:22.688 --> 00:00:23.427
the array?

7
00:00:23.427 --> 00:00:24.890
Or we wanna log it out individually.

8
00:00:24.890 --> 00:00:26.579
Or maybe we're trying
to add things together.

9
00:00:26.579 --> 00:00:29.708
Or for whatever reason,
you have a list of items or

10
00:00:29.708 --> 00:00:34.050
an array of items that you want
to process in some fashion.

11
00:00:34.050 --> 00:00:38.470
So there's a couple of ways of doing that.

12
00:00:38.470 --> 00:00:42.060
The most common way you're gonna
see is with a for loop, right?

13
00:00:43.840 --> 00:00:51.340
So here you see for let i = 0, and
then i is less than cities.length, right?

14
00:00:51.340 --> 00:00:56.010
Length is gonna be how long the array is.

15
00:00:56.010 --> 00:01:00.260
So for this one, this will be of length 5,
cuz there's five cities in there, right?

16
00:01:00.260 --> 00:01:02.050
And then at the end of this, we'll do i++.

17
00:01:02.050 --> 00:01:04.459
And then the console.log cities, and

18
00:01:04.459 --> 00:01:08.070
then notice that we're
using i right there, right?

19
00:01:08.070 --> 00:01:10.500
So i is gonna change on every
single iteration, right?

20
00:01:10.500 --> 00:01:15.396
So it's gonna start at 0, right,
cuz arrays start at 0, okay?

21
00:01:15.396 --> 00:01:19.560
And then the first one's gonna say,
is 0 less than 5, okay?

22
00:01:19.560 --> 00:01:23.424
So it does another iteration that goes
through and it logs each one of them out.

23
00:01:23.424 --> 00:01:29.052
As you can see here,
let's just put a console.log.

24
00:01:31.704 --> 00:01:35.819
&gt;&gt; Brian Holt: Okay, so as you see there,
it goes through and logs through it,

25
00:01:35.819 --> 00:01:37.050
everything once.

26
00:01:37.050 --> 00:01:43.248
Or maybe we want it to log toUpperCase.

27
00:01:44.876 --> 00:01:45.552
&gt;&gt; Brian Holt: Right, and

28
00:01:45.552 --> 00:01:49.670
that allows us to process everything
in the list individually.

29
00:01:49.670 --> 00:01:52.470
So that's the first method of
doing it is with a for loop.

30
00:01:53.800 --> 00:01:57.040
And again, quite often what you
will see how to process arrays.

31
00:01:57.040 --> 00:01:57.946
Any questions about that?

32
00:02:00.305 --> 00:02:01.050
&gt;&gt; Brian Holt: Yeah?

33
00:02:01.050 --> 00:02:07.570
&gt;&gt; Speaker 2: So if you took out the limit
on the counter, what would that look like?

34
00:02:07.570 --> 00:02:09.778
&gt;&gt; Brian Holt: So if I just i is less

35
00:02:09.778 --> 00:02:11.815
than-
&gt;&gt; Speaker 2: Yeah,

36
00:02:11.815 --> 00:02:13.070
you just took that out.

37
00:02:13.070 --> 00:02:14.780
Would that be an infinite loop?

38
00:02:14.780 --> 00:02:17.020
&gt;&gt; Brian Holt: That would
be an infinite loop, yeah.

39
00:02:17.020 --> 00:02:20.870
Cuz this has to have some sort
of terminating condition, right?

40
00:02:20.870 --> 00:02:24.569
&gt;&gt; Speaker 2: Yeah, even though
it runs out of items on the list?

41
00:02:24.569 --> 00:02:30.155
&gt;&gt; Brian Holt: Yeah, eventually, I really,
&gt;&gt; Brian Holt: All right,

42
00:02:30.155 --> 00:02:31.906
you're gonna make me
crash my browser again.

43
00:02:31.906 --> 00:02:33.775
It's fine, I'm not upset.

44
00:02:33.775 --> 00:02:36.295
&gt;&gt; [LAUGH]
&gt;&gt; Brian Holt: So if you wanted to get

45
00:02:36.295 --> 00:02:41.123
a little bit more subtle kind
of log you could have here,

46
00:02:41.123 --> 00:02:47.737
you could have cities.push,
&gt;&gt; Brian Holt: thing,

47
00:02:47.737 --> 00:02:49.420
and now I've broken it.

48
00:02:49.420 --> 00:02:50.526
So why did I break this?

49
00:02:52.449 --> 00:02:57.018
&gt;&gt; Speaker 3: Cuz you're
making it longer without end.

50
00:02:57.018 --> 00:03:00.088
&gt;&gt; Brian Holt: Right, exactly,
and so Firefox is like,

51
00:03:00.088 --> 00:03:02.232
you did something bad there.

52
00:03:02.232 --> 00:03:03.484
&gt;&gt; [LAUGH]
&gt;&gt; Brian Holt: Stop it.

53
00:03:03.484 --> 00:03:05.766
&gt;&gt; [LAUGH]
&gt;&gt; Brian Holt: Right?

54
00:03:07.595 --> 00:03:09.600
&gt;&gt; Brian Holt: That's right broken, okay.

55
00:03:10.890 --> 00:03:17.110
So to explain exactly what happened there,
it's looping over the array and

56
00:03:17.110 --> 00:03:23.230
it's asking, it's like, is cities.length,
is i getting larger than cities.length?

57
00:03:23.230 --> 00:03:25.053
But cities is always getting longer,
right?

58
00:03:25.053 --> 00:03:28.060
So it's never going to end,
cuz I keep pushing things onto the array.

59
00:03:29.560 --> 00:03:30.940
So does that answer your question?.

60
00:03:30.940 --> 00:03:32.450
&gt;&gt; Speaker 2: Yeah.
&gt;&gt; Brian Holt: Cool.

61
00:03:32.450 --> 00:03:36.076
&gt;&gt; Speaker 2: What if you just
change cities.length to 10 or 8?

62
00:03:36.076 --> 00:03:38.770
So we know that it's
longer than the length.

63
00:03:38.770 --> 00:03:45.254
But then once it gets to calling the sixth
element of cities, it wouldn't just crash?

64
00:03:45.254 --> 00:03:47.184
It would still go through
an infinite loop?

65
00:03:47.184 --> 00:03:48.520
&gt;&gt; Brian Holt: Undefined.

66
00:03:48.520 --> 00:03:50.940
&gt;&gt; Speaker 2: Okay, so that's okay.

67
00:03:50.940 --> 00:03:52.268
It's just not what we want.

68
00:03:52.268 --> 00:03:54.670
&gt;&gt; Brian Holt: Right,
it's not gonna crash.

69
00:03:54.670 --> 00:03:59.650
But if I was trying to
do cities.toUpperCase,

70
00:03:59.650 --> 00:04:00.459
then we have a problem.

71
00:04:01.970 --> 00:04:04.430
Because you can't call toUpperCase
on something that's undefined.

72
00:04:05.540 --> 00:04:07.934
&gt;&gt; Speaker 2: But that's much
preferable to an infinite loop,

73
00:04:07.934 --> 00:04:09.765
cuz that tells us what the problem is.

74
00:04:09.765 --> 00:04:12.257
&gt;&gt; Brian Holt: Yep, exactly.

75
00:04:12.257 --> 00:04:16.357
&gt;&gt; Speaker 2: Why there does it
say cities[i] is undefined as

76
00:04:16.357 --> 00:04:19.762
opposed to cities[6] is undefined?

77
00:04:19.762 --> 00:04:21.719
Or I guess 5, cuz 0 through 4 worked.

78
00:04:23.590 --> 00:04:25.300
&gt;&gt; Brian Holt: Let's see
what it actually says here.

79
00:04:26.900 --> 00:04:28.780
This is not necessarily
what it's gonna say.

80
00:04:30.190 --> 00:04:31.920
It actually catches that.

81
00:04:31.920 --> 00:04:34.080
So I don't think that's what
the browser's actually gonna say.

82
00:04:34.080 --> 00:04:39.048
I think the browser will say that,
&gt;&gt; Brian Holt: It might say cities[i],

83
00:04:39.048 --> 00:04:43.660
because that's actually, it's printing
back to the code that's incorrect.

84
00:04:43.660 --> 00:04:46.627
So rather than saying cities-
&gt;&gt; Speaker 2: [INAUDIBLE] crashed.

85
00:04:46.627 --> 00:04:50.877
&gt;&gt; Brian Holt: It's not going to do any
sort of interpolation to tell you that

86
00:04:50.877 --> 00:04:52.686
this crashed in index 6.

87
00:04:52.686 --> 00:04:55.154
It's gonna say this bit of code crashed,
right?

88
00:04:55.154 --> 00:04:57.470
So it's actually just printing out
literally the code that crashed.

89
00:04:59.060 --> 00:05:02.620
But that's gonna depend on if it's Chrome,
or Firefox, or

90
00:05:02.620 --> 00:05:04.710
Safari, how they actually
end up handling that.

