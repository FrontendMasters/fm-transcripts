WEBVTT

1
00:00:00.240 --> 00:00:01.440
&gt;&gt; Brian Holt: So, sort.

2
00:00:02.510 --> 00:00:05.090
I was initially gonna tell
you to do bubble sort, and

3
00:00:05.090 --> 00:00:08.620
I think some of you probably end up
trying, which is cool, I applaud that.

4
00:00:10.460 --> 00:00:15.010
So I'll show you first how
to do normal sort, and

5
00:00:15.010 --> 00:00:17.070
then we'll go back and do bubble sort.

6
00:00:18.440 --> 00:00:20.130
So we listen ascending order.

7
00:00:22.800 --> 00:00:29.149
So the easiest way to do this would be,
const, new list of some sort or

8
00:00:29.149 --> 00:00:34.733
sort of list, let's go sorted lists,
sorted list equals,

9
00:00:34.733 --> 00:00:41.010
list.sor, and here,
where it's gonna take in num1 and num2.

10
00:00:41.010 --> 00:00:45.090
You can call it a and b,
x and y, red and blue,

11
00:00:45.090 --> 00:00:48.876
I don't know, doesn't really matter.

12
00:00:48.876 --> 00:00:54.865
Think I showed you this yesterday,

13
00:00:54.865 --> 00:01:00.255
if num1 ua greater than num2,

14
00:01:00.255 --> 00:01:07.442
return 1, else if num1 less than num2,

15
00:01:07.442 --> 00:01:12.249
return negative 1, else.

16
00:01:12.249 --> 00:01:19.220
So you can put an else return 0 here, or I
mean, this doesn't really matter too much.

17
00:01:20.640 --> 00:01:23.350
Otherwise, you can just
put return 0 here because,

18
00:01:23.350 --> 00:01:25.870
you don't really need an in
house clause there, right?

19
00:01:25.870 --> 00:01:27.670
Because if it doesn't do this one, and

20
00:01:27.670 --> 00:01:30.080
it doesn't do this one,
then it's definitely gonna do that one.

21
00:01:31.710 --> 00:01:35.210
So sometimes, some people's like lentils,
which are code style,

22
00:01:35.210 --> 00:01:38.080
checkers will be picky about that.

23
00:01:38.080 --> 00:01:38.750
I don't care.

24
00:01:38.750 --> 00:01:40.520
It's function does exactly the same thing.

25
00:01:40.520 --> 00:01:41.890
So, yeah.

26
00:01:41.890 --> 00:01:44.970
&gt;&gt; Speaker 2: Is there any difference
between this, where you wrote here,

27
00:01:44.970 --> 00:01:49.400
and writing it as just
subtracting num2 from num1?

28
00:01:49.400 --> 00:01:51.070
&gt;&gt; Brian Holt: Yeah,
I'll show that in just a second.

29
00:01:52.380 --> 00:01:52.880
Yeah.

30
00:01:54.032 --> 00:01:55.766
&gt;&gt; Brian Holt: But
that's a really cool clever trick,

31
00:01:55.766 --> 00:01:57.761
which is why I'm sure
they did it that way too.

32
00:02:00.009 --> 00:02:02.250
&gt;&gt; Brian Holt: SortedList.

33
00:02:05.470 --> 00:02:08.890
Okay, so
that this works as is right here, right.

34
00:02:08.890 --> 00:02:10.890
Does this make sense to everyone?

35
00:02:10.890 --> 00:02:13.520
Right.
If num1 is bigger, then return one.

36
00:02:13.520 --> 00:02:17.350
Right.
If num2 is bigger, then return negative 1.

37
00:02:17.350 --> 00:02:19.238
Otherwise, if they're equal,
then you return 0.

38
00:02:25.881 --> 00:02:28.966
&gt;&gt; Brian Holt: So, Emma,
here, showed me yesterday,

39
00:02:28.966 --> 00:02:31.441
which I thought was really cool.

40
00:02:31.441 --> 00:02:32.770
We'll cover that out.

41
00:02:36.052 --> 00:02:39.415
&gt;&gt; Brian Holt: I'll just
grab this line right there.

42
00:02:39.415 --> 00:02:44.469
Sorted list equals that.

43
00:02:47.586 --> 00:02:53.508
&gt;&gt; Brian Holt: She showed me that
you can do return num2 minus num1,

44
00:02:53.508 --> 00:02:56.609
and this works just as well.

45
00:02:56.609 --> 00:02:58.369
&gt;&gt; Speaker 2: And
it does do exactly the same thing.

46
00:03:01.569 --> 00:03:02.240
&gt;&gt; Speaker 2: Maybe not.

47
00:03:02.240 --> 00:03:03.100
&gt;&gt; Brian Holt: Maybe not.

48
00:03:03.100 --> 00:03:04.493
Let's see what did we end up with?

49
00:03:22.024 --> 00:03:24.125
&gt;&gt; Brian Holt: Okay,
I had to do a num1 minus num2.

50
00:03:24.125 --> 00:03:27.895
In any case, why is this?

51
00:03:27.895 --> 00:03:29.385
Okay, I guess that does make sense.

52
00:03:31.290 --> 00:03:36.580
Well, let's say this is five and
this is one, right.

53
00:03:36.580 --> 00:03:40.250
So 5 minus 1 is going to be four,
which is gonna be a positive number.

54
00:03:40.250 --> 00:03:43.080
Which means, that this is going to
return just the same that it would

55
00:03:43.080 --> 00:03:43.850
return up here.

56
00:03:43.850 --> 00:03:48.770
If this is five, and this is one,
it's gonna be a positive number,

57
00:03:48.770 --> 00:03:50.260
so it returns one here.

58
00:03:51.550 --> 00:03:54.220
If they're equal, this is three,
and this is three.

59
00:03:54.220 --> 00:03:57.100
So 3 minus 3,
it's gonna return 0 here, right?

60
00:03:57.100 --> 00:03:58.540
So that makes sense.

61
00:03:58.540 --> 00:04:02.700
And if this is ten, and this is one,
it's gonna say 1 minus 10,

62
00:04:02.700 --> 00:04:06.150
that's negative 9,
which is a negative number.

63
00:04:06.150 --> 00:04:07.850
Works just as well.

64
00:04:07.850 --> 00:04:10.425
So a little bit more
clever way of doing it.

65
00:04:14.483 --> 00:04:17.432
&gt;&gt; Brian Holt: And again,
you can get even more clever about this.

66
00:04:27.089 --> 00:04:29.856
&gt;&gt; Brian Holt: And
get that all into one line.

67
00:04:29.856 --> 00:04:38.997
A, b, a,
&gt;&gt; Brian Holt: If you wanted to.

