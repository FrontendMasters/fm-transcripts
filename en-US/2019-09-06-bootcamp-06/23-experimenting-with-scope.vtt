WEBVTT

1
00:00:00.130 --> 00:00:01.714
&gt;&gt; Brian: So let's say I said,

2
00:00:01.714 --> 00:00:06.820
this is the last advanced thing that
we're gonna do with scope here.

3
00:00:06.820 --> 00:00:12.046
Let something equal outside

4
00:00:12.046 --> 00:00:17.770
the if statement, okay?

5
00:00:17.770 --> 00:00:20.680
Then I'm gonna say if true

6
00:00:22.550 --> 00:00:25.400
Which by the way if true is
a totally pointless statement right?

7
00:00:25.400 --> 00:00:28.000
I'm just creating a block for
the sake of creating a block.

8
00:00:30.190 --> 00:00:35.180
And I say, inside of here,
let something equals

9
00:00:35.180 --> 00:00:40.020
inside the block, or
inside the if statement.

10
00:00:42.590 --> 00:00:47.510
Then I say console.log, something,

11
00:00:47.510 --> 00:00:52.420
okay, this makes sense inside the if
statement, right, but now what happens,

12
00:00:52.420 --> 00:00:57.860
if I put this outside of it,
I get outside the if statement.

13
00:00:57.860 --> 00:00:58.940
Now let's talk about why.

14
00:00:59.990 --> 00:01:04.060
The key here is that I put let again,
right?

15
00:01:04.060 --> 00:01:07.160
So this is the most immediate
something that it can find, right,

16
00:01:07.160 --> 00:01:11.720
so what it actually does is going
to go start at the inside scope.

17
00:01:11.720 --> 00:01:14.830
If it can't find it,
it looks at the next outer scope, and

18
00:01:14.830 --> 00:01:17.740
then it looks at the next outer scope,
and the next outer scope.

19
00:01:17.740 --> 00:01:20.743
And it just keeps going,
until eventually, finds something or

20
00:01:20.743 --> 00:01:22.367
doesn't find anything, right.

21
00:01:24.489 --> 00:01:26.896
&gt;&gt; Brian: Now if I change
this to drop this let,

22
00:01:26.896 --> 00:01:30.470
then both of them are gonna
be inside the if statement,

23
00:01:30.470 --> 00:01:35.350
because this variable is now
referring to this one, right?

24
00:01:35.350 --> 00:01:40.180
And so, that's why both of these are gonna
be something, or inside the if statement.

25
00:01:40.180 --> 00:01:43.740
But as soon as I put let there,
separate variable.

26
00:01:43.740 --> 00:01:48.180
Two different ones, because I put let
there, these are two different things.

27
00:01:48.180 --> 00:01:51.840
Now my advice to you is, don't name
things the same thing, because obviously,

28
00:01:51.840 --> 00:01:53.910
this is confusing, right?

29
00:01:53.910 --> 00:01:56.330
But I want to let you know
that this is very easy,

30
00:01:56.330 --> 00:01:57.770
to have something like this happen.

31
00:01:59.850 --> 00:02:02.675
Just to put it even more
into weird context.

32
00:02:06.946 --> 00:02:08.976
&gt;&gt; Brian: So
what happens if I move all of this?

33
00:02:12.722 --> 00:02:14.693
&gt;&gt; Brian: Okay, and I put this all.

34
00:02:19.588 --> 00:02:24.718
&gt;&gt; Brian: Okay, so
this is all inside of the thing, and

35
00:02:24.718 --> 00:02:30.119
I say, thing, and
I put even outside of that let

36
00:02:30.119 --> 00:02:38.263
something equals outside the function
&gt;&gt; Brian: And

37
00:02:38.263 --> 00:02:40.018
we'll put this inside there as well.

38
00:02:43.494 --> 00:02:46.468
&gt;&gt; Brian: Okay, inside the statement,
outside the statement,

39
00:02:46.468 --> 00:02:47.740
outside the function.

40
00:02:49.190 --> 00:02:52.910
So, I'd clear let something up here,
right.

41
00:02:52.910 --> 00:02:54.400
This is its own variable.

42
00:02:54.400 --> 00:02:57.420
A call function thing, right here, right?

43
00:02:57.420 --> 00:02:59.520
So remember, whenever I create a function,

44
00:02:59.520 --> 00:03:01.850
I don't run it until I actually
put the parentheses here.

45
00:03:01.850 --> 00:03:05.460
So this is when thing actually gets ran,
right, we follow.

46
00:03:07.130 --> 00:03:11.350
Inside there, I create another something
called outside the if statement, or

47
00:03:11.350 --> 00:03:15.100
with the value outside the if statement,
and then I have an if statement in here.

48
00:03:15.100 --> 00:03:18.330
In case I wanna console.log something,
I get inside the if statement.

49
00:03:18.330 --> 00:03:23.370
Then when I console.log something here,
this one is dead, right?

50
00:03:23.370 --> 00:03:25.249
We've thrown that one out, so

51
00:03:25.249 --> 00:03:29.821
now something refers to this something
outside the if statement, right?

52
00:03:31.639 --> 00:03:34.829
&gt;&gt; Brian: And now, once I'm done with
the function, this totally through, right?

53
00:03:34.829 --> 00:03:37.420
It's thrown out both of these ones.

54
00:03:37.420 --> 00:03:38.130
Right.

55
00:03:38.130 --> 00:03:42.180
And so
now something is outside the function.

56
00:03:44.864 --> 00:03:46.830
&gt;&gt; Brian: Okay?
How do we feel about that?

57
00:03:47.930 --> 00:03:50.870
Hopefully, your answer is,
I get it, but it's weird, right?

58
00:03:50.870 --> 00:03:52.590
That's what I'm going for.

59
00:03:52.590 --> 00:03:53.090
It is weird.

60
00:03:55.020 --> 00:03:59.200
But this is a very common place to
trip up when you're writing code,

61
00:03:59.200 --> 00:04:01.540
is not understanding what's in scope and
what's not.

62
00:04:01.540 --> 00:04:03.822
So that's why we're kind of gonna
drill on this a little bit.

63
00:04:05.218 --> 00:04:08.040
&gt;&gt; Speaker 2: So then, could stop me
if you're gonna get to this later.

64
00:04:08.040 --> 00:04:10.560
How do you make something,
change something in a function, but

65
00:04:10.560 --> 00:04:13.140
then let it persist throughout
the rest of your program?

66
00:04:13.140 --> 00:04:14.820
Would you return it?

67
00:04:14.820 --> 00:04:15.630
&gt;&gt; Brian: That's a good way of doing it.

68
00:04:15.630 --> 00:04:17.320
Typically, that's
the best way of doing it.

69
00:04:17.320 --> 00:04:20.000
Or if I needed to do it,
I would have to declare it outside of it.

70
00:04:20.000 --> 00:04:22.190
So let thing to keep.

71
00:04:23.370 --> 00:04:24.970
And now this is gonna
be in the outer scope.

72
00:04:24.970 --> 00:04:27.807
And I would say,

73
00:04:27.807 --> 00:04:33.693
thing to keep equals defined now.

74
00:04:33.693 --> 00:04:38.882
And now,
I can say console.log thing to keep,

75
00:04:38.882 --> 00:04:43.100
so now it's defined now, right?

76
00:04:43.100 --> 00:04:45.960
It matters words declared, right, because
nothing was declared inside of thing.

77
00:04:47.280 --> 00:04:50.714
But, hey, let's make it even more
complicated, because I'm into that.

78
00:04:50.714 --> 00:04:54.244
[LAUGH] What happens if I call
it before I called it a thing?

79
00:04:54.244 --> 00:04:58.420
&gt;&gt; Speaker 2: It would still say,
it was undefined.

80
00:04:58.420 --> 00:05:00.780
&gt;&gt; Brian: It's undefined in
this particular case, right?

81
00:05:02.190 --> 00:05:05.527
Because it only gets
defined after a call thing.

