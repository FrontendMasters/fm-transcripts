WEBVTT

1
00:00:00.170 --> 00:00:02.470
&gt;&gt; Brian Holt: So arrays have
a bunch of like helper methods or

2
00:00:02.470 --> 00:00:06.380
helper functions built on to them,
which make them very useful, right?

3
00:00:06.380 --> 00:00:10.040
So I have prime numbers here where I
just list out a bunch of prime numbers.

4
00:00:10.040 --> 00:00:14.020
If I ask prime numbers dot length,
which notice length is not a function,

5
00:00:14.020 --> 00:00:15.370
it's a property, right.

6
00:00:16.520 --> 00:00:19.900
If I ask for primes dot length,
I get back eight.

7
00:00:19.900 --> 00:00:22.630
That's how many items are in the array,
right?

8
00:00:22.630 --> 00:00:26.810
So if I have an array of length eight,

9
00:00:26.810 --> 00:00:30.710
that means it has indexes
from zero to seven, right?

10
00:00:30.710 --> 00:00:33.933
Because everything starts at zero,
so that's what length eight means.

11
00:00:33.933 --> 00:00:37.755
It means that there are eight objects or
eight things in there.

12
00:00:37.755 --> 00:00:39.229
Which means that it goes
from zero to seven.

13
00:00:41.760 --> 00:00:46.600
Join is if you wanna take an entire array
and condense it down to one string.

14
00:00:47.600 --> 00:00:50.770
So in this case, I will take all the prime
numbers and I wanna log them out.

15
00:00:50.770 --> 00:00:53.550
And I wanna put a barb in
a space between all of them.

16
00:00:53.550 --> 00:00:55.730
So notice here, that's what this does.

17
00:00:55.730 --> 00:00:58.970
Or I could have put here something else.

18
00:00:58.970 --> 00:01:01.939
And then it will put something
else between all of them.

19
00:01:07.077 --> 00:01:08.229
&gt;&gt; Brian Holt: Or
if I put nothing in there,

20
00:01:08.229 --> 00:01:10.973
it will just squish them all together
with nothing in between them.

21
00:01:13.691 --> 00:01:16.324
&gt;&gt; Brian Holt: Or if you put nothing at
all, it will put commas I think, yeah,

22
00:01:16.324 --> 00:01:19.510
it just automatically puts
commas if you give it nothing.

23
00:01:19.510 --> 00:01:21.448
So that's what joined was, it's useful for

24
00:01:21.448 --> 00:01:26.002
like logging things out and,
&gt;&gt; Brian Holt: I don't know,

25
00:01:26.002 --> 00:01:29.350
sometimes you need to join a race,
it's there if you need it.

26
00:01:29.350 --> 00:01:31.441
And this particular example here,

27
00:01:31.441 --> 00:01:35.374
I have const courses,
&gt;&gt; Brian Holt: And

28
00:01:35.374 --> 00:01:37.750
I have a bunch of different teachers here.

29
00:01:39.690 --> 00:01:44.491
And then if I want to add
something to the end of the array,

30
00:01:44.491 --> 00:01:46.999
I do courses.push, right?

31
00:01:46.999 --> 00:01:51.791
And what push is, push is another function
that's built onto the array that just adds

32
00:01:51.791 --> 00:01:54.470
something on the end,
it just tax it on the end.

33
00:01:56.970 --> 00:01:58.970
Now you might ask why push.

34
00:01:58.970 --> 00:02:04.814
It's archaic like computer sciency terms.

35
00:02:04.814 --> 00:02:07.440
It's just like in every language,
it's called push.

36
00:02:07.440 --> 00:02:09.400
Whenever you put something on the end,
you push it on the end.

37
00:02:11.850 --> 00:02:16.319
Consequently, if you want to
remove the last item on something,

38
00:02:16.319 --> 00:02:21.176
you can also do course dot,
&gt;&gt; Brian Holt: Pop,

39
00:02:21.176 --> 00:02:25.608
again, I didn't make this up.

40
00:02:25.608 --> 00:02:30.805
So what this will do, this will
remove the last item in the array,

41
00:02:30.805 --> 00:02:33.274
and it will give it back to you.

42
00:02:33.274 --> 00:02:38.317
So now here, because I just pushed
on Sean Larkins course right there.

43
00:02:38.317 --> 00:02:43.390
Sean Larkins course will now be
here on this course stored there,

44
00:02:43.390 --> 00:02:49.440
so if the console.log(course), okay?

45
00:02:49.440 --> 00:02:51.900
So when I pushed down there,
this was on courses.

46
00:02:51.900 --> 00:02:55.406
That was the last item here,
and then when I popped it off,

47
00:02:55.406 --> 00:02:57.350
they removed it from the array.

48
00:02:57.350 --> 00:03:00.189
So you'll notice here it's not on
the array when I log out right there.

49
00:03:05.840 --> 00:03:09.369
&gt;&gt; Speaker 2: What's the advantage of
using push instead of just going back and

50
00:03:09.369 --> 00:03:10.950
adding it to the array?

51
00:03:10.950 --> 00:03:13.290
Is it so you can take it on and
off easier?

52
00:03:13.290 --> 00:03:15.650
&gt;&gt; Brian Holt: Yeah,
it's just convenient, right?

53
00:03:15.650 --> 00:03:18.230
Cuz I don't have to know how
long the array is there, right?

54
00:03:20.300 --> 00:03:22.790
You could do it a different way,
but this is just really easy.

55
00:03:24.846 --> 00:03:27.920
&gt;&gt; Speaker 3: And it will pop only
take off the last one that you added?

56
00:03:27.920 --> 00:03:31.370
Can you put a different one in
there to remove that instead?

57
00:03:31.370 --> 00:03:34.170
Don't want just the last
one that was added there?

58
00:03:34.170 --> 00:03:35.640
&gt;&gt; Brian Holt: Pop will
only remove the last one,

59
00:03:35.640 --> 00:03:40.190
so if I wanted to take most multiple off,
I would just call courses.pop times.

60
00:03:40.190 --> 00:03:45.620
So I could do this, and this will just
keep removing the last one, right?

61
00:03:45.620 --> 00:03:49.030
If I look down here,
let's get rid of that.

62
00:03:50.794 --> 00:03:53.660
So now here,
I've popped off four of them, right?

63
00:03:53.660 --> 00:03:56.690
So notice that this array now
is just Kyle Simpsons, and

64
00:03:56.690 --> 00:04:02.680
if I popped it one more time,
notice now it's a totally empty array.

65
00:04:04.040 --> 00:04:05.160
That's your question?

66
00:04:05.160 --> 00:04:06.039
&gt;&gt; Speaker 3: Yeah.
&gt;&gt; Brian Holt: Cool.

67
00:04:06.039 --> 00:04:08.358
&gt;&gt; Speaker 4: What if you want
to leave a specific one like,

68
00:04:08.358 --> 00:04:11.056
there's one in the middle or
the front, whatever.

69
00:04:11.056 --> 00:04:15.350
&gt;&gt; Brian Holt: Yeah, so there's a bunch
of different things we can do here,

70
00:04:15.350 --> 00:04:17.430
which I will show you.

71
00:04:17.430 --> 00:04:20.290
Let me show you this one first and
then I will answer your question.

72
00:04:21.360 --> 00:04:24.640
So in this particular case,
I put in here my complete intro to react

73
00:04:24.640 --> 00:04:26.760
the three course and
then I came back and redid it.

74
00:04:26.760 --> 00:04:34.580
So here, I over wrote the one that I did
with complete ensured to react before.

75
00:04:34.580 --> 00:04:39.670
So you notice here, these three, the first
time I log it out right there, right?

76
00:04:39.670 --> 00:04:41.580
And then I log it again afterwards, and

77
00:04:41.580 --> 00:04:46.400
you can see that I've overwritten the
previous ones now only before is there.

78
00:04:46.400 --> 00:04:50.789
So the way that I did that is I said,
course two equals, and

79
00:04:50.789 --> 00:04:53.846
I just assigned it a new object, right.

80
00:04:57.025 --> 00:04:59.019
&gt;&gt; Brian Holt: And that overrides
what was there previously and

81
00:04:59.019 --> 00:05:01.363
put something new there, so
that's how you can do that.

82
00:05:05.000 --> 00:05:08.068
&gt;&gt; Brian Holt: So, if you actually want
to like pull things out of the array,

83
00:05:08.068 --> 00:05:10.317
there's a couple different
ways to do that.

84
00:05:10.317 --> 00:05:13.592
It's just,
get rid of the stuff in the middle.

85
00:05:18.790 --> 00:05:24.104
&gt;&gt; Brian Holt: So, one of you can do is,
see now how I can, I was telling you that

86
00:05:24.104 --> 00:05:29.544
I can't ever remember that if it's
been sub string and sub stir.

87
00:05:29.544 --> 00:05:34.226
There’s splice and slice, and
I have to look it up every single time.

88
00:05:34.226 --> 00:05:38.099
Pretty sure we’re talking
about splice this time, so

89
00:05:38.099 --> 00:05:41.900
let’s go with that and
then I might have to look it up.

90
00:05:41.900 --> 00:05:45.934
So let’s say I wanna remove
my course from here.

91
00:05:45.934 --> 00:05:51.891
So subarray=courses.splice,

92
00:05:51.891 --> 00:05:57.441
and I want to start at index two.

93
00:05:57.441 --> 00:06:03.361
Pretty sure and I want to remove one, yes.

94
00:06:03.361 --> 00:06:07.570
I remembered it,
[LAUGH] the dangers of live coding.

95
00:06:07.570 --> 00:06:11.596
And so what this is does,
it starts at our index two and

96
00:06:11.596 --> 00:06:14.022
it removes one element, okay?

97
00:06:14.022 --> 00:06:17.299
And now if I console.logsubarray,

98
00:06:17.299 --> 00:06:22.170
that should just be my course now,
which is what it is.

99
00:06:24.370 --> 00:06:27.930
So if I gave it to here,
it would also grab Steve's course as well.

100
00:06:27.930 --> 00:06:30.376
And the no sound here
Steve courses not in it.

101
00:06:30.376 --> 00:06:34.337
So you can remove multiple objects, and

102
00:06:34.337 --> 00:06:41.208
the other thing that you can do if you
want to, I believe I can say like,

103
00:06:41.208 --> 00:06:46.240
course, intro to angular,
something like that.

104
00:06:50.920 --> 00:06:55.370
And what this will actually do is
it'll actually, whatever you put here,

105
00:06:55.370 --> 00:06:57.300
it will insert in its place as well.

106
00:06:59.810 --> 00:07:04.238
So as you can see splice is a quite
useful function there as well if

107
00:07:04.238 --> 00:07:06.292
you're operating on a race.

108
00:07:06.292 --> 00:07:10.932
There's another one called slice, and
slice has relatively different semantics,

109
00:07:10.932 --> 00:07:13.519
but it's also gonna operate on race,
as well.

110
00:07:16.756 --> 00:07:20.195
&gt;&gt; Speaker 3: It's not gonna complain at
all that you're only giving a course and

111
00:07:20.195 --> 00:07:22.440
not a teacher object
inside of that object?

112
00:07:22.440 --> 00:07:24.562
&gt;&gt; Brian Holt: [INAUDIBLE] types
don't mean a thing in JavaScript.

113
00:07:24.562 --> 00:07:25.974
&gt;&gt; Speaker 3: I hate that.

114
00:07:25.974 --> 00:07:26.914
&gt;&gt; Brian Holt: Yeah-
&gt;&gt; Speaker 3: [LAUGH]

115
00:07:26.914 --> 00:07:27.424
&gt;&gt; Brian Holt: Well,

116
00:07:27.424 --> 00:07:31.763
there's lots of people that
would love to argue about that.

117
00:07:31.763 --> 00:07:33.890
[LAUGH]
&gt;&gt; Speaker 3: I'm sure, [LAUGH]

118
00:07:33.890 --> 00:07:35.243
&gt;&gt; Brian Holt: Yeah, you can, but

119
00:07:35.243 --> 00:07:40.390
yeah, it doesn't do any sort of
validation with types sort of like that.

120
00:07:40.390 --> 00:07:42.854
But if you're interested in that,
there's two different things,

121
00:07:42.854 --> 00:07:44.647
one's called typescript and
one is called flow.

122
00:07:44.647 --> 00:07:48.597
And they will enforce types
on top of JavaScript.

123
00:07:48.597 --> 00:07:54.315
&gt;&gt; Speaker 3: It's seems like you
could write terrible code with this.

124
00:07:54.315 --> 00:07:56.599
&gt;&gt; Brian Holt: Like types aren't gonna
prevent you from writing terrible code,

125
00:07:56.599 --> 00:07:58.348
that's-
&gt;&gt; Speaker 3: Sure, hard to read,

126
00:07:58.348 --> 00:08:01.422
hard to understand if you
come back to it later.

127
00:08:03.448 --> 00:08:05.933
&gt;&gt; Brian Holt: Yeah, but
also fighting with type system sucks.

128
00:08:05.933 --> 00:08:08.311
I'm a big proponent of types,
I actually quite like types.

129
00:08:08.311 --> 00:08:10.760
When I write my own code
I write type script.

130
00:08:10.760 --> 00:08:14.190
But, there are reasons that it's very
nice that JavaScript is quite dynamic.

