WEBVTT

1
00:00:00.530 --> 00:00:05.893
&gt;&gt; Speaker 1: What's your take on using
shorthand or the more clever alternatives

2
00:00:05.893 --> 00:00:11.724
to coding solution versus just writing
the longer but more readable code?

3
00:00:11.724 --> 00:00:13.856
&gt;&gt; Brian Holt: Just like I was
explaining here to Emma earlier,

4
00:00:13.856 --> 00:00:17.399
I always want people to err on the side of
code that they feel is readable, right?

5
00:00:17.399 --> 00:00:21.828
To me, because I've been doing this long
enough and like I write code like this.

6
00:00:21.828 --> 00:00:23.448
And so I often read code like this.

7
00:00:23.448 --> 00:00:25.505
This is still readable to me.

8
00:00:25.505 --> 00:00:30.105
So I kind of strike the balance here
that like I still find that readable and

9
00:00:30.105 --> 00:00:32.417
it's a lot shorter to type, right?

10
00:00:32.417 --> 00:00:33.603
So I'm gonna do it this way.

11
00:00:33.603 --> 00:00:36.858
And once you start getting into
these functional paradigms,

12
00:00:36.858 --> 00:00:40.874
your brain kind of starts thinking
about problems in terms of this, right?

13
00:00:40.874 --> 00:00:42.187
It's kind of a different
way of thinking about this.

14
00:00:42.187 --> 00:00:43.970
This would be called
functional programming.

15
00:00:43.970 --> 00:00:48.333
This would be more like procedural
programming or imperative programming.

16
00:00:48.333 --> 00:00:52.621
So not that you ever have to
care about those terms, but

17
00:00:52.621 --> 00:00:58.978
I always want people on my team and I want
myself to choose readable code, right?

18
00:00:58.978 --> 00:01:03.778
So if you find this far
more readable than this,

19
00:01:03.778 --> 00:01:08.587
then you're more imperative
to do it this way.

20
00:01:08.587 --> 00:01:11.464
&gt;&gt; Speaker 1: What about people who
come after you or that you work with or

21
00:01:11.464 --> 00:01:13.764
something, what if they
see it differently?

22
00:01:13.764 --> 00:01:16.092
&gt;&gt; Brian Holt: Then you tell
them that they're wrong.

23
00:01:16.092 --> 00:01:18.729
&gt;&gt; Speaker 1: [LAUGH]
&gt;&gt; Brian Holt: No, so

24
00:01:18.729 --> 00:01:23.879
if I was working somewhere that let's say
have more engineers that did not know

25
00:01:23.879 --> 00:01:29.041
how to program this way, I would probably
air on this side of doing it this way.

26
00:01:29.041 --> 00:01:31.962
And in the process, try and
teach them how to do it this way.

27
00:01:31.962 --> 00:01:35.840
So that hopefully we can get there, but
I don't want someone to sit there and

28
00:01:35.840 --> 00:01:39.851
just like stare at my code and say, what
the hell is going on with this, right?

29
00:01:39.851 --> 00:01:42.887
That's this is fun to write it this way.

30
00:01:42.887 --> 00:01:46.115
But if I'm like slowing up other people,

31
00:01:46.115 --> 00:01:50.275
then I'm like doing
a disservice to my team, right?

32
00:01:50.275 --> 00:01:52.378
So-
&gt;&gt; Speaker 1: When you read JavaScript in

33
00:01:52.378 --> 00:01:57.378
the wild, do you not necessarily, in your
job where people are probably programming

34
00:01:57.378 --> 00:02:02.045
similarly, do you see more code written
like that or it's just all different?

35
00:02:02.045 --> 00:02:02.963
&gt;&gt; Brian Holt: All over the place.

36
00:02:02.963 --> 00:02:07.797
You'll get some people that are very, very
functional oriented that won't write code

37
00:02:07.797 --> 00:02:10.737
any other way to the point
of being like ideologues and

38
00:02:10.737 --> 00:02:12.918
I like I don't like dealing with them.

39
00:02:12.918 --> 00:02:13.479
In fact,

40
00:02:13.479 --> 00:02:18.205
they're kind of the worst like functional
programming purists are the worst.

41
00:02:18.205 --> 00:02:19.858
Yeah, I'm just gonna throw that out there.

42
00:02:19.858 --> 00:02:22.926
The only one that I still like is
Brian Lanstor for the front of master and

43
00:02:22.926 --> 00:02:25.036
that's cuz he's just
a beautiful human being.

44
00:02:25.036 --> 00:02:27.525
&gt;&gt; Speaker 1: [LAUGH]
&gt;&gt; Brian Holt: But everyone else,

45
00:02:27.525 --> 00:02:28.065
they all suck.

46
00:02:28.065 --> 00:02:32.400
So I like a little bit of functional
programming like here in there.

47
00:02:32.400 --> 00:02:38.308
But like I'll still, if I see stuff
like this, I'm not upset by this, right?

48
00:02:38.308 --> 00:02:39.530
So I'm definitely not an Island.

49
00:02:39.530 --> 00:02:44.010
I've fancied myself much more of
a pragmatist like just take the approach

50
00:02:44.010 --> 00:02:46.114
that solves the problem, right?

51
00:02:46.114 --> 00:02:47.674
Try and fit into the code, right?

52
00:02:47.674 --> 00:02:50.545
Don't try and
enter a code base and make this.

53
00:02:50.545 --> 00:02:52.770
Well, this is bad and
we have to change everything.

54
00:02:52.770 --> 00:02:55.084
No, slow down, sparky.

55
00:02:55.084 --> 00:03:01.019
It's okay, just try and fit into
the code base, improve incrementally.

56
00:03:01.019 --> 00:03:03.157
Don't try and
upend the whole thing all at once.

57
00:03:03.157 --> 00:03:10.626
So to answer your question, it hugely
depends on who you're talking to.

58
00:03:10.626 --> 00:03:11.306
Other questions?

59
00:03:11.306 --> 00:03:13.270
Other rants you would like me to go on?

60
00:03:13.270 --> 00:03:14.920
&gt;&gt; Speaker 1: Can I ask one more?

61
00:03:14.920 --> 00:03:16.048
&gt;&gt; Brian Holt: Sure.

62
00:03:16.048 --> 00:03:19.376
&gt;&gt; Speaker 1: For
the constant, right, person.

63
00:03:19.376 --> 00:03:24.564
Did you have to create
that as a place to store

64
00:03:24.564 --> 00:03:29.893
each iteration or
could you have done list I in

65
00:03:29.893 --> 00:03:35.374
place of where it says
person in each of those?

66
00:03:35.374 --> 00:03:35.937
&gt;&gt; Brian Holt: Works just as well.

67
00:03:39.310 --> 00:03:41.704
&gt;&gt; Brian Holt: Honestly,
that's probably what I would do, but

68
00:03:41.704 --> 00:03:44.100
I was just erring on
the side of being explicit.

69
00:03:44.100 --> 00:03:45.024
So hopefully more people would get it.

70
00:03:45.024 --> 00:03:47.712
Cuz normally like seeing things
like person here and there,

71
00:03:47.712 --> 00:03:49.090
it's a little bit more clear.

72
00:03:49.090 --> 00:03:51.169
It's like that's a person there.

73
00:03:51.169 --> 00:03:52.234
What is a list I, right?

74
00:03:52.234 --> 00:03:56.840
So yeah, it's all in the sake of clarity.

75
00:04:01.548 --> 00:04:05.896
&gt;&gt; Brian Holt: In general, like if I'm
referring to something like list I over

76
00:04:05.896 --> 00:04:10.805
and over and over and over again,
I would actually plug out of the topic it

77
00:04:10.805 --> 00:04:15.794
did here and use person one for clarity
second to accessing a list is really

78
00:04:15.794 --> 00:04:19.603
really cheap into performance
it's not free, right?

79
00:04:19.603 --> 00:04:23.035
So that's a micro excuse.

80
00:04:23.035 --> 00:04:26.594
It would probably in the text you
don't super large code bases, but

81
00:04:26.594 --> 00:04:28.535
that's how I justified in my brain.

82
00:04:32.123 --> 00:04:34.813
&gt;&gt; Speaker 1: What time does
performance really matter?

83
00:04:34.813 --> 00:04:39.822
Is there a set size of list,
a size of structure that you're

84
00:04:39.822 --> 00:04:45.246
dealing with where you start
having like really think about it?

85
00:04:45.246 --> 00:04:48.651
&gt;&gt; Brian Holt: I'm sure there
are numbers that could be given.

86
00:04:48.651 --> 00:04:55.012
I think my general stance is wait to
have a problem and then fix it, right?

87
00:04:55.012 --> 00:04:57.185
Premature optimization
kills companies that,

88
00:04:57.185 --> 00:04:58.938
that's a saying that I did not make up.

89
00:04:58.938 --> 00:05:02.672
[LAUGH] So if you're sitting there like
wringing your hands about like how this

90
00:05:02.672 --> 00:05:06.243
can be more performance and
like that in general, you're wasting time.

91
00:05:06.243 --> 00:05:10.542
And it also leads to people writing
really weird and archaic code, right,

92
00:05:10.542 --> 00:05:14.858
to try like in the name of performance
trying to get something to go faster.

93
00:05:14.858 --> 00:05:17.618
But in general,
like JavaScript pretty fast.

94
00:05:17.618 --> 00:05:18.584
Chrome is really fast.

95
00:05:18.584 --> 00:05:19.899
Firefox is really fast.

96
00:05:19.899 --> 00:05:24.316
In general, unless you're doing things
like operating like millions of numbers.

97
00:05:24.316 --> 00:05:29.144
You generally don't have to really concern
yourself like I will optimize things

98
00:05:29.144 --> 00:05:32.694
to say like 50 milliseconds or
100 milliseconds, but

99
00:05:32.694 --> 00:05:35.189
I won't optimize things to say like two.

100
00:05:35.189 --> 00:05:38.943
So it depends on what's going on.

101
00:05:38.943 --> 00:05:42.546
We're actually gonna be looking at our
project at the end of the day that where

102
00:05:42.546 --> 00:05:45.375
you're gonna have some
performance concerns, right, and

103
00:05:45.375 --> 00:05:47.666
you're gonna have to
make some optimizations.

104
00:05:47.666 --> 00:05:51.013
So that’s because it’s going to be
happening hundreds of times a second.

105
00:05:51.013 --> 00:05:55.717
When you have code that’s that hot, that’s
what you would call something like that.

106
00:05:55.717 --> 00:05:56.868
It’s a hot code pass.

107
00:05:56.868 --> 00:05:58.636
Something that is run really,
really frequently.

108
00:05:58.636 --> 00:06:01.574
That’s when you really wanna
concern yourself with performance.

109
00:06:01.574 --> 00:06:05.508
But if it’s a cold, cold pass like it runs
like once a day who gives a shit if it

110
00:06:05.508 --> 00:06:08.108
takes five minutes versus four minutes,
right?

111
00:06:08.108 --> 00:06:10.832
Yeah, does that answer your question?

112
00:06:10.832 --> 00:06:11.845
&gt;&gt; Speaker 1: Yeah.
&gt;&gt; Brian Holt: Cool, thanks.

113
00:06:11.845 --> 00:06:12.579
Anyone else?

114
00:06:16.068 --> 00:06:16.584
&gt;&gt; Brian Holt: Yeah.

115
00:06:16.584 --> 00:06:20.539
&gt;&gt; Speaker 1: So in general,
when talking about maps,

116
00:06:20.539 --> 00:06:25.060
is that basically just like the for
statement?

117
00:06:25.060 --> 00:06:26.506
Like this one right here?

118
00:06:26.506 --> 00:06:29.311
&gt;&gt; Brian Holt: Yeah,
I'm trying to understand that line.

119
00:06:29.311 --> 00:06:30.353
They're just-
&gt;&gt; Speaker 1: Sure, so

120
00:06:30.353 --> 00:06:32.934
let's make this a little
bit more explicit.

121
00:06:32.934 --> 00:06:34.981
So they can make a little bit more sense.

122
00:06:42.211 --> 00:06:44.388
&gt;&gt; Speaker 1: Return person.name.

123
00:06:44.388 --> 00:06:50.812
Okay, so, that's a bit more explicit.

124
00:06:50.812 --> 00:06:52.756
So this extremely similar to forEach,
right?

125
00:06:52.756 --> 00:06:56.926
You can think it's functionally
exactly the same as forEach.

126
00:06:56.926 --> 00:07:02.161
The only key difference between forEach
and map is that whatever you return

127
00:07:02.161 --> 00:07:08.163
in map gets put into a new array, right,
whereas for each doesn't return anything.

128
00:07:08.163 --> 00:07:10.722
So here, I'm returning person.name.

129
00:07:10.722 --> 00:07:14.619
So that after this, I'm going to
be left with a list of strings or

130
00:07:14.619 --> 00:07:18.803
an array of strings, right,
which is gonna be an array of names which

131
00:07:18.803 --> 00:07:23.296
is ultimately what I wanted to get out
of this right before this was a list.

132
00:07:23.296 --> 00:07:27.717
If you come on down this line right
here and I don't have this map on here,

133
00:07:27.717 --> 00:07:32.375
engineers, it's just gonna be a list
of objects which is not what I wanted.

134
00:07:32.375 --> 00:07:34.126
I wanted a list of strings.

135
00:07:34.126 --> 00:07:34.942
&gt;&gt; Brian Holt: Okay.

136
00:07:34.942 --> 00:07:35.786
&gt;&gt; Speaker 1: Does that
answer your question?

137
00:07:35.786 --> 00:07:36.302
&gt;&gt; Brian Holt: Yeah, it does.

138
00:07:36.302 --> 00:07:36.842
&gt;&gt; Speaker 1: Cool.

139
00:07:42.192 --> 00:07:44.662
&gt;&gt; Speaker 1: I'm always like
really hesitant to teach this.

140
00:07:44.662 --> 00:07:48.306
Like I said, I learned about map filter
and reduce like those kind of things,

141
00:07:48.306 --> 00:07:52.119
probably about five or six years into my
career and it fundamentally changed how I

142
00:07:52.119 --> 00:07:54.606
write code once I actually
kind of learn how to do it.

143
00:07:54.606 --> 00:07:59.120
I think it makes a lot of these things
a lot simpler to deal with, right?

144
00:07:59.120 --> 00:08:03.460
Like once you understand what this is
really doing, it's three lines of code,

145
00:08:03.460 --> 00:08:04.560
right, which is pretty cool.

146
00:08:06.190 --> 00:08:08.270
And it's becoming more and
more common in JavaScript as well,

147
00:08:08.270 --> 00:08:10.860
which is why I think it's important
that you're exposed to it earlier.

148
00:08:11.860 --> 00:08:15.425
Like if you are start writing react which
is something that I write a lot of which

149
00:08:15.425 --> 00:08:18.191
is the UI library from Facebook,
you have to know about map.

150
00:08:18.191 --> 00:08:20.707
It's just used everywhere in react.

151
00:08:20.707 --> 00:08:24.395
So you'll be ill equipped to deal with it,
unless you know how to use it.

152
00:08:24.395 --> 00:08:28.253
So anyway,
that's my internal monologue for the day.

153
00:08:32.589 --> 00:08:34.642
&gt;&gt; Speaker 1: Okay, so
we'll comment that one out.

154
00:08:34.642 --> 00:08:37.302
We'll leave this one up here and
we'll go down here.

