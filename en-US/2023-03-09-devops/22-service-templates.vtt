WEBVTT

1
00:00:00.000 --> 00:00:02.265
As I said, we wanted to try and

2
00:00:02.265 --> 00:00:06.993
solve two big problems that a lot
of organizations deal with.

3
00:00:06.993 --> 00:00:09.278
The first one is definitely, as I said,

4
00:00:09.278 --> 00:00:13.866
automation in the sense of standards
around your services and things like that.

5
00:00:13.866 --> 00:00:20.119
And I've been able to show you at least
how utilizing something like Pulumi and

6
00:00:20.119 --> 00:00:25.708
really just a programming language
can help you create a lot of those,

7
00:00:25.708 --> 00:00:29.025
again bowling bumpers, as we've said,

8
00:00:29.025 --> 00:00:33.598
to help our developers not
shoot themselves in the foot.

9
00:00:33.598 --> 00:00:39.283
There's another problem, though,
that I have dealt with for

10
00:00:39.283 --> 00:00:45.072
a long time that actually I had
a buddy of mine kind of bring to me,

11
00:00:45.072 --> 00:00:48.418
and I would have never thought of it.

12
00:00:48.418 --> 00:00:53.315
And I wanna share this with you because
this is the second tool outside

13
00:00:53.315 --> 00:00:56.355
of the tool I just showed
you that is saved,

14
00:00:56.355 --> 00:00:59.918
even my company where I work at now,
a lot of time.

15
00:01:02.197 --> 00:01:04.121
So let's do this really quickly.

16
00:01:04.121 --> 00:01:08.901
We're gonna create a new document really
fast, and it won't be the same thing as it

17
00:01:08.901 --> 00:01:13.364
was before in the sense of legs, but
we are gonna need a document of some sort.

18
00:01:13.364 --> 00:01:18.693
So the document we're gonna talk
about here is service templates.

19
00:01:18.693 --> 00:01:24.050
So the problem we have here

20
00:01:24.050 --> 00:01:29.650
is we have services that all

21
00:01:29.650 --> 00:01:35.250
use similar ways to build,

22
00:01:35.250 --> 00:01:39.398
test, and deploy.

23
00:01:39.398 --> 00:01:43.375
However, we have to copy and

24
00:01:43.375 --> 00:01:49.852
paste these configuration
files every time.

25
00:01:49.852 --> 00:01:55.493
And this is super common when you're
talking about microservices or

26
00:01:55.493 --> 00:02:00.074
things like that,
where I have a standard now, right?

27
00:02:00.074 --> 00:02:03.011
We only work in Node.js or

28
00:02:03.011 --> 00:02:08.224
we only work in this or
we only do this, right?

29
00:02:08.224 --> 00:02:13.739
And we realized that we got a lot
of benefit out of service directory

30
00:02:13.739 --> 00:02:18.575
by leaning on automation generation and
stuff like that.

31
00:02:18.575 --> 00:02:23.840
So how can we solve the problem
of services all using similar

32
00:02:23.840 --> 00:02:30.802
configurations to where we don't have
to write a single line of code, right?

33
00:02:30.802 --> 00:02:35.084
Because that's the real goal here,
with service directory or

34
00:02:35.084 --> 00:02:39.767
with anything else is just the bare
minimum we need to write to get this

35
00:02:39.767 --> 00:02:42.290
working, is what we wanna focus on.

36
00:02:42.290 --> 00:02:48.163
So what I'm gonna quickly
outline is what we have,

37
00:02:48.163 --> 00:02:51.168
to give a better example,

38
00:02:51.168 --> 00:02:57.058
we will say what we use to or
use for CI/CD, right?

39
00:02:57.058 --> 00:03:02.022
And there's gonna be a couple
of things that we talk about, so

40
00:03:02.022 --> 00:03:03.938
what we use for CI/CD.

41
00:03:03.938 --> 00:03:08.863
Okay, so the first one is,
say, Docker, right?

42
00:03:08.863 --> 00:03:11.592
We know that we're gonna
be building Docker files,

43
00:03:11.592 --> 00:03:15.201
we know that all of our services
are gonna be in Docker files, right?

44
00:03:15.201 --> 00:03:17.216
And so we know that across the board,

45
00:03:17.216 --> 00:03:20.927
every one of our services uses
Docker in some way, shape, or form.

46
00:03:20.927 --> 00:03:23.865
Also, they use CircleCI.

47
00:03:23.865 --> 00:03:30.461
So Docker is for our image, and
this is for our build and testing, right?

48
00:03:30.461 --> 00:03:34.436
And again, every repository uses
these in some way, shape, or form.

49
00:03:34.436 --> 00:03:39.869
It might not be identical, but it's a lot
of boilerplate code that we just copy and

50
00:03:39.869 --> 00:03:42.803
paste and copy and
paste and copy and paste.

51
00:03:42.803 --> 00:03:45.992
So what do we want to achieve here?

52
00:03:47.828 --> 00:03:49.853
What do we need, right?

53
00:03:49.853 --> 00:03:53.697
Well, just like with service directory,

54
00:03:53.697 --> 00:03:58.499
we need a DSL or
a domain specific language to help us,

55
00:03:58.499 --> 00:04:02.983
so that when we want to
generate these templates,

56
00:04:02.983 --> 00:04:07.360
they will be unique to
the specific service, but

57
00:04:07.360 --> 00:04:11.667
they will always get the same changes,
right?

58
00:04:11.667 --> 00:04:16.086
So we need a domain specific
language that allows

59
00:04:16.086 --> 00:04:20.625
us to configure templates for
services, right?

60
00:04:20.625 --> 00:04:26.403
And then we also need a CLI tool to

61
00:04:26.403 --> 00:04:33.902
generate templates from our DSL, okay?

62
00:04:33.902 --> 00:04:39.488
And so what this really starts
to look like is a tool that will

63
00:04:39.488 --> 00:04:44.974
autogenerate the things that
we basically always write.

64
00:04:46.910 --> 00:04:51.300
And so what we're gonna say, and again,

65
00:04:51.300 --> 00:04:56.320
this is just really quickly here,
our solution

66
00:04:56.320 --> 00:05:01.966
is we want to build a CLI tool
that has templates in it,

67
00:05:01.966 --> 00:05:08.616
which we can configure with external,
we'll say JSON files,

68
00:05:08.616 --> 00:05:13.156
to generate build configurations, etc.

69
00:05:16.149 --> 00:05:19.896
Right, and I'm actually gonna do
another thing here really quickly,

70
00:05:19.896 --> 00:05:23.903
which is if chart never thought I was
gonna get into Lucid, they were wrong.

71
00:05:23.903 --> 00:05:28.204
I love workflows, I haven't been
able to show you one yet, but

72
00:05:28.204 --> 00:05:30.163
I'm gonna show you one now.

73
00:05:30.163 --> 00:05:35.081
So let's create a super simple
chart of what this looks like.

74
00:05:35.081 --> 00:05:36.347
We go here.

75
00:05:37.852 --> 00:05:41.916
Okay, so to visualize this, right,

76
00:05:41.916 --> 00:05:47.511
first thing we're gonna do
is we're gonna grab a box

77
00:05:51.908 --> 00:05:59.308
Right, and this box here is what we're
going to call our build.json file.

78
00:06:01.202 --> 00:06:04.181
Sorry, build.JSON file.

79
00:06:04.181 --> 00:06:08.096
Now, this build.json file is what you can

80
00:06:08.096 --> 00:06:12.570
kind of consider to be a package.json,
right?

81
00:06:12.570 --> 00:06:17.088
You can consider it to be basically
a file of configurations.

82
00:06:17.088 --> 00:06:21.638
That's it, it's just got a domain
specific language that it uses, and

83
00:06:21.638 --> 00:06:24.412
we can configure services with it, right?

84
00:06:24.412 --> 00:06:28.725
So we'll say that we have
a build.json file, right?

85
00:06:28.725 --> 00:06:31.691
And not only do we have a build.json file,
but

86
00:06:31.691 --> 00:06:35.353
in that build.json file,
we give it specific options.

87
00:06:35.353 --> 00:06:40.315
So for example, in this case,
we'll say, all right,

88
00:06:40.315 --> 00:06:44.020
well, we need a service_name, right?

89
00:06:44.020 --> 00:06:50.663
We need a way of knowing when we generate
the templates, what service it's for.

90
00:06:50.663 --> 00:06:54.056
Can anyone guess why we might
need to know the service_name?

91
00:06:54.056 --> 00:06:56.801
We said it builds Docker images, right?

92
00:06:56.801 --> 00:07:00.296
So how would it know to build
the right Docker image?

93
00:07:00.296 --> 00:07:01.631
That's why we do it.

94
00:07:01.631 --> 00:07:06.590
It's because we need to provide,
again, we're back to the scenario

95
00:07:06.590 --> 00:07:11.549
where it's the developers,
what they're expecting to do, right,

96
00:07:11.549 --> 00:07:17.450
because everything I've shown you, the
developers are doing, just to be clear.

97
00:07:17.450 --> 00:07:22.387
[LAUGH] I'm not the one adding
services to service directory.

98
00:07:22.387 --> 00:07:27.268
And I'm also not the one creating
configuration files in a service

99
00:07:27.268 --> 00:07:29.804
to make it so it can build, right?

100
00:07:29.804 --> 00:07:34.015
These are two huge problems that I
guarantee most companies that you guys

101
00:07:34.015 --> 00:07:38.167
have worked with has been a one on
one interaction with the DevOps team.

102
00:07:38.167 --> 00:07:41.335
Where you've had to go to the team and
be like, hey,

103
00:07:41.335 --> 00:07:43.790
I need build configuration file setup.

104
00:07:43.790 --> 00:07:46.692
Okay, cool, let's go do that, or
hey, I need a front end deployed,

105
00:07:46.692 --> 00:07:47.660
let's go do that.

106
00:07:47.660 --> 00:07:51.080
We are literally getting rid of
those problems with these tools.

107
00:07:52.230 --> 00:07:55.620
So we're gonna say we want a service-name,
right?

108
00:07:55.620 --> 00:07:59.554
And then maybe for ease of sake,

109
00:07:59.554 --> 00:08:06.271
we'll also say that we want
a service_type, right?

110
00:08:06.271 --> 00:08:10.721
And so maybe we wanna be able
to deploy back ends different,

111
00:08:10.721 --> 00:08:12.684
there we go, come on now.

112
00:08:12.684 --> 00:08:16.644
Maybe we wanna be able to
deploy back ends differently.

113
00:08:16.644 --> 00:08:18.362
You really can do it.

114
00:08:19.485 --> 00:08:23.117
Okay, deploy back ends to
a specific location and

115
00:08:23.117 --> 00:08:26.035
front end to a specific location.

116
00:08:26.035 --> 00:08:32.073
So once we have the service_name and
the service_type added to this build.json,

117
00:08:32.073 --> 00:08:34.803
then what we do is we create a CLI tool.

118
00:08:38.870 --> 00:08:44.210
Right, and this CLI tool is going

119
00:08:44.210 --> 00:08:49.760
to read the build.json, right?

120
00:08:49.760 --> 00:08:52.188
And it will also have templates.

121
00:09:03.525 --> 00:09:09.648
And so what's gonna happen is when
the build.json is read via the CLI tool,

122
00:09:09.648 --> 00:09:14.144
the CLI tool is then going to
go out to its templates, and

123
00:09:14.144 --> 00:09:18.354
it's gonna inject the variables
that we have here,

124
00:09:18.354 --> 00:09:21.723
service_name, service_type, etc.

125
00:09:21.723 --> 00:09:24.128
And then what it's gonna spit out,

126
00:09:28.035 --> 00:09:32.249
Is our Docker file.

127
00:09:32.249 --> 00:09:33.915
That's right.

128
00:09:33.915 --> 00:09:36.812
Why should develop the right Docker files?

129
00:09:36.812 --> 00:09:41.777
They shouldn't, [LAUGH] or
write there circleci.yaml,

130
00:09:41.777 --> 00:09:45.524
because we also don't
want developers to be

131
00:09:45.524 --> 00:09:50.099
dealing with our build pipelines and
[LAUGH].

132
00:09:50.099 --> 00:09:55.864
And so we have decided that we will give
developers a configuration interface,

133
00:09:55.864 --> 00:09:58.100
right, that they can use, and

134
00:09:58.100 --> 00:10:02.416
then the CLI tool will then
output the files that they need.

135
00:10:02.416 --> 00:10:04.180
What does that mean?

136
00:10:04.180 --> 00:10:07.998
It also means that if in the future,
we need to add other things,

137
00:10:07.998 --> 00:10:11.340
write more,
what if we wanna generate a npmrc?

138
00:10:11.340 --> 00:10:16.150
What if we wanna generate a,
I don't know, gitignore?

139
00:10:16.150 --> 00:10:19.640
I don't know, whatever,
like other standards that we have.

140
00:10:19.640 --> 00:10:22.945
We don't have to expect the developers
to remember these things.

141
00:10:22.945 --> 00:10:27.854
Now, all we do is we say, hey devs,
you use our CLI tool, right, and

142
00:10:27.854 --> 00:10:31.602
configure your repository
with this build.json.

143
00:10:31.602 --> 00:10:37.233
And then whenever you, [LAUGH] not me,
whenever you run this CLI tool,

144
00:10:37.233 --> 00:10:40.870
you'll get the files
that you need out of it.

