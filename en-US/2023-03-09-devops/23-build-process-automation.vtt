WEBVTT

1
00:00:00.070 --> 00:00:04.742
And so we're basically gonna build this,
we're gonna build this very, very quickly

2
00:00:04.742 --> 00:00:09.530
to show you guys how you never have to
write a Docker file again, well, directly.

3
00:00:09.530 --> 00:00:13.300
You never have to write a circle
CI configuration again.

4
00:00:13.300 --> 00:00:16.409
And if you've written programs enough,
you could probably kind of see where we're

5
00:00:16.409 --> 00:00:18.550
going with this and
how we're gonna build it.

6
00:00:18.550 --> 00:00:22.220
But it's really that simple, right?

7
00:00:22.220 --> 00:00:27.488
So we have service directory,
now we have our service templates.

8
00:00:27.488 --> 00:00:31.027
Now, again,
we're gonna build this pretty quickly, so

9
00:00:31.027 --> 00:00:34.365
I will again push up the code for
you guys so you have it.

10
00:00:36.335 --> 00:00:40.967
But what I wanna do really is,
I just want to create a very simple,

11
00:00:42.884 --> 00:00:49.961
TypeScript project, and
created index.ts with that.

12
00:01:03.783 --> 00:01:04.584
Got it.

13
00:01:04.584 --> 00:01:11.663
One thing we need to add is what
we added before, TypeScript.

14
00:01:17.208 --> 00:01:20.582
So now if I go here, there we go.

15
00:01:20.582 --> 00:01:21.150
We're good.

16
00:01:21.150 --> 00:01:24.410
Okay, so let's go back to our diagram.

17
00:01:24.410 --> 00:01:28.080
And let's make sure we check
our document first actually.

18
00:01:28.080 --> 00:01:30.606
So we wanna make a Docker file and

19
00:01:30.606 --> 00:01:34.450
we wanna make a circle
CI file autogeneratable.

20
00:01:34.450 --> 00:01:37.990
We know that we need a DSL and
a CLI tool to do that.

21
00:01:37.990 --> 00:01:40.914
So, why don't we do the easier one first,

22
00:01:40.914 --> 00:01:45.230
which is declaring our DSL,
our domain-specific language.

23
00:01:46.430 --> 00:01:50.020
So just like we did before,
I'm just gonna start with type safety.

24
00:01:50.020 --> 00:01:52.180
I'm just gonna start writing types.

25
00:01:52.180 --> 00:01:57.200
And so in this case, we'll say build JSON,
maybe, something like that.

26
00:01:57.200 --> 00:02:01.696
And then in this, we'll start typing
our domain-specific language.

27
00:02:01.696 --> 00:02:06.170
So, say name, string.

28
00:02:06.170 --> 00:02:10.090
We'd say service type string.

29
00:02:10.090 --> 00:02:11.270
Now remember, this is type.

30
00:02:11.270 --> 00:02:14.877
So if I wanted to,
I could even give service type an enum,

31
00:02:14.877 --> 00:02:19.910
a specific enum that is only usable
within these specific things or whatever.

32
00:02:19.910 --> 00:02:24.038
So that's just something else to
remember is I'm just doing the simple,

33
00:02:24.038 --> 00:02:25.580
you can go way beyond this.

34
00:02:27.290 --> 00:02:29.940
So now we have this.

35
00:02:29.940 --> 00:02:31.290
Let's also do this really quickly.

36
00:02:31.290 --> 00:02:38.262
Let's create a build by JSON file so
we can actually test it as well.

37
00:02:38.262 --> 00:02:41.738
Again, in my index.js, I have this, and

38
00:02:41.738 --> 00:02:45.900
in my Build.JSON,
we're going to duplicate it.

39
00:02:45.900 --> 00:02:51.760
So we're gonna say name and
why don't we do this?

40
00:02:51.760 --> 00:02:58.074
Why don't we follow the same naming
convention that we did before so

41
00:02:58.074 --> 00:03:03.920
we could say devops,
this is the devops course front end.

42
00:03:03.920 --> 00:03:05.610
That's the name of it.

43
00:03:05.610 --> 00:03:09.980
And then if we wanted to, we could
actually just say DevOps course there.

44
00:03:09.980 --> 00:03:18.450
And because it's gonna have the service
type here, front end like that.

45
00:03:20.851 --> 00:03:25.788
Those two variables [LAUGH]
alone can tell you a lot

46
00:03:25.788 --> 00:03:30.980
about how a service is built and
how we maintain it.

47
00:03:32.090 --> 00:03:36.975
Just by having a name and a service type,
we can now tell it what kind of

48
00:03:36.975 --> 00:03:41.050
service it's built or
what kind of service is built.

49
00:03:41.050 --> 00:03:41.710
We can say for

50
00:03:41.710 --> 00:03:46.280
front ends we have a completely different
Docker file than a backend per se.

51
00:03:46.280 --> 00:03:49.352
We have a lot of flexibility
by just having those two, but

52
00:03:49.352 --> 00:03:53.860
I'm gonna show you just super quickly,
we're not gonna do it right now.

53
00:03:53.860 --> 00:03:56.170
Actually I'll show it to you in a second.

54
00:03:56.170 --> 00:03:57.530
Let's move forward.

55
00:03:57.530 --> 00:04:00.890
So as I said, these two things are very,
very powerful.

56
00:04:00.890 --> 00:04:01.777
And again,

57
00:04:01.777 --> 00:04:07.290
even just having this helps us in DevOps
know how to get to where we need to.

58
00:04:08.860 --> 00:04:14.080
So now that we have that, we're gonna
have to do a little bit of coding.

59
00:04:14.080 --> 00:04:18.480
And we need to create a few functions
to get our CLI tool to work properly.

60
00:04:18.480 --> 00:04:23.280
First off, we need to make it so
our program is actually a CLI tool.

61
00:04:23.280 --> 00:04:29.850
And so I'm just gonna use a very
common tool called Yargs, to do that.

62
00:04:29.850 --> 00:04:33.708
If you guys have ever heard of
Yargs before, it just makes it so

63
00:04:33.708 --> 00:04:37.080
that node CLI tool or
node can be used as a CLI tool.

64
00:04:37.080 --> 00:04:38.520
It's very, very simple.

65
00:04:38.520 --> 00:04:43.407
And the main point here is
that we wanna create a command

66
00:04:43.407 --> 00:04:48.620
that we can use this as and
generate our code with.

67
00:04:48.620 --> 00:04:54.236
And so I'm literally just going
to copy all of that from here,

68
00:04:54.236 --> 00:04:59.645
and we're gonna do function main,
just like I had before.

69
00:04:59.645 --> 00:05:02.310
And we're gonna post
all that code into it.

70
00:05:03.490 --> 00:05:09.390
Now, again, I'm just copying directly
from their example, all right?

71
00:05:09.390 --> 00:05:16.245
So I'm not doing anything crazy and if
you're interested, Here it is right here.

72
00:05:23.580 --> 00:05:24.884
All right, so here's what we're gonna do.

73
00:05:24.884 --> 00:05:28.048
We're gonna say yarn add yards.

74
00:05:32.790 --> 00:05:33.983
Now we have yards.

75
00:05:33.983 --> 00:05:39.799
So we'll say import yards from yards.

76
00:05:41.723 --> 00:05:43.430
And then we will just get rid of this.

77
00:05:43.430 --> 00:05:44.978
So we have yards like this.

78
00:05:50.949 --> 00:05:53.160
Now it's complaining because it's
saying that we don't have types.

79
00:05:54.230 --> 00:05:56.863
We could move forward if we wanted to and
just not use types, but

80
00:05:56.863 --> 00:06:00.270
we're using TypeScripts, so
we should probably add our types.

81
00:06:00.270 --> 00:06:06.715
So I'm just gonna do yarn,
add dev at types yards,

82
00:06:10.243 --> 00:06:13.470
In this area, that should work, cool.

83
00:06:13.470 --> 00:06:15.990
So I'm not gonna do anything else.

84
00:06:15.990 --> 00:06:19.865
I'm just gonna save this and
then I'm gonna do node index.js.

85
00:06:19.865 --> 00:06:23.057
Cannot use import statement
outside of a module.

86
00:06:23.057 --> 00:06:24.956
Jeez, did I do something wrong?

87
00:06:32.355 --> 00:06:33.947
Let's do this really quickly.

88
00:06:39.834 --> 00:06:44.806
The autogenerated TypeScript file is not
always exactly what you would want it

89
00:06:44.806 --> 00:06:49.265
to be so I'm just gonna grab one that
I know is not gonna complain at me.

90
00:06:49.265 --> 00:06:51.946
I just gotta put that in its place.

91
00:06:56.141 --> 00:06:58.290
Oops, there we go.

92
00:06:58.290 --> 00:07:02.510
So just to go over this really quickly,
this is a TSC config file.

93
00:07:02.510 --> 00:07:04.636
Basically, it's a TypeScript
configuration file.

94
00:07:04.636 --> 00:07:09.750
Because we're using TypeScript, we are
using what's called a superset language.

95
00:07:09.750 --> 00:07:12.170
Or basically a superset to a language.

96
00:07:12.170 --> 00:07:14.612
And so we have to compile the code or

97
00:07:14.612 --> 00:07:19.680
transpile the code from TypeScript
to JavaScript basically.

98
00:07:19.680 --> 00:07:23.525
And so this configuration helps us get
there by telling us what the module

99
00:07:23.525 --> 00:07:28.110
resolution is, if it should pretty stuff,
or in what files it's looking at.

100
00:07:28.110 --> 00:07:31.087
But this just helps us set
up our TypeScript stuff so

101
00:07:31.087 --> 00:07:34.380
that it actually just
works out of the box.

102
00:07:34.380 --> 00:07:37.800
I do that, cannot use, why are you saying?

103
00:07:39.412 --> 00:07:39.997
My bad.

104
00:07:42.806 --> 00:07:45.520
There we go.

105
00:07:45.520 --> 00:07:47.150
So, property script name does not exist.

106
00:07:47.150 --> 00:07:53.450
So it's saying that, I guess maybe
they're examples out of date.

107
00:07:53.450 --> 00:07:54.430
There we go, okay, cool.

108
00:07:54.430 --> 00:07:55.289
So we're just gonna grab this.

109
00:07:57.290 --> 00:07:59.199
And we'll get rid of all this.

110
00:07:59.199 --> 00:08:02.468
And we'll just replace it
with this little one liner.

111
00:08:10.710 --> 00:08:11.778
Sorry, I'm on a Mac.

112
00:08:16.830 --> 00:08:18.360
There we go.

113
00:08:18.360 --> 00:08:25.819
So then we'll go here with this like
this and we'll just put this right here.

114
00:08:36.071 --> 00:08:42.400
Import, you don't have to do this but
I do it just because I'm weird.

115
00:08:46.411 --> 00:08:50.728
Process, so then,

116
00:08:54.404 --> 00:08:59.724
Add dev types node.

117
00:08:59.724 --> 00:09:01.209
Gotta add that really quickly.

118
00:09:08.460 --> 00:09:10.300
And then we can actually
get rid of that now.

119
00:09:10.300 --> 00:09:11.490
There we go.

120
00:09:11.490 --> 00:09:18.010
So if I do console.log argv, and
then we run this, see if this works.

121
00:09:18.010 --> 00:09:20.495
[LAUGH] Yeah, and one more thing, ts node.

122
00:09:22.063 --> 00:09:24.264
So do mpx ts node.

123
00:09:24.264 --> 00:09:24.909
There we go.

124
00:09:24.909 --> 00:09:26.960
That's what we're looking for, cool.

125
00:09:26.960 --> 00:09:28.570
All right, so go back here.

126
00:09:30.038 --> 00:09:33.000
That's why it's not working.

127
00:09:34.620 --> 00:09:36.359
Got to tell it to execute the main.

128
00:09:42.237 --> 00:09:43.156
There we go.

129
00:09:43.156 --> 00:09:46.405
So now we can see that I have
a command line of some sort and

130
00:09:46.405 --> 00:09:47.936
I'm getting stuff back.

131
00:09:47.936 --> 00:09:52.239
So now if I was to do like, name foo,

132
00:09:52.239 --> 00:09:56.406
you'll see that I have name here.

133
00:09:56.406 --> 00:10:02.270
So now what I need to do is just start
getting the args I need off of it.

134
00:10:02.270 --> 00:10:07.567
So iin this case if I do argv, and

135
00:10:07.567 --> 00:10:16.546
then just grab name, Argv.

136
00:10:20.673 --> 00:10:24.569
Name, Like this.

137
00:10:24.569 --> 00:10:25.917
Then we run this.

138
00:10:25.917 --> 00:10:29.294
Look at what I get, foo.

139
00:10:29.294 --> 00:10:32.758
Now again,
this is a very simple CLI tool [LAUGH] I'm

140
00:10:32.758 --> 00:10:36.635
not trying to show you guys
the best way to make a CLI tool.

141
00:10:36.635 --> 00:10:41.600
What I am trying to show you is
how to just get started with one.

142
00:10:41.600 --> 00:10:48.380
And so if we do name foo we
could do service type front end.

143
00:10:48.380 --> 00:10:57.420
And so now we can even do,
Service name foo and stuff like that.

144
00:10:57.420 --> 00:11:02.960
Now, is this where we wanna
put these parameters though?

145
00:11:02.960 --> 00:11:05.290
This is supposed to go in our build.json.

146
00:11:05.290 --> 00:11:09.821
So what is the parameter we need
to give to our actual CLI tool so

147
00:11:09.821 --> 00:11:12.270
it can get those values?

148
00:11:12.270 --> 00:11:15.132
What do you think we need
to pass to our CLI tool so

149
00:11:15.132 --> 00:11:17.217
that it can read the build.json?

150
00:11:22.224 --> 00:11:25.440
We need to give it to
the path to the build.json.

151
00:11:25.440 --> 00:11:30.950
So what we need to do is we
actually need to say config.

152
00:11:30.950 --> 00:11:32.618
And then do something like this.

153
00:11:34.500 --> 00:11:39.549
Now this is gonna error because
it's gonna say undefined but

154
00:11:39.549 --> 00:11:45.594
now if I do config, and then I rerun this,
now I can find my build.json.

155
00:11:45.594 --> 00:11:51.829
So now if we talk about needing a CLI
tool that can read a build.json,

156
00:11:51.829 --> 00:11:58.404
the only thing we really need left is
to be able to actually read the file.

157
00:11:58.404 --> 00:12:04.904
And we'll say const build
equals argv config.

158
00:12:10.557 --> 00:12:12.897
I guess it's just readSync now.

159
00:12:12.897 --> 00:12:16.447
Nope, readFileSync, there she is.

160
00:12:16.447 --> 00:12:22.422
So then we'll do readFileSync, Build path.

161
00:12:24.103 --> 00:12:26.440
And we should get back a buffer.

162
00:12:26.440 --> 00:12:30.209
So we'll say const
configuration equals this.

163
00:12:31.774 --> 00:12:35.466
And then if I do
console.log configuration,

164
00:12:35.466 --> 00:12:38.312
I believe we'll just get a buffer.

165
00:12:38.312 --> 00:12:41.873
We won't actually get what we need,
but that's okay.

166
00:12:41.873 --> 00:12:47.397
As string, Implicitly, any,

167
00:12:50.344 --> 00:12:54.556
Shut up, Build.

168
00:13:07.305 --> 00:13:10.180
I need to figure this out,
just give me a second.

169
00:13:10.180 --> 00:13:13.695
Not entirely sure why it's giving me this.

170
00:13:13.695 --> 00:13:14.773
So let's do this.

171
00:13:14.773 --> 00:13:17.772
Let's read the docs really quickly.

172
00:13:25.095 --> 00:13:28.096
I could just do this too,
so ignore statement.

173
00:13:49.895 --> 00:13:53.346
Sorry guys,
just give me one second for a block.

174
00:13:55.428 --> 00:13:56.180
No check.

175
00:13:56.180 --> 00:13:57.260
Got it.

176
00:13:59.414 --> 00:14:04.056
The reason why this is complaining
is is because I guess Yargs isn't

177
00:14:04.056 --> 00:14:06.750
really comfortable with TypeScript.

178
00:14:06.750 --> 00:14:11.400
So we're just going to no check this
part because we know it's there.

179
00:14:11.400 --> 00:14:14.320
But we don't want it
to freak out about it.

180
00:14:14.320 --> 00:14:18.162
Yes, no check comment is top of the line
file, disable type checking for that file.

181
00:14:23.070 --> 00:14:23.630
There we go.

182
00:14:23.630 --> 00:14:25.740
Yeah, there, that's fine for now.

183
00:14:25.740 --> 00:14:34.130
Cool, so now, if I do this,
We get an invalid arg type.

184
00:14:35.720 --> 00:14:38.150
So, let's take a look and
see what we've got here.

185
00:14:38.150 --> 00:14:42.400
Console.log, buildPath.

186
00:14:42.400 --> 00:14:43.921
And we'll get rid of this.

187
00:14:43.921 --> 00:14:46.633
Oops, and then we'll write this.

188
00:14:59.058 --> 00:15:01.000
Now an arg type, let's try this.

189
00:15:01.000 --> 00:15:02.660
Let's go to here.

190
00:15:04.160 --> 00:15:07.630
Comment that out,
let's see what this says.

191
00:15:08.850 --> 00:15:11.299
That would be why.

192
00:15:11.299 --> 00:15:15.320
So why are we not, because it's config
&gt;&gt; It's config, not build, yeah.

193
00:15:16.930 --> 00:15:20.827
&gt;&gt; Conventions are good to stick with.

194
00:15:20.827 --> 00:15:24.620
[LAUGH]
&gt;&gt; Should make that a rule.

195
00:15:24.620 --> 00:15:27.569
&gt;&gt; What's that?
&gt;&gt; [SOUND] [LAUGH]

196
00:15:27.569 --> 00:15:28.447
&gt;&gt; You got me!

197
00:15:28.447 --> 00:15:32.310
[LAUGH] So let's see if this loads now.

198
00:15:34.250 --> 00:15:34.930
There we go.

199
00:15:34.930 --> 00:15:36.540
So we should get a buffer out of this.

200
00:15:36.540 --> 00:15:37.250
Good call, good call.

201
00:15:37.250 --> 00:15:39.442
Thank you for the help on that one.

202
00:15:39.442 --> 00:15:44.785
[LAUGH] Bam,

203
00:15:44.785 --> 00:15:48.100
so what we wanna do now is is
we just wanna add to this and

204
00:15:48.100 --> 00:15:52.540
we simply wanna make sure it
knows that the encoding it needs.

205
00:15:52.540 --> 00:15:57.063
And the best way to do that
is just to do encoding and

206
00:15:57.063 --> 00:16:02.150
then I believe it's just UTF8,
if I'm not mistaken.

207
00:16:05.196 --> 00:16:07.000
Bam, cool.

208
00:16:07.000 --> 00:16:09.490
So, what have we got now?

209
00:16:09.490 --> 00:16:15.642
Now, we've got a CLI tool
that can read build.json.

210
00:16:15.642 --> 00:16:16.519
Not only that,

211
00:16:16.519 --> 00:16:20.780
it can have a service name and a service
type that we can give it if we need to.

212
00:16:20.780 --> 00:16:25.286
So we have successfully
completed this part.

213
00:16:27.922 --> 00:16:29.615
That was not a green I was expecting.

214
00:16:29.615 --> 00:16:32.800
[LAUGH] There we go,
that's a better green.

215
00:16:32.800 --> 00:16:35.160
So we've successfully completed this part.

216
00:16:35.160 --> 00:16:38.410
We now have the CLI tool being
able to load in the build.json.

217
00:16:38.410 --> 00:16:44.977
And if we wanted to,
we could even do json.parse and

218
00:16:44.977 --> 00:16:50.513
configuration, and then do as BuildJSON.

219
00:16:53.190 --> 00:16:58.555
And then we can say
const configurationData

220
00:16:58.555 --> 00:17:03.633
like stuff and then configurationData.

221
00:17:07.042 --> 00:17:09.139
If I can spell configuration properly.

222
00:17:13.976 --> 00:17:19.280
Bam and now we have it in a parsable
format that we can easily use.

223
00:17:19.280 --> 00:17:22.010
So now I should just be able to do dot and
there it is.

224
00:17:22.010 --> 00:17:25.691
There's my service name and
so forth and so on.

