WEBVTT

1
00:00:00.050 --> 00:00:01.150
So we know that we have a bucket.

2
00:00:02.350 --> 00:00:04.950
So let's go ahead and grab that bucket.

3
00:00:04.950 --> 00:00:06.800
And like I said, just copy pasta.

4
00:00:07.850 --> 00:00:08.440
Pretty simple.

5
00:00:08.440 --> 00:00:11.245
We're gonna paste this in.

6
00:00:11.245 --> 00:00:13.280
Then we're gonna start editing it.

7
00:00:13.280 --> 00:00:16.957
So we're gonna say, okay, well,

8
00:00:16.957 --> 00:00:22.973
we know that we wanna create an s3 bucket,
sorry AWS s3.

9
00:00:22.973 --> 00:00:29.360
And then what we're gonna do is is we're
gonna import AWS from Pulumi AWS, right?

10
00:00:29.360 --> 00:00:33.483
And then now that we've got that imported,
I don't know why that's doing that,

11
00:00:33.483 --> 00:00:35.680
we can start customizing it a bit, right?

12
00:00:35.680 --> 00:00:39.630
This is where our opinionation
start to really play, right?

13
00:00:39.630 --> 00:00:43.183
So because we have a component
that we are now creating,

14
00:00:43.183 --> 00:00:46.067
technically we can give it options, right?

15
00:00:46.067 --> 00:00:49.196
And one of the first options,
we're gonna give it,

16
00:00:49.196 --> 00:00:52.870
is we're gonna give it a name,
a name of the bucket.

17
00:00:52.870 --> 00:00:55.430
However, we're not gonna do it here.

18
00:00:55.430 --> 00:00:57.780
And you might be like, well, why?

19
00:00:57.780 --> 00:00:59.760
It's literally right there?

20
00:00:59.760 --> 00:01:06.190
Because we talked about using
a standardized simple interface.

21
00:01:06.190 --> 00:01:10.010
So we're literally going
to create an interface.

22
00:01:10.010 --> 00:01:15.146
We're gonna say type FM bucket,
and then we're going to

23
00:01:15.146 --> 00:01:20.080
create a type for
that resource essentially, right?

24
00:01:20.080 --> 00:01:23.283
And so, and you can say like options if
you wanted to or something like that,

25
00:01:23.283 --> 00:01:24.950
I guess args might be a better one here.

26
00:01:24.950 --> 00:01:29.133
But the main point is,
is that we're going to create and

27
00:01:29.133 --> 00:01:32.882
use this as what is now going
to be known as our DSL.

28
00:01:32.882 --> 00:01:37.660
All right, this is going to be
our domain specific language for

29
00:01:37.660 --> 00:01:42.457
creating buckets so
that developers never, ever touch this.

30
00:01:42.457 --> 00:01:43.590
No, never again.

31
00:01:43.590 --> 00:01:45.130
Sorry, no, never again.

32
00:01:45.130 --> 00:01:47.160
So what do we need, right?

33
00:01:47.160 --> 00:01:54.139
Well, we know that we need a name,
so let's give it a name, right?

34
00:01:54.139 --> 00:01:58.706
So string, but maybe there's some other
stuff there that could be interesting,

35
00:01:58.706 --> 00:02:01.140
maybe like product, right?

36
00:02:01.140 --> 00:02:05.031
Where we can say all right,
nope, sorry, not production,

37
00:02:05.031 --> 00:02:09.837
product where we can say like, okay,
what we'll actually do is we'll use

38
00:02:09.837 --> 00:02:14.030
this naming convention where
the product is first, right?

39
00:02:14.030 --> 00:02:15.730
And then the name is second.

40
00:02:15.730 --> 00:02:20.238
So that when we do other things we know
okay, well, this is the product, right?

41
00:02:20.238 --> 00:02:22.130
And then the name under that product.

42
00:02:22.130 --> 00:02:25.325
And if we've wanted to if we
really said like, okay, well,

43
00:02:25.325 --> 00:02:28.190
buckets are always attached to services.

44
00:02:28.190 --> 00:02:32.567
Then we could also say, service,
if we wanted to, and what's great about

45
00:02:32.567 --> 00:02:37.361
typescript is if we had a different type,
say for example, we said that not only do

46
00:02:37.361 --> 00:02:41.830
we have an FM bucket, but maybe we have
like an FM, something else, right?

47
00:02:41.830 --> 00:02:44.160
We could just say FM service.

48
00:02:44.160 --> 00:02:48.915
And now because it's typed,
we have complete control over that domain

49
00:02:48.915 --> 00:02:53.520
specific language and
what developers are using, right?

50
00:02:53.520 --> 00:02:56.952
So they literally could just say,
here's my service,

51
00:02:56.952 --> 00:02:59.077
give this bucket to this service.

52
00:02:59.077 --> 00:03:02.817
For now we're just gonna use name and I'll
actually go with the product one because I

53
00:03:02.817 --> 00:03:04.514
really liked that as an example here.

54
00:03:04.514 --> 00:03:08.618
So then what we're going to do is,
we're going to go here and

55
00:03:08.618 --> 00:03:11.750
we're just gonna change this to args.

56
00:03:11.750 --> 00:03:14.680
And then we'll say FM
bucket args like that.

57
00:03:16.470 --> 00:03:20.970
These options are actually Pulumi options.

58
00:03:20.970 --> 00:03:23.673
If we look at one of the buckets here,

59
00:03:23.673 --> 00:03:28.838
you're gonna notice that it says
under the definition of it, right?

60
00:03:28.838 --> 00:03:32.790
Which we're looking at here, you're going
to notice that it actually has ops with

61
00:03:32.790 --> 00:03:36.300
a question mark, and then it says
component or custom resource options.

62
00:03:37.660 --> 00:03:42.960
This variable is passed
through every component.

63
00:03:42.960 --> 00:03:47.955
The reason for that is because these
are the generic options in Pulumi, that

64
00:03:47.955 --> 00:03:53.530
make it so that you can depend on things,
you can make things parent of things.

65
00:03:53.530 --> 00:03:58.088
So it's always good to have these options
available to you, because you can do

66
00:03:58.088 --> 00:04:02.992
hierarchical changes if you need to, where
you wanna say, this component actually

67
00:04:02.992 --> 00:04:08.200
belongs to this parent, or so forth and
so on, we'll show you that in a second.

68
00:04:08.200 --> 00:04:10.159
But for now, we just wanna type it.

69
00:04:10.159 --> 00:04:12.090
We just wanna make sure that
it has some type of type.

70
00:04:12.090 --> 00:04:16.008
So I'm just gonna say
Pulumi.customresource options and

71
00:04:16.008 --> 00:04:19.620
that will just make sure that
we have that to use there.

72
00:04:21.240 --> 00:04:25.764
Now that we've got this, we can
actually start talking about how we're

73
00:04:25.764 --> 00:04:30.040
going to standardize,
how we create buckets a bit further.

74
00:04:30.040 --> 00:04:32.960
And the next one is going to be
the naming convention, right?

75
00:04:34.160 --> 00:04:36.162
What's great about having this in code is,

76
00:04:36.162 --> 00:04:40.630
is now I can literally create a convention
right here where I can say you know what?

77
00:04:40.630 --> 00:04:43.649
Let's say that this is the name actually.

78
00:04:43.649 --> 00:04:50.352
And what we're gonna do is
is we're going to say args,

79
00:04:50.352 --> 00:04:57.250
sorry, args.name and
before that, args.product.

80
00:04:57.250 --> 00:05:00.530
There's our naming convention, right?

81
00:05:00.530 --> 00:05:03.841
And then what I can do is,
is instead of having this is, well,

82
00:05:03.841 --> 00:05:08.239
I guess it's gonna use that anyways, but
basically anywhere where name is used,

83
00:05:08.239 --> 00:05:12.090
I can now use that as a standardized name,
for any of my other services.

84
00:05:12.090 --> 00:05:15.548
And again, remember because this is code,

85
00:05:15.548 --> 00:05:20.080
I can make a function that
says generate bucket name.

86
00:05:20.080 --> 00:05:22.993
And then I can do things like okay,

87
00:05:22.993 --> 00:05:28.420
like exactly like we did before,
name, product, right?

88
00:05:28.420 --> 00:05:31.824
And then if I wanted to,
I could then come back down here and

89
00:05:31.824 --> 00:05:35.508
just say, all right, well,
let's even standardize that and

90
00:05:35.508 --> 00:05:39.633
let's say generate bucket name,
args name, args product, right?

91
00:05:39.633 --> 00:05:42.180
And then you could test that.

92
00:05:42.180 --> 00:05:45.679
Now we have testing in our automation so
that we can confirm that things

93
00:05:45.679 --> 00:05:49.110
are getting named the way
that they should be, right?

94
00:05:49.110 --> 00:05:52.381
Again, you can do a lot of this stuff
in terraform or other things, but

95
00:05:52.381 --> 00:05:56.098
when we look at what you can actually do
with a programming language when it comes

96
00:05:56.098 --> 00:05:58.730
to automation, it's way more powerful.

97
00:05:58.730 --> 00:06:04.269
So yeah, so we're gonna create our naming
convention here, product name, right?

98
00:06:04.269 --> 00:06:07.720
And then we're gonna go down here.

99
00:06:07.720 --> 00:06:13.212
And what we're gonna do is we're gonna
actually make a small change to this.

100
00:06:13.212 --> 00:06:17.415
And we're gonna say that
this is just args.name.

101
00:06:17.415 --> 00:06:23.930
And you might say, well, why are we
following a standardization here?

102
00:06:23.930 --> 00:06:27.950
But we're not doing it here, right?

103
00:06:27.950 --> 00:06:30.273
So whenever you create a Pulumi resource,

104
00:06:30.273 --> 00:06:33.840
there's a couple of identifiers
that are created with it.

105
00:06:33.840 --> 00:06:41.570
The main two are the URL or URN of
the resource and Amazon or whatever.

106
00:06:41.570 --> 00:06:45.964
But its also got its own URN,
which is called a Pulumi URN.

107
00:06:45.964 --> 00:06:48.994
If I go to back here,
and I do Pulumi stack

108
00:07:00.507 --> 00:07:02.399
There's a way of showing resources,

109
00:07:02.399 --> 00:07:05.720
I just can't remember exactly
what the command is, that's you.

110
00:07:07.740 --> 00:07:09.700
There's no resources, okay, that's why.

111
00:07:09.700 --> 00:07:14.576
Let me go to something that actually has
resources, so Pulumi Github for example,

112
00:07:14.576 --> 00:07:17.514
and then we'll go here and
we'll say, secrets.

113
00:07:20.933 --> 00:07:23.724
Pulumi stack-U.

114
00:07:23.724 --> 00:07:27.524
So when I do this,
what we're gonna see is that,

115
00:07:27.524 --> 00:07:31.808
it's gonna output a ton of
what we see as URNs, right?

116
00:07:31.808 --> 00:07:36.392
And that's actually what
we're kind of seeing is being

117
00:07:36.392 --> 00:07:40.401
started here if we go back to our bucket,
right?

118
00:07:40.401 --> 00:07:46.132
Package, index, FM bucket and if we go
here you'll see URN pulling me did it.

119
00:07:46.132 --> 00:07:51.012
So it's totally up to you but
when we create the component it

120
00:07:51.012 --> 00:07:55.989
gets a standardized name meaning
technically inside of that

121
00:07:55.989 --> 00:08:01.180
component you can either reuse
the same name if you want.

122
00:08:01.180 --> 00:08:04.187
But, the reason why I don't do this is,

123
00:08:04.187 --> 00:08:09.470
in the off chance in the future
say you need two buckets, right?

124
00:08:09.470 --> 00:08:12.319
And you use the same
name here as you do here,

125
00:08:12.319 --> 00:08:15.770
you're gonna have a conflict later, right?

126
00:08:15.770 --> 00:08:19.818
So, one of the ways I'd avoid that is
I say that the component is what has

127
00:08:19.818 --> 00:08:22.060
the standardized name.

128
00:08:22.060 --> 00:08:27.470
And then anything else kind of just uses
the main arg name passed down to it.

129
00:08:27.470 --> 00:08:31.850
But we still use the standardized name
in specific places where we want to.

130
00:08:31.850 --> 00:08:36.057
The nice thing about that standardized
name is that it's like a fully qualified

131
00:08:36.057 --> 00:08:37.460
domain.

132
00:08:37.460 --> 00:08:42.623
If there's a place in our automation where
we want that fully qualified domain say,

133
00:08:42.623 --> 00:08:44.530
you create a bucket.

134
00:08:44.530 --> 00:08:47.660
Do you want your bucket to
just be called food bar?

135
00:08:47.660 --> 00:08:50.506
Or would you rather at least be
called front end masters food bar,

136
00:08:50.506 --> 00:08:52.080
[LAUGH] you know what I mean?

137
00:08:52.080 --> 00:08:56.812
And that's what I mean by you can choose
when you want to lean on this automation

138
00:08:56.812 --> 00:08:59.690
or this standardization and
when you don't.

139
00:08:59.690 --> 00:09:03.174
Another, solution here would just be to
find a completely different name to call

140
00:09:03.174 --> 00:09:06.800
the bucket, for now, it's fine,
we'll leave it the way it is.

141
00:09:06.800 --> 00:09:11.760
What we're gonna do is, we're going to
standardize the bucket name in Amazon

142
00:09:11.760 --> 00:09:15.680
though, that is something we
definitely want to do, right?

143
00:09:15.680 --> 00:09:21.228
And so, if we go, I believe,
if I'm not mistaken,

144
00:09:21.228 --> 00:09:24.770
I believe it's a bucket, yeah.

145
00:09:24.770 --> 00:09:27.990
A bucket,
I don't know why they don't just use name.

146
00:09:27.990 --> 00:09:32.118
But if we wanna actually give
the bucket a specific name so

147
00:09:32.118 --> 00:09:37.881
that we make sure we're giving it that
standardized name when it gets created,

148
00:09:37.881 --> 00:09:42.714
then we simply pass that standardized
name to the bucket, right?

149
00:09:42.714 --> 00:09:47.930
And so again, in Pulumi,
we'll just see args.name as the resource.

150
00:09:47.930 --> 00:09:49.985
But in Amazon, when it gets created,

151
00:09:49.985 --> 00:09:53.040
we'll actually get the full resource name,
right?

152
00:09:53.040 --> 00:09:55.720
And so
if we wanted to make this a little easier,

153
00:09:55.720 --> 00:09:58.670
we could say that this is
the resource name, right?

154
00:09:58.670 --> 00:10:01.940
And then this is just
the normal name itself.

155
00:10:03.660 --> 00:10:06.305
And here's another nice
little fun thing as well,

156
00:10:06.305 --> 00:10:09.700
is you'll notice that we
have environment here.

157
00:10:09.700 --> 00:10:11.950
We can even standardize environments,
right?

158
00:10:11.950 --> 00:10:18.150
Because we're using Pulumi, we could
simply say const stack equals getStack.

159
00:10:18.150 --> 00:10:24.693
Stack, yeah, getStack.

160
00:10:24.693 --> 00:10:27.601
And what happens now is
Pulumi will go out and

161
00:10:27.601 --> 00:10:31.686
figure out the name of your stack,
and then once it does that,

162
00:10:31.686 --> 00:10:36.360
it will bring that as available as
an option or as a value to you.

163
00:10:36.360 --> 00:10:41.851
So if I really want it, to get super
standardized with this, I can even go

164
00:10:41.851 --> 00:10:48.260
further and I can say you know what I want
my buckets to actually their names, right?

165
00:10:48.260 --> 00:10:51.004
To have their own convention as well,
right?

166
00:10:51.004 --> 00:10:54.304
Well, where I can say like
const bucket equals, and

167
00:10:54.304 --> 00:10:59.029
what we're gonna do is we're literally
gonna take the resource name, and

168
00:10:59.029 --> 00:11:01.970
we're just gonna append
the stack at the end.

169
00:11:03.320 --> 00:11:08.241
So that now when we
create buckets in Amazon,

170
00:11:08.241 --> 00:11:15.630
we simply use that new standard,
and we can have that there as well.

171
00:11:16.870 --> 00:11:20.596
Oops, let me call this bucket name.

172
00:11:28.304 --> 00:11:32.590
And to make this even simpler,
we could also do this.

173
00:11:32.590 --> 00:11:36.380
Put the stack here, and instead of
having this be the bucket name, well,

174
00:11:36.380 --> 00:11:39.882
the name in this case is probably
fine because we want them to match.

175
00:11:39.882 --> 00:11:42.836
Another thing you probably could
do is just get rid of that,

176
00:11:42.836 --> 00:11:45.530
don't really need name twice or
hitting their one.

177
00:11:45.530 --> 00:11:46.960
So, it's up to you.

178
00:11:46.960 --> 00:11:50.787
But having the tag for the environment
at least would also be super nice,

179
00:11:50.787 --> 00:11:54.240
if you're feeling like search to tags and
stuff like that.

180
00:11:54.240 --> 00:11:55.190
Again, it's totally up to you.

181
00:11:55.190 --> 00:11:59.485
If you find yourself in a scenario where
you just wanna use the resource name,

182
00:11:59.485 --> 00:12:00.423
you can do that.

183
00:12:00.423 --> 00:12:04.054
If you wanna use the bucket name
with the resource name in the stack,

184
00:12:04.054 --> 00:12:05.401
you can do that, right?

185
00:12:05.401 --> 00:12:07.900
But the main point of what I'm
showing you is just simply,

186
00:12:07.900 --> 00:12:10.924
these are the steps to automation
that we're trying to take, right?

187
00:12:10.924 --> 00:12:15.823
So now that we've created this very simple
bucket, the next thing we're gonna do is

188
00:12:15.823 --> 00:12:19.553
we're gonna actually add a few
more opinions about it, right?

189
00:12:19.553 --> 00:12:21.330
So what are those gonna be?

190
00:12:21.330 --> 00:12:25.671
Well, first off, we're gonna wanna make
sure that we have this bucket completely

191
00:12:25.671 --> 00:12:28.102
locked off from the rest of the world,
right?

192
00:12:28.102 --> 00:12:31.953
And so to do that, we actually wanna add
some bucket policies, public access,

193
00:12:31.953 --> 00:12:32.860
here we go.

194
00:12:32.860 --> 00:12:33.530
Yeah.

195
00:12:33.530 --> 00:12:36.117
So what is one thing that you normally

196
00:12:36.117 --> 00:12:39.405
wanna make sure is on
when you create a bucket?

197
00:12:39.405 --> 00:12:42.800
[LAUGH] I'll give you a hint,
it's in blue.

198
00:12:42.800 --> 00:12:47.130
You wanna block public
access at all costs, right?

199
00:12:47.130 --> 00:12:51.121
And you know what would be even better if
you could walk into your SEC ops team and

200
00:12:51.121 --> 00:12:54.520
tell them that that's how
it works by default, right?

201
00:12:54.520 --> 00:12:58.130
This is the power of DevOps and
automation.

202
00:12:58.130 --> 00:13:03.230
So what we're gonna do is is we're
literally gonna solve that problem simply

203
00:13:03.230 --> 00:13:08.420
by saying all right, well tell you what,
we will add a policy to every bucket.

204
00:13:09.493 --> 00:13:13.321
And we will just make sure that
whenever we create a bucket,

205
00:13:13.321 --> 00:13:16.550
we also have that access block there too,
right?

206
00:13:17.640 --> 00:13:22.630
And so we can do this, or
we can say args.name again, right?

207
00:13:22.630 --> 00:13:23.520
And here's what's neat.

208
00:13:24.650 --> 00:13:26.345
We're using variables, right?

209
00:13:26.345 --> 00:13:29.500
Pulumi knows about its own types and
things like that.

210
00:13:29.500 --> 00:13:34.128
So we can even just now use our
bucket just like we would with any

211
00:13:34.128 --> 00:13:39.010
other automation variable and
then get the ID from it, right?

212
00:13:39.010 --> 00:13:43.282
And so you'll see here that
now our public access block,

213
00:13:43.282 --> 00:13:47.821
this block is set up to our bucket,
and we block public ACLs,

214
00:13:47.821 --> 00:13:52.116
public policy, ignore and
so forth and so on, right?

215
00:13:52.116 --> 00:13:55.740
This is a little closer to like
a standardized bucket, right?

216
00:13:55.740 --> 00:13:58.637
We are only telling it the name and

217
00:13:58.637 --> 00:14:03.220
product, and out of the box,
we get a bucket.

218
00:14:03.220 --> 00:14:04.423
It's ACL set to private,

219
00:14:04.423 --> 00:14:07.663
as well as making sure that any public
access blocks are also removed.

