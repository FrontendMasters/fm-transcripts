WEBVTT

1
00:00:00.032 --> 00:00:04.672
So when we talk about like, okay, cool,
I just showed you a whole bunch of code we

2
00:00:04.672 --> 00:00:07.968
programmed for a little bit and
we looked at automation.

3
00:00:07.968 --> 00:00:10.127
What is the point?

4
00:00:10.127 --> 00:00:14.843
The point is, we need to create tools and

5
00:00:14.843 --> 00:00:22.216
functionality that help us do
what we need to quickly, right?

6
00:00:22.216 --> 00:00:24.357
Why are we using Pulumi?

7
00:00:24.357 --> 00:00:25.464
Because it's cool, no.

8
00:00:25.464 --> 00:00:28.421
I mean, it is cool, but no,
that's not why we are using it.

9
00:00:28.421 --> 00:00:29.477
We are using it so

10
00:00:29.477 --> 00:00:35.068
that we can lean on the language to create
well-defined interfaces for our resources.

11
00:00:35.068 --> 00:00:39.370
We're leaning on it so that we can
then also create those resources in

12
00:00:39.370 --> 00:00:43.153
a language that gives us a lot
of flexibility with for loops,

13
00:00:43.153 --> 00:00:47.035
or composing, and things like that,
abstraction, right?

14
00:00:47.035 --> 00:00:51.475
And another reason why we're doing
this is we have that reusability with

15
00:00:51.475 --> 00:00:56.422
components where I can essentially say,
all right, well, I have a standard for

16
00:00:56.422 --> 00:00:58.199
how frontends should look.

17
00:00:58.199 --> 00:01:03.076
And anytime I change that standard,
every frontend should get that update.

18
00:01:03.076 --> 00:01:06.510
It's not about, this frontend should
get it or, this frontend shouldn't.

19
00:01:06.510 --> 00:01:11.636
It's about a standardization and
saying, all right, well,

20
00:01:11.636 --> 00:01:16.663
all right, I'm a developer,
again, I need a new frontend,

21
00:01:16.663 --> 00:01:22.095
this is the way we do it, right,
not you go and create it yourself.

22
00:01:22.095 --> 00:01:25.054
And yeah, that's really, again,

23
00:01:25.054 --> 00:01:30.023
from a service directory
perspective kind of how this looks.

24
00:01:30.023 --> 00:01:34.638
If we wanted to get more in depth
into this, what would we do?

25
00:01:34.638 --> 00:01:37.203
We just create more resources and
services, right?

26
00:01:37.203 --> 00:01:39.702
So we've solved for frontend, right?

27
00:01:39.702 --> 00:01:41.961
How would we solve for backend?

28
00:01:41.961 --> 00:01:45.016
New file backend.ts.

29
00:01:45.016 --> 00:01:47.665
How would we solve for gateways?

30
00:01:47.665 --> 00:01:52.562
New file gateway.ts.

31
00:01:52.562 --> 00:01:54.155
You could just keep doing this,

32
00:01:54.155 --> 00:01:57.593
this is a convention that you can
keep leaning on over and over again.

33
00:01:57.593 --> 00:02:00.998
So, that if we go, ooh,
that's the wrong VIM.

34
00:02:00.998 --> 00:02:06.421
If we go to backend, right,
go back to frontend,

35
00:02:06.421 --> 00:02:11.587
we can again just reuse
almost the whole thing,

36
00:02:11.587 --> 00:02:16.382
and then just literally do replace bucket.

37
00:02:16.382 --> 00:02:17.208
Actually, no, sorry.

38
00:02:17.208 --> 00:02:22.297
Replace frontend with backend.

39
00:02:22.297 --> 00:02:27.787
And now we're already taking steps
towards automating our backends as well.

40
00:02:27.787 --> 00:02:33.642
Maybe our backends need buckets,
maybe they need some other things.

41
00:02:33.642 --> 00:02:39.137
So for example, if we wanted to
compare a frontend versus a backend,

42
00:02:39.137 --> 00:02:45.892
right, we said that a frontend needs a
container, right, container of some sort.

43
00:02:45.892 --> 00:02:50.469
So when we talk about automating things,
we really wanna talk about

44
00:02:50.469 --> 00:02:55.530
automating everything as much as
humanly possible, so that the developer

45
00:02:55.530 --> 00:02:59.735
has the right expectations when
they leave this automation.

46
00:02:59.735 --> 00:03:04.280
So in this sense of a backend,
what we would wanna do is we would want

47
00:03:04.280 --> 00:03:08.506
a new resource probably for
maybe an ECR repository, right,

48
00:03:08.506 --> 00:03:12.431
maybe something that we could
put our images in, right?

49
00:03:12.431 --> 00:03:15.396
Now, we talked about how
a frontend has buckets,

50
00:03:15.396 --> 00:03:19.076
well, a backend is gonna have
those same types of resources.

51
00:03:19.076 --> 00:03:22.238
And so again,
just like we did with the bucket,

52
00:03:22.238 --> 00:03:26.744
we can then take all this even if
we wanted to, go to ECR repository,

53
00:03:26.744 --> 00:03:31.908
paste it, and then just get rid of all
the stuff that's not related, right?

54
00:03:31.908 --> 00:03:34.457
So let get rid of all this.

55
00:03:36.568 --> 00:03:38.116
There we go.

56
00:03:38.116 --> 00:03:43.667
And then we can even say ecrName, which is
interesting because if you think about it,

57
00:03:43.667 --> 00:03:48.370
we're literally just reusing the same
component for the most part, but

58
00:03:48.370 --> 00:03:50.704
changing some of the names with it.

59
00:03:50.704 --> 00:03:58.784
And so
we'll change bucket to EcrRepository.

60
00:03:58.784 --> 00:04:03.640
Or if we wanted to generalize this, so
we weren't vendor locked in, we could

61
00:04:03.640 --> 00:04:08.663
actually just say, DockerImageRepo,
or DockerRepo or something like that.

62
00:04:08.663 --> 00:04:11.140
And this is something I would suggest,

63
00:04:11.140 --> 00:04:14.968
don't name things based off of
the cloud provider you have,

64
00:04:14.968 --> 00:04:20.014
mostly because you're kind of locking
yourself in without even realizing it.

65
00:04:20.014 --> 00:04:23.395
If you try and
keep things named simply what they are,

66
00:04:23.395 --> 00:04:26.864
it's easier to move those
things around especially.

67
00:04:26.864 --> 00:04:31.244
And what I mean by that is say, for
example, we're like, all right,

68
00:04:31.244 --> 00:04:34.081
you know what,
we're gonna use ECR for now.

69
00:04:34.081 --> 00:04:38.950
So let me just go grab the ECR
thing cool though here.

70
00:04:45.628 --> 00:04:49.620
UCR and then repository.

71
00:04:52.391 --> 00:04:55.899
Copy this.

72
00:04:55.899 --> 00:05:01.167
And then now it's up to you,
again, with anything,

73
00:05:01.167 --> 00:05:06.216
you can put components and
components if you want.

74
00:05:06.216 --> 00:05:09.707
For now, I think this is
the only thing we really need for

75
00:05:09.707 --> 00:05:14.626
the ECR repository anyways, so I'm just
gonna use this main component here.

76
00:05:14.626 --> 00:05:22.518
And if we do import from
Pulumi AWS like such, right?

77
00:05:22.518 --> 00:05:23.348
I'll do ECR.

78
00:05:25.531 --> 00:05:29.968
Now, we have the ability to
create our ECR repository.

79
00:05:29.968 --> 00:05:34.915
So get rid of this,
again we already know we've got name, so

80
00:05:34.915 --> 00:05:38.990
we just do our exact name
here to scan on push true.

81
00:05:38.990 --> 00:05:41.227
Maybe we don't want to have scan and
push enable,

82
00:05:41.227 --> 00:05:44.441
maybe we don't wanna have to pay for
that extra or something like that.

83
00:05:44.441 --> 00:05:47.540
And maybe we wanna have
more optimization or

84
00:05:47.540 --> 00:05:50.986
more choices around our immutability,
right?

85
00:05:50.986 --> 00:05:53.510
This is where we can now lean on the DSL.

86
00:05:53.510 --> 00:05:56.706
Is it immutable, right?

87
00:05:56.706 --> 00:06:00.455
Sure, cool, things like that.

88
00:06:00.455 --> 00:06:02.264
We won't need public, right?

89
00:06:02.264 --> 00:06:04.176
So we can get rid of that.

90
00:06:07.035 --> 00:06:08.435
Yeah, okay, cool.

91
00:06:08.435 --> 00:06:15.363
And so now what we'll do
is we will say Name, yeah,

92
00:06:15.363 --> 00:06:20.531
its name, cool, ecrName like that.

93
00:06:25.128 --> 00:06:28.940
Now, I'm not gonna
actually do this exactly,

94
00:06:28.940 --> 00:06:33.705
can anyone tell me why I wouldn't
wanna put the stack name on

95
00:06:33.705 --> 00:06:38.107
an ECR repository or
basically on a docker image name?

96
00:06:38.107 --> 00:06:42.364
So basically, it's because docker
has the ability to use tags, right?

97
00:06:42.364 --> 00:06:47.486
So if we created the repository like this,
then that means

98
00:06:47.486 --> 00:06:53.663
we'd actually be doing docker
pull my image.dev: latest, right?

99
00:06:53.663 --> 00:06:58.273
And you could do that if you wanted to,
you could totally do that.

100
00:06:58.273 --> 00:07:03.786
A better way of approaching this might
simply just be to do my image and

101
00:07:03.786 --> 00:07:07.790
then dev, right, and
have that as an actual tag.

102
00:07:07.790 --> 00:07:11.496
So that's just something to note here,
and that's actually what I'm gonna

103
00:07:11.496 --> 00:07:15.673
change about this is, sometimes naming
conventions work and sometimes they don't.

104
00:07:15.673 --> 00:07:19.152
Depending on the software
technology you might be using,

105
00:07:19.152 --> 00:07:23.415
they may not suggest it to all be in
the same word or something like that.

106
00:07:23.415 --> 00:07:26.015
And so
being aware of that can just help you,

107
00:07:26.015 --> 00:07:29.405
also making sure you're
using the technology, right?

108
00:07:29.405 --> 00:07:34.351
Because if you did it this way, you'd
have four repositories, or three, or two,

109
00:07:34.351 --> 00:07:37.259
or whatever, for
the same source code, right?

110
00:07:37.259 --> 00:07:41.682
And when you do a docker push, you
really just wanna push to one place and

111
00:07:41.682 --> 00:07:43.315
then pull from one place.

112
00:07:43.315 --> 00:07:44.113
So yeah, so we're gonna do that.

113
00:07:44.113 --> 00:07:47.406
So we're actually gonna
get rid of that one and

114
00:07:47.406 --> 00:07:53.325
we're gonna say resourceName like this and
we don't need stack anymore, right?

115
00:07:53.325 --> 00:07:59.545
So we'll save this, get rid of that,
and I think that's about that.

116
00:07:59.545 --> 00:08:02.586
So now if we go to backend, what do we do?

117
00:08:02.586 --> 00:08:07.827
Well, we just grab our front image repo.

118
00:08:09.766 --> 00:08:13.626
Right, and
we do the same thing we did before.

119
00:08:13.626 --> 00:08:18.941
Name: args.Name.

120
00:08:18.941 --> 00:08:21.629
Product: args.products.

121
00:08:24.420 --> 00:08:28.200
Cool, so now, if I go to index,

122
00:08:28.200 --> 00:08:32.681
and somebody was to say, well, hey,

123
00:08:32.681 --> 00:08:37.442
Eric, not only do I have a frontend, but

124
00:08:37.442 --> 00:08:42.921
I need a backend that
supports that frontend.

125
00:08:46.727 --> 00:08:48.558
Services, and look at this,

126
00:08:48.558 --> 00:08:52.606
do you notice that I'm only
importing services in the main file?

127
00:08:52.606 --> 00:08:56.368
That's purposeful,
because we have a layer of construction or

128
00:08:56.368 --> 00:08:59.791
an order of construction when
we create these resources.

129
00:08:59.791 --> 00:09:05.482
The developers only mess with
the components we create, right?

130
00:09:05.482 --> 00:09:10.699
We mess with the components inside of the
components that they create, all right.

131
00:09:10.699 --> 00:09:14.367
And so that's why here developers
should only need services,

132
00:09:14.367 --> 00:09:17.146
I need a new service of a specific type,
right?

133
00:09:17.146 --> 00:09:20.354
So now if we were to say,
example DevOps course,

134
00:09:20.354 --> 00:09:24.993
what's cool is we can actually use
the same names even if we wanted to.

135
00:09:24.993 --> 00:09:28.368
Now I will say this, if you have resources
that will conflict on some level,

136
00:09:28.368 --> 00:09:30.556
then of course,
you will get that confliction.

137
00:09:30.556 --> 00:09:31.867
So be aware of that.

138
00:09:31.867 --> 00:09:35.493
But if your goal is just to be
able to have the same name for

139
00:09:35.493 --> 00:09:39.904
your backend that matches your frontend,
you could still do that.

140
00:09:39.904 --> 00:09:41.167
So now if we do up.

141
00:09:48.533 --> 00:09:51.073
Okay, what's wrong with this?

142
00:09:51.073 --> 00:09:54.541
There's something wrong with this,
and I've already explained it.

143
00:09:54.541 --> 00:09:56.659
What might be missing here?

144
00:09:58.981 --> 00:10:01.253
Look at the resources and
how they're stacked.

145
00:10:04.702 --> 00:10:06.361
&gt;&gt; Stack things.
&gt;&gt; I miss, what's that?

146
00:10:06.361 --> 00:10:07.132
&gt;&gt; Stack.

147
00:10:07.132 --> 00:10:12.299
&gt;&gt; Yeah, well, not the stack, but
what was the other thing I did to

148
00:10:12.299 --> 00:10:17.295
make sure that they were grouped together,
started with a p?

149
00:10:17.295 --> 00:10:18.775
&gt;&gt; Or the public privacy?

150
00:10:18.775 --> 00:10:19.275
What are you talking about?
&gt;&gt; No.

151
00:10:19.275 --> 00:10:19.792
&gt;&gt; It's like,

152
00:10:19.792 --> 00:10:21.400
what are you talking about?
[LAUGH]

153
00:10:21.400 --> 00:10:22.601
&gt;&gt; Parent.

154
00:10:22.601 --> 00:10:23.899
&gt;&gt; We need this again.

155
00:10:23.899 --> 00:10:25.401
&gt;&gt; I didn't set the parent, so

156
00:10:25.401 --> 00:10:29.818
because I didn't set the parent, this
is what I mean by the JavaScript of it.

157
00:10:29.818 --> 00:10:33.232
JavaScript will just see everything
on the same top level and go, cool.

158
00:10:33.232 --> 00:10:35.625
And if you don't catch that,
and then you hit yes,

159
00:10:35.625 --> 00:10:37.749
you're gonna have to recreate everything.

160
00:10:37.749 --> 00:10:41.710
So yeah, you really wanna catch
how it structures those things so

161
00:10:41.710 --> 00:10:44.022
that you do have that good isolation.

162
00:10:44.022 --> 00:10:48.854
So now if we go back to our backend,

163
00:10:48.854 --> 00:10:53.186
backend, I should see, yep,

164
00:10:53.186 --> 00:10:57.531
there's no parent this here.

165
00:11:04.857 --> 00:11:08.533
Okay, but apparently, it didn't see
that change, that was so weird.

166
00:11:08.533 --> 00:11:14.460
Okay, so we'll go here and
then we'll just say parent this.

167
00:11:14.460 --> 00:11:19.411
And I actually caught it twice,
we didn't do it here either.

168
00:11:19.411 --> 00:11:23.310
So not only did we do it or
we missed it on the top layer,

169
00:11:23.310 --> 00:11:26.803
we also missed it on
the component inside of it.

170
00:11:26.803 --> 00:11:31.424
Now, if we do this, there we go.

171
00:11:31.424 --> 00:11:35.102
So we'll see here that I actually
got rid of a whole frontend,

172
00:11:35.102 --> 00:11:36.669
I don't need it anymore.

173
00:11:36.669 --> 00:11:38.532
So it gets rid of the bucket,

174
00:11:38.532 --> 00:11:42.739
gets rid of the component as well
as the main service component.

175
00:11:42.739 --> 00:11:46.355
And then it also says that, well,

176
00:11:46.355 --> 00:11:52.591
we need to create a backend,
right, and it's gonna have,

177
00:11:52.591 --> 00:11:57.348
what's it called, an ECR repository in it.

178
00:11:57.348 --> 00:12:02.481
Okay, another thing I wanna kinda
point out here is the names.

179
00:12:02.481 --> 00:12:07.134
You'll notice that the DevOps course
example has literally the exact same name

180
00:12:07.134 --> 00:12:08.668
as the frontend, right?

181
00:12:08.668 --> 00:12:12.681
The one we already made,
that one's getting deleted, but

182
00:12:12.681 --> 00:12:15.336
the first one has DevOps core example.

183
00:12:15.336 --> 00:12:20.229
Just a guess,
can anyone tell me why we can have

184
00:12:20.229 --> 00:12:24.622
a backup resource with DevOps example and

185
00:12:24.622 --> 00:12:28.906
a frontend resource for DevOps course?

186
00:12:28.906 --> 00:12:29.659
No guesses?

187
00:12:35.463 --> 00:12:38.484
&gt;&gt; Is it they're different resources?

188
00:12:38.484 --> 00:12:40.163
&gt;&gt; Yep, that's it, you nailed it.

189
00:12:40.163 --> 00:12:45.243
Yeah, components are isolated
to their resource types.

190
00:12:45.243 --> 00:12:49.030
So, what you can do,
just like with Terraform, for example,

191
00:12:49.030 --> 00:12:53.325
is you can have a bunch of different
resources with the exact same name.

192
00:12:53.325 --> 00:12:55.102
And it can spread across, okay,

193
00:12:55.102 --> 00:12:58.719
well, this is the backend for this,
this is the frontend for this,

194
00:12:58.719 --> 00:13:02.606
this is this and this, and you don't
have to uniquely name everything.

195
00:13:02.606 --> 00:13:07.140
The only time you actually have a conflict
is when you have a same resource with

196
00:13:07.140 --> 00:13:08.065
the same name.

197
00:13:08.065 --> 00:13:12.812
So you can lean on naming convention
at a high level to say like, okay,

198
00:13:12.812 --> 00:13:16.190
the backend and
the frontend have the same name but

199
00:13:16.190 --> 00:13:19.663
they use different resources and
stuff like that.

200
00:13:19.663 --> 00:13:20.756
So I hit this.

201
00:13:24.164 --> 00:13:27.402
Another thing to note,
Pulumi always creates first.

202
00:13:27.402 --> 00:13:32.093
It always creates first because creation
normally is the first thing you want

203
00:13:32.093 --> 00:13:34.122
to do and then delete something.

204
00:13:34.122 --> 00:13:36.826
And so what it'll do is it'll
create replacements and

205
00:13:36.826 --> 00:13:38.600
then delete those old ones as well.

206
00:13:38.600 --> 00:13:43.051
However, if it's a circumstance
where it's a conflict,

207
00:13:43.051 --> 00:13:46.345
sometimes you have to
manually delete it and

208
00:13:46.345 --> 00:13:52.414
then run it again because it's trying to
create something that already exists.

209
00:13:52.414 --> 00:13:54.306
So now, if we go here.

210
00:13:56.849 --> 00:13:57.561
What do we have?

211
00:13:57.561 --> 00:14:01.345
Well, okay, I have a frontend, I know
I have a frontend in my automation so

212
00:14:01.345 --> 00:14:02.380
what should I have?

213
00:14:02.380 --> 00:14:04.700
I should have a bucket.

214
00:14:04.700 --> 00:14:08.599
There it is,
devops-course-example-dev, cool.

215
00:14:08.599 --> 00:14:11.634
And then if I go to ECR.

216
00:14:16.750 --> 00:14:19.790
I should have a repository.

217
00:14:19.790 --> 00:14:22.711
And if we go down, keep going.

218
00:14:22.711 --> 00:14:26.990
There it is, devops-course-example.

219
00:14:26.990 --> 00:14:28.832
So what does this mean?

220
00:14:28.832 --> 00:14:30.429
What does this mean?

221
00:14:30.429 --> 00:14:34.283
Well, it means that the developers
literally only had to add a few lines of

222
00:14:34.283 --> 00:14:37.205
code, they can start pushing
up images if they need to,

223
00:14:37.205 --> 00:14:39.467
they can start putting files and buckets.

224
00:14:39.467 --> 00:14:42.186
And it not only can they put files and
buckets,

225
00:14:42.186 --> 00:14:44.225
but the hosting is already set up.

226
00:14:44.225 --> 00:14:46.486
So they can literally
put files in buckets and

227
00:14:46.486 --> 00:14:50.486
immediately access those buckets over
the Internet if they needed to, right?

228
00:14:50.486 --> 00:14:55.178
If I was a backend developer and I wanted
to start pushing up images for docker,

229
00:14:55.178 --> 00:14:58.731
I already have my repository
sitting here ready for me, and

230
00:14:58.731 --> 00:15:01.732
I can easily just start
using my AWS credentials.

231
00:15:01.732 --> 00:15:04.324
This is also something
we do at my company,

232
00:15:04.324 --> 00:15:08.361
where we do everything through AWS
policies and things like that.

233
00:15:08.361 --> 00:15:12.433
So the main ideas is that we
create these resources, and

234
00:15:12.433 --> 00:15:17.115
then we have granular permissions
that are attached to them, so

235
00:15:17.115 --> 00:15:21.548
that if you're a developer,
you can modify but not delete.

236
00:15:21.548 --> 00:15:22.074
You know what I mean?

237
00:15:22.074 --> 00:15:23.977
If you're an admin, then you can delete.

238
00:15:23.977 --> 00:15:28.348
And again, because this is
such a low level thing, right,

239
00:15:28.348 --> 00:15:33.420
if I wanted to make sure that every
backend docker image repo got those

240
00:15:33.420 --> 00:15:38.682
same permissions, I just have to do
it in one place right here, right?

241
00:15:38.682 --> 00:15:43.691
And again, when we talk about scale,
if I have 300 backends and

242
00:15:43.691 --> 00:15:49.059
I wanna make it so that the policy on
all those backends have essentially

243
00:15:49.059 --> 00:15:53.823
the exact same rights, or
permissions, or things like that.

244
00:15:53.823 --> 00:15:58.614
This is the power of using automation like
this and being able to simply make small

245
00:15:58.614 --> 00:16:02.780
little changes and then it goes out
everywhere, you know what I mean?

