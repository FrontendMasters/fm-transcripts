WEBVTT

1
00:00:00.000 --> 00:00:05.781
Now for the last at least,
lecture topic of the day.

2
00:00:05.781 --> 00:00:10.266
And this is actually my personal favorite,
I never thought I would say this.

3
00:00:10.266 --> 00:00:13.310
It's so weird to say that you
love documentation, but I do.

4
00:00:13.310 --> 00:00:17.048
I'm gonna show you guys the power of TDDs.

5
00:00:17.048 --> 00:00:21.500
And if you don't know what a TDD is,
don't worry, I'm gonna explain it to you.

6
00:00:21.500 --> 00:00:25.357
So TDD is basically
a technical design document.

7
00:00:25.357 --> 00:00:30.119
A technical design document is a document
that describes how a piece of software

8
00:00:30.119 --> 00:00:32.756
will be implemented, and how it will work.

9
00:00:32.756 --> 00:00:37.185
Typically includes detailed information
about the system's architecture, modules,

10
00:00:37.185 --> 00:00:40.156
interfaces and data structures
as well as information about

11
00:00:40.156 --> 00:00:42.734
any external dependencies or
required resources.

12
00:00:42.734 --> 00:00:48.058
Spoiler, before I go any further, does
it say anything about using technology?

13
00:00:48.058 --> 00:00:49.112
[LAUGH].

14
00:00:49.112 --> 00:00:49.696
No.

15
00:00:49.696 --> 00:00:55.074
There's a reason for that, again, because
we want to start with the problem and

16
00:00:55.074 --> 00:00:57.697
we want to use the right tool to do that.

17
00:00:57.697 --> 00:00:59.461
Hopefully, the TDD will help us get there.

18
00:00:59.461 --> 00:01:07.146
So as I said, basically, a TDD in summary
is what we want to accomplish, right?

19
00:01:07.146 --> 00:01:10.262
And it's how we're going
to accomplish that and

20
00:01:10.262 --> 00:01:14.670
it's really as hopefully as simple
as terms as you can possibly get.

21
00:01:14.670 --> 00:01:19.283
You want a technical document to be
readable by pretty much anybody in

22
00:01:19.283 --> 00:01:20.244
the company.

23
00:01:20.244 --> 00:01:26.844
And I really believe that writing
documentation itself is like its own art.

24
00:01:26.844 --> 00:01:31.560
You can write technical document, two
different ways, and one will get approved

25
00:01:31.560 --> 00:01:35.747
and one will get thrown out the window and
they can be exact same problem.

26
00:01:35.747 --> 00:01:38.817
But how you write it,
how you portray the issue, or

27
00:01:38.817 --> 00:01:43.688
portray the thing to the person reading
it what's actually majorly important.

28
00:01:43.688 --> 00:01:48.131
And this is why technical
design documents can be so

29
00:01:48.131 --> 00:01:52.575
powerful is because they
can literally be the swing

30
00:01:52.575 --> 00:01:57.138
factors in any kind of
decision making at a company.

31
00:01:57.138 --> 00:02:01.098
And as I said, a technical design
document is used as a guide or

32
00:02:01.098 --> 00:02:05.362
used to guide the development of
a software system and can be used to

33
00:02:05.362 --> 00:02:10.940
communicate the technical aspects of the
system to the stakeholders and developers.

34
00:02:10.940 --> 00:02:19.515
So as I said, it requires you to be
able to convey what you need to.

35
00:02:19.515 --> 00:02:24.445
But what happens in a scenario where
you're trying to sell something so

36
00:02:24.445 --> 00:02:28.400
big, that you literally have
to get business involved?

37
00:02:28.400 --> 00:02:30.721
How do you do that?

38
00:02:30.721 --> 00:02:34.565
Well, technical design document
can still accomplish that for you.

39
00:02:34.565 --> 00:02:35.769
It really can.

40
00:02:35.769 --> 00:02:37.793
You just simply change it so

41
00:02:37.793 --> 00:02:41.761
that the stakeholders also
can get buy in through it.

42
00:02:41.761 --> 00:02:46.739
Putting information in there related
to how this is gonna save us money, or

43
00:02:46.739 --> 00:02:52.191
cut down on this or that it sounds really
silly but, hey, business loves money and

44
00:02:52.191 --> 00:02:56.953
if you can show them how they can save it,
they will buy in very quickly.

45
00:02:56.953 --> 00:02:59.314
And sometimes that's all you need.

46
00:02:59.314 --> 00:03:02.617
Another thing about technical design
documents is it's about who you're

47
00:03:02.617 --> 00:03:03.360
writing it for.

48
00:03:03.360 --> 00:03:07.532
Business also normally doesn't really
care about a thesis on why you think we

49
00:03:07.532 --> 00:03:08.891
should use Kubernetes.

50
00:03:08.891 --> 00:03:12.258
They normally just care more so on,

51
00:03:12.258 --> 00:03:17.098
hey, what are the hot points and
why should I care?

52
00:03:17.098 --> 00:03:23.184
So sometimes the technical design
document can be paragraphs.

53
00:03:23.184 --> 00:03:25.787
Sometimes it can be much larger.

54
00:03:25.787 --> 00:03:31.704
But it is really used to communicate the
technical aspect to other stakeholders or

55
00:03:31.704 --> 00:03:32.656
developer.

56
00:03:35.909 --> 00:03:41.159
So we gonna start with your
first technical design document.

57
00:03:41.159 --> 00:03:46.791
Now, as I've kind of said already with
DevOps from at least my experience,

58
00:03:46.791 --> 00:03:51.465
there's no real standardized
way of writing documentation.

59
00:03:51.465 --> 00:03:54.639
You could try and
get as close as you can but

60
00:03:54.639 --> 00:03:58.825
the reality of it is you're
still gonna be in your own.

61
00:03:58.825 --> 00:04:02.379
We're all just trying to figure out how
to communicate what you're trying to

62
00:04:02.379 --> 00:04:03.537
communicate to people.

63
00:04:03.537 --> 00:04:08.036
The best advice I've ever given was to
focus only on the specific issue or

64
00:04:08.036 --> 00:04:08.709
problem.

65
00:04:08.709 --> 00:04:12.838
I started out writing technical design
documents where I would start going down

66
00:04:12.838 --> 00:04:16.409
a bunch of different other paths and
then I'd have this huge thing and

67
00:04:16.409 --> 00:04:19.762
then I'd hand it over and
then they'd just be like unreadable.

68
00:04:19.762 --> 00:04:20.482
[LAUGH].

69
00:04:20.482 --> 00:04:23.892
So having clear and
concise focus on the problem and

70
00:04:23.892 --> 00:04:27.232
what you're trying to
solve is super important.

71
00:04:27.232 --> 00:04:30.000
Asking yourself the problem,
what is the problem, right?

72
00:04:30.000 --> 00:04:32.180
And tell a story around that.

73
00:04:32.180 --> 00:04:36.555
Set proper boundaries if you need to and
include an out of scope section when you

74
00:04:36.555 --> 00:04:40.615
discover items outside of the current
issues problem resolution path.

75
00:04:40.615 --> 00:04:43.405
And that's really important.

76
00:04:43.405 --> 00:04:49.060
If you are working with something that's
got tons of technology around it and

77
00:04:49.060 --> 00:04:52.980
things like that,
you really have to set your scope.

78
00:04:52.980 --> 00:04:53.693
[LAUGH].

79
00:04:53.693 --> 00:04:57.559
Otherwise you might find yourself in
a scenario where, you have a bunch

80
00:04:57.559 --> 00:05:02.018
of creep as we call it of different issues
starting to come in and things like that.

81
00:05:02.018 --> 00:05:06.068
And if you write a technical document that
basically makes you write three other

82
00:05:06.068 --> 00:05:10.423
technical documents, then you might have
just discovered a whole other problem that

83
00:05:10.423 --> 00:05:13.709
you can't even get to until you
first deal with those other one.

84
00:05:13.709 --> 00:05:17.850
Another thing that's really powerful about
TDD is to apply existing practices to

85
00:05:17.850 --> 00:05:21.584
problem solving with the organization's
already agreed upon, right?

86
00:05:21.584 --> 00:05:25.500
So if you use the three W's strategy
to solve your problem at a company,

87
00:05:25.500 --> 00:05:29.875
then nobody should be able to argue with
you your technical document was written

88
00:05:29.875 --> 00:05:31.852
around those strategies, right?

89
00:05:31.852 --> 00:05:35.750
Again, DevOps is very much
about communication and

90
00:05:35.750 --> 00:05:41.163
getting people interested and
open minded to what you're trying to do.

91
00:05:41.163 --> 00:05:45.694
If you find yourself in a circumstance
where that's difficult, leaning on things

92
00:05:45.694 --> 00:05:49.706
like this, the three W's, or the things
like that can be super helpful to

93
00:05:49.706 --> 00:05:53.807
just state your argument and not really
have to deal with as much pushback.

94
00:05:53.807 --> 00:05:57.623
And this can be anything, it can be,

95
00:05:57.623 --> 00:06:02.213
we decided to do this or
stick within these terms.

96
00:06:02.213 --> 00:06:06.705
It's just making sure that
you're re-establishing what

97
00:06:06.705 --> 00:06:11.841
the company has already agreed upon
to help you with your argument.

98
00:06:13.119 --> 00:06:17.699
So I did do a little bit of
a breakdown for you on what I think

99
00:06:17.699 --> 00:06:22.583
are some helpful things when
writing a technical document.

100
00:06:22.583 --> 00:06:25.036
For starters,
what problem are we trying to solve?

101
00:06:25.036 --> 00:06:26.558
That should always be there.

102
00:06:26.558 --> 00:06:27.759
As a matter of fact,

103
00:06:27.759 --> 00:06:32.232
you literally can write that as your
first header [LAUGH] if you want always.

104
00:06:32.232 --> 00:06:35.624
If you do not know what problem you're
trying to solve, close the laptop and

105
00:06:35.624 --> 00:06:36.207
go outside.

106
00:06:36.207 --> 00:06:38.977
It because you're not ready to
start solving that problem yet.

107
00:06:38.977 --> 00:06:44.287
You really need to be able to know what
you're solving and honestly you can save

108
00:06:44.287 --> 00:06:49.370
yourself a lot of time by just simply
asking yourself that question first.

109
00:06:49.370 --> 00:06:53.856
The other two are gonna be optional,
but I do think they are pretty helpful,

110
00:06:53.856 --> 00:06:57.727
which is asking yourself,
what is the current process, right?

111
00:06:57.727 --> 00:06:59.022
How do we currently do things?

112
00:06:59.022 --> 00:06:59.828
Break that down.

113
00:06:59.828 --> 00:07:00.532
Look at it.

114
00:07:00.532 --> 00:07:01.740
Understand it.

115
00:07:01.740 --> 00:07:05.143
Do you know how we're doing well?

116
00:07:05.143 --> 00:07:07.013
Do you know how we're failing?

117
00:07:07.013 --> 00:07:09.660
Does the company know
how we're doing that?

118
00:07:09.660 --> 00:07:14.815
And to give you a really good example
of this, I was tasked at my company not

119
00:07:14.815 --> 00:07:20.154
too long ago to basically revolutionize
how we do front-end deployments.

120
00:07:20.154 --> 00:07:23.834
Because we don't want to have our
front-ends in containers anymore,

121
00:07:23.834 --> 00:07:25.319
which is in there right now.

122
00:07:25.319 --> 00:07:26.160
So I sat down,

123
00:07:26.160 --> 00:07:30.448
wrote this huge technical document
on how we could get ourselves there.

124
00:07:30.448 --> 00:07:35.407
And about halfway through what is the
current process, I thought of realizing

125
00:07:35.407 --> 00:07:39.767
that there was a lot of organizational
decisions that were made, and

126
00:07:39.767 --> 00:07:41.816
that's why we are where we are.

127
00:07:41.816 --> 00:07:46.301
So, I guess what I need to say is if
there are decisions that have been

128
00:07:46.301 --> 00:07:51.263
made outside of your scope, but
it's related to what you're working on,

129
00:07:51.263 --> 00:07:53.251
those can be very impactful.

130
00:07:53.251 --> 00:07:58.419
In my circumstance I found out that
we actually have a hybrid scenario

131
00:07:58.419 --> 00:08:03.510
where we have back end teams that
work together to create products.

132
00:08:03.510 --> 00:08:06.137
But then front end teams
are completely isolated.

133
00:08:06.137 --> 00:08:08.665
So if you've ever worked
in development and

134
00:08:08.665 --> 00:08:13.244
you think about teams that have their own
silos for every project they work on but

135
00:08:13.244 --> 00:08:15.772
then your back ends are all collaboration,

136
00:08:15.772 --> 00:08:20.178
you have completely different fundamentals
on how things are being built.

137
00:08:20.178 --> 00:08:23.567
You have teams that are focusing on
very small specific problems and

138
00:08:23.567 --> 00:08:27.374
technologies and then they don't care
about sharing those technologies or

139
00:08:27.374 --> 00:08:28.876
anything like that, right?

140
00:08:28.876 --> 00:08:29.915
Versus back end or

141
00:08:29.915 --> 00:08:34.426
other parts of the infrastructure where
those are very well shared, right?

142
00:08:34.426 --> 00:08:35.386
What do you do?

143
00:08:35.386 --> 00:08:36.997
That's up to you.

144
00:08:36.997 --> 00:08:42.042
In my circumstance,
I made the plain argument which is a tough

145
00:08:42.042 --> 00:08:46.609
one to sell which is,
we need somebody there to do that?

146
00:08:46.609 --> 00:08:51.497
Basically we kind of realized that
we didn't have a principal engineer

147
00:08:51.497 --> 00:08:55.987
somebody there that was guiding
front end like we had in back end.

148
00:08:55.987 --> 00:09:00.133
Again, what is the current process
can be massively powerful with that.

149
00:09:00.133 --> 00:09:01.734
What are the requirements?

150
00:09:01.734 --> 00:09:05.068
This is another thing
that can help you a lot.

151
00:09:05.068 --> 00:09:09.335
So again, for example, if you're trying
to propose using a specific type of

152
00:09:09.335 --> 00:09:13.864
technology, maybe to solve your problem,
again, not what I would suggest, but

153
00:09:13.864 --> 00:09:17.824
if it is something go like, okay,
I know I want to use this, whatever.

154
00:09:17.824 --> 00:09:21.034
Does it fit your requirements?

155
00:09:21.034 --> 00:09:26.225
I know I've been making fun of Kubernetes,
but it's honestly a really good example.

156
00:09:26.225 --> 00:09:30.574
Because a lot of times Kubernetes
is not normally within

157
00:09:30.574 --> 00:09:35.584
the requirements of what actually
just simply needs to be done.

158
00:09:35.584 --> 00:09:38.272
And I would almost bet that if you
really sat down and said like,

159
00:09:38.272 --> 00:09:40.066
what are the requirements of what I need?

160
00:09:40.066 --> 00:09:45.019
You might notice you could probably solve
it with a bunch of different solutions,

161
00:09:45.019 --> 00:09:45.894
not just one.

162
00:09:45.894 --> 00:09:50.329
The last one, and I do think that
the last one is very important, is,

163
00:09:50.329 --> 00:09:52.792
how do we solve this problem, right?

164
00:09:52.792 --> 00:09:55.422
If you know what problem
you're trying to solve,

165
00:09:55.422 --> 00:09:58.688
then you should be able to propose
some type of solution to it.

166
00:09:58.688 --> 00:10:01.986
And if you can't,
then your technical documents not done.

167
00:10:01.986 --> 00:10:02.820
[LAUGH].

168
00:10:02.820 --> 00:10:07.431
And you first need to figure
out how to solve this problem.

