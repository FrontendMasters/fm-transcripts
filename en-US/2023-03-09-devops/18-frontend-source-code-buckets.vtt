WEBVTT

1
00:00:00.000 --> 00:00:03.203
However, we're not trying to
solve that problem right now, so

2
00:00:03.203 --> 00:00:04.992
we're not super worried about it.

3
00:00:04.992 --> 00:00:08.000
So let's go back to our index.ts and
let's actually get rid of this.

4
00:00:08.000 --> 00:00:12.272
And I'm gonna do one more thing just out
of my own force of habit because I write

5
00:00:12.272 --> 00:00:14.066
in tons of other languages now.

6
00:00:14.066 --> 00:00:15.487
I'm gonna add a main here.

7
00:00:15.487 --> 00:00:16.731
You don't have to do this.

8
00:00:16.731 --> 00:00:20.064
However, I normally suggest
adding like a main just so

9
00:00:20.064 --> 00:00:23.478
that you have something that
everything is wrapped in.

10
00:00:23.478 --> 00:00:26.144
I don't like JavaScript that it
doesn't let you, it doesn't do that.

11
00:00:26.144 --> 00:00:27.871
So I normally put a main here and

12
00:00:27.871 --> 00:00:32.197
you can kind of consider this main as
like the entry point to your automation.

13
00:00:32.197 --> 00:00:35.855
Sometimes when you have everything
all at the top level you might,

14
00:00:35.855 --> 00:00:37.953
again JavaScript's asynchronous.

15
00:00:37.953 --> 00:00:42.801
So you might have a confliction where like
two things are referencing the same thing

16
00:00:42.801 --> 00:00:44.263
or something like that.

17
00:00:44.263 --> 00:00:48.038
Just making it isolated in its own scope,
it's just something I prefer.

18
00:00:48.038 --> 00:00:50.259
Again, not something
you have to do though.

19
00:00:50.259 --> 00:00:51.409
So let's go back to our bucket and

20
00:00:51.409 --> 00:00:53.146
let's take one more look
at what else we got here.

21
00:00:53.146 --> 00:00:54.784
So we've got fmbucket.args, right?

22
00:00:54.784 --> 00:00:55.617
Fmbucket.

23
00:00:55.617 --> 00:01:00.196
We've got our constructor,
we've got all of our naming stuff, cool.

24
00:01:00.196 --> 00:01:05.115
However, we've just standardized bucket,
like that's really all we've done, right?

25
00:01:05.115 --> 00:01:07.216
We haven't really done much else.

26
00:01:07.216 --> 00:01:13.851
But what we can do is we can now say like,
well, we know how we wanna create buckets.

27
00:01:13.851 --> 00:01:16.329
So let's do the next thing,

28
00:01:16.329 --> 00:01:22.440
which is let's actually create
a service that is used by that bucket.

29
00:01:22.440 --> 00:01:27.527
And this is where we start standardizing
the actual services in our infrastructure.

30
00:01:27.527 --> 00:01:30.340
So I'm gonna say new file, right?

31
00:01:30.340 --> 00:01:34.204
And we're gonna say frontend.ts.

32
00:01:34.204 --> 00:01:39.309
Now what we're gonna do is is we're
gonna define the DSL for our frontends.

33
00:01:39.309 --> 00:01:41.120
So we're gonna go to the frontend file and

34
00:01:41.120 --> 00:01:44.660
we'll open up the bucket file right next
to it because we can use it as an example.

35
00:01:47.534 --> 00:01:51.310
And we're just gonna copy the first
few lines of the component here,

36
00:01:54.976 --> 00:01:58.446
Just to reuse it basically.

37
00:01:58.446 --> 00:02:00.071
There we go.

38
00:02:00.071 --> 00:02:04.109
And what we're gonna do is we're
gonna say fmfrontend, because again,

39
00:02:04.109 --> 00:02:06.723
we don't want this just
to be called frontend.

40
00:02:06.723 --> 00:02:09.236
It's a frontend masters.

41
00:02:09.236 --> 00:02:12.220
Frontend, right?

42
00:02:12.220 --> 00:02:16.049
And so we will then go back here.

43
00:02:16.049 --> 00:02:17.429
We will grab this stuff.

44
00:02:17.429 --> 00:02:20.448
We don't need us three but we need that.

45
00:02:20.448 --> 00:02:22.030
And close that up.

46
00:02:22.030 --> 00:02:22.869
Okay.

47
00:02:28.359 --> 00:02:32.622
There it goes.
I was like, are you just taking a second?

48
00:02:32.622 --> 00:02:33.811
We also need the super call.

49
00:02:33.811 --> 00:02:36.475
Sorry, let's grab that too.

50
00:02:36.475 --> 00:02:40.111
So, you might notice that there's a few
things that I'm basically setting all

51
00:02:40.111 --> 00:02:41.366
this boilerplate up with.

52
00:02:41.366 --> 00:02:44.578
Okay, and
it really is the lines that you see here.

53
00:02:44.578 --> 00:02:49.602
To create a component, you really do
want some type of arguments if you

54
00:02:49.602 --> 00:02:55.308
can give it that, but really just the
actual component that extends the class,

55
00:02:55.308 --> 00:02:58.142
the constructor, and then the super.

56
00:02:58.142 --> 00:03:01.672
Having the resource name beforehand
is simply for naming convention.

57
00:03:01.672 --> 00:03:02.930
That's it.

58
00:03:02.930 --> 00:03:07.648
But these are required,
these lines here, basically line eight,

59
00:03:07.648 --> 00:03:11.390
line nine, and
line 12 are all actually required.

60
00:03:11.390 --> 00:03:11.936
So let's do this.

61
00:03:11.936 --> 00:03:16.660
I say fmfrontend,
cuz we wanna make a frontend.

62
00:03:16.660 --> 00:03:18.663
And we know we're gonna
need the stack as well.

63
00:03:18.663 --> 00:03:20.183
So let's just go ahead and
get that now as well.

64
00:03:20.183 --> 00:03:23.240
So we're gonna say,
git stack just like that.

65
00:03:23.240 --> 00:03:25.077
Cool.

66
00:03:25.077 --> 00:03:30.333
Now we could even follow the same
conventions of like name and product

67
00:03:30.333 --> 00:03:36.329
because this might be a front end for
a specific product, you know what I mean?

68
00:03:36.329 --> 00:03:40.485
And this is where you'll gonna start
seeing conventions get reused.

69
00:03:40.485 --> 00:03:41.295
And you, and

70
00:03:41.295 --> 00:03:45.733
like a standardization of naming kind
of starts showing itself to you.

71
00:03:45.733 --> 00:03:48.077
Once you start making
standards in one place,

72
00:03:48.077 --> 00:03:51.753
you'll start to get more of them in
different parts of your automation.

73
00:03:51.753 --> 00:03:55.629
So if we wanted to,
we could say, all right, well,

74
00:03:55.629 --> 00:04:01.820
we'll use the same arguments except for,
we'll call this one frontend, right?

75
00:04:01.820 --> 00:04:05.918
And then we'll use this here
as well fmfrontend args.

76
00:04:05.918 --> 00:04:09.920
And again, we're gonna keep that ops there
just in the off chance that we need to

77
00:04:09.920 --> 00:04:11.794
pass something down to all of these.

78
00:04:11.794 --> 00:04:14.943
Now, let's think about and
just kinda like,

79
00:04:14.943 --> 00:04:18.510
have a bit of a thought
experiment here for a second.

80
00:04:18.510 --> 00:04:20.158
We know that we want one bucket,

81
00:04:20.158 --> 00:04:23.591
because that's where all of our
source code's gonna go, right?

82
00:04:23.591 --> 00:04:28.598
So what we could do is we could say

83
00:04:28.598 --> 00:04:35.469
const source equals new fmbucket, right?

84
00:04:35.469 --> 00:04:37.292
And then import that.

85
00:04:46.617 --> 00:04:49.554
Here, right?

86
00:04:49.554 --> 00:04:54.789
So now what we'll do is
we will pass in really

87
00:04:54.789 --> 00:05:00.030
the same parameters, just directly down,

88
00:05:06.094 --> 00:05:06.914
Right?

89
00:05:09.785 --> 00:05:12.489
And actually, we don't even need stack,
at least for that,

90
00:05:12.489 --> 00:05:13.952
because why do we not need stack?

91
00:05:13.952 --> 00:05:15.720
Anyone know why we don't need stack there?

92
00:05:18.878 --> 00:05:21.840
Cuz we already standardized it.

93
00:05:21.840 --> 00:05:26.025
Because it's isolated in this component,
it will always grab stack here.

94
00:05:26.025 --> 00:05:30.332
So technically, we don't even
need to reuse it simply because

95
00:05:30.332 --> 00:05:35.212
the component itself already knows
how to get the stack information and

96
00:05:35.212 --> 00:05:38.480
inject it into the specific resource,
right?

97
00:05:38.480 --> 00:05:44.507
So now what we can do is we can
simply do like we did before and

98
00:05:44.507 --> 00:05:47.460
say that the parent is this.

99
00:05:47.460 --> 00:05:50.719
So what does that mean essentially?

100
00:05:50.719 --> 00:05:55.250
Well, it means that the fmbucket is going

101
00:05:55.250 --> 00:05:59.528
to be parented by the fmfrontendargs.

102
00:05:59.528 --> 00:06:07.696
But anything in the fmbucket itself
should have its own set of resources.

103
00:06:07.696 --> 00:06:12.401
This is basically the fundamental
blocks of how we do automation with

104
00:06:12.401 --> 00:06:14.520
standardization and pull me.

105
00:06:14.520 --> 00:06:19.362
What we can do now is if
we run up I might not

106
00:06:19.362 --> 00:06:25.106
actually import it into
the main guy didn't do that.

107
00:06:25.106 --> 00:06:26.440
I know I didn't.

108
00:06:26.440 --> 00:06:33.648
We go here and
then we say new fmfrontend, right?

109
00:06:33.648 --> 00:06:37.315
Because this is the frontend
we care about import,

110
00:06:38.768 --> 00:06:45.203
From, Sorry services.

111
00:06:45.203 --> 00:06:50.321
Services frontend, get rid of bucket.

112
00:06:58.997 --> 00:07:04.499
And now I can do a frontend

113
00:07:04.499 --> 00:07:08.432
called example.

114
00:07:08.432 --> 00:07:13.339
And the product is for DevOps course.

115
00:07:15.860 --> 00:07:18.418
So if I do this, I do up.

116
00:07:21.410 --> 00:07:23.337
Look at that.

117
00:07:23.337 --> 00:07:29.980
So now we have our stack with our
frontend masters, frontend, right?

118
00:07:29.980 --> 00:07:34.651
DevOps course example with
the four resource name, right?

119
00:07:34.651 --> 00:07:38.020
And then inside of that
we have our fmbucket.

120
00:07:38.020 --> 00:07:39.746
And what does our fmbucket create?

121
00:07:39.746 --> 00:07:44.779
Well, it creates the bucket and the bucket
policy access block that we need.

122
00:07:44.779 --> 00:07:46.770
So let's have a little
bit more fun with this.

123
00:07:46.770 --> 00:07:51.880
Let's say we realize that all of
our frontends need a second bucket.

124
00:07:51.880 --> 00:07:54.945
Maybe they need replication, right?

125
00:07:54.945 --> 00:07:57.171
Maybe they need something else.

126
00:07:57.171 --> 00:08:00.217
How hard do we think it's gonna be for
us to add a new bucket?

127
00:08:02.690 --> 00:08:03.855
Not that hard, right?

128
00:08:03.855 --> 00:08:04.974
It shouldn't be, right?

129
00:08:04.974 --> 00:08:06.845
I should just be able to go in here.

130
00:08:06.845 --> 00:08:09.004
Go to the frontend.

131
00:08:09.004 --> 00:08:11.268
Oops, sorry.

132
00:08:11.268 --> 00:08:12.287
Frontend.

133
00:08:12.287 --> 00:08:14.007
And then literally just do this.

134
00:08:20.614 --> 00:08:21.389
Come on.

135
00:08:23.036 --> 00:08:26.959
Let's say replica, right?

136
00:08:26.959 --> 00:08:30.548
Will this work if I just do this though?

137
00:08:30.548 --> 00:08:32.687
Or would this fail?

138
00:08:35.288 --> 00:08:38.232
&gt;&gt; I feel like there's gonna
be a problem in the naming.

139
00:08:38.232 --> 00:08:41.148
&gt;&gt; Right, yep,
we're gonna have a collision.

140
00:08:41.148 --> 00:08:44.255
This is the thing you have
to keep an eye out for,

141
00:08:44.255 --> 00:08:47.770
which is when you standardize,
it's predictable.

142
00:08:47.770 --> 00:08:51.774
And if you give the same arguments twice,
it's also reproducible,

143
00:08:51.774 --> 00:08:54.685
meaning you're gonna run
into the same problem.

144
00:08:54.685 --> 00:08:56.616
So what can we do here?

145
00:08:56.616 --> 00:09:01.660
Well, actually we can just lean
on this a little bit further,

146
00:09:01.660 --> 00:09:08.076
and we can say args name, cuz we still
want that dynamicness replica, right?

147
00:09:08.076 --> 00:09:11.758
And now we should get
a separate thing entirely.

148
00:09:11.758 --> 00:09:15.523
So now if we go here, look at that.

149
00:09:15.523 --> 00:09:17.138
I just didn't spell replica, right?

150
00:09:17.138 --> 00:09:19.542
Cuz I have terrible [LAUGH] spelling.

151
00:09:19.542 --> 00:09:24.423
But yeah, you could see there that now
we have a frontend master's bucket for

152
00:09:24.423 --> 00:09:28.704
our replica, [LAUGH] and then we
have a frontend master's bucket for

153
00:09:28.704 --> 00:09:30.675
our main source code, right?

154
00:09:30.675 --> 00:09:32.820
And this you just keep doing this.

155
00:09:32.820 --> 00:09:37.283
Just keep throwing resources in there,
linking them up and every,

156
00:09:37.283 --> 00:09:38.859
here's the cool part.

157
00:09:38.859 --> 00:09:44.841
Every frontend going forward
will have this bucket.

158
00:09:44.841 --> 00:09:49.366
So if we've already deployed resources
to the cloud with this automation, and

159
00:09:49.366 --> 00:09:51.471
then we said, we need a bucket.

160
00:09:51.471 --> 00:09:55.271
Just add it to that specific
standardized class, right?

161
00:09:55.271 --> 00:09:59.350
And then the next time you run that
automation, it'll get created everywhere.

162
00:09:59.350 --> 00:10:02.722
Because this is our standardized DSL or

163
00:10:02.722 --> 00:10:08.352
our standardized configuration
of how we provision resources.

164
00:10:08.352 --> 00:10:12.086
And like if we wanted to expound on
this further, we could say, all right,

165
00:10:12.086 --> 00:10:15.351
I actually want a replica bucket
with specific circumstances for

166
00:10:15.351 --> 00:10:16.739
specific configuration.

167
00:10:16.739 --> 00:10:19.097
So it could be like fmbucket replica.

168
00:10:19.097 --> 00:10:21.818
And then you could have like
fmbucket source if you wanted.

169
00:10:21.818 --> 00:10:27.695
It totally depends on the flavor and
how crazy you wanna get with it, right?

170
00:10:27.695 --> 00:10:32.220
But that should at least show you
from a very simple perspective how we

171
00:10:32.220 --> 00:10:34.180
can kind of lean on that a bit.

