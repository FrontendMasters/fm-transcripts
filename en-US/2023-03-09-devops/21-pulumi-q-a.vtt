WEBVTT

1
00:00:00.129 --> 00:00:04.848
Cool, so that was a bit, does anyone
have any questions on any of that?

2
00:00:04.848 --> 00:00:06.793
You're more than welcome to
ask any questions you'd like.

3
00:00:06.793 --> 00:00:09.464
I know that was quite of a bit.

4
00:00:09.464 --> 00:00:11.854
There's more we could add to it.

5
00:00:11.854 --> 00:00:15.372
I would love to see what
you guys do with it.

6
00:00:15.372 --> 00:00:19.831
But I think you can at least see
now the power behind utilizing and,

7
00:00:19.831 --> 00:00:24.606
I mean, it's really mostly, again,
you could do this in Terraform,

8
00:00:24.606 --> 00:00:27.646
you could do this in
other providers as well.

9
00:00:27.646 --> 00:00:32.787
The main point is,
we need an interface that DEVS use.

10
00:00:32.787 --> 00:00:34.592
We need those bumpers that DEVS can use.

11
00:00:34.592 --> 00:00:39.145
As long as we have those bumpers,
it doesn't matter what it's in.

12
00:00:39.145 --> 00:00:44.280
But if developers are literally
modifying Amazon resources directly,

13
00:00:44.280 --> 00:00:45.720
that's a problem.

14
00:00:45.720 --> 00:00:47.121
That means,
they could break a lot very easily.

15
00:00:49.071 --> 00:00:52.242
And, yeah,
this is essentially our service directory.

16
00:00:52.242 --> 00:00:56.142
And so, as I said,
if I was a developer and

17
00:00:56.142 --> 00:01:00.266
I needed to simply add this or
a new service or

18
00:01:00.266 --> 00:01:05.618
something like that,
I should only have to come in here,

19
00:01:05.618 --> 00:01:10.657
paste this, all right, and
then put in example two.

20
00:01:10.657 --> 00:01:14.923
And that's it.

21
00:01:14.923 --> 00:01:17.918
The developer should not
really have to do much else.

22
00:01:17.918 --> 00:01:22.994
If they do,
then maybe something's not supported.

23
00:01:22.994 --> 00:01:24.948
We need to have a conversation about it.

24
00:01:24.948 --> 00:01:27.437
You know what I mean?
Maybe if it's not working cool,

25
00:01:27.437 --> 00:01:32.024
I can help you debug it, but at the end
of the day, this is what the developers

26
00:01:32.024 --> 00:01:35.561
should be using instead of
writing their own automation.

27
00:01:35.561 --> 00:01:38.953
Any questions on that or
anything like that?

28
00:01:38.953 --> 00:01:40.757
Yeah?

29
00:01:40.757 --> 00:01:43.394
&gt;&gt; Do leverage Pulumi for

30
00:01:43.394 --> 00:01:48.673
creating CI/CD pipelines
as well as in AWS?

31
00:01:48.673 --> 00:01:52.863
&gt;&gt; Yeah, I mean,
you could really utilize Pulumi for

32
00:01:52.863 --> 00:01:57.420
anything it provides a provider for,
right?

33
00:01:57.420 --> 00:02:01.740
So, I guess I would need to understand
what you mean by automating

34
00:02:01.740 --> 00:02:06.456
pipelines because there's different
automation that goes into there

35
00:02:06.456 --> 00:02:10.322
that we're gonna see shortly
that is separate from this.

36
00:02:10.322 --> 00:02:15.779
But if we wanted to talk about
the actual setup of pipelines,

37
00:02:15.779 --> 00:02:21.025
saying, GitLab or
something like that, then possibly.

38
00:02:21.025 --> 00:02:22.436
But they may mean two different things,
yeah?

39
00:02:22.436 --> 00:02:26.194
&gt;&gt; Is locking state available
out of the Pulumi cloud?

40
00:02:26.194 --> 00:02:29.660
&gt;&gt; That is a good question,
pulumi Lock state?

41
00:02:29.660 --> 00:02:33.618
I know that it locks state when
it goes to modify it, right?

42
00:02:33.618 --> 00:02:38.102
Because it doesn't want
multiple changes to it.

43
00:02:38.102 --> 00:02:42.676
I don't know exactly the depths
of how you can lock state mostly

44
00:02:42.676 --> 00:02:47.002
because Pulumi allows you to
decide on multiple backends.

45
00:02:47.002 --> 00:02:50.666
Pulumi actually lets you store your
state in a bucket, if you want.

46
00:02:50.666 --> 00:02:53.729
It allows you to store it literally
on your computer, if you want.

47
00:02:53.729 --> 00:02:59.307
So I would imagine they mean shared
locking state in the cloud and

48
00:02:59.307 --> 00:03:03.863
I don't think you can do that right now,
actually.

49
00:03:03.863 --> 00:03:07.426
I don't think that's something you could
do, I don't think there's a shared lock

50
00:03:07.426 --> 00:03:10.152
state, yeah, I'd have to look
into that a little bit further.

51
00:03:10.152 --> 00:03:12.801
But I do know that, again,
if a run is running,

52
00:03:12.801 --> 00:03:16.581
you can't run another run while
it's running, it'll be like no,

53
00:03:16.581 --> 00:03:20.059
you're messing with state
that's being updated right now.

54
00:03:20.059 --> 00:03:24.576
&gt;&gt; One more question, is there
a way to generate documentation so

55
00:03:24.576 --> 00:03:27.827
DEVS know what's supported and
what is not?

56
00:03:27.827 --> 00:03:31.871
&gt;&gt; Yeah, yeah, absolutely, so
that probably would not be in Pulumi,

57
00:03:31.871 --> 00:03:35.779
I actually don't know if Pulumi
does documentation generation,

58
00:03:35.779 --> 00:03:37.193
I don't think it does.

59
00:03:37.193 --> 00:03:41.025
But, I mean, realistically, yeah,
I know it's just the documentation itself.

60
00:03:41.025 --> 00:03:45.164
But realistically, you could add,
because it's JavaScript or

61
00:03:45.164 --> 00:03:48.636
whatever language,
you could add a generator for it.

62
00:03:48.636 --> 00:03:52.288
And the cool thing about it
being in the language is,

63
00:03:52.288 --> 00:03:57.855
if you have it in the language, you can
easily tell it about your types, right?

64
00:03:57.855 --> 00:04:01.898
You could easily just be like,
all right, annotate this type and

65
00:04:01.898 --> 00:04:03.747
give us documentation on it.

66
00:04:03.747 --> 00:04:07.328
So Pulumi won't give it to you directly,
but you could definitely do it, yeah.

67
00:04:07.328 --> 00:04:09.641
And you could easily auto-generate that.

