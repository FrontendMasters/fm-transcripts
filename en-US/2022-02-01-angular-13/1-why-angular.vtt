WEBVTT

1
00:00:00.349 --> 00:00:05.299
Let's go ahead and
let's get into the big picture and

2
00:00:05.299 --> 00:00:10.690
let's just kind of break down
everything at a high level.

3
00:00:10.690 --> 00:00:15.643
So this is the big picture and
I also call this module how

4
00:00:15.643 --> 00:00:20.287
to impress your Angular
friends at a dinner party.

5
00:00:20.287 --> 00:00:25.132
Or if you simply watched this module,
and then you're like peace out,

6
00:00:25.132 --> 00:00:30.882
I'm going to top golf or I'm gonna go play
pickleball or whatever you're gonna do.

7
00:00:30.882 --> 00:00:34.787
If you just remember this module
right here and if your boss says,

8
00:00:34.787 --> 00:00:39.490
hey like I gave you the day off for
that workshop, what did you learn?

9
00:00:39.490 --> 00:00:41.556
Just repeat this and
I think you'll be pretty good.

10
00:00:41.556 --> 00:00:45.367
So I am giving you a Ferris Bueller
day off scenario here, but

11
00:00:45.367 --> 00:00:50.030
you gotta pay attention to this module
if you're going to be convincing.

12
00:00:51.570 --> 00:00:57.047
So as with anything,
the question is why Angular.

13
00:00:57.047 --> 00:01:03.411
Why would given the kind of the plethora
of options that are available to us in

14
00:01:03.411 --> 00:01:09.089
terms of front end frameworks even
no framework is a viable choice.

15
00:01:09.089 --> 00:01:12.044
Why would somebody choose Angular?

16
00:01:12.044 --> 00:01:16.893
And so just to clarify that I am
not going to talk about Angular

17
00:01:16.893 --> 00:01:20.982
is awesome because this
framework is not awesome,

18
00:01:20.982 --> 00:01:25.735
is that I believe just right at
the onset that when you look at

19
00:01:25.735 --> 00:01:30.205
all of kind of the major
players in terms of frameworks,

20
00:01:30.205 --> 00:01:35.563
I believe that they've pretty
much achieved functional parity.

21
00:01:35.563 --> 00:01:39.870
And so I use Angular,
I've used React, I use view.

22
00:01:39.870 --> 00:01:44.429
And so it's not going to be
that kind of a discussion.

23
00:01:44.429 --> 00:01:49.150
But I do think that Angular does
bring some things to the table.

24
00:01:49.150 --> 00:01:53.600
That depending on some
contextual circumstances,

25
00:01:53.600 --> 00:01:59.374
I think it's really well suited for
a certain type of development.

26
00:01:59.374 --> 00:02:05.833
So one of the big ones that I like
is that Angular follows common and

27
00:02:05.833 --> 00:02:10.772
familiar enterprise patterns and
conventions.

28
00:02:10.772 --> 00:02:16.514
And so if you are familiar with
a classical based language.

29
00:02:16.514 --> 00:02:21.831
So you have a background in Java or
dotnet and you're familiar or

30
00:02:21.831 --> 00:02:28.427
you're comfortable with a class based
approach with some of the classic design

31
00:02:28.427 --> 00:02:35.200
patterns that Angular follows a lot of
those ideas and it's very familiar.

32
00:02:35.200 --> 00:02:41.062
So Angular was one of the first
frameworks to go all in on TypeScript.

33
00:02:41.062 --> 00:02:45.395
And I think that was a really
good move on their part,

34
00:02:45.395 --> 00:02:50.421
because it allowed classical
bass developers to have parity

35
00:02:50.421 --> 00:02:54.970
with languages that they
were already familiar with.

36
00:02:56.610 --> 00:02:59.438
It is also a batteries included framework.

37
00:02:59.438 --> 00:03:04.622
So one of the things that I like about
Angular is that instead of picking things

38
00:03:04.622 --> 00:03:09.754
that are best in class and assembling
them, which there is a place for that.

39
00:03:09.754 --> 00:03:16.644
Angular when you spin it up and
you run it, it comes with a router.

40
00:03:16.644 --> 00:03:18.799
It comes with an HTTP client,

41
00:03:18.799 --> 00:03:23.240
it comes with testing utilities
right out of the gates.

42
00:03:23.240 --> 00:03:28.773
And so when you are spinning up a new
project, it reduces the barrier

43
00:03:28.773 --> 00:03:34.112
to entry in terms of the things that
you have to kind of compose in to

44
00:03:34.112 --> 00:03:39.572
get started that with Angular,
you can immediately get started.

45
00:03:39.572 --> 00:03:40.891
And you have a router.

46
00:03:40.891 --> 00:03:43.246
You have an HTTP client.

47
00:03:43.246 --> 00:03:47.990
You have a testing framework that
comes with that as well with

48
00:03:47.990 --> 00:03:52.839
testing utilities versus well,
what am I using for a router.

49
00:03:52.839 --> 00:03:56.616
What am I using for HTTP like,
am I using Axios or

50
00:03:56.616 --> 00:04:00.974
some other thing or
just even the built in HTTP client.

51
00:04:00.974 --> 00:04:04.720
So this is prescriptive
without being restrictive.

52
00:04:04.720 --> 00:04:11.628
And it reduces the amount of decisions
that you need to make up front.

53
00:04:11.628 --> 00:04:13.360
It also ships with tooling.

54
00:04:13.360 --> 00:04:18.381
So the Angular CLI we're going to
talk about this in a little bit,

55
00:04:18.381 --> 00:04:22.946
but it has or it comes with some
pretty effective tooling for

56
00:04:22.946 --> 00:04:26.160
accelerating your developer workflow.

57
00:04:26.160 --> 00:04:30.278
And so we're going to use
the Angular CLI and by extension and

58
00:04:30.278 --> 00:04:33.265
I'm not going to cover
it in this workshop,

59
00:04:33.265 --> 00:04:38.227
you have norwall NX dev tools which
allows you to take that even further.

60
00:04:38.227 --> 00:04:42.651
And so there's a lot of tooling that
allows you to be very effective

61
00:04:42.651 --> 00:04:43.685
very quickly.

62
00:04:43.685 --> 00:04:47.490
But also has a rich and
a vibrant ecosystem, which is nice.

63
00:04:47.490 --> 00:04:50.128
So you have Angular material,

64
00:04:50.128 --> 00:04:56.016
you have like ag grid has a really
great implementation for Angular.

65
00:04:56.016 --> 00:04:59.522
And like I said a lot of frameworks
have parody but a lot of the things that

66
00:04:59.522 --> 00:05:03.739
I wanna do in Angular, I find that there's
typically an implementation somewhere.

67
00:05:03.739 --> 00:05:05.429
That's pretty good.

68
00:05:05.429 --> 00:05:07.450
And it also has a proven track record.

69
00:05:07.450 --> 00:05:12.040
So just Google itself uses Angular
internally for hundreds and

70
00:05:12.040 --> 00:05:17.235
hundreds of products or products projects,
but I have also personally

71
00:05:17.235 --> 00:05:23.747
implemented Angular in a number of fortune
500 companies and even smaller startups.

72
00:05:23.747 --> 00:05:31.070
And so it is pretty battle tested and
proven in the enterprise.

73
00:05:31.070 --> 00:05:35.585
This is probably the only thing that I'm
going to say about AngularJS one dot x.

74
00:05:35.585 --> 00:05:40.583
And I'm only bringing this up
to provide or just some context

75
00:05:40.583 --> 00:05:45.287
of when AngularJS came out
that I believe the predominant

76
00:05:45.287 --> 00:05:50.285
framework at the time was
backbone which didn't really have

77
00:05:50.285 --> 00:05:55.296
a lot of opinions about anything
it was just NVW, whatever.

78
00:05:55.296 --> 00:05:59.010
NV Model view whatever in
the world you want it to be.

79
00:05:59.010 --> 00:06:03.980
And with AngularJS 1.X it was
a little overwhelming at first,

80
00:06:03.980 --> 00:06:09.144
but people realize that there's
not too many pieces on the board.

81
00:06:09.144 --> 00:06:11.973
You have modules config routes.

82
00:06:11.973 --> 00:06:14.148
You have a controller,
you have your template,

83
00:06:14.148 --> 00:06:15.854
those were glued together via scope.

84
00:06:15.854 --> 00:06:19.428
And then if you needed to extend
a controller, you did that with a service,

85
00:06:19.428 --> 00:06:22.760
if you needed to extend a view,
you did that with a directive.

86
00:06:22.760 --> 00:06:29.191
And so a lot of individuals they were able
to say, well, it's only eight pieces.

87
00:06:29.191 --> 00:06:30.662
I can figure that out.

88
00:06:30.662 --> 00:06:35.488
Well, with Angular it got even easier.

89
00:06:35.488 --> 00:06:41.171
Is that you have modules, routes,
components, and services, and that's it.

90
00:06:41.171 --> 00:06:45.766
And so we're going to step through each
one of these pieces, talk about them and

91
00:06:45.766 --> 00:06:47.560
see how they all fit together.

