WEBVTT

1
00:00:00.000 --> 00:00:04.770
So before we go any further,
I want to open the floor for

2
00:00:04.770 --> 00:00:10.815
questions on this particular solution
before we get into services.

3
00:00:10.815 --> 00:00:18.141
So Mark, wherever you went,
I open the floor to you.

4
00:00:18.141 --> 00:00:21.425
&gt;&gt; They said with reactive forms,
you don't have to do much with this.

5
00:00:21.425 --> 00:00:25.862
&gt;&gt; If you want to update for
instance a reactive form, all right?

6
00:00:25.862 --> 00:00:34.502
So this is where I fundamentally I
think things get real heavy real quick.

7
00:00:34.502 --> 00:00:38.875
Is that if I have a reactive form that,

8
00:00:38.875 --> 00:00:42.988
I have to declare the form control.

9
00:00:42.988 --> 00:00:50.605
And so, in your code, you have to go and
declare this, so there's new form control.

10
00:00:50.605 --> 00:00:54.604
And then I need to go into my form, and

11
00:00:54.604 --> 00:00:59.771
I need to basically wire
this up to every input.

12
00:00:59.771 --> 00:01:05.192
And more importantly
when I wanna change it,

13
00:01:05.192 --> 00:01:11.905
what I have to do is essentially
use set value or a patch.

14
00:01:11.905 --> 00:01:16.972
And so that's where things get really,
really, really heavy.

15
00:01:16.972 --> 00:01:21.875
Is that I'm basically having to manually

16
00:01:21.875 --> 00:01:27.060
declare everything that just happens under

17
00:01:27.060 --> 00:01:32.114
the hood with basically template forums.

18
00:01:32.114 --> 00:01:40.223
For me I have historically found that
that's not really worth the effort.

19
00:01:40.223 --> 00:01:45.239
So, this to me, this is exactly why

20
00:01:45.239 --> 00:01:50.438
I do not use reactive forms anymore.

21
00:01:50.438 --> 00:01:56.279
Is if you are going to do something
like this in reactive forms,

22
00:01:56.279 --> 00:02:02.564
you're literally having to define
a form control in a form group for

23
00:02:02.564 --> 00:02:09.972
your entire data model, versus just
binding the data model to the form itself.

24
00:02:09.972 --> 00:02:17.926
And so that's where, I think that even,
well, I wanna update it.

25
00:02:17.926 --> 00:02:22.704
Well, instead of just having it update so
for me over here.

26
00:02:22.704 --> 00:02:26.316
And I'm not saying that there's
not a use for reactive forms.

27
00:02:26.316 --> 00:02:28.299
But I think for most cases,

28
00:02:28.299 --> 00:02:32.709
that people use them because
this is what Angular says to do.

29
00:02:32.709 --> 00:02:36.996
But when it comes down to it,
if I want to update a value,

30
00:02:36.996 --> 00:02:39.930
I start typing and it starts working.

31
00:02:39.930 --> 00:02:46.030
It's automatically updated and
because it's not shared mutable state,

32
00:02:46.030 --> 00:02:51.275
that I'm able to accomplish this
with really just Engie model.

33
00:02:51.275 --> 00:02:57.742
Versus if I come back over to here,
for me to do the same exact thing,

34
00:02:57.742 --> 00:03:04.673
I have to create an entire instance of
the form group or the form control.

35
00:03:04.673 --> 00:03:10.812
And then essentially,
patch that value into the data model.

36
00:03:10.812 --> 00:03:15.815
So, just for me,
that's just a ton of work, but

37
00:03:15.815 --> 00:03:20.584
even here,
it's well you lose form builder.

38
00:03:20.584 --> 00:03:26.521
Well, you were essentially having
to build something that you get for

39
00:03:26.521 --> 00:03:29.448
free with template driven forms.

40
00:03:29.448 --> 00:03:34.860
So that's where I do differ from I think

41
00:03:34.860 --> 00:03:40.272
people that even to the point where they

42
00:03:40.272 --> 00:03:46.340
just tell us in the dock
use reactive forms,

43
00:03:46.340 --> 00:03:50.775
but we built 1000 of these.

44
00:03:50.775 --> 00:03:55.571
And he realized that you're manually
defining something that you get for

45
00:03:55.571 --> 00:03:57.827
free with template driven forms.

46
00:03:57.827 --> 00:04:02.606
I have a really hard time justifying

47
00:04:02.606 --> 00:04:06.598
that expenditure of effort.

48
00:04:06.598 --> 00:04:11.747
So that's for me,
I don't think that what you get

49
00:04:11.747 --> 00:04:17.766
with reactive forms is just
an extra layer of complexity.

50
00:04:17.766 --> 00:04:21.851
And for most forms, it's not worth it.

51
00:04:21.851 --> 00:04:29.347
So when creating an empty form model,
we can create a model builder.

52
00:04:29.347 --> 00:04:35.175
Can you speak about that if it's
relevant and you would design that.

53
00:04:35.175 --> 00:04:40.314
So then I'd be really
curious what you mean

54
00:04:40.314 --> 00:04:48.461
by model builder because I'm
interested in those kinds of things.

55
00:04:48.461 --> 00:04:51.634
But I don't want to assume that
you're talking about one thing and

56
00:04:51.634 --> 00:04:52.774
it's something else.

57
00:04:52.774 --> 00:04:58.975
So if you wanna elaborate on that,
I'd love to hear it.

58
00:04:58.975 --> 00:05:00.847
Do custom validators work?

59
00:05:00.847 --> 00:05:02.675
Absolutely.

60
00:05:02.675 --> 00:05:08.895
What if we import an Angular
material component like a button and

61
00:05:08.895 --> 00:05:15.013
you never use it in the app is it
going to affect the bundle size?

62
00:05:15.013 --> 00:05:19.957
So, out of the gates by default it will.

63
00:05:19.957 --> 00:05:25.216
So I know that Angular is working
on things like tree shaking.

64
00:05:25.216 --> 00:05:31.495
And this idea for being able to go through
and determine are we using this or

65
00:05:31.495 --> 00:05:36.877
not and then not bundle it,
that's a pretty complex problem.

66
00:05:36.877 --> 00:05:40.904
Again, if you're importing
something whether or

67
00:05:40.904 --> 00:05:45.314
not you use it,
it's going to be added into the bundle.

68
00:05:45.314 --> 00:05:50.014
One of the problems is that,
especially now with dynamic,

69
00:05:50.014 --> 00:05:55.094
being able to dynamically add code or
instantiate components.

70
00:05:55.094 --> 00:06:00.232
Is that there may not be
an instantiation within a certain way

71
00:06:00.232 --> 00:06:06.681
that it's looking for, but it's being
added dynamically down the road and

72
00:06:06.681 --> 00:06:10.730
it may not be appropriately
bundled with that.

73
00:06:10.730 --> 00:06:14.215
What I do recommend is that if
you're dealing with something

74
00:06:14.215 --> 00:06:16.481
you're concerned about bundle size.

75
00:06:16.481 --> 00:06:24.361
That trying to segment your
application into lazy loaded modules.

76
00:06:24.361 --> 00:06:30.204
So the answer is, it will
absolutely affect your bundle size,

77
00:06:30.204 --> 00:06:34.291
so be very judicious
about what you import.

78
00:06:34.291 --> 00:06:38.888
Even to the point where within this,

79
00:06:38.888 --> 00:06:45.559
if we look in the code within
my material module here,

80
00:06:45.559 --> 00:06:53.143
that I'm using some of these,
but I think I have all of 15.

81
00:06:53.143 --> 00:06:58.113
But if we were to go to,

82
00:06:59.159 --> 00:07:01.783
here we go.

83
00:07:01.783 --> 00:07:04.308
On the other hand in,
they're doing this in a stack Blitz.

84
00:07:04.308 --> 00:07:10.611
So these are for demonstration purposes,
the similar modules.

85
00:07:10.611 --> 00:07:15.256
So what they're doing is
they're basically importing

86
00:07:15.256 --> 00:07:19.715
all of the modules, and
then making this available.

87
00:07:19.715 --> 00:07:24.779
As you can see, that they have
a similar material module for

88
00:07:24.779 --> 00:07:30.251
example purposes, but
every one of these are being imported and

89
00:07:30.251 --> 00:07:34.927
is part of the package or
the payload that footprints.

90
00:07:34.927 --> 00:07:41.040
So this is where you could, as you
start out, you could add everything in.

91
00:07:41.040 --> 00:07:46.686
But then as you start to build or
get closer to production,

92
00:07:46.686 --> 00:07:51.181
I would absolutely work
on parsing that out and

93
00:07:51.181 --> 00:07:57.648
trying to slim that down as you
prepare a production build, okay?

94
00:07:57.648 --> 00:08:02.804
So I think I understand in
what you're saying is that

95
00:08:02.804 --> 00:08:08.663
you have essentially where you
have an instance of the model

96
00:08:08.663 --> 00:08:13.834
coming from the server that
you're able to inject.

97
00:08:13.834 --> 00:08:16.552
So if I understand correctly,

98
00:08:16.552 --> 00:08:22.624
the one thing that I do do when
working with a full stack application.

99
00:08:22.624 --> 00:08:27.792
So I have node, nest, and
Angular is that I will

100
00:08:27.792 --> 00:08:32.707
abstract out my interfaces
into a standalone

101
00:08:32.707 --> 00:08:37.232
library that then my node application and

102
00:08:37.232 --> 00:08:43.717
my Angular application will
share those interface files.

103
00:08:43.717 --> 00:08:48.094
And so,
that establishes essentially the model

104
00:08:48.094 --> 00:08:52.053
contract from the back
end to the front end.

105
00:08:52.053 --> 00:08:57.618
But what then what I'll also do
is once I have consensus on that,

106
00:08:57.618 --> 00:09:03.390
then it's not very hard to then
generate even mock data structures

107
00:09:03.390 --> 00:09:08.672
based on those model definitions and
make those available.

108
00:09:08.672 --> 00:09:10.627
So I've done that in Nest.

109
00:09:10.627 --> 00:09:15.115
There's actually a library that
does that just in memory for

110
00:09:15.115 --> 00:09:19.427
you using Faker, but
I've also done that in Serverless.

111
00:09:19.427 --> 00:09:25.560
Real quick, so there's a couple
a questions about custom validators and,

112
00:09:34.706 --> 00:09:36.859
So you can absolutely
do custom validators.

113
00:09:36.859 --> 00:09:40.073
Let me see if I find a,

114
00:09:49.641 --> 00:09:53.393
So, if you go into the documentation, so

115
00:09:53.393 --> 00:09:58.229
adding custom validators
to template driven forms.

116
00:09:58.229 --> 00:10:01.983
If you wanna read more about that,
you can absolutely do that.

117
00:10:01.983 --> 00:10:09.023
And then, And

118
00:10:09.023 --> 00:10:15.561
I was hoping to talk about
this a little bit later.

119
00:10:15.561 --> 00:10:20.069
So in terms of control value accessor,
Ahmed,

120
00:10:20.069 --> 00:10:26.056
I'm still working to get that
into the workshop, we'll see.

121
00:10:26.056 --> 00:10:29.603
But if not, I will absolutely
post that into the code for you.

122
00:10:29.603 --> 00:10:31.643
So that's in my queue.

123
00:10:31.643 --> 00:10:34.718
With that said, let's move on.

