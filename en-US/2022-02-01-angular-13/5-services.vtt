WEBVTT

1
00:00:00.908 --> 00:00:04.086
We've talked about directives,
let's talk about services.

2
00:00:04.086 --> 00:00:08.654
And a service is generally more

3
00:00:08.654 --> 00:00:12.876
often than not just a class.

4
00:00:12.876 --> 00:00:17.210
And this applies to
more than just Angular.

5
00:00:17.210 --> 00:00:21.096
You should do one specific thing, and so

6
00:00:21.096 --> 00:00:26.479
you want to have single
purpose fine grained services.

7
00:00:26.479 --> 00:00:31.966
As well, and I feel like this
deserves its own slide but

8
00:00:31.966 --> 00:00:36.258
I'm going to just say it here,
is that your

9
00:00:36.258 --> 00:00:41.533
component should do two things and
only two things.

10
00:00:41.533 --> 00:00:45.482
One, consume just enough data
to render its templates,

11
00:00:45.482 --> 00:00:49.525
capture user events, and
then delegate that elsewhere.

12
00:00:49.525 --> 00:00:55.195
The reason why I bring that up here
is because your business logic

13
00:00:55.195 --> 00:01:02.138
needs to happen outside of the component,
which happens inside of a service.

14
00:01:02.138 --> 00:01:06.298
So your services end up you
have very very razor thin

15
00:01:06.298 --> 00:01:10.282
components in these kind
of rich domain models.

16
00:01:10.282 --> 00:01:14.002
That are built out via services
elsewhere in the application.

17
00:01:14.002 --> 00:01:18.229
So the burden of business
logic is alleviated off of

18
00:01:18.229 --> 00:01:22.173
the component shoulders
input into services.

19
00:01:22.173 --> 00:01:28.438
It is considered best practice to
always use injectable with a service so

20
00:01:28.438 --> 00:01:32.249
that the metadata is generated correctly.

21
00:01:32.249 --> 00:01:37.466
If you generate a service from the CLI,
this is what you're going to get.

22
00:01:37.466 --> 00:01:39.454
I can't think of any reason not to do it.

23
00:01:39.454 --> 00:01:41.364
So just do it.

24
00:01:41.364 --> 00:01:46.168
Also by using the provideIn root property,
which,

25
00:01:46.168 --> 00:01:52.839
if you generate a service from the CLI,
it's going to have this in here.

26
00:01:52.839 --> 00:01:58.276
What you're doing is you're specifying
that Angular should provide or

27
00:01:58.276 --> 00:02:02.120
make that service available
to the root injector.

28
00:02:02.120 --> 00:02:07.854
So, there is this concept of
being able to make a service

29
00:02:07.854 --> 00:02:15.308
only available to a specific kind of
subtree or slice of an application.

30
00:02:15.308 --> 00:02:18.850
Again, this would be the exception,
not the rule.

31
00:02:18.850 --> 00:02:23.768
And so to make things easier that before
you would have to essentially explicitly

32
00:02:23.768 --> 00:02:28.394
define your services in kind of every
single module or even to the point of one

33
00:02:28.394 --> 00:02:32.477
point, even if a component used to
service you had to inject it in.

34
00:02:32.477 --> 00:02:37.921
But by using provideIn root that makes
it available to the root injector

35
00:02:37.921 --> 00:02:43.108
which makes it a lot easier to wire
it up into your main application.

36
00:02:43.108 --> 00:02:48.583
So what we have here injectable
you can see here providedeIn root,

37
00:02:48.583 --> 00:02:53.082
so we're just calling
the injectable Decorator, and

38
00:02:53.082 --> 00:02:57.801
we're saying make this
available to the root injector.

39
00:02:57.801 --> 00:03:03.836
And under the hood,
it looks very much like a component and

40
00:03:03.836 --> 00:03:09.391
that we have properties
methods in the constructor.

41
00:03:09.391 --> 00:03:11.408
In this case we're injecting HTTP client.

42
00:03:11.408 --> 00:03:18.377
Which I think it's probably not too hard
to figure out that this is responsible for

43
00:03:18.377 --> 00:03:24.044
communicating with a courses API and
fetching all of the courses.

44
00:03:24.044 --> 00:03:30.757
But the main thing here is injectable
metadata provided in root.

45
00:03:30.757 --> 00:03:32.540
So now it's available for everything.

46
00:03:32.540 --> 00:03:34.535
Because it's in the root injector.

47
00:03:34.535 --> 00:03:37.799
The question is, if you provided in root,

48
00:03:37.799 --> 00:03:42.251
where else can you provide
a service if I'm not mistaken?

49
00:03:42.251 --> 00:03:45.176
I think that's the question
like what are the other cases?

50
00:03:45.176 --> 00:03:49.383
And so
you actually answered your question in

51
00:03:49.383 --> 00:03:53.820
that you can provide it
into the root injector.

52
00:03:53.820 --> 00:03:59.049
So it's available for everything or
you can provide it and

53
00:03:59.049 --> 00:04:05.039
make it available specifically for
like some kind of a sub module.

54
00:04:05.039 --> 00:04:10.359
And so where that gets interesting is,

55
00:04:10.359 --> 00:04:15.366
let's say you have a users service.

56
00:04:15.366 --> 00:04:19.960
But you have two branches of
the application that depending on,

57
00:04:19.960 --> 00:04:25.151
let's say, your access level,
that the business rules that govern how

58
00:04:25.151 --> 00:04:30.279
you're able to interact with
the application are totally different.

59
00:04:30.279 --> 00:04:34.688
And so this is one of the beautiful
things about dependency injection,

60
00:04:34.688 --> 00:04:39.463
is that you might have like an employee
user service to where if you're on this

61
00:04:39.463 --> 00:04:44.531
tree of the application you get a specific
user service that has business logic for

62
00:04:44.531 --> 00:04:45.653
a say employees.

63
00:04:45.653 --> 00:04:50.733
Then let's say you have
like a contractor You know,

64
00:04:50.733 --> 00:04:55.126
business logic that's totally different.

65
00:04:55.126 --> 00:04:59.829
And so what you would do then
is you would converge on like

66
00:04:59.829 --> 00:05:05.134
a naming convention of user service,
but then under the hood,

67
00:05:05.134 --> 00:05:11.161
depending on where somebody is,
you would just swap out that service.

68
00:05:11.161 --> 00:05:14.598
And then somebody would just get
that specific functionality.

69
00:05:14.598 --> 00:05:19.952
So, imagine you program,
let's say five services to an interface.

70
00:05:19.952 --> 00:05:23.011
And then depending on where you are,

71
00:05:23.011 --> 00:05:28.744
you can inject the appropriate service for
that particular module.

72
00:05:28.744 --> 00:05:31.895
Or even at a component level,

73
00:05:31.895 --> 00:05:36.567
you can override a service being injected.

74
00:05:36.567 --> 00:05:41.560
So actually, the injector is every
component even has access to

75
00:05:41.560 --> 00:05:46.552
the injector and you can override
that essentially at runtime,

76
00:05:46.552 --> 00:05:51.738
which by the way, when we get into
testing we do quite frequently.

77
00:05:51.738 --> 00:05:56.734
So, that is the use case,
is that you want to provide one version of

78
00:05:56.734 --> 00:06:02.200
the service to maybe one part of
the application or all the application.

79
00:06:02.200 --> 00:06:05.562
But let's say in a sub part of it that
you want to actually override it and

80
00:06:05.562 --> 00:06:09.148
you want to keep the interface and all
the naming convention the same you just

81
00:06:09.148 --> 00:06:10.960
want to use a different version of that

