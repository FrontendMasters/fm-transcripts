WEBVTT

1
00:00:00.230 --> 00:00:05.403
In this example we are going
to talk about implementing

2
00:00:05.403 --> 00:00:10.247
a control value accessor
control inside of a form.

3
00:00:10.247 --> 00:00:15.016
So, one of the things that I love
about front end Masters is that,

4
00:00:15.016 --> 00:00:19.963
I get to have a lot of really
interesting interactions with students

5
00:00:19.963 --> 00:00:22.950
even in a live workshop format.

6
00:00:22.950 --> 00:00:26.009
That individuals are able
to ask questions and

7
00:00:26.009 --> 00:00:31.920
a lot of times I'm able to respond to them
in real time, which is very, very cool.

8
00:00:31.920 --> 00:00:37.705
And this one in particular was
requested by one of my friends,

9
00:00:37.705 --> 00:00:42.487
he asked me on Twitter could
you show a control value

10
00:00:42.487 --> 00:00:46.957
accessor example, and so
I am happy to comply.

11
00:00:46.957 --> 00:00:53.131
So what we have here is a custom
input that we want to create,

12
00:00:53.131 --> 00:00:58.563
so the idea behind a control
value accessor is that,

13
00:00:58.563 --> 00:01:01.650
you're taking a component,

14
00:01:01.650 --> 00:01:06.588
that ideally you can
interact with in some way,

15
00:01:06.588 --> 00:01:10.169
and you're making it compliant or

16
00:01:10.169 --> 00:01:15.231
you're essentially fitting
it in such a way that

17
00:01:15.231 --> 00:01:19.947
it can fit inside of
a standard angular form.

18
00:01:19.947 --> 00:01:25.170
And so a good example of this might
be if you had a jQuery component

19
00:01:25.170 --> 00:01:30.393
that you were wrapping that you
wanted to just be able to drop in,

20
00:01:30.393 --> 00:01:34.387
and bind to it using ngmodel
into a data binding.

21
00:01:34.387 --> 00:01:36.600
Well you can absolutely do that.

22
00:01:36.600 --> 00:01:42.314
There's just a little bit of a layer
that you need to implement in order for

23
00:01:42.314 --> 00:01:44.120
that to work.

24
00:01:44.120 --> 00:01:48.845
And so
what I have here is a custom input and

25
00:01:48.845 --> 00:01:52.760
what I'm doing is inside of this,

26
00:01:52.760 --> 00:01:57.904
I'm generating a random
key on an interval.

27
00:01:57.904 --> 00:02:02.695
So I thought about like, what would be
an example that might be plausible to

28
00:02:02.695 --> 00:02:06.193
anchor this into something
that would be believable,

29
00:02:06.193 --> 00:02:09.100
make sense in that you
might actually use it.

30
00:02:09.100 --> 00:02:12.729
And so one of the things that I
deal with frequently is that,

31
00:02:12.729 --> 00:02:18.090
I'm trying to access something and
have two factor authentication setup.

32
00:02:18.090 --> 00:02:24.070
And I have to open up an app,
and I get a random sequence of

33
00:02:24.070 --> 00:02:29.690
characters that I need to
then input into the field.

34
00:02:29.690 --> 00:02:34.590
So I'm just imagining a scenario
where you are entering in a form.

35
00:02:34.590 --> 00:02:38.760
And within that you're
randomly generating a key.

36
00:02:38.760 --> 00:02:44.175
So, what I wanna do is take
this particular component,

37
00:02:44.175 --> 00:02:50.600
and I want to make it compliant
with how a form control would work.

38
00:02:50.600 --> 00:02:55.883
And so here you can see that the key
itself is, I believe every five

39
00:02:55.883 --> 00:03:01.860
seconds it's shifting but outside of this,
that nothing is happening.

40
00:03:01.860 --> 00:03:05.941
So by the time we finish this and
we wire this up,

41
00:03:05.941 --> 00:03:10.738
that when this changes here
via ngmodel into a binding,

42
00:03:10.738 --> 00:03:13.720
it will update the outside world.

43
00:03:13.720 --> 00:03:18.690
So if we look real quick here,
we have our custom control.

44
00:03:18.690 --> 00:03:23.700
The name is the key, so this is how
we're tracing this out down here, and

45
00:03:23.700 --> 00:03:28.795
we're passing in the current key, and
what we need is, when this changes

46
00:03:28.795 --> 00:03:33.592
through the ng model kind of channel,
we want to update it down here.

47
00:03:33.592 --> 00:03:38.483
So within our custom control component,

48
00:03:38.483 --> 00:03:42.542
we have a pretty basic component.

49
00:03:42.542 --> 00:03:48.660
I have the key which is what we
are binding to, I have a source stream and

50
00:03:48.660 --> 00:03:53.951
all this is doing is,
it's firing after the first second and

51
00:03:53.951 --> 00:04:00.073
then five seconds after that, and
I've also defined a sub property,

52
00:04:00.073 --> 00:04:03.340
the reason being is on inch on a knit.

53
00:04:04.390 --> 00:04:10.479
I am going to subscribe to
the sources stream, aka timer,

54
00:04:10.479 --> 00:04:15.960
aka ticker, and
I'm just gonna call generate key.

55
00:04:15.960 --> 00:04:19.146
When you call subscribe it returns,

56
00:04:19.146 --> 00:04:24.710
see if they'll tell me here,
I won't know exactly what to say.

57
00:04:24.710 --> 00:04:28.956
So it's a subscription object,
which from here,

58
00:04:28.956 --> 00:04:34.302
then on ngOnDestroy,
being called this.sub.unsubscribe.

59
00:04:34.302 --> 00:04:38.713
So this is just us being good
stewards over our code, and so

60
00:04:38.713 --> 00:04:43.666
that's why I have the sub property here so
that when I subscribe,

61
00:04:43.666 --> 00:04:47.269
I can store a reference
to that subscription and

62
00:04:47.269 --> 00:04:51.258
then unsubscribe when this
is removed off the page.

63
00:04:51.258 --> 00:04:56.042
Now this generate method is,
document driven development or

64
00:04:56.042 --> 00:05:01.286
Stack Overflow Driven Development sod,
in that I basically said,

65
00:05:01.286 --> 00:05:06.360
how do I generate a random character
of strings, and here we are.

66
00:05:06.360 --> 00:05:11.351
So Math.random().toString(36).substr(2,
8).

67
00:05:11.351 --> 00:05:16.506
And so it's good enough,
I don't really care what's in here,

68
00:05:16.506 --> 00:05:21.373
and then I have a method generate key,
which then sets the key

69
00:05:21.373 --> 00:05:25.963
property to whatever is
returned from this .generate.

70
00:05:25.963 --> 00:05:33.110
So, a pretty cool component but it is
certainly not form control compliant.

71
00:05:33.110 --> 00:05:36.203
And so what we're going to do is,

72
00:05:36.203 --> 00:05:40.841
we are going to implement
one more interface, and

73
00:05:40.841 --> 00:05:46.253
this interface is going to be
the value control accessor,

74
00:05:46.253 --> 00:05:51.223
I mean just double check my
notes to make sure I do not go

75
00:05:51.223 --> 00:05:56.192
off the rails here, and
get busted for fake news it's

76
00:05:56.192 --> 00:06:01.626
actually control value accessor,
there we go, aright?

77
00:06:01.626 --> 00:06:08.570
And notice here, this is very upset
because we are missing some properties.

78
00:06:08.570 --> 00:06:15.795
So, right value, register on change,
register on touch.

79
00:06:15.795 --> 00:06:18.878
And so we'll go down at the bottom and

80
00:06:18.878 --> 00:06:23.170
we are going to start to
implement this interface.

81
00:06:24.240 --> 00:06:27.780
So the first one we're
gonna do is write value.

82
00:06:29.130 --> 00:06:33.757
And this is going to take,
in this case I'm

83
00:06:33.757 --> 00:06:38.257
going to update this to take a string, and

84
00:06:38.257 --> 00:06:43.930
we're going to say,
this.key = key, all right?

85
00:06:43.930 --> 00:06:49.034
And so when this loads, and
this initial load is that

86
00:06:49.034 --> 00:06:56.930
it will write the value to the internal
key property, so that it is updated.

87
00:06:56.930 --> 00:07:03.930
And from here,
we need to register onChange.

88
00:07:03.930 --> 00:07:10.380
And all we're gonna do here is we're
just gonna say, this.onChange = fn.

89
00:07:10.380 --> 00:07:16.792
And so
this is just a convenient method here,

90
00:07:16.792 --> 00:07:22.040
but we will fix this in just a moment.

91
00:07:22.040 --> 00:07:26.145
So registerOnTouched, and

92
00:07:26.145 --> 00:07:30.081
this.OnTouch = function

93
00:07:33.345 --> 00:07:36.380
And so now it's saying well,
where is this?

94
00:07:36.380 --> 00:07:40.020
And so what we're gonna do here,

95
00:07:40.020 --> 00:07:45.090
is we're going to define onChange,
Any, and

96
00:07:45.090 --> 00:07:49.901
we are basically decide
this to be a no op, so

97
00:07:49.901 --> 00:07:54.841
we're just going with
the absolute simplest

98
00:07:54.841 --> 00:07:59.931
form of this that we can so,
no op, here we go.

99
00:08:03.009 --> 00:08:07.013
And we should be compliant now,

100
00:08:07.013 --> 00:08:15.190
we have implemented the control
value accessor interface.

101
00:08:15.190 --> 00:08:20.339
But what we also need to do is,
we need to update

102
00:08:20.339 --> 00:08:26.690
the metadata to define this
as a control value accessor.

103
00:08:26.690 --> 00:08:32.211
So we are going to go providers,
and within this,

104
00:08:32.211 --> 00:08:37.600
we're going to define a new
object which is going

105
00:08:37.600 --> 00:08:42.726
to go provide, and so
Engie value accessor and

106
00:08:42.726 --> 00:08:48.772
we're going to go use existing,
and forward ref, and

107
00:08:48.772 --> 00:08:53.900
then from here,
we're just going to pass in or

108
00:08:53.900 --> 00:08:58.650
reference the custom control component.

109
00:09:00.410 --> 00:09:06.341
And then we're going to
say that we are going

110
00:09:06.341 --> 00:09:11.160
to allow multi: true, all right?

111
00:09:11.160 --> 00:09:17.062
Let's save this, and
let's just take a peek at our code and

112
00:09:17.062 --> 00:09:19.669
see what this looks like.

113
00:09:21.440 --> 00:09:29.477
So if I refresh this, yes if you saw real
quick just dial in current key boom,

114
00:09:29.477 --> 00:09:35.001
so just for
a second we were able to write that value,

115
00:09:35.001 --> 00:09:38.540
and then the key cycle took over.

116
00:09:38.540 --> 00:09:42.810
So we need to wire this
up a little better.

117
00:09:42.810 --> 00:09:43.770
So back into our code.

118
00:09:45.180 --> 00:09:50.330
We can go into our generate key.

119
00:09:50.330 --> 00:09:55.607
And what we're going to do is we are going

120
00:09:55.607 --> 00:10:00.590
to update this to call this onChange.

121
00:10:00.590 --> 00:10:03.511
We're just gonna pass in this key.

122
00:10:03.511 --> 00:10:04.510
There we go.

123
00:10:04.510 --> 00:10:09.906
Now, if we come back you'll
notice here that when

124
00:10:09.906 --> 00:10:14.794
it changes, it's also changing down here.

125
00:10:17.319 --> 00:10:20.822
Very cool, and if I click,
I can kind of subvert this and

126
00:10:20.822 --> 00:10:25.684
we can do it faster than the cycle if you
wanted to manually generate a new key.

127
00:10:27.245 --> 00:10:28.745
We could do that.

128
00:10:28.745 --> 00:10:33.897
Now, one thing that I want to just call

129
00:10:33.897 --> 00:10:39.375
out here is if we look over this element.

130
00:10:41.685 --> 00:10:47.709
You'll notice here that even
though I've touched it,

131
00:10:47.709 --> 00:10:53.100
here like It's still
registering as untouched.

132
00:10:54.570 --> 00:11:02.509
And so if you want to hook into the
validation portions of the form control,

133
00:11:02.509 --> 00:11:07.180
then we need to add in
some additional code.

134
00:11:08.200 --> 00:11:12.646
So let's go back into our example, and

135
00:11:12.646 --> 00:11:18.708
from here we are going to go
into the template itself,

136
00:11:18.708 --> 00:11:23.440
and we're going to do a couple of things.

137
00:11:23.440 --> 00:11:27.920
So, on the input itself,
I'm going to add in,

138
00:11:27.920 --> 00:11:31.514
I'm going to block, bind, to blur.

139
00:11:31.514 --> 00:11:36.872
And from here,
I'm just going to call onTouch.

140
00:11:36.872 --> 00:11:42.702
And what I'm also going
to do is on the button,

141
00:11:42.702 --> 00:11:47.944
I'm going to bind to the scope mouse out.

142
00:11:47.944 --> 00:11:55.971
And we're also going to call onTouch,
okay.

143
00:11:55.971 --> 00:12:01.754
And now, if we come back to our example,

144
00:12:01.754 --> 00:12:09.252
I'm gonna pull this back up and
let me inspect this.

145
00:12:13.491 --> 00:12:15.020
So it's untouched here.

146
00:12:16.180 --> 00:12:20.164
And when I come over here,
and I mouse over,

147
00:12:20.164 --> 00:12:23.718
you saw that the minute that I did that,

148
00:12:23.718 --> 00:12:28.674
that the untouched property
immediately came off so,

149
00:12:28.674 --> 00:12:34.384
we'll do this one more time so
you'll see here nguntouched and

150
00:12:34.384 --> 00:12:37.532
then I'll go here and it's gone.

151
00:12:37.532 --> 00:12:42.282
So now it's ngtouch and so
this is how we hook in to,

152
00:12:42.282 --> 00:12:47.252
not only communicating the value but
the validity and

153
00:12:47.252 --> 00:12:54.230
the state of the control itself and so
just to reiterate or review the code.

154
00:12:55.760 --> 00:12:56.540
Very quickly.

155
00:12:57.940 --> 00:13:02.490
What we've done is the first step,
I believe is to implement your

156
00:13:02.490 --> 00:13:06.520
control value accessor, and
then make it compliant.

157
00:13:06.520 --> 00:13:10.310
And so you have really three
things you need to do.

158
00:13:10.310 --> 00:13:13.130
Write value, so that allows you
to write the initial value.

159
00:13:13.130 --> 00:13:14.690
This is pretty simple.

160
00:13:14.690 --> 00:13:19.926
And then from here, register on changes,
register on touched and

161
00:13:19.926 --> 00:13:25.180
I basically just put a no op in there and
that is good enough.

162
00:13:25.180 --> 00:13:30.293
And then from here,
when you wanna update, the value itself

163
00:13:30.293 --> 00:13:35.605
you just call this onChange, and
if you want to set it to touch,

164
00:13:35.605 --> 00:13:40.620
or that has been touched,
you can then just call onTouch.

165
00:13:40.620 --> 00:13:45.914
And so what we've done at this point is we

166
00:13:45.914 --> 00:13:51.061
have created a brand new form control.

167
00:13:51.061 --> 00:13:55.820
But one more thing, so
I just totally pulled the Steve Jobs here.

168
00:13:55.820 --> 00:14:00.180
Notice that when I type,
nothing is happening, it's not reflecting.

169
00:14:00.180 --> 00:14:06.430
So thinking cap on, how would we fix this?

170
00:14:06.430 --> 00:14:11.070
Well, we would need to
take whatever we type and

171
00:14:11.070 --> 00:14:15.210
push that into an on changes event.

172
00:14:15.210 --> 00:14:19.310
So let's go back to our code real
quick and let's tighten this up.

173
00:14:19.310 --> 00:14:23.397
And underneath of this,

174
00:14:23.397 --> 00:14:30.028
we're just going to go ngModelChange.

175
00:14:30.028 --> 00:14:36.942
And we're going to call onChange,
we're just going to pass in the event,

176
00:14:36.942 --> 00:14:43.770
so let me just double check my
spelling here, ng model change.

177
00:14:43.770 --> 00:14:49.215
And we're just calling on change yet
again, back here.

178
00:14:49.215 --> 00:14:50.761
And now when I type this in,

179
00:14:50.761 --> 00:14:54.090
what I would expect is that
it updates down here as well.

180
00:14:54.090 --> 00:14:58.614
So you just need to ask yourself,
where do I want to surface,

181
00:14:58.614 --> 00:15:02.890
a meaningful change to the model and
then call on change.

182
00:15:02.890 --> 00:15:06.620
So in this case we are doing
it in a couple of places.

183
00:15:06.620 --> 00:15:11.199
So, when you type it directly in,
you need to capture that on change.

184
00:15:11.199 --> 00:15:15.992
You can also do on touch to set it to
touched, when we click the button we're

185
00:15:15.992 --> 00:15:20.786
generating the key but we're also
updating it by calling this on change and

186
00:15:20.786 --> 00:15:25.830
so, there you go my friend this is how you
do a control value accessor in Angular

