WEBVTT

1
00:00:00.100 --> 00:00:04.566
Let's talk about Component Fundamentals,
which is kind of a,

2
00:00:04.566 --> 00:00:07.139
really it's a multifaceted piece.

3
00:00:07.139 --> 00:00:13.056
But it is the, I think,
when you're looking to get into Angular,

4
00:00:13.056 --> 00:00:16.136
so this is I'm freestyling here.

5
00:00:16.136 --> 00:00:21.578
That if,
as a junior developer; somebody understood

6
00:00:21.578 --> 00:00:26.086
how to generate and
build basic components.

7
00:00:26.086 --> 00:00:32.580
You, in my opinion, are in a place
to be paid for that service.

8
00:00:32.580 --> 00:00:36.936
And so this is,
what's pretty interesting about,

9
00:00:36.936 --> 00:00:40.995
just talking about
components is that I've seen

10
00:00:40.995 --> 00:00:45.857
some very junior developers,
brand new to programming.

11
00:00:45.857 --> 00:00:50.619
And they are still learning
how to do state management,

12
00:00:50.619 --> 00:00:53.869
and Graph QL, and all the hard stuff.

13
00:00:53.869 --> 00:00:58.787
But they were rock solid
in creating components,

14
00:00:58.787 --> 00:01:02.930
and I was able to use them immediately.

15
00:01:02.930 --> 00:01:07.654
And I've seen junior developers
effectively used on projects

16
00:01:07.654 --> 00:01:12.510
because they were able to go and
build out the component layer.

17
00:01:12.510 --> 00:01:18.215
And so, in an Angular application,
obviously, we have various levels

18
00:01:18.215 --> 00:01:23.546
stacks degrees of complexity, but
being an opportunist that I am,

19
00:01:23.546 --> 00:01:29.156
that everything that I do in the back
of my mind is, I'm asking myself,

20
00:01:29.156 --> 00:01:33.949
can this provide value that's
the Mark Urbanski question.

21
00:01:33.949 --> 00:01:37.839
And then the Lucas Rubik key question is,
can I convert this into money?

22
00:01:37.839 --> 00:01:43.011
And so the CLI is essentially
a micro money printer.

23
00:01:43.011 --> 00:01:48.052
But by extension of the component,
being able to generate components for

24
00:01:48.052 --> 00:01:53.010
people looking to get into development,
this is a great place to start,

25
00:01:53.010 --> 00:01:58.160
in something that is valuable and
can be utilized almost immediately.

26
00:01:58.160 --> 00:02:03.540
So with that said,
let's get the party started.

27
00:02:03.540 --> 00:02:04.600
Component Fundamentals.

28
00:02:05.730 --> 00:02:10.974
And so, we've seen this slide
in a previous life, but

29
00:02:10.974 --> 00:02:16.730
the anatomy of a component
is pretty straightforward.

30
00:02:16.730 --> 00:02:21.887
You have a component class,
you have your template that

31
00:02:21.887 --> 00:02:28.924
is wired together using metadata which
is very, very simple in most cases.

32
00:02:28.924 --> 00:02:35.139
And then outside of the structure piece
you have the communication channels,

33
00:02:35.139 --> 00:02:41.600
which is facilitated via binding,
event binding and property binding.

34
00:02:41.600 --> 00:02:47.013
Now, just as much as I said
the Angular CLI, exclamation point equals,

35
00:02:47.013 --> 00:02:52.630
equals, in other words, strict inequality,
it does not equal a crutch.

36
00:02:53.660 --> 00:02:59.209
I want to be very adamant,
that using classes,

37
00:02:59.209 --> 00:03:02.540
i.e, component classes,

38
00:03:02.540 --> 00:03:07.070
this does not equate to inheritance.

39
00:03:07.070 --> 00:03:12.970
And so for me,
I prefer functional style programming.

40
00:03:12.970 --> 00:03:17.207
And when I have an opportunity to
program in a functional style,

41
00:03:17.207 --> 00:03:20.355
that's what I'm going
to gravitate towards.

42
00:03:20.355 --> 00:03:23.407
In JavaScript, believe it or not,

43
00:03:23.407 --> 00:03:29.130
even though it looks like Java,
it is a lisp in wolf's clothing.

44
00:03:29.130 --> 00:03:33.504
Is that JavaScript is a very
dynamic functional language,

45
00:03:33.504 --> 00:03:37.350
you can do some really
cool things with it.

46
00:03:37.350 --> 00:03:39.360
You still can do cool things with it.

47
00:03:39.360 --> 00:03:44.630
But my reservation when
ESX was coming along and

48
00:03:44.630 --> 00:03:49.899
TypeScript, is that if
we introduce classes,

49
00:03:49.899 --> 00:03:55.590
it's going to pave the way for
inheritance.

50
00:03:55.590 --> 00:04:00.853
And I think that inheritance is a very,
very slippery slope

51
00:04:00.853 --> 00:04:06.830
because of the level of indirection and
coupling that it creates.

52
00:04:06.830 --> 00:04:12.438
So just because we're using classes,
if you're coming from Java and

53
00:04:12.438 --> 00:04:15.859
you have an inheritance fetish or C sharp,

54
00:04:15.859 --> 00:04:21.580
resist the urge to use inheritance and
instead favorite composition.

55
00:04:22.920 --> 00:04:27.503
What I recommend is that, actually if
you go read any design pattern book,

56
00:04:27.503 --> 00:04:31.690
they talk about favor
composition over inheritance.

57
00:04:31.690 --> 00:04:37.371
That as an organizational mechanism,
a class is fantastic,

58
00:04:37.371 --> 00:04:43.163
as a mechanism to inherit
functionality from something else,

59
00:04:43.163 --> 00:04:45.474
be very, very careful.

60
00:04:45.474 --> 00:04:49.522
I do not recommend doing that and
avoiding it at all cost.

61
00:04:49.522 --> 00:04:52.800
You can achieve the same
thing via composition, and

62
00:04:52.800 --> 00:04:56.260
it's a lot clearer what is happening.

63
00:04:56.260 --> 00:05:03.380
So with that said, when you have
a component, you have a component class.

64
00:05:03.380 --> 00:05:08.389
And so the beginning of a class is
an ES6 class, and properties and

65
00:05:08.389 --> 00:05:14.890
methods on the component class are now
available for binding in the template.

66
00:05:14.890 --> 00:05:19.290
So the first thing you do is
you define your class, so

67
00:05:19.290 --> 00:05:22.895
in our case export class items component.

68
00:05:22.895 --> 00:05:27.910
The next thing that you do is,
you're going to import the core

69
00:05:27.910 --> 00:05:34.100
Angular dependencies that you need
to make this a functional component.

70
00:05:34.100 --> 00:05:38.550
So obviously,
component from core is a big one.

71
00:05:38.550 --> 00:05:41.410
But any third party dependencies,

72
00:05:41.410 --> 00:05:46.079
any custom dependencies,
you need to bring those in, and

73
00:05:46.079 --> 00:05:51.770
I recommend pulling in just what you need,
and not all the things.

74
00:05:51.770 --> 00:05:55.038
So what this does is if
you have a dependency or

75
00:05:55.038 --> 00:05:59.772
you're pulling in dependencies,
be very explicit about that.

76
00:05:59.772 --> 00:06:06.920
A very good example of where not to do
that, and I don't believe you can anymore,

77
00:06:06.920 --> 00:06:11.840
but for instance,
RxJS has like 150 operators.

78
00:06:11.840 --> 00:06:15.752
Well, at one point, what you would
do is import star from RxJS.

79
00:06:15.752 --> 00:06:18.574
And even though you're
using maybe two operators,

80
00:06:18.574 --> 00:06:23.100
you've just imported the whole library,
and that's very, very inefficient.

81
00:06:23.100 --> 00:06:30.279
So I recommend, be very explicit about
what you're using, and import just that.

82
00:06:30.279 --> 00:06:35.763
So here,
import component from Angular core,

83
00:06:35.763 --> 00:06:40.160
and then you will decorate the class.

84
00:06:40.160 --> 00:06:42.850
So this is where the metadata comes in.

85
00:06:42.850 --> 00:06:47.271
We turn our class into something that
Angular can use by decorating it with

86
00:06:47.271 --> 00:06:50.100
Angular specific metadata, surprise.

87
00:06:50.100 --> 00:06:53.344
So @Component, and we can also as I said,

88
00:06:53.344 --> 00:06:56.780
we can decorate our properties and
methods.

89
00:06:56.780 --> 00:07:00.860
So the two most common ones are input and
output.

90
00:07:00.860 --> 00:07:05.861
And so here we're saying I
have this component class, and

91
00:07:05.861 --> 00:07:12.292
I wanna decorate it, or essentially
Angularfy it by adding in a selector,

92
00:07:12.292 --> 00:07:19.150
that Angular can then use to attach it to
a DOM, the template URL and style URLs.

93
00:07:21.810 --> 00:07:25.660
And then from there,
you need to expose this component.

94
00:07:25.660 --> 00:07:27.350
So we declare it,

95
00:07:27.350 --> 00:07:33.450
we add it to the declarations
array in the appropriate ng model.

96
00:07:33.450 --> 00:07:36.610
So in this case,
we're doing an app module.

97
00:07:36.610 --> 00:07:41.612
But we would add that to
the declarations array,

98
00:07:41.612 --> 00:07:47.835
so that once it's declared,
then it is now available for use

99
00:07:51.377 --> 00:07:55.971
And as I said, when you have properties or

100
00:07:55.971 --> 00:08:02.945
methods on a component class,
that is available for binding.

101
00:08:02.945 --> 00:08:05.460
So in my template we'll
see this in a little bit.

102
00:08:05.460 --> 00:08:10.220
I could actually bind to items,
or selected item or

103
00:08:10.220 --> 00:08:13.220
call reset item or select item.

104
00:08:13.220 --> 00:08:15.095
And with a dependency, so

105
00:08:15.095 --> 00:08:20.220
if your component has a dependency
that is injected via the constructor

