WEBVTT

1
00:00:00.720 --> 00:00:05.302
In a components lifespan,
there's a number of

2
00:00:05.302 --> 00:00:11.170
things that can happen,
that we want to know about.

3
00:00:11.170 --> 00:00:15.950
So, is the class initialized?

4
00:00:15.950 --> 00:00:18.110
Is the template rendered?

5
00:00:18.110 --> 00:00:22.370
Has something happened to the template?

6
00:00:22.370 --> 00:00:28.291
And so one of the most common
use cases for a lifecycle hook,

7
00:00:28.291 --> 00:00:34.470
is if you have a component and
you instantiate a component.

8
00:00:34.470 --> 00:00:36.240
So this is class and template.

9
00:00:37.490 --> 00:00:40.720
Your constructor is fired immediately.

10
00:00:40.720 --> 00:00:47.370
So, the minute you go new anything, that
constructor gets fired instantaneously.

11
00:00:47.370 --> 00:00:55.044
But what happens is dependent
on data that is not there yet.

12
00:00:55.044 --> 00:01:00.211
And so this was a huge problem initially,
when you would reference

13
00:01:00.211 --> 00:01:06.495
some form of data in the constructor and
it wasn't there yet, it didn't exist.

14
00:01:06.495 --> 00:01:13.120
And so this is where we move this into an
appropriate lifecycle hook that says hey,

15
00:01:13.120 --> 00:01:18.123
everything has been initialized,
now you can use this data.

16
00:01:18.123 --> 00:01:22.787
So this is implemented as
methods on the component class.

17
00:01:22.787 --> 00:01:28.447
And you should not call these directly
like they are implicitly called,

18
00:01:28.447 --> 00:01:31.334
unless you're writing unit tests.

19
00:01:31.334 --> 00:01:35.241
And in that case,
you can actually manually call

20
00:01:35.241 --> 00:01:40.470
a lifecycle hook to trigger
some sort of functionality.

21
00:01:40.470 --> 00:01:45.330
What I also recommend is that within
your lifecycle hook, that you're

22
00:01:45.330 --> 00:01:50.110
just using that as a hook specifically
to delegate to something else.

23
00:01:50.110 --> 00:01:53.363
So, I rarely will put logic or

24
00:01:53.363 --> 00:01:58.540
complex logic, inside of a lifecycle hook.

25
00:01:58.540 --> 00:02:05.060
And so, this is something that I see
frequently, is I'll see like MG on a net.

26
00:02:05.060 --> 00:02:10.042
And there will be like 200 lines of code
in there of the setup this, setup this,

27
00:02:10.042 --> 00:02:11.573
setup, the setup this.

28
00:02:11.573 --> 00:02:14.190
And one, that's really hard to test.

29
00:02:14.190 --> 00:02:16.770
You've broken the single
responsibility principle.

30
00:02:16.770 --> 00:02:22.490
And there's probably nested logic,
and none of that code is portable.

31
00:02:22.490 --> 00:02:28.634
And so, your lifecycle hooks, and
I felt like I should update the slide,

32
00:02:28.634 --> 00:02:33.591
is that these are implicitly called and
should simply exist

33
00:02:33.591 --> 00:02:38.270
to delegate to some other
independent functionality.

34
00:02:38.270 --> 00:02:42.230
So if you're setting up, for
instance, an observable stream,

35
00:02:42.230 --> 00:02:45.398
you don't have to set that
up in the lifecycle hook,

36
00:02:45.398 --> 00:02:50.255
encapsulate that into a method and
then call that from the lifecycle hook.

37
00:02:50.255 --> 00:02:52.435
So, that was free of charge.

38
00:02:52.435 --> 00:02:54.198
I just thought of it.

39
00:02:54.198 --> 00:02:59.461
But be really careful about putting
complex setup logic in your constructor or

40
00:02:59.461 --> 00:03:01.624
in any kind of a lifecycle hook.

41
00:03:01.624 --> 00:03:06.792
They should just be there to delegate to
some other functionality and call that.

42
00:03:10.095 --> 00:03:15.527
When you are using a lifecycle hook,
you'll notice that we used,

43
00:03:15.527 --> 00:03:20.570
for instance, let me pull this up,
implements OnInit.

44
00:03:20.570 --> 00:03:24.278
And so using the lifecycle interfaces,

45
00:03:24.278 --> 00:03:28.213
this is optional, but it is recommended.

46
00:03:28.213 --> 00:03:33.472
This allows one, the angular language
services, the TypeScript compiler

47
00:03:33.472 --> 00:03:38.826
as well as other developers, to have
a better insight of what's happening.

48
00:03:38.826 --> 00:03:44.060
And you get all the benefits from
TypeScript in the underlying tooling.

49
00:03:44.060 --> 00:03:48.890
So now,
this is a list of the lifecycle hooks.

50
00:03:49.980 --> 00:03:55.490
And there's a lot of them, you can do some
really sophisticated things with them.

51
00:03:56.970 --> 00:04:00.030
And I'm going to simplify this.

52
00:04:00.030 --> 00:04:05.250
And I am going to just come out and
say that you are going

53
00:04:05.250 --> 00:04:10.821
to use these two lifecycle
hooks more than any other one.

54
00:04:10.821 --> 00:04:16.514
And so ngOnInit, this is called
after the first ngOnChanges.

55
00:04:16.514 --> 00:04:21.407
So essentially,
when the template has been hydrated

56
00:04:21.407 --> 00:04:26.094
at least once,
this is when ngOnInit gets called.

57
00:04:26.094 --> 00:04:31.706
When your component or your directive,
your directive has a component,

58
00:04:31.706 --> 00:04:37.415
is being pulled off the stage or
being destroyed, ngOnDestroy is called.

59
00:04:37.415 --> 00:04:43.400
And this is relevant because if you
have something like an event listener or

60
00:04:43.400 --> 00:04:49.010
an observable stream, English's
pretty good about cleaning it up.

61
00:04:49.010 --> 00:04:53.317
But occasionally, you,
especially if performance or

62
00:04:53.317 --> 00:04:55.973
memory consumption is a problem,

63
00:04:55.973 --> 00:05:00.552
this is where you would use this
specific hook to clean up and

64
00:05:00.552 --> 00:05:06.252
tear down any outstanding event
listeners or observable streams, etc.

65
00:05:10.026 --> 00:05:14.991
And so, fairly simple that you can pick

66
00:05:14.991 --> 00:05:19.506
any one of these lifecycle hooks and

67
00:05:19.506 --> 00:05:25.690
you just add them to your
class as a class method.

68
00:05:25.690 --> 00:05:30.298
And you never have to call
these directly because they get

69
00:05:30.298 --> 00:05:34.147
called implicitly under
the hood via Angular.

70
00:05:34.147 --> 00:05:37.114
But this is where by, essentially,

71
00:05:37.114 --> 00:05:42.284
implementing this interface,
you're signaling to Angular,

72
00:05:42.284 --> 00:05:47.278
this is what is happening, and
we're using this interface.

73
00:05:47.278 --> 00:05:53.604
And it's able to make some
compilation decisions based on that.

74
00:05:53.604 --> 00:05:56.642
&gt;&gt; Will we see several lifecycle hooks and

75
00:05:56.642 --> 00:06:00.331
action especially like
the Unsubscribe ones.

76
00:06:00.331 --> 00:06:04.221
&gt;&gt; Well, we will see some,
specifically ngOnInit.

77
00:06:04.221 --> 00:06:08.020
I can do ngOnDestroy, we can see that.

78
00:06:11.090 --> 00:06:15.869
There's a small caveat that
I'll talk about later,

79
00:06:15.869 --> 00:06:19.585
that there are some concessions, well,

80
00:06:19.585 --> 00:06:24.043
I'll say this now,
there are some concessions or

81
00:06:24.043 --> 00:06:29.340
some things that I'm
introducing incrementally.

82
00:06:29.340 --> 00:06:33.843
So that conceptually,
especially for new developers,

83
00:06:33.843 --> 00:06:39.749
it's a lot easier for them to kind of
wrap their mind on what's happening,

84
00:06:39.749 --> 00:06:44.656
or there's an approachable
linear progression that exist.

85
00:06:44.656 --> 00:06:47.888
The the one thing that I will say,

86
00:06:47.888 --> 00:06:53.087
is that right here within
this ngOnInit block that I am

87
00:06:53.087 --> 00:06:58.533
subscribing to an observable stream and
unpacking it.

88
00:06:58.533 --> 00:07:06.212
And then I'm more than likely binding
this to something in the template.

89
00:07:06.212 --> 00:07:12.853
Well, this is for demonstration
purposes because in real life,

90
00:07:12.853 --> 00:07:17.440
what I would actually
I would say it's very,

91
00:07:17.440 --> 00:07:25.066
very rare you would ever see me use
a subscribe block inside of a component.

92
00:07:25.066 --> 00:07:31.714
Because I can pipe this right into
a template using the async pipe.

93
00:07:31.714 --> 00:07:35.315
And as a result, using the async pipe,
that Angular does a really good job of

94
00:07:35.315 --> 00:07:37.580
cleaning it up or
cleaning up that code for you.

95
00:07:37.580 --> 00:07:42.526
So this is where I really
have to use ngOnDestroy

96
00:07:42.526 --> 00:07:47.480
because my components
are as thin as possible.

97
00:07:48.500 --> 00:07:51.551
And I'm leveraging the Angular framework,

98
00:07:51.551 --> 00:07:55.300
specifically the async pipe,
to handle that for me.

99
00:07:55.300 --> 00:07:57.986
There are cases where you need to do it.

100
00:07:57.986 --> 00:08:01.047
But again, this would be the exception,
not the rule.

101
00:08:01.047 --> 00:08:06.045
And so, for instance, if I saw
a situation where somebody was having to

102
00:08:06.045 --> 00:08:09.809
use ngOnDestroy heavily and
they were relying on it.

103
00:08:09.809 --> 00:08:15.812
The very first thing that I would do, and
not to be critical, but just to eliminate

104
00:08:15.812 --> 00:08:21.296
the possibility, is I would check to
see if that is even necessary enough.

105
00:08:21.296 --> 00:08:25.040
Possibly it's indicative
of a larger problem.

106
00:08:25.040 --> 00:08:28.723
So, I do use NngOnInit quite a bit,
but ngOnDestroy,

107
00:08:28.723 --> 00:08:32.887
not as much because when you're
using an observable stream,

108
00:08:32.887 --> 00:08:38.260
you can just pass that right into the
template and you don't need to do that.

109
00:08:38.260 --> 00:08:46.270
So, but I can spin one up at some point
and we can see what that looks like.

110
00:08:46.270 --> 00:08:49.332
So the question is,
is the async pipe a better practice, or

111
00:08:49.332 --> 00:08:53.860
considered the best practice, versus
subscribing in your component class?

112
00:08:53.860 --> 00:08:55.600
And the answer is absolutely yes.

113
00:08:57.190 --> 00:09:00.289
If you are consuming an observable stream,

114
00:09:00.289 --> 00:09:04.489
technically a promise in Angular
we don't do that a bunch.

115
00:09:04.489 --> 00:09:09.685
But observable stream, if you're
going to do it in a reactive fashion,

116
00:09:09.685 --> 00:09:14.028
which is what Angular is designed to be,
I would not unpack it

117
00:09:14.028 --> 00:09:18.654
in the component class,
I just pipe it right into the template.

118
00:09:18.654 --> 00:09:21.343
So, definitely a best practice,

119
00:09:21.343 --> 00:09:26.922
I can show how that works in
the component driven architecture module.

120
00:09:26.922 --> 00:09:33.019
So the question is, is the template
parsed after ngOnInit is run?

121
00:09:33.019 --> 00:09:35.133
And the answer is no.

122
00:09:35.133 --> 00:09:41.917
So, if you have a parent component
that has a child component,

123
00:09:41.917 --> 00:09:50.370
and you're passing in data from the parent
component to the child component.

124
00:09:50.370 --> 00:09:56.355
That template is going to be processed and

125
00:09:56.355 --> 00:10:01.659
where ngOnInit is going to kick off.

126
00:10:01.659 --> 00:10:07.116
So when you have a template that has
data binding, anytime there is data,

127
00:10:07.116 --> 00:10:12.837
that's essentially it's being updated or
it's pushing it in via binding,

128
00:10:12.837 --> 00:10:17.460
is you have ngOnChanges that
is going to essentially fire.

129
00:10:17.460 --> 00:10:19.820
So here's new data, ngOnChanges.

130
00:10:19.820 --> 00:10:21.980
Here's new data ngOnChanges.

131
00:10:21.980 --> 00:10:25.636
Well, you can have a template
that's being rendered.

132
00:10:25.636 --> 00:10:30.851
Typically this happens very fast,
but it's being processed, but

133
00:10:30.851 --> 00:10:36.260
the data hasn't arrived yet or
the template hasn't been satisfied.

134
00:10:36.260 --> 00:10:39.892
So the first ngOnChanges that's fired,

135
00:10:39.892 --> 00:10:45.192
meaning your template is hydrated,
then ngOnInit is fire.

136
00:10:45.192 --> 00:10:50.379
So where ngOnInit is important is not for
the parent component, but

137
00:10:50.379 --> 00:10:55.930
for the child component, is you know
that the templates been hydrated,

138
00:10:55.930 --> 00:11:01.492
now I can make some decision based on
this data that's been passed down.

139
00:11:01.492 --> 00:11:03.521
I will say in the documentation,

140
00:11:03.521 --> 00:11:08.086
the Angular documentation cuz I don't
remember all the life cycle hooks,

141
00:11:08.086 --> 00:11:12.453
but there's a pretty good graphic
that shows the order that it goes in.

142
00:11:12.453 --> 00:11:17.862
But ngOnChanges, that means your template
has its first data that's been passed in,

143
00:11:17.862 --> 00:11:20.620
so it's hydrated, render then ngOnInit.

