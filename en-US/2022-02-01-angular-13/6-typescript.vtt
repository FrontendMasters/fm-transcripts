WEBVTT

1
00:00:00.290 --> 00:00:02.290
Let's talk about TypeScript for
just a moment.

2
00:00:02.290 --> 00:00:05.486
And interestingly enough,

3
00:00:05.486 --> 00:00:10.414
I would say my favorite
things about Angular

4
00:00:10.414 --> 00:00:15.620
have nothing to do with
the framework itself.

5
00:00:16.880 --> 00:00:22.194
It is stand-alone kind of independent
technologies that I think

6
00:00:22.194 --> 00:00:28.102
the Angular team has embraced that
makes Angular really, really good.

7
00:00:28.102 --> 00:00:31.036
A big one is Typescript.

8
00:00:31.036 --> 00:00:36.169
And so let's walk through just a couple
of TypeScript features that we're

9
00:00:36.169 --> 00:00:42.070
gonna see today, and what they are,
what they do, and why they're useful.

10
00:00:42.070 --> 00:00:47.040
So you'll notice here that
we have a basic component.

11
00:00:48.180 --> 00:00:51.380
And this is in TypeScript.

12
00:00:51.380 --> 00:00:56.305
And there are a number of things
that are happening in this

13
00:00:56.305 --> 00:01:00.818
bit of code that if somebody
is just coming from ES6,

14
00:01:00.818 --> 00:01:05.759
they're gonna say, wait a second,
you can't do that.

15
00:01:05.759 --> 00:01:09.396
If you're coming from ES-5, forget,
you've got bigger problems.

16
00:01:09.396 --> 00:01:14.300
But one of them is the ability to strongly

17
00:01:14.300 --> 00:01:19.600
type your properties in your methods.

18
00:01:19.600 --> 00:01:26.268
And the reason why I like this is because
by programming to an interface or

19
00:01:26.268 --> 00:01:33.068
a type, you're able to communicate,
ensure, and invalidate intent.

20
00:01:33.068 --> 00:01:40.940
Not only to other developers, but
to your IDE and to your compiler.

21
00:01:40.940 --> 00:01:46.171
And so for me, one of the biggest
upsides for using TypeScript

22
00:01:46.171 --> 00:01:53.720
is the ability to essentially broadcast
intent of I have items for what is that.

23
00:01:53.720 --> 00:01:58.800
Well, if you care to look,
you can just look at the item interface.

24
00:01:58.800 --> 00:02:04.484
With an interface, we can
essentially establish a contract for

25
00:02:04.484 --> 00:02:08.920
how something is going to be constructed.

26
00:02:08.920 --> 00:02:13.819
So for something to implement or
be of type item, they must have an ID,

27
00:02:13.819 --> 00:02:18.630
a name, and a description, and
optionally, an image property.

28
00:02:18.630 --> 00:02:21.468
And so if I understand the interface,

29
00:02:21.468 --> 00:02:26.850
then I can make some inferences
about how this is going to behave.

30
00:02:26.850 --> 00:02:31.949
And so if I, for instance,
called a function that returns an item,

31
00:02:31.949 --> 00:02:34.552
and I don't think I have one here.

32
00:02:34.552 --> 00:02:39.992
But I could have a function that says, get
current item, and I see that it returns

33
00:02:39.992 --> 00:02:45.520
an item, I know exactly what to expect so
that I can then render it appropriately.

34
00:02:47.890 --> 00:02:51.353
Another thing that I
don't believe ES6 has,

35
00:02:51.353 --> 00:02:55.190
or if it has,
it just as recently happened by ES6.

36
00:02:55.190 --> 00:03:00.805
I mean, everything that's not ES-5,
the field assignment.

37
00:03:00.805 --> 00:03:07.744
And so what this is is that instead of
having to assign local properties in

38
00:03:07.744 --> 00:03:13.203
my constructor by just adding
them to the top of my class,

39
00:03:13.203 --> 00:03:18.097
you can see that it's now
available automatically

40
00:03:18.097 --> 00:03:23.134
to everything else in
the class as a local property.

41
00:03:23.134 --> 00:03:28.769
So the second line, the first line
that is actually called out here,

42
00:03:28.769 --> 00:03:32.753
items, I've just added that as a property,
but

43
00:03:32.753 --> 00:03:37.431
then down at the bottom,
you can see it's this.items.

44
00:03:37.431 --> 00:03:45.750
So it's went ahead and attach that as
a property to any instance of that class.

45
00:03:47.680 --> 00:03:51.910
This also works in terms
of constructor assignment.

46
00:03:51.910 --> 00:03:54.449
So you can add it in as a field, or

47
00:03:54.449 --> 00:03:59.907
if you add in a parameter into
the constructor and you assign public or

48
00:03:59.907 --> 00:04:06.170
private, it assumes that that access
modifier is there for a reason.

49
00:04:06.170 --> 00:04:10.117
And so what it will do
under the hood is then say,

50
00:04:10.117 --> 00:04:15.320
we have this parameter of itemsService,
it's private.

51
00:04:15.320 --> 00:04:20.640
Let's go ahead and
assign this as a property of the class.

52
00:04:20.640 --> 00:04:24.145
And so with ES-6, what you will
do is you would get itemsService,

53
00:04:24.145 --> 00:04:27.607
then you have to say,
this.itemsService equals itemsService.

54
00:04:27.607 --> 00:04:32.350
And you have to map those
parameters to local properties.

55
00:04:32.350 --> 00:04:36.803
TypeScript under the hood is just saying,
I think we can assume

56
00:04:36.803 --> 00:04:41.103
that this is what you wanna do,
we're going to do it for you.

57
00:04:43.759 --> 00:04:49.440
The other piece that is not, well,
so you can implement an interface.

58
00:04:49.440 --> 00:04:55.086
And this in itself like the example
here is Angular specific,

59
00:04:55.086 --> 00:05:01.720
but it allows us to say, we are going
to implement the OnInit interface.

60
00:05:01.720 --> 00:05:07.109
Which means that we are required
by law to use ngOnInit

61
00:05:07.109 --> 00:05:11.558
inside of our class or it's not compliant.

62
00:05:11.558 --> 00:05:14.504
And I mean, a little bit facetious, but

63
00:05:14.504 --> 00:05:19.011
what this allows us to do is when
we implement an interface, so

64
00:05:19.011 --> 00:05:23.973
not only in interface can you have types,
but you can have methods.

65
00:05:23.973 --> 00:05:28.936
Is that you can say, if it implements
this interface, we know for

66
00:05:28.936 --> 00:05:33.410
a fact it has these methods
in these properties.

67
00:05:33.410 --> 00:05:38.928
And just an interesting idea,
I'm not gonna get into this here.

68
00:05:38.928 --> 00:05:44.689
But the idea is if you've ever heard
the saying program to the interface and

69
00:05:44.689 --> 00:05:47.627
not to the concrete implementation.

70
00:05:47.627 --> 00:05:52.354
That you can pass in
a parameter into a function,

71
00:05:52.354 --> 00:05:56.170
and you can type that to the interface.

72
00:05:57.340 --> 00:06:03.351
Meaning, if you had,
let's say, a human, dog, and

73
00:06:03.351 --> 00:06:10.030
cat interface, and
they all had a speak method on it.

74
00:06:10.030 --> 00:06:16.370
Well, it doesn't matter if you pass in
a concrete instance of human, cat, or dog.

75
00:06:16.370 --> 00:06:23.587
It just knows that if you implement a
living creature interface that has speak,

76
00:06:23.587 --> 00:06:29.630
that you can call speak on that instance,
whatever you pass it in.

77
00:06:29.630 --> 00:06:33.992
So it's a way to say, I'm going to pass
in something, we're not going to tell you

78
00:06:33.992 --> 00:06:37.500
what it is, but
it's going to be of this type interface.

79
00:06:37.500 --> 00:06:42.220
And now, you have some really interesting
things you can do in terms of composition.

80
00:06:42.220 --> 00:06:47.096
So being able to program to an interface
and not to an instance is really, really,

81
00:06:47.096 --> 00:06:48.240
really powerful.

