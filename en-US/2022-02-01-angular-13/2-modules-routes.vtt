WEBVTT

1
00:00:00.273 --> 00:00:02.888
The first thing that we're
gonna talk about is modules.

2
00:00:02.888 --> 00:00:09.373
Now, modules is a slightly over loaded
term in the context of Angular,

3
00:00:09.373 --> 00:00:13.921
because what am I talking
about when I say module?

4
00:00:13.921 --> 00:00:19.040
Well, you have two flavors
of a module within Angular.

5
00:00:19.040 --> 00:00:20.913
And they do slightly different things.

6
00:00:20.913 --> 00:00:25.458
So at a language level,
we're talking about ES6 modules.

7
00:00:25.458 --> 00:00:30.564
And so we use this to provide
organization at the language level.

8
00:00:30.564 --> 00:00:33.974
And all this does is
provides a container for

9
00:00:33.974 --> 00:00:38.593
us to export one thing so
that we can import it in to another.

10
00:00:38.593 --> 00:00:44.236
So In this case, you can see here that
we are importing component on a knit,

11
00:00:44.236 --> 00:00:47.387
as well as like an item
service in an item.

12
00:00:47.387 --> 00:00:50.589
So this is a way for
us to kind of package things up.

13
00:00:50.589 --> 00:00:53.543
At a language level,
so when it's compiled,

14
00:00:53.543 --> 00:00:58.105
it's available it knows where to find
it and then make that available.

15
00:00:58.105 --> 00:01:01.701
So you can see here We're
importing ,essentially

16
00:01:01.701 --> 00:01:05.637
ES6 modules that have been exported for
consumption.

17
00:01:05.637 --> 00:01:10.569
Now when I say module,
I could be talking about Ngmodule and

18
00:01:10.569 --> 00:01:14.824
this provides organization
at a framework level.

19
00:01:14.824 --> 00:01:20.166
And so this allows us to tell
Angular how to configure itself so

20
00:01:20.166 --> 00:01:25.213
that it knows what exists and
how it needs to fit together.

21
00:01:25.213 --> 00:01:30.187
And so, we use declarations
to define anything that

22
00:01:30.187 --> 00:01:33.586
basically the user is going to see.

23
00:01:33.586 --> 00:01:36.626
So if you have a component,
you declare that.

24
00:01:36.626 --> 00:01:41.509
Import, so if you need to import
another Ngmodule providers.

25
00:01:41.509 --> 00:01:44.799
If you need to export something
to make it available,

26
00:01:44.799 --> 00:01:49.769
as well as in your top level module, you
have a bootstrap property that you define

27
00:01:49.769 --> 00:01:53.227
the top level component
that's going to be Bootstrap.

28
00:01:53.227 --> 00:01:59.835
So what this looks like is
essentially an object that just has,

29
00:01:59.835 --> 00:02:06.326
I think of it as a manifest that
here's what we want to import.

30
00:02:06.326 --> 00:02:08.126
So these are the modules we're importing.

31
00:02:08.126 --> 00:02:11.540
Here's the components
that we're declaring.

32
00:02:11.540 --> 00:02:13.821
Here's the providers
that we want to consume.

33
00:02:13.821 --> 00:02:19.334
And then we're going to
bootstrap on the app component.

34
00:02:19.334 --> 00:02:24.819
And then from here, at the very highest
level when we're spinning this up.

35
00:02:24.819 --> 00:02:29.754
Then we're telling Angular to go ahead and
bootstrap the app module.

36
00:02:29.754 --> 00:02:34.638
And so Angular is organized in
this hierarchical kind of tree

37
00:02:34.638 --> 00:02:39.427
shaped component hierarchy in
that you have like your top,

38
00:02:39.427 --> 00:02:43.353
like your root module which
is the entry point and

39
00:02:43.353 --> 00:02:47.112
then everything else
kind of sits under that.

40
00:02:47.112 --> 00:02:50.953
And what this allows us to do and
I'm getting a little ahead of myself but

41
00:02:50.953 --> 00:02:54.538
I can't help myself is that by
having this tree shaped hierarchy,

42
00:02:54.538 --> 00:02:56.202
is that it works really well for

43
00:02:56.202 --> 00:03:00.201
unidirectional data flow that you can
have something defined at the top.

44
00:03:00.201 --> 00:03:05.196
And then it just kind of flows down
the tree and then if something happens,

45
00:03:05.196 --> 00:03:08.432
that event is then
propagated back up the tree.

46
00:03:08.432 --> 00:03:14.948
So we can think of modules is really
nothing more than a logical grouping or

47
00:03:14.948 --> 00:03:21.271
a division mechanism to divide and
segment pieces of our application.

48
00:03:21.271 --> 00:03:24.926
So I currently am in
the Phoenix metro area.

49
00:03:24.926 --> 00:03:29.048
And when I picked up John
from the airport yesterday,

50
00:03:29.048 --> 00:03:32.804
we drove through approximately
I want to say 5 or

51
00:03:32.804 --> 00:03:36.667
6 kind of towns that exist
within Phoenix Metro.

52
00:03:36.667 --> 00:03:40.475
So I think of,
when you look at a typology of,

53
00:03:40.475 --> 00:03:45.691
let's say Phoenix or
even Minneapolis or these Metro areas,

54
00:03:45.691 --> 00:03:50.506
metropolitan areas is that
they are segmented into these

55
00:03:50.506 --> 00:03:55.544
smaller kind of independent
towns that are all connected.

56
00:03:55.544 --> 00:04:01.224
And so if those are modules,
then routes would be essentially

57
00:04:01.224 --> 00:04:06.150
the streets or the highways,
the byways, and so on.

58
00:04:06.150 --> 00:04:10.639
That allows us to move or
navigate from one module to the other.

59
00:04:10.639 --> 00:04:15.555
And this is in its simplest form,
you're simply defining a path for

60
00:04:15.555 --> 00:04:17.116
the URL that is then.

61
00:04:17.116 --> 00:04:22.641
Once that pattern has been or that path
has been matched via pattern matching

62
00:04:22.641 --> 00:04:28.272
then it pulls in and says I'm going to
load this component as a result of that.

63
00:04:28.272 --> 00:04:30.324
So if I go to a courses route,

64
00:04:30.324 --> 00:04:36.237
then we can define the courses component
that gets loaded into the router outlet.

65
00:04:36.237 --> 00:04:39.073
So they're loaded into a router-outlet.

66
00:04:39.073 --> 00:04:43.709
And then we have a very convenient
mechanism called routerLink

67
00:04:43.709 --> 00:04:47.303
that we can use then to
navigate to other routes.

68
00:04:47.303 --> 00:04:51.252
This is something I don't
think about a lot, but it is,

69
00:04:51.252 --> 00:04:54.457
especially with single page applications.

70
00:04:54.457 --> 00:04:59.060
It's relevant that the router
uses history.pushState,

71
00:04:59.060 --> 00:05:03.110
which means that when you
generate an application,

72
00:05:03.110 --> 00:05:09.106
there's a base-ref tag in the index.html
that says like this is the route.

73
00:05:09.106 --> 00:05:11.537
And typically, I don't touch it.

74
00:05:11.537 --> 00:05:12.436
It's just there it works.

75
00:05:12.436 --> 00:05:16.612
But this allows you to essentially use
like the back button, in the forward

76
00:05:16.612 --> 00:05:21.184
button and navigate between the routes,
which at one point, believe it or not was

77
00:05:21.184 --> 00:05:25.911
a problem with single page applications is
that you are not actually leaving a page.

78
00:05:25.911 --> 00:05:30.771
And so how do we actually
create kind of canonical URLs

79
00:05:30.771 --> 00:05:33.795
to link into certain parts of it?

80
00:05:33.795 --> 00:05:39.105
Where I've used this,
is I have had an Angular application

81
00:05:39.105 --> 00:05:45.488
that was hosted at a sub-directory
that was not the root of the domain.

82
00:05:45.488 --> 00:05:48.679
And so we had to go in and
just update that to say hey,

83
00:05:48.679 --> 00:05:50.700
we're not at four slash route.

84
00:05:50.700 --> 00:05:55.653
We're actually in this directory over here
as not to kind of mess everything up.

85
00:05:55.653 --> 00:06:00.034
And so
this is what a routing table looks like.

86
00:06:00.034 --> 00:06:05.680
It's just an array of Route objects, or a.

87
00:06:05.680 --> 00:06:06.547
Yep.

88
00:06:06.547 --> 00:06:11.531
So it's an array of Route objects
that has a path and a component.

89
00:06:11.531 --> 00:06:17.023
And there's a few other things you
can do in here, is one can activate.

90
00:06:17.023 --> 00:06:22.297
So let's say you want to protect
certain certain routes is that

91
00:06:22.297 --> 00:06:28.661
you can use can activate that will call
a guard, which we'll look at later,

92
00:06:28.661 --> 00:06:35.346
that based on some kind of predetermined
logic that will just say true or false.

93
00:06:35.346 --> 00:06:36.732
No, can you stay can you go.

94
00:06:36.732 --> 00:06:38.848
If you go there'll be trouble.

95
00:06:38.848 --> 00:06:41.610
But if you stay there's gonna be double.

96
00:06:41.610 --> 00:06:44.328
And so
you can essentially guard your routes

97
00:06:44.328 --> 00:06:47.568
using a simple function
that returns true or false.

98
00:06:47.568 --> 00:06:51.674
If true,
you can go if false met your route.

99
00:06:51.674 --> 00:06:57.304
Or the other thing you can
do is lazy load a module.

100
00:06:57.304 --> 00:07:01.471
And so you can say I wanna go to this
route, but I'm going to load in a module

101
00:07:01.471 --> 00:07:05.182
that then contains components and
we're going to do it that way.

102
00:07:05.182 --> 00:07:08.891
So this what this does is it
reduces kind of the initial load

103
00:07:08.891 --> 00:07:11.769
to where you might load
one module up front and

104
00:07:11.769 --> 00:07:16.103
then individual modules as you
navigate through the application.

105
00:07:16.103 --> 00:07:17.458
And then last but not least,

106
00:07:17.458 --> 00:07:20.066
you'll see that we have
a wildcard here at the bottom.

107
00:07:20.066 --> 00:07:21.478
And that's just it's a path.

108
00:07:21.478 --> 00:07:22.867
It's the double Asterix.

109
00:07:22.867 --> 00:07:26.907
So it's saying if we match
these are nothing matches.

110
00:07:26.907 --> 00:07:30.411
Go ahead and
just redirect this back to home.

111
00:07:30.411 --> 00:07:33.014
Now, this is a pro tip.

112
00:07:33.014 --> 00:07:38.874
I don't have this in the slides,
but I have been bit by this and

113
00:07:38.874 --> 00:07:44.081
so even if I'm in a hurry
sometimes I will mess this up.

114
00:07:44.081 --> 00:07:48.732
But, the routing table is
evaluated from top to bottom.

115
00:07:48.732 --> 00:07:54.653
And so there's a reason why you want your
wildcard at the bottom and not at the top.

116
00:07:54.653 --> 00:07:59.417
So I've had it where I've had a very
general route in front of a very specific

117
00:07:59.417 --> 00:07:59.949
route.

118
00:07:59.949 --> 00:08:04.804
And I'm like, why can't I navigate to
this thing was because I was firing

119
00:08:04.804 --> 00:08:06.539
a route previous to that.

120
00:08:06.539 --> 00:08:12.498
So the order that you declare your
routes in the routing table or

121
00:08:12.498 --> 00:08:14.866
that array does matter.

122
00:08:14.866 --> 00:08:20.157
And so it's as simple as like,
okay, I just need to move this up.

123
00:08:20.157 --> 00:08:26.267
And so if you're trying to navigate to
like a sub route with like a parameter,

124
00:08:26.267 --> 00:08:29.376
that is something to just keep in mind.

125
00:08:29.376 --> 00:08:33.830
And you can see here that,
we're just using routerLink

126
00:08:33.830 --> 00:08:38.395
to link to link.path,
whatever that is on this object.

127
00:08:38.395 --> 00:08:43.294
And there's even a trigger to say,
are we on this active link and

128
00:08:43.294 --> 00:08:48.125
if it is, and so it's just detecting
like what route are we on?

129
00:08:48.125 --> 00:08:51.100
And if it's active attached
this active class.

130
00:08:51.100 --> 00:08:55.953
So this is really nice when you
want to attach a specific style to

131
00:08:55.953 --> 00:08:57.602
let's say a button,

132
00:08:57.602 --> 00:09:03.393
to indicate that this is the current
place that you are in the application.

133
00:09:03.393 --> 00:09:06.584
And then at the bottom,
you have your router-outlet.

134
00:09:06.584 --> 00:09:10.655
And so this is where Angular is
dynamically saying we have a route match

135
00:09:10.655 --> 00:09:13.145
to state this component and
put it in here.

136
00:09:13.145 --> 00:09:19.485
So the question is, is what would be
the point of having inactive state?

137
00:09:19.485 --> 00:09:24.147
And this is typically for,
if you want to style,

138
00:09:24.147 --> 00:09:30.992
you wanna attach like a CSS class to
let's say you have a row of buttons.

139
00:09:30.992 --> 00:09:34.178
Like let's say home courses,
users, whatever.

140
00:09:34.178 --> 00:09:36.451
And if you're on the courses route,

141
00:09:36.451 --> 00:09:40.351
you wanna indicate like this is
the currently selected route.

142
00:09:40.351 --> 00:09:44.416
So you might wanna maybe make that
button just a little bit darker or

143
00:09:44.416 --> 00:09:46.093
possibly even disable it.

144
00:09:46.093 --> 00:09:49.280
So all it's doing is it's just detecting,

145
00:09:49.280 --> 00:09:54.102
if this is matched to the route
that's defined by the routerLink,

146
00:09:54.102 --> 00:09:59.114
we're going to go ahead and
attach whatever class you define for it.

147
00:09:59.114 --> 00:10:02.218
And so this is where, again,
for stylistic reasons,

148
00:10:02.218 --> 00:10:06.143
you might want to just visually
style that a little bit differently.

149
00:10:06.143 --> 00:10:11.542
So, the question is why do you
need to import modules twice?

150
00:10:11.542 --> 00:10:16.114
I believe, so one for
ES6 and one for Ngmodule.

151
00:10:16.114 --> 00:10:21.175
And the distinction that I
wanna make there is that,

152
00:10:21.175 --> 00:10:25.324
you're using ES6 at the language level.

153
00:10:25.324 --> 00:10:31.537
So when you're writing your code and
it compiles that by using Typescript and

154
00:10:31.537 --> 00:10:37.096
ES6, this is how the compiler knows
that these things go together.

155
00:10:37.096 --> 00:10:39.243
And this is available.

156
00:10:39.243 --> 00:10:43.127
So this is ES6 modules are purely for

157
00:10:43.127 --> 00:10:47.776
compilation and language level purposes.

158
00:10:47.776 --> 00:10:49.923
On the other hand, Ngmodules,

159
00:10:49.923 --> 00:10:54.545
which are not at the language level
they're at the framework level.

160
00:10:54.545 --> 00:10:58.888
These tell Angular specifically
how to wire itself together.

161
00:10:58.888 --> 00:11:03.021
And so one is a language which is ES6.

162
00:11:03.021 --> 00:11:09.969
And then on top of that, you have
Ngmodule which then tells Angular like,

163
00:11:09.969 --> 00:11:16.021
okay, in order for this to run,
you have these dependencies and

164
00:11:16.021 --> 00:11:21.963
you have these particular
components that we need to declare,

165
00:11:21.963 --> 00:11:26.028
as well as,
let me go one module over here.

166
00:11:26.028 --> 00:11:28.921
So you'll notice even in the My routes,

167
00:11:28.921 --> 00:11:34.460
it's recommended that you actually
segment that into a standalone module.

168
00:11:34.460 --> 00:11:38.260
And you'll see here that
in the imports line so,

169
00:11:38.260 --> 00:11:41.690
I believe it's four lines from the bottom,

170
00:11:41.690 --> 00:11:47.546
is I am importing my routes into this
module so it can be wired up by Angular.

171
00:11:47.546 --> 00:11:51.295
But I'm doing this by calling a method.

172
00:11:51.295 --> 00:11:55.983
And so I'm saying I want to attach
these routes to essentially

173
00:11:55.983 --> 00:11:59.328
the root injector and make this available.

174
00:11:59.328 --> 00:12:05.068
And so this is specific to Angular when
you see something like some module for

175
00:12:05.068 --> 00:12:09.193
route or for
child that is specifically for Angular and

176
00:12:09.193 --> 00:12:13.601
how it assembles itself at
runtime in order for it to work.

177
00:12:13.601 --> 00:12:17.585
So they,
they're similar in terms of terminology,

178
00:12:17.585 --> 00:12:22.550
it's a bit overloaded, but
they do two totally separate things.

179
00:12:22.550 --> 00:12:26.956
So language level organization,
framework level organization.

180
00:12:26.956 --> 00:12:30.422
So the question is, what type of
route would somebody lazy load?

181
00:12:30.422 --> 00:12:35.284
And the answer to that is possibly a route

182
00:12:35.284 --> 00:12:39.437
that does not get a lot of traffic.

183
00:12:39.437 --> 00:12:44.361
So when you don't lazy load
your routes that everything

184
00:12:44.361 --> 00:12:49.294
gets compiled into like one
bundle that gets deployed.

185
00:12:49.294 --> 00:12:52.783
That makes the initial
payload a lot bigger.

186
00:12:52.783 --> 00:12:58.733
So let's say 80% of your application
traffic is within one or two modules.

187
00:12:58.733 --> 00:13:05.080
So you might wanna load those up front
to allow for a quicker load time.

188
00:13:05.080 --> 00:13:10.676
But then let's say once in a while,
somebody actually does go and

189
00:13:10.676 --> 00:13:14.864
read your terms and
conditions on your website.

190
00:13:14.864 --> 00:13:20.239
So that's actually a great one,
is let's say if you have some terms and

191
00:13:20.239 --> 00:13:25.077
conditions or something that most
people are not going to go to,

192
00:13:25.077 --> 00:13:27.152
but they need to be able to.

193
00:13:27.152 --> 00:13:29.369
And so you would load that lazily.

194
00:13:29.369 --> 00:13:34.061
So it's essentially on demand versus
we're just gonna load everything up front

195
00:13:34.061 --> 00:13:35.030
preemptively.

