WEBVTT

1
00:00:00.240 --> 00:00:04.822
The one thing that I
want to point out here,

2
00:00:04.822 --> 00:00:08.649
is that if we go to a package.json.

3
00:00:08.649 --> 00:00:14.294
You'll notice here that I've
modified the start scripts,

4
00:00:14.294 --> 00:00:19.900
so I have my start,
this running NPM run serve all.

5
00:00:19.900 --> 00:00:24.258
And what this is doing is,
using concurrently,

6
00:00:24.258 --> 00:00:28.405
it's calling run serve API and
run serve web,

7
00:00:28.405 --> 00:00:33.081
well serve web is a pretty
basic angular command, so

8
00:00:33.081 --> 00:00:38.950
I'm just saying mg serve and
I'm putting this on port 4300.

9
00:00:38.950 --> 00:00:45.610
And I am saying go ahead and auto open
the app, so this is where when I run this,

10
00:00:45.610 --> 00:00:50.950
we just open it up in a browser tab,
over here, survey API.

11
00:00:50.950 --> 00:00:54.818
We're using JSON server and

12
00:00:54.818 --> 00:00:59.654
we're pointing it to this db.json

13
00:00:59.654 --> 00:01:04.970
file inside of the server folder.

14
00:01:04.970 --> 00:01:09.968
And what's really cool about JSON

15
00:01:09.968 --> 00:01:15.652
server is that, it takes a JSON file and

16
00:01:15.652 --> 00:01:22.730
it converts it into
a fully featured REST API.

17
00:01:22.730 --> 00:01:26.721
So I'm gonna just generate one more,

18
00:01:26.721 --> 00:01:31.459
I'm gonna convert this
to a string as well and

19
00:01:31.459 --> 00:01:35.076
then I'm going to restart this and

20
00:01:35.076 --> 00:01:39.939
everybody will see what
I am talking about, so

21
00:01:39.939 --> 00:01:45.089
title Component driven architecture,

22
00:01:45.089 --> 00:01:51.480
go and save this,
let's go back into our command line.

23
00:01:52.540 --> 00:01:57.028
And, I'm just going to shut this down and

24
00:01:57.028 --> 00:02:04.208
we're going to start it up again,
we can see that it's running and

25
00:02:04.208 --> 00:02:09.295
so if we go into our There we go, it's on,

26
00:02:09.295 --> 00:02:14.201
so I'm gonna go to localhost 3000, and

27
00:02:14.201 --> 00:02:19.560
you'll see here,
you have this landing page.

28
00:02:19.560 --> 00:02:22.729
But if I go to courses, you can see that,

29
00:02:22.729 --> 00:02:28.670
this is what's in the JSON structure here,
that we had in db.json.

30
00:02:28.670 --> 00:02:33.650
But if I go back,
you can see that it also has lessons,

31
00:02:33.650 --> 00:02:36.747
so as fast as it took me to type it,

32
00:02:36.747 --> 00:02:41.220
is how long it took me to
expose a local REST API.

33
00:02:41.220 --> 00:02:45.735
So now, with that said,

34
00:02:45.735 --> 00:02:51.970
let's go into our service here and

35
00:02:51.970 --> 00:02:58.420
let's go to our courses service and

36
00:02:58.420 --> 00:03:03.020
let's build this out.

37
00:03:03.020 --> 00:03:07.280
So, let me make sure that,
in my app module,

38
00:03:07.280 --> 00:03:11.767
I have HTTP client module,
that's good, so,

39
00:03:11.767 --> 00:03:17.060
first thing so I don't get burnt,
like I did last time.

40
00:03:18.100 --> 00:03:21.777
And from here, what I'm going to do is,

41
00:03:21.777 --> 00:03:26.645
I'm just going to create
a constant called base URL,

42
00:03:26.645 --> 00:03:30.647
and this is going to be localhost 3000,

43
00:03:30.647 --> 00:03:36.330
if I'm not mistaken,
hopefully that's correct.

44
00:03:36.330 --> 00:03:41.582
And, I'm just going to
create a local property

45
00:03:41.582 --> 00:03:46.703
called model and
this is going to be courses and

46
00:03:46.703 --> 00:03:52.543
we'll see this come into
play in just a moment.

47
00:03:52.543 --> 00:03:57.349
And I'm going to create a method,

48
00:03:57.349 --> 00:04:02.486
and this one is going to be private and

49
00:04:02.486 --> 00:04:07.600
it's gonna be called Get URL.

50
00:04:07.600 --> 00:04:14.464
And all this is going to
do is return a string of,

51
00:04:14.464 --> 00:04:22.201
this URL, forward slash this dot model,
all right?

52
00:04:22.201 --> 00:04:30.159
And so now, I'm going to
create a method called all and

53
00:04:30.159 --> 00:04:35.722
is going to return this dot Well,

54
00:04:35.722 --> 00:04:42.410
what do we do here, where is the service?

55
00:04:44.160 --> 00:04:48.464
So if I go up top,
we need to inject it, so

56
00:04:48.464 --> 00:04:52.573
we'll go constructor private.

57
00:04:52.573 --> 00:04:58.432
Now we're just gonna go HTTP,
HTTP and, There we go, just gonna

58
00:04:58.432 --> 00:05:04.098
make sure that I am recording

59
00:05:04.098 --> 00:05:10.010
this correctly, very good.

60
00:05:11.860 --> 00:05:19.198
And now that I've injected the service,
we're going to go this http,

61
00:05:19.198 --> 00:05:23.846
get and
you'll see here that it takes a URL and

62
00:05:23.846 --> 00:05:28.004
a bunch of optional stuff and so get, and

63
00:05:28.004 --> 00:05:33.300
then from here,
we can just go this.get URL.

64
00:05:33.300 --> 00:05:40.178
All right, and now let's see what happens,

65
00:05:40.178 --> 00:05:45.246
so in theory, this should work,

66
00:05:45.246 --> 00:05:52.310
so let's go into our
courses component here.

67
00:05:53.730 --> 00:05:59.372
And what we're going to do, I'm going to

68
00:05:59.372 --> 00:06:04.854
do something that is a transition step,

69
00:06:04.854 --> 00:06:09.530
initially is we're going to go and

70
00:06:09.530 --> 00:06:16.156
we're going to go this,
course is service, all

71
00:06:20.322 --> 00:06:24.398
Subscribe, result equals.

72
00:06:38.630 --> 00:06:40.127
Equals result.

73
00:06:54.514 --> 00:07:00.427
All right,
I'm going to just type this to any for

74
00:07:00.427 --> 00:07:03.887
just a second, there we go,

75
00:07:03.887 --> 00:07:09.384
let me save this and
let's see what happens.

76
00:07:13.205 --> 00:07:17.776
404 not found, so you can see here that

77
00:07:17.776 --> 00:07:21.956
the reason why this is not working is,

78
00:07:21.956 --> 00:07:28.110
I believe I've misconstrued
my Get URL function here.

79
00:07:28.110 --> 00:07:33.336
So we'll go back,
we'll troubleshoot this real quick and

80
00:07:33.336 --> 00:07:40.142
let me get rid of this, so I think I had
one too many four slashes, there we go.

81
00:07:40.142 --> 00:07:45.050
All right, so if we refresh this,

82
00:07:45.050 --> 00:07:52.669
you'll see that in the network,
that I'm calling,

83
00:07:52.669 --> 00:07:58.597
the localhost 3004 slash courses and

84
00:07:58.597 --> 00:08:03.336
I am returning this to be rendered

85
00:08:03.336 --> 00:08:07.760
inside of the component here.

86
00:08:09.420 --> 00:08:16.043
Now what we can do is,
now going to delete this,

87
00:08:16.043 --> 00:08:21.176
is I'm going to build out the other,

88
00:08:21.176 --> 00:08:26.308
the bullets a 1, 2, 3, just a few

89
00:08:26.308 --> 00:08:31.463
more methods rather to do full CRUD.

90
00:08:31.463 --> 00:08:36.400
And so,
I'm going to make one more additional

91
00:08:36.400 --> 00:08:41.084
convenience method, which is going to be,

92
00:08:41.084 --> 00:08:45.894
get URL with ID and
it's going to take an ID and

93
00:08:45.894 --> 00:08:50.958
it's just going to return,
the start get URL,

94
00:08:50.958 --> 00:08:55.536
so this is just kind
of a wrapper function.

95
00:08:59.295 --> 00:09:06.412
And you'll see why this is
important in just a moment,

96
00:09:06.412 --> 00:09:12.290
we'll go here and so,
If you wanted to find or

97
00:09:12.290 --> 00:09:18.015
rather get a single
item in the collection,

98
00:09:18.015 --> 00:09:25.158
so what I can do here,
let me just go back to local host.

99
00:09:28.389 --> 00:09:35.475
3000 courses is you'll see here that
if I wanted to get just this one,

100
00:09:35.475 --> 00:09:41.760
that I could put the ID in and
it returns just that single course.

101
00:09:41.760 --> 00:09:49.858
And so, this is where being able to
generate a URL that also has the ID,

102
00:09:49.858 --> 00:09:56.448
Is relevant when you're dealing
with a specific item and

103
00:09:56.448 --> 00:09:59.900
not the collection at large.

104
00:09:59.900 --> 00:10:06.920
So get URL with ID, we'll just
pass this through and there we go.

105
00:10:06.920 --> 00:10:13.787
So, three more methods that
we can create real quick,

106
00:10:13.787 --> 00:10:19.758
create is going to be
return this .http post and

107
00:10:19.758 --> 00:10:26.646
this get URL because we
are dealing with a collection.

108
00:10:26.646 --> 00:10:30.547
And, we're going to pass in the course,

109
00:10:30.547 --> 00:10:36.200
now what I like about this,
is you'll notice that I am

110
00:10:36.200 --> 00:10:41.909
Creating these methods that
are communicating with the server,

111
00:10:41.909 --> 00:10:47.720
but this is all they're doing,
that it's very very thin.

112
00:10:47.720 --> 00:10:52.395
And ideally you have a layer that
communicates with the server and

113
00:10:52.395 --> 00:10:59.260
handles that piece and then another layer
that is responsible for managing state.

114
00:10:59.260 --> 00:11:02.782
So here we'll go HTTP, put and

115
00:11:02.782 --> 00:11:07.523
In this case, it'll be get URL with ID and

116
00:11:07.523 --> 00:11:12.400
this will take the course ID because we're

117
00:11:12.400 --> 00:11:17.698
dealing with a single
item in the collection.

118
00:11:17.698 --> 00:11:23.587
And then, what we'll do is,
we'll do delete,

119
00:11:23.587 --> 00:11:28.472
as well, so In this case, this will just

120
00:11:28.472 --> 00:11:33.370
take an ID, return this .HTTP delete.

121
00:11:34.960 --> 00:11:40.595
And this dot get URL with ID and

122
00:11:40.595 --> 00:11:45.106
it's going to just take

123
00:11:45.106 --> 00:11:50.089
in the ID, all right?

124
00:11:50.089 --> 00:11:55.545
So, this is full CRUD, this service, and

125
00:11:55.545 --> 00:12:03.123
what I want to just call out
before we go any further is that,

126
00:12:03.123 --> 00:12:07.820
this code is very, very similar.

127
00:12:07.820 --> 00:12:13.840
It's very, very fine grained and
what we are delineating on,

128
00:12:13.840 --> 00:12:17.702
is just the verbs that we're using, and

129
00:12:17.702 --> 00:12:22.940
how we're constructing the URL and
the payload.

130
00:12:22.940 --> 00:12:28.419
But every one of these methods
is a single line of code and

131
00:12:28.419 --> 00:12:35.527
so this when you're writing code,
this is what I consider to be kind of,

132
00:12:35.527 --> 00:12:41.550
I don't wanna say,
the gold standard or the Holy Grail.

133
00:12:41.550 --> 00:12:47.074
But this code is very
very easy to test and

134
00:12:47.074 --> 00:12:52.997
to reuse and to extend and generate, so

135
00:12:52.997 --> 00:12:58.121
With that said,
let me do one more example,

136
00:12:58.121 --> 00:13:03.939
we're going to do save course,
the question is,

137
00:13:03.939 --> 00:13:11.650
are we dealing with an existing course or
a brand new course?

138
00:13:11.650 --> 00:13:15.815
And so
this is where I use a simple kind of,

139
00:13:15.815 --> 00:13:22.003
I think of it as kind of an up cert,
but I'm basically saying,

140
00:13:22.003 --> 00:13:27.358
if it has a course ID,
in other words, if it exists and

141
00:13:27.358 --> 00:13:32.237
it's not null,
then what we're going to do is,

142
00:13:32.237 --> 00:13:38.779
we are going to Update the course,
and if it doesn't,

143
00:13:38.779 --> 00:13:45.090
then we're going to create the course,
so if it has one,

144
00:13:45.090 --> 00:13:50.502
then we're just gonna
call this update course.

145
00:13:50.502 --> 00:13:56.719
We're gonna pass it in, If not,
then we're going to call create course and

146
00:13:56.719 --> 00:14:03.520
pass it, all we're doing is because
it does something slightly different.

147
00:14:03.520 --> 00:14:09.123
We are creating a method
to separate the two and

148
00:14:09.123 --> 00:14:13.753
then we'll go courses service.

149
00:14:13.753 --> 00:14:20.198
In this case update, will pass in the
course and I will subscribe here as well.

150
00:14:20.198 --> 00:14:25.186
We'll go result and what I want to do when

151
00:14:25.186 --> 00:14:30.175
this happens is I want to essentially for

152
00:14:30.175 --> 00:14:34.430
this case, for simplicity sake,

153
00:14:34.430 --> 00:14:39.270
I just want to get all of the courses so,

154
00:14:39.270 --> 00:14:43.110
we'll just go fetch courses.

155
00:14:45.250 --> 00:14:51.137
And you'll notice here that,
I'm already doing all of this,

156
00:14:51.137 --> 00:14:56.690
up in the in it, so
remember when I said that

157
00:14:56.690 --> 00:15:01.670
in it, really should be
used to just delegate out.

158
00:15:01.670 --> 00:15:06.154
This is a perfect example of that I
don't need to do this logic in here,

159
00:15:06.154 --> 00:15:09.920
I can just call a method that
does that on our behalf.

160
00:15:09.920 --> 00:15:15.065
So, now when this completes,
all I wanna do

161
00:15:15.065 --> 00:15:20.071
is I just want to rehydrate,
the courses so

162
00:15:20.071 --> 00:15:26.770
I'll go here like this and
we'll save this here.

163
00:15:26.770 --> 00:15:31.825
The difference is I think
I had create an update,

164
00:15:31.825 --> 00:15:36.755
so now this should be correct,
create course,

165
00:15:36.755 --> 00:15:42.073
create update course update,
so let me go ahead and

166
00:15:43.751 --> 00:15:48.376
Save this and let's see, if this work, so

167
00:15:48.376 --> 00:15:54.029
we'll go here and
actually let me go back here just so

168
00:15:54.029 --> 00:15:59.951
we can keep a record of the API and
we'll go new course.

169
00:16:02.596 --> 00:16:07.432
Super awesome, y'all, holler and

170
00:16:07.432 --> 00:16:13.048
definitely a favorite, let me save this.

171
00:16:17.590 --> 00:16:21.674
I mean shocked, I can't believe it,

172
00:16:21.674 --> 00:16:27.555
let me refresh this,
celebrate good times, come on.

173
00:16:27.555 --> 00:16:31.070
All right, how cool was that?

174
00:16:31.070 --> 00:16:35.489
I mean, there was a sword hanging from
the ceiling that I need to hurry up and

175
00:16:35.489 --> 00:16:38.810
get this finish and
I whipped out a sweet service.

176
00:16:38.810 --> 00:16:44.246
To interact with the REST API in about,

177
00:16:44.246 --> 00:16:49.187
let's do some math here, hold on,

178
00:16:49.187 --> 00:16:55.117
just wait, less than 50 lines of code and

179
00:16:55.117 --> 00:17:01.705
I feel like if I deleted
some of this stuff that,

180
00:17:01.705 --> 00:17:09.670
I could probably get it down to like 40,
I'm so close.

181
00:17:09.670 --> 00:17:16.625
Yeah, I don't really, that's why I
start doing funny stuff to make it fit,

182
00:17:16.625 --> 00:17:22.619
so anyways, you'll notice here
that incredibly conventional,

183
00:17:22.619 --> 00:17:28.520
incredibly concise, compact,
and then within our component.

184
00:17:28.520 --> 00:17:32.989
We are able to then just
call out to our service and

185
00:17:32.989 --> 00:17:37.785
make that work,
now because we're not using NGRX,

186
00:17:37.785 --> 00:17:43.564
we are doing a few little kind
of transition concession steps,

187
00:17:43.564 --> 00:17:47.180
to rehydrate the course on our behalf.

188
00:17:47.180 --> 00:17:52.398
But technically, or
typically what I do is that when I am I

189
00:17:52.398 --> 00:17:57.401
mutating something at the data base or
the data layer,

190
00:17:57.401 --> 00:18:02.619
I will go ahead and
once I've done that I will just call and

191
00:18:02.619 --> 00:18:07.439
refresh that data structure,
so I have the latest.

192
00:18:07.439 --> 00:18:12.569
So one of a big issue when
you're dealing with Full Stack

193
00:18:12.569 --> 00:18:17.919
applications is when your front
end becomes stale because

194
00:18:17.919 --> 00:18:23.830
there's newer data on the server and
how do you reconcile that?

195
00:18:23.830 --> 00:18:29.427
So, unless there's a good reason why,
if I do a mutation at the data layer,

196
00:18:29.427 --> 00:18:34.420
I just will go ahead and
rehydrate that collection from the server.

