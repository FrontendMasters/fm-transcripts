WEBVTT

1
00:00:00.200 --> 00:00:05.153
One of the things that historically
has been really hard in

2
00:00:05.153 --> 00:00:10.206
Angular that was very easy to
do an Angular JS was the ability

3
00:00:10.206 --> 00:00:15.790
to dynamically instantiate and
attach components to the doc.

4
00:00:15.790 --> 00:00:22.170
It was just the way that they
built the view render engine.

5
00:00:22.170 --> 00:00:24.800
Pre IV that made this
really really difficult.

6
00:00:25.880 --> 00:00:30.449
With the, I would say the migration

7
00:00:30.449 --> 00:00:35.300
into IV this became a lot easier.

8
00:00:35.300 --> 00:00:40.395
And with Angular 13,
this became Incredibly easy,

9
00:00:40.395 --> 00:00:44.590
super easy, barely an inconvenience.

10
00:00:44.590 --> 00:00:50.131
And so I want to show an example
about how to take a number of

11
00:00:50.131 --> 00:00:55.830
components and
dynamically attach them to the DOM.

12
00:00:55.830 --> 00:01:00.310
And so
we have a dynamic components example here.

13
00:01:00.310 --> 00:01:05.465
There's nothing happening yet,
but I assure you,

14
00:01:05.465 --> 00:01:09.695
I do not have any aces up my sleeve,
or do I?

15
00:01:09.695 --> 00:01:15.984
And with that, let's look into our code.

16
00:01:15.984 --> 00:01:21.909
Now, the one thing that I do wanna show,
again, this would be the clone of like,

17
00:01:21.909 --> 00:01:26.723
nothing on my sleeve,
is that inside of my dynamic-component.

18
00:01:26.723 --> 00:01:31.225
Component, all I have is just
this toolbar, nothing else.

19
00:01:33.047 --> 00:01:38.256
And within my
dynamic-component.component class,

20
00:01:38.256 --> 00:01:42.270
I have a little bit of setup code here.

21
00:01:42.270 --> 00:01:45.290
Which is fairly simple.

22
00:01:45.290 --> 00:01:51.230
I have a shapes array with
a number of shape objects.

23
00:01:51.230 --> 00:01:56.710
So tight square square triangle
circle square triangle.

24
00:01:56.710 --> 00:02:03.140
And the one thing that I have done for
convenience is I've created a HashMap.

25
00:02:03.140 --> 00:02:08.524
Mapping the type of the shape to
a component to its equivalent components

26
00:02:08.524 --> 00:02:14.278
of circle, if you can believe it is mapped
to a circle component and so forth.

27
00:02:14.278 --> 00:02:19.640
Now, just to dispel any
mystery about what's happening

28
00:02:19.640 --> 00:02:26.620
in these particular components
these are very, very lightweight.

29
00:02:26.620 --> 00:02:30.790
And even just to reduce some
of the cognitive overhead,

30
00:02:30.790 --> 00:02:36.203
I've went ahead and just put all of
these components into a single file,

31
00:02:36.203 --> 00:02:41.194
kind of like us film a little react or
react II when I did it this way.

32
00:02:41.194 --> 00:02:44.059
But just so
that they're self contained, and

33
00:02:44.059 --> 00:02:48.472
I didn't have four files to represent
something that was just a shape.

34
00:02:48.472 --> 00:02:54.241
We have our selector, a basic template and
then I have a, if you can see here I

35
00:02:54.241 --> 00:02:59.940
have a div with a class of circle
that I'm just drawing a circle on it.

36
00:02:59.940 --> 00:03:05.618
And I've done the same thing for
square and triangle.

37
00:03:05.618 --> 00:03:12.130
And so there is very little here other
than I just needed something to visually

38
00:03:12.130 --> 00:03:19.158
represent a component on the page that we
could delineate it from everything else.

39
00:03:19.158 --> 00:03:22.982
And so
what I wanna do is I want to go ahead and

40
00:03:22.982 --> 00:03:29.720
I want to iterate over this shapes
array and attach these to the page.

41
00:03:29.720 --> 00:03:34.870
Now in order for this to work,
I need to add in view container ref.

42
00:03:34.870 --> 00:03:41.913
So private and
we'll go view container ref.

43
00:03:44.587 --> 00:03:49.509
And now that we have
injected the view container

44
00:03:49.509 --> 00:03:53.212
ref Let's hop into our mg on a knit.

45
00:03:53.212 --> 00:03:56.180
And let's write some code.

46
00:03:56.180 --> 00:04:01.047
Now what's fun about this
is that this is gonna be

47
00:04:01.047 --> 00:04:06.720
an incredibly concise bit
of code to make this work.

48
00:04:06.720 --> 00:04:12.285
So the first thing I need to do is
I'm going to iterate over shapes and

49
00:04:12.285 --> 00:04:16.875
so I haven't even gotten to
the good part yet, shape and

50
00:04:16.875 --> 00:04:20.545
get rid of all these helpful not helpful.

51
00:04:20.545 --> 00:04:24.436
Hints here and,

52
00:04:26.932 --> 00:04:31.558
Now, moment of truth, the grand finale,

53
00:04:31.558 --> 00:04:36.324
we're gonna go this.viewContainerRef.

54
00:04:38.740 --> 00:04:40.400
Create component.

55
00:04:40.400 --> 00:04:46.260
And from here,
we're going to look up our components.

56
00:04:46.260 --> 00:04:50.010
And we're gonna go shape.type.

57
00:04:50.010 --> 00:04:55.315
And so what this is going to do is
essentially look into the HashMap here and

58
00:04:55.315 --> 00:05:01.430
pull down square component,
triangle component and circled component.

59
00:05:01.430 --> 00:05:07.247
And so this entire example,
comes down to this single line,

60
00:05:07.247 --> 00:05:11.190
which I think is really awesome.

61
00:05:11.190 --> 00:05:13.900
So if you contain a ref.createcomponent.

62
00:05:15.300 --> 00:05:22.794
And now if we go back into
our code here we go and

63
00:05:22.794 --> 00:05:27.780
so that was almost too easy.

64
00:05:27.780 --> 00:05:32.938
It kinda feels like a trap but
I assure you it's not but

65
00:05:32.938 --> 00:05:37.410
let me before we end
this particular example,

66
00:05:37.410 --> 00:05:43.850
I want to just illustrate a use
case where this can be very, handy.

67
00:05:46.050 --> 00:05:49.550
Imagine you have a media,

68
00:05:49.550 --> 00:05:54.840
an array of various media elements.

69
00:05:54.840 --> 00:06:00.580
And so
I'm imagining that you have pictures,

70
00:06:00.580 --> 00:06:04.706
videos, text or whatever it is.

71
00:06:04.706 --> 00:06:09.836
And you are able to create
an interface that across

72
00:06:09.836 --> 00:06:15.089
the different media types
that it is consistent and

73
00:06:15.089 --> 00:06:18.400
so you might have on their data.

74
00:06:18.400 --> 00:06:23.316
And so it might be like media dot data and
in there you might

75
00:06:23.316 --> 00:06:28.437
have the URL to either the video or
the picture Or the text for

76
00:06:28.437 --> 00:06:33.475
the note and
within that you would have immediate.type.

77
00:06:33.475 --> 00:06:38.831
And so based on the type is
you iterate over this that

78
00:06:38.831 --> 00:06:44.062
you're now able to Do let's
say like kind of a grid

79
00:06:44.062 --> 00:06:49.730
layout to where the data
is basically the same.

80
00:06:49.730 --> 00:06:53.135
Creating the data is basically the same,
but

81
00:06:53.135 --> 00:06:56.760
you want to render that
entirely different.

82
00:06:56.760 --> 00:07:02.691
And so this is a really,
really great way to use a homogenous

83
00:07:02.691 --> 00:07:08.387
data set that is defined by
an interface in adheres to it,

84
00:07:08.387 --> 00:07:14.960
but the visual representation
of that is wildly different.

85
00:07:14.960 --> 00:07:19.731
And so this is where you could
render a picture, an image, a video,

86
00:07:19.731 --> 00:07:25.792
whatever it is, and create a really kind
of a unique immersive experience visually.

87
00:07:25.792 --> 00:07:30.740
But under the hood,
that there's not a lot to it.

88
00:07:30.740 --> 00:07:35.130
And so then within each one of these
components, in this case, it's square

89
00:07:35.130 --> 00:07:40.140
triangle circle, that you can then have
the logic to say well, this is a video.

90
00:07:40.140 --> 00:07:43.617
So I'm going to render the video and
so now you're able to

91
00:07:43.617 --> 00:07:48.117
encapsulate the the rendering concerns
into the individual component.

92
00:07:48.117 --> 00:07:53.614
And all you have to do is just add them
to the page and it takes care of itself.

93
00:07:53.614 --> 00:07:58.442
So I think this is really cool and
the fact that we're able to do this with

94
00:07:58.442 --> 00:08:01.662
this single command here
is I think fantastic,

95
00:08:01.662 --> 00:08:05.950
I'm super happy this is
probably the one the one thing.

96
00:08:05.950 --> 00:08:11.180
That with Angular 13 I think
they did a really good job and

97
00:08:11.180 --> 00:08:13.430
it is as simple as can be.

