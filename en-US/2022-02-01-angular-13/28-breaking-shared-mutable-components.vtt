WEBVTT

1
00:00:00.260 --> 00:00:07.363
What I'm going to do is in
my course-details.component,

2
00:00:07.363 --> 00:00:15.857
guess what we need to do is we need to
break the if it's shared immutable,

3
00:00:15.857 --> 00:00:20.195
we need to make it shared or mutable.

4
00:00:20.195 --> 00:00:24.465
In this case, we want to break
the sharing portion of it.

5
00:00:24.465 --> 00:00:30.415
So, I'm going to, Change this to,

6
00:00:30.415 --> 00:00:35.878
Course and I'm going to

7
00:00:35.878 --> 00:00:41.887
update this a little bit so

8
00:00:41.887 --> 00:00:47.624
that we're going to turn

9
00:00:47.624 --> 00:00:53.917
this into a setter method.

10
00:00:53.917 --> 00:01:00.653
So, If there's no value,

11
00:01:00.653 --> 00:01:07.697
return, but if there is a value,
We're going to,

12
00:01:09.833 --> 00:01:14.740
Now go this.currentCourse =, Value and

13
00:01:14.740 --> 00:01:20.230
we're going to set

14
00:01:20.230 --> 00:01:25.580
original title.

15
00:01:25.580 --> 00:01:30.044
So we're basically taking, And,

16
00:01:30.044 --> 00:01:34.782
Doing what we did in
the parent component and

17
00:01:34.782 --> 00:01:38.120
we're moving it down to here.

18
00:01:38.120 --> 00:01:45.731
So this.originalTitle =
this.currentCourse.title.

19
00:01:45.731 --> 00:01:48.632
We'll set this here and

20
00:01:48.632 --> 00:01:54.445
let me go back into my
container component and,

21
00:02:00.736 --> 00:02:02.287
Here we go.

22
00:02:02.287 --> 00:02:07.471
If I type this in, and so we've broken

23
00:02:07.471 --> 00:02:13.150
the shared mutable relationship.

24
00:02:13.150 --> 00:02:20.477
And then if I go back to
the course-details.component,

25
00:02:20.477 --> 00:02:27.964
then I can reset this to originalTitle and
we are good to go.

26
00:02:27.964 --> 00:02:30.469
Let me refresh this.

27
00:02:31.730 --> 00:02:34.705
Here, holla, so it's updating here but

28
00:02:34.705 --> 00:02:38.360
it's not updating the title,
more importantly,

29
00:02:38.360 --> 00:02:44.227
is it's not updating the object in the
list because they're not the same object.

30
00:02:44.227 --> 00:02:47.593
And now what I can do
is if I wanna cancel,

31
00:02:47.593 --> 00:02:52.390
it just throws those mutations away,
no big deal.

32
00:02:52.390 --> 00:02:55.690
Or if I wanted to update this,

33
00:02:55.690 --> 00:03:01.500
then I should be able to go Save,
and it's updated.

34
00:03:02.950 --> 00:03:07.850
Also interesting is that,
if I'm not mistaken, the,

35
00:03:07.850 --> 00:03:13.611
I think this also updated it,

36
00:03:13.611 --> 00:03:16.610
the REST API.

37
00:03:16.610 --> 00:03:22.680
So we've actually done a lot of work
in a very short amount of time.

38
00:03:23.740 --> 00:03:25.720
And so just to review.

39
00:03:25.720 --> 00:03:33.000
So how can we tell a container component
from a presentation component?

40
00:03:33.000 --> 00:03:34.550
Well, thank you for asking.

41
00:03:36.730 --> 00:03:41.510
This is a pretty good indication that
this is a presentation component.

42
00:03:41.510 --> 00:03:46.770
Now, what's cool about this is if a unit

43
00:03:46.770 --> 00:03:52.030
test exist to test logic, how do you test

44
00:03:52.030 --> 00:03:57.620
a component that doesn't have any logic?

45
00:03:59.630 --> 00:04:06.500
Well, the answer is you do not,
at least not via unit test.

46
00:04:06.500 --> 00:04:12.164
There's nothing to test here that not only
have we simplified the code volume and

47
00:04:12.164 --> 00:04:17.040
flow control, meaning we know exactly
what the data is coming from.

48
00:04:17.040 --> 00:04:23.127
We know exactly where
the events are going.

49
00:04:23.127 --> 00:04:27.980
But we've also eliminated the surface
area in which we need to test,

50
00:04:27.980 --> 00:04:31.680
which is really, really, really amazing.

51
00:04:31.680 --> 00:04:35.752
Now, if we look at our
course-details.component,

52
00:04:35.752 --> 00:04:39.250
there is a little bit of logic in here.

53
00:04:39.250 --> 00:04:44.830
But it has nothing to do
with application state.

54
00:04:44.830 --> 00:04:51.365
The logic in this component is
entirely self-contained and

55
00:04:51.365 --> 00:04:54.960
related to presentation state.

56
00:04:56.110 --> 00:05:02.070
And so this is also a very, very,
very small clean component.

57
00:05:02.070 --> 00:05:05.765
Now, if you look at
the container component,

58
00:05:05.765 --> 00:05:10.124
on the other hand,
you'll notice that its template,

59
00:05:10.124 --> 00:05:15.550
all it's doing is attaching
presentation components to the DOM.

60
00:05:15.550 --> 00:05:18.535
So it is purely for layout.

61
00:05:18.535 --> 00:05:27.090
But then if you look inside of the methods
inside of your container component,

62
00:05:27.090 --> 00:05:32.040
this is where we're pulling data in.

63
00:05:32.040 --> 00:05:38.538
And where we're pulling data in,
as well as if something happens,

64
00:05:38.538 --> 00:05:42.720
then we're issuing a command out.

65
00:05:42.720 --> 00:05:49.911
Now, let me just show
one thing real quick.

66
00:05:49.911 --> 00:05:58.626
And this is,
right now we're unpacking our courses and

67
00:05:58.626 --> 00:06:04.940
assigning the result to a local member.

68
00:06:05.950 --> 00:06:14.572
What I can also do is I can just define,

69
00:06:14.572 --> 00:06:19.940
An observable stream that has

70
00:06:19.940 --> 00:06:28.380
essentially an array of course objects.

71
00:06:28.380 --> 00:06:33.441
And from here, what I can do is,

72
00:06:33.441 --> 00:06:38.316
I'm just gonna save this off,

73
00:06:38.316 --> 00:06:43.191
and I can go this.courses$ =

74
00:06:43.191 --> 00:06:51.399
this.coursesService.all(), like so.

75
00:06:51.399 --> 00:06:54.092
And, Let me see if can get this to tick.

76
00:06:54.092 --> 00:06:54.592
I think I need to do this.

77
00:07:42.636 --> 00:07:46.570
Let's see if I can loosen this up just so
I can get this working.

78
00:07:56.378 --> 00:08:02.466
This is what I do when I need to get it
working or tighten up the typings later,

79
00:08:02.466 --> 00:08:08.079
is that now what I'm doing is I'm saying,
give me all of the courses,

80
00:08:08.079 --> 00:08:12.190
but we're still keeping
it in reservable stream.

81
00:08:12.190 --> 00:08:17.080
So if I go back here,
obviously nothing is happening.

82
00:08:17.080 --> 00:08:23.837
But if I go into my courses template here,

83
00:08:23.837 --> 00:08:30.217
what I can do is, Pass this in this way,

84
00:08:30.217 --> 00:08:36.700
and I am really,
really hoping that this renders.

85
00:08:36.700 --> 00:08:42.010
So now what's cool is you can see

86
00:08:42.010 --> 00:08:46.927
here that inside of the code,

87
00:08:46.927 --> 00:08:52.236
I am no longer required to unpack

88
00:08:52.236 --> 00:08:59.580
this inside of my container component.

89
00:08:59.580 --> 00:09:06.636
What I am doing instead is just
preserving the observable stream and

90
00:09:06.636 --> 00:09:11.834
then using the async pipe,
just pushing this into

91
00:09:11.834 --> 00:09:17.760
the component,
which then it now gets unwrapped.

92
00:09:17.760 --> 00:09:24.690
And put into the courses list as
a collection of course objects.

93
00:09:24.690 --> 00:09:31.200
So that concludes my component-driven
architecture demonstration.

94
00:09:32.300 --> 00:09:38.220
I yield the floor to Mark to answer
any questions that anybody has.

95
00:09:38.220 --> 00:09:42.388
&gt;&gt; Do you recommend to change
the detection behavior in

96
00:09:42.388 --> 00:09:45.050
the presentational component?

97
00:09:46.130 --> 00:09:49.890
&gt;&gt; I recommend that,
I think that's a prudent move.

98
00:09:49.890 --> 00:09:55.639
For a small application,
it's not always necessary,

99
00:09:55.639 --> 00:09:59.310
but for large scale applications,

100
00:09:59.310 --> 00:10:05.510
I think turning change detection off,
it makes sense.

101
00:10:05.510 --> 00:10:10.311
And so I know for large applications,
because a lot of this is being

102
00:10:10.311 --> 00:10:15.220
handled by the observable stream,
that it's pushing data out in.

103
00:10:15.220 --> 00:10:16.823
So Angular is not having to like,

104
00:10:16.823 --> 00:10:21.240
I don't know when data is coming because
the observable stream is handling it.

105
00:10:21.240 --> 00:10:26.233
That there have been, I know certain
applications that they've turned off

106
00:10:26.233 --> 00:10:30.880
change detection and allowed
the observable streams to handle it.

107
00:10:30.880 --> 00:10:35.930
And they've seen phenomenal performance
increases as a result of that.

108
00:10:35.930 --> 00:10:40.946
So, I think, for large-scale applications,
you can absolutely

109
00:10:40.946 --> 00:10:46.138
turn off change detection because
there's really no need to do that,

110
00:10:46.138 --> 00:10:51.430
because the observable stream is
handling the flow control concerns.

