WEBVTT

1
00:00:00.450 --> 00:00:07.914
So now that we have covered the very
basics of testing a component,

2
00:00:07.914 --> 00:00:13.245
the last thing that I want
to leave you with is how

3
00:00:13.245 --> 00:00:19.190
do you handle a component
that has a dependency.

4
00:00:19.190 --> 00:00:26.010
Thankfully, Angular works on
a concept of dependency injection.

5
00:00:26.010 --> 00:00:30.040
And so hopefully at this point,
this is nothing new.

6
00:00:30.040 --> 00:00:34.575
But I have a component that has
a dependency that calls a service,

7
00:00:34.575 --> 00:00:39.400
that calls a server that mutates
a database or something.

8
00:00:39.400 --> 00:00:44.650
You typically do not want to use real
services in your component tests.

9
00:00:44.650 --> 00:00:49.638
It's really, really important
that when you're writing a test,

10
00:00:49.638 --> 00:00:53.610
you are only testing
the thing that is under test.

11
00:00:53.610 --> 00:00:58.841
So meaning if I am testing this
app component and I look at this,

12
00:00:58.841 --> 00:01:04.288
I see that I also have the authService
that's being injected in.

13
00:01:04.288 --> 00:01:08.925
And right now it's currently
not doing anything and

14
00:01:08.925 --> 00:01:14.192
our tests are not forcing this
authService to do anything,

15
00:01:14.192 --> 00:01:20.740
but let's say we were testing logout and
it actually hit a real database.

16
00:01:20.740 --> 00:01:22.978
Well, that would be bad.

17
00:01:22.978 --> 00:01:27.419
And more importantly is that if it
returned some kind of a result,

18
00:01:27.419 --> 00:01:33.710
we won't want to test the correctness of
that result inside of the component test.

19
00:01:33.710 --> 00:01:37.393
When we look at a method like this,

20
00:01:37.393 --> 00:01:42.530
the question is, what does logout do?

21
00:01:42.530 --> 00:01:49.610
Well, when you call logout,
it calls logout on the authService.

22
00:01:49.610 --> 00:01:52.010
That's what you need to be able to test.

23
00:01:52.010 --> 00:01:55.402
You do not need to be able to test.

24
00:01:55.402 --> 00:02:02.559
For instance the temptation might be
that if I click on the authService,

25
00:02:02.559 --> 00:02:07.722
here you'll notice that
when somebody calls logout

26
00:02:07.722 --> 00:02:13.790
that it sets a property locally
on this class to false.

27
00:02:13.790 --> 00:02:20.230
And so we're keeping track of within
the stream is this authenticated?

28
00:02:20.230 --> 00:02:24.932
Well, it would be a misstep that
when we call this within our app

29
00:02:24.932 --> 00:02:29.461
components spec to test
the properties on the authService,

30
00:02:29.461 --> 00:02:35.210
like we expect that authService
dot is authenticated to be false.

31
00:02:35.210 --> 00:02:38.213
The reason being is because that test or

32
00:02:38.213 --> 00:02:42.410
that assertion belongs
in the authService test.

33
00:02:42.410 --> 00:02:46.210
And so
what we need is the ability to segment and

34
00:02:46.210 --> 00:02:51.081
isolate our component and
provide something that looks and

35
00:02:51.081 --> 00:02:56.020
feels like a real dependency,
but in fact, is not.

36
00:02:56.020 --> 00:03:01.384
And so this is where we can
leverage the dependency

37
00:03:01.384 --> 00:03:07.784
injection system to use mocks,
and by extension, spies.

38
00:03:07.784 --> 00:03:14.510
So what I want to do is I want
to override the authService and

39
00:03:14.510 --> 00:03:18.370
use something else in its place.

40
00:03:18.370 --> 00:03:23.587
So not too hard,
the first thing that I recommend

41
00:03:23.587 --> 00:03:28.430
when starting out on
this is this right here.

42
00:03:29.870 --> 00:03:33.850
I would just simply create a mock object.

43
00:03:33.850 --> 00:03:38.331
So in this case,
we're gonna call it mockAuthService.

44
00:03:38.331 --> 00:03:45.125
And what I'm gonna do here is I
know we are calling it logout and

45
00:03:45.125 --> 00:03:50.870
I'm going to give it a property of noop or
no op.

46
00:03:50.870 --> 00:03:53.080
And I'll define this up here.

47
00:03:53.080 --> 00:03:58.246
And this is just something that I've
picked up from doing just this over and

48
00:03:58.246 --> 00:04:03.400
over and over is a lot of times
I will create an empty function.

49
00:04:03.400 --> 00:04:05.910
It's called noop or no operation.

50
00:04:05.910 --> 00:04:07.350
It doesn't do anything.

51
00:04:07.350 --> 00:04:13.190
I just need an empty function
to exist in its place.

52
00:04:13.190 --> 00:04:19.467
So now, what I can do is take
this mockAuthService and

53
00:04:19.467 --> 00:04:25.100
I can use this in place
of the real service.

54
00:04:25.100 --> 00:04:30.470
So what I need to do as
well is create a reference

55
00:04:30.470 --> 00:04:35.448
to the authService, and then within the,

56
00:04:39.303 --> 00:04:43.922
TestBed configuration, I am going to

57
00:04:43.922 --> 00:04:48.684
update this to have a providers array,

58
00:04:48.684 --> 00:04:53.173
and I'm going to add in a new object.

59
00:04:53.173 --> 00:05:00.036
And so from here,
we're going to provide AuthService and

60
00:05:00.036 --> 00:05:07.470
instead of using the AuthService
we're going to go useValue.

61
00:05:08.490 --> 00:05:11.410
And we're going to go mockAuthService.

62
00:05:11.410 --> 00:05:15.027
So what we're saying is I wanna provide
the AuthService, but in its place,

63
00:05:15.027 --> 00:05:15.999
I want to use value.

64
00:05:15.999 --> 00:05:19.623
You can use a couple different
things here, use class,

65
00:05:19.623 --> 00:05:21.714
I think you can even use object.

66
00:05:21.714 --> 00:05:24.644
There's a few ways to do this, but

67
00:05:24.644 --> 00:05:30.412
typically I just will use an object and
therefore, I can use value.

68
00:05:30.412 --> 00:05:34.636
So now we have essentially overridden

69
00:05:34.636 --> 00:05:40.175
the AuthService with our mockAuthService.

70
00:05:40.175 --> 00:05:45.645
Now what I wanna do is I want
to get a reference to this.

71
00:05:45.645 --> 00:05:50.496
So service = TestBed.inject(AuthService).

72
00:05:52.036 --> 00:05:57.545
The particular semantics
around this is a little funny

73
00:05:57.545 --> 00:06:05.220
to me because I feel like you would be
injecting something into the TestBed.

74
00:06:05.220 --> 00:06:10.181
But what this does is actually
return whatever instance of

75
00:06:10.181 --> 00:06:12.720
the AuthService that it has.

76
00:06:12.720 --> 00:06:16.421
Which, in this case,
will be our mockAutService.

77
00:06:16.421 --> 00:06:23.170
So semantics or the API, the way that they
define that seems a little funny to me.

78
00:06:23.170 --> 00:06:28.130
But, nonetheless, it is what it is.

79
00:06:28.130 --> 00:06:33.172
And so from here,
we are going to write one more test to

80
00:06:33.172 --> 00:06:41.180
illustrate how to take our mock service,
and then we're going to spy on it.

81
00:06:41.180 --> 00:06:47.158
So from here, it should properly

82
00:06:47.158 --> 00:06:53.569
delegate logout responsibility.

83
00:06:53.569 --> 00:06:58.748
And so when we do this,
what we want is not to test

84
00:06:58.748 --> 00:07:04.316
that we were even logged out,
we just want to test or

85
00:07:04.316 --> 00:07:10.800
verify that the component
itself has properly delegated.

86
00:07:10.800 --> 00:07:12.194
So we're going to use spyOn and
this is a created Jasmine spy.

87
00:07:12.194 --> 00:07:17.922
And we're gonna spy on the service and

88
00:07:17.922 --> 00:07:27.190
we're going to specifically
spy on the logout method.

89
00:07:27.190 --> 00:07:29.586
And from here, we're going to go and.

90
00:07:29.586 --> 00:07:35.505
And you'll notice you have
a number of options here callFake,

91
00:07:35.505 --> 00:07:42.108
callThrough, returnValue,
there's a lot of things we can do here.

92
00:07:42.108 --> 00:07:46.710
In this case,
I am just going to callThrough.

93
00:07:46.710 --> 00:07:47.897
There we go.

94
00:07:47.897 --> 00:07:53.529
And so you can create a spy, and
if you need or if the component or

95
00:07:53.529 --> 00:07:58.633
whatever you're testing needs for
this to complete, or

96
00:07:58.633 --> 00:08:05.894
there's some kind of expected flow and
you don't allow the spy to callThrough.

97
00:08:05.894 --> 00:08:08.709
Once it hits this, it will stop.

98
00:08:08.709 --> 00:08:14.635
And so by doing spyOn and
callThrough is it spies on that method but

99
00:08:14.635 --> 00:08:18.211
then it allows it to execute normally.

100
00:08:18.211 --> 00:08:21.790
And then from here, so
real quick, Arrange.

101
00:08:23.524 --> 00:08:25.280
Let's go ahead and act.

102
00:08:27.300 --> 00:08:32.035
So what we wanna do is we
wanna call component.logout,

103
00:08:32.035 --> 00:08:35.630
and then we're going to assert.

104
00:08:35.630 --> 00:08:41.229
So from here,
we would expect that services or

105
00:08:41.229 --> 00:08:44.250
service rather logout.

106
00:08:45.840 --> 00:08:46.680
What do we expect?

107
00:08:46.680 --> 00:08:54.300
Well, that it should have been called,
all right?

108
00:08:54.300 --> 00:08:57.331
We'll save this and

109
00:08:57.331 --> 00:09:02.145
let's hop into our test here and

110
00:09:02.145 --> 00:09:06.973
let's see what else happened.

111
00:09:11.072 --> 00:09:17.195
Apparently, it's looking for
something and it doesn't exist.

112
00:09:17.195 --> 00:09:22.367
So the reason why I allowed this
to happen is because I wanted

113
00:09:22.367 --> 00:09:28.069
to highlight what a typical kind
of workflow is, at least for me.

114
00:09:28.069 --> 00:09:31.060
You will spend probably 80% of your

115
00:09:31.060 --> 00:09:35.460
time satisfying dependencies
within an application.

116
00:09:36.500 --> 00:09:42.010
And so in this case,
it's looking for, Pipe.

117
00:09:42.010 --> 00:09:43.470
Well, pipe on what?

118
00:09:43.470 --> 00:09:47.370
Well, let's go into our code and
let's check this out.

119
00:09:47.370 --> 00:09:49.609
So if we go into our app component.

120
00:09:52.194 --> 00:09:53.630
That's right.

121
00:09:53.630 --> 00:09:58.270
I thought we were only using
authService.logout, but

122
00:09:58.270 --> 00:10:04.698
we're also referencing isAuthenticated,
which is an observable string.

123
00:10:04.698 --> 00:10:12.680
So I've mocked out the authService, but I
haven't done it enough, I missed a piece.

124
00:10:12.680 --> 00:10:17.910
And so this is where for
me typically what I'll do is I'll mock

125
00:10:17.910 --> 00:10:23.759
out the bare minimum and then I'll
just add in the pieces that I need.

126
00:10:23.759 --> 00:10:31.210
So you only have to mock out the pieces
that your component under test is using.

127
00:10:31.210 --> 00:10:35.487
So in this case, if I go back to my spec,

128
00:10:35.487 --> 00:10:43.580
I need to update my mockAuthService
to have an isAuthenticated.

129
00:10:43.580 --> 00:10:45.632
We spelled that right.

130
00:10:45.632 --> 00:10:50.970
Property, that is going to
have an observable string.

131
00:10:50.970 --> 00:10:56.502
Well, how you can handle that
is by using the of operator

132
00:10:56.502 --> 00:11:01.223
from RxJS, and
I'm just going to send in true.

133
00:11:01.223 --> 00:11:03.728
We'll save this.

134
00:11:03.728 --> 00:11:07.850
And let's go back into our code.

135
00:11:07.850 --> 00:11:12.710
And you can see here
that it did indeed pass.

136
00:11:12.710 --> 00:11:17.920
So just to review,
we have created an object that represents

137
00:11:17.920 --> 00:11:25.470
just the pieces of the AuthService that
we're using inside of our app component.

138
00:11:25.470 --> 00:11:27.460
This is what we happen to be testing.

139
00:11:27.460 --> 00:11:31.060
And so we have a logout property,
that's a noop.

140
00:11:31.060 --> 00:11:37.148
We have isAuthenticated, which is
just an observable string of true.

141
00:11:37.148 --> 00:11:42.335
And then from here,
we are overriding the provider by saying

142
00:11:42.335 --> 00:11:47.910
provide : AuthService,
UseValue : mockAuthService.

143
00:11:47.910 --> 00:11:54.176
And then using TestBed.inject, we're able
to get a reference to the AuthService,

144
00:11:54.176 --> 00:11:59.397
which in this case is actually
the underlying is the mockAuthService,

145
00:11:59.397 --> 00:12:02.193
that's the actual instance itself.

146
00:12:02.193 --> 00:12:08.403
And then from here, we are calling spyOn
and we're spying on the logout service.

147
00:12:08.403 --> 00:12:13.577
And when we call component.logout,
what we want to assert is

148
00:12:13.577 --> 00:12:18.830
that we have called or
that service.logout has been called.

149
00:12:18.830 --> 00:12:24.123
And so this is really important
that when you're testing

150
00:12:24.123 --> 00:12:28.863
a method that calls another method,
using spies,

151
00:12:28.863 --> 00:12:34.394
that it's really,
really easy to verify the delegation.

152
00:12:34.394 --> 00:12:40.380
So if I were going to even test a,
let's say, a HTTP service.

153
00:12:41.490 --> 00:12:48.201
So I'll pull this up real quick,
just as a parting thought exercise,

154
00:12:48.201 --> 00:12:53.570
and if we look in shared and
I go to my courses.service.

155
00:12:56.730 --> 00:13:01.900
The question here is,
how would we test this?

156
00:13:03.550 --> 00:13:07.850
Well, if I called createCourse,
two things are happening.

157
00:13:09.350 --> 00:13:14.880
It's calling the notificationService and
it's calling http.post.

158
00:13:14.880 --> 00:13:21.420
And so what I would do is I'd verify that
notificationService.notify was called.

159
00:13:21.420 --> 00:13:30.840
And in this case, I could verify that
http.post was called with a mock course.

160
00:13:30.840 --> 00:13:35.504
And so
I'm not validating any of the results, but

161
00:13:35.504 --> 00:13:42.956
what I am doing is using spies, I am
validating that it was properly delegated.

162
00:13:42.956 --> 00:13:49.182
And so this is how you can use or
test a component with dependencies.

163
00:13:49.182 --> 00:13:54.367
And then from there,
spy on that mocked out dependency to

164
00:13:54.367 --> 00:13:59.768
make sure that it has done
exactly what it advertised to do,

165
00:13:59.768 --> 00:14:03.456
that delegation was handled properly.

