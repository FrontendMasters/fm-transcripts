WEBVTT

1
00:00:00.350 --> 00:00:04.865
How many of us, just show of hands,

2
00:00:04.865 --> 00:00:10.895
have built web applications
prior to Angular?

3
00:00:10.895 --> 00:00:14.799
So even 1.x counts, but I'm looking for

4
00:00:14.799 --> 00:00:20.771
anybody who's built web applications
prior to three years ago.

5
00:00:20.771 --> 00:00:24.442
So like five, six, seven years ago.

6
00:00:24.442 --> 00:00:30.691
Just quick show of hands, Zoom,
if you've done it, don't be shy.

7
00:00:30.691 --> 00:00:34.124
So if you haven't,
consider yourself lucky.

8
00:00:34.124 --> 00:00:36.897
This is one of those-
&gt;&gt; There's a lot of people putting their

9
00:00:36.897 --> 00:00:38.220
hands up in the chat.

10
00:00:38.220 --> 00:00:41.947
We've got five or six-
&gt;&gt; Tons, tons.

11
00:00:41.947 --> 00:00:48.616
&gt;&gt; And then two hands up in Zoom, yet now
there's still more coming in in the chat.

12
00:00:48.616 --> 00:00:51.487
&gt;&gt; If you haven't, and
almost I feel bad if I'm like,

13
00:00:51.487 --> 00:00:55.079
if you've never done anything
prior to this, raise your hand and

14
00:00:55.079 --> 00:00:57.850
everybody would just be like,
I hate you so much.

15
00:00:57.850 --> 00:01:00.885
This is kind of one of these like,
when I was your age,

16
00:01:00.885 --> 00:01:05.347
I would walk to school in the snow, and
obviously then we're from Minnesota.

17
00:01:05.347 --> 00:01:10.472
And uphill and dirt for lunch,

18
00:01:10.472 --> 00:01:18.169
whatever is that in
the spectrum of maturity.

19
00:01:18.169 --> 00:01:23.095
JavaScript is really a fairly
immature ecosystem that it

20
00:01:23.095 --> 00:01:28.120
always kind of just blows me
away when I start going through

21
00:01:28.120 --> 00:01:32.941
some of the classic programming
books that were written

22
00:01:32.941 --> 00:01:37.787
in like the 80s and the 90s,
and I think you should.

23
00:01:37.787 --> 00:01:42.626
That the things that front end
developers are thinking about and

24
00:01:42.626 --> 00:01:46.127
they spend all their
time like arguing about.

25
00:01:46.127 --> 00:01:51.581
These ideas have been around for
years and years and years and years.

26
00:01:51.581 --> 00:01:57.715
Even Mark I remember one time he talking
about maybe unidirectional data flow or

27
00:01:57.715 --> 00:02:02.657
something and he was telling me
that years ago he had essentially

28
00:02:02.657 --> 00:02:06.244
written something that
solved that problem.

29
00:02:06.244 --> 00:02:11.065
Observables RGS,
that is really a composition of multiple,

30
00:02:11.065 --> 00:02:14.877
just really two patterns
that are put together.

31
00:02:14.877 --> 00:02:19.913
And the reason why I bring
this up is that we have

32
00:02:19.913 --> 00:02:24.951
the cyclical kind of
patterns in our developer

33
00:02:24.951 --> 00:02:29.989
experience to where is
JavaScript developers

34
00:02:29.989 --> 00:02:34.898
that when we want to put
something together is

35
00:02:34.898 --> 00:02:39.961
that it typically looks
something like this.

36
00:02:39.961 --> 00:02:44.543
Where, it's like npm, TypeScript,
JavaScript, Gulp, Grunt,

37
00:02:44.543 --> 00:02:49.527
I mean, I laugh at these because a lot
of these are not even around anymore.

38
00:02:49.527 --> 00:02:55.948
But the fact that even if you remember the
pad left debacle to where somebody's like,

39
00:02:55.948 --> 00:03:01.585
you know what, I'm taking this package
down and then blew everything up.

40
00:03:01.585 --> 00:03:07.879
Is that when we're building front
end applications, it is certainly,

41
00:03:07.879 --> 00:03:13.050
certainly getting better but
JavaScript fatigue is real.

42
00:03:13.050 --> 00:03:17.520
And there are times where
even with a major framework

43
00:03:17.520 --> 00:03:22.205
release where things just
kind of start to fall apart.

44
00:03:22.205 --> 00:03:25.374
And how do you put things together?

45
00:03:25.374 --> 00:03:26.264
How do you compile?

46
00:03:26.264 --> 00:03:27.353
Are you using Babel?

47
00:03:27.353 --> 00:03:28.901
Are you using Webpack?

48
00:03:28.901 --> 00:03:30.731
What kind of a module
system are you using?

49
00:03:30.731 --> 00:03:35.765
So if you're using front end and
you're using ES6 module syntax, but then

50
00:03:35.765 --> 00:03:41.285
you move over into node using express,
maybe you're using common module syntax.

51
00:03:41.285 --> 00:03:46.813
And I can say just being totally open

52
00:03:46.813 --> 00:03:52.157
before everybody, there has been

53
00:03:52.157 --> 00:03:58.617
some afternoons where this is how I feel.

54
00:03:58.617 --> 00:04:03.170
Some package changed and
something happened and

55
00:04:03.170 --> 00:04:06.952
I cannot get it to work and
what do you do?

56
00:04:06.952 --> 00:04:11.922
So prior to, in my opinion,
I believe that Angular, and

57
00:04:11.922 --> 00:04:16.284
I'm gonna put this in
writing if somebody wants.

58
00:04:16.284 --> 00:04:22.094
I think Angular got really
good around Angular 4.x.

59
00:04:22.094 --> 00:04:28.651
Up until that point, this was me as
an Angular developer, a lot of times.

60
00:04:28.651 --> 00:04:30.212
I think I had to even come up and

61
00:04:30.212 --> 00:04:33.723
redo an entire Angular workshop
because they changed something.

62
00:04:33.723 --> 00:04:41.468
And one of the reasons why I think it got
as good as it did is because of this tool.

63
00:04:41.468 --> 00:04:46.697
The Angular CLI allowed
us to take a lot of these

64
00:04:46.697 --> 00:04:51.391
quirky nasty bits and streamlined them so

65
00:04:51.391 --> 00:04:56.367
we did not have to think
about them anymore.

66
00:04:56.367 --> 00:05:01.688
And before, you would have to ideally
find some kind of a sane starter

67
00:05:01.688 --> 00:05:06.460
project on the Internet,
borrow from that if you're lucky,

68
00:05:06.460 --> 00:05:10.617
and then try to customize it
to make it fit your needs.

69
00:05:10.617 --> 00:05:17.492
Whereas with the Angular CLI,
you were able to just install it.

70
00:05:17.492 --> 00:05:24.188
ng new, define your app,
step into it and serve it.

71
00:05:24.188 --> 00:05:29.481
And so the first time I did this and
it actually worked,

72
00:05:29.481 --> 00:05:36.054
this was me again but these were
tears of joy and not tears of sorrow.

73
00:05:36.054 --> 00:05:43.657
So the fact that I can create a working
Angular application in three or

74
00:05:43.657 --> 00:05:49.042
four lines of code and
serve it up is phenomenal.

75
00:05:49.042 --> 00:05:51.783
And we'll kind of walk through
some of this in a moment.

76
00:05:51.783 --> 00:05:57.092
And I will invite you to code
along with me as we do this.

77
00:05:57.092 --> 00:06:02.141
But the one thing that I just want

78
00:06:02.141 --> 00:06:06.629
to call out is that it's very

79
00:06:06.629 --> 00:06:11.304
easy to take a tool like a CLI,

80
00:06:11.304 --> 00:06:15.430
and turn it into a crutch.

81
00:06:15.430 --> 00:06:20.679
And it's kind of the equivalent of
somebody who has a player piano

82
00:06:20.679 --> 00:06:26.310
in their house and they turn it on,
and it starts auto playing a song and

83
00:06:26.310 --> 00:06:29.852
they're like, see, I can play the piano.

84
00:06:29.852 --> 00:06:34.045
And being able to execute commands from

85
00:06:34.045 --> 00:06:39.137
a command line does not a web developer,
make.

86
00:06:39.137 --> 00:06:43.957
And so what I recommend is that you

87
00:06:43.957 --> 00:06:48.605
do the hard work initially, and

88
00:06:48.605 --> 00:06:53.781
you do not treat the CLI as a crutch.

89
00:06:53.781 --> 00:06:58.569
But you endeavor to understand
what is happening under the hood

90
00:06:58.569 --> 00:07:00.749
with the Angular compiler.

91
00:07:00.749 --> 00:07:05.839
Why things are the way they are,
and once you understand

92
00:07:05.839 --> 00:07:10.936
that then you can use
the Angular CLI as much as you want.

93
00:07:10.936 --> 00:07:16.537
But it's like somebody who just knows
jQuery and they think of themselves

94
00:07:16.537 --> 00:07:21.956
as a JavaScript developer, or
somebody who's like I build web pages,

95
00:07:21.956 --> 00:07:25.868
and really what they do is
they install WordPress.

96
00:07:25.868 --> 00:07:28.649
And I have nothing against that at all,
but

97
00:07:28.649 --> 00:07:33.839
it's important to understand that this
is just a tool, it's a means to an end.

98
00:07:33.839 --> 00:07:38.407
And so do not, or
when you use the CLI take the time to

99
00:07:38.407 --> 00:07:42.768
understand what's happening
under the hood and

100
00:07:42.768 --> 00:07:48.314
why the code that is being generated
is done the way that it is.

101
00:07:48.314 --> 00:07:52.944
So with that said,
the biggest value proposition

102
00:07:52.944 --> 00:07:57.913
is it's a fully functional
project that just works.

103
00:07:57.913 --> 00:08:01.349
You have a code generator for
all sorts of stuff.

104
00:08:01.349 --> 00:08:06.833
You can generate a production build,
you can do unit test.

105
00:08:06.833 --> 00:08:11.632
Some of the things that comes with this
that I don't use a ton, but you can

106
00:08:11.632 --> 00:08:16.763
actually deploy to get a pages linting,
I do use Sass, which is really nice.

107
00:08:16.763 --> 00:08:20.749
So I think CSS preprocessors are amazing,
lazy routes and

108
00:08:20.749 --> 00:08:24.831
fully extensible schematics
which are pretty fantastic.

109
00:08:24.831 --> 00:08:27.752
So installing the CLI,

110
00:08:27.752 --> 00:08:32.578
just npm install, g@angular/cli.

111
00:08:32.578 --> 00:08:38.917
And from here, you can just ng new and
we'll walk through this in just a moment.

112
00:08:38.917 --> 00:08:41.566
And you can generate a project.

113
00:08:41.566 --> 00:08:44.739
Now, this is where it gets fun.

114
00:08:44.739 --> 00:08:49.923
Is using ng generate,
you can generate all sorts of things,

115
00:08:49.923 --> 00:08:54.407
components, services,
enums just a ton of stuff.

116
00:08:54.407 --> 00:08:57.987
You'll notice here that I'm using ng g,

117
00:08:57.987 --> 00:09:02.397
and that's just an alias shorthand for
generate.

118
00:09:02.397 --> 00:09:05.047
With the service, it's almost identical.

119
00:09:05.047 --> 00:09:06.553
You can generate a build.

120
00:09:06.553 --> 00:09:09.748
So that is a kind of
a compact production build.

121
00:09:09.748 --> 00:09:14.096
And if you wanna run unit test, ng test.

122
00:09:14.096 --> 00:09:20.191
And I'm not for sure,
protractor was kind of the tool.

123
00:09:20.191 --> 00:09:25.359
And I know the Angular team is
moving to Cypress, which is amazing.

124
00:09:25.359 --> 00:09:29.540
So if I tried ng e2e I'm not for
sure what would happen.

125
00:09:29.540 --> 00:09:32.620
I think that might be in flux, but

126
00:09:32.620 --> 00:09:37.800
my official verdict on this
is use Cypress regardless.

127
00:09:37.800 --> 00:09:40.806
And you can lint, ng lint.

128
00:09:40.806 --> 00:09:44.928
And with that said,
let's hop into the code or

129
00:09:44.928 --> 00:09:50.540
let's just generate some things and
let's see this working.

