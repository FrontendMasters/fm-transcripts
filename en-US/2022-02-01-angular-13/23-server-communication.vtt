WEBVTT

1
00:00:00.000 --> 00:00:04.712
We've seen services, but ultimately, for

2
00:00:04.712 --> 00:00:10.540
something to move from being
trivial to non-trivial,

3
00:00:10.540 --> 00:00:16.250
we need to be able to communicate
with a remote server.

4
00:00:16.250 --> 00:00:20.335
So in the grand scheme of things,
the question is,

5
00:00:20.335 --> 00:00:23.288
where is the single source of truth?

6
00:00:23.288 --> 00:00:28.691
Well, in a non trivial
application that is not in your

7
00:00:28.691 --> 00:00:33.749
particular instance of
a front end application.

8
00:00:33.749 --> 00:00:41.099
Is that ultimately the single source of
truth is in your data layer at the server.

9
00:00:41.099 --> 00:00:44.506
And so we need to be able to
communicate to the server and

10
00:00:44.506 --> 00:00:47.987
when we update something,
it needs to go to the server or

11
00:00:47.987 --> 00:00:51.857
if something has been updated,
we need to be able to fetch it.

12
00:00:51.857 --> 00:00:57.527
So we're able to do this with HTTP client,

13
00:00:57.527 --> 00:01:03.202
which comes within an HTTP client module.

14
00:01:03.202 --> 00:01:09.175
And the upside to this is that the API for

15
00:01:09.175 --> 00:01:15.694
this conveniently maps to restful verbs.

16
00:01:15.694 --> 00:01:19.863
And this is one of
the reasons why I like Rest.

17
00:01:19.863 --> 00:01:22.030
It's certainly not perfect, but

18
00:01:22.030 --> 00:01:26.973
one of the things that I like about Rest
is that it is very, very conventional.

19
00:01:26.973 --> 00:01:32.283
And you can through the verbs,
communicate a lot of intents.

20
00:01:32.283 --> 00:01:38.054
So when we're looking at http
client we can call Get, Post, Put,

21
00:01:38.054 --> 00:01:44.771
Delete which are typically the ones
that I use but also Patch, Head request.

22
00:01:44.771 --> 00:01:51.547
And so they're essentially
mapped to the Rest verbs.

23
00:01:51.547 --> 00:01:57.001
So if you wanted to get something
it'd be http.get and so

24
00:01:57.001 --> 00:02:02.459
this is assuming that HTTP is
an instance of HTTP client.

25
00:02:02.459 --> 00:02:08.401
If you wanted to create something I use
Post, if you want to update something,

26
00:02:08.401 --> 00:02:13.725
typically I'll use Put or you can
use Patch, or even Post if you want.

27
00:02:13.725 --> 00:02:18.205
I use Put but
you can also then if you want to

28
00:02:18.205 --> 00:02:22.557
delete something, you can use Delete.

29
00:02:22.557 --> 00:02:27.692
And what's interesting
about HTTP Client is that

30
00:02:27.692 --> 00:02:32.466
the response itself is
an observable stream.

31
00:02:32.466 --> 00:02:38.010
And so we can finalize that
by subscribing to it or

32
00:02:38.010 --> 00:02:45.055
we can pipe this right into our
template using the AsyncPipe.

33
00:02:45.055 --> 00:02:51.667
So we can see here Get and so
we're calling, let me just back this up,

34
00:02:51.667 --> 00:02:56.804
we're calling load items
which has this http.get.

35
00:02:56.804 --> 00:03:01.159
And then we can unpack it in
the component, which, for

36
00:03:01.159 --> 00:03:06.569
kind of a transition step or
skill acquisition step, this is fine.

37
00:03:06.569 --> 00:03:11.458
But ultimately,
what you will end up doing is more than

38
00:03:11.458 --> 00:03:16.571
likely piping this into your
template via an AsyncPipe.

39
00:03:16.571 --> 00:03:21.892
A few things worth pointing
out is that you have

40
00:03:21.892 --> 00:03:27.765
the ability to modify
the headers of your request.

41
00:03:27.765 --> 00:03:33.148
This is pretty important when
you are doing things like

42
00:03:33.148 --> 00:03:38.893
a big one is the authorization bearer or
the token bearer.

43
00:03:38.893 --> 00:03:44.994
So if you have a authenticated
against a remote server and

44
00:03:44.994 --> 00:03:49.949
they've given you
a JavaScript web token that

45
00:03:49.949 --> 00:03:54.920
typically you will put
this in to your header.

46
00:03:54.920 --> 00:03:56.678
And then pass that back so

47
00:03:56.678 --> 00:04:00.620
that it knows that your call
is valid based on the token.

48
00:04:00.620 --> 00:04:05.210
But also not uncommon to
set occasionally I've seen

49
00:04:05.210 --> 00:04:09.070
where servers the way
that they're wired or

50
00:04:09.070 --> 00:04:15.028
they're set up you need to be very
explicit about the content type.

51
00:04:15.028 --> 00:04:19.706
This is also interesting,
in this particular,

52
00:04:19.706 --> 00:04:26.109
example I was using this to
essentially upload a large file to s3.

53
00:04:26.109 --> 00:04:33.100
And this is why I have report progress and
observe set to events so

54
00:04:33.100 --> 00:04:39.589
that I was able to kinda track
the progress as it went along.

55
00:04:39.589 --> 00:04:45.616
Now, we can also use
the catchError operator,

56
00:04:45.616 --> 00:04:49.089
well, to catch the error.

57
00:04:49.089 --> 00:04:52.796
Self documenting code for the win.

58
00:04:52.796 --> 00:04:59.997
And so typically kind of what I do is,
I'll create like a general error handling

59
00:04:59.997 --> 00:05:05.263
method that processes the error
internally while using or

60
00:05:05.263 --> 00:05:09.902
servicing a user friendly
error like throwError.

61
00:05:09.902 --> 00:05:16.851
So, What this looks like
is if you catch an error,

62
00:05:16.851 --> 00:05:20.839
you need to figure out what
you're going to do with it.

63
00:05:20.839 --> 00:05:26.089
And what you definitely do
not wanna do is just be like,

64
00:05:26.089 --> 00:05:29.554
we got this response from the server and

65
00:05:29.554 --> 00:05:33.653
then just make it available
to anybody to see.

66
00:05:33.653 --> 00:05:39.691
That is, it's a really easy
way to leak sensitive data

67
00:05:39.691 --> 00:05:45.745
as well as it can create a sub
optimal user experience.

68
00:05:45.745 --> 00:05:49.497
So a lot of times if something goes wrong
like a user doesn't need to see like

69
00:05:49.497 --> 00:05:50.461
a Stack Overflow.

70
00:05:50.461 --> 00:05:55.501
What they really wanna see is
what happened in friendly terms,

71
00:05:55.501 --> 00:05:58.651
and then more so, what do I do about it?

72
00:05:58.651 --> 00:06:05.051
So, this is where if something
goes wrong in a remote call,

73
00:06:05.051 --> 00:06:10.043
is that I'll use catchError to handle it,
but

74
00:06:10.043 --> 00:06:15.427
then I'll decide,
what am I going to do about it?

75
00:06:15.427 --> 00:06:19.408
Possibly even remote logging or
something, but

76
00:06:19.408 --> 00:06:24.554
then I'll use throwError to
essentially return an observable

77
00:06:24.554 --> 00:06:28.839
with a kind of a friendly
user facing error message.

78
00:06:28.839 --> 00:06:34.572
So just a little bit of kind
of some strategies therefore,

79
00:06:34.572 --> 00:06:39.369
you wanna catch something and
ideally you handle

80
00:06:39.369 --> 00:06:43.700
it as close to the metal or
the error origin.

81
00:06:43.700 --> 00:06:48.345
At the same time you need to surface
something to the user that is appropriate

82
00:06:48.345 --> 00:06:50.169
depending on the situation.

83
00:06:52.037 --> 00:06:56.768
And so here you,
can see I'm calling load items and

84
00:06:56.768 --> 00:07:02.722
we've caught an error, so
we're going to handle it over here.

85
00:07:02.722 --> 00:07:08.052
And we're going to do something
it kind of the local level,

86
00:07:08.052 --> 00:07:12.530
but then using throwError
we're going to surface

87
00:07:12.530 --> 00:07:16.594
something that is user facing and
friendly.

88
00:07:16.594 --> 00:07:22.156
All right, so before we get into component

89
00:07:22.156 --> 00:07:27.719
driven architecture, let's go ahead and

90
00:07:27.719 --> 00:07:33.600
let us see an example of
what this looks like.

