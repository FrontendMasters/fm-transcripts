WEBVTT

1
00:00:00.160 --> 00:00:05.287
I do not believe that this
would be a complete workshop or

2
00:00:05.287 --> 00:00:10.680
a course, if we did not stop and
talk about testing.

3
00:00:10.680 --> 00:00:16.028
And so we're going to take a moment,
and we're going to talk about

4
00:00:16.028 --> 00:00:21.282
testing within an Angular application and
lay that foundation so

5
00:00:21.282 --> 00:00:27.320
that not only can you create Angular
applications, but you can test them.

6
00:00:27.320 --> 00:00:31.224
So just to start it, the very, very,

7
00:00:31.224 --> 00:00:36.593
very basics when you have
an Angular application and

8
00:00:36.593 --> 00:00:42.831
it's created by the Angular CLI,
or if you use NX dev tools.

9
00:00:42.831 --> 00:00:48.262
The easiest way to run your
test is just go NPM test and

10
00:00:48.262 --> 00:00:52.960
it is going to kick off
the Karma test runner.

11
00:00:54.060 --> 00:00:58.094
And so
this is going to pop up a browser and

12
00:00:58.094 --> 00:01:06.100
it's going to essentially build the app
is gonna run through a bunch of tests.

13
00:01:06.100 --> 00:01:10.752
And so one of the things that they
have done and I believe every major

14
00:01:10.752 --> 00:01:15.823
framework is they've gotten really
good it kind of caching responses,

15
00:01:15.823 --> 00:01:20.500
and the stuff that hasn't changed
then they don't recompile it.

16
00:01:20.500 --> 00:01:25.976
So, you saw that that was very,
very, very quick,

17
00:01:25.976 --> 00:01:31.711
but what we have here is 24
specs with zero failures.

18
00:01:31.711 --> 00:01:34.747
And what Karma does, and by extension,

19
00:01:34.747 --> 00:01:40.490
I believe this might be a jasmine
thing is that they randomize the test.

20
00:01:40.490 --> 00:01:45.026
So that if you have, for some reason,
a test that's dependent on the output of

21
00:01:45.026 --> 00:01:49.660
another test that by randomizing
it that's going to get caught.

22
00:01:49.660 --> 00:01:54.964
And so what you definitely don't
want is to have unintentional

23
00:01:54.964 --> 00:01:59.277
state being carried over
from one test to another.

24
00:01:59.277 --> 00:02:04.584
And so,
I'm going to just exit out of this for

25
00:02:04.584 --> 00:02:09.053
now, and we will close this down, and

26
00:02:09.053 --> 00:02:13.254
we're gonna go back into our code.

27
00:02:13.254 --> 00:02:18.838
And we're going to be working
out of the app component.

28
00:02:18.838 --> 00:02:21.830
And so you'll saw that I just kinda
ripped everything out real quick.

29
00:02:21.830 --> 00:02:26.001
And the reason being is I want
to put this back together.

30
00:02:26.001 --> 00:02:31.182
And I want to talk about why we're
doing the things we're doing

31
00:02:31.182 --> 00:02:36.166
in each part that every kind of
element that we add into this,

32
00:02:36.166 --> 00:02:41.710
or component or mechanism,
what it does and why it is there.

33
00:02:41.710 --> 00:02:47.894
So, if we're going to talk about
Angular testing at the very,

34
00:02:47.894 --> 00:02:53.975
very, very core of this is
the testing module or the testbed.

35
00:02:53.975 --> 00:02:58.761
And so I'm going to create
a before each block and

36
00:02:58.761 --> 00:03:02.156
this is going to be a synchronous.

37
00:03:02.156 --> 00:03:07.813
And the reason why this is
a synchronous is because when you

38
00:03:07.813 --> 00:03:13.704
have your templates and
your component classes separated,

39
00:03:13.704 --> 00:03:19.606
is that those need to be loaded
all at once and then compiled.

40
00:03:19.606 --> 00:03:25.231
And so, typically what you'll have
is a number of before each blocks,

41
00:03:25.231 --> 00:03:29.110
but the initial one is going to be async.

42
00:03:29.110 --> 00:03:35.206
And what that does, is that accommodates
the fact that you have external templates.

43
00:03:35.206 --> 00:03:38.176
So from here testbed, and

44
00:03:38.176 --> 00:03:43.441
we're going to go
configure testing module.

45
00:03:43.441 --> 00:03:48.477
And what this is going to do,
is it's going to create

46
00:03:48.477 --> 00:03:53.975
an Angular module that's very
similar to a real module.

47
00:03:53.975 --> 00:04:01.100
But it allows us to create an environment
for us to load a specific component,

48
00:04:01.100 --> 00:04:06.032
or service or
whatever unit we're testing into a real

49
00:04:06.032 --> 00:04:10.748
Angular environment with
its dependencies etc and

50
00:04:10.748 --> 00:04:16.470
configure it into a running runtime,
that felt weird to say.

51
00:04:16.470 --> 00:04:22.034
All right, so within our testbed
configure testing module,

52
00:04:22.034 --> 00:04:28.882
what we're going to do is we're going
to define something that looks very,

53
00:04:28.882 --> 00:04:35.532
very, very similar to an object that
we pass into a regular angie module.

54
00:04:35.532 --> 00:04:39.471
And so the first thing I wanna do,
declarations and

55
00:04:39.471 --> 00:04:44.977
because we're testing the app component,
we are going to add that in.

56
00:04:44.977 --> 00:04:50.640
And from here,
we can add in our dependency.

57
00:04:50.640 --> 00:04:54.727
So this is typically
the next thing that I do.

58
00:04:54.727 --> 00:04:59.508
And this is one of these things
that sometimes it's kinda

59
00:04:59.508 --> 00:05:04.386
a little bit of trial and
error that you will spin up a test,

60
00:05:04.386 --> 00:05:07.572
you're like ooh that didn't work and

61
00:05:07.572 --> 00:05:12.974
the reason being is because you
forgot to include a dependency.

62
00:05:12.974 --> 00:05:20.378
And so, in this case, I know that I'm
going to need the router testing module.

63
00:05:20.378 --> 00:05:23.720
And so let's leave it at that for now.

64
00:05:23.720 --> 00:05:26.336
So you can get this working and
then we'll build on that.

65
00:05:26.336 --> 00:05:34.727
And then once I've completed that I'm
going to call compile components.

66
00:05:34.727 --> 00:05:39.490
And so what this does, is it assembles
the testing module, it goes and

67
00:05:39.490 --> 00:05:44.120
grabs the components that we need and
it calls compile components.

68
00:05:44.120 --> 00:05:49.702
All right, and then from here,
I am going to,

69
00:05:53.837 --> 00:05:57.220
Add in one test here.

70
00:05:57.220 --> 00:06:02.427
And I'm kind of doing this
off the top of my head,

71
00:06:02.427 --> 00:06:05.733
but let's see how this works.

72
00:06:05.733 --> 00:06:08.562
It should create the app.

73
00:06:14.823 --> 00:06:21.890
All right, and so
what we're gonna do here is, I am going to

74
00:06:24.366 --> 00:06:29.307
Let's do const and
I'm gonna go fixture equals,

75
00:06:29.307 --> 00:06:34.024
and I'll explain what
this is in just a moment.

76
00:06:36.648 --> 00:06:41.744
Createcomponent, I'm going to
pass in the AppComponent and

77
00:06:41.744 --> 00:06:45.669
then I'm going to actually
get the component.

78
00:06:48.672 --> 00:06:57.159
And so the component is going
to be fixture.componentInstance.

79
00:06:57.159 --> 00:07:02.176
And from here, I'm just going to

80
00:07:02.176 --> 00:07:08.992
expect that component
is going to be truthy.

81
00:07:08.992 --> 00:07:15.319
So not true, but truthy, all right?

82
00:07:15.319 --> 00:07:18.779
I'm going to save this, and

83
00:07:18.779 --> 00:07:23.536
we'll go back into our command line and

84
00:07:23.536 --> 00:07:28.159
MPM test for a very, very basic test.

85
00:07:28.159 --> 00:07:34.230
I am creating the fixture and then I
am grabbing the component off of that.

86
00:07:34.230 --> 00:07:35.990
So let me look here.

87
00:07:35.990 --> 00:07:38.725
AppComponent should create the app.

88
00:07:38.725 --> 00:07:41.117
Very good.

89
00:07:41.117 --> 00:07:46.803
So if we go back here,
let me explain what the fixture is.

90
00:07:46.803 --> 00:07:52.515
So, you have your component,
but along with your component

91
00:07:52.515 --> 00:07:59.353
you have a number of elements that
come along with the component itself.

92
00:07:59.353 --> 00:08:04.604
So for instance,
you have your component class, but

93
00:08:04.604 --> 00:08:09.739
then you also have the DOM or
the template that exists

94
00:08:09.739 --> 00:08:15.703
with that component that you
can get access to, if you want.

95
00:08:15.703 --> 00:08:20.999
As well as you have the ability
to grab the component,

96
00:08:20.999 --> 00:08:24.765
but then to also grab the DOM element or

97
00:08:24.765 --> 00:08:29.827
the debug element that is
that comes with that, and

98
00:08:29.827 --> 00:08:36.230
then do query selectors on it and
check the the template.

99
00:08:36.230 --> 00:08:39.360
And let me see here real quick.

100
00:08:40.900 --> 00:08:45.696
If we step in here, and so this is,
I've mentioned this before, but

101
00:08:45.696 --> 00:08:51.673
it's very helpful to be able to, if you're
like, what does this thing actually do?

102
00:08:51.673 --> 00:08:56.546
To just start clicking through, this is
one of I think one of the best things that

103
00:08:56.546 --> 00:09:01.714
exist with TypeScript, is the ability to
kind of click through type definitions and

104
00:09:01.714 --> 00:09:03.631
learn as you're going along.

105
00:09:03.631 --> 00:09:06.213
So I mentioned the debug element.

106
00:09:06.213 --> 00:09:11.397
But you can get a component instance,
the native element,

107
00:09:11.397 --> 00:09:15.557
the element ref, and
the change detector ref.

108
00:09:15.557 --> 00:09:20.100
So there's a lot of things
that you can do here.

109
00:09:20.100 --> 00:09:23.053
For instance, detect changes.

110
00:09:23.053 --> 00:09:26.260
This is important,
we'll talk about that in a moment.

111
00:09:26.260 --> 00:09:31.858
As well as you can check,
is it stable, when is it stable etc.

112
00:09:31.858 --> 00:09:38.497
So the fixture is incredibly helpful.

113
00:09:38.497 --> 00:09:44.268
Now what I'm going to do
is I'm going to extract

114
00:09:44.268 --> 00:09:51.051
these elements right here
out of this particular test,

115
00:09:51.051 --> 00:09:55.524
and I'm going to break this into a new

116
00:09:55.524 --> 00:10:00.169
before each with a slight variation.

117
00:10:00.169 --> 00:10:07.437
So, what I wanna do is because I want
these to be available before each test,

118
00:10:07.437 --> 00:10:12.679
but I don't want to have to
keep instantiating those.

119
00:10:12.679 --> 00:10:18.486
So from here I'm going
to define my component,

120
00:10:18.486 --> 00:10:25.744
lead component, and
this is going to be an AppComponent and

121
00:10:25.744 --> 00:10:31.842
let fixture is going to be
a component fixture that

122
00:10:31.842 --> 00:10:38.110
is going to be associated
with this AppComponent.

123
00:10:38.110 --> 00:10:43.079
And so now,
what I've done is I've just added in

124
00:10:43.079 --> 00:10:48.792
an additional before each,
and I'm able to grab this.

125
00:10:48.792 --> 00:10:55.032
All right, now, I'm going to
make one more addition here and

126
00:10:55.032 --> 00:11:00.080
I'll explain what this
is once I'm done typing.

127
00:11:01.660 --> 00:11:07.496
When you're writing an Angular test,
change detection is not automatic.

128
00:11:07.496 --> 00:11:12.365
The reason being,
is there are circumstances where

129
00:11:12.365 --> 00:11:17.235
you possibly want to validate
a pre change detection

130
00:11:17.235 --> 00:11:21.564
state against a post
change detection state.

131
00:11:21.564 --> 00:11:27.353
And so Angular gives you
the ability to essentially manually

132
00:11:27.353 --> 00:11:32.688
detect change or
kick off that change detection cycle,

133
00:11:32.688 --> 00:11:37.242
and you do that with
fixture.detect changes.

134
00:11:37.242 --> 00:11:42.317
Now, let's extend this a bit more, and

135
00:11:42.317 --> 00:11:49.483
let's write another test and
this is going to be around,

136
00:11:49.483 --> 00:11:53.834
it should have the correct title.

137
00:11:53.834 --> 00:11:58.129
And when you have a component instance,

138
00:11:58.129 --> 00:12:04.730
what you're referencing is
in fact the component class.

139
00:12:04.730 --> 00:12:12.000
And so if you have a property on your
class, then you can test against that.

140
00:12:12.000 --> 00:12:16.687
And so,
what we're gonna do here is we're going to

141
00:12:16.687 --> 00:12:19.848
create a property called title and

142
00:12:19.848 --> 00:12:24.867
I'm just going to go
'Angular 13 fundamentals'.

143
00:12:24.867 --> 00:12:31.899
And from here, what I'm going
to do is go expect(component).

144
00:12:31.899 --> 00:12:37.069
Now watch,
you see the Auto hint here is showing

145
00:12:37.069 --> 00:12:42.368
me the properties that
exist on that component,

146
00:12:42.368 --> 00:12:49.877
the A TypeScript, and we expect
the component title to equal title.

147
00:12:49.877 --> 00:12:54.017
All right, and let's go back in and

148
00:12:54.017 --> 00:12:58.295
see if these are being picked up, and

149
00:12:58.295 --> 00:13:02.299
let me just actually step into this

150
00:13:06.151 --> 00:13:11.934
So I'm able to click on this and so
you can see now we have two test.

151
00:13:11.934 --> 00:13:17.281
Should create the app and
should have the correct title.

152
00:13:17.281 --> 00:13:22.491
All right, now what we're gonna do is I'm

153
00:13:22.491 --> 00:13:27.277
going to introduce the debug element.

154
00:13:27.277 --> 00:13:32.532
And so I'm going to go up here and
we're going to go let D for

155
00:13:32.532 --> 00:13:37.592
debug element, and
this is going to be a debug element.

156
00:13:37.592 --> 00:13:42.982
And inside of our second before each

157
00:13:42.982 --> 00:13:48.191
we're going to go D equals fixture

158
00:13:48.191 --> 00:13:52.692
debug, oops debug element.

159
00:13:52.692 --> 00:13:54.133
There we go.

160
00:13:54.133 --> 00:13:58.560
And now let's write a test against this.

161
00:13:58.560 --> 00:14:01.779
So it should render

162
00:14:03.752 --> 00:14:11.940
An updated title.

163
00:14:11.940 --> 00:14:17.053
Feel like I picked up
an extra parentheses there,

164
00:14:17.053 --> 00:14:20.826
or quote all right, so within this,

165
00:14:20.826 --> 00:14:26.804
what we're going to do is I'm
going to define a new title.

166
00:14:26.804 --> 00:14:34.902
And we're gonna call this angular 20
fundamentals for our spring workshop.

167
00:14:34.902 --> 00:14:42.408
And now let's grab our title element.

168
00:14:42.408 --> 00:14:44.336
And so we have our debug element.

169
00:14:44.336 --> 00:14:50.990
But what we really need to get
is within our template itself

170
00:14:53.003 --> 00:14:59.614
We need to pull in this
particular element right here.

171
00:14:59.614 --> 00:15:07.190
So within the spec, let's go ahead and
go debug element query and

172
00:15:07.190 --> 00:15:13.688
Angular introduced this
pretty handy thing called by.

173
00:15:13.688 --> 00:15:20.868
And what this allows us to do
is essentially select the DOM or

174
00:15:20.868 --> 00:15:25.327
the debug element by various means.

175
00:15:25.327 --> 00:15:29.212
In this case, we're gonna go with CSS, but

176
00:15:29.212 --> 00:15:33.097
I think you can do by directive, by name.,

177
00:15:33.097 --> 00:15:39.191
there's a bunch of different ones
you can use, I typically use CSS.

178
00:15:39.191 --> 00:15:44.153
From here, we are going to
basically grab the title, so

179
00:15:44.153 --> 00:15:48.485
we're going to go through and
we're looking for

180
00:15:48.485 --> 00:15:54.840
anything with a class of title which
in this case happens to only be one.

181
00:15:54.840 --> 00:16:00.637
All right, and so we're going to go
component title equals new title,

182
00:16:00.637 --> 00:16:03.736
and then let's write our assertion.

183
00:16:03.736 --> 00:16:08.807
So our titleElement, nativeElement,

184
00:16:11.794 --> 00:16:13.255
InnerText.

185
00:16:13.255 --> 00:16:16.993
We expect this to be new title.

186
00:16:16.993 --> 00:16:23.788
All right, so
within A test a very common approach and

187
00:16:23.788 --> 00:16:28.922
I don't think about it consciously that

188
00:16:28.922 --> 00:16:33.606
much anymore, but you have a range,

189
00:16:37.905 --> 00:16:41.411
Act and assert.

190
00:16:41.411 --> 00:16:45.414
And so, just for a bit of insight,
if you're not aware of this,

191
00:16:45.414 --> 00:16:48.842
I think this is a really good
way to organize your test.

192
00:16:48.842 --> 00:16:53.942
A lot of people do this you'll
hear it quite frequently, but

193
00:16:53.942 --> 00:16:59.242
what I'm doing here is I'm
basically arranging the pieces for

194
00:16:59.242 --> 00:17:03.942
the test, then I am acting
upon us on doing something and

195
00:17:03.942 --> 00:17:10.142
then I am asserting the result,
is this indeed what I expected to happen.

196
00:17:10.142 --> 00:17:15.748
So I'm gonna save this,
go into our browser and

197
00:17:15.748 --> 00:17:19.590
let's see if this updated.

198
00:17:19.590 --> 00:17:24.071
So you notice here,
expected Angular 13 Fundamentals to be

199
00:17:24.071 --> 00:17:28.900
Angular 20 Fundamentals,
and that was not the case.

200
00:17:28.900 --> 00:17:30.052
Why is that?

201
00:17:30.052 --> 00:17:35.047
Well the reason being is
that if you remember change

202
00:17:35.047 --> 00:17:40.167
detection is manual that
you have to trigger it out.

203
00:17:40.167 --> 00:17:45.377
And so if you are making
a change to the class, and

204
00:17:45.377 --> 00:17:50.839
you need to kick off or
that you need the template for

205
00:17:50.839 --> 00:17:56.582
the component or
testing to update and capture that.

206
00:17:56.582 --> 00:18:01.900
You need to essentially
tell it to detect changes.

207
00:18:01.900 --> 00:18:08.833
So fixture, detect changes,
and now let's save this again.

208
00:18:08.833 --> 00:18:13.552
And let's go back and ta-da, and

209
00:18:13.552 --> 00:18:19.410
that is what I would
consider to be the basic

210
00:18:19.410 --> 00:18:24.621
the most basic fundamental knowledge

211
00:18:24.621 --> 00:18:30.501
set that you need to
write test in Angular.

212
00:18:30.501 --> 00:18:33.399
So you have a component
that you wanna test.

213
00:18:33.399 --> 00:18:38.413
You have a fixture that
contains all of the information

214
00:18:38.413 --> 00:18:43.435
in the contextual information
about that component.

215
00:18:43.435 --> 00:18:49.611
Then you have your debug element,
which then gives you the ability to one

216
00:18:49.611 --> 00:18:55.780
query the template that is
associated with that component.

217
00:18:55.780 --> 00:19:00.858
And when you make changes to
a template and you needed to render or

218
00:19:00.858 --> 00:19:04.902
to the component needed to
render on the template,

219
00:19:04.902 --> 00:19:09.150
this is where you kick off
fixture.detect changes.

