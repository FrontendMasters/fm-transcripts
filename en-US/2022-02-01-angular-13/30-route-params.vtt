WEBVTT

1
00:00:00.600 --> 00:00:05.080
Now that we've talked about child routes,
let's talk about route params.

2
00:00:05.080 --> 00:00:10.050
And so this is a fairly familiar concept,
especially if you've

3
00:00:10.050 --> 00:00:14.477
done anything with a RESTful
web service or RESTful API.

4
00:00:14.477 --> 00:00:20.892
Is that you have a collection, which then
you can hit from courses or lessons.

5
00:00:20.892 --> 00:00:25.933
And so you kind of have that portion of
the URL, and then forward slash, and then

6
00:00:25.933 --> 00:00:31.760
you have some ID that says, within this
collection, I wanna get this single thing.

7
00:00:31.760 --> 00:00:38.832
And so the question is,
how do we get route params in Angular?

8
00:00:38.832 --> 00:00:40.780
How does that work?

9
00:00:40.780 --> 00:00:46.680
And so we have a route params example
that we're going to build out.

10
00:00:46.680 --> 00:00:52.328
And so the first thing we're going to
do is we're going to hop inside of

11
00:00:52.328 --> 00:00:57.430
our app routing module, and
we're going to add in a new route.

12
00:00:59.880 --> 00:01:03.225
So just underneath of
the child routes here,

13
00:01:03.225 --> 00:01:06.800
we are going to add in
actually two routes.

14
00:01:06.800 --> 00:01:12.625
And so the first one is
going to be a params route.

15
00:01:15.043 --> 00:01:18.856
So path, params, and

16
00:01:18.856 --> 00:01:23.472
the component is going to be

17
00:01:23.472 --> 00:01:28.502
the RouteParamsComponent.

18
00:01:28.502 --> 00:01:32.927
And we're going to just duplicate this,
and

19
00:01:32.927 --> 00:01:37.920
we're going to target the same component.

20
00:01:37.920 --> 00:01:43.126
But what we want is the ability
to navigate to this route,

21
00:01:43.126 --> 00:01:47.520
but then pass in an ID,
and then act upon that.

22
00:01:47.520 --> 00:01:51.036
So we're gonna go params, and

23
00:01:51.036 --> 00:01:55.363
you denote a route param using colon,

24
00:01:55.363 --> 00:01:59.570
whatever you wanna call that param.

25
00:01:59.570 --> 00:02:08.020
So if for instance I call this foobar when
I am pulling in the route params map,

26
00:02:08.020 --> 00:02:12.370
this is what this would come across.

27
00:02:12.370 --> 00:02:17.492
So it's important to use
something that is descriptive,

28
00:02:17.492 --> 00:02:23.251
and is going to make sense once
you get into the loaded component.

29
00:02:23.251 --> 00:02:29.620
One other thing that I want to point
out here is that route order matters.

30
00:02:29.620 --> 00:02:32.150
And so Angular is gonna go
from the top to the bottom.

31
00:02:32.150 --> 00:02:36.931
And as soon as it matches a route,
it's going to go to that.

32
00:02:36.931 --> 00:02:42.144
And so if you mess this up or
if you actually have something that

33
00:02:42.144 --> 00:02:48.361
is eagerly loaded before it gets to
something that you really wanna go to,

34
00:02:48.361 --> 00:02:52.800
you can be like,
how come I can't get to this route?

35
00:02:52.800 --> 00:02:57.100
It's because your route order
is not entirely correct.

36
00:02:57.100 --> 00:03:04.481
So, with that,
let's hop into our RouteParamsComponent.

37
00:03:04.481 --> 00:03:09.051
And what we have here
is an array of lessons

38
00:03:09.051 --> 00:03:13.370
that every one of the lessons has an ID.

39
00:03:14.620 --> 00:03:18.381
So if we go into the application here,

40
00:03:18.381 --> 00:03:22.611
what we have is reloading the lessons, and

41
00:03:22.611 --> 00:03:30.580
I wanna be able to click on this, and
be able to see the lesson over here.

42
00:03:30.580 --> 00:03:39.020
So back into our code, we need to import
a couple services to make this work.

43
00:03:39.020 --> 00:03:43.856
So the first service that
we are going to inject

44
00:03:43.856 --> 00:03:48.822
as a dependency is going
to be activatedRoute.

45
00:03:48.822 --> 00:03:55.406
We'll actually just call this route,
and this is activatedRoute.

46
00:03:55.406 --> 00:03:56.641
There we go.

47
00:03:56.641 --> 00:04:01.918
And the second one is going to be router.

48
00:04:04.601 --> 00:04:08.480
Okay, let me make sure that I
have these imported in correctly.

49
00:04:08.480 --> 00:04:13.853
Yep, all right, now, within ngOnInit,

50
00:04:13.853 --> 00:04:21.627
what we're going to do is we
are going to listen for the route.

51
00:04:21.627 --> 00:04:29.361
And so what's neat about this is
this paramMap is an observable.

52
00:04:29.361 --> 00:04:34.126
And so if the param is changing,
and you're just only catching it at

53
00:04:34.126 --> 00:04:38.068
one time So first I was saying
param equals and I pulled.

54
00:04:38.068 --> 00:04:40.913
So for instance,
I was saying, param equals,

55
00:04:40.913 --> 00:04:45.608
and I pulled the just right off of it,
that there would be no mechanism to update

56
00:04:45.608 --> 00:04:48.548
the component to say,
hey, this is a new route.

57
00:04:48.548 --> 00:04:53.320
And so this is the beauty of reactive
frameworks, observables, etc.

58
00:04:53.320 --> 00:04:58.909
So paramMap is an observable stream,
so that as it changes,

59
00:04:58.909 --> 00:05:03.842
that it notifies the underlying
component that hey,

60
00:05:03.842 --> 00:05:09.390
this thing changed,
you need to update yourself.

61
00:05:09.390 --> 00:05:14.020
And so from here,
we're going to receive a params object.

62
00:05:14.020 --> 00:05:19.690
And I'm going to break to a new line,
and we're going to grab the currentId.

63
00:05:21.550 --> 00:05:26.829
So from here, params.get, and
so this is just a getter.

64
00:05:26.829 --> 00:05:31.542
And we're going to grab the ID
off of the params object that's

65
00:05:31.542 --> 00:05:35.980
being passed via the paramMap
observable stream.

66
00:05:35.980 --> 00:05:41.157
And if this exists, then we're

67
00:05:41.157 --> 00:05:47.484
going to set our current lesson to the,

68
00:05:47.484 --> 00:05:52.490
I can just call this directly.

69
00:05:52.490 --> 00:05:56.246
So this.setCurrentLesson, and

70
00:05:56.246 --> 00:06:00.653
we're going to pass in this currentId.

71
00:06:00.653 --> 00:06:06.157
And so now,
all this is doing is when we navigate and

72
00:06:06.157 --> 00:06:12.460
we have an ID in the URL,
it's going to capture that.

73
00:06:12.460 --> 00:06:15.481
And then it's going to
call setCurrentLesson,

74
00:06:15.481 --> 00:06:18.660
which then sets the current lesson.

75
00:06:18.660 --> 00:06:21.890
So if we go here,
let's just refresh, so it's clean.

76
00:06:21.890 --> 00:06:27.201
And if I go forward slash, and
we go like one, you'll see now that

77
00:06:27.201 --> 00:06:33.300
it's loading this particular lesson,
or let's go maybe with like five.

78
00:06:33.300 --> 00:06:37.352
You can see here now that it's
pulling that in, grabbing it, and

79
00:06:37.352 --> 00:06:39.840
setting the current lesson.

80
00:06:39.840 --> 00:06:42.676
And if we wanted to navigate to this,
well,

81
00:06:42.676 --> 00:06:47.570
it's going to look very similar to how
we would navigate to a child route.

82
00:06:47.570 --> 00:06:51.431
And so now if we jump back into the code,

83
00:06:51.431 --> 00:06:57.630
we can go inside of the route
params HTML or the template.

84
00:06:57.630 --> 00:06:59.080
So let me just open this.

85
00:06:59.080 --> 00:07:03.889
And let's wide this up so
we can navigate to

86
00:07:03.889 --> 00:07:08.040
a specific route with a route param.

87
00:07:09.050 --> 00:07:12.675
And so on this list item here,

88
00:07:12.675 --> 00:07:16.899
I'm going to add in a routerLink.

89
00:07:16.899 --> 00:07:21.342
And then we're going to add in an array,

90
00:07:21.342 --> 00:07:27.103
because we need to essentially
composite a new URL.

91
00:07:27.103 --> 00:07:32.490
And we'll go examples/params.

92
00:07:32.490 --> 00:07:35.130
And so
this is kind of the base portion of it.

93
00:07:35.130 --> 00:07:41.910
And then from here, what we wanna do is
we wanna add in lesson ID to this route.

94
00:07:43.810 --> 00:07:48.010
So we'll save that, and
then we'll go back into our code,

95
00:07:48.010 --> 00:07:51.790
refresh this, and
I'll just go to the base here.

96
00:07:51.790 --> 00:07:57.438
And then if I click on this,
you'll see now that we are incrementing,

97
00:07:57.438 --> 00:08:03.182
or whatever ID that is attached to
this lesson is being added to the URL,

98
00:08:03.182 --> 00:08:05.900
and we're loading it over here.

99
00:08:05.900 --> 00:08:10.806
So this is really,
really handy when you want to send

100
00:08:10.806 --> 00:08:16.140
somebody to a specific
item within a collection.

101
00:08:16.140 --> 00:08:21.476
So for instance, just for
thought is that if you wanted

102
00:08:21.476 --> 00:08:28.668
to load this master detail view with
a specific course already selected,

103
00:08:28.668 --> 00:08:32.960
this is where this
technique would come in.

104
00:08:32.960 --> 00:08:37.633
So you could say, I'm working on this
particular course, for instance,

105
00:08:37.633 --> 00:08:42.602
then you might be able to send somebody
a link, where it had the forward slash and

106
00:08:42.602 --> 00:08:44.270
the ID for that.

107
00:08:44.270 --> 00:08:49.843
I've also done this with not IDs, because
those can get kind of very long, and

108
00:08:49.843 --> 00:08:55.480
not something that you certainly don't
wanna memorize or even type out.

109
00:08:55.480 --> 00:08:59.389
So you can actually set up
your route params to work

110
00:08:59.389 --> 00:09:02.380
on really anything including slugs.

111
00:09:02.380 --> 00:09:07.810
And so I've attached or
a part of the data model, I've had a slug.

112
00:09:07.810 --> 00:09:12.713
So this is kind of a friendly
hyphenated kind of representation

113
00:09:12.713 --> 00:09:16.977
of the item that we're talking about or
referencing.

114
00:09:16.977 --> 00:09:20.438
So that you could do, for instance,

115
00:09:20.438 --> 00:09:25.360
like /courses/angular-13-fundamentals.

116
00:09:25.360 --> 00:09:28.103
And then you can actually
look it up that way.

117
00:09:28.103 --> 00:09:33.355
And so just however you want to implement
this logic, that is entirely up to you.

118
00:09:33.355 --> 00:09:38.298
But the idea that if you're in
a specific state with a specific

119
00:09:38.298 --> 00:09:42.859
item selected,
you can store that inside of the URL, and

120
00:09:42.859 --> 00:09:48.010
then you have the ability to
navigate directly to that state.

121
00:09:48.010 --> 00:09:51.837
And so
it's important to think about a URL or

122
00:09:51.837 --> 00:09:57.530
a route in a way it is serialized
state for the application.

123
00:09:57.530 --> 00:10:02.202
And so
when I go to the route params example,

124
00:10:02.202 --> 00:10:06.117
and I click on Hello Angular, well,

125
00:10:06.117 --> 00:10:10.791
this route here, examples/params/1,

126
00:10:10.791 --> 00:10:17.660
is a representation of the state
that this application is in.

127
00:10:17.660 --> 00:10:20.320
And so this, in a way,
is representative, or

128
00:10:20.320 --> 00:10:23.608
you can think of it even a little
bit like a state machine.

129
00:10:23.608 --> 00:10:26.404
Is that every route kind
of represents a state, and

130
00:10:26.404 --> 00:10:29.820
then you are navigating
from one state to another.

131
00:10:29.820 --> 00:10:37.610
So this is how you use params
within an Angular project.

132
00:10:37.610 --> 00:10:40.090
I wanna go back into
the code just real quick.

133
00:10:40.090 --> 00:10:45.657
And just for review,
the little bit of logic that we

134
00:10:45.657 --> 00:10:50.967
use to accomplish this,
we have our route here,

135
00:10:50.967 --> 00:10:55.384
and we are subscribing to the paramMap.

136
00:10:55.384 --> 00:11:01.745
And within this, we are pulling out
the ID, and then if we have an ID,

137
00:11:01.745 --> 00:11:06.710
then we are setting the current
lesson based on that.

