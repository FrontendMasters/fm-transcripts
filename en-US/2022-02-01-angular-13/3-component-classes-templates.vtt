WEBVTT

1
00:00:00.340 --> 00:00:05.593
Components are the atomic building
block of Angular applications.

2
00:00:05.593 --> 00:00:10.282
And inside of a component,
if we're going to talk about this,

3
00:00:10.282 --> 00:00:14.707
we need to delineate,
there's kind of two kind of separate

4
00:00:14.707 --> 00:00:19.680
things that are happening inside
of the component conceptually.

5
00:00:19.680 --> 00:00:23.604
Is you have your template and
you have your class.

6
00:00:23.604 --> 00:00:29.151
So your component classes
are just ES6 classes,

7
00:00:29.151 --> 00:00:34.962
and when you define a property
on a component class,

8
00:00:34.962 --> 00:00:44.270
or a method, that becomes available to
your template to bind to or execute.

9
00:00:44.270 --> 00:00:48.552
And we can if we need to,
this doesn't happen a lot, but

10
00:00:48.552 --> 00:00:52.946
you can, well, no,
this happens all the time, sorry.

11
00:00:52.946 --> 00:00:57.920
That when you have a dependency for
a component,

12
00:00:57.920 --> 00:01:04.245
that is made available by
injecting it into the constructor.

13
00:01:04.245 --> 00:01:09.425
And so, providers or
dependencies, AKA services,

14
00:01:09.425 --> 00:01:15.423
these become available via
injection into the constructor.

15
00:01:15.423 --> 00:01:20.116
And one other thing that is
worth mentioning is that you

16
00:01:20.116 --> 00:01:24.980
have a component lifecycle
that is exposed with hooks.

17
00:01:24.980 --> 00:01:27.172
And so within a component,

18
00:01:27.172 --> 00:01:33.750
you have a number of events that happen
within the lifespan of a component.

19
00:01:33.750 --> 00:01:38.862
And we have the ability to
programmatically capture those and

20
00:01:38.862 --> 00:01:45.485
execute some form of logic at these event
life cycle or these life cycle events.

21
00:01:45.485 --> 00:01:50.454
So a component, you can see here
we have an items component,

22
00:01:50.454 --> 00:01:55.238
and we have two properties on it,
items, selectedItem.

23
00:01:55.238 --> 00:02:00.171
Now these are available for
our template to consume, and

24
00:02:00.171 --> 00:02:04.190
we also have a dependency
on the item service.

25
00:02:04.190 --> 00:02:07.600
So we need to use this to load our item.

26
00:02:07.600 --> 00:02:14.270
So we inject this via the constructor and
it's available to us.

27
00:02:14.270 --> 00:02:17.620
So more on that later, stay tuned.

28
00:02:17.620 --> 00:02:19.810
On the flip side, we have our templates.

29
00:02:19.810 --> 00:02:25.397
And so this is just HTML with some Angular
pieces in it that tells Angular how

30
00:02:25.397 --> 00:02:31.530
to render a component, more importantly,
how to keep rendering the component.

31
00:02:31.530 --> 00:02:37.393
So it includes data bindings as
well as it allows us to essentially

32
00:02:37.393 --> 00:02:43.270
embed other components as children
into our parent components.

33
00:02:43.270 --> 00:02:44.955
So keep that in mind.

34
00:02:44.955 --> 00:02:45.869
Just a little mental note is that when
you want to make a component available or

35
00:02:45.869 --> 00:02:46.418
use a component, it's done via a template.

36
00:02:46.418 --> 00:02:51.510
And the upside for
this is or one thing that I

37
00:02:51.510 --> 00:02:58.445
think Angular has done really well,
is prior to Angular,

38
00:02:58.445 --> 00:03:03.680
so 1.x, so
I guess I will mention it a bit,

39
00:03:03.680 --> 00:03:10.189
is we had all these custom
events that we could bind to,

40
00:03:10.189 --> 00:03:17.760
and it just created a ton of
surface area for the framework.

41
00:03:17.760 --> 00:03:19.051
Well in Angular,

42
00:03:19.051 --> 00:03:24.430
what they decided to do is to just
simply leverage native DOM events.

43
00:03:24.430 --> 00:03:29.708
And so a lot of times,
if you want to respond to a click event,

44
00:03:29.708 --> 00:03:37.190
you will just simply bind to that native
DOM event, and then respond accordingly.

45
00:03:37.190 --> 00:03:41.905
So there's also some interesting
things in terms of shadow DOM that

46
00:03:41.905 --> 00:03:47.550
Angular leverages that allows you to
do kind of per component styling.

47
00:03:47.550 --> 00:03:51.563
And I'm not gonna talk about view and
capsulation much, but

48
00:03:51.563 --> 00:03:56.293
it is worth mentioning that you can
define styles at a component level.

49
00:03:56.293 --> 00:04:01.358
And the problem with CSS is
the C stands for cascading,

50
00:04:01.358 --> 00:04:07.098
and so if you've ever created something,
it looks amazing.

51
00:04:07.098 --> 00:04:11.269
And you spent hours on this masterpiece,
then you turn it off or

52
00:04:11.269 --> 00:04:13.639
you turn it over to your team to use.

53
00:04:13.639 --> 00:04:20.243
And then somebody, some barbarian in some
other team sets this H1 tags to 72 font or

54
00:04:20.243 --> 00:04:26.128
something and destroys it, that's
the plight of cascading stylesheets.

55
00:04:26.128 --> 00:04:33.302
And so Angular uses some shadow DOM
under the hood to kind of mitigate that.

56
00:04:33.302 --> 00:04:37.728
So in this case we
are defining our template,

57
00:04:37.728 --> 00:04:41.620
external to our component class.

58
00:04:41.620 --> 00:04:47.947
And this is the recommended way
of doing this, and personally and

59
00:04:47.947 --> 00:04:53.123
stylistically, I prefer
this style than having your

60
00:04:53.123 --> 00:04:58.431
template as an external file
separate from the class.

61
00:04:58.431 --> 00:05:03.342
And the upside to this is that if you have
somebody that's strictly doing layout,

62
00:05:03.342 --> 00:05:07.611
so if you work with a design team and
they're giving you layout, well,

63
00:05:07.611 --> 00:05:12.053
you just need to pick up their HTML and
essentially put that in proximity.

64
00:05:12.053 --> 00:05:14.540
Or put them into the template files and
then update it.

65
00:05:14.540 --> 00:05:18.659
Whereas you can do this inline, and so

66
00:05:18.659 --> 00:05:23.550
this is very much how it's done in React,
and

67
00:05:23.550 --> 00:05:29.757
I think that there's nothing
morally wrong about this.

68
00:05:29.757 --> 00:05:35.585
I personally, I prefer to have a clean
separation between declarative markup and

69
00:05:35.585 --> 00:05:37.028
imperative logic.

70
00:05:37.028 --> 00:05:43.025
But for simple cases,
this is an absolutely fine approach,

71
00:05:43.025 --> 00:05:49.150
is just to have your template
inline to your component class.

72
00:05:49.150 --> 00:05:55.629
So not a problem, I certainly am not going
to judge you or indict you in any way.

73
00:05:55.629 --> 00:06:00.737
But every time I brought this up to
a React developer to where it's like,

74
00:06:00.737 --> 00:06:05.117
well, what if you have a template
that's 400 lines long?

75
00:06:05.117 --> 00:06:11.343
Well, the response is, if that happens,
that's not a React problem,

76
00:06:11.343 --> 00:06:17.482
that is a much bigger problem in that
your component is too coarse grid.

77
00:06:17.482 --> 00:06:21.781
And so they kind of use this as a canary
in a coal mine situation where if all of

78
00:06:21.781 --> 00:06:25.744
a sudden you're looking at your
template and your component class,

79
00:06:25.744 --> 00:06:29.500
and it's very, very large or
it starts to become unmanageable,

80
00:06:29.500 --> 00:06:33.770
it's a good sign that you probably
need to create additional tractions.

