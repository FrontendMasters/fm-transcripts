WEBVTT

1
00:00:00.634 --> 00:00:05.493
We are going to talk about
[SOUND] my favorite subject

2
00:00:05.493 --> 00:00:10.127
in the world,
component driven architecture.

3
00:00:10.127 --> 00:00:15.344
And one of the things that
I want to call out here is

4
00:00:15.344 --> 00:00:20.560
that when it comes to
application development,

5
00:00:20.560 --> 00:00:27.955
there's a quote that I have in
the testing slides about complexity.

6
00:00:27.955 --> 00:00:33.328
And one of the things that
they're talking about is that

7
00:00:33.328 --> 00:00:38.359
complexity comprises of
really three main things,

8
00:00:38.359 --> 00:00:43.522
managing of state,
flow control, and code volume.

9
00:00:43.522 --> 00:00:47.818
With managing of state being
kind of the primary driver for

10
00:00:47.818 --> 00:00:50.537
complexity and then control flow and

11
00:00:50.537 --> 00:00:56.159
code volume being kind of like byproducts
of our inability to be effective.

12
00:00:56.159 --> 00:01:02.222
And what I like about
component driven architecture

13
00:01:02.222 --> 00:01:08.142
is that it kind of a mezzo or
kind of mid level range,

14
00:01:08.142 --> 00:01:14.344
it allows us to manage
complexity between components

15
00:01:14.344 --> 00:01:20.016
by managing state flow control and
code volume.

16
00:01:20.016 --> 00:01:25.780
In a micro level, I believe that
observable streams handle complexity very,

17
00:01:25.780 --> 00:01:32.630
very nicely in these really tight,
small, encapsulated, observable streams.

18
00:01:32.630 --> 00:01:38.174
And at a kind of a macro level that
this is where like NGRX comes in and

19
00:01:38.174 --> 00:01:40.650
handles very, very, very,

20
00:01:40.650 --> 00:01:45.620
very nicely manage the state
flow control and code volume.

21
00:01:45.620 --> 00:01:51.024
But you'll see here as I talk about
this that within a microcosm,

22
00:01:51.024 --> 00:01:57.113
this is representative of an approach
that is effective at a micro level,

23
00:01:57.113 --> 00:02:03.880
mezzo level, macro level, and
even I guess universal level, if you will.

24
00:02:03.880 --> 00:02:08.935
But it's when we talk about
component of an architecture,

25
00:02:08.935 --> 00:02:14.393
just know that it's kind of it
foreshadows or it is a pattern that

26
00:02:14.393 --> 00:02:20.276
has a lot of implications outside
of just component communication.

27
00:02:20.276 --> 00:02:22.356
So brief history of angular,

28
00:02:22.356 --> 00:02:27.430
if you've ever watched any of my
workshops you've seen this is not new,

29
00:02:27.430 --> 00:02:32.771
but if you are new and you've never
heard this, well you're in for a treat.

30
00:02:32.771 --> 00:02:36.581
So if you think back to the,

31
00:02:36.581 --> 00:02:42.890
I would say the second
advent of JavaScript.

32
00:02:42.890 --> 00:02:47.404
So the very first kind of I
think advent of JavaScript where

33
00:02:47.404 --> 00:02:51.561
people started to take it
seriously was with jQuery.

34
00:02:51.561 --> 00:02:56.091
Then after that, then people realize
there's like, well, there's some

35
00:02:56.091 --> 00:03:01.570
limitations and people tried to build
jQuery applications, which was very hard.

36
00:03:01.570 --> 00:03:03.752
It just didn't work very well.

37
00:03:03.752 --> 00:03:08.829
And then I believe kind of
the second coming of JavaScript

38
00:03:08.829 --> 00:03:15.069
is within what I would say kind of
the emergence of the first generation

39
00:03:15.069 --> 00:03:21.550
of modern web application frameworks,
and one of them was AngularJS.

40
00:03:21.550 --> 00:03:27.070
And what really set this apart is
that you were able to do some pretty

41
00:03:27.070 --> 00:03:32.412
impressive things very, very,
very quickly and very easily.

42
00:03:32.412 --> 00:03:37.365
That I think I haven't been to
the AngularJS site in a long time,

43
00:03:37.365 --> 00:03:42.409
but in just a couple lines of code
I was able to define a property and

44
00:03:42.409 --> 00:03:47.637
then bind to it in my HTML,
change that property, and the HTML would

45
00:03:47.637 --> 00:03:53.569
automatically update, that was like
a really big thing a couple years ago.

46
00:03:53.569 --> 00:04:00.834
Being able to have two way data
binding that just worked was a really,

47
00:04:00.834 --> 00:04:05.200
really kind of a shiny cool party trick.

48
00:04:05.200 --> 00:04:09.975
And so you had a tiny app that really
consisted of a very tiny view and

49
00:04:09.975 --> 00:04:11.434
a tiny controller.

50
00:04:11.434 --> 00:04:16.366
Then in my case, I decided I wanted to
make money with this possibly even move to

51
00:04:16.366 --> 00:04:19.270
Hollywood and make movies about this.

52
00:04:19.270 --> 00:04:26.287
And so my application started
to grow with my aspirations and

53
00:04:26.287 --> 00:04:33.029
eventually I got the green
light to do AngularJS for real,

54
00:04:33.029 --> 00:04:39.082
for money, and so
I'm just in my mansion in Malibu,

55
00:04:39.082 --> 00:04:44.192
and I've achieved everything that I want.

56
00:04:44.192 --> 00:04:49.236
And I'm laying there in my bed
with my snakeskin rug, and

57
00:04:49.236 --> 00:04:54.701
I realized that like I'm dying
inside that in all seriousness

58
00:04:54.701 --> 00:05:01.428
that these applications had grown to
where what seemed to be like this really

59
00:05:01.428 --> 00:05:08.050
cool novel thing is we had essentially
painted ourselves into a corner.

60
00:05:08.050 --> 00:05:12.784
So yeah,
we kind of had this huge mansion in Malibu

61
00:05:12.784 --> 00:05:17.198
style application but
it was just on tenable.

62
00:05:17.198 --> 00:05:23.090
So back to me laying in my bed and
my snakeskin comforter.

63
00:05:23.090 --> 00:05:27.965
And I was in a problem, we were in
a problem that this was a real issue,

64
00:05:27.965 --> 00:05:33.180
at least within the AngularJS community
is what do we do about the fact that

65
00:05:33.180 --> 00:05:38.899
we're writing applications or we have
one view, one controller, and they're

66
00:05:38.899 --> 00:05:44.908
literally I've seen them like controllers
that are 5,000 plus lines of code.

67
00:05:44.908 --> 00:05:48.003
How do you work with that in
a team to where it's like, okay,

68
00:05:48.003 --> 00:05:50.432
you need to work in the first 1,000 lines,

69
00:05:50.432 --> 00:05:54.780
and I'm gonna work in the last 1,000
lines and don't touch anything else.

70
00:05:54.780 --> 00:05:59.488
So it was almost like if you've ever done
any real time document editing on my

71
00:05:59.488 --> 00:06:00.381
Google Docs.

72
00:06:00.381 --> 00:06:05.577
That's kind of what it felt like, but
with code that had to compile and work.

73
00:06:05.577 --> 00:06:07.766
So let's just take a moment.

74
00:06:07.766 --> 00:06:12.590
Let's appreciate this because that's
the place that we found ourselves in.

75
00:06:12.590 --> 00:06:17.346
And there emerged two kind of
reasonable approaches to this.

76
00:06:17.346 --> 00:06:22.560
The first one was to create named routes.

77
00:06:22.560 --> 00:06:26.448
And so you had these named router outlets,
if you will,

78
00:06:26.448 --> 00:06:31.108
in your application,
like maybe like sidebar, content footer.

79
00:06:31.108 --> 00:06:36.000
And what that would do is then load
in a controller and a template.

80
00:06:36.000 --> 00:06:39.980
So you still had that pair,
but it was going into a route.

81
00:06:39.980 --> 00:06:45.090
And another, I think more that
gained more momentum over

82
00:06:45.090 --> 00:06:50.307
time was to just create
directives that would encapsulate

83
00:06:50.307 --> 00:06:56.810
certain functionality that you would
then attach to pieces of the page.

84
00:06:56.810 --> 00:07:02.134
So you would have like a sidebar
directive, a content directive,

85
00:07:02.134 --> 00:07:07.076
which was in a way it just kind
of foreshadowed where we ended up

86
00:07:07.076 --> 00:07:12.137
with angular with instead of directors,
we used components.

87
00:07:12.137 --> 00:07:15.757
So any angular application,
and if I'm being honest,

88
00:07:15.757 --> 00:07:19.916
I believe that this is pretty much
like any react application and

89
00:07:19.916 --> 00:07:25.154
probably any view application, potato,
there might be some differences, but

90
00:07:25.154 --> 00:07:30.360
I know at least when I write react, this
is the same exact approach that I take.

91
00:07:30.360 --> 00:07:35.683
In fact, a lot of the ways that we think
about components is because of the work or

92
00:07:35.683 --> 00:07:38.789
the innovations that
react did in that space.

93
00:07:38.789 --> 00:07:43.240
So I pour out champagne on the ground
him for the react team for

94
00:07:43.240 --> 00:07:49.010
really bringing components front and
center into the public consciousness.

95
00:07:49.010 --> 00:07:53.103
And this helped us solve
a couple of things, one,

96
00:07:53.103 --> 00:07:58.860
the problem was structure as well
as the problem with communication.

97
00:07:58.860 --> 00:08:03.954
So remember, complexity is
mentioned of state, flow control,

98
00:08:03.954 --> 00:08:08.215
and code volume, and
by solving the structure issue,

99
00:08:08.215 --> 00:08:12.862
that it helped alleviate some
of the code volume problems.

100
00:08:12.862 --> 00:08:17.267
But also by giving us a clean
way to structure our code but

101
00:08:17.267 --> 00:08:22.332
then establishing ways for
us to communicate, this helps solve

102
00:08:22.332 --> 00:08:28.550
a communication problem which falls
firmly under the flow control category.

