WEBVTT

1
00:00:00.210 --> 00:00:01.980
Let's talk about templates.

2
00:00:03.010 --> 00:00:07.937
So specifically, we're going to talk about

3
00:00:07.937 --> 00:00:13.384
the HTML portion, and
then more so the binding and

4
00:00:13.384 --> 00:00:18.311
we've seen this in
the Hello Angular piece,

5
00:00:18.311 --> 00:00:21.826
but just to refresh our memory.

6
00:00:21.826 --> 00:00:26.218
We have a template, we have a class,
our template is declarative in nature,

7
00:00:26.218 --> 00:00:27.330
it's HTML.

8
00:00:27.330 --> 00:00:32.180
Our class is imperative in nature,
that it's designed with imperative logic.

9
00:00:32.180 --> 00:00:38.000
And we need to be able communicate between
the two, so we have string interpolation.

10
00:00:38.000 --> 00:00:40.280
Which is your double curly braces.

11
00:00:40.280 --> 00:00:43.818
And all that's doing is saying
here's the value in in the template,

12
00:00:43.818 --> 00:00:46.810
it just renders it as a string and
that's as far as it goes.

13
00:00:46.810 --> 00:00:50.990
So this is why I've indicated
this with a dotted line.

14
00:00:50.990 --> 00:00:56.581
Now if I want to pass a complex
value in to a template so

15
00:00:56.581 --> 00:01:01.283
that it can be passed on
to a child template or

16
00:01:01.283 --> 00:01:08.640
it needs to modify something then
I will use property binding.

17
00:01:08.640 --> 00:01:12.410
But if something happens in
the template and I wanna capture that,

18
00:01:12.410 --> 00:01:14.290
then I use event binding.

19
00:01:14.290 --> 00:01:17.528
And if I need to put them together,

20
00:01:17.528 --> 00:01:22.790
then I use property and
event binding in the same place.

21
00:01:22.790 --> 00:01:27.804
So what I want to do here just real quick

22
00:01:27.804 --> 00:01:32.819
that we just to help kind of streamline

23
00:01:32.819 --> 00:01:38.318
some of this when you think about this is.

24
00:01:38.318 --> 00:01:43.697
If you have an object,
any want to access a dynamic

25
00:01:43.697 --> 00:01:48.307
variable and you don't know what that is,

26
00:01:48.307 --> 00:01:54.219
how do you dynamically access
a property on an object?

27
00:01:54.219 --> 00:01:58.250
Well, you use array notation.

28
00:01:58.250 --> 00:02:01.840
And let me see here I
think I can do this cool.

29
00:02:01.840 --> 00:02:06.904
So if I have an object and
I want to access

30
00:02:06.904 --> 00:02:11.980
a property, then I can do it like this.

31
00:02:13.980 --> 00:02:17.554
And so if property equaled name,
it would return the name,

32
00:02:17.554 --> 00:02:21.270
the value of the name
property on that object.

33
00:02:21.270 --> 00:02:26.331
Now if I want to execute something,
so let's say I have a function and

34
00:02:26.331 --> 00:02:31.600
I want to call it it's called hello
world and I wanna execute it.

35
00:02:31.600 --> 00:02:32.700
How do I do that?

36
00:02:32.700 --> 00:02:39.890
Well, at this point, it's just a function
but to execute it, I add in parentheses.

37
00:02:39.890 --> 00:02:43.678
So, this is how I think
of property binding and

38
00:02:43.678 --> 00:02:47.370
event binding is using array notation.

39
00:02:47.370 --> 00:02:52.045
I can bind to a property using event or
like these parentheses for

40
00:02:52.045 --> 00:02:55.120
functions, I can bind to an event.

41
00:02:55.120 --> 00:03:01.055
So just a little kind of a mental thing
somebody said once that kind of resonated,

42
00:03:01.055 --> 00:03:05.858
and I think it's a pretty good I
think it's consistent with how we

43
00:03:05.858 --> 00:03:08.840
actually program and other places.

44
00:03:08.840 --> 00:03:14.314
So property binding, so it's data
from the component to an element and

45
00:03:14.314 --> 00:03:17.490
we use brackets array notation.

46
00:03:17.490 --> 00:03:22.210
And what's cool is you can actually
bind to attributes, classes and styles.

47
00:03:22.210 --> 00:03:28.012
So, you could do, for instance,
color, any kind of a property

48
00:03:28.012 --> 00:03:34.788
we've done it where if you have like
a text field and you start typing it in.

49
00:03:34.788 --> 00:03:39.563
You can bind to the color
of that text field and

50
00:03:39.563 --> 00:03:46.205
change it on the fly with,
well, here we go style.color.

51
00:03:46.205 --> 00:03:50.427
And if we put this into a,
like a text field, as we change this,

52
00:03:50.427 --> 00:03:55.315
it would change the color of the text,
we may get into that.

53
00:03:55.315 --> 00:03:59.159
So event binding flows from data
from the element to the component,

54
00:03:59.159 --> 00:04:00.583
and we use parentheses.

55
00:04:00.583 --> 00:04:06.203
And the one thing I wanna
talk about is the event

56
00:04:06.203 --> 00:04:12.510
handler receives the event and
it is $event parameter.

57
00:04:12.510 --> 00:04:15.990
That's just kind of
the convention that Angular uses.

58
00:04:15.990 --> 00:04:19.350
And so you kind of need to have that.

59
00:04:19.350 --> 00:04:23.310
And if you're like, well,
I need to send out two things inside

60
00:04:23.310 --> 00:04:27.740
of an event handler I've ran into
problems with that it didn't work.

61
00:04:27.740 --> 00:04:30.399
What I had to do is combine them into

62
00:04:30.399 --> 00:04:35.370
a single object to then be
communicated via $event.

63
00:04:35.370 --> 00:04:39.487
So this is what this looks like here,
click, and we're able to do that.

64
00:04:39.487 --> 00:04:45.230
Two way data binding it's just the
conjunction of event and property binding.

65
00:04:46.260 --> 00:04:49.267
Sometimes it's referred to
as a banana in a box and

66
00:04:49.267 --> 00:04:52.140
typically you'll use it
with the entry model.

67
00:04:52.140 --> 00:04:58.164
There is a way for you to actually create
two way data binding on a component but

68
00:04:58.164 --> 00:05:00.030
I rarely ever use that.

69
00:05:00.030 --> 00:05:05.500
It's mainly just used with ngModel.

70
00:05:05.500 --> 00:05:10.105
All right, so, real quick just
review we have string interpolation,

71
00:05:10.105 --> 00:05:15.210
event binding, property binding and
then two way data binding.

72
00:05:15.210 --> 00:05:23.290
And now let's talk about
the structural directives.

73
00:05:23.290 --> 00:05:28.090
And so we have binding, but
we also have the ability to modify or

74
00:05:28.090 --> 00:05:29.730
manipulate the DOM.

75
00:05:30.780 --> 00:05:34.130
And so Using things like ngIf, ngSwitch,

76
00:05:34.130 --> 00:05:39.248
we can use these things to dynamically
indicate we want to use this

77
00:05:39.248 --> 00:05:44.942
part of the DOM where we want to render
this this way or render it this way.

78
00:05:44.942 --> 00:05:51.519
So ngIF is a big one ngFor is
another one that we use frequently.

79
00:05:53.560 --> 00:05:57.815
Every once in a while I use ng Switch and
but

80
00:05:57.815 --> 00:06:02.080
that's fairly rare but that does exist.

81
00:06:02.080 --> 00:06:06.510
So ngIf and ngFor is where you're
going to get your money's worth.

82
00:06:07.880 --> 00:06:13.245
And the reason why we use and
this is I think changed just a bit

83
00:06:13.245 --> 00:06:18.828
is that asterix is syntactic sugar for
what's being rendered

84
00:06:18.828 --> 00:06:24.109
under the hood at compile time
which is a lot more verbose.

85
00:06:24.109 --> 00:06:27.689
So skip don't worry about it real quick,

86
00:06:27.689 --> 00:06:32.550
another two things and
then we'll start coding.

87
00:06:32.550 --> 00:06:36.148
If you want to reference
a piece of your template,

88
00:06:36.148 --> 00:06:42.330
somewhere else inside of the template,
you can use a local template variable.

89
00:06:42.330 --> 00:06:49.080
And so, the canonical form of this is
a hashtag, whatever you wanna call it.

90
00:06:49.080 --> 00:06:52.465
This is very common when
dealing with forms.

91
00:06:52.465 --> 00:06:58.440
And if you need to do it in
a canonical form, where occasionally

92
00:06:58.440 --> 00:07:05.003
the some kind of like server side
rendering will conflict with this.

93
00:07:05.003 --> 00:07:12.922
You can do this using ref-variable which
is more of like an html5 Complaint thing.

94
00:07:12.922 --> 00:07:19.740
And so here, you can see we have
ng-template and we're calling this prompt.

95
00:07:19.740 --> 00:07:24.448
And so this is what I like about
ngIf is that if something is if

96
00:07:24.448 --> 00:07:29.252
current portfolio ID then render
this else render prompt and

97
00:07:29.252 --> 00:07:33.700
we can see that prompt here
is the second ng-template.

98
00:07:35.780 --> 00:07:41.200
And as well this is very very
common this is probably why because

99
00:07:41.200 --> 00:07:47.555
I'm able to reference the underlying
form controller using $formRef.

100
00:07:47.555 --> 00:07:52.523
And then based on the state of
that form like is it valid or

101
00:07:52.523 --> 00:07:56.025
not then I can disable or enable a form.

102
00:07:56.025 --> 00:07:59.370
So this is where we see again property and
event binding.

103
00:08:01.330 --> 00:08:06.313
And last but not least,
occasionally you need to bind

104
00:08:06.313 --> 00:08:09.980
to something that may or may not exist.

105
00:08:09.980 --> 00:08:14.747
And so this one point was called
the Elvis operator because of the little

106
00:08:14.747 --> 00:08:16.400
hair dip to do.

107
00:08:16.400 --> 00:08:22.521
But it is now safely referred to as
the safe navigation operator and

108
00:08:22.521 --> 00:08:26.033
it's just you use the question mark.

109
00:08:26.033 --> 00:08:29.665
This is also built into TypeScript I
think at this point, and

110
00:08:29.665 --> 00:08:33.240
it's a way to guard against null or
undefined properties.

