WEBVTT

1
00:00:00.170 --> 00:00:04.578
If a subscription is giving a response
that needs to be modified, for

2
00:00:04.578 --> 00:00:08.454
example, to create a data structure or
columns for a table,

3
00:00:08.454 --> 00:00:13.630
would you subscribe to the response
in the component or a service?

4
00:00:13.630 --> 00:00:16.332
Can you show an example of that?

5
00:00:16.332 --> 00:00:20.937
So we can see the async
pipe where the data needs

6
00:00:20.937 --> 00:00:26.016
modifications, so
I can answer the question, and

7
00:00:26.016 --> 00:00:30.876
then I can show you an example,
and a little bit.

8
00:00:30.876 --> 00:00:36.027
That the beautiful thing
about observable streams

9
00:00:36.027 --> 00:00:40.936
is that you have the ability
to transform the data

10
00:00:40.936 --> 00:00:46.410
inside of that stream
into whatever you want.

11
00:00:46.410 --> 00:00:51.455
And so under, like, I can't think
of any circumstance where you

12
00:00:51.455 --> 00:00:56.609
would need to pull data off of
an observable stream via subscribe.

13
00:00:56.609 --> 00:01:01.411
And then need to do any additional
transformation inside of

14
00:01:01.411 --> 00:01:03.336
that subscribe block.

15
00:01:03.336 --> 00:01:07.557
So if you are doing additional
data transformation

16
00:01:07.557 --> 00:01:12.267
inside of the subscribe block
i.e the end of the stream,

17
00:01:12.267 --> 00:01:16.881
you have missed an opportunity
inside of the observable

18
00:01:16.881 --> 00:01:21.027
stream itself within
the pipe to transform that.

19
00:01:21.027 --> 00:01:27.555
So you can write this one in stone is that
when you're working with a stream, your

20
00:01:27.555 --> 00:01:33.999
data should be in the exact form that you
need when it hits your subscribe block.

21
00:01:33.999 --> 00:01:38.267
And so I never ever need to
subscribe to a stream and

22
00:01:38.267 --> 00:01:43.654
do additional processing is that
it is in the shape that I need,

23
00:01:43.654 --> 00:01:47.229
by the time it gets to my subscribe block.

24
00:01:47.229 --> 00:01:54.490
So there are times where I will just
pipe that stream right into a template.

25
00:01:54.490 --> 00:01:59.276
And then there's other times where I
will consume that stream inside of like,

26
00:01:59.276 --> 00:02:01.560
some other service.

27
00:02:01.560 --> 00:02:04.141
But when you consume that stream,

28
00:02:04.141 --> 00:02:08.690
your data needs to be in the exact
shape that you want it to be.

29
00:02:09.690 --> 00:02:14.423
And unlike promises,
observables RXJS gives you

30
00:02:14.423 --> 00:02:19.900
that ability to where kind
of prior to observables.

31
00:02:19.900 --> 00:02:24.040
That I would get in, I think a lot
of us if you have used promises,

32
00:02:24.040 --> 00:02:28.417
you're familiar with this where
you basically resolve a promise,

33
00:02:28.417 --> 00:02:33.170
and then you still got like,
five other things that you need to do.

34
00:02:33.170 --> 00:02:37.348
And so what I would do is I would
essentially create a promise chain,

35
00:02:37.348 --> 00:02:40.880
that's kind of functionally
trying to to process this.

36
00:02:40.880 --> 00:02:46.333
But it's just a lot easier to do that with
observables because it's designed for

37
00:02:46.333 --> 00:02:48.850
that kind of functional pipeline.

38
00:02:48.850 --> 00:02:53.251
So I will show an example of
an async pipe in a bit, but

39
00:02:53.251 --> 00:02:58.455
the answer is that you should not
have to transform data inside

40
00:02:58.455 --> 00:03:05.310
of that subscribe block, you should be
able to do that in the pipe itself.

41
00:03:05.310 --> 00:03:10.510
Next question, can we create dynamic
template reference variables?

42
00:03:10.510 --> 00:03:14.933
I'm presuming this the idea is that,
can you create, but

43
00:03:14.933 --> 00:03:20.634
dynamic template reference variable
that has some unique name on the fly?

44
00:03:20.634 --> 00:03:26.180
To be honest, I think you can,
I don't know, so let me ponder that.

45
00:03:27.800 --> 00:03:30.972
I don't use a ton of template
reference variables,

46
00:03:30.972 --> 00:03:35.667
simply because typically I only need to
grab like a single part of a template.

47
00:03:35.667 --> 00:03:41.172
So that is a good question, I'm just gonna
be honest, I have never tried to do that,

48
00:03:41.172 --> 00:03:45.067
if somebody knows the answer I
would love to hear it as well.

49
00:03:45.067 --> 00:03:49.100
I would also like to hear what
the use cases because that sounds

50
00:03:49.100 --> 00:03:50.429
interesting to me.

51
00:03:50.429 --> 00:03:55.214
CSS in JS also popular in Angular,

52
00:03:55.214 --> 00:04:01.150
and I would say that the answer is no.

53
00:04:01.150 --> 00:04:06.959
The one thing that I would say
philosophically is different then,

54
00:04:06.959 --> 00:04:11.625
let's say react in Angular
is that react has in a sense

55
00:04:11.625 --> 00:04:16.929
converted everything into like,
an imperative approach.

56
00:04:16.929 --> 00:04:21.317
That like, well,
how do you do layout in react?

57
00:04:21.317 --> 00:04:26.975
Well, you've used JSX, which is
essentially a JavaScript representation

58
00:04:26.975 --> 00:04:31.770
of the DOM, and so they have
completely abstracted away the DOM.

59
00:04:33.140 --> 00:04:37.385
And I have seen I presume this is what
we're talking about is where you see like

60
00:04:37.385 --> 00:04:40.470
dynamic CSS that's being
manipulated by JavaScript.

61
00:04:42.180 --> 00:04:47.594
Philosophically, really the convention

62
00:04:47.594 --> 00:04:52.403
is within Angular is that you keep them

63
00:04:52.403 --> 00:04:57.960
separate and then we will use like CSS.

64
00:04:57.960 --> 00:05:03.554
I think you can use kind of these various
JavaScript and CSS, but at least for

65
00:05:03.554 --> 00:05:09.691
me, I keep them separate issue because in
the template I will use a post processor.

66
00:05:09.691 --> 00:05:15.276
But the very, very little like
imperative logic ever goes into that, so

67
00:05:15.276 --> 00:05:21.700
not saying somebody could not, I think
tailwind is actually pretty interesting.

68
00:05:21.700 --> 00:05:24.732
And something that I'm exploring but

69
00:05:24.732 --> 00:05:29.004
the answer is that's not
something that I've seen.

70
00:05:29.004 --> 00:05:35.060
But it's possible I believe, but
I think was rather popular is it,

71
00:05:35.060 --> 00:05:38.472
and I don't think it is that popular.

72
00:05:38.472 --> 00:05:42.582
If we handle the business
logic into a service,

73
00:05:42.582 --> 00:05:49.480
how can we handle the UX in the component
specifically like a loader?

74
00:05:49.480 --> 00:05:51.820
So this is a really good question.

75
00:05:51.820 --> 00:05:55.030
For instance, what if you have
asynchronous business logic?

76
00:05:55.030 --> 00:06:02.840
And you need to indicate in from a UX
standpoint that something is happening.

77
00:06:04.050 --> 00:06:10.473
And that so like a loader,
or something of that nature,

78
00:06:10.473 --> 00:06:17.170
and this is where observable
streams become really nice,

79
00:06:17.170 --> 00:06:24.980
and I can kind of work in kind of
an example of this a little bit later.

80
00:06:26.540 --> 00:06:31.214
It's very common actually in NGRX, which
is based on observable streams to have

81
00:06:31.214 --> 00:06:34.360
a loading property that you subscribe to.

82
00:06:34.360 --> 00:06:39.026
So you just have a loader that like NGF,
if it's loading,

83
00:06:39.026 --> 00:06:43.226
show the spinner, and so
what this would look like.

84
00:06:46.400 --> 00:06:51.121
And this is not real code, but
you could do something like,

85
00:06:56.908 --> 00:06:59.292
NGF, Async.

86
00:06:59.292 --> 00:07:06.467
And so this would just be an observable
stream that if it's loading,

87
00:07:06.467 --> 00:07:11.909
then it would show this,
if not, then it would not,

88
00:07:11.909 --> 00:07:17.246
so this is where you might
see something like that.

89
00:07:17.246 --> 00:07:21.998
So I would say use an observable stream,
cuz one of the big things

90
00:07:21.998 --> 00:07:26.770
with these kind of faces is
something happening over here.

91
00:07:26.770 --> 00:07:31.090
How do I communicate over
here that this has happened?

92
00:07:31.090 --> 00:07:36.435
And so typically you have some event based
architecture that accomplishes that,

93
00:07:36.435 --> 00:07:41.478
well, in the case of observables that
event is handled inside of the stream.

94
00:07:41.478 --> 00:07:46.688
And as new data becomes available that it
just pushes that data out to anything or

95
00:07:46.688 --> 00:07:48.881
anyone that is subscribed to it.

96
00:07:53.656 --> 00:07:59.413
This is a great question,
any book that you recommend to learn about

97
00:07:59.413 --> 00:08:04.875
component driven architecture,
I can't find any, sad face.

98
00:08:04.875 --> 00:08:11.987
So What you're going to find is that for

99
00:08:11.987 --> 00:08:18.874
some of these architecture patterns
that if you want to learn about them and

100
00:08:18.874 --> 00:08:23.682
read about them,
that you're going to have to go and

101
00:08:23.682 --> 00:08:28.712
read books that were written for
other technologies,

102
00:08:28.712 --> 00:08:34.900
and then kind of transpose that
into a JavaScript context.

103
00:08:34.900 --> 00:08:40.490
And so one of the,
first books that I ever read on component

104
00:08:40.490 --> 00:08:45.600
driven architecture was on,
Flex 4 Components.

105
00:08:45.600 --> 00:08:51.685
So before JavaScript,
I spent many years doing flash flex,

106
00:08:51.685 --> 00:08:56.218
and there is a book,
I believe it's called,

107
00:08:56.218 --> 00:09:02.184
Building Flex for Components or
something of that nature,

108
00:09:02.184 --> 00:09:06.510
and that's where I first
read a book on it.

109
00:09:06.510 --> 00:09:11.840
With that said, I would say any
of the like, Addison-Wesley,

110
00:09:11.840 --> 00:09:19.510
like Signature books is really good,
like Enterprise Patterns is a great book.

111
00:09:19.510 --> 00:09:23.934
Another book that I really,
really like that cut my teeth on design

112
00:09:23.934 --> 00:09:27.494
patterns was the,
Head First Design Patterns book.

113
00:09:27.494 --> 00:09:32.650
Which was very easy to read,
it's a very much of an interesting

114
00:09:32.650 --> 00:09:37.340
kind of a conversational style,
and so I would say that.

115
00:09:38.700 --> 00:09:43.437
As front end developers, specifically
in Angular, there's a lot to be

116
00:09:43.437 --> 00:09:47.876
said about going and reading books
outside of JavaScript Angular.

117
00:09:47.876 --> 00:09:52.989
And front end development, I mean,
some of the old classic books,

118
00:09:52.989 --> 00:09:58.193
and it's amazing that 30,
40 years ago, that very, very smart

119
00:09:58.193 --> 00:10:04.136
people were spending a lot of cycles
solving problems that seem very new to us.

120
00:10:04.136 --> 00:10:08.936
But have existed or people have
solved them in cycles for years and

121
00:10:08.936 --> 00:10:10.253
years and years.

122
00:10:10.253 --> 00:10:15.909
So let me ponder that, I might
actually even add that to the README,

123
00:10:15.909 --> 00:10:18.499
just some recommended books.

124
00:10:18.499 --> 00:10:23.133
I think anything from Robert C Martin,
so I recommend clean code,

125
00:10:23.133 --> 00:10:25.714
clean architecture, clean coder.

126
00:10:25.714 --> 00:10:30.803
So a lot of those like kind
of high level classic books,

127
00:10:30.803 --> 00:10:35.770
you simply cannot go wrong,
the great works.

128
00:10:35.770 --> 00:10:37.627
And so last question here,

129
00:10:37.627 --> 00:10:41.840
can you talk more about
the different types of components?

130
00:10:41.840 --> 00:10:46.952
I absolutely will, component driven
architecture, I think that's all

131
00:10:46.952 --> 00:10:52.238
the questions I have Mark, if anything
else has come in, hit me I'm ready.

132
00:10:52.238 --> 00:10:56.648
&gt;&gt; Have you heard of people
using a motion with Angular or

133
00:10:56.648 --> 00:10:59.294
any of the CSS in JS friendlies?

134
00:10:59.294 --> 00:11:04.502
&gt;&gt; I haven't to be honest not much,
but again, you've seen how good

135
00:11:04.502 --> 00:11:10.459
I am at CSS and that's not at all, and
so typically I have stuck to material.

136
00:11:10.459 --> 00:11:14.941
There is,
I think tailwinds pretty interesting, but

137
00:11:14.941 --> 00:11:20.592
other than that I think it's pretty
popular in the react community,

138
00:11:20.592 --> 00:11:24.208
but not so
much negative that I'm aware of.

139
00:11:24.208 --> 00:11:27.681
&gt;&gt; Since there's about 150 RXJS operators,

140
00:11:27.681 --> 00:11:30.984
which ones do you use
the most with Angular?

141
00:11:30.984 --> 00:11:34.406
I you use so map, is a big one,
switch map, merge,

142
00:11:34.406 --> 00:11:37.360
what else, filter, so filter is a big one.

143
00:11:40.140 --> 00:11:46.136
Like you will find that interesting enough
that if you're going to learn RXJS, first,

144
00:11:46.136 --> 00:11:51.339
you need to understand observable streams,
which is slightly different.

145
00:11:51.339 --> 00:11:55.235
But people who are learning
reactive programming,

146
00:11:55.235 --> 00:12:01.168
especially when it involves observables
and RXJS is they just get absolutely,

147
00:12:01.168 --> 00:12:05.417
I think overwhelmed by how
many operators there are, and

148
00:12:05.417 --> 00:12:08.447
how many different things that they do.

149
00:12:08.447 --> 00:12:12.987
What they don't realize is that
just under the hood is a pretty,

150
00:12:12.987 --> 00:12:15.860
I would say, I don't wanna say simple.

151
00:12:15.860 --> 00:12:21.173
But a pretty basic concept that
once they understand that first,

152
00:12:21.173 --> 00:12:27.130
then it's a lot easier to understand
the operators themselves.

153
00:12:27.130 --> 00:12:32.590
And so to make an analogy,
I've been learning the piano of the shear.

154
00:12:32.590 --> 00:12:37.412
And I have my teachers,
because I have more than one thankfully,

155
00:12:37.412 --> 00:12:40.482
that they've really impressed upon me,

156
00:12:40.482 --> 00:12:45.230
that I need to learn basic chord
progressions and why they work.

157
00:12:46.230 --> 00:12:48.927
In doing so,
they said once you understand this,

158
00:12:48.927 --> 00:12:52.396
then if you really understand
this in the context of 10 songs,

159
00:12:52.396 --> 00:12:57.770
you'll really understand how to play
50 songs and by extension 150 songs.

160
00:12:57.770 --> 00:13:02.799
And I believe this works very well
with programming in the sense of,

161
00:13:02.799 --> 00:13:08.448
when you really understand four or
five RXJS operators, and why they work,

162
00:13:08.448 --> 00:13:14.382
and you understand why they work because
of the underlying observable stream.

163
00:13:14.382 --> 00:13:20.468
That wrapping your mind around the other
100 operators is inconsequential,

164
00:13:20.468 --> 00:13:23.830
because you understand why they work.

165
00:13:23.830 --> 00:13:28.787
On the other hand, trying to learn how
to play an instrument by learning 150

166
00:13:28.787 --> 00:13:31.490
songs would be really, really hard.

167
00:13:31.490 --> 00:13:37.112
And so I would say first principles and
then build on that,

168
00:13:37.112 --> 00:13:41.814
but for me, map, filter,
switch map, merge,

169
00:13:41.814 --> 00:13:46.490
I really like taken till is pretty good.

170
00:13:46.490 --> 00:13:51.450
And from, have, so if I'm just marking
out data, I use have quite a bit as

171
00:13:51.450 --> 00:13:55.941
well as tap, but I wanna see what's
happening inside the stream.

172
00:13:55.941 --> 00:14:02.370
So there you have it, those are the tops
ones that come to my mind at least.

173
00:14:02.370 --> 00:14:07.990
&gt;&gt; Your thoughts on NGRX versus purely
using services for state management?

174
00:14:07.990 --> 00:14:12.993
&gt;&gt; I'm trying to think of a way
to say this that is not like,

175
00:14:12.993 --> 00:14:19.921
I don't wanna cover this with any kind
of like negative, any kind of a slant.

176
00:14:19.921 --> 00:14:26.373
Because I have actually been in some
situations where just the entire tone

177
00:14:26.373 --> 00:14:31.380
of this conversation was very negative,
very hurtful.

178
00:14:34.380 --> 00:14:39.389
That, I'll say this,
when you talk to somebody

179
00:14:39.389 --> 00:14:44.518
who is a proponent for
a service with a subject, so

180
00:14:44.518 --> 00:14:50.140
this is where we essentially
have stateful services,

181
00:14:50.140 --> 00:14:55.656
and they are using the subject
to communicate state.

182
00:14:55.656 --> 00:15:00.975
That more often than not,
the argument is like,

183
00:15:00.975 --> 00:15:05.515
why would I use NGRX, it's too complex,

184
00:15:05.515 --> 00:15:12.680
when I can accomplish this same
thing in a service with a subject?

185
00:15:14.380 --> 00:15:20.937
The problem with that is that for
every piece of your domain model,

186
00:15:20.937 --> 00:15:26.100
you have to create a service and
then have a subject.

187
00:15:27.140 --> 00:15:31.690
And so if you have a small proof of
concept app, I think that's totally fine.

188
00:15:31.690 --> 00:15:36.406
I think using a service with a subject
is a transition mechanism is absolutely

189
00:15:36.406 --> 00:15:37.360
appropriate.

190
00:15:38.970 --> 00:15:43.831
But if you are looking at
building a production enterprise

191
00:15:43.831 --> 00:15:47.907
level application with
a complex domain model.

192
00:15:47.907 --> 00:15:53.908
And let's say you have, I don't know
20 entities in your domain model,

193
00:15:53.908 --> 00:15:58.478
what you're going to end up
doing is you're going to have

194
00:15:58.478 --> 00:16:03.068
to create 20 services,
with 20 behavior subjects.

195
00:16:03.068 --> 00:16:07.199
So the difference is with NGRX,

196
00:16:07.199 --> 00:16:14.980
they also use a behavior subject,
except they use one.

197
00:16:14.980 --> 00:16:19.996
And so the irony to me is that
NGRX is too complicated or

198
00:16:19.996 --> 00:16:23.280
there's too much overhead.

199
00:16:23.280 --> 00:16:27.279
And so instead, what we're going to do
is create a service with a subject for

200
00:16:27.279 --> 00:16:29.100
every entity in our domain model.

201
00:16:31.150 --> 00:16:36.113
And instead of simply
using a single behavior

202
00:16:36.113 --> 00:16:40.950
subject for your entire state management.

203
00:16:40.950 --> 00:16:45.360
So for me, I'm also a fan of
a service with a subject,

204
00:16:45.360 --> 00:16:51.732
the difference is that I prefer to just
use one in my application versus 20.

205
00:16:51.732 --> 00:16:56.808
Not only that is when you use
a service with the subject,

206
00:16:56.808 --> 00:17:03.723
you lose the ability to leverage all of
the other pieces that come with NGRX.

207
00:17:03.723 --> 00:17:08.424
So for instance,
purely from Redux DevTools alone,

208
00:17:08.424 --> 00:17:15.542
you don't get to use Redux DevTools if
you're using the service with a subject.

209
00:17:15.542 --> 00:17:19.683
With NGRX you absolutely can,
and it is a great tool for

210
00:17:19.683 --> 00:17:24.468
troubleshooting in introspecting
within your application.

211
00:17:24.468 --> 00:17:30.091
Being able to separate your communication
layer via strongly typed actions,

212
00:17:30.091 --> 00:17:31.500
is a big plus.

213
00:17:31.500 --> 00:17:36.374
As well as having a specific layer for
your asynchronous

214
00:17:36.374 --> 00:17:40.946
side effects is also,
I think, really important.

215
00:17:40.946 --> 00:17:46.353
And so when people that they tend to,
I think be antagonistic or

216
00:17:46.353 --> 00:17:50.841
hostile towards NGRX,
because it's too complex,

217
00:17:50.841 --> 00:17:56.974
what they end up doing is they end up
having to rewrite a bunch of pieces.

218
00:17:56.974 --> 00:18:03.536
Because they're just, they're hand
rolling it, and they tend to do it,

219
00:18:03.536 --> 00:18:10.320
I think one person versus all of the 100
peoples have contributed to NGRX.

220
00:18:11.960 --> 00:18:18.221
I think those implementations tend
to actually not be that great.

221
00:18:18.221 --> 00:18:21.194
It's like people who, in they exist and

222
00:18:21.194 --> 00:18:26.704
I would love to have a conversation
with somebody who falls into this camp,

223
00:18:26.704 --> 00:18:30.918
but there are people that
are totally anti-framework.

224
00:18:30.918 --> 00:18:34.137
And what I don't understand
about that is well,

225
00:18:34.137 --> 00:18:37.365
how do you build anything
that is non-trivial?

226
00:18:37.365 --> 00:18:42.237
Well, what you're gonna have to
do is you're going to have to

227
00:18:42.237 --> 00:18:48.370
essentially create some kind of
a framework on the fly every single time.

228
00:18:48.370 --> 00:18:54.231
And I think that's just a lot of work for
no reason, so

229
00:18:54.231 --> 00:19:01.450
that's kind of my take on NGRX
versus a service with a subject.

230
00:19:01.450 --> 00:19:04.403
I will use them for
communication mechanisms, but

231
00:19:04.403 --> 00:19:07.149
when it comes to doing
real estate management,

232
00:19:07.149 --> 00:19:11.008
somebody who's just using solely
services with subjects there.

233
00:19:11.008 --> 00:19:16.670
I think what they're doing is they're
actually deferring their complexity.

234
00:19:16.670 --> 00:19:20.370
And they're going to have to pay that
price eventually and it's gonna be,

235
00:19:20.370 --> 00:19:21.963
it's gonna come with attacks.

236
00:19:21.963 --> 00:19:25.217
And it's gonna be more than if they
would have just started with NGRX.

237
00:19:27.508 --> 00:19:30.700
Hopefully that was fairly diplomatic.

238
00:19:32.110 --> 00:19:36.294
If we were hanging out and
nobody else was around,

239
00:19:36.294 --> 00:19:39.960
[LAUGH] I may be a little
bit more sarcastic.

240
00:19:39.960 --> 00:19:40.709
But hopefully,

241
00:19:40.709 --> 00:19:44.581
I tempered that appropriately is that
they're great as a transition mechanism.

242
00:19:44.581 --> 00:19:47.342
But for any real state management,

243
00:19:47.342 --> 00:19:52.130
I recommend using an established
state management library,

244
00:19:52.130 --> 00:19:56.191
like NGRX, or Redux, or
something of that nature.

