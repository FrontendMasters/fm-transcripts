WEBVTT

1
00:00:00.480 --> 00:00:06.510
How does the template and the class,
how do they know about each other?

2
00:00:06.510 --> 00:00:11.120
So how do we essentially
zip these two together so

3
00:00:11.120 --> 00:00:16.404
that a template and
a class at runtime comes together and

4
00:00:16.404 --> 00:00:20.330
they can make sweet music together?

5
00:00:20.330 --> 00:00:23.920
Well, this is done via metadata.

6
00:00:23.920 --> 00:00:30.616
And, this allows Angular to process
the class, process the template and

7
00:00:30.616 --> 00:00:35.705
put these together into kind
of a single coherent unit.

8
00:00:35.705 --> 00:00:41.405
And we attach this metadata,
the TypeScript using decorators.

9
00:00:41.405 --> 00:00:46.489
And this is I think prior to
going all in on TypeScript,

10
00:00:46.489 --> 00:00:52.570
that this idea of using annotations or
decorators to establish or

11
00:00:52.570 --> 00:00:58.756
extend some kind of like meta intent
is not new at all like spring and

12
00:00:58.756 --> 00:01:03.620
Java frameworks of different
interviews this, but

13
00:01:03.620 --> 00:01:07.410
it didn't really exist in JavaScript.

14
00:01:07.410 --> 00:01:09.620
And I think even the Angular
team was going to create.

15
00:01:09.620 --> 00:01:11.850
I think they're gonna call
it add script or something.

16
00:01:11.850 --> 00:01:13.500
Thank God they did not.

17
00:01:13.500 --> 00:01:15.877
But they realize that TypeScript,

18
00:01:15.877 --> 00:01:19.620
they already had
an implementation of decorators.

19
00:01:19.620 --> 00:01:21.493
And so, in my opinion,

20
00:01:21.493 --> 00:01:26.762
this is probably one of the big
reasons why we moved to TypeScript.

21
00:01:26.762 --> 00:01:31.804
Now, one thing to mention,
again, this is one of these

22
00:01:31.804 --> 00:01:38.367
like hashtag pro tips is that these
decorators they are just functions.

23
00:01:38.367 --> 00:01:43.210
And so when you define a decorator or
some kind of

24
00:01:43.210 --> 00:01:48.537
metadata that in this happens
a lot with like input or

25
00:01:48.537 --> 00:01:54.370
output is I'll forget to put
the function call in there.

26
00:01:54.370 --> 00:01:56.040
So those are the parentheses.

27
00:01:56.040 --> 00:01:57.840
As a result, it just doesn't work.

28
00:01:57.840 --> 00:02:01.593
So do keep in mind that
they are just functions.

29
00:02:01.593 --> 00:02:06.210
Which means if you wanted,
you could very easily create your own

30
00:02:06.210 --> 00:02:09.556
custom decorators and
that's not hard to do.

31
00:02:09.556 --> 00:02:14.658
So the most common is at component
decorator that takes a number of

32
00:02:14.658 --> 00:02:19.763
configuration options that tells
Angular just like Engie module

33
00:02:19.763 --> 00:02:24.954
this is how we want to attach, or
this is how we want to decorate this

34
00:02:24.954 --> 00:02:29.900
component class with this style,
this template, et cetera.

35
00:02:31.260 --> 00:02:33.862
So you can see here,
our component decorator.

36
00:02:33.862 --> 00:02:40.350
Notice it is a function that is accepting
an object as a parameter and the selector.

37
00:02:40.350 --> 00:02:44.316
So this is what we use to
attach it to the template and

38
00:02:44.316 --> 00:02:49.230
invoke it in our application,
template URL style URLs.

39
00:02:49.230 --> 00:02:54.260
So this is actually an array that you
can have more than one style sheet.

40
00:02:54.260 --> 00:02:58.733
I've never seen fit to do that,
but you could if you wanted.

41
00:02:58.733 --> 00:03:02.759
And you can also do inline metadata.

42
00:03:02.759 --> 00:03:06.111
So when we get into component
driven architecture,

43
00:03:06.111 --> 00:03:08.938
we will leverage input and output heavily.

44
00:03:08.938 --> 00:03:12.380
So not only can you decorate the class,
but

45
00:03:12.380 --> 00:03:17.267
you can decorate individual properties for
fun and profit.

46
00:03:17.267 --> 00:03:22.372
All right, so
class template how do they talk?

47
00:03:22.372 --> 00:03:23.203
How are they connected?

48
00:03:23.203 --> 00:03:24.895
Well, this is data binding.

49
00:03:24.895 --> 00:03:32.040
So data binding allows data to flow from
the template to the class and vice versa.

50
00:03:32.040 --> 00:03:36.878
And so we have a few different types
of binding interpolation property

51
00:03:36.878 --> 00:03:38.700
event into a binding.

52
00:03:38.700 --> 00:03:45.650
And the binding syntax, on the other hand,
with Angular has expanded a little bit.

53
00:03:45.650 --> 00:03:50.131
But what this allows us to do is
by expanding our bindings syntax,

54
00:03:50.131 --> 00:03:55.101
we were able to create more meaningful
bindings while reducing the API of

55
00:03:55.101 --> 00:03:56.740
the framework itself.

56
00:03:57.880 --> 00:04:02.060
So, in a nutshell, there's four of them.

57
00:04:02.060 --> 00:04:04.230
Most people are familiar
with the double braces.

58
00:04:04.230 --> 00:04:06.967
So this is just basic
string interpolation,

59
00:04:06.967 --> 00:04:11.080
meaning it is just going to render
simple strings in your template.

60
00:04:12.250 --> 00:04:16.963
If you wanted to pass a property
from a class into the template, and

61
00:04:16.963 --> 00:04:22.930
then possibly into another subcomponent,
you do that via property binding.

62
00:04:22.930 --> 00:04:26.703
If you wanted to capture
an event from a template and

63
00:04:26.703 --> 00:04:31.490
then handle it in the class,
you use event binding.

64
00:04:31.490 --> 00:04:35.604
And if you want to do both,
so two way data binding,

65
00:04:35.604 --> 00:04:40.570
is you'll notice that property
binding goes one way.

66
00:04:40.570 --> 00:04:41.990
It's a one way street.

67
00:04:41.990 --> 00:04:44.940
And event binding goes the other way.

68
00:04:44.940 --> 00:04:49.154
And what happens if you take
two one way streets and

69
00:04:49.154 --> 00:04:52.172
you put them together side by side?

70
00:04:52.172 --> 00:04:58.901
You have a two way street which is exactly
how NG model works is that it is allowing

71
00:04:58.901 --> 00:05:05.580
for when you update it in the component
class, it renders in the template.

72
00:05:05.580 --> 00:05:10.843
But because forms and filling in forms are
essentially a bidirectional activity and

73
00:05:10.843 --> 00:05:12.548
it's mutative by nature,

74
00:05:12.548 --> 00:05:16.710
we need to be able to capture that
in update on the component class.

75
00:05:16.710 --> 00:05:19.810
So this is where this two-way binding
comes in, more on that later.

76
00:05:20.870 --> 00:05:25.320
And so we can just think of it
this way that you have a class.

77
00:05:25.320 --> 00:05:29.160
It's passing properties or values into
the template via property binding.

78
00:05:29.160 --> 00:05:31.443
And then if something
happens in the template,

79
00:05:31.443 --> 00:05:33.160
we capture that via event binding.

80
00:05:34.160 --> 00:05:37.260
And you can see here at the top,
we have some string interpolation.

81
00:05:37.260 --> 00:05:39.780
We're just rendering title body.

82
00:05:39.780 --> 00:05:42.450
So this is, again,
I want to render a string.

83
00:05:43.460 --> 00:05:46.933
And that's as far as it goes that
you can actually pass a value into

84
00:05:46.933 --> 00:05:50.230
a child component,
that's not what it's designed for.

85
00:05:50.230 --> 00:05:54.921
On the other hand, if I wanted to pass an
experiment, so you can see in the second

86
00:05:54.921 --> 00:05:59.542
line, I'm binding to experiment and
I'm gonna pass in is I'm iterating over

87
00:05:59.542 --> 00:06:04.260
the experiments, I want to pass
that into the experiment component.

88
00:06:04.260 --> 00:06:05.230
That's how that is done.

89
00:06:05.230 --> 00:06:08.123
So we're basically passing a property or

90
00:06:08.123 --> 00:06:14.290
a value from the class into the template
and then ideally into a subcomponent.

91
00:06:14.290 --> 00:06:17.543
And then you'll notice on the bottom
here we have a button that we're

92
00:06:17.543 --> 00:06:21.280
capturing a click event, and then we're
using that to update the message.

93
00:06:21.280 --> 00:06:26.535
And then you will see to a data-binding
NG model, this is where it's on input,

94
00:06:26.535 --> 00:06:31.790
so that whatever's in your component
class gets rendered into the form.

95
00:06:31.790 --> 00:06:34.830
But as you update it,
it then gets rendered back.

96
00:06:36.270 --> 00:06:39.580
All right, so real quick,
what about directives?

97
00:06:39.580 --> 00:06:45.130
This was a major,
major piece that when you were doing 1.x,

98
00:06:45.130 --> 00:06:52.292
it was what happened to directives because
everything now is component based.

99
00:06:52.292 --> 00:06:57.887
Well, they still exist and we still use
them a lot whether we realize it or

100
00:06:57.887 --> 00:07:02.770
not that a component is basically
a directive with a template.

101
00:07:02.770 --> 00:07:08.018
So if you need to do something that has
functionality, but it doesn't require

102
00:07:08.018 --> 00:07:13.660
a template, rather it needs to just act
on a pre existing element on the page.

103
00:07:13.660 --> 00:07:15.290
This is where a directive comes in.

104
00:07:15.290 --> 00:07:22.600
So I don't know if you knew this, but the
blink tag was deprecated many years ago.

105
00:07:22.600 --> 00:07:24.580
And I think it's a tragedy.

106
00:07:24.580 --> 00:07:30.060
And I think it's only a matter of time
before some hipster brings them back.

107
00:07:30.060 --> 00:07:37.530
And I'm going to tell you how to do that
with a Angular directive called blink.

108
00:07:37.530 --> 00:07:42.095
So we could create a class called
blinker that takes an element and

109
00:07:42.095 --> 00:07:44.513
then you would just do something.

110
00:07:44.513 --> 00:07:48.429
So notice it doesn't have a template but
it takes the element ref

111
00:07:48.429 --> 00:07:52.140
that you're working with and
you can do all sorts of things.

112
00:07:52.140 --> 00:07:57.250
So somebody could if they
wanted resurrect the blink tag

113
00:07:57.250 --> 00:08:02.660
if you wanted and make anything and
everything blink.

114
00:08:02.660 --> 00:08:07.873
&gt;&gt; Is there any concept of a virtual
DOM in Angular like there isn't react?

115
00:08:07.873 --> 00:08:13.569
&gt;&gt; Not in the sense of real, no.

116
00:08:13.569 --> 00:08:18.129
So I would say stylistically or
philosophically,

117
00:08:18.129 --> 00:08:23.330
this is where I think Angular and
react converge the most.

118
00:08:24.330 --> 00:08:30.336
So, whereas you have virtual DOM in react,
where it's taking everything and

119
00:08:30.336 --> 00:08:35.432
then constructing essentially this
virtual DOM that is then being

120
00:08:35.432 --> 00:08:40.164
rendered Angular, on the other hand,
they have decided to or

121
00:08:40.164 --> 00:08:45.451
really leverage the core functionality
of HTML as much as possible.

122
00:08:45.451 --> 00:08:48.890
So the answer is there a concept
of virtual DOM in Angular.

123
00:08:48.890 --> 00:08:53.505
The answer is no instead of pulling away
from the DOM, the Angular team has for

124
00:08:53.505 --> 00:08:58.334
the most part kind of leaned into it which
is why you're essentially binding up to

125
00:08:58.334 --> 00:09:00.410
native dom elements, et cetera.

126
00:09:01.420 --> 00:09:04.030
&gt;&gt; Is component extended from directive?

127
00:09:04.030 --> 00:09:08.834
&gt;&gt; If we go into some code here,

128
00:09:08.834 --> 00:09:16.040
I'm gonna show you just a bit of a tip.

129
00:09:16.040 --> 00:09:20.600
One of the reasons why I like
TypeScript is that a lot of times,

130
00:09:20.600 --> 00:09:26.540
I can click into something and I can see
here that component extends directive.

131
00:09:26.540 --> 00:09:28.864
So, the answer is absolutely yes.

132
00:09:28.864 --> 00:09:32.456
So the question is does
component extend directive?

133
00:09:32.456 --> 00:09:33.020
It does.

134
00:09:33.020 --> 00:09:35.460
And I think what they've done is taken
all the directive functionality and

135
00:09:35.460 --> 00:09:36.690
said we're taking this.

136
00:09:36.690 --> 00:09:42.260
We're just going to allow somebody
to attach a template to it.

137
00:09:42.260 --> 00:09:47.275
So, this is really, really handy and
I recommend if you have a question

138
00:09:47.275 --> 00:09:53.476
about something, just going and clicking
into it, and and seeing what's available.

139
00:09:53.476 --> 00:09:59.783
So I spent a lot of time command clicking
into like these core type definitions and

140
00:09:59.783 --> 00:10:04.345
so somebody asked like this
component extend directive.

141
00:10:04.345 --> 00:10:08.881
I first thought was like well maybe I
don't know well that's really easy to

142
00:10:08.881 --> 00:10:13.360
find out you can just click and you can
see here that it does indeed do that.

143
00:10:13.360 --> 00:10:16.020
So, really, really good question.

144
00:10:16.020 --> 00:10:17.023
So the question is,

145
00:10:17.023 --> 00:10:21.070
is it good practice to programmatically
render a component in Angular?

146
00:10:21.070 --> 00:10:25.289
And the answer is Intel, Angular 13,

147
00:10:25.289 --> 00:10:30.760
which is where we are,
it was really hard to do that.

148
00:10:31.760 --> 00:10:37.105
And so
one of the things that was really easy to

149
00:10:37.105 --> 00:10:44.288
do in 1.x was to dynamically
render a component on the DOM.

150
00:10:44.288 --> 00:10:49.337
With Angular 13,
you can now programmatically render

151
00:10:49.337 --> 00:10:55.333
components on the DOM and by that
just to clarify is there situations

152
00:10:55.333 --> 00:11:00.382
where maybe the underlying
data structure is the same but

153
00:11:00.382 --> 00:11:07.244
the representation of that based on some
kind of a type might be differently.

154
00:11:07.244 --> 00:11:12.685
And so being able to determine the type
and then say okay I'm going to attach or

155
00:11:12.685 --> 00:11:18.295
instantiate this component into the DOM
based on this that would be a use case but

156
00:11:18.295 --> 00:11:22.499
that would be I would say
the exception and not not the rule.

157
00:11:22.499 --> 00:11:24.940
So the answer is, is it a good idea?

158
00:11:24.940 --> 00:11:29.828
I would say in most cases, you don't
need to programmatically render your

159
00:11:29.828 --> 00:11:33.951
components in terms of dynamically
attaching them to the DOM.

160
00:11:33.951 --> 00:11:37.957
Is that more often than not,
you can just attach the template or

161
00:11:37.957 --> 00:11:41.902
your component into a template and
it gets rendered that way.

162
00:11:41.902 --> 00:11:45.620
But there are cases where you might need
to do that, but it's not very often.

