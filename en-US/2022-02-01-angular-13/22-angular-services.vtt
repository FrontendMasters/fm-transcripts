WEBVTT

1
00:00:00.025 --> 00:00:02.756
Let's talk about Angular services.

2
00:00:02.756 --> 00:00:06.091
So everything we've done up to this

3
00:00:06.091 --> 00:00:10.766
point has been within
the context of a component.

4
00:00:10.766 --> 00:00:15.793
And the challenge is what
happens when you have data or

5
00:00:15.793 --> 00:00:22.504
functionality that needs to be
available for more than one component?

6
00:00:22.504 --> 00:00:29.442
So for the longest time the most
popular question on Stack Overflow for

7
00:00:29.442 --> 00:00:34.507
AngularJS was how can two
controllers share data?

8
00:00:34.507 --> 00:00:39.742
And so the answer here is that
if you have functionality or

9
00:00:39.742 --> 00:00:45.087
data that needs to be shared
across multiple components,

10
00:00:45.087 --> 00:00:48.263
well, you do that with a service.

11
00:00:48.263 --> 00:00:53.911
Now at this point,
I am hoping that you've started to notice

12
00:00:53.911 --> 00:01:00.794
a bit of a trend in that when we define
a model, when we define a component.

13
00:01:00.794 --> 00:01:05.806
That there is something
very similar about those

14
00:01:05.806 --> 00:01:11.919
particular mechanisms that
we're going to see even more so

15
00:01:11.919 --> 00:01:18.295
in Angular services and that is,
everything is just a class.

16
00:01:18.295 --> 00:01:23.984
And so when I realized this,
I had kind of a wat moment,

17
00:01:23.984 --> 00:01:31.184
and I started looking at all of
the things that I was using in Angular.

18
00:01:31.184 --> 00:01:37.596
And I realised that when I'm using
a module, it's a class with some metadata.

19
00:01:37.596 --> 00:01:42.215
If I'm building the pipe, class metadata,
components, obviously we've seen it.

20
00:01:42.215 --> 00:01:47.811
Class metadata, services,
directives everything

21
00:01:47.811 --> 00:01:53.166
that we do in Angular is
a class with some metadata.

22
00:01:53.166 --> 00:01:57.538
So in the case of a service,
we create a class,

23
00:01:57.538 --> 00:02:02.473
we define our methods and
then we make this available

24
00:02:02.473 --> 00:02:07.199
using injectable and
typically provide in root.

25
00:02:07.199 --> 00:02:13.845
And you can expose it directly to
entry module in the providers,

26
00:02:13.845 --> 00:02:18.399
but again,
typically I forego this unless I

27
00:02:18.399 --> 00:02:22.967
have a good reason by
using provide in root.

28
00:02:22.967 --> 00:02:26.899
And then when we want to consume it, well,

29
00:02:26.899 --> 00:02:31.929
we do this via dependency
injection in the constructor

30
00:02:31.929 --> 00:02:36.443
so, With that said,
we're done with this module.

31
00:02:36.443 --> 00:02:40.397
Just kidding, we got a code demo, but
then we're done with this module.

32
00:02:40.397 --> 00:02:42.612
I'm taking this really seriously.

33
00:02:42.612 --> 00:02:47.676
All right, so let's hop into the code.

34
00:02:47.676 --> 00:02:53.201
Let me just make sure I am
on an appropriate branch.

35
00:02:53.201 --> 00:02:55.823
Zoom is being not cool.

36
00:02:58.117 --> 00:03:00.286
There we go, all right.

37
00:03:00.286 --> 00:03:06.660
So we are going to, Take what we

38
00:03:06.660 --> 00:03:11.788
have this far, and
we are going to build out some services.

39
00:03:11.788 --> 00:03:15.906
So in our courses component,

40
00:03:15.906 --> 00:03:21.846
we have this data structure here courses.

41
00:03:21.846 --> 00:03:30.095
And we're going to extract
that into a courses service.

42
00:03:30.095 --> 00:03:34.058
So if we hop into our command line,

43
00:03:34.058 --> 00:03:41.177
we're going to go ng g s will
go common/services/courses.

44
00:03:41.177 --> 00:03:46.598
Let's go d just to make sure that
everything is in the right place.

45
00:03:46.598 --> 00:03:52.228
So common/services/courses,
there we go and,

46
00:03:55.195 --> 00:04:00.727
Let me go ahead and
I'll take off the dry run flag here and

47
00:04:00.727 --> 00:04:04.981
let's go ahead and hop back into our code.

48
00:04:04.981 --> 00:04:08.855
And if we look inside
of our common folder,

49
00:04:08.855 --> 00:04:13.169
we now have services
with our courses service.

50
00:04:13.169 --> 00:04:18.175
So now what I'm going to do is I'm going

51
00:04:18.175 --> 00:04:22.576
to extract this data structure and

52
00:04:22.576 --> 00:04:29.266
I'm going to move it over
into our courses service.

53
00:04:29.266 --> 00:04:33.978
So we'll go courses and I'm going to

54
00:04:33.978 --> 00:04:39.298
type this as an array
of course objects and

55
00:04:39.298 --> 00:04:42.957
I'm going to paste this in.

56
00:04:42.957 --> 00:04:47.921
Now this is throwing up just a bit or
it's angry because you

57
00:04:47.921 --> 00:04:53.105
notice here these are numbers and
they should be strings so,

58
00:04:55.359 --> 00:04:58.398
With that said, I can also get rid of,

59
00:05:00.428 --> 00:05:05.366
The constructor, I'm not using it and
providedIn root,

60
00:05:05.366 --> 00:05:09.596
and so
all I've done is I've just picked this up,

61
00:05:09.596 --> 00:05:14.561
I've moved it into a service,
nothing else has changed.

62
00:05:14.561 --> 00:05:22.880
And then from here, I can go into my
constructor and I can inject this.

63
00:05:22.880 --> 00:05:30.311
So I'll go here, private coursesService.

64
00:05:34.675 --> 00:05:40.786
There we go and let's save this and

65
00:05:40.786 --> 00:05:45.423
then on ngOnInit, we're

66
00:05:45.423 --> 00:05:50.497
going to go this.courses =

67
00:05:52.550 --> 00:05:56.722
this.coursesService.

68
00:06:01.217 --> 00:06:02.750
Courses.

69
00:06:04.138 --> 00:06:09.673
All right, and
what I wanna do real quick just,

70
00:06:10.993 --> 00:06:14.301
To illustrate that we are pulling
this from somewhere else.

71
00:06:26.627 --> 00:06:30.624
We'll go Rapid Application
Development Patterns and,

72
00:06:32.022 --> 00:06:35.556
I need to make a pretty
important note here.

73
00:06:35.556 --> 00:06:42.285
THIS MUST BE DONE BY 3.30 OR ELSE!

74
00:06:44.369 --> 00:06:46.028
Don't forget!

75
00:06:48.992 --> 00:06:54.719
All right, so, Let's hop in here and

76
00:06:54.719 --> 00:07:01.795
let's check this out, so now, Here we are.

77
00:07:03.414 --> 00:07:08.889
I've just picked up a structure,
put it into a service,

78
00:07:08.889 --> 00:07:12.207
and then I was able to pull this in.

79
00:07:12.207 --> 00:07:15.793
So hopefully that was incredible,

80
00:07:15.793 --> 00:07:20.940
you're stunned right now
with how simple that is.

81
00:07:20.940 --> 00:07:25.001
That there are times where something is so
easy and so

82
00:07:25.001 --> 00:07:31.105
underwhelming that I'm absolutely
overwhelmed at how underwhelming it is.

83
00:07:31.105 --> 00:07:37.175
In this case, when we're talking
about services in Angular,

84
00:07:37.175 --> 00:07:41.306
that in most cases it
is simply a matter of,

85
00:07:42.772 --> 00:07:46.833
Promotion through refactoring, so

86
00:07:46.833 --> 00:07:51.942
what I'm going to do is
in lieu of a challenge,

87
00:07:51.942 --> 00:07:56.396
if you notice here that
we have in our home

88
00:07:56.396 --> 00:08:01.117
component rather, we have some lessons.

89
00:08:01.117 --> 00:08:05.877
So I'm going to go ahead and
I'm going to create

90
00:08:05.877 --> 00:08:11.361
a lessons service, so
common/services/lessons.

91
00:08:12.865 --> 00:08:18.242
I just do the dry flag,
it's kinda muscle memory at this point,

92
00:08:18.242 --> 00:08:22.736
we'll go here, like so,
we'll generate this and,

93
00:08:24.447 --> 00:08:30.503
I'm gonna call this lessons and
I'm going to pick this up.

94
00:08:30.503 --> 00:08:35.701
Now the one thing that actually
does not like lessons,

95
00:08:35.701 --> 00:08:38.644
which is fix this, save this.

96
00:08:38.644 --> 00:08:41.527
We'll go to our home component.

97
00:08:41.527 --> 00:08:42.745
I'm going to save this.

98
00:08:42.745 --> 00:08:46.032
Let's go into our lessons service.

99
00:08:49.178 --> 00:08:52.500
There we go.

100
00:08:54.790 --> 00:09:01.534
All right, so lesson service,
lessons providedIn root.

101
00:09:01.534 --> 00:09:04.813
Let's go into our home component and

102
00:09:04.813 --> 00:09:09.905
we're going to make this available,
lessonsService.

103
00:09:11.528 --> 00:09:16.776
LessonsService and then from here,

104
00:09:16.776 --> 00:09:24.573
this.lessons =
this.lessonsService.lessons.

105
00:09:24.573 --> 00:09:33.066
All right, now,
Let's see if this is rendering.

106
00:09:33.066 --> 00:09:35.965
All right, good, it is.

107
00:09:35.965 --> 00:09:41.142
Now since we're here, and
since I am freestyling

108
00:09:41.142 --> 00:09:46.072
just a bit even though I
told myself I would not,

109
00:09:46.072 --> 00:09:49.785
I can't help it, it is a sickness.

110
00:09:49.785 --> 00:09:55.844
But please, if you know the cure
don't tell me, I am going to.

111
00:10:20.849 --> 00:10:26.022
All right, so now what I've done is just

112
00:10:26.022 --> 00:10:30.739
using the from operator, from xjs,

113
00:10:30.739 --> 00:10:36.066
I've just taken this lessons array, and

114
00:10:36.066 --> 00:10:42.935
I have now converted this
into an observable stream.

115
00:10:42.935 --> 00:10:47.292
Let's go back to here and,

116
00:10:50.373 --> 00:10:59.230
Rather I'm going to, Just set this and

117
00:10:59.230 --> 00:11:05.075
so Angular does not like it when I
do this, but whatever or it may not.

118
00:11:13.006 --> 00:11:17.846
All I'm doing here is
from the lesson service,

119
00:11:17.846 --> 00:11:22.087
I'm just pulling in the lessons string.

120
00:11:22.087 --> 00:11:23.549
So what this is a,

121
00:11:23.549 --> 00:11:29.418
you can see here it's an observable
of this object with the title on it.

122
00:11:29.418 --> 00:11:33.382
So we're talking about
the async pipe here.

123
00:11:37.474 --> 00:11:41.979
If I go back into my
home component here and

124
00:11:41.979 --> 00:11:45.840
if I change this to the dollar sign,

125
00:11:45.840 --> 00:11:51.015
what should happen is it
should throw an error.

126
00:11:51.015 --> 00:11:53.626
Yay, that's the point.

127
00:11:53.626 --> 00:11:58.804
So now if I go back, what I can do is I

128
00:11:58.804 --> 00:12:04.701
can add in the async pipe, save this and

129
00:12:04.701 --> 00:12:09.542
did this, Get upset?

130
00:12:09.542 --> 00:12:10.685
Let me check.

131
00:12:21.130 --> 00:12:23.319
Let lessons of lessons.

132
00:12:28.677 --> 00:12:32.301
This is, well, all right,

133
00:12:32.301 --> 00:12:36.529
I'm gonna press pause on this for

134
00:12:36.529 --> 00:12:43.486
a sec because I will pick this
up in a moment in terms of.

135
00:12:45.842 --> 00:12:47.445
I'm gonna pull this back off, but

136
00:12:47.445 --> 00:12:50.387
we are going to pick this up in
component driven architecture.

137
00:12:50.387 --> 00:12:53.413
Once we get into component
driven architecture,

138
00:12:53.413 --> 00:12:56.807
this will make a lot more sense,
but setting the stage.

139
00:12:56.807 --> 00:13:01.487
So with that said, let's

140
00:13:01.487 --> 00:13:06.604
pause for some quick Q and A.

141
00:13:06.604 --> 00:13:11.606
And if anybody has any questions
about this, I would love to hear it.

142
00:13:11.606 --> 00:13:16.112
&gt;&gt; What's the difference between
using the providers metadata,

143
00:13:16.112 --> 00:13:18.957
else instantiating the class with new?

144
00:13:18.957 --> 00:13:23.888
&gt;&gt; Instantiating the class with new?

145
00:13:25.917 --> 00:13:30.494
So Riley, so
the question is what's there in using

146
00:13:30.494 --> 00:13:36.251
the providers metadata versus
instantiating a class with new?

147
00:13:36.251 --> 00:13:42.393
Well, so I typically do not new up a class

148
00:13:42.393 --> 00:13:49.453
because that is handled
within the injector.

149
00:13:49.453 --> 00:13:54.932
So the injector is responsible for
essentially keeping a reference.

150
00:13:54.932 --> 00:13:59.719
So you essentially have a key that says,
when I'm looking for

151
00:13:59.719 --> 00:14:02.759
this thing, here's the reference and

152
00:14:02.759 --> 00:14:07.568
then they instantiate it and
they keep that on record for you.

153
00:14:07.568 --> 00:14:13.048
So I'm trying to think of an instance
where I've ever actually instantiated

154
00:14:13.048 --> 00:14:18.710
a class manually and typically I don't
because I let the injector handle that.

