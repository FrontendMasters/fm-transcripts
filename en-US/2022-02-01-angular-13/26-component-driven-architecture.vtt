WEBVTT

1
00:00:00.090 --> 00:00:04.298
Let's talk about component
driven architecture.

2
00:00:04.298 --> 00:00:07.672
The idea in and of itself is not super,

3
00:00:07.672 --> 00:00:12.206
I think we don't have to
do too many leaps of logic,

4
00:00:12.206 --> 00:00:18.430
that we simply divide our application
into small encapsulated pieces

5
00:00:18.430 --> 00:00:23.920
of software that can be reused
in many different contexts.

6
00:00:23.920 --> 00:00:29.603
So Angular, fortunately, strongly
encourages this by making it easy and

7
00:00:29.603 --> 00:00:35.850
in a lot of ways necessary to build out
every feature of an app as a component.

8
00:00:35.850 --> 00:00:40.264
And so we can think of Angular components
as these kind of self encapsulated

9
00:00:40.264 --> 00:00:44.483
building blocks that contain their
own templates, styles and logic.

10
00:00:44.483 --> 00:00:47.840
So you can pick them up and
you can move them elsewhere.

11
00:00:48.970 --> 00:00:50.296
Also not in the slide, but

12
00:00:50.296 --> 00:00:54.396
I will point this out, is not only does
it contain logic, but more importantly is

13
00:00:54.396 --> 00:00:57.900
that you can write them in a way
that they do not contain logic.

14
00:00:57.900 --> 00:00:59.810
And that's even better.

15
00:00:59.810 --> 00:01:03.890
So if we look at the anatomy
of a component and

16
00:01:03.890 --> 00:01:08.523
how that component work together,
we can see that

17
00:01:08.523 --> 00:01:14.560
obviously we have property bindings and
event bindings.

18
00:01:14.560 --> 00:01:17.441
And the question that I have is,

19
00:01:17.441 --> 00:01:23.220
what if we could define custom
properties and events to bind to?

20
00:01:23.220 --> 00:01:28.355
So, hm, do you think that's possible?

21
00:01:28.355 --> 00:01:32.782
Well, I've tricked everybody because
it is, you walked right into that trap,

22
00:01:32.782 --> 00:01:34.227
oldest trick in the book.

23
00:01:34.227 --> 00:01:39.572
So we can create custom data
binding on our events and

24
00:01:39.572 --> 00:01:45.855
our properties in the form of @inputs and
@outputs.

25
00:01:45.855 --> 00:01:52.065
And so I've prepared a little
slideshow to illustrate this point.

26
00:01:53.970 --> 00:02:00.338
When you have a parent and a child
component, where is the surface area?

27
00:02:00.338 --> 00:02:05.100
Where do they intersect, On the template?

28
00:02:05.100 --> 00:02:09.792
So if you want to put a component
on the page of an application,

29
00:02:09.792 --> 00:02:11.530
how do you do that?

30
00:02:11.530 --> 00:02:16.634
Well, you add it to a template,
so that it can then be

31
00:02:16.634 --> 00:02:22.180
instantiated and
become part of the application.

32
00:02:22.180 --> 00:02:25.767
So in this case,
we have a parent class and

33
00:02:25.767 --> 00:02:29.261
a child class and they share a template.

34
00:02:29.261 --> 00:02:36.103
And so this is the relationship,
we're separating the overlap and

35
00:02:36.103 --> 00:02:41.744
from within the child component,
we have a template and

36
00:02:41.744 --> 00:02:47.760
a child class and
this is standard event property binding.

37
00:02:47.760 --> 00:02:52.674
So from here, if I want to take
a property from the child class and

38
00:02:52.674 --> 00:02:57.412
I wanna render in the template,
I just use property binding.

39
00:02:57.412 --> 00:03:01.871
If I want to capture
an event from the template,

40
00:03:01.871 --> 00:03:08.650
then I will add that or
I'll capture that into the child class.

41
00:03:08.650 --> 00:03:13.891
Now, on the other hand,
from the parent component,

42
00:03:13.891 --> 00:03:20.230
if I want to put something into the child,
I do that via @input.

43
00:03:20.230 --> 00:03:24.916
And if I want to capture something that's
happening from the child into the parent,

44
00:03:24.916 --> 00:03:26.110
that is an @output.

45
00:03:26.110 --> 00:03:31.210
So I think thankfully, the English
language has not completely broken down,

46
00:03:31.210 --> 00:03:35.310
in that we're putting data in,
we're getting data out.

47
00:03:35.310 --> 00:03:40.782
And so this is, at a high level,
this is what this looks,

48
00:03:40.782 --> 00:03:46.026
is we're passing data into
our class via an @input and

49
00:03:46.026 --> 00:03:53.590
we're getting it out via an @output and
I realized that these are backwards.

50
00:03:53.590 --> 00:03:58.860
I'm not gonna fix this, but
I will update this a bit later.

51
00:03:58.860 --> 00:04:04.870
So an @input allows data to flow from
a parent component to a child component.

52
00:04:04.870 --> 00:04:11.290
And we use the @input decorator and
then we bind to it in the parent template.

53
00:04:12.600 --> 00:04:17.624
So in this case, we have a component
that has an @input of greeting and

54
00:04:17.624 --> 00:04:23.690
we are going to render that using
string interpolation in the template.

55
00:04:23.690 --> 00:04:29.181
And then in the parent component, we are
able to pass that in, whatever greeting

56
00:04:29.181 --> 00:04:34.380
that may be, into the child component
via property bindings as an @input.

57
00:04:35.500 --> 00:04:40.511
Now an @output, how this works
is because using event binding,

58
00:04:40.511 --> 00:04:43.435
we're binding to a native DOM event.

59
00:04:43.435 --> 00:04:48.626
Well, we can use the EventEmitter,
so it essentially is

60
00:04:48.626 --> 00:04:54.684
an instance of the EventEmitter
that we expose the EventEmitter so

61
00:04:54.684 --> 00:05:00.762
that when we want to trigger it,
we can call EventEmitter.emit.

62
00:05:00.762 --> 00:05:06.077
And so what we're doing is
we're basically dispatching or

63
00:05:06.077 --> 00:05:11.934
emitting an action from the child
into the parent as an @output.

64
00:05:11.934 --> 00:05:16.694
So in this case, you can see here that
we have an @output of greeter and

65
00:05:16.694 --> 00:05:19.690
it is an instance of EventEmitter.

66
00:05:19.690 --> 00:05:25.389
And when we want to emit that,
then we do this.greeter.emit,

67
00:05:25.389 --> 00:05:31.824
and we pass the value in that we want
to surface or bubble up to our parent,

68
00:05:31.824 --> 00:05:37.770
and then we're able to bind to
this just like a normal event.

69
00:05:37.770 --> 00:05:42.550
And you notice that it's greet and
then $event for the payload.

70
00:05:44.760 --> 00:05:48.720
And what this does, so
we've kind of focused in, but

71
00:05:48.720 --> 00:05:51.560
I wanna zoom out just a bit.

72
00:05:51.560 --> 00:05:57.517
That why this is important is
because we are now able to establish

73
00:05:57.517 --> 00:06:03.477
an agreement between a parent
component and a child component or

74
00:06:03.477 --> 00:06:08.570
between a component and
anything that wants to use it.

75
00:06:08.570 --> 00:06:11.240
So this is in a sense
a component contract.

76
00:06:11.240 --> 00:06:13.948
So this is where, essentially,

77
00:06:13.948 --> 00:06:18.792
it's an agreement between the supplier and
the consumer.

78
00:06:18.792 --> 00:06:23.736
And our inputs and
our outputs work as essentially the API

79
00:06:23.736 --> 00:06:26.520
interface for that component.

80
00:06:28.060 --> 00:06:33.171
Also, it works really well
as kind of a visual cue

81
00:06:33.171 --> 00:06:38.920
about how to interface and
interact with a component.

82
00:06:38.920 --> 00:06:43.760
So one thing that I'm not
going to get into much but

83
00:06:43.760 --> 00:06:48.022
I'm going to just offer
a small comment on is

84
00:06:48.022 --> 00:06:52.746
that when we look at Angular and,
by extension,

85
00:06:52.746 --> 00:06:57.816
React and modern web frameworks,
it is allowed us,

86
00:06:57.816 --> 00:07:03.320
given us the opportunity to
turn our HTML into a DSL.

87
00:07:03.320 --> 00:07:07.805
Meaning we can create
markup that adopts all of

88
00:07:07.805 --> 00:07:13.470
the semantics of our
particular business domain.

89
00:07:13.470 --> 00:07:19.263
And so, what this means is that you can
have a non-technical stakeholder look

90
00:07:19.263 --> 00:07:24.786
at some markup, and they can say,
well, I know what an items list is,

91
00:07:24.786 --> 00:07:29.561
or I know what a contracts list or
whatever it is, they can look.

92
00:07:29.561 --> 00:07:35.200
And because you're adopting semantics
that are familiar to that domain,

93
00:07:35.200 --> 00:07:39.953
non-technical stakeholders can
look at even markup or code.

94
00:07:39.953 --> 00:07:45.195
And it's very easy for them to kind
of make sense of what's happening.

95
00:07:45.195 --> 00:07:50.309
By even defining the specific inputs or
properties that you can use

96
00:07:50.309 --> 00:07:56.241
to hydrate that component, as well as
the things that that component can do,

97
00:07:56.241 --> 00:07:59.825
i.e., the events or the outputs, is that.

98
00:07:59.825 --> 00:08:06.878
Imagine you had an application for
law and you had a client and

99
00:08:06.878 --> 00:08:12.831
it's like they were able
to omit a litigate event.

100
00:08:12.831 --> 00:08:17.151
Well, that doesn't mean much to me but
in the context of maybe a law firm,

101
00:08:17.151 --> 00:08:22.121
when that event is omitted, that means
something, it's very meaningful to them.

102
00:08:22.121 --> 00:08:27.049
So it's important to at least register

103
00:08:27.049 --> 00:08:31.529
that by using inputs and outputs and

104
00:08:31.529 --> 00:08:36.469
component driven architecture.

105
00:08:36.469 --> 00:08:41.742
Is just a natural byproduct,
we are able to establish a domain-specific

106
00:08:41.742 --> 00:08:47.621
language for our application which I
think is, it's really, really powerful.

107
00:08:47.621 --> 00:08:52.805
And I will say this,
that a lot of times there's pushback from

108
00:08:52.805 --> 00:09:00.570
engineers about getting non-technical
stakeholders involved at the code level.

109
00:09:00.570 --> 00:09:05.353
So for instance,
I really like Cucumber when I'm doing

110
00:09:05.353 --> 00:09:10.445
automated end-to-end testing
because I can establish or

111
00:09:10.445 --> 00:09:14.210
define my specs in
a natural language that is

112
00:09:14.210 --> 00:09:18.930
very similar to how you
would speak something.

113
00:09:18.930 --> 00:09:24.427
As a user, when I log in,
I should be on this page.

114
00:09:24.427 --> 00:09:27.707
And so, this allows for product owners and

115
00:09:27.707 --> 00:09:32.632
stakeholders to look at these
Cucumber specs and they serve this

116
00:09:32.632 --> 00:09:38.330
kind of documentation or
acceptance criteria for how that works.

117
00:09:38.330 --> 00:09:40.590
Same thing with these components.

118
00:09:40.590 --> 00:09:45.690
The pushback is that, well, nobody would
ever do this or I'd never seen it.

119
00:09:45.690 --> 00:09:49.722
And I think for me the question
that I immediately go to is,

120
00:09:49.722 --> 00:09:52.206
well, how would they have seen it?

121
00:09:52.206 --> 00:09:56.934
That we historically do not create
opportunities for non-technical

122
00:09:56.934 --> 00:10:01.833
stakeholders to interact with
engineering in kind of a meaningful way.

123
00:10:01.833 --> 00:10:06.730
Is that we create kind of these secret
handshakes that you got to come to

124
00:10:06.730 --> 00:10:10.570
the back door and
knock a certain way to be led in.

125
00:10:10.570 --> 00:10:15.211
When I think, as engineers,
we should endeavor to make the code that

126
00:10:15.211 --> 00:10:19.052
we write and the things that we
do to be as approachable and

127
00:10:19.052 --> 00:10:23.775
as understandable as it can be to
everybody within the organization,

128
00:10:23.775 --> 00:10:28.357
starting from our stakeholders,
but ultimately to our end users.

129
00:10:28.357 --> 00:10:32.000
So I don't know where that came from,
but I feel very strongly about it.

130
00:10:32.000 --> 00:10:35.844
So, now, what this allows us to do,

131
00:10:35.844 --> 00:10:40.810
queue container presentation components.

132
00:10:40.810 --> 00:10:43.670
I've been waiting all day
to answer this question, or

133
00:10:43.670 --> 00:10:45.900
at least fulfill this request.

134
00:10:45.900 --> 00:10:51.169
This allows us to create nice,
neat containers with

135
00:10:51.169 --> 00:10:57.850
clearly defined data flows from
the parent to the child and back.

136
00:10:57.850 --> 00:11:02.991
So this is container and presentational
components, aka, historically,

137
00:11:02.991 --> 00:11:07.971
it was smart and dumb, components
apparently that, I think what happened

138
00:11:07.971 --> 00:11:12.655
is it really offended a lot of smart
people and they didn't like that.

139
00:11:12.655 --> 00:11:19.594
So it said stop disparaging me when
you're talking about smart components.

140
00:11:19.594 --> 00:11:21.788
I'm totally kidding,
that's hilarious to me,

141
00:11:21.788 --> 00:11:23.676
I'll laugh about it when I'm off camera.

142
00:11:23.676 --> 00:11:27.758
But container components
are your kind of large

143
00:11:27.758 --> 00:11:32.656
components that they are responsible for,
I would say,

144
00:11:32.656 --> 00:11:39.816
collecting the data to make available to
its child or presentational components.

145
00:11:39.816 --> 00:11:43.698
And presentational components,
on the other hand,

146
00:11:43.698 --> 00:11:48.974
are small very specific components
that are defined by their bindings.

147
00:11:48.974 --> 00:11:53.204
And so you can think of that
all data goes in as inputs,

148
00:11:53.204 --> 00:11:56.670
every change comes out is an output.

149
00:11:56.670 --> 00:12:01.803
And you want to create as few
container components as possible and

150
00:12:01.803 --> 00:12:06.950
as many presentational components
as possible or appropriate.

151
00:12:08.220 --> 00:12:13.740
And so,
this is a presentational component.

152
00:12:13.740 --> 00:12:17.771
We'll kind of build this out in a moment.

153
00:12:17.771 --> 00:12:21.380
But you can see here,
there's not a lot happening.

154
00:12:22.970 --> 00:12:25.150
It's just data bindings.

155
00:12:25.150 --> 00:12:30.450
On the other hand, this is what
a container component looks like.

156
00:12:30.450 --> 00:12:35.504
So this is more responsible for
one interfacing with an external

157
00:12:35.504 --> 00:12:41.883
service to get the data or to establish
the query side of the command query cycle.

158
00:12:41.883 --> 00:12:47.593
As well as issue commands or
execute or call methods on services

159
00:12:47.593 --> 00:12:52.820
to handle the business logic
outside of the component.

160
00:12:52.820 --> 00:12:57.611
So, what this means is

161
00:12:57.611 --> 00:13:01.651
state flows down.

162
00:13:01.651 --> 00:13:05.334
So you have a container component
that's saying get all the data and

163
00:13:05.334 --> 00:13:09.919
then it's taking bits and pieces of the
data, some of the data, and saying, here,

164
00:13:09.919 --> 00:13:13.878
you get this component or this data,
and component, you get this data.

165
00:13:13.878 --> 00:13:17.555
And it's consuming just enough
to render the templates,

166
00:13:17.555 --> 00:13:22.358
but then it's also responsible for
segmenting it out so that the individual

167
00:13:22.358 --> 00:13:27.237
presentational components are getting
the data that they need as well as they

168
00:13:27.237 --> 00:13:31.841
have the ability to surface
the appropriate events for that component.

169
00:13:31.841 --> 00:13:39.222
So, state flows down, and events flow up.

170
00:13:39.222 --> 00:13:43.974
So, within a presentation component,
it says hey, here's this event, route it,

171
00:13:43.974 --> 00:13:45.229
do something with it.

172
00:13:46.260 --> 00:13:51.180
And then in the container component,
it's saying, hey, process this event.

173
00:13:52.350 --> 00:13:56.260
And here is the kicker of the whole thing.

174
00:13:56.260 --> 00:14:02.180
So remember, state flows down,
events flow up.

175
00:14:02.180 --> 00:14:05.850
You basically understand redux.

176
00:14:05.850 --> 00:14:07.680
So double WAT.

177
00:14:07.680 --> 00:14:13.182
And this is true,
because remember I said at a mezzo or

178
00:14:13.182 --> 00:14:18.076
medium level,
component driven architecture

179
00:14:18.076 --> 00:14:22.602
is a representation of
a pattern that exists

180
00:14:22.602 --> 00:14:27.618
across various scopes
within the application,

181
00:14:27.618 --> 00:14:34.860
kind of structure itself from a micro
interaction to a macro concern.

