WEBVTT

1
00:00:00.000 --> 00:00:03.149
So questions,
how do I know what is happening within,

2
00:00:03.149 --> 00:00:05.140
under the hood of the English COI.

3
00:00:05.140 --> 00:00:07.027
What is it doing?

4
00:00:07.027 --> 00:00:11.194
So it will, for instance, tell you
if you're generating something that,

5
00:00:11.194 --> 00:00:14.652
you've generated these files
are installing these tendencies.

6
00:00:14.652 --> 00:00:17.540
So there is a verbose flag.

7
00:00:17.540 --> 00:00:22.860
And, the reason why I love
doing these workshops,

8
00:00:25.947 --> 00:00:29.614
Is because I get to try things on the fly.

9
00:00:29.614 --> 00:00:34.609
So the question is, or
rather the request is,

10
00:00:34.609 --> 00:00:41.920
could I give a quick overview for
best practices on file structure?

11
00:00:41.920 --> 00:00:47.440
And so let me start with a little asterix,

12
00:00:47.440 --> 00:00:52.961
a preemptive caveat
that there are a lot of

13
00:00:52.961 --> 00:00:58.190
things where it's not black or white.

14
00:00:58.190 --> 00:01:00.881
It's not cut and dry.

15
00:01:00.881 --> 00:01:06.713
And so, I want to be careful or
at least if I put forth an opinion,

16
00:01:06.713 --> 00:01:11.465
I want to at least indicate
that this is my opinion and

17
00:01:11.465 --> 00:01:17.189
I have met individuals that they are so
absolutely militant and

18
00:01:17.189 --> 00:01:22.494
religious about these ideas about,
this is how you code.

19
00:01:22.494 --> 00:01:27.768
And they are one,
I just wonder why they programmed because

20
00:01:27.768 --> 00:01:34.098
it doesn't seem they're having very
much fun which really defeats for

21
00:01:34.098 --> 00:01:38.653
me the greatest joy
programming is that I enjoy it.

22
00:01:38.653 --> 00:01:43.878
But that they're so
hung up on these little things,

23
00:01:43.878 --> 00:01:49.680
I don't know, tabs versus spaces,
semi colon versus not.

24
00:01:49.680 --> 00:01:50.906
That we missed the fact or
the I think the underlying drive, or

25
00:01:50.906 --> 00:01:52.450
impetus of programming is that we program
to create things that people love.

26
00:01:52.450 --> 00:01:54.277
And, we make decisions that accelerate our
ability to do that and to keep doing that.

27
00:01:54.277 --> 00:01:59.570
And there are things

28
00:01:59.570 --> 00:02:03.928
that fall within

29
00:02:03.928 --> 00:02:08.909
the realm of purely

30
00:02:08.909 --> 00:02:13.891
preferential like

31
00:02:13.891 --> 00:02:18.570
stylistically.

32
00:02:18.570 --> 00:02:19.835
This is what makes sense to me.

33
00:02:19.835 --> 00:02:23.947
And in some cases, in my case,
I can't explain why.

34
00:02:23.947 --> 00:02:28.600
So, with that said,
some of this is my opinion.

35
00:02:28.600 --> 00:02:34.113
And so take it as such that,
I believe in functional

36
00:02:34.113 --> 00:02:41.050
cohesion in the sense of when you
organize your file structure.

37
00:02:41.050 --> 00:02:47.048
And I believe the angular style
guide says as much that organize,

38
00:02:47.048 --> 00:02:51.640
at least within your
component layer by feature.

39
00:02:51.640 --> 00:02:56.506
And so if I'm creating a courses
feature with my components

40
00:02:56.506 --> 00:03:00.689
that I'm going to put that
in a courses folder, and

41
00:03:00.689 --> 00:03:05.870
then if I have a Courses list
Component that's a child of that.

42
00:03:05.870 --> 00:03:10.353
I'm going to put that as a child

43
00:03:10.353 --> 00:03:15.359
into that particular subfolder.

44
00:03:15.359 --> 00:03:19.596
The reason being is because functionally
these components logically belong

45
00:03:19.596 --> 00:03:20.255
together.

46
00:03:20.255 --> 00:03:27.409
But if I have something that needs to
be shared across multiple components,

47
00:03:27.409 --> 00:03:32.570
then I promote that to
a slightly higher abstraction.

48
00:03:32.570 --> 00:03:39.602
So something that needs to be shared
between two separate features.

49
00:03:39.602 --> 00:03:45.579
That, let's say a courses service but, two
different features need to consume that,

50
00:03:45.579 --> 00:03:48.500
a home component and a courses component.

51
00:03:48.500 --> 00:03:53.105
That needs to be promoted to
a slightly higher abstraction or

52
00:03:53.105 --> 00:03:58.540
a common abstraction, which is why I
would put that in a common folder.

53
00:03:58.540 --> 00:04:01.938
From there,
I would then organize that by type.

54
00:04:01.938 --> 00:04:05.039
So all of the code that's responsible for

55
00:04:05.039 --> 00:04:09.655
communicating to the server
would go into a services folder.

56
00:04:09.655 --> 00:04:15.493
And now the reason why I would put
an interface into a common folder,

57
00:04:15.493 --> 00:04:20.513
is because I could assign that type or
consume something of

58
00:04:20.513 --> 00:04:25.650
that type in multiple components
within the application.

59
00:04:25.650 --> 00:04:29.703
So if I knew for
a fact that this course type for

60
00:04:29.703 --> 00:04:35.787
instance is only ever going to
exist within these three templates,

61
00:04:35.787 --> 00:04:39.216
I would consider putting it in there.

62
00:04:39.216 --> 00:04:46.198
But because I know that I may want to
display courses on in the home component.

63
00:04:46.198 --> 00:04:50.678
What I don't want to do or
I want to avoid is being or

64
00:04:50.678 --> 00:04:56.362
forcing a subcomponent to have
knowledge about its siblings.

65
00:04:56.362 --> 00:04:59.794
And so you never want to reach across and

66
00:04:59.794 --> 00:05:05.730
have knowledge about any sibling
players within the application.

67
00:05:05.730 --> 00:05:06.821
So for instance,

68
00:05:06.821 --> 00:05:11.712
I don't want the home component to know
anything about the courses component.

69
00:05:11.712 --> 00:05:12.566
As a result,

70
00:05:12.566 --> 00:05:17.320
anything that is shared between them
I have to extract to a higher level.

71
00:05:17.320 --> 00:05:22.093
And so you want to delineate things
in a way to where it has just

72
00:05:22.093 --> 00:05:26.586
enough knowledge to do the thing
that is designed to do and

73
00:05:26.586 --> 00:05:31.840
nothing else to have knowledge
of something that you shouldn't.

74
00:05:31.840 --> 00:05:37.134
What that does is that creates a situation
where things are cobbled together,

75
00:05:37.134 --> 00:05:39.873
which really, really will end poorly.

76
00:05:39.873 --> 00:05:45.288
I think that if using things like
nested or hidden state nested logic and

77
00:05:45.288 --> 00:05:49.442
breaking the single
responsibility principle to me,

78
00:05:49.442 --> 00:05:55.780
this is the axis of evil and there's a
much larger conversation you'd have there.

79
00:05:55.780 --> 00:06:00.998
But what these represent and
the majority of what I see in

80
00:06:00.998 --> 00:06:07.780
code is a result of the simple violations
which is a product of coupling.

81
00:06:07.780 --> 00:06:11.650
So I think if violating
the single responsibility

82
00:06:11.650 --> 00:06:16.440
principle having hidden state and
nested logic In your code,

83
00:06:16.440 --> 00:06:21.520
if that's the axis of evil,
coupling is the antichrist of code.

84
00:06:21.520 --> 00:06:27.376
And so you wanna organize your code in
a file structure that eliminates or

85
00:06:27.376 --> 00:06:32.760
reduces coupling while promoting
cohesion or logical grouping.

86
00:06:32.760 --> 00:06:37.145
So, this is why I would put
interfaces in a common folder,

87
00:06:37.145 --> 00:06:41.720
such as common models,
you could call it whatever you want.

88
00:06:41.720 --> 00:06:43.915
I've seen a call core.

89
00:06:43.915 --> 00:06:47.563
So some of the naming conventions
is not as important but

90
00:06:47.563 --> 00:06:51.210
the asking yourself,
is it possible that this thing and

91
00:06:51.210 --> 00:06:54.790
this thing right next to it
adjacent to it could use it?

92
00:06:54.790 --> 00:07:00.880
If so, then promoted and
refactor that through promotion.

93
00:07:00.880 --> 00:07:06.072
Now, we're in bonus time here
is that if I were building

94
00:07:06.072 --> 00:07:11.042
a large scale,
like enterprise style application,

95
00:07:11.042 --> 00:07:16.350
that I would actually use
norwall NX dev tools to do that.

96
00:07:16.350 --> 00:07:20.265
Which allows me to have
multiple applications,

97
00:07:20.265 --> 00:07:26.283
separate core functionality into
libraries or libs that I can then share.

98
00:07:26.283 --> 00:07:32.678
And so it gives me a higher degree of I
think cohesion and in organization and

99
00:07:32.678 --> 00:07:38.783
annex for Angular is it just essentially
sits on top of the Angular CLI.

100
00:07:38.783 --> 00:07:43.717
The reason why I don't talk about
it in a Fundamentals course

101
00:07:43.717 --> 00:07:48.555
is because my experience is
that that's just an extra layer

102
00:07:48.555 --> 00:07:53.412
of complexity that is just
creates additional confusion.

103
00:07:53.412 --> 00:07:56.432
So I recommend checking out NX.

104
00:07:56.432 --> 00:08:00.379
That is kind of the rule of thumb
is that organized by features,

105
00:08:00.379 --> 00:08:04.401
if something is common or
shared across features, promote it,

106
00:08:04.401 --> 00:08:07.160
and then I typically
will organize by type.

107
00:08:07.160 --> 00:08:14.721
So the question is should services hold
the majority of application level state?

108
00:08:14.721 --> 00:08:20.688
I'm a huge fan of NGO RX,
which is fundamentally services.

109
00:08:20.688 --> 00:08:24.524
It's broken up into
a few different pieces.

110
00:08:24.524 --> 00:08:28.818
So I think your application
state should live

111
00:08:28.818 --> 00:08:33.003
outside of your component layer entirely.

112
00:08:33.003 --> 00:08:37.322
So whether you use
a service with a subject or

113
00:08:37.322 --> 00:08:42.710
I recommend using a proper
state management library.

114
00:08:42.710 --> 00:08:45.091
I'm a big fan of NCR RX.

115
00:08:45.091 --> 00:08:50.459
But if I'm doing react I'm using Redux
on there's Akita, there's a number

116
00:08:50.459 --> 00:08:56.161
of different things is that ultimately
your state management, your Application

117
00:08:56.161 --> 00:09:00.978
statement if it will end up in some
sort of a service that is consumed.

118
00:09:00.978 --> 00:09:06.365
And then your command and query cycle is
then made available to your components.

119
00:09:06.365 --> 00:09:11.252
So the answer is yes with it with
kind of an Asterix is that that is

120
00:09:11.252 --> 00:09:16.711
determined by whatever state
management tool you happen to be using.

121
00:09:16.711 --> 00:09:18.803
I recommend NGO Rx, but

122
00:09:18.803 --> 00:09:23.718
the one thing I will say is
that make sure you delineate or

123
00:09:23.718 --> 00:09:29.799
differentiate between presentation
state and application state.

124
00:09:29.799 --> 00:09:34.299
Because I've seen people who
are aggressive about state management or

125
00:09:34.299 --> 00:09:38.657
they'll put any form of state into
their state management library.

126
00:09:38.657 --> 00:09:42.988
So for instance, use this button enabled
or disabled, or when I fill out this form,

127
00:09:42.988 --> 00:09:46.588
it's immediately being processed
by the state management library.

128
00:09:46.588 --> 00:09:51.280
I don't recommend that because
what you're doing is you're

129
00:09:51.280 --> 00:09:56.972
inappropriately promoting presentation
state into application state.

130
00:09:56.972 --> 00:10:01.892
Whereas, if I'm filling out a form
I only care about what's going into

131
00:10:01.892 --> 00:10:04.189
that form when I submit the form.

132
00:10:04.189 --> 00:10:08.700
Or I indicate hey,
I want to save this object.

133
00:10:08.700 --> 00:10:14.383
So this is when I think this is maybe what
you were getting out with the question.

134
00:10:14.383 --> 00:10:18.806
Most state i.e all application
state should be segmented

135
00:10:18.806 --> 00:10:21.249
into a state management layer.

136
00:10:21.249 --> 00:10:28.760
But, presentation state should be
encapsulated within the component itself.

