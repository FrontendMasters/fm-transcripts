WEBVTT

1
00:00:00.000 --> 00:00:03.488
The next step is to send
that data to the server.

2
00:00:03.488 --> 00:00:05.571
So, so far in the diagram,

3
00:00:05.571 --> 00:00:10.470
let's look at the layout diagram again,
we are actually here.

4
00:00:10.470 --> 00:00:15.352
We have received the details,
but we need to also send

5
00:00:15.352 --> 00:00:20.028
the details to our server for
the last part, okay?

6
00:00:20.028 --> 00:00:25.333
So to do that with our server,
if you're using Firebase or

7
00:00:25.333 --> 00:00:29.136
other solutions, you just call the API.

8
00:00:29.136 --> 00:00:33.894
They have a simple API that
you use to do this, okay?

9
00:00:33.894 --> 00:00:38.236
But here, what I need, okay,

10
00:00:38.236 --> 00:00:43.413
is I need to call a fetch to an endpoint

11
00:00:43.413 --> 00:00:47.260
that is push/subscribe.

12
00:00:47.260 --> 00:00:51.149
But it's opposed to, yeah,
if you're using Axios or

13
00:00:51.149 --> 00:00:55.721
any other library might be shorter,
but we are being ManilaJS.

14
00:00:55.721 --> 00:01:00.088
So we're going to send these by post,
that's the method.

15
00:01:00.088 --> 00:01:05.198
The headers,
what we need to send is Content-Type,

16
00:01:06.763 --> 00:01:11.442
As application/JSON like so.

17
00:01:11.442 --> 00:01:15.587
And the body, and
the body is going to be an stringify.

18
00:01:15.587 --> 00:01:19.225
We'll just stringify, but
anyway, with the endpoint.

19
00:01:19.225 --> 00:01:26.452
Now, we're going to see where they're
going to get this and the keys.

20
00:01:26.452 --> 00:01:30.693
The endpoint,
where is the endpoint actually available?

21
00:01:30.693 --> 00:01:35.598
In the details, We have the endpoint.

22
00:01:35.598 --> 00:01:38.212
Let's see this again here.

23
00:01:38.212 --> 00:01:42.536
The details, they have an endpoint, okay?

24
00:01:42.536 --> 00:01:46.939
So it's details.endpoint, but

25
00:01:46.939 --> 00:01:50.285
we also need to pass keys.

26
00:01:51.626 --> 00:01:57.105
And they have two properties,
auth and p256d!.

27
00:01:57.105 --> 00:02:01.434
And you say, okay, this is coming from the
push server, I didn't create this, okay?

28
00:02:01.434 --> 00:02:07.052
The problem is that what we
have right now is actually

29
00:02:07.052 --> 00:02:12.804
an array buffer, and
we cannot convert that to JSON.

30
00:02:12.804 --> 00:02:18.437
So we need to use some of the tools
that I have here already ready, okay?

31
00:02:18.437 --> 00:02:23.272
Again, typically,
you don't do this low level coding.

32
00:02:23.272 --> 00:02:25.716
You use Google, Firebase, or

33
00:02:25.716 --> 00:02:31.074
high level API that will solve this for
you, but we are here, okay?

34
00:02:31.074 --> 00:02:35.791
So I'm going to call
arrayBufferToBase64 for

35
00:02:35.791 --> 00:02:40.744
the auth, and
I'm going to take from the details.

36
00:02:40.744 --> 00:02:44.144
So that's the object that we
received from the server.

37
00:02:44.144 --> 00:02:47.552
From the details,
they're going to get a key.

38
00:02:49.183 --> 00:02:53.839
Okay, that is called this,

39
00:02:53.839 --> 00:02:58.308
this is the auth, its off.

40
00:02:58.308 --> 00:03:03.280
So this is actually
getting the array buffer,

41
00:03:03.280 --> 00:03:08.643
that's bytes and
converted that into base 64.

42
00:03:08.643 --> 00:03:13.828
So text, so we can put in the JSON, okay?

43
00:03:13.828 --> 00:03:17.725
And something similar here,
array ToBase64.

44
00:03:17.725 --> 00:03:22.639
And we're going to get details, getKey,

45
00:03:22.639 --> 00:03:26.334
and that's the name of the key.

46
00:03:28.242 --> 00:03:32.539
Okay, like so, and I'm missing a coma.

47
00:03:32.539 --> 00:03:38.563
Remember that you already have the final
code array there in the final version.

48
00:03:41.701 --> 00:03:42.944
How do you know that?

49
00:03:42.944 --> 00:03:44.854
Well, that's part of the API.

50
00:03:44.854 --> 00:03:47.227
When you look at the web spec, okay,

51
00:03:47.227 --> 00:03:51.067
those are the properties with
those teams and that's all.

52
00:03:51.067 --> 00:03:58.351
By the way, I'm simplifying this only to
cover the current version of the spec.

53
00:03:58.351 --> 00:04:03.331
A few years ago, so I mentioned that I
did a couple of workshops on web push

54
00:04:03.331 --> 00:04:06.938
before probably model 25 or
something like that.

55
00:04:06.938 --> 00:04:12.872
And most of them were pre-pandemic,
we're talking about 2018.

56
00:04:12.872 --> 00:04:17.666
And at that time,
I was also covering two other previous

57
00:04:17.666 --> 00:04:22.970
version of the spec that today,
it's not really necessary.

58
00:04:22.970 --> 00:04:27.562
I'm just telling you that in case
you see some codes out there that

59
00:04:27.562 --> 00:04:29.579
are more complex than this.

60
00:04:29.579 --> 00:04:35.186
So Chrome 60, Chrome 70,
I'm talking about those versions, okay?

61
00:04:35.186 --> 00:04:41.663
Many years ago, we don't have users of
those versions anymore to care about.

62
00:04:41.663 --> 00:04:46.960
But for example, before,
we have two versions, one without keys.

63
00:04:46.960 --> 00:04:50.368
There was one version that
there were no signing.

64
00:04:50.368 --> 00:04:56.417
So actually, the security was worse,
that was one version.

65
00:04:56.417 --> 00:05:00.896
The other version was actually GCM based,

66
00:05:00.896 --> 00:05:04.513
that was Google Cloud Messaging.

67
00:05:04.513 --> 00:05:10.791
That was before Firebase even
existed that needs a sender ID.

68
00:05:10.791 --> 00:05:15.120
Again, I'm just giving you keywords
that you will probably find

69
00:05:15.120 --> 00:05:18.355
somewhere in blog posts,
because they are old.

70
00:05:18.355 --> 00:05:20.946
We don't need to care about those anymore.

71
00:05:20.946 --> 00:05:27.722
We don't have users using those old
versions of the web push spec, okay?

72
00:05:27.722 --> 00:05:28.222
Make sense?

73
00:05:29.902 --> 00:05:35.183
So that would probably, yeah.

74
00:05:35.183 --> 00:05:38.260
&gt;&gt; You need to add an H to your p256.

75
00:05:38.260 --> 00:05:43.330
&gt;&gt; Probably, this one,
yeah, thank you, my bad.

76
00:05:46.046 --> 00:05:52.150
Okay, so if I run this on any browser,
it doesn't matter.

77
00:05:52.150 --> 00:05:56.575
Something that I can check
is the Network tab, okay?

78
00:05:56.575 --> 00:06:01.115
So when I'm subscribing,
it's giving me the key.

79
00:06:01.115 --> 00:06:03.153
So I'm sending the data properly.

80
00:06:06.950 --> 00:06:12.945
But their response didn't work.

81
00:06:12.945 --> 00:06:18.363
Okay, because, I think,
I didn't restart the server.

82
00:06:18.363 --> 00:06:20.551
Let's check the server.

83
00:06:20.551 --> 00:06:24.514
And I think that with that,
we should be good.

84
00:06:24.514 --> 00:06:26.547
So I'm going to restart my server.

85
00:06:28.655 --> 00:06:31.219
Yeah, sorry.

86
00:06:31.219 --> 00:06:34.717
&gt;&gt; On 22 there, header should be headers.

87
00:06:34.717 --> 00:06:37.798
There might be-
&gt;&gt; You're right, thank you.

88
00:06:37.798 --> 00:06:40.909
So we have a typo here, it's headers.

89
00:06:40.909 --> 00:06:46.320
Anyway, I'm not sure why my shortcuts
to open the terminal is not working.

90
00:06:46.320 --> 00:06:49.001
[LAUGH] Who knows why?

91
00:06:49.001 --> 00:06:53.731
So let me close this, restart the server.

92
00:06:53.731 --> 00:06:56.658
Because we set the key,
that's the only thing that we'll change.

93
00:06:58.842 --> 00:07:01.519
Let's try again.

94
00:07:01.519 --> 00:07:04.080
Subscribe, there we are.

95
00:07:04.080 --> 00:07:05.500
I'm not getting any error.

96
00:07:05.500 --> 00:07:07.530
How do I know if this is working?

97
00:07:07.530 --> 00:07:13.161
Well, this server is using a very
basic database, it's called.

98
00:07:13.161 --> 00:07:16.754
It's not even SQLite,
it's actually simpler than that.

99
00:07:16.754 --> 00:07:22.185
So in our project,
we should have a users.db file.

100
00:07:22.185 --> 00:07:27.682
In that file, when you click there, you're
going to see some kind of a JSON file.

101
00:07:27.682 --> 00:07:31.273
But it's not really a JSON file,
because it's not a collection.

102
00:07:31.273 --> 00:07:36.505
But you can see that I have my file there.

103
00:07:36.505 --> 00:07:44.110
So that's my endpoint with the keys,
and that's me on Chrome.

104
00:07:44.110 --> 00:07:49.559
Then I can go with the Firefox,
refresh just in case.

105
00:07:49.559 --> 00:07:53.327
Subscribe on Firefox,
and the same on Safari.

106
00:07:55.518 --> 00:08:02.322
Subscribe, so If I go back here,
I have three users.

107
00:08:02.322 --> 00:08:06.762
So in this case of course,
I'm not authenticating the user, so

108
00:08:06.762 --> 00:08:08.828
I don't know who the user is.

109
00:08:08.828 --> 00:08:11.850
So the only thing that I can
do is broadcast messages,

110
00:08:11.850 --> 00:08:14.814
because I'm not assigning
this to a user database.

111
00:08:14.814 --> 00:08:17.812
But if I have a user identification,

112
00:08:17.812 --> 00:08:22.178
you just need to match each
register with a real user.

113
00:08:22.178 --> 00:08:30.300
So the registration part is done,
that's all.

114
00:08:30.300 --> 00:08:33.828
So let's see what's next.

115
00:08:33.828 --> 00:08:36.139
Where are the next steps?

116
00:08:36.139 --> 00:08:38.158
We have already done this.

117
00:08:39.807 --> 00:08:43.455
So let's see how
the architecture finishes.

118
00:08:43.455 --> 00:08:47.414
So let's say that we wanna
send a message to one user.

119
00:08:47.414 --> 00:08:54.740
Well, our web server or any server,
it doesn't need to be the web server.

120
00:08:54.740 --> 00:08:58.969
The server of this that has
the subscription details, and

121
00:08:58.969 --> 00:09:03.555
the message will talk to the push
server through the endpoint.

122
00:09:03.555 --> 00:09:07.692
The push server will send a push
message to the browser and

123
00:09:07.692 --> 00:09:11.225
the browser will wake up
the service worker, and

124
00:09:11.225 --> 00:09:16.933
the service worker will finally create
the notification, that's the flow.

125
00:09:20.392 --> 00:09:26.699
&gt;&gt; What if the web browser is not running?

126
00:09:26.699 --> 00:09:31.689
&gt;&gt; In that case, so if the web browser
is closed, okay, so the push message,

127
00:09:31.689 --> 00:09:37.173
there is another actor here not on the
screen, but you have the operating system.

128
00:09:37.173 --> 00:09:42.203
So the push message, actually, it depends
on the browser and the operating system.

129
00:09:42.203 --> 00:09:47.524
But on mobile for sure,
it comes to the OS.

130
00:09:47.524 --> 00:09:52.558
The OS knows, that message is for
Chrome, so it wakes up Chrome.

131
00:09:52.558 --> 00:09:56.584
And the chrome received the message,
it parses the details, that's for

132
00:09:56.584 --> 00:09:57.677
that audition.

133
00:09:57.677 --> 00:10:00.726
For that audition,
I have registered that service worker.

134
00:10:00.726 --> 00:10:03.225
So then he wakes up the service worker.

135
00:10:03.225 --> 00:10:06.374
And on desktop today or
most desktop operating system,

136
00:10:06.374 --> 00:10:07.786
it works in the same way.

137
00:10:07.786 --> 00:10:12.286
On some operating system such as Linux,
you don't have

138
00:10:12.286 --> 00:10:17.562
a centralized push system at the OS level,
so it's the browser.

139
00:10:17.562 --> 00:10:20.845
If you kill the browser and
you kill the browser of daemon,

140
00:10:20.845 --> 00:10:24.466
you won't get the message until
you open the browser next time.

141
00:10:24.466 --> 00:10:27.370
But it's just for
very specific situations,

142
00:10:27.370 --> 00:10:30.505
because the OS doesn't
have a messaging system.

143
00:10:30.505 --> 00:10:36.127
It depends on the distribution,
so it's not so simple.

144
00:10:36.127 --> 00:10:37.260
Does it make sense?

145
00:10:37.260 --> 00:10:42.316
&gt;&gt; What if the OS is
off like phone is off,

146
00:10:42.316 --> 00:10:45.371
does it-
&gt;&gt; So if the phone is off,

147
00:10:45.371 --> 00:10:49.992
what happens is that the message
stays at the push server.

148
00:10:49.992 --> 00:10:51.334
For how much time?

149
00:10:51.334 --> 00:10:53.642
It depends on the implementation actually.

150
00:10:53.642 --> 00:10:56.482
But also when you create the notification,
and

151
00:10:56.482 --> 00:11:00.602
I will show you that in a minute,
you can specify an expiration date.

152
00:11:00.602 --> 00:11:06.594
So you can say, hey, this notification
is useful until that day and time.

153
00:11:06.594 --> 00:11:11.963
So if it couldn't be deliver up to
that time, then you can discard it.

154
00:11:11.963 --> 00:11:15.493
But push notifications
are never guaranteed, so

155
00:11:15.493 --> 00:11:17.850
it's the best effort scenario.

