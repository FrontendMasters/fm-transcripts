WEBVTT

1
00:00:00.240 --> 00:00:02.940
It's time to talk a little
bit about service workers.

2
00:00:02.940 --> 00:00:07.625
Again, this is not a workshop on service
workers, you have Frontend Masters

3
00:00:07.625 --> 00:00:11.814
in the library, many workshops
covering the service workers part.

4
00:00:11.814 --> 00:00:16.921
But because it has to do with a lot
of APIs that we will see later today,

5
00:00:16.921 --> 00:00:22.754
we have to create our own service worker
and actually cover the basics, okay?

6
00:00:22.754 --> 00:00:25.095
Of what a service worker is.

7
00:00:26.525 --> 00:00:29.285
Before getting into the details,
maybe I will ask you.

8
00:00:30.460 --> 00:00:33.720
Does anyone have a definition for
a service worker?

9
00:00:33.720 --> 00:00:35.400
What's a service worker, yeah?

10
00:00:35.400 --> 00:00:41.039
&gt;&gt; It's a separate thread of JavaScript
that runs in the background and can be

11
00:00:41.039 --> 00:00:47.850
registered to access additional APIs and
are required for a PWA to be a full PWA.

12
00:00:47.850 --> 00:00:52.550
&gt;&gt; Okay, so you mentioned,
it's a thread that runs in the background.

13
00:00:52.550 --> 00:00:54.518
We come back to the background definition.

14
00:00:54.518 --> 00:00:58.821
So it's a thread that runs in
the background and has some APIs.

15
00:00:58.821 --> 00:01:04.360
So let me change that word to,
they have some abilities, okay?

16
00:01:04.360 --> 00:01:08.120
To do some things that are necessary for
PWAs.

17
00:01:08.120 --> 00:01:09.610
That's what you said, right?

18
00:01:09.610 --> 00:01:13.430
Well, it's true,
everything is true what you said.

19
00:01:13.430 --> 00:01:16.520
The last one is changing for next year.

20
00:01:16.520 --> 00:01:18.010
Not sure if you know that.

21
00:01:18.010 --> 00:01:24.705
So a PWA won't require a service
worker for Chrome later next year.

22
00:01:24.705 --> 00:01:29.175
They are already experimenting with that,
and if you are not providing

23
00:01:29.175 --> 00:01:34.166
a service worker, the PWA will have
a default offline page saying that, yeah,

24
00:01:34.166 --> 00:01:38.368
you're offline, this app is not working,
something like that.

25
00:01:38.368 --> 00:01:43.126
But it will trigger the installation of
your PWA even if you don't have a service

26
00:01:43.126 --> 00:01:44.130
worker, okay?

27
00:01:44.130 --> 00:01:48.010
That's something new that
they announced a month ago.

28
00:01:48.010 --> 00:01:50.560
So a service worker is a thread, and

29
00:01:50.560 --> 00:01:55.230
I think that the most important
part is runs in the background.

30
00:01:55.230 --> 00:01:59.416
I will change that runs in the background
with it has its own lifecycle that I will

31
00:01:59.416 --> 00:02:00.556
show you in a minute.

32
00:02:00.556 --> 00:02:03.210
And it has abilities, okay?

33
00:02:03.210 --> 00:02:07.428
And that's the part that it's
different from a web worker.

34
00:02:07.428 --> 00:02:09.979
Because a web worker is also a thread,

35
00:02:09.979 --> 00:02:13.577
we can say that it also runs
in the background, okay?

36
00:02:13.577 --> 00:02:17.101
It doesn't have its own lifecycle,
it's attached to the top.

37
00:02:17.101 --> 00:02:18.810
I'm talking about the thread.

38
00:02:18.810 --> 00:02:21.529
But it has no abilities, the web worker.

39
00:02:21.529 --> 00:02:24.316
A worker you have to thread for
it's a worker thread.

40
00:02:24.316 --> 00:02:29.978
So it just has to do some heavy work,
but the service worker has abilities.

41
00:02:29.978 --> 00:02:34.755
The most common abilities,
the one that we won't cover today,

42
00:02:34.755 --> 00:02:38.657
is the one that will serve
files when we are offline.

43
00:02:38.657 --> 00:02:43.230
And that's what makes the PWA
offline capable, okay?

44
00:02:43.230 --> 00:02:48.830
So it acts like a web server,
but installed on user's device.

45
00:02:50.170 --> 00:02:52.700
So that's kind of a definition.

46
00:02:52.700 --> 00:02:57.533
So it's a JavaScript file running
in its own thread that will act as

47
00:02:57.533 --> 00:03:02.369
a middleware offering a local
installed web server or web proxy for

48
00:03:02.369 --> 00:03:05.840
your PWA, including resources and
API calls.

49
00:03:05.840 --> 00:03:06.760
That's a definition.

50
00:03:07.900 --> 00:03:10.352
So, anyway, what is important for

51
00:03:10.352 --> 00:03:16.040
service worker is that it runs
client-side in the browser's engine.

52
00:03:16.040 --> 00:03:18.240
HTTPS is required.

53
00:03:18.240 --> 00:03:20.237
It's installed by a web page.

54
00:03:20.237 --> 00:03:25.227
Any HTML, any navigation context
can install service worker.

55
00:03:25.227 --> 00:03:28.469
It has its own thread and
its own lifecycle, and

56
00:03:28.469 --> 00:03:31.560
we will probably today
cover the lifecycle.

57
00:03:31.560 --> 00:03:35.050
We care about that because we
care about background execution.

58
00:03:36.340 --> 00:03:39.940
And after it's installed,
it will act as a network proxy or

59
00:03:39.940 --> 00:03:42.950
local web server in the name
of the real server.

60
00:03:42.950 --> 00:03:47.360
That's the part that we will skip today,
okay?

61
00:03:47.360 --> 00:03:49.100
If you wanna learn more about that,

62
00:03:49.100 --> 00:03:52.130
there are plenty of content in
the Frontend Masters library.

63
00:03:53.740 --> 00:03:55.360
And it has ability to
run in the background.

64
00:03:55.360 --> 00:03:56.860
That's the other part that we care today.

65
00:03:57.880 --> 00:04:02.872
The abilities of a service
worker to run code in

66
00:04:02.872 --> 00:04:08.120
the background in the name of our web app,
okay?

67
00:04:09.360 --> 00:04:11.720
And there is no need for
user's permission.

68
00:04:13.510 --> 00:04:16.345
You have never seen
a dialog asking you for

69
00:04:16.345 --> 00:04:19.190
permission to install a service worker.

70
00:04:20.770 --> 00:04:25.120
It's being installed
silently by the browser.

71
00:04:25.120 --> 00:04:30.190
Just visiting the website that
is complying with, at least,

72
00:04:30.190 --> 00:04:35.530
HTTPS, the browser will install
the service worker, okay?

73
00:04:35.530 --> 00:04:36.280
That's how we work.

74
00:04:36.280 --> 00:04:38.720
We are going to code
the service worker in a minute.

75
00:04:38.720 --> 00:04:41.746
This is kind of how diagram looks like.

76
00:04:41.746 --> 00:04:44.471
We have our PWA, our website.

77
00:04:44.471 --> 00:04:49.200
Remember, PWA is just another name for
a web app, okay?

78
00:04:49.200 --> 00:04:52.890
A website, the web app, a PWA,
I need some middleware.

79
00:04:53.990 --> 00:04:58.676
Middleware means that it's a piece of
software that it can be there or not, and

80
00:04:58.676 --> 00:05:00.877
the rest should work anyway, okay?

81
00:05:00.877 --> 00:05:05.089
So if we remove the service
worker the rest should work.

82
00:05:05.089 --> 00:05:09.282
Yeah, it won't have those
enhanced abilities, but

83
00:05:09.282 --> 00:05:11.714
it should work anyway, okay?

84
00:05:11.714 --> 00:05:17.250
So everything that we're going to do in
our service worker should work, okay?

85
00:05:17.250 --> 00:05:19.758
Yeah, it won't work in the background, but

86
00:05:19.758 --> 00:05:22.860
the rest of the actual work
that's kind of idea, okay?

87
00:05:24.360 --> 00:05:29.207
And it's a proxy, so
it's actually can see everything

88
00:05:29.207 --> 00:05:33.124
that happens between your PWA and
the cloud,

89
00:05:33.124 --> 00:05:37.880
being your server or
cross-domain servers, okay?

90
00:05:37.880 --> 00:05:40.600
That's kind of the idea.

91
00:05:40.600 --> 00:05:46.580
But what we care most about
service workers is the lifecycle.

92
00:05:48.100 --> 00:05:54.520
So the service worker is installed and
it goes through an install event, okay?

93
00:05:54.520 --> 00:05:57.190
That probably we won't use today.

94
00:05:57.190 --> 00:05:59.730
After it's installed, it's waiting.

95
00:05:59.730 --> 00:06:00.450
Waiting for what?

96
00:06:02.080 --> 00:06:05.910
It's waiting for
being the active service worker.

97
00:06:05.910 --> 00:06:11.080
Only one service worker can
be active in one scope.

98
00:06:11.080 --> 00:06:12.370
What's a scope?

99
00:06:12.370 --> 00:06:13.579
A folder within your server.

100
00:06:16.617 --> 00:06:21.210
So that means that you can
have several service workers,

101
00:06:21.210 --> 00:06:24.470
if they have several folders as scopes.

102
00:06:25.750 --> 00:06:27.340
It's not a common scenario.

103
00:06:27.340 --> 00:06:32.014
The most common scenario is you have one
service worker in the root folder of your

104
00:06:32.014 --> 00:06:33.810
domain, of your host.

105
00:06:33.810 --> 00:06:37.260
So then you have one service worker for
your whole origin.

106
00:06:37.260 --> 00:06:40.720
That's the most common scenario,
but that's not mandatory.

107
00:06:40.720 --> 00:06:44.203
You can have more than one service worker,
but

108
00:06:44.203 --> 00:06:48.680
each service worker will have
its own sub-folder, okay?

109
00:06:49.680 --> 00:06:51.760
That's how it works.

110
00:06:51.760 --> 00:06:55.729
That's tricky when we are doing
background execution.

111
00:06:57.020 --> 00:06:59.441
Because in that case sometimes,
for example,

112
00:06:59.441 --> 00:07:01.567
who is going to receive the push message?

113
00:07:01.567 --> 00:07:06.204
We'll talk about that later,
if we have several service workers, okay?

114
00:07:06.204 --> 00:07:07.842
So that's kind of tricky.

115
00:07:07.842 --> 00:07:12.114
But anyway, I was saying that,
after it's installed, it's waiting.

116
00:07:12.114 --> 00:07:12.917
Waiting for what?

117
00:07:12.917 --> 00:07:15.003
For being the active one.

118
00:07:15.003 --> 00:07:19.010
And why it's not the active
one immediately?

119
00:07:19.010 --> 00:07:22.850
Because, maybe,
there was another one installed before.

120
00:07:24.000 --> 00:07:27.333
And the browser is not killing
the one that is loaded and

121
00:07:27.333 --> 00:07:30.460
replacing it immediately with a new one.

122
00:07:30.460 --> 00:07:35.387
So it's waiting for
being in the background, probably, or

123
00:07:35.387 --> 00:07:38.873
it's waiting for that page to disappear.

124
00:07:38.873 --> 00:07:43.553
Or the page that was having that the
previous service worker it's waiting for

125
00:07:43.553 --> 00:07:47.228
it to disappear and
then it's replacing the new one, okay?

126
00:07:47.228 --> 00:07:50.638
But that's not what I care the most today,

127
00:07:50.638 --> 00:07:54.730
about the lifecycle,
I care about the execution.

128
00:07:56.140 --> 00:08:00.201
Immediately after a service
worker is installed and

129
00:08:00.201 --> 00:08:02.977
activated, it go to an idle state.

130
00:08:02.977 --> 00:08:08.731
So it's in memory, doing nothing, okay?

131
00:08:08.731 --> 00:08:13.699
But then some events
can happen in the page,

132
00:08:13.699 --> 00:08:17.337
or in any page from that origin.

133
00:08:17.337 --> 00:08:21.206
Like a fetch, like a push, a message, and

134
00:08:21.206 --> 00:08:25.300
there are more events
that we will see later.

135
00:08:25.300 --> 00:08:30.409
When some of these events happen, or
they are triggered by the browser,

136
00:08:30.409 --> 00:08:33.025
now your service worker is running.

137
00:08:33.025 --> 00:08:39.580
So it has execution rights
in it's own thread, okay?

138
00:08:41.110 --> 00:08:45.992
After a while, then you finished,
you stop your tasks, you're doing nothing,

139
00:08:45.992 --> 00:08:48.110
you're idle again.

140
00:08:48.110 --> 00:08:53.900
And after a while, the browser will
stop you, because you're doing nothing.

141
00:08:53.900 --> 00:08:55.770
Nothing needs to be done, okay?

142
00:08:55.770 --> 00:08:57.450
So, okay, goodbye.

143
00:08:57.450 --> 00:09:02.330
Even if the user is using your web app,
okay?

144
00:09:02.330 --> 00:09:04.351
You have the web app on the screen.

145
00:09:04.351 --> 00:09:07.225
So the service worker has
its own lifecycle, and

146
00:09:07.225 --> 00:09:09.200
I will show you in a second a demo.

147
00:09:10.290 --> 00:09:14.242
If another event happens, a fetch, a push,

148
00:09:14.242 --> 00:09:20.380
events that we will see later,
the service worker is back to running.

149
00:09:21.710 --> 00:09:28.610
And that second execution might not
be the same instance as before.

150
00:09:28.610 --> 00:09:32.830
So it's the same service worker file,
but it's creating a new context.

151
00:09:32.830 --> 00:09:37.252
So if you have saved a variable, a global
variable, in the previous instance,

152
00:09:37.252 --> 00:09:38.440
it's not there now.

153
00:09:40.400 --> 00:09:40.900
Make sense?

154
00:09:42.170 --> 00:09:49.364
So let me show you this in action before
actually writing our own service worker.

155
00:09:49.364 --> 00:09:54.123
So if you have never seen this,
I encourage you to go

156
00:09:54.123 --> 00:09:58.555
to chrome://serviceworker-internals,

157
00:09:58.555 --> 00:10:02.680
serviceworker-internals, okay?

158
00:10:02.680 --> 00:10:09.140
That's the URL I'm using right now,
chrome://serviceworker-internals.

159
00:10:09.140 --> 00:10:15.128
So here you will see right now all
the service workers that are actually

160
00:10:15.128 --> 00:10:20.524
installed in your device,
in your computer or mobile device.

161
00:10:20.524 --> 00:10:25.703
And I have, probably, I don't wanna
say thousands, but for sure, hundreds.

162
00:10:28.425 --> 00:10:34.260
For example here, I have a service
worker for Brazil city JS conference.

163
00:10:35.490 --> 00:10:39.012
So I spoke at that conference and
it seems like I went to the website and

164
00:10:39.012 --> 00:10:42.150
that website installed a service worker.

165
00:10:42.150 --> 00:10:43.110
Is it running?

166
00:10:43.110 --> 00:10:45.720
Is it executing go in the background?

167
00:10:45.720 --> 00:10:49.291
Well, here we can see it's installed,

168
00:10:49.291 --> 00:10:54.130
it's activated, but
the running styles is stopped.

169
00:10:55.130 --> 00:11:01.114
So it's not executing code, and
it will be like that until something

170
00:11:01.114 --> 00:11:06.800
happens on that website that
triggers the service worker again.

171
00:11:08.450 --> 00:11:09.270
What may happen?

172
00:11:10.730 --> 00:11:14.516
One, a network request, so
I'm going to the website again.

173
00:11:14.516 --> 00:11:18.971
But the other things that might happen
are all the background operations that I

174
00:11:18.971 --> 00:11:20.129
mentioned before.

175
00:11:20.129 --> 00:11:25.419
Sync, pending sync,
a periodic background sync,

176
00:11:25.419 --> 00:11:32.763
a fetch, a payment handler for
pre-authorization, or a push, okay?

177
00:11:32.763 --> 00:11:35.086
Let me show you the simplest one.

178
00:11:35.086 --> 00:11:42.268
What happens if I open now a new window on
the same browser, and I go to the website?

179
00:11:42.268 --> 00:11:49.040
Even if I'm going to any URL, so
that's Brazil, I'm from Argentina.

180
00:11:49.040 --> 00:11:53.640
We are kind of enemies in soccer,
football, and many other things.

181
00:11:53.640 --> 00:11:56.450
So I can say Argentina is better.

182
00:11:56.450 --> 00:11:57.790
That's a URL I'm trying, okay?

183
00:11:57.790 --> 00:12:01.250
By the way, I didn't plan this,
it's just live.

184
00:12:01.250 --> 00:12:04.980
Of course that should give me a 404,
I guess, right?

185
00:12:06.120 --> 00:12:15.340
But even a 404, it doesn't matter,
Now my service worker is running, okay?

186
00:12:15.340 --> 00:12:17.874
Seems like there isn't.

187
00:12:17.874 --> 00:12:19.766
But 404 it's a blank screen.

188
00:12:19.766 --> 00:12:21.500
Anyway, it doesn't matter.

189
00:12:21.500 --> 00:12:25.619
It seems like they don't agree
with Argentina is better.

190
00:12:25.619 --> 00:12:26.874
Now it's running.

191
00:12:26.874 --> 00:12:31.014
So, what happens if I close my window,
okay?

192
00:12:31.014 --> 00:12:34.280
So I'm going to close my tab or my window.

193
00:12:34.280 --> 00:12:37.380
Some of you will expect
running to go to stop.

194
00:12:38.690 --> 00:12:41.840
But that's not the case,
it's still running.

195
00:12:43.720 --> 00:12:45.120
It has its own lifecycle.

196
00:12:45.120 --> 00:12:47.200
So it's running in the background.

197
00:12:47.200 --> 00:12:52.192
Because, technically,
I don't have any window now Pointing

198
00:12:52.192 --> 00:12:55.688
to that Brazil city JS conference website.

199
00:12:55.688 --> 00:12:59.171
After a couple of seconds,
now it goes to stop.

200
00:12:59.171 --> 00:13:02.270
Because it was idle, it was doing nothing.

201
00:13:02.270 --> 00:13:04.360
After a while, the browser says,
okay, you know what?

202
00:13:05.850 --> 00:13:10.085
We're done, and maybe we will be done for

203
00:13:10.085 --> 00:13:14.688
a month, or years, or forever, who knows?

204
00:13:14.688 --> 00:13:20.100
If I never came back to that URL, or
there is no pending background operation,

205
00:13:20.100 --> 00:13:22.806
I don't know what the tool is.

206
00:13:22.806 --> 00:13:29.494
Anyway, so that's a proof that the service

207
00:13:29.494 --> 00:13:35.290
worker has its own lifecycle, okay?

208
00:13:35.290 --> 00:13:39.311
And, in fact,
here I can also start it from there.

209
00:13:39.311 --> 00:13:40.851
Can you see that, there is a Start?

210
00:13:40.851 --> 00:13:47.480
If I hit Start, the tool appears, but
there is no window, it's running.

211
00:13:47.480 --> 00:13:48.577
Where is it running?

212
00:13:48.577 --> 00:13:49.647
In the background.

213
00:13:51.261 --> 00:13:57.854
So a service worker can be executing
code in the background with no window,

214
00:13:57.854 --> 00:14:02.041
with no client,
that's the actual term within

215
00:14:02.041 --> 00:14:06.880
the service worker respect,
that actually needs it.

216
00:14:06.880 --> 00:14:11.690
So the service worker it's our agent
that can actually execute code in

217
00:14:11.690 --> 00:14:15.860
the background even if
the browser is closed.

218
00:14:15.860 --> 00:14:18.430
And here, I need to use closed in quotes.

219
00:14:19.640 --> 00:14:23.910
What happens if I close Chrome,
the last window?

220
00:14:23.910 --> 00:14:26.280
Well, this is the last window,
I think, yeah.

221
00:14:27.550 --> 00:14:28.620
Am I closing Chrome?

222
00:14:30.500 --> 00:14:35.117
So I closed all the windows, but
the Chrome process is still in memory.

223
00:14:35.117 --> 00:14:40.801
In fact, in MacOS, I can actually see
it there, even if there are no windows.

224
00:14:40.801 --> 00:14:45.795
On Windows, the OS,
it happens something similar.

225
00:14:45.795 --> 00:14:51.130
You can close it, you don't see any
windows, it doesn't appear in the.

226
00:14:51.130 --> 00:14:53.640
But anyway, the process is still there.

227
00:14:53.640 --> 00:14:56.286
And you can see the process
in the task manager.

228
00:14:56.286 --> 00:15:01.648
A service worker can execute code,
can wake up and execute code,

229
00:15:01.648 --> 00:15:06.240
even if the user is not even
seen the browser has opened.

230
00:15:07.870 --> 00:15:09.159
And the same happens on Android.

231
00:15:10.850 --> 00:15:12.700
It can be completely in the background.

232
00:15:14.610 --> 00:15:16.990
Again, I cannot do whatever I want.

233
00:15:18.410 --> 00:15:22.172
It needs to be under
the browser's API's umbrella,

234
00:15:22.172 --> 00:15:26.870
whatever the browser is
offering to me to execute code.

235
00:15:26.870 --> 00:15:31.800
And for
now we have five specific use cases.

236
00:15:31.800 --> 00:15:35.895
The APIs that I mentioned,
background sync, periodic background sync,

237
00:15:35.895 --> 00:15:39.860
background fledge, Web Push,
and payment handler.

238
00:15:39.860 --> 00:15:44.951
Those are the use cases where my service
worker can wake up in the background,

239
00:15:44.951 --> 00:15:47.630
no matter what, and execute some code.

