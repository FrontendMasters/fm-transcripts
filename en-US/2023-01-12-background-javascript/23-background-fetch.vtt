WEBVTT

1
00:00:00.190 --> 00:00:05.130
And the last one before web
push is background fetch.

2
00:00:05.130 --> 00:00:06.670
I know similar names, right?

3
00:00:06.670 --> 00:00:09.938
Background sync, periodic background sync,
background fetch.

4
00:00:09.938 --> 00:00:14.917
Background fetch is actually
a way that the PWA or

5
00:00:14.917 --> 00:00:22.446
website has to ask the browser,
the rendering engine to download files,

6
00:00:22.446 --> 00:00:28.550
completely separate,
detached from my window.

7
00:00:28.550 --> 00:00:32.162
So if the user closes the PWA,
if the user closes the browser,

8
00:00:32.162 --> 00:00:35.360
I want the files to still be downloaded.

9
00:00:35.360 --> 00:00:38.290
Maybe you're saying, well,
that's like downloading a file.

10
00:00:38.290 --> 00:00:42.456
The difference here is that
when the files are downloaded,

11
00:00:42.456 --> 00:00:45.220
they're not saved in the file system.

12
00:00:46.300 --> 00:00:49.320
It will wake your service worker up again.

13
00:00:49.320 --> 00:00:53.200
And it will tell you hey,
the files you requested are here.

14
00:00:53.200 --> 00:00:53.860
Here you have them.

15
00:00:55.400 --> 00:01:00.520
And the service worker will do something
with the files, parse them, save them.

16
00:01:01.540 --> 00:01:05.195
So it's not downloading
files to the file system,

17
00:01:05.195 --> 00:01:08.850
it's downloading files to the app itself,
okay?

18
00:01:09.900 --> 00:01:14.900
So also, the browser will show an OS
notification about the process.

19
00:01:16.000 --> 00:01:21.000
On android, it generates,
what is known as a fixed notification or

20
00:01:21.000 --> 00:01:24.774
one of those notifications
that you cannot clear,

21
00:01:24.774 --> 00:01:29.180
you cannot remove,
it's there until the process is done.

22
00:01:30.870 --> 00:01:35.070
And a lot of events will be
fired in the Service Worker.

23
00:01:35.070 --> 00:01:40.210
Compare with the previous one,
this is not just one event.

24
00:01:40.210 --> 00:01:42.265
You have when the download finishes, but

25
00:01:42.265 --> 00:01:45.669
also if the user has clicked
the notification, maybe that means that

26
00:01:45.669 --> 00:01:50.190
the user wants to know what's going on
with that, so then you can do something.

27
00:01:50.190 --> 00:01:53.140
On abort, on failure,
and also on progress.

28
00:01:54.570 --> 00:02:02.130
So you can know in your app how's
the progress in that download operation.

29
00:02:03.990 --> 00:02:10.728
You can update your UI in case your
UI is still there, makes sense?

30
00:02:10.728 --> 00:02:15.450
So it's similar to the previous API.

31
00:02:15.450 --> 00:02:18.470
We need a service worker registration, and

32
00:02:18.470 --> 00:02:22.070
then we call fetch to
the background fetch manager.

33
00:02:23.170 --> 00:02:30.800
And we need to pass a name, an array
of URLs to download, and then metadata.

34
00:02:30.800 --> 00:02:37.001
That metadata will go to the notification.

35
00:02:37.001 --> 00:02:40.369
It can be an emash,
a logo of your app, your icon.

36
00:02:40.369 --> 00:02:45.736
The download total is going to be used for
the progress bar but

37
00:02:45.736 --> 00:02:50.695
you don't need to provide
them it's optional, okay?

38
00:02:50.695 --> 00:02:53.513
And that's how you check
if the API is there.

39
00:02:53.513 --> 00:02:57.070
And then,
you handle events in the Service Worker.

40
00:02:57.070 --> 00:03:03.990
Like the backgroundfetchsuccess,
where you will get all all your files.

41
00:03:03.990 --> 00:03:10.430
Again, what you do with the files,
parse them, save them in cache storage.

42
00:03:10.430 --> 00:03:15.036
Save them in index dv, I don't know.

43
00:03:15.036 --> 00:03:19.042
Backgroundfetchclick,
backgroundfetchfailure that those

44
00:03:19.042 --> 00:03:20.934
are the most important ones.

45
00:03:20.934 --> 00:03:26.195
To be honest,
I've never seen a website using this API.

46
00:03:26.195 --> 00:03:29.811
So I've seen the samples I've made but

47
00:03:29.811 --> 00:03:35.081
I've never seen a real website
actually using this API.

48
00:03:35.081 --> 00:03:40.161
And remember, the idea here
is that the download process,

49
00:03:40.161 --> 00:03:46.154
no matter how long it takes,
it will happen even if your app is closed,

50
00:03:46.154 --> 00:03:48.815
even if your web app is closed.

51
00:03:48.815 --> 00:03:50.050
Even if your PWA is closed.

52
00:03:51.770 --> 00:03:55.655
It takes one day, okay, after a day
when the download finishes it will wake

53
00:03:55.655 --> 00:04:00.370
up your Service Worker, it will tell you,
hey here you have the files you requested.

54
00:04:00.370 --> 00:04:08.490
So the idea the originally [COUGH]
was to also let us upload data.

55
00:04:08.490 --> 00:04:12.960
But for some reason it's not there yet.

56
00:04:12.960 --> 00:04:17.645
So the Chrome team already promised
when they presented the API there

57
00:04:17.645 --> 00:04:21.980
is also going to work with Apple,
that makes sense.

58
00:04:21.980 --> 00:04:25.562
I mean, if you wanna upload a video
that you are taking from the gallery,

59
00:04:25.562 --> 00:04:26.460
that takes time.

60
00:04:27.780 --> 00:04:32.560
And right now,
you need to keep your web app active.

61
00:04:35.220 --> 00:04:39.690
Well, right now it's only for
downloads, okay, make sense?

62
00:04:40.790 --> 00:04:42.810
So let's see this in action.

63
00:04:43.990 --> 00:04:49.750
So going back here, I have the last one on
background execution for background fetch.

64
00:04:49.750 --> 00:04:52.820
So we also need the same registration.

65
00:04:54.220 --> 00:04:59.190
So, we wait for the registration, and as
you can see here we don't have permission

66
00:04:59.190 --> 00:05:03.740
to ask, we'll just request
the download and it will happen.

67
00:05:03.740 --> 00:05:10.341
Not bother the size that you
are downloading, it will start.

68
00:05:10.341 --> 00:05:15.778
What we're going to do here
is we are going to say,

69
00:05:15.778 --> 00:05:20.698
we're going to wait for
on the service worker

70
00:05:20.698 --> 00:05:25.640
registration, backgroundFetch.fetch.

71
00:05:25.640 --> 00:05:26.532
Okay, something like this.

72
00:05:26.532 --> 00:05:30.271
And if I wanna,
I can keep it's not necessary,

73
00:05:30.271 --> 00:05:34.582
but I can keep a constant
where I can later cancel that.

74
00:05:34.582 --> 00:05:38.233
It can aboard that later in case
I want to or something like that.

75
00:05:38.233 --> 00:05:40.317
So the fetch needs a name.

76
00:05:40.317 --> 00:05:43.960
For example,
I'm going to download media files.

77
00:05:43.960 --> 00:05:47.470
It's just an internal name in case you're
requesting more than one background fetch.

78
00:05:48.950 --> 00:05:49.832
It's just that.

79
00:05:49.832 --> 00:05:50.950
It's an identifier.

80
00:05:52.070 --> 00:05:55.140
Then an array of files
that you wanna download.

81
00:05:55.140 --> 00:05:59.070
For example, we have in our project,
the video and the audio files.

82
00:06:01.000 --> 00:06:06.346
So we can say media/audio.mp3 and

83
00:06:06.346 --> 00:06:10.280
media/video.mp4.

84
00:06:10.280 --> 00:06:11.970
So I want those files, okay?

85
00:06:11.970 --> 00:06:13.450
And that's all.

86
00:06:13.450 --> 00:06:16.260
And then we have an object with metadata.

87
00:06:17.410 --> 00:06:22.880
We have the title,
Frontend Masters Media files.

88
00:06:22.880 --> 00:06:27.990
This is for the notification,
okay, and icons.

89
00:06:27.990 --> 00:06:29.890
That's the only mandatory thing.

90
00:06:29.890 --> 00:06:34.869
By the way,
icons is also using the same format as

91
00:06:34.869 --> 00:06:38.670
we used before for the media, okay?

92
00:06:38.670 --> 00:06:42.880
The one that I have here for the artwork.

93
00:06:42.880 --> 00:06:45.130
It's the same format, okay?

94
00:06:45.130 --> 00:06:50.585
So I can just reuse the same
object with the same icon.

95
00:06:53.181 --> 00:06:55.572
And actually, that's all.

96
00:06:55.572 --> 00:07:01.348
So in this case,
we have a really fast connection here.

97
00:07:01.348 --> 00:07:04.104
We can change that.

98
00:07:04.104 --> 00:07:08.898
I know we can throttle the connection
in case we wanna see that,

99
00:07:08.898 --> 00:07:11.889
because it's going to be really fast.

100
00:07:11.889 --> 00:07:13.780
No, I was using the other Chrome.

101
00:07:13.780 --> 00:07:14.280
This one.

102
00:07:16.720 --> 00:07:21.300
You need to pay attention to
that part of the browser.

103
00:07:21.300 --> 00:07:23.900
Let's see if that works or
if I have a typo or something.

104
00:07:23.900 --> 00:07:25.510
Register a fetch.

105
00:07:25.510 --> 00:07:27.640
Did you see something there appearing?

106
00:07:29.750 --> 00:07:32.523
That's the UI.

107
00:07:32.523 --> 00:07:38.187
Yeah it's happening really fast,
also because these files are cached.

108
00:07:38.187 --> 00:07:40.051
That's another situation here,

109
00:07:40.051 --> 00:07:42.821
I'm downloading files
that were already cached.

110
00:07:42.821 --> 00:07:45.595
But that's how it works.

111
00:07:45.595 --> 00:07:51.518
Are these files being downloaded
somewhere in the file system, no.

112
00:07:51.518 --> 00:07:54.311
The files are being received
in the Service Worker, and

113
00:07:54.311 --> 00:07:56.970
right now I'm not receiving them.

114
00:07:56.970 --> 00:08:01.973
So to receive the files,
you need another event handler,

115
00:08:01.973 --> 00:08:08.500
addEventListener, okay,
with one of the events that we saw before.

116
00:08:08.500 --> 00:08:10.650
Such as backgroundfetchsuccess.

117
00:08:13.590 --> 00:08:16.306
Lowercase, no underscores, okay?

118
00:08:21.075 --> 00:08:26.824
And you are going to receive
the files reference that you

119
00:08:26.824 --> 00:08:32.582
can use with the file API
directly in an event argument.

120
00:08:38.814 --> 00:08:39.679
Make sense?

121
00:08:44.233 --> 00:08:47.907
Please remember, Chromium only.

122
00:08:47.907 --> 00:08:49.254
Do you have any question?

123
00:08:49.254 --> 00:08:53.570
&gt;&gt; There is no alternative to this for
other browsers?

124
00:08:53.570 --> 00:08:57.572
&gt;&gt; The only alternative is to
download the files with a fetch in

125
00:08:57.572 --> 00:09:00.810
the Service Worker and then the UI.

126
00:09:00.810 --> 00:09:05.436
You won't have any UI, or you can send
messages from the Service Worker to

127
00:09:05.436 --> 00:09:07.684
the client or something like that.

128
00:09:07.684 --> 00:09:11.090
So you can still download
files in the Service Worker.

129
00:09:11.090 --> 00:09:14.314
The problem is that if it takes a day,
okay,

130
00:09:14.314 --> 00:09:19.906
probably the browser will kill the
Service Worker before the file arrives.

131
00:09:19.906 --> 00:09:21.533
So with this API, no,

132
00:09:21.533 --> 00:09:26.425
the browser knows that yeah it will
kill the Service Worker, okay?

133
00:09:26.425 --> 00:09:29.355
But the browser is downloading the files
anyway, even if it takes a day.

134
00:09:31.615 --> 00:09:34.420
&gt;&gt; So
are the files available on the event?

135
00:09:34.420 --> 00:09:35.890
&gt;&gt; Yeah.
&gt;&gt; Okay.

136
00:09:35.890 --> 00:09:39.090
&gt;&gt; Yeah, if you look here,
you have the thing you have an example.

137
00:09:41.910 --> 00:09:45.980
The files let me make
this an async function.

138
00:09:45.980 --> 00:09:47.954
It's registration.matchAll.

139
00:09:47.954 --> 00:09:50.554
MatchAll will give you all the files so

140
00:09:50.554 --> 00:09:54.360
now you have an array of
the files in the cache.

141
00:09:54.360 --> 00:09:59.338
So the files are in the cache and
you can get them if you want and

142
00:09:59.338 --> 00:10:04.704
do something with them like putting
in another cache of storage or

143
00:10:04.704 --> 00:10:07.350
opening them and parsing them.

144
00:10:07.350 --> 00:10:11.020
Typically you use that for
downloading video.

145
00:10:11.020 --> 00:10:16.040
I mean, if the Frontend Master web app has
offline support and you're downloading

146
00:10:16.040 --> 00:10:20.720
large video files, well, you can
download the video using this technique.

147
00:10:20.720 --> 00:10:25.439
So in this case, the Service Worker
finishes execution or you close the app or

148
00:10:25.439 --> 00:10:29.004
wherever, the browser will
still download those files.

149
00:10:29.004 --> 00:10:34.130
And make those files ready for the Service
Worker when the download finishes.

150
00:10:34.130 --> 00:10:37.418
With this, we've covered background sync,

151
00:10:37.418 --> 00:10:41.140
periodic background sync,
and background fetch.

152
00:10:41.140 --> 00:10:46.920
The last API that we have is the one that
most people are waiting for is push.

153
00:10:46.920 --> 00:10:48.399
So the question is,

154
00:10:48.399 --> 00:10:54.410
what possibilities do we have to work
with files today in a browser kind of?

155
00:10:54.410 --> 00:10:59.887
So today you have a full file system
API that will let you open files and

156
00:10:59.887 --> 00:11:02.910
process those files as bytes.

157
00:11:02.910 --> 00:11:10.401
So you can, if you mix that with web
assembly, you can have actually anything.

158
00:11:10.401 --> 00:11:14.636
So you can parse any files and
do whatever you want.

159
00:11:14.636 --> 00:11:19.757
But in terms of the typical use case for
working with files and

160
00:11:19.757 --> 00:11:24.378
fetch typically is to save
those files in the cache, so

161
00:11:24.378 --> 00:11:30.725
then the Service Worker can serve those
files later in the future locally.

162
00:11:30.725 --> 00:11:33.140
That's the most common use case.

163
00:11:33.140 --> 00:11:37.870
The other use case is to open the file and
do something with it.

164
00:11:37.870 --> 00:11:40.720
For example, you can download a zip file.

165
00:11:40.720 --> 00:11:46.235
And then you can unzip the file in
memory in the Service Worker and

166
00:11:46.235 --> 00:11:49.710
take individual files in the archive and

167
00:11:49.710 --> 00:11:55.254
do something with them, parse them or
store them, make sense?

168
00:11:55.254 --> 00:11:58.580
&gt;&gt; Yeah, very, yes.

169
00:11:58.580 --> 00:12:00.520
I've never had to do that, that's awesome.

170
00:12:00.520 --> 00:12:03.603
&gt;&gt; But yeah,
today you can download a zip file and

171
00:12:03.603 --> 00:12:09.640
the Service Worker can unzip it and
then store all the assets individually.

172
00:12:09.640 --> 00:12:12.510
&gt;&gt; And then you mentioned saving it in
the cache is that in the browser's cache?

173
00:12:12.510 --> 00:12:14.610
&gt;&gt; In the browser so that kind of.

174
00:12:14.610 --> 00:12:18.940
So it's in the browser's cache but
today with Service Workers,

175
00:12:18.940 --> 00:12:22.650
there is a new API known as
the cache storage interface.

176
00:12:22.650 --> 00:12:26.964
With the cache storage interface,
you have control of a cache.

177
00:12:26.964 --> 00:12:32.369
So you can decide which files are going
into the cache for how much time and

178
00:12:32.369 --> 00:12:37.420
the Service Worker can deliver
those files in future navigations,

179
00:12:37.420 --> 00:12:40.265
in future page navigations locally.

180
00:12:40.265 --> 00:12:41.373
So everything locally.

181
00:12:44.486 --> 00:12:51.148
You can check the workshop I did on PWAs,
Progressive Web Apps, something.

182
00:12:51.148 --> 00:12:54.607
Also, there are in
the Frontend Masters library,

183
00:12:54.607 --> 00:12:58.788
there are other courses on I think
there is a Kyle Simpson one on

184
00:12:58.788 --> 00:13:03.305
there it's also covering
Service Workers and the cache storage.

185
00:13:03.305 --> 00:13:08.275
So you can get exactly what you can do
the power that you have to actually manage

186
00:13:08.275 --> 00:13:09.740
the files of your app.

