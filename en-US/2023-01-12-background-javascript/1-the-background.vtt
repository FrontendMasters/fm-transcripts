WEBVTT

1
00:00:00.015 --> 00:00:04.787
Okay so JavaScript in the background.

2
00:00:04.787 --> 00:00:09.761
When I ask about the background,
people typically thinks

3
00:00:09.761 --> 00:00:13.833
about something like this,
it's like a mist.

4
00:00:13.833 --> 00:00:17.133
So no one really sees what's going on,

5
00:00:17.133 --> 00:00:22.843
no one is really clear about what's
going on about the background.

6
00:00:22.843 --> 00:00:27.457
In fact, we need to reveal the mystery
because there is a mystery

7
00:00:27.457 --> 00:00:29.854
behind background JavaScript.

8
00:00:29.854 --> 00:00:32.729
So what's going on, what happens,

9
00:00:32.729 --> 00:00:37.941
what happens when you close your app,
when you minimize your app?

10
00:00:37.941 --> 00:00:42.443
So it's not so clear and
we as web developers, typically,

11
00:00:42.443 --> 00:00:45.061
we never care too much about that.

12
00:00:45.061 --> 00:00:50.419
Coz yeah, the website is there and
the website is gone and

13
00:00:50.419 --> 00:00:54.557
it's not so simple, it's not so boolean.

14
00:00:54.557 --> 00:00:58.940
In classic web development, so I've been
in the web space for more than 25 years.

15
00:00:58.940 --> 00:01:03.548
So in classic web development,
actually you were opening the browser or

16
00:01:03.548 --> 00:01:07.563
the user was opening the browser and
then something was there.

17
00:01:07.563 --> 00:01:12.099
So your actual JavaScript code was active
and then at one point the user was

18
00:01:12.099 --> 00:01:16.875
closing the browser or closing the tab or
closing the window and that's all.

19
00:01:16.875 --> 00:01:21.968
So for our mindset,
JavaScript means the user has

20
00:01:21.968 --> 00:01:27.067
that website,
that web uploaded in the browser.

21
00:01:27.067 --> 00:01:31.537
But if that idea is still valid,
because there are so

22
00:01:31.537 --> 00:01:37.228
many situations out there that
sometimes we don't think about and

23
00:01:37.228 --> 00:01:42.004
that will improve user experience,
performance, and

24
00:01:42.004 --> 00:01:45.478
also battery usage on users' devices.

25
00:01:45.478 --> 00:01:48.093
So first, what's background?

26
00:01:48.093 --> 00:01:50.523
How can we define background?

27
00:01:50.523 --> 00:01:51.785
What do you think?

28
00:01:51.785 --> 00:01:55.768
Does anyone has an idea or
definition, what's background?

29
00:01:55.768 --> 00:01:57.267
&gt;&gt; Separate from the main thread.

30
00:01:57.267 --> 00:02:00.972
&gt;&gt; Separate from the main thread,
okay, what else do you think?

31
00:02:00.972 --> 00:02:05.659
&gt;&gt; When the tab is not the one in
the foreground in your browser.

32
00:02:05.659 --> 00:02:09.956
&gt;&gt; When the tab is not in the foreground,
okay, what else?

33
00:02:09.956 --> 00:02:12.870
As you can see that we have two
definitions that are completely different.

34
00:02:12.870 --> 00:02:19.389
So he was talking about the thread,
you were talking about, like OS, Windows.

35
00:02:19.389 --> 00:02:22.389
&gt;&gt; Or
when the browser is not in the foreground.

36
00:02:22.389 --> 00:02:23.892
&gt;&gt; Or
the browser is not in the foreground.

37
00:02:23.892 --> 00:02:28.048
So yeah, we're going to,
it can be within the browser itself.

38
00:02:28.048 --> 00:02:32.556
Like a background tab, or
it can be within the OS like

39
00:02:32.556 --> 00:02:36.658
the browser is actually
not in the foreground.

40
00:02:36.658 --> 00:02:39.550
And what about if we close the browser?

41
00:02:39.550 --> 00:02:41.812
What happens with our code?

42
00:02:41.812 --> 00:02:45.159
I mean the simple answer is like yeah,
it's killed.

43
00:02:45.159 --> 00:02:47.818
Okay, but it's not so simple.

44
00:02:47.818 --> 00:02:53.684
So in fact, we don't have a definition
of what background means for web apps.

45
00:02:53.684 --> 00:02:58.875
So I mean, if we go for example,
to the W3C, we don't have a definition.

46
00:02:58.875 --> 00:03:00.626
In fact, there are many definitions.

47
00:03:00.626 --> 00:03:04.936
In different specs, you will find
many different definitions of what

48
00:03:04.936 --> 00:03:07.431
background means, which is a problem.

49
00:03:07.431 --> 00:03:11.887
So because it's not completely
clear what background is.

50
00:03:11.887 --> 00:03:14.157
So there are many concepts around.

51
00:03:14.157 --> 00:03:19.234
For example, the W3C,
sometimes it's talking about threading.

52
00:03:19.234 --> 00:03:21.937
Okay, as you said, so a thread or

53
00:03:21.937 --> 00:03:26.093
web worker seems to be
working in the background but

54
00:03:26.093 --> 00:03:31.809
from an OS perspective, is that
the background or is that the thread?

55
00:03:31.809 --> 00:03:33.669
So it's not simple what background means.

56
00:03:33.669 --> 00:03:37.289
That's the first thing that I wanna
mention here, it's not actually simple.

57
00:03:37.289 --> 00:03:40.909
And if we go to the W3C
talking about the specs,

58
00:03:40.909 --> 00:03:46.716
there are many concepts that are actually
close to the idea of a background.

59
00:03:46.716 --> 00:03:51.521
For example, when you hide or
minimize, it can be the tab or

60
00:03:51.521 --> 00:03:54.128
it can be actually the browser.

61
00:03:54.128 --> 00:03:59.339
And typically we think that yeah, things
are in memory and with execution rights.

62
00:03:59.339 --> 00:04:02.562
So my website,
my JavaScript code, my context,

63
00:04:02.562 --> 00:04:05.034
my global context is still in memory.

64
00:04:05.034 --> 00:04:07.596
And because the browser is still there,

65
00:04:07.596 --> 00:04:12.505
the tab is still there, we think that
yeah, we might have execution rights.

66
00:04:12.505 --> 00:04:17.316
So if I have a timer, or if I have a like
an event loop, is it still working?

67
00:04:17.316 --> 00:04:22.572
Then there are other ideas
such as suspend or freeze.

68
00:04:22.572 --> 00:04:28.285
That in this case,
my global context is still in memory but

69
00:04:28.285 --> 00:04:34.945
maybe I don't have execution rights,
so I'm completely frozen.

70
00:04:34.945 --> 00:04:39.947
And then it's the other idea or
names or verbs that we can

71
00:04:39.947 --> 00:04:46.230
find in different specs is that what
happens if we close, if OS kills or

72
00:04:46.230 --> 00:04:53.066
if the browser discards my web content
that now it's not in memory anymore.

73
00:04:53.066 --> 00:04:58.082
Okay, so we will try to
understand all these situations

74
00:04:58.082 --> 00:05:04.504
to actually get a simpler definition for
us for background execution.

75
00:05:04.504 --> 00:05:07.738
So, but I wanna maybe emphasize right now,

76
00:05:07.738 --> 00:05:12.373
that most of the time when we
are talking about the background,

77
00:05:12.373 --> 00:05:18.242
we are mostly talking about being in
the foreground or being in the background.

78
00:05:18.242 --> 00:05:21.800
And that has no direct
relationship with threading.

79
00:05:21.800 --> 00:05:25.860
But it's true that sometimes we talk
about threading when we say, okay,

80
00:05:25.860 --> 00:05:28.162
I want to execute this in the background.

81
00:05:28.162 --> 00:05:31.376
But that means that in this case,
in the case of JavaScript,

82
00:05:31.376 --> 00:05:32.836
you create the web worker.

83
00:05:32.836 --> 00:05:37.713
And if you go to the web worker spec,
you will never see a different

84
00:05:37.713 --> 00:05:42.783
like a mentioned to the background
work when talking about thread.

85
00:05:42.783 --> 00:05:47.560
Anyway, so we will try to simplify it, for
us, because, yeah, the workshop's called

86
00:05:47.560 --> 00:05:52.104
JavaScript in the background, so we need
to actually get some kind of a definition.

87
00:05:52.104 --> 00:05:54.892
So let's say that for now or for us today,

88
00:05:54.892 --> 00:05:59.685
the background is when the user stops or
pauses the usage of the web app.

89
00:05:59.685 --> 00:06:01.740
It can be for many reasons.

90
00:06:01.740 --> 00:06:06.335
Many reasons, and
we will see a lot of different reasons.

91
00:06:06.335 --> 00:06:10.450
But that means that
the user made a decision,

92
00:06:10.450 --> 00:06:14.249
the user is not using the web app anymore.

93
00:06:14.249 --> 00:06:20.243
It can be temporarily or
forever, I don't know.

94
00:06:20.243 --> 00:06:23.096
Actually, the process is really complex,

95
00:06:23.096 --> 00:06:27.266
we're not going to get into this
diagram or to understand that.

96
00:06:27.266 --> 00:06:33.573
By the way, that's the diagram on iOS What
happens with a web app or a PWA on iOS?

97
00:06:33.573 --> 00:06:37.637
All the possibilities, no worries,
we will simplify this but

98
00:06:37.637 --> 00:06:42.007
just to give you an idea all
the possibilities that we have in terms of

99
00:06:42.007 --> 00:06:46.007
background execution or
foreground execution of your code.

100
00:06:46.007 --> 00:06:50.166
So, we will understand what
happened on most situations,

101
00:06:50.166 --> 00:06:55.665
how to handle it properly and how to
increase the opportunity to execute code.

102
00:06:55.665 --> 00:06:57.825
Why do we wanna execute code?

103
00:06:57.825 --> 00:07:00.449
Many reasons we will see a couple okay.

104
00:07:00.449 --> 00:07:02.716
So why should we care about this?

105
00:07:02.716 --> 00:07:08.011
Well, first, to improve user experience,
probably you have seen this in action.

106
00:07:08.011 --> 00:07:11.936
You go to a website, you get out of
the website and you minimize the window,

107
00:07:11.936 --> 00:07:13.196
you go somewhere else.

108
00:07:13.196 --> 00:07:17.251
You come back to the website and
maybe the website is outdated,

109
00:07:17.251 --> 00:07:19.326
the website refreshes itself.

110
00:07:19.326 --> 00:07:22.841
The website was still thinking
that you were there for an hour,

111
00:07:22.841 --> 00:07:25.756
and maybe you have a timer or
even it can be a game, and

112
00:07:25.756 --> 00:07:28.694
the game was still playing
while in the background.

113
00:07:28.694 --> 00:07:34.313
And those are user experience problems
that we can solve if we actually

114
00:07:34.313 --> 00:07:39.564
understand what's going on and
how to improve user experience.

115
00:07:39.564 --> 00:07:41.546
We can also save resources.

116
00:07:41.546 --> 00:07:45.242
That means devices resources,
that's memory,

117
00:07:45.242 --> 00:07:50.610
server resources because for
example we can close socket connections,

118
00:07:50.610 --> 00:07:54.922
we can stop sending data to
the server that we won't use for

119
00:07:54.922 --> 00:07:59.954
example, okay, that by default,
maybe this is still happening.

120
00:07:59.954 --> 00:08:03.181
So you're wasting your server's resources,

121
00:08:03.181 --> 00:08:07.060
not just users resources,
and that means also battery.

122
00:08:07.060 --> 00:08:09.296
So we can stop timers.

123
00:08:09.296 --> 00:08:14.284
If you have a timer that is updating
the UI every minute or every 10 seconds,

124
00:08:14.284 --> 00:08:19.273
you should start thinking about, okay,
on some situations we may wanna stop

125
00:08:19.273 --> 00:08:23.057
the timer for several reasons
that we will see in a minute.

126
00:08:23.057 --> 00:08:25.599
And also to avoid pending requests.

127
00:08:25.599 --> 00:08:30.512
Because sometimes the problem is
that we end up with some kind of

128
00:08:30.512 --> 00:08:32.374
broken transactions.

129
00:08:32.374 --> 00:08:35.336
Because what happens if you
start a fetch to the server?

130
00:08:35.336 --> 00:08:40.688
So you wanna send data to the server,
in the middle of that operation,

131
00:08:40.688 --> 00:08:45.422
the user let's say press
the Home Screen button on the phone.

132
00:08:45.422 --> 00:08:48.775
What happens with that pending request?

133
00:08:48.775 --> 00:08:49.850
Is it still going?

134
00:08:49.850 --> 00:08:51.102
Is it abort?

135
00:08:51.102 --> 00:08:56.069
We don't have control of that and actually
there is no simple answer to that.

136
00:08:56.069 --> 00:08:59.505
Because it depends on the browser,
it depends on OS.

137
00:08:59.505 --> 00:09:04.307
So maybe we wanna get control of
what's going on those situations.

138
00:09:04.307 --> 00:09:08.950
So that's why we care about JavaScript
in the background, and we should care.

139
00:09:08.950 --> 00:09:14.074
Push notification is probably
one of the things that most

140
00:09:14.074 --> 00:09:18.995
people want right now but
because Apple is on finally.

141
00:09:18.995 --> 00:09:23.170
So actually I gave more than
20 Web Push workshops but

142
00:09:23.170 --> 00:09:27.366
those workshops were between 2018 and
2020.

143
00:09:27.366 --> 00:09:32.609
So, the pandemic was also
Apple saying no to Web Push.

144
00:09:32.609 --> 00:09:36.087
So no one cared about web push for
a while for the last few years.

145
00:09:36.087 --> 00:09:42.197
And now that interest is coming back,
because Safari supporting Web Push.

146
00:09:42.197 --> 00:09:44.177
Okay, we'll talk about that later.

147
00:09:44.177 --> 00:09:48.350
And also iOS support for
Web Push is coming next year.

