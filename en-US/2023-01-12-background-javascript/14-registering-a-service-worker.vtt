WEBVTT

1
00:00:00.000 --> 00:00:05.130
Okay, so we've covered the basics
of what a service worker is,

2
00:00:05.130 --> 00:00:07.030
it's time to write it.

3
00:00:07.030 --> 00:00:10.222
So I will go back to my code.

4
00:00:10.222 --> 00:00:13.933
And actually, at the top of this file,

5
00:00:13.933 --> 00:00:18.547
I can start trying to
register a service worker.

6
00:00:18.547 --> 00:00:20.334
So that's actually pretty simple.

7
00:00:20.334 --> 00:00:25.733
Its navigator.serviceWorker,
be careful with

8
00:00:25.733 --> 00:00:31.780
capital W.register and
the script URL, that's all.

9
00:00:31.780 --> 00:00:38.257
Of course, I need to create that file,
so that's fine.

10
00:00:38.257 --> 00:00:42.841
Shouldn't be in the scripts folder,
by default,

11
00:00:42.841 --> 00:00:48.181
the service worker will take
its scope at his current path.

12
00:00:48.181 --> 00:00:51.977
So if I create the service
worker in the script sub folder,

13
00:00:51.977 --> 00:00:55.163
it will manage that folder and
that folder only.

14
00:00:55.163 --> 00:00:58.406
So that's why typically there
are ways to bypass that,

15
00:00:58.406 --> 00:01:01.172
but it's get complicated
without any reason.

16
00:01:01.172 --> 00:01:02.577
Most of the time,

17
00:01:02.577 --> 00:01:07.649
we want the service worker to be
in the root folder of our web app.

18
00:01:07.649 --> 00:01:11.740
It can be the root folder of the origin,
the domain or not.

19
00:01:11.740 --> 00:01:13.670
So, far it's empty.

20
00:01:13.670 --> 00:01:16.669
So the only thing that I,
it's just an empty file.

21
00:01:16.669 --> 00:01:20.676
I just need to specify here /sw.js,

22
00:01:20.676 --> 00:01:26.822
that will register that will
install the service worker.

23
00:01:26.822 --> 00:01:29.521
Of course, right now the service
worker is doing nothing.

24
00:01:29.521 --> 00:01:34.238
But just by doing this,
just by registering a service worker,

25
00:01:34.238 --> 00:01:38.866
now we have the power to execute
code in a separate lifecycle,

26
00:01:38.866 --> 00:01:44.570
in the background of our page, and I will
show you that in action in a minute.

27
00:01:44.570 --> 00:01:50.290
So, if I save this, I think both
files are saved even if it's empty.

28
00:01:50.290 --> 00:01:53.645
So the only thing that
I added is that line,

29
00:01:53.645 --> 00:01:58.133
navigator.serviceWorker.register, that's
all.

30
00:01:58.133 --> 00:02:02.391
With that, I can go to any browser.

31
00:02:05.282 --> 00:02:12.076
Run this, and now how do I know if
the service worker is running or not?

32
00:02:12.076 --> 00:02:17.330
In Google Chrome,
we can open that tools, and

33
00:02:17.330 --> 00:02:22.998
we are going to make usage
of the Application tab.

34
00:02:22.998 --> 00:02:28.756
In fact, if we look at the Application
tab, we have many options, and

35
00:02:28.756 --> 00:02:33.944
if we scroll down, we have a section for
background services.

36
00:02:33.944 --> 00:02:39.097
So here we have a full section
of the dev tools, prepare for

37
00:02:39.097 --> 00:02:45.421
background execution and read for
the bargain background execution.

38
00:02:45.421 --> 00:02:51.254
So I'm scrolling up again, here,
if I get into service worker,

39
00:02:51.254 --> 00:02:55.921
it says that I do have a service
worker activate it and

40
00:02:55.921 --> 00:03:00.075
stop and another one waiting for
activation.

41
00:03:00.075 --> 00:03:05.372
So and here I have a link says,
that says skip waiting.

42
00:03:05.372 --> 00:03:12.166
Actually, what it's doing is it's forcing
the current service worker version.

43
00:03:12.166 --> 00:03:17.677
We are not actually covering in this
workshop the basics of service workers,

44
00:03:17.677 --> 00:03:22.678
so we are not covering what happens
if you update the service worker and

45
00:03:22.678 --> 00:03:25.323
so on, so we are just gonna use that.

46
00:03:25.323 --> 00:03:33.864
Something that I will need to select
here is this option, update on reload.

47
00:03:33.864 --> 00:03:38.806
With this device login option set,
what will happen is that every time you

48
00:03:38.806 --> 00:03:43.920
refresh your page, it will also refresh
the service worker installation.

49
00:03:43.920 --> 00:03:48.827
So it will improve our work right now
because we will be focusing on executing

50
00:03:48.827 --> 00:03:50.445
code in the background.

51
00:03:50.445 --> 00:03:55.852
So now if I refresh, you will see that
now I have the service worker ID9.

52
00:03:55.852 --> 00:03:59.354
Every time you refresh,
it's reinstalling the service worker,

53
00:03:59.354 --> 00:04:00.801
even if it didn't change.

54
00:04:00.801 --> 00:04:05.968
So at this point, this is for
debugging purposes, and it will force your

55
00:04:05.968 --> 00:04:11.155
last version of the service worker
which will actually be there for you.

56
00:04:11.155 --> 00:04:16.243
But now, if you go to the console,
if you write some code here,

57
00:04:16.243 --> 00:04:19.324
that code is running the main thread.

58
00:04:19.324 --> 00:04:24.127
But there is a selector here that says
stop, if you click that selector,

59
00:04:24.127 --> 00:04:31.442
you will see another,
Scope that is the service worker.

60
00:04:31.442 --> 00:04:34.687
So from here,
you can actually execute code, and

61
00:04:34.687 --> 00:04:37.789
now you are in
the ServiceworkerGlobalScope.

62
00:04:37.789 --> 00:04:42.598
Even if it's an empty file,
now I have a scope, so

63
00:04:42.598 --> 00:04:45.583
actually I can run code there.

64
00:04:45.583 --> 00:04:51.341
The problem is that if I close my tab,
I don't have Dev Tools, okay?

65
00:04:51.341 --> 00:04:56.130
Okay, I don't have a way to continue to
execute going that background process.

66
00:04:56.130 --> 00:05:01.722
So if you want to actually play with this
with a nature button, I can show you how.

67
00:05:01.722 --> 00:05:06.740
You can go back to that Chrome
service worker internals website.

68
00:05:06.740 --> 00:05:14.888
Fine, your service worker is
this one on the current origin.

69
00:05:14.888 --> 00:05:19.087
From here, you can click inspect, and

70
00:05:19.087 --> 00:05:25.966
that will open a new window
inspecting all your service worker.

71
00:05:25.966 --> 00:05:28.762
So now I can close my tab.

72
00:05:28.762 --> 00:05:30.742
So I don't have a tab anymore.

73
00:05:30.742 --> 00:05:35.244
I don't have a window
anymore by still have code

74
00:05:35.244 --> 00:05:38.630
that is running in the background.

75
00:05:38.630 --> 00:05:39.842
Can I do alert?

76
00:05:39.842 --> 00:05:44.866
No, I don't have UI, I don't have a DOM,
I don't have user interface.

77
00:05:44.866 --> 00:05:49.648
And after a few seconds of inactivity,
I will be dead.

78
00:05:49.648 --> 00:05:51.581
I'm the third service work.

79
00:05:51.581 --> 00:05:54.596
But here you can see I don't
have the website anymore and

80
00:05:54.596 --> 00:05:57.821
the service worker is still running,
and I have a console.

81
00:05:57.821 --> 00:06:00.290
I can execute code there and

82
00:06:00.290 --> 00:06:05.010
if I have some code there
that is doing an operation,

83
00:06:05.010 --> 00:06:10.392
it would wait for me, not forever,
but it will wait for me.

84
00:06:10.392 --> 00:06:12.501
How much time will wait?

85
00:06:12.501 --> 00:06:15.969
It's unclear, so
the spec doesn't say anything about that.

86
00:06:15.969 --> 00:06:20.109
So it depends on the browser,
actually, okay?

87
00:06:20.109 --> 00:06:22.184
In fact, probably if I try this again.

88
00:06:22.184 --> 00:06:22.961
No, it's still there.

89
00:06:22.961 --> 00:06:25.222
It's still up and running.

90
00:06:25.222 --> 00:06:27.794
Of course, here I can see if
it's still running or not.

91
00:06:27.794 --> 00:06:33.971
It's still running, so
I have a thread of my own service,

92
00:06:33.971 --> 00:06:40.034
that runs not matter if I do
have my web app running or not.

93
00:06:40.034 --> 00:06:42.173
That's kind of idea, okay?

94
00:06:42.173 --> 00:06:45.876
You have any questions at this point?

95
00:06:45.876 --> 00:06:47.786
Yeah.
&gt;&gt; Just maybe a clarification.

96
00:06:47.786 --> 00:06:52.397
Does you're running commands
in the console here,

97
00:06:52.397 --> 00:06:56.603
keep the service worker going at all,
or is it?

98
00:06:56.603 --> 00:06:57.861
&gt;&gt; No after a while.

99
00:06:57.861 --> 00:07:03.738
So look at this, I can click here stop,
and if I hit stop,

100
00:07:03.738 --> 00:07:10.236
so now it's stop,
my depth tools now is disconnected, okay?

101
00:07:10.236 --> 00:07:15.200
I force that but actually,
if that happens, because of the browser's

102
00:07:15.200 --> 00:07:19.932
internal algorithm, you will see
that while the Dev Tools is open.

103
00:07:21.688 --> 00:07:23.118
Well, Safari.

104
00:07:23.118 --> 00:07:27.110
Safari, it's kind of tricky,
well, it's Safari, right?

105
00:07:27.110 --> 00:07:30.892
But if I'm running the app, for example,

106
00:07:30.892 --> 00:07:36.789
here In the Develop menu there is
a whole menu for service workers.

107
00:07:36.789 --> 00:07:40.771
So if you open the inspector,
you won't find service workers there.

108
00:07:40.771 --> 00:07:46.767
You need to open here the service
worker in localhost, that's my origin,

109
00:07:46.767 --> 00:07:52.873
and now I will have an inspector running
in the service worker global scope.

110
00:07:52.873 --> 00:07:56.093
The problem is that if I close the window,

111
00:07:56.093 --> 00:08:01.889
that scope will last 5 to 10 seconds
only because Safari's lifespan for

112
00:08:01.889 --> 00:08:05.482
the service worker is
actually really short.

113
00:08:05.482 --> 00:08:07.680
So it will kill my service
worker pretty quickly.

114
00:08:07.680 --> 00:08:10.970
Okay, so
that was registering the service worker.

115
00:08:10.970 --> 00:08:14.781
The problem is that it's doing nothing so
far, but

116
00:08:14.781 --> 00:08:19.653
that's actually the home for
most of the code that we will write,

117
00:08:19.653 --> 00:08:23.838
after this section, so
everything will happen there.

118
00:08:23.838 --> 00:08:28.616
Because it has its own lifecycle,
it doesn't matter if you close the tab.

119
00:08:28.616 --> 00:08:35.847
You can still execute code in that context
in the service worker global scope, okay?

120
00:08:35.847 --> 00:08:37.368
Make sense?

121
00:08:37.368 --> 00:08:41.040
Now going back to to Chrome.

122
00:08:43.286 --> 00:08:49.146
If I open my app again,
in the application tab,

123
00:08:51.279 --> 00:08:56.146
In background services,
you have one section per app.

124
00:08:56.146 --> 00:08:58.130
So you can see here.

125
00:08:59.760 --> 00:09:01.617
What's going on in the background?

126
00:09:01.617 --> 00:09:07.329
What's the idea if my service
worker wakes up, during the night,

127
00:09:07.329 --> 00:09:11.422
and is doing something
with some of those APIs.

128
00:09:11.422 --> 00:09:17.252
I will be able to see that
here if I record the activity.

129
00:09:17.252 --> 00:09:22.489
So I can open the inspector,
record the activity, and wait.

130
00:09:22.489 --> 00:09:28.474
Meanings are worth wherever, and they will
see every event here, and also I can,

131
00:09:28.474 --> 00:09:34.307
of course use a console and see what the
service worker was doing in the console.

132
00:09:34.307 --> 00:09:36.958
We will see this in action later.

133
00:09:36.958 --> 00:09:42.586
And within the service worker section,
we also have a place here,

134
00:09:42.586 --> 00:09:48.917
it's probably from push to periodic sync,
to actually test the push API,

135
00:09:48.917 --> 00:09:55.070
the background sync API, and
the periodic background sync API, okay?

136
00:09:55.070 --> 00:10:00.562
So these are the tools that we will
be using in the next few hours.

137
00:10:00.562 --> 00:10:05.712
Unfortunately, Safari has no
debugging tools like this, and

138
00:10:05.712 --> 00:10:11.165
on Firefox, it's kind of also for
service workers, not so good.

139
00:10:11.165 --> 00:10:16.253
Also, Firefox is not supporting
background sync or the others.

140
00:10:16.253 --> 00:10:19.274
But for push, for
example on Safari or Firefox,

141
00:10:19.274 --> 00:10:21.644
you don't have any debugging tools.

142
00:10:21.644 --> 00:10:24.315
So you actually need to test that, and

143
00:10:24.315 --> 00:10:27.747
we will do that later
directly with the URL code.

144
00:10:27.747 --> 00:10:31.371
With chrome, we can test what happens.

145
00:10:31.371 --> 00:10:32.227
So what's the idea?

146
00:10:32.227 --> 00:10:36.959
For example, if I hit here push,
this is going to simulate

147
00:10:36.959 --> 00:10:41.708
that the server is sending out,
sending us that message.

148
00:10:41.708 --> 00:10:44.899
So if I hit here, nothing happens, but

149
00:10:44.899 --> 00:10:50.136
that's because my service worker
is doing nothing with a push.

150
00:10:50.136 --> 00:10:54.657
But without even explaining the API yet

151
00:10:54.657 --> 00:10:59.589
If I go to my service worker and
I add an event

152
00:10:59.589 --> 00:11:05.073
listener to the sales
object to the push event.

153
00:11:05.073 --> 00:11:10.020
Actually, we can send
a message to the console,

154
00:11:10.020 --> 00:11:14.014
we have received a pollution message.

155
00:11:14.014 --> 00:11:18.735
Now, because I have just change,
the service worker file,

156
00:11:18.735 --> 00:11:23.654
it's important to have that setting up,
they don't reload.

157
00:11:23.654 --> 00:11:28.756
So if I reload the page, I want to
make sure that my new service worker,

158
00:11:28.756 --> 00:11:34.746
it's actually ready Because if not it will
take the previous version by default.

159
00:11:34.746 --> 00:11:35.787
Make sense?

160
00:11:35.787 --> 00:11:41.409
This is just to show you the debugging
tools quickly so for example I can go here

161
00:11:41.409 --> 00:11:47.045
to notifications will actually push my
session maybe I can start recording.

162
00:11:47.045 --> 00:11:52.992
But have in mind this is a simulator only,
not the real push server.

163
00:11:52.992 --> 00:11:58.958
And if I refresh,
I can try to push a message.

164
00:11:58.958 --> 00:12:04.157
And in the console, you can see
that I've received the message.

165
00:12:04.157 --> 00:12:06.967
Of course, you can use any tool, so

166
00:12:06.967 --> 00:12:10.828
you can use our old friend debugger here,
okay?

167
00:12:10.828 --> 00:12:17.419
And you can try just again,
send another message,

168
00:12:17.419 --> 00:12:22.795
like from Frontend Masters push, okay?

169
00:12:22.795 --> 00:12:26.795
And now, my debugger stopped
there in the serviceWorker and

170
00:12:26.795 --> 00:12:30.097
I can actually see what's
inside the push event.

171
00:12:30.097 --> 00:12:32.580
And I can see there is data, okay?

172
00:12:32.580 --> 00:12:33.844
Target blah, blah, blah blah.

173
00:12:33.844 --> 00:12:37.841
And the data will contain
the message that we received.

174
00:12:37.841 --> 00:12:40.310
We will work with this later.

175
00:12:40.310 --> 00:12:45.164
But I wanna show you how
this actually works.

176
00:12:45.164 --> 00:12:48.611
You have a Service Worker and
the Service Worker will have a lot

177
00:12:48.611 --> 00:12:53.201
of event listeners listening for each of
the use cases for background execution.

