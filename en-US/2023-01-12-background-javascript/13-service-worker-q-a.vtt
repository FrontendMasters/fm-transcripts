WEBVTT

1
00:00:00.600 --> 00:00:05.010
What stops misbehaving, malicious or
poorly implemented service worker

2
00:00:05.010 --> 00:00:08.650
from draining your battery and
taking your bandwidth?

3
00:00:08.650 --> 00:00:12.648
&gt;&gt; That was one of the biggest reactions
against Service Worker when they appear

4
00:00:12.648 --> 00:00:14.520
for the first time.

5
00:00:14.520 --> 00:00:22.160
In fact, Apple was actually one of
the main enemies of Service Worker.

6
00:00:22.160 --> 00:00:27.030
So WebKit didn't want to implement
Service Worker because of that.

7
00:00:27.030 --> 00:00:29.009
There are still online,

8
00:00:30.965 --> 00:00:35.834
The discussions on Twitter between the
Chrome engineers and the Safari engineers.

9
00:00:38.142 --> 00:00:40.800
They're interesting to
analyze those threats anyway.

10
00:00:40.800 --> 00:00:45.160
But anyway,
they were fighting because of this.

11
00:00:45.160 --> 00:00:49.790
So, at the end,
Safari implemented service workers.

12
00:00:49.790 --> 00:00:54.286
They did their own implementation
to make it more secure according to

13
00:00:54.286 --> 00:00:55.533
the WebKit rules.

14
00:00:55.533 --> 00:01:00.412
But actually, the first thing that
happens is that the browser is always in

15
00:01:00.412 --> 00:01:04.390
charge of killing
the Service Worker process.

16
00:01:04.390 --> 00:01:08.877
So if you're taking too much time,
too much thread for a long time,

17
00:01:08.877 --> 00:01:10.700
it will kill you.

18
00:01:10.700 --> 00:01:13.630
It depends on the browser's
implementation at that point.

19
00:01:13.630 --> 00:01:18.118
So if the browser thinks
that you are overusing this,

20
00:01:18.118 --> 00:01:21.720
it will kill you, that's the first part.

21
00:01:21.720 --> 00:01:26.836
So if you have a while true, and in the
while true you are making math operations,

22
00:01:26.836 --> 00:01:30.675
so you are consuming CPU doing nothing for
an infinite loop,

23
00:01:30.675 --> 00:01:33.180
at one point the browser will kill you.

24
00:01:34.350 --> 00:01:35.940
It will kill your thread.

25
00:01:35.940 --> 00:01:40.230
The other part is how to
wake up the Service Worker.

26
00:01:40.230 --> 00:01:45.067
You can't wake up the Service Worker
whenever you want,

27
00:01:45.067 --> 00:01:48.520
only with the pre-arranged use cases.

28
00:01:48.520 --> 00:01:51.250
And one of the use cases is web push.

29
00:01:51.250 --> 00:01:55.624
So your server can send a message
to the Service Worker and

30
00:01:55.624 --> 00:01:59.360
that will wake up the Service Worker.

31
00:01:59.360 --> 00:02:04.723
So at this point, the next question will
be what is stopping me to sending a push

32
00:02:04.723 --> 00:02:10.190
message every 30 seconds and waking up
my Service Worker every 30 seconds?

33
00:02:10.190 --> 00:02:16.306
Well, the browsers already,
Thought about that and

34
00:02:16.306 --> 00:02:22.850
the answer was that,
that silent notifications are forbidden.

35
00:02:22.850 --> 00:02:29.090
That means that every time you wake up
a Service Worker because of a web push,

36
00:02:29.090 --> 00:02:33.586
you're forced to notify
the user something in the OS.

37
00:02:33.586 --> 00:02:39.328
If you don't do that, you have a time sum,
three seconds after you're waking up.

38
00:02:39.328 --> 00:02:42.955
So you woke up,
you have three to five seconds,

39
00:02:42.955 --> 00:02:48.590
it depends on the implementation,
to show a notification to a user.

40
00:02:48.590 --> 00:02:53.737
If you don't do that, and you say,
I'm not going to notify the user,

41
00:02:53.737 --> 00:02:56.540
a generic notification will appear.

42
00:02:57.810 --> 00:03:02.419
So the browser will generate
the notification that says something like,

43
00:03:02.419 --> 00:03:07.250
this website has been updated and
because we don't want that as developers,

44
00:03:07.250 --> 00:03:09.870
because we wanna customize the message.

45
00:03:10.910 --> 00:03:15.838
So that's like how
the browsers are trying to

46
00:03:15.838 --> 00:03:20.247
keep service workers within a secure and

47
00:03:20.247 --> 00:03:25.810
good citizen way of life
within the browser.

48
00:03:25.810 --> 00:03:30.992
And so far, so
we've been working with Service Worker for

49
00:03:30.992 --> 00:03:35.963
five years,
we didn't find big problems actually, so

50
00:03:35.963 --> 00:03:38.838
it's actually working so far.

51
00:03:38.838 --> 00:03:43.738
&gt;&gt; Is it the case that there's no OS
level interaction required if the webpage

52
00:03:43.738 --> 00:03:45.850
is actually in the foreground?

53
00:03:45.850 --> 00:03:50.086
So, that's like,
it requires an OS level notification or

54
00:03:50.086 --> 00:03:55.185
interaction if it's trying to wake
up a backgrounded service worker.

55
00:03:55.185 --> 00:03:58.192
But that would be irritating
if you're just using Twitter-

56
00:03:58.192 --> 00:03:59.712
&gt;&gt; The idea is that it will be irritating

57
00:03:59.712 --> 00:04:02.170
for the user to receive
a notification every 30 seconds.

58
00:04:02.170 --> 00:04:06.590
So, the user will actually go and
say, revoke permission.

59
00:04:06.590 --> 00:04:09.524
And if it's revoking permission for
notification,

60
00:04:09.524 --> 00:04:12.522
then you won't be able to send
any more push messages so

61
00:04:12.522 --> 00:04:16.910
you won't be able to wake up the service
worker anymore, that's how it works.

